command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	61505	File	data/converged/CVE-2019-13638~_patch/src_util.c								
ANR	61506	DeclStmt									
ANR	61507	Decl							void	void ( char const * )	makedirs
ANR	61508	ClassDef	<unnamed>	59:8:1507:1599							
ANR	61509	DeclStmt									
ANR	61510	Decl							dev_t	dev_t	dev
ANR	61511	DeclStmt									
ANR	61512	Decl							ino_t	ino_t	ino
ANR	61513	DeclStmt									
ANR	61514	Decl							enum file_id_type	enum file_id_type	type
ANR	61515	DeclStmt									
ANR	61516	Decl							bool	bool	queued_output
ANR	61517	DeclStmt									
ANR	61518	Decl									file_id
ANR	61519	Function	file_id_hasher	69:0:1674:1827							
ANR	61520	FunctionDef	"file_id_hasher (void const * entry , size_t table_size)"		61519	0					
ANR	61521	CompoundStatement		71:0:1742:1827	61519	0					
ANR	61522	IdentifierDeclStatement	file_id const * e = entry ;	72:2:1746:1770	61519	0	True				
ANR	61523	IdentifierDecl	* e = entry		61519	0					
ANR	61524	IdentifierDeclType	file_id const *		61519	0					
ANR	61525	Identifier	e		61519	1					
ANR	61526	AssignmentExpression	* e = entry		61519	2		=			
ANR	61527	Identifier	entry		61519	0					
ANR	61528	Identifier	entry		61519	1					
ANR	61529	IdentifierDeclStatement	size_t i = e -> ino + e -> dev ;	73:2:1774:1800	61519	1	True				
ANR	61530	IdentifierDecl	i = e -> ino + e -> dev		61519	0					
ANR	61531	IdentifierDeclType	size_t		61519	0					
ANR	61532	Identifier	i		61519	1					
ANR	61533	AssignmentExpression	i = e -> ino + e -> dev		61519	2		=			
ANR	61534	Identifier	i		61519	0					
ANR	61535	AdditiveExpression	e -> ino + e -> dev		61519	1		+			
ANR	61536	PtrMemberAccess	e -> ino		61519	0					
ANR	61537	Identifier	e		61519	0					
ANR	61538	Identifier	ino		61519	1					
ANR	61539	PtrMemberAccess	e -> dev		61519	1					
ANR	61540	Identifier	e		61519	0					
ANR	61541	Identifier	dev		61519	1					
ANR	61542	ReturnStatement	return i % table_size ;	74:2:1804:1825	61519	2	True				
ANR	61543	MultiplicativeExpression	i % table_size		61519	0		%			
ANR	61544	Identifier	i		61519	0					
ANR	61545	Identifier	table_size		61519	1					
ANR	61546	ReturnType	static size_t		61519	1					
ANR	61547	Identifier	file_id_hasher		61519	2					
ANR	61548	ParameterList	"void const * entry , size_t table_size"		61519	3					
ANR	61549	Parameter	void const * entry	70:16:1704:1720	61519	0	True				
ANR	61550	ParameterType	void const *		61519	0					
ANR	61551	Identifier	entry		61519	1					
ANR	61552	Parameter	size_t table_size	70:35:1723:1739	61519	1	True				
ANR	61553	ParameterType	size_t		61519	0					
ANR	61554	Identifier	table_size		61519	1					
ANR	61555	CFGEntryNode	ENTRY		61519		True				
ANR	61556	CFGExitNode	EXIT		61519		True				
ANR	61557	Symbol	e -> dev		61519						
ANR	61558	Symbol	entry		61519						
ANR	61559	Symbol	table_size		61519						
ANR	61560	Symbol	e -> ino		61519						
ANR	61561	Symbol	e		61519						
ANR	61562	Symbol	i		61519						
ANR	61563	Symbol	* e		61519						
ANR	61564	Function	file_id_comparator	79:0:1884:2071							
ANR	61565	FunctionDef	"file_id_comparator (void const * entry1 , void const * entry2)"		61564	0					
ANR	61566	CompoundStatement		81:0:1956:2071	61564	0					
ANR	61567	IdentifierDeclStatement	file_id const * e1 = entry1 ;	82:2:1960:1986	61564	0	True				
ANR	61568	IdentifierDecl	* e1 = entry1		61564	0					
ANR	61569	IdentifierDeclType	file_id const *		61564	0					
ANR	61570	Identifier	e1		61564	1					
ANR	61571	AssignmentExpression	* e1 = entry1		61564	2		=			
ANR	61572	Identifier	entry1		61564	0					
ANR	61573	Identifier	entry1		61564	1					
ANR	61574	IdentifierDeclStatement	file_id const * e2 = entry2 ;	83:2:1990:2016	61564	1	True				
ANR	61575	IdentifierDecl	* e2 = entry2		61564	0					
ANR	61576	IdentifierDeclType	file_id const *		61564	0					
ANR	61577	Identifier	e2		61564	1					
ANR	61578	AssignmentExpression	* e2 = entry2		61564	2		=			
ANR	61579	Identifier	entry2		61564	0					
ANR	61580	Identifier	entry2		61564	1					
ANR	61581	ReturnStatement	return ( e1 -> ino == e2 -> ino && e1 -> dev == e2 -> dev ) ;	84:2:2020:2069	61564	2	True				
ANR	61582	AndExpression	e1 -> ino == e2 -> ino && e1 -> dev == e2 -> dev		61564	0		&&			
ANR	61583	EqualityExpression	e1 -> ino == e2 -> ino		61564	0		==			
ANR	61584	PtrMemberAccess	e1 -> ino		61564	0					
ANR	61585	Identifier	e1		61564	0					
ANR	61586	Identifier	ino		61564	1					
ANR	61587	PtrMemberAccess	e2 -> ino		61564	1					
ANR	61588	Identifier	e2		61564	0					
ANR	61589	Identifier	ino		61564	1					
ANR	61590	EqualityExpression	e1 -> dev == e2 -> dev		61564	1		==			
ANR	61591	PtrMemberAccess	e1 -> dev		61564	0					
ANR	61592	Identifier	e1		61564	0					
ANR	61593	Identifier	dev		61564	1					
ANR	61594	PtrMemberAccess	e2 -> dev		61564	1					
ANR	61595	Identifier	e2		61564	0					
ANR	61596	Identifier	dev		61564	1					
ANR	61597	ReturnType	static bool		61564	1					
ANR	61598	Identifier	file_id_comparator		61564	2					
ANR	61599	ParameterList	"void const * entry1 , void const * entry2"		61564	3					
ANR	61600	Parameter	void const * entry1	80:20:1916:1933	61564	0	True				
ANR	61601	ParameterType	void const *		61564	0					
ANR	61602	Identifier	entry1		61564	1					
ANR	61603	Parameter	void const * entry2	80:40:1936:1953	61564	1	True				
ANR	61604	ParameterType	void const *		61564	0					
ANR	61605	Identifier	entry2		61564	1					
ANR	61606	CFGEntryNode	ENTRY		61564		True				
ANR	61607	CFGExitNode	EXIT		61564		True				
ANR	61608	Symbol	* e2		61564						
ANR	61609	Symbol	entry1		61564						
ANR	61610	Symbol	* e1		61564						
ANR	61611	Symbol	e1 -> ino		61564						
ANR	61612	Symbol	e2 -> ino		61564						
ANR	61613	Symbol	e1		61564						
ANR	61614	Symbol	e2 -> dev		61564						
ANR	61615	Symbol	e2		61564						
ANR	61616	Symbol	entry2		61564						
ANR	61617	Symbol	e1 -> dev		61564						
ANR	61618	DeclStmt									
ANR	61619	Decl							Hash_table	Hash_table *	file_id_table
ANR	61620	Function	init_backup_hash_table	91:0:2144:2316							
ANR	61621	FunctionDef	init_backup_hash_table ()		61620	0					
ANR	61622	CompoundStatement		93:0:2179:2316	61620	0					
ANR	61623	ExpressionStatement	"file_id_table = hash_initialize ( 0 , NULL , file_id_hasher , file_id_comparator , free )"	94:2:2183:2273	61620	0	True				
ANR	61624	AssignmentExpression	"file_id_table = hash_initialize ( 0 , NULL , file_id_hasher , file_id_comparator , free )"		61620	0		=			
ANR	61625	Identifier	file_id_table		61620	0					
ANR	61626	CallExpression	"hash_initialize ( 0 , NULL , file_id_hasher , file_id_comparator , free )"		61620	1					
ANR	61627	Callee	hash_initialize		61620	0					
ANR	61628	Identifier	hash_initialize		61620	0					
ANR	61629	ArgumentList	0		61620	1					
ANR	61630	Argument	0		61620	0					
ANR	61631	PrimaryExpression	0		61620	0					
ANR	61632	Argument	NULL		61620	1					
ANR	61633	Identifier	NULL		61620	0					
ANR	61634	Argument	file_id_hasher		61620	2					
ANR	61635	Identifier	file_id_hasher		61620	0					
ANR	61636	Argument	file_id_comparator		61620	3					
ANR	61637	Identifier	file_id_comparator		61620	0					
ANR	61638	Argument	free		61620	4					
ANR	61639	Identifier	free		61620	0					
ANR	61640	IfStatement	if ( ! file_id_table )		61620	1					
ANR	61641	Condition	! file_id_table	96:6:2281:2294	61620	0	True				
ANR	61642	UnaryOperationExpression	! file_id_table		61620	0					
ANR	61643	UnaryOperator	!		61620	0					
ANR	61644	Identifier	file_id_table		61620	1					
ANR	61645	ExpressionStatement	xalloc_die ( )	97:4:2301:2314	61620	1	True				
ANR	61646	CallExpression	xalloc_die ( )		61620	0					
ANR	61647	Callee	xalloc_die		61620	0					
ANR	61648	Identifier	xalloc_die		61620	0					
ANR	61649	ArgumentList			61620	1					
ANR	61650	ReturnType	void		61620	1					
ANR	61651	Identifier	init_backup_hash_table		61620	2					
ANR	61652	ParameterList			61620	3					
ANR	61653	CFGEntryNode	ENTRY		61620		True				
ANR	61654	CFGExitNode	EXIT		61620		True				
ANR	61655	Symbol	NULL		61620						
ANR	61656	Symbol	file_id_hasher		61620						
ANR	61657	Symbol	file_id_comparator		61620						
ANR	61658	Symbol	free		61620						
ANR	61659	Symbol	hash_initialize		61620						
ANR	61660	Symbol	file_id_table		61620						
ANR	61661	Function	__insert_file_id	100:0:2319:2771							
ANR	61662	FunctionDef	"__insert_file_id (struct stat const * st , enum file_id_type type)"		61661	0					
ANR	61663	CompoundStatement		102:0:2401:2771	61661	0					
ANR	61664	IdentifierDeclStatement	file_id * p ;	103:3:2406:2416	61661	0	True				
ANR	61665	IdentifierDecl	* p		61661	0					
ANR	61666	IdentifierDeclType	file_id *		61661	0					
ANR	61667	Identifier	p		61661	1					
ANR	61668	Statement	static	104:3:2421:2426	61661	1	True				
ANR	61669	IdentifierDeclStatement	file_id * next_slot ;	104:10:2428:2446	61661	2	True				
ANR	61670	IdentifierDecl	* next_slot		61661	0					
ANR	61671	IdentifierDeclType	file_id *		61661	0					
ANR	61672	Identifier	next_slot		61661	1					
ANR	61673	IfStatement	if ( ! next_slot )		61661	3					
ANR	61674	Condition	! next_slot	106:7:2456:2465	61661	0	True				
ANR	61675	UnaryOperationExpression	! next_slot		61661	0					
ANR	61676	UnaryOperator	!		61661	0					
ANR	61677	Identifier	next_slot		61661	1					
ANR	61678	ExpressionStatement	next_slot = xmalloc ( sizeof * next_slot )	107:5:2473:2512	61661	1	True				
ANR	61679	AssignmentExpression	next_slot = xmalloc ( sizeof * next_slot )		61661	0		=			
ANR	61680	Identifier	next_slot		61661	0					
ANR	61681	CallExpression	xmalloc ( sizeof * next_slot )		61661	1					
ANR	61682	Callee	xmalloc		61661	0					
ANR	61683	Identifier	xmalloc		61661	0					
ANR	61684	ArgumentList	sizeof * next_slot		61661	1					
ANR	61685	Argument	sizeof * next_slot		61661	0					
ANR	61686	SizeofExpression	sizeof * next_slot		61661	0					
ANR	61687	Sizeof	sizeof		61661	0					
ANR	61688	UnaryOperationExpression	* next_slot		61661	1					
ANR	61689	UnaryOperator	*		61661	0					
ANR	61690	Identifier	next_slot		61661	1					
ANR	61691	ExpressionStatement	next_slot -> dev = st -> st_dev	108:3:2517:2544	61661	4	True				
ANR	61692	AssignmentExpression	next_slot -> dev = st -> st_dev		61661	0		=			
ANR	61693	PtrMemberAccess	next_slot -> dev		61661	0					
ANR	61694	Identifier	next_slot		61661	0					
ANR	61695	Identifier	dev		61661	1					
ANR	61696	PtrMemberAccess	st -> st_dev		61661	1					
ANR	61697	Identifier	st		61661	0					
ANR	61698	Identifier	st_dev		61661	1					
ANR	61699	ExpressionStatement	next_slot -> ino = st -> st_ino	109:3:2549:2576	61661	5	True				
ANR	61700	AssignmentExpression	next_slot -> ino = st -> st_ino		61661	0		=			
ANR	61701	PtrMemberAccess	next_slot -> ino		61661	0					
ANR	61702	Identifier	next_slot		61661	0					
ANR	61703	Identifier	ino		61661	1					
ANR	61704	PtrMemberAccess	st -> st_ino		61661	1					
ANR	61705	Identifier	st		61661	0					
ANR	61706	Identifier	st_ino		61661	1					
ANR	61707	ExpressionStatement	next_slot -> queued_output = false	110:3:2581:2613	61661	6	True				
ANR	61708	AssignmentExpression	next_slot -> queued_output = false		61661	0		=			
ANR	61709	PtrMemberAccess	next_slot -> queued_output		61661	0					
ANR	61710	Identifier	next_slot		61661	0					
ANR	61711	Identifier	queued_output		61661	1					
ANR	61712	Identifier	false		61661	1					
ANR	61713	ExpressionStatement	"p = hash_insert ( file_id_table , next_slot )"	111:3:2618:2660	61661	7	True				
ANR	61714	AssignmentExpression	"p = hash_insert ( file_id_table , next_slot )"		61661	0		=			
ANR	61715	Identifier	p		61661	0					
ANR	61716	CallExpression	"hash_insert ( file_id_table , next_slot )"		61661	1					
ANR	61717	Callee	hash_insert		61661	0					
ANR	61718	Identifier	hash_insert		61661	0					
ANR	61719	ArgumentList	file_id_table		61661	1					
ANR	61720	Argument	file_id_table		61661	0					
ANR	61721	Identifier	file_id_table		61661	0					
ANR	61722	Argument	next_slot		61661	1					
ANR	61723	Identifier	next_slot		61661	0					
ANR	61724	IfStatement	if ( ! p )		61661	8					
ANR	61725	Condition	! p	112:7:2669:2670	61661	0	True				
ANR	61726	UnaryOperationExpression	! p		61661	0					
ANR	61727	UnaryOperator	!		61661	0					
ANR	61728	Identifier	p		61661	1					
ANR	61729	ExpressionStatement	xalloc_die ( )	113:5:2678:2691	61661	1	True				
ANR	61730	CallExpression	xalloc_die ( )		61661	0					
ANR	61731	Callee	xalloc_die		61661	0					
ANR	61732	Identifier	xalloc_die		61661	0					
ANR	61733	ArgumentList			61661	1					
ANR	61734	IfStatement	if ( p == next_slot )		61661	9					
ANR	61735	Condition	p == next_slot	114:7:2700:2713	61661	0	True				
ANR	61736	EqualityExpression	p == next_slot		61661	0		==			
ANR	61737	Identifier	p		61661	0					
ANR	61738	Identifier	next_slot		61661	1					
ANR	61739	ExpressionStatement	next_slot = NULL	115:5:2721:2737	61661	1	True				
ANR	61740	AssignmentExpression	next_slot = NULL		61661	0		=			
ANR	61741	Identifier	next_slot		61661	0					
ANR	61742	Identifier	NULL		61661	1					
ANR	61743	ExpressionStatement	p -> type = type	116:3:2742:2756	61661	10	True				
ANR	61744	AssignmentExpression	p -> type = type		61661	0		=			
ANR	61745	PtrMemberAccess	p -> type		61661	0					
ANR	61746	Identifier	p		61661	0					
ANR	61747	Identifier	type		61661	1					
ANR	61748	Identifier	type		61661	1					
ANR	61749	ReturnStatement	return p ;	117:3:2761:2769	61661	11	True				
ANR	61750	Identifier	p		61661	0					
ANR	61751	ReturnType	static file_id *		61661	1					
ANR	61752	Identifier	__insert_file_id		61661	2					
ANR	61753	ParameterList	"struct stat const * st , enum file_id_type type"		61661	3					
ANR	61754	Parameter	struct stat const * st	101:18:2354:2374	61661	0	True				
ANR	61755	ParameterType	struct stat const *		61661	0					
ANR	61756	Identifier	st		61661	1					
ANR	61757	Parameter	enum file_id_type type	101:41:2377:2398	61661	1	True				
ANR	61758	ParameterType	enum file_id_type		61661	0					
ANR	61759	Identifier	type		61661	1					
ANR	61760	CFGEntryNode	ENTRY		61661		True				
ANR	61761	CFGExitNode	EXIT		61661		True				
ANR	61762	Symbol	st		61661						
ANR	61763	Symbol	NULL		61661						
ANR	61764	Symbol	* st		61661						
ANR	61765	Symbol	next_slot		61661						
ANR	61766	Symbol	next_slot -> ino		61661						
ANR	61767	Symbol	st -> st_dev		61661						
ANR	61768	Symbol	false		61661						
ANR	61769	Symbol	next_slot -> dev		61661						
ANR	61770	Symbol	type		61661						
ANR	61771	Symbol	p -> type		61661						
ANR	61772	Symbol	file_id_table		61661						
ANR	61773	Symbol	p		61661						
ANR	61774	Symbol	* next_slot		61661						
ANR	61775	Symbol	xmalloc		61661						
ANR	61776	Symbol	next_slot -> queued_output		61661						
ANR	61777	Symbol	* p		61661						
ANR	61778	Symbol	st -> st_ino		61661						
ANR	61779	Symbol	hash_insert		61661						
ANR	61780	Function	__lookup_file_id	120:0:2774:2934							
ANR	61781	FunctionDef	__lookup_file_id (struct stat const * st)		61780	0					
ANR	61782	CompoundStatement		122:0:2832:2934	61780	0					
ANR	61783	IdentifierDeclStatement	file_id f ;	123:2:2836:2845	61780	0	True				
ANR	61784	IdentifierDecl	f		61780	0					
ANR	61785	IdentifierDeclType	file_id		61780	0					
ANR	61786	Identifier	f		61780	1					
ANR	61787	ExpressionStatement	f . dev = st -> st_dev	125:2:2850:2868	61780	1	True				
ANR	61788	AssignmentExpression	f . dev = st -> st_dev		61780	0		=			
ANR	61789	MemberAccess	f . dev		61780	0					
ANR	61790	Identifier	f		61780	0					
ANR	61791	Identifier	dev		61780	1					
ANR	61792	PtrMemberAccess	st -> st_dev		61780	1					
ANR	61793	Identifier	st		61780	0					
ANR	61794	Identifier	st_dev		61780	1					
ANR	61795	ExpressionStatement	f . ino = st -> st_ino	126:2:2872:2890	61780	2	True				
ANR	61796	AssignmentExpression	f . ino = st -> st_ino		61780	0		=			
ANR	61797	MemberAccess	f . ino		61780	0					
ANR	61798	Identifier	f		61780	0					
ANR	61799	Identifier	ino		61780	1					
ANR	61800	PtrMemberAccess	st -> st_ino		61780	1					
ANR	61801	Identifier	st		61780	0					
ANR	61802	Identifier	st_ino		61780	1					
ANR	61803	ReturnStatement	"return hash_lookup ( file_id_table , & f ) ;"	127:2:2894:2932	61780	3	True				
ANR	61804	CallExpression	"hash_lookup ( file_id_table , & f )"		61780	0					
ANR	61805	Callee	hash_lookup		61780	0					
ANR	61806	Identifier	hash_lookup		61780	0					
ANR	61807	ArgumentList	file_id_table		61780	1					
ANR	61808	Argument	file_id_table		61780	0					
ANR	61809	Identifier	file_id_table		61780	0					
ANR	61810	Argument	& f		61780	1					
ANR	61811	UnaryOperationExpression	& f		61780	0					
ANR	61812	UnaryOperator	&		61780	0					
ANR	61813	Identifier	f		61780	1					
ANR	61814	ReturnType	static file_id *		61780	1					
ANR	61815	Identifier	__lookup_file_id		61780	2					
ANR	61816	ParameterList	struct stat const * st		61780	3					
ANR	61817	Parameter	struct stat const * st	121:18:2809:2829	61780	0	True				
ANR	61818	ParameterType	struct stat const *		61780	0					
ANR	61819	Identifier	st		61780	1					
ANR	61820	CFGEntryNode	ENTRY		61780		True				
ANR	61821	CFGExitNode	EXIT		61780		True				
ANR	61822	Symbol	st		61780						
ANR	61823	Symbol	f . ino		61780						
ANR	61824	Symbol	* st		61780						
ANR	61825	Symbol	f		61780						
ANR	61826	Symbol	f . dev		61780						
ANR	61827	Symbol	st -> st_dev		61780						
ANR	61828	Symbol	hash_lookup		61780						
ANR	61829	Symbol	st -> st_ino		61780						
ANR	61830	Symbol	& f		61780						
ANR	61831	Symbol	file_id_table		61780						
ANR	61832	Function	insert_file_id	133:0:3077:3178							
ANR	61833	FunctionDef	"insert_file_id (struct stat const * st , enum file_id_type type)"		61832	0					
ANR	61834	CompoundStatement		135:0:3145:3178	61832	0					
ANR	61835	ExpressionStatement	"__insert_file_id ( st , type )"	136:2:3149:3176	61832	0	True				
ANR	61836	CallExpression	"__insert_file_id ( st , type )"		61832	0					
ANR	61837	Callee	__insert_file_id		61832	0					
ANR	61838	Identifier	__insert_file_id		61832	0					
ANR	61839	ArgumentList	st		61832	1					
ANR	61840	Argument	st		61832	0					
ANR	61841	Identifier	st		61832	0					
ANR	61842	Argument	type		61832	1					
ANR	61843	Identifier	type		61832	0					
ANR	61844	ReturnType	void		61832	1					
ANR	61845	Identifier	insert_file_id		61832	2					
ANR	61846	ParameterList	"struct stat const * st , enum file_id_type type"		61832	3					
ANR	61847	Parameter	struct stat const * st	134:16:3098:3118	61832	0	True				
ANR	61848	ParameterType	struct stat const *		61832	0					
ANR	61849	Identifier	st		61832	1					
ANR	61850	Parameter	enum file_id_type type	134:39:3121:3142	61832	1	True				
ANR	61851	ParameterType	enum file_id_type		61832	0					
ANR	61852	Identifier	type		61832	1					
ANR	61853	CFGEntryNode	ENTRY		61832		True				
ANR	61854	CFGExitNode	EXIT		61832		True				
ANR	61855	Symbol	st		61832						
ANR	61856	Symbol	type		61832						
ANR	61857	Function	lookup_file_id	142:0:3293:3423							
ANR	61858	FunctionDef	lookup_file_id (struct stat const * st)		61857	0					
ANR	61859	CompoundStatement		144:0:3350:3423	61857	0					
ANR	61860	IdentifierDeclStatement	file_id * p = __lookup_file_id ( st ) ;	145:2:3354:3388	61857	0	True				
ANR	61861	IdentifierDecl	* p = __lookup_file_id ( st )		61857	0					
ANR	61862	IdentifierDeclType	file_id *		61857	0					
ANR	61863	Identifier	p		61857	1					
ANR	61864	AssignmentExpression	* p = __lookup_file_id ( st )		61857	2		=			
ANR	61865	Identifier	p		61857	0					
ANR	61866	CallExpression	__lookup_file_id ( st )		61857	1					
ANR	61867	Callee	__lookup_file_id		61857	0					
ANR	61868	Identifier	__lookup_file_id		61857	0					
ANR	61869	ArgumentList	st		61857	1					
ANR	61870	Argument	st		61857	0					
ANR	61871	Identifier	st		61857	0					
ANR	61872	ReturnStatement	return p ? p -> type : UNKNOWN ;	147:2:3393:3421	61857	1	True				
ANR	61873	ConditionalExpression	p ? p -> type : UNKNOWN		61857	0					
ANR	61874	Condition	p		61857	0					
ANR	61875	Identifier	p		61857	0					
ANR	61876	PtrMemberAccess	p -> type		61857	1					
ANR	61877	Identifier	p		61857	0					
ANR	61878	Identifier	type		61857	1					
ANR	61879	Identifier	UNKNOWN		61857	2					
ANR	61880	ReturnType	enum file_id_type		61857	1					
ANR	61881	Identifier	lookup_file_id		61857	2					
ANR	61882	ParameterList	struct stat const * st		61857	3					
ANR	61883	Parameter	struct stat const * st	143:16:3327:3347	61857	0	True				
ANR	61884	ParameterType	struct stat const *		61857	0					
ANR	61885	Identifier	st		61857	1					
ANR	61886	CFGEntryNode	ENTRY		61857		True				
ANR	61887	CFGExitNode	EXIT		61857		True				
ANR	61888	Symbol	p		61857						
ANR	61889	Symbol	st		61857						
ANR	61890	Symbol	* p		61857						
ANR	61891	Symbol	UNKNOWN		61857						
ANR	61892	Symbol	p -> type		61857						
ANR	61893	Symbol	__lookup_file_id		61857						
ANR	61894	Function	set_queued_output	150:0:3426:3621							
ANR	61895	FunctionDef	"set_queued_output (struct stat const * st , bool queued_output)"		61894	0					
ANR	61896	CompoundStatement		152:0:3493:3621	61894	0					
ANR	61897	IdentifierDeclStatement	file_id * p = __lookup_file_id ( st ) ;	153:2:3497:3531	61894	0	True				
ANR	61898	IdentifierDecl	* p = __lookup_file_id ( st )		61894	0					
ANR	61899	IdentifierDeclType	file_id *		61894	0					
ANR	61900	Identifier	p		61894	1					
ANR	61901	AssignmentExpression	* p = __lookup_file_id ( st )		61894	2		=			
ANR	61902	Identifier	p		61894	0					
ANR	61903	CallExpression	__lookup_file_id ( st )		61894	1					
ANR	61904	Callee	__lookup_file_id		61894	0					
ANR	61905	Identifier	__lookup_file_id		61894	0					
ANR	61906	ArgumentList	st		61894	1					
ANR	61907	Argument	st		61894	0					
ANR	61908	Identifier	st		61894	0					
ANR	61909	IfStatement	if ( ! p )		61894	1					
ANR	61910	Condition	! p	155:6:3540:3542	61894	0	True				
ANR	61911	UnaryOperationExpression	! p		61894	0					
ANR	61912	UnaryOperator	!		61894	0					
ANR	61913	Identifier	p		61894	1					
ANR	61914	ExpressionStatement	"p = __insert_file_id ( st , UNKNOWN )"	156:4:3549:3583	61894	1	True				
ANR	61915	AssignmentExpression	"p = __insert_file_id ( st , UNKNOWN )"		61894	0		=			
ANR	61916	Identifier	p		61894	0					
ANR	61917	CallExpression	"__insert_file_id ( st , UNKNOWN )"		61894	1					
ANR	61918	Callee	__insert_file_id		61894	0					
ANR	61919	Identifier	__insert_file_id		61894	0					
ANR	61920	ArgumentList	st		61894	1					
ANR	61921	Argument	st		61894	0					
ANR	61922	Identifier	st		61894	0					
ANR	61923	Argument	UNKNOWN		61894	1					
ANR	61924	Identifier	UNKNOWN		61894	0					
ANR	61925	ExpressionStatement	p -> queued_output = queued_output	157:2:3587:3619	61894	2	True				
ANR	61926	AssignmentExpression	p -> queued_output = queued_output		61894	0		=			
ANR	61927	PtrMemberAccess	p -> queued_output		61894	0					
ANR	61928	Identifier	p		61894	0					
ANR	61929	Identifier	queued_output		61894	1					
ANR	61930	Identifier	queued_output		61894	1					
ANR	61931	ReturnType	void		61894	1					
ANR	61932	Identifier	set_queued_output		61894	2					
ANR	61933	ParameterList	"struct stat const * st , bool queued_output"		61894	3					
ANR	61934	Parameter	struct stat const * st	151:19:3450:3470	61894	0	True				
ANR	61935	ParameterType	struct stat const *		61894	0					
ANR	61936	Identifier	st		61894	1					
ANR	61937	Parameter	bool queued_output	151:42:3473:3490	61894	1	True				
ANR	61938	ParameterType	bool		61894	0					
ANR	61939	Identifier	queued_output		61894	1					
ANR	61940	CFGEntryNode	ENTRY		61894		True				
ANR	61941	CFGExitNode	EXIT		61894		True				
ANR	61942	Symbol	p		61894						
ANR	61943	Symbol	st		61894						
ANR	61944	Symbol	__insert_file_id		61894						
ANR	61945	Symbol	queued_output		61894						
ANR	61946	Symbol	p -> queued_output		61894						
ANR	61947	Symbol	* p		61894						
ANR	61948	Symbol	UNKNOWN		61894						
ANR	61949	Symbol	__lookup_file_id		61894						
ANR	61950	Function	has_queued_output	160:0:3624:3744							
ANR	61951	FunctionDef	has_queued_output (struct stat const * st)		61950	0					
ANR	61952	CompoundStatement		162:0:3671:3744	61950	0					
ANR	61953	IdentifierDeclStatement	file_id * p = __lookup_file_id ( st ) ;	163:2:3675:3709	61950	0	True				
ANR	61954	IdentifierDecl	* p = __lookup_file_id ( st )		61950	0					
ANR	61955	IdentifierDeclType	file_id *		61950	0					
ANR	61956	Identifier	p		61950	1					
ANR	61957	AssignmentExpression	* p = __lookup_file_id ( st )		61950	2		=			
ANR	61958	Identifier	p		61950	0					
ANR	61959	CallExpression	__lookup_file_id ( st )		61950	1					
ANR	61960	Callee	__lookup_file_id		61950	0					
ANR	61961	Identifier	__lookup_file_id		61950	0					
ANR	61962	ArgumentList	st		61950	1					
ANR	61963	Argument	st		61950	0					
ANR	61964	Identifier	st		61950	0					
ANR	61965	ReturnStatement	return p && p -> queued_output ;	165:2:3714:3742	61950	1	True				
ANR	61966	AndExpression	p && p -> queued_output		61950	0		&&			
ANR	61967	Identifier	p		61950	0					
ANR	61968	PtrMemberAccess	p -> queued_output		61950	1					
ANR	61969	Identifier	p		61950	0					
ANR	61970	Identifier	queued_output		61950	1					
ANR	61971	ReturnType	bool		61950	1					
ANR	61972	Identifier	has_queued_output		61950	2					
ANR	61973	ParameterList	struct stat const * st		61950	3					
ANR	61974	Parameter	struct stat const * st	161:19:3648:3668	61950	0	True				
ANR	61975	ParameterType	struct stat const *		61950	0					
ANR	61976	Identifier	st		61950	1					
ANR	61977	CFGEntryNode	ENTRY		61950		True				
ANR	61978	CFGExitNode	EXIT		61950		True				
ANR	61979	Symbol	p		61950						
ANR	61980	Symbol	st		61950						
ANR	61981	Symbol	p -> queued_output		61950						
ANR	61982	Symbol	* p		61950						
ANR	61983	Symbol	__lookup_file_id		61950						
ANR	61984	Function	contains_slash	168:0:3747:3885							
ANR	61985	FunctionDef	contains_slash (const char * s)		61984	0					
ANR	61986	CompoundStatement		170:0:3809:3885	61984	0					
ANR	61987	ForStatement	for ( ; * s ; s ++ )		61984	0					
ANR	61988	Condition	* s	171:9:3820:3821	61984	0	True				
ANR	61989	UnaryOperationExpression	* s		61984	0					
ANR	61990	UnaryOperator	*		61984	0					
ANR	61991	Identifier	s		61984	1					
ANR	61992	PostIncDecOperationExpression	s ++	171:13:3824:3826	61984	1	True				
ANR	61993	Identifier	s		61984	0					
ANR	61994	IncDec	++		61984	1					
ANR	61995	IfStatement	if ( ISSLASH ( * s ) )		61984	2					
ANR	61996	Condition	ISSLASH ( * s )	172:8:3837:3847	61984	0	True				
ANR	61997	CallExpression	ISSLASH ( * s )		61984	0					
ANR	61998	Callee	ISSLASH		61984	0					
ANR	61999	Identifier	ISSLASH		61984	0					
ANR	62000	ArgumentList	* s		61984	1					
ANR	62001	Argument	* s		61984	0					
ANR	62002	UnaryOperationExpression	* s		61984	0					
ANR	62003	UnaryOperator	*		61984	0					
ANR	62004	Identifier	s		61984	1					
ANR	62005	ReturnStatement	return true ;	173:6:3856:3867	61984	1	True				
ANR	62006	Identifier	true		61984	0					
ANR	62007	ReturnStatement	return false ;	174:2:3871:3883	61984	1	True				
ANR	62008	Identifier	false		61984	0					
ANR	62009	ReturnType	static bool _GL_ATTRIBUTE_PURE		61984	1					
ANR	62010	Identifier	contains_slash		61984	2					
ANR	62011	ParameterList	const char * s		61984	3					
ANR	62012	Parameter	const char * s	169:16:3794:3806	61984	0	True				
ANR	62013	ParameterType	const char *		61984	0					
ANR	62014	Identifier	s		61984	1					
ANR	62015	CFGEntryNode	ENTRY		61984		True				
ANR	62016	CFGExitNode	EXIT		61984		True				
ANR	62017	Symbol	s		61984						
ANR	62018	Symbol	true		61984						
ANR	62019	Symbol	false		61984						
ANR	62020	Symbol	* s		61984						
ANR	62021	Symbol	ISSLASH		61984						
ANR	62022	Function	copy_attr_error	179:0:3903:4214							
ANR	62023	FunctionDef	"copy_attr_error (struct error_context * ctx , char const * fmt)"		62022	0					
ANR	62024	CompoundStatement		181:0:3981:4214	62022	0					
ANR	62025	IdentifierDeclStatement	int err = errno ;	182:2:3985:4000	62022	0	True				
ANR	62026	IdentifierDecl	err = errno		62022	0					
ANR	62027	IdentifierDeclType	int		62022	0					
ANR	62028	Identifier	err		62022	1					
ANR	62029	AssignmentExpression	err = errno		62022	2		=			
ANR	62030	Identifier	errno		62022	0					
ANR	62031	Identifier	errno		62022	1					
ANR	62032	IdentifierDeclStatement	va_list ap ;	183:2:4004:4014	62022	1	True				
ANR	62033	IdentifierDecl	ap		62022	0					
ANR	62034	IdentifierDeclType	va_list		62022	0					
ANR	62035	Identifier	ap		62022	1					
ANR	62036	IfStatement	if ( err != ENOSYS && err != ENOTSUP && err != EPERM )		62022	2					
ANR	62037	Condition	err != ENOSYS && err != ENOTSUP && err != EPERM	185:6:4023:4069	62022	0	True				
ANR	62038	AndExpression	err != ENOSYS && err != ENOTSUP && err != EPERM		62022	0		&&			
ANR	62039	EqualityExpression	err != ENOSYS		62022	0		!=			
ANR	62040	Identifier	err		62022	0					
ANR	62041	Identifier	ENOSYS		62022	1					
ANR	62042	AndExpression	err != ENOTSUP && err != EPERM		62022	1		&&			
ANR	62043	EqualityExpression	err != ENOTSUP		62022	0		!=			
ANR	62044	Identifier	err		62022	0					
ANR	62045	Identifier	ENOTSUP		62022	1					
ANR	62046	EqualityExpression	err != EPERM		62022	1		!=			
ANR	62047	Identifier	err		62022	0					
ANR	62048	Identifier	EPERM		62022	1					
ANR	62049	CompoundStatement		6:4:94:94	62022	1					
ANR	62050	ExpressionStatement	"va_start ( ap , fmt )"	188:6:4137:4155	62022	0	True				
ANR	62051	CallExpression	"va_start ( ap , fmt )"		62022	0					
ANR	62052	Callee	va_start		62022	0					
ANR	62053	Identifier	va_start		62022	0					
ANR	62054	ArgumentList	ap		62022	1					
ANR	62055	Argument	ap		62022	0					
ANR	62056	Identifier	ap		62022	0					
ANR	62057	Argument	fmt		62022	1					
ANR	62058	Identifier	fmt		62022	0					
ANR	62059	ExpressionStatement	"verror ( 0 , err , fmt , ap )"	189:6:4163:4187	62022	1	True				
ANR	62060	CallExpression	"verror ( 0 , err , fmt , ap )"		62022	0					
ANR	62061	Callee	verror		62022	0					
ANR	62062	Identifier	verror		62022	0					
ANR	62063	ArgumentList	0		62022	1					
ANR	62064	Argument	0		62022	0					
ANR	62065	PrimaryExpression	0		62022	0					
ANR	62066	Argument	err		62022	1					
ANR	62067	Identifier	err		62022	0					
ANR	62068	Argument	fmt		62022	2					
ANR	62069	Identifier	fmt		62022	0					
ANR	62070	Argument	ap		62022	3					
ANR	62071	Identifier	ap		62022	0					
ANR	62072	ExpressionStatement	va_end ( ap )	190:6:4195:4206	62022	2	True				
ANR	62073	CallExpression	va_end ( ap )		62022	0					
ANR	62074	Callee	va_end		62022	0					
ANR	62075	Identifier	va_end		62022	0					
ANR	62076	ArgumentList	ap		62022	1					
ANR	62077	Argument	ap		62022	0					
ANR	62078	Identifier	ap		62022	0					
ANR	62079	ReturnType	static void		62022	1					
ANR	62080	Identifier	copy_attr_error		62022	2					
ANR	62081	ParameterList	"struct error_context * ctx , char const * fmt"		62022	3					
ANR	62082	Parameter	struct error_context * ctx	180:17:3932:3956	62022	0	True				
ANR	62083	ParameterType	struct error_context *		62022	0					
ANR	62084	Identifier	ctx		62022	1					
ANR	62085	Parameter	char const * fmt	180:44:3959:3973	62022	1	True				
ANR	62086	ParameterType	char const *		62022	0					
ANR	62087	Identifier	fmt		62022	1					
ANR	62088	CFGEntryNode	ENTRY		62022		True				
ANR	62089	CFGExitNode	EXIT		62022		True				
ANR	62090	Symbol	errno		62022						
ANR	62091	Symbol	err		62022						
ANR	62092	Symbol	EPERM		62022						
ANR	62093	Symbol	ctx		62022						
ANR	62094	Symbol	ENOTSUP		62022						
ANR	62095	Symbol	ENOSYS		62022						
ANR	62096	Symbol	fmt		62022						
ANR	62097	Symbol	ap		62022						
ANR	62098	Function	copy_attr_quote	194:0:4217:4325							
ANR	62099	FunctionDef	"copy_attr_quote (struct error_context * ctx , char const * str)"		62098	0					
ANR	62100	CompoundStatement		196:0:4298:4325	62098	0					
ANR	62101	ReturnStatement	return quotearg ( str ) ;	197:2:4302:4323	62098	0	True				
ANR	62102	CallExpression	quotearg ( str )		62098	0					
ANR	62103	Callee	quotearg		62098	0					
ANR	62104	Identifier	quotearg		62098	0					
ANR	62105	ArgumentList	str		62098	1					
ANR	62106	Argument	str		62098	0					
ANR	62107	Identifier	str		62098	0					
ANR	62108	ReturnType	static char const *		62098	1					
ANR	62109	Identifier	copy_attr_quote		62098	2					
ANR	62110	ParameterList	"struct error_context * ctx , char const * str"		62098	3					
ANR	62111	Parameter	struct error_context * ctx	195:17:4254:4278	62098	0	True				
ANR	62112	ParameterType	struct error_context *		62098	0					
ANR	62113	Identifier	ctx		62098	1					
ANR	62114	Parameter	char const * str	195:44:4281:4295	62098	1	True				
ANR	62115	ParameterType	char const *		62098	0					
ANR	62116	Identifier	str		62098	1					
ANR	62117	CFGEntryNode	ENTRY		62098		True				
ANR	62118	CFGExitNode	EXIT		62098		True				
ANR	62119	Symbol	str		62098						
ANR	62120	Symbol	quotearg		62098						
ANR	62121	Symbol	ctx		62098						
ANR	62122	Function	copy_attr_free	200:0:4328:4402							
ANR	62123	FunctionDef	"copy_attr_free (struct error_context * ctx , char const * str)"		62122	0					
ANR	62124	CompoundStatement		202:0:4400:4402	62122	0					
ANR	62125	ReturnType	static void		62122	1					
ANR	62126	Identifier	copy_attr_free		62122	2					
ANR	62127	ParameterList	"struct error_context * ctx , char const * str"		62122	3					
ANR	62128	Parameter	struct error_context * ctx	201:16:4356:4380	62122	0	True				
ANR	62129	ParameterType	struct error_context *		62122	0					
ANR	62130	Identifier	ctx		62122	1					
ANR	62131	Parameter	char const * str	201:43:4383:4397	62122	1	True				
ANR	62132	ParameterType	char const *		62122	0					
ANR	62133	Identifier	str		62122	1					
ANR	62134	CFGEntryNode	ENTRY		62122		True				
ANR	62135	CFGExitNode	EXIT		62122		True				
ANR	62136	Symbol	str		62122						
ANR	62137	Symbol	ctx		62122						
ANR	62138	Function	copy_attr_check	205:0:4405:4582							
ANR	62139	FunctionDef	"copy_attr_check (const char * name , struct error_context * ctx)"		62138	0					
ANR	62140	CompoundStatement		207:0:4478:4582	62138	0					
ANR	62141	IdentifierDeclStatement	"int action = attr_copy_action ( name , ctx ) ;"	208:1:4481:4522	62138	0	True				
ANR	62142	IdentifierDecl	"action = attr_copy_action ( name , ctx )"		62138	0					
ANR	62143	IdentifierDeclType	int		62138	0					
ANR	62144	Identifier	action		62138	1					
ANR	62145	AssignmentExpression	"action = attr_copy_action ( name , ctx )"		62138	2		=			
ANR	62146	Identifier	action		62138	0					
ANR	62147	CallExpression	"attr_copy_action ( name , ctx )"		62138	1					
ANR	62148	Callee	attr_copy_action		62138	0					
ANR	62149	Identifier	attr_copy_action		62138	0					
ANR	62150	ArgumentList	name		62138	1					
ANR	62151	Argument	name		62138	0					
ANR	62152	Identifier	name		62138	0					
ANR	62153	Argument	ctx		62138	1					
ANR	62154	Identifier	ctx		62138	0					
ANR	62155	ReturnStatement	return action == 0 || action == ATTR_ACTION_PERMISSIONS ;	209:1:4525:4580	62138	1	True				
ANR	62156	OrExpression	action == 0 || action == ATTR_ACTION_PERMISSIONS		62138	0		||			
ANR	62157	EqualityExpression	action == 0		62138	0		==			
ANR	62158	Identifier	action		62138	0					
ANR	62159	PrimaryExpression	0		62138	1					
ANR	62160	EqualityExpression	action == ATTR_ACTION_PERMISSIONS		62138	1		==			
ANR	62161	Identifier	action		62138	0					
ANR	62162	Identifier	ATTR_ACTION_PERMISSIONS		62138	1					
ANR	62163	ReturnType	static int		62138	1					
ANR	62164	Identifier	copy_attr_check		62138	2					
ANR	62165	ParameterList	"const char * name , struct error_context * ctx"		62138	3					
ANR	62166	Parameter	const char * name	206:17:4433:4448	62138	0	True				
ANR	62167	ParameterType	const char *		62138	0					
ANR	62168	Identifier	name		62138	1					
ANR	62169	Parameter	struct error_context * ctx	206:35:4451:4475	62138	1	True				
ANR	62170	ParameterType	struct error_context *		62138	0					
ANR	62171	Identifier	ctx		62138	1					
ANR	62172	CFGEntryNode	ENTRY		62138		True				
ANR	62173	CFGExitNode	EXIT		62138		True				
ANR	62174	Symbol	ATTR_ACTION_PERMISSIONS		62138						
ANR	62175	Symbol	ctx		62138						
ANR	62176	Symbol	name		62138						
ANR	62177	Symbol	action		62138						
ANR	62178	Symbol	attr_copy_action		62138						
ANR	62179	Function	copy_attr	212:0:4585:5040							
ANR	62180	FunctionDef	"copy_attr (char const * src_path , char const * dst_path)"		62179	0					
ANR	62181	CompoundStatement		214:0:4651:5040	62179	0					
ANR	62182	Statement	struct	215:2:4655:4660	62179	0	True				
ANR	62183	Statement	error_context	215:9:4662:4674	62179	1	True				
ANR	62184	Statement	ctx	215:23:4676:4678	62179	2	True				
ANR	62185	Statement	=	215:27:4680:4680	62179	3	True				
ANR	62186	CompoundStatement		3:2:32:32	62179	4					
ANR	62187	Statement	.	217:4:4690:4690	62179	0	True				
ANR	62188	Statement	error	217:5:4691:4695	62179	1	True				
ANR	62189	Statement	=	217:11:4697:4697	62179	2	True				
ANR	62190	Statement	copy_attr_error	217:13:4699:4713	62179	3	True				
ANR	62191	Statement	","	217:28:4714:4714	62179	4	True				
ANR	62192	Statement	.	218:4:4720:4720	62179	5	True				
ANR	62193	Statement	quote	218:5:4721:4725	62179	6	True				
ANR	62194	Statement	=	218:11:4727:4727	62179	7	True				
ANR	62195	Statement	copy_attr_quote	218:13:4729:4743	62179	8	True				
ANR	62196	Statement	","	218:28:4744:4744	62179	9	True				
ANR	62197	Statement	.	219:4:4750:4750	62179	10	True				
ANR	62198	Statement	quote_free	219:5:4751:4760	62179	11	True				
ANR	62199	Statement	=	219:16:4762:4762	62179	12	True				
ANR	62200	Statement	copy_attr_free	219:18:4764:4777	62179	13	True				
ANR	62201	ExpressionStatement		220:3:4782:4782	62179	5	True				
ANR	62202	ReturnStatement	"return attr_copy_file ( src_path , dst_path , copy_attr_check , & ctx ) ;"	224:2:4973:5038	62179	6	True				
ANR	62203	CallExpression	"attr_copy_file ( src_path , dst_path , copy_attr_check , & ctx )"		62179	0					
ANR	62204	Callee	attr_copy_file		62179	0					
ANR	62205	Identifier	attr_copy_file		62179	0					
ANR	62206	ArgumentList	src_path		62179	1					
ANR	62207	Argument	src_path		62179	0					
ANR	62208	Identifier	src_path		62179	0					
ANR	62209	Argument	dst_path		62179	1					
ANR	62210	Identifier	dst_path		62179	0					
ANR	62211	Argument	copy_attr_check		62179	2					
ANR	62212	Identifier	copy_attr_check		62179	0					
ANR	62213	Argument	& ctx		62179	3					
ANR	62214	UnaryOperationExpression	& ctx		62179	0					
ANR	62215	UnaryOperator	&		62179	0					
ANR	62216	Identifier	ctx		62179	1					
ANR	62217	ReturnType	static int		62179	1					
ANR	62218	Identifier	copy_attr		62179	2					
ANR	62219	ParameterList	"char const * src_path , char const * dst_path"		62179	3					
ANR	62220	Parameter	char const * src_path	213:11:4607:4626	62179	0	True				
ANR	62221	ParameterType	char const *		62179	0					
ANR	62222	Identifier	src_path		62179	1					
ANR	62223	Parameter	char const * dst_path	213:33:4629:4648	62179	1	True				
ANR	62224	ParameterType	char const *		62179	0					
ANR	62225	Identifier	dst_path		62179	1					
ANR	62226	CFGEntryNode	ENTRY		62179		True				
ANR	62227	CFGExitNode	EXIT		62179		True				
ANR	62228	Symbol	attr_copy_file		62179						
ANR	62229	Symbol	copy_attr_check		62179						
ANR	62230	Symbol	& ctx		62179						
ANR	62231	Symbol	src_path		62179						
ANR	62232	Symbol	dst_path		62179						
ANR	62233	Function	copy_attr	229:0:5067:5147							
ANR	62234	FunctionDef	"copy_attr (char const * src_path , char const * dst_path)"		62233	0					
ANR	62235	CompoundStatement		231:0:5133:5147	62233	0					
ANR	62236	ReturnStatement	return 0 ;	232:2:5137:5145	62233	0	True				
ANR	62237	PrimaryExpression	0		62233	0					
ANR	62238	ReturnType	static int		62233	1					
ANR	62239	Identifier	copy_attr		62233	2					
ANR	62240	ParameterList	"char const * src_path , char const * dst_path"		62233	3					
ANR	62241	Parameter	char const * src_path	230:11:5089:5108	62233	0	True				
ANR	62242	ParameterType	char const *		62233	0					
ANR	62243	Identifier	src_path		62233	1					
ANR	62244	Parameter	char const * dst_path	230:33:5111:5130	62233	1	True				
ANR	62245	ParameterType	char const *		62233	0					
ANR	62246	Identifier	dst_path		62233	1					
ANR	62247	CFGEntryNode	ENTRY		62233		True				
ANR	62248	CFGExitNode	EXIT		62233		True				
ANR	62249	Symbol	src_path		62233						
ANR	62250	Symbol	dst_path		62233						
ANR	62251	Function	set_file_attributes	237:0:5158:7076							
ANR	62252	FunctionDef	"set_file_attributes (char const * to , enum file_attributes attr , char const * from , const struct stat * st , mode_t mode , struct timespec * new_time)"		62251	0					
ANR	62253	CompoundStatement		241:0:5322:7076	62251	0					
ANR	62254	IfStatement	if ( attr & FA_TIMES )		62251	0					
ANR	62255	Condition	attr & FA_TIMES	242:6:5330:5344	62251	0	True				
ANR	62256	BitAndExpression	attr & FA_TIMES		62251	0		&			
ANR	62257	Identifier	attr		62251	0					
ANR	62258	Identifier	FA_TIMES		62251	1					
ANR	62259	CompoundStatement		4:6:36:60	62251	1					
ANR	62260	IdentifierDeclStatement	struct timespec times [ 2 ] ;	244:6:5359:5383	62251	0	True				
ANR	62261	IdentifierDecl	times [ 2 ]		62251	0					
ANR	62262	IdentifierDeclType	struct timespec [ 2 ]		62251	0					
ANR	62263	Identifier	times		62251	1					
ANR	62264	PrimaryExpression	2		62251	2					
ANR	62265	IfStatement	if ( new_time )		62251	1					
ANR	62266	Condition	new_time	245:10:5395:5402	62251	0	True				
ANR	62267	Identifier	new_time		62251	0					
ANR	62268	ExpressionStatement	times [ 0 ] = times [ 1 ] = * new_time	246:1:5406:5437	62251	1	True				
ANR	62269	AssignmentExpression	times [ 0 ] = times [ 1 ] = * new_time		62251	0		=			
ANR	62270	ArrayIndexing	times [ 0 ]		62251	0					
ANR	62271	Identifier	times		62251	0					
ANR	62272	PrimaryExpression	0		62251	1					
ANR	62273	AssignmentExpression	times [ 1 ] = * new_time		62251	1		=			
ANR	62274	ArrayIndexing	times [ 1 ]		62251	0					
ANR	62275	Identifier	times		62251	0					
ANR	62276	PrimaryExpression	1		62251	1					
ANR	62277	UnaryOperationExpression	* new_time		62251	1					
ANR	62278	UnaryOperator	*		62251	0					
ANR	62279	Identifier	new_time		62251	1					
ANR	62280	ElseStatement	else		62251	0					
ANR	62281	CompoundStatement		8:8:135:135	62251	0					
ANR	62282	ExpressionStatement	times [ 0 ] = get_stat_atime ( st )	249:3:5463:5493	62251	0	True				
ANR	62283	AssignmentExpression	times [ 0 ] = get_stat_atime ( st )		62251	0		=			
ANR	62284	ArrayIndexing	times [ 0 ]		62251	0					
ANR	62285	Identifier	times		62251	0					
ANR	62286	PrimaryExpression	0		62251	1					
ANR	62287	CallExpression	get_stat_atime ( st )		62251	1					
ANR	62288	Callee	get_stat_atime		62251	0					
ANR	62289	Identifier	get_stat_atime		62251	0					
ANR	62290	ArgumentList	st		62251	1					
ANR	62291	Argument	st		62251	0					
ANR	62292	Identifier	st		62251	0					
ANR	62293	ExpressionStatement	times [ 1 ] = get_stat_mtime ( st )	250:3:5498:5528	62251	1	True				
ANR	62294	AssignmentExpression	times [ 1 ] = get_stat_mtime ( st )		62251	0		=			
ANR	62295	ArrayIndexing	times [ 1 ]		62251	0					
ANR	62296	Identifier	times		62251	0					
ANR	62297	PrimaryExpression	1		62251	1					
ANR	62298	CallExpression	get_stat_mtime ( st )		62251	1					
ANR	62299	Callee	get_stat_mtime		62251	0					
ANR	62300	Identifier	get_stat_mtime		62251	0					
ANR	62301	ArgumentList	st		62251	1					
ANR	62302	Argument	st		62251	0					
ANR	62303	Identifier	st		62251	0					
ANR	62304	IfStatement	"if ( safe_lutimens ( to , times ) != 0 )"		62251	2					
ANR	62305	Condition	"safe_lutimens ( to , times ) != 0"	252:10:5543:5572	62251	0	True				
ANR	62306	EqualityExpression	"safe_lutimens ( to , times ) != 0"		62251	0		!=			
ANR	62307	CallExpression	"safe_lutimens ( to , times )"		62251	0					
ANR	62308	Callee	safe_lutimens		62251	0					
ANR	62309	Identifier	safe_lutimens		62251	0					
ANR	62310	ArgumentList	to		62251	1					
ANR	62311	Argument	to		62251	0					
ANR	62312	Identifier	to		62251	0					
ANR	62313	Argument	times		62251	1					
ANR	62314	Identifier	times		62251	0					
ANR	62315	PrimaryExpression	0		62251	1					
ANR	62316	ExpressionStatement	"pfatal ( ""Failed to set the timestamps of %s %s"" , S_ISLNK ( mode ) ? ""symbolic link"" : ""file"" , quotearg ( to ) )"	253:1:5576:5686	62251	1	True				
ANR	62317	CallExpression	"pfatal ( ""Failed to set the timestamps of %s %s"" , S_ISLNK ( mode ) ? ""symbolic link"" : ""file"" , quotearg ( to ) )"		62251	0					
ANR	62318	Callee	pfatal		62251	0					
ANR	62319	Identifier	pfatal		62251	0					
ANR	62320	ArgumentList	"""Failed to set the timestamps of %s %s"""		62251	1					
ANR	62321	Argument	"""Failed to set the timestamps of %s %s"""		62251	0					
ANR	62322	PrimaryExpression	"""Failed to set the timestamps of %s %s"""		62251	0					
ANR	62323	Argument	"S_ISLNK ( mode ) ? ""symbolic link"" : ""file"""		62251	1					
ANR	62324	ConditionalExpression	"S_ISLNK ( mode ) ? ""symbolic link"" : ""file"""		62251	0					
ANR	62325	Condition	S_ISLNK ( mode )		62251	0					
ANR	62326	CallExpression	S_ISLNK ( mode )		62251	0					
ANR	62327	Callee	S_ISLNK		62251	0					
ANR	62328	Identifier	S_ISLNK		62251	0					
ANR	62329	ArgumentList	mode		62251	1					
ANR	62330	Argument	mode		62251	0					
ANR	62331	Identifier	mode		62251	0					
ANR	62332	PrimaryExpression	"""symbolic link"""		62251	1					
ANR	62333	PrimaryExpression	"""file"""		62251	2					
ANR	62334	Argument	quotearg ( to )		62251	2					
ANR	62335	CallExpression	quotearg ( to )		62251	0					
ANR	62336	Callee	quotearg		62251	0					
ANR	62337	Identifier	quotearg		62251	0					
ANR	62338	ArgumentList	to		62251	1					
ANR	62339	Argument	to		62251	0					
ANR	62340	Identifier	to		62251	0					
ANR	62341	IfStatement	if ( attr & FA_IDS )		62251	1					
ANR	62342	Condition	attr & FA_IDS	257:6:5700:5712	62251	0	True				
ANR	62343	BitAndExpression	attr & FA_IDS		62251	0		&			
ANR	62344	Identifier	attr		62251	0					
ANR	62345	Identifier	FA_IDS		62251	1					
ANR	62346	CompoundStatement		22:6:495:504	62251	1					
ANR	62347	Statement	static	259:6:5727:5732	62251	0	True				
ANR	62348	IdentifierDeclStatement	uid_t euid = ( uid_t ) - 1 ;	259:13:5734:5756	62251	1	True				
ANR	62349	IdentifierDecl	euid = ( uid_t ) - 1		62251	0					
ANR	62350	IdentifierDeclType	uid_t		62251	0					
ANR	62351	Identifier	euid		62251	1					
ANR	62352	AssignmentExpression	euid = ( uid_t ) - 1		62251	2		=			
ANR	62353	Identifier	euid		62251	0					
ANR	62354	CastExpression	( uid_t ) - 1		62251	1					
ANR	62355	CastTarget	uid_t		62251	0					
ANR	62356	UnaryOperationExpression	- 1		62251	1					
ANR	62357	UnaryOperator	-		62251	0					
ANR	62358	PrimaryExpression	1		62251	1					
ANR	62359	Statement	static	260:6:5764:5769	62251	2	True				
ANR	62360	IdentifierDeclStatement	gid_t egid = ( gid_t ) - 1 ;	260:13:5771:5793	62251	3	True				
ANR	62361	IdentifierDecl	egid = ( gid_t ) - 1		62251	0					
ANR	62362	IdentifierDeclType	gid_t		62251	0					
ANR	62363	Identifier	egid		62251	1					
ANR	62364	AssignmentExpression	egid = ( gid_t ) - 1		62251	2		=			
ANR	62365	Identifier	egid		62251	0					
ANR	62366	CastExpression	( gid_t ) - 1		62251	1					
ANR	62367	CastTarget	gid_t		62251	0					
ANR	62368	UnaryOperationExpression	- 1		62251	1					
ANR	62369	UnaryOperator	-		62251	0					
ANR	62370	PrimaryExpression	1		62251	1					
ANR	62371	IdentifierDeclStatement	uid_t uid ;	261:6:5801:5810	62251	4	True				
ANR	62372	IdentifierDecl	uid		62251	0					
ANR	62373	IdentifierDeclType	uid_t		62251	0					
ANR	62374	Identifier	uid		62251	1					
ANR	62375	IdentifierDeclStatement	uid_t gid ;	262:6:5818:5827	62251	5	True				
ANR	62376	IdentifierDecl	gid		62251	0					
ANR	62377	IdentifierDeclType	uid_t		62251	0					
ANR	62378	Identifier	gid		62251	1					
ANR	62379	IfStatement	if ( euid == - 1 )		62251	6					
ANR	62380	Condition	euid == - 1	264:10:5840:5849	62251	0	True				
ANR	62381	EqualityExpression	euid == - 1		62251	0		==			
ANR	62382	Identifier	euid		62251	0					
ANR	62383	UnaryOperationExpression	- 1		62251	1					
ANR	62384	UnaryOperator	-		62251	0					
ANR	62385	PrimaryExpression	1		62251	1					
ANR	62386	CompoundStatement		25:8:537:537	62251	1					
ANR	62387	ExpressionStatement	euid = geteuid ( )	266:3:5865:5882	62251	0	True				
ANR	62388	AssignmentExpression	euid = geteuid ( )		62251	0		=			
ANR	62389	Identifier	euid		62251	0					
ANR	62390	CallExpression	geteuid ( )		62251	1					
ANR	62391	Callee	geteuid		62251	0					
ANR	62392	Identifier	geteuid		62251	0					
ANR	62393	ArgumentList			62251	1					
ANR	62394	ExpressionStatement	egid = getegid ( )	267:3:5887:5904	62251	1	True				
ANR	62395	AssignmentExpression	egid = getegid ( )		62251	0		=			
ANR	62396	Identifier	egid		62251	0					
ANR	62397	CallExpression	getegid ( )		62251	1					
ANR	62398	Callee	getegid		62251	0					
ANR	62399	Identifier	getegid		62251	0					
ANR	62400	ArgumentList			62251	1					
ANR	62401	ExpressionStatement	uid = ( euid == st -> st_uid ) ? - 1 : st -> st_uid	269:6:5915:5959	62251	7	True				
ANR	62402	AssignmentExpression	uid = ( euid == st -> st_uid ) ? - 1 : st -> st_uid		62251	0		=			
ANR	62403	Identifier	uid		62251	0					
ANR	62404	ConditionalExpression	( euid == st -> st_uid ) ? - 1 : st -> st_uid		62251	1					
ANR	62405	Condition	euid == st -> st_uid		62251	0					
ANR	62406	EqualityExpression	euid == st -> st_uid		62251	0		==			
ANR	62407	Identifier	euid		62251	0					
ANR	62408	PtrMemberAccess	st -> st_uid		62251	1					
ANR	62409	Identifier	st		62251	0					
ANR	62410	Identifier	st_uid		62251	1					
ANR	62411	UnaryOperationExpression	- 1		62251	1					
ANR	62412	UnaryOperator	-		62251	0					
ANR	62413	PrimaryExpression	1		62251	1					
ANR	62414	PtrMemberAccess	st -> st_uid		62251	2					
ANR	62415	Identifier	st		62251	0					
ANR	62416	Identifier	st_uid		62251	1					
ANR	62417	ExpressionStatement	gid = ( egid == st -> st_gid ) ? - 1 : st -> st_gid	270:6:5967:6011	62251	8	True				
ANR	62418	AssignmentExpression	gid = ( egid == st -> st_gid ) ? - 1 : st -> st_gid		62251	0		=			
ANR	62419	Identifier	gid		62251	0					
ANR	62420	ConditionalExpression	( egid == st -> st_gid ) ? - 1 : st -> st_gid		62251	1					
ANR	62421	Condition	egid == st -> st_gid		62251	0					
ANR	62422	EqualityExpression	egid == st -> st_gid		62251	0		==			
ANR	62423	Identifier	egid		62251	0					
ANR	62424	PtrMemberAccess	st -> st_gid		62251	1					
ANR	62425	Identifier	st		62251	0					
ANR	62426	Identifier	st_gid		62251	1					
ANR	62427	UnaryOperationExpression	- 1		62251	1					
ANR	62428	UnaryOperator	-		62251	0					
ANR	62429	PrimaryExpression	1		62251	1					
ANR	62430	PtrMemberAccess	st -> st_gid		62251	2					
ANR	62431	Identifier	st		62251	0					
ANR	62432	Identifier	st_gid		62251	1					
ANR	62433	IfStatement	"if ( ( uid != - 1 || gid != - 1 ) && safe_lchown ( to , uid , gid ) != 0 && ( errno != EPERM || ( uid != - 1 && safe_lchown ( to , ( uid = - 1 ) , gid ) != 0 && errno != EPERM ) ) )"		62251	9					
ANR	62434	Condition	"( uid != - 1 || gid != - 1 ) && safe_lchown ( to , uid , gid ) != 0 && ( errno != EPERM || ( uid != - 1 && safe_lchown ( to , ( uid = - 1 ) , gid ) != 0 && errno != EPERM ) )"	274:10:6163:6337	62251	0	True				
ANR	62435	AndExpression	"( uid != - 1 || gid != - 1 ) && safe_lchown ( to , uid , gid ) != 0 && ( errno != EPERM || ( uid != - 1 && safe_lchown ( to , ( uid = - 1 ) , gid ) != 0 && errno != EPERM ) )"		62251	0		&&			
ANR	62436	OrExpression	uid != - 1 || gid != - 1		62251	0		||			
ANR	62437	EqualityExpression	uid != - 1		62251	0		!=			
ANR	62438	Identifier	uid		62251	0					
ANR	62439	UnaryOperationExpression	- 1		62251	1					
ANR	62440	UnaryOperator	-		62251	0					
ANR	62441	PrimaryExpression	1		62251	1					
ANR	62442	EqualityExpression	gid != - 1		62251	1		!=			
ANR	62443	Identifier	gid		62251	0					
ANR	62444	UnaryOperationExpression	- 1		62251	1					
ANR	62445	UnaryOperator	-		62251	0					
ANR	62446	PrimaryExpression	1		62251	1					
ANR	62447	AndExpression	"safe_lchown ( to , uid , gid ) != 0 && ( errno != EPERM || ( uid != - 1 && safe_lchown ( to , ( uid = - 1 ) , gid ) != 0 && errno != EPERM ) )"		62251	1		&&			
ANR	62448	EqualityExpression	"safe_lchown ( to , uid , gid ) != 0"		62251	0		!=			
ANR	62449	CallExpression	"safe_lchown ( to , uid , gid )"		62251	0					
ANR	62450	Callee	safe_lchown		62251	0					
ANR	62451	Identifier	safe_lchown		62251	0					
ANR	62452	ArgumentList	to		62251	1					
ANR	62453	Argument	to		62251	0					
ANR	62454	Identifier	to		62251	0					
ANR	62455	Argument	uid		62251	1					
ANR	62456	Identifier	uid		62251	0					
ANR	62457	Argument	gid		62251	2					
ANR	62458	Identifier	gid		62251	0					
ANR	62459	PrimaryExpression	0		62251	1					
ANR	62460	OrExpression	"errno != EPERM || ( uid != - 1 && safe_lchown ( to , ( uid = - 1 ) , gid ) != 0 && errno != EPERM )"		62251	1		||			
ANR	62461	EqualityExpression	errno != EPERM		62251	0		!=			
ANR	62462	Identifier	errno		62251	0					
ANR	62463	Identifier	EPERM		62251	1					
ANR	62464	AndExpression	"uid != - 1 && safe_lchown ( to , ( uid = - 1 ) , gid ) != 0 && errno != EPERM"		62251	1		&&			
ANR	62465	EqualityExpression	uid != - 1		62251	0		!=			
ANR	62466	Identifier	uid		62251	0					
ANR	62467	UnaryOperationExpression	- 1		62251	1					
ANR	62468	UnaryOperator	-		62251	0					
ANR	62469	PrimaryExpression	1		62251	1					
ANR	62470	AndExpression	"safe_lchown ( to , ( uid = - 1 ) , gid ) != 0 && errno != EPERM"		62251	1		&&			
ANR	62471	EqualityExpression	"safe_lchown ( to , ( uid = - 1 ) , gid ) != 0"		62251	0		!=			
ANR	62472	CallExpression	"safe_lchown ( to , ( uid = - 1 ) , gid )"		62251	0					
ANR	62473	Callee	safe_lchown		62251	0					
ANR	62474	Identifier	safe_lchown		62251	0					
ANR	62475	ArgumentList	to		62251	1					
ANR	62476	Argument	to		62251	0					
ANR	62477	Identifier	to		62251	0					
ANR	62478	Argument	uid = - 1		62251	1					
ANR	62479	AssignmentExpression	uid = - 1		62251	0		=			
ANR	62480	Identifier	uid		62251	0					
ANR	62481	UnaryOperationExpression	- 1		62251	1					
ANR	62482	UnaryOperator	-		62251	0					
ANR	62483	PrimaryExpression	1		62251	1					
ANR	62484	Argument	gid		62251	2					
ANR	62485	Identifier	gid		62251	0					
ANR	62486	PrimaryExpression	0		62251	1					
ANR	62487	EqualityExpression	errno != EPERM		62251	1		!=			
ANR	62488	Identifier	errno		62251	0					
ANR	62489	Identifier	EPERM		62251	1					
ANR	62490	ExpressionStatement	"pfatal ( ""Failed to set the %s of %s %s"" , ( uid == - 1 ) ? ""owner"" : ""owning group"" , S_ISLNK ( mode ) ? ""symbolic link"" : ""file"" , quotearg ( to ) )"	280:1:6341:6485	62251	1	True				
ANR	62491	CallExpression	"pfatal ( ""Failed to set the %s of %s %s"" , ( uid == - 1 ) ? ""owner"" : ""owning group"" , S_ISLNK ( mode ) ? ""symbolic link"" : ""file"" , quotearg ( to ) )"		62251	0					
ANR	62492	Callee	pfatal		62251	0					
ANR	62493	Identifier	pfatal		62251	0					
ANR	62494	ArgumentList	"""Failed to set the %s of %s %s"""		62251	1					
ANR	62495	Argument	"""Failed to set the %s of %s %s"""		62251	0					
ANR	62496	PrimaryExpression	"""Failed to set the %s of %s %s"""		62251	0					
ANR	62497	Argument	"( uid == - 1 ) ? ""owner"" : ""owning group"""		62251	1					
ANR	62498	ConditionalExpression	"( uid == - 1 ) ? ""owner"" : ""owning group"""		62251	0					
ANR	62499	Condition	uid == - 1		62251	0					
ANR	62500	EqualityExpression	uid == - 1		62251	0		==			
ANR	62501	Identifier	uid		62251	0					
ANR	62502	UnaryOperationExpression	- 1		62251	1					
ANR	62503	UnaryOperator	-		62251	0					
ANR	62504	PrimaryExpression	1		62251	1					
ANR	62505	PrimaryExpression	"""owner"""		62251	1					
ANR	62506	PrimaryExpression	"""owning group"""		62251	2					
ANR	62507	Argument	"S_ISLNK ( mode ) ? ""symbolic link"" : ""file"""		62251	2					
ANR	62508	ConditionalExpression	"S_ISLNK ( mode ) ? ""symbolic link"" : ""file"""		62251	0					
ANR	62509	Condition	S_ISLNK ( mode )		62251	0					
ANR	62510	CallExpression	S_ISLNK ( mode )		62251	0					
ANR	62511	Callee	S_ISLNK		62251	0					
ANR	62512	Identifier	S_ISLNK		62251	0					
ANR	62513	ArgumentList	mode		62251	1					
ANR	62514	Argument	mode		62251	0					
ANR	62515	Identifier	mode		62251	0					
ANR	62516	PrimaryExpression	"""symbolic link"""		62251	1					
ANR	62517	PrimaryExpression	"""file"""		62251	2					
ANR	62518	Argument	quotearg ( to )		62251	3					
ANR	62519	CallExpression	quotearg ( to )		62251	0					
ANR	62520	Callee	quotearg		62251	0					
ANR	62521	Identifier	quotearg		62251	0					
ANR	62522	ArgumentList	to		62251	1					
ANR	62523	Argument	to		62251	0					
ANR	62524	Identifier	to		62251	0					
ANR	62525	IfStatement	if ( attr & FA_XATTRS )		62251	2					
ANR	62526	Condition	attr & FA_XATTRS	285:6:6499:6514	62251	0	True				
ANR	62527	BitAndExpression	attr & FA_XATTRS		62251	0		&			
ANR	62528	Identifier	attr		62251	0					
ANR	62529	Identifier	FA_XATTRS		62251	1					
ANR	62530	IfStatement	"if ( copy_attr ( from , to ) != 0 && errno != ENOSYS && errno != ENOTSUP && errno != EPERM )"		62251	1					
ANR	62531	Condition	"copy_attr ( from , to ) != 0 && errno != ENOSYS && errno != ENOTSUP && errno != EPERM"	286:8:6525:6607	62251	0	True				
ANR	62532	AndExpression	"copy_attr ( from , to ) != 0 && errno != ENOSYS && errno != ENOTSUP && errno != EPERM"		62251	0		&&			
ANR	62533	EqualityExpression	"copy_attr ( from , to ) != 0"		62251	0		!=			
ANR	62534	CallExpression	"copy_attr ( from , to )"		62251	0					
ANR	62535	Callee	copy_attr		62251	0					
ANR	62536	Identifier	copy_attr		62251	0					
ANR	62537	ArgumentList	from		62251	1					
ANR	62538	Argument	from		62251	0					
ANR	62539	Identifier	from		62251	0					
ANR	62540	Argument	to		62251	1					
ANR	62541	Identifier	to		62251	0					
ANR	62542	PrimaryExpression	0		62251	1					
ANR	62543	AndExpression	errno != ENOSYS && errno != ENOTSUP && errno != EPERM		62251	1		&&			
ANR	62544	EqualityExpression	errno != ENOSYS		62251	0		!=			
ANR	62545	Identifier	errno		62251	0					
ANR	62546	Identifier	ENOSYS		62251	1					
ANR	62547	AndExpression	errno != ENOTSUP && errno != EPERM		62251	1		&&			
ANR	62548	EqualityExpression	errno != ENOTSUP		62251	0		!=			
ANR	62549	Identifier	errno		62251	0					
ANR	62550	Identifier	ENOTSUP		62251	1					
ANR	62551	EqualityExpression	errno != EPERM		62251	1		!=			
ANR	62552	Identifier	errno		62251	0					
ANR	62553	Identifier	EPERM		62251	1					
ANR	62554	ExpressionStatement	fatal_exit ( 0 )	288:6:6616:6630	62251	1	True				
ANR	62555	CallExpression	fatal_exit ( 0 )		62251	0					
ANR	62556	Callee	fatal_exit		62251	0					
ANR	62557	Identifier	fatal_exit		62251	0					
ANR	62558	ArgumentList	0		62251	1					
ANR	62559	Argument	0		62251	0					
ANR	62560	PrimaryExpression	0		62251	0					
ANR	62561	IfStatement	if ( attr & FA_MODE )		62251	3					
ANR	62562	Condition	attr & FA_MODE	289:6:6638:6651	62251	0	True				
ANR	62563	BitAndExpression	attr & FA_MODE		62251	0		&			
ANR	62564	Identifier	attr		62251	0					
ANR	62565	Identifier	FA_MODE		62251	1					
ANR	62566	CompoundStatement		50:4:1335:1335	62251	1					
ANR	62567	IfStatement	"if ( lchmod ( to , mode ) )"		62251	0					
ANR	62568	Condition	"lchmod ( to , mode )"	295:10:6866:6882	62251	0	True				
ANR	62569	CallExpression	"lchmod ( to , mode )"		62251	0					
ANR	62570	Callee	lchmod		62251	0					
ANR	62571	Identifier	lchmod		62251	0					
ANR	62572	ArgumentList	to		62251	1					
ANR	62573	Argument	to		62251	0					
ANR	62574	Identifier	to		62251	0					
ANR	62575	Argument	mode		62251	1					
ANR	62576	Identifier	mode		62251	0					
ANR	62577	ExpressionStatement	"pfatal ( ""Failed to set the permissions of %s %s"" , S_ISLNK ( mode ) ? ""symbolic link"" : ""file"" , quotearg ( to ) )"	299:1:6957:7068	62251	1	True				
ANR	62578	CallExpression	"pfatal ( ""Failed to set the permissions of %s %s"" , S_ISLNK ( mode ) ? ""symbolic link"" : ""file"" , quotearg ( to ) )"		62251	0					
ANR	62579	Callee	pfatal		62251	0					
ANR	62580	Identifier	pfatal		62251	0					
ANR	62581	ArgumentList	"""Failed to set the permissions of %s %s"""		62251	1					
ANR	62582	Argument	"""Failed to set the permissions of %s %s"""		62251	0					
ANR	62583	PrimaryExpression	"""Failed to set the permissions of %s %s"""		62251	0					
ANR	62584	Argument	"S_ISLNK ( mode ) ? ""symbolic link"" : ""file"""		62251	1					
ANR	62585	ConditionalExpression	"S_ISLNK ( mode ) ? ""symbolic link"" : ""file"""		62251	0					
ANR	62586	Condition	S_ISLNK ( mode )		62251	0					
ANR	62587	CallExpression	S_ISLNK ( mode )		62251	0					
ANR	62588	Callee	S_ISLNK		62251	0					
ANR	62589	Identifier	S_ISLNK		62251	0					
ANR	62590	ArgumentList	mode		62251	1					
ANR	62591	Argument	mode		62251	0					
ANR	62592	Identifier	mode		62251	0					
ANR	62593	PrimaryExpression	"""symbolic link"""		62251	1					
ANR	62594	PrimaryExpression	"""file"""		62251	2					
ANR	62595	Argument	quotearg ( to )		62251	2					
ANR	62596	CallExpression	quotearg ( to )		62251	0					
ANR	62597	Callee	quotearg		62251	0					
ANR	62598	Identifier	quotearg		62251	0					
ANR	62599	ArgumentList	to		62251	1					
ANR	62600	Argument	to		62251	0					
ANR	62601	Identifier	to		62251	0					
ANR	62602	ReturnType	void		62251	1					
ANR	62603	Identifier	set_file_attributes		62251	2					
ANR	62604	ParameterList	"char const * to , enum file_attributes attr , char const * from , const struct stat * st , mode_t mode , struct timespec * new_time"		62251	3					
ANR	62605	Parameter	char const * to	238:21:5184:5197	62251	0	True				
ANR	62606	ParameterType	char const *		62251	0					
ANR	62607	Identifier	to		62251	1					
ANR	62608	Parameter	enum file_attributes attr	238:37:5200:5224	62251	1	True				
ANR	62609	ParameterType	enum file_attributes		62251	0					
ANR	62610	Identifier	attr		62251	1					
ANR	62611	Parameter	char const * from	239:7:5234:5249	62251	2	True				
ANR	62612	ParameterType	char const *		62251	0					
ANR	62613	Identifier	from		62251	1					
ANR	62614	Parameter	const struct stat * st	239:25:5252:5272	62251	3	True				
ANR	62615	ParameterType	const struct stat *		62251	0					
ANR	62616	Identifier	st		62251	1					
ANR	62617	Parameter	mode_t mode	239:48:5275:5285	62251	4	True				
ANR	62618	ParameterType	mode_t		62251	0					
ANR	62619	Identifier	mode		62251	1					
ANR	62620	Parameter	struct timespec * new_time	240:7:5295:5319	62251	5	True				
ANR	62621	ParameterType	struct timespec *		62251	0					
ANR	62622	Identifier	new_time		62251	1					
ANR	62623	CFGEntryNode	ENTRY		62251		True				
ANR	62624	CFGExitNode	EXIT		62251		True				
ANR	62625	Symbol	safe_lutimens		62251						
ANR	62626	Symbol	quotearg		62251						
ANR	62627	Symbol	gid		62251						
ANR	62628	Symbol	st -> st_uid		62251						
ANR	62629	Symbol	* st		62251						
ANR	62630	Symbol	EPERM		62251						
ANR	62631	Symbol	FA_TIMES		62251						
ANR	62632	Symbol	ENOTSUP		62251						
ANR	62633	Symbol	ENOSYS		62251						
ANR	62634	Symbol	safe_lchown		62251						
ANR	62635	Symbol	copy_attr		62251						
ANR	62636	Symbol	mode		62251						
ANR	62637	Symbol	uid		62251						
ANR	62638	Symbol	times		62251						
ANR	62639	Symbol	egid		62251						
ANR	62640	Symbol	new_time		62251						
ANR	62641	Symbol	get_stat_atime		62251						
ANR	62642	Symbol	FA_XATTRS		62251						
ANR	62643	Symbol	FA_MODE		62251						
ANR	62644	Symbol	from		62251						
ANR	62645	Symbol	get_stat_mtime		62251						
ANR	62646	Symbol	attr		62251						
ANR	62647	Symbol	S_ISLNK		62251						
ANR	62648	Symbol	getegid		62251						
ANR	62649	Symbol	st		62251						
ANR	62650	Symbol	errno		62251						
ANR	62651	Symbol	* times		62251						
ANR	62652	Symbol	euid		62251						
ANR	62653	Symbol	FA_IDS		62251						
ANR	62654	Symbol	geteuid		62251						
ANR	62655	Symbol	* new_time		62251						
ANR	62656	Symbol	st -> st_gid		62251						
ANR	62657	Symbol	to		62251						
ANR	62658	Symbol	lchmod		62251						
ANR	62659	Function	create_backup_copy	305:0:7079:7359							
ANR	62660	FunctionDef	"create_backup_copy (char const * from , char const * to , const struct stat * st , bool to_dir_known_to_exist)"		62659	0					
ANR	62661	CompoundStatement		308:0:7202:7359	62659	0					
ANR	62662	ExpressionStatement	"copy_file ( from , to , NULL , 0 , st -> st_mode , to_dir_known_to_exist )"	309:2:7206:7271	62659	0	True				
ANR	62663	CallExpression	"copy_file ( from , to , NULL , 0 , st -> st_mode , to_dir_known_to_exist )"		62659	0					
ANR	62664	Callee	copy_file		62659	0					
ANR	62665	Identifier	copy_file		62659	0					
ANR	62666	ArgumentList	from		62659	1					
ANR	62667	Argument	from		62659	0					
ANR	62668	Identifier	from		62659	0					
ANR	62669	Argument	to		62659	1					
ANR	62670	Identifier	to		62659	0					
ANR	62671	Argument	NULL		62659	2					
ANR	62672	Identifier	NULL		62659	0					
ANR	62673	Argument	0		62659	3					
ANR	62674	PrimaryExpression	0		62659	0					
ANR	62675	Argument	st -> st_mode		62659	4					
ANR	62676	PtrMemberAccess	st -> st_mode		62659	0					
ANR	62677	Identifier	st		62659	0					
ANR	62678	Identifier	st_mode		62659	1					
ANR	62679	Argument	to_dir_known_to_exist		62659	5					
ANR	62680	Identifier	to_dir_known_to_exist		62659	0					
ANR	62681	ExpressionStatement	"set_file_attributes ( to , FA_TIMES | FA_IDS | FA_MODE , from , st , st -> st_mode , NULL )"	310:2:7275:7357	62659	1	True				
ANR	62682	CallExpression	"set_file_attributes ( to , FA_TIMES | FA_IDS | FA_MODE , from , st , st -> st_mode , NULL )"		62659	0					
ANR	62683	Callee	set_file_attributes		62659	0					
ANR	62684	Identifier	set_file_attributes		62659	0					
ANR	62685	ArgumentList	to		62659	1					
ANR	62686	Argument	to		62659	0					
ANR	62687	Identifier	to		62659	0					
ANR	62688	Argument	FA_TIMES | FA_IDS | FA_MODE		62659	1					
ANR	62689	InclusiveOrExpression	FA_TIMES | FA_IDS | FA_MODE		62659	0		|			
ANR	62690	Identifier	FA_TIMES		62659	0					
ANR	62691	InclusiveOrExpression	FA_IDS | FA_MODE		62659	1		|			
ANR	62692	Identifier	FA_IDS		62659	0					
ANR	62693	Identifier	FA_MODE		62659	1					
ANR	62694	Argument	from		62659	2					
ANR	62695	Identifier	from		62659	0					
ANR	62696	Argument	st		62659	3					
ANR	62697	Identifier	st		62659	0					
ANR	62698	Argument	st -> st_mode		62659	4					
ANR	62699	PtrMemberAccess	st -> st_mode		62659	0					
ANR	62700	Identifier	st		62659	0					
ANR	62701	Identifier	st_mode		62659	1					
ANR	62702	Argument	NULL		62659	5					
ANR	62703	Identifier	NULL		62659	0					
ANR	62704	ReturnType	static void		62659	1					
ANR	62705	Identifier	create_backup_copy		62659	2					
ANR	62706	ParameterList	"char const * from , char const * to , const struct stat * st , bool to_dir_known_to_exist"		62659	3					
ANR	62707	Parameter	char const * from	306:20:7111:7126	62659	0	True				
ANR	62708	ParameterType	char const *		62659	0					
ANR	62709	Identifier	from		62659	1					
ANR	62710	Parameter	char const * to	306:38:7129:7142	62659	1	True				
ANR	62711	ParameterType	char const *		62659	0					
ANR	62712	Identifier	to		62659	1					
ANR	62713	Parameter	const struct stat * st	306:54:7145:7165	62659	2	True				
ANR	62714	ParameterType	const struct stat *		62659	0					
ANR	62715	Identifier	st		62659	1					
ANR	62716	Parameter	bool to_dir_known_to_exist	307:6:7174:7199	62659	3	True				
ANR	62717	ParameterType	bool		62659	0					
ANR	62718	Identifier	to_dir_known_to_exist		62659	1					
ANR	62719	CFGEntryNode	ENTRY		62659		True				
ANR	62720	CFGExitNode	EXIT		62659		True				
ANR	62721	Symbol	st		62659						
ANR	62722	Symbol	NULL		62659						
ANR	62723	Symbol	* st		62659						
ANR	62724	Symbol	FA_IDS		62659						
ANR	62725	Symbol	FA_TIMES		62659						
ANR	62726	Symbol	FA_MODE		62659						
ANR	62727	Symbol	from		62659						
ANR	62728	Symbol	to		62659						
ANR	62729	Symbol	to_dir_known_to_exist		62659						
ANR	62730	Symbol	st -> st_mode		62659						
ANR	62731	Function	create_backup	313:0:7362:10769							
ANR	62732	FunctionDef	"create_backup (char const * to , const struct stat * to_st , bool leave_original)"		62731	0					
ANR	62733	CompoundStatement		315:0:7445:10769	62731	0					
ANR	62734	IfStatement	if ( to_st && ! ( S_ISREG ( to_st -> st_mode ) || S_ISLNK ( to_st -> st_mode ) ) )		62731	0					
ANR	62735	Condition	to_st && ! ( S_ISREG ( to_st -> st_mode ) || S_ISLNK ( to_st -> st_mode ) )	329:6:8102:8166	62731	0	True				
ANR	62736	AndExpression	to_st && ! ( S_ISREG ( to_st -> st_mode ) || S_ISLNK ( to_st -> st_mode ) )		62731	0		&&			
ANR	62737	Identifier	to_st		62731	0					
ANR	62738	UnaryOperationExpression	! ( S_ISREG ( to_st -> st_mode ) || S_ISLNK ( to_st -> st_mode ) )		62731	1					
ANR	62739	UnaryOperator	!		62731	0					
ANR	62740	OrExpression	S_ISREG ( to_st -> st_mode ) || S_ISLNK ( to_st -> st_mode )		62731	1		||			
ANR	62741	CallExpression	S_ISREG ( to_st -> st_mode )		62731	0					
ANR	62742	Callee	S_ISREG		62731	0					
ANR	62743	Identifier	S_ISREG		62731	0					
ANR	62744	ArgumentList	to_st -> st_mode		62731	1					
ANR	62745	Argument	to_st -> st_mode		62731	0					
ANR	62746	PtrMemberAccess	to_st -> st_mode		62731	0					
ANR	62747	Identifier	to_st		62731	0					
ANR	62748	Identifier	st_mode		62731	1					
ANR	62749	CallExpression	S_ISLNK ( to_st -> st_mode )		62731	1					
ANR	62750	Callee	S_ISLNK		62731	0					
ANR	62751	Identifier	S_ISLNK		62731	0					
ANR	62752	ArgumentList	to_st -> st_mode		62731	1					
ANR	62753	Argument	to_st -> st_mode		62731	0					
ANR	62754	PtrMemberAccess	to_st -> st_mode		62731	0					
ANR	62755	Identifier	to_st		62731	0					
ANR	62756	Identifier	st_mode		62731	1					
ANR	62757	ExpressionStatement	"fatal ( ""File %s is not a %s -- refusing to create backup"" , to , S_ISLNK ( to_st -> st_mode ) ? ""symbolic link"" : ""regular file"" )"	330:4:8173:8300	62731	1	True				
ANR	62758	CallExpression	"fatal ( ""File %s is not a %s -- refusing to create backup"" , to , S_ISLNK ( to_st -> st_mode ) ? ""symbolic link"" : ""regular file"" )"		62731	0					
ANR	62759	Callee	fatal		62731	0					
ANR	62760	Identifier	fatal		62731	0					
ANR	62761	ArgumentList	"""File %s is not a %s -- refusing to create backup"""		62731	1					
ANR	62762	Argument	"""File %s is not a %s -- refusing to create backup"""		62731	0					
ANR	62763	PrimaryExpression	"""File %s is not a %s -- refusing to create backup"""		62731	0					
ANR	62764	Argument	to		62731	1					
ANR	62765	Identifier	to		62731	0					
ANR	62766	Argument	"S_ISLNK ( to_st -> st_mode ) ? ""symbolic link"" : ""regular file"""		62731	2					
ANR	62767	ConditionalExpression	"S_ISLNK ( to_st -> st_mode ) ? ""symbolic link"" : ""regular file"""		62731	0					
ANR	62768	Condition	S_ISLNK ( to_st -> st_mode )		62731	0					
ANR	62769	CallExpression	S_ISLNK ( to_st -> st_mode )		62731	0					
ANR	62770	Callee	S_ISLNK		62731	0					
ANR	62771	Identifier	S_ISLNK		62731	0					
ANR	62772	ArgumentList	to_st -> st_mode		62731	1					
ANR	62773	Argument	to_st -> st_mode		62731	0					
ANR	62774	PtrMemberAccess	to_st -> st_mode		62731	0					
ANR	62775	Identifier	to_st		62731	0					
ANR	62776	Identifier	st_mode		62731	1					
ANR	62777	PrimaryExpression	"""symbolic link"""		62731	1					
ANR	62778	PrimaryExpression	"""regular file"""		62731	2					
ANR	62779	IfStatement	if ( to_st && lookup_file_id ( to_st ) == CREATED )		62731	1					
ANR	62780	Condition	to_st && lookup_file_id ( to_st ) == CREATED	333:6:8309:8350	62731	0	True				
ANR	62781	AndExpression	to_st && lookup_file_id ( to_st ) == CREATED		62731	0		&&			
ANR	62782	Identifier	to_st		62731	0					
ANR	62783	EqualityExpression	lookup_file_id ( to_st ) == CREATED		62731	1		==			
ANR	62784	CallExpression	lookup_file_id ( to_st )		62731	0					
ANR	62785	Callee	lookup_file_id		62731	0					
ANR	62786	Identifier	lookup_file_id		62731	0					
ANR	62787	ArgumentList	to_st		62731	1					
ANR	62788	Argument	to_st		62731	0					
ANR	62789	Identifier	to_st		62731	0					
ANR	62790	Identifier	CREATED		62731	1					
ANR	62791	CompoundStatement		20:4:911:911	62731	1					
ANR	62792	IfStatement	if ( debug & 4 )		62731	0					
ANR	62793	Condition	debug & 4	335:10:8369:8377	62731	0	True				
ANR	62794	BitAndExpression	debug & 4		62731	0		&			
ANR	62795	Identifier	debug		62731	0					
ANR	62796	PrimaryExpression	4		62731	1					
ANR	62797	ExpressionStatement	"say ( ""File %s already seen\\n"" , quotearg ( to ) )"	336:1:8381:8426	62731	1	True				
ANR	62798	CallExpression	"say ( ""File %s already seen\\n"" , quotearg ( to ) )"		62731	0					
ANR	62799	Callee	say		62731	0					
ANR	62800	Identifier	say		62731	0					
ANR	62801	ArgumentList	"""File %s already seen\\n"""		62731	1					
ANR	62802	Argument	"""File %s already seen\\n"""		62731	0					
ANR	62803	PrimaryExpression	"""File %s already seen\\n"""		62731	0					
ANR	62804	Argument	quotearg ( to )		62731	1					
ANR	62805	CallExpression	quotearg ( to )		62731	0					
ANR	62806	Callee	quotearg		62731	0					
ANR	62807	Identifier	quotearg		62731	0					
ANR	62808	ArgumentList	to		62731	1					
ANR	62809	Argument	to		62731	0					
ANR	62810	Identifier	to		62731	0					
ANR	62811	ElseStatement	else		62731	0					
ANR	62812	CompoundStatement		27:6:1041:1054	62731	0					
ANR	62813	IdentifierDeclStatement	int try_makedirs_errno = 0 ;	340:6:8453:8479	62731	0	True				
ANR	62814	IdentifierDecl	try_makedirs_errno = 0		62731	0					
ANR	62815	IdentifierDeclType	int		62731	0					
ANR	62816	Identifier	try_makedirs_errno		62731	1					
ANR	62817	AssignmentExpression	try_makedirs_errno = 0		62731	2		=			
ANR	62818	Identifier	try_makedirs_errno		62731	0					
ANR	62819	PrimaryExpression	0		62731	1					
ANR	62820	IdentifierDeclStatement	char * bakname ;	341:6:8487:8500	62731	1	True				
ANR	62821	IdentifierDecl	* bakname		62731	0					
ANR	62822	IdentifierDeclType	char *		62731	0					
ANR	62823	Identifier	bakname		62731	1					
ANR	62824	IfStatement	if ( origprae || origbase || origsuff )		62731	2					
ANR	62825	Condition	origprae || origbase || origsuff	343:10:8513:8544	62731	0	True				
ANR	62826	OrExpression	origprae || origbase || origsuff		62731	0		||			
ANR	62827	Identifier	origprae		62731	0					
ANR	62828	OrExpression	origbase || origsuff		62731	1		||			
ANR	62829	Identifier	origbase		62731	0					
ANR	62830	Identifier	origsuff		62731	1					
ANR	62831	CompoundStatement		40:3:1399:1410	62731	1					
ANR	62832	IdentifierDeclStatement	"char const * p = origprae ? origprae : """" ;"	345:3:8553:8593	62731	0	True				
ANR	62833	IdentifierDecl	"* p = origprae ? origprae : """""		62731	0					
ANR	62834	IdentifierDeclType	char const *		62731	0					
ANR	62835	Identifier	p		62731	1					
ANR	62836	AssignmentExpression	"* p = origprae ? origprae : """""		62731	2		=			
ANR	62837	Identifier	p		62731	0					
ANR	62838	ConditionalExpression	"origprae ? origprae : """""		62731	1					
ANR	62839	Condition	origprae		62731	0					
ANR	62840	Identifier	origprae		62731	0					
ANR	62841	Identifier	origprae		62731	1					
ANR	62842	PrimaryExpression	""""""		62731	2					
ANR	62843	IdentifierDeclStatement	"char const * b = origbase ? origbase : """" ;"	346:3:8598:8638	62731	1	True				
ANR	62844	IdentifierDecl	"* b = origbase ? origbase : """""		62731	0					
ANR	62845	IdentifierDeclType	char const *		62731	0					
ANR	62846	Identifier	b		62731	1					
ANR	62847	AssignmentExpression	"* b = origbase ? origbase : """""		62731	2		=			
ANR	62848	Identifier	b		62731	0					
ANR	62849	ConditionalExpression	"origbase ? origbase : """""		62731	1					
ANR	62850	Condition	origbase		62731	0					
ANR	62851	Identifier	origbase		62731	0					
ANR	62852	Identifier	origbase		62731	1					
ANR	62853	PrimaryExpression	""""""		62731	2					
ANR	62854	IdentifierDeclStatement	"char const * s = origsuff ? origsuff : """" ;"	347:3:8643:8683	62731	2	True				
ANR	62855	IdentifierDecl	"* s = origsuff ? origsuff : """""		62731	0					
ANR	62856	IdentifierDeclType	char const *		62731	0					
ANR	62857	Identifier	s		62731	1					
ANR	62858	AssignmentExpression	"* s = origsuff ? origsuff : """""		62731	2		=			
ANR	62859	Identifier	s		62731	0					
ANR	62860	ConditionalExpression	"origsuff ? origsuff : """""		62731	1					
ANR	62861	Condition	origsuff		62731	0					
ANR	62862	Identifier	origsuff		62731	0					
ANR	62863	Identifier	origsuff		62731	1					
ANR	62864	PrimaryExpression	""""""		62731	2					
ANR	62865	IdentifierDeclStatement	char const * t = to ;	348:3:8688:8706	62731	3	True				
ANR	62866	IdentifierDecl	* t = to		62731	0					
ANR	62867	IdentifierDeclType	char const *		62731	0					
ANR	62868	Identifier	t		62731	1					
ANR	62869	AssignmentExpression	* t = to		62731	2		=			
ANR	62870	Identifier	to		62731	0					
ANR	62871	Identifier	to		62731	1					
ANR	62872	IdentifierDeclStatement	size_t plen = strlen ( p ) ;	349:3:8711:8735	62731	4	True				
ANR	62873	IdentifierDecl	plen = strlen ( p )		62731	0					
ANR	62874	IdentifierDeclType	size_t		62731	0					
ANR	62875	Identifier	plen		62731	1					
ANR	62876	AssignmentExpression	plen = strlen ( p )		62731	2		=			
ANR	62877	Identifier	plen		62731	0					
ANR	62878	CallExpression	strlen ( p )		62731	1					
ANR	62879	Callee	strlen		62731	0					
ANR	62880	Identifier	strlen		62731	0					
ANR	62881	ArgumentList	p		62731	1					
ANR	62882	Argument	p		62731	0					
ANR	62883	Identifier	p		62731	0					
ANR	62884	IdentifierDeclStatement	size_t blen = strlen ( b ) ;	350:3:8740:8764	62731	5	True				
ANR	62885	IdentifierDecl	blen = strlen ( b )		62731	0					
ANR	62886	IdentifierDeclType	size_t		62731	0					
ANR	62887	Identifier	blen		62731	1					
ANR	62888	AssignmentExpression	blen = strlen ( b )		62731	2		=			
ANR	62889	Identifier	blen		62731	0					
ANR	62890	CallExpression	strlen ( b )		62731	1					
ANR	62891	Callee	strlen		62731	0					
ANR	62892	Identifier	strlen		62731	0					
ANR	62893	ArgumentList	b		62731	1					
ANR	62894	Argument	b		62731	0					
ANR	62895	Identifier	b		62731	0					
ANR	62896	IdentifierDeclStatement	size_t slen = strlen ( s ) ;	351:3:8769:8793	62731	6	True				
ANR	62897	IdentifierDecl	slen = strlen ( s )		62731	0					
ANR	62898	IdentifierDeclType	size_t		62731	0					
ANR	62899	Identifier	slen		62731	1					
ANR	62900	AssignmentExpression	slen = strlen ( s )		62731	2		=			
ANR	62901	Identifier	slen		62731	0					
ANR	62902	CallExpression	strlen ( s )		62731	1					
ANR	62903	Callee	strlen		62731	0					
ANR	62904	Identifier	strlen		62731	0					
ANR	62905	ArgumentList	s		62731	1					
ANR	62906	Argument	s		62731	0					
ANR	62907	Identifier	s		62731	0					
ANR	62908	IdentifierDeclStatement	size_t tlen = strlen ( t ) ;	352:3:8798:8822	62731	7	True				
ANR	62909	IdentifierDecl	tlen = strlen ( t )		62731	0					
ANR	62910	IdentifierDeclType	size_t		62731	0					
ANR	62911	Identifier	tlen		62731	1					
ANR	62912	AssignmentExpression	tlen = strlen ( t )		62731	2		=			
ANR	62913	Identifier	tlen		62731	0					
ANR	62914	CallExpression	strlen ( t )		62731	1					
ANR	62915	Callee	strlen		62731	0					
ANR	62916	Identifier	strlen		62731	0					
ANR	62917	ArgumentList	t		62731	1					
ANR	62918	Argument	t		62731	0					
ANR	62919	Identifier	t		62731	0					
ANR	62920	IdentifierDeclStatement	char const * o ;	353:3:8827:8840	62731	8	True				
ANR	62921	IdentifierDecl	* o		62731	0					
ANR	62922	IdentifierDeclType	char const *		62731	0					
ANR	62923	Identifier	o		62731	1					
ANR	62924	IdentifierDeclStatement	size_t olen ;	354:3:8845:8856	62731	9	True				
ANR	62925	IdentifierDecl	olen		62731	0					
ANR	62926	IdentifierDeclType	size_t		62731	0					
ANR	62927	Identifier	olen		62731	1					
ANR	62928	ForStatement	"for ( o = t + tlen , olen = 0 ; o > t && ! ISSLASH ( * ( o - 1 ) ) ; o -- )"		62731	10					
ANR	62929	ForInit	"o = t + tlen , olen = 0 ;"	356:8:8867:8889	62731	0	True				
ANR	62930	Expression	"o = t + tlen , olen = 0"		62731	0					
ANR	62931	AssignmentExpression	o = t + tlen		62731	0		=			
ANR	62932	Identifier	o		62731	0					
ANR	62933	AdditiveExpression	t + tlen		62731	1		+			
ANR	62934	Identifier	t		62731	0					
ANR	62935	Identifier	tlen		62731	1					
ANR	62936	AssignmentExpression	olen = 0		62731	1		=			
ANR	62937	Identifier	olen		62731	0					
ANR	62938	PrimaryExpression	0		62731	1					
ANR	62939	Condition	o > t && ! ISSLASH ( * ( o - 1 ) )	357:8:8899:8927	62731	1	True				
ANR	62940	AndExpression	o > t && ! ISSLASH ( * ( o - 1 ) )		62731	0		&&			
ANR	62941	RelationalExpression	o > t		62731	0		>			
ANR	62942	Identifier	o		62731	0					
ANR	62943	Identifier	t		62731	1					
ANR	62944	UnaryOperationExpression	! ISSLASH ( * ( o - 1 ) )		62731	1					
ANR	62945	UnaryOperator	!		62731	0					
ANR	62946	CallExpression	ISSLASH ( * ( o - 1 ) )		62731	1					
ANR	62947	Callee	ISSLASH		62731	0					
ANR	62948	Identifier	ISSLASH		62731	0					
ANR	62949	ArgumentList	* ( o - 1 )		62731	1					
ANR	62950	Argument	* ( o - 1 )		62731	0					
ANR	62951	UnaryOperationExpression	* ( o - 1 )		62731	0					
ANR	62952	UnaryOperator	*		62731	0					
ANR	62953	AdditiveExpression	o - 1		62731	1		-			
ANR	62954	Identifier	o		62731	0					
ANR	62955	PrimaryExpression	1		62731	1					
ANR	62956	PostIncDecOperationExpression	o --	358:8:8938:8940	62731	2	True				
ANR	62957	Identifier	o		62731	0					
ANR	62958	IncDec	--		62731	1					
ANR	62959	ExpressionStatement		359:22:8965:8965	62731	3	True				
ANR	62960	ExpressionStatement	olen = t + tlen - o	360:3:8970:8989	62731	11	True				
ANR	62961	AssignmentExpression	olen = t + tlen - o		62731	0		=			
ANR	62962	Identifier	olen		62731	0					
ANR	62963	AdditiveExpression	t + tlen - o		62731	1		+			
ANR	62964	Identifier	t		62731	0					
ANR	62965	AdditiveExpression	tlen - o		62731	1		-			
ANR	62966	Identifier	tlen		62731	0					
ANR	62967	Identifier	o		62731	1					
ANR	62968	ExpressionStatement	tlen -= olen	361:3:8994:9006	62731	12	True				
ANR	62969	AssignmentExpression	tlen -= olen		62731	0		-=			
ANR	62970	Identifier	tlen		62731	0					
ANR	62971	Identifier	olen		62731	1					
ANR	62972	ExpressionStatement	bakname = xmalloc ( plen + tlen + blen + olen + slen + 1 )	362:3:9011:9067	62731	13	True				
ANR	62973	AssignmentExpression	bakname = xmalloc ( plen + tlen + blen + olen + slen + 1 )		62731	0		=			
ANR	62974	Identifier	bakname		62731	0					
ANR	62975	CallExpression	xmalloc ( plen + tlen + blen + olen + slen + 1 )		62731	1					
ANR	62976	Callee	xmalloc		62731	0					
ANR	62977	Identifier	xmalloc		62731	0					
ANR	62978	ArgumentList	plen + tlen + blen + olen + slen + 1		62731	1					
ANR	62979	Argument	plen + tlen + blen + olen + slen + 1		62731	0					
ANR	62980	AdditiveExpression	plen + tlen + blen + olen + slen + 1		62731	0		+			
ANR	62981	Identifier	plen		62731	0					
ANR	62982	AdditiveExpression	tlen + blen + olen + slen + 1		62731	1		+			
ANR	62983	Identifier	tlen		62731	0					
ANR	62984	AdditiveExpression	blen + olen + slen + 1		62731	1		+			
ANR	62985	Identifier	blen		62731	0					
ANR	62986	AdditiveExpression	olen + slen + 1		62731	1		+			
ANR	62987	Identifier	olen		62731	0					
ANR	62988	AdditiveExpression	slen + 1		62731	1		+			
ANR	62989	Identifier	slen		62731	0					
ANR	62990	PrimaryExpression	1		62731	1					
ANR	62991	ExpressionStatement	"memcpy ( bakname , p , plen )"	363:3:9072:9097	62731	14	True				
ANR	62992	CallExpression	"memcpy ( bakname , p , plen )"		62731	0					
ANR	62993	Callee	memcpy		62731	0					
ANR	62994	Identifier	memcpy		62731	0					
ANR	62995	ArgumentList	bakname		62731	1					
ANR	62996	Argument	bakname		62731	0					
ANR	62997	Identifier	bakname		62731	0					
ANR	62998	Argument	p		62731	1					
ANR	62999	Identifier	p		62731	0					
ANR	63000	Argument	plen		62731	2					
ANR	63001	Identifier	plen		62731	0					
ANR	63002	ExpressionStatement	"memcpy ( bakname + plen , t , tlen )"	364:3:9102:9134	62731	15	True				
ANR	63003	CallExpression	"memcpy ( bakname + plen , t , tlen )"		62731	0					
ANR	63004	Callee	memcpy		62731	0					
ANR	63005	Identifier	memcpy		62731	0					
ANR	63006	ArgumentList	bakname + plen		62731	1					
ANR	63007	Argument	bakname + plen		62731	0					
ANR	63008	AdditiveExpression	bakname + plen		62731	0		+			
ANR	63009	Identifier	bakname		62731	0					
ANR	63010	Identifier	plen		62731	1					
ANR	63011	Argument	t		62731	1					
ANR	63012	Identifier	t		62731	0					
ANR	63013	Argument	tlen		62731	2					
ANR	63014	Identifier	tlen		62731	0					
ANR	63015	ExpressionStatement	"memcpy ( bakname + plen + tlen , b , blen )"	365:3:9139:9178	62731	16	True				
ANR	63016	CallExpression	"memcpy ( bakname + plen + tlen , b , blen )"		62731	0					
ANR	63017	Callee	memcpy		62731	0					
ANR	63018	Identifier	memcpy		62731	0					
ANR	63019	ArgumentList	bakname + plen + tlen		62731	1					
ANR	63020	Argument	bakname + plen + tlen		62731	0					
ANR	63021	AdditiveExpression	bakname + plen + tlen		62731	0		+			
ANR	63022	Identifier	bakname		62731	0					
ANR	63023	AdditiveExpression	plen + tlen		62731	1		+			
ANR	63024	Identifier	plen		62731	0					
ANR	63025	Identifier	tlen		62731	1					
ANR	63026	Argument	b		62731	1					
ANR	63027	Identifier	b		62731	0					
ANR	63028	Argument	blen		62731	2					
ANR	63029	Identifier	blen		62731	0					
ANR	63030	ExpressionStatement	"memcpy ( bakname + plen + tlen + blen , o , olen )"	366:3:9183:9229	62731	17	True				
ANR	63031	CallExpression	"memcpy ( bakname + plen + tlen + blen , o , olen )"		62731	0					
ANR	63032	Callee	memcpy		62731	0					
ANR	63033	Identifier	memcpy		62731	0					
ANR	63034	ArgumentList	bakname + plen + tlen + blen		62731	1					
ANR	63035	Argument	bakname + plen + tlen + blen		62731	0					
ANR	63036	AdditiveExpression	bakname + plen + tlen + blen		62731	0		+			
ANR	63037	Identifier	bakname		62731	0					
ANR	63038	AdditiveExpression	plen + tlen + blen		62731	1		+			
ANR	63039	Identifier	plen		62731	0					
ANR	63040	AdditiveExpression	tlen + blen		62731	1		+			
ANR	63041	Identifier	tlen		62731	0					
ANR	63042	Identifier	blen		62731	1					
ANR	63043	Argument	o		62731	1					
ANR	63044	Identifier	o		62731	0					
ANR	63045	Argument	olen		62731	2					
ANR	63046	Identifier	olen		62731	0					
ANR	63047	ExpressionStatement	"memcpy ( bakname + plen + tlen + blen + olen , s , slen + 1 )"	367:3:9234:9291	62731	18	True				
ANR	63048	CallExpression	"memcpy ( bakname + plen + tlen + blen + olen , s , slen + 1 )"		62731	0					
ANR	63049	Callee	memcpy		62731	0					
ANR	63050	Identifier	memcpy		62731	0					
ANR	63051	ArgumentList	bakname + plen + tlen + blen + olen		62731	1					
ANR	63052	Argument	bakname + plen + tlen + blen + olen		62731	0					
ANR	63053	AdditiveExpression	bakname + plen + tlen + blen + olen		62731	0		+			
ANR	63054	Identifier	bakname		62731	0					
ANR	63055	AdditiveExpression	plen + tlen + blen + olen		62731	1		+			
ANR	63056	Identifier	plen		62731	0					
ANR	63057	AdditiveExpression	tlen + blen + olen		62731	1		+			
ANR	63058	Identifier	tlen		62731	0					
ANR	63059	AdditiveExpression	blen + olen		62731	1		+			
ANR	63060	Identifier	blen		62731	0					
ANR	63061	Identifier	olen		62731	1					
ANR	63062	Argument	s		62731	1					
ANR	63063	Identifier	s		62731	0					
ANR	63064	Argument	slen + 1		62731	2					
ANR	63065	AdditiveExpression	slen + 1		62731	0		+			
ANR	63066	Identifier	slen		62731	0					
ANR	63067	PrimaryExpression	1		62731	1					
ANR	63068	IfStatement	if ( ( origprae && ( contains_slash ( origprae + FILE_SYSTEM_PREFIX_LEN ( origprae ) ) || contains_slash ( to ) ) ) || ( origbase && contains_slash ( origbase ) ) )		62731	19					
ANR	63069	Condition	( origprae && ( contains_slash ( origprae + FILE_SYSTEM_PREFIX_LEN ( origprae ) ) || contains_slash ( to ) ) ) || ( origbase && contains_slash ( origbase ) )	369:7:9301:9463	62731	0	True				
ANR	63070	OrExpression	( origprae && ( contains_slash ( origprae + FILE_SYSTEM_PREFIX_LEN ( origprae ) ) || contains_slash ( to ) ) ) || ( origbase && contains_slash ( origbase ) )		62731	0		||			
ANR	63071	AndExpression	origprae && ( contains_slash ( origprae + FILE_SYSTEM_PREFIX_LEN ( origprae ) ) || contains_slash ( to ) )		62731	0		&&			
ANR	63072	Identifier	origprae		62731	0					
ANR	63073	OrExpression	contains_slash ( origprae + FILE_SYSTEM_PREFIX_LEN ( origprae ) ) || contains_slash ( to )		62731	1		||			
ANR	63074	CallExpression	contains_slash ( origprae + FILE_SYSTEM_PREFIX_LEN ( origprae ) )		62731	0					
ANR	63075	Callee	contains_slash		62731	0					
ANR	63076	Identifier	contains_slash		62731	0					
ANR	63077	ArgumentList	origprae + FILE_SYSTEM_PREFIX_LEN ( origprae )		62731	1					
ANR	63078	Argument	origprae + FILE_SYSTEM_PREFIX_LEN ( origprae )		62731	0					
ANR	63079	AdditiveExpression	origprae + FILE_SYSTEM_PREFIX_LEN ( origprae )		62731	0		+			
ANR	63080	Identifier	origprae		62731	0					
ANR	63081	CallExpression	FILE_SYSTEM_PREFIX_LEN ( origprae )		62731	1					
ANR	63082	Callee	FILE_SYSTEM_PREFIX_LEN		62731	0					
ANR	63083	Identifier	FILE_SYSTEM_PREFIX_LEN		62731	0					
ANR	63084	ArgumentList	origprae		62731	1					
ANR	63085	Argument	origprae		62731	0					
ANR	63086	Identifier	origprae		62731	0					
ANR	63087	CallExpression	contains_slash ( to )		62731	1					
ANR	63088	Callee	contains_slash		62731	0					
ANR	63089	Identifier	contains_slash		62731	0					
ANR	63090	ArgumentList	to		62731	1					
ANR	63091	Argument	to		62731	0					
ANR	63092	Identifier	to		62731	0					
ANR	63093	AndExpression	origbase && contains_slash ( origbase )		62731	1		&&			
ANR	63094	Identifier	origbase		62731	0					
ANR	63095	CallExpression	contains_slash ( origbase )		62731	1					
ANR	63096	Callee	contains_slash		62731	0					
ANR	63097	Identifier	contains_slash		62731	0					
ANR	63098	ArgumentList	origbase		62731	1					
ANR	63099	Argument	origbase		62731	0					
ANR	63100	Identifier	origbase		62731	0					
ANR	63101	ExpressionStatement	try_makedirs_errno = ENOENT	373:5:9471:9498	62731	1	True				
ANR	63102	AssignmentExpression	try_makedirs_errno = ENOENT		62731	0		=			
ANR	63103	Identifier	try_makedirs_errno		62731	0					
ANR	63104	Identifier	ENOENT		62731	1					
ANR	63105	ElseStatement	else		62731	0					
ANR	63106	CompoundStatement		62:1:2069:2069	62731	0					
ANR	63107	ExpressionStatement	"bakname = find_backup_file_name ( to , backup_type )"	377:3:9520:9569	62731	0	True				
ANR	63108	AssignmentExpression	"bakname = find_backup_file_name ( to , backup_type )"		62731	0		=			
ANR	63109	Identifier	bakname		62731	0					
ANR	63110	CallExpression	"find_backup_file_name ( to , backup_type )"		62731	1					
ANR	63111	Callee	find_backup_file_name		62731	0					
ANR	63112	Identifier	find_backup_file_name		62731	0					
ANR	63113	ArgumentList	to		62731	1					
ANR	63114	Argument	to		62731	0					
ANR	63115	Identifier	to		62731	0					
ANR	63116	Argument	backup_type		62731	1					
ANR	63117	Identifier	backup_type		62731	0					
ANR	63118	IfStatement	if ( ! bakname )		62731	1					
ANR	63119	Condition	! bakname	378:7:9578:9585	62731	0	True				
ANR	63120	UnaryOperationExpression	! bakname		62731	0					
ANR	63121	UnaryOperator	!		62731	0					
ANR	63122	Identifier	bakname		62731	1					
ANR	63123	ExpressionStatement	xalloc_die ( )	379:5:9593:9606	62731	1	True				
ANR	63124	CallExpression	xalloc_die ( )		62731	0					
ANR	63125	Callee	xalloc_die		62731	0					
ANR	63126	Identifier	xalloc_die		62731	0					
ANR	63127	ArgumentList			62731	1					
ANR	63128	IfStatement	if ( ! to_st )		62731	3					
ANR	63129	Condition	! to_st	382:10:9622:9628	62731	0	True				
ANR	63130	UnaryOperationExpression	! to_st		62731	0					
ANR	63131	UnaryOperator	!		62731	0					
ANR	63132	Identifier	to_st		62731	1					
ANR	63133	CompoundStatement		70:3:2191:2197	62731	1					
ANR	63134	IdentifierDeclStatement	int fd ;	384:3:9637:9643	62731	0	True				
ANR	63135	IdentifierDecl	fd		62731	0					
ANR	63136	IdentifierDeclType	int		62731	0					
ANR	63137	Identifier	fd		62731	1					
ANR	63138	IfStatement	if ( debug & 4 )		62731	1					
ANR	63139	Condition	debug & 4	386:7:9653:9661	62731	0	True				
ANR	63140	BitAndExpression	debug & 4		62731	0		&			
ANR	63141	Identifier	debug		62731	0					
ANR	63142	PrimaryExpression	4		62731	1					
ANR	63143	ExpressionStatement	"say ( ""Creating empty file %s\\n"" , quotearg ( bakname ) )"	387:5:9669:9721	62731	1	True				
ANR	63144	CallExpression	"say ( ""Creating empty file %s\\n"" , quotearg ( bakname ) )"		62731	0					
ANR	63145	Callee	say		62731	0					
ANR	63146	Identifier	say		62731	0					
ANR	63147	ArgumentList	"""Creating empty file %s\\n"""		62731	1					
ANR	63148	Argument	"""Creating empty file %s\\n"""		62731	0					
ANR	63149	PrimaryExpression	"""Creating empty file %s\\n"""		62731	0					
ANR	63150	Argument	quotearg ( bakname )		62731	1					
ANR	63151	CallExpression	quotearg ( bakname )		62731	0					
ANR	63152	Callee	quotearg		62731	0					
ANR	63153	Identifier	quotearg		62731	0					
ANR	63154	ArgumentList	bakname		62731	1					
ANR	63155	Argument	bakname		62731	0					
ANR	63156	Identifier	bakname		62731	0					
ANR	63157	ExpressionStatement	try_makedirs_errno = ENOENT	389:3:9727:9754	62731	2	True				
ANR	63158	AssignmentExpression	try_makedirs_errno = ENOENT		62731	0		=			
ANR	63159	Identifier	try_makedirs_errno		62731	0					
ANR	63160	Identifier	ENOENT		62731	1					
ANR	63161	ExpressionStatement	safe_unlink ( bakname )	390:3:9759:9780	62731	3	True				
ANR	63162	CallExpression	safe_unlink ( bakname )		62731	0					
ANR	63163	Callee	safe_unlink		62731	0					
ANR	63164	Identifier	safe_unlink		62731	0					
ANR	63165	ArgumentList	bakname		62731	1					
ANR	63166	Argument	bakname		62731	0					
ANR	63167	Identifier	bakname		62731	0					
ANR	63168	WhileStatement	"while ( ( fd = safe_open ( bakname , O_CREAT | O_WRONLY | O_TRUNC , 0666 ) ) < 0 )"		62731	4					
ANR	63169	Condition	"( fd = safe_open ( bakname , O_CREAT | O_WRONLY | O_TRUNC , 0666 ) ) < 0"	391:10:9792:9857	62731	0	True				
ANR	63170	RelationalExpression	"( fd = safe_open ( bakname , O_CREAT | O_WRONLY | O_TRUNC , 0666 ) ) < 0"		62731	0		<			
ANR	63171	AssignmentExpression	"fd = safe_open ( bakname , O_CREAT | O_WRONLY | O_TRUNC , 0666 )"		62731	0		=			
ANR	63172	Identifier	fd		62731	0					
ANR	63173	CallExpression	"safe_open ( bakname , O_CREAT | O_WRONLY | O_TRUNC , 0666 )"		62731	1					
ANR	63174	Callee	safe_open		62731	0					
ANR	63175	Identifier	safe_open		62731	0					
ANR	63176	ArgumentList	bakname		62731	1					
ANR	63177	Argument	bakname		62731	0					
ANR	63178	Identifier	bakname		62731	0					
ANR	63179	Argument	O_CREAT | O_WRONLY | O_TRUNC		62731	1					
ANR	63180	InclusiveOrExpression	O_CREAT | O_WRONLY | O_TRUNC		62731	0		|			
ANR	63181	Identifier	O_CREAT		62731	0					
ANR	63182	InclusiveOrExpression	O_WRONLY | O_TRUNC		62731	1		|			
ANR	63183	Identifier	O_WRONLY		62731	0					
ANR	63184	Identifier	O_TRUNC		62731	1					
ANR	63185	Argument	0666		62731	2					
ANR	63186	PrimaryExpression	0666		62731	0					
ANR	63187	PrimaryExpression	0		62731	1					
ANR	63188	CompoundStatement		78:5:2419:2419	62731	1					
ANR	63189	IfStatement	if ( errno != try_makedirs_errno )		62731	0					
ANR	63190	Condition	errno != try_makedirs_errno	393:11:9878:9904	62731	0	True				
ANR	63191	EqualityExpression	errno != try_makedirs_errno		62731	0		!=			
ANR	63192	Identifier	errno		62731	0					
ANR	63193	Identifier	try_makedirs_errno		62731	1					
ANR	63194	ExpressionStatement	"pfatal ( ""Can't create file %s"" , quotearg ( bakname ) )"	394:2:9909:9960	62731	1	True				
ANR	63195	CallExpression	"pfatal ( ""Can't create file %s"" , quotearg ( bakname ) )"		62731	0					
ANR	63196	Callee	pfatal		62731	0					
ANR	63197	Identifier	pfatal		62731	0					
ANR	63198	ArgumentList	"""Can't create file %s"""		62731	1					
ANR	63199	Argument	"""Can't create file %s"""		62731	0					
ANR	63200	PrimaryExpression	"""Can't create file %s"""		62731	0					
ANR	63201	Argument	quotearg ( bakname )		62731	1					
ANR	63202	CallExpression	quotearg ( bakname )		62731	0					
ANR	63203	Callee	quotearg		62731	0					
ANR	63204	Identifier	quotearg		62731	0					
ANR	63205	ArgumentList	bakname		62731	1					
ANR	63206	Argument	bakname		62731	0					
ANR	63207	Identifier	bakname		62731	0					
ANR	63208	ExpressionStatement	makedirs ( bakname )	395:7:9969:9987	62731	1	True				
ANR	63209	CallExpression	makedirs ( bakname )		62731	0					
ANR	63210	Callee	makedirs		62731	0					
ANR	63211	Identifier	makedirs		62731	0					
ANR	63212	ArgumentList	bakname		62731	1					
ANR	63213	Argument	bakname		62731	0					
ANR	63214	Identifier	bakname		62731	0					
ANR	63215	ExpressionStatement	try_makedirs_errno = 0	396:7:9996:10018	62731	2	True				
ANR	63216	AssignmentExpression	try_makedirs_errno = 0		62731	0		=			
ANR	63217	Identifier	try_makedirs_errno		62731	0					
ANR	63218	PrimaryExpression	0		62731	1					
ANR	63219	IfStatement	if ( close ( fd ) != 0 )		62731	5					
ANR	63220	Condition	close ( fd ) != 0	398:7:10034:10048	62731	0	True				
ANR	63221	EqualityExpression	close ( fd ) != 0		62731	0		!=			
ANR	63222	CallExpression	close ( fd )		62731	0					
ANR	63223	Callee	close		62731	0					
ANR	63224	Identifier	close		62731	0					
ANR	63225	ArgumentList	fd		62731	1					
ANR	63226	Argument	fd		62731	0					
ANR	63227	Identifier	fd		62731	0					
ANR	63228	PrimaryExpression	0		62731	1					
ANR	63229	ExpressionStatement	"pfatal ( ""Can't close file %s"" , quotearg ( bakname ) )"	399:5:10056:10106	62731	1	True				
ANR	63230	CallExpression	"pfatal ( ""Can't close file %s"" , quotearg ( bakname ) )"		62731	0					
ANR	63231	Callee	pfatal		62731	0					
ANR	63232	Identifier	pfatal		62731	0					
ANR	63233	ArgumentList	"""Can't close file %s"""		62731	1					
ANR	63234	Argument	"""Can't close file %s"""		62731	0					
ANR	63235	PrimaryExpression	"""Can't close file %s"""		62731	0					
ANR	63236	Argument	quotearg ( bakname )		62731	1					
ANR	63237	CallExpression	quotearg ( bakname )		62731	0					
ANR	63238	Callee	quotearg		62731	0					
ANR	63239	Identifier	quotearg		62731	0					
ANR	63240	ArgumentList	bakname		62731	1					
ANR	63241	Argument	bakname		62731	0					
ANR	63242	Identifier	bakname		62731	0					
ANR	63243	ElseStatement	else		62731	0					
ANR	63244	IfStatement	if ( leave_original )		62731	0					
ANR	63245	Condition	leave_original	401:15:10126:10139	62731	0	True				
ANR	63246	Identifier	leave_original		62731	0					
ANR	63247	ExpressionStatement	"create_backup_copy ( to , bakname , to_st , try_makedirs_errno == 0 )"	402:1:10143:10207	62731	1	True				
ANR	63248	CallExpression	"create_backup_copy ( to , bakname , to_st , try_makedirs_errno == 0 )"		62731	0					
ANR	63249	Callee	create_backup_copy		62731	0					
ANR	63250	Identifier	create_backup_copy		62731	0					
ANR	63251	ArgumentList	to		62731	1					
ANR	63252	Argument	to		62731	0					
ANR	63253	Identifier	to		62731	0					
ANR	63254	Argument	bakname		62731	1					
ANR	63255	Identifier	bakname		62731	0					
ANR	63256	Argument	to_st		62731	2					
ANR	63257	Identifier	to_st		62731	0					
ANR	63258	Argument	try_makedirs_errno == 0		62731	3					
ANR	63259	EqualityExpression	try_makedirs_errno == 0		62731	0		==			
ANR	63260	Identifier	try_makedirs_errno		62731	0					
ANR	63261	PrimaryExpression	0		62731	1					
ANR	63262	ElseStatement	else		62731	0					
ANR	63263	CompoundStatement		90:1:2775:2775	62731	0					
ANR	63264	IfStatement	if ( debug & 4 )		62731	0					
ANR	63265	Condition	debug & 4	405:7:10230:10238	62731	0	True				
ANR	63266	BitAndExpression	debug & 4		62731	0		&			
ANR	63267	Identifier	debug		62731	0					
ANR	63268	PrimaryExpression	4		62731	1					
ANR	63269	ExpressionStatement	"say ( ""Renaming file %s to %s\\n"" , quotearg_n ( 0 , to ) , quotearg_n ( 1 , bakname ) )"	406:5:10246:10326	62731	1	True				
ANR	63270	CallExpression	"say ( ""Renaming file %s to %s\\n"" , quotearg_n ( 0 , to ) , quotearg_n ( 1 , bakname ) )"		62731	0					
ANR	63271	Callee	say		62731	0					
ANR	63272	Identifier	say		62731	0					
ANR	63273	ArgumentList	"""Renaming file %s to %s\\n"""		62731	1					
ANR	63274	Argument	"""Renaming file %s to %s\\n"""		62731	0					
ANR	63275	PrimaryExpression	"""Renaming file %s to %s\\n"""		62731	0					
ANR	63276	Argument	"quotearg_n ( 0 , to )"		62731	1					
ANR	63277	CallExpression	"quotearg_n ( 0 , to )"		62731	0					
ANR	63278	Callee	quotearg_n		62731	0					
ANR	63279	Identifier	quotearg_n		62731	0					
ANR	63280	ArgumentList	0		62731	1					
ANR	63281	Argument	0		62731	0					
ANR	63282	PrimaryExpression	0		62731	0					
ANR	63283	Argument	to		62731	1					
ANR	63284	Identifier	to		62731	0					
ANR	63285	Argument	"quotearg_n ( 1 , bakname )"		62731	2					
ANR	63286	CallExpression	"quotearg_n ( 1 , bakname )"		62731	0					
ANR	63287	Callee	quotearg_n		62731	0					
ANR	63288	Identifier	quotearg_n		62731	0					
ANR	63289	ArgumentList	1		62731	1					
ANR	63290	Argument	1		62731	0					
ANR	63291	PrimaryExpression	1		62731	0					
ANR	63292	Argument	bakname		62731	1					
ANR	63293	Identifier	bakname		62731	0					
ANR	63294	WhileStatement	"while ( safe_rename ( to , bakname ) != 0 )"		62731	1					
ANR	63295	Condition	"safe_rename ( to , bakname ) != 0"	408:10:10338:10367	62731	0	True				
ANR	63296	EqualityExpression	"safe_rename ( to , bakname ) != 0"		62731	0		!=			
ANR	63297	CallExpression	"safe_rename ( to , bakname )"		62731	0					
ANR	63298	Callee	safe_rename		62731	0					
ANR	63299	Identifier	safe_rename		62731	0					
ANR	63300	ArgumentList	to		62731	1					
ANR	63301	Argument	to		62731	0					
ANR	63302	Identifier	to		62731	0					
ANR	63303	Argument	bakname		62731	1					
ANR	63304	Identifier	bakname		62731	0					
ANR	63305	PrimaryExpression	0		62731	1					
ANR	63306	CompoundStatement		95:5:2929:2929	62731	1					
ANR	63307	IfStatement	if ( errno == try_makedirs_errno )		62731	0					
ANR	63308	Condition	errno == try_makedirs_errno	410:11:10388:10414	62731	0	True				
ANR	63309	EqualityExpression	errno == try_makedirs_errno		62731	0		==			
ANR	63310	Identifier	errno		62731	0					
ANR	63311	Identifier	try_makedirs_errno		62731	1					
ANR	63312	CompoundStatement		97:2:2973:2973	62731	1					
ANR	63313	ExpressionStatement	makedirs ( bakname )	412:4:10425:10443	62731	0	True				
ANR	63314	CallExpression	makedirs ( bakname )		62731	0					
ANR	63315	Callee	makedirs		62731	0					
ANR	63316	Identifier	makedirs		62731	0					
ANR	63317	ArgumentList	bakname		62731	1					
ANR	63318	Argument	bakname		62731	0					
ANR	63319	Identifier	bakname		62731	0					
ANR	63320	ExpressionStatement	try_makedirs_errno = 0	413:4:10449:10471	62731	1	True				
ANR	63321	AssignmentExpression	try_makedirs_errno = 0		62731	0		=			
ANR	63322	Identifier	try_makedirs_errno		62731	0					
ANR	63323	PrimaryExpression	0		62731	1					
ANR	63324	ElseStatement	else		62731	0					
ANR	63325	IfStatement	if ( errno == EXDEV )		62731	0					
ANR	63326	Condition	errno == EXDEV	415:16:10493:10506	62731	0	True				
ANR	63327	EqualityExpression	errno == EXDEV		62731	0		==			
ANR	63328	Identifier	errno		62731	0					
ANR	63329	Identifier	EXDEV		62731	1					
ANR	63330	CompoundStatement		102:2:3065:3065	62731	1					
ANR	63331	ExpressionStatement	"create_backup_copy ( to , bakname , to_st , try_makedirs_errno == 0 )"	417:4:10517:10591	62731	0	True				
ANR	63332	CallExpression	"create_backup_copy ( to , bakname , to_st , try_makedirs_errno == 0 )"		62731	0					
ANR	63333	Callee	create_backup_copy		62731	0					
ANR	63334	Identifier	create_backup_copy		62731	0					
ANR	63335	ArgumentList	to		62731	1					
ANR	63336	Argument	to		62731	0					
ANR	63337	Identifier	to		62731	0					
ANR	63338	Argument	bakname		62731	1					
ANR	63339	Identifier	bakname		62731	0					
ANR	63340	Argument	to_st		62731	2					
ANR	63341	Identifier	to_st		62731	0					
ANR	63342	Argument	try_makedirs_errno == 0		62731	3					
ANR	63343	EqualityExpression	try_makedirs_errno == 0		62731	0		==			
ANR	63344	Identifier	try_makedirs_errno		62731	0					
ANR	63345	PrimaryExpression	0		62731	1					
ANR	63346	ExpressionStatement	safe_unlink ( to )	419:4:10597:10613	62731	1	True				
ANR	63347	CallExpression	safe_unlink ( to )		62731	0					
ANR	63348	Callee	safe_unlink		62731	0					
ANR	63349	Identifier	safe_unlink		62731	0					
ANR	63350	ArgumentList	to		62731	1					
ANR	63351	Argument	to		62731	0					
ANR	63352	Identifier	to		62731	0					
ANR	63353	BreakStatement	break ;	420:4:10619:10624	62731	2	True				
ANR	63354	ElseStatement	else		62731	0					
ANR	63355	ExpressionStatement	"pfatal ( ""Can't rename file %s to %s"" , quotearg_n ( 0 , to ) , quotearg_n ( 1 , bakname ) )"	423:2:10644:10729	62731	0	True				
ANR	63356	CallExpression	"pfatal ( ""Can't rename file %s to %s"" , quotearg_n ( 0 , to ) , quotearg_n ( 1 , bakname ) )"		62731	0					
ANR	63357	Callee	pfatal		62731	0					
ANR	63358	Identifier	pfatal		62731	0					
ANR	63359	ArgumentList	"""Can't rename file %s to %s"""		62731	1					
ANR	63360	Argument	"""Can't rename file %s to %s"""		62731	0					
ANR	63361	PrimaryExpression	"""Can't rename file %s to %s"""		62731	0					
ANR	63362	Argument	"quotearg_n ( 0 , to )"		62731	1					
ANR	63363	CallExpression	"quotearg_n ( 0 , to )"		62731	0					
ANR	63364	Callee	quotearg_n		62731	0					
ANR	63365	Identifier	quotearg_n		62731	0					
ANR	63366	ArgumentList	0		62731	1					
ANR	63367	Argument	0		62731	0					
ANR	63368	PrimaryExpression	0		62731	0					
ANR	63369	Argument	to		62731	1					
ANR	63370	Identifier	to		62731	0					
ANR	63371	Argument	"quotearg_n ( 1 , bakname )"		62731	2					
ANR	63372	CallExpression	"quotearg_n ( 1 , bakname )"		62731	0					
ANR	63373	Callee	quotearg_n		62731	0					
ANR	63374	Identifier	quotearg_n		62731	0					
ANR	63375	ArgumentList	1		62731	1					
ANR	63376	Argument	1		62731	0					
ANR	63377	PrimaryExpression	1		62731	0					
ANR	63378	Argument	bakname		62731	1					
ANR	63379	Identifier	bakname		62731	0					
ANR	63380	ExpressionStatement	free ( bakname )	427:6:10747:10761	62731	4	True				
ANR	63381	CallExpression	free ( bakname )		62731	0					
ANR	63382	Callee	free		62731	0					
ANR	63383	Identifier	free		62731	0					
ANR	63384	ArgumentList	bakname		62731	1					
ANR	63385	Argument	bakname		62731	0					
ANR	63386	Identifier	bakname		62731	0					
ANR	63387	ReturnType	void		62731	1					
ANR	63388	Identifier	create_backup		62731	2					
ANR	63389	ParameterList	"char const * to , const struct stat * to_st , bool leave_original"		62731	3					
ANR	63390	Parameter	char const * to	314:15:7382:7395	62731	0	True				
ANR	63391	ParameterType	char const *		62731	0					
ANR	63392	Identifier	to		62731	1					
ANR	63393	Parameter	const struct stat * to_st	314:31:7398:7421	62731	1	True				
ANR	63394	ParameterType	const struct stat *		62731	0					
ANR	63395	Identifier	to_st		62731	1					
ANR	63396	Parameter	bool leave_original	314:57:7424:7442	62731	2	True				
ANR	63397	ParameterType	bool		62731	0					
ANR	63398	Identifier	leave_original		62731	1					
ANR	63399	CFGEntryNode	ENTRY		62731		True				
ANR	63400	CFGExitNode	EXIT		62731		True				
ANR	63401	Symbol	quotearg		62731						
ANR	63402	Symbol	to_st -> st_mode		62731						
ANR	63403	Symbol	quotearg_n		62731						
ANR	63404	Symbol	O_CREAT		62731						
ANR	63405	Symbol	ISSLASH		62731						
ANR	63406	Symbol	plen		62731						
ANR	63407	Symbol	strlen		62731						
ANR	63408	Symbol	CREATED		62731						
ANR	63409	Symbol	origprae		62731						
ANR	63410	Symbol	origsuff		62731						
ANR	63411	Symbol	xmalloc		62731						
ANR	63412	Symbol	safe_rename		62731						
ANR	63413	Symbol	leave_original		62731						
ANR	63414	Symbol	bakname		62731						
ANR	63415	Symbol	tlen		62731						
ANR	63416	Symbol	EXDEV		62731						
ANR	63417	Symbol	* to_st		62731						
ANR	63418	Symbol	contains_slash		62731						
ANR	63419	Symbol	try_makedirs_errno		62731						
ANR	63420	Symbol	blen		62731						
ANR	63421	Symbol	close		62731						
ANR	63422	Symbol	S_ISLNK		62731						
ANR	63423	Symbol	lookup_file_id		62731						
ANR	63424	Symbol	FILE_SYSTEM_PREFIX_LEN		62731						
ANR	63425	Symbol	b		62731						
ANR	63426	Symbol	errno		62731						
ANR	63427	Symbol	debug		62731						
ANR	63428	Symbol	backup_type		62731						
ANR	63429	Symbol	* ( o - 1 )		62731						
ANR	63430	Symbol	ENOENT		62731						
ANR	63431	Symbol	find_backup_file_name		62731						
ANR	63432	Symbol	o		62731						
ANR	63433	Symbol	safe_open		62731						
ANR	63434	Symbol	p		62731						
ANR	63435	Symbol	olen		62731						
ANR	63436	Symbol	O_TRUNC		62731						
ANR	63437	Symbol	to_st		62731						
ANR	63438	Symbol	S_ISREG		62731						
ANR	63439	Symbol	s		62731						
ANR	63440	Symbol	t		62731						
ANR	63441	Symbol	slen		62731						
ANR	63442	Symbol	* o		62731						
ANR	63443	Symbol	to		62731						
ANR	63444	Symbol	O_WRONLY		62731						
ANR	63445	Symbol	origbase		62731						
ANR	63446	Symbol	fd		62731						
ANR	63447	Function	move_file	441:0:11251:14044							
ANR	63448	FunctionDef	"move_file (char const * from , bool * from_needs_removal , struct stat const * fromst , char const * to , mode_t mode , bool backup)"		63447	0					
ANR	63449	CompoundStatement		445:0:11388:14044	63447	0					
ANR	63450	IdentifierDeclStatement	struct stat to_st ;	446:2:11392:11409	63447	0	True				
ANR	63451	IdentifierDecl	to_st		63447	0					
ANR	63452	IdentifierDeclType	struct stat		63447	0					
ANR	63453	Identifier	to_st		63447	1					
ANR	63454	IdentifierDeclStatement	int to_errno ;	447:2:11413:11425	63447	1	True				
ANR	63455	IdentifierDecl	to_errno		63447	0					
ANR	63456	IdentifierDeclType	int		63447	0					
ANR	63457	Identifier	to_errno		63447	1					
ANR	63458	ExpressionStatement	"to_errno = stat_file ( to , & to_st )"	449:2:11430:11463	63447	2	True				
ANR	63459	AssignmentExpression	"to_errno = stat_file ( to , & to_st )"		63447	0		=			
ANR	63460	Identifier	to_errno		63447	0					
ANR	63461	CallExpression	"stat_file ( to , & to_st )"		63447	1					
ANR	63462	Callee	stat_file		63447	0					
ANR	63463	Identifier	stat_file		63447	0					
ANR	63464	ArgumentList	to		63447	1					
ANR	63465	Argument	to		63447	0					
ANR	63466	Identifier	to		63447	0					
ANR	63467	Argument	& to_st		63447	1					
ANR	63468	UnaryOperationExpression	& to_st		63447	0					
ANR	63469	UnaryOperator	&		63447	0					
ANR	63470	Identifier	to_st		63447	1					
ANR	63471	IfStatement	if ( backup )		63447	3					
ANR	63472	Condition	backup	450:6:11471:11476	63447	0	True				
ANR	63473	Identifier	backup		63447	0					
ANR	63474	ExpressionStatement	"create_backup ( to , to_errno ? NULL : & to_st , false )"	451:4:11483:11534	63447	1	True				
ANR	63475	CallExpression	"create_backup ( to , to_errno ? NULL : & to_st , false )"		63447	0					
ANR	63476	Callee	create_backup		63447	0					
ANR	63477	Identifier	create_backup		63447	0					
ANR	63478	ArgumentList	to		63447	1					
ANR	63479	Argument	to		63447	0					
ANR	63480	Identifier	to		63447	0					
ANR	63481	Argument	to_errno ? NULL : & to_st		63447	1					
ANR	63482	ConditionalExpression	to_errno ? NULL : & to_st		63447	0					
ANR	63483	Condition	to_errno		63447	0					
ANR	63484	Identifier	to_errno		63447	0					
ANR	63485	Identifier	NULL		63447	1					
ANR	63486	UnaryOperationExpression	& to_st		63447	2					
ANR	63487	UnaryOperator	&		63447	0					
ANR	63488	Identifier	to_st		63447	1					
ANR	63489	Argument	false		63447	2					
ANR	63490	Identifier	false		63447	0					
ANR	63491	IfStatement	if ( ! to_errno )		63447	4					
ANR	63492	Condition	! to_errno	452:6:11542:11551	63447	0	True				
ANR	63493	UnaryOperationExpression	! to_errno		63447	0					
ANR	63494	UnaryOperator	!		63447	0					
ANR	63495	Identifier	to_errno		63447	1					
ANR	63496	ExpressionStatement	"insert_file_id ( & to_st , OVERWRITTEN )"	453:4:11558:11594	63447	1	True				
ANR	63497	CallExpression	"insert_file_id ( & to_st , OVERWRITTEN )"		63447	0					
ANR	63498	Callee	insert_file_id		63447	0					
ANR	63499	Identifier	insert_file_id		63447	0					
ANR	63500	ArgumentList	& to_st		63447	1					
ANR	63501	Argument	& to_st		63447	0					
ANR	63502	UnaryOperationExpression	& to_st		63447	0					
ANR	63503	UnaryOperator	&		63447	0					
ANR	63504	Identifier	to_st		63447	1					
ANR	63505	Argument	OVERWRITTEN		63447	1					
ANR	63506	Identifier	OVERWRITTEN		63447	0					
ANR	63507	IfStatement	if ( from )		63447	5					
ANR	63508	Condition	from	455:6:11603:11606	63447	0	True				
ANR	63509	Identifier	from		63447	0					
ANR	63510	CompoundStatement		12:4:224:224	63447	1					
ANR	63511	IfStatement	if ( S_ISLNK ( mode ) )		63447	0					
ANR	63512	Condition	S_ISLNK ( mode )	457:10:11625:11638	63447	0	True				
ANR	63513	CallExpression	S_ISLNK ( mode )		63447	0					
ANR	63514	Callee	S_ISLNK		63447	0					
ANR	63515	Identifier	S_ISLNK		63447	0					
ANR	63516	ArgumentList	mode		63447	1					
ANR	63517	Argument	mode		63447	0					
ANR	63518	Identifier	mode		63447	0					
ANR	63519	CompoundStatement		20:3:452:471	63447	1					
ANR	63520	IdentifierDeclStatement	bool to_dir_known_to_exist = false ;	459:3:11647:11681	63447	0	True				
ANR	63521	IdentifierDecl	to_dir_known_to_exist = false		63447	0					
ANR	63522	IdentifierDeclType	bool		63447	0					
ANR	63523	Identifier	to_dir_known_to_exist		63447	1					
ANR	63524	AssignmentExpression	to_dir_known_to_exist = false		63447	2		=			
ANR	63525	Identifier	false		63447	0					
ANR	63526	Identifier	false		63447	1					
ANR	63527	IdentifierDeclStatement	char * buffer = xmalloc ( PATH_MAX ) ;	463:3:11803:11836	63447	1	True				
ANR	63528	IdentifierDecl	* buffer = xmalloc ( PATH_MAX )		63447	0					
ANR	63529	IdentifierDeclType	char *		63447	0					
ANR	63530	Identifier	buffer		63447	1					
ANR	63531	AssignmentExpression	* buffer = xmalloc ( PATH_MAX )		63447	2		=			
ANR	63532	Identifier	buffer		63447	0					
ANR	63533	CallExpression	xmalloc ( PATH_MAX )		63447	1					
ANR	63534	Callee	xmalloc		63447	0					
ANR	63535	Identifier	xmalloc		63447	0					
ANR	63536	ArgumentList	PATH_MAX		63447	1					
ANR	63537	Argument	PATH_MAX		63447	0					
ANR	63538	Identifier	PATH_MAX		63447	0					
ANR	63539	IdentifierDeclStatement	"int fd , size = 0 , i ;"	464:3:11841:11860	63447	2	True				
ANR	63540	IdentifierDecl	fd		63447	0					
ANR	63541	IdentifierDeclType	int		63447	0					
ANR	63542	Identifier	fd		63447	1					
ANR	63543	IdentifierDecl	size = 0		63447	1					
ANR	63544	IdentifierDeclType	int		63447	0					
ANR	63545	Identifier	size		63447	1					
ANR	63546	AssignmentExpression	size = 0		63447	2		=			
ANR	63547	Identifier	size		63447	0					
ANR	63548	PrimaryExpression	0		63447	1					
ANR	63549	IdentifierDecl	i		63447	2					
ANR	63550	IdentifierDeclType	int		63447	0					
ANR	63551	Identifier	i		63447	1					
ANR	63552	IfStatement	"if ( ( fd = safe_open ( from , O_RDONLY | O_BINARY , 0 ) ) < 0 )"		63447	3					
ANR	63553	Condition	"( fd = safe_open ( from , O_RDONLY | O_BINARY , 0 ) ) < 0"	466:7:11870:11920	63447	0	True				
ANR	63554	RelationalExpression	"( fd = safe_open ( from , O_RDONLY | O_BINARY , 0 ) ) < 0"		63447	0		<			
ANR	63555	AssignmentExpression	"fd = safe_open ( from , O_RDONLY | O_BINARY , 0 )"		63447	0		=			
ANR	63556	Identifier	fd		63447	0					
ANR	63557	CallExpression	"safe_open ( from , O_RDONLY | O_BINARY , 0 )"		63447	1					
ANR	63558	Callee	safe_open		63447	0					
ANR	63559	Identifier	safe_open		63447	0					
ANR	63560	ArgumentList	from		63447	1					
ANR	63561	Argument	from		63447	0					
ANR	63562	Identifier	from		63447	0					
ANR	63563	Argument	O_RDONLY | O_BINARY		63447	1					
ANR	63564	InclusiveOrExpression	O_RDONLY | O_BINARY		63447	0		|			
ANR	63565	Identifier	O_RDONLY		63447	0					
ANR	63566	Identifier	O_BINARY		63447	1					
ANR	63567	Argument	0		63447	2					
ANR	63568	PrimaryExpression	0		63447	0					
ANR	63569	PrimaryExpression	0		63447	1					
ANR	63570	ExpressionStatement	"pfatal ( ""Can't reopen file %s"" , quotearg ( from ) )"	467:5:11928:11976	63447	1	True				
ANR	63571	CallExpression	"pfatal ( ""Can't reopen file %s"" , quotearg ( from ) )"		63447	0					
ANR	63572	Callee	pfatal		63447	0					
ANR	63573	Identifier	pfatal		63447	0					
ANR	63574	ArgumentList	"""Can't reopen file %s"""		63447	1					
ANR	63575	Argument	"""Can't reopen file %s"""		63447	0					
ANR	63576	PrimaryExpression	"""Can't reopen file %s"""		63447	0					
ANR	63577	Argument	quotearg ( from )		63447	1					
ANR	63578	CallExpression	quotearg ( from )		63447	0					
ANR	63579	Callee	quotearg		63447	0					
ANR	63580	Identifier	quotearg		63447	0					
ANR	63581	ArgumentList	from		63447	1					
ANR	63582	Argument	from		63447	0					
ANR	63583	Identifier	from		63447	0					
ANR	63584	WhileStatement	"while ( ( i = read ( fd , buffer + size , PATH_MAX - size ) ) > 0 )"		63447	4					
ANR	63585	Condition	"( i = read ( fd , buffer + size , PATH_MAX - size ) ) > 0"	468:10:11988:12038	63447	0	True				
ANR	63586	RelationalExpression	"( i = read ( fd , buffer + size , PATH_MAX - size ) ) > 0"		63447	0		>			
ANR	63587	AssignmentExpression	"i = read ( fd , buffer + size , PATH_MAX - size )"		63447	0		=			
ANR	63588	Identifier	i		63447	0					
ANR	63589	CallExpression	"read ( fd , buffer + size , PATH_MAX - size )"		63447	1					
ANR	63590	Callee	read		63447	0					
ANR	63591	Identifier	read		63447	0					
ANR	63592	ArgumentList	fd		63447	1					
ANR	63593	Argument	fd		63447	0					
ANR	63594	Identifier	fd		63447	0					
ANR	63595	Argument	buffer + size		63447	1					
ANR	63596	AdditiveExpression	buffer + size		63447	0		+			
ANR	63597	Identifier	buffer		63447	0					
ANR	63598	Identifier	size		63447	1					
ANR	63599	Argument	PATH_MAX - size		63447	2					
ANR	63600	AdditiveExpression	PATH_MAX - size		63447	0		-			
ANR	63601	Identifier	PATH_MAX		63447	0					
ANR	63602	Identifier	size		63447	1					
ANR	63603	PrimaryExpression	0		63447	1					
ANR	63604	ExpressionStatement	size += i	469:5:12046:12055	63447	1	True				
ANR	63605	AssignmentExpression	size += i		63447	0		+=			
ANR	63606	Identifier	size		63447	0					
ANR	63607	Identifier	i		63447	1					
ANR	63608	IfStatement	if ( i != 0 || close ( fd ) != 0 )		63447	5					
ANR	63609	Condition	i != 0 || close ( fd ) != 0	470:7:12064:12088	63447	0	True				
ANR	63610	OrExpression	i != 0 || close ( fd ) != 0		63447	0		||			
ANR	63611	EqualityExpression	i != 0		63447	0		!=			
ANR	63612	Identifier	i		63447	0					
ANR	63613	PrimaryExpression	0		63447	1					
ANR	63614	EqualityExpression	close ( fd ) != 0		63447	1		!=			
ANR	63615	CallExpression	close ( fd )		63447	0					
ANR	63616	Callee	close		63447	0					
ANR	63617	Identifier	close		63447	0					
ANR	63618	ArgumentList	fd		63447	1					
ANR	63619	Argument	fd		63447	0					
ANR	63620	Identifier	fd		63447	0					
ANR	63621	PrimaryExpression	0		63447	1					
ANR	63622	ExpressionStatement	read_fatal ( )	471:5:12096:12109	63447	1	True				
ANR	63623	CallExpression	read_fatal ( )		63447	0					
ANR	63624	Callee	read_fatal		63447	0					
ANR	63625	Identifier	read_fatal		63447	0					
ANR	63626	ArgumentList			63447	1					
ANR	63627	ExpressionStatement	buffer [ size ] = 0	472:3:12114:12130	63447	6	True				
ANR	63628	AssignmentExpression	buffer [ size ] = 0		63447	0		=			
ANR	63629	ArrayIndexing	buffer [ size ]		63447	0					
ANR	63630	Identifier	buffer		63447	0					
ANR	63631	Identifier	size		63447	1					
ANR	63632	PrimaryExpression	0		63447	1					
ANR	63633	IfStatement	if ( ! backup )		63447	7					
ANR	63634	Condition	! backup	474:7:12140:12147	63447	0	True				
ANR	63635	UnaryOperationExpression	! backup		63447	0					
ANR	63636	UnaryOperator	!		63447	0					
ANR	63637	Identifier	backup		63447	1					
ANR	63638	CompoundStatement		31:5:766:766	63447	1					
ANR	63639	IfStatement	if ( safe_unlink ( to ) == 0 )		63447	0					
ANR	63640	Condition	safe_unlink ( to ) == 0	476:11:12168:12188	63447	0	True				
ANR	63641	EqualityExpression	safe_unlink ( to ) == 0		63447	0		==			
ANR	63642	CallExpression	safe_unlink ( to )		63447	0					
ANR	63643	Callee	safe_unlink		63447	0					
ANR	63644	Identifier	safe_unlink		63447	0					
ANR	63645	ArgumentList	to		63447	1					
ANR	63646	Argument	to		63447	0					
ANR	63647	Identifier	to		63447	0					
ANR	63648	PrimaryExpression	0		63447	1					
ANR	63649	ExpressionStatement	to_dir_known_to_exist = true	477:2:12193:12221	63447	1	True				
ANR	63650	AssignmentExpression	to_dir_known_to_exist = true		63447	0		=			
ANR	63651	Identifier	to_dir_known_to_exist		63447	0					
ANR	63652	Identifier	true		63447	1					
ANR	63653	IfStatement	"if ( safe_symlink ( buffer , to ) != 0 )"		63447	8					
ANR	63654	Condition	"safe_symlink ( buffer , to ) != 0"	479:7:12237:12266	63447	0	True				
ANR	63655	EqualityExpression	"safe_symlink ( buffer , to ) != 0"		63447	0		!=			
ANR	63656	CallExpression	"safe_symlink ( buffer , to )"		63447	0					
ANR	63657	Callee	safe_symlink		63447	0					
ANR	63658	Identifier	safe_symlink		63447	0					
ANR	63659	ArgumentList	buffer		63447	1					
ANR	63660	Argument	buffer		63447	0					
ANR	63661	Identifier	buffer		63447	0					
ANR	63662	Argument	to		63447	1					
ANR	63663	Identifier	to		63447	0					
ANR	63664	PrimaryExpression	0		63447	1					
ANR	63665	CompoundStatement		36:5:885:885	63447	1					
ANR	63666	IfStatement	if ( errno == ENOENT && ! to_dir_known_to_exist )		63447	0					
ANR	63667	Condition	errno == ENOENT && ! to_dir_known_to_exist	481:11:12287:12328	63447	0	True				
ANR	63668	AndExpression	errno == ENOENT && ! to_dir_known_to_exist		63447	0		&&			
ANR	63669	EqualityExpression	errno == ENOENT		63447	0		==			
ANR	63670	Identifier	errno		63447	0					
ANR	63671	Identifier	ENOENT		63447	1					
ANR	63672	UnaryOperationExpression	! to_dir_known_to_exist		63447	1					
ANR	63673	UnaryOperator	!		63447	0					
ANR	63674	Identifier	to_dir_known_to_exist		63447	1					
ANR	63675	ExpressionStatement	makedirs ( to )	482:2:12333:12346	63447	1	True				
ANR	63676	CallExpression	makedirs ( to )		63447	0					
ANR	63677	Callee	makedirs		63447	0					
ANR	63678	Identifier	makedirs		63447	0					
ANR	63679	ArgumentList	to		63447	1					
ANR	63680	Argument	to		63447	0					
ANR	63681	Identifier	to		63447	0					
ANR	63682	IfStatement	"if ( safe_symlink ( buffer , to ) != 0 )"		63447	1					
ANR	63683	Condition	"safe_symlink ( buffer , to ) != 0"	483:11:12359:12388	63447	0	True				
ANR	63684	EqualityExpression	"safe_symlink ( buffer , to ) != 0"		63447	0		!=			
ANR	63685	CallExpression	"safe_symlink ( buffer , to )"		63447	0					
ANR	63686	Callee	safe_symlink		63447	0					
ANR	63687	Identifier	safe_symlink		63447	0					
ANR	63688	ArgumentList	buffer		63447	1					
ANR	63689	Argument	buffer		63447	0					
ANR	63690	Identifier	buffer		63447	0					
ANR	63691	Argument	to		63447	1					
ANR	63692	Identifier	to		63447	0					
ANR	63693	PrimaryExpression	0		63447	1					
ANR	63694	ExpressionStatement	"pfatal ( ""Can't create %s %s"" , ""symbolic link"" , to )"	484:2:12393:12443	63447	1	True				
ANR	63695	CallExpression	"pfatal ( ""Can't create %s %s"" , ""symbolic link"" , to )"		63447	0					
ANR	63696	Callee	pfatal		63447	0					
ANR	63697	Identifier	pfatal		63447	0					
ANR	63698	ArgumentList	"""Can't create %s %s"""		63447	1					
ANR	63699	Argument	"""Can't create %s %s"""		63447	0					
ANR	63700	PrimaryExpression	"""Can't create %s %s"""		63447	0					
ANR	63701	Argument	"""symbolic link"""		63447	1					
ANR	63702	PrimaryExpression	"""symbolic link"""		63447	0					
ANR	63703	Argument	to		63447	2					
ANR	63704	Identifier	to		63447	0					
ANR	63705	ExpressionStatement	free ( buffer )	486:3:12455:12468	63447	9	True				
ANR	63706	CallExpression	free ( buffer )		63447	0					
ANR	63707	Callee	free		63447	0					
ANR	63708	Identifier	free		63447	0					
ANR	63709	ArgumentList	buffer		63447	1					
ANR	63710	Argument	buffer		63447	0					
ANR	63711	Identifier	buffer		63447	0					
ANR	63712	IfStatement	"if ( safe_lstat ( to , & to_st ) != 0 )"		63447	10					
ANR	63713	Condition	"safe_lstat ( to , & to_st ) != 0"	487:7:12477:12504	63447	0	True				
ANR	63714	EqualityExpression	"safe_lstat ( to , & to_st ) != 0"		63447	0		!=			
ANR	63715	CallExpression	"safe_lstat ( to , & to_st )"		63447	0					
ANR	63716	Callee	safe_lstat		63447	0					
ANR	63717	Identifier	safe_lstat		63447	0					
ANR	63718	ArgumentList	to		63447	1					
ANR	63719	Argument	to		63447	0					
ANR	63720	Identifier	to		63447	0					
ANR	63721	Argument	& to_st		63447	1					
ANR	63722	UnaryOperationExpression	& to_st		63447	0					
ANR	63723	UnaryOperator	&		63447	0					
ANR	63724	Identifier	to_st		63447	1					
ANR	63725	PrimaryExpression	0		63447	1					
ANR	63726	ExpressionStatement	"pfatal ( ""Can't get file attributes of %s %s"" , ""symbolic link"" , to )"	488:5:12512:12578	63447	1	True				
ANR	63727	CallExpression	"pfatal ( ""Can't get file attributes of %s %s"" , ""symbolic link"" , to )"		63447	0					
ANR	63728	Callee	pfatal		63447	0					
ANR	63729	Identifier	pfatal		63447	0					
ANR	63730	ArgumentList	"""Can't get file attributes of %s %s"""		63447	1					
ANR	63731	Argument	"""Can't get file attributes of %s %s"""		63447	0					
ANR	63732	PrimaryExpression	"""Can't get file attributes of %s %s"""		63447	0					
ANR	63733	Argument	"""symbolic link"""		63447	1					
ANR	63734	PrimaryExpression	"""symbolic link"""		63447	0					
ANR	63735	Argument	to		63447	2					
ANR	63736	Identifier	to		63447	0					
ANR	63737	ExpressionStatement	"insert_file_id ( & to_st , CREATED )"	489:3:12583:12615	63447	11	True				
ANR	63738	CallExpression	"insert_file_id ( & to_st , CREATED )"		63447	0					
ANR	63739	Callee	insert_file_id		63447	0					
ANR	63740	Identifier	insert_file_id		63447	0					
ANR	63741	ArgumentList	& to_st		63447	1					
ANR	63742	Argument	& to_st		63447	0					
ANR	63743	UnaryOperationExpression	& to_st		63447	0					
ANR	63744	UnaryOperator	&		63447	0					
ANR	63745	Identifier	to_st		63447	1					
ANR	63746	Argument	CREATED		63447	1					
ANR	63747	Identifier	CREATED		63447	0					
ANR	63748	ElseStatement	else		63447	0					
ANR	63749	CompoundStatement		48:1:1243:1243	63447	0					
ANR	63750	IfStatement	if ( debug & 4 )		63447	0					
ANR	63751	Condition	debug & 4	493:7:12641:12649	63447	0	True				
ANR	63752	BitAndExpression	debug & 4		63447	0		&			
ANR	63753	Identifier	debug		63447	0					
ANR	63754	PrimaryExpression	4		63447	1					
ANR	63755	ExpressionStatement	"say ( ""Renaming file %s to %s\\n"" , quotearg_n ( 0 , from ) , quotearg_n ( 1 , to ) )"	494:5:12657:12734	63447	1	True				
ANR	63756	CallExpression	"say ( ""Renaming file %s to %s\\n"" , quotearg_n ( 0 , from ) , quotearg_n ( 1 , to ) )"		63447	0					
ANR	63757	Callee	say		63447	0					
ANR	63758	Identifier	say		63447	0					
ANR	63759	ArgumentList	"""Renaming file %s to %s\\n"""		63447	1					
ANR	63760	Argument	"""Renaming file %s to %s\\n"""		63447	0					
ANR	63761	PrimaryExpression	"""Renaming file %s to %s\\n"""		63447	0					
ANR	63762	Argument	"quotearg_n ( 0 , from )"		63447	1					
ANR	63763	CallExpression	"quotearg_n ( 0 , from )"		63447	0					
ANR	63764	Callee	quotearg_n		63447	0					
ANR	63765	Identifier	quotearg_n		63447	0					
ANR	63766	ArgumentList	0		63447	1					
ANR	63767	Argument	0		63447	0					
ANR	63768	PrimaryExpression	0		63447	0					
ANR	63769	Argument	from		63447	1					
ANR	63770	Identifier	from		63447	0					
ANR	63771	Argument	"quotearg_n ( 1 , to )"		63447	2					
ANR	63772	CallExpression	"quotearg_n ( 1 , to )"		63447	0					
ANR	63773	Callee	quotearg_n		63447	0					
ANR	63774	Identifier	quotearg_n		63447	0					
ANR	63775	ArgumentList	1		63447	1					
ANR	63776	Argument	1		63447	0					
ANR	63777	PrimaryExpression	1		63447	0					
ANR	63778	Argument	to		63447	1					
ANR	63779	Identifier	to		63447	0					
ANR	63780	IfStatement	"if ( safe_rename ( from , to ) != 0 )"		63447	1					
ANR	63781	Condition	"safe_rename ( from , to ) != 0"	497:7:12744:12770	63447	0	True				
ANR	63782	EqualityExpression	"safe_rename ( from , to ) != 0"		63447	0		!=			
ANR	63783	CallExpression	"safe_rename ( from , to )"		63447	0					
ANR	63784	Callee	safe_rename		63447	0					
ANR	63785	Identifier	safe_rename		63447	0					
ANR	63786	ArgumentList	from		63447	1					
ANR	63787	Argument	from		63447	0					
ANR	63788	Identifier	from		63447	0					
ANR	63789	Argument	to		63447	1					
ANR	63790	Identifier	to		63447	0					
ANR	63791	PrimaryExpression	0		63447	1					
ANR	63792	CompoundStatement		55:7:1398:1432	63447	1					
ANR	63793	IdentifierDeclStatement	bool to_dir_known_to_exist = false ;	499:7:12787:12821	63447	0	True				
ANR	63794	IdentifierDecl	to_dir_known_to_exist = false		63447	0					
ANR	63795	IdentifierDeclType	bool		63447	0					
ANR	63796	Identifier	to_dir_known_to_exist		63447	1					
ANR	63797	AssignmentExpression	to_dir_known_to_exist = false		63447	2		=			
ANR	63798	Identifier	false		63447	0					
ANR	63799	Identifier	false		63447	1					
ANR	63800	IfStatement	if ( errno == ENOENT && ( to_errno == - 1 || to_errno == ENOENT ) )		63447	1					
ANR	63801	Condition	errno == ENOENT && ( to_errno == - 1 || to_errno == ENOENT )	501:11:12835:12895	63447	0	True				
ANR	63802	AndExpression	errno == ENOENT && ( to_errno == - 1 || to_errno == ENOENT )		63447	0		&&			
ANR	63803	EqualityExpression	errno == ENOENT		63447	0		==			
ANR	63804	Identifier	errno		63447	0					
ANR	63805	Identifier	ENOENT		63447	1					
ANR	63806	OrExpression	to_errno == - 1 || to_errno == ENOENT		63447	1		||			
ANR	63807	EqualityExpression	to_errno == - 1		63447	0		==			
ANR	63808	Identifier	to_errno		63447	0					
ANR	63809	UnaryOperationExpression	- 1		63447	1					
ANR	63810	UnaryOperator	-		63447	0					
ANR	63811	PrimaryExpression	1		63447	1					
ANR	63812	EqualityExpression	to_errno == ENOENT		63447	1		==			
ANR	63813	Identifier	to_errno		63447	0					
ANR	63814	Identifier	ENOENT		63447	1					
ANR	63815	CompoundStatement		59:2:1511:1511	63447	1					
ANR	63816	ExpressionStatement	makedirs ( to )	504:4:12906:12919	63447	0	True				
ANR	63817	CallExpression	makedirs ( to )		63447	0					
ANR	63818	Callee	makedirs		63447	0					
ANR	63819	Identifier	makedirs		63447	0					
ANR	63820	ArgumentList	to		63447	1					
ANR	63821	Argument	to		63447	0					
ANR	63822	Identifier	to		63447	0					
ANR	63823	ExpressionStatement	to_dir_known_to_exist = true	505:4:12925:12953	63447	1	True				
ANR	63824	AssignmentExpression	to_dir_known_to_exist = true		63447	0		=			
ANR	63825	Identifier	to_dir_known_to_exist		63447	0					
ANR	63826	Identifier	true		63447	1					
ANR	63827	IfStatement	"if ( safe_rename ( from , to ) == 0 )"		63447	2					
ANR	63828	Condition	"safe_rename ( from , to ) == 0"	506:8:12963:12989	63447	0	True				
ANR	63829	EqualityExpression	"safe_rename ( from , to ) == 0"		63447	0		==			
ANR	63830	CallExpression	"safe_rename ( from , to )"		63447	0					
ANR	63831	Callee	safe_rename		63447	0					
ANR	63832	Identifier	safe_rename		63447	0					
ANR	63833	ArgumentList	from		63447	1					
ANR	63834	Argument	from		63447	0					
ANR	63835	Identifier	from		63447	0					
ANR	63836	Argument	to		63447	1					
ANR	63837	Identifier	to		63447	0					
ANR	63838	PrimaryExpression	0		63447	1					
ANR	63839	GotoStatement	goto rename_succeeded ;	507:6:12998:13019	63447	1	True				
ANR	63840	Identifier	rename_succeeded		63447	0					
ANR	63841	IfStatement	if ( errno == EXDEV )		63447	2					
ANR	63842	Condition	errno == EXDEV	510:11:13037:13050	63447	0	True				
ANR	63843	EqualityExpression	errno == EXDEV		63447	0		==			
ANR	63844	Identifier	errno		63447	0					
ANR	63845	Identifier	EXDEV		63447	1					
ANR	63846	CompoundStatement		68:4:1672:1688	63447	1					
ANR	63847	IdentifierDeclStatement	struct stat tost ;	512:4:13061:13077	63447	0	True				
ANR	63848	IdentifierDecl	tost		63447	0					
ANR	63849	IdentifierDeclType	struct stat		63447	0					
ANR	63850	Identifier	tost		63447	1					
ANR	63851	IfStatement	if ( ! backup )		63447	1					
ANR	63852	Condition	! backup	513:8:13087:13094	63447	0	True				
ANR	63853	UnaryOperationExpression	! backup		63447	0					
ANR	63854	UnaryOperator	!		63447	0					
ANR	63855	Identifier	backup		63447	1					
ANR	63856	CompoundStatement		70:6:1714:1714	63447	1					
ANR	63857	IfStatement	if ( safe_unlink ( to ) == 0 )		63447	0					
ANR	63858	Condition	safe_unlink ( to ) == 0	515:12:13117:13137	63447	0	True				
ANR	63859	EqualityExpression	safe_unlink ( to ) == 0		63447	0		==			
ANR	63860	CallExpression	safe_unlink ( to )		63447	0					
ANR	63861	Callee	safe_unlink		63447	0					
ANR	63862	Identifier	safe_unlink		63447	0					
ANR	63863	ArgumentList	to		63447	1					
ANR	63864	Argument	to		63447	0					
ANR	63865	Identifier	to		63447	0					
ANR	63866	PrimaryExpression	0		63447	1					
ANR	63867	ExpressionStatement	to_dir_known_to_exist = true	516:3:13143:13171	63447	1	True				
ANR	63868	AssignmentExpression	to_dir_known_to_exist = true		63447	0		=			
ANR	63869	Identifier	to_dir_known_to_exist		63447	0					
ANR	63870	Identifier	true		63447	1					
ANR	63871	ElseStatement	else		63447	0					
ANR	63872	IfStatement	if ( errno != ENOENT )		63447	0					
ANR	63873	Condition	errno != ENOENT	517:17:13190:13204	63447	0	True				
ANR	63874	EqualityExpression	errno != ENOENT		63447	0		!=			
ANR	63875	Identifier	errno		63447	0					
ANR	63876	Identifier	ENOENT		63447	1					
ANR	63877	ExpressionStatement	"pfatal ( ""Can't remove file %s"" , quotearg ( to ) )"	518:3:13210:13256	63447	1	True				
ANR	63878	CallExpression	"pfatal ( ""Can't remove file %s"" , quotearg ( to ) )"		63447	0					
ANR	63879	Callee	pfatal		63447	0					
ANR	63880	Identifier	pfatal		63447	0					
ANR	63881	ArgumentList	"""Can't remove file %s"""		63447	1					
ANR	63882	Argument	"""Can't remove file %s"""		63447	0					
ANR	63883	PrimaryExpression	"""Can't remove file %s"""		63447	0					
ANR	63884	Argument	quotearg ( to )		63447	1					
ANR	63885	CallExpression	quotearg ( to )		63447	0					
ANR	63886	Callee	quotearg		63447	0					
ANR	63887	Identifier	quotearg		63447	0					
ANR	63888	ArgumentList	to		63447	1					
ANR	63889	Argument	to		63447	0					
ANR	63890	Identifier	to		63447	0					
ANR	63891	ExpressionStatement	"copy_file ( from , to , & tost , 0 , mode , to_dir_known_to_exist )"	520:4:13270:13329	63447	2	True				
ANR	63892	CallExpression	"copy_file ( from , to , & tost , 0 , mode , to_dir_known_to_exist )"		63447	0					
ANR	63893	Callee	copy_file		63447	0					
ANR	63894	Identifier	copy_file		63447	0					
ANR	63895	ArgumentList	from		63447	1					
ANR	63896	Argument	from		63447	0					
ANR	63897	Identifier	from		63447	0					
ANR	63898	Argument	to		63447	1					
ANR	63899	Identifier	to		63447	0					
ANR	63900	Argument	& tost		63447	2					
ANR	63901	UnaryOperationExpression	& tost		63447	0					
ANR	63902	UnaryOperator	&		63447	0					
ANR	63903	Identifier	tost		63447	1					
ANR	63904	Argument	0		63447	3					
ANR	63905	PrimaryExpression	0		63447	0					
ANR	63906	Argument	mode		63447	4					
ANR	63907	Identifier	mode		63447	0					
ANR	63908	Argument	to_dir_known_to_exist		63447	5					
ANR	63909	Identifier	to_dir_known_to_exist		63447	0					
ANR	63910	ExpressionStatement	"insert_file_id ( & tost , CREATED )"	521:4:13335:13366	63447	3	True				
ANR	63911	CallExpression	"insert_file_id ( & tost , CREATED )"		63447	0					
ANR	63912	Callee	insert_file_id		63447	0					
ANR	63913	Identifier	insert_file_id		63447	0					
ANR	63914	ArgumentList	& tost		63447	1					
ANR	63915	Argument	& tost		63447	0					
ANR	63916	UnaryOperationExpression	& tost		63447	0					
ANR	63917	UnaryOperator	&		63447	0					
ANR	63918	Identifier	tost		63447	1					
ANR	63919	Argument	CREATED		63447	1					
ANR	63920	Identifier	CREATED		63447	0					
ANR	63921	ReturnStatement	return ;	522:4:13372:13378	63447	4	True				
ANR	63922	ExpressionStatement	"pfatal ( ""Can't rename file %s to %s"" , quotearg_n ( 0 , from ) , quotearg_n ( 1 , to ) )"	525:7:13392:13479	63447	3	True				
ANR	63923	CallExpression	"pfatal ( ""Can't rename file %s to %s"" , quotearg_n ( 0 , from ) , quotearg_n ( 1 , to ) )"		63447	0					
ANR	63924	Callee	pfatal		63447	0					
ANR	63925	Identifier	pfatal		63447	0					
ANR	63926	ArgumentList	"""Can't rename file %s to %s"""		63447	1					
ANR	63927	Argument	"""Can't rename file %s to %s"""		63447	0					
ANR	63928	PrimaryExpression	"""Can't rename file %s to %s"""		63447	0					
ANR	63929	Argument	"quotearg_n ( 0 , from )"		63447	1					
ANR	63930	CallExpression	"quotearg_n ( 0 , from )"		63447	0					
ANR	63931	Callee	quotearg_n		63447	0					
ANR	63932	Identifier	quotearg_n		63447	0					
ANR	63933	ArgumentList	0		63447	1					
ANR	63934	Argument	0		63447	0					
ANR	63935	PrimaryExpression	0		63447	0					
ANR	63936	Argument	from		63447	1					
ANR	63937	Identifier	from		63447	0					
ANR	63938	Argument	"quotearg_n ( 1 , to )"		63447	2					
ANR	63939	CallExpression	"quotearg_n ( 1 , to )"		63447	0					
ANR	63940	Callee	quotearg_n		63447	0					
ANR	63941	Identifier	quotearg_n		63447	0					
ANR	63942	ArgumentList	1		63447	1					
ANR	63943	Argument	1		63447	0					
ANR	63944	PrimaryExpression	1		63447	0					
ANR	63945	Argument	to		63447	1					
ANR	63946	Identifier	to		63447	0					
ANR	63947	Label	rename_succeeded :	529:1:13490:13506	63447	2	True				
ANR	63948	Identifier	rename_succeeded		63447	0					
ANR	63949	ExpressionStatement	"insert_file_id ( fromst , CREATED )"	530:3:13511:13543	63447	3	True				
ANR	63950	CallExpression	"insert_file_id ( fromst , CREATED )"		63447	0					
ANR	63951	Callee	insert_file_id		63447	0					
ANR	63952	Identifier	insert_file_id		63447	0					
ANR	63953	ArgumentList	fromst		63447	1					
ANR	63954	Argument	fromst		63447	0					
ANR	63955	Identifier	fromst		63447	0					
ANR	63956	Argument	CREATED		63447	1					
ANR	63957	Identifier	CREATED		63447	0					
ANR	63958	IfStatement	if ( ( 0 < to_errno || ( to_errno == 0 && to_st . st_nlink <= 1 ) ) && from_needs_removal )		63447	4					
ANR	63959	Condition	( 0 < to_errno || ( to_errno == 0 && to_st . st_nlink <= 1 ) ) && from_needs_removal	534:7:13707:13799	63447	0	True				
ANR	63960	AndExpression	( 0 < to_errno || ( to_errno == 0 && to_st . st_nlink <= 1 ) ) && from_needs_removal		63447	0		&&			
ANR	63961	OrExpression	0 < to_errno || ( to_errno == 0 && to_st . st_nlink <= 1 )		63447	0		||			
ANR	63962	RelationalExpression	0 < to_errno		63447	0		<			
ANR	63963	PrimaryExpression	0		63447	0					
ANR	63964	Identifier	to_errno		63447	1					
ANR	63965	AndExpression	to_errno == 0 && to_st . st_nlink <= 1		63447	1		&&			
ANR	63966	EqualityExpression	to_errno == 0		63447	0		==			
ANR	63967	Identifier	to_errno		63447	0					
ANR	63968	PrimaryExpression	0		63447	1					
ANR	63969	RelationalExpression	to_st . st_nlink <= 1		63447	1		<=			
ANR	63970	MemberAccess	to_st . st_nlink		63447	0					
ANR	63971	Identifier	to_st		63447	0					
ANR	63972	Identifier	st_nlink		63447	1					
ANR	63973	PrimaryExpression	1		63447	1					
ANR	63974	Identifier	from_needs_removal		63447	1					
ANR	63975	ExpressionStatement	* from_needs_removal = false	537:5:13807:13834	63447	1	True				
ANR	63976	AssignmentExpression	* from_needs_removal = false		63447	0		=			
ANR	63977	UnaryOperationExpression	* from_needs_removal		63447	0					
ANR	63978	UnaryOperator	*		63447	0					
ANR	63979	Identifier	from_needs_removal		63447	1					
ANR	63980	Identifier	false		63447	1					
ANR	63981	ElseStatement	else		63447	0					
ANR	63982	IfStatement	if ( ! backup )		63447	0					
ANR	63983	Condition	! backup	540:11:13856:13863	63447	0	True				
ANR	63984	UnaryOperationExpression	! backup		63447	0					
ANR	63985	UnaryOperator	!		63447	0					
ANR	63986	Identifier	backup		63447	1					
ANR	63987	CompoundStatement		97:4:2481:2481	63447	1					
ANR	63988	IfStatement	if ( debug & 4 )		63447	0					
ANR	63989	Condition	debug & 4	542:10:13882:13890	63447	0	True				
ANR	63990	BitAndExpression	debug & 4		63447	0		&			
ANR	63991	Identifier	debug		63447	0					
ANR	63992	PrimaryExpression	4		63447	1					
ANR	63993	ExpressionStatement	"say ( ""Removing file %s\\n"" , quotearg ( to ) )"	543:1:13894:13935	63447	1	True				
ANR	63994	CallExpression	"say ( ""Removing file %s\\n"" , quotearg ( to ) )"		63447	0					
ANR	63995	Callee	say		63447	0					
ANR	63996	Identifier	say		63447	0					
ANR	63997	ArgumentList	"""Removing file %s\\n"""		63447	1					
ANR	63998	Argument	"""Removing file %s\\n"""		63447	0					
ANR	63999	PrimaryExpression	"""Removing file %s\\n"""		63447	0					
ANR	64000	Argument	quotearg ( to )		63447	1					
ANR	64001	CallExpression	quotearg ( to )		63447	0					
ANR	64002	Callee	quotearg		63447	0					
ANR	64003	Identifier	quotearg		63447	0					
ANR	64004	ArgumentList	to		63447	1					
ANR	64005	Argument	to		63447	0					
ANR	64006	Identifier	to		63447	0					
ANR	64007	IfStatement	if ( safe_unlink ( to ) != 0 && errno != ENOENT )		63447	1					
ANR	64008	Condition	safe_unlink ( to ) != 0 && errno != ENOENT	544:10:13947:13986	63447	0	True				
ANR	64009	AndExpression	safe_unlink ( to ) != 0 && errno != ENOENT		63447	0		&&			
ANR	64010	EqualityExpression	safe_unlink ( to ) != 0		63447	0		!=			
ANR	64011	CallExpression	safe_unlink ( to )		63447	0					
ANR	64012	Callee	safe_unlink		63447	0					
ANR	64013	Identifier	safe_unlink		63447	0					
ANR	64014	ArgumentList	to		63447	1					
ANR	64015	Argument	to		63447	0					
ANR	64016	Identifier	to		63447	0					
ANR	64017	PrimaryExpression	0		63447	1					
ANR	64018	EqualityExpression	errno != ENOENT		63447	1		!=			
ANR	64019	Identifier	errno		63447	0					
ANR	64020	Identifier	ENOENT		63447	1					
ANR	64021	ExpressionStatement	"pfatal ( ""Can't remove file %s"" , quotearg ( to ) )"	545:1:13990:14036	63447	1	True				
ANR	64022	CallExpression	"pfatal ( ""Can't remove file %s"" , quotearg ( to ) )"		63447	0					
ANR	64023	Callee	pfatal		63447	0					
ANR	64024	Identifier	pfatal		63447	0					
ANR	64025	ArgumentList	"""Can't remove file %s"""		63447	1					
ANR	64026	Argument	"""Can't remove file %s"""		63447	0					
ANR	64027	PrimaryExpression	"""Can't remove file %s"""		63447	0					
ANR	64028	Argument	quotearg ( to )		63447	1					
ANR	64029	CallExpression	quotearg ( to )		63447	0					
ANR	64030	Callee	quotearg		63447	0					
ANR	64031	Identifier	quotearg		63447	0					
ANR	64032	ArgumentList	to		63447	1					
ANR	64033	Argument	to		63447	0					
ANR	64034	Identifier	to		63447	0					
ANR	64035	ReturnType	void		63447	1					
ANR	64036	Identifier	move_file		63447	2					
ANR	64037	ParameterList	"char const * from , bool * from_needs_removal , struct stat const * fromst , char const * to , mode_t mode , bool backup"		63447	3					
ANR	64038	Parameter	char const * from	442:11:11267:11282	63447	0	True				
ANR	64039	ParameterType	char const *		63447	0					
ANR	64040	Identifier	from		63447	1					
ANR	64041	Parameter	bool * from_needs_removal	442:29:11285:11308	63447	1	True				
ANR	64042	ParameterType	bool *		63447	0					
ANR	64043	Identifier	from_needs_removal		63447	1					
ANR	64044	Parameter	struct stat const * fromst	443:4:11315:11339	63447	2	True				
ANR	64045	ParameterType	struct stat const *		63447	0					
ANR	64046	Identifier	fromst		63447	1					
ANR	64047	Parameter	char const * to	444:4:11346:11359	63447	3	True				
ANR	64048	ParameterType	char const *		63447	0					
ANR	64049	Identifier	to		63447	1					
ANR	64050	Parameter	mode_t mode	444:20:11362:11372	63447	4	True				
ANR	64051	ParameterType	mode_t		63447	0					
ANR	64052	Identifier	mode		63447	1					
ANR	64053	Parameter	bool backup	444:33:11375:11385	63447	5	True				
ANR	64054	ParameterType	bool		63447	0					
ANR	64055	Identifier	backup		63447	1					
ANR	64056	CFGEntryNode	ENTRY		63447		True				
ANR	64057	CFGExitNode	EXIT		63447		True				
ANR	64058	Symbol	backup		63447						
ANR	64059	Symbol	fromst		63447						
ANR	64060	Symbol	quotearg		63447						
ANR	64061	Symbol	O_BINARY		63447						
ANR	64062	Symbol	quotearg_n		63447						
ANR	64063	Symbol	to_st . st_nlink		63447						
ANR	64064	Symbol	safe_unlink		63447						
ANR	64065	Symbol	& tost		63447						
ANR	64066	Symbol	OVERWRITTEN		63447						
ANR	64067	Symbol	mode		63447						
ANR	64068	Symbol	CREATED		63447						
ANR	64069	Symbol	* size		63447						
ANR	64070	Symbol	xmalloc		63447						
ANR	64071	Symbol	safe_rename		63447						
ANR	64072	Symbol	EXDEV		63447						
ANR	64073	Symbol	from_needs_removal		63447						
ANR	64074	Symbol	stat_file		63447						
ANR	64075	Symbol	from		63447						
ANR	64076	Symbol	buffer		63447						
ANR	64077	Symbol	close		63447						
ANR	64078	Symbol	S_ISLNK		63447						
ANR	64079	Symbol	to_errno		63447						
ANR	64080	Symbol	* buffer		63447						
ANR	64081	Symbol	errno		63447						
ANR	64082	Symbol	NULL		63447						
ANR	64083	Symbol	read		63447						
ANR	64084	Symbol	debug		63447						
ANR	64085	Symbol	PATH_MAX		63447						
ANR	64086	Symbol	false		63447						
ANR	64087	Symbol	i		63447						
ANR	64088	Symbol	tost		63447						
ANR	64089	Symbol	ENOENT		63447						
ANR	64090	Symbol	to_dir_known_to_exist		63447						
ANR	64091	Symbol	* from_needs_removal		63447						
ANR	64092	Symbol	safe_symlink		63447						
ANR	64093	Symbol	safe_open		63447						
ANR	64094	Symbol	to_st		63447						
ANR	64095	Symbol	O_RDONLY		63447						
ANR	64096	Symbol	safe_lstat		63447						
ANR	64097	Symbol	size		63447						
ANR	64098	Symbol	& to_st		63447						
ANR	64099	Symbol	true		63447						
ANR	64100	Symbol	to		63447						
ANR	64101	Symbol	fd		63447						
ANR	64102	Function	create_file	552:0:14216:14878							
ANR	64103	FunctionDef	"create_file (char const * file , int open_flags , mode_t mode , bool to_dir_known_to_exist)"		64102	0					
ANR	64104	CompoundStatement		555:0:14314:14878	64102	0					
ANR	64105	IdentifierDeclStatement	int try_makedirs_errno = to_dir_known_to_exist ? 0 : ENOENT ;	556:2:14318:14377	64102	0	True				
ANR	64106	IdentifierDecl	try_makedirs_errno = to_dir_known_to_exist ? 0 : ENOENT		64102	0					
ANR	64107	IdentifierDeclType	int		64102	0					
ANR	64108	Identifier	try_makedirs_errno		64102	1					
ANR	64109	AssignmentExpression	try_makedirs_errno = to_dir_known_to_exist ? 0 : ENOENT		64102	2		=			
ANR	64110	Identifier	try_makedirs_errno		64102	0					
ANR	64111	ConditionalExpression	to_dir_known_to_exist ? 0 : ENOENT		64102	1					
ANR	64112	Condition	to_dir_known_to_exist		64102	0					
ANR	64113	Identifier	to_dir_known_to_exist		64102	0					
ANR	64114	PrimaryExpression	0		64102	1					
ANR	64115	Identifier	ENOENT		64102	2					
ANR	64116	IdentifierDeclStatement	int fd ;	557:2:14381:14387	64102	1	True				
ANR	64117	IdentifierDecl	fd		64102	0					
ANR	64118	IdentifierDeclType	int		64102	0					
ANR	64119	Identifier	fd		64102	1					
ANR	64120	ExpressionStatement	mode |= S_IRUSR | S_IWUSR	558:2:14391:14416	64102	2	True				
ANR	64121	AssignmentExpression	mode |= S_IRUSR | S_IWUSR		64102	0		|=			
ANR	64122	Identifier	mode		64102	0					
ANR	64123	InclusiveOrExpression	S_IRUSR | S_IWUSR		64102	1		|			
ANR	64124	Identifier	S_IRUSR		64102	0					
ANR	64125	Identifier	S_IWUSR		64102	1					
ANR	64126	ExpressionStatement	mode &= ~ ( S_IXUSR | S_IXGRP | S_IXOTH )	559:2:14420:14459	64102	3	True				
ANR	64127	AssignmentExpression	mode &= ~ ( S_IXUSR | S_IXGRP | S_IXOTH )		64102	0		&=			
ANR	64128	Identifier	mode		64102	0					
ANR	64129	UnaryOperationExpression	~ ( S_IXUSR | S_IXGRP | S_IXOTH )		64102	1					
ANR	64130	UnaryOperator	~		64102	0					
ANR	64131	InclusiveOrExpression	S_IXUSR | S_IXGRP | S_IXOTH		64102	1		|			
ANR	64132	Identifier	S_IXUSR		64102	0					
ANR	64133	InclusiveOrExpression	S_IXGRP | S_IXOTH		64102	1		|			
ANR	64134	Identifier	S_IXGRP		64102	0					
ANR	64135	Identifier	S_IXOTH		64102	1					
ANR	64136	DoStatement	do		64102	4					
ANR	64137	CompoundStatement		7:4:155:155	64102	0					
ANR	64138	IfStatement	if ( ! ( O_CREAT && O_TRUNC ) )		64102	0					
ANR	64139	Condition	! ( O_CREAT && O_TRUNC )	562:10:14482:14503	64102	0	True				
ANR	64140	UnaryOperationExpression	! ( O_CREAT && O_TRUNC )		64102	0					
ANR	64141	UnaryOperator	!		64102	0					
ANR	64142	AndExpression	O_CREAT && O_TRUNC		64102	1		&&			
ANR	64143	Identifier	O_CREAT		64102	0					
ANR	64144	Identifier	O_TRUNC		64102	1					
ANR	64145	ExpressionStatement	"close ( safe_open ( file , O_CREAT | O_WRONLY | O_TRUNC , mode ) )"	563:1:14507:14567	64102	1	True				
ANR	64146	CallExpression	"close ( safe_open ( file , O_CREAT | O_WRONLY | O_TRUNC , mode ) )"		64102	0					
ANR	64147	Callee	close		64102	0					
ANR	64148	Identifier	close		64102	0					
ANR	64149	ArgumentList	"safe_open ( file , O_CREAT | O_WRONLY | O_TRUNC , mode )"		64102	1					
ANR	64150	Argument	"safe_open ( file , O_CREAT | O_WRONLY | O_TRUNC , mode )"		64102	0					
ANR	64151	CallExpression	"safe_open ( file , O_CREAT | O_WRONLY | O_TRUNC , mode )"		64102	0					
ANR	64152	Callee	safe_open		64102	0					
ANR	64153	Identifier	safe_open		64102	0					
ANR	64154	ArgumentList	file		64102	1					
ANR	64155	Argument	file		64102	0					
ANR	64156	Identifier	file		64102	0					
ANR	64157	Argument	O_CREAT | O_WRONLY | O_TRUNC		64102	1					
ANR	64158	InclusiveOrExpression	O_CREAT | O_WRONLY | O_TRUNC		64102	0		|			
ANR	64159	Identifier	O_CREAT		64102	0					
ANR	64160	InclusiveOrExpression	O_WRONLY | O_TRUNC		64102	1		|			
ANR	64161	Identifier	O_WRONLY		64102	0					
ANR	64162	Identifier	O_TRUNC		64102	1					
ANR	64163	Argument	mode		64102	2					
ANR	64164	Identifier	mode		64102	0					
ANR	64165	ExpressionStatement	"fd = safe_open ( file , O_CREAT | O_TRUNC | open_flags , mode )"	564:6:14575:14634	64102	1	True				
ANR	64166	AssignmentExpression	"fd = safe_open ( file , O_CREAT | O_TRUNC | open_flags , mode )"		64102	0		=			
ANR	64167	Identifier	fd		64102	0					
ANR	64168	CallExpression	"safe_open ( file , O_CREAT | O_TRUNC | open_flags , mode )"		64102	1					
ANR	64169	Callee	safe_open		64102	0					
ANR	64170	Identifier	safe_open		64102	0					
ANR	64171	ArgumentList	file		64102	1					
ANR	64172	Argument	file		64102	0					
ANR	64173	Identifier	file		64102	0					
ANR	64174	Argument	O_CREAT | O_TRUNC | open_flags		64102	1					
ANR	64175	InclusiveOrExpression	O_CREAT | O_TRUNC | open_flags		64102	0		|			
ANR	64176	Identifier	O_CREAT		64102	0					
ANR	64177	InclusiveOrExpression	O_TRUNC | open_flags		64102	1		|			
ANR	64178	Identifier	O_TRUNC		64102	0					
ANR	64179	Identifier	open_flags		64102	1					
ANR	64180	Argument	mode		64102	2					
ANR	64181	Identifier	mode		64102	0					
ANR	64182	IfStatement	if ( fd < 0 )		64102	2					
ANR	64183	Condition	fd < 0	565:10:14646:14651	64102	0	True				
ANR	64184	RelationalExpression	fd < 0		64102	0		<			
ANR	64185	Identifier	fd		64102	0					
ANR	64186	PrimaryExpression	0		64102	1					
ANR	64187	CompoundStatement		13:3:345:352	64102	1					
ANR	64188	IdentifierDeclStatement	char * f ;	567:3:14660:14667	64102	0	True				
ANR	64189	IdentifierDecl	* f		64102	0					
ANR	64190	IdentifierDeclType	char *		64102	0					
ANR	64191	Identifier	f		64102	1					
ANR	64192	IfStatement	if ( errno != try_makedirs_errno )		64102	1					
ANR	64193	Condition	errno != try_makedirs_errno	568:7:14676:14702	64102	0	True				
ANR	64194	EqualityExpression	errno != try_makedirs_errno		64102	0		!=			
ANR	64195	Identifier	errno		64102	0					
ANR	64196	Identifier	try_makedirs_errno		64102	1					
ANR	64197	ExpressionStatement	"pfatal ( ""Can't create file %s"" , quotearg ( file ) )"	569:5:14710:14758	64102	1	True				
ANR	64198	CallExpression	"pfatal ( ""Can't create file %s"" , quotearg ( file ) )"		64102	0					
ANR	64199	Callee	pfatal		64102	0					
ANR	64200	Identifier	pfatal		64102	0					
ANR	64201	ArgumentList	"""Can't create file %s"""		64102	1					
ANR	64202	Argument	"""Can't create file %s"""		64102	0					
ANR	64203	PrimaryExpression	"""Can't create file %s"""		64102	0					
ANR	64204	Argument	quotearg ( file )		64102	1					
ANR	64205	CallExpression	quotearg ( file )		64102	0					
ANR	64206	Callee	quotearg		64102	0					
ANR	64207	Identifier	quotearg		64102	0					
ANR	64208	ArgumentList	file		64102	1					
ANR	64209	Argument	file		64102	0					
ANR	64210	Identifier	file		64102	0					
ANR	64211	ExpressionStatement	f = xstrdup ( file )	570:3:14763:14781	64102	2	True				
ANR	64212	AssignmentExpression	f = xstrdup ( file )		64102	0		=			
ANR	64213	Identifier	f		64102	0					
ANR	64214	CallExpression	xstrdup ( file )		64102	1					
ANR	64215	Callee	xstrdup		64102	0					
ANR	64216	Identifier	xstrdup		64102	0					
ANR	64217	ArgumentList	file		64102	1					
ANR	64218	Argument	file		64102	0					
ANR	64219	Identifier	file		64102	0					
ANR	64220	ExpressionStatement	makedirs ( f )	571:3:14786:14798	64102	3	True				
ANR	64221	CallExpression	makedirs ( f )		64102	0					
ANR	64222	Callee	makedirs		64102	0					
ANR	64223	Identifier	makedirs		64102	0					
ANR	64224	ArgumentList	f		64102	1					
ANR	64225	Argument	f		64102	0					
ANR	64226	Identifier	f		64102	0					
ANR	64227	ExpressionStatement	free ( f )	572:3:14803:14811	64102	4	True				
ANR	64228	CallExpression	free ( f )		64102	0					
ANR	64229	Callee	free		64102	0					
ANR	64230	Identifier	free		64102	0					
ANR	64231	ArgumentList	f		64102	1					
ANR	64232	Argument	f		64102	0					
ANR	64233	Identifier	f		64102	0					
ANR	64234	ExpressionStatement	try_makedirs_errno = 0	573:3:14816:14838	64102	5	True				
ANR	64235	AssignmentExpression	try_makedirs_errno = 0		64102	0		=			
ANR	64236	Identifier	try_makedirs_errno		64102	0					
ANR	64237	PrimaryExpression	0		64102	1					
ANR	64238	Condition	fd < 0	575:13:14856:14861	64102	1	True				
ANR	64239	RelationalExpression	fd < 0		64102	0		<			
ANR	64240	Identifier	fd		64102	0					
ANR	64241	PrimaryExpression	0		64102	1					
ANR	64242	ReturnStatement	return fd ;	576:2:14867:14876	64102	5	True				
ANR	64243	Identifier	fd		64102	0					
ANR	64244	ReturnType	int		64102	1					
ANR	64245	Identifier	create_file		64102	2					
ANR	64246	ParameterList	"char const * file , int open_flags , mode_t mode , bool to_dir_known_to_exist"		64102	3					
ANR	64247	Parameter	char const * file	553:13:14233:14248	64102	0	True				
ANR	64248	ParameterType	char const *		64102	0					
ANR	64249	Identifier	file		64102	1					
ANR	64250	Parameter	int open_flags	553:31:14251:14264	64102	1	True				
ANR	64251	ParameterType	int		64102	0					
ANR	64252	Identifier	open_flags		64102	1					
ANR	64253	Parameter	mode_t mode	553:47:14267:14277	64102	2	True				
ANR	64254	ParameterType	mode_t		64102	0					
ANR	64255	Identifier	mode		64102	1					
ANR	64256	Parameter	bool to_dir_known_to_exist	554:6:14286:14311	64102	3	True				
ANR	64257	ParameterType	bool		64102	0					
ANR	64258	Identifier	to_dir_known_to_exist		64102	1					
ANR	64259	CFGEntryNode	ENTRY		64102		True				
ANR	64260	CFGExitNode	EXIT		64102		True				
ANR	64261	Symbol	errno		64102						
ANR	64262	Symbol	quotearg		64102						
ANR	64263	Symbol	S_IXGRP		64102						
ANR	64264	Symbol	O_CREAT		64102						
ANR	64265	Symbol	f		64102						
ANR	64266	Symbol	S_IXOTH		64102						
ANR	64267	Symbol	xstrdup		64102						
ANR	64268	Symbol	open_flags		64102						
ANR	64269	Symbol	ENOENT		64102						
ANR	64270	Symbol	to_dir_known_to_exist		64102						
ANR	64271	Symbol	safe_open		64102						
ANR	64272	Symbol	mode		64102						
ANR	64273	Symbol	O_TRUNC		64102						
ANR	64274	Symbol	file		64102						
ANR	64275	Symbol	S_IRUSR		64102						
ANR	64276	Symbol	S_IWUSR		64102						
ANR	64277	Symbol	S_IXUSR		64102						
ANR	64278	Symbol	O_WRONLY		64102						
ANR	64279	Symbol	try_makedirs_errno		64102						
ANR	64280	Symbol	fd		64102						
ANR	64281	Function	copy_to_fd	579:0:14881:15291							
ANR	64282	FunctionDef	"copy_to_fd (const char * from , int tofd)"		64281	0					
ANR	64283	CompoundStatement		581:0:14933:15291	64281	0					
ANR	64284	IdentifierDeclStatement	int fromfd ;	582:2:14937:14947	64281	0	True				
ANR	64285	IdentifierDecl	fromfd		64281	0					
ANR	64286	IdentifierDeclType	int		64281	0					
ANR	64287	Identifier	fromfd		64281	1					
ANR	64288	IdentifierDeclStatement	ssize_t i ;	583:2:14951:14960	64281	1	True				
ANR	64289	IdentifierDecl	i		64281	0					
ANR	64290	IdentifierDeclType	ssize_t		64281	0					
ANR	64291	Identifier	i		64281	1					
ANR	64292	IfStatement	"if ( ( fromfd = safe_open ( from , O_RDONLY | O_BINARY , 0 ) ) < 0 )"		64281	2					
ANR	64293	Condition	"( fromfd = safe_open ( from , O_RDONLY | O_BINARY , 0 ) ) < 0"	585:6:14969:15023	64281	0	True				
ANR	64294	RelationalExpression	"( fromfd = safe_open ( from , O_RDONLY | O_BINARY , 0 ) ) < 0"		64281	0		<			
ANR	64295	AssignmentExpression	"fromfd = safe_open ( from , O_RDONLY | O_BINARY , 0 )"		64281	0		=			
ANR	64296	Identifier	fromfd		64281	0					
ANR	64297	CallExpression	"safe_open ( from , O_RDONLY | O_BINARY , 0 )"		64281	1					
ANR	64298	Callee	safe_open		64281	0					
ANR	64299	Identifier	safe_open		64281	0					
ANR	64300	ArgumentList	from		64281	1					
ANR	64301	Argument	from		64281	0					
ANR	64302	Identifier	from		64281	0					
ANR	64303	Argument	O_RDONLY | O_BINARY		64281	1					
ANR	64304	InclusiveOrExpression	O_RDONLY | O_BINARY		64281	0		|			
ANR	64305	Identifier	O_RDONLY		64281	0					
ANR	64306	Identifier	O_BINARY		64281	1					
ANR	64307	Argument	0		64281	2					
ANR	64308	PrimaryExpression	0		64281	0					
ANR	64309	PrimaryExpression	0		64281	1					
ANR	64310	ExpressionStatement	"pfatal ( ""Can't reopen file %s"" , quotearg ( from ) )"	586:4:15030:15078	64281	1	True				
ANR	64311	CallExpression	"pfatal ( ""Can't reopen file %s"" , quotearg ( from ) )"		64281	0					
ANR	64312	Callee	pfatal		64281	0					
ANR	64313	Identifier	pfatal		64281	0					
ANR	64314	ArgumentList	"""Can't reopen file %s"""		64281	1					
ANR	64315	Argument	"""Can't reopen file %s"""		64281	0					
ANR	64316	PrimaryExpression	"""Can't reopen file %s"""		64281	0					
ANR	64317	Argument	quotearg ( from )		64281	1					
ANR	64318	CallExpression	quotearg ( from )		64281	0					
ANR	64319	Callee	quotearg		64281	0					
ANR	64320	Identifier	quotearg		64281	0					
ANR	64321	ArgumentList	from		64281	1					
ANR	64322	Argument	from		64281	0					
ANR	64323	Identifier	from		64281	0					
ANR	64324	WhileStatement	"while ( ( i = read ( fromfd , buf , bufsize ) ) != 0 )"		64281	3					
ANR	64325	Condition	"( i = read ( fromfd , buf , bufsize ) ) != 0"	587:9:15089:15126	64281	0	True				
ANR	64326	EqualityExpression	"( i = read ( fromfd , buf , bufsize ) ) != 0"		64281	0		!=			
ANR	64327	AssignmentExpression	"i = read ( fromfd , buf , bufsize )"		64281	0		=			
ANR	64328	Identifier	i		64281	0					
ANR	64329	CallExpression	"read ( fromfd , buf , bufsize )"		64281	1					
ANR	64330	Callee	read		64281	0					
ANR	64331	Identifier	read		64281	0					
ANR	64332	ArgumentList	fromfd		64281	1					
ANR	64333	Argument	fromfd		64281	0					
ANR	64334	Identifier	fromfd		64281	0					
ANR	64335	Argument	buf		64281	1					
ANR	64336	Identifier	buf		64281	0					
ANR	64337	Argument	bufsize		64281	2					
ANR	64338	Identifier	bufsize		64281	0					
ANR	64339	PrimaryExpression	0		64281	1					
ANR	64340	CompoundStatement		8:4:199:199	64281	1					
ANR	64341	IfStatement	if ( i == ( ssize_t ) - 1 )		64281	0					
ANR	64342	Condition	i == ( ssize_t ) - 1	589:10:15145:15161	64281	0	True				
ANR	64343	EqualityExpression	i == ( ssize_t ) - 1		64281	0		==			
ANR	64344	Identifier	i		64281	0					
ANR	64345	CastExpression	( ssize_t ) - 1		64281	1					
ANR	64346	CastTarget	ssize_t		64281	0					
ANR	64347	UnaryOperationExpression	- 1		64281	1					
ANR	64348	UnaryOperator	-		64281	0					
ANR	64349	PrimaryExpression	1		64281	1					
ANR	64350	ExpressionStatement	read_fatal ( )	590:1:15165:15178	64281	1	True				
ANR	64351	CallExpression	read_fatal ( )		64281	0					
ANR	64352	Callee	read_fatal		64281	0					
ANR	64353	Identifier	read_fatal		64281	0					
ANR	64354	ArgumentList			64281	1					
ANR	64355	IfStatement	"if ( full_write ( tofd , buf , i ) != i )"		64281	1					
ANR	64356	Condition	"full_write ( tofd , buf , i ) != i"	591:10:15190:15219	64281	0	True				
ANR	64357	EqualityExpression	"full_write ( tofd , buf , i ) != i"		64281	0		!=			
ANR	64358	CallExpression	"full_write ( tofd , buf , i )"		64281	0					
ANR	64359	Callee	full_write		64281	0					
ANR	64360	Identifier	full_write		64281	0					
ANR	64361	ArgumentList	tofd		64281	1					
ANR	64362	Argument	tofd		64281	0					
ANR	64363	Identifier	tofd		64281	0					
ANR	64364	Argument	buf		64281	1					
ANR	64365	Identifier	buf		64281	0					
ANR	64366	Argument	i		64281	2					
ANR	64367	Identifier	i		64281	0					
ANR	64368	Identifier	i		64281	1					
ANR	64369	ExpressionStatement	write_fatal ( )	592:1:15223:15237	64281	1	True				
ANR	64370	CallExpression	write_fatal ( )		64281	0					
ANR	64371	Callee	write_fatal		64281	0					
ANR	64372	Identifier	write_fatal		64281	0					
ANR	64373	ArgumentList			64281	1					
ANR	64374	IfStatement	if ( close ( fromfd ) != 0 )		64281	4					
ANR	64375	Condition	close ( fromfd ) != 0	594:6:15251:15269	64281	0	True				
ANR	64376	EqualityExpression	close ( fromfd ) != 0		64281	0		!=			
ANR	64377	CallExpression	close ( fromfd )		64281	0					
ANR	64378	Callee	close		64281	0					
ANR	64379	Identifier	close		64281	0					
ANR	64380	ArgumentList	fromfd		64281	1					
ANR	64381	Argument	fromfd		64281	0					
ANR	64382	Identifier	fromfd		64281	0					
ANR	64383	PrimaryExpression	0		64281	1					
ANR	64384	ExpressionStatement	read_fatal ( )	595:4:15276:15289	64281	1	True				
ANR	64385	CallExpression	read_fatal ( )		64281	0					
ANR	64386	Callee	read_fatal		64281	0					
ANR	64387	Identifier	read_fatal		64281	0					
ANR	64388	ArgumentList			64281	1					
ANR	64389	ReturnType	static void		64281	1					
ANR	64390	Identifier	copy_to_fd		64281	2					
ANR	64391	ParameterList	"const char * from , int tofd"		64281	3					
ANR	64392	Parameter	const char * from	580:12:14905:14920	64281	0	True				
ANR	64393	ParameterType	const char *		64281	0					
ANR	64394	Identifier	from		64281	1					
ANR	64395	Parameter	int tofd	580:30:14923:14930	64281	1	True				
ANR	64396	ParameterType	int		64281	0					
ANR	64397	Identifier	tofd		64281	1					
ANR	64398	CFGEntryNode	ENTRY		64281		True				
ANR	64399	CFGExitNode	EXIT		64281		True				
ANR	64400	Symbol	fromfd		64281						
ANR	64401	Symbol	quotearg		64281						
ANR	64402	Symbol	read		64281						
ANR	64403	Symbol	O_BINARY		64281						
ANR	64404	Symbol	full_write		64281						
ANR	64405	Symbol	bufsize		64281						
ANR	64406	Symbol	i		64281						
ANR	64407	Symbol	tofd		64281						
ANR	64408	Symbol	safe_open		64281						
ANR	64409	Symbol	buf		64281						
ANR	64410	Symbol	O_RDONLY		64281						
ANR	64411	Symbol	from		64281						
ANR	64412	Symbol	close		64281						
ANR	64413	Function	copy_file	600:0:15314:16391							
ANR	64414	FunctionDef	"copy_file (char const * from , char const * to , struct stat * tost , int to_flags , mode_t mode , bool to_dir_known_to_exist)"		64413	0					
ANR	64415	CompoundStatement		603:0:15442:16391	64413	0					
ANR	64416	IdentifierDeclStatement	int tofd ;	604:2:15446:15454	64413	0	True				
ANR	64417	IdentifierDecl	tofd		64413	0					
ANR	64418	IdentifierDeclType	int		64413	0					
ANR	64419	Identifier	tofd		64413	1					
ANR	64420	IfStatement	if ( debug & 4 )		64413	1					
ANR	64421	Condition	debug & 4	606:6:15463:15471	64413	0	True				
ANR	64422	BitAndExpression	debug & 4		64413	0		&			
ANR	64423	Identifier	debug		64413	0					
ANR	64424	PrimaryExpression	4		64413	1					
ANR	64425	ExpressionStatement	"say ( ""Copying %s %s to %s\\n"" , S_ISLNK ( mode ) ? ""symbolic link"" : ""file"" , quotearg_n ( 0 , from ) , quotearg_n ( 1 , to ) )"	607:4:15478:15596	64413	1	True				
ANR	64426	CallExpression	"say ( ""Copying %s %s to %s\\n"" , S_ISLNK ( mode ) ? ""symbolic link"" : ""file"" , quotearg_n ( 0 , from ) , quotearg_n ( 1 , to ) )"		64413	0					
ANR	64427	Callee	say		64413	0					
ANR	64428	Identifier	say		64413	0					
ANR	64429	ArgumentList	"""Copying %s %s to %s\\n"""		64413	1					
ANR	64430	Argument	"""Copying %s %s to %s\\n"""		64413	0					
ANR	64431	PrimaryExpression	"""Copying %s %s to %s\\n"""		64413	0					
ANR	64432	Argument	"S_ISLNK ( mode ) ? ""symbolic link"" : ""file"""		64413	1					
ANR	64433	ConditionalExpression	"S_ISLNK ( mode ) ? ""symbolic link"" : ""file"""		64413	0					
ANR	64434	Condition	S_ISLNK ( mode )		64413	0					
ANR	64435	CallExpression	S_ISLNK ( mode )		64413	0					
ANR	64436	Callee	S_ISLNK		64413	0					
ANR	64437	Identifier	S_ISLNK		64413	0					
ANR	64438	ArgumentList	mode		64413	1					
ANR	64439	Argument	mode		64413	0					
ANR	64440	Identifier	mode		64413	0					
ANR	64441	PrimaryExpression	"""symbolic link"""		64413	1					
ANR	64442	PrimaryExpression	"""file"""		64413	2					
ANR	64443	Argument	"quotearg_n ( 0 , from )"		64413	2					
ANR	64444	CallExpression	"quotearg_n ( 0 , from )"		64413	0					
ANR	64445	Callee	quotearg_n		64413	0					
ANR	64446	Identifier	quotearg_n		64413	0					
ANR	64447	ArgumentList	0		64413	1					
ANR	64448	Argument	0		64413	0					
ANR	64449	PrimaryExpression	0		64413	0					
ANR	64450	Argument	from		64413	1					
ANR	64451	Identifier	from		64413	0					
ANR	64452	Argument	"quotearg_n ( 1 , to )"		64413	3					
ANR	64453	CallExpression	"quotearg_n ( 1 , to )"		64413	0					
ANR	64454	Callee	quotearg_n		64413	0					
ANR	64455	Identifier	quotearg_n		64413	0					
ANR	64456	ArgumentList	1		64413	1					
ANR	64457	Argument	1		64413	0					
ANR	64458	PrimaryExpression	1		64413	0					
ANR	64459	Argument	to		64413	1					
ANR	64460	Identifier	to		64413	0					
ANR	64461	IfStatement	if ( S_ISLNK ( mode ) )		64413	2					
ANR	64462	Condition	S_ISLNK ( mode )	611:6:15605:15618	64413	0	True				
ANR	64463	CallExpression	S_ISLNK ( mode )		64413	0					
ANR	64464	Callee	S_ISLNK		64413	0					
ANR	64465	Identifier	S_ISLNK		64413	0					
ANR	64466	ArgumentList	mode		64413	1					
ANR	64467	Argument	mode		64413	0					
ANR	64468	Identifier	mode		64413	0					
ANR	64469	CompoundStatement		12:6:235:244	64413	1					
ANR	64470	IdentifierDeclStatement	char * buffer = xmalloc ( PATH_MAX + 1 ) ;	613:6:15633:15670	64413	0	True				
ANR	64471	IdentifierDecl	* buffer = xmalloc ( PATH_MAX + 1 )		64413	0					
ANR	64472	IdentifierDeclType	char *		64413	0					
ANR	64473	Identifier	buffer		64413	1					
ANR	64474	AssignmentExpression	* buffer = xmalloc ( PATH_MAX + 1 )		64413	2		=			
ANR	64475	Identifier	buffer		64413	0					
ANR	64476	CallExpression	xmalloc ( PATH_MAX + 1 )		64413	1					
ANR	64477	Callee	xmalloc		64413	0					
ANR	64478	Identifier	xmalloc		64413	0					
ANR	64479	ArgumentList	PATH_MAX + 1		64413	1					
ANR	64480	Argument	PATH_MAX + 1		64413	0					
ANR	64481	AdditiveExpression	PATH_MAX + 1		64413	0		+			
ANR	64482	Identifier	PATH_MAX		64413	0					
ANR	64483	PrimaryExpression	1		64413	1					
ANR	64484	IdentifierDeclStatement	ssize_t r ;	614:6:15678:15687	64413	1	True				
ANR	64485	IdentifierDecl	r		64413	0					
ANR	64486	IdentifierDeclType	ssize_t		64413	0					
ANR	64487	Identifier	r		64413	1					
ANR	64488	IfStatement	"if ( ( r = safe_readlink ( from , buffer , PATH_MAX ) ) < 0 )"		64413	2					
ANR	64489	Condition	"( r = safe_readlink ( from , buffer , PATH_MAX ) ) < 0"	616:10:15700:15747	64413	0	True				
ANR	64490	RelationalExpression	"( r = safe_readlink ( from , buffer , PATH_MAX ) ) < 0"		64413	0		<			
ANR	64491	AssignmentExpression	"r = safe_readlink ( from , buffer , PATH_MAX )"		64413	0		=			
ANR	64492	Identifier	r		64413	0					
ANR	64493	CallExpression	"safe_readlink ( from , buffer , PATH_MAX )"		64413	1					
ANR	64494	Callee	safe_readlink		64413	0					
ANR	64495	Identifier	safe_readlink		64413	0					
ANR	64496	ArgumentList	from		64413	1					
ANR	64497	Argument	from		64413	0					
ANR	64498	Identifier	from		64413	0					
ANR	64499	Argument	buffer		64413	1					
ANR	64500	Identifier	buffer		64413	0					
ANR	64501	Argument	PATH_MAX		64413	2					
ANR	64502	Identifier	PATH_MAX		64413	0					
ANR	64503	PrimaryExpression	0		64413	1					
ANR	64504	ExpressionStatement	"pfatal ( ""Can't read %s %s"" , ""symbolic link"" , from )"	617:1:15751:15801	64413	1	True				
ANR	64505	CallExpression	"pfatal ( ""Can't read %s %s"" , ""symbolic link"" , from )"		64413	0					
ANR	64506	Callee	pfatal		64413	0					
ANR	64507	Identifier	pfatal		64413	0					
ANR	64508	ArgumentList	"""Can't read %s %s"""		64413	1					
ANR	64509	Argument	"""Can't read %s %s"""		64413	0					
ANR	64510	PrimaryExpression	"""Can't read %s %s"""		64413	0					
ANR	64511	Argument	"""symbolic link"""		64413	1					
ANR	64512	PrimaryExpression	"""symbolic link"""		64413	0					
ANR	64513	Argument	from		64413	2					
ANR	64514	Identifier	from		64413	0					
ANR	64515	ExpressionStatement	buffer [ r ] = '\\0'	618:6:15809:15825	64413	3	True				
ANR	64516	AssignmentExpression	buffer [ r ] = '\\0'		64413	0		=			
ANR	64517	ArrayIndexing	buffer [ r ]		64413	0					
ANR	64518	Identifier	buffer		64413	0					
ANR	64519	Identifier	r		64413	1					
ANR	64520	PrimaryExpression	'\\0'		64413	1					
ANR	64521	IfStatement	"if ( safe_symlink ( buffer , to ) != 0 )"		64413	4					
ANR	64522	Condition	"safe_symlink ( buffer , to ) != 0"	619:10:15837:15866	64413	0	True				
ANR	64523	EqualityExpression	"safe_symlink ( buffer , to ) != 0"		64413	0		!=			
ANR	64524	CallExpression	"safe_symlink ( buffer , to )"		64413	0					
ANR	64525	Callee	safe_symlink		64413	0					
ANR	64526	Identifier	safe_symlink		64413	0					
ANR	64527	ArgumentList	buffer		64413	1					
ANR	64528	Argument	buffer		64413	0					
ANR	64529	Identifier	buffer		64413	0					
ANR	64530	Argument	to		64413	1					
ANR	64531	Identifier	to		64413	0					
ANR	64532	PrimaryExpression	0		64413	1					
ANR	64533	ExpressionStatement	"pfatal ( ""Can't create %s %s"" , ""symbolic link"" , to )"	620:1:15870:15920	64413	1	True				
ANR	64534	CallExpression	"pfatal ( ""Can't create %s %s"" , ""symbolic link"" , to )"		64413	0					
ANR	64535	Callee	pfatal		64413	0					
ANR	64536	Identifier	pfatal		64413	0					
ANR	64537	ArgumentList	"""Can't create %s %s"""		64413	1					
ANR	64538	Argument	"""Can't create %s %s"""		64413	0					
ANR	64539	PrimaryExpression	"""Can't create %s %s"""		64413	0					
ANR	64540	Argument	"""symbolic link"""		64413	1					
ANR	64541	PrimaryExpression	"""symbolic link"""		64413	0					
ANR	64542	Argument	to		64413	2					
ANR	64543	Identifier	to		64413	0					
ANR	64544	IfStatement	"if ( tost && safe_lstat ( to , tost ) != 0 )"		64413	5					
ANR	64545	Condition	"tost && safe_lstat ( to , tost ) != 0"	621:10:15932:15965	64413	0	True				
ANR	64546	AndExpression	"tost && safe_lstat ( to , tost ) != 0"		64413	0		&&			
ANR	64547	Identifier	tost		64413	0					
ANR	64548	EqualityExpression	"safe_lstat ( to , tost ) != 0"		64413	1		!=			
ANR	64549	CallExpression	"safe_lstat ( to , tost )"		64413	0					
ANR	64550	Callee	safe_lstat		64413	0					
ANR	64551	Identifier	safe_lstat		64413	0					
ANR	64552	ArgumentList	to		64413	1					
ANR	64553	Argument	to		64413	0					
ANR	64554	Identifier	to		64413	0					
ANR	64555	Argument	tost		64413	1					
ANR	64556	Identifier	tost		64413	0					
ANR	64557	PrimaryExpression	0		64413	1					
ANR	64558	ExpressionStatement	"pfatal ( ""Can't get file attributes of %s %s"" , ""symbolic link"" , to )"	622:1:15969:16035	64413	1	True				
ANR	64559	CallExpression	"pfatal ( ""Can't get file attributes of %s %s"" , ""symbolic link"" , to )"		64413	0					
ANR	64560	Callee	pfatal		64413	0					
ANR	64561	Identifier	pfatal		64413	0					
ANR	64562	ArgumentList	"""Can't get file attributes of %s %s"""		64413	1					
ANR	64563	Argument	"""Can't get file attributes of %s %s"""		64413	0					
ANR	64564	PrimaryExpression	"""Can't get file attributes of %s %s"""		64413	0					
ANR	64565	Argument	"""symbolic link"""		64413	1					
ANR	64566	PrimaryExpression	"""symbolic link"""		64413	0					
ANR	64567	Argument	to		64413	2					
ANR	64568	Identifier	to		64413	0					
ANR	64569	ExpressionStatement	free ( buffer )	623:6:16043:16056	64413	6	True				
ANR	64570	CallExpression	free ( buffer )		64413	0					
ANR	64571	Callee	free		64413	0					
ANR	64572	Identifier	free		64413	0					
ANR	64573	ArgumentList	buffer		64413	1					
ANR	64574	Argument	buffer		64413	0					
ANR	64575	Identifier	buffer		64413	0					
ANR	64576	ElseStatement	else		64413	0					
ANR	64577	CompoundStatement		24:4:632:632	64413	0					
ANR	64578	ExpressionStatement	assert ( S_ISREG ( mode ) )	627:6:16083:16106	64413	0	True				
ANR	64579	CallExpression	assert ( S_ISREG ( mode ) )		64413	0					
ANR	64580	Callee	assert		64413	0					
ANR	64581	Identifier	assert		64413	0					
ANR	64582	ArgumentList	S_ISREG ( mode )		64413	1					
ANR	64583	Argument	S_ISREG ( mode )		64413	0					
ANR	64584	CallExpression	S_ISREG ( mode )		64413	0					
ANR	64585	Callee	S_ISREG		64413	0					
ANR	64586	Identifier	S_ISREG		64413	0					
ANR	64587	ArgumentList	mode		64413	1					
ANR	64588	Argument	mode		64413	0					
ANR	64589	Identifier	mode		64413	0					
ANR	64590	ExpressionStatement	"tofd = create_file ( to , O_WRONLY | O_BINARY | to_flags , mode , to_dir_known_to_exist )"	628:6:16114:16203	64413	1	True				
ANR	64591	AssignmentExpression	"tofd = create_file ( to , O_WRONLY | O_BINARY | to_flags , mode , to_dir_known_to_exist )"		64413	0		=			
ANR	64592	Identifier	tofd		64413	0					
ANR	64593	CallExpression	"create_file ( to , O_WRONLY | O_BINARY | to_flags , mode , to_dir_known_to_exist )"		64413	1					
ANR	64594	Callee	create_file		64413	0					
ANR	64595	Identifier	create_file		64413	0					
ANR	64596	ArgumentList	to		64413	1					
ANR	64597	Argument	to		64413	0					
ANR	64598	Identifier	to		64413	0					
ANR	64599	Argument	O_WRONLY | O_BINARY | to_flags		64413	1					
ANR	64600	InclusiveOrExpression	O_WRONLY | O_BINARY | to_flags		64413	0		|			
ANR	64601	Identifier	O_WRONLY		64413	0					
ANR	64602	InclusiveOrExpression	O_BINARY | to_flags		64413	1		|			
ANR	64603	Identifier	O_BINARY		64413	0					
ANR	64604	Identifier	to_flags		64413	1					
ANR	64605	Argument	mode		64413	2					
ANR	64606	Identifier	mode		64413	0					
ANR	64607	Argument	to_dir_known_to_exist		64413	3					
ANR	64608	Identifier	to_dir_known_to_exist		64413	0					
ANR	64609	ExpressionStatement	"copy_to_fd ( from , tofd )"	630:6:16211:16234	64413	2	True				
ANR	64610	CallExpression	"copy_to_fd ( from , tofd )"		64413	0					
ANR	64611	Callee	copy_to_fd		64413	0					
ANR	64612	Identifier	copy_to_fd		64413	0					
ANR	64613	ArgumentList	from		64413	1					
ANR	64614	Argument	from		64413	0					
ANR	64615	Identifier	from		64413	0					
ANR	64616	Argument	tofd		64413	1					
ANR	64617	Identifier	tofd		64413	0					
ANR	64618	IfStatement	"if ( tost && fstat ( tofd , tost ) != 0 )"		64413	3					
ANR	64619	Condition	"tost && fstat ( tofd , tost ) != 0"	631:10:16246:16276	64413	0	True				
ANR	64620	AndExpression	"tost && fstat ( tofd , tost ) != 0"		64413	0		&&			
ANR	64621	Identifier	tost		64413	0					
ANR	64622	EqualityExpression	"fstat ( tofd , tost ) != 0"		64413	1		!=			
ANR	64623	CallExpression	"fstat ( tofd , tost )"		64413	0					
ANR	64624	Callee	fstat		64413	0					
ANR	64625	Identifier	fstat		64413	0					
ANR	64626	ArgumentList	tofd		64413	1					
ANR	64627	Argument	tofd		64413	0					
ANR	64628	Identifier	tofd		64413	0					
ANR	64629	Argument	tost		64413	1					
ANR	64630	Identifier	tost		64413	0					
ANR	64631	PrimaryExpression	0		64413	1					
ANR	64632	ExpressionStatement	"pfatal ( ""Can't get file attributes of %s %s"" , ""file"" , to )"	632:1:16280:16337	64413	1	True				
ANR	64633	CallExpression	"pfatal ( ""Can't get file attributes of %s %s"" , ""file"" , to )"		64413	0					
ANR	64634	Callee	pfatal		64413	0					
ANR	64635	Identifier	pfatal		64413	0					
ANR	64636	ArgumentList	"""Can't get file attributes of %s %s"""		64413	1					
ANR	64637	Argument	"""Can't get file attributes of %s %s"""		64413	0					
ANR	64638	PrimaryExpression	"""Can't get file attributes of %s %s"""		64413	0					
ANR	64639	Argument	"""file"""		64413	1					
ANR	64640	PrimaryExpression	"""file"""		64413	0					
ANR	64641	Argument	to		64413	2					
ANR	64642	Identifier	to		64413	0					
ANR	64643	IfStatement	if ( close ( tofd ) != 0 )		64413	4					
ANR	64644	Condition	close ( tofd ) != 0	633:10:16349:16365	64413	0	True				
ANR	64645	EqualityExpression	close ( tofd ) != 0		64413	0		!=			
ANR	64646	CallExpression	close ( tofd )		64413	0					
ANR	64647	Callee	close		64413	0					
ANR	64648	Identifier	close		64413	0					
ANR	64649	ArgumentList	tofd		64413	1					
ANR	64650	Argument	tofd		64413	0					
ANR	64651	Identifier	tofd		64413	0					
ANR	64652	PrimaryExpression	0		64413	1					
ANR	64653	ExpressionStatement	write_fatal ( )	634:1:16369:16383	64413	1	True				
ANR	64654	CallExpression	write_fatal ( )		64413	0					
ANR	64655	Callee	write_fatal		64413	0					
ANR	64656	Identifier	write_fatal		64413	0					
ANR	64657	ArgumentList			64413	1					
ANR	64658	ReturnType	void		64413	1					
ANR	64659	Identifier	copy_file		64413	2					
ANR	64660	ParameterList	"char const * from , char const * to , struct stat * tost , int to_flags , mode_t mode , bool to_dir_known_to_exist"		64413	3					
ANR	64661	Parameter	char const * from	601:11:15330:15345	64413	0	True				
ANR	64662	ParameterType	char const *		64413	0					
ANR	64663	Identifier	from		64413	1					
ANR	64664	Parameter	char const * to	601:29:15348:15361	64413	1	True				
ANR	64665	ParameterType	char const *		64413	0					
ANR	64666	Identifier	to		64413	1					
ANR	64667	Parameter	struct stat * tost	601:45:15364:15380	64413	2	True				
ANR	64668	ParameterType	struct stat *		64413	0					
ANR	64669	Identifier	tost		64413	1					
ANR	64670	Parameter	int to_flags	602:4:15387:15398	64413	3	True				
ANR	64671	ParameterType	int		64413	0					
ANR	64672	Identifier	to_flags		64413	1					
ANR	64673	Parameter	mode_t mode	602:18:15401:15411	64413	4	True				
ANR	64674	ParameterType	mode_t		64413	0					
ANR	64675	Identifier	mode		64413	1					
ANR	64676	Parameter	bool to_dir_known_to_exist	602:31:15414:15439	64413	5	True				
ANR	64677	ParameterType	bool		64413	0					
ANR	64678	Identifier	to_dir_known_to_exist		64413	1					
ANR	64679	CFGEntryNode	ENTRY		64413		True				
ANR	64680	CFGExitNode	EXIT		64413		True				
ANR	64681	Symbol	O_BINARY		64413						
ANR	64682	Symbol	quotearg_n		64413						
ANR	64683	Symbol	to_flags		64413						
ANR	64684	Symbol	tofd		64413						
ANR	64685	Symbol	mode		64413						
ANR	64686	Symbol	create_file		64413						
ANR	64687	Symbol	xmalloc		64413						
ANR	64688	Symbol	from		64413						
ANR	64689	Symbol	buffer		64413						
ANR	64690	Symbol	close		64413						
ANR	64691	Symbol	S_ISLNK		64413						
ANR	64692	Symbol	* buffer		64413						
ANR	64693	Symbol	debug		64413						
ANR	64694	Symbol	PATH_MAX		64413						
ANR	64695	Symbol	fstat		64413						
ANR	64696	Symbol	tost		64413						
ANR	64697	Symbol	to_dir_known_to_exist		64413						
ANR	64698	Symbol	safe_symlink		64413						
ANR	64699	Symbol	r		64413						
ANR	64700	Symbol	safe_lstat		64413						
ANR	64701	Symbol	S_ISREG		64413						
ANR	64702	Symbol	to		64413						
ANR	64703	Symbol	safe_readlink		64413						
ANR	64704	Symbol	* r		64413						
ANR	64705	Symbol	O_WRONLY		64413						
ANR	64706	Function	append_to_file	640:0:16417:16681							
ANR	64707	FunctionDef	"append_to_file (char const * from , char const * to)"		64706	0					
ANR	64708	CompoundStatement		642:0:16472:16681	64706	0					
ANR	64709	IdentifierDeclStatement	int tofd ;	643:2:16476:16484	64706	0	True				
ANR	64710	IdentifierDecl	tofd		64706	0					
ANR	64711	IdentifierDeclType	int		64706	0					
ANR	64712	Identifier	tofd		64706	1					
ANR	64713	IfStatement	"if ( ( tofd = safe_open ( to , O_WRONLY | O_BINARY | O_APPEND , 0 ) ) < 0 )"		64706	1					
ANR	64714	Condition	"( tofd = safe_open ( to , O_WRONLY | O_BINARY | O_APPEND , 0 ) ) < 0"	645:6:16493:16554	64706	0	True				
ANR	64715	RelationalExpression	"( tofd = safe_open ( to , O_WRONLY | O_BINARY | O_APPEND , 0 ) ) < 0"		64706	0		<			
ANR	64716	AssignmentExpression	"tofd = safe_open ( to , O_WRONLY | O_BINARY | O_APPEND , 0 )"		64706	0		=			
ANR	64717	Identifier	tofd		64706	0					
ANR	64718	CallExpression	"safe_open ( to , O_WRONLY | O_BINARY | O_APPEND , 0 )"		64706	1					
ANR	64719	Callee	safe_open		64706	0					
ANR	64720	Identifier	safe_open		64706	0					
ANR	64721	ArgumentList	to		64706	1					
ANR	64722	Argument	to		64706	0					
ANR	64723	Identifier	to		64706	0					
ANR	64724	Argument	O_WRONLY | O_BINARY | O_APPEND		64706	1					
ANR	64725	InclusiveOrExpression	O_WRONLY | O_BINARY | O_APPEND		64706	0		|			
ANR	64726	Identifier	O_WRONLY		64706	0					
ANR	64727	InclusiveOrExpression	O_BINARY | O_APPEND		64706	1		|			
ANR	64728	Identifier	O_BINARY		64706	0					
ANR	64729	Identifier	O_APPEND		64706	1					
ANR	64730	Argument	0		64706	2					
ANR	64731	PrimaryExpression	0		64706	0					
ANR	64732	PrimaryExpression	0		64706	1					
ANR	64733	ExpressionStatement	"pfatal ( ""Can't reopen file %s"" , quotearg ( to ) )"	646:4:16561:16607	64706	1	True				
ANR	64734	CallExpression	"pfatal ( ""Can't reopen file %s"" , quotearg ( to ) )"		64706	0					
ANR	64735	Callee	pfatal		64706	0					
ANR	64736	Identifier	pfatal		64706	0					
ANR	64737	ArgumentList	"""Can't reopen file %s"""		64706	1					
ANR	64738	Argument	"""Can't reopen file %s"""		64706	0					
ANR	64739	PrimaryExpression	"""Can't reopen file %s"""		64706	0					
ANR	64740	Argument	quotearg ( to )		64706	1					
ANR	64741	CallExpression	quotearg ( to )		64706	0					
ANR	64742	Callee	quotearg		64706	0					
ANR	64743	Identifier	quotearg		64706	0					
ANR	64744	ArgumentList	to		64706	1					
ANR	64745	Argument	to		64706	0					
ANR	64746	Identifier	to		64706	0					
ANR	64747	ExpressionStatement	"copy_to_fd ( from , tofd )"	647:2:16611:16634	64706	2	True				
ANR	64748	CallExpression	"copy_to_fd ( from , tofd )"		64706	0					
ANR	64749	Callee	copy_to_fd		64706	0					
ANR	64750	Identifier	copy_to_fd		64706	0					
ANR	64751	ArgumentList	from		64706	1					
ANR	64752	Argument	from		64706	0					
ANR	64753	Identifier	from		64706	0					
ANR	64754	Argument	tofd		64706	1					
ANR	64755	Identifier	tofd		64706	0					
ANR	64756	IfStatement	if ( close ( tofd ) != 0 )		64706	3					
ANR	64757	Condition	close ( tofd ) != 0	648:6:16642:16658	64706	0	True				
ANR	64758	EqualityExpression	close ( tofd ) != 0		64706	0		!=			
ANR	64759	CallExpression	close ( tofd )		64706	0					
ANR	64760	Callee	close		64706	0					
ANR	64761	Identifier	close		64706	0					
ANR	64762	ArgumentList	tofd		64706	1					
ANR	64763	Argument	tofd		64706	0					
ANR	64764	Identifier	tofd		64706	0					
ANR	64765	PrimaryExpression	0		64706	1					
ANR	64766	ExpressionStatement	write_fatal ( )	649:4:16665:16679	64706	1	True				
ANR	64767	CallExpression	write_fatal ( )		64706	0					
ANR	64768	Callee	write_fatal		64706	0					
ANR	64769	Identifier	write_fatal		64706	0					
ANR	64770	ArgumentList			64706	1					
ANR	64771	ReturnType	void		64706	1					
ANR	64772	Identifier	append_to_file		64706	2					
ANR	64773	ParameterList	"char const * from , char const * to"		64706	3					
ANR	64774	Parameter	char const * from	641:16:16438:16453	64706	0	True				
ANR	64775	ParameterType	char const *		64706	0					
ANR	64776	Identifier	from		64706	1					
ANR	64777	Parameter	char const * to	641:34:16456:16469	64706	1	True				
ANR	64778	ParameterType	char const *		64706	0					
ANR	64779	Identifier	to		64706	1					
ANR	64780	CFGEntryNode	ENTRY		64706		True				
ANR	64781	CFGExitNode	EXIT		64706		True				
ANR	64782	Symbol	quotearg		64706						
ANR	64783	Symbol	O_BINARY		64706						
ANR	64784	Symbol	from		64706						
ANR	64785	Symbol	to		64706						
ANR	64786	Symbol	O_WRONLY		64706						
ANR	64787	Symbol	close		64706						
ANR	64788	Symbol	O_APPEND		64706						
ANR	64789	Symbol	tofd		64706						
ANR	64790	Symbol	safe_open		64706						
ANR	64791	DeclStmt									
ANR	64792	Decl							char const	char const [ ]	DEV_NULL
ANR	64793	DeclStmt									
ANR	64794	Decl							char const	char const [ ]	RCSSUFFIX
ANR	64795	DeclStmt									
ANR	64796	Decl							char const	char const [ ]	CHECKOUT
ANR	64797	DeclStmt									
ANR	64798	Decl							char const	char const [ ]	CHECKOUT_LOCKED
ANR	64799	DeclStmt									
ANR	64800	Decl							char const	char const [ ]	RCSDIFF1
ANR	64801	DeclStmt									
ANR	64802	Decl							char const	char const [ ]	SCCSPREFIX
ANR	64803	DeclStmt									
ANR	64804	Decl							char const	char const [ ]	GET
ANR	64805	DeclStmt									
ANR	64806	Decl							char const	char const [ ]	GET_LOCKED
ANR	64807	DeclStmt									
ANR	64808	Decl							char const	char const [ ]	SCCSDIFF1
ANR	64809	DeclStmt									
ANR	64810	Decl							char const	char const [ ]	SCCSDIFF2
ANR	64811	DeclStmt									
ANR	64812	Decl							char const	char const [ ]	CLEARTOOL_CO
ANR	64813	DeclStmt									
ANR	64814	Decl							char const	char const [ ]	PERFORCE_CO
ANR	64815	Function	quote_system_arg	669:0:17219:17428							
ANR	64816	FunctionDef	"quote_system_arg (char * quoted , char const * arg)"		64815	0					
ANR	64817	CompoundStatement		671:0:17282:17428	64815	0					
ANR	64818	IdentifierDeclStatement	"char * q = quotearg_style ( shell_quoting_style , arg ) ;"	672:2:17286:17337	64815	0	True				
ANR	64819	IdentifierDecl	"* q = quotearg_style ( shell_quoting_style , arg )"		64815	0					
ANR	64820	IdentifierDeclType	char *		64815	0					
ANR	64821	Identifier	q		64815	1					
ANR	64822	AssignmentExpression	"* q = quotearg_style ( shell_quoting_style , arg )"		64815	2		=			
ANR	64823	Identifier	q		64815	0					
ANR	64824	CallExpression	"quotearg_style ( shell_quoting_style , arg )"		64815	1					
ANR	64825	Callee	quotearg_style		64815	0					
ANR	64826	Identifier	quotearg_style		64815	0					
ANR	64827	ArgumentList	shell_quoting_style		64815	1					
ANR	64828	Argument	shell_quoting_style		64815	0					
ANR	64829	Identifier	shell_quoting_style		64815	0					
ANR	64830	Argument	arg		64815	1					
ANR	64831	Identifier	arg		64815	0					
ANR	64832	IdentifierDeclStatement	size_t len = strlen ( q ) ;	673:2:17341:17364	64815	1	True				
ANR	64833	IdentifierDecl	len = strlen ( q )		64815	0					
ANR	64834	IdentifierDeclType	size_t		64815	0					
ANR	64835	Identifier	len		64815	1					
ANR	64836	AssignmentExpression	len = strlen ( q )		64815	2		=			
ANR	64837	Identifier	len		64815	0					
ANR	64838	CallExpression	strlen ( q )		64815	1					
ANR	64839	Callee	strlen		64815	0					
ANR	64840	Identifier	strlen		64815	0					
ANR	64841	ArgumentList	q		64815	1					
ANR	64842	Argument	q		64815	0					
ANR	64843	Identifier	q		64815	0					
ANR	64844	IfStatement	if ( quoted )		64815	2					
ANR	64845	Condition	quoted	675:6:17373:17378	64815	0	True				
ANR	64846	Identifier	quoted		64815	0					
ANR	64847	ExpressionStatement	"memcpy ( quoted , q , len + 1 )"	676:4:17385:17412	64815	1	True				
ANR	64848	CallExpression	"memcpy ( quoted , q , len + 1 )"		64815	0					
ANR	64849	Callee	memcpy		64815	0					
ANR	64850	Identifier	memcpy		64815	0					
ANR	64851	ArgumentList	quoted		64815	1					
ANR	64852	Argument	quoted		64815	0					
ANR	64853	Identifier	quoted		64815	0					
ANR	64854	Argument	q		64815	1					
ANR	64855	Identifier	q		64815	0					
ANR	64856	Argument	len + 1		64815	2					
ANR	64857	AdditiveExpression	len + 1		64815	0		+			
ANR	64858	Identifier	len		64815	0					
ANR	64859	PrimaryExpression	1		64815	1					
ANR	64860	ReturnStatement	return len ;	677:2:17416:17426	64815	3	True				
ANR	64861	Identifier	len		64815	0					
ANR	64862	ReturnType	static size_t		64815	1					
ANR	64863	Identifier	quote_system_arg		64815	2					
ANR	64864	ParameterList	"char * quoted , char const * arg"		64815	3					
ANR	64865	Parameter	char * quoted	670:18:17251:17262	64815	0	True				
ANR	64866	ParameterType	char *		64815	0					
ANR	64867	Identifier	quoted		64815	1					
ANR	64868	Parameter	char const * arg	670:32:17265:17279	64815	1	True				
ANR	64869	ParameterType	char const *		64815	0					
ANR	64870	Identifier	arg		64815	1					
ANR	64871	CFGEntryNode	ENTRY		64815		True				
ANR	64872	CFGExitNode	EXIT		64815		True				
ANR	64873	Symbol	quoted		64815						
ANR	64874	Symbol	q		64815						
ANR	64875	Symbol	shell_quoting_style		64815						
ANR	64876	Symbol	strlen		64815						
ANR	64877	Symbol	len		64815						
ANR	64878	Symbol	arg		64815						
ANR	64879	Symbol	quotearg_style		64815						
ANR	64880	Function	version_controller	691:0:18045:21225							
ANR	64881	FunctionDef	"version_controller (char const * filename , bool readonly , struct stat const * filestat , char * * getbuf , char * * diffbuf)"		64880	0					
ANR	64882	CompoundStatement		694:0:18181:21225	64880	0					
ANR	64883	IdentifierDeclStatement	struct stat cstat ;	695:2:18185:18202	64880	0	True				
ANR	64884	IdentifierDecl	cstat		64880	0					
ANR	64885	IdentifierDeclType	struct stat		64880	0					
ANR	64886	Identifier	cstat		64880	1					
ANR	64887	IdentifierDeclStatement	char * dir = dir_name ( filename ) ;	696:2:18206:18237	64880	1	True				
ANR	64888	IdentifierDecl	* dir = dir_name ( filename )		64880	0					
ANR	64889	IdentifierDeclType	char *		64880	0					
ANR	64890	Identifier	dir		64880	1					
ANR	64891	AssignmentExpression	* dir = dir_name ( filename )		64880	2		=			
ANR	64892	Identifier	dir		64880	0					
ANR	64893	CallExpression	dir_name ( filename )		64880	1					
ANR	64894	Callee	dir_name		64880	0					
ANR	64895	Identifier	dir_name		64880	0					
ANR	64896	ArgumentList	filename		64880	1					
ANR	64897	Argument	filename		64880	0					
ANR	64898	Identifier	filename		64880	0					
ANR	64899	IdentifierDeclStatement	char * filebase = base_name ( filename ) ;	697:2:18241:18278	64880	2	True				
ANR	64900	IdentifierDecl	* filebase = base_name ( filename )		64880	0					
ANR	64901	IdentifierDeclType	char *		64880	0					
ANR	64902	Identifier	filebase		64880	1					
ANR	64903	AssignmentExpression	* filebase = base_name ( filename )		64880	2		=			
ANR	64904	Identifier	filebase		64880	0					
ANR	64905	CallExpression	base_name ( filename )		64880	1					
ANR	64906	Callee	base_name		64880	0					
ANR	64907	Identifier	base_name		64880	0					
ANR	64908	ArgumentList	filename		64880	1					
ANR	64909	Argument	filename		64880	0					
ANR	64910	Identifier	filename		64880	0					
ANR	64911	IdentifierDeclStatement	"char const * dotslash = * filename == '-' ? ""./"" : """" ;"	698:2:18282:18333	64880	3	True				
ANR	64912	IdentifierDecl	"* dotslash = * filename == '-' ? ""./"" : """""		64880	0					
ANR	64913	IdentifierDeclType	char const *		64880	0					
ANR	64914	Identifier	dotslash		64880	1					
ANR	64915	AssignmentExpression	"* dotslash = * filename == '-' ? ""./"" : """""		64880	2		=			
ANR	64916	Identifier	dotslash		64880	0					
ANR	64917	ConditionalExpression	"* filename == '-' ? ""./"" : """""		64880	1					
ANR	64918	Condition	* filename == '-'		64880	0					
ANR	64919	EqualityExpression	* filename == '-'		64880	0		==			
ANR	64920	UnaryOperationExpression	* filename		64880	0					
ANR	64921	UnaryOperator	*		64880	0					
ANR	64922	Identifier	filename		64880	1					
ANR	64923	PrimaryExpression	'-'		64880	1					
ANR	64924	PrimaryExpression	"""./"""		64880	1					
ANR	64925	PrimaryExpression	""""""		64880	2					
ANR	64926	IdentifierDeclStatement	size_t dirlen = strlen ( dir ) + 1 ;	699:2:18337:18369	64880	4	True				
ANR	64927	IdentifierDecl	dirlen = strlen ( dir ) + 1		64880	0					
ANR	64928	IdentifierDeclType	size_t		64880	0					
ANR	64929	Identifier	dirlen		64880	1					
ANR	64930	AssignmentExpression	dirlen = strlen ( dir ) + 1		64880	2		=			
ANR	64931	Identifier	dirlen		64880	0					
ANR	64932	AdditiveExpression	strlen ( dir ) + 1		64880	1		+			
ANR	64933	CallExpression	strlen ( dir )		64880	0					
ANR	64934	Callee	strlen		64880	0					
ANR	64935	Identifier	strlen		64880	0					
ANR	64936	ArgumentList	dir		64880	1					
ANR	64937	Argument	dir		64880	0					
ANR	64938	Identifier	dir		64880	0					
ANR	64939	PrimaryExpression	1		64880	1					
ANR	64940	IdentifierDeclStatement	"size_t maxfixlen = sizeof ""SCCS/"" - 1 + sizeof SCCSPREFIX - 1 ;"	700:2:18373:18434	64880	5	True				
ANR	64941	IdentifierDecl	"maxfixlen = sizeof ""SCCS/"" - 1 + sizeof SCCSPREFIX - 1"		64880	0					
ANR	64942	IdentifierDeclType	size_t		64880	0					
ANR	64943	Identifier	maxfixlen		64880	1					
ANR	64944	AssignmentExpression	"maxfixlen = sizeof ""SCCS/"" - 1 + sizeof SCCSPREFIX - 1"		64880	2		=			
ANR	64945	Identifier	maxfixlen		64880	0					
ANR	64946	AdditiveExpression	"sizeof ""SCCS/"" - 1 + sizeof SCCSPREFIX - 1"		64880	1		-			
ANR	64947	SizeofExpression	"sizeof ""SCCS/"""		64880	0					
ANR	64948	Sizeof	sizeof		64880	0					
ANR	64949	PrimaryExpression	"""SCCS/"""		64880	1					
ANR	64950	AdditiveExpression	1 + sizeof SCCSPREFIX - 1		64880	1		+			
ANR	64951	PrimaryExpression	1		64880	0					
ANR	64952	AdditiveExpression	sizeof SCCSPREFIX - 1		64880	1		-			
ANR	64953	SizeofExpression	sizeof SCCSPREFIX		64880	0					
ANR	64954	Sizeof	sizeof		64880	0					
ANR	64955	Identifier	SCCSPREFIX		64880	1					
ANR	64956	PrimaryExpression	1		64880	1					
ANR	64957	IdentifierDeclStatement	size_t maxtrysize = dirlen + strlen ( filebase ) + maxfixlen + 1 ;	701:2:18438:18500	64880	6	True				
ANR	64958	IdentifierDecl	maxtrysize = dirlen + strlen ( filebase ) + maxfixlen + 1		64880	0					
ANR	64959	IdentifierDeclType	size_t		64880	0					
ANR	64960	Identifier	maxtrysize		64880	1					
ANR	64961	AssignmentExpression	maxtrysize = dirlen + strlen ( filebase ) + maxfixlen + 1		64880	2		=			
ANR	64962	Identifier	maxtrysize		64880	0					
ANR	64963	AdditiveExpression	dirlen + strlen ( filebase ) + maxfixlen + 1		64880	1		+			
ANR	64964	Identifier	dirlen		64880	0					
ANR	64965	AdditiveExpression	strlen ( filebase ) + maxfixlen + 1		64880	1		+			
ANR	64966	CallExpression	strlen ( filebase )		64880	0					
ANR	64967	Callee	strlen		64880	0					
ANR	64968	Identifier	strlen		64880	0					
ANR	64969	ArgumentList	filebase		64880	1					
ANR	64970	Argument	filebase		64880	0					
ANR	64971	Identifier	filebase		64880	0					
ANR	64972	AdditiveExpression	maxfixlen + 1		64880	1		+			
ANR	64973	Identifier	maxfixlen		64880	0					
ANR	64974	PrimaryExpression	1		64880	1					
ANR	64975	IdentifierDeclStatement	"size_t quotelen = quote_system_arg ( 0 , dir ) + quote_system_arg ( 0 , filebase ) ;"	702:2:18504:18580	64880	7	True				
ANR	64976	IdentifierDecl	"quotelen = quote_system_arg ( 0 , dir ) + quote_system_arg ( 0 , filebase )"		64880	0					
ANR	64977	IdentifierDeclType	size_t		64880	0					
ANR	64978	Identifier	quotelen		64880	1					
ANR	64979	AssignmentExpression	"quotelen = quote_system_arg ( 0 , dir ) + quote_system_arg ( 0 , filebase )"		64880	2		=			
ANR	64980	Identifier	quotelen		64880	0					
ANR	64981	AdditiveExpression	"quote_system_arg ( 0 , dir ) + quote_system_arg ( 0 , filebase )"		64880	1		+			
ANR	64982	CallExpression	"quote_system_arg ( 0 , dir )"		64880	0					
ANR	64983	Callee	quote_system_arg		64880	0					
ANR	64984	Identifier	quote_system_arg		64880	0					
ANR	64985	ArgumentList	0		64880	1					
ANR	64986	Argument	0		64880	0					
ANR	64987	PrimaryExpression	0		64880	0					
ANR	64988	Argument	dir		64880	1					
ANR	64989	Identifier	dir		64880	0					
ANR	64990	CallExpression	"quote_system_arg ( 0 , filebase )"		64880	1					
ANR	64991	Callee	quote_system_arg		64880	0					
ANR	64992	Identifier	quote_system_arg		64880	0					
ANR	64993	ArgumentList	0		64880	1					
ANR	64994	Argument	0		64880	0					
ANR	64995	PrimaryExpression	0		64880	0					
ANR	64996	Argument	filebase		64880	1					
ANR	64997	Identifier	filebase		64880	0					
ANR	64998	IdentifierDeclStatement	size_t maxgetsize = sizeof CLEARTOOL_CO + quotelen + maxfixlen ;	703:2:18584:18646	64880	8	True				
ANR	64999	IdentifierDecl	maxgetsize = sizeof CLEARTOOL_CO + quotelen + maxfixlen		64880	0					
ANR	65000	IdentifierDeclType	size_t		64880	0					
ANR	65001	Identifier	maxgetsize		64880	1					
ANR	65002	AssignmentExpression	maxgetsize = sizeof CLEARTOOL_CO + quotelen + maxfixlen		64880	2		=			
ANR	65003	Identifier	maxgetsize		64880	0					
ANR	65004	AdditiveExpression	sizeof CLEARTOOL_CO + quotelen + maxfixlen		64880	1		+			
ANR	65005	SizeofExpression	sizeof CLEARTOOL_CO		64880	0					
ANR	65006	Sizeof	sizeof		64880	0					
ANR	65007	Identifier	CLEARTOOL_CO		64880	1					
ANR	65008	AdditiveExpression	quotelen + maxfixlen		64880	1		+			
ANR	65009	Identifier	quotelen		64880	0					
ANR	65010	Identifier	maxfixlen		64880	1					
ANR	65011	IdentifierDeclStatement	size_t maxdiffsize = ( sizeof SCCSDIFF1 + sizeof SCCSDIFF2 + sizeof DEV_NULL - 1 + 2 * quotelen + maxfixlen ) ;	704:2:18650:18766	64880	9	True				
ANR	65012	IdentifierDecl	maxdiffsize = ( sizeof SCCSDIFF1 + sizeof SCCSDIFF2 + sizeof DEV_NULL - 1 + 2 * quotelen + maxfixlen )		64880	0					
ANR	65013	IdentifierDeclType	size_t		64880	0					
ANR	65014	Identifier	maxdiffsize		64880	1					
ANR	65015	AssignmentExpression	maxdiffsize = ( sizeof SCCSDIFF1 + sizeof SCCSDIFF2 + sizeof DEV_NULL - 1 + 2 * quotelen + maxfixlen )		64880	2		=			
ANR	65016	Identifier	maxdiffsize		64880	0					
ANR	65017	AdditiveExpression	sizeof SCCSDIFF1 + sizeof SCCSDIFF2 + sizeof DEV_NULL - 1 + 2 * quotelen + maxfixlen		64880	1		+			
ANR	65018	SizeofExpression	sizeof SCCSDIFF1		64880	0					
ANR	65019	Sizeof	sizeof		64880	0					
ANR	65020	Identifier	SCCSDIFF1		64880	1					
ANR	65021	AdditiveExpression	sizeof SCCSDIFF2 + sizeof DEV_NULL - 1 + 2 * quotelen + maxfixlen		64880	1		+			
ANR	65022	SizeofExpression	sizeof SCCSDIFF2		64880	0					
ANR	65023	Sizeof	sizeof		64880	0					
ANR	65024	Identifier	SCCSDIFF2		64880	1					
ANR	65025	AdditiveExpression	sizeof DEV_NULL - 1 + 2 * quotelen + maxfixlen		64880	1		-			
ANR	65026	SizeofExpression	sizeof DEV_NULL		64880	0					
ANR	65027	Sizeof	sizeof		64880	0					
ANR	65028	Identifier	DEV_NULL		64880	1					
ANR	65029	AdditiveExpression	1 + 2 * quotelen + maxfixlen		64880	1		+			
ANR	65030	PrimaryExpression	1		64880	0					
ANR	65031	AdditiveExpression	2 * quotelen + maxfixlen		64880	1		+			
ANR	65032	MultiplicativeExpression	2 * quotelen		64880	0		*			
ANR	65033	PrimaryExpression	2		64880	0					
ANR	65034	Identifier	quotelen		64880	1					
ANR	65035	Identifier	maxfixlen		64880	1					
ANR	65036	IdentifierDeclStatement	char * trybuf = xmalloc ( maxtrysize ) ;	707:2:18770:18805	64880	10	True				
ANR	65037	IdentifierDecl	* trybuf = xmalloc ( maxtrysize )		64880	0					
ANR	65038	IdentifierDeclType	char *		64880	0					
ANR	65039	Identifier	trybuf		64880	1					
ANR	65040	AssignmentExpression	* trybuf = xmalloc ( maxtrysize )		64880	2		=			
ANR	65041	Identifier	trybuf		64880	0					
ANR	65042	CallExpression	xmalloc ( maxtrysize )		64880	1					
ANR	65043	Callee	xmalloc		64880	0					
ANR	65044	Identifier	xmalloc		64880	0					
ANR	65045	ArgumentList	maxtrysize		64880	1					
ANR	65046	Argument	maxtrysize		64880	0					
ANR	65047	Identifier	maxtrysize		64880	0					
ANR	65048	IdentifierDeclStatement	char const * r = 0 ;	708:2:18809:18826	64880	11	True				
ANR	65049	IdentifierDecl	* r = 0		64880	0					
ANR	65050	IdentifierDeclType	char const *		64880	0					
ANR	65051	Identifier	r		64880	1					
ANR	65052	AssignmentExpression	* r = 0		64880	2		=			
ANR	65053	Identifier	r		64880	0					
ANR	65054	PrimaryExpression	0		64880	1					
ANR	65055	ExpressionStatement	"sprintf ( trybuf , ""%s/"" , dir )"	710:2:18831:18859	64880	12	True				
ANR	65056	CallExpression	"sprintf ( trybuf , ""%s/"" , dir )"		64880	0					
ANR	65057	Callee	sprintf		64880	0					
ANR	65058	Identifier	sprintf		64880	0					
ANR	65059	ArgumentList	trybuf		64880	1					
ANR	65060	Argument	trybuf		64880	0					
ANR	65061	Identifier	trybuf		64880	0					
ANR	65062	Argument	"""%s/"""		64880	1					
ANR	65063	PrimaryExpression	"""%s/"""		64880	0					
ANR	65064	Argument	dir		64880	2					
ANR	65065	Identifier	dir		64880	0					
ANR	65066	Statement	define	712:1:18863:18868	64880	13	True				
ANR	65067	Statement	try1	712:8:18870:18873	64880	14	True				
ANR	65068	Statement	(	712:12:18874:18874	64880	15	True				
ANR	65069	Statement	f	712:13:18875:18875	64880	16	True				
ANR	65070	Statement	","	712:14:18876:18876	64880	17	True				
ANR	65071	Statement	a1	712:15:18877:18878	64880	18	True				
ANR	65072	Statement	)	712:17:18879:18879	64880	19	True				
ANR	65073	Statement	(	712:22:18884:18884	64880	20	True				
ANR	65074	Statement	sprintf	712:23:18885:18891	64880	21	True				
ANR	65075	Statement	(	712:31:18893:18893	64880	22	True				
ANR	65076	Statement	trybuf	712:32:18894:18899	64880	23	True				
ANR	65077	Statement	+	712:39:18901:18901	64880	24	True				
ANR	65078	Statement	dirlen	712:41:18903:18908	64880	25	True				
ANR	65079	Statement	","	712:47:18909:18909	64880	26	True				
ANR	65080	Statement	f	712:49:18911:18911	64880	27	True				
ANR	65081	Statement	","	712:50:18912:18912	64880	28	True				
ANR	65082	Statement	a1	712:52:18914:18915	64880	29	True				
ANR	65083	Statement	)	712:54:18916:18916	64880	30	True				
ANR	65084	Statement	","	712:55:18917:18917	64880	31	True				
ANR	65085	Statement	safe_stat	712:60:18922:18930	64880	32	True				
ANR	65086	Statement	(	712:70:18932:18932	64880	33	True				
ANR	65087	Statement	trybuf	712:71:18933:18938	64880	34	True				
ANR	65088	Statement	","	712:77:18939:18939	64880	35	True				
ANR	65089	Statement	&	712:79:18941:18941	64880	36	True				
ANR	65090	Statement	cstat	712:80:18942:18946	64880	37	True				
ANR	65091	Statement	)	712:85:18947:18947	64880	38	True				
ANR	65092	Statement	==	712:87:18949:18950	64880	39	True				
ANR	65093	Statement	0	712:90:18952:18952	64880	40	True				
ANR	65094	Statement	)	712:91:18953:18953	64880	41	True				
ANR	65095	Statement	define	713:1:18956:18961	64880	42	True				
ANR	65096	Statement	try2	713:8:18963:18966	64880	43	True				
ANR	65097	Statement	(	713:12:18967:18967	64880	44	True				
ANR	65098	Statement	f	713:13:18968:18968	64880	45	True				
ANR	65099	Statement	","	713:14:18969:18969	64880	46	True				
ANR	65100	Statement	a1	713:15:18970:18971	64880	47	True				
ANR	65101	Statement	","	713:17:18972:18972	64880	48	True				
ANR	65102	Statement	a2	713:18:18973:18974	64880	49	True				
ANR	65103	Statement	)	713:20:18975:18975	64880	50	True				
ANR	65104	Statement	(	713:22:18977:18977	64880	51	True				
ANR	65105	Statement	sprintf	713:23:18978:18984	64880	52	True				
ANR	65106	Statement	(	713:31:18986:18986	64880	53	True				
ANR	65107	Statement	trybuf	713:32:18987:18992	64880	54	True				
ANR	65108	Statement	+	713:39:18994:18994	64880	55	True				
ANR	65109	Statement	dirlen	713:41:18996:19001	64880	56	True				
ANR	65110	Statement	","	713:47:19002:19002	64880	57	True				
ANR	65111	Statement	f	713:49:19004:19004	64880	58	True				
ANR	65112	Statement	","	713:50:19005:19005	64880	59	True				
ANR	65113	Statement	a1	713:52:19007:19008	64880	60	True				
ANR	65114	Statement	","	713:54:19009:19009	64880	61	True				
ANR	65115	Statement	a2	713:55:19010:19011	64880	62	True				
ANR	65116	Statement	)	713:57:19012:19012	64880	63	True				
ANR	65117	Statement	","	713:58:19013:19013	64880	64	True				
ANR	65118	Statement	safe_stat	713:60:19015:19023	64880	65	True				
ANR	65119	Statement	(	713:70:19025:19025	64880	66	True				
ANR	65120	Statement	trybuf	713:71:19026:19031	64880	67	True				
ANR	65121	Statement	","	713:77:19032:19032	64880	68	True				
ANR	65122	Statement	&	713:79:19034:19034	64880	69	True				
ANR	65123	Statement	cstat	713:80:19035:19039	64880	70	True				
ANR	65124	Statement	)	713:85:19040:19040	64880	71	True				
ANR	65125	Statement	==	713:87:19042:19043	64880	72	True				
ANR	65126	Statement	0	713:90:19045:19045	64880	73	True				
ANR	65127	Statement	)	713:91:19046:19046	64880	74	True				
ANR	65128	IfStatement	"if ( ( try2 ( ""RCS/%s%s"" , filebase , RCSSUFFIX ) || try1 ( ""RCS/%s"" , filebase ) || try2 ( ""%s%s"" , filebase , RCSSUFFIX ) ) && ! ( filestat && filestat -> st_dev == cstat . st_dev && filestat -> st_ino == cstat . st_ino ) )"		64880	75					
ANR	65129	Condition	"( try2 ( ""RCS/%s%s"" , filebase , RCSSUFFIX ) || try1 ( ""RCS/%s"" , filebase ) || try2 ( ""%s%s"" , filebase , RCSSUFFIX ) ) && ! ( filestat && filestat -> st_dev == cstat . st_dev && filestat -> st_ino == cstat . st_ino )"	718:6:19160:19384	64880	0	True				
ANR	65130	AndExpression	"( try2 ( ""RCS/%s%s"" , filebase , RCSSUFFIX ) || try1 ( ""RCS/%s"" , filebase ) || try2 ( ""%s%s"" , filebase , RCSSUFFIX ) ) && ! ( filestat && filestat -> st_dev == cstat . st_dev && filestat -> st_ino == cstat . st_ino )"		64880	0		&&			
ANR	65131	OrExpression	"try2 ( ""RCS/%s%s"" , filebase , RCSSUFFIX ) || try1 ( ""RCS/%s"" , filebase ) || try2 ( ""%s%s"" , filebase , RCSSUFFIX )"		64880	0		||			
ANR	65132	CallExpression	"try2 ( ""RCS/%s%s"" , filebase , RCSSUFFIX )"		64880	0					
ANR	65133	Callee	try2		64880	0					
ANR	65134	Identifier	try2		64880	0					
ANR	65135	ArgumentList	"""RCS/%s%s"""		64880	1					
ANR	65136	Argument	"""RCS/%s%s"""		64880	0					
ANR	65137	PrimaryExpression	"""RCS/%s%s"""		64880	0					
ANR	65138	Argument	filebase		64880	1					
ANR	65139	Identifier	filebase		64880	0					
ANR	65140	Argument	RCSSUFFIX		64880	2					
ANR	65141	Identifier	RCSSUFFIX		64880	0					
ANR	65142	OrExpression	"try1 ( ""RCS/%s"" , filebase ) || try2 ( ""%s%s"" , filebase , RCSSUFFIX )"		64880	1		||			
ANR	65143	CallExpression	"try1 ( ""RCS/%s"" , filebase )"		64880	0					
ANR	65144	Callee	try1		64880	0					
ANR	65145	Identifier	try1		64880	0					
ANR	65146	ArgumentList	"""RCS/%s"""		64880	1					
ANR	65147	Argument	"""RCS/%s"""		64880	0					
ANR	65148	PrimaryExpression	"""RCS/%s"""		64880	0					
ANR	65149	Argument	filebase		64880	1					
ANR	65150	Identifier	filebase		64880	0					
ANR	65151	CallExpression	"try2 ( ""%s%s"" , filebase , RCSSUFFIX )"		64880	1					
ANR	65152	Callee	try2		64880	0					
ANR	65153	Identifier	try2		64880	0					
ANR	65154	ArgumentList	"""%s%s"""		64880	1					
ANR	65155	Argument	"""%s%s"""		64880	0					
ANR	65156	PrimaryExpression	"""%s%s"""		64880	0					
ANR	65157	Argument	filebase		64880	1					
ANR	65158	Identifier	filebase		64880	0					
ANR	65159	Argument	RCSSUFFIX		64880	2					
ANR	65160	Identifier	RCSSUFFIX		64880	0					
ANR	65161	UnaryOperationExpression	! ( filestat && filestat -> st_dev == cstat . st_dev && filestat -> st_ino == cstat . st_ino )		64880	1					
ANR	65162	UnaryOperator	!		64880	0					
ANR	65163	AndExpression	filestat && filestat -> st_dev == cstat . st_dev && filestat -> st_ino == cstat . st_ino		64880	1		&&			
ANR	65164	Identifier	filestat		64880	0					
ANR	65165	AndExpression	filestat -> st_dev == cstat . st_dev && filestat -> st_ino == cstat . st_ino		64880	1		&&			
ANR	65166	EqualityExpression	filestat -> st_dev == cstat . st_dev		64880	0		==			
ANR	65167	PtrMemberAccess	filestat -> st_dev		64880	0					
ANR	65168	Identifier	filestat		64880	0					
ANR	65169	Identifier	st_dev		64880	1					
ANR	65170	MemberAccess	cstat . st_dev		64880	1					
ANR	65171	Identifier	cstat		64880	0					
ANR	65172	Identifier	st_dev		64880	1					
ANR	65173	EqualityExpression	filestat -> st_ino == cstat . st_ino		64880	1		==			
ANR	65174	PtrMemberAccess	filestat -> st_ino		64880	0					
ANR	65175	Identifier	filestat		64880	0					
ANR	65176	Identifier	st_ino		64880	1					
ANR	65177	MemberAccess	cstat . st_ino		64880	1					
ANR	65178	Identifier	cstat		64880	0					
ANR	65179	Identifier	st_ino		64880	1					
ANR	65180	CompoundStatement		31:4:1209:1209	64880	1					
ANR	65181	IfStatement	if ( getbuf )		64880	0					
ANR	65182	Condition	getbuf	725:10:19403:19408	64880	0	True				
ANR	65183	Identifier	getbuf		64880	0					
ANR	65184	CompoundStatement		34:3:1235:1275	64880	1					
ANR	65185	IdentifierDeclStatement	char * p = * getbuf = xmalloc ( maxgetsize ) ;	727:3:19417:19457	64880	0	True				
ANR	65186	IdentifierDecl	* p = * getbuf = xmalloc ( maxgetsize )		64880	0					
ANR	65187	IdentifierDeclType	char *		64880	0					
ANR	65188	Identifier	p		64880	1					
ANR	65189	AssignmentExpression	* p = * getbuf = xmalloc ( maxgetsize )		64880	2		=			
ANR	65190	Identifier	p		64880	0					
ANR	65191	AssignmentExpression	* getbuf = xmalloc ( maxgetsize )		64880	1		=			
ANR	65192	UnaryOperationExpression	* getbuf		64880	0					
ANR	65193	UnaryOperator	*		64880	0					
ANR	65194	Identifier	getbuf		64880	1					
ANR	65195	CallExpression	xmalloc ( maxgetsize )		64880	1					
ANR	65196	Callee	xmalloc		64880	0					
ANR	65197	Identifier	xmalloc		64880	0					
ANR	65198	ArgumentList	maxgetsize		64880	1					
ANR	65199	Argument	maxgetsize		64880	0					
ANR	65200	Identifier	maxgetsize		64880	0					
ANR	65201	ExpressionStatement	"sprintf ( p , readonly ? CHECKOUT : CHECKOUT_LOCKED , dotslash )"	728:3:19462:19522	64880	1	True				
ANR	65202	CallExpression	"sprintf ( p , readonly ? CHECKOUT : CHECKOUT_LOCKED , dotslash )"		64880	0					
ANR	65203	Callee	sprintf		64880	0					
ANR	65204	Identifier	sprintf		64880	0					
ANR	65205	ArgumentList	p		64880	1					
ANR	65206	Argument	p		64880	0					
ANR	65207	Identifier	p		64880	0					
ANR	65208	Argument	readonly ? CHECKOUT : CHECKOUT_LOCKED		64880	1					
ANR	65209	ConditionalExpression	readonly ? CHECKOUT : CHECKOUT_LOCKED		64880	0					
ANR	65210	Condition	readonly		64880	0					
ANR	65211	Identifier	readonly		64880	0					
ANR	65212	Identifier	CHECKOUT		64880	1					
ANR	65213	Identifier	CHECKOUT_LOCKED		64880	2					
ANR	65214	Argument	dotslash		64880	2					
ANR	65215	Identifier	dotslash		64880	0					
ANR	65216	ExpressionStatement	p += strlen ( p )	729:3:19527:19542	64880	2	True				
ANR	65217	AssignmentExpression	p += strlen ( p )		64880	0		+=			
ANR	65218	Identifier	p		64880	0					
ANR	65219	CallExpression	strlen ( p )		64880	1					
ANR	65220	Callee	strlen		64880	0					
ANR	65221	Identifier	strlen		64880	0					
ANR	65222	ArgumentList	p		64880	1					
ANR	65223	Argument	p		64880	0					
ANR	65224	Identifier	p		64880	0					
ANR	65225	ExpressionStatement	"p += quote_system_arg ( p , filename )"	730:3:19547:19582	64880	3	True				
ANR	65226	AssignmentExpression	"p += quote_system_arg ( p , filename )"		64880	0		+=			
ANR	65227	Identifier	p		64880	0					
ANR	65228	CallExpression	"quote_system_arg ( p , filename )"		64880	1					
ANR	65229	Callee	quote_system_arg		64880	0					
ANR	65230	Identifier	quote_system_arg		64880	0					
ANR	65231	ArgumentList	p		64880	1					
ANR	65232	Argument	p		64880	0					
ANR	65233	Identifier	p		64880	0					
ANR	65234	Argument	filename		64880	1					
ANR	65235	Identifier	filename		64880	0					
ANR	65236	ExpressionStatement	* p = '\\0'	731:3:19587:19596	64880	4	True				
ANR	65237	AssignmentExpression	* p = '\\0'		64880	0		=			
ANR	65238	UnaryOperationExpression	* p		64880	0					
ANR	65239	UnaryOperator	*		64880	0					
ANR	65240	Identifier	p		64880	1					
ANR	65241	PrimaryExpression	'\\0'		64880	1					
ANR	65242	IfStatement	if ( diffbuf )		64880	1					
ANR	65243	Condition	diffbuf	734:10:19612:19618	64880	0	True				
ANR	65244	Identifier	diffbuf		64880	0					
ANR	65245	CompoundStatement		43:3:1445:1487	64880	1					
ANR	65246	IdentifierDeclStatement	char * p = * diffbuf = xmalloc ( maxdiffsize ) ;	736:3:19627:19669	64880	0	True				
ANR	65247	IdentifierDecl	* p = * diffbuf = xmalloc ( maxdiffsize )		64880	0					
ANR	65248	IdentifierDeclType	char *		64880	0					
ANR	65249	Identifier	p		64880	1					
ANR	65250	AssignmentExpression	* p = * diffbuf = xmalloc ( maxdiffsize )		64880	2		=			
ANR	65251	Identifier	p		64880	0					
ANR	65252	AssignmentExpression	* diffbuf = xmalloc ( maxdiffsize )		64880	1		=			
ANR	65253	UnaryOperationExpression	* diffbuf		64880	0					
ANR	65254	UnaryOperator	*		64880	0					
ANR	65255	Identifier	diffbuf		64880	1					
ANR	65256	CallExpression	xmalloc ( maxdiffsize )		64880	1					
ANR	65257	Callee	xmalloc		64880	0					
ANR	65258	Identifier	xmalloc		64880	0					
ANR	65259	ArgumentList	maxdiffsize		64880	1					
ANR	65260	Argument	maxdiffsize		64880	0					
ANR	65261	Identifier	maxdiffsize		64880	0					
ANR	65262	ExpressionStatement	"sprintf ( p , RCSDIFF1 , dotslash )"	737:3:19674:19705	64880	1	True				
ANR	65263	CallExpression	"sprintf ( p , RCSDIFF1 , dotslash )"		64880	0					
ANR	65264	Callee	sprintf		64880	0					
ANR	65265	Identifier	sprintf		64880	0					
ANR	65266	ArgumentList	p		64880	1					
ANR	65267	Argument	p		64880	0					
ANR	65268	Identifier	p		64880	0					
ANR	65269	Argument	RCSDIFF1		64880	1					
ANR	65270	Identifier	RCSDIFF1		64880	0					
ANR	65271	Argument	dotslash		64880	2					
ANR	65272	Identifier	dotslash		64880	0					
ANR	65273	ExpressionStatement	p += strlen ( p )	738:3:19710:19725	64880	2	True				
ANR	65274	AssignmentExpression	p += strlen ( p )		64880	0		+=			
ANR	65275	Identifier	p		64880	0					
ANR	65276	CallExpression	strlen ( p )		64880	1					
ANR	65277	Callee	strlen		64880	0					
ANR	65278	Identifier	strlen		64880	0					
ANR	65279	ArgumentList	p		64880	1					
ANR	65280	Argument	p		64880	0					
ANR	65281	Identifier	p		64880	0					
ANR	65282	ExpressionStatement	"p += quote_system_arg ( p , filename )"	739:3:19730:19765	64880	3	True				
ANR	65283	AssignmentExpression	"p += quote_system_arg ( p , filename )"		64880	0		+=			
ANR	65284	Identifier	p		64880	0					
ANR	65285	CallExpression	"quote_system_arg ( p , filename )"		64880	1					
ANR	65286	Callee	quote_system_arg		64880	0					
ANR	65287	Identifier	quote_system_arg		64880	0					
ANR	65288	ArgumentList	p		64880	1					
ANR	65289	Argument	p		64880	0					
ANR	65290	Identifier	p		64880	0					
ANR	65291	Argument	filename		64880	1					
ANR	65292	Identifier	filename		64880	0					
ANR	65293	ExpressionStatement	* p ++ = '>'	740:3:19770:19780	64880	4	True				
ANR	65294	AssignmentExpression	* p ++ = '>'		64880	0		=			
ANR	65295	UnaryOperationExpression	* p ++		64880	0					
ANR	65296	UnaryOperator	*		64880	0					
ANR	65297	PostIncDecOperationExpression	p ++		64880	1					
ANR	65298	Identifier	p		64880	0					
ANR	65299	IncDec	++		64880	1					
ANR	65300	PrimaryExpression	'>'		64880	1					
ANR	65301	ExpressionStatement	"strcpy ( p , DEV_NULL )"	741:3:19785:19805	64880	5	True				
ANR	65302	CallExpression	"strcpy ( p , DEV_NULL )"		64880	0					
ANR	65303	Callee	strcpy		64880	0					
ANR	65304	Identifier	strcpy		64880	0					
ANR	65305	ArgumentList	p		64880	1					
ANR	65306	Argument	p		64880	0					
ANR	65307	Identifier	p		64880	0					
ANR	65308	Argument	DEV_NULL		64880	1					
ANR	65309	Identifier	DEV_NULL		64880	0					
ANR	65310	ExpressionStatement	"r = ""RCS"""	744:6:19817:19826	64880	2	True				
ANR	65311	AssignmentExpression	"r = ""RCS"""		64880	0		=			
ANR	65312	Identifier	r		64880	0					
ANR	65313	PrimaryExpression	"""RCS"""		64880	1					
ANR	65314	ElseStatement	else		64880	0					
ANR	65315	IfStatement	"if ( try2 ( ""SCCS/%s%s"" , SCCSPREFIX , filebase ) || try2 ( ""%s%s"" , SCCSPREFIX , filebase ) )"		64880	0					
ANR	65316	Condition	"try2 ( ""SCCS/%s%s"" , SCCSPREFIX , filebase ) || try2 ( ""%s%s"" , SCCSPREFIX , filebase )"	746:11:19845:19927	64880	0	True				
ANR	65317	OrExpression	"try2 ( ""SCCS/%s%s"" , SCCSPREFIX , filebase ) || try2 ( ""%s%s"" , SCCSPREFIX , filebase )"		64880	0		||			
ANR	65318	CallExpression	"try2 ( ""SCCS/%s%s"" , SCCSPREFIX , filebase )"		64880	0					
ANR	65319	Callee	try2		64880	0					
ANR	65320	Identifier	try2		64880	0					
ANR	65321	ArgumentList	"""SCCS/%s%s"""		64880	1					
ANR	65322	Argument	"""SCCS/%s%s"""		64880	0					
ANR	65323	PrimaryExpression	"""SCCS/%s%s"""		64880	0					
ANR	65324	Argument	SCCSPREFIX		64880	1					
ANR	65325	Identifier	SCCSPREFIX		64880	0					
ANR	65326	Argument	filebase		64880	2					
ANR	65327	Identifier	filebase		64880	0					
ANR	65328	CallExpression	"try2 ( ""%s%s"" , SCCSPREFIX , filebase )"		64880	1					
ANR	65329	Callee	try2		64880	0					
ANR	65330	Identifier	try2		64880	0					
ANR	65331	ArgumentList	"""%s%s"""		64880	1					
ANR	65332	Argument	"""%s%s"""		64880	0					
ANR	65333	PrimaryExpression	"""%s%s"""		64880	0					
ANR	65334	Argument	SCCSPREFIX		64880	1					
ANR	65335	Identifier	SCCSPREFIX		64880	0					
ANR	65336	Argument	filebase		64880	2					
ANR	65337	Identifier	filebase		64880	0					
ANR	65338	CompoundStatement		55:4:1752:1752	64880	1					
ANR	65339	IfStatement	if ( getbuf )		64880	0					
ANR	65340	Condition	getbuf	749:10:19946:19951	64880	0	True				
ANR	65341	Identifier	getbuf		64880	0					
ANR	65342	CompoundStatement		58:3:1778:1818	64880	1					
ANR	65343	IdentifierDeclStatement	char * p = * getbuf = xmalloc ( maxgetsize ) ;	751:3:19960:20000	64880	0	True				
ANR	65344	IdentifierDecl	* p = * getbuf = xmalloc ( maxgetsize )		64880	0					
ANR	65345	IdentifierDeclType	char *		64880	0					
ANR	65346	Identifier	p		64880	1					
ANR	65347	AssignmentExpression	* p = * getbuf = xmalloc ( maxgetsize )		64880	2		=			
ANR	65348	Identifier	p		64880	0					
ANR	65349	AssignmentExpression	* getbuf = xmalloc ( maxgetsize )		64880	1		=			
ANR	65350	UnaryOperationExpression	* getbuf		64880	0					
ANR	65351	UnaryOperator	*		64880	0					
ANR	65352	Identifier	getbuf		64880	1					
ANR	65353	CallExpression	xmalloc ( maxgetsize )		64880	1					
ANR	65354	Callee	xmalloc		64880	0					
ANR	65355	Identifier	xmalloc		64880	0					
ANR	65356	ArgumentList	maxgetsize		64880	1					
ANR	65357	Argument	maxgetsize		64880	0					
ANR	65358	Identifier	maxgetsize		64880	0					
ANR	65359	ExpressionStatement	"sprintf ( p , readonly ? GET : GET_LOCKED )"	752:3:20005:20045	64880	1	True				
ANR	65360	CallExpression	"sprintf ( p , readonly ? GET : GET_LOCKED )"		64880	0					
ANR	65361	Callee	sprintf		64880	0					
ANR	65362	Identifier	sprintf		64880	0					
ANR	65363	ArgumentList	p		64880	1					
ANR	65364	Argument	p		64880	0					
ANR	65365	Identifier	p		64880	0					
ANR	65366	Argument	readonly ? GET : GET_LOCKED		64880	1					
ANR	65367	ConditionalExpression	readonly ? GET : GET_LOCKED		64880	0					
ANR	65368	Condition	readonly		64880	0					
ANR	65369	Identifier	readonly		64880	0					
ANR	65370	Identifier	GET		64880	1					
ANR	65371	Identifier	GET_LOCKED		64880	2					
ANR	65372	ExpressionStatement	p += strlen ( p )	753:3:20050:20065	64880	2	True				
ANR	65373	AssignmentExpression	p += strlen ( p )		64880	0		+=			
ANR	65374	Identifier	p		64880	0					
ANR	65375	CallExpression	strlen ( p )		64880	1					
ANR	65376	Callee	strlen		64880	0					
ANR	65377	Identifier	strlen		64880	0					
ANR	65378	ArgumentList	p		64880	1					
ANR	65379	Argument	p		64880	0					
ANR	65380	Identifier	p		64880	0					
ANR	65381	ExpressionStatement	"p += quote_system_arg ( p , trybuf )"	754:3:20070:20103	64880	3	True				
ANR	65382	AssignmentExpression	"p += quote_system_arg ( p , trybuf )"		64880	0		+=			
ANR	65383	Identifier	p		64880	0					
ANR	65384	CallExpression	"quote_system_arg ( p , trybuf )"		64880	1					
ANR	65385	Callee	quote_system_arg		64880	0					
ANR	65386	Identifier	quote_system_arg		64880	0					
ANR	65387	ArgumentList	p		64880	1					
ANR	65388	Argument	p		64880	0					
ANR	65389	Identifier	p		64880	0					
ANR	65390	Argument	trybuf		64880	1					
ANR	65391	Identifier	trybuf		64880	0					
ANR	65392	ExpressionStatement	* p = '\\0'	755:3:20108:20117	64880	4	True				
ANR	65393	AssignmentExpression	* p = '\\0'		64880	0		=			
ANR	65394	UnaryOperationExpression	* p		64880	0					
ANR	65395	UnaryOperator	*		64880	0					
ANR	65396	Identifier	p		64880	1					
ANR	65397	PrimaryExpression	'\\0'		64880	1					
ANR	65398	IfStatement	if ( diffbuf )		64880	1					
ANR	65399	Condition	diffbuf	758:10:20133:20139	64880	0	True				
ANR	65400	Identifier	diffbuf		64880	0					
ANR	65401	CompoundStatement		67:3:1966:2008	64880	1					
ANR	65402	IdentifierDeclStatement	char * p = * diffbuf = xmalloc ( maxdiffsize ) ;	760:3:20148:20190	64880	0	True				
ANR	65403	IdentifierDecl	* p = * diffbuf = xmalloc ( maxdiffsize )		64880	0					
ANR	65404	IdentifierDeclType	char *		64880	0					
ANR	65405	Identifier	p		64880	1					
ANR	65406	AssignmentExpression	* p = * diffbuf = xmalloc ( maxdiffsize )		64880	2		=			
ANR	65407	Identifier	p		64880	0					
ANR	65408	AssignmentExpression	* diffbuf = xmalloc ( maxdiffsize )		64880	1		=			
ANR	65409	UnaryOperationExpression	* diffbuf		64880	0					
ANR	65410	UnaryOperator	*		64880	0					
ANR	65411	Identifier	diffbuf		64880	1					
ANR	65412	CallExpression	xmalloc ( maxdiffsize )		64880	1					
ANR	65413	Callee	xmalloc		64880	0					
ANR	65414	Identifier	xmalloc		64880	0					
ANR	65415	ArgumentList	maxdiffsize		64880	1					
ANR	65416	Argument	maxdiffsize		64880	0					
ANR	65417	Identifier	maxdiffsize		64880	0					
ANR	65418	ExpressionStatement	"strcpy ( p , SCCSDIFF1 )"	761:3:20195:20216	64880	1	True				
ANR	65419	CallExpression	"strcpy ( p , SCCSDIFF1 )"		64880	0					
ANR	65420	Callee	strcpy		64880	0					
ANR	65421	Identifier	strcpy		64880	0					
ANR	65422	ArgumentList	p		64880	1					
ANR	65423	Argument	p		64880	0					
ANR	65424	Identifier	p		64880	0					
ANR	65425	Argument	SCCSDIFF1		64880	1					
ANR	65426	Identifier	SCCSDIFF1		64880	0					
ANR	65427	ExpressionStatement	p += sizeof SCCSDIFF1 - 1	762:3:20221:20246	64880	2	True				
ANR	65428	AssignmentExpression	p += sizeof SCCSDIFF1 - 1		64880	0		+=			
ANR	65429	Identifier	p		64880	0					
ANR	65430	AdditiveExpression	sizeof SCCSDIFF1 - 1		64880	1		-			
ANR	65431	SizeofExpression	sizeof SCCSDIFF1		64880	0					
ANR	65432	Sizeof	sizeof		64880	0					
ANR	65433	Identifier	SCCSDIFF1		64880	1					
ANR	65434	PrimaryExpression	1		64880	1					
ANR	65435	ExpressionStatement	"p += quote_system_arg ( p , trybuf )"	763:3:20251:20284	64880	3	True				
ANR	65436	AssignmentExpression	"p += quote_system_arg ( p , trybuf )"		64880	0		+=			
ANR	65437	Identifier	p		64880	0					
ANR	65438	CallExpression	"quote_system_arg ( p , trybuf )"		64880	1					
ANR	65439	Callee	quote_system_arg		64880	0					
ANR	65440	Identifier	quote_system_arg		64880	0					
ANR	65441	ArgumentList	p		64880	1					
ANR	65442	Argument	p		64880	0					
ANR	65443	Identifier	p		64880	0					
ANR	65444	Argument	trybuf		64880	1					
ANR	65445	Identifier	trybuf		64880	0					
ANR	65446	ExpressionStatement	"sprintf ( p , SCCSDIFF2 , dotslash )"	764:3:20289:20321	64880	4	True				
ANR	65447	CallExpression	"sprintf ( p , SCCSDIFF2 , dotslash )"		64880	0					
ANR	65448	Callee	sprintf		64880	0					
ANR	65449	Identifier	sprintf		64880	0					
ANR	65450	ArgumentList	p		64880	1					
ANR	65451	Argument	p		64880	0					
ANR	65452	Identifier	p		64880	0					
ANR	65453	Argument	SCCSDIFF2		64880	1					
ANR	65454	Identifier	SCCSDIFF2		64880	0					
ANR	65455	Argument	dotslash		64880	2					
ANR	65456	Identifier	dotslash		64880	0					
ANR	65457	ExpressionStatement	p += strlen ( p )	765:3:20326:20341	64880	5	True				
ANR	65458	AssignmentExpression	p += strlen ( p )		64880	0		+=			
ANR	65459	Identifier	p		64880	0					
ANR	65460	CallExpression	strlen ( p )		64880	1					
ANR	65461	Callee	strlen		64880	0					
ANR	65462	Identifier	strlen		64880	0					
ANR	65463	ArgumentList	p		64880	1					
ANR	65464	Argument	p		64880	0					
ANR	65465	Identifier	p		64880	0					
ANR	65466	ExpressionStatement	"p += quote_system_arg ( p , filename )"	766:3:20346:20381	64880	6	True				
ANR	65467	AssignmentExpression	"p += quote_system_arg ( p , filename )"		64880	0		+=			
ANR	65468	Identifier	p		64880	0					
ANR	65469	CallExpression	"quote_system_arg ( p , filename )"		64880	1					
ANR	65470	Callee	quote_system_arg		64880	0					
ANR	65471	Identifier	quote_system_arg		64880	0					
ANR	65472	ArgumentList	p		64880	1					
ANR	65473	Argument	p		64880	0					
ANR	65474	Identifier	p		64880	0					
ANR	65475	Argument	filename		64880	1					
ANR	65476	Identifier	filename		64880	0					
ANR	65477	ExpressionStatement	* p ++ = '>'	767:3:20386:20396	64880	7	True				
ANR	65478	AssignmentExpression	* p ++ = '>'		64880	0		=			
ANR	65479	UnaryOperationExpression	* p ++		64880	0					
ANR	65480	UnaryOperator	*		64880	0					
ANR	65481	PostIncDecOperationExpression	p ++		64880	1					
ANR	65482	Identifier	p		64880	0					
ANR	65483	IncDec	++		64880	1					
ANR	65484	PrimaryExpression	'>'		64880	1					
ANR	65485	ExpressionStatement	"strcpy ( p , DEV_NULL )"	768:3:20401:20421	64880	8	True				
ANR	65486	CallExpression	"strcpy ( p , DEV_NULL )"		64880	0					
ANR	65487	Callee	strcpy		64880	0					
ANR	65488	Identifier	strcpy		64880	0					
ANR	65489	ArgumentList	p		64880	1					
ANR	65490	Argument	p		64880	0					
ANR	65491	Identifier	p		64880	0					
ANR	65492	Argument	DEV_NULL		64880	1					
ANR	65493	Identifier	DEV_NULL		64880	0					
ANR	65494	ExpressionStatement	"r = ""SCCS"""	771:6:20433:20443	64880	2	True				
ANR	65495	AssignmentExpression	"r = ""SCCS"""		64880	0		=			
ANR	65496	Identifier	r		64880	0					
ANR	65497	PrimaryExpression	"""SCCS"""		64880	1					
ANR	65498	ElseStatement	else		64880	0					
ANR	65499	IfStatement	"if ( ! readonly && filestat && try1 ( ""%s@@"" , filebase ) && S_ISDIR ( cstat . st_mode ) )"		64880	0					
ANR	65500	Condition	"! readonly && filestat && try1 ( ""%s@@"" , filebase ) && S_ISDIR ( cstat . st_mode )"	773:11:20462:20540	64880	0	True				
ANR	65501	AndExpression	"! readonly && filestat && try1 ( ""%s@@"" , filebase ) && S_ISDIR ( cstat . st_mode )"		64880	0		&&			
ANR	65502	UnaryOperationExpression	! readonly		64880	0					
ANR	65503	UnaryOperator	!		64880	0					
ANR	65504	Identifier	readonly		64880	1					
ANR	65505	AndExpression	"filestat && try1 ( ""%s@@"" , filebase ) && S_ISDIR ( cstat . st_mode )"		64880	1		&&			
ANR	65506	Identifier	filestat		64880	0					
ANR	65507	AndExpression	"try1 ( ""%s@@"" , filebase ) && S_ISDIR ( cstat . st_mode )"		64880	1		&&			
ANR	65508	CallExpression	"try1 ( ""%s@@"" , filebase )"		64880	0					
ANR	65509	Callee	try1		64880	0					
ANR	65510	Identifier	try1		64880	0					
ANR	65511	ArgumentList	"""%s@@"""		64880	1					
ANR	65512	Argument	"""%s@@"""		64880	0					
ANR	65513	PrimaryExpression	"""%s@@"""		64880	0					
ANR	65514	Argument	filebase		64880	1					
ANR	65515	Identifier	filebase		64880	0					
ANR	65516	CallExpression	S_ISDIR ( cstat . st_mode )		64880	1					
ANR	65517	Callee	S_ISDIR		64880	0					
ANR	65518	Identifier	S_ISDIR		64880	0					
ANR	65519	ArgumentList	cstat . st_mode		64880	1					
ANR	65520	Argument	cstat . st_mode		64880	0					
ANR	65521	MemberAccess	cstat . st_mode		64880	0					
ANR	65522	Identifier	cstat		64880	0					
ANR	65523	Identifier	st_mode		64880	1					
ANR	65524	CompoundStatement		82:4:2365:2365	64880	1					
ANR	65525	IfStatement	if ( getbuf )		64880	0					
ANR	65526	Condition	getbuf	776:10:20559:20564	64880	0	True				
ANR	65527	Identifier	getbuf		64880	0					
ANR	65528	CompoundStatement		85:3:2391:2431	64880	1					
ANR	65529	IdentifierDeclStatement	char * p = * getbuf = xmalloc ( maxgetsize ) ;	778:3:20573:20613	64880	0	True				
ANR	65530	IdentifierDecl	* p = * getbuf = xmalloc ( maxgetsize )		64880	0					
ANR	65531	IdentifierDeclType	char *		64880	0					
ANR	65532	Identifier	p		64880	1					
ANR	65533	AssignmentExpression	* p = * getbuf = xmalloc ( maxgetsize )		64880	2		=			
ANR	65534	Identifier	p		64880	0					
ANR	65535	AssignmentExpression	* getbuf = xmalloc ( maxgetsize )		64880	1		=			
ANR	65536	UnaryOperationExpression	* getbuf		64880	0					
ANR	65537	UnaryOperator	*		64880	0					
ANR	65538	Identifier	getbuf		64880	1					
ANR	65539	CallExpression	xmalloc ( maxgetsize )		64880	1					
ANR	65540	Callee	xmalloc		64880	0					
ANR	65541	Identifier	xmalloc		64880	0					
ANR	65542	ArgumentList	maxgetsize		64880	1					
ANR	65543	Argument	maxgetsize		64880	0					
ANR	65544	Identifier	maxgetsize		64880	0					
ANR	65545	ExpressionStatement	"strcpy ( p , CLEARTOOL_CO )"	779:3:20618:20642	64880	1	True				
ANR	65546	CallExpression	"strcpy ( p , CLEARTOOL_CO )"		64880	0					
ANR	65547	Callee	strcpy		64880	0					
ANR	65548	Identifier	strcpy		64880	0					
ANR	65549	ArgumentList	p		64880	1					
ANR	65550	Argument	p		64880	0					
ANR	65551	Identifier	p		64880	0					
ANR	65552	Argument	CLEARTOOL_CO		64880	1					
ANR	65553	Identifier	CLEARTOOL_CO		64880	0					
ANR	65554	ExpressionStatement	p += sizeof CLEARTOOL_CO - 1	780:3:20647:20675	64880	2	True				
ANR	65555	AssignmentExpression	p += sizeof CLEARTOOL_CO - 1		64880	0		+=			
ANR	65556	Identifier	p		64880	0					
ANR	65557	AdditiveExpression	sizeof CLEARTOOL_CO - 1		64880	1		-			
ANR	65558	SizeofExpression	sizeof CLEARTOOL_CO		64880	0					
ANR	65559	Sizeof	sizeof		64880	0					
ANR	65560	Identifier	CLEARTOOL_CO		64880	1					
ANR	65561	PrimaryExpression	1		64880	1					
ANR	65562	ExpressionStatement	"p += quote_system_arg ( p , filename )"	781:3:20680:20715	64880	3	True				
ANR	65563	AssignmentExpression	"p += quote_system_arg ( p , filename )"		64880	0		+=			
ANR	65564	Identifier	p		64880	0					
ANR	65565	CallExpression	"quote_system_arg ( p , filename )"		64880	1					
ANR	65566	Callee	quote_system_arg		64880	0					
ANR	65567	Identifier	quote_system_arg		64880	0					
ANR	65568	ArgumentList	p		64880	1					
ANR	65569	Argument	p		64880	0					
ANR	65570	Identifier	p		64880	0					
ANR	65571	Argument	filename		64880	1					
ANR	65572	Identifier	filename		64880	0					
ANR	65573	ExpressionStatement	* p = '\\0'	782:3:20720:20729	64880	4	True				
ANR	65574	AssignmentExpression	* p = '\\0'		64880	0		=			
ANR	65575	UnaryOperationExpression	* p		64880	0					
ANR	65576	UnaryOperator	*		64880	0					
ANR	65577	Identifier	p		64880	1					
ANR	65578	PrimaryExpression	'\\0'		64880	1					
ANR	65579	IfStatement	if ( diffbuf )		64880	1					
ANR	65580	Condition	diffbuf	785:10:20745:20751	64880	0	True				
ANR	65581	Identifier	diffbuf		64880	0					
ANR	65582	ExpressionStatement	* diffbuf = 0	786:1:20755:20767	64880	1	True				
ANR	65583	AssignmentExpression	* diffbuf = 0		64880	0		=			
ANR	65584	UnaryOperationExpression	* diffbuf		64880	0					
ANR	65585	UnaryOperator	*		64880	0					
ANR	65586	Identifier	diffbuf		64880	1					
ANR	65587	PrimaryExpression	0		64880	1					
ANR	65588	ExpressionStatement	"r = ""ClearCase"""	788:6:20776:20791	64880	2	True				
ANR	65589	AssignmentExpression	"r = ""ClearCase"""		64880	0		=			
ANR	65590	Identifier	r		64880	0					
ANR	65591	PrimaryExpression	"""ClearCase"""		64880	1					
ANR	65592	ElseStatement	else		64880	0					
ANR	65593	IfStatement	"if ( ! readonly && filestat && ( getenv ( ""P4PORT"" ) || getenv ( ""P4USER"" ) || getenv ( ""P4CONFIG"" ) ) )"		64880	0					
ANR	65594	Condition	"! readonly && filestat && ( getenv ( ""P4PORT"" ) || getenv ( ""P4USER"" ) || getenv ( ""P4CONFIG"" ) )"	790:11:20811:20906	64880	0	True				
ANR	65595	AndExpression	"! readonly && filestat && ( getenv ( ""P4PORT"" ) || getenv ( ""P4USER"" ) || getenv ( ""P4CONFIG"" ) )"		64880	0		&&			
ANR	65596	UnaryOperationExpression	! readonly		64880	0					
ANR	65597	UnaryOperator	!		64880	0					
ANR	65598	Identifier	readonly		64880	1					
ANR	65599	AndExpression	"filestat && ( getenv ( ""P4PORT"" ) || getenv ( ""P4USER"" ) || getenv ( ""P4CONFIG"" ) )"		64880	1		&&			
ANR	65600	Identifier	filestat		64880	0					
ANR	65601	OrExpression	"getenv ( ""P4PORT"" ) || getenv ( ""P4USER"" ) || getenv ( ""P4CONFIG"" )"		64880	1		||			
ANR	65602	CallExpression	"getenv ( ""P4PORT"" )"		64880	0					
ANR	65603	Callee	getenv		64880	0					
ANR	65604	Identifier	getenv		64880	0					
ANR	65605	ArgumentList	"""P4PORT"""		64880	1					
ANR	65606	Argument	"""P4PORT"""		64880	0					
ANR	65607	PrimaryExpression	"""P4PORT"""		64880	0					
ANR	65608	OrExpression	"getenv ( ""P4USER"" ) || getenv ( ""P4CONFIG"" )"		64880	1		||			
ANR	65609	CallExpression	"getenv ( ""P4USER"" )"		64880	0					
ANR	65610	Callee	getenv		64880	0					
ANR	65611	Identifier	getenv		64880	0					
ANR	65612	ArgumentList	"""P4USER"""		64880	1					
ANR	65613	Argument	"""P4USER"""		64880	0					
ANR	65614	PrimaryExpression	"""P4USER"""		64880	0					
ANR	65615	CallExpression	"getenv ( ""P4CONFIG"" )"		64880	1					
ANR	65616	Callee	getenv		64880	0					
ANR	65617	Identifier	getenv		64880	0					
ANR	65618	ArgumentList	"""P4CONFIG"""		64880	1					
ANR	65619	Argument	"""P4CONFIG"""		64880	0					
ANR	65620	PrimaryExpression	"""P4CONFIG"""		64880	0					
ANR	65621	CompoundStatement		99:4:2731:2731	64880	1					
ANR	65622	IfStatement	if ( getbuf )		64880	0					
ANR	65623	Condition	getbuf	793:10:20925:20930	64880	0	True				
ANR	65624	Identifier	getbuf		64880	0					
ANR	65625	CompoundStatement		102:3:2757:2797	64880	1					
ANR	65626	IdentifierDeclStatement	char * p = * getbuf = xmalloc ( maxgetsize ) ;	795:3:20939:20979	64880	0	True				
ANR	65627	IdentifierDecl	* p = * getbuf = xmalloc ( maxgetsize )		64880	0					
ANR	65628	IdentifierDeclType	char *		64880	0					
ANR	65629	Identifier	p		64880	1					
ANR	65630	AssignmentExpression	* p = * getbuf = xmalloc ( maxgetsize )		64880	2		=			
ANR	65631	Identifier	p		64880	0					
ANR	65632	AssignmentExpression	* getbuf = xmalloc ( maxgetsize )		64880	1		=			
ANR	65633	UnaryOperationExpression	* getbuf		64880	0					
ANR	65634	UnaryOperator	*		64880	0					
ANR	65635	Identifier	getbuf		64880	1					
ANR	65636	CallExpression	xmalloc ( maxgetsize )		64880	1					
ANR	65637	Callee	xmalloc		64880	0					
ANR	65638	Identifier	xmalloc		64880	0					
ANR	65639	ArgumentList	maxgetsize		64880	1					
ANR	65640	Argument	maxgetsize		64880	0					
ANR	65641	Identifier	maxgetsize		64880	0					
ANR	65642	ExpressionStatement	"strcpy ( p , PERFORCE_CO )"	796:3:20984:21007	64880	1	True				
ANR	65643	CallExpression	"strcpy ( p , PERFORCE_CO )"		64880	0					
ANR	65644	Callee	strcpy		64880	0					
ANR	65645	Identifier	strcpy		64880	0					
ANR	65646	ArgumentList	p		64880	1					
ANR	65647	Argument	p		64880	0					
ANR	65648	Identifier	p		64880	0					
ANR	65649	Argument	PERFORCE_CO		64880	1					
ANR	65650	Identifier	PERFORCE_CO		64880	0					
ANR	65651	ExpressionStatement	p += sizeof PERFORCE_CO - 1	797:3:21012:21039	64880	2	True				
ANR	65652	AssignmentExpression	p += sizeof PERFORCE_CO - 1		64880	0		+=			
ANR	65653	Identifier	p		64880	0					
ANR	65654	AdditiveExpression	sizeof PERFORCE_CO - 1		64880	1		-			
ANR	65655	SizeofExpression	sizeof PERFORCE_CO		64880	0					
ANR	65656	Sizeof	sizeof		64880	0					
ANR	65657	Identifier	PERFORCE_CO		64880	1					
ANR	65658	PrimaryExpression	1		64880	1					
ANR	65659	ExpressionStatement	"p += quote_system_arg ( p , filename )"	798:3:21044:21079	64880	3	True				
ANR	65660	AssignmentExpression	"p += quote_system_arg ( p , filename )"		64880	0		+=			
ANR	65661	Identifier	p		64880	0					
ANR	65662	CallExpression	"quote_system_arg ( p , filename )"		64880	1					
ANR	65663	Callee	quote_system_arg		64880	0					
ANR	65664	Identifier	quote_system_arg		64880	0					
ANR	65665	ArgumentList	p		64880	1					
ANR	65666	Argument	p		64880	0					
ANR	65667	Identifier	p		64880	0					
ANR	65668	Argument	filename		64880	1					
ANR	65669	Identifier	filename		64880	0					
ANR	65670	ExpressionStatement	* p = '\\0'	799:3:21084:21093	64880	4	True				
ANR	65671	AssignmentExpression	* p = '\\0'		64880	0		=			
ANR	65672	UnaryOperationExpression	* p		64880	0					
ANR	65673	UnaryOperator	*		64880	0					
ANR	65674	Identifier	p		64880	1					
ANR	65675	PrimaryExpression	'\\0'		64880	1					
ANR	65676	IfStatement	if ( diffbuf )		64880	1					
ANR	65677	Condition	diffbuf	802:10:21109:21115	64880	0	True				
ANR	65678	Identifier	diffbuf		64880	0					
ANR	65679	ExpressionStatement	* diffbuf = 0	803:1:21119:21131	64880	1	True				
ANR	65680	AssignmentExpression	* diffbuf = 0		64880	0		=			
ANR	65681	UnaryOperationExpression	* diffbuf		64880	0					
ANR	65682	UnaryOperator	*		64880	0					
ANR	65683	Identifier	diffbuf		64880	1					
ANR	65684	PrimaryExpression	0		64880	1					
ANR	65685	ExpressionStatement	"r = ""Perforce"""	805:6:21140:21154	64880	2	True				
ANR	65686	AssignmentExpression	"r = ""Perforce"""		64880	0		=			
ANR	65687	Identifier	r		64880	0					
ANR	65688	PrimaryExpression	"""Perforce"""		64880	1					
ANR	65689	ExpressionStatement	free ( trybuf )	808:2:21165:21178	64880	76	True				
ANR	65690	CallExpression	free ( trybuf )		64880	0					
ANR	65691	Callee	free		64880	0					
ANR	65692	Identifier	free		64880	0					
ANR	65693	ArgumentList	trybuf		64880	1					
ANR	65694	Argument	trybuf		64880	0					
ANR	65695	Identifier	trybuf		64880	0					
ANR	65696	ExpressionStatement	free ( filebase )	809:2:21182:21197	64880	77	True				
ANR	65697	CallExpression	free ( filebase )		64880	0					
ANR	65698	Callee	free		64880	0					
ANR	65699	Identifier	free		64880	0					
ANR	65700	ArgumentList	filebase		64880	1					
ANR	65701	Argument	filebase		64880	0					
ANR	65702	Identifier	filebase		64880	0					
ANR	65703	ExpressionStatement	free ( dir )	810:2:21201:21211	64880	78	True				
ANR	65704	CallExpression	free ( dir )		64880	0					
ANR	65705	Callee	free		64880	0					
ANR	65706	Identifier	free		64880	0					
ANR	65707	ArgumentList	dir		64880	1					
ANR	65708	Argument	dir		64880	0					
ANR	65709	Identifier	dir		64880	0					
ANR	65710	ReturnStatement	return r ;	811:2:21215:21223	64880	79	True				
ANR	65711	Identifier	r		64880	0					
ANR	65712	ReturnType	char const *		64880	1					
ANR	65713	Identifier	version_controller		64880	2					
ANR	65714	ParameterList	"char const * filename , bool readonly , struct stat const * filestat , char * * getbuf , char * * diffbuf"		64880	3					
ANR	65715	Parameter	char const * filename	692:20:18078:18097	64880	0	True				
ANR	65716	ParameterType	char const *		64880	0					
ANR	65717	Identifier	filename		64880	1					
ANR	65718	Parameter	bool readonly	692:42:18100:18112	64880	1	True				
ANR	65719	ParameterType	bool		64880	0					
ANR	65720	Identifier	readonly		64880	1					
ANR	65721	Parameter	struct stat const * filestat	693:6:18121:18147	64880	2	True				
ANR	65722	ParameterType	struct stat const *		64880	0					
ANR	65723	Identifier	filestat		64880	1					
ANR	65724	Parameter	char * * getbuf	693:35:18150:18162	64880	3	True				
ANR	65725	ParameterType	char * *		64880	0					
ANR	65726	Identifier	getbuf		64880	1					
ANR	65727	Parameter	char * * diffbuf	693:50:18165:18178	64880	4	True				
ANR	65728	ParameterType	char * *		64880	0					
ANR	65729	Identifier	diffbuf		64880	1					
ANR	65730	CFGEntryNode	ENTRY		64880		True				
ANR	65731	CFGExitNode	EXIT		64880		True				
ANR	65732	Symbol	base_name		64880						
ANR	65733	Symbol	quotelen		64880						
ANR	65734	Symbol	CHECKOUT		64880						
ANR	65735	Symbol	dir		64880						
ANR	65736	Symbol	strlen		64880						
ANR	65737	Symbol	* diffbuf		64880						
ANR	65738	Symbol	cstat . st_mode		64880						
ANR	65739	Symbol	readonly		64880						
ANR	65740	Symbol	cstat . st_dev		64880						
ANR	65741	Symbol	xmalloc		64880						
ANR	65742	Symbol	dotslash		64880						
ANR	65743	Symbol	quote_system_arg		64880						
ANR	65744	Symbol	filestat -> st_dev		64880						
ANR	65745	Symbol	cstat		64880						
ANR	65746	Symbol	CLEARTOOL_CO		64880						
ANR	65747	Symbol	cstat . st_ino		64880						
ANR	65748	Symbol	filestat -> st_ino		64880						
ANR	65749	Symbol	maxtrysize		64880						
ANR	65750	Symbol	SCCSPREFIX		64880						
ANR	65751	Symbol	diffbuf		64880						
ANR	65752	Symbol	dir_name		64880						
ANR	65753	Symbol	maxgetsize		64880						
ANR	65754	Symbol	trybuf		64880						
ANR	65755	Symbol	maxfixlen		64880						
ANR	65756	Symbol	RCSDIFF1		64880						
ANR	65757	Symbol	filename		64880						
ANR	65758	Symbol	GET		64880						
ANR	65759	Symbol	dirlen		64880						
ANR	65760	Symbol	* getbuf		64880						
ANR	65761	Symbol	getbuf		64880						
ANR	65762	Symbol	PERFORCE_CO		64880						
ANR	65763	Symbol	* filestat		64880						
ANR	65764	Symbol	CHECKOUT_LOCKED		64880						
ANR	65765	Symbol	getenv		64880						
ANR	65766	Symbol	try1		64880						
ANR	65767	Symbol	try2		64880						
ANR	65768	Symbol	filebase		64880						
ANR	65769	Symbol	RCSSUFFIX		64880						
ANR	65770	Symbol	filestat		64880						
ANR	65771	Symbol	maxdiffsize		64880						
ANR	65772	Symbol	* p ++		64880						
ANR	65773	Symbol	SCCSDIFF1		64880						
ANR	65774	Symbol	DEV_NULL		64880						
ANR	65775	Symbol	SCCSDIFF2		64880						
ANR	65776	Symbol	p		64880						
ANR	65777	Symbol	r		64880						
ANR	65778	Symbol	* filename		64880						
ANR	65779	Symbol	* p		64880						
ANR	65780	Symbol	S_ISDIR		64880						
ANR	65781	Symbol	GET_LOCKED		64880						
ANR	65782	Function	version_get	819:0:21503:22337							
ANR	65783	FunctionDef	"version_get (char const * filename , char const * cs , bool exists , bool readonly , char const * getbuf , struct stat * filestat)"		65782	0					
ANR	65784	CompoundStatement		822:0:21636:22337	65782	0					
ANR	65785	IfStatement	if ( patch_get < 0 )		65782	0					
ANR	65786	Condition	patch_get < 0	823:6:21644:21656	65782	0	True				
ANR	65787	RelationalExpression	patch_get < 0		65782	0		<			
ANR	65788	Identifier	patch_get		65782	0					
ANR	65789	PrimaryExpression	0		65782	1					
ANR	65790	CompoundStatement		3:4:26:26	65782	1					
ANR	65791	ExpressionStatement	"ask ( ""Get file %s from %s%s? [y] "" , quotearg ( filename ) , cs , readonly ? """" : "" with lock"" )"	825:6:21671:21765	65782	0	True				
ANR	65792	CallExpression	"ask ( ""Get file %s from %s%s? [y] "" , quotearg ( filename ) , cs , readonly ? """" : "" with lock"" )"		65782	0					
ANR	65793	Callee	ask		65782	0					
ANR	65794	Identifier	ask		65782	0					
ANR	65795	ArgumentList	"""Get file %s from %s%s? [y] """		65782	1					
ANR	65796	Argument	"""Get file %s from %s%s? [y] """		65782	0					
ANR	65797	PrimaryExpression	"""Get file %s from %s%s? [y] """		65782	0					
ANR	65798	Argument	quotearg ( filename )		65782	1					
ANR	65799	CallExpression	quotearg ( filename )		65782	0					
ANR	65800	Callee	quotearg		65782	0					
ANR	65801	Identifier	quotearg		65782	0					
ANR	65802	ArgumentList	filename		65782	1					
ANR	65803	Argument	filename		65782	0					
ANR	65804	Identifier	filename		65782	0					
ANR	65805	Argument	cs		65782	2					
ANR	65806	Identifier	cs		65782	0					
ANR	65807	Argument	"readonly ? """" : "" with lock"""		65782	3					
ANR	65808	ConditionalExpression	"readonly ? """" : "" with lock"""		65782	0					
ANR	65809	Condition	readonly		65782	0					
ANR	65810	Identifier	readonly		65782	0					
ANR	65811	PrimaryExpression	""""""		65782	1					
ANR	65812	PrimaryExpression	""" with lock"""		65782	2					
ANR	65813	IfStatement	if ( * buf == 'n' )		65782	1					
ANR	65814	Condition	* buf == 'n'	827:10:21777:21787	65782	0	True				
ANR	65815	EqualityExpression	* buf == 'n'		65782	0		==			
ANR	65816	UnaryOperationExpression	* buf		65782	0					
ANR	65817	UnaryOperator	*		65782	0					
ANR	65818	Identifier	buf		65782	1					
ANR	65819	PrimaryExpression	'n'		65782	1					
ANR	65820	ReturnStatement	return 0 ;	828:1:21791:21799	65782	1	True				
ANR	65821	PrimaryExpression	0		65782	0					
ANR	65822	IfStatement	if ( dry_run )		65782	1					
ANR	65823	Condition	dry_run	831:6:21814:21820	65782	0	True				
ANR	65824	Identifier	dry_run		65782	0					
ANR	65825	CompoundStatement		11:4:190:190	65782	1					
ANR	65826	IfStatement	if ( ! exists )		65782	0					
ANR	65827	Condition	! exists	833:10:21839:21846	65782	0	True				
ANR	65828	UnaryOperationExpression	! exists		65782	0					
ANR	65829	UnaryOperator	!		65782	0					
ANR	65830	Identifier	exists		65782	1					
ANR	65831	ExpressionStatement	"fatal ( ""can't do dry run on nonexistent version-controlled file %s; invoke '%s' and try again"" , quotearg ( filename ) , getbuf )"	834:1:21850:21982	65782	1	True				
ANR	65832	CallExpression	"fatal ( ""can't do dry run on nonexistent version-controlled file %s; invoke '%s' and try again"" , quotearg ( filename ) , getbuf )"		65782	0					
ANR	65833	Callee	fatal		65782	0					
ANR	65834	Identifier	fatal		65782	0					
ANR	65835	ArgumentList	"""can't do dry run on nonexistent version-controlled file %s; invoke '%s' and try again"""		65782	1					
ANR	65836	Argument	"""can't do dry run on nonexistent version-controlled file %s; invoke '%s' and try again"""		65782	0					
ANR	65837	PrimaryExpression	"""can't do dry run on nonexistent version-controlled file %s; invoke '%s' and try again"""		65782	0					
ANR	65838	Argument	quotearg ( filename )		65782	1					
ANR	65839	CallExpression	quotearg ( filename )		65782	0					
ANR	65840	Callee	quotearg		65782	0					
ANR	65841	Identifier	quotearg		65782	0					
ANR	65842	ArgumentList	filename		65782	1					
ANR	65843	Argument	filename		65782	0					
ANR	65844	Identifier	filename		65782	0					
ANR	65845	Argument	getbuf		65782	2					
ANR	65846	Identifier	getbuf		65782	0					
ANR	65847	ElseStatement	else		65782	0					
ANR	65848	CompoundStatement		17:4:364:364	65782	0					
ANR	65849	IfStatement	if ( verbosity == VERBOSE )		65782	0					
ANR	65850	Condition	verbosity == VERBOSE	839:10:22013:22032	65782	0	True				
ANR	65851	EqualityExpression	verbosity == VERBOSE		65782	0		==			
ANR	65852	Identifier	verbosity		65782	0					
ANR	65853	Identifier	VERBOSE		65782	1					
ANR	65854	ExpressionStatement	"say ( ""Getting file %s from %s%s...\\n"" , quotearg ( filename ) , cs , readonly ? """" : "" with lock"" )"	840:1:22036:22135	65782	1	True				
ANR	65855	CallExpression	"say ( ""Getting file %s from %s%s...\\n"" , quotearg ( filename ) , cs , readonly ? """" : "" with lock"" )"		65782	0					
ANR	65856	Callee	say		65782	0					
ANR	65857	Identifier	say		65782	0					
ANR	65858	ArgumentList	"""Getting file %s from %s%s...\\n"""		65782	1					
ANR	65859	Argument	"""Getting file %s from %s%s...\\n"""		65782	0					
ANR	65860	PrimaryExpression	"""Getting file %s from %s%s...\\n"""		65782	0					
ANR	65861	Argument	quotearg ( filename )		65782	1					
ANR	65862	CallExpression	quotearg ( filename )		65782	0					
ANR	65863	Callee	quotearg		65782	0					
ANR	65864	Identifier	quotearg		65782	0					
ANR	65865	ArgumentList	filename		65782	1					
ANR	65866	Argument	filename		65782	0					
ANR	65867	Identifier	filename		65782	0					
ANR	65868	Argument	cs		65782	2					
ANR	65869	Identifier	cs		65782	0					
ANR	65870	Argument	"readonly ? """" : "" with lock"""		65782	3					
ANR	65871	ConditionalExpression	"readonly ? """" : "" with lock"""		65782	0					
ANR	65872	Condition	readonly		65782	0					
ANR	65873	Identifier	readonly		65782	0					
ANR	65874	PrimaryExpression	""""""		65782	1					
ANR	65875	PrimaryExpression	""" with lock"""		65782	2					
ANR	65876	IfStatement	if ( systemic ( getbuf ) != 0 )		65782	1					
ANR	65877	Condition	systemic ( getbuf ) != 0	842:10:22147:22168	65782	0	True				
ANR	65878	EqualityExpression	systemic ( getbuf ) != 0		65782	0		!=			
ANR	65879	CallExpression	systemic ( getbuf )		65782	0					
ANR	65880	Callee	systemic		65782	0					
ANR	65881	Identifier	systemic		65782	0					
ANR	65882	ArgumentList	getbuf		65782	1					
ANR	65883	Argument	getbuf		65782	0					
ANR	65884	Identifier	getbuf		65782	0					
ANR	65885	PrimaryExpression	0		65782	1					
ANR	65886	ExpressionStatement	"fatal ( ""Can't get file %s from %s"" , quotearg ( filename ) , cs )"	843:1:22172:22232	65782	1	True				
ANR	65887	CallExpression	"fatal ( ""Can't get file %s from %s"" , quotearg ( filename ) , cs )"		65782	0					
ANR	65888	Callee	fatal		65782	0					
ANR	65889	Identifier	fatal		65782	0					
ANR	65890	ArgumentList	"""Can't get file %s from %s"""		65782	1					
ANR	65891	Argument	"""Can't get file %s from %s"""		65782	0					
ANR	65892	PrimaryExpression	"""Can't get file %s from %s"""		65782	0					
ANR	65893	Argument	quotearg ( filename )		65782	1					
ANR	65894	CallExpression	quotearg ( filename )		65782	0					
ANR	65895	Callee	quotearg		65782	0					
ANR	65896	Identifier	quotearg		65782	0					
ANR	65897	ArgumentList	filename		65782	1					
ANR	65898	Argument	filename		65782	0					
ANR	65899	Identifier	filename		65782	0					
ANR	65900	Argument	cs		65782	2					
ANR	65901	Identifier	cs		65782	0					
ANR	65902	IfStatement	"if ( safe_stat ( filename , filestat ) != 0 )"		65782	2					
ANR	65903	Condition	"safe_stat ( filename , filestat ) != 0"	844:10:22244:22278	65782	0	True				
ANR	65904	EqualityExpression	"safe_stat ( filename , filestat ) != 0"		65782	0		!=			
ANR	65905	CallExpression	"safe_stat ( filename , filestat )"		65782	0					
ANR	65906	Callee	safe_stat		65782	0					
ANR	65907	Identifier	safe_stat		65782	0					
ANR	65908	ArgumentList	filename		65782	1					
ANR	65909	Argument	filename		65782	0					
ANR	65910	Identifier	filename		65782	0					
ANR	65911	Argument	filestat		65782	1					
ANR	65912	Identifier	filestat		65782	0					
ANR	65913	PrimaryExpression	0		65782	1					
ANR	65914	ExpressionStatement	"pfatal ( ""%s"" , quotearg ( filename ) )"	845:1:22282:22316	65782	1	True				
ANR	65915	CallExpression	"pfatal ( ""%s"" , quotearg ( filename ) )"		65782	0					
ANR	65916	Callee	pfatal		65782	0					
ANR	65917	Identifier	pfatal		65782	0					
ANR	65918	ArgumentList	"""%s"""		65782	1					
ANR	65919	Argument	"""%s"""		65782	0					
ANR	65920	PrimaryExpression	"""%s"""		65782	0					
ANR	65921	Argument	quotearg ( filename )		65782	1					
ANR	65922	CallExpression	quotearg ( filename )		65782	0					
ANR	65923	Callee	quotearg		65782	0					
ANR	65924	Identifier	quotearg		65782	0					
ANR	65925	ArgumentList	filename		65782	1					
ANR	65926	Argument	filename		65782	0					
ANR	65927	Identifier	filename		65782	0					
ANR	65928	ReturnStatement	return 1 ;	848:2:22327:22335	65782	2	True				
ANR	65929	PrimaryExpression	1		65782	0					
ANR	65930	ReturnType	bool		65782	1					
ANR	65931	Identifier	version_get		65782	2					
ANR	65932	ParameterList	"char const * filename , char const * cs , bool exists , bool readonly , char const * getbuf , struct stat * filestat"		65782	3					
ANR	65933	Parameter	char const * filename	820:13:21521:21540	65782	0	True				
ANR	65934	ParameterType	char const *		65782	0					
ANR	65935	Identifier	filename		65782	1					
ANR	65936	Parameter	char const * cs	820:35:21543:21556	65782	1	True				
ANR	65937	ParameterType	char const *		65782	0					
ANR	65938	Identifier	cs		65782	1					
ANR	65939	Parameter	bool exists	820:51:21559:21569	65782	2	True				
ANR	65940	ParameterType	bool		65782	0					
ANR	65941	Identifier	exists		65782	1					
ANR	65942	Parameter	bool readonly	820:64:21572:21584	65782	3	True				
ANR	65943	ParameterType	bool		65782	0					
ANR	65944	Identifier	readonly		65782	1					
ANR	65945	Parameter	char const * getbuf	821:6:21593:21610	65782	4	True				
ANR	65946	ParameterType	char const *		65782	0					
ANR	65947	Identifier	getbuf		65782	1					
ANR	65948	Parameter	struct stat * filestat	821:26:21613:21633	65782	5	True				
ANR	65949	ParameterType	struct stat *		65782	0					
ANR	65950	Identifier	filestat		65782	1					
ANR	65951	CFGEntryNode	ENTRY		65782		True				
ANR	65952	CFGExitNode	EXIT		65782		True				
ANR	65953	Symbol	systemic		65782						
ANR	65954	Symbol	* buf		65782						
ANR	65955	Symbol	quotearg		65782						
ANR	65956	Symbol	filestat		65782						
ANR	65957	Symbol	cs		65782						
ANR	65958	Symbol	buf		65782						
ANR	65959	Symbol	filename		65782						
ANR	65960	Symbol	safe_stat		65782						
ANR	65961	Symbol	readonly		65782						
ANR	65962	Symbol	patch_get		65782						
ANR	65963	Symbol	getbuf		65782						
ANR	65964	Symbol	exists		65782						
ANR	65965	Symbol	dry_run		65782						
ANR	65966	Symbol	VERBOSE		65782						
ANR	65967	Symbol	verbosity		65782						
ANR	65968	Function	savebuf	853:0:22384:22611							
ANR	65969	FunctionDef	"savebuf (char const * s , size_t size)"		65968	0					
ANR	65970	CompoundStatement		855:0:22428:22611	65968	0					
ANR	65971	IdentifierDeclStatement	char * rv ;	856:2:22432:22440	65968	0	True				
ANR	65972	IdentifierDecl	* rv		65968	0					
ANR	65973	IdentifierDeclType	char *		65968	0					
ANR	65974	Identifier	rv		65968	1					
ANR	65975	IfStatement	if ( ! size )		65968	1					
ANR	65976	Condition	! size	858:6:22449:22454	65968	0	True				
ANR	65977	UnaryOperationExpression	! size		65968	0					
ANR	65978	UnaryOperator	!		65968	0					
ANR	65979	Identifier	size		65968	1					
ANR	65980	ReturnStatement	return NULL ;	859:4:22461:22472	65968	1	True				
ANR	65981	Identifier	NULL		65968	0					
ANR	65982	ExpressionStatement	rv = malloc ( size )	861:2:22477:22495	65968	2	True				
ANR	65983	AssignmentExpression	rv = malloc ( size )		65968	0		=			
ANR	65984	Identifier	rv		65968	0					
ANR	65985	CallExpression	malloc ( size )		65968	1					
ANR	65986	Callee	malloc		65968	0					
ANR	65987	Identifier	malloc		65968	0					
ANR	65988	ArgumentList	size		65968	1					
ANR	65989	Argument	size		65968	0					
ANR	65990	Identifier	size		65968	0					
ANR	65991	IfStatement	if ( ! rv )		65968	3					
ANR	65992	Condition	! rv	863:6:22504:22507	65968	0	True				
ANR	65993	UnaryOperationExpression	! rv		65968	0					
ANR	65994	UnaryOperator	!		65968	0					
ANR	65995	Identifier	rv		65968	1					
ANR	65996	CompoundStatement		10:4:85:85	65968	1					
ANR	65997	IfStatement	if ( ! using_plan_a )		65968	0					
ANR	65998	Condition	! using_plan_a	865:10:22526:22539	65968	0	True				
ANR	65999	UnaryOperationExpression	! using_plan_a		65968	0					
ANR	66000	UnaryOperator	!		65968	0					
ANR	66001	Identifier	using_plan_a		65968	1					
ANR	66002	ExpressionStatement	xalloc_die ( )	866:1:22543:22556	65968	1	True				
ANR	66003	CallExpression	xalloc_die ( )		65968	0					
ANR	66004	Callee	xalloc_die		65968	0					
ANR	66005	Identifier	xalloc_die		65968	0					
ANR	66006	ArgumentList			65968	1					
ANR	66007	ElseStatement	else		65968	0					
ANR	66008	ExpressionStatement	"memcpy ( rv , s , size )"	869:4:22575:22595	65968	0	True				
ANR	66009	CallExpression	"memcpy ( rv , s , size )"		65968	0					
ANR	66010	Callee	memcpy		65968	0					
ANR	66011	Identifier	memcpy		65968	0					
ANR	66012	ArgumentList	rv		65968	1					
ANR	66013	Argument	rv		65968	0					
ANR	66014	Identifier	rv		65968	0					
ANR	66015	Argument	s		65968	1					
ANR	66016	Identifier	s		65968	0					
ANR	66017	Argument	size		65968	2					
ANR	66018	Identifier	size		65968	0					
ANR	66019	ReturnStatement	return rv ;	871:2:22600:22609	65968	4	True				
ANR	66020	Identifier	rv		65968	0					
ANR	66021	ReturnType	char *		65968	1					
ANR	66022	Identifier	savebuf		65968	2					
ANR	66023	ParameterList	"char const * s , size_t size"		65968	3					
ANR	66024	Parameter	char const * s	854:9:22400:22412	65968	0	True				
ANR	66025	ParameterType	char const *		65968	0					
ANR	66026	Identifier	s		65968	1					
ANR	66027	Parameter	size_t size	854:24:22415:22425	65968	1	True				
ANR	66028	ParameterType	size_t		65968	0					
ANR	66029	Identifier	size		65968	1					
ANR	66030	CFGEntryNode	ENTRY		65968		True				
ANR	66031	CFGExitNode	EXIT		65968		True				
ANR	66032	Symbol	malloc		65968						
ANR	66033	Symbol	s		65968						
ANR	66034	Symbol	NULL		65968						
ANR	66035	Symbol	size		65968						
ANR	66036	Symbol	rv		65968						
ANR	66037	Symbol	using_plan_a		65968						
ANR	66038	Function	savestr	874:0:22614:22685							
ANR	66039	FunctionDef	savestr (char const * s)		66038	0					
ANR	66040	CompoundStatement		876:0:22645:22685	66038	0					
ANR	66041	ReturnStatement	"return savebuf ( s , strlen ( s ) + 1 ) ;"	877:2:22649:22683	66038	0	True				
ANR	66042	CallExpression	"savebuf ( s , strlen ( s ) + 1 )"		66038	0					
ANR	66043	Callee	savebuf		66038	0					
ANR	66044	Identifier	savebuf		66038	0					
ANR	66045	ArgumentList	s		66038	1					
ANR	66046	Argument	s		66038	0					
ANR	66047	Identifier	s		66038	0					
ANR	66048	Argument	strlen ( s ) + 1		66038	1					
ANR	66049	AdditiveExpression	strlen ( s ) + 1		66038	0		+			
ANR	66050	CallExpression	strlen ( s )		66038	0					
ANR	66051	Callee	strlen		66038	0					
ANR	66052	Identifier	strlen		66038	0					
ANR	66053	ArgumentList	s		66038	1					
ANR	66054	Argument	s		66038	0					
ANR	66055	Identifier	s		66038	0					
ANR	66056	PrimaryExpression	1		66038	1					
ANR	66057	ReturnType	char *		66038	1					
ANR	66058	Identifier	savestr		66038	2					
ANR	66059	ParameterList	char const * s		66038	3					
ANR	66060	Parameter	char const * s	875:9:22630:22642	66038	0	True				
ANR	66061	ParameterType	char const *		66038	0					
ANR	66062	Identifier	s		66038	1					
ANR	66063	CFGEntryNode	ENTRY		66038		True				
ANR	66064	CFGExitNode	EXIT		66038		True				
ANR	66065	Symbol	strlen		66038						
ANR	66066	Symbol	s		66038						
ANR	66067	Symbol	savebuf		66038						
ANR	66068	Function	remove_prefix	880:0:22688:22817							
ANR	66069	FunctionDef	"remove_prefix (char * p , size_t prefixlen)"		66068	0					
ANR	66070	CompoundStatement		882:0:22735:22817	66068	0					
ANR	66071	IdentifierDeclStatement	char const * s = p + prefixlen ;	883:2:22739:22768	66068	0	True				
ANR	66072	IdentifierDecl	* s = p + prefixlen		66068	0					
ANR	66073	IdentifierDeclType	char const *		66068	0					
ANR	66074	Identifier	s		66068	1					
ANR	66075	AssignmentExpression	* s = p + prefixlen		66068	2		=			
ANR	66076	Identifier	s		66068	0					
ANR	66077	AdditiveExpression	p + prefixlen		66068	1		+			
ANR	66078	Identifier	p		66068	0					
ANR	66079	Identifier	prefixlen		66068	1					
ANR	66080	WhileStatement	while ( ( * p ++ = * s ++ ) )		66068	1					
ANR	66081	Condition	* p ++ = * s ++	884:9:22779:22791	66068	0	True				
ANR	66082	AssignmentExpression	* p ++ = * s ++		66068	0		=			
ANR	66083	UnaryOperationExpression	* p ++		66068	0					
ANR	66084	UnaryOperator	*		66068	0					
ANR	66085	PostIncDecOperationExpression	p ++		66068	1					
ANR	66086	Identifier	p		66068	0					
ANR	66087	IncDec	++		66068	1					
ANR	66088	UnaryOperationExpression	* s ++		66068	1					
ANR	66089	UnaryOperator	*		66068	0					
ANR	66090	PostIncDecOperationExpression	s ++		66068	1					
ANR	66091	Identifier	s		66068	0					
ANR	66092	IncDec	++		66068	1					
ANR	66093	ExpressionStatement		885:21:22815:22815	66068	1	True				
ANR	66094	ReturnType	void		66068	1					
ANR	66095	Identifier	remove_prefix		66068	2					
ANR	66096	ParameterList	"char * p , size_t prefixlen"		66068	3					
ANR	66097	Parameter	char * p	881:15:22708:22714	66068	0	True				
ANR	66098	ParameterType	char *		66068	0					
ANR	66099	Identifier	p		66068	1					
ANR	66100	Parameter	size_t prefixlen	881:24:22717:22732	66068	1	True				
ANR	66101	ParameterType	size_t		66068	0					
ANR	66102	Identifier	prefixlen		66068	1					
ANR	66103	CFGEntryNode	ENTRY		66068		True				
ANR	66104	CFGExitNode	EXIT		66068		True				
ANR	66105	Symbol	p		66068						
ANR	66106	Symbol	* s ++		66068						
ANR	66107	Symbol	s		66068						
ANR	66108	Symbol	* p ++		66068						
ANR	66109	Symbol	prefixlen		66068						
ANR	66110	Function	format_linenum	888:0:22820:23162							
ANR	66111	FunctionDef	"format_linenum (char numbuf [ LINENUM_LENGTH_BOUND + 1 ] , lin n)"		66110	0					
ANR	66112	CompoundStatement		890:0:22889:23162	66110	0					
ANR	66113	IdentifierDeclStatement	char * p = numbuf + LINENUM_LENGTH_BOUND ;	891:2:22893:22932	66110	0	True				
ANR	66114	IdentifierDecl	* p = numbuf + LINENUM_LENGTH_BOUND		66110	0					
ANR	66115	IdentifierDeclType	char *		66110	0					
ANR	66116	Identifier	p		66110	1					
ANR	66117	AssignmentExpression	* p = numbuf + LINENUM_LENGTH_BOUND		66110	2		=			
ANR	66118	Identifier	p		66110	0					
ANR	66119	AdditiveExpression	numbuf + LINENUM_LENGTH_BOUND		66110	1		+			
ANR	66120	Identifier	numbuf		66110	0					
ANR	66121	Identifier	LINENUM_LENGTH_BOUND		66110	1					
ANR	66122	ExpressionStatement	* p = '\\0'	892:2:22936:22945	66110	1	True				
ANR	66123	AssignmentExpression	* p = '\\0'		66110	0		=			
ANR	66124	UnaryOperationExpression	* p		66110	0					
ANR	66125	UnaryOperator	*		66110	0					
ANR	66126	Identifier	p		66110	1					
ANR	66127	PrimaryExpression	'\\0'		66110	1					
ANR	66128	IfStatement	if ( n < 0 )		66110	2					
ANR	66129	Condition	n < 0	894:6:22954:22958	66110	0	True				
ANR	66130	RelationalExpression	n < 0		66110	0		<			
ANR	66131	Identifier	n		66110	0					
ANR	66132	PrimaryExpression	0		66110	1					
ANR	66133	CompoundStatement		6:4:75:75	66110	1					
ANR	66134	DoStatement	do		66110	0					
ANR	66135	ExpressionStatement	* -- p = '0' - ( int ) ( n % 10 )	897:1:22977:23004	66110	0	True				
ANR	66136	AssignmentExpression	* -- p = '0' - ( int ) ( n % 10 )		66110	0		=			
ANR	66137	UnaryOperationExpression	* -- p		66110	0					
ANR	66138	UnaryOperator	*		66110	0					
ANR	66139	UnaryExpression	-- p		66110	1					
ANR	66140	IncDec	--		66110	0					
ANR	66141	Identifier	p		66110	1					
ANR	66142	AdditiveExpression	'0' - ( int ) ( n % 10 )		66110	1		-			
ANR	66143	PrimaryExpression	'0'		66110	0					
ANR	66144	CastExpression	( int ) ( n % 10 )		66110	1					
ANR	66145	CastTarget	int		66110	0					
ANR	66146	MultiplicativeExpression	n % 10		66110	1		%			
ANR	66147	Identifier	n		66110	0					
ANR	66148	PrimaryExpression	10		66110	1					
ANR	66149	Condition	( n /= 10 ) != 0	898:13:23019:23032	66110	1	True				
ANR	66150	EqualityExpression	( n /= 10 ) != 0		66110	0		!=			
ANR	66151	AssignmentExpression	n /= 10		66110	0		/=			
ANR	66152	Identifier	n		66110	0					
ANR	66153	PrimaryExpression	10		66110	1					
ANR	66154	PrimaryExpression	0		66110	1					
ANR	66155	ExpressionStatement	* -- p = '-'	900:6:23043:23053	66110	1	True				
ANR	66156	AssignmentExpression	* -- p = '-'		66110	0		=			
ANR	66157	UnaryOperationExpression	* -- p		66110	0					
ANR	66158	UnaryOperator	*		66110	0					
ANR	66159	UnaryExpression	-- p		66110	1					
ANR	66160	IncDec	--		66110	0					
ANR	66161	Identifier	p		66110	1					
ANR	66162	PrimaryExpression	'-'		66110	1					
ANR	66163	ElseStatement	else		66110	0					
ANR	66164	CompoundStatement		14:4:182:182	66110	0					
ANR	66165	DoStatement	do		66110	0					
ANR	66166	ExpressionStatement	* -- p = '0' + ( int ) ( n % 10 )	905:1:23084:23111	66110	0	True				
ANR	66167	AssignmentExpression	* -- p = '0' + ( int ) ( n % 10 )		66110	0		=			
ANR	66168	UnaryOperationExpression	* -- p		66110	0					
ANR	66169	UnaryOperator	*		66110	0					
ANR	66170	UnaryExpression	-- p		66110	1					
ANR	66171	IncDec	--		66110	0					
ANR	66172	Identifier	p		66110	1					
ANR	66173	AdditiveExpression	'0' + ( int ) ( n % 10 )		66110	1		+			
ANR	66174	PrimaryExpression	'0'		66110	0					
ANR	66175	CastExpression	( int ) ( n % 10 )		66110	1					
ANR	66176	CastTarget	int		66110	0					
ANR	66177	MultiplicativeExpression	n % 10		66110	1		%			
ANR	66178	Identifier	n		66110	0					
ANR	66179	PrimaryExpression	10		66110	1					
ANR	66180	Condition	( n /= 10 ) != 0	906:13:23126:23139	66110	1	True				
ANR	66181	EqualityExpression	( n /= 10 ) != 0		66110	0		!=			
ANR	66182	AssignmentExpression	n /= 10		66110	0		/=			
ANR	66183	Identifier	n		66110	0					
ANR	66184	PrimaryExpression	10		66110	1					
ANR	66185	PrimaryExpression	0		66110	1					
ANR	66186	ReturnStatement	return p ;	909:2:23152:23160	66110	3	True				
ANR	66187	Identifier	p		66110	0					
ANR	66188	ReturnType	char *		66110	1					
ANR	66189	Identifier	format_linenum		66110	2					
ANR	66190	ParameterList	"char numbuf [ LINENUM_LENGTH_BOUND + 1 ] , lin n"		66110	3					
ANR	66191	Parameter	char numbuf [ LINENUM_LENGTH_BOUND + 1 ]	889:16:22843:22879	66110	0	True				
ANR	66192	ParameterType	char [ LINENUM_LENGTH_BOUND + 1 ]		66110	0					
ANR	66193	Identifier	numbuf		66110	1					
ANR	66194	Parameter	lin n	889:55:22882:22886	66110	1	True				
ANR	66195	ParameterType	lin		66110	0					
ANR	66196	Identifier	n		66110	1					
ANR	66197	CFGEntryNode	ENTRY		66110		True				
ANR	66198	CFGExitNode	EXIT		66110		True				
ANR	66199	Symbol	p		66110						
ANR	66200	Symbol	LINENUM_LENGTH_BOUND		66110						
ANR	66201	Symbol	numbuf		66110						
ANR	66202	Symbol	* -- p		66110						
ANR	66203	Symbol	* p		66110						
ANR	66204	Symbol	n		66110						
ANR	66205	Function	fatal	914:0:23203:23444							
ANR	66206	FunctionDef	fatal (char const * format)		66205	0					
ANR	66207	CompoundStatement		916:0:23240:23444	66205	0					
ANR	66208	IdentifierDeclStatement	va_list args ;	917:2:23244:23256	66205	0	True				
ANR	66209	IdentifierDecl	args		66205	0					
ANR	66210	IdentifierDeclType	va_list		66205	0					
ANR	66211	Identifier	args		66205	1					
ANR	66212	ExpressionStatement	"fprintf ( stderr , ""%s: **** "" , program_name )"	918:2:23260:23303	66205	1	True				
ANR	66213	CallExpression	"fprintf ( stderr , ""%s: **** "" , program_name )"		66205	0					
ANR	66214	Callee	fprintf		66205	0					
ANR	66215	Identifier	fprintf		66205	0					
ANR	66216	ArgumentList	stderr		66205	1					
ANR	66217	Argument	stderr		66205	0					
ANR	66218	Identifier	stderr		66205	0					
ANR	66219	Argument	"""%s: **** """		66205	1					
ANR	66220	PrimaryExpression	"""%s: **** """		66205	0					
ANR	66221	Argument	program_name		66205	2					
ANR	66222	Identifier	program_name		66205	0					
ANR	66223	ExpressionStatement	"va_start ( args , format )"	919:2:23307:23330	66205	2	True				
ANR	66224	CallExpression	"va_start ( args , format )"		66205	0					
ANR	66225	Callee	va_start		66205	0					
ANR	66226	Identifier	va_start		66205	0					
ANR	66227	ArgumentList	args		66205	1					
ANR	66228	Argument	args		66205	0					
ANR	66229	Identifier	args		66205	0					
ANR	66230	Argument	format		66205	1					
ANR	66231	Identifier	format		66205	0					
ANR	66232	ExpressionStatement	"vfprintf ( stderr , format , args )"	920:2:23334:23365	66205	3	True				
ANR	66233	CallExpression	"vfprintf ( stderr , format , args )"		66205	0					
ANR	66234	Callee	vfprintf		66205	0					
ANR	66235	Identifier	vfprintf		66205	0					
ANR	66236	ArgumentList	stderr		66205	1					
ANR	66237	Argument	stderr		66205	0					
ANR	66238	Identifier	stderr		66205	0					
ANR	66239	Argument	format		66205	1					
ANR	66240	Identifier	format		66205	0					
ANR	66241	Argument	args		66205	2					
ANR	66242	Identifier	args		66205	0					
ANR	66243	ExpressionStatement	va_end ( args )	921:2:23369:23382	66205	4	True				
ANR	66244	CallExpression	va_end ( args )		66205	0					
ANR	66245	Callee	va_end		66205	0					
ANR	66246	Identifier	va_end		66205	0					
ANR	66247	ArgumentList	args		66205	1					
ANR	66248	Argument	args		66205	0					
ANR	66249	Identifier	args		66205	0					
ANR	66250	ExpressionStatement	"putc ( '\\n' , stderr )"	922:2:23386:23405	66205	5	True				
ANR	66251	CallExpression	"putc ( '\\n' , stderr )"		66205	0					
ANR	66252	Callee	putc		66205	0					
ANR	66253	Identifier	putc		66205	0					
ANR	66254	ArgumentList	'\\n'		66205	1					
ANR	66255	Argument	'\\n'		66205	0					
ANR	66256	PrimaryExpression	'\\n'		66205	0					
ANR	66257	Argument	stderr		66205	1					
ANR	66258	Identifier	stderr		66205	0					
ANR	66259	ExpressionStatement	fflush ( stderr )	923:2:23409:23424	66205	6	True				
ANR	66260	CallExpression	fflush ( stderr )		66205	0					
ANR	66261	Callee	fflush		66205	0					
ANR	66262	Identifier	fflush		66205	0					
ANR	66263	ArgumentList	stderr		66205	1					
ANR	66264	Argument	stderr		66205	0					
ANR	66265	Identifier	stderr		66205	0					
ANR	66266	ExpressionStatement	fatal_exit ( 0 )	924:2:23428:23442	66205	7	True				
ANR	66267	CallExpression	fatal_exit ( 0 )		66205	0					
ANR	66268	Callee	fatal_exit		66205	0					
ANR	66269	Identifier	fatal_exit		66205	0					
ANR	66270	ArgumentList	0		66205	1					
ANR	66271	Argument	0		66205	0					
ANR	66272	PrimaryExpression	0		66205	0					
ANR	66273	ReturnType	void		66205	1					
ANR	66274	Identifier	fatal		66205	2					
ANR	66275	ParameterList	char const * format		66205	3					
ANR	66276	Parameter	char const * format	915:7:23215:23232	66205	0	True				
ANR	66277	ParameterType	char const *		66205	0					
ANR	66278	Identifier	format		66205	1					
ANR	66279	CFGEntryNode	ENTRY		66205		True				
ANR	66280	CFGExitNode	EXIT		66205		True				
ANR	66281	Symbol	args		66205						
ANR	66282	Symbol	program_name		66205						
ANR	66283	Symbol	format		66205						
ANR	66284	Symbol	stderr		66205						
ANR	66285	Function	xalloc_die	927:0:23447:23499							
ANR	66286	FunctionDef	xalloc_die ()		66285	0					
ANR	66287	CompoundStatement		929:0:23470:23499	66285	0					
ANR	66288	ExpressionStatement	"fatal ( ""out of memory"" )"	930:2:23474:23497	66285	0	True				
ANR	66289	CallExpression	"fatal ( ""out of memory"" )"		66285	0					
ANR	66290	Callee	fatal		66285	0					
ANR	66291	Identifier	fatal		66285	0					
ANR	66292	ArgumentList	"""out of memory"""		66285	1					
ANR	66293	Argument	"""out of memory"""		66285	0					
ANR	66294	PrimaryExpression	"""out of memory"""		66285	0					
ANR	66295	ReturnType	void		66285	1					
ANR	66296	Identifier	xalloc_die		66285	2					
ANR	66297	ParameterList			66285	3					
ANR	66298	CFGEntryNode	ENTRY		66285		True				
ANR	66299	CFGExitNode	EXIT		66285		True				
ANR	66300	Function	read_fatal	933:0:23502:23552							
ANR	66301	FunctionDef	read_fatal ()		66300	0					
ANR	66302	CompoundStatement		935:0:23525:23552	66300	0					
ANR	66303	ExpressionStatement	"pfatal ( ""read error"" )"	936:2:23529:23550	66300	0	True				
ANR	66304	CallExpression	"pfatal ( ""read error"" )"		66300	0					
ANR	66305	Callee	pfatal		66300	0					
ANR	66306	Identifier	pfatal		66300	0					
ANR	66307	ArgumentList	"""read error"""		66300	1					
ANR	66308	Argument	"""read error"""		66300	0					
ANR	66309	PrimaryExpression	"""read error"""		66300	0					
ANR	66310	ReturnType	void		66300	1					
ANR	66311	Identifier	read_fatal		66300	2					
ANR	66312	ParameterList			66300	3					
ANR	66313	CFGEntryNode	ENTRY		66300		True				
ANR	66314	CFGExitNode	EXIT		66300		True				
ANR	66315	Function	write_fatal	939:0:23555:23607							
ANR	66316	FunctionDef	write_fatal ()		66315	0					
ANR	66317	CompoundStatement		941:0:23579:23607	66315	0					
ANR	66318	ExpressionStatement	"pfatal ( ""write error"" )"	942:2:23583:23605	66315	0	True				
ANR	66319	CallExpression	"pfatal ( ""write error"" )"		66315	0					
ANR	66320	Callee	pfatal		66315	0					
ANR	66321	Identifier	pfatal		66315	0					
ANR	66322	ArgumentList	"""write error"""		66315	1					
ANR	66323	Argument	"""write error"""		66315	0					
ANR	66324	PrimaryExpression	"""write error"""		66315	0					
ANR	66325	ReturnType	void		66315	1					
ANR	66326	Identifier	write_fatal		66315	2					
ANR	66327	ParameterList			66315	3					
ANR	66328	CFGEntryNode	ENTRY		66315		True				
ANR	66329	CFGExitNode	EXIT		66315		True				
ANR	66330	Function	pfatal	947:0:23689:24027							
ANR	66331	FunctionDef	pfatal (char const * format)		66330	0					
ANR	66332	CompoundStatement		949:0:23727:24027	66330	0					
ANR	66333	IdentifierDeclStatement	int errnum = errno ;	950:2:23731:23749	66330	0	True				
ANR	66334	IdentifierDecl	errnum = errno		66330	0					
ANR	66335	IdentifierDeclType	int		66330	0					
ANR	66336	Identifier	errnum		66330	1					
ANR	66337	AssignmentExpression	errnum = errno		66330	2		=			
ANR	66338	Identifier	errno		66330	0					
ANR	66339	Identifier	errno		66330	1					
ANR	66340	IdentifierDeclStatement	va_list args ;	951:2:23753:23765	66330	1	True				
ANR	66341	IdentifierDecl	args		66330	0					
ANR	66342	IdentifierDeclType	va_list		66330	0					
ANR	66343	Identifier	args		66330	1					
ANR	66344	ExpressionStatement	"fprintf ( stderr , ""%s: **** "" , program_name )"	952:2:23769:23812	66330	2	True				
ANR	66345	CallExpression	"fprintf ( stderr , ""%s: **** "" , program_name )"		66330	0					
ANR	66346	Callee	fprintf		66330	0					
ANR	66347	Identifier	fprintf		66330	0					
ANR	66348	ArgumentList	stderr		66330	1					
ANR	66349	Argument	stderr		66330	0					
ANR	66350	Identifier	stderr		66330	0					
ANR	66351	Argument	"""%s: **** """		66330	1					
ANR	66352	PrimaryExpression	"""%s: **** """		66330	0					
ANR	66353	Argument	program_name		66330	2					
ANR	66354	Identifier	program_name		66330	0					
ANR	66355	ExpressionStatement	"va_start ( args , format )"	953:2:23816:23839	66330	3	True				
ANR	66356	CallExpression	"va_start ( args , format )"		66330	0					
ANR	66357	Callee	va_start		66330	0					
ANR	66358	Identifier	va_start		66330	0					
ANR	66359	ArgumentList	args		66330	1					
ANR	66360	Argument	args		66330	0					
ANR	66361	Identifier	args		66330	0					
ANR	66362	Argument	format		66330	1					
ANR	66363	Identifier	format		66330	0					
ANR	66364	ExpressionStatement	"vfprintf ( stderr , format , args )"	954:2:23843:23874	66330	4	True				
ANR	66365	CallExpression	"vfprintf ( stderr , format , args )"		66330	0					
ANR	66366	Callee	vfprintf		66330	0					
ANR	66367	Identifier	vfprintf		66330	0					
ANR	66368	ArgumentList	stderr		66330	1					
ANR	66369	Argument	stderr		66330	0					
ANR	66370	Identifier	stderr		66330	0					
ANR	66371	Argument	format		66330	1					
ANR	66372	Identifier	format		66330	0					
ANR	66373	Argument	args		66330	2					
ANR	66374	Identifier	args		66330	0					
ANR	66375	ExpressionStatement	va_end ( args )	955:2:23878:23891	66330	5	True				
ANR	66376	CallExpression	va_end ( args )		66330	0					
ANR	66377	Callee	va_end		66330	0					
ANR	66378	Identifier	va_end		66330	0					
ANR	66379	ArgumentList	args		66330	1					
ANR	66380	Argument	args		66330	0					
ANR	66381	Identifier	args		66330	0					
ANR	66382	ExpressionStatement	fflush ( stderr )	956:2:23895:23910	66330	6	True				
ANR	66383	CallExpression	fflush ( stderr )		66330	0					
ANR	66384	Callee	fflush		66330	0					
ANR	66385	Identifier	fflush		66330	0					
ANR	66386	ArgumentList	stderr		66330	1					
ANR	66387	Argument	stderr		66330	0					
ANR	66388	Identifier	stderr		66330	0					
ANR	66389	ExpressionStatement	errno = errnum	957:2:23958:23972	66330	7	True				
ANR	66390	AssignmentExpression	errno = errnum		66330	0		=			
ANR	66391	Identifier	errno		66330	0					
ANR	66392	Identifier	errnum		66330	1					
ANR	66393	ExpressionStatement	"perror ( "" "" )"	958:2:23976:23988	66330	8	True				
ANR	66394	CallExpression	"perror ( "" "" )"		66330	0					
ANR	66395	Callee	perror		66330	0					
ANR	66396	Identifier	perror		66330	0					
ANR	66397	ArgumentList	""" """		66330	1					
ANR	66398	Argument	""" """		66330	0					
ANR	66399	PrimaryExpression	""" """		66330	0					
ANR	66400	ExpressionStatement	fflush ( stderr )	959:2:23992:24007	66330	9	True				
ANR	66401	CallExpression	fflush ( stderr )		66330	0					
ANR	66402	Callee	fflush		66330	0					
ANR	66403	Identifier	fflush		66330	0					
ANR	66404	ArgumentList	stderr		66330	1					
ANR	66405	Argument	stderr		66330	0					
ANR	66406	Identifier	stderr		66330	0					
ANR	66407	ExpressionStatement	fatal_exit ( 0 )	960:2:24011:24025	66330	10	True				
ANR	66408	CallExpression	fatal_exit ( 0 )		66330	0					
ANR	66409	Callee	fatal_exit		66330	0					
ANR	66410	Identifier	fatal_exit		66330	0					
ANR	66411	ArgumentList	0		66330	1					
ANR	66412	Argument	0		66330	0					
ANR	66413	PrimaryExpression	0		66330	0					
ANR	66414	ReturnType	void		66330	1					
ANR	66415	Identifier	pfatal		66330	2					
ANR	66416	ParameterList	char const * format		66330	3					
ANR	66417	Parameter	char const * format	948:8:23702:23719	66330	0	True				
ANR	66418	ParameterType	char const *		66330	0					
ANR	66419	Identifier	format		66330	1					
ANR	66420	CFGEntryNode	ENTRY		66330		True				
ANR	66421	CFGExitNode	EXIT		66330		True				
ANR	66422	Symbol	args		66330						
ANR	66423	Symbol	errno		66330						
ANR	66424	Symbol	errnum		66330						
ANR	66425	Symbol	program_name		66330						
ANR	66426	Symbol	format		66330						
ANR	66427	Symbol	stderr		66330						
ANR	66428	Function	vsay	965:0:24063:24171							
ANR	66429	FunctionDef	"vsay (char const * format , va_list args)"		66428	0					
ANR	66430	CompoundStatement		967:0:24115:24171	66428	0					
ANR	66431	ExpressionStatement	"vfprintf ( stdout , format , args )"	968:2:24119:24150	66428	0	True				
ANR	66432	CallExpression	"vfprintf ( stdout , format , args )"		66428	0					
ANR	66433	Callee	vfprintf		66428	0					
ANR	66434	Identifier	vfprintf		66428	0					
ANR	66435	ArgumentList	stdout		66428	1					
ANR	66436	Argument	stdout		66428	0					
ANR	66437	Identifier	stdout		66428	0					
ANR	66438	Argument	format		66428	1					
ANR	66439	Identifier	format		66428	0					
ANR	66440	Argument	args		66428	2					
ANR	66441	Identifier	args		66428	0					
ANR	66442	ExpressionStatement	fflush ( stdout )	969:2:24154:24169	66428	1	True				
ANR	66443	CallExpression	fflush ( stdout )		66428	0					
ANR	66444	Callee	fflush		66428	0					
ANR	66445	Identifier	fflush		66428	0					
ANR	66446	ArgumentList	stdout		66428	1					
ANR	66447	Argument	stdout		66428	0					
ANR	66448	Identifier	stdout		66428	0					
ANR	66449	ReturnType	static void		66428	1					
ANR	66450	Identifier	vsay		66428	2					
ANR	66451	ParameterList	"char const * format , va_list args"		66428	3					
ANR	66452	Parameter	char const * format	966:6:24081:24098	66428	0	True				
ANR	66453	ParameterType	char const *		66428	0					
ANR	66454	Identifier	format		66428	1					
ANR	66455	Parameter	va_list args	966:26:24101:24112	66428	1	True				
ANR	66456	ParameterType	va_list		66428	0					
ANR	66457	Identifier	args		66428	1					
ANR	66458	CFGEntryNode	ENTRY		66428		True				
ANR	66459	CFGExitNode	EXIT		66428		True				
ANR	66460	Symbol	args		66428						
ANR	66461	Symbol	stdout		66428						
ANR	66462	Symbol	format		66428						
ANR	66463	Function	say	972:0:24174:24294							
ANR	66464	FunctionDef	say (char const * format)		66463	0					
ANR	66465	CompoundStatement		974:0:24209:24294	66463	0					
ANR	66466	IdentifierDeclStatement	va_list args ;	975:2:24213:24225	66463	0	True				
ANR	66467	IdentifierDecl	args		66463	0					
ANR	66468	IdentifierDeclType	va_list		66463	0					
ANR	66469	Identifier	args		66463	1					
ANR	66470	ExpressionStatement	"va_start ( args , format )"	976:2:24229:24252	66463	1	True				
ANR	66471	CallExpression	"va_start ( args , format )"		66463	0					
ANR	66472	Callee	va_start		66463	0					
ANR	66473	Identifier	va_start		66463	0					
ANR	66474	ArgumentList	args		66463	1					
ANR	66475	Argument	args		66463	0					
ANR	66476	Identifier	args		66463	0					
ANR	66477	Argument	format		66463	1					
ANR	66478	Identifier	format		66463	0					
ANR	66479	ExpressionStatement	"vsay ( format , args )"	977:2:24256:24275	66463	2	True				
ANR	66480	CallExpression	"vsay ( format , args )"		66463	0					
ANR	66481	Callee	vsay		66463	0					
ANR	66482	Identifier	vsay		66463	0					
ANR	66483	ArgumentList	format		66463	1					
ANR	66484	Argument	format		66463	0					
ANR	66485	Identifier	format		66463	0					
ANR	66486	Argument	args		66463	1					
ANR	66487	Identifier	args		66463	0					
ANR	66488	ExpressionStatement	va_end ( args )	978:2:24279:24292	66463	3	True				
ANR	66489	CallExpression	va_end ( args )		66463	0					
ANR	66490	Callee	va_end		66463	0					
ANR	66491	Identifier	va_end		66463	0					
ANR	66492	ArgumentList	args		66463	1					
ANR	66493	Argument	args		66463	0					
ANR	66494	Identifier	args		66463	0					
ANR	66495	ReturnType	void		66463	1					
ANR	66496	Identifier	say		66463	2					
ANR	66497	ParameterList	char const * format		66463	3					
ANR	66498	Parameter	char const * format	973:5:24184:24201	66463	0	True				
ANR	66499	ParameterType	char const *		66463	0					
ANR	66500	Identifier	format		66463	1					
ANR	66501	CFGEntryNode	ENTRY		66463		True				
ANR	66502	CFGExitNode	EXIT		66463		True				
ANR	66503	Symbol	args		66463						
ANR	66504	Symbol	format		66463						
ANR	66505	Function	ask	983:0:24352:25629							
ANR	66506	FunctionDef	ask (char const * format)		66505	0					
ANR	66507	CompoundStatement		985:0:24387:25629	66505	0					
ANR	66508	Statement	static	986:2:24391:24396	66505	0	True				
ANR	66509	IdentifierDeclStatement	int ttyfd = - 2 ;	986:9:24398:24412	66505	1	True				
ANR	66510	IdentifierDecl	ttyfd = - 2		66505	0					
ANR	66511	IdentifierDeclType	int		66505	0					
ANR	66512	Identifier	ttyfd		66505	1					
ANR	66513	AssignmentExpression	ttyfd = - 2		66505	2		=			
ANR	66514	Identifier	ttyfd		66505	0					
ANR	66515	UnaryOperationExpression	- 2		66505	1					
ANR	66516	UnaryOperator	-		66505	0					
ANR	66517	PrimaryExpression	2		66505	1					
ANR	66518	IdentifierDeclStatement	ssize_t r ;	987:2:24416:24425	66505	2	True				
ANR	66519	IdentifierDecl	r		66505	0					
ANR	66520	IdentifierDeclType	ssize_t		66505	0					
ANR	66521	Identifier	r		66505	1					
ANR	66522	IdentifierDeclStatement	va_list args ;	988:2:24429:24441	66505	3	True				
ANR	66523	IdentifierDecl	args		66505	0					
ANR	66524	IdentifierDeclType	va_list		66505	0					
ANR	66525	Identifier	args		66505	1					
ANR	66526	ExpressionStatement	"va_start ( args , format )"	990:2:24446:24469	66505	4	True				
ANR	66527	CallExpression	"va_start ( args , format )"		66505	0					
ANR	66528	Callee	va_start		66505	0					
ANR	66529	Identifier	va_start		66505	0					
ANR	66530	ArgumentList	args		66505	1					
ANR	66531	Argument	args		66505	0					
ANR	66532	Identifier	args		66505	0					
ANR	66533	Argument	format		66505	1					
ANR	66534	Identifier	format		66505	0					
ANR	66535	ExpressionStatement	"vfprintf ( stdout , format , args )"	991:2:24473:24504	66505	5	True				
ANR	66536	CallExpression	"vfprintf ( stdout , format , args )"		66505	0					
ANR	66537	Callee	vfprintf		66505	0					
ANR	66538	Identifier	vfprintf		66505	0					
ANR	66539	ArgumentList	stdout		66505	1					
ANR	66540	Argument	stdout		66505	0					
ANR	66541	Identifier	stdout		66505	0					
ANR	66542	Argument	format		66505	1					
ANR	66543	Identifier	format		66505	0					
ANR	66544	Argument	args		66505	2					
ANR	66545	Identifier	args		66505	0					
ANR	66546	ExpressionStatement	va_end ( args )	992:2:24508:24521	66505	6	True				
ANR	66547	CallExpression	va_end ( args )		66505	0					
ANR	66548	Callee	va_end		66505	0					
ANR	66549	Identifier	va_end		66505	0					
ANR	66550	ArgumentList	args		66505	1					
ANR	66551	Argument	args		66505	0					
ANR	66552	Identifier	args		66505	0					
ANR	66553	ExpressionStatement	fflush ( stdout )	993:2:24525:24540	66505	7	True				
ANR	66554	CallExpression	fflush ( stdout )		66505	0					
ANR	66555	Callee	fflush		66505	0					
ANR	66556	Identifier	fflush		66505	0					
ANR	66557	ArgumentList	stdout		66505	1					
ANR	66558	Argument	stdout		66505	0					
ANR	66559	Identifier	stdout		66505	0					
ANR	66560	IfStatement	if ( ttyfd == - 2 )		66505	8					
ANR	66561	Condition	ttyfd == - 2	995:6:24549:24559	66505	0	True				
ANR	66562	EqualityExpression	ttyfd == - 2		66505	0		==			
ANR	66563	Identifier	ttyfd		66505	0					
ANR	66564	UnaryOperationExpression	- 2		66505	1					
ANR	66565	UnaryOperator	-		66505	0					
ANR	66566	PrimaryExpression	2		66505	1					
ANR	66567	CompoundStatement		12:4:178:178	66505	1					
ANR	66568	ExpressionStatement	"ttyfd = ( posixly_correct || isatty ( STDOUT_FILENO ) ? open ( TTY_DEVICE , O_RDONLY ) : - 1 )"	1003:6:24931:25033	66505	0	True				
ANR	66569	AssignmentExpression	"ttyfd = ( posixly_correct || isatty ( STDOUT_FILENO ) ? open ( TTY_DEVICE , O_RDONLY ) : - 1 )"		66505	0		=			
ANR	66570	Identifier	ttyfd		66505	0					
ANR	66571	ConditionalExpression	"posixly_correct || isatty ( STDOUT_FILENO ) ? open ( TTY_DEVICE , O_RDONLY ) : - 1"		66505	1					
ANR	66572	Condition	posixly_correct || isatty ( STDOUT_FILENO )		66505	0					
ANR	66573	OrExpression	posixly_correct || isatty ( STDOUT_FILENO )		66505	0		||			
ANR	66574	Identifier	posixly_correct		66505	0					
ANR	66575	CallExpression	isatty ( STDOUT_FILENO )		66505	1					
ANR	66576	Callee	isatty		66505	0					
ANR	66577	Identifier	isatty		66505	0					
ANR	66578	ArgumentList	STDOUT_FILENO		66505	1					
ANR	66579	Argument	STDOUT_FILENO		66505	0					
ANR	66580	Identifier	STDOUT_FILENO		66505	0					
ANR	66581	CallExpression	"open ( TTY_DEVICE , O_RDONLY )"		66505	1					
ANR	66582	Callee	open		66505	0					
ANR	66583	Identifier	open		66505	0					
ANR	66584	ArgumentList	TTY_DEVICE		66505	1					
ANR	66585	Argument	TTY_DEVICE		66505	0					
ANR	66586	Identifier	TTY_DEVICE		66505	0					
ANR	66587	Argument	O_RDONLY		66505	1					
ANR	66588	Identifier	O_RDONLY		66505	0					
ANR	66589	UnaryOperationExpression	- 1		66505	2					
ANR	66590	UnaryOperator	-		66505	0					
ANR	66591	PrimaryExpression	1		66505	1					
ANR	66592	IfStatement	if ( ttyfd < 0 )		66505	9					
ANR	66593	Condition	ttyfd < 0	1008:6:25048:25056	66505	0	True				
ANR	66594	RelationalExpression	ttyfd < 0		66505	0		<			
ANR	66595	Identifier	ttyfd		66505	0					
ANR	66596	PrimaryExpression	0		66505	1					
ANR	66597	CompoundStatement		25:4:675:675	66505	1					
ANR	66598	ExpressionStatement	"printf ( ""\\n"" )"	1011:6:25118:25131	66505	0	True				
ANR	66599	CallExpression	"printf ( ""\\n"" )"		66505	0					
ANR	66600	Callee	printf		66505	0					
ANR	66601	Identifier	printf		66505	0					
ANR	66602	ArgumentList	"""\\n"""		66505	1					
ANR	66603	Argument	"""\\n"""		66505	0					
ANR	66604	PrimaryExpression	"""\\n"""		66505	0					
ANR	66605	ExpressionStatement	buf [ 0 ] = '\\n'	1012:6:25139:25152	66505	1	True				
ANR	66606	AssignmentExpression	buf [ 0 ] = '\\n'		66505	0		=			
ANR	66607	ArrayIndexing	buf [ 0 ]		66505	0					
ANR	66608	Identifier	buf		66505	0					
ANR	66609	PrimaryExpression	0		66505	1					
ANR	66610	PrimaryExpression	'\\n'		66505	1					
ANR	66611	ExpressionStatement	buf [ 1 ] = '\\0'	1013:6:25160:25173	66505	2	True				
ANR	66612	AssignmentExpression	buf [ 1 ] = '\\0'		66505	0		=			
ANR	66613	ArrayIndexing	buf [ 1 ]		66505	0					
ANR	66614	Identifier	buf		66505	0					
ANR	66615	PrimaryExpression	1		66505	1					
ANR	66616	PrimaryExpression	'\\0'		66505	1					
ANR	66617	ElseStatement	else		66505	0					
ANR	66618	CompoundStatement		33:6:812:824	66505	0					
ANR	66619	IdentifierDeclStatement	size_t s = 0 ;	1017:6:25200:25212	66505	0	True				
ANR	66620	IdentifierDecl	s = 0		66505	0					
ANR	66621	IdentifierDeclType	size_t		66505	0					
ANR	66622	Identifier	s		66505	1					
ANR	66623	AssignmentExpression	s = 0		66505	2		=			
ANR	66624	Identifier	s		66505	0					
ANR	66625	PrimaryExpression	0		66505	1					
ANR	66626	WhileStatement	"while ( ( r = read ( ttyfd , buf + s , bufsize - 1 - s ) ) == bufsize - 1 - s && buf [ bufsize - 2 ] != '\\n' )"		66505	1					
ANR	66627	Condition	"( r = read ( ttyfd , buf + s , bufsize - 1 - s ) ) == bufsize - 1 - s && buf [ bufsize - 2 ] != '\\n'"	1018:13:25227:25323	66505	0	True				
ANR	66628	AndExpression	"( r = read ( ttyfd , buf + s , bufsize - 1 - s ) ) == bufsize - 1 - s && buf [ bufsize - 2 ] != '\\n'"		66505	0		&&			
ANR	66629	EqualityExpression	"( r = read ( ttyfd , buf + s , bufsize - 1 - s ) ) == bufsize - 1 - s"		66505	0		==			
ANR	66630	AssignmentExpression	"r = read ( ttyfd , buf + s , bufsize - 1 - s )"		66505	0		=			
ANR	66631	Identifier	r		66505	0					
ANR	66632	CallExpression	"read ( ttyfd , buf + s , bufsize - 1 - s )"		66505	1					
ANR	66633	Callee	read		66505	0					
ANR	66634	Identifier	read		66505	0					
ANR	66635	ArgumentList	ttyfd		66505	1					
ANR	66636	Argument	ttyfd		66505	0					
ANR	66637	Identifier	ttyfd		66505	0					
ANR	66638	Argument	buf + s		66505	1					
ANR	66639	AdditiveExpression	buf + s		66505	0		+			
ANR	66640	Identifier	buf		66505	0					
ANR	66641	Identifier	s		66505	1					
ANR	66642	Argument	bufsize - 1 - s		66505	2					
ANR	66643	AdditiveExpression	bufsize - 1 - s		66505	0		-			
ANR	66644	Identifier	bufsize		66505	0					
ANR	66645	AdditiveExpression	1 - s		66505	1		-			
ANR	66646	PrimaryExpression	1		66505	0					
ANR	66647	Identifier	s		66505	1					
ANR	66648	AdditiveExpression	bufsize - 1 - s		66505	1		-			
ANR	66649	Identifier	bufsize		66505	0					
ANR	66650	AdditiveExpression	1 - s		66505	1		-			
ANR	66651	PrimaryExpression	1		66505	0					
ANR	66652	Identifier	s		66505	1					
ANR	66653	EqualityExpression	buf [ bufsize - 2 ] != '\\n'		66505	1		!=			
ANR	66654	ArrayIndexing	buf [ bufsize - 2 ]		66505	0					
ANR	66655	Identifier	buf		66505	0					
ANR	66656	AdditiveExpression	bufsize - 2		66505	1		-			
ANR	66657	Identifier	bufsize		66505	0					
ANR	66658	PrimaryExpression	2		66505	1					
ANR	66659	PrimaryExpression	'\\n'		66505	1					
ANR	66660	CompoundStatement		36:1:939:939	66505	1					
ANR	66661	ExpressionStatement	s = bufsize - 1	1021:3:25332:25347	66505	0	True				
ANR	66662	AssignmentExpression	s = bufsize - 1		66505	0		=			
ANR	66663	Identifier	s		66505	0					
ANR	66664	AdditiveExpression	bufsize - 1		66505	1		-			
ANR	66665	Identifier	bufsize		66505	0					
ANR	66666	PrimaryExpression	1		66505	1					
ANR	66667	ExpressionStatement	bufsize *= 2	1022:3:25352:25364	66505	1	True				
ANR	66668	AssignmentExpression	bufsize *= 2		66505	0		*=			
ANR	66669	Identifier	bufsize		66505	0					
ANR	66670	PrimaryExpression	2		66505	1					
ANR	66671	ExpressionStatement	"buf = realloc ( buf , bufsize )"	1023:3:25369:25397	66505	2	True				
ANR	66672	AssignmentExpression	"buf = realloc ( buf , bufsize )"		66505	0		=			
ANR	66673	Identifier	buf		66505	0					
ANR	66674	CallExpression	"realloc ( buf , bufsize )"		66505	1					
ANR	66675	Callee	realloc		66505	0					
ANR	66676	Identifier	realloc		66505	0					
ANR	66677	ArgumentList	buf		66505	1					
ANR	66678	Argument	buf		66505	0					
ANR	66679	Identifier	buf		66505	0					
ANR	66680	Argument	bufsize		66505	1					
ANR	66681	Identifier	bufsize		66505	0					
ANR	66682	IfStatement	if ( ! buf )		66505	3					
ANR	66683	Condition	! buf	1024:7:25406:25409	66505	0	True				
ANR	66684	UnaryOperationExpression	! buf		66505	0					
ANR	66685	UnaryOperator	!		66505	0					
ANR	66686	Identifier	buf		66505	1					
ANR	66687	ExpressionStatement	xalloc_die ( )	1025:5:25417:25430	66505	1	True				
ANR	66688	CallExpression	xalloc_die ( )		66505	0					
ANR	66689	Callee	xalloc_die		66505	0					
ANR	66690	Identifier	xalloc_die		66505	0					
ANR	66691	ArgumentList			66505	1					
ANR	66692	IfStatement	if ( r == 0 )		66505	2					
ANR	66693	Condition	r == 0	1027:10:25445:25450	66505	0	True				
ANR	66694	EqualityExpression	r == 0		66505	0		==			
ANR	66695	Identifier	r		66505	0					
ANR	66696	PrimaryExpression	0		66505	1					
ANR	66697	ExpressionStatement	"printf ( ""EOF\\n"" )"	1028:1:25454:25470	66505	1	True				
ANR	66698	CallExpression	"printf ( ""EOF\\n"" )"		66505	0					
ANR	66699	Callee	printf		66505	0					
ANR	66700	Identifier	printf		66505	0					
ANR	66701	ArgumentList	"""EOF\\n"""		66505	1					
ANR	66702	Argument	"""EOF\\n"""		66505	0					
ANR	66703	PrimaryExpression	"""EOF\\n"""		66505	0					
ANR	66704	ElseStatement	else		66505	0					
ANR	66705	IfStatement	if ( r < 0 )		66505	0					
ANR	66706	Condition	r < 0	1029:15:25487:25491	66505	0	True				
ANR	66707	RelationalExpression	r < 0		66505	0		<			
ANR	66708	Identifier	r		66505	0					
ANR	66709	PrimaryExpression	0		66505	1					
ANR	66710	CompoundStatement		46:1:1107:1107	66505	1					
ANR	66711	ExpressionStatement	"error ( 0 , errno , ""tty read failed"" )"	1031:3:25500:25535	66505	0	True				
ANR	66712	CallExpression	"error ( 0 , errno , ""tty read failed"" )"		66505	0					
ANR	66713	Callee	error		66505	0					
ANR	66714	Identifier	error		66505	0					
ANR	66715	ArgumentList	0		66505	1					
ANR	66716	Argument	0		66505	0					
ANR	66717	PrimaryExpression	0		66505	0					
ANR	66718	Argument	errno		66505	1					
ANR	66719	Identifier	errno		66505	0					
ANR	66720	Argument	"""tty read failed"""		66505	2					
ANR	66721	PrimaryExpression	"""tty read failed"""		66505	0					
ANR	66722	ExpressionStatement	ignore_value ( close ( ttyfd ) )	1032:3:25540:25568	66505	1	True				
ANR	66723	CallExpression	ignore_value ( close ( ttyfd ) )		66505	0					
ANR	66724	Callee	ignore_value		66505	0					
ANR	66725	Identifier	ignore_value		66505	0					
ANR	66726	ArgumentList	close ( ttyfd )		66505	1					
ANR	66727	Argument	close ( ttyfd )		66505	0					
ANR	66728	CallExpression	close ( ttyfd )		66505	0					
ANR	66729	Callee	close		66505	0					
ANR	66730	Identifier	close		66505	0					
ANR	66731	ArgumentList	ttyfd		66505	1					
ANR	66732	Argument	ttyfd		66505	0					
ANR	66733	Identifier	ttyfd		66505	0					
ANR	66734	ExpressionStatement	ttyfd = - 1	1033:3:25573:25583	66505	2	True				
ANR	66735	AssignmentExpression	ttyfd = - 1		66505	0		=			
ANR	66736	Identifier	ttyfd		66505	0					
ANR	66737	UnaryOperationExpression	- 1		66505	1					
ANR	66738	UnaryOperator	-		66505	0					
ANR	66739	PrimaryExpression	1		66505	1					
ANR	66740	ExpressionStatement	r = 0	1034:3:25588:25593	66505	3	True				
ANR	66741	AssignmentExpression	r = 0		66505	0		=			
ANR	66742	Identifier	r		66505	0					
ANR	66743	PrimaryExpression	0		66505	1					
ANR	66744	ExpressionStatement	buf [ s + r ] = '\\0'	1036:6:25604:25621	66505	3	True				
ANR	66745	AssignmentExpression	buf [ s + r ] = '\\0'		66505	0		=			
ANR	66746	ArrayIndexing	buf [ s + r ]		66505	0					
ANR	66747	Identifier	buf		66505	0					
ANR	66748	AdditiveExpression	s + r		66505	1		+			
ANR	66749	Identifier	s		66505	0					
ANR	66750	Identifier	r		66505	1					
ANR	66751	PrimaryExpression	'\\0'		66505	1					
ANR	66752	ReturnType	void		66505	1					
ANR	66753	Identifier	ask		66505	2					
ANR	66754	ParameterList	char const * format		66505	3					
ANR	66755	Parameter	char const * format	984:5:24362:24379	66505	0	True				
ANR	66756	ParameterType	char const *		66505	0					
ANR	66757	Identifier	format		66505	1					
ANR	66758	CFGEntryNode	ENTRY		66505		True				
ANR	66759	CFGExitNode	EXIT		66505		True				
ANR	66760	Symbol	* buf		66505						
ANR	66761	Symbol	* bufsize		66505						
ANR	66762	Symbol	errno		66505						
ANR	66763	Symbol	read		66505						
ANR	66764	Symbol	stdout		66505						
ANR	66765	Symbol	STDOUT_FILENO		66505						
ANR	66766	Symbol	format		66505						
ANR	66767	Symbol	bufsize		66505						
ANR	66768	Symbol	realloc		66505						
ANR	66769	Symbol	isatty		66505						
ANR	66770	Symbol	ttyfd		66505						
ANR	66771	Symbol	args		66505						
ANR	66772	Symbol	r		66505						
ANR	66773	Symbol	buf		66505						
ANR	66774	Symbol	O_RDONLY		66505						
ANR	66775	Symbol	s		66505						
ANR	66776	Symbol	TTY_DEVICE		66505						
ANR	66777	Symbol	posixly_correct		66505						
ANR	66778	Symbol	* r		66505						
ANR	66779	Symbol	close		66505						
ANR	66780	Symbol	* s		66505						
ANR	66781	Symbol	open		66505						
ANR	66782	Function	ok_to_reverse	1042:0:25684:26517							
ANR	66783	FunctionDef	ok_to_reverse (char const * format)		66782	0					
ANR	66784	CompoundStatement		1044:0:25729:26517	66782	0					
ANR	66785	IdentifierDeclStatement	bool r = false ;	1045:2:25733:25747	66782	0	True				
ANR	66786	IdentifierDecl	r = false		66782	0					
ANR	66787	IdentifierDeclType	bool		66782	0					
ANR	66788	Identifier	r		66782	1					
ANR	66789	AssignmentExpression	r = false		66782	2		=			
ANR	66790	Identifier	false		66782	0					
ANR	66791	Identifier	false		66782	1					
ANR	66792	IfStatement	if ( noreverse || ! ( force && verbosity == SILENT ) )		66782	1					
ANR	66793	Condition	noreverse || ! ( force && verbosity == SILENT )	1047:6:25756:25800	66782	0	True				
ANR	66794	OrExpression	noreverse || ! ( force && verbosity == SILENT )		66782	0		||			
ANR	66795	Identifier	noreverse		66782	0					
ANR	66796	UnaryOperationExpression	! ( force && verbosity == SILENT )		66782	1					
ANR	66797	UnaryOperator	!		66782	0					
ANR	66798	AndExpression	force && verbosity == SILENT		66782	1		&&			
ANR	66799	Identifier	force		66782	0					
ANR	66800	EqualityExpression	verbosity == SILENT		66782	1		==			
ANR	66801	Identifier	verbosity		66782	0					
ANR	66802	Identifier	SILENT		66782	1					
ANR	66803	CompoundStatement		6:6:85:97	66782	1					
ANR	66804	IdentifierDeclStatement	va_list args ;	1049:6:25815:25827	66782	0	True				
ANR	66805	IdentifierDecl	args		66782	0					
ANR	66806	IdentifierDeclType	va_list		66782	0					
ANR	66807	Identifier	args		66782	1					
ANR	66808	ExpressionStatement	"va_start ( args , format )"	1050:6:25835:25858	66782	1	True				
ANR	66809	CallExpression	"va_start ( args , format )"		66782	0					
ANR	66810	Callee	va_start		66782	0					
ANR	66811	Identifier	va_start		66782	0					
ANR	66812	ArgumentList	args		66782	1					
ANR	66813	Argument	args		66782	0					
ANR	66814	Identifier	args		66782	0					
ANR	66815	Argument	format		66782	1					
ANR	66816	Identifier	format		66782	0					
ANR	66817	ExpressionStatement	"vsay ( format , args )"	1051:6:25866:25885	66782	2	True				
ANR	66818	CallExpression	"vsay ( format , args )"		66782	0					
ANR	66819	Callee	vsay		66782	0					
ANR	66820	Identifier	vsay		66782	0					
ANR	66821	ArgumentList	format		66782	1					
ANR	66822	Argument	format		66782	0					
ANR	66823	Identifier	format		66782	0					
ANR	66824	Argument	args		66782	1					
ANR	66825	Identifier	args		66782	0					
ANR	66826	ExpressionStatement	va_end ( args )	1052:6:25893:25906	66782	3	True				
ANR	66827	CallExpression	va_end ( args )		66782	0					
ANR	66828	Callee	va_end		66782	0					
ANR	66829	Identifier	va_end		66782	0					
ANR	66830	ArgumentList	args		66782	1					
ANR	66831	Argument	args		66782	0					
ANR	66832	Identifier	args		66782	0					
ANR	66833	IfStatement	if ( noreverse )		66782	2					
ANR	66834	Condition	noreverse	1055:6:25921:25929	66782	0	True				
ANR	66835	Identifier	noreverse		66782	0					
ANR	66836	CompoundStatement		13:4:206:206	66782	1					
ANR	66837	ExpressionStatement	"say ( ""  Skipping patch.\\n"" )"	1057:6:25944:25971	66782	0	True				
ANR	66838	CallExpression	"say ( ""  Skipping patch.\\n"" )"		66782	0					
ANR	66839	Callee	say		66782	0					
ANR	66840	Identifier	say		66782	0					
ANR	66841	ArgumentList	"""  Skipping patch.\\n"""		66782	1					
ANR	66842	Argument	"""  Skipping patch.\\n"""		66782	0					
ANR	66843	PrimaryExpression	"""  Skipping patch.\\n"""		66782	0					
ANR	66844	ExpressionStatement	skip_rest_of_patch = true	1058:6:25979:26004	66782	1	True				
ANR	66845	AssignmentExpression	skip_rest_of_patch = true		66782	0		=			
ANR	66846	Identifier	skip_rest_of_patch		66782	0					
ANR	66847	Identifier	true		66782	1					
ANR	66848	ElseStatement	else		66782	0					
ANR	66849	IfStatement	if ( force )		66782	0					
ANR	66850	Condition	force	1060:11:26023:26027	66782	0	True				
ANR	66851	Identifier	force		66782	0					
ANR	66852	CompoundStatement		18:4:304:304	66782	1					
ANR	66853	IfStatement	if ( verbosity != SILENT )		66782	0					
ANR	66854	Condition	verbosity != SILENT	1062:10:26046:26064	66782	0	True				
ANR	66855	EqualityExpression	verbosity != SILENT		66782	0		!=			
ANR	66856	Identifier	verbosity		66782	0					
ANR	66857	Identifier	SILENT		66782	1					
ANR	66858	ExpressionStatement	"say ( ""  Applying it anyway.\\n"" )"	1063:1:26068:26099	66782	1	True				
ANR	66859	CallExpression	"say ( ""  Applying it anyway.\\n"" )"		66782	0					
ANR	66860	Callee	say		66782	0					
ANR	66861	Identifier	say		66782	0					
ANR	66862	ArgumentList	"""  Applying it anyway.\\n"""		66782	1					
ANR	66863	Argument	"""  Applying it anyway.\\n"""		66782	0					
ANR	66864	PrimaryExpression	"""  Applying it anyway.\\n"""		66782	0					
ANR	66865	ElseStatement	else		66782	0					
ANR	66866	IfStatement	if ( batch )		66782	0					
ANR	66867	Condition	batch	1065:11:26118:26122	66782	0	True				
ANR	66868	Identifier	batch		66782	0					
ANR	66869	CompoundStatement		23:4:399:399	66782	1					
ANR	66870	ExpressionStatement	"say ( reverse ? ""  Ignoring -R.\\n"" : ""  Assuming -R.\\n"" )"	1067:6:26137:26192	66782	0	True				
ANR	66871	CallExpression	"say ( reverse ? ""  Ignoring -R.\\n"" : ""  Assuming -R.\\n"" )"		66782	0					
ANR	66872	Callee	say		66782	0					
ANR	66873	Identifier	say		66782	0					
ANR	66874	ArgumentList	"reverse ? ""  Ignoring -R.\\n"" : ""  Assuming -R.\\n"""		66782	1					
ANR	66875	Argument	"reverse ? ""  Ignoring -R.\\n"" : ""  Assuming -R.\\n"""		66782	0					
ANR	66876	ConditionalExpression	"reverse ? ""  Ignoring -R.\\n"" : ""  Assuming -R.\\n"""		66782	0					
ANR	66877	Condition	reverse		66782	0					
ANR	66878	Identifier	reverse		66782	0					
ANR	66879	PrimaryExpression	"""  Ignoring -R.\\n"""		66782	1					
ANR	66880	PrimaryExpression	"""  Assuming -R.\\n"""		66782	2					
ANR	66881	ExpressionStatement	r = true	1068:6:26200:26208	66782	1	True				
ANR	66882	AssignmentExpression	r = true		66782	0		=			
ANR	66883	Identifier	r		66782	0					
ANR	66884	Identifier	true		66782	1					
ANR	66885	ElseStatement	else		66782	0					
ANR	66886	CompoundStatement		28:4:497:497	66782	0					
ANR	66887	ExpressionStatement	"ask ( reverse ? ""  Ignore -R? [n] "" : ""  Assume -R? [n] "" )"	1072:6:26235:26292	66782	0	True				
ANR	66888	CallExpression	"ask ( reverse ? ""  Ignore -R? [n] "" : ""  Assume -R? [n] "" )"		66782	0					
ANR	66889	Callee	ask		66782	0					
ANR	66890	Identifier	ask		66782	0					
ANR	66891	ArgumentList	"reverse ? ""  Ignore -R? [n] "" : ""  Assume -R? [n] """		66782	1					
ANR	66892	Argument	"reverse ? ""  Ignore -R? [n] "" : ""  Assume -R? [n] """		66782	0					
ANR	66893	ConditionalExpression	"reverse ? ""  Ignore -R? [n] "" : ""  Assume -R? [n] """		66782	0					
ANR	66894	Condition	reverse		66782	0					
ANR	66895	Identifier	reverse		66782	0					
ANR	66896	PrimaryExpression	"""  Ignore -R? [n] """		66782	1					
ANR	66897	PrimaryExpression	"""  Assume -R? [n] """		66782	2					
ANR	66898	ExpressionStatement	r = * buf == 'y'	1073:6:26300:26315	66782	1	True				
ANR	66899	AssignmentExpression	r = * buf == 'y'		66782	0		=			
ANR	66900	Identifier	r		66782	0					
ANR	66901	EqualityExpression	* buf == 'y'		66782	1		==			
ANR	66902	UnaryOperationExpression	* buf		66782	0					
ANR	66903	UnaryOperator	*		66782	0					
ANR	66904	Identifier	buf		66782	1					
ANR	66905	PrimaryExpression	'y'		66782	1					
ANR	66906	IfStatement	if ( ! r )		66782	2					
ANR	66907	Condition	! r	1074:10:26327:26329	66782	0	True				
ANR	66908	UnaryOperationExpression	! r		66782	0					
ANR	66909	UnaryOperator	!		66782	0					
ANR	66910	Identifier	r		66782	1					
ANR	66911	CompoundStatement		32:1:603:603	66782	1					
ANR	66912	ExpressionStatement	"ask ( ""Apply anyway? [n] "" )"	1076:3:26338:26364	66782	0	True				
ANR	66913	CallExpression	"ask ( ""Apply anyway? [n] "" )"		66782	0					
ANR	66914	Callee	ask		66782	0					
ANR	66915	Identifier	ask		66782	0					
ANR	66916	ArgumentList	"""Apply anyway? [n] """		66782	1					
ANR	66917	Argument	"""Apply anyway? [n] """		66782	0					
ANR	66918	PrimaryExpression	"""Apply anyway? [n] """		66782	0					
ANR	66919	IfStatement	if ( * buf != 'y' )		66782	1					
ANR	66920	Condition	* buf != 'y'	1077:7:26373:26383	66782	0	True				
ANR	66921	EqualityExpression	* buf != 'y'		66782	0		!=			
ANR	66922	UnaryOperationExpression	* buf		66782	0					
ANR	66923	UnaryOperator	*		66782	0					
ANR	66924	Identifier	buf		66782	1					
ANR	66925	PrimaryExpression	'y'		66782	1					
ANR	66926	CompoundStatement		35:5:661:661	66782	1					
ANR	66927	IfStatement	if ( verbosity != SILENT )		66782	0					
ANR	66928	Condition	verbosity != SILENT	1079:11:26404:26422	66782	0	True				
ANR	66929	EqualityExpression	verbosity != SILENT		66782	0		!=			
ANR	66930	Identifier	verbosity		66782	0					
ANR	66931	Identifier	SILENT		66782	1					
ANR	66932	ExpressionStatement	"say ( ""Skipping patch.\\n"" )"	1080:2:26427:26452	66782	1	True				
ANR	66933	CallExpression	"say ( ""Skipping patch.\\n"" )"		66782	0					
ANR	66934	Callee	say		66782	0					
ANR	66935	Identifier	say		66782	0					
ANR	66936	ArgumentList	"""Skipping patch.\\n"""		66782	1					
ANR	66937	Argument	"""Skipping patch.\\n"""		66782	0					
ANR	66938	PrimaryExpression	"""Skipping patch.\\n"""		66782	0					
ANR	66939	ExpressionStatement	skip_rest_of_patch = true	1081:7:26461:26486	66782	1	True				
ANR	66940	AssignmentExpression	skip_rest_of_patch = true		66782	0		=			
ANR	66941	Identifier	skip_rest_of_patch		66782	0					
ANR	66942	Identifier	true		66782	1					
ANR	66943	ReturnStatement	return r ;	1086:2:26507:26515	66782	3	True				
ANR	66944	Identifier	r		66782	0					
ANR	66945	ReturnType	bool		66782	1					
ANR	66946	Identifier	ok_to_reverse		66782	2					
ANR	66947	ParameterList	char const * format		66782	3					
ANR	66948	Parameter	char const * format	1043:15:25704:25721	66782	0	True				
ANR	66949	ParameterType	char const *		66782	0					
ANR	66950	Identifier	format		66782	1					
ANR	66951	CFGEntryNode	ENTRY		66782		True				
ANR	66952	CFGExitNode	EXIT		66782		True				
ANR	66953	Symbol	* buf		66782						
ANR	66954	Symbol	format		66782						
ANR	66955	Symbol	false		66782						
ANR	66956	Symbol	batch		66782						
ANR	66957	Symbol	reverse		66782						
ANR	66958	Symbol	args		66782						
ANR	66959	Symbol	r		66782						
ANR	66960	Symbol	buf		66782						
ANR	66961	Symbol	skip_rest_of_patch		66782						
ANR	66962	Symbol	true		66782						
ANR	66963	Symbol	noreverse		66782						
ANR	66964	Symbol	force		66782						
ANR	66965	Symbol	verbosity		66782						
ANR	66966	Symbol	SILENT		66782						
ANR	66967	DeclStmt									
ANR	66968	Decl							int const	int const [ ]	sigs
ANR	66969	DeclStmt									
ANR	66970	Decl							sigset_t	sigset_t	initial_signal_mask
ANR	66971	DeclStmt									
ANR	66972	Decl							sigset_t	sigset_t	signals_to_block
ANR	66973	Function	fatal_exit_handler	1136:0:27642:27730							
ANR	66974	FunctionDef	fatal_exit_handler (int sig)		66973	0					
ANR	66975	CompoundStatement		1138:0:27683:27730	66973	0					
ANR	66976	ExpressionStatement	"signal ( sig , SIG_IGN )"	1139:2:27687:27708	66973	0	True				
ANR	66977	CallExpression	"signal ( sig , SIG_IGN )"		66973	0					
ANR	66978	Callee	signal		66973	0					
ANR	66979	Identifier	signal		66973	0					
ANR	66980	ArgumentList	sig		66973	1					
ANR	66981	Argument	sig		66973	0					
ANR	66982	Identifier	sig		66973	0					
ANR	66983	Argument	SIG_IGN		66973	1					
ANR	66984	Identifier	SIG_IGN		66973	0					
ANR	66985	ExpressionStatement	fatal_exit ( sig )	1140:2:27712:27728	66973	1	True				
ANR	66986	CallExpression	fatal_exit ( sig )		66973	0					
ANR	66987	Callee	fatal_exit		66973	0					
ANR	66988	Identifier	fatal_exit		66973	0					
ANR	66989	ArgumentList	sig		66973	1					
ANR	66990	Argument	sig		66973	0					
ANR	66991	Identifier	sig		66973	0					
ANR	66992	ReturnType	static void		66973	1					
ANR	66993	Identifier	fatal_exit_handler		66973	2					
ANR	66994	ParameterList	int sig		66973	3					
ANR	66995	Parameter	int sig	1137:20:27674:27680	66973	0	True				
ANR	66996	ParameterType	int		66973	0					
ANR	66997	Identifier	sig		66973	1					
ANR	66998	CFGEntryNode	ENTRY		66973		True				
ANR	66999	CFGExitNode	EXIT		66973		True				
ANR	67000	Symbol	sig		66973						
ANR	67001	Symbol	SIG_IGN		66973						
ANR	67002	Function	set_signals	1144:0:27740:29011							
ANR	67003	FunctionDef	set_signals (bool reset)		67002	0					
ANR	67004	CompoundStatement		1146:0:27770:29011	67002	0					
ANR	67005	IdentifierDeclStatement	int i ;	1147:2:27774:27779	67002	0	True				
ANR	67006	IdentifierDecl	i		67002	0					
ANR	67007	IdentifierDeclType	int		67002	0					
ANR	67008	Identifier	i		67002	1					
ANR	67009	IdentifierDeclStatement	"struct sigaction initial_act , fatal_act ;"	1149:2:27802:27841	67002	1	True				
ANR	67010	IdentifierDecl	initial_act		67002	0					
ANR	67011	IdentifierDeclType	struct sigaction		67002	0					
ANR	67012	Identifier	initial_act		67002	1					
ANR	67013	IdentifierDecl	fatal_act		67002	1					
ANR	67014	IdentifierDeclType	struct sigaction		67002	0					
ANR	67015	Identifier	fatal_act		67002	1					
ANR	67016	ExpressionStatement	fatal_act . sa_handler = fatal_exit	1150:2:27845:27878	67002	2	True				
ANR	67017	AssignmentExpression	fatal_act . sa_handler = fatal_exit		67002	0		=			
ANR	67018	MemberAccess	fatal_act . sa_handler		67002	0					
ANR	67019	Identifier	fatal_act		67002	0					
ANR	67020	Identifier	sa_handler		67002	1					
ANR	67021	Identifier	fatal_exit		67002	1					
ANR	67022	ExpressionStatement	sigemptyset ( & fatal_act . sa_mask )	1151:2:27882:27914	67002	3	True				
ANR	67023	CallExpression	sigemptyset ( & fatal_act . sa_mask )		67002	0					
ANR	67024	Callee	sigemptyset		67002	0					
ANR	67025	Identifier	sigemptyset		67002	0					
ANR	67026	ArgumentList	& fatal_act . sa_mask		67002	1					
ANR	67027	Argument	& fatal_act . sa_mask		67002	0					
ANR	67028	UnaryOperationExpression	& fatal_act . sa_mask		67002	0					
ANR	67029	UnaryOperator	&		67002	0					
ANR	67030	MemberAccess	fatal_act . sa_mask		67002	1					
ANR	67031	Identifier	fatal_act		67002	0					
ANR	67032	Identifier	sa_mask		67002	1					
ANR	67033	ExpressionStatement	fatal_act . sa_flags = 0	1152:2:27918:27940	67002	4	True				
ANR	67034	AssignmentExpression	fatal_act . sa_flags = 0		67002	0		=			
ANR	67035	MemberAccess	fatal_act . sa_flags		67002	0					
ANR	67036	Identifier	fatal_act		67002	0					
ANR	67037	Identifier	sa_flags		67002	1					
ANR	67038	PrimaryExpression	0		67002	1					
ANR	67039	Statement	define	1153:1:27943:27948	67002	5	True				
ANR	67040	Statement	setup_handler	1153:8:27950:27962	67002	6	True				
ANR	67041	Statement	(	1153:21:27963:27963	67002	7	True				
ANR	67042	Statement	sig	1153:22:27964:27966	67002	8	True				
ANR	67043	Statement	)	1153:25:27967:27967	67002	9	True				
ANR	67044	Statement	sigaction	1153:27:27969:27977	67002	10	True				
ANR	67045	Statement	(	1153:37:27979:27979	67002	11	True				
ANR	67046	Statement	sig	1153:38:27980:27982	67002	12	True				
ANR	67047	Statement	","	1153:41:27983:27983	67002	13	True				
ANR	67048	Statement	&	1153:43:27985:27985	67002	14	True				
ANR	67049	Statement	fatal_act	1153:44:27986:27994	67002	15	True				
ANR	67050	Statement	","	1153:53:27995:27995	67002	16	True				
ANR	67051	Statement	(	1153:55:27997:27997	67002	17	True				
ANR	67052	Statement	struct	1153:56:27998:28003	67002	18	True				
ANR	67053	Statement	sigaction	1153:63:28005:28013	67002	19	True				
ANR	67054	Statement	*	1153:73:28015:28015	67002	20	True				
ANR	67055	Statement	)	1153:74:28016:28016	67002	21	True				
ANR	67056	Statement	0	1153:76:28018:28018	67002	22	True				
ANR	67057	Statement	)	1153:77:28019:28019	67002	23	True				
ANR	67058	IfStatement	if ( ! reset )		67002	24					
ANR	67059	Condition	! reset	1158:6:28101:28106	67002	0	True				
ANR	67060	UnaryOperationExpression	! reset		67002	0					
ANR	67061	UnaryOperator	!		67002	0					
ANR	67062	Identifier	reset		67002	1					
ANR	67063	CompoundStatement		14:4:342:342	67002	1					
ANR	67064	ExpressionStatement	"signal ( SIGCHLD , SIG_DFL )"	1162:6:28205:28230	67002	0	True				
ANR	67065	CallExpression	"signal ( SIGCHLD , SIG_DFL )"		67002	0					
ANR	67066	Callee	signal		67002	0					
ANR	67067	Identifier	signal		67002	0					
ANR	67068	ArgumentList	SIGCHLD		67002	1					
ANR	67069	Argument	SIGCHLD		67002	0					
ANR	67070	Identifier	SIGCHLD		67002	0					
ANR	67071	Argument	SIG_DFL		67002	1					
ANR	67072	Identifier	SIG_DFL		67002	0					
ANR	67073	ExpressionStatement	sigemptyset ( & signals_to_block )	1164:6:28245:28276	67002	1	True				
ANR	67074	CallExpression	sigemptyset ( & signals_to_block )		67002	0					
ANR	67075	Callee	sigemptyset		67002	0					
ANR	67076	Identifier	sigemptyset		67002	0					
ANR	67077	ArgumentList	& signals_to_block		67002	1					
ANR	67078	Argument	& signals_to_block		67002	0					
ANR	67079	UnaryOperationExpression	& signals_to_block		67002	0					
ANR	67080	UnaryOperator	&		67002	0					
ANR	67081	Identifier	signals_to_block		67002	1					
ANR	67082	ForStatement	for ( i = 0 ; i < NUM_SIGS ; i ++ )		67002	2					
ANR	67083	ForInit	i = 0 ;	1165:11:28289:28294	67002	0	True				
ANR	67084	AssignmentExpression	i = 0		67002	0		=			
ANR	67085	Identifier	i		67002	0					
ANR	67086	PrimaryExpression	0		67002	1					
ANR	67087	Condition	i < NUM_SIGS	1165:19:28297:28308	67002	1	True				
ANR	67088	RelationalExpression	i < NUM_SIGS		67002	0		<			
ANR	67089	Identifier	i		67002	0					
ANR	67090	Identifier	NUM_SIGS		67002	1					
ANR	67091	PostIncDecOperationExpression	i ++	1165:34:28312:28314	67002	2	True				
ANR	67092	Identifier	i		67002	0					
ANR	67093	IncDec	++		67002	1					
ANR	67094	CompoundStatement		22:3:552:572	67002	3					
ANR	67095	IdentifierDeclStatement	bool ignoring_signal ;	1167:3:28323:28343	67002	0	True				
ANR	67096	IdentifierDecl	ignoring_signal		67002	0					
ANR	67097	IdentifierDeclType	bool		67002	0					
ANR	67098	Identifier	ignoring_signal		67002	1					
ANR	67099	IfStatement	"if ( sigaction ( sigs [ i ] , ( struct sigaction * ) 0 , & initial_act ) != 0 )"		67002	1					
ANR	67100	Condition	"sigaction ( sigs [ i ] , ( struct sigaction * ) 0 , & initial_act ) != 0"	1169:7:28371:28432	67002	0	True				
ANR	67101	EqualityExpression	"sigaction ( sigs [ i ] , ( struct sigaction * ) 0 , & initial_act ) != 0"		67002	0		!=			
ANR	67102	CallExpression	"sigaction ( sigs [ i ] , ( struct sigaction * ) 0 , & initial_act )"		67002	0					
ANR	67103	Callee	sigaction		67002	0					
ANR	67104	Identifier	sigaction		67002	0					
ANR	67105	ArgumentList	sigs [ i ]		67002	1					
ANR	67106	Argument	sigs [ i ]		67002	0					
ANR	67107	ArrayIndexing	sigs [ i ]		67002	0					
ANR	67108	Identifier	sigs		67002	0					
ANR	67109	Identifier	i		67002	1					
ANR	67110	Argument	( struct sigaction * ) 0		67002	1					
ANR	67111	CastExpression	( struct sigaction * ) 0		67002	0					
ANR	67112	CastTarget	struct sigaction *		67002	0					
ANR	67113	PrimaryExpression	0		67002	1					
ANR	67114	Argument	& initial_act		67002	2					
ANR	67115	UnaryOperationExpression	& initial_act		67002	0					
ANR	67116	UnaryOperator	&		67002	0					
ANR	67117	Identifier	initial_act		67002	1					
ANR	67118	PrimaryExpression	0		67002	1					
ANR	67119	ContinueStatement	continue ;	1170:5:28440:28448	67002	1	True				
ANR	67120	ExpressionStatement	ignoring_signal = initial_act . sa_handler == SIG_IGN	1171:3:28453:28504	67002	2	True				
ANR	67121	AssignmentExpression	ignoring_signal = initial_act . sa_handler == SIG_IGN		67002	0		=			
ANR	67122	Identifier	ignoring_signal		67002	0					
ANR	67123	EqualityExpression	initial_act . sa_handler == SIG_IGN		67002	1		==			
ANR	67124	MemberAccess	initial_act . sa_handler		67002	0					
ANR	67125	Identifier	initial_act		67002	0					
ANR	67126	Identifier	sa_handler		67002	1					
ANR	67127	Identifier	SIG_IGN		67002	1					
ANR	67128	IfStatement	if ( ! ignoring_signal )		67002	3					
ANR	67129	Condition	! ignoring_signal	1175:7:28585:28601	67002	0	True				
ANR	67130	UnaryOperationExpression	! ignoring_signal		67002	0					
ANR	67131	UnaryOperator	!		67002	0					
ANR	67132	Identifier	ignoring_signal		67002	1					
ANR	67133	CompoundStatement		31:5:838:838	67002	1					
ANR	67134	ExpressionStatement	"sigaddset ( & signals_to_block , sigs [ i ] )"	1177:7:28618:28656	67002	0	True				
ANR	67135	CallExpression	"sigaddset ( & signals_to_block , sigs [ i ] )"		67002	0					
ANR	67136	Callee	sigaddset		67002	0					
ANR	67137	Identifier	sigaddset		67002	0					
ANR	67138	ArgumentList	& signals_to_block		67002	1					
ANR	67139	Argument	& signals_to_block		67002	0					
ANR	67140	UnaryOperationExpression	& signals_to_block		67002	0					
ANR	67141	UnaryOperator	&		67002	0					
ANR	67142	Identifier	signals_to_block		67002	1					
ANR	67143	Argument	sigs [ i ]		67002	1					
ANR	67144	ArrayIndexing	sigs [ i ]		67002	0					
ANR	67145	Identifier	sigs		67002	0					
ANR	67146	Identifier	i		67002	1					
ANR	67147	ExpressionStatement	setup_handler ( sigs [ i ] )	1178:7:28665:28688	67002	1	True				
ANR	67148	CallExpression	setup_handler ( sigs [ i ] )		67002	0					
ANR	67149	Callee	setup_handler		67002	0					
ANR	67150	Identifier	setup_handler		67002	0					
ANR	67151	ArgumentList	sigs [ i ]		67002	1					
ANR	67152	Argument	sigs [ i ]		67002	0					
ANR	67153	ArrayIndexing	sigs [ i ]		67002	0					
ANR	67154	Identifier	sigs		67002	0					
ANR	67155	Identifier	i		67002	1					
ANR	67156	ElseStatement	else		67002	0					
ANR	67157	CompoundStatement		38:4:946:946	67002	0					
ANR	67158	ExpressionStatement	"sigprocmask ( SIG_SETMASK , & initial_signal_mask , ( sigset_t * ) 0 )"	1186:6:28813:28876	67002	0	True				
ANR	67159	CallExpression	"sigprocmask ( SIG_SETMASK , & initial_signal_mask , ( sigset_t * ) 0 )"		67002	0					
ANR	67160	Callee	sigprocmask		67002	0					
ANR	67161	Identifier	sigprocmask		67002	0					
ANR	67162	ArgumentList	SIG_SETMASK		67002	1					
ANR	67163	Argument	SIG_SETMASK		67002	0					
ANR	67164	Identifier	SIG_SETMASK		67002	0					
ANR	67165	Argument	& initial_signal_mask		67002	1					
ANR	67166	UnaryOperationExpression	& initial_signal_mask		67002	0					
ANR	67167	UnaryOperator	&		67002	0					
ANR	67168	Identifier	initial_signal_mask		67002	1					
ANR	67169	Argument	( sigset_t * ) 0		67002	2					
ANR	67170	CastExpression	( sigset_t * ) 0		67002	0					
ANR	67171	CastTarget	sigset_t *		67002	0					
ANR	67172	PrimaryExpression	0		67002	1					
ANR	67173	ReturnType	void		67002	1					
ANR	67174	Identifier	set_signals		67002	2					
ANR	67175	ParameterList	bool reset		67002	3					
ANR	67176	Parameter	bool reset	1145:13:27758:27767	67002	0	True				
ANR	67177	ParameterType	bool		67002	0					
ANR	67178	Identifier	reset		67002	1					
ANR	67179	CFGEntryNode	ENTRY		67002		True				
ANR	67180	CFGExitNode	EXIT		67002		True				
ANR	67181	Symbol	fatal_act . sa_flags		67002						
ANR	67182	Symbol	& fatal_act . sa_mask		67002						
ANR	67183	Symbol	SIG_SETMASK		67002						
ANR	67184	Symbol	i		67002						
ANR	67185	Symbol	SIG_IGN		67002						
ANR	67186	Symbol	fatal_act . sa_handler		67002						
ANR	67187	Symbol	sigaction		67002						
ANR	67188	Symbol	& initial_act		67002						
ANR	67189	Symbol	NUM_SIGS		67002						
ANR	67190	Symbol	SIGCHLD		67002						
ANR	67191	Symbol	fatal_exit		67002						
ANR	67192	Symbol	& fatal_act		67002						
ANR	67193	Symbol	ignoring_signal		67002						
ANR	67194	Symbol	* i		67002						
ANR	67195	Symbol	& initial_signal_mask		67002						
ANR	67196	Symbol	SIG_DFL		67002						
ANR	67197	Symbol	sigs		67002						
ANR	67198	Symbol	& signals_to_block		67002						
ANR	67199	Symbol	reset		67002						
ANR	67200	Symbol	fatal_act		67002						
ANR	67201	Symbol	* sigs		67002						
ANR	67202	Symbol	initial_act . sa_handler		67002						
ANR	67203	Symbol	initial_act		67002						
ANR	67204	Function	ignore_signals	1197:0:29077:29354							
ANR	67205	FunctionDef	ignore_signals ()		67204	0					
ANR	67206	CompoundStatement		1199:0:29104:29354	67204	0					
ANR	67207	ExpressionStatement	"sigprocmask ( SIG_BLOCK , & signals_to_block , & initial_signal_mask )"	1201:2:29148:29212	67204	0	True				
ANR	67208	CallExpression	"sigprocmask ( SIG_BLOCK , & signals_to_block , & initial_signal_mask )"		67204	0					
ANR	67209	Callee	sigprocmask		67204	0					
ANR	67210	Identifier	sigprocmask		67204	0					
ANR	67211	ArgumentList	SIG_BLOCK		67204	1					
ANR	67212	Argument	SIG_BLOCK		67204	0					
ANR	67213	Identifier	SIG_BLOCK		67204	0					
ANR	67214	Argument	& signals_to_block		67204	1					
ANR	67215	UnaryOperationExpression	& signals_to_block		67204	0					
ANR	67216	UnaryOperator	&		67204	0					
ANR	67217	Identifier	signals_to_block		67204	1					
ANR	67218	Argument	& initial_signal_mask		67204	2					
ANR	67219	UnaryOperationExpression	& initial_signal_mask		67204	0					
ANR	67220	UnaryOperator	&		67204	0					
ANR	67221	Identifier	initial_signal_mask		67204	1					
ANR	67222	ReturnType	void		67204	1					
ANR	67223	Identifier	ignore_signals		67204	2					
ANR	67224	ParameterList			67204	3					
ANR	67225	CFGEntryNode	ENTRY		67204		True				
ANR	67226	CFGExitNode	EXIT		67204		True				
ANR	67227	Symbol	& initial_signal_mask		67204						
ANR	67228	Symbol	& signals_to_block		67204						
ANR	67229	Symbol	SIG_BLOCK		67204						
ANR	67230	Function	exit_with_signal	1210:0:29357:29549							
ANR	67231	FunctionDef	exit_with_signal (int sig)		67230	0					
ANR	67232	CompoundStatement		1212:0:29389:29549	67230	0					
ANR	67233	IdentifierDeclStatement	sigset_t s ;	1213:2:29393:29403	67230	0	True				
ANR	67234	IdentifierDecl	s		67230	0					
ANR	67235	IdentifierDeclType	sigset_t		67230	0					
ANR	67236	Identifier	s		67230	1					
ANR	67237	ExpressionStatement	"signal ( sig , SIG_DFL )"	1214:2:29407:29428	67230	1	True				
ANR	67238	CallExpression	"signal ( sig , SIG_DFL )"		67230	0					
ANR	67239	Callee	signal		67230	0					
ANR	67240	Identifier	signal		67230	0					
ANR	67241	ArgumentList	sig		67230	1					
ANR	67242	Argument	sig		67230	0					
ANR	67243	Identifier	sig		67230	0					
ANR	67244	Argument	SIG_DFL		67230	1					
ANR	67245	Identifier	SIG_DFL		67230	0					
ANR	67246	ExpressionStatement	sigemptyset ( & s )	1215:2:29432:29448	67230	2	True				
ANR	67247	CallExpression	sigemptyset ( & s )		67230	0					
ANR	67248	Callee	sigemptyset		67230	0					
ANR	67249	Identifier	sigemptyset		67230	0					
ANR	67250	ArgumentList	& s		67230	1					
ANR	67251	Argument	& s		67230	0					
ANR	67252	UnaryOperationExpression	& s		67230	0					
ANR	67253	UnaryOperator	&		67230	0					
ANR	67254	Identifier	s		67230	1					
ANR	67255	ExpressionStatement	"sigaddset ( & s , sig )"	1216:2:29452:29471	67230	3	True				
ANR	67256	CallExpression	"sigaddset ( & s , sig )"		67230	0					
ANR	67257	Callee	sigaddset		67230	0					
ANR	67258	Identifier	sigaddset		67230	0					
ANR	67259	ArgumentList	& s		67230	1					
ANR	67260	Argument	& s		67230	0					
ANR	67261	UnaryOperationExpression	& s		67230	0					
ANR	67262	UnaryOperator	&		67230	0					
ANR	67263	Identifier	s		67230	1					
ANR	67264	Argument	sig		67230	1					
ANR	67265	Identifier	sig		67230	0					
ANR	67266	ExpressionStatement	"sigprocmask ( SIG_UNBLOCK , & s , ( sigset_t * ) 0 )"	1217:2:29475:29520	67230	4	True				
ANR	67267	CallExpression	"sigprocmask ( SIG_UNBLOCK , & s , ( sigset_t * ) 0 )"		67230	0					
ANR	67268	Callee	sigprocmask		67230	0					
ANR	67269	Identifier	sigprocmask		67230	0					
ANR	67270	ArgumentList	SIG_UNBLOCK		67230	1					
ANR	67271	Argument	SIG_UNBLOCK		67230	0					
ANR	67272	Identifier	SIG_UNBLOCK		67230	0					
ANR	67273	Argument	& s		67230	1					
ANR	67274	UnaryOperationExpression	& s		67230	0					
ANR	67275	UnaryOperator	&		67230	0					
ANR	67276	Identifier	s		67230	1					
ANR	67277	Argument	( sigset_t * ) 0		67230	2					
ANR	67278	CastExpression	( sigset_t * ) 0		67230	0					
ANR	67279	CastTarget	sigset_t *		67230	0					
ANR	67280	PrimaryExpression	0		67230	1					
ANR	67281	ExpressionStatement	raise ( sig )	1218:2:29524:29535	67230	5	True				
ANR	67282	CallExpression	raise ( sig )		67230	0					
ANR	67283	Callee	raise		67230	0					
ANR	67284	Identifier	raise		67230	0					
ANR	67285	ArgumentList	sig		67230	1					
ANR	67286	Argument	sig		67230	0					
ANR	67287	Identifier	sig		67230	0					
ANR	67288	ExpressionStatement	exit ( 2 )	1219:2:29539:29547	67230	6	True				
ANR	67289	CallExpression	exit ( 2 )		67230	0					
ANR	67290	Callee	exit		67230	0					
ANR	67291	Identifier	exit		67230	0					
ANR	67292	ArgumentList	2		67230	1					
ANR	67293	Argument	2		67230	0					
ANR	67294	PrimaryExpression	2		67230	0					
ANR	67295	ReturnType	void		67230	1					
ANR	67296	Identifier	exit_with_signal		67230	2					
ANR	67297	ParameterList	int sig		67230	3					
ANR	67298	Parameter	int sig	1211:18:29380:29386	67230	0	True				
ANR	67299	ParameterType	int		67230	0					
ANR	67300	Identifier	sig		67230	1					
ANR	67301	CFGEntryNode	ENTRY		67230		True				
ANR	67302	CFGExitNode	EXIT		67230		True				
ANR	67303	Symbol	sig		67230						
ANR	67304	Symbol	s		67230						
ANR	67305	Symbol	SIG_UNBLOCK		67230						
ANR	67306	Symbol	SIG_DFL		67230						
ANR	67307	Symbol	& s		67230						
ANR	67308	Function	systemic	1222:0:29552:29681							
ANR	67309	FunctionDef	systemic (char const * command)		67308	0					
ANR	67310	CompoundStatement		1224:0:29587:29681	67308	0					
ANR	67311	IfStatement	if ( debug & 8 )		67308	0					
ANR	67312	Condition	debug & 8	1225:6:29595:29603	67308	0	True				
ANR	67313	BitAndExpression	debug & 8		67308	0		&			
ANR	67314	Identifier	debug		67308	0					
ANR	67315	PrimaryExpression	8		67308	1					
ANR	67316	ExpressionStatement	"say ( ""+ %s\\n"" , command )"	1226:4:29610:29633	67308	1	True				
ANR	67317	CallExpression	"say ( ""+ %s\\n"" , command )"		67308	0					
ANR	67318	Callee	say		67308	0					
ANR	67319	Identifier	say		67308	0					
ANR	67320	ArgumentList	"""+ %s\\n"""		67308	1					
ANR	67321	Argument	"""+ %s\\n"""		67308	0					
ANR	67322	PrimaryExpression	"""+ %s\\n"""		67308	0					
ANR	67323	Argument	command		67308	1					
ANR	67324	Identifier	command		67308	0					
ANR	67325	ExpressionStatement	fflush ( stdout )	1227:2:29637:29652	67308	1	True				
ANR	67326	CallExpression	fflush ( stdout )		67308	0					
ANR	67327	Callee	fflush		67308	0					
ANR	67328	Identifier	fflush		67308	0					
ANR	67329	ArgumentList	stdout		67308	1					
ANR	67330	Argument	stdout		67308	0					
ANR	67331	Identifier	stdout		67308	0					
ANR	67332	ReturnStatement	return system ( command ) ;	1228:2:29656:29679	67308	2	True				
ANR	67333	CallExpression	system ( command )		67308	0					
ANR	67334	Callee	system		67308	0					
ANR	67335	Identifier	system		67308	0					
ANR	67336	ArgumentList	command		67308	1					
ANR	67337	Argument	command		67308	0					
ANR	67338	Identifier	command		67308	0					
ANR	67339	ReturnType	int		67308	1					
ANR	67340	Identifier	systemic		67308	2					
ANR	67341	ParameterList	char const * command		67308	3					
ANR	67342	Parameter	char const * command	1223:10:29566:29584	67308	0	True				
ANR	67343	ParameterType	char const *		67308	0					
ANR	67344	Identifier	command		67308	1					
ANR	67345	CFGEntryNode	ENTRY		67308		True				
ANR	67346	CFGExitNode	EXIT		67308		True				
ANR	67347	Symbol	debug		67308						
ANR	67348	Symbol	system		67308						
ANR	67349	Symbol	stdout		67308						
ANR	67350	Symbol	command		67308						
ANR	67351	Function	replace_slashes	1234:0:29881:30637							
ANR	67352	FunctionDef	replace_slashes (char * filename)		67351	0					
ANR	67353	CompoundStatement		1236:0:29928:30637	67351	0					
ANR	67354	IdentifierDeclStatement	char * f ;	1237:2:29932:29939	67351	0	True				
ANR	67355	IdentifierDecl	* f		67351	0					
ANR	67356	IdentifierDeclType	char *		67351	0					
ANR	67357	Identifier	f		67351	1					
ANR	67358	IdentifierDeclStatement	char * last_location_replaced = 0 ;	1238:2:29943:29975	67351	1	True				
ANR	67359	IdentifierDecl	* last_location_replaced = 0		67351	0					
ANR	67360	IdentifierDeclType	char *		67351	0					
ANR	67361	Identifier	last_location_replaced		67351	1					
ANR	67362	AssignmentExpression	* last_location_replaced = 0		67351	2		=			
ANR	67363	Identifier	last_location_replaced		67351	0					
ANR	67364	PrimaryExpression	0		67351	1					
ANR	67365	IdentifierDeclStatement	char const * component_start ;	1239:2:29979:30006	67351	2	True				
ANR	67366	IdentifierDecl	* component_start		67351	0					
ANR	67367	IdentifierDeclType	char const *		67351	0					
ANR	67368	Identifier	component_start		67351	1					
ANR	67369	ForStatement	for ( f = filename + FILE_SYSTEM_PREFIX_LEN ( filename ) ; ISSLASH ( * f ) ; f ++ )		67351	3					
ANR	67370	ForInit	f = filename + FILE_SYSTEM_PREFIX_LEN ( filename ) ;	1241:7:30016:30064	67351	0	True				
ANR	67371	AssignmentExpression	f = filename + FILE_SYSTEM_PREFIX_LEN ( filename )		67351	0		=			
ANR	67372	Identifier	f		67351	0					
ANR	67373	AdditiveExpression	filename + FILE_SYSTEM_PREFIX_LEN ( filename )		67351	1		+			
ANR	67374	Identifier	filename		67351	0					
ANR	67375	CallExpression	FILE_SYSTEM_PREFIX_LEN ( filename )		67351	1					
ANR	67376	Callee	FILE_SYSTEM_PREFIX_LEN		67351	0					
ANR	67377	Identifier	FILE_SYSTEM_PREFIX_LEN		67351	0					
ANR	67378	ArgumentList	filename		67351	1					
ANR	67379	Argument	filename		67351	0					
ANR	67380	Identifier	filename		67351	0					
ANR	67381	Condition	ISSLASH ( * f )	1241:58:30067:30078	67351	1	True				
ANR	67382	CallExpression	ISSLASH ( * f )		67351	0					
ANR	67383	Callee	ISSLASH		67351	0					
ANR	67384	Identifier	ISSLASH		67351	0					
ANR	67385	ArgumentList	* f		67351	1					
ANR	67386	Argument	* f		67351	0					
ANR	67387	UnaryOperationExpression	* f		67351	0					
ANR	67388	UnaryOperator	*		67351	0					
ANR	67389	Identifier	f		67351	1					
ANR	67390	PostIncDecOperationExpression	f ++	1241:73:30082:30084	67351	2	True				
ANR	67391	Identifier	f		67351	0					
ANR	67392	IncDec	++		67351	1					
ANR	67393	ExpressionStatement		1242:21:30108:30108	67351	3	True				
ANR	67394	ExpressionStatement	component_start = f	1244:2:30113:30132	67351	4	True				
ANR	67395	AssignmentExpression	component_start = f		67351	0		=			
ANR	67396	Identifier	component_start		67351	0					
ANR	67397	Identifier	f		67351	1					
ANR	67398	ForStatement	for ( ; * f ; f ++ )		67351	5					
ANR	67399	Condition	* f	1246:9:30144:30145	67351	0	True				
ANR	67400	UnaryOperationExpression	* f		67351	0					
ANR	67401	UnaryOperator	*		67351	0					
ANR	67402	Identifier	f		67351	1					
ANR	67403	PostIncDecOperationExpression	f ++	1246:13:30148:30150	67351	1	True				
ANR	67404	Identifier	f		67351	0					
ANR	67405	IncDec	++		67351	1					
ANR	67406	IfStatement	if ( ISSLASH ( * f ) )		67351	2					
ANR	67407	Condition	ISSLASH ( * f )	1247:8:30161:30172	67351	0	True				
ANR	67408	CallExpression	ISSLASH ( * f )		67351	0					
ANR	67409	Callee	ISSLASH		67351	0					
ANR	67410	Identifier	ISSLASH		67351	0					
ANR	67411	ArgumentList	* f		67351	1					
ANR	67412	Argument	* f		67351	0					
ANR	67413	UnaryOperationExpression	* f		67351	0					
ANR	67414	UnaryOperator	*		67351	0					
ANR	67415	Identifier	f		67351	1					
ANR	67416	CompoundStatement		14:1:255:270	67351	1					
ANR	67417	IdentifierDeclStatement	char * slash = f ;	1249:1:30184:30199	67351	0	True				
ANR	67418	IdentifierDecl	* slash = f		67351	0					
ANR	67419	IdentifierDeclType	char *		67351	0					
ANR	67420	Identifier	slash		67351	1					
ANR	67421	AssignmentExpression	* slash = f		67351	2		=			
ANR	67422	Identifier	f		67351	0					
ANR	67423	Identifier	f		67351	1					
ANR	67424	WhileStatement	while ( ISSLASH ( f [ 1 ] ) )		67351	1					
ANR	67425	Condition	ISSLASH ( f [ 1 ] )	1252:8:30268:30281	67351	0	True				
ANR	67426	CallExpression	ISSLASH ( f [ 1 ] )		67351	0					
ANR	67427	Callee	ISSLASH		67351	0					
ANR	67428	Identifier	ISSLASH		67351	0					
ANR	67429	ArgumentList	f [ 1 ]		67351	1					
ANR	67430	Argument	f [ 1 ]		67351	0					
ANR	67431	ArrayIndexing	f [ 1 ]		67351	0					
ANR	67432	Identifier	f		67351	0					
ANR	67433	PrimaryExpression	1		67351	1					
ANR	67434	ExpressionStatement	f ++	1253:3:30287:30290	67351	1	True				
ANR	67435	PostIncDecOperationExpression	f ++		67351	0					
ANR	67436	Identifier	f		67351	0					
ANR	67437	IncDec	++		67351	1					
ANR	67438	IfStatement	if ( ! f [ 1 ] )		67351	2					
ANR	67439	Condition	! f [ 1 ]	1256:5:30345:30350	67351	0	True				
ANR	67440	UnaryOperationExpression	! f [ 1 ]		67351	0					
ANR	67441	UnaryOperator	!		67351	0					
ANR	67442	ArrayIndexing	f [ 1 ]		67351	1					
ANR	67443	Identifier	f		67351	0					
ANR	67444	PrimaryExpression	1		67351	1					
ANR	67445	BreakStatement	break ;	1257:3:30356:30361	67351	1	True				
ANR	67446	IfStatement	if ( ! ( slash - component_start <= 2 && component_start [ 0 ] == '.' && slash [ - 1 ] == '.' ) )		67351	3					
ANR	67447	Condition	! ( slash - component_start <= 2 && component_start [ 0 ] == '.' && slash [ - 1 ] == '.' )	1260:5:30410:30498	67351	0	True				
ANR	67448	UnaryOperationExpression	! ( slash - component_start <= 2 && component_start [ 0 ] == '.' && slash [ - 1 ] == '.' )		67351	0					
ANR	67449	UnaryOperator	!		67351	0					
ANR	67450	AndExpression	slash - component_start <= 2 && component_start [ 0 ] == '.' && slash [ - 1 ] == '.'		67351	1		&&			
ANR	67451	RelationalExpression	slash - component_start <= 2		67351	0		<=			
ANR	67452	AdditiveExpression	slash - component_start		67351	0		-			
ANR	67453	Identifier	slash		67351	0					
ANR	67454	Identifier	component_start		67351	1					
ANR	67455	PrimaryExpression	2		67351	1					
ANR	67456	AndExpression	component_start [ 0 ] == '.' && slash [ - 1 ] == '.'		67351	1		&&			
ANR	67457	EqualityExpression	component_start [ 0 ] == '.'		67351	0		==			
ANR	67458	ArrayIndexing	component_start [ 0 ]		67351	0					
ANR	67459	Identifier	component_start		67351	0					
ANR	67460	PrimaryExpression	0		67351	1					
ANR	67461	PrimaryExpression	'.'		67351	1					
ANR	67462	EqualityExpression	slash [ - 1 ] == '.'		67351	1		==			
ANR	67463	ArrayIndexing	slash [ - 1 ]		67351	0					
ANR	67464	Identifier	slash		67351	0					
ANR	67465	UnaryOperationExpression	- 1		67351	1					
ANR	67466	UnaryOperator	-		67351	0					
ANR	67467	PrimaryExpression	1		67351	1					
ANR	67468	PrimaryExpression	'.'		67351	1					
ANR	67469	CompoundStatement		27:3:575:575	67351	1					
ANR	67470	ExpressionStatement	* slash = '\\0'	1263:5:30511:30524	67351	0	True				
ANR	67471	AssignmentExpression	* slash = '\\0'		67351	0		=			
ANR	67472	UnaryOperationExpression	* slash		67351	0					
ANR	67473	UnaryOperator	*		67351	0					
ANR	67474	Identifier	slash		67351	1					
ANR	67475	PrimaryExpression	'\\0'		67351	1					
ANR	67476	ExpressionStatement	last_location_replaced = slash	1264:5:30531:30561	67351	1	True				
ANR	67477	AssignmentExpression	last_location_replaced = slash		67351	0		=			
ANR	67478	Identifier	last_location_replaced		67351	0					
ANR	67479	Identifier	slash		67351	1					
ANR	67480	ExpressionStatement	component_start = f + 1	1267:1:30570:30593	67351	4	True				
ANR	67481	AssignmentExpression	component_start = f + 1		67351	0		=			
ANR	67482	Identifier	component_start		67351	0					
ANR	67483	AdditiveExpression	f + 1		67351	1		+			
ANR	67484	Identifier	f		67351	0					
ANR	67485	PrimaryExpression	1		67351	1					
ANR	67486	ReturnStatement	return last_location_replaced ;	1270:2:30606:30635	67351	6	True				
ANR	67487	Identifier	last_location_replaced		67351	0					
ANR	67488	ReturnType	static char *		67351	1					
ANR	67489	Identifier	replace_slashes		67351	2					
ANR	67490	ParameterList	char * filename		67351	3					
ANR	67491	Parameter	char * filename	1235:17:29912:29925	67351	0	True				
ANR	67492	ParameterType	char *		67351	0					
ANR	67493	Identifier	filename		67351	1					
ANR	67494	CFGEntryNode	ENTRY		67351		True				
ANR	67495	CFGExitNode	EXIT		67351		True				
ANR	67496	Symbol	* f		67351						
ANR	67497	Symbol	* slash		67351						
ANR	67498	Symbol	FILE_SYSTEM_PREFIX_LEN		67351						
ANR	67499	Symbol	filename		67351						
ANR	67500	Symbol	f		67351						
ANR	67501	Symbol	last_location_replaced		67351						
ANR	67502	Symbol	component_start		67351						
ANR	67503	Symbol	* component_start		67351						
ANR	67504	Symbol	slash		67351						
ANR	67505	Symbol	ISSLASH		67351						
ANR	67506	Function	makedirs	1276:0:30745:31586							
ANR	67507	FunctionDef	makedirs (char const * name)		67506	0					
ANR	67508	CompoundStatement		1278:0:30785:31586	67506	0					
ANR	67509	IdentifierDeclStatement	char * filename = xstrdup ( name ) ;	1279:2:30789:30820	67506	0	True				
ANR	67510	IdentifierDecl	* filename = xstrdup ( name )		67506	0					
ANR	67511	IdentifierDeclType	char *		67506	0					
ANR	67512	Identifier	filename		67506	1					
ANR	67513	AssignmentExpression	* filename = xstrdup ( name )		67506	2		=			
ANR	67514	Identifier	filename		67506	0					
ANR	67515	CallExpression	xstrdup ( name )		67506	1					
ANR	67516	Callee	xstrdup		67506	0					
ANR	67517	Identifier	xstrdup		67506	0					
ANR	67518	ArgumentList	name		67506	1					
ANR	67519	Argument	name		67506	0					
ANR	67520	Identifier	name		67506	0					
ANR	67521	IdentifierDeclStatement	char * f ;	1280:2:30824:30831	67506	1	True				
ANR	67522	IdentifierDecl	* f		67506	0					
ANR	67523	IdentifierDeclType	char *		67506	0					
ANR	67524	Identifier	f		67506	1					
ANR	67525	IdentifierDeclStatement	char * flim = replace_slashes ( filename ) ;	1281:2:30835:30874	67506	2	True				
ANR	67526	IdentifierDecl	* flim = replace_slashes ( filename )		67506	0					
ANR	67527	IdentifierDeclType	char *		67506	0					
ANR	67528	Identifier	flim		67506	1					
ANR	67529	AssignmentExpression	* flim = replace_slashes ( filename )		67506	2		=			
ANR	67530	Identifier	flim		67506	0					
ANR	67531	CallExpression	replace_slashes ( filename )		67506	1					
ANR	67532	Callee	replace_slashes		67506	0					
ANR	67533	Identifier	replace_slashes		67506	0					
ANR	67534	ArgumentList	filename		67506	1					
ANR	67535	Argument	filename		67506	0					
ANR	67536	Identifier	filename		67506	0					
ANR	67537	IfStatement	if ( flim )		67506	3					
ANR	67538	Condition	flim	1286:6:31029:31032	67506	0	True				
ANR	67539	Identifier	flim		67506	0					
ANR	67540	CompoundStatement		10:4:253:253	67506	1					
ANR	67541	ForStatement	for ( f = filename ; f <= flim ; f ++ )		67506	0					
ANR	67542	ForInit	f = filename ;	1293:11:31376:31388	67506	0	True				
ANR	67543	AssignmentExpression	f = filename		67506	0		=			
ANR	67544	Identifier	f		67506	0					
ANR	67545	Identifier	filename		67506	1					
ANR	67546	Condition	f <= flim	1293:26:31391:31399	67506	1	True				
ANR	67547	RelationalExpression	f <= flim		67506	0		<=			
ANR	67548	Identifier	f		67506	0					
ANR	67549	Identifier	flim		67506	1					
ANR	67550	PostIncDecOperationExpression	f ++	1293:38:31403:31405	67506	2	True				
ANR	67551	Identifier	f		67506	0					
ANR	67552	IncDec	++		67506	1					
ANR	67553	IfStatement	if ( ! * f )		67506	3					
ANR	67554	Condition	! * f	1294:5:31413:31415	67506	0	True				
ANR	67555	UnaryOperationExpression	! * f		67506	0					
ANR	67556	UnaryOperator	!		67506	0					
ANR	67557	UnaryOperationExpression	* f		67506	1					
ANR	67558	UnaryOperator	*		67506	0					
ANR	67559	Identifier	f		67506	1					
ANR	67560	CompoundStatement		18:3:635:635	67506	1					
ANR	67561	ExpressionStatement	"safe_mkdir ( filename , S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH )"	1296:5:31428:31539	67506	0	True				
ANR	67562	CallExpression	"safe_mkdir ( filename , S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH )"		67506	0					
ANR	67563	Callee	safe_mkdir		67506	0					
ANR	67564	Identifier	safe_mkdir		67506	0					
ANR	67565	ArgumentList	filename		67506	1					
ANR	67566	Argument	filename		67506	0					
ANR	67567	Identifier	filename		67506	0					
ANR	67568	Argument	S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		67506	1					
ANR	67569	InclusiveOrExpression	S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		67506	0		|			
ANR	67570	Identifier	S_IRUSR		67506	0					
ANR	67571	InclusiveOrExpression	S_IWUSR | S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		67506	1		|			
ANR	67572	Identifier	S_IWUSR		67506	0					
ANR	67573	InclusiveOrExpression	S_IXUSR | S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		67506	1		|			
ANR	67574	Identifier	S_IXUSR		67506	0					
ANR	67575	InclusiveOrExpression	S_IRGRP | S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		67506	1		|			
ANR	67576	Identifier	S_IRGRP		67506	0					
ANR	67577	InclusiveOrExpression	S_IWGRP | S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		67506	1		|			
ANR	67578	Identifier	S_IWGRP		67506	0					
ANR	67579	InclusiveOrExpression	S_IXGRP | S_IROTH | S_IWOTH | S_IXOTH		67506	1		|			
ANR	67580	Identifier	S_IXGRP		67506	0					
ANR	67581	InclusiveOrExpression	S_IROTH | S_IWOTH | S_IXOTH		67506	1		|			
ANR	67582	Identifier	S_IROTH		67506	0					
ANR	67583	InclusiveOrExpression	S_IWOTH | S_IXOTH		67506	1		|			
ANR	67584	Identifier	S_IWOTH		67506	0					
ANR	67585	Identifier	S_IXOTH		67506	1					
ANR	67586	ExpressionStatement	* f = '/'	1300:5:31546:31554	67506	1	True				
ANR	67587	AssignmentExpression	* f = '/'		67506	0		=			
ANR	67588	UnaryOperationExpression	* f		67506	0					
ANR	67589	UnaryOperator	*		67506	0					
ANR	67590	Identifier	f		67506	1					
ANR	67591	PrimaryExpression	'/'		67506	1					
ANR	67592	ExpressionStatement	free ( filename )	1303:2:31569:31584	67506	4	True				
ANR	67593	CallExpression	free ( filename )		67506	0					
ANR	67594	Callee	free		67506	0					
ANR	67595	Identifier	free		67506	0					
ANR	67596	ArgumentList	filename		67506	1					
ANR	67597	Argument	filename		67506	0					
ANR	67598	Identifier	filename		67506	0					
ANR	67599	ReturnType	static void		67506	1					
ANR	67600	Identifier	makedirs		67506	2					
ANR	67601	ParameterList	char const * name		67506	3					
ANR	67602	Parameter	char const * name	1277:10:30767:30782	67506	0	True				
ANR	67603	ParameterType	char const *		67506	0					
ANR	67604	Identifier	name		67506	1					
ANR	67605	CFGEntryNode	ENTRY		67506		True				
ANR	67606	CFGExitNode	EXIT		67506		True				
ANR	67607	Symbol	S_IROTH		67506						
ANR	67608	Symbol	S_IWGRP		67506						
ANR	67609	Symbol	S_IXGRP		67506						
ANR	67610	Symbol	f		67506						
ANR	67611	Symbol	S_IWOTH		67506						
ANR	67612	Symbol	xstrdup		67506						
ANR	67613	Symbol	S_IXOTH		67506						
ANR	67614	Symbol	* f		67506						
ANR	67615	Symbol	filename		67506						
ANR	67616	Symbol	S_IRUSR		67506						
ANR	67617	Symbol	S_IWUSR		67506						
ANR	67618	Symbol	S_IXUSR		67506						
ANR	67619	Symbol	name		67506						
ANR	67620	Symbol	flim		67506						
ANR	67621	Symbol	S_IRGRP		67506						
ANR	67622	Symbol	replace_slashes		67506						
ANR	67623	Function	removedirs	1309:0:31781:32350							
ANR	67624	FunctionDef	removedirs (char const * name)		67623	0					
ANR	67625	CompoundStatement		1311:0:31816:32350	67623	0					
ANR	67626	IdentifierDeclStatement	char * filename = xstrdup ( name ) ;	1312:2:31820:31851	67623	0	True				
ANR	67627	IdentifierDecl	* filename = xstrdup ( name )		67623	0					
ANR	67628	IdentifierDeclType	char *		67623	0					
ANR	67629	Identifier	filename		67623	1					
ANR	67630	AssignmentExpression	* filename = xstrdup ( name )		67623	2		=			
ANR	67631	Identifier	filename		67623	0					
ANR	67632	CallExpression	xstrdup ( name )		67623	1					
ANR	67633	Callee	xstrdup		67623	0					
ANR	67634	Identifier	xstrdup		67623	0					
ANR	67635	ArgumentList	name		67623	1					
ANR	67636	Argument	name		67623	0					
ANR	67637	Identifier	name		67623	0					
ANR	67638	IdentifierDeclStatement	size_t i ;	1313:2:31855:31863	67623	1	True				
ANR	67639	IdentifierDecl	i		67623	0					
ANR	67640	IdentifierDeclType	size_t		67623	0					
ANR	67641	Identifier	i		67623	1					
ANR	67642	ForStatement	for ( i = strlen ( filename ) ; i != 0 ; i -- )		67623	2					
ANR	67643	ForInit	i = strlen ( filename ) ;	1315:7:31873:31894	67623	0	True				
ANR	67644	AssignmentExpression	i = strlen ( filename )		67623	0		=			
ANR	67645	Identifier	i		67623	0					
ANR	67646	CallExpression	strlen ( filename )		67623	1					
ANR	67647	Callee	strlen		67623	0					
ANR	67648	Identifier	strlen		67623	0					
ANR	67649	ArgumentList	filename		67623	1					
ANR	67650	Argument	filename		67623	0					
ANR	67651	Identifier	filename		67623	0					
ANR	67652	Condition	i != 0	1315:31:31897:31902	67623	1	True				
ANR	67653	EqualityExpression	i != 0		67623	0		!=			
ANR	67654	Identifier	i		67623	0					
ANR	67655	PrimaryExpression	0		67623	1					
ANR	67656	PostIncDecOperationExpression	i --	1315:40:31906:31908	67623	2	True				
ANR	67657	Identifier	i		67623	0					
ANR	67658	IncDec	--		67623	1					
ANR	67659	IfStatement	if ( ISSLASH ( filename [ i ] ) && ! ( ISSLASH ( filename [ i - 1 ] ) || ( filename [ i - 1 ] == '.' && ( i == 1 || ISSLASH ( filename [ i - 2 ] ) || ( filename [ i - 2 ] == '.' && ( i == 2 || ISSLASH ( filename [ i - 3 ] ) ) ) ) ) ) )		67623	3					
ANR	67660	Condition	ISSLASH ( filename [ i ] ) && ! ( ISSLASH ( filename [ i - 1 ] ) || ( filename [ i - 1 ] == '.' && ( i == 1 || ISSLASH ( filename [ i - 2 ] ) || ( filename [ i - 2 ] == '.' && ( i == 2 || ISSLASH ( filename [ i - 3 ] ) ) ) ) ) )	1316:8:31919:32152	67623	0	True				
ANR	67661	AndExpression	ISSLASH ( filename [ i ] ) && ! ( ISSLASH ( filename [ i - 1 ] ) || ( filename [ i - 1 ] == '.' && ( i == 1 || ISSLASH ( filename [ i - 2 ] ) || ( filename [ i - 2 ] == '.' && ( i == 2 || ISSLASH ( filename [ i - 3 ] ) ) ) ) ) )		67623	0		&&			
ANR	67662	CallExpression	ISSLASH ( filename [ i ] )		67623	0					
ANR	67663	Callee	ISSLASH		67623	0					
ANR	67664	Identifier	ISSLASH		67623	0					
ANR	67665	ArgumentList	filename [ i ]		67623	1					
ANR	67666	Argument	filename [ i ]		67623	0					
ANR	67667	ArrayIndexing	filename [ i ]		67623	0					
ANR	67668	Identifier	filename		67623	0					
ANR	67669	Identifier	i		67623	1					
ANR	67670	UnaryOperationExpression	! ( ISSLASH ( filename [ i - 1 ] ) || ( filename [ i - 1 ] == '.' && ( i == 1 || ISSLASH ( filename [ i - 2 ] ) || ( filename [ i - 2 ] == '.' && ( i == 2 || ISSLASH ( filename [ i - 3 ] ) ) ) ) ) )		67623	1					
ANR	67671	UnaryOperator	!		67623	0					
ANR	67672	OrExpression	ISSLASH ( filename [ i - 1 ] ) || ( filename [ i - 1 ] == '.' && ( i == 1 || ISSLASH ( filename [ i - 2 ] ) || ( filename [ i - 2 ] == '.' && ( i == 2 || ISSLASH ( filename [ i - 3 ] ) ) ) ) )		67623	1		||			
ANR	67673	CallExpression	ISSLASH ( filename [ i - 1 ] )		67623	0					
ANR	67674	Callee	ISSLASH		67623	0					
ANR	67675	Identifier	ISSLASH		67623	0					
ANR	67676	ArgumentList	filename [ i - 1 ]		67623	1					
ANR	67677	Argument	filename [ i - 1 ]		67623	0					
ANR	67678	ArrayIndexing	filename [ i - 1 ]		67623	0					
ANR	67679	Identifier	filename		67623	0					
ANR	67680	AdditiveExpression	i - 1		67623	1		-			
ANR	67681	Identifier	i		67623	0					
ANR	67682	PrimaryExpression	1		67623	1					
ANR	67683	AndExpression	filename [ i - 1 ] == '.' && ( i == 1 || ISSLASH ( filename [ i - 2 ] ) || ( filename [ i - 2 ] == '.' && ( i == 2 || ISSLASH ( filename [ i - 3 ] ) ) ) )		67623	1		&&			
ANR	67684	EqualityExpression	filename [ i - 1 ] == '.'		67623	0		==			
ANR	67685	ArrayIndexing	filename [ i - 1 ]		67623	0					
ANR	67686	Identifier	filename		67623	0					
ANR	67687	AdditiveExpression	i - 1		67623	1		-			
ANR	67688	Identifier	i		67623	0					
ANR	67689	PrimaryExpression	1		67623	1					
ANR	67690	PrimaryExpression	'.'		67623	1					
ANR	67691	OrExpression	i == 1 || ISSLASH ( filename [ i - 2 ] ) || ( filename [ i - 2 ] == '.' && ( i == 2 || ISSLASH ( filename [ i - 3 ] ) ) )		67623	1		||			
ANR	67692	EqualityExpression	i == 1		67623	0		==			
ANR	67693	Identifier	i		67623	0					
ANR	67694	PrimaryExpression	1		67623	1					
ANR	67695	OrExpression	ISSLASH ( filename [ i - 2 ] ) || ( filename [ i - 2 ] == '.' && ( i == 2 || ISSLASH ( filename [ i - 3 ] ) ) )		67623	1		||			
ANR	67696	CallExpression	ISSLASH ( filename [ i - 2 ] )		67623	0					
ANR	67697	Callee	ISSLASH		67623	0					
ANR	67698	Identifier	ISSLASH		67623	0					
ANR	67699	ArgumentList	filename [ i - 2 ]		67623	1					
ANR	67700	Argument	filename [ i - 2 ]		67623	0					
ANR	67701	ArrayIndexing	filename [ i - 2 ]		67623	0					
ANR	67702	Identifier	filename		67623	0					
ANR	67703	AdditiveExpression	i - 2		67623	1		-			
ANR	67704	Identifier	i		67623	0					
ANR	67705	PrimaryExpression	2		67623	1					
ANR	67706	AndExpression	filename [ i - 2 ] == '.' && ( i == 2 || ISSLASH ( filename [ i - 3 ] ) )		67623	1		&&			
ANR	67707	EqualityExpression	filename [ i - 2 ] == '.'		67623	0		==			
ANR	67708	ArrayIndexing	filename [ i - 2 ]		67623	0					
ANR	67709	Identifier	filename		67623	0					
ANR	67710	AdditiveExpression	i - 2		67623	1		-			
ANR	67711	Identifier	i		67623	0					
ANR	67712	PrimaryExpression	2		67623	1					
ANR	67713	PrimaryExpression	'.'		67623	1					
ANR	67714	OrExpression	i == 2 || ISSLASH ( filename [ i - 3 ] )		67623	1		||			
ANR	67715	EqualityExpression	i == 2		67623	0		==			
ANR	67716	Identifier	i		67623	0					
ANR	67717	PrimaryExpression	2		67623	1					
ANR	67718	CallExpression	ISSLASH ( filename [ i - 3 ] )		67623	1					
ANR	67719	Callee	ISSLASH		67623	0					
ANR	67720	Identifier	ISSLASH		67623	0					
ANR	67721	ArgumentList	filename [ i - 3 ]		67623	1					
ANR	67722	Argument	filename [ i - 3 ]		67623	0					
ANR	67723	ArrayIndexing	filename [ i - 3 ]		67623	0					
ANR	67724	Identifier	filename		67623	0					
ANR	67725	AdditiveExpression	i - 3		67623	1		-			
ANR	67726	Identifier	i		67623	0					
ANR	67727	PrimaryExpression	3		67623	1					
ANR	67728	CompoundStatement		14:6:344:344	67623	1					
ANR	67729	ExpressionStatement	filename [ i ] = '\\0'	1325:1:32164:32182	67623	0	True				
ANR	67730	AssignmentExpression	filename [ i ] = '\\0'		67623	0		=			
ANR	67731	ArrayIndexing	filename [ i ]		67623	0					
ANR	67732	Identifier	filename		67623	0					
ANR	67733	Identifier	i		67623	1					
ANR	67734	PrimaryExpression	'\\0'		67623	1					
ANR	67735	IfStatement	if ( safe_rmdir ( filename ) == 0 && verbosity == VERBOSE )		67623	1					
ANR	67736	Condition	safe_rmdir ( filename ) == 0 && verbosity == VERBOSE	1326:5:32189:32238	67623	0	True				
ANR	67737	AndExpression	safe_rmdir ( filename ) == 0 && verbosity == VERBOSE		67623	0		&&			
ANR	67738	EqualityExpression	safe_rmdir ( filename ) == 0		67623	0		==			
ANR	67739	CallExpression	safe_rmdir ( filename )		67623	0					
ANR	67740	Callee	safe_rmdir		67623	0					
ANR	67741	Identifier	safe_rmdir		67623	0					
ANR	67742	ArgumentList	filename		67623	1					
ANR	67743	Argument	filename		67623	0					
ANR	67744	Identifier	filename		67623	0					
ANR	67745	PrimaryExpression	0		67623	1					
ANR	67746	EqualityExpression	verbosity == VERBOSE		67623	1		==			
ANR	67747	Identifier	verbosity		67623	0					
ANR	67748	Identifier	VERBOSE		67623	1					
ANR	67749	ExpressionStatement	"say ( ""Removed empty directory %s\\n"" , quotearg ( filename ) )"	1327:3:32244:32301	67623	1	True				
ANR	67750	CallExpression	"say ( ""Removed empty directory %s\\n"" , quotearg ( filename ) )"		67623	0					
ANR	67751	Callee	say		67623	0					
ANR	67752	Identifier	say		67623	0					
ANR	67753	ArgumentList	"""Removed empty directory %s\\n"""		67623	1					
ANR	67754	Argument	"""Removed empty directory %s\\n"""		67623	0					
ANR	67755	PrimaryExpression	"""Removed empty directory %s\\n"""		67623	0					
ANR	67756	Argument	quotearg ( filename )		67623	1					
ANR	67757	CallExpression	quotearg ( filename )		67623	0					
ANR	67758	Callee	quotearg		67623	0					
ANR	67759	Identifier	quotearg		67623	0					
ANR	67760	ArgumentList	filename		67623	1					
ANR	67761	Argument	filename		67623	0					
ANR	67762	Identifier	filename		67623	0					
ANR	67763	ExpressionStatement	filename [ i ] = '/'	1328:1:32304:32321	67623	2	True				
ANR	67764	AssignmentExpression	filename [ i ] = '/'		67623	0		=			
ANR	67765	ArrayIndexing	filename [ i ]		67623	0					
ANR	67766	Identifier	filename		67623	0					
ANR	67767	Identifier	i		67623	1					
ANR	67768	PrimaryExpression	'/'		67623	1					
ANR	67769	ExpressionStatement	free ( filename )	1330:2:32333:32348	67623	3	True				
ANR	67770	CallExpression	free ( filename )		67623	0					
ANR	67771	Callee	free		67623	0					
ANR	67772	Identifier	free		67623	0					
ANR	67773	ArgumentList	filename		67623	1					
ANR	67774	Argument	filename		67623	0					
ANR	67775	Identifier	filename		67623	0					
ANR	67776	ReturnType	void		67623	1					
ANR	67777	Identifier	removedirs		67623	2					
ANR	67778	ParameterList	char const * name		67623	3					
ANR	67779	Parameter	char const * name	1310:12:31798:31813	67623	0	True				
ANR	67780	ParameterType	char const *		67623	0					
ANR	67781	Identifier	name		67623	1					
ANR	67782	CFGEntryNode	ENTRY		67623		True				
ANR	67783	CFGExitNode	EXIT		67623		True				
ANR	67784	Symbol	strlen		67623						
ANR	67785	Symbol	filename		67623						
ANR	67786	Symbol	* i		67623						
ANR	67787	Symbol	* filename		67623						
ANR	67788	Symbol	quotearg		67623						
ANR	67789	Symbol	xstrdup		67623						
ANR	67790	Symbol	name		67623						
ANR	67791	Symbol	i		67623						
ANR	67792	Symbol	VERBOSE		67623						
ANR	67793	Symbol	ISSLASH		67623						
ANR	67794	Symbol	verbosity		67623						
ANR	67795	Symbol	safe_rmdir		67623						
ANR	67796	DeclStmt									
ANR	67797	Decl							struct timespec	struct timespec	initial_time
ANR	67798	Function	init_time	1335:0:32391:32442							
ANR	67799	FunctionDef	init_time ()		67798	0					
ANR	67800	CompoundStatement		1337:0:32413:32442	67798	0					
ANR	67801	ExpressionStatement	gettime ( & initial_time )	1338:2:32417:32440	67798	0	True				
ANR	67802	CallExpression	gettime ( & initial_time )		67798	0					
ANR	67803	Callee	gettime		67798	0					
ANR	67804	Identifier	gettime		67798	0					
ANR	67805	ArgumentList	& initial_time		67798	1					
ANR	67806	Argument	& initial_time		67798	0					
ANR	67807	UnaryOperationExpression	& initial_time		67798	0					
ANR	67808	UnaryOperator	&		67798	0					
ANR	67809	Identifier	initial_time		67798	1					
ANR	67810	ReturnType	void		67798	1					
ANR	67811	Identifier	init_time		67798	2					
ANR	67812	ParameterList			67798	3					
ANR	67813	CFGEntryNode	ENTRY		67798		True				
ANR	67814	CFGExitNode	EXIT		67798		True				
ANR	67815	Symbol	& initial_time		67798						
ANR	67816	Function	parse_c_string	1341:0:32445:33604							
ANR	67817	FunctionDef	"parse_c_string (char const * s , char const * * endp)"		67816	0					
ANR	67818	CompoundStatement		1343:0:32509:33604	67816	0					
ANR	67819	IdentifierDeclStatement	"char * u , * v ;"	1344:2:32513:32524	67816	0	True				
ANR	67820	IdentifierDecl	* u		67816	0					
ANR	67821	IdentifierDeclType	char *		67816	0					
ANR	67822	Identifier	u		67816	1					
ANR	67823	IdentifierDecl	* v		67816	1					
ANR	67824	IdentifierDeclType	char *		67816	0					
ANR	67825	Identifier	v		67816	1					
ANR	67826	ExpressionStatement	"assert ( * s == '""' )"	1346:2:32529:32547	67816	1	True				
ANR	67827	CallExpression	"assert ( * s == '""' )"		67816	0					
ANR	67828	Callee	assert		67816	0					
ANR	67829	Identifier	assert		67816	0					
ANR	67830	ArgumentList	"* s == '""'"		67816	1					
ANR	67831	Argument	"* s == '""'"		67816	0					
ANR	67832	EqualityExpression	"* s == '""'"		67816	0		==			
ANR	67833	UnaryOperationExpression	* s		67816	0					
ANR	67834	UnaryOperator	*		67816	0					
ANR	67835	Identifier	s		67816	1					
ANR	67836	PrimaryExpression	"'""'"		67816	1					
ANR	67837	ExpressionStatement	s ++	1347:2:32551:32554	67816	2	True				
ANR	67838	PostIncDecOperationExpression	s ++		67816	0					
ANR	67839	Identifier	s		67816	0					
ANR	67840	IncDec	++		67816	1					
ANR	67841	ExpressionStatement	u = v = xmalloc ( strlen ( s ) )	1348:2:32558:32586	67816	3	True				
ANR	67842	AssignmentExpression	u = v = xmalloc ( strlen ( s ) )		67816	0		=			
ANR	67843	Identifier	u		67816	0					
ANR	67844	AssignmentExpression	v = xmalloc ( strlen ( s ) )		67816	1		=			
ANR	67845	Identifier	v		67816	0					
ANR	67846	CallExpression	xmalloc ( strlen ( s ) )		67816	1					
ANR	67847	Callee	xmalloc		67816	0					
ANR	67848	Identifier	xmalloc		67816	0					
ANR	67849	ArgumentList	strlen ( s )		67816	1					
ANR	67850	Argument	strlen ( s )		67816	0					
ANR	67851	CallExpression	strlen ( s )		67816	0					
ANR	67852	Callee	strlen		67816	0					
ANR	67853	Identifier	strlen		67816	0					
ANR	67854	ArgumentList	s		67816	1					
ANR	67855	Argument	s		67816	0					
ANR	67856	Identifier	s		67816	0					
ANR	67857	ForStatement	for ( ; ; )		67816	4					
ANR	67858	CompoundStatement		9:6:101:114	67816	0					
ANR	67859	IdentifierDeclStatement	char c = * s ++ ;	1351:6:32611:32624	67816	0	True				
ANR	67860	IdentifierDecl	c = * s ++		67816	0					
ANR	67861	IdentifierDeclType	char		67816	0					
ANR	67862	Identifier	c		67816	1					
ANR	67863	AssignmentExpression	c = * s ++		67816	2		=			
ANR	67864	Identifier	c		67816	0					
ANR	67865	UnaryOperationExpression	* s ++		67816	1					
ANR	67866	UnaryOperator	*		67816	0					
ANR	67867	PostIncDecOperationExpression	s ++		67816	1					
ANR	67868	Identifier	s		67816	0					
ANR	67869	IncDec	++		67816	1					
ANR	67870	SwitchStatement	switch ( c )		67816	1					
ANR	67871	Condition	c	1353:14:32641:32641	67816	0	True				
ANR	67872	Identifier	c		67816	0					
ANR	67873	CompoundStatement		12:1:135:135	67816	1					
ANR	67874	Label	case 0 :	1355:3:32650:32656	67816	0	True				
ANR	67875	GotoStatement	goto fail ;	1356:5:32663:32672	67816	1	True				
ANR	67876	Identifier	fail		67816	0					
ANR	67877	Label	"case '""' :"	1358:3:32678:32686	67816	2	True				
ANR	67878	ExpressionStatement	* v ++ = 0	1359:5:32693:32701	67816	3	True				
ANR	67879	AssignmentExpression	* v ++ = 0		67816	0		=			
ANR	67880	UnaryOperationExpression	* v ++		67816	0					
ANR	67881	UnaryOperator	*		67816	0					
ANR	67882	PostIncDecOperationExpression	v ++		67816	1					
ANR	67883	Identifier	v		67816	0					
ANR	67884	IncDec	++		67816	1					
ANR	67885	PrimaryExpression	0		67816	1					
ANR	67886	ExpressionStatement	"v = realloc ( u , v - u )"	1360:5:32708:32730	67816	4	True				
ANR	67887	AssignmentExpression	"v = realloc ( u , v - u )"		67816	0		=			
ANR	67888	Identifier	v		67816	0					
ANR	67889	CallExpression	"realloc ( u , v - u )"		67816	1					
ANR	67890	Callee	realloc		67816	0					
ANR	67891	Identifier	realloc		67816	0					
ANR	67892	ArgumentList	u		67816	1					
ANR	67893	Argument	u		67816	0					
ANR	67894	Identifier	u		67816	0					
ANR	67895	Argument	v - u		67816	1					
ANR	67896	AdditiveExpression	v - u		67816	0		-			
ANR	67897	Identifier	v		67816	0					
ANR	67898	Identifier	u		67816	1					
ANR	67899	IfStatement	if ( v )		67816	5					
ANR	67900	Condition	v	1361:9:32741:32741	67816	0	True				
ANR	67901	Identifier	v		67816	0					
ANR	67902	ExpressionStatement	u = v	1362:7:32751:32756	67816	1	True				
ANR	67903	AssignmentExpression	u = v		67816	0		=			
ANR	67904	Identifier	u		67816	0					
ANR	67905	Identifier	v		67816	1					
ANR	67906	IfStatement	if ( endp )		67816	6					
ANR	67907	Condition	endp	1363:9:32767:32770	67816	0	True				
ANR	67908	Identifier	endp		67816	0					
ANR	67909	ExpressionStatement	* endp = s	1364:7:32780:32789	67816	1	True				
ANR	67910	AssignmentExpression	* endp = s		67816	0		=			
ANR	67911	UnaryOperationExpression	* endp		67816	0					
ANR	67912	UnaryOperator	*		67816	0					
ANR	67913	Identifier	endp		67816	1					
ANR	67914	Identifier	s		67816	1					
ANR	67915	ReturnStatement	return u ;	1365:5:32796:32804	67816	7	True				
ANR	67916	Identifier	u		67816	0					
ANR	67917	Label	case '\\\\' :	1367:3:32810:32819	67816	8	True				
ANR	67918	BreakStatement	break ;	1368:5:32826:32831	67816	9	True				
ANR	67919	Label	default :	1370:3:32837:32844	67816	10	True				
ANR	67920	Identifier	default		67816	0					
ANR	67921	ExpressionStatement	* v ++ = c	1371:5:32851:32859	67816	11	True				
ANR	67922	AssignmentExpression	* v ++ = c		67816	0		=			
ANR	67923	UnaryOperationExpression	* v ++		67816	0					
ANR	67924	UnaryOperator	*		67816	0					
ANR	67925	PostIncDecOperationExpression	v ++		67816	1					
ANR	67926	Identifier	v		67816	0					
ANR	67927	IncDec	++		67816	1					
ANR	67928	Identifier	c		67816	1					
ANR	67929	ContinueStatement	continue ;	1372:5:32866:32874	67816	12	True				
ANR	67930	ExpressionStatement	c = * s ++	1375:6:32886:32894	67816	2	True				
ANR	67931	AssignmentExpression	c = * s ++		67816	0		=			
ANR	67932	Identifier	c		67816	0					
ANR	67933	UnaryOperationExpression	* s ++		67816	1					
ANR	67934	UnaryOperator	*		67816	0					
ANR	67935	PostIncDecOperationExpression	s ++		67816	1					
ANR	67936	Identifier	s		67816	0					
ANR	67937	IncDec	++		67816	1					
ANR	67938	SwitchStatement	switch ( c )		67816	3					
ANR	67939	Condition	c	1376:14:32910:32910	67816	0	True				
ANR	67940	Identifier	c		67816	0					
ANR	67941	CompoundStatement		35:1:404:404	67816	1					
ANR	67942	Label	case 'a' :	1378:3:32919:32927	67816	0	True				
ANR	67943	ExpressionStatement	c = '\\a'	1378:13:32929:32937	67816	1	True				
ANR	67944	AssignmentExpression	c = '\\a'		67816	0		=			
ANR	67945	Identifier	c		67816	0					
ANR	67946	PrimaryExpression	'\\a'		67816	1					
ANR	67947	BreakStatement	break ;	1378:23:32939:32944	67816	2	True				
ANR	67948	Label	case 'b' :	1379:3:32949:32957	67816	3	True				
ANR	67949	ExpressionStatement	c = '\\b'	1379:13:32959:32967	67816	4	True				
ANR	67950	AssignmentExpression	c = '\\b'		67816	0		=			
ANR	67951	Identifier	c		67816	0					
ANR	67952	PrimaryExpression	'\\b'		67816	1					
ANR	67953	BreakStatement	break ;	1379:23:32969:32974	67816	5	True				
ANR	67954	Label	case 'f' :	1380:3:32979:32987	67816	6	True				
ANR	67955	ExpressionStatement	c = '\\f'	1380:13:32989:32997	67816	7	True				
ANR	67956	AssignmentExpression	c = '\\f'		67816	0		=			
ANR	67957	Identifier	c		67816	0					
ANR	67958	PrimaryExpression	'\\f'		67816	1					
ANR	67959	BreakStatement	break ;	1380:23:32999:33004	67816	8	True				
ANR	67960	Label	case 'n' :	1381:3:33009:33017	67816	9	True				
ANR	67961	ExpressionStatement	c = '\\n'	1381:13:33019:33027	67816	10	True				
ANR	67962	AssignmentExpression	c = '\\n'		67816	0		=			
ANR	67963	Identifier	c		67816	0					
ANR	67964	PrimaryExpression	'\\n'		67816	1					
ANR	67965	BreakStatement	break ;	1381:23:33029:33034	67816	11	True				
ANR	67966	Label	case 'r' :	1382:3:33039:33047	67816	12	True				
ANR	67967	ExpressionStatement	c = '\\r'	1382:13:33049:33057	67816	13	True				
ANR	67968	AssignmentExpression	c = '\\r'		67816	0		=			
ANR	67969	Identifier	c		67816	0					
ANR	67970	PrimaryExpression	'\\r'		67816	1					
ANR	67971	BreakStatement	break ;	1382:23:33059:33064	67816	14	True				
ANR	67972	Label	case 't' :	1383:3:33069:33077	67816	15	True				
ANR	67973	ExpressionStatement	c = '\\t'	1383:13:33079:33087	67816	16	True				
ANR	67974	AssignmentExpression	c = '\\t'		67816	0		=			
ANR	67975	Identifier	c		67816	0					
ANR	67976	PrimaryExpression	'\\t'		67816	1					
ANR	67977	BreakStatement	break ;	1383:23:33089:33094	67816	17	True				
ANR	67978	Label	case 'v' :	1384:3:33099:33107	67816	18	True				
ANR	67979	ExpressionStatement	c = '\\v'	1384:13:33109:33117	67816	19	True				
ANR	67980	AssignmentExpression	c = '\\v'		67816	0		=			
ANR	67981	Identifier	c		67816	0					
ANR	67982	PrimaryExpression	'\\v'		67816	1					
ANR	67983	BreakStatement	break ;	1384:23:33119:33124	67816	20	True				
ANR	67984	Label	case '\\\\' :	1385:3:33129:33138	67816	21	True				
ANR	67985	Label	"case '""' :"	1385:14:33140:33148	67816	22	True				
ANR	67986	BreakStatement	break ;	1386:5:33155:33160	67816	23	True				
ANR	67987	Label	case '0' :	1387:3:33181:33189	67816	24	True				
ANR	67988	Label	case '1' :	1387:13:33191:33199	67816	25	True				
ANR	67989	Label	case '2' :	1387:23:33201:33209	67816	26	True				
ANR	67990	Label	case '3' :	1387:33:33211:33219	67816	27	True				
ANR	67991	CompoundStatement		47:7:725:749	67816	28					
ANR	67992	IdentifierDeclStatement	int acc = ( c - '0' ) << 6 ;	1389:7:33235:33259	67816	0	True				
ANR	67993	IdentifierDecl	acc = ( c - '0' ) << 6		67816	0					
ANR	67994	IdentifierDeclType	int		67816	0					
ANR	67995	Identifier	acc		67816	1					
ANR	67996	AssignmentExpression	acc = ( c - '0' ) << 6		67816	2		=			
ANR	67997	Identifier	acc		67816	0					
ANR	67998	ShiftExpression	( c - '0' ) << 6		67816	1		<<			
ANR	67999	AdditiveExpression	c - '0'		67816	0		-			
ANR	68000	Identifier	c		67816	0					
ANR	68001	PrimaryExpression	'0'		67816	1					
ANR	68002	PrimaryExpression	6		67816	1					
ANR	68003	ExpressionStatement	c = * s ++	1391:7:33269:33277	67816	1	True				
ANR	68004	AssignmentExpression	c = * s ++		67816	0		=			
ANR	68005	Identifier	c		67816	0					
ANR	68006	UnaryOperationExpression	* s ++		67816	1					
ANR	68007	UnaryOperator	*		67816	0					
ANR	68008	PostIncDecOperationExpression	s ++		67816	1					
ANR	68009	Identifier	s		67816	0					
ANR	68010	IncDec	++		67816	1					
ANR	68011	IfStatement	if ( c < '0' || c > '7' )		67816	2					
ANR	68012	Condition	c < '0' || c > '7'	1392:11:33290:33307	67816	0	True				
ANR	68013	OrExpression	c < '0' || c > '7'		67816	0		||			
ANR	68014	RelationalExpression	c < '0'		67816	0		<			
ANR	68015	Identifier	c		67816	0					
ANR	68016	PrimaryExpression	'0'		67816	1					
ANR	68017	RelationalExpression	c > '7'		67816	1		>			
ANR	68018	Identifier	c		67816	0					
ANR	68019	PrimaryExpression	'7'		67816	1					
ANR	68020	GotoStatement	goto fail ;	1393:9:33319:33328	67816	1	True				
ANR	68021	Identifier	fail		67816	0					
ANR	68022	ExpressionStatement	acc |= ( c - '0' ) << 3	1394:7:33337:33358	67816	3	True				
ANR	68023	AssignmentExpression	acc |= ( c - '0' ) << 3		67816	0		|=			
ANR	68024	Identifier	acc		67816	0					
ANR	68025	ShiftExpression	( c - '0' ) << 3		67816	1		<<			
ANR	68026	AdditiveExpression	c - '0'		67816	0		-			
ANR	68027	Identifier	c		67816	0					
ANR	68028	PrimaryExpression	'0'		67816	1					
ANR	68029	PrimaryExpression	3		67816	1					
ANR	68030	ExpressionStatement	c = * s ++	1395:7:33367:33375	67816	4	True				
ANR	68031	AssignmentExpression	c = * s ++		67816	0		=			
ANR	68032	Identifier	c		67816	0					
ANR	68033	UnaryOperationExpression	* s ++		67816	1					
ANR	68034	UnaryOperator	*		67816	0					
ANR	68035	PostIncDecOperationExpression	s ++		67816	1					
ANR	68036	Identifier	s		67816	0					
ANR	68037	IncDec	++		67816	1					
ANR	68038	IfStatement	if ( c < '0' || c > '7' )		67816	5					
ANR	68039	Condition	c < '0' || c > '7'	1396:11:33388:33405	67816	0	True				
ANR	68040	OrExpression	c < '0' || c > '7'		67816	0		||			
ANR	68041	RelationalExpression	c < '0'		67816	0		<			
ANR	68042	Identifier	c		67816	0					
ANR	68043	PrimaryExpression	'0'		67816	1					
ANR	68044	RelationalExpression	c > '7'		67816	1		>			
ANR	68045	Identifier	c		67816	0					
ANR	68046	PrimaryExpression	'7'		67816	1					
ANR	68047	GotoStatement	goto fail ;	1397:9:33417:33426	67816	1	True				
ANR	68048	Identifier	fail		67816	0					
ANR	68049	ExpressionStatement	acc |= ( c - '0' )	1398:7:33435:33451	67816	6	True				
ANR	68050	AssignmentExpression	acc |= ( c - '0' )		67816	0		|=			
ANR	68051	Identifier	acc		67816	0					
ANR	68052	AdditiveExpression	c - '0'		67816	1		-			
ANR	68053	Identifier	c		67816	0					
ANR	68054	PrimaryExpression	'0'		67816	1					
ANR	68055	ExpressionStatement	c = acc	1399:7:33460:33467	67816	7	True				
ANR	68056	AssignmentExpression	c = acc		67816	0		=			
ANR	68057	Identifier	c		67816	0					
ANR	68058	Identifier	acc		67816	1					
ANR	68059	BreakStatement	break ;	1400:7:33476:33481	67816	8	True				
ANR	68060	Label	default :	1402:3:33493:33500	67816	29	True				
ANR	68061	Identifier	default		67816	0					
ANR	68062	GotoStatement	goto fail ;	1403:5:33507:33516	67816	30	True				
ANR	68063	Identifier	fail		67816	0					
ANR	68064	ExpressionStatement	* v ++ = c	1405:6:33527:33535	67816	4	True				
ANR	68065	AssignmentExpression	* v ++ = c		67816	0		=			
ANR	68066	UnaryOperationExpression	* v ++		67816	0					
ANR	68067	UnaryOperator	*		67816	0					
ANR	68068	PostIncDecOperationExpression	v ++		67816	1					
ANR	68069	Identifier	v		67816	0					
ANR	68070	IncDec	++		67816	1					
ANR	68071	Identifier	c		67816	1					
ANR	68072	Label	fail :	1408:0:33544:33548	67816	5	True				
ANR	68073	Identifier	fail		67816	0					
ANR	68074	ExpressionStatement	free ( u )	1409:2:33552:33560	67816	6	True				
ANR	68075	CallExpression	free ( u )		67816	0					
ANR	68076	Callee	free		67816	0					
ANR	68077	Identifier	free		67816	0					
ANR	68078	ArgumentList	u		67816	1					
ANR	68079	Argument	u		67816	0					
ANR	68080	Identifier	u		67816	0					
ANR	68081	IfStatement	if ( endp )		67816	7					
ANR	68082	Condition	endp	1410:6:33568:33571	67816	0	True				
ANR	68083	Identifier	endp		67816	0					
ANR	68084	ExpressionStatement	* endp = s	1411:4:33578:33587	67816	1	True				
ANR	68085	AssignmentExpression	* endp = s		67816	0		=			
ANR	68086	UnaryOperationExpression	* endp		67816	0					
ANR	68087	UnaryOperator	*		67816	0					
ANR	68088	Identifier	endp		67816	1					
ANR	68089	Identifier	s		67816	1					
ANR	68090	ReturnStatement	return NULL ;	1412:2:33591:33602	67816	8	True				
ANR	68091	Identifier	NULL		67816	0					
ANR	68092	ReturnType	static char *		67816	1					
ANR	68093	Identifier	parse_c_string		67816	2					
ANR	68094	ParameterList	"char const * s , char const * * endp"		67816	3					
ANR	68095	Parameter	char const * s	1342:16:32475:32487	67816	0	True				
ANR	68096	ParameterType	char const *		67816	0					
ANR	68097	Identifier	s		67816	1					
ANR	68098	Parameter	char const * * endp	1342:31:32490:32506	67816	1	True				
ANR	68099	ParameterType	char const * *		67816	0					
ANR	68100	Identifier	endp		67816	1					
ANR	68101	CFGEntryNode	ENTRY		67816		True				
ANR	68102	CFGExitNode	EXIT		67816		True				
ANR	68103	InfiniteForNode	true		67816		True				
ANR	68104	Symbol	* s ++		67816						
ANR	68105	Symbol	acc		67816						
ANR	68106	Symbol	c		67816						
ANR	68107	Symbol	NULL		67816						
ANR	68108	Symbol	* v ++		67816						
ANR	68109	Symbol	realloc		67816						
ANR	68110	Symbol	strlen		67816						
ANR	68111	Symbol	s		67816						
ANR	68112	Symbol	u		67816						
ANR	68113	Symbol	xmalloc		67816						
ANR	68114	Symbol	* endp		67816						
ANR	68115	Symbol	v		67816						
ANR	68116	Symbol	endp		67816						
ANR	68117	Symbol	* s		67816						
ANR	68118	Function	strip_leading_slashes	1419:0:33781:34194							
ANR	68119	FunctionDef	"strip_leading_slashes (char * name , int strip_leading)"		68118	0					
ANR	68120	CompoundStatement		1421:0:33847:34194	68118	0					
ANR	68121	IdentifierDeclStatement	int s = strip_leading ;	1422:2:33851:33872	68118	0	True				
ANR	68122	IdentifierDecl	s = strip_leading		68118	0					
ANR	68123	IdentifierDeclType	int		68118	0					
ANR	68124	Identifier	s		68118	1					
ANR	68125	AssignmentExpression	s = strip_leading		68118	2		=			
ANR	68126	Identifier	strip_leading		68118	0					
ANR	68127	Identifier	strip_leading		68118	1					
ANR	68128	IdentifierDeclStatement	"char * p , * n ;"	1423:2:33876:33887	68118	1	True				
ANR	68129	IdentifierDecl	* p		68118	0					
ANR	68130	IdentifierDeclType	char *		68118	0					
ANR	68131	Identifier	p		68118	1					
ANR	68132	IdentifierDecl	* n		68118	1					
ANR	68133	IdentifierDeclType	char *		68118	0					
ANR	68134	Identifier	n		68118	1					
ANR	68135	ForStatement	for ( p = n = name ; * p ; p ++ )		68118	2					
ANR	68136	ForInit	p = n = name ;	1425:7:33897:33909	68118	0	True				
ANR	68137	AssignmentExpression	p = n = name		68118	0		=			
ANR	68138	Identifier	p		68118	0					
ANR	68139	AssignmentExpression	n = name		68118	1		=			
ANR	68140	Identifier	n		68118	0					
ANR	68141	Identifier	name		68118	1					
ANR	68142	Condition	* p	1425:22:33912:33913	68118	1	True				
ANR	68143	UnaryOperationExpression	* p		68118	0					
ANR	68144	UnaryOperator	*		68118	0					
ANR	68145	Identifier	p		68118	1					
ANR	68146	PostIncDecOperationExpression	p ++	1425:27:33917:33919	68118	2	True				
ANR	68147	Identifier	p		68118	0					
ANR	68148	IncDec	++		68118	1					
ANR	68149	CompoundStatement		6:4:78:78	68118	3					
ANR	68150	IfStatement	if ( ISSLASH ( * p ) )		68118	0					
ANR	68151	Condition	ISSLASH ( * p )	1427:10:33938:33949	68118	0	True				
ANR	68152	CallExpression	ISSLASH ( * p )		68118	0					
ANR	68153	Callee	ISSLASH		68118	0					
ANR	68154	Identifier	ISSLASH		68118	0					
ANR	68155	ArgumentList	* p		68118	1					
ANR	68156	Argument	* p		68118	0					
ANR	68157	UnaryOperationExpression	* p		68118	0					
ANR	68158	UnaryOperator	*		68118	0					
ANR	68159	Identifier	p		68118	1					
ANR	68160	CompoundStatement		8:1:105:105	68118	1					
ANR	68161	WhileStatement	while ( ISSLASH ( p [ 1 ] ) )		68118	0					
ANR	68162	Condition	ISSLASH ( p [ 1 ] )	1429:10:33965:33978	68118	0	True				
ANR	68163	CallExpression	ISSLASH ( p [ 1 ] )		68118	0					
ANR	68164	Callee	ISSLASH		68118	0					
ANR	68165	Identifier	ISSLASH		68118	0					
ANR	68166	ArgumentList	p [ 1 ]		68118	1					
ANR	68167	Argument	p [ 1 ]		68118	0					
ANR	68168	ArrayIndexing	p [ 1 ]		68118	0					
ANR	68169	Identifier	p		68118	0					
ANR	68170	PrimaryExpression	1		68118	1					
ANR	68171	ExpressionStatement	p ++	1430:5:33986:33989	68118	1	True				
ANR	68172	PostIncDecOperationExpression	p ++		68118	0					
ANR	68173	Identifier	p		68118	0					
ANR	68174	IncDec	++		68118	1					
ANR	68175	IfStatement	if ( strip_leading < 0 || -- s >= 0 )		68118	1					
ANR	68176	Condition	strip_leading < 0 || -- s >= 0	1431:7:33998:34026	68118	0	True				
ANR	68177	OrExpression	strip_leading < 0 || -- s >= 0		68118	0		||			
ANR	68178	RelationalExpression	strip_leading < 0		68118	0		<			
ANR	68179	Identifier	strip_leading		68118	0					
ANR	68180	PrimaryExpression	0		68118	1					
ANR	68181	RelationalExpression	-- s >= 0		68118	1		>=			
ANR	68182	UnaryExpression	-- s		68118	0					
ANR	68183	IncDec	--		68118	0					
ANR	68184	Identifier	s		68118	1					
ANR	68185	PrimaryExpression	0		68118	1					
ANR	68186	ExpressionStatement	n = p + 1	1432:7:34036:34043	68118	1	True				
ANR	68187	AssignmentExpression	n = p + 1		68118	0		=			
ANR	68188	Identifier	n		68118	0					
ANR	68189	AdditiveExpression	p + 1		68118	1		+			
ANR	68190	Identifier	p		68118	0					
ANR	68191	PrimaryExpression	1		68118	1					
ANR	68192	IfStatement	if ( ( strip_leading < 0 || s <= 0 ) && * n )		68118	3					
ANR	68193	Condition	( strip_leading < 0 || s <= 0 ) && * n	1435:6:34060:34094	68118	0	True				
ANR	68194	AndExpression	( strip_leading < 0 || s <= 0 ) && * n		68118	0		&&			
ANR	68195	OrExpression	strip_leading < 0 || s <= 0		68118	0		||			
ANR	68196	RelationalExpression	strip_leading < 0		68118	0		<			
ANR	68197	Identifier	strip_leading		68118	0					
ANR	68198	PrimaryExpression	0		68118	1					
ANR	68199	RelationalExpression	s <= 0		68118	1		<=			
ANR	68200	Identifier	s		68118	0					
ANR	68201	PrimaryExpression	0		68118	1					
ANR	68202	UnaryOperationExpression	* n		68118	1					
ANR	68203	UnaryOperator	*		68118	0					
ANR	68204	Identifier	n		68118	1					
ANR	68205	CompoundStatement		16:4:253:253	68118	1					
ANR	68206	ExpressionStatement	"memmove ( name , n , strlen ( n ) + 1 )"	1437:6:34109:34142	68118	0	True				
ANR	68207	CallExpression	"memmove ( name , n , strlen ( n ) + 1 )"		68118	0					
ANR	68208	Callee	memmove		68118	0					
ANR	68209	Identifier	memmove		68118	0					
ANR	68210	ArgumentList	name		68118	1					
ANR	68211	Argument	name		68118	0					
ANR	68212	Identifier	name		68118	0					
ANR	68213	Argument	n		68118	1					
ANR	68214	Identifier	n		68118	0					
ANR	68215	Argument	strlen ( n ) + 1		68118	2					
ANR	68216	AdditiveExpression	strlen ( n ) + 1		68118	0		+			
ANR	68217	CallExpression	strlen ( n )		68118	0					
ANR	68218	Callee	strlen		68118	0					
ANR	68219	Identifier	strlen		68118	0					
ANR	68220	ArgumentList	n		68118	1					
ANR	68221	Argument	n		68118	0					
ANR	68222	Identifier	n		68118	0					
ANR	68223	PrimaryExpression	1		68118	1					
ANR	68224	ReturnStatement	return true ;	1438:6:34150:34161	68118	1	True				
ANR	68225	Identifier	true		68118	0					
ANR	68226	ElseStatement	else		68118	0					
ANR	68227	ReturnStatement	return false ;	1441:4:34180:34192	68118	0	True				
ANR	68228	Identifier	false		68118	0					
ANR	68229	ReturnType	static bool		68118	1					
ANR	68230	Identifier	strip_leading_slashes		68118	2					
ANR	68231	ParameterList	"char * name , int strip_leading"		68118	3					
ANR	68232	Parameter	char * name	1420:23:33816:33825	68118	0	True				
ANR	68233	ParameterType	char *		68118	0					
ANR	68234	Identifier	name		68118	1					
ANR	68235	Parameter	int strip_leading	1420:35:33828:33844	68118	1	True				
ANR	68236	ParameterType	int		68118	0					
ANR	68237	Identifier	strip_leading		68118	1					
ANR	68238	CFGEntryNode	ENTRY		68118		True				
ANR	68239	CFGExitNode	EXIT		68118		True				
ANR	68240	Symbol	p		68118						
ANR	68241	Symbol	strlen		68118						
ANR	68242	Symbol	s		68118						
ANR	68243	Symbol	name		68118						
ANR	68244	Symbol	* n		68118						
ANR	68245	Symbol	true		68118						
ANR	68246	Symbol	false		68118						
ANR	68247	Symbol	* p		68118						
ANR	68248	Symbol	strip_leading		68118						
ANR	68249	Symbol	ISSLASH		68118						
ANR	68250	Symbol	n		68118						
ANR	68251	Function	fetchname	1447:0:34237:36818							
ANR	68252	FunctionDef	"fetchname (char const * at , int strip_leading , char * * pname , char * * ptimestr , struct timespec * pstamp)"		68251	0					
ANR	68253	CompoundStatement		1450:0:34348:36818	68251	0					
ANR	68254	IdentifierDeclStatement	char * name ;	1451:4:34354:34364	68251	0	True				
ANR	68255	IdentifierDecl	* name		68251	0					
ANR	68256	IdentifierDeclType	char *		68251	0					
ANR	68257	Identifier	name		68251	1					
ANR	68258	IdentifierDeclStatement	const char * t ;	1452:4:34370:34383	68251	1	True				
ANR	68259	IdentifierDecl	* t		68251	0					
ANR	68260	IdentifierDeclType	const char *		68251	0					
ANR	68261	Identifier	t		68251	1					
ANR	68262	IdentifierDeclStatement	char * timestr = NULL ;	1453:4:34389:34409	68251	2	True				
ANR	68263	IdentifierDecl	* timestr = NULL		68251	0					
ANR	68264	IdentifierDeclType	char *		68251	0					
ANR	68265	Identifier	timestr		68251	1					
ANR	68266	AssignmentExpression	* timestr = NULL		68251	2		=			
ANR	68267	Identifier	NULL		68251	0					
ANR	68268	Identifier	NULL		68251	1					
ANR	68269	IdentifierDeclStatement	struct timespec stamp ;	1454:4:34415:34436	68251	3	True				
ANR	68270	IdentifierDecl	stamp		68251	0					
ANR	68271	IdentifierDeclType	struct timespec		68251	0					
ANR	68272	Identifier	stamp		68251	1					
ANR	68273	ExpressionStatement	stamp . tv_sec = - 1	1456:4:34443:34460	68251	4	True				
ANR	68274	AssignmentExpression	stamp . tv_sec = - 1		68251	0		=			
ANR	68275	MemberAccess	stamp . tv_sec		68251	0					
ANR	68276	Identifier	stamp		68251	0					
ANR	68277	Identifier	tv_sec		68251	1					
ANR	68278	UnaryOperationExpression	- 1		68251	1					
ANR	68279	UnaryOperator	-		68251	0					
ANR	68280	PrimaryExpression	1		68251	1					
ANR	68281	ExpressionStatement	stamp . tv_nsec = 0	1457:4:34466:34483	68251	5	True				
ANR	68282	AssignmentExpression	stamp . tv_nsec = 0		68251	0		=			
ANR	68283	MemberAccess	stamp . tv_nsec		68251	0					
ANR	68284	Identifier	stamp		68251	0					
ANR	68285	Identifier	tv_nsec		68251	1					
ANR	68286	PrimaryExpression	0		68251	1					
ANR	68287	WhileStatement	while ( ISSPACE ( ( unsigned char ) * at ) )		68251	6					
ANR	68288	Condition	ISSPACE ( ( unsigned char ) * at )	1459:11:34497:34525	68251	0	True				
ANR	68289	CallExpression	ISSPACE ( ( unsigned char ) * at )		68251	0					
ANR	68290	Callee	ISSPACE		68251	0					
ANR	68291	Identifier	ISSPACE		68251	0					
ANR	68292	ArgumentList	( unsigned char ) * at		68251	1					
ANR	68293	Argument	( unsigned char ) * at		68251	0					
ANR	68294	CastExpression	( unsigned char ) * at		68251	0					
ANR	68295	CastTarget	unsigned char		68251	0					
ANR	68296	UnaryOperationExpression	* at		68251	1					
ANR	68297	UnaryOperator	*		68251	0					
ANR	68298	Identifier	at		68251	1					
ANR	68299	ExpressionStatement	at ++	1460:1:34529:34533	68251	1	True				
ANR	68300	PostIncDecOperationExpression	at ++		68251	0					
ANR	68301	Identifier	at		68251	0					
ANR	68302	IncDec	++		68251	1					
ANR	68303	IfStatement	if ( debug & 128 )		68251	7					
ANR	68304	Condition	debug & 128	1461:8:34543:34553	68251	0	True				
ANR	68305	BitAndExpression	debug & 128		68251	0		&			
ANR	68306	Identifier	debug		68251	0					
ANR	68307	PrimaryExpression	128		68251	1					
ANR	68308	ExpressionStatement	"say ( ""fetchname %s %d\\n"" , at , strip_leading )"	1462:1:34557:34601	68251	1	True				
ANR	68309	CallExpression	"say ( ""fetchname %s %d\\n"" , at , strip_leading )"		68251	0					
ANR	68310	Callee	say		68251	0					
ANR	68311	Identifier	say		68251	0					
ANR	68312	ArgumentList	"""fetchname %s %d\\n"""		68251	1					
ANR	68313	Argument	"""fetchname %s %d\\n"""		68251	0					
ANR	68314	PrimaryExpression	"""fetchname %s %d\\n"""		68251	0					
ANR	68315	Argument	at		68251	1					
ANR	68316	Identifier	at		68251	0					
ANR	68317	Argument	strip_leading		68251	2					
ANR	68318	Identifier	strip_leading		68251	0					
ANR	68319	IfStatement	"if ( * at == '""' )"		68251	8					
ANR	68320	Condition	"* at == '""'"	1464:8:34612:34621	68251	0	True				
ANR	68321	EqualityExpression	"* at == '""'"		68251	0		==			
ANR	68322	UnaryOperationExpression	* at		68251	0					
ANR	68323	UnaryOperator	*		68251	0					
ANR	68324	Identifier	at		68251	1					
ANR	68325	PrimaryExpression	"'""'"		68251	1					
ANR	68326	CompoundStatement		16:6:281:281	68251	1					
ANR	68327	ExpressionStatement	"name = parse_c_string ( at , & t )"	1466:1:34633:34663	68251	0	True				
ANR	68328	AssignmentExpression	"name = parse_c_string ( at , & t )"		68251	0		=			
ANR	68329	Identifier	name		68251	0					
ANR	68330	CallExpression	"parse_c_string ( at , & t )"		68251	1					
ANR	68331	Callee	parse_c_string		68251	0					
ANR	68332	Identifier	parse_c_string		68251	0					
ANR	68333	ArgumentList	at		68251	1					
ANR	68334	Argument	at		68251	0					
ANR	68335	Identifier	at		68251	0					
ANR	68336	Argument	& t		68251	1					
ANR	68337	UnaryOperationExpression	& t		68251	0					
ANR	68338	UnaryOperator	&		68251	0					
ANR	68339	Identifier	t		68251	1					
ANR	68340	IfStatement	if ( ! name )		68251	1					
ANR	68341	Condition	! name	1467:5:34670:34675	68251	0	True				
ANR	68342	UnaryOperationExpression	! name		68251	0					
ANR	68343	UnaryOperator	!		68251	0					
ANR	68344	Identifier	name		68251	1					
ANR	68345	CompoundStatement		19:3:332:332	68251	1					
ANR	68346	IfStatement	if ( debug & 128 )		68251	0					
ANR	68347	Condition	debug & 128	1469:9:34692:34702	68251	0	True				
ANR	68348	BitAndExpression	debug & 128		68251	0		&			
ANR	68349	Identifier	debug		68251	0					
ANR	68350	PrimaryExpression	128		68251	1					
ANR	68351	ExpressionStatement	"say ( ""ignoring malformed filename %s\\n"" , quotearg ( at ) )"	1470:7:34712:34767	68251	1	True				
ANR	68352	CallExpression	"say ( ""ignoring malformed filename %s\\n"" , quotearg ( at ) )"		68251	0					
ANR	68353	Callee	say		68251	0					
ANR	68354	Identifier	say		68251	0					
ANR	68355	ArgumentList	"""ignoring malformed filename %s\\n"""		68251	1					
ANR	68356	Argument	"""ignoring malformed filename %s\\n"""		68251	0					
ANR	68357	PrimaryExpression	"""ignoring malformed filename %s\\n"""		68251	0					
ANR	68358	Argument	quotearg ( at )		68251	1					
ANR	68359	CallExpression	quotearg ( at )		68251	0					
ANR	68360	Callee	quotearg		68251	0					
ANR	68361	Identifier	quotearg		68251	0					
ANR	68362	ArgumentList	at		68251	1					
ANR	68363	Argument	at		68251	0					
ANR	68364	Identifier	at		68251	0					
ANR	68365	ReturnStatement	return ;	1471:5:34774:34780	68251	1	True				
ANR	68366	ElseStatement	else		68251	0					
ANR	68367	CompoundStatement		26:6:461:461	68251	0					
ANR	68368	ForStatement	for ( t = at ; * t ; t ++ )		68251	0					
ANR	68369	ForInit	t = at ;	1476:6:34818:34824	68251	0	True				
ANR	68370	AssignmentExpression	t = at		68251	0		=			
ANR	68371	Identifier	t		68251	0					
ANR	68372	Identifier	at		68251	1					
ANR	68373	Condition	* t	1476:15:34827:34828	68251	1	True				
ANR	68374	UnaryOperationExpression	* t		68251	0					
ANR	68375	UnaryOperator	*		68251	0					
ANR	68376	Identifier	t		68251	1					
ANR	68377	PostIncDecOperationExpression	t ++	1476:20:34832:34834	68251	2	True				
ANR	68378	Identifier	t		68251	0					
ANR	68379	IncDec	++		68251	1					
ANR	68380	CompoundStatement		28:3:491:491	68251	3					
ANR	68381	IfStatement	if ( ISSPACE ( ( unsigned char ) * t ) )		68251	0					
ANR	68382	Condition	ISSPACE ( ( unsigned char ) * t )	1478:9:34851:34878	68251	0	True				
ANR	68383	CallExpression	ISSPACE ( ( unsigned char ) * t )		68251	0					
ANR	68384	Callee	ISSPACE		68251	0					
ANR	68385	Identifier	ISSPACE		68251	0					
ANR	68386	ArgumentList	( unsigned char ) * t		68251	1					
ANR	68387	Argument	( unsigned char ) * t		68251	0					
ANR	68388	CastExpression	( unsigned char ) * t		68251	0					
ANR	68389	CastTarget	unsigned char		68251	0					
ANR	68390	UnaryOperationExpression	* t		68251	1					
ANR	68391	UnaryOperator	*		68251	0					
ANR	68392	Identifier	t		68251	1					
ANR	68393	CompoundStatement		33:2:653:670	68251	1					
ANR	68394	IdentifierDeclStatement	char const * u = t ;	1482:2:35002:35019	68251	0	True				
ANR	68395	IdentifierDecl	* u = t		68251	0					
ANR	68396	IdentifierDeclType	char const *		68251	0					
ANR	68397	Identifier	u		68251	1					
ANR	68398	AssignmentExpression	* u = t		68251	2		=			
ANR	68399	Identifier	t		68251	0					
ANR	68400	Identifier	t		68251	1					
ANR	68401	WhileStatement	while ( * u != '\\t' && ISSPACE ( ( unsigned char ) u [ 1 ] ) )		68251	1					
ANR	68402	Condition	* u != '\\t' && ISSPACE ( ( unsigned char ) u [ 1 ] )	1483:9:35030:35073	68251	0	True				
ANR	68403	AndExpression	* u != '\\t' && ISSPACE ( ( unsigned char ) u [ 1 ] )		68251	0		&&			
ANR	68404	EqualityExpression	* u != '\\t'		68251	0		!=			
ANR	68405	UnaryOperationExpression	* u		68251	0					
ANR	68406	UnaryOperator	*		68251	0					
ANR	68407	Identifier	u		68251	1					
ANR	68408	PrimaryExpression	'\\t'		68251	1					
ANR	68409	CallExpression	ISSPACE ( ( unsigned char ) u [ 1 ] )		68251	1					
ANR	68410	Callee	ISSPACE		68251	0					
ANR	68411	Identifier	ISSPACE		68251	0					
ANR	68412	ArgumentList	( unsigned char ) u [ 1 ]		68251	1					
ANR	68413	Argument	( unsigned char ) u [ 1 ]		68251	0					
ANR	68414	CastExpression	( unsigned char ) u [ 1 ]		68251	0					
ANR	68415	CastTarget	unsigned char		68251	0					
ANR	68416	ArrayIndexing	u [ 1 ]		68251	1					
ANR	68417	Identifier	u		68251	0					
ANR	68418	PrimaryExpression	1		68251	1					
ANR	68419	ExpressionStatement	u ++	1484:4:35080:35083	68251	1	True				
ANR	68420	PostIncDecOperationExpression	u ++		68251	0					
ANR	68421	Identifier	u		68251	0					
ANR	68422	IncDec	++		68251	1					
ANR	68423	IfStatement	"if ( * u != '\\t' && ( strchr ( u + 1 , pstamp ? '\\t' : '\\n' ) ) )"		68251	2					
ANR	68424	Condition	"* u != '\\t' && ( strchr ( u + 1 , pstamp ? '\\t' : '\\n' ) )"	1485:6:35091:35142	68251	0	True				
ANR	68425	AndExpression	"* u != '\\t' && ( strchr ( u + 1 , pstamp ? '\\t' : '\\n' ) )"		68251	0		&&			
ANR	68426	EqualityExpression	* u != '\\t'		68251	0		!=			
ANR	68427	UnaryOperationExpression	* u		68251	0					
ANR	68428	UnaryOperator	*		68251	0					
ANR	68429	Identifier	u		68251	1					
ANR	68430	PrimaryExpression	'\\t'		68251	1					
ANR	68431	CallExpression	"strchr ( u + 1 , pstamp ? '\\t' : '\\n' )"		68251	1					
ANR	68432	Callee	strchr		68251	0					
ANR	68433	Identifier	strchr		68251	0					
ANR	68434	ArgumentList	u + 1		68251	1					
ANR	68435	Argument	u + 1		68251	0					
ANR	68436	AdditiveExpression	u + 1		68251	0		+			
ANR	68437	Identifier	u		68251	0					
ANR	68438	PrimaryExpression	1		68251	1					
ANR	68439	Argument	pstamp ? '\\t' : '\\n'		68251	1					
ANR	68440	ConditionalExpression	pstamp ? '\\t' : '\\n'		68251	0					
ANR	68441	Condition	pstamp		68251	0					
ANR	68442	Identifier	pstamp		68251	0					
ANR	68443	PrimaryExpression	'\\t'		68251	1					
ANR	68444	PrimaryExpression	'\\n'		68251	2					
ANR	68445	ContinueStatement	continue ;	1486:4:35149:35157	68251	1	True				
ANR	68446	BreakStatement	break ;	1487:2:35161:35166	68251	3	True				
ANR	68447	ExpressionStatement	"name = xmemdup0 ( at , t - at )"	1490:1:35183:35211	68251	1	True				
ANR	68448	AssignmentExpression	"name = xmemdup0 ( at , t - at )"		68251	0		=			
ANR	68449	Identifier	name		68251	0					
ANR	68450	CallExpression	"xmemdup0 ( at , t - at )"		68251	1					
ANR	68451	Callee	xmemdup0		68251	0					
ANR	68452	Identifier	xmemdup0		68251	0					
ANR	68453	ArgumentList	at		68251	1					
ANR	68454	Argument	at		68251	0					
ANR	68455	Identifier	at		68251	0					
ANR	68456	Argument	t - at		68251	1					
ANR	68457	AdditiveExpression	t - at		68251	0		-			
ANR	68458	Identifier	t		68251	0					
ANR	68459	Identifier	at		68251	1					
ANR	68460	IfStatement	"if ( strcmp ( name , ""/dev/null"" ) == 0 )"		68251	9					
ANR	68461	Condition	"strcmp ( name , ""/dev/null"" ) == 0"	1496:8:35422:35452	68251	0	True				
ANR	68462	EqualityExpression	"strcmp ( name , ""/dev/null"" ) == 0"		68251	0		==			
ANR	68463	CallExpression	"strcmp ( name , ""/dev/null"" )"		68251	0					
ANR	68464	Callee	strcmp		68251	0					
ANR	68465	Identifier	strcmp		68251	0					
ANR	68466	ArgumentList	name		68251	1					
ANR	68467	Argument	name		68251	0					
ANR	68468	Identifier	name		68251	0					
ANR	68469	Argument	"""/dev/null"""		68251	1					
ANR	68470	PrimaryExpression	"""/dev/null"""		68251	0					
ANR	68471	PrimaryExpression	0		68251	1					
ANR	68472	CompoundStatement		48:6:1112:1112	68251	1					
ANR	68473	ExpressionStatement	free ( name )	1498:1:35464:35475	68251	0	True				
ANR	68474	CallExpression	free ( name )		68251	0					
ANR	68475	Callee	free		68251	0					
ANR	68476	Identifier	free		68251	0					
ANR	68477	ArgumentList	name		68251	1					
ANR	68478	Argument	name		68251	0					
ANR	68479	Identifier	name		68251	0					
ANR	68480	IfStatement	if ( pstamp )		68251	1					
ANR	68481	Condition	pstamp	1499:5:35482:35487	68251	0	True				
ANR	68482	Identifier	pstamp		68251	0					
ANR	68483	CompoundStatement		51:3:1144:1144	68251	1					
ANR	68484	ExpressionStatement	pstamp -> tv_sec = 0	1501:5:35500:35518	68251	0	True				
ANR	68485	AssignmentExpression	pstamp -> tv_sec = 0		68251	0		=			
ANR	68486	PtrMemberAccess	pstamp -> tv_sec		68251	0					
ANR	68487	Identifier	pstamp		68251	0					
ANR	68488	Identifier	tv_sec		68251	1					
ANR	68489	PrimaryExpression	0		68251	1					
ANR	68490	ExpressionStatement	pstamp -> tv_nsec = 0	1502:5:35525:35544	68251	1	True				
ANR	68491	AssignmentExpression	pstamp -> tv_nsec = 0		68251	0		=			
ANR	68492	PtrMemberAccess	pstamp -> tv_nsec		68251	0					
ANR	68493	Identifier	pstamp		68251	0					
ANR	68494	Identifier	tv_nsec		68251	1					
ANR	68495	PrimaryExpression	0		68251	1					
ANR	68496	ReturnStatement	return ;	1504:1:35552:35558	68251	2	True				
ANR	68497	IfStatement	"if ( ! strip_leading_slashes ( name , strip_leading ) )"		68251	10					
ANR	68498	Condition	"! strip_leading_slashes ( name , strip_leading )"	1508:8:35652:35696	68251	0	True				
ANR	68499	UnaryOperationExpression	"! strip_leading_slashes ( name , strip_leading )"		68251	0					
ANR	68500	UnaryOperator	!		68251	0					
ANR	68501	CallExpression	"strip_leading_slashes ( name , strip_leading )"		68251	1					
ANR	68502	Callee	strip_leading_slashes		68251	0					
ANR	68503	Identifier	strip_leading_slashes		68251	0					
ANR	68504	ArgumentList	name		68251	1					
ANR	68505	Argument	name		68251	0					
ANR	68506	Identifier	name		68251	0					
ANR	68507	Argument	strip_leading		68251	1					
ANR	68508	Identifier	strip_leading		68251	0					
ANR	68509	CompoundStatement		60:6:1356:1356	68251	1					
ANR	68510	ExpressionStatement	free ( name )	1510:1:35708:35719	68251	0	True				
ANR	68511	CallExpression	free ( name )		68251	0					
ANR	68512	Callee	free		68251	0					
ANR	68513	Identifier	free		68251	0					
ANR	68514	ArgumentList	name		68251	1					
ANR	68515	Argument	name		68251	0					
ANR	68516	Identifier	name		68251	0					
ANR	68517	ReturnStatement	return ;	1511:1:35722:35728	68251	1	True				
ANR	68518	IfStatement	if ( ptimestr )		68251	11					
ANR	68519	Condition	ptimestr	1514:8:35747:35754	68251	0	True				
ANR	68520	Identifier	ptimestr		68251	0					
ANR	68521	CompoundStatement		67:1:1417:1447	68251	1					
ANR	68522	IdentifierDeclStatement	char const * u = t + strlen ( t ) ;	1516:1:35766:35796	68251	0	True				
ANR	68523	IdentifierDecl	* u = t + strlen ( t )		68251	0					
ANR	68524	IdentifierDeclType	char const *		68251	0					
ANR	68525	Identifier	u		68251	1					
ANR	68526	AssignmentExpression	* u = t + strlen ( t )		68251	2		=			
ANR	68527	Identifier	u		68251	0					
ANR	68528	AdditiveExpression	t + strlen ( t )		68251	1		+			
ANR	68529	Identifier	t		68251	0					
ANR	68530	CallExpression	strlen ( t )		68251	1					
ANR	68531	Callee	strlen		68251	0					
ANR	68532	Identifier	strlen		68251	0					
ANR	68533	ArgumentList	t		68251	1					
ANR	68534	Argument	t		68251	0					
ANR	68535	Identifier	t		68251	0					
ANR	68536	IfStatement	if ( u != t && * ( u - 1 ) == '\\n' )		68251	1					
ANR	68537	Condition	u != t && * ( u - 1 ) == '\\n'	1518:5:35804:35827	68251	0	True				
ANR	68538	AndExpression	u != t && * ( u - 1 ) == '\\n'		68251	0		&&			
ANR	68539	EqualityExpression	u != t		68251	0		!=			
ANR	68540	Identifier	u		68251	0					
ANR	68541	Identifier	t		68251	1					
ANR	68542	EqualityExpression	* ( u - 1 ) == '\\n'		68251	1		==			
ANR	68543	UnaryOperationExpression	* ( u - 1 )		68251	0					
ANR	68544	UnaryOperator	*		68251	0					
ANR	68545	AdditiveExpression	u - 1		68251	1		-			
ANR	68546	Identifier	u		68251	0					
ANR	68547	PrimaryExpression	1		68251	1					
ANR	68548	PrimaryExpression	'\\n'		68251	1					
ANR	68549	ExpressionStatement	u --	1519:3:35833:35836	68251	1	True				
ANR	68550	PostIncDecOperationExpression	u --		68251	0					
ANR	68551	Identifier	u		68251	0					
ANR	68552	IncDec	--		68251	1					
ANR	68553	IfStatement	if ( u != t && * ( u - 1 ) == '\\r' )		68251	2					
ANR	68554	Condition	u != t && * ( u - 1 ) == '\\r'	1520:5:35843:35866	68251	0	True				
ANR	68555	AndExpression	u != t && * ( u - 1 ) == '\\r'		68251	0		&&			
ANR	68556	EqualityExpression	u != t		68251	0		!=			
ANR	68557	Identifier	u		68251	0					
ANR	68558	Identifier	t		68251	1					
ANR	68559	EqualityExpression	* ( u - 1 ) == '\\r'		68251	1		==			
ANR	68560	UnaryOperationExpression	* ( u - 1 )		68251	0					
ANR	68561	UnaryOperator	*		68251	0					
ANR	68562	AdditiveExpression	u - 1		68251	1		-			
ANR	68563	Identifier	u		68251	0					
ANR	68564	PrimaryExpression	1		68251	1					
ANR	68565	PrimaryExpression	'\\r'		68251	1					
ANR	68566	ExpressionStatement	u --	1521:3:35872:35875	68251	1	True				
ANR	68567	PostIncDecOperationExpression	u --		68251	0					
ANR	68568	Identifier	u		68251	0					
ANR	68569	IncDec	--		68251	1					
ANR	68570	ExpressionStatement	"timestr = xmemdup0 ( t , u - t )"	1522:1:35878:35907	68251	3	True				
ANR	68571	AssignmentExpression	"timestr = xmemdup0 ( t , u - t )"		68251	0		=			
ANR	68572	Identifier	timestr		68251	0					
ANR	68573	CallExpression	"xmemdup0 ( t , u - t )"		68251	1					
ANR	68574	Callee	xmemdup0		68251	0					
ANR	68575	Identifier	xmemdup0		68251	0					
ANR	68576	ArgumentList	t		68251	1					
ANR	68577	Argument	t		68251	0					
ANR	68578	Identifier	t		68251	0					
ANR	68579	Argument	u - t		68251	1					
ANR	68580	AdditiveExpression	u - t		68251	0		-			
ANR	68581	Identifier	u		68251	0					
ANR	68582	Identifier	t		68251	1					
ANR	68583	IfStatement	if ( * t != '\\n' )		68251	12					
ANR	68584	Condition	* t != '\\n'	1525:10:35928:35937	68251	0	True				
ANR	68585	EqualityExpression	* t != '\\n'		68251	0		!=			
ANR	68586	UnaryOperationExpression	* t		68251	0					
ANR	68587	UnaryOperator	*		68251	0					
ANR	68588	Identifier	t		68251	1					
ANR	68589	PrimaryExpression	'\\n'		68251	1					
ANR	68590	CompoundStatement		77:1:1592:1592	68251	1					
ANR	68591	IfStatement	if ( ! pstamp )		68251	0					
ANR	68592	Condition	! pstamp	1527:7:35950:35957	68251	0	True				
ANR	68593	UnaryOperationExpression	! pstamp		68251	0					
ANR	68594	UnaryOperator	!		68251	0					
ANR	68595	Identifier	pstamp		68251	1					
ANR	68596	CompoundStatement		79:5:1616:1616	68251	1					
ANR	68597	ExpressionStatement	free ( name )	1529:7:35974:35985	68251	0	True				
ANR	68598	CallExpression	free ( name )		68251	0					
ANR	68599	Callee	free		68251	0					
ANR	68600	Identifier	free		68251	0					
ANR	68601	ArgumentList	name		68251	1					
ANR	68602	Argument	name		68251	0					
ANR	68603	Identifier	name		68251	0					
ANR	68604	ExpressionStatement	free ( timestr )	1530:7:35994:36008	68251	1	True				
ANR	68605	CallExpression	free ( timestr )		68251	0					
ANR	68606	Callee	free		68251	0					
ANR	68607	Identifier	free		68251	0					
ANR	68608	ArgumentList	timestr		68251	1					
ANR	68609	Argument	timestr		68251	0					
ANR	68610	Identifier	timestr		68251	0					
ANR	68611	ReturnStatement	return ;	1531:7:36017:36023	68251	2	True				
ANR	68612	IfStatement	if ( set_time | set_utc )		68251	1					
ANR	68613	Condition	set_time | set_utc	1534:7:36040:36057	68251	0	True				
ANR	68614	InclusiveOrExpression	set_time | set_utc		68251	0		|			
ANR	68615	Identifier	set_time		68251	0					
ANR	68616	Identifier	set_utc		68251	1					
ANR	68617	ExpressionStatement	"get_date ( & stamp , t , & initial_time )"	1535:5:36065:36100	68251	1	True				
ANR	68618	CallExpression	"get_date ( & stamp , t , & initial_time )"		68251	0					
ANR	68619	Callee	get_date		68251	0					
ANR	68620	Identifier	get_date		68251	0					
ANR	68621	ArgumentList	& stamp		68251	1					
ANR	68622	Argument	& stamp		68251	0					
ANR	68623	UnaryOperationExpression	& stamp		68251	0					
ANR	68624	UnaryOperator	&		68251	0					
ANR	68625	Identifier	stamp		68251	1					
ANR	68626	Argument	t		68251	1					
ANR	68627	Identifier	t		68251	0					
ANR	68628	Argument	& initial_time		68251	2					
ANR	68629	UnaryOperationExpression	& initial_time		68251	0					
ANR	68630	UnaryOperator	&		68251	0					
ANR	68631	Identifier	initial_time		68251	1					
ANR	68632	ElseStatement	else		68251	0					
ANR	68633	CompoundStatement		94:7:2030:2114	68251	0					
ANR	68634	IdentifierDeclStatement	"const struct timespec lower = { - 25L * 60 * 60 } , upper = { 26L * 60 * 60 } ;"	1543:7:36379:36463	68251	0	True				
ANR	68635	IdentifierDecl	lower = { - 25L * 60 * 60 }		68251	0					
ANR	68636	IdentifierDeclType	const struct timespec		68251	0					
ANR	68637	Identifier	lower		68251	1					
ANR	68638	AssignmentExpression	lower = { - 25L * 60 * 60 }		68251	2		=			
ANR	68639	Identifier	lower		68251	0					
ANR	68640	InitializerList	- 25L * 60 * 60		68251	1					
ANR	68641	MultiplicativeExpression	- 25L * 60 * 60		68251	0		*			
ANR	68642	UnaryOperationExpression	- 25L		68251	0					
ANR	68643	UnaryOperator	-		68251	0					
ANR	68644	PrimaryExpression	25L		68251	1					
ANR	68645	MultiplicativeExpression	60 * 60		68251	1		*			
ANR	68646	PrimaryExpression	60		68251	0					
ANR	68647	PrimaryExpression	60		68251	1					
ANR	68648	IdentifierDecl	upper = { 26L * 60 * 60 }		68251	1					
ANR	68649	IdentifierDeclType	const struct timespec		68251	0					
ANR	68650	Identifier	upper		68251	1					
ANR	68651	AssignmentExpression	upper = { 26L * 60 * 60 }		68251	2		=			
ANR	68652	Identifier	upper		68251	0					
ANR	68653	InitializerList	26L * 60 * 60		68251	1					
ANR	68654	MultiplicativeExpression	26L * 60 * 60		68251	0		*			
ANR	68655	PrimaryExpression	26L		68251	0					
ANR	68656	MultiplicativeExpression	60 * 60		68251	1		*			
ANR	68657	PrimaryExpression	60		68251	0					
ANR	68658	PrimaryExpression	60		68251	1					
ANR	68659	IfStatement	"if ( get_date ( & stamp , t , & initial_time ) && timespec_cmp ( stamp , lower ) > 0 && timespec_cmp ( stamp , upper ) < 0 )"		68251	1					
ANR	68660	Condition	"get_date ( & stamp , t , & initial_time ) && timespec_cmp ( stamp , lower ) > 0 && timespec_cmp ( stamp , upper ) < 0"	1545:11:36476:36588	68251	0	True				
ANR	68661	AndExpression	"get_date ( & stamp , t , & initial_time ) && timespec_cmp ( stamp , lower ) > 0 && timespec_cmp ( stamp , upper ) < 0"		68251	0		&&			
ANR	68662	CallExpression	"get_date ( & stamp , t , & initial_time )"		68251	0					
ANR	68663	Callee	get_date		68251	0					
ANR	68664	Identifier	get_date		68251	0					
ANR	68665	ArgumentList	& stamp		68251	1					
ANR	68666	Argument	& stamp		68251	0					
ANR	68667	UnaryOperationExpression	& stamp		68251	0					
ANR	68668	UnaryOperator	&		68251	0					
ANR	68669	Identifier	stamp		68251	1					
ANR	68670	Argument	t		68251	1					
ANR	68671	Identifier	t		68251	0					
ANR	68672	Argument	& initial_time		68251	2					
ANR	68673	UnaryOperationExpression	& initial_time		68251	0					
ANR	68674	UnaryOperator	&		68251	0					
ANR	68675	Identifier	initial_time		68251	1					
ANR	68676	AndExpression	"timespec_cmp ( stamp , lower ) > 0 && timespec_cmp ( stamp , upper ) < 0"		68251	1		&&			
ANR	68677	RelationalExpression	"timespec_cmp ( stamp , lower ) > 0"		68251	0		>			
ANR	68678	CallExpression	"timespec_cmp ( stamp , lower )"		68251	0					
ANR	68679	Callee	timespec_cmp		68251	0					
ANR	68680	Identifier	timespec_cmp		68251	0					
ANR	68681	ArgumentList	stamp		68251	1					
ANR	68682	Argument	stamp		68251	0					
ANR	68683	Identifier	stamp		68251	0					
ANR	68684	Argument	lower		68251	1					
ANR	68685	Identifier	lower		68251	0					
ANR	68686	PrimaryExpression	0		68251	1					
ANR	68687	RelationalExpression	"timespec_cmp ( stamp , upper ) < 0"		68251	1		<			
ANR	68688	CallExpression	"timespec_cmp ( stamp , upper )"		68251	0					
ANR	68689	Callee	timespec_cmp		68251	0					
ANR	68690	Identifier	timespec_cmp		68251	0					
ANR	68691	ArgumentList	stamp		68251	1					
ANR	68692	Argument	stamp		68251	0					
ANR	68693	Identifier	stamp		68251	0					
ANR	68694	Argument	upper		68251	1					
ANR	68695	Identifier	upper		68251	0					
ANR	68696	PrimaryExpression	0		68251	1					
ANR	68697	CompoundStatement		98:40:2242:2242	68251	1					
ANR	68698	ExpressionStatement	stamp . tv_sec = 0	1548:8:36601:36617	68251	0	True				
ANR	68699	AssignmentExpression	stamp . tv_sec = 0		68251	0		=			
ANR	68700	MemberAccess	stamp . tv_sec		68251	0					
ANR	68701	Identifier	stamp		68251	0					
ANR	68702	Identifier	tv_sec		68251	1					
ANR	68703	PrimaryExpression	0		68251	1					
ANR	68704	ExpressionStatement	stamp . tv_nsec = 0	1549:8:36627:36644	68251	1	True				
ANR	68705	AssignmentExpression	stamp . tv_nsec = 0		68251	0		=			
ANR	68706	MemberAccess	stamp . tv_nsec		68251	0					
ANR	68707	Identifier	stamp		68251	0					
ANR	68708	Identifier	tv_nsec		68251	1					
ANR	68709	PrimaryExpression	0		68251	1					
ANR	68710	ExpressionStatement	free ( * pname )	1554:4:36670:36683	68251	13	True				
ANR	68711	CallExpression	free ( * pname )		68251	0					
ANR	68712	Callee	free		68251	0					
ANR	68713	Identifier	free		68251	0					
ANR	68714	ArgumentList	* pname		68251	1					
ANR	68715	Argument	* pname		68251	0					
ANR	68716	UnaryOperationExpression	* pname		68251	0					
ANR	68717	UnaryOperator	*		68251	0					
ANR	68718	Identifier	pname		68251	1					
ANR	68719	ExpressionStatement	* pname = name	1555:4:36689:36702	68251	14	True				
ANR	68720	AssignmentExpression	* pname = name		68251	0		=			
ANR	68721	UnaryOperationExpression	* pname		68251	0					
ANR	68722	UnaryOperator	*		68251	0					
ANR	68723	Identifier	pname		68251	1					
ANR	68724	Identifier	name		68251	1					
ANR	68725	IfStatement	if ( ptimestr )		68251	15					
ANR	68726	Condition	ptimestr	1556:8:36712:36719	68251	0	True				
ANR	68727	Identifier	ptimestr		68251	0					
ANR	68728	CompoundStatement		108:6:2379:2379	68251	1					
ANR	68729	ExpressionStatement	free ( * ptimestr )	1558:1:36731:36747	68251	0	True				
ANR	68730	CallExpression	free ( * ptimestr )		68251	0					
ANR	68731	Callee	free		68251	0					
ANR	68732	Identifier	free		68251	0					
ANR	68733	ArgumentList	* ptimestr		68251	1					
ANR	68734	Argument	* ptimestr		68251	0					
ANR	68735	UnaryOperationExpression	* ptimestr		68251	0					
ANR	68736	UnaryOperator	*		68251	0					
ANR	68737	Identifier	ptimestr		68251	1					
ANR	68738	ExpressionStatement	* ptimestr = timestr	1559:1:36750:36769	68251	1	True				
ANR	68739	AssignmentExpression	* ptimestr = timestr		68251	0		=			
ANR	68740	UnaryOperationExpression	* ptimestr		68251	0					
ANR	68741	UnaryOperator	*		68251	0					
ANR	68742	Identifier	ptimestr		68251	1					
ANR	68743	Identifier	timestr		68251	1					
ANR	68744	IfStatement	if ( pstamp )		68251	16					
ANR	68745	Condition	pstamp	1561:8:36787:36792	68251	0	True				
ANR	68746	Identifier	pstamp		68251	0					
ANR	68747	ExpressionStatement	* pstamp = stamp	1562:6:36801:36816	68251	1	True				
ANR	68748	AssignmentExpression	* pstamp = stamp		68251	0		=			
ANR	68749	UnaryOperationExpression	* pstamp		68251	0					
ANR	68750	UnaryOperator	*		68251	0					
ANR	68751	Identifier	pstamp		68251	1					
ANR	68752	Identifier	stamp		68251	1					
ANR	68753	ReturnType	void		68251	1					
ANR	68754	Identifier	fetchname		68251	2					
ANR	68755	ParameterList	"char const * at , int strip_leading , char * * pname , char * * ptimestr , struct timespec * pstamp"		68251	3					
ANR	68756	Parameter	char const * at	1448:11:34253:34266	68251	0	True				
ANR	68757	ParameterType	char const *		68251	0					
ANR	68758	Identifier	at		68251	1					
ANR	68759	Parameter	int strip_leading	1448:27:34269:34285	68251	1	True				
ANR	68760	ParameterType	int		68251	0					
ANR	68761	Identifier	strip_leading		68251	1					
ANR	68762	Parameter	char * * pname	1448:46:34288:34299	68251	2	True				
ANR	68763	ParameterType	char * *		68251	0					
ANR	68764	Identifier	pname		68251	1					
ANR	68765	Parameter	char * * ptimestr	1449:4:34306:34320	68251	3	True				
ANR	68766	ParameterType	char * *		68251	0					
ANR	68767	Identifier	ptimestr		68251	1					
ANR	68768	Parameter	struct timespec * pstamp	1449:21:34323:34345	68251	4	True				
ANR	68769	ParameterType	struct timespec *		68251	0					
ANR	68770	Identifier	pstamp		68251	1					
ANR	68771	CFGEntryNode	ENTRY		68251		True				
ANR	68772	CFGExitNode	EXIT		68251		True				
ANR	68773	Symbol	quotearg		68251						
ANR	68774	Symbol	& initial_time		68251						
ANR	68775	Symbol	parse_c_string		68251						
ANR	68776	Symbol	upper		68251						
ANR	68777	Symbol	* ptimestr		68251						
ANR	68778	Symbol	stamp		68251						
ANR	68779	Symbol	strchr		68251						
ANR	68780	Symbol	* ( u - 1 )		68251						
ANR	68781	Symbol	pstamp -> tv_sec		68251						
ANR	68782	Symbol	strip_leading_slashes		68251						
ANR	68783	Symbol	strip_leading		68251						
ANR	68784	Symbol	strlen		68251						
ANR	68785	Symbol	set_utc		68251						
ANR	68786	Symbol	stamp . tv_nsec		68251						
ANR	68787	Symbol	set_time		68251						
ANR	68788	Symbol	pstamp -> tv_nsec		68251						
ANR	68789	Symbol	& stamp		68251						
ANR	68790	Symbol	strcmp		68251						
ANR	68791	Symbol	NULL		68251						
ANR	68792	Symbol	debug		68251						
ANR	68793	Symbol	timespec_cmp		68251						
ANR	68794	Symbol	pname		68251						
ANR	68795	Symbol	ptimestr		68251						
ANR	68796	Symbol	lower		68251						
ANR	68797	Symbol	timestr		68251						
ANR	68798	Symbol	* pstamp		68251						
ANR	68799	Symbol	xmemdup0		68251						
ANR	68800	Symbol	at		68251						
ANR	68801	Symbol	t		68251						
ANR	68802	Symbol	u		68251						
ANR	68803	Symbol	name		68251						
ANR	68804	Symbol	stamp . tv_sec		68251						
ANR	68805	Symbol	pstamp		68251						
ANR	68806	Symbol	* at		68251						
ANR	68807	Symbol	& t		68251						
ANR	68808	Symbol	* pname		68251						
ANR	68809	Symbol	ISSPACE		68251						
ANR	68810	Symbol	get_date		68251						
ANR	68811	Symbol	* t		68251						
ANR	68812	Symbol	* u		68251						
ANR	68813	Function	parse_name	1565:0:36821:37357							
ANR	68814	FunctionDef	"parse_name (char const * s , int strip_leading , char const * * endp)"		68813	0					
ANR	68815	CompoundStatement		1567:0:36893:37357	68813	0					
ANR	68816	IdentifierDeclStatement	char * ret ;	1568:2:36897:36906	68813	0	True				
ANR	68817	IdentifierDecl	* ret		68813	0					
ANR	68818	IdentifierDeclType	char *		68813	0					
ANR	68819	Identifier	ret		68813	1					
ANR	68820	WhileStatement	while ( ISSPACE ( ( unsigned char ) * s ) )		68813	1					
ANR	68821	Condition	ISSPACE ( ( unsigned char ) * s )	1570:9:36918:36945	68813	0	True				
ANR	68822	CallExpression	ISSPACE ( ( unsigned char ) * s )		68813	0					
ANR	68823	Callee	ISSPACE		68813	0					
ANR	68824	Identifier	ISSPACE		68813	0					
ANR	68825	ArgumentList	( unsigned char ) * s		68813	1					
ANR	68826	Argument	( unsigned char ) * s		68813	0					
ANR	68827	CastExpression	( unsigned char ) * s		68813	0					
ANR	68828	CastTarget	unsigned char		68813	0					
ANR	68829	UnaryOperationExpression	* s		68813	1					
ANR	68830	UnaryOperator	*		68813	0					
ANR	68831	Identifier	s		68813	1					
ANR	68832	ExpressionStatement	s ++	1571:4:36952:36955	68813	1	True				
ANR	68833	PostIncDecOperationExpression	s ++		68813	0					
ANR	68834	Identifier	s		68813	0					
ANR	68835	IncDec	++		68813	1					
ANR	68836	IfStatement	"if ( * s == '""' )"		68813	2					
ANR	68837	Condition	"* s == '""'"	1572:6:36963:36971	68813	0	True				
ANR	68838	EqualityExpression	"* s == '""'"		68813	0		==			
ANR	68839	UnaryOperationExpression	* s		68813	0					
ANR	68840	UnaryOperator	*		68813	0					
ANR	68841	Identifier	s		68813	1					
ANR	68842	PrimaryExpression	"'""'"		68813	1					
ANR	68843	CompoundStatement		7:4:84:84	68813	1					
ANR	68844	ExpressionStatement	"ret = parse_c_string ( s , endp )"	1574:6:36986:37016	68813	0	True				
ANR	68845	AssignmentExpression	"ret = parse_c_string ( s , endp )"		68813	0		=			
ANR	68846	Identifier	ret		68813	0					
ANR	68847	CallExpression	"parse_c_string ( s , endp )"		68813	1					
ANR	68848	Callee	parse_c_string		68813	0					
ANR	68849	Identifier	parse_c_string		68813	0					
ANR	68850	ArgumentList	s		68813	1					
ANR	68851	Argument	s		68813	0					
ANR	68852	Identifier	s		68813	0					
ANR	68853	Argument	endp		68813	1					
ANR	68854	Identifier	endp		68813	0					
ANR	68855	IfStatement	if ( ! ret )		68813	1					
ANR	68856	Condition	! ret	1575:10:37028:37031	68813	0	True				
ANR	68857	UnaryOperationExpression	! ret		68813	0					
ANR	68858	UnaryOperator	!		68813	0					
ANR	68859	Identifier	ret		68813	1					
ANR	68860	ReturnStatement	return NULL ;	1576:8:37042:37053	68813	1	True				
ANR	68861	Identifier	NULL		68813	0					
ANR	68862	ElseStatement	else		68813	0					
ANR	68863	CompoundStatement		14:6:186:199	68813	0					
ANR	68864	IdentifierDeclStatement	char const * t ;	1580:6:37080:37093	68813	0	True				
ANR	68865	IdentifierDecl	* t		68813	0					
ANR	68866	IdentifierDeclType	char const *		68813	0					
ANR	68867	Identifier	t		68813	1					
ANR	68868	ForStatement	for ( t = s ; * t && ! ISSPACE ( ( unsigned char ) * t ) ; t ++ )		68813	1					
ANR	68869	ForInit	t = s ;	1582:11:37107:37112	68813	0	True				
ANR	68870	AssignmentExpression	t = s		68813	0		=			
ANR	68871	Identifier	t		68813	0					
ANR	68872	Identifier	s		68813	1					
ANR	68873	Condition	* t && ! ISSPACE ( ( unsigned char ) * t )	1582:18:37114:37149	68813	1	True				
ANR	68874	AndExpression	* t && ! ISSPACE ( ( unsigned char ) * t )		68813	0		&&			
ANR	68875	UnaryOperationExpression	* t		68813	0					
ANR	68876	UnaryOperator	*		68813	0					
ANR	68877	Identifier	t		68813	1					
ANR	68878	UnaryOperationExpression	! ISSPACE ( ( unsigned char ) * t )		68813	1					
ANR	68879	UnaryOperator	!		68813	0					
ANR	68880	CallExpression	ISSPACE ( ( unsigned char ) * t )		68813	1					
ANR	68881	Callee	ISSPACE		68813	0					
ANR	68882	Identifier	ISSPACE		68813	0					
ANR	68883	ArgumentList	( unsigned char ) * t		68813	1					
ANR	68884	Argument	( unsigned char ) * t		68813	0					
ANR	68885	CastExpression	( unsigned char ) * t		68813	0					
ANR	68886	CastTarget	unsigned char		68813	0					
ANR	68887	UnaryOperationExpression	* t		68813	1					
ANR	68888	UnaryOperator	*		68813	0					
ANR	68889	Identifier	t		68813	1					
ANR	68890	PostIncDecOperationExpression	t ++	1582:56:37152:37154	68813	2	True				
ANR	68891	Identifier	t		68813	0					
ANR	68892	IncDec	++		68813	1					
ANR	68893	ExpressionStatement		1583:17:37174:37174	68813	3	True				
ANR	68894	ExpressionStatement	"ret = xmemdup0 ( s , t - s )"	1584:6:37182:37207	68813	2	True				
ANR	68895	AssignmentExpression	"ret = xmemdup0 ( s , t - s )"		68813	0		=			
ANR	68896	Identifier	ret		68813	0					
ANR	68897	CallExpression	"xmemdup0 ( s , t - s )"		68813	1					
ANR	68898	Callee	xmemdup0		68813	0					
ANR	68899	Identifier	xmemdup0		68813	0					
ANR	68900	ArgumentList	s		68813	1					
ANR	68901	Argument	s		68813	0					
ANR	68902	Identifier	s		68813	0					
ANR	68903	Argument	t - s		68813	1					
ANR	68904	AdditiveExpression	t - s		68813	0		-			
ANR	68905	Identifier	t		68813	0					
ANR	68906	Identifier	s		68813	1					
ANR	68907	IfStatement	if ( endp )		68813	3					
ANR	68908	Condition	endp	1585:10:37219:37222	68813	0	True				
ANR	68909	Identifier	endp		68813	0					
ANR	68910	ExpressionStatement	* endp = t	1586:1:37226:37235	68813	1	True				
ANR	68911	AssignmentExpression	* endp = t		68813	0		=			
ANR	68912	UnaryOperationExpression	* endp		68813	0					
ANR	68913	UnaryOperator	*		68813	0					
ANR	68914	Identifier	endp		68813	1					
ANR	68915	Identifier	t		68813	1					
ANR	68916	IfStatement	"if ( ! strip_leading_slashes ( ret , strip_leading ) )"		68813	3					
ANR	68917	Condition	"! strip_leading_slashes ( ret , strip_leading )"	1588:6:37249:37292	68813	0	True				
ANR	68918	UnaryOperationExpression	"! strip_leading_slashes ( ret , strip_leading )"		68813	0					
ANR	68919	UnaryOperator	!		68813	0					
ANR	68920	CallExpression	"strip_leading_slashes ( ret , strip_leading )"		68813	1					
ANR	68921	Callee	strip_leading_slashes		68813	0					
ANR	68922	Identifier	strip_leading_slashes		68813	0					
ANR	68923	ArgumentList	ret		68813	1					
ANR	68924	Argument	ret		68813	0					
ANR	68925	Identifier	ret		68813	0					
ANR	68926	Argument	strip_leading		68813	1					
ANR	68927	Identifier	strip_leading		68813	0					
ANR	68928	CompoundStatement		23:4:405:405	68813	1					
ANR	68929	ExpressionStatement	free ( ret )	1590:6:37307:37317	68813	0	True				
ANR	68930	CallExpression	free ( ret )		68813	0					
ANR	68931	Callee	free		68813	0					
ANR	68932	Identifier	free		68813	0					
ANR	68933	ArgumentList	ret		68813	1					
ANR	68934	Argument	ret		68813	0					
ANR	68935	Identifier	ret		68813	0					
ANR	68936	ExpressionStatement	ret = NULL	1591:6:37325:37335	68813	1	True				
ANR	68937	AssignmentExpression	ret = NULL		68813	0		=			
ANR	68938	Identifier	ret		68813	0					
ANR	68939	Identifier	NULL		68813	1					
ANR	68940	ReturnStatement	return ret ;	1593:2:37345:37355	68813	4	True				
ANR	68941	Identifier	ret		68813	0					
ANR	68942	ReturnType	char *		68813	1					
ANR	68943	Identifier	parse_name		68813	2					
ANR	68944	ParameterList	"char const * s , int strip_leading , char const * * endp"		68813	3					
ANR	68945	Parameter	char const * s	1566:12:36840:36852	68813	0	True				
ANR	68946	ParameterType	char const *		68813	0					
ANR	68947	Identifier	s		68813	1					
ANR	68948	Parameter	int strip_leading	1566:27:36855:36871	68813	1	True				
ANR	68949	ParameterType	int		68813	0					
ANR	68950	Identifier	strip_leading		68813	1					
ANR	68951	Parameter	char const * * endp	1566:46:36874:36890	68813	2	True				
ANR	68952	ParameterType	char const * *		68813	0					
ANR	68953	Identifier	endp		68813	1					
ANR	68954	CFGEntryNode	ENTRY		68813		True				
ANR	68955	CFGExitNode	EXIT		68813		True				
ANR	68956	Symbol	ret		68813						
ANR	68957	Symbol	NULL		68813						
ANR	68958	Symbol	parse_c_string		68813						
ANR	68959	Symbol	strip_leading_slashes		68813						
ANR	68960	Symbol	strip_leading		68813						
ANR	68961	Symbol	xmemdup0		68813						
ANR	68962	Symbol	s		68813						
ANR	68963	Symbol	t		68813						
ANR	68964	Symbol	* endp		68813						
ANR	68965	Symbol	endp		68813						
ANR	68966	Symbol	ISSPACE		68813						
ANR	68967	Symbol	* s		68813						
ANR	68968	Symbol	* t		68813						
ANR	68969	Function	Fseek	1596:0:37360:37491							
ANR	68970	FunctionDef	"Fseek (FILE * stream , file_offset offset , int ptrname)"		68969	0					
ANR	68971	CompoundStatement		1598:0:37419:37491	68969	0					
ANR	68972	IfStatement	"if ( file_seek ( stream , offset , ptrname ) != 0 )"		68969	0					
ANR	68973	Condition	"file_seek ( stream , offset , ptrname ) != 0"	1599:6:37427:37466	68969	0	True				
ANR	68974	EqualityExpression	"file_seek ( stream , offset , ptrname ) != 0"		68969	0		!=			
ANR	68975	CallExpression	"file_seek ( stream , offset , ptrname )"		68969	0					
ANR	68976	Callee	file_seek		68969	0					
ANR	68977	Identifier	file_seek		68969	0					
ANR	68978	ArgumentList	stream		68969	1					
ANR	68979	Argument	stream		68969	0					
ANR	68980	Identifier	stream		68969	0					
ANR	68981	Argument	offset		68969	1					
ANR	68982	Identifier	offset		68969	0					
ANR	68983	Argument	ptrname		68969	2					
ANR	68984	Identifier	ptrname		68969	0					
ANR	68985	PrimaryExpression	0		68969	1					
ANR	68986	ExpressionStatement	"pfatal ( ""fseek"" )"	1600:4:37473:37489	68969	1	True				
ANR	68987	CallExpression	"pfatal ( ""fseek"" )"		68969	0					
ANR	68988	Callee	pfatal		68969	0					
ANR	68989	Identifier	pfatal		68969	0					
ANR	68990	ArgumentList	"""fseek"""		68969	1					
ANR	68991	Argument	"""fseek"""		68969	0					
ANR	68992	PrimaryExpression	"""fseek"""		68969	0					
ANR	68993	ReturnType	void		68969	1					
ANR	68994	Identifier	Fseek		68969	2					
ANR	68995	ParameterList	"FILE * stream , file_offset offset , int ptrname"		68969	3					
ANR	68996	Parameter	FILE * stream	1597:7:37372:37383	68969	0	True				
ANR	68997	ParameterType	FILE *		68969	0					
ANR	68998	Identifier	stream		68969	1					
ANR	68999	Parameter	file_offset offset	1597:21:37386:37403	68969	1	True				
ANR	69000	ParameterType	file_offset		68969	0					
ANR	69001	Identifier	offset		68969	1					
ANR	69002	Parameter	int ptrname	1597:41:37406:37416	68969	2	True				
ANR	69003	ParameterType	int		68969	0					
ANR	69004	Identifier	ptrname		68969	1					
ANR	69005	CFGEntryNode	ENTRY		68969		True				
ANR	69006	CFGExitNode	EXIT		68969		True				
ANR	69007	Symbol	file_seek		68969						
ANR	69008	Symbol	offset		68969						
ANR	69009	Symbol	stream		68969						
ANR	69010	Symbol	ptrname		68969						
ANR	69011	ClassDef	try_safe_open_args	1607:0:37539:37603							
ANR	69012	DeclStmt									
ANR	69013	Decl							int	int	flags
ANR	69014	DeclStmt									
ANR	69015	Decl							mode_t	mode_t	mode
ANR	69016	DeclStmt									
ANR	69017	Decl							struct try_safe_open_args	struct try_safe_open_args *	args
ANR	69018	DeclStmt									
ANR	69019	Decl							int	int	try_makedirs_errno
ANR	69020	DeclStmt									
ANR	69021	Decl							int	int	fd
ANR	69022	Function	make_tempfile	1630:0:37985:39025							
ANR	69023	FunctionDef	"make_tempfile (char const * * name , char letter , char const * real_name , int flags , mode_t mode)"		69022	0					
ANR	69024	CompoundStatement		1633:0:38091:39025	69022	0					
ANR	69025	Statement	char	1634:2:38095:38098	69022	0	True				
ANR	69026	Statement	*	1634:7:38100:38100	69022	1	True				
ANR	69027	Statement	template	1634:8:38101:38108	69022	2	True				
ANR	69028	ExpressionStatement		1634:16:38109:38109	69022	3	True				
ANR	69029	Statement	struct	1635:2:38113:38118	69022	4	True				
ANR	69030	Statement	try_safe_open_args	1635:9:38120:38137	69022	5	True				
ANR	69031	Statement	args	1635:28:38139:38142	69022	6	True				
ANR	69032	Statement	=	1635:33:38144:38144	69022	7	True				
ANR	69033	CompoundStatement		3:35:54:54	69022	8					
ANR	69034	Statement	.	1636:4:38152:38152	69022	0	True				
ANR	69035	Statement	flags	1636:5:38153:38157	69022	1	True				
ANR	69036	Statement	=	1636:11:38159:38159	69022	2	True				
ANR	69037	Statement	flags	1636:13:38161:38165	69022	3	True				
ANR	69038	Statement	","	1636:18:38166:38166	69022	4	True				
ANR	69039	Statement	.	1637:4:38172:38172	69022	5	True				
ANR	69040	Statement	mode	1637:5:38173:38176	69022	6	True				
ANR	69041	Statement	=	1637:10:38178:38178	69022	7	True				
ANR	69042	Statement	mode	1637:12:38180:38183	69022	8	True				
ANR	69043	Statement	","	1637:16:38184:38184	69022	9	True				
ANR	69044	ExpressionStatement		1638:3:38189:38189	69022	9	True				
ANR	69045	IdentifierDeclStatement	int fd ;	1639:2:38193:38199	69022	10	True				
ANR	69046	IdentifierDecl	fd		69022	0					
ANR	69047	IdentifierDeclType	int		69022	0					
ANR	69048	Identifier	fd		69022	1					
ANR	69049	IfStatement	if ( real_name && ! dry_run )		69022	11					
ANR	69050	Condition	real_name && ! dry_run	1641:6:38208:38229	69022	0	True				
ANR	69051	AndExpression	real_name && ! dry_run		69022	0		&&			
ANR	69052	Identifier	real_name		69022	0					
ANR	69053	UnaryOperationExpression	! dry_run		69022	1					
ANR	69054	UnaryOperator	!		69022	0					
ANR	69055	Identifier	dry_run		69022	1					
ANR	69056	CompoundStatement		11:6:152:176	69022	1					
ANR	69057	IdentifierDeclStatement	"char * dirname , * basename ;"	1643:6:38244:38268	69022	0	True				
ANR	69058	IdentifierDecl	* dirname		69022	0					
ANR	69059	IdentifierDeclType	char *		69022	0					
ANR	69060	Identifier	dirname		69022	1					
ANR	69061	IdentifierDecl	* basename		69022	1					
ANR	69062	IdentifierDeclType	char *		69022	0					
ANR	69063	Identifier	basename		69022	1					
ANR	69064	ExpressionStatement	dirname = dir_name ( real_name )	1645:6:38277:38307	69022	1	True				
ANR	69065	AssignmentExpression	dirname = dir_name ( real_name )		69022	0		=			
ANR	69066	Identifier	dirname		69022	0					
ANR	69067	CallExpression	dir_name ( real_name )		69022	1					
ANR	69068	Callee	dir_name		69022	0					
ANR	69069	Identifier	dir_name		69022	0					
ANR	69070	ArgumentList	real_name		69022	1					
ANR	69071	Argument	real_name		69022	0					
ANR	69072	Identifier	real_name		69022	0					
ANR	69073	ExpressionStatement	basename = base_name ( real_name )	1646:6:38315:38347	69022	2	True				
ANR	69074	AssignmentExpression	basename = base_name ( real_name )		69022	0		=			
ANR	69075	Identifier	basename		69022	0					
ANR	69076	CallExpression	base_name ( real_name )		69022	1					
ANR	69077	Callee	base_name		69022	0					
ANR	69078	Identifier	base_name		69022	0					
ANR	69079	ArgumentList	real_name		69022	1					
ANR	69080	Argument	real_name		69022	0					
ANR	69081	Identifier	real_name		69022	0					
ANR	69082	Statement	template	1648:6:38356:38363	69022	3	True				
ANR	69083	Statement	=	1648:15:38365:38365	69022	4	True				
ANR	69084	ExpressionStatement	xmalloc ( strlen ( dirname ) + 1 + strlen ( basename ) + 9 )	1648:17:38367:38421	69022	5	True				
ANR	69085	CallExpression	xmalloc ( strlen ( dirname ) + 1 + strlen ( basename ) + 9 )		69022	0					
ANR	69086	Callee	xmalloc		69022	0					
ANR	69087	Identifier	xmalloc		69022	0					
ANR	69088	ArgumentList	strlen ( dirname ) + 1 + strlen ( basename ) + 9		69022	1					
ANR	69089	Argument	strlen ( dirname ) + 1 + strlen ( basename ) + 9		69022	0					
ANR	69090	AdditiveExpression	strlen ( dirname ) + 1 + strlen ( basename ) + 9		69022	0		+			
ANR	69091	CallExpression	strlen ( dirname )		69022	0					
ANR	69092	Callee	strlen		69022	0					
ANR	69093	Identifier	strlen		69022	0					
ANR	69094	ArgumentList	dirname		69022	1					
ANR	69095	Argument	dirname		69022	0					
ANR	69096	Identifier	dirname		69022	0					
ANR	69097	AdditiveExpression	1 + strlen ( basename ) + 9		69022	1		+			
ANR	69098	PrimaryExpression	1		69022	0					
ANR	69099	AdditiveExpression	strlen ( basename ) + 9		69022	1		+			
ANR	69100	CallExpression	strlen ( basename )		69022	0					
ANR	69101	Callee	strlen		69022	0					
ANR	69102	Identifier	strlen		69022	0					
ANR	69103	ArgumentList	basename		69022	1					
ANR	69104	Argument	basename		69022	0					
ANR	69105	Identifier	basename		69022	0					
ANR	69106	PrimaryExpression	9		69022	1					
ANR	69107	Statement	sprintf	1649:6:38429:38435	69022	6	True				
ANR	69108	Statement	(	1649:14:38437:38437	69022	7	True				
ANR	69109	Statement	template	1649:15:38438:38445	69022	8	True				
ANR	69110	Statement	","	1649:23:38446:38446	69022	9	True				
ANR	69111	Statement	"""%s/%s.%cXXXXXX"""	1649:25:38448:38463	69022	10	True				
ANR	69112	Statement	","	1649:41:38464:38464	69022	11	True				
ANR	69113	Statement	dirname	1649:43:38466:38472	69022	12	True				
ANR	69114	Statement	","	1649:50:38473:38473	69022	13	True				
ANR	69115	Statement	basename	1649:52:38475:38482	69022	14	True				
ANR	69116	Statement	","	1649:60:38483:38483	69022	15	True				
ANR	69117	Statement	letter	1649:62:38485:38490	69022	16	True				
ANR	69118	Statement	)	1649:68:38491:38491	69022	17	True				
ANR	69119	ExpressionStatement		1649:69:38492:38492	69022	18	True				
ANR	69120	ExpressionStatement	free ( dirname )	1650:6:38500:38514	69022	19	True				
ANR	69121	CallExpression	free ( dirname )		69022	0					
ANR	69122	Callee	free		69022	0					
ANR	69123	Identifier	free		69022	0					
ANR	69124	ArgumentList	dirname		69022	1					
ANR	69125	Argument	dirname		69022	0					
ANR	69126	Identifier	dirname		69022	0					
ANR	69127	ExpressionStatement	free ( basename )	1651:6:38522:38537	69022	20	True				
ANR	69128	CallExpression	free ( basename )		69022	0					
ANR	69129	Callee	free		69022	0					
ANR	69130	Identifier	free		69022	0					
ANR	69131	ArgumentList	basename		69022	1					
ANR	69132	Argument	basename		69022	0					
ANR	69133	Identifier	basename		69022	0					
ANR	69134	ElseStatement	else		69022	0					
ANR	69135	CompoundStatement		23:6:472:490	69022	0					
ANR	69136	IdentifierDeclStatement	char const * tmpdir ;	1655:6:38564:38582	69022	0	True				
ANR	69137	IdentifierDecl	* tmpdir		69022	0					
ANR	69138	IdentifierDeclType	char const *		69022	0					
ANR	69139	Identifier	tmpdir		69022	1					
ANR	69140	ExpressionStatement	"tmpdir = getenv ( ""TMPDIR"" )"	1657:6:38591:38617	69022	1	True				
ANR	69141	AssignmentExpression	"tmpdir = getenv ( ""TMPDIR"" )"		69022	0		=			
ANR	69142	Identifier	tmpdir		69022	0					
ANR	69143	CallExpression	"getenv ( ""TMPDIR"" )"		69022	1					
ANR	69144	Callee	getenv		69022	0					
ANR	69145	Identifier	getenv		69022	0					
ANR	69146	ArgumentList	"""TMPDIR"""		69022	1					
ANR	69147	Argument	"""TMPDIR"""		69022	0					
ANR	69148	PrimaryExpression	"""TMPDIR"""		69022	0					
ANR	69149	IfStatement	if ( ! tmpdir )		69022	2					
ANR	69150	Condition	! tmpdir	1658:10:38651:38658	69022	0	True				
ANR	69151	UnaryOperationExpression	! tmpdir		69022	0					
ANR	69152	UnaryOperator	!		69022	0					
ANR	69153	Identifier	tmpdir		69022	1					
ANR	69154	ExpressionStatement	"tmpdir = getenv ( ""TMP"" )"	1659:1:38662:38685	69022	1	True				
ANR	69155	AssignmentExpression	"tmpdir = getenv ( ""TMP"" )"		69022	0		=			
ANR	69156	Identifier	tmpdir		69022	0					
ANR	69157	CallExpression	"getenv ( ""TMP"" )"		69022	1					
ANR	69158	Callee	getenv		69022	0					
ANR	69159	Identifier	getenv		69022	0					
ANR	69160	ArgumentList	"""TMP"""		69022	1					
ANR	69161	Argument	"""TMP"""		69022	0					
ANR	69162	PrimaryExpression	"""TMP"""		69022	0					
ANR	69163	IfStatement	if ( ! tmpdir )		69022	3					
ANR	69164	Condition	! tmpdir	1660:10:38718:38725	69022	0	True				
ANR	69165	UnaryOperationExpression	! tmpdir		69022	0					
ANR	69166	UnaryOperator	!		69022	0					
ANR	69167	Identifier	tmpdir		69022	1					
ANR	69168	ExpressionStatement	"tmpdir = getenv ( ""TEMP"" )"	1661:1:38729:38753	69022	1	True				
ANR	69169	AssignmentExpression	"tmpdir = getenv ( ""TEMP"" )"		69022	0		=			
ANR	69170	Identifier	tmpdir		69022	0					
ANR	69171	CallExpression	"getenv ( ""TEMP"" )"		69022	1					
ANR	69172	Callee	getenv		69022	0					
ANR	69173	Identifier	getenv		69022	0					
ANR	69174	ArgumentList	"""TEMP"""		69022	1					
ANR	69175	Argument	"""TEMP"""		69022	0					
ANR	69176	PrimaryExpression	"""TEMP"""		69022	0					
ANR	69177	IfStatement	if ( ! tmpdir )		69022	4					
ANR	69178	Condition	! tmpdir	1662:10:38794:38801	69022	0	True				
ANR	69179	UnaryOperationExpression	! tmpdir		69022	0					
ANR	69180	UnaryOperator	!		69022	0					
ANR	69181	Identifier	tmpdir		69022	1					
ANR	69182	ExpressionStatement	tmpdir = TMPDIR	1663:1:38805:38820	69022	1	True				
ANR	69183	AssignmentExpression	tmpdir = TMPDIR		69022	0		=			
ANR	69184	Identifier	tmpdir		69022	0					
ANR	69185	Identifier	TMPDIR		69022	1					
ANR	69186	Statement	template	1665:6:38829:38836	69022	5	True				
ANR	69187	Statement	=	1665:15:38838:38838	69022	6	True				
ANR	69188	ExpressionStatement	xmalloc ( strlen ( tmpdir ) + 10 )	1665:17:38840:38870	69022	7	True				
ANR	69189	CallExpression	xmalloc ( strlen ( tmpdir ) + 10 )		69022	0					
ANR	69190	Callee	xmalloc		69022	0					
ANR	69191	Identifier	xmalloc		69022	0					
ANR	69192	ArgumentList	strlen ( tmpdir ) + 10		69022	1					
ANR	69193	Argument	strlen ( tmpdir ) + 10		69022	0					
ANR	69194	AdditiveExpression	strlen ( tmpdir ) + 10		69022	0		+			
ANR	69195	CallExpression	strlen ( tmpdir )		69022	0					
ANR	69196	Callee	strlen		69022	0					
ANR	69197	Identifier	strlen		69022	0					
ANR	69198	ArgumentList	tmpdir		69022	1					
ANR	69199	Argument	tmpdir		69022	0					
ANR	69200	Identifier	tmpdir		69022	0					
ANR	69201	PrimaryExpression	10		69022	1					
ANR	69202	Statement	sprintf	1666:6:38878:38884	69022	8	True				
ANR	69203	Statement	(	1666:14:38886:38886	69022	9	True				
ANR	69204	Statement	template	1666:15:38887:38894	69022	10	True				
ANR	69205	Statement	","	1666:23:38895:38895	69022	11	True				
ANR	69206	Statement	"""%s/p%cXXXXXX"""	1666:25:38897:38910	69022	12	True				
ANR	69207	Statement	","	1666:39:38911:38911	69022	13	True				
ANR	69208	Statement	tmpdir	1666:41:38913:38918	69022	14	True				
ANR	69209	Statement	","	1666:47:38919:38919	69022	15	True				
ANR	69210	Statement	letter	1666:49:38921:38926	69022	16	True				
ANR	69211	Statement	)	1666:55:38927:38927	69022	17	True				
ANR	69212	ExpressionStatement		1666:56:38928:38928	69022	18	True				
ANR	69213	Statement	fd	1668:2:38938:38939	69022	12	True				
ANR	69214	Statement	=	1668:5:38941:38941	69022	13	True				
ANR	69215	Statement	try_tempname	1668:7:38943:38954	69022	14	True				
ANR	69216	Statement	(	1668:19:38955:38955	69022	15	True				
ANR	69217	Statement	template	1668:20:38956:38963	69022	16	True				
ANR	69218	Statement	","	1668:28:38964:38964	69022	17	True				
ANR	69219	Statement	0	1668:30:38966:38966	69022	18	True				
ANR	69220	Statement	","	1668:31:38967:38967	69022	19	True				
ANR	69221	Statement	&	1668:33:38969:38969	69022	20	True				
ANR	69222	Statement	args	1668:34:38970:38973	69022	21	True				
ANR	69223	Statement	","	1668:38:38974:38974	69022	22	True				
ANR	69224	Statement	try_safe_open	1668:40:38976:38988	69022	23	True				
ANR	69225	Statement	)	1668:53:38989:38989	69022	24	True				
ANR	69226	ExpressionStatement		1668:54:38990:38990	69022	25	True				
ANR	69227	Statement	*	1669:2:38994:38994	69022	26	True				
ANR	69228	Statement	name	1669:3:38995:38998	69022	27	True				
ANR	69229	Statement	=	1669:8:39000:39000	69022	28	True				
ANR	69230	Statement	template	1669:10:39002:39009	69022	29	True				
ANR	69231	ExpressionStatement		1669:18:39010:39010	69022	30	True				
ANR	69232	ReturnStatement	return fd ;	1670:2:39014:39023	69022	31	True				
ANR	69233	Identifier	fd		69022	0					
ANR	69234	ReturnType	int		69022	1					
ANR	69235	Identifier	make_tempfile		69022	2					
ANR	69236	ParameterList	"char const * * name , char letter , char const * real_name , int flags , mode_t mode"		69022	3					
ANR	69237	Parameter	char const * * name	1631:15:38004:38020	69022	0	True				
ANR	69238	ParameterType	char const * *		69022	0					
ANR	69239	Identifier	name		69022	1					
ANR	69240	Parameter	char letter	1631:34:38023:38033	69022	1	True				
ANR	69241	ParameterType	char		69022	0					
ANR	69242	Identifier	letter		69022	1					
ANR	69243	Parameter	char const * real_name	1631:47:38036:38056	69022	2	True				
ANR	69244	ParameterType	char const *		69022	0					
ANR	69245	Identifier	real_name		69022	1					
ANR	69246	Parameter	int flags	1632:8:38067:38075	69022	3	True				
ANR	69247	ParameterType	int		69022	0					
ANR	69248	Identifier	flags		69022	1					
ANR	69249	Parameter	mode_t mode	1632:19:38078:38088	69022	4	True				
ANR	69250	ParameterType	mode_t		69022	0					
ANR	69251	Identifier	mode		69022	1					
ANR	69252	CFGEntryNode	ENTRY		69022		True				
ANR	69253	CFGExitNode	EXIT		69022		True				
ANR	69254	Symbol	base_name		69022						
ANR	69255	Symbol	dir_name		69022						
ANR	69256	Symbol	flags		69022						
ANR	69257	Symbol	real_name		69022						
ANR	69258	Symbol	dirname		69022						
ANR	69259	Symbol	TMPDIR		69022						
ANR	69260	Symbol	mode		69022						
ANR	69261	Symbol	tmpdir		69022						
ANR	69262	Symbol	strlen		69022						
ANR	69263	Symbol	basename		69022						
ANR	69264	Symbol	letter		69022						
ANR	69265	Symbol	name		69022						
ANR	69266	Symbol	dry_run		69022						
ANR	69267	Symbol	fd		69022						
ANR	69268	Symbol	getenv		69022						
ANR	69269	Function	stat_file	1673:0:39028:39225							
ANR	69270	FunctionDef	"stat_file (char const * filename , struct stat * st)"		69269	0					
ANR	69271	CompoundStatement		1674:0:39082:39225	69269	0					
ANR	69272	IdentifierDeclStatement	"int ( * xstat ) ( char const * , struct stat * ) = follow_symlinks ? safe_stat : safe_lstat ;"	1675:2:39086:39174	69269	0	True				
ANR	69273	IdentifierDecl	"( * xstat ) ( char const * , struct stat * ) = follow_symlinks ? safe_stat : safe_lstat"		69269	0					
ANR	69274	IdentifierDeclType	"int ( * ) ( char const * , struct stat * )"		69269	0					
ANR	69275	Identifier	xstat		69269	1					
ANR	69276	AssignmentExpression	"( * xstat ) ( char const * , struct stat * ) = follow_symlinks ? safe_stat : safe_lstat"		69269	2		=			
ANR	69277	Identifier	xstat		69269	0					
ANR	69278	ConditionalExpression	follow_symlinks ? safe_stat : safe_lstat		69269	1					
ANR	69279	Condition	follow_symlinks		69269	0					
ANR	69280	Identifier	follow_symlinks		69269	0					
ANR	69281	Identifier	safe_stat		69269	1					
ANR	69282	Identifier	safe_lstat		69269	2					
ANR	69283	ReturnStatement	"return xstat ( filename , st ) == 0 ? 0 : errno ;"	1678:2:39179:39223	69269	1	True				
ANR	69284	ConditionalExpression	"xstat ( filename , st ) == 0 ? 0 : errno"		69269	0					
ANR	69285	Condition	"xstat ( filename , st ) == 0"		69269	0					
ANR	69286	EqualityExpression	"xstat ( filename , st ) == 0"		69269	0		==			
ANR	69287	CallExpression	"xstat ( filename , st )"		69269	0					
ANR	69288	Callee	xstat		69269	0					
ANR	69289	Identifier	xstat		69269	0					
ANR	69290	ArgumentList	filename		69269	1					
ANR	69291	Argument	filename		69269	0					
ANR	69292	Identifier	filename		69269	0					
ANR	69293	Argument	st		69269	1					
ANR	69294	Identifier	st		69269	0					
ANR	69295	PrimaryExpression	0		69269	1					
ANR	69296	PrimaryExpression	0		69269	1					
ANR	69297	Identifier	errno		69269	2					
ANR	69298	ReturnType	int		69269	1					
ANR	69299	Identifier	stat_file		69269	2					
ANR	69300	ParameterList	"char const * filename , struct stat * st"		69269	3					
ANR	69301	Parameter	char const * filename	1673:15:39043:39062	69269	0	True				
ANR	69302	ParameterType	char const *		69269	0					
ANR	69303	Identifier	filename		69269	1					
ANR	69304	Parameter	struct stat * st	1673:37:39065:39079	69269	1	True				
ANR	69305	ParameterType	struct stat *		69269	0					
ANR	69306	Identifier	st		69269	1					
ANR	69307	CFGEntryNode	ENTRY		69269		True				
ANR	69308	CFGExitNode	EXIT		69269		True				
ANR	69309	Symbol	st		69269						
ANR	69310	Symbol	errno		69269						
ANR	69311	Symbol	filename		69269						
ANR	69312	Symbol	safe_stat		69269						
ANR	69313	Symbol	safe_lstat		69269						
ANR	69314	Symbol	xstat		69269						
ANR	69315	Symbol	follow_symlinks		69269						
ANR	69316	Function	filename_is_safe	1685:0:39457:39781							
ANR	69317	FunctionDef	filename_is_safe (char const * name)		69316	0					
ANR	69318	CompoundStatement		1687:0:39498:39781	69316	0					
ANR	69319	IfStatement	if ( IS_ABSOLUTE_FILE_NAME ( name ) )		69316	0					
ANR	69320	Condition	IS_ABSOLUTE_FILE_NAME ( name )	1688:6:39506:39533	69316	0	True				
ANR	69321	CallExpression	IS_ABSOLUTE_FILE_NAME ( name )		69316	0					
ANR	69322	Callee	IS_ABSOLUTE_FILE_NAME		69316	0					
ANR	69323	Identifier	IS_ABSOLUTE_FILE_NAME		69316	0					
ANR	69324	ArgumentList	name		69316	1					
ANR	69325	Argument	name		69316	0					
ANR	69326	Identifier	name		69316	0					
ANR	69327	ReturnStatement	return false ;	1689:4:39540:39552	69316	1	True				
ANR	69328	Identifier	false		69316	0					
ANR	69329	WhileStatement	while ( * name )		69316	1					
ANR	69330	Condition	* name	1690:9:39563:39567	69316	0	True				
ANR	69331	UnaryOperationExpression	* name		69316	0					
ANR	69332	UnaryOperator	*		69316	0					
ANR	69333	Identifier	name		69316	1					
ANR	69334	CompoundStatement		5:4:75:75	69316	1					
ANR	69335	IfStatement	if ( * name == '.' && * ++ name == '.' && ( ! * ++ name || ISSLASH ( * name ) ) )		69316	0					
ANR	69336	Condition	* name == '.' && * ++ name == '.' && ( ! * ++ name || ISSLASH ( * name ) )	1692:10:39586:39653	69316	0	True				
ANR	69337	AndExpression	* name == '.' && * ++ name == '.' && ( ! * ++ name || ISSLASH ( * name ) )		69316	0		&&			
ANR	69338	EqualityExpression	* name == '.'		69316	0		==			
ANR	69339	UnaryOperationExpression	* name		69316	0					
ANR	69340	UnaryOperator	*		69316	0					
ANR	69341	Identifier	name		69316	1					
ANR	69342	PrimaryExpression	'.'		69316	1					
ANR	69343	AndExpression	* ++ name == '.' && ( ! * ++ name || ISSLASH ( * name ) )		69316	1		&&			
ANR	69344	EqualityExpression	* ++ name == '.'		69316	0		==			
ANR	69345	UnaryOperationExpression	* ++ name		69316	0					
ANR	69346	UnaryOperator	*		69316	0					
ANR	69347	UnaryExpression	++ name		69316	1					
ANR	69348	IncDec	++		69316	0					
ANR	69349	Identifier	name		69316	1					
ANR	69350	PrimaryExpression	'.'		69316	1					
ANR	69351	OrExpression	! * ++ name || ISSLASH ( * name )		69316	1		||			
ANR	69352	UnaryOperationExpression	! * ++ name		69316	0					
ANR	69353	UnaryOperator	!		69316	0					
ANR	69354	UnaryOperationExpression	* ++ name		69316	1					
ANR	69355	UnaryOperator	*		69316	0					
ANR	69356	UnaryExpression	++ name		69316	1					
ANR	69357	IncDec	++		69316	0					
ANR	69358	Identifier	name		69316	1					
ANR	69359	CallExpression	ISSLASH ( * name )		69316	1					
ANR	69360	Callee	ISSLASH		69316	0					
ANR	69361	Identifier	ISSLASH		69316	0					
ANR	69362	ArgumentList	* name		69316	1					
ANR	69363	Argument	* name		69316	0					
ANR	69364	UnaryOperationExpression	* name		69316	0					
ANR	69365	UnaryOperator	*		69316	0					
ANR	69366	Identifier	name		69316	1					
ANR	69367	ReturnStatement	return false ;	1694:1:39657:39669	69316	1	True				
ANR	69368	Identifier	false		69316	0					
ANR	69369	WhileStatement	while ( * name && ! ISSLASH ( * name ) )		69316	1					
ANR	69370	Condition	* name && ! ISSLASH ( * name )	1695:13:39684:39709	69316	0	True				
ANR	69371	AndExpression	* name && ! ISSLASH ( * name )		69316	0		&&			
ANR	69372	UnaryOperationExpression	* name		69316	0					
ANR	69373	UnaryOperator	*		69316	0					
ANR	69374	Identifier	name		69316	1					
ANR	69375	UnaryOperationExpression	! ISSLASH ( * name )		69316	1					
ANR	69376	UnaryOperator	!		69316	0					
ANR	69377	CallExpression	ISSLASH ( * name )		69316	1					
ANR	69378	Callee	ISSLASH		69316	0					
ANR	69379	Identifier	ISSLASH		69316	0					
ANR	69380	ArgumentList	* name		69316	1					
ANR	69381	Argument	* name		69316	0					
ANR	69382	UnaryOperationExpression	* name		69316	0					
ANR	69383	UnaryOperator	*		69316	0					
ANR	69384	Identifier	name		69316	1					
ANR	69385	ExpressionStatement	name ++	1696:1:39713:39719	69316	1	True				
ANR	69386	PostIncDecOperationExpression	name ++		69316	0					
ANR	69387	Identifier	name		69316	0					
ANR	69388	IncDec	++		69316	1					
ANR	69389	WhileStatement	while ( ISSLASH ( * name ) )		69316	2					
ANR	69390	Condition	ISSLASH ( * name )	1697:13:39734:39748	69316	0	True				
ANR	69391	CallExpression	ISSLASH ( * name )		69316	0					
ANR	69392	Callee	ISSLASH		69316	0					
ANR	69393	Identifier	ISSLASH		69316	0					
ANR	69394	ArgumentList	* name		69316	1					
ANR	69395	Argument	* name		69316	0					
ANR	69396	UnaryOperationExpression	* name		69316	0					
ANR	69397	UnaryOperator	*		69316	0					
ANR	69398	Identifier	name		69316	1					
ANR	69399	ExpressionStatement	name ++	1698:1:39752:39758	69316	1	True				
ANR	69400	PostIncDecOperationExpression	name ++		69316	0					
ANR	69401	Identifier	name		69316	0					
ANR	69402	IncDec	++		69316	1					
ANR	69403	ReturnStatement	return true ;	1700:2:39768:39779	69316	2	True				
ANR	69404	Identifier	true		69316	0					
ANR	69405	ReturnType	bool		69316	1					
ANR	69406	Identifier	filename_is_safe		69316	2					
ANR	69407	ParameterList	char const * name		69316	3					
ANR	69408	Parameter	char const * name	1686:18:39480:39495	69316	0	True				
ANR	69409	ParameterType	char const *		69316	0					
ANR	69410	Identifier	name		69316	1					
ANR	69411	CFGEntryNode	ENTRY		69316		True				
ANR	69412	CFGExitNode	EXIT		69316		True				
ANR	69413	Symbol	* name		69316						
ANR	69414	Symbol	* ++ name		69316						
ANR	69415	Symbol	name		69316						
ANR	69416	Symbol	false		69316						
ANR	69417	Symbol	true		69316						
ANR	69418	Symbol	IS_ABSOLUTE_FILE_NAME		69316						
ANR	69419	Symbol	ISSLASH		69316						
ANR	69420	Function	cwd_is_root	1705:0:39923:40381							
ANR	69421	FunctionDef	cwd_is_root (char const * name)		69420	0					
ANR	69422	CompoundStatement		1707:0:39959:40381	69420	0					
ANR	69423	IdentifierDeclStatement	unsigned int prefix_len = FILE_SYSTEM_PREFIX_LEN ( name ) ;	1708:2:39963:40018	69420	0	True				
ANR	69424	IdentifierDecl	prefix_len = FILE_SYSTEM_PREFIX_LEN ( name )		69420	0					
ANR	69425	IdentifierDeclType	unsigned int		69420	0					
ANR	69426	Identifier	prefix_len		69420	1					
ANR	69427	AssignmentExpression	prefix_len = FILE_SYSTEM_PREFIX_LEN ( name )		69420	2		=			
ANR	69428	Identifier	prefix_len		69420	0					
ANR	69429	CallExpression	FILE_SYSTEM_PREFIX_LEN ( name )		69420	1					
ANR	69430	Callee	FILE_SYSTEM_PREFIX_LEN		69420	0					
ANR	69431	Identifier	FILE_SYSTEM_PREFIX_LEN		69420	0					
ANR	69432	ArgumentList	name		69420	1					
ANR	69433	Argument	name		69420	0					
ANR	69434	Identifier	name		69420	0					
ANR	69435	IdentifierDeclStatement	char root [ prefix_len + 2 ] ;	1709:2:40022:40047	69420	1	True				
ANR	69436	IdentifierDecl	root [ prefix_len + 2 ]		69420	0					
ANR	69437	IdentifierDeclType	char [ prefix_len + 2 ]		69420	0					
ANR	69438	Identifier	root		69420	1					
ANR	69439	AdditiveExpression	prefix_len + 2		69420	2		+			
ANR	69440	Identifier	prefix_len		69420	0					
ANR	69441	PrimaryExpression	2		69420	1					
ANR	69442	IdentifierDeclStatement	struct stat st ;	1710:2:40051:40065	69420	2	True				
ANR	69443	IdentifierDecl	st		69420	0					
ANR	69444	IdentifierDeclType	struct stat		69420	0					
ANR	69445	Identifier	st		69420	1					
ANR	69446	IdentifierDeclStatement	dev_t root_dev ;	1711:2:40069:40083	69420	3	True				
ANR	69447	IdentifierDecl	root_dev		69420	0					
ANR	69448	IdentifierDeclType	dev_t		69420	0					
ANR	69449	Identifier	root_dev		69420	1					
ANR	69450	IdentifierDeclStatement	ino_t root_ino ;	1712:2:40087:40101	69420	4	True				
ANR	69451	IdentifierDecl	root_ino		69420	0					
ANR	69452	IdentifierDeclType	ino_t		69420	0					
ANR	69453	Identifier	root_ino		69420	1					
ANR	69454	ExpressionStatement	"memcpy ( root , name , prefix_len )"	1714:2:40106:40137	69420	5	True				
ANR	69455	CallExpression	"memcpy ( root , name , prefix_len )"		69420	0					
ANR	69456	Callee	memcpy		69420	0					
ANR	69457	Identifier	memcpy		69420	0					
ANR	69458	ArgumentList	root		69420	1					
ANR	69459	Argument	root		69420	0					
ANR	69460	Identifier	root		69420	0					
ANR	69461	Argument	name		69420	1					
ANR	69462	Identifier	name		69420	0					
ANR	69463	Argument	prefix_len		69420	2					
ANR	69464	Identifier	prefix_len		69420	0					
ANR	69465	ExpressionStatement	root [ prefix_len ] = '/'	1715:2:40141:40163	69420	6	True				
ANR	69466	AssignmentExpression	root [ prefix_len ] = '/'		69420	0		=			
ANR	69467	ArrayIndexing	root [ prefix_len ]		69420	0					
ANR	69468	Identifier	root		69420	0					
ANR	69469	Identifier	prefix_len		69420	1					
ANR	69470	PrimaryExpression	'/'		69420	1					
ANR	69471	ExpressionStatement	root [ prefix_len + 1 ] = 0	1716:2:40167:40191	69420	7	True				
ANR	69472	AssignmentExpression	root [ prefix_len + 1 ] = 0		69420	0		=			
ANR	69473	ArrayIndexing	root [ prefix_len + 1 ]		69420	0					
ANR	69474	Identifier	root		69420	0					
ANR	69475	AdditiveExpression	prefix_len + 1		69420	1		+			
ANR	69476	Identifier	prefix_len		69420	0					
ANR	69477	PrimaryExpression	1		69420	1					
ANR	69478	PrimaryExpression	0		69420	1					
ANR	69479	IfStatement	"if ( stat ( root , & st ) )"		69420	8					
ANR	69480	Condition	"stat ( root , & st )"	1717:6:40199:40214	69420	0	True				
ANR	69481	CallExpression	"stat ( root , & st )"		69420	0					
ANR	69482	Callee	stat		69420	0					
ANR	69483	Identifier	stat		69420	0					
ANR	69484	ArgumentList	root		69420	1					
ANR	69485	Argument	root		69420	0					
ANR	69486	Identifier	root		69420	0					
ANR	69487	Argument	& st		69420	1					
ANR	69488	UnaryOperationExpression	& st		69420	0					
ANR	69489	UnaryOperator	&		69420	0					
ANR	69490	Identifier	st		69420	1					
ANR	69491	ReturnStatement	return false ;	1718:4:40221:40233	69420	1	True				
ANR	69492	Identifier	false		69420	0					
ANR	69493	ExpressionStatement	root_dev = st . st_dev	1719:2:40237:40257	69420	9	True				
ANR	69494	AssignmentExpression	root_dev = st . st_dev		69420	0		=			
ANR	69495	Identifier	root_dev		69420	0					
ANR	69496	MemberAccess	st . st_dev		69420	1					
ANR	69497	Identifier	st		69420	0					
ANR	69498	Identifier	st_dev		69420	1					
ANR	69499	ExpressionStatement	root_ino = st . st_ino	1720:2:40261:40281	69420	10	True				
ANR	69500	AssignmentExpression	root_ino = st . st_ino		69420	0		=			
ANR	69501	Identifier	root_ino		69420	0					
ANR	69502	MemberAccess	st . st_ino		69420	1					
ANR	69503	Identifier	st		69420	0					
ANR	69504	Identifier	st_ino		69420	1					
ANR	69505	IfStatement	"if ( stat ( ""."" , & st ) )"		69420	11					
ANR	69506	Condition	"stat ( ""."" , & st )"	1721:6:40289:40303	69420	0	True				
ANR	69507	CallExpression	"stat ( ""."" , & st )"		69420	0					
ANR	69508	Callee	stat		69420	0					
ANR	69509	Identifier	stat		69420	0					
ANR	69510	ArgumentList	"""."""		69420	1					
ANR	69511	Argument	"""."""		69420	0					
ANR	69512	PrimaryExpression	"""."""		69420	0					
ANR	69513	Argument	& st		69420	1					
ANR	69514	UnaryOperationExpression	& st		69420	0					
ANR	69515	UnaryOperator	&		69420	0					
ANR	69516	Identifier	st		69420	1					
ANR	69517	ReturnStatement	return false ;	1722:4:40310:40322	69420	1	True				
ANR	69518	Identifier	false		69420	0					
ANR	69519	ReturnStatement	return root_dev == st . st_dev && root_ino == st . st_ino ;	1723:2:40326:40379	69420	12	True				
ANR	69520	AndExpression	root_dev == st . st_dev && root_ino == st . st_ino		69420	0		&&			
ANR	69521	EqualityExpression	root_dev == st . st_dev		69420	0		==			
ANR	69522	Identifier	root_dev		69420	0					
ANR	69523	MemberAccess	st . st_dev		69420	1					
ANR	69524	Identifier	st		69420	0					
ANR	69525	Identifier	st_dev		69420	1					
ANR	69526	EqualityExpression	root_ino == st . st_ino		69420	1		==			
ANR	69527	Identifier	root_ino		69420	0					
ANR	69528	MemberAccess	st . st_ino		69420	1					
ANR	69529	Identifier	st		69420	0					
ANR	69530	Identifier	st_ino		69420	1					
ANR	69531	ReturnType	bool		69420	1					
ANR	69532	Identifier	cwd_is_root		69420	2					
ANR	69533	ParameterList	char const * name		69420	3					
ANR	69534	Parameter	char const * name	1706:13:39941:39956	69420	0	True				
ANR	69535	ParameterType	char const *		69420	0					
ANR	69536	Identifier	name		69420	1					
ANR	69537	CFGEntryNode	ENTRY		69420		True				
ANR	69538	CFGExitNode	EXIT		69420		True				
ANR	69539	Symbol	FILE_SYSTEM_PREFIX_LEN		69420						
ANR	69540	Symbol	st		69420						
ANR	69541	Symbol	stat		69420						
ANR	69542	Symbol	* prefix_len		69420						
ANR	69543	Symbol	st . st_ino		69420						
ANR	69544	Symbol	false		69420						
ANR	69545	Symbol	prefix_len		69420						
ANR	69546	Symbol	root_dev		69420						
ANR	69547	Symbol	& st		69420						
ANR	69548	Symbol	st . st_dev		69420						
ANR	69549	Symbol	root		69420						
ANR	69550	Symbol	name		69420						
ANR	69551	Symbol	* root		69420						
ANR	69552	Symbol	root_ino		69420						
