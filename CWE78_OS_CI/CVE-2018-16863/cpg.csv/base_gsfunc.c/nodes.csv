command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	552339	File	data/converged/CVE-2018-16863_ghostpdl/base_gsfunc.c								
ANR	552340	Function	alloc_function_array	34:0:1172:1639							
ANR	552341	FunctionDef	"alloc_function_array (uint count , gs_function_t * * * pFunctions , gs_memory_t * mem)"		552340	0					
ANR	552342	CompoundStatement		37:0:1278:1639	552340	0					
ANR	552343	IdentifierDeclStatement	gs_function_t * * ptr ;	38:4:1284:1303	552340	0	True				
ANR	552344	IdentifierDecl	* * ptr		552340	0					
ANR	552345	IdentifierDeclType	gs_function_t * *		552340	0					
ANR	552346	Identifier	ptr		552340	1					
ANR	552347	IfStatement	if ( count == 0 )		552340	1					
ANR	552348	Condition	count == 0	40:8:1314:1323	552340	0	True				
ANR	552349	EqualityExpression	count == 0		552340	0		==			
ANR	552350	Identifier	count		552340	0					
ANR	552351	PrimaryExpression	0		552340	1					
ANR	552352	ExpressionStatement	return_error ( gs_error_rangecheck )	41:8:1334:1367	552340	1	True				
ANR	552353	CallExpression	return_error ( gs_error_rangecheck )		552340	0					
ANR	552354	Callee	return_error		552340	0					
ANR	552355	Identifier	return_error		552340	0					
ANR	552356	ArgumentList	gs_error_rangecheck		552340	1					
ANR	552357	Argument	gs_error_rangecheck		552340	0					
ANR	552358	Identifier	gs_error_rangecheck		552340	0					
ANR	552359	Statement	ptr	42:4:1373:1375	552340	2	True				
ANR	552360	Statement	=	42:8:1377:1377	552340	3	True				
ANR	552361	Statement	gs_alloc_struct_array	42:10:1379:1399	552340	4	True				
ANR	552362	Statement	(	42:31:1400:1400	552340	5	True				
ANR	552363	Statement	mem	42:32:1401:1403	552340	6	True				
ANR	552364	Statement	","	42:35:1404:1404	552340	7	True				
ANR	552365	Statement	count	42:37:1406:1410	552340	8	True				
ANR	552366	Statement	","	42:42:1411:1411	552340	9	True				
ANR	552367	Statement	gs_function_t	42:44:1413:1425	552340	10	True				
ANR	552368	Statement	*	42:58:1427:1427	552340	11	True				
ANR	552369	Statement	","	42:59:1428:1428	552340	12	True				
ANR	552370	Statement	&	43:32:1462:1462	552340	13	True				
ANR	552371	Statement	st_function_ptr_element	43:33:1463:1485	552340	14	True				
ANR	552372	Statement	","	43:56:1486:1486	552340	15	True				
ANR	552373	Statement	"""Functions"""	43:58:1488:1498	552340	16	True				
ANR	552374	Statement	)	43:69:1499:1499	552340	17	True				
ANR	552375	ExpressionStatement		43:70:1500:1500	552340	18	True				
ANR	552376	IfStatement	if ( ptr == 0 )		552340	19					
ANR	552377	Condition	ptr == 0	44:8:1510:1517	552340	0	True				
ANR	552378	EqualityExpression	ptr == 0		552340	0		==			
ANR	552379	Identifier	ptr		552340	0					
ANR	552380	PrimaryExpression	0		552340	1					
ANR	552381	ExpressionStatement	return_error ( gs_error_VMerror )	45:8:1528:1558	552340	1	True				
ANR	552382	CallExpression	return_error ( gs_error_VMerror )		552340	0					
ANR	552383	Callee	return_error		552340	0					
ANR	552384	Identifier	return_error		552340	0					
ANR	552385	ArgumentList	gs_error_VMerror		552340	1					
ANR	552386	Argument	gs_error_VMerror		552340	0					
ANR	552387	Identifier	gs_error_VMerror		552340	0					
ANR	552388	ExpressionStatement	"memset ( ptr , 0 , sizeof ( * ptr ) * count )"	46:4:1564:1600	552340	20	True				
ANR	552389	CallExpression	"memset ( ptr , 0 , sizeof ( * ptr ) * count )"		552340	0					
ANR	552390	Callee	memset		552340	0					
ANR	552391	Identifier	memset		552340	0					
ANR	552392	ArgumentList	ptr		552340	1					
ANR	552393	Argument	ptr		552340	0					
ANR	552394	Identifier	ptr		552340	0					
ANR	552395	Argument	0		552340	1					
ANR	552396	PrimaryExpression	0		552340	0					
ANR	552397	Argument	sizeof ( * ptr ) * count		552340	2					
ANR	552398	MultiplicativeExpression	sizeof ( * ptr ) * count		552340	0		*			
ANR	552399	SizeofExpression	sizeof ( * ptr )		552340	0					
ANR	552400	Sizeof	sizeof		552340	0					
ANR	552401	UnaryOperationExpression	* ptr		552340	1					
ANR	552402	UnaryOperator	*		552340	0					
ANR	552403	Identifier	ptr		552340	1					
ANR	552404	Identifier	count		552340	1					
ANR	552405	ExpressionStatement	* pFunctions = ptr	47:4:1606:1623	552340	21	True				
ANR	552406	AssignmentExpression	* pFunctions = ptr		552340	0		=			
ANR	552407	UnaryOperationExpression	* pFunctions		552340	0					
ANR	552408	UnaryOperator	*		552340	0					
ANR	552409	Identifier	pFunctions		552340	1					
ANR	552410	Identifier	ptr		552340	1					
ANR	552411	ReturnStatement	return 0 ;	48:4:1629:1637	552340	22	True				
ANR	552412	PrimaryExpression	0		552340	0					
ANR	552413	ReturnType	int		552340	1					
ANR	552414	Identifier	alloc_function_array		552340	2					
ANR	552415	ParameterList	"uint count , gs_function_t * * * pFunctions , gs_memory_t * mem"		552340	3					
ANR	552416	Parameter	uint count	35:21:1197:1206	552340	0	True				
ANR	552417	ParameterType	uint		552340	0					
ANR	552418	Identifier	count		552340	1					
ANR	552419	Parameter	gs_function_t * * * pFunctions	35:33:1209:1236	552340	1	True				
ANR	552420	ParameterType	gs_function_t * * *		552340	0					
ANR	552421	Identifier	pFunctions		552340	1					
ANR	552422	Parameter	gs_memory_t * mem	36:21:1260:1275	552340	2	True				
ANR	552423	ParameterType	gs_memory_t *		552340	0					
ANR	552424	Identifier	mem		552340	1					
ANR	552425	CFGEntryNode	ENTRY		552340		True				
ANR	552426	CFGExitNode	EXIT		552340		True				
ANR	552427	Symbol	gs_error_VMerror		552340						
ANR	552428	Symbol	mem		552340						
ANR	552429	Symbol	gs_error_rangecheck		552340						
ANR	552430	Symbol	count		552340						
ANR	552431	Symbol	* ptr		552340						
ANR	552432	Symbol	pFunctions		552340						
ANR	552433	Symbol	ptr		552340						
ANR	552434	Symbol	* pFunctions		552340						
ANR	552435	Function	fn_common_free_params	52:0:1684:1875							
ANR	552436	FunctionDef	"fn_common_free_params (gs_function_params_t * params , gs_memory_t * mem)"		552435	0					
ANR	552437	CompoundStatement		54:0:1761:1875	552435	0					
ANR	552438	ExpressionStatement	"gs_free_const_object ( mem , params -> Range , ""Range"" )"	55:4:1767:1816	552435	0	True				
ANR	552439	CallExpression	"gs_free_const_object ( mem , params -> Range , ""Range"" )"		552435	0					
ANR	552440	Callee	gs_free_const_object		552435	0					
ANR	552441	Identifier	gs_free_const_object		552435	0					
ANR	552442	ArgumentList	mem		552435	1					
ANR	552443	Argument	mem		552435	0					
ANR	552444	Identifier	mem		552435	0					
ANR	552445	Argument	params -> Range		552435	1					
ANR	552446	PtrMemberAccess	params -> Range		552435	0					
ANR	552447	Identifier	params		552435	0					
ANR	552448	Identifier	Range		552435	1					
ANR	552449	Argument	"""Range"""		552435	2					
ANR	552450	PrimaryExpression	"""Range"""		552435	0					
ANR	552451	ExpressionStatement	"gs_free_const_object ( mem , params -> Domain , ""Domain"" )"	56:4:1822:1873	552435	1	True				
ANR	552452	CallExpression	"gs_free_const_object ( mem , params -> Domain , ""Domain"" )"		552435	0					
ANR	552453	Callee	gs_free_const_object		552435	0					
ANR	552454	Identifier	gs_free_const_object		552435	0					
ANR	552455	ArgumentList	mem		552435	1					
ANR	552456	Argument	mem		552435	0					
ANR	552457	Identifier	mem		552435	0					
ANR	552458	Argument	params -> Domain		552435	1					
ANR	552459	PtrMemberAccess	params -> Domain		552435	0					
ANR	552460	Identifier	params		552435	0					
ANR	552461	Identifier	Domain		552435	1					
ANR	552462	Argument	"""Domain"""		552435	2					
ANR	552463	PrimaryExpression	"""Domain"""		552435	0					
ANR	552464	ReturnType	void		552435	1					
ANR	552465	Identifier	fn_common_free_params		552435	2					
ANR	552466	ParameterList	"gs_function_params_t * params , gs_memory_t * mem"		552435	3					
ANR	552467	Parameter	gs_function_params_t * params	53:22:1711:1739	552435	0	True				
ANR	552468	ParameterType	gs_function_params_t *		552435	0					
ANR	552469	Identifier	params		552435	1					
ANR	552470	Parameter	gs_memory_t * mem	53:53:1742:1758	552435	1	True				
ANR	552471	ParameterType	gs_memory_t *		552435	0					
ANR	552472	Identifier	mem		552435	1					
ANR	552473	CFGEntryNode	ENTRY		552435		True				
ANR	552474	CFGExitNode	EXIT		552435		True				
ANR	552475	Symbol	params -> Domain		552435						
ANR	552476	Symbol	mem		552435						
ANR	552477	Symbol	params -> Range		552435						
ANR	552478	Symbol	params		552435						
ANR	552479	Symbol	* params		552435						
ANR	552480	Function	fn_common_free	60:0:1913:2105							
ANR	552481	FunctionDef	"fn_common_free (gs_function_t * pfn , bool free_params , gs_memory_t * mem)"		552480	0					
ANR	552482	CompoundStatement		62:0:1991:2105	552480	0					
ANR	552483	IfStatement	if ( free_params )		552480	0					
ANR	552484	Condition	free_params	63:8:2001:2011	552480	0	True				
ANR	552485	Identifier	free_params		552480	0					
ANR	552486	ExpressionStatement	"gs_function_free_params ( pfn , mem )"	64:8:2022:2055	552480	1	True				
ANR	552487	CallExpression	"gs_function_free_params ( pfn , mem )"		552480	0					
ANR	552488	Callee	gs_function_free_params		552480	0					
ANR	552489	Identifier	gs_function_free_params		552480	0					
ANR	552490	ArgumentList	pfn		552480	1					
ANR	552491	Argument	pfn		552480	0					
ANR	552492	Identifier	pfn		552480	0					
ANR	552493	Argument	mem		552480	1					
ANR	552494	Identifier	mem		552480	0					
ANR	552495	ExpressionStatement	"gs_free_object ( mem , pfn , ""fn_common_free"" )"	65:4:2061:2103	552480	1	True				
ANR	552496	CallExpression	"gs_free_object ( mem , pfn , ""fn_common_free"" )"		552480	0					
ANR	552497	Callee	gs_free_object		552480	0					
ANR	552498	Identifier	gs_free_object		552480	0					
ANR	552499	ArgumentList	mem		552480	1					
ANR	552500	Argument	mem		552480	0					
ANR	552501	Identifier	mem		552480	0					
ANR	552502	Argument	pfn		552480	1					
ANR	552503	Identifier	pfn		552480	0					
ANR	552504	Argument	"""fn_common_free"""		552480	2					
ANR	552505	PrimaryExpression	"""fn_common_free"""		552480	0					
ANR	552506	ReturnType	void		552480	1					
ANR	552507	Identifier	fn_common_free		552480	2					
ANR	552508	ParameterList	"gs_function_t * pfn , bool free_params , gs_memory_t * mem"		552480	3					
ANR	552509	Parameter	gs_function_t * pfn	61:15:1933:1951	552480	0	True				
ANR	552510	ParameterType	gs_function_t *		552480	0					
ANR	552511	Identifier	pfn		552480	1					
ANR	552512	Parameter	bool free_params	61:36:1954:1969	552480	1	True				
ANR	552513	ParameterType	bool		552480	0					
ANR	552514	Identifier	free_params		552480	1					
ANR	552515	Parameter	gs_memory_t * mem	61:54:1972:1988	552480	2	True				
ANR	552516	ParameterType	gs_memory_t *		552480	0					
ANR	552517	Identifier	mem		552480	1					
ANR	552518	CFGEntryNode	ENTRY		552480		True				
ANR	552519	CFGExitNode	EXIT		552480		True				
ANR	552520	Symbol	mem		552480						
ANR	552521	Symbol	pfn		552480						
ANR	552522	Symbol	free_params		552480						
ANR	552523	Function	fn_check_mnDR	69:0:2173:2653							
ANR	552524	FunctionDef	"fn_check_mnDR (const gs_function_params_t * params , int m , int n)"		552523	0					
ANR	552525	CompoundStatement		71:0:2242:2653	552523	0					
ANR	552526	IdentifierDeclStatement	int i ;	72:4:2248:2253	552523	0	True				
ANR	552527	IdentifierDecl	i		552523	0					
ANR	552528	IdentifierDeclType	int		552523	0					
ANR	552529	Identifier	i		552523	1					
ANR	552530	IfStatement	if ( m <= 0 || n <= 0 )		552523	1					
ANR	552531	Condition	m <= 0 || n <= 0	74:8:2264:2279	552523	0	True				
ANR	552532	OrExpression	m <= 0 || n <= 0		552523	0		||			
ANR	552533	RelationalExpression	m <= 0		552523	0		<=			
ANR	552534	Identifier	m		552523	0					
ANR	552535	PrimaryExpression	0		552523	1					
ANR	552536	RelationalExpression	n <= 0		552523	1		<=			
ANR	552537	Identifier	n		552523	0					
ANR	552538	PrimaryExpression	0		552523	1					
ANR	552539	ExpressionStatement	return_error ( gs_error_rangecheck )	75:8:2290:2323	552523	1	True				
ANR	552540	CallExpression	return_error ( gs_error_rangecheck )		552523	0					
ANR	552541	Callee	return_error		552523	0					
ANR	552542	Identifier	return_error		552523	0					
ANR	552543	ArgumentList	gs_error_rangecheck		552523	1					
ANR	552544	Argument	gs_error_rangecheck		552523	0					
ANR	552545	Identifier	gs_error_rangecheck		552523	0					
ANR	552546	ForStatement	for ( i = 0 ; i < m ; ++ i )		552523	2					
ANR	552547	ForInit	i = 0 ;	76:9:2334:2339	552523	0	True				
ANR	552548	AssignmentExpression	i = 0		552523	0		=			
ANR	552549	Identifier	i		552523	0					
ANR	552550	PrimaryExpression	0		552523	1					
ANR	552551	Condition	i < m	76:16:2341:2345	552523	1	True				
ANR	552552	RelationalExpression	i < m		552523	0		<			
ANR	552553	Identifier	i		552523	0					
ANR	552554	Identifier	m		552523	1					
ANR	552555	UnaryExpression	++ i	76:23:2348:2350	552523	2	True				
ANR	552556	IncDec	++		552523	0					
ANR	552557	Identifier	i		552523	1					
ANR	552558	IfStatement	if ( params -> Domain [ 2 * i ] > params -> Domain [ 2 * i + 1 ] )		552523	3					
ANR	552559	Condition	params -> Domain [ 2 * i ] > params -> Domain [ 2 * i + 1 ]	77:12:2365:2413	552523	0	True				
ANR	552560	RelationalExpression	params -> Domain [ 2 * i ] > params -> Domain [ 2 * i + 1 ]		552523	0		>			
ANR	552561	ArrayIndexing	params -> Domain [ 2 * i ]		552523	0					
ANR	552562	PtrMemberAccess	params -> Domain		552523	0					
ANR	552563	Identifier	params		552523	0					
ANR	552564	Identifier	Domain		552523	1					
ANR	552565	MultiplicativeExpression	2 * i		552523	1		*			
ANR	552566	PrimaryExpression	2		552523	0					
ANR	552567	Identifier	i		552523	1					
ANR	552568	ArrayIndexing	params -> Domain [ 2 * i + 1 ]		552523	1					
ANR	552569	PtrMemberAccess	params -> Domain		552523	0					
ANR	552570	Identifier	params		552523	0					
ANR	552571	Identifier	Domain		552523	1					
ANR	552572	AdditiveExpression	2 * i + 1		552523	1		+			
ANR	552573	MultiplicativeExpression	2 * i		552523	0		*			
ANR	552574	PrimaryExpression	2		552523	0					
ANR	552575	Identifier	i		552523	1					
ANR	552576	PrimaryExpression	1		552523	1					
ANR	552577	ExpressionStatement	return_error ( gs_error_rangecheck )	78:12:2428:2461	552523	1	True				
ANR	552578	CallExpression	return_error ( gs_error_rangecheck )		552523	0					
ANR	552579	Callee	return_error		552523	0					
ANR	552580	Identifier	return_error		552523	0					
ANR	552581	ArgumentList	gs_error_rangecheck		552523	1					
ANR	552582	Argument	gs_error_rangecheck		552523	0					
ANR	552583	Identifier	gs_error_rangecheck		552523	0					
ANR	552584	IfStatement	if ( params -> Range != 0 )		552523	3					
ANR	552585	Condition	params -> Range != 0	79:8:2471:2488	552523	0	True				
ANR	552586	EqualityExpression	params -> Range != 0		552523	0		!=			
ANR	552587	PtrMemberAccess	params -> Range		552523	0					
ANR	552588	Identifier	params		552523	0					
ANR	552589	Identifier	Range		552523	1					
ANR	552590	PrimaryExpression	0		552523	1					
ANR	552591	ForStatement	for ( i = 0 ; i < n ; ++ i )		552523	1					
ANR	552592	ForInit	i = 0 ;	80:13:2504:2509	552523	0	True				
ANR	552593	AssignmentExpression	i = 0		552523	0		=			
ANR	552594	Identifier	i		552523	0					
ANR	552595	PrimaryExpression	0		552523	1					
ANR	552596	Condition	i < n	80:20:2511:2515	552523	1	True				
ANR	552597	RelationalExpression	i < n		552523	0		<			
ANR	552598	Identifier	i		552523	0					
ANR	552599	Identifier	n		552523	1					
ANR	552600	UnaryExpression	++ i	80:27:2518:2520	552523	2	True				
ANR	552601	IncDec	++		552523	0					
ANR	552602	Identifier	i		552523	1					
ANR	552603	IfStatement	if ( params -> Range [ 2 * i ] > params -> Range [ 2 * i + 1 ] )		552523	3					
ANR	552604	Condition	params -> Range [ 2 * i ] > params -> Range [ 2 * i + 1 ]	81:16:2539:2585	552523	0	True				
ANR	552605	RelationalExpression	params -> Range [ 2 * i ] > params -> Range [ 2 * i + 1 ]		552523	0		>			
ANR	552606	ArrayIndexing	params -> Range [ 2 * i ]		552523	0					
ANR	552607	PtrMemberAccess	params -> Range		552523	0					
ANR	552608	Identifier	params		552523	0					
ANR	552609	Identifier	Range		552523	1					
ANR	552610	MultiplicativeExpression	2 * i		552523	1		*			
ANR	552611	PrimaryExpression	2		552523	0					
ANR	552612	Identifier	i		552523	1					
ANR	552613	ArrayIndexing	params -> Range [ 2 * i + 1 ]		552523	1					
ANR	552614	PtrMemberAccess	params -> Range		552523	0					
ANR	552615	Identifier	params		552523	0					
ANR	552616	Identifier	Range		552523	1					
ANR	552617	AdditiveExpression	2 * i + 1		552523	1		+			
ANR	552618	MultiplicativeExpression	2 * i		552523	0		*			
ANR	552619	PrimaryExpression	2		552523	0					
ANR	552620	Identifier	i		552523	1					
ANR	552621	PrimaryExpression	1		552523	1					
ANR	552622	ExpressionStatement	return_error ( gs_error_rangecheck )	82:16:2604:2637	552523	1	True				
ANR	552623	CallExpression	return_error ( gs_error_rangecheck )		552523	0					
ANR	552624	Callee	return_error		552523	0					
ANR	552625	Identifier	return_error		552523	0					
ANR	552626	ArgumentList	gs_error_rangecheck		552523	1					
ANR	552627	Argument	gs_error_rangecheck		552523	0					
ANR	552628	Identifier	gs_error_rangecheck		552523	0					
ANR	552629	ReturnStatement	return 0 ;	83:4:2643:2651	552523	4	True				
ANR	552630	PrimaryExpression	0		552523	0					
ANR	552631	ReturnType	int		552523	1					
ANR	552632	Identifier	fn_check_mnDR		552523	2					
ANR	552633	ParameterList	"const gs_function_params_t * params , int m , int n"		552523	3					
ANR	552634	Parameter	const gs_function_params_t * params	70:14:2191:2225	552523	0	True				
ANR	552635	ParameterType	const gs_function_params_t *		552523	0					
ANR	552636	Identifier	params		552523	1					
ANR	552637	Parameter	int m	70:51:2228:2232	552523	1	True				
ANR	552638	ParameterType	int		552523	0					
ANR	552639	Identifier	m		552523	1					
ANR	552640	Parameter	int n	70:58:2235:2239	552523	2	True				
ANR	552641	ParameterType	int		552523	0					
ANR	552642	Identifier	n		552523	1					
ANR	552643	CFGEntryNode	ENTRY		552523		True				
ANR	552644	CFGExitNode	EXIT		552523		True				
ANR	552645	Symbol	params -> Domain		552523						
ANR	552646	Symbol	* i		552523						
ANR	552647	Symbol	gs_error_rangecheck		552523						
ANR	552648	Symbol	params -> Range		552523						
ANR	552649	Symbol	i		552523						
ANR	552650	Symbol	* params -> Domain		552523						
ANR	552651	Symbol	* params -> Range		552523						
ANR	552652	Symbol	params		552523						
ANR	552653	Symbol	* * params		552523						
ANR	552654	Symbol	m		552523						
ANR	552655	Symbol	n		552523						
ANR	552656	Symbol	* params		552523						
ANR	552657	Function	gs_function_get_info_default	87:0:2699:2835							
ANR	552658	FunctionDef	"gs_function_get_info_default (const gs_function_t * pfn , gs_function_info_t * pfi)"		552657	0					
ANR	552659	CompoundStatement		89:0:2784:2835	552657	0					
ANR	552660	ExpressionStatement	pfi -> DataSource = 0	90:4:2790:2809	552657	0	True				
ANR	552661	AssignmentExpression	pfi -> DataSource = 0		552657	0		=			
ANR	552662	PtrMemberAccess	pfi -> DataSource		552657	0					
ANR	552663	Identifier	pfi		552657	0					
ANR	552664	Identifier	DataSource		552657	1					
ANR	552665	PrimaryExpression	0		552657	1					
ANR	552666	ExpressionStatement	pfi -> Functions = 0	91:4:2815:2833	552657	1	True				
ANR	552667	AssignmentExpression	pfi -> Functions = 0		552657	0		=			
ANR	552668	PtrMemberAccess	pfi -> Functions		552657	0					
ANR	552669	Identifier	pfi		552657	0					
ANR	552670	Identifier	Functions		552657	1					
ANR	552671	PrimaryExpression	0		552657	1					
ANR	552672	ReturnType	void		552657	1					
ANR	552673	Identifier	gs_function_get_info_default		552657	2					
ANR	552674	ParameterList	"const gs_function_t * pfn , gs_function_info_t * pfi"		552657	3					
ANR	552675	Parameter	const gs_function_t * pfn	88:29:2733:2756	552657	0	True				
ANR	552676	ParameterType	const gs_function_t *		552657	0					
ANR	552677	Identifier	pfn		552657	1					
ANR	552678	Parameter	gs_function_info_t * pfi	88:55:2759:2781	552657	1	True				
ANR	552679	ParameterType	gs_function_info_t *		552657	0					
ANR	552680	Identifier	pfi		552657	1					
ANR	552681	CFGEntryNode	ENTRY		552657		True				
ANR	552682	CFGExitNode	EXIT		552657		True				
ANR	552683	Symbol	pfi -> DataSource		552657						
ANR	552684	Symbol	pfi		552657						
ANR	552685	Symbol	pfn		552657						
ANR	552686	Symbol	pfi -> Functions		552657						
ANR	552687	Symbol	* pfi		552657						
ANR	552688	Function	fn_common_get_params	97:0:2924:3561							
ANR	552689	FunctionDef	"fn_common_get_params (const gs_function_t * pfn , gs_param_list * plist)"		552688	0					
ANR	552690	CompoundStatement		99:0:2997:3561	552688	0					
ANR	552691	IdentifierDeclStatement	"int ecode = param_write_int ( plist , ""FunctionType"" , & FunctionType ( pfn ) ) ;"	100:4:3003:3073	552688	0	True				
ANR	552692	IdentifierDecl	"ecode = param_write_int ( plist , ""FunctionType"" , & FunctionType ( pfn ) )"		552688	0					
ANR	552693	IdentifierDeclType	int		552688	0					
ANR	552694	Identifier	ecode		552688	1					
ANR	552695	AssignmentExpression	"ecode = param_write_int ( plist , ""FunctionType"" , & FunctionType ( pfn ) )"		552688	2		=			
ANR	552696	Identifier	ecode		552688	0					
ANR	552697	CallExpression	"param_write_int ( plist , ""FunctionType"" , & FunctionType ( pfn ) )"		552688	1					
ANR	552698	Callee	param_write_int		552688	0					
ANR	552699	Identifier	param_write_int		552688	0					
ANR	552700	ArgumentList	plist		552688	1					
ANR	552701	Argument	plist		552688	0					
ANR	552702	Identifier	plist		552688	0					
ANR	552703	Argument	"""FunctionType"""		552688	1					
ANR	552704	PrimaryExpression	"""FunctionType"""		552688	0					
ANR	552705	Argument	& FunctionType ( pfn )		552688	2					
ANR	552706	UnaryOperationExpression	& FunctionType ( pfn )		552688	0					
ANR	552707	UnaryOperator	&		552688	0					
ANR	552708	CallExpression	FunctionType ( pfn )		552688	1					
ANR	552709	Callee	FunctionType		552688	0					
ANR	552710	Identifier	FunctionType		552688	0					
ANR	552711	ArgumentList	pfn		552688	1					
ANR	552712	Argument	pfn		552688	0					
ANR	552713	Identifier	pfn		552688	0					
ANR	552714	IdentifierDeclStatement	int code ;	101:4:3079:3087	552688	1	True				
ANR	552715	IdentifierDecl	code		552688	0					
ANR	552716	IdentifierDeclType	int		552688	0					
ANR	552717	Identifier	code		552688	1					
ANR	552718	IfStatement	if ( pfn -> params . Domain )		552688	2					
ANR	552719	Condition	pfn -> params . Domain	103:8:3098:3115	552688	0	True				
ANR	552720	MemberAccess	pfn -> params . Domain		552688	0					
ANR	552721	PtrMemberAccess	pfn -> params		552688	0					
ANR	552722	Identifier	pfn		552688	0					
ANR	552723	Identifier	params		552688	1					
ANR	552724	Identifier	Domain		552688	1					
ANR	552725	CompoundStatement		5:28:120:120	552688	1					
ANR	552726	ExpressionStatement	"code = param_write_float_values ( plist , ""Domain"" , pfn -> params . Domain , 2 * pfn -> params . m , false )"	104:8:3128:3262	552688	0	True				
ANR	552727	AssignmentExpression	"code = param_write_float_values ( plist , ""Domain"" , pfn -> params . Domain , 2 * pfn -> params . m , false )"		552688	0		=			
ANR	552728	Identifier	code		552688	0					
ANR	552729	CallExpression	"param_write_float_values ( plist , ""Domain"" , pfn -> params . Domain , 2 * pfn -> params . m , false )"		552688	1					
ANR	552730	Callee	param_write_float_values		552688	0					
ANR	552731	Identifier	param_write_float_values		552688	0					
ANR	552732	ArgumentList	plist		552688	1					
ANR	552733	Argument	plist		552688	0					
ANR	552734	Identifier	plist		552688	0					
ANR	552735	Argument	"""Domain"""		552688	1					
ANR	552736	PrimaryExpression	"""Domain"""		552688	0					
ANR	552737	Argument	pfn -> params . Domain		552688	2					
ANR	552738	MemberAccess	pfn -> params . Domain		552688	0					
ANR	552739	PtrMemberAccess	pfn -> params		552688	0					
ANR	552740	Identifier	pfn		552688	0					
ANR	552741	Identifier	params		552688	1					
ANR	552742	Identifier	Domain		552688	1					
ANR	552743	Argument	2 * pfn -> params . m		552688	3					
ANR	552744	MultiplicativeExpression	2 * pfn -> params . m		552688	0		*			
ANR	552745	PrimaryExpression	2		552688	0					
ANR	552746	MemberAccess	pfn -> params . m		552688	1					
ANR	552747	PtrMemberAccess	pfn -> params		552688	0					
ANR	552748	Identifier	pfn		552688	0					
ANR	552749	Identifier	params		552688	1					
ANR	552750	Identifier	m		552688	1					
ANR	552751	Argument	false		552688	4					
ANR	552752	Identifier	false		552688	0					
ANR	552753	IfStatement	if ( code < 0 )		552688	1					
ANR	552754	Condition	code < 0	106:12:3276:3283	552688	0	True				
ANR	552755	RelationalExpression	code < 0		552688	0		<			
ANR	552756	Identifier	code		552688	0					
ANR	552757	PrimaryExpression	0		552688	1					
ANR	552758	ExpressionStatement	ecode = code	107:12:3298:3310	552688	1	True				
ANR	552759	AssignmentExpression	ecode = code		552688	0		=			
ANR	552760	Identifier	ecode		552688	0					
ANR	552761	Identifier	code		552688	1					
ANR	552762	IfStatement	if ( pfn -> params . Range )		552688	3					
ANR	552763	Condition	pfn -> params . Range	109:8:3326:3342	552688	0	True				
ANR	552764	MemberAccess	pfn -> params . Range		552688	0					
ANR	552765	PtrMemberAccess	pfn -> params		552688	0					
ANR	552766	Identifier	pfn		552688	0					
ANR	552767	Identifier	params		552688	1					
ANR	552768	Identifier	Range		552688	1					
ANR	552769	CompoundStatement		11:27:347:347	552688	1					
ANR	552770	ExpressionStatement	"code = param_write_float_values ( plist , ""Range"" , pfn -> params . Range , 2 * pfn -> params . n , false )"	110:8:3355:3487	552688	0	True				
ANR	552771	AssignmentExpression	"code = param_write_float_values ( plist , ""Range"" , pfn -> params . Range , 2 * pfn -> params . n , false )"		552688	0		=			
ANR	552772	Identifier	code		552688	0					
ANR	552773	CallExpression	"param_write_float_values ( plist , ""Range"" , pfn -> params . Range , 2 * pfn -> params . n , false )"		552688	1					
ANR	552774	Callee	param_write_float_values		552688	0					
ANR	552775	Identifier	param_write_float_values		552688	0					
ANR	552776	ArgumentList	plist		552688	1					
ANR	552777	Argument	plist		552688	0					
ANR	552778	Identifier	plist		552688	0					
ANR	552779	Argument	"""Range"""		552688	1					
ANR	552780	PrimaryExpression	"""Range"""		552688	0					
ANR	552781	Argument	pfn -> params . Range		552688	2					
ANR	552782	MemberAccess	pfn -> params . Range		552688	0					
ANR	552783	PtrMemberAccess	pfn -> params		552688	0					
ANR	552784	Identifier	pfn		552688	0					
ANR	552785	Identifier	params		552688	1					
ANR	552786	Identifier	Range		552688	1					
ANR	552787	Argument	2 * pfn -> params . n		552688	3					
ANR	552788	MultiplicativeExpression	2 * pfn -> params . n		552688	0		*			
ANR	552789	PrimaryExpression	2		552688	0					
ANR	552790	MemberAccess	pfn -> params . n		552688	1					
ANR	552791	PtrMemberAccess	pfn -> params		552688	0					
ANR	552792	Identifier	pfn		552688	0					
ANR	552793	Identifier	params		552688	1					
ANR	552794	Identifier	n		552688	1					
ANR	552795	Argument	false		552688	4					
ANR	552796	Identifier	false		552688	0					
ANR	552797	IfStatement	if ( code < 0 )		552688	1					
ANR	552798	Condition	code < 0	112:12:3501:3508	552688	0	True				
ANR	552799	RelationalExpression	code < 0		552688	0		<			
ANR	552800	Identifier	code		552688	0					
ANR	552801	PrimaryExpression	0		552688	1					
ANR	552802	ExpressionStatement	ecode = code	113:12:3523:3535	552688	1	True				
ANR	552803	AssignmentExpression	ecode = code		552688	0		=			
ANR	552804	Identifier	ecode		552688	0					
ANR	552805	Identifier	code		552688	1					
ANR	552806	ReturnStatement	return ecode ;	115:4:3547:3559	552688	4	True				
ANR	552807	Identifier	ecode		552688	0					
ANR	552808	ReturnType	int		552688	1					
ANR	552809	Identifier	fn_common_get_params		552688	2					
ANR	552810	ParameterList	"const gs_function_t * pfn , gs_param_list * plist"		552688	3					
ANR	552811	Parameter	const gs_function_t * pfn	98:21:2949:2972	552688	0	True				
ANR	552812	ParameterType	const gs_function_t *		552688	0					
ANR	552813	Identifier	pfn		552688	1					
ANR	552814	Parameter	gs_param_list * plist	98:47:2975:2994	552688	1	True				
ANR	552815	ParameterType	gs_param_list *		552688	0					
ANR	552816	Identifier	plist		552688	1					
ANR	552817	CFGEntryNode	ENTRY		552688		True				
ANR	552818	CFGExitNode	EXIT		552688		True				
ANR	552819	Symbol	* pfn		552688						
ANR	552820	Symbol	pfn -> params . m		552688						
ANR	552821	Symbol	pfn -> params . Range		552688						
ANR	552822	Symbol	code		552688						
ANR	552823	Symbol	pfn -> params . n		552688						
ANR	552824	Symbol	false		552688						
ANR	552825	Symbol	pfn -> params . Domain		552688						
ANR	552826	Symbol	& FunctionType		552688						
ANR	552827	Symbol	param_write_float_values		552688						
ANR	552828	Symbol	ecode		552688						
ANR	552829	Symbol	plist		552688						
ANR	552830	Symbol	pfn		552688						
ANR	552831	Symbol	pfn -> params		552688						
ANR	552832	Symbol	param_write_int		552688						
ANR	552833	Function	fn_copy_values	121:0:3631:3963							
ANR	552834	FunctionDef	"fn_copy_values (const void * pvalues , int count , int size , gs_memory_t * mem)"		552833	0					
ANR	552835	CompoundStatement		123:0:3713:3963	552833	0					
ANR	552836	IfStatement	if ( pvalues )		552833	0					
ANR	552837	Condition	pvalues	124:8:3723:3729	552833	0	True				
ANR	552838	Identifier	pvalues		552833	0					
ANR	552839	CompoundStatement		3:8:28:98	552833	1					
ANR	552840	IdentifierDeclStatement	"void * values = gs_alloc_byte_array ( mem , count , size , ""fn_copy_values"" ) ;"	125:8:3742:3812	552833	0	True				
ANR	552841	IdentifierDecl	"* values = gs_alloc_byte_array ( mem , count , size , ""fn_copy_values"" )"		552833	0					
ANR	552842	IdentifierDeclType	void *		552833	0					
ANR	552843	Identifier	values		552833	1					
ANR	552844	AssignmentExpression	"* values = gs_alloc_byte_array ( mem , count , size , ""fn_copy_values"" )"		552833	2		=			
ANR	552845	Identifier	values		552833	0					
ANR	552846	CallExpression	"gs_alloc_byte_array ( mem , count , size , ""fn_copy_values"" )"		552833	1					
ANR	552847	Callee	gs_alloc_byte_array		552833	0					
ANR	552848	Identifier	gs_alloc_byte_array		552833	0					
ANR	552849	ArgumentList	mem		552833	1					
ANR	552850	Argument	mem		552833	0					
ANR	552851	Identifier	mem		552833	0					
ANR	552852	Argument	count		552833	1					
ANR	552853	Identifier	count		552833	0					
ANR	552854	Argument	size		552833	2					
ANR	552855	Identifier	size		552833	0					
ANR	552856	Argument	"""fn_copy_values"""		552833	3					
ANR	552857	PrimaryExpression	"""fn_copy_values"""		552833	0					
ANR	552858	IfStatement	if ( values )		552833	1					
ANR	552859	Condition	values	127:12:3827:3832	552833	0	True				
ANR	552860	Identifier	values		552833	0					
ANR	552861	ExpressionStatement	"memcpy ( values , pvalues , count * size )"	128:12:3847:3884	552833	1	True				
ANR	552862	CallExpression	"memcpy ( values , pvalues , count * size )"		552833	0					
ANR	552863	Callee	memcpy		552833	0					
ANR	552864	Identifier	memcpy		552833	0					
ANR	552865	ArgumentList	values		552833	1					
ANR	552866	Argument	values		552833	0					
ANR	552867	Identifier	values		552833	0					
ANR	552868	Argument	pvalues		552833	1					
ANR	552869	Identifier	pvalues		552833	0					
ANR	552870	Argument	count * size		552833	2					
ANR	552871	MultiplicativeExpression	count * size		552833	0		*			
ANR	552872	Identifier	count		552833	0					
ANR	552873	Identifier	size		552833	1					
ANR	552874	ReturnStatement	return values ;	129:8:3894:3907	552833	2	True				
ANR	552875	Identifier	values		552833	0					
ANR	552876	ElseStatement	else		552833	0					
ANR	552877	ReturnStatement	return 0 ;	131:8:3928:3936	552833	0	True				
ANR	552878	PrimaryExpression	0		552833	0					
ANR	552879	ReturnType	void *		552833	1					
ANR	552880	Identifier	fn_copy_values		552833	2					
ANR	552881	ParameterList	"const void * pvalues , int count , int size , gs_memory_t * mem"		552833	3					
ANR	552882	Parameter	const void * pvalues	122:15:3653:3671	552833	0	True				
ANR	552883	ParameterType	const void *		552833	0					
ANR	552884	Identifier	pvalues		552833	1					
ANR	552885	Parameter	int count	122:36:3674:3682	552833	1	True				
ANR	552886	ParameterType	int		552833	0					
ANR	552887	Identifier	count		552833	1					
ANR	552888	Parameter	int size	122:47:3685:3692	552833	2	True				
ANR	552889	ParameterType	int		552833	0					
ANR	552890	Identifier	size		552833	1					
ANR	552891	Parameter	gs_memory_t * mem	122:57:3695:3710	552833	3	True				
ANR	552892	ParameterType	gs_memory_t *		552833	0					
ANR	552893	Identifier	mem		552833	1					
ANR	552894	CFGEntryNode	ENTRY		552833		True				
ANR	552895	CFGExitNode	EXIT		552833		True				
ANR	552896	Symbol	size		552833						
ANR	552897	Symbol	mem		552833						
ANR	552898	Symbol	values		552833						
ANR	552899	Symbol	count		552833						
ANR	552900	Symbol	gs_alloc_byte_array		552833						
ANR	552901	Symbol	pvalues		552833						
ANR	552902	Function	fn_scale_pairs	138:0:4092:4992							
ANR	552903	FunctionDef	"fn_scale_pairs (const float * * ppvalues , const float * pvalues , int npairs , const gs_range_t * pranges , gs_memory_t * mem)"		552902	0					
ANR	552904	CompoundStatement		141:0:4229:4992	552902	0					
ANR	552905	IfStatement	if ( pvalues == 0 )		552902	0					
ANR	552906	Condition	pvalues == 0	142:8:4239:4250	552902	0	True				
ANR	552907	EqualityExpression	pvalues == 0		552902	0		==			
ANR	552908	Identifier	pvalues		552902	0					
ANR	552909	PrimaryExpression	0		552902	1					
ANR	552910	ExpressionStatement	* ppvalues = 0	143:8:4261:4274	552902	1	True				
ANR	552911	AssignmentExpression	* ppvalues = 0		552902	0		=			
ANR	552912	UnaryOperationExpression	* ppvalues		552902	0					
ANR	552913	UnaryOperator	*		552902	0					
ANR	552914	Identifier	ppvalues		552902	1					
ANR	552915	PrimaryExpression	0		552902	1					
ANR	552916	ElseStatement	else		552902	0					
ANR	552917	CompoundStatement		5:8:65:204	552902	0					
ANR	552918	IdentifierDeclStatement	"float * out = ( float * ) gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" ) ;"	145:8:4295:4434	552902	0	True				
ANR	552919	IdentifierDecl	"* out = ( float * ) gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" )"		552902	0					
ANR	552920	IdentifierDeclType	float *		552902	0					
ANR	552921	Identifier	out		552902	1					
ANR	552922	AssignmentExpression	"* out = ( float * ) gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" )"		552902	2		=			
ANR	552923	Identifier	out		552902	0					
ANR	552924	CastExpression	"( float * ) gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" )"		552902	1					
ANR	552925	CastTarget	float *		552902	0					
ANR	552926	CallExpression	"gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" )"		552902	1					
ANR	552927	Callee	gs_alloc_byte_array		552902	0					
ANR	552928	Identifier	gs_alloc_byte_array		552902	0					
ANR	552929	ArgumentList	mem		552902	1					
ANR	552930	Argument	mem		552902	0					
ANR	552931	Identifier	mem		552902	0					
ANR	552932	Argument	2 * npairs		552902	1					
ANR	552933	MultiplicativeExpression	2 * npairs		552902	0		*			
ANR	552934	PrimaryExpression	2		552902	0					
ANR	552935	Identifier	npairs		552902	1					
ANR	552936	Argument	sizeof ( * pvalues )		552902	2					
ANR	552937	SizeofExpression	sizeof ( * pvalues )		552902	0					
ANR	552938	Sizeof	sizeof		552902	0					
ANR	552939	UnaryOperationExpression	* pvalues		552902	1					
ANR	552940	UnaryOperator	*		552902	0					
ANR	552941	Identifier	pvalues		552902	1					
ANR	552942	Argument	"""fn_scale_pairs"""		552902	3					
ANR	552943	PrimaryExpression	"""fn_scale_pairs"""		552902	0					
ANR	552944	ExpressionStatement	* ppvalues = out	149:8:4445:4460	552902	1	True				
ANR	552945	AssignmentExpression	* ppvalues = out		552902	0		=			
ANR	552946	UnaryOperationExpression	* ppvalues		552902	0					
ANR	552947	UnaryOperator	*		552902	0					
ANR	552948	Identifier	ppvalues		552902	1					
ANR	552949	Identifier	out		552902	1					
ANR	552950	IfStatement	if ( out == 0 )		552902	2					
ANR	552951	Condition	out == 0	150:12:4474:4481	552902	0	True				
ANR	552952	EqualityExpression	out == 0		552902	0		==			
ANR	552953	Identifier	out		552902	0					
ANR	552954	PrimaryExpression	0		552902	1					
ANR	552955	ExpressionStatement	return_error ( gs_error_VMerror )	151:12:4496:4526	552902	1	True				
ANR	552956	CallExpression	return_error ( gs_error_VMerror )		552902	0					
ANR	552957	Callee	return_error		552902	0					
ANR	552958	Identifier	return_error		552902	0					
ANR	552959	ArgumentList	gs_error_VMerror		552902	1					
ANR	552960	Argument	gs_error_VMerror		552902	0					
ANR	552961	Identifier	gs_error_VMerror		552902	0					
ANR	552962	IfStatement	if ( pranges )		552902	3					
ANR	552963	Condition	pranges	152:12:4540:4546	552902	0	True				
ANR	552964	Identifier	pranges		552902	0					
ANR	552965	CompoundStatement		14:12:387:392	552902	1					
ANR	552966	IdentifierDeclStatement	int i ;	154:12:4617:4622	552902	0	True				
ANR	552967	IdentifierDecl	i		552902	0					
ANR	552968	IdentifierDeclType	int		552902	0					
ANR	552969	Identifier	i		552902	1					
ANR	552970	ForStatement	for ( i = 0 ; i < npairs ; ++ i )		552902	1					
ANR	552971	ForInit	i = 0 ;	155:17:4641:4646	552902	0	True				
ANR	552972	AssignmentExpression	i = 0		552902	0		=			
ANR	552973	Identifier	i		552902	0					
ANR	552974	PrimaryExpression	0		552902	1					
ANR	552975	Condition	i < npairs	155:24:4648:4657	552902	1	True				
ANR	552976	RelationalExpression	i < npairs		552902	0		<			
ANR	552977	Identifier	i		552902	0					
ANR	552978	Identifier	npairs		552902	1					
ANR	552979	UnaryExpression	++ i	155:36:4660:4662	552902	2	True				
ANR	552980	IncDec	++		552902	0					
ANR	552981	Identifier	i		552902	1					
ANR	552982	CompoundStatement		16:16:453:515	552902	3					
ANR	552983	IdentifierDeclStatement	"double base = pranges [ i ] . rmin , factor = pranges [ i ] . rmax - base ;"	156:16:4683:4745	552902	0	True				
ANR	552984	IdentifierDecl	base = pranges [ i ] . rmin		552902	0					
ANR	552985	IdentifierDeclType	double		552902	0					
ANR	552986	Identifier	base		552902	1					
ANR	552987	AssignmentExpression	base = pranges [ i ] . rmin		552902	2		=			
ANR	552988	Identifier	base		552902	0					
ANR	552989	MemberAccess	pranges [ i ] . rmin		552902	1					
ANR	552990	ArrayIndexing	pranges [ i ]		552902	0					
ANR	552991	Identifier	pranges		552902	0					
ANR	552992	Identifier	i		552902	1					
ANR	552993	Identifier	rmin		552902	1					
ANR	552994	IdentifierDecl	factor = pranges [ i ] . rmax - base		552902	1					
ANR	552995	IdentifierDeclType	double		552902	0					
ANR	552996	Identifier	factor		552902	1					
ANR	552997	AssignmentExpression	factor = pranges [ i ] . rmax - base		552902	2		=			
ANR	552998	Identifier	factor		552902	0					
ANR	552999	AdditiveExpression	pranges [ i ] . rmax - base		552902	1		-			
ANR	553000	MemberAccess	pranges [ i ] . rmax		552902	0					
ANR	553001	ArrayIndexing	pranges [ i ]		552902	0					
ANR	553002	Identifier	pranges		552902	0					
ANR	553003	Identifier	i		552902	1					
ANR	553004	Identifier	rmax		552902	1					
ANR	553005	Identifier	base		552902	1					
ANR	553006	ExpressionStatement	out [ 2 * i ] = pvalues [ 2 * i ] * factor + base	158:16:4764:4807	552902	1	True				
ANR	553007	AssignmentExpression	out [ 2 * i ] = pvalues [ 2 * i ] * factor + base		552902	0		=			
ANR	553008	ArrayIndexing	out [ 2 * i ]		552902	0					
ANR	553009	Identifier	out		552902	0					
ANR	553010	MultiplicativeExpression	2 * i		552902	1		*			
ANR	553011	PrimaryExpression	2		552902	0					
ANR	553012	Identifier	i		552902	1					
ANR	553013	AdditiveExpression	pvalues [ 2 * i ] * factor + base		552902	1		+			
ANR	553014	MultiplicativeExpression	pvalues [ 2 * i ] * factor		552902	0		*			
ANR	553015	ArrayIndexing	pvalues [ 2 * i ]		552902	0					
ANR	553016	Identifier	pvalues		552902	0					
ANR	553017	MultiplicativeExpression	2 * i		552902	1		*			
ANR	553018	PrimaryExpression	2		552902	0					
ANR	553019	Identifier	i		552902	1					
ANR	553020	Identifier	factor		552902	1					
ANR	553021	Identifier	base		552902	1					
ANR	553022	ExpressionStatement	out [ 2 * i + 1 ] = pvalues [ 2 * i + 1 ] * factor + base	159:16:4825:4876	552902	2	True				
ANR	553023	AssignmentExpression	out [ 2 * i + 1 ] = pvalues [ 2 * i + 1 ] * factor + base		552902	0		=			
ANR	553024	ArrayIndexing	out [ 2 * i + 1 ]		552902	0					
ANR	553025	Identifier	out		552902	0					
ANR	553026	AdditiveExpression	2 * i + 1		552902	1		+			
ANR	553027	MultiplicativeExpression	2 * i		552902	0		*			
ANR	553028	PrimaryExpression	2		552902	0					
ANR	553029	Identifier	i		552902	1					
ANR	553030	PrimaryExpression	1		552902	1					
ANR	553031	AdditiveExpression	pvalues [ 2 * i + 1 ] * factor + base		552902	1		+			
ANR	553032	MultiplicativeExpression	pvalues [ 2 * i + 1 ] * factor		552902	0		*			
ANR	553033	ArrayIndexing	pvalues [ 2 * i + 1 ]		552902	0					
ANR	553034	Identifier	pvalues		552902	0					
ANR	553035	AdditiveExpression	2 * i + 1		552902	1		+			
ANR	553036	MultiplicativeExpression	2 * i		552902	0		*			
ANR	553037	PrimaryExpression	2		552902	0					
ANR	553038	Identifier	i		552902	1					
ANR	553039	PrimaryExpression	1		552902	1					
ANR	553040	Identifier	factor		552902	1					
ANR	553041	Identifier	base		552902	1					
ANR	553042	ElseStatement	else		552902	0					
ANR	553043	ExpressionStatement	"memcpy ( out , pvalues , 2 * sizeof ( * pvalues ) * npairs )"	162:12:4919:4970	552902	0	True				
ANR	553044	CallExpression	"memcpy ( out , pvalues , 2 * sizeof ( * pvalues ) * npairs )"		552902	0					
ANR	553045	Callee	memcpy		552902	0					
ANR	553046	Identifier	memcpy		552902	0					
ANR	553047	ArgumentList	out		552902	1					
ANR	553048	Argument	out		552902	0					
ANR	553049	Identifier	out		552902	0					
ANR	553050	Argument	pvalues		552902	1					
ANR	553051	Identifier	pvalues		552902	0					
ANR	553052	Argument	2 * sizeof ( * pvalues ) * npairs		552902	2					
ANR	553053	MultiplicativeExpression	2 * sizeof ( * pvalues ) * npairs		552902	0		*			
ANR	553054	PrimaryExpression	2		552902	0					
ANR	553055	MultiplicativeExpression	sizeof ( * pvalues ) * npairs		552902	1		*			
ANR	553056	SizeofExpression	sizeof ( * pvalues )		552902	0					
ANR	553057	Sizeof	sizeof		552902	0					
ANR	553058	UnaryOperationExpression	* pvalues		552902	1					
ANR	553059	UnaryOperator	*		552902	0					
ANR	553060	Identifier	pvalues		552902	1					
ANR	553061	Identifier	npairs		552902	1					
ANR	553062	ReturnStatement	return 0 ;	164:4:4982:4990	552902	1	True				
ANR	553063	PrimaryExpression	0		552902	0					
ANR	553064	ReturnType	int		552902	1					
ANR	553065	Identifier	fn_scale_pairs		552902	2					
ANR	553066	ParameterList	"const float * * ppvalues , const float * pvalues , int npairs , const gs_range_t * pranges , gs_memory_t * mem"		552902	3					
ANR	553067	Parameter	const float * * ppvalues	139:15:4111:4132	552902	0	True				
ANR	553068	ParameterType	const float * *		552902	0					
ANR	553069	Identifier	ppvalues		552902	1					
ANR	553070	Parameter	const float * pvalues	139:39:4135:4154	552902	1	True				
ANR	553071	ParameterType	const float *		552902	0					
ANR	553072	Identifier	pvalues		552902	1					
ANR	553073	Parameter	int npairs	139:61:4157:4166	552902	2	True				
ANR	553074	ParameterType	int		552902	0					
ANR	553075	Identifier	npairs		552902	1					
ANR	553076	Parameter	const gs_range_t * pranges	140:15:4184:4208	552902	3	True				
ANR	553077	ParameterType	const gs_range_t *		552902	0					
ANR	553078	Identifier	pranges		552902	1					
ANR	553079	Parameter	gs_memory_t * mem	140:42:4211:4226	552902	4	True				
ANR	553080	ParameterType	gs_memory_t *		552902	0					
ANR	553081	Identifier	mem		552902	1					
ANR	553082	CFGEntryNode	ENTRY		552902		True				
ANR	553083	CFGExitNode	EXIT		552902		True				
ANR	553084	Symbol	ppvalues		552902						
ANR	553085	Symbol	pranges [ i ] . rmin		552902						
ANR	553086	Symbol	* pvalues		552902						
ANR	553087	Symbol	* ppvalues		552902						
ANR	553088	Symbol	npairs		552902						
ANR	553089	Symbol	i		552902						
ANR	553090	Symbol	pranges		552902						
ANR	553091	Symbol	pvalues		552902						
ANR	553092	Symbol	out		552902						
ANR	553093	Symbol	gs_error_VMerror		552902						
ANR	553094	Symbol	* i		552902						
ANR	553095	Symbol	mem		552902						
ANR	553096	Symbol	pranges [ i ] . rmax		552902						
ANR	553097	Symbol	* out		552902						
ANR	553098	Symbol	gs_alloc_byte_array		552902						
ANR	553099	Symbol	factor		552902						
ANR	553100	Symbol	* pranges		552902						
ANR	553101	Symbol	base		552902						
ANR	553102	Function	fn_common_scale	171:0:5117:5683							
ANR	553103	FunctionDef	"fn_common_scale (gs_function_t * psfn , const gs_function_t * pfn , const gs_range_t * pranges , gs_memory_t * mem)"		553102	0					
ANR	553104	CompoundStatement		174:0:5245:5683	553102	0					
ANR	553105	IdentifierDeclStatement	int code ;	175:4:5251:5259	553102	0	True				
ANR	553106	IdentifierDecl	code		553102	0					
ANR	553107	IdentifierDeclType	int		553102	0					
ANR	553108	Identifier	code		553102	1					
ANR	553109	ExpressionStatement	psfn -> head = pfn -> head	177:4:5266:5288	553102	1	True				
ANR	553110	AssignmentExpression	psfn -> head = pfn -> head		553102	0		=			
ANR	553111	PtrMemberAccess	psfn -> head		553102	0					
ANR	553112	Identifier	psfn		553102	0					
ANR	553113	Identifier	head		553102	1					
ANR	553114	PtrMemberAccess	pfn -> head		553102	1					
ANR	553115	Identifier	pfn		553102	0					
ANR	553116	Identifier	head		553102	1					
ANR	553117	ExpressionStatement	psfn -> params . Domain = 0	178:4:5294:5317	553102	2	True				
ANR	553118	AssignmentExpression	psfn -> params . Domain = 0		553102	0		=			
ANR	553119	MemberAccess	psfn -> params . Domain		553102	0					
ANR	553120	PtrMemberAccess	psfn -> params		553102	0					
ANR	553121	Identifier	psfn		553102	0					
ANR	553122	Identifier	params		553102	1					
ANR	553123	Identifier	Domain		553102	1					
ANR	553124	PrimaryExpression	0		553102	1					
ANR	553125	ExpressionStatement	psfn -> params . Range = 0	179:4:5349:5371	553102	3	True				
ANR	553126	AssignmentExpression	psfn -> params . Range = 0		553102	0		=			
ANR	553127	MemberAccess	psfn -> params . Range		553102	0					
ANR	553128	PtrMemberAccess	psfn -> params		553102	0					
ANR	553129	Identifier	psfn		553102	0					
ANR	553130	Identifier	params		553102	1					
ANR	553131	Identifier	Range		553102	1					
ANR	553132	PrimaryExpression	0		553102	1					
ANR	553133	IfStatement	"if ( ( code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem ) ) < 0 )"		553102	4					
ANR	553134	Condition	"( code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem ) ) < 0"	180:8:5381:5645	553102	0	True				
ANR	553135	OrExpression	"( code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem ) ) < 0"		553102	0		||			
ANR	553136	RelationalExpression	"( code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem ) ) < 0"		553102	0		<			
ANR	553137	AssignmentExpression	"code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem )"		553102	0		=			
ANR	553138	Identifier	code		553102	0					
ANR	553139	CallExpression	"fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem )"		553102	1					
ANR	553140	Callee	fn_scale_pairs		553102	0					
ANR	553141	Identifier	fn_scale_pairs		553102	0					
ANR	553142	ArgumentList	& psfn -> params . Domain		553102	1					
ANR	553143	Argument	& psfn -> params . Domain		553102	0					
ANR	553144	UnaryOperationExpression	& psfn -> params . Domain		553102	0					
ANR	553145	UnaryOperator	&		553102	0					
ANR	553146	MemberAccess	psfn -> params . Domain		553102	1					
ANR	553147	PtrMemberAccess	psfn -> params		553102	0					
ANR	553148	Identifier	psfn		553102	0					
ANR	553149	Identifier	params		553102	1					
ANR	553150	Identifier	Domain		553102	1					
ANR	553151	Argument	pfn -> params . Domain		553102	1					
ANR	553152	MemberAccess	pfn -> params . Domain		553102	0					
ANR	553153	PtrMemberAccess	pfn -> params		553102	0					
ANR	553154	Identifier	pfn		553102	0					
ANR	553155	Identifier	params		553102	1					
ANR	553156	Identifier	Domain		553102	1					
ANR	553157	Argument	pfn -> params . m		553102	2					
ANR	553158	MemberAccess	pfn -> params . m		553102	0					
ANR	553159	PtrMemberAccess	pfn -> params		553102	0					
ANR	553160	Identifier	pfn		553102	0					
ANR	553161	Identifier	params		553102	1					
ANR	553162	Identifier	m		553102	1					
ANR	553163	Argument	NULL		553102	3					
ANR	553164	Identifier	NULL		553102	0					
ANR	553165	Argument	mem		553102	4					
ANR	553166	Identifier	mem		553102	0					
ANR	553167	PrimaryExpression	0		553102	1					
ANR	553168	RelationalExpression	"( code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem ) ) < 0"		553102	1		<			
ANR	553169	AssignmentExpression	"code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem )"		553102	0		=			
ANR	553170	Identifier	code		553102	0					
ANR	553171	CallExpression	"fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem )"		553102	1					
ANR	553172	Callee	fn_scale_pairs		553102	0					
ANR	553173	Identifier	fn_scale_pairs		553102	0					
ANR	553174	ArgumentList	& psfn -> params . Range		553102	1					
ANR	553175	Argument	& psfn -> params . Range		553102	0					
ANR	553176	UnaryOperationExpression	& psfn -> params . Range		553102	0					
ANR	553177	UnaryOperator	&		553102	0					
ANR	553178	MemberAccess	psfn -> params . Range		553102	1					
ANR	553179	PtrMemberAccess	psfn -> params		553102	0					
ANR	553180	Identifier	psfn		553102	0					
ANR	553181	Identifier	params		553102	1					
ANR	553182	Identifier	Range		553102	1					
ANR	553183	Argument	pfn -> params . Range		553102	1					
ANR	553184	MemberAccess	pfn -> params . Range		553102	0					
ANR	553185	PtrMemberAccess	pfn -> params		553102	0					
ANR	553186	Identifier	pfn		553102	0					
ANR	553187	Identifier	params		553102	1					
ANR	553188	Identifier	Range		553102	1					
ANR	553189	Argument	pfn -> params . n		553102	2					
ANR	553190	MemberAccess	pfn -> params . n		553102	0					
ANR	553191	PtrMemberAccess	pfn -> params		553102	0					
ANR	553192	Identifier	pfn		553102	0					
ANR	553193	Identifier	params		553102	1					
ANR	553194	Identifier	n		553102	1					
ANR	553195	Argument	pranges		553102	3					
ANR	553196	Identifier	pranges		553102	0					
ANR	553197	Argument	mem		553102	4					
ANR	553198	Identifier	mem		553102	0					
ANR	553199	PrimaryExpression	0		553102	1					
ANR	553200	ReturnStatement	return code ;	184:8:5656:5667	553102	1	True				
ANR	553201	Identifier	code		553102	0					
ANR	553202	ReturnStatement	return 0 ;	185:4:5673:5681	553102	5	True				
ANR	553203	PrimaryExpression	0		553102	0					
ANR	553204	ReturnType	int		553102	1					
ANR	553205	Identifier	fn_common_scale		553102	2					
ANR	553206	ParameterList	"gs_function_t * psfn , const gs_function_t * pfn , const gs_range_t * pranges , gs_memory_t * mem"		553102	3					
ANR	553207	Parameter	gs_function_t * psfn	172:16:5137:5155	553102	0	True				
ANR	553208	ParameterType	gs_function_t *		553102	0					
ANR	553209	Identifier	psfn		553102	1					
ANR	553210	Parameter	const gs_function_t * pfn	172:37:5158:5181	553102	1	True				
ANR	553211	ParameterType	const gs_function_t *		553102	0					
ANR	553212	Identifier	pfn		553102	1					
ANR	553213	Parameter	const gs_range_t * pranges	173:16:5200:5224	553102	2	True				
ANR	553214	ParameterType	const gs_range_t *		553102	0					
ANR	553215	Identifier	pranges		553102	1					
ANR	553216	Parameter	gs_memory_t * mem	173:43:5227:5242	553102	3	True				
ANR	553217	ParameterType	gs_memory_t *		553102	0					
ANR	553218	Identifier	mem		553102	1					
ANR	553219	CFGEntryNode	ENTRY		553102		True				
ANR	553220	CFGExitNode	EXIT		553102		True				
ANR	553221	Symbol	psfn -> params		553102						
ANR	553222	Symbol	* pfn		553102						
ANR	553223	Symbol	* psfn		553102						
ANR	553224	Symbol	pfn -> params . m		553102						
ANR	553225	Symbol	pfn -> params . Range		553102						
ANR	553226	Symbol	code		553102						
ANR	553227	Symbol	pfn -> params . n		553102						
ANR	553228	Symbol	NULL		553102						
ANR	553229	Symbol	psfn -> head		553102						
ANR	553230	Symbol	pfn -> params . Domain		553102						
ANR	553231	Symbol	pranges		553102						
ANR	553232	Symbol	psfn -> params . Range		553102						
ANR	553233	Symbol	& psfn -> params		553102						
ANR	553234	Symbol	pfn -> head		553102						
ANR	553235	Symbol	& psfn -> params . Range		553102						
ANR	553236	Symbol	psfn -> params . Domain		553102						
ANR	553237	Symbol	mem		553102						
ANR	553238	Symbol	pfn		553102						
ANR	553239	Symbol	fn_scale_pairs		553102						
ANR	553240	Symbol	pfn -> params		553102						
ANR	553241	Symbol	& psfn -> params . Domain		553102						
ANR	553242	Symbol	psfn		553102						
ANR	553243	Function	fn_common_serialize	189:0:5703:6580							
ANR	553244	FunctionDef	"fn_common_serialize (const gs_function_t * pfn , stream * s)"		553243	0					
ANR	553245	CompoundStatement		191:0:5765:6580	553243	0					
ANR	553246	IdentifierDeclStatement	uint n ;	192:4:5771:5777	553243	0	True				
ANR	553247	IdentifierDecl	n		553243	0					
ANR	553248	IdentifierDeclType	uint		553243	0					
ANR	553249	Identifier	n		553243	1					
ANR	553250	IdentifierDeclStatement	const gs_function_params_t * p = & pfn -> params ;	193:4:5783:5828	553243	1	True				
ANR	553251	IdentifierDecl	* p = & pfn -> params		553243	0					
ANR	553252	IdentifierDeclType	const gs_function_params_t *		553243	0					
ANR	553253	Identifier	p		553243	1					
ANR	553254	AssignmentExpression	* p = & pfn -> params		553243	2		=			
ANR	553255	Identifier	p		553243	0					
ANR	553256	UnaryOperationExpression	& pfn -> params		553243	1					
ANR	553257	UnaryOperator	&		553243	0					
ANR	553258	PtrMemberAccess	pfn -> params		553243	1					
ANR	553259	Identifier	pfn		553243	0					
ANR	553260	Identifier	params		553243	1					
ANR	553261	IdentifierDeclStatement	"int code = sputs ( s , ( const byte * ) & pfn -> head . type , sizeof ( pfn -> head . type ) , & n ) ;"	194:4:5834:5912	553243	2	True				
ANR	553262	IdentifierDecl	"code = sputs ( s , ( const byte * ) & pfn -> head . type , sizeof ( pfn -> head . type ) , & n )"		553243	0					
ANR	553263	IdentifierDeclType	int		553243	0					
ANR	553264	Identifier	code		553243	1					
ANR	553265	AssignmentExpression	"code = sputs ( s , ( const byte * ) & pfn -> head . type , sizeof ( pfn -> head . type ) , & n )"		553243	2		=			
ANR	553266	Identifier	code		553243	0					
ANR	553267	CallExpression	"sputs ( s , ( const byte * ) & pfn -> head . type , sizeof ( pfn -> head . type ) , & n )"		553243	1					
ANR	553268	Callee	sputs		553243	0					
ANR	553269	Identifier	sputs		553243	0					
ANR	553270	ArgumentList	s		553243	1					
ANR	553271	Argument	s		553243	0					
ANR	553272	Identifier	s		553243	0					
ANR	553273	Argument	( const byte * ) & pfn -> head . type		553243	1					
ANR	553274	CastExpression	( const byte * ) & pfn -> head . type		553243	0					
ANR	553275	CastTarget	const byte *		553243	0					
ANR	553276	UnaryOperationExpression	& pfn -> head . type		553243	1					
ANR	553277	UnaryOperator	&		553243	0					
ANR	553278	MemberAccess	pfn -> head . type		553243	1					
ANR	553279	PtrMemberAccess	pfn -> head		553243	0					
ANR	553280	Identifier	pfn		553243	0					
ANR	553281	Identifier	head		553243	1					
ANR	553282	Identifier	type		553243	1					
ANR	553283	Argument	sizeof ( pfn -> head . type )		553243	2					
ANR	553284	SizeofExpression	sizeof ( pfn -> head . type )		553243	0					
ANR	553285	Sizeof	sizeof		553243	0					
ANR	553286	MemberAccess	pfn -> head . type		553243	1					
ANR	553287	PtrMemberAccess	pfn -> head		553243	0					
ANR	553288	Identifier	pfn		553243	0					
ANR	553289	Identifier	head		553243	1					
ANR	553290	Identifier	type		553243	1					
ANR	553291	Argument	& n		553243	3					
ANR	553292	UnaryOperationExpression	& n		553243	0					
ANR	553293	UnaryOperator	&		553243	0					
ANR	553294	Identifier	n		553243	1					
ANR	553295	IdentifierDeclStatement	"const float dummy [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;"	195:4:5918:5966	553243	3	True				
ANR	553296	IdentifierDecl	"dummy [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }"		553243	0					
ANR	553297	IdentifierDeclType	const float [ 8 ]		553243	0					
ANR	553298	Identifier	dummy		553243	1					
ANR	553299	PrimaryExpression	8		553243	2					
ANR	553300	AssignmentExpression	"dummy [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }"		553243	3		=			
ANR	553301	Identifier	dummy		553243	0					
ANR	553302	InitializerList	0		553243	1					
ANR	553303	PrimaryExpression	0		553243	0					
ANR	553304	PrimaryExpression	0		553243	1					
ANR	553305	PrimaryExpression	0		553243	2					
ANR	553306	PrimaryExpression	0		553243	3					
ANR	553307	PrimaryExpression	0		553243	4					
ANR	553308	PrimaryExpression	0		553243	5					
ANR	553309	PrimaryExpression	0		553243	6					
ANR	553310	PrimaryExpression	0		553243	7					
ANR	553311	IfStatement	if ( code < 0 )		553243	4					
ANR	553312	Condition	code < 0	197:8:5977:5984	553243	0	True				
ANR	553313	RelationalExpression	code < 0		553243	0		<			
ANR	553314	Identifier	code		553243	0					
ANR	553315	PrimaryExpression	0		553243	1					
ANR	553316	ReturnStatement	return code ;	198:8:5995:6006	553243	1	True				
ANR	553317	Identifier	code		553243	0					
ANR	553318	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> m , sizeof ( p -> m ) , & n )"	199:4:6012:6066	553243	5	True				
ANR	553319	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> m , sizeof ( p -> m ) , & n )"		553243	0		=			
ANR	553320	Identifier	code		553243	0					
ANR	553321	CallExpression	"sputs ( s , ( const byte * ) & p -> m , sizeof ( p -> m ) , & n )"		553243	1					
ANR	553322	Callee	sputs		553243	0					
ANR	553323	Identifier	sputs		553243	0					
ANR	553324	ArgumentList	s		553243	1					
ANR	553325	Argument	s		553243	0					
ANR	553326	Identifier	s		553243	0					
ANR	553327	Argument	( const byte * ) & p -> m		553243	1					
ANR	553328	CastExpression	( const byte * ) & p -> m		553243	0					
ANR	553329	CastTarget	const byte *		553243	0					
ANR	553330	UnaryOperationExpression	& p -> m		553243	1					
ANR	553331	UnaryOperator	&		553243	0					
ANR	553332	PtrMemberAccess	p -> m		553243	1					
ANR	553333	Identifier	p		553243	0					
ANR	553334	Identifier	m		553243	1					
ANR	553335	Argument	sizeof ( p -> m )		553243	2					
ANR	553336	SizeofExpression	sizeof ( p -> m )		553243	0					
ANR	553337	Sizeof	sizeof		553243	0					
ANR	553338	PtrMemberAccess	p -> m		553243	1					
ANR	553339	Identifier	p		553243	0					
ANR	553340	Identifier	m		553243	1					
ANR	553341	Argument	& n		553243	3					
ANR	553342	UnaryOperationExpression	& n		553243	0					
ANR	553343	UnaryOperator	&		553243	0					
ANR	553344	Identifier	n		553243	1					
ANR	553345	IfStatement	if ( code < 0 )		553243	6					
ANR	553346	Condition	code < 0	200:8:6076:6083	553243	0	True				
ANR	553347	RelationalExpression	code < 0		553243	0		<			
ANR	553348	Identifier	code		553243	0					
ANR	553349	PrimaryExpression	0		553243	1					
ANR	553350	ReturnStatement	return code ;	201:8:6094:6105	553243	1	True				
ANR	553351	Identifier	code		553243	0					
ANR	553352	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> Domain [ 0 ] , sizeof ( p -> Domain [ 0 ] ) * p -> m * 2 , & n )"	202:4:6111:6192	553243	7	True				
ANR	553353	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> Domain [ 0 ] , sizeof ( p -> Domain [ 0 ] ) * p -> m * 2 , & n )"		553243	0		=			
ANR	553354	Identifier	code		553243	0					
ANR	553355	CallExpression	"sputs ( s , ( const byte * ) & p -> Domain [ 0 ] , sizeof ( p -> Domain [ 0 ] ) * p -> m * 2 , & n )"		553243	1					
ANR	553356	Callee	sputs		553243	0					
ANR	553357	Identifier	sputs		553243	0					
ANR	553358	ArgumentList	s		553243	1					
ANR	553359	Argument	s		553243	0					
ANR	553360	Identifier	s		553243	0					
ANR	553361	Argument	( const byte * ) & p -> Domain [ 0 ]		553243	1					
ANR	553362	CastExpression	( const byte * ) & p -> Domain [ 0 ]		553243	0					
ANR	553363	CastTarget	const byte *		553243	0					
ANR	553364	UnaryOperationExpression	& p -> Domain [ 0 ]		553243	1					
ANR	553365	UnaryOperator	&		553243	0					
ANR	553366	ArrayIndexing	p -> Domain [ 0 ]		553243	1					
ANR	553367	PtrMemberAccess	p -> Domain		553243	0					
ANR	553368	Identifier	p		553243	0					
ANR	553369	Identifier	Domain		553243	1					
ANR	553370	PrimaryExpression	0		553243	1					
ANR	553371	Argument	sizeof ( p -> Domain [ 0 ] ) * p -> m * 2		553243	2					
ANR	553372	MultiplicativeExpression	sizeof ( p -> Domain [ 0 ] ) * p -> m * 2		553243	0		*			
ANR	553373	SizeofExpression	sizeof ( p -> Domain [ 0 ] )		553243	0					
ANR	553374	Sizeof	sizeof		553243	0					
ANR	553375	ArrayIndexing	p -> Domain [ 0 ]		553243	1					
ANR	553376	PtrMemberAccess	p -> Domain		553243	0					
ANR	553377	Identifier	p		553243	0					
ANR	553378	Identifier	Domain		553243	1					
ANR	553379	PrimaryExpression	0		553243	1					
ANR	553380	MultiplicativeExpression	p -> m * 2		553243	1		*			
ANR	553381	PtrMemberAccess	p -> m		553243	0					
ANR	553382	Identifier	p		553243	0					
ANR	553383	Identifier	m		553243	1					
ANR	553384	PrimaryExpression	2		553243	1					
ANR	553385	Argument	& n		553243	3					
ANR	553386	UnaryOperationExpression	& n		553243	0					
ANR	553387	UnaryOperator	&		553243	0					
ANR	553388	Identifier	n		553243	1					
ANR	553389	IfStatement	if ( code < 0 )		553243	8					
ANR	553390	Condition	code < 0	203:8:6202:6209	553243	0	True				
ANR	553391	RelationalExpression	code < 0		553243	0		<			
ANR	553392	Identifier	code		553243	0					
ANR	553393	PrimaryExpression	0		553243	1					
ANR	553394	ReturnStatement	return code ;	204:8:6220:6231	553243	1	True				
ANR	553395	Identifier	code		553243	0					
ANR	553396	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> n , sizeof ( p -> n ) , & n )"	205:4:6237:6291	553243	9	True				
ANR	553397	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> n , sizeof ( p -> n ) , & n )"		553243	0		=			
ANR	553398	Identifier	code		553243	0					
ANR	553399	CallExpression	"sputs ( s , ( const byte * ) & p -> n , sizeof ( p -> n ) , & n )"		553243	1					
ANR	553400	Callee	sputs		553243	0					
ANR	553401	Identifier	sputs		553243	0					
ANR	553402	ArgumentList	s		553243	1					
ANR	553403	Argument	s		553243	0					
ANR	553404	Identifier	s		553243	0					
ANR	553405	Argument	( const byte * ) & p -> n		553243	1					
ANR	553406	CastExpression	( const byte * ) & p -> n		553243	0					
ANR	553407	CastTarget	const byte *		553243	0					
ANR	553408	UnaryOperationExpression	& p -> n		553243	1					
ANR	553409	UnaryOperator	&		553243	0					
ANR	553410	PtrMemberAccess	p -> n		553243	1					
ANR	553411	Identifier	p		553243	0					
ANR	553412	Identifier	n		553243	1					
ANR	553413	Argument	sizeof ( p -> n )		553243	2					
ANR	553414	SizeofExpression	sizeof ( p -> n )		553243	0					
ANR	553415	Sizeof	sizeof		553243	0					
ANR	553416	PtrMemberAccess	p -> n		553243	1					
ANR	553417	Identifier	p		553243	0					
ANR	553418	Identifier	n		553243	1					
ANR	553419	Argument	& n		553243	3					
ANR	553420	UnaryOperationExpression	& n		553243	0					
ANR	553421	UnaryOperator	&		553243	0					
ANR	553422	Identifier	n		553243	1					
ANR	553423	IfStatement	if ( code < 0 )		553243	10					
ANR	553424	Condition	code < 0	206:8:6301:6308	553243	0	True				
ANR	553425	RelationalExpression	code < 0		553243	0		<			
ANR	553426	Identifier	code		553243	0					
ANR	553427	PrimaryExpression	0		553243	1					
ANR	553428	ReturnStatement	return code ;	207:8:6319:6330	553243	1	True				
ANR	553429	Identifier	code		553243	0					
ANR	553430	IfStatement	if ( p -> Range == NULL && p -> n * 2 > count_of ( dummy ) )		553243	11					
ANR	553431	Condition	p -> Range == NULL && p -> n * 2 > count_of ( dummy )	208:8:6340:6385	553243	0	True				
ANR	553432	AndExpression	p -> Range == NULL && p -> n * 2 > count_of ( dummy )		553243	0		&&			
ANR	553433	EqualityExpression	p -> Range == NULL		553243	0		==			
ANR	553434	PtrMemberAccess	p -> Range		553243	0					
ANR	553435	Identifier	p		553243	0					
ANR	553436	Identifier	Range		553243	1					
ANR	553437	Identifier	NULL		553243	1					
ANR	553438	RelationalExpression	p -> n * 2 > count_of ( dummy )		553243	1		>			
ANR	553439	MultiplicativeExpression	p -> n * 2		553243	0		*			
ANR	553440	PtrMemberAccess	p -> n		553243	0					
ANR	553441	Identifier	p		553243	0					
ANR	553442	Identifier	n		553243	1					
ANR	553443	PrimaryExpression	2		553243	1					
ANR	553444	CallExpression	count_of ( dummy )		553243	1					
ANR	553445	Callee	count_of		553243	0					
ANR	553446	Identifier	count_of		553243	0					
ANR	553447	ArgumentList	dummy		553243	1					
ANR	553448	Argument	dummy		553243	0					
ANR	553449	Identifier	dummy		553243	0					
ANR	553450	ExpressionStatement	return_error ( gs_error_unregistered )	209:8:6396:6431	553243	1	True				
ANR	553451	CallExpression	return_error ( gs_error_unregistered )		553243	0					
ANR	553452	Callee	return_error		553243	0					
ANR	553453	Identifier	return_error		553243	0					
ANR	553454	ArgumentList	gs_error_unregistered		553243	1					
ANR	553455	Argument	gs_error_unregistered		553243	0					
ANR	553456	Identifier	gs_error_unregistered		553243	0					
ANR	553457	ReturnStatement	"return sputs ( s , ( const byte * ) ( p -> Range != NULL ? & p -> Range [ 0 ] : dummy ) , sizeof ( p -> Range [ 0 ] ) * p -> n * 2 , & n ) ;"	210:4:6458:6578	553243	12	True				
ANR	553458	CallExpression	"sputs ( s , ( const byte * ) ( p -> Range != NULL ? & p -> Range [ 0 ] : dummy ) , sizeof ( p -> Range [ 0 ] ) * p -> n * 2 , & n )"		553243	0					
ANR	553459	Callee	sputs		553243	0					
ANR	553460	Identifier	sputs		553243	0					
ANR	553461	ArgumentList	s		553243	1					
ANR	553462	Argument	s		553243	0					
ANR	553463	Identifier	s		553243	0					
ANR	553464	Argument	( const byte * ) ( p -> Range != NULL ? & p -> Range [ 0 ] : dummy )		553243	1					
ANR	553465	CastExpression	( const byte * ) ( p -> Range != NULL ? & p -> Range [ 0 ] : dummy )		553243	0					
ANR	553466	CastTarget	const byte *		553243	0					
ANR	553467	ConditionalExpression	p -> Range != NULL ? & p -> Range [ 0 ] : dummy		553243	1					
ANR	553468	Condition	p -> Range != NULL		553243	0					
ANR	553469	EqualityExpression	p -> Range != NULL		553243	0		!=			
ANR	553470	PtrMemberAccess	p -> Range		553243	0					
ANR	553471	Identifier	p		553243	0					
ANR	553472	Identifier	Range		553243	1					
ANR	553473	Identifier	NULL		553243	1					
ANR	553474	UnaryOperationExpression	& p -> Range [ 0 ]		553243	1					
ANR	553475	UnaryOperator	&		553243	0					
ANR	553476	ArrayIndexing	p -> Range [ 0 ]		553243	1					
ANR	553477	PtrMemberAccess	p -> Range		553243	0					
ANR	553478	Identifier	p		553243	0					
ANR	553479	Identifier	Range		553243	1					
ANR	553480	PrimaryExpression	0		553243	1					
ANR	553481	Identifier	dummy		553243	2					
ANR	553482	Argument	sizeof ( p -> Range [ 0 ] ) * p -> n * 2		553243	2					
ANR	553483	MultiplicativeExpression	sizeof ( p -> Range [ 0 ] ) * p -> n * 2		553243	0		*			
ANR	553484	SizeofExpression	sizeof ( p -> Range [ 0 ] )		553243	0					
ANR	553485	Sizeof	sizeof		553243	0					
ANR	553486	ArrayIndexing	p -> Range [ 0 ]		553243	1					
ANR	553487	PtrMemberAccess	p -> Range		553243	0					
ANR	553488	Identifier	p		553243	0					
ANR	553489	Identifier	Range		553243	1					
ANR	553490	PrimaryExpression	0		553243	1					
ANR	553491	MultiplicativeExpression	p -> n * 2		553243	1		*			
ANR	553492	PtrMemberAccess	p -> n		553243	0					
ANR	553493	Identifier	p		553243	0					
ANR	553494	Identifier	n		553243	1					
ANR	553495	PrimaryExpression	2		553243	1					
ANR	553496	Argument	& n		553243	3					
ANR	553497	UnaryOperationExpression	& n		553243	0					
ANR	553498	UnaryOperator	&		553243	0					
ANR	553499	Identifier	n		553243	1					
ANR	553500	ReturnType	int		553243	1					
ANR	553501	Identifier	fn_common_serialize		553243	2					
ANR	553502	ParameterList	"const gs_function_t * pfn , stream * s"		553243	3					
ANR	553503	Parameter	const gs_function_t * pfn	190:20:5727:5751	553243	0	True				
ANR	553504	ParameterType	const gs_function_t *		553243	0					
ANR	553505	Identifier	pfn		553243	1					
ANR	553506	Parameter	stream * s	190:47:5754:5762	553243	1	True				
ANR	553507	ParameterType	stream *		553243	0					
ANR	553508	Identifier	s		553243	1					
ANR	553509	CFGEntryNode	ENTRY		553243		True				
ANR	553510	CFGExitNode	EXIT		553243		True				
ANR	553511	Symbol	& p -> n		553243						
ANR	553512	Symbol	gs_error_unregistered		553243						
ANR	553513	Symbol	code		553243						
ANR	553514	Symbol	& p -> m		553243						
ANR	553515	Symbol	p -> Range		553243						
ANR	553516	Symbol	pfn -> head		553243						
ANR	553517	Symbol	dummy		553243						
ANR	553518	Symbol	count_of		553243						
ANR	553519	Symbol	p -> n		553243						
ANR	553520	Symbol	p -> m		553243						
ANR	553521	Symbol	* p -> Range		553243						
ANR	553522	Symbol	* * p		553243						
ANR	553523	Symbol	* pfn		553243						
ANR	553524	Symbol	NULL		553243						
ANR	553525	Symbol	& pfn -> params		553243						
ANR	553526	Symbol	pfn -> head . type		553243						
ANR	553527	Symbol	* p -> Domain		553243						
ANR	553528	Symbol	n		553243						
ANR	553529	Symbol	p -> Domain		553243						
ANR	553530	Symbol	p		553243						
ANR	553531	Symbol	s		553243						
ANR	553532	Symbol	& pfn -> head		553243						
ANR	553533	Symbol	& n		553243						
ANR	553534	Symbol	pfn		553243						
ANR	553535	Symbol	* p		553243						
ANR	553536	Symbol	sputs		553243						
ANR	553537	Symbol	& pfn -> head . type		553243						
