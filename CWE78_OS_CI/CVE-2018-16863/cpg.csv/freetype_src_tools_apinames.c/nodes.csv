command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3667816	File	data/converged/CVE-2018-16863_ghostpdl/freetype_src_tools_apinames.c								
ANR	3667817	ClassDef	OutputFormat_	29:8:724:1247							
ANR	3667818	DeclStmt									
ANR	3667819	Decl							OutputFormat_	OutputFormat_	OutputFormat
ANR	3667820	Function	panic	41:0:1251:1351							
ANR	3667821	FunctionDef	panic (const char * message)		3667820	0					
ANR	3667822	CompoundStatement		43:0:1293:1351	3667820	0					
ANR	3667823	ExpressionStatement	"fprintf ( stderr , ""PANIC: %s\\n"" , message )"	44:2:1297:1338	3667820	0	True				
ANR	3667824	CallExpression	"fprintf ( stderr , ""PANIC: %s\\n"" , message )"		3667820	0					
ANR	3667825	Callee	fprintf		3667820	0					
ANR	3667826	Identifier	fprintf		3667820	0					
ANR	3667827	ArgumentList	stderr		3667820	1					
ANR	3667828	Argument	stderr		3667820	0					
ANR	3667829	Identifier	stderr		3667820	0					
ANR	3667830	Argument	"""PANIC: %s\\n"""		3667820	1					
ANR	3667831	PrimaryExpression	"""PANIC: %s\\n"""		3667820	0					
ANR	3667832	Argument	message		3667820	2					
ANR	3667833	Identifier	message		3667820	0					
ANR	3667834	ExpressionStatement	exit ( 2 )	45:2:1342:1349	3667820	1	True				
ANR	3667835	CallExpression	exit ( 2 )		3667820	0					
ANR	3667836	Callee	exit		3667820	0					
ANR	3667837	Identifier	exit		3667820	0					
ANR	3667838	ArgumentList	2		3667820	1					
ANR	3667839	Argument	2		3667820	0					
ANR	3667840	PrimaryExpression	2		3667820	0					
ANR	3667841	ReturnType	static void		3667820	1					
ANR	3667842	Identifier	panic		3667820	2					
ANR	3667843	ParameterList	const char * message		3667820	3					
ANR	3667844	Parameter	const char * message	42:7:1270:1289	3667820	0	True				
ANR	3667845	ParameterType	const char *		3667820	0					
ANR	3667846	Identifier	message		3667820	1					
ANR	3667847	CFGEntryNode	ENTRY		3667820		True				
ANR	3667848	CFGExitNode	EXIT		3667820		True				
ANR	3667849	Symbol	message		3667820						
ANR	3667850	Symbol	stderr		3667820						
ANR	3667851	ClassDef	NameRec_	49:8:1363:1443							
ANR	3667852	DeclStmt									
ANR	3667853	Decl							char	char *	name
ANR	3667854	DeclStmt									
ANR	3667855	Decl							unsigned int	unsigned int	hash
ANR	3667856	DeclStmt									
ANR	3667857	Decl							NameRec_	NameRec_	NameRec
ANR	3667858	Decl							NameRec_	NameRec_ *	Name
ANR	3667859	DeclStmt									
ANR	3667860	Decl							Name	Name	the_names
ANR	3667861	DeclStmt									
ANR	3667862	Decl							int	int	num_names
ANR	3667863	DeclStmt									
ANR	3667864	Decl							int	int	max_names
ANR	3667865	Function	names_add	60:0:1519:2557							
ANR	3667866	FunctionDef	"names_add (const char * name , const char * end)"		3667865	0					
ANR	3667867	CompoundStatement		63:0:1591:2557	3667865	0					
ANR	3667868	IdentifierDeclStatement	unsigned int h ;	64:2:1595:1610	3667865	0	True				
ANR	3667869	IdentifierDecl	h		3667865	0					
ANR	3667870	IdentifierDeclType	unsigned int		3667865	0					
ANR	3667871	Identifier	h		3667865	1					
ANR	3667872	IdentifierDeclStatement	"int nn , len ;"	65:2:1614:1635	3667865	1	True				
ANR	3667873	IdentifierDecl	nn		3667865	0					
ANR	3667874	IdentifierDeclType	int		3667865	0					
ANR	3667875	Identifier	nn		3667865	1					
ANR	3667876	IdentifierDecl	len		3667865	1					
ANR	3667877	IdentifierDeclType	int		3667865	0					
ANR	3667878	Identifier	len		3667865	1					
ANR	3667879	IdentifierDeclStatement	Name nm ;	66:2:1639:1655	3667865	2	True				
ANR	3667880	IdentifierDecl	nm		3667865	0					
ANR	3667881	IdentifierDeclType	Name		3667865	0					
ANR	3667882	Identifier	nm		3667865	1					
ANR	3667883	IfStatement	if ( end <= name )		3667865	3					
ANR	3667884	Condition	end <= name	68:7:1665:1675	3667865	0	True				
ANR	3667885	RelationalExpression	end <= name		3667865	0		<=			
ANR	3667886	Identifier	end		3667865	0					
ANR	3667887	Identifier	name		3667865	1					
ANR	3667888	ReturnStatement	return ;	69:4:1683:1689	3667865	1	True				
ANR	3667889	ExpressionStatement	len = ( int ) ( end - name )	72:2:1721:1744	3667865	4	True				
ANR	3667890	AssignmentExpression	len = ( int ) ( end - name )		3667865	0		=			
ANR	3667891	Identifier	len		3667865	0					
ANR	3667892	CastExpression	( int ) ( end - name )		3667865	1					
ANR	3667893	CastTarget	int		3667865	0					
ANR	3667894	AdditiveExpression	end - name		3667865	1		-			
ANR	3667895	Identifier	end		3667865	0					
ANR	3667896	Identifier	name		3667865	1					
ANR	3667897	ExpressionStatement	h = 0	73:2:1748:1755	3667865	5	True				
ANR	3667898	AssignmentExpression	h = 0		3667865	0		=			
ANR	3667899	Identifier	h		3667865	0					
ANR	3667900	PrimaryExpression	0		3667865	1					
ANR	3667901	ForStatement	for ( nn = 0 ; nn < len ; nn ++ )		3667865	6					
ANR	3667902	ForInit	nn = 0 ;	74:8:1765:1771	3667865	0	True				
ANR	3667903	AssignmentExpression	nn = 0		3667865	0		=			
ANR	3667904	Identifier	nn		3667865	0					
ANR	3667905	PrimaryExpression	0		3667865	1					
ANR	3667906	Condition	nn < len	74:16:1773:1780	3667865	1	True				
ANR	3667907	RelationalExpression	nn < len		3667865	0		<			
ANR	3667908	Identifier	nn		3667865	0					
ANR	3667909	Identifier	len		3667865	1					
ANR	3667910	PostIncDecOperationExpression	nn ++	74:26:1783:1786	3667865	2	True				
ANR	3667911	Identifier	nn		3667865	0					
ANR	3667912	IncDec	++		3667865	1					
ANR	3667913	ExpressionStatement	h = h * 33 + name [ nn ]	75:4:1794:1813	3667865	3	True				
ANR	3667914	AssignmentExpression	h = h * 33 + name [ nn ]		3667865	0		=			
ANR	3667915	Identifier	h		3667865	0					
ANR	3667916	AdditiveExpression	h * 33 + name [ nn ]		3667865	1		+			
ANR	3667917	MultiplicativeExpression	h * 33		3667865	0		*			
ANR	3667918	Identifier	h		3667865	0					
ANR	3667919	PrimaryExpression	33		3667865	1					
ANR	3667920	ArrayIndexing	name [ nn ]		3667865	1					
ANR	3667921	Identifier	name		3667865	0					
ANR	3667922	Identifier	nn		3667865	1					
ANR	3667923	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		3667865	7					
ANR	3667924	ForInit	nn = 0 ;	78:8:1863:1869	3667865	0	True				
ANR	3667925	AssignmentExpression	nn = 0		3667865	0		=			
ANR	3667926	Identifier	nn		3667865	0					
ANR	3667927	PrimaryExpression	0		3667865	1					
ANR	3667928	Condition	nn < num_names	78:16:1871:1884	3667865	1	True				
ANR	3667929	RelationalExpression	nn < num_names		3667865	0		<			
ANR	3667930	Identifier	nn		3667865	0					
ANR	3667931	Identifier	num_names		3667865	1					
ANR	3667932	PostIncDecOperationExpression	nn ++	78:32:1887:1890	3667865	2	True				
ANR	3667933	Identifier	nn		3667865	0					
ANR	3667934	IncDec	++		3667865	1					
ANR	3667935	CompoundStatement		17:2:304:304	3667865	3					
ANR	3667936	ExpressionStatement	nm = the_names + nn	80:4:1902:1921	3667865	0	True				
ANR	3667937	AssignmentExpression	nm = the_names + nn		3667865	0		=			
ANR	3667938	Identifier	nm		3667865	0					
ANR	3667939	AdditiveExpression	the_names + nn		3667865	1		+			
ANR	3667940	Identifier	the_names		3667865	0					
ANR	3667941	Identifier	nn		3667865	1					
ANR	3667942	IfStatement	"if ( ( int ) nm -> hash == h && memcmp ( name , nm -> name , len ) == 0 && nm -> name [ len ] == 0 )"		3667865	1					
ANR	3667943	Condition	"( int ) nm -> hash == h && memcmp ( name , nm -> name , len ) == 0 && nm -> name [ len ] == 0"	82:9:1933:2060	3667865	0	True				
ANR	3667944	AndExpression	"( int ) nm -> hash == h && memcmp ( name , nm -> name , len ) == 0 && nm -> name [ len ] == 0"		3667865	0		&&			
ANR	3667945	EqualityExpression	( int ) nm -> hash == h		3667865	0		==			
ANR	3667946	CastExpression	( int ) nm -> hash		3667865	0					
ANR	3667947	CastTarget	int		3667865	0					
ANR	3667948	PtrMemberAccess	nm -> hash		3667865	1					
ANR	3667949	Identifier	nm		3667865	0					
ANR	3667950	Identifier	hash		3667865	1					
ANR	3667951	Identifier	h		3667865	1					
ANR	3667952	AndExpression	"memcmp ( name , nm -> name , len ) == 0 && nm -> name [ len ] == 0"		3667865	1		&&			
ANR	3667953	EqualityExpression	"memcmp ( name , nm -> name , len ) == 0"		3667865	0		==			
ANR	3667954	CallExpression	"memcmp ( name , nm -> name , len )"		3667865	0					
ANR	3667955	Callee	memcmp		3667865	0					
ANR	3667956	Identifier	memcmp		3667865	0					
ANR	3667957	ArgumentList	name		3667865	1					
ANR	3667958	Argument	name		3667865	0					
ANR	3667959	Identifier	name		3667865	0					
ANR	3667960	Argument	nm -> name		3667865	1					
ANR	3667961	PtrMemberAccess	nm -> name		3667865	0					
ANR	3667962	Identifier	nm		3667865	0					
ANR	3667963	Identifier	name		3667865	1					
ANR	3667964	Argument	len		3667865	2					
ANR	3667965	Identifier	len		3667865	0					
ANR	3667966	PrimaryExpression	0		3667865	1					
ANR	3667967	EqualityExpression	nm -> name [ len ] == 0		3667865	1		==			
ANR	3667968	ArrayIndexing	nm -> name [ len ]		3667865	0					
ANR	3667969	PtrMemberAccess	nm -> name		3667865	0					
ANR	3667970	Identifier	nm		3667865	0					
ANR	3667971	Identifier	name		3667865	1					
ANR	3667972	Identifier	len		3667865	1					
ANR	3667973	PrimaryExpression	0		3667865	1					
ANR	3667974	ReturnStatement	return ;	85:6:2070:2076	3667865	1	True				
ANR	3667975	IfStatement	if ( num_names >= max_names )		3667865	8					
ANR	3667976	Condition	num_names >= max_names	89:7:2111:2132	3667865	0	True				
ANR	3667977	RelationalExpression	num_names >= max_names		3667865	0		>=			
ANR	3667978	Identifier	num_names		3667865	0					
ANR	3667979	Identifier	max_names		3667865	1					
ANR	3667980	CompoundStatement		28:2:546:546	3667865	1					
ANR	3667981	ExpressionStatement	max_names += ( max_names >> 1 ) + 4	91:4:2144:2177	3667865	0	True				
ANR	3667982	AssignmentExpression	max_names += ( max_names >> 1 ) + 4		3667865	0		+=			
ANR	3667983	Identifier	max_names		3667865	0					
ANR	3667984	AdditiveExpression	( max_names >> 1 ) + 4		3667865	1		+			
ANR	3667985	ShiftExpression	max_names >> 1		3667865	0		>>			
ANR	3667986	Identifier	max_names		3667865	0					
ANR	3667987	PrimaryExpression	1		3667865	1					
ANR	3667988	PrimaryExpression	4		3667865	1					
ANR	3667989	ExpressionStatement	"the_names = ( NameRec * ) realloc ( the_names , sizeof ( the_names [ 0 ] ) * max_names )"	92:4:2183:2299	3667865	1	True				
ANR	3667990	AssignmentExpression	"the_names = ( NameRec * ) realloc ( the_names , sizeof ( the_names [ 0 ] ) * max_names )"		3667865	0		=			
ANR	3667991	Identifier	the_names		3667865	0					
ANR	3667992	CastExpression	"( NameRec * ) realloc ( the_names , sizeof ( the_names [ 0 ] ) * max_names )"		3667865	1					
ANR	3667993	CastTarget	NameRec *		3667865	0					
ANR	3667994	CallExpression	"realloc ( the_names , sizeof ( the_names [ 0 ] ) * max_names )"		3667865	1					
ANR	3667995	Callee	realloc		3667865	0					
ANR	3667996	Identifier	realloc		3667865	0					
ANR	3667997	ArgumentList	the_names		3667865	1					
ANR	3667998	Argument	the_names		3667865	0					
ANR	3667999	Identifier	the_names		3667865	0					
ANR	3668000	Argument	sizeof ( the_names [ 0 ] ) * max_names		3667865	1					
ANR	3668001	MultiplicativeExpression	sizeof ( the_names [ 0 ] ) * max_names		3667865	0		*			
ANR	3668002	SizeofExpression	sizeof ( the_names [ 0 ] )		3667865	0					
ANR	3668003	Sizeof	sizeof		3667865	0					
ANR	3668004	ArrayIndexing	the_names [ 0 ]		3667865	1					
ANR	3668005	Identifier	the_names		3667865	0					
ANR	3668006	PrimaryExpression	0		3667865	1					
ANR	3668007	Identifier	max_names		3667865	1					
ANR	3668008	IfStatement	if ( ! the_names )		3667865	2					
ANR	3668009	Condition	! the_names	94:9:2310:2319	3667865	0	True				
ANR	3668010	UnaryOperationExpression	! the_names		3667865	0					
ANR	3668011	UnaryOperator	!		3667865	0					
ANR	3668012	Identifier	the_names		3667865	1					
ANR	3668013	ExpressionStatement	"panic ( ""not enough memory"" )"	95:6:2329:2357	3667865	1	True				
ANR	3668014	CallExpression	"panic ( ""not enough memory"" )"		3667865	0					
ANR	3668015	Callee	panic		3667865	0					
ANR	3668016	Identifier	panic		3667865	0					
ANR	3668017	ArgumentList	"""not enough memory"""		3667865	1					
ANR	3668018	Argument	"""not enough memory"""		3667865	0					
ANR	3668019	PrimaryExpression	"""not enough memory"""		3667865	0					
ANR	3668020	ExpressionStatement	nm = & the_names [ num_names ++ ]	97:2:2365:2393	3667865	9	True				
ANR	3668021	AssignmentExpression	nm = & the_names [ num_names ++ ]		3667865	0		=			
ANR	3668022	Identifier	nm		3667865	0					
ANR	3668023	UnaryOperationExpression	& the_names [ num_names ++ ]		3667865	1					
ANR	3668024	UnaryOperator	&		3667865	0					
ANR	3668025	ArrayIndexing	the_names [ num_names ++ ]		3667865	1					
ANR	3668026	Identifier	the_names		3667865	0					
ANR	3668027	PostIncDecOperationExpression	num_names ++		3667865	1					
ANR	3668028	Identifier	num_names		3667865	0					
ANR	3668029	IncDec	++		3667865	1					
ANR	3668030	ExpressionStatement	nm -> hash = h	99:2:2398:2410	3667865	10	True				
ANR	3668031	AssignmentExpression	nm -> hash = h		3667865	0		=			
ANR	3668032	PtrMemberAccess	nm -> hash		3667865	0					
ANR	3668033	Identifier	nm		3667865	0					
ANR	3668034	Identifier	hash		3667865	1					
ANR	3668035	Identifier	h		3667865	1					
ANR	3668036	ExpressionStatement	nm -> name = ( char * ) malloc ( len + 1 )	100:2:2414:2447	3667865	11	True				
ANR	3668037	AssignmentExpression	nm -> name = ( char * ) malloc ( len + 1 )		3667865	0		=			
ANR	3668038	PtrMemberAccess	nm -> name		3667865	0					
ANR	3668039	Identifier	nm		3667865	0					
ANR	3668040	Identifier	name		3667865	1					
ANR	3668041	CastExpression	( char * ) malloc ( len + 1 )		3667865	1					
ANR	3668042	CastTarget	char *		3667865	0					
ANR	3668043	CallExpression	malloc ( len + 1 )		3667865	1					
ANR	3668044	Callee	malloc		3667865	0					
ANR	3668045	Identifier	malloc		3667865	0					
ANR	3668046	ArgumentList	len + 1		3667865	1					
ANR	3668047	Argument	len + 1		3667865	0					
ANR	3668048	AdditiveExpression	len + 1		3667865	0		+			
ANR	3668049	Identifier	len		3667865	0					
ANR	3668050	PrimaryExpression	1		3667865	1					
ANR	3668051	IfStatement	if ( ! nm -> name )		3667865	12					
ANR	3668052	Condition	! nm -> name	101:7:2456:2464	3667865	0	True				
ANR	3668053	UnaryOperationExpression	! nm -> name		3667865	0					
ANR	3668054	UnaryOperator	!		3667865	0					
ANR	3668055	PtrMemberAccess	nm -> name		3667865	1					
ANR	3668056	Identifier	nm		3667865	0					
ANR	3668057	Identifier	name		3667865	1					
ANR	3668058	ExpressionStatement	"panic ( ""not enough memory"" )"	102:4:2472:2500	3667865	1	True				
ANR	3668059	CallExpression	"panic ( ""not enough memory"" )"		3667865	0					
ANR	3668060	Callee	panic		3667865	0					
ANR	3668061	Identifier	panic		3667865	0					
ANR	3668062	ArgumentList	"""not enough memory"""		3667865	1					
ANR	3668063	Argument	"""not enough memory"""		3667865	0					
ANR	3668064	PrimaryExpression	"""not enough memory"""		3667865	0					
ANR	3668065	ExpressionStatement	"memcpy ( nm -> name , name , len )"	104:2:2505:2534	3667865	13	True				
ANR	3668066	CallExpression	"memcpy ( nm -> name , name , len )"		3667865	0					
ANR	3668067	Callee	memcpy		3667865	0					
ANR	3668068	Identifier	memcpy		3667865	0					
ANR	3668069	ArgumentList	nm -> name		3667865	1					
ANR	3668070	Argument	nm -> name		3667865	0					
ANR	3668071	PtrMemberAccess	nm -> name		3667865	0					
ANR	3668072	Identifier	nm		3667865	0					
ANR	3668073	Identifier	name		3667865	1					
ANR	3668074	Argument	name		3667865	1					
ANR	3668075	Identifier	name		3667865	0					
ANR	3668076	Argument	len		3667865	2					
ANR	3668077	Identifier	len		3667865	0					
ANR	3668078	ExpressionStatement	nm -> name [ len ] = 0	105:2:2538:2555	3667865	14	True				
ANR	3668079	AssignmentExpression	nm -> name [ len ] = 0		3667865	0		=			
ANR	3668080	ArrayIndexing	nm -> name [ len ]		3667865	0					
ANR	3668081	PtrMemberAccess	nm -> name		3667865	0					
ANR	3668082	Identifier	nm		3667865	0					
ANR	3668083	Identifier	name		3667865	1					
ANR	3668084	Identifier	len		3667865	1					
ANR	3668085	PrimaryExpression	0		3667865	1					
ANR	3668086	ReturnType	static void		3667865	1					
ANR	3668087	Identifier	names_add		3667865	2					
ANR	3668088	ParameterList	"const char * name , const char * end"		3667865	3					
ANR	3668089	Parameter	const char * name	61:11:1542:1558	3667865	0	True				
ANR	3668090	ParameterType	const char *		3667865	0					
ANR	3668091	Identifier	name		3667865	1					
ANR	3668092	Parameter	const char * end	62:11:1572:1587	3667865	1	True				
ANR	3668093	ParameterType	const char *		3667865	0					
ANR	3668094	Identifier	end		3667865	1					
ANR	3668095	CFGEntryNode	ENTRY		3667865		True				
ANR	3668096	CFGExitNode	EXIT		3667865		True				
ANR	3668097	Symbol	nn		3667865						
ANR	3668098	Symbol	* name		3667865						
ANR	3668099	Symbol	* nm -> name		3667865						
ANR	3668100	Symbol	malloc		3667865						
ANR	3668101	Symbol	* nn		3667865						
ANR	3668102	Symbol	* nm		3667865						
ANR	3668103	Symbol	h		3667865						
ANR	3668104	Symbol	* * nm		3667865						
ANR	3668105	Symbol	nm -> name		3667865						
ANR	3668106	Symbol	realloc		3667865						
ANR	3668107	Symbol	nm -> hash		3667865						
ANR	3668108	Symbol	the_names		3667865						
ANR	3668109	Symbol	memcmp		3667865						
ANR	3668110	Symbol	len		3667865						
ANR	3668111	Symbol	max_names		3667865						
ANR	3668112	Symbol	name		3667865						
ANR	3668113	Symbol	* the_names		3667865						
ANR	3668114	Symbol	end		3667865						
ANR	3668115	Symbol	nm		3667865						
ANR	3668116	Symbol	num_names		3667865						
ANR	3668117	Symbol	* len		3667865						
ANR	3668118	Function	name_compare	109:0:2561:2735							
ANR	3668119	FunctionDef	"name_compare (const void * name1 , const void * name2)"		3668118	0					
ANR	3668120	CompoundStatement		112:0:2641:2735	3668118	0					
ANR	3668121	IdentifierDeclStatement	Name n1 = ( Name ) name1 ;	113:2:2645:2667	3668118	0	True				
ANR	3668122	IdentifierDecl	n1 = ( Name ) name1		3668118	0					
ANR	3668123	IdentifierDeclType	Name		3668118	0					
ANR	3668124	Identifier	n1		3668118	1					
ANR	3668125	AssignmentExpression	n1 = ( Name ) name1		3668118	2		=			
ANR	3668126	Identifier	n1		3668118	0					
ANR	3668127	CastExpression	( Name ) name1		3668118	1					
ANR	3668128	CastTarget	Name		3668118	0					
ANR	3668129	Identifier	name1		3668118	1					
ANR	3668130	IdentifierDeclStatement	Name n2 = ( Name ) name2 ;	114:2:2671:2693	3668118	1	True				
ANR	3668131	IdentifierDecl	n2 = ( Name ) name2		3668118	0					
ANR	3668132	IdentifierDeclType	Name		3668118	0					
ANR	3668133	Identifier	n2		3668118	1					
ANR	3668134	AssignmentExpression	n2 = ( Name ) name2		3668118	2		=			
ANR	3668135	Identifier	n2		3668118	0					
ANR	3668136	CastExpression	( Name ) name2		3668118	1					
ANR	3668137	CastTarget	Name		3668118	0					
ANR	3668138	Identifier	name2		3668118	1					
ANR	3668139	ReturnStatement	"return strcmp ( n1 -> name , n2 -> name ) ;"	116:2:2698:2733	3668118	2	True				
ANR	3668140	CallExpression	"strcmp ( n1 -> name , n2 -> name )"		3668118	0					
ANR	3668141	Callee	strcmp		3668118	0					
ANR	3668142	Identifier	strcmp		3668118	0					
ANR	3668143	ArgumentList	n1 -> name		3668118	1					
ANR	3668144	Argument	n1 -> name		3668118	0					
ANR	3668145	PtrMemberAccess	n1 -> name		3668118	0					
ANR	3668146	Identifier	n1		3668118	0					
ANR	3668147	Identifier	name		3668118	1					
ANR	3668148	Argument	n2 -> name		3668118	1					
ANR	3668149	PtrMemberAccess	n2 -> name		3668118	0					
ANR	3668150	Identifier	n2		3668118	0					
ANR	3668151	Identifier	name		3668118	1					
ANR	3668152	ReturnType	static int		3668118	1					
ANR	3668153	Identifier	name_compare		3668118	2					
ANR	3668154	ParameterList	"const void * name1 , const void * name2"		3668118	3					
ANR	3668155	Parameter	const void * name1	110:14:2586:2603	3668118	0	True				
ANR	3668156	ParameterType	const void *		3668118	0					
ANR	3668157	Identifier	name1		3668118	1					
ANR	3668158	Parameter	const void * name2	111:14:2620:2637	3668118	1	True				
ANR	3668159	ParameterType	const void *		3668118	0					
ANR	3668160	Identifier	name2		3668118	1					
ANR	3668161	CFGEntryNode	ENTRY		3668118		True				
ANR	3668162	CFGExitNode	EXIT		3668118		True				
ANR	3668163	Symbol	strcmp		3668118						
ANR	3668164	Symbol	n1		3668118						
ANR	3668165	Symbol	n2 -> name		3668118						
ANR	3668166	Symbol	n2		3668118						
ANR	3668167	Symbol	n1 -> name		3668118						
ANR	3668168	Symbol	* n2		3668118						
ANR	3668169	Symbol	* n1		3668118						
ANR	3668170	Symbol	name2		3668118						
ANR	3668171	Symbol	name1		3668118						
ANR	3668172	Function	names_sort	119:0:2738:2860							
ANR	3668173	FunctionDef	names_sort ()		3668172	0					
ANR	3668174	CompoundStatement		121:0:2769:2860	3668172	0					
ANR	3668175	ExpressionStatement	"qsort ( the_names , ( size_t ) num_names , sizeof ( the_names [ 0 ] ) , name_compare )"	122:2:2773:2858	3668172	0	True				
ANR	3668176	CallExpression	"qsort ( the_names , ( size_t ) num_names , sizeof ( the_names [ 0 ] ) , name_compare )"		3668172	0					
ANR	3668177	Callee	qsort		3668172	0					
ANR	3668178	Identifier	qsort		3668172	0					
ANR	3668179	ArgumentList	the_names		3668172	1					
ANR	3668180	Argument	the_names		3668172	0					
ANR	3668181	Identifier	the_names		3668172	0					
ANR	3668182	Argument	( size_t ) num_names		3668172	1					
ANR	3668183	CastExpression	( size_t ) num_names		3668172	0					
ANR	3668184	CastTarget	size_t		3668172	0					
ANR	3668185	Identifier	num_names		3668172	1					
ANR	3668186	Argument	sizeof ( the_names [ 0 ] )		3668172	2					
ANR	3668187	SizeofExpression	sizeof ( the_names [ 0 ] )		3668172	0					
ANR	3668188	Sizeof	sizeof		3668172	0					
ANR	3668189	ArrayIndexing	the_names [ 0 ]		3668172	1					
ANR	3668190	Identifier	the_names		3668172	0					
ANR	3668191	PrimaryExpression	0		3668172	1					
ANR	3668192	Argument	name_compare		3668172	3					
ANR	3668193	Identifier	name_compare		3668172	0					
ANR	3668194	ReturnType	static void		3668172	1					
ANR	3668195	Identifier	names_sort		3668172	2					
ANR	3668196	ParameterList			3668172	3					
ANR	3668197	CFGEntryNode	ENTRY		3668172		True				
ANR	3668198	CFGExitNode	EXIT		3668172		True				
ANR	3668199	Symbol	the_names		3668172						
ANR	3668200	Symbol	* the_names		3668172						
ANR	3668201	Symbol	name_compare		3668172						
ANR	3668202	Symbol	num_names		3668172						
ANR	3668203	Function	names_dump	127:0:2864:5134							
ANR	3668204	FunctionDef	"names_dump (FILE * out , OutputFormat format , const char * dll_name)"		3668203	0					
ANR	3668205	CompoundStatement		131:0:2978:5134	3668203	0					
ANR	3668206	IdentifierDeclStatement	int nn ;	132:2:2982:2989	3668203	0	True				
ANR	3668207	IdentifierDecl	nn		3668203	0					
ANR	3668208	IdentifierDeclType	int		3668203	0					
ANR	3668209	Identifier	nn		3668203	1					
ANR	3668210	SwitchStatement	switch ( format )		3668203	1					
ANR	3668211	Condition	format	135:11:3004:3009	3668203	0	True				
ANR	3668212	Identifier	format		3668203	0					
ANR	3668213	CompoundStatement		6:2:36:36	3668203	1					
ANR	3668214	Label	case OUTPUT_WINDOWS_DEF :	137:4:3021:3044	3668203	0	True				
ANR	3668215	Identifier	OUTPUT_WINDOWS_DEF		3668203	0					
ANR	3668216	IfStatement	if ( dll_name )		3668203	1					
ANR	3668217	Condition	dll_name	138:11:3057:3064	3668203	0	True				
ANR	3668218	Identifier	dll_name		3668203	0					
ANR	3668219	ExpressionStatement	"fprintf ( out , ""LIBRARY %s\\n"" , dll_name )"	139:8:3076:3116	3668203	1	True				
ANR	3668220	CallExpression	"fprintf ( out , ""LIBRARY %s\\n"" , dll_name )"		3668203	0					
ANR	3668221	Callee	fprintf		3668203	0					
ANR	3668222	Identifier	fprintf		3668203	0					
ANR	3668223	ArgumentList	out		3668203	1					
ANR	3668224	Argument	out		3668203	0					
ANR	3668225	Identifier	out		3668203	0					
ANR	3668226	Argument	"""LIBRARY %s\\n"""		3668203	1					
ANR	3668227	PrimaryExpression	"""LIBRARY %s\\n"""		3668203	0					
ANR	3668228	Argument	dll_name		3668203	2					
ANR	3668229	Identifier	dll_name		3668203	0					
ANR	3668230	ExpressionStatement	"fprintf ( out , ""DESCRIPTION  FreeType 2 DLL\\n"" )"	141:6:3125:3172	3668203	2	True				
ANR	3668231	CallExpression	"fprintf ( out , ""DESCRIPTION  FreeType 2 DLL\\n"" )"		3668203	0					
ANR	3668232	Callee	fprintf		3668203	0					
ANR	3668233	Identifier	fprintf		3668203	0					
ANR	3668234	ArgumentList	out		3668203	1					
ANR	3668235	Argument	out		3668203	0					
ANR	3668236	Identifier	out		3668203	0					
ANR	3668237	Argument	"""DESCRIPTION  FreeType 2 DLL\\n"""		3668203	1					
ANR	3668238	PrimaryExpression	"""DESCRIPTION  FreeType 2 DLL\\n"""		3668203	0					
ANR	3668239	ExpressionStatement	"fprintf ( out , ""EXPORTS\\n"" )"	142:6:3180:3207	3668203	3	True				
ANR	3668240	CallExpression	"fprintf ( out , ""EXPORTS\\n"" )"		3668203	0					
ANR	3668241	Callee	fprintf		3668203	0					
ANR	3668242	Identifier	fprintf		3668203	0					
ANR	3668243	ArgumentList	out		3668203	1					
ANR	3668244	Argument	out		3668203	0					
ANR	3668245	Identifier	out		3668203	0					
ANR	3668246	Argument	"""EXPORTS\\n"""		3668203	1					
ANR	3668247	PrimaryExpression	"""EXPORTS\\n"""		3668203	0					
ANR	3668248	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		3668203	4					
ANR	3668249	ForInit	nn = 0 ;	143:12:3221:3227	3668203	0	True				
ANR	3668250	AssignmentExpression	nn = 0		3668203	0		=			
ANR	3668251	Identifier	nn		3668203	0					
ANR	3668252	PrimaryExpression	0		3668203	1					
ANR	3668253	Condition	nn < num_names	143:20:3229:3242	3668203	1	True				
ANR	3668254	RelationalExpression	nn < num_names		3668203	0		<			
ANR	3668255	Identifier	nn		3668203	0					
ANR	3668256	Identifier	num_names		3668203	1					
ANR	3668257	PostIncDecOperationExpression	nn ++	143:36:3245:3248	3668203	2	True				
ANR	3668258	Identifier	nn		3668203	0					
ANR	3668259	IncDec	++		3668203	1					
ANR	3668260	ExpressionStatement	"fprintf ( out , ""  %s\\n"" , the_names [ nn ] . name )"	144:8:3260:3304	3668203	3	True				
ANR	3668261	CallExpression	"fprintf ( out , ""  %s\\n"" , the_names [ nn ] . name )"		3668203	0					
ANR	3668262	Callee	fprintf		3668203	0					
ANR	3668263	Identifier	fprintf		3668203	0					
ANR	3668264	ArgumentList	out		3668203	1					
ANR	3668265	Argument	out		3668203	0					
ANR	3668266	Identifier	out		3668203	0					
ANR	3668267	Argument	"""  %s\\n"""		3668203	1					
ANR	3668268	PrimaryExpression	"""  %s\\n"""		3668203	0					
ANR	3668269	Argument	the_names [ nn ] . name		3668203	2					
ANR	3668270	MemberAccess	the_names [ nn ] . name		3668203	0					
ANR	3668271	ArrayIndexing	the_names [ nn ]		3668203	0					
ANR	3668272	Identifier	the_names		3668203	0					
ANR	3668273	Identifier	nn		3668203	1					
ANR	3668274	Identifier	name		3668203	1					
ANR	3668275	BreakStatement	break ;	145:6:3312:3317	3668203	5	True				
ANR	3668276	Label	case OUTPUT_BORLAND_DEF :	147:4:3324:3347	3668203	6	True				
ANR	3668277	Identifier	OUTPUT_BORLAND_DEF		3668203	0					
ANR	3668278	IfStatement	if ( dll_name )		3668203	7					
ANR	3668279	Condition	dll_name	148:11:3360:3367	3668203	0	True				
ANR	3668280	Identifier	dll_name		3668203	0					
ANR	3668281	ExpressionStatement	"fprintf ( out , ""LIBRARY %s\\n"" , dll_name )"	149:8:3379:3419	3668203	1	True				
ANR	3668282	CallExpression	"fprintf ( out , ""LIBRARY %s\\n"" , dll_name )"		3668203	0					
ANR	3668283	Callee	fprintf		3668203	0					
ANR	3668284	Identifier	fprintf		3668203	0					
ANR	3668285	ArgumentList	out		3668203	1					
ANR	3668286	Argument	out		3668203	0					
ANR	3668287	Identifier	out		3668203	0					
ANR	3668288	Argument	"""LIBRARY %s\\n"""		3668203	1					
ANR	3668289	PrimaryExpression	"""LIBRARY %s\\n"""		3668203	0					
ANR	3668290	Argument	dll_name		3668203	2					
ANR	3668291	Identifier	dll_name		3668203	0					
ANR	3668292	ExpressionStatement	"fprintf ( out , ""DESCRIPTION  FreeType 2 DLL\\n"" )"	151:6:3428:3475	3668203	8	True				
ANR	3668293	CallExpression	"fprintf ( out , ""DESCRIPTION  FreeType 2 DLL\\n"" )"		3668203	0					
ANR	3668294	Callee	fprintf		3668203	0					
ANR	3668295	Identifier	fprintf		3668203	0					
ANR	3668296	ArgumentList	out		3668203	1					
ANR	3668297	Argument	out		3668203	0					
ANR	3668298	Identifier	out		3668203	0					
ANR	3668299	Argument	"""DESCRIPTION  FreeType 2 DLL\\n"""		3668203	1					
ANR	3668300	PrimaryExpression	"""DESCRIPTION  FreeType 2 DLL\\n"""		3668203	0					
ANR	3668301	ExpressionStatement	"fprintf ( out , ""EXPORTS\\n"" )"	152:6:3483:3510	3668203	9	True				
ANR	3668302	CallExpression	"fprintf ( out , ""EXPORTS\\n"" )"		3668203	0					
ANR	3668303	Callee	fprintf		3668203	0					
ANR	3668304	Identifier	fprintf		3668203	0					
ANR	3668305	ArgumentList	out		3668203	1					
ANR	3668306	Argument	out		3668203	0					
ANR	3668307	Identifier	out		3668203	0					
ANR	3668308	Argument	"""EXPORTS\\n"""		3668203	1					
ANR	3668309	PrimaryExpression	"""EXPORTS\\n"""		3668203	0					
ANR	3668310	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		3668203	10					
ANR	3668311	ForInit	nn = 0 ;	153:12:3524:3530	3668203	0	True				
ANR	3668312	AssignmentExpression	nn = 0		3668203	0		=			
ANR	3668313	Identifier	nn		3668203	0					
ANR	3668314	PrimaryExpression	0		3668203	1					
ANR	3668315	Condition	nn < num_names	153:20:3532:3545	3668203	1	True				
ANR	3668316	RelationalExpression	nn < num_names		3668203	0		<			
ANR	3668317	Identifier	nn		3668203	0					
ANR	3668318	Identifier	num_names		3668203	1					
ANR	3668319	PostIncDecOperationExpression	nn ++	153:36:3548:3551	3668203	2	True				
ANR	3668320	Identifier	nn		3668203	0					
ANR	3668321	IncDec	++		3668203	1					
ANR	3668322	ExpressionStatement	"fprintf ( out , ""  _%s\\n"" , the_names [ nn ] . name )"	154:8:3563:3608	3668203	3	True				
ANR	3668323	CallExpression	"fprintf ( out , ""  _%s\\n"" , the_names [ nn ] . name )"		3668203	0					
ANR	3668324	Callee	fprintf		3668203	0					
ANR	3668325	Identifier	fprintf		3668203	0					
ANR	3668326	ArgumentList	out		3668203	1					
ANR	3668327	Argument	out		3668203	0					
ANR	3668328	Identifier	out		3668203	0					
ANR	3668329	Argument	"""  _%s\\n"""		3668203	1					
ANR	3668330	PrimaryExpression	"""  _%s\\n"""		3668203	0					
ANR	3668331	Argument	the_names [ nn ] . name		3668203	2					
ANR	3668332	MemberAccess	the_names [ nn ] . name		3668203	0					
ANR	3668333	ArrayIndexing	the_names [ nn ]		3668203	0					
ANR	3668334	Identifier	the_names		3668203	0					
ANR	3668335	Identifier	nn		3668203	1					
ANR	3668336	Identifier	name		3668203	1					
ANR	3668337	BreakStatement	break ;	155:6:3616:3621	3668203	11	True				
ANR	3668338	Label	case OUTPUT_WATCOM_LBC :	157:4:3628:3650	3668203	12	True				
ANR	3668339	Identifier	OUTPUT_WATCOM_LBC		3668203	0					
ANR	3668340	CompoundStatement		30:8:715:737	3668203	13					
ANR	3668341	IdentifierDeclStatement	const char * dot ;	159:8:3668:3684	3668203	0	True				
ANR	3668342	IdentifierDecl	* dot		3668203	0					
ANR	3668343	IdentifierDeclType	const char *		3668203	0					
ANR	3668344	Identifier	dot		3668203	1					
ANR	3668345	IdentifierDeclStatement	char temp [ 512 ] ;	160:8:3694:3716	3668203	1	True				
ANR	3668346	IdentifierDecl	temp [ 512 ]		3668203	0					
ANR	3668347	IdentifierDeclType	char [ 512 ]		3668203	0					
ANR	3668348	Identifier	temp		3668203	1					
ANR	3668349	PrimaryExpression	512		3668203	2					
ANR	3668350	IfStatement	if ( ! dll_name )		3668203	2					
ANR	3668351	Condition	! dll_name	163:13:3733:3741	3668203	0	True				
ANR	3668352	UnaryOperationExpression	! dll_name		3668203	0					
ANR	3668353	UnaryOperator	!		3668203	0					
ANR	3668354	Identifier	dll_name		3668203	1					
ANR	3668355	CompoundStatement		34:8:774:774	3668203	1					
ANR	3668356	ExpressionStatement	"fprintf ( stderr , ""you must provide a DLL name with the -d option!\\n"" )"	165:10:3765:3854	3668203	0	True				
ANR	3668357	CallExpression	"fprintf ( stderr , ""you must provide a DLL name with the -d option!\\n"" )"		3668203	0					
ANR	3668358	Callee	fprintf		3668203	0					
ANR	3668359	Identifier	fprintf		3668203	0					
ANR	3668360	ArgumentList	stderr		3668203	1					
ANR	3668361	Argument	stderr		3668203	0					
ANR	3668362	Identifier	stderr		3668203	0					
ANR	3668363	Argument	"""you must provide a DLL name with the -d option!\\n"""		3668203	1					
ANR	3668364	PrimaryExpression	"""you must provide a DLL name with the -d option!\\n"""		3668203	0					
ANR	3668365	ExpressionStatement	exit ( 4 )	167:10:3866:3875	3668203	1	True				
ANR	3668366	CallExpression	exit ( 4 )		3668203	0					
ANR	3668367	Callee	exit		3668203	0					
ANR	3668368	Identifier	exit		3668203	0					
ANR	3668369	ArgumentList	4		3668203	1					
ANR	3668370	Argument	4		3668203	0					
ANR	3668371	PrimaryExpression	4		3668203	0					
ANR	3668372	ExpressionStatement	"dot = strchr ( dll_name , '.' )"	171:8:3961:3990	3668203	3	True				
ANR	3668373	AssignmentExpression	"dot = strchr ( dll_name , '.' )"		3668203	0		=			
ANR	3668374	Identifier	dot		3668203	0					
ANR	3668375	CallExpression	"strchr ( dll_name , '.' )"		3668203	1					
ANR	3668376	Callee	strchr		3668203	0					
ANR	3668377	Identifier	strchr		3668203	0					
ANR	3668378	ArgumentList	dll_name		3668203	1					
ANR	3668379	Argument	dll_name		3668203	0					
ANR	3668380	Identifier	dll_name		3668203	0					
ANR	3668381	Argument	'.'		3668203	1					
ANR	3668382	PrimaryExpression	'.'		3668203	0					
ANR	3668383	IfStatement	if ( dot )		3668203	4					
ANR	3668384	Condition	dot	172:13:4005:4007	3668203	0	True				
ANR	3668385	Identifier	dot		3668203	0					
ANR	3668386	CompoundStatement		44:10:1052:1077	3668203	1					
ANR	3668387	IdentifierDeclStatement	int len = dot - dll_name ;	174:10:4031:4056	3668203	0	True				
ANR	3668388	IdentifierDecl	len = dot - dll_name		3668203	0					
ANR	3668389	IdentifierDeclType	int		3668203	0					
ANR	3668390	Identifier	len		3668203	1					
ANR	3668391	AssignmentExpression	len = dot - dll_name		3668203	2		=			
ANR	3668392	Identifier	len		3668203	0					
ANR	3668393	AdditiveExpression	dot - dll_name		3668203	1		-			
ANR	3668394	Identifier	dot		3668203	0					
ANR	3668395	Identifier	dll_name		3668203	1					
ANR	3668396	IfStatement	if ( len > ( int ) ( sizeof ( temp ) - 1 ) )		3668203	1					
ANR	3668397	Condition	len > ( int ) ( sizeof ( temp ) - 1 )	177:15:4075:4108	3668203	0	True				
ANR	3668398	RelationalExpression	len > ( int ) ( sizeof ( temp ) - 1 )		3668203	0		>			
ANR	3668399	Identifier	len		3668203	0					
ANR	3668400	CastExpression	( int ) ( sizeof ( temp ) - 1 )		3668203	1					
ANR	3668401	CastTarget	int		3668203	0					
ANR	3668402	AdditiveExpression	sizeof ( temp ) - 1		3668203	1		-			
ANR	3668403	SizeofExpression	sizeof ( temp )		3668203	0					
ANR	3668404	Sizeof	sizeof		3668203	0					
ANR	3668405	SizeofOperand	temp		3668203	1					
ANR	3668406	PrimaryExpression	1		3668203	1					
ANR	3668407	ExpressionStatement	len = sizeof ( temp ) - 1	178:12:4124:4149	3668203	1	True				
ANR	3668408	AssignmentExpression	len = sizeof ( temp ) - 1		3668203	0		=			
ANR	3668409	Identifier	len		3668203	0					
ANR	3668410	AdditiveExpression	sizeof ( temp ) - 1		3668203	1		-			
ANR	3668411	SizeofExpression	sizeof ( temp )		3668203	0					
ANR	3668412	Sizeof	sizeof		3668203	0					
ANR	3668413	SizeofOperand	temp		3668203	1					
ANR	3668414	PrimaryExpression	1		3668203	1					
ANR	3668415	ExpressionStatement	"memcpy ( temp , dll_name , len )"	180:10:4162:4191	3668203	2	True				
ANR	3668416	CallExpression	"memcpy ( temp , dll_name , len )"		3668203	0					
ANR	3668417	Callee	memcpy		3668203	0					
ANR	3668418	Identifier	memcpy		3668203	0					
ANR	3668419	ArgumentList	temp		3668203	1					
ANR	3668420	Argument	temp		3668203	0					
ANR	3668421	Identifier	temp		3668203	0					
ANR	3668422	Argument	dll_name		3668203	1					
ANR	3668423	Identifier	dll_name		3668203	0					
ANR	3668424	Argument	len		3668203	2					
ANR	3668425	Identifier	len		3668203	0					
ANR	3668426	ExpressionStatement	temp [ len ] = 0	181:10:4203:4216	3668203	3	True				
ANR	3668427	AssignmentExpression	temp [ len ] = 0		3668203	0		=			
ANR	3668428	ArrayIndexing	temp [ len ]		3668203	0					
ANR	3668429	Identifier	temp		3668203	0					
ANR	3668430	Identifier	len		3668203	1					
ANR	3668431	PrimaryExpression	0		3668203	1					
ANR	3668432	ExpressionStatement	dll_name = ( const char * ) temp	183:10:4229:4257	3668203	4	True				
ANR	3668433	AssignmentExpression	dll_name = ( const char * ) temp		3668203	0		=			
ANR	3668434	Identifier	dll_name		3668203	0					
ANR	3668435	CastExpression	( const char * ) temp		3668203	1					
ANR	3668436	CastTarget	const char *		3668203	0					
ANR	3668437	Identifier	temp		3668203	1					
ANR	3668438	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		3668203	5					
ANR	3668439	ForInit	nn = 0 ;	186:14:4284:4290	3668203	0	True				
ANR	3668440	AssignmentExpression	nn = 0		3668203	0		=			
ANR	3668441	Identifier	nn		3668203	0					
ANR	3668442	PrimaryExpression	0		3668203	1					
ANR	3668443	Condition	nn < num_names	186:22:4292:4305	3668203	1	True				
ANR	3668444	RelationalExpression	nn < num_names		3668203	0		<			
ANR	3668445	Identifier	nn		3668203	0					
ANR	3668446	Identifier	num_names		3668203	1					
ANR	3668447	PostIncDecOperationExpression	nn ++	186:38:4308:4311	3668203	2	True				
ANR	3668448	Identifier	nn		3668203	0					
ANR	3668449	IncDec	++		3668203	1					
ANR	3668450	ExpressionStatement	"fprintf ( out , ""++_%s.%s.%s\\n"" , the_names [ nn ] . name , dll_name , the_names [ nn ] . name )"	187:10:4325:4430	3668203	3	True				
ANR	3668451	CallExpression	"fprintf ( out , ""++_%s.%s.%s\\n"" , the_names [ nn ] . name , dll_name , the_names [ nn ] . name )"		3668203	0					
ANR	3668452	Callee	fprintf		3668203	0					
ANR	3668453	Identifier	fprintf		3668203	0					
ANR	3668454	ArgumentList	out		3668203	1					
ANR	3668455	Argument	out		3668203	0					
ANR	3668456	Identifier	out		3668203	0					
ANR	3668457	Argument	"""++_%s.%s.%s\\n"""		3668203	1					
ANR	3668458	PrimaryExpression	"""++_%s.%s.%s\\n"""		3668203	0					
ANR	3668459	Argument	the_names [ nn ] . name		3668203	2					
ANR	3668460	MemberAccess	the_names [ nn ] . name		3668203	0					
ANR	3668461	ArrayIndexing	the_names [ nn ]		3668203	0					
ANR	3668462	Identifier	the_names		3668203	0					
ANR	3668463	Identifier	nn		3668203	1					
ANR	3668464	Identifier	name		3668203	1					
ANR	3668465	Argument	dll_name		3668203	3					
ANR	3668466	Identifier	dll_name		3668203	0					
ANR	3668467	Argument	the_names [ nn ] . name		3668203	4					
ANR	3668468	MemberAccess	the_names [ nn ] . name		3668203	0					
ANR	3668469	ArrayIndexing	the_names [ nn ]		3668203	0					
ANR	3668470	Identifier	the_names		3668203	0					
ANR	3668471	Identifier	nn		3668203	1					
ANR	3668472	Identifier	name		3668203	1					
ANR	3668473	BreakStatement	break ;	190:6:4446:4451	3668203	14	True				
ANR	3668474	Label	case OUTPUT_NETWARE_IMP :	192:4:4458:4481	3668203	15	True				
ANR	3668475	Identifier	OUTPUT_NETWARE_IMP		3668203	0					
ANR	3668476	CompoundStatement		63:6:1510:1510	3668203	16					
ANR	3668477	IfStatement	if ( dll_name )		3668203	0					
ANR	3668478	Condition	dll_name	194:13:4504:4511	3668203	0	True				
ANR	3668479	Identifier	dll_name		3668203	0					
ANR	3668480	ExpressionStatement	"fprintf ( out , ""  (%s)\\n"" , dll_name )"	195:10:4525:4561	3668203	1	True				
ANR	3668481	CallExpression	"fprintf ( out , ""  (%s)\\n"" , dll_name )"		3668203	0					
ANR	3668482	Callee	fprintf		3668203	0					
ANR	3668483	Identifier	fprintf		3668203	0					
ANR	3668484	ArgumentList	out		3668203	1					
ANR	3668485	Argument	out		3668203	0					
ANR	3668486	Identifier	out		3668203	0					
ANR	3668487	Argument	"""  (%s)\\n"""		3668203	1					
ANR	3668488	PrimaryExpression	"""  (%s)\\n"""		3668203	0					
ANR	3668489	Argument	dll_name		3668203	2					
ANR	3668490	Identifier	dll_name		3668203	0					
ANR	3668491	ForStatement	for ( nn = 0 ; nn < num_names - 1 ; nn ++ )		3668203	1					
ANR	3668492	ForInit	nn = 0 ;	196:14:4577:4583	3668203	0	True				
ANR	3668493	AssignmentExpression	nn = 0		3668203	0		=			
ANR	3668494	Identifier	nn		3668203	0					
ANR	3668495	PrimaryExpression	0		3668203	1					
ANR	3668496	Condition	nn < num_names - 1	196:22:4585:4602	3668203	1	True				
ANR	3668497	RelationalExpression	nn < num_names - 1		3668203	0		<			
ANR	3668498	Identifier	nn		3668203	0					
ANR	3668499	AdditiveExpression	num_names - 1		3668203	1		-			
ANR	3668500	Identifier	num_names		3668203	0					
ANR	3668501	PrimaryExpression	1		3668203	1					
ANR	3668502	PostIncDecOperationExpression	nn ++	196:42:4605:4608	3668203	2	True				
ANR	3668503	Identifier	nn		3668203	0					
ANR	3668504	IncDec	++		3668203	1					
ANR	3668505	ExpressionStatement	"fprintf ( out , ""  %s,\\n"" , the_names [ nn ] . name )"	197:10:4622:4667	3668203	3	True				
ANR	3668506	CallExpression	"fprintf ( out , ""  %s,\\n"" , the_names [ nn ] . name )"		3668203	0					
ANR	3668507	Callee	fprintf		3668203	0					
ANR	3668508	Identifier	fprintf		3668203	0					
ANR	3668509	ArgumentList	out		3668203	1					
ANR	3668510	Argument	out		3668203	0					
ANR	3668511	Identifier	out		3668203	0					
ANR	3668512	Argument	"""  %s,\\n"""		3668203	1					
ANR	3668513	PrimaryExpression	"""  %s,\\n"""		3668203	0					
ANR	3668514	Argument	the_names [ nn ] . name		3668203	2					
ANR	3668515	MemberAccess	the_names [ nn ] . name		3668203	0					
ANR	3668516	ArrayIndexing	the_names [ nn ]		3668203	0					
ANR	3668517	Identifier	the_names		3668203	0					
ANR	3668518	Identifier	nn		3668203	1					
ANR	3668519	Identifier	name		3668203	1					
ANR	3668520	ExpressionStatement	"fprintf ( out , ""  %s\\n"" , the_names [ num_names - 1 ] . name )"	198:8:4677:4732	3668203	2	True				
ANR	3668521	CallExpression	"fprintf ( out , ""  %s\\n"" , the_names [ num_names - 1 ] . name )"		3668203	0					
ANR	3668522	Callee	fprintf		3668203	0					
ANR	3668523	Identifier	fprintf		3668203	0					
ANR	3668524	ArgumentList	out		3668203	1					
ANR	3668525	Argument	out		3668203	0					
ANR	3668526	Identifier	out		3668203	0					
ANR	3668527	Argument	"""  %s\\n"""		3668203	1					
ANR	3668528	PrimaryExpression	"""  %s\\n"""		3668203	0					
ANR	3668529	Argument	the_names [ num_names - 1 ] . name		3668203	2					
ANR	3668530	MemberAccess	the_names [ num_names - 1 ] . name		3668203	0					
ANR	3668531	ArrayIndexing	the_names [ num_names - 1 ]		3668203	0					
ANR	3668532	Identifier	the_names		3668203	0					
ANR	3668533	AdditiveExpression	num_names - 1		3668203	1		-			
ANR	3668534	Identifier	num_names		3668203	0					
ANR	3668535	PrimaryExpression	1		3668203	1					
ANR	3668536	Identifier	name		3668203	1					
ANR	3668537	BreakStatement	break ;	200:6:4748:4753	3668203	17	True				
ANR	3668538	Label	case OUTPUT_GNU_VERMAP :	202:4:4760:4782	3668203	18	True				
ANR	3668539	Identifier	OUTPUT_GNU_VERMAP		3668203	0					
ANR	3668540	CompoundStatement		73:6:1811:1811	3668203	19					
ANR	3668541	ExpressionStatement	"fprintf ( out , ""{\\n\\tglobal:\\n"" )"	204:8:4800:4832	3668203	0	True				
ANR	3668542	CallExpression	"fprintf ( out , ""{\\n\\tglobal:\\n"" )"		3668203	0					
ANR	3668543	Callee	fprintf		3668203	0					
ANR	3668544	Identifier	fprintf		3668203	0					
ANR	3668545	ArgumentList	out		3668203	1					
ANR	3668546	Argument	out		3668203	0					
ANR	3668547	Identifier	out		3668203	0					
ANR	3668548	Argument	"""{\\n\\tglobal:\\n"""		3668203	1					
ANR	3668549	PrimaryExpression	"""{\\n\\tglobal:\\n"""		3668203	0					
ANR	3668550	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		3668203	1					
ANR	3668551	ForInit	nn = 0 ;	205:14:4848:4854	3668203	0	True				
ANR	3668552	AssignmentExpression	nn = 0		3668203	0		=			
ANR	3668553	Identifier	nn		3668203	0					
ANR	3668554	PrimaryExpression	0		3668203	1					
ANR	3668555	Condition	nn < num_names	205:22:4856:4869	3668203	1	True				
ANR	3668556	RelationalExpression	nn < num_names		3668203	0		<			
ANR	3668557	Identifier	nn		3668203	0					
ANR	3668558	Identifier	num_names		3668203	1					
ANR	3668559	PostIncDecOperationExpression	nn ++	205:38:4872:4875	3668203	2	True				
ANR	3668560	Identifier	nn		3668203	0					
ANR	3668561	IncDec	++		3668203	1					
ANR	3668562	ExpressionStatement	"fprintf ( out , ""\\t\\t%s;\\n"" , the_names [ nn ] . name )"	206:10:4889:4936	3668203	3	True				
ANR	3668563	CallExpression	"fprintf ( out , ""\\t\\t%s;\\n"" , the_names [ nn ] . name )"		3668203	0					
ANR	3668564	Callee	fprintf		3668203	0					
ANR	3668565	Identifier	fprintf		3668203	0					
ANR	3668566	ArgumentList	out		3668203	1					
ANR	3668567	Argument	out		3668203	0					
ANR	3668568	Identifier	out		3668203	0					
ANR	3668569	Argument	"""\\t\\t%s;\\n"""		3668203	1					
ANR	3668570	PrimaryExpression	"""\\t\\t%s;\\n"""		3668203	0					
ANR	3668571	Argument	the_names [ nn ] . name		3668203	2					
ANR	3668572	MemberAccess	the_names [ nn ] . name		3668203	0					
ANR	3668573	ArrayIndexing	the_names [ nn ]		3668203	0					
ANR	3668574	Identifier	the_names		3668203	0					
ANR	3668575	Identifier	nn		3668203	1					
ANR	3668576	Identifier	name		3668203	1					
ANR	3668577	ExpressionStatement	"fprintf ( out , ""\\tlocal:\\n\\t\\t*;\\n};\\n"" )"	207:8:4946:4986	3668203	2	True				
ANR	3668578	CallExpression	"fprintf ( out , ""\\tlocal:\\n\\t\\t*;\\n};\\n"" )"		3668203	0					
ANR	3668579	Callee	fprintf		3668203	0					
ANR	3668580	Identifier	fprintf		3668203	0					
ANR	3668581	ArgumentList	out		3668203	1					
ANR	3668582	Argument	out		3668203	0					
ANR	3668583	Identifier	out		3668203	0					
ANR	3668584	Argument	"""\\tlocal:\\n\\t\\t*;\\n};\\n"""		3668203	1					
ANR	3668585	PrimaryExpression	"""\\tlocal:\\n\\t\\t*;\\n};\\n"""		3668203	0					
ANR	3668586	BreakStatement	break ;	209:6:5002:5007	3668203	20	True				
ANR	3668587	Label	default :	211:4:5014:5021	3668203	21	True				
ANR	3668588	Identifier	default		3668203	0					
ANR	3668589	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		3668203	22					
ANR	3668590	ForInit	nn = 0 ;	212:12:5047:5053	3668203	0	True				
ANR	3668591	AssignmentExpression	nn = 0		3668203	0		=			
ANR	3668592	Identifier	nn		3668203	0					
ANR	3668593	PrimaryExpression	0		3668203	1					
ANR	3668594	Condition	nn < num_names	212:20:5055:5068	3668203	1	True				
ANR	3668595	RelationalExpression	nn < num_names		3668203	0		<			
ANR	3668596	Identifier	nn		3668203	0					
ANR	3668597	Identifier	num_names		3668203	1					
ANR	3668598	PostIncDecOperationExpression	nn ++	212:36:5071:5074	3668203	2	True				
ANR	3668599	Identifier	nn		3668203	0					
ANR	3668600	IncDec	++		3668203	1					
ANR	3668601	ExpressionStatement	"fprintf ( out , ""%s\\n"" , the_names [ nn ] . name )"	213:8:5086:5128	3668203	3	True				
ANR	3668602	CallExpression	"fprintf ( out , ""%s\\n"" , the_names [ nn ] . name )"		3668203	0					
ANR	3668603	Callee	fprintf		3668203	0					
ANR	3668604	Identifier	fprintf		3668203	0					
ANR	3668605	ArgumentList	out		3668203	1					
ANR	3668606	Argument	out		3668203	0					
ANR	3668607	Identifier	out		3668203	0					
ANR	3668608	Argument	"""%s\\n"""		3668203	1					
ANR	3668609	PrimaryExpression	"""%s\\n"""		3668203	0					
ANR	3668610	Argument	the_names [ nn ] . name		3668203	2					
ANR	3668611	MemberAccess	the_names [ nn ] . name		3668203	0					
ANR	3668612	ArrayIndexing	the_names [ nn ]		3668203	0					
ANR	3668613	Identifier	the_names		3668203	0					
ANR	3668614	Identifier	nn		3668203	1					
ANR	3668615	Identifier	name		3668203	1					
ANR	3668616	ReturnType	static void		3668203	1					
ANR	3668617	Identifier	names_dump		3668203	2					
ANR	3668618	ParameterList	"FILE * out , OutputFormat format , const char * dll_name"		3668203	3					
ANR	3668619	Parameter	FILE * out	128:12:2888:2904	3668203	0	True				
ANR	3668620	ParameterType	FILE *		3668203	0					
ANR	3668621	Identifier	out		3668203	1					
ANR	3668622	Parameter	OutputFormat format	129:12:2919:2938	3668203	1	True				
ANR	3668623	ParameterType	OutputFormat		3668203	0					
ANR	3668624	Identifier	format		3668203	1					
ANR	3668625	Parameter	const char * dll_name	130:12:2953:2974	3668203	2	True				
ANR	3668626	ParameterType	const char *		3668203	0					
ANR	3668627	Identifier	dll_name		3668203	1					
ANR	3668628	CFGEntryNode	ENTRY		3668203		True				
ANR	3668629	CFGExitNode	EXIT		3668203		True				
ANR	3668630	Symbol	nn		3668203						
ANR	3668631	Symbol	temp		3668203						
ANR	3668632	Symbol	* nn		3668203						
ANR	3668633	Symbol	format		3668203						
ANR	3668634	Symbol	dot		3668203						
ANR	3668635	Symbol	strchr		3668203						
ANR	3668636	Symbol	stderr		3668203						
ANR	3668637	Symbol	* temp		3668203						
ANR	3668638	Symbol	out		3668203						
ANR	3668639	Symbol	the_names		3668203						
ANR	3668640	Symbol	len		3668203						
ANR	3668641	Symbol	dll_name		3668203						
ANR	3668642	Symbol	* the_names		3668203						
ANR	3668643	Symbol	the_names [ nn ] . name		3668203						
ANR	3668644	Symbol	the_names [ num_names - 1 ] . name		3668203						
ANR	3668645	Symbol	* num_names		3668203						
ANR	3668646	Symbol	num_names		3668203						
ANR	3668647	Symbol	* len		3668203						
ANR	3668648	ClassDef	State_	222:8:5181:5348							
ANR	3668649	DeclStmt									
ANR	3668650	Decl							State_	State_	State
ANR	3668651	Function	read_header_file	229:0:5351:6959							
ANR	3668652	FunctionDef	"read_header_file (FILE * file , int verbose)"		3668651	0					
ANR	3668653	CompoundStatement		231:0:5408:6959	3668651	0					
ANR	3668654	Statement	static	232:2:5412:5417	3668651	0	True				
ANR	3668655	IdentifierDeclStatement	char buff [ LINEBUFF_SIZE + 1 ] ;	232:9:5419:5448	3668651	1	True				
ANR	3668656	IdentifierDecl	buff [ LINEBUFF_SIZE + 1 ]		3668651	0					
ANR	3668657	IdentifierDeclType	char [ LINEBUFF_SIZE + 1 ]		3668651	0					
ANR	3668658	Identifier	buff		3668651	1					
ANR	3668659	AdditiveExpression	LINEBUFF_SIZE + 1		3668651	2		+			
ANR	3668660	Identifier	LINEBUFF_SIZE		3668651	0					
ANR	3668661	PrimaryExpression	1		3668651	1					
ANR	3668662	IdentifierDeclStatement	State state = STATE_START ;	233:2:5452:5484	3668651	2	True				
ANR	3668663	IdentifierDecl	state = STATE_START		3668651	0					
ANR	3668664	IdentifierDeclType	State		3668651	0					
ANR	3668665	Identifier	state		3668651	1					
ANR	3668666	AssignmentExpression	state = STATE_START		3668651	2		=			
ANR	3668667	Identifier	STATE_START		3668651	0					
ANR	3668668	Identifier	STATE_START		3668651	1					
ANR	3668669	WhileStatement	while ( ! feof ( file ) )		3668651	3					
ANR	3668670	Condition	! feof ( file )	235:10:5497:5509	3668651	0	True				
ANR	3668671	UnaryOperationExpression	! feof ( file )		3668651	0					
ANR	3668672	UnaryOperator	!		3668651	0					
ANR	3668673	CallExpression	feof ( file )		3668651	1					
ANR	3668674	Callee	feof		3668651	0					
ANR	3668675	Identifier	feof		3668651	0					
ANR	3668676	ArgumentList	file		3668651	1					
ANR	3668677	Argument	file		3668651	0					
ANR	3668678	Identifier	file		3668651	0					
ANR	3668679	CompoundStatement		7:4:112:120	3668651	1					
ANR	3668680	IdentifierDeclStatement	char * p ;	237:4:5521:5529	3668651	0	True				
ANR	3668681	IdentifierDecl	* p		3668651	0					
ANR	3668682	IdentifierDeclType	char *		3668651	0					
ANR	3668683	Identifier	p		3668651	1					
ANR	3668684	IfStatement	"if ( ! fgets ( buff , LINEBUFF_SIZE , file ) )"		3668651	1					
ANR	3668685	Condition	"! fgets ( buff , LINEBUFF_SIZE , file )"	239:9:5541:5575	3668651	0	True				
ANR	3668686	UnaryOperationExpression	"! fgets ( buff , LINEBUFF_SIZE , file )"		3668651	0					
ANR	3668687	UnaryOperator	!		3668651	0					
ANR	3668688	CallExpression	"fgets ( buff , LINEBUFF_SIZE , file )"		3668651	1					
ANR	3668689	Callee	fgets		3668651	0					
ANR	3668690	Identifier	fgets		3668651	0					
ANR	3668691	ArgumentList	buff		3668651	1					
ANR	3668692	Argument	buff		3668651	0					
ANR	3668693	Identifier	buff		3668651	0					
ANR	3668694	Argument	LINEBUFF_SIZE		3668651	1					
ANR	3668695	Identifier	LINEBUFF_SIZE		3668651	0					
ANR	3668696	Argument	file		3668651	2					
ANR	3668697	Identifier	file		3668651	0					
ANR	3668698	BreakStatement	break ;	240:6:5585:5590	3668651	1	True				
ANR	3668699	ExpressionStatement	p = buff	242:4:5597:5605	3668651	2	True				
ANR	3668700	AssignmentExpression	p = buff		3668651	0		=			
ANR	3668701	Identifier	p		3668651	0					
ANR	3668702	Identifier	buff		3668651	1					
ANR	3668703	WhileStatement	while ( * p && ( * p == ' ' || * p == '\\\\' ) )		3668651	3					
ANR	3668704	Condition	* p && ( * p == ' ' || * p == '\\\\' )	244:12:5620:5650	3668651	0	True				
ANR	3668705	AndExpression	* p && ( * p == ' ' || * p == '\\\\' )		3668651	0		&&			
ANR	3668706	UnaryOperationExpression	* p		3668651	0					
ANR	3668707	UnaryOperator	*		3668651	0					
ANR	3668708	Identifier	p		3668651	1					
ANR	3668709	OrExpression	* p == ' ' || * p == '\\\\'		3668651	1		||			
ANR	3668710	EqualityExpression	* p == ' '		3668651	0		==			
ANR	3668711	UnaryOperationExpression	* p		3668651	0					
ANR	3668712	UnaryOperator	*		3668651	0					
ANR	3668713	Identifier	p		3668651	1					
ANR	3668714	PrimaryExpression	' '		3668651	1					
ANR	3668715	EqualityExpression	* p == '\\\\'		3668651	1		==			
ANR	3668716	UnaryOperationExpression	* p		3668651	0					
ANR	3668717	UnaryOperator	*		3668651	0					
ANR	3668718	Identifier	p		3668651	1					
ANR	3668719	PrimaryExpression	'\\\\'		3668651	1					
ANR	3668720	ExpressionStatement	p ++	245:6:5691:5694	3668651	1	True				
ANR	3668721	PostIncDecOperationExpression	p ++		3668651	0					
ANR	3668722	Identifier	p		3668651	0					
ANR	3668723	IncDec	++		3668651	1					
ANR	3668724	IfStatement	if ( * p == '\\n' || * p == '\\r' )		3668651	4					
ANR	3668725	Condition	* p == '\\n' || * p == '\\r'	247:9:5706:5729	3668651	0	True				
ANR	3668726	OrExpression	* p == '\\n' || * p == '\\r'		3668651	0		||			
ANR	3668727	EqualityExpression	* p == '\\n'		3668651	0		==			
ANR	3668728	UnaryOperationExpression	* p		3668651	0					
ANR	3668729	UnaryOperator	*		3668651	0					
ANR	3668730	Identifier	p		3668651	1					
ANR	3668731	PrimaryExpression	'\\n'		3668651	1					
ANR	3668732	EqualityExpression	* p == '\\r'		3668651	1		==			
ANR	3668733	UnaryOperationExpression	* p		3668651	0					
ANR	3668734	UnaryOperator	*		3668651	0					
ANR	3668735	Identifier	p		3668651	1					
ANR	3668736	PrimaryExpression	'\\r'		3668651	1					
ANR	3668737	ContinueStatement	continue ;	248:6:5763:5771	3668651	1	True				
ANR	3668738	SwitchStatement	switch ( state )		3668651	5					
ANR	3668739	Condition	state	250:13:5787:5791	3668651	0	True				
ANR	3668740	Identifier	state		3668651	0					
ANR	3668741	CompoundStatement		21:4:390:390	3668651	1					
ANR	3668742	Label	case STATE_START :	252:6:5807:5823	3668651	0	True				
ANR	3668743	Identifier	STATE_START		3668651	0					
ANR	3668744	CompoundStatement		23:8:424:424	3668651	1					
ANR	3668745	IfStatement	"if ( memcmp ( p , ""FT_EXPORT("" , 10 ) != 0 )"		3668651	0					
ANR	3668746	Condition	"memcmp ( p , ""FT_EXPORT("" , 10 ) != 0"	254:15:5850:5883	3668651	0	True				
ANR	3668747	EqualityExpression	"memcmp ( p , ""FT_EXPORT("" , 10 ) != 0"		3668651	0		!=			
ANR	3668748	CallExpression	"memcmp ( p , ""FT_EXPORT("" , 10 )"		3668651	0					
ANR	3668749	Callee	memcmp		3668651	0					
ANR	3668750	Identifier	memcmp		3668651	0					
ANR	3668751	ArgumentList	p		3668651	1					
ANR	3668752	Argument	p		3668651	0					
ANR	3668753	Identifier	p		3668651	0					
ANR	3668754	Argument	"""FT_EXPORT("""		3668651	1					
ANR	3668755	PrimaryExpression	"""FT_EXPORT("""		3668651	0					
ANR	3668756	Argument	10		3668651	2					
ANR	3668757	PrimaryExpression	10		3668651	0					
ANR	3668758	PrimaryExpression	0		3668651	1					
ANR	3668759	BreakStatement	break ;	255:12:5899:5904	3668651	1	True				
ANR	3668760	ExpressionStatement	p += 10	257:10:5917:5924	3668651	1	True				
ANR	3668761	AssignmentExpression	p += 10		3668651	0		+=			
ANR	3668762	Identifier	p		3668651	0					
ANR	3668763	PrimaryExpression	10		3668651	1					
ANR	3668764	ForStatement	for ( ; ; )		3668651	2					
ANR	3668765	CompoundStatement		29:10:546:546	3668651	0					
ANR	3668766	IfStatement	if ( * p == 0 || * p == '\\n' || * p == '\\r' )		3668651	0					
ANR	3668767	Condition	* p == 0 || * p == '\\n' || * p == '\\r'	260:17:5974:6008	3668651	0	True				
ANR	3668768	OrExpression	* p == 0 || * p == '\\n' || * p == '\\r'		3668651	0		||			
ANR	3668769	EqualityExpression	* p == 0		3668651	0		==			
ANR	3668770	UnaryOperationExpression	* p		3668651	0					
ANR	3668771	UnaryOperator	*		3668651	0					
ANR	3668772	Identifier	p		3668651	1					
ANR	3668773	PrimaryExpression	0		3668651	1					
ANR	3668774	OrExpression	* p == '\\n' || * p == '\\r'		3668651	1		||			
ANR	3668775	EqualityExpression	* p == '\\n'		3668651	0		==			
ANR	3668776	UnaryOperationExpression	* p		3668651	0					
ANR	3668777	UnaryOperator	*		3668651	0					
ANR	3668778	Identifier	p		3668651	1					
ANR	3668779	PrimaryExpression	'\\n'		3668651	1					
ANR	3668780	EqualityExpression	* p == '\\r'		3668651	1		==			
ANR	3668781	UnaryOperationExpression	* p		3668651	0					
ANR	3668782	UnaryOperator	*		3668651	0					
ANR	3668783	Identifier	p		3668651	1					
ANR	3668784	PrimaryExpression	'\\r'		3668651	1					
ANR	3668785	GotoStatement	goto NextLine ;	261:14:6026:6039	3668651	1	True				
ANR	3668786	Identifier	NextLine		3668651	0					
ANR	3668787	IfStatement	if ( * p == ')' )		3668651	1					
ANR	3668788	Condition	* p == ')'	263:17:6059:6067	3668651	0	True				
ANR	3668789	EqualityExpression	* p == ')'		3668651	0		==			
ANR	3668790	UnaryOperationExpression	* p		3668651	0					
ANR	3668791	UnaryOperator	*		3668651	0					
ANR	3668792	Identifier	p		3668651	1					
ANR	3668793	PrimaryExpression	')'		3668651	1					
ANR	3668794	CompoundStatement		34:12:674:674	3668651	1					
ANR	3668795	ExpressionStatement	p ++	265:14:6099:6102	3668651	0	True				
ANR	3668796	PostIncDecOperationExpression	p ++		3668651	0					
ANR	3668797	Identifier	p		3668651	0					
ANR	3668798	IncDec	++		3668651	1					
ANR	3668799	BreakStatement	break ;	266:14:6118:6123	3668651	1	True				
ANR	3668800	ExpressionStatement	p ++	269:12:6152:6155	3668651	2	True				
ANR	3668801	PostIncDecOperationExpression	p ++		3668651	0					
ANR	3668802	Identifier	p		3668651	0					
ANR	3668803	IncDec	++		3668651	1					
ANR	3668804	ExpressionStatement	state = STATE_TYPE	272:10:6180:6198	3668651	3	True				
ANR	3668805	AssignmentExpression	state = STATE_TYPE		3668651	0		=			
ANR	3668806	Identifier	state		3668651	0					
ANR	3668807	Identifier	STATE_TYPE		3668651	1					
ANR	3668808	WhileStatement	while ( * p == ' ' || * p == '\\t' )		3668651	4					
ANR	3668809	Condition	* p == ' ' || * p == '\\t'	278:18:6396:6418	3668651	0	True				
ANR	3668810	OrExpression	* p == ' ' || * p == '\\t'		3668651	0		||			
ANR	3668811	EqualityExpression	* p == ' '		3668651	0		==			
ANR	3668812	UnaryOperationExpression	* p		3668651	0					
ANR	3668813	UnaryOperator	*		3668651	0					
ANR	3668814	Identifier	p		3668651	1					
ANR	3668815	PrimaryExpression	' '		3668651	1					
ANR	3668816	EqualityExpression	* p == '\\t'		3668651	1		==			
ANR	3668817	UnaryOperationExpression	* p		3668651	0					
ANR	3668818	UnaryOperator	*		3668651	0					
ANR	3668819	Identifier	p		3668651	1					
ANR	3668820	PrimaryExpression	'\\t'		3668651	1					
ANR	3668821	ExpressionStatement	p ++	279:12:6434:6437	3668651	1	True				
ANR	3668822	PostIncDecOperationExpression	p ++		3668651	0					
ANR	3668823	Identifier	p		3668651	0					
ANR	3668824	IncDec	++		3668651	1					
ANR	3668825	IfStatement	if ( ! isalpha ( * p ) )		3668651	5					
ANR	3668826	Condition	! isalpha ( * p )	281:15:6455:6466	3668651	0	True				
ANR	3668827	UnaryOperationExpression	! isalpha ( * p )		3668651	0					
ANR	3668828	UnaryOperator	!		3668651	0					
ANR	3668829	CallExpression	isalpha ( * p )		3668651	1					
ANR	3668830	Callee	isalpha		3668651	0					
ANR	3668831	Identifier	isalpha		3668651	0					
ANR	3668832	ArgumentList	* p		3668651	1					
ANR	3668833	Argument	* p		3668651	0					
ANR	3668834	UnaryOperationExpression	* p		3668651	0					
ANR	3668835	UnaryOperator	*		3668651	0					
ANR	3668836	Identifier	p		3668651	1					
ANR	3668837	BreakStatement	break ;	282:12:6482:6487	3668651	1	True				
ANR	3668838	Label	case STATE_TYPE :	286:6:6533:6548	3668651	2	True				
ANR	3668839	Identifier	STATE_TYPE		3668651	0					
ANR	3668840	CompoundStatement		58:10:1161:1177	3668651	3					
ANR	3668841	IdentifierDeclStatement	char * name = p ;	288:10:6570:6586	3668651	0	True				
ANR	3668842	IdentifierDecl	* name = p		3668651	0					
ANR	3668843	IdentifierDeclType	char *		3668651	0					
ANR	3668844	Identifier	name		3668651	1					
ANR	3668845	AssignmentExpression	* name = p		3668651	2		=			
ANR	3668846	Identifier	p		3668651	0					
ANR	3668847	Identifier	p		3668651	1					
ANR	3668848	WhileStatement	while ( isalnum ( * p ) || * p == '_' )		3668651	1					
ANR	3668849	Condition	isalnum ( * p ) || * p == '_'	290:18:6607:6630	3668651	0	True				
ANR	3668850	OrExpression	isalnum ( * p ) || * p == '_'		3668651	0		||			
ANR	3668851	CallExpression	isalnum ( * p )		3668651	0					
ANR	3668852	Callee	isalnum		3668651	0					
ANR	3668853	Identifier	isalnum		3668651	0					
ANR	3668854	ArgumentList	* p		3668651	1					
ANR	3668855	Argument	* p		3668651	0					
ANR	3668856	UnaryOperationExpression	* p		3668651	0					
ANR	3668857	UnaryOperator	*		3668651	0					
ANR	3668858	Identifier	p		3668651	1					
ANR	3668859	EqualityExpression	* p == '_'		3668651	1		==			
ANR	3668860	UnaryOperationExpression	* p		3668651	0					
ANR	3668861	UnaryOperator	*		3668651	0					
ANR	3668862	Identifier	p		3668651	1					
ANR	3668863	PrimaryExpression	'_'		3668651	1					
ANR	3668864	ExpressionStatement	p ++	291:12:6646:6649	3668651	1	True				
ANR	3668865	PostIncDecOperationExpression	p ++		3668651	0					
ANR	3668866	Identifier	p		3668651	0					
ANR	3668867	IncDec	++		3668651	1					
ANR	3668868	IfStatement	if ( p > name )		3668651	2					
ANR	3668869	Condition	p > name	293:15:6667:6674	3668651	0	True				
ANR	3668870	RelationalExpression	p > name		3668651	0		>			
ANR	3668871	Identifier	p		3668651	0					
ANR	3668872	Identifier	name		3668651	1					
ANR	3668873	CompoundStatement		64:10:1279:1279	3668651	1					
ANR	3668874	IfStatement	if ( verbose )		3668651	0					
ANR	3668875	Condition	verbose	295:17:6707:6713	3668651	0	True				
ANR	3668876	Identifier	verbose		3668651	0					
ANR	3668877	ExpressionStatement	"fprintf ( stderr , "">>> %.*s\\n"" , ( int ) ( p - name ) , name )"	296:14:6731:6785	3668651	1	True				
ANR	3668878	CallExpression	"fprintf ( stderr , "">>> %.*s\\n"" , ( int ) ( p - name ) , name )"		3668651	0					
ANR	3668879	Callee	fprintf		3668651	0					
ANR	3668880	Identifier	fprintf		3668651	0					
ANR	3668881	ArgumentList	stderr		3668651	1					
ANR	3668882	Argument	stderr		3668651	0					
ANR	3668883	Identifier	stderr		3668651	0					
ANR	3668884	Argument	""">>> %.*s\\n"""		3668651	1					
ANR	3668885	PrimaryExpression	""">>> %.*s\\n"""		3668651	0					
ANR	3668886	Argument	( int ) ( p - name )		3668651	2					
ANR	3668887	CastExpression	( int ) ( p - name )		3668651	0					
ANR	3668888	CastTarget	int		3668651	0					
ANR	3668889	AdditiveExpression	p - name		3668651	1		-			
ANR	3668890	Identifier	p		3668651	0					
ANR	3668891	Identifier	name		3668651	1					
ANR	3668892	Argument	name		3668651	3					
ANR	3668893	Identifier	name		3668651	0					
ANR	3668894	ExpressionStatement	"names_add ( name , p )"	298:12:6800:6820	3668651	1	True				
ANR	3668895	CallExpression	"names_add ( name , p )"		3668651	0					
ANR	3668896	Callee	names_add		3668651	0					
ANR	3668897	Identifier	names_add		3668651	0					
ANR	3668898	ArgumentList	name		3668651	1					
ANR	3668899	Argument	name		3668651	0					
ANR	3668900	Identifier	name		3668651	0					
ANR	3668901	Argument	p		3668651	1					
ANR	3668902	Identifier	p		3668651	0					
ANR	3668903	ExpressionStatement	state = STATE_START	301:10:6845:6864	3668651	3	True				
ANR	3668904	AssignmentExpression	state = STATE_START		3668651	0		=			
ANR	3668905	Identifier	state		3668651	0					
ANR	3668906	Identifier	STATE_START		3668651	1					
ANR	3668907	BreakStatement	break ;	303:8:6884:6889	3668651	4	True				
ANR	3668908	Label	default :	305:6:6898:6905	3668651	5	True				
ANR	3668909	Identifier	default		3668651	0					
ANR	3668910	ExpressionStatement		306:8:6915:6915	3668651	6	True				
ANR	3668911	Label	NextLine :	309:2:6926:6934	3668651	6	True				
ANR	3668912	Identifier	NextLine		3668651	0					
ANR	3668913	ExpressionStatement		310:4:6940:6940	3668651	7	True				
ANR	3668914	ReturnStatement	return 0 ;	313:2:6949:6957	3668651	4	True				
ANR	3668915	PrimaryExpression	0		3668651	0					
ANR	3668916	ReturnType	static int		3668651	1					
ANR	3668917	Identifier	read_header_file		3668651	2					
ANR	3668918	ParameterList	"FILE * file , int verbose"		3668651	3					
ANR	3668919	Parameter	FILE * file	230:18:5380:5390	3668651	0	True				
ANR	3668920	ParameterType	FILE *		3668651	0					
ANR	3668921	Identifier	file		3668651	1					
ANR	3668922	Parameter	int verbose	230:31:5393:5404	3668651	1	True				
ANR	3668923	ParameterType	int		3668651	0					
ANR	3668924	Identifier	verbose		3668651	1					
ANR	3668925	CFGEntryNode	ENTRY		3668651		True				
ANR	3668926	CFGExitNode	EXIT		3668651		True				
ANR	3668927	InfiniteForNode	true		3668651		True				
ANR	3668928	Symbol	LINEBUFF_SIZE		3668651						
ANR	3668929	Symbol	isalpha		3668651						
ANR	3668930	Symbol	isalnum		3668651						
ANR	3668931	Symbol	stderr		3668651						
ANR	3668932	Symbol	fgets		3668651						
ANR	3668933	Symbol	verbose		3668651						
ANR	3668934	Symbol	p		3668651						
ANR	3668935	Symbol	STATE_START		3668651						
ANR	3668936	Symbol	file		3668651						
ANR	3668937	Symbol	memcmp		3668651						
ANR	3668938	Symbol	STATE_TYPE		3668651						
ANR	3668939	Symbol	name		3668651						
ANR	3668940	Symbol	feof		3668651						
ANR	3668941	Symbol	* p		3668651						
ANR	3668942	Symbol	state		3668651						
ANR	3668943	Symbol	buff		3668651						
ANR	3668944	Function	usage	317:0:6963:8101							
ANR	3668945	FunctionDef	usage ()		3668944	0					
ANR	3668946	CompoundStatement		319:0:6989:8101	3668944	0					
ANR	3668947	Statement	static	320:2:6993:6998	3668944	0	True				
ANR	3668948	Statement	const	320:9:7000:7004	3668944	1	True				
ANR	3668949	Statement	char	320:15:7006:7009	3668944	2	True				
ANR	3668950	Statement	*	320:19:7010:7010	3668944	3	True				
ANR	3668951	Statement	const	320:21:7012:7016	3668944	4	True				
ANR	3668952	Statement	format	320:28:7019:7024	3668944	5	True				
ANR	3668953	Statement	=	320:35:7026:7026	3668944	6	True				
ANR	3668954	Statement	"""%s %s: extract FreeType API names from header files\\n\\n"""	321:3:7031:7087	3668944	7	True				
ANR	3668955	Statement	"""this program is used to extract the list of public FreeType API\\n"""	322:3:7092:7158	3668944	8	True				
ANR	3668956	Statement	"""functions. It receives the list of header files as argument and\\n"""	323:3:7163:7229	3668944	9	True				
ANR	3668957	Statement	"""generates a sorted list of unique identifiers\\n\\n"""	324:3:7234:7284	3668944	10	True				
ANR	3668958	Statement	"""usage: %s header1 [options] [header2 ...]\\n\\n"""	326:3:7290:7336	3668944	11	True				
ANR	3668959	Statement	"""options:   -      : parse the content of stdin, ignore arguments\\n"""	328:3:7342:7409	3668944	12	True				
ANR	3668960	Statement	"""           -v     : verbose mode, output sent to standard error\\n"""	329:3:7414:7480	3668944	13	True				
ANR	3668961	Statement	"""           -oFILE : write output to FILE instead of standard output\\n"""	330:3:7485:7555	3668944	14	True				
ANR	3668962	Statement	"""           -dNAME : indicate DLL file name, 'freetype.dll' by default\\n"""	331:3:7560:7632	3668944	15	True				
ANR	3668963	Statement	"""           -w     : output .DEF file for Visual C++ and Mingw\\n"""	332:3:7637:7701	3668944	16	True				
ANR	3668964	Statement	"""           -wB    : output .DEF file for Borland C++\\n"""	333:3:7706:7761	3668944	17	True				
ANR	3668965	Statement	"""           -wW    : output Watcom Linker Response File\\n"""	334:3:7766:7823	3668944	18	True				
ANR	3668966	Statement	"""           -wN    : output NetWare Import File\\n"""	335:3:7828:7877	3668944	19	True				
ANR	3668967	Statement	"""           -wL    : output version map for GNU or Solaris linker\\n"""	336:3:7882:7949	3668944	20	True				
ANR	3668968	ExpressionStatement	"""\\n"""	337:3:7954:7958	3668944	21	True				
ANR	3668969	PrimaryExpression	"""\\n"""		3668944	0					
ANR	3668970	ExpressionStatement	"fprintf ( stderr , format , PROGRAM_NAME , PROGRAM_VERSION , PROGRAM_NAME )"	339:2:7963:8088	3668944	22	True				
ANR	3668971	CallExpression	"fprintf ( stderr , format , PROGRAM_NAME , PROGRAM_VERSION , PROGRAM_NAME )"		3668944	0					
ANR	3668972	Callee	fprintf		3668944	0					
ANR	3668973	Identifier	fprintf		3668944	0					
ANR	3668974	ArgumentList	stderr		3668944	1					
ANR	3668975	Argument	stderr		3668944	0					
ANR	3668976	Identifier	stderr		3668944	0					
ANR	3668977	Argument	format		3668944	1					
ANR	3668978	Identifier	format		3668944	0					
ANR	3668979	Argument	PROGRAM_NAME		3668944	2					
ANR	3668980	Identifier	PROGRAM_NAME		3668944	0					
ANR	3668981	Argument	PROGRAM_VERSION		3668944	3					
ANR	3668982	Identifier	PROGRAM_VERSION		3668944	0					
ANR	3668983	Argument	PROGRAM_NAME		3668944	4					
ANR	3668984	Identifier	PROGRAM_NAME		3668944	0					
ANR	3668985	ExpressionStatement	exit ( 1 )	345:2:8092:8099	3668944	23	True				
ANR	3668986	CallExpression	exit ( 1 )		3668944	0					
ANR	3668987	Callee	exit		3668944	0					
ANR	3668988	Identifier	exit		3668944	0					
ANR	3668989	ArgumentList	1		3668944	1					
ANR	3668990	Argument	1		3668944	0					
ANR	3668991	PrimaryExpression	1		3668944	0					
ANR	3668992	ReturnType	static void		3668944	1					
ANR	3668993	Identifier	usage		3668944	2					
ANR	3668994	ParameterList			3668944	3					
ANR	3668995	CFGEntryNode	ENTRY		3668944		True				
ANR	3668996	CFGExitNode	EXIT		3668944		True				
ANR	3668997	Symbol	PROGRAM_VERSION		3668944						
ANR	3668998	Symbol	PROGRAM_NAME		3668944						
ANR	3668999	Symbol	format		3668944						
ANR	3669000	Symbol	stderr		3668944						
ANR	3669001	DeclStmt									
ANR	3669002	Decl							int	int	from_stdin
ANR	3669003	DeclStmt									
ANR	3669004	Decl							int	int	verbose
ANR	3669005	DeclStmt									
ANR	3669006	Decl							OutputFormat	OutputFormat	format
ANR	3669007	DeclStmt									
ANR	3669008	Decl							FILE	FILE *	out
ANR	3669009	DeclStmt									
ANR	3669010	Decl							const char	const char *	library_name
ANR	3669011	DeclStmt									
ANR	3669012	Decl							const char	const char *	arg
ANR	3669013	DeclStmt									
ANR	3669014	Decl							FILE	FILE *	file
