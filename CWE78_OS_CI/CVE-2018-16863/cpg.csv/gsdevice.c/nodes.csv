command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5041525	File	data/converged/CVE-2018-16863_ghostpdl/gsdevice.c								
ANR	5041526	Function	gx_device_finalize	48:0:1475:3743							
ANR	5041527	FunctionDef	"gx_device_finalize (const gs_memory_t * cmem , void * vptr)"		5041526	0					
ANR	5041528	CompoundStatement		50:0:1536:3743	5041526	0					
ANR	5041529	Statement	gx_device	51:4:1542:1550	5041526	0	True				
ANR	5041530	Statement	*	51:14:1552:1552	5041526	1	True				
ANR	5041531	Statement	const	51:16:1554:1558	5041526	2	True				
ANR	5041532	ExpressionStatement	dev = ( gx_device * ) vptr	51:22:1560:1583	5041526	3	True				
ANR	5041533	AssignmentExpression	dev = ( gx_device * ) vptr		5041526	0		=			
ANR	5041534	Identifier	dev		5041526	0					
ANR	5041535	CastExpression	( gx_device * ) vptr		5041526	1					
ANR	5041536	CastTarget	gx_device *		5041526	0					
ANR	5041537	Identifier	vptr		5041526	1					
ANR	5041538	ExpressionStatement	( void ) cmem	52:4:1589:1599	5041526	4	True				
ANR	5041539	CastExpression	( void ) cmem		5041526	0					
ANR	5041540	CastTarget	void		5041526	0					
ANR	5041541	Identifier	cmem		5041526	1					
ANR	5041542	IfStatement	if ( dev -> icc_struct != NULL )		5041526	5					
ANR	5041543	Condition	dev -> icc_struct != NULL	54:8:1623:1645	5041526	0	True				
ANR	5041544	EqualityExpression	dev -> icc_struct != NULL		5041526	0		!=			
ANR	5041545	PtrMemberAccess	dev -> icc_struct		5041526	0					
ANR	5041546	Identifier	dev		5041526	0					
ANR	5041547	Identifier	icc_struct		5041526	1					
ANR	5041548	Identifier	NULL		5041526	1					
ANR	5041549	CompoundStatement		5:33:111:111	5041526	1					
ANR	5041550	ExpressionStatement	"rc_decrement ( dev -> icc_struct , ""gx_device_finalize(icc_profile)"" )"	55:8:1658:1722	5041526	0	True				
ANR	5041551	CallExpression	"rc_decrement ( dev -> icc_struct , ""gx_device_finalize(icc_profile)"" )"		5041526	0					
ANR	5041552	Callee	rc_decrement		5041526	0					
ANR	5041553	Identifier	rc_decrement		5041526	0					
ANR	5041554	ArgumentList	dev -> icc_struct		5041526	1					
ANR	5041555	Argument	dev -> icc_struct		5041526	0					
ANR	5041556	PtrMemberAccess	dev -> icc_struct		5041526	0					
ANR	5041557	Identifier	dev		5041526	0					
ANR	5041558	Identifier	icc_struct		5041526	1					
ANR	5041559	Argument	"""gx_device_finalize(icc_profile)"""		5041526	1					
ANR	5041560	PrimaryExpression	"""gx_device_finalize(icc_profile)"""		5041526	0					
ANR	5041561	IfStatement	if ( dev -> finalize )		5041526	6					
ANR	5041562	Condition	dev -> finalize	57:8:1738:1750	5041526	0	True				
ANR	5041563	PtrMemberAccess	dev -> finalize		5041526	0					
ANR	5041564	Identifier	dev		5041526	0					
ANR	5041565	Identifier	finalize		5041526	1					
ANR	5041566	ExpressionStatement	dev -> finalize ( dev )	58:8:1761:1779	5041526	1	True				
ANR	5041567	CallExpression	dev -> finalize ( dev )		5041526	0					
ANR	5041568	Callee	dev -> finalize		5041526	0					
ANR	5041569	PtrMemberAccess	dev -> finalize		5041526	0					
ANR	5041570	Identifier	dev		5041526	0					
ANR	5041571	Identifier	finalize		5041526	1					
ANR	5041572	ArgumentList	dev		5041526	1					
ANR	5041573	Argument	dev		5041526	0					
ANR	5041574	Identifier	dev		5041526	0					
ANR	5041575	IfStatement	if ( dev -> child )		5041526	7					
ANR	5041576	Condition	dev -> child	65:8:2104:2113	5041526	0	True				
ANR	5041577	PtrMemberAccess	dev -> child		5041526	0					
ANR	5041578	Identifier	dev		5041526	0					
ANR	5041579	Identifier	child		5041526	1					
ANR	5041580	ExpressionStatement	dev -> child -> parent = dev -> parent	66:8:2124:2156	5041526	1	True				
ANR	5041581	AssignmentExpression	dev -> child -> parent = dev -> parent		5041526	0		=			
ANR	5041582	PtrMemberAccess	dev -> child -> parent		5041526	0					
ANR	5041583	PtrMemberAccess	dev -> child		5041526	0					
ANR	5041584	Identifier	dev		5041526	0					
ANR	5041585	Identifier	child		5041526	1					
ANR	5041586	Identifier	parent		5041526	1					
ANR	5041587	PtrMemberAccess	dev -> parent		5041526	1					
ANR	5041588	Identifier	dev		5041526	0					
ANR	5041589	Identifier	parent		5041526	1					
ANR	5041590	IfStatement	if ( dev -> parent )		5041526	8					
ANR	5041591	Condition	dev -> parent	67:8:2166:2176	5041526	0	True				
ANR	5041592	PtrMemberAccess	dev -> parent		5041526	0					
ANR	5041593	Identifier	dev		5041526	0					
ANR	5041594	Identifier	parent		5041526	1					
ANR	5041595	ExpressionStatement	dev -> parent -> child = dev -> child	68:8:2187:2218	5041526	1	True				
ANR	5041596	AssignmentExpression	dev -> parent -> child = dev -> child		5041526	0		=			
ANR	5041597	PtrMemberAccess	dev -> parent -> child		5041526	0					
ANR	5041598	PtrMemberAccess	dev -> parent		5041526	0					
ANR	5041599	Identifier	dev		5041526	0					
ANR	5041600	Identifier	parent		5041526	1					
ANR	5041601	Identifier	child		5041526	1					
ANR	5041602	PtrMemberAccess	dev -> child		5041526	1					
ANR	5041603	Identifier	dev		5041526	0					
ANR	5041604	Identifier	child		5041526	1					
ANR	5041605	IfStatement	if ( dev -> PageList )		5041526	9					
ANR	5041606	Condition	dev -> PageList	69:8:2228:2240	5041526	0	True				
ANR	5041607	PtrMemberAccess	dev -> PageList		5041526	0					
ANR	5041608	Identifier	dev		5041526	0					
ANR	5041609	Identifier	PageList		5041526	1					
ANR	5041610	CompoundStatement		20:23:706:706	5041526	1					
ANR	5041611	ExpressionStatement	"rc_decrement ( dev -> PageList , ""gx_device_finalize(PageList)"" )"	70:8:2253:2312	5041526	0	True				
ANR	5041612	CallExpression	"rc_decrement ( dev -> PageList , ""gx_device_finalize(PageList)"" )"		5041526	0					
ANR	5041613	Callee	rc_decrement		5041526	0					
ANR	5041614	Identifier	rc_decrement		5041526	0					
ANR	5041615	ArgumentList	dev -> PageList		5041526	1					
ANR	5041616	Argument	dev -> PageList		5041526	0					
ANR	5041617	PtrMemberAccess	dev -> PageList		5041526	0					
ANR	5041618	Identifier	dev		5041526	0					
ANR	5041619	Identifier	PageList		5041526	1					
ANR	5041620	Argument	"""gx_device_finalize(PageList)"""		5041526	1					
ANR	5041621	PrimaryExpression	"""gx_device_finalize(PageList)"""		5041526	0					
ANR	5041622	ExpressionStatement	dev -> PageList = 0	71:8:2322:2339	5041526	1	True				
ANR	5041623	AssignmentExpression	dev -> PageList = 0		5041526	0		=			
ANR	5041624	PtrMemberAccess	dev -> PageList		5041526	0					
ANR	5041625	Identifier	dev		5041526	0					
ANR	5041626	Identifier	PageList		5041526	1					
ANR	5041627	PrimaryExpression	0		5041526	1					
ANR	5041628	ExpressionStatement	discard ( gs_closedevice ( dev ) )	74:4:2352:2380	5041526	10	True				
ANR	5041629	CallExpression	discard ( gs_closedevice ( dev ) )		5041526	0					
ANR	5041630	Callee	discard		5041526	0					
ANR	5041631	Identifier	discard		5041526	0					
ANR	5041632	ArgumentList	gs_closedevice ( dev )		5041526	1					
ANR	5041633	Argument	gs_closedevice ( dev )		5041526	0					
ANR	5041634	CallExpression	gs_closedevice ( dev )		5041526	0					
ANR	5041635	Callee	gs_closedevice		5041526	0					
ANR	5041636	Identifier	gs_closedevice		5041526	0					
ANR	5041637	ArgumentList	dev		5041526	1					
ANR	5041638	Argument	dev		5041526	0					
ANR	5041639	Identifier	dev		5041526	0					
ANR	5041640	IfStatement	if ( dev -> stype_is_dynamic )		5041526	11					
ANR	5041641	Condition	dev -> stype_is_dynamic	75:8:2390:2410	5041526	0	True				
ANR	5041642	PtrMemberAccess	dev -> stype_is_dynamic		5041526	0					
ANR	5041643	Identifier	dev		5041526	0					
ANR	5041644	Identifier	stype_is_dynamic		5041526	1					
ANR	5041645	ExpressionStatement	"gs_free_const_object ( dev -> memory -> non_gc_memory , dev -> stype , ""gx_device_finalize"" )"	76:8:2421:2532	5041526	1	True				
ANR	5041646	CallExpression	"gs_free_const_object ( dev -> memory -> non_gc_memory , dev -> stype , ""gx_device_finalize"" )"		5041526	0					
ANR	5041647	Callee	gs_free_const_object		5041526	0					
ANR	5041648	Identifier	gs_free_const_object		5041526	0					
ANR	5041649	ArgumentList	dev -> memory -> non_gc_memory		5041526	1					
ANR	5041650	Argument	dev -> memory -> non_gc_memory		5041526	0					
ANR	5041651	PtrMemberAccess	dev -> memory -> non_gc_memory		5041526	0					
ANR	5041652	PtrMemberAccess	dev -> memory		5041526	0					
ANR	5041653	Identifier	dev		5041526	0					
ANR	5041654	Identifier	memory		5041526	1					
ANR	5041655	Identifier	non_gc_memory		5041526	1					
ANR	5041656	Argument	dev -> stype		5041526	1					
ANR	5041657	PtrMemberAccess	dev -> stype		5041526	0					
ANR	5041658	Identifier	dev		5041526	0					
ANR	5041659	Identifier	stype		5041526	1					
ANR	5041660	Argument	"""gx_device_finalize"""		5041526	2					
ANR	5041661	PrimaryExpression	"""gx_device_finalize"""		5041526	0					
ANR	5041662	IfStatement	if ( gs_debug_c ( '^' ) )		5041526	12					
ANR	5041663	Condition	gs_debug_c ( '^' )	97:8:3688:3702	5041526	0	True				
ANR	5041664	CallExpression	gs_debug_c ( '^' )		5041526	0					
ANR	5041665	Callee	gs_debug_c		5041526	0					
ANR	5041666	Identifier	gs_debug_c		5041526	0					
ANR	5041667	ArgumentList	'^'		5041526	1					
ANR	5041668	Argument	'^'		5041526	0					
ANR	5041669	PrimaryExpression	'^'		5041526	0					
ANR	5041670	ExpressionStatement	dev -> rc . memory = NULL	98:8:3713:3734	5041526	1	True				
ANR	5041671	AssignmentExpression	dev -> rc . memory = NULL		5041526	0		=			
ANR	5041672	MemberAccess	dev -> rc . memory		5041526	0					
ANR	5041673	PtrMemberAccess	dev -> rc		5041526	0					
ANR	5041674	Identifier	dev		5041526	0					
ANR	5041675	Identifier	rc		5041526	1					
ANR	5041676	Identifier	memory		5041526	1					
ANR	5041677	Identifier	NULL		5041526	1					
ANR	5041678	ReturnType	void		5041526	1					
ANR	5041679	Identifier	gx_device_finalize		5041526	2					
ANR	5041680	ParameterList	"const gs_memory_t * cmem , void * vptr"		5041526	3					
ANR	5041681	Parameter	const gs_memory_t * cmem	49:19:1499:1521	5041526	0	True				
ANR	5041682	ParameterType	const gs_memory_t *		5041526	0					
ANR	5041683	Identifier	cmem		5041526	1					
ANR	5041684	Parameter	void * vptr	49:44:1524:1533	5041526	1	True				
ANR	5041685	ParameterType	void *		5041526	0					
ANR	5041686	Identifier	vptr		5041526	1					
ANR	5041687	CFGEntryNode	ENTRY		5041526		True				
ANR	5041688	CFGExitNode	EXIT		5041526		True				
ANR	5041689	Symbol	* dev		5041526						
ANR	5041690	Symbol	* dev -> parent		5041526						
ANR	5041691	Symbol	dev -> stype_is_dynamic		5041526						
ANR	5041692	Symbol	NULL		5041526						
ANR	5041693	Symbol	dev -> child		5041526						
ANR	5041694	Symbol	* * dev		5041526						
ANR	5041695	Symbol	dev -> memory -> non_gc_memory		5041526						
ANR	5041696	Symbol	dev -> stype		5041526						
ANR	5041697	Symbol	dev -> parent		5041526						
ANR	5041698	Symbol	vptr		5041526						
ANR	5041699	Symbol	* dev -> child		5041526						
ANR	5041700	Symbol	dev -> memory		5041526						
ANR	5041701	Symbol	dev		5041526						
ANR	5041702	Symbol	dev -> rc		5041526						
ANR	5041703	Symbol	dev -> icc_struct		5041526						
ANR	5041704	Symbol	dev -> child -> parent		5041526						
ANR	5041705	Symbol	dev -> parent -> child		5041526						
ANR	5041706	Symbol	dev -> PageList		5041526						
ANR	5041707	Symbol	gs_debug_c		5041526						
ANR	5041708	Symbol	cmem		5041526						
ANR	5041709	Symbol	dev -> finalize		5041526						
ANR	5041710	Symbol	dev -> rc . memory		5041526						
ANR	5041711	Symbol	gs_closedevice		5041526						
ANR	5041712	Symbol	* dev -> memory		5041526						
ANR	5041713	Function	gx_device_free_local	103:0:3818:3904							
ANR	5041714	FunctionDef	gx_device_free_local (gx_device * dev)		5041713	0					
ANR	5041715	CompoundStatement		105:0:3860:3904	5041713	0					
ANR	5041716	ExpressionStatement	"gx_device_finalize ( dev -> memory , dev )"	106:4:3866:3902	5041713	0	True				
ANR	5041717	CallExpression	"gx_device_finalize ( dev -> memory , dev )"		5041713	0					
ANR	5041718	Callee	gx_device_finalize		5041713	0					
ANR	5041719	Identifier	gx_device_finalize		5041713	0					
ANR	5041720	ArgumentList	dev -> memory		5041713	1					
ANR	5041721	Argument	dev -> memory		5041713	0					
ANR	5041722	PtrMemberAccess	dev -> memory		5041713	0					
ANR	5041723	Identifier	dev		5041713	0					
ANR	5041724	Identifier	memory		5041713	1					
ANR	5041725	Argument	dev		5041713	1					
ANR	5041726	Identifier	dev		5041713	0					
ANR	5041727	ReturnType	void		5041713	1					
ANR	5041728	Identifier	gx_device_free_local		5041713	2					
ANR	5041729	ParameterList	gx_device * dev		5041713	3					
ANR	5041730	Parameter	gx_device * dev	104:21:3844:3857	5041713	0	True				
ANR	5041731	ParameterType	gx_device *		5041713	0					
ANR	5041732	Identifier	dev		5041713	1					
ANR	5041733	CFGEntryNode	ENTRY		5041713		True				
ANR	5041734	CFGExitNode	EXIT		5041713		True				
ANR	5041735	Symbol	* dev		5041713						
ANR	5041736	Symbol	dev -> memory		5041713						
ANR	5041737	Symbol	dev		5041713						
ANR	5041738	DeclStmt									
ANR	5041739	Decl							RELOC_PTRS_END	RELOC_PTRS_END ( )	public_st_device
ANR	5041740	Function	gx_device_enum_ptr	142:0:4928:5050							
ANR	5041741	FunctionDef	gx_device_enum_ptr (gx_device * dev)		5041740	0					
ANR	5041742	CompoundStatement		144:0:4976:5050	5041740	0					
ANR	5041743	IfStatement	if ( dev == 0 || dev -> memory == 0 )		5041740	0					
ANR	5041744	Condition	dev == 0 || dev -> memory == 0	145:8:4986:5013	5041740	0	True				
ANR	5041745	OrExpression	dev == 0 || dev -> memory == 0		5041740	0		||			
ANR	5041746	EqualityExpression	dev == 0		5041740	0		==			
ANR	5041747	Identifier	dev		5041740	0					
ANR	5041748	PrimaryExpression	0		5041740	1					
ANR	5041749	EqualityExpression	dev -> memory == 0		5041740	1		==			
ANR	5041750	PtrMemberAccess	dev -> memory		5041740	0					
ANR	5041751	Identifier	dev		5041740	0					
ANR	5041752	Identifier	memory		5041740	1					
ANR	5041753	PrimaryExpression	0		5041740	1					
ANR	5041754	ReturnStatement	return 0 ;	146:8:5024:5032	5041740	1	True				
ANR	5041755	PrimaryExpression	0		5041740	0					
ANR	5041756	ReturnStatement	return dev ;	147:4:5038:5048	5041740	1	True				
ANR	5041757	Identifier	dev		5041740	0					
ANR	5041758	ReturnType	gx_device *		5041740	1					
ANR	5041759	Identifier	gx_device_enum_ptr		5041740	2					
ANR	5041760	ParameterList	gx_device * dev		5041740	3					
ANR	5041761	Parameter	gx_device * dev	143:19:4959:4973	5041740	0	True				
ANR	5041762	ParameterType	gx_device *		5041740	0					
ANR	5041763	Identifier	dev		5041740	1					
ANR	5041764	CFGEntryNode	ENTRY		5041740		True				
ANR	5041765	CFGExitNode	EXIT		5041740		True				
ANR	5041766	Symbol	* dev		5041740						
ANR	5041767	Symbol	dev -> memory		5041740						
ANR	5041768	Symbol	dev		5041740						
ANR	5041769	Function	gx_device_reloc_ptr	149:0:5052:5227							
ANR	5041770	FunctionDef	"gx_device_reloc_ptr (gx_device * dev , gc_state_t * gcst)"		5041769	0					
ANR	5041771	CompoundStatement		151:0:5120:5227	5041769	0					
ANR	5041772	IfStatement	if ( dev == 0 || dev -> memory == 0 )		5041769	0					
ANR	5041773	Condition	dev == 0 || dev -> memory == 0	152:8:5130:5157	5041769	0	True				
ANR	5041774	OrExpression	dev == 0 || dev -> memory == 0		5041769	0		||			
ANR	5041775	EqualityExpression	dev == 0		5041769	0		==			
ANR	5041776	Identifier	dev		5041769	0					
ANR	5041777	PrimaryExpression	0		5041769	1					
ANR	5041778	EqualityExpression	dev -> memory == 0		5041769	1		==			
ANR	5041779	PtrMemberAccess	dev -> memory		5041769	0					
ANR	5041780	Identifier	dev		5041769	0					
ANR	5041781	Identifier	memory		5041769	1					
ANR	5041782	PrimaryExpression	0		5041769	1					
ANR	5041783	ReturnStatement	return dev ;	153:8:5168:5178	5041769	1	True				
ANR	5041784	Identifier	dev		5041769	0					
ANR	5041785	ReturnStatement	return RELOC_OBJ ( dev ) ;	154:4:5184:5205	5041769	1	True				
ANR	5041786	CallExpression	RELOC_OBJ ( dev )		5041769	0					
ANR	5041787	Callee	RELOC_OBJ		5041769	0					
ANR	5041788	Identifier	RELOC_OBJ		5041769	0					
ANR	5041789	ArgumentList	dev		5041769	1					
ANR	5041790	Argument	dev		5041769	0					
ANR	5041791	Identifier	dev		5041769	0					
ANR	5041792	ReturnType	gx_device *		5041769	1					
ANR	5041793	Identifier	gx_device_reloc_ptr		5041769	2					
ANR	5041794	ParameterList	"gx_device * dev , gc_state_t * gcst"		5041769	3					
ANR	5041795	Parameter	gx_device * dev	150:20:5084:5098	5041769	0	True				
ANR	5041796	ParameterType	gx_device *		5041769	0					
ANR	5041797	Identifier	dev		5041769	1					
ANR	5041798	Parameter	gc_state_t * gcst	150:37:5101:5117	5041769	1	True				
ANR	5041799	ParameterType	gc_state_t *		5041769	0					
ANR	5041800	Identifier	gcst		5041769	1					
ANR	5041801	CFGEntryNode	ENTRY		5041769		True				
ANR	5041802	CFGExitNode	EXIT		5041769		True				
ANR	5041803	Symbol	* dev		5041769						
ANR	5041804	Symbol	dev -> memory		5041769						
ANR	5041805	Symbol	dev		5041769						
ANR	5041806	Symbol	RELOC_OBJ		5041769						
ANR	5041807	Symbol	gcst		5041769						
ANR	5041808	Function	gx_device_set_procs	159:0:5330:5515							
ANR	5041809	FunctionDef	gx_device_set_procs (gx_device * dev)		5041808	0					
ANR	5041810	CompoundStatement		161:0:5372:5515	5041808	0					
ANR	5041811	IfStatement	if ( dev -> static_procs != 0 )		5041808	0					
ANR	5041812	Condition	dev -> static_procs != 0	162:8:5382:5403	5041808	0	True				
ANR	5041813	EqualityExpression	dev -> static_procs != 0		5041808	0		!=			
ANR	5041814	PtrMemberAccess	dev -> static_procs		5041808	0					
ANR	5041815	Identifier	dev		5041808	0					
ANR	5041816	Identifier	static_procs		5041808	1					
ANR	5041817	PrimaryExpression	0		5041808	1					
ANR	5041818	CompoundStatement		2:32:33:33	5041808	1					
ANR	5041819	ExpressionStatement	dev -> procs = * dev -> static_procs	163:8:5445:5476	5041808	0	True				
ANR	5041820	AssignmentExpression	dev -> procs = * dev -> static_procs		5041808	0		=			
ANR	5041821	PtrMemberAccess	dev -> procs		5041808	0					
ANR	5041822	Identifier	dev		5041808	0					
ANR	5041823	Identifier	procs		5041808	1					
ANR	5041824	UnaryOperationExpression	* dev -> static_procs		5041808	1					
ANR	5041825	UnaryOperator	*		5041808	0					
ANR	5041826	PtrMemberAccess	dev -> static_procs		5041808	1					
ANR	5041827	Identifier	dev		5041808	0					
ANR	5041828	Identifier	static_procs		5041808	1					
ANR	5041829	ExpressionStatement	dev -> static_procs = 0	164:8:5486:5507	5041808	1	True				
ANR	5041830	AssignmentExpression	dev -> static_procs = 0		5041808	0		=			
ANR	5041831	PtrMemberAccess	dev -> static_procs		5041808	0					
ANR	5041832	Identifier	dev		5041808	0					
ANR	5041833	Identifier	static_procs		5041808	1					
ANR	5041834	PrimaryExpression	0		5041808	1					
ANR	5041835	ReturnType	void		5041808	1					
ANR	5041836	Identifier	gx_device_set_procs		5041808	2					
ANR	5041837	ParameterList	gx_device * dev		5041808	3					
ANR	5041838	Parameter	gx_device * dev	160:20:5355:5369	5041808	0	True				
ANR	5041839	ParameterType	gx_device *		5041808	0					
ANR	5041840	Identifier	dev		5041808	1					
ANR	5041841	CFGEntryNode	ENTRY		5041808		True				
ANR	5041842	CFGExitNode	EXIT		5041808		True				
ANR	5041843	Symbol	* dev		5041808						
ANR	5041844	Symbol	dev -> procs		5041808						
ANR	5041845	Symbol	dev -> static_procs		5041808						
ANR	5041846	Symbol	dev		5041808						
ANR	5041847	Symbol	* * dev		5041808						
ANR	5041848	Symbol	* dev -> static_procs		5041808						
ANR	5041849	Function	gs_flushpage	169:0:5560:5689							
ANR	5041850	FunctionDef	gs_flushpage (gs_gstate * pgs)		5041849	0					
ANR	5041851	CompoundStatement		171:0:5594:5689	5041849	0					
ANR	5041852	IdentifierDeclStatement	gx_device * dev = gs_currentdevice ( pgs ) ;	172:4:5600:5638	5041849	0	True				
ANR	5041853	IdentifierDecl	* dev = gs_currentdevice ( pgs )		5041849	0					
ANR	5041854	IdentifierDeclType	gx_device *		5041849	0					
ANR	5041855	Identifier	dev		5041849	1					
ANR	5041856	AssignmentExpression	* dev = gs_currentdevice ( pgs )		5041849	2		=			
ANR	5041857	Identifier	dev		5041849	0					
ANR	5041858	CallExpression	gs_currentdevice ( pgs )		5041849	1					
ANR	5041859	Callee	gs_currentdevice		5041849	0					
ANR	5041860	Identifier	gs_currentdevice		5041849	0					
ANR	5041861	ArgumentList	pgs		5041849	1					
ANR	5041862	Argument	pgs		5041849	0					
ANR	5041863	Identifier	pgs		5041849	0					
ANR	5041864	ReturnStatement	"return ( * dev_proc ( dev , sync_output ) ) ( dev ) ;"	174:4:5645:5687	5041849	1	True				
ANR	5041865	CallExpression	"( * dev_proc ( dev , sync_output ) ) ( dev )"		5041849	0					
ANR	5041866	Callee	"* dev_proc ( dev , sync_output )"		5041849	0					
ANR	5041867	UnaryOperationExpression	"* dev_proc ( dev , sync_output )"		5041849	0					
ANR	5041868	UnaryOperator	*		5041849	0					
ANR	5041869	CallExpression	"dev_proc ( dev , sync_output )"		5041849	1					
ANR	5041870	Callee	dev_proc		5041849	0					
ANR	5041871	Identifier	dev_proc		5041849	0					
ANR	5041872	ArgumentList	dev		5041849	1					
ANR	5041873	Argument	dev		5041849	0					
ANR	5041874	Identifier	dev		5041849	0					
ANR	5041875	Argument	sync_output		5041849	1					
ANR	5041876	Identifier	sync_output		5041849	0					
ANR	5041877	ArgumentList	dev		5041849	1					
ANR	5041878	Argument	dev		5041849	0					
ANR	5041879	Identifier	dev		5041849	0					
ANR	5041880	ReturnType	int		5041849	1					
ANR	5041881	Identifier	gs_flushpage		5041849	2					
ANR	5041882	ParameterList	gs_gstate * pgs		5041849	3					
ANR	5041883	Parameter	gs_gstate * pgs	170:13:5577:5591	5041849	0	True				
ANR	5041884	ParameterType	gs_gstate *		5041849	0					
ANR	5041885	Identifier	pgs		5041849	1					
ANR	5041886	CFGEntryNode	ENTRY		5041849		True				
ANR	5041887	CFGExitNode	EXIT		5041849		True				
ANR	5041888	Symbol	dev		5041849						
ANR	5041889	Symbol	* dev_proc		5041849						
ANR	5041890	Symbol	"* dev_proc ( dev , sync_output )"		5041849						
ANR	5041891	Symbol	dev_proc		5041849						
ANR	5041892	Symbol	gs_currentdevice		5041849						
ANR	5041893	Symbol	sync_output		5041849						
ANR	5041894	Symbol	pgs		5041849						
ANR	5041895	Function	gs_copypage	178:0:5754:5827							
ANR	5041896	FunctionDef	gs_copypage (gs_gstate * pgs)		5041895	0					
ANR	5041897	CompoundStatement		180:0:5787:5827	5041895	0					
ANR	5041898	ReturnStatement	"return gs_output_page ( pgs , 1 , 0 ) ;"	181:4:5793:5825	5041895	0	True				
ANR	5041899	CallExpression	"gs_output_page ( pgs , 1 , 0 )"		5041895	0					
ANR	5041900	Callee	gs_output_page		5041895	0					
ANR	5041901	Identifier	gs_output_page		5041895	0					
ANR	5041902	ArgumentList	pgs		5041895	1					
ANR	5041903	Argument	pgs		5041895	0					
ANR	5041904	Identifier	pgs		5041895	0					
ANR	5041905	Argument	1		5041895	1					
ANR	5041906	PrimaryExpression	1		5041895	0					
ANR	5041907	Argument	0		5041895	2					
ANR	5041908	PrimaryExpression	0		5041895	0					
ANR	5041909	ReturnType	int		5041895	1					
ANR	5041910	Identifier	gs_copypage		5041895	2					
ANR	5041911	ParameterList	gs_gstate * pgs		5041895	3					
ANR	5041912	Parameter	gs_gstate * pgs	179:12:5770:5784	5041895	0	True				
ANR	5041913	ParameterType	gs_gstate *		5041895	0					
ANR	5041914	Identifier	pgs		5041895	1					
ANR	5041915	CFGEntryNode	ENTRY		5041895		True				
ANR	5041916	CFGExitNode	EXIT		5041895		True				
ANR	5041917	Symbol	gs_output_page		5041895						
ANR	5041918	Symbol	pgs		5041895						
ANR	5041919	Function	gs_output_page	183:0:5829:7058							
ANR	5041920	FunctionDef	"gs_output_page (gs_gstate * pgs , int num_copies , int flush)"		5041919	0					
ANR	5041921	CompoundStatement		185:0:5892:7058	5041919	0					
ANR	5041922	IdentifierDeclStatement	gx_device * dev = gs_currentdevice ( pgs ) ;	186:4:5898:5936	5041919	0	True				
ANR	5041923	IdentifierDecl	* dev = gs_currentdevice ( pgs )		5041919	0					
ANR	5041924	IdentifierDeclType	gx_device *		5041919	0					
ANR	5041925	Identifier	dev		5041919	1					
ANR	5041926	AssignmentExpression	* dev = gs_currentdevice ( pgs )		5041919	2		=			
ANR	5041927	Identifier	dev		5041919	0					
ANR	5041928	CallExpression	gs_currentdevice ( pgs )		5041919	1					
ANR	5041929	Callee	gs_currentdevice		5041919	0					
ANR	5041930	Identifier	gs_currentdevice		5041919	0					
ANR	5041931	ArgumentList	pgs		5041919	1					
ANR	5041932	Argument	pgs		5041919	0					
ANR	5041933	Identifier	pgs		5041919	0					
ANR	5041934	IdentifierDeclStatement	cmm_dev_profile_t * dev_profile ;	187:4:5942:5972	5041919	1	True				
ANR	5041935	IdentifierDecl	* dev_profile		5041919	0					
ANR	5041936	IdentifierDeclType	cmm_dev_profile_t *		5041919	0					
ANR	5041937	Identifier	dev_profile		5041919	1					
ANR	5041938	IdentifierDeclStatement	int code ;	188:4:5978:5986	5041919	2	True				
ANR	5041939	IdentifierDecl	code		5041919	0					
ANR	5041940	IdentifierDeclType	int		5041919	0					
ANR	5041941	Identifier	code		5041919	1					
ANR	5041942	ExpressionStatement	code = gs_gsave ( pgs )	193:4:6208:6228	5041919	3	True				
ANR	5041943	AssignmentExpression	code = gs_gsave ( pgs )		5041919	0		=			
ANR	5041944	Identifier	code		5041919	0					
ANR	5041945	CallExpression	gs_gsave ( pgs )		5041919	1					
ANR	5041946	Callee	gs_gsave		5041919	0					
ANR	5041947	Identifier	gs_gsave		5041919	0					
ANR	5041948	ArgumentList	pgs		5041919	1					
ANR	5041949	Argument	pgs		5041919	0					
ANR	5041950	Identifier	pgs		5041919	0					
ANR	5041951	IfStatement	if ( code < 0 )		5041919	4					
ANR	5041952	Condition	code < 0	194:8:6238:6245	5041919	0	True				
ANR	5041953	RelationalExpression	code < 0		5041919	0		<			
ANR	5041954	Identifier	code		5041919	0					
ANR	5041955	PrimaryExpression	0		5041919	1					
ANR	5041956	ReturnStatement	return code ;	195:8:6256:6267	5041919	1	True				
ANR	5041957	Identifier	code		5041919	0					
ANR	5041958	IfStatement	"if ( ( ( code = gs_newpath ( pgs ) ) < 0 ) || ( ( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0 ) || ( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 ) )"		5041919	5					
ANR	5041959	Condition	"( ( code = gs_newpath ( pgs ) ) < 0 ) || ( ( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0 ) || ( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 )"	196:8:6277:6435	5041919	0	True				
ANR	5041960	OrExpression	"( ( code = gs_newpath ( pgs ) ) < 0 ) || ( ( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0 ) || ( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 )"		5041919	0		||			
ANR	5041961	RelationalExpression	( code = gs_newpath ( pgs ) ) < 0		5041919	0		<			
ANR	5041962	AssignmentExpression	code = gs_newpath ( pgs )		5041919	0		=			
ANR	5041963	Identifier	code		5041919	0					
ANR	5041964	CallExpression	gs_newpath ( pgs )		5041919	1					
ANR	5041965	Callee	gs_newpath		5041919	0					
ANR	5041966	Identifier	gs_newpath		5041919	0					
ANR	5041967	ArgumentList	pgs		5041919	1					
ANR	5041968	Argument	pgs		5041919	0					
ANR	5041969	Identifier	pgs		5041919	0					
ANR	5041970	PrimaryExpression	0		5041919	1					
ANR	5041971	OrExpression	"( ( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0 ) || ( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 )"		5041919	1		||			
ANR	5041972	RelationalExpression	"( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0"		5041919	0		<			
ANR	5041973	AssignmentExpression	"code = gs_moveto ( pgs , 0.0 , 0.0 )"		5041919	0		=			
ANR	5041974	Identifier	code		5041919	0					
ANR	5041975	CallExpression	"gs_moveto ( pgs , 0.0 , 0.0 )"		5041919	1					
ANR	5041976	Callee	gs_moveto		5041919	0					
ANR	5041977	Identifier	gs_moveto		5041919	0					
ANR	5041978	ArgumentList	pgs		5041919	1					
ANR	5041979	Argument	pgs		5041919	0					
ANR	5041980	Identifier	pgs		5041919	0					
ANR	5041981	Argument	0.0		5041919	1					
ANR	5041982	PrimaryExpression	0.0		5041919	0					
ANR	5041983	Argument	0.0		5041919	2					
ANR	5041984	PrimaryExpression	0.0		5041919	0					
ANR	5041985	PrimaryExpression	0		5041919	1					
ANR	5041986	OrExpression	"( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 )"		5041919	1		||			
ANR	5041987	RelationalExpression	"( code = gs_setgray ( pgs , 0.0 ) ) < 0"		5041919	0		<			
ANR	5041988	AssignmentExpression	"code = gs_setgray ( pgs , 0.0 )"		5041919	0		=			
ANR	5041989	Identifier	code		5041919	0					
ANR	5041990	CallExpression	"gs_setgray ( pgs , 0.0 )"		5041919	1					
ANR	5041991	Callee	gs_setgray		5041919	0					
ANR	5041992	Identifier	gs_setgray		5041919	0					
ANR	5041993	ArgumentList	pgs		5041919	1					
ANR	5041994	Argument	pgs		5041919	0					
ANR	5041995	Identifier	pgs		5041919	0					
ANR	5041996	Argument	0.0		5041919	1					
ANR	5041997	PrimaryExpression	0.0		5041919	0					
ANR	5041998	PrimaryExpression	0		5041919	1					
ANR	5041999	RelationalExpression	( code = gs_fill ( pgs ) ) < 0		5041919	1		<			
ANR	5042000	AssignmentExpression	code = gs_fill ( pgs )		5041919	0		=			
ANR	5042001	Identifier	code		5041919	0					
ANR	5042002	CallExpression	gs_fill ( pgs )		5041919	1					
ANR	5042003	Callee	gs_fill		5041919	0					
ANR	5042004	Identifier	gs_fill		5041919	0					
ANR	5042005	ArgumentList	pgs		5041919	1					
ANR	5042006	Argument	pgs		5041919	0					
ANR	5042007	Identifier	pgs		5041919	0					
ANR	5042008	PrimaryExpression	0		5041919	1					
ANR	5042009	CompoundStatement		16:4:549:549	5041919	1					
ANR	5042010	ExpressionStatement	gs_grestore ( pgs )	201:8:6452:6468	5041919	0	True				
ANR	5042011	CallExpression	gs_grestore ( pgs )		5041919	0					
ANR	5042012	Callee	gs_grestore		5041919	0					
ANR	5042013	Identifier	gs_grestore		5041919	0					
ANR	5042014	ArgumentList	pgs		5041919	1					
ANR	5042015	Argument	pgs		5041919	0					
ANR	5042016	Identifier	pgs		5041919	0					
ANR	5042017	ReturnStatement	return code ;	202:1:6471:6482	5041919	1	True				
ANR	5042018	Identifier	code		5041919	0					
ANR	5042019	ExpressionStatement	code = gs_grestore ( pgs )	204:4:6494:6517	5041919	6	True				
ANR	5042020	AssignmentExpression	code = gs_grestore ( pgs )		5041919	0		=			
ANR	5042021	Identifier	code		5041919	0					
ANR	5042022	CallExpression	gs_grestore ( pgs )		5041919	1					
ANR	5042023	Callee	gs_grestore		5041919	0					
ANR	5042024	Identifier	gs_grestore		5041919	0					
ANR	5042025	ArgumentList	pgs		5041919	1					
ANR	5042026	Argument	pgs		5041919	0					
ANR	5042027	Identifier	pgs		5041919	0					
ANR	5042028	IfStatement	if ( code < 0 )		5041919	7					
ANR	5042029	Condition	code < 0	205:8:6527:6534	5041919	0	True				
ANR	5042030	RelationalExpression	code < 0		5041919	0		<			
ANR	5042031	Identifier	code		5041919	0					
ANR	5042032	PrimaryExpression	0		5041919	1					
ANR	5042033	ReturnStatement	return code ;	206:8:6545:6556	5041919	1	True				
ANR	5042034	Identifier	code		5041919	0					
ANR	5042035	IfStatement	if ( dev -> IgnoreNumCopies )		5041919	8					
ANR	5042036	Condition	dev -> IgnoreNumCopies	208:8:6567:6586	5041919	0	True				
ANR	5042037	PtrMemberAccess	dev -> IgnoreNumCopies		5041919	0					
ANR	5042038	Identifier	dev		5041919	0					
ANR	5042039	Identifier	IgnoreNumCopies		5041919	1					
ANR	5042040	ExpressionStatement	num_copies = 1	209:8:6597:6611	5041919	1	True				
ANR	5042041	AssignmentExpression	num_copies = 1		5041919	0		=			
ANR	5042042	Identifier	num_copies		5041919	0					
ANR	5042043	PrimaryExpression	1		5041919	1					
ANR	5042044	IfStatement	"if ( ( code = ( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush ) ) < 0 )"		5041919	9					
ANR	5042045	Condition	"( code = ( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush ) ) < 0"	210:8:6621:6687	5041919	0	True				
ANR	5042046	RelationalExpression	"( code = ( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush ) ) < 0"		5041919	0		<			
ANR	5042047	AssignmentExpression	"code = ( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush )"		5041919	0		=			
ANR	5042048	Identifier	code		5041919	0					
ANR	5042049	CallExpression	"( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush )"		5041919	1					
ANR	5042050	Callee	"* dev_proc ( dev , output_page )"		5041919	0					
ANR	5042051	UnaryOperationExpression	"* dev_proc ( dev , output_page )"		5041919	0					
ANR	5042052	UnaryOperator	*		5041919	0					
ANR	5042053	CallExpression	"dev_proc ( dev , output_page )"		5041919	1					
ANR	5042054	Callee	dev_proc		5041919	0					
ANR	5042055	Identifier	dev_proc		5041919	0					
ANR	5042056	ArgumentList	dev		5041919	1					
ANR	5042057	Argument	dev		5041919	0					
ANR	5042058	Identifier	dev		5041919	0					
ANR	5042059	Argument	output_page		5041919	1					
ANR	5042060	Identifier	output_page		5041919	0					
ANR	5042061	ArgumentList	dev		5041919	1					
ANR	5042062	Argument	dev		5041919	0					
ANR	5042063	Identifier	dev		5041919	0					
ANR	5042064	Argument	num_copies		5041919	1					
ANR	5042065	Identifier	num_copies		5041919	0					
ANR	5042066	Argument	flush		5041919	2					
ANR	5042067	Identifier	flush		5041919	0					
ANR	5042068	PrimaryExpression	0		5041919	1					
ANR	5042069	ReturnStatement	return code ;	211:8:6698:6709	5041919	1	True				
ANR	5042070	Identifier	code		5041919	0					
ANR	5042071	ExpressionStatement	"code = dev_proc ( dev , get_profile ) ( dev , & ( dev_profile ) )"	213:4:6716:6770	5041919	10	True				
ANR	5042072	AssignmentExpression	"code = dev_proc ( dev , get_profile ) ( dev , & ( dev_profile ) )"		5041919	0		=			
ANR	5042073	Identifier	code		5041919	0					
ANR	5042074	CallExpression	"dev_proc ( dev , get_profile ) ( dev , & ( dev_profile ) )"		5041919	1					
ANR	5042075	Callee	"dev_proc ( dev , get_profile )"		5041919	0					
ANR	5042076	CallExpression	"dev_proc ( dev , get_profile )"		5041919	0					
ANR	5042077	Callee	dev_proc		5041919	0					
ANR	5042078	Identifier	dev_proc		5041919	0					
ANR	5042079	ArgumentList	dev		5041919	1					
ANR	5042080	Argument	dev		5041919	0					
ANR	5042081	Identifier	dev		5041919	0					
ANR	5042082	Argument	get_profile		5041919	1					
ANR	5042083	Identifier	get_profile		5041919	0					
ANR	5042084	ArgumentList	dev		5041919	1					
ANR	5042085	Argument	dev		5041919	0					
ANR	5042086	Identifier	dev		5041919	0					
ANR	5042087	Argument	& ( dev_profile )		5041919	1					
ANR	5042088	UnaryOperationExpression	& ( dev_profile )		5041919	0					
ANR	5042089	UnaryOperator	&		5041919	0					
ANR	5042090	Identifier	dev_profile		5041919	1					
ANR	5042091	IfStatement	if ( code < 0 )		5041919	11					
ANR	5042092	Condition	code < 0	214:8:6780:6787	5041919	0	True				
ANR	5042093	RelationalExpression	code < 0		5041919	0		<			
ANR	5042094	Identifier	code		5041919	0					
ANR	5042095	PrimaryExpression	0		5041919	1					
ANR	5042096	ReturnStatement	return code ;	215:8:6798:6809	5041919	1	True				
ANR	5042097	Identifier	code		5041919	0					
ANR	5042098	IfStatement	if ( dev_profile -> graydetection && ! dev_profile -> pageneutralcolor )		5041919	12					
ANR	5042099	Condition	dev_profile -> graydetection && ! dev_profile -> pageneutralcolor	216:8:6819:6878	5041919	0	True				
ANR	5042100	AndExpression	dev_profile -> graydetection && ! dev_profile -> pageneutralcolor		5041919	0		&&			
ANR	5042101	PtrMemberAccess	dev_profile -> graydetection		5041919	0					
ANR	5042102	Identifier	dev_profile		5041919	0					
ANR	5042103	Identifier	graydetection		5041919	1					
ANR	5042104	UnaryOperationExpression	! dev_profile -> pageneutralcolor		5041919	1					
ANR	5042105	UnaryOperator	!		5041919	0					
ANR	5042106	PtrMemberAccess	dev_profile -> pageneutralcolor		5041919	1					
ANR	5042107	Identifier	dev_profile		5041919	0					
ANR	5042108	Identifier	pageneutralcolor		5041919	1					
ANR	5042109	CompoundStatement		32:70:988:988	5041919	1					
ANR	5042110	ExpressionStatement	dev_profile -> pageneutralcolor = true	217:8:6891:6927	5041919	0	True				
ANR	5042111	AssignmentExpression	dev_profile -> pageneutralcolor = true		5041919	0		=			
ANR	5042112	PtrMemberAccess	dev_profile -> pageneutralcolor		5041919	0					
ANR	5042113	Identifier	dev_profile		5041919	0					
ANR	5042114	Identifier	pageneutralcolor		5041919	1					
ANR	5042115	Identifier	true		5041919	1					
ANR	5042116	ExpressionStatement	"code = gsicc_mcm_begin_monitor ( pgs -> icc_link_cache , dev )"	218:8:6977:7033	5041919	1	True				
ANR	5042117	AssignmentExpression	"code = gsicc_mcm_begin_monitor ( pgs -> icc_link_cache , dev )"		5041919	0		=			
ANR	5042118	Identifier	code		5041919	0					
ANR	5042119	CallExpression	"gsicc_mcm_begin_monitor ( pgs -> icc_link_cache , dev )"		5041919	1					
ANR	5042120	Callee	gsicc_mcm_begin_monitor		5041919	0					
ANR	5042121	Identifier	gsicc_mcm_begin_monitor		5041919	0					
ANR	5042122	ArgumentList	pgs -> icc_link_cache		5041919	1					
ANR	5042123	Argument	pgs -> icc_link_cache		5041919	0					
ANR	5042124	PtrMemberAccess	pgs -> icc_link_cache		5041919	0					
ANR	5042125	Identifier	pgs		5041919	0					
ANR	5042126	Identifier	icc_link_cache		5041919	1					
ANR	5042127	Argument	dev		5041919	1					
ANR	5042128	Identifier	dev		5041919	0					
ANR	5042129	ReturnStatement	return code ;	220:4:7045:7056	5041919	13	True				
ANR	5042130	Identifier	code		5041919	0					
ANR	5042131	ReturnType	int		5041919	1					
ANR	5042132	Identifier	gs_output_page		5041919	2					
ANR	5042133	ParameterList	"gs_gstate * pgs , int num_copies , int flush"		5041919	3					
ANR	5042134	Parameter	gs_gstate * pgs	184:15:5848:5862	5041919	0	True				
ANR	5042135	ParameterType	gs_gstate *		5041919	0					
ANR	5042136	Identifier	pgs		5041919	1					
ANR	5042137	Parameter	int num_copies	184:32:5865:5878	5041919	1	True				
ANR	5042138	ParameterType	int		5041919	0					
ANR	5042139	Identifier	num_copies		5041919	1					
ANR	5042140	Parameter	int flush	184:48:5881:5889	5041919	2	True				
ANR	5042141	ParameterType	int		5041919	0					
ANR	5042142	Identifier	flush		5041919	1					
ANR	5042143	CFGEntryNode	ENTRY		5041919		True				
ANR	5042144	CFGExitNode	EXIT		5041919		True				
ANR	5042145	Symbol	* dev		5041919						
ANR	5042146	Symbol	dev_profile -> graydetection		5041919						
ANR	5042147	Symbol	gs_setgray		5041919						
ANR	5042148	Symbol	dev -> IgnoreNumCopies		5041919						
ANR	5042149	Symbol	code		5041919						
ANR	5042150	Symbol	"* dev_proc ( dev , output_page )"		5041919						
ANR	5042151	Symbol	* dev_proc		5041919						
ANR	5042152	Symbol	* pgs		5041919						
ANR	5042153	Symbol	dev_profile		5041919						
ANR	5042154	Symbol	num_copies		5041919						
ANR	5042155	Symbol	gs_currentdevice		5041919						
ANR	5042156	Symbol	gs_moveto		5041919						
ANR	5042157	Symbol	gs_newpath		5041919						
ANR	5042158	Symbol	gs_grestore		5041919						
ANR	5042159	Symbol	gs_gsave		5041919						
ANR	5042160	Symbol	flush		5041919						
ANR	5042161	Symbol	dev		5041919						
ANR	5042162	Symbol	dev_proc		5041919						
ANR	5042163	Symbol	output_page		5041919						
ANR	5042164	Symbol	pgs -> icc_link_cache		5041919						
ANR	5042165	Symbol	gsicc_mcm_begin_monitor		5041919						
ANR	5042166	Symbol	pgs		5041919						
ANR	5042167	Symbol	get_profile		5041919						
ANR	5042168	Symbol	& dev_profile		5041919						
ANR	5042169	Symbol	* dev_profile		5041919						
ANR	5042170	Symbol	dev_profile -> pageneutralcolor		5041919						
ANR	5042171	Symbol	true		5041919						
ANR	5042172	Symbol	gs_fill		5041919						
ANR	5042173	Function	gx_finish_output_page	227:0:7215:7334							
ANR	5042174	FunctionDef	"gx_finish_output_page (gx_device * dev , int num_copies , int flush)"		5042173	0					
ANR	5042175	CompoundStatement		229:0:7284:7334	5042173	0					
ANR	5042176	ExpressionStatement	dev -> PageCount += num_copies	230:4:7290:7318	5042173	0	True				
ANR	5042177	AssignmentExpression	dev -> PageCount += num_copies		5042173	0		+=			
ANR	5042178	PtrMemberAccess	dev -> PageCount		5042173	0					
ANR	5042179	Identifier	dev		5042173	0					
ANR	5042180	Identifier	PageCount		5042173	1					
ANR	5042181	Identifier	num_copies		5042173	1					
ANR	5042182	ReturnStatement	return 0 ;	231:4:7324:7332	5042173	1	True				
ANR	5042183	PrimaryExpression	0		5042173	0					
ANR	5042184	ReturnType	int		5042173	1					
ANR	5042185	Identifier	gx_finish_output_page		5042173	2					
ANR	5042186	ParameterList	"gx_device * dev , int num_copies , int flush"		5042173	3					
ANR	5042187	Parameter	gx_device * dev	228:22:7241:7254	5042173	0	True				
ANR	5042188	ParameterType	gx_device *		5042173	0					
ANR	5042189	Identifier	dev		5042173	1					
ANR	5042190	Parameter	int num_copies	228:38:7257:7270	5042173	1	True				
ANR	5042191	ParameterType	int		5042173	0					
ANR	5042192	Identifier	num_copies		5042173	1					
ANR	5042193	Parameter	int flush	228:54:7273:7281	5042173	2	True				
ANR	5042194	ParameterType	int		5042173	0					
ANR	5042195	Identifier	flush		5042173	1					
ANR	5042196	CFGEntryNode	ENTRY		5042173		True				
ANR	5042197	CFGExitNode	EXIT		5042173		True				
ANR	5042198	Symbol	* dev		5042173						
ANR	5042199	Symbol	dev		5042173						
ANR	5042200	Symbol	flush		5042173						
ANR	5042201	Symbol	num_copies		5042173						
ANR	5042202	Symbol	dev -> PageCount		5042173						
ANR	5042203	Function	gs_copyscanlines	235:0:7380:8093							
ANR	5042204	FunctionDef	"gs_copyscanlines (gx_device * dev , int start_y , byte * data , uint size , int * plines_copied , uint * pbytes_copied)"		5042203	0					
ANR	5042205	CompoundStatement		238:0:7514:8093	5042203	0					
ANR	5042206	IdentifierDeclStatement	"uint line_size = gx_device_raster ( dev , 0 ) ;"	239:4:7520:7561	5042203	0	True				
ANR	5042207	IdentifierDecl	"line_size = gx_device_raster ( dev , 0 )"		5042203	0					
ANR	5042208	IdentifierDeclType	uint		5042203	0					
ANR	5042209	Identifier	line_size		5042203	1					
ANR	5042210	AssignmentExpression	"line_size = gx_device_raster ( dev , 0 )"		5042203	2		=			
ANR	5042211	Identifier	line_size		5042203	0					
ANR	5042212	CallExpression	"gx_device_raster ( dev , 0 )"		5042203	1					
ANR	5042213	Callee	gx_device_raster		5042203	0					
ANR	5042214	Identifier	gx_device_raster		5042203	0					
ANR	5042215	ArgumentList	dev		5042203	1					
ANR	5042216	Argument	dev		5042203	0					
ANR	5042217	Identifier	dev		5042203	0					
ANR	5042218	Argument	0		5042203	1					
ANR	5042219	PrimaryExpression	0		5042203	0					
ANR	5042220	IdentifierDeclStatement	uint count = size / line_size ;	240:4:7567:7596	5042203	1	True				
ANR	5042221	IdentifierDecl	count = size / line_size		5042203	0					
ANR	5042222	IdentifierDeclType	uint		5042203	0					
ANR	5042223	Identifier	count		5042203	1					
ANR	5042224	AssignmentExpression	count = size / line_size		5042203	2		=			
ANR	5042225	Identifier	count		5042203	0					
ANR	5042226	MultiplicativeExpression	size / line_size		5042203	1		/			
ANR	5042227	Identifier	size		5042203	0					
ANR	5042228	Identifier	line_size		5042203	1					
ANR	5042229	IdentifierDeclStatement	uint i ;	241:4:7602:7608	5042203	2	True				
ANR	5042230	IdentifierDecl	i		5042203	0					
ANR	5042231	IdentifierDeclType	uint		5042203	0					
ANR	5042232	Identifier	i		5042203	1					
ANR	5042233	IdentifierDeclStatement	byte * dest = data ;	242:4:7614:7631	5042203	3	True				
ANR	5042234	IdentifierDecl	* dest = data		5042203	0					
ANR	5042235	IdentifierDeclType	byte *		5042203	0					
ANR	5042236	Identifier	dest		5042203	1					
ANR	5042237	AssignmentExpression	* dest = data		5042203	2		=			
ANR	5042238	Identifier	data		5042203	0					
ANR	5042239	Identifier	data		5042203	1					
ANR	5042240	ForStatement	"for ( i = 0 ; i < count ; i ++ , dest += line_size )"		5042203	4					
ANR	5042241	ForInit	i = 0 ;	244:9:7643:7648	5042203	0	True				
ANR	5042242	AssignmentExpression	i = 0		5042203	0		=			
ANR	5042243	Identifier	i		5042203	0					
ANR	5042244	PrimaryExpression	0		5042203	1					
ANR	5042245	Condition	i < count	244:16:7650:7658	5042203	1	True				
ANR	5042246	RelationalExpression	i < count		5042203	0		<			
ANR	5042247	Identifier	i		5042203	0					
ANR	5042248	Identifier	count		5042203	1					
ANR	5042249	Expression	"i ++ , dest += line_size"	244:27:7661:7682	5042203	2	True				
ANR	5042250	PostIncDecOperationExpression	i ++		5042203	0					
ANR	5042251	Identifier	i		5042203	0					
ANR	5042252	IncDec	++		5042203	1					
ANR	5042253	AssignmentExpression	dest += line_size		5042203	1		+=			
ANR	5042254	Identifier	dest		5042203	0					
ANR	5042255	Identifier	line_size		5042203	1					
ANR	5042256	CompoundStatement		8:8:180:248	5042203	3					
ANR	5042257	IdentifierDeclStatement	"int code = ( * dev_proc ( dev , get_bits ) ) ( dev , start_y + i , dest , NULL ) ;"	245:8:7695:7763	5042203	0	True				
ANR	5042258	IdentifierDecl	"code = ( * dev_proc ( dev , get_bits ) ) ( dev , start_y + i , dest , NULL )"		5042203	0					
ANR	5042259	IdentifierDeclType	int		5042203	0					
ANR	5042260	Identifier	code		5042203	1					
ANR	5042261	AssignmentExpression	"code = ( * dev_proc ( dev , get_bits ) ) ( dev , start_y + i , dest , NULL )"		5042203	2		=			
ANR	5042262	Identifier	code		5042203	0					
ANR	5042263	CallExpression	"( * dev_proc ( dev , get_bits ) ) ( dev , start_y + i , dest , NULL )"		5042203	1					
ANR	5042264	Callee	"* dev_proc ( dev , get_bits )"		5042203	0					
ANR	5042265	UnaryOperationExpression	"* dev_proc ( dev , get_bits )"		5042203	0					
ANR	5042266	UnaryOperator	*		5042203	0					
ANR	5042267	CallExpression	"dev_proc ( dev , get_bits )"		5042203	1					
ANR	5042268	Callee	dev_proc		5042203	0					
ANR	5042269	Identifier	dev_proc		5042203	0					
ANR	5042270	ArgumentList	dev		5042203	1					
ANR	5042271	Argument	dev		5042203	0					
ANR	5042272	Identifier	dev		5042203	0					
ANR	5042273	Argument	get_bits		5042203	1					
ANR	5042274	Identifier	get_bits		5042203	0					
ANR	5042275	ArgumentList	dev		5042203	1					
ANR	5042276	Argument	dev		5042203	0					
ANR	5042277	Identifier	dev		5042203	0					
ANR	5042278	Argument	start_y + i		5042203	1					
ANR	5042279	AdditiveExpression	start_y + i		5042203	0		+			
ANR	5042280	Identifier	start_y		5042203	0					
ANR	5042281	Identifier	i		5042203	1					
ANR	5042282	Argument	dest		5042203	2					
ANR	5042283	Identifier	dest		5042203	0					
ANR	5042284	Argument	NULL		5042203	3					
ANR	5042285	Identifier	NULL		5042203	0					
ANR	5042286	IfStatement	if ( code < 0 )		5042203	1					
ANR	5042287	Condition	code < 0	247:12:7778:7785	5042203	0	True				
ANR	5042288	RelationalExpression	code < 0		5042203	0		<			
ANR	5042289	Identifier	code		5042203	0					
ANR	5042290	PrimaryExpression	0		5042203	1					
ANR	5042291	CompoundStatement		10:22:273:273	5042203	1					
ANR	5042292	IfStatement	if ( start_y + i == dev -> height )		5042203	0					
ANR	5042293	Condition	start_y + i == dev -> height	249:16:7850:7875	5042203	0	True				
ANR	5042294	EqualityExpression	start_y + i == dev -> height		5042203	0		==			
ANR	5042295	AdditiveExpression	start_y + i		5042203	0		+			
ANR	5042296	Identifier	start_y		5042203	0					
ANR	5042297	Identifier	i		5042203	1					
ANR	5042298	PtrMemberAccess	dev -> height		5042203	1					
ANR	5042299	Identifier	dev		5042203	0					
ANR	5042300	Identifier	height		5042203	1					
ANR	5042301	BreakStatement	break ;	250:16:7894:7899	5042203	1	True				
ANR	5042302	ExpressionStatement	return_error ( code )	251:12:7913:7931	5042203	1	True				
ANR	5042303	CallExpression	return_error ( code )		5042203	0					
ANR	5042304	Callee	return_error		5042203	0					
ANR	5042305	Identifier	return_error		5042203	0					
ANR	5042306	ArgumentList	code		5042203	1					
ANR	5042307	Argument	code		5042203	0					
ANR	5042308	Identifier	code		5042203	0					
ANR	5042309	IfStatement	if ( plines_copied != NULL )		5042203	5					
ANR	5042310	Condition	plines_copied != NULL	254:8:7957:7977	5042203	0	True				
ANR	5042311	EqualityExpression	plines_copied != NULL		5042203	0		!=			
ANR	5042312	Identifier	plines_copied		5042203	0					
ANR	5042313	Identifier	NULL		5042203	1					
ANR	5042314	ExpressionStatement	* plines_copied = i	255:8:7988:8006	5042203	1	True				
ANR	5042315	AssignmentExpression	* plines_copied = i		5042203	0		=			
ANR	5042316	UnaryOperationExpression	* plines_copied		5042203	0					
ANR	5042317	UnaryOperator	*		5042203	0					
ANR	5042318	Identifier	plines_copied		5042203	1					
ANR	5042319	Identifier	i		5042203	1					
ANR	5042320	IfStatement	if ( pbytes_copied != NULL )		5042203	6					
ANR	5042321	Condition	pbytes_copied != NULL	256:8:8016:8036	5042203	0	True				
ANR	5042322	EqualityExpression	pbytes_copied != NULL		5042203	0		!=			
ANR	5042323	Identifier	pbytes_copied		5042203	0					
ANR	5042324	Identifier	NULL		5042203	1					
ANR	5042325	ExpressionStatement	* pbytes_copied = i * line_size	257:8:8047:8077	5042203	1	True				
ANR	5042326	AssignmentExpression	* pbytes_copied = i * line_size		5042203	0		=			
ANR	5042327	UnaryOperationExpression	* pbytes_copied		5042203	0					
ANR	5042328	UnaryOperator	*		5042203	0					
ANR	5042329	Identifier	pbytes_copied		5042203	1					
ANR	5042330	MultiplicativeExpression	i * line_size		5042203	1		*			
ANR	5042331	Identifier	i		5042203	0					
ANR	5042332	Identifier	line_size		5042203	1					
ANR	5042333	ReturnStatement	return 0 ;	258:4:8083:8091	5042203	7	True				
ANR	5042334	PrimaryExpression	0		5042203	0					
ANR	5042335	ReturnType	int		5042203	1					
ANR	5042336	Identifier	gs_copyscanlines		5042203	2					
ANR	5042337	ParameterList	"gx_device * dev , int start_y , byte * data , uint size , int * plines_copied , uint * pbytes_copied"		5042203	3					
ANR	5042338	Parameter	gx_device * dev	236:17:7401:7415	5042203	0	True				
ANR	5042339	ParameterType	gx_device *		5042203	0					
ANR	5042340	Identifier	dev		5042203	1					
ANR	5042341	Parameter	int start_y	236:34:7418:7428	5042203	1	True				
ANR	5042342	ParameterType	int		5042203	0					
ANR	5042343	Identifier	start_y		5042203	1					
ANR	5042344	Parameter	byte * data	236:47:7431:7441	5042203	2	True				
ANR	5042345	ParameterType	byte *		5042203	0					
ANR	5042346	Identifier	data		5042203	1					
ANR	5042347	Parameter	uint size	236:60:7444:7452	5042203	3	True				
ANR	5042348	ParameterType	uint		5042203	0					
ANR	5042349	Identifier	size		5042203	1					
ANR	5042350	Parameter	int * plines_copied	237:17:7472:7489	5042203	4	True				
ANR	5042351	ParameterType	int *		5042203	0					
ANR	5042352	Identifier	plines_copied		5042203	1					
ANR	5042353	Parameter	uint * pbytes_copied	237:37:7492:7511	5042203	5	True				
ANR	5042354	ParameterType	uint *		5042203	0					
ANR	5042355	Identifier	pbytes_copied		5042203	1					
ANR	5042356	CFGEntryNode	ENTRY		5042203		True				
ANR	5042357	CFGExitNode	EXIT		5042203		True				
ANR	5042358	Symbol	* dev		5042203						
ANR	5042359	Symbol	gx_device_raster		5042203						
ANR	5042360	Symbol	"* dev_proc ( dev , get_bits )"		5042203						
ANR	5042361	Symbol	plines_copied		5042203						
ANR	5042362	Symbol	pbytes_copied		5042203						
ANR	5042363	Symbol	code		5042203						
ANR	5042364	Symbol	NULL		5042203						
ANR	5042365	Symbol	data		5042203						
ANR	5042366	Symbol	get_bits		5042203						
ANR	5042367	Symbol	* dev_proc		5042203						
ANR	5042368	Symbol	dev -> height		5042203						
ANR	5042369	Symbol	count		5042203						
ANR	5042370	Symbol	i		5042203						
ANR	5042371	Symbol	dest		5042203						
ANR	5042372	Symbol	* plines_copied		5042203						
ANR	5042373	Symbol	* pbytes_copied		5042203						
ANR	5042374	Symbol	dev		5042203						
ANR	5042375	Symbol	size		5042203						
ANR	5042376	Symbol	dev_proc		5042203						
ANR	5042377	Symbol	start_y		5042203						
ANR	5042378	Symbol	line_size		5042203						
ANR	5042379	Function	gs_currentdevice	262:0:8150:8228							
ANR	5042380	FunctionDef	gs_currentdevice (const gs_gstate * pgs)		5042379	0					
ANR	5042381	CompoundStatement		264:0:8202:8228	5042379	0					
ANR	5042382	ReturnStatement	return pgs -> device ;	265:4:8208:8226	5042379	0	True				
ANR	5042383	PtrMemberAccess	pgs -> device		5042379	0					
ANR	5042384	Identifier	pgs		5042379	0					
ANR	5042385	Identifier	device		5042379	1					
ANR	5042386	ReturnType	gx_device *		5042379	1					
ANR	5042387	Identifier	gs_currentdevice		5042379	2					
ANR	5042388	ParameterList	const gs_gstate * pgs		5042379	3					
ANR	5042389	Parameter	const gs_gstate * pgs	263:17:8179:8199	5042379	0	True				
ANR	5042390	ParameterType	const gs_gstate *		5042379	0					
ANR	5042391	Identifier	pgs		5042379	1					
ANR	5042392	CFGEntryNode	ENTRY		5042379		True				
ANR	5042393	CFGExitNode	EXIT		5042379		True				
ANR	5042394	Symbol	* pgs		5042379						
ANR	5042395	Symbol	pgs -> device		5042379						
ANR	5042396	Symbol	pgs		5042379						
ANR	5042397	Function	gs_devicename	269:0:8263:8338							
ANR	5042398	FunctionDef	gs_devicename (const gx_device * dev)		5042397	0					
ANR	5042399	CompoundStatement		271:0:8313:8338	5042397	0					
ANR	5042400	ReturnStatement	return dev -> dname ;	272:4:8319:8336	5042397	0	True				
ANR	5042401	PtrMemberAccess	dev -> dname		5042397	0					
ANR	5042402	Identifier	dev		5042397	0					
ANR	5042403	Identifier	dname		5042397	1					
ANR	5042404	ReturnType	const char *		5042397	1					
ANR	5042405	Identifier	gs_devicename		5042397	2					
ANR	5042406	ParameterList	const gx_device * dev		5042397	3					
ANR	5042407	Parameter	const gx_device * dev	270:14:8290:8310	5042397	0	True				
ANR	5042408	ParameterType	const gx_device *		5042397	0					
ANR	5042409	Identifier	dev		5042397	1					
ANR	5042410	CFGEntryNode	ENTRY		5042397		True				
ANR	5042411	CFGExitNode	EXIT		5042397		True				
ANR	5042412	Symbol	* dev		5042397						
ANR	5042413	Symbol	dev		5042397						
ANR	5042414	Symbol	dev -> dname		5042397						
ANR	5042415	Function	gs_deviceinitialmatrix	276:0:8383:8577							
ANR	5042416	FunctionDef	"gs_deviceinitialmatrix (gx_device * dev , gs_matrix * pmat)"		5042415	0					
ANR	5042417	CompoundStatement		278:0:8446:8577	5042415	0					
ANR	5042418	ExpressionStatement	"fill_dev_proc ( dev , get_initial_matrix , gx_default_get_initial_matrix )"	279:4:8452:8521	5042415	0	True				
ANR	5042419	CallExpression	"fill_dev_proc ( dev , get_initial_matrix , gx_default_get_initial_matrix )"		5042415	0					
ANR	5042420	Callee	fill_dev_proc		5042415	0					
ANR	5042421	Identifier	fill_dev_proc		5042415	0					
ANR	5042422	ArgumentList	dev		5042415	1					
ANR	5042423	Argument	dev		5042415	0					
ANR	5042424	Identifier	dev		5042415	0					
ANR	5042425	Argument	get_initial_matrix		5042415	1					
ANR	5042426	Identifier	get_initial_matrix		5042415	0					
ANR	5042427	Argument	gx_default_get_initial_matrix		5042415	2					
ANR	5042428	Identifier	gx_default_get_initial_matrix		5042415	0					
ANR	5042429	ExpressionStatement	"( * dev_proc ( dev , get_initial_matrix ) ) ( dev , pmat )"	280:4:8527:8575	5042415	1	True				
ANR	5042430	CallExpression	"( * dev_proc ( dev , get_initial_matrix ) ) ( dev , pmat )"		5042415	0					
ANR	5042431	Callee	"* dev_proc ( dev , get_initial_matrix )"		5042415	0					
ANR	5042432	UnaryOperationExpression	"* dev_proc ( dev , get_initial_matrix )"		5042415	0					
ANR	5042433	UnaryOperator	*		5042415	0					
ANR	5042434	CallExpression	"dev_proc ( dev , get_initial_matrix )"		5042415	1					
ANR	5042435	Callee	dev_proc		5042415	0					
ANR	5042436	Identifier	dev_proc		5042415	0					
ANR	5042437	ArgumentList	dev		5042415	1					
ANR	5042438	Argument	dev		5042415	0					
ANR	5042439	Identifier	dev		5042415	0					
ANR	5042440	Argument	get_initial_matrix		5042415	1					
ANR	5042441	Identifier	get_initial_matrix		5042415	0					
ANR	5042442	ArgumentList	dev		5042415	1					
ANR	5042443	Argument	dev		5042415	0					
ANR	5042444	Identifier	dev		5042415	0					
ANR	5042445	Argument	pmat		5042415	1					
ANR	5042446	Identifier	pmat		5042415	0					
ANR	5042447	ReturnType	void		5042415	1					
ANR	5042448	Identifier	gs_deviceinitialmatrix		5042415	2					
ANR	5042449	ParameterList	"gx_device * dev , gs_matrix * pmat"		5042415	3					
ANR	5042450	Parameter	gx_device * dev	277:23:8411:8425	5042415	0	True				
ANR	5042451	ParameterType	gx_device *		5042415	0					
ANR	5042452	Identifier	dev		5042415	1					
ANR	5042453	Parameter	gs_matrix * pmat	277:40:8428:8443	5042415	1	True				
ANR	5042454	ParameterType	gs_matrix *		5042415	0					
ANR	5042455	Identifier	pmat		5042415	1					
ANR	5042456	CFGEntryNode	ENTRY		5042415		True				
ANR	5042457	CFGExitNode	EXIT		5042415		True				
ANR	5042458	Symbol	get_initial_matrix		5042415						
ANR	5042459	Symbol	dev		5042415						
ANR	5042460	Symbol	pmat		5042415						
ANR	5042461	Symbol	dev_proc		5042415						
ANR	5042462	Symbol	gx_default_get_initial_matrix		5042415						
ANR	5042463	Function	gs_getdevice	284:0:8633:8866							
ANR	5042464	FunctionDef	gs_getdevice (int index)		5042463	0					
ANR	5042465	CompoundStatement		286:0:8675:8866	5042463	0					
ANR	5042466	Statement	const	287:4:8681:8685	5042463	0	True				
ANR	5042467	Statement	gx_device	287:10:8687:8695	5042463	1	True				
ANR	5042468	Statement	*	287:20:8697:8697	5042463	2	True				
ANR	5042469	Statement	const	287:21:8698:8702	5042463	3	True				
ANR	5042470	ExpressionStatement	* list	287:27:8704:8709	5042463	4	True				
ANR	5042471	UnaryOperationExpression	* list		5042463	0					
ANR	5042472	UnaryOperator	*		5042463	0					
ANR	5042473	Identifier	list		5042463	1					
ANR	5042474	IdentifierDeclStatement	"int count = gs_lib_device_list ( & list , NULL ) ;"	288:4:8715:8758	5042463	5	True				
ANR	5042475	IdentifierDecl	"count = gs_lib_device_list ( & list , NULL )"		5042463	0					
ANR	5042476	IdentifierDeclType	int		5042463	0					
ANR	5042477	Identifier	count		5042463	1					
ANR	5042478	AssignmentExpression	"count = gs_lib_device_list ( & list , NULL )"		5042463	2		=			
ANR	5042479	Identifier	count		5042463	0					
ANR	5042480	CallExpression	"gs_lib_device_list ( & list , NULL )"		5042463	1					
ANR	5042481	Callee	gs_lib_device_list		5042463	0					
ANR	5042482	Identifier	gs_lib_device_list		5042463	0					
ANR	5042483	ArgumentList	& list		5042463	1					
ANR	5042484	Argument	& list		5042463	0					
ANR	5042485	UnaryOperationExpression	& list		5042463	0					
ANR	5042486	UnaryOperator	&		5042463	0					
ANR	5042487	Identifier	list		5042463	1					
ANR	5042488	Argument	NULL		5042463	1					
ANR	5042489	Identifier	NULL		5042463	0					
ANR	5042490	IfStatement	if ( index < 0 || index >= count )		5042463	6					
ANR	5042491	Condition	index < 0 || index >= count	290:8:8769:8795	5042463	0	True				
ANR	5042492	OrExpression	index < 0 || index >= count		5042463	0		||			
ANR	5042493	RelationalExpression	index < 0		5042463	0		<			
ANR	5042494	Identifier	index		5042463	0					
ANR	5042495	PrimaryExpression	0		5042463	1					
ANR	5042496	RelationalExpression	index >= count		5042463	1		>=			
ANR	5042497	Identifier	index		5042463	0					
ANR	5042498	Identifier	count		5042463	1					
ANR	5042499	ReturnStatement	return 0 ;	291:8:8806:8814	5042463	1	True				
ANR	5042500	PrimaryExpression	0		5042463	0					
ANR	5042501	ReturnStatement	return list [ index ] ;	292:4:8846:8864	5042463	7	True				
ANR	5042502	ArrayIndexing	list [ index ]		5042463	0					
ANR	5042503	Identifier	list		5042463	0					
ANR	5042504	Identifier	index		5042463	1					
ANR	5042505	ReturnType	const gx_device *		5042463	1					
ANR	5042506	Identifier	gs_getdevice		5042463	2					
ANR	5042507	ParameterList	int index		5042463	3					
ANR	5042508	Parameter	int index	285:13:8664:8672	5042463	0	True				
ANR	5042509	ParameterType	int		5042463	0					
ANR	5042510	Identifier	index		5042463	1					
ANR	5042511	CFGEntryNode	ENTRY		5042463		True				
ANR	5042512	CFGExitNode	EXIT		5042463		True				
ANR	5042513	Symbol	NULL		5042463						
ANR	5042514	Symbol	& list		5042463						
ANR	5042515	Symbol	* list		5042463						
ANR	5042516	Symbol	* index		5042463						
ANR	5042517	Symbol	count		5042463						
ANR	5042518	Symbol	index		5042463						
ANR	5042519	Symbol	list		5042463						
ANR	5042520	Symbol	gs_lib_device_list		5042463						
ANR	5042521	Function	gs_getdefaultlibdevice	296:0:8925:10154							
ANR	5042522	FunctionDef	gs_getdefaultlibdevice (gs_memory_t * mem)		5042521	0					
ANR	5042523	CompoundStatement		298:0:8984:10154	5042521	0					
ANR	5042524	Statement	const	299:4:8990:8994	5042521	0	True				
ANR	5042525	Statement	gx_device	299:10:8996:9004	5042521	1	True				
ANR	5042526	Statement	*	299:20:9006:9006	5042521	2	True				
ANR	5042527	Statement	const	299:21:9007:9011	5042521	3	True				
ANR	5042528	ExpressionStatement	* list	299:27:9013:9018	5042521	4	True				
ANR	5042529	UnaryOperationExpression	* list		5042521	0					
ANR	5042530	UnaryOperator	*		5042521	0					
ANR	5042531	Identifier	list		5042521	1					
ANR	5042532	IdentifierDeclStatement	"int count = gs_lib_device_list ( & list , NULL ) ;"	300:4:9024:9067	5042521	5	True				
ANR	5042533	IdentifierDecl	"count = gs_lib_device_list ( & list , NULL )"		5042521	0					
ANR	5042534	IdentifierDeclType	int		5042521	0					
ANR	5042535	Identifier	count		5042521	1					
ANR	5042536	AssignmentExpression	"count = gs_lib_device_list ( & list , NULL )"		5042521	2		=			
ANR	5042537	Identifier	count		5042521	0					
ANR	5042538	CallExpression	"gs_lib_device_list ( & list , NULL )"		5042521	1					
ANR	5042539	Callee	gs_lib_device_list		5042521	0					
ANR	5042540	Identifier	gs_lib_device_list		5042521	0					
ANR	5042541	ArgumentList	& list		5042521	1					
ANR	5042542	Argument	& list		5042521	0					
ANR	5042543	UnaryOperationExpression	& list		5042521	0					
ANR	5042544	UnaryOperator	&		5042521	0					
ANR	5042545	Identifier	list		5042521	1					
ANR	5042546	Argument	NULL		5042521	1					
ANR	5042547	Identifier	NULL		5042521	0					
ANR	5042548	IdentifierDeclStatement	"const char * name , * end , * fin ;"	301:4:9073:9101	5042521	6	True				
ANR	5042549	IdentifierDecl	* name		5042521	0					
ANR	5042550	IdentifierDeclType	const char *		5042521	0					
ANR	5042551	Identifier	name		5042521	1					
ANR	5042552	IdentifierDecl	* end		5042521	1					
ANR	5042553	IdentifierDeclType	const char *		5042521	0					
ANR	5042554	Identifier	end		5042521	1					
ANR	5042555	IdentifierDecl	* fin		5042521	2					
ANR	5042556	IdentifierDeclType	const char *		5042521	0					
ANR	5042557	Identifier	fin		5042521	1					
ANR	5042558	IdentifierDeclStatement	int i ;	302:4:9107:9112	5042521	7	True				
ANR	5042559	IdentifierDecl	i		5042521	0					
ANR	5042560	IdentifierDeclType	int		5042521	0					
ANR	5042561	Identifier	i		5042521	1					
ANR	5042562	IfStatement	if ( mem && mem -> gs_lib_ctx && mem -> gs_lib_ctx -> default_device_list )		5042521	8					
ANR	5042563	Condition	mem && mem -> gs_lib_ctx && mem -> gs_lib_ctx -> default_device_list	306:8:9250:9311	5042521	0	True				
ANR	5042564	AndExpression	mem && mem -> gs_lib_ctx && mem -> gs_lib_ctx -> default_device_list		5042521	0		&&			
ANR	5042565	Identifier	mem		5042521	0					
ANR	5042566	AndExpression	mem -> gs_lib_ctx && mem -> gs_lib_ctx -> default_device_list		5042521	1		&&			
ANR	5042567	PtrMemberAccess	mem -> gs_lib_ctx		5042521	0					
ANR	5042568	Identifier	mem		5042521	0					
ANR	5042569	Identifier	gs_lib_ctx		5042521	1					
ANR	5042570	PtrMemberAccess	mem -> gs_lib_ctx -> default_device_list		5042521	1					
ANR	5042571	PtrMemberAccess	mem -> gs_lib_ctx		5042521	0					
ANR	5042572	Identifier	mem		5042521	0					
ANR	5042573	Identifier	gs_lib_ctx		5042521	1					
ANR	5042574	Identifier	default_device_list		5042521	1					
ANR	5042575	CompoundStatement		9:72:329:329	5042521	1					
ANR	5042576	ExpressionStatement	name = mem -> gs_lib_ctx -> default_device_list	307:8:9324:9367	5042521	0	True				
ANR	5042577	AssignmentExpression	name = mem -> gs_lib_ctx -> default_device_list		5042521	0		=			
ANR	5042578	Identifier	name		5042521	0					
ANR	5042579	PtrMemberAccess	mem -> gs_lib_ctx -> default_device_list		5042521	1					
ANR	5042580	PtrMemberAccess	mem -> gs_lib_ctx		5042521	0					
ANR	5042581	Identifier	mem		5042521	0					
ANR	5042582	Identifier	gs_lib_ctx		5042521	1					
ANR	5042583	Identifier	default_device_list		5042521	1					
ANR	5042584	ExpressionStatement	fin = name + strlen ( name )	308:8:9377:9402	5042521	1	True				
ANR	5042585	AssignmentExpression	fin = name + strlen ( name )		5042521	0		=			
ANR	5042586	Identifier	fin		5042521	0					
ANR	5042587	AdditiveExpression	name + strlen ( name )		5042521	1		+			
ANR	5042588	Identifier	name		5042521	0					
ANR	5042589	CallExpression	strlen ( name )		5042521	1					
ANR	5042590	Callee	strlen		5042521	0					
ANR	5042591	Identifier	strlen		5042521	0					
ANR	5042592	ArgumentList	name		5042521	1					
ANR	5042593	Argument	name		5042521	0					
ANR	5042594	Identifier	name		5042521	0					
ANR	5042595	ElseStatement	else		5042521	0					
ANR	5042596	CompoundStatement		13:9:434:434	5042521	0					
ANR	5042597	ExpressionStatement	name = gs_dev_defaults	311:8:9429:9451	5042521	0	True				
ANR	5042598	AssignmentExpression	name = gs_dev_defaults		5042521	0		=			
ANR	5042599	Identifier	name		5042521	0					
ANR	5042600	Identifier	gs_dev_defaults		5042521	1					
ANR	5042601	ExpressionStatement	fin = name + strlen ( name )	312:8:9461:9486	5042521	1	True				
ANR	5042602	AssignmentExpression	fin = name + strlen ( name )		5042521	0		=			
ANR	5042603	Identifier	fin		5042521	0					
ANR	5042604	AdditiveExpression	name + strlen ( name )		5042521	1		+			
ANR	5042605	Identifier	name		5042521	0					
ANR	5042606	CallExpression	strlen ( name )		5042521	1					
ANR	5042607	Callee	strlen		5042521	0					
ANR	5042608	Identifier	strlen		5042521	0					
ANR	5042609	ArgumentList	name		5042521	1					
ANR	5042610	Argument	name		5042521	0					
ANR	5042611	Identifier	name		5042521	0					
ANR	5042612	WhileStatement	while ( name < fin )		5042521	9					
ANR	5042613	Condition	name < fin	316:11:9556:9565	5042521	0	True				
ANR	5042614	RelationalExpression	name < fin		5042521	0		<			
ANR	5042615	Identifier	name		5042521	0					
ANR	5042616	Identifier	fin		5042521	1					
ANR	5042617	CompoundStatement		19:23:583:583	5042521	1					
ANR	5042618	WhileStatement	while ( ( name < fin ) && ( * name == ' ' || * name == '\\t' ) )		5042521	0					
ANR	5042619	Condition	( name < fin ) && ( * name == ' ' || * name == '\\t' )	319:13:9629:9675	5042521	0	True				
ANR	5042620	AndExpression	( name < fin ) && ( * name == ' ' || * name == '\\t' )		5042521	0		&&			
ANR	5042621	RelationalExpression	name < fin		5042521	0		<			
ANR	5042622	Identifier	name		5042521	0					
ANR	5042623	Identifier	fin		5042521	1					
ANR	5042624	OrExpression	* name == ' ' || * name == '\\t'		5042521	1		||			
ANR	5042625	EqualityExpression	* name == ' '		5042521	0		==			
ANR	5042626	UnaryOperationExpression	* name		5042521	0					
ANR	5042627	UnaryOperator	*		5042521	0					
ANR	5042628	Identifier	name		5042521	1					
ANR	5042629	PrimaryExpression	' '		5042521	1					
ANR	5042630	EqualityExpression	* name == '\\t'		5042521	1		==			
ANR	5042631	UnaryOperationExpression	* name		5042521	0					
ANR	5042632	UnaryOperator	*		5042521	0					
ANR	5042633	Identifier	name		5042521	1					
ANR	5042634	PrimaryExpression	'\\t'		5042521	1					
ANR	5042635	ExpressionStatement	name ++	320:8:9686:9692	5042521	1	True				
ANR	5042636	PostIncDecOperationExpression	name ++		5042521	0					
ANR	5042637	Identifier	name		5042521	0					
ANR	5042638	IncDec	++		5042521	1					
ANR	5042639	ExpressionStatement	end = name	321:6:9700:9710	5042521	1	True				
ANR	5042640	AssignmentExpression	end = name		5042521	0		=			
ANR	5042641	Identifier	end		5042521	0					
ANR	5042642	Identifier	name		5042521	1					
ANR	5042643	WhileStatement	while ( ( end < fin ) && ( * end != ' ' ) && ( * end != '\\t' ) )		5042521	2					
ANR	5042644	Condition	( end < fin ) && ( * end != ' ' ) && ( * end != '\\t' )	322:13:9725:9770	5042521	0	True				
ANR	5042645	AndExpression	( end < fin ) && ( * end != ' ' ) && ( * end != '\\t' )		5042521	0		&&			
ANR	5042646	RelationalExpression	end < fin		5042521	0		<			
ANR	5042647	Identifier	end		5042521	0					
ANR	5042648	Identifier	fin		5042521	1					
ANR	5042649	AndExpression	( * end != ' ' ) && ( * end != '\\t' )		5042521	1		&&			
ANR	5042650	EqualityExpression	* end != ' '		5042521	0		!=			
ANR	5042651	UnaryOperationExpression	* end		5042521	0					
ANR	5042652	UnaryOperator	*		5042521	0					
ANR	5042653	Identifier	end		5042521	1					
ANR	5042654	PrimaryExpression	' '		5042521	1					
ANR	5042655	EqualityExpression	* end != '\\t'		5042521	1		!=			
ANR	5042656	UnaryOperationExpression	* end		5042521	0					
ANR	5042657	UnaryOperator	*		5042521	0					
ANR	5042658	Identifier	end		5042521	1					
ANR	5042659	PrimaryExpression	'\\t'		5042521	1					
ANR	5042660	ExpressionStatement	end ++	323:8:9781:9786	5042521	1	True				
ANR	5042661	PostIncDecOperationExpression	end ++		5042521	0					
ANR	5042662	Identifier	end		5042521	0					
ANR	5042663	IncDec	++		5042521	1					
ANR	5042664	ForStatement	for ( i = 0 ; i < count ; i ++ )		5042521	3					
ANR	5042665	ForInit	i = 0 ;	326:11:9831:9836	5042521	0	True				
ANR	5042666	AssignmentExpression	i = 0		5042521	0		=			
ANR	5042667	Identifier	i		5042521	0					
ANR	5042668	PrimaryExpression	0		5042521	1					
ANR	5042669	Condition	i < count	326:18:9838:9846	5042521	1	True				
ANR	5042670	RelationalExpression	i < count		5042521	0		<			
ANR	5042671	Identifier	i		5042521	0					
ANR	5042672	Identifier	count		5042521	1					
ANR	5042673	PostIncDecOperationExpression	i ++	326:29:9849:9851	5042521	2	True				
ANR	5042674	Identifier	i		5042521	0					
ANR	5042675	IncDec	++		5042521	1					
ANR	5042676	IfStatement	if ( ( end - name ) == strlen ( list [ i ] -> dname ) )		5042521	3					
ANR	5042677	Condition	( end - name ) == strlen ( list [ i ] -> dname )	327:12:9866:9903	5042521	0	True				
ANR	5042678	EqualityExpression	( end - name ) == strlen ( list [ i ] -> dname )		5042521	0		==			
ANR	5042679	AdditiveExpression	end - name		5042521	0		-			
ANR	5042680	Identifier	end		5042521	0					
ANR	5042681	Identifier	name		5042521	1					
ANR	5042682	CallExpression	strlen ( list [ i ] -> dname )		5042521	1					
ANR	5042683	Callee	strlen		5042521	0					
ANR	5042684	Identifier	strlen		5042521	0					
ANR	5042685	ArgumentList	list [ i ] -> dname		5042521	1					
ANR	5042686	Argument	list [ i ] -> dname		5042521	0					
ANR	5042687	PtrMemberAccess	list [ i ] -> dname		5042521	0					
ANR	5042688	ArrayIndexing	list [ i ]		5042521	0					
ANR	5042689	Identifier	list		5042521	0					
ANR	5042690	Identifier	i		5042521	1					
ANR	5042691	Identifier	dname		5042521	1					
ANR	5042692	IfStatement	"if ( ! memcmp ( name , list [ i ] -> dname , end - name ) )"		5042521	1					
ANR	5042693	Condition	"! memcmp ( name , list [ i ] -> dname , end - name )"	328:14:9920:9960	5042521	0	True				
ANR	5042694	UnaryOperationExpression	"! memcmp ( name , list [ i ] -> dname , end - name )"		5042521	0					
ANR	5042695	UnaryOperator	!		5042521	0					
ANR	5042696	CallExpression	"memcmp ( name , list [ i ] -> dname , end - name )"		5042521	1					
ANR	5042697	Callee	memcmp		5042521	0					
ANR	5042698	Identifier	memcmp		5042521	0					
ANR	5042699	ArgumentList	name		5042521	1					
ANR	5042700	Argument	name		5042521	0					
ANR	5042701	Identifier	name		5042521	0					
ANR	5042702	Argument	list [ i ] -> dname		5042521	1					
ANR	5042703	PtrMemberAccess	list [ i ] -> dname		5042521	0					
ANR	5042704	ArrayIndexing	list [ i ]		5042521	0					
ANR	5042705	Identifier	list		5042521	0					
ANR	5042706	Identifier	i		5042521	1					
ANR	5042707	Identifier	dname		5042521	1					
ANR	5042708	Argument	end - name		5042521	2					
ANR	5042709	AdditiveExpression	end - name		5042521	0		-			
ANR	5042710	Identifier	end		5042521	0					
ANR	5042711	Identifier	name		5042521	1					
ANR	5042712	ReturnStatement	return gs_getdevice ( i ) ;	329:12:9975:9997	5042521	1	True				
ANR	5042713	CallExpression	gs_getdevice ( i )		5042521	0					
ANR	5042714	Callee	gs_getdevice		5042521	0					
ANR	5042715	Identifier	gs_getdevice		5042521	0					
ANR	5042716	ArgumentList	i		5042521	1					
ANR	5042717	Argument	i		5042521	0					
ANR	5042718	Identifier	i		5042521	0					
ANR	5042719	ExpressionStatement	name = end	332:6:10054:10064	5042521	4	True				
ANR	5042720	AssignmentExpression	name = end		5042521	0		=			
ANR	5042721	Identifier	name		5042521	0					
ANR	5042722	Identifier	end		5042521	1					
ANR	5042723	ReturnStatement	return gs_getdevice ( 0 ) ;	336:4:10130:10152	5042521	10	True				
ANR	5042724	CallExpression	gs_getdevice ( 0 )		5042521	0					
ANR	5042725	Callee	gs_getdevice		5042521	0					
ANR	5042726	Identifier	gs_getdevice		5042521	0					
ANR	5042727	ArgumentList	0		5042521	1					
ANR	5042728	Argument	0		5042521	0					
ANR	5042729	PrimaryExpression	0		5042521	0					
ANR	5042730	ReturnType	const gx_device *		5042521	1					
ANR	5042731	Identifier	gs_getdefaultlibdevice		5042521	2					
ANR	5042732	ParameterList	gs_memory_t * mem		5042521	3					
ANR	5042733	Parameter	gs_memory_t * mem	297:23:8966:8981	5042521	0	True				
ANR	5042734	ParameterType	gs_memory_t *		5042521	0					
ANR	5042735	Identifier	mem		5042521	1					
ANR	5042736	CFGEntryNode	ENTRY		5042521		True				
ANR	5042737	CFGExitNode	EXIT		5042521		True				
ANR	5042738	Symbol	fin		5042521						
ANR	5042739	Symbol	gs_getdevice		5042521						
ANR	5042740	Symbol	strlen		5042521						
ANR	5042741	Symbol	* * list		5042521						
ANR	5042742	Symbol	memcmp		5042521						
ANR	5042743	Symbol	mem		5042521						
ANR	5042744	Symbol	& list		5042521						
ANR	5042745	Symbol	end		5042521						
ANR	5042746	Symbol	gs_lib_device_list		5042521						
ANR	5042747	Symbol	* name		5042521						
ANR	5042748	Symbol	gs_dev_defaults		5042521						
ANR	5042749	Symbol	* * i		5042521						
ANR	5042750	Symbol	NULL		5042521						
ANR	5042751	Symbol	count		5042521						
ANR	5042752	Symbol	i		5042521						
ANR	5042753	Symbol	* * mem		5042521						
ANR	5042754	Symbol	list		5042521						
ANR	5042755	Symbol	mem -> gs_lib_ctx -> default_device_list		5042521						
ANR	5042756	Symbol	* i		5042521						
ANR	5042757	Symbol	* list		5042521						
ANR	5042758	Symbol	name		5042521						
ANR	5042759	Symbol	list [ i ] -> dname		5042521						
ANR	5042760	Symbol	* end		5042521						
ANR	5042761	Symbol	* mem -> gs_lib_ctx		5042521						
ANR	5042762	Symbol	mem -> gs_lib_ctx		5042521						
ANR	5042763	Symbol	* mem		5042521						
ANR	5042764	Function	gs_getdefaultdevice	339:0:10157:10244							
ANR	5042765	FunctionDef	gs_getdefaultdevice ()		5042764	0					
ANR	5042766	CompoundStatement		341:0:10201:10244	5042764	0					
ANR	5042767	ReturnStatement	return gs_getdefaultlibdevice ( NULL ) ;	342:4:10207:10242	5042764	0	True				
ANR	5042768	CallExpression	gs_getdefaultlibdevice ( NULL )		5042764	0					
ANR	5042769	Callee	gs_getdefaultlibdevice		5042764	0					
ANR	5042770	Identifier	gs_getdefaultlibdevice		5042764	0					
ANR	5042771	ArgumentList	NULL		5042764	1					
ANR	5042772	Argument	NULL		5042764	0					
ANR	5042773	Identifier	NULL		5042764	0					
ANR	5042774	ReturnType	const gx_device *		5042764	1					
ANR	5042775	Identifier	gs_getdefaultdevice		5042764	2					
ANR	5042776	ParameterList			5042764	3					
ANR	5042777	CFGEntryNode	ENTRY		5042764		True				
ANR	5042778	CFGExitNode	EXIT		5042764		True				
ANR	5042779	Symbol	NULL		5042764						
ANR	5042780	Symbol	gs_getdefaultlibdevice		5042764						
ANR	5042781	Function	gx_device_make_struct_type	346:0:10303:10645							
ANR	5042782	FunctionDef	"gx_device_make_struct_type (gs_memory_struct_type_t * st , const gx_device * dev)"		5042781	0					
ANR	5042783	CompoundStatement		349:0:10420:10645	5042781	0					
ANR	5042784	IfStatement	if ( dev -> stype )		5042781	0					
ANR	5042785	Condition	dev -> stype	350:8:10430:10439	5042781	0	True				
ANR	5042786	PtrMemberAccess	dev -> stype		5042781	0					
ANR	5042787	Identifier	dev		5042781	0					
ANR	5042788	Identifier	stype		5042781	1					
ANR	5042789	ExpressionStatement	* st = * dev -> stype	351:8:10450:10467	5042781	1	True				
ANR	5042790	AssignmentExpression	* st = * dev -> stype		5042781	0		=			
ANR	5042791	UnaryOperationExpression	* st		5042781	0					
ANR	5042792	UnaryOperator	*		5042781	0					
ANR	5042793	Identifier	st		5042781	1					
ANR	5042794	UnaryOperationExpression	* dev -> stype		5042781	1					
ANR	5042795	UnaryOperator	*		5042781	0					
ANR	5042796	PtrMemberAccess	dev -> stype		5042781	1					
ANR	5042797	Identifier	dev		5042781	0					
ANR	5042798	Identifier	stype		5042781	1					
ANR	5042799	ElseStatement	else		5042781	0					
ANR	5042800	IfStatement	"if ( dev_proc ( dev , get_xfont_procs ) == gx_forward_get_xfont_procs )"		5042781	0					
ANR	5042801	Condition	"dev_proc ( dev , get_xfont_procs ) == gx_forward_get_xfont_procs"	352:13:10482:10541	5042781	0	True				
ANR	5042802	EqualityExpression	"dev_proc ( dev , get_xfont_procs ) == gx_forward_get_xfont_procs"		5042781	0		==			
ANR	5042803	CallExpression	"dev_proc ( dev , get_xfont_procs )"		5042781	0					
ANR	5042804	Callee	dev_proc		5042781	0					
ANR	5042805	Identifier	dev_proc		5042781	0					
ANR	5042806	ArgumentList	dev		5042781	1					
ANR	5042807	Argument	dev		5042781	0					
ANR	5042808	Identifier	dev		5042781	0					
ANR	5042809	Argument	get_xfont_procs		5042781	1					
ANR	5042810	Identifier	get_xfont_procs		5042781	0					
ANR	5042811	Identifier	gx_forward_get_xfont_procs		5042781	1					
ANR	5042812	ExpressionStatement	* st = st_device_forward	353:8:10552:10575	5042781	1	True				
ANR	5042813	AssignmentExpression	* st = st_device_forward		5042781	0		=			
ANR	5042814	UnaryOperationExpression	* st		5042781	0					
ANR	5042815	UnaryOperator	*		5042781	0					
ANR	5042816	Identifier	st		5042781	1					
ANR	5042817	Identifier	st_device_forward		5042781	1					
ANR	5042818	ElseStatement	else		5042781	0					
ANR	5042819	ExpressionStatement	* st = st_device	355:8:10594:10609	5042781	0	True				
ANR	5042820	AssignmentExpression	* st = st_device		5042781	0		=			
ANR	5042821	UnaryOperationExpression	* st		5042781	0					
ANR	5042822	UnaryOperator	*		5042781	0					
ANR	5042823	Identifier	st		5042781	1					
ANR	5042824	Identifier	st_device		5042781	1					
ANR	5042825	ExpressionStatement	st -> ssize = dev -> params_size	356:4:10615:10643	5042781	1	True				
ANR	5042826	AssignmentExpression	st -> ssize = dev -> params_size		5042781	0		=			
ANR	5042827	PtrMemberAccess	st -> ssize		5042781	0					
ANR	5042828	Identifier	st		5042781	0					
ANR	5042829	Identifier	ssize		5042781	1					
ANR	5042830	PtrMemberAccess	dev -> params_size		5042781	1					
ANR	5042831	Identifier	dev		5042781	0					
ANR	5042832	Identifier	params_size		5042781	1					
ANR	5042833	ReturnType	static void		5042781	1					
ANR	5042834	Identifier	gx_device_make_struct_type		5042781	2					
ANR	5042835	ParameterList	"gs_memory_struct_type_t * st , const gx_device * dev"		5042781	3					
ANR	5042836	Parameter	gs_memory_struct_type_t * st	347:27:10342:10368	5042781	0	True				
ANR	5042837	ParameterType	gs_memory_struct_type_t *		5042781	0					
ANR	5042838	Identifier	st		5042781	1					
ANR	5042839	Parameter	const gx_device * dev	348:27:10398:10417	5042781	1	True				
ANR	5042840	ParameterType	const gx_device *		5042781	0					
ANR	5042841	Identifier	dev		5042781	1					
ANR	5042842	CFGEntryNode	ENTRY		5042781		True				
ANR	5042843	CFGExitNode	EXIT		5042781		True				
ANR	5042844	Symbol	* dev		5042781						
ANR	5042845	Symbol	st		5042781						
ANR	5042846	Symbol	* st		5042781						
ANR	5042847	Symbol	* * dev		5042781						
ANR	5042848	Symbol	st -> ssize		5042781						
ANR	5042849	Symbol	st_device_forward		5042781						
ANR	5042850	Symbol	dev -> stype		5042781						
ANR	5042851	Symbol	dev -> params_size		5042781						
ANR	5042852	Symbol	dev		5042781						
ANR	5042853	Symbol	st_device		5042781						
ANR	5042854	Symbol	dev_proc		5042781						
ANR	5042855	Symbol	* dev -> stype		5042781						
ANR	5042856	Symbol	get_xfont_procs		5042781						
ANR	5042857	Symbol	gx_forward_get_xfont_procs		5042781						
ANR	5042858	Function	gs_copydevice2	360:0:10680:13477							
ANR	5042859	FunctionDef	"gs_copydevice2 (gx_device * * pnew_dev , const gx_device * dev , bool keep_open , gs_memory_t * mem)"		5042858	0					
ANR	5042860	CompoundStatement		363:0:10795:13477	5042858	0					
ANR	5042861	IdentifierDeclStatement	gx_device * new_dev ;	364:4:10801:10819	5042858	0	True				
ANR	5042862	IdentifierDecl	* new_dev		5042858	0					
ANR	5042863	IdentifierDeclType	gx_device *		5042858	0					
ANR	5042864	Identifier	new_dev		5042858	1					
ANR	5042865	IdentifierDeclStatement	const gs_memory_struct_type_t * std = dev -> stype ;	365:4:10825:10872	5042858	1	True				
ANR	5042866	IdentifierDecl	* std = dev -> stype		5042858	0					
ANR	5042867	IdentifierDeclType	const gs_memory_struct_type_t *		5042858	0					
ANR	5042868	Identifier	std		5042858	1					
ANR	5042869	AssignmentExpression	* std = dev -> stype		5042858	2		=			
ANR	5042870	Identifier	std		5042858	0					
ANR	5042871	PtrMemberAccess	dev -> stype		5042858	1					
ANR	5042872	Identifier	dev		5042858	0					
ANR	5042873	Identifier	stype		5042858	1					
ANR	5042874	IdentifierDeclStatement	const gs_memory_struct_type_t * new_std ;	366:4:10878:10916	5042858	2	True				
ANR	5042875	IdentifierDecl	* new_std		5042858	0					
ANR	5042876	IdentifierDeclType	const gs_memory_struct_type_t *		5042858	0					
ANR	5042877	Identifier	new_std		5042858	1					
ANR	5042878	IdentifierDeclStatement	gs_memory_struct_type_t * a_std = 0 ;	367:4:10922:10956	5042858	3	True				
ANR	5042879	IdentifierDecl	* a_std = 0		5042858	0					
ANR	5042880	IdentifierDeclType	gs_memory_struct_type_t *		5042858	0					
ANR	5042881	Identifier	a_std		5042858	1					
ANR	5042882	AssignmentExpression	* a_std = 0		5042858	2		=			
ANR	5042883	Identifier	a_std		5042858	0					
ANR	5042884	PrimaryExpression	0		5042858	1					
ANR	5042885	IdentifierDeclStatement	int code ;	368:4:10962:10970	5042858	4	True				
ANR	5042886	IdentifierDecl	code		5042858	0					
ANR	5042887	IdentifierDeclType	int		5042858	0					
ANR	5042888	Identifier	code		5042858	1					
ANR	5042889	IfStatement	if ( dev -> stype_is_dynamic )		5042858	5					
ANR	5042890	Condition	dev -> stype_is_dynamic	370:8:10981:11001	5042858	0	True				
ANR	5042891	PtrMemberAccess	dev -> stype_is_dynamic		5042858	0					
ANR	5042892	Identifier	dev		5042858	0					
ANR	5042893	Identifier	stype_is_dynamic		5042858	1					
ANR	5042894	CompoundStatement		8:31:208:208	5042858	1					
ANR	5042895	ExpressionStatement	"a_std = ( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"	375:8:11166:11333	5042858	0	True				
ANR	5042896	AssignmentExpression	"a_std = ( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		5042858	0		=			
ANR	5042897	Identifier	a_std		5042858	0					
ANR	5042898	CastExpression	"( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		5042858	1					
ANR	5042899	CastTarget	gs_memory_struct_type_t *		5042858	0					
ANR	5042900	CallExpression	"gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		5042858	1					
ANR	5042901	Callee	gs_alloc_bytes_immovable		5042858	0					
ANR	5042902	Identifier	gs_alloc_bytes_immovable		5042858	0					
ANR	5042903	ArgumentList	mem -> non_gc_memory		5042858	1					
ANR	5042904	Argument	mem -> non_gc_memory		5042858	0					
ANR	5042905	PtrMemberAccess	mem -> non_gc_memory		5042858	0					
ANR	5042906	Identifier	mem		5042858	0					
ANR	5042907	Identifier	non_gc_memory		5042858	1					
ANR	5042908	Argument	sizeof ( * std )		5042858	1					
ANR	5042909	SizeofExpression	sizeof ( * std )		5042858	0					
ANR	5042910	Sizeof	sizeof		5042858	0					
ANR	5042911	UnaryOperationExpression	* std		5042858	1					
ANR	5042912	UnaryOperator	*		5042858	0					
ANR	5042913	Identifier	std		5042858	1					
ANR	5042914	Argument	"""gs_copydevice(stype)"""		5042858	2					
ANR	5042915	PrimaryExpression	"""gs_copydevice(stype)"""		5042858	0					
ANR	5042916	IfStatement	if ( ! a_std )		5042858	1					
ANR	5042917	Condition	! a_std	378:12:11347:11352	5042858	0	True				
ANR	5042918	UnaryOperationExpression	! a_std		5042858	0					
ANR	5042919	UnaryOperator	!		5042858	0					
ANR	5042920	Identifier	a_std		5042858	1					
ANR	5042921	ExpressionStatement	return_error ( gs_error_VMerror )	379:12:11367:11397	5042858	1	True				
ANR	5042922	CallExpression	return_error ( gs_error_VMerror )		5042858	0					
ANR	5042923	Callee	return_error		5042858	0					
ANR	5042924	Identifier	return_error		5042858	0					
ANR	5042925	ArgumentList	gs_error_VMerror		5042858	1					
ANR	5042926	Argument	gs_error_VMerror		5042858	0					
ANR	5042927	Identifier	gs_error_VMerror		5042858	0					
ANR	5042928	ExpressionStatement	* a_std = * std	380:8:11407:11420	5042858	2	True				
ANR	5042929	AssignmentExpression	* a_std = * std		5042858	0		=			
ANR	5042930	UnaryOperationExpression	* a_std		5042858	0					
ANR	5042931	UnaryOperator	*		5042858	0					
ANR	5042932	Identifier	a_std		5042858	1					
ANR	5042933	UnaryOperationExpression	* std		5042858	1					
ANR	5042934	UnaryOperator	*		5042858	0					
ANR	5042935	Identifier	std		5042858	1					
ANR	5042936	ExpressionStatement	new_std = a_std	381:8:11430:11445	5042858	3	True				
ANR	5042937	AssignmentExpression	new_std = a_std		5042858	0		=			
ANR	5042938	Identifier	new_std		5042858	0					
ANR	5042939	Identifier	a_std		5042858	1					
ANR	5042940	ElseStatement	else		5042858	0					
ANR	5042941	IfStatement	if ( std != 0 && std -> ssize == dev -> params_size )		5042858	0					
ANR	5042942	Condition	std != 0 && std -> ssize == dev -> params_size	382:15:11462:11503	5042858	0	True				
ANR	5042943	AndExpression	std != 0 && std -> ssize == dev -> params_size		5042858	0		&&			
ANR	5042944	EqualityExpression	std != 0		5042858	0		!=			
ANR	5042945	Identifier	std		5042858	0					
ANR	5042946	PrimaryExpression	0		5042858	1					
ANR	5042947	EqualityExpression	std -> ssize == dev -> params_size		5042858	1		==			
ANR	5042948	PtrMemberAccess	std -> ssize		5042858	0					
ANR	5042949	Identifier	std		5042858	0					
ANR	5042950	Identifier	ssize		5042858	1					
ANR	5042951	PtrMemberAccess	dev -> params_size		5042858	1					
ANR	5042952	Identifier	dev		5042858	0					
ANR	5042953	Identifier	params_size		5042858	1					
ANR	5042954	CompoundStatement		20:59:710:710	5042858	1					
ANR	5042955	ExpressionStatement	new_std = std	384:8:11552:11565	5042858	0	True				
ANR	5042956	AssignmentExpression	new_std = std		5042858	0		=			
ANR	5042957	Identifier	new_std		5042858	0					
ANR	5042958	Identifier	std		5042858	1					
ANR	5042959	ElseStatement	else		5042858	0					
ANR	5042960	CompoundStatement		23:11:782:782	5042858	0					
ANR	5042961	ExpressionStatement	"a_std = ( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"	387:8:11645:11812	5042858	0	True				
ANR	5042962	AssignmentExpression	"a_std = ( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		5042858	0		=			
ANR	5042963	Identifier	a_std		5042858	0					
ANR	5042964	CastExpression	"( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		5042858	1					
ANR	5042965	CastTarget	gs_memory_struct_type_t *		5042858	0					
ANR	5042966	CallExpression	"gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		5042858	1					
ANR	5042967	Callee	gs_alloc_bytes_immovable		5042858	0					
ANR	5042968	Identifier	gs_alloc_bytes_immovable		5042858	0					
ANR	5042969	ArgumentList	mem -> non_gc_memory		5042858	1					
ANR	5042970	Argument	mem -> non_gc_memory		5042858	0					
ANR	5042971	PtrMemberAccess	mem -> non_gc_memory		5042858	0					
ANR	5042972	Identifier	mem		5042858	0					
ANR	5042973	Identifier	non_gc_memory		5042858	1					
ANR	5042974	Argument	sizeof ( * std )		5042858	1					
ANR	5042975	SizeofExpression	sizeof ( * std )		5042858	0					
ANR	5042976	Sizeof	sizeof		5042858	0					
ANR	5042977	UnaryOperationExpression	* std		5042858	1					
ANR	5042978	UnaryOperator	*		5042858	0					
ANR	5042979	Identifier	std		5042858	1					
ANR	5042980	Argument	"""gs_copydevice(stype)"""		5042858	2					
ANR	5042981	PrimaryExpression	"""gs_copydevice(stype)"""		5042858	0					
ANR	5042982	IfStatement	if ( ! a_std )		5042858	1					
ANR	5042983	Condition	! a_std	390:12:11826:11831	5042858	0	True				
ANR	5042984	UnaryOperationExpression	! a_std		5042858	0					
ANR	5042985	UnaryOperator	!		5042858	0					
ANR	5042986	Identifier	a_std		5042858	1					
ANR	5042987	ExpressionStatement	return_error ( gs_error_VMerror )	391:12:11846:11876	5042858	1	True				
ANR	5042988	CallExpression	return_error ( gs_error_VMerror )		5042858	0					
ANR	5042989	Callee	return_error		5042858	0					
ANR	5042990	Identifier	return_error		5042858	0					
ANR	5042991	ArgumentList	gs_error_VMerror		5042858	1					
ANR	5042992	Argument	gs_error_VMerror		5042858	0					
ANR	5042993	Identifier	gs_error_VMerror		5042858	0					
ANR	5042994	ExpressionStatement	"gx_device_make_struct_type ( a_std , dev )"	392:8:11886:11924	5042858	2	True				
ANR	5042995	CallExpression	"gx_device_make_struct_type ( a_std , dev )"		5042858	0					
ANR	5042996	Callee	gx_device_make_struct_type		5042858	0					
ANR	5042997	Identifier	gx_device_make_struct_type		5042858	0					
ANR	5042998	ArgumentList	a_std		5042858	1					
ANR	5042999	Argument	a_std		5042858	0					
ANR	5043000	Identifier	a_std		5042858	0					
ANR	5043001	Argument	dev		5042858	1					
ANR	5043002	Identifier	dev		5042858	0					
ANR	5043003	ExpressionStatement	new_std = a_std	393:8:11934:11949	5042858	3	True				
ANR	5043004	AssignmentExpression	new_std = a_std		5042858	0		=			
ANR	5043005	Identifier	new_std		5042858	0					
ANR	5043006	Identifier	a_std		5042858	1					
ANR	5043007	ExpressionStatement	"new_dev = gs_alloc_struct_immovable ( mem , gx_device , new_std , ""gs_copydevice(device)"" )"	399:4:12112:12237	5042858	6	True				
ANR	5043008	AssignmentExpression	"new_dev = gs_alloc_struct_immovable ( mem , gx_device , new_std , ""gs_copydevice(device)"" )"		5042858	0		=			
ANR	5043009	Identifier	new_dev		5042858	0					
ANR	5043010	CallExpression	"gs_alloc_struct_immovable ( mem , gx_device , new_std , ""gs_copydevice(device)"" )"		5042858	1					
ANR	5043011	Callee	gs_alloc_struct_immovable		5042858	0					
ANR	5043012	Identifier	gs_alloc_struct_immovable		5042858	0					
ANR	5043013	ArgumentList	mem		5042858	1					
ANR	5043014	Argument	mem		5042858	0					
ANR	5043015	Identifier	mem		5042858	0					
ANR	5043016	Argument	gx_device		5042858	1					
ANR	5043017	Identifier	gx_device		5042858	0					
ANR	5043018	Argument	new_std		5042858	2					
ANR	5043019	Identifier	new_std		5042858	0					
ANR	5043020	Argument	"""gs_copydevice(device)"""		5042858	3					
ANR	5043021	PrimaryExpression	"""gs_copydevice(device)"""		5042858	0					
ANR	5043022	IfStatement	if ( new_dev == 0 )		5042858	7					
ANR	5043023	Condition	new_dev == 0	401:8:12247:12258	5042858	0	True				
ANR	5043024	EqualityExpression	new_dev == 0		5042858	0		==			
ANR	5043025	Identifier	new_dev		5042858	0					
ANR	5043026	PrimaryExpression	0		5042858	1					
ANR	5043027	CompoundStatement		39:22:1465:1465	5042858	1					
ANR	5043028	ExpressionStatement	"gs_free_object ( mem -> non_gc_memory , a_std , ""gs_copydevice(stype)"" )"	402:8:12271:12336	5042858	0	True				
ANR	5043029	CallExpression	"gs_free_object ( mem -> non_gc_memory , a_std , ""gs_copydevice(stype)"" )"		5042858	0					
ANR	5043030	Callee	gs_free_object		5042858	0					
ANR	5043031	Identifier	gs_free_object		5042858	0					
ANR	5043032	ArgumentList	mem -> non_gc_memory		5042858	1					
ANR	5043033	Argument	mem -> non_gc_memory		5042858	0					
ANR	5043034	PtrMemberAccess	mem -> non_gc_memory		5042858	0					
ANR	5043035	Identifier	mem		5042858	0					
ANR	5043036	Identifier	non_gc_memory		5042858	1					
ANR	5043037	Argument	a_std		5042858	1					
ANR	5043038	Identifier	a_std		5042858	0					
ANR	5043039	Argument	"""gs_copydevice(stype)"""		5042858	2					
ANR	5043040	PrimaryExpression	"""gs_copydevice(stype)"""		5042858	0					
ANR	5043041	ExpressionStatement	return_error ( gs_error_VMerror )	403:8:12346:12376	5042858	1	True				
ANR	5043042	CallExpression	return_error ( gs_error_VMerror )		5042858	0					
ANR	5043043	Callee	return_error		5042858	0					
ANR	5043044	Identifier	return_error		5042858	0					
ANR	5043045	ArgumentList	gs_error_VMerror		5042858	1					
ANR	5043046	Argument	gs_error_VMerror		5042858	0					
ANR	5043047	Identifier	gs_error_VMerror		5042858	0					
ANR	5043048	ExpressionStatement	"gx_device_init ( new_dev , dev , mem , false )"	405:4:12388:12428	5042858	8	True				
ANR	5043049	CallExpression	"gx_device_init ( new_dev , dev , mem , false )"		5042858	0					
ANR	5043050	Callee	gx_device_init		5042858	0					
ANR	5043051	Identifier	gx_device_init		5042858	0					
ANR	5043052	ArgumentList	new_dev		5042858	1					
ANR	5043053	Argument	new_dev		5042858	0					
ANR	5043054	Identifier	new_dev		5042858	0					
ANR	5043055	Argument	dev		5042858	1					
ANR	5043056	Identifier	dev		5042858	0					
ANR	5043057	Argument	mem		5042858	2					
ANR	5043058	Identifier	mem		5042858	0					
ANR	5043059	Argument	false		5042858	3					
ANR	5043060	Identifier	false		5042858	0					
ANR	5043061	ExpressionStatement	gx_device_set_procs ( new_dev )	406:4:12434:12462	5042858	9	True				
ANR	5043062	CallExpression	gx_device_set_procs ( new_dev )		5042858	0					
ANR	5043063	Callee	gx_device_set_procs		5042858	0					
ANR	5043064	Identifier	gx_device_set_procs		5042858	0					
ANR	5043065	ArgumentList	new_dev		5042858	1					
ANR	5043066	Argument	new_dev		5042858	0					
ANR	5043067	Identifier	new_dev		5042858	0					
ANR	5043068	ExpressionStatement	new_dev -> stype = new_std	407:4:12468:12492	5042858	10	True				
ANR	5043069	AssignmentExpression	new_dev -> stype = new_std		5042858	0		=			
ANR	5043070	PtrMemberAccess	new_dev -> stype		5042858	0					
ANR	5043071	Identifier	new_dev		5042858	0					
ANR	5043072	Identifier	stype		5042858	1					
ANR	5043073	Identifier	new_std		5042858	1					
ANR	5043074	ExpressionStatement	new_dev -> stype_is_dynamic = new_std != std	408:4:12498:12540	5042858	11	True				
ANR	5043075	AssignmentExpression	new_dev -> stype_is_dynamic = new_std != std		5042858	0		=			
ANR	5043076	PtrMemberAccess	new_dev -> stype_is_dynamic		5042858	0					
ANR	5043077	Identifier	new_dev		5042858	0					
ANR	5043078	Identifier	stype_is_dynamic		5042858	1					
ANR	5043079	EqualityExpression	new_std != std		5042858	1		!=			
ANR	5043080	Identifier	new_std		5042858	0					
ANR	5043081	Identifier	std		5042858	1					
ANR	5043082	ExpressionStatement	new_dev -> is_open = dev -> is_open && keep_open	416:4:12900:12944	5042858	12	True				
ANR	5043083	AssignmentExpression	new_dev -> is_open = dev -> is_open && keep_open		5042858	0		=			
ANR	5043084	PtrMemberAccess	new_dev -> is_open		5042858	0					
ANR	5043085	Identifier	new_dev		5042858	0					
ANR	5043086	Identifier	is_open		5042858	1					
ANR	5043087	AndExpression	dev -> is_open && keep_open		5042858	1		&&			
ANR	5043088	PtrMemberAccess	dev -> is_open		5042858	0					
ANR	5043089	Identifier	dev		5042858	0					
ANR	5043090	Identifier	is_open		5042858	1					
ANR	5043091	Identifier	keep_open		5042858	1					
ANR	5043092	ExpressionStatement	"fill_dev_proc ( new_dev , finish_copydevice , gx_default_finish_copydevice )"	417:4:12950:13021	5042858	13	True				
ANR	5043093	CallExpression	"fill_dev_proc ( new_dev , finish_copydevice , gx_default_finish_copydevice )"		5042858	0					
ANR	5043094	Callee	fill_dev_proc		5042858	0					
ANR	5043095	Identifier	fill_dev_proc		5042858	0					
ANR	5043096	ArgumentList	new_dev		5042858	1					
ANR	5043097	Argument	new_dev		5042858	0					
ANR	5043098	Identifier	new_dev		5042858	0					
ANR	5043099	Argument	finish_copydevice		5042858	1					
ANR	5043100	Identifier	finish_copydevice		5042858	0					
ANR	5043101	Argument	gx_default_finish_copydevice		5042858	2					
ANR	5043102	Identifier	gx_default_finish_copydevice		5042858	0					
ANR	5043103	ExpressionStatement	"code = dev_proc ( new_dev , finish_copydevice ) ( new_dev , dev )"	418:4:13027:13084	5042858	14	True				
ANR	5043104	AssignmentExpression	"code = dev_proc ( new_dev , finish_copydevice ) ( new_dev , dev )"		5042858	0		=			
ANR	5043105	Identifier	code		5042858	0					
ANR	5043106	CallExpression	"dev_proc ( new_dev , finish_copydevice ) ( new_dev , dev )"		5042858	1					
ANR	5043107	Callee	"dev_proc ( new_dev , finish_copydevice )"		5042858	0					
ANR	5043108	CallExpression	"dev_proc ( new_dev , finish_copydevice )"		5042858	0					
ANR	5043109	Callee	dev_proc		5042858	0					
ANR	5043110	Identifier	dev_proc		5042858	0					
ANR	5043111	ArgumentList	new_dev		5042858	1					
ANR	5043112	Argument	new_dev		5042858	0					
ANR	5043113	Identifier	new_dev		5042858	0					
ANR	5043114	Argument	finish_copydevice		5042858	1					
ANR	5043115	Identifier	finish_copydevice		5042858	0					
ANR	5043116	ArgumentList	new_dev		5042858	1					
ANR	5043117	Argument	new_dev		5042858	0					
ANR	5043118	Identifier	new_dev		5042858	0					
ANR	5043119	Argument	dev		5042858	1					
ANR	5043120	Identifier	dev		5042858	0					
ANR	5043121	IfStatement	if ( code < 0 )		5042858	15					
ANR	5043122	Condition	code < 0	419:8:13094:13101	5042858	0	True				
ANR	5043123	RelationalExpression	code < 0		5042858	0		<			
ANR	5043124	Identifier	code		5042858	0					
ANR	5043125	PrimaryExpression	0		5042858	1					
ANR	5043126	CompoundStatement		57:18:2308:2308	5042858	1					
ANR	5043127	ExpressionStatement	"gs_free_object ( mem , new_dev , ""gs_copydevice(device)"" )"	420:8:13114:13167	5042858	0	True				
ANR	5043128	CallExpression	"gs_free_object ( mem , new_dev , ""gs_copydevice(device)"" )"		5042858	0					
ANR	5043129	Callee	gs_free_object		5042858	0					
ANR	5043130	Identifier	gs_free_object		5042858	0					
ANR	5043131	ArgumentList	mem		5042858	1					
ANR	5043132	Argument	mem		5042858	0					
ANR	5043133	Identifier	mem		5042858	0					
ANR	5043134	Argument	new_dev		5042858	1					
ANR	5043135	Identifier	new_dev		5042858	0					
ANR	5043136	Argument	"""gs_copydevice(device)"""		5042858	2					
ANR	5043137	PrimaryExpression	"""gs_copydevice(device)"""		5042858	0					
ANR	5043138	Statement	which	422:9:13234:13238	5042858	1	True				
ANR	5043139	Statement	closes	422:15:13240:13245	5042858	2	True				
ANR	5043140	Statement	the	422:22:13247:13249	5042858	3	True				
ANR	5043141	Statement	device	422:26:13251:13256	5042858	4	True				
ANR	5043142	Statement	and	422:33:13258:13260	5042858	5	True				
ANR	5043143	Statement	releaszes	422:37:13262:13270	5042858	6	True				
ANR	5043144	Statement	its	422:47:13272:13274	5042858	7	True				
ANR	5043145	Statement	stype	422:51:13276:13280	5042858	8	True				
ANR	5043146	Statement	","	422:56:13281:13281	5042858	9	True				
ANR	5043147	Statement	i	422:58:13283:13283	5042858	10	True				
ANR	5043148	Statement	.	422:59:13284:13284	5042858	11	True				
ANR	5043149	Statement	e	422:60:13285:13285	5042858	12	True				
ANR	5043150	Statement	.	422:61:13286:13286	5042858	13	True				
ANR	5043151	Statement	a_std	422:63:13288:13292	5042858	14	True				
ANR	5043152	Statement	.	422:68:13293:13293	5042858	15	True				
ANR	5043153	Statement	*	422:70:13295:13295	5042858	16	True				
ANR	5043154	Statement	/	422:71:13296:13296	5042858	17	True				
ANR	5043155	IfStatement	if ( a_std )		5042858	18					
ANR	5043156	Condition	a_std	423:12:13310:13314	5042858	0	True				
ANR	5043157	Identifier	a_std		5042858	0					
ANR	5043158	ExpressionStatement	"gs_free_object ( dev -> memory -> non_gc_memory , a_std , ""gs_copydevice(stype)"" )"	424:12:13329:13402	5042858	1	True				
ANR	5043159	CallExpression	"gs_free_object ( dev -> memory -> non_gc_memory , a_std , ""gs_copydevice(stype)"" )"		5042858	0					
ANR	5043160	Callee	gs_free_object		5042858	0					
ANR	5043161	Identifier	gs_free_object		5042858	0					
ANR	5043162	ArgumentList	dev -> memory -> non_gc_memory		5042858	1					
ANR	5043163	Argument	dev -> memory -> non_gc_memory		5042858	0					
ANR	5043164	PtrMemberAccess	dev -> memory -> non_gc_memory		5042858	0					
ANR	5043165	PtrMemberAccess	dev -> memory		5042858	0					
ANR	5043166	Identifier	dev		5042858	0					
ANR	5043167	Identifier	memory		5042858	1					
ANR	5043168	Identifier	non_gc_memory		5042858	1					
ANR	5043169	Argument	a_std		5042858	1					
ANR	5043170	Identifier	a_std		5042858	0					
ANR	5043171	Argument	"""gs_copydevice(stype)"""		5042858	2					
ANR	5043172	PrimaryExpression	"""gs_copydevice(stype)"""		5042858	0					
ANR	5043173	ReturnStatement	return code ;	426:8:13419:13430	5042858	19	True				
ANR	5043174	Identifier	code		5042858	0					
ANR	5043175	ExpressionStatement	* pnew_dev = new_dev	428:4:13442:13461	5042858	16	True				
ANR	5043176	AssignmentExpression	* pnew_dev = new_dev		5042858	0		=			
ANR	5043177	UnaryOperationExpression	* pnew_dev		5042858	0					
ANR	5043178	UnaryOperator	*		5042858	0					
ANR	5043179	Identifier	pnew_dev		5042858	1					
ANR	5043180	Identifier	new_dev		5042858	1					
ANR	5043181	ReturnStatement	return 0 ;	429:4:13467:13475	5042858	17	True				
ANR	5043182	PrimaryExpression	0		5042858	0					
ANR	5043183	ReturnType	int		5042858	1					
ANR	5043184	Identifier	gs_copydevice2		5042858	2					
ANR	5043185	ParameterList	"gx_device * * pnew_dev , const gx_device * dev , bool keep_open , gs_memory_t * mem"		5042858	3					
ANR	5043186	Parameter	gx_device * * pnew_dev	361:15:10699:10719	5042858	0	True				
ANR	5043187	ParameterType	gx_device * *		5042858	0					
ANR	5043188	Identifier	pnew_dev		5042858	1					
ANR	5043189	Parameter	const gx_device * dev	361:38:10722:10742	5042858	1	True				
ANR	5043190	ParameterType	const gx_device *		5042858	0					
ANR	5043191	Identifier	dev		5042858	1					
ANR	5043192	Parameter	bool keep_open	361:61:10745:10758	5042858	2	True				
ANR	5043193	ParameterType	bool		5042858	0					
ANR	5043194	Identifier	keep_open		5042858	1					
ANR	5043195	Parameter	gs_memory_t * mem	362:15:10776:10792	5042858	3	True				
ANR	5043196	ParameterType	gs_memory_t *		5042858	0					
ANR	5043197	Identifier	mem		5042858	1					
ANR	5043198	CFGEntryNode	ENTRY		5042858		True				
ANR	5043199	CFGExitNode	EXIT		5042858		True				
ANR	5043200	Symbol	* dev		5042858						
ANR	5043201	Symbol	gx_default_finish_copydevice		5042858						
ANR	5043202	Symbol	pnew_dev		5042858						
ANR	5043203	Symbol	dev -> stype_is_dynamic		5042858						
ANR	5043204	Symbol	code		5042858						
ANR	5043205	Symbol	new_std		5042858						
ANR	5043206	Symbol	a_std		5042858						
ANR	5043207	Symbol	gs_alloc_struct_immovable		5042858						
ANR	5043208	Symbol	std -> ssize		5042858						
ANR	5043209	Symbol	* std		5042858						
ANR	5043210	Symbol	new_dev -> is_open		5042858						
ANR	5043211	Symbol	finish_copydevice		5042858						
ANR	5043212	Symbol	keep_open		5042858						
ANR	5043213	Symbol	new_dev -> stype		5042858						
ANR	5043214	Symbol	dev		5042858						
ANR	5043215	Symbol	mem		5042858						
ANR	5043216	Symbol	gs_alloc_bytes_immovable		5042858						
ANR	5043217	Symbol	gx_device		5042858						
ANR	5043218	Symbol	dev_proc		5042858						
ANR	5043219	Symbol	* new_dev		5042858						
ANR	5043220	Symbol	std		5042858						
ANR	5043221	Symbol	* pnew_dev		5042858						
ANR	5043222	Symbol	false		5042858						
ANR	5043223	Symbol	* * dev		5042858						
ANR	5043224	Symbol	* a_std		5042858						
ANR	5043225	Symbol	dev -> memory -> non_gc_memory		5042858						
ANR	5043226	Symbol	dev -> stype		5042858						
ANR	5043227	Symbol	mem -> non_gc_memory		5042858						
ANR	5043228	Symbol	dev -> params_size		5042858						
ANR	5043229	Symbol	gs_error_VMerror		5042858						
ANR	5043230	Symbol	dev -> memory		5042858						
ANR	5043231	Symbol	dev -> is_open		5042858						
ANR	5043232	Symbol	new_dev		5042858						
ANR	5043233	Symbol	new_dev -> stype_is_dynamic		5042858						
ANR	5043234	Symbol	* mem		5042858						
ANR	5043235	Symbol	* dev -> memory		5042858						
ANR	5043236	Function	gs_copydevice	431:0:13479:13618							
ANR	5043237	FunctionDef	"gs_copydevice (gx_device * * pnew_dev , const gx_device * dev , gs_memory_t * mem)"		5043236	0					
ANR	5043238	CompoundStatement		433:0:13562:13618	5043236	0					
ANR	5043239	ReturnStatement	"return gs_copydevice2 ( pnew_dev , dev , false , mem ) ;"	434:4:13568:13616	5043236	0	True				
ANR	5043240	CallExpression	"gs_copydevice2 ( pnew_dev , dev , false , mem )"		5043236	0					
ANR	5043241	Callee	gs_copydevice2		5043236	0					
ANR	5043242	Identifier	gs_copydevice2		5043236	0					
ANR	5043243	ArgumentList	pnew_dev		5043236	1					
ANR	5043244	Argument	pnew_dev		5043236	0					
ANR	5043245	Identifier	pnew_dev		5043236	0					
ANR	5043246	Argument	dev		5043236	1					
ANR	5043247	Identifier	dev		5043236	0					
ANR	5043248	Argument	false		5043236	2					
ANR	5043249	Identifier	false		5043236	0					
ANR	5043250	Argument	mem		5043236	3					
ANR	5043251	Identifier	mem		5043236	0					
ANR	5043252	ReturnType	int		5043236	1					
ANR	5043253	Identifier	gs_copydevice		5043236	2					
ANR	5043254	ParameterList	"gx_device * * pnew_dev , const gx_device * dev , gs_memory_t * mem"		5043236	3					
ANR	5043255	Parameter	gx_device * * pnew_dev	432:14:13497:13517	5043236	0	True				
ANR	5043256	ParameterType	gx_device * *		5043236	0					
ANR	5043257	Identifier	pnew_dev		5043236	1					
ANR	5043258	Parameter	const gx_device * dev	432:37:13520:13540	5043236	1	True				
ANR	5043259	ParameterType	const gx_device *		5043236	0					
ANR	5043260	Identifier	dev		5043236	1					
ANR	5043261	Parameter	gs_memory_t * mem	432:60:13543:13559	5043236	2	True				
ANR	5043262	ParameterType	gs_memory_t *		5043236	0					
ANR	5043263	Identifier	mem		5043236	1					
ANR	5043264	CFGEntryNode	ENTRY		5043236		True				
ANR	5043265	CFGExitNode	EXIT		5043236		True				
ANR	5043266	Symbol	gs_copydevice2		5043236						
ANR	5043267	Symbol	pnew_dev		5043236						
ANR	5043268	Symbol	dev		5043236						
ANR	5043269	Symbol	mem		5043236						
ANR	5043270	Symbol	false		5043236						
ANR	5043271	Function	gs_opendevice	439:0:13722:14034							
ANR	5043272	FunctionDef	gs_opendevice (gx_device * dev)		5043271	0					
ANR	5043273	CompoundStatement		441:0:13756:14034	5043271	0					
ANR	5043274	IfStatement	if ( dev -> is_open )		5043271	0					
ANR	5043275	Condition	dev -> is_open	442:8:13766:13777	5043271	0	True				
ANR	5043276	PtrMemberAccess	dev -> is_open		5043271	0					
ANR	5043277	Identifier	dev		5043271	0					
ANR	5043278	Identifier	is_open		5043271	1					
ANR	5043279	ReturnStatement	return 0 ;	443:8:13788:13796	5043271	1	True				
ANR	5043280	PrimaryExpression	0		5043271	0					
ANR	5043281	ExpressionStatement	check_device_separable ( dev )	444:4:13802:13829	5043271	1	True				
ANR	5043282	CallExpression	check_device_separable ( dev )		5043271	0					
ANR	5043283	Callee	check_device_separable		5043271	0					
ANR	5043284	Identifier	check_device_separable		5043271	0					
ANR	5043285	ArgumentList	dev		5043271	1					
ANR	5043286	Argument	dev		5043271	0					
ANR	5043287	Identifier	dev		5043271	0					
ANR	5043288	ExpressionStatement	gx_device_fill_in_procs ( dev )	445:4:13835:13863	5043271	2	True				
ANR	5043289	CallExpression	gx_device_fill_in_procs ( dev )		5043271	0					
ANR	5043290	Callee	gx_device_fill_in_procs		5043271	0					
ANR	5043291	Identifier	gx_device_fill_in_procs		5043271	0					
ANR	5043292	ArgumentList	dev		5043271	1					
ANR	5043293	Argument	dev		5043271	0					
ANR	5043294	Identifier	dev		5043271	0					
ANR	5043295	CompoundStatement		7:8:122:167	5043271	3					
ANR	5043296	IdentifierDeclStatement	"int code = ( * dev_proc ( dev , open_device ) ) ( dev ) ;"	447:8:13879:13924	5043271	0	True				
ANR	5043297	IdentifierDecl	"code = ( * dev_proc ( dev , open_device ) ) ( dev )"		5043271	0					
ANR	5043298	IdentifierDeclType	int		5043271	0					
ANR	5043299	Identifier	code		5043271	1					
ANR	5043300	AssignmentExpression	"code = ( * dev_proc ( dev , open_device ) ) ( dev )"		5043271	2		=			
ANR	5043301	Identifier	code		5043271	0					
ANR	5043302	CallExpression	"( * dev_proc ( dev , open_device ) ) ( dev )"		5043271	1					
ANR	5043303	Callee	"* dev_proc ( dev , open_device )"		5043271	0					
ANR	5043304	UnaryOperationExpression	"* dev_proc ( dev , open_device )"		5043271	0					
ANR	5043305	UnaryOperator	*		5043271	0					
ANR	5043306	CallExpression	"dev_proc ( dev , open_device )"		5043271	1					
ANR	5043307	Callee	dev_proc		5043271	0					
ANR	5043308	Identifier	dev_proc		5043271	0					
ANR	5043309	ArgumentList	dev		5043271	1					
ANR	5043310	Argument	dev		5043271	0					
ANR	5043311	Identifier	dev		5043271	0					
ANR	5043312	Argument	open_device		5043271	1					
ANR	5043313	Identifier	open_device		5043271	0					
ANR	5043314	ArgumentList	dev		5043271	1					
ANR	5043315	Argument	dev		5043271	0					
ANR	5043316	Identifier	dev		5043271	0					
ANR	5043317	IfStatement	if ( code < 0 )		5043271	1					
ANR	5043318	Condition	code < 0	449:12:13939:13946	5043271	0	True				
ANR	5043319	RelationalExpression	code < 0		5043271	0		<			
ANR	5043320	Identifier	code		5043271	0					
ANR	5043321	PrimaryExpression	0		5043271	1					
ANR	5043322	ExpressionStatement	return_error ( code )	450:12:13961:13979	5043271	1	True				
ANR	5043323	CallExpression	return_error ( code )		5043271	0					
ANR	5043324	Callee	return_error		5043271	0					
ANR	5043325	Identifier	return_error		5043271	0					
ANR	5043326	ArgumentList	code		5043271	1					
ANR	5043327	Argument	code		5043271	0					
ANR	5043328	Identifier	code		5043271	0					
ANR	5043329	ExpressionStatement	dev -> is_open = true	451:8:13989:14008	5043271	2	True				
ANR	5043330	AssignmentExpression	dev -> is_open = true		5043271	0		=			
ANR	5043331	PtrMemberAccess	dev -> is_open		5043271	0					
ANR	5043332	Identifier	dev		5043271	0					
ANR	5043333	Identifier	is_open		5043271	1					
ANR	5043334	Identifier	true		5043271	1					
ANR	5043335	ReturnStatement	return 1 ;	452:8:14018:14026	5043271	3	True				
ANR	5043336	PrimaryExpression	1		5043271	0					
ANR	5043337	ReturnType	int		5043271	1					
ANR	5043338	Identifier	gs_opendevice		5043271	2					
ANR	5043339	ParameterList	gx_device * dev		5043271	3					
ANR	5043340	Parameter	gx_device * dev	440:14:13740:13753	5043271	0	True				
ANR	5043341	ParameterType	gx_device *		5043271	0					
ANR	5043342	Identifier	dev		5043271	1					
ANR	5043343	CFGEntryNode	ENTRY		5043271		True				
ANR	5043344	CFGExitNode	EXIT		5043271		True				
ANR	5043345	Symbol	* dev		5043271						
ANR	5043346	Symbol	dev -> is_open		5043271						
ANR	5043347	Symbol	code		5043271						
ANR	5043348	Symbol	dev		5043271						
ANR	5043349	Symbol	dev_proc		5043271						
ANR	5043350	Symbol	* dev_proc		5043271						
ANR	5043351	Symbol	"* dev_proc ( dev , open_device )"		5043271						
ANR	5043352	Symbol	true		5043271						
ANR	5043353	Symbol	open_device		5043271						
ANR	5043354	Function	gs_gstate_update_device	456:0:14037:14175							
ANR	5043355	FunctionDef	"gs_gstate_update_device (gs_gstate * pgs , gx_device * dev)"		5043354	0					
ANR	5043356	CompoundStatement		458:0:14105:14175	5043354	0					
ANR	5043357	ExpressionStatement	"gx_set_cmap_procs ( pgs , dev )"	459:4:14111:14138	5043354	0	True				
ANR	5043358	CallExpression	"gx_set_cmap_procs ( pgs , dev )"		5043354	0					
ANR	5043359	Callee	gx_set_cmap_procs		5043354	0					
ANR	5043360	Identifier	gx_set_cmap_procs		5043354	0					
ANR	5043361	ArgumentList	pgs		5043354	1					
ANR	5043362	Argument	pgs		5043354	0					
ANR	5043363	Identifier	pgs		5043354	0					
ANR	5043364	Argument	dev		5043354	1					
ANR	5043365	Identifier	dev		5043354	0					
ANR	5043366	ExpressionStatement	gx_unset_both_dev_colors ( pgs )	460:4:14144:14173	5043354	1	True				
ANR	5043367	CallExpression	gx_unset_both_dev_colors ( pgs )		5043354	0					
ANR	5043368	Callee	gx_unset_both_dev_colors		5043354	0					
ANR	5043369	Identifier	gx_unset_both_dev_colors		5043354	0					
ANR	5043370	ArgumentList	pgs		5043354	1					
ANR	5043371	Argument	pgs		5043354	0					
ANR	5043372	Identifier	pgs		5043354	0					
ANR	5043373	ReturnType	static void		5043354	1					
ANR	5043374	Identifier	gs_gstate_update_device		5043354	2					
ANR	5043375	ParameterList	"gs_gstate * pgs , gx_device * dev"		5043354	3					
ANR	5043376	Parameter	gs_gstate * pgs	457:24:14073:14086	5043354	0	True				
ANR	5043377	ParameterType	gs_gstate *		5043354	0					
ANR	5043378	Identifier	pgs		5043354	1					
ANR	5043379	Parameter	gx_device * dev	457:40:14089:14102	5043354	1	True				
ANR	5043380	ParameterType	gx_device *		5043354	0					
ANR	5043381	Identifier	dev		5043354	1					
ANR	5043382	CFGEntryNode	ENTRY		5043354		True				
ANR	5043383	CFGExitNode	EXIT		5043354		True				
ANR	5043384	Symbol	dev		5043354						
ANR	5043385	Symbol	pgs		5043354						
ANR	5043386	Function	gs_gstate_putdeviceparams	463:0:14178:14493							
ANR	5043387	FunctionDef	"gs_gstate_putdeviceparams (gs_gstate * pgs , gx_device * dev , gs_param_list * plist)"		5043386	0					
ANR	5043388	CompoundStatement		465:0:14262:14493	5043386	0					
ANR	5043389	IdentifierDeclStatement	int code ;	466:4:14268:14276	5043386	0	True				
ANR	5043390	IdentifierDecl	code		5043386	0					
ANR	5043391	IdentifierDeclType	int		5043386	0					
ANR	5043392	Identifier	code		5043386	1					
ANR	5043393	IdentifierDeclStatement	gx_device * dev2 ;	467:4:14282:14297	5043386	1	True				
ANR	5043394	IdentifierDecl	* dev2		5043386	0					
ANR	5043395	IdentifierDeclType	gx_device *		5043386	0					
ANR	5043396	Identifier	dev2		5043386	1					
ANR	5043397	IfStatement	if ( dev )		5043386	2					
ANR	5043398	Condition	dev	469:8:14308:14310	5043386	0	True				
ANR	5043399	Identifier	dev		5043386	0					
ANR	5043400	ExpressionStatement	dev2 = dev	470:7:14320:14330	5043386	1	True				
ANR	5043401	AssignmentExpression	dev2 = dev		5043386	0		=			
ANR	5043402	Identifier	dev2		5043386	0					
ANR	5043403	Identifier	dev		5043386	1					
ANR	5043404	ElseStatement	else		5043386	0					
ANR	5043405	ExpressionStatement	dev2 = pgs -> device	472:7:14348:14366	5043386	0	True				
ANR	5043406	AssignmentExpression	dev2 = pgs -> device		5043386	0		=			
ANR	5043407	Identifier	dev2		5043386	0					
ANR	5043408	PtrMemberAccess	pgs -> device		5043386	1					
ANR	5043409	Identifier	pgs		5043386	0					
ANR	5043410	Identifier	device		5043386	1					
ANR	5043411	ExpressionStatement	"code = gs_putdeviceparams ( dev2 , plist )"	474:4:14373:14411	5043386	3	True				
ANR	5043412	AssignmentExpression	"code = gs_putdeviceparams ( dev2 , plist )"		5043386	0		=			
ANR	5043413	Identifier	code		5043386	0					
ANR	5043414	CallExpression	"gs_putdeviceparams ( dev2 , plist )"		5043386	1					
ANR	5043415	Callee	gs_putdeviceparams		5043386	0					
ANR	5043416	Identifier	gs_putdeviceparams		5043386	0					
ANR	5043417	ArgumentList	dev2		5043386	1					
ANR	5043418	Argument	dev2		5043386	0					
ANR	5043419	Identifier	dev2		5043386	0					
ANR	5043420	Argument	plist		5043386	1					
ANR	5043421	Identifier	plist		5043386	0					
ANR	5043422	IfStatement	if ( code >= 0 )		5043386	4					
ANR	5043423	Condition	code >= 0	475:8:14421:14429	5043386	0	True				
ANR	5043424	RelationalExpression	code >= 0		5043386	0		>=			
ANR	5043425	Identifier	code		5043386	0					
ANR	5043426	PrimaryExpression	0		5043386	1					
ANR	5043427	ExpressionStatement	"gs_gstate_update_device ( pgs , dev2 )"	476:8:14440:14474	5043386	1	True				
ANR	5043428	CallExpression	"gs_gstate_update_device ( pgs , dev2 )"		5043386	0					
ANR	5043429	Callee	gs_gstate_update_device		5043386	0					
ANR	5043430	Identifier	gs_gstate_update_device		5043386	0					
ANR	5043431	ArgumentList	pgs		5043386	1					
ANR	5043432	Argument	pgs		5043386	0					
ANR	5043433	Identifier	pgs		5043386	0					
ANR	5043434	Argument	dev2		5043386	1					
ANR	5043435	Identifier	dev2		5043386	0					
ANR	5043436	ReturnStatement	return code ;	477:4:14480:14491	5043386	5	True				
ANR	5043437	Identifier	code		5043386	0					
ANR	5043438	ReturnType	int		5043386	1					
ANR	5043439	Identifier	gs_gstate_putdeviceparams		5043386	2					
ANR	5043440	ParameterList	"gs_gstate * pgs , gx_device * dev , gs_param_list * plist"		5043386	3					
ANR	5043441	Parameter	gs_gstate * pgs	464:26:14208:14221	5043386	0	True				
ANR	5043442	ParameterType	gs_gstate *		5043386	0					
ANR	5043443	Identifier	pgs		5043386	1					
ANR	5043444	Parameter	gx_device * dev	464:42:14224:14237	5043386	1	True				
ANR	5043445	ParameterType	gx_device *		5043386	0					
ANR	5043446	Identifier	dev		5043386	1					
ANR	5043447	Parameter	gs_param_list * plist	464:58:14240:14259	5043386	2	True				
ANR	5043448	ParameterType	gs_param_list *		5043386	0					
ANR	5043449	Identifier	plist		5043386	1					
ANR	5043450	CFGEntryNode	ENTRY		5043386		True				
ANR	5043451	CFGExitNode	EXIT		5043386		True				
ANR	5043452	Symbol	plist		5043386						
ANR	5043453	Symbol	code		5043386						
ANR	5043454	Symbol	dev2		5043386						
ANR	5043455	Symbol	dev		5043386						
ANR	5043456	Symbol	gs_putdeviceparams		5043386						
ANR	5043457	Symbol	* pgs		5043386						
ANR	5043458	Symbol	pgs -> device		5043386						
ANR	5043459	Symbol	pgs		5043386						
ANR	5043460	Function	gs_setdevice	481:0:14539:14711							
ANR	5043461	FunctionDef	"gs_setdevice (gs_gstate * pgs , gx_device * dev)"		5043460	0					
ANR	5043462	CompoundStatement		483:0:14590:14711	5043460	0					
ANR	5043463	IdentifierDeclStatement	"int code = gs_setdevice_no_erase ( pgs , dev ) ;"	484:4:14596:14638	5043460	0	True				
ANR	5043464	IdentifierDecl	"code = gs_setdevice_no_erase ( pgs , dev )"		5043460	0					
ANR	5043465	IdentifierDeclType	int		5043460	0					
ANR	5043466	Identifier	code		5043460	1					
ANR	5043467	AssignmentExpression	"code = gs_setdevice_no_erase ( pgs , dev )"		5043460	2		=			
ANR	5043468	Identifier	code		5043460	0					
ANR	5043469	CallExpression	"gs_setdevice_no_erase ( pgs , dev )"		5043460	1					
ANR	5043470	Callee	gs_setdevice_no_erase		5043460	0					
ANR	5043471	Identifier	gs_setdevice_no_erase		5043460	0					
ANR	5043472	ArgumentList	pgs		5043460	1					
ANR	5043473	Argument	pgs		5043460	0					
ANR	5043474	Identifier	pgs		5043460	0					
ANR	5043475	Argument	dev		5043460	1					
ANR	5043476	Identifier	dev		5043460	0					
ANR	5043477	IfStatement	if ( code == 1 )		5043460	1					
ANR	5043478	Condition	code == 1	486:8:14649:14657	5043460	0	True				
ANR	5043479	EqualityExpression	code == 1		5043460	0		==			
ANR	5043480	Identifier	code		5043460	0					
ANR	5043481	PrimaryExpression	1		5043460	1					
ANR	5043482	ExpressionStatement	code = gs_erasepage ( pgs )	487:8:14668:14692	5043460	1	True				
ANR	5043483	AssignmentExpression	code = gs_erasepage ( pgs )		5043460	0		=			
ANR	5043484	Identifier	code		5043460	0					
ANR	5043485	CallExpression	gs_erasepage ( pgs )		5043460	1					
ANR	5043486	Callee	gs_erasepage		5043460	0					
ANR	5043487	Identifier	gs_erasepage		5043460	0					
ANR	5043488	ArgumentList	pgs		5043460	1					
ANR	5043489	Argument	pgs		5043460	0					
ANR	5043490	Identifier	pgs		5043460	0					
ANR	5043491	ReturnStatement	return code ;	488:4:14698:14709	5043460	2	True				
ANR	5043492	Identifier	code		5043460	0					
ANR	5043493	ReturnType	int		5043460	1					
ANR	5043494	Identifier	gs_setdevice		5043460	2					
ANR	5043495	ParameterList	"gs_gstate * pgs , gx_device * dev"		5043460	3					
ANR	5043496	Parameter	gs_gstate * pgs	482:13:14556:14570	5043460	0	True				
ANR	5043497	ParameterType	gs_gstate *		5043460	0					
ANR	5043498	Identifier	pgs		5043460	1					
ANR	5043499	Parameter	gx_device * dev	482:30:14573:14587	5043460	1	True				
ANR	5043500	ParameterType	gx_device *		5043460	0					
ANR	5043501	Identifier	dev		5043460	1					
ANR	5043502	CFGEntryNode	ENTRY		5043460		True				
ANR	5043503	CFGExitNode	EXIT		5043460		True				
ANR	5043504	Symbol	code		5043460						
ANR	5043505	Symbol	dev		5043460						
ANR	5043506	Symbol	gs_erasepage		5043460						
ANR	5043507	Symbol	gs_setdevice_no_erase		5043460						
ANR	5043508	Symbol	pgs		5043460						
ANR	5043509	Function	gs_setdevice_no_erase	490:0:14713:18534							
ANR	5043510	FunctionDef	"gs_setdevice_no_erase (gs_gstate * pgs , gx_device * dev)"		5043509	0					
ANR	5043511	CompoundStatement		492:0:14773:18534	5043509	0					
ANR	5043512	IdentifierDeclStatement	"int open_code = 0 , code ;"	493:4:14779:14802	5043509	0	True				
ANR	5043513	IdentifierDecl	open_code = 0		5043509	0					
ANR	5043514	IdentifierDeclType	int		5043509	0					
ANR	5043515	Identifier	open_code		5043509	1					
ANR	5043516	AssignmentExpression	open_code = 0		5043509	2		=			
ANR	5043517	Identifier	open_code		5043509	0					
ANR	5043518	PrimaryExpression	0		5043509	1					
ANR	5043519	IdentifierDecl	code		5043509	1					
ANR	5043520	IdentifierDeclType	int		5043509	0					
ANR	5043521	Identifier	code		5043509	1					
ANR	5043522	IdentifierDeclStatement	gs_lib_ctx_t * libctx = gs_lib_ctx_get_interp_instance ( pgs -> memory ) ;	494:4:14808:14874	5043509	1	True				
ANR	5043523	IdentifierDecl	* libctx = gs_lib_ctx_get_interp_instance ( pgs -> memory )		5043509	0					
ANR	5043524	IdentifierDeclType	gs_lib_ctx_t *		5043509	0					
ANR	5043525	Identifier	libctx		5043509	1					
ANR	5043526	AssignmentExpression	* libctx = gs_lib_ctx_get_interp_instance ( pgs -> memory )		5043509	2		=			
ANR	5043527	Identifier	libctx		5043509	0					
ANR	5043528	CallExpression	gs_lib_ctx_get_interp_instance ( pgs -> memory )		5043509	1					
ANR	5043529	Callee	gs_lib_ctx_get_interp_instance		5043509	0					
ANR	5043530	Identifier	gs_lib_ctx_get_interp_instance		5043509	0					
ANR	5043531	ArgumentList	pgs -> memory		5043509	1					
ANR	5043532	Argument	pgs -> memory		5043509	0					
ANR	5043533	PtrMemberAccess	pgs -> memory		5043509	0					
ANR	5043534	Identifier	pgs		5043509	0					
ANR	5043535	Identifier	memory		5043509	1					
ANR	5043536	IfStatement	if ( libctx -> io_device_table != NULL )		5043509	2					
ANR	5043537	Condition	libctx -> io_device_table != NULL	498:8:15004:15034	5043509	0	True				
ANR	5043538	EqualityExpression	libctx -> io_device_table != NULL		5043509	0		!=			
ANR	5043539	PtrMemberAccess	libctx -> io_device_table		5043509	0					
ANR	5043540	Identifier	libctx		5043509	0					
ANR	5043541	Identifier	io_device_table		5043509	1					
ANR	5043542	Identifier	NULL		5043509	1					
ANR	5043543	CompoundStatement		8:8:273:303	5043509	1					
ANR	5043544	IdentifierDeclStatement	cmm_dev_profile_t * dev_profile ;	499:8:15047:15077	5043509	0	True				
ANR	5043545	IdentifierDecl	* dev_profile		5043509	0					
ANR	5043546	IdentifierDeclType	cmm_dev_profile_t *		5043509	0					
ANR	5043547	Identifier	dev_profile		5043509	1					
ANR	5043548	IfStatement	if ( pgs -> icc_manager -> lab_profile == NULL )		5043509	1					
ANR	5043549	Condition	pgs -> icc_manager -> lab_profile == NULL	500:12:15091:15127	5043509	0	True				
ANR	5043550	EqualityExpression	pgs -> icc_manager -> lab_profile == NULL		5043509	0		==			
ANR	5043551	PtrMemberAccess	pgs -> icc_manager -> lab_profile		5043509	0					
ANR	5043552	PtrMemberAccess	pgs -> icc_manager		5043509	0					
ANR	5043553	Identifier	pgs		5043509	0					
ANR	5043554	Identifier	icc_manager		5043509	1					
ANR	5043555	Identifier	lab_profile		5043509	1					
ANR	5043556	Identifier	NULL		5043509	1					
ANR	5043557	CompoundStatement		9:51:356:356	5043509	1					
ANR	5043558	ExpressionStatement	gsicc_init_iccmanager ( pgs )	501:12:15179:15205	5043509	0	True				
ANR	5043559	CallExpression	gsicc_init_iccmanager ( pgs )		5043509	0					
ANR	5043560	Callee	gsicc_init_iccmanager		5043509	0					
ANR	5043561	Identifier	gsicc_init_iccmanager		5043509	0					
ANR	5043562	ArgumentList	pgs		5043509	1					
ANR	5043563	Argument	pgs		5043509	0					
ANR	5043564	Identifier	pgs		5043509	0					
ANR	5043565	IfStatement	if ( dev -> procs . get_profile != NULL )		5043509	2					
ANR	5043566	Condition	dev -> procs . get_profile != NULL	509:12:15646:15675	5043509	0	True				
ANR	5043567	EqualityExpression	dev -> procs . get_profile != NULL		5043509	0		!=			
ANR	5043568	MemberAccess	dev -> procs . get_profile		5043509	0					
ANR	5043569	PtrMemberAccess	dev -> procs		5043509	0					
ANR	5043570	Identifier	dev		5043509	0					
ANR	5043571	Identifier	procs		5043509	1					
ANR	5043572	Identifier	get_profile		5043509	1					
ANR	5043573	Identifier	NULL		5043509	1					
ANR	5043574	CompoundStatement		18:44:904:904	5043509	1					
ANR	5043575	ExpressionStatement	"code = dev_proc ( dev , get_profile ) ( dev , & dev_profile )"	510:12:15692:15744	5043509	0	True				
ANR	5043576	AssignmentExpression	"code = dev_proc ( dev , get_profile ) ( dev , & dev_profile )"		5043509	0		=			
ANR	5043577	Identifier	code		5043509	0					
ANR	5043578	CallExpression	"dev_proc ( dev , get_profile ) ( dev , & dev_profile )"		5043509	1					
ANR	5043579	Callee	"dev_proc ( dev , get_profile )"		5043509	0					
ANR	5043580	CallExpression	"dev_proc ( dev , get_profile )"		5043509	0					
ANR	5043581	Callee	dev_proc		5043509	0					
ANR	5043582	Identifier	dev_proc		5043509	0					
ANR	5043583	ArgumentList	dev		5043509	1					
ANR	5043584	Argument	dev		5043509	0					
ANR	5043585	Identifier	dev		5043509	0					
ANR	5043586	Argument	get_profile		5043509	1					
ANR	5043587	Identifier	get_profile		5043509	0					
ANR	5043588	ArgumentList	dev		5043509	1					
ANR	5043589	Argument	dev		5043509	0					
ANR	5043590	Identifier	dev		5043509	0					
ANR	5043591	Argument	& dev_profile		5043509	1					
ANR	5043592	UnaryOperationExpression	& dev_profile		5043509	0					
ANR	5043593	UnaryOperator	&		5043509	0					
ANR	5043594	Identifier	dev_profile		5043509	1					
ANR	5043595	IfStatement	if ( code < 0 )		5043509	1					
ANR	5043596	Condition	code < 0	511:16:15762:15769	5043509	0	True				
ANR	5043597	RelationalExpression	code < 0		5043509	0		<			
ANR	5043598	Identifier	code		5043509	0					
ANR	5043599	PrimaryExpression	0		5043509	1					
ANR	5043600	CompoundStatement		20:26:998:998	5043509	1					
ANR	5043601	ReturnStatement	return ( code ) ;	512:16:15790:15802	5043509	0	True				
ANR	5043602	Identifier	code		5043509	0					
ANR	5043603	IfStatement	if ( dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL )		5043509	2					
ANR	5043604	Condition	dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL	514:16:15834:15925	5043509	0	True				
ANR	5043605	OrExpression	dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL		5043509	0		||			
ANR	5043606	EqualityExpression	dev_profile == NULL		5043509	0		==			
ANR	5043607	Identifier	dev_profile		5043509	0					
ANR	5043608	Identifier	NULL		5043509	1					
ANR	5043609	EqualityExpression	dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL		5043509	1		==			
ANR	5043610	ArrayIndexing	dev_profile -> device_profile [ gsDEFAULTPROFILE ]		5043509	0					
ANR	5043611	PtrMemberAccess	dev_profile -> device_profile		5043509	0					
ANR	5043612	Identifier	dev_profile		5043509	0					
ANR	5043613	Identifier	device_profile		5043509	1					
ANR	5043614	Identifier	gsDEFAULTPROFILE		5043509	1					
ANR	5043615	Identifier	NULL		5043509	1					
ANR	5043616	CompoundStatement		24:71:1154:1154	5043509	1					
ANR	5043617	IfStatement	"if ( ( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0 )"		5043509	0					
ANR	5043618	Condition	"( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0"	516:20:15950:16079	5043509	0	True				
ANR	5043619	RelationalExpression	"( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0"		5043509	0		<			
ANR	5043620	AssignmentExpression	"code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE )"		5043509	0		=			
ANR	5043621	Identifier	code		5043509	0					
ANR	5043622	CallExpression	"gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE )"		5043509	1					
ANR	5043623	Callee	gsicc_init_device_profile_struct		5043509	0					
ANR	5043624	Identifier	gsicc_init_device_profile_struct		5043509	0					
ANR	5043625	ArgumentList	dev		5043509	1					
ANR	5043626	Argument	dev		5043509	0					
ANR	5043627	Identifier	dev		5043509	0					
ANR	5043628	Argument	NULL		5043509	1					
ANR	5043629	Identifier	NULL		5043509	0					
ANR	5043630	Argument	gsDEFAULTPROFILE		5043509	2					
ANR	5043631	Identifier	gsDEFAULTPROFILE		5043509	0					
ANR	5043632	PrimaryExpression	0		5043509	1					
ANR	5043633	ReturnStatement	return ( code ) ;	518:20:16102:16114	5043509	1	True				
ANR	5043634	Identifier	code		5043509	0					
ANR	5043635	IfStatement	"if ( ( code = gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE ) ) < 0 )"		5043509	1					
ANR	5043636	Condition	"( code = gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE ) ) < 0"	520:20:16177:16316	5043509	0	True				
ANR	5043637	RelationalExpression	"( code = gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE ) ) < 0"		5043509	0		<			
ANR	5043638	AssignmentExpression	"code = gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE )"		5043509	0		=			
ANR	5043639	Identifier	code		5043509	0					
ANR	5043640	CallExpression	"gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE )"		5043509	1					
ANR	5043641	Callee	gsicc_set_device_profile_intent		5043509	0					
ANR	5043642	Identifier	gsicc_set_device_profile_intent		5043509	0					
ANR	5043643	ArgumentList	dev		5043509	1					
ANR	5043644	Argument	dev		5043509	0					
ANR	5043645	Identifier	dev		5043509	0					
ANR	5043646	Argument	gsRINOTSPECIFIED		5043509	1					
ANR	5043647	Identifier	gsRINOTSPECIFIED		5043509	0					
ANR	5043648	Argument	gsDEFAULTPROFILE		5043509	2					
ANR	5043649	Identifier	gsDEFAULTPROFILE		5043509	0					
ANR	5043650	PrimaryExpression	0		5043509	1					
ANR	5043651	ReturnStatement	return ( code ) ;	522:20:16339:16351	5043509	1	True				
ANR	5043652	Identifier	code		5043509	0					
ANR	5043653	IfStatement	if ( ! dev -> is_open )		5043509	3					
ANR	5043654	Condition	! dev -> is_open	528:8:16424:16436	5043509	0	True				
ANR	5043655	UnaryOperationExpression	! dev -> is_open		5043509	0					
ANR	5043656	UnaryOperator	!		5043509	0					
ANR	5043657	PtrMemberAccess	dev -> is_open		5043509	1					
ANR	5043658	Identifier	dev		5043509	0					
ANR	5043659	Identifier	is_open		5043509	1					
ANR	5043660	CompoundStatement		37:23:1665:1665	5043509	1					
ANR	5043661	ExpressionStatement	gx_device_fill_in_procs ( dev )	529:8:16449:16477	5043509	0	True				
ANR	5043662	CallExpression	gx_device_fill_in_procs ( dev )		5043509	0					
ANR	5043663	Callee	gx_device_fill_in_procs		5043509	0					
ANR	5043664	Identifier	gx_device_fill_in_procs		5043509	0					
ANR	5043665	ArgumentList	dev		5043509	1					
ANR	5043666	Argument	dev		5043509	0					
ANR	5043667	Identifier	dev		5043509	0					
ANR	5043668	IfStatement	if ( libctx -> io_device_table != NULL )		5043509	1					
ANR	5043669	Condition	libctx -> io_device_table != NULL	536:12:16769:16799	5043509	0	True				
ANR	5043670	EqualityExpression	libctx -> io_device_table != NULL		5043509	0		!=			
ANR	5043671	PtrMemberAccess	libctx -> io_device_table		5043509	0					
ANR	5043672	Identifier	libctx		5043509	0					
ANR	5043673	Identifier	io_device_table		5043509	1					
ANR	5043674	Identifier	NULL		5043509	1					
ANR	5043675	CompoundStatement		46:12:2042:2072	5043509	1					
ANR	5043676	IdentifierDeclStatement	cmm_dev_profile_t * dev_profile ;	537:12:16816:16846	5043509	0	True				
ANR	5043677	IdentifierDecl	* dev_profile		5043509	0					
ANR	5043678	IdentifierDeclType	cmm_dev_profile_t *		5043509	0					
ANR	5043679	Identifier	dev_profile		5043509	1					
ANR	5043680	IfStatement	if ( dev -> procs . get_profile != NULL )		5043509	1					
ANR	5043681	Condition	dev -> procs . get_profile != NULL	542:16:17165:17194	5043509	0	True				
ANR	5043682	EqualityExpression	dev -> procs . get_profile != NULL		5043509	0		!=			
ANR	5043683	MemberAccess	dev -> procs . get_profile		5043509	0					
ANR	5043684	PtrMemberAccess	dev -> procs		5043509	0					
ANR	5043685	Identifier	dev		5043509	0					
ANR	5043686	Identifier	procs		5043509	1					
ANR	5043687	Identifier	get_profile		5043509	1					
ANR	5043688	Identifier	NULL		5043509	1					
ANR	5043689	CompoundStatement		51:48:2423:2423	5043509	1					
ANR	5043690	ExpressionStatement	"code = dev_proc ( dev , get_profile ) ( dev , & dev_profile )"	543:16:17215:17267	5043509	0	True				
ANR	5043691	AssignmentExpression	"code = dev_proc ( dev , get_profile ) ( dev , & dev_profile )"		5043509	0		=			
ANR	5043692	Identifier	code		5043509	0					
ANR	5043693	CallExpression	"dev_proc ( dev , get_profile ) ( dev , & dev_profile )"		5043509	1					
ANR	5043694	Callee	"dev_proc ( dev , get_profile )"		5043509	0					
ANR	5043695	CallExpression	"dev_proc ( dev , get_profile )"		5043509	0					
ANR	5043696	Callee	dev_proc		5043509	0					
ANR	5043697	Identifier	dev_proc		5043509	0					
ANR	5043698	ArgumentList	dev		5043509	1					
ANR	5043699	Argument	dev		5043509	0					
ANR	5043700	Identifier	dev		5043509	0					
ANR	5043701	Argument	get_profile		5043509	1					
ANR	5043702	Identifier	get_profile		5043509	0					
ANR	5043703	ArgumentList	dev		5043509	1					
ANR	5043704	Argument	dev		5043509	0					
ANR	5043705	Identifier	dev		5043509	0					
ANR	5043706	Argument	& dev_profile		5043509	1					
ANR	5043707	UnaryOperationExpression	& dev_profile		5043509	0					
ANR	5043708	UnaryOperator	&		5043509	0					
ANR	5043709	Identifier	dev_profile		5043509	1					
ANR	5043710	IfStatement	if ( code < 0 )		5043509	1					
ANR	5043711	Condition	code < 0	544:20:17289:17296	5043509	0	True				
ANR	5043712	RelationalExpression	code < 0		5043509	0		<			
ANR	5043713	Identifier	code		5043509	0					
ANR	5043714	PrimaryExpression	0		5043509	1					
ANR	5043715	CompoundStatement		53:30:2525:2525	5043509	1					
ANR	5043716	ReturnStatement	return ( code ) ;	545:20:17321:17333	5043509	0	True				
ANR	5043717	Identifier	code		5043509	0					
ANR	5043718	IfStatement	if ( dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL )		5043509	2					
ANR	5043719	Condition	dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL	547:20:17373:17468	5043509	0	True				
ANR	5043720	OrExpression	dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL		5043509	0		||			
ANR	5043721	EqualityExpression	dev_profile == NULL		5043509	0		==			
ANR	5043722	Identifier	dev_profile		5043509	0					
ANR	5043723	Identifier	NULL		5043509	1					
ANR	5043724	EqualityExpression	dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL		5043509	1		==			
ANR	5043725	ArrayIndexing	dev_profile -> device_profile [ gsDEFAULTPROFILE ]		5043509	0					
ANR	5043726	PtrMemberAccess	dev_profile -> device_profile		5043509	0					
ANR	5043727	Identifier	dev_profile		5043509	0					
ANR	5043728	Identifier	device_profile		5043509	1					
ANR	5043729	Identifier	gsDEFAULTPROFILE		5043509	1					
ANR	5043730	Identifier	NULL		5043509	1					
ANR	5043731	CompoundStatement		57:75:2697:2697	5043509	1					
ANR	5043732	IfStatement	"if ( ( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0 )"		5043509	0					
ANR	5043733	Condition	"( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0"	549:24:17497:17630	5043509	0	True				
ANR	5043734	RelationalExpression	"( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0"		5043509	0		<			
ANR	5043735	AssignmentExpression	"code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE )"		5043509	0		=			
ANR	5043736	Identifier	code		5043509	0					
ANR	5043737	CallExpression	"gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE )"		5043509	1					
ANR	5043738	Callee	gsicc_init_device_profile_struct		5043509	0					
ANR	5043739	Identifier	gsicc_init_device_profile_struct		5043509	0					
ANR	5043740	ArgumentList	dev		5043509	1					
ANR	5043741	Argument	dev		5043509	0					
ANR	5043742	Identifier	dev		5043509	0					
ANR	5043743	Argument	NULL		5043509	1					
ANR	5043744	Identifier	NULL		5043509	0					
ANR	5043745	Argument	gsDEFAULTPROFILE		5043509	2					
ANR	5043746	Identifier	gsDEFAULTPROFILE		5043509	0					
ANR	5043747	PrimaryExpression	0		5043509	1					
ANR	5043748	ReturnStatement	return ( code ) ;	551:24:17657:17669	5043509	1	True				
ANR	5043749	Identifier	code		5043509	0					
ANR	5043750	IfStatement	if ( gs_device_is_memory ( dev ) )		5043509	2					
ANR	5043751	Condition	gs_device_is_memory ( dev )	556:12:17726:17749	5043509	0	True				
ANR	5043752	CallExpression	gs_device_is_memory ( dev )		5043509	0					
ANR	5043753	Callee	gs_device_is_memory		5043509	0					
ANR	5043754	Identifier	gs_device_is_memory		5043509	0					
ANR	5043755	ArgumentList	dev		5043509	1					
ANR	5043756	Argument	dev		5043509	0					
ANR	5043757	Identifier	dev		5043509	0					
ANR	5043758	CompoundStatement		67:12:3048:3094	5043509	1					
ANR	5043759	IdentifierDeclStatement	gx_device * odev = gs_currentdevice_inline ( pgs ) ;	558:12:17822:17868	5043509	0	True				
ANR	5043760	IdentifierDecl	* odev = gs_currentdevice_inline ( pgs )		5043509	0					
ANR	5043761	IdentifierDeclType	gx_device *		5043509	0					
ANR	5043762	Identifier	odev		5043509	1					
ANR	5043763	AssignmentExpression	* odev = gs_currentdevice_inline ( pgs )		5043509	2		=			
ANR	5043764	Identifier	odev		5043509	0					
ANR	5043765	CallExpression	gs_currentdevice_inline ( pgs )		5043509	1					
ANR	5043766	Callee	gs_currentdevice_inline		5043509	0					
ANR	5043767	Identifier	gs_currentdevice_inline		5043509	0					
ANR	5043768	ArgumentList	pgs		5043509	1					
ANR	5043769	Argument	pgs		5043509	0					
ANR	5043770	Identifier	pgs		5043509	0					
ANR	5043771	WhileStatement	while ( odev != 0 && gs_device_is_memory ( odev ) )		5043509	1					
ANR	5043772	Condition	odev != 0 && gs_device_is_memory ( odev )	560:19:17890:17927	5043509	0	True				
ANR	5043773	AndExpression	odev != 0 && gs_device_is_memory ( odev )		5043509	0		&&			
ANR	5043774	EqualityExpression	odev != 0		5043509	0		!=			
ANR	5043775	Identifier	odev		5043509	0					
ANR	5043776	PrimaryExpression	0		5043509	1					
ANR	5043777	CallExpression	gs_device_is_memory ( odev )		5043509	1					
ANR	5043778	Callee	gs_device_is_memory		5043509	0					
ANR	5043779	Identifier	gs_device_is_memory		5043509	0					
ANR	5043780	ArgumentList	odev		5043509	1					
ANR	5043781	Argument	odev		5043509	0					
ANR	5043782	Identifier	odev		5043509	0					
ANR	5043783	ExpressionStatement	odev = ( ( gx_device_memory * ) odev ) -> target	561:16:17946:17987	5043509	1	True				
ANR	5043784	AssignmentExpression	odev = ( ( gx_device_memory * ) odev ) -> target		5043509	0		=			
ANR	5043785	Identifier	odev		5043509	0					
ANR	5043786	PtrMemberAccess	( ( gx_device_memory * ) odev ) -> target		5043509	1					
ANR	5043787	CastExpression	( gx_device_memory * ) odev		5043509	0					
ANR	5043788	CastTarget	gx_device_memory *		5043509	0					
ANR	5043789	Identifier	odev		5043509	1					
ANR	5043790	Identifier	target		5043509	1					
ANR	5043791	ExpressionStatement	"gx_device_set_target ( ( ( gx_device_forward * ) dev ) , odev )"	562:12:18001:18055	5043509	2	True				
ANR	5043792	CallExpression	"gx_device_set_target ( ( ( gx_device_forward * ) dev ) , odev )"		5043509	0					
ANR	5043793	Callee	gx_device_set_target		5043509	0					
ANR	5043794	Identifier	gx_device_set_target		5043509	0					
ANR	5043795	ArgumentList	( gx_device_forward * ) dev		5043509	1					
ANR	5043796	Argument	( gx_device_forward * ) dev		5043509	0					
ANR	5043797	CastExpression	( gx_device_forward * ) dev		5043509	0					
ANR	5043798	CastTarget	gx_device_forward *		5043509	0					
ANR	5043799	Identifier	dev		5043509	1					
ANR	5043800	Argument	odev		5043509	1					
ANR	5043801	Identifier	odev		5043509	0					
ANR	5043802	ExpressionStatement	code = open_code = gs_opendevice ( dev )	564:8:18075:18112	5043509	3	True				
ANR	5043803	AssignmentExpression	code = open_code = gs_opendevice ( dev )		5043509	0		=			
ANR	5043804	Identifier	code		5043509	0					
ANR	5043805	AssignmentExpression	open_code = gs_opendevice ( dev )		5043509	1		=			
ANR	5043806	Identifier	open_code		5043509	0					
ANR	5043807	CallExpression	gs_opendevice ( dev )		5043509	1					
ANR	5043808	Callee	gs_opendevice		5043509	0					
ANR	5043809	Identifier	gs_opendevice		5043509	0					
ANR	5043810	ArgumentList	dev		5043509	1					
ANR	5043811	Argument	dev		5043509	0					
ANR	5043812	Identifier	dev		5043509	0					
ANR	5043813	IfStatement	if ( code < 0 )		5043509	4					
ANR	5043814	Condition	code < 0	565:12:18126:18133	5043509	0	True				
ANR	5043815	RelationalExpression	code < 0		5043509	0		<			
ANR	5043816	Identifier	code		5043509	0					
ANR	5043817	PrimaryExpression	0		5043509	1					
ANR	5043818	ReturnStatement	return code ;	566:12:18148:18159	5043509	1	True				
ANR	5043819	Identifier	code		5043509	0					
ANR	5043820	ExpressionStatement	"gs_setdevice_no_init ( pgs , dev )"	568:4:18171:18201	5043509	4	True				
ANR	5043821	CallExpression	"gs_setdevice_no_init ( pgs , dev )"		5043509	0					
ANR	5043822	Callee	gs_setdevice_no_init		5043509	0					
ANR	5043823	Identifier	gs_setdevice_no_init		5043509	0					
ANR	5043824	ArgumentList	pgs		5043509	1					
ANR	5043825	Argument	pgs		5043509	0					
ANR	5043826	Identifier	pgs		5043509	0					
ANR	5043827	Argument	dev		5043509	1					
ANR	5043828	Identifier	dev		5043509	0					
ANR	5043829	ExpressionStatement	pgs -> ctm_default_set = false	569:4:18207:18235	5043509	5	True				
ANR	5043830	AssignmentExpression	pgs -> ctm_default_set = false		5043509	0		=			
ANR	5043831	PtrMemberAccess	pgs -> ctm_default_set		5043509	0					
ANR	5043832	Identifier	pgs		5043509	0					
ANR	5043833	Identifier	ctm_default_set		5043509	1					
ANR	5043834	Identifier	false		5043509	1					
ANR	5043835	IfStatement	if ( ( code = gs_initmatrix ( pgs ) ) < 0 || ( code = gs_initclip ( pgs ) ) < 0 )		5043509	6					
ANR	5043836	Condition	( code = gs_initmatrix ( pgs ) ) < 0 || ( code = gs_initclip ( pgs ) ) < 0	570:8:18245:18316	5043509	0	True				
ANR	5043837	OrExpression	( code = gs_initmatrix ( pgs ) ) < 0 || ( code = gs_initclip ( pgs ) ) < 0		5043509	0		||			
ANR	5043838	RelationalExpression	( code = gs_initmatrix ( pgs ) ) < 0		5043509	0		<			
ANR	5043839	AssignmentExpression	code = gs_initmatrix ( pgs )		5043509	0		=			
ANR	5043840	Identifier	code		5043509	0					
ANR	5043841	CallExpression	gs_initmatrix ( pgs )		5043509	1					
ANR	5043842	Callee	gs_initmatrix		5043509	0					
ANR	5043843	Identifier	gs_initmatrix		5043509	0					
ANR	5043844	ArgumentList	pgs		5043509	1					
ANR	5043845	Argument	pgs		5043509	0					
ANR	5043846	Identifier	pgs		5043509	0					
ANR	5043847	PrimaryExpression	0		5043509	1					
ANR	5043848	RelationalExpression	( code = gs_initclip ( pgs ) ) < 0		5043509	1		<			
ANR	5043849	AssignmentExpression	code = gs_initclip ( pgs )		5043509	0		=			
ANR	5043850	Identifier	code		5043509	0					
ANR	5043851	CallExpression	gs_initclip ( pgs )		5043509	1					
ANR	5043852	Callee	gs_initclip		5043509	0					
ANR	5043853	Identifier	gs_initclip		5043509	0					
ANR	5043854	ArgumentList	pgs		5043509	1					
ANR	5043855	Argument	pgs		5043509	0					
ANR	5043856	Identifier	pgs		5043509	0					
ANR	5043857	PrimaryExpression	0		5043509	1					
ANR	5043858	ReturnStatement	return code ;	573:8:18336:18347	5043509	1	True				
ANR	5043859	Identifier	code		5043509	0					
ANR	5043860	ExpressionStatement	pgs -> in_cachedevice = 0	576:4:18441:18464	5043509	7	True				
ANR	5043861	AssignmentExpression	pgs -> in_cachedevice = 0		5043509	0		=			
ANR	5043862	PtrMemberAccess	pgs -> in_cachedevice		5043509	0					
ANR	5043863	Identifier	pgs		5043509	0					
ANR	5043864	Identifier	in_cachedevice		5043509	1					
ANR	5043865	PrimaryExpression	0		5043509	1					
ANR	5043866	ExpressionStatement	pgs -> in_charpath = ( gs_char_path_mode ) 0	577:4:18470:18510	5043509	8	True				
ANR	5043867	AssignmentExpression	pgs -> in_charpath = ( gs_char_path_mode ) 0		5043509	0		=			
ANR	5043868	PtrMemberAccess	pgs -> in_charpath		5043509	0					
ANR	5043869	Identifier	pgs		5043509	0					
ANR	5043870	Identifier	in_charpath		5043509	1					
ANR	5043871	CastExpression	( gs_char_path_mode ) 0		5043509	1					
ANR	5043872	CastTarget	gs_char_path_mode		5043509	0					
ANR	5043873	PrimaryExpression	0		5043509	1					
ANR	5043874	ReturnStatement	return open_code ;	578:4:18516:18532	5043509	9	True				
ANR	5043875	Identifier	open_code		5043509	0					
ANR	5043876	ReturnType	int		5043509	1					
ANR	5043877	Identifier	gs_setdevice_no_erase		5043509	2					
ANR	5043878	ParameterList	"gs_gstate * pgs , gx_device * dev"		5043509	3					
ANR	5043879	Parameter	gs_gstate * pgs	491:22:14739:14753	5043509	0	True				
ANR	5043880	ParameterType	gs_gstate *		5043509	0					
ANR	5043881	Identifier	pgs		5043509	1					
ANR	5043882	Parameter	gx_device * dev	491:39:14756:14770	5043509	1	True				
ANR	5043883	ParameterType	gx_device *		5043509	0					
ANR	5043884	Identifier	dev		5043509	1					
ANR	5043885	CFGEntryNode	ENTRY		5043509		True				
ANR	5043886	CFGExitNode	EXIT		5043509		True				
ANR	5043887	Symbol	dev -> procs		5043509						
ANR	5043888	Symbol	* dev		5043509						
ANR	5043889	Symbol	pgs -> in_charpath		5043509						
ANR	5043890	Symbol	* libctx		5043509						
ANR	5043891	Symbol	code		5043509						
ANR	5043892	Symbol	libctx		5043509						
ANR	5043893	Symbol	pgs -> icc_manager		5043509						
ANR	5043894	Symbol	dev_profile -> device_profile		5043509						
ANR	5043895	Symbol	* pgs		5043509						
ANR	5043896	Symbol	dev_profile		5043509						
ANR	5043897	Symbol	gs_opendevice		5043509						
ANR	5043898	Symbol	* dev_profile -> device_profile		5043509						
ANR	5043899	Symbol	pgs -> ctm_default_set		5043509						
ANR	5043900	Symbol	libctx -> io_device_table		5043509						
ANR	5043901	Symbol	* gsDEFAULTPROFILE		5043509						
ANR	5043902	Symbol	( ( gx_device_memory * ) odev ) -> target		5043509						
ANR	5043903	Symbol	dev		5043509						
ANR	5043904	Symbol	gs_currentdevice_inline		5043509						
ANR	5043905	Symbol	dev_proc		5043509						
ANR	5043906	Symbol	dev -> procs . get_profile		5043509						
ANR	5043907	Symbol	pgs -> in_cachedevice		5043509						
ANR	5043908	Symbol	gs_lib_ctx_get_interp_instance		5043509						
ANR	5043909	Symbol	pgs		5043509						
ANR	5043910	Symbol	pgs -> memory		5043509						
ANR	5043911	Symbol	get_profile		5043509						
ANR	5043912	Symbol	* odev		5043509						
ANR	5043913	Symbol	gsicc_set_device_profile_intent		5043509						
ANR	5043914	Symbol	open_code		5043509						
ANR	5043915	Symbol	gs_initmatrix		5043509						
ANR	5043916	Symbol	NULL		5043509						
ANR	5043917	Symbol	gsDEFAULTPROFILE		5043509						
ANR	5043918	Symbol	gsicc_init_device_profile_struct		5043509						
ANR	5043919	Symbol	& dev_profile		5043509						
ANR	5043920	Symbol	* dev_profile		5043509						
ANR	5043921	Symbol	false		5043509						
ANR	5043922	Symbol	* pgs -> icc_manager		5043509						
ANR	5043923	Symbol	pgs -> icc_manager -> lab_profile		5043509						
ANR	5043924	Symbol	gsRINOTSPECIFIED		5043509						
ANR	5043925	Symbol	* * pgs		5043509						
ANR	5043926	Symbol	dev -> is_open		5043509						
ANR	5043927	Symbol	odev		5043509						
ANR	5043928	Symbol	* * dev_profile		5043509						
ANR	5043929	Symbol	gs_device_is_memory		5043509						
ANR	5043930	Symbol	gs_initclip		5043509						
ANR	5043931	Function	gs_setdevice_no_init	580:0:18536:19467							
ANR	5043932	FunctionDef	"gs_setdevice_no_init (gs_gstate * pgs , gx_device * dev)"		5043931	0					
ANR	5043933	CompoundStatement		582:0:18595:19467	5043931	0					
ANR	5043934	IfStatement	if ( pgs -> device != NULL && pgs -> device -> rc . ref_count == 1 && pgs -> device != dev )		5043931	0					
ANR	5043935	Condition	pgs -> device != NULL && pgs -> device -> rc . ref_count == 1 && pgs -> device != dev	595:8:19124:19206	5043931	0	True				
ANR	5043936	AndExpression	pgs -> device != NULL && pgs -> device -> rc . ref_count == 1 && pgs -> device != dev		5043931	0		&&			
ANR	5043937	EqualityExpression	pgs -> device != NULL		5043931	0		!=			
ANR	5043938	PtrMemberAccess	pgs -> device		5043931	0					
ANR	5043939	Identifier	pgs		5043931	0					
ANR	5043940	Identifier	device		5043931	1					
ANR	5043941	Identifier	NULL		5043931	1					
ANR	5043942	AndExpression	pgs -> device -> rc . ref_count == 1 && pgs -> device != dev		5043931	1		&&			
ANR	5043943	EqualityExpression	pgs -> device -> rc . ref_count == 1		5043931	0		==			
ANR	5043944	MemberAccess	pgs -> device -> rc . ref_count		5043931	0					
ANR	5043945	PtrMemberAccess	pgs -> device -> rc		5043931	0					
ANR	5043946	PtrMemberAccess	pgs -> device		5043931	0					
ANR	5043947	Identifier	pgs		5043931	0					
ANR	5043948	Identifier	device		5043931	1					
ANR	5043949	Identifier	rc		5043931	1					
ANR	5043950	Identifier	ref_count		5043931	1					
ANR	5043951	PrimaryExpression	1		5043931	1					
ANR	5043952	EqualityExpression	pgs -> device != dev		5043931	1		!=			
ANR	5043953	PtrMemberAccess	pgs -> device		5043931	0					
ANR	5043954	Identifier	pgs		5043931	0					
ANR	5043955	Identifier	device		5043931	1					
ANR	5043956	Identifier	dev		5043931	1					
ANR	5043957	CompoundStatement		16:8:623:661	5043931	1					
ANR	5043958	IdentifierDeclStatement	int code = gs_closedevice ( pgs -> device ) ;	597:8:19219:19257	5043931	0	True				
ANR	5043959	IdentifierDecl	code = gs_closedevice ( pgs -> device )		5043931	0					
ANR	5043960	IdentifierDeclType	int		5043931	0					
ANR	5043961	Identifier	code		5043931	1					
ANR	5043962	AssignmentExpression	code = gs_closedevice ( pgs -> device )		5043931	2		=			
ANR	5043963	Identifier	code		5043931	0					
ANR	5043964	CallExpression	gs_closedevice ( pgs -> device )		5043931	1					
ANR	5043965	Callee	gs_closedevice		5043931	0					
ANR	5043966	Identifier	gs_closedevice		5043931	0					
ANR	5043967	ArgumentList	pgs -> device		5043931	1					
ANR	5043968	Argument	pgs -> device		5043931	0					
ANR	5043969	PtrMemberAccess	pgs -> device		5043931	0					
ANR	5043970	Identifier	pgs		5043931	0					
ANR	5043971	Identifier	device		5043931	1					
ANR	5043972	IfStatement	if ( code < 0 )		5043931	1					
ANR	5043973	Condition	code < 0	599:12:19272:19279	5043931	0	True				
ANR	5043974	RelationalExpression	code < 0		5043931	0		<			
ANR	5043975	Identifier	code		5043931	0					
ANR	5043976	PrimaryExpression	0		5043931	1					
ANR	5043977	ReturnStatement	return code ;	600:12:19294:19305	5043931	1	True				
ANR	5043978	Identifier	code		5043931	0					
ANR	5043979	ExpressionStatement	"rc_assign ( pgs -> device , dev , ""gs_setdevice_no_init"" )"	602:4:19317:19368	5043931	1	True				
ANR	5043980	CallExpression	"rc_assign ( pgs -> device , dev , ""gs_setdevice_no_init"" )"		5043931	0					
ANR	5043981	Callee	rc_assign		5043931	0					
ANR	5043982	Identifier	rc_assign		5043931	0					
ANR	5043983	ArgumentList	pgs -> device		5043931	1					
ANR	5043984	Argument	pgs -> device		5043931	0					
ANR	5043985	PtrMemberAccess	pgs -> device		5043931	0					
ANR	5043986	Identifier	pgs		5043931	0					
ANR	5043987	Identifier	device		5043931	1					
ANR	5043988	Argument	dev		5043931	1					
ANR	5043989	Identifier	dev		5043931	0					
ANR	5043990	Argument	"""gs_setdevice_no_init"""		5043931	2					
ANR	5043991	PrimaryExpression	"""gs_setdevice_no_init"""		5043931	0					
ANR	5043992	ExpressionStatement	"gs_gstate_update_device ( pgs , dev )"	603:4:19374:19407	5043931	2	True				
ANR	5043993	CallExpression	"gs_gstate_update_device ( pgs , dev )"		5043931	0					
ANR	5043994	Callee	gs_gstate_update_device		5043931	0					
ANR	5043995	Identifier	gs_gstate_update_device		5043931	0					
ANR	5043996	ArgumentList	pgs		5043931	1					
ANR	5043997	Argument	pgs		5043931	0					
ANR	5043998	Identifier	pgs		5043931	0					
ANR	5043999	Argument	dev		5043931	1					
ANR	5044000	Identifier	dev		5043931	0					
ANR	5044001	ReturnStatement	return pgs -> overprint ? gs_do_set_overprint ( pgs ) : 0 ;	604:4:19413:19465	5043931	3	True				
ANR	5044002	ConditionalExpression	pgs -> overprint ? gs_do_set_overprint ( pgs ) : 0		5043931	0					
ANR	5044003	Condition	pgs -> overprint		5043931	0					
ANR	5044004	PtrMemberAccess	pgs -> overprint		5043931	0					
ANR	5044005	Identifier	pgs		5043931	0					
ANR	5044006	Identifier	overprint		5043931	1					
ANR	5044007	CallExpression	gs_do_set_overprint ( pgs )		5043931	1					
ANR	5044008	Callee	gs_do_set_overprint		5043931	0					
ANR	5044009	Identifier	gs_do_set_overprint		5043931	0					
ANR	5044010	ArgumentList	pgs		5043931	1					
ANR	5044011	Argument	pgs		5043931	0					
ANR	5044012	Identifier	pgs		5043931	0					
ANR	5044013	PrimaryExpression	0		5043931	2					
ANR	5044014	ReturnType	int		5043931	1					
ANR	5044015	Identifier	gs_setdevice_no_init		5043931	2					
ANR	5044016	ParameterList	"gs_gstate * pgs , gx_device * dev"		5043931	3					
ANR	5044017	Parameter	gs_gstate * pgs	581:21:18561:18575	5043931	0	True				
ANR	5044018	ParameterType	gs_gstate *		5043931	0					
ANR	5044019	Identifier	pgs		5043931	1					
ANR	5044020	Parameter	gx_device * dev	581:38:18578:18592	5043931	1	True				
ANR	5044021	ParameterType	gx_device *		5043931	0					
ANR	5044022	Identifier	dev		5043931	1					
ANR	5044023	CFGEntryNode	ENTRY		5043931		True				
ANR	5044024	CFGExitNode	EXIT		5043931		True				
ANR	5044025	Symbol	pgs -> device -> rc . ref_count		5043931						
ANR	5044026	Symbol	NULL		5043931						
ANR	5044027	Symbol	code		5043931						
ANR	5044028	Symbol	* pgs		5043931						
ANR	5044029	Symbol	gs_do_set_overprint		5043931						
ANR	5044030	Symbol	* * pgs		5043931						
ANR	5044031	Symbol	dev		5043931						
ANR	5044032	Symbol	pgs -> overprint		5043931						
ANR	5044033	Symbol	pgs -> device -> rc		5043931						
ANR	5044034	Symbol	pgs -> device		5043931						
ANR	5044035	Symbol	* pgs -> device		5043931						
ANR	5044036	Symbol	pgs		5043931						
ANR	5044037	Symbol	gs_closedevice		5043931						
ANR	5044038	Function	gx_device_init	608:0:19512:19801							
ANR	5044039	FunctionDef	"gx_device_init (gx_device * dev , const gx_device * proto , gs_memory_t * mem , bool internal)"		5044038	0					
ANR	5044040	CompoundStatement		611:0:19623:19801	5044038	0					
ANR	5044041	ExpressionStatement	"memcpy ( dev , proto , proto -> params_size )"	612:4:19629:19667	5044038	0	True				
ANR	5044042	CallExpression	"memcpy ( dev , proto , proto -> params_size )"		5044038	0					
ANR	5044043	Callee	memcpy		5044038	0					
ANR	5044044	Identifier	memcpy		5044038	0					
ANR	5044045	ArgumentList	dev		5044038	1					
ANR	5044046	Argument	dev		5044038	0					
ANR	5044047	Identifier	dev		5044038	0					
ANR	5044048	Argument	proto		5044038	1					
ANR	5044049	Identifier	proto		5044038	0					
ANR	5044050	Argument	proto -> params_size		5044038	2					
ANR	5044051	PtrMemberAccess	proto -> params_size		5044038	0					
ANR	5044052	Identifier	proto		5044038	0					
ANR	5044053	Identifier	params_size		5044038	1					
ANR	5044054	ExpressionStatement	dev -> memory = mem	613:4:19673:19690	5044038	1	True				
ANR	5044055	AssignmentExpression	dev -> memory = mem		5044038	0		=			
ANR	5044056	PtrMemberAccess	dev -> memory		5044038	0					
ANR	5044057	Identifier	dev		5044038	0					
ANR	5044058	Identifier	memory		5044038	1					
ANR	5044059	Identifier	mem		5044038	1					
ANR	5044060	ExpressionStatement	dev -> retained = ! internal	614:4:19696:19721	5044038	2	True				
ANR	5044061	AssignmentExpression	dev -> retained = ! internal		5044038	0		=			
ANR	5044062	PtrMemberAccess	dev -> retained		5044038	0					
ANR	5044063	Identifier	dev		5044038	0					
ANR	5044064	Identifier	retained		5044038	1					
ANR	5044065	UnaryOperationExpression	! internal		5044038	1					
ANR	5044066	UnaryOperator	!		5044038	0					
ANR	5044067	Identifier	internal		5044038	1					
ANR	5044068	ExpressionStatement	"rc_init ( dev , mem , ( internal ? 0 : 1 ) )"	615:4:19727:19764	5044038	3	True				
ANR	5044069	CallExpression	"rc_init ( dev , mem , ( internal ? 0 : 1 ) )"		5044038	0					
ANR	5044070	Callee	rc_init		5044038	0					
ANR	5044071	Identifier	rc_init		5044038	0					
ANR	5044072	ArgumentList	dev		5044038	1					
ANR	5044073	Argument	dev		5044038	0					
ANR	5044074	Identifier	dev		5044038	0					
ANR	5044075	Argument	mem		5044038	1					
ANR	5044076	Identifier	mem		5044038	0					
ANR	5044077	Argument	internal ? 0 : 1		5044038	2					
ANR	5044078	ConditionalExpression	internal ? 0 : 1		5044038	0					
ANR	5044079	Condition	internal		5044038	0					
ANR	5044080	Identifier	internal		5044038	0					
ANR	5044081	PrimaryExpression	0		5044038	1					
ANR	5044082	PrimaryExpression	1		5044038	2					
ANR	5044083	ExpressionStatement	rc_increment ( dev -> icc_struct )	616:4:19770:19799	5044038	4	True				
ANR	5044084	CallExpression	rc_increment ( dev -> icc_struct )		5044038	0					
ANR	5044085	Callee	rc_increment		5044038	0					
ANR	5044086	Identifier	rc_increment		5044038	0					
ANR	5044087	ArgumentList	dev -> icc_struct		5044038	1					
ANR	5044088	Argument	dev -> icc_struct		5044038	0					
ANR	5044089	PtrMemberAccess	dev -> icc_struct		5044038	0					
ANR	5044090	Identifier	dev		5044038	0					
ANR	5044091	Identifier	icc_struct		5044038	1					
ANR	5044092	ReturnType	void		5044038	1					
ANR	5044093	Identifier	gx_device_init		5044038	2					
ANR	5044094	ParameterList	"gx_device * dev , const gx_device * proto , gs_memory_t * mem , bool internal"		5044038	3					
ANR	5044095	Parameter	gx_device * dev	609:15:19532:19546	5044038	0	True				
ANR	5044096	ParameterType	gx_device *		5044038	0					
ANR	5044097	Identifier	dev		5044038	1					
ANR	5044098	Parameter	const gx_device * proto	609:32:19549:19571	5044038	1	True				
ANR	5044099	ParameterType	const gx_device *		5044038	0					
ANR	5044100	Identifier	proto		5044038	1					
ANR	5044101	Parameter	gs_memory_t * mem	609:57:19574:19590	5044038	2	True				
ANR	5044102	ParameterType	gs_memory_t *		5044038	0					
ANR	5044103	Identifier	mem		5044038	1					
ANR	5044104	Parameter	bool internal	610:15:19608:19620	5044038	3	True				
ANR	5044105	ParameterType	bool		5044038	0					
ANR	5044106	Identifier	internal		5044038	1					
ANR	5044107	CFGEntryNode	ENTRY		5044038		True				
ANR	5044108	CFGExitNode	EXIT		5044038		True				
ANR	5044109	Symbol	* dev		5044038						
ANR	5044110	Symbol	proto -> params_size		5044038						
ANR	5044111	Symbol	internal		5044038						
ANR	5044112	Symbol	* proto		5044038						
ANR	5044113	Symbol	dev -> memory		5044038						
ANR	5044114	Symbol	dev		5044038						
ANR	5044115	Symbol	mem		5044038						
ANR	5044116	Symbol	proto		5044038						
ANR	5044117	Symbol	dev -> icc_struct		5044038						
ANR	5044118	Symbol	dev -> retained		5044038						
ANR	5044119	Function	gx_device_init_on_stack	619:0:19804:20152							
ANR	5044120	FunctionDef	"gx_device_init_on_stack (gx_device * dev , const gx_device * proto , gs_memory_t * mem)"		5044119	0					
ANR	5044121	CompoundStatement		622:0:19918:20152	5044119	0					
ANR	5044122	ExpressionStatement	"memcpy ( dev , proto , proto -> params_size )"	623:4:19924:19962	5044119	0	True				
ANR	5044123	CallExpression	"memcpy ( dev , proto , proto -> params_size )"		5044119	0					
ANR	5044124	Callee	memcpy		5044119	0					
ANR	5044125	Identifier	memcpy		5044119	0					
ANR	5044126	ArgumentList	dev		5044119	1					
ANR	5044127	Argument	dev		5044119	0					
ANR	5044128	Identifier	dev		5044119	0					
ANR	5044129	Argument	proto		5044119	1					
ANR	5044130	Identifier	proto		5044119	0					
ANR	5044131	Argument	proto -> params_size		5044119	2					
ANR	5044132	PtrMemberAccess	proto -> params_size		5044119	0					
ANR	5044133	Identifier	proto		5044119	0					
ANR	5044134	Identifier	params_size		5044119	1					
ANR	5044135	ExpressionStatement	dev -> memory = mem	624:4:19968:19985	5044119	1	True				
ANR	5044136	AssignmentExpression	dev -> memory = mem		5044119	0		=			
ANR	5044137	PtrMemberAccess	dev -> memory		5044119	0					
ANR	5044138	Identifier	dev		5044119	0					
ANR	5044139	Identifier	memory		5044119	1					
ANR	5044140	Identifier	mem		5044119	1					
ANR	5044141	ExpressionStatement	dev -> retained = 0	625:4:19991:20008	5044119	2	True				
ANR	5044142	AssignmentExpression	dev -> retained = 0		5044119	0		=			
ANR	5044143	PtrMemberAccess	dev -> retained		5044119	0					
ANR	5044144	Identifier	dev		5044119	0					
ANR	5044145	Identifier	retained		5044119	1					
ANR	5044146	PrimaryExpression	0		5044119	1					
ANR	5044147	ExpressionStatement	dev -> pad = proto -> pad	626:4:20014:20035	5044119	3	True				
ANR	5044148	AssignmentExpression	dev -> pad = proto -> pad		5044119	0		=			
ANR	5044149	PtrMemberAccess	dev -> pad		5044119	0					
ANR	5044150	Identifier	dev		5044119	0					
ANR	5044151	Identifier	pad		5044119	1					
ANR	5044152	PtrMemberAccess	proto -> pad		5044119	1					
ANR	5044153	Identifier	proto		5044119	0					
ANR	5044154	Identifier	pad		5044119	1					
ANR	5044155	ExpressionStatement	dev -> log2_align_mod = proto -> log2_align_mod	627:4:20041:20084	5044119	4	True				
ANR	5044156	AssignmentExpression	dev -> log2_align_mod = proto -> log2_align_mod		5044119	0		=			
ANR	5044157	PtrMemberAccess	dev -> log2_align_mod		5044119	0					
ANR	5044158	Identifier	dev		5044119	0					
ANR	5044159	Identifier	log2_align_mod		5044119	1					
ANR	5044160	PtrMemberAccess	proto -> log2_align_mod		5044119	1					
ANR	5044161	Identifier	proto		5044119	0					
ANR	5044162	Identifier	log2_align_mod		5044119	1					
ANR	5044163	ExpressionStatement	dev -> is_planar = proto -> is_planar	628:4:20090:20123	5044119	5	True				
ANR	5044164	AssignmentExpression	dev -> is_planar = proto -> is_planar		5044119	0		=			
ANR	5044165	PtrMemberAccess	dev -> is_planar		5044119	0					
ANR	5044166	Identifier	dev		5044119	0					
ANR	5044167	Identifier	is_planar		5044119	1					
ANR	5044168	PtrMemberAccess	proto -> is_planar		5044119	1					
ANR	5044169	Identifier	proto		5044119	0					
ANR	5044170	Identifier	is_planar		5044119	1					
ANR	5044171	ExpressionStatement	"rc_init ( dev , NULL , 0 )"	629:4:20129:20150	5044119	6	True				
ANR	5044172	CallExpression	"rc_init ( dev , NULL , 0 )"		5044119	0					
ANR	5044173	Callee	rc_init		5044119	0					
ANR	5044174	Identifier	rc_init		5044119	0					
ANR	5044175	ArgumentList	dev		5044119	1					
ANR	5044176	Argument	dev		5044119	0					
ANR	5044177	Identifier	dev		5044119	0					
ANR	5044178	Argument	NULL		5044119	1					
ANR	5044179	Identifier	NULL		5044119	0					
ANR	5044180	Argument	0		5044119	2					
ANR	5044181	PrimaryExpression	0		5044119	0					
ANR	5044182	ReturnType	void		5044119	1					
ANR	5044183	Identifier	gx_device_init_on_stack		5044119	2					
ANR	5044184	ParameterList	"gx_device * dev , const gx_device * proto , gs_memory_t * mem"		5044119	3					
ANR	5044185	Parameter	gx_device * dev	620:24:19833:19847	5044119	0	True				
ANR	5044186	ParameterType	gx_device *		5044119	0					
ANR	5044187	Identifier	dev		5044119	1					
ANR	5044188	Parameter	const gx_device * proto	620:41:19850:19872	5044119	1	True				
ANR	5044189	ParameterType	const gx_device *		5044119	0					
ANR	5044190	Identifier	proto		5044119	1					
ANR	5044191	Parameter	gs_memory_t * mem	621:24:19899:19915	5044119	2	True				
ANR	5044192	ParameterType	gs_memory_t *		5044119	0					
ANR	5044193	Identifier	mem		5044119	1					
ANR	5044194	CFGEntryNode	ENTRY		5044119		True				
ANR	5044195	CFGExitNode	EXIT		5044119		True				
ANR	5044196	Symbol	* dev		5044119						
ANR	5044197	Symbol	dev -> log2_align_mod		5044119						
ANR	5044198	Symbol	proto -> params_size		5044119						
ANR	5044199	Symbol	NULL		5044119						
ANR	5044200	Symbol	proto -> pad		5044119						
ANR	5044201	Symbol	dev -> pad		5044119						
ANR	5044202	Symbol	proto -> log2_align_mod		5044119						
ANR	5044203	Symbol	* proto		5044119						
ANR	5044204	Symbol	dev -> memory		5044119						
ANR	5044205	Symbol	dev -> is_planar		5044119						
ANR	5044206	Symbol	dev		5044119						
ANR	5044207	Symbol	mem		5044119						
ANR	5044208	Symbol	proto		5044119						
ANR	5044209	Symbol	dev -> retained		5044119						
ANR	5044210	Symbol	proto -> is_planar		5044119						
ANR	5044211	Function	gs_make_null_device	633:0:20181:22309							
ANR	5044212	FunctionDef	"gs_make_null_device (gx_device_null * dev_null , gx_device * dev , gs_memory_t * mem)"		5044211	0					
ANR	5044213	CompoundStatement		636:0:20287:22309	5044211	0					
ANR	5044214	ExpressionStatement	"gx_device_init ( ( gx_device * ) dev_null , ( const gx_device * ) & gs_null_device , mem , true )"	637:4:20293:20396	5044211	0	True				
ANR	5044215	CallExpression	"gx_device_init ( ( gx_device * ) dev_null , ( const gx_device * ) & gs_null_device , mem , true )"		5044211	0					
ANR	5044216	Callee	gx_device_init		5044211	0					
ANR	5044217	Identifier	gx_device_init		5044211	0					
ANR	5044218	ArgumentList	( gx_device * ) dev_null		5044211	1					
ANR	5044219	Argument	( gx_device * ) dev_null		5044211	0					
ANR	5044220	CastExpression	( gx_device * ) dev_null		5044211	0					
ANR	5044221	CastTarget	gx_device *		5044211	0					
ANR	5044222	Identifier	dev_null		5044211	1					
ANR	5044223	Argument	( const gx_device * ) & gs_null_device		5044211	1					
ANR	5044224	CastExpression	( const gx_device * ) & gs_null_device		5044211	0					
ANR	5044225	CastTarget	const gx_device *		5044211	0					
ANR	5044226	UnaryOperationExpression	& gs_null_device		5044211	1					
ANR	5044227	UnaryOperator	&		5044211	0					
ANR	5044228	Identifier	gs_null_device		5044211	1					
ANR	5044229	Argument	mem		5044211	2					
ANR	5044230	Identifier	mem		5044211	0					
ANR	5044231	Argument	true		5044211	3					
ANR	5044232	Identifier	true		5044211	0					
ANR	5044233	ExpressionStatement	"gx_device_set_target ( ( gx_device_forward * ) dev_null , dev )"	639:4:20402:20458	5044211	1	True				
ANR	5044234	CallExpression	"gx_device_set_target ( ( gx_device_forward * ) dev_null , dev )"		5044211	0					
ANR	5044235	Callee	gx_device_set_target		5044211	0					
ANR	5044236	Identifier	gx_device_set_target		5044211	0					
ANR	5044237	ArgumentList	( gx_device_forward * ) dev_null		5044211	1					
ANR	5044238	Argument	( gx_device_forward * ) dev_null		5044211	0					
ANR	5044239	CastExpression	( gx_device_forward * ) dev_null		5044211	0					
ANR	5044240	CastTarget	gx_device_forward *		5044211	0					
ANR	5044241	Identifier	dev_null		5044211	1					
ANR	5044242	Argument	dev		5044211	1					
ANR	5044243	Identifier	dev		5044211	0					
ANR	5044244	IfStatement	if ( dev )		5044211	2					
ANR	5044245	Condition	dev	640:8:20468:20470	5044211	0	True				
ANR	5044246	Identifier	dev		5044211	0					
ANR	5044247	CompoundStatement		12:8:513:550	5044211	1					
ANR	5044248	IdentifierDeclStatement	gx_device * dn = ( gx_device * ) dev_null ;	647:8:20801:20838	5044211	0	True				
ANR	5044249	IdentifierDecl	* dn = ( gx_device * ) dev_null		5044211	0					
ANR	5044250	IdentifierDeclType	gx_device *		5044211	0					
ANR	5044251	Identifier	dn		5044211	1					
ANR	5044252	AssignmentExpression	* dn = ( gx_device * ) dev_null		5044211	2		=			
ANR	5044253	Identifier	dn		5044211	0					
ANR	5044254	CastExpression	( gx_device * ) dev_null		5044211	1					
ANR	5044255	CastTarget	gx_device *		5044211	0					
ANR	5044256	Identifier	dev_null		5044211	1					
ANR	5044257	ExpressionStatement	"set_dev_proc ( dn , get_color_mapping_procs , gx_forward_get_color_mapping_procs )"	648:8:20848:20925	5044211	1	True				
ANR	5044258	CallExpression	"set_dev_proc ( dn , get_color_mapping_procs , gx_forward_get_color_mapping_procs )"		5044211	0					
ANR	5044259	Callee	set_dev_proc		5044211	0					
ANR	5044260	Identifier	set_dev_proc		5044211	0					
ANR	5044261	ArgumentList	dn		5044211	1					
ANR	5044262	Argument	dn		5044211	0					
ANR	5044263	Identifier	dn		5044211	0					
ANR	5044264	Argument	get_color_mapping_procs		5044211	1					
ANR	5044265	Identifier	get_color_mapping_procs		5044211	0					
ANR	5044266	Argument	gx_forward_get_color_mapping_procs		5044211	2					
ANR	5044267	Identifier	gx_forward_get_color_mapping_procs		5044211	0					
ANR	5044268	ExpressionStatement	"set_dev_proc ( dn , get_color_comp_index , gx_forward_get_color_comp_index )"	649:8:20935:21006	5044211	2	True				
ANR	5044269	CallExpression	"set_dev_proc ( dn , get_color_comp_index , gx_forward_get_color_comp_index )"		5044211	0					
ANR	5044270	Callee	set_dev_proc		5044211	0					
ANR	5044271	Identifier	set_dev_proc		5044211	0					
ANR	5044272	ArgumentList	dn		5044211	1					
ANR	5044273	Argument	dn		5044211	0					
ANR	5044274	Identifier	dn		5044211	0					
ANR	5044275	Argument	get_color_comp_index		5044211	1					
ANR	5044276	Identifier	get_color_comp_index		5044211	0					
ANR	5044277	Argument	gx_forward_get_color_comp_index		5044211	2					
ANR	5044278	Identifier	gx_forward_get_color_comp_index		5044211	0					
ANR	5044279	ExpressionStatement	"set_dev_proc ( dn , encode_color , gx_forward_encode_color )"	650:8:21016:21071	5044211	3	True				
ANR	5044280	CallExpression	"set_dev_proc ( dn , encode_color , gx_forward_encode_color )"		5044211	0					
ANR	5044281	Callee	set_dev_proc		5044211	0					
ANR	5044282	Identifier	set_dev_proc		5044211	0					
ANR	5044283	ArgumentList	dn		5044211	1					
ANR	5044284	Argument	dn		5044211	0					
ANR	5044285	Identifier	dn		5044211	0					
ANR	5044286	Argument	encode_color		5044211	1					
ANR	5044287	Identifier	encode_color		5044211	0					
ANR	5044288	Argument	gx_forward_encode_color		5044211	2					
ANR	5044289	Identifier	gx_forward_encode_color		5044211	0					
ANR	5044290	ExpressionStatement	"set_dev_proc ( dn , decode_color , gx_forward_decode_color )"	651:8:21081:21136	5044211	4	True				
ANR	5044291	CallExpression	"set_dev_proc ( dn , decode_color , gx_forward_decode_color )"		5044211	0					
ANR	5044292	Callee	set_dev_proc		5044211	0					
ANR	5044293	Identifier	set_dev_proc		5044211	0					
ANR	5044294	ArgumentList	dn		5044211	1					
ANR	5044295	Argument	dn		5044211	0					
ANR	5044296	Identifier	dn		5044211	0					
ANR	5044297	Argument	decode_color		5044211	1					
ANR	5044298	Identifier	decode_color		5044211	0					
ANR	5044299	Argument	gx_forward_decode_color		5044211	2					
ANR	5044300	Identifier	gx_forward_decode_color		5044211	0					
ANR	5044301	ExpressionStatement	"set_dev_proc ( dn , get_profile , gx_forward_get_profile )"	652:8:21146:21199	5044211	5	True				
ANR	5044302	CallExpression	"set_dev_proc ( dn , get_profile , gx_forward_get_profile )"		5044211	0					
ANR	5044303	Callee	set_dev_proc		5044211	0					
ANR	5044304	Identifier	set_dev_proc		5044211	0					
ANR	5044305	ArgumentList	dn		5044211	1					
ANR	5044306	Argument	dn		5044211	0					
ANR	5044307	Identifier	dn		5044211	0					
ANR	5044308	Argument	get_profile		5044211	1					
ANR	5044309	Identifier	get_profile		5044211	0					
ANR	5044310	Argument	gx_forward_get_profile		5044211	2					
ANR	5044311	Identifier	gx_forward_get_profile		5044211	0					
ANR	5044312	ExpressionStatement	"set_dev_proc ( dn , set_graphics_type_tag , gx_forward_set_graphics_type_tag )"	653:8:21209:21282	5044211	6	True				
ANR	5044313	CallExpression	"set_dev_proc ( dn , set_graphics_type_tag , gx_forward_set_graphics_type_tag )"		5044211	0					
ANR	5044314	Callee	set_dev_proc		5044211	0					
ANR	5044315	Identifier	set_dev_proc		5044211	0					
ANR	5044316	ArgumentList	dn		5044211	1					
ANR	5044317	Argument	dn		5044211	0					
ANR	5044318	Identifier	dn		5044211	0					
ANR	5044319	Argument	set_graphics_type_tag		5044211	1					
ANR	5044320	Identifier	set_graphics_type_tag		5044211	0					
ANR	5044321	Argument	gx_forward_set_graphics_type_tag		5044211	2					
ANR	5044322	Identifier	gx_forward_set_graphics_type_tag		5044211	0					
ANR	5044323	ExpressionStatement	"set_dev_proc ( dn , begin_transparency_group , gx_default_begin_transparency_group )"	654:8:21292:21371	5044211	7	True				
ANR	5044324	CallExpression	"set_dev_proc ( dn , begin_transparency_group , gx_default_begin_transparency_group )"		5044211	0					
ANR	5044325	Callee	set_dev_proc		5044211	0					
ANR	5044326	Identifier	set_dev_proc		5044211	0					
ANR	5044327	ArgumentList	dn		5044211	1					
ANR	5044328	Argument	dn		5044211	0					
ANR	5044329	Identifier	dn		5044211	0					
ANR	5044330	Argument	begin_transparency_group		5044211	1					
ANR	5044331	Identifier	begin_transparency_group		5044211	0					
ANR	5044332	Argument	gx_default_begin_transparency_group		5044211	2					
ANR	5044333	Identifier	gx_default_begin_transparency_group		5044211	0					
ANR	5044334	ExpressionStatement	"set_dev_proc ( dn , end_transparency_group , gx_default_end_transparency_group )"	655:8:21381:21456	5044211	8	True				
ANR	5044335	CallExpression	"set_dev_proc ( dn , end_transparency_group , gx_default_end_transparency_group )"		5044211	0					
ANR	5044336	Callee	set_dev_proc		5044211	0					
ANR	5044337	Identifier	set_dev_proc		5044211	0					
ANR	5044338	ArgumentList	dn		5044211	1					
ANR	5044339	Argument	dn		5044211	0					
ANR	5044340	Identifier	dn		5044211	0					
ANR	5044341	Argument	end_transparency_group		5044211	1					
ANR	5044342	Identifier	end_transparency_group		5044211	0					
ANR	5044343	Argument	gx_default_end_transparency_group		5044211	2					
ANR	5044344	Identifier	gx_default_end_transparency_group		5044211	0					
ANR	5044345	ExpressionStatement	"set_dev_proc ( dn , begin_transparency_mask , gx_default_begin_transparency_mask )"	656:8:21466:21543	5044211	9	True				
ANR	5044346	CallExpression	"set_dev_proc ( dn , begin_transparency_mask , gx_default_begin_transparency_mask )"		5044211	0					
ANR	5044347	Callee	set_dev_proc		5044211	0					
ANR	5044348	Identifier	set_dev_proc		5044211	0					
ANR	5044349	ArgumentList	dn		5044211	1					
ANR	5044350	Argument	dn		5044211	0					
ANR	5044351	Identifier	dn		5044211	0					
ANR	5044352	Argument	begin_transparency_mask		5044211	1					
ANR	5044353	Identifier	begin_transparency_mask		5044211	0					
ANR	5044354	Argument	gx_default_begin_transparency_mask		5044211	2					
ANR	5044355	Identifier	gx_default_begin_transparency_mask		5044211	0					
ANR	5044356	ExpressionStatement	"set_dev_proc ( dn , end_transparency_mask , gx_default_end_transparency_mask )"	657:8:21553:21626	5044211	10	True				
ANR	5044357	CallExpression	"set_dev_proc ( dn , end_transparency_mask , gx_default_end_transparency_mask )"		5044211	0					
ANR	5044358	Callee	set_dev_proc		5044211	0					
ANR	5044359	Identifier	set_dev_proc		5044211	0					
ANR	5044360	ArgumentList	dn		5044211	1					
ANR	5044361	Argument	dn		5044211	0					
ANR	5044362	Identifier	dn		5044211	0					
ANR	5044363	Argument	end_transparency_mask		5044211	1					
ANR	5044364	Identifier	end_transparency_mask		5044211	0					
ANR	5044365	Argument	gx_default_end_transparency_mask		5044211	2					
ANR	5044366	Identifier	gx_default_end_transparency_mask		5044211	0					
ANR	5044367	ExpressionStatement	"set_dev_proc ( dn , discard_transparency_layer , gx_default_discard_transparency_layer )"	658:8:21636:21719	5044211	11	True				
ANR	5044368	CallExpression	"set_dev_proc ( dn , discard_transparency_layer , gx_default_discard_transparency_layer )"		5044211	0					
ANR	5044369	Callee	set_dev_proc		5044211	0					
ANR	5044370	Identifier	set_dev_proc		5044211	0					
ANR	5044371	ArgumentList	dn		5044211	1					
ANR	5044372	Argument	dn		5044211	0					
ANR	5044373	Identifier	dn		5044211	0					
ANR	5044374	Argument	discard_transparency_layer		5044211	1					
ANR	5044375	Identifier	discard_transparency_layer		5044211	0					
ANR	5044376	Argument	gx_default_discard_transparency_layer		5044211	2					
ANR	5044377	Identifier	gx_default_discard_transparency_layer		5044211	0					
ANR	5044378	ExpressionStatement	"set_dev_proc ( dn , pattern_manage , gx_default_pattern_manage )"	659:8:21729:21788	5044211	12	True				
ANR	5044379	CallExpression	"set_dev_proc ( dn , pattern_manage , gx_default_pattern_manage )"		5044211	0					
ANR	5044380	Callee	set_dev_proc		5044211	0					
ANR	5044381	Identifier	set_dev_proc		5044211	0					
ANR	5044382	ArgumentList	dn		5044211	1					
ANR	5044383	Argument	dn		5044211	0					
ANR	5044384	Identifier	dn		5044211	0					
ANR	5044385	Argument	pattern_manage		5044211	1					
ANR	5044386	Identifier	pattern_manage		5044211	0					
ANR	5044387	Argument	gx_default_pattern_manage		5044211	2					
ANR	5044388	Identifier	gx_default_pattern_manage		5044211	0					
ANR	5044389	ExpressionStatement	"set_dev_proc ( dn , push_transparency_state , gx_default_push_transparency_state )"	660:8:21798:21875	5044211	13	True				
ANR	5044390	CallExpression	"set_dev_proc ( dn , push_transparency_state , gx_default_push_transparency_state )"		5044211	0					
ANR	5044391	Callee	set_dev_proc		5044211	0					
ANR	5044392	Identifier	set_dev_proc		5044211	0					
ANR	5044393	ArgumentList	dn		5044211	1					
ANR	5044394	Argument	dn		5044211	0					
ANR	5044395	Identifier	dn		5044211	0					
ANR	5044396	Argument	push_transparency_state		5044211	1					
ANR	5044397	Identifier	push_transparency_state		5044211	0					
ANR	5044398	Argument	gx_default_push_transparency_state		5044211	2					
ANR	5044399	Identifier	gx_default_push_transparency_state		5044211	0					
ANR	5044400	ExpressionStatement	"set_dev_proc ( dn , pop_transparency_state , gx_default_pop_transparency_state )"	661:8:21885:21960	5044211	14	True				
ANR	5044401	CallExpression	"set_dev_proc ( dn , pop_transparency_state , gx_default_pop_transparency_state )"		5044211	0					
ANR	5044402	Callee	set_dev_proc		5044211	0					
ANR	5044403	Identifier	set_dev_proc		5044211	0					
ANR	5044404	ArgumentList	dn		5044211	1					
ANR	5044405	Argument	dn		5044211	0					
ANR	5044406	Identifier	dn		5044211	0					
ANR	5044407	Argument	pop_transparency_state		5044211	1					
ANR	5044408	Identifier	pop_transparency_state		5044211	0					
ANR	5044409	Argument	gx_default_pop_transparency_state		5044211	2					
ANR	5044410	Identifier	gx_default_pop_transparency_state		5044211	0					
ANR	5044411	ExpressionStatement	"set_dev_proc ( dn , put_image , gx_default_put_image )"	662:8:21970:22019	5044211	15	True				
ANR	5044412	CallExpression	"set_dev_proc ( dn , put_image , gx_default_put_image )"		5044211	0					
ANR	5044413	Callee	set_dev_proc		5044211	0					
ANR	5044414	Identifier	set_dev_proc		5044211	0					
ANR	5044415	ArgumentList	dn		5044211	1					
ANR	5044416	Argument	dn		5044211	0					
ANR	5044417	Identifier	dn		5044211	0					
ANR	5044418	Argument	put_image		5044211	1					
ANR	5044419	Identifier	put_image		5044211	0					
ANR	5044420	Argument	gx_default_put_image		5044211	2					
ANR	5044421	Identifier	gx_default_put_image		5044211	0					
ANR	5044422	ExpressionStatement	"set_dev_proc ( dn , copy_planes , gx_default_copy_planes )"	663:8:22029:22082	5044211	16	True				
ANR	5044423	CallExpression	"set_dev_proc ( dn , copy_planes , gx_default_copy_planes )"		5044211	0					
ANR	5044424	Callee	set_dev_proc		5044211	0					
ANR	5044425	Identifier	set_dev_proc		5044211	0					
ANR	5044426	ArgumentList	dn		5044211	1					
ANR	5044427	Argument	dn		5044211	0					
ANR	5044428	Identifier	dn		5044211	0					
ANR	5044429	Argument	copy_planes		5044211	1					
ANR	5044430	Identifier	copy_planes		5044211	0					
ANR	5044431	Argument	gx_default_copy_planes		5044211	2					
ANR	5044432	Identifier	gx_default_copy_planes		5044211	0					
ANR	5044433	ExpressionStatement	"set_dev_proc ( dn , copy_alpha_hl_color , gx_default_no_copy_alpha_hl_color )"	664:8:22092:22164	5044211	17	True				
ANR	5044434	CallExpression	"set_dev_proc ( dn , copy_alpha_hl_color , gx_default_no_copy_alpha_hl_color )"		5044211	0					
ANR	5044435	Callee	set_dev_proc		5044211	0					
ANR	5044436	Identifier	set_dev_proc		5044211	0					
ANR	5044437	ArgumentList	dn		5044211	1					
ANR	5044438	Argument	dn		5044211	0					
ANR	5044439	Identifier	dn		5044211	0					
ANR	5044440	Argument	copy_alpha_hl_color		5044211	1					
ANR	5044441	Identifier	copy_alpha_hl_color		5044211	0					
ANR	5044442	Argument	gx_default_no_copy_alpha_hl_color		5044211	2					
ANR	5044443	Identifier	gx_default_no_copy_alpha_hl_color		5044211	0					
ANR	5044444	ExpressionStatement	dn -> graphics_type_tag = dev -> graphics_type_tag	665:8:22174:22220	5044211	18	True				
ANR	5044445	AssignmentExpression	dn -> graphics_type_tag = dev -> graphics_type_tag		5044211	0		=			
ANR	5044446	PtrMemberAccess	dn -> graphics_type_tag		5044211	0					
ANR	5044447	Identifier	dn		5044211	0					
ANR	5044448	Identifier	graphics_type_tag		5044211	1					
ANR	5044449	PtrMemberAccess	dev -> graphics_type_tag		5044211	1					
ANR	5044450	Identifier	dev		5044211	0					
ANR	5044451	Identifier	graphics_type_tag		5044211	1					
ANR	5044452	ExpressionStatement	"gx_device_copy_color_params ( dn , dev )"	666:8:22265:22301	5044211	19	True				
ANR	5044453	CallExpression	"gx_device_copy_color_params ( dn , dev )"		5044211	0					
ANR	5044454	Callee	gx_device_copy_color_params		5044211	0					
ANR	5044455	Identifier	gx_device_copy_color_params		5044211	0					
ANR	5044456	ArgumentList	dn		5044211	1					
ANR	5044457	Argument	dn		5044211	0					
ANR	5044458	Identifier	dn		5044211	0					
ANR	5044459	Argument	dev		5044211	1					
ANR	5044460	Identifier	dev		5044211	0					
ANR	5044461	ReturnType	void		5044211	1					
ANR	5044462	Identifier	gs_make_null_device		5044211	2					
ANR	5044463	ParameterList	"gx_device_null * dev_null , gx_device * dev , gs_memory_t * mem"		5044211	3					
ANR	5044464	Parameter	gx_device_null * dev_null	634:20:20206:20229	5044211	0	True				
ANR	5044465	ParameterType	gx_device_null *		5044211	0					
ANR	5044466	Identifier	dev_null		5044211	1					
ANR	5044467	Parameter	gx_device * dev	634:46:20232:20245	5044211	1	True				
ANR	5044468	ParameterType	gx_device *		5044211	0					
ANR	5044469	Identifier	dev		5044211	1					
ANR	5044470	Parameter	gs_memory_t * mem	635:20:20268:20284	5044211	2	True				
ANR	5044471	ParameterType	gs_memory_t *		5044211	0					
ANR	5044472	Identifier	mem		5044211	1					
ANR	5044473	CFGEntryNode	ENTRY		5044211		True				
ANR	5044474	CFGExitNode	EXIT		5044211		True				
ANR	5044475	Symbol	* dev		5044211						
ANR	5044476	Symbol	gx_default_discard_transparency_layer		5044211						
ANR	5044477	Symbol	encode_color		5044211						
ANR	5044478	Symbol	begin_transparency_group		5044211						
ANR	5044479	Symbol	pattern_manage		5044211						
ANR	5044480	Symbol	gx_default_no_copy_alpha_hl_color		5044211						
ANR	5044481	Symbol	gx_default_pattern_manage		5044211						
ANR	5044482	Symbol	dn		5044211						
ANR	5044483	Symbol	gx_default_begin_transparency_group		5044211						
ANR	5044484	Symbol	gx_default_copy_planes		5044211						
ANR	5044485	Symbol	gx_default_begin_transparency_mask		5044211						
ANR	5044486	Symbol	& gs_null_device		5044211						
ANR	5044487	Symbol	decode_color		5044211						
ANR	5044488	Symbol	gx_default_push_transparency_state		5044211						
ANR	5044489	Symbol	* dn		5044211						
ANR	5044490	Symbol	dev		5044211						
ANR	5044491	Symbol	mem		5044211						
ANR	5044492	Symbol	gx_forward_set_graphics_type_tag		5044211						
ANR	5044493	Symbol	gx_default_end_transparency_mask		5044211						
ANR	5044494	Symbol	discard_transparency_layer		5044211						
ANR	5044495	Symbol	end_transparency_mask		5044211						
ANR	5044496	Symbol	get_profile		5044211						
ANR	5044497	Symbol	begin_transparency_mask		5044211						
ANR	5044498	Symbol	gx_forward_get_color_mapping_procs		5044211						
ANR	5044499	Symbol	get_color_comp_index		5044211						
ANR	5044500	Symbol	dev_null		5044211						
ANR	5044501	Symbol	end_transparency_group		5044211						
ANR	5044502	Symbol	put_image		5044211						
ANR	5044503	Symbol	gx_forward_encode_color		5044211						
ANR	5044504	Symbol	pop_transparency_state		5044211						
ANR	5044505	Symbol	gx_default_put_image		5044211						
ANR	5044506	Symbol	set_graphics_type_tag		5044211						
ANR	5044507	Symbol	gx_default_pop_transparency_state		5044211						
ANR	5044508	Symbol	copy_alpha_hl_color		5044211						
ANR	5044509	Symbol	dn -> graphics_type_tag		5044211						
ANR	5044510	Symbol	gx_forward_get_color_comp_index		5044211						
ANR	5044511	Symbol	gx_forward_decode_color		5044211						
ANR	5044512	Symbol	copy_planes		5044211						
ANR	5044513	Symbol	true		5044211						
ANR	5044514	Symbol	get_color_mapping_procs		5044211						
ANR	5044515	Symbol	gx_default_end_transparency_group		5044211						
ANR	5044516	Symbol	push_transparency_state		5044211						
ANR	5044517	Symbol	dev -> graphics_type_tag		5044211						
ANR	5044518	Symbol	gx_forward_get_profile		5044211						
ANR	5044519	Function	gs_is_null_device	671:0:22337:22500							
ANR	5044520	FunctionDef	gs_is_null_device (gx_device * dev)		5044519	0					
ANR	5044521	CompoundStatement		672:0:22376:22500	5044519	0					
ANR	5044522	ReturnStatement	return dev -> procs . fill_path == gs_null_device . procs . fill_path ;	674:4:22437:22498	5044519	0	True				
ANR	5044523	EqualityExpression	dev -> procs . fill_path == gs_null_device . procs . fill_path		5044519	0		==			
ANR	5044524	MemberAccess	dev -> procs . fill_path		5044519	0					
ANR	5044525	PtrMemberAccess	dev -> procs		5044519	0					
ANR	5044526	Identifier	dev		5044519	0					
ANR	5044527	Identifier	procs		5044519	1					
ANR	5044528	Identifier	fill_path		5044519	1					
ANR	5044529	MemberAccess	gs_null_device . procs . fill_path		5044519	1					
ANR	5044530	MemberAccess	gs_null_device . procs		5044519	0					
ANR	5044531	Identifier	gs_null_device		5044519	0					
ANR	5044532	Identifier	procs		5044519	1					
ANR	5044533	Identifier	fill_path		5044519	1					
ANR	5044534	ReturnType	bool		5044519	1					
ANR	5044535	Identifier	gs_is_null_device		5044519	2					
ANR	5044536	ParameterList	gx_device * dev		5044519	3					
ANR	5044537	Parameter	gx_device * dev	671:23:22360:22373	5044519	0	True				
ANR	5044538	ParameterType	gx_device *		5044519	0					
ANR	5044539	Identifier	dev		5044519	1					
ANR	5044540	CFGEntryNode	ENTRY		5044519		True				
ANR	5044541	CFGExitNode	EXIT		5044519		True				
ANR	5044542	Symbol	dev -> procs		5044519						
ANR	5044543	Symbol	* dev		5044519						
ANR	5044544	Symbol	dev		5044519						
ANR	5044545	Symbol	gs_null_device . procs		5044519						
ANR	5044546	Symbol	gs_null_device		5044519						
ANR	5044547	Symbol	dev -> procs . fill_path		5044519						
ANR	5044548	Symbol	gs_null_device . procs . fill_path		5044519						
ANR	5044549	Function	gx_device_retain	678:0:22552:22809							
ANR	5044550	FunctionDef	"gx_device_retain (gx_device * dev , bool retained)"		5044549	0					
ANR	5044551	CompoundStatement		680:0:22605:22809	5044549	0					
ANR	5044552	IdentifierDeclStatement	int delta = ( int ) retained - ( int ) dev -> retained ;	681:4:22611:22657	5044549	0	True				
ANR	5044553	IdentifierDecl	delta = ( int ) retained - ( int ) dev -> retained		5044549	0					
ANR	5044554	IdentifierDeclType	int		5044549	0					
ANR	5044555	Identifier	delta		5044549	1					
ANR	5044556	AssignmentExpression	delta = ( int ) retained - ( int ) dev -> retained		5044549	2		=			
ANR	5044557	Identifier	delta		5044549	0					
ANR	5044558	AdditiveExpression	( int ) retained - ( int ) dev -> retained		5044549	1		-			
ANR	5044559	CastExpression	( int ) retained		5044549	0					
ANR	5044560	CastTarget	int		5044549	0					
ANR	5044561	Identifier	retained		5044549	1					
ANR	5044562	CastExpression	( int ) dev -> retained		5044549	1					
ANR	5044563	CastTarget	int		5044549	0					
ANR	5044564	PtrMemberAccess	dev -> retained		5044549	1					
ANR	5044565	Identifier	dev		5044549	0					
ANR	5044566	Identifier	retained		5044549	1					
ANR	5044567	IfStatement	if ( delta )		5044549	1					
ANR	5044568	Condition	delta	683:8:22668:22672	5044549	0	True				
ANR	5044569	Identifier	delta		5044549	0					
ANR	5044570	CompoundStatement		4:15:69:69	5044549	1					
ANR	5044571	ExpressionStatement	dev -> retained = retained	684:8:22685:22709	5044549	0	True				
ANR	5044572	AssignmentExpression	dev -> retained = retained		5044549	0		=			
ANR	5044573	PtrMemberAccess	dev -> retained		5044549	0					
ANR	5044574	Identifier	dev		5044549	0					
ANR	5044575	Identifier	retained		5044549	1					
ANR	5044576	Identifier	retained		5044549	1					
ANR	5044577	ExpressionStatement	"rc_adjust_only ( dev , delta , ""gx_device_retain"" )"	685:8:22755:22801	5044549	1	True				
ANR	5044578	CallExpression	"rc_adjust_only ( dev , delta , ""gx_device_retain"" )"		5044549	0					
ANR	5044579	Callee	rc_adjust_only		5044549	0					
ANR	5044580	Identifier	rc_adjust_only		5044549	0					
ANR	5044581	ArgumentList	dev		5044549	1					
ANR	5044582	Argument	dev		5044549	0					
ANR	5044583	Identifier	dev		5044549	0					
ANR	5044584	Argument	delta		5044549	1					
ANR	5044585	Identifier	delta		5044549	0					
ANR	5044586	Argument	"""gx_device_retain"""		5044549	2					
ANR	5044587	PrimaryExpression	"""gx_device_retain"""		5044549	0					
ANR	5044588	ReturnType	void		5044549	1					
ANR	5044589	Identifier	gx_device_retain		5044549	2					
ANR	5044590	ParameterList	"gx_device * dev , bool retained"		5044549	3					
ANR	5044591	Parameter	gx_device * dev	679:17:22574:22587	5044549	0	True				
ANR	5044592	ParameterType	gx_device *		5044549	0					
ANR	5044593	Identifier	dev		5044549	1					
ANR	5044594	Parameter	bool retained	679:33:22590:22602	5044549	1	True				
ANR	5044595	ParameterType	bool		5044549	0					
ANR	5044596	Identifier	retained		5044549	1					
ANR	5044597	CFGEntryNode	ENTRY		5044549		True				
ANR	5044598	CFGExitNode	EXIT		5044549		True				
ANR	5044599	Symbol	* dev		5044549						
ANR	5044600	Symbol	retained		5044549						
ANR	5044601	Symbol	dev		5044549						
ANR	5044602	Symbol	delta		5044549						
ANR	5044603	Symbol	dev -> retained		5044549						
ANR	5044604	Function	gs_nulldevice	690:0:22840:24070							
ANR	5044605	FunctionDef	gs_nulldevice (gs_gstate * pgs)		5044604	0					
ANR	5044606	CompoundStatement		692:0:22875:24070	5044604	0					
ANR	5044607	IdentifierDeclStatement	int code = 0 ;	693:4:22881:22893	5044604	0	True				
ANR	5044608	IdentifierDecl	code = 0		5044604	0					
ANR	5044609	IdentifierDeclType	int		5044604	0					
ANR	5044610	Identifier	code		5044604	1					
ANR	5044611	AssignmentExpression	code = 0		5044604	2		=			
ANR	5044612	Identifier	code		5044604	0					
ANR	5044613	PrimaryExpression	0		5044604	1					
ANR	5044614	IfStatement	if ( pgs -> device == 0 || ! gx_device_is_null ( pgs -> device ) )		5044604	1					
ANR	5044615	Condition	pgs -> device == 0 || ! gx_device_is_null ( pgs -> device )	695:8:22904:22954	5044604	0	True				
ANR	5044616	OrExpression	pgs -> device == 0 || ! gx_device_is_null ( pgs -> device )		5044604	0		||			
ANR	5044617	EqualityExpression	pgs -> device == 0		5044604	0		==			
ANR	5044618	PtrMemberAccess	pgs -> device		5044604	0					
ANR	5044619	Identifier	pgs		5044604	0					
ANR	5044620	Identifier	device		5044604	1					
ANR	5044621	PrimaryExpression	0		5044604	1					
ANR	5044622	UnaryOperationExpression	! gx_device_is_null ( pgs -> device )		5044604	1					
ANR	5044623	UnaryOperator	!		5044604	0					
ANR	5044624	CallExpression	gx_device_is_null ( pgs -> device )		5044604	1					
ANR	5044625	Callee	gx_device_is_null		5044604	0					
ANR	5044626	Identifier	gx_device_is_null		5044604	0					
ANR	5044627	ArgumentList	pgs -> device		5044604	1					
ANR	5044628	Argument	pgs -> device		5044604	0					
ANR	5044629	PtrMemberAccess	pgs -> device		5044604	0					
ANR	5044630	Identifier	pgs		5044604	0					
ANR	5044631	Identifier	device		5044604	1					
ANR	5044632	CompoundStatement		5:8:91:106	5044604	1					
ANR	5044633	IdentifierDeclStatement	gx_device * ndev ;	696:8:22967:22982	5044604	0	True				
ANR	5044634	IdentifierDecl	* ndev		5044604	0					
ANR	5044635	IdentifierDeclType	gx_device *		5044604	0					
ANR	5044636	Identifier	ndev		5044604	1					
ANR	5044637	ExpressionStatement	"code = gs_copydevice ( & ndev , ( const gx_device * ) & gs_null_device , pgs -> memory )"	697:8:22992:23101	5044604	1	True				
ANR	5044638	AssignmentExpression	"code = gs_copydevice ( & ndev , ( const gx_device * ) & gs_null_device , pgs -> memory )"		5044604	0		=			
ANR	5044639	Identifier	code		5044604	0					
ANR	5044640	CallExpression	"gs_copydevice ( & ndev , ( const gx_device * ) & gs_null_device , pgs -> memory )"		5044604	1					
ANR	5044641	Callee	gs_copydevice		5044604	0					
ANR	5044642	Identifier	gs_copydevice		5044604	0					
ANR	5044643	ArgumentList	& ndev		5044604	1					
ANR	5044644	Argument	& ndev		5044604	0					
ANR	5044645	UnaryOperationExpression	& ndev		5044604	0					
ANR	5044646	UnaryOperator	&		5044604	0					
ANR	5044647	Identifier	ndev		5044604	1					
ANR	5044648	Argument	( const gx_device * ) & gs_null_device		5044604	1					
ANR	5044649	CastExpression	( const gx_device * ) & gs_null_device		5044604	0					
ANR	5044650	CastTarget	const gx_device *		5044604	0					
ANR	5044651	UnaryOperationExpression	& gs_null_device		5044604	1					
ANR	5044652	UnaryOperator	&		5044604	0					
ANR	5044653	Identifier	gs_null_device		5044604	1					
ANR	5044654	Argument	pgs -> memory		5044604	2					
ANR	5044655	PtrMemberAccess	pgs -> memory		5044604	0					
ANR	5044656	Identifier	pgs		5044604	0					
ANR	5044657	Identifier	memory		5044604	1					
ANR	5044658	IfStatement	if ( code < 0 )		5044604	2					
ANR	5044659	Condition	code < 0	700:12:23116:23123	5044604	0	True				
ANR	5044660	RelationalExpression	code < 0		5044604	0		<			
ANR	5044661	Identifier	code		5044604	0					
ANR	5044662	PrimaryExpression	0		5044604	1					
ANR	5044663	ReturnStatement	return code ;	701:12:23138:23149	5044604	1	True				
ANR	5044664	Identifier	code		5044604	0					
ANR	5044665	ExpressionStatement	"rc_init ( ndev , pgs -> memory , 0 )"	710:8:23551:23580	5044604	3	True				
ANR	5044666	CallExpression	"rc_init ( ndev , pgs -> memory , 0 )"		5044604	0					
ANR	5044667	Callee	rc_init		5044604	0					
ANR	5044668	Identifier	rc_init		5044604	0					
ANR	5044669	ArgumentList	ndev		5044604	1					
ANR	5044670	Argument	ndev		5044604	0					
ANR	5044671	Identifier	ndev		5044604	0					
ANR	5044672	Argument	pgs -> memory		5044604	1					
ANR	5044673	PtrMemberAccess	pgs -> memory		5044604	0					
ANR	5044674	Identifier	pgs		5044604	0					
ANR	5044675	Identifier	memory		5044604	1					
ANR	5044676	Argument	0		5044604	2					
ANR	5044677	PrimaryExpression	0		5044604	0					
ANR	5044678	IfStatement	if ( pgs -> device != NULL )		5044604	4					
ANR	5044679	Condition	pgs -> device != NULL	711:12:23594:23612	5044604	0	True				
ANR	5044680	EqualityExpression	pgs -> device != NULL		5044604	0		!=			
ANR	5044681	PtrMemberAccess	pgs -> device		5044604	0					
ANR	5044682	Identifier	pgs		5044604	0					
ANR	5044683	Identifier	device		5044604	1					
ANR	5044684	Identifier	NULL		5044604	1					
ANR	5044685	CompoundStatement		20:33:739:739	5044604	1					
ANR	5044686	IfStatement	"if ( ( code = dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) ) ) < 0 )"		5044604	0					
ANR	5044687	Condition	"( code = dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) ) ) < 0"	712:16:23633:23760	5044604	0	True				
ANR	5044688	RelationalExpression	"( code = dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) ) ) < 0"		5044604	0		<			
ANR	5044689	AssignmentExpression	"code = dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) )"		5044604	0		=			
ANR	5044690	Identifier	code		5044604	0					
ANR	5044691	CallExpression	"dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) )"		5044604	1					
ANR	5044692	Callee	"dev_proc ( pgs -> device , get_profile )"		5044604	0					
ANR	5044693	CallExpression	"dev_proc ( pgs -> device , get_profile )"		5044604	0					
ANR	5044694	Callee	dev_proc		5044604	0					
ANR	5044695	Identifier	dev_proc		5044604	0					
ANR	5044696	ArgumentList	pgs -> device		5044604	1					
ANR	5044697	Argument	pgs -> device		5044604	0					
ANR	5044698	PtrMemberAccess	pgs -> device		5044604	0					
ANR	5044699	Identifier	pgs		5044604	0					
ANR	5044700	Identifier	device		5044604	1					
ANR	5044701	Argument	get_profile		5044604	1					
ANR	5044702	Identifier	get_profile		5044604	0					
ANR	5044703	ArgumentList	pgs -> device		5044604	1					
ANR	5044704	Argument	pgs -> device		5044604	0					
ANR	5044705	PtrMemberAccess	pgs -> device		5044604	0					
ANR	5044706	Identifier	pgs		5044604	0					
ANR	5044707	Identifier	device		5044604	1					
ANR	5044708	Argument	& ( ndev -> icc_struct )		5044604	1					
ANR	5044709	UnaryOperationExpression	& ( ndev -> icc_struct )		5044604	0					
ANR	5044710	UnaryOperator	&		5044604	0					
ANR	5044711	PtrMemberAccess	ndev -> icc_struct		5044604	1					
ANR	5044712	Identifier	ndev		5044604	0					
ANR	5044713	Identifier	icc_struct		5044604	1					
ANR	5044714	PrimaryExpression	0		5044604	1					
ANR	5044715	ReturnStatement	return code ;	714:16:23779:23790	5044604	1	True				
ANR	5044716	Identifier	code		5044604	0					
ANR	5044717	ExpressionStatement	rc_increment ( ndev -> icc_struct )	715:12:23804:23834	5044604	1	True				
ANR	5044718	CallExpression	rc_increment ( ndev -> icc_struct )		5044604	0					
ANR	5044719	Callee	rc_increment		5044604	0					
ANR	5044720	Identifier	rc_increment		5044604	0					
ANR	5044721	ArgumentList	ndev -> icc_struct		5044604	1					
ANR	5044722	Argument	ndev -> icc_struct		5044604	0					
ANR	5044723	PtrMemberAccess	ndev -> icc_struct		5044604	0					
ANR	5044724	Identifier	ndev		5044604	0					
ANR	5044725	Identifier	icc_struct		5044604	1					
ANR	5044726	ExpressionStatement	"set_dev_proc ( ndev , get_profile , gx_default_get_profile )"	716:12:23848:23903	5044604	2	True				
ANR	5044727	CallExpression	"set_dev_proc ( ndev , get_profile , gx_default_get_profile )"		5044604	0					
ANR	5044728	Callee	set_dev_proc		5044604	0					
ANR	5044729	Identifier	set_dev_proc		5044604	0					
ANR	5044730	ArgumentList	ndev		5044604	1					
ANR	5044731	Argument	ndev		5044604	0					
ANR	5044732	Identifier	ndev		5044604	0					
ANR	5044733	Argument	get_profile		5044604	1					
ANR	5044734	Identifier	get_profile		5044604	0					
ANR	5044735	Argument	gx_default_get_profile		5044604	2					
ANR	5044736	Identifier	gx_default_get_profile		5044604	0					
ANR	5044737	IfStatement	"if ( ( code = gs_setdevice_no_erase ( pgs , ndev ) ) < 0 )"		5044604	5					
ANR	5044738	Condition	"( code = gs_setdevice_no_erase ( pgs , ndev ) ) < 0"	719:12:23928:23972	5044604	0	True				
ANR	5044739	RelationalExpression	"( code = gs_setdevice_no_erase ( pgs , ndev ) ) < 0"		5044604	0		<			
ANR	5044740	AssignmentExpression	"code = gs_setdevice_no_erase ( pgs , ndev )"		5044604	0		=			
ANR	5044741	Identifier	code		5044604	0					
ANR	5044742	CallExpression	"gs_setdevice_no_erase ( pgs , ndev )"		5044604	1					
ANR	5044743	Callee	gs_setdevice_no_erase		5044604	0					
ANR	5044744	Identifier	gs_setdevice_no_erase		5044604	0					
ANR	5044745	ArgumentList	pgs		5044604	1					
ANR	5044746	Argument	pgs		5044604	0					
ANR	5044747	Identifier	pgs		5044604	0					
ANR	5044748	Argument	ndev		5044604	1					
ANR	5044749	Identifier	ndev		5044604	0					
ANR	5044750	PrimaryExpression	0		5044604	1					
ANR	5044751	ExpressionStatement	"gs_free_object ( pgs -> memory , ndev , ""gs_copydevice(device)"" )"	720:12:23987:24045	5044604	1	True				
ANR	5044752	CallExpression	"gs_free_object ( pgs -> memory , ndev , ""gs_copydevice(device)"" )"		5044604	0					
ANR	5044753	Callee	gs_free_object		5044604	0					
ANR	5044754	Identifier	gs_free_object		5044604	0					
ANR	5044755	ArgumentList	pgs -> memory		5044604	1					
ANR	5044756	Argument	pgs -> memory		5044604	0					
ANR	5044757	PtrMemberAccess	pgs -> memory		5044604	0					
ANR	5044758	Identifier	pgs		5044604	0					
ANR	5044759	Identifier	memory		5044604	1					
ANR	5044760	Argument	ndev		5044604	1					
ANR	5044761	Identifier	ndev		5044604	0					
ANR	5044762	Argument	"""gs_copydevice(device)"""		5044604	2					
ANR	5044763	PrimaryExpression	"""gs_copydevice(device)"""		5044604	0					
ANR	5044764	ReturnStatement	return code ;	722:4:24057:24068	5044604	2	True				
ANR	5044765	Identifier	code		5044604	0					
ANR	5044766	ReturnType	int		5044604	1					
ANR	5044767	Identifier	gs_nulldevice		5044604	2					
ANR	5044768	ParameterList	gs_gstate * pgs		5044604	3					
ANR	5044769	Parameter	gs_gstate * pgs	691:14:22858:22872	5044604	0	True				
ANR	5044770	ParameterType	gs_gstate *		5044604	0					
ANR	5044771	Identifier	pgs		5044604	1					
ANR	5044772	CFGEntryNode	ENTRY		5044604		True				
ANR	5044773	CFGExitNode	EXIT		5044604		True				
ANR	5044774	Symbol	& ndev -> icc_struct		5044604						
ANR	5044775	Symbol	code		5044604						
ANR	5044776	Symbol	NULL		5044604						
ANR	5044777	Symbol	* pgs		5044604						
ANR	5044778	Symbol	ndev -> icc_struct		5044604						
ANR	5044779	Symbol	gs_copydevice		5044604						
ANR	5044780	Symbol	& ndev		5044604						
ANR	5044781	Symbol	& gs_null_device		5044604						
ANR	5044782	Symbol	ndev		5044604						
ANR	5044783	Symbol	gx_default_get_profile		5044604						
ANR	5044784	Symbol	dev_proc		5044604						
ANR	5044785	Symbol	pgs -> device		5044604						
ANR	5044786	Symbol	gx_device_is_null		5044604						
ANR	5044787	Symbol	gs_setdevice_no_erase		5044604						
ANR	5044788	Symbol	* ndev		5044604						
ANR	5044789	Symbol	pgs		5044604						
ANR	5044790	Symbol	pgs -> memory		5044604						
ANR	5044791	Symbol	get_profile		5044604						
ANR	5044792	Function	gs_closedevice	727:0:24196:24436							
ANR	5044793	FunctionDef	gs_closedevice (gx_device * dev)		5044792	0					
ANR	5044794	CompoundStatement		729:0:24232:24436	5044792	0					
ANR	5044795	IdentifierDeclStatement	int code = 0 ;	730:4:24238:24250	5044792	0	True				
ANR	5044796	IdentifierDecl	code = 0		5044792	0					
ANR	5044797	IdentifierDeclType	int		5044792	0					
ANR	5044798	Identifier	code		5044792	1					
ANR	5044799	AssignmentExpression	code = 0		5044792	2		=			
ANR	5044800	Identifier	code		5044792	0					
ANR	5044801	PrimaryExpression	0		5044792	1					
ANR	5044802	IfStatement	if ( dev -> is_open )		5044792	1					
ANR	5044803	Condition	dev -> is_open	732:8:24261:24272	5044792	0	True				
ANR	5044804	PtrMemberAccess	dev -> is_open		5044792	0					
ANR	5044805	Identifier	dev		5044792	0					
ANR	5044806	Identifier	is_open		5044792	1					
ANR	5044807	CompoundStatement		4:22:42:42	5044792	1					
ANR	5044808	ExpressionStatement	"code = ( * dev_proc ( dev , close_device ) ) ( dev )"	733:8:24285:24327	5044792	0	True				
ANR	5044809	AssignmentExpression	"code = ( * dev_proc ( dev , close_device ) ) ( dev )"		5044792	0		=			
ANR	5044810	Identifier	code		5044792	0					
ANR	5044811	CallExpression	"( * dev_proc ( dev , close_device ) ) ( dev )"		5044792	1					
ANR	5044812	Callee	"* dev_proc ( dev , close_device )"		5044792	0					
ANR	5044813	UnaryOperationExpression	"* dev_proc ( dev , close_device )"		5044792	0					
ANR	5044814	UnaryOperator	*		5044792	0					
ANR	5044815	CallExpression	"dev_proc ( dev , close_device )"		5044792	1					
ANR	5044816	Callee	dev_proc		5044792	0					
ANR	5044817	Identifier	dev_proc		5044792	0					
ANR	5044818	ArgumentList	dev		5044792	1					
ANR	5044819	Argument	dev		5044792	0					
ANR	5044820	Identifier	dev		5044792	0					
ANR	5044821	Argument	close_device		5044792	1					
ANR	5044822	Identifier	close_device		5044792	0					
ANR	5044823	ArgumentList	dev		5044792	1					
ANR	5044824	Argument	dev		5044792	0					
ANR	5044825	Identifier	dev		5044792	0					
ANR	5044826	ExpressionStatement	dev -> is_open = false	734:8:24337:24357	5044792	1	True				
ANR	5044827	AssignmentExpression	dev -> is_open = false		5044792	0		=			
ANR	5044828	PtrMemberAccess	dev -> is_open		5044792	0					
ANR	5044829	Identifier	dev		5044792	0					
ANR	5044830	Identifier	is_open		5044792	1					
ANR	5044831	Identifier	false		5044792	1					
ANR	5044832	IfStatement	if ( code < 0 )		5044792	2					
ANR	5044833	Condition	code < 0	735:12:24371:24378	5044792	0	True				
ANR	5044834	RelationalExpression	code < 0		5044792	0		<			
ANR	5044835	Identifier	code		5044792	0					
ANR	5044836	PrimaryExpression	0		5044792	1					
ANR	5044837	ExpressionStatement	return_error ( code )	736:12:24393:24411	5044792	1	True				
ANR	5044838	CallExpression	return_error ( code )		5044792	0					
ANR	5044839	Callee	return_error		5044792	0					
ANR	5044840	Identifier	return_error		5044792	0					
ANR	5044841	ArgumentList	code		5044792	1					
ANR	5044842	Argument	code		5044792	0					
ANR	5044843	Identifier	code		5044792	0					
ANR	5044844	ReturnStatement	return code ;	738:4:24423:24434	5044792	2	True				
ANR	5044845	Identifier	code		5044792	0					
ANR	5044846	ReturnType	int		5044792	1					
ANR	5044847	Identifier	gs_closedevice		5044792	2					
ANR	5044848	ParameterList	gx_device * dev		5044792	3					
ANR	5044849	Parameter	gx_device * dev	728:15:24215:24229	5044792	0	True				
ANR	5044850	ParameterType	gx_device *		5044792	0					
ANR	5044851	Identifier	dev		5044792	1					
ANR	5044852	CFGEntryNode	ENTRY		5044792		True				
ANR	5044853	CFGExitNode	EXIT		5044792		True				
ANR	5044854	Symbol	* dev		5044792						
ANR	5044855	Symbol	code		5044792						
ANR	5044856	Symbol	dev -> is_open		5044792						
ANR	5044857	Symbol	"* dev_proc ( dev , close_device )"		5044792						
ANR	5044858	Symbol	dev		5044792						
ANR	5044859	Symbol	* dev_proc		5044792						
ANR	5044860	Symbol	dev_proc		5044792						
ANR	5044861	Symbol	false		5044792						
ANR	5044862	Symbol	close_device		5044792						
ANR	5044863	Function	gx_set_device_only	745:0:24525:24640							
ANR	5044864	FunctionDef	"gx_set_device_only (gs_gstate * pgs , gx_device * dev)"		5044863	0					
ANR	5044865	CompoundStatement		747:0:24583:24640	5044863	0					
ANR	5044866	ExpressionStatement	"rc_assign ( pgs -> device , dev , ""gx_set_device_only"" )"	748:4:24589:24638	5044863	0	True				
ANR	5044867	CallExpression	"rc_assign ( pgs -> device , dev , ""gx_set_device_only"" )"		5044863	0					
ANR	5044868	Callee	rc_assign		5044863	0					
ANR	5044869	Identifier	rc_assign		5044863	0					
ANR	5044870	ArgumentList	pgs -> device		5044863	1					
ANR	5044871	Argument	pgs -> device		5044863	0					
ANR	5044872	PtrMemberAccess	pgs -> device		5044863	0					
ANR	5044873	Identifier	pgs		5044863	0					
ANR	5044874	Identifier	device		5044863	1					
ANR	5044875	Argument	dev		5044863	1					
ANR	5044876	Identifier	dev		5044863	0					
ANR	5044877	Argument	"""gx_set_device_only"""		5044863	2					
ANR	5044878	PrimaryExpression	"""gx_set_device_only"""		5044863	0					
ANR	5044879	ReturnType	void		5044863	1					
ANR	5044880	Identifier	gx_set_device_only		5044863	2					
ANR	5044881	ParameterList	"gs_gstate * pgs , gx_device * dev"		5044863	3					
ANR	5044882	Parameter	gs_gstate * pgs	746:19:24549:24563	5044863	0	True				
ANR	5044883	ParameterType	gs_gstate *		5044863	0					
ANR	5044884	Identifier	pgs		5044863	1					
ANR	5044885	Parameter	gx_device * dev	746:36:24566:24580	5044863	1	True				
ANR	5044886	ParameterType	gx_device *		5044863	0					
ANR	5044887	Identifier	dev		5044863	1					
ANR	5044888	CFGEntryNode	ENTRY		5044863		True				
ANR	5044889	CFGExitNode	EXIT		5044863		True				
ANR	5044890	Symbol	dev		5044863						
ANR	5044891	Symbol	* pgs		5044863						
ANR	5044892	Symbol	pgs -> device		5044863						
ANR	5044893	Symbol	pgs		5044863						
ANR	5044894	Function	gx_device_raster	755:0:24895:25392							
ANR	5044895	FunctionDef	"gx_device_raster (const gx_device * dev , bool pad)"		5044894	0					
ANR	5044896	CompoundStatement		757:0:24950:25392	5044894	0					
ANR	5044897	IdentifierDeclStatement	ulong bits = ( ulong ) dev -> width * dev -> color_info . depth ;	758:4:24956:25011	5044894	0	True				
ANR	5044898	IdentifierDecl	bits = ( ulong ) dev -> width * dev -> color_info . depth		5044894	0					
ANR	5044899	IdentifierDeclType	ulong		5044894	0					
ANR	5044900	Identifier	bits		5044894	1					
ANR	5044901	AssignmentExpression	bits = ( ulong ) dev -> width * dev -> color_info . depth		5044894	2		=			
ANR	5044902	Identifier	bits		5044894	0					
ANR	5044903	MultiplicativeExpression	( ulong ) dev -> width * dev -> color_info . depth		5044894	1		*			
ANR	5044904	CastExpression	( ulong ) dev -> width		5044894	0					
ANR	5044905	CastTarget	ulong		5044894	0					
ANR	5044906	PtrMemberAccess	dev -> width		5044894	1					
ANR	5044907	Identifier	dev		5044894	0					
ANR	5044908	Identifier	width		5044894	1					
ANR	5044909	MemberAccess	dev -> color_info . depth		5044894	1					
ANR	5044910	PtrMemberAccess	dev -> color_info		5044894	0					
ANR	5044911	Identifier	dev		5044894	0					
ANR	5044912	Identifier	color_info		5044894	1					
ANR	5044913	Identifier	depth		5044894	1					
ANR	5044914	IdentifierDeclStatement	ulong raster ;	759:4:25017:25029	5044894	1	True				
ANR	5044915	IdentifierDecl	raster		5044894	0					
ANR	5044916	IdentifierDeclType	ulong		5044894	0					
ANR	5044917	Identifier	raster		5044894	1					
ANR	5044918	IdentifierDeclStatement	int l2align ;	760:4:25035:25046	5044894	2	True				
ANR	5044919	IdentifierDecl	l2align		5044894	0					
ANR	5044920	IdentifierDeclType	int		5044894	0					
ANR	5044921	Identifier	l2align		5044894	1					
ANR	5044922	IfStatement	if ( dev -> is_planar )		5044894	3					
ANR	5044923	Condition	dev -> is_planar	762:8:25057:25070	5044894	0	True				
ANR	5044924	PtrMemberAccess	dev -> is_planar		5044894	0					
ANR	5044925	Identifier	dev		5044894	0					
ANR	5044926	Identifier	is_planar		5044894	1					
ANR	5044927	ExpressionStatement	bits /= dev -> color_info . num_components	763:8:25081:25119	5044894	1	True				
ANR	5044928	AssignmentExpression	bits /= dev -> color_info . num_components		5044894	0		/=			
ANR	5044929	Identifier	bits		5044894	0					
ANR	5044930	MemberAccess	dev -> color_info . num_components		5044894	1					
ANR	5044931	PtrMemberAccess	dev -> color_info		5044894	0					
ANR	5044932	Identifier	dev		5044894	0					
ANR	5044933	Identifier	color_info		5044894	1					
ANR	5044934	Identifier	num_components		5044894	1					
ANR	5044935	ExpressionStatement	raster = ( uint ) ( ( bits + 7 ) >> 3 )	765:4:25126:25158	5044894	4	True				
ANR	5044936	AssignmentExpression	raster = ( uint ) ( ( bits + 7 ) >> 3 )		5044894	0		=			
ANR	5044937	Identifier	raster		5044894	0					
ANR	5044938	CastExpression	( uint ) ( ( bits + 7 ) >> 3 )		5044894	1					
ANR	5044939	CastTarget	uint		5044894	0					
ANR	5044940	ShiftExpression	( bits + 7 ) >> 3		5044894	1		>>			
ANR	5044941	AdditiveExpression	bits + 7		5044894	0		+			
ANR	5044942	Identifier	bits		5044894	0					
ANR	5044943	PrimaryExpression	7		5044894	1					
ANR	5044944	PrimaryExpression	3		5044894	1					
ANR	5044945	IfStatement	if ( ! pad )		5044894	5					
ANR	5044946	Condition	! pad	766:8:25168:25171	5044894	0	True				
ANR	5044947	UnaryOperationExpression	! pad		5044894	0					
ANR	5044948	UnaryOperator	!		5044894	0					
ANR	5044949	Identifier	pad		5044894	1					
ANR	5044950	ReturnStatement	return raster ;	767:8:25182:25195	5044894	1	True				
ANR	5044951	Identifier	raster		5044894	0					
ANR	5044952	ExpressionStatement	l2align = dev -> log2_align_mod	768:4:25201:25230	5044894	6	True				
ANR	5044953	AssignmentExpression	l2align = dev -> log2_align_mod		5044894	0		=			
ANR	5044954	Identifier	l2align		5044894	0					
ANR	5044955	PtrMemberAccess	dev -> log2_align_mod		5044894	1					
ANR	5044956	Identifier	dev		5044894	0					
ANR	5044957	Identifier	log2_align_mod		5044894	1					
ANR	5044958	IfStatement	if ( l2align < log2_align_bitmap_mod )		5044894	7					
ANR	5044959	Condition	l2align < log2_align_bitmap_mod	769:8:25240:25270	5044894	0	True				
ANR	5044960	RelationalExpression	l2align < log2_align_bitmap_mod		5044894	0		<			
ANR	5044961	Identifier	l2align		5044894	0					
ANR	5044962	Identifier	log2_align_bitmap_mod		5044894	1					
ANR	5044963	ExpressionStatement	l2align = log2_align_bitmap_mod	770:8:25281:25312	5044894	1	True				
ANR	5044964	AssignmentExpression	l2align = log2_align_bitmap_mod		5044894	0		=			
ANR	5044965	Identifier	l2align		5044894	0					
ANR	5044966	Identifier	log2_align_bitmap_mod		5044894	1					
ANR	5044967	ReturnStatement	return ( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align ) ;	771:4:25318:25390	5044894	8	True				
ANR	5044968	CastExpression	( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align )		5044894	0					
ANR	5044969	CastTarget	uint		5044894	0					
ANR	5044970	ShiftExpression	( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align		5044894	1		<<			
ANR	5044971	ShiftExpression	( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 )		5044894	0		>>			
ANR	5044972	AdditiveExpression	bits + ( 8 << l2align ) - 1		5044894	0		+			
ANR	5044973	Identifier	bits		5044894	0					
ANR	5044974	AdditiveExpression	( 8 << l2align ) - 1		5044894	1		-			
ANR	5044975	ShiftExpression	8 << l2align		5044894	0		<<			
ANR	5044976	PrimaryExpression	8		5044894	0					
ANR	5044977	Identifier	l2align		5044894	1					
ANR	5044978	PrimaryExpression	1		5044894	1					
ANR	5044979	AdditiveExpression	l2align + 3		5044894	1		+			
ANR	5044980	Identifier	l2align		5044894	0					
ANR	5044981	PrimaryExpression	3		5044894	1					
ANR	5044982	Identifier	l2align		5044894	1					
ANR	5044983	ReturnType	uint		5044894	1					
ANR	5044984	Identifier	gx_device_raster		5044894	2					
ANR	5044985	ParameterList	"const gx_device * dev , bool pad"		5044894	3					
ANR	5044986	Parameter	const gx_device * dev	756:17:24917:24937	5044894	0	True				
ANR	5044987	ParameterType	const gx_device *		5044894	0					
ANR	5044988	Identifier	dev		5044894	1					
ANR	5044989	Parameter	bool pad	756:40:24940:24947	5044894	1	True				
ANR	5044990	ParameterType	bool		5044894	0					
ANR	5044991	Identifier	pad		5044894	1					
ANR	5044992	CFGEntryNode	ENTRY		5044894		True				
ANR	5044993	CFGExitNode	EXIT		5044894		True				
ANR	5044994	Symbol	* dev		5044894						
ANR	5044995	Symbol	dev -> log2_align_mod		5044894						
ANR	5044996	Symbol	log2_align_bitmap_mod		5044894						
ANR	5044997	Symbol	l2align		5044894						
ANR	5044998	Symbol	dev -> color_info . num_components		5044894						
ANR	5044999	Symbol	bits		5044894						
ANR	5045000	Symbol	raster		5044894						
ANR	5045001	Symbol	dev -> color_info		5044894						
ANR	5045002	Symbol	dev -> color_info . depth		5044894						
ANR	5045003	Symbol	pad		5044894						
ANR	5045004	Symbol	dev -> is_planar		5044894						
ANR	5045005	Symbol	dev		5044894						
ANR	5045006	Symbol	dev -> width		5044894						
ANR	5045007	Function	gx_device_raster_chunky	774:0:25395:25826							
ANR	5045008	FunctionDef	"gx_device_raster_chunky (const gx_device * dev , bool pad)"		5045007	0					
ANR	5045009	CompoundStatement		776:0:25457:25826	5045007	0					
ANR	5045010	IdentifierDeclStatement	ulong bits = ( ulong ) dev -> width * dev -> color_info . depth ;	777:4:25463:25518	5045007	0	True				
ANR	5045011	IdentifierDecl	bits = ( ulong ) dev -> width * dev -> color_info . depth		5045007	0					
ANR	5045012	IdentifierDeclType	ulong		5045007	0					
ANR	5045013	Identifier	bits		5045007	1					
ANR	5045014	AssignmentExpression	bits = ( ulong ) dev -> width * dev -> color_info . depth		5045007	2		=			
ANR	5045015	Identifier	bits		5045007	0					
ANR	5045016	MultiplicativeExpression	( ulong ) dev -> width * dev -> color_info . depth		5045007	1		*			
ANR	5045017	CastExpression	( ulong ) dev -> width		5045007	0					
ANR	5045018	CastTarget	ulong		5045007	0					
ANR	5045019	PtrMemberAccess	dev -> width		5045007	1					
ANR	5045020	Identifier	dev		5045007	0					
ANR	5045021	Identifier	width		5045007	1					
ANR	5045022	MemberAccess	dev -> color_info . depth		5045007	1					
ANR	5045023	PtrMemberAccess	dev -> color_info		5045007	0					
ANR	5045024	Identifier	dev		5045007	0					
ANR	5045025	Identifier	color_info		5045007	1					
ANR	5045026	Identifier	depth		5045007	1					
ANR	5045027	IdentifierDeclStatement	ulong raster ;	778:4:25524:25536	5045007	1	True				
ANR	5045028	IdentifierDecl	raster		5045007	0					
ANR	5045029	IdentifierDeclType	ulong		5045007	0					
ANR	5045030	Identifier	raster		5045007	1					
ANR	5045031	IdentifierDeclStatement	int l2align ;	779:4:25542:25553	5045007	2	True				
ANR	5045032	IdentifierDecl	l2align		5045007	0					
ANR	5045033	IdentifierDeclType	int		5045007	0					
ANR	5045034	Identifier	l2align		5045007	1					
ANR	5045035	ExpressionStatement	raster = ( uint ) ( ( bits + 7 ) >> 3 )	781:4:25560:25592	5045007	3	True				
ANR	5045036	AssignmentExpression	raster = ( uint ) ( ( bits + 7 ) >> 3 )		5045007	0		=			
ANR	5045037	Identifier	raster		5045007	0					
ANR	5045038	CastExpression	( uint ) ( ( bits + 7 ) >> 3 )		5045007	1					
ANR	5045039	CastTarget	uint		5045007	0					
ANR	5045040	ShiftExpression	( bits + 7 ) >> 3		5045007	1		>>			
ANR	5045041	AdditiveExpression	bits + 7		5045007	0		+			
ANR	5045042	Identifier	bits		5045007	0					
ANR	5045043	PrimaryExpression	7		5045007	1					
ANR	5045044	PrimaryExpression	3		5045007	1					
ANR	5045045	IfStatement	if ( ! pad )		5045007	4					
ANR	5045046	Condition	! pad	782:8:25602:25605	5045007	0	True				
ANR	5045047	UnaryOperationExpression	! pad		5045007	0					
ANR	5045048	UnaryOperator	!		5045007	0					
ANR	5045049	Identifier	pad		5045007	1					
ANR	5045050	ReturnStatement	return raster ;	783:8:25616:25629	5045007	1	True				
ANR	5045051	Identifier	raster		5045007	0					
ANR	5045052	ExpressionStatement	l2align = dev -> log2_align_mod	784:4:25635:25664	5045007	5	True				
ANR	5045053	AssignmentExpression	l2align = dev -> log2_align_mod		5045007	0		=			
ANR	5045054	Identifier	l2align		5045007	0					
ANR	5045055	PtrMemberAccess	dev -> log2_align_mod		5045007	1					
ANR	5045056	Identifier	dev		5045007	0					
ANR	5045057	Identifier	log2_align_mod		5045007	1					
ANR	5045058	IfStatement	if ( l2align < log2_align_bitmap_mod )		5045007	6					
ANR	5045059	Condition	l2align < log2_align_bitmap_mod	785:8:25674:25704	5045007	0	True				
ANR	5045060	RelationalExpression	l2align < log2_align_bitmap_mod		5045007	0		<			
ANR	5045061	Identifier	l2align		5045007	0					
ANR	5045062	Identifier	log2_align_bitmap_mod		5045007	1					
ANR	5045063	ExpressionStatement	l2align = log2_align_bitmap_mod	786:8:25715:25746	5045007	1	True				
ANR	5045064	AssignmentExpression	l2align = log2_align_bitmap_mod		5045007	0		=			
ANR	5045065	Identifier	l2align		5045007	0					
ANR	5045066	Identifier	log2_align_bitmap_mod		5045007	1					
ANR	5045067	ReturnStatement	return ( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align ) ;	787:4:25752:25824	5045007	7	True				
ANR	5045068	CastExpression	( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align )		5045007	0					
ANR	5045069	CastTarget	uint		5045007	0					
ANR	5045070	ShiftExpression	( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align		5045007	1		<<			
ANR	5045071	ShiftExpression	( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 )		5045007	0		>>			
ANR	5045072	AdditiveExpression	bits + ( 8 << l2align ) - 1		5045007	0		+			
ANR	5045073	Identifier	bits		5045007	0					
ANR	5045074	AdditiveExpression	( 8 << l2align ) - 1		5045007	1		-			
ANR	5045075	ShiftExpression	8 << l2align		5045007	0		<<			
ANR	5045076	PrimaryExpression	8		5045007	0					
ANR	5045077	Identifier	l2align		5045007	1					
ANR	5045078	PrimaryExpression	1		5045007	1					
ANR	5045079	AdditiveExpression	l2align + 3		5045007	1		+			
ANR	5045080	Identifier	l2align		5045007	0					
ANR	5045081	PrimaryExpression	3		5045007	1					
ANR	5045082	Identifier	l2align		5045007	1					
ANR	5045083	ReturnType	uint		5045007	1					
ANR	5045084	Identifier	gx_device_raster_chunky		5045007	2					
ANR	5045085	ParameterList	"const gx_device * dev , bool pad"		5045007	3					
ANR	5045086	Parameter	const gx_device * dev	775:24:25424:25444	5045007	0	True				
ANR	5045087	ParameterType	const gx_device *		5045007	0					
ANR	5045088	Identifier	dev		5045007	1					
ANR	5045089	Parameter	bool pad	775:47:25447:25454	5045007	1	True				
ANR	5045090	ParameterType	bool		5045007	0					
ANR	5045091	Identifier	pad		5045007	1					
ANR	5045092	CFGEntryNode	ENTRY		5045007		True				
ANR	5045093	CFGExitNode	EXIT		5045007		True				
ANR	5045094	Symbol	* dev		5045007						
ANR	5045095	Symbol	dev -> log2_align_mod		5045007						
ANR	5045096	Symbol	log2_align_bitmap_mod		5045007						
ANR	5045097	Symbol	pad		5045007						
ANR	5045098	Symbol	l2align		5045007						
ANR	5045099	Symbol	dev		5045007						
ANR	5045100	Symbol	dev -> width		5045007						
ANR	5045101	Symbol	bits		5045007						
ANR	5045102	Symbol	raster		5045007						
ANR	5045103	Symbol	dev -> color_info . depth		5045007						
ANR	5045104	Symbol	dev -> color_info		5045007						
ANR	5045105	Function	gx_device_raster_plane	789:0:25828:26344							
ANR	5045106	FunctionDef	"gx_device_raster_plane (const gx_device * dev , const gx_render_plane_t * render_plane)"		5045105	0					
ANR	5045107	CompoundStatement		791:0:25918:26344	5045105	0					
ANR	5045108	IdentifierDeclStatement	ulong bpc = ( render_plane && render_plane -> index >= 0 ? render_plane -> depth : dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 ) ) ;	792:4:25924:26086	5045105	0	True				
ANR	5045109	IdentifierDecl	bpc = ( render_plane && render_plane -> index >= 0 ? render_plane -> depth : dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 ) )		5045105	0					
ANR	5045110	IdentifierDeclType	ulong		5045105	0					
ANR	5045111	Identifier	bpc		5045105	1					
ANR	5045112	AssignmentExpression	bpc = ( render_plane && render_plane -> index >= 0 ? render_plane -> depth : dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 ) )		5045105	2		=			
ANR	5045113	Identifier	bpc		5045105	0					
ANR	5045114	ConditionalExpression	render_plane && render_plane -> index >= 0 ? render_plane -> depth : dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 )		5045105	1					
ANR	5045115	Condition	render_plane && render_plane -> index >= 0		5045105	0					
ANR	5045116	AndExpression	render_plane && render_plane -> index >= 0		5045105	0		&&			
ANR	5045117	Identifier	render_plane		5045105	0					
ANR	5045118	RelationalExpression	render_plane -> index >= 0		5045105	1		>=			
ANR	5045119	PtrMemberAccess	render_plane -> index		5045105	0					
ANR	5045120	Identifier	render_plane		5045105	0					
ANR	5045121	Identifier	index		5045105	1					
ANR	5045122	PrimaryExpression	0		5045105	1					
ANR	5045123	PtrMemberAccess	render_plane -> depth		5045105	1					
ANR	5045124	Identifier	render_plane		5045105	0					
ANR	5045125	Identifier	depth		5045105	1					
ANR	5045126	MultiplicativeExpression	dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 )		5045105	2		/			
ANR	5045127	MemberAccess	dev -> color_info . depth		5045105	0					
ANR	5045128	PtrMemberAccess	dev -> color_info		5045105	0					
ANR	5045129	Identifier	dev		5045105	0					
ANR	5045130	Identifier	color_info		5045105	1					
ANR	5045131	Identifier	depth		5045105	1					
ANR	5045132	ConditionalExpression	dev -> is_planar ? dev -> color_info . num_components : 1		5045105	1					
ANR	5045133	Condition	dev -> is_planar		5045105	0					
ANR	5045134	PtrMemberAccess	dev -> is_planar		5045105	0					
ANR	5045135	Identifier	dev		5045105	0					
ANR	5045136	Identifier	is_planar		5045105	1					
ANR	5045137	MemberAccess	dev -> color_info . num_components		5045105	1					
ANR	5045138	PtrMemberAccess	dev -> color_info		5045105	0					
ANR	5045139	Identifier	dev		5045105	0					
ANR	5045140	Identifier	color_info		5045105	1					
ANR	5045141	Identifier	num_components		5045105	1					
ANR	5045142	PrimaryExpression	1		5045105	2					
ANR	5045143	IdentifierDeclStatement	ulong bits = ( ulong ) dev -> width * bpc ;	794:4:26092:26129	5045105	1	True				
ANR	5045144	IdentifierDecl	bits = ( ulong ) dev -> width * bpc		5045105	0					
ANR	5045145	IdentifierDeclType	ulong		5045105	0					
ANR	5045146	Identifier	bits		5045105	1					
ANR	5045147	AssignmentExpression	bits = ( ulong ) dev -> width * bpc		5045105	2		=			
ANR	5045148	Identifier	bits		5045105	0					
ANR	5045149	MultiplicativeExpression	( ulong ) dev -> width * bpc		5045105	1		*			
ANR	5045150	CastExpression	( ulong ) dev -> width		5045105	0					
ANR	5045151	CastTarget	ulong		5045105	0					
ANR	5045152	PtrMemberAccess	dev -> width		5045105	1					
ANR	5045153	Identifier	dev		5045105	0					
ANR	5045154	Identifier	width		5045105	1					
ANR	5045155	Identifier	bpc		5045105	1					
ANR	5045156	IdentifierDeclStatement	int l2align ;	795:4:26135:26146	5045105	2	True				
ANR	5045157	IdentifierDecl	l2align		5045105	0					
ANR	5045158	IdentifierDeclType	int		5045105	0					
ANR	5045159	Identifier	l2align		5045105	1					
ANR	5045160	ExpressionStatement	l2align = dev -> log2_align_mod	797:4:26153:26182	5045105	3	True				
ANR	5045161	AssignmentExpression	l2align = dev -> log2_align_mod		5045105	0		=			
ANR	5045162	Identifier	l2align		5045105	0					
ANR	5045163	PtrMemberAccess	dev -> log2_align_mod		5045105	1					
ANR	5045164	Identifier	dev		5045105	0					
ANR	5045165	Identifier	log2_align_mod		5045105	1					
ANR	5045166	IfStatement	if ( l2align < log2_align_bitmap_mod )		5045105	4					
ANR	5045167	Condition	l2align < log2_align_bitmap_mod	798:8:26192:26222	5045105	0	True				
ANR	5045168	RelationalExpression	l2align < log2_align_bitmap_mod		5045105	0		<			
ANR	5045169	Identifier	l2align		5045105	0					
ANR	5045170	Identifier	log2_align_bitmap_mod		5045105	1					
ANR	5045171	ExpressionStatement	l2align = log2_align_bitmap_mod	799:8:26233:26264	5045105	1	True				
ANR	5045172	AssignmentExpression	l2align = log2_align_bitmap_mod		5045105	0		=			
ANR	5045173	Identifier	l2align		5045105	0					
ANR	5045174	Identifier	log2_align_bitmap_mod		5045105	1					
ANR	5045175	ReturnStatement	return ( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align ) ;	800:4:26270:26342	5045105	5	True				
ANR	5045176	CastExpression	( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align )		5045105	0					
ANR	5045177	CastTarget	uint		5045105	0					
ANR	5045178	ShiftExpression	( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align		5045105	1		<<			
ANR	5045179	ShiftExpression	( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 )		5045105	0		>>			
ANR	5045180	AdditiveExpression	bits + ( 8 << l2align ) - 1		5045105	0		+			
ANR	5045181	Identifier	bits		5045105	0					
ANR	5045182	AdditiveExpression	( 8 << l2align ) - 1		5045105	1		-			
ANR	5045183	ShiftExpression	8 << l2align		5045105	0		<<			
ANR	5045184	PrimaryExpression	8		5045105	0					
ANR	5045185	Identifier	l2align		5045105	1					
ANR	5045186	PrimaryExpression	1		5045105	1					
ANR	5045187	AdditiveExpression	l2align + 3		5045105	1		+			
ANR	5045188	Identifier	l2align		5045105	0					
ANR	5045189	PrimaryExpression	3		5045105	1					
ANR	5045190	Identifier	l2align		5045105	1					
ANR	5045191	ReturnType	uint		5045105	1					
ANR	5045192	Identifier	gx_device_raster_plane		5045105	2					
ANR	5045193	ParameterList	"const gx_device * dev , const gx_render_plane_t * render_plane"		5045105	3					
ANR	5045194	Parameter	const gx_device * dev	790:23:25856:25876	5045105	0	True				
ANR	5045195	ParameterType	const gx_device *		5045105	0					
ANR	5045196	Identifier	dev		5045105	1					
ANR	5045197	Parameter	const gx_render_plane_t * render_plane	790:46:25879:25915	5045105	1	True				
ANR	5045198	ParameterType	const gx_render_plane_t *		5045105	0					
ANR	5045199	Identifier	render_plane		5045105	1					
ANR	5045200	CFGEntryNode	ENTRY		5045105		True				
ANR	5045201	CFGExitNode	EXIT		5045105		True				
ANR	5045202	Symbol	* dev		5045105						
ANR	5045203	Symbol	dev -> log2_align_mod		5045105						
ANR	5045204	Symbol	log2_align_bitmap_mod		5045105						
ANR	5045205	Symbol	l2align		5045105						
ANR	5045206	Symbol	dev -> color_info . num_components		5045105						
ANR	5045207	Symbol	render_plane		5045105						
ANR	5045208	Symbol	bits		5045105						
ANR	5045209	Symbol	dev -> color_info		5045105						
ANR	5045210	Symbol	dev -> color_info . depth		5045105						
ANR	5045211	Symbol	dev -> is_planar		5045105						
ANR	5045212	Symbol	* render_plane		5045105						
ANR	5045213	Symbol	dev		5045105						
ANR	5045214	Symbol	bpc		5045105						
ANR	5045215	Symbol	dev -> width		5045105						
ANR	5045216	Symbol	render_plane -> index		5045105						
ANR	5045217	Symbol	render_plane -> depth		5045105						
ANR	5045218	Function	gx_device_adjust_resolution	807:0:26629:27129							
ANR	5045219	FunctionDef	"gx_device_adjust_resolution (gx_device * dev , int actual_width , int actual_height , int fit)"		5045218	0					
ANR	5045220	CompoundStatement		810:0:26752:27129	5045218	0					
ANR	5045221	IdentifierDeclStatement	double width_ratio = ( double ) actual_width / dev -> width ;	811:4:26758:26812	5045218	0	True				
ANR	5045222	IdentifierDecl	width_ratio = ( double ) actual_width / dev -> width		5045218	0					
ANR	5045223	IdentifierDeclType	double		5045218	0					
ANR	5045224	Identifier	width_ratio		5045218	1					
ANR	5045225	AssignmentExpression	width_ratio = ( double ) actual_width / dev -> width		5045218	2		=			
ANR	5045226	Identifier	width_ratio		5045218	0					
ANR	5045227	MultiplicativeExpression	( double ) actual_width / dev -> width		5045218	1		/			
ANR	5045228	CastExpression	( double ) actual_width		5045218	0					
ANR	5045229	CastTarget	double		5045218	0					
ANR	5045230	Identifier	actual_width		5045218	1					
ANR	5045231	PtrMemberAccess	dev -> width		5045218	1					
ANR	5045232	Identifier	dev		5045218	0					
ANR	5045233	Identifier	width		5045218	1					
ANR	5045234	IdentifierDeclStatement	double height_ratio = ( double ) actual_height / dev -> height ;	812:4:26818:26875	5045218	1	True				
ANR	5045235	IdentifierDecl	height_ratio = ( double ) actual_height / dev -> height		5045218	0					
ANR	5045236	IdentifierDeclType	double		5045218	0					
ANR	5045237	Identifier	height_ratio		5045218	1					
ANR	5045238	AssignmentExpression	height_ratio = ( double ) actual_height / dev -> height		5045218	2		=			
ANR	5045239	Identifier	height_ratio		5045218	0					
ANR	5045240	MultiplicativeExpression	( double ) actual_height / dev -> height		5045218	1		/			
ANR	5045241	CastExpression	( double ) actual_height		5045218	0					
ANR	5045242	CastTarget	double		5045218	0					
ANR	5045243	Identifier	actual_height		5045218	1					
ANR	5045244	PtrMemberAccess	dev -> height		5045218	1					
ANR	5045245	Identifier	dev		5045218	0					
ANR	5045246	Identifier	height		5045218	1					
ANR	5045247	IdentifierDeclStatement	"double ratio = ( fit ? min ( width_ratio , height_ratio ) : max ( width_ratio , height_ratio ) ) ;"	813:4:26881:26976	5045218	2	True				
ANR	5045248	IdentifierDecl	"ratio = ( fit ? min ( width_ratio , height_ratio ) : max ( width_ratio , height_ratio ) )"		5045218	0					
ANR	5045249	IdentifierDeclType	double		5045218	0					
ANR	5045250	Identifier	ratio		5045218	1					
ANR	5045251	AssignmentExpression	"ratio = ( fit ? min ( width_ratio , height_ratio ) : max ( width_ratio , height_ratio ) )"		5045218	2		=			
ANR	5045252	Identifier	ratio		5045218	0					
ANR	5045253	ConditionalExpression	"fit ? min ( width_ratio , height_ratio ) : max ( width_ratio , height_ratio )"		5045218	1					
ANR	5045254	Condition	fit		5045218	0					
ANR	5045255	Identifier	fit		5045218	0					
ANR	5045256	CallExpression	"min ( width_ratio , height_ratio )"		5045218	1					
ANR	5045257	Callee	min		5045218	0					
ANR	5045258	Identifier	min		5045218	0					
ANR	5045259	ArgumentList	width_ratio		5045218	1					
ANR	5045260	Argument	width_ratio		5045218	0					
ANR	5045261	Identifier	width_ratio		5045218	0					
ANR	5045262	Argument	height_ratio		5045218	1					
ANR	5045263	Identifier	height_ratio		5045218	0					
ANR	5045264	CallExpression	"max ( width_ratio , height_ratio )"		5045218	2					
ANR	5045265	Callee	max		5045218	0					
ANR	5045266	Identifier	max		5045218	0					
ANR	5045267	ArgumentList	width_ratio		5045218	1					
ANR	5045268	Argument	width_ratio		5045218	0					
ANR	5045269	Identifier	width_ratio		5045218	0					
ANR	5045270	Argument	height_ratio		5045218	1					
ANR	5045271	Identifier	height_ratio		5045218	0					
ANR	5045272	ExpressionStatement	dev -> HWResolution [ 0 ] *= ratio	817:4:26983:27012	5045218	3	True				
ANR	5045273	AssignmentExpression	dev -> HWResolution [ 0 ] *= ratio		5045218	0		*=			
ANR	5045274	ArrayIndexing	dev -> HWResolution [ 0 ]		5045218	0					
ANR	5045275	PtrMemberAccess	dev -> HWResolution		5045218	0					
ANR	5045276	Identifier	dev		5045218	0					
ANR	5045277	Identifier	HWResolution		5045218	1					
ANR	5045278	PrimaryExpression	0		5045218	1					
ANR	5045279	Identifier	ratio		5045218	1					
ANR	5045280	ExpressionStatement	dev -> HWResolution [ 1 ] *= ratio	818:4:27018:27047	5045218	4	True				
ANR	5045281	AssignmentExpression	dev -> HWResolution [ 1 ] *= ratio		5045218	0		*=			
ANR	5045282	ArrayIndexing	dev -> HWResolution [ 1 ]		5045218	0					
ANR	5045283	PtrMemberAccess	dev -> HWResolution		5045218	0					
ANR	5045284	Identifier	dev		5045218	0					
ANR	5045285	Identifier	HWResolution		5045218	1					
ANR	5045286	PrimaryExpression	1		5045218	1					
ANR	5045287	Identifier	ratio		5045218	1					
ANR	5045288	ExpressionStatement	"gx_device_set_width_height ( dev , actual_width , actual_height )"	819:4:27053:27113	5045218	5	True				
ANR	5045289	CallExpression	"gx_device_set_width_height ( dev , actual_width , actual_height )"		5045218	0					
ANR	5045290	Callee	gx_device_set_width_height		5045218	0					
ANR	5045291	Identifier	gx_device_set_width_height		5045218	0					
ANR	5045292	ArgumentList	dev		5045218	1					
ANR	5045293	Argument	dev		5045218	0					
ANR	5045294	Identifier	dev		5045218	0					
ANR	5045295	Argument	actual_width		5045218	1					
ANR	5045296	Identifier	actual_width		5045218	0					
ANR	5045297	Argument	actual_height		5045218	2					
ANR	5045298	Identifier	actual_height		5045218	0					
ANR	5045299	ReturnStatement	return 0 ;	820:4:27119:27127	5045218	6	True				
ANR	5045300	PrimaryExpression	0		5045218	0					
ANR	5045301	ReturnType	int		5045218	1					
ANR	5045302	Identifier	gx_device_adjust_resolution		5045218	2					
ANR	5045303	ParameterList	"gx_device * dev , int actual_width , int actual_height , int fit"		5045218	3					
ANR	5045304	Parameter	gx_device * dev	808:28:26661:26675	5045218	0	True				
ANR	5045305	ParameterType	gx_device *		5045218	0					
ANR	5045306	Identifier	dev		5045218	1					
ANR	5045307	Parameter	int actual_width	809:28:26706:26721	5045218	1	True				
ANR	5045308	ParameterType	int		5045218	0					
ANR	5045309	Identifier	actual_width		5045218	1					
ANR	5045310	Parameter	int actual_height	809:46:26724:26740	5045218	2	True				
ANR	5045311	ParameterType	int		5045218	0					
ANR	5045312	Identifier	actual_height		5045218	1					
ANR	5045313	Parameter	int fit	809:65:26743:26749	5045218	3	True				
ANR	5045314	ParameterType	int		5045218	0					
ANR	5045315	Identifier	fit		5045218	1					
ANR	5045316	CFGEntryNode	ENTRY		5045218		True				
ANR	5045317	CFGExitNode	EXIT		5045218		True				
ANR	5045318	Symbol	* dev		5045218						
ANR	5045319	Symbol	max		5045218						
ANR	5045320	Symbol	dev -> height		5045218						
ANR	5045321	Symbol	actual_height		5045218						
ANR	5045322	Symbol	actual_width		5045218						
ANR	5045323	Symbol	* * dev		5045218						
ANR	5045324	Symbol	* dev -> HWResolution		5045218						
ANR	5045325	Symbol	dev -> HWResolution		5045218						
ANR	5045326	Symbol	fit		5045218						
ANR	5045327	Symbol	min		5045218						
ANR	5045328	Symbol	dev		5045218						
ANR	5045329	Symbol	dev -> width		5045218						
ANR	5045330	Symbol	width_ratio		5045218						
ANR	5045331	Symbol	height_ratio		5045218						
ANR	5045332	Symbol	ratio		5045218						
ANR	5045333	Function	gx_device_set_margins	826:0:27309:27667							
ANR	5045334	FunctionDef	"gx_device_set_margins (gx_device * dev , const float * margins , bool move_origin)"		5045333	0					
ANR	5045335	CompoundStatement		829:0:27425:27667	5045333	0					
ANR	5045336	IdentifierDeclStatement	int i ;	830:4:27431:27436	5045333	0	True				
ANR	5045337	IdentifierDecl	i		5045333	0					
ANR	5045338	IdentifierDeclType	int		5045333	0					
ANR	5045339	Identifier	i		5045333	1					
ANR	5045340	ForStatement	for ( i = 0 ; i < 4 ; ++ i )		5045333	1					
ANR	5045341	ForInit	i = 0 ;	832:9:27448:27453	5045333	0	True				
ANR	5045342	AssignmentExpression	i = 0		5045333	0		=			
ANR	5045343	Identifier	i		5045333	0					
ANR	5045344	PrimaryExpression	0		5045333	1					
ANR	5045345	Condition	i < 4	832:16:27455:27459	5045333	1	True				
ANR	5045346	RelationalExpression	i < 4		5045333	0		<			
ANR	5045347	Identifier	i		5045333	0					
ANR	5045348	PrimaryExpression	4		5045333	1					
ANR	5045349	UnaryExpression	++ i	832:23:27462:27464	5045333	2	True				
ANR	5045350	IncDec	++		5045333	0					
ANR	5045351	Identifier	i		5045333	1					
ANR	5045352	ExpressionStatement	dev -> HWMargins [ i ] = margins [ i ] * 72.0	833:8:27475:27512	5045333	3	True				
ANR	5045353	AssignmentExpression	dev -> HWMargins [ i ] = margins [ i ] * 72.0		5045333	0		=			
ANR	5045354	ArrayIndexing	dev -> HWMargins [ i ]		5045333	0					
ANR	5045355	PtrMemberAccess	dev -> HWMargins		5045333	0					
ANR	5045356	Identifier	dev		5045333	0					
ANR	5045357	Identifier	HWMargins		5045333	1					
ANR	5045358	Identifier	i		5045333	1					
ANR	5045359	MultiplicativeExpression	margins [ i ] * 72.0		5045333	1		*			
ANR	5045360	ArrayIndexing	margins [ i ]		5045333	0					
ANR	5045361	Identifier	margins		5045333	0					
ANR	5045362	Identifier	i		5045333	1					
ANR	5045363	PrimaryExpression	72.0		5045333	1					
ANR	5045364	IfStatement	if ( move_origin )		5045333	2					
ANR	5045365	Condition	move_origin	834:8:27522:27532	5045333	0	True				
ANR	5045366	Identifier	move_origin		5045333	0					
ANR	5045367	CompoundStatement		6:21:109:109	5045333	1					
ANR	5045368	ExpressionStatement	dev -> Margins [ 0 ] = - margins [ 0 ] * dev -> HWResolution [ 0 ]	835:8:27545:27597	5045333	0	True				
ANR	5045369	AssignmentExpression	dev -> Margins [ 0 ] = - margins [ 0 ] * dev -> HWResolution [ 0 ]		5045333	0		=			
ANR	5045370	ArrayIndexing	dev -> Margins [ 0 ]		5045333	0					
ANR	5045371	PtrMemberAccess	dev -> Margins		5045333	0					
ANR	5045372	Identifier	dev		5045333	0					
ANR	5045373	Identifier	Margins		5045333	1					
ANR	5045374	PrimaryExpression	0		5045333	1					
ANR	5045375	MultiplicativeExpression	- margins [ 0 ] * dev -> HWResolution [ 0 ]		5045333	1		*			
ANR	5045376	UnaryOperationExpression	- margins [ 0 ]		5045333	0					
ANR	5045377	UnaryOperator	-		5045333	0					
ANR	5045378	ArrayIndexing	margins [ 0 ]		5045333	1					
ANR	5045379	Identifier	margins		5045333	0					
ANR	5045380	PrimaryExpression	0		5045333	1					
ANR	5045381	ArrayIndexing	dev -> HWResolution [ 0 ]		5045333	1					
ANR	5045382	PtrMemberAccess	dev -> HWResolution		5045333	0					
ANR	5045383	Identifier	dev		5045333	0					
ANR	5045384	Identifier	HWResolution		5045333	1					
ANR	5045385	PrimaryExpression	0		5045333	1					
ANR	5045386	ExpressionStatement	dev -> Margins [ 1 ] = - margins [ 3 ] * dev -> HWResolution [ 1 ]	836:8:27607:27659	5045333	1	True				
ANR	5045387	AssignmentExpression	dev -> Margins [ 1 ] = - margins [ 3 ] * dev -> HWResolution [ 1 ]		5045333	0		=			
ANR	5045388	ArrayIndexing	dev -> Margins [ 1 ]		5045333	0					
ANR	5045389	PtrMemberAccess	dev -> Margins		5045333	0					
ANR	5045390	Identifier	dev		5045333	0					
ANR	5045391	Identifier	Margins		5045333	1					
ANR	5045392	PrimaryExpression	1		5045333	1					
ANR	5045393	MultiplicativeExpression	- margins [ 3 ] * dev -> HWResolution [ 1 ]		5045333	1		*			
ANR	5045394	UnaryOperationExpression	- margins [ 3 ]		5045333	0					
ANR	5045395	UnaryOperator	-		5045333	0					
ANR	5045396	ArrayIndexing	margins [ 3 ]		5045333	1					
ANR	5045397	Identifier	margins		5045333	0					
ANR	5045398	PrimaryExpression	3		5045333	1					
ANR	5045399	ArrayIndexing	dev -> HWResolution [ 1 ]		5045333	1					
ANR	5045400	PtrMemberAccess	dev -> HWResolution		5045333	0					
ANR	5045401	Identifier	dev		5045333	0					
ANR	5045402	Identifier	HWResolution		5045333	1					
ANR	5045403	PrimaryExpression	1		5045333	1					
ANR	5045404	ReturnType	void		5045333	1					
ANR	5045405	Identifier	gx_device_set_margins		5045333	2					
ANR	5045406	ParameterList	"gx_device * dev , const float * margins , bool move_origin"		5045333	3					
ANR	5045407	Parameter	gx_device * dev	827:22:27336:27350	5045333	0	True				
ANR	5045408	ParameterType	gx_device *		5045333	0					
ANR	5045409	Identifier	dev		5045333	1					
ANR	5045410	Parameter	const float * margins	827:39:27353:27372	5045333	1	True				
ANR	5045411	ParameterType	const float *		5045333	0					
ANR	5045412	Identifier	margins		5045333	1					
ANR	5045413	Parameter	bool move_origin	828:22:27407:27422	5045333	2	True				
ANR	5045414	ParameterType	bool		5045333	0					
ANR	5045415	Identifier	move_origin		5045333	1					
ANR	5045416	CFGEntryNode	ENTRY		5045333		True				
ANR	5045417	CFGExitNode	EXIT		5045333		True				
ANR	5045418	Symbol	* dev		5045333						
ANR	5045419	Symbol	margins		5045333						
ANR	5045420	Symbol	dev -> HWMargins		5045333						
ANR	5045421	Symbol	i		5045333						
ANR	5045422	Symbol	* * dev		5045333						
ANR	5045423	Symbol	dev -> Margins		5045333						
ANR	5045424	Symbol	* dev -> HWResolution		5045333						
ANR	5045425	Symbol	* margins		5045333						
ANR	5045426	Symbol	dev -> HWResolution		5045333						
ANR	5045427	Symbol	* dev -> Margins		5045333						
ANR	5045428	Symbol	* i		5045333						
ANR	5045429	Symbol	dev		5045333						
ANR	5045430	Symbol	* dev -> HWMargins		5045333						
ANR	5045431	Symbol	move_origin		5045333						
ANR	5045432	Function	gx_device_set_hwsize_from_media	840:0:27670:28058							
ANR	5045433	FunctionDef	gx_device_set_hwsize_from_media (gx_device * dev)		5045432	0					
ANR	5045434	CompoundStatement		842:0:27730:28058	5045432	0					
ANR	5045435	IdentifierDeclStatement	int rot = ( dev -> LeadingEdge & 1 ) ;	843:4:27736:27768	5045432	0	True				
ANR	5045436	IdentifierDecl	rot = ( dev -> LeadingEdge & 1 )		5045432	0					
ANR	5045437	IdentifierDeclType	int		5045432	0					
ANR	5045438	Identifier	rot		5045432	1					
ANR	5045439	AssignmentExpression	rot = ( dev -> LeadingEdge & 1 )		5045432	2		=			
ANR	5045440	Identifier	rot		5045432	0					
ANR	5045441	BitAndExpression	dev -> LeadingEdge & 1		5045432	1		&			
ANR	5045442	PtrMemberAccess	dev -> LeadingEdge		5045432	0					
ANR	5045443	Identifier	dev		5045432	0					
ANR	5045444	Identifier	LeadingEdge		5045432	1					
ANR	5045445	PrimaryExpression	1		5045432	1					
ANR	5045446	IdentifierDeclStatement	double rot_media_x = rot ? dev -> MediaSize [ 1 ] : dev -> MediaSize [ 0 ] ;	844:4:27774:27838	5045432	1	True				
ANR	5045447	IdentifierDecl	rot_media_x = rot ? dev -> MediaSize [ 1 ] : dev -> MediaSize [ 0 ]		5045432	0					
ANR	5045448	IdentifierDeclType	double		5045432	0					
ANR	5045449	Identifier	rot_media_x		5045432	1					
ANR	5045450	AssignmentExpression	rot_media_x = rot ? dev -> MediaSize [ 1 ] : dev -> MediaSize [ 0 ]		5045432	2		=			
ANR	5045451	Identifier	rot_media_x		5045432	0					
ANR	5045452	ConditionalExpression	rot ? dev -> MediaSize [ 1 ] : dev -> MediaSize [ 0 ]		5045432	1					
ANR	5045453	Condition	rot		5045432	0					
ANR	5045454	Identifier	rot		5045432	0					
ANR	5045455	ArrayIndexing	dev -> MediaSize [ 1 ]		5045432	1					
ANR	5045456	PtrMemberAccess	dev -> MediaSize		5045432	0					
ANR	5045457	Identifier	dev		5045432	0					
ANR	5045458	Identifier	MediaSize		5045432	1					
ANR	5045459	PrimaryExpression	1		5045432	1					
ANR	5045460	ArrayIndexing	dev -> MediaSize [ 0 ]		5045432	2					
ANR	5045461	PtrMemberAccess	dev -> MediaSize		5045432	0					
ANR	5045462	Identifier	dev		5045432	0					
ANR	5045463	Identifier	MediaSize		5045432	1					
ANR	5045464	PrimaryExpression	0		5045432	1					
ANR	5045465	IdentifierDeclStatement	double rot_media_y = rot ? dev -> MediaSize [ 0 ] : dev -> MediaSize [ 1 ] ;	845:4:27844:27908	5045432	2	True				
ANR	5045466	IdentifierDecl	rot_media_y = rot ? dev -> MediaSize [ 0 ] : dev -> MediaSize [ 1 ]		5045432	0					
ANR	5045467	IdentifierDeclType	double		5045432	0					
ANR	5045468	Identifier	rot_media_y		5045432	1					
ANR	5045469	AssignmentExpression	rot_media_y = rot ? dev -> MediaSize [ 0 ] : dev -> MediaSize [ 1 ]		5045432	2		=			
ANR	5045470	Identifier	rot_media_y		5045432	0					
ANR	5045471	ConditionalExpression	rot ? dev -> MediaSize [ 0 ] : dev -> MediaSize [ 1 ]		5045432	1					
ANR	5045472	Condition	rot		5045432	0					
ANR	5045473	Identifier	rot		5045432	0					
ANR	5045474	ArrayIndexing	dev -> MediaSize [ 0 ]		5045432	1					
ANR	5045475	PtrMemberAccess	dev -> MediaSize		5045432	0					
ANR	5045476	Identifier	dev		5045432	0					
ANR	5045477	Identifier	MediaSize		5045432	1					
ANR	5045478	PrimaryExpression	0		5045432	1					
ANR	5045479	ArrayIndexing	dev -> MediaSize [ 1 ]		5045432	2					
ANR	5045480	PtrMemberAccess	dev -> MediaSize		5045432	0					
ANR	5045481	Identifier	dev		5045432	0					
ANR	5045482	Identifier	MediaSize		5045432	1					
ANR	5045483	PrimaryExpression	1		5045432	1					
ANR	5045484	ExpressionStatement	dev -> width = ( int ) ( rot_media_x * dev -> HWResolution [ 0 ] / 72.0 + 0.5 )	847:4:27915:27982	5045432	3	True				
ANR	5045485	AssignmentExpression	dev -> width = ( int ) ( rot_media_x * dev -> HWResolution [ 0 ] / 72.0 + 0.5 )		5045432	0		=			
ANR	5045486	PtrMemberAccess	dev -> width		5045432	0					
ANR	5045487	Identifier	dev		5045432	0					
ANR	5045488	Identifier	width		5045432	1					
ANR	5045489	CastExpression	( int ) ( rot_media_x * dev -> HWResolution [ 0 ] / 72.0 + 0.5 )		5045432	1					
ANR	5045490	CastTarget	int		5045432	0					
ANR	5045491	AdditiveExpression	rot_media_x * dev -> HWResolution [ 0 ] / 72.0 + 0.5		5045432	1		+			
ANR	5045492	MultiplicativeExpression	rot_media_x * dev -> HWResolution [ 0 ] / 72.0		5045432	0		*			
ANR	5045493	Identifier	rot_media_x		5045432	0					
ANR	5045494	MultiplicativeExpression	dev -> HWResolution [ 0 ] / 72.0		5045432	1		/			
ANR	5045495	ArrayIndexing	dev -> HWResolution [ 0 ]		5045432	0					
ANR	5045496	PtrMemberAccess	dev -> HWResolution		5045432	0					
ANR	5045497	Identifier	dev		5045432	0					
ANR	5045498	Identifier	HWResolution		5045432	1					
ANR	5045499	PrimaryExpression	0		5045432	1					
ANR	5045500	PrimaryExpression	72.0		5045432	1					
ANR	5045501	PrimaryExpression	0.5		5045432	1					
ANR	5045502	ExpressionStatement	dev -> height = ( int ) ( rot_media_y * dev -> HWResolution [ 1 ] / 72.0 + 0.5 )	848:4:27988:28056	5045432	4	True				
ANR	5045503	AssignmentExpression	dev -> height = ( int ) ( rot_media_y * dev -> HWResolution [ 1 ] / 72.0 + 0.5 )		5045432	0		=			
ANR	5045504	PtrMemberAccess	dev -> height		5045432	0					
ANR	5045505	Identifier	dev		5045432	0					
ANR	5045506	Identifier	height		5045432	1					
ANR	5045507	CastExpression	( int ) ( rot_media_y * dev -> HWResolution [ 1 ] / 72.0 + 0.5 )		5045432	1					
ANR	5045508	CastTarget	int		5045432	0					
ANR	5045509	AdditiveExpression	rot_media_y * dev -> HWResolution [ 1 ] / 72.0 + 0.5		5045432	1		+			
ANR	5045510	MultiplicativeExpression	rot_media_y * dev -> HWResolution [ 1 ] / 72.0		5045432	0		*			
ANR	5045511	Identifier	rot_media_y		5045432	0					
ANR	5045512	MultiplicativeExpression	dev -> HWResolution [ 1 ] / 72.0		5045432	1		/			
ANR	5045513	ArrayIndexing	dev -> HWResolution [ 1 ]		5045432	0					
ANR	5045514	PtrMemberAccess	dev -> HWResolution		5045432	0					
ANR	5045515	Identifier	dev		5045432	0					
ANR	5045516	Identifier	HWResolution		5045432	1					
ANR	5045517	PrimaryExpression	1		5045432	1					
ANR	5045518	PrimaryExpression	72.0		5045432	1					
ANR	5045519	PrimaryExpression	0.5		5045432	1					
ANR	5045520	ReturnType	static void		5045432	1					
ANR	5045521	Identifier	gx_device_set_hwsize_from_media		5045432	2					
ANR	5045522	ParameterList	gx_device * dev		5045432	3					
ANR	5045523	Parameter	gx_device * dev	841:32:27714:27727	5045432	0	True				
ANR	5045524	ParameterType	gx_device *		5045432	0					
ANR	5045525	Identifier	dev		5045432	1					
ANR	5045526	CFGEntryNode	ENTRY		5045432		True				
ANR	5045527	CFGExitNode	EXIT		5045432		True				
ANR	5045528	Symbol	* dev		5045432						
ANR	5045529	Symbol	rot_media_x		5045432						
ANR	5045530	Symbol	rot_media_y		5045432						
ANR	5045531	Symbol	dev -> height		5045432						
ANR	5045532	Symbol	* * dev		5045432						
ANR	5045533	Symbol	* dev -> HWResolution		5045432						
ANR	5045534	Symbol	dev -> HWResolution		5045432						
ANR	5045535	Symbol	* dev -> MediaSize		5045432						
ANR	5045536	Symbol	dev		5045432						
ANR	5045537	Symbol	dev -> width		5045432						
ANR	5045538	Symbol	rot		5045432						
ANR	5045539	Symbol	dev -> LeadingEdge		5045432						
ANR	5045540	Symbol	dev -> MediaSize		5045432						
ANR	5045541	Function	gx_device_set_media_from_hwsize	851:0:28061:28435							
ANR	5045542	FunctionDef	gx_device_set_media_from_hwsize (gx_device * dev)		5045541	0					
ANR	5045543	CompoundStatement		853:0:28121:28435	5045541	0					
ANR	5045544	IdentifierDeclStatement	int rot = ( dev -> LeadingEdge & 1 ) ;	854:4:28127:28159	5045541	0	True				
ANR	5045545	IdentifierDecl	rot = ( dev -> LeadingEdge & 1 )		5045541	0					
ANR	5045546	IdentifierDeclType	int		5045541	0					
ANR	5045547	Identifier	rot		5045541	1					
ANR	5045548	AssignmentExpression	rot = ( dev -> LeadingEdge & 1 )		5045541	2		=			
ANR	5045549	Identifier	rot		5045541	0					
ANR	5045550	BitAndExpression	dev -> LeadingEdge & 1		5045541	1		&			
ANR	5045551	PtrMemberAccess	dev -> LeadingEdge		5045541	0					
ANR	5045552	Identifier	dev		5045541	0					
ANR	5045553	Identifier	LeadingEdge		5045541	1					
ANR	5045554	PrimaryExpression	1		5045541	1					
ANR	5045555	IdentifierDeclStatement	double x = dev -> width * 72.0 / dev -> HWResolution [ 0 ] ;	855:4:28165:28216	5045541	1	True				
ANR	5045556	IdentifierDecl	x = dev -> width * 72.0 / dev -> HWResolution [ 0 ]		5045541	0					
ANR	5045557	IdentifierDeclType	double		5045541	0					
ANR	5045558	Identifier	x		5045541	1					
ANR	5045559	AssignmentExpression	x = dev -> width * 72.0 / dev -> HWResolution [ 0 ]		5045541	2		=			
ANR	5045560	Identifier	x		5045541	0					
ANR	5045561	MultiplicativeExpression	dev -> width * 72.0 / dev -> HWResolution [ 0 ]		5045541	1		*			
ANR	5045562	PtrMemberAccess	dev -> width		5045541	0					
ANR	5045563	Identifier	dev		5045541	0					
ANR	5045564	Identifier	width		5045541	1					
ANR	5045565	MultiplicativeExpression	72.0 / dev -> HWResolution [ 0 ]		5045541	1		/			
ANR	5045566	PrimaryExpression	72.0		5045541	0					
ANR	5045567	ArrayIndexing	dev -> HWResolution [ 0 ]		5045541	1					
ANR	5045568	PtrMemberAccess	dev -> HWResolution		5045541	0					
ANR	5045569	Identifier	dev		5045541	0					
ANR	5045570	Identifier	HWResolution		5045541	1					
ANR	5045571	PrimaryExpression	0		5045541	1					
ANR	5045572	IdentifierDeclStatement	double y = dev -> height * 72.0 / dev -> HWResolution [ 1 ] ;	856:4:28222:28274	5045541	2	True				
ANR	5045573	IdentifierDecl	y = dev -> height * 72.0 / dev -> HWResolution [ 1 ]		5045541	0					
ANR	5045574	IdentifierDeclType	double		5045541	0					
ANR	5045575	Identifier	y		5045541	1					
ANR	5045576	AssignmentExpression	y = dev -> height * 72.0 / dev -> HWResolution [ 1 ]		5045541	2		=			
ANR	5045577	Identifier	y		5045541	0					
ANR	5045578	MultiplicativeExpression	dev -> height * 72.0 / dev -> HWResolution [ 1 ]		5045541	1		*			
ANR	5045579	PtrMemberAccess	dev -> height		5045541	0					
ANR	5045580	Identifier	dev		5045541	0					
ANR	5045581	Identifier	height		5045541	1					
ANR	5045582	MultiplicativeExpression	72.0 / dev -> HWResolution [ 1 ]		5045541	1		/			
ANR	5045583	PrimaryExpression	72.0		5045541	0					
ANR	5045584	ArrayIndexing	dev -> HWResolution [ 1 ]		5045541	1					
ANR	5045585	PtrMemberAccess	dev -> HWResolution		5045541	0					
ANR	5045586	Identifier	dev		5045541	0					
ANR	5045587	Identifier	HWResolution		5045541	1					
ANR	5045588	PrimaryExpression	1		5045541	1					
ANR	5045589	IfStatement	if ( rot )		5045541	3					
ANR	5045590	Condition	rot	858:8:28285:28287	5045541	0	True				
ANR	5045591	Identifier	rot		5045541	0					
ANR	5045592	CompoundStatement		6:13:168:168	5045541	1					
ANR	5045593	ExpressionStatement	dev -> MediaSize [ 1 ] = x	859:8:28300:28321	5045541	0	True				
ANR	5045594	AssignmentExpression	dev -> MediaSize [ 1 ] = x		5045541	0		=			
ANR	5045595	ArrayIndexing	dev -> MediaSize [ 1 ]		5045541	0					
ANR	5045596	PtrMemberAccess	dev -> MediaSize		5045541	0					
ANR	5045597	Identifier	dev		5045541	0					
ANR	5045598	Identifier	MediaSize		5045541	1					
ANR	5045599	PrimaryExpression	1		5045541	1					
ANR	5045600	Identifier	x		5045541	1					
ANR	5045601	ExpressionStatement	dev -> MediaSize [ 0 ] = y	860:8:28331:28352	5045541	1	True				
ANR	5045602	AssignmentExpression	dev -> MediaSize [ 0 ] = y		5045541	0		=			
ANR	5045603	ArrayIndexing	dev -> MediaSize [ 0 ]		5045541	0					
ANR	5045604	PtrMemberAccess	dev -> MediaSize		5045541	0					
ANR	5045605	Identifier	dev		5045541	0					
ANR	5045606	Identifier	MediaSize		5045541	1					
ANR	5045607	PrimaryExpression	0		5045541	1					
ANR	5045608	Identifier	y		5045541	1					
ANR	5045609	ElseStatement	else		5045541	0					
ANR	5045610	CompoundStatement		9:11:243:243	5045541	0					
ANR	5045611	ExpressionStatement	dev -> MediaSize [ 0 ] = x	862:8:28375:28396	5045541	0	True				
ANR	5045612	AssignmentExpression	dev -> MediaSize [ 0 ] = x		5045541	0		=			
ANR	5045613	ArrayIndexing	dev -> MediaSize [ 0 ]		5045541	0					
ANR	5045614	PtrMemberAccess	dev -> MediaSize		5045541	0					
ANR	5045615	Identifier	dev		5045541	0					
ANR	5045616	Identifier	MediaSize		5045541	1					
ANR	5045617	PrimaryExpression	0		5045541	1					
ANR	5045618	Identifier	x		5045541	1					
ANR	5045619	ExpressionStatement	dev -> MediaSize [ 1 ] = y	863:8:28406:28427	5045541	1	True				
ANR	5045620	AssignmentExpression	dev -> MediaSize [ 1 ] = y		5045541	0		=			
ANR	5045621	ArrayIndexing	dev -> MediaSize [ 1 ]		5045541	0					
ANR	5045622	PtrMemberAccess	dev -> MediaSize		5045541	0					
ANR	5045623	Identifier	dev		5045541	0					
ANR	5045624	Identifier	MediaSize		5045541	1					
ANR	5045625	PrimaryExpression	1		5045541	1					
ANR	5045626	Identifier	y		5045541	1					
ANR	5045627	ReturnType	static void		5045541	1					
ANR	5045628	Identifier	gx_device_set_media_from_hwsize		5045541	2					
ANR	5045629	ParameterList	gx_device * dev		5045541	3					
ANR	5045630	Parameter	gx_device * dev	852:32:28105:28118	5045541	0	True				
ANR	5045631	ParameterType	gx_device *		5045541	0					
ANR	5045632	Identifier	dev		5045541	1					
ANR	5045633	CFGEntryNode	ENTRY		5045541		True				
ANR	5045634	CFGExitNode	EXIT		5045541		True				
ANR	5045635	Symbol	* dev		5045541						
ANR	5045636	Symbol	dev -> height		5045541						
ANR	5045637	Symbol	* * dev		5045541						
ANR	5045638	Symbol	* dev -> HWResolution		5045541						
ANR	5045639	Symbol	dev -> HWResolution		5045541						
ANR	5045640	Symbol	* dev -> MediaSize		5045541						
ANR	5045641	Symbol	dev		5045541						
ANR	5045642	Symbol	dev -> width		5045541						
ANR	5045643	Symbol	rot		5045541						
ANR	5045644	Symbol	dev -> LeadingEdge		5045541						
ANR	5045645	Symbol	x		5045541						
ANR	5045646	Symbol	dev -> MediaSize		5045541						
ANR	5045647	Symbol	y		5045541						
ANR	5045648	Function	gx_device_set_width_height	868:0:28511:28677							
ANR	5045649	FunctionDef	"gx_device_set_width_height (gx_device * dev , int width , int height)"		5045648	0					
ANR	5045650	CompoundStatement		870:0:28583:28677	5045648	0					
ANR	5045651	ExpressionStatement	dev -> width = width	871:4:28589:28607	5045648	0	True				
ANR	5045652	AssignmentExpression	dev -> width = width		5045648	0		=			
ANR	5045653	PtrMemberAccess	dev -> width		5045648	0					
ANR	5045654	Identifier	dev		5045648	0					
ANR	5045655	Identifier	width		5045648	1					
ANR	5045656	Identifier	width		5045648	1					
ANR	5045657	ExpressionStatement	dev -> height = height	872:4:28613:28633	5045648	1	True				
ANR	5045658	AssignmentExpression	dev -> height = height		5045648	0		=			
ANR	5045659	PtrMemberAccess	dev -> height		5045648	0					
ANR	5045660	Identifier	dev		5045648	0					
ANR	5045661	Identifier	height		5045648	1					
ANR	5045662	Identifier	height		5045648	1					
ANR	5045663	ExpressionStatement	gx_device_set_media_from_hwsize ( dev )	873:4:28639:28675	5045648	2	True				
ANR	5045664	CallExpression	gx_device_set_media_from_hwsize ( dev )		5045648	0					
ANR	5045665	Callee	gx_device_set_media_from_hwsize		5045648	0					
ANR	5045666	Identifier	gx_device_set_media_from_hwsize		5045648	0					
ANR	5045667	ArgumentList	dev		5045648	1					
ANR	5045668	Argument	dev		5045648	0					
ANR	5045669	Identifier	dev		5045648	0					
ANR	5045670	ReturnType	void		5045648	1					
ANR	5045671	Identifier	gx_device_set_width_height		5045648	2					
ANR	5045672	ParameterList	"gx_device * dev , int width , int height"		5045648	3					
ANR	5045673	Parameter	gx_device * dev	869:27:28543:28557	5045648	0	True				
ANR	5045674	ParameterType	gx_device *		5045648	0					
ANR	5045675	Identifier	dev		5045648	1					
ANR	5045676	Parameter	int width	869:44:28560:28568	5045648	1	True				
ANR	5045677	ParameterType	int		5045648	0					
ANR	5045678	Identifier	width		5045648	1					
ANR	5045679	Parameter	int height	869:55:28571:28580	5045648	2	True				
ANR	5045680	ParameterType	int		5045648	0					
ANR	5045681	Identifier	height		5045648	1					
ANR	5045682	CFGEntryNode	ENTRY		5045648		True				
ANR	5045683	CFGExitNode	EXIT		5045648		True				
ANR	5045684	Symbol	* dev		5045648						
ANR	5045685	Symbol	dev		5045648						
ANR	5045686	Symbol	dev -> width		5045648						
ANR	5045687	Symbol	dev -> height		5045648						
ANR	5045688	Symbol	width		5045648						
ANR	5045689	Symbol	height		5045648						
ANR	5045690	Function	gx_device_set_resolution	877:0:28754:28941							
ANR	5045691	FunctionDef	"gx_device_set_resolution (gx_device * dev , double x_dpi , double y_dpi)"		5045690	0					
ANR	5045692	CompoundStatement		879:0:28829:28941	5045690	0					
ANR	5045693	ExpressionStatement	dev -> HWResolution [ 0 ] = x_dpi	880:4:28835:28863	5045690	0	True				
ANR	5045694	AssignmentExpression	dev -> HWResolution [ 0 ] = x_dpi		5045690	0		=			
ANR	5045695	ArrayIndexing	dev -> HWResolution [ 0 ]		5045690	0					
ANR	5045696	PtrMemberAccess	dev -> HWResolution		5045690	0					
ANR	5045697	Identifier	dev		5045690	0					
ANR	5045698	Identifier	HWResolution		5045690	1					
ANR	5045699	PrimaryExpression	0		5045690	1					
ANR	5045700	Identifier	x_dpi		5045690	1					
ANR	5045701	ExpressionStatement	dev -> HWResolution [ 1 ] = y_dpi	881:4:28869:28897	5045690	1	True				
ANR	5045702	AssignmentExpression	dev -> HWResolution [ 1 ] = y_dpi		5045690	0		=			
ANR	5045703	ArrayIndexing	dev -> HWResolution [ 1 ]		5045690	0					
ANR	5045704	PtrMemberAccess	dev -> HWResolution		5045690	0					
ANR	5045705	Identifier	dev		5045690	0					
ANR	5045706	Identifier	HWResolution		5045690	1					
ANR	5045707	PrimaryExpression	1		5045690	1					
ANR	5045708	Identifier	y_dpi		5045690	1					
ANR	5045709	ExpressionStatement	gx_device_set_hwsize_from_media ( dev )	882:4:28903:28939	5045690	2	True				
ANR	5045710	CallExpression	gx_device_set_hwsize_from_media ( dev )		5045690	0					
ANR	5045711	Callee	gx_device_set_hwsize_from_media		5045690	0					
ANR	5045712	Identifier	gx_device_set_hwsize_from_media		5045690	0					
ANR	5045713	ArgumentList	dev		5045690	1					
ANR	5045714	Argument	dev		5045690	0					
ANR	5045715	Identifier	dev		5045690	0					
ANR	5045716	ReturnType	void		5045690	1					
ANR	5045717	Identifier	gx_device_set_resolution		5045690	2					
ANR	5045718	ParameterList	"gx_device * dev , double x_dpi , double y_dpi"		5045690	3					
ANR	5045719	Parameter	gx_device * dev	878:25:28784:28798	5045690	0	True				
ANR	5045720	ParameterType	gx_device *		5045690	0					
ANR	5045721	Identifier	dev		5045690	1					
ANR	5045722	Parameter	double x_dpi	878:42:28801:28812	5045690	1	True				
ANR	5045723	ParameterType	double		5045690	0					
ANR	5045724	Identifier	x_dpi		5045690	1					
ANR	5045725	Parameter	double y_dpi	878:56:28815:28826	5045690	2	True				
ANR	5045726	ParameterType	double		5045690	0					
ANR	5045727	Identifier	y_dpi		5045690	1					
ANR	5045728	CFGEntryNode	ENTRY		5045690		True				
ANR	5045729	CFGExitNode	EXIT		5045690		True				
ANR	5045730	Symbol	* dev		5045690						
ANR	5045731	Symbol	x_dpi		5045690						
ANR	5045732	Symbol	y_dpi		5045690						
ANR	5045733	Symbol	dev		5045690						
ANR	5045734	Symbol	* * dev		5045690						
ANR	5045735	Symbol	* dev -> HWResolution		5045690						
ANR	5045736	Symbol	dev -> HWResolution		5045690						
ANR	5045737	Function	gx_device_set_media_size	886:0:29017:29224							
ANR	5045738	FunctionDef	"gx_device_set_media_size (gx_device * dev , double media_width , double media_height)"		5045737	0					
ANR	5045739	CompoundStatement		888:0:29105:29224	5045737	0					
ANR	5045740	ExpressionStatement	dev -> MediaSize [ 0 ] = media_width	889:4:29111:29142	5045737	0	True				
ANR	5045741	AssignmentExpression	dev -> MediaSize [ 0 ] = media_width		5045737	0		=			
ANR	5045742	ArrayIndexing	dev -> MediaSize [ 0 ]		5045737	0					
ANR	5045743	PtrMemberAccess	dev -> MediaSize		5045737	0					
ANR	5045744	Identifier	dev		5045737	0					
ANR	5045745	Identifier	MediaSize		5045737	1					
ANR	5045746	PrimaryExpression	0		5045737	1					
ANR	5045747	Identifier	media_width		5045737	1					
ANR	5045748	ExpressionStatement	dev -> MediaSize [ 1 ] = media_height	890:4:29148:29180	5045737	1	True				
ANR	5045749	AssignmentExpression	dev -> MediaSize [ 1 ] = media_height		5045737	0		=			
ANR	5045750	ArrayIndexing	dev -> MediaSize [ 1 ]		5045737	0					
ANR	5045751	PtrMemberAccess	dev -> MediaSize		5045737	0					
ANR	5045752	Identifier	dev		5045737	0					
ANR	5045753	Identifier	MediaSize		5045737	1					
ANR	5045754	PrimaryExpression	1		5045737	1					
ANR	5045755	Identifier	media_height		5045737	1					
ANR	5045756	ExpressionStatement	gx_device_set_hwsize_from_media ( dev )	891:4:29186:29222	5045737	2	True				
ANR	5045757	CallExpression	gx_device_set_hwsize_from_media ( dev )		5045737	0					
ANR	5045758	Callee	gx_device_set_hwsize_from_media		5045737	0					
ANR	5045759	Identifier	gx_device_set_hwsize_from_media		5045737	0					
ANR	5045760	ArgumentList	dev		5045737	1					
ANR	5045761	Argument	dev		5045737	0					
ANR	5045762	Identifier	dev		5045737	0					
ANR	5045763	ReturnType	void		5045737	1					
ANR	5045764	Identifier	gx_device_set_media_size		5045737	2					
ANR	5045765	ParameterList	"gx_device * dev , double media_width , double media_height"		5045737	3					
ANR	5045766	Parameter	gx_device * dev	887:25:29047:29061	5045737	0	True				
ANR	5045767	ParameterType	gx_device *		5045737	0					
ANR	5045768	Identifier	dev		5045737	1					
ANR	5045769	Parameter	double media_width	887:42:29064:29081	5045737	1	True				
ANR	5045770	ParameterType	double		5045737	0					
ANR	5045771	Identifier	media_width		5045737	1					
ANR	5045772	Parameter	double media_height	887:62:29084:29102	5045737	2	True				
ANR	5045773	ParameterType	double		5045737	0					
ANR	5045774	Identifier	media_height		5045737	1					
ANR	5045775	CFGEntryNode	ENTRY		5045737		True				
ANR	5045776	CFGExitNode	EXIT		5045737		True				
ANR	5045777	Symbol	* dev		5045737						
ANR	5045778	Symbol	* dev -> MediaSize		5045737						
ANR	5045779	Symbol	dev		5045737						
ANR	5045780	Symbol	media_height		5045737						
ANR	5045781	Symbol	dev -> MediaSize		5045737						
ANR	5045782	Symbol	* * dev		5045737						
ANR	5045783	Symbol	media_width		5045737						
ANR	5045784	Function	gx_device_copy_color_procs	898:0:29368:31114							
ANR	5045785	FunctionDef	"gx_device_copy_color_procs (gx_device * dev , const gx_device * target)"		5045784	0					
ANR	5045786	CompoundStatement		900:0:29441:31114	5045784	0					
ANR	5045787	ExpressionStatement	"dev_proc_map_cmyk_color ( ( * from_cmyk ) ) = dev_proc ( dev , map_cmyk_color )"	901:4:29447:29524	5045784	0	True				
ANR	5045788	AssignmentExpression	"dev_proc_map_cmyk_color ( ( * from_cmyk ) ) = dev_proc ( dev , map_cmyk_color )"		5045784	0		=			
ANR	5045789	CallExpression	dev_proc_map_cmyk_color ( ( * from_cmyk ) )		5045784	0					
ANR	5045790	Callee	dev_proc_map_cmyk_color		5045784	0					
ANR	5045791	Identifier	dev_proc_map_cmyk_color		5045784	0					
ANR	5045792	ArgumentList	* from_cmyk		5045784	1					
ANR	5045793	Argument	* from_cmyk		5045784	0					
ANR	5045794	UnaryOperationExpression	* from_cmyk		5045784	0					
ANR	5045795	UnaryOperator	*		5045784	0					
ANR	5045796	Identifier	from_cmyk		5045784	1					
ANR	5045797	CallExpression	"dev_proc ( dev , map_cmyk_color )"		5045784	1					
ANR	5045798	Callee	dev_proc		5045784	0					
ANR	5045799	Identifier	dev_proc		5045784	0					
ANR	5045800	ArgumentList	dev		5045784	1					
ANR	5045801	Argument	dev		5045784	0					
ANR	5045802	Identifier	dev		5045784	0					
ANR	5045803	Argument	map_cmyk_color		5045784	1					
ANR	5045804	Identifier	map_cmyk_color		5045784	0					
ANR	5045805	ExpressionStatement	"dev_proc_map_rgb_color ( ( * from_rgb ) ) = dev_proc ( dev , map_rgb_color )"	903:4:29530:29604	5045784	1	True				
ANR	5045806	AssignmentExpression	"dev_proc_map_rgb_color ( ( * from_rgb ) ) = dev_proc ( dev , map_rgb_color )"		5045784	0		=			
ANR	5045807	CallExpression	dev_proc_map_rgb_color ( ( * from_rgb ) )		5045784	0					
ANR	5045808	Callee	dev_proc_map_rgb_color		5045784	0					
ANR	5045809	Identifier	dev_proc_map_rgb_color		5045784	0					
ANR	5045810	ArgumentList	* from_rgb		5045784	1					
ANR	5045811	Argument	* from_rgb		5045784	0					
ANR	5045812	UnaryOperationExpression	* from_rgb		5045784	0					
ANR	5045813	UnaryOperator	*		5045784	0					
ANR	5045814	Identifier	from_rgb		5045784	1					
ANR	5045815	CallExpression	"dev_proc ( dev , map_rgb_color )"		5045784	1					
ANR	5045816	Callee	dev_proc		5045784	0					
ANR	5045817	Identifier	dev_proc		5045784	0					
ANR	5045818	ArgumentList	dev		5045784	1					
ANR	5045819	Argument	dev		5045784	0					
ANR	5045820	Identifier	dev		5045784	0					
ANR	5045821	Argument	map_rgb_color		5045784	1					
ANR	5045822	Identifier	map_rgb_color		5045784	0					
ANR	5045823	ExpressionStatement	"dev_proc_map_color_rgb ( ( * to_rgb ) ) = dev_proc ( dev , map_color_rgb )"	905:4:29610:29682	5045784	2	True				
ANR	5045824	AssignmentExpression	"dev_proc_map_color_rgb ( ( * to_rgb ) ) = dev_proc ( dev , map_color_rgb )"		5045784	0		=			
ANR	5045825	CallExpression	dev_proc_map_color_rgb ( ( * to_rgb ) )		5045784	0					
ANR	5045826	Callee	dev_proc_map_color_rgb		5045784	0					
ANR	5045827	Identifier	dev_proc_map_color_rgb		5045784	0					
ANR	5045828	ArgumentList	* to_rgb		5045784	1					
ANR	5045829	Argument	* to_rgb		5045784	0					
ANR	5045830	UnaryOperationExpression	* to_rgb		5045784	0					
ANR	5045831	UnaryOperator	*		5045784	0					
ANR	5045832	Identifier	to_rgb		5045784	1					
ANR	5045833	CallExpression	"dev_proc ( dev , map_color_rgb )"		5045784	1					
ANR	5045834	Callee	dev_proc		5045784	0					
ANR	5045835	Identifier	dev_proc		5045784	0					
ANR	5045836	ArgumentList	dev		5045784	1					
ANR	5045837	Argument	dev		5045784	0					
ANR	5045838	Identifier	dev		5045784	0					
ANR	5045839	Argument	map_color_rgb		5045784	1					
ANR	5045840	Identifier	map_color_rgb		5045784	0					
ANR	5045841	IfStatement	if ( from_cmyk == gx_forward_map_cmyk_color || from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color )		5045784	3					
ANR	5045842	Condition	from_cmyk == gx_forward_map_cmyk_color || from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color	913:8:29950:30085	5045784	0	True				
ANR	5045843	OrExpression	from_cmyk == gx_forward_map_cmyk_color || from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color		5045784	0		||			
ANR	5045844	EqualityExpression	from_cmyk == gx_forward_map_cmyk_color		5045784	0		==			
ANR	5045845	Identifier	from_cmyk		5045784	0					
ANR	5045846	Identifier	gx_forward_map_cmyk_color		5045784	1					
ANR	5045847	OrExpression	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color		5045784	1		||			
ANR	5045848	EqualityExpression	from_cmyk == cmyk_1bit_map_cmyk_color		5045784	0		==			
ANR	5045849	Identifier	from_cmyk		5045784	0					
ANR	5045850	Identifier	cmyk_1bit_map_cmyk_color		5045784	1					
ANR	5045851	EqualityExpression	from_cmyk == cmyk_8bit_map_cmyk_color		5045784	1		==			
ANR	5045852	Identifier	from_cmyk		5045784	0					
ANR	5045853	Identifier	cmyk_8bit_map_cmyk_color		5045784	1					
ANR	5045854	CompoundStatement		16:47:646:646	5045784	1					
ANR	5045855	ExpressionStatement	"from_cmyk = dev_proc ( target , map_cmyk_color )"	916:8:30098:30142	5045784	0	True				
ANR	5045856	AssignmentExpression	"from_cmyk = dev_proc ( target , map_cmyk_color )"		5045784	0		=			
ANR	5045857	Identifier	from_cmyk		5045784	0					
ANR	5045858	CallExpression	"dev_proc ( target , map_cmyk_color )"		5045784	1					
ANR	5045859	Callee	dev_proc		5045784	0					
ANR	5045860	Identifier	dev_proc		5045784	0					
ANR	5045861	ArgumentList	target		5045784	1					
ANR	5045862	Argument	target		5045784	0					
ANR	5045863	Identifier	target		5045784	0					
ANR	5045864	Argument	map_cmyk_color		5045784	1					
ANR	5045865	Identifier	map_cmyk_color		5045784	0					
ANR	5045866	ExpressionStatement	"set_dev_proc ( dev , map_cmyk_color , ( from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color ? from_cmyk : gx_forward_map_cmyk_color ) )"	917:8:30152:30372	5045784	1	True				
ANR	5045867	CallExpression	"set_dev_proc ( dev , map_cmyk_color , ( from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color ? from_cmyk : gx_forward_map_cmyk_color ) )"		5045784	0					
ANR	5045868	Callee	set_dev_proc		5045784	0					
ANR	5045869	Identifier	set_dev_proc		5045784	0					
ANR	5045870	ArgumentList	dev		5045784	1					
ANR	5045871	Argument	dev		5045784	0					
ANR	5045872	Identifier	dev		5045784	0					
ANR	5045873	Argument	map_cmyk_color		5045784	1					
ANR	5045874	Identifier	map_cmyk_color		5045784	0					
ANR	5045875	Argument	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color ? from_cmyk : gx_forward_map_cmyk_color		5045784	2					
ANR	5045876	ConditionalExpression	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color ? from_cmyk : gx_forward_map_cmyk_color		5045784	0					
ANR	5045877	Condition	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color		5045784	0					
ANR	5045878	OrExpression	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color		5045784	0		||			
ANR	5045879	EqualityExpression	from_cmyk == cmyk_1bit_map_cmyk_color		5045784	0		==			
ANR	5045880	Identifier	from_cmyk		5045784	0					
ANR	5045881	Identifier	cmyk_1bit_map_cmyk_color		5045784	1					
ANR	5045882	EqualityExpression	from_cmyk == cmyk_8bit_map_cmyk_color		5045784	1		==			
ANR	5045883	Identifier	from_cmyk		5045784	0					
ANR	5045884	Identifier	cmyk_8bit_map_cmyk_color		5045784	1					
ANR	5045885	Identifier	from_cmyk		5045784	1					
ANR	5045886	Identifier	gx_forward_map_cmyk_color		5045784	2					
ANR	5045887	IfStatement	if ( from_rgb == gx_forward_map_rgb_color || from_rgb == gx_default_rgb_map_rgb_color )		5045784	4					
ANR	5045888	Condition	from_rgb == gx_forward_map_rgb_color || from_rgb == gx_default_rgb_map_rgb_color	922:8:30388:30475	5045784	0	True				
ANR	5045889	OrExpression	from_rgb == gx_forward_map_rgb_color || from_rgb == gx_default_rgb_map_rgb_color		5045784	0		||			
ANR	5045890	EqualityExpression	from_rgb == gx_forward_map_rgb_color		5045784	0		==			
ANR	5045891	Identifier	from_rgb		5045784	0					
ANR	5045892	Identifier	gx_forward_map_rgb_color		5045784	1					
ANR	5045893	EqualityExpression	from_rgb == gx_default_rgb_map_rgb_color		5045784	1		==			
ANR	5045894	Identifier	from_rgb		5045784	0					
ANR	5045895	Identifier	gx_default_rgb_map_rgb_color		5045784	1					
ANR	5045896	CompoundStatement		24:50:1036:1036	5045784	1					
ANR	5045897	ExpressionStatement	"from_rgb = dev_proc ( target , map_rgb_color )"	924:8:30488:30530	5045784	0	True				
ANR	5045898	AssignmentExpression	"from_rgb = dev_proc ( target , map_rgb_color )"		5045784	0		=			
ANR	5045899	Identifier	from_rgb		5045784	0					
ANR	5045900	CallExpression	"dev_proc ( target , map_rgb_color )"		5045784	1					
ANR	5045901	Callee	dev_proc		5045784	0					
ANR	5045902	Identifier	dev_proc		5045784	0					
ANR	5045903	ArgumentList	target		5045784	1					
ANR	5045904	Argument	target		5045784	0					
ANR	5045905	Identifier	target		5045784	0					
ANR	5045906	Argument	map_rgb_color		5045784	1					
ANR	5045907	Identifier	map_rgb_color		5045784	0					
ANR	5045908	ExpressionStatement	"set_dev_proc ( dev , map_rgb_color , ( from_rgb == gx_default_rgb_map_rgb_color ? from_rgb : gx_forward_map_rgb_color ) )"	925:8:30540:30697	5045784	1	True				
ANR	5045909	CallExpression	"set_dev_proc ( dev , map_rgb_color , ( from_rgb == gx_default_rgb_map_rgb_color ? from_rgb : gx_forward_map_rgb_color ) )"		5045784	0					
ANR	5045910	Callee	set_dev_proc		5045784	0					
ANR	5045911	Identifier	set_dev_proc		5045784	0					
ANR	5045912	ArgumentList	dev		5045784	1					
ANR	5045913	Argument	dev		5045784	0					
ANR	5045914	Identifier	dev		5045784	0					
ANR	5045915	Argument	map_rgb_color		5045784	1					
ANR	5045916	Identifier	map_rgb_color		5045784	0					
ANR	5045917	Argument	from_rgb == gx_default_rgb_map_rgb_color ? from_rgb : gx_forward_map_rgb_color		5045784	2					
ANR	5045918	ConditionalExpression	from_rgb == gx_default_rgb_map_rgb_color ? from_rgb : gx_forward_map_rgb_color		5045784	0					
ANR	5045919	Condition	from_rgb == gx_default_rgb_map_rgb_color		5045784	0					
ANR	5045920	EqualityExpression	from_rgb == gx_default_rgb_map_rgb_color		5045784	0		==			
ANR	5045921	Identifier	from_rgb		5045784	0					
ANR	5045922	Identifier	gx_default_rgb_map_rgb_color		5045784	1					
ANR	5045923	Identifier	from_rgb		5045784	1					
ANR	5045924	Identifier	gx_forward_map_rgb_color		5045784	2					
ANR	5045925	IfStatement	if ( to_rgb == gx_forward_map_color_rgb || to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb )		5045784	5					
ANR	5045926	Condition	to_rgb == gx_forward_map_color_rgb || to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb	929:8:30713:30836	5045784	0	True				
ANR	5045927	OrExpression	to_rgb == gx_forward_map_color_rgb || to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb		5045784	0		||			
ANR	5045928	EqualityExpression	to_rgb == gx_forward_map_color_rgb		5045784	0		==			
ANR	5045929	Identifier	to_rgb		5045784	0					
ANR	5045930	Identifier	gx_forward_map_color_rgb		5045784	1					
ANR	5045931	OrExpression	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb		5045784	1		||			
ANR	5045932	EqualityExpression	to_rgb == cmyk_1bit_map_color_rgb		5045784	0		==			
ANR	5045933	Identifier	to_rgb		5045784	0					
ANR	5045934	Identifier	cmyk_1bit_map_color_rgb		5045784	1					
ANR	5045935	EqualityExpression	to_rgb == cmyk_8bit_map_color_rgb		5045784	1		==			
ANR	5045936	Identifier	to_rgb		5045784	0					
ANR	5045937	Identifier	cmyk_8bit_map_color_rgb		5045784	1					
ANR	5045938	CompoundStatement		32:43:1397:1397	5045784	1					
ANR	5045939	ExpressionStatement	"to_rgb = dev_proc ( target , map_color_rgb )"	932:8:30849:30889	5045784	0	True				
ANR	5045940	AssignmentExpression	"to_rgb = dev_proc ( target , map_color_rgb )"		5045784	0		=			
ANR	5045941	Identifier	to_rgb		5045784	0					
ANR	5045942	CallExpression	"dev_proc ( target , map_color_rgb )"		5045784	1					
ANR	5045943	Callee	dev_proc		5045784	0					
ANR	5045944	Identifier	dev_proc		5045784	0					
ANR	5045945	ArgumentList	target		5045784	1					
ANR	5045946	Argument	target		5045784	0					
ANR	5045947	Identifier	target		5045784	0					
ANR	5045948	Argument	map_color_rgb		5045784	1					
ANR	5045949	Identifier	map_color_rgb		5045784	0					
ANR	5045950	ExpressionStatement	"set_dev_proc ( dev , map_color_rgb , ( to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb ? to_rgb : gx_forward_map_color_rgb ) )"	933:8:30899:31106	5045784	1	True				
ANR	5045951	CallExpression	"set_dev_proc ( dev , map_color_rgb , ( to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb ? to_rgb : gx_forward_map_color_rgb ) )"		5045784	0					
ANR	5045952	Callee	set_dev_proc		5045784	0					
ANR	5045953	Identifier	set_dev_proc		5045784	0					
ANR	5045954	ArgumentList	dev		5045784	1					
ANR	5045955	Argument	dev		5045784	0					
ANR	5045956	Identifier	dev		5045784	0					
ANR	5045957	Argument	map_color_rgb		5045784	1					
ANR	5045958	Identifier	map_color_rgb		5045784	0					
ANR	5045959	Argument	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb ? to_rgb : gx_forward_map_color_rgb		5045784	2					
ANR	5045960	ConditionalExpression	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb ? to_rgb : gx_forward_map_color_rgb		5045784	0					
ANR	5045961	Condition	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb		5045784	0					
ANR	5045962	OrExpression	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb		5045784	0		||			
ANR	5045963	EqualityExpression	to_rgb == cmyk_1bit_map_color_rgb		5045784	0		==			
ANR	5045964	Identifier	to_rgb		5045784	0					
ANR	5045965	Identifier	cmyk_1bit_map_color_rgb		5045784	1					
ANR	5045966	EqualityExpression	to_rgb == cmyk_8bit_map_color_rgb		5045784	1		==			
ANR	5045967	Identifier	to_rgb		5045784	0					
ANR	5045968	Identifier	cmyk_8bit_map_color_rgb		5045784	1					
ANR	5045969	Identifier	to_rgb		5045784	1					
ANR	5045970	Identifier	gx_forward_map_color_rgb		5045784	2					
ANR	5045971	ReturnType	void		5045784	1					
ANR	5045972	Identifier	gx_device_copy_color_procs		5045784	2					
ANR	5045973	ParameterList	"gx_device * dev , const gx_device * target"		5045784	3					
ANR	5045974	Parameter	gx_device * dev	899:27:29400:29413	5045784	0	True				
ANR	5045975	ParameterType	gx_device *		5045784	0					
ANR	5045976	Identifier	dev		5045784	1					
ANR	5045977	Parameter	const gx_device * target	899:43:29416:29438	5045784	1	True				
ANR	5045978	ParameterType	const gx_device *		5045784	0					
ANR	5045979	Identifier	target		5045784	1					
ANR	5045980	CFGEntryNode	ENTRY		5045784		True				
ANR	5045981	CFGExitNode	EXIT		5045784		True				
ANR	5045982	Symbol	* from_cmyk		5045784						
ANR	5045983	Symbol	* from_rgb		5045784						
ANR	5045984	Symbol	map_cmyk_color		5045784						
ANR	5045985	Symbol	gx_forward_map_rgb_color		5045784						
ANR	5045986	Symbol	gx_default_rgb_map_rgb_color		5045784						
ANR	5045987	Symbol	cmyk_1bit_map_color_rgb		5045784						
ANR	5045988	Symbol	gx_forward_map_color_rgb		5045784						
ANR	5045989	Symbol	dev_proc_map_rgb_color		5045784						
ANR	5045990	Symbol	dev_proc_map_color_rgb		5045784						
ANR	5045991	Symbol	* to_rgb		5045784						
ANR	5045992	Symbol	from_rgb		5045784						
ANR	5045993	Symbol	map_color_rgb		5045784						
ANR	5045994	Symbol	gx_forward_map_cmyk_color		5045784						
ANR	5045995	Symbol	target		5045784						
ANR	5045996	Symbol	map_rgb_color		5045784						
ANR	5045997	Symbol	cmyk_8bit_map_color_rgb		5045784						
ANR	5045998	Symbol	cmyk_8bit_map_cmyk_color		5045784						
ANR	5045999	Symbol	cmyk_1bit_map_cmyk_color		5045784						
ANR	5046000	Symbol	to_rgb		5045784						
ANR	5046001	Symbol	dev_proc_map_cmyk_color		5045784						
ANR	5046002	Symbol	dev		5045784						
ANR	5046003	Symbol	from_cmyk		5045784						
ANR	5046004	Symbol	dev_proc		5045784						
ANR	5046005	Function	gx_device_copy_color_params	940:39:31156:31468							
ANR	5046006	FunctionDef	"gx_device_copy_color_params (gx_device * dev , const gx_device * target)"		5046005	0					
ANR	5046007	CompoundStatement		948:0:31350:31468	5046005	0					
ANR	5046008	ExpressionStatement	COPY_PARAM ( color_info )	949:8:31360:31382	5046005	0	True				
ANR	5046009	CallExpression	COPY_PARAM ( color_info )		5046005	0					
ANR	5046010	Callee	COPY_PARAM		5046005	0					
ANR	5046011	Identifier	COPY_PARAM		5046005	0					
ANR	5046012	ArgumentList	color_info		5046005	1					
ANR	5046013	Argument	color_info		5046005	0					
ANR	5046014	Identifier	color_info		5046005	0					
ANR	5046015	ExpressionStatement	COPY_PARAM ( cached_colors )	950:8:31392:31417	5046005	1	True				
ANR	5046016	CallExpression	COPY_PARAM ( cached_colors )		5046005	0					
ANR	5046017	Callee	COPY_PARAM		5046005	0					
ANR	5046018	Identifier	COPY_PARAM		5046005	0					
ANR	5046019	ArgumentList	cached_colors		5046005	1					
ANR	5046020	Argument	cached_colors		5046005	0					
ANR	5046021	Identifier	cached_colors		5046005	0					
ANR	5046022	ExpressionStatement	"gx_device_copy_color_procs ( dev , target )"	951:8:31427:31466	5046005	2	True				
ANR	5046023	CallExpression	"gx_device_copy_color_procs ( dev , target )"		5046005	0					
ANR	5046024	Callee	gx_device_copy_color_procs		5046005	0					
ANR	5046025	Identifier	gx_device_copy_color_procs		5046005	0					
ANR	5046026	ArgumentList	dev		5046005	1					
ANR	5046027	Argument	dev		5046005	0					
ANR	5046028	Identifier	dev		5046005	0					
ANR	5046029	Argument	target		5046005	1					
ANR	5046030	Identifier	target		5046005	0					
ANR	5046031	ReturnType	p void		5046005	1					
ANR	5046032	Identifier	gx_device_copy_color_params		5046005	2					
ANR	5046033	ParameterList	"gx_device * dev , const gx_device * target"		5046005	3					
ANR	5046034	Parameter	gx_device * dev	947:28:31309:31322	5046005	0	True				
ANR	5046035	ParameterType	gx_device *		5046005	0					
ANR	5046036	Identifier	dev		5046005	1					
ANR	5046037	Parameter	const gx_device * target	947:44:31325:31347	5046005	1	True				
ANR	5046038	ParameterType	const gx_device *		5046005	0					
ANR	5046039	Identifier	target		5046005	1					
ANR	5046040	CFGEntryNode	ENTRY		5046005		True				
ANR	5046041	CFGExitNode	EXIT		5046005		True				
ANR	5046042	Symbol	color_info		5046005						
ANR	5046043	Symbol	dev		5046005						
ANR	5046044	Symbol	cached_colors		5046005						
ANR	5046045	Symbol	target		5046005						
ANR	5046046	Function	gx_device_copy_params	959:0:31667:32230							
ANR	5046047	FunctionDef	"gx_device_copy_params (gx_device * dev , const gx_device * target)"		5046046	0					
ANR	5046048	CompoundStatement		961:0:31735:32230	5046046	0					
ANR	5046049	Statement	define	962:1:31738:31743	5046046	0	True				
ANR	5046050	Statement	COPY_ARRAY_PARAM	962:8:31745:31760	5046046	1	True				
ANR	5046051	Statement	(	962:24:31761:31761	5046046	2	True				
ANR	5046052	Statement	p	962:25:31762:31762	5046046	3	True				
ANR	5046053	Statement	)	962:26:31763:31763	5046046	4	True				
ANR	5046054	Statement	memcpy	962:28:31765:31770	5046046	5	True				
ANR	5046055	Statement	(	962:34:31771:31771	5046046	6	True				
ANR	5046056	Statement	dev	962:35:31772:31774	5046046	7	True				
ANR	5046057	Statement	->	962:38:31775:31776	5046046	8	True				
ANR	5046058	Statement	p	962:40:31777:31777	5046046	9	True				
ANR	5046059	Statement	","	962:41:31778:31778	5046046	10	True				
ANR	5046060	Statement	target	962:43:31780:31785	5046046	11	True				
ANR	5046061	Statement	->	962:49:31786:31787	5046046	12	True				
ANR	5046062	Statement	p	962:51:31788:31788	5046046	13	True				
ANR	5046063	Statement	","	962:52:31789:31789	5046046	14	True				
ANR	5046064	Statement	sizeof	962:54:31791:31796	5046046	15	True				
ANR	5046065	Statement	(	962:60:31797:31797	5046046	16	True				
ANR	5046066	Statement	dev	962:61:31798:31800	5046046	17	True				
ANR	5046067	Statement	->	962:64:31801:31802	5046046	18	True				
ANR	5046068	Statement	p	962:66:31803:31803	5046046	19	True				
ANR	5046069	Statement	)	962:67:31804:31804	5046046	20	True				
ANR	5046070	Statement	)	962:68:31805:31805	5046046	21	True				
ANR	5046071	ExpressionStatement	COPY_PARAM ( width )	963:8:31815:31832	5046046	22	True				
ANR	5046072	CallExpression	COPY_PARAM ( width )		5046046	0					
ANR	5046073	Callee	COPY_PARAM		5046046	0					
ANR	5046074	Identifier	COPY_PARAM		5046046	0					
ANR	5046075	ArgumentList	width		5046046	1					
ANR	5046076	Argument	width		5046046	0					
ANR	5046077	Identifier	width		5046046	0					
ANR	5046078	ExpressionStatement	COPY_PARAM ( height )	964:8:31842:31860	5046046	23	True				
ANR	5046079	CallExpression	COPY_PARAM ( height )		5046046	0					
ANR	5046080	Callee	COPY_PARAM		5046046	0					
ANR	5046081	Identifier	COPY_PARAM		5046046	0					
ANR	5046082	ArgumentList	height		5046046	1					
ANR	5046083	Argument	height		5046046	0					
ANR	5046084	Identifier	height		5046046	0					
ANR	5046085	ExpressionStatement	COPY_ARRAY_PARAM ( MediaSize )	965:8:31870:31897	5046046	24	True				
ANR	5046086	CallExpression	COPY_ARRAY_PARAM ( MediaSize )		5046046	0					
ANR	5046087	Callee	COPY_ARRAY_PARAM		5046046	0					
ANR	5046088	Identifier	COPY_ARRAY_PARAM		5046046	0					
ANR	5046089	ArgumentList	MediaSize		5046046	1					
ANR	5046090	Argument	MediaSize		5046046	0					
ANR	5046091	Identifier	MediaSize		5046046	0					
ANR	5046092	ExpressionStatement	COPY_ARRAY_PARAM ( ImagingBBox )	966:8:31907:31936	5046046	25	True				
ANR	5046093	CallExpression	COPY_ARRAY_PARAM ( ImagingBBox )		5046046	0					
ANR	5046094	Callee	COPY_ARRAY_PARAM		5046046	0					
ANR	5046095	Identifier	COPY_ARRAY_PARAM		5046046	0					
ANR	5046096	ArgumentList	ImagingBBox		5046046	1					
ANR	5046097	Argument	ImagingBBox		5046046	0					
ANR	5046098	Identifier	ImagingBBox		5046046	0					
ANR	5046099	ExpressionStatement	COPY_PARAM ( ImagingBBox_set )	967:8:31946:31973	5046046	26	True				
ANR	5046100	CallExpression	COPY_PARAM ( ImagingBBox_set )		5046046	0					
ANR	5046101	Callee	COPY_PARAM		5046046	0					
ANR	5046102	Identifier	COPY_PARAM		5046046	0					
ANR	5046103	ArgumentList	ImagingBBox_set		5046046	1					
ANR	5046104	Argument	ImagingBBox_set		5046046	0					
ANR	5046105	Identifier	ImagingBBox_set		5046046	0					
ANR	5046106	ExpressionStatement	COPY_ARRAY_PARAM ( HWResolution )	968:8:31983:32013	5046046	27	True				
ANR	5046107	CallExpression	COPY_ARRAY_PARAM ( HWResolution )		5046046	0					
ANR	5046108	Callee	COPY_ARRAY_PARAM		5046046	0					
ANR	5046109	Identifier	COPY_ARRAY_PARAM		5046046	0					
ANR	5046110	ArgumentList	HWResolution		5046046	1					
ANR	5046111	Argument	HWResolution		5046046	0					
ANR	5046112	Identifier	HWResolution		5046046	0					
ANR	5046113	ExpressionStatement	COPY_ARRAY_PARAM ( Margins )	969:8:32023:32048	5046046	28	True				
ANR	5046114	CallExpression	COPY_ARRAY_PARAM ( Margins )		5046046	0					
ANR	5046115	Callee	COPY_ARRAY_PARAM		5046046	0					
ANR	5046116	Identifier	COPY_ARRAY_PARAM		5046046	0					
ANR	5046117	ArgumentList	Margins		5046046	1					
ANR	5046118	Argument	Margins		5046046	0					
ANR	5046119	Identifier	Margins		5046046	0					
ANR	5046120	ExpressionStatement	COPY_ARRAY_PARAM ( HWMargins )	970:8:32058:32085	5046046	29	True				
ANR	5046121	CallExpression	COPY_ARRAY_PARAM ( HWMargins )		5046046	0					
ANR	5046122	Callee	COPY_ARRAY_PARAM		5046046	0					
ANR	5046123	Identifier	COPY_ARRAY_PARAM		5046046	0					
ANR	5046124	ArgumentList	HWMargins		5046046	1					
ANR	5046125	Argument	HWMargins		5046046	0					
ANR	5046126	Identifier	HWMargins		5046046	0					
ANR	5046127	ExpressionStatement	COPY_PARAM ( PageCount )	971:8:32095:32116	5046046	30	True				
ANR	5046128	CallExpression	COPY_PARAM ( PageCount )		5046046	0					
ANR	5046129	Callee	COPY_PARAM		5046046	0					
ANR	5046130	Identifier	COPY_PARAM		5046046	0					
ANR	5046131	ArgumentList	PageCount		5046046	1					
ANR	5046132	Argument	PageCount		5046046	0					
ANR	5046133	Identifier	PageCount		5046046	0					
ANR	5046134	ExpressionStatement	COPY_PARAM ( MaxPatternBitmap )	972:8:32126:32154	5046046	31	True				
ANR	5046135	CallExpression	COPY_PARAM ( MaxPatternBitmap )		5046046	0					
ANR	5046136	Callee	COPY_PARAM		5046046	0					
ANR	5046137	Identifier	COPY_PARAM		5046046	0					
ANR	5046138	ArgumentList	MaxPatternBitmap		5046046	1					
ANR	5046139	Argument	MaxPatternBitmap		5046046	0					
ANR	5046140	Identifier	MaxPatternBitmap		5046046	0					
ANR	5046141	IdentifierDeclStatement	"undef COPY_ARRAY_PARAM gx_device_copy_color_params ( dev , target ) ;"	973:1:32157:32228	5046046	32	True				
ANR	5046142	IdentifierDecl	"gx_device_copy_color_params ( dev , target )"		5046046	0					
ANR	5046143	IdentifierDeclType	undef COPY_ARRAY_PARAM		5046046	0					
ANR	5046144	Identifier	gx_device_copy_color_params		5046046	1					
ANR	5046145	Expression	"dev , target"		5046046	2					
ANR	5046146	Identifier	dev		5046046	0					
ANR	5046147	Identifier	target		5046046	1					
ANR	5046148	ReturnType	void		5046046	1					
ANR	5046149	Identifier	gx_device_copy_params		5046046	2					
ANR	5046150	ParameterList	"gx_device * dev , const gx_device * target"		5046046	3					
ANR	5046151	Parameter	gx_device * dev	960:22:31694:31707	5046046	0	True				
ANR	5046152	ParameterType	gx_device *		5046046	0					
ANR	5046153	Identifier	dev		5046046	1					
ANR	5046154	Parameter	const gx_device * target	960:38:31710:31732	5046046	1	True				
ANR	5046155	ParameterType	const gx_device *		5046046	0					
ANR	5046156	Identifier	target		5046046	1					
ANR	5046157	CFGEntryNode	ENTRY		5046046		True				
ANR	5046158	CFGExitNode	EXIT		5046046		True				
ANR	5046159	Symbol	gx_device_copy_color_params		5046046						
ANR	5046160	Symbol	MediaSize		5046046						
ANR	5046161	Symbol	target		5046046						
ANR	5046162	Symbol	MaxPatternBitmap		5046046						
ANR	5046163	Symbol	ImagingBBox		5046046						
ANR	5046164	Symbol	dev		5046046						
ANR	5046165	Symbol	HWMargins		5046046						
ANR	5046166	Symbol	PageCount		5046046						
ANR	5046167	Symbol	width		5046046						
ANR	5046168	Symbol	HWResolution		5046046						
ANR	5046169	Symbol	Margins		5046046						
ANR	5046170	Symbol	ImagingBBox_set		5046046						
ANR	5046171	Symbol	height		5046046						
ANR	5046172	Function	gx_parse_output_format	988:0:32629:35269							
ANR	5046173	FunctionDef	"gx_parse_output_format (gs_parsed_file_name_t * pfn , const char * * pfmt)"		5046172	0					
ANR	5046174	CompoundStatement		990:0:32710:35269	5046172	0					
ANR	5046175	IdentifierDeclStatement	"bool have_format = false , field ;"	991:4:32716:32747	5046172	0	True				
ANR	5046176	IdentifierDecl	have_format = false		5046172	0					
ANR	5046177	IdentifierDeclType	bool		5046172	0					
ANR	5046178	Identifier	have_format		5046172	1					
ANR	5046179	AssignmentExpression	have_format = false		5046172	2		=			
ANR	5046180	Identifier	false		5046172	0					
ANR	5046181	Identifier	false		5046172	1					
ANR	5046182	IdentifierDecl	field		5046172	1					
ANR	5046183	IdentifierDeclType	bool		5046172	0					
ANR	5046184	Identifier	field		5046172	1					
ANR	5046185	IdentifierDeclStatement	"int width [ 2 ] , int_width = sizeof ( int ) * 3 , w = 0 ;"	992:4:32753:32801	5046172	1	True				
ANR	5046186	IdentifierDecl	width [ 2 ]		5046172	0					
ANR	5046187	IdentifierDeclType	int [ 2 ]		5046172	0					
ANR	5046188	Identifier	width		5046172	1					
ANR	5046189	PrimaryExpression	2		5046172	2					
ANR	5046190	IdentifierDecl	int_width = sizeof ( int ) * 3		5046172	1					
ANR	5046191	IdentifierDeclType	int		5046172	0					
ANR	5046192	Identifier	int_width		5046172	1					
ANR	5046193	AssignmentExpression	int_width = sizeof ( int ) * 3		5046172	2		=			
ANR	5046194	Identifier	int_width		5046172	0					
ANR	5046195	MultiplicativeExpression	sizeof ( int ) * 3		5046172	1		*			
ANR	5046196	SizeofExpression	sizeof ( int )		5046172	0					
ANR	5046197	Sizeof	sizeof		5046172	0					
ANR	5046198	SizeofOperand	int		5046172	1					
ANR	5046199	PrimaryExpression	3		5046172	1					
ANR	5046200	IdentifierDecl	w = 0		5046172	2					
ANR	5046201	IdentifierDeclType	int		5046172	0					
ANR	5046202	Identifier	w		5046172	1					
ANR	5046203	AssignmentExpression	w = 0		5046172	2		=			
ANR	5046204	Identifier	w		5046172	0					
ANR	5046205	PrimaryExpression	0		5046172	1					
ANR	5046206	IdentifierDeclStatement	uint i ;	993:4:32807:32813	5046172	2	True				
ANR	5046207	IdentifierDecl	i		5046172	0					
ANR	5046208	IdentifierDeclType	uint		5046172	0					
ANR	5046209	Identifier	i		5046172	1					
ANR	5046210	ExpressionStatement	width [ 0 ] = width [ 1 ] = 0	996:4:32898:32921	5046172	3	True				
ANR	5046211	AssignmentExpression	width [ 0 ] = width [ 1 ] = 0		5046172	0		=			
ANR	5046212	ArrayIndexing	width [ 0 ]		5046172	0					
ANR	5046213	Identifier	width		5046172	0					
ANR	5046214	PrimaryExpression	0		5046172	1					
ANR	5046215	AssignmentExpression	width [ 1 ] = 0		5046172	1		=			
ANR	5046216	ArrayIndexing	width [ 1 ]		5046172	0					
ANR	5046217	Identifier	width		5046172	0					
ANR	5046218	PrimaryExpression	1		5046172	1					
ANR	5046219	PrimaryExpression	0		5046172	1					
ANR	5046220	ForStatement	for ( i = 0 ; i < pfn -> len ; ++ i )		5046172	4					
ANR	5046221	ForInit	i = 0 ;	997:9:32932:32937	5046172	0	True				
ANR	5046222	AssignmentExpression	i = 0		5046172	0		=			
ANR	5046223	Identifier	i		5046172	0					
ANR	5046224	PrimaryExpression	0		5046172	1					
ANR	5046225	Condition	i < pfn -> len	997:16:32939:32950	5046172	1	True				
ANR	5046226	RelationalExpression	i < pfn -> len		5046172	0		<			
ANR	5046227	Identifier	i		5046172	0					
ANR	5046228	PtrMemberAccess	pfn -> len		5046172	1					
ANR	5046229	Identifier	pfn		5046172	0					
ANR	5046230	Identifier	len		5046172	1					
ANR	5046231	UnaryExpression	++ i	997:30:32953:32955	5046172	2	True				
ANR	5046232	IncDec	++		5046172	0					
ANR	5046233	Identifier	i		5046172	1					
ANR	5046234	IfStatement	if ( pfn -> fname [ i ] == '%' )		5046172	3					
ANR	5046235	Condition	pfn -> fname [ i ] == '%'	998:12:32970:32989	5046172	0	True				
ANR	5046236	EqualityExpression	pfn -> fname [ i ] == '%'		5046172	0		==			
ANR	5046237	ArrayIndexing	pfn -> fname [ i ]		5046172	0					
ANR	5046238	PtrMemberAccess	pfn -> fname		5046172	0					
ANR	5046239	Identifier	pfn		5046172	0					
ANR	5046240	Identifier	fname		5046172	1					
ANR	5046241	Identifier	i		5046172	1					
ANR	5046242	PrimaryExpression	'%'		5046172	1					
ANR	5046243	CompoundStatement		9:34:281:281	5046172	1					
ANR	5046244	IfStatement	if ( i + 1 < pfn -> len && pfn -> fname [ i + 1 ] == '%' )		5046172	0					
ANR	5046245	Condition	i + 1 < pfn -> len && pfn -> fname [ i + 1 ] == '%'	999:16:33010:33053	5046172	0	True				
ANR	5046246	AndExpression	i + 1 < pfn -> len && pfn -> fname [ i + 1 ] == '%'		5046172	0		&&			
ANR	5046247	RelationalExpression	i + 1 < pfn -> len		5046172	0		<			
ANR	5046248	AdditiveExpression	i + 1		5046172	0		+			
ANR	5046249	Identifier	i		5046172	0					
ANR	5046250	PrimaryExpression	1		5046172	1					
ANR	5046251	PtrMemberAccess	pfn -> len		5046172	1					
ANR	5046252	Identifier	pfn		5046172	0					
ANR	5046253	Identifier	len		5046172	1					
ANR	5046254	EqualityExpression	pfn -> fname [ i + 1 ] == '%'		5046172	1		==			
ANR	5046255	ArrayIndexing	pfn -> fname [ i + 1 ]		5046172	0					
ANR	5046256	PtrMemberAccess	pfn -> fname		5046172	0					
ANR	5046257	Identifier	pfn		5046172	0					
ANR	5046258	Identifier	fname		5046172	1					
ANR	5046259	AdditiveExpression	i + 1		5046172	1		+			
ANR	5046260	Identifier	i		5046172	0					
ANR	5046261	PrimaryExpression	1		5046172	1					
ANR	5046262	PrimaryExpression	'%'		5046172	1					
ANR	5046263	CompoundStatement		10:62:345:345	5046172	1					
ANR	5046264	ExpressionStatement	i ++	1000:16:33074:33077	5046172	0	True				
ANR	5046265	PostIncDecOperationExpression	i ++		5046172	0					
ANR	5046266	Identifier	i		5046172	0					
ANR	5046267	IncDec	++		5046172	1					
ANR	5046268	ContinueStatement	continue ;	1001:16:33095:33103	5046172	1	True				
ANR	5046269	IfStatement	if ( have_format )		5046172	1					
ANR	5046270	Condition	have_format	1003:16:33135:33145	5046172	0	True				
ANR	5046271	Identifier	have_format		5046172	0					
ANR	5046272	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1004:16:33186:33226	5046172	1	True				
ANR	5046273	CallExpression	return_error ( gs_error_undefinedfilename )		5046172	0					
ANR	5046274	Callee	return_error		5046172	0					
ANR	5046275	Identifier	return_error		5046172	0					
ANR	5046276	ArgumentList	gs_error_undefinedfilename		5046172	1					
ANR	5046277	Argument	gs_error_undefinedfilename		5046172	0					
ANR	5046278	Identifier	gs_error_undefinedfilename		5046172	0					
ANR	5046279	ExpressionStatement	have_format = true	1005:12:33240:33258	5046172	2	True				
ANR	5046280	AssignmentExpression	have_format = true		5046172	0		=			
ANR	5046281	Identifier	have_format		5046172	0					
ANR	5046282	Identifier	true		5046172	1					
ANR	5046283	ExpressionStatement	field = - 1	1006:12:33272:33282	5046172	3	True				
ANR	5046284	AssignmentExpression	field = - 1		5046172	0		=			
ANR	5046285	Identifier	field		5046172	0					
ANR	5046286	UnaryOperationExpression	- 1		5046172	1					
ANR	5046287	UnaryOperator	-		5046172	0					
ANR	5046288	PrimaryExpression	1		5046172	1					
ANR	5046289	ForStatement	for ( ; ; )		5046172	4					
ANR	5046290	IfStatement	if ( ++ i == pfn -> len )		5046172	0					
ANR	5046291	Condition	++ i == pfn -> len	1008:20:33398:33412	5046172	0	True				
ANR	5046292	EqualityExpression	++ i == pfn -> len		5046172	0		==			
ANR	5046293	UnaryExpression	++ i		5046172	0					
ANR	5046294	IncDec	++		5046172	0					
ANR	5046295	Identifier	i		5046172	1					
ANR	5046296	PtrMemberAccess	pfn -> len		5046172	1					
ANR	5046297	Identifier	pfn		5046172	0					
ANR	5046298	Identifier	len		5046172	1					
ANR	5046299	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1009:20:33435:33475	5046172	1	True				
ANR	5046300	CallExpression	return_error ( gs_error_undefinedfilename )		5046172	0					
ANR	5046301	Callee	return_error		5046172	0					
ANR	5046302	Identifier	return_error		5046172	0					
ANR	5046303	ArgumentList	gs_error_undefinedfilename		5046172	1					
ANR	5046304	Argument	gs_error_undefinedfilename		5046172	0					
ANR	5046305	Identifier	gs_error_undefinedfilename		5046172	0					
ANR	5046306	ElseStatement	else		5046172	0					
ANR	5046307	CompoundStatement		21:21:787:787	5046172	0					
ANR	5046308	SwitchStatement	switch ( field )		5046172	0					
ANR	5046309	Condition	field	1011:28:33528:33532	5046172	0	True				
ANR	5046310	Identifier	field		5046172	0					
ANR	5046311	CompoundStatement		22:35:824:824	5046172	1					
ANR	5046312	Statement	case	1012:24:33561:33564	5046172	0	True				
ANR	5046313	Statement	-	1012:29:33566:33566	5046172	1	True				
ANR	5046314	Label	1 :	1012:30:33567:33568	5046172	2	True				
ANR	5046315	IfStatement	"if ( strchr ( "" #+-"" , pfn -> fname [ i ] ) )"		5046172	3					
ANR	5046316	Condition	"strchr ( "" #+-"" , pfn -> fname [ i ] )"	1013:32:33614:33642	5046172	0	True				
ANR	5046317	CallExpression	"strchr ( "" #+-"" , pfn -> fname [ i ] )"		5046172	0					
ANR	5046318	Callee	strchr		5046172	0					
ANR	5046319	Identifier	strchr		5046172	0					
ANR	5046320	ArgumentList	""" #+-"""		5046172	1					
ANR	5046321	Argument	""" #+-"""		5046172	0					
ANR	5046322	PrimaryExpression	""" #+-"""		5046172	0					
ANR	5046323	Argument	pfn -> fname [ i ]		5046172	1					
ANR	5046324	ArrayIndexing	pfn -> fname [ i ]		5046172	0					
ANR	5046325	PtrMemberAccess	pfn -> fname		5046172	0					
ANR	5046326	Identifier	pfn		5046172	0					
ANR	5046327	Identifier	fname		5046172	1					
ANR	5046328	Identifier	i		5046172	1					
ANR	5046329	ContinueStatement	continue ;	1014:32:33677:33685	5046172	1	True				
ANR	5046330	ElseStatement	else		5046172	0					
ANR	5046331	ExpressionStatement	field ++	1016:32:33752:33759	5046172	0	True				
ANR	5046332	PostIncDecOperationExpression	field ++		5046172	0					
ANR	5046333	Identifier	field		5046172	0					
ANR	5046334	IncDec	++		5046172	1					
ANR	5046335	Label	default :	1018:24:33833:33840	5046172	4	True				
ANR	5046336	Identifier	default		5046172	0					
ANR	5046337	IfStatement	"if ( strchr ( ""0123456789"" , pfn -> fname [ i ] ) )"		5046172	5					
ANR	5046338	Condition	"strchr ( ""0123456789"" , pfn -> fname [ i ] )"	1019:32:33924:33958	5046172	0	True				
ANR	5046339	CallExpression	"strchr ( ""0123456789"" , pfn -> fname [ i ] )"		5046172	0					
ANR	5046340	Callee	strchr		5046172	0					
ANR	5046341	Identifier	strchr		5046172	0					
ANR	5046342	ArgumentList	"""0123456789"""		5046172	1					
ANR	5046343	Argument	"""0123456789"""		5046172	0					
ANR	5046344	PrimaryExpression	"""0123456789"""		5046172	0					
ANR	5046345	Argument	pfn -> fname [ i ]		5046172	1					
ANR	5046346	ArrayIndexing	pfn -> fname [ i ]		5046172	0					
ANR	5046347	PtrMemberAccess	pfn -> fname		5046172	0					
ANR	5046348	Identifier	pfn		5046172	0					
ANR	5046349	Identifier	fname		5046172	1					
ANR	5046350	Identifier	i		5046172	1					
ANR	5046351	CompoundStatement		30:69:1250:1250	5046172	1					
ANR	5046352	ExpressionStatement	width [ field ] = width [ field ] * 10 + pfn -> fname [ i ] - '0'	1020:32:33995:34049	5046172	0	True				
ANR	5046353	AssignmentExpression	width [ field ] = width [ field ] * 10 + pfn -> fname [ i ] - '0'		5046172	0		=			
ANR	5046354	ArrayIndexing	width [ field ]		5046172	0					
ANR	5046355	Identifier	width		5046172	0					
ANR	5046356	Identifier	field		5046172	1					
ANR	5046357	AdditiveExpression	width [ field ] * 10 + pfn -> fname [ i ] - '0'		5046172	1		+			
ANR	5046358	MultiplicativeExpression	width [ field ] * 10		5046172	0		*			
ANR	5046359	ArrayIndexing	width [ field ]		5046172	0					
ANR	5046360	Identifier	width		5046172	0					
ANR	5046361	Identifier	field		5046172	1					
ANR	5046362	PrimaryExpression	10		5046172	1					
ANR	5046363	AdditiveExpression	pfn -> fname [ i ] - '0'		5046172	1		-			
ANR	5046364	ArrayIndexing	pfn -> fname [ i ]		5046172	0					
ANR	5046365	PtrMemberAccess	pfn -> fname		5046172	0					
ANR	5046366	Identifier	pfn		5046172	0					
ANR	5046367	Identifier	fname		5046172	1					
ANR	5046368	Identifier	i		5046172	1					
ANR	5046369	PrimaryExpression	'0'		5046172	1					
ANR	5046370	ContinueStatement	continue ;	1021:32:34083:34091	5046172	1	True				
ANR	5046371	ElseStatement	else		5046172	0					
ANR	5046372	IfStatement	if ( 0 == field && '.' == pfn -> fname [ i ] )		5046172	0					
ANR	5046373	Condition	0 == field && '.' == pfn -> fname [ i ]	1022:39:34132:34165	5046172	0	True				
ANR	5046374	AndExpression	0 == field && '.' == pfn -> fname [ i ]		5046172	0		&&			
ANR	5046375	EqualityExpression	0 == field		5046172	0		==			
ANR	5046376	PrimaryExpression	0		5046172	0					
ANR	5046377	Identifier	field		5046172	1					
ANR	5046378	EqualityExpression	'.' == pfn -> fname [ i ]		5046172	1		==			
ANR	5046379	PrimaryExpression	'.'		5046172	0					
ANR	5046380	ArrayIndexing	pfn -> fname [ i ]		5046172	1					
ANR	5046381	PtrMemberAccess	pfn -> fname		5046172	0					
ANR	5046382	Identifier	pfn		5046172	0					
ANR	5046383	Identifier	fname		5046172	1					
ANR	5046384	Identifier	i		5046172	1					
ANR	5046385	CompoundStatement		33:75:1457:1457	5046172	1					
ANR	5046386	ExpressionStatement	field ++	1023:32:34202:34209	5046172	0	True				
ANR	5046387	PostIncDecOperationExpression	field ++		5046172	0					
ANR	5046388	Identifier	field		5046172	0					
ANR	5046389	IncDec	++		5046172	1					
ANR	5046390	ContinueStatement	continue ;	1024:32:34243:34251	5046172	1	True				
ANR	5046391	ElseStatement	else		5046172	0					
ANR	5046392	ExpressionStatement	field = 2	1026:32:34320:34329	5046172	0	True				
ANR	5046393	AssignmentExpression	field = 2		5046172	0		=			
ANR	5046394	Identifier	field		5046172	0					
ANR	5046395	PrimaryExpression	2		5046172	1					
ANR	5046396	Label	case 2 :	1028:24:34403:34409	5046172	6	True				
ANR	5046397	ExpressionStatement	field ++	1029:28:34462:34469	5046172	7	True				
ANR	5046398	PostIncDecOperationExpression	field ++		5046172	0					
ANR	5046399	Identifier	field		5046172	0					
ANR	5046400	IncDec	++		5046172	1					
ANR	5046401	IfStatement	if ( 'l' == pfn -> fname [ i ] )		5046172	8					
ANR	5046402	Condition	'l' == pfn -> fname [ i ]	1030:32:34503:34522	5046172	0	True				
ANR	5046403	EqualityExpression	'l' == pfn -> fname [ i ]		5046172	0		==			
ANR	5046404	PrimaryExpression	'l'		5046172	0					
ANR	5046405	ArrayIndexing	pfn -> fname [ i ]		5046172	1					
ANR	5046406	PtrMemberAccess	pfn -> fname		5046172	0					
ANR	5046407	Identifier	pfn		5046172	0					
ANR	5046408	Identifier	fname		5046172	1					
ANR	5046409	Identifier	i		5046172	1					
ANR	5046410	CompoundStatement		41:54:1814:1814	5046172	1					
ANR	5046411	ExpressionStatement	int_width = sizeof ( long ) * 3	1031:32:34559:34587	5046172	0	True				
ANR	5046412	AssignmentExpression	int_width = sizeof ( long ) * 3		5046172	0		=			
ANR	5046413	Identifier	int_width		5046172	0					
ANR	5046414	MultiplicativeExpression	sizeof ( long ) * 3		5046172	1		*			
ANR	5046415	SizeofExpression	sizeof ( long )		5046172	0					
ANR	5046416	Sizeof	sizeof		5046172	0					
ANR	5046417	SizeofOperand	long		5046172	1					
ANR	5046418	PrimaryExpression	3		5046172	1					
ANR	5046419	ContinueStatement	continue ;	1032:32:34621:34629	5046172	1	True				
ANR	5046420	Label	case 3 :	1035:24:34733:34739	5046172	9	True				
ANR	5046421	IfStatement	"if ( strchr ( ""diuoxX"" , pfn -> fname [ i ] ) )"		5046172	10					
ANR	5046422	Condition	"strchr ( ""diuoxX"" , pfn -> fname [ i ] )"	1036:32:34784:34814	5046172	0	True				
ANR	5046423	CallExpression	"strchr ( ""diuoxX"" , pfn -> fname [ i ] )"		5046172	0					
ANR	5046424	Callee	strchr		5046172	0					
ANR	5046425	Identifier	strchr		5046172	0					
ANR	5046426	ArgumentList	"""diuoxX"""		5046172	1					
ANR	5046427	Argument	"""diuoxX"""		5046172	0					
ANR	5046428	PrimaryExpression	"""diuoxX"""		5046172	0					
ANR	5046429	Argument	pfn -> fname [ i ]		5046172	1					
ANR	5046430	ArrayIndexing	pfn -> fname [ i ]		5046172	0					
ANR	5046431	PtrMemberAccess	pfn -> fname		5046172	0					
ANR	5046432	Identifier	pfn		5046172	0					
ANR	5046433	Identifier	fname		5046172	1					
ANR	5046434	Identifier	i		5046172	1					
ANR	5046435	CompoundStatement		47:65:2106:2106	5046172	1					
ANR	5046436	ExpressionStatement	* pfmt = & pfn -> fname [ i ]	1037:32:34851:34873	5046172	0	True				
ANR	5046437	AssignmentExpression	* pfmt = & pfn -> fname [ i ]		5046172	0		=			
ANR	5046438	UnaryOperationExpression	* pfmt		5046172	0					
ANR	5046439	UnaryOperator	*		5046172	0					
ANR	5046440	Identifier	pfmt		5046172	1					
ANR	5046441	UnaryOperationExpression	& pfn -> fname [ i ]		5046172	1					
ANR	5046442	UnaryOperator	&		5046172	0					
ANR	5046443	ArrayIndexing	pfn -> fname [ i ]		5046172	1					
ANR	5046444	PtrMemberAccess	pfn -> fname		5046172	0					
ANR	5046445	Identifier	pfn		5046172	0					
ANR	5046446	Identifier	fname		5046172	1					
ANR	5046447	Identifier	i		5046172	1					
ANR	5046448	BreakStatement	break ;	1038:32:34907:34912	5046172	1	True				
ANR	5046449	ElseStatement	else		5046172	0					
ANR	5046450	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1040:32:34981:35021	5046172	0	True				
ANR	5046451	CallExpression	return_error ( gs_error_undefinedfilename )		5046172	0					
ANR	5046452	Callee	return_error		5046172	0					
ANR	5046453	Identifier	return_error		5046172	0					
ANR	5046454	ArgumentList	gs_error_undefinedfilename		5046172	1					
ANR	5046455	Argument	gs_error_undefinedfilename		5046172	0					
ANR	5046456	Identifier	gs_error_undefinedfilename		5046172	0					
ANR	5046457	BreakStatement	break ;	1042:20:35065:35070	5046172	1	True				
ANR	5046458	IfStatement	if ( have_format )		5046172	5					
ANR	5046459	Condition	have_format	1045:8:35108:35118	5046172	0	True				
ANR	5046460	Identifier	have_format		5046172	0					
ANR	5046461	CompoundStatement		56:21:2410:2410	5046172	1					
ANR	5046462	ExpressionStatement	"w = max ( width [ 0 ] , width [ 1 ] )"	1047:8:35185:35212	5046172	0	True				
ANR	5046463	AssignmentExpression	"w = max ( width [ 0 ] , width [ 1 ] )"		5046172	0		=			
ANR	5046464	Identifier	w		5046172	0					
ANR	5046465	CallExpression	"max ( width [ 0 ] , width [ 1 ] )"		5046172	1					
ANR	5046466	Callee	max		5046172	0					
ANR	5046467	Identifier	max		5046172	0					
ANR	5046468	ArgumentList	width [ 0 ]		5046172	1					
ANR	5046469	Argument	width [ 0 ]		5046172	0					
ANR	5046470	ArrayIndexing	width [ 0 ]		5046172	0					
ANR	5046471	Identifier	width		5046172	0					
ANR	5046472	PrimaryExpression	0		5046172	1					
ANR	5046473	Argument	width [ 1 ]		5046172	1					
ANR	5046474	ArrayIndexing	width [ 1 ]		5046172	0					
ANR	5046475	Identifier	width		5046172	0					
ANR	5046476	PrimaryExpression	1		5046172	1					
ANR	5046477	ExpressionStatement	"w = max ( w , int_width ) + 5"	1048:8:35222:35247	5046172	1	True				
ANR	5046478	AssignmentExpression	"w = max ( w , int_width ) + 5"		5046172	0		=			
ANR	5046479	Identifier	w		5046172	0					
ANR	5046480	AdditiveExpression	"max ( w , int_width ) + 5"		5046172	1		+			
ANR	5046481	CallExpression	"max ( w , int_width )"		5046172	0					
ANR	5046482	Callee	max		5046172	0					
ANR	5046483	Identifier	max		5046172	0					
ANR	5046484	ArgumentList	w		5046172	1					
ANR	5046485	Argument	w		5046172	0					
ANR	5046486	Identifier	w		5046172	0					
ANR	5046487	Argument	int_width		5046172	1					
ANR	5046488	Identifier	int_width		5046172	0					
ANR	5046489	PrimaryExpression	5		5046172	1					
ANR	5046490	ReturnStatement	return w ;	1050:4:35259:35267	5046172	6	True				
ANR	5046491	Identifier	w		5046172	0					
ANR	5046492	ReturnType	static int		5046172	1					
ANR	5046493	Identifier	gx_parse_output_format		5046172	2					
ANR	5046494	ParameterList	"gs_parsed_file_name_t * pfn , const char * * pfmt"		5046172	3					
ANR	5046495	Parameter	gs_parsed_file_name_t * pfn	989:23:32663:32688	5046172	0	True				
ANR	5046496	ParameterType	gs_parsed_file_name_t *		5046172	0					
ANR	5046497	Identifier	pfn		5046172	1					
ANR	5046498	Parameter	const char * * pfmt	989:51:32691:32707	5046172	1	True				
ANR	5046499	ParameterType	const char * *		5046172	0					
ANR	5046500	Identifier	pfmt		5046172	1					
ANR	5046501	CFGEntryNode	ENTRY		5046172		True				
ANR	5046502	CFGExitNode	EXIT		5046172		True				
ANR	5046503	InfiniteForNode	true		5046172		True				
ANR	5046504	Symbol	have_format		5046172						
ANR	5046505	Symbol	* pfn		5046172						
ANR	5046506	Symbol	max		5046172						
ANR	5046507	Symbol	false		5046172						
ANR	5046508	Symbol	pfmt		5046172						
ANR	5046509	Symbol	i		5046172						
ANR	5046510	Symbol	strchr		5046172						
ANR	5046511	Symbol	gs_error_undefinedfilename		5046172						
ANR	5046512	Symbol	* field		5046172						
ANR	5046513	Symbol	* * pfn		5046172						
ANR	5046514	Symbol	* width		5046172						
ANR	5046515	Symbol	* pfmt		5046172						
ANR	5046516	Symbol	* i		5046172						
ANR	5046517	Symbol	field		5046172						
ANR	5046518	Symbol	int_width		5046172						
ANR	5046519	Symbol	w		5046172						
ANR	5046520	Symbol	width		5046172						
ANR	5046521	Symbol	true		5046172						
ANR	5046522	Symbol	pfn		5046172						
ANR	5046523	Symbol	* pfn -> fname		5046172						
ANR	5046524	Symbol	pfn -> len		5046172						
ANR	5046525	Symbol	pfn -> fname		5046172						
ANR	5046526	Function	gx_parse_output_file_name	1060:0:35592:37235							
ANR	5046527	FunctionDef	"gx_parse_output_file_name (gs_parsed_file_name_t * pfn , const char * * pfmt , const char * fname , uint fnlen , gs_memory_t * memory)"		5046526	0					
ANR	5046528	CompoundStatement		1063:0:35747:37235	5046526	0					
ANR	5046529	IdentifierDeclStatement	int code ;	1064:4:35753:35761	5046526	0	True				
ANR	5046530	IdentifierDecl	code		5046526	0					
ANR	5046531	IdentifierDeclType	int		5046526	0					
ANR	5046532	Identifier	code		5046526	1					
ANR	5046533	ExpressionStatement	* pfmt = 0	1066:4:35768:35777	5046526	1	True				
ANR	5046534	AssignmentExpression	* pfmt = 0		5046526	0		=			
ANR	5046535	UnaryOperationExpression	* pfmt		5046526	0					
ANR	5046536	UnaryOperator	*		5046526	0					
ANR	5046537	Identifier	pfmt		5046526	1					
ANR	5046538	PrimaryExpression	0		5046526	1					
ANR	5046539	ExpressionStatement	pfn -> memory = 0	1067:4:35783:35798	5046526	2	True				
ANR	5046540	AssignmentExpression	pfn -> memory = 0		5046526	0		=			
ANR	5046541	PtrMemberAccess	pfn -> memory		5046526	0					
ANR	5046542	Identifier	pfn		5046526	0					
ANR	5046543	Identifier	memory		5046526	1					
ANR	5046544	PrimaryExpression	0		5046526	1					
ANR	5046545	ExpressionStatement	pfn -> iodev = NULL	1068:4:35804:35821	5046526	3	True				
ANR	5046546	AssignmentExpression	pfn -> iodev = NULL		5046526	0		=			
ANR	5046547	PtrMemberAccess	pfn -> iodev		5046526	0					
ANR	5046548	Identifier	pfn		5046526	0					
ANR	5046549	Identifier	iodev		5046526	1					
ANR	5046550	Identifier	NULL		5046526	1					
ANR	5046551	ExpressionStatement	pfn -> fname = NULL	1069:4:35827:35844	5046526	4	True				
ANR	5046552	AssignmentExpression	pfn -> fname = NULL		5046526	0		=			
ANR	5046553	PtrMemberAccess	pfn -> fname		5046526	0					
ANR	5046554	Identifier	pfn		5046526	0					
ANR	5046555	Identifier	fname		5046526	1					
ANR	5046556	Identifier	NULL		5046526	1					
ANR	5046557	ExpressionStatement	pfn -> len = 0	1070:4:35885:35897	5046526	5	True				
ANR	5046558	AssignmentExpression	pfn -> len = 0		5046526	0		=			
ANR	5046559	PtrMemberAccess	pfn -> len		5046526	0					
ANR	5046560	Identifier	pfn		5046526	0					
ANR	5046561	Identifier	len		5046526	1					
ANR	5046562	PrimaryExpression	0		5046526	1					
ANR	5046563	IfStatement	if ( fnlen == 0 )		5046526	6					
ANR	5046564	Condition	fnlen == 0	1071:8:35907:35916	5046526	0	True				
ANR	5046565	EqualityExpression	fnlen == 0		5046526	0		==			
ANR	5046566	Identifier	fnlen		5046526	0					
ANR	5046567	PrimaryExpression	0		5046526	1					
ANR	5046568	ReturnStatement	return 0 ;	1072:8:35952:35960	5046526	1	True				
ANR	5046569	PrimaryExpression	0		5046526	0					
ANR	5046570	ExpressionStatement	"code = gs_parse_file_name ( pfn , fname , fnlen , memory )"	1077:4:36112:36164	5046526	7	True				
ANR	5046571	AssignmentExpression	"code = gs_parse_file_name ( pfn , fname , fnlen , memory )"		5046526	0		=			
ANR	5046572	Identifier	code		5046526	0					
ANR	5046573	CallExpression	"gs_parse_file_name ( pfn , fname , fnlen , memory )"		5046526	1					
ANR	5046574	Callee	gs_parse_file_name		5046526	0					
ANR	5046575	Identifier	gs_parse_file_name		5046526	0					
ANR	5046576	ArgumentList	pfn		5046526	1					
ANR	5046577	Argument	pfn		5046526	0					
ANR	5046578	Identifier	pfn		5046526	0					
ANR	5046579	Argument	fname		5046526	1					
ANR	5046580	Identifier	fname		5046526	0					
ANR	5046581	Argument	fnlen		5046526	2					
ANR	5046582	Identifier	fnlen		5046526	0					
ANR	5046583	Argument	memory		5046526	3					
ANR	5046584	Identifier	memory		5046526	0					
ANR	5046585	IfStatement	if ( code < 0 )		5046526	8					
ANR	5046586	Condition	code < 0	1078:8:36174:36181	5046526	0	True				
ANR	5046587	RelationalExpression	code < 0		5046526	0		<			
ANR	5046588	Identifier	code		5046526	0					
ANR	5046589	PrimaryExpression	0		5046526	1					
ANR	5046590	CompoundStatement		16:18:436:436	5046526	1					
ANR	5046591	IfStatement	if ( fname [ 0 ] == '%' )		5046526	0					
ANR	5046592	Condition	fname [ 0 ] == '%'	1079:12:36198:36212	5046526	0	True				
ANR	5046593	EqualityExpression	fname [ 0 ] == '%'		5046526	0		==			
ANR	5046594	ArrayIndexing	fname [ 0 ]		5046526	0					
ANR	5046595	Identifier	fname		5046526	0					
ANR	5046596	PrimaryExpression	0		5046526	1					
ANR	5046597	PrimaryExpression	'%'		5046526	1					
ANR	5046598	CompoundStatement		17:29:467:467	5046526	1					
ANR	5046599	ExpressionStatement	pfn -> len = fnlen	1081:12:36308:36324	5046526	0	True				
ANR	5046600	AssignmentExpression	pfn -> len = fnlen		5046526	0		=			
ANR	5046601	PtrMemberAccess	pfn -> len		5046526	0					
ANR	5046602	Identifier	pfn		5046526	0					
ANR	5046603	Identifier	len		5046526	1					
ANR	5046604	Identifier	fnlen		5046526	1					
ANR	5046605	ExpressionStatement	pfn -> fname = fname	1082:12:36338:36356	5046526	1	True				
ANR	5046606	AssignmentExpression	pfn -> fname = fname		5046526	0		=			
ANR	5046607	PtrMemberAccess	pfn -> fname		5046526	0					
ANR	5046608	Identifier	pfn		5046526	0					
ANR	5046609	Identifier	fname		5046526	1					
ANR	5046610	Identifier	fname		5046526	1					
ANR	5046611	ExpressionStatement	"code = gx_parse_output_format ( pfn , pfmt )"	1083:12:36370:36410	5046526	2	True				
ANR	5046612	AssignmentExpression	"code = gx_parse_output_format ( pfn , pfmt )"		5046526	0		=			
ANR	5046613	Identifier	code		5046526	0					
ANR	5046614	CallExpression	"gx_parse_output_format ( pfn , pfmt )"		5046526	1					
ANR	5046615	Callee	gx_parse_output_format		5046526	0					
ANR	5046616	Identifier	gx_parse_output_format		5046526	0					
ANR	5046617	ArgumentList	pfn		5046526	1					
ANR	5046618	Argument	pfn		5046526	0					
ANR	5046619	Identifier	pfn		5046526	0					
ANR	5046620	Argument	pfmt		5046526	1					
ANR	5046621	Identifier	pfmt		5046526	0					
ANR	5046622	IfStatement	if ( code < 0 )		5046526	1					
ANR	5046623	Condition	code < 0	1085:12:36434:36441	5046526	0	True				
ANR	5046624	RelationalExpression	code < 0		5046526	0		<			
ANR	5046625	Identifier	code		5046526	0					
ANR	5046626	PrimaryExpression	0		5046526	1					
ANR	5046627	ReturnStatement	return code ;	1086:12:36456:36467	5046526	1	True				
ANR	5046628	Identifier	code		5046526	0					
ANR	5046629	IfStatement	if ( ! pfn -> iodev )		5046526	9					
ANR	5046630	Condition	! pfn -> iodev	1088:8:36483:36493	5046526	0	True				
ANR	5046631	UnaryOperationExpression	! pfn -> iodev		5046526	0					
ANR	5046632	UnaryOperator	!		5046526	0					
ANR	5046633	PtrMemberAccess	pfn -> iodev		5046526	1					
ANR	5046634	Identifier	pfn		5046526	0					
ANR	5046635	Identifier	iodev		5046526	1					
ANR	5046636	CompoundStatement		26:21:748:748	5046526	1					
ANR	5046637	IfStatement	if ( ( pfn -> len == 1 ) && ( pfn -> fname [ 0 ] == '-' ) )		5046526	0					
ANR	5046638	Condition	( pfn -> len == 1 ) && ( pfn -> fname [ 0 ] == '-' )	1089:13:36511:36551	5046526	0	True				
ANR	5046639	AndExpression	( pfn -> len == 1 ) && ( pfn -> fname [ 0 ] == '-' )		5046526	0		&&			
ANR	5046640	EqualityExpression	pfn -> len == 1		5046526	0		==			
ANR	5046641	PtrMemberAccess	pfn -> len		5046526	0					
ANR	5046642	Identifier	pfn		5046526	0					
ANR	5046643	Identifier	len		5046526	1					
ANR	5046644	PrimaryExpression	1		5046526	1					
ANR	5046645	EqualityExpression	pfn -> fname [ 0 ] == '-'		5046526	1		==			
ANR	5046646	ArrayIndexing	pfn -> fname [ 0 ]		5046526	0					
ANR	5046647	PtrMemberAccess	pfn -> fname		5046526	0					
ANR	5046648	Identifier	pfn		5046526	0					
ANR	5046649	Identifier	fname		5046526	1					
ANR	5046650	PrimaryExpression	0		5046526	1					
ANR	5046651	PrimaryExpression	'-'		5046526	1					
ANR	5046652	CompoundStatement		27:57:807:807	5046526	1					
ANR	5046653	ExpressionStatement	"pfn -> iodev = gs_findiodevice ( memory , ( const byte * ) ""%stdout"" , 7 )"	1090:12:36569:36633	5046526	0	True				
ANR	5046654	AssignmentExpression	"pfn -> iodev = gs_findiodevice ( memory , ( const byte * ) ""%stdout"" , 7 )"		5046526	0		=			
ANR	5046655	PtrMemberAccess	pfn -> iodev		5046526	0					
ANR	5046656	Identifier	pfn		5046526	0					
ANR	5046657	Identifier	iodev		5046526	1					
ANR	5046658	CallExpression	"gs_findiodevice ( memory , ( const byte * ) ""%stdout"" , 7 )"		5046526	1					
ANR	5046659	Callee	gs_findiodevice		5046526	0					
ANR	5046660	Identifier	gs_findiodevice		5046526	0					
ANR	5046661	ArgumentList	memory		5046526	1					
ANR	5046662	Argument	memory		5046526	0					
ANR	5046663	Identifier	memory		5046526	0					
ANR	5046664	Argument	"( const byte * ) ""%stdout"""		5046526	1					
ANR	5046665	CastExpression	"( const byte * ) ""%stdout"""		5046526	0					
ANR	5046666	CastTarget	const byte *		5046526	0					
ANR	5046667	PrimaryExpression	"""%stdout"""		5046526	1					
ANR	5046668	Argument	7		5046526	2					
ANR	5046669	PrimaryExpression	7		5046526	0					
ANR	5046670	ExpressionStatement	pfn -> fname = NULL	1091:12:36647:36664	5046526	1	True				
ANR	5046671	AssignmentExpression	pfn -> fname = NULL		5046526	0		=			
ANR	5046672	PtrMemberAccess	pfn -> fname		5046526	0					
ANR	5046673	Identifier	pfn		5046526	0					
ANR	5046674	Identifier	fname		5046526	1					
ANR	5046675	Identifier	NULL		5046526	1					
ANR	5046676	ElseStatement	else		5046526	0					
ANR	5046677	IfStatement	if ( pfn -> fname [ 0 ] == '|' )		5046526	0					
ANR	5046678	Condition	pfn -> fname [ 0 ] == '|'	1092:19:36685:36704	5046526	0	True				
ANR	5046679	EqualityExpression	pfn -> fname [ 0 ] == '|'		5046526	0		==			
ANR	5046680	ArrayIndexing	pfn -> fname [ 0 ]		5046526	0					
ANR	5046681	PtrMemberAccess	pfn -> fname		5046526	0					
ANR	5046682	Identifier	pfn		5046526	0					
ANR	5046683	Identifier	fname		5046526	1					
ANR	5046684	PrimaryExpression	0		5046526	1					
ANR	5046685	PrimaryExpression	'|'		5046526	1					
ANR	5046686	CompoundStatement		30:41:959:959	5046526	1					
ANR	5046687	ExpressionStatement	"pfn -> iodev = gs_findiodevice ( memory , ( const byte * ) ""%pipe"" , 5 )"	1093:12:36721:36783	5046526	0	True				
ANR	5046688	AssignmentExpression	"pfn -> iodev = gs_findiodevice ( memory , ( const byte * ) ""%pipe"" , 5 )"		5046526	0		=			
ANR	5046689	PtrMemberAccess	pfn -> iodev		5046526	0					
ANR	5046690	Identifier	pfn		5046526	0					
ANR	5046691	Identifier	iodev		5046526	1					
ANR	5046692	CallExpression	"gs_findiodevice ( memory , ( const byte * ) ""%pipe"" , 5 )"		5046526	1					
ANR	5046693	Callee	gs_findiodevice		5046526	0					
ANR	5046694	Identifier	gs_findiodevice		5046526	0					
ANR	5046695	ArgumentList	memory		5046526	1					
ANR	5046696	Argument	memory		5046526	0					
ANR	5046697	Identifier	memory		5046526	0					
ANR	5046698	Argument	"( const byte * ) ""%pipe"""		5046526	1					
ANR	5046699	CastExpression	"( const byte * ) ""%pipe"""		5046526	0					
ANR	5046700	CastTarget	const byte *		5046526	0					
ANR	5046701	PrimaryExpression	"""%pipe"""		5046526	1					
ANR	5046702	Argument	5		5046526	2					
ANR	5046703	PrimaryExpression	5		5046526	0					
ANR	5046704	ExpressionStatement	"pfn -> fname ++ , pfn -> len --"	1094:12:36797:36821	5046526	1	True				
ANR	5046705	Expression	"pfn -> fname ++ , pfn -> len --"		5046526	0					
ANR	5046706	PostIncDecOperationExpression	pfn -> fname ++		5046526	0					
ANR	5046707	PtrMemberAccess	pfn -> fname		5046526	0					
ANR	5046708	Identifier	pfn		5046526	0					
ANR	5046709	Identifier	fname		5046526	1					
ANR	5046710	IncDec	++		5046526	1					
ANR	5046711	PostIncDecOperationExpression	pfn -> len --		5046526	1					
ANR	5046712	PtrMemberAccess	pfn -> len		5046526	0					
ANR	5046713	Identifier	pfn		5046526	0					
ANR	5046714	Identifier	len		5046526	1					
ANR	5046715	IncDec	--		5046526	1					
ANR	5046716	ElseStatement	else		5046526	0					
ANR	5046717	ExpressionStatement	pfn -> iodev = iodev_default ( memory )	1096:12:36850:36884	5046526	0	True				
ANR	5046718	AssignmentExpression	pfn -> iodev = iodev_default ( memory )		5046526	0		=			
ANR	5046719	PtrMemberAccess	pfn -> iodev		5046526	0					
ANR	5046720	Identifier	pfn		5046526	0					
ANR	5046721	Identifier	iodev		5046526	1					
ANR	5046722	CallExpression	iodev_default ( memory )		5046526	1					
ANR	5046723	Callee	iodev_default		5046526	0					
ANR	5046724	Identifier	iodev_default		5046526	0					
ANR	5046725	ArgumentList	memory		5046526	1					
ANR	5046726	Argument	memory		5046526	0					
ANR	5046727	Identifier	memory		5046526	0					
ANR	5046728	IfStatement	if ( ! pfn -> iodev )		5046526	1					
ANR	5046729	Condition	! pfn -> iodev	1097:12:36898:36908	5046526	0	True				
ANR	5046730	UnaryOperationExpression	! pfn -> iodev		5046526	0					
ANR	5046731	UnaryOperator	!		5046526	0					
ANR	5046732	PtrMemberAccess	pfn -> iodev		5046526	1					
ANR	5046733	Identifier	pfn		5046526	0					
ANR	5046734	Identifier	iodev		5046526	1					
ANR	5046735	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1098:12:36923:36963	5046526	1	True				
ANR	5046736	CallExpression	return_error ( gs_error_undefinedfilename )		5046526	0					
ANR	5046737	Callee	return_error		5046526	0					
ANR	5046738	Identifier	return_error		5046526	0					
ANR	5046739	ArgumentList	gs_error_undefinedfilename		5046526	1					
ANR	5046740	Argument	gs_error_undefinedfilename		5046526	0					
ANR	5046741	Identifier	gs_error_undefinedfilename		5046526	0					
ANR	5046742	IfStatement	if ( ! pfn -> fname )		5046526	10					
ANR	5046743	Condition	! pfn -> fname	1100:8:36979:36989	5046526	0	True				
ANR	5046744	UnaryOperationExpression	! pfn -> fname		5046526	0					
ANR	5046745	UnaryOperator	!		5046526	0					
ANR	5046746	PtrMemberAccess	pfn -> fname		5046526	1					
ANR	5046747	Identifier	pfn		5046526	0					
ANR	5046748	Identifier	fname		5046526	1					
ANR	5046749	ReturnStatement	return 0 ;	1101:8:37000:37008	5046526	1	True				
ANR	5046750	PrimaryExpression	0		5046526	0					
ANR	5046751	ExpressionStatement	"code = gx_parse_output_format ( pfn , pfmt )"	1102:4:37014:37054	5046526	11	True				
ANR	5046752	AssignmentExpression	"code = gx_parse_output_format ( pfn , pfmt )"		5046526	0		=			
ANR	5046753	Identifier	code		5046526	0					
ANR	5046754	CallExpression	"gx_parse_output_format ( pfn , pfmt )"		5046526	1					
ANR	5046755	Callee	gx_parse_output_format		5046526	0					
ANR	5046756	Identifier	gx_parse_output_format		5046526	0					
ANR	5046757	ArgumentList	pfn		5046526	1					
ANR	5046758	Argument	pfn		5046526	0					
ANR	5046759	Identifier	pfn		5046526	0					
ANR	5046760	Argument	pfmt		5046526	1					
ANR	5046761	Identifier	pfmt		5046526	0					
ANR	5046762	IfStatement	if ( code < 0 )		5046526	12					
ANR	5046763	Condition	code < 0	1103:8:37064:37071	5046526	0	True				
ANR	5046764	RelationalExpression	code < 0		5046526	0		<			
ANR	5046765	Identifier	code		5046526	0					
ANR	5046766	PrimaryExpression	0		5046526	1					
ANR	5046767	ReturnStatement	return code ;	1104:8:37082:37093	5046526	1	True				
ANR	5046768	Identifier	code		5046526	0					
ANR	5046769	IfStatement	if ( strlen ( pfn -> iodev -> dname ) + pfn -> len + code >= gp_file_name_sizeof )		5046526	13					
ANR	5046770	Condition	strlen ( pfn -> iodev -> dname ) + pfn -> len + code >= gp_file_name_sizeof	1105:8:37103:37168	5046526	0	True				
ANR	5046771	RelationalExpression	strlen ( pfn -> iodev -> dname ) + pfn -> len + code >= gp_file_name_sizeof		5046526	0		>=			
ANR	5046772	AdditiveExpression	strlen ( pfn -> iodev -> dname ) + pfn -> len + code		5046526	0		+			
ANR	5046773	CallExpression	strlen ( pfn -> iodev -> dname )		5046526	0					
ANR	5046774	Callee	strlen		5046526	0					
ANR	5046775	Identifier	strlen		5046526	0					
ANR	5046776	ArgumentList	pfn -> iodev -> dname		5046526	1					
ANR	5046777	Argument	pfn -> iodev -> dname		5046526	0					
ANR	5046778	PtrMemberAccess	pfn -> iodev -> dname		5046526	0					
ANR	5046779	PtrMemberAccess	pfn -> iodev		5046526	0					
ANR	5046780	Identifier	pfn		5046526	0					
ANR	5046781	Identifier	iodev		5046526	1					
ANR	5046782	Identifier	dname		5046526	1					
ANR	5046783	AdditiveExpression	pfn -> len + code		5046526	1		+			
ANR	5046784	PtrMemberAccess	pfn -> len		5046526	0					
ANR	5046785	Identifier	pfn		5046526	0					
ANR	5046786	Identifier	len		5046526	1					
ANR	5046787	Identifier	code		5046526	1					
ANR	5046788	Identifier	gp_file_name_sizeof		5046526	1					
ANR	5046789	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1106:8:37179:37219	5046526	1	True				
ANR	5046790	CallExpression	return_error ( gs_error_undefinedfilename )		5046526	0					
ANR	5046791	Callee	return_error		5046526	0					
ANR	5046792	Identifier	return_error		5046526	0					
ANR	5046793	ArgumentList	gs_error_undefinedfilename		5046526	1					
ANR	5046794	Argument	gs_error_undefinedfilename		5046526	0					
ANR	5046795	Identifier	gs_error_undefinedfilename		5046526	0					
ANR	5046796	ReturnStatement	return 0 ;	1107:4:37225:37233	5046526	14	True				
ANR	5046797	PrimaryExpression	0		5046526	0					
ANR	5046798	ReturnType	int		5046526	1					
ANR	5046799	Identifier	gx_parse_output_file_name		5046526	2					
ANR	5046800	ParameterList	"gs_parsed_file_name_t * pfn , const char * * pfmt , const char * fname , uint fnlen , gs_memory_t * memory"		5046526	3					
ANR	5046801	Parameter	gs_parsed_file_name_t * pfn	1061:26:35622:35647	5046526	0	True				
ANR	5046802	ParameterType	gs_parsed_file_name_t *		5046526	0					
ANR	5046803	Identifier	pfn		5046526	1					
ANR	5046804	Parameter	const char * * pfmt	1061:54:35650:35666	5046526	1	True				
ANR	5046805	ParameterType	const char * *		5046526	0					
ANR	5046806	Identifier	pfmt		5046526	1					
ANR	5046807	Parameter	const char * fname	1062:26:35695:35711	5046526	2	True				
ANR	5046808	ParameterType	const char *		5046526	0					
ANR	5046809	Identifier	fname		5046526	1					
ANR	5046810	Parameter	uint fnlen	1062:45:35714:35723	5046526	3	True				
ANR	5046811	ParameterType	uint		5046526	0					
ANR	5046812	Identifier	fnlen		5046526	1					
ANR	5046813	Parameter	gs_memory_t * memory	1062:57:35726:35744	5046526	4	True				
ANR	5046814	ParameterType	gs_memory_t *		5046526	0					
ANR	5046815	Identifier	memory		5046526	1					
ANR	5046816	CFGEntryNode	ENTRY		5046526		True				
ANR	5046817	CFGExitNode	EXIT		5046526		True				
ANR	5046818	Symbol	pfn -> memory		5046526						
ANR	5046819	Symbol	memory		5046526						
ANR	5046820	Symbol	code		5046526						
ANR	5046821	Symbol	pfn -> iodev		5046526						
ANR	5046822	Symbol	* fname		5046526						
ANR	5046823	Symbol	* * pfn		5046526						
ANR	5046824	Symbol	strlen		5046526						
ANR	5046825	Symbol	pfn -> iodev -> dname		5046526						
ANR	5046826	Symbol	gx_parse_output_format		5046526						
ANR	5046827	Symbol	* pfn -> fname		5046526						
ANR	5046828	Symbol	fnlen		5046526						
ANR	5046829	Symbol	gs_parse_file_name		5046526						
ANR	5046830	Symbol	pfn -> fname		5046526						
ANR	5046831	Symbol	fname		5046526						
ANR	5046832	Symbol	* pfn		5046526						
ANR	5046833	Symbol	NULL		5046526						
ANR	5046834	Symbol	pfmt		5046526						
ANR	5046835	Symbol	gp_file_name_sizeof		5046526						
ANR	5046836	Symbol	gs_findiodevice		5046526						
ANR	5046837	Symbol	gs_error_undefinedfilename		5046526						
ANR	5046838	Symbol	* pfmt		5046526						
ANR	5046839	Symbol	iodev_default		5046526						
ANR	5046840	Symbol	pfn		5046526						
ANR	5046841	Symbol	* pfn -> iodev		5046526						
ANR	5046842	Symbol	pfn -> len		5046526						
ANR	5046843	Function	gx_outputfile_is_separate_pages	1111:0:37292:37591							
ANR	5046844	FunctionDef	"gx_outputfile_is_separate_pages (const char * fname , gs_memory_t * memory)"		5046843	0					
ANR	5046845	CompoundStatement		1113:0:37369:37591	5046843	0					
ANR	5046846	IdentifierDeclStatement	const char * fmt ;	1114:4:37375:37390	5046843	0	True				
ANR	5046847	IdentifierDecl	* fmt		5046843	0					
ANR	5046848	IdentifierDeclType	const char *		5046843	0					
ANR	5046849	Identifier	fmt		5046843	1					
ANR	5046850	IdentifierDeclStatement	gs_parsed_file_name_t parsed ;	1115:4:37396:37424	5046843	1	True				
ANR	5046851	IdentifierDecl	parsed		5046843	0					
ANR	5046852	IdentifierDeclType	gs_parsed_file_name_t		5046843	0					
ANR	5046853	Identifier	parsed		5046843	1					
ANR	5046854	IdentifierDeclStatement	"int code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , memory ) ;"	1116:4:37430:37552	5046843	2	True				
ANR	5046855	IdentifierDecl	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , memory )"		5046843	0					
ANR	5046856	IdentifierDeclType	int		5046843	0					
ANR	5046857	Identifier	code		5046843	1					
ANR	5046858	AssignmentExpression	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , memory )"		5046843	2		=			
ANR	5046859	Identifier	code		5046843	0					
ANR	5046860	CallExpression	"gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , memory )"		5046843	1					
ANR	5046861	Callee	gx_parse_output_file_name		5046843	0					
ANR	5046862	Identifier	gx_parse_output_file_name		5046843	0					
ANR	5046863	ArgumentList	& parsed		5046843	1					
ANR	5046864	Argument	& parsed		5046843	0					
ANR	5046865	UnaryOperationExpression	& parsed		5046843	0					
ANR	5046866	UnaryOperator	&		5046843	0					
ANR	5046867	Identifier	parsed		5046843	1					
ANR	5046868	Argument	& fmt		5046843	1					
ANR	5046869	UnaryOperationExpression	& fmt		5046843	0					
ANR	5046870	UnaryOperator	&		5046843	0					
ANR	5046871	Identifier	fmt		5046843	1					
ANR	5046872	Argument	fname		5046843	2					
ANR	5046873	Identifier	fname		5046843	0					
ANR	5046874	Argument	strlen ( fname )		5046843	3					
ANR	5046875	CallExpression	strlen ( fname )		5046843	0					
ANR	5046876	Callee	strlen		5046843	0					
ANR	5046877	Identifier	strlen		5046843	0					
ANR	5046878	ArgumentList	fname		5046843	1					
ANR	5046879	Argument	fname		5046843	0					
ANR	5046880	Identifier	fname		5046843	0					
ANR	5046881	Argument	memory		5046843	4					
ANR	5046882	Identifier	memory		5046843	0					
ANR	5046883	ReturnStatement	return ( code >= 0 && fmt != 0 ) ;	1119:4:37559:37589	5046843	3	True				
ANR	5046884	AndExpression	code >= 0 && fmt != 0		5046843	0		&&			
ANR	5046885	RelationalExpression	code >= 0		5046843	0		>=			
ANR	5046886	Identifier	code		5046843	0					
ANR	5046887	PrimaryExpression	0		5046843	1					
ANR	5046888	EqualityExpression	fmt != 0		5046843	1		!=			
ANR	5046889	Identifier	fmt		5046843	0					
ANR	5046890	PrimaryExpression	0		5046843	1					
ANR	5046891	ReturnType	bool		5046843	1					
ANR	5046892	Identifier	gx_outputfile_is_separate_pages		5046843	2					
ANR	5046893	ParameterList	"const char * fname , gs_memory_t * memory"		5046843	3					
ANR	5046894	Parameter	const char * fname	1112:32:37329:37345	5046843	0	True				
ANR	5046895	ParameterType	const char *		5046843	0					
ANR	5046896	Identifier	fname		5046843	1					
ANR	5046897	Parameter	gs_memory_t * memory	1112:51:37348:37366	5046843	1	True				
ANR	5046898	ParameterType	gs_memory_t *		5046843	0					
ANR	5046899	Identifier	memory		5046843	1					
ANR	5046900	CFGEntryNode	ENTRY		5046843		True				
ANR	5046901	CFGExitNode	EXIT		5046843		True				
ANR	5046902	Symbol	fname		5046843						
ANR	5046903	Symbol	strlen		5046843						
ANR	5046904	Symbol	memory		5046843						
ANR	5046905	Symbol	code		5046843						
ANR	5046906	Symbol	& fmt		5046843						
ANR	5046907	Symbol	& parsed		5046843						
ANR	5046908	Symbol	gx_parse_output_file_name		5046843						
ANR	5046909	Symbol	parsed		5046843						
ANR	5046910	Symbol	fmt		5046843						
ANR	5046911	Function	gx_device_delete_output_file	1123:0:37672:39237							
ANR	5046912	FunctionDef	"gx_device_delete_output_file (const gx_device * dev , const char * fname)"		5046911	0					
ANR	5046913	CompoundStatement		1124:0:37747:39237	5046911	0					
ANR	5046914	IdentifierDeclStatement	gs_parsed_file_name_t parsed ;	1125:4:37753:37781	5046911	0	True				
ANR	5046915	IdentifierDecl	parsed		5046911	0					
ANR	5046916	IdentifierDeclType	gs_parsed_file_name_t		5046911	0					
ANR	5046917	Identifier	parsed		5046911	1					
ANR	5046918	IdentifierDeclStatement	const char * fmt ;	1126:4:37787:37802	5046911	1	True				
ANR	5046919	IdentifierDecl	* fmt		5046911	0					
ANR	5046920	IdentifierDeclType	const char *		5046911	0					
ANR	5046921	Identifier	fmt		5046911	1					
ANR	5046922	IdentifierDeclStatement	"char * pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" ) ;"	1127:4:37808:37919	5046911	2	True				
ANR	5046923	IdentifierDecl	"* pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" )"		5046911	0					
ANR	5046924	IdentifierDeclType	char *		5046911	0					
ANR	5046925	Identifier	pfname		5046911	1					
ANR	5046926	AssignmentExpression	"* pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" )"		5046911	2		=			
ANR	5046927	Identifier	pfname		5046911	0					
ANR	5046928	CastExpression	"( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" )"		5046911	1					
ANR	5046929	CastTarget	char *		5046911	0					
ANR	5046930	CallExpression	"gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" )"		5046911	1					
ANR	5046931	Callee	gs_alloc_bytes		5046911	0					
ANR	5046932	Identifier	gs_alloc_bytes		5046911	0					
ANR	5046933	ArgumentList	dev -> memory		5046911	1					
ANR	5046934	Argument	dev -> memory		5046911	0					
ANR	5046935	PtrMemberAccess	dev -> memory		5046911	0					
ANR	5046936	Identifier	dev		5046911	0					
ANR	5046937	Identifier	memory		5046911	1					
ANR	5046938	Argument	gp_file_name_sizeof		5046911	1					
ANR	5046939	Identifier	gp_file_name_sizeof		5046911	0					
ANR	5046940	Argument	"""gx_device_delete_output_file(pfname)"""		5046911	2					
ANR	5046941	PrimaryExpression	"""gx_device_delete_output_file(pfname)"""		5046911	0					
ANR	5046942	IdentifierDeclStatement	int code ;	1128:4:37925:37933	5046911	3	True				
ANR	5046943	IdentifierDecl	code		5046911	0					
ANR	5046944	IdentifierDeclType	int		5046911	0					
ANR	5046945	Identifier	code		5046911	1					
ANR	5046946	IfStatement	if ( pfname == NULL )		5046911	4					
ANR	5046947	Condition	pfname == NULL	1130:8:37944:37957	5046911	0	True				
ANR	5046948	EqualityExpression	pfname == NULL		5046911	0		==			
ANR	5046949	Identifier	pfname		5046911	0					
ANR	5046950	Identifier	NULL		5046911	1					
ANR	5046951	CompoundStatement		7:24:212:212	5046911	1					
ANR	5046952	ExpressionStatement	code = gs_note_error ( gs_error_VMerror )	1131:8:37970:38008	5046911	0	True				
ANR	5046953	AssignmentExpression	code = gs_note_error ( gs_error_VMerror )		5046911	0		=			
ANR	5046954	Identifier	code		5046911	0					
ANR	5046955	CallExpression	gs_note_error ( gs_error_VMerror )		5046911	1					
ANR	5046956	Callee	gs_note_error		5046911	0					
ANR	5046957	Identifier	gs_note_error		5046911	0					
ANR	5046958	ArgumentList	gs_error_VMerror		5046911	1					
ANR	5046959	Argument	gs_error_VMerror		5046911	0					
ANR	5046960	Identifier	gs_error_VMerror		5046911	0					
ANR	5046961	GotoStatement	goto done ;	1132:1:38011:38020	5046911	1	True				
ANR	5046962	Identifier	done		5046911	0					
ANR	5046963	ExpressionStatement	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"	1135:4:38033:38156	5046911	5	True				
ANR	5046964	AssignmentExpression	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		5046911	0		=			
ANR	5046965	Identifier	code		5046911	0					
ANR	5046966	CallExpression	"gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		5046911	1					
ANR	5046967	Callee	gx_parse_output_file_name		5046911	0					
ANR	5046968	Identifier	gx_parse_output_file_name		5046911	0					
ANR	5046969	ArgumentList	& parsed		5046911	1					
ANR	5046970	Argument	& parsed		5046911	0					
ANR	5046971	UnaryOperationExpression	& parsed		5046911	0					
ANR	5046972	UnaryOperator	&		5046911	0					
ANR	5046973	Identifier	parsed		5046911	1					
ANR	5046974	Argument	& fmt		5046911	1					
ANR	5046975	UnaryOperationExpression	& fmt		5046911	0					
ANR	5046976	UnaryOperator	&		5046911	0					
ANR	5046977	Identifier	fmt		5046911	1					
ANR	5046978	Argument	fname		5046911	2					
ANR	5046979	Identifier	fname		5046911	0					
ANR	5046980	Argument	strlen ( fname )		5046911	3					
ANR	5046981	CallExpression	strlen ( fname )		5046911	0					
ANR	5046982	Callee	strlen		5046911	0					
ANR	5046983	Identifier	strlen		5046911	0					
ANR	5046984	ArgumentList	fname		5046911	1					
ANR	5046985	Argument	fname		5046911	0					
ANR	5046986	Identifier	fname		5046911	0					
ANR	5046987	Argument	dev -> memory		5046911	4					
ANR	5046988	PtrMemberAccess	dev -> memory		5046911	0					
ANR	5046989	Identifier	dev		5046911	0					
ANR	5046990	Identifier	memory		5046911	1					
ANR	5046991	IfStatement	if ( code < 0 )		5046911	6					
ANR	5046992	Condition	code < 0	1137:8:38166:38173	5046911	0	True				
ANR	5046993	RelationalExpression	code < 0		5046911	0		<			
ANR	5046994	Identifier	code		5046911	0					
ANR	5046995	PrimaryExpression	0		5046911	1					
ANR	5046996	CompoundStatement		14:18:428:428	5046911	1					
ANR	5046997	GotoStatement	goto done ;	1138:8:38186:38195	5046911	0	True				
ANR	5046998	Identifier	done		5046911	0					
ANR	5046999	IfStatement	"if ( parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" ) )"		5046911	7					
ANR	5047000	Condition	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"	1141:8:38212:38267	5046911	0	True				
ANR	5047001	AndExpression	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		5046911	0		&&			
ANR	5047002	MemberAccess	parsed . iodev		5046911	0					
ANR	5047003	Identifier	parsed		5046911	0					
ANR	5047004	Identifier	iodev		5046911	1					
ANR	5047005	UnaryOperationExpression	"! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		5046911	1					
ANR	5047006	UnaryOperator	!		5046911	0					
ANR	5047007	CallExpression	"strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		5046911	1					
ANR	5047008	Callee	strcmp		5046911	0					
ANR	5047009	Identifier	strcmp		5046911	0					
ANR	5047010	ArgumentList	parsed . iodev -> dname		5046911	1					
ANR	5047011	Argument	parsed . iodev -> dname		5046911	0					
ANR	5047012	PtrMemberAccess	parsed . iodev -> dname		5046911	0					
ANR	5047013	MemberAccess	parsed . iodev		5046911	0					
ANR	5047014	Identifier	parsed		5046911	0					
ANR	5047015	Identifier	iodev		5046911	1					
ANR	5047016	Identifier	dname		5046911	1					
ANR	5047017	Argument	"""%stdout%"""		5046911	1					
ANR	5047018	PrimaryExpression	"""%stdout%"""		5046911	0					
ANR	5047019	GotoStatement	goto done ;	1142:8:38278:38287	5046911	1	True				
ANR	5047020	Identifier	done		5046911	0					
ANR	5047021	IfStatement	if ( fmt )		5046911	8					
ANR	5047022	Condition	fmt	1144:8:38298:38300	5046911	0	True				
ANR	5047023	Identifier	fmt		5046911	0					
ANR	5047024	CompoundStatement		22:8:601:633	5046911	1					
ANR	5047025	IdentifierDeclStatement	long count1 = dev -> PageCount + 1 ;	1145:8:38349:38381	5046911	0	True				
ANR	5047026	IdentifierDecl	count1 = dev -> PageCount + 1		5046911	0					
ANR	5047027	IdentifierDeclType	long		5046911	0					
ANR	5047028	Identifier	count1		5046911	1					
ANR	5047029	AssignmentExpression	count1 = dev -> PageCount + 1		5046911	2		=			
ANR	5047030	Identifier	count1		5046911	0					
ANR	5047031	AdditiveExpression	dev -> PageCount + 1		5046911	1		+			
ANR	5047032	PtrMemberAccess	dev -> PageCount		5046911	0					
ANR	5047033	Identifier	dev		5046911	0					
ANR	5047034	Identifier	PageCount		5046911	1					
ANR	5047035	PrimaryExpression	1		5046911	1					
ANR	5047036	WhileStatement	while ( * fmt != 'l' && * fmt != '%' )		5046911	1					
ANR	5047037	Condition	* fmt != 'l' && * fmt != '%'	1147:15:38399:38424	5046911	0	True				
ANR	5047038	AndExpression	* fmt != 'l' && * fmt != '%'		5046911	0		&&			
ANR	5047039	EqualityExpression	* fmt != 'l'		5046911	0		!=			
ANR	5047040	UnaryOperationExpression	* fmt		5046911	0					
ANR	5047041	UnaryOperator	*		5046911	0					
ANR	5047042	Identifier	fmt		5046911	1					
ANR	5047043	PrimaryExpression	'l'		5046911	1					
ANR	5047044	EqualityExpression	* fmt != '%'		5046911	1		!=			
ANR	5047045	UnaryOperationExpression	* fmt		5046911	0					
ANR	5047046	UnaryOperator	*		5046911	0					
ANR	5047047	Identifier	fmt		5046911	1					
ANR	5047048	PrimaryExpression	'%'		5046911	1					
ANR	5047049	ExpressionStatement	-- fmt	1148:12:38439:38444	5046911	1	True				
ANR	5047050	UnaryExpression	-- fmt		5046911	0					
ANR	5047051	IncDec	--		5046911	0					
ANR	5047052	Identifier	fmt		5046911	1					
ANR	5047053	IfStatement	if ( * fmt == 'l' )		5046911	2					
ANR	5047054	Condition	* fmt == 'l'	1149:12:38458:38468	5046911	0	True				
ANR	5047055	EqualityExpression	* fmt == 'l'		5046911	0		==			
ANR	5047056	UnaryOperationExpression	* fmt		5046911	0					
ANR	5047057	UnaryOperator	*		5046911	0					
ANR	5047058	Identifier	fmt		5046911	1					
ANR	5047059	PrimaryExpression	'l'		5046911	1					
ANR	5047060	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname , count1 )"	1150:12:38483:38523	5046911	1	True				
ANR	5047061	CallExpression	"gs_sprintf ( pfname , parsed . fname , count1 )"		5046911	0					
ANR	5047062	Callee	gs_sprintf		5046911	0					
ANR	5047063	Identifier	gs_sprintf		5046911	0					
ANR	5047064	ArgumentList	pfname		5046911	1					
ANR	5047065	Argument	pfname		5046911	0					
ANR	5047066	Identifier	pfname		5046911	0					
ANR	5047067	Argument	parsed . fname		5046911	1					
ANR	5047068	MemberAccess	parsed . fname		5046911	0					
ANR	5047069	Identifier	parsed		5046911	0					
ANR	5047070	Identifier	fname		5046911	1					
ANR	5047071	Argument	count1		5046911	2					
ANR	5047072	Identifier	count1		5046911	0					
ANR	5047073	ElseStatement	else		5046911	0					
ANR	5047074	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname , ( int ) count1 )"	1152:12:38550:38595	5046911	0	True				
ANR	5047075	CallExpression	"gs_sprintf ( pfname , parsed . fname , ( int ) count1 )"		5046911	0					
ANR	5047076	Callee	gs_sprintf		5046911	0					
ANR	5047077	Identifier	gs_sprintf		5046911	0					
ANR	5047078	ArgumentList	pfname		5046911	1					
ANR	5047079	Argument	pfname		5046911	0					
ANR	5047080	Identifier	pfname		5046911	0					
ANR	5047081	Argument	parsed . fname		5046911	1					
ANR	5047082	MemberAccess	parsed . fname		5046911	0					
ANR	5047083	Identifier	parsed		5046911	0					
ANR	5047084	Identifier	fname		5046911	1					
ANR	5047085	Argument	( int ) count1		5046911	2					
ANR	5047086	CastExpression	( int ) count1		5046911	0					
ANR	5047087	CastTarget	int		5046911	0					
ANR	5047088	Identifier	count1		5046911	1					
ANR	5047089	ElseStatement	else		5046911	0					
ANR	5047090	IfStatement	"if ( parsed . len && strchr ( parsed . fname , '%' ) )"		5046911	0					
ANR	5047091	Condition	"parsed . len && strchr ( parsed . fname , '%' )"	1153:15:38612:38650	5046911	0	True				
ANR	5047092	AndExpression	"parsed . len && strchr ( parsed . fname , '%' )"		5046911	0		&&			
ANR	5047093	MemberAccess	parsed . len		5046911	0					
ANR	5047094	Identifier	parsed		5046911	0					
ANR	5047095	Identifier	len		5046911	1					
ANR	5047096	CallExpression	"strchr ( parsed . fname , '%' )"		5046911	1					
ANR	5047097	Callee	strchr		5046911	0					
ANR	5047098	Identifier	strchr		5046911	0					
ANR	5047099	ArgumentList	parsed . fname		5046911	1					
ANR	5047100	Argument	parsed . fname		5046911	0					
ANR	5047101	MemberAccess	parsed . fname		5046911	0					
ANR	5047102	Identifier	parsed		5046911	0					
ANR	5047103	Identifier	fname		5046911	1					
ANR	5047104	Argument	'%'		5046911	1					
ANR	5047105	PrimaryExpression	'%'		5046911	0					
ANR	5047106	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname )"	1154:8:38700:38732	5046911	1	True				
ANR	5047107	CallExpression	"gs_sprintf ( pfname , parsed . fname )"		5046911	0					
ANR	5047108	Callee	gs_sprintf		5046911	0					
ANR	5047109	Identifier	gs_sprintf		5046911	0					
ANR	5047110	ArgumentList	pfname		5046911	1					
ANR	5047111	Argument	pfname		5046911	0					
ANR	5047112	Identifier	pfname		5046911	0					
ANR	5047113	Argument	parsed . fname		5046911	1					
ANR	5047114	MemberAccess	parsed . fname		5046911	0					
ANR	5047115	Identifier	parsed		5046911	0					
ANR	5047116	Identifier	fname		5046911	1					
ANR	5047117	ElseStatement	else		5046911	0					
ANR	5047118	ExpressionStatement	pfname [ 0 ] = 0	1156:8:38751:38764	5046911	0	True				
ANR	5047119	AssignmentExpression	pfname [ 0 ] = 0		5046911	0		=			
ANR	5047120	ArrayIndexing	pfname [ 0 ]		5046911	0					
ANR	5047121	Identifier	pfname		5046911	0					
ANR	5047122	PrimaryExpression	0		5046911	1					
ANR	5047123	PrimaryExpression	0		5046911	1					
ANR	5047124	IfStatement	if ( pfname [ 0 ] )		5046911	9					
ANR	5047125	Condition	pfname [ 0 ]	1157:8:38811:38819	5046911	0	True				
ANR	5047126	ArrayIndexing	pfname [ 0 ]		5046911	0					
ANR	5047127	Identifier	pfname		5046911	0					
ANR	5047128	PrimaryExpression	0		5046911	1					
ANR	5047129	CompoundStatement		34:19:1074:1074	5046911	1					
ANR	5047130	ExpressionStatement	parsed . fname = pfname	1158:8:38832:38853	5046911	0	True				
ANR	5047131	AssignmentExpression	parsed . fname = pfname		5046911	0		=			
ANR	5047132	MemberAccess	parsed . fname		5046911	0					
ANR	5047133	Identifier	parsed		5046911	0					
ANR	5047134	Identifier	fname		5046911	1					
ANR	5047135	Identifier	pfname		5046911	1					
ANR	5047136	ExpressionStatement	parsed . len = strlen ( parsed . fname )	1159:8:38863:38896	5046911	1	True				
ANR	5047137	AssignmentExpression	parsed . len = strlen ( parsed . fname )		5046911	0		=			
ANR	5047138	MemberAccess	parsed . len		5046911	0					
ANR	5047139	Identifier	parsed		5046911	0					
ANR	5047140	Identifier	len		5046911	1					
ANR	5047141	CallExpression	strlen ( parsed . fname )		5046911	1					
ANR	5047142	Callee	strlen		5046911	0					
ANR	5047143	Identifier	strlen		5046911	0					
ANR	5047144	ArgumentList	parsed . fname		5046911	1					
ANR	5047145	Argument	parsed . fname		5046911	0					
ANR	5047146	MemberAccess	parsed . fname		5046911	0					
ANR	5047147	Identifier	parsed		5046911	0					
ANR	5047148	Identifier	fname		5046911	1					
ANR	5047149	IfStatement	if ( parsed . iodev )		5046911	10					
ANR	5047150	Condition	parsed . iodev	1161:8:38912:38923	5046911	0	True				
ANR	5047151	MemberAccess	parsed . iodev		5046911	0					
ANR	5047152	Identifier	parsed		5046911	0					
ANR	5047153	Identifier	iodev		5046911	1					
ANR	5047154	ExpressionStatement	"code = parsed . iodev -> procs . delete_file ( ( gx_io_device * ) ( & parsed . iodev ) , ( const char * ) parsed . fname )"	1162:8:38934:39033	5046911	1	True				
ANR	5047155	AssignmentExpression	"code = parsed . iodev -> procs . delete_file ( ( gx_io_device * ) ( & parsed . iodev ) , ( const char * ) parsed . fname )"		5046911	0		=			
ANR	5047156	Identifier	code		5046911	0					
ANR	5047157	CallExpression	"parsed . iodev -> procs . delete_file ( ( gx_io_device * ) ( & parsed . iodev ) , ( const char * ) parsed . fname )"		5046911	1					
ANR	5047158	Callee	parsed . iodev -> procs . delete_file		5046911	0					
ANR	5047159	MemberAccess	parsed . iodev -> procs . delete_file		5046911	0					
ANR	5047160	PtrMemberAccess	parsed . iodev -> procs		5046911	0					
ANR	5047161	MemberAccess	parsed . iodev		5046911	0					
ANR	5047162	Identifier	parsed		5046911	0					
ANR	5047163	Identifier	iodev		5046911	1					
ANR	5047164	Identifier	procs		5046911	1					
ANR	5047165	Identifier	delete_file		5046911	1					
ANR	5047166	ArgumentList	( gx_io_device * ) ( & parsed . iodev )		5046911	1					
ANR	5047167	Argument	( gx_io_device * ) ( & parsed . iodev )		5046911	0					
ANR	5047168	CastExpression	( gx_io_device * ) ( & parsed . iodev )		5046911	0					
ANR	5047169	CastTarget	gx_io_device *		5046911	0					
ANR	5047170	UnaryOperationExpression	& parsed . iodev		5046911	1					
ANR	5047171	UnaryOperator	&		5046911	0					
ANR	5047172	MemberAccess	parsed . iodev		5046911	1					
ANR	5047173	Identifier	parsed		5046911	0					
ANR	5047174	Identifier	iodev		5046911	1					
ANR	5047175	Argument	( const char * ) parsed . fname		5046911	1					
ANR	5047176	CastExpression	( const char * ) parsed . fname		5046911	0					
ANR	5047177	CastTarget	const char *		5046911	0					
ANR	5047178	MemberAccess	parsed . fname		5046911	1					
ANR	5047179	Identifier	parsed		5046911	0					
ANR	5047180	Identifier	fname		5046911	1					
ANR	5047181	ElseStatement	else		5046911	0					
ANR	5047182	ExpressionStatement	code = gs_note_error ( gs_error_invalidfileaccess )	1164:8:39052:39100	5046911	0	True				
ANR	5047183	AssignmentExpression	code = gs_note_error ( gs_error_invalidfileaccess )		5046911	0		=			
ANR	5047184	Identifier	code		5046911	0					
ANR	5047185	CallExpression	gs_note_error ( gs_error_invalidfileaccess )		5046911	1					
ANR	5047186	Callee	gs_note_error		5046911	0					
ANR	5047187	Identifier	gs_note_error		5046911	0					
ANR	5047188	ArgumentList	gs_error_invalidfileaccess		5046911	1					
ANR	5047189	Argument	gs_error_invalidfileaccess		5046911	0					
ANR	5047190	Identifier	gs_error_invalidfileaccess		5046911	0					
ANR	5047191	Label	done :	1166:0:39103:39107	5046911	11	True				
ANR	5047192	Identifier	done		5046911	0					
ANR	5047193	IfStatement	if ( pfname != NULL )		5046911	12					
ANR	5047194	Condition	pfname != NULL	1167:8:39117:39130	5046911	0	True				
ANR	5047195	EqualityExpression	pfname != NULL		5046911	0		!=			
ANR	5047196	Identifier	pfname		5046911	0					
ANR	5047197	Identifier	NULL		5046911	1					
ANR	5047198	ExpressionStatement	"gs_free_object ( dev -> memory , pfname , ""gx_device_delete_output_file(pfname)"" )"	1168:8:39141:39216	5046911	1	True				
ANR	5047199	CallExpression	"gs_free_object ( dev -> memory , pfname , ""gx_device_delete_output_file(pfname)"" )"		5046911	0					
ANR	5047200	Callee	gs_free_object		5046911	0					
ANR	5047201	Identifier	gs_free_object		5046911	0					
ANR	5047202	ArgumentList	dev -> memory		5046911	1					
ANR	5047203	Argument	dev -> memory		5046911	0					
ANR	5047204	PtrMemberAccess	dev -> memory		5046911	0					
ANR	5047205	Identifier	dev		5046911	0					
ANR	5047206	Identifier	memory		5046911	1					
ANR	5047207	Argument	pfname		5046911	1					
ANR	5047208	Identifier	pfname		5046911	0					
ANR	5047209	Argument	"""gx_device_delete_output_file(pfname)"""		5046911	2					
ANR	5047210	PrimaryExpression	"""gx_device_delete_output_file(pfname)"""		5046911	0					
ANR	5047211	ReturnStatement	return ( code ) ;	1170:4:39223:39235	5046911	13	True				
ANR	5047212	Identifier	code		5046911	0					
ANR	5047213	ReturnType	int		5046911	1					
ANR	5047214	Identifier	gx_device_delete_output_file		5046911	2					
ANR	5047215	ParameterList	"const gx_device * dev , const char * fname"		5046911	3					
ANR	5047216	Parameter	const gx_device * dev	1123:33:37705:37725	5046911	0	True				
ANR	5047217	ParameterType	const gx_device *		5046911	0					
ANR	5047218	Identifier	dev		5046911	1					
ANR	5047219	Parameter	const char * fname	1123:56:37728:37744	5046911	1	True				
ANR	5047220	ParameterType	const char *		5046911	0					
ANR	5047221	Identifier	fname		5046911	1					
ANR	5047222	CFGEntryNode	ENTRY		5046911		True				
ANR	5047223	CFGExitNode	EXIT		5046911		True				
ANR	5047224	Symbol	* dev		5046911						
ANR	5047225	Symbol	count1		5046911						
ANR	5047226	Symbol	& parsed . iodev		5046911						
ANR	5047227	Symbol	code		5046911						
ANR	5047228	Symbol	parsed . iodev -> procs		5046911						
ANR	5047229	Symbol	* fmt		5046911						
ANR	5047230	Symbol	strchr		5046911						
ANR	5047231	Symbol	parsed . iodev -> dname		5046911						
ANR	5047232	Symbol	fmt		5046911						
ANR	5047233	Symbol	strlen		5046911						
ANR	5047234	Symbol	dev		5046911						
ANR	5047235	Symbol	& parsed		5046911						
ANR	5047236	Symbol	* parsed . iodev		5046911						
ANR	5047237	Symbol	parsed . fname		5046911						
ANR	5047238	Symbol	dev -> PageCount		5046911						
ANR	5047239	Symbol	parsed . len		5046911						
ANR	5047240	Symbol	* pfname		5046911						
ANR	5047241	Symbol	strcmp		5046911						
ANR	5047242	Symbol	fname		5046911						
ANR	5047243	Symbol	gs_alloc_bytes		5046911						
ANR	5047244	Symbol	NULL		5046911						
ANR	5047245	Symbol	* parsed		5046911						
ANR	5047246	Symbol	parsed . iodev -> procs . delete_file		5046911						
ANR	5047247	Symbol	gx_parse_output_file_name		5046911						
ANR	5047248	Symbol	gp_file_name_sizeof		5046911						
ANR	5047249	Symbol	pfname		5046911						
ANR	5047250	Symbol	gs_error_VMerror		5046911						
ANR	5047251	Symbol	dev -> memory		5046911						
ANR	5047252	Symbol	gs_note_error		5046911						
ANR	5047253	Symbol	& fmt		5046911						
ANR	5047254	Symbol	parsed		5046911						
ANR	5047255	Symbol	parsed . iodev		5046911						
ANR	5047256	Symbol	gs_error_invalidfileaccess		5046911						
ANR	5047257	Function	gx_device_open_output_file	1174:0:39281:42160							
ANR	5047258	FunctionDef	"gx_device_open_output_file (const gx_device * dev , char * fname , bool binary , bool positionable , FILE * * pfile)"		5047257	0					
ANR	5047259	CompoundStatement		1177:0:39422:42160	5047257	0					
ANR	5047260	IdentifierDeclStatement	gs_parsed_file_name_t parsed ;	1178:4:39428:39456	5047257	0	True				
ANR	5047261	IdentifierDecl	parsed		5047257	0					
ANR	5047262	IdentifierDeclType	gs_parsed_file_name_t		5047257	0					
ANR	5047263	Identifier	parsed		5047257	1					
ANR	5047264	IdentifierDeclStatement	const char * fmt ;	1179:4:39462:39477	5047257	1	True				
ANR	5047265	IdentifierDecl	* fmt		5047257	0					
ANR	5047266	IdentifierDeclType	const char *		5047257	0					
ANR	5047267	Identifier	fmt		5047257	1					
ANR	5047268	IdentifierDeclStatement	"char * pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" ) ;"	1180:4:39483:39592	5047257	2	True				
ANR	5047269	IdentifierDecl	"* pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" )"		5047257	0					
ANR	5047270	IdentifierDeclType	char *		5047257	0					
ANR	5047271	Identifier	pfname		5047257	1					
ANR	5047272	AssignmentExpression	"* pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" )"		5047257	2		=			
ANR	5047273	Identifier	pfname		5047257	0					
ANR	5047274	CastExpression	"( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" )"		5047257	1					
ANR	5047275	CastTarget	char *		5047257	0					
ANR	5047276	CallExpression	"gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" )"		5047257	1					
ANR	5047277	Callee	gs_alloc_bytes		5047257	0					
ANR	5047278	Identifier	gs_alloc_bytes		5047257	0					
ANR	5047279	ArgumentList	dev -> memory		5047257	1					
ANR	5047280	Argument	dev -> memory		5047257	0					
ANR	5047281	PtrMemberAccess	dev -> memory		5047257	0					
ANR	5047282	Identifier	dev		5047257	0					
ANR	5047283	Identifier	memory		5047257	1					
ANR	5047284	Argument	gp_file_name_sizeof		5047257	1					
ANR	5047285	Identifier	gp_file_name_sizeof		5047257	0					
ANR	5047286	Argument	"""gx_device_open_output_file(pfname)"""		5047257	2					
ANR	5047287	PrimaryExpression	"""gx_device_open_output_file(pfname)"""		5047257	0					
ANR	5047288	IdentifierDeclStatement	int code ;	1181:4:39598:39606	5047257	3	True				
ANR	5047289	IdentifierDecl	code		5047257	0					
ANR	5047290	IdentifierDeclType	int		5047257	0					
ANR	5047291	Identifier	code		5047257	1					
ANR	5047292	IfStatement	if ( pfname == NULL )		5047257	4					
ANR	5047293	Condition	pfname == NULL	1183:8:39617:39630	5047257	0	True				
ANR	5047294	EqualityExpression	pfname == NULL		5047257	0		==			
ANR	5047295	Identifier	pfname		5047257	0					
ANR	5047296	Identifier	NULL		5047257	1					
ANR	5047297	CompoundStatement		7:24:210:210	5047257	1					
ANR	5047298	ExpressionStatement	code = gs_note_error ( gs_error_VMerror )	1184:8:39643:39681	5047257	0	True				
ANR	5047299	AssignmentExpression	code = gs_note_error ( gs_error_VMerror )		5047257	0		=			
ANR	5047300	Identifier	code		5047257	0					
ANR	5047301	CallExpression	gs_note_error ( gs_error_VMerror )		5047257	1					
ANR	5047302	Callee	gs_note_error		5047257	0					
ANR	5047303	Identifier	gs_note_error		5047257	0					
ANR	5047304	ArgumentList	gs_error_VMerror		5047257	1					
ANR	5047305	Argument	gs_error_VMerror		5047257	0					
ANR	5047306	Identifier	gs_error_VMerror		5047257	0					
ANR	5047307	GotoStatement	goto done ;	1185:1:39684:39693	5047257	1	True				
ANR	5047308	Identifier	done		5047257	0					
ANR	5047309	IfStatement	if ( strlen ( fname ) == 0 )		5047257	5					
ANR	5047310	Condition	strlen ( fname ) == 0	1188:8:39711:39728	5047257	0	True				
ANR	5047311	EqualityExpression	strlen ( fname ) == 0		5047257	0		==			
ANR	5047312	CallExpression	strlen ( fname )		5047257	0					
ANR	5047313	Callee	strlen		5047257	0					
ANR	5047314	Identifier	strlen		5047257	0					
ANR	5047315	ArgumentList	fname		5047257	1					
ANR	5047316	Argument	fname		5047257	0					
ANR	5047317	Identifier	fname		5047257	0					
ANR	5047318	PrimaryExpression	0		5047257	1					
ANR	5047319	CompoundStatement		12:28:308:308	5047257	1					
ANR	5047320	ExpressionStatement	code = gs_note_error ( gs_error_undefinedfilename )	1189:8:39741:39789	5047257	0	True				
ANR	5047321	AssignmentExpression	code = gs_note_error ( gs_error_undefinedfilename )		5047257	0		=			
ANR	5047322	Identifier	code		5047257	0					
ANR	5047323	CallExpression	gs_note_error ( gs_error_undefinedfilename )		5047257	1					
ANR	5047324	Callee	gs_note_error		5047257	0					
ANR	5047325	Identifier	gs_note_error		5047257	0					
ANR	5047326	ArgumentList	gs_error_undefinedfilename		5047257	1					
ANR	5047327	Argument	gs_error_undefinedfilename		5047257	0					
ANR	5047328	Identifier	gs_error_undefinedfilename		5047257	0					
ANR	5047329	ExpressionStatement	"emprintf1 ( dev -> memory , ""Device '%s' requires an output file but no file was specified.\\n"" , dev -> dname )"	1190:8:39799:39901	5047257	1	True				
ANR	5047330	CallExpression	"emprintf1 ( dev -> memory , ""Device '%s' requires an output file but no file was specified.\\n"" , dev -> dname )"		5047257	0					
ANR	5047331	Callee	emprintf1		5047257	0					
ANR	5047332	Identifier	emprintf1		5047257	0					
ANR	5047333	ArgumentList	dev -> memory		5047257	1					
ANR	5047334	Argument	dev -> memory		5047257	0					
ANR	5047335	PtrMemberAccess	dev -> memory		5047257	0					
ANR	5047336	Identifier	dev		5047257	0					
ANR	5047337	Identifier	memory		5047257	1					
ANR	5047338	Argument	"""Device '%s' requires an output file but no file was specified.\\n"""		5047257	1					
ANR	5047339	PrimaryExpression	"""Device '%s' requires an output file but no file was specified.\\n"""		5047257	0					
ANR	5047340	Argument	dev -> dname		5047257	2					
ANR	5047341	PtrMemberAccess	dev -> dname		5047257	0					
ANR	5047342	Identifier	dev		5047257	0					
ANR	5047343	Identifier	dname		5047257	1					
ANR	5047344	GotoStatement	goto done ;	1191:8:39911:39920	5047257	2	True				
ANR	5047345	Identifier	done		5047257	0					
ANR	5047346	ExpressionStatement	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"	1193:4:39932:40014	5047257	6	True				
ANR	5047347	AssignmentExpression	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		5047257	0		=			
ANR	5047348	Identifier	code		5047257	0					
ANR	5047349	CallExpression	"gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		5047257	1					
ANR	5047350	Callee	gx_parse_output_file_name		5047257	0					
ANR	5047351	Identifier	gx_parse_output_file_name		5047257	0					
ANR	5047352	ArgumentList	& parsed		5047257	1					
ANR	5047353	Argument	& parsed		5047257	0					
ANR	5047354	UnaryOperationExpression	& parsed		5047257	0					
ANR	5047355	UnaryOperator	&		5047257	0					
ANR	5047356	Identifier	parsed		5047257	1					
ANR	5047357	Argument	& fmt		5047257	1					
ANR	5047358	UnaryOperationExpression	& fmt		5047257	0					
ANR	5047359	UnaryOperator	&		5047257	0					
ANR	5047360	Identifier	fmt		5047257	1					
ANR	5047361	Argument	fname		5047257	2					
ANR	5047362	Identifier	fname		5047257	0					
ANR	5047363	Argument	strlen ( fname )		5047257	3					
ANR	5047364	CallExpression	strlen ( fname )		5047257	0					
ANR	5047365	Callee	strlen		5047257	0					
ANR	5047366	Identifier	strlen		5047257	0					
ANR	5047367	ArgumentList	fname		5047257	1					
ANR	5047368	Argument	fname		5047257	0					
ANR	5047369	Identifier	fname		5047257	0					
ANR	5047370	Argument	dev -> memory		5047257	4					
ANR	5047371	PtrMemberAccess	dev -> memory		5047257	0					
ANR	5047372	Identifier	dev		5047257	0					
ANR	5047373	Identifier	memory		5047257	1					
ANR	5047374	IfStatement	if ( code < 0 )		5047257	7					
ANR	5047375	Condition	code < 0	1194:8:40024:40031	5047257	0	True				
ANR	5047376	RelationalExpression	code < 0		5047257	0		<			
ANR	5047377	Identifier	code		5047257	0					
ANR	5047378	PrimaryExpression	0		5047257	1					
ANR	5047379	CompoundStatement		18:18:611:611	5047257	1					
ANR	5047380	GotoStatement	goto done ;	1195:8:40044:40053	5047257	0	True				
ANR	5047381	Identifier	done		5047257	0					
ANR	5047382	IfStatement	"if ( parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" ) )"		5047257	8					
ANR	5047383	Condition	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"	1198:8:40070:40125	5047257	0	True				
ANR	5047384	AndExpression	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		5047257	0		&&			
ANR	5047385	MemberAccess	parsed . iodev		5047257	0					
ANR	5047386	Identifier	parsed		5047257	0					
ANR	5047387	Identifier	iodev		5047257	1					
ANR	5047388	UnaryOperationExpression	"! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		5047257	1					
ANR	5047389	UnaryOperator	!		5047257	0					
ANR	5047390	CallExpression	"strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		5047257	1					
ANR	5047391	Callee	strcmp		5047257	0					
ANR	5047392	Identifier	strcmp		5047257	0					
ANR	5047393	ArgumentList	parsed . iodev -> dname		5047257	1					
ANR	5047394	Argument	parsed . iodev -> dname		5047257	0					
ANR	5047395	PtrMemberAccess	parsed . iodev -> dname		5047257	0					
ANR	5047396	MemberAccess	parsed . iodev		5047257	0					
ANR	5047397	Identifier	parsed		5047257	0					
ANR	5047398	Identifier	iodev		5047257	1					
ANR	5047399	Identifier	dname		5047257	1					
ANR	5047400	Argument	"""%stdout%"""		5047257	1					
ANR	5047401	PrimaryExpression	"""%stdout%"""		5047257	0					
ANR	5047402	CompoundStatement		22:66:705:705	5047257	1					
ANR	5047403	IfStatement	if ( parsed . fname )		5047257	0					
ANR	5047404	Condition	parsed . fname	1199:12:40142:40153	5047257	0	True				
ANR	5047405	MemberAccess	parsed . fname		5047257	0					
ANR	5047406	Identifier	parsed		5047257	0					
ANR	5047407	Identifier	fname		5047257	1					
ANR	5047408	CompoundStatement		23:26:733:733	5047257	1					
ANR	5047409	ExpressionStatement	code = gs_note_error ( gs_error_undefinedfilename )	1200:12:40170:40218	5047257	0	True				
ANR	5047410	AssignmentExpression	code = gs_note_error ( gs_error_undefinedfilename )		5047257	0		=			
ANR	5047411	Identifier	code		5047257	0					
ANR	5047412	CallExpression	gs_note_error ( gs_error_undefinedfilename )		5047257	1					
ANR	5047413	Callee	gs_note_error		5047257	0					
ANR	5047414	Identifier	gs_note_error		5047257	0					
ANR	5047415	ArgumentList	gs_error_undefinedfilename		5047257	1					
ANR	5047416	Argument	gs_error_undefinedfilename		5047257	0					
ANR	5047417	Identifier	gs_error_undefinedfilename		5047257	0					
ANR	5047418	GotoStatement	goto done ;	1201:5:40225:40234	5047257	1	True				
ANR	5047419	Identifier	done		5047257	0					
ANR	5047420	ExpressionStatement	* pfile = dev -> memory -> gs_lib_ctx -> fstdout	1203:8:40247:40288	5047257	1	True				
ANR	5047421	AssignmentExpression	* pfile = dev -> memory -> gs_lib_ctx -> fstdout		5047257	0		=			
ANR	5047422	UnaryOperationExpression	* pfile		5047257	0					
ANR	5047423	UnaryOperator	*		5047257	0					
ANR	5047424	Identifier	pfile		5047257	1					
ANR	5047425	PtrMemberAccess	dev -> memory -> gs_lib_ctx -> fstdout		5047257	1					
ANR	5047426	PtrMemberAccess	dev -> memory -> gs_lib_ctx		5047257	0					
ANR	5047427	PtrMemberAccess	dev -> memory		5047257	0					
ANR	5047428	Identifier	dev		5047257	0					
ANR	5047429	Identifier	memory		5047257	1					
ANR	5047430	Identifier	gs_lib_ctx		5047257	1					
ANR	5047431	Identifier	fstdout		5047257	1					
ANR	5047432	ExpressionStatement	"code = gp_setmode_binary ( * pfile , true )"	1205:8:40336:40374	5047257	2	True				
ANR	5047433	AssignmentExpression	"code = gp_setmode_binary ( * pfile , true )"		5047257	0		=			
ANR	5047434	Identifier	code		5047257	0					
ANR	5047435	CallExpression	"gp_setmode_binary ( * pfile , true )"		5047257	1					
ANR	5047436	Callee	gp_setmode_binary		5047257	0					
ANR	5047437	Identifier	gp_setmode_binary		5047257	0					
ANR	5047438	ArgumentList	* pfile		5047257	1					
ANR	5047439	Argument	* pfile		5047257	0					
ANR	5047440	UnaryOperationExpression	* pfile		5047257	0					
ANR	5047441	UnaryOperator	*		5047257	0					
ANR	5047442	Identifier	pfile		5047257	1					
ANR	5047443	Argument	true		5047257	1					
ANR	5047444	Identifier	true		5047257	0					
ANR	5047445	GotoStatement	goto done ;	1206:1:40377:40386	5047257	3	True				
ANR	5047446	Identifier	done		5047257	0					
ANR	5047447	ElseStatement	else		5047257	0					
ANR	5047448	IfStatement	"if ( parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%pipe%"" ) )"		5047257	0					
ANR	5047449	Condition	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%pipe%"" )"	1207:15:40403:40456	5047257	0	True				
ANR	5047450	AndExpression	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%pipe%"" )"		5047257	0		&&			
ANR	5047451	MemberAccess	parsed . iodev		5047257	0					
ANR	5047452	Identifier	parsed		5047257	0					
ANR	5047453	Identifier	iodev		5047257	1					
ANR	5047454	UnaryOperationExpression	"! strcmp ( parsed . iodev -> dname , ""%pipe%"" )"		5047257	1					
ANR	5047455	UnaryOperator	!		5047257	0					
ANR	5047456	CallExpression	"strcmp ( parsed . iodev -> dname , ""%pipe%"" )"		5047257	1					
ANR	5047457	Callee	strcmp		5047257	0					
ANR	5047458	Identifier	strcmp		5047257	0					
ANR	5047459	ArgumentList	parsed . iodev -> dname		5047257	1					
ANR	5047460	Argument	parsed . iodev -> dname		5047257	0					
ANR	5047461	PtrMemberAccess	parsed . iodev -> dname		5047257	0					
ANR	5047462	MemberAccess	parsed . iodev		5047257	0					
ANR	5047463	Identifier	parsed		5047257	0					
ANR	5047464	Identifier	iodev		5047257	1					
ANR	5047465	Identifier	dname		5047257	1					
ANR	5047466	Argument	"""%pipe%"""		5047257	1					
ANR	5047467	PrimaryExpression	"""%pipe%"""		5047257	0					
ANR	5047468	CompoundStatement		31:71:1036:1036	5047257	1					
ANR	5047469	ExpressionStatement	positionable = false	1208:8:40469:40489	5047257	0	True				
ANR	5047470	AssignmentExpression	positionable = false		5047257	0		=			
ANR	5047471	Identifier	positionable		5047257	0					
ANR	5047472	Identifier	false		5047257	1					
ANR	5047473	IfStatement	if ( fmt )		5047257	9					
ANR	5047474	Condition	fmt	1210:8:40505:40507	5047257	0	True				
ANR	5047475	Identifier	fmt		5047257	0					
ANR	5047476	CompoundStatement		35:8:1133:1165	5047257	1					
ANR	5047477	IdentifierDeclStatement	long count1 = dev -> PageCount + 1 ;	1211:8:40556:40588	5047257	0	True				
ANR	5047478	IdentifierDecl	count1 = dev -> PageCount + 1		5047257	0					
ANR	5047479	IdentifierDeclType	long		5047257	0					
ANR	5047480	Identifier	count1		5047257	1					
ANR	5047481	AssignmentExpression	count1 = dev -> PageCount + 1		5047257	2		=			
ANR	5047482	Identifier	count1		5047257	0					
ANR	5047483	AdditiveExpression	dev -> PageCount + 1		5047257	1		+			
ANR	5047484	PtrMemberAccess	dev -> PageCount		5047257	0					
ANR	5047485	Identifier	dev		5047257	0					
ANR	5047486	Identifier	PageCount		5047257	1					
ANR	5047487	PrimaryExpression	1		5047257	1					
ANR	5047488	WhileStatement	while ( * fmt != 'l' && * fmt != '%' )		5047257	1					
ANR	5047489	Condition	* fmt != 'l' && * fmt != '%'	1213:15:40606:40631	5047257	0	True				
ANR	5047490	AndExpression	* fmt != 'l' && * fmt != '%'		5047257	0		&&			
ANR	5047491	EqualityExpression	* fmt != 'l'		5047257	0		!=			
ANR	5047492	UnaryOperationExpression	* fmt		5047257	0					
ANR	5047493	UnaryOperator	*		5047257	0					
ANR	5047494	Identifier	fmt		5047257	1					
ANR	5047495	PrimaryExpression	'l'		5047257	1					
ANR	5047496	EqualityExpression	* fmt != '%'		5047257	1		!=			
ANR	5047497	UnaryOperationExpression	* fmt		5047257	0					
ANR	5047498	UnaryOperator	*		5047257	0					
ANR	5047499	Identifier	fmt		5047257	1					
ANR	5047500	PrimaryExpression	'%'		5047257	1					
ANR	5047501	ExpressionStatement	-- fmt	1214:12:40646:40651	5047257	1	True				
ANR	5047502	UnaryExpression	-- fmt		5047257	0					
ANR	5047503	IncDec	--		5047257	0					
ANR	5047504	Identifier	fmt		5047257	1					
ANR	5047505	IfStatement	if ( * fmt == 'l' )		5047257	2					
ANR	5047506	Condition	* fmt == 'l'	1215:12:40665:40675	5047257	0	True				
ANR	5047507	EqualityExpression	* fmt == 'l'		5047257	0		==			
ANR	5047508	UnaryOperationExpression	* fmt		5047257	0					
ANR	5047509	UnaryOperator	*		5047257	0					
ANR	5047510	Identifier	fmt		5047257	1					
ANR	5047511	PrimaryExpression	'l'		5047257	1					
ANR	5047512	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname , count1 )"	1216:12:40690:40730	5047257	1	True				
ANR	5047513	CallExpression	"gs_sprintf ( pfname , parsed . fname , count1 )"		5047257	0					
ANR	5047514	Callee	gs_sprintf		5047257	0					
ANR	5047515	Identifier	gs_sprintf		5047257	0					
ANR	5047516	ArgumentList	pfname		5047257	1					
ANR	5047517	Argument	pfname		5047257	0					
ANR	5047518	Identifier	pfname		5047257	0					
ANR	5047519	Argument	parsed . fname		5047257	1					
ANR	5047520	MemberAccess	parsed . fname		5047257	0					
ANR	5047521	Identifier	parsed		5047257	0					
ANR	5047522	Identifier	fname		5047257	1					
ANR	5047523	Argument	count1		5047257	2					
ANR	5047524	Identifier	count1		5047257	0					
ANR	5047525	ElseStatement	else		5047257	0					
ANR	5047526	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname , ( int ) count1 )"	1218:12:40757:40802	5047257	0	True				
ANR	5047527	CallExpression	"gs_sprintf ( pfname , parsed . fname , ( int ) count1 )"		5047257	0					
ANR	5047528	Callee	gs_sprintf		5047257	0					
ANR	5047529	Identifier	gs_sprintf		5047257	0					
ANR	5047530	ArgumentList	pfname		5047257	1					
ANR	5047531	Argument	pfname		5047257	0					
ANR	5047532	Identifier	pfname		5047257	0					
ANR	5047533	Argument	parsed . fname		5047257	1					
ANR	5047534	MemberAccess	parsed . fname		5047257	0					
ANR	5047535	Identifier	parsed		5047257	0					
ANR	5047536	Identifier	fname		5047257	1					
ANR	5047537	Argument	( int ) count1		5047257	2					
ANR	5047538	CastExpression	( int ) count1		5047257	0					
ANR	5047539	CastTarget	int		5047257	0					
ANR	5047540	Identifier	count1		5047257	1					
ANR	5047541	ElseStatement	else		5047257	0					
ANR	5047542	IfStatement	"if ( parsed . len && strchr ( parsed . fname , '%' ) )"		5047257	0					
ANR	5047543	Condition	"parsed . len && strchr ( parsed . fname , '%' )"	1219:15:40819:40857	5047257	0	True				
ANR	5047544	AndExpression	"parsed . len && strchr ( parsed . fname , '%' )"		5047257	0		&&			
ANR	5047545	MemberAccess	parsed . len		5047257	0					
ANR	5047546	Identifier	parsed		5047257	0					
ANR	5047547	Identifier	len		5047257	1					
ANR	5047548	CallExpression	"strchr ( parsed . fname , '%' )"		5047257	1					
ANR	5047549	Callee	strchr		5047257	0					
ANR	5047550	Identifier	strchr		5047257	0					
ANR	5047551	ArgumentList	parsed . fname		5047257	1					
ANR	5047552	Argument	parsed . fname		5047257	0					
ANR	5047553	MemberAccess	parsed . fname		5047257	0					
ANR	5047554	Identifier	parsed		5047257	0					
ANR	5047555	Identifier	fname		5047257	1					
ANR	5047556	Argument	'%'		5047257	1					
ANR	5047557	PrimaryExpression	'%'		5047257	0					
ANR	5047558	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname )"	1220:8:40907:40939	5047257	1	True				
ANR	5047559	CallExpression	"gs_sprintf ( pfname , parsed . fname )"		5047257	0					
ANR	5047560	Callee	gs_sprintf		5047257	0					
ANR	5047561	Identifier	gs_sprintf		5047257	0					
ANR	5047562	ArgumentList	pfname		5047257	1					
ANR	5047563	Argument	pfname		5047257	0					
ANR	5047564	Identifier	pfname		5047257	0					
ANR	5047565	Argument	parsed . fname		5047257	1					
ANR	5047566	MemberAccess	parsed . fname		5047257	0					
ANR	5047567	Identifier	parsed		5047257	0					
ANR	5047568	Identifier	fname		5047257	1					
ANR	5047569	ElseStatement	else		5047257	0					
ANR	5047570	ExpressionStatement	pfname [ 0 ] = 0	1222:8:40958:40971	5047257	0	True				
ANR	5047571	AssignmentExpression	pfname [ 0 ] = 0		5047257	0		=			
ANR	5047572	ArrayIndexing	pfname [ 0 ]		5047257	0					
ANR	5047573	Identifier	pfname		5047257	0					
ANR	5047574	PrimaryExpression	0		5047257	1					
ANR	5047575	PrimaryExpression	0		5047257	1					
ANR	5047576	IfStatement	if ( pfname [ 0 ] )		5047257	10					
ANR	5047577	Condition	pfname [ 0 ]	1223:8:41018:41026	5047257	0	True				
ANR	5047578	ArrayIndexing	pfname [ 0 ]		5047257	0					
ANR	5047579	Identifier	pfname		5047257	0					
ANR	5047580	PrimaryExpression	0		5047257	1					
ANR	5047581	CompoundStatement		47:19:1606:1606	5047257	1					
ANR	5047582	ExpressionStatement	parsed . fname = pfname	1224:8:41039:41060	5047257	0	True				
ANR	5047583	AssignmentExpression	parsed . fname = pfname		5047257	0		=			
ANR	5047584	MemberAccess	parsed . fname		5047257	0					
ANR	5047585	Identifier	parsed		5047257	0					
ANR	5047586	Identifier	fname		5047257	1					
ANR	5047587	Identifier	pfname		5047257	1					
ANR	5047588	ExpressionStatement	parsed . len = strlen ( parsed . fname )	1225:8:41070:41103	5047257	1	True				
ANR	5047589	AssignmentExpression	parsed . len = strlen ( parsed . fname )		5047257	0		=			
ANR	5047590	MemberAccess	parsed . len		5047257	0					
ANR	5047591	Identifier	parsed		5047257	0					
ANR	5047592	Identifier	len		5047257	1					
ANR	5047593	CallExpression	strlen ( parsed . fname )		5047257	1					
ANR	5047594	Callee	strlen		5047257	0					
ANR	5047595	Identifier	strlen		5047257	0					
ANR	5047596	ArgumentList	parsed . fname		5047257	1					
ANR	5047597	Argument	parsed . fname		5047257	0					
ANR	5047598	MemberAccess	parsed . fname		5047257	0					
ANR	5047599	Identifier	parsed		5047257	0					
ANR	5047600	Identifier	fname		5047257	1					
ANR	5047601	IfStatement	if ( positionable || ( parsed . iodev && parsed . iodev != iodev_default ( dev -> memory ) ) )		5047257	11					
ANR	5047602	Condition	positionable || ( parsed . iodev && parsed . iodev != iodev_default ( dev -> memory ) )	1227:8:41119:41194	5047257	0	True				
ANR	5047603	OrExpression	positionable || ( parsed . iodev && parsed . iodev != iodev_default ( dev -> memory ) )		5047257	0		||			
ANR	5047604	Identifier	positionable		5047257	0					
ANR	5047605	AndExpression	parsed . iodev && parsed . iodev != iodev_default ( dev -> memory )		5047257	1		&&			
ANR	5047606	MemberAccess	parsed . iodev		5047257	0					
ANR	5047607	Identifier	parsed		5047257	0					
ANR	5047608	Identifier	iodev		5047257	1					
ANR	5047609	EqualityExpression	parsed . iodev != iodev_default ( dev -> memory )		5047257	1		!=			
ANR	5047610	MemberAccess	parsed . iodev		5047257	0					
ANR	5047611	Identifier	parsed		5047257	0					
ANR	5047612	Identifier	iodev		5047257	1					
ANR	5047613	CallExpression	iodev_default ( dev -> memory )		5047257	1					
ANR	5047614	Callee	iodev_default		5047257	0					
ANR	5047615	Identifier	iodev_default		5047257	0					
ANR	5047616	ArgumentList	dev -> memory		5047257	1					
ANR	5047617	Argument	dev -> memory		5047257	0					
ANR	5047618	PtrMemberAccess	dev -> memory		5047257	0					
ANR	5047619	Identifier	dev		5047257	0					
ANR	5047620	Identifier	memory		5047257	1					
ANR	5047621	CompoundStatement		52:8:1784:1797	5047257	1					
ANR	5047622	IdentifierDeclStatement	char fmode [ 4 ] ;	1228:8:41207:41220	5047257	0	True				
ANR	5047623	IdentifierDecl	fmode [ 4 ]		5047257	0					
ANR	5047624	IdentifierDeclType	char [ 4 ]		5047257	0					
ANR	5047625	Identifier	fmode		5047257	1					
ANR	5047626	PrimaryExpression	4		5047257	2					
ANR	5047627	IfStatement	if ( ! parsed . fname )		5047257	1					
ANR	5047628	Condition	! parsed . fname	1230:12:41235:41247	5047257	0	True				
ANR	5047629	UnaryOperationExpression	! parsed . fname		5047257	0					
ANR	5047630	UnaryOperator	!		5047257	0					
ANR	5047631	MemberAccess	parsed . fname		5047257	1					
ANR	5047632	Identifier	parsed		5047257	0					
ANR	5047633	Identifier	fname		5047257	1					
ANR	5047634	CompoundStatement		54:27:1827:1827	5047257	1					
ANR	5047635	ExpressionStatement	code = gs_note_error ( gs_error_undefinedfilename )	1231:12:41264:41312	5047257	0	True				
ANR	5047636	AssignmentExpression	code = gs_note_error ( gs_error_undefinedfilename )		5047257	0		=			
ANR	5047637	Identifier	code		5047257	0					
ANR	5047638	CallExpression	gs_note_error ( gs_error_undefinedfilename )		5047257	1					
ANR	5047639	Callee	gs_note_error		5047257	0					
ANR	5047640	Identifier	gs_note_error		5047257	0					
ANR	5047641	ArgumentList	gs_error_undefinedfilename		5047257	1					
ANR	5047642	Argument	gs_error_undefinedfilename		5047257	0					
ANR	5047643	Identifier	gs_error_undefinedfilename		5047257	0					
ANR	5047644	GotoStatement	goto done ;	1232:5:41319:41328	5047257	1	True				
ANR	5047645	Identifier	done		5047257	0					
ANR	5047646	ExpressionStatement	"strcpy ( fmode , gp_fmode_wb )"	1234:8:41341:41367	5047257	2	True				
ANR	5047647	CallExpression	"strcpy ( fmode , gp_fmode_wb )"		5047257	0					
ANR	5047648	Callee	strcpy		5047257	0					
ANR	5047649	Identifier	strcpy		5047257	0					
ANR	5047650	ArgumentList	fmode		5047257	1					
ANR	5047651	Argument	fmode		5047257	0					
ANR	5047652	Identifier	fmode		5047257	0					
ANR	5047653	Argument	gp_fmode_wb		5047257	1					
ANR	5047654	Identifier	gp_fmode_wb		5047257	0					
ANR	5047655	IfStatement	if ( positionable )		5047257	3					
ANR	5047656	Condition	positionable	1235:12:41381:41392	5047257	0	True				
ANR	5047657	Identifier	positionable		5047257	0					
ANR	5047658	ExpressionStatement	"strcat ( fmode , ""+"" )"	1236:12:41407:41425	5047257	1	True				
ANR	5047659	CallExpression	"strcat ( fmode , ""+"" )"		5047257	0					
ANR	5047660	Callee	strcat		5047257	0					
ANR	5047661	Identifier	strcat		5047257	0					
ANR	5047662	ArgumentList	fmode		5047257	1					
ANR	5047663	Argument	fmode		5047257	0					
ANR	5047664	Identifier	fmode		5047257	0					
ANR	5047665	Argument	"""+"""		5047257	1					
ANR	5047666	PrimaryExpression	"""+"""		5047257	0					
ANR	5047667	ExpressionStatement	"code = parsed . iodev -> procs . gp_fopen ( parsed . iodev , parsed . fname , fmode , pfile , NULL , 0 )"	1237:8:41435:41562	5047257	4	True				
ANR	5047668	AssignmentExpression	"code = parsed . iodev -> procs . gp_fopen ( parsed . iodev , parsed . fname , fmode , pfile , NULL , 0 )"		5047257	0		=			
ANR	5047669	Identifier	code		5047257	0					
ANR	5047670	CallExpression	"parsed . iodev -> procs . gp_fopen ( parsed . iodev , parsed . fname , fmode , pfile , NULL , 0 )"		5047257	1					
ANR	5047671	Callee	parsed . iodev -> procs . gp_fopen		5047257	0					
ANR	5047672	MemberAccess	parsed . iodev -> procs . gp_fopen		5047257	0					
ANR	5047673	PtrMemberAccess	parsed . iodev -> procs		5047257	0					
ANR	5047674	MemberAccess	parsed . iodev		5047257	0					
ANR	5047675	Identifier	parsed		5047257	0					
ANR	5047676	Identifier	iodev		5047257	1					
ANR	5047677	Identifier	procs		5047257	1					
ANR	5047678	Identifier	gp_fopen		5047257	1					
ANR	5047679	ArgumentList	parsed . iodev		5047257	1					
ANR	5047680	Argument	parsed . iodev		5047257	0					
ANR	5047681	MemberAccess	parsed . iodev		5047257	0					
ANR	5047682	Identifier	parsed		5047257	0					
ANR	5047683	Identifier	iodev		5047257	1					
ANR	5047684	Argument	parsed . fname		5047257	1					
ANR	5047685	MemberAccess	parsed . fname		5047257	0					
ANR	5047686	Identifier	parsed		5047257	0					
ANR	5047687	Identifier	fname		5047257	1					
ANR	5047688	Argument	fmode		5047257	2					
ANR	5047689	Identifier	fmode		5047257	0					
ANR	5047690	Argument	pfile		5047257	3					
ANR	5047691	Identifier	pfile		5047257	0					
ANR	5047692	Argument	NULL		5047257	4					
ANR	5047693	Identifier	NULL		5047257	0					
ANR	5047694	Argument	0		5047257	5					
ANR	5047695	PrimaryExpression	0		5047257	0					
ANR	5047696	IfStatement	if ( code )		5047257	5					
ANR	5047697	Condition	code	1239:12:41576:41579	5047257	0	True				
ANR	5047698	Identifier	code		5047257	0					
ANR	5047699	ExpressionStatement	"emprintf1 ( dev -> memory , ""**** Could not open the file %s .\\n"" , parsed . fname )"	1240:12:41594:41713	5047257	1	True				
ANR	5047700	CallExpression	"emprintf1 ( dev -> memory , ""**** Could not open the file %s .\\n"" , parsed . fname )"		5047257	0					
ANR	5047701	Callee	emprintf1		5047257	0					
ANR	5047702	Identifier	emprintf1		5047257	0					
ANR	5047703	ArgumentList	dev -> memory		5047257	1					
ANR	5047704	Argument	dev -> memory		5047257	0					
ANR	5047705	PtrMemberAccess	dev -> memory		5047257	0					
ANR	5047706	Identifier	dev		5047257	0					
ANR	5047707	Identifier	memory		5047257	1					
ANR	5047708	Argument	"""**** Could not open the file %s .\\n"""		5047257	1					
ANR	5047709	PrimaryExpression	"""**** Could not open the file %s .\\n"""		5047257	0					
ANR	5047710	Argument	parsed . fname		5047257	2					
ANR	5047711	MemberAccess	parsed . fname		5047257	0					
ANR	5047712	Identifier	parsed		5047257	0					
ANR	5047713	Identifier	fname		5047257	1					
ANR	5047714	ElseStatement	else		5047257	0					
ANR	5047715	CompoundStatement		68:9:2307:2307	5047257	0					
ANR	5047716	ExpressionStatement	"* pfile = gp_open_printer ( dev -> memory , ( pfname [ 0 ] ? pfname : fname ) , binary )"	1245:8:41740:41815	5047257	0	True				
ANR	5047717	AssignmentExpression	"* pfile = gp_open_printer ( dev -> memory , ( pfname [ 0 ] ? pfname : fname ) , binary )"		5047257	0		=			
ANR	5047718	UnaryOperationExpression	* pfile		5047257	0					
ANR	5047719	UnaryOperator	*		5047257	0					
ANR	5047720	Identifier	pfile		5047257	1					
ANR	5047721	CallExpression	"gp_open_printer ( dev -> memory , ( pfname [ 0 ] ? pfname : fname ) , binary )"		5047257	1					
ANR	5047722	Callee	gp_open_printer		5047257	0					
ANR	5047723	Identifier	gp_open_printer		5047257	0					
ANR	5047724	ArgumentList	dev -> memory		5047257	1					
ANR	5047725	Argument	dev -> memory		5047257	0					
ANR	5047726	PtrMemberAccess	dev -> memory		5047257	0					
ANR	5047727	Identifier	dev		5047257	0					
ANR	5047728	Identifier	memory		5047257	1					
ANR	5047729	Argument	pfname [ 0 ] ? pfname : fname		5047257	1					
ANR	5047730	ConditionalExpression	pfname [ 0 ] ? pfname : fname		5047257	0					
ANR	5047731	Condition	pfname [ 0 ]		5047257	0					
ANR	5047732	ArrayIndexing	pfname [ 0 ]		5047257	0					
ANR	5047733	Identifier	pfname		5047257	0					
ANR	5047734	PrimaryExpression	0		5047257	1					
ANR	5047735	Identifier	pfname		5047257	1					
ANR	5047736	Identifier	fname		5047257	2					
ANR	5047737	Argument	binary		5047257	2					
ANR	5047738	Identifier	binary		5047257	0					
ANR	5047739	IfStatement	if ( ! ( * pfile ) )		5047257	1					
ANR	5047740	Condition	! ( * pfile )	1246:12:41829:41837	5047257	0	True				
ANR	5047741	UnaryOperationExpression	! ( * pfile )		5047257	0					
ANR	5047742	UnaryOperator	!		5047257	0					
ANR	5047743	UnaryOperationExpression	* pfile		5047257	1					
ANR	5047744	UnaryOperator	*		5047257	0					
ANR	5047745	Identifier	pfile		5047257	1					
ANR	5047746	CompoundStatement		70:23:2417:2417	5047257	1					
ANR	5047747	ExpressionStatement	"emprintf1 ( dev -> memory , ""**** Could not open the file '%s'.\\n"" , ( pfname [ 0 ] ? pfname : fname ) )"	1247:12:41854:41946	5047257	0	True				
ANR	5047748	CallExpression	"emprintf1 ( dev -> memory , ""**** Could not open the file '%s'.\\n"" , ( pfname [ 0 ] ? pfname : fname ) )"		5047257	0					
ANR	5047749	Callee	emprintf1		5047257	0					
ANR	5047750	Identifier	emprintf1		5047257	0					
ANR	5047751	ArgumentList	dev -> memory		5047257	1					
ANR	5047752	Argument	dev -> memory		5047257	0					
ANR	5047753	PtrMemberAccess	dev -> memory		5047257	0					
ANR	5047754	Identifier	dev		5047257	0					
ANR	5047755	Identifier	memory		5047257	1					
ANR	5047756	Argument	"""**** Could not open the file '%s'.\\n"""		5047257	1					
ANR	5047757	PrimaryExpression	"""**** Could not open the file '%s'.\\n"""		5047257	0					
ANR	5047758	Argument	pfname [ 0 ] ? pfname : fname		5047257	2					
ANR	5047759	ConditionalExpression	pfname [ 0 ] ? pfname : fname		5047257	0					
ANR	5047760	Condition	pfname [ 0 ]		5047257	0					
ANR	5047761	ArrayIndexing	pfname [ 0 ]		5047257	0					
ANR	5047762	Identifier	pfname		5047257	0					
ANR	5047763	PrimaryExpression	0		5047257	1					
ANR	5047764	Identifier	pfname		5047257	1					
ANR	5047765	Identifier	fname		5047257	2					
ANR	5047766	ExpressionStatement	code = gs_note_error ( gs_error_invalidfileaccess )	1249:12:41961:42009	5047257	1	True				
ANR	5047767	AssignmentExpression	code = gs_note_error ( gs_error_invalidfileaccess )		5047257	0		=			
ANR	5047768	Identifier	code		5047257	0					
ANR	5047769	CallExpression	gs_note_error ( gs_error_invalidfileaccess )		5047257	1					
ANR	5047770	Callee	gs_note_error		5047257	0					
ANR	5047771	Identifier	gs_note_error		5047257	0					
ANR	5047772	ArgumentList	gs_error_invalidfileaccess		5047257	1					
ANR	5047773	Argument	gs_error_invalidfileaccess		5047257	0					
ANR	5047774	Identifier	gs_error_invalidfileaccess		5047257	0					
ANR	5047775	Label	done :	1253:0:42028:42032	5047257	12	True				
ANR	5047776	Identifier	done		5047257	0					
ANR	5047777	IfStatement	if ( pfname != NULL )		5047257	13					
ANR	5047778	Condition	pfname != NULL	1254:8:42042:42055	5047257	0	True				
ANR	5047779	EqualityExpression	pfname != NULL		5047257	0		!=			
ANR	5047780	Identifier	pfname		5047257	0					
ANR	5047781	Identifier	NULL		5047257	1					
ANR	5047782	ExpressionStatement	"gs_free_object ( dev -> memory , pfname , ""gx_device_open_output_file(pfname)"" )"	1255:8:42066:42139	5047257	1	True				
ANR	5047783	CallExpression	"gs_free_object ( dev -> memory , pfname , ""gx_device_open_output_file(pfname)"" )"		5047257	0					
ANR	5047784	Callee	gs_free_object		5047257	0					
ANR	5047785	Identifier	gs_free_object		5047257	0					
ANR	5047786	ArgumentList	dev -> memory		5047257	1					
ANR	5047787	Argument	dev -> memory		5047257	0					
ANR	5047788	PtrMemberAccess	dev -> memory		5047257	0					
ANR	5047789	Identifier	dev		5047257	0					
ANR	5047790	Identifier	memory		5047257	1					
ANR	5047791	Argument	pfname		5047257	1					
ANR	5047792	Identifier	pfname		5047257	0					
ANR	5047793	Argument	"""gx_device_open_output_file(pfname)"""		5047257	2					
ANR	5047794	PrimaryExpression	"""gx_device_open_output_file(pfname)"""		5047257	0					
ANR	5047795	ReturnStatement	return ( code ) ;	1257:4:42146:42158	5047257	14	True				
ANR	5047796	Identifier	code		5047257	0					
ANR	5047797	ReturnType	int		5047257	1					
ANR	5047798	Identifier	gx_device_open_output_file		5047257	2					
ANR	5047799	ParameterList	"const gx_device * dev , char * fname , bool binary , bool positionable , FILE * * pfile"		5047257	3					
ANR	5047800	Parameter	const gx_device * dev	1175:27:39312:39332	5047257	0	True				
ANR	5047801	ParameterType	const gx_device *		5047257	0					
ANR	5047802	Identifier	dev		5047257	1					
ANR	5047803	Parameter	char * fname	1175:50:39335:39345	5047257	1	True				
ANR	5047804	ParameterType	char *		5047257	0					
ANR	5047805	Identifier	fname		5047257	1					
ANR	5047806	Parameter	bool binary	1176:27:39375:39385	5047257	2	True				
ANR	5047807	ParameterType	bool		5047257	0					
ANR	5047808	Identifier	binary		5047257	1					
ANR	5047809	Parameter	bool positionable	1176:40:39388:39404	5047257	3	True				
ANR	5047810	ParameterType	bool		5047257	0					
ANR	5047811	Identifier	positionable		5047257	1					
ANR	5047812	Parameter	FILE * * pfile	1176:59:39407:39419	5047257	4	True				
ANR	5047813	ParameterType	FILE * *		5047257	0					
ANR	5047814	Identifier	pfile		5047257	1					
ANR	5047815	CFGEntryNode	ENTRY		5047257		True				
ANR	5047816	CFGExitNode	EXIT		5047257		True				
ANR	5047817	Symbol	parsed . iodev -> procs		5047257						
ANR	5047818	Symbol	gp_open_printer		5047257						
ANR	5047819	Symbol	strchr		5047257						
ANR	5047820	Symbol	fmt		5047257						
ANR	5047821	Symbol	positionable		5047257						
ANR	5047822	Symbol	strlen		5047257						
ANR	5047823	Symbol	* * * dev		5047257						
ANR	5047824	Symbol	dev		5047257						
ANR	5047825	Symbol	& parsed		5047257						
ANR	5047826	Symbol	dev -> PageCount		5047257						
ANR	5047827	Symbol	parsed . len		5047257						
ANR	5047828	Symbol	* pfname		5047257						
ANR	5047829	Symbol	strcmp		5047257						
ANR	5047830	Symbol	fname		5047257						
ANR	5047831	Symbol	NULL		5047257						
ANR	5047832	Symbol	* parsed		5047257						
ANR	5047833	Symbol	dev -> memory -> gs_lib_ctx		5047257						
ANR	5047834	Symbol	gp_fmode_wb		5047257						
ANR	5047835	Symbol	& fmt		5047257						
ANR	5047836	Symbol	pfile		5047257						
ANR	5047837	Symbol	binary		5047257						
ANR	5047838	Symbol	true		5047257						
ANR	5047839	Symbol	parsed		5047257						
ANR	5047840	Symbol	gs_error_invalidfileaccess		5047257						
ANR	5047841	Symbol	* dev -> memory		5047257						
ANR	5047842	Symbol	* dev		5047257						
ANR	5047843	Symbol	count1		5047257						
ANR	5047844	Symbol	code		5047257						
ANR	5047845	Symbol	dev -> dname		5047257						
ANR	5047846	Symbol	* fmt		5047257						
ANR	5047847	Symbol	gp_setmode_binary		5047257						
ANR	5047848	Symbol	parsed . iodev -> dname		5047257						
ANR	5047849	Symbol	* pfile		5047257						
ANR	5047850	Symbol	parsed . iodev -> procs . gp_fopen		5047257						
ANR	5047851	Symbol	* * dev -> memory		5047257						
ANR	5047852	Symbol	* parsed . iodev		5047257						
ANR	5047853	Symbol	fmode		5047257						
ANR	5047854	Symbol	parsed . fname		5047257						
ANR	5047855	Symbol	gs_alloc_bytes		5047257						
ANR	5047856	Symbol	* dev -> memory -> gs_lib_ctx		5047257						
ANR	5047857	Symbol	gx_parse_output_file_name		5047257						
ANR	5047858	Symbol	dev -> memory -> gs_lib_ctx -> fstdout		5047257						
ANR	5047859	Symbol	false		5047257						
ANR	5047860	Symbol	gp_file_name_sizeof		5047257						
ANR	5047861	Symbol	* * dev		5047257						
ANR	5047862	Symbol	gs_error_undefinedfilename		5047257						
ANR	5047863	Symbol	pfname		5047257						
ANR	5047864	Symbol	gs_error_VMerror		5047257						
ANR	5047865	Symbol	dev -> memory		5047257						
ANR	5047866	Symbol	gs_note_error		5047257						
ANR	5047867	Symbol	iodev_default		5047257						
ANR	5047868	Symbol	parsed . iodev		5047257						
ANR	5047869	Function	gx_device_close_output_file	1261:0:42205:42949							
ANR	5047870	FunctionDef	"gx_device_close_output_file (const gx_device * dev , const char * fname , FILE * file)"		5047869	0					
ANR	5047871	CompoundStatement		1264:0:42319:42949	5047869	0					
ANR	5047872	IdentifierDeclStatement	gs_parsed_file_name_t parsed ;	1265:4:42325:42353	5047869	0	True				
ANR	5047873	IdentifierDecl	parsed		5047869	0					
ANR	5047874	IdentifierDeclType	gs_parsed_file_name_t		5047869	0					
ANR	5047875	Identifier	parsed		5047869	1					
ANR	5047876	IdentifierDeclStatement	const char * fmt ;	1266:4:42359:42374	5047869	1	True				
ANR	5047877	IdentifierDecl	* fmt		5047869	0					
ANR	5047878	IdentifierDeclType	const char *		5047869	0					
ANR	5047879	Identifier	fmt		5047869	1					
ANR	5047880	IdentifierDeclStatement	"int code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory ) ;"	1267:4:42380:42507	5047869	2	True				
ANR	5047881	IdentifierDecl	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		5047869	0					
ANR	5047882	IdentifierDeclType	int		5047869	0					
ANR	5047883	Identifier	code		5047869	1					
ANR	5047884	AssignmentExpression	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		5047869	2		=			
ANR	5047885	Identifier	code		5047869	0					
ANR	5047886	CallExpression	"gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		5047869	1					
ANR	5047887	Callee	gx_parse_output_file_name		5047869	0					
ANR	5047888	Identifier	gx_parse_output_file_name		5047869	0					
ANR	5047889	ArgumentList	& parsed		5047869	1					
ANR	5047890	Argument	& parsed		5047869	0					
ANR	5047891	UnaryOperationExpression	& parsed		5047869	0					
ANR	5047892	UnaryOperator	&		5047869	0					
ANR	5047893	Identifier	parsed		5047869	1					
ANR	5047894	Argument	& fmt		5047869	1					
ANR	5047895	UnaryOperationExpression	& fmt		5047869	0					
ANR	5047896	UnaryOperator	&		5047869	0					
ANR	5047897	Identifier	fmt		5047869	1					
ANR	5047898	Argument	fname		5047869	2					
ANR	5047899	Identifier	fname		5047869	0					
ANR	5047900	Argument	strlen ( fname )		5047869	3					
ANR	5047901	CallExpression	strlen ( fname )		5047869	0					
ANR	5047902	Callee	strlen		5047869	0					
ANR	5047903	Identifier	strlen		5047869	0					
ANR	5047904	ArgumentList	fname		5047869	1					
ANR	5047905	Argument	fname		5047869	0					
ANR	5047906	Identifier	fname		5047869	0					
ANR	5047907	Argument	dev -> memory		5047869	4					
ANR	5047908	PtrMemberAccess	dev -> memory		5047869	0					
ANR	5047909	Identifier	dev		5047869	0					
ANR	5047910	Identifier	memory		5047869	1					
ANR	5047911	IfStatement	if ( code < 0 )		5047869	3					
ANR	5047912	Condition	code < 0	1270:8:42518:42525	5047869	0	True				
ANR	5047913	RelationalExpression	code < 0		5047869	0		<			
ANR	5047914	Identifier	code		5047869	0					
ANR	5047915	PrimaryExpression	0		5047869	1					
ANR	5047916	ReturnStatement	return code ;	1271:8:42536:42547	5047869	1	True				
ANR	5047917	Identifier	code		5047869	0					
ANR	5047918	IfStatement	if ( parsed . iodev )		5047869	4					
ANR	5047919	Condition	parsed . iodev	1272:8:42557:42568	5047869	0	True				
ANR	5047920	MemberAccess	parsed . iodev		5047869	0					
ANR	5047921	Identifier	parsed		5047869	0					
ANR	5047922	Identifier	iodev		5047869	1					
ANR	5047923	CompoundStatement		9:22:251:251	5047869	1					
ANR	5047924	IfStatement	"if ( ! strcmp ( parsed . iodev -> dname , ""%stdout%"" ) )"		5047869	0					
ANR	5047925	Condition	"! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"	1273:12:42585:42624	5047869	0	True				
ANR	5047926	UnaryOperationExpression	"! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		5047869	0					
ANR	5047927	UnaryOperator	!		5047869	0					
ANR	5047928	CallExpression	"strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		5047869	1					
ANR	5047929	Callee	strcmp		5047869	0					
ANR	5047930	Identifier	strcmp		5047869	0					
ANR	5047931	ArgumentList	parsed . iodev -> dname		5047869	1					
ANR	5047932	Argument	parsed . iodev -> dname		5047869	0					
ANR	5047933	PtrMemberAccess	parsed . iodev -> dname		5047869	0					
ANR	5047934	MemberAccess	parsed . iodev		5047869	0					
ANR	5047935	Identifier	parsed		5047869	0					
ANR	5047936	Identifier	iodev		5047869	1					
ANR	5047937	Identifier	dname		5047869	1					
ANR	5047938	Argument	"""%stdout%"""		5047869	1					
ANR	5047939	PrimaryExpression	"""%stdout%"""		5047869	0					
ANR	5047940	ReturnStatement	return 0 ;	1274:12:42639:42647	5047869	1	True				
ANR	5047941	PrimaryExpression	0		5047869	0					
ANR	5047942	IfStatement	if ( parsed . iodev != iodev_default ( dev -> memory ) )		5047869	1					
ANR	5047943	Condition	parsed . iodev != iodev_default ( dev -> memory )	1276:12:42738:42779	5047869	0	True				
ANR	5047944	EqualityExpression	parsed . iodev != iodev_default ( dev -> memory )		5047869	0		!=			
ANR	5047945	MemberAccess	parsed . iodev		5047869	0					
ANR	5047946	Identifier	parsed		5047869	0					
ANR	5047947	Identifier	iodev		5047869	1					
ANR	5047948	CallExpression	iodev_default ( dev -> memory )		5047869	1					
ANR	5047949	Callee	iodev_default		5047869	0					
ANR	5047950	Identifier	iodev_default		5047869	0					
ANR	5047951	ArgumentList	dev -> memory		5047869	1					
ANR	5047952	Argument	dev -> memory		5047869	0					
ANR	5047953	PtrMemberAccess	dev -> memory		5047869	0					
ANR	5047954	Identifier	dev		5047869	0					
ANR	5047955	Identifier	memory		5047869	1					
ANR	5047956	ReturnStatement	"return parsed . iodev -> procs . fclose ( parsed . iodev , file ) ;"	1277:12:42794:42847	5047869	1	True				
ANR	5047957	CallExpression	"parsed . iodev -> procs . fclose ( parsed . iodev , file )"		5047869	0					
ANR	5047958	Callee	parsed . iodev -> procs . fclose		5047869	0					
ANR	5047959	MemberAccess	parsed . iodev -> procs . fclose		5047869	0					
ANR	5047960	PtrMemberAccess	parsed . iodev -> procs		5047869	0					
ANR	5047961	MemberAccess	parsed . iodev		5047869	0					
ANR	5047962	Identifier	parsed		5047869	0					
ANR	5047963	Identifier	iodev		5047869	1					
ANR	5047964	Identifier	procs		5047869	1					
ANR	5047965	Identifier	fclose		5047869	1					
ANR	5047966	ArgumentList	parsed . iodev		5047869	1					
ANR	5047967	Argument	parsed . iodev		5047869	0					
ANR	5047968	MemberAccess	parsed . iodev		5047869	0					
ANR	5047969	Identifier	parsed		5047869	0					
ANR	5047970	Identifier	iodev		5047869	1					
ANR	5047971	Argument	file		5047869	1					
ANR	5047972	Identifier	file		5047869	0					
ANR	5047973	ExpressionStatement	"gp_close_printer ( dev -> memory , file , ( parsed . fname ? parsed . fname : fname ) )"	1279:4:42859:42933	5047869	5	True				
ANR	5047974	CallExpression	"gp_close_printer ( dev -> memory , file , ( parsed . fname ? parsed . fname : fname ) )"		5047869	0					
ANR	5047975	Callee	gp_close_printer		5047869	0					
ANR	5047976	Identifier	gp_close_printer		5047869	0					
ANR	5047977	ArgumentList	dev -> memory		5047869	1					
ANR	5047978	Argument	dev -> memory		5047869	0					
ANR	5047979	PtrMemberAccess	dev -> memory		5047869	0					
ANR	5047980	Identifier	dev		5047869	0					
ANR	5047981	Identifier	memory		5047869	1					
ANR	5047982	Argument	file		5047869	1					
ANR	5047983	Identifier	file		5047869	0					
ANR	5047984	Argument	parsed . fname ? parsed . fname : fname		5047869	2					
ANR	5047985	ConditionalExpression	parsed . fname ? parsed . fname : fname		5047869	0					
ANR	5047986	Condition	parsed . fname		5047869	0					
ANR	5047987	MemberAccess	parsed . fname		5047869	0					
ANR	5047988	Identifier	parsed		5047869	0					
ANR	5047989	Identifier	fname		5047869	1					
ANR	5047990	MemberAccess	parsed . fname		5047869	1					
ANR	5047991	Identifier	parsed		5047869	0					
ANR	5047992	Identifier	fname		5047869	1					
ANR	5047993	Identifier	fname		5047869	2					
ANR	5047994	ReturnStatement	return 0 ;	1280:4:42939:42947	5047869	6	True				
ANR	5047995	PrimaryExpression	0		5047869	0					
ANR	5047996	ReturnType	int		5047869	1					
ANR	5047997	Identifier	gx_device_close_output_file		5047869	2					
ANR	5047998	ParameterList	"const gx_device * dev , const char * fname , FILE * file"		5047869	3					
ANR	5047999	Parameter	const gx_device * dev	1262:28:42237:42257	5047869	0	True				
ANR	5048000	ParameterType	const gx_device *		5047869	0					
ANR	5048001	Identifier	dev		5047869	1					
ANR	5048002	Parameter	const char * fname	1262:51:42260:42276	5047869	1	True				
ANR	5048003	ParameterType	const char *		5047869	0					
ANR	5048004	Identifier	fname		5047869	1					
ANR	5048005	Parameter	FILE * file	1263:28:42307:42316	5047869	2	True				
ANR	5048006	ParameterType	FILE *		5047869	0					
ANR	5048007	Identifier	file		5047869	1					
ANR	5048008	CFGEntryNode	ENTRY		5047869		True				
ANR	5048009	CFGExitNode	EXIT		5047869		True				
ANR	5048010	Symbol	* dev		5047869						
ANR	5048011	Symbol	strcmp		5047869						
ANR	5048012	Symbol	fname		5047869						
ANR	5048013	Symbol	code		5047869						
ANR	5048014	Symbol	* parsed		5047869						
ANR	5048015	Symbol	parsed . iodev -> procs		5047869						
ANR	5048016	Symbol	gx_parse_output_file_name		5047869						
ANR	5048017	Symbol	parsed . iodev -> dname		5047869						
ANR	5048018	Symbol	fmt		5047869						
ANR	5048019	Symbol	parsed . iodev -> procs . fclose		5047869						
ANR	5048020	Symbol	strlen		5047869						
ANR	5048021	Symbol	dev -> memory		5047869						
ANR	5048022	Symbol	file		5047869						
ANR	5048023	Symbol	iodev_default		5047869						
ANR	5048024	Symbol	dev		5047869						
ANR	5048025	Symbol	& parsed		5047869						
ANR	5048026	Symbol	& fmt		5047869						
ANR	5048027	Symbol	* parsed . iodev		5047869						
ANR	5048028	Symbol	parsed		5047869						
ANR	5048029	Symbol	parsed . fname		5047869						
ANR	5048030	Symbol	parsed . iodev		5047869						
ANR	5048031	Function	gx_color_info_equal	1283:0:42952:44137							
ANR	5048032	FunctionDef	"gx_color_info_equal (const gx_device_color_info * p1 , const gx_device_color_info * p2)"		5048031	0					
ANR	5048033	CompoundStatement		1284:0:43043:44137	5048031	0					
ANR	5048034	IfStatement	if ( p1 -> anti_alias . graphics_bits != p2 -> anti_alias . graphics_bits )		5048031	0					
ANR	5048035	Condition	p1 -> anti_alias . graphics_bits != p2 -> anti_alias . graphics_bits	1285:8:43053:43112	5048031	0	True				
ANR	5048036	EqualityExpression	p1 -> anti_alias . graphics_bits != p2 -> anti_alias . graphics_bits		5048031	0		!=			
ANR	5048037	MemberAccess	p1 -> anti_alias . graphics_bits		5048031	0					
ANR	5048038	PtrMemberAccess	p1 -> anti_alias		5048031	0					
ANR	5048039	Identifier	p1		5048031	0					
ANR	5048040	Identifier	anti_alias		5048031	1					
ANR	5048041	Identifier	graphics_bits		5048031	1					
ANR	5048042	MemberAccess	p2 -> anti_alias . graphics_bits		5048031	1					
ANR	5048043	PtrMemberAccess	p2 -> anti_alias		5048031	0					
ANR	5048044	Identifier	p2		5048031	0					
ANR	5048045	Identifier	anti_alias		5048031	1					
ANR	5048046	Identifier	graphics_bits		5048031	1					
ANR	5048047	ReturnStatement	return false ;	1286:8:43123:43135	5048031	1	True				
ANR	5048048	Identifier	false		5048031	0					
ANR	5048049	IfStatement	if ( p1 -> anti_alias . text_bits != p2 -> anti_alias . text_bits )		5048031	1					
ANR	5048050	Condition	p1 -> anti_alias . text_bits != p2 -> anti_alias . text_bits	1287:8:43145:43196	5048031	0	True				
ANR	5048051	EqualityExpression	p1 -> anti_alias . text_bits != p2 -> anti_alias . text_bits		5048031	0		!=			
ANR	5048052	MemberAccess	p1 -> anti_alias . text_bits		5048031	0					
ANR	5048053	PtrMemberAccess	p1 -> anti_alias		5048031	0					
ANR	5048054	Identifier	p1		5048031	0					
ANR	5048055	Identifier	anti_alias		5048031	1					
ANR	5048056	Identifier	text_bits		5048031	1					
ANR	5048057	MemberAccess	p2 -> anti_alias . text_bits		5048031	1					
ANR	5048058	PtrMemberAccess	p2 -> anti_alias		5048031	0					
ANR	5048059	Identifier	p2		5048031	0					
ANR	5048060	Identifier	anti_alias		5048031	1					
ANR	5048061	Identifier	text_bits		5048031	1					
ANR	5048062	ReturnStatement	return false ;	1288:8:43207:43219	5048031	1	True				
ANR	5048063	Identifier	false		5048031	0					
ANR	5048064	IfStatement	if ( p1 -> black_component != p2 -> black_component )		5048031	2					
ANR	5048065	Condition	p1 -> black_component != p2 -> black_component	1289:8:43229:43270	5048031	0	True				
ANR	5048066	EqualityExpression	p1 -> black_component != p2 -> black_component		5048031	0		!=			
ANR	5048067	PtrMemberAccess	p1 -> black_component		5048031	0					
ANR	5048068	Identifier	p1		5048031	0					
ANR	5048069	Identifier	black_component		5048031	1					
ANR	5048070	PtrMemberAccess	p2 -> black_component		5048031	1					
ANR	5048071	Identifier	p2		5048031	0					
ANR	5048072	Identifier	black_component		5048031	1					
ANR	5048073	ReturnStatement	return false ;	1290:8:43281:43293	5048031	1	True				
ANR	5048074	Identifier	false		5048031	0					
ANR	5048075	IfStatement	"if ( strcmp ( p1 -> cm_name , p2 -> cm_name ) != 0 )"		5048031	3					
ANR	5048076	Condition	"strcmp ( p1 -> cm_name , p2 -> cm_name ) != 0"	1291:8:43303:43339	5048031	0	True				
ANR	5048077	EqualityExpression	"strcmp ( p1 -> cm_name , p2 -> cm_name ) != 0"		5048031	0		!=			
ANR	5048078	CallExpression	"strcmp ( p1 -> cm_name , p2 -> cm_name )"		5048031	0					
ANR	5048079	Callee	strcmp		5048031	0					
ANR	5048080	Identifier	strcmp		5048031	0					
ANR	5048081	ArgumentList	p1 -> cm_name		5048031	1					
ANR	5048082	Argument	p1 -> cm_name		5048031	0					
ANR	5048083	PtrMemberAccess	p1 -> cm_name		5048031	0					
ANR	5048084	Identifier	p1		5048031	0					
ANR	5048085	Identifier	cm_name		5048031	1					
ANR	5048086	Argument	p2 -> cm_name		5048031	1					
ANR	5048087	PtrMemberAccess	p2 -> cm_name		5048031	0					
ANR	5048088	Identifier	p2		5048031	0					
ANR	5048089	Identifier	cm_name		5048031	1					
ANR	5048090	PrimaryExpression	0		5048031	1					
ANR	5048091	ReturnStatement	return false ;	1292:8:43350:43362	5048031	1	True				
ANR	5048092	Identifier	false		5048031	0					
ANR	5048093	IfStatement	if ( p1 -> depth != p2 -> depth )		5048031	4					
ANR	5048094	Condition	p1 -> depth != p2 -> depth	1293:8:43372:43393	5048031	0	True				
ANR	5048095	EqualityExpression	p1 -> depth != p2 -> depth		5048031	0		!=			
ANR	5048096	PtrMemberAccess	p1 -> depth		5048031	0					
ANR	5048097	Identifier	p1		5048031	0					
ANR	5048098	Identifier	depth		5048031	1					
ANR	5048099	PtrMemberAccess	p2 -> depth		5048031	1					
ANR	5048100	Identifier	p2		5048031	0					
ANR	5048101	Identifier	depth		5048031	1					
ANR	5048102	ReturnStatement	return false ;	1294:8:43404:43416	5048031	1	True				
ANR	5048103	Identifier	false		5048031	0					
ANR	5048104	IfStatement	if ( p1 -> dither_colors != p2 -> dither_colors )		5048031	5					
ANR	5048105	Condition	p1 -> dither_colors != p2 -> dither_colors	1295:8:43426:43463	5048031	0	True				
ANR	5048106	EqualityExpression	p1 -> dither_colors != p2 -> dither_colors		5048031	0		!=			
ANR	5048107	PtrMemberAccess	p1 -> dither_colors		5048031	0					
ANR	5048108	Identifier	p1		5048031	0					
ANR	5048109	Identifier	dither_colors		5048031	1					
ANR	5048110	PtrMemberAccess	p2 -> dither_colors		5048031	1					
ANR	5048111	Identifier	p2		5048031	0					
ANR	5048112	Identifier	dither_colors		5048031	1					
ANR	5048113	ReturnStatement	return false ;	1296:8:43474:43486	5048031	1	True				
ANR	5048114	Identifier	false		5048031	0					
ANR	5048115	IfStatement	if ( p1 -> dither_grays != p2 -> dither_grays )		5048031	6					
ANR	5048116	Condition	p1 -> dither_grays != p2 -> dither_grays	1297:8:43496:43531	5048031	0	True				
ANR	5048117	EqualityExpression	p1 -> dither_grays != p2 -> dither_grays		5048031	0		!=			
ANR	5048118	PtrMemberAccess	p1 -> dither_grays		5048031	0					
ANR	5048119	Identifier	p1		5048031	0					
ANR	5048120	Identifier	dither_grays		5048031	1					
ANR	5048121	PtrMemberAccess	p2 -> dither_grays		5048031	1					
ANR	5048122	Identifier	p2		5048031	0					
ANR	5048123	Identifier	dither_grays		5048031	1					
ANR	5048124	ReturnStatement	return false ;	1298:8:43542:43554	5048031	1	True				
ANR	5048125	Identifier	false		5048031	0					
ANR	5048126	IfStatement	if ( p1 -> gray_index != p2 -> gray_index )		5048031	7					
ANR	5048127	Condition	p1 -> gray_index != p2 -> gray_index	1299:8:43564:43595	5048031	0	True				
ANR	5048128	EqualityExpression	p1 -> gray_index != p2 -> gray_index		5048031	0		!=			
ANR	5048129	PtrMemberAccess	p1 -> gray_index		5048031	0					
ANR	5048130	Identifier	p1		5048031	0					
ANR	5048131	Identifier	gray_index		5048031	1					
ANR	5048132	PtrMemberAccess	p2 -> gray_index		5048031	1					
ANR	5048133	Identifier	p2		5048031	0					
ANR	5048134	Identifier	gray_index		5048031	1					
ANR	5048135	ReturnStatement	return false ;	1300:8:43606:43618	5048031	1	True				
ANR	5048136	Identifier	false		5048031	0					
ANR	5048137	IfStatement	if ( p1 -> max_color != p2 -> max_color )		5048031	8					
ANR	5048138	Condition	p1 -> max_color != p2 -> max_color	1301:8:43628:43657	5048031	0	True				
ANR	5048139	EqualityExpression	p1 -> max_color != p2 -> max_color		5048031	0		!=			
ANR	5048140	PtrMemberAccess	p1 -> max_color		5048031	0					
ANR	5048141	Identifier	p1		5048031	0					
ANR	5048142	Identifier	max_color		5048031	1					
ANR	5048143	PtrMemberAccess	p2 -> max_color		5048031	1					
ANR	5048144	Identifier	p2		5048031	0					
ANR	5048145	Identifier	max_color		5048031	1					
ANR	5048146	ReturnStatement	return false ;	1302:8:43668:43680	5048031	1	True				
ANR	5048147	Identifier	false		5048031	0					
ANR	5048148	IfStatement	if ( p1 -> max_components != p2 -> max_components )		5048031	9					
ANR	5048149	Condition	p1 -> max_components != p2 -> max_components	1303:8:43690:43729	5048031	0	True				
ANR	5048150	EqualityExpression	p1 -> max_components != p2 -> max_components		5048031	0		!=			
ANR	5048151	PtrMemberAccess	p1 -> max_components		5048031	0					
ANR	5048152	Identifier	p1		5048031	0					
ANR	5048153	Identifier	max_components		5048031	1					
ANR	5048154	PtrMemberAccess	p2 -> max_components		5048031	1					
ANR	5048155	Identifier	p2		5048031	0					
ANR	5048156	Identifier	max_components		5048031	1					
ANR	5048157	ReturnStatement	return false ;	1304:8:43740:43752	5048031	1	True				
ANR	5048158	Identifier	false		5048031	0					
ANR	5048159	IfStatement	if ( p1 -> opmode != p2 -> opmode )		5048031	10					
ANR	5048160	Condition	p1 -> opmode != p2 -> opmode	1305:8:43762:43785	5048031	0	True				
ANR	5048161	EqualityExpression	p1 -> opmode != p2 -> opmode		5048031	0		!=			
ANR	5048162	PtrMemberAccess	p1 -> opmode		5048031	0					
ANR	5048163	Identifier	p1		5048031	0					
ANR	5048164	Identifier	opmode		5048031	1					
ANR	5048165	PtrMemberAccess	p2 -> opmode		5048031	1					
ANR	5048166	Identifier	p2		5048031	0					
ANR	5048167	Identifier	opmode		5048031	1					
ANR	5048168	ReturnStatement	return false ;	1306:8:43796:43808	5048031	1	True				
ANR	5048169	Identifier	false		5048031	0					
ANR	5048170	IfStatement	if ( p1 -> polarity != p2 -> polarity )		5048031	11					
ANR	5048171	Condition	p1 -> polarity != p2 -> polarity	1307:8:43818:43845	5048031	0	True				
ANR	5048172	EqualityExpression	p1 -> polarity != p2 -> polarity		5048031	0		!=			
ANR	5048173	PtrMemberAccess	p1 -> polarity		5048031	0					
ANR	5048174	Identifier	p1		5048031	0					
ANR	5048175	Identifier	polarity		5048031	1					
ANR	5048176	PtrMemberAccess	p2 -> polarity		5048031	1					
ANR	5048177	Identifier	p2		5048031	0					
ANR	5048178	Identifier	polarity		5048031	1					
ANR	5048179	ReturnStatement	return false ;	1308:8:43856:43868	5048031	1	True				
ANR	5048180	Identifier	false		5048031	0					
ANR	5048181	IfStatement	if ( p1 -> process_comps != p2 -> process_comps )		5048031	12					
ANR	5048182	Condition	p1 -> process_comps != p2 -> process_comps	1309:8:43878:43915	5048031	0	True				
ANR	5048183	EqualityExpression	p1 -> process_comps != p2 -> process_comps		5048031	0		!=			
ANR	5048184	PtrMemberAccess	p1 -> process_comps		5048031	0					
ANR	5048185	Identifier	p1		5048031	0					
ANR	5048186	Identifier	process_comps		5048031	1					
ANR	5048187	PtrMemberAccess	p2 -> process_comps		5048031	1					
ANR	5048188	Identifier	p2		5048031	0					
ANR	5048189	Identifier	process_comps		5048031	1					
ANR	5048190	ReturnStatement	return false ;	1310:8:43926:43938	5048031	1	True				
ANR	5048191	Identifier	false		5048031	0					
ANR	5048192	IfStatement	if ( p1 -> separable_and_linear != p2 -> separable_and_linear )		5048031	13					
ANR	5048193	Condition	p1 -> separable_and_linear != p2 -> separable_and_linear	1311:8:43948:43999	5048031	0	True				
ANR	5048194	EqualityExpression	p1 -> separable_and_linear != p2 -> separable_and_linear		5048031	0		!=			
ANR	5048195	PtrMemberAccess	p1 -> separable_and_linear		5048031	0					
ANR	5048196	Identifier	p1		5048031	0					
ANR	5048197	Identifier	separable_and_linear		5048031	1					
ANR	5048198	PtrMemberAccess	p2 -> separable_and_linear		5048031	1					
ANR	5048199	Identifier	p2		5048031	0					
ANR	5048200	Identifier	separable_and_linear		5048031	1					
ANR	5048201	ReturnStatement	return false ;	1312:8:44010:44022	5048031	1	True				
ANR	5048202	Identifier	false		5048031	0					
ANR	5048203	IfStatement	if ( p1 -> use_antidropout_downscaler != p2 -> use_antidropout_downscaler )		5048031	14					
ANR	5048204	Condition	p1 -> use_antidropout_downscaler != p2 -> use_antidropout_downscaler	1313:8:44032:44095	5048031	0	True				
ANR	5048205	EqualityExpression	p1 -> use_antidropout_downscaler != p2 -> use_antidropout_downscaler		5048031	0		!=			
ANR	5048206	PtrMemberAccess	p1 -> use_antidropout_downscaler		5048031	0					
ANR	5048207	Identifier	p1		5048031	0					
ANR	5048208	Identifier	use_antidropout_downscaler		5048031	1					
ANR	5048209	PtrMemberAccess	p2 -> use_antidropout_downscaler		5048031	1					
ANR	5048210	Identifier	p2		5048031	0					
ANR	5048211	Identifier	use_antidropout_downscaler		5048031	1					
ANR	5048212	ReturnStatement	return false ;	1314:8:44106:44118	5048031	1	True				
ANR	5048213	Identifier	false		5048031	0					
ANR	5048214	ReturnStatement	return true ;	1315:4:44124:44135	5048031	15	True				
ANR	5048215	Identifier	true		5048031	0					
ANR	5048216	ReturnType	bool		5048031	1					
ANR	5048217	Identifier	gx_color_info_equal		5048031	2					
ANR	5048218	ParameterList	"const gx_device_color_info * p1 , const gx_device_color_info * p2"		5048031	3					
ANR	5048219	Parameter	const gx_device_color_info * p1	1283:25:42977:43007	5048031	0	True				
ANR	5048220	ParameterType	const gx_device_color_info *		5048031	0					
ANR	5048221	Identifier	p1		5048031	1					
ANR	5048222	Parameter	const gx_device_color_info * p2	1283:58:43010:43040	5048031	1	True				
ANR	5048223	ParameterType	const gx_device_color_info *		5048031	0					
ANR	5048224	Identifier	p2		5048031	1					
ANR	5048225	CFGEntryNode	ENTRY		5048031		True				
ANR	5048226	CFGExitNode	EXIT		5048031		True				
ANR	5048227	Symbol	p1		5048031						
ANR	5048228	Symbol	p2		5048031						
ANR	5048229	Symbol	p2 -> anti_alias . text_bits		5048031						
ANR	5048230	Symbol	p1 -> use_antidropout_downscaler		5048031						
ANR	5048231	Symbol	p2 -> anti_alias		5048031						
ANR	5048232	Symbol	p2 -> opmode		5048031						
ANR	5048233	Symbol	p2 -> anti_alias . graphics_bits		5048031						
ANR	5048234	Symbol	p1 -> black_component		5048031						
ANR	5048235	Symbol	p1 -> gray_index		5048031						
ANR	5048236	Symbol	p2 -> black_component		5048031						
ANR	5048237	Symbol	p2 -> dither_grays		5048031						
ANR	5048238	Symbol	p1 -> process_comps		5048031						
ANR	5048239	Symbol	p1 -> max_components		5048031						
ANR	5048240	Symbol	p1 -> cm_name		5048031						
ANR	5048241	Symbol	p1 -> dither_colors		5048031						
ANR	5048242	Symbol	p1 -> anti_alias . graphics_bits		5048031						
ANR	5048243	Symbol	p2 -> max_color		5048031						
ANR	5048244	Symbol	p2 -> cm_name		5048031						
ANR	5048245	Symbol	p1 -> max_color		5048031						
ANR	5048246	Symbol	p1 -> dither_grays		5048031						
ANR	5048247	Symbol	p1 -> depth		5048031						
ANR	5048248	Symbol	strcmp		5048031						
ANR	5048249	Symbol	* p1		5048031						
ANR	5048250	Symbol	p2 -> dither_colors		5048031						
ANR	5048251	Symbol	p1 -> anti_alias		5048031						
ANR	5048252	Symbol	p2 -> depth		5048031						
ANR	5048253	Symbol	false		5048031						
ANR	5048254	Symbol	p1 -> polarity		5048031						
ANR	5048255	Symbol	* p2		5048031						
ANR	5048256	Symbol	p2 -> gray_index		5048031						
ANR	5048257	Symbol	p2 -> polarity		5048031						
ANR	5048258	Symbol	p2 -> use_antidropout_downscaler		5048031						
ANR	5048259	Symbol	p1 -> separable_and_linear		5048031						
ANR	5048260	Symbol	p2 -> max_components		5048031						
ANR	5048261	Symbol	p2 -> process_comps		5048031						
ANR	5048262	Symbol	true		5048031						
ANR	5048263	Symbol	p2 -> separable_and_linear		5048031						
ANR	5048264	Symbol	p1 -> anti_alias . text_bits		5048031						
ANR	5048265	Symbol	p1 -> opmode		5048031						
