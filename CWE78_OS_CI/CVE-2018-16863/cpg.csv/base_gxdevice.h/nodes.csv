command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1003882	File	data/converged/CVE-2018-16863_ghostpdl/base_gxdevice.h								
ANR	1003883	DeclStmt									
ANR	1003884	Decl							define gx_default_map_rgb_color gx_default_w_b_map_rgb_color define gx_default_map_color_rgb gx_default_w_b_map_color_rgb	define gx_default_map_rgb_color gx_default_w_b_map_rgb_color define gx_default_map_color_rgb gx_default_w_b_map_color_rgb ( gx_default_tile_rectangle )	dev_proc_tile_rectangle
ANR	1003885	DeclStmt									
ANR	1003886	Decl							define gx_non_imaging_create_compositor gx_null_create_compositor	define gx_non_imaging_create_compositor gx_null_create_compositor ( gx_default_b_w_map_rgb_color )	dev_proc_map_rgb_color
ANR	1003887	DeclStmt									
ANR	1003888	Decl							define gx_default_cmyk_map_cmyk_color cmyk_8bit_map_cmyk_color	define gx_default_cmyk_map_cmyk_color cmyk_8bit_map_cmyk_color ( gx_default_rgb_map_rgb_color )	dev_proc_map_rgb_color
ANR	1003889	DeclStmt									
ANR	1003890	Decl							define gx_forward_get_alpha_bits gx_default_get_alpha_bits	define gx_forward_get_alpha_bits gx_default_get_alpha_bits ( gx_forward_copy_alpha )	dev_proc_copy_alpha
ANR	1003891	DeclStmt									
ANR	1003892	Decl							define gx_forward_image_data gx_default_image_data define gx_forward_end_image gx_default_end_image	define gx_forward_image_data gx_default_image_data define gx_forward_end_image gx_default_end_image ( gx_forward_strip_tile_rectangle )	dev_proc_strip_tile_rectangle
ANR	1003893	DeclStmt									
ANR	1003894	Decl							int	"int ( gx_device * dev , char * Param , void * list )"	gx_default_get_param
ANR	1003895	DeclStmt									
ANR	1003896	Decl							void	void ( gx_device * )	gx_device_set_procs
ANR	1003897	DeclStmt									
ANR	1003898	Decl							void	void ( gx_device * )	gx_device_fill_in_procs
ANR	1003899	DeclStmt									
ANR	1003900	Decl							void	void ( gx_device_forward * )	gx_device_forward_fill_in_procs
ANR	1003901	DeclStmt									
ANR	1003902	Decl							void	void ( gx_device_forward * )	gx_device_forward_color_procs
ANR	1003903	DeclStmt									
ANR	1003904	Decl							void	void ( gx_device * dev )	check_device_separable
ANR	1003905	DeclStmt									
ANR	1003906	Decl							void	void ( gx_device * dev )	check_device_compatible_encoding
ANR	1003907	DeclStmt									
ANR	1003908	Decl							void	void ( gx_device * dev )	set_linear_color_bits_mask_shift
ANR	1003909	DeclStmt									
ANR	1003910	Decl							void	"void ( gx_device * dev , const gx_device * target )"	gx_device_copy_color_procs
ANR	1003911	DeclStmt									
ANR	1003912	Decl							gx_color_index	gx_color_index ( gx_device * dev )	gx_device_black
ANR	1003913	DeclStmt									
ANR	1003914	Decl							gx_color_index	gx_color_index ( gx_device * dev )	gx_device_white
ANR	1003915	DeclStmt									
ANR	1003916	Decl							void	void ( gx_device * dev )	gx_device_decache_colors
ANR	1003917	DeclStmt									
ANR	1003918	Decl							void	"void ( gx_device * dev , const gx_device * target )"	gx_device_copy_color_params
ANR	1003919	DeclStmt									
ANR	1003920	Decl							void	"void ( gx_device * dev , const gx_device * target )"	gx_device_copy_params
ANR	1003921	DeclStmt									
ANR	1003922	Decl							int	"int ( gs_parsed_file_name_t * pfn , const char * * pfmt , const char * fname , uint len , gs_memory_t * memory )"	gx_parse_output_file_name
ANR	1003923	DeclStmt									
ANR	1003924	Decl							bool	"bool ( const char * fname , gs_memory_t * memory )"	gx_outputfile_is_separate_pages
ANR	1003925	DeclStmt									
ANR	1003926	Decl							int	"int ( const gx_device * dev , char * fname , bool binary , bool positionable , FILE * * pfile )"	gx_device_open_output_file
ANR	1003927	DeclStmt									
ANR	1003928	Decl							int	"int ( const gx_device * dev , const char * fname , FILE * file )"	gx_device_close_output_file
ANR	1003929	DeclStmt									
ANR	1003930	Decl							int	"int ( const gx_device * dev , const char * fname )"	gx_device_delete_output_file
ANR	1003931	DeclStmt									
ANR	1003932	Decl							BEGIN	"BEGIN ( dev , x , y , w , h )"	fit_fill_xy
ANR	1003933	DeclStmt									
ANR	1003934	Decl							BEGIN	"BEGIN ( dev , x , y , w , h )"	fit_fill_xywh
ANR	1003935	DeclStmt									
ANR	1003936	Decl							BEGIN	"BEGIN ( dev , data , data_x , raster , id , x , y , w , h )"	fit_copy_xyw
ANR	1003937	ClassDef	gdev_input_media_s	618:8:27757:27931							
ANR	1003938	DeclStmt									
ANR	1003939	Decl							float	float [ 4 ]	PageSize
ANR	1003940	DeclStmt									
ANR	1003941	Decl							const char	const char *	MediaColor
ANR	1003942	DeclStmt									
ANR	1003943	Decl							float	float	MediaWeight
ANR	1003944	DeclStmt									
ANR	1003945	Decl							const char	const char *	MediaType
ANR	1003946	DeclStmt									
ANR	1003947	Decl							gdev_input_media_s	gdev_input_media_s	gdev_input_media_t
ANR	1003948	DeclStmt									
ANR	1003949	Decl							const gdev_input_media_t	const gdev_input_media_t	gdev_input_media_default
ANR	1003950	DeclStmt									
ANR	1003951	Decl							void	void ( gdev_input_media_t * pim )	gdev_input_media_init
ANR	1003952	DeclStmt									
ANR	1003953	Decl							int	"int ( gs_param_list * mlist , gs_param_dict * pdict , int count )"	gdev_begin_input_media
ANR	1003954	DeclStmt									
ANR	1003955	Decl							int	"int ( int index , gs_param_dict * pdict , double width_points , double height_points )"	gdev_write_input_page_size
ANR	1003956	DeclStmt									
ANR	1003957	Decl							int	"int ( int index , gs_param_dict * pdict , const gdev_input_media_t * pim )"	gdev_write_input_media
ANR	1003958	DeclStmt									
ANR	1003959	Decl							int	"int ( gs_param_list * mlist , gs_param_dict * pdict )"	gdev_end_input_media
ANR	1003960	ClassDef	gdev_output_media_s	641:8:28569:28647							
ANR	1003961	DeclStmt									
ANR	1003962	Decl							const char	const char *	OutputType
ANR	1003963	DeclStmt									
ANR	1003964	Decl							gdev_output_media_s	gdev_output_media_s	gdev_output_media_t
ANR	1003965	DeclStmt									
ANR	1003966	Decl							const gdev_output_media_t	const gdev_output_media_t	gdev_output_media_default
ANR	1003967	DeclStmt									
ANR	1003968	Decl							int	"int ( gs_param_list * mlist , gs_param_dict * pdict , int count )"	gdev_begin_output_media
ANR	1003969	DeclStmt									
ANR	1003970	Decl							int	"int ( int index , gs_param_dict * pdict , const gdev_output_media_t * pom )"	gdev_write_output_media
ANR	1003971	DeclStmt									
ANR	1003972	Decl							void	"void ( gs_param_string * icc_pro , gx_device * dev )"	gx_default_put_icc_dir
ANR	1003973	DeclStmt									
ANR	1003974	Decl							int	"int ( gs_param_list * mlist , gs_param_dict * pdict )"	gdev_end_output_media
ANR	1003975	DeclStmt									
ANR	1003976	Decl							void	"void ( gx_device * dev , int le_req )"	gx_device_request_leadingedge
ANR	1003977	DeclStmt									
ANR	1003978	Decl							int	int ( const gs_composite_t * pct )	gs_is_pdf14trans_compositor
ANR	1003979	DeclStmt									
ANR	1003980	Decl							define subclass_common t_dev_proc_create_compositor	define subclass_common t_dev_proc_create_compositor *	saved_compositor_method
ANR	1003981	ClassDef	<unnamed>	670:8:29674:29804							
ANR	1003982	DeclStmt									
ANR	1003983	Decl							t_dev_proc_create_compositor	t_dev_proc_create_compositor *	saved_compositor_method
ANR	1003984	DeclStmt									
ANR	1003985	Decl							gx_device_forward	gx_device_forward *	forwarding_dev
ANR	1003986	DeclStmt									
ANR	1003987	Decl									generic_subclass_data
ANR	1003988	DeclStmt									
ANR	1003989	Decl							int	"int ( gx_device * dest , gx_device * src , gx_device * prototype )"	gx_copy_device_procs
ANR	1003990	DeclStmt									
ANR	1003991	Decl							int	"int ( gx_device * dev_to_subclass , gx_device * new_prototype , unsigned int private_data_size )"	gx_device_subclass
ANR	1003992	DeclStmt									
ANR	1003993	Decl							int	int ( gx_device * dev )	gx_device_unsubclass
ANR	1003994	DeclStmt									
ANR	1003995	Decl							int	int ( gx_device * dev )	gx_update_from_subclass
ANR	1003996	DeclStmt									
ANR	1003997	Decl							int	"int ( gx_device * dev , gx_device * * pcdev , const gs_composite_t * pcte , gs_gstate * pgs , gs_memory_t * memory , gx_device * cdev )"	gx_subclass_create_compositor
