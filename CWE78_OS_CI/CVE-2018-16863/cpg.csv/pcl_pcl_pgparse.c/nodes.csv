command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8149778	File	data/converged/CVE-2018-16863_ghostpdl/pcl_pcl_pgparse.c								
ANR	8149779	Function	hpgl_register_command	29:0:864:1621							
ANR	8149780	FunctionDef	"hpgl_register_command (hpgl_parser_state_t * pgl_parser_state , byte * pindex , const hpgl_command_definition_t * pcmd)"		8149779	0					
ANR	8149781	CompoundStatement		32:0:1015:1621	8149779	0					
ANR	8149782	IdentifierDeclStatement	int index = pgl_parser_state -> hpgl_command_next_index ;	33:4:1021:1074	8149779	0	True				
ANR	8149783	IdentifierDecl	index = pgl_parser_state -> hpgl_command_next_index		8149779	0					
ANR	8149784	IdentifierDeclType	int		8149779	0					
ANR	8149785	Identifier	index		8149779	1					
ANR	8149786	AssignmentExpression	index = pgl_parser_state -> hpgl_command_next_index		8149779	2		=			
ANR	8149787	Identifier	index		8149779	0					
ANR	8149788	PtrMemberAccess	pgl_parser_state -> hpgl_command_next_index		8149779	1					
ANR	8149789	Identifier	pgl_parser_state		8149779	0					
ANR	8149790	Identifier	hpgl_command_next_index		8149779	1					
ANR	8149791	IdentifierDeclStatement	byte prev = * pindex ;	34:4:1080:1099	8149779	1	True				
ANR	8149792	IdentifierDecl	prev = * pindex		8149779	0					
ANR	8149793	IdentifierDeclType	byte		8149779	0					
ANR	8149794	Identifier	prev		8149779	1					
ANR	8149795	AssignmentExpression	prev = * pindex		8149779	2		=			
ANR	8149796	Identifier	prev		8149779	0					
ANR	8149797	UnaryOperationExpression	* pindex		8149779	1					
ANR	8149798	UnaryOperator	*		8149779	0					
ANR	8149799	Identifier	pindex		8149779	1					
ANR	8149800	IfStatement	if ( prev != 0 && prev <= index && pgl_parser_state -> hpgl_command_list [ prev ] == pcmd )		8149779	2					
ANR	8149801	Condition	prev != 0 && prev <= index && pgl_parser_state -> hpgl_command_list [ prev ] == pcmd	36:8:1110:1196	8149779	0	True				
ANR	8149802	AndExpression	prev != 0 && prev <= index && pgl_parser_state -> hpgl_command_list [ prev ] == pcmd		8149779	0		&&			
ANR	8149803	EqualityExpression	prev != 0		8149779	0		!=			
ANR	8149804	Identifier	prev		8149779	0					
ANR	8149805	PrimaryExpression	0		8149779	1					
ANR	8149806	AndExpression	prev <= index && pgl_parser_state -> hpgl_command_list [ prev ] == pcmd		8149779	1		&&			
ANR	8149807	RelationalExpression	prev <= index		8149779	0		<=			
ANR	8149808	Identifier	prev		8149779	0					
ANR	8149809	Identifier	index		8149779	1					
ANR	8149810	EqualityExpression	pgl_parser_state -> hpgl_command_list [ prev ] == pcmd		8149779	1		==			
ANR	8149811	ArrayIndexing	pgl_parser_state -> hpgl_command_list [ prev ]		8149779	0					
ANR	8149812	PtrMemberAccess	pgl_parser_state -> hpgl_command_list		8149779	0					
ANR	8149813	Identifier	pgl_parser_state		8149779	0					
ANR	8149814	Identifier	hpgl_command_list		8149779	1					
ANR	8149815	Identifier	prev		8149779	1					
ANR	8149816	Identifier	pcmd		8149779	1					
ANR	8149817	ExpressionStatement	index = prev	38:8:1207:1219	8149779	1	True				
ANR	8149818	AssignmentExpression	index = prev		8149779	0		=			
ANR	8149819	Identifier	index		8149779	0					
ANR	8149820	Identifier	prev		8149779	1					
ANR	8149821	ElseStatement	else		8149779	0					
ANR	8149822	IfStatement	if ( index != 0 && pgl_parser_state -> hpgl_command_list [ index ] == pcmd )		8149779	0					
ANR	8149823	Condition	index != 0 && pgl_parser_state -> hpgl_command_list [ index ] == pcmd	39:13:1234:1310	8149779	0	True				
ANR	8149824	AndExpression	index != 0 && pgl_parser_state -> hpgl_command_list [ index ] == pcmd		8149779	0		&&			
ANR	8149825	EqualityExpression	index != 0		8149779	0		!=			
ANR	8149826	Identifier	index		8149779	0					
ANR	8149827	PrimaryExpression	0		8149779	1					
ANR	8149828	EqualityExpression	pgl_parser_state -> hpgl_command_list [ index ] == pcmd		8149779	1		==			
ANR	8149829	ArrayIndexing	pgl_parser_state -> hpgl_command_list [ index ]		8149779	0					
ANR	8149830	PtrMemberAccess	pgl_parser_state -> hpgl_command_list		8149779	0					
ANR	8149831	Identifier	pgl_parser_state		8149779	0					
ANR	8149832	Identifier	hpgl_command_list		8149779	1					
ANR	8149833	Identifier	index		8149779	1					
ANR	8149834	Identifier	pcmd		8149779	1					
ANR	8149835	ExpressionStatement		40:67:1312:1312	8149779	1	True				
ANR	8149836	ElseStatement	else		8149779	0					
ANR	8149837	ExpressionStatement	pgl_parser_state -> hpgl_command_list [ pgl_parser_state -> hpgl_command_next_index = ++ index ] = ( hpgl_command_definition_t * ) pcmd	42:8:1331:1557	8149779	0	True				
ANR	8149838	AssignmentExpression	pgl_parser_state -> hpgl_command_list [ pgl_parser_state -> hpgl_command_next_index = ++ index ] = ( hpgl_command_definition_t * ) pcmd		8149779	0		=			
ANR	8149839	ArrayIndexing	pgl_parser_state -> hpgl_command_list [ pgl_parser_state -> hpgl_command_next_index = ++ index ]		8149779	0					
ANR	8149840	PtrMemberAccess	pgl_parser_state -> hpgl_command_list		8149779	0					
ANR	8149841	Identifier	pgl_parser_state		8149779	0					
ANR	8149842	Identifier	hpgl_command_list		8149779	1					
ANR	8149843	AssignmentExpression	pgl_parser_state -> hpgl_command_next_index = ++ index		8149779	1		=			
ANR	8149844	PtrMemberAccess	pgl_parser_state -> hpgl_command_next_index		8149779	0					
ANR	8149845	Identifier	pgl_parser_state		8149779	0					
ANR	8149846	Identifier	hpgl_command_next_index		8149779	1					
ANR	8149847	UnaryExpression	++ index		8149779	1					
ANR	8149848	IncDec	++		8149779	0					
ANR	8149849	Identifier	index		8149779	1					
ANR	8149850	CastExpression	( hpgl_command_definition_t * ) pcmd		8149779	1					
ANR	8149851	CastTarget	hpgl_command_definition_t *		8149779	0					
ANR	8149852	Identifier	pcmd		8149779	1					
ANR	8149853	ExpressionStatement	* pindex = index	46:4:1563:1578	8149779	3	True				
ANR	8149854	AssignmentExpression	* pindex = index		8149779	0		=			
ANR	8149855	UnaryOperationExpression	* pindex		8149779	0					
ANR	8149856	UnaryOperator	*		8149779	0					
ANR	8149857	Identifier	pindex		8149779	1					
ANR	8149858	Identifier	index		8149779	1					
ANR	8149859	ReturnStatement	return ( prev != 0 && prev != index ) ;	47:4:1584:1619	8149779	4	True				
ANR	8149860	AndExpression	prev != 0 && prev != index		8149779	0		&&			
ANR	8149861	EqualityExpression	prev != 0		8149779	0		!=			
ANR	8149862	Identifier	prev		8149779	0					
ANR	8149863	PrimaryExpression	0		8149779	1					
ANR	8149864	EqualityExpression	prev != index		8149779	1		!=			
ANR	8149865	Identifier	prev		8149779	0					
ANR	8149866	Identifier	index		8149779	1					
ANR	8149867	ReturnType	static bool		8149779	1					
ANR	8149868	Identifier	hpgl_register_command		8149779	2					
ANR	8149869	ParameterList	"hpgl_parser_state_t * pgl_parser_state , byte * pindex , const hpgl_command_definition_t * pcmd"		8149779	3					
ANR	8149870	Parameter	hpgl_parser_state_t * pgl_parser_state	30:22:898:935	8149779	0	True				
ANR	8149871	ParameterType	hpgl_parser_state_t *		8149779	0					
ANR	8149872	Identifier	pgl_parser_state		8149779	1					
ANR	8149873	Parameter	byte * pindex	31:22:960:972	8149779	1	True				
ANR	8149874	ParameterType	byte *		8149779	0					
ANR	8149875	Identifier	pindex		8149779	1					
ANR	8149876	Parameter	const hpgl_command_definition_t * pcmd	31:37:975:1012	8149779	2	True				
ANR	8149877	ParameterType	const hpgl_command_definition_t *		8149779	0					
ANR	8149878	Identifier	pcmd		8149779	1					
ANR	8149879	CFGEntryNode	ENTRY		8149779		True				
ANR	8149880	CFGExitNode	EXIT		8149779		True				
ANR	8149881	Symbol	pgl_parser_state -> hpgl_command_next_index		8149779						
ANR	8149882	Symbol	* * pgl_parser_state		8149779						
ANR	8149883	Symbol	pgl_parser_state		8149779						
ANR	8149884	Symbol	prev		8149779						
ANR	8149885	Symbol	* index		8149779						
ANR	8149886	Symbol	index		8149779						
ANR	8149887	Symbol	* pindex		8149779						
ANR	8149888	Symbol	* prev		8149779						
ANR	8149889	Symbol	pgl_parser_state -> hpgl_command_list		8149779						
ANR	8149890	Symbol	* pgl_parser_state -> hpgl_command_list		8149779						
ANR	8149891	Symbol	pindex		8149779						
ANR	8149892	Symbol	* pgl_parser_state		8149779						
ANR	8149893	Symbol	pcmd		8149779						
ANR	8149894	Function	hpgl_define_commands	51:0:1657:2344							
ANR	8149895	FunctionDef	"hpgl_define_commands (const gs_memory_t * mem , const hpgl_named_command_t * pcmds , hpgl_parser_state_t * pgl_parser_state)"		8149894	0					
ANR	8149896	CompoundStatement		55:0:1826:2344	8149894	0					
ANR	8149897	IdentifierDeclStatement	const hpgl_named_command_t * pcmd = pcmds ;	56:4:1832:1872	8149894	0	True				
ANR	8149898	IdentifierDecl	* pcmd = pcmds		8149894	0					
ANR	8149899	IdentifierDeclType	const hpgl_named_command_t *		8149894	0					
ANR	8149900	Identifier	pcmd		8149894	1					
ANR	8149901	AssignmentExpression	* pcmd = pcmds		8149894	2		=			
ANR	8149902	Identifier	pcmds		8149894	0					
ANR	8149903	Identifier	pcmds		8149894	1					
ANR	8149904	ForStatement	for ( ; pcmd -> char1 ; ++ pcmd )		8149894	1					
ANR	8149905	Condition	pcmd -> char1	58:11:1886:1896	8149894	0	True				
ANR	8149906	PtrMemberAccess	pcmd -> char1		8149894	0					
ANR	8149907	Identifier	pcmd		8149894	0					
ANR	8149908	Identifier	char1		8149894	1					
ANR	8149909	UnaryExpression	++ pcmd	58:24:1899:1904	8149894	1	True				
ANR	8149910	IncDec	++		8149894	0					
ANR	8149911	Identifier	pcmd		8149894	1					
ANR	8149912	Statement	if	60:8:1928:1929	8149894	2	True				
ANR	8149913	Statement	(	60:11:1931:1931	8149894	2	True				
ANR	8149914	Statement	hpgl_register_command	62:15:1955:1975	8149894	3	True				
ANR	8149915	Statement	(	62:36:1976:1976	8149894	4	True				
ANR	8149916	Statement	pgl_parser_state	62:37:1977:1992	8149894	5	True				
ANR	8149917	Statement	","	62:53:1993:1993	8149894	6	True				
ANR	8149918	Statement	&	63:37:2032:2032	8149894	7	True				
ANR	8149919	Statement	pgl_parser_state	63:38:2033:2048	8149894	8	True				
ANR	8149920	Statement	->	63:54:2049:2050	8149894	9	True				
ANR	8149921	Statement	hpgl_command_indices	63:56:2051:2070	8149894	10	True				
ANR	8149922	Statement	[	64:37:2109:2109	8149894	11	True				
ANR	8149923	Statement	pcmd	64:38:2110:2113	8149894	12	True				
ANR	8149924	Statement	->	64:42:2114:2115	8149894	13	True				
ANR	8149925	Statement	char1	64:44:2116:2120	8149894	14	True				
ANR	8149926	Statement	-	64:50:2122:2122	8149894	15	True				
ANR	8149927	Statement	'A'	64:52:2124:2126	8149894	16	True				
ANR	8149928	Statement	]	64:55:2127:2127	8149894	17	True				
ANR	8149929	Statement	[	64:56:2128:2128	8149894	18	True				
ANR	8149930	Statement	pcmd	64:57:2129:2132	8149894	19	True				
ANR	8149931	Statement	->	64:61:2133:2134	8149894	20	True				
ANR	8149932	Statement	char2	64:63:2135:2139	8149894	21	True				
ANR	8149933	Statement	-	64:69:2141:2141	8149894	22	True				
ANR	8149934	Statement	'A'	64:71:2143:2145	8149894	23	True				
ANR	8149935	Statement	]	64:74:2146:2146	8149894	24	True				
ANR	8149936	Statement	","	64:75:2147:2147	8149894	25	True				
ANR	8149937	Statement	&	65:37:2186:2186	8149894	26	True				
ANR	8149938	Statement	pcmd	65:38:2187:2190	8149894	27	True				
ANR	8149939	Statement	->	65:42:2191:2192	8149894	28	True				
ANR	8149940	Statement	defn	65:44:2193:2196	8149894	29	True				
ANR	8149941	Statement	)	65:48:2197:2197	8149894	30	True				
ANR	8149942	Statement	)	67:12:2224:2224	8149894	31	True				
ANR	8149943	ExpressionStatement	"dmprintf2 ( mem , ""Redefining command %c%c\\n"" , pcmd -> char1 , pcmd -> char2 )"	68:12:2238:2329	8149894	32	True				
ANR	8149944	CallExpression	"dmprintf2 ( mem , ""Redefining command %c%c\\n"" , pcmd -> char1 , pcmd -> char2 )"		8149894	0					
ANR	8149945	Callee	dmprintf2		8149894	0					
ANR	8149946	Identifier	dmprintf2		8149894	0					
ANR	8149947	ArgumentList	mem		8149894	1					
ANR	8149948	Argument	mem		8149894	0					
ANR	8149949	Identifier	mem		8149894	0					
ANR	8149950	Argument	"""Redefining command %c%c\\n"""		8149894	1					
ANR	8149951	PrimaryExpression	"""Redefining command %c%c\\n"""		8149894	0					
ANR	8149952	Argument	pcmd -> char1		8149894	2					
ANR	8149953	PtrMemberAccess	pcmd -> char1		8149894	0					
ANR	8149954	Identifier	pcmd		8149894	0					
ANR	8149955	Identifier	char1		8149894	1					
ANR	8149956	Argument	pcmd -> char2		8149894	3					
ANR	8149957	PtrMemberAccess	pcmd -> char2		8149894	0					
ANR	8149958	Identifier	pcmd		8149894	0					
ANR	8149959	Identifier	char2		8149894	1					
ANR	8149960	ExpressionStatement		71:4:2342:2342	8149894	33	True				
ANR	8149961	ReturnType	void		8149894	1					
ANR	8149962	Identifier	hpgl_define_commands		8149894	2					
ANR	8149963	ParameterList	"const gs_memory_t * mem , const hpgl_named_command_t * pcmds , hpgl_parser_state_t * pgl_parser_state"		8149894	3					
ANR	8149964	Parameter	const gs_memory_t * mem	52:21:1683:1705	8149894	0	True				
ANR	8149965	ParameterType	const gs_memory_t *		8149894	0					
ANR	8149966	Identifier	mem		8149894	1					
ANR	8149967	Parameter	const hpgl_named_command_t * pcmds	53:21:1729:1762	8149894	1	True				
ANR	8149968	ParameterType	const hpgl_named_command_t *		8149894	0					
ANR	8149969	Identifier	pcmds		8149894	1					
ANR	8149970	Parameter	hpgl_parser_state_t * pgl_parser_state	54:21:1786:1823	8149894	2	True				
ANR	8149971	ParameterType	hpgl_parser_state_t *		8149894	0					
ANR	8149972	Identifier	pgl_parser_state		8149894	1					
ANR	8149973	CFGEntryNode	ENTRY		8149894		True				
ANR	8149974	CFGExitNode	EXIT		8149894		True				
ANR	8149975	Symbol	pcmds		8149894						
ANR	8149976	Symbol	* pcmd		8149894						
ANR	8149977	Symbol	mem		8149894						
ANR	8149978	Symbol	pgl_parser_state		8149894						
ANR	8149979	Symbol	pcmd -> char1		8149894						
ANR	8149980	Symbol	pcmd -> char2		8149894						
ANR	8149981	Symbol	pcmd		8149894						
ANR	8149982	Function	hpgl_process_init	77:0:2439:2541							
ANR	8149983	FunctionDef	hpgl_process_init (hpgl_parser_state_t * pst)		8149982	0					
ANR	8149984	CompoundStatement		79:0:2489:2541	8149982	0					
ANR	8149985	ExpressionStatement	pst -> first_letter = - 1	80:4:2495:2517	8149982	0	True				
ANR	8149986	AssignmentExpression	pst -> first_letter = - 1		8149982	0		=			
ANR	8149987	PtrMemberAccess	pst -> first_letter		8149982	0					
ANR	8149988	Identifier	pst		8149982	0					
ANR	8149989	Identifier	first_letter		8149982	1					
ANR	8149990	UnaryOperationExpression	- 1		8149982	1					
ANR	8149991	UnaryOperator	-		8149982	0					
ANR	8149992	PrimaryExpression	1		8149982	1					
ANR	8149993	ExpressionStatement	pst -> command = 0	81:4:2523:2539	8149982	1	True				
ANR	8149994	AssignmentExpression	pst -> command = 0		8149982	0		=			
ANR	8149995	PtrMemberAccess	pst -> command		8149982	0					
ANR	8149996	Identifier	pst		8149982	0					
ANR	8149997	Identifier	command		8149982	1					
ANR	8149998	PrimaryExpression	0		8149982	1					
ANR	8149999	ReturnType	void		8149982	1					
ANR	8150000	Identifier	hpgl_process_init		8149982	2					
ANR	8150001	ParameterList	hpgl_parser_state_t * pst		8149982	3					
ANR	8150002	Parameter	hpgl_parser_state_t * pst	78:18:2462:2486	8149982	0	True				
ANR	8150003	ParameterType	hpgl_parser_state_t *		8149982	0					
ANR	8150004	Identifier	pst		8149982	1					
ANR	8150005	CFGEntryNode	ENTRY		8149982		True				
ANR	8150006	CFGExitNode	EXIT		8149982		True				
ANR	8150007	Symbol	pst		8149982						
ANR	8150008	Symbol	pst -> first_letter		8149982						
ANR	8150009	Symbol	* pst		8149982						
ANR	8150010	Symbol	pst -> command		8149982						
ANR	8150011	Function	hpgl_process	86:0:2658:7831							
ANR	8150012	FunctionDef	"hpgl_process (hpgl_parser_state_t * pst , hpgl_state_t * pgls , stream_cursor_read * pr)"		8150011	0					
ANR	8150013	CompoundStatement		89:0:2761:7831	8150011	0					
ANR	8150014	IdentifierDeclStatement	const byte * p = pr -> ptr ;	90:4:2767:2790	8150011	0	True				
ANR	8150015	IdentifierDecl	* p = pr -> ptr		8150011	0					
ANR	8150016	IdentifierDeclType	const byte *		8150011	0					
ANR	8150017	Identifier	p		8150011	1					
ANR	8150018	AssignmentExpression	* p = pr -> ptr		8150011	2		=			
ANR	8150019	Identifier	p		8150011	0					
ANR	8150020	PtrMemberAccess	pr -> ptr		8150011	1					
ANR	8150021	Identifier	pr		8150011	0					
ANR	8150022	Identifier	ptr		8150011	1					
ANR	8150023	IdentifierDeclStatement	const byte * rlimit = pr -> limit ;	91:4:2796:2826	8150011	1	True				
ANR	8150024	IdentifierDecl	* rlimit = pr -> limit		8150011	0					
ANR	8150025	IdentifierDeclType	const byte *		8150011	0					
ANR	8150026	Identifier	rlimit		8150011	1					
ANR	8150027	AssignmentExpression	* rlimit = pr -> limit		8150011	2		=			
ANR	8150028	Identifier	rlimit		8150011	0					
ANR	8150029	PtrMemberAccess	pr -> limit		8150011	1					
ANR	8150030	Identifier	pr		8150011	0					
ANR	8150031	Identifier	limit		8150011	1					
ANR	8150032	IdentifierDeclStatement	int code = 0 ;	92:4:2832:2844	8150011	2	True				
ANR	8150033	IdentifierDecl	code = 0		8150011	0					
ANR	8150034	IdentifierDeclType	int		8150011	0					
ANR	8150035	Identifier	code		8150011	1					
ANR	8150036	AssignmentExpression	code = 0		8150011	2		=			
ANR	8150037	Identifier	code		8150011	0					
ANR	8150038	PrimaryExpression	0		8150011	1					
ANR	8150039	IdentifierDeclStatement	jmp_buf exit_to_parser ;	93:4:2850:2872	8150011	3	True				
ANR	8150040	IdentifierDecl	exit_to_parser		8150011	0					
ANR	8150041	IdentifierDeclType	jmp_buf		8150011	0					
ANR	8150042	Identifier	exit_to_parser		8150011	1					
ANR	8150043	ExpressionStatement	pst -> exit_to_parser = & exit_to_parser	99:4:3073:3110	8150011	4	True				
ANR	8150044	AssignmentExpression	pst -> exit_to_parser = & exit_to_parser		8150011	0		=			
ANR	8150045	PtrMemberAccess	pst -> exit_to_parser		8150011	0					
ANR	8150046	Identifier	pst		8150011	0					
ANR	8150047	Identifier	exit_to_parser		8150011	1					
ANR	8150048	UnaryOperationExpression	& exit_to_parser		8150011	1					
ANR	8150049	UnaryOperator	&		8150011	0					
ANR	8150050	Identifier	exit_to_parser		8150011	1					
ANR	8150051	ExpressionStatement	pst -> source . limit = rlimit	101:4:3117:3143	8150011	5	True				
ANR	8150052	AssignmentExpression	pst -> source . limit = rlimit		8150011	0		=			
ANR	8150053	MemberAccess	pst -> source . limit		8150011	0					
ANR	8150054	PtrMemberAccess	pst -> source		8150011	0					
ANR	8150055	Identifier	pst		8150011	0					
ANR	8150056	Identifier	source		8150011	1					
ANR	8150057	Identifier	limit		8150011	1					
ANR	8150058	Identifier	rlimit		8150011	1					
ANR	8150059	ExpressionStatement	code = setjmp ( * ( pst -> exit_to_parser ) )	104:4:3270:3307	8150011	6	True				
ANR	8150060	AssignmentExpression	code = setjmp ( * ( pst -> exit_to_parser ) )		8150011	0		=			
ANR	8150061	Identifier	code		8150011	0					
ANR	8150062	CallExpression	setjmp ( * ( pst -> exit_to_parser ) )		8150011	1					
ANR	8150063	Callee	setjmp		8150011	0					
ANR	8150064	Identifier	setjmp		8150011	0					
ANR	8150065	ArgumentList	* ( pst -> exit_to_parser )		8150011	1					
ANR	8150066	Argument	* ( pst -> exit_to_parser )		8150011	0					
ANR	8150067	UnaryOperationExpression	* ( pst -> exit_to_parser )		8150011	0					
ANR	8150068	UnaryOperator	*		8150011	0					
ANR	8150069	PtrMemberAccess	pst -> exit_to_parser		8150011	1					
ANR	8150070	Identifier	pst		8150011	0					
ANR	8150071	Identifier	exit_to_parser		8150011	1					
ANR	8150072	IfStatement	if ( code )		8150011	7					
ANR	8150073	Condition	code	105:8:3317:3320	8150011	0	True				
ANR	8150074	Identifier	code		8150011	0					
ANR	8150075	CompoundStatement		17:14:561:561	8150011	1					
ANR	8150076	ExpressionStatement	pr -> ptr = pst -> source . ptr	108:8:3456:3481	8150011	0	True				
ANR	8150077	AssignmentExpression	pr -> ptr = pst -> source . ptr		8150011	0		=			
ANR	8150078	PtrMemberAccess	pr -> ptr		8150011	0					
ANR	8150079	Identifier	pr		8150011	0					
ANR	8150080	Identifier	ptr		8150011	1					
ANR	8150081	MemberAccess	pst -> source . ptr		8150011	1					
ANR	8150082	PtrMemberAccess	pst -> source		8150011	0					
ANR	8150083	Identifier	pst		8150011	0					
ANR	8150084	Identifier	source		8150011	1					
ANR	8150085	Identifier	ptr		8150011	1					
ANR	8150086	ExpressionStatement	pst -> exit_to_parser = NULL	109:8:3491:3517	8150011	1	True				
ANR	8150087	AssignmentExpression	pst -> exit_to_parser = NULL		8150011	0		=			
ANR	8150088	PtrMemberAccess	pst -> exit_to_parser		8150011	0					
ANR	8150089	Identifier	pst		8150011	0					
ANR	8150090	Identifier	exit_to_parser		8150011	1					
ANR	8150091	Identifier	NULL		8150011	1					
ANR	8150092	IfStatement	if ( code < 0 && code != gs_error_NeedInput )		8150011	2					
ANR	8150093	Condition	code < 0 && code != gs_error_NeedInput	110:12:3531:3568	8150011	0	True				
ANR	8150094	AndExpression	code < 0 && code != gs_error_NeedInput		8150011	0		&&			
ANR	8150095	RelationalExpression	code < 0		8150011	0		<			
ANR	8150096	Identifier	code		8150011	0					
ANR	8150097	PrimaryExpression	0		8150011	1					
ANR	8150098	EqualityExpression	code != gs_error_NeedInput		8150011	1		!=			
ANR	8150099	Identifier	code		8150011	0					
ANR	8150100	Identifier	gs_error_NeedInput		8150011	1					
ANR	8150101	CompoundStatement		22:52:809:809	8150011	1					
ANR	8150102	ExpressionStatement	pst -> command = 0	111:12:3585:3601	8150011	0	True				
ANR	8150103	AssignmentExpression	pst -> command = 0		8150011	0		=			
ANR	8150104	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150105	Identifier	pst		8150011	0					
ANR	8150106	Identifier	command		8150011	1					
ANR	8150107	PrimaryExpression	0		8150011	1					
ANR	8150108	ExpressionStatement	"if_debug0m ( 'i' , pgls -> memory , ""\\n"" )"	112:12:3638:3673	8150011	1	True				
ANR	8150109	CallExpression	"if_debug0m ( 'i' , pgls -> memory , ""\\n"" )"		8150011	0					
ANR	8150110	Callee	if_debug0m		8150011	0					
ANR	8150111	Identifier	if_debug0m		8150011	0					
ANR	8150112	ArgumentList	'i'		8150011	1					
ANR	8150113	Argument	'i'		8150011	0					
ANR	8150114	PrimaryExpression	'i'		8150011	0					
ANR	8150115	Argument	pgls -> memory		8150011	1					
ANR	8150116	PtrMemberAccess	pgls -> memory		8150011	0					
ANR	8150117	Identifier	pgls		8150011	0					
ANR	8150118	Identifier	memory		8150011	1					
ANR	8150119	Argument	"""\\n"""		8150011	2					
ANR	8150120	PrimaryExpression	"""\\n"""		8150011	0					
ANR	8150121	ReturnStatement	return code ;	113:12:3687:3698	8150011	2	True				
ANR	8150122	Identifier	code		8150011	0					
ANR	8150123	ReturnStatement	return 0 ;	115:8:3718:3726	8150011	3	True				
ANR	8150124	PrimaryExpression	0		8150011	0					
ANR	8150125	Label	call :	118:2:3799:3803	8150011	8	True				
ANR	8150126	Identifier	call		8150011	0					
ANR	8150127	IfStatement	if ( pst -> command )		8150011	9					
ANR	8150128	Condition	pst -> command	118:11:3808:3819	8150011	0	True				
ANR	8150129	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150130	Identifier	pst		8150011	0					
ANR	8150131	Identifier	command		8150011	1					
ANR	8150132	CompoundStatement		30:25:1060:1060	8150011	1					
ANR	8150133	ExpressionStatement	pst -> source . ptr = p	119:8:3832:3851	8150011	0	True				
ANR	8150134	AssignmentExpression	pst -> source . ptr = p		8150011	0		=			
ANR	8150135	MemberAccess	pst -> source . ptr		8150011	0					
ANR	8150136	PtrMemberAccess	pst -> source		8150011	0					
ANR	8150137	Identifier	pst		8150011	0					
ANR	8150138	Identifier	source		8150011	1					
ANR	8150139	Identifier	ptr		8150011	1					
ANR	8150140	Identifier	p		8150011	1					
ANR	8150141	ExpressionStatement	pst -> arg . next = 0	120:8:3861:3878	8150011	1	True				
ANR	8150142	AssignmentExpression	pst -> arg . next = 0		8150011	0		=			
ANR	8150143	MemberAccess	pst -> arg . next		8150011	0					
ANR	8150144	PtrMemberAccess	pst -> arg		8150011	0					
ANR	8150145	Identifier	pst		8150011	0					
ANR	8150146	Identifier	arg		8150011	1					
ANR	8150147	Identifier	next		8150011	1					
ANR	8150148	PrimaryExpression	0		8150011	1					
ANR	8150149	ExpressionStatement	"code = ( * pst -> command -> proc ) ( pst , pgls )"	121:8:3888:3928	8150011	2	True				
ANR	8150150	AssignmentExpression	"code = ( * pst -> command -> proc ) ( pst , pgls )"		8150011	0		=			
ANR	8150151	Identifier	code		8150011	0					
ANR	8150152	CallExpression	"( * pst -> command -> proc ) ( pst , pgls )"		8150011	1					
ANR	8150153	Callee	* pst -> command -> proc		8150011	0					
ANR	8150154	UnaryOperationExpression	* pst -> command -> proc		8150011	0					
ANR	8150155	UnaryOperator	*		8150011	0					
ANR	8150156	PtrMemberAccess	pst -> command -> proc		8150011	1					
ANR	8150157	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150158	Identifier	pst		8150011	0					
ANR	8150159	Identifier	command		8150011	1					
ANR	8150160	Identifier	proc		8150011	1					
ANR	8150161	ArgumentList	pst		8150011	1					
ANR	8150162	Argument	pst		8150011	0					
ANR	8150163	Identifier	pst		8150011	0					
ANR	8150164	Argument	pgls		8150011	1					
ANR	8150165	Identifier	pgls		8150011	0					
ANR	8150166	ExpressionStatement	p = pst -> source . ptr	122:8:3938:3957	8150011	3	True				
ANR	8150167	AssignmentExpression	p = pst -> source . ptr		8150011	0		=			
ANR	8150168	Identifier	p		8150011	0					
ANR	8150169	MemberAccess	pst -> source . ptr		8150011	1					
ANR	8150170	PtrMemberAccess	pst -> source		8150011	0					
ANR	8150171	Identifier	pst		8150011	0					
ANR	8150172	Identifier	source		8150011	1					
ANR	8150173	Identifier	ptr		8150011	1					
ANR	8150174	IfStatement	if ( code < 0 && code != gs_error_NeedInput )		8150011	4					
ANR	8150175	Condition	code < 0 && code != gs_error_NeedInput	125:12:4058:4095	8150011	0	True				
ANR	8150176	AndExpression	code < 0 && code != gs_error_NeedInput		8150011	0		&&			
ANR	8150177	RelationalExpression	code < 0		8150011	0		<			
ANR	8150178	Identifier	code		8150011	0					
ANR	8150179	PrimaryExpression	0		8150011	1					
ANR	8150180	EqualityExpression	code != gs_error_NeedInput		8150011	1		!=			
ANR	8150181	Identifier	code		8150011	0					
ANR	8150182	Identifier	gs_error_NeedInput		8150011	1					
ANR	8150183	ExpressionStatement	pst -> command = 0	126:12:4110:4126	8150011	1	True				
ANR	8150184	AssignmentExpression	pst -> command = 0		8150011	0		=			
ANR	8150185	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150186	Identifier	pst		8150011	0					
ANR	8150187	Identifier	command		8150011	1					
ANR	8150188	PrimaryExpression	0		8150011	1					
ANR	8150189	IfStatement	if ( code < 0 )		8150011	5					
ANR	8150190	Condition	code < 0	127:12:4140:4147	8150011	0	True				
ANR	8150191	RelationalExpression	code < 0		8150011	0		<			
ANR	8150192	Identifier	code		8150011	0					
ANR	8150193	PrimaryExpression	0		8150011	1					
ANR	8150194	GotoStatement	goto x ;	128:12:4162:4168	8150011	1	True				
ANR	8150195	Identifier	x		8150011	0					
ANR	8150196	ExpressionStatement	pst -> command = 0	129:8:4178:4194	8150011	6	True				
ANR	8150197	AssignmentExpression	pst -> command = 0		8150011	0		=			
ANR	8150198	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150199	Identifier	pst		8150011	0					
ANR	8150200	Identifier	command		8150011	1					
ANR	8150201	PrimaryExpression	0		8150011	1					
ANR	8150202	ExpressionStatement	"if_debug0m ( 'i' , pgls -> memory , ""\\n"" )"	130:8:4204:4239	8150011	7	True				
ANR	8150203	CallExpression	"if_debug0m ( 'i' , pgls -> memory , ""\\n"" )"		8150011	0					
ANR	8150204	Callee	if_debug0m		8150011	0					
ANR	8150205	Identifier	if_debug0m		8150011	0					
ANR	8150206	ArgumentList	'i'		8150011	1					
ANR	8150207	Argument	'i'		8150011	0					
ANR	8150208	PrimaryExpression	'i'		8150011	0					
ANR	8150209	Argument	pgls -> memory		8150011	1					
ANR	8150210	PtrMemberAccess	pgls -> memory		8150011	0					
ANR	8150211	Identifier	pgls		8150011	0					
ANR	8150212	Identifier	memory		8150011	1					
ANR	8150213	Argument	"""\\n"""		8150011	2					
ANR	8150214	PrimaryExpression	"""\\n"""		8150011	0					
ANR	8150215	WhileStatement	while ( p < rlimit )		8150011	10					
ANR	8150216	Condition	p < rlimit	132:11:4258:4267	8150011	0	True				
ANR	8150217	RelationalExpression	p < rlimit		8150011	0		<			
ANR	8150218	Identifier	p		8150011	0					
ANR	8150219	Identifier	rlimit		8150011	1					
ANR	8150220	CompoundStatement		45:8:1518:1534	8150011	1					
ANR	8150221	IdentifierDeclStatement	byte next = * ++ p ;	133:8:4280:4296	8150011	0	True				
ANR	8150222	IdentifierDecl	next = * ++ p		8150011	0					
ANR	8150223	IdentifierDeclType	byte		8150011	0					
ANR	8150224	Identifier	next		8150011	1					
ANR	8150225	AssignmentExpression	next = * ++ p		8150011	2		=			
ANR	8150226	Identifier	next		8150011	0					
ANR	8150227	UnaryOperationExpression	* ++ p		8150011	1					
ANR	8150228	UnaryOperator	*		8150011	0					
ANR	8150229	UnaryExpression	++ p		8150011	1					
ANR	8150230	IncDec	++		8150011	0					
ANR	8150231	Identifier	p		8150011	1					
ANR	8150232	IfStatement	if ( next >= 'A' && next <= 'Z' )		8150011	1					
ANR	8150233	Condition	next >= 'A' && next <= 'Z'	135:12:4311:4336	8150011	0	True				
ANR	8150234	AndExpression	next >= 'A' && next <= 'Z'		8150011	0		&&			
ANR	8150235	RelationalExpression	next >= 'A'		8150011	0		>=			
ANR	8150236	Identifier	next		8150011	0					
ANR	8150237	PrimaryExpression	'A'		8150011	1					
ANR	8150238	RelationalExpression	next <= 'Z'		8150011	1		<=			
ANR	8150239	Identifier	next		8150011	0					
ANR	8150240	PrimaryExpression	'Z'		8150011	1					
ANR	8150241	ExpressionStatement	next -= 'A'	136:12:4351:4362	8150011	1	True				
ANR	8150242	AssignmentExpression	next -= 'A'		8150011	0		-=			
ANR	8150243	Identifier	next		8150011	0					
ANR	8150244	PrimaryExpression	'A'		8150011	1					
ANR	8150245	ElseStatement	else		8150011	0					
ANR	8150246	IfStatement	if ( next >= 'a' && next <= 'z' )		8150011	0					
ANR	8150247	Condition	next >= 'a' && next <= 'z'	137:17:4381:4406	8150011	0	True				
ANR	8150248	AndExpression	next >= 'a' && next <= 'z'		8150011	0		&&			
ANR	8150249	RelationalExpression	next >= 'a'		8150011	0		>=			
ANR	8150250	Identifier	next		8150011	0					
ANR	8150251	PrimaryExpression	'a'		8150011	1					
ANR	8150252	RelationalExpression	next <= 'z'		8150011	1		<=			
ANR	8150253	Identifier	next		8150011	0					
ANR	8150254	PrimaryExpression	'z'		8150011	1					
ANR	8150255	ExpressionStatement	next -= 'a'	138:12:4421:4432	8150011	1	True				
ANR	8150256	AssignmentExpression	next -= 'a'		8150011	0		-=			
ANR	8150257	Identifier	next		8150011	0					
ANR	8150258	PrimaryExpression	'a'		8150011	1					
ANR	8150259	ElseStatement	else		8150011	0					
ANR	8150260	IfStatement	if ( next == ESC )		8150011	0					
ANR	8150261	Condition	next == ESC	139:17:4451:4461	8150011	0	True				
ANR	8150262	EqualityExpression	next == ESC		8150011	0		==			
ANR	8150263	Identifier	next		8150011	0					
ANR	8150264	Identifier	ESC		8150011	1					
ANR	8150265	CompoundStatement		51:30:1702:1702	8150011	1					
ANR	8150266	ExpressionStatement	-- p	140:12:4478:4481	8150011	0	True				
ANR	8150267	UnaryExpression	-- p		8150011	0					
ANR	8150268	IncDec	--		8150011	0					
ANR	8150269	Identifier	p		8150011	1					
ANR	8150270	ExpressionStatement	pst -> first_letter = - 1	141:12:4495:4517	8150011	1	True				
ANR	8150271	AssignmentExpression	pst -> first_letter = - 1		8150011	0		=			
ANR	8150272	PtrMemberAccess	pst -> first_letter		8150011	0					
ANR	8150273	Identifier	pst		8150011	0					
ANR	8150274	Identifier	first_letter		8150011	1					
ANR	8150275	UnaryOperationExpression	- 1		8150011	1					
ANR	8150276	UnaryOperator	-		8150011	0					
ANR	8150277	PrimaryExpression	1		8150011	1					
ANR	8150278	ExpressionStatement	code = 1	142:12:4531:4539	8150011	2	True				
ANR	8150279	AssignmentExpression	code = 1		8150011	0		=			
ANR	8150280	Identifier	code		8150011	0					
ANR	8150281	PrimaryExpression	1		8150011	1					
ANR	8150282	BreakStatement	break ;	143:12:4553:4558	8150011	3	True				
ANR	8150283	ElseStatement	else		8150011	0					
ANR	8150284	CompoundStatement		56:15:1813:1813	8150011	0					
ANR	8150285	IfStatement	"if ( next > ' ' && next != ',' )"		8150011	0					
ANR	8150286	Condition	"next > ' ' && next != ','"	146:16:4699:4723	8150011	0	True				
ANR	8150287	AndExpression	"next > ' ' && next != ','"		8150011	0		&&			
ANR	8150288	RelationalExpression	next > ' '		8150011	0		>			
ANR	8150289	Identifier	next		8150011	0					
ANR	8150290	PrimaryExpression	' '		8150011	1					
ANR	8150291	EqualityExpression	"next != ','"		8150011	1		!=			
ANR	8150292	Identifier	next		8150011	0					
ANR	8150293	PrimaryExpression	"','"		8150011	1					
ANR	8150294	ExpressionStatement	pst -> first_letter = - 1	147:16:4742:4764	8150011	1	True				
ANR	8150295	AssignmentExpression	pst -> first_letter = - 1		8150011	0		=			
ANR	8150296	PtrMemberAccess	pst -> first_letter		8150011	0					
ANR	8150297	Identifier	pst		8150011	0					
ANR	8150298	Identifier	first_letter		8150011	1					
ANR	8150299	UnaryOperationExpression	- 1		8150011	1					
ANR	8150300	UnaryOperator	-		8150011	0					
ANR	8150301	PrimaryExpression	1		8150011	1					
ANR	8150302	ContinueStatement	continue ;	148:12:4778:4786	8150011	1	True				
ANR	8150303	IfStatement	if ( pst -> first_letter < 0 )		8150011	2					
ANR	8150304	Condition	pst -> first_letter < 0	150:12:4810:4830	8150011	0	True				
ANR	8150305	RelationalExpression	pst -> first_letter < 0		8150011	0		<			
ANR	8150306	PtrMemberAccess	pst -> first_letter		8150011	0					
ANR	8150307	Identifier	pst		8150011	0					
ANR	8150308	Identifier	first_letter		8150011	1					
ANR	8150309	PrimaryExpression	0		8150011	1					
ANR	8150310	CompoundStatement		62:35:2071:2071	8150011	1					
ANR	8150311	ExpressionStatement	pst -> first_letter = next	151:12:4847:4871	8150011	0	True				
ANR	8150312	AssignmentExpression	pst -> first_letter = next		8150011	0		=			
ANR	8150313	PtrMemberAccess	pst -> first_letter		8150011	0					
ANR	8150314	Identifier	pst		8150011	0					
ANR	8150315	Identifier	first_letter		8150011	1					
ANR	8150316	Identifier	next		8150011	1					
ANR	8150317	ContinueStatement	continue ;	152:12:4885:4893	8150011	1	True				
ANR	8150318	CompoundStatement		67:12:2165:2227	8150011	3					
ANR	8150319	IdentifierDeclStatement	int index = pst -> hpgl_command_indices [ pst -> first_letter ] [ next ] ;	155:12:4927:4989	8150011	0	True				
ANR	8150320	IdentifierDecl	index = pst -> hpgl_command_indices [ pst -> first_letter ] [ next ]		8150011	0					
ANR	8150321	IdentifierDeclType	int		8150011	0					
ANR	8150322	Identifier	index		8150011	1					
ANR	8150323	AssignmentExpression	index = pst -> hpgl_command_indices [ pst -> first_letter ] [ next ]		8150011	2		=			
ANR	8150324	Identifier	index		8150011	0					
ANR	8150325	ArrayIndexing	pst -> hpgl_command_indices [ pst -> first_letter ] [ next ]		8150011	1					
ANR	8150326	ArrayIndexing	pst -> hpgl_command_indices [ pst -> first_letter ]		8150011	0					
ANR	8150327	PtrMemberAccess	pst -> hpgl_command_indices		8150011	0					
ANR	8150328	Identifier	pst		8150011	0					
ANR	8150329	Identifier	hpgl_command_indices		8150011	1					
ANR	8150330	PtrMemberAccess	pst -> first_letter		8150011	1					
ANR	8150331	Identifier	pst		8150011	0					
ANR	8150332	Identifier	first_letter		8150011	1					
ANR	8150333	Identifier	next		8150011	1					
ANR	8150334	IfStatement	if ( gs_debug_c ( 'i' ) )		8150011	1					
ANR	8150335	Condition	gs_debug_c ( 'i' )	158:16:5021:5035	8150011	0	True				
ANR	8150336	CallExpression	gs_debug_c ( 'i' )		8150011	0					
ANR	8150337	Callee	gs_debug_c		8150011	0					
ANR	8150338	Identifier	gs_debug_c		8150011	0					
ANR	8150339	ArgumentList	'i'		8150011	1					
ANR	8150340	Argument	'i'		8150011	0					
ANR	8150341	PrimaryExpression	'i'		8150011	0					
ANR	8150342	CompoundStatement		71:16:2294:2322	8150011	1					
ANR	8150343	IdentifierDeclStatement	char c = ( index ? '-' : '?' ) ;	159:16:5056:5084	8150011	0	True				
ANR	8150344	IdentifierDecl	c = ( index ? '-' : '?' )		8150011	0					
ANR	8150345	IdentifierDeclType	char		8150011	0					
ANR	8150346	Identifier	c		8150011	1					
ANR	8150347	AssignmentExpression	c = ( index ? '-' : '?' )		8150011	2		=			
ANR	8150348	Identifier	c		8150011	0					
ANR	8150349	ConditionalExpression	index ? '-' : '?'		8150011	1					
ANR	8150350	Condition	index		8150011	0					
ANR	8150351	Identifier	index		8150011	0					
ANR	8150352	PrimaryExpression	'-'		8150011	1					
ANR	8150353	PrimaryExpression	'?'		8150011	2					
ANR	8150354	ExpressionStatement	"dmprintf4 ( pgls -> memory , ""--%c%c%c%c"" , pst -> first_letter + 'A' , next + 'A' , c , c )"	161:16:5103:5209	8150011	1	True				
ANR	8150355	CallExpression	"dmprintf4 ( pgls -> memory , ""--%c%c%c%c"" , pst -> first_letter + 'A' , next + 'A' , c , c )"		8150011	0					
ANR	8150356	Callee	dmprintf4		8150011	0					
ANR	8150357	Identifier	dmprintf4		8150011	0					
ANR	8150358	ArgumentList	pgls -> memory		8150011	1					
ANR	8150359	Argument	pgls -> memory		8150011	0					
ANR	8150360	PtrMemberAccess	pgls -> memory		8150011	0					
ANR	8150361	Identifier	pgls		8150011	0					
ANR	8150362	Identifier	memory		8150011	1					
ANR	8150363	Argument	"""--%c%c%c%c"""		8150011	1					
ANR	8150364	PrimaryExpression	"""--%c%c%c%c"""		8150011	0					
ANR	8150365	Argument	pst -> first_letter + 'A'		8150011	2					
ANR	8150366	AdditiveExpression	pst -> first_letter + 'A'		8150011	0		+			
ANR	8150367	PtrMemberAccess	pst -> first_letter		8150011	0					
ANR	8150368	Identifier	pst		8150011	0					
ANR	8150369	Identifier	first_letter		8150011	1					
ANR	8150370	PrimaryExpression	'A'		8150011	1					
ANR	8150371	Argument	next + 'A'		8150011	3					
ANR	8150372	AdditiveExpression	next + 'A'		8150011	0		+			
ANR	8150373	Identifier	next		8150011	0					
ANR	8150374	PrimaryExpression	'A'		8150011	1					
ANR	8150375	Argument	c		8150011	4					
ANR	8150376	Identifier	c		8150011	0					
ANR	8150377	Argument	c		8150011	5					
ANR	8150378	Identifier	c		8150011	0					
ANR	8150379	IfStatement	if ( index == 0 )		8150011	2					
ANR	8150380	Condition	index == 0	165:16:5248:5257	8150011	0	True				
ANR	8150381	EqualityExpression	index == 0		8150011	0		==			
ANR	8150382	Identifier	index		8150011	0					
ANR	8150383	PrimaryExpression	0		8150011	1					
ANR	8150384	CompoundStatement		77:28:2498:2498	8150011	1					
ANR	8150385	ExpressionStatement	pst -> first_letter = next	166:16:5313:5337	8150011	0	True				
ANR	8150386	AssignmentExpression	pst -> first_letter = next		8150011	0		=			
ANR	8150387	PtrMemberAccess	pst -> first_letter		8150011	0					
ANR	8150388	Identifier	pst		8150011	0					
ANR	8150389	Identifier	first_letter		8150011	1					
ANR	8150390	Identifier	next		8150011	1					
ANR	8150391	ContinueStatement	continue ;	167:16:5355:5363	8150011	1	True				
ANR	8150392	ExpressionStatement	pst -> first_letter = - 1	169:12:5391:5413	8150011	3	True				
ANR	8150393	AssignmentExpression	pst -> first_letter = - 1		8150011	0		=			
ANR	8150394	PtrMemberAccess	pst -> first_letter		8150011	0					
ANR	8150395	Identifier	pst		8150011	0					
ANR	8150396	Identifier	first_letter		8150011	1					
ANR	8150397	UnaryOperationExpression	- 1		8150011	1					
ANR	8150398	UnaryOperator	-		8150011	0					
ANR	8150399	PrimaryExpression	1		8150011	1					
ANR	8150400	ExpressionStatement	pst -> command = pst -> hpgl_command_list [ index ]	170:12:5427:5471	8150011	4	True				
ANR	8150401	AssignmentExpression	pst -> command = pst -> hpgl_command_list [ index ]		8150011	0		=			
ANR	8150402	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150403	Identifier	pst		8150011	0					
ANR	8150404	Identifier	command		8150011	1					
ANR	8150405	ArrayIndexing	pst -> hpgl_command_list [ index ]		8150011	1					
ANR	8150406	PtrMemberAccess	pst -> hpgl_command_list		8150011	0					
ANR	8150407	Identifier	pst		8150011	0					
ANR	8150408	Identifier	hpgl_command_list		8150011	1					
ANR	8150409	Identifier	index		8150011	1					
ANR	8150410	ExpressionStatement	pst -> phase = 0	171:12:5485:5499	8150011	5	True				
ANR	8150411	AssignmentExpression	pst -> phase = 0		8150011	0		=			
ANR	8150412	PtrMemberAccess	pst -> phase		8150011	0					
ANR	8150413	Identifier	pst		8150011	0					
ANR	8150414	Identifier	phase		8150011	1					
ANR	8150415	PrimaryExpression	0		8150011	1					
ANR	8150416	ExpressionStatement	pst -> done = false	172:12:5513:5530	8150011	6	True				
ANR	8150417	AssignmentExpression	pst -> done = false		8150011	0		=			
ANR	8150418	PtrMemberAccess	pst -> done		8150011	0					
ANR	8150419	Identifier	pst		8150011	0					
ANR	8150420	Identifier	done		8150011	1					
ANR	8150421	Identifier	false		8150011	1					
ANR	8150422	ExpressionStatement	hpgl_args_init ( pst )	173:12:5544:5563	8150011	7	True				
ANR	8150423	CallExpression	hpgl_args_init ( pst )		8150011	0					
ANR	8150424	Callee	hpgl_args_init		8150011	0					
ANR	8150425	Identifier	hpgl_args_init		8150011	0					
ANR	8150426	ArgumentList	pst		8150011	1					
ANR	8150427	Argument	pst		8150011	0					
ANR	8150428	Identifier	pst		8150011	0					
ANR	8150429	CompoundStatement		97:16:3389:3416	8150011	8					
ANR	8150430	IdentifierDeclStatement	bool ignore_command = false ;	185:16:6151:6178	8150011	0	True				
ANR	8150431	IdentifierDecl	ignore_command = false		8150011	0					
ANR	8150432	IdentifierDeclType	bool		8150011	0					
ANR	8150433	Identifier	ignore_command		8150011	1					
ANR	8150434	AssignmentExpression	ignore_command = false		8150011	2		=			
ANR	8150435	Identifier	false		8150011	0					
ANR	8150436	Identifier	false		8150011	1					
ANR	8150437	IfStatement	if ( ( pgls -> g . polygon_mode ) && ! ( pst -> command -> flags & hpgl_cdf_polygon ) )		8150011	1					
ANR	8150438	Condition	( pgls -> g . polygon_mode ) && ! ( pst -> command -> flags & hpgl_cdf_polygon )	187:20:6201:6287	8150011	0	True				
ANR	8150439	AndExpression	( pgls -> g . polygon_mode ) && ! ( pst -> command -> flags & hpgl_cdf_polygon )		8150011	0		&&			
ANR	8150440	MemberAccess	pgls -> g . polygon_mode		8150011	0					
ANR	8150441	PtrMemberAccess	pgls -> g		8150011	0					
ANR	8150442	Identifier	pgls		8150011	0					
ANR	8150443	Identifier	g		8150011	1					
ANR	8150444	Identifier	polygon_mode		8150011	1					
ANR	8150445	UnaryOperationExpression	! ( pst -> command -> flags & hpgl_cdf_polygon )		8150011	1					
ANR	8150446	UnaryOperator	!		8150011	0					
ANR	8150447	BitAndExpression	pst -> command -> flags & hpgl_cdf_polygon		8150011	1		&			
ANR	8150448	PtrMemberAccess	pst -> command -> flags		8150011	0					
ANR	8150449	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150450	Identifier	pst		8150011	0					
ANR	8150451	Identifier	command		8150011	1					
ANR	8150452	Identifier	flags		8150011	1					
ANR	8150453	Identifier	hpgl_cdf_polygon		8150011	1					
ANR	8150454	ExpressionStatement	ignore_command = true	190:20:6331:6352	8150011	1	True				
ANR	8150455	AssignmentExpression	ignore_command = true		8150011	0		=			
ANR	8150456	Identifier	ignore_command		8150011	0					
ANR	8150457	Identifier	true		8150011	1					
ANR	8150458	ElseStatement	else		8150011	0					
ANR	8150459	CompoundStatement		103:21:3613:3613	8150011	0					
ANR	8150460	IfStatement	if ( ( pgls -> g . lost_mode == hpgl_lost_mode_entered ) && ( pst -> command -> flags & hpgl_cdf_lost_mode_cleared ) )		8150011	0					
ANR	8150461	Condition	( pgls -> g . lost_mode == hpgl_lost_mode_entered ) && ( pst -> command -> flags & hpgl_cdf_lost_mode_cleared )	194:24:6610:6732	8150011	0	True				
ANR	8150462	AndExpression	( pgls -> g . lost_mode == hpgl_lost_mode_entered ) && ( pst -> command -> flags & hpgl_cdf_lost_mode_cleared )		8150011	0		&&			
ANR	8150463	EqualityExpression	pgls -> g . lost_mode == hpgl_lost_mode_entered		8150011	0		==			
ANR	8150464	MemberAccess	pgls -> g . lost_mode		8150011	0					
ANR	8150465	PtrMemberAccess	pgls -> g		8150011	0					
ANR	8150466	Identifier	pgls		8150011	0					
ANR	8150467	Identifier	g		8150011	1					
ANR	8150468	Identifier	lost_mode		8150011	1					
ANR	8150469	Identifier	hpgl_lost_mode_entered		8150011	1					
ANR	8150470	BitAndExpression	pst -> command -> flags & hpgl_cdf_lost_mode_cleared		8150011	1		&			
ANR	8150471	PtrMemberAccess	pst -> command -> flags		8150011	0					
ANR	8150472	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150473	Identifier	pst		8150011	0					
ANR	8150474	Identifier	command		8150011	1					
ANR	8150475	Identifier	flags		8150011	1					
ANR	8150476	Identifier	hpgl_cdf_lost_mode_cleared		8150011	1					
ANR	8150477	ExpressionStatement	ignore_command = true	197:24:6784:6805	8150011	1	True				
ANR	8150478	AssignmentExpression	ignore_command = true		8150011	0		=			
ANR	8150479	Identifier	ignore_command		8150011	0					
ANR	8150480	Identifier	true		8150011	1					
ANR	8150481	IfStatement	if ( pgls -> personality == rtl )		8150011	2					
ANR	8150482	Condition	pgls -> personality == rtl	201:20:6991:7014	8150011	0	True				
ANR	8150483	EqualityExpression	pgls -> personality == rtl		8150011	0		==			
ANR	8150484	PtrMemberAccess	pgls -> personality		8150011	0					
ANR	8150485	Identifier	pgls		8150011	0					
ANR	8150486	Identifier	personality		8150011	1					
ANR	8150487	Identifier	rtl		8150011	1					
ANR	8150488	IfStatement	if ( ! ( pst -> command -> flags & hpgl_cdf_rtl ) )		8150011	1					
ANR	8150489	Condition	! ( pst -> command -> flags & hpgl_cdf_rtl )	202:24:7041:7077	8150011	0	True				
ANR	8150490	UnaryOperationExpression	! ( pst -> command -> flags & hpgl_cdf_rtl )		8150011	0					
ANR	8150491	UnaryOperator	!		8150011	0					
ANR	8150492	BitAndExpression	pst -> command -> flags & hpgl_cdf_rtl		8150011	1		&			
ANR	8150493	PtrMemberAccess	pst -> command -> flags		8150011	0					
ANR	8150494	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150495	Identifier	pst		8150011	0					
ANR	8150496	Identifier	command		8150011	1					
ANR	8150497	Identifier	flags		8150011	1					
ANR	8150498	Identifier	hpgl_cdf_rtl		8150011	1					
ANR	8150499	ExpressionStatement	ignore_command = true	203:24:7128:7149	8150011	1	True				
ANR	8150500	AssignmentExpression	ignore_command = true		8150011	0		=			
ANR	8150501	Identifier	ignore_command		8150011	0					
ANR	8150502	Identifier	true		8150011	1					
ANR	8150503	IfStatement	if ( ( pgls -> personality == pcl5c ) || ( pgls -> personality == pcl5e ) )		8150011	3					
ANR	8150504	Condition	( pgls -> personality == pcl5c ) || ( pgls -> personality == pcl5e )	204:20:7171:7250	8150011	0	True				
ANR	8150505	OrExpression	( pgls -> personality == pcl5c ) || ( pgls -> personality == pcl5e )		8150011	0		||			
ANR	8150506	EqualityExpression	pgls -> personality == pcl5c		8150011	0		==			
ANR	8150507	PtrMemberAccess	pgls -> personality		8150011	0					
ANR	8150508	Identifier	pgls		8150011	0					
ANR	8150509	Identifier	personality		8150011	1					
ANR	8150510	Identifier	pcl5c		8150011	1					
ANR	8150511	EqualityExpression	pgls -> personality == pcl5e		8150011	1		==			
ANR	8150512	PtrMemberAccess	pgls -> personality		8150011	0					
ANR	8150513	Identifier	pgls		8150011	0					
ANR	8150514	Identifier	personality		8150011	1					
ANR	8150515	Identifier	pcl5e		8150011	1					
ANR	8150516	IfStatement	if ( ! ( pst -> command -> flags & hpgl_cdf_pcl ) )		8150011	1					
ANR	8150517	Condition	! ( pst -> command -> flags & hpgl_cdf_pcl )	206:24:7277:7313	8150011	0	True				
ANR	8150518	UnaryOperationExpression	! ( pst -> command -> flags & hpgl_cdf_pcl )		8150011	0					
ANR	8150519	UnaryOperator	!		8150011	0					
ANR	8150520	BitAndExpression	pst -> command -> flags & hpgl_cdf_pcl		8150011	1		&			
ANR	8150521	PtrMemberAccess	pst -> command -> flags		8150011	0					
ANR	8150522	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150523	Identifier	pst		8150011	0					
ANR	8150524	Identifier	command		8150011	1					
ANR	8150525	Identifier	flags		8150011	1					
ANR	8150526	Identifier	hpgl_cdf_pcl		8150011	1					
ANR	8150527	ExpressionStatement	ignore_command = true	207:24:7364:7385	8150011	1	True				
ANR	8150528	AssignmentExpression	ignore_command = true		8150011	0		=			
ANR	8150529	Identifier	ignore_command		8150011	0					
ANR	8150530	Identifier	true		8150011	1					
ANR	8150531	IfStatement	if ( ignore_command )		8150011	4					
ANR	8150532	Condition	ignore_command	208:20:7407:7420	8150011	0	True				
ANR	8150533	Identifier	ignore_command		8150011	0					
ANR	8150534	ExpressionStatement	pst -> command = 0	209:20:7443:7459	8150011	1	True				
ANR	8150535	AssignmentExpression	pst -> command = 0		8150011	0		=			
ANR	8150536	PtrMemberAccess	pst -> command		8150011	0					
ANR	8150537	Identifier	pst		8150011	0					
ANR	8150538	Identifier	command		8150011	1					
ANR	8150539	PrimaryExpression	0		8150011	1					
ANR	8150540	GotoStatement	goto call ;	211:12:7487:7496	8150011	9	True				
ANR	8150541	Identifier	call		8150011	0					
ANR	8150542	Label	x :	214:2:7516:7517	8150011	11	True				
ANR	8150543	Identifier	x		8150011	0					
ANR	8150544	ExpressionStatement	pr -> ptr = p	214:4:7518:7529	8150011	12	True				
ANR	8150545	AssignmentExpression	pr -> ptr = p		8150011	0		=			
ANR	8150546	PtrMemberAccess	pr -> ptr		8150011	0					
ANR	8150547	Identifier	pr		8150011	0					
ANR	8150548	Identifier	ptr		8150011	1					
ANR	8150549	Identifier	p		8150011	1					
ANR	8150550	ExpressionStatement	pst -> exit_to_parser = NULL	215:4:7535:7561	8150011	13	True				
ANR	8150551	AssignmentExpression	pst -> exit_to_parser = NULL		8150011	0		=			
ANR	8150552	PtrMemberAccess	pst -> exit_to_parser		8150011	0					
ANR	8150553	Identifier	pst		8150011	0					
ANR	8150554	Identifier	exit_to_parser		8150011	1					
ANR	8150555	Identifier	NULL		8150011	1					
ANR	8150556	IfStatement	if ( pgls -> macro_level > 0 && ( code == gs_error_NeedInput ) )		8150011	14					
ANR	8150557	Condition	pgls -> macro_level > 0 && ( code == gs_error_NeedInput )	221:8:7684:7736	8150011	0	True				
ANR	8150558	AndExpression	pgls -> macro_level > 0 && ( code == gs_error_NeedInput )		8150011	0		&&			
ANR	8150559	RelationalExpression	pgls -> macro_level > 0		8150011	0		>			
ANR	8150560	PtrMemberAccess	pgls -> macro_level		8150011	0					
ANR	8150561	Identifier	pgls		8150011	0					
ANR	8150562	Identifier	macro_level		8150011	1					
ANR	8150563	PrimaryExpression	0		8150011	1					
ANR	8150564	EqualityExpression	code == gs_error_NeedInput		8150011	1		==			
ANR	8150565	Identifier	code		8150011	0					
ANR	8150566	Identifier	gs_error_NeedInput		8150011	1					
ANR	8150567	ExpressionStatement	code = gs_error_Fatal	222:8:7747:7768	8150011	1	True				
ANR	8150568	AssignmentExpression	code = gs_error_Fatal		8150011	0		=			
ANR	8150569	Identifier	code		8150011	0					
ANR	8150570	Identifier	gs_error_Fatal		8150011	1					
ANR	8150571	ReturnStatement	return ( code == gs_error_NeedInput ? 0 : code ) ;	224:4:7783:7829	8150011	15	True				
ANR	8150572	ConditionalExpression	code == gs_error_NeedInput ? 0 : code		8150011	0					
ANR	8150573	Condition	code == gs_error_NeedInput		8150011	0					
ANR	8150574	EqualityExpression	code == gs_error_NeedInput		8150011	0		==			
ANR	8150575	Identifier	code		8150011	0					
ANR	8150576	Identifier	gs_error_NeedInput		8150011	1					
ANR	8150577	PrimaryExpression	0		8150011	1					
ANR	8150578	Identifier	code		8150011	2					
ANR	8150579	ReturnType	int		8150011	1					
ANR	8150580	Identifier	hpgl_process		8150011	2					
ANR	8150581	ParameterList	"hpgl_parser_state_t * pst , hpgl_state_t * pgls , stream_cursor_read * pr"		8150011	3					
ANR	8150582	Parameter	hpgl_parser_state_t * pst	87:13:2675:2699	8150011	0	True				
ANR	8150583	ParameterType	hpgl_parser_state_t *		8150011	0					
ANR	8150584	Identifier	pst		8150011	1					
ANR	8150585	Parameter	hpgl_state_t * pgls	87:40:2702:2720	8150011	1	True				
ANR	8150586	ParameterType	hpgl_state_t *		8150011	0					
ANR	8150587	Identifier	pgls		8150011	1					
ANR	8150588	Parameter	stream_cursor_read * pr	88:13:2736:2758	8150011	2	True				
ANR	8150589	ParameterType	stream_cursor_read *		8150011	0					
ANR	8150590	Identifier	pr		8150011	1					
ANR	8150591	CFGEntryNode	ENTRY		8150011		True				
ANR	8150592	CFGExitNode	EXIT		8150011		True				
ANR	8150593	Symbol	* ( pst -> exit_to_parser )		8150011						
ANR	8150594	Symbol	pr		8150011						
ANR	8150595	Symbol	* index		8150011						
ANR	8150596	Symbol	pgls -> g . lost_mode		8150011						
ANR	8150597	Symbol	pgls		8150011						
ANR	8150598	Symbol	* next		8150011						
ANR	8150599	Symbol	* pst -> first_letter		8150011						
ANR	8150600	Symbol	pr -> limit		8150011						
ANR	8150601	Symbol	pst -> source		8150011						
ANR	8150602	Symbol	* pst -> command -> proc		8150011						
ANR	8150603	Symbol	* pst -> hpgl_command_indices		8150011						
ANR	8150604	Symbol	gs_debug_c		8150011						
ANR	8150605	Symbol	pgls -> g		8150011						
ANR	8150606	Symbol	pr -> ptr		8150011						
ANR	8150607	Symbol	pgls -> personality		8150011						
ANR	8150608	Symbol	gs_error_Fatal		8150011						
ANR	8150609	Symbol	rlimit		8150011						
ANR	8150610	Symbol	NULL		8150011						
ANR	8150611	Symbol	* * pst		8150011						
ANR	8150612	Symbol	pst -> done		8150011						
ANR	8150613	Symbol	index		8150011						
ANR	8150614	Symbol	* pst -> hpgl_command_list		8150011						
ANR	8150615	Symbol	* pr		8150011						
ANR	8150616	Symbol	pst -> arg . next		8150011						
ANR	8150617	Symbol	pst -> phase		8150011						
ANR	8150618	Symbol	* * pst -> command		8150011						
ANR	8150619	Symbol	pcl5e		8150011						
ANR	8150620	Symbol	true		8150011						
ANR	8150621	Symbol	* pst		8150011						
ANR	8150622	Symbol	gs_error_NeedInput		8150011						
ANR	8150623	Symbol	* pst -> exit_to_parser		8150011						
ANR	8150624	Symbol	hpgl_cdf_polygon		8150011						
ANR	8150625	Symbol	pcl5c		8150011						
ANR	8150626	Symbol	next		8150011						
ANR	8150627	Symbol	hpgl_cdf_pcl		8150011						
ANR	8150628	Symbol	& exit_to_parser		8150011						
ANR	8150629	Symbol	code		8150011						
ANR	8150630	Symbol	* * pst -> first_letter		8150011						
ANR	8150631	Symbol	ignore_command		8150011						
ANR	8150632	Symbol	pst -> source . limit		8150011						
ANR	8150633	Symbol	pst -> command		8150011						
ANR	8150634	Symbol	* * pst -> hpgl_command_indices		8150011						
ANR	8150635	Symbol	pgls -> macro_level		8150011						
ANR	8150636	Symbol	* * * pst		8150011						
ANR	8150637	Symbol	pst		8150011						
ANR	8150638	Symbol	hpgl_cdf_rtl		8150011						
ANR	8150639	Symbol	pst -> exit_to_parser		8150011						
ANR	8150640	Symbol	ESC		8150011						
ANR	8150641	Symbol	pst -> first_letter		8150011						
ANR	8150642	Symbol	pst -> hpgl_command_indices		8150011						
ANR	8150643	Symbol	* pgls		8150011						
ANR	8150644	Symbol	pgls -> memory		8150011						
ANR	8150645	Symbol	* pst -> command		8150011						
ANR	8150646	Symbol	pgls -> g . polygon_mode		8150011						
ANR	8150647	Symbol	pst -> command -> flags		8150011						
ANR	8150648	Symbol	c		8150011						
ANR	8150649	Symbol	pst -> arg		8150011						
ANR	8150650	Symbol	* ++ p		8150011						
ANR	8150651	Symbol	pst -> hpgl_command_list		8150011						
ANR	8150652	Symbol	hpgl_lost_mode_entered		8150011						
ANR	8150653	Symbol	exit_to_parser		8150011						
ANR	8150654	Symbol	false		8150011						
ANR	8150655	Symbol	setjmp		8150011						
ANR	8150656	Symbol	rtl		8150011						
ANR	8150657	Symbol	hpgl_cdf_lost_mode_cleared		8150011						
ANR	8150658	Symbol	p		8150011						
ANR	8150659	Symbol	pst -> command -> proc		8150011						
ANR	8150660	Symbol	pst -> source . ptr		8150011						
ANR	8150661	Symbol	* p		8150011						
ANR	8150662	Function	hpgl_arg	232:0:8045:12134							
ANR	8150663	FunctionDef	"hpgl_arg (const gs_memory_t * mem , hpgl_parser_state_t * pst)"		8150662	0					
ANR	8150664	CompoundStatement		234:0:8134:12134	8150662	0					
ANR	8150665	IdentifierDeclStatement	const byte * p ;	235:4:8140:8153	8150662	0	True				
ANR	8150666	IdentifierDecl	* p		8150662	0					
ANR	8150667	IdentifierDeclType	const byte *		8150662	0					
ANR	8150668	Identifier	p		8150662	1					
ANR	8150669	IdentifierDeclStatement	const byte * rlimit ;	236:4:8159:8177	8150662	1	True				
ANR	8150670	IdentifierDecl	* rlimit		8150662	0					
ANR	8150671	IdentifierDeclType	const byte *		8150662	0					
ANR	8150672	Identifier	rlimit		8150662	1					
ANR	8150673	IdentifierDeclStatement	hpgl_value_t * pvalue ;	237:4:8183:8203	8150662	2	True				
ANR	8150674	IdentifierDecl	* pvalue		8150662	0					
ANR	8150675	IdentifierDeclType	hpgl_value_t *		8150662	0					
ANR	8150676	Identifier	pvalue		8150662	1					
ANR	8150677	Statement	define	239:1:8207:8212	8150662	3	True				
ANR	8150678	Statement	parg	239:8:8214:8217	8150662	4	True				
ANR	8150679	Statement	(	239:13:8219:8219	8150662	5	True				
ANR	8150680	Statement	&	239:14:8220:8220	8150662	6	True				
ANR	8150681	Statement	pst	239:15:8221:8223	8150662	7	True				
ANR	8150682	Statement	->	239:18:8224:8225	8150662	8	True				
ANR	8150683	Statement	arg	239:20:8226:8228	8150662	9	True				
ANR	8150684	Statement	)	239:23:8229:8229	8150662	10	True				
ANR	8150685	IfStatement	if ( parg -> next < parg -> count )		8150662	11					
ANR	8150686	Condition	parg -> next < parg -> count	240:8:8239:8262	8150662	0	True				
ANR	8150687	RelationalExpression	parg -> next < parg -> count		8150662	0		<			
ANR	8150688	PtrMemberAccess	parg -> next		8150662	0					
ANR	8150689	Identifier	parg		8150662	0					
ANR	8150690	Identifier	next		8150662	1					
ANR	8150691	PtrMemberAccess	parg -> count		8150662	1					
ANR	8150692	Identifier	parg		8150662	0					
ANR	8150693	Identifier	count		8150662	1					
ANR	8150694	CompoundStatement		7:34:130:130	8150662	1					
ANR	8150695	ReturnStatement	return & parg -> scanned [ parg -> next ++ ] ;	241:8:8334:8369	8150662	0	True				
ANR	8150696	UnaryOperationExpression	& parg -> scanned [ parg -> next ++ ]		8150662	0					
ANR	8150697	UnaryOperator	&		8150662	0					
ANR	8150698	ArrayIndexing	parg -> scanned [ parg -> next ++ ]		8150662	1					
ANR	8150699	PtrMemberAccess	parg -> scanned		8150662	0					
ANR	8150700	Identifier	parg		8150662	0					
ANR	8150701	Identifier	scanned		8150662	1					
ANR	8150702	PostIncDecOperationExpression	parg -> next ++		8150662	1					
ANR	8150703	PtrMemberAccess	parg -> next		8150662	0					
ANR	8150704	Identifier	parg		8150662	0					
ANR	8150705	Identifier	next		8150662	1					
ANR	8150706	IncDec	++		8150662	1					
ANR	8150707	IfStatement	if ( pst -> done )		8150662	12					
ANR	8150708	Condition	pst -> done	243:8:8385:8393	8150662	0	True				
ANR	8150709	PtrMemberAccess	pst -> done		8150662	0					
ANR	8150710	Identifier	pst		8150662	0					
ANR	8150711	Identifier	done		8150662	1					
ANR	8150712	ReturnStatement	return 0 ;	244:8:8404:8412	8150662	1	True				
ANR	8150713	PrimaryExpression	0		8150662	0					
ANR	8150714	ExpressionStatement	p = pst -> source . ptr	245:4:8418:8437	8150662	13	True				
ANR	8150715	AssignmentExpression	p = pst -> source . ptr		8150662	0		=			
ANR	8150716	Identifier	p		8150662	0					
ANR	8150717	MemberAccess	pst -> source . ptr		8150662	1					
ANR	8150718	PtrMemberAccess	pst -> source		8150662	0					
ANR	8150719	Identifier	pst		8150662	0					
ANR	8150720	Identifier	source		8150662	1					
ANR	8150721	Identifier	ptr		8150662	1					
ANR	8150722	ExpressionStatement	rlimit = pst -> source . limit	246:4:8443:8469	8150662	14	True				
ANR	8150723	AssignmentExpression	rlimit = pst -> source . limit		8150662	0		=			
ANR	8150724	Identifier	rlimit		8150662	0					
ANR	8150725	MemberAccess	pst -> source . limit		8150662	1					
ANR	8150726	PtrMemberAccess	pst -> source		8150662	0					
ANR	8150727	Identifier	pst		8150662	0					
ANR	8150728	Identifier	source		8150662	1					
ANR	8150729	Identifier	limit		8150662	1					
ANR	8150730	ExpressionStatement	pvalue = & parg -> scanned [ parg -> count ]	247:4:8475:8511	8150662	15	True				
ANR	8150731	AssignmentExpression	pvalue = & parg -> scanned [ parg -> count ]		8150662	0		=			
ANR	8150732	Identifier	pvalue		8150662	0					
ANR	8150733	UnaryOperationExpression	& parg -> scanned [ parg -> count ]		8150662	1					
ANR	8150734	UnaryOperator	&		8150662	0					
ANR	8150735	ArrayIndexing	parg -> scanned [ parg -> count ]		8150662	1					
ANR	8150736	PtrMemberAccess	parg -> scanned		8150662	0					
ANR	8150737	Identifier	parg		8150662	0					
ANR	8150738	Identifier	scanned		8150662	1					
ANR	8150739	PtrMemberAccess	parg -> count		8150662	1					
ANR	8150740	Identifier	parg		8150662	0					
ANR	8150741	Identifier	count		8150662	1					
ANR	8150742	Statement	define	248:1:8514:8519	8150662	16	True				
ANR	8150743	Statement	check_value	248:8:8521:8531	8150662	17	True				
ANR	8150744	Statement	(	248:19:8532:8532	8150662	18	True				
ANR	8150745	Statement	)	248:20:8533:8533	8150662	19	True				
ANR	8150746	IfStatement	if ( parg -> have_value )		8150662	20					
ANR	8150747	Condition	parg -> have_value	249:7:8543:8558	8150662	0	True				
ANR	8150748	PtrMemberAccess	parg -> have_value		8150662	0					
ANR	8150749	Identifier	parg		8150662	0					
ANR	8150750	Identifier	have_value		8150662	1					
ANR	8150751	Statement	goto	249:26:8562:8565	8150662	1	True				
ANR	8150752	Statement	done	249:31:8567:8570	8150662	21	True				
ANR	8150753	ForStatement	for ( ; p < rlimit ; ++ p )		8150662	22					
ANR	8150754	Condition	p < rlimit	251:11:8584:8593	8150662	0	True				
ANR	8150755	RelationalExpression	p < rlimit		8150662	0		<			
ANR	8150756	Identifier	p		8150662	0					
ANR	8150757	Identifier	rlimit		8150662	1					
ANR	8150758	UnaryExpression	++ p	251:23:8596:8598	8150662	1	True				
ANR	8150759	IncDec	++		8150662	0					
ANR	8150760	Identifier	p		8150662	1					
ANR	8150761	CompoundStatement		19:8:476:490	8150662	2					
ANR	8150762	IdentifierDeclStatement	byte ch = p [ 1 ] ;	252:8:8611:8625	8150662	0	True				
ANR	8150763	IdentifierDecl	ch = p [ 1 ]		8150662	0					
ANR	8150764	IdentifierDeclType	byte		8150662	0					
ANR	8150765	Identifier	ch		8150662	1					
ANR	8150766	AssignmentExpression	ch = p [ 1 ]		8150662	2		=			
ANR	8150767	Identifier	ch		8150662	0					
ANR	8150768	ArrayIndexing	p [ 1 ]		8150662	1					
ANR	8150769	Identifier	p		8150662	0					
ANR	8150770	PrimaryExpression	1		8150662	1					
ANR	8150771	SwitchStatement	switch ( ch )		8150662	1					
ANR	8150772	Condition	ch	254:16:8644:8645	8150662	0	True				
ANR	8150773	Identifier	ch		8150662	0					
ANR	8150774	CompoundStatement		21:20:513:513	8150662	1					
ANR	8150775	Label	case '+' :	255:12:8662:8670	8150662	0	True				
ANR	8150776	ExpressionStatement	check_value ( )	256:16:8688:8701	8150662	1	True				
ANR	8150777	CallExpression	check_value ( )		8150662	0					
ANR	8150778	Callee	check_value		8150662	0					
ANR	8150779	Identifier	check_value		8150662	0					
ANR	8150780	ArgumentList			8150662	1					
ANR	8150781	ExpressionStatement	parg -> have_value = 1	257:16:8719:8739	8150662	2	True				
ANR	8150782	AssignmentExpression	parg -> have_value = 1		8150662	0		=			
ANR	8150783	PtrMemberAccess	parg -> have_value		8150662	0					
ANR	8150784	Identifier	parg		8150662	0					
ANR	8150785	Identifier	have_value		8150662	1					
ANR	8150786	PrimaryExpression	1		8150662	1					
ANR	8150787	ExpressionStatement	parg -> sign = 1	258:16:8757:8771	8150662	3	True				
ANR	8150788	AssignmentExpression	parg -> sign = 1		8150662	0		=			
ANR	8150789	PtrMemberAccess	parg -> sign		8150662	0					
ANR	8150790	Identifier	parg		8150662	0					
ANR	8150791	Identifier	sign		8150662	1					
ANR	8150792	PrimaryExpression	1		8150662	1					
ANR	8150793	ExpressionStatement	pvalue -> v_n . i = 0	259:16:8789:8806	8150662	4	True				
ANR	8150794	AssignmentExpression	pvalue -> v_n . i = 0		8150662	0		=			
ANR	8150795	MemberAccess	pvalue -> v_n . i		8150662	0					
ANR	8150796	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150797	Identifier	pvalue		8150662	0					
ANR	8150798	Identifier	v_n		8150662	1					
ANR	8150799	Identifier	i		8150662	1					
ANR	8150800	PrimaryExpression	0		8150662	1					
ANR	8150801	BreakStatement	break ;	260:16:8824:8829	8150662	5	True				
ANR	8150802	Label	case '-' :	261:12:8843:8851	8150662	6	True				
ANR	8150803	ExpressionStatement	check_value ( )	262:16:8869:8882	8150662	7	True				
ANR	8150804	CallExpression	check_value ( )		8150662	0					
ANR	8150805	Callee	check_value		8150662	0					
ANR	8150806	Identifier	check_value		8150662	0					
ANR	8150807	ArgumentList			8150662	1					
ANR	8150808	ExpressionStatement	parg -> have_value = 1	263:16:8900:8920	8150662	8	True				
ANR	8150809	AssignmentExpression	parg -> have_value = 1		8150662	0		=			
ANR	8150810	PtrMemberAccess	parg -> have_value		8150662	0					
ANR	8150811	Identifier	parg		8150662	0					
ANR	8150812	Identifier	have_value		8150662	1					
ANR	8150813	PrimaryExpression	1		8150662	1					
ANR	8150814	ExpressionStatement	parg -> sign = - 1	264:16:8938:8953	8150662	9	True				
ANR	8150815	AssignmentExpression	parg -> sign = - 1		8150662	0		=			
ANR	8150816	PtrMemberAccess	parg -> sign		8150662	0					
ANR	8150817	Identifier	parg		8150662	0					
ANR	8150818	Identifier	sign		8150662	1					
ANR	8150819	UnaryOperationExpression	- 1		8150662	1					
ANR	8150820	UnaryOperator	-		8150662	0					
ANR	8150821	PrimaryExpression	1		8150662	1					
ANR	8150822	ExpressionStatement	pvalue -> v_n . i = 0	265:16:8971:8988	8150662	10	True				
ANR	8150823	AssignmentExpression	pvalue -> v_n . i = 0		8150662	0		=			
ANR	8150824	MemberAccess	pvalue -> v_n . i		8150662	0					
ANR	8150825	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150826	Identifier	pvalue		8150662	0					
ANR	8150827	Identifier	v_n		8150662	1					
ANR	8150828	Identifier	i		8150662	1					
ANR	8150829	PrimaryExpression	0		8150662	1					
ANR	8150830	BreakStatement	break ;	266:16:9006:9011	8150662	11	True				
ANR	8150831	Label	case '.' :	267:12:9025:9033	8150662	12	True				
ANR	8150832	SwitchStatement	switch ( parg -> have_value )		8150662	13					
ANR	8150833	Condition	parg -> have_value	268:24:9059:9074	8150662	0	True				
ANR	8150834	PtrMemberAccess	parg -> have_value		8150662	0					
ANR	8150835	Identifier	parg		8150662	0					
ANR	8150836	Identifier	have_value		8150662	1					
ANR	8150837	CompoundStatement		35:42:942:942	8150662	1					
ANR	8150838	Label	default :	269:20:9099:9106	8150662	0	True				
ANR	8150839	Identifier	default		8150662	0					
ANR	8150840	GotoStatement	goto out ;	270:24:9144:9152	8150662	1	True				
ANR	8150841	Identifier	out		8150662	0					
ANR	8150842	Label	case 0 :	271:20:9174:9180	8150662	2	True				
ANR	8150843	ExpressionStatement	pvalue -> v_n . r = 0	272:24:9206:9223	8150662	3	True				
ANR	8150844	AssignmentExpression	pvalue -> v_n . r = 0		8150662	0		=			
ANR	8150845	MemberAccess	pvalue -> v_n . r		8150662	0					
ANR	8150846	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150847	Identifier	pvalue		8150662	0					
ANR	8150848	Identifier	v_n		8150662	1					
ANR	8150849	Identifier	r		8150662	1					
ANR	8150850	PrimaryExpression	0		8150662	1					
ANR	8150851	BreakStatement	break ;	273:24:9249:9254	8150662	4	True				
ANR	8150852	Label	case 1 :	274:20:9276:9282	8150662	5	True				
ANR	8150853	ExpressionStatement	pvalue -> v_n . r = pvalue -> v_n . i	275:24:9308:9337	8150662	6	True				
ANR	8150854	AssignmentExpression	pvalue -> v_n . r = pvalue -> v_n . i		8150662	0		=			
ANR	8150855	MemberAccess	pvalue -> v_n . r		8150662	0					
ANR	8150856	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150857	Identifier	pvalue		8150662	0					
ANR	8150858	Identifier	v_n		8150662	1					
ANR	8150859	Identifier	r		8150662	1					
ANR	8150860	MemberAccess	pvalue -> v_n . i		8150662	1					
ANR	8150861	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150862	Identifier	pvalue		8150662	0					
ANR	8150863	Identifier	v_n		8150662	1					
ANR	8150864	Identifier	i		8150662	1					
ANR	8150865	ExpressionStatement	parg -> have_value = 2	277:16:9373:9393	8150662	14	True				
ANR	8150866	AssignmentExpression	parg -> have_value = 2		8150662	0		=			
ANR	8150867	PtrMemberAccess	parg -> have_value		8150662	0					
ANR	8150868	Identifier	parg		8150662	0					
ANR	8150869	Identifier	have_value		8150662	1					
ANR	8150870	PrimaryExpression	2		8150662	1					
ANR	8150871	ExpressionStatement	parg -> frac_scale = 1.0	278:16:9411:9433	8150662	15	True				
ANR	8150872	AssignmentExpression	parg -> frac_scale = 1.0		8150662	0		=			
ANR	8150873	PtrMemberAccess	parg -> frac_scale		8150662	0					
ANR	8150874	Identifier	parg		8150662	0					
ANR	8150875	Identifier	frac_scale		8150662	1					
ANR	8150876	PrimaryExpression	1.0		8150662	1					
ANR	8150877	BreakStatement	break ;	279:16:9451:9456	8150662	16	True				
ANR	8150878	Label	case ';' :	280:12:9470:9478	8150662	17	True				
ANR	8150879	ExpressionStatement	pst -> done = true	281:16:9496:9512	8150662	18	True				
ANR	8150880	AssignmentExpression	pst -> done = true		8150662	0		=			
ANR	8150881	PtrMemberAccess	pst -> done		8150662	0					
ANR	8150882	Identifier	pst		8150662	0					
ANR	8150883	Identifier	done		8150662	1					
ANR	8150884	Identifier	true		8150662	1					
ANR	8150885	ExpressionStatement	check_value ( )	282:16:9530:9543	8150662	19	True				
ANR	8150886	CallExpression	check_value ( )		8150662	0					
ANR	8150887	Callee	check_value		8150662	0					
ANR	8150888	Identifier	check_value		8150662	0					
ANR	8150889	ArgumentList			8150662	1					
ANR	8150890	GotoStatement	goto out ;	283:16:9561:9569	8150662	20	True				
ANR	8150891	Identifier	out		8150662	0					
ANR	8150892	Label	case HT :	284:12:9583:9590	8150662	21	True				
ANR	8150893	Identifier	HT		8150662	0					
ANR	8150894	Label	case LF :	285:12:9604:9611	8150662	22	True				
ANR	8150895	Identifier	LF		8150662	0					
ANR	8150896	Label	case FF :	286:12:9625:9632	8150662	23	True				
ANR	8150897	Identifier	FF		8150662	0					
ANR	8150898	Label	case CR :	287:12:9646:9653	8150662	24	True				
ANR	8150899	Identifier	CR		8150662	0					
ANR	8150900	ContinueStatement	continue ;	290:16:9761:9769	8150662	25	True				
ANR	8150901	Label	case SP :	291:12:9783:9790	8150662	26	True				
ANR	8150902	Identifier	SP		8150662	0					
ANR	8150903	Label	"case ',' :"	292:12:9804:9812	8150662	27	True				
ANR	8150904	IfStatement	if ( ! parg -> have_value )		8150662	28					
ANR	8150905	Condition	! parg -> have_value	297:20:9996:10012	8150662	0	True				
ANR	8150906	UnaryOperationExpression	! parg -> have_value		8150662	0					
ANR	8150907	UnaryOperator	!		8150662	0					
ANR	8150908	PtrMemberAccess	parg -> have_value		8150662	1					
ANR	8150909	Identifier	parg		8150662	0					
ANR	8150910	Identifier	have_value		8150662	1					
ANR	8150911	BreakStatement	break ;	298:20:10035:10040	8150662	1	True				
ANR	8150912	ExpressionStatement	++ p	299:16:10058:10061	8150662	29	True				
ANR	8150913	UnaryExpression	++ p		8150662	0					
ANR	8150914	IncDec	++		8150662	0					
ANR	8150915	Identifier	p		8150662	1					
ANR	8150916	Label	done :	300:14:10077:10081	8150662	30	True				
ANR	8150917	Identifier	done		8150662	0					
ANR	8150918	IfStatement	if ( parg -> sign < 0 )		8150662	31					
ANR	8150919	Condition	parg -> sign < 0	300:23:10086:10099	8150662	0	True				
ANR	8150920	RelationalExpression	parg -> sign < 0		8150662	0		<			
ANR	8150921	PtrMemberAccess	parg -> sign		8150662	0					
ANR	8150922	Identifier	parg		8150662	0					
ANR	8150923	Identifier	sign		8150662	1					
ANR	8150924	PrimaryExpression	0		8150662	1					
ANR	8150925	CompoundStatement		67:39:1967:1967	8150662	1					
ANR	8150926	IfStatement	if ( parg -> have_value > 1 )		8150662	0					
ANR	8150927	Condition	parg -> have_value > 1	301:24:10128:10147	8150662	0	True				
ANR	8150928	RelationalExpression	parg -> have_value > 1		8150662	0		>			
ANR	8150929	PtrMemberAccess	parg -> have_value		8150662	0					
ANR	8150930	Identifier	parg		8150662	0					
ANR	8150931	Identifier	have_value		8150662	1					
ANR	8150932	PrimaryExpression	1		8150662	1					
ANR	8150933	ExpressionStatement	pvalue -> v_n . r = - pvalue -> v_n . r	302:24:10174:10204	8150662	1	True				
ANR	8150934	AssignmentExpression	pvalue -> v_n . r = - pvalue -> v_n . r		8150662	0		=			
ANR	8150935	MemberAccess	pvalue -> v_n . r		8150662	0					
ANR	8150936	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150937	Identifier	pvalue		8150662	0					
ANR	8150938	Identifier	v_n		8150662	1					
ANR	8150939	Identifier	r		8150662	1					
ANR	8150940	UnaryOperationExpression	- pvalue -> v_n . r		8150662	1					
ANR	8150941	UnaryOperator	-		8150662	0					
ANR	8150942	MemberAccess	pvalue -> v_n . r		8150662	1					
ANR	8150943	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150944	Identifier	pvalue		8150662	0					
ANR	8150945	Identifier	v_n		8150662	1					
ANR	8150946	Identifier	r		8150662	1					
ANR	8150947	ElseStatement	else		8150662	0					
ANR	8150948	ExpressionStatement	pvalue -> v_n . i = - pvalue -> v_n . i	304:24:10255:10285	8150662	0	True				
ANR	8150949	AssignmentExpression	pvalue -> v_n . i = - pvalue -> v_n . i		8150662	0		=			
ANR	8150950	MemberAccess	pvalue -> v_n . i		8150662	0					
ANR	8150951	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150952	Identifier	pvalue		8150662	0					
ANR	8150953	Identifier	v_n		8150662	1					
ANR	8150954	Identifier	i		8150662	1					
ANR	8150955	UnaryOperationExpression	- pvalue -> v_n . i		8150662	1					
ANR	8150956	UnaryOperator	-		8150662	0					
ANR	8150957	MemberAccess	pvalue -> v_n . i		8150662	1					
ANR	8150958	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150959	Identifier	pvalue		8150662	0					
ANR	8150960	Identifier	v_n		8150662	1					
ANR	8150961	Identifier	i		8150662	1					
ANR	8150962	GotoStatement	goto out ;	306:16:10321:10329	8150662	32	True				
ANR	8150963	Identifier	out		8150662	0					
ANR	8150964	Label	case '0' :	307:12:10343:10351	8150662	33	True				
ANR	8150965	Label	case '1' :	308:12:10365:10373	8150662	34	True				
ANR	8150966	Label	case '2' :	309:12:10387:10395	8150662	35	True				
ANR	8150967	Label	case '3' :	310:12:10409:10417	8150662	36	True				
ANR	8150968	Label	case '4' :	311:12:10431:10439	8150662	37	True				
ANR	8150969	Label	case '5' :	312:12:10453:10461	8150662	38	True				
ANR	8150970	Label	case '6' :	313:12:10475:10483	8150662	39	True				
ANR	8150971	Label	case '7' :	314:12:10497:10505	8150662	40	True				
ANR	8150972	Label	case '8' :	315:12:10519:10527	8150662	41	True				
ANR	8150973	Label	case '9' :	316:12:10541:10549	8150662	42	True				
ANR	8150974	ExpressionStatement	ch -= '0'	317:16:10567:10576	8150662	43	True				
ANR	8150975	AssignmentExpression	ch -= '0'		8150662	0		-=			
ANR	8150976	Identifier	ch		8150662	0					
ANR	8150977	PrimaryExpression	'0'		8150662	1					
ANR	8150978	Statement	define	318:1:10579:10584	8150662	44	True				
ANR	8150979	Statement	max_i	318:8:10586:10590	8150662	45	True				
ANR	8150980	Statement	0x7fffffff	318:14:10592:10601	8150662	46	True				
ANR	8150981	SwitchStatement	switch ( parg -> have_value )		8150662	47					
ANR	8150982	Condition	parg -> have_value	319:24:10627:10642	8150662	0	True				
ANR	8150983	PtrMemberAccess	parg -> have_value		8150662	0					
ANR	8150984	Identifier	parg		8150662	0					
ANR	8150985	Identifier	have_value		8150662	1					
ANR	8150986	CompoundStatement		86:42:2510:2510	8150662	1					
ANR	8150987	Label	default :	320:20:10667:10674	8150662	0	True				
ANR	8150988	Identifier	default		8150662	0					
ANR	8150989	ExpressionStatement	pvalue -> v_n . r += ch / ( parg -> frac_scale *= 10 )	321:24:10715:10761	8150662	1	True				
ANR	8150990	AssignmentExpression	pvalue -> v_n . r += ch / ( parg -> frac_scale *= 10 )		8150662	0		+=			
ANR	8150991	MemberAccess	pvalue -> v_n . r		8150662	0					
ANR	8150992	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8150993	Identifier	pvalue		8150662	0					
ANR	8150994	Identifier	v_n		8150662	1					
ANR	8150995	Identifier	r		8150662	1					
ANR	8150996	MultiplicativeExpression	ch / ( parg -> frac_scale *= 10 )		8150662	1		/			
ANR	8150997	Identifier	ch		8150662	0					
ANR	8150998	AssignmentExpression	parg -> frac_scale *= 10		8150662	1		*=			
ANR	8150999	PtrMemberAccess	parg -> frac_scale		8150662	0					
ANR	8151000	Identifier	parg		8150662	0					
ANR	8151001	Identifier	frac_scale		8150662	1					
ANR	8151002	PrimaryExpression	10		8150662	1					
ANR	8151003	BreakStatement	break ;	322:24:10787:10792	8150662	2	True				
ANR	8151004	Label	case 0 :	323:20:10814:10820	8150662	3	True				
ANR	8151005	ExpressionStatement	parg -> have_value = 1	324:24:10846:10866	8150662	4	True				
ANR	8151006	AssignmentExpression	parg -> have_value = 1		8150662	0		=			
ANR	8151007	PtrMemberAccess	parg -> have_value		8150662	0					
ANR	8151008	Identifier	parg		8150662	0					
ANR	8151009	Identifier	have_value		8150662	1					
ANR	8151010	PrimaryExpression	1		8150662	1					
ANR	8151011	ExpressionStatement	pvalue -> v_n . i = ch	325:24:10892:10910	8150662	5	True				
ANR	8151012	AssignmentExpression	pvalue -> v_n . i = ch		8150662	0		=			
ANR	8151013	MemberAccess	pvalue -> v_n . i		8150662	0					
ANR	8151014	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8151015	Identifier	pvalue		8150662	0					
ANR	8151016	Identifier	v_n		8150662	1					
ANR	8151017	Identifier	i		8150662	1					
ANR	8151018	Identifier	ch		8150662	1					
ANR	8151019	BreakStatement	break ;	326:24:10936:10941	8150662	6	True				
ANR	8151020	Label	case 1 :	327:20:10963:10969	8150662	7	True				
ANR	8151021	IfStatement	if ( pvalue -> v_n . i >= max_i / 10 && ( pvalue -> v_n . i > max_i / 10 || ch > max_i % 10 ) )		8150662	8					
ANR	8151022	Condition	pvalue -> v_n . i >= max_i / 10 && ( pvalue -> v_n . i > max_i / 10 || ch > max_i % 10 )	328:28:10999:11104	8150662	0	True				
ANR	8151023	AndExpression	pvalue -> v_n . i >= max_i / 10 && ( pvalue -> v_n . i > max_i / 10 || ch > max_i % 10 )		8150662	0		&&			
ANR	8151024	RelationalExpression	pvalue -> v_n . i >= max_i / 10		8150662	0		>=			
ANR	8151025	MemberAccess	pvalue -> v_n . i		8150662	0					
ANR	8151026	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8151027	Identifier	pvalue		8150662	0					
ANR	8151028	Identifier	v_n		8150662	1					
ANR	8151029	Identifier	i		8150662	1					
ANR	8151030	MultiplicativeExpression	max_i / 10		8150662	1		/			
ANR	8151031	Identifier	max_i		8150662	0					
ANR	8151032	PrimaryExpression	10		8150662	1					
ANR	8151033	OrExpression	pvalue -> v_n . i > max_i / 10 || ch > max_i % 10		8150662	1		||			
ANR	8151034	RelationalExpression	pvalue -> v_n . i > max_i / 10		8150662	0		>			
ANR	8151035	MemberAccess	pvalue -> v_n . i		8150662	0					
ANR	8151036	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8151037	Identifier	pvalue		8150662	0					
ANR	8151038	Identifier	v_n		8150662	1					
ANR	8151039	Identifier	i		8150662	1					
ANR	8151040	MultiplicativeExpression	max_i / 10		8150662	1		/			
ANR	8151041	Identifier	max_i		8150662	0					
ANR	8151042	PrimaryExpression	10		8150662	1					
ANR	8151043	RelationalExpression	ch > max_i % 10		8150662	1		>			
ANR	8151044	Identifier	ch		8150662	0					
ANR	8151045	MultiplicativeExpression	max_i % 10		8150662	1		%			
ANR	8151046	Identifier	max_i		8150662	0					
ANR	8151047	PrimaryExpression	10		8150662	1					
ANR	8151048	ReturnStatement	return NULL ;	331:28:11164:11175	8150662	1	True				
ANR	8151049	Identifier	NULL		8150662	0					
ANR	8151050	ElseStatement	else		8150662	0					
ANR	8151051	ExpressionStatement	pvalue -> v_n . i = pvalue -> v_n . i * 10 + ch	333:28:11234:11273	8150662	0	True				
ANR	8151052	AssignmentExpression	pvalue -> v_n . i = pvalue -> v_n . i * 10 + ch		8150662	0		=			
ANR	8151053	MemberAccess	pvalue -> v_n . i		8150662	0					
ANR	8151054	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8151055	Identifier	pvalue		8150662	0					
ANR	8151056	Identifier	v_n		8150662	1					
ANR	8151057	Identifier	i		8150662	1					
ANR	8151058	AdditiveExpression	pvalue -> v_n . i * 10 + ch		8150662	1		+			
ANR	8151059	MultiplicativeExpression	pvalue -> v_n . i * 10		8150662	0		*			
ANR	8151060	MemberAccess	pvalue -> v_n . i		8150662	0					
ANR	8151061	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8151062	Identifier	pvalue		8150662	0					
ANR	8151063	Identifier	v_n		8150662	1					
ANR	8151064	Identifier	i		8150662	1					
ANR	8151065	PrimaryExpression	10		8150662	1					
ANR	8151066	Identifier	ch		8150662	1					
ANR	8151067	BreakStatement	break ;	335:16:11309:11314	8150662	48	True				
ANR	8151068	Label	default :	336:12:11328:11335	8150662	49	True				
ANR	8151069	Identifier	default		8150662	0					
ANR	8151070	ExpressionStatement	pst -> done = true	337:16:11353:11369	8150662	50	True				
ANR	8151071	AssignmentExpression	pst -> done = true		8150662	0		=			
ANR	8151072	PtrMemberAccess	pst -> done		8150662	0					
ANR	8151073	Identifier	pst		8150662	0					
ANR	8151074	Identifier	done		8150662	1					
ANR	8151075	Identifier	true		8150662	1					
ANR	8151076	ExpressionStatement	check_value ( )	338:16:11387:11400	8150662	51	True				
ANR	8151077	CallExpression	check_value ( )		8150662	0					
ANR	8151078	Callee	check_value		8150662	0					
ANR	8151079	Identifier	check_value		8150662	0					
ANR	8151080	ArgumentList			8150662	1					
ANR	8151081	GotoStatement	goto out ;	339:16:11418:11426	8150662	52	True				
ANR	8151082	Identifier	out		8150662	0					
ANR	8151083	ExpressionStatement	pst -> source . ptr = p	343:4:11507:11526	8150662	23	True				
ANR	8151084	AssignmentExpression	pst -> source . ptr = p		8150662	0		=			
ANR	8151085	MemberAccess	pst -> source . ptr		8150662	0					
ANR	8151086	PtrMemberAccess	pst -> source		8150662	0					
ANR	8151087	Identifier	pst		8150662	0					
ANR	8151088	Identifier	source		8150662	1					
ANR	8151089	Identifier	ptr		8150662	1					
ANR	8151090	Identifier	p		8150662	1					
ANR	8151091	ExpressionStatement	"longjmp ( * ( pst -> exit_to_parser ) , gs_error_NeedInput )"	344:4:11532:11583	8150662	24	True				
ANR	8151092	CallExpression	"longjmp ( * ( pst -> exit_to_parser ) , gs_error_NeedInput )"		8150662	0					
ANR	8151093	Callee	longjmp		8150662	0					
ANR	8151094	Identifier	longjmp		8150662	0					
ANR	8151095	ArgumentList	* ( pst -> exit_to_parser )		8150662	1					
ANR	8151096	Argument	* ( pst -> exit_to_parser )		8150662	0					
ANR	8151097	UnaryOperationExpression	* ( pst -> exit_to_parser )		8150662	0					
ANR	8151098	UnaryOperator	*		8150662	0					
ANR	8151099	PtrMemberAccess	pst -> exit_to_parser		8150662	1					
ANR	8151100	Identifier	pst		8150662	0					
ANR	8151101	Identifier	exit_to_parser		8150662	1					
ANR	8151102	Argument	gs_error_NeedInput		8150662	1					
ANR	8151103	Identifier	gs_error_NeedInput		8150662	0					
ANR	8151104	Label	out :	346:2:11608:11611	8150662	25	True				
ANR	8151105	Identifier	out		8150662	0					
ANR	8151106	ExpressionStatement	pst -> source . ptr = p	346:6:11612:11631	8150662	26	True				
ANR	8151107	AssignmentExpression	pst -> source . ptr = p		8150662	0		=			
ANR	8151108	MemberAccess	pst -> source . ptr		8150662	0					
ANR	8151109	PtrMemberAccess	pst -> source		8150662	0					
ANR	8151110	Identifier	pst		8150662	0					
ANR	8151111	Identifier	source		8150662	1					
ANR	8151112	Identifier	ptr		8150662	1					
ANR	8151113	Identifier	p		8150662	1					
ANR	8151114	SwitchStatement	switch ( parg -> have_value )		8150662	27					
ANR	8151115	Condition	parg -> have_value	347:12:11645:11660	8150662	0	True				
ANR	8151116	PtrMemberAccess	parg -> have_value		8150662	0					
ANR	8151117	Identifier	parg		8150662	0					
ANR	8151118	Identifier	have_value		8150662	1					
ANR	8151119	CompoundStatement		114:30:3528:3528	8150662	1					
ANR	8151120	Label	case 0 :	348:8:11673:11679	8150662	0	True				
ANR	8151121	ReturnStatement	return NULL ;	349:12:11726:11737	8150662	1	True				
ANR	8151122	Identifier	NULL		8150662	0					
ANR	8151123	Label	case 1 :	350:8:11747:11753	8150662	2	True				
ANR	8151124	ExpressionStatement	"if_debug1m ( 'i' , mem , ""  %ld"" , ( long ) pvalue -> v_n . i )"	351:12:11796:11846	8150662	3	True				
ANR	8151125	CallExpression	"if_debug1m ( 'i' , mem , ""  %ld"" , ( long ) pvalue -> v_n . i )"		8150662	0					
ANR	8151126	Callee	if_debug1m		8150662	0					
ANR	8151127	Identifier	if_debug1m		8150662	0					
ANR	8151128	ArgumentList	'i'		8150662	1					
ANR	8151129	Argument	'i'		8150662	0					
ANR	8151130	PrimaryExpression	'i'		8150662	0					
ANR	8151131	Argument	mem		8150662	1					
ANR	8151132	Identifier	mem		8150662	0					
ANR	8151133	Argument	"""  %ld"""		8150662	2					
ANR	8151134	PrimaryExpression	"""  %ld"""		8150662	0					
ANR	8151135	Argument	( long ) pvalue -> v_n . i		8150662	3					
ANR	8151136	CastExpression	( long ) pvalue -> v_n . i		8150662	0					
ANR	8151137	CastTarget	long		8150662	0					
ANR	8151138	MemberAccess	pvalue -> v_n . i		8150662	1					
ANR	8151139	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8151140	Identifier	pvalue		8150662	0					
ANR	8151141	Identifier	v_n		8150662	1					
ANR	8151142	Identifier	i		8150662	1					
ANR	8151143	ExpressionStatement	pvalue -> is_real = false	352:12:11860:11883	8150662	4	True				
ANR	8151144	AssignmentExpression	pvalue -> is_real = false		8150662	0		=			
ANR	8151145	PtrMemberAccess	pvalue -> is_real		8150662	0					
ANR	8151146	Identifier	pvalue		8150662	0					
ANR	8151147	Identifier	is_real		8150662	1					
ANR	8151148	Identifier	false		8150662	1					
ANR	8151149	BreakStatement	break ;	353:12:11897:11902	8150662	5	True				
ANR	8151150	Label	default :	354:8:11912:11933	8150662	6	True				
ANR	8151151	Identifier	default		8150662	0					
ANR	8151152	ExpressionStatement	"if_debug1m ( 'i' , mem , ""  %g"" , pvalue -> v_n . r )"	355:12:11958:12001	8150662	7	True				
ANR	8151153	CallExpression	"if_debug1m ( 'i' , mem , ""  %g"" , pvalue -> v_n . r )"		8150662	0					
ANR	8151154	Callee	if_debug1m		8150662	0					
ANR	8151155	Identifier	if_debug1m		8150662	0					
ANR	8151156	ArgumentList	'i'		8150662	1					
ANR	8151157	Argument	'i'		8150662	0					
ANR	8151158	PrimaryExpression	'i'		8150662	0					
ANR	8151159	Argument	mem		8150662	1					
ANR	8151160	Identifier	mem		8150662	0					
ANR	8151161	Argument	"""  %g"""		8150662	2					
ANR	8151162	PrimaryExpression	"""  %g"""		8150662	0					
ANR	8151163	Argument	pvalue -> v_n . r		8150662	3					
ANR	8151164	MemberAccess	pvalue -> v_n . r		8150662	0					
ANR	8151165	PtrMemberAccess	pvalue -> v_n		8150662	0					
ANR	8151166	Identifier	pvalue		8150662	0					
ANR	8151167	Identifier	v_n		8150662	1					
ANR	8151168	Identifier	r		8150662	1					
ANR	8151169	ExpressionStatement	pvalue -> is_real = true	356:12:12015:12037	8150662	8	True				
ANR	8151170	AssignmentExpression	pvalue -> is_real = true		8150662	0		=			
ANR	8151171	PtrMemberAccess	pvalue -> is_real		8150662	0					
ANR	8151172	Identifier	pvalue		8150662	0					
ANR	8151173	Identifier	is_real		8150662	1					
ANR	8151174	Identifier	true		8150662	1					
ANR	8151175	ExpressionStatement	hpgl_arg_init ( pst )	358:4:12049:12067	8150662	28	True				
ANR	8151176	CallExpression	hpgl_arg_init ( pst )		8150662	0					
ANR	8151177	Callee	hpgl_arg_init		8150662	0					
ANR	8151178	Identifier	hpgl_arg_init		8150662	0					
ANR	8151179	ArgumentList	pst		8150662	1					
ANR	8151180	Argument	pst		8150662	0					
ANR	8151181	Identifier	pst		8150662	0					
ANR	8151182	ExpressionStatement	parg -> next = ++ ( parg -> count )	359:4:12073:12101	8150662	29	True				
ANR	8151183	AssignmentExpression	parg -> next = ++ ( parg -> count )		8150662	0		=			
ANR	8151184	PtrMemberAccess	parg -> next		8150662	0					
ANR	8151185	Identifier	parg		8150662	0					
ANR	8151186	Identifier	next		8150662	1					
ANR	8151187	UnaryExpression	++ ( parg -> count )		8150662	1					
ANR	8151188	IncDec	++		8150662	0					
ANR	8151189	PtrMemberAccess	parg -> count		8150662	1					
ANR	8151190	Identifier	parg		8150662	0					
ANR	8151191	Identifier	count		8150662	1					
ANR	8151192	ReturnStatement	return pvalue ;	360:4:12107:12120	8150662	30	True				
ANR	8151193	Identifier	pvalue		8150662	0					
ANR	8151194	Statement	undef	361:1:12123:12127	8150662	31	True				
ANR	8151195	Statement	parg	361:7:12129:12132	8150662	32	True				
ANR	8151196	ReturnType	static const hpgl_value_t *		8150662	1					
ANR	8151197	Identifier	hpgl_arg		8150662	2					
ANR	8151198	ParameterList	"const gs_memory_t * mem , hpgl_parser_state_t * pst"		8150662	3					
ANR	8151199	Parameter	const gs_memory_t * mem	233:9:8082:8104	8150662	0	True				
ANR	8151200	ParameterType	const gs_memory_t *		8150662	0					
ANR	8151201	Identifier	mem		8150662	1					
ANR	8151202	Parameter	hpgl_parser_state_t * pst	233:34:8107:8131	8150662	1	True				
ANR	8151203	ParameterType	hpgl_parser_state_t *		8150662	0					
ANR	8151204	Identifier	pst		8150662	1					
ANR	8151205	CFGEntryNode	ENTRY		8150662		True				
ANR	8151206	CFGExitNode	EXIT		8150662		True				
ANR	8151207	Symbol	* ( pst -> exit_to_parser )		8150662						
ANR	8151208	Symbol	parg -> scanned		8150662						
ANR	8151209	Symbol	pvalue -> v_n . i		8150662						
ANR	8151210	Symbol	pvalue		8150662						
ANR	8151211	Symbol	pst -> source . limit		8150662						
ANR	8151212	Symbol	pst -> source		8150662						
ANR	8151213	Symbol	parg -> frac_scale		8150662						
ANR	8151214	Symbol	pst		8150662						
ANR	8151215	Symbol	parg		8150662						
ANR	8151216	Symbol	parg -> sign		8150662						
ANR	8151217	Symbol	mem		8150662						
ANR	8151218	Symbol	pst -> exit_to_parser		8150662						
ANR	8151219	Symbol	parg -> have_value		8150662						
ANR	8151220	Symbol	pvalue -> v_n . r		8150662						
ANR	8151221	Symbol	rlimit		8150662						
ANR	8151222	Symbol	max_i		8150662						
ANR	8151223	Symbol	NULL		8150662						
ANR	8151224	Symbol	ch		8150662						
ANR	8151225	Symbol	* * pst		8150662						
ANR	8151226	Symbol	pst -> done		8150662						
ANR	8151227	Symbol	false		8150662						
ANR	8151228	Symbol	pvalue -> is_real		8150662						
ANR	8151229	Symbol	p		8150662						
ANR	8151230	Symbol	* pvalue		8150662						
ANR	8151231	Symbol	parg -> count		8150662						
ANR	8151232	Symbol	pvalue -> v_n		8150662						
ANR	8151233	Symbol	parg -> next		8150662						
ANR	8151234	Symbol	pst -> source . ptr		8150662						
ANR	8151235	Symbol	true		8150662						
ANR	8151236	Symbol	* p		8150662						
ANR	8151237	Symbol	* pst		8150662						
ANR	8151238	Symbol	gs_error_NeedInput		8150662						
ANR	8151239	Symbol	* pst -> exit_to_parser		8150662						
ANR	8151240	Symbol	* parg		8150662						
ANR	8151241	Function	hpgl_arg_real	365:0:12164:12422							
ANR	8151242	FunctionDef	"hpgl_arg_real (const gs_memory_t * mem , hpgl_args_t * pargs , hpgl_real_t * pr)"		8151241	0					
ANR	8151243	CompoundStatement		367:0:12247:12422	8151241	0					
ANR	8151244	IdentifierDeclStatement	"const hpgl_value_t * pvalue = hpgl_arg ( mem , pargs ) ;"	368:4:12253:12302	8151241	0	True				
ANR	8151245	IdentifierDecl	"* pvalue = hpgl_arg ( mem , pargs )"		8151241	0					
ANR	8151246	IdentifierDeclType	const hpgl_value_t *		8151241	0					
ANR	8151247	Identifier	pvalue		8151241	1					
ANR	8151248	AssignmentExpression	"* pvalue = hpgl_arg ( mem , pargs )"		8151241	2		=			
ANR	8151249	Identifier	pvalue		8151241	0					
ANR	8151250	CallExpression	"hpgl_arg ( mem , pargs )"		8151241	1					
ANR	8151251	Callee	hpgl_arg		8151241	0					
ANR	8151252	Identifier	hpgl_arg		8151241	0					
ANR	8151253	ArgumentList	mem		8151241	1					
ANR	8151254	Argument	mem		8151241	0					
ANR	8151255	Identifier	mem		8151241	0					
ANR	8151256	Argument	pargs		8151241	1					
ANR	8151257	Identifier	pargs		8151241	0					
ANR	8151258	IfStatement	if ( ! pvalue )		8151241	1					
ANR	8151259	Condition	! pvalue	370:8:12313:12319	8151241	0	True				
ANR	8151260	UnaryOperationExpression	! pvalue		8151241	0					
ANR	8151261	UnaryOperator	!		8151241	0					
ANR	8151262	Identifier	pvalue		8151241	1					
ANR	8151263	ReturnStatement	return false ;	371:8:12330:12342	8151241	1	True				
ANR	8151264	Identifier	false		8151241	0					
ANR	8151265	ExpressionStatement	* pr = ( pvalue -> is_real ? pvalue -> v_n . r : pvalue -> v_n . i )	372:4:12348:12403	8151241	2	True				
ANR	8151266	AssignmentExpression	* pr = ( pvalue -> is_real ? pvalue -> v_n . r : pvalue -> v_n . i )		8151241	0		=			
ANR	8151267	UnaryOperationExpression	* pr		8151241	0					
ANR	8151268	UnaryOperator	*		8151241	0					
ANR	8151269	Identifier	pr		8151241	1					
ANR	8151270	ConditionalExpression	pvalue -> is_real ? pvalue -> v_n . r : pvalue -> v_n . i		8151241	1					
ANR	8151271	Condition	pvalue -> is_real		8151241	0					
ANR	8151272	PtrMemberAccess	pvalue -> is_real		8151241	0					
ANR	8151273	Identifier	pvalue		8151241	0					
ANR	8151274	Identifier	is_real		8151241	1					
ANR	8151275	MemberAccess	pvalue -> v_n . r		8151241	1					
ANR	8151276	PtrMemberAccess	pvalue -> v_n		8151241	0					
ANR	8151277	Identifier	pvalue		8151241	0					
ANR	8151278	Identifier	v_n		8151241	1					
ANR	8151279	Identifier	r		8151241	1					
ANR	8151280	MemberAccess	pvalue -> v_n . i		8151241	2					
ANR	8151281	PtrMemberAccess	pvalue -> v_n		8151241	0					
ANR	8151282	Identifier	pvalue		8151241	0					
ANR	8151283	Identifier	v_n		8151241	1					
ANR	8151284	Identifier	i		8151241	1					
ANR	8151285	ReturnStatement	return true ;	373:4:12409:12420	8151241	3	True				
ANR	8151286	Identifier	true		8151241	0					
ANR	8151287	ReturnType	bool		8151241	1					
ANR	8151288	Identifier	hpgl_arg_real		8151241	2					
ANR	8151289	ParameterList	"const gs_memory_t * mem , hpgl_args_t * pargs , hpgl_real_t * pr"		8151241	3					
ANR	8151290	Parameter	const gs_memory_t * mem	366:14:12183:12205	8151241	0	True				
ANR	8151291	ParameterType	const gs_memory_t *		8151241	0					
ANR	8151292	Identifier	mem		8151241	1					
ANR	8151293	Parameter	hpgl_args_t * pargs	366:39:12208:12226	8151241	1	True				
ANR	8151294	ParameterType	hpgl_args_t *		8151241	0					
ANR	8151295	Identifier	pargs		8151241	1					
ANR	8151296	Parameter	hpgl_real_t * pr	366:60:12229:12244	8151241	2	True				
ANR	8151297	ParameterType	hpgl_real_t *		8151241	0					
ANR	8151298	Identifier	pr		8151241	1					
ANR	8151299	CFGEntryNode	ENTRY		8151241		True				
ANR	8151300	CFGExitNode	EXIT		8151241		True				
ANR	8151301	Symbol	pr		8151241						
ANR	8151302	Symbol	pvalue -> v_n . i		8151241						
ANR	8151303	Symbol	false		8151241						
ANR	8151304	Symbol	pvalue		8151241						
ANR	8151305	Symbol	* pr		8151241						
ANR	8151306	Symbol	pvalue -> is_real		8151241						
ANR	8151307	Symbol	hpgl_arg		8151241						
ANR	8151308	Symbol	* pvalue		8151241						
ANR	8151309	Symbol	mem		8151241						
ANR	8151310	Symbol	pvalue -> v_n		8151241						
ANR	8151311	Symbol	pargs		8151241						
ANR	8151312	Symbol	true		8151241						
ANR	8151313	Symbol	pvalue -> v_n . r		8151241						
ANR	8151314	Function	hpgl_arg_c_real	377:0:12460:12811							
ANR	8151315	FunctionDef	"hpgl_arg_c_real (const gs_memory_t * mem , hpgl_args_t * pargs , hpgl_real_t * pr)"		8151314	0					
ANR	8151316	CompoundStatement		380:0:12561:12811	8151314	0					
ANR	8151317	IdentifierDeclStatement	"const hpgl_value_t * pvalue = hpgl_arg ( mem , pargs ) ;"	381:4:12567:12616	8151314	0	True				
ANR	8151318	IdentifierDecl	"* pvalue = hpgl_arg ( mem , pargs )"		8151314	0					
ANR	8151319	IdentifierDeclType	const hpgl_value_t *		8151314	0					
ANR	8151320	Identifier	pvalue		8151314	1					
ANR	8151321	AssignmentExpression	"* pvalue = hpgl_arg ( mem , pargs )"		8151314	2		=			
ANR	8151322	Identifier	pvalue		8151314	0					
ANR	8151323	CallExpression	"hpgl_arg ( mem , pargs )"		8151314	1					
ANR	8151324	Callee	hpgl_arg		8151314	0					
ANR	8151325	Identifier	hpgl_arg		8151314	0					
ANR	8151326	ArgumentList	mem		8151314	1					
ANR	8151327	Argument	mem		8151314	0					
ANR	8151328	Identifier	mem		8151314	0					
ANR	8151329	Argument	pargs		8151314	1					
ANR	8151330	Identifier	pargs		8151314	0					
ANR	8151331	IdentifierDeclStatement	hpgl_real_t r ;	382:4:12622:12635	8151314	1	True				
ANR	8151332	IdentifierDecl	r		8151314	0					
ANR	8151333	IdentifierDeclType	hpgl_real_t		8151314	0					
ANR	8151334	Identifier	r		8151314	1					
ANR	8151335	IfStatement	if ( ! pvalue )		8151314	2					
ANR	8151336	Condition	! pvalue	384:8:12646:12652	8151314	0	True				
ANR	8151337	UnaryOperationExpression	! pvalue		8151314	0					
ANR	8151338	UnaryOperator	!		8151314	0					
ANR	8151339	Identifier	pvalue		8151314	1					
ANR	8151340	ReturnStatement	return false ;	385:8:12663:12675	8151314	1	True				
ANR	8151341	Identifier	false		8151314	0					
ANR	8151342	ExpressionStatement	r = ( pvalue -> is_real ? pvalue -> v_n . r : pvalue -> v_n . i )	386:4:12681:12734	8151314	3	True				
ANR	8151343	AssignmentExpression	r = ( pvalue -> is_real ? pvalue -> v_n . r : pvalue -> v_n . i )		8151314	0		=			
ANR	8151344	Identifier	r		8151314	0					
ANR	8151345	ConditionalExpression	pvalue -> is_real ? pvalue -> v_n . r : pvalue -> v_n . i		8151314	1					
ANR	8151346	Condition	pvalue -> is_real		8151314	0					
ANR	8151347	PtrMemberAccess	pvalue -> is_real		8151314	0					
ANR	8151348	Identifier	pvalue		8151314	0					
ANR	8151349	Identifier	is_real		8151314	1					
ANR	8151350	MemberAccess	pvalue -> v_n . r		8151314	1					
ANR	8151351	PtrMemberAccess	pvalue -> v_n		8151314	0					
ANR	8151352	Identifier	pvalue		8151314	0					
ANR	8151353	Identifier	v_n		8151314	1					
ANR	8151354	Identifier	r		8151314	1					
ANR	8151355	MemberAccess	pvalue -> v_n . i		8151314	2					
ANR	8151356	PtrMemberAccess	pvalue -> v_n		8151314	0					
ANR	8151357	Identifier	pvalue		8151314	0					
ANR	8151358	Identifier	v_n		8151314	1					
ANR	8151359	Identifier	i		8151314	1					
ANR	8151360	ExpressionStatement	* pr = ( r < - 32768 ? - 32768 : r > 32767 ? 32767 : r )	387:4:12740:12791	8151314	4	True				
ANR	8151361	AssignmentExpression	* pr = ( r < - 32768 ? - 32768 : r > 32767 ? 32767 : r )		8151314	0		=			
ANR	8151362	UnaryOperationExpression	* pr		8151314	0					
ANR	8151363	UnaryOperator	*		8151314	0					
ANR	8151364	Identifier	pr		8151314	1					
ANR	8151365	ConditionalExpression	r < - 32768 ? - 32768 : r > 32767 ? 32767 : r		8151314	1					
ANR	8151366	Condition	r < - 32768		8151314	0					
ANR	8151367	RelationalExpression	r < - 32768		8151314	0		<			
ANR	8151368	Identifier	r		8151314	0					
ANR	8151369	UnaryOperationExpression	- 32768		8151314	1					
ANR	8151370	UnaryOperator	-		8151314	0					
ANR	8151371	PrimaryExpression	32768		8151314	1					
ANR	8151372	UnaryOperationExpression	- 32768		8151314	1					
ANR	8151373	UnaryOperator	-		8151314	0					
ANR	8151374	PrimaryExpression	32768		8151314	1					
ANR	8151375	ConditionalExpression	r > 32767 ? 32767 : r		8151314	2					
ANR	8151376	Condition	r > 32767		8151314	0					
ANR	8151377	RelationalExpression	r > 32767		8151314	0		>			
ANR	8151378	Identifier	r		8151314	0					
ANR	8151379	PrimaryExpression	32767		8151314	1					
ANR	8151380	PrimaryExpression	32767		8151314	1					
ANR	8151381	Identifier	r		8151314	2					
ANR	8151382	ReturnStatement	return true ;	388:4:12797:12808	8151314	5	True				
ANR	8151383	Identifier	true		8151314	0					
ANR	8151384	ReturnType	bool		8151314	1					
ANR	8151385	Identifier	hpgl_arg_c_real		8151314	2					
ANR	8151386	ParameterList	"const gs_memory_t * mem , hpgl_args_t * pargs , hpgl_real_t * pr"		8151314	3					
ANR	8151387	Parameter	const gs_memory_t * mem	378:16:12481:12503	8151314	0	True				
ANR	8151388	ParameterType	const gs_memory_t *		8151314	0					
ANR	8151389	Identifier	mem		8151314	1					
ANR	8151390	Parameter	hpgl_args_t * pargs	379:16:12522:12540	8151314	1	True				
ANR	8151391	ParameterType	hpgl_args_t *		8151314	0					
ANR	8151392	Identifier	pargs		8151314	1					
ANR	8151393	Parameter	hpgl_real_t * pr	379:37:12543:12558	8151314	2	True				
ANR	8151394	ParameterType	hpgl_real_t *		8151314	0					
ANR	8151395	Identifier	pr		8151314	1					
ANR	8151396	CFGEntryNode	ENTRY		8151314		True				
ANR	8151397	CFGExitNode	EXIT		8151314		True				
ANR	8151398	Symbol	pr		8151314						
ANR	8151399	Symbol	pvalue -> v_n . i		8151314						
ANR	8151400	Symbol	false		8151314						
ANR	8151401	Symbol	pvalue		8151314						
ANR	8151402	Symbol	* pr		8151314						
ANR	8151403	Symbol	pvalue -> is_real		8151314						
ANR	8151404	Symbol	hpgl_arg		8151314						
ANR	8151405	Symbol	r		8151314						
ANR	8151406	Symbol	* pvalue		8151314						
ANR	8151407	Symbol	mem		8151314						
ANR	8151408	Symbol	pvalue -> v_n		8151314						
ANR	8151409	Symbol	pargs		8151314						
ANR	8151410	Symbol	true		8151314						
ANR	8151411	Symbol	pvalue -> v_n . r		8151314						
ANR	8151412	Function	hpgl_arg_int	393:0:12845:13104							
ANR	8151413	FunctionDef	"hpgl_arg_int (const gs_memory_t * mem , hpgl_args_t * pargs , int32 * pi)"		8151412	0					
ANR	8151414	CompoundStatement		395:0:12921:13104	8151412	0					
ANR	8151415	IdentifierDeclStatement	"const hpgl_value_t * pvalue = hpgl_arg ( mem , pargs ) ;"	396:4:12927:12976	8151412	0	True				
ANR	8151416	IdentifierDecl	"* pvalue = hpgl_arg ( mem , pargs )"		8151412	0					
ANR	8151417	IdentifierDeclType	const hpgl_value_t *		8151412	0					
ANR	8151418	Identifier	pvalue		8151412	1					
ANR	8151419	AssignmentExpression	"* pvalue = hpgl_arg ( mem , pargs )"		8151412	2		=			
ANR	8151420	Identifier	pvalue		8151412	0					
ANR	8151421	CallExpression	"hpgl_arg ( mem , pargs )"		8151412	1					
ANR	8151422	Callee	hpgl_arg		8151412	0					
ANR	8151423	Identifier	hpgl_arg		8151412	0					
ANR	8151424	ArgumentList	mem		8151412	1					
ANR	8151425	Argument	mem		8151412	0					
ANR	8151426	Identifier	mem		8151412	0					
ANR	8151427	Argument	pargs		8151412	1					
ANR	8151428	Identifier	pargs		8151412	0					
ANR	8151429	IfStatement	if ( ! pvalue )		8151412	1					
ANR	8151430	Condition	! pvalue	398:8:12987:12993	8151412	0	True				
ANR	8151431	UnaryOperationExpression	! pvalue		8151412	0					
ANR	8151432	UnaryOperator	!		8151412	0					
ANR	8151433	Identifier	pvalue		8151412	1					
ANR	8151434	ReturnStatement	return false ;	399:8:13004:13016	8151412	1	True				
ANR	8151435	Identifier	false		8151412	0					
ANR	8151436	ExpressionStatement	* pi = ( pvalue -> is_real ? ( int32 ) pvalue -> v_n . r : pvalue -> v_n . i )	400:4:13022:13085	8151412	2	True				
ANR	8151437	AssignmentExpression	* pi = ( pvalue -> is_real ? ( int32 ) pvalue -> v_n . r : pvalue -> v_n . i )		8151412	0		=			
ANR	8151438	UnaryOperationExpression	* pi		8151412	0					
ANR	8151439	UnaryOperator	*		8151412	0					
ANR	8151440	Identifier	pi		8151412	1					
ANR	8151441	ConditionalExpression	pvalue -> is_real ? ( int32 ) pvalue -> v_n . r : pvalue -> v_n . i		8151412	1					
ANR	8151442	Condition	pvalue -> is_real		8151412	0					
ANR	8151443	PtrMemberAccess	pvalue -> is_real		8151412	0					
ANR	8151444	Identifier	pvalue		8151412	0					
ANR	8151445	Identifier	is_real		8151412	1					
ANR	8151446	CastExpression	( int32 ) pvalue -> v_n . r		8151412	1					
ANR	8151447	CastTarget	int32		8151412	0					
ANR	8151448	MemberAccess	pvalue -> v_n . r		8151412	1					
ANR	8151449	PtrMemberAccess	pvalue -> v_n		8151412	0					
ANR	8151450	Identifier	pvalue		8151412	0					
ANR	8151451	Identifier	v_n		8151412	1					
ANR	8151452	Identifier	r		8151412	1					
ANR	8151453	MemberAccess	pvalue -> v_n . i		8151412	2					
ANR	8151454	PtrMemberAccess	pvalue -> v_n		8151412	0					
ANR	8151455	Identifier	pvalue		8151412	0					
ANR	8151456	Identifier	v_n		8151412	1					
ANR	8151457	Identifier	i		8151412	1					
ANR	8151458	ReturnStatement	return true ;	401:4:13091:13102	8151412	3	True				
ANR	8151459	Identifier	true		8151412	0					
ANR	8151460	ReturnType	bool		8151412	1					
ANR	8151461	Identifier	hpgl_arg_int		8151412	2					
ANR	8151462	ParameterList	"const gs_memory_t * mem , hpgl_args_t * pargs , int32 * pi"		8151412	3					
ANR	8151463	Parameter	const gs_memory_t * mem	394:13:12863:12885	8151412	0	True				
ANR	8151464	ParameterType	const gs_memory_t *		8151412	0					
ANR	8151465	Identifier	mem		8151412	1					
ANR	8151466	Parameter	hpgl_args_t * pargs	394:38:12888:12906	8151412	1	True				
ANR	8151467	ParameterType	hpgl_args_t *		8151412	0					
ANR	8151468	Identifier	pargs		8151412	1					
ANR	8151469	Parameter	int32 * pi	394:59:12909:12918	8151412	2	True				
ANR	8151470	ParameterType	int32 *		8151412	0					
ANR	8151471	Identifier	pi		8151412	1					
ANR	8151472	CFGEntryNode	ENTRY		8151412		True				
ANR	8151473	CFGExitNode	EXIT		8151412		True				
ANR	8151474	Symbol	pvalue -> v_n . i		8151412						
ANR	8151475	Symbol	false		8151412						
ANR	8151476	Symbol	pvalue		8151412						
ANR	8151477	Symbol	pvalue -> is_real		8151412						
ANR	8151478	Symbol	hpgl_arg		8151412						
ANR	8151479	Symbol	* pvalue		8151412						
ANR	8151480	Symbol	mem		8151412						
ANR	8151481	Symbol	pvalue -> v_n		8151412						
ANR	8151482	Symbol	pargs		8151412						
ANR	8151483	Symbol	true		8151412						
ANR	8151484	Symbol	pi		8151412						
ANR	8151485	Symbol	* pi		8151412						
ANR	8151486	Symbol	pvalue -> v_n . r		8151412						
ANR	8151487	Function	hpgl_arg_c_int	405:0:13145:13471							
ANR	8151488	FunctionDef	"hpgl_arg_c_int (const gs_memory_t * mem , hpgl_args_t * pargs , int * pi)"		8151487	0					
ANR	8151489	CompoundStatement		407:0:13220:13471	8151487	0					
ANR	8151490	IdentifierDeclStatement	"const hpgl_value_t * pvalue = hpgl_arg ( mem , pargs ) ;"	408:4:13226:13275	8151487	0	True				
ANR	8151491	IdentifierDecl	"* pvalue = hpgl_arg ( mem , pargs )"		8151487	0					
ANR	8151492	IdentifierDeclType	const hpgl_value_t *		8151487	0					
ANR	8151493	Identifier	pvalue		8151487	1					
ANR	8151494	AssignmentExpression	"* pvalue = hpgl_arg ( mem , pargs )"		8151487	2		=			
ANR	8151495	Identifier	pvalue		8151487	0					
ANR	8151496	CallExpression	"hpgl_arg ( mem , pargs )"		8151487	1					
ANR	8151497	Callee	hpgl_arg		8151487	0					
ANR	8151498	Identifier	hpgl_arg		8151487	0					
ANR	8151499	ArgumentList	mem		8151487	1					
ANR	8151500	Argument	mem		8151487	0					
ANR	8151501	Identifier	mem		8151487	0					
ANR	8151502	Argument	pargs		8151487	1					
ANR	8151503	Identifier	pargs		8151487	0					
ANR	8151504	IdentifierDeclStatement	int32 i ;	409:4:13281:13288	8151487	1	True				
ANR	8151505	IdentifierDecl	i		8151487	0					
ANR	8151506	IdentifierDeclType	int32		8151487	0					
ANR	8151507	Identifier	i		8151487	1					
ANR	8151508	IfStatement	if ( ! pvalue )		8151487	2					
ANR	8151509	Condition	! pvalue	411:8:13299:13305	8151487	0	True				
ANR	8151510	UnaryOperationExpression	! pvalue		8151487	0					
ANR	8151511	UnaryOperator	!		8151487	0					
ANR	8151512	Identifier	pvalue		8151487	1					
ANR	8151513	ReturnStatement	return false ;	412:8:13316:13328	8151487	1	True				
ANR	8151514	Identifier	false		8151487	0					
ANR	8151515	ExpressionStatement	i = ( pvalue -> is_real ? ( int32 ) pvalue -> v_n . r : pvalue -> v_n . i )	413:4:13334:13395	8151487	3	True				
ANR	8151516	AssignmentExpression	i = ( pvalue -> is_real ? ( int32 ) pvalue -> v_n . r : pvalue -> v_n . i )		8151487	0		=			
ANR	8151517	Identifier	i		8151487	0					
ANR	8151518	ConditionalExpression	pvalue -> is_real ? ( int32 ) pvalue -> v_n . r : pvalue -> v_n . i		8151487	1					
ANR	8151519	Condition	pvalue -> is_real		8151487	0					
ANR	8151520	PtrMemberAccess	pvalue -> is_real		8151487	0					
ANR	8151521	Identifier	pvalue		8151487	0					
ANR	8151522	Identifier	is_real		8151487	1					
ANR	8151523	CastExpression	( int32 ) pvalue -> v_n . r		8151487	1					
ANR	8151524	CastTarget	int32		8151487	0					
ANR	8151525	MemberAccess	pvalue -> v_n . r		8151487	1					
ANR	8151526	PtrMemberAccess	pvalue -> v_n		8151487	0					
ANR	8151527	Identifier	pvalue		8151487	0					
ANR	8151528	Identifier	v_n		8151487	1					
ANR	8151529	Identifier	r		8151487	1					
ANR	8151530	MemberAccess	pvalue -> v_n . i		8151487	2					
ANR	8151531	PtrMemberAccess	pvalue -> v_n		8151487	0					
ANR	8151532	Identifier	pvalue		8151487	0					
ANR	8151533	Identifier	v_n		8151487	1					
ANR	8151534	Identifier	i		8151487	1					
ANR	8151535	ExpressionStatement	* pi = ( i < - 32768 ? - 32768 : i > 32767 ? 32767 : i )	414:4:13401:13452	8151487	4	True				
ANR	8151536	AssignmentExpression	* pi = ( i < - 32768 ? - 32768 : i > 32767 ? 32767 : i )		8151487	0		=			
ANR	8151537	UnaryOperationExpression	* pi		8151487	0					
ANR	8151538	UnaryOperator	*		8151487	0					
ANR	8151539	Identifier	pi		8151487	1					
ANR	8151540	ConditionalExpression	i < - 32768 ? - 32768 : i > 32767 ? 32767 : i		8151487	1					
ANR	8151541	Condition	i < - 32768		8151487	0					
ANR	8151542	RelationalExpression	i < - 32768		8151487	0		<			
ANR	8151543	Identifier	i		8151487	0					
ANR	8151544	UnaryOperationExpression	- 32768		8151487	1					
ANR	8151545	UnaryOperator	-		8151487	0					
ANR	8151546	PrimaryExpression	32768		8151487	1					
ANR	8151547	UnaryOperationExpression	- 32768		8151487	1					
ANR	8151548	UnaryOperator	-		8151487	0					
ANR	8151549	PrimaryExpression	32768		8151487	1					
ANR	8151550	ConditionalExpression	i > 32767 ? 32767 : i		8151487	2					
ANR	8151551	Condition	i > 32767		8151487	0					
ANR	8151552	RelationalExpression	i > 32767		8151487	0		>			
ANR	8151553	Identifier	i		8151487	0					
ANR	8151554	PrimaryExpression	32767		8151487	1					
ANR	8151555	PrimaryExpression	32767		8151487	1					
ANR	8151556	Identifier	i		8151487	2					
ANR	8151557	ReturnStatement	return true ;	415:4:13458:13469	8151487	5	True				
ANR	8151558	Identifier	true		8151487	0					
ANR	8151559	ReturnType	bool		8151487	1					
ANR	8151560	Identifier	hpgl_arg_c_int		8151487	2					
ANR	8151561	ParameterList	"const gs_memory_t * mem , hpgl_args_t * pargs , int * pi"		8151487	3					
ANR	8151562	Parameter	const gs_memory_t * mem	406:15:13165:13187	8151487	0	True				
ANR	8151563	ParameterType	const gs_memory_t *		8151487	0					
ANR	8151564	Identifier	mem		8151487	1					
ANR	8151565	Parameter	hpgl_args_t * pargs	406:40:13190:13208	8151487	1	True				
ANR	8151566	ParameterType	hpgl_args_t *		8151487	0					
ANR	8151567	Identifier	pargs		8151487	1					
ANR	8151568	Parameter	int * pi	406:61:13211:13217	8151487	2	True				
ANR	8151569	ParameterType	int *		8151487	0					
ANR	8151570	Identifier	pi		8151487	1					
ANR	8151571	CFGEntryNode	ENTRY		8151487		True				
ANR	8151572	CFGExitNode	EXIT		8151487		True				
ANR	8151573	Symbol	pvalue -> v_n . i		8151487						
ANR	8151574	Symbol	false		8151487						
ANR	8151575	Symbol	i		8151487						
ANR	8151576	Symbol	pvalue		8151487						
ANR	8151577	Symbol	pvalue -> is_real		8151487						
ANR	8151578	Symbol	hpgl_arg		8151487						
ANR	8151579	Symbol	* pvalue		8151487						
ANR	8151580	Symbol	mem		8151487						
ANR	8151581	Symbol	pvalue -> v_n		8151487						
ANR	8151582	Symbol	pargs		8151487						
ANR	8151583	Symbol	true		8151487						
ANR	8151584	Symbol	pi		8151487						
ANR	8151585	Symbol	* pi		8151487						
ANR	8151586	Symbol	pvalue -> v_n . r		8151487						
ANR	8151587	Function	hpgl_arg_units	419:0:13512:13677							
ANR	8151588	FunctionDef	"hpgl_arg_units (const gs_memory_t * mem , hpgl_args_t * pargs , hpgl_real_t * pu)"		8151587	0					
ANR	8151589	CompoundStatement		421:0:13596:13677	8151587	0					
ANR	8151590	ReturnStatement	"return hpgl_arg_real ( mem , pargs , pu ) ;"	422:4:13639:13675	8151587	0	True				
ANR	8151591	CallExpression	"hpgl_arg_real ( mem , pargs , pu )"		8151587	0					
ANR	8151592	Callee	hpgl_arg_real		8151587	0					
ANR	8151593	Identifier	hpgl_arg_real		8151587	0					
ANR	8151594	ArgumentList	mem		8151587	1					
ANR	8151595	Argument	mem		8151587	0					
ANR	8151596	Identifier	mem		8151587	0					
ANR	8151597	Argument	pargs		8151587	1					
ANR	8151598	Identifier	pargs		8151587	0					
ANR	8151599	Argument	pu		8151587	2					
ANR	8151600	Identifier	pu		8151587	0					
ANR	8151601	ReturnType	bool		8151587	1					
ANR	8151602	Identifier	hpgl_arg_units		8151587	2					
ANR	8151603	ParameterList	"const gs_memory_t * mem , hpgl_args_t * pargs , hpgl_real_t * pu"		8151587	3					
ANR	8151604	Parameter	const gs_memory_t * mem	420:15:13532:13554	8151587	0	True				
ANR	8151605	ParameterType	const gs_memory_t *		8151587	0					
ANR	8151606	Identifier	mem		8151587	1					
ANR	8151607	Parameter	hpgl_args_t * pargs	420:40:13557:13575	8151587	1	True				
ANR	8151608	ParameterType	hpgl_args_t *		8151587	0					
ANR	8151609	Identifier	pargs		8151587	1					
ANR	8151610	Parameter	hpgl_real_t * pu	420:61:13578:13593	8151587	2	True				
ANR	8151611	ParameterType	hpgl_real_t *		8151587	0					
ANR	8151612	Identifier	pu		8151587	1					
ANR	8151613	CFGEntryNode	ENTRY		8151587		True				
ANR	8151614	CFGExitNode	EXIT		8151587		True				
ANR	8151615	Symbol	mem		8151587						
ANR	8151616	Symbol	pargs		8151587						
ANR	8151617	Symbol	pu		8151587						
ANR	8151618	Symbol	hpgl_arg_real		8151587						
ANR	8151619	Function	hpgl_init_command_index	426:0:13722:14551							
ANR	8151620	FunctionDef	"hpgl_init_command_index (hpgl_parser_state_t * * pgl_parser_state , gs_memory_t * mem)"		8151619	0					
ANR	8151621	CompoundStatement		429:0:13834:14551	8151619	0					
ANR	8151622	IdentifierDeclStatement	"hpgl_parser_state_t * pgst = ( hpgl_parser_state_t * ) gs_alloc_bytes ( mem , sizeof ( hpgl_parser_state_t ) , ""hpgl_init_command_index"" ) ;"	430:4:13840:14069	8151619	0	True				
ANR	8151623	IdentifierDecl	"* pgst = ( hpgl_parser_state_t * ) gs_alloc_bytes ( mem , sizeof ( hpgl_parser_state_t ) , ""hpgl_init_command_index"" )"		8151619	0					
ANR	8151624	IdentifierDeclType	hpgl_parser_state_t *		8151619	0					
ANR	8151625	Identifier	pgst		8151619	1					
ANR	8151626	AssignmentExpression	"* pgst = ( hpgl_parser_state_t * ) gs_alloc_bytes ( mem , sizeof ( hpgl_parser_state_t ) , ""hpgl_init_command_index"" )"		8151619	2		=			
ANR	8151627	Identifier	pgst		8151619	0					
ANR	8151628	CastExpression	"( hpgl_parser_state_t * ) gs_alloc_bytes ( mem , sizeof ( hpgl_parser_state_t ) , ""hpgl_init_command_index"" )"		8151619	1					
ANR	8151629	CastTarget	hpgl_parser_state_t *		8151619	0					
ANR	8151630	CallExpression	"gs_alloc_bytes ( mem , sizeof ( hpgl_parser_state_t ) , ""hpgl_init_command_index"" )"		8151619	1					
ANR	8151631	Callee	gs_alloc_bytes		8151619	0					
ANR	8151632	Identifier	gs_alloc_bytes		8151619	0					
ANR	8151633	ArgumentList	mem		8151619	1					
ANR	8151634	Argument	mem		8151619	0					
ANR	8151635	Identifier	mem		8151619	0					
ANR	8151636	Argument	sizeof ( hpgl_parser_state_t )		8151619	1					
ANR	8151637	SizeofExpression	sizeof ( hpgl_parser_state_t )		8151619	0					
ANR	8151638	Sizeof	sizeof		8151619	0					
ANR	8151639	SizeofOperand	hpgl_parser_state_t		8151619	1					
ANR	8151640	Argument	"""hpgl_init_command_index"""		8151619	2					
ANR	8151641	PrimaryExpression	"""hpgl_init_command_index"""		8151619	0					
ANR	8151642	IfStatement	if ( pgst == 0 )		8151619	1					
ANR	8151643	Condition	pgst == 0	436:8:14096:14104	8151619	0	True				
ANR	8151644	EqualityExpression	pgst == 0		8151619	0		==			
ANR	8151645	Identifier	pgst		8151619	0					
ANR	8151646	PrimaryExpression	0		8151619	1					
ANR	8151647	CompoundStatement		8:19:272:272	8151619	1					
ANR	8151648	ExpressionStatement	* pgl_parser_state = NULL	437:8:14117:14141	8151619	0	True				
ANR	8151649	AssignmentExpression	* pgl_parser_state = NULL		8151619	0		=			
ANR	8151650	UnaryOperationExpression	* pgl_parser_state		8151619	0					
ANR	8151651	UnaryOperator	*		8151619	0					
ANR	8151652	Identifier	pgl_parser_state		8151619	1					
ANR	8151653	Identifier	NULL		8151619	1					
ANR	8151654	ReturnStatement	return - 1 ;	438:8:14151:14160	8151619	1	True				
ANR	8151655	UnaryOperationExpression	- 1		8151619	0					
ANR	8151656	UnaryOperator	-		8151619	0					
ANR	8151657	PrimaryExpression	1		8151619	1					
ANR	8151658	ExpressionStatement	pgst -> exit_to_parser = NULL	441:4:14173:14200	8151619	2	True				
ANR	8151659	AssignmentExpression	pgst -> exit_to_parser = NULL		8151619	0		=			
ANR	8151660	PtrMemberAccess	pgst -> exit_to_parser		8151619	0					
ANR	8151661	Identifier	pgst		8151619	0					
ANR	8151662	Identifier	exit_to_parser		8151619	1					
ANR	8151663	Identifier	NULL		8151619	1					
ANR	8151664	ExpressionStatement	pgst -> hpgl_command_next_index = 0	442:4:14206:14239	8151619	3	True				
ANR	8151665	AssignmentExpression	pgst -> hpgl_command_next_index = 0		8151619	0		=			
ANR	8151666	PtrMemberAccess	pgst -> hpgl_command_next_index		8151619	0					
ANR	8151667	Identifier	pgst		8151619	0					
ANR	8151668	Identifier	hpgl_command_next_index		8151619	1					
ANR	8151669	PrimaryExpression	0		8151619	1					
ANR	8151670	ExpressionStatement	"memset ( pgst -> hpgl_command_indices , 0 , sizeof ( pgst -> hpgl_command_indices ) )"	446:4:14403:14476	8151619	4	True				
ANR	8151671	CallExpression	"memset ( pgst -> hpgl_command_indices , 0 , sizeof ( pgst -> hpgl_command_indices ) )"		8151619	0					
ANR	8151672	Callee	memset		8151619	0					
ANR	8151673	Identifier	memset		8151619	0					
ANR	8151674	ArgumentList	pgst -> hpgl_command_indices		8151619	1					
ANR	8151675	Argument	pgst -> hpgl_command_indices		8151619	0					
ANR	8151676	PtrMemberAccess	pgst -> hpgl_command_indices		8151619	0					
ANR	8151677	Identifier	pgst		8151619	0					
ANR	8151678	Identifier	hpgl_command_indices		8151619	1					
ANR	8151679	Argument	0		8151619	1					
ANR	8151680	PrimaryExpression	0		8151619	0					
ANR	8151681	Argument	sizeof ( pgst -> hpgl_command_indices )		8151619	2					
ANR	8151682	SizeofExpression	sizeof ( pgst -> hpgl_command_indices )		8151619	0					
ANR	8151683	Sizeof	sizeof		8151619	0					
ANR	8151684	PtrMemberAccess	pgst -> hpgl_command_indices		8151619	1					
ANR	8151685	Identifier	pgst		8151619	0					
ANR	8151686	Identifier	hpgl_command_indices		8151619	1					
ANR	8151687	ExpressionStatement	hpgl_process_init ( pgst )	447:4:14482:14505	8151619	5	True				
ANR	8151688	CallExpression	hpgl_process_init ( pgst )		8151619	0					
ANR	8151689	Callee	hpgl_process_init		8151619	0					
ANR	8151690	Identifier	hpgl_process_init		8151619	0					
ANR	8151691	ArgumentList	pgst		8151619	1					
ANR	8151692	Argument	pgst		8151619	0					
ANR	8151693	Identifier	pgst		8151619	0					
ANR	8151694	ExpressionStatement	* pgl_parser_state = pgst	448:4:14511:14535	8151619	6	True				
ANR	8151695	AssignmentExpression	* pgl_parser_state = pgst		8151619	0		=			
ANR	8151696	UnaryOperationExpression	* pgl_parser_state		8151619	0					
ANR	8151697	UnaryOperator	*		8151619	0					
ANR	8151698	Identifier	pgl_parser_state		8151619	1					
ANR	8151699	Identifier	pgst		8151619	1					
ANR	8151700	ReturnStatement	return 0 ;	449:4:14541:14549	8151619	7	True				
ANR	8151701	PrimaryExpression	0		8151619	0					
ANR	8151702	ReturnType	int		8151619	1					
ANR	8151703	Identifier	hpgl_init_command_index		8151619	2					
ANR	8151704	ParameterList	"hpgl_parser_state_t * * pgl_parser_state , gs_memory_t * mem"		8151619	3					
ANR	8151705	Parameter	hpgl_parser_state_t * * pgl_parser_state	427:24:13750:13788	8151619	0	True				
ANR	8151706	ParameterType	hpgl_parser_state_t * *		8151619	0					
ANR	8151707	Identifier	pgl_parser_state		8151619	1					
ANR	8151708	Parameter	gs_memory_t * mem	428:24:13815:13831	8151619	1	True				
ANR	8151709	ParameterType	gs_memory_t *		8151619	0					
ANR	8151710	Identifier	mem		8151619	1					
ANR	8151711	CFGEntryNode	ENTRY		8151619		True				
ANR	8151712	CFGExitNode	EXIT		8151619		True				
ANR	8151713	Symbol	gs_alloc_bytes		8151619						
ANR	8151714	Symbol	NULL		8151619						
ANR	8151715	Symbol	pgl_parser_state		8151619						
ANR	8151716	Symbol	mem		8151619						
ANR	8151717	Symbol	pgst -> hpgl_command_next_index		8151619						
ANR	8151718	Symbol	pgst -> hpgl_command_indices		8151619						
ANR	8151719	Symbol	* pgl_parser_state		8151619						
ANR	8151720	Symbol	pgst		8151619						
ANR	8151721	Symbol	* pgst		8151619						
ANR	8151722	Symbol	pgst -> exit_to_parser		8151619						
