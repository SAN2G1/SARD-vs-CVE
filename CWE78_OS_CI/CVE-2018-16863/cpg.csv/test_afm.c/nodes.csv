command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	9656480	File	data/converged/CVE-2018-16863_ghostpdl/test_afm.c								
ANR	9656481	Function	dump_fontinfo	6:1:147:1969							
ANR	9656482	FunctionDef	dump_fontinfo (AFM_FontInfo fi)		9656481	0					
ANR	9656483	CompoundStatement		11:2:281:1969	9656481	0					
ANR	9656484	IdentifierDeclStatement	FT_UInt i ;	12:4:287:297	9656481	0	True				
ANR	9656485	IdentifierDecl	i		9656481	0					
ANR	9656486	IdentifierDeclType	FT_UInt		9656481	0					
ANR	9656487	Identifier	i		9656481	1					
ANR	9656488	ExpressionStatement	"printf ( ""This AFM is for %sCID font.\\n\\n"" , ( fi -> IsCIDFont ) ? """" : ""non-"" )"	15:4:305:393	9656481	1	True				
ANR	9656489	CallExpression	"printf ( ""This AFM is for %sCID font.\\n\\n"" , ( fi -> IsCIDFont ) ? """" : ""non-"" )"		9656481	0					
ANR	9656490	Callee	printf		9656481	0					
ANR	9656491	Identifier	printf		9656481	0					
ANR	9656492	ArgumentList	"""This AFM is for %sCID font.\\n\\n"""		9656481	1					
ANR	9656493	Argument	"""This AFM is for %sCID font.\\n\\n"""		9656481	0					
ANR	9656494	PrimaryExpression	"""This AFM is for %sCID font.\\n\\n"""		9656481	0					
ANR	9656495	Argument	"( fi -> IsCIDFont ) ? """" : ""non-"""		9656481	1					
ANR	9656496	ConditionalExpression	"( fi -> IsCIDFont ) ? """" : ""non-"""		9656481	0					
ANR	9656497	Condition	fi -> IsCIDFont		9656481	0					
ANR	9656498	PtrMemberAccess	fi -> IsCIDFont		9656481	0					
ANR	9656499	Identifier	fi		9656481	0					
ANR	9656500	Identifier	IsCIDFont		9656481	1					
ANR	9656501	PrimaryExpression	""""""		9656481	1					
ANR	9656502	PrimaryExpression	"""non-"""		9656481	2					
ANR	9656503	ExpressionStatement	"printf ( ""FontBBox: %.2f %.2f %.2f %.2f\\n"" , fi -> FontBBox . xMin / 65536. , fi -> FontBBox . yMin / 65536. , fi -> FontBBox . xMax / 65536. , fi -> FontBBox . yMax / 65536. )"	18:4:400:696	9656481	2	True				
ANR	9656504	CallExpression	"printf ( ""FontBBox: %.2f %.2f %.2f %.2f\\n"" , fi -> FontBBox . xMin / 65536. , fi -> FontBBox . yMin / 65536. , fi -> FontBBox . xMax / 65536. , fi -> FontBBox . yMax / 65536. )"		9656481	0					
ANR	9656505	Callee	printf		9656481	0					
ANR	9656506	Identifier	printf		9656481	0					
ANR	9656507	ArgumentList	"""FontBBox: %.2f %.2f %.2f %.2f\\n"""		9656481	1					
ANR	9656508	Argument	"""FontBBox: %.2f %.2f %.2f %.2f\\n"""		9656481	0					
ANR	9656509	PrimaryExpression	"""FontBBox: %.2f %.2f %.2f %.2f\\n"""		9656481	0					
ANR	9656510	Argument	fi -> FontBBox . xMin / 65536.		9656481	1					
ANR	9656511	MultiplicativeExpression	fi -> FontBBox . xMin / 65536.		9656481	0		/			
ANR	9656512	MemberAccess	fi -> FontBBox . xMin		9656481	0					
ANR	9656513	PtrMemberAccess	fi -> FontBBox		9656481	0					
ANR	9656514	Identifier	fi		9656481	0					
ANR	9656515	Identifier	FontBBox		9656481	1					
ANR	9656516	Identifier	xMin		9656481	1					
ANR	9656517	PrimaryExpression	65536.		9656481	1					
ANR	9656518	Argument	fi -> FontBBox . yMin / 65536.		9656481	2					
ANR	9656519	MultiplicativeExpression	fi -> FontBBox . yMin / 65536.		9656481	0		/			
ANR	9656520	MemberAccess	fi -> FontBBox . yMin		9656481	0					
ANR	9656521	PtrMemberAccess	fi -> FontBBox		9656481	0					
ANR	9656522	Identifier	fi		9656481	0					
ANR	9656523	Identifier	FontBBox		9656481	1					
ANR	9656524	Identifier	yMin		9656481	1					
ANR	9656525	PrimaryExpression	65536.		9656481	1					
ANR	9656526	Argument	fi -> FontBBox . xMax / 65536.		9656481	3					
ANR	9656527	MultiplicativeExpression	fi -> FontBBox . xMax / 65536.		9656481	0		/			
ANR	9656528	MemberAccess	fi -> FontBBox . xMax		9656481	0					
ANR	9656529	PtrMemberAccess	fi -> FontBBox		9656481	0					
ANR	9656530	Identifier	fi		9656481	0					
ANR	9656531	Identifier	FontBBox		9656481	1					
ANR	9656532	Identifier	xMax		9656481	1					
ANR	9656533	PrimaryExpression	65536.		9656481	1					
ANR	9656534	Argument	fi -> FontBBox . yMax / 65536.		9656481	4					
ANR	9656535	MultiplicativeExpression	fi -> FontBBox . yMax / 65536.		9656481	0		/			
ANR	9656536	MemberAccess	fi -> FontBBox . yMax		9656481	0					
ANR	9656537	PtrMemberAccess	fi -> FontBBox		9656481	0					
ANR	9656538	Identifier	fi		9656481	0					
ANR	9656539	Identifier	FontBBox		9656481	1					
ANR	9656540	Identifier	yMax		9656481	1					
ANR	9656541	PrimaryExpression	65536.		9656481	1					
ANR	9656542	ExpressionStatement	"printf ( ""Ascender: %.2f\\n"" , fi -> Ascender / 65536. )"	22:4:702:753	9656481	3	True				
ANR	9656543	CallExpression	"printf ( ""Ascender: %.2f\\n"" , fi -> Ascender / 65536. )"		9656481	0					
ANR	9656544	Callee	printf		9656481	0					
ANR	9656545	Identifier	printf		9656481	0					
ANR	9656546	ArgumentList	"""Ascender: %.2f\\n"""		9656481	1					
ANR	9656547	Argument	"""Ascender: %.2f\\n"""		9656481	0					
ANR	9656548	PrimaryExpression	"""Ascender: %.2f\\n"""		9656481	0					
ANR	9656549	Argument	fi -> Ascender / 65536.		9656481	1					
ANR	9656550	MultiplicativeExpression	fi -> Ascender / 65536.		9656481	0		/			
ANR	9656551	PtrMemberAccess	fi -> Ascender		9656481	0					
ANR	9656552	Identifier	fi		9656481	0					
ANR	9656553	Identifier	Ascender		9656481	1					
ANR	9656554	PrimaryExpression	65536.		9656481	1					
ANR	9656555	ExpressionStatement	"printf ( ""Descender: %.2f\\n\\n"" , fi -> Descender / 65536. )"	23:4:759:814	9656481	4	True				
ANR	9656556	CallExpression	"printf ( ""Descender: %.2f\\n\\n"" , fi -> Descender / 65536. )"		9656481	0					
ANR	9656557	Callee	printf		9656481	0					
ANR	9656558	Identifier	printf		9656481	0					
ANR	9656559	ArgumentList	"""Descender: %.2f\\n\\n"""		9656481	1					
ANR	9656560	Argument	"""Descender: %.2f\\n\\n"""		9656481	0					
ANR	9656561	PrimaryExpression	"""Descender: %.2f\\n\\n"""		9656481	0					
ANR	9656562	Argument	fi -> Descender / 65536.		9656481	1					
ANR	9656563	MultiplicativeExpression	fi -> Descender / 65536.		9656481	0		/			
ANR	9656564	PtrMemberAccess	fi -> Descender		9656481	0					
ANR	9656565	Identifier	fi		9656481	0					
ANR	9656566	Identifier	Descender		9656481	1					
ANR	9656567	PrimaryExpression	65536.		9656481	1					
ANR	9656568	IfStatement	if ( fi -> NumTrackKern )		9656481	5					
ANR	9656569	Condition	fi -> NumTrackKern	25:9:826:841	9656481	0	True				
ANR	9656570	PtrMemberAccess	fi -> NumTrackKern		9656481	0					
ANR	9656571	Identifier	fi		9656481	0					
ANR	9656572	Identifier	NumTrackKern		9656481	1					
ANR	9656573	ExpressionStatement	"printf ( ""There are %d sets of track kernings:\\n"" , fi -> NumTrackKern )"	26:6:851:933	9656481	1	True				
ANR	9656574	CallExpression	"printf ( ""There are %d sets of track kernings:\\n"" , fi -> NumTrackKern )"		9656481	0					
ANR	9656575	Callee	printf		9656481	0					
ANR	9656576	Identifier	printf		9656481	0					
ANR	9656577	ArgumentList	"""There are %d sets of track kernings:\\n"""		9656481	1					
ANR	9656578	Argument	"""There are %d sets of track kernings:\\n"""		9656481	0					
ANR	9656579	PrimaryExpression	"""There are %d sets of track kernings:\\n"""		9656481	0					
ANR	9656580	Argument	fi -> NumTrackKern		9656481	1					
ANR	9656581	PtrMemberAccess	fi -> NumTrackKern		9656481	0					
ANR	9656582	Identifier	fi		9656481	0					
ANR	9656583	Identifier	NumTrackKern		9656481	1					
ANR	9656584	ElseStatement	else		9656481	0					
ANR	9656585	ExpressionStatement	"printf ( ""There is no track kerning.\\n"" )"	29:6:950:990	9656481	0	True				
ANR	9656586	CallExpression	"printf ( ""There is no track kerning.\\n"" )"		9656481	0					
ANR	9656587	Callee	printf		9656481	0					
ANR	9656588	Identifier	printf		9656481	0					
ANR	9656589	ArgumentList	"""There is no track kerning.\\n"""		9656481	1					
ANR	9656590	Argument	"""There is no track kerning.\\n"""		9656481	0					
ANR	9656591	PrimaryExpression	"""There is no track kerning.\\n"""		9656481	0					
ANR	9656592	ForStatement	for ( i = 0 ; i < fi -> NumTrackKern ; i ++ )		9656481	6					
ANR	9656593	ForInit	i = 0 ;	31:10:1003:1008	9656481	0	True				
ANR	9656594	AssignmentExpression	i = 0		9656481	0		=			
ANR	9656595	Identifier	i		9656481	0					
ANR	9656596	PrimaryExpression	0		9656481	1					
ANR	9656597	Condition	i < fi -> NumTrackKern	31:17:1010:1029	9656481	1	True				
ANR	9656598	RelationalExpression	i < fi -> NumTrackKern		9656481	0		<			
ANR	9656599	Identifier	i		9656481	0					
ANR	9656600	PtrMemberAccess	fi -> NumTrackKern		9656481	1					
ANR	9656601	Identifier	fi		9656481	0					
ANR	9656602	Identifier	NumTrackKern		9656481	1					
ANR	9656603	PostIncDecOperationExpression	i ++	31:39:1032:1034	9656481	2	True				
ANR	9656604	Identifier	i		9656481	0					
ANR	9656605	IncDec	++		9656481	1					
ANR	9656606	CompoundStatement		23:6:768:806	9656481	3					
ANR	9656607	IdentifierDeclStatement	AFM_TrackKern tk = fi -> TrackKerns + i ;	33:6:1050:1088	9656481	0	True				
ANR	9656608	IdentifierDecl	tk = fi -> TrackKerns + i		9656481	0					
ANR	9656609	IdentifierDeclType	AFM_TrackKern		9656481	0					
ANR	9656610	Identifier	tk		9656481	1					
ANR	9656611	AssignmentExpression	tk = fi -> TrackKerns + i		9656481	2		=			
ANR	9656612	Identifier	tk		9656481	0					
ANR	9656613	AdditiveExpression	fi -> TrackKerns + i		9656481	1		+			
ANR	9656614	PtrMemberAccess	fi -> TrackKerns		9656481	0					
ANR	9656615	Identifier	fi		9656481	0					
ANR	9656616	Identifier	TrackKerns		9656481	1					
ANR	9656617	Identifier	i		9656481	1					
ANR	9656618	ExpressionStatement	"printf ( ""\\t%2d: %5.2f %5.2f %5.2f %5.2f\\n"" , tk -> degree , tk -> min_ptsize / 65536. , tk -> min_kern / 65536. , tk -> max_ptsize / 65536. , tk -> max_kern / 65536. )"	36:6:1098:1450	9656481	1	True				
ANR	9656619	CallExpression	"printf ( ""\\t%2d: %5.2f %5.2f %5.2f %5.2f\\n"" , tk -> degree , tk -> min_ptsize / 65536. , tk -> min_kern / 65536. , tk -> max_ptsize / 65536. , tk -> max_kern / 65536. )"		9656481	0					
ANR	9656620	Callee	printf		9656481	0					
ANR	9656621	Identifier	printf		9656481	0					
ANR	9656622	ArgumentList	"""\\t%2d: %5.2f %5.2f %5.2f %5.2f\\n"""		9656481	1					
ANR	9656623	Argument	"""\\t%2d: %5.2f %5.2f %5.2f %5.2f\\n"""		9656481	0					
ANR	9656624	PrimaryExpression	"""\\t%2d: %5.2f %5.2f %5.2f %5.2f\\n"""		9656481	0					
ANR	9656625	Argument	tk -> degree		9656481	1					
ANR	9656626	PtrMemberAccess	tk -> degree		9656481	0					
ANR	9656627	Identifier	tk		9656481	0					
ANR	9656628	Identifier	degree		9656481	1					
ANR	9656629	Argument	tk -> min_ptsize / 65536.		9656481	2					
ANR	9656630	MultiplicativeExpression	tk -> min_ptsize / 65536.		9656481	0		/			
ANR	9656631	PtrMemberAccess	tk -> min_ptsize		9656481	0					
ANR	9656632	Identifier	tk		9656481	0					
ANR	9656633	Identifier	min_ptsize		9656481	1					
ANR	9656634	PrimaryExpression	65536.		9656481	1					
ANR	9656635	Argument	tk -> min_kern / 65536.		9656481	3					
ANR	9656636	MultiplicativeExpression	tk -> min_kern / 65536.		9656481	0		/			
ANR	9656637	PtrMemberAccess	tk -> min_kern		9656481	0					
ANR	9656638	Identifier	tk		9656481	0					
ANR	9656639	Identifier	min_kern		9656481	1					
ANR	9656640	PrimaryExpression	65536.		9656481	1					
ANR	9656641	Argument	tk -> max_ptsize / 65536.		9656481	4					
ANR	9656642	MultiplicativeExpression	tk -> max_ptsize / 65536.		9656481	0		/			
ANR	9656643	PtrMemberAccess	tk -> max_ptsize		9656481	0					
ANR	9656644	Identifier	tk		9656481	0					
ANR	9656645	Identifier	max_ptsize		9656481	1					
ANR	9656646	PrimaryExpression	65536.		9656481	1					
ANR	9656647	Argument	tk -> max_kern / 65536.		9656481	5					
ANR	9656648	MultiplicativeExpression	tk -> max_kern / 65536.		9656481	0		/			
ANR	9656649	PtrMemberAccess	tk -> max_kern		9656481	0					
ANR	9656650	Identifier	tk		9656481	0					
ANR	9656651	Identifier	max_kern		9656481	1					
ANR	9656652	PrimaryExpression	65536.		9656481	1					
ANR	9656653	ExpressionStatement	"printf ( ""\\n"" )"	43:4:1463:1477	9656481	7	True				
ANR	9656654	CallExpression	"printf ( ""\\n"" )"		9656481	0					
ANR	9656655	Callee	printf		9656481	0					
ANR	9656656	Identifier	printf		9656481	0					
ANR	9656657	ArgumentList	"""\\n"""		9656481	1					
ANR	9656658	Argument	"""\\n"""		9656481	0					
ANR	9656659	PrimaryExpression	"""\\n"""		9656481	0					
ANR	9656660	IfStatement	if ( fi -> NumKernPair )		9656481	8					
ANR	9656661	Condition	fi -> NumKernPair	45:9:1489:1503	9656481	0	True				
ANR	9656662	PtrMemberAccess	fi -> NumKernPair		9656481	0					
ANR	9656663	Identifier	fi		9656481	0					
ANR	9656664	Identifier	NumKernPair		9656481	1					
ANR	9656665	ExpressionStatement	"printf ( ""There are %d kerning pairs:\\n"" , fi -> NumKernPair )"	46:6:1513:1585	9656481	1	True				
ANR	9656666	CallExpression	"printf ( ""There are %d kerning pairs:\\n"" , fi -> NumKernPair )"		9656481	0					
ANR	9656667	Callee	printf		9656481	0					
ANR	9656668	Identifier	printf		9656481	0					
ANR	9656669	ArgumentList	"""There are %d kerning pairs:\\n"""		9656481	1					
ANR	9656670	Argument	"""There are %d kerning pairs:\\n"""		9656481	0					
ANR	9656671	PrimaryExpression	"""There are %d kerning pairs:\\n"""		9656481	0					
ANR	9656672	Argument	fi -> NumKernPair		9656481	1					
ANR	9656673	PtrMemberAccess	fi -> NumKernPair		9656481	0					
ANR	9656674	Identifier	fi		9656481	0					
ANR	9656675	Identifier	NumKernPair		9656481	1					
ANR	9656676	ElseStatement	else		9656481	0					
ANR	9656677	ExpressionStatement	"printf ( ""There is no kerning pair.\\n"" )"	49:6:1602:1641	9656481	0	True				
ANR	9656678	CallExpression	"printf ( ""There is no kerning pair.\\n"" )"		9656481	0					
ANR	9656679	Callee	printf		9656481	0					
ANR	9656680	Identifier	printf		9656481	0					
ANR	9656681	ArgumentList	"""There is no kerning pair.\\n"""		9656481	1					
ANR	9656682	Argument	"""There is no kerning pair.\\n"""		9656481	0					
ANR	9656683	PrimaryExpression	"""There is no kerning pair.\\n"""		9656481	0					
ANR	9656684	ForStatement	for ( i = 0 ; i < fi -> NumKernPair ; i ++ )		9656481	9					
ANR	9656685	ForInit	i = 0 ;	51:10:1654:1659	9656481	0	True				
ANR	9656686	AssignmentExpression	i = 0		9656481	0		=			
ANR	9656687	Identifier	i		9656481	0					
ANR	9656688	PrimaryExpression	0		9656481	1					
ANR	9656689	Condition	i < fi -> NumKernPair	51:17:1661:1679	9656481	1	True				
ANR	9656690	RelationalExpression	i < fi -> NumKernPair		9656481	0		<			
ANR	9656691	Identifier	i		9656481	0					
ANR	9656692	PtrMemberAccess	fi -> NumKernPair		9656481	1					
ANR	9656693	Identifier	fi		9656481	0					
ANR	9656694	Identifier	NumKernPair		9656481	1					
ANR	9656695	PostIncDecOperationExpression	i ++	51:38:1682:1684	9656481	2	True				
ANR	9656696	Identifier	i		9656481	0					
ANR	9656697	IncDec	++		9656481	1					
ANR	9656698	CompoundStatement		43:6:1418:1454	9656481	3					
ANR	9656699	IdentifierDeclStatement	AFM_KernPair kp = fi -> KernPairs + i ;	53:6:1700:1736	9656481	0	True				
ANR	9656700	IdentifierDecl	kp = fi -> KernPairs + i		9656481	0					
ANR	9656701	IdentifierDeclType	AFM_KernPair		9656481	0					
ANR	9656702	Identifier	kp		9656481	1					
ANR	9656703	AssignmentExpression	kp = fi -> KernPairs + i		9656481	2		=			
ANR	9656704	Identifier	kp		9656481	0					
ANR	9656705	AdditiveExpression	fi -> KernPairs + i		9656481	1		+			
ANR	9656706	PtrMemberAccess	fi -> KernPairs		9656481	0					
ANR	9656707	Identifier	fi		9656481	0					
ANR	9656708	Identifier	KernPairs		9656481	1					
ANR	9656709	Identifier	i		9656481	1					
ANR	9656710	ExpressionStatement	"printf ( ""\\t%3d + %3d => (%4d, %4d)\\n"" , kp -> index1 , kp -> index2 , kp -> x , kp -> y )"	56:6:1746:1958	9656481	1	True				
ANR	9656711	CallExpression	"printf ( ""\\t%3d + %3d => (%4d, %4d)\\n"" , kp -> index1 , kp -> index2 , kp -> x , kp -> y )"		9656481	0					
ANR	9656712	Callee	printf		9656481	0					
ANR	9656713	Identifier	printf		9656481	0					
ANR	9656714	ArgumentList	"""\\t%3d + %3d => (%4d, %4d)\\n"""		9656481	1					
ANR	9656715	Argument	"""\\t%3d + %3d => (%4d, %4d)\\n"""		9656481	0					
ANR	9656716	PrimaryExpression	"""\\t%3d + %3d => (%4d, %4d)\\n"""		9656481	0					
ANR	9656717	Argument	kp -> index1		9656481	1					
ANR	9656718	PtrMemberAccess	kp -> index1		9656481	0					
ANR	9656719	Identifier	kp		9656481	0					
ANR	9656720	Identifier	index1		9656481	1					
ANR	9656721	Argument	kp -> index2		9656481	2					
ANR	9656722	PtrMemberAccess	kp -> index2		9656481	0					
ANR	9656723	Identifier	kp		9656481	0					
ANR	9656724	Identifier	index2		9656481	1					
ANR	9656725	Argument	kp -> x		9656481	3					
ANR	9656726	PtrMemberAccess	kp -> x		9656481	0					
ANR	9656727	Identifier	kp		9656481	0					
ANR	9656728	Identifier	x		9656481	1					
ANR	9656729	Argument	kp -> y		9656481	4					
ANR	9656730	PtrMemberAccess	kp -> y		9656481	0					
ANR	9656731	Identifier	kp		9656481	0					
ANR	9656732	Identifier	y		9656481	1					
ANR	9656733	ReturnType	include FT_FREETYPE_H include FT_INTERNAL_STREAM_H include FT_INTERNAL_POSTSCRIPT_AUX_H void		9656481	1					
ANR	9656734	Identifier	dump_fontinfo		9656481	2					
ANR	9656735	ParameterList	AFM_FontInfo fi		9656481	3					
ANR	9656736	Parameter	AFM_FontInfo fi	10:22:260:275	9656481	0	True				
ANR	9656737	ParameterType	AFM_FontInfo		9656481	0					
ANR	9656738	Identifier	fi		9656481	1					
ANR	9656739	CFGEntryNode	ENTRY		9656481		True				
ANR	9656740	CFGExitNode	EXIT		9656481		True				
ANR	9656741	Symbol	fi		9656481						
ANR	9656742	Symbol	* kp		9656481						
ANR	9656743	Symbol	kp -> index2		9656481						
ANR	9656744	Symbol	fi -> FontBBox . yMax		9656481						
ANR	9656745	Symbol	kp -> index1		9656481						
ANR	9656746	Symbol	tk -> min_ptsize		9656481						
ANR	9656747	Symbol	kp -> y		9656481						
ANR	9656748	Symbol	fi -> KernPairs		9656481						
ANR	9656749	Symbol	kp -> x		9656481						
ANR	9656750	Symbol	fi -> FontBBox . yMin		9656481						
ANR	9656751	Symbol	fi -> FontBBox . xMax		9656481						
ANR	9656752	Symbol	kp		9656481						
ANR	9656753	Symbol	tk -> max_kern		9656481						
ANR	9656754	Symbol	fi -> NumTrackKern		9656481						
ANR	9656755	Symbol	i		9656481						
ANR	9656756	Symbol	* fi		9656481						
ANR	9656757	Symbol	fi -> TrackKerns		9656481						
ANR	9656758	Symbol	fi -> NumKernPair		9656481						
ANR	9656759	Symbol	fi -> Ascender		9656481						
ANR	9656760	Symbol	fi -> FontBBox		9656481						
ANR	9656761	Symbol	tk -> degree		9656481						
ANR	9656762	Symbol	fi -> FontBBox . xMin		9656481						
ANR	9656763	Symbol	tk -> max_ptsize		9656481						
ANR	9656764	Symbol	fi -> Descender		9656481						
ANR	9656765	Symbol	tk		9656481						
ANR	9656766	Symbol	tk -> min_kern		9656481						
ANR	9656767	Symbol	* tk		9656481						
ANR	9656768	Symbol	fi -> IsCIDFont		9656481						
ANR	9656769	Function	dummy_get_index	64:2:1974:2165							
ANR	9656770	FunctionDef	"dummy_get_index (const char * name , FT_Offset len , void * user_data)"		9656769	0					
ANR	9656771	CompoundStatement		68:2:2099:2165	9656769	0					
ANR	9656772	IfStatement	if ( len )		9656769	0					
ANR	9656773	Condition	len	69:9:2110:2112	9656769	0	True				
ANR	9656774	Identifier	len		9656769	0					
ANR	9656775	ReturnStatement	return name [ 0 ] ;	70:6:2122:2136	9656769	1	True				
ANR	9656776	ArrayIndexing	name [ 0 ]		9656769	0					
ANR	9656777	Identifier	name		9656769	0					
ANR	9656778	PrimaryExpression	0		9656769	1					
ANR	9656779	ElseStatement	else		9656769	0					
ANR	9656780	ReturnStatement	return 0 ;	72:6:2153:2161	9656769	0	True				
ANR	9656781	PrimaryExpression	0		9656769	0					
ANR	9656782	ReturnType	int		9656769	1					
ANR	9656783	Identifier	dummy_get_index		9656769	2					
ANR	9656784	ParameterList	"const char * name , FT_Offset len , void * user_data"		9656769	3					
ANR	9656785	Parameter	const char * name	65:19:1997:2013	9656769	0	True				
ANR	9656786	ParameterType	const char *		9656769	0					
ANR	9656787	Identifier	name		9656769	1					
ANR	9656788	Parameter	FT_Offset len	66:19:2035:2050	9656769	1	True				
ANR	9656789	ParameterType	FT_Offset		9656769	0					
ANR	9656790	Identifier	len		9656769	1					
ANR	9656791	Parameter	void * user_data	67:19:2072:2093	9656769	2	True				
ANR	9656792	ParameterType	void *		9656769	0					
ANR	9656793	Identifier	user_data		9656769	1					
ANR	9656794	CFGEntryNode	ENTRY		9656769		True				
ANR	9656795	CFGExitNode	EXIT		9656769		True				
ANR	9656796	Symbol	* name		9656769						
ANR	9656797	Symbol	len		9656769						
ANR	9656798	Symbol	name		9656769						
ANR	9656799	Symbol	user_data		9656769						
ANR	9656800	Function	parse_afm	75:2:2170:3070							
ANR	9656801	FunctionDef	"parse_afm (FT_Library library , FT_Stream stream , AFM_FontInfo fi)"		9656800	0					
ANR	9656802	CompoundStatement		79:2:2284:3070	9656800	0					
ANR	9656803	IdentifierDeclStatement	PSAux_Service psaux ;	80:4:2290:2310	9656800	0	True				
ANR	9656804	IdentifierDecl	psaux		9656800	0					
ANR	9656805	IdentifierDeclType	PSAux_Service		9656800	0					
ANR	9656806	Identifier	psaux		9656800	1					
ANR	9656807	IdentifierDeclStatement	AFM_ParserRec parser ;	81:4:2316:2337	9656800	1	True				
ANR	9656808	IdentifierDecl	parser		9656800	0					
ANR	9656809	IdentifierDeclType	AFM_ParserRec		9656800	0					
ANR	9656810	Identifier	parser		9656800	1					
ANR	9656811	IdentifierDeclStatement	FT_Error error = FT_Err_Ok ;	82:4:2343:2375	9656800	2	True				
ANR	9656812	IdentifierDecl	error = FT_Err_Ok		9656800	0					
ANR	9656813	IdentifierDeclType	FT_Error		9656800	0					
ANR	9656814	Identifier	error		9656800	1					
ANR	9656815	AssignmentExpression	error = FT_Err_Ok		9656800	2		=			
ANR	9656816	Identifier	FT_Err_Ok		9656800	0					
ANR	9656817	Identifier	FT_Err_Ok		9656800	1					
ANR	9656818	ExpressionStatement	"psaux = ( PSAux_Service ) FT_Get_Module_Interface ( library , ""psaux"" )"	85:4:2383:2449	9656800	3	True				
ANR	9656819	AssignmentExpression	"psaux = ( PSAux_Service ) FT_Get_Module_Interface ( library , ""psaux"" )"		9656800	0		=			
ANR	9656820	Identifier	psaux		9656800	0					
ANR	9656821	CastExpression	"( PSAux_Service ) FT_Get_Module_Interface ( library , ""psaux"" )"		9656800	1					
ANR	9656822	CastTarget	PSAux_Service		9656800	0					
ANR	9656823	CallExpression	"FT_Get_Module_Interface ( library , ""psaux"" )"		9656800	1					
ANR	9656824	Callee	FT_Get_Module_Interface		9656800	0					
ANR	9656825	Identifier	FT_Get_Module_Interface		9656800	0					
ANR	9656826	ArgumentList	library		9656800	1					
ANR	9656827	Argument	library		9656800	0					
ANR	9656828	Identifier	library		9656800	0					
ANR	9656829	Argument	"""psaux"""		9656800	1					
ANR	9656830	PrimaryExpression	"""psaux"""		9656800	0					
ANR	9656831	IfStatement	if ( ! psaux || ! psaux -> afm_parser_funcs )		9656800	4					
ANR	9656832	Condition	! psaux || ! psaux -> afm_parser_funcs	86:9:2460:2493	9656800	0	True				
ANR	9656833	OrExpression	! psaux || ! psaux -> afm_parser_funcs		9656800	0		||			
ANR	9656834	UnaryOperationExpression	! psaux		9656800	0					
ANR	9656835	UnaryOperator	!		9656800	0					
ANR	9656836	Identifier	psaux		9656800	1					
ANR	9656837	UnaryOperationExpression	! psaux -> afm_parser_funcs		9656800	1					
ANR	9656838	UnaryOperator	!		9656800	0					
ANR	9656839	PtrMemberAccess	psaux -> afm_parser_funcs		9656800	1					
ANR	9656840	Identifier	psaux		9656800	0					
ANR	9656841	Identifier	afm_parser_funcs		9656800	1					
ANR	9656842	ReturnStatement	return - 1 ;	87:6:2503:2512	9656800	1	True				
ANR	9656843	UnaryOperationExpression	- 1		9656800	0					
ANR	9656844	UnaryOperator	-		9656800	0					
ANR	9656845	PrimaryExpression	1		9656800	1					
ANR	9656846	ExpressionStatement	"error = FT_Stream_EnterFrame ( stream , stream -> size )"	89:4:2519:2571	9656800	5	True				
ANR	9656847	AssignmentExpression	"error = FT_Stream_EnterFrame ( stream , stream -> size )"		9656800	0		=			
ANR	9656848	Identifier	error		9656800	0					
ANR	9656849	CallExpression	"FT_Stream_EnterFrame ( stream , stream -> size )"		9656800	1					
ANR	9656850	Callee	FT_Stream_EnterFrame		9656800	0					
ANR	9656851	Identifier	FT_Stream_EnterFrame		9656800	0					
ANR	9656852	ArgumentList	stream		9656800	1					
ANR	9656853	Argument	stream		9656800	0					
ANR	9656854	Identifier	stream		9656800	0					
ANR	9656855	Argument	stream -> size		9656800	1					
ANR	9656856	PtrMemberAccess	stream -> size		9656800	0					
ANR	9656857	Identifier	stream		9656800	0					
ANR	9656858	Identifier	size		9656800	1					
ANR	9656859	IfStatement	if ( error )		9656800	6					
ANR	9656860	Condition	error	90:9:2582:2586	9656800	0	True				
ANR	9656861	Identifier	error		9656800	0					
ANR	9656862	ReturnStatement	return error ;	91:6:2596:2608	9656800	1	True				
ANR	9656863	Identifier	error		9656800	0					
ANR	9656864	ExpressionStatement	"error = psaux -> afm_parser_funcs -> init ( & parser , library -> memory , stream -> cursor , stream -> limit )"	93:4:2615:2840	9656800	7	True				
ANR	9656865	AssignmentExpression	"error = psaux -> afm_parser_funcs -> init ( & parser , library -> memory , stream -> cursor , stream -> limit )"		9656800	0		=			
ANR	9656866	Identifier	error		9656800	0					
ANR	9656867	CallExpression	"psaux -> afm_parser_funcs -> init ( & parser , library -> memory , stream -> cursor , stream -> limit )"		9656800	1					
ANR	9656868	Callee	psaux -> afm_parser_funcs -> init		9656800	0					
ANR	9656869	PtrMemberAccess	psaux -> afm_parser_funcs -> init		9656800	0					
ANR	9656870	PtrMemberAccess	psaux -> afm_parser_funcs		9656800	0					
ANR	9656871	Identifier	psaux		9656800	0					
ANR	9656872	Identifier	afm_parser_funcs		9656800	1					
ANR	9656873	Identifier	init		9656800	1					
ANR	9656874	ArgumentList	& parser		9656800	1					
ANR	9656875	Argument	& parser		9656800	0					
ANR	9656876	UnaryOperationExpression	& parser		9656800	0					
ANR	9656877	UnaryOperator	&		9656800	0					
ANR	9656878	Identifier	parser		9656800	1					
ANR	9656879	Argument	library -> memory		9656800	1					
ANR	9656880	PtrMemberAccess	library -> memory		9656800	0					
ANR	9656881	Identifier	library		9656800	0					
ANR	9656882	Identifier	memory		9656800	1					
ANR	9656883	Argument	stream -> cursor		9656800	2					
ANR	9656884	PtrMemberAccess	stream -> cursor		9656800	0					
ANR	9656885	Identifier	stream		9656800	0					
ANR	9656886	Identifier	cursor		9656800	1					
ANR	9656887	Argument	stream -> limit		9656800	3					
ANR	9656888	PtrMemberAccess	stream -> limit		9656800	0					
ANR	9656889	Identifier	stream		9656800	0					
ANR	9656890	Identifier	limit		9656800	1					
ANR	9656891	IfStatement	if ( error )		9656800	8					
ANR	9656892	Condition	error	97:9:2851:2855	9656800	0	True				
ANR	9656893	Identifier	error		9656800	0					
ANR	9656894	ReturnStatement	return error ;	98:6:2865:2877	9656800	1	True				
ANR	9656895	Identifier	error		9656800	0					
ANR	9656896	ExpressionStatement	parser . FontInfo = fi	100:4:2884:2904	9656800	9	True				
ANR	9656897	AssignmentExpression	parser . FontInfo = fi		9656800	0		=			
ANR	9656898	MemberAccess	parser . FontInfo		9656800	0					
ANR	9656899	Identifier	parser		9656800	0					
ANR	9656900	Identifier	FontInfo		9656800	1					
ANR	9656901	Identifier	fi		9656800	1					
ANR	9656902	ExpressionStatement	parser . get_index = dummy_get_index	101:4:2910:2944	9656800	10	True				
ANR	9656903	AssignmentExpression	parser . get_index = dummy_get_index		9656800	0		=			
ANR	9656904	MemberAccess	parser . get_index		9656800	0					
ANR	9656905	Identifier	parser		9656800	0					
ANR	9656906	Identifier	get_index		9656800	1					
ANR	9656907	Identifier	dummy_get_index		9656800	1					
ANR	9656908	ExpressionStatement	error = psaux -> afm_parser_funcs -> parse ( & parser )	103:4:2951:3000	9656800	11	True				
ANR	9656909	AssignmentExpression	error = psaux -> afm_parser_funcs -> parse ( & parser )		9656800	0		=			
ANR	9656910	Identifier	error		9656800	0					
ANR	9656911	CallExpression	psaux -> afm_parser_funcs -> parse ( & parser )		9656800	1					
ANR	9656912	Callee	psaux -> afm_parser_funcs -> parse		9656800	0					
ANR	9656913	PtrMemberAccess	psaux -> afm_parser_funcs -> parse		9656800	0					
ANR	9656914	PtrMemberAccess	psaux -> afm_parser_funcs		9656800	0					
ANR	9656915	Identifier	psaux		9656800	0					
ANR	9656916	Identifier	afm_parser_funcs		9656800	1					
ANR	9656917	Identifier	parse		9656800	1					
ANR	9656918	ArgumentList	& parser		9656800	1					
ANR	9656919	Argument	& parser		9656800	0					
ANR	9656920	UnaryOperationExpression	& parser		9656800	0					
ANR	9656921	UnaryOperator	&		9656800	0					
ANR	9656922	Identifier	parser		9656800	1					
ANR	9656923	ExpressionStatement	psaux -> afm_parser_funcs -> done ( & parser )	105:4:3007:3047	9656800	12	True				
ANR	9656924	CallExpression	psaux -> afm_parser_funcs -> done ( & parser )		9656800	0					
ANR	9656925	Callee	psaux -> afm_parser_funcs -> done		9656800	0					
ANR	9656926	PtrMemberAccess	psaux -> afm_parser_funcs -> done		9656800	0					
ANR	9656927	PtrMemberAccess	psaux -> afm_parser_funcs		9656800	0					
ANR	9656928	Identifier	psaux		9656800	0					
ANR	9656929	Identifier	afm_parser_funcs		9656800	1					
ANR	9656930	Identifier	done		9656800	1					
ANR	9656931	ArgumentList	& parser		9656800	1					
ANR	9656932	Argument	& parser		9656800	0					
ANR	9656933	UnaryOperationExpression	& parser		9656800	0					
ANR	9656934	UnaryOperator	&		9656800	0					
ANR	9656935	Identifier	parser		9656800	1					
ANR	9656936	ReturnStatement	return error ;	107:4:3054:3066	9656800	13	True				
ANR	9656937	Identifier	error		9656800	0					
ANR	9656938	ReturnType	FT_Error		9656800	1					
ANR	9656939	Identifier	parse_afm		9656800	2					
ANR	9656940	ParameterList	"FT_Library library , FT_Stream stream , AFM_FontInfo fi"		9656800	3					
ANR	9656941	Parameter	FT_Library library	76:13:2192:2212	9656800	0	True				
ANR	9656942	ParameterType	FT_Library		9656800	0					
ANR	9656943	Identifier	library		9656800	1					
ANR	9656944	Parameter	FT_Stream stream	77:13:2228:2247	9656800	1	True				
ANR	9656945	ParameterType	FT_Stream		9656800	0					
ANR	9656946	Identifier	stream		9656800	1					
ANR	9656947	Parameter	AFM_FontInfo fi	78:13:2263:2278	9656800	2	True				
ANR	9656948	ParameterType	AFM_FontInfo		9656800	0					
ANR	9656949	Identifier	fi		9656800	1					
ANR	9656950	CFGEntryNode	ENTRY		9656800		True				
ANR	9656951	CFGExitNode	EXIT		9656800		True				
ANR	9656952	Symbol	psaux		9656800						
ANR	9656953	Symbol	stream -> size		9656800						
ANR	9656954	Symbol	* library		9656800						
ANR	9656955	Symbol	fi		9656800						
ANR	9656956	Symbol	FT_Err_Ok		9656800						
ANR	9656957	Symbol	& parser		9656800						
ANR	9656958	Symbol	library -> memory		9656800						
ANR	9656959	Symbol	psaux -> afm_parser_funcs -> parse		9656800						
ANR	9656960	Symbol	error		9656800						
ANR	9656961	Symbol	psaux -> afm_parser_funcs -> init		9656800						
ANR	9656962	Symbol	library		9656800						
ANR	9656963	Symbol	stream		9656800						
ANR	9656964	Symbol	* * psaux		9656800						
ANR	9656965	Symbol	psaux -> afm_parser_funcs		9656800						
ANR	9656966	Symbol	FT_Stream_EnterFrame		9656800						
ANR	9656967	Symbol	parser . FontInfo		9656800						
ANR	9656968	Symbol	stream -> limit		9656800						
ANR	9656969	Symbol	parser . get_index		9656800						
ANR	9656970	Symbol	* psaux -> afm_parser_funcs		9656800						
ANR	9656971	Symbol	* psaux		9656800						
ANR	9656972	Symbol	FT_Get_Module_Interface		9656800						
ANR	9656973	Symbol	dummy_get_index		9656800						
ANR	9656974	Symbol	parser		9656800						
ANR	9656975	Symbol	stream -> cursor		9656800						
ANR	9656976	Symbol	* stream		9656800						
ANR	9656977	Function	main	111:2:3076:3972							
ANR	9656978	FunctionDef	"main (int argc , char * * argv)"		9656977	0					
ANR	9656979	CompoundStatement		113:2:3127:3972	9656977	0					
ANR	9656980	IdentifierDeclStatement	FT_Library library ;	114:4:3133:3157	9656977	0	True				
ANR	9656981	IdentifierDecl	library		9656977	0					
ANR	9656982	IdentifierDeclType	FT_Library		9656977	0					
ANR	9656983	Identifier	library		9656977	1					
ANR	9656984	IdentifierDeclStatement	FT_StreamRec stream ;	115:4:3163:3186	9656977	1	True				
ANR	9656985	IdentifierDecl	stream		9656977	0					
ANR	9656986	IdentifierDeclType	FT_StreamRec		9656977	0					
ANR	9656987	Identifier	stream		9656977	1					
ANR	9656988	IdentifierDeclStatement	FT_Error error = FT_Err_Ok ;	116:4:3192:3226	9656977	2	True				
ANR	9656989	IdentifierDecl	error = FT_Err_Ok		9656977	0					
ANR	9656990	IdentifierDeclType	FT_Error		9656977	0					
ANR	9656991	Identifier	error		9656977	1					
ANR	9656992	AssignmentExpression	error = FT_Err_Ok		9656977	2		=			
ANR	9656993	Identifier	FT_Err_Ok		9656977	0					
ANR	9656994	Identifier	FT_Err_Ok		9656977	1					
ANR	9656995	IdentifierDeclStatement	AFM_FontInfoRec fi ;	117:4:3232:3251	9656977	3	True				
ANR	9656996	IdentifierDecl	fi		9656977	0					
ANR	9656997	IdentifierDeclType	AFM_FontInfoRec		9656977	0					
ANR	9656998	Identifier	fi		9656977	1					
ANR	9656999	IfStatement	if ( argc < 2 )		9656977	4					
ANR	9657000	Condition	argc < 2	120:9:3264:3271	9656977	0	True				
ANR	9657001	RelationalExpression	argc < 2		9656977	0		<			
ANR	9657002	Identifier	argc		9656977	0					
ANR	9657003	PrimaryExpression	2		9656977	1					
ANR	9657004	ReturnStatement	return FT_ERR ( Invalid_Argument ) ;	121:6:3281:3314	9656977	1	True				
ANR	9657005	CallExpression	FT_ERR ( Invalid_Argument )		9656977	0					
ANR	9657006	Callee	FT_ERR		9656977	0					
ANR	9657007	Identifier	FT_ERR		9656977	0					
ANR	9657008	ArgumentList	Invalid_Argument		9656977	1					
ANR	9657009	Argument	Invalid_Argument		9656977	0					
ANR	9657010	Identifier	Invalid_Argument		9656977	0					
ANR	9657011	ExpressionStatement	error = FT_Init_FreeType ( & library )	123:4:3321:3357	9656977	5	True				
ANR	9657012	AssignmentExpression	error = FT_Init_FreeType ( & library )		9656977	0		=			
ANR	9657013	Identifier	error		9656977	0					
ANR	9657014	CallExpression	FT_Init_FreeType ( & library )		9656977	1					
ANR	9657015	Callee	FT_Init_FreeType		9656977	0					
ANR	9657016	Identifier	FT_Init_FreeType		9656977	0					
ANR	9657017	ArgumentList	& library		9656977	1					
ANR	9657018	Argument	& library		9656977	0					
ANR	9657019	UnaryOperationExpression	& library		9656977	0					
ANR	9657020	UnaryOperator	&		9656977	0					
ANR	9657021	Identifier	library		9656977	1					
ANR	9657022	IfStatement	if ( error )		9656977	6					
ANR	9657023	Condition	error	124:9:3368:3372	9656977	0	True				
ANR	9657024	Identifier	error		9656977	0					
ANR	9657025	ReturnStatement	return error ;	125:6:3382:3394	9656977	1	True				
ANR	9657026	Identifier	error		9656977	0					
ANR	9657027	ExpressionStatement	FT_ZERO ( & stream )	127:4:3401:3419	9656977	7	True				
ANR	9657028	CallExpression	FT_ZERO ( & stream )		9656977	0					
ANR	9657029	Callee	FT_ZERO		9656977	0					
ANR	9657030	Identifier	FT_ZERO		9656977	0					
ANR	9657031	ArgumentList	& stream		9656977	1					
ANR	9657032	Argument	& stream		9656977	0					
ANR	9657033	UnaryOperationExpression	& stream		9656977	0					
ANR	9657034	UnaryOperator	&		9656977	0					
ANR	9657035	Identifier	stream		9656977	1					
ANR	9657036	ExpressionStatement	"error = FT_Stream_Open ( & stream , argv [ 1 ] )"	128:4:3425:3467	9656977	8	True				
ANR	9657037	AssignmentExpression	"error = FT_Stream_Open ( & stream , argv [ 1 ] )"		9656977	0		=			
ANR	9657038	Identifier	error		9656977	0					
ANR	9657039	CallExpression	"FT_Stream_Open ( & stream , argv [ 1 ] )"		9656977	1					
ANR	9657040	Callee	FT_Stream_Open		9656977	0					
ANR	9657041	Identifier	FT_Stream_Open		9656977	0					
ANR	9657042	ArgumentList	& stream		9656977	1					
ANR	9657043	Argument	& stream		9656977	0					
ANR	9657044	UnaryOperationExpression	& stream		9656977	0					
ANR	9657045	UnaryOperator	&		9656977	0					
ANR	9657046	Identifier	stream		9656977	1					
ANR	9657047	Argument	argv [ 1 ]		9656977	1					
ANR	9657048	ArrayIndexing	argv [ 1 ]		9656977	0					
ANR	9657049	Identifier	argv		9656977	0					
ANR	9657050	PrimaryExpression	1		9656977	1					
ANR	9657051	IfStatement	if ( error )		9656977	9					
ANR	9657052	Condition	error	129:9:3478:3482	9656977	0	True				
ANR	9657053	Identifier	error		9656977	0					
ANR	9657054	GotoStatement	goto Exit ;	130:6:3492:3501	9656977	1	True				
ANR	9657055	Identifier	Exit		9656977	0					
ANR	9657056	ExpressionStatement	stream . memory = library -> memory	131:4:3507:3538	9656977	10	True				
ANR	9657057	AssignmentExpression	stream . memory = library -> memory		9656977	0		=			
ANR	9657058	MemberAccess	stream . memory		9656977	0					
ANR	9657059	Identifier	stream		9656977	0					
ANR	9657060	Identifier	memory		9656977	1					
ANR	9657061	PtrMemberAccess	library -> memory		9656977	1					
ANR	9657062	Identifier	library		9656977	0					
ANR	9657063	Identifier	memory		9656977	1					
ANR	9657064	ExpressionStatement	FT_ZERO ( & fi )	133:4:3545:3559	9656977	11	True				
ANR	9657065	CallExpression	FT_ZERO ( & fi )		9656977	0					
ANR	9657066	Callee	FT_ZERO		9656977	0					
ANR	9657067	Identifier	FT_ZERO		9656977	0					
ANR	9657068	ArgumentList	& fi		9656977	1					
ANR	9657069	Argument	& fi		9656977	0					
ANR	9657070	UnaryOperationExpression	& fi		9656977	0					
ANR	9657071	UnaryOperator	&		9656977	0					
ANR	9657072	Identifier	fi		9656977	1					
ANR	9657073	ExpressionStatement	"error = parse_afm ( library , & stream , & fi )"	134:4:3565:3607	9656977	12	True				
ANR	9657074	AssignmentExpression	"error = parse_afm ( library , & stream , & fi )"		9656977	0		=			
ANR	9657075	Identifier	error		9656977	0					
ANR	9657076	CallExpression	"parse_afm ( library , & stream , & fi )"		9656977	1					
ANR	9657077	Callee	parse_afm		9656977	0					
ANR	9657078	Identifier	parse_afm		9656977	0					
ANR	9657079	ArgumentList	library		9656977	1					
ANR	9657080	Argument	library		9656977	0					
ANR	9657081	Identifier	library		9656977	0					
ANR	9657082	Argument	& stream		9656977	1					
ANR	9657083	UnaryOperationExpression	& stream		9656977	0					
ANR	9657084	UnaryOperator	&		9656977	0					
ANR	9657085	Identifier	stream		9656977	1					
ANR	9657086	Argument	& fi		9656977	2					
ANR	9657087	UnaryOperationExpression	& fi		9656977	0					
ANR	9657088	UnaryOperator	&		9656977	0					
ANR	9657089	Identifier	fi		9656977	1					
ANR	9657090	IfStatement	if ( ! error )		9656977	13					
ANR	9657091	Condition	! error	136:9:3619:3624	9656977	0	True				
ANR	9657092	UnaryOperationExpression	! error		9656977	0					
ANR	9657093	UnaryOperator	!		9656977	0					
ANR	9657094	Identifier	error		9656977	1					
ANR	9657095	CompoundStatement		26:6:512:547	9656977	1					
ANR	9657096	IdentifierDeclStatement	FT_Memory memory = library -> memory ;	138:6:3640:3675	9656977	0	True				
ANR	9657097	IdentifierDecl	memory = library -> memory		9656977	0					
ANR	9657098	IdentifierDeclType	FT_Memory		9656977	0					
ANR	9657099	Identifier	memory		9656977	1					
ANR	9657100	AssignmentExpression	memory = library -> memory		9656977	2		=			
ANR	9657101	Identifier	memory		9656977	0					
ANR	9657102	PtrMemberAccess	library -> memory		9656977	1					
ANR	9657103	Identifier	library		9656977	0					
ANR	9657104	Identifier	memory		9656977	1					
ANR	9657105	ExpressionStatement	dump_fontinfo ( & fi )	141:6:3685:3705	9656977	1	True				
ANR	9657106	CallExpression	dump_fontinfo ( & fi )		9656977	0					
ANR	9657107	Callee	dump_fontinfo		9656977	0					
ANR	9657108	Identifier	dump_fontinfo		9656977	0					
ANR	9657109	ArgumentList	& fi		9656977	1					
ANR	9657110	Argument	& fi		9656977	0					
ANR	9657111	UnaryOperationExpression	& fi		9656977	0					
ANR	9657112	UnaryOperator	&		9656977	0					
ANR	9657113	Identifier	fi		9656977	1					
ANR	9657114	IfStatement	if ( fi . KernPairs )		9656977	2					
ANR	9657115	Condition	fi . KernPairs	143:11:3719:3730	9656977	0	True				
ANR	9657116	MemberAccess	fi . KernPairs		9656977	0					
ANR	9657117	Identifier	fi		9656977	0					
ANR	9657118	Identifier	KernPairs		9656977	1					
ANR	9657119	ExpressionStatement	FT_FREE ( fi . KernPairs )	144:8:3742:3765	9656977	1	True				
ANR	9657120	CallExpression	FT_FREE ( fi . KernPairs )		9656977	0					
ANR	9657121	Callee	FT_FREE		9656977	0					
ANR	9657122	Identifier	FT_FREE		9656977	0					
ANR	9657123	ArgumentList	fi . KernPairs		9656977	1					
ANR	9657124	Argument	fi . KernPairs		9656977	0					
ANR	9657125	MemberAccess	fi . KernPairs		9656977	0					
ANR	9657126	Identifier	fi		9656977	0					
ANR	9657127	Identifier	KernPairs		9656977	1					
ANR	9657128	IfStatement	if ( fi . TrackKerns )		9656977	3					
ANR	9657129	Condition	fi . TrackKerns	145:11:3778:3790	9656977	0	True				
ANR	9657130	MemberAccess	fi . TrackKerns		9656977	0					
ANR	9657131	Identifier	fi		9656977	0					
ANR	9657132	Identifier	TrackKerns		9656977	1					
ANR	9657133	ExpressionStatement	FT_FREE ( fi . TrackKerns )	146:8:3802:3826	9656977	1	True				
ANR	9657134	CallExpression	FT_FREE ( fi . TrackKerns )		9656977	0					
ANR	9657135	Callee	FT_FREE		9656977	0					
ANR	9657136	Identifier	FT_FREE		9656977	0					
ANR	9657137	ArgumentList	fi . TrackKerns		9656977	1					
ANR	9657138	Argument	fi . TrackKerns		9656977	0					
ANR	9657139	MemberAccess	fi . TrackKerns		9656977	0					
ANR	9657140	Identifier	fi		9656977	0					
ANR	9657141	Identifier	TrackKerns		9656977	1					
ANR	9657142	ElseStatement	else		9656977	0					
ANR	9657143	ExpressionStatement	"printf ( ""parse error\\n"" )"	149:6:3849:3874	9656977	0	True				
ANR	9657144	CallExpression	"printf ( ""parse error\\n"" )"		9656977	0					
ANR	9657145	Callee	printf		9656977	0					
ANR	9657146	Identifier	printf		9656977	0					
ANR	9657147	ArgumentList	"""parse error\\n"""		9656977	1					
ANR	9657148	Argument	"""parse error\\n"""		9656977	0					
ANR	9657149	PrimaryExpression	"""parse error\\n"""		9656977	0					
ANR	9657150	ExpressionStatement	FT_Stream_Close ( & stream )	151:4:3881:3907	9656977	14	True				
ANR	9657151	CallExpression	FT_Stream_Close ( & stream )		9656977	0					
ANR	9657152	Callee	FT_Stream_Close		9656977	0					
ANR	9657153	Identifier	FT_Stream_Close		9656977	0					
ANR	9657154	ArgumentList	& stream		9656977	1					
ANR	9657155	Argument	& stream		9656977	0					
ANR	9657156	UnaryOperationExpression	& stream		9656977	0					
ANR	9657157	UnaryOperator	&		9656977	0					
ANR	9657158	Identifier	stream		9656977	1					
ANR	9657159	Label	Exit :	153:2:3912:3916	9656977	15	True				
ANR	9657160	Identifier	Exit		9656977	0					
ANR	9657161	ExpressionStatement	FT_Done_FreeType ( library )	154:4:3922:3949	9656977	16	True				
ANR	9657162	CallExpression	FT_Done_FreeType ( library )		9656977	0					
ANR	9657163	Callee	FT_Done_FreeType		9656977	0					
ANR	9657164	Identifier	FT_Done_FreeType		9656977	0					
ANR	9657165	ArgumentList	library		9656977	1					
ANR	9657166	Argument	library		9656977	0					
ANR	9657167	Identifier	library		9656977	0					
ANR	9657168	ReturnStatement	return error ;	156:4:3956:3968	9656977	17	True				
ANR	9657169	Identifier	error		9656977	0					
ANR	9657170	ReturnType	int		9656977	1					
ANR	9657171	Identifier	main		9656977	2					
ANR	9657172	ParameterList	"int argc , char * * argv"		9656977	3					
ANR	9657173	Parameter	int argc	111:12:3086:3096	9656977	0	True				
ANR	9657174	ParameterType	int		9656977	0					
ANR	9657175	Identifier	argc		9656977	1					
ANR	9657176	Parameter	char * * argv	112:12:3111:3121	9656977	1	True				
ANR	9657177	ParameterType	char * *		9656977	0					
ANR	9657178	Identifier	argv		9656977	1					
ANR	9657179	CFGEntryNode	ENTRY		9656977		True				
ANR	9657180	CFGExitNode	EXIT		9656977		True				
ANR	9657181	Symbol	argc		9656977						
ANR	9657182	Symbol	FT_Init_FreeType		9656977						
ANR	9657183	Symbol	* library		9656977						
ANR	9657184	Symbol	fi		9656977						
ANR	9657185	Symbol	memory		9656977						
ANR	9657186	Symbol	FT_Err_Ok		9656977						
ANR	9657187	Symbol	library -> memory		9656977						
ANR	9657188	Symbol	stream . memory		9656977						
ANR	9657189	Symbol	* argv		9656977						
ANR	9657190	Symbol	FT_ERR		9656977						
ANR	9657191	Symbol	Invalid_Argument		9656977						
ANR	9657192	Symbol	error		9656977						
ANR	9657193	Symbol	& fi		9656977						
ANR	9657194	Symbol	argv		9656977						
ANR	9657195	Symbol	FT_Stream_Open		9656977						
ANR	9657196	Symbol	library		9656977						
ANR	9657197	Symbol	& stream		9656977						
ANR	9657198	Symbol	stream		9656977						
ANR	9657199	Symbol	& library		9656977						
ANR	9657200	Symbol	fi . TrackKerns		9656977						
ANR	9657201	Symbol	parse_afm		9656977						
ANR	9657202	Symbol	fi . KernPairs		9656977						
