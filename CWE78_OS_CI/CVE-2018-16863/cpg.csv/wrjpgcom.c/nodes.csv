command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	10730027	File	data/converged/CVE-2018-16863_ghostpdl/wrjpgcom.c								
ANR	10730028	DeclStmt									
ANR	10730029	Decl							extern void	extern void * ( )	malloc
ANR	10730030	DeclStmt									
ANR	10730031	Decl							FILE	FILE *	infile
ANR	10730032	DeclStmt									
ANR	10730033	Decl							FILE	FILE *	outfile
ANR	10730034	Function	read_1_byte	92:0:2597:2728							
ANR	10730035	FunctionDef	read_1_byte ()		10730034	0					
ANR	10730036	CompoundStatement		94:0:2627:2728	10730034	0					
ANR	10730037	IdentifierDeclStatement	int c ;	95:2:2631:2636	10730034	0	True				
ANR	10730038	IdentifierDecl	c		10730034	0					
ANR	10730039	IdentifierDeclType	int		10730034	0					
ANR	10730040	Identifier	c		10730034	1					
ANR	10730041	ExpressionStatement	c = NEXTBYTE ( )	97:2:2641:2655	10730034	1	True				
ANR	10730042	AssignmentExpression	c = NEXTBYTE ( )		10730034	0		=			
ANR	10730043	Identifier	c		10730034	0					
ANR	10730044	CallExpression	NEXTBYTE ( )		10730034	1					
ANR	10730045	Callee	NEXTBYTE		10730034	0					
ANR	10730046	Identifier	NEXTBYTE		10730034	0					
ANR	10730047	ArgumentList			10730034	1					
ANR	10730048	IfStatement	if ( c == EOF )		10730034	2					
ANR	10730049	Condition	c == EOF	98:6:2663:2670	10730034	0	True				
ANR	10730050	EqualityExpression	c == EOF		10730034	0		==			
ANR	10730051	Identifier	c		10730034	0					
ANR	10730052	Identifier	EOF		10730034	1					
ANR	10730053	ExpressionStatement	"ERREXIT ( ""Premature EOF in JPEG file"" )"	99:4:2677:2714	10730034	1	True				
ANR	10730054	CallExpression	"ERREXIT ( ""Premature EOF in JPEG file"" )"		10730034	0					
ANR	10730055	Callee	ERREXIT		10730034	0					
ANR	10730056	Identifier	ERREXIT		10730034	0					
ANR	10730057	ArgumentList	"""Premature EOF in JPEG file"""		10730034	1					
ANR	10730058	Argument	"""Premature EOF in JPEG file"""		10730034	0					
ANR	10730059	PrimaryExpression	"""Premature EOF in JPEG file"""		10730034	0					
ANR	10730060	ReturnStatement	return c ;	100:2:2718:2726	10730034	3	True				
ANR	10730061	Identifier	c		10730034	0					
ANR	10730062	ReturnType	static int		10730034	1					
ANR	10730063	Identifier	read_1_byte		10730034	2					
ANR	10730064	ParameterList			10730034	3					
ANR	10730065	CFGEntryNode	ENTRY		10730034		True				
ANR	10730066	CFGExitNode	EXIT		10730034		True				
ANR	10730067	Symbol	c		10730034						
ANR	10730068	Symbol	NEXTBYTE		10730034						
ANR	10730069	Symbol	EOF		10730034						
ANR	10730070	Function	read_2_bytes	105:0:2833:3107							
ANR	10730071	FunctionDef	read_2_bytes ()		10730070	0					
ANR	10730072	CompoundStatement		107:0:2873:3107	10730070	0					
ANR	10730073	IdentifierDeclStatement	"int c1 , c2 ;"	108:2:2877:2887	10730070	0	True				
ANR	10730074	IdentifierDecl	c1		10730070	0					
ANR	10730075	IdentifierDeclType	int		10730070	0					
ANR	10730076	Identifier	c1		10730070	1					
ANR	10730077	IdentifierDecl	c2		10730070	1					
ANR	10730078	IdentifierDeclType	int		10730070	0					
ANR	10730079	Identifier	c2		10730070	1					
ANR	10730080	ExpressionStatement	c1 = NEXTBYTE ( )	110:2:2892:2907	10730070	1	True				
ANR	10730081	AssignmentExpression	c1 = NEXTBYTE ( )		10730070	0		=			
ANR	10730082	Identifier	c1		10730070	0					
ANR	10730083	CallExpression	NEXTBYTE ( )		10730070	1					
ANR	10730084	Callee	NEXTBYTE		10730070	0					
ANR	10730085	Identifier	NEXTBYTE		10730070	0					
ANR	10730086	ArgumentList			10730070	1					
ANR	10730087	IfStatement	if ( c1 == EOF )		10730070	2					
ANR	10730088	Condition	c1 == EOF	111:6:2915:2923	10730070	0	True				
ANR	10730089	EqualityExpression	c1 == EOF		10730070	0		==			
ANR	10730090	Identifier	c1		10730070	0					
ANR	10730091	Identifier	EOF		10730070	1					
ANR	10730092	ExpressionStatement	"ERREXIT ( ""Premature EOF in JPEG file"" )"	112:4:2930:2967	10730070	1	True				
ANR	10730093	CallExpression	"ERREXIT ( ""Premature EOF in JPEG file"" )"		10730070	0					
ANR	10730094	Callee	ERREXIT		10730070	0					
ANR	10730095	Identifier	ERREXIT		10730070	0					
ANR	10730096	ArgumentList	"""Premature EOF in JPEG file"""		10730070	1					
ANR	10730097	Argument	"""Premature EOF in JPEG file"""		10730070	0					
ANR	10730098	PrimaryExpression	"""Premature EOF in JPEG file"""		10730070	0					
ANR	10730099	ExpressionStatement	c2 = NEXTBYTE ( )	113:2:2971:2986	10730070	3	True				
ANR	10730100	AssignmentExpression	c2 = NEXTBYTE ( )		10730070	0		=			
ANR	10730101	Identifier	c2		10730070	0					
ANR	10730102	CallExpression	NEXTBYTE ( )		10730070	1					
ANR	10730103	Callee	NEXTBYTE		10730070	0					
ANR	10730104	Identifier	NEXTBYTE		10730070	0					
ANR	10730105	ArgumentList			10730070	1					
ANR	10730106	IfStatement	if ( c2 == EOF )		10730070	4					
ANR	10730107	Condition	c2 == EOF	114:6:2994:3002	10730070	0	True				
ANR	10730108	EqualityExpression	c2 == EOF		10730070	0		==			
ANR	10730109	Identifier	c2		10730070	0					
ANR	10730110	Identifier	EOF		10730070	1					
ANR	10730111	ExpressionStatement	"ERREXIT ( ""Premature EOF in JPEG file"" )"	115:4:3009:3046	10730070	1	True				
ANR	10730112	CallExpression	"ERREXIT ( ""Premature EOF in JPEG file"" )"		10730070	0					
ANR	10730113	Callee	ERREXIT		10730070	0					
ANR	10730114	Identifier	ERREXIT		10730070	0					
ANR	10730115	ArgumentList	"""Premature EOF in JPEG file"""		10730070	1					
ANR	10730116	Argument	"""Premature EOF in JPEG file"""		10730070	0					
ANR	10730117	PrimaryExpression	"""Premature EOF in JPEG file"""		10730070	0					
ANR	10730118	ReturnStatement	return ( ( ( unsigned int ) c1 ) << 8 ) + ( ( unsigned int ) c2 ) ;	116:2:3050:3105	10730070	5	True				
ANR	10730119	AdditiveExpression	( ( ( unsigned int ) c1 ) << 8 ) + ( ( unsigned int ) c2 )		10730070	0		+			
ANR	10730120	ShiftExpression	( ( unsigned int ) c1 ) << 8		10730070	0		<<			
ANR	10730121	CastExpression	( unsigned int ) c1		10730070	0					
ANR	10730122	CastTarget	unsigned int		10730070	0					
ANR	10730123	Identifier	c1		10730070	1					
ANR	10730124	PrimaryExpression	8		10730070	1					
ANR	10730125	CastExpression	( unsigned int ) c2		10730070	1					
ANR	10730126	CastTarget	unsigned int		10730070	0					
ANR	10730127	Identifier	c2		10730070	1					
ANR	10730128	ReturnType	static unsigned int		10730070	1					
ANR	10730129	Identifier	read_2_bytes		10730070	2					
ANR	10730130	ParameterList			10730070	3					
ANR	10730131	CFGEntryNode	ENTRY		10730070		True				
ANR	10730132	CFGExitNode	EXIT		10730070		True				
ANR	10730133	Symbol	NEXTBYTE		10730070						
ANR	10730134	Symbol	EOF		10730070						
ANR	10730135	Symbol	c1		10730070						
ANR	10730136	Symbol	c2		10730070						
ANR	10730137	Function	write_1_byte	122:0:3156:3205							
ANR	10730138	FunctionDef	write_1_byte (int c)		10730137	0					
ANR	10730139	CompoundStatement		124:0:3189:3205	10730137	0					
ANR	10730140	ExpressionStatement	PUTBYTE ( c )	125:2:3193:3203	10730137	0	True				
ANR	10730141	CallExpression	PUTBYTE ( c )		10730137	0					
ANR	10730142	Callee	PUTBYTE		10730137	0					
ANR	10730143	Identifier	PUTBYTE		10730137	0					
ANR	10730144	ArgumentList	c		10730137	1					
ANR	10730145	Argument	c		10730137	0					
ANR	10730146	Identifier	c		10730137	0					
ANR	10730147	ReturnType	static void		10730137	1					
ANR	10730148	Identifier	write_1_byte		10730137	2					
ANR	10730149	ParameterList	int c		10730137	3					
ANR	10730150	Parameter	int c	123:14:3182:3186	10730137	0	True				
ANR	10730151	ParameterType	int		10730137	0					
ANR	10730152	Identifier	c		10730137	1					
ANR	10730153	CFGEntryNode	ENTRY		10730137		True				
ANR	10730154	CFGExitNode	EXIT		10730137		True				
ANR	10730155	Symbol	c		10730137						
ANR	10730156	Function	write_2_bytes	128:0:3208:3308							
ANR	10730157	FunctionDef	write_2_bytes (unsigned int val)		10730156	0					
ANR	10730158	CompoundStatement		130:0:3253:3308	10730156	0					
ANR	10730159	ExpressionStatement	PUTBYTE ( ( val >> 8 ) & 0xFF )	131:2:3257:3283	10730156	0	True				
ANR	10730160	CallExpression	PUTBYTE ( ( val >> 8 ) & 0xFF )		10730156	0					
ANR	10730161	Callee	PUTBYTE		10730156	0					
ANR	10730162	Identifier	PUTBYTE		10730156	0					
ANR	10730163	ArgumentList	( val >> 8 ) & 0xFF		10730156	1					
ANR	10730164	Argument	( val >> 8 ) & 0xFF		10730156	0					
ANR	10730165	BitAndExpression	( val >> 8 ) & 0xFF		10730156	0		&			
ANR	10730166	ShiftExpression	val >> 8		10730156	0		>>			
ANR	10730167	Identifier	val		10730156	0					
ANR	10730168	PrimaryExpression	8		10730156	1					
ANR	10730169	PrimaryExpression	0xFF		10730156	1					
ANR	10730170	ExpressionStatement	PUTBYTE ( val & 0xFF )	132:2:3287:3306	10730156	1	True				
ANR	10730171	CallExpression	PUTBYTE ( val & 0xFF )		10730156	0					
ANR	10730172	Callee	PUTBYTE		10730156	0					
ANR	10730173	Identifier	PUTBYTE		10730156	0					
ANR	10730174	ArgumentList	val & 0xFF		10730156	1					
ANR	10730175	Argument	val & 0xFF		10730156	0					
ANR	10730176	BitAndExpression	val & 0xFF		10730156	0		&			
ANR	10730177	Identifier	val		10730156	0					
ANR	10730178	PrimaryExpression	0xFF		10730156	1					
ANR	10730179	ReturnType	static void		10730156	1					
ANR	10730180	Identifier	write_2_bytes		10730156	2					
ANR	10730181	ParameterList	unsigned int val		10730156	3					
ANR	10730182	Parameter	unsigned int val	129:15:3235:3250	10730156	0	True				
ANR	10730183	ParameterType	unsigned int		10730156	0					
ANR	10730184	Identifier	val		10730156	1					
ANR	10730185	CFGEntryNode	ENTRY		10730156		True				
ANR	10730186	CFGExitNode	EXIT		10730156		True				
ANR	10730187	Symbol	val		10730156						
ANR	10730188	Function	write_marker	135:0:3311:3387							
ANR	10730189	FunctionDef	write_marker (int marker)		10730188	0					
ANR	10730190	CompoundStatement		137:0:3349:3387	10730188	0					
ANR	10730191	ExpressionStatement	PUTBYTE ( 0xFF )	138:2:3353:3366	10730188	0	True				
ANR	10730192	CallExpression	PUTBYTE ( 0xFF )		10730188	0					
ANR	10730193	Callee	PUTBYTE		10730188	0					
ANR	10730194	Identifier	PUTBYTE		10730188	0					
ANR	10730195	ArgumentList	0xFF		10730188	1					
ANR	10730196	Argument	0xFF		10730188	0					
ANR	10730197	PrimaryExpression	0xFF		10730188	0					
ANR	10730198	ExpressionStatement	PUTBYTE ( marker )	139:2:3370:3385	10730188	1	True				
ANR	10730199	CallExpression	PUTBYTE ( marker )		10730188	0					
ANR	10730200	Callee	PUTBYTE		10730188	0					
ANR	10730201	Identifier	PUTBYTE		10730188	0					
ANR	10730202	ArgumentList	marker		10730188	1					
ANR	10730203	Argument	marker		10730188	0					
ANR	10730204	Identifier	marker		10730188	0					
ANR	10730205	ReturnType	static void		10730188	1					
ANR	10730206	Identifier	write_marker		10730188	2					
ANR	10730207	ParameterList	int marker		10730188	3					
ANR	10730208	Parameter	int marker	136:14:3337:3346	10730188	0	True				
ANR	10730209	ParameterType	int		10730188	0					
ANR	10730210	Identifier	marker		10730188	1					
ANR	10730211	CFGEntryNode	ENTRY		10730188		True				
ANR	10730212	CFGExitNode	EXIT		10730188		True				
ANR	10730213	Symbol	marker		10730188						
ANR	10730214	Function	copy_rest_of_file	142:0:3390:3489							
ANR	10730215	FunctionDef	copy_rest_of_file ()		10730214	0					
ANR	10730216	CompoundStatement		144:0:3427:3489	10730214	0					
ANR	10730217	IdentifierDeclStatement	int c ;	145:2:3431:3436	10730214	0	True				
ANR	10730218	IdentifierDecl	c		10730214	0					
ANR	10730219	IdentifierDeclType	int		10730214	0					
ANR	10730220	Identifier	c		10730214	1					
ANR	10730221	WhileStatement	while ( ( c = NEXTBYTE ( ) ) != EOF )		10730214	1					
ANR	10730222	Condition	( c = NEXTBYTE ( ) ) != EOF	147:9:3448:3470	10730214	0	True				
ANR	10730223	EqualityExpression	( c = NEXTBYTE ( ) ) != EOF		10730214	0		!=			
ANR	10730224	AssignmentExpression	c = NEXTBYTE ( )		10730214	0		=			
ANR	10730225	Identifier	c		10730214	0					
ANR	10730226	CallExpression	NEXTBYTE ( )		10730214	1					
ANR	10730227	Callee	NEXTBYTE		10730214	0					
ANR	10730228	Identifier	NEXTBYTE		10730214	0					
ANR	10730229	ArgumentList			10730214	1					
ANR	10730230	Identifier	EOF		10730214	1					
ANR	10730231	ExpressionStatement	PUTBYTE ( c )	148:4:3477:3487	10730214	1	True				
ANR	10730232	CallExpression	PUTBYTE ( c )		10730214	0					
ANR	10730233	Callee	PUTBYTE		10730214	0					
ANR	10730234	Identifier	PUTBYTE		10730214	0					
ANR	10730235	ArgumentList	c		10730214	1					
ANR	10730236	Argument	c		10730214	0					
ANR	10730237	Identifier	c		10730214	0					
ANR	10730238	ReturnType	static void		10730214	1					
ANR	10730239	Identifier	copy_rest_of_file		10730214	2					
ANR	10730240	ParameterList			10730214	3					
ANR	10730241	CFGEntryNode	ENTRY		10730214		True				
ANR	10730242	CFGExitNode	EXIT		10730214		True				
ANR	10730243	Symbol	c		10730214						
ANR	10730244	Symbol	NEXTBYTE		10730214						
ANR	10730245	Symbol	EOF		10730214						
ANR	10730246	Function	next_marker	187:0:4904:5434							
ANR	10730247	FunctionDef	next_marker ()		10730246	0					
ANR	10730248	CompoundStatement		189:0:4934:5434	10730246	0					
ANR	10730249	IdentifierDeclStatement	int c ;	190:2:4938:4943	10730246	0	True				
ANR	10730250	IdentifierDecl	c		10730246	0					
ANR	10730251	IdentifierDeclType	int		10730246	0					
ANR	10730252	Identifier	c		10730246	1					
ANR	10730253	IdentifierDeclStatement	int discarded_bytes = 0 ;	191:2:4947:4970	10730246	1	True				
ANR	10730254	IdentifierDecl	discarded_bytes = 0		10730246	0					
ANR	10730255	IdentifierDeclType	int		10730246	0					
ANR	10730256	Identifier	discarded_bytes		10730246	1					
ANR	10730257	AssignmentExpression	discarded_bytes = 0		10730246	2		=			
ANR	10730258	Identifier	discarded_bytes		10730246	0					
ANR	10730259	PrimaryExpression	0		10730246	1					
ANR	10730260	ExpressionStatement	c = read_1_byte ( )	194:2:5027:5044	10730246	2	True				
ANR	10730261	AssignmentExpression	c = read_1_byte ( )		10730246	0		=			
ANR	10730262	Identifier	c		10730246	0					
ANR	10730263	CallExpression	read_1_byte ( )		10730246	1					
ANR	10730264	Callee	read_1_byte		10730246	0					
ANR	10730265	Identifier	read_1_byte		10730246	0					
ANR	10730266	ArgumentList			10730246	1					
ANR	10730267	WhileStatement	while ( c != 0xFF )		10730246	3					
ANR	10730268	Condition	c != 0xFF	195:9:5055:5063	10730246	0	True				
ANR	10730269	EqualityExpression	c != 0xFF		10730246	0		!=			
ANR	10730270	Identifier	c		10730246	0					
ANR	10730271	PrimaryExpression	0xFF		10730246	1					
ANR	10730272	CompoundStatement		7:20:131:131	10730246	1					
ANR	10730273	ExpressionStatement	discarded_bytes ++	196:4:5072:5089	10730246	0	True				
ANR	10730274	PostIncDecOperationExpression	discarded_bytes ++		10730246	0					
ANR	10730275	Identifier	discarded_bytes		10730246	0					
ANR	10730276	IncDec	++		10730246	1					
ANR	10730277	ExpressionStatement	c = read_1_byte ( )	197:4:5095:5112	10730246	1	True				
ANR	10730278	AssignmentExpression	c = read_1_byte ( )		10730246	0		=			
ANR	10730279	Identifier	c		10730246	0					
ANR	10730280	CallExpression	read_1_byte ( )		10730246	1					
ANR	10730281	Callee	read_1_byte		10730246	0					
ANR	10730282	Identifier	read_1_byte		10730246	0					
ANR	10730283	ArgumentList			10730246	1					
ANR	10730284	DoStatement	do		10730246	4					
ANR	10730285	CompoundStatement		14:5:336:336	10730246	0					
ANR	10730286	ExpressionStatement	c = read_1_byte ( )	203:4:5277:5294	10730246	0	True				
ANR	10730287	AssignmentExpression	c = read_1_byte ( )		10730246	0		=			
ANR	10730288	Identifier	c		10730246	0					
ANR	10730289	CallExpression	read_1_byte ( )		10730246	1					
ANR	10730290	Callee	read_1_byte		10730246	0					
ANR	10730291	Identifier	read_1_byte		10730246	0					
ANR	10730292	ArgumentList			10730246	1					
ANR	10730293	Condition	c == 0xFF	204:11:5307:5315	10730246	1	True				
ANR	10730294	EqualityExpression	c == 0xFF		10730246	0		==			
ANR	10730295	Identifier	c		10730246	0					
ANR	10730296	PrimaryExpression	0xFF		10730246	1					
ANR	10730297	IfStatement	if ( discarded_bytes != 0 )		10730246	5					
ANR	10730298	Condition	discarded_bytes != 0	206:6:5326:5345	10730246	0	True				
ANR	10730299	EqualityExpression	discarded_bytes != 0		10730246	0		!=			
ANR	10730300	Identifier	discarded_bytes		10730246	0					
ANR	10730301	PrimaryExpression	0		10730246	1					
ANR	10730302	CompoundStatement		18:28:413:413	10730246	1					
ANR	10730303	ExpressionStatement	"fprintf ( stderr , ""Warning: garbage data found in JPEG file\\n"" )"	207:4:5354:5415	10730246	0	True				
ANR	10730304	CallExpression	"fprintf ( stderr , ""Warning: garbage data found in JPEG file\\n"" )"		10730246	0					
ANR	10730305	Callee	fprintf		10730246	0					
ANR	10730306	Identifier	fprintf		10730246	0					
ANR	10730307	ArgumentList	stderr		10730246	1					
ANR	10730308	Argument	stderr		10730246	0					
ANR	10730309	Identifier	stderr		10730246	0					
ANR	10730310	Argument	"""Warning: garbage data found in JPEG file\\n"""		10730246	1					
ANR	10730311	PrimaryExpression	"""Warning: garbage data found in JPEG file\\n"""		10730246	0					
ANR	10730312	ReturnStatement	return c ;	210:2:5424:5432	10730246	6	True				
ANR	10730313	Identifier	c		10730246	0					
ANR	10730314	ReturnType	static int		10730246	1					
ANR	10730315	Identifier	next_marker		10730246	2					
ANR	10730316	ParameterList			10730246	3					
ANR	10730317	CFGEntryNode	ENTRY		10730246		True				
ANR	10730318	CFGExitNode	EXIT		10730246		True				
ANR	10730319	Symbol	c		10730246						
ANR	10730320	Symbol	read_1_byte		10730246						
ANR	10730321	Symbol	discarded_bytes		10730246						
ANR	10730322	Symbol	stderr		10730246						
ANR	10730323	Function	first_marker	222:0:5771:5935							
ANR	10730324	FunctionDef	first_marker ()		10730323	0					
ANR	10730325	CompoundStatement		224:0:5802:5935	10730323	0					
ANR	10730326	IdentifierDeclStatement	"int c1 , c2 ;"	225:2:5806:5816	10730323	0	True				
ANR	10730327	IdentifierDecl	c1		10730323	0					
ANR	10730328	IdentifierDeclType	int		10730323	0					
ANR	10730329	Identifier	c1		10730323	1					
ANR	10730330	IdentifierDecl	c2		10730323	1					
ANR	10730331	IdentifierDeclType	int		10730323	0					
ANR	10730332	Identifier	c2		10730323	1					
ANR	10730333	ExpressionStatement	c1 = NEXTBYTE ( )	227:2:5821:5836	10730323	1	True				
ANR	10730334	AssignmentExpression	c1 = NEXTBYTE ( )		10730323	0		=			
ANR	10730335	Identifier	c1		10730323	0					
ANR	10730336	CallExpression	NEXTBYTE ( )		10730323	1					
ANR	10730337	Callee	NEXTBYTE		10730323	0					
ANR	10730338	Identifier	NEXTBYTE		10730323	0					
ANR	10730339	ArgumentList			10730323	1					
ANR	10730340	ExpressionStatement	c2 = NEXTBYTE ( )	228:2:5840:5855	10730323	2	True				
ANR	10730341	AssignmentExpression	c2 = NEXTBYTE ( )		10730323	0		=			
ANR	10730342	Identifier	c2		10730323	0					
ANR	10730343	CallExpression	NEXTBYTE ( )		10730323	1					
ANR	10730344	Callee	NEXTBYTE		10730323	0					
ANR	10730345	Identifier	NEXTBYTE		10730323	0					
ANR	10730346	ArgumentList			10730323	1					
ANR	10730347	IfStatement	if ( c1 != 0xFF || c2 != M_SOI )		10730323	3					
ANR	10730348	Condition	c1 != 0xFF || c2 != M_SOI	229:6:5863:5887	10730323	0	True				
ANR	10730349	OrExpression	c1 != 0xFF || c2 != M_SOI		10730323	0		||			
ANR	10730350	EqualityExpression	c1 != 0xFF		10730323	0		!=			
ANR	10730351	Identifier	c1		10730323	0					
ANR	10730352	PrimaryExpression	0xFF		10730323	1					
ANR	10730353	EqualityExpression	c2 != M_SOI		10730323	1		!=			
ANR	10730354	Identifier	c2		10730323	0					
ANR	10730355	Identifier	M_SOI		10730323	1					
ANR	10730356	ExpressionStatement	"ERREXIT ( ""Not a JPEG file"" )"	230:4:5894:5920	10730323	1	True				
ANR	10730357	CallExpression	"ERREXIT ( ""Not a JPEG file"" )"		10730323	0					
ANR	10730358	Callee	ERREXIT		10730323	0					
ANR	10730359	Identifier	ERREXIT		10730323	0					
ANR	10730360	ArgumentList	"""Not a JPEG file"""		10730323	1					
ANR	10730361	Argument	"""Not a JPEG file"""		10730323	0					
ANR	10730362	PrimaryExpression	"""Not a JPEG file"""		10730323	0					
ANR	10730363	ReturnStatement	return c2 ;	231:2:5924:5933	10730323	4	True				
ANR	10730364	Identifier	c2		10730323	0					
ANR	10730365	ReturnType	static int		10730323	1					
ANR	10730366	Identifier	first_marker		10730323	2					
ANR	10730367	ParameterList			10730323	3					
ANR	10730368	CFGEntryNode	ENTRY		10730323		True				
ANR	10730369	CFGExitNode	EXIT		10730323		True				
ANR	10730370	Symbol	M_SOI		10730323						
ANR	10730371	Symbol	NEXTBYTE		10730323						
ANR	10730372	Symbol	c1		10730323						
ANR	10730373	Symbol	c2		10730323						
ANR	10730374	Function	copy_variable	244:0:6314:6772							
ANR	10730375	FunctionDef	copy_variable ()		10730374	0					
ANR	10730376	CompoundStatement		247:0:6409:6772	10730374	0					
ANR	10730377	IdentifierDeclStatement	unsigned int length ;	248:2:6413:6432	10730374	0	True				
ANR	10730378	IdentifierDecl	length		10730374	0					
ANR	10730379	IdentifierDeclType	unsigned int		10730374	0					
ANR	10730380	Identifier	length		10730374	1					
ANR	10730381	ExpressionStatement	length = read_2_bytes ( )	251:2:6483:6506	10730374	1	True				
ANR	10730382	AssignmentExpression	length = read_2_bytes ( )		10730374	0		=			
ANR	10730383	Identifier	length		10730374	0					
ANR	10730384	CallExpression	read_2_bytes ( )		10730374	1					
ANR	10730385	Callee	read_2_bytes		10730374	0					
ANR	10730386	Identifier	read_2_bytes		10730374	0					
ANR	10730387	ArgumentList			10730374	1					
ANR	10730388	ExpressionStatement	write_2_bytes ( length )	252:2:6510:6531	10730374	2	True				
ANR	10730389	CallExpression	write_2_bytes ( length )		10730374	0					
ANR	10730390	Callee	write_2_bytes		10730374	0					
ANR	10730391	Identifier	write_2_bytes		10730374	0					
ANR	10730392	ArgumentList	length		10730374	1					
ANR	10730393	Argument	length		10730374	0					
ANR	10730394	Identifier	length		10730374	0					
ANR	10730395	IfStatement	if ( length < 2 )		10730374	3					
ANR	10730396	Condition	length < 2	254:6:6593:6602	10730374	0	True				
ANR	10730397	RelationalExpression	length < 2		10730374	0		<			
ANR	10730398	Identifier	length		10730374	0					
ANR	10730399	PrimaryExpression	2		10730374	1					
ANR	10730400	ExpressionStatement	"ERREXIT ( ""Erroneous JPEG marker length"" )"	255:4:6609:6648	10730374	1	True				
ANR	10730401	CallExpression	"ERREXIT ( ""Erroneous JPEG marker length"" )"		10730374	0					
ANR	10730402	Callee	ERREXIT		10730374	0					
ANR	10730403	Identifier	ERREXIT		10730374	0					
ANR	10730404	ArgumentList	"""Erroneous JPEG marker length"""		10730374	1					
ANR	10730405	Argument	"""Erroneous JPEG marker length"""		10730374	0					
ANR	10730406	PrimaryExpression	"""Erroneous JPEG marker length"""		10730374	0					
ANR	10730407	ExpressionStatement	length -= 2	256:2:6652:6663	10730374	4	True				
ANR	10730408	AssignmentExpression	length -= 2		10730374	0		-=			
ANR	10730409	Identifier	length		10730374	0					
ANR	10730410	PrimaryExpression	2		10730374	1					
ANR	10730411	WhileStatement	while ( length > 0 )		10730374	5					
ANR	10730412	Condition	length > 0	258:9:6707:6716	10730374	0	True				
ANR	10730413	RelationalExpression	length > 0		10730374	0		>			
ANR	10730414	Identifier	length		10730374	0					
ANR	10730415	PrimaryExpression	0		10730374	1					
ANR	10730416	CompoundStatement		12:21:309:309	10730374	1					
ANR	10730417	ExpressionStatement	write_1_byte ( read_1_byte ( ) )	259:4:6725:6752	10730374	0	True				
ANR	10730418	CallExpression	write_1_byte ( read_1_byte ( ) )		10730374	0					
ANR	10730419	Callee	write_1_byte		10730374	0					
ANR	10730420	Identifier	write_1_byte		10730374	0					
ANR	10730421	ArgumentList	read_1_byte ( )		10730374	1					
ANR	10730422	Argument	read_1_byte ( )		10730374	0					
ANR	10730423	CallExpression	read_1_byte ( )		10730374	0					
ANR	10730424	Callee	read_1_byte		10730374	0					
ANR	10730425	Identifier	read_1_byte		10730374	0					
ANR	10730426	ArgumentList			10730374	1					
ANR	10730427	ExpressionStatement	length --	260:4:6758:6766	10730374	1	True				
ANR	10730428	PostIncDecOperationExpression	length --		10730374	0					
ANR	10730429	Identifier	length		10730374	0					
ANR	10730430	IncDec	--		10730374	1					
ANR	10730431	ReturnType	static void		10730374	1					
ANR	10730432	Identifier	copy_variable		10730374	2					
ANR	10730433	ParameterList			10730374	3					
ANR	10730434	CFGEntryNode	ENTRY		10730374		True				
ANR	10730435	CFGExitNode	EXIT		10730374		True				
ANR	10730436	Symbol	read_2_bytes		10730374						
ANR	10730437	Symbol	read_1_byte		10730374						
ANR	10730438	Symbol	length		10730374						
ANR	10730439	Function	skip_variable	264:0:6775:7211							
ANR	10730440	FunctionDef	skip_variable ()		10730439	0					
ANR	10730441	CompoundStatement		267:0:6875:7211	10730439	0					
ANR	10730442	IdentifierDeclStatement	unsigned int length ;	268:2:6879:6898	10730439	0	True				
ANR	10730443	IdentifierDecl	length		10730439	0					
ANR	10730444	IdentifierDeclType	unsigned int		10730439	0					
ANR	10730445	Identifier	length		10730439	1					
ANR	10730446	ExpressionStatement	length = read_2_bytes ( )	271:2:6949:6972	10730439	1	True				
ANR	10730447	AssignmentExpression	length = read_2_bytes ( )		10730439	0		=			
ANR	10730448	Identifier	length		10730439	0					
ANR	10730449	CallExpression	read_2_bytes ( )		10730439	1					
ANR	10730450	Callee	read_2_bytes		10730439	0					
ANR	10730451	Identifier	read_2_bytes		10730439	0					
ANR	10730452	ArgumentList			10730439	1					
ANR	10730453	IfStatement	if ( length < 2 )		10730439	2					
ANR	10730454	Condition	length < 2	273:6:7034:7043	10730439	0	True				
ANR	10730455	RelationalExpression	length < 2		10730439	0		<			
ANR	10730456	Identifier	length		10730439	0					
ANR	10730457	PrimaryExpression	2		10730439	1					
ANR	10730458	ExpressionStatement	"ERREXIT ( ""Erroneous JPEG marker length"" )"	274:4:7050:7089	10730439	1	True				
ANR	10730459	CallExpression	"ERREXIT ( ""Erroneous JPEG marker length"" )"		10730439	0					
ANR	10730460	Callee	ERREXIT		10730439	0					
ANR	10730461	Identifier	ERREXIT		10730439	0					
ANR	10730462	ArgumentList	"""Erroneous JPEG marker length"""		10730439	1					
ANR	10730463	Argument	"""Erroneous JPEG marker length"""		10730439	0					
ANR	10730464	PrimaryExpression	"""Erroneous JPEG marker length"""		10730439	0					
ANR	10730465	ExpressionStatement	length -= 2	275:2:7093:7104	10730439	3	True				
ANR	10730466	AssignmentExpression	length -= 2		10730439	0		-=			
ANR	10730467	Identifier	length		10730439	0					
ANR	10730468	PrimaryExpression	2		10730439	1					
ANR	10730469	WhileStatement	while ( length > 0 )		10730439	4					
ANR	10730470	Condition	length > 0	277:9:7153:7162	10730439	0	True				
ANR	10730471	RelationalExpression	length > 0		10730439	0		>			
ANR	10730472	Identifier	length		10730439	0					
ANR	10730473	PrimaryExpression	0		10730439	1					
ANR	10730474	CompoundStatement		11:21:289:289	10730439	1					
ANR	10730475	ExpressionStatement	( void ) read_1_byte ( )	278:4:7171:7191	10730439	0	True				
ANR	10730476	CastExpression	( void ) read_1_byte ( )		10730439	0					
ANR	10730477	CastTarget	void		10730439	0					
ANR	10730478	CallExpression	read_1_byte ( )		10730439	1					
ANR	10730479	Callee	read_1_byte		10730439	0					
ANR	10730480	Identifier	read_1_byte		10730439	0					
ANR	10730481	ArgumentList			10730439	1					
ANR	10730482	ExpressionStatement	length --	279:4:7197:7205	10730439	1	True				
ANR	10730483	PostIncDecOperationExpression	length --		10730439	0					
ANR	10730484	Identifier	length		10730439	0					
ANR	10730485	IncDec	--		10730439	1					
ANR	10730486	ReturnType	static void		10730439	1					
ANR	10730487	Identifier	skip_variable		10730439	2					
ANR	10730488	ParameterList			10730439	3					
ANR	10730489	CFGEntryNode	ENTRY		10730439		True				
ANR	10730490	CFGExitNode	EXIT		10730439		True				
ANR	10730491	Symbol	read_2_bytes		10730439						
ANR	10730492	Symbol	length		10730439						
ANR	10730493	Function	scan_JPEG_header	289:0:7350:9076							
ANR	10730494	FunctionDef	scan_JPEG_header (int keep_COM)		10730493	0					
ANR	10730495	CompoundStatement		291:0:7393:9076	10730493	0					
ANR	10730496	IdentifierDeclStatement	int marker ;	292:2:7397:7407	10730493	0	True				
ANR	10730497	IdentifierDecl	marker		10730493	0					
ANR	10730498	IdentifierDeclType	int		10730493	0					
ANR	10730499	Identifier	marker		10730493	1					
ANR	10730500	IfStatement	if ( first_marker ( ) != M_SOI )		10730493	1					
ANR	10730501	Condition	first_marker ( ) != M_SOI	295:6:7452:7474	10730493	0	True				
ANR	10730502	EqualityExpression	first_marker ( ) != M_SOI		10730493	0		!=			
ANR	10730503	CallExpression	first_marker ( )		10730493	0					
ANR	10730504	Callee	first_marker		10730493	0					
ANR	10730505	Identifier	first_marker		10730493	0					
ANR	10730506	ArgumentList			10730493	1					
ANR	10730507	Identifier	M_SOI		10730493	1					
ANR	10730508	ExpressionStatement	"ERREXIT ( ""Expected SOI marker first"" )"	296:4:7481:7517	10730493	1	True				
ANR	10730509	CallExpression	"ERREXIT ( ""Expected SOI marker first"" )"		10730493	0					
ANR	10730510	Callee	ERREXIT		10730493	0					
ANR	10730511	Identifier	ERREXIT		10730493	0					
ANR	10730512	ArgumentList	"""Expected SOI marker first"""		10730493	1					
ANR	10730513	Argument	"""Expected SOI marker first"""		10730493	0					
ANR	10730514	PrimaryExpression	"""Expected SOI marker first"""		10730493	0					
ANR	10730515	ExpressionStatement	write_marker ( M_SOI )	297:2:7521:7540	10730493	2	True				
ANR	10730516	CallExpression	write_marker ( M_SOI )		10730493	0					
ANR	10730517	Callee	write_marker		10730493	0					
ANR	10730518	Identifier	write_marker		10730493	0					
ANR	10730519	ArgumentList	M_SOI		10730493	1					
ANR	10730520	Argument	M_SOI		10730493	0					
ANR	10730521	Identifier	M_SOI		10730493	0					
ANR	10730522	ForStatement	for ( ; ; )		10730493	3					
ANR	10730523	CompoundStatement		10:11:216:216	10730493	0					
ANR	10730524	ExpressionStatement	marker = next_marker ( )	301:4:7616:7638	10730493	0	True				
ANR	10730525	AssignmentExpression	marker = next_marker ( )		10730493	0		=			
ANR	10730526	Identifier	marker		10730493	0					
ANR	10730527	CallExpression	next_marker ( )		10730493	1					
ANR	10730528	Callee	next_marker		10730493	0					
ANR	10730529	Identifier	next_marker		10730493	0					
ANR	10730530	ArgumentList			10730493	1					
ANR	10730531	SwitchStatement	switch ( marker )		10730493	1					
ANR	10730532	Condition	marker	302:12:7652:7657	10730493	0	True				
ANR	10730533	Identifier	marker		10730493	0					
ANR	10730534	CompoundStatement		12:20:266:266	10730493	1					
ANR	10730535	Label	case M_SOF0 :	306:4:7812:7823	10730493	0	True				
ANR	10730536	Identifier	M_SOF0		10730493	0					
ANR	10730537	Label	case M_SOF1 :	307:4:7845:7856	10730493	1	True				
ANR	10730538	Identifier	M_SOF1		10730493	0					
ANR	10730539	Label	case M_SOF2 :	308:4:7898:7909	10730493	2	True				
ANR	10730540	Identifier	M_SOF2		10730493	0					
ANR	10730541	Label	case M_SOF3 :	309:4:7943:7954	10730493	3	True				
ANR	10730542	Identifier	M_SOF3		10730493	0					
ANR	10730543	Label	case M_SOF5 :	310:4:7985:7996	10730493	4	True				
ANR	10730544	Identifier	M_SOF5		10730493	0					
ANR	10730545	Label	case M_SOF6 :	311:4:8042:8053	10730493	5	True				
ANR	10730546	Identifier	M_SOF6		10730493	0					
ANR	10730547	Label	case M_SOF7 :	312:4:8100:8111	10730493	6	True				
ANR	10730548	Identifier	M_SOF7		10730493	0					
ANR	10730549	Label	case M_SOF9 :	313:4:8155:8166	10730493	7	True				
ANR	10730550	Identifier	M_SOF9		10730493	0					
ANR	10730551	Label	case M_SOF10 :	314:4:8211:8223	10730493	8	True				
ANR	10730552	Identifier	M_SOF10		10730493	0					
ANR	10730553	Label	case M_SOF11 :	315:4:8260:8272	10730493	9	True				
ANR	10730554	Identifier	M_SOF11		10730493	0					
ANR	10730555	Label	case M_SOF13 :	316:4:8306:8318	10730493	10	True				
ANR	10730556	Identifier	M_SOF13		10730493	0					
ANR	10730557	Label	case M_SOF14 :	317:4:8367:8379	10730493	11	True				
ANR	10730558	Identifier	M_SOF14		10730493	0					
ANR	10730559	Label	case M_SOF15 :	318:4:8429:8441	10730493	12	True				
ANR	10730560	Identifier	M_SOF15		10730493	0					
ANR	10730561	ReturnStatement	return marker ;	319:6:8490:8503	10730493	13	True				
ANR	10730562	Identifier	marker		10730493	0					
ANR	10730563	Label	case M_SOS :	321:4:8510:8520	10730493	14	True				
ANR	10730564	Identifier	M_SOS		10730493	0					
ANR	10730565	ExpressionStatement	"ERREXIT ( ""SOS without prior SOFn"" )"	322:6:8578:8611	10730493	15	True				
ANR	10730566	CallExpression	"ERREXIT ( ""SOS without prior SOFn"" )"		10730493	0					
ANR	10730567	Callee	ERREXIT		10730493	0					
ANR	10730568	Identifier	ERREXIT		10730493	0					
ANR	10730569	ArgumentList	"""SOS without prior SOFn"""		10730493	1					
ANR	10730570	Argument	"""SOS without prior SOFn"""		10730493	0					
ANR	10730571	PrimaryExpression	"""SOS without prior SOFn"""		10730493	0					
ANR	10730572	BreakStatement	break ;	323:6:8619:8624	10730493	16	True				
ANR	10730573	Label	case M_EOI :	325:4:8631:8641	10730493	17	True				
ANR	10730574	Identifier	M_EOI		10730493	0					
ANR	10730575	ReturnStatement	return marker ;	326:6:8696:8709	10730493	18	True				
ANR	10730576	Identifier	marker		10730493	0					
ANR	10730577	Label	case M_COM :	328:4:8716:8726	10730493	19	True				
ANR	10730578	Identifier	M_COM		10730493	0					
ANR	10730579	IfStatement	if ( keep_COM )		10730493	20					
ANR	10730580	Condition	keep_COM	329:10:8782:8789	10730493	0	True				
ANR	10730581	Identifier	keep_COM		10730493	0					
ANR	10730582	CompoundStatement		39:20:1398:1398	10730493	1					
ANR	10730583	ExpressionStatement	write_marker ( marker )	330:1:8795:8815	10730493	0	True				
ANR	10730584	CallExpression	write_marker ( marker )		10730493	0					
ANR	10730585	Callee	write_marker		10730493	0					
ANR	10730586	Identifier	write_marker		10730493	0					
ANR	10730587	ArgumentList	marker		10730493	1					
ANR	10730588	Argument	marker		10730493	0					
ANR	10730589	Identifier	marker		10730493	0					
ANR	10730590	ExpressionStatement	copy_variable ( )	331:1:8818:8833	10730493	1	True				
ANR	10730591	CallExpression	copy_variable ( )		10730493	0					
ANR	10730592	Callee	copy_variable		10730493	0					
ANR	10730593	Identifier	copy_variable		10730493	0					
ANR	10730594	ArgumentList			10730493	1					
ANR	10730595	ElseStatement	else		10730493	0					
ANR	10730596	CompoundStatement		42:13:1454:1454	10730493	0					
ANR	10730597	ExpressionStatement	skip_variable ( )	333:1:8851:8866	10730493	0	True				
ANR	10730598	CallExpression	skip_variable ( )		10730493	0					
ANR	10730599	Callee	skip_variable		10730493	0					
ANR	10730600	Identifier	skip_variable		10730493	0					
ANR	10730601	ArgumentList			10730493	1					
ANR	10730602	BreakStatement	break ;	335:6:8882:8887	10730493	21	True				
ANR	10730603	Label	default :	337:4:8894:8901	10730493	22	True				
ANR	10730604	Identifier	default		10730493	0					
ANR	10730605	ExpressionStatement	write_marker ( marker )	338:6:8948:8968	10730493	23	True				
ANR	10730606	CallExpression	write_marker ( marker )		10730493	0					
ANR	10730607	Callee	write_marker		10730493	0					
ANR	10730608	Identifier	write_marker		10730493	0					
ANR	10730609	ArgumentList	marker		10730493	1					
ANR	10730610	Argument	marker		10730493	0					
ANR	10730611	Identifier	marker		10730493	0					
ANR	10730612	ExpressionStatement	copy_variable ( )	339:6:8976:8991	10730493	24	True				
ANR	10730613	CallExpression	copy_variable ( )		10730493	0					
ANR	10730614	Callee	copy_variable		10730493	0					
ANR	10730615	Identifier	copy_variable		10730493	0					
ANR	10730616	ArgumentList			10730493	1					
ANR	10730617	BreakStatement	break ;	340:6:9044:9049	10730493	25	True				
ANR	10730618	ReturnType	static int		10730493	1					
ANR	10730619	Identifier	scan_JPEG_header		10730493	2					
ANR	10730620	ParameterList	int keep_COM		10730493	3					
ANR	10730621	Parameter	int keep_COM	290:18:7379:7390	10730493	0	True				
ANR	10730622	ParameterType	int		10730493	0					
ANR	10730623	Identifier	keep_COM		10730493	1					
ANR	10730624	CFGEntryNode	ENTRY		10730493		True				
ANR	10730625	CFGExitNode	EXIT		10730493		True				
ANR	10730626	InfiniteForNode	true		10730493		True				
ANR	10730627	Symbol	next_marker		10730493						
ANR	10730628	Symbol	M_SOI		10730493						
ANR	10730629	Symbol	keep_COM		10730493						
ANR	10730630	Symbol	first_marker		10730493						
ANR	10730631	Symbol	marker		10730493						
ANR	10730632	DeclStmt									
ANR	10730633	Decl							const char	const char *	progname
ANR	10730634	Function	usage	351:0:9183:10457							
ANR	10730635	FunctionDef	usage ()		10730634	0					
ANR	10730636	CompoundStatement		354:0:9246:10457	10730634	0					
ANR	10730637	ExpressionStatement	"fprintf ( stderr , ""wrjpgcom inserts a textual comment in a JPEG file.\\n"" )"	355:2:9250:9321	10730634	0	True				
ANR	10730638	CallExpression	"fprintf ( stderr , ""wrjpgcom inserts a textual comment in a JPEG file.\\n"" )"		10730634	0					
ANR	10730639	Callee	fprintf		10730634	0					
ANR	10730640	Identifier	fprintf		10730634	0					
ANR	10730641	ArgumentList	stderr		10730634	1					
ANR	10730642	Argument	stderr		10730634	0					
ANR	10730643	Identifier	stderr		10730634	0					
ANR	10730644	Argument	"""wrjpgcom inserts a textual comment in a JPEG file.\\n"""		10730634	1					
ANR	10730645	PrimaryExpression	"""wrjpgcom inserts a textual comment in a JPEG file.\\n"""		10730634	0					
ANR	10730646	ExpressionStatement	"fprintf ( stderr , ""You can add to or replace any existing comment(s).\\n"" )"	356:2:9325:9396	10730634	1	True				
ANR	10730647	CallExpression	"fprintf ( stderr , ""You can add to or replace any existing comment(s).\\n"" )"		10730634	0					
ANR	10730648	Callee	fprintf		10730634	0					
ANR	10730649	Identifier	fprintf		10730634	0					
ANR	10730650	ArgumentList	stderr		10730634	1					
ANR	10730651	Argument	stderr		10730634	0					
ANR	10730652	Identifier	stderr		10730634	0					
ANR	10730653	Argument	"""You can add to or replace any existing comment(s).\\n"""		10730634	1					
ANR	10730654	PrimaryExpression	"""You can add to or replace any existing comment(s).\\n"""		10730634	0					
ANR	10730655	ExpressionStatement	"fprintf ( stderr , ""Usage: %s [switches] "" , progname )"	358:2:9401:9451	10730634	2	True				
ANR	10730656	CallExpression	"fprintf ( stderr , ""Usage: %s [switches] "" , progname )"		10730634	0					
ANR	10730657	Callee	fprintf		10730634	0					
ANR	10730658	Identifier	fprintf		10730634	0					
ANR	10730659	ArgumentList	stderr		10730634	1					
ANR	10730660	Argument	stderr		10730634	0					
ANR	10730661	Identifier	stderr		10730634	0					
ANR	10730662	Argument	"""Usage: %s [switches] """		10730634	1					
ANR	10730663	PrimaryExpression	"""Usage: %s [switches] """		10730634	0					
ANR	10730664	Argument	progname		10730634	2					
ANR	10730665	Identifier	progname		10730634	0					
ANR	10730666	ExpressionStatement	"fprintf ( stderr , ""inputfile outputfile\\n"" )"	360:2:9483:9524	10730634	3	True				
ANR	10730667	CallExpression	"fprintf ( stderr , ""inputfile outputfile\\n"" )"		10730634	0					
ANR	10730668	Callee	fprintf		10730634	0					
ANR	10730669	Identifier	fprintf		10730634	0					
ANR	10730670	ArgumentList	stderr		10730634	1					
ANR	10730671	Argument	stderr		10730634	0					
ANR	10730672	Identifier	stderr		10730634	0					
ANR	10730673	Argument	"""inputfile outputfile\\n"""		10730634	1					
ANR	10730674	PrimaryExpression	"""inputfile outputfile\\n"""		10730634	0					
ANR	10730675	ExpressionStatement	"fprintf ( stderr , ""Switches (names may be abbreviated):\\n"" )"	365:2:9578:9635	10730634	4	True				
ANR	10730676	CallExpression	"fprintf ( stderr , ""Switches (names may be abbreviated):\\n"" )"		10730634	0					
ANR	10730677	Callee	fprintf		10730634	0					
ANR	10730678	Identifier	fprintf		10730634	0					
ANR	10730679	ArgumentList	stderr		10730634	1					
ANR	10730680	Argument	stderr		10730634	0					
ANR	10730681	Identifier	stderr		10730634	0					
ANR	10730682	Argument	"""Switches (names may be abbreviated):\\n"""		10730634	1					
ANR	10730683	PrimaryExpression	"""Switches (names may be abbreviated):\\n"""		10730634	0					
ANR	10730684	ExpressionStatement	"fprintf ( stderr , ""  -replace         Delete any existing comments\\n"" )"	366:2:9639:9707	10730634	5	True				
ANR	10730685	CallExpression	"fprintf ( stderr , ""  -replace         Delete any existing comments\\n"" )"		10730634	0					
ANR	10730686	Callee	fprintf		10730634	0					
ANR	10730687	Identifier	fprintf		10730634	0					
ANR	10730688	ArgumentList	stderr		10730634	1					
ANR	10730689	Argument	stderr		10730634	0					
ANR	10730690	Identifier	stderr		10730634	0					
ANR	10730691	Argument	"""  -replace         Delete any existing comments\\n"""		10730634	1					
ANR	10730692	PrimaryExpression	"""  -replace         Delete any existing comments\\n"""		10730634	0					
ANR	10730693	ExpressionStatement	"fprintf ( stderr , ""  -comment \\""text\\""  Insert comment with given text\\n"" )"	367:2:9711:9783	10730634	6	True				
ANR	10730694	CallExpression	"fprintf ( stderr , ""  -comment \\""text\\""  Insert comment with given text\\n"" )"		10730634	0					
ANR	10730695	Callee	fprintf		10730634	0					
ANR	10730696	Identifier	fprintf		10730634	0					
ANR	10730697	ArgumentList	stderr		10730634	1					
ANR	10730698	Argument	stderr		10730634	0					
ANR	10730699	Identifier	stderr		10730634	0					
ANR	10730700	Argument	"""  -comment \\""text\\""  Insert comment with given text\\n"""		10730634	1					
ANR	10730701	PrimaryExpression	"""  -comment \\""text\\""  Insert comment with given text\\n"""		10730634	0					
ANR	10730702	ExpressionStatement	"fprintf ( stderr , ""  -cfile name      Read comment from named file\\n"" )"	368:2:9787:9855	10730634	7	True				
ANR	10730703	CallExpression	"fprintf ( stderr , ""  -cfile name      Read comment from named file\\n"" )"		10730634	0					
ANR	10730704	Callee	fprintf		10730634	0					
ANR	10730705	Identifier	fprintf		10730634	0					
ANR	10730706	ArgumentList	stderr		10730634	1					
ANR	10730707	Argument	stderr		10730634	0					
ANR	10730708	Identifier	stderr		10730634	0					
ANR	10730709	Argument	"""  -cfile name      Read comment from named file\\n"""		10730634	1					
ANR	10730710	PrimaryExpression	"""  -cfile name      Read comment from named file\\n"""		10730634	0					
ANR	10730711	ExpressionStatement	"fprintf ( stderr , ""Notice that you must put quotes around the comment text\\n"" )"	369:2:9859:9935	10730634	8	True				
ANR	10730712	CallExpression	"fprintf ( stderr , ""Notice that you must put quotes around the comment text\\n"" )"		10730634	0					
ANR	10730713	Callee	fprintf		10730634	0					
ANR	10730714	Identifier	fprintf		10730634	0					
ANR	10730715	ArgumentList	stderr		10730634	1					
ANR	10730716	Argument	stderr		10730634	0					
ANR	10730717	Identifier	stderr		10730634	0					
ANR	10730718	Argument	"""Notice that you must put quotes around the comment text\\n"""		10730634	1					
ANR	10730719	PrimaryExpression	"""Notice that you must put quotes around the comment text\\n"""		10730634	0					
ANR	10730720	ExpressionStatement	"fprintf ( stderr , ""when you use -comment.\\n"" )"	370:2:9939:9982	10730634	9	True				
ANR	10730721	CallExpression	"fprintf ( stderr , ""when you use -comment.\\n"" )"		10730634	0					
ANR	10730722	Callee	fprintf		10730634	0					
ANR	10730723	Identifier	fprintf		10730634	0					
ANR	10730724	ArgumentList	stderr		10730634	1					
ANR	10730725	Argument	stderr		10730634	0					
ANR	10730726	Identifier	stderr		10730634	0					
ANR	10730727	Argument	"""when you use -comment.\\n"""		10730634	1					
ANR	10730728	PrimaryExpression	"""when you use -comment.\\n"""		10730634	0					
ANR	10730729	ExpressionStatement	"fprintf ( stderr , ""If you do not give either -comment or -cfile on the command line,\\n"" )"	371:2:9986:10072	10730634	10	True				
ANR	10730730	CallExpression	"fprintf ( stderr , ""If you do not give either -comment or -cfile on the command line,\\n"" )"		10730634	0					
ANR	10730731	Callee	fprintf		10730634	0					
ANR	10730732	Identifier	fprintf		10730634	0					
ANR	10730733	ArgumentList	stderr		10730634	1					
ANR	10730734	Argument	stderr		10730634	0					
ANR	10730735	Identifier	stderr		10730634	0					
ANR	10730736	Argument	"""If you do not give either -comment or -cfile on the command line,\\n"""		10730634	1					
ANR	10730737	PrimaryExpression	"""If you do not give either -comment or -cfile on the command line,\\n"""		10730634	0					
ANR	10730738	ExpressionStatement	"fprintf ( stderr , ""then the comment text is read from standard input.\\n"" )"	372:2:10076:10147	10730634	11	True				
ANR	10730739	CallExpression	"fprintf ( stderr , ""then the comment text is read from standard input.\\n"" )"		10730634	0					
ANR	10730740	Callee	fprintf		10730634	0					
ANR	10730741	Identifier	fprintf		10730634	0					
ANR	10730742	ArgumentList	stderr		10730634	1					
ANR	10730743	Argument	stderr		10730634	0					
ANR	10730744	Identifier	stderr		10730634	0					
ANR	10730745	Argument	"""then the comment text is read from standard input.\\n"""		10730634	1					
ANR	10730746	PrimaryExpression	"""then the comment text is read from standard input.\\n"""		10730634	0					
ANR	10730747	ExpressionStatement	"fprintf ( stderr , ""It can be multiple lines, up to %u characters total.\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	373:2:10151:10258	10730634	12	True				
ANR	10730748	CallExpression	"fprintf ( stderr , ""It can be multiple lines, up to %u characters total.\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		10730634	0					
ANR	10730749	Callee	fprintf		10730634	0					
ANR	10730750	Identifier	fprintf		10730634	0					
ANR	10730751	ArgumentList	stderr		10730634	1					
ANR	10730752	Argument	stderr		10730634	0					
ANR	10730753	Identifier	stderr		10730634	0					
ANR	10730754	Argument	"""It can be multiple lines, up to %u characters total.\\n"""		10730634	1					
ANR	10730755	PrimaryExpression	"""It can be multiple lines, up to %u characters total.\\n"""		10730634	0					
ANR	10730756	Argument	( unsigned int ) MAX_COM_LENGTH		10730634	2					
ANR	10730757	CastExpression	( unsigned int ) MAX_COM_LENGTH		10730634	0					
ANR	10730758	CastTarget	unsigned int		10730634	0					
ANR	10730759	Identifier	MAX_COM_LENGTH		10730634	1					
ANR	10730760	ExpressionStatement	"fprintf ( stderr , ""You must specify an input JPEG file name when supplying\\n"" )"	376:2:10291:10367	10730634	13	True				
ANR	10730761	CallExpression	"fprintf ( stderr , ""You must specify an input JPEG file name when supplying\\n"" )"		10730634	0					
ANR	10730762	Callee	fprintf		10730634	0					
ANR	10730763	Identifier	fprintf		10730634	0					
ANR	10730764	ArgumentList	stderr		10730634	1					
ANR	10730765	Argument	stderr		10730634	0					
ANR	10730766	Identifier	stderr		10730634	0					
ANR	10730767	Argument	"""You must specify an input JPEG file name when supplying\\n"""		10730634	1					
ANR	10730768	PrimaryExpression	"""You must specify an input JPEG file name when supplying\\n"""		10730634	0					
ANR	10730769	ExpressionStatement	"fprintf ( stderr , ""comment text from standard input.\\n"" )"	377:2:10371:10425	10730634	14	True				
ANR	10730770	CallExpression	"fprintf ( stderr , ""comment text from standard input.\\n"" )"		10730634	0					
ANR	10730771	Callee	fprintf		10730634	0					
ANR	10730772	Identifier	fprintf		10730634	0					
ANR	10730773	ArgumentList	stderr		10730634	1					
ANR	10730774	Argument	stderr		10730634	0					
ANR	10730775	Identifier	stderr		10730634	0					
ANR	10730776	Argument	"""comment text from standard input.\\n"""		10730634	1					
ANR	10730777	PrimaryExpression	"""comment text from standard input.\\n"""		10730634	0					
ANR	10730778	ExpressionStatement	exit ( EXIT_FAILURE )	380:2:10437:10455	10730634	15	True				
ANR	10730779	CallExpression	exit ( EXIT_FAILURE )		10730634	0					
ANR	10730780	Callee	exit		10730634	0					
ANR	10730781	Identifier	exit		10730634	0					
ANR	10730782	ArgumentList	EXIT_FAILURE		10730634	1					
ANR	10730783	Argument	EXIT_FAILURE		10730634	0					
ANR	10730784	Identifier	EXIT_FAILURE		10730634	0					
ANR	10730785	ReturnType	static void		10730634	1					
ANR	10730786	Identifier	usage		10730634	2					
ANR	10730787	ParameterList			10730634	3					
ANR	10730788	CFGEntryNode	ENTRY		10730634		True				
ANR	10730789	CFGExitNode	EXIT		10730634		True				
ANR	10730790	Symbol	MAX_COM_LENGTH		10730634						
ANR	10730791	Symbol	EXIT_FAILURE		10730634						
ANR	10730792	Symbol	progname		10730634						
ANR	10730793	Symbol	stderr		10730634						
ANR	10730794	Function	keymatch	384:0:10461:11248							
ANR	10730795	FunctionDef	"keymatch (char * arg , const char * keyword , int minchars)"		10730794	0					
ANR	10730796	CompoundStatement		389:0:10730:11248	10730794	0					
ANR	10730797	Statement	register	390:2:10734:10741	10730794	0	True				
ANR	10730798	IdentifierDeclStatement	"int ca , ck ;"	390:11:10743:10753	10730794	1	True				
ANR	10730799	IdentifierDecl	ca		10730794	0					
ANR	10730800	IdentifierDeclType	int		10730794	0					
ANR	10730801	Identifier	ca		10730794	1					
ANR	10730802	IdentifierDecl	ck		10730794	1					
ANR	10730803	IdentifierDeclType	int		10730794	0					
ANR	10730804	Identifier	ck		10730794	1					
ANR	10730805	Statement	register	391:2:10757:10764	10730794	2	True				
ANR	10730806	IdentifierDeclStatement	int nmatched = 0 ;	391:11:10766:10782	10730794	3	True				
ANR	10730807	IdentifierDecl	nmatched = 0		10730794	0					
ANR	10730808	IdentifierDeclType	int		10730794	0					
ANR	10730809	Identifier	nmatched		10730794	1					
ANR	10730810	AssignmentExpression	nmatched = 0		10730794	2		=			
ANR	10730811	Identifier	nmatched		10730794	0					
ANR	10730812	PrimaryExpression	0		10730794	1					
ANR	10730813	WhileStatement	while ( ( ca = * arg ++ ) != '\\0' )		10730794	4					
ANR	10730814	Condition	( ca = * arg ++ ) != '\\0'	393:9:10794:10814	10730794	0	True				
ANR	10730815	EqualityExpression	( ca = * arg ++ ) != '\\0'		10730794	0		!=			
ANR	10730816	AssignmentExpression	ca = * arg ++		10730794	0		=			
ANR	10730817	Identifier	ca		10730794	0					
ANR	10730818	UnaryOperationExpression	* arg ++		10730794	1					
ANR	10730819	UnaryOperator	*		10730794	0					
ANR	10730820	PostIncDecOperationExpression	arg ++		10730794	1					
ANR	10730821	Identifier	arg		10730794	0					
ANR	10730822	IncDec	++		10730794	1					
ANR	10730823	PrimaryExpression	'\\0'		10730794	1					
ANR	10730824	CompoundStatement		5:32:86:86	10730794	1					
ANR	10730825	IfStatement	if ( ( ck = * keyword ++ ) == '\\0' )		10730794	0					
ANR	10730826	Condition	( ck = * keyword ++ ) == '\\0'	394:8:10827:10851	10730794	0	True				
ANR	10730827	EqualityExpression	( ck = * keyword ++ ) == '\\0'		10730794	0		==			
ANR	10730828	AssignmentExpression	ck = * keyword ++		10730794	0		=			
ANR	10730829	Identifier	ck		10730794	0					
ANR	10730830	UnaryOperationExpression	* keyword ++		10730794	1					
ANR	10730831	UnaryOperator	*		10730794	0					
ANR	10730832	PostIncDecOperationExpression	keyword ++		10730794	1					
ANR	10730833	Identifier	keyword		10730794	0					
ANR	10730834	IncDec	++		10730794	1					
ANR	10730835	PrimaryExpression	'\\0'		10730794	1					
ANR	10730836	ReturnStatement	return 0 ;	395:6:10860:10868	10730794	1	True				
ANR	10730837	PrimaryExpression	0		10730794	0					
ANR	10730838	IfStatement	if ( isupper ( ca ) )		10730794	1					
ANR	10730839	Condition	isupper ( ca )	396:8:10919:10929	10730794	0	True				
ANR	10730840	CallExpression	isupper ( ca )		10730794	0					
ANR	10730841	Callee	isupper		10730794	0					
ANR	10730842	Identifier	isupper		10730794	0					
ANR	10730843	ArgumentList	ca		10730794	1					
ANR	10730844	Argument	ca		10730794	0					
ANR	10730845	Identifier	ca		10730794	0					
ANR	10730846	ExpressionStatement	ca = tolower ( ca )	397:6:10987:11003	10730794	1	True				
ANR	10730847	AssignmentExpression	ca = tolower ( ca )		10730794	0		=			
ANR	10730848	Identifier	ca		10730794	0					
ANR	10730849	CallExpression	tolower ( ca )		10730794	1					
ANR	10730850	Callee	tolower		10730794	0					
ANR	10730851	Identifier	tolower		10730794	0					
ANR	10730852	ArgumentList	ca		10730794	1					
ANR	10730853	Argument	ca		10730794	0					
ANR	10730854	Identifier	ca		10730794	0					
ANR	10730855	IfStatement	if ( ca != ck )		10730794	2					
ANR	10730856	Condition	ca != ck	398:8:11013:11020	10730794	0	True				
ANR	10730857	EqualityExpression	ca != ck		10730794	0		!=			
ANR	10730858	Identifier	ca		10730794	0					
ANR	10730859	Identifier	ck		10730794	1					
ANR	10730860	ReturnStatement	return 0 ;	399:6:11029:11037	10730794	1	True				
ANR	10730861	PrimaryExpression	0		10730794	0					
ANR	10730862	ExpressionStatement	nmatched ++	400:4:11059:11069	10730794	3	True				
ANR	10730863	PostIncDecOperationExpression	nmatched ++		10730794	0					
ANR	10730864	Identifier	nmatched		10730794	0					
ANR	10730865	IncDec	++		10730794	1					
ANR	10730866	IfStatement	if ( nmatched < minchars )		10730794	5					
ANR	10730867	Condition	nmatched < minchars	403:6:11188:11206	10730794	0	True				
ANR	10730868	RelationalExpression	nmatched < minchars		10730794	0		<			
ANR	10730869	Identifier	nmatched		10730794	0					
ANR	10730870	Identifier	minchars		10730794	1					
ANR	10730871	ReturnStatement	return 0 ;	404:4:11213:11221	10730794	1	True				
ANR	10730872	PrimaryExpression	0		10730794	0					
ANR	10730873	ReturnStatement	return 1 ;	405:2:11225:11233	10730794	6	True				
ANR	10730874	PrimaryExpression	1		10730794	0					
ANR	10730875	ReturnType	static int		10730794	1					
ANR	10730876	Identifier	keymatch		10730794	2					
ANR	10730877	ParameterList	"char * arg , const char * keyword , int minchars"		10730794	3					
ANR	10730878	Parameter	char * arg	385:10:10482:10491	10730794	0	True				
ANR	10730879	ParameterType	char *		10730794	0					
ANR	10730880	Identifier	arg		10730794	1					
ANR	10730881	Parameter	const char * keyword	385:22:10494:10513	10730794	1	True				
ANR	10730882	ParameterType	const char *		10730794	0					
ANR	10730883	Identifier	keyword		10730794	1					
ANR	10730884	Parameter	int minchars	385:44:10516:10527	10730794	2	True				
ANR	10730885	ParameterType	int		10730794	0					
ANR	10730886	Identifier	minchars		10730794	1					
ANR	10730887	CFGEntryNode	ENTRY		10730794		True				
ANR	10730888	CFGExitNode	EXIT		10730794		True				
ANR	10730889	Symbol	* keyword ++		10730794						
ANR	10730890	Symbol	* arg ++		10730794						
ANR	10730891	Symbol	tolower		10730794						
ANR	10730892	Symbol	arg		10730794						
ANR	10730893	Symbol	ck		10730794						
ANR	10730894	Symbol	isupper		10730794						
ANR	10730895	Symbol	nmatched		10730794						
ANR	10730896	Symbol	keyword		10730794						
ANR	10730897	Symbol	minchars		10730794						
ANR	10730898	Symbol	ca		10730794						
ANR	10730899	Function	main	413:0:11281:17179							
ANR	10730900	FunctionDef	"main (int argc , char * * argv)"		10730899	0					
ANR	10730901	CompoundStatement		415:0:11314:17179	10730899	0					
ANR	10730902	IdentifierDeclStatement	int argn ;	416:2:11318:11326	10730899	0	True				
ANR	10730903	IdentifierDecl	argn		10730899	0					
ANR	10730904	IdentifierDeclType	int		10730899	0					
ANR	10730905	Identifier	argn		10730899	1					
ANR	10730906	IdentifierDeclStatement	char * arg ;	417:2:11330:11340	10730899	1	True				
ANR	10730907	IdentifierDecl	* arg		10730899	0					
ANR	10730908	IdentifierDeclType	char *		10730899	0					
ANR	10730909	Identifier	arg		10730899	1					
ANR	10730910	IdentifierDeclStatement	int keep_COM = 1 ;	418:2:11344:11360	10730899	2	True				
ANR	10730911	IdentifierDecl	keep_COM = 1		10730899	0					
ANR	10730912	IdentifierDeclType	int		10730899	0					
ANR	10730913	Identifier	keep_COM		10730899	1					
ANR	10730914	AssignmentExpression	keep_COM = 1		10730899	2		=			
ANR	10730915	Identifier	keep_COM		10730899	0					
ANR	10730916	PrimaryExpression	1		10730899	1					
ANR	10730917	IdentifierDeclStatement	char * comment_arg = NULL ;	419:2:11364:11389	10730899	3	True				
ANR	10730918	IdentifierDecl	* comment_arg = NULL		10730899	0					
ANR	10730919	IdentifierDeclType	char *		10730899	0					
ANR	10730920	Identifier	comment_arg		10730899	1					
ANR	10730921	AssignmentExpression	* comment_arg = NULL		10730899	2		=			
ANR	10730922	Identifier	NULL		10730899	0					
ANR	10730923	Identifier	NULL		10730899	1					
ANR	10730924	IdentifierDeclStatement	FILE * comment_file = NULL ;	420:2:11393:11419	10730899	4	True				
ANR	10730925	IdentifierDecl	* comment_file = NULL		10730899	0					
ANR	10730926	IdentifierDeclType	FILE *		10730899	0					
ANR	10730927	Identifier	comment_file		10730899	1					
ANR	10730928	AssignmentExpression	* comment_file = NULL		10730899	2		=			
ANR	10730929	Identifier	NULL		10730899	0					
ANR	10730930	Identifier	NULL		10730899	1					
ANR	10730931	IdentifierDeclStatement	unsigned int comment_length = 0 ;	421:2:11423:11454	10730899	5	True				
ANR	10730932	IdentifierDecl	comment_length = 0		10730899	0					
ANR	10730933	IdentifierDeclType	unsigned int		10730899	0					
ANR	10730934	Identifier	comment_length		10730899	1					
ANR	10730935	AssignmentExpression	comment_length = 0		10730899	2		=			
ANR	10730936	Identifier	comment_length		10730899	0					
ANR	10730937	PrimaryExpression	0		10730899	1					
ANR	10730938	IdentifierDeclStatement	int marker ;	422:2:11458:11468	10730899	6	True				
ANR	10730939	IdentifierDecl	marker		10730899	0					
ANR	10730940	IdentifierDeclType	int		10730899	0					
ANR	10730941	Identifier	marker		10730899	1					
ANR	10730942	ExpressionStatement	argc = ccommand ( & argv )	426:2:11531:11553	10730899	7	True				
ANR	10730943	AssignmentExpression	argc = ccommand ( & argv )		10730899	0		=			
ANR	10730944	Identifier	argc		10730899	0					
ANR	10730945	CallExpression	ccommand ( & argv )		10730899	1					
ANR	10730946	Callee	ccommand		10730899	0					
ANR	10730947	Identifier	ccommand		10730899	0					
ANR	10730948	ArgumentList	& argv		10730899	1					
ANR	10730949	Argument	& argv		10730899	0					
ANR	10730950	UnaryOperationExpression	& argv		10730899	0					
ANR	10730951	UnaryOperator	&		10730899	0					
ANR	10730952	Identifier	argv		10730899	1					
ANR	10730953	ExpressionStatement	progname = argv [ 0 ]	429:2:11565:11583	10730899	8	True				
ANR	10730954	AssignmentExpression	progname = argv [ 0 ]		10730899	0		=			
ANR	10730955	Identifier	progname		10730899	0					
ANR	10730956	ArrayIndexing	argv [ 0 ]		10730899	1					
ANR	10730957	Identifier	argv		10730899	0					
ANR	10730958	PrimaryExpression	0		10730899	1					
ANR	10730959	IfStatement	if ( progname == NULL || progname [ 0 ] == 0 )		10730899	9					
ANR	10730960	Condition	progname == NULL || progname [ 0 ] == 0	430:6:11591:11626	10730899	0	True				
ANR	10730961	OrExpression	progname == NULL || progname [ 0 ] == 0		10730899	0		||			
ANR	10730962	EqualityExpression	progname == NULL		10730899	0		==			
ANR	10730963	Identifier	progname		10730899	0					
ANR	10730964	Identifier	NULL		10730899	1					
ANR	10730965	EqualityExpression	progname [ 0 ] == 0		10730899	1		==			
ANR	10730966	ArrayIndexing	progname [ 0 ]		10730899	0					
ANR	10730967	Identifier	progname		10730899	0					
ANR	10730968	PrimaryExpression	0		10730899	1					
ANR	10730969	PrimaryExpression	0		10730899	1					
ANR	10730970	ExpressionStatement	"progname = ""wrjpgcom"""	431:4:11633:11654	10730899	1	True				
ANR	10730971	AssignmentExpression	"progname = ""wrjpgcom"""		10730899	0		=			
ANR	10730972	Identifier	progname		10730899	0					
ANR	10730973	PrimaryExpression	"""wrjpgcom"""		10730899	1					
ANR	10730974	ForStatement	for ( argn = 1 ; argn < argc ; argn ++ )		10730899	10					
ANR	10730975	ForInit	argn = 1 ;	434:7:11738:11746	10730899	0	True				
ANR	10730976	AssignmentExpression	argn = 1		10730899	0		=			
ANR	10730977	Identifier	argn		10730899	0					
ANR	10730978	PrimaryExpression	1		10730899	1					
ANR	10730979	Condition	argn < argc	434:17:11748:11758	10730899	1	True				
ANR	10730980	RelationalExpression	argn < argc		10730899	0		<			
ANR	10730981	Identifier	argn		10730899	0					
ANR	10730982	Identifier	argc		10730899	1					
ANR	10730983	PostIncDecOperationExpression	argn ++	434:30:11761:11766	10730899	2	True				
ANR	10730984	Identifier	argn		10730899	0					
ANR	10730985	IncDec	++		10730899	1					
ANR	10730986	CompoundStatement		20:38:454:454	10730899	3					
ANR	10730987	ExpressionStatement	arg = argv [ argn ]	435:4:11775:11791	10730899	0	True				
ANR	10730988	AssignmentExpression	arg = argv [ argn ]		10730899	0		=			
ANR	10730989	Identifier	arg		10730899	0					
ANR	10730990	ArrayIndexing	argv [ argn ]		10730899	1					
ANR	10730991	Identifier	argv		10730899	0					
ANR	10730992	Identifier	argn		10730899	1					
ANR	10730993	IfStatement	if ( arg [ 0 ] != '-' )		10730899	1					
ANR	10730994	Condition	arg [ 0 ] != '-'	436:8:11801:11813	10730899	0	True				
ANR	10730995	EqualityExpression	arg [ 0 ] != '-'		10730899	0		!=			
ANR	10730996	ArrayIndexing	arg [ 0 ]		10730899	0					
ANR	10730997	Identifier	arg		10730899	0					
ANR	10730998	PrimaryExpression	0		10730899	1					
ANR	10730999	PrimaryExpression	'-'		10730899	1					
ANR	10731000	BreakStatement	break ;	437:6:11822:11827	10730899	1	True				
ANR	10731001	ExpressionStatement	arg ++	438:4:11871:11876	10730899	2	True				
ANR	10731002	PostIncDecOperationExpression	arg ++		10730899	0					
ANR	10731003	Identifier	arg		10730899	0					
ANR	10731004	IncDec	++		10730899	1					
ANR	10731005	IfStatement	"if ( keymatch ( arg , ""replace"" , 1 ) )"		10730899	3					
ANR	10731006	Condition	"keymatch ( arg , ""replace"" , 1 )"	439:8:11911:11937	10730899	0	True				
ANR	10731007	CallExpression	"keymatch ( arg , ""replace"" , 1 )"		10730899	0					
ANR	10731008	Callee	keymatch		10730899	0					
ANR	10731009	Identifier	keymatch		10730899	0					
ANR	10731010	ArgumentList	arg		10730899	1					
ANR	10731011	Argument	arg		10730899	0					
ANR	10731012	Identifier	arg		10730899	0					
ANR	10731013	Argument	"""replace"""		10730899	1					
ANR	10731014	PrimaryExpression	"""replace"""		10730899	0					
ANR	10731015	Argument	1		10730899	2					
ANR	10731016	PrimaryExpression	1		10730899	0					
ANR	10731017	CompoundStatement		25:37:625:625	10730899	1					
ANR	10731018	ExpressionStatement	keep_COM = 0	440:6:11948:11960	10730899	0	True				
ANR	10731019	AssignmentExpression	keep_COM = 0		10730899	0		=			
ANR	10731020	Identifier	keep_COM		10730899	0					
ANR	10731021	PrimaryExpression	0		10730899	1					
ANR	10731022	ElseStatement	else		10730899	0					
ANR	10731023	IfStatement	"if ( keymatch ( arg , ""cfile"" , 2 ) )"		10730899	0					
ANR	10731024	Condition	"keymatch ( arg , ""cfile"" , 2 )"	441:15:11977:12001	10730899	0	True				
ANR	10731025	CallExpression	"keymatch ( arg , ""cfile"" , 2 )"		10730899	0					
ANR	10731026	Callee	keymatch		10730899	0					
ANR	10731027	Identifier	keymatch		10730899	0					
ANR	10731028	ArgumentList	arg		10730899	1					
ANR	10731029	Argument	arg		10730899	0					
ANR	10731030	Identifier	arg		10730899	0					
ANR	10731031	Argument	"""cfile"""		10730899	1					
ANR	10731032	PrimaryExpression	"""cfile"""		10730899	0					
ANR	10731033	Argument	2		10730899	2					
ANR	10731034	PrimaryExpression	2		10730899	0					
ANR	10731035	CompoundStatement		27:42:689:689	10730899	1					
ANR	10731036	IfStatement	if ( ++ argn >= argc )		10730899	0					
ANR	10731037	Condition	++ argn >= argc	442:10:12016:12029	10730899	0	True				
ANR	10731038	RelationalExpression	++ argn >= argc		10730899	0		>=			
ANR	10731039	UnaryExpression	++ argn		10730899	0					
ANR	10731040	IncDec	++		10730899	0					
ANR	10731041	Identifier	argn		10730899	1					
ANR	10731042	Identifier	argc		10730899	1					
ANR	10731043	ExpressionStatement	usage ( )	442:26:12032:12039	10730899	1	True				
ANR	10731044	CallExpression	usage ( )		10730899	0					
ANR	10731045	Callee	usage		10730899	0					
ANR	10731046	Identifier	usage		10730899	0					
ANR	10731047	ArgumentList			10730899	1					
ANR	10731048	IfStatement	"if ( ( comment_file = fopen ( argv [ argn ] , ""r"" ) ) == NULL )"		10730899	1					
ANR	10731049	Condition	"( comment_file = fopen ( argv [ argn ] , ""r"" ) ) == NULL"	443:10:12051:12097	10730899	0	True				
ANR	10731050	EqualityExpression	"( comment_file = fopen ( argv [ argn ] , ""r"" ) ) == NULL"		10730899	0		==			
ANR	10731051	AssignmentExpression	"comment_file = fopen ( argv [ argn ] , ""r"" )"		10730899	0		=			
ANR	10731052	Identifier	comment_file		10730899	0					
ANR	10731053	CallExpression	"fopen ( argv [ argn ] , ""r"" )"		10730899	1					
ANR	10731054	Callee	fopen		10730899	0					
ANR	10731055	Identifier	fopen		10730899	0					
ANR	10731056	ArgumentList	argv [ argn ]		10730899	1					
ANR	10731057	Argument	argv [ argn ]		10730899	0					
ANR	10731058	ArrayIndexing	argv [ argn ]		10730899	0					
ANR	10731059	Identifier	argv		10730899	0					
ANR	10731060	Identifier	argn		10730899	1					
ANR	10731061	Argument	"""r"""		10730899	1					
ANR	10731062	PrimaryExpression	"""r"""		10730899	0					
ANR	10731063	Identifier	NULL		10730899	1					
ANR	10731064	CompoundStatement		29:59:785:785	10730899	1					
ANR	10731065	ExpressionStatement	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn ] )"	444:1:12103:12163	10730899	0	True				
ANR	10731066	CallExpression	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn ] )"		10730899	0					
ANR	10731067	Callee	fprintf		10730899	0					
ANR	10731068	Identifier	fprintf		10730899	0					
ANR	10731069	ArgumentList	stderr		10730899	1					
ANR	10731070	Argument	stderr		10730899	0					
ANR	10731071	Identifier	stderr		10730899	0					
ANR	10731072	Argument	"""%s: can't open %s\\n"""		10730899	1					
ANR	10731073	PrimaryExpression	"""%s: can't open %s\\n"""		10730899	0					
ANR	10731074	Argument	progname		10730899	2					
ANR	10731075	Identifier	progname		10730899	0					
ANR	10731076	Argument	argv [ argn ]		10730899	3					
ANR	10731077	ArrayIndexing	argv [ argn ]		10730899	0					
ANR	10731078	Identifier	argv		10730899	0					
ANR	10731079	Identifier	argn		10730899	1					
ANR	10731080	ExpressionStatement	exit ( EXIT_FAILURE )	445:1:12166:12184	10730899	1	True				
ANR	10731081	CallExpression	exit ( EXIT_FAILURE )		10730899	0					
ANR	10731082	Callee	exit		10730899	0					
ANR	10731083	Identifier	exit		10730899	0					
ANR	10731084	ArgumentList	EXIT_FAILURE		10730899	1					
ANR	10731085	Argument	EXIT_FAILURE		10730899	0					
ANR	10731086	Identifier	EXIT_FAILURE		10730899	0					
ANR	10731087	ElseStatement	else		10730899	0					
ANR	10731088	IfStatement	"if ( keymatch ( arg , ""comment"" , 1 ) )"		10730899	0					
ANR	10731089	Condition	"keymatch ( arg , ""comment"" , 1 )"	447:15:12209:12235	10730899	0	True				
ANR	10731090	CallExpression	"keymatch ( arg , ""comment"" , 1 )"		10730899	0					
ANR	10731091	Callee	keymatch		10730899	0					
ANR	10731092	Identifier	keymatch		10730899	0					
ANR	10731093	ArgumentList	arg		10730899	1					
ANR	10731094	Argument	arg		10730899	0					
ANR	10731095	Identifier	arg		10730899	0					
ANR	10731096	Argument	"""comment"""		10730899	1					
ANR	10731097	PrimaryExpression	"""comment"""		10730899	0					
ANR	10731098	Argument	1		10730899	2					
ANR	10731099	PrimaryExpression	1		10730899	0					
ANR	10731100	CompoundStatement		33:44:923:923	10730899	1					
ANR	10731101	IfStatement	if ( ++ argn >= argc )		10730899	0					
ANR	10731102	Condition	++ argn >= argc	448:10:12250:12263	10730899	0	True				
ANR	10731103	RelationalExpression	++ argn >= argc		10730899	0		>=			
ANR	10731104	UnaryExpression	++ argn		10730899	0					
ANR	10731105	IncDec	++		10730899	0					
ANR	10731106	Identifier	argn		10730899	1					
ANR	10731107	Identifier	argc		10730899	1					
ANR	10731108	ExpressionStatement	usage ( )	448:26:12266:12273	10730899	1	True				
ANR	10731109	CallExpression	usage ( )		10730899	0					
ANR	10731110	Callee	usage		10730899	0					
ANR	10731111	Identifier	usage		10730899	0					
ANR	10731112	ArgumentList			10730899	1					
ANR	10731113	ExpressionStatement	comment_arg = argv [ argn ]	449:6:12281:12305	10730899	1	True				
ANR	10731114	AssignmentExpression	comment_arg = argv [ argn ]		10730899	0		=			
ANR	10731115	Identifier	comment_arg		10730899	0					
ANR	10731116	ArrayIndexing	argv [ argn ]		10730899	1					
ANR	10731117	Identifier	argv		10730899	0					
ANR	10731118	Identifier	argn		10730899	1					
ANR	10731119	IfStatement	"if ( comment_arg [ 0 ] == '""' )"		10730899	2					
ANR	10731120	Condition	"comment_arg [ 0 ] == '""'"	453:10:12479:12499	10730899	0	True				
ANR	10731121	EqualityExpression	"comment_arg [ 0 ] == '""'"		10730899	0		==			
ANR	10731122	ArrayIndexing	comment_arg [ 0 ]		10730899	0					
ANR	10731123	Identifier	comment_arg		10730899	0					
ANR	10731124	PrimaryExpression	0		10730899	1					
ANR	10731125	PrimaryExpression	"'""'"		10730899	1					
ANR	10731126	CompoundStatement		39:33:1187:1187	10730899	1					
ANR	10731127	ExpressionStatement	comment_arg = ( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )	454:1:12505:12559	10730899	0	True				
ANR	10731128	AssignmentExpression	comment_arg = ( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )		10730899	0		=			
ANR	10731129	Identifier	comment_arg		10730899	0					
ANR	10731130	CastExpression	( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )		10730899	1					
ANR	10731131	CastTarget	char *		10730899	0					
ANR	10731132	CallExpression	malloc ( ( size_t ) MAX_COM_LENGTH )		10730899	1					
ANR	10731133	Callee	malloc		10730899	0					
ANR	10731134	Identifier	malloc		10730899	0					
ANR	10731135	ArgumentList	( size_t ) MAX_COM_LENGTH		10730899	1					
ANR	10731136	Argument	( size_t ) MAX_COM_LENGTH		10730899	0					
ANR	10731137	CastExpression	( size_t ) MAX_COM_LENGTH		10730899	0					
ANR	10731138	CastTarget	size_t		10730899	0					
ANR	10731139	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731140	IfStatement	if ( comment_arg == NULL )		10730899	1					
ANR	10731141	Condition	comment_arg == NULL	455:5:12566:12584	10730899	0	True				
ANR	10731142	EqualityExpression	comment_arg == NULL		10730899	0		==			
ANR	10731143	Identifier	comment_arg		10730899	0					
ANR	10731144	Identifier	NULL		10730899	1					
ANR	10731145	ExpressionStatement	"ERREXIT ( ""Insufficient memory"" )"	456:3:12590:12620	10730899	1	True				
ANR	10731146	CallExpression	"ERREXIT ( ""Insufficient memory"" )"		10730899	0					
ANR	10731147	Callee	ERREXIT		10730899	0					
ANR	10731148	Identifier	ERREXIT		10730899	0					
ANR	10731149	ArgumentList	"""Insufficient memory"""		10730899	1					
ANR	10731150	Argument	"""Insufficient memory"""		10730899	0					
ANR	10731151	PrimaryExpression	"""Insufficient memory"""		10730899	0					
ANR	10731152	IfStatement	if ( strlen ( argv [ argn ] + 1 ) >= ( size_t ) MAX_COM_LENGTH )		10730899	2					
ANR	10731153	Condition	strlen ( argv [ argn ] + 1 ) >= ( size_t ) MAX_COM_LENGTH	457:5:12627:12673	10730899	0	True				
ANR	10731154	RelationalExpression	strlen ( argv [ argn ] + 1 ) >= ( size_t ) MAX_COM_LENGTH		10730899	0		>=			
ANR	10731155	CallExpression	strlen ( argv [ argn ] + 1 )		10730899	0					
ANR	10731156	Callee	strlen		10730899	0					
ANR	10731157	Identifier	strlen		10730899	0					
ANR	10731158	ArgumentList	argv [ argn ] + 1		10730899	1					
ANR	10731159	Argument	argv [ argn ] + 1		10730899	0					
ANR	10731160	AdditiveExpression	argv [ argn ] + 1		10730899	0		+			
ANR	10731161	ArrayIndexing	argv [ argn ]		10730899	0					
ANR	10731162	Identifier	argv		10730899	0					
ANR	10731163	Identifier	argn		10730899	1					
ANR	10731164	PrimaryExpression	1		10730899	1					
ANR	10731165	CastExpression	( size_t ) MAX_COM_LENGTH		10730899	1					
ANR	10731166	CastTarget	size_t		10730899	0					
ANR	10731167	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731168	CompoundStatement		43:54:1361:1361	10730899	1					
ANR	10731169	ExpressionStatement	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	458:3:12681:12773	10730899	0	True				
ANR	10731170	CallExpression	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		10730899	0					
ANR	10731171	Callee	fprintf		10730899	0					
ANR	10731172	Identifier	fprintf		10730899	0					
ANR	10731173	ArgumentList	stderr		10730899	1					
ANR	10731174	Argument	stderr		10730899	0					
ANR	10731175	Identifier	stderr		10730899	0					
ANR	10731176	Argument	"""Comment text may not exceed %u bytes\\n"""		10730899	1					
ANR	10731177	PrimaryExpression	"""Comment text may not exceed %u bytes\\n"""		10730899	0					
ANR	10731178	Argument	( unsigned int ) MAX_COM_LENGTH		10730899	2					
ANR	10731179	CastExpression	( unsigned int ) MAX_COM_LENGTH		10730899	0					
ANR	10731180	CastTarget	unsigned int		10730899	0					
ANR	10731181	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731182	ExpressionStatement	exit ( EXIT_FAILURE )	460:3:12778:12796	10730899	1	True				
ANR	10731183	CallExpression	exit ( EXIT_FAILURE )		10730899	0					
ANR	10731184	Callee	exit		10730899	0					
ANR	10731185	Identifier	exit		10730899	0					
ANR	10731186	ArgumentList	EXIT_FAILURE		10730899	1					
ANR	10731187	Argument	EXIT_FAILURE		10730899	0					
ANR	10731188	Identifier	EXIT_FAILURE		10730899	0					
ANR	10731189	ExpressionStatement	"strcpy ( comment_arg , argv [ argn ] + 1 )"	462:1:12802:12835	10730899	3	True				
ANR	10731190	CallExpression	"strcpy ( comment_arg , argv [ argn ] + 1 )"		10730899	0					
ANR	10731191	Callee	strcpy		10730899	0					
ANR	10731192	Identifier	strcpy		10730899	0					
ANR	10731193	ArgumentList	comment_arg		10730899	1					
ANR	10731194	Argument	comment_arg		10730899	0					
ANR	10731195	Identifier	comment_arg		10730899	0					
ANR	10731196	Argument	argv [ argn ] + 1		10730899	1					
ANR	10731197	AdditiveExpression	argv [ argn ] + 1		10730899	0		+			
ANR	10731198	ArrayIndexing	argv [ argn ]		10730899	0					
ANR	10731199	Identifier	argv		10730899	0					
ANR	10731200	Identifier	argn		10730899	1					
ANR	10731201	PrimaryExpression	1		10730899	1					
ANR	10731202	ForStatement	for ( ; ; )		10730899	4					
ANR	10731203	CompoundStatement		49:10:1532:1532	10730899	0					
ANR	10731204	ExpressionStatement	comment_length = ( unsigned int ) strlen ( comment_arg )	464:3:12852:12903	10730899	0	True				
ANR	10731205	AssignmentExpression	comment_length = ( unsigned int ) strlen ( comment_arg )		10730899	0		=			
ANR	10731206	Identifier	comment_length		10730899	0					
ANR	10731207	CastExpression	( unsigned int ) strlen ( comment_arg )		10730899	1					
ANR	10731208	CastTarget	unsigned int		10730899	0					
ANR	10731209	CallExpression	strlen ( comment_arg )		10730899	1					
ANR	10731210	Callee	strlen		10730899	0					
ANR	10731211	Identifier	strlen		10730899	0					
ANR	10731212	ArgumentList	comment_arg		10730899	1					
ANR	10731213	Argument	comment_arg		10730899	0					
ANR	10731214	Identifier	comment_arg		10730899	0					
ANR	10731215	IfStatement	"if ( comment_length > 0 && comment_arg [ comment_length - 1 ] == '""' )"		10730899	1					
ANR	10731216	Condition	"comment_length > 0 && comment_arg [ comment_length - 1 ] == '""'"	465:7:12912:12969	10730899	0	True				
ANR	10731217	AndExpression	"comment_length > 0 && comment_arg [ comment_length - 1 ] == '""'"		10730899	0		&&			
ANR	10731218	RelationalExpression	comment_length > 0		10730899	0		>			
ANR	10731219	Identifier	comment_length		10730899	0					
ANR	10731220	PrimaryExpression	0		10730899	1					
ANR	10731221	EqualityExpression	"comment_arg [ comment_length - 1 ] == '""'"		10730899	1		==			
ANR	10731222	ArrayIndexing	comment_arg [ comment_length - 1 ]		10730899	0					
ANR	10731223	Identifier	comment_arg		10730899	0					
ANR	10731224	AdditiveExpression	comment_length - 1		10730899	1		-			
ANR	10731225	Identifier	comment_length		10730899	0					
ANR	10731226	PrimaryExpression	1		10730899	1					
ANR	10731227	PrimaryExpression	"'""'"		10730899	1					
ANR	10731228	CompoundStatement		51:67:1657:1657	10730899	1					
ANR	10731229	ExpressionStatement	comment_arg [ comment_length - 1 ] = '\\0'	466:5:12979:13015	10730899	0	True				
ANR	10731230	AssignmentExpression	comment_arg [ comment_length - 1 ] = '\\0'		10730899	0		=			
ANR	10731231	ArrayIndexing	comment_arg [ comment_length - 1 ]		10730899	0					
ANR	10731232	Identifier	comment_arg		10730899	0					
ANR	10731233	AdditiveExpression	comment_length - 1		10730899	1		-			
ANR	10731234	Identifier	comment_length		10730899	0					
ANR	10731235	PrimaryExpression	1		10730899	1					
ANR	10731236	PrimaryExpression	'\\0'		10730899	1					
ANR	10731237	BreakStatement	break ;	467:5:13050:13055	10730899	1	True				
ANR	10731238	IfStatement	if ( ++ argn >= argc )		10730899	2					
ANR	10731239	Condition	++ argn >= argc	469:7:13069:13082	10730899	0	True				
ANR	10731240	RelationalExpression	++ argn >= argc		10730899	0		>=			
ANR	10731241	UnaryExpression	++ argn		10730899	0					
ANR	10731242	IncDec	++		10730899	0					
ANR	10731243	Identifier	argn		10730899	1					
ANR	10731244	Identifier	argc		10730899	1					
ANR	10731245	ExpressionStatement	"ERREXIT ( ""Missing ending quote mark"" )"	470:5:13090:13126	10730899	1	True				
ANR	10731246	CallExpression	"ERREXIT ( ""Missing ending quote mark"" )"		10730899	0					
ANR	10731247	Callee	ERREXIT		10730899	0					
ANR	10731248	Identifier	ERREXIT		10730899	0					
ANR	10731249	ArgumentList	"""Missing ending quote mark"""		10730899	1					
ANR	10731250	Argument	"""Missing ending quote mark"""		10730899	0					
ANR	10731251	PrimaryExpression	"""Missing ending quote mark"""		10730899	0					
ANR	10731252	IfStatement	if ( strlen ( comment_arg ) + 1 + strlen ( argv [ argn ] ) >= ( size_t ) MAX_COM_LENGTH )		10730899	3					
ANR	10731253	Condition	strlen ( comment_arg ) + 1 + strlen ( argv [ argn ] ) >= ( size_t ) MAX_COM_LENGTH	471:7:13135:13212	10730899	0	True				
ANR	10731254	RelationalExpression	strlen ( comment_arg ) + 1 + strlen ( argv [ argn ] ) >= ( size_t ) MAX_COM_LENGTH		10730899	0		>=			
ANR	10731255	AdditiveExpression	strlen ( comment_arg ) + 1 + strlen ( argv [ argn ] )		10730899	0		+			
ANR	10731256	CallExpression	strlen ( comment_arg )		10730899	0					
ANR	10731257	Callee	strlen		10730899	0					
ANR	10731258	Identifier	strlen		10730899	0					
ANR	10731259	ArgumentList	comment_arg		10730899	1					
ANR	10731260	Argument	comment_arg		10730899	0					
ANR	10731261	Identifier	comment_arg		10730899	0					
ANR	10731262	AdditiveExpression	1 + strlen ( argv [ argn ] )		10730899	1		+			
ANR	10731263	PrimaryExpression	1		10730899	0					
ANR	10731264	CallExpression	strlen ( argv [ argn ] )		10730899	1					
ANR	10731265	Callee	strlen		10730899	0					
ANR	10731266	Identifier	strlen		10730899	0					
ANR	10731267	ArgumentList	argv [ argn ]		10730899	1					
ANR	10731268	Argument	argv [ argn ]		10730899	0					
ANR	10731269	ArrayIndexing	argv [ argn ]		10730899	0					
ANR	10731270	Identifier	argv		10730899	0					
ANR	10731271	Identifier	argn		10730899	1					
ANR	10731272	CastExpression	( size_t ) MAX_COM_LENGTH		10730899	1					
ANR	10731273	CastTarget	size_t		10730899	0					
ANR	10731274	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731275	CompoundStatement		58:32:1900:1900	10730899	1					
ANR	10731276	ExpressionStatement	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	473:5:13222:13316	10730899	0	True				
ANR	10731277	CallExpression	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		10730899	0					
ANR	10731278	Callee	fprintf		10730899	0					
ANR	10731279	Identifier	fprintf		10730899	0					
ANR	10731280	ArgumentList	stderr		10730899	1					
ANR	10731281	Argument	stderr		10730899	0					
ANR	10731282	Identifier	stderr		10730899	0					
ANR	10731283	Argument	"""Comment text may not exceed %u bytes\\n"""		10730899	1					
ANR	10731284	PrimaryExpression	"""Comment text may not exceed %u bytes\\n"""		10730899	0					
ANR	10731285	Argument	( unsigned int ) MAX_COM_LENGTH		10730899	2					
ANR	10731286	CastExpression	( unsigned int ) MAX_COM_LENGTH		10730899	0					
ANR	10731287	CastTarget	unsigned int		10730899	0					
ANR	10731288	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731289	ExpressionStatement	exit ( EXIT_FAILURE )	475:5:13323:13341	10730899	1	True				
ANR	10731290	CallExpression	exit ( EXIT_FAILURE )		10730899	0					
ANR	10731291	Callee	exit		10730899	0					
ANR	10731292	Identifier	exit		10730899	0					
ANR	10731293	ArgumentList	EXIT_FAILURE		10730899	1					
ANR	10731294	Argument	EXIT_FAILURE		10730899	0					
ANR	10731295	Identifier	EXIT_FAILURE		10730899	0					
ANR	10731296	ExpressionStatement	"strcat ( comment_arg , "" "" )"	477:3:13351:13375	10730899	4	True				
ANR	10731297	CallExpression	"strcat ( comment_arg , "" "" )"		10730899	0					
ANR	10731298	Callee	strcat		10730899	0					
ANR	10731299	Identifier	strcat		10730899	0					
ANR	10731300	ArgumentList	comment_arg		10730899	1					
ANR	10731301	Argument	comment_arg		10730899	0					
ANR	10731302	Identifier	comment_arg		10730899	0					
ANR	10731303	Argument	""" """		10730899	1					
ANR	10731304	PrimaryExpression	""" """		10730899	0					
ANR	10731305	ExpressionStatement	"strcat ( comment_arg , argv [ argn ] )"	478:3:13380:13411	10730899	5	True				
ANR	10731306	CallExpression	"strcat ( comment_arg , argv [ argn ] )"		10730899	0					
ANR	10731307	Callee	strcat		10730899	0					
ANR	10731308	Identifier	strcat		10730899	0					
ANR	10731309	ArgumentList	comment_arg		10730899	1					
ANR	10731310	Argument	comment_arg		10730899	0					
ANR	10731311	Identifier	comment_arg		10730899	0					
ANR	10731312	Argument	argv [ argn ]		10730899	1					
ANR	10731313	ArrayIndexing	argv [ argn ]		10730899	0					
ANR	10731314	Identifier	argv		10730899	0					
ANR	10731315	Identifier	argn		10730899	1					
ANR	10731316	ElseStatement	else		10730899	0					
ANR	10731317	IfStatement	if ( strlen ( comment_arg ) >= ( size_t ) MAX_COM_LENGTH )		10730899	0					
ANR	10731318	Condition	strlen ( comment_arg ) >= ( size_t ) MAX_COM_LENGTH	480:17:13433:13478	10730899	0	True				
ANR	10731319	RelationalExpression	strlen ( comment_arg ) >= ( size_t ) MAX_COM_LENGTH		10730899	0		>=			
ANR	10731320	CallExpression	strlen ( comment_arg )		10730899	0					
ANR	10731321	Callee	strlen		10730899	0					
ANR	10731322	Identifier	strlen		10730899	0					
ANR	10731323	ArgumentList	comment_arg		10730899	1					
ANR	10731324	Argument	comment_arg		10730899	0					
ANR	10731325	Identifier	comment_arg		10730899	0					
ANR	10731326	CastExpression	( size_t ) MAX_COM_LENGTH		10730899	1					
ANR	10731327	CastTarget	size_t		10730899	0					
ANR	10731328	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731329	CompoundStatement		66:65:2166:2166	10730899	1					
ANR	10731330	ExpressionStatement	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	481:1:13484:13574	10730899	0	True				
ANR	10731331	CallExpression	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		10730899	0					
ANR	10731332	Callee	fprintf		10730899	0					
ANR	10731333	Identifier	fprintf		10730899	0					
ANR	10731334	ArgumentList	stderr		10730899	1					
ANR	10731335	Argument	stderr		10730899	0					
ANR	10731336	Identifier	stderr		10730899	0					
ANR	10731337	Argument	"""Comment text may not exceed %u bytes\\n"""		10730899	1					
ANR	10731338	PrimaryExpression	"""Comment text may not exceed %u bytes\\n"""		10730899	0					
ANR	10731339	Argument	( unsigned int ) MAX_COM_LENGTH		10730899	2					
ANR	10731340	CastExpression	( unsigned int ) MAX_COM_LENGTH		10730899	0					
ANR	10731341	CastTarget	unsigned int		10730899	0					
ANR	10731342	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731343	ExpressionStatement	exit ( EXIT_FAILURE )	483:1:13577:13595	10730899	1	True				
ANR	10731344	CallExpression	exit ( EXIT_FAILURE )		10730899	0					
ANR	10731345	Callee	exit		10730899	0					
ANR	10731346	Identifier	exit		10730899	0					
ANR	10731347	ArgumentList	EXIT_FAILURE		10730899	1					
ANR	10731348	Argument	EXIT_FAILURE		10730899	0					
ANR	10731349	Identifier	EXIT_FAILURE		10730899	0					
ANR	10731350	ExpressionStatement	comment_length = ( unsigned int ) strlen ( comment_arg )	485:6:13611:13662	10730899	3	True				
ANR	10731351	AssignmentExpression	comment_length = ( unsigned int ) strlen ( comment_arg )		10730899	0		=			
ANR	10731352	Identifier	comment_length		10730899	0					
ANR	10731353	CastExpression	( unsigned int ) strlen ( comment_arg )		10730899	1					
ANR	10731354	CastTarget	unsigned int		10730899	0					
ANR	10731355	CallExpression	strlen ( comment_arg )		10730899	1					
ANR	10731356	Callee	strlen		10730899	0					
ANR	10731357	Identifier	strlen		10730899	0					
ANR	10731358	ArgumentList	comment_arg		10730899	1					
ANR	10731359	Argument	comment_arg		10730899	0					
ANR	10731360	Identifier	comment_arg		10730899	0					
ANR	10731361	ElseStatement	else		10730899	0					
ANR	10731362	ExpressionStatement	usage ( )	487:6:13681:13688	10730899	0	True				
ANR	10731363	CallExpression	usage ( )		10730899	0					
ANR	10731364	Callee	usage		10730899	0					
ANR	10731365	Identifier	usage		10730899	0					
ANR	10731366	ArgumentList			10730899	1					
ANR	10731367	IfStatement	if ( comment_arg != NULL && comment_file != NULL )		10730899	11					
ANR	10731368	Condition	comment_arg != NULL && comment_file != NULL	491:6:13746:13788	10730899	0	True				
ANR	10731369	AndExpression	comment_arg != NULL && comment_file != NULL		10730899	0		&&			
ANR	10731370	EqualityExpression	comment_arg != NULL		10730899	0		!=			
ANR	10731371	Identifier	comment_arg		10730899	0					
ANR	10731372	Identifier	NULL		10730899	1					
ANR	10731373	EqualityExpression	comment_file != NULL		10730899	1		!=			
ANR	10731374	Identifier	comment_file		10730899	0					
ANR	10731375	Identifier	NULL		10730899	1					
ANR	10731376	ExpressionStatement	usage ( )	492:4:13795:13802	10730899	1	True				
ANR	10731377	CallExpression	usage ( )		10730899	0					
ANR	10731378	Callee	usage		10730899	0					
ANR	10731379	Identifier	usage		10730899	0					
ANR	10731380	ArgumentList			10730899	1					
ANR	10731381	IfStatement	if ( comment_arg == NULL && comment_file == NULL && argn >= argc )		10730899	12					
ANR	10731382	Condition	comment_arg == NULL && comment_file == NULL && argn >= argc	496:6:13961:14019	10730899	0	True				
ANR	10731383	AndExpression	comment_arg == NULL && comment_file == NULL && argn >= argc		10730899	0		&&			
ANR	10731384	EqualityExpression	comment_arg == NULL		10730899	0		==			
ANR	10731385	Identifier	comment_arg		10730899	0					
ANR	10731386	Identifier	NULL		10730899	1					
ANR	10731387	AndExpression	comment_file == NULL && argn >= argc		10730899	1		&&			
ANR	10731388	EqualityExpression	comment_file == NULL		10730899	0		==			
ANR	10731389	Identifier	comment_file		10730899	0					
ANR	10731390	Identifier	NULL		10730899	1					
ANR	10731391	RelationalExpression	argn >= argc		10730899	1		>=			
ANR	10731392	Identifier	argn		10730899	0					
ANR	10731393	Identifier	argc		10730899	1					
ANR	10731394	ExpressionStatement	usage ( )	497:4:14026:14033	10730899	1	True				
ANR	10731395	CallExpression	usage ( )		10730899	0					
ANR	10731396	Callee	usage		10730899	0					
ANR	10731397	Identifier	usage		10730899	0					
ANR	10731398	ArgumentList			10730899	1					
ANR	10731399	IfStatement	if ( argn < argc )		10730899	13					
ANR	10731400	Condition	argn < argc	500:6:14071:14081	10730899	0	True				
ANR	10731401	RelationalExpression	argn < argc		10730899	0		<			
ANR	10731402	Identifier	argn		10730899	0					
ANR	10731403	Identifier	argc		10730899	1					
ANR	10731404	CompoundStatement		86:19:2769:2769	10730899	1					
ANR	10731405	IfStatement	"if ( ( infile = fopen ( argv [ argn ] , READ_BINARY ) ) == NULL )"		10730899	0					
ANR	10731406	Condition	"( infile = fopen ( argv [ argn ] , READ_BINARY ) ) == NULL"	501:8:14094:14142	10730899	0	True				
ANR	10731407	EqualityExpression	"( infile = fopen ( argv [ argn ] , READ_BINARY ) ) == NULL"		10730899	0		==			
ANR	10731408	AssignmentExpression	"infile = fopen ( argv [ argn ] , READ_BINARY )"		10730899	0		=			
ANR	10731409	Identifier	infile		10730899	0					
ANR	10731410	CallExpression	"fopen ( argv [ argn ] , READ_BINARY )"		10730899	1					
ANR	10731411	Callee	fopen		10730899	0					
ANR	10731412	Identifier	fopen		10730899	0					
ANR	10731413	ArgumentList	argv [ argn ]		10730899	1					
ANR	10731414	Argument	argv [ argn ]		10730899	0					
ANR	10731415	ArrayIndexing	argv [ argn ]		10730899	0					
ANR	10731416	Identifier	argv		10730899	0					
ANR	10731417	Identifier	argn		10730899	1					
ANR	10731418	Argument	READ_BINARY		10730899	1					
ANR	10731419	Identifier	READ_BINARY		10730899	0					
ANR	10731420	Identifier	NULL		10730899	1					
ANR	10731421	CompoundStatement		87:59:2830:2830	10730899	1					
ANR	10731422	ExpressionStatement	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn ] )"	502:6:14153:14213	10730899	0	True				
ANR	10731423	CallExpression	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn ] )"		10730899	0					
ANR	10731424	Callee	fprintf		10730899	0					
ANR	10731425	Identifier	fprintf		10730899	0					
ANR	10731426	ArgumentList	stderr		10730899	1					
ANR	10731427	Argument	stderr		10730899	0					
ANR	10731428	Identifier	stderr		10730899	0					
ANR	10731429	Argument	"""%s: can't open %s\\n"""		10730899	1					
ANR	10731430	PrimaryExpression	"""%s: can't open %s\\n"""		10730899	0					
ANR	10731431	Argument	progname		10730899	2					
ANR	10731432	Identifier	progname		10730899	0					
ANR	10731433	Argument	argv [ argn ]		10730899	3					
ANR	10731434	ArrayIndexing	argv [ argn ]		10730899	0					
ANR	10731435	Identifier	argv		10730899	0					
ANR	10731436	Identifier	argn		10730899	1					
ANR	10731437	ExpressionStatement	exit ( EXIT_FAILURE )	503:6:14221:14239	10730899	1	True				
ANR	10731438	CallExpression	exit ( EXIT_FAILURE )		10730899	0					
ANR	10731439	Callee	exit		10730899	0					
ANR	10731440	Identifier	exit		10730899	0					
ANR	10731441	ArgumentList	EXIT_FAILURE		10730899	1					
ANR	10731442	Argument	EXIT_FAILURE		10730899	0					
ANR	10731443	Identifier	EXIT_FAILURE		10730899	0					
ANR	10731444	ElseStatement	else		10730899	0					
ANR	10731445	CompoundStatement		91:9:2941:2941	10730899	0					
ANR	10731446	ExpressionStatement	"setmode ( fileno ( stdin ) , O_BINARY )"	508:4:14350:14382	10730899	0	True				
ANR	10731447	CallExpression	"setmode ( fileno ( stdin ) , O_BINARY )"		10730899	0					
ANR	10731448	Callee	setmode		10730899	0					
ANR	10731449	Identifier	setmode		10730899	0					
ANR	10731450	ArgumentList	fileno ( stdin )		10730899	1					
ANR	10731451	Argument	fileno ( stdin )		10730899	0					
ANR	10731452	CallExpression	fileno ( stdin )		10730899	0					
ANR	10731453	Callee	fileno		10730899	0					
ANR	10731454	Identifier	fileno		10730899	0					
ANR	10731455	ArgumentList	stdin		10730899	1					
ANR	10731456	Argument	stdin		10730899	0					
ANR	10731457	Identifier	stdin		10730899	0					
ANR	10731458	Argument	O_BINARY		10730899	1					
ANR	10731459	Identifier	O_BINARY		10730899	0					
ANR	10731460	IfStatement	"if ( ( infile = fdopen ( fileno ( stdin ) , READ_BINARY ) ) == NULL )"		10730899	1					
ANR	10731461	Condition	"( infile = fdopen ( fileno ( stdin ) , READ_BINARY ) ) == NULL"	511:8:14456:14508	10730899	0	True				
ANR	10731462	EqualityExpression	"( infile = fdopen ( fileno ( stdin ) , READ_BINARY ) ) == NULL"		10730899	0		==			
ANR	10731463	AssignmentExpression	"infile = fdopen ( fileno ( stdin ) , READ_BINARY )"		10730899	0		=			
ANR	10731464	Identifier	infile		10730899	0					
ANR	10731465	CallExpression	"fdopen ( fileno ( stdin ) , READ_BINARY )"		10730899	1					
ANR	10731466	Callee	fdopen		10730899	0					
ANR	10731467	Identifier	fdopen		10730899	0					
ANR	10731468	ArgumentList	fileno ( stdin )		10730899	1					
ANR	10731469	Argument	fileno ( stdin )		10730899	0					
ANR	10731470	CallExpression	fileno ( stdin )		10730899	0					
ANR	10731471	Callee	fileno		10730899	0					
ANR	10731472	Identifier	fileno		10730899	0					
ANR	10731473	ArgumentList	stdin		10730899	1					
ANR	10731474	Argument	stdin		10730899	0					
ANR	10731475	Identifier	stdin		10730899	0					
ANR	10731476	Argument	READ_BINARY		10730899	1					
ANR	10731477	Identifier	READ_BINARY		10730899	0					
ANR	10731478	Identifier	NULL		10730899	1					
ANR	10731479	CompoundStatement		97:63:3196:3196	10730899	1					
ANR	10731480	ExpressionStatement	"fprintf ( stderr , ""%s: can't open stdin\\n"" , progname )"	512:6:14519:14570	10730899	0	True				
ANR	10731481	CallExpression	"fprintf ( stderr , ""%s: can't open stdin\\n"" , progname )"		10730899	0					
ANR	10731482	Callee	fprintf		10730899	0					
ANR	10731483	Identifier	fprintf		10730899	0					
ANR	10731484	ArgumentList	stderr		10730899	1					
ANR	10731485	Argument	stderr		10730899	0					
ANR	10731486	Identifier	stderr		10730899	0					
ANR	10731487	Argument	"""%s: can't open stdin\\n"""		10730899	1					
ANR	10731488	PrimaryExpression	"""%s: can't open stdin\\n"""		10730899	0					
ANR	10731489	Argument	progname		10730899	2					
ANR	10731490	Identifier	progname		10730899	0					
ANR	10731491	ExpressionStatement	exit ( EXIT_FAILURE )	513:6:14578:14596	10730899	1	True				
ANR	10731492	CallExpression	exit ( EXIT_FAILURE )		10730899	0					
ANR	10731493	Callee	exit		10730899	0					
ANR	10731494	Identifier	exit		10730899	0					
ANR	10731495	ArgumentList	EXIT_FAILURE		10730899	1					
ANR	10731496	Argument	EXIT_FAILURE		10730899	0					
ANR	10731497	Identifier	EXIT_FAILURE		10730899	0					
ANR	10731498	IfStatement	if ( argn != argc - 2 )		10730899	14					
ANR	10731499	Condition	argn != argc - 2	523:6:14750:14763	10730899	0	True				
ANR	10731500	EqualityExpression	argn != argc - 2		10730899	0		!=			
ANR	10731501	Identifier	argn		10730899	0					
ANR	10731502	AdditiveExpression	argc - 2		10730899	1		-			
ANR	10731503	Identifier	argc		10730899	0					
ANR	10731504	PrimaryExpression	2		10730899	1					
ANR	10731505	CompoundStatement		109:22:3451:3451	10730899	1					
ANR	10731506	ExpressionStatement	"fprintf ( stderr , ""%s: must name one input and one output file\\n"" , progname )"	524:4:14772:14851	10730899	0	True				
ANR	10731507	CallExpression	"fprintf ( stderr , ""%s: must name one input and one output file\\n"" , progname )"		10730899	0					
ANR	10731508	Callee	fprintf		10730899	0					
ANR	10731509	Identifier	fprintf		10730899	0					
ANR	10731510	ArgumentList	stderr		10730899	1					
ANR	10731511	Argument	stderr		10730899	0					
ANR	10731512	Identifier	stderr		10730899	0					
ANR	10731513	Argument	"""%s: must name one input and one output file\\n"""		10730899	1					
ANR	10731514	PrimaryExpression	"""%s: must name one input and one output file\\n"""		10730899	0					
ANR	10731515	Argument	progname		10730899	2					
ANR	10731516	Identifier	progname		10730899	0					
ANR	10731517	ExpressionStatement	usage ( )	526:4:14857:14864	10730899	1	True				
ANR	10731518	CallExpression	usage ( )		10730899	0					
ANR	10731519	Callee	usage		10730899	0					
ANR	10731520	Identifier	usage		10730899	0					
ANR	10731521	ArgumentList			10730899	1					
ANR	10731522	IfStatement	"if ( ( outfile = fopen ( argv [ argn + 1 ] , WRITE_BINARY ) ) == NULL )"		10730899	15					
ANR	10731523	Condition	"( outfile = fopen ( argv [ argn + 1 ] , WRITE_BINARY ) ) == NULL"	528:6:14876:14928	10730899	0	True				
ANR	10731524	EqualityExpression	"( outfile = fopen ( argv [ argn + 1 ] , WRITE_BINARY ) ) == NULL"		10730899	0		==			
ANR	10731525	AssignmentExpression	"outfile = fopen ( argv [ argn + 1 ] , WRITE_BINARY )"		10730899	0		=			
ANR	10731526	Identifier	outfile		10730899	0					
ANR	10731527	CallExpression	"fopen ( argv [ argn + 1 ] , WRITE_BINARY )"		10730899	1					
ANR	10731528	Callee	fopen		10730899	0					
ANR	10731529	Identifier	fopen		10730899	0					
ANR	10731530	ArgumentList	argv [ argn + 1 ]		10730899	1					
ANR	10731531	Argument	argv [ argn + 1 ]		10730899	0					
ANR	10731532	ArrayIndexing	argv [ argn + 1 ]		10730899	0					
ANR	10731533	Identifier	argv		10730899	0					
ANR	10731534	AdditiveExpression	argn + 1		10730899	1		+			
ANR	10731535	Identifier	argn		10730899	0					
ANR	10731536	PrimaryExpression	1		10730899	1					
ANR	10731537	Argument	WRITE_BINARY		10730899	1					
ANR	10731538	Identifier	WRITE_BINARY		10730899	0					
ANR	10731539	Identifier	NULL		10730899	1					
ANR	10731540	CompoundStatement		114:61:3616:3616	10730899	1					
ANR	10731541	ExpressionStatement	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn + 1 ] )"	529:4:14937:14999	10730899	0	True				
ANR	10731542	CallExpression	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn + 1 ] )"		10730899	0					
ANR	10731543	Callee	fprintf		10730899	0					
ANR	10731544	Identifier	fprintf		10730899	0					
ANR	10731545	ArgumentList	stderr		10730899	1					
ANR	10731546	Argument	stderr		10730899	0					
ANR	10731547	Identifier	stderr		10730899	0					
ANR	10731548	Argument	"""%s: can't open %s\\n"""		10730899	1					
ANR	10731549	PrimaryExpression	"""%s: can't open %s\\n"""		10730899	0					
ANR	10731550	Argument	progname		10730899	2					
ANR	10731551	Identifier	progname		10730899	0					
ANR	10731552	Argument	argv [ argn + 1 ]		10730899	3					
ANR	10731553	ArrayIndexing	argv [ argn + 1 ]		10730899	0					
ANR	10731554	Identifier	argv		10730899	0					
ANR	10731555	AdditiveExpression	argn + 1		10730899	1		+			
ANR	10731556	Identifier	argn		10730899	0					
ANR	10731557	PrimaryExpression	1		10730899	1					
ANR	10731558	ExpressionStatement	exit ( EXIT_FAILURE )	530:4:15005:15023	10730899	1	True				
ANR	10731559	CallExpression	exit ( EXIT_FAILURE )		10730899	0					
ANR	10731560	Callee	exit		10730899	0					
ANR	10731561	Identifier	exit		10730899	0					
ANR	10731562	ArgumentList	EXIT_FAILURE		10730899	1					
ANR	10731563	Argument	EXIT_FAILURE		10730899	0					
ANR	10731564	Identifier	EXIT_FAILURE		10730899	0					
ANR	10731565	IfStatement	if ( comment_arg == NULL )		10730899	16					
ANR	10731566	Condition	comment_arg == NULL	553:6:15669:15687	10730899	0	True				
ANR	10731567	EqualityExpression	comment_arg == NULL		10730899	0		==			
ANR	10731568	Identifier	comment_arg		10730899	0					
ANR	10731569	Identifier	NULL		10730899	1					
ANR	10731570	CompoundStatement		141:4:4402:4407	10730899	1					
ANR	10731571	IdentifierDeclStatement	FILE * src_file ;	554:4:15696:15711	10730899	0	True				
ANR	10731572	IdentifierDecl	* src_file		10730899	0					
ANR	10731573	IdentifierDeclType	FILE *		10730899	0					
ANR	10731574	Identifier	src_file		10730899	1					
ANR	10731575	IdentifierDeclStatement	int c ;	555:4:15717:15722	10730899	1	True				
ANR	10731576	IdentifierDecl	c		10730899	0					
ANR	10731577	IdentifierDeclType	int		10730899	0					
ANR	10731578	Identifier	c		10730899	1					
ANR	10731579	ExpressionStatement	comment_arg = ( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )	557:4:15729:15783	10730899	2	True				
ANR	10731580	AssignmentExpression	comment_arg = ( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )		10730899	0		=			
ANR	10731581	Identifier	comment_arg		10730899	0					
ANR	10731582	CastExpression	( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )		10730899	1					
ANR	10731583	CastTarget	char *		10730899	0					
ANR	10731584	CallExpression	malloc ( ( size_t ) MAX_COM_LENGTH )		10730899	1					
ANR	10731585	Callee	malloc		10730899	0					
ANR	10731586	Identifier	malloc		10730899	0					
ANR	10731587	ArgumentList	( size_t ) MAX_COM_LENGTH		10730899	1					
ANR	10731588	Argument	( size_t ) MAX_COM_LENGTH		10730899	0					
ANR	10731589	CastExpression	( size_t ) MAX_COM_LENGTH		10730899	0					
ANR	10731590	CastTarget	size_t		10730899	0					
ANR	10731591	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731592	IfStatement	if ( comment_arg == NULL )		10730899	3					
ANR	10731593	Condition	comment_arg == NULL	558:8:15793:15811	10730899	0	True				
ANR	10731594	EqualityExpression	comment_arg == NULL		10730899	0		==			
ANR	10731595	Identifier	comment_arg		10730899	0					
ANR	10731596	Identifier	NULL		10730899	1					
ANR	10731597	ExpressionStatement	"ERREXIT ( ""Insufficient memory"" )"	559:6:15820:15850	10730899	1	True				
ANR	10731598	CallExpression	"ERREXIT ( ""Insufficient memory"" )"		10730899	0					
ANR	10731599	Callee	ERREXIT		10730899	0					
ANR	10731600	Identifier	ERREXIT		10730899	0					
ANR	10731601	ArgumentList	"""Insufficient memory"""		10730899	1					
ANR	10731602	Argument	"""Insufficient memory"""		10730899	0					
ANR	10731603	PrimaryExpression	"""Insufficient memory"""		10730899	0					
ANR	10731604	ExpressionStatement	comment_length = 0	560:4:15856:15874	10730899	4	True				
ANR	10731605	AssignmentExpression	comment_length = 0		10730899	0		=			
ANR	10731606	Identifier	comment_length		10730899	0					
ANR	10731607	PrimaryExpression	0		10730899	1					
ANR	10731608	ExpressionStatement	src_file = ( comment_file != NULL ? comment_file : stdin )	561:4:15880:15936	10730899	5	True				
ANR	10731609	AssignmentExpression	src_file = ( comment_file != NULL ? comment_file : stdin )		10730899	0		=			
ANR	10731610	Identifier	src_file		10730899	0					
ANR	10731611	ConditionalExpression	comment_file != NULL ? comment_file : stdin		10730899	1					
ANR	10731612	Condition	comment_file != NULL		10730899	0					
ANR	10731613	EqualityExpression	comment_file != NULL		10730899	0		!=			
ANR	10731614	Identifier	comment_file		10730899	0					
ANR	10731615	Identifier	NULL		10730899	1					
ANR	10731616	Identifier	comment_file		10730899	1					
ANR	10731617	Identifier	stdin		10730899	2					
ANR	10731618	WhileStatement	while ( ( c = getc ( src_file ) ) != EOF )		10730899	6					
ANR	10731619	Condition	( c = getc ( src_file ) ) != EOF	562:11:15949:15975	10730899	0	True				
ANR	10731620	EqualityExpression	( c = getc ( src_file ) ) != EOF		10730899	0		!=			
ANR	10731621	AssignmentExpression	c = getc ( src_file )		10730899	0		=			
ANR	10731622	Identifier	c		10730899	0					
ANR	10731623	CallExpression	getc ( src_file )		10730899	1					
ANR	10731624	Callee	getc		10730899	0					
ANR	10731625	Identifier	getc		10730899	0					
ANR	10731626	ArgumentList	src_file		10730899	1					
ANR	10731627	Argument	src_file		10730899	0					
ANR	10731628	Identifier	src_file		10730899	0					
ANR	10731629	Identifier	EOF		10730899	1					
ANR	10731630	CompoundStatement		148:40:4663:4663	10730899	1					
ANR	10731631	IfStatement	if ( comment_length >= ( unsigned int ) MAX_COM_LENGTH )		10730899	0					
ANR	10731632	Condition	comment_length >= ( unsigned int ) MAX_COM_LENGTH	563:10:15990:16036	10730899	0	True				
ANR	10731633	RelationalExpression	comment_length >= ( unsigned int ) MAX_COM_LENGTH		10730899	0		>=			
ANR	10731634	Identifier	comment_length		10730899	0					
ANR	10731635	CastExpression	( unsigned int ) MAX_COM_LENGTH		10730899	1					
ANR	10731636	CastTarget	unsigned int		10730899	0					
ANR	10731637	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731638	CompoundStatement		149:59:4724:4724	10730899	1					
ANR	10731639	ExpressionStatement	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	564:1:16042:16132	10730899	0	True				
ANR	10731640	CallExpression	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		10730899	0					
ANR	10731641	Callee	fprintf		10730899	0					
ANR	10731642	Identifier	fprintf		10730899	0					
ANR	10731643	ArgumentList	stderr		10730899	1					
ANR	10731644	Argument	stderr		10730899	0					
ANR	10731645	Identifier	stderr		10730899	0					
ANR	10731646	Argument	"""Comment text may not exceed %u bytes\\n"""		10730899	1					
ANR	10731647	PrimaryExpression	"""Comment text may not exceed %u bytes\\n"""		10730899	0					
ANR	10731648	Argument	( unsigned int ) MAX_COM_LENGTH		10730899	2					
ANR	10731649	CastExpression	( unsigned int ) MAX_COM_LENGTH		10730899	0					
ANR	10731650	CastTarget	unsigned int		10730899	0					
ANR	10731651	Identifier	MAX_COM_LENGTH		10730899	1					
ANR	10731652	ExpressionStatement	exit ( EXIT_FAILURE )	566:1:16135:16153	10730899	1	True				
ANR	10731653	CallExpression	exit ( EXIT_FAILURE )		10730899	0					
ANR	10731654	Callee	exit		10730899	0					
ANR	10731655	Identifier	exit		10730899	0					
ANR	10731656	ArgumentList	EXIT_FAILURE		10730899	1					
ANR	10731657	Argument	EXIT_FAILURE		10730899	0					
ANR	10731658	Identifier	EXIT_FAILURE		10730899	0					
ANR	10731659	ExpressionStatement	comment_arg [ comment_length ++ ] = ( char ) c	568:6:16169:16209	10730899	1	True				
ANR	10731660	AssignmentExpression	comment_arg [ comment_length ++ ] = ( char ) c		10730899	0		=			
ANR	10731661	ArrayIndexing	comment_arg [ comment_length ++ ]		10730899	0					
ANR	10731662	Identifier	comment_arg		10730899	0					
ANR	10731663	PostIncDecOperationExpression	comment_length ++		10730899	1					
ANR	10731664	Identifier	comment_length		10730899	0					
ANR	10731665	IncDec	++		10730899	1					
ANR	10731666	CastExpression	( char ) c		10730899	1					
ANR	10731667	CastTarget	char		10730899	0					
ANR	10731668	Identifier	c		10730899	1					
ANR	10731669	IfStatement	if ( comment_file != NULL )		10730899	7					
ANR	10731670	Condition	comment_file != NULL	570:8:16225:16244	10730899	0	True				
ANR	10731671	EqualityExpression	comment_file != NULL		10730899	0		!=			
ANR	10731672	Identifier	comment_file		10730899	0					
ANR	10731673	Identifier	NULL		10730899	1					
ANR	10731674	ExpressionStatement	fclose ( comment_file )	571:6:16253:16273	10730899	1	True				
ANR	10731675	CallExpression	fclose ( comment_file )		10730899	0					
ANR	10731676	Callee	fclose		10730899	0					
ANR	10731677	Identifier	fclose		10730899	0					
ANR	10731678	ArgumentList	comment_file		10730899	1					
ANR	10731679	Argument	comment_file		10730899	0					
ANR	10731680	Identifier	comment_file		10730899	0					
ANR	10731681	ExpressionStatement	marker = scan_JPEG_header ( keep_COM )	580:2:16600:16635	10730899	17	True				
ANR	10731682	AssignmentExpression	marker = scan_JPEG_header ( keep_COM )		10730899	0		=			
ANR	10731683	Identifier	marker		10730899	0					
ANR	10731684	CallExpression	scan_JPEG_header ( keep_COM )		10730899	1					
ANR	10731685	Callee	scan_JPEG_header		10730899	0					
ANR	10731686	Identifier	scan_JPEG_header		10730899	0					
ANR	10731687	ArgumentList	keep_COM		10730899	1					
ANR	10731688	Argument	keep_COM		10730899	0					
ANR	10731689	Identifier	keep_COM		10730899	0					
ANR	10731690	IfStatement	if ( comment_length > 0 )		10730899	18					
ANR	10731691	Condition	comment_length > 0	582:6:16722:16739	10730899	0	True				
ANR	10731692	RelationalExpression	comment_length > 0		10730899	0		>			
ANR	10731693	Identifier	comment_length		10730899	0					
ANR	10731694	PrimaryExpression	0		10730899	1					
ANR	10731695	CompoundStatement		168:26:5427:5427	10730899	1					
ANR	10731696	ExpressionStatement	write_marker ( M_COM )	583:4:16748:16767	10730899	0	True				
ANR	10731697	CallExpression	write_marker ( M_COM )		10730899	0					
ANR	10731698	Callee	write_marker		10730899	0					
ANR	10731699	Identifier	write_marker		10730899	0					
ANR	10731700	ArgumentList	M_COM		10730899	1					
ANR	10731701	Argument	M_COM		10730899	0					
ANR	10731702	Identifier	M_COM		10730899	0					
ANR	10731703	ExpressionStatement	write_2_bytes ( comment_length + 2 )	584:4:16773:16806	10730899	1	True				
ANR	10731704	CallExpression	write_2_bytes ( comment_length + 2 )		10730899	0					
ANR	10731705	Callee	write_2_bytes		10730899	0					
ANR	10731706	Identifier	write_2_bytes		10730899	0					
ANR	10731707	ArgumentList	comment_length + 2		10730899	1					
ANR	10731708	Argument	comment_length + 2		10730899	0					
ANR	10731709	AdditiveExpression	comment_length + 2		10730899	0		+			
ANR	10731710	Identifier	comment_length		10730899	0					
ANR	10731711	PrimaryExpression	2		10730899	1					
ANR	10731712	WhileStatement	while ( comment_length > 0 )		10730899	2					
ANR	10731713	Condition	comment_length > 0	585:11:16819:16836	10730899	0	True				
ANR	10731714	RelationalExpression	comment_length > 0		10730899	0		>			
ANR	10731715	Identifier	comment_length		10730899	0					
ANR	10731716	PrimaryExpression	0		10730899	1					
ANR	10731717	CompoundStatement		171:31:5524:5524	10730899	1					
ANR	10731718	ExpressionStatement	write_1_byte ( * comment_arg ++ )	586:6:16847:16875	10730899	0	True				
ANR	10731719	CallExpression	write_1_byte ( * comment_arg ++ )		10730899	0					
ANR	10731720	Callee	write_1_byte		10730899	0					
ANR	10731721	Identifier	write_1_byte		10730899	0					
ANR	10731722	ArgumentList	* comment_arg ++		10730899	1					
ANR	10731723	Argument	* comment_arg ++		10730899	0					
ANR	10731724	UnaryOperationExpression	* comment_arg ++		10730899	0					
ANR	10731725	UnaryOperator	*		10730899	0					
ANR	10731726	PostIncDecOperationExpression	comment_arg ++		10730899	1					
ANR	10731727	Identifier	comment_arg		10730899	0					
ANR	10731728	IncDec	++		10730899	1					
ANR	10731729	ExpressionStatement	comment_length --	587:6:16883:16899	10730899	1	True				
ANR	10731730	PostIncDecOperationExpression	comment_length --		10730899	0					
ANR	10731731	Identifier	comment_length		10730899	0					
ANR	10731732	IncDec	--		10730899	1					
ANR	10731733	ExpressionStatement	write_marker ( marker )	593:2:17039:17059	10730899	19	True				
ANR	10731734	CallExpression	write_marker ( marker )		10730899	0					
ANR	10731735	Callee	write_marker		10730899	0					
ANR	10731736	Identifier	write_marker		10730899	0					
ANR	10731737	ArgumentList	marker		10730899	1					
ANR	10731738	Argument	marker		10730899	0					
ANR	10731739	Identifier	marker		10730899	0					
ANR	10731740	ExpressionStatement	copy_rest_of_file ( )	594:2:17063:17082	10730899	20	True				
ANR	10731741	CallExpression	copy_rest_of_file ( )		10730899	0					
ANR	10731742	Callee	copy_rest_of_file		10730899	0					
ANR	10731743	Identifier	copy_rest_of_file		10730899	0					
ANR	10731744	ArgumentList			10730899	1					
ANR	10731745	ExpressionStatement	exit ( EXIT_SUCCESS )	597:2:17105:17123	10730899	21	True				
ANR	10731746	CallExpression	exit ( EXIT_SUCCESS )		10730899	0					
ANR	10731747	Callee	exit		10730899	0					
ANR	10731748	Identifier	exit		10730899	0					
ANR	10731749	ArgumentList	EXIT_SUCCESS		10730899	1					
ANR	10731750	Argument	EXIT_SUCCESS		10730899	0					
ANR	10731751	Identifier	EXIT_SUCCESS		10730899	0					
ANR	10731752	ReturnStatement	return 0 ;	598:2:17127:17135	10730899	22	True				
ANR	10731753	PrimaryExpression	0		10730899	0					
ANR	10731754	ReturnType	int		10730899	1					
ANR	10731755	Identifier	main		10730899	2					
ANR	10731756	ParameterList	"int argc , char * * argv"		10730899	3					
ANR	10731757	Parameter	int argc	414:6:11291:11298	10730899	0	True				
ANR	10731758	ParameterType	int		10730899	0					
ANR	10731759	Identifier	argc		10730899	1					
ANR	10731760	Parameter	char * * argv	414:16:11301:11311	10730899	1	True				
ANR	10731761	ParameterType	char * *		10730899	0					
ANR	10731762	Identifier	argv		10730899	1					
ANR	10731763	CFGEntryNode	ENTRY		10730899		True				
ANR	10731764	CFGExitNode	EXIT		10730899		True				
ANR	10731765	InfiniteForNode	true		10730899		True				
ANR	10731766	Symbol	stdin		10730899						
ANR	10731767	Symbol	keep_COM		10730899						
ANR	10731768	Symbol	O_BINARY		10730899						
ANR	10731769	Symbol	comment_length		10730899						
ANR	10731770	Symbol	M_COM		10730899						
ANR	10731771	Symbol	outfile		10730899						
ANR	10731772	Symbol	* comment_arg ++		10730899						
ANR	10731773	Symbol	* argv		10730899						
ANR	10731774	Symbol	infile		10730899						
ANR	10731775	Symbol	fdopen		10730899						
ANR	10731776	Symbol	argv		10730899						
ANR	10731777	Symbol	comment_arg		10730899						
ANR	10731778	Symbol	strlen		10730899						
ANR	10731779	Symbol	& argv		10730899						
ANR	10731780	Symbol	* argn		10730899						
ANR	10731781	Symbol	MAX_COM_LENGTH		10730899						
ANR	10731782	Symbol	arg		10730899						
ANR	10731783	Symbol	* comment_arg		10730899						
ANR	10731784	Symbol	keymatch		10730899						
ANR	10731785	Symbol	EOF		10730899						
ANR	10731786	Symbol	argc		10730899						
ANR	10731787	Symbol	fopen		10730899						
ANR	10731788	Symbol	malloc		10730899						
ANR	10731789	Symbol	NULL		10730899						
ANR	10731790	Symbol	c		10730899						
ANR	10731791	Symbol	* comment_length		10730899						
ANR	10731792	Symbol	stderr		10730899						
ANR	10731793	Symbol	src_file		10730899						
ANR	10731794	Symbol	WRITE_BINARY		10730899						
ANR	10731795	Symbol	ccommand		10730899						
ANR	10731796	Symbol	argn		10730899						
ANR	10731797	Symbol	EXIT_FAILURE		10730899						
ANR	10731798	Symbol	fileno		10730899						
ANR	10731799	Symbol	marker		10730899						
ANR	10731800	Symbol	* progname		10730899						
ANR	10731801	Symbol	progname		10730899						
ANR	10731802	Symbol	EXIT_SUCCESS		10730899						
ANR	10731803	Symbol	comment_file		10730899						
ANR	10731804	Symbol	getc		10730899						
ANR	10731805	Symbol	scan_JPEG_header		10730899						
ANR	10731806	Symbol	* arg		10730899						
ANR	10731807	Symbol	READ_BINARY		10730899						
