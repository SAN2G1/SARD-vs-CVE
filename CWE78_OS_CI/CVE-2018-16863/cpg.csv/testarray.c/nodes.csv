command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	9665665	File	data/converged/CVE-2018-16863_ghostpdl/testarray.c								
ANR	9665666	DeclStmt									
ANR	9665667	Decl							double	double ( void )	get_seconds
ANR	9665668	DeclStmt									
ANR	9665669	Decl							int	"int ( const char * filename , cups_array_t * array )"	load_words
ANR	9665670	Function	main	46:0:1098:10454							
ANR	9665671	FunctionDef	"main (int argc , char * argv [ ])"		9665670	0					
ANR	9665672	CompoundStatement		49:0:1244:10454	9665670	0					
ANR	9665673	IdentifierDeclStatement	int i ;	50:2:1248:1254	9665670	0	True				
ANR	9665674	IdentifierDecl	i		9665670	0					
ANR	9665675	IdentifierDeclType	int		9665670	0					
ANR	9665676	Identifier	i		9665670	1					
ANR	9665677	IdentifierDeclStatement	"cups_array_t * array , * dup_array ;"	51:2:1278:1330	9665670	1	True				
ANR	9665678	IdentifierDecl	* array		9665670	0					
ANR	9665679	IdentifierDeclType	cups_array_t *		9665670	0					
ANR	9665680	Identifier	array		9665670	1					
ANR	9665681	IdentifierDecl	* dup_array		9665670	1					
ANR	9665682	IdentifierDeclType	cups_array_t *		9665670	0					
ANR	9665683	Identifier	dup_array		9665670	1					
ANR	9665684	IdentifierDeclStatement	int status ;	53:2:1357:1368	9665670	2	True				
ANR	9665685	IdentifierDecl	status		9665670	0					
ANR	9665686	IdentifierDeclType	int		9665670	0					
ANR	9665687	Identifier	status		9665670	1					
ANR	9665688	IdentifierDeclStatement	char * text ;	54:2:1392:1403	9665670	3	True				
ANR	9665689	IdentifierDecl	* text		9665670	0					
ANR	9665690	IdentifierDeclType	char *		9665670	0					
ANR	9665691	Identifier	text		9665670	1					
ANR	9665692	IdentifierDeclStatement	char word [ 256 ] ;	55:2:1431:1446	9665670	4	True				
ANR	9665693	IdentifierDecl	word [ 256 ]		9665670	0					
ANR	9665694	IdentifierDeclType	char [ 256 ]		9665670	0					
ANR	9665695	Identifier	word		9665670	1					
ANR	9665696	PrimaryExpression	256		9665670	2					
ANR	9665697	IdentifierDeclStatement	"double start , end ;"	56:2:1472:1510	9665670	5	True				
ANR	9665698	IdentifierDecl	start		9665670	0					
ANR	9665699	IdentifierDeclType	double		9665670	0					
ANR	9665700	Identifier	start		9665670	1					
ANR	9665701	IdentifierDecl	end		9665670	1					
ANR	9665702	IdentifierDeclType	double		9665670	0					
ANR	9665703	Identifier	end		9665670	1					
ANR	9665704	IdentifierDeclStatement	cups_dir_t * dir ;	58:2:1531:1546	9665670	6	True				
ANR	9665705	IdentifierDecl	* dir		9665670	0					
ANR	9665706	IdentifierDeclType	cups_dir_t *		9665670	0					
ANR	9665707	Identifier	dir		9665670	1					
ANR	9665708	IdentifierDeclStatement	cups_dentry_t * dent ;	59:2:1576:1595	9665670	7	True				
ANR	9665709	IdentifierDecl	* dent		9665670	0					
ANR	9665710	IdentifierDeclType	cups_dentry_t *		9665670	0					
ANR	9665711	Identifier	dent		9665670	1					
ANR	9665712	IdentifierDeclStatement	char * saved [ 32 ] ;	60:2:1623:1639	9665670	8	True				
ANR	9665713	IdentifierDecl	* saved [ 32 ]		9665670	0					
ANR	9665714	IdentifierDeclType	char * [ 32 ]		9665670	0					
ANR	9665715	Identifier	saved		9665670	1					
ANR	9665716	PrimaryExpression	32		9665670	2					
ANR	9665717	IdentifierDeclStatement	void * data ;	61:2:1664:1675	9665670	9	True				
ANR	9665718	IdentifierDecl	* data		9665670	0					
ANR	9665719	IdentifierDeclType	void *		9665670	0					
ANR	9665720	Identifier	data		9665670	1					
ANR	9665721	ExpressionStatement	status = 0	68:2:1744:1754	9665670	10	True				
ANR	9665722	AssignmentExpression	status = 0		9665670	0		=			
ANR	9665723	Identifier	status		9665670	0					
ANR	9665724	PrimaryExpression	0		9665670	1					
ANR	9665725	ExpressionStatement	"fputs ( ""cupsArrayNew: "" , stdout )"	74:2:1788:1819	9665670	11	True				
ANR	9665726	CallExpression	"fputs ( ""cupsArrayNew: "" , stdout )"		9665670	0					
ANR	9665727	Callee	fputs		9665670	0					
ANR	9665728	Identifier	fputs		9665670	0					
ANR	9665729	ArgumentList	"""cupsArrayNew: """		9665670	1					
ANR	9665730	Argument	"""cupsArrayNew: """		9665670	0					
ANR	9665731	PrimaryExpression	"""cupsArrayNew: """		9665670	0					
ANR	9665732	Argument	stdout		9665670	1					
ANR	9665733	Identifier	stdout		9665670	0					
ANR	9665734	ExpressionStatement	"data = ( void * ) ""testarray"""	76:2:1824:1851	9665670	12	True				
ANR	9665735	AssignmentExpression	"data = ( void * ) ""testarray"""		9665670	0		=			
ANR	9665736	Identifier	data		9665670	0					
ANR	9665737	CastExpression	"( void * ) ""testarray"""		9665670	1					
ANR	9665738	CastTarget	void *		9665670	0					
ANR	9665739	PrimaryExpression	"""testarray"""		9665670	1					
ANR	9665740	ExpressionStatement	"array = cupsArrayNew ( ( cups_array_func_t ) strcmp , data )"	77:2:1855:1908	9665670	13	True				
ANR	9665741	AssignmentExpression	"array = cupsArrayNew ( ( cups_array_func_t ) strcmp , data )"		9665670	0		=			
ANR	9665742	Identifier	array		9665670	0					
ANR	9665743	CallExpression	"cupsArrayNew ( ( cups_array_func_t ) strcmp , data )"		9665670	1					
ANR	9665744	Callee	cupsArrayNew		9665670	0					
ANR	9665745	Identifier	cupsArrayNew		9665670	0					
ANR	9665746	ArgumentList	( cups_array_func_t ) strcmp		9665670	1					
ANR	9665747	Argument	( cups_array_func_t ) strcmp		9665670	0					
ANR	9665748	CastExpression	( cups_array_func_t ) strcmp		9665670	0					
ANR	9665749	CastTarget	cups_array_func_t		9665670	0					
ANR	9665750	Identifier	strcmp		9665670	1					
ANR	9665751	Argument	data		9665670	1					
ANR	9665752	Identifier	data		9665670	0					
ANR	9665753	IfStatement	if ( array )		9665670	14					
ANR	9665754	Condition	array	79:6:1917:1921	9665670	0	True				
ANR	9665755	Identifier	array		9665670	0					
ANR	9665756	ExpressionStatement	"puts ( ""PASS"" )"	80:4:1928:1940	9665670	1	True				
ANR	9665757	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9665758	Callee	puts		9665670	0					
ANR	9665759	Identifier	puts		9665670	0					
ANR	9665760	ArgumentList	"""PASS"""		9665670	1					
ANR	9665761	Argument	"""PASS"""		9665670	0					
ANR	9665762	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9665763	ElseStatement	else		9665670	0					
ANR	9665764	CompoundStatement		34:2:706:706	9665670	0					
ANR	9665765	ExpressionStatement	"puts ( ""FAIL (returned NULL, expected pointer)"" )"	83:4:1957:2003	9665670	0	True				
ANR	9665766	CallExpression	"puts ( ""FAIL (returned NULL, expected pointer)"" )"		9665670	0					
ANR	9665767	Callee	puts		9665670	0					
ANR	9665768	Identifier	puts		9665670	0					
ANR	9665769	ArgumentList	"""FAIL (returned NULL, expected pointer)"""		9665670	1					
ANR	9665770	Argument	"""FAIL (returned NULL, expected pointer)"""		9665670	0					
ANR	9665771	PrimaryExpression	"""FAIL (returned NULL, expected pointer)"""		9665670	0					
ANR	9665772	ExpressionStatement	status ++	84:4:2009:2018	9665670	1	True				
ANR	9665773	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9665774	Identifier	status		9665670	0					
ANR	9665775	IncDec	++		9665670	1					
ANR	9665776	ExpressionStatement	"fputs ( ""cupsArrayUserData: "" , stdout )"	91:2:2061:2097	9665670	15	True				
ANR	9665777	CallExpression	"fputs ( ""cupsArrayUserData: "" , stdout )"		9665670	0					
ANR	9665778	Callee	fputs		9665670	0					
ANR	9665779	Identifier	fputs		9665670	0					
ANR	9665780	ArgumentList	"""cupsArrayUserData: """		9665670	1					
ANR	9665781	Argument	"""cupsArrayUserData: """		9665670	0					
ANR	9665782	PrimaryExpression	"""cupsArrayUserData: """		9665670	0					
ANR	9665783	Argument	stdout		9665670	1					
ANR	9665784	Identifier	stdout		9665670	0					
ANR	9665785	IfStatement	if ( cupsArrayUserData ( array ) == data )		9665670	16					
ANR	9665786	Condition	cupsArrayUserData ( array ) == data	92:6:2105:2136	9665670	0	True				
ANR	9665787	EqualityExpression	cupsArrayUserData ( array ) == data		9665670	0		==			
ANR	9665788	CallExpression	cupsArrayUserData ( array )		9665670	0					
ANR	9665789	Callee	cupsArrayUserData		9665670	0					
ANR	9665790	Identifier	cupsArrayUserData		9665670	0					
ANR	9665791	ArgumentList	array		9665670	1					
ANR	9665792	Argument	array		9665670	0					
ANR	9665793	Identifier	array		9665670	0					
ANR	9665794	Identifier	data		9665670	1					
ANR	9665795	ExpressionStatement	"puts ( ""PASS"" )"	93:4:2143:2155	9665670	1	True				
ANR	9665796	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9665797	Callee	puts		9665670	0					
ANR	9665798	Identifier	puts		9665670	0					
ANR	9665799	ArgumentList	"""PASS"""		9665670	1					
ANR	9665800	Argument	"""PASS"""		9665670	0					
ANR	9665801	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9665802	ElseStatement	else		9665670	0					
ANR	9665803	CompoundStatement		47:2:921:921	9665670	0					
ANR	9665804	ExpressionStatement	"printf ( ""FAIL (returned %p instead of %p!)\\n"" , cupsArrayUserData ( array ) , data )"	96:4:2172:2260	9665670	0	True				
ANR	9665805	CallExpression	"printf ( ""FAIL (returned %p instead of %p!)\\n"" , cupsArrayUserData ( array ) , data )"		9665670	0					
ANR	9665806	Callee	printf		9665670	0					
ANR	9665807	Identifier	printf		9665670	0					
ANR	9665808	ArgumentList	"""FAIL (returned %p instead of %p!)\\n"""		9665670	1					
ANR	9665809	Argument	"""FAIL (returned %p instead of %p!)\\n"""		9665670	0					
ANR	9665810	PrimaryExpression	"""FAIL (returned %p instead of %p!)\\n"""		9665670	0					
ANR	9665811	Argument	cupsArrayUserData ( array )		9665670	1					
ANR	9665812	CallExpression	cupsArrayUserData ( array )		9665670	0					
ANR	9665813	Callee	cupsArrayUserData		9665670	0					
ANR	9665814	Identifier	cupsArrayUserData		9665670	0					
ANR	9665815	ArgumentList	array		9665670	1					
ANR	9665816	Argument	array		9665670	0					
ANR	9665817	Identifier	array		9665670	0					
ANR	9665818	Argument	data		9665670	2					
ANR	9665819	Identifier	data		9665670	0					
ANR	9665820	ExpressionStatement	status ++	98:4:2266:2275	9665670	1	True				
ANR	9665821	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9665822	Identifier	status		9665670	0					
ANR	9665823	IncDec	++		9665670	1					
ANR	9665824	ExpressionStatement	"fputs ( ""cupsArrayAdd: "" , stdout )"	105:2:2313:2344	9665670	17	True				
ANR	9665825	CallExpression	"fputs ( ""cupsArrayAdd: "" , stdout )"		9665670	0					
ANR	9665826	Callee	fputs		9665670	0					
ANR	9665827	Identifier	fputs		9665670	0					
ANR	9665828	ArgumentList	"""cupsArrayAdd: """		9665670	1					
ANR	9665829	Argument	"""cupsArrayAdd: """		9665670	0					
ANR	9665830	PrimaryExpression	"""cupsArrayAdd: """		9665670	0					
ANR	9665831	Argument	stdout		9665670	1					
ANR	9665832	Identifier	stdout		9665670	0					
ANR	9665833	IfStatement	"if ( ! cupsArrayAdd ( array , strdup ( ""One Fish"" ) ) )"		9665670	18					
ANR	9665834	Condition	"! cupsArrayAdd ( array , strdup ( ""One Fish"" ) )"	107:6:2353:2392	9665670	0	True				
ANR	9665835	UnaryOperationExpression	"! cupsArrayAdd ( array , strdup ( ""One Fish"" ) )"		9665670	0					
ANR	9665836	UnaryOperator	!		9665670	0					
ANR	9665837	CallExpression	"cupsArrayAdd ( array , strdup ( ""One Fish"" ) )"		9665670	1					
ANR	9665838	Callee	cupsArrayAdd		9665670	0					
ANR	9665839	Identifier	cupsArrayAdd		9665670	0					
ANR	9665840	ArgumentList	array		9665670	1					
ANR	9665841	Argument	array		9665670	0					
ANR	9665842	Identifier	array		9665670	0					
ANR	9665843	Argument	"strdup ( ""One Fish"" )"		9665670	1					
ANR	9665844	CallExpression	"strdup ( ""One Fish"" )"		9665670	0					
ANR	9665845	Callee	strdup		9665670	0					
ANR	9665846	Identifier	strdup		9665670	0					
ANR	9665847	ArgumentList	"""One Fish"""		9665670	1					
ANR	9665848	Argument	"""One Fish"""		9665670	0					
ANR	9665849	PrimaryExpression	"""One Fish"""		9665670	0					
ANR	9665850	CompoundStatement		60:2:1152:1152	9665670	1					
ANR	9665851	ExpressionStatement	"puts ( ""FAIL (\\""One Fish\\"")"" )"	109:4:2403:2430	9665670	0	True				
ANR	9665852	CallExpression	"puts ( ""FAIL (\\""One Fish\\"")"" )"		9665670	0					
ANR	9665853	Callee	puts		9665670	0					
ANR	9665854	Identifier	puts		9665670	0					
ANR	9665855	ArgumentList	"""FAIL (\\""One Fish\\"")"""		9665670	1					
ANR	9665856	Argument	"""FAIL (\\""One Fish\\"")"""		9665670	0					
ANR	9665857	PrimaryExpression	"""FAIL (\\""One Fish\\"")"""		9665670	0					
ANR	9665858	ExpressionStatement	status ++	110:4:2436:2445	9665670	1	True				
ANR	9665859	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9665860	Identifier	status		9665670	0					
ANR	9665861	IncDec	++		9665670	1					
ANR	9665862	ElseStatement	else		9665670	0					
ANR	9665863	CompoundStatement		65:2:1215:1215	9665670	0					
ANR	9665864	IfStatement	"if ( ! cupsArrayAdd ( array , strdup ( ""Two Fish"" ) ) )"		9665670	0					
ANR	9665865	Condition	"! cupsArrayAdd ( array , strdup ( ""Two Fish"" ) )"	114:8:2470:2509	9665670	0	True				
ANR	9665866	UnaryOperationExpression	"! cupsArrayAdd ( array , strdup ( ""Two Fish"" ) )"		9665670	0					
ANR	9665867	UnaryOperator	!		9665670	0					
ANR	9665868	CallExpression	"cupsArrayAdd ( array , strdup ( ""Two Fish"" ) )"		9665670	1					
ANR	9665869	Callee	cupsArrayAdd		9665670	0					
ANR	9665870	Identifier	cupsArrayAdd		9665670	0					
ANR	9665871	ArgumentList	array		9665670	1					
ANR	9665872	Argument	array		9665670	0					
ANR	9665873	Identifier	array		9665670	0					
ANR	9665874	Argument	"strdup ( ""Two Fish"" )"		9665670	1					
ANR	9665875	CallExpression	"strdup ( ""Two Fish"" )"		9665670	0					
ANR	9665876	Callee	strdup		9665670	0					
ANR	9665877	Identifier	strdup		9665670	0					
ANR	9665878	ArgumentList	"""Two Fish"""		9665670	1					
ANR	9665879	Argument	"""Two Fish"""		9665670	0					
ANR	9665880	PrimaryExpression	"""Two Fish"""		9665670	0					
ANR	9665881	CompoundStatement		67:4:1271:1271	9665670	1					
ANR	9665882	ExpressionStatement	"puts ( ""FAIL (\\""Two Fish\\"")"" )"	116:6:2524:2551	9665670	0	True				
ANR	9665883	CallExpression	"puts ( ""FAIL (\\""Two Fish\\"")"" )"		9665670	0					
ANR	9665884	Callee	puts		9665670	0					
ANR	9665885	Identifier	puts		9665670	0					
ANR	9665886	ArgumentList	"""FAIL (\\""Two Fish\\"")"""		9665670	1					
ANR	9665887	Argument	"""FAIL (\\""Two Fish\\"")"""		9665670	0					
ANR	9665888	PrimaryExpression	"""FAIL (\\""Two Fish\\"")"""		9665670	0					
ANR	9665889	ExpressionStatement	status ++	117:6:2559:2568	9665670	1	True				
ANR	9665890	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9665891	Identifier	status		9665670	0					
ANR	9665892	IncDec	++		9665670	1					
ANR	9665893	ElseStatement	else		9665670	0					
ANR	9665894	CompoundStatement		72:4:1344:1344	9665670	0					
ANR	9665895	IfStatement	"if ( ! cupsArrayAdd ( array , strdup ( ""Red Fish"" ) ) )"		9665670	0					
ANR	9665896	Condition	"! cupsArrayAdd ( array , strdup ( ""Red Fish"" ) )"	121:10:2601:2640	9665670	0	True				
ANR	9665897	UnaryOperationExpression	"! cupsArrayAdd ( array , strdup ( ""Red Fish"" ) )"		9665670	0					
ANR	9665898	UnaryOperator	!		9665670	0					
ANR	9665899	CallExpression	"cupsArrayAdd ( array , strdup ( ""Red Fish"" ) )"		9665670	1					
ANR	9665900	Callee	cupsArrayAdd		9665670	0					
ANR	9665901	Identifier	cupsArrayAdd		9665670	0					
ANR	9665902	ArgumentList	array		9665670	1					
ANR	9665903	Argument	array		9665670	0					
ANR	9665904	Identifier	array		9665670	0					
ANR	9665905	Argument	"strdup ( ""Red Fish"" )"		9665670	1					
ANR	9665906	CallExpression	"strdup ( ""Red Fish"" )"		9665670	0					
ANR	9665907	Callee	strdup		9665670	0					
ANR	9665908	Identifier	strdup		9665670	0					
ANR	9665909	ArgumentList	"""Red Fish"""		9665670	1					
ANR	9665910	Argument	"""Red Fish"""		9665670	0					
ANR	9665911	PrimaryExpression	"""Red Fish"""		9665670	0					
ANR	9665912	CompoundStatement		74:6:1404:1404	9665670	1					
ANR	9665913	ExpressionStatement	"puts ( ""FAIL (\\""Red Fish\\"")"" )"	123:1:2652:2679	9665670	0	True				
ANR	9665914	CallExpression	"puts ( ""FAIL (\\""Red Fish\\"")"" )"		9665670	0					
ANR	9665915	Callee	puts		9665670	0					
ANR	9665916	Identifier	puts		9665670	0					
ANR	9665917	ArgumentList	"""FAIL (\\""Red Fish\\"")"""		9665670	1					
ANR	9665918	Argument	"""FAIL (\\""Red Fish\\"")"""		9665670	0					
ANR	9665919	PrimaryExpression	"""FAIL (\\""Red Fish\\"")"""		9665670	0					
ANR	9665920	ExpressionStatement	status ++	124:1:2682:2691	9665670	1	True				
ANR	9665921	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9665922	Identifier	status		9665670	0					
ANR	9665923	IncDec	++		9665670	1					
ANR	9665924	ElseStatement	else		9665670	0					
ANR	9665925	CompoundStatement		79:6:1473:1473	9665670	0					
ANR	9665926	IfStatement	"if ( ! cupsArrayAdd ( array , strdup ( ""Blue Fish"" ) ) )"		9665670	0					
ANR	9665927	Condition	"! cupsArrayAdd ( array , strdup ( ""Blue Fish"" ) )"	128:12:2732:2772	9665670	0	True				
ANR	9665928	UnaryOperationExpression	"! cupsArrayAdd ( array , strdup ( ""Blue Fish"" ) )"		9665670	0					
ANR	9665929	UnaryOperator	!		9665670	0					
ANR	9665930	CallExpression	"cupsArrayAdd ( array , strdup ( ""Blue Fish"" ) )"		9665670	1					
ANR	9665931	Callee	cupsArrayAdd		9665670	0					
ANR	9665932	Identifier	cupsArrayAdd		9665670	0					
ANR	9665933	ArgumentList	array		9665670	1					
ANR	9665934	Argument	array		9665670	0					
ANR	9665935	Identifier	array		9665670	0					
ANR	9665936	Argument	"strdup ( ""Blue Fish"" )"		9665670	1					
ANR	9665937	CallExpression	"strdup ( ""Blue Fish"" )"		9665670	0					
ANR	9665938	Callee	strdup		9665670	0					
ANR	9665939	Identifier	strdup		9665670	0					
ANR	9665940	ArgumentList	"""Blue Fish"""		9665670	1					
ANR	9665941	Argument	"""Blue Fish"""		9665670	0					
ANR	9665942	PrimaryExpression	"""Blue Fish"""		9665670	0					
ANR	9665943	CompoundStatement		81:1:1531:1531	9665670	1					
ANR	9665944	ExpressionStatement	"puts ( ""FAIL (\\""Blue Fish\\"")"" )"	130:3:2781:2809	9665670	0	True				
ANR	9665945	CallExpression	"puts ( ""FAIL (\\""Blue Fish\\"")"" )"		9665670	0					
ANR	9665946	Callee	puts		9665670	0					
ANR	9665947	Identifier	puts		9665670	0					
ANR	9665948	ArgumentList	"""FAIL (\\""Blue Fish\\"")"""		9665670	1					
ANR	9665949	Argument	"""FAIL (\\""Blue Fish\\"")"""		9665670	0					
ANR	9665950	PrimaryExpression	"""FAIL (\\""Blue Fish\\"")"""		9665670	0					
ANR	9665951	ExpressionStatement	status ++	131:3:2814:2823	9665670	1	True				
ANR	9665952	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9665953	Identifier	status		9665670	0					
ANR	9665954	IncDec	++		9665670	1					
ANR	9665955	ElseStatement	else		9665670	0					
ANR	9665956	ExpressionStatement	"puts ( ""PASS"" )"	134:3:2837:2849	9665670	0	True				
ANR	9665957	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9665958	Callee	puts		9665670	0					
ANR	9665959	Identifier	puts		9665670	0					
ANR	9665960	ArgumentList	"""PASS"""		9665670	1					
ANR	9665961	Argument	"""PASS"""		9665670	0					
ANR	9665962	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9665963	ExpressionStatement	"fputs ( ""cupsArrayCount: "" , stdout )"	143:2:2903:2936	9665670	19	True				
ANR	9665964	CallExpression	"fputs ( ""cupsArrayCount: "" , stdout )"		9665670	0					
ANR	9665965	Callee	fputs		9665670	0					
ANR	9665966	Identifier	fputs		9665670	0					
ANR	9665967	ArgumentList	"""cupsArrayCount: """		9665670	1					
ANR	9665968	Argument	"""cupsArrayCount: """		9665670	0					
ANR	9665969	PrimaryExpression	"""cupsArrayCount: """		9665670	0					
ANR	9665970	Argument	stdout		9665670	1					
ANR	9665971	Identifier	stdout		9665670	0					
ANR	9665972	IfStatement	if ( cupsArrayCount ( array ) == 4 )		9665670	20					
ANR	9665973	Condition	cupsArrayCount ( array ) == 4	144:6:2944:2969	9665670	0	True				
ANR	9665974	EqualityExpression	cupsArrayCount ( array ) == 4		9665670	0		==			
ANR	9665975	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9665976	Callee	cupsArrayCount		9665670	0					
ANR	9665977	Identifier	cupsArrayCount		9665670	0					
ANR	9665978	ArgumentList	array		9665670	1					
ANR	9665979	Argument	array		9665670	0					
ANR	9665980	Identifier	array		9665670	0					
ANR	9665981	PrimaryExpression	4		9665670	1					
ANR	9665982	ExpressionStatement	"puts ( ""PASS"" )"	145:4:2976:2988	9665670	1	True				
ANR	9665983	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9665984	Callee	puts		9665670	0					
ANR	9665985	Identifier	puts		9665670	0					
ANR	9665986	ArgumentList	"""PASS"""		9665670	1					
ANR	9665987	Argument	"""PASS"""		9665670	0					
ANR	9665988	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9665989	ElseStatement	else		9665670	0					
ANR	9665990	CompoundStatement		99:2:1754:1754	9665670	0					
ANR	9665991	ExpressionStatement	"printf ( ""FAIL (returned %d, expected 4)\\n"" , cupsArrayCount ( array ) )"	148:4:3005:3070	9665670	0	True				
ANR	9665992	CallExpression	"printf ( ""FAIL (returned %d, expected 4)\\n"" , cupsArrayCount ( array ) )"		9665670	0					
ANR	9665993	Callee	printf		9665670	0					
ANR	9665994	Identifier	printf		9665670	0					
ANR	9665995	ArgumentList	"""FAIL (returned %d, expected 4)\\n"""		9665670	1					
ANR	9665996	Argument	"""FAIL (returned %d, expected 4)\\n"""		9665670	0					
ANR	9665997	PrimaryExpression	"""FAIL (returned %d, expected 4)\\n"""		9665670	0					
ANR	9665998	Argument	cupsArrayCount ( array )		9665670	1					
ANR	9665999	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9666000	Callee	cupsArrayCount		9665670	0					
ANR	9666001	Identifier	cupsArrayCount		9665670	0					
ANR	9666002	ArgumentList	array		9665670	1					
ANR	9666003	Argument	array		9665670	0					
ANR	9666004	Identifier	array		9665670	0					
ANR	9666005	ExpressionStatement	status ++	149:4:3076:3085	9665670	1	True				
ANR	9666006	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666007	Identifier	status		9665670	0					
ANR	9666008	IncDec	++		9665670	1					
ANR	9666009	ExpressionStatement	"fputs ( ""cupsArrayFirst: "" , stdout )"	156:2:3125:3158	9665670	21	True				
ANR	9666010	CallExpression	"fputs ( ""cupsArrayFirst: "" , stdout )"		9665670	0					
ANR	9666011	Callee	fputs		9665670	0					
ANR	9666012	Identifier	fputs		9665670	0					
ANR	9666013	ArgumentList	"""cupsArrayFirst: """		9665670	1					
ANR	9666014	Argument	"""cupsArrayFirst: """		9665670	0					
ANR	9666015	PrimaryExpression	"""cupsArrayFirst: """		9665670	0					
ANR	9666016	Argument	stdout		9665670	1					
ANR	9666017	Identifier	stdout		9665670	0					
ANR	9666018	IfStatement	"if ( ( text = ( char * ) cupsArrayFirst ( array ) ) != NULL && ! strcmp ( text , ""Blue Fish"" ) )"		9665670	22					
ANR	9666019	Condition	"( text = ( char * ) cupsArrayFirst ( array ) ) != NULL && ! strcmp ( text , ""Blue Fish"" )"	157:6:3166:3247	9665670	0	True				
ANR	9666020	AndExpression	"( text = ( char * ) cupsArrayFirst ( array ) ) != NULL && ! strcmp ( text , ""Blue Fish"" )"		9665670	0		&&			
ANR	9666021	EqualityExpression	( text = ( char * ) cupsArrayFirst ( array ) ) != NULL		9665670	0		!=			
ANR	9666022	AssignmentExpression	text = ( char * ) cupsArrayFirst ( array )		9665670	0		=			
ANR	9666023	Identifier	text		9665670	0					
ANR	9666024	CastExpression	( char * ) cupsArrayFirst ( array )		9665670	1					
ANR	9666025	CastTarget	char *		9665670	0					
ANR	9666026	CallExpression	cupsArrayFirst ( array )		9665670	1					
ANR	9666027	Callee	cupsArrayFirst		9665670	0					
ANR	9666028	Identifier	cupsArrayFirst		9665670	0					
ANR	9666029	ArgumentList	array		9665670	1					
ANR	9666030	Argument	array		9665670	0					
ANR	9666031	Identifier	array		9665670	0					
ANR	9666032	Identifier	NULL		9665670	1					
ANR	9666033	UnaryOperationExpression	"! strcmp ( text , ""Blue Fish"" )"		9665670	1					
ANR	9666034	UnaryOperator	!		9665670	0					
ANR	9666035	CallExpression	"strcmp ( text , ""Blue Fish"" )"		9665670	1					
ANR	9666036	Callee	strcmp		9665670	0					
ANR	9666037	Identifier	strcmp		9665670	0					
ANR	9666038	ArgumentList	text		9665670	1					
ANR	9666039	Argument	text		9665670	0					
ANR	9666040	Identifier	text		9665670	0					
ANR	9666041	Argument	"""Blue Fish"""		9665670	1					
ANR	9666042	PrimaryExpression	"""Blue Fish"""		9665670	0					
ANR	9666043	ExpressionStatement	"puts ( ""PASS"" )"	159:4:3254:3266	9665670	1	True				
ANR	9666044	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666045	Callee	puts		9665670	0					
ANR	9666046	Identifier	puts		9665670	0					
ANR	9666047	ArgumentList	"""PASS"""		9665670	1					
ANR	9666048	Argument	"""PASS"""		9665670	0					
ANR	9666049	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666050	ElseStatement	else		9665670	0					
ANR	9666051	CompoundStatement		113:2:2032:2032	9665670	0					
ANR	9666052	ExpressionStatement	"printf ( ""FAIL (returned \\""%s\\"", expected \\""Blue Fish\\"")\\n"" , text )"	162:4:3283:3347	9665670	0	True				
ANR	9666053	CallExpression	"printf ( ""FAIL (returned \\""%s\\"", expected \\""Blue Fish\\"")\\n"" , text )"		9665670	0					
ANR	9666054	Callee	printf		9665670	0					
ANR	9666055	Identifier	printf		9665670	0					
ANR	9666056	ArgumentList	"""FAIL (returned \\""%s\\"", expected \\""Blue Fish\\"")\\n"""		9665670	1					
ANR	9666057	Argument	"""FAIL (returned \\""%s\\"", expected \\""Blue Fish\\"")\\n"""		9665670	0					
ANR	9666058	PrimaryExpression	"""FAIL (returned \\""%s\\"", expected \\""Blue Fish\\"")\\n"""		9665670	0					
ANR	9666059	Argument	text		9665670	1					
ANR	9666060	Identifier	text		9665670	0					
ANR	9666061	ExpressionStatement	status ++	163:4:3353:3362	9665670	1	True				
ANR	9666062	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666063	Identifier	status		9665670	0					
ANR	9666064	IncDec	++		9665670	1					
ANR	9666065	ExpressionStatement	"fputs ( ""cupsArrayNext: "" , stdout )"	170:2:3401:3433	9665670	23	True				
ANR	9666066	CallExpression	"fputs ( ""cupsArrayNext: "" , stdout )"		9665670	0					
ANR	9666067	Callee	fputs		9665670	0					
ANR	9666068	Identifier	fputs		9665670	0					
ANR	9666069	ArgumentList	"""cupsArrayNext: """		9665670	1					
ANR	9666070	Argument	"""cupsArrayNext: """		9665670	0					
ANR	9666071	PrimaryExpression	"""cupsArrayNext: """		9665670	0					
ANR	9666072	Argument	stdout		9665670	1					
ANR	9666073	Identifier	stdout		9665670	0					
ANR	9666074	IfStatement	"if ( ( text = ( char * ) cupsArrayNext ( array ) ) != NULL && ! strcmp ( text , ""One Fish"" ) )"		9665670	24					
ANR	9666075	Condition	"( text = ( char * ) cupsArrayNext ( array ) ) != NULL && ! strcmp ( text , ""One Fish"" )"	171:6:3441:3520	9665670	0	True				
ANR	9666076	AndExpression	"( text = ( char * ) cupsArrayNext ( array ) ) != NULL && ! strcmp ( text , ""One Fish"" )"		9665670	0		&&			
ANR	9666077	EqualityExpression	( text = ( char * ) cupsArrayNext ( array ) ) != NULL		9665670	0		!=			
ANR	9666078	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9666079	Identifier	text		9665670	0					
ANR	9666080	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9666081	CastTarget	char *		9665670	0					
ANR	9666082	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9666083	Callee	cupsArrayNext		9665670	0					
ANR	9666084	Identifier	cupsArrayNext		9665670	0					
ANR	9666085	ArgumentList	array		9665670	1					
ANR	9666086	Argument	array		9665670	0					
ANR	9666087	Identifier	array		9665670	0					
ANR	9666088	Identifier	NULL		9665670	1					
ANR	9666089	UnaryOperationExpression	"! strcmp ( text , ""One Fish"" )"		9665670	1					
ANR	9666090	UnaryOperator	!		9665670	0					
ANR	9666091	CallExpression	"strcmp ( text , ""One Fish"" )"		9665670	1					
ANR	9666092	Callee	strcmp		9665670	0					
ANR	9666093	Identifier	strcmp		9665670	0					
ANR	9666094	ArgumentList	text		9665670	1					
ANR	9666095	Argument	text		9665670	0					
ANR	9666096	Identifier	text		9665670	0					
ANR	9666097	Argument	"""One Fish"""		9665670	1					
ANR	9666098	PrimaryExpression	"""One Fish"""		9665670	0					
ANR	9666099	ExpressionStatement	"puts ( ""PASS"" )"	173:4:3527:3539	9665670	1	True				
ANR	9666100	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666101	Callee	puts		9665670	0					
ANR	9666102	Identifier	puts		9665670	0					
ANR	9666103	ArgumentList	"""PASS"""		9665670	1					
ANR	9666104	Argument	"""PASS"""		9665670	0					
ANR	9666105	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666106	ElseStatement	else		9665670	0					
ANR	9666107	CompoundStatement		127:2:2305:2305	9665670	0					
ANR	9666108	ExpressionStatement	"printf ( ""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"" , text )"	176:4:3556:3619	9665670	0	True				
ANR	9666109	CallExpression	"printf ( ""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"" , text )"		9665670	0					
ANR	9666110	Callee	printf		9665670	0					
ANR	9666111	Identifier	printf		9665670	0					
ANR	9666112	ArgumentList	"""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"""		9665670	1					
ANR	9666113	Argument	"""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"""		9665670	0					
ANR	9666114	PrimaryExpression	"""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"""		9665670	0					
ANR	9666115	Argument	text		9665670	1					
ANR	9666116	Identifier	text		9665670	0					
ANR	9666117	ExpressionStatement	status ++	177:4:3625:3634	9665670	1	True				
ANR	9666118	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666119	Identifier	status		9665670	0					
ANR	9666120	IncDec	++		9665670	1					
ANR	9666121	ExpressionStatement	"fputs ( ""cupsArrayLast: "" , stdout )"	184:2:3673:3705	9665670	25	True				
ANR	9666122	CallExpression	"fputs ( ""cupsArrayLast: "" , stdout )"		9665670	0					
ANR	9666123	Callee	fputs		9665670	0					
ANR	9666124	Identifier	fputs		9665670	0					
ANR	9666125	ArgumentList	"""cupsArrayLast: """		9665670	1					
ANR	9666126	Argument	"""cupsArrayLast: """		9665670	0					
ANR	9666127	PrimaryExpression	"""cupsArrayLast: """		9665670	0					
ANR	9666128	Argument	stdout		9665670	1					
ANR	9666129	Identifier	stdout		9665670	0					
ANR	9666130	IfStatement	"if ( ( text = ( char * ) cupsArrayLast ( array ) ) != NULL && ! strcmp ( text , ""Two Fish"" ) )"		9665670	26					
ANR	9666131	Condition	"( text = ( char * ) cupsArrayLast ( array ) ) != NULL && ! strcmp ( text , ""Two Fish"" )"	185:6:3713:3792	9665670	0	True				
ANR	9666132	AndExpression	"( text = ( char * ) cupsArrayLast ( array ) ) != NULL && ! strcmp ( text , ""Two Fish"" )"		9665670	0		&&			
ANR	9666133	EqualityExpression	( text = ( char * ) cupsArrayLast ( array ) ) != NULL		9665670	0		!=			
ANR	9666134	AssignmentExpression	text = ( char * ) cupsArrayLast ( array )		9665670	0		=			
ANR	9666135	Identifier	text		9665670	0					
ANR	9666136	CastExpression	( char * ) cupsArrayLast ( array )		9665670	1					
ANR	9666137	CastTarget	char *		9665670	0					
ANR	9666138	CallExpression	cupsArrayLast ( array )		9665670	1					
ANR	9666139	Callee	cupsArrayLast		9665670	0					
ANR	9666140	Identifier	cupsArrayLast		9665670	0					
ANR	9666141	ArgumentList	array		9665670	1					
ANR	9666142	Argument	array		9665670	0					
ANR	9666143	Identifier	array		9665670	0					
ANR	9666144	Identifier	NULL		9665670	1					
ANR	9666145	UnaryOperationExpression	"! strcmp ( text , ""Two Fish"" )"		9665670	1					
ANR	9666146	UnaryOperator	!		9665670	0					
ANR	9666147	CallExpression	"strcmp ( text , ""Two Fish"" )"		9665670	1					
ANR	9666148	Callee	strcmp		9665670	0					
ANR	9666149	Identifier	strcmp		9665670	0					
ANR	9666150	ArgumentList	text		9665670	1					
ANR	9666151	Argument	text		9665670	0					
ANR	9666152	Identifier	text		9665670	0					
ANR	9666153	Argument	"""Two Fish"""		9665670	1					
ANR	9666154	PrimaryExpression	"""Two Fish"""		9665670	0					
ANR	9666155	ExpressionStatement	"puts ( ""PASS"" )"	187:4:3799:3811	9665670	1	True				
ANR	9666156	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666157	Callee	puts		9665670	0					
ANR	9666158	Identifier	puts		9665670	0					
ANR	9666159	ArgumentList	"""PASS"""		9665670	1					
ANR	9666160	Argument	"""PASS"""		9665670	0					
ANR	9666161	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666162	ElseStatement	else		9665670	0					
ANR	9666163	CompoundStatement		141:2:2577:2577	9665670	0					
ANR	9666164	ExpressionStatement	"printf ( ""FAIL (returned \\""%s\\"", expected \\""Two Fish\\"")\\n"" , text )"	190:4:3828:3891	9665670	0	True				
ANR	9666165	CallExpression	"printf ( ""FAIL (returned \\""%s\\"", expected \\""Two Fish\\"")\\n"" , text )"		9665670	0					
ANR	9666166	Callee	printf		9665670	0					
ANR	9666167	Identifier	printf		9665670	0					
ANR	9666168	ArgumentList	"""FAIL (returned \\""%s\\"", expected \\""Two Fish\\"")\\n"""		9665670	1					
ANR	9666169	Argument	"""FAIL (returned \\""%s\\"", expected \\""Two Fish\\"")\\n"""		9665670	0					
ANR	9666170	PrimaryExpression	"""FAIL (returned \\""%s\\"", expected \\""Two Fish\\"")\\n"""		9665670	0					
ANR	9666171	Argument	text		9665670	1					
ANR	9666172	Identifier	text		9665670	0					
ANR	9666173	ExpressionStatement	status ++	191:4:3897:3906	9665670	1	True				
ANR	9666174	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666175	Identifier	status		9665670	0					
ANR	9666176	IncDec	++		9665670	1					
ANR	9666177	ExpressionStatement	"fputs ( ""cupsArrayPrev: "" , stdout )"	198:2:3945:3977	9665670	27	True				
ANR	9666178	CallExpression	"fputs ( ""cupsArrayPrev: "" , stdout )"		9665670	0					
ANR	9666179	Callee	fputs		9665670	0					
ANR	9666180	Identifier	fputs		9665670	0					
ANR	9666181	ArgumentList	"""cupsArrayPrev: """		9665670	1					
ANR	9666182	Argument	"""cupsArrayPrev: """		9665670	0					
ANR	9666183	PrimaryExpression	"""cupsArrayPrev: """		9665670	0					
ANR	9666184	Argument	stdout		9665670	1					
ANR	9666185	Identifier	stdout		9665670	0					
ANR	9666186	IfStatement	"if ( ( text = ( char * ) cupsArrayPrev ( array ) ) != NULL && ! strcmp ( text , ""Red Fish"" ) )"		9665670	28					
ANR	9666187	Condition	"( text = ( char * ) cupsArrayPrev ( array ) ) != NULL && ! strcmp ( text , ""Red Fish"" )"	199:6:3985:4064	9665670	0	True				
ANR	9666188	AndExpression	"( text = ( char * ) cupsArrayPrev ( array ) ) != NULL && ! strcmp ( text , ""Red Fish"" )"		9665670	0		&&			
ANR	9666189	EqualityExpression	( text = ( char * ) cupsArrayPrev ( array ) ) != NULL		9665670	0		!=			
ANR	9666190	AssignmentExpression	text = ( char * ) cupsArrayPrev ( array )		9665670	0		=			
ANR	9666191	Identifier	text		9665670	0					
ANR	9666192	CastExpression	( char * ) cupsArrayPrev ( array )		9665670	1					
ANR	9666193	CastTarget	char *		9665670	0					
ANR	9666194	CallExpression	cupsArrayPrev ( array )		9665670	1					
ANR	9666195	Callee	cupsArrayPrev		9665670	0					
ANR	9666196	Identifier	cupsArrayPrev		9665670	0					
ANR	9666197	ArgumentList	array		9665670	1					
ANR	9666198	Argument	array		9665670	0					
ANR	9666199	Identifier	array		9665670	0					
ANR	9666200	Identifier	NULL		9665670	1					
ANR	9666201	UnaryOperationExpression	"! strcmp ( text , ""Red Fish"" )"		9665670	1					
ANR	9666202	UnaryOperator	!		9665670	0					
ANR	9666203	CallExpression	"strcmp ( text , ""Red Fish"" )"		9665670	1					
ANR	9666204	Callee	strcmp		9665670	0					
ANR	9666205	Identifier	strcmp		9665670	0					
ANR	9666206	ArgumentList	text		9665670	1					
ANR	9666207	Argument	text		9665670	0					
ANR	9666208	Identifier	text		9665670	0					
ANR	9666209	Argument	"""Red Fish"""		9665670	1					
ANR	9666210	PrimaryExpression	"""Red Fish"""		9665670	0					
ANR	9666211	ExpressionStatement	"puts ( ""PASS"" )"	201:4:4071:4083	9665670	1	True				
ANR	9666212	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666213	Callee	puts		9665670	0					
ANR	9666214	Identifier	puts		9665670	0					
ANR	9666215	ArgumentList	"""PASS"""		9665670	1					
ANR	9666216	Argument	"""PASS"""		9665670	0					
ANR	9666217	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666218	ElseStatement	else		9665670	0					
ANR	9666219	CompoundStatement		155:2:2849:2849	9665670	0					
ANR	9666220	ExpressionStatement	"printf ( ""FAIL (returned \\""%s\\"", expected \\""Red Fish\\"")\\n"" , text )"	204:4:4100:4163	9665670	0	True				
ANR	9666221	CallExpression	"printf ( ""FAIL (returned \\""%s\\"", expected \\""Red Fish\\"")\\n"" , text )"		9665670	0					
ANR	9666222	Callee	printf		9665670	0					
ANR	9666223	Identifier	printf		9665670	0					
ANR	9666224	ArgumentList	"""FAIL (returned \\""%s\\"", expected \\""Red Fish\\"")\\n"""		9665670	1					
ANR	9666225	Argument	"""FAIL (returned \\""%s\\"", expected \\""Red Fish\\"")\\n"""		9665670	0					
ANR	9666226	PrimaryExpression	"""FAIL (returned \\""%s\\"", expected \\""Red Fish\\"")\\n"""		9665670	0					
ANR	9666227	Argument	text		9665670	1					
ANR	9666228	Identifier	text		9665670	0					
ANR	9666229	ExpressionStatement	status ++	205:4:4169:4178	9665670	1	True				
ANR	9666230	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666231	Identifier	status		9665670	0					
ANR	9666232	IncDec	++		9665670	1					
ANR	9666233	ExpressionStatement	"fputs ( ""cupsArrayFind: "" , stdout )"	212:2:4217:4249	9665670	29	True				
ANR	9666234	CallExpression	"fputs ( ""cupsArrayFind: "" , stdout )"		9665670	0					
ANR	9666235	Callee	fputs		9665670	0					
ANR	9666236	Identifier	fputs		9665670	0					
ANR	9666237	ArgumentList	"""cupsArrayFind: """		9665670	1					
ANR	9666238	Argument	"""cupsArrayFind: """		9665670	0					
ANR	9666239	PrimaryExpression	"""cupsArrayFind: """		9665670	0					
ANR	9666240	Argument	stdout		9665670	1					
ANR	9666241	Identifier	stdout		9665670	0					
ANR	9666242	IfStatement	"if ( ( text = ( char * ) cupsArrayFind ( array , ( void * ) ""One Fish"" ) ) != NULL && ! strcmp ( text , ""One Fish"" ) )"		9665670	30					
ANR	9666243	Condition	"( text = ( char * ) cupsArrayFind ( array , ( void * ) ""One Fish"" ) ) != NULL && ! strcmp ( text , ""One Fish"" )"	213:6:4257:4356	9665670	0	True				
ANR	9666244	AndExpression	"( text = ( char * ) cupsArrayFind ( array , ( void * ) ""One Fish"" ) ) != NULL && ! strcmp ( text , ""One Fish"" )"		9665670	0		&&			
ANR	9666245	EqualityExpression	"( text = ( char * ) cupsArrayFind ( array , ( void * ) ""One Fish"" ) ) != NULL"		9665670	0		!=			
ANR	9666246	AssignmentExpression	"text = ( char * ) cupsArrayFind ( array , ( void * ) ""One Fish"" )"		9665670	0		=			
ANR	9666247	Identifier	text		9665670	0					
ANR	9666248	CastExpression	"( char * ) cupsArrayFind ( array , ( void * ) ""One Fish"" )"		9665670	1					
ANR	9666249	CastTarget	char *		9665670	0					
ANR	9666250	CallExpression	"cupsArrayFind ( array , ( void * ) ""One Fish"" )"		9665670	1					
ANR	9666251	Callee	cupsArrayFind		9665670	0					
ANR	9666252	Identifier	cupsArrayFind		9665670	0					
ANR	9666253	ArgumentList	array		9665670	1					
ANR	9666254	Argument	array		9665670	0					
ANR	9666255	Identifier	array		9665670	0					
ANR	9666256	Argument	"( void * ) ""One Fish"""		9665670	1					
ANR	9666257	CastExpression	"( void * ) ""One Fish"""		9665670	0					
ANR	9666258	CastTarget	void *		9665670	0					
ANR	9666259	PrimaryExpression	"""One Fish"""		9665670	1					
ANR	9666260	Identifier	NULL		9665670	1					
ANR	9666261	UnaryOperationExpression	"! strcmp ( text , ""One Fish"" )"		9665670	1					
ANR	9666262	UnaryOperator	!		9665670	0					
ANR	9666263	CallExpression	"strcmp ( text , ""One Fish"" )"		9665670	1					
ANR	9666264	Callee	strcmp		9665670	0					
ANR	9666265	Identifier	strcmp		9665670	0					
ANR	9666266	ArgumentList	text		9665670	1					
ANR	9666267	Argument	text		9665670	0					
ANR	9666268	Identifier	text		9665670	0					
ANR	9666269	Argument	"""One Fish"""		9665670	1					
ANR	9666270	PrimaryExpression	"""One Fish"""		9665670	0					
ANR	9666271	ExpressionStatement	"puts ( ""PASS"" )"	215:4:4363:4375	9665670	1	True				
ANR	9666272	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666273	Callee	puts		9665670	0					
ANR	9666274	Identifier	puts		9665670	0					
ANR	9666275	ArgumentList	"""PASS"""		9665670	1					
ANR	9666276	Argument	"""PASS"""		9665670	0					
ANR	9666277	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666278	ElseStatement	else		9665670	0					
ANR	9666279	CompoundStatement		169:2:3141:3141	9665670	0					
ANR	9666280	ExpressionStatement	"printf ( ""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"" , text )"	218:4:4392:4455	9665670	0	True				
ANR	9666281	CallExpression	"printf ( ""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"" , text )"		9665670	0					
ANR	9666282	Callee	printf		9665670	0					
ANR	9666283	Identifier	printf		9665670	0					
ANR	9666284	ArgumentList	"""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"""		9665670	1					
ANR	9666285	Argument	"""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"""		9665670	0					
ANR	9666286	PrimaryExpression	"""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"""		9665670	0					
ANR	9666287	Argument	text		9665670	1					
ANR	9666288	Identifier	text		9665670	0					
ANR	9666289	ExpressionStatement	status ++	219:4:4461:4470	9665670	1	True				
ANR	9666290	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666291	Identifier	status		9665670	0					
ANR	9666292	IncDec	++		9665670	1					
ANR	9666293	ExpressionStatement	"fputs ( ""cupsArrayCurrent: "" , stdout )"	226:2:4512:4547	9665670	31	True				
ANR	9666294	CallExpression	"fputs ( ""cupsArrayCurrent: "" , stdout )"		9665670	0					
ANR	9666295	Callee	fputs		9665670	0					
ANR	9666296	Identifier	fputs		9665670	0					
ANR	9666297	ArgumentList	"""cupsArrayCurrent: """		9665670	1					
ANR	9666298	Argument	"""cupsArrayCurrent: """		9665670	0					
ANR	9666299	PrimaryExpression	"""cupsArrayCurrent: """		9665670	0					
ANR	9666300	Argument	stdout		9665670	1					
ANR	9666301	Identifier	stdout		9665670	0					
ANR	9666302	IfStatement	"if ( ( text = ( char * ) cupsArrayCurrent ( array ) ) != NULL && ! strcmp ( text , ""One Fish"" ) )"		9665670	32					
ANR	9666303	Condition	"( text = ( char * ) cupsArrayCurrent ( array ) ) != NULL && ! strcmp ( text , ""One Fish"" )"	227:6:4555:4637	9665670	0	True				
ANR	9666304	AndExpression	"( text = ( char * ) cupsArrayCurrent ( array ) ) != NULL && ! strcmp ( text , ""One Fish"" )"		9665670	0		&&			
ANR	9666305	EqualityExpression	( text = ( char * ) cupsArrayCurrent ( array ) ) != NULL		9665670	0		!=			
ANR	9666306	AssignmentExpression	text = ( char * ) cupsArrayCurrent ( array )		9665670	0		=			
ANR	9666307	Identifier	text		9665670	0					
ANR	9666308	CastExpression	( char * ) cupsArrayCurrent ( array )		9665670	1					
ANR	9666309	CastTarget	char *		9665670	0					
ANR	9666310	CallExpression	cupsArrayCurrent ( array )		9665670	1					
ANR	9666311	Callee	cupsArrayCurrent		9665670	0					
ANR	9666312	Identifier	cupsArrayCurrent		9665670	0					
ANR	9666313	ArgumentList	array		9665670	1					
ANR	9666314	Argument	array		9665670	0					
ANR	9666315	Identifier	array		9665670	0					
ANR	9666316	Identifier	NULL		9665670	1					
ANR	9666317	UnaryOperationExpression	"! strcmp ( text , ""One Fish"" )"		9665670	1					
ANR	9666318	UnaryOperator	!		9665670	0					
ANR	9666319	CallExpression	"strcmp ( text , ""One Fish"" )"		9665670	1					
ANR	9666320	Callee	strcmp		9665670	0					
ANR	9666321	Identifier	strcmp		9665670	0					
ANR	9666322	ArgumentList	text		9665670	1					
ANR	9666323	Argument	text		9665670	0					
ANR	9666324	Identifier	text		9665670	0					
ANR	9666325	Argument	"""One Fish"""		9665670	1					
ANR	9666326	PrimaryExpression	"""One Fish"""		9665670	0					
ANR	9666327	ExpressionStatement	"puts ( ""PASS"" )"	229:4:4644:4656	9665670	1	True				
ANR	9666328	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666329	Callee	puts		9665670	0					
ANR	9666330	Identifier	puts		9665670	0					
ANR	9666331	ArgumentList	"""PASS"""		9665670	1					
ANR	9666332	Argument	"""PASS"""		9665670	0					
ANR	9666333	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666334	ElseStatement	else		9665670	0					
ANR	9666335	CompoundStatement		183:2:3422:3422	9665670	0					
ANR	9666336	ExpressionStatement	"printf ( ""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"" , text )"	232:4:4673:4736	9665670	0	True				
ANR	9666337	CallExpression	"printf ( ""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"" , text )"		9665670	0					
ANR	9666338	Callee	printf		9665670	0					
ANR	9666339	Identifier	printf		9665670	0					
ANR	9666340	ArgumentList	"""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"""		9665670	1					
ANR	9666341	Argument	"""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"""		9665670	0					
ANR	9666342	PrimaryExpression	"""FAIL (returned \\""%s\\"", expected \\""One Fish\\"")\\n"""		9665670	0					
ANR	9666343	Argument	text		9665670	1					
ANR	9666344	Identifier	text		9665670	0					
ANR	9666345	ExpressionStatement	status ++	233:4:4742:4751	9665670	1	True				
ANR	9666346	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666347	Identifier	status		9665670	0					
ANR	9666348	IncDec	++		9665670	1					
ANR	9666349	ExpressionStatement	"fputs ( ""cupsArrayDup: "" , stdout )"	240:2:4789:4820	9665670	33	True				
ANR	9666350	CallExpression	"fputs ( ""cupsArrayDup: "" , stdout )"		9665670	0					
ANR	9666351	Callee	fputs		9665670	0					
ANR	9666352	Identifier	fputs		9665670	0					
ANR	9666353	ArgumentList	"""cupsArrayDup: """		9665670	1					
ANR	9666354	Argument	"""cupsArrayDup: """		9665670	0					
ANR	9666355	PrimaryExpression	"""cupsArrayDup: """		9665670	0					
ANR	9666356	Argument	stdout		9665670	1					
ANR	9666357	Identifier	stdout		9665670	0					
ANR	9666358	IfStatement	if ( ( dup_array = cupsArrayDup ( array ) ) != NULL && cupsArrayCount ( dup_array ) == 4 )		9665670	34					
ANR	9666359	Condition	( dup_array = cupsArrayDup ( array ) ) != NULL && cupsArrayCount ( dup_array ) == 4	241:6:4828:4908	9665670	0	True				
ANR	9666360	AndExpression	( dup_array = cupsArrayDup ( array ) ) != NULL && cupsArrayCount ( dup_array ) == 4		9665670	0		&&			
ANR	9666361	EqualityExpression	( dup_array = cupsArrayDup ( array ) ) != NULL		9665670	0		!=			
ANR	9666362	AssignmentExpression	dup_array = cupsArrayDup ( array )		9665670	0		=			
ANR	9666363	Identifier	dup_array		9665670	0					
ANR	9666364	CallExpression	cupsArrayDup ( array )		9665670	1					
ANR	9666365	Callee	cupsArrayDup		9665670	0					
ANR	9666366	Identifier	cupsArrayDup		9665670	0					
ANR	9666367	ArgumentList	array		9665670	1					
ANR	9666368	Argument	array		9665670	0					
ANR	9666369	Identifier	array		9665670	0					
ANR	9666370	Identifier	NULL		9665670	1					
ANR	9666371	EqualityExpression	cupsArrayCount ( dup_array ) == 4		9665670	1		==			
ANR	9666372	CallExpression	cupsArrayCount ( dup_array )		9665670	0					
ANR	9666373	Callee	cupsArrayCount		9665670	0					
ANR	9666374	Identifier	cupsArrayCount		9665670	0					
ANR	9666375	ArgumentList	dup_array		9665670	1					
ANR	9666376	Argument	dup_array		9665670	0					
ANR	9666377	Identifier	dup_array		9665670	0					
ANR	9666378	PrimaryExpression	4		9665670	1					
ANR	9666379	ExpressionStatement	"puts ( ""PASS"" )"	243:4:4915:4927	9665670	1	True				
ANR	9666380	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666381	Callee	puts		9665670	0					
ANR	9666382	Identifier	puts		9665670	0					
ANR	9666383	ArgumentList	"""PASS"""		9665670	1					
ANR	9666384	Argument	"""PASS"""		9665670	0					
ANR	9666385	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666386	ElseStatement	else		9665670	0					
ANR	9666387	CompoundStatement		197:2:3693:3693	9665670	0					
ANR	9666388	ExpressionStatement	"printf ( ""FAIL (returned %p with %d elements, expected pointer with 4 elements)\\n"" , dup_array , cupsArrayCount ( dup_array ) )"	246:4:4944:5074	9665670	0	True				
ANR	9666389	CallExpression	"printf ( ""FAIL (returned %p with %d elements, expected pointer with 4 elements)\\n"" , dup_array , cupsArrayCount ( dup_array ) )"		9665670	0					
ANR	9666390	Callee	printf		9665670	0					
ANR	9666391	Identifier	printf		9665670	0					
ANR	9666392	ArgumentList	"""FAIL (returned %p with %d elements, expected pointer with 4 elements)\\n"""		9665670	1					
ANR	9666393	Argument	"""FAIL (returned %p with %d elements, expected pointer with 4 elements)\\n"""		9665670	0					
ANR	9666394	PrimaryExpression	"""FAIL (returned %p with %d elements, expected pointer with 4 elements)\\n"""		9665670	0					
ANR	9666395	Argument	dup_array		9665670	1					
ANR	9666396	Identifier	dup_array		9665670	0					
ANR	9666397	Argument	cupsArrayCount ( dup_array )		9665670	2					
ANR	9666398	CallExpression	cupsArrayCount ( dup_array )		9665670	0					
ANR	9666399	Callee	cupsArrayCount		9665670	0					
ANR	9666400	Identifier	cupsArrayCount		9665670	0					
ANR	9666401	ArgumentList	dup_array		9665670	1					
ANR	9666402	Argument	dup_array		9665670	0					
ANR	9666403	Identifier	dup_array		9665670	0					
ANR	9666404	ExpressionStatement	status ++	248:4:5080:5089	9665670	1	True				
ANR	9666405	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666406	Identifier	status		9665670	0					
ANR	9666407	IncDec	++		9665670	1					
ANR	9666408	ExpressionStatement	"fputs ( ""cupsArrayRemove: "" , stdout )"	255:2:5130:5164	9665670	35	True				
ANR	9666409	CallExpression	"fputs ( ""cupsArrayRemove: "" , stdout )"		9665670	0					
ANR	9666410	Callee	fputs		9665670	0					
ANR	9666411	Identifier	fputs		9665670	0					
ANR	9666412	ArgumentList	"""cupsArrayRemove: """		9665670	1					
ANR	9666413	Argument	"""cupsArrayRemove: """		9665670	0					
ANR	9666414	PrimaryExpression	"""cupsArrayRemove: """		9665670	0					
ANR	9666415	Argument	stdout		9665670	1					
ANR	9666416	Identifier	stdout		9665670	0					
ANR	9666417	IfStatement	"if ( cupsArrayRemove ( array , ( void * ) ""One Fish"" ) && cupsArrayCount ( array ) == 3 )"		9665670	36					
ANR	9666418	Condition	"cupsArrayRemove ( array , ( void * ) ""One Fish"" ) && cupsArrayCount ( array ) == 3"	256:6:5172:5249	9665670	0	True				
ANR	9666419	AndExpression	"cupsArrayRemove ( array , ( void * ) ""One Fish"" ) && cupsArrayCount ( array ) == 3"		9665670	0		&&			
ANR	9666420	CallExpression	"cupsArrayRemove ( array , ( void * ) ""One Fish"" )"		9665670	0					
ANR	9666421	Callee	cupsArrayRemove		9665670	0					
ANR	9666422	Identifier	cupsArrayRemove		9665670	0					
ANR	9666423	ArgumentList	array		9665670	1					
ANR	9666424	Argument	array		9665670	0					
ANR	9666425	Identifier	array		9665670	0					
ANR	9666426	Argument	"( void * ) ""One Fish"""		9665670	1					
ANR	9666427	CastExpression	"( void * ) ""One Fish"""		9665670	0					
ANR	9666428	CastTarget	void *		9665670	0					
ANR	9666429	PrimaryExpression	"""One Fish"""		9665670	1					
ANR	9666430	EqualityExpression	cupsArrayCount ( array ) == 3		9665670	1		==			
ANR	9666431	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9666432	Callee	cupsArrayCount		9665670	0					
ANR	9666433	Identifier	cupsArrayCount		9665670	0					
ANR	9666434	ArgumentList	array		9665670	1					
ANR	9666435	Argument	array		9665670	0					
ANR	9666436	Identifier	array		9665670	0					
ANR	9666437	PrimaryExpression	3		9665670	1					
ANR	9666438	ExpressionStatement	"puts ( ""PASS"" )"	258:4:5256:5268	9665670	1	True				
ANR	9666439	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666440	Callee	puts		9665670	0					
ANR	9666441	Identifier	puts		9665670	0					
ANR	9666442	ArgumentList	"""PASS"""		9665670	1					
ANR	9666443	Argument	"""PASS"""		9665670	0					
ANR	9666444	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666445	ElseStatement	else		9665670	0					
ANR	9666446	CompoundStatement		212:2:4034:4034	9665670	0					
ANR	9666447	ExpressionStatement	"printf ( ""FAIL (returned 0 with %d elements, expected 1 with 4 elements)\\n"" , cupsArrayCount ( array ) )"	261:4:5285:5393	9665670	0	True				
ANR	9666448	CallExpression	"printf ( ""FAIL (returned 0 with %d elements, expected 1 with 4 elements)\\n"" , cupsArrayCount ( array ) )"		9665670	0					
ANR	9666449	Callee	printf		9665670	0					
ANR	9666450	Identifier	printf		9665670	0					
ANR	9666451	ArgumentList	"""FAIL (returned 0 with %d elements, expected 1 with 4 elements)\\n"""		9665670	1					
ANR	9666452	Argument	"""FAIL (returned 0 with %d elements, expected 1 with 4 elements)\\n"""		9665670	0					
ANR	9666453	PrimaryExpression	"""FAIL (returned 0 with %d elements, expected 1 with 4 elements)\\n"""		9665670	0					
ANR	9666454	Argument	cupsArrayCount ( array )		9665670	1					
ANR	9666455	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9666456	Callee	cupsArrayCount		9665670	0					
ANR	9666457	Identifier	cupsArrayCount		9665670	0					
ANR	9666458	ArgumentList	array		9665670	1					
ANR	9666459	Argument	array		9665670	0					
ANR	9666460	Identifier	array		9665670	0					
ANR	9666461	ExpressionStatement	status ++	263:4:5399:5408	9665670	1	True				
ANR	9666462	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666463	Identifier	status		9665670	0					
ANR	9666464	IncDec	++		9665670	1					
ANR	9666465	ExpressionStatement	"fputs ( ""cupsArrayClear: "" , stdout )"	270:2:5448:5481	9665670	37	True				
ANR	9666466	CallExpression	"fputs ( ""cupsArrayClear: "" , stdout )"		9665670	0					
ANR	9666467	Callee	fputs		9665670	0					
ANR	9666468	Identifier	fputs		9665670	0					
ANR	9666469	ArgumentList	"""cupsArrayClear: """		9665670	1					
ANR	9666470	Argument	"""cupsArrayClear: """		9665670	0					
ANR	9666471	PrimaryExpression	"""cupsArrayClear: """		9665670	0					
ANR	9666472	Argument	stdout		9665670	1					
ANR	9666473	Identifier	stdout		9665670	0					
ANR	9666474	ExpressionStatement	cupsArrayClear ( array )	271:2:5485:5506	9665670	38	True				
ANR	9666475	CallExpression	cupsArrayClear ( array )		9665670	0					
ANR	9666476	Callee	cupsArrayClear		9665670	0					
ANR	9666477	Identifier	cupsArrayClear		9665670	0					
ANR	9666478	ArgumentList	array		9665670	1					
ANR	9666479	Argument	array		9665670	0					
ANR	9666480	Identifier	array		9665670	0					
ANR	9666481	IfStatement	if ( cupsArrayCount ( array ) == 0 )		9665670	39					
ANR	9666482	Condition	cupsArrayCount ( array ) == 0	272:6:5514:5539	9665670	0	True				
ANR	9666483	EqualityExpression	cupsArrayCount ( array ) == 0		9665670	0		==			
ANR	9666484	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9666485	Callee	cupsArrayCount		9665670	0					
ANR	9666486	Identifier	cupsArrayCount		9665670	0					
ANR	9666487	ArgumentList	array		9665670	1					
ANR	9666488	Argument	array		9665670	0					
ANR	9666489	Identifier	array		9665670	0					
ANR	9666490	PrimaryExpression	0		9665670	1					
ANR	9666491	ExpressionStatement	"puts ( ""PASS"" )"	273:4:5546:5558	9665670	1	True				
ANR	9666492	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666493	Callee	puts		9665670	0					
ANR	9666494	Identifier	puts		9665670	0					
ANR	9666495	ArgumentList	"""PASS"""		9665670	1					
ANR	9666496	Argument	"""PASS"""		9665670	0					
ANR	9666497	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666498	ElseStatement	else		9665670	0					
ANR	9666499	CompoundStatement		227:2:4324:4324	9665670	0					
ANR	9666500	ExpressionStatement	"printf ( ""FAIL (%d elements, expected 0 elements)\\n"" , cupsArrayCount ( array ) )"	276:4:5575:5660	9665670	0	True				
ANR	9666501	CallExpression	"printf ( ""FAIL (%d elements, expected 0 elements)\\n"" , cupsArrayCount ( array ) )"		9665670	0					
ANR	9666502	Callee	printf		9665670	0					
ANR	9666503	Identifier	printf		9665670	0					
ANR	9666504	ArgumentList	"""FAIL (%d elements, expected 0 elements)\\n"""		9665670	1					
ANR	9666505	Argument	"""FAIL (%d elements, expected 0 elements)\\n"""		9665670	0					
ANR	9666506	PrimaryExpression	"""FAIL (%d elements, expected 0 elements)\\n"""		9665670	0					
ANR	9666507	Argument	cupsArrayCount ( array )		9665670	1					
ANR	9666508	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9666509	Callee	cupsArrayCount		9665670	0					
ANR	9666510	Identifier	cupsArrayCount		9665670	0					
ANR	9666511	ArgumentList	array		9665670	1					
ANR	9666512	Argument	array		9665670	0					
ANR	9666513	Identifier	array		9665670	0					
ANR	9666514	ExpressionStatement	status ++	278:4:5666:5675	9665670	1	True				
ANR	9666515	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666516	Identifier	status		9665670	0					
ANR	9666517	IncDec	++		9665670	1					
ANR	9666518	ExpressionStatement	"fputs ( ""Load unique words: "" , stdout )"	285:2:5760:5796	9665670	40	True				
ANR	9666519	CallExpression	"fputs ( ""Load unique words: "" , stdout )"		9665670	0					
ANR	9666520	Callee	fputs		9665670	0					
ANR	9666521	Identifier	fputs		9665670	0					
ANR	9666522	ArgumentList	"""Load unique words: """		9665670	1					
ANR	9666523	Argument	"""Load unique words: """		9665670	0					
ANR	9666524	PrimaryExpression	"""Load unique words: """		9665670	0					
ANR	9666525	Argument	stdout		9665670	1					
ANR	9666526	Identifier	stdout		9665670	0					
ANR	9666527	ExpressionStatement	fflush ( stdout )	286:2:5800:5814	9665670	41	True				
ANR	9666528	CallExpression	fflush ( stdout )		9665670	0					
ANR	9666529	Callee	fflush		9665670	0					
ANR	9666530	Identifier	fflush		9665670	0					
ANR	9666531	ArgumentList	stdout		9665670	1					
ANR	9666532	Argument	stdout		9665670	0					
ANR	9666533	Identifier	stdout		9665670	0					
ANR	9666534	ExpressionStatement	start = get_seconds ( )	288:2:5819:5840	9665670	42	True				
ANR	9666535	AssignmentExpression	start = get_seconds ( )		9665670	0		=			
ANR	9666536	Identifier	start		9665670	0					
ANR	9666537	CallExpression	get_seconds ( )		9665670	1					
ANR	9666538	Callee	get_seconds		9665670	0					
ANR	9666539	Identifier	get_seconds		9665670	0					
ANR	9666540	ArgumentList			9665670	1					
ANR	9666541	IfStatement	"if ( ( dir = cupsDirOpen ( ""."" ) ) == NULL )"		9665670	43					
ANR	9666542	Condition	"( dir = cupsDirOpen ( ""."" ) ) == NULL"	290:6:5849:5880	9665670	0	True				
ANR	9666543	EqualityExpression	"( dir = cupsDirOpen ( ""."" ) ) == NULL"		9665670	0		==			
ANR	9666544	AssignmentExpression	"dir = cupsDirOpen ( ""."" )"		9665670	0		=			
ANR	9666545	Identifier	dir		9665670	0					
ANR	9666546	CallExpression	"cupsDirOpen ( ""."" )"		9665670	1					
ANR	9666547	Callee	cupsDirOpen		9665670	0					
ANR	9666548	Identifier	cupsDirOpen		9665670	0					
ANR	9666549	ArgumentList	"""."""		9665670	1					
ANR	9666550	Argument	"""."""		9665670	0					
ANR	9666551	PrimaryExpression	"""."""		9665670	0					
ANR	9666552	Identifier	NULL		9665670	1					
ANR	9666553	CompoundStatement		243:2:4640:4640	9665670	1					
ANR	9666554	ExpressionStatement	"puts ( ""FAIL (cupsDirOpen failed)"" )"	292:4:5891:5924	9665670	0	True				
ANR	9666555	CallExpression	"puts ( ""FAIL (cupsDirOpen failed)"" )"		9665670	0					
ANR	9666556	Callee	puts		9665670	0					
ANR	9666557	Identifier	puts		9665670	0					
ANR	9666558	ArgumentList	"""FAIL (cupsDirOpen failed)"""		9665670	1					
ANR	9666559	Argument	"""FAIL (cupsDirOpen failed)"""		9665670	0					
ANR	9666560	PrimaryExpression	"""FAIL (cupsDirOpen failed)"""		9665670	0					
ANR	9666561	ExpressionStatement	status ++	293:4:5930:5939	9665670	1	True				
ANR	9666562	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666563	Identifier	status		9665670	0					
ANR	9666564	IncDec	++		9665670	1					
ANR	9666565	ElseStatement	else		9665670	0					
ANR	9666566	CompoundStatement		248:2:4709:4709	9665670	0					
ANR	9666567	WhileStatement	while ( ( dent = cupsDirRead ( dir ) ) != NULL )		9665670	0					
ANR	9666568	Condition	( dent = cupsDirRead ( dir ) ) != NULL	297:11:5967:5999	9665670	0	True				
ANR	9666569	EqualityExpression	( dent = cupsDirRead ( dir ) ) != NULL		9665670	0		!=			
ANR	9666570	AssignmentExpression	dent = cupsDirRead ( dir )		9665670	0		=			
ANR	9666571	Identifier	dent		9665670	0					
ANR	9666572	CallExpression	cupsDirRead ( dir )		9665670	1					
ANR	9666573	Callee	cupsDirRead		9665670	0					
ANR	9666574	Identifier	cupsDirRead		9665670	0					
ANR	9666575	ArgumentList	dir		9665670	1					
ANR	9666576	Argument	dir		9665670	0					
ANR	9666577	Identifier	dir		9665670	0					
ANR	9666578	Identifier	NULL		9665670	1					
ANR	9666579	CompoundStatement		250:4:4761:4761	9665670	1					
ANR	9666580	ExpressionStatement	i = strlen ( dent -> filename ) - 2	299:6:6014:6044	9665670	0	True				
ANR	9666581	AssignmentExpression	i = strlen ( dent -> filename ) - 2		9665670	0		=			
ANR	9666582	Identifier	i		9665670	0					
ANR	9666583	AdditiveExpression	strlen ( dent -> filename ) - 2		9665670	1		-			
ANR	9666584	CallExpression	strlen ( dent -> filename )		9665670	0					
ANR	9666585	Callee	strlen		9665670	0					
ANR	9666586	Identifier	strlen		9665670	0					
ANR	9666587	ArgumentList	dent -> filename		9665670	1					
ANR	9666588	Argument	dent -> filename		9665670	0					
ANR	9666589	PtrMemberAccess	dent -> filename		9665670	0					
ANR	9666590	Identifier	dent		9665670	0					
ANR	9666591	Identifier	filename		9665670	1					
ANR	9666592	PrimaryExpression	2		9665670	1					
ANR	9666593	IfStatement	if ( i > 0 && dent -> filename [ i ] == '.' && ( dent -> filename [ i + 1 ] == 'c' || dent -> filename [ i + 1 ] == 'h' ) )		9665670	1					
ANR	9666594	Condition	i > 0 && dent -> filename [ i ] == '.' && ( dent -> filename [ i + 1 ] == 'c' || dent -> filename [ i + 1 ] == 'h' )	301:10:6057:6169	9665670	0	True				
ANR	9666595	AndExpression	i > 0 && dent -> filename [ i ] == '.' && ( dent -> filename [ i + 1 ] == 'c' || dent -> filename [ i + 1 ] == 'h' )		9665670	0		&&			
ANR	9666596	RelationalExpression	i > 0		9665670	0		>			
ANR	9666597	Identifier	i		9665670	0					
ANR	9666598	PrimaryExpression	0		9665670	1					
ANR	9666599	AndExpression	dent -> filename [ i ] == '.' && ( dent -> filename [ i + 1 ] == 'c' || dent -> filename [ i + 1 ] == 'h' )		9665670	1		&&			
ANR	9666600	EqualityExpression	dent -> filename [ i ] == '.'		9665670	0		==			
ANR	9666601	ArrayIndexing	dent -> filename [ i ]		9665670	0					
ANR	9666602	PtrMemberAccess	dent -> filename		9665670	0					
ANR	9666603	Identifier	dent		9665670	0					
ANR	9666604	Identifier	filename		9665670	1					
ANR	9666605	Identifier	i		9665670	1					
ANR	9666606	PrimaryExpression	'.'		9665670	1					
ANR	9666607	OrExpression	dent -> filename [ i + 1 ] == 'c' || dent -> filename [ i + 1 ] == 'h'		9665670	1		||			
ANR	9666608	EqualityExpression	dent -> filename [ i + 1 ] == 'c'		9665670	0		==			
ANR	9666609	ArrayIndexing	dent -> filename [ i + 1 ]		9665670	0					
ANR	9666610	PtrMemberAccess	dent -> filename		9665670	0					
ANR	9666611	Identifier	dent		9665670	0					
ANR	9666612	Identifier	filename		9665670	1					
ANR	9666613	AdditiveExpression	i + 1		9665670	1		+			
ANR	9666614	Identifier	i		9665670	0					
ANR	9666615	PrimaryExpression	1		9665670	1					
ANR	9666616	PrimaryExpression	'c'		9665670	1					
ANR	9666617	EqualityExpression	dent -> filename [ i + 1 ] == 'h'		9665670	1		==			
ANR	9666618	ArrayIndexing	dent -> filename [ i + 1 ]		9665670	0					
ANR	9666619	PtrMemberAccess	dent -> filename		9665670	0					
ANR	9666620	Identifier	dent		9665670	0					
ANR	9666621	Identifier	filename		9665670	1					
ANR	9666622	AdditiveExpression	i + 1		9665670	1		+			
ANR	9666623	Identifier	i		9665670	0					
ANR	9666624	PrimaryExpression	1		9665670	1					
ANR	9666625	PrimaryExpression	'h'		9665670	1					
ANR	9666626	ExpressionStatement	"load_words ( dent -> filename , array )"	304:1:6173:6206	9665670	1	True				
ANR	9666627	CallExpression	"load_words ( dent -> filename , array )"		9665670	0					
ANR	9666628	Callee	load_words		9665670	0					
ANR	9666629	Identifier	load_words		9665670	0					
ANR	9666630	ArgumentList	dent -> filename		9665670	1					
ANR	9666631	Argument	dent -> filename		9665670	0					
ANR	9666632	PtrMemberAccess	dent -> filename		9665670	0					
ANR	9666633	Identifier	dent		9665670	0					
ANR	9666634	Identifier	filename		9665670	1					
ANR	9666635	Argument	array		9665670	1					
ANR	9666636	Identifier	array		9665670	0					
ANR	9666637	ExpressionStatement	cupsDirClose ( dir )	307:4:6219:6236	9665670	1	True				
ANR	9666638	CallExpression	cupsDirClose ( dir )		9665670	0					
ANR	9666639	Callee	cupsDirClose		9665670	0					
ANR	9666640	Identifier	cupsDirClose		9665670	0					
ANR	9666641	ArgumentList	dir		9665670	1					
ANR	9666642	Argument	dir		9665670	0					
ANR	9666643	Identifier	dir		9665670	0					
ANR	9666644	ExpressionStatement	end = get_seconds ( )	309:4:6243:6262	9665670	2	True				
ANR	9666645	AssignmentExpression	end = get_seconds ( )		9665670	0		=			
ANR	9666646	Identifier	end		9665670	0					
ANR	9666647	CallExpression	get_seconds ( )		9665670	1					
ANR	9666648	Callee	get_seconds		9665670	0					
ANR	9666649	Identifier	get_seconds		9665670	0					
ANR	9666650	ArgumentList			9665670	1					
ANR	9666651	ExpressionStatement	"printf ( ""%d words in %.3f seconds (%.0f words/sec), "" , cupsArrayCount ( array ) , end - start , cupsArrayCount ( array ) / ( end - start ) )"	311:4:6269:6408	9665670	3	True				
ANR	9666652	CallExpression	"printf ( ""%d words in %.3f seconds (%.0f words/sec), "" , cupsArrayCount ( array ) , end - start , cupsArrayCount ( array ) / ( end - start ) )"		9665670	0					
ANR	9666653	Callee	printf		9665670	0					
ANR	9666654	Identifier	printf		9665670	0					
ANR	9666655	ArgumentList	"""%d words in %.3f seconds (%.0f words/sec), """		9665670	1					
ANR	9666656	Argument	"""%d words in %.3f seconds (%.0f words/sec), """		9665670	0					
ANR	9666657	PrimaryExpression	"""%d words in %.3f seconds (%.0f words/sec), """		9665670	0					
ANR	9666658	Argument	cupsArrayCount ( array )		9665670	1					
ANR	9666659	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9666660	Callee	cupsArrayCount		9665670	0					
ANR	9666661	Identifier	cupsArrayCount		9665670	0					
ANR	9666662	ArgumentList	array		9665670	1					
ANR	9666663	Argument	array		9665670	0					
ANR	9666664	Identifier	array		9665670	0					
ANR	9666665	Argument	end - start		9665670	2					
ANR	9666666	AdditiveExpression	end - start		9665670	0		-			
ANR	9666667	Identifier	end		9665670	0					
ANR	9666668	Identifier	start		9665670	1					
ANR	9666669	Argument	cupsArrayCount ( array ) / ( end - start )		9665670	3					
ANR	9666670	MultiplicativeExpression	cupsArrayCount ( array ) / ( end - start )		9665670	0		/			
ANR	9666671	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9666672	Callee	cupsArrayCount		9665670	0					
ANR	9666673	Identifier	cupsArrayCount		9665670	0					
ANR	9666674	ArgumentList	array		9665670	1					
ANR	9666675	Argument	array		9665670	0					
ANR	9666676	Identifier	array		9665670	0					
ANR	9666677	AdditiveExpression	end - start		9665670	1		-			
ANR	9666678	Identifier	end		9665670	0					
ANR	9666679	Identifier	start		9665670	1					
ANR	9666680	ExpressionStatement	fflush ( stdout )	313:4:6414:6428	9665670	4	True				
ANR	9666681	CallExpression	fflush ( stdout )		9665670	0					
ANR	9666682	Callee	fflush		9665670	0					
ANR	9666683	Identifier	fflush		9665670	0					
ANR	9666684	ArgumentList	stdout		9665670	1					
ANR	9666685	Argument	stdout		9665670	0					
ANR	9666686	Identifier	stdout		9665670	0					
ANR	9666687	ForStatement	for ( text = ( char * ) cupsArrayFirst ( array ) ; text ; )		9665670	5					
ANR	9666688	ForInit	text = ( char * ) cupsArrayFirst ( array ) ;	315:9:6440:6476	9665670	0	True				
ANR	9666689	AssignmentExpression	text = ( char * ) cupsArrayFirst ( array )		9665670	0		=			
ANR	9666690	Identifier	text		9665670	0					
ANR	9666691	CastExpression	( char * ) cupsArrayFirst ( array )		9665670	1					
ANR	9666692	CastTarget	char *		9665670	0					
ANR	9666693	CallExpression	cupsArrayFirst ( array )		9665670	1					
ANR	9666694	Callee	cupsArrayFirst		9665670	0					
ANR	9666695	Identifier	cupsArrayFirst		9665670	0					
ANR	9666696	ArgumentList	array		9665670	1					
ANR	9666697	Argument	array		9665670	0					
ANR	9666698	Identifier	array		9665670	0					
ANR	9666699	Condition	text	315:47:6478:6481	9665670	1	True				
ANR	9666700	Identifier	text		9665670	0					
ANR	9666701	CompoundStatement		268:4:5244:5244	9665670	2					
ANR	9666702	ExpressionStatement	"strlcpy ( word , text , sizeof ( word ) )"	322:6:6637:6670	9665670	0	True				
ANR	9666703	CallExpression	"strlcpy ( word , text , sizeof ( word ) )"		9665670	0					
ANR	9666704	Callee	strlcpy		9665670	0					
ANR	9666705	Identifier	strlcpy		9665670	0					
ANR	9666706	ArgumentList	word		9665670	1					
ANR	9666707	Argument	word		9665670	0					
ANR	9666708	Identifier	word		9665670	0					
ANR	9666709	Argument	text		9665670	1					
ANR	9666710	Identifier	text		9665670	0					
ANR	9666711	Argument	sizeof ( word )		9665670	2					
ANR	9666712	SizeofExpression	sizeof ( word )		9665670	0					
ANR	9666713	Sizeof	sizeof		9665670	0					
ANR	9666714	SizeofOperand	word		9665670	1					
ANR	9666715	IfStatement	if ( ( text = ( char * ) cupsArrayNext ( array ) ) == NULL )		9665670	1					
ANR	9666716	Condition	( text = ( char * ) cupsArrayNext ( array ) ) == NULL	328:10:6743:6787	9665670	0	True				
ANR	9666717	EqualityExpression	( text = ( char * ) cupsArrayNext ( array ) ) == NULL		9665670	0		==			
ANR	9666718	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9666719	Identifier	text		9665670	0					
ANR	9666720	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9666721	CastTarget	char *		9665670	0					
ANR	9666722	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9666723	Callee	cupsArrayNext		9665670	0					
ANR	9666724	Identifier	cupsArrayNext		9665670	0					
ANR	9666725	ArgumentList	array		9665670	1					
ANR	9666726	Argument	array		9665670	0					
ANR	9666727	Identifier	array		9665670	0					
ANR	9666728	Identifier	NULL		9665670	1					
ANR	9666729	BreakStatement	break ;	329:1:6791:6796	9665670	1	True				
ANR	9666730	IfStatement	"if ( strcmp ( word , text ) >= 0 )"		9665670	2					
ANR	9666731	Condition	"strcmp ( word , text ) >= 0"	331:10:6809:6831	9665670	0	True				
ANR	9666732	RelationalExpression	"strcmp ( word , text ) >= 0"		9665670	0		>=			
ANR	9666733	CallExpression	"strcmp ( word , text )"		9665670	0					
ANR	9666734	Callee	strcmp		9665670	0					
ANR	9666735	Identifier	strcmp		9665670	0					
ANR	9666736	ArgumentList	word		9665670	1					
ANR	9666737	Argument	word		9665670	0					
ANR	9666738	Identifier	word		9665670	0					
ANR	9666739	Argument	text		9665670	1					
ANR	9666740	Identifier	text		9665670	0					
ANR	9666741	PrimaryExpression	0		9665670	1					
ANR	9666742	BreakStatement	break ;	332:1:6835:6840	9665670	1	True				
ANR	9666743	IfStatement	if ( text )		9665670	6					
ANR	9666744	Condition	text	335:8:6857:6860	9665670	0	True				
ANR	9666745	Identifier	text		9665670	0					
ANR	9666746	CompoundStatement		288:4:5622:5622	9665670	1					
ANR	9666747	ExpressionStatement	"printf ( ""FAIL (\\""%s\\"" >= \\""%s\\""!)\\n"" , word , text )"	337:6:6875:6923	9665670	0	True				
ANR	9666748	CallExpression	"printf ( ""FAIL (\\""%s\\"" >= \\""%s\\""!)\\n"" , word , text )"		9665670	0					
ANR	9666749	Callee	printf		9665670	0					
ANR	9666750	Identifier	printf		9665670	0					
ANR	9666751	ArgumentList	"""FAIL (\\""%s\\"" >= \\""%s\\""!)\\n"""		9665670	1					
ANR	9666752	Argument	"""FAIL (\\""%s\\"" >= \\""%s\\""!)\\n"""		9665670	0					
ANR	9666753	PrimaryExpression	"""FAIL (\\""%s\\"" >= \\""%s\\""!)\\n"""		9665670	0					
ANR	9666754	Argument	word		9665670	1					
ANR	9666755	Identifier	word		9665670	0					
ANR	9666756	Argument	text		9665670	2					
ANR	9666757	Identifier	text		9665670	0					
ANR	9666758	ExpressionStatement	status ++	338:6:6931:6940	9665670	1	True				
ANR	9666759	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666760	Identifier	status		9665670	0					
ANR	9666761	IncDec	++		9665670	1					
ANR	9666762	ElseStatement	else		9665670	0					
ANR	9666763	ExpressionStatement	"puts ( ""PASS"" )"	341:6:6963:6975	9665670	0	True				
ANR	9666764	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666765	Callee	puts		9665670	0					
ANR	9666766	Identifier	puts		9665670	0					
ANR	9666767	ArgumentList	"""PASS"""		9665670	1					
ANR	9666768	Argument	"""PASS"""		9665670	0					
ANR	9666769	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666770	ExpressionStatement	"fputs ( ""Delete While Iterating: "" , stdout )"	348:2:7030:7071	9665670	44	True				
ANR	9666771	CallExpression	"fputs ( ""Delete While Iterating: "" , stdout )"		9665670	0					
ANR	9666772	Callee	fputs		9665670	0					
ANR	9666773	Identifier	fputs		9665670	0					
ANR	9666774	ArgumentList	"""Delete While Iterating: """		9665670	1					
ANR	9666775	Argument	"""Delete While Iterating: """		9665670	0					
ANR	9666776	PrimaryExpression	"""Delete While Iterating: """		9665670	0					
ANR	9666777	Argument	stdout		9665670	1					
ANR	9666778	Identifier	stdout		9665670	0					
ANR	9666779	ExpressionStatement	text = ( char * ) cupsArrayFirst ( array )	350:2:7076:7112	9665670	45	True				
ANR	9666780	AssignmentExpression	text = ( char * ) cupsArrayFirst ( array )		9665670	0		=			
ANR	9666781	Identifier	text		9665670	0					
ANR	9666782	CastExpression	( char * ) cupsArrayFirst ( array )		9665670	1					
ANR	9666783	CastTarget	char *		9665670	0					
ANR	9666784	CallExpression	cupsArrayFirst ( array )		9665670	1					
ANR	9666785	Callee	cupsArrayFirst		9665670	0					
ANR	9666786	Identifier	cupsArrayFirst		9665670	0					
ANR	9666787	ArgumentList	array		9665670	1					
ANR	9666788	Argument	array		9665670	0					
ANR	9666789	Identifier	array		9665670	0					
ANR	9666790	ExpressionStatement	"cupsArrayRemove ( array , text )"	351:2:7116:7144	9665670	46	True				
ANR	9666791	CallExpression	"cupsArrayRemove ( array , text )"		9665670	0					
ANR	9666792	Callee	cupsArrayRemove		9665670	0					
ANR	9666793	Identifier	cupsArrayRemove		9665670	0					
ANR	9666794	ArgumentList	array		9665670	1					
ANR	9666795	Argument	array		9665670	0					
ANR	9666796	Identifier	array		9665670	0					
ANR	9666797	Argument	text		9665670	1					
ANR	9666798	Identifier	text		9665670	0					
ANR	9666799	ExpressionStatement	free ( text )	352:2:7148:7158	9665670	47	True				
ANR	9666800	CallExpression	free ( text )		9665670	0					
ANR	9666801	Callee	free		9665670	0					
ANR	9666802	Identifier	free		9665670	0					
ANR	9666803	ArgumentList	text		9665670	1					
ANR	9666804	Argument	text		9665670	0					
ANR	9666805	Identifier	text		9665670	0					
ANR	9666806	ExpressionStatement	text = ( char * ) cupsArrayNext ( array )	354:2:7163:7198	9665670	48	True				
ANR	9666807	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9666808	Identifier	text		9665670	0					
ANR	9666809	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9666810	CastTarget	char *		9665670	0					
ANR	9666811	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9666812	Callee	cupsArrayNext		9665670	0					
ANR	9666813	Identifier	cupsArrayNext		9665670	0					
ANR	9666814	ArgumentList	array		9665670	1					
ANR	9666815	Argument	array		9665670	0					
ANR	9666816	Identifier	array		9665670	0					
ANR	9666817	IfStatement	if ( ! text )		9665670	49					
ANR	9666818	Condition	! text	355:6:7206:7210	9665670	0	True				
ANR	9666819	UnaryOperationExpression	! text		9665670	0					
ANR	9666820	UnaryOperator	!		9665670	0					
ANR	9666821	Identifier	text		9665670	1					
ANR	9666822	CompoundStatement		308:2:5970:5970	9665670	1					
ANR	9666823	ExpressionStatement	"puts ( ""FAIL (cupsArrayNext returned NULL!)"" )"	357:4:7221:7264	9665670	0	True				
ANR	9666824	CallExpression	"puts ( ""FAIL (cupsArrayNext returned NULL!)"" )"		9665670	0					
ANR	9666825	Callee	puts		9665670	0					
ANR	9666826	Identifier	puts		9665670	0					
ANR	9666827	ArgumentList	"""FAIL (cupsArrayNext returned NULL!)"""		9665670	1					
ANR	9666828	Argument	"""FAIL (cupsArrayNext returned NULL!)"""		9665670	0					
ANR	9666829	PrimaryExpression	"""FAIL (cupsArrayNext returned NULL!)"""		9665670	0					
ANR	9666830	ExpressionStatement	status ++	358:4:7270:7279	9665670	1	True				
ANR	9666831	PostIncDecOperationExpression	status ++		9665670	0					
ANR	9666832	Identifier	status		9665670	0					
ANR	9666833	IncDec	++		9665670	1					
ANR	9666834	ElseStatement	else		9665670	0					
ANR	9666835	ExpressionStatement	"puts ( ""PASS"" )"	361:4:7296:7308	9665670	0	True				
ANR	9666836	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666837	Callee	puts		9665670	0					
ANR	9666838	Identifier	puts		9665670	0					
ANR	9666839	ArgumentList	"""PASS"""		9665670	1					
ANR	9666840	Argument	"""PASS"""		9665670	0					
ANR	9666841	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666842	ExpressionStatement	"fputs ( ""cupsArraySave: "" , stdout )"	367:2:7348:7380	9665670	50	True				
ANR	9666843	CallExpression	"fputs ( ""cupsArraySave: "" , stdout )"		9665670	0					
ANR	9666844	Callee	fputs		9665670	0					
ANR	9666845	Identifier	fputs		9665670	0					
ANR	9666846	ArgumentList	"""cupsArraySave: """		9665670	1					
ANR	9666847	Argument	"""cupsArraySave: """		9665670	0					
ANR	9666848	PrimaryExpression	"""cupsArraySave: """		9665670	0					
ANR	9666849	Argument	stdout		9665670	1					
ANR	9666850	Identifier	stdout		9665670	0					
ANR	9666851	ForStatement	"for ( i = 0 , text = ( char * ) cupsArrayFirst ( array ) ; i < 32 ; i ++ , text = ( char * ) cupsArrayNext ( array ) )"		9665670	51					
ANR	9666852	ForInit	"i = 0 , text = ( char * ) cupsArrayFirst ( array ) ;"	369:7:7390:7433	9665670	0	True				
ANR	9666853	Expression	"i = 0 , text = ( char * ) cupsArrayFirst ( array )"		9665670	0					
ANR	9666854	AssignmentExpression	i = 0		9665670	0		=			
ANR	9666855	Identifier	i		9665670	0					
ANR	9666856	PrimaryExpression	0		9665670	1					
ANR	9666857	AssignmentExpression	text = ( char * ) cupsArrayFirst ( array )		9665670	1		=			
ANR	9666858	Identifier	text		9665670	0					
ANR	9666859	CastExpression	( char * ) cupsArrayFirst ( array )		9665670	1					
ANR	9666860	CastTarget	char *		9665670	0					
ANR	9666861	CallExpression	cupsArrayFirst ( array )		9665670	1					
ANR	9666862	Callee	cupsArrayFirst		9665670	0					
ANR	9666863	Identifier	cupsArrayFirst		9665670	0					
ANR	9666864	ArgumentList	array		9665670	1					
ANR	9666865	Argument	array		9665670	0					
ANR	9666866	Identifier	array		9665670	0					
ANR	9666867	Condition	i < 32	370:7:7442:7447	9665670	1	True				
ANR	9666868	RelationalExpression	i < 32		9665670	0		<			
ANR	9666869	Identifier	i		9665670	0					
ANR	9666870	PrimaryExpression	32		9665670	1					
ANR	9666871	Expression	"i ++ , text = ( char * ) cupsArrayNext ( array )"	371:7:7457:7497	9665670	2	True				
ANR	9666872	PostIncDecOperationExpression	i ++		9665670	0					
ANR	9666873	Identifier	i		9665670	0					
ANR	9666874	IncDec	++		9665670	1					
ANR	9666875	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	1		=			
ANR	9666876	Identifier	text		9665670	0					
ANR	9666877	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9666878	CastTarget	char *		9665670	0					
ANR	9666879	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9666880	Callee	cupsArrayNext		9665670	0					
ANR	9666881	Identifier	cupsArrayNext		9665670	0					
ANR	9666882	ArgumentList	array		9665670	1					
ANR	9666883	Argument	array		9665670	0					
ANR	9666884	Identifier	array		9665670	0					
ANR	9666885	CompoundStatement		324:2:6257:6257	9665670	3					
ANR	9666886	ExpressionStatement	saved [ i ] = text	373:4:7508:7523	9665670	0	True				
ANR	9666887	AssignmentExpression	saved [ i ] = text		9665670	0		=			
ANR	9666888	ArrayIndexing	saved [ i ]		9665670	0					
ANR	9666889	Identifier	saved		9665670	0					
ANR	9666890	Identifier	i		9665670	1					
ANR	9666891	Identifier	text		9665670	1					
ANR	9666892	IfStatement	if ( ! cupsArraySave ( array ) )		9665670	1					
ANR	9666893	Condition	! cupsArraySave ( array )	375:8:7534:7554	9665670	0	True				
ANR	9666894	UnaryOperationExpression	! cupsArraySave ( array )		9665670	0					
ANR	9666895	UnaryOperator	!		9665670	0					
ANR	9666896	CallExpression	cupsArraySave ( array )		9665670	1					
ANR	9666897	Callee	cupsArraySave		9665670	0					
ANR	9666898	Identifier	cupsArraySave		9665670	0					
ANR	9666899	ArgumentList	array		9665670	1					
ANR	9666900	Argument	array		9665670	0					
ANR	9666901	Identifier	array		9665670	0					
ANR	9666902	BreakStatement	break ;	376:6:7563:7568	9665670	1	True				
ANR	9666903	IfStatement	if ( i < 32 )		9665670	52					
ANR	9666904	Condition	i < 32	379:6:7581:7586	9665670	0	True				
ANR	9666905	RelationalExpression	i < 32		9665670	0		<			
ANR	9666906	Identifier	i		9665670	0					
ANR	9666907	PrimaryExpression	32		9665670	1					
ANR	9666908	ExpressionStatement	"printf ( ""FAIL (depth = %d)\\n"" , i )"	380:4:7593:7625	9665670	1	True				
ANR	9666909	CallExpression	"printf ( ""FAIL (depth = %d)\\n"" , i )"		9665670	0					
ANR	9666910	Callee	printf		9665670	0					
ANR	9666911	Identifier	printf		9665670	0					
ANR	9666912	ArgumentList	"""FAIL (depth = %d)\\n"""		9665670	1					
ANR	9666913	Argument	"""FAIL (depth = %d)\\n"""		9665670	0					
ANR	9666914	PrimaryExpression	"""FAIL (depth = %d)\\n"""		9665670	0					
ANR	9666915	Argument	i		9665670	1					
ANR	9666916	Identifier	i		9665670	0					
ANR	9666917	ElseStatement	else		9665670	0					
ANR	9666918	ExpressionStatement	"puts ( ""PASS"" )"	382:4:7638:7650	9665670	0	True				
ANR	9666919	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666920	Callee	puts		9665670	0					
ANR	9666921	Identifier	puts		9665670	0					
ANR	9666922	ArgumentList	"""PASS"""		9665670	1					
ANR	9666923	Argument	"""PASS"""		9665670	0					
ANR	9666924	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666925	ExpressionStatement	"fputs ( ""cupsArrayRestore: "" , stdout )"	384:2:7655:7690	9665670	53	True				
ANR	9666926	CallExpression	"fputs ( ""cupsArrayRestore: "" , stdout )"		9665670	0					
ANR	9666927	Callee	fputs		9665670	0					
ANR	9666928	Identifier	fputs		9665670	0					
ANR	9666929	ArgumentList	"""cupsArrayRestore: """		9665670	1					
ANR	9666930	Argument	"""cupsArrayRestore: """		9665670	0					
ANR	9666931	PrimaryExpression	"""cupsArrayRestore: """		9665670	0					
ANR	9666932	Argument	stdout		9665670	1					
ANR	9666933	Identifier	stdout		9665670	0					
ANR	9666934	WhileStatement	while ( i > 0 )		9665670	54					
ANR	9666935	Condition	i > 0	386:9:7702:7706	9665670	0	True				
ANR	9666936	RelationalExpression	i > 0		9665670	0		>			
ANR	9666937	Identifier	i		9665670	0					
ANR	9666938	PrimaryExpression	0		9665670	1					
ANR	9666939	CompoundStatement		339:2:6466:6466	9665670	1					
ANR	9666940	ExpressionStatement	i --	388:4:7717:7721	9665670	0	True				
ANR	9666941	PostIncDecOperationExpression	i --		9665670	0					
ANR	9666942	Identifier	i		9665670	0					
ANR	9666943	IncDec	--		9665670	1					
ANR	9666944	ExpressionStatement	text = cupsArrayRestore ( array )	390:4:7728:7758	9665670	1	True				
ANR	9666945	AssignmentExpression	text = cupsArrayRestore ( array )		9665670	0		=			
ANR	9666946	Identifier	text		9665670	0					
ANR	9666947	CallExpression	cupsArrayRestore ( array )		9665670	1					
ANR	9666948	Callee	cupsArrayRestore		9665670	0					
ANR	9666949	Identifier	cupsArrayRestore		9665670	0					
ANR	9666950	ArgumentList	array		9665670	1					
ANR	9666951	Argument	array		9665670	0					
ANR	9666952	Identifier	array		9665670	0					
ANR	9666953	IfStatement	if ( text != saved [ i ] )		9665670	2					
ANR	9666954	Condition	text != saved [ i ]	391:8:7768:7783	9665670	0	True				
ANR	9666955	EqualityExpression	text != saved [ i ]		9665670	0		!=			
ANR	9666956	Identifier	text		9665670	0					
ANR	9666957	ArrayIndexing	saved [ i ]		9665670	1					
ANR	9666958	Identifier	saved		9665670	0					
ANR	9666959	Identifier	i		9665670	1					
ANR	9666960	BreakStatement	break ;	392:6:7792:7797	9665670	1	True				
ANR	9666961	IfStatement	if ( i )		9665670	55					
ANR	9666962	Condition	i	395:6:7810:7810	9665670	0	True				
ANR	9666963	Identifier	i		9665670	0					
ANR	9666964	ExpressionStatement	"printf ( ""FAIL (depth = %d)\\n"" , i )"	396:4:7817:7849	9665670	1	True				
ANR	9666965	CallExpression	"printf ( ""FAIL (depth = %d)\\n"" , i )"		9665670	0					
ANR	9666966	Callee	printf		9665670	0					
ANR	9666967	Identifier	printf		9665670	0					
ANR	9666968	ArgumentList	"""FAIL (depth = %d)\\n"""		9665670	1					
ANR	9666969	Argument	"""FAIL (depth = %d)\\n"""		9665670	0					
ANR	9666970	PrimaryExpression	"""FAIL (depth = %d)\\n"""		9665670	0					
ANR	9666971	Argument	i		9665670	1					
ANR	9666972	Identifier	i		9665670	0					
ANR	9666973	ElseStatement	else		9665670	0					
ANR	9666974	ExpressionStatement	"puts ( ""PASS"" )"	398:4:7862:7874	9665670	0	True				
ANR	9666975	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9666976	Callee	puts		9665670	0					
ANR	9666977	Identifier	puts		9665670	0					
ANR	9666978	ArgumentList	"""PASS"""		9665670	1					
ANR	9666979	Argument	"""PASS"""		9665670	0					
ANR	9666980	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9666981	ExpressionStatement	cupsArrayDelete ( array )	404:2:7914:7936	9665670	56	True				
ANR	9666982	CallExpression	cupsArrayDelete ( array )		9665670	0					
ANR	9666983	Callee	cupsArrayDelete		9665670	0					
ANR	9666984	Identifier	cupsArrayDelete		9665670	0					
ANR	9666985	ArgumentList	array		9665670	1					
ANR	9666986	Argument	array		9665670	0					
ANR	9666987	Identifier	array		9665670	0					
ANR	9666988	ExpressionStatement	cupsArrayDelete ( dup_array )	405:2:7940:7966	9665670	57	True				
ANR	9666989	CallExpression	cupsArrayDelete ( dup_array )		9665670	0					
ANR	9666990	Callee	cupsArrayDelete		9665670	0					
ANR	9666991	Identifier	cupsArrayDelete		9665670	0					
ANR	9666992	ArgumentList	dup_array		9665670	1					
ANR	9666993	Argument	dup_array		9665670	0					
ANR	9666994	Identifier	dup_array		9665670	0					
ANR	9666995	ExpressionStatement	"fputs ( ""_cupsArrayNewStrings(\\"" \\\\t\\\\nfoo bar\\\\tboo\\\\nfar\\"", ' '): "" , stdout )"	411:2:8025:8101	9665670	58	True				
ANR	9666996	CallExpression	"fputs ( ""_cupsArrayNewStrings(\\"" \\\\t\\\\nfoo bar\\\\tboo\\\\nfar\\"", ' '): "" , stdout )"		9665670	0					
ANR	9666997	Callee	fputs		9665670	0					
ANR	9666998	Identifier	fputs		9665670	0					
ANR	9666999	ArgumentList	"""_cupsArrayNewStrings(\\"" \\\\t\\\\nfoo bar\\\\tboo\\\\nfar\\"", ' '): """		9665670	1					
ANR	9667000	Argument	"""_cupsArrayNewStrings(\\"" \\\\t\\\\nfoo bar\\\\tboo\\\\nfar\\"", ' '): """		9665670	0					
ANR	9667001	PrimaryExpression	"""_cupsArrayNewStrings(\\"" \\\\t\\\\nfoo bar\\\\tboo\\\\nfar\\"", ' '): """		9665670	0					
ANR	9667002	Argument	stdout		9665670	1					
ANR	9667003	Identifier	stdout		9665670	0					
ANR	9667004	ExpressionStatement	"array = _cupsArrayNewStrings ( "" \\t\\nfoo bar\\tboo\\nfar"" , ' ' )"	412:2:8105:8164	9665670	59	True				
ANR	9667005	AssignmentExpression	"array = _cupsArrayNewStrings ( "" \\t\\nfoo bar\\tboo\\nfar"" , ' ' )"		9665670	0		=			
ANR	9667006	Identifier	array		9665670	0					
ANR	9667007	CallExpression	"_cupsArrayNewStrings ( "" \\t\\nfoo bar\\tboo\\nfar"" , ' ' )"		9665670	1					
ANR	9667008	Callee	_cupsArrayNewStrings		9665670	0					
ANR	9667009	Identifier	_cupsArrayNewStrings		9665670	0					
ANR	9667010	ArgumentList	""" \\t\\nfoo bar\\tboo\\nfar"""		9665670	1					
ANR	9667011	Argument	""" \\t\\nfoo bar\\tboo\\nfar"""		9665670	0					
ANR	9667012	PrimaryExpression	""" \\t\\nfoo bar\\tboo\\nfar"""		9665670	0					
ANR	9667013	Argument	' '		9665670	1					
ANR	9667014	PrimaryExpression	' '		9665670	0					
ANR	9667015	IfStatement	if ( ! array )		9665670	60					
ANR	9667016	Condition	! array	413:6:8172:8177	9665670	0	True				
ANR	9667017	UnaryOperationExpression	! array		9665670	0					
ANR	9667018	UnaryOperator	!		9665670	0					
ANR	9667019	Identifier	array		9665670	1					
ANR	9667020	CompoundStatement		366:2:6937:6937	9665670	1					
ANR	9667021	ExpressionStatement	status = 1	415:4:8188:8198	9665670	0	True				
ANR	9667022	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667023	Identifier	status		9665670	0					
ANR	9667024	PrimaryExpression	1		9665670	1					
ANR	9667025	ExpressionStatement	"puts ( ""FAIL (unable to create array)"" )"	416:4:8204:8241	9665670	1	True				
ANR	9667026	CallExpression	"puts ( ""FAIL (unable to create array)"" )"		9665670	0					
ANR	9667027	Callee	puts		9665670	0					
ANR	9667028	Identifier	puts		9665670	0					
ANR	9667029	ArgumentList	"""FAIL (unable to create array)"""		9665670	1					
ANR	9667030	Argument	"""FAIL (unable to create array)"""		9665670	0					
ANR	9667031	PrimaryExpression	"""FAIL (unable to create array)"""		9665670	0					
ANR	9667032	ElseStatement	else		9665670	0					
ANR	9667033	IfStatement	if ( cupsArrayCount ( array ) != 4 )		9665670	0					
ANR	9667034	Condition	cupsArrayCount ( array ) != 4	418:11:8258:8283	9665670	0	True				
ANR	9667035	EqualityExpression	cupsArrayCount ( array ) != 4		9665670	0		!=			
ANR	9667036	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9667037	Callee	cupsArrayCount		9665670	0					
ANR	9667038	Identifier	cupsArrayCount		9665670	0					
ANR	9667039	ArgumentList	array		9665670	1					
ANR	9667040	Argument	array		9665670	0					
ANR	9667041	Identifier	array		9665670	0					
ANR	9667042	PrimaryExpression	4		9665670	1					
ANR	9667043	CompoundStatement		371:2:7043:7043	9665670	1					
ANR	9667044	ExpressionStatement	status = 1	420:4:8294:8304	9665670	0	True				
ANR	9667045	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667046	Identifier	status		9665670	0					
ANR	9667047	PrimaryExpression	1		9665670	1					
ANR	9667048	ExpressionStatement	"printf ( ""FAIL (got %d elements, expected 4)\\n"" , cupsArrayCount ( array ) )"	421:4:8310:8379	9665670	1	True				
ANR	9667049	CallExpression	"printf ( ""FAIL (got %d elements, expected 4)\\n"" , cupsArrayCount ( array ) )"		9665670	0					
ANR	9667050	Callee	printf		9665670	0					
ANR	9667051	Identifier	printf		9665670	0					
ANR	9667052	ArgumentList	"""FAIL (got %d elements, expected 4)\\n"""		9665670	1					
ANR	9667053	Argument	"""FAIL (got %d elements, expected 4)\\n"""		9665670	0					
ANR	9667054	PrimaryExpression	"""FAIL (got %d elements, expected 4)\\n"""		9665670	0					
ANR	9667055	Argument	cupsArrayCount ( array )		9665670	1					
ANR	9667056	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9667057	Callee	cupsArrayCount		9665670	0					
ANR	9667058	Identifier	cupsArrayCount		9665670	0					
ANR	9667059	ArgumentList	array		9665670	1					
ANR	9667060	Argument	array		9665670	0					
ANR	9667061	Identifier	array		9665670	0					
ANR	9667062	ElseStatement	else		9665670	0					
ANR	9667063	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayFirst ( array ) , ""bar"" ) )"		9665670	0					
ANR	9667064	Condition	"strcmp ( text = ( char * ) cupsArrayFirst ( array ) , ""bar"" )"	423:11:8396:8446	9665670	0	True				
ANR	9667065	CallExpression	"strcmp ( text = ( char * ) cupsArrayFirst ( array ) , ""bar"" )"		9665670	0					
ANR	9667066	Callee	strcmp		9665670	0					
ANR	9667067	Identifier	strcmp		9665670	0					
ANR	9667068	ArgumentList	text = ( char * ) cupsArrayFirst ( array )		9665670	1					
ANR	9667069	Argument	text = ( char * ) cupsArrayFirst ( array )		9665670	0					
ANR	9667070	AssignmentExpression	text = ( char * ) cupsArrayFirst ( array )		9665670	0		=			
ANR	9667071	Identifier	text		9665670	0					
ANR	9667072	CastExpression	( char * ) cupsArrayFirst ( array )		9665670	1					
ANR	9667073	CastTarget	char *		9665670	0					
ANR	9667074	CallExpression	cupsArrayFirst ( array )		9665670	1					
ANR	9667075	Callee	cupsArrayFirst		9665670	0					
ANR	9667076	Identifier	cupsArrayFirst		9665670	0					
ANR	9667077	ArgumentList	array		9665670	1					
ANR	9667078	Argument	array		9665670	0					
ANR	9667079	Identifier	array		9665670	0					
ANR	9667080	Argument	"""bar"""		9665670	1					
ANR	9667081	PrimaryExpression	"""bar"""		9665670	0					
ANR	9667082	CompoundStatement		376:2:7206:7206	9665670	1					
ANR	9667083	ExpressionStatement	status = 1	425:4:8457:8467	9665670	0	True				
ANR	9667084	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667085	Identifier	status		9665670	0					
ANR	9667086	PrimaryExpression	1		9665670	1					
ANR	9667087	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"" , text )"	426:4:8473:8536	9665670	1	True				
ANR	9667088	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"" , text )"		9665670	0					
ANR	9667089	Callee	printf		9665670	0					
ANR	9667090	Identifier	printf		9665670	0					
ANR	9667091	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"""		9665670	1					
ANR	9667092	Argument	"""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"""		9665670	0					
ANR	9667093	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"""		9665670	0					
ANR	9667094	Argument	text		9665670	1					
ANR	9667095	Identifier	text		9665670	0					
ANR	9667096	ElseStatement	else		9665670	0					
ANR	9667097	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""boo"" ) )"		9665670	0					
ANR	9667098	Condition	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""boo"" )"	428:11:8553:8602	9665670	0	True				
ANR	9667099	CallExpression	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""boo"" )"		9665670	0					
ANR	9667100	Callee	strcmp		9665670	0					
ANR	9667101	Identifier	strcmp		9665670	0					
ANR	9667102	ArgumentList	text = ( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667103	Argument	text = ( char * ) cupsArrayNext ( array )		9665670	0					
ANR	9667104	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9667105	Identifier	text		9665670	0					
ANR	9667106	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667107	CastTarget	char *		9665670	0					
ANR	9667108	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9667109	Callee	cupsArrayNext		9665670	0					
ANR	9667110	Identifier	cupsArrayNext		9665670	0					
ANR	9667111	ArgumentList	array		9665670	1					
ANR	9667112	Argument	array		9665670	0					
ANR	9667113	Identifier	array		9665670	0					
ANR	9667114	Argument	"""boo"""		9665670	1					
ANR	9667115	PrimaryExpression	"""boo"""		9665670	0					
ANR	9667116	CompoundStatement		381:2:7362:7362	9665670	1					
ANR	9667117	ExpressionStatement	status = 1	430:4:8613:8623	9665670	0	True				
ANR	9667118	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667119	Identifier	status		9665670	0					
ANR	9667120	PrimaryExpression	1		9665670	1					
ANR	9667121	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"" , text )"	431:4:8629:8692	9665670	1	True				
ANR	9667122	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"" , text )"		9665670	0					
ANR	9667123	Callee	printf		9665670	0					
ANR	9667124	Identifier	printf		9665670	0					
ANR	9667125	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"""		9665670	1					
ANR	9667126	Argument	"""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"""		9665670	0					
ANR	9667127	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"""		9665670	0					
ANR	9667128	Argument	text		9665670	1					
ANR	9667129	Identifier	text		9665670	0					
ANR	9667130	ElseStatement	else		9665670	0					
ANR	9667131	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""far"" ) )"		9665670	0					
ANR	9667132	Condition	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""far"" )"	433:11:8709:8758	9665670	0	True				
ANR	9667133	CallExpression	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""far"" )"		9665670	0					
ANR	9667134	Callee	strcmp		9665670	0					
ANR	9667135	Identifier	strcmp		9665670	0					
ANR	9667136	ArgumentList	text = ( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667137	Argument	text = ( char * ) cupsArrayNext ( array )		9665670	0					
ANR	9667138	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9667139	Identifier	text		9665670	0					
ANR	9667140	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667141	CastTarget	char *		9665670	0					
ANR	9667142	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9667143	Callee	cupsArrayNext		9665670	0					
ANR	9667144	Identifier	cupsArrayNext		9665670	0					
ANR	9667145	ArgumentList	array		9665670	1					
ANR	9667146	Argument	array		9665670	0					
ANR	9667147	Identifier	array		9665670	0					
ANR	9667148	Argument	"""far"""		9665670	1					
ANR	9667149	PrimaryExpression	"""far"""		9665670	0					
ANR	9667150	CompoundStatement		386:2:7518:7518	9665670	1					
ANR	9667151	ExpressionStatement	status = 1	435:4:8769:8779	9665670	0	True				
ANR	9667152	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667153	Identifier	status		9665670	0					
ANR	9667154	PrimaryExpression	1		9665670	1					
ANR	9667155	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"" , text )"	436:4:8785:8848	9665670	1	True				
ANR	9667156	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"" , text )"		9665670	0					
ANR	9667157	Callee	printf		9665670	0					
ANR	9667158	Identifier	printf		9665670	0					
ANR	9667159	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"""		9665670	1					
ANR	9667160	Argument	"""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"""		9665670	0					
ANR	9667161	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"""		9665670	0					
ANR	9667162	Argument	text		9665670	1					
ANR	9667163	Identifier	text		9665670	0					
ANR	9667164	ElseStatement	else		9665670	0					
ANR	9667165	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""foo"" ) )"		9665670	0					
ANR	9667166	Condition	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""foo"" )"	438:11:8865:8914	9665670	0	True				
ANR	9667167	CallExpression	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""foo"" )"		9665670	0					
ANR	9667168	Callee	strcmp		9665670	0					
ANR	9667169	Identifier	strcmp		9665670	0					
ANR	9667170	ArgumentList	text = ( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667171	Argument	text = ( char * ) cupsArrayNext ( array )		9665670	0					
ANR	9667172	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9667173	Identifier	text		9665670	0					
ANR	9667174	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667175	CastTarget	char *		9665670	0					
ANR	9667176	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9667177	Callee	cupsArrayNext		9665670	0					
ANR	9667178	Identifier	cupsArrayNext		9665670	0					
ANR	9667179	ArgumentList	array		9665670	1					
ANR	9667180	Argument	array		9665670	0					
ANR	9667181	Identifier	array		9665670	0					
ANR	9667182	Argument	"""foo"""		9665670	1					
ANR	9667183	PrimaryExpression	"""foo"""		9665670	0					
ANR	9667184	CompoundStatement		391:2:7674:7674	9665670	1					
ANR	9667185	ExpressionStatement	status = 1	440:4:8925:8935	9665670	0	True				
ANR	9667186	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667187	Identifier	status		9665670	0					
ANR	9667188	PrimaryExpression	1		9665670	1					
ANR	9667189	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"" , text )"	441:4:8941:9004	9665670	1	True				
ANR	9667190	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"" , text )"		9665670	0					
ANR	9667191	Callee	printf		9665670	0					
ANR	9667192	Identifier	printf		9665670	0					
ANR	9667193	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"""		9665670	1					
ANR	9667194	Argument	"""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"""		9665670	0					
ANR	9667195	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"""		9665670	0					
ANR	9667196	Argument	text		9665670	1					
ANR	9667197	Identifier	text		9665670	0					
ANR	9667198	ElseStatement	else		9665670	0					
ANR	9667199	ExpressionStatement	"puts ( ""PASS"" )"	444:4:9021:9033	9665670	0	True				
ANR	9667200	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9667201	Callee	puts		9665670	0					
ANR	9667202	Identifier	puts		9665670	0					
ANR	9667203	ArgumentList	"""PASS"""		9665670	1					
ANR	9667204	Argument	"""PASS"""		9665670	0					
ANR	9667205	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9667206	ExpressionStatement	"fputs ( ""_cupsArrayAddStrings(array, \\""foo2,bar2\\"", ','): "" , stdout )"	446:2:9038:9104	9665670	61	True				
ANR	9667207	CallExpression	"fputs ( ""_cupsArrayAddStrings(array, \\""foo2,bar2\\"", ','): "" , stdout )"		9665670	0					
ANR	9667208	Callee	fputs		9665670	0					
ANR	9667209	Identifier	fputs		9665670	0					
ANR	9667210	ArgumentList	"""_cupsArrayAddStrings(array, \\""foo2,bar2\\"", ','): """		9665670	1					
ANR	9667211	Argument	"""_cupsArrayAddStrings(array, \\""foo2,bar2\\"", ','): """		9665670	0					
ANR	9667212	PrimaryExpression	"""_cupsArrayAddStrings(array, \\""foo2,bar2\\"", ','): """		9665670	0					
ANR	9667213	Argument	stdout		9665670	1					
ANR	9667214	Identifier	stdout		9665670	0					
ANR	9667215	ExpressionStatement	"_cupsArrayAddStrings ( array , ""foo2,bar2"" , ',' )"	447:2:9108:9153	9665670	62	True				
ANR	9667216	CallExpression	"_cupsArrayAddStrings ( array , ""foo2,bar2"" , ',' )"		9665670	0					
ANR	9667217	Callee	_cupsArrayAddStrings		9665670	0					
ANR	9667218	Identifier	_cupsArrayAddStrings		9665670	0					
ANR	9667219	ArgumentList	array		9665670	1					
ANR	9667220	Argument	array		9665670	0					
ANR	9667221	Identifier	array		9665670	0					
ANR	9667222	Argument	"""foo2,bar2"""		9665670	1					
ANR	9667223	PrimaryExpression	"""foo2,bar2"""		9665670	0					
ANR	9667224	Argument	"','"		9665670	2					
ANR	9667225	PrimaryExpression	"','"		9665670	0					
ANR	9667226	IfStatement	if ( cupsArrayCount ( array ) != 6 )		9665670	63					
ANR	9667227	Condition	cupsArrayCount ( array ) != 6	449:6:9162:9187	9665670	0	True				
ANR	9667228	EqualityExpression	cupsArrayCount ( array ) != 6		9665670	0		!=			
ANR	9667229	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9667230	Callee	cupsArrayCount		9665670	0					
ANR	9667231	Identifier	cupsArrayCount		9665670	0					
ANR	9667232	ArgumentList	array		9665670	1					
ANR	9667233	Argument	array		9665670	0					
ANR	9667234	Identifier	array		9665670	0					
ANR	9667235	PrimaryExpression	6		9665670	1					
ANR	9667236	CompoundStatement		402:2:7947:7947	9665670	1					
ANR	9667237	ExpressionStatement	status = 1	451:4:9198:9208	9665670	0	True				
ANR	9667238	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667239	Identifier	status		9665670	0					
ANR	9667240	PrimaryExpression	1		9665670	1					
ANR	9667241	ExpressionStatement	"printf ( ""FAIL (got %d elements, expected 6)\\n"" , cupsArrayCount ( array ) )"	452:4:9214:9283	9665670	1	True				
ANR	9667242	CallExpression	"printf ( ""FAIL (got %d elements, expected 6)\\n"" , cupsArrayCount ( array ) )"		9665670	0					
ANR	9667243	Callee	printf		9665670	0					
ANR	9667244	Identifier	printf		9665670	0					
ANR	9667245	ArgumentList	"""FAIL (got %d elements, expected 6)\\n"""		9665670	1					
ANR	9667246	Argument	"""FAIL (got %d elements, expected 6)\\n"""		9665670	0					
ANR	9667247	PrimaryExpression	"""FAIL (got %d elements, expected 6)\\n"""		9665670	0					
ANR	9667248	Argument	cupsArrayCount ( array )		9665670	1					
ANR	9667249	CallExpression	cupsArrayCount ( array )		9665670	0					
ANR	9667250	Callee	cupsArrayCount		9665670	0					
ANR	9667251	Identifier	cupsArrayCount		9665670	0					
ANR	9667252	ArgumentList	array		9665670	1					
ANR	9667253	Argument	array		9665670	0					
ANR	9667254	Identifier	array		9665670	0					
ANR	9667255	ElseStatement	else		9665670	0					
ANR	9667256	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayFirst ( array ) , ""bar"" ) )"		9665670	0					
ANR	9667257	Condition	"strcmp ( text = ( char * ) cupsArrayFirst ( array ) , ""bar"" )"	454:11:9300:9350	9665670	0	True				
ANR	9667258	CallExpression	"strcmp ( text = ( char * ) cupsArrayFirst ( array ) , ""bar"" )"		9665670	0					
ANR	9667259	Callee	strcmp		9665670	0					
ANR	9667260	Identifier	strcmp		9665670	0					
ANR	9667261	ArgumentList	text = ( char * ) cupsArrayFirst ( array )		9665670	1					
ANR	9667262	Argument	text = ( char * ) cupsArrayFirst ( array )		9665670	0					
ANR	9667263	AssignmentExpression	text = ( char * ) cupsArrayFirst ( array )		9665670	0		=			
ANR	9667264	Identifier	text		9665670	0					
ANR	9667265	CastExpression	( char * ) cupsArrayFirst ( array )		9665670	1					
ANR	9667266	CastTarget	char *		9665670	0					
ANR	9667267	CallExpression	cupsArrayFirst ( array )		9665670	1					
ANR	9667268	Callee	cupsArrayFirst		9665670	0					
ANR	9667269	Identifier	cupsArrayFirst		9665670	0					
ANR	9667270	ArgumentList	array		9665670	1					
ANR	9667271	Argument	array		9665670	0					
ANR	9667272	Identifier	array		9665670	0					
ANR	9667273	Argument	"""bar"""		9665670	1					
ANR	9667274	PrimaryExpression	"""bar"""		9665670	0					
ANR	9667275	CompoundStatement		407:2:8110:8110	9665670	1					
ANR	9667276	ExpressionStatement	status = 1	456:4:9361:9371	9665670	0	True				
ANR	9667277	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667278	Identifier	status		9665670	0					
ANR	9667279	PrimaryExpression	1		9665670	1					
ANR	9667280	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"" , text )"	457:4:9377:9440	9665670	1	True				
ANR	9667281	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"" , text )"		9665670	0					
ANR	9667282	Callee	printf		9665670	0					
ANR	9667283	Identifier	printf		9665670	0					
ANR	9667284	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"""		9665670	1					
ANR	9667285	Argument	"""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"""		9665670	0					
ANR	9667286	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""bar\\"")\\n"""		9665670	0					
ANR	9667287	Argument	text		9665670	1					
ANR	9667288	Identifier	text		9665670	0					
ANR	9667289	ElseStatement	else		9665670	0					
ANR	9667290	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""bar2"" ) )"		9665670	0					
ANR	9667291	Condition	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""bar2"" )"	459:11:9457:9507	9665670	0	True				
ANR	9667292	CallExpression	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""bar2"" )"		9665670	0					
ANR	9667293	Callee	strcmp		9665670	0					
ANR	9667294	Identifier	strcmp		9665670	0					
ANR	9667295	ArgumentList	text = ( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667296	Argument	text = ( char * ) cupsArrayNext ( array )		9665670	0					
ANR	9667297	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9667298	Identifier	text		9665670	0					
ANR	9667299	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667300	CastTarget	char *		9665670	0					
ANR	9667301	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9667302	Callee	cupsArrayNext		9665670	0					
ANR	9667303	Identifier	cupsArrayNext		9665670	0					
ANR	9667304	ArgumentList	array		9665670	1					
ANR	9667305	Argument	array		9665670	0					
ANR	9667306	Identifier	array		9665670	0					
ANR	9667307	Argument	"""bar2"""		9665670	1					
ANR	9667308	PrimaryExpression	"""bar2"""		9665670	0					
ANR	9667309	CompoundStatement		412:2:8267:8267	9665670	1					
ANR	9667310	ExpressionStatement	status = 1	461:4:9518:9528	9665670	0	True				
ANR	9667311	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667312	Identifier	status		9665670	0					
ANR	9667313	PrimaryExpression	1		9665670	1					
ANR	9667314	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""bar2\\"")\\n"" , text )"	462:4:9534:9598	9665670	1	True				
ANR	9667315	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""bar2\\"")\\n"" , text )"		9665670	0					
ANR	9667316	Callee	printf		9665670	0					
ANR	9667317	Identifier	printf		9665670	0					
ANR	9667318	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""bar2\\"")\\n"""		9665670	1					
ANR	9667319	Argument	"""FAIL (first element \\""%s\\"", expected \\""bar2\\"")\\n"""		9665670	0					
ANR	9667320	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""bar2\\"")\\n"""		9665670	0					
ANR	9667321	Argument	text		9665670	1					
ANR	9667322	Identifier	text		9665670	0					
ANR	9667323	ElseStatement	else		9665670	0					
ANR	9667324	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""boo"" ) )"		9665670	0					
ANR	9667325	Condition	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""boo"" )"	464:11:9615:9664	9665670	0	True				
ANR	9667326	CallExpression	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""boo"" )"		9665670	0					
ANR	9667327	Callee	strcmp		9665670	0					
ANR	9667328	Identifier	strcmp		9665670	0					
ANR	9667329	ArgumentList	text = ( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667330	Argument	text = ( char * ) cupsArrayNext ( array )		9665670	0					
ANR	9667331	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9667332	Identifier	text		9665670	0					
ANR	9667333	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667334	CastTarget	char *		9665670	0					
ANR	9667335	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9667336	Callee	cupsArrayNext		9665670	0					
ANR	9667337	Identifier	cupsArrayNext		9665670	0					
ANR	9667338	ArgumentList	array		9665670	1					
ANR	9667339	Argument	array		9665670	0					
ANR	9667340	Identifier	array		9665670	0					
ANR	9667341	Argument	"""boo"""		9665670	1					
ANR	9667342	PrimaryExpression	"""boo"""		9665670	0					
ANR	9667343	CompoundStatement		417:2:8424:8424	9665670	1					
ANR	9667344	ExpressionStatement	status = 1	466:4:9675:9685	9665670	0	True				
ANR	9667345	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667346	Identifier	status		9665670	0					
ANR	9667347	PrimaryExpression	1		9665670	1					
ANR	9667348	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"" , text )"	467:4:9691:9754	9665670	1	True				
ANR	9667349	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"" , text )"		9665670	0					
ANR	9667350	Callee	printf		9665670	0					
ANR	9667351	Identifier	printf		9665670	0					
ANR	9667352	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"""		9665670	1					
ANR	9667353	Argument	"""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"""		9665670	0					
ANR	9667354	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""boo\\"")\\n"""		9665670	0					
ANR	9667355	Argument	text		9665670	1					
ANR	9667356	Identifier	text		9665670	0					
ANR	9667357	ElseStatement	else		9665670	0					
ANR	9667358	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""far"" ) )"		9665670	0					
ANR	9667359	Condition	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""far"" )"	469:11:9771:9820	9665670	0	True				
ANR	9667360	CallExpression	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""far"" )"		9665670	0					
ANR	9667361	Callee	strcmp		9665670	0					
ANR	9667362	Identifier	strcmp		9665670	0					
ANR	9667363	ArgumentList	text = ( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667364	Argument	text = ( char * ) cupsArrayNext ( array )		9665670	0					
ANR	9667365	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9667366	Identifier	text		9665670	0					
ANR	9667367	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667368	CastTarget	char *		9665670	0					
ANR	9667369	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9667370	Callee	cupsArrayNext		9665670	0					
ANR	9667371	Identifier	cupsArrayNext		9665670	0					
ANR	9667372	ArgumentList	array		9665670	1					
ANR	9667373	Argument	array		9665670	0					
ANR	9667374	Identifier	array		9665670	0					
ANR	9667375	Argument	"""far"""		9665670	1					
ANR	9667376	PrimaryExpression	"""far"""		9665670	0					
ANR	9667377	CompoundStatement		422:2:8580:8580	9665670	1					
ANR	9667378	ExpressionStatement	status = 1	471:4:9831:9841	9665670	0	True				
ANR	9667379	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667380	Identifier	status		9665670	0					
ANR	9667381	PrimaryExpression	1		9665670	1					
ANR	9667382	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"" , text )"	472:4:9847:9910	9665670	1	True				
ANR	9667383	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"" , text )"		9665670	0					
ANR	9667384	Callee	printf		9665670	0					
ANR	9667385	Identifier	printf		9665670	0					
ANR	9667386	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"""		9665670	1					
ANR	9667387	Argument	"""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"""		9665670	0					
ANR	9667388	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""far\\"")\\n"""		9665670	0					
ANR	9667389	Argument	text		9665670	1					
ANR	9667390	Identifier	text		9665670	0					
ANR	9667391	ElseStatement	else		9665670	0					
ANR	9667392	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""foo"" ) )"		9665670	0					
ANR	9667393	Condition	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""foo"" )"	474:11:9927:9976	9665670	0	True				
ANR	9667394	CallExpression	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""foo"" )"		9665670	0					
ANR	9667395	Callee	strcmp		9665670	0					
ANR	9667396	Identifier	strcmp		9665670	0					
ANR	9667397	ArgumentList	text = ( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667398	Argument	text = ( char * ) cupsArrayNext ( array )		9665670	0					
ANR	9667399	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9667400	Identifier	text		9665670	0					
ANR	9667401	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667402	CastTarget	char *		9665670	0					
ANR	9667403	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9667404	Callee	cupsArrayNext		9665670	0					
ANR	9667405	Identifier	cupsArrayNext		9665670	0					
ANR	9667406	ArgumentList	array		9665670	1					
ANR	9667407	Argument	array		9665670	0					
ANR	9667408	Identifier	array		9665670	0					
ANR	9667409	Argument	"""foo"""		9665670	1					
ANR	9667410	PrimaryExpression	"""foo"""		9665670	0					
ANR	9667411	CompoundStatement		427:2:8736:8736	9665670	1					
ANR	9667412	ExpressionStatement	status = 1	476:4:9987:9997	9665670	0	True				
ANR	9667413	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667414	Identifier	status		9665670	0					
ANR	9667415	PrimaryExpression	1		9665670	1					
ANR	9667416	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"" , text )"	477:4:10003:10066	9665670	1	True				
ANR	9667417	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"" , text )"		9665670	0					
ANR	9667418	Callee	printf		9665670	0					
ANR	9667419	Identifier	printf		9665670	0					
ANR	9667420	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"""		9665670	1					
ANR	9667421	Argument	"""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"""		9665670	0					
ANR	9667422	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""foo\\"")\\n"""		9665670	0					
ANR	9667423	Argument	text		9665670	1					
ANR	9667424	Identifier	text		9665670	0					
ANR	9667425	ElseStatement	else		9665670	0					
ANR	9667426	IfStatement	"if ( strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""foo2"" ) )"		9665670	0					
ANR	9667427	Condition	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""foo2"" )"	479:11:10083:10133	9665670	0	True				
ANR	9667428	CallExpression	"strcmp ( text = ( char * ) cupsArrayNext ( array ) , ""foo2"" )"		9665670	0					
ANR	9667429	Callee	strcmp		9665670	0					
ANR	9667430	Identifier	strcmp		9665670	0					
ANR	9667431	ArgumentList	text = ( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667432	Argument	text = ( char * ) cupsArrayNext ( array )		9665670	0					
ANR	9667433	AssignmentExpression	text = ( char * ) cupsArrayNext ( array )		9665670	0		=			
ANR	9667434	Identifier	text		9665670	0					
ANR	9667435	CastExpression	( char * ) cupsArrayNext ( array )		9665670	1					
ANR	9667436	CastTarget	char *		9665670	0					
ANR	9667437	CallExpression	cupsArrayNext ( array )		9665670	1					
ANR	9667438	Callee	cupsArrayNext		9665670	0					
ANR	9667439	Identifier	cupsArrayNext		9665670	0					
ANR	9667440	ArgumentList	array		9665670	1					
ANR	9667441	Argument	array		9665670	0					
ANR	9667442	Identifier	array		9665670	0					
ANR	9667443	Argument	"""foo2"""		9665670	1					
ANR	9667444	PrimaryExpression	"""foo2"""		9665670	0					
ANR	9667445	CompoundStatement		432:2:8893:8893	9665670	1					
ANR	9667446	ExpressionStatement	status = 1	481:4:10144:10154	9665670	0	True				
ANR	9667447	AssignmentExpression	status = 1		9665670	0		=			
ANR	9667448	Identifier	status		9665670	0					
ANR	9667449	PrimaryExpression	1		9665670	1					
ANR	9667450	ExpressionStatement	"printf ( ""FAIL (first element \\""%s\\"", expected \\""foo2\\"")\\n"" , text )"	482:4:10160:10224	9665670	1	True				
ANR	9667451	CallExpression	"printf ( ""FAIL (first element \\""%s\\"", expected \\""foo2\\"")\\n"" , text )"		9665670	0					
ANR	9667452	Callee	printf		9665670	0					
ANR	9667453	Identifier	printf		9665670	0					
ANR	9667454	ArgumentList	"""FAIL (first element \\""%s\\"", expected \\""foo2\\"")\\n"""		9665670	1					
ANR	9667455	Argument	"""FAIL (first element \\""%s\\"", expected \\""foo2\\"")\\n"""		9665670	0					
ANR	9667456	PrimaryExpression	"""FAIL (first element \\""%s\\"", expected \\""foo2\\"")\\n"""		9665670	0					
ANR	9667457	Argument	text		9665670	1					
ANR	9667458	Identifier	text		9665670	0					
ANR	9667459	ElseStatement	else		9665670	0					
ANR	9667460	ExpressionStatement	"puts ( ""PASS"" )"	485:4:10241:10253	9665670	0	True				
ANR	9667461	CallExpression	"puts ( ""PASS"" )"		9665670	0					
ANR	9667462	Callee	puts		9665670	0					
ANR	9667463	Identifier	puts		9665670	0					
ANR	9667464	ArgumentList	"""PASS"""		9665670	1					
ANR	9667465	Argument	"""PASS"""		9665670	0					
ANR	9667466	PrimaryExpression	"""PASS"""		9665670	0					
ANR	9667467	ExpressionStatement	cupsArrayDelete ( array )	487:2:10258:10280	9665670	64	True				
ANR	9667468	CallExpression	cupsArrayDelete ( array )		9665670	0					
ANR	9667469	Callee	cupsArrayDelete		9665670	0					
ANR	9667470	Identifier	cupsArrayDelete		9665670	0					
ANR	9667471	ArgumentList	array		9665670	1					
ANR	9667472	Argument	array		9665670	0					
ANR	9667473	Identifier	array		9665670	0					
ANR	9667474	IfStatement	if ( ! status )		9665670	65					
ANR	9667475	Condition	! status	493:6:10339:10345	9665670	0	True				
ANR	9667476	UnaryOperationExpression	! status		9665670	0					
ANR	9667477	UnaryOperator	!		9665670	0					
ANR	9667478	Identifier	status		9665670	1					
ANR	9667479	ExpressionStatement	"puts ( ""\\nALL TESTS PASSED!"" )"	494:4:10352:10379	9665670	1	True				
ANR	9667480	CallExpression	"puts ( ""\\nALL TESTS PASSED!"" )"		9665670	0					
ANR	9667481	Callee	puts		9665670	0					
ANR	9667482	Identifier	puts		9665670	0					
ANR	9667483	ArgumentList	"""\\nALL TESTS PASSED!"""		9665670	1					
ANR	9667484	Argument	"""\\nALL TESTS PASSED!"""		9665670	0					
ANR	9667485	PrimaryExpression	"""\\nALL TESTS PASSED!"""		9665670	0					
ANR	9667486	ElseStatement	else		9665670	0					
ANR	9667487	ExpressionStatement	"printf ( ""\\n%d TEST(S) FAILED!\\n"" , status )"	496:4:10392:10432	9665670	0	True				
ANR	9667488	CallExpression	"printf ( ""\\n%d TEST(S) FAILED!\\n"" , status )"		9665670	0					
ANR	9667489	Callee	printf		9665670	0					
ANR	9667490	Identifier	printf		9665670	0					
ANR	9667491	ArgumentList	"""\\n%d TEST(S) FAILED!\\n"""		9665670	1					
ANR	9667492	Argument	"""\\n%d TEST(S) FAILED!\\n"""		9665670	0					
ANR	9667493	PrimaryExpression	"""\\n%d TEST(S) FAILED!\\n"""		9665670	0					
ANR	9667494	Argument	status		9665670	1					
ANR	9667495	Identifier	status		9665670	0					
ANR	9667496	ReturnStatement	return ( status ) ;	498:2:10437:10452	9665670	66	True				
ANR	9667497	Identifier	status		9665670	0					
ANR	9667498	ReturnType	int		9665670	1					
ANR	9667499	Identifier	main		9665670	2					
ANR	9667500	ParameterList	"int argc , char * argv [ ]"		9665670	3					
ANR	9667501	Parameter	int argc	47:5:1133:1141	9665670	0	True				
ANR	9667502	ParameterType	int		9665670	0					
ANR	9667503	Identifier	argc		9665670	1					
ANR	9667504	Parameter	char * argv [ ]	48:5:1195:1206	9665670	1	True				
ANR	9667505	ParameterType	char * [ ]		9665670	0					
ANR	9667506	Identifier	argv		9665670	1					
ANR	9667507	CFGEntryNode	ENTRY		9665670		True				
ANR	9667508	CFGExitNode	EXIT		9665670		True				
ANR	9667509	Symbol	data		9665670						
ANR	9667510	Symbol	stdout		9665670						
ANR	9667511	Symbol	saved		9665670						
ANR	9667512	Symbol	cupsArrayUserData		9665670						
ANR	9667513	Symbol	cupsArrayCurrent		9665670						
ANR	9667514	Symbol	_cupsArrayNewStrings		9665670						
ANR	9667515	Symbol	dir		9665670						
ANR	9667516	Symbol	argv		9665670						
ANR	9667517	Symbol	cupsArrayCount		9665670						
ANR	9667518	Symbol	strlen		9665670						
ANR	9667519	Symbol	array		9665670						
ANR	9667520	Symbol	cupsDirRead		9665670						
ANR	9667521	Symbol	dent -> filename		9665670						
ANR	9667522	Symbol	cupsArrayFind		9665670						
ANR	9667523	Symbol	cupsDirOpen		9665670						
ANR	9667524	Symbol	cupsArrayDup		9665670						
ANR	9667525	Symbol	end		9665670						
ANR	9667526	Symbol	text		9665670						
ANR	9667527	Symbol	dup_array		9665670						
ANR	9667528	Symbol	cupsArrayPrev		9665670						
ANR	9667529	Symbol	cupsArrayNext		9665670						
ANR	9667530	Symbol	argc		9665670						
ANR	9667531	Symbol	strcmp		9665670						
ANR	9667532	Symbol	* dent		9665670						
ANR	9667533	Symbol	cupsArrayRemove		9665670						
ANR	9667534	Symbol	NULL		9665670						
ANR	9667535	Symbol	* * dent		9665670						
ANR	9667536	Symbol	* dent -> filename		9665670						
ANR	9667537	Symbol	start		9665670						
ANR	9667538	Symbol	i		9665670						
ANR	9667539	Symbol	dent		9665670						
ANR	9667540	Symbol	get_seconds		9665670						
ANR	9667541	Symbol	cupsArraySave		9665670						
ANR	9667542	Symbol	cupsArrayFirst		9665670						
ANR	9667543	Symbol	cupsArrayRestore		9665670						
ANR	9667544	Symbol	* saved		9665670						
ANR	9667545	Symbol	* i		9665670						
ANR	9667546	Symbol	strdup		9665670						
ANR	9667547	Symbol	word		9665670						
ANR	9667548	Symbol	cupsArrayLast		9665670						
ANR	9667549	Symbol	cupsArrayNew		9665670						
ANR	9667550	Symbol	status		9665670						
ANR	9667551	Symbol	cupsArrayAdd		9665670						
ANR	9667552	Function	get_seconds	510:0:10560:10594							
ANR	9667553	FunctionDef	get_seconds ()		9667552	0					
ANR	9667554	CompoundStatement		512:0:10592:10594	9667552	0					
ANR	9667555	ReturnType	static double		9667552	1					
ANR	9667556	Identifier	get_seconds		9667552	2					
ANR	9667557	ParameterList			9667552	3					
ANR	9667558	CFGEntryNode	ENTRY		9667552		True				
ANR	9667559	CFGExitNode	EXIT		9667552		True				
ANR	9667560	Function	get_seconds	518:0:10628:10797							
ANR	9667561	FunctionDef	get_seconds ()		9667560	0					
ANR	9667562	CompoundStatement		520:0:10660:10797	9667560	0					
ANR	9667563	IdentifierDeclStatement	struct timeval curtime ;	521:2:10664:10686	9667560	0	True				
ANR	9667564	IdentifierDecl	curtime		9667560	0					
ANR	9667565	IdentifierDeclType	struct timeval		9667560	0					
ANR	9667566	Identifier	curtime		9667560	1					
ANR	9667567	ExpressionStatement	"gettimeofday ( & curtime , NULL )"	524:2:10711:10739	9667560	1	True				
ANR	9667568	CallExpression	"gettimeofday ( & curtime , NULL )"		9667560	0					
ANR	9667569	Callee	gettimeofday		9667560	0					
ANR	9667570	Identifier	gettimeofday		9667560	0					
ANR	9667571	ArgumentList	& curtime		9667560	1					
ANR	9667572	Argument	& curtime		9667560	0					
ANR	9667573	UnaryOperationExpression	& curtime		9667560	0					
ANR	9667574	UnaryOperator	&		9667560	0					
ANR	9667575	Identifier	curtime		9667560	1					
ANR	9667576	Argument	NULL		9667560	1					
ANR	9667577	Identifier	NULL		9667560	0					
ANR	9667578	ReturnStatement	return ( curtime . tv_sec + 0.000001 * curtime . tv_usec ) ;	525:2:10743:10795	9667560	2	True				
ANR	9667579	AdditiveExpression	curtime . tv_sec + 0.000001 * curtime . tv_usec		9667560	0		+			
ANR	9667580	MemberAccess	curtime . tv_sec		9667560	0					
ANR	9667581	Identifier	curtime		9667560	0					
ANR	9667582	Identifier	tv_sec		9667560	1					
ANR	9667583	MultiplicativeExpression	0.000001 * curtime . tv_usec		9667560	1		*			
ANR	9667584	PrimaryExpression	0.000001		9667560	0					
ANR	9667585	MemberAccess	curtime . tv_usec		9667560	1					
ANR	9667586	Identifier	curtime		9667560	0					
ANR	9667587	Identifier	tv_usec		9667560	1					
ANR	9667588	ReturnType	static double		9667560	1					
ANR	9667589	Identifier	get_seconds		9667560	2					
ANR	9667590	ParameterList			9667560	3					
ANR	9667591	CFGEntryNode	ENTRY		9667560		True				
ANR	9667592	CFGExitNode	EXIT		9667560		True				
ANR	9667593	Symbol	curtime		9667560						
ANR	9667594	Symbol	NULL		9667560						
ANR	9667595	Symbol	& curtime		9667560						
ANR	9667596	Symbol	curtime . tv_sec		9667560						
ANR	9667597	Symbol	curtime . tv_usec		9667560						
ANR	9667598	Function	load_words	534:0:10872:11363							
ANR	9667599	FunctionDef	"load_words (const char * filename , cups_array_t * array)"		9667598	0					
ANR	9667600	CompoundStatement		537:0:11040:11363	9667598	0					
ANR	9667601	IdentifierDeclStatement	FILE * fp ;	538:2:11044:11053	9667598	0	True				
ANR	9667602	IdentifierDecl	* fp		9667598	0					
ANR	9667603	IdentifierDeclType	FILE *		9667598	0					
ANR	9667604	Identifier	fp		9667598	1					
ANR	9667605	IdentifierDeclStatement	char word [ 256 ] ;	539:2:11075:11090	9667598	1	True				
ANR	9667606	IdentifierDecl	word [ 256 ]		9667598	0					
ANR	9667607	IdentifierDeclType	char [ 256 ]		9667598	0					
ANR	9667608	Identifier	word		9667598	1					
ANR	9667609	PrimaryExpression	256		9667598	2					
ANR	9667610	IfStatement	"if ( ( fp = fopen ( filename , ""r"" ) ) == NULL )"		9667598	2					
ANR	9667611	Condition	"( fp = fopen ( filename , ""r"" ) ) == NULL"	542:6:11122:11156	9667598	0	True				
ANR	9667612	EqualityExpression	"( fp = fopen ( filename , ""r"" ) ) == NULL"		9667598	0		==			
ANR	9667613	AssignmentExpression	"fp = fopen ( filename , ""r"" )"		9667598	0		=			
ANR	9667614	Identifier	fp		9667598	0					
ANR	9667615	CallExpression	"fopen ( filename , ""r"" )"		9667598	1					
ANR	9667616	Callee	fopen		9667598	0					
ANR	9667617	Identifier	fopen		9667598	0					
ANR	9667618	ArgumentList	filename		9667598	1					
ANR	9667619	Argument	filename		9667598	0					
ANR	9667620	Identifier	filename		9667598	0					
ANR	9667621	Argument	"""r"""		9667598	1					
ANR	9667622	PrimaryExpression	"""r"""		9667598	0					
ANR	9667623	Identifier	NULL		9667598	1					
ANR	9667624	CompoundStatement		7:2:120:120	9667598	1					
ANR	9667625	ExpressionStatement	perror ( filename )	544:4:11167:11183	9667598	0	True				
ANR	9667626	CallExpression	perror ( filename )		9667598	0					
ANR	9667627	Callee	perror		9667598	0					
ANR	9667628	Identifier	perror		9667598	0					
ANR	9667629	ArgumentList	filename		9667598	1					
ANR	9667630	Argument	filename		9667598	0					
ANR	9667631	Identifier	filename		9667598	0					
ANR	9667632	ReturnStatement	return ( 0 ) ;	545:4:11189:11199	9667598	1	True				
ANR	9667633	PrimaryExpression	0		9667598	0					
ANR	9667634	WhileStatement	"while ( fscanf ( fp , ""%255s"" , word ) == 1 )"		9667598	3					
ANR	9667635	Condition	"fscanf ( fp , ""%255s"" , word ) == 1"	548:9:11215:11244	9667598	0	True				
ANR	9667636	EqualityExpression	"fscanf ( fp , ""%255s"" , word ) == 1"		9667598	0		==			
ANR	9667637	CallExpression	"fscanf ( fp , ""%255s"" , word )"		9667598	0					
ANR	9667638	Callee	fscanf		9667598	0					
ANR	9667639	Identifier	fscanf		9667598	0					
ANR	9667640	ArgumentList	fp		9667598	1					
ANR	9667641	Argument	fp		9667598	0					
ANR	9667642	Identifier	fp		9667598	0					
ANR	9667643	Argument	"""%255s"""		9667598	1					
ANR	9667644	PrimaryExpression	"""%255s"""		9667598	0					
ANR	9667645	Argument	word		9667598	2					
ANR	9667646	Identifier	word		9667598	0					
ANR	9667647	PrimaryExpression	1		9667598	1					
ANR	9667648	CompoundStatement		13:2:208:208	9667598	1					
ANR	9667649	IfStatement	"if ( ! cupsArrayFind ( array , word ) )"		9667598	0					
ANR	9667650	Condition	"! cupsArrayFind ( array , word )"	550:8:11259:11285	9667598	0	True				
ANR	9667651	UnaryOperationExpression	"! cupsArrayFind ( array , word )"		9667598	0					
ANR	9667652	UnaryOperator	!		9667598	0					
ANR	9667653	CallExpression	"cupsArrayFind ( array , word )"		9667598	1					
ANR	9667654	Callee	cupsArrayFind		9667598	0					
ANR	9667655	Identifier	cupsArrayFind		9667598	0					
ANR	9667656	ArgumentList	array		9667598	1					
ANR	9667657	Argument	array		9667598	0					
ANR	9667658	Identifier	array		9667598	0					
ANR	9667659	Argument	word		9667598	1					
ANR	9667660	Identifier	word		9667598	0					
ANR	9667661	ExpressionStatement	"cupsArrayAdd ( array , strdup ( word ) )"	551:6:11294:11327	9667598	1	True				
ANR	9667662	CallExpression	"cupsArrayAdd ( array , strdup ( word ) )"		9667598	0					
ANR	9667663	Callee	cupsArrayAdd		9667598	0					
ANR	9667664	Identifier	cupsArrayAdd		9667598	0					
ANR	9667665	ArgumentList	array		9667598	1					
ANR	9667666	Argument	array		9667598	0					
ANR	9667667	Identifier	array		9667598	0					
ANR	9667668	Argument	strdup ( word )		9667598	1					
ANR	9667669	CallExpression	strdup ( word )		9667598	0					
ANR	9667670	Callee	strdup		9667598	0					
ANR	9667671	Identifier	strdup		9667598	0					
ANR	9667672	ArgumentList	word		9667598	1					
ANR	9667673	Argument	word		9667598	0					
ANR	9667674	Identifier	word		9667598	0					
ANR	9667675	ExpressionStatement	fclose ( fp )	554:2:11336:11346	9667598	4	True				
ANR	9667676	CallExpression	fclose ( fp )		9667598	0					
ANR	9667677	Callee	fclose		9667598	0					
ANR	9667678	Identifier	fclose		9667598	0					
ANR	9667679	ArgumentList	fp		9667598	1					
ANR	9667680	Argument	fp		9667598	0					
ANR	9667681	Identifier	fp		9667598	0					
ANR	9667682	ReturnStatement	return ( 1 ) ;	556:2:11351:11361	9667598	5	True				
ANR	9667683	PrimaryExpression	1		9667598	0					
ANR	9667684	ReturnType	static int		9667598	1					
ANR	9667685	Identifier	load_words		9667598	2					
ANR	9667686	ParameterList	"const char * filename , cups_array_t * array"		9667598	3					
ANR	9667687	Parameter	const char * filename	535:11:10934:10955	9667598	0	True				
ANR	9667688	ParameterType	const char *		9667598	0					
ANR	9667689	Identifier	filename		9667598	1					
ANR	9667690	Parameter	cups_array_t * array	536:11:10992:11010	9667598	1	True				
ANR	9667691	ParameterType	cups_array_t *		9667598	0					
ANR	9667692	Identifier	array		9667598	1					
ANR	9667693	CFGEntryNode	ENTRY		9667598		True				
ANR	9667694	CFGExitNode	EXIT		9667598		True				
ANR	9667695	Symbol	fopen		9667598						
ANR	9667696	Symbol	fscanf		9667598						
ANR	9667697	Symbol	filename		9667598						
ANR	9667698	Symbol	NULL		9667598						
ANR	9667699	Symbol	array		9667598						
ANR	9667700	Symbol	cupsArrayFind		9667598						
ANR	9667701	Symbol	fp		9667598						
ANR	9667702	Symbol	strdup		9667598						
ANR	9667703	Symbol	word		9667598						
