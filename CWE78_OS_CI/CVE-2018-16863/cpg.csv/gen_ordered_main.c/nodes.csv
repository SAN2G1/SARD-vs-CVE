command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4902135	File	data/converged/CVE-2018-16863_ghostpdl/gen_ordered_main.c								
ANR	4902136	DeclStmt									
ANR	4902137	Decl							unsigned char	unsigned char	byte
ANR	4902138	DeclStmt									
ANR	4902139	Decl							int	int	bool
ANR	4902140	DeclStmt									
ANR	4902141	Decl							int	int ( htsc_dig_grid_t * final_mask )	htsc_save_tos
ANR	4902142	DeclStmt									
ANR	4902143	Decl							int	"int ( htsc_dig_grid_t * final_mask , bool use_holladay_grid , int S , htsc_param_t params )"	htsc_save_screen
ANR	4902144	Function	snprintf	49:6:1508:1892							
ANR	4902145	FunctionDef	"snprintf (char * buffer , size_t count , const char * format)"		4902144	0					
ANR	4902146	CompoundStatement		50:6:1580:1892	4902144	0					
ANR	4902147	IfStatement	if ( count > 0 )		4902144	0					
ANR	4902148	Condition	count > 0	51:14:1596:1604	4902144	0	True				
ANR	4902149	RelationalExpression	count > 0		4902144	0		>			
ANR	4902150	Identifier	count		4902144	0					
ANR	4902151	PrimaryExpression	0		4902144	1					
ANR	4902152	CompoundStatement		4:14:70:75	4902144	1					
ANR	4902153	IdentifierDeclStatement	va_list args ;	52:14:1623:1635	4902144	0	True				
ANR	4902154	IdentifierDecl	args		4902144	0					
ANR	4902155	IdentifierDeclType	va_list		4902144	0					
ANR	4902156	Identifier	args		4902144	1					
ANR	4902157	IdentifierDeclStatement	int n ;	53:14:1651:1656	4902144	1	True				
ANR	4902158	IdentifierDecl	n		4902144	0					
ANR	4902159	IdentifierDeclType	int		4902144	0					
ANR	4902160	Identifier	n		4902144	1					
ANR	4902161	ExpressionStatement	"va_start ( args , format )"	55:14:1673:1695	4902144	2	True				
ANR	4902162	CallExpression	"va_start ( args , format )"		4902144	0					
ANR	4902163	Callee	va_start		4902144	0					
ANR	4902164	Identifier	va_start		4902144	0					
ANR	4902165	ArgumentList	args		4902144	1					
ANR	4902166	Argument	args		4902144	0					
ANR	4902167	Identifier	args		4902144	0					
ANR	4902168	Argument	format		4902144	1					
ANR	4902169	Identifier	format		4902144	0					
ANR	4902170	ExpressionStatement	"n = _vsnprintf ( buffer , count , format , args )"	56:14:1711:1754	4902144	3	True				
ANR	4902171	AssignmentExpression	"n = _vsnprintf ( buffer , count , format , args )"		4902144	0		=			
ANR	4902172	Identifier	n		4902144	0					
ANR	4902173	CallExpression	"_vsnprintf ( buffer , count , format , args )"		4902144	1					
ANR	4902174	Callee	_vsnprintf		4902144	0					
ANR	4902175	Identifier	_vsnprintf		4902144	0					
ANR	4902176	ArgumentList	buffer		4902144	1					
ANR	4902177	Argument	buffer		4902144	0					
ANR	4902178	Identifier	buffer		4902144	0					
ANR	4902179	Argument	count		4902144	1					
ANR	4902180	Identifier	count		4902144	0					
ANR	4902181	Argument	format		4902144	2					
ANR	4902182	Identifier	format		4902144	0					
ANR	4902183	Argument	args		4902144	3					
ANR	4902184	Identifier	args		4902144	0					
ANR	4902185	ExpressionStatement	buffer [ count - 1 ] = 0	57:14:1770:1791	4902144	4	True				
ANR	4902186	AssignmentExpression	buffer [ count - 1 ] = 0		4902144	0		=			
ANR	4902187	ArrayIndexing	buffer [ count - 1 ]		4902144	0					
ANR	4902188	Identifier	buffer		4902144	0					
ANR	4902189	AdditiveExpression	count - 1		4902144	1		-			
ANR	4902190	Identifier	count		4902144	0					
ANR	4902191	PrimaryExpression	1		4902144	1					
ANR	4902192	PrimaryExpression	0		4902144	1					
ANR	4902193	ExpressionStatement	va_end ( args )	58:14:1807:1819	4902144	5	True				
ANR	4902194	CallExpression	va_end ( args )		4902144	0					
ANR	4902195	Callee	va_end		4902144	0					
ANR	4902196	Identifier	va_end		4902144	0					
ANR	4902197	ArgumentList	args		4902144	1					
ANR	4902198	Argument	args		4902144	0					
ANR	4902199	Identifier	args		4902144	0					
ANR	4902200	ReturnStatement	return n ;	59:14:1835:1843	4902144	6	True				
ANR	4902201	Identifier	n		4902144	0					
ANR	4902202	ElseStatement	else		4902144	0					
ANR	4902203	ReturnStatement	return 0 ;	61:14:1876:1884	4902144	0	True				
ANR	4902204	PrimaryExpression	0		4902144	0					
ANR	4902205	ReturnType	int		4902144	1					
ANR	4902206	Identifier	snprintf		4902144	2					
ANR	4902207	ParameterList	"char * buffer , size_t count , const char * format"		4902144	3					
ANR	4902208	Parameter	char * buffer	49:19:1521:1532	4902144	0	True				
ANR	4902209	ParameterType	char *		4902144	0					
ANR	4902210	Identifier	buffer		4902144	1					
ANR	4902211	Parameter	size_t count	49:33:1535:1546	4902144	1	True				
ANR	4902212	ParameterType	size_t		4902144	0					
ANR	4902213	Identifier	count		4902144	1					
ANR	4902214	Parameter	const char * format	49:47:1549:1566	4902144	2	True				
ANR	4902215	ParameterType	const char *		4902144	0					
ANR	4902216	Identifier	format		4902144	1					
ANR	4902217	CFGEntryNode	ENTRY		4902144		True				
ANR	4902218	CFGExitNode	EXIT		4902144		True				
ANR	4902219	Symbol	args		4902144						
ANR	4902220	Symbol	* count		4902144						
ANR	4902221	Symbol	* buffer		4902144						
ANR	4902222	Symbol	count		4902144						
ANR	4902223	Symbol	format		4902144						
ANR	4902224	Symbol	buffer		4902144						
ANR	4902225	Symbol	_vsnprintf		4902144						
ANR	4902226	Symbol	n		4902144						
ANR	4902227	Function	usage	66:0:1957:3724							
ANR	4902228	FunctionDef	usage ()		4902227	0					
ANR	4902229	CompoundStatement		68:0:1981:3724	4902227	0					
ANR	4902230	ExpressionStatement	"printf ( ""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"" )"	69:4:1987:2085	4902227	0	True				
ANR	4902231	CallExpression	"printf ( ""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"" )"		4902227	0					
ANR	4902232	Callee	printf		4902227	0					
ANR	4902233	Identifier	printf		4902227	0					
ANR	4902234	ArgumentList	"""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"""		4902227	1					
ANR	4902235	Argument	"""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"""		4902227	0					
ANR	4902236	PrimaryExpression	"""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"""		4902227	0					
ANR	4902237	ExpressionStatement	"printf ( ""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"" )"	70:4:2091:2185	4902227	1	True				
ANR	4902238	CallExpression	"printf ( ""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"" )"		4902227	0					
ANR	4902239	Callee	printf		4902227	0					
ANR	4902240	Identifier	printf		4902227	0					
ANR	4902241	ArgumentList	"""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"""		4902227	1					
ANR	4902242	Argument	"""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"""		4902227	0					
ANR	4902243	PrimaryExpression	"""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"""		4902227	0					
ANR	4902244	ExpressionStatement	"printf ( ""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"" )"	71:4:2191:2258	4902227	2	True				
ANR	4902245	CallExpression	"printf ( ""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"" )"		4902227	0					
ANR	4902246	Callee	printf		4902227	0					
ANR	4902247	Identifier	printf		4902227	0					
ANR	4902248	ArgumentList	"""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"""		4902227	1					
ANR	4902249	Argument	"""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"""		4902227	0					
ANR	4902250	PrimaryExpression	"""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"""		4902227	0					
ANR	4902251	ExpressionStatement	"printf ( ""a is the desired angle in degrees for the screen\\n"" )"	72:4:2264:2325	4902227	3	True				
ANR	4902252	CallExpression	"printf ( ""a is the desired angle in degrees for the screen\\n"" )"		4902227	0					
ANR	4902253	Callee	printf		4902227	0					
ANR	4902254	Identifier	printf		4902227	0					
ANR	4902255	ArgumentList	"""a is the desired angle in degrees for the screen\\n"""		4902227	1					
ANR	4902256	Argument	"""a is the desired angle in degrees for the screen\\n"""		4902227	0					
ANR	4902257	PrimaryExpression	"""a is the desired angle in degrees for the screen\\n"""		4902227	0					
ANR	4902258	ExpressionStatement	"printf ( ""b is the desired bit depth of the output threshold\\n"" )"	73:4:2331:2394	4902227	4	True				
ANR	4902259	CallExpression	"printf ( ""b is the desired bit depth of the output threshold\\n"" )"		4902227	0					
ANR	4902260	Callee	printf		4902227	0					
ANR	4902261	Identifier	printf		4902227	0					
ANR	4902262	ArgumentList	"""b is the desired bit depth of the output threshold\\n"""		4902227	1					
ANR	4902263	Argument	"""b is the desired bit depth of the output threshold\\n"""		4902227	0					
ANR	4902264	PrimaryExpression	"""b is the desired bit depth of the output threshold\\n"""		4902227	0					
ANR	4902265	ExpressionStatement	"printf ( ""  valid only with -ps or the default raw output\\n"" )"	74:4:2400:2460	4902227	5	True				
ANR	4902266	CallExpression	"printf ( ""  valid only with -ps or the default raw output\\n"" )"		4902227	0					
ANR	4902267	Callee	printf		4902227	0					
ANR	4902268	Identifier	printf		4902227	0					
ANR	4902269	ArgumentList	"""  valid only with -ps or the default raw output\\n"""		4902227	1					
ANR	4902270	Argument	"""  valid only with -ps or the default raw output\\n"""		4902227	0					
ANR	4902271	PrimaryExpression	"""  valid only with -ps or the default raw output\\n"""		4902227	0					
ANR	4902272	ExpressionStatement	"printf ( ""dot shape codes are as follows: \\n"" )"	75:4:2466:2511	4902227	6	True				
ANR	4902273	CallExpression	"printf ( ""dot shape codes are as follows: \\n"" )"		4902227	0					
ANR	4902274	Callee	printf		4902227	0					
ANR	4902275	Identifier	printf		4902227	0					
ANR	4902276	ArgumentList	"""dot shape codes are as follows: \\n"""		4902227	1					
ANR	4902277	Argument	"""dot shape codes are as follows: \\n"""		4902227	0					
ANR	4902278	PrimaryExpression	"""dot shape codes are as follows: \\n"""		4902227	0					
ANR	4902279	ExpressionStatement	"printf ( ""0  CIRCLE \\n"" )"	76:4:2517:2540	4902227	7	True				
ANR	4902280	CallExpression	"printf ( ""0  CIRCLE \\n"" )"		4902227	0					
ANR	4902281	Callee	printf		4902227	0					
ANR	4902282	Identifier	printf		4902227	0					
ANR	4902283	ArgumentList	"""0  CIRCLE \\n"""		4902227	1					
ANR	4902284	Argument	"""0  CIRCLE \\n"""		4902227	0					
ANR	4902285	PrimaryExpression	"""0  CIRCLE \\n"""		4902227	0					
ANR	4902286	ExpressionStatement	"printf ( ""1  REDBOOK CIRCLE \\n"" )"	77:4:2546:2577	4902227	8	True				
ANR	4902287	CallExpression	"printf ( ""1  REDBOOK CIRCLE \\n"" )"		4902227	0					
ANR	4902288	Callee	printf		4902227	0					
ANR	4902289	Identifier	printf		4902227	0					
ANR	4902290	ArgumentList	"""1  REDBOOK CIRCLE \\n"""		4902227	1					
ANR	4902291	Argument	"""1  REDBOOK CIRCLE \\n"""		4902227	0					
ANR	4902292	PrimaryExpression	"""1  REDBOOK CIRCLE \\n"""		4902227	0					
ANR	4902293	ExpressionStatement	"printf ( ""2  INVERTED \\n"" )"	78:4:2583:2608	4902227	9	True				
ANR	4902294	CallExpression	"printf ( ""2  INVERTED \\n"" )"		4902227	0					
ANR	4902295	Callee	printf		4902227	0					
ANR	4902296	Identifier	printf		4902227	0					
ANR	4902297	ArgumentList	"""2  INVERTED \\n"""		4902227	1					
ANR	4902298	Argument	"""2  INVERTED \\n"""		4902227	0					
ANR	4902299	PrimaryExpression	"""2  INVERTED \\n"""		4902227	0					
ANR	4902300	ExpressionStatement	"printf ( ""3  RHOMBOID \\n"" )"	79:4:2614:2639	4902227	10	True				
ANR	4902301	CallExpression	"printf ( ""3  RHOMBOID \\n"" )"		4902227	0					
ANR	4902302	Callee	printf		4902227	0					
ANR	4902303	Identifier	printf		4902227	0					
ANR	4902304	ArgumentList	"""3  RHOMBOID \\n"""		4902227	1					
ANR	4902305	Argument	"""3  RHOMBOID \\n"""		4902227	0					
ANR	4902306	PrimaryExpression	"""3  RHOMBOID \\n"""		4902227	0					
ANR	4902307	ExpressionStatement	"printf ( ""4  LINE_X \\n"" )"	80:4:2645:2668	4902227	11	True				
ANR	4902308	CallExpression	"printf ( ""4  LINE_X \\n"" )"		4902227	0					
ANR	4902309	Callee	printf		4902227	0					
ANR	4902310	Identifier	printf		4902227	0					
ANR	4902311	ArgumentList	"""4  LINE_X \\n"""		4902227	1					
ANR	4902312	Argument	"""4  LINE_X \\n"""		4902227	0					
ANR	4902313	PrimaryExpression	"""4  LINE_X \\n"""		4902227	0					
ANR	4902314	ExpressionStatement	"printf ( ""5  LINE_Y \\n"" )"	81:4:2674:2697	4902227	12	True				
ANR	4902315	CallExpression	"printf ( ""5  LINE_Y \\n"" )"		4902227	0					
ANR	4902316	Callee	printf		4902227	0					
ANR	4902317	Identifier	printf		4902227	0					
ANR	4902318	ArgumentList	"""5  LINE_Y \\n"""		4902227	1					
ANR	4902319	Argument	"""5  LINE_Y \\n"""		4902227	0					
ANR	4902320	PrimaryExpression	"""5  LINE_Y \\n"""		4902227	0					
ANR	4902321	ExpressionStatement	"printf ( ""6  DIAMOND1 \\n"" )"	82:4:2703:2728	4902227	13	True				
ANR	4902322	CallExpression	"printf ( ""6  DIAMOND1 \\n"" )"		4902227	0					
ANR	4902323	Callee	printf		4902227	0					
ANR	4902324	Identifier	printf		4902227	0					
ANR	4902325	ArgumentList	"""6  DIAMOND1 \\n"""		4902227	1					
ANR	4902326	Argument	"""6  DIAMOND1 \\n"""		4902227	0					
ANR	4902327	PrimaryExpression	"""6  DIAMOND1 \\n"""		4902227	0					
ANR	4902328	ExpressionStatement	"printf ( ""7  DIAMOND2 \\n"" )"	83:4:2734:2759	4902227	14	True				
ANR	4902329	CallExpression	"printf ( ""7  DIAMOND2 \\n"" )"		4902227	0					
ANR	4902330	Callee	printf		4902227	0					
ANR	4902331	Identifier	printf		4902227	0					
ANR	4902332	ArgumentList	"""7  DIAMOND2 \\n"""		4902227	1					
ANR	4902333	Argument	"""7  DIAMOND2 \\n"""		4902227	0					
ANR	4902334	PrimaryExpression	"""7  DIAMOND2 \\n"""		4902227	0					
ANR	4902335	ExpressionStatement	"printf ( ""8  ROUNDSPOT \\n"" )"	84:4:2765:2791	4902227	15	True				
ANR	4902336	CallExpression	"printf ( ""8  ROUNDSPOT \\n"" )"		4902227	0					
ANR	4902337	Callee	printf		4902227	0					
ANR	4902338	Identifier	printf		4902227	0					
ANR	4902339	ArgumentList	"""8  ROUNDSPOT \\n"""		4902227	1					
ANR	4902340	Argument	"""8  ROUNDSPOT \\n"""		4902227	0					
ANR	4902341	PrimaryExpression	"""8  ROUNDSPOT \\n"""		4902227	0					
ANR	4902342	ExpressionStatement	"printf ( ""f [tos | ppm | ps | raw] is the output format\\n"" )"	85:4:2797:2855	4902227	16	True				
ANR	4902343	CallExpression	"printf ( ""f [tos | ppm | ps | raw] is the output format\\n"" )"		4902227	0					
ANR	4902344	Callee	printf		4902227	0					
ANR	4902345	Identifier	printf		4902227	0					
ANR	4902346	ArgumentList	"""f [tos | ppm | ps | raw] is the output format\\n"""		4902227	1					
ANR	4902347	Argument	"""f [tos | ppm | ps | raw] is the output format\\n"""		4902227	0					
ANR	4902348	PrimaryExpression	"""f [tos | ppm | ps | raw] is the output format\\n"""		4902227	0					
ANR	4902349	ExpressionStatement	"printf ( ""     If no output format is indicate a turn on sequence output will be created\\n"" )"	86:4:2861:2952	4902227	17	True				
ANR	4902350	CallExpression	"printf ( ""     If no output format is indicate a turn on sequence output will be created\\n"" )"		4902227	0					
ANR	4902351	Callee	printf		4902227	0					
ANR	4902352	Identifier	printf		4902227	0					
ANR	4902353	ArgumentList	"""     If no output format is indicate a turn on sequence output will be created\\n"""		4902227	1					
ANR	4902354	Argument	"""     If no output format is indicate a turn on sequence output will be created\\n"""		4902227	0					
ANR	4902355	PrimaryExpression	"""     If no output format is indicate a turn on sequence output will be created\\n"""		4902227	0					
ANR	4902356	ExpressionStatement	"printf ( ""   ppm is an Portable Pixmap image file\\n"" )"	87:4:2958:3010	4902227	18	True				
ANR	4902357	CallExpression	"printf ( ""   ppm is an Portable Pixmap image file\\n"" )"		4902227	0					
ANR	4902358	Callee	printf		4902227	0					
ANR	4902359	Identifier	printf		4902227	0					
ANR	4902360	ArgumentList	"""   ppm is an Portable Pixmap image file\\n"""		4902227	1					
ANR	4902361	Argument	"""   ppm is an Portable Pixmap image file\\n"""		4902227	0					
ANR	4902362	PrimaryExpression	"""   ppm is an Portable Pixmap image file\\n"""		4902227	0					
ANR	4902363	ExpressionStatement	"printf ( ""   ps indicates postscript style output file\\n"" )"	88:4:3016:3073	4902227	19	True				
ANR	4902364	CallExpression	"printf ( ""   ps indicates postscript style output file\\n"" )"		4902227	0					
ANR	4902365	Callee	printf		4902227	0					
ANR	4902366	Identifier	printf		4902227	0					
ANR	4902367	ArgumentList	"""   ps indicates postscript style output file\\n"""		4902227	1					
ANR	4902368	Argument	"""   ps indicates postscript style output file\\n"""		4902227	0					
ANR	4902369	PrimaryExpression	"""   ps indicates postscript style output file\\n"""		4902227	0					
ANR	4902370	ExpressionStatement	"printf ( ""   raw is a raw 8-bit binary, row major file\\n"" )"	89:4:3079:3136	4902227	20	True				
ANR	4902371	CallExpression	"printf ( ""   raw is a raw 8-bit binary, row major file\\n"" )"		4902227	0					
ANR	4902372	Callee	printf		4902227	0					
ANR	4902373	Identifier	printf		4902227	0					
ANR	4902374	ArgumentList	"""   raw is a raw 8-bit binary, row major file\\n"""		4902227	1					
ANR	4902375	Argument	"""   raw is a raw 8-bit binary, row major file\\n"""		4902227	0					
ANR	4902376	PrimaryExpression	"""   raw is a raw 8-bit binary, row major file\\n"""		4902227	0					
ANR	4902377	ExpressionStatement	"printf ( ""   tos indicates to output a turn on sequence which can\\n"" )"	90:4:3142:3210	4902227	21	True				
ANR	4902378	CallExpression	"printf ( ""   tos indicates to output a turn on sequence which can\\n"" )"		4902227	0					
ANR	4902379	Callee	printf		4902227	0					
ANR	4902380	Identifier	printf		4902227	0					
ANR	4902381	ArgumentList	"""   tos indicates to output a turn on sequence which can\\n"""		4902227	1					
ANR	4902382	Argument	"""   tos indicates to output a turn on sequence which can\\n"""		4902227	0					
ANR	4902383	PrimaryExpression	"""   tos indicates to output a turn on sequence which can\\n"""		4902227	0					
ANR	4902384	ExpressionStatement	"printf ( ""     be fed into thresh_remap to apply a linearization curve.\\n"" )"	91:4:3216:3290	4902227	22	True				
ANR	4902385	CallExpression	"printf ( ""     be fed into thresh_remap to apply a linearization curve.\\n"" )"		4902227	0					
ANR	4902386	Callee	printf		4902227	0					
ANR	4902387	Identifier	printf		4902227	0					
ANR	4902388	ArgumentList	"""     be fed into thresh_remap to apply a linearization curve.\\n"""		4902227	1					
ANR	4902389	Argument	"""     be fed into thresh_remap to apply a linearization curve.\\n"""		4902227	0					
ANR	4902390	PrimaryExpression	"""     be fed into thresh_remap to apply a linearization curve.\\n"""		4902227	0					
ANR	4902391	ExpressionStatement	"printf ( ""l is the desired lines per inch (lpi)\\n"" )"	92:4:3296:3346	4902227	23	True				
ANR	4902392	CallExpression	"printf ( ""l is the desired lines per inch (lpi)\\n"" )"		4902227	0					
ANR	4902393	Callee	printf		4902227	0					
ANR	4902394	Identifier	printf		4902227	0					
ANR	4902395	ArgumentList	"""l is the desired lines per inch (lpi)\\n"""		4902227	1					
ANR	4902396	Argument	"""l is the desired lines per inch (lpi)\\n"""		4902227	0					
ANR	4902397	PrimaryExpression	"""l is the desired lines per inch (lpi)\\n"""		4902227	0					
ANR	4902398	ExpressionStatement	"printf ( ""q is the desired number of quantization (gray) levels\\n"" )"	93:4:3352:3418	4902227	24	True				
ANR	4902399	CallExpression	"printf ( ""q is the desired number of quantization (gray) levels\\n"" )"		4902227	0					
ANR	4902400	Callee	printf		4902227	0					
ANR	4902401	Identifier	printf		4902227	0					
ANR	4902402	ArgumentList	"""q is the desired number of quantization (gray) levels\\n"""		4902227	1					
ANR	4902403	Argument	"""q is the desired number of quantization (gray) levels\\n"""		4902227	0					
ANR	4902404	PrimaryExpression	"""q is the desired number of quantization (gray) levels\\n"""		4902227	0					
ANR	4902405	ExpressionStatement	"printf ( ""r is the device resolution in dots per inch (dpi)\\n"" )"	94:4:3424:3486	4902227	25	True				
ANR	4902406	CallExpression	"printf ( ""r is the device resolution in dots per inch (dpi)\\n"" )"		4902227	0					
ANR	4902407	Callee	printf		4902227	0					
ANR	4902408	Identifier	printf		4902227	0					
ANR	4902409	ArgumentList	"""r is the device resolution in dots per inch (dpi)\\n"""		4902227	1					
ANR	4902410	Argument	"""r is the device resolution in dots per inch (dpi)\\n"""		4902227	0					
ANR	4902411	PrimaryExpression	"""r is the device resolution in dots per inch (dpi)\\n"""		4902227	0					
ANR	4902412	ExpressionStatement	"printf ( ""  use a single number for r if the resolution is symmetric\\n"" )"	95:4:3492:3563	4902227	26	True				
ANR	4902413	CallExpression	"printf ( ""  use a single number for r if the resolution is symmetric\\n"" )"		4902227	0					
ANR	4902414	Callee	printf		4902227	0					
ANR	4902415	Identifier	printf		4902227	0					
ANR	4902416	ArgumentList	"""  use a single number for r if the resolution is symmetric\\n"""		4902227	1					
ANR	4902417	Argument	"""  use a single number for r if the resolution is symmetric\\n"""		4902227	0					
ANR	4902418	PrimaryExpression	"""  use a single number for r if the resolution is symmetric\\n"""		4902227	0					
ANR	4902419	ExpressionStatement	"printf ( ""s is the desired size of the super cell\\n"" )"	96:4:3569:3621	4902227	27	True				
ANR	4902420	CallExpression	"printf ( ""s is the desired size of the super cell\\n"" )"		4902227	0					
ANR	4902421	Callee	printf		4902227	0					
ANR	4902422	Identifier	printf		4902227	0					
ANR	4902423	ArgumentList	"""s is the desired size of the super cell\\n"""		4902227	1					
ANR	4902424	Argument	"""s is the desired size of the super cell\\n"""		4902227	0					
ANR	4902425	PrimaryExpression	"""s is the desired size of the super cell\\n"""		4902227	0					
ANR	4902426	ExpressionStatement	"printf ( ""v is the verbosity level. Default is 0 which is error messages only.\\n"" )"	97:4:3627:3708	4902227	28	True				
ANR	4902427	CallExpression	"printf ( ""v is the verbosity level. Default is 0 which is error messages only.\\n"" )"		4902227	0					
ANR	4902428	Callee	printf		4902227	0					
ANR	4902429	Identifier	printf		4902227	0					
ANR	4902430	ArgumentList	"""v is the verbosity level. Default is 0 which is error messages only.\\n"""		4902227	1					
ANR	4902431	Argument	"""v is the verbosity level. Default is 0 which is error messages only.\\n"""		4902227	0					
ANR	4902432	PrimaryExpression	"""v is the verbosity level. Default is 0 which is error messages only.\\n"""		4902227	0					
ANR	4902433	ReturnStatement	return 1 ;	98:4:3714:3722	4902227	29	True				
ANR	4902434	PrimaryExpression	1		4902227	0					
ANR	4902435	ReturnType	static int		4902227	1					
ANR	4902436	Identifier	usage		4902227	2					
ANR	4902437	ParameterList			4902227	3					
ANR	4902438	CFGEntryNode	ENTRY		4902227		True				
ANR	4902439	CFGExitNode	EXIT		4902227		True				
ANR	4902440	Function	get_arg	104:0:3940:4192							
ANR	4902441	FunctionDef	"get_arg (int argc , char * * argv , int * pi , const char * arg)"		4902440	0					
ANR	4902442	CompoundStatement		106:0:4018:4192	4902440	0					
ANR	4902443	IfStatement	if ( arg [ 0 ] != 0 )		4902440	0					
ANR	4902444	Condition	arg [ 0 ] != 0	107:8:4028:4038	4902440	0	True				
ANR	4902445	EqualityExpression	arg [ 0 ] != 0		4902440	0		!=			
ANR	4902446	ArrayIndexing	arg [ 0 ]		4902440	0					
ANR	4902447	Identifier	arg		4902440	0					
ANR	4902448	PrimaryExpression	0		4902440	1					
ANR	4902449	PrimaryExpression	0		4902440	1					
ANR	4902450	CompoundStatement		2:21:22:22	4902440	1					
ANR	4902451	ReturnStatement	return arg ;	108:8:4051:4061	4902440	0	True				
ANR	4902452	Identifier	arg		4902440	0					
ANR	4902453	ElseStatement	else		4902440	0					
ANR	4902454	CompoundStatement		4:11:55:55	4902440	0					
ANR	4902455	ExpressionStatement	( * pi ) ++	110:6:4082:4089	4902440	0	True				
ANR	4902456	PostIncDecOperationExpression	( * pi ) ++		4902440	0					
ANR	4902457	UnaryOperationExpression	* pi		4902440	0					
ANR	4902458	UnaryOperator	*		4902440	0					
ANR	4902459	Identifier	pi		4902440	1					
ANR	4902460	IncDec	++		4902440	1					
ANR	4902461	IfStatement	if ( * pi == argc )		4902440	1					
ANR	4902462	Condition	* pi == argc	111:10:4101:4111	4902440	0	True				
ANR	4902463	EqualityExpression	* pi == argc		4902440	0		==			
ANR	4902464	UnaryOperationExpression	* pi		4902440	0					
ANR	4902465	UnaryOperator	*		4902440	0					
ANR	4902466	Identifier	pi		4902440	1					
ANR	4902467	Identifier	argc		4902440	1					
ANR	4902468	CompoundStatement		6:23:95:95	4902440	1					
ANR	4902469	ReturnStatement	return NULL ;	112:8:4124:4135	4902440	0	True				
ANR	4902470	Identifier	NULL		4902440	0					
ANR	4902471	ElseStatement	else		4902440	0					
ANR	4902472	CompoundStatement		8:13:131:131	4902440	0					
ANR	4902473	ReturnStatement	return argv [ * pi ] ;	114:8:4160:4176	4902440	0	True				
ANR	4902474	ArrayIndexing	argv [ * pi ]		4902440	0					
ANR	4902475	Identifier	argv		4902440	0					
ANR	4902476	UnaryOperationExpression	* pi		4902440	1					
ANR	4902477	UnaryOperator	*		4902440	0					
ANR	4902478	Identifier	pi		4902440	1					
ANR	4902479	ReturnType	static const char *		4902440	1					
ANR	4902480	Identifier	get_arg		4902440	2					
ANR	4902481	ParameterList	"int argc , char * * argv , int * pi , const char * arg"		4902440	3					
ANR	4902482	Parameter	int argc	105:9:3969:3976	4902440	0	True				
ANR	4902483	ParameterType	int		4902440	0					
ANR	4902484	Identifier	argc		4902440	1					
ANR	4902485	Parameter	char * * argv	105:19:3979:3989	4902440	1	True				
ANR	4902486	ParameterType	char * *		4902440	0					
ANR	4902487	Identifier	argv		4902440	1					
ANR	4902488	Parameter	int * pi	105:32:3992:3998	4902440	2	True				
ANR	4902489	ParameterType	int *		4902440	0					
ANR	4902490	Identifier	pi		4902440	1					
ANR	4902491	Parameter	const char * arg	105:41:4001:4015	4902440	3	True				
ANR	4902492	ParameterType	const char *		4902440	0					
ANR	4902493	Identifier	arg		4902440	1					
ANR	4902494	CFGEntryNode	ENTRY		4902440		True				
ANR	4902495	CFGExitNode	EXIT		4902440		True				
ANR	4902496	Symbol	argc		4902440						
ANR	4902497	Symbol	NULL		4902440						
ANR	4902498	Symbol	arg		4902440						
ANR	4902499	Symbol	* * pi		4902440						
ANR	4902500	Symbol	pi		4902440						
ANR	4902501	Symbol	* argv		4902440						
ANR	4902502	Symbol	* pi		4902440						
ANR	4902503	Symbol	argv		4902440						
ANR	4902504	Symbol	* arg		4902440						
ANR	4902505	Function	main	119:0:4195:7617							
ANR	4902506	FunctionDef	"main (int argc , char * * argv)"		4902505	0					
ANR	4902507	CompoundStatement		121:0:4228:7617	4902505	0					
ANR	4902508	IdentifierDeclStatement	"int code , i , j , k , m , S ;"	122:4:4234:4257	4902505	0	True				
ANR	4902509	IdentifierDecl	code		4902505	0					
ANR	4902510	IdentifierDeclType	int		4902505	0					
ANR	4902511	Identifier	code		4902505	1					
ANR	4902512	IdentifierDecl	i		4902505	1					
ANR	4902513	IdentifierDeclType	int		4902505	0					
ANR	4902514	Identifier	i		4902505	1					
ANR	4902515	IdentifierDecl	j		4902505	2					
ANR	4902516	IdentifierDeclType	int		4902505	0					
ANR	4902517	Identifier	j		4902505	1					
ANR	4902518	IdentifierDecl	k		4902505	3					
ANR	4902519	IdentifierDeclType	int		4902505	0					
ANR	4902520	Identifier	k		4902505	1					
ANR	4902521	IdentifierDecl	m		4902505	4					
ANR	4902522	IdentifierDeclType	int		4902505	0					
ANR	4902523	Identifier	m		4902505	1					
ANR	4902524	IdentifierDecl	S		4902505	5					
ANR	4902525	IdentifierDeclType	int		4902505	0					
ANR	4902526	Identifier	S		4902505	1					
ANR	4902527	IdentifierDeclStatement	htsc_param_t params ;	123:4:4263:4282	4902505	1	True				
ANR	4902528	IdentifierDecl	params		4902505	0					
ANR	4902529	IdentifierDeclType	htsc_param_t		4902505	0					
ANR	4902530	Identifier	params		4902505	1					
ANR	4902531	IdentifierDeclStatement	htsc_dig_grid_t final_mask ;	124:4:4288:4314	4902505	2	True				
ANR	4902532	IdentifierDecl	final_mask		4902505	0					
ANR	4902533	IdentifierDeclType	htsc_dig_grid_t		4902505	0					
ANR	4902534	Identifier	final_mask		4902505	1					
ANR	4902535	ExpressionStatement	htsc_set_default_params ( & params )	126:4:4321:4353	4902505	3	True				
ANR	4902536	CallExpression	htsc_set_default_params ( & params )		4902505	0					
ANR	4902537	Callee	htsc_set_default_params		4902505	0					
ANR	4902538	Identifier	htsc_set_default_params		4902505	0					
ANR	4902539	ArgumentList	& params		4902505	1					
ANR	4902540	Argument	& params		4902505	0					
ANR	4902541	UnaryOperationExpression	& params		4902505	0					
ANR	4902542	UnaryOperator	&		4902505	0					
ANR	4902543	Identifier	params		4902505	1					
ANR	4902544	ForStatement	for ( i = 1 ; i < argc ; i ++ )		4902505	4					
ANR	4902545	ForInit	i = 1 ;	128:9:4365:4370	4902505	0	True				
ANR	4902546	AssignmentExpression	i = 1		4902505	0		=			
ANR	4902547	Identifier	i		4902505	0					
ANR	4902548	PrimaryExpression	1		4902505	1					
ANR	4902549	Condition	i < argc	128:16:4372:4379	4902505	1	True				
ANR	4902550	RelationalExpression	i < argc		4902505	0		<			
ANR	4902551	Identifier	i		4902505	0					
ANR	4902552	Identifier	argc		4902505	1					
ANR	4902553	PostIncDecOperationExpression	i ++	128:26:4382:4384	4902505	2	True				
ANR	4902554	Identifier	i		4902505	0					
ANR	4902555	IncDec	++		4902505	1					
ANR	4902556	CompoundStatement		10:6:199:220	4902505	3					
ANR	4902557	IdentifierDeclStatement	const char * arg = argv [ i ] ;	129:6:4395:4420	4902505	0	True				
ANR	4902558	IdentifierDecl	* arg = argv [ i ]		4902505	0					
ANR	4902559	IdentifierDeclType	const char *		4902505	0					
ANR	4902560	Identifier	arg		4902505	1					
ANR	4902561	AssignmentExpression	* arg = argv [ i ]		4902505	2		=			
ANR	4902562	Identifier	arg		4902505	0					
ANR	4902563	ArrayIndexing	argv [ i ]		4902505	1					
ANR	4902564	Identifier	argv		4902505	0					
ANR	4902565	Identifier	i		4902505	1					
ANR	4902566	IdentifierDeclStatement	const char * arg_value ;	130:6:4428:4449	4902505	1	True				
ANR	4902567	IdentifierDecl	* arg_value		4902505	0					
ANR	4902568	IdentifierDeclType	const char *		4902505	0					
ANR	4902569	Identifier	arg_value		4902505	1					
ANR	4902570	IfStatement	if ( arg [ 0 ] == '-' )		4902505	2					
ANR	4902571	Condition	arg [ 0 ] == '-'	132:10:4462:4474	4902505	0	True				
ANR	4902572	EqualityExpression	arg [ 0 ] == '-'		4902505	0		==			
ANR	4902573	ArrayIndexing	arg [ 0 ]		4902505	0					
ANR	4902574	Identifier	arg		4902505	0					
ANR	4902575	PrimaryExpression	0		4902505	1					
ANR	4902576	PrimaryExpression	'-'		4902505	1					
ANR	4902577	CompoundStatement		12:25:248:248	4902505	1					
ANR	4902578	SwitchStatement	switch ( arg [ 1 ] )		4902505	0					
ANR	4902579	Condition	arg [ 1 ]	133:18:4497:4502	4902505	0	True				
ANR	4902580	ArrayIndexing	arg [ 1 ]		4902505	0					
ANR	4902581	Identifier	arg		4902505	0					
ANR	4902582	PrimaryExpression	1		4902505	1					
ANR	4902583	CompoundStatement		13:26:276:276	4902505	1					
ANR	4902584	Label	case 'a' :	134:12:4519:4527	4902505	0	True				
ANR	4902585	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		4902505	1					
ANR	4902586	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	135:18:4547:4600	4902505	0	True				
ANR	4902587	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		4902505	0		==			
ANR	4902588	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		4902505	0		=			
ANR	4902589	Identifier	arg_value		4902505	0					
ANR	4902590	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		4902505	1					
ANR	4902591	Callee	get_arg		4902505	0					
ANR	4902592	Identifier	get_arg		4902505	0					
ANR	4902593	ArgumentList	argc		4902505	1					
ANR	4902594	Argument	argc		4902505	0					
ANR	4902595	Identifier	argc		4902505	0					
ANR	4902596	Argument	argv		4902505	1					
ANR	4902597	Identifier	argv		4902505	0					
ANR	4902598	Argument	& i		4902505	2					
ANR	4902599	UnaryOperationExpression	& i		4902505	0					
ANR	4902600	UnaryOperator	&		4902505	0					
ANR	4902601	Identifier	i		4902505	1					
ANR	4902602	Argument	arg + 2		4902505	3					
ANR	4902603	AdditiveExpression	arg + 2		4902505	0		+			
ANR	4902604	Identifier	arg		4902505	0					
ANR	4902605	PrimaryExpression	2		4902505	1					
ANR	4902606	Identifier	NULL		4902505	1					
ANR	4902607	GotoStatement	goto usage_exit ;	136:18:4621:4636	4902505	1	True				
ANR	4902608	Identifier	usage_exit		4902505	0					
ANR	4902609	ExpressionStatement	params . targ_scr_ang = atoi ( arg_value )	137:14:4652:4689	4902505	2	True				
ANR	4902610	AssignmentExpression	params . targ_scr_ang = atoi ( arg_value )		4902505	0		=			
ANR	4902611	MemberAccess	params . targ_scr_ang		4902505	0					
ANR	4902612	Identifier	params		4902505	0					
ANR	4902613	Identifier	targ_scr_ang		4902505	1					
ANR	4902614	CallExpression	atoi ( arg_value )		4902505	1					
ANR	4902615	Callee	atoi		4902505	0					
ANR	4902616	Identifier	atoi		4902505	0					
ANR	4902617	ArgumentList	arg_value		4902505	1					
ANR	4902618	Argument	arg_value		4902505	0					
ANR	4902619	Identifier	arg_value		4902505	0					
ANR	4902620	BreakStatement	break ;	138:14:4705:4710	4902505	3	True				
ANR	4902621	Label	case 'f' :	139:12:4724:4732	4902505	4	True				
ANR	4902622	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		4902505	5					
ANR	4902623	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	140:18:4752:4805	4902505	0	True				
ANR	4902624	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		4902505	0		==			
ANR	4902625	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		4902505	0		=			
ANR	4902626	Identifier	arg_value		4902505	0					
ANR	4902627	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		4902505	1					
ANR	4902628	Callee	get_arg		4902505	0					
ANR	4902629	Identifier	get_arg		4902505	0					
ANR	4902630	ArgumentList	argc		4902505	1					
ANR	4902631	Argument	argc		4902505	0					
ANR	4902632	Identifier	argc		4902505	0					
ANR	4902633	Argument	argv		4902505	1					
ANR	4902634	Identifier	argv		4902505	0					
ANR	4902635	Argument	& i		4902505	2					
ANR	4902636	UnaryOperationExpression	& i		4902505	0					
ANR	4902637	UnaryOperator	&		4902505	0					
ANR	4902638	Identifier	i		4902505	1					
ANR	4902639	Argument	arg + 2		4902505	3					
ANR	4902640	AdditiveExpression	arg + 2		4902505	0		+			
ANR	4902641	Identifier	arg		4902505	0					
ANR	4902642	PrimaryExpression	2		4902505	1					
ANR	4902643	Identifier	NULL		4902505	1					
ANR	4902644	GotoStatement	goto usage_exit ;	141:18:4826:4841	4902505	1	True				
ANR	4902645	Identifier	usage_exit		4902505	0					
ANR	4902646	SwitchStatement	switch ( arg_value [ 0 ] )		4902505	6					
ANR	4902647	Condition	arg_value [ 0 ]	142:22:4865:4876	4902505	0	True				
ANR	4902648	ArrayIndexing	arg_value [ 0 ]		4902505	0					
ANR	4902649	Identifier	arg_value		4902505	0					
ANR	4902650	PrimaryExpression	0		4902505	1					
ANR	4902651	CompoundStatement		22:36:650:650	4902505	1					
ANR	4902652	Label	case 'p' :	143:18:4899:4907	4902505	0	True				
ANR	4902653	ExpressionStatement	params . output_format = ( arg_value [ 1 ] == 's' ) ? OUTPUT_PS : OUTPUT_PPM	144:20:4929:5042	4902505	1	True				
ANR	4902654	AssignmentExpression	params . output_format = ( arg_value [ 1 ] == 's' ) ? OUTPUT_PS : OUTPUT_PPM		4902505	0		=			
ANR	4902655	MemberAccess	params . output_format		4902505	0					
ANR	4902656	Identifier	params		4902505	0					
ANR	4902657	Identifier	output_format		4902505	1					
ANR	4902658	ConditionalExpression	( arg_value [ 1 ] == 's' ) ? OUTPUT_PS : OUTPUT_PPM		4902505	1					
ANR	4902659	Condition	arg_value [ 1 ] == 's'		4902505	0					
ANR	4902660	EqualityExpression	arg_value [ 1 ] == 's'		4902505	0		==			
ANR	4902661	ArrayIndexing	arg_value [ 1 ]		4902505	0					
ANR	4902662	Identifier	arg_value		4902505	0					
ANR	4902663	PrimaryExpression	1		4902505	1					
ANR	4902664	PrimaryExpression	's'		4902505	1					
ANR	4902665	Identifier	OUTPUT_PS		4902505	1					
ANR	4902666	Identifier	OUTPUT_PPM		4902505	2					
ANR	4902667	BreakStatement	break ;	146:20:5064:5069	4902505	2	True				
ANR	4902668	Label	case 'r' :	147:18:5089:5097	4902505	3	True				
ANR	4902669	ExpressionStatement	"j = sscanf ( arg_value , ""raw%d"" , & k )"	148:20:5119:5153	4902505	4	True				
ANR	4902670	AssignmentExpression	"j = sscanf ( arg_value , ""raw%d"" , & k )"		4902505	0		=			
ANR	4902671	Identifier	j		4902505	0					
ANR	4902672	CallExpression	"sscanf ( arg_value , ""raw%d"" , & k )"		4902505	1					
ANR	4902673	Callee	sscanf		4902505	0					
ANR	4902674	Identifier	sscanf		4902505	0					
ANR	4902675	ArgumentList	arg_value		4902505	1					
ANR	4902676	Argument	arg_value		4902505	0					
ANR	4902677	Identifier	arg_value		4902505	0					
ANR	4902678	Argument	"""raw%d"""		4902505	1					
ANR	4902679	PrimaryExpression	"""raw%d"""		4902505	0					
ANR	4902680	Argument	& k		4902505	2					
ANR	4902681	UnaryOperationExpression	& k		4902505	0					
ANR	4902682	UnaryOperator	&		4902505	0					
ANR	4902683	Identifier	k		4902505	1					
ANR	4902684	IfStatement	if ( j == 0 || k == 8 )		4902505	5					
ANR	4902685	Condition	j == 0 || k == 8	149:24:5179:5194	4902505	0	True				
ANR	4902686	OrExpression	j == 0 || k == 8		4902505	0		||			
ANR	4902687	EqualityExpression	j == 0		4902505	0		==			
ANR	4902688	Identifier	j		4902505	0					
ANR	4902689	PrimaryExpression	0		4902505	1					
ANR	4902690	EqualityExpression	k == 8		4902505	1		==			
ANR	4902691	Identifier	k		4902505	0					
ANR	4902692	PrimaryExpression	8		4902505	1					
ANR	4902693	ExpressionStatement	params . output_format = OUTPUT_RAW	150:24:5221:5254	4902505	1	True				
ANR	4902694	AssignmentExpression	params . output_format = OUTPUT_RAW		4902505	0		=			
ANR	4902695	MemberAccess	params . output_format		4902505	0					
ANR	4902696	Identifier	params		4902505	0					
ANR	4902697	Identifier	output_format		4902505	1					
ANR	4902698	Identifier	OUTPUT_RAW		4902505	1					
ANR	4902699	ElseStatement	else		4902505	0					
ANR	4902700	ExpressionStatement	params . output_format = OUTPUT_RAW16	152:24:5305:5340	4902505	0	True				
ANR	4902701	AssignmentExpression	params . output_format = OUTPUT_RAW16		4902505	0		=			
ANR	4902702	MemberAccess	params . output_format		4902505	0					
ANR	4902703	Identifier	params		4902505	0					
ANR	4902704	Identifier	output_format		4902505	1					
ANR	4902705	Identifier	OUTPUT_RAW16		4902505	1					
ANR	4902706	BreakStatement	break ;	153:20:5362:5367	4902505	6	True				
ANR	4902707	Label	case 't' :	154:18:5387:5395	4902505	7	True				
ANR	4902708	ExpressionStatement	params . output_format = OUTPUT_TOS	155:20:5417:5450	4902505	8	True				
ANR	4902709	AssignmentExpression	params . output_format = OUTPUT_TOS		4902505	0		=			
ANR	4902710	MemberAccess	params . output_format		4902505	0					
ANR	4902711	Identifier	params		4902505	0					
ANR	4902712	Identifier	output_format		4902505	1					
ANR	4902713	Identifier	OUTPUT_TOS		4902505	1					
ANR	4902714	BreakStatement	break ;	156:20:5472:5477	4902505	9	True				
ANR	4902715	Label	default :	157:18:5497:5504	4902505	10	True				
ANR	4902716	Identifier	default		4902505	0					
ANR	4902717	GotoStatement	goto usage_exit ;	158:20:5526:5541	4902505	11	True				
ANR	4902718	Identifier	usage_exit		4902505	0					
ANR	4902719	BreakStatement	break ;	160:14:5573:5578	4902505	7	True				
ANR	4902720	Label	case 'd' :	161:12:5592:5600	4902505	8	True				
ANR	4902721	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		4902505	9					
ANR	4902722	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	162:18:5620:5673	4902505	0	True				
ANR	4902723	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		4902505	0		==			
ANR	4902724	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		4902505	0		=			
ANR	4902725	Identifier	arg_value		4902505	0					
ANR	4902726	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		4902505	1					
ANR	4902727	Callee	get_arg		4902505	0					
ANR	4902728	Identifier	get_arg		4902505	0					
ANR	4902729	ArgumentList	argc		4902505	1					
ANR	4902730	Argument	argc		4902505	0					
ANR	4902731	Identifier	argc		4902505	0					
ANR	4902732	Argument	argv		4902505	1					
ANR	4902733	Identifier	argv		4902505	0					
ANR	4902734	Argument	& i		4902505	2					
ANR	4902735	UnaryOperationExpression	& i		4902505	0					
ANR	4902736	UnaryOperator	&		4902505	0					
ANR	4902737	Identifier	i		4902505	1					
ANR	4902738	Argument	arg + 2		4902505	3					
ANR	4902739	AdditiveExpression	arg + 2		4902505	0		+			
ANR	4902740	Identifier	arg		4902505	0					
ANR	4902741	PrimaryExpression	2		4902505	1					
ANR	4902742	Identifier	NULL		4902505	1					
ANR	4902743	GotoStatement	goto usage_exit ;	163:18:5694:5709	4902505	1	True				
ANR	4902744	Identifier	usage_exit		4902505	0					
ANR	4902745	ExpressionStatement	j = atoi ( arg_value )	164:14:5725:5744	4902505	10	True				
ANR	4902746	AssignmentExpression	j = atoi ( arg_value )		4902505	0		=			
ANR	4902747	Identifier	j		4902505	0					
ANR	4902748	CallExpression	atoi ( arg_value )		4902505	1					
ANR	4902749	Callee	atoi		4902505	0					
ANR	4902750	Identifier	atoi		4902505	0					
ANR	4902751	ArgumentList	arg_value		4902505	1					
ANR	4902752	Argument	arg_value		4902505	0					
ANR	4902753	Identifier	arg_value		4902505	0					
ANR	4902754	IfStatement	if ( j < 0 || j > CUSTOM )		4902505	11					
ANR	4902755	Condition	j < 0 || j > CUSTOM	165:18:5764:5782	4902505	0	True				
ANR	4902756	OrExpression	j < 0 || j > CUSTOM		4902505	0		||			
ANR	4902757	RelationalExpression	j < 0		4902505	0		<			
ANR	4902758	Identifier	j		4902505	0					
ANR	4902759	PrimaryExpression	0		4902505	1					
ANR	4902760	RelationalExpression	j > CUSTOM		4902505	1		>			
ANR	4902761	Identifier	j		4902505	0					
ANR	4902762	Identifier	CUSTOM		4902505	1					
ANR	4902763	ExpressionStatement	params . spot_type = CIRCLE	166:18:5803:5828	4902505	1	True				
ANR	4902764	AssignmentExpression	params . spot_type = CIRCLE		4902505	0		=			
ANR	4902765	MemberAccess	params . spot_type		4902505	0					
ANR	4902766	Identifier	params		4902505	0					
ANR	4902767	Identifier	spot_type		4902505	1					
ANR	4902768	Identifier	CIRCLE		4902505	1					
ANR	4902769	ElseStatement	else		4902505	0					
ANR	4902770	ExpressionStatement	params . spot_type = j	168:18:5867:5887	4902505	0	True				
ANR	4902771	AssignmentExpression	params . spot_type = j		4902505	0		=			
ANR	4902772	MemberAccess	params . spot_type		4902505	0					
ANR	4902773	Identifier	params		4902505	0					
ANR	4902774	Identifier	spot_type		4902505	1					
ANR	4902775	Identifier	j		4902505	1					
ANR	4902776	BreakStatement	break ;	169:14:5903:5908	4902505	12	True				
ANR	4902777	Label	case 'l' :	170:12:5922:5930	4902505	13	True				
ANR	4902778	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		4902505	14					
ANR	4902779	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	171:18:5950:6003	4902505	0	True				
ANR	4902780	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		4902505	0		==			
ANR	4902781	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		4902505	0		=			
ANR	4902782	Identifier	arg_value		4902505	0					
ANR	4902783	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		4902505	1					
ANR	4902784	Callee	get_arg		4902505	0					
ANR	4902785	Identifier	get_arg		4902505	0					
ANR	4902786	ArgumentList	argc		4902505	1					
ANR	4902787	Argument	argc		4902505	0					
ANR	4902788	Identifier	argc		4902505	0					
ANR	4902789	Argument	argv		4902505	1					
ANR	4902790	Identifier	argv		4902505	0					
ANR	4902791	Argument	& i		4902505	2					
ANR	4902792	UnaryOperationExpression	& i		4902505	0					
ANR	4902793	UnaryOperator	&		4902505	0					
ANR	4902794	Identifier	i		4902505	1					
ANR	4902795	Argument	arg + 2		4902505	3					
ANR	4902796	AdditiveExpression	arg + 2		4902505	0		+			
ANR	4902797	Identifier	arg		4902505	0					
ANR	4902798	PrimaryExpression	2		4902505	1					
ANR	4902799	Identifier	NULL		4902505	1					
ANR	4902800	GotoStatement	goto usage_exit ;	172:18:6024:6039	4902505	1	True				
ANR	4902801	Identifier	usage_exit		4902505	0					
ANR	4902802	ExpressionStatement	params . targ_lpi = atoi ( arg_value )	173:14:6055:6088	4902505	15	True				
ANR	4902803	AssignmentExpression	params . targ_lpi = atoi ( arg_value )		4902505	0		=			
ANR	4902804	MemberAccess	params . targ_lpi		4902505	0					
ANR	4902805	Identifier	params		4902505	0					
ANR	4902806	Identifier	targ_lpi		4902505	1					
ANR	4902807	CallExpression	atoi ( arg_value )		4902505	1					
ANR	4902808	Callee	atoi		4902505	0					
ANR	4902809	Identifier	atoi		4902505	0					
ANR	4902810	ArgumentList	arg_value		4902505	1					
ANR	4902811	Argument	arg_value		4902505	0					
ANR	4902812	Identifier	arg_value		4902505	0					
ANR	4902813	BreakStatement	break ;	174:14:6104:6109	4902505	16	True				
ANR	4902814	Label	case 'q' :	175:12:6123:6131	4902505	17	True				
ANR	4902815	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		4902505	18					
ANR	4902816	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	176:18:6151:6204	4902505	0	True				
ANR	4902817	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		4902505	0		==			
ANR	4902818	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		4902505	0		=			
ANR	4902819	Identifier	arg_value		4902505	0					
ANR	4902820	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		4902505	1					
ANR	4902821	Callee	get_arg		4902505	0					
ANR	4902822	Identifier	get_arg		4902505	0					
ANR	4902823	ArgumentList	argc		4902505	1					
ANR	4902824	Argument	argc		4902505	0					
ANR	4902825	Identifier	argc		4902505	0					
ANR	4902826	Argument	argv		4902505	1					
ANR	4902827	Identifier	argv		4902505	0					
ANR	4902828	Argument	& i		4902505	2					
ANR	4902829	UnaryOperationExpression	& i		4902505	0					
ANR	4902830	UnaryOperator	&		4902505	0					
ANR	4902831	Identifier	i		4902505	1					
ANR	4902832	Argument	arg + 2		4902505	3					
ANR	4902833	AdditiveExpression	arg + 2		4902505	0		+			
ANR	4902834	Identifier	arg		4902505	0					
ANR	4902835	PrimaryExpression	2		4902505	1					
ANR	4902836	Identifier	NULL		4902505	1					
ANR	4902837	GotoStatement	goto usage_exit ;	177:18:6225:6240	4902505	1	True				
ANR	4902838	Identifier	usage_exit		4902505	0					
ANR	4902839	ExpressionStatement	params . targ_quant = atoi ( arg_value )	178:14:6256:6291	4902505	19	True				
ANR	4902840	AssignmentExpression	params . targ_quant = atoi ( arg_value )		4902505	0		=			
ANR	4902841	MemberAccess	params . targ_quant		4902505	0					
ANR	4902842	Identifier	params		4902505	0					
ANR	4902843	Identifier	targ_quant		4902505	1					
ANR	4902844	CallExpression	atoi ( arg_value )		4902505	1					
ANR	4902845	Callee	atoi		4902505	0					
ANR	4902846	Identifier	atoi		4902505	0					
ANR	4902847	ArgumentList	arg_value		4902505	1					
ANR	4902848	Argument	arg_value		4902505	0					
ANR	4902849	Identifier	arg_value		4902505	0					
ANR	4902850	ExpressionStatement	params . targ_quant_spec = true	179:14:6307:6336	4902505	20	True				
ANR	4902851	AssignmentExpression	params . targ_quant_spec = true		4902505	0		=			
ANR	4902852	MemberAccess	params . targ_quant_spec		4902505	0					
ANR	4902853	Identifier	params		4902505	0					
ANR	4902854	Identifier	targ_quant_spec		4902505	1					
ANR	4902855	Identifier	true		4902505	1					
ANR	4902856	BreakStatement	break ;	180:14:6352:6357	4902505	21	True				
ANR	4902857	Label	case 'r' :	181:12:6371:6379	4902505	22	True				
ANR	4902858	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		4902505	23					
ANR	4902859	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	182:18:6399:6452	4902505	0	True				
ANR	4902860	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		4902505	0		==			
ANR	4902861	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		4902505	0		=			
ANR	4902862	Identifier	arg_value		4902505	0					
ANR	4902863	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		4902505	1					
ANR	4902864	Callee	get_arg		4902505	0					
ANR	4902865	Identifier	get_arg		4902505	0					
ANR	4902866	ArgumentList	argc		4902505	1					
ANR	4902867	Argument	argc		4902505	0					
ANR	4902868	Identifier	argc		4902505	0					
ANR	4902869	Argument	argv		4902505	1					
ANR	4902870	Identifier	argv		4902505	0					
ANR	4902871	Argument	& i		4902505	2					
ANR	4902872	UnaryOperationExpression	& i		4902505	0					
ANR	4902873	UnaryOperator	&		4902505	0					
ANR	4902874	Identifier	i		4902505	1					
ANR	4902875	Argument	arg + 2		4902505	3					
ANR	4902876	AdditiveExpression	arg + 2		4902505	0		+			
ANR	4902877	Identifier	arg		4902505	0					
ANR	4902878	PrimaryExpression	2		4902505	1					
ANR	4902879	Identifier	NULL		4902505	1					
ANR	4902880	GotoStatement	goto usage_exit ;	183:18:6473:6488	4902505	1	True				
ANR	4902881	Identifier	usage_exit		4902505	0					
ANR	4902882	ExpressionStatement	"j = sscanf ( arg_value , ""%dx%d"" , & k , & m )"	184:14:6504:6542	4902505	24	True				
ANR	4902883	AssignmentExpression	"j = sscanf ( arg_value , ""%dx%d"" , & k , & m )"		4902505	0		=			
ANR	4902884	Identifier	j		4902505	0					
ANR	4902885	CallExpression	"sscanf ( arg_value , ""%dx%d"" , & k , & m )"		4902505	1					
ANR	4902886	Callee	sscanf		4902505	0					
ANR	4902887	Identifier	sscanf		4902505	0					
ANR	4902888	ArgumentList	arg_value		4902505	1					
ANR	4902889	Argument	arg_value		4902505	0					
ANR	4902890	Identifier	arg_value		4902505	0					
ANR	4902891	Argument	"""%dx%d"""		4902505	1					
ANR	4902892	PrimaryExpression	"""%dx%d"""		4902505	0					
ANR	4902893	Argument	& k		4902505	2					
ANR	4902894	UnaryOperationExpression	& k		4902505	0					
ANR	4902895	UnaryOperator	&		4902505	0					
ANR	4902896	Identifier	k		4902505	1					
ANR	4902897	Argument	& m		4902505	3					
ANR	4902898	UnaryOperationExpression	& m		4902505	0					
ANR	4902899	UnaryOperator	&		4902505	0					
ANR	4902900	Identifier	m		4902505	1					
ANR	4902901	IfStatement	if ( j < 1 )		4902505	25					
ANR	4902902	Condition	j < 1	185:18:6562:6566	4902505	0	True				
ANR	4902903	RelationalExpression	j < 1		4902505	0		<			
ANR	4902904	Identifier	j		4902505	0					
ANR	4902905	PrimaryExpression	1		4902505	1					
ANR	4902906	GotoStatement	goto usage_exit ;	186:18:6587:6602	4902505	1	True				
ANR	4902907	Identifier	usage_exit		4902505	0					
ANR	4902908	ExpressionStatement	params . horiz_dpi = k	187:14:6618:6638	4902505	26	True				
ANR	4902909	AssignmentExpression	params . horiz_dpi = k		4902505	0		=			
ANR	4902910	MemberAccess	params . horiz_dpi		4902505	0					
ANR	4902911	Identifier	params		4902505	0					
ANR	4902912	Identifier	horiz_dpi		4902505	1					
ANR	4902913	Identifier	k		4902505	1					
ANR	4902914	IfStatement	if ( j > 1 )		4902505	27					
ANR	4902915	Condition	j > 1	188:18:6658:6662	4902505	0	True				
ANR	4902916	RelationalExpression	j > 1		4902505	0		>			
ANR	4902917	Identifier	j		4902505	0					
ANR	4902918	PrimaryExpression	1		4902505	1					
ANR	4902919	CompoundStatement		68:25:2436:2436	4902505	1					
ANR	4902920	ExpressionStatement	params . vert_dpi = m	189:18:6685:6704	4902505	0	True				
ANR	4902921	AssignmentExpression	params . vert_dpi = m		4902505	0		=			
ANR	4902922	MemberAccess	params . vert_dpi		4902505	0					
ANR	4902923	Identifier	params		4902505	0					
ANR	4902924	Identifier	vert_dpi		4902505	1					
ANR	4902925	Identifier	m		4902505	1					
ANR	4902926	ElseStatement	else		4902505	0					
ANR	4902927	CompoundStatement		70:21:2498:2498	4902505	0					
ANR	4902928	ExpressionStatement	params . vert_dpi = k	191:18:6747:6766	4902505	0	True				
ANR	4902929	AssignmentExpression	params . vert_dpi = k		4902505	0		=			
ANR	4902930	MemberAccess	params . vert_dpi		4902505	0					
ANR	4902931	Identifier	params		4902505	0					
ANR	4902932	Identifier	vert_dpi		4902505	1					
ANR	4902933	Identifier	k		4902505	1					
ANR	4902934	BreakStatement	break ;	193:14:6798:6803	4902505	28	True				
ANR	4902935	Label	case 's' :	194:12:6817:6825	4902505	29	True				
ANR	4902936	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		4902505	30					
ANR	4902937	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	195:18:6845:6898	4902505	0	True				
ANR	4902938	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		4902505	0		==			
ANR	4902939	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		4902505	0		=			
ANR	4902940	Identifier	arg_value		4902505	0					
ANR	4902941	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		4902505	1					
ANR	4902942	Callee	get_arg		4902505	0					
ANR	4902943	Identifier	get_arg		4902505	0					
ANR	4902944	ArgumentList	argc		4902505	1					
ANR	4902945	Argument	argc		4902505	0					
ANR	4902946	Identifier	argc		4902505	0					
ANR	4902947	Argument	argv		4902505	1					
ANR	4902948	Identifier	argv		4902505	0					
ANR	4902949	Argument	& i		4902505	2					
ANR	4902950	UnaryOperationExpression	& i		4902505	0					
ANR	4902951	UnaryOperator	&		4902505	0					
ANR	4902952	Identifier	i		4902505	1					
ANR	4902953	Argument	arg + 2		4902505	3					
ANR	4902954	AdditiveExpression	arg + 2		4902505	0		+			
ANR	4902955	Identifier	arg		4902505	0					
ANR	4902956	PrimaryExpression	2		4902505	1					
ANR	4902957	Identifier	NULL		4902505	1					
ANR	4902958	GotoStatement	goto usage_exit ;	196:18:6919:6934	4902505	1	True				
ANR	4902959	Identifier	usage_exit		4902505	0					
ANR	4902960	ExpressionStatement	params . targ_size = atoi ( arg_value )	197:14:6950:6984	4902505	31	True				
ANR	4902961	AssignmentExpression	params . targ_size = atoi ( arg_value )		4902505	0		=			
ANR	4902962	MemberAccess	params . targ_size		4902505	0					
ANR	4902963	Identifier	params		4902505	0					
ANR	4902964	Identifier	targ_size		4902505	1					
ANR	4902965	CallExpression	atoi ( arg_value )		4902505	1					
ANR	4902966	Callee	atoi		4902505	0					
ANR	4902967	Identifier	atoi		4902505	0					
ANR	4902968	ArgumentList	arg_value		4902505	1					
ANR	4902969	Argument	arg_value		4902505	0					
ANR	4902970	Identifier	arg_value		4902505	0					
ANR	4902971	ExpressionStatement	params . targ_size_spec = true	198:14:7000:7028	4902505	32	True				
ANR	4902972	AssignmentExpression	params . targ_size_spec = true		4902505	0		=			
ANR	4902973	MemberAccess	params . targ_size_spec		4902505	0					
ANR	4902974	Identifier	params		4902505	0					
ANR	4902975	Identifier	targ_size_spec		4902505	1					
ANR	4902976	Identifier	true		4902505	1					
ANR	4902977	BreakStatement	break ;	199:14:7044:7049	4902505	33	True				
ANR	4902978	Label	case 'v' :	200:12:7063:7071	4902505	34	True				
ANR	4902979	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		4902505	35					
ANR	4902980	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	201:18:7091:7144	4902505	0	True				
ANR	4902981	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		4902505	0		==			
ANR	4902982	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		4902505	0		=			
ANR	4902983	Identifier	arg_value		4902505	0					
ANR	4902984	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		4902505	1					
ANR	4902985	Callee	get_arg		4902505	0					
ANR	4902986	Identifier	get_arg		4902505	0					
ANR	4902987	ArgumentList	argc		4902505	1					
ANR	4902988	Argument	argc		4902505	0					
ANR	4902989	Identifier	argc		4902505	0					
ANR	4902990	Argument	argv		4902505	1					
ANR	4902991	Identifier	argv		4902505	0					
ANR	4902992	Argument	& i		4902505	2					
ANR	4902993	UnaryOperationExpression	& i		4902505	0					
ANR	4902994	UnaryOperator	&		4902505	0					
ANR	4902995	Identifier	i		4902505	1					
ANR	4902996	Argument	arg + 2		4902505	3					
ANR	4902997	AdditiveExpression	arg + 2		4902505	0		+			
ANR	4902998	Identifier	arg		4902505	0					
ANR	4902999	PrimaryExpression	2		4902505	1					
ANR	4903000	Identifier	NULL		4902505	1					
ANR	4903001	GotoStatement	goto usage_exit ;	202:18:7165:7180	4902505	1	True				
ANR	4903002	Identifier	usage_exit		4902505	0					
ANR	4903003	ExpressionStatement	params . verbose = atoi ( arg_value )	203:14:7196:7228	4902505	36	True				
ANR	4903004	AssignmentExpression	params . verbose = atoi ( arg_value )		4902505	0		=			
ANR	4903005	MemberAccess	params . verbose		4902505	0					
ANR	4903006	Identifier	params		4902505	0					
ANR	4903007	Identifier	verbose		4902505	1					
ANR	4903008	CallExpression	atoi ( arg_value )		4902505	1					
ANR	4903009	Callee	atoi		4902505	0					
ANR	4903010	Identifier	atoi		4902505	0					
ANR	4903011	ArgumentList	arg_value		4902505	1					
ANR	4903012	Argument	arg_value		4902505	0					
ANR	4903013	Identifier	arg_value		4902505	0					
ANR	4903014	BreakStatement	break ;	204:14:7244:7249	4902505	37	True				
ANR	4903015	Label	default :	205:12:7263:7270	4902505	38	True				
ANR	4903016	Identifier	default		4902505	0					
ANR	4903017	Label	usage_exit :	206:0:7272:7282	4902505	39	True				
ANR	4903018	Identifier	usage_exit		4902505	0					
ANR	4903019	ReturnStatement	return usage ( ) ;	206:14:7286:7300	4902505	40	True				
ANR	4903020	CallExpression	usage ( )		4902505	0					
ANR	4903021	Callee	usage		4902505	0					
ANR	4903022	Identifier	usage		4902505	0					
ANR	4903023	ArgumentList			4902505	1					
ANR	4903024	ExpressionStatement	final_mask . memory = NULL	210:4:7336:7360	4902505	5	True				
ANR	4903025	AssignmentExpression	final_mask . memory = NULL		4902505	0		=			
ANR	4903026	MemberAccess	final_mask . memory		4902505	0					
ANR	4903027	Identifier	final_mask		4902505	0					
ANR	4903028	Identifier	memory		4902505	1					
ANR	4903029	Identifier	NULL		4902505	1					
ANR	4903030	ExpressionStatement	"code = htsc_gen_ordered ( params , & S , & final_mask )"	211:4:7390:7438	4902505	6	True				
ANR	4903031	AssignmentExpression	"code = htsc_gen_ordered ( params , & S , & final_mask )"		4902505	0		=			
ANR	4903032	Identifier	code		4902505	0					
ANR	4903033	CallExpression	"htsc_gen_ordered ( params , & S , & final_mask )"		4902505	1					
ANR	4903034	Callee	htsc_gen_ordered		4902505	0					
ANR	4903035	Identifier	htsc_gen_ordered		4902505	0					
ANR	4903036	ArgumentList	params		4902505	1					
ANR	4903037	Argument	params		4902505	0					
ANR	4903038	Identifier	params		4902505	0					
ANR	4903039	Argument	& S		4902505	1					
ANR	4903040	UnaryOperationExpression	& S		4902505	0					
ANR	4903041	UnaryOperator	&		4902505	0					
ANR	4903042	Identifier	S		4902505	1					
ANR	4903043	Argument	& final_mask		4902505	2					
ANR	4903044	UnaryOperationExpression	& final_mask		4902505	0					
ANR	4903045	UnaryOperator	&		4902505	0					
ANR	4903046	Identifier	final_mask		4902505	1					
ANR	4903047	IfStatement	if ( code >= 0 )		4902505	7					
ANR	4903048	Condition	code >= 0	213:8:7449:7457	4902505	0	True				
ANR	4903049	RelationalExpression	code >= 0		4902505	0		>=			
ANR	4903050	Identifier	code		4902505	0					
ANR	4903051	PrimaryExpression	0		4902505	1					
ANR	4903052	ExpressionStatement	"code = htsc_save_screen ( & final_mask , params . holladay , S , params )"	214:8:7468:7532	4902505	1	True				
ANR	4903053	AssignmentExpression	"code = htsc_save_screen ( & final_mask , params . holladay , S , params )"		4902505	0		=			
ANR	4903054	Identifier	code		4902505	0					
ANR	4903055	CallExpression	"htsc_save_screen ( & final_mask , params . holladay , S , params )"		4902505	1					
ANR	4903056	Callee	htsc_save_screen		4902505	0					
ANR	4903057	Identifier	htsc_save_screen		4902505	0					
ANR	4903058	ArgumentList	& final_mask		4902505	1					
ANR	4903059	Argument	& final_mask		4902505	0					
ANR	4903060	UnaryOperationExpression	& final_mask		4902505	0					
ANR	4903061	UnaryOperator	&		4902505	0					
ANR	4903062	Identifier	final_mask		4902505	1					
ANR	4903063	Argument	params . holladay		4902505	1					
ANR	4903064	MemberAccess	params . holladay		4902505	0					
ANR	4903065	Identifier	params		4902505	0					
ANR	4903066	Identifier	holladay		4902505	1					
ANR	4903067	Argument	S		4902505	2					
ANR	4903068	Identifier	S		4902505	0					
ANR	4903069	Argument	params		4902505	3					
ANR	4903070	Identifier	params		4902505	0					
ANR	4903071	IfStatement	if ( final_mask . data != NULL )		4902505	8					
ANR	4903072	Condition	final_mask . data != NULL	216:8:7543:7565	4902505	0	True				
ANR	4903073	EqualityExpression	final_mask . data != NULL		4902505	0		!=			
ANR	4903074	MemberAccess	final_mask . data		4902505	0					
ANR	4903075	Identifier	final_mask		4902505	0					
ANR	4903076	Identifier	data		4902505	1					
ANR	4903077	Identifier	NULL		4902505	1					
ANR	4903078	ExpressionStatement	free ( final_mask . data )	217:8:7576:7597	4902505	1	True				
ANR	4903079	CallExpression	free ( final_mask . data )		4902505	0					
ANR	4903080	Callee	free		4902505	0					
ANR	4903081	Identifier	free		4902505	0					
ANR	4903082	ArgumentList	final_mask . data		4902505	1					
ANR	4903083	Argument	final_mask . data		4902505	0					
ANR	4903084	MemberAccess	final_mask . data		4902505	0					
ANR	4903085	Identifier	final_mask		4902505	0					
ANR	4903086	Identifier	data		4902505	1					
ANR	4903087	ReturnStatement	return code ;	219:4:7604:7615	4902505	9	True				
ANR	4903088	Identifier	code		4902505	0					
ANR	4903089	ReturnType	int		4902505	1					
ANR	4903090	Identifier	main		4902505	2					
ANR	4903091	ParameterList	"int argc , char * * argv"		4902505	3					
ANR	4903092	Parameter	int argc	120:6:4205:4212	4902505	0	True				
ANR	4903093	ParameterType	int		4902505	0					
ANR	4903094	Identifier	argc		4902505	1					
ANR	4903095	Parameter	char * * argv	120:16:4215:4225	4902505	1	True				
ANR	4903096	ParameterType	char * *		4902505	0					
ANR	4903097	Identifier	argv		4902505	1					
ANR	4903098	CFGEntryNode	ENTRY		4902505		True				
ANR	4903099	CFGExitNode	EXIT		4902505		True				
ANR	4903100	Symbol	* arg_value		4902505						
ANR	4903101	Symbol	usage		4902505						
ANR	4903102	Symbol	final_mask . data		4902505						
ANR	4903103	Symbol	* argv		4902505						
ANR	4903104	Symbol	params . holladay		4902505						
ANR	4903105	Symbol	final_mask		4902505						
ANR	4903106	Symbol	& params		4902505						
ANR	4903107	Symbol	OUTPUT_PPM		4902505						
ANR	4903108	Symbol	params . vert_dpi		4902505						
ANR	4903109	Symbol	NULL		4902505						
ANR	4903110	Symbol	OUTPUT_RAW16		4902505						
ANR	4903111	Symbol	htsc_save_screen		4902505						
ANR	4903112	Symbol	params		4902505						
ANR	4903113	Symbol	params . output_format		4902505						
ANR	4903114	Symbol	params . targ_size		4902505						
ANR	4903115	Symbol	CIRCLE		4902505						
ANR	4903116	Symbol	final_mask . memory		4902505						
ANR	4903117	Symbol	sscanf		4902505						
ANR	4903118	Symbol	true		4902505						
ANR	4903119	Symbol	params . verbose		4902505						
ANR	4903120	Symbol	* arg		4902505						
ANR	4903121	Symbol	code		4902505						
ANR	4903122	Symbol	params . targ_scr_ang		4902505						
ANR	4903123	Symbol	OUTPUT_PS		4902505						
ANR	4903124	Symbol	params . targ_size_spec		4902505						
ANR	4903125	Symbol	argv		4902505						
ANR	4903126	Symbol	params . spot_type		4902505						
ANR	4903127	Symbol	params . targ_quant_spec		4902505						
ANR	4903128	Symbol	& final_mask		4902505						
ANR	4903129	Symbol	S		4902505						
ANR	4903130	Symbol	arg_value		4902505						
ANR	4903131	Symbol	arg		4902505						
ANR	4903132	Symbol	CUSTOM		4902505						
ANR	4903133	Symbol	& S		4902505						
ANR	4903134	Symbol	OUTPUT_RAW		4902505						
ANR	4903135	Symbol	params . horiz_dpi		4902505						
ANR	4903136	Symbol	argc		4902505						
ANR	4903137	Symbol	atoi		4902505						
ANR	4903138	Symbol	params . targ_quant		4902505						
ANR	4903139	Symbol	get_arg		4902505						
ANR	4903140	Symbol	i		4902505						
ANR	4903141	Symbol	j		4902505						
ANR	4903142	Symbol	OUTPUT_TOS		4902505						
ANR	4903143	Symbol	k		4902505						
ANR	4903144	Symbol	m		4902505						
ANR	4903145	Symbol	& i		4902505						
ANR	4903146	Symbol	& k		4902505						
ANR	4903147	Symbol	htsc_gen_ordered		4902505						
ANR	4903148	Symbol	* i		4902505						
ANR	4903149	Symbol	& m		4902505						
ANR	4903150	Symbol	params . targ_lpi		4902505						
ANR	4903151	Function	htsc_save_tos	223:0:7709:8202							
ANR	4903152	FunctionDef	htsc_save_tos (htsc_dig_grid_t * final_mask)		4903151	0					
ANR	4903153	CompoundStatement		225:0:7763:8202	4903151	0					
ANR	4903154	IdentifierDeclStatement	int width = final_mask -> width ;	226:4:7769:7798	4903151	0	True				
ANR	4903155	IdentifierDecl	width = final_mask -> width		4903151	0					
ANR	4903156	IdentifierDeclType	int		4903151	0					
ANR	4903157	Identifier	width		4903151	1					
ANR	4903158	AssignmentExpression	width = final_mask -> width		4903151	2		=			
ANR	4903159	Identifier	width		4903151	0					
ANR	4903160	PtrMemberAccess	final_mask -> width		4903151	1					
ANR	4903161	Identifier	final_mask		4903151	0					
ANR	4903162	Identifier	width		4903151	1					
ANR	4903163	IdentifierDeclStatement	int height = final_mask -> height ;	227:4:7804:7835	4903151	1	True				
ANR	4903164	IdentifierDecl	height = final_mask -> height		4903151	0					
ANR	4903165	IdentifierDeclType	int		4903151	0					
ANR	4903166	Identifier	height		4903151	1					
ANR	4903167	AssignmentExpression	height = final_mask -> height		4903151	2		=			
ANR	4903168	Identifier	height		4903151	0					
ANR	4903169	PtrMemberAccess	final_mask -> height		4903151	1					
ANR	4903170	Identifier	final_mask		4903151	0					
ANR	4903171	Identifier	height		4903151	1					
ANR	4903172	IdentifierDeclStatement	int * buff_ptr ;	228:4:7841:7854	4903151	2	True				
ANR	4903173	IdentifierDecl	* buff_ptr		4903151	0					
ANR	4903174	IdentifierDeclType	int *		4903151	0					
ANR	4903175	Identifier	buff_ptr		4903151	1					
ANR	4903176	IdentifierDeclStatement	FILE * fid ;	229:4:7860:7869	4903151	3	True				
ANR	4903177	IdentifierDecl	* fid		4903151	0					
ANR	4903178	IdentifierDeclType	FILE *		4903151	0					
ANR	4903179	Identifier	fid		4903151	1					
ANR	4903180	IdentifierDeclStatement	"int code , x , y , k = 0 ;"	230:4:7875:7896	4903151	4	True				
ANR	4903181	IdentifierDecl	code		4903151	0					
ANR	4903182	IdentifierDeclType	int		4903151	0					
ANR	4903183	Identifier	code		4903151	1					
ANR	4903184	IdentifierDecl	x		4903151	1					
ANR	4903185	IdentifierDeclType	int		4903151	0					
ANR	4903186	Identifier	x		4903151	1					
ANR	4903187	IdentifierDecl	y		4903151	2					
ANR	4903188	IdentifierDeclType	int		4903151	0					
ANR	4903189	Identifier	y		4903151	1					
ANR	4903190	IdentifierDecl	k = 0		4903151	3					
ANR	4903191	IdentifierDeclType	int		4903151	0					
ANR	4903192	Identifier	k		4903151	1					
ANR	4903193	AssignmentExpression	k = 0		4903151	2		=			
ANR	4903194	Identifier	k		4903151	0					
ANR	4903195	PrimaryExpression	0		4903151	1					
ANR	4903196	IdentifierDeclStatement	int count = height * width ;	231:4:7902:7927	4903151	5	True				
ANR	4903197	IdentifierDecl	count = height * width		4903151	0					
ANR	4903198	IdentifierDeclType	int		4903151	0					
ANR	4903199	Identifier	count		4903151	1					
ANR	4903200	AssignmentExpression	count = height * width		4903151	2		=			
ANR	4903201	Identifier	count		4903151	0					
ANR	4903202	MultiplicativeExpression	height * width		4903151	1		*			
ANR	4903203	Identifier	height		4903151	0					
ANR	4903204	Identifier	width		4903151	1					
ANR	4903205	ExpressionStatement	"fid = fopen ( ""turn_on_seq.out"" , ""w"" )"	233:4:7934:7968	4903151	6	True				
ANR	4903206	AssignmentExpression	"fid = fopen ( ""turn_on_seq.out"" , ""w"" )"		4903151	0		=			
ANR	4903207	Identifier	fid		4903151	0					
ANR	4903208	CallExpression	"fopen ( ""turn_on_seq.out"" , ""w"" )"		4903151	1					
ANR	4903209	Callee	fopen		4903151	0					
ANR	4903210	Identifier	fopen		4903151	0					
ANR	4903211	ArgumentList	"""turn_on_seq.out"""		4903151	1					
ANR	4903212	Argument	"""turn_on_seq.out"""		4903151	0					
ANR	4903213	PrimaryExpression	"""turn_on_seq.out"""		4903151	0					
ANR	4903214	Argument	"""w"""		4903151	1					
ANR	4903215	PrimaryExpression	"""w"""		4903151	0					
ANR	4903216	ExpressionStatement	"fprintf ( fid , ""# W=%d H=%d\\n"" , width , height )"	234:4:7974:8016	4903151	7	True				
ANR	4903217	CallExpression	"fprintf ( fid , ""# W=%d H=%d\\n"" , width , height )"		4903151	0					
ANR	4903218	Callee	fprintf		4903151	0					
ANR	4903219	Identifier	fprintf		4903151	0					
ANR	4903220	ArgumentList	fid		4903151	1					
ANR	4903221	Argument	fid		4903151	0					
ANR	4903222	Identifier	fid		4903151	0					
ANR	4903223	Argument	"""# W=%d H=%d\\n"""		4903151	1					
ANR	4903224	PrimaryExpression	"""# W=%d H=%d\\n"""		4903151	0					
ANR	4903225	Argument	width		4903151	2					
ANR	4903226	Identifier	width		4903151	0					
ANR	4903227	Argument	height		4903151	3					
ANR	4903228	Identifier	height		4903151	0					
ANR	4903229	ExpressionStatement	buff_ptr = final_mask -> data	237:4:8043:8070	4903151	8	True				
ANR	4903230	AssignmentExpression	buff_ptr = final_mask -> data		4903151	0		=			
ANR	4903231	Identifier	buff_ptr		4903151	0					
ANR	4903232	PtrMemberAccess	final_mask -> data		4903151	1					
ANR	4903233	Identifier	final_mask		4903151	0					
ANR	4903234	Identifier	data		4903151	1					
ANR	4903235	ForStatement	for ( k = 0 ; k < count ; k ++ )		4903151	9					
ANR	4903236	ForInit	k = 0 ;	238:9:8081:8086	4903151	0	True				
ANR	4903237	AssignmentExpression	k = 0		4903151	0		=			
ANR	4903238	Identifier	k		4903151	0					
ANR	4903239	PrimaryExpression	0		4903151	1					
ANR	4903240	Condition	k < count	238:16:8088:8096	4903151	1	True				
ANR	4903241	RelationalExpression	k < count		4903151	0		<			
ANR	4903242	Identifier	k		4903151	0					
ANR	4903243	Identifier	count		4903151	1					
ANR	4903244	PostIncDecOperationExpression	k ++	238:27:8099:8101	4903151	2	True				
ANR	4903245	Identifier	k		4903151	0					
ANR	4903246	IncDec	++		4903151	1					
ANR	4903247	CompoundStatement		14:32:340:340	4903151	3					
ANR	4903248	ExpressionStatement	"fprintf ( fid , ""%d\\t%d\\n"" , * buff_ptr ++ , * buff_ptr ++ )"	239:8:8114:8163	4903151	0	True				
ANR	4903249	CallExpression	"fprintf ( fid , ""%d\\t%d\\n"" , * buff_ptr ++ , * buff_ptr ++ )"		4903151	0					
ANR	4903250	Callee	fprintf		4903151	0					
ANR	4903251	Identifier	fprintf		4903151	0					
ANR	4903252	ArgumentList	fid		4903151	1					
ANR	4903253	Argument	fid		4903151	0					
ANR	4903254	Identifier	fid		4903151	0					
ANR	4903255	Argument	"""%d\\t%d\\n"""		4903151	1					
ANR	4903256	PrimaryExpression	"""%d\\t%d\\n"""		4903151	0					
ANR	4903257	Argument	* buff_ptr ++		4903151	2					
ANR	4903258	UnaryOperationExpression	* buff_ptr ++		4903151	0					
ANR	4903259	UnaryOperator	*		4903151	0					
ANR	4903260	PostIncDecOperationExpression	buff_ptr ++		4903151	1					
ANR	4903261	Identifier	buff_ptr		4903151	0					
ANR	4903262	IncDec	++		4903151	1					
ANR	4903263	Argument	* buff_ptr ++		4903151	3					
ANR	4903264	UnaryOperationExpression	* buff_ptr ++		4903151	0					
ANR	4903265	UnaryOperator	*		4903151	0					
ANR	4903266	PostIncDecOperationExpression	buff_ptr ++		4903151	1					
ANR	4903267	Identifier	buff_ptr		4903151	0					
ANR	4903268	IncDec	++		4903151	1					
ANR	4903269	ExpressionStatement	fclose ( fid )	241:4:8175:8186	4903151	10	True				
ANR	4903270	CallExpression	fclose ( fid )		4903151	0					
ANR	4903271	Callee	fclose		4903151	0					
ANR	4903272	Identifier	fclose		4903151	0					
ANR	4903273	ArgumentList	fid		4903151	1					
ANR	4903274	Argument	fid		4903151	0					
ANR	4903275	Identifier	fid		4903151	0					
ANR	4903276	ReturnStatement	return 0 ;	242:4:8192:8200	4903151	11	True				
ANR	4903277	PrimaryExpression	0		4903151	0					
ANR	4903278	ReturnType	static int		4903151	1					
ANR	4903279	Identifier	htsc_save_tos		4903151	2					
ANR	4903280	ParameterList	htsc_dig_grid_t * final_mask		4903151	3					
ANR	4903281	Parameter	htsc_dig_grid_t * final_mask	224:14:7734:7760	4903151	0	True				
ANR	4903282	ParameterType	htsc_dig_grid_t *		4903151	0					
ANR	4903283	Identifier	final_mask		4903151	1					
ANR	4903284	CFGEntryNode	ENTRY		4903151		True				
ANR	4903285	CFGExitNode	EXIT		4903151		True				
ANR	4903286	Symbol	fid		4903151						
ANR	4903287	Symbol	fopen		4903151						
ANR	4903288	Symbol	final_mask -> width		4903151						
ANR	4903289	Symbol	final_mask -> data		4903151						
ANR	4903290	Symbol	code		4903151						
ANR	4903291	Symbol	buff_ptr		4903151						
ANR	4903292	Symbol	count		4903151						
ANR	4903293	Symbol	k		4903151						
ANR	4903294	Symbol	* final_mask		4903151						
ANR	4903295	Symbol	width		4903151						
ANR	4903296	Symbol	x		4903151						
ANR	4903297	Symbol	y		4903151						
ANR	4903298	Symbol	* buff_ptr ++		4903151						
ANR	4903299	Symbol	final_mask -> height		4903151						
ANR	4903300	Symbol	final_mask		4903151						
ANR	4903301	Symbol	height		4903151						
ANR	4903302	Function	htsc_save_screen	245:0:8205:13422							
ANR	4903303	FunctionDef	"htsc_save_screen (htsc_dig_grid_t * final_mask , bool use_holladay_grid , int S , htsc_param_t params)"		4903302	0					
ANR	4903304	CompoundStatement		248:0:8330:13422	4903302	0					
ANR	4903305	IdentifierDeclStatement	char full_file_name [ FULL_FILE_NAME_LENGTH ] ;	249:4:8336:8378	4903302	0	True				
ANR	4903306	IdentifierDecl	full_file_name [ FULL_FILE_NAME_LENGTH ]		4903302	0					
ANR	4903307	IdentifierDeclType	char [ FULL_FILE_NAME_LENGTH ]		4903302	0					
ANR	4903308	Identifier	full_file_name		4903302	1					
ANR	4903309	Identifier	FULL_FILE_NAME_LENGTH		4903302	2					
ANR	4903310	IdentifierDeclStatement	FILE * fid ;	250:4:8384:8393	4903302	1	True				
ANR	4903311	IdentifierDecl	* fid		4903302	0					
ANR	4903312	IdentifierDeclType	FILE *		4903302	0					
ANR	4903313	Identifier	fid		4903302	1					
ANR	4903314	IdentifierDeclStatement	"int x , y , code = 0 ;"	251:4:8399:8416	4903302	2	True				
ANR	4903315	IdentifierDecl	x		4903302	0					
ANR	4903316	IdentifierDeclType	int		4903302	0					
ANR	4903317	Identifier	x		4903302	1					
ANR	4903318	IdentifierDecl	y		4903302	1					
ANR	4903319	IdentifierDeclType	int		4903302	0					
ANR	4903320	Identifier	y		4903302	1					
ANR	4903321	IdentifierDecl	code = 0		4903302	2					
ANR	4903322	IdentifierDeclType	int		4903302	0					
ANR	4903323	Identifier	code		4903302	1					
ANR	4903324	AssignmentExpression	code = 0		4903302	2		=			
ANR	4903325	Identifier	code		4903302	0					
ANR	4903326	PrimaryExpression	0		4903302	1					
ANR	4903327	IdentifierDeclStatement	int * buff_ptr = final_mask -> data ;	252:4:8422:8454	4903302	3	True				
ANR	4903328	IdentifierDecl	* buff_ptr = final_mask -> data		4903302	0					
ANR	4903329	IdentifierDeclType	int *		4903302	0					
ANR	4903330	Identifier	buff_ptr		4903302	1					
ANR	4903331	AssignmentExpression	* buff_ptr = final_mask -> data		4903302	2		=			
ANR	4903332	Identifier	buff_ptr		4903302	0					
ANR	4903333	PtrMemberAccess	final_mask -> data		4903302	1					
ANR	4903334	Identifier	final_mask		4903302	0					
ANR	4903335	Identifier	data		4903302	1					
ANR	4903336	IdentifierDeclStatement	int width = final_mask -> width ;	253:4:8460:8489	4903302	4	True				
ANR	4903337	IdentifierDecl	width = final_mask -> width		4903302	0					
ANR	4903338	IdentifierDeclType	int		4903302	0					
ANR	4903339	Identifier	width		4903302	1					
ANR	4903340	AssignmentExpression	width = final_mask -> width		4903302	2		=			
ANR	4903341	Identifier	width		4903302	0					
ANR	4903342	PtrMemberAccess	final_mask -> width		4903302	1					
ANR	4903343	Identifier	final_mask		4903302	0					
ANR	4903344	Identifier	width		4903302	1					
ANR	4903345	IdentifierDeclStatement	int height = final_mask -> height ;	254:4:8495:8526	4903302	5	True				
ANR	4903346	IdentifierDecl	height = final_mask -> height		4903302	0					
ANR	4903347	IdentifierDeclType	int		4903302	0					
ANR	4903348	Identifier	height		4903302	1					
ANR	4903349	AssignmentExpression	height = final_mask -> height		4903302	2		=			
ANR	4903350	Identifier	height		4903302	0					
ANR	4903351	PtrMemberAccess	final_mask -> height		4903302	1					
ANR	4903352	Identifier	final_mask		4903302	0					
ANR	4903353	Identifier	height		4903302	1					
ANR	4903354	IdentifierDeclStatement	byte data ;	255:4:8532:8541	4903302	6	True				
ANR	4903355	IdentifierDecl	data		4903302	0					
ANR	4903356	IdentifierDeclType	byte		4903302	0					
ANR	4903357	Identifier	data		4903302	1					
ANR	4903358	IdentifierDeclStatement	unsigned short data_short ;	256:4:8547:8572	4903302	7	True				
ANR	4903359	IdentifierDecl	data_short		4903302	0					
ANR	4903360	IdentifierDeclType	unsigned short		4903302	0					
ANR	4903361	Identifier	data_short		4903302	1					
ANR	4903362	IdentifierDeclStatement	output_format_type output_format = params . output_format ;	257:4:8578:8633	4903302	8	True				
ANR	4903363	IdentifierDecl	output_format = params . output_format		4903302	0					
ANR	4903364	IdentifierDeclType	output_format_type		4903302	0					
ANR	4903365	Identifier	output_format		4903302	1					
ANR	4903366	AssignmentExpression	output_format = params . output_format		4903302	2		=			
ANR	4903367	Identifier	output_format		4903302	0					
ANR	4903368	MemberAccess	params . output_format		4903302	1					
ANR	4903369	Identifier	params		4903302	0					
ANR	4903370	Identifier	output_format		4903302	1					
ANR	4903371	IdentifierDeclStatement	"char * output_extension = ( output_format == OUTPUT_PS ) ? ""ps"" : ( ( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) ) ) ;"	258:4:8639:8844	4903302	9	True				
ANR	4903372	IdentifierDecl	"* output_extension = ( output_format == OUTPUT_PS ) ? ""ps"" : ( ( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) ) )"		4903302	0					
ANR	4903373	IdentifierDeclType	char *		4903302	0					
ANR	4903374	Identifier	output_extension		4903302	1					
ANR	4903375	AssignmentExpression	"* output_extension = ( output_format == OUTPUT_PS ) ? ""ps"" : ( ( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) ) )"		4903302	2		=			
ANR	4903376	Identifier	output_extension		4903302	0					
ANR	4903377	ConditionalExpression	"( output_format == OUTPUT_PS ) ? ""ps"" : ( ( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) ) )"		4903302	1					
ANR	4903378	Condition	output_format == OUTPUT_PS		4903302	0					
ANR	4903379	EqualityExpression	output_format == OUTPUT_PS		4903302	0		==			
ANR	4903380	Identifier	output_format		4903302	0					
ANR	4903381	Identifier	OUTPUT_PS		4903302	1					
ANR	4903382	PrimaryExpression	"""ps"""		4903302	1					
ANR	4903383	ConditionalExpression	"( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) )"		4903302	2					
ANR	4903384	Condition	output_format == OUTPUT_PPM		4903302	0					
ANR	4903385	EqualityExpression	output_format == OUTPUT_PPM		4903302	0		==			
ANR	4903386	Identifier	output_format		4903302	0					
ANR	4903387	Identifier	OUTPUT_PPM		4903302	1					
ANR	4903388	PrimaryExpression	"""ppm"""		4903302	1					
ANR	4903389	ConditionalExpression	"output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"""		4903302	2					
ANR	4903390	Condition	output_format == OUTPUT_RAW16		4903302	0					
ANR	4903391	EqualityExpression	output_format == OUTPUT_RAW16		4903302	0		==			
ANR	4903392	Identifier	output_format		4903302	0					
ANR	4903393	Identifier	OUTPUT_RAW16		4903302	1					
ANR	4903394	PrimaryExpression	"""16.raw"""		4903302	1					
ANR	4903395	PrimaryExpression	"""raw"""		4903302	2					
ANR	4903396	IfStatement	if ( output_format == OUTPUT_TOS )		4903302	10					
ANR	4903397	Condition	output_format == OUTPUT_TOS	262:8:8855:8881	4903302	0	True				
ANR	4903398	EqualityExpression	output_format == OUTPUT_TOS		4903302	0		==			
ANR	4903399	Identifier	output_format		4903302	0					
ANR	4903400	Identifier	OUTPUT_TOS		4903302	1					
ANR	4903401	CompoundStatement		15:37:553:553	4903302	1					
ANR	4903402	ExpressionStatement	code = htsc_save_tos ( final_mask )	265:8:8987:9019	4903302	0	True				
ANR	4903403	AssignmentExpression	code = htsc_save_tos ( final_mask )		4903302	0		=			
ANR	4903404	Identifier	code		4903302	0					
ANR	4903405	CallExpression	htsc_save_tos ( final_mask )		4903302	1					
ANR	4903406	Callee	htsc_save_tos		4903302	0					
ANR	4903407	Identifier	htsc_save_tos		4903302	0					
ANR	4903408	ArgumentList	final_mask		4903302	1					
ANR	4903409	Argument	final_mask		4903302	0					
ANR	4903410	Identifier	final_mask		4903302	0					
ANR	4903411	ElseStatement	else		4903302	0					
ANR	4903412	CompoundStatement		19:11:701:701	4903302	0					
ANR	4903413	IfStatement	if ( use_holladay_grid )		4903302	0					
ANR	4903414	Condition	use_holladay_grid	267:12:9046:9062	4903302	0	True				
ANR	4903415	Identifier	use_holladay_grid		4903302	0					
ANR	4903416	CompoundStatement		20:31:734:734	4903302	1					
ANR	4903417	ExpressionStatement	"snprintf ( full_file_name , FULL_FILE_NAME_LENGTH , ""Screen_Holladay_Shift%d_%dx%d.%s"" , S , width , height , output_extension )"	268:12:9079:9218	4903302	0	True				
ANR	4903418	CallExpression	"snprintf ( full_file_name , FULL_FILE_NAME_LENGTH , ""Screen_Holladay_Shift%d_%dx%d.%s"" , S , width , height , output_extension )"		4903302	0					
ANR	4903419	Callee	snprintf		4903302	0					
ANR	4903420	Identifier	snprintf		4903302	0					
ANR	4903421	ArgumentList	full_file_name		4903302	1					
ANR	4903422	Argument	full_file_name		4903302	0					
ANR	4903423	Identifier	full_file_name		4903302	0					
ANR	4903424	Argument	FULL_FILE_NAME_LENGTH		4903302	1					
ANR	4903425	Identifier	FULL_FILE_NAME_LENGTH		4903302	0					
ANR	4903426	Argument	"""Screen_Holladay_Shift%d_%dx%d.%s"""		4903302	2					
ANR	4903427	PrimaryExpression	"""Screen_Holladay_Shift%d_%dx%d.%s"""		4903302	0					
ANR	4903428	Argument	S		4903302	3					
ANR	4903429	Identifier	S		4903302	0					
ANR	4903430	Argument	width		4903302	4					
ANR	4903431	Identifier	width		4903302	0					
ANR	4903432	Argument	height		4903302	5					
ANR	4903433	Identifier	height		4903302	0					
ANR	4903434	Argument	output_extension		4903302	6					
ANR	4903435	Identifier	output_extension		4903302	0					
ANR	4903436	ElseStatement	else		4903302	0					
ANR	4903437	CompoundStatement		23:15:904:904	4903302	0					
ANR	4903438	ExpressionStatement	"snprintf ( full_file_name , FULL_FILE_NAME_LENGTH , ""Screen_Dithered_%dx%d.%s"" , width , height , output_extension )"	271:12:9249:9375	4903302	0	True				
ANR	4903439	CallExpression	"snprintf ( full_file_name , FULL_FILE_NAME_LENGTH , ""Screen_Dithered_%dx%d.%s"" , width , height , output_extension )"		4903302	0					
ANR	4903440	Callee	snprintf		4903302	0					
ANR	4903441	Identifier	snprintf		4903302	0					
ANR	4903442	ArgumentList	full_file_name		4903302	1					
ANR	4903443	Argument	full_file_name		4903302	0					
ANR	4903444	Identifier	full_file_name		4903302	0					
ANR	4903445	Argument	FULL_FILE_NAME_LENGTH		4903302	1					
ANR	4903446	Identifier	FULL_FILE_NAME_LENGTH		4903302	0					
ANR	4903447	Argument	"""Screen_Dithered_%dx%d.%s"""		4903302	2					
ANR	4903448	PrimaryExpression	"""Screen_Dithered_%dx%d.%s"""		4903302	0					
ANR	4903449	Argument	width		4903302	3					
ANR	4903450	Identifier	width		4903302	0					
ANR	4903451	Argument	height		4903302	4					
ANR	4903452	Identifier	height		4903302	0					
ANR	4903453	Argument	output_extension		4903302	5					
ANR	4903454	Identifier	output_extension		4903302	0					
ANR	4903455	ExpressionStatement	"fid = fopen ( full_file_name , ""wb"" )"	274:8:9395:9427	4903302	1	True				
ANR	4903456	AssignmentExpression	"fid = fopen ( full_file_name , ""wb"" )"		4903302	0		=			
ANR	4903457	Identifier	fid		4903302	0					
ANR	4903458	CallExpression	"fopen ( full_file_name , ""wb"" )"		4903302	1					
ANR	4903459	Callee	fopen		4903302	0					
ANR	4903460	Identifier	fopen		4903302	0					
ANR	4903461	ArgumentList	full_file_name		4903302	1					
ANR	4903462	Argument	full_file_name		4903302	0					
ANR	4903463	Identifier	full_file_name		4903302	0					
ANR	4903464	Argument	"""wb"""		4903302	1					
ANR	4903465	PrimaryExpression	"""wb"""		4903302	0					
ANR	4903466	IfStatement	if ( output_format == OUTPUT_PPM )		4903302	2					
ANR	4903467	Condition	output_format == OUTPUT_PPM	276:12:9442:9468	4903302	0	True				
ANR	4903468	EqualityExpression	output_format == OUTPUT_PPM		4903302	0		==			
ANR	4903469	Identifier	output_format		4903302	0					
ANR	4903470	Identifier	OUTPUT_PPM		4903302	1					
ANR	4903471	Statement	fprintf	277:12:9483:9489	4903302	1	True				
ANR	4903472	Statement	(	277:19:9490:9490	4903302	3	True				
ANR	4903473	Statement	fid	277:20:9491:9493	4903302	4	True				
ANR	4903474	Statement	","	277:23:9494:9494	4903302	5	True				
ANR	4903475	Statement	"""P5\\n"""	277:25:9496:9501	4903302	6	True				
ANR	4903476	Statement	"""# Halftone threshold array, %s, [%d, %d], S=%d\\n"""	278:20:9523:9572	4903302	7	True				
ANR	4903477	Statement	"""%d %d\\n"""	279:20:9594:9602	4903302	8	True				
ANR	4903478	Statement	"""255\\n"""	280:20:9624:9630	4903302	9	True				
ANR	4903479	Statement	","	280:27:9631:9631	4903302	10	True				
ANR	4903480	Statement	use_holladay_grid	281:20:9653:9669	4903302	11	True				
ANR	4903481	Statement	?	281:38:9671:9671	4903302	12	True				
ANR	4903482	Statement	"""Holladay_Shift"""	281:40:9673:9688	4903302	13	True				
ANR	4903483	Statement	:	281:57:9690:9690	4903302	14	True				
ANR	4903484	Statement	"""Dithered"""	281:59:9692:9701	4903302	15	True				
ANR	4903485	Statement	","	281:69:9702:9702	4903302	16	True				
ANR	4903486	Statement	width	281:71:9704:9708	4903302	17	True				
ANR	4903487	Statement	","	281:76:9709:9709	4903302	18	True				
ANR	4903488	Statement	height	281:78:9711:9716	4903302	19	True				
ANR	4903489	Statement	","	281:84:9717:9717	4903302	20	True				
ANR	4903490	Statement	S	282:20:9739:9739	4903302	21	True				
ANR	4903491	Statement	","	282:21:9740:9740	4903302	22	True				
ANR	4903492	Statement	width	282:23:9742:9746	4903302	23	True				
ANR	4903493	Statement	","	282:28:9747:9747	4903302	24	True				
ANR	4903494	Statement	height	282:30:9749:9754	4903302	25	True				
ANR	4903495	Statement	)	282:36:9755:9755	4903302	26	True				
ANR	4903496	ExpressionStatement		282:37:9756:9756	4903302	27	True				
ANR	4903497	IfStatement	if ( output_format != OUTPUT_PS )		4903302	28					
ANR	4903498	Condition	output_format != OUTPUT_PS	283:12:9770:9795	4903302	0	True				
ANR	4903499	EqualityExpression	output_format != OUTPUT_PS		4903302	0		!=			
ANR	4903500	Identifier	output_format		4903302	0					
ANR	4903501	Identifier	OUTPUT_PS		4903302	1					
ANR	4903502	CompoundStatement		36:40:1467:1467	4903302	1					
ANR	4903503	IfStatement	if ( output_format == OUTPUT_RAW || output_format == OUTPUT_PPM )		4903302	0					
ANR	4903504	Condition	output_format == OUTPUT_RAW || output_format == OUTPUT_PPM	285:16:9885:9942	4903302	0	True				
ANR	4903505	OrExpression	output_format == OUTPUT_RAW || output_format == OUTPUT_PPM		4903302	0		||			
ANR	4903506	EqualityExpression	output_format == OUTPUT_RAW		4903302	0		==			
ANR	4903507	Identifier	output_format		4903302	0					
ANR	4903508	Identifier	OUTPUT_RAW		4903302	1					
ANR	4903509	EqualityExpression	output_format == OUTPUT_PPM		4903302	1		==			
ANR	4903510	Identifier	output_format		4903302	0					
ANR	4903511	Identifier	OUTPUT_PPM		4903302	1					
ANR	4903512	CompoundStatement		38:76:1614:1614	4903302	1					
ANR	4903513	ForStatement	for ( y = 0 ; y < height ; y ++ )		4903302	0					
ANR	4903514	ForInit	y = 0 ;	286:21:9968:9973	4903302	0	True				
ANR	4903515	AssignmentExpression	y = 0		4903302	0		=			
ANR	4903516	Identifier	y		4903302	0					
ANR	4903517	PrimaryExpression	0		4903302	1					
ANR	4903518	Condition	y < height	286:28:9975:9984	4903302	1	True				
ANR	4903519	RelationalExpression	y < height		4903302	0		<			
ANR	4903520	Identifier	y		4903302	0					
ANR	4903521	Identifier	height		4903302	1					
ANR	4903522	PostIncDecOperationExpression	y ++	286:40:9987:9989	4903302	2	True				
ANR	4903523	Identifier	y		4903302	0					
ANR	4903524	IncDec	++		4903302	1					
ANR	4903525	CompoundStatement		39:45:1661:1661	4903302	3					
ANR	4903526	ForStatement	for ( x = 0 ; x < width ; x ++ )		4903302	0					
ANR	4903527	ForInit	x = 0 ;	287:26:10020:10025	4903302	0	True				
ANR	4903528	AssignmentExpression	x = 0		4903302	0		=			
ANR	4903529	Identifier	x		4903302	0					
ANR	4903530	PrimaryExpression	0		4903302	1					
ANR	4903531	Condition	x < width	287:33:10027:10035	4903302	1	True				
ANR	4903532	RelationalExpression	x < width		4903302	0		<			
ANR	4903533	Identifier	x		4903302	0					
ANR	4903534	Identifier	width		4903302	1					
ANR	4903535	PostIncDecOperationExpression	x ++	287:44:10038:10040	4903302	2	True				
ANR	4903536	Identifier	x		4903302	0					
ANR	4903537	IncDec	++		4903302	1					
ANR	4903538	CompoundStatement		40:50:1713:1713	4903302	3					
ANR	4903539	ExpressionStatement	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )	288:24:10070:10120	4903302	0	True				
ANR	4903540	AssignmentExpression	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )		4903302	0		=			
ANR	4903541	Identifier	data_short		4903302	0					
ANR	4903542	CastExpression	( unsigned short ) ( * buff_ptr & 0xffff )		4903302	1					
ANR	4903543	CastTarget	unsigned short		4903302	0					
ANR	4903544	BitAndExpression	* buff_ptr & 0xffff		4903302	1		&			
ANR	4903545	UnaryOperationExpression	* buff_ptr		4903302	0					
ANR	4903546	UnaryOperator	*		4903302	0					
ANR	4903547	Identifier	buff_ptr		4903302	1					
ANR	4903548	PrimaryExpression	0xffff		4903302	1					
ANR	4903549	ExpressionStatement	data_short = ROUND ( ( double ) data_short * 255.0 / MAXVAL )	289:24:10146:10202	4903302	1	True				
ANR	4903550	AssignmentExpression	data_short = ROUND ( ( double ) data_short * 255.0 / MAXVAL )		4903302	0		=			
ANR	4903551	Identifier	data_short		4903302	0					
ANR	4903552	CallExpression	ROUND ( ( double ) data_short * 255.0 / MAXVAL )		4903302	1					
ANR	4903553	Callee	ROUND		4903302	0					
ANR	4903554	Identifier	ROUND		4903302	0					
ANR	4903555	ArgumentList	( double ) data_short * 255.0 / MAXVAL		4903302	1					
ANR	4903556	Argument	( double ) data_short * 255.0 / MAXVAL		4903302	0					
ANR	4903557	MultiplicativeExpression	( double ) data_short * 255.0 / MAXVAL		4903302	0		*			
ANR	4903558	CastExpression	( double ) data_short		4903302	0					
ANR	4903559	CastTarget	double		4903302	0					
ANR	4903560	Identifier	data_short		4903302	1					
ANR	4903561	MultiplicativeExpression	255.0 / MAXVAL		4903302	1		/			
ANR	4903562	PrimaryExpression	255.0		4903302	0					
ANR	4903563	Identifier	MAXVAL		4903302	1					
ANR	4903564	IfStatement	if ( data_short > 255 )		4903302	2					
ANR	4903565	Condition	data_short > 255	290:28:10232:10247	4903302	0	True				
ANR	4903566	RelationalExpression	data_short > 255		4903302	0		>			
ANR	4903567	Identifier	data_short		4903302	0					
ANR	4903568	PrimaryExpression	255		4903302	1					
ANR	4903569	ExpressionStatement	data_short = 255	290:46:10250:10266	4903302	1	True				
ANR	4903570	AssignmentExpression	data_short = 255		4903302	0		=			
ANR	4903571	Identifier	data_short		4903302	0					
ANR	4903572	PrimaryExpression	255		4903302	1					
ANR	4903573	ExpressionStatement	data = ( byte ) ( data_short & 0xff )	291:24:10292:10325	4903302	3	True				
ANR	4903574	AssignmentExpression	data = ( byte ) ( data_short & 0xff )		4903302	0		=			
ANR	4903575	Identifier	data		4903302	0					
ANR	4903576	CastExpression	( byte ) ( data_short & 0xff )		4903302	1					
ANR	4903577	CastTarget	byte		4903302	0					
ANR	4903578	BitAndExpression	data_short & 0xff		4903302	1		&			
ANR	4903579	Identifier	data_short		4903302	0					
ANR	4903580	PrimaryExpression	0xff		4903302	1					
ANR	4903581	ExpressionStatement	"fwrite ( & data , sizeof ( byte ) , 1 , fid )"	292:24:10351:10386	4903302	4	True				
ANR	4903582	CallExpression	"fwrite ( & data , sizeof ( byte ) , 1 , fid )"		4903302	0					
ANR	4903583	Callee	fwrite		4903302	0					
ANR	4903584	Identifier	fwrite		4903302	0					
ANR	4903585	ArgumentList	& data		4903302	1					
ANR	4903586	Argument	& data		4903302	0					
ANR	4903587	UnaryOperationExpression	& data		4903302	0					
ANR	4903588	UnaryOperator	&		4903302	0					
ANR	4903589	Identifier	data		4903302	1					
ANR	4903590	Argument	sizeof ( byte )		4903302	1					
ANR	4903591	SizeofExpression	sizeof ( byte )		4903302	0					
ANR	4903592	Sizeof	sizeof		4903302	0					
ANR	4903593	SizeofOperand	byte		4903302	1					
ANR	4903594	Argument	1		4903302	2					
ANR	4903595	PrimaryExpression	1		4903302	0					
ANR	4903596	Argument	fid		4903302	3					
ANR	4903597	Identifier	fid		4903302	0					
ANR	4903598	ExpressionStatement	buff_ptr ++	293:24:10412:10422	4903302	5	True				
ANR	4903599	PostIncDecOperationExpression	buff_ptr ++		4903302	0					
ANR	4903600	Identifier	buff_ptr		4903302	0					
ANR	4903601	IncDec	++		4903302	1					
ANR	4903602	ElseStatement	else		4903302	0					
ANR	4903603	CompoundStatement		49:19:2152:2152	4903302	0					
ANR	4903604	ForStatement	for ( y = 0 ; y < height ; y ++ )		4903302	0					
ANR	4903605	ForInit	y = 0 ;	297:21:10523:10528	4903302	0	True				
ANR	4903606	AssignmentExpression	y = 0		4903302	0		=			
ANR	4903607	Identifier	y		4903302	0					
ANR	4903608	PrimaryExpression	0		4903302	1					
ANR	4903609	Condition	y < height	297:28:10530:10539	4903302	1	True				
ANR	4903610	RelationalExpression	y < height		4903302	0		<			
ANR	4903611	Identifier	y		4903302	0					
ANR	4903612	Identifier	height		4903302	1					
ANR	4903613	PostIncDecOperationExpression	y ++	297:40:10542:10544	4903302	2	True				
ANR	4903614	Identifier	y		4903302	0					
ANR	4903615	IncDec	++		4903302	1					
ANR	4903616	CompoundStatement		50:45:2216:2216	4903302	3					
ANR	4903617	ForStatement	for ( x = 0 ; x < width ; x ++ )		4903302	0					
ANR	4903618	ForInit	x = 0 ;	298:26:10575:10580	4903302	0	True				
ANR	4903619	AssignmentExpression	x = 0		4903302	0		=			
ANR	4903620	Identifier	x		4903302	0					
ANR	4903621	PrimaryExpression	0		4903302	1					
ANR	4903622	Condition	x < width	298:33:10582:10590	4903302	1	True				
ANR	4903623	RelationalExpression	x < width		4903302	0		<			
ANR	4903624	Identifier	x		4903302	0					
ANR	4903625	Identifier	width		4903302	1					
ANR	4903626	PostIncDecOperationExpression	x ++	298:44:10593:10595	4903302	2	True				
ANR	4903627	Identifier	x		4903302	0					
ANR	4903628	IncDec	++		4903302	1					
ANR	4903629	CompoundStatement		51:50:2268:2268	4903302	3					
ANR	4903630	ExpressionStatement	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )	299:24:10625:10675	4903302	0	True				
ANR	4903631	AssignmentExpression	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )		4903302	0		=			
ANR	4903632	Identifier	data_short		4903302	0					
ANR	4903633	CastExpression	( unsigned short ) ( * buff_ptr & 0xffff )		4903302	1					
ANR	4903634	CastTarget	unsigned short		4903302	0					
ANR	4903635	BitAndExpression	* buff_ptr & 0xffff		4903302	1		&			
ANR	4903636	UnaryOperationExpression	* buff_ptr		4903302	0					
ANR	4903637	UnaryOperator	*		4903302	0					
ANR	4903638	Identifier	buff_ptr		4903302	1					
ANR	4903639	PrimaryExpression	0xffff		4903302	1					
ANR	4903640	ExpressionStatement	"fwrite ( & data_short , sizeof ( short ) , 1 , fid )"	300:24:10701:10743	4903302	1	True				
ANR	4903641	CallExpression	"fwrite ( & data_short , sizeof ( short ) , 1 , fid )"		4903302	0					
ANR	4903642	Callee	fwrite		4903302	0					
ANR	4903643	Identifier	fwrite		4903302	0					
ANR	4903644	ArgumentList	& data_short		4903302	1					
ANR	4903645	Argument	& data_short		4903302	0					
ANR	4903646	UnaryOperationExpression	& data_short		4903302	0					
ANR	4903647	UnaryOperator	&		4903302	0					
ANR	4903648	Identifier	data_short		4903302	1					
ANR	4903649	Argument	sizeof ( short )		4903302	1					
ANR	4903650	SizeofExpression	sizeof ( short )		4903302	0					
ANR	4903651	Sizeof	sizeof		4903302	0					
ANR	4903652	SizeofOperand	short		4903302	1					
ANR	4903653	Argument	1		4903302	2					
ANR	4903654	PrimaryExpression	1		4903302	0					
ANR	4903655	Argument	fid		4903302	3					
ANR	4903656	Identifier	fid		4903302	0					
ANR	4903657	ExpressionStatement	buff_ptr ++	301:24:10769:10779	4903302	2	True				
ANR	4903658	PostIncDecOperationExpression	buff_ptr ++		4903302	0					
ANR	4903659	Identifier	buff_ptr		4903302	0					
ANR	4903660	IncDec	++		4903302	1					
ANR	4903661	ElseStatement	else		4903302	0					
ANR	4903662	CompoundStatement		58:15:2519:2519	4903302	0					
ANR	4903663	IfStatement	if ( params . targ_quant <= 256 )		4903302	0					
ANR	4903664	Condition	params . targ_quant <= 256	306:16:10891:10914	4903302	0	True				
ANR	4903665	RelationalExpression	params . targ_quant <= 256		4903302	0		<=			
ANR	4903666	MemberAccess	params . targ_quant		4903302	0					
ANR	4903667	Identifier	params		4903302	0					
ANR	4903668	Identifier	targ_quant		4903302	1					
ANR	4903669	PrimaryExpression	256		4903302	1					
ANR	4903670	CompoundStatement		59:42:2586:2586	4903302	1					
ANR	4903671	Statement	fprintf	308:16:10993:10999	4903302	0	True				
ANR	4903672	Statement	(	308:23:11000:11000	4903302	1	True				
ANR	4903673	Statement	fid	308:24:11001:11003	4903302	2	True				
ANR	4903674	Statement	","	308:27:11004:11004	4903302	3	True				
ANR	4903675	Statement	"""%%!PS\\n"""	308:29:11006:11014	4903302	4	True				
ANR	4903676	Statement	"""<< /HalftoneType 3\\n"""	309:24:11040:11061	4903302	5	True				
ANR	4903677	Statement	"""   /Width  %d\\n"""	310:24:11087:11103	4903302	6	True				
ANR	4903678	Statement	"""   /Height %d\\n"""	311:24:11129:11145	4903302	7	True				
ANR	4903679	Statement	"""   /Thresholds <\\n"""	312:24:11171:11190	4903302	8	True				
ANR	4903680	Statement	","	312:44:11191:11191	4903302	9	True				
ANR	4903681	Statement	width	313:24:11217:11221	4903302	10	True				
ANR	4903682	Statement	","	313:29:11222:11222	4903302	11	True				
ANR	4903683	Statement	height	313:31:11224:11229	4903302	12	True				
ANR	4903684	Statement	)	313:37:11230:11230	4903302	13	True				
ANR	4903685	ExpressionStatement		313:38:11231:11231	4903302	14	True				
ANR	4903686	ForStatement	for ( y = 0 ; y < height ; y ++ )		4903302	15					
ANR	4903687	ForInit	y = 0 ;	315:21:11255:11260	4903302	0	True				
ANR	4903688	AssignmentExpression	y = 0		4903302	0		=			
ANR	4903689	Identifier	y		4903302	0					
ANR	4903690	PrimaryExpression	0		4903302	1					
ANR	4903691	Condition	y < height	315:28:11262:11271	4903302	1	True				
ANR	4903692	RelationalExpression	y < height		4903302	0		<			
ANR	4903693	Identifier	y		4903302	0					
ANR	4903694	Identifier	height		4903302	1					
ANR	4903695	PostIncDecOperationExpression	y ++	315:40:11274:11276	4903302	2	True				
ANR	4903696	Identifier	y		4903302	0					
ANR	4903697	IncDec	++		4903302	1					
ANR	4903698	CompoundStatement		68:45:2948:2948	4903302	3					
ANR	4903699	ForStatement	for ( x = 0 ; x < width ; x ++ )		4903302	0					
ANR	4903700	ForInit	x = 0 ;	316:26:11307:11312	4903302	0	True				
ANR	4903701	AssignmentExpression	x = 0		4903302	0		=			
ANR	4903702	Identifier	x		4903302	0					
ANR	4903703	PrimaryExpression	0		4903302	1					
ANR	4903704	Condition	x < width	316:33:11314:11322	4903302	1	True				
ANR	4903705	RelationalExpression	x < width		4903302	0		<			
ANR	4903706	Identifier	x		4903302	0					
ANR	4903707	Identifier	width		4903302	1					
ANR	4903708	PostIncDecOperationExpression	x ++	316:44:11325:11327	4903302	2	True				
ANR	4903709	Identifier	x		4903302	0					
ANR	4903710	IncDec	++		4903302	1					
ANR	4903711	CompoundStatement		69:50:3000:3000	4903302	3					
ANR	4903712	ExpressionStatement	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )	317:24:11357:11407	4903302	0	True				
ANR	4903713	AssignmentExpression	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )		4903302	0		=			
ANR	4903714	Identifier	data_short		4903302	0					
ANR	4903715	CastExpression	( unsigned short ) ( * buff_ptr & 0xffff )		4903302	1					
ANR	4903716	CastTarget	unsigned short		4903302	0					
ANR	4903717	BitAndExpression	* buff_ptr & 0xffff		4903302	1		&			
ANR	4903718	UnaryOperationExpression	* buff_ptr		4903302	0					
ANR	4903719	UnaryOperator	*		4903302	0					
ANR	4903720	Identifier	buff_ptr		4903302	1					
ANR	4903721	PrimaryExpression	0xffff		4903302	1					
ANR	4903722	ExpressionStatement	data_short = ROUND ( ( double ) data_short * 255.0 / MAXVAL )	318:24:11433:11489	4903302	1	True				
ANR	4903723	AssignmentExpression	data_short = ROUND ( ( double ) data_short * 255.0 / MAXVAL )		4903302	0		=			
ANR	4903724	Identifier	data_short		4903302	0					
ANR	4903725	CallExpression	ROUND ( ( double ) data_short * 255.0 / MAXVAL )		4903302	1					
ANR	4903726	Callee	ROUND		4903302	0					
ANR	4903727	Identifier	ROUND		4903302	0					
ANR	4903728	ArgumentList	( double ) data_short * 255.0 / MAXVAL		4903302	1					
ANR	4903729	Argument	( double ) data_short * 255.0 / MAXVAL		4903302	0					
ANR	4903730	MultiplicativeExpression	( double ) data_short * 255.0 / MAXVAL		4903302	0		*			
ANR	4903731	CastExpression	( double ) data_short		4903302	0					
ANR	4903732	CastTarget	double		4903302	0					
ANR	4903733	Identifier	data_short		4903302	1					
ANR	4903734	MultiplicativeExpression	255.0 / MAXVAL		4903302	1		/			
ANR	4903735	PrimaryExpression	255.0		4903302	0					
ANR	4903736	Identifier	MAXVAL		4903302	1					
ANR	4903737	IfStatement	if ( data_short > 255 )		4903302	2					
ANR	4903738	Condition	data_short > 255	319:28:11519:11534	4903302	0	True				
ANR	4903739	RelationalExpression	data_short > 255		4903302	0		>			
ANR	4903740	Identifier	data_short		4903302	0					
ANR	4903741	PrimaryExpression	255		4903302	1					
ANR	4903742	ExpressionStatement	data_short = 255	319:46:11537:11553	4903302	1	True				
ANR	4903743	AssignmentExpression	data_short = 255		4903302	0		=			
ANR	4903744	Identifier	data_short		4903302	0					
ANR	4903745	PrimaryExpression	255		4903302	1					
ANR	4903746	ExpressionStatement	data = ( byte ) ( data_short & 0xff )	320:24:11579:11612	4903302	3	True				
ANR	4903747	AssignmentExpression	data = ( byte ) ( data_short & 0xff )		4903302	0		=			
ANR	4903748	Identifier	data		4903302	0					
ANR	4903749	CastExpression	( byte ) ( data_short & 0xff )		4903302	1					
ANR	4903750	CastTarget	byte		4903302	0					
ANR	4903751	BitAndExpression	data_short & 0xff		4903302	1		&			
ANR	4903752	Identifier	data_short		4903302	0					
ANR	4903753	PrimaryExpression	0xff		4903302	1					
ANR	4903754	ExpressionStatement	"fprintf ( fid , ""%02x"" , data )"	321:24:11638:11664	4903302	4	True				
ANR	4903755	CallExpression	"fprintf ( fid , ""%02x"" , data )"		4903302	0					
ANR	4903756	Callee	fprintf		4903302	0					
ANR	4903757	Identifier	fprintf		4903302	0					
ANR	4903758	ArgumentList	fid		4903302	1					
ANR	4903759	Argument	fid		4903302	0					
ANR	4903760	Identifier	fid		4903302	0					
ANR	4903761	Argument	"""%02x"""		4903302	1					
ANR	4903762	PrimaryExpression	"""%02x"""		4903302	0					
ANR	4903763	Argument	data		4903302	2					
ANR	4903764	Identifier	data		4903302	0					
ANR	4903765	ExpressionStatement	buff_ptr ++	322:24:11690:11700	4903302	5	True				
ANR	4903766	PostIncDecOperationExpression	buff_ptr ++		4903302	0					
ANR	4903767	Identifier	buff_ptr		4903302	0					
ANR	4903768	IncDec	++		4903302	1					
ANR	4903769	IfStatement	if ( ( x & 0x1f ) == 0x1f && ( x != ( width - 1 ) ) )		4903302	6					
ANR	4903770	Condition	( x & 0x1f ) == 0x1f && ( x != ( width - 1 ) )	323:28:11730:11769	4903302	0	True				
ANR	4903771	AndExpression	( x & 0x1f ) == 0x1f && ( x != ( width - 1 ) )		4903302	0		&&			
ANR	4903772	EqualityExpression	( x & 0x1f ) == 0x1f		4903302	0		==			
ANR	4903773	BitAndExpression	x & 0x1f		4903302	0		&			
ANR	4903774	Identifier	x		4903302	0					
ANR	4903775	PrimaryExpression	0x1f		4903302	1					
ANR	4903776	PrimaryExpression	0x1f		4903302	1					
ANR	4903777	EqualityExpression	x != ( width - 1 )		4903302	1		!=			
ANR	4903778	Identifier	x		4903302	0					
ANR	4903779	AdditiveExpression	width - 1		4903302	1		-			
ANR	4903780	Identifier	width		4903302	0					
ANR	4903781	PrimaryExpression	1		4903302	1					
ANR	4903782	ExpressionStatement	"fprintf ( fid , ""\\n"" )"	324:28:11800:11818	4903302	1	True				
ANR	4903783	CallExpression	"fprintf ( fid , ""\\n"" )"		4903302	0					
ANR	4903784	Callee	fprintf		4903302	0					
ANR	4903785	Identifier	fprintf		4903302	0					
ANR	4903786	ArgumentList	fid		4903302	1					
ANR	4903787	Argument	fid		4903302	0					
ANR	4903788	Identifier	fid		4903302	0					
ANR	4903789	Argument	"""\\n"""		4903302	1					
ANR	4903790	PrimaryExpression	"""\\n"""		4903302	0					
ANR	4903791	ExpressionStatement	"fprintf ( fid , ""\\n"" )"	326:20:11862:11880	4903302	1	True				
ANR	4903792	CallExpression	"fprintf ( fid , ""\\n"" )"		4903302	0					
ANR	4903793	Callee	fprintf		4903302	0					
ANR	4903794	Identifier	fprintf		4903302	0					
ANR	4903795	ArgumentList	fid		4903302	1					
ANR	4903796	Argument	fid		4903302	0					
ANR	4903797	Identifier	fid		4903302	0					
ANR	4903798	Argument	"""\\n"""		4903302	1					
ANR	4903799	PrimaryExpression	"""\\n"""		4903302	0					
ANR	4903800	Statement	fprintf	328:16:11916:11922	4903302	16	True				
ANR	4903801	Statement	(	328:23:11923:11923	4903302	17	True				
ANR	4903802	Statement	fid	328:24:11924:11926	4903302	18	True				
ANR	4903803	Statement	","	328:27:11927:11927	4903302	19	True				
ANR	4903804	Statement	"""   >\\n"""	328:29:11929:11936	4903302	20	True				
ANR	4903805	Statement	""">>\\n"""	329:24:11962:11967	4903302	21	True				
ANR	4903806	Statement	)	330:24:11993:11993	4903302	22	True				
ANR	4903807	ExpressionStatement		330:25:11994:11994	4903302	23	True				
ANR	4903808	ElseStatement	else		4903302	0					
ANR	4903809	CompoundStatement		84:19:3684:3684	4903302	0					
ANR	4903810	Statement	fprintf	333:16:12107:12113	4903302	0	True				
ANR	4903811	Statement	(	333:23:12114:12114	4903302	1	True				
ANR	4903812	Statement	fid	333:24:12115:12117	4903302	2	True				
ANR	4903813	Statement	","	333:27:12118:12118	4903302	3	True				
ANR	4903814	Statement	"""%%!PS\\n"""	333:29:12120:12128	4903302	4	True				
ANR	4903815	Statement	"""%% Create a 'filter' from local hex data\\n"""	334:24:12154:12197	4903302	5	True				
ANR	4903816	Statement	"""{ currentfile /ASCIIHexDecode filter /ReusableStreamDecode filter } exec\\n"""	335:24:12223:12298	4903302	6	True				
ANR	4903817	Statement	)	335:100:12299:12299	4903302	7	True				
ANR	4903818	ExpressionStatement		335:101:12300:12300	4903302	8	True				
ANR	4903819	ForStatement	for ( y = 0 ; y < height ; y ++ )		4903302	9					
ANR	4903820	ForInit	y = 0 ;	337:21:12399:12404	4903302	0	True				
ANR	4903821	AssignmentExpression	y = 0		4903302	0		=			
ANR	4903822	Identifier	y		4903302	0					
ANR	4903823	PrimaryExpression	0		4903302	1					
ANR	4903824	Condition	y < height	337:28:12406:12415	4903302	1	True				
ANR	4903825	RelationalExpression	y < height		4903302	0		<			
ANR	4903826	Identifier	y		4903302	0					
ANR	4903827	Identifier	height		4903302	1					
ANR	4903828	PostIncDecOperationExpression	y ++	337:40:12418:12420	4903302	2	True				
ANR	4903829	Identifier	y		4903302	0					
ANR	4903830	IncDec	++		4903302	1					
ANR	4903831	CompoundStatement		90:45:4092:4092	4903302	3					
ANR	4903832	ForStatement	for ( x = 0 ; x < width ; x ++ )		4903302	0					
ANR	4903833	ForInit	x = 0 ;	338:26:12451:12456	4903302	0	True				
ANR	4903834	AssignmentExpression	x = 0		4903302	0		=			
ANR	4903835	Identifier	x		4903302	0					
ANR	4903836	PrimaryExpression	0		4903302	1					
ANR	4903837	Condition	x < width	338:33:12458:12466	4903302	1	True				
ANR	4903838	RelationalExpression	x < width		4903302	0		<			
ANR	4903839	Identifier	x		4903302	0					
ANR	4903840	Identifier	width		4903302	1					
ANR	4903841	PostIncDecOperationExpression	x ++	338:44:12469:12471	4903302	2	True				
ANR	4903842	Identifier	x		4903302	0					
ANR	4903843	IncDec	++		4903302	1					
ANR	4903844	CompoundStatement		91:50:4144:4144	4903302	3					
ANR	4903845	ExpressionStatement	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )	339:24:12501:12551	4903302	0	True				
ANR	4903846	AssignmentExpression	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )		4903302	0		=			
ANR	4903847	Identifier	data_short		4903302	0					
ANR	4903848	CastExpression	( unsigned short ) ( * buff_ptr & 0xffff )		4903302	1					
ANR	4903849	CastTarget	unsigned short		4903302	0					
ANR	4903850	BitAndExpression	* buff_ptr & 0xffff		4903302	1		&			
ANR	4903851	UnaryOperationExpression	* buff_ptr		4903302	0					
ANR	4903852	UnaryOperator	*		4903302	0					
ANR	4903853	Identifier	buff_ptr		4903302	1					
ANR	4903854	PrimaryExpression	0xffff		4903302	1					
ANR	4903855	ExpressionStatement	"fprintf ( fid , ""%04x"" , data_short )"	340:24:12577:12609	4903302	1	True				
ANR	4903856	CallExpression	"fprintf ( fid , ""%04x"" , data_short )"		4903302	0					
ANR	4903857	Callee	fprintf		4903302	0					
ANR	4903858	Identifier	fprintf		4903302	0					
ANR	4903859	ArgumentList	fid		4903302	1					
ANR	4903860	Argument	fid		4903302	0					
ANR	4903861	Identifier	fid		4903302	0					
ANR	4903862	Argument	"""%04x"""		4903302	1					
ANR	4903863	PrimaryExpression	"""%04x"""		4903302	0					
ANR	4903864	Argument	data_short		4903302	2					
ANR	4903865	Identifier	data_short		4903302	0					
ANR	4903866	ExpressionStatement	buff_ptr ++	341:24:12635:12645	4903302	2	True				
ANR	4903867	PostIncDecOperationExpression	buff_ptr ++		4903302	0					
ANR	4903868	Identifier	buff_ptr		4903302	0					
ANR	4903869	IncDec	++		4903302	1					
ANR	4903870	IfStatement	if ( ( x & 0xf ) == 0x1f && ( x != ( width - 1 ) ) )		4903302	3					
ANR	4903871	Condition	( x & 0xf ) == 0x1f && ( x != ( width - 1 ) )	342:28:12675:12713	4903302	0	True				
ANR	4903872	AndExpression	( x & 0xf ) == 0x1f && ( x != ( width - 1 ) )		4903302	0		&&			
ANR	4903873	EqualityExpression	( x & 0xf ) == 0x1f		4903302	0		==			
ANR	4903874	BitAndExpression	x & 0xf		4903302	0		&			
ANR	4903875	Identifier	x		4903302	0					
ANR	4903876	PrimaryExpression	0xf		4903302	1					
ANR	4903877	PrimaryExpression	0x1f		4903302	1					
ANR	4903878	EqualityExpression	x != ( width - 1 )		4903302	1		!=			
ANR	4903879	Identifier	x		4903302	0					
ANR	4903880	AdditiveExpression	width - 1		4903302	1		-			
ANR	4903881	Identifier	width		4903302	0					
ANR	4903882	PrimaryExpression	1		4903302	1					
ANR	4903883	ExpressionStatement	"fprintf ( fid , ""\\n"" )"	343:28:12744:12762	4903302	1	True				
ANR	4903884	CallExpression	"fprintf ( fid , ""\\n"" )"		4903302	0					
ANR	4903885	Callee	fprintf		4903302	0					
ANR	4903886	Identifier	fprintf		4903302	0					
ANR	4903887	ArgumentList	fid		4903302	1					
ANR	4903888	Argument	fid		4903302	0					
ANR	4903889	Identifier	fid		4903302	0					
ANR	4903890	Argument	"""\\n"""		4903302	1					
ANR	4903891	PrimaryExpression	"""\\n"""		4903302	0					
ANR	4903892	ExpressionStatement	"fprintf ( fid , ""\\n"" )"	345:20:12806:12824	4903302	1	True				
ANR	4903893	CallExpression	"fprintf ( fid , ""\\n"" )"		4903302	0					
ANR	4903894	Callee	fprintf		4903302	0					
ANR	4903895	Identifier	fprintf		4903302	0					
ANR	4903896	ArgumentList	fid		4903302	1					
ANR	4903897	Argument	fid		4903302	0					
ANR	4903898	Identifier	fid		4903302	0					
ANR	4903899	Argument	"""\\n"""		4903302	1					
ANR	4903900	PrimaryExpression	"""\\n"""		4903302	0					
ANR	4903901	ExpressionStatement	"fprintf ( fid , "">\\n"" )"	347:16:12881:12900	4903302	10	True				
ANR	4903902	CallExpression	"fprintf ( fid , "">\\n"" )"		4903302	0					
ANR	4903903	Callee	fprintf		4903302	0					
ANR	4903904	Identifier	fprintf		4903302	0					
ANR	4903905	ArgumentList	fid		4903302	1					
ANR	4903906	Argument	fid		4903302	0					
ANR	4903907	Identifier	fid		4903302	0					
ANR	4903908	Argument	""">\\n"""		4903302	1					
ANR	4903909	PrimaryExpression	""">\\n"""		4903302	0					
ANR	4903910	Statement	fprintf	348:16:12943:12949	4903302	11	True				
ANR	4903911	Statement	(	348:23:12950:12950	4903302	12	True				
ANR	4903912	Statement	fid	348:24:12951:12953	4903302	13	True				
ANR	4903913	Statement	","	348:27:12954:12954	4903302	14	True				
ANR	4903914	Statement	"""<< /Thresholds 2 index    %% file object for the 16-bit data\\n"""	349:24:12980:13043	4903302	15	True				
ANR	4903915	Statement	"""   /HalftoneType 16\\n"""	350:24:13069:13091	4903302	16	True				
ANR	4903916	Statement	"""   /Width  %d\\n"""	351:24:13117:13133	4903302	17	True				
ANR	4903917	Statement	"""   /Height %d\\n"""	352:24:13159:13175	4903302	18	True				
ANR	4903918	Statement	""">>\\n"""	353:24:13201:13206	4903302	19	True				
ANR	4903919	Statement	"""exch pop     %% discard ResuableStreamDecode file leaving the Halftone dict.\\n"""	354:24:13232:13311	4903302	20	True				
ANR	4903920	Statement	","	354:104:13312:13312	4903302	21	True				
ANR	4903921	Statement	width	355:24:13338:13342	4903302	22	True				
ANR	4903922	Statement	","	355:29:13343:13343	4903302	23	True				
ANR	4903923	Statement	height	355:31:13345:13350	4903302	24	True				
ANR	4903924	Statement	)	355:37:13351:13351	4903302	25	True				
ANR	4903925	ExpressionStatement		355:38:13352:13352	4903302	26	True				
ANR	4903926	ExpressionStatement	fclose ( fid )	358:8:13386:13397	4903302	29	True				
ANR	4903927	CallExpression	fclose ( fid )		4903302	0					
ANR	4903928	Callee	fclose		4903302	0					
ANR	4903929	Identifier	fclose		4903302	0					
ANR	4903930	ArgumentList	fid		4903302	1					
ANR	4903931	Argument	fid		4903302	0					
ANR	4903932	Identifier	fid		4903302	0					
ANR	4903933	ReturnStatement	return code ;	360:4:13409:13420	4903302	11	True				
ANR	4903934	Identifier	code		4903302	0					
ANR	4903935	ReturnType	static int		4903302	1					
ANR	4903936	Identifier	htsc_save_screen		4903302	2					
ANR	4903937	ParameterList	"htsc_dig_grid_t * final_mask , bool use_holladay_grid , int S , htsc_param_t params"		4903302	3					
ANR	4903938	Parameter	htsc_dig_grid_t * final_mask	246:17:8233:8259	4903302	0	True				
ANR	4903939	ParameterType	htsc_dig_grid_t *		4903302	0					
ANR	4903940	Identifier	final_mask		4903302	1					
ANR	4903941	Parameter	bool use_holladay_grid	246:46:8262:8283	4903302	1	True				
ANR	4903942	ParameterType	bool		4903302	0					
ANR	4903943	Identifier	use_holladay_grid		4903302	1					
ANR	4903944	Parameter	int S	246:70:8286:8290	4903302	2	True				
ANR	4903945	ParameterType	int		4903302	0					
ANR	4903946	Identifier	S		4903302	1					
ANR	4903947	Parameter	htsc_param_t params	247:16:8309:8327	4903302	3	True				
ANR	4903948	ParameterType	htsc_param_t		4903302	0					
ANR	4903949	Identifier	params		4903302	1					
ANR	4903950	CFGEntryNode	ENTRY		4903302		True				
ANR	4903951	CFGExitNode	EXIT		4903302		True				
ANR	4903952	Symbol	fid		4903302						
ANR	4903953	Symbol	code		4903302						
ANR	4903954	Symbol	data		4903302						
ANR	4903955	Symbol	buff_ptr		4903302						
ANR	4903956	Symbol	ROUND		4903302						
ANR	4903957	Symbol	OUTPUT_PS		4903302						
ANR	4903958	Symbol	full_file_name		4903302						
ANR	4903959	Symbol	use_holladay_grid		4903302						
ANR	4903960	Symbol	* final_mask		4903302						
ANR	4903961	Symbol	S		4903302						
ANR	4903962	Symbol	output_format		4903302						
ANR	4903963	Symbol	& data_short		4903302						
ANR	4903964	Symbol	OUTPUT_RAW		4903302						
ANR	4903965	Symbol	final_mask		4903302						
ANR	4903966	Symbol	height		4903302						
ANR	4903967	Symbol	OUTPUT_PPM		4903302						
ANR	4903968	Symbol	MAXVAL		4903302						
ANR	4903969	Symbol	fopen		4903302						
ANR	4903970	Symbol	final_mask -> data		4903302						
ANR	4903971	Symbol	final_mask -> width		4903302						
ANR	4903972	Symbol	data_short		4903302						
ANR	4903973	Symbol	OUTPUT_RAW16		4903302						
ANR	4903974	Symbol	htsc_save_tos		4903302						
ANR	4903975	Symbol	params . targ_quant		4903302						
ANR	4903976	Symbol	* buff_ptr		4903302						
ANR	4903977	Symbol	output_extension		4903302						
ANR	4903978	Symbol	OUTPUT_TOS		4903302						
ANR	4903979	Symbol	params		4903302						
ANR	4903980	Symbol	params . output_format		4903302						
ANR	4903981	Symbol	& data		4903302						
ANR	4903982	Symbol	FULL_FILE_NAME_LENGTH		4903302						
ANR	4903983	Symbol	x		4903302						
ANR	4903984	Symbol	width		4903302						
ANR	4903985	Symbol	y		4903302						
ANR	4903986	Symbol	final_mask -> height		4903302						
