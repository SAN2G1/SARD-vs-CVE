command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8131408	File	data/converged/CVE-2018-16863_ghostpdl/pcl_pcl_pgfdata.c								
ANR	8131409	DeclStmt									
ANR	8131410	Decl							const short int	const short int [ ]	stick_font_data
ANR	8131411	DeclStmt									
ANR	8131412	Decl							const short int	const short int [ ]	stick_font_offsets
ANR	8131413	DeclStmt									
ANR	8131414	Decl							const short int	const short int [ ]	arc_font_data
ANR	8131415	DeclStmt									
ANR	8131416	Decl							const short int	const short int [ ]	arc_font_offsets
ANR	8131417	DeclStmt									
ANR	8131418	Decl							const short int	const short int [ ]	arc_font_widths
ANR	8131419	Function	hpgl_stick_segments	5046:0:121269:122892							
ANR	8131420	FunctionDef	"hpgl_stick_segments (const gs_memory_t * mem , void * data , uint char_index)"		8131419	0					
ANR	8131421	CompoundStatement		5048:0:121354:122892	8131419	0					
ANR	8131422	IdentifierDeclStatement	short table_index_of_char = char_index - 0x20 ;	5050:4:121429:121474	8131419	0	True				
ANR	8131423	IdentifierDecl	table_index_of_char = char_index - 0x20		8131419	0					
ANR	8131424	IdentifierDeclType	short		8131419	0					
ANR	8131425	Identifier	table_index_of_char		8131419	1					
ANR	8131426	AssignmentExpression	table_index_of_char = char_index - 0x20		8131419	2		=			
ANR	8131427	Identifier	table_index_of_char		8131419	0					
ANR	8131428	AdditiveExpression	char_index - 0x20		8131419	1		-			
ANR	8131429	Identifier	char_index		8131419	0					
ANR	8131430	PrimaryExpression	0x20		8131419	1					
ANR	8131431	IdentifierDeclStatement	short offset = stick_font_offsets [ table_index_of_char ] ;	5052:4:121550:121604	8131419	1	True				
ANR	8131432	IdentifierDecl	offset = stick_font_offsets [ table_index_of_char ]		8131419	0					
ANR	8131433	IdentifierDeclType	short		8131419	0					
ANR	8131434	Identifier	offset		8131419	1					
ANR	8131435	AssignmentExpression	offset = stick_font_offsets [ table_index_of_char ]		8131419	2		=			
ANR	8131436	Identifier	offset		8131419	0					
ANR	8131437	ArrayIndexing	stick_font_offsets [ table_index_of_char ]		8131419	1					
ANR	8131438	Identifier	stick_font_offsets		8131419	0					
ANR	8131439	Identifier	table_index_of_char		8131419	1					
ANR	8131440	IdentifierDeclStatement	short count = stick_font_offsets [ table_index_of_char + 1 ] - offset ;	5055:4:121748:121814	8131419	2	True				
ANR	8131441	IdentifierDecl	count = stick_font_offsets [ table_index_of_char + 1 ] - offset		8131419	0					
ANR	8131442	IdentifierDeclType	short		8131419	0					
ANR	8131443	Identifier	count		8131419	1					
ANR	8131444	AssignmentExpression	count = stick_font_offsets [ table_index_of_char + 1 ] - offset		8131419	2		=			
ANR	8131445	Identifier	count		8131419	0					
ANR	8131446	AdditiveExpression	stick_font_offsets [ table_index_of_char + 1 ] - offset		8131419	1		-			
ANR	8131447	ArrayIndexing	stick_font_offsets [ table_index_of_char + 1 ]		8131419	0					
ANR	8131448	Identifier	stick_font_offsets		8131419	0					
ANR	8131449	AdditiveExpression	table_index_of_char + 1		8131419	1		+			
ANR	8131450	Identifier	table_index_of_char		8131419	0					
ANR	8131451	PrimaryExpression	1		8131419	1					
ANR	8131452	Identifier	offset		8131419	1					
ANR	8131453	IdentifierDeclStatement	short stop = count + offset ;	5056:4:121820:121847	8131419	3	True				
ANR	8131454	IdentifierDecl	stop = count + offset		8131419	0					
ANR	8131455	IdentifierDeclType	short		8131419	0					
ANR	8131456	Identifier	stop		8131419	1					
ANR	8131457	AssignmentExpression	stop = count + offset		8131419	2		=			
ANR	8131458	Identifier	stop		8131419	0					
ANR	8131459	AdditiveExpression	count + offset		8131419	1		+			
ANR	8131460	Identifier	count		8131419	0					
ANR	8131461	Identifier	offset		8131419	1					
ANR	8131462	IdentifierDeclStatement	int i ;	5058:4:121908:121913	8131419	4	True				
ANR	8131463	IdentifierDecl	i		8131419	0					
ANR	8131464	IdentifierDeclType	int		8131419	0					
ANR	8131465	Identifier	i		8131419	1					
ANR	8131466	IdentifierDeclStatement	int code = 0 ;	5059:4:121919:121931	8131419	5	True				
ANR	8131467	IdentifierDecl	code = 0		8131419	0					
ANR	8131468	IdentifierDeclType	int		8131419	0					
ANR	8131469	Identifier	code		8131419	1					
ANR	8131470	AssignmentExpression	code = 0		8131419	2		=			
ANR	8131471	Identifier	code		8131419	0					
ANR	8131472	PrimaryExpression	0		8131419	1					
ANR	8131473	IfStatement	if ( ( char_index < 0x20 ) || ( char_index > 0xff ) || ( ( char_index > 0x7f ) && ( char_index < 0xa0 ) ) )		8131419	6					
ANR	8131474	Condition	( char_index < 0x20 ) || ( char_index > 0xff ) || ( ( char_index > 0x7f ) && ( char_index < 0xa0 ) )	5061:8:121942:122039	8131419	0	True				
ANR	8131475	OrExpression	( char_index < 0x20 ) || ( char_index > 0xff ) || ( ( char_index > 0x7f ) && ( char_index < 0xa0 ) )		8131419	0		||			
ANR	8131476	RelationalExpression	char_index < 0x20		8131419	0		<			
ANR	8131477	Identifier	char_index		8131419	0					
ANR	8131478	PrimaryExpression	0x20		8131419	1					
ANR	8131479	OrExpression	( char_index > 0xff ) || ( ( char_index > 0x7f ) && ( char_index < 0xa0 ) )		8131419	1		||			
ANR	8131480	RelationalExpression	char_index > 0xff		8131419	0		>			
ANR	8131481	Identifier	char_index		8131419	0					
ANR	8131482	PrimaryExpression	0xff		8131419	1					
ANR	8131483	AndExpression	( char_index > 0x7f ) && ( char_index < 0xa0 )		8131419	1		&&			
ANR	8131484	RelationalExpression	char_index > 0x7f		8131419	0		>			
ANR	8131485	Identifier	char_index		8131419	0					
ANR	8131486	PrimaryExpression	0x7f		8131419	1					
ANR	8131487	RelationalExpression	char_index < 0xa0		8131419	1		<			
ANR	8131488	Identifier	char_index		8131419	0					
ANR	8131489	PrimaryExpression	0xa0		8131419	1					
ANR	8131490	ReturnStatement	return 0 ;	5063:8:122050:122058	8131419	1	True				
ANR	8131491	PrimaryExpression	0		8131419	0					
ANR	8131492	ExpressionStatement	i = offset	5066:4:122137:122147	8131419	7	True				
ANR	8131493	AssignmentExpression	i = offset		8131419	0		=			
ANR	8131494	Identifier	i		8131419	0					
ANR	8131495	Identifier	offset		8131419	1					
ANR	8131496	WhileStatement	while ( i < stop )		8131419	8					
ANR	8131497	Condition	i < stop	5067:11:122160:122167	8131419	0	True				
ANR	8131498	RelationalExpression	i < stop		8131419	0		<			
ANR	8131499	Identifier	i		8131419	0					
ANR	8131500	Identifier	stop		8131419	1					
ANR	8131501	CompoundStatement		20:21:815:815	8131419	1					
ANR	8131502	IfStatement	if ( stick_font_data [ i ] == FNT_LINETO )		8131419	0					
ANR	8131503	Condition	stick_font_data [ i ] == FNT_LINETO	5068:12:122184:122215	8131419	0	True				
ANR	8131504	EqualityExpression	stick_font_data [ i ] == FNT_LINETO		8131419	0		==			
ANR	8131505	ArrayIndexing	stick_font_data [ i ]		8131419	0					
ANR	8131506	Identifier	stick_font_data		8131419	0					
ANR	8131507	Identifier	i		8131419	1					
ANR	8131508	Identifier	FNT_LINETO		8131419	1					
ANR	8131509	CompoundStatement		21:46:863:863	8131419	1					
ANR	8131510	ExpressionStatement	"code = gs_lineto ( data , ( double ) ( stick_font_data [ i + 1 ] ) , ( double ) ( stick_font_data [ i + 2 ] ) )"	5069:12:122232:122346	8131419	0	True				
ANR	8131511	AssignmentExpression	"code = gs_lineto ( data , ( double ) ( stick_font_data [ i + 1 ] ) , ( double ) ( stick_font_data [ i + 2 ] ) )"		8131419	0		=			
ANR	8131512	Identifier	code		8131419	0					
ANR	8131513	CallExpression	"gs_lineto ( data , ( double ) ( stick_font_data [ i + 1 ] ) , ( double ) ( stick_font_data [ i + 2 ] ) )"		8131419	1					
ANR	8131514	Callee	gs_lineto		8131419	0					
ANR	8131515	Identifier	gs_lineto		8131419	0					
ANR	8131516	ArgumentList	data		8131419	1					
ANR	8131517	Argument	data		8131419	0					
ANR	8131518	Identifier	data		8131419	0					
ANR	8131519	Argument	( double ) ( stick_font_data [ i + 1 ] )		8131419	1					
ANR	8131520	CastExpression	( double ) ( stick_font_data [ i + 1 ] )		8131419	0					
ANR	8131521	CastTarget	double		8131419	0					
ANR	8131522	ArrayIndexing	stick_font_data [ i + 1 ]		8131419	1					
ANR	8131523	Identifier	stick_font_data		8131419	0					
ANR	8131524	AdditiveExpression	i + 1		8131419	1		+			
ANR	8131525	Identifier	i		8131419	0					
ANR	8131526	PrimaryExpression	1		8131419	1					
ANR	8131527	Argument	( double ) ( stick_font_data [ i + 2 ] )		8131419	2					
ANR	8131528	CastExpression	( double ) ( stick_font_data [ i + 2 ] )		8131419	0					
ANR	8131529	CastTarget	double		8131419	0					
ANR	8131530	ArrayIndexing	stick_font_data [ i + 2 ]		8131419	1					
ANR	8131531	Identifier	stick_font_data		8131419	0					
ANR	8131532	AdditiveExpression	i + 2		8131419	1		+			
ANR	8131533	Identifier	i		8131419	0					
ANR	8131534	PrimaryExpression	2		8131419	1					
ANR	8131535	IfStatement	if ( code < 0 )		8131419	1					
ANR	8131536	Condition	code < 0	5071:16:122364:122371	8131419	0	True				
ANR	8131537	RelationalExpression	code < 0		8131419	0		<			
ANR	8131538	Identifier	code		8131419	0					
ANR	8131539	PrimaryExpression	0		8131419	1					
ANR	8131540	ReturnStatement	return code ;	5072:16:122390:122401	8131419	1	True				
ANR	8131541	Identifier	code		8131419	0					
ANR	8131542	ExpressionStatement	i += 3	5073:12:122415:122421	8131419	2	True				
ANR	8131543	AssignmentExpression	i += 3		8131419	0		+=			
ANR	8131544	Identifier	i		8131419	0					
ANR	8131545	PrimaryExpression	3		8131419	1					
ANR	8131546	ElseStatement	else		8131419	0					
ANR	8131547	IfStatement	if ( stick_font_data [ i ] == FNT_MOVETO )		8131419	0					
ANR	8131548	Condition	stick_font_data [ i ] == FNT_MOVETO	5074:19:122442:122473	8131419	0	True				
ANR	8131549	EqualityExpression	stick_font_data [ i ] == FNT_MOVETO		8131419	0		==			
ANR	8131550	ArrayIndexing	stick_font_data [ i ]		8131419	0					
ANR	8131551	Identifier	stick_font_data		8131419	0					
ANR	8131552	Identifier	i		8131419	1					
ANR	8131553	Identifier	FNT_MOVETO		8131419	1					
ANR	8131554	CompoundStatement		27:53:1121:1121	8131419	1					
ANR	8131555	ExpressionStatement	"code = gs_moveto ( data , ( double ) ( stick_font_data [ i + 1 ] ) , ( double ) ( stick_font_data [ i + 2 ] ) )"	5075:12:122490:122604	8131419	0	True				
ANR	8131556	AssignmentExpression	"code = gs_moveto ( data , ( double ) ( stick_font_data [ i + 1 ] ) , ( double ) ( stick_font_data [ i + 2 ] ) )"		8131419	0		=			
ANR	8131557	Identifier	code		8131419	0					
ANR	8131558	CallExpression	"gs_moveto ( data , ( double ) ( stick_font_data [ i + 1 ] ) , ( double ) ( stick_font_data [ i + 2 ] ) )"		8131419	1					
ANR	8131559	Callee	gs_moveto		8131419	0					
ANR	8131560	Identifier	gs_moveto		8131419	0					
ANR	8131561	ArgumentList	data		8131419	1					
ANR	8131562	Argument	data		8131419	0					
ANR	8131563	Identifier	data		8131419	0					
ANR	8131564	Argument	( double ) ( stick_font_data [ i + 1 ] )		8131419	1					
ANR	8131565	CastExpression	( double ) ( stick_font_data [ i + 1 ] )		8131419	0					
ANR	8131566	CastTarget	double		8131419	0					
ANR	8131567	ArrayIndexing	stick_font_data [ i + 1 ]		8131419	1					
ANR	8131568	Identifier	stick_font_data		8131419	0					
ANR	8131569	AdditiveExpression	i + 1		8131419	1		+			
ANR	8131570	Identifier	i		8131419	0					
ANR	8131571	PrimaryExpression	1		8131419	1					
ANR	8131572	Argument	( double ) ( stick_font_data [ i + 2 ] )		8131419	2					
ANR	8131573	CastExpression	( double ) ( stick_font_data [ i + 2 ] )		8131419	0					
ANR	8131574	CastTarget	double		8131419	0					
ANR	8131575	ArrayIndexing	stick_font_data [ i + 2 ]		8131419	1					
ANR	8131576	Identifier	stick_font_data		8131419	0					
ANR	8131577	AdditiveExpression	i + 2		8131419	1		+			
ANR	8131578	Identifier	i		8131419	0					
ANR	8131579	PrimaryExpression	2		8131419	1					
ANR	8131580	IfStatement	if ( code < 0 )		8131419	1					
ANR	8131581	Condition	code < 0	5077:16:122622:122629	8131419	0	True				
ANR	8131582	RelationalExpression	code < 0		8131419	0		<			
ANR	8131583	Identifier	code		8131419	0					
ANR	8131584	PrimaryExpression	0		8131419	1					
ANR	8131585	ReturnStatement	return code ;	5078:16:122648:122659	8131419	1	True				
ANR	8131586	Identifier	code		8131419	0					
ANR	8131587	ExpressionStatement	i += 3	5079:12:122673:122679	8131419	2	True				
ANR	8131588	AssignmentExpression	i += 3		8131419	0		+=			
ANR	8131589	Identifier	i		8131419	0					
ANR	8131590	PrimaryExpression	3		8131419	1					
ANR	8131591	ElseStatement	else		8131419	0					
ANR	8131592	ExpressionStatement	return_error ( gs_error_invalidfont )	5081:12:122708:122742	8131419	0	True				
ANR	8131593	CallExpression	return_error ( gs_error_invalidfont )		8131419	0					
ANR	8131594	Callee	return_error		8131419	0					
ANR	8131595	Identifier	return_error		8131419	0					
ANR	8131596	ArgumentList	gs_error_invalidfont		8131419	1					
ANR	8131597	Argument	gs_error_invalidfont		8131419	0					
ANR	8131598	Identifier	gs_error_invalidfont		8131419	0					
ANR	8131599	IfStatement	if ( i != stop )		8131419	9					
ANR	8131600	Condition	i != stop	5085:8:122823:122831	8131419	0	True				
ANR	8131601	EqualityExpression	i != stop		8131419	0		!=			
ANR	8131602	Identifier	i		8131419	0					
ANR	8131603	Identifier	stop		8131419	1					
ANR	8131604	ExpressionStatement	return_error ( gs_error_invalidfont )	5086:8:122842:122876	8131419	1	True				
ANR	8131605	CallExpression	return_error ( gs_error_invalidfont )		8131419	0					
ANR	8131606	Callee	return_error		8131419	0					
ANR	8131607	Identifier	return_error		8131419	0					
ANR	8131608	ArgumentList	gs_error_invalidfont		8131419	1					
ANR	8131609	Argument	gs_error_invalidfont		8131419	0					
ANR	8131610	Identifier	gs_error_invalidfont		8131419	0					
ANR	8131611	ReturnStatement	return 0 ;	5087:4:122882:122890	8131419	10	True				
ANR	8131612	PrimaryExpression	0		8131419	0					
ANR	8131613	ReturnType	static int		8131419	1					
ANR	8131614	Identifier	hpgl_stick_segments		8131419	2					
ANR	8131615	ParameterList	"const gs_memory_t * mem , void * data , uint char_index"		8131419	3					
ANR	8131616	Parameter	const gs_memory_t * mem	5047:20:121300:121322	8131419	0	True				
ANR	8131617	ParameterType	const gs_memory_t *		8131419	0					
ANR	8131618	Identifier	mem		8131419	1					
ANR	8131619	Parameter	void * data	5047:45:121325:121334	8131419	1	True				
ANR	8131620	ParameterType	void *		8131419	0					
ANR	8131621	Identifier	data		8131419	1					
ANR	8131622	Parameter	uint char_index	5047:57:121337:121351	8131419	2	True				
ANR	8131623	ParameterType	uint		8131419	0					
ANR	8131624	Identifier	char_index		8131419	1					
ANR	8131625	CFGEntryNode	ENTRY		8131419		True				
ANR	8131626	CFGExitNode	EXIT		8131419		True				
ANR	8131627	Symbol	code		8131419						
ANR	8131628	Symbol	stick_font_data		8131419						
ANR	8131629	Symbol	data		8131419						
ANR	8131630	Symbol	offset		8131419						
ANR	8131631	Symbol	* table_index_of_char		8131419						
ANR	8131632	Symbol	gs_lineto		8131419						
ANR	8131633	Symbol	count		8131419						
ANR	8131634	Symbol	i		8131419						
ANR	8131635	Symbol	char_index		8131419						
ANR	8131636	Symbol	gs_moveto		8131419						
ANR	8131637	Symbol	* i		8131419						
ANR	8131638	Symbol	mem		8131419						
ANR	8131639	Symbol	stop		8131419						
ANR	8131640	Symbol	stick_font_offsets		8131419						
ANR	8131641	Symbol	* stick_font_offsets		8131419						
ANR	8131642	Symbol	* stick_font_data		8131419						
ANR	8131643	Symbol	FNT_MOVETO		8131419						
ANR	8131644	Symbol	FNT_LINETO		8131419						
ANR	8131645	Symbol	table_index_of_char		8131419						
ANR	8131646	Symbol	gs_error_invalidfont		8131419						
ANR	8131647	Function	hpgl_531_segments	5090:0:122895:123857							
ANR	8131648	FunctionDef	"hpgl_531_segments (const gs_memory_t * mem , void * data , void * cdata)"		8131647	0					
ANR	8131649	CompoundStatement		5092:0:122967:123857	8131647	0					
ANR	8131650	IdentifierDeclStatement	hpgl_dl_cdata_t * cd = cdata ;	5095:4:123072:123099	8131647	0	True				
ANR	8131651	IdentifierDecl	* cd = cdata		8131647	0					
ANR	8131652	IdentifierDeclType	hpgl_dl_cdata_t *		8131647	0					
ANR	8131653	Identifier	cd		8131647	1					
ANR	8131654	AssignmentExpression	* cd = cdata		8131647	2		=			
ANR	8131655	Identifier	cdata		8131647	0					
ANR	8131656	Identifier	cdata		8131647	1					
ANR	8131657	IdentifierDeclStatement	bool pen_up = true ;	5096:4:123105:123123	8131647	1	True				
ANR	8131658	IdentifierDecl	pen_up = true		8131647	0					
ANR	8131659	IdentifierDeclType	bool		8131647	0					
ANR	8131660	Identifier	pen_up		8131647	1					
ANR	8131661	AssignmentExpression	pen_up = true		8131647	2		=			
ANR	8131662	Identifier	true		8131647	0					
ANR	8131663	Identifier	true		8131647	1					
ANR	8131664	IdentifierDeclStatement	int i = 0 ;	5097:4:123129:123138	8131647	2	True				
ANR	8131665	IdentifierDecl	i = 0		8131647	0					
ANR	8131666	IdentifierDeclType	int		8131647	0					
ANR	8131667	Identifier	i		8131647	1					
ANR	8131668	AssignmentExpression	i = 0		8131647	2		=			
ANR	8131669	Identifier	i		8131647	0					
ANR	8131670	PrimaryExpression	0		8131647	1					
ANR	8131671	IdentifierDeclStatement	int code = 0 ;	5098:4:123144:123156	8131647	3	True				
ANR	8131672	IdentifierDecl	code = 0		8131647	0					
ANR	8131673	IdentifierDeclType	int		8131647	0					
ANR	8131674	Identifier	code		8131647	1					
ANR	8131675	AssignmentExpression	code = 0		8131647	2		=			
ANR	8131676	Identifier	code		8131647	0					
ANR	8131677	PrimaryExpression	0		8131647	1					
ANR	8131678	WhileStatement	while ( i < cd -> index )		8131647	4					
ANR	8131679	Condition	i < cd -> index	5102:11:123306:123318	8131647	0	True				
ANR	8131680	RelationalExpression	i < cd -> index		8131647	0		<			
ANR	8131681	Identifier	i		8131647	0					
ANR	8131682	PtrMemberAccess	cd -> index		8131647	1					
ANR	8131683	Identifier	cd		8131647	0					
ANR	8131684	Identifier	index		8131647	1					
ANR	8131685	CompoundStatement		11:26:353:353	8131647	1					
ANR	8131686	IfStatement	if ( cd -> data [ i ] == - 128 )		8131647	0					
ANR	8131687	Condition	cd -> data [ i ] == - 128	5103:12:123335:123353	8131647	0	True				
ANR	8131688	EqualityExpression	cd -> data [ i ] == - 128		8131647	0		==			
ANR	8131689	ArrayIndexing	cd -> data [ i ]		8131647	0					
ANR	8131690	PtrMemberAccess	cd -> data		8131647	0					
ANR	8131691	Identifier	cd		8131647	0					
ANR	8131692	Identifier	data		8131647	1					
ANR	8131693	Identifier	i		8131647	1					
ANR	8131694	UnaryOperationExpression	- 128		8131647	1					
ANR	8131695	UnaryOperator	-		8131647	0					
ANR	8131696	PrimaryExpression	128		8131647	1					
ANR	8131697	CompoundStatement		12:33:388:388	8131647	1					
ANR	8131698	ExpressionStatement	pen_up = true	5104:12:123370:123383	8131647	0	True				
ANR	8131699	AssignmentExpression	pen_up = true		8131647	0		=			
ANR	8131700	Identifier	pen_up		8131647	0					
ANR	8131701	Identifier	true		8131647	1					
ANR	8131702	ExpressionStatement	i ++	5105:12:123397:123400	8131647	1	True				
ANR	8131703	PostIncDecOperationExpression	i ++		8131647	0					
ANR	8131704	Identifier	i		8131647	0					
ANR	8131705	IncDec	++		8131647	1					
ANR	8131706	ElseStatement	else		8131647	0					
ANR	8131707	CompoundStatement		17:12:499:525	8131647	0					
ANR	8131708	IdentifierDeclStatement	double x = cd -> data [ i ] ;	5107:12:123431:123453	8131647	0	True				
ANR	8131709	IdentifierDecl	x = cd -> data [ i ]		8131647	0					
ANR	8131710	IdentifierDeclType	double		8131647	0					
ANR	8131711	Identifier	x		8131647	1					
ANR	8131712	AssignmentExpression	x = cd -> data [ i ]		8131647	2		=			
ANR	8131713	Identifier	x		8131647	0					
ANR	8131714	ArrayIndexing	cd -> data [ i ]		8131647	1					
ANR	8131715	PtrMemberAccess	cd -> data		8131647	0					
ANR	8131716	Identifier	cd		8131647	0					
ANR	8131717	Identifier	data		8131647	1					
ANR	8131718	Identifier	i		8131647	1					
ANR	8131719	IdentifierDeclStatement	double y = cd -> data [ i + 1 ] ;	5108:12:123467:123493	8131647	1	True				
ANR	8131720	IdentifierDecl	y = cd -> data [ i + 1 ]		8131647	0					
ANR	8131721	IdentifierDeclType	double		8131647	0					
ANR	8131722	Identifier	y		8131647	1					
ANR	8131723	AssignmentExpression	y = cd -> data [ i + 1 ]		8131647	2		=			
ANR	8131724	Identifier	y		8131647	0					
ANR	8131725	ArrayIndexing	cd -> data [ i + 1 ]		8131647	1					
ANR	8131726	PtrMemberAccess	cd -> data		8131647	0					
ANR	8131727	Identifier	cd		8131647	0					
ANR	8131728	Identifier	data		8131647	1					
ANR	8131729	AdditiveExpression	i + 1		8131647	1		+			
ANR	8131730	Identifier	i		8131647	0					
ANR	8131731	PrimaryExpression	1		8131647	1					
ANR	8131732	IfStatement	if ( pen_up )		8131647	2					
ANR	8131733	Condition	pen_up	5110:16:123512:123517	8131647	0	True				
ANR	8131734	Identifier	pen_up		8131647	0					
ANR	8131735	CompoundStatement		19:24:552:552	8131647	1					
ANR	8131736	ExpressionStatement	"code = gs_moveto ( data , x , y )"	5111:16:123538:123566	8131647	0	True				
ANR	8131737	AssignmentExpression	"code = gs_moveto ( data , x , y )"		8131647	0		=			
ANR	8131738	Identifier	code		8131647	0					
ANR	8131739	CallExpression	"gs_moveto ( data , x , y )"		8131647	1					
ANR	8131740	Callee	gs_moveto		8131647	0					
ANR	8131741	Identifier	gs_moveto		8131647	0					
ANR	8131742	ArgumentList	data		8131647	1					
ANR	8131743	Argument	data		8131647	0					
ANR	8131744	Identifier	data		8131647	0					
ANR	8131745	Argument	x		8131647	1					
ANR	8131746	Identifier	x		8131647	0					
ANR	8131747	Argument	y		8131647	2					
ANR	8131748	Identifier	y		8131647	0					
ANR	8131749	IfStatement	if ( code < 0 )		8131647	1					
ANR	8131750	Condition	code < 0	5112:20:123588:123595	8131647	0	True				
ANR	8131751	RelationalExpression	code < 0		8131647	0		<			
ANR	8131752	Identifier	code		8131647	0					
ANR	8131753	PrimaryExpression	0		8131647	1					
ANR	8131754	ReturnStatement	return code ;	5113:20:123618:123629	8131647	1	True				
ANR	8131755	Identifier	code		8131647	0					
ANR	8131756	ExpressionStatement	pen_up = false	5114:16:123647:123661	8131647	2	True				
ANR	8131757	AssignmentExpression	pen_up = false		8131647	0		=			
ANR	8131758	Identifier	pen_up		8131647	0					
ANR	8131759	Identifier	false		8131647	1					
ANR	8131760	ElseStatement	else		8131647	0					
ANR	8131761	CompoundStatement		24:19:714:714	8131647	0					
ANR	8131762	ExpressionStatement	"code = gs_lineto ( data , x , y )"	5116:16:123700:123728	8131647	0	True				
ANR	8131763	AssignmentExpression	"code = gs_lineto ( data , x , y )"		8131647	0		=			
ANR	8131764	Identifier	code		8131647	0					
ANR	8131765	CallExpression	"gs_lineto ( data , x , y )"		8131647	1					
ANR	8131766	Callee	gs_lineto		8131647	0					
ANR	8131767	Identifier	gs_lineto		8131647	0					
ANR	8131768	ArgumentList	data		8131647	1					
ANR	8131769	Argument	data		8131647	0					
ANR	8131770	Identifier	data		8131647	0					
ANR	8131771	Argument	x		8131647	1					
ANR	8131772	Identifier	x		8131647	0					
ANR	8131773	Argument	y		8131647	2					
ANR	8131774	Identifier	y		8131647	0					
ANR	8131775	IfStatement	if ( code < 0 )		8131647	1					
ANR	8131776	Condition	code < 0	5117:20:123750:123757	8131647	0	True				
ANR	8131777	RelationalExpression	code < 0		8131647	0		<			
ANR	8131778	Identifier	code		8131647	0					
ANR	8131779	PrimaryExpression	0		8131647	1					
ANR	8131780	ReturnStatement	return code ;	5118:20:123780:123791	8131647	1	True				
ANR	8131781	Identifier	code		8131647	0					
ANR	8131782	ExpressionStatement	i += 2	5120:12:123819:123825	8131647	3	True				
ANR	8131783	AssignmentExpression	i += 2		8131647	0		+=			
ANR	8131784	Identifier	i		8131647	0					
ANR	8131785	PrimaryExpression	2		8131647	1					
ANR	8131786	ReturnStatement	return 0 ;	5123:4:123847:123855	8131647	5	True				
ANR	8131787	PrimaryExpression	0		8131647	0					
ANR	8131788	ReturnType	int		8131647	1					
ANR	8131789	Identifier	hpgl_531_segments		8131647	2					
ANR	8131790	ParameterList	"const gs_memory_t * mem , void * data , void * cdata"		8131647	3					
ANR	8131791	Parameter	const gs_memory_t * mem	5091:18:122917:122939	8131647	0	True				
ANR	8131792	ParameterType	const gs_memory_t *		8131647	0					
ANR	8131793	Identifier	mem		8131647	1					
ANR	8131794	Parameter	void * data	5091:43:122942:122951	8131647	1	True				
ANR	8131795	ParameterType	void *		8131647	0					
ANR	8131796	Identifier	data		8131647	1					
ANR	8131797	Parameter	void * cdata	5091:55:122954:122964	8131647	2	True				
ANR	8131798	ParameterType	void *		8131647	0					
ANR	8131799	Identifier	cdata		8131647	1					
ANR	8131800	CFGEntryNode	ENTRY		8131647		True				
ANR	8131801	CFGExitNode	EXIT		8131647		True				
ANR	8131802	Symbol	pen_up		8131647						
ANR	8131803	Symbol	cd		8131647						
ANR	8131804	Symbol	code		8131647						
ANR	8131805	Symbol	data		8131647						
ANR	8131806	Symbol	* cd		8131647						
ANR	8131807	Symbol	cd -> data		8131647						
ANR	8131808	Symbol	gs_lineto		8131647						
ANR	8131809	Symbol	false		8131647						
ANR	8131810	Symbol	i		8131647						
ANR	8131811	Symbol	* cd -> data		8131647						
ANR	8131812	Symbol	gs_moveto		8131647						
ANR	8131813	Symbol	cdata		8131647						
ANR	8131814	Symbol	* * cd		8131647						
ANR	8131815	Symbol	* i		8131647						
ANR	8131816	Symbol	mem		8131647						
ANR	8131817	Symbol	true		8131647						
ANR	8131818	Symbol	x		8131647						
ANR	8131819	Symbol	y		8131647						
ANR	8131820	Symbol	cd -> index		8131647						
ANR	8131821	Function	hpgl_arc_segments	5128:0:123980:126083							
ANR	8131822	FunctionDef	"hpgl_arc_segments (const gs_memory_t * mem , void * data , uint char_index)"		8131821	0					
ANR	8131823	CompoundStatement		5130:0:124063:126083	8131821	0					
ANR	8131824	IdentifierDeclStatement	short table_index_of_char = char_index - 0x20 ;	5132:4:124138:124183	8131821	0	True				
ANR	8131825	IdentifierDecl	table_index_of_char = char_index - 0x20		8131821	0					
ANR	8131826	IdentifierDeclType	short		8131821	0					
ANR	8131827	Identifier	table_index_of_char		8131821	1					
ANR	8131828	AssignmentExpression	table_index_of_char = char_index - 0x20		8131821	2		=			
ANR	8131829	Identifier	table_index_of_char		8131821	0					
ANR	8131830	AdditiveExpression	char_index - 0x20		8131821	1		-			
ANR	8131831	Identifier	char_index		8131821	0					
ANR	8131832	PrimaryExpression	0x20		8131821	1					
ANR	8131833	IdentifierDeclStatement	short offset = arc_font_offsets [ table_index_of_char ] ;	5134:4:124259:124311	8131821	1	True				
ANR	8131834	IdentifierDecl	offset = arc_font_offsets [ table_index_of_char ]		8131821	0					
ANR	8131835	IdentifierDeclType	short		8131821	0					
ANR	8131836	Identifier	offset		8131821	1					
ANR	8131837	AssignmentExpression	offset = arc_font_offsets [ table_index_of_char ]		8131821	2		=			
ANR	8131838	Identifier	offset		8131821	0					
ANR	8131839	ArrayIndexing	arc_font_offsets [ table_index_of_char ]		8131821	1					
ANR	8131840	Identifier	arc_font_offsets		8131821	0					
ANR	8131841	Identifier	table_index_of_char		8131821	1					
ANR	8131842	IdentifierDeclStatement	short count = arc_font_offsets [ table_index_of_char + 1 ] - offset ;	5138:4:124456:124520	8131821	2	True				
ANR	8131843	IdentifierDecl	count = arc_font_offsets [ table_index_of_char + 1 ] - offset		8131821	0					
ANR	8131844	IdentifierDeclType	short		8131821	0					
ANR	8131845	Identifier	count		8131821	1					
ANR	8131846	AssignmentExpression	count = arc_font_offsets [ table_index_of_char + 1 ] - offset		8131821	2		=			
ANR	8131847	Identifier	count		8131821	0					
ANR	8131848	AdditiveExpression	arc_font_offsets [ table_index_of_char + 1 ] - offset		8131821	1		-			
ANR	8131849	ArrayIndexing	arc_font_offsets [ table_index_of_char + 1 ]		8131821	0					
ANR	8131850	Identifier	arc_font_offsets		8131821	0					
ANR	8131851	AdditiveExpression	table_index_of_char + 1		8131821	1		+			
ANR	8131852	Identifier	table_index_of_char		8131821	0					
ANR	8131853	PrimaryExpression	1		8131821	1					
ANR	8131854	Identifier	offset		8131821	1					
ANR	8131855	IdentifierDeclStatement	short stop = count + offset ;	5139:4:124526:124553	8131821	3	True				
ANR	8131856	IdentifierDecl	stop = count + offset		8131821	0					
ANR	8131857	IdentifierDeclType	short		8131821	0					
ANR	8131858	Identifier	stop		8131821	1					
ANR	8131859	AssignmentExpression	stop = count + offset		8131821	2		=			
ANR	8131860	Identifier	stop		8131821	0					
ANR	8131861	AdditiveExpression	count + offset		8131821	1		+			
ANR	8131862	Identifier	count		8131821	0					
ANR	8131863	Identifier	offset		8131821	1					
ANR	8131864	IdentifierDeclStatement	int i ;	5142:4:124615:124620	8131821	4	True				
ANR	8131865	IdentifierDecl	i		8131821	0					
ANR	8131866	IdentifierDeclType	int		8131821	0					
ANR	8131867	Identifier	i		8131821	1					
ANR	8131868	IdentifierDeclStatement	int code = 0 ;	5143:4:124626:124638	8131821	5	True				
ANR	8131869	IdentifierDecl	code = 0		8131821	0					
ANR	8131870	IdentifierDeclType	int		8131821	0					
ANR	8131871	Identifier	code		8131821	1					
ANR	8131872	AssignmentExpression	code = 0		8131821	2		=			
ANR	8131873	Identifier	code		8131821	0					
ANR	8131874	PrimaryExpression	0		8131821	1					
ANR	8131875	IfStatement	if ( ( char_index < 0x20 ) || ( char_index > 0xff ) || ( ( char_index > 0x7f ) && ( char_index < 0xa0 ) ) )		8131821	6					
ANR	8131876	Condition	( char_index < 0x20 ) || ( char_index > 0xff ) || ( ( char_index > 0x7f ) && ( char_index < 0xa0 ) )	5146:8:124709:124806	8131821	0	True				
ANR	8131877	OrExpression	( char_index < 0x20 ) || ( char_index > 0xff ) || ( ( char_index > 0x7f ) && ( char_index < 0xa0 ) )		8131821	0		||			
ANR	8131878	RelationalExpression	char_index < 0x20		8131821	0		<			
ANR	8131879	Identifier	char_index		8131821	0					
ANR	8131880	PrimaryExpression	0x20		8131821	1					
ANR	8131881	OrExpression	( char_index > 0xff ) || ( ( char_index > 0x7f ) && ( char_index < 0xa0 ) )		8131821	1		||			
ANR	8131882	RelationalExpression	char_index > 0xff		8131821	0		>			
ANR	8131883	Identifier	char_index		8131821	0					
ANR	8131884	PrimaryExpression	0xff		8131821	1					
ANR	8131885	AndExpression	( char_index > 0x7f ) && ( char_index < 0xa0 )		8131821	1		&&			
ANR	8131886	RelationalExpression	char_index > 0x7f		8131821	0		>			
ANR	8131887	Identifier	char_index		8131821	0					
ANR	8131888	PrimaryExpression	0x7f		8131821	1					
ANR	8131889	RelationalExpression	char_index < 0xa0		8131821	1		<			
ANR	8131890	Identifier	char_index		8131821	0					
ANR	8131891	PrimaryExpression	0xa0		8131821	1					
ANR	8131892	ReturnStatement	return 0 ;	5148:8:124817:124825	8131821	1	True				
ANR	8131893	PrimaryExpression	0		8131821	0					
ANR	8131894	ExpressionStatement	i = offset	5150:4:124861:124871	8131821	7	True				
ANR	8131895	AssignmentExpression	i = offset		8131821	0		=			
ANR	8131896	Identifier	i		8131821	0					
ANR	8131897	Identifier	offset		8131821	1					
ANR	8131898	WhileStatement	while ( i < stop )		8131821	8					
ANR	8131899	Condition	i < stop	5151:11:124884:124891	8131821	0	True				
ANR	8131900	RelationalExpression	i < stop		8131821	0		<			
ANR	8131901	Identifier	i		8131821	0					
ANR	8131902	Identifier	stop		8131821	1					
ANR	8131903	CompoundStatement		22:21:830:830	8131821	1					
ANR	8131904	IfStatement	if ( arc_font_data [ i ] == FNT_LINETO )		8131821	0					
ANR	8131905	Condition	arc_font_data [ i ] == FNT_LINETO	5152:12:124908:124937	8131821	0	True				
ANR	8131906	EqualityExpression	arc_font_data [ i ] == FNT_LINETO		8131821	0		==			
ANR	8131907	ArrayIndexing	arc_font_data [ i ]		8131821	0					
ANR	8131908	Identifier	arc_font_data		8131821	0					
ANR	8131909	Identifier	i		8131821	1					
ANR	8131910	Identifier	FNT_LINETO		8131821	1					
ANR	8131911	CompoundStatement		23:44:876:876	8131821	1					
ANR	8131912	ExpressionStatement	"code = gs_lineto ( data , ( double ) ( arc_font_data [ i + 1 ] ) , ( double ) ( arc_font_data [ i + 2 ] ) )"	5153:12:124954:125064	8131821	0	True				
ANR	8131913	AssignmentExpression	"code = gs_lineto ( data , ( double ) ( arc_font_data [ i + 1 ] ) , ( double ) ( arc_font_data [ i + 2 ] ) )"		8131821	0		=			
ANR	8131914	Identifier	code		8131821	0					
ANR	8131915	CallExpression	"gs_lineto ( data , ( double ) ( arc_font_data [ i + 1 ] ) , ( double ) ( arc_font_data [ i + 2 ] ) )"		8131821	1					
ANR	8131916	Callee	gs_lineto		8131821	0					
ANR	8131917	Identifier	gs_lineto		8131821	0					
ANR	8131918	ArgumentList	data		8131821	1					
ANR	8131919	Argument	data		8131821	0					
ANR	8131920	Identifier	data		8131821	0					
ANR	8131921	Argument	( double ) ( arc_font_data [ i + 1 ] )		8131821	1					
ANR	8131922	CastExpression	( double ) ( arc_font_data [ i + 1 ] )		8131821	0					
ANR	8131923	CastTarget	double		8131821	0					
ANR	8131924	ArrayIndexing	arc_font_data [ i + 1 ]		8131821	1					
ANR	8131925	Identifier	arc_font_data		8131821	0					
ANR	8131926	AdditiveExpression	i + 1		8131821	1		+			
ANR	8131927	Identifier	i		8131821	0					
ANR	8131928	PrimaryExpression	1		8131821	1					
ANR	8131929	Argument	( double ) ( arc_font_data [ i + 2 ] )		8131821	2					
ANR	8131930	CastExpression	( double ) ( arc_font_data [ i + 2 ] )		8131821	0					
ANR	8131931	CastTarget	double		8131821	0					
ANR	8131932	ArrayIndexing	arc_font_data [ i + 2 ]		8131821	1					
ANR	8131933	Identifier	arc_font_data		8131821	0					
ANR	8131934	AdditiveExpression	i + 2		8131821	1		+			
ANR	8131935	Identifier	i		8131821	0					
ANR	8131936	PrimaryExpression	2		8131821	1					
ANR	8131937	IfStatement	if ( code < 0 )		8131821	1					
ANR	8131938	Condition	code < 0	5155:16:125082:125089	8131821	0	True				
ANR	8131939	RelationalExpression	code < 0		8131821	0		<			
ANR	8131940	Identifier	code		8131821	0					
ANR	8131941	PrimaryExpression	0		8131821	1					
ANR	8131942	ReturnStatement	return code ;	5156:16:125108:125119	8131821	1	True				
ANR	8131943	Identifier	code		8131821	0					
ANR	8131944	ExpressionStatement	i += 3	5157:12:125133:125139	8131821	2	True				
ANR	8131945	AssignmentExpression	i += 3		8131821	0		+=			
ANR	8131946	Identifier	i		8131821	0					
ANR	8131947	PrimaryExpression	3		8131821	1					
ANR	8131948	ElseStatement	else		8131821	0					
ANR	8131949	IfStatement	if ( arc_font_data [ i ] == FNT_MOVETO )		8131821	0					
ANR	8131950	Condition	arc_font_data [ i ] == FNT_MOVETO	5158:19:125160:125189	8131821	0	True				
ANR	8131951	EqualityExpression	arc_font_data [ i ] == FNT_MOVETO		8131821	0		==			
ANR	8131952	ArrayIndexing	arc_font_data [ i ]		8131821	0					
ANR	8131953	Identifier	arc_font_data		8131821	0					
ANR	8131954	Identifier	i		8131821	1					
ANR	8131955	Identifier	FNT_MOVETO		8131821	1					
ANR	8131956	CompoundStatement		29:51:1128:1128	8131821	1					
ANR	8131957	ExpressionStatement	"code = gs_moveto ( data , ( double ) ( arc_font_data [ i + 1 ] ) , ( double ) ( arc_font_data [ i + 2 ] ) )"	5159:12:125206:125316	8131821	0	True				
ANR	8131958	AssignmentExpression	"code = gs_moveto ( data , ( double ) ( arc_font_data [ i + 1 ] ) , ( double ) ( arc_font_data [ i + 2 ] ) )"		8131821	0		=			
ANR	8131959	Identifier	code		8131821	0					
ANR	8131960	CallExpression	"gs_moveto ( data , ( double ) ( arc_font_data [ i + 1 ] ) , ( double ) ( arc_font_data [ i + 2 ] ) )"		8131821	1					
ANR	8131961	Callee	gs_moveto		8131821	0					
ANR	8131962	Identifier	gs_moveto		8131821	0					
ANR	8131963	ArgumentList	data		8131821	1					
ANR	8131964	Argument	data		8131821	0					
ANR	8131965	Identifier	data		8131821	0					
ANR	8131966	Argument	( double ) ( arc_font_data [ i + 1 ] )		8131821	1					
ANR	8131967	CastExpression	( double ) ( arc_font_data [ i + 1 ] )		8131821	0					
ANR	8131968	CastTarget	double		8131821	0					
ANR	8131969	ArrayIndexing	arc_font_data [ i + 1 ]		8131821	1					
ANR	8131970	Identifier	arc_font_data		8131821	0					
ANR	8131971	AdditiveExpression	i + 1		8131821	1		+			
ANR	8131972	Identifier	i		8131821	0					
ANR	8131973	PrimaryExpression	1		8131821	1					
ANR	8131974	Argument	( double ) ( arc_font_data [ i + 2 ] )		8131821	2					
ANR	8131975	CastExpression	( double ) ( arc_font_data [ i + 2 ] )		8131821	0					
ANR	8131976	CastTarget	double		8131821	0					
ANR	8131977	ArrayIndexing	arc_font_data [ i + 2 ]		8131821	1					
ANR	8131978	Identifier	arc_font_data		8131821	0					
ANR	8131979	AdditiveExpression	i + 2		8131821	1		+			
ANR	8131980	Identifier	i		8131821	0					
ANR	8131981	PrimaryExpression	2		8131821	1					
ANR	8131982	IfStatement	if ( code < 0 )		8131821	1					
ANR	8131983	Condition	code < 0	5161:16:125334:125341	8131821	0	True				
ANR	8131984	RelationalExpression	code < 0		8131821	0		<			
ANR	8131985	Identifier	code		8131821	0					
ANR	8131986	PrimaryExpression	0		8131821	1					
ANR	8131987	ReturnStatement	return code ;	5162:16:125360:125371	8131821	1	True				
ANR	8131988	Identifier	code		8131821	0					
ANR	8131989	ExpressionStatement	i += 3	5163:12:125385:125391	8131821	2	True				
ANR	8131990	AssignmentExpression	i += 3		8131821	0		+=			
ANR	8131991	Identifier	i		8131821	0					
ANR	8131992	PrimaryExpression	3		8131821	1					
ANR	8131993	ElseStatement	else		8131821	0					
ANR	8131994	IfStatement	if ( arc_font_data [ i ] == FNT_CURVETO )		8131821	0					
ANR	8131995	Condition	arc_font_data [ i ] == FNT_CURVETO	5164:19:125412:125442	8131821	0	True				
ANR	8131996	EqualityExpression	arc_font_data [ i ] == FNT_CURVETO		8131821	0		==			
ANR	8131997	ArrayIndexing	arc_font_data [ i ]		8131821	0					
ANR	8131998	Identifier	arc_font_data		8131821	0					
ANR	8131999	Identifier	i		8131821	1					
ANR	8132000	Identifier	FNT_CURVETO		8131821	1					
ANR	8132001	CompoundStatement		35:52:1381:1381	8131821	1					
ANR	8132002	ExpressionStatement	"code = gs_curveto ( data , ( double ) ( arc_font_data [ i + 1 ] ) , ( double ) ( arc_font_data [ i + 2 ] ) , ( double ) ( arc_font_data [ i + 3 ] ) , ( double ) ( arc_font_data [ i + 4 ] ) , ( double ) ( arc_font_data [ i + 5 ] ) , ( double ) ( arc_font_data [ i + 6 ] ) )"	5165:12:125459:125795	8131821	0	True				
ANR	8132003	AssignmentExpression	"code = gs_curveto ( data , ( double ) ( arc_font_data [ i + 1 ] ) , ( double ) ( arc_font_data [ i + 2 ] ) , ( double ) ( arc_font_data [ i + 3 ] ) , ( double ) ( arc_font_data [ i + 4 ] ) , ( double ) ( arc_font_data [ i + 5 ] ) , ( double ) ( arc_font_data [ i + 6 ] ) )"		8131821	0		=			
ANR	8132004	Identifier	code		8131821	0					
ANR	8132005	CallExpression	"gs_curveto ( data , ( double ) ( arc_font_data [ i + 1 ] ) , ( double ) ( arc_font_data [ i + 2 ] ) , ( double ) ( arc_font_data [ i + 3 ] ) , ( double ) ( arc_font_data [ i + 4 ] ) , ( double ) ( arc_font_data [ i + 5 ] ) , ( double ) ( arc_font_data [ i + 6 ] ) )"		8131821	1					
ANR	8132006	Callee	gs_curveto		8131821	0					
ANR	8132007	Identifier	gs_curveto		8131821	0					
ANR	8132008	ArgumentList	data		8131821	1					
ANR	8132009	Argument	data		8131821	0					
ANR	8132010	Identifier	data		8131821	0					
ANR	8132011	Argument	( double ) ( arc_font_data [ i + 1 ] )		8131821	1					
ANR	8132012	CastExpression	( double ) ( arc_font_data [ i + 1 ] )		8131821	0					
ANR	8132013	CastTarget	double		8131821	0					
ANR	8132014	ArrayIndexing	arc_font_data [ i + 1 ]		8131821	1					
ANR	8132015	Identifier	arc_font_data		8131821	0					
ANR	8132016	AdditiveExpression	i + 1		8131821	1		+			
ANR	8132017	Identifier	i		8131821	0					
ANR	8132018	PrimaryExpression	1		8131821	1					
ANR	8132019	Argument	( double ) ( arc_font_data [ i + 2 ] )		8131821	2					
ANR	8132020	CastExpression	( double ) ( arc_font_data [ i + 2 ] )		8131821	0					
ANR	8132021	CastTarget	double		8131821	0					
ANR	8132022	ArrayIndexing	arc_font_data [ i + 2 ]		8131821	1					
ANR	8132023	Identifier	arc_font_data		8131821	0					
ANR	8132024	AdditiveExpression	i + 2		8131821	1		+			
ANR	8132025	Identifier	i		8131821	0					
ANR	8132026	PrimaryExpression	2		8131821	1					
ANR	8132027	Argument	( double ) ( arc_font_data [ i + 3 ] )		8131821	3					
ANR	8132028	CastExpression	( double ) ( arc_font_data [ i + 3 ] )		8131821	0					
ANR	8132029	CastTarget	double		8131821	0					
ANR	8132030	ArrayIndexing	arc_font_data [ i + 3 ]		8131821	1					
ANR	8132031	Identifier	arc_font_data		8131821	0					
ANR	8132032	AdditiveExpression	i + 3		8131821	1		+			
ANR	8132033	Identifier	i		8131821	0					
ANR	8132034	PrimaryExpression	3		8131821	1					
ANR	8132035	Argument	( double ) ( arc_font_data [ i + 4 ] )		8131821	4					
ANR	8132036	CastExpression	( double ) ( arc_font_data [ i + 4 ] )		8131821	0					
ANR	8132037	CastTarget	double		8131821	0					
ANR	8132038	ArrayIndexing	arc_font_data [ i + 4 ]		8131821	1					
ANR	8132039	Identifier	arc_font_data		8131821	0					
ANR	8132040	AdditiveExpression	i + 4		8131821	1		+			
ANR	8132041	Identifier	i		8131821	0					
ANR	8132042	PrimaryExpression	4		8131821	1					
ANR	8132043	Argument	( double ) ( arc_font_data [ i + 5 ] )		8131821	5					
ANR	8132044	CastExpression	( double ) ( arc_font_data [ i + 5 ] )		8131821	0					
ANR	8132045	CastTarget	double		8131821	0					
ANR	8132046	ArrayIndexing	arc_font_data [ i + 5 ]		8131821	1					
ANR	8132047	Identifier	arc_font_data		8131821	0					
ANR	8132048	AdditiveExpression	i + 5		8131821	1		+			
ANR	8132049	Identifier	i		8131821	0					
ANR	8132050	PrimaryExpression	5		8131821	1					
ANR	8132051	Argument	( double ) ( arc_font_data [ i + 6 ] )		8131821	6					
ANR	8132052	CastExpression	( double ) ( arc_font_data [ i + 6 ] )		8131821	0					
ANR	8132053	CastTarget	double		8131821	0					
ANR	8132054	ArrayIndexing	arc_font_data [ i + 6 ]		8131821	1					
ANR	8132055	Identifier	arc_font_data		8131821	0					
ANR	8132056	AdditiveExpression	i + 6		8131821	1		+			
ANR	8132057	Identifier	i		8131821	0					
ANR	8132058	PrimaryExpression	6		8131821	1					
ANR	8132059	IfStatement	if ( code < 0 )		8131821	1					
ANR	8132060	Condition	code < 0	5171:16:125813:125820	8131821	0	True				
ANR	8132061	RelationalExpression	code < 0		8131821	0		<			
ANR	8132062	Identifier	code		8131821	0					
ANR	8132063	PrimaryExpression	0		8131821	1					
ANR	8132064	ReturnStatement	return code ;	5172:16:125839:125850	8131821	1	True				
ANR	8132065	Identifier	code		8131821	0					
ANR	8132066	ExpressionStatement	i += 7	5173:12:125864:125870	8131821	2	True				
ANR	8132067	AssignmentExpression	i += 7		8131821	0		+=			
ANR	8132068	Identifier	i		8131821	0					
ANR	8132069	PrimaryExpression	7		8131821	1					
ANR	8132070	ElseStatement	else		8131821	0					
ANR	8132071	ExpressionStatement	return_error ( gs_error_invalidfont )	5175:12:125899:125933	8131821	0	True				
ANR	8132072	CallExpression	return_error ( gs_error_invalidfont )		8131821	0					
ANR	8132073	Callee	return_error		8131821	0					
ANR	8132074	Identifier	return_error		8131821	0					
ANR	8132075	ArgumentList	gs_error_invalidfont		8131821	1					
ANR	8132076	Argument	gs_error_invalidfont		8131821	0					
ANR	8132077	Identifier	gs_error_invalidfont		8131821	0					
ANR	8132078	IfStatement	if ( i != stop )		8131821	9					
ANR	8132079	Condition	i != stop	5179:8:126014:126022	8131821	0	True				
ANR	8132080	EqualityExpression	i != stop		8131821	0		!=			
ANR	8132081	Identifier	i		8131821	0					
ANR	8132082	Identifier	stop		8131821	1					
ANR	8132083	ExpressionStatement	return_error ( gs_error_invalidfont )	5180:8:126033:126067	8131821	1	True				
ANR	8132084	CallExpression	return_error ( gs_error_invalidfont )		8131821	0					
ANR	8132085	Callee	return_error		8131821	0					
ANR	8132086	Identifier	return_error		8131821	0					
ANR	8132087	ArgumentList	gs_error_invalidfont		8131821	1					
ANR	8132088	Argument	gs_error_invalidfont		8131821	0					
ANR	8132089	Identifier	gs_error_invalidfont		8131821	0					
ANR	8132090	ReturnStatement	return 0 ;	5181:4:126073:126081	8131821	10	True				
ANR	8132091	PrimaryExpression	0		8131821	0					
ANR	8132092	ReturnType	static int		8131821	1					
ANR	8132093	Identifier	hpgl_arc_segments		8131821	2					
ANR	8132094	ParameterList	"const gs_memory_t * mem , void * data , uint char_index"		8131821	3					
ANR	8132095	Parameter	const gs_memory_t * mem	5129:18:124009:124031	8131821	0	True				
ANR	8132096	ParameterType	const gs_memory_t *		8131821	0					
ANR	8132097	Identifier	mem		8131821	1					
ANR	8132098	Parameter	void * data	5129:43:124034:124043	8131821	1	True				
ANR	8132099	ParameterType	void *		8131821	0					
ANR	8132100	Identifier	data		8131821	1					
ANR	8132101	Parameter	uint char_index	5129:55:124046:124060	8131821	2	True				
ANR	8132102	ParameterType	uint		8131821	0					
ANR	8132103	Identifier	char_index		8131821	1					
ANR	8132104	CFGEntryNode	ENTRY		8131821		True				
ANR	8132105	CFGExitNode	EXIT		8131821		True				
ANR	8132106	Symbol	* arc_font_offsets		8131821						
ANR	8132107	Symbol	code		8131821						
ANR	8132108	Symbol	data		8131821						
ANR	8132109	Symbol	offset		8131821						
ANR	8132110	Symbol	* table_index_of_char		8131821						
ANR	8132111	Symbol	gs_lineto		8131821						
ANR	8132112	Symbol	count		8131821						
ANR	8132113	Symbol	i		8131821						
ANR	8132114	Symbol	char_index		8131821						
ANR	8132115	Symbol	* arc_font_data		8131821						
ANR	8132116	Symbol	gs_moveto		8131821						
ANR	8132117	Symbol	arc_font_data		8131821						
ANR	8132118	Symbol	gs_curveto		8131821						
ANR	8132119	Symbol	FNT_CURVETO		8131821						
ANR	8132120	Symbol	* i		8131821						
ANR	8132121	Symbol	mem		8131821						
ANR	8132122	Symbol	stop		8131821						
ANR	8132123	Symbol	FNT_MOVETO		8131821						
ANR	8132124	Symbol	arc_font_offsets		8131821						
ANR	8132125	Symbol	FNT_LINETO		8131821						
ANR	8132126	Symbol	table_index_of_char		8131821						
ANR	8132127	Symbol	gs_error_invalidfont		8131821						
ANR	8132128	Function	hpgl_stick_width	5184:0:126086:126219							
ANR	8132129	FunctionDef	hpgl_stick_width (uint char_index)		8132128	0					
ANR	8132130	CompoundStatement		5186:0:126131:126219	8132128	0					
ANR	8132131	ReturnStatement	return 1024 ;	5188:4:126206:126217	8132128	0	True				
ANR	8132132	PrimaryExpression	1024		8132128	0					
ANR	8132133	ReturnType	static int		8132128	1					
ANR	8132134	Identifier	hpgl_stick_width		8132128	2					
ANR	8132135	ParameterList	uint char_index		8132128	3					
ANR	8132136	Parameter	uint char_index	5185:17:126114:126128	8132128	0	True				
ANR	8132137	ParameterType	uint		8132128	0					
ANR	8132138	Identifier	char_index		8132128	1					
ANR	8132139	CFGEntryNode	ENTRY		8132128		True				
ANR	8132140	CFGExitNode	EXIT		8132128		True				
ANR	8132141	Symbol	char_index		8132128						
ANR	8132142	Function	hpgl_arc_width	5192:0:126277:126478							
ANR	8132143	FunctionDef	hpgl_arc_width (gs_char char_index)		8132142	0					
ANR	8132144	CompoundStatement		5194:0:126323:126478	8132142	0					
ANR	8132145	IfStatement	if ( char_index < 0x20 || ( char_index < 0xa0 && char_index > 0x7f ) )		8132142	0					
ANR	8132146	Condition	char_index < 0x20 || ( char_index < 0xa0 && char_index > 0x7f )	5195:8:126333:126393	8132142	0	True				
ANR	8132147	OrExpression	char_index < 0x20 || ( char_index < 0xa0 && char_index > 0x7f )		8132142	0		||			
ANR	8132148	RelationalExpression	char_index < 0x20		8132142	0		<			
ANR	8132149	Identifier	char_index		8132142	0					
ANR	8132150	PrimaryExpression	0x20		8132142	1					
ANR	8132151	AndExpression	char_index < 0xa0 && char_index > 0x7f		8132142	1		&&			
ANR	8132152	RelationalExpression	char_index < 0xa0		8132142	0		<			
ANR	8132153	Identifier	char_index		8132142	0					
ANR	8132154	PrimaryExpression	0xa0		8132142	1					
ANR	8132155	RelationalExpression	char_index > 0x7f		8132142	1		>			
ANR	8132156	Identifier	char_index		8132142	0					
ANR	8132157	PrimaryExpression	0x7f		8132142	1					
ANR	8132158	ReturnStatement	return arc_font_widths [ 0 ] ;	5196:8:126404:126429	8132142	1	True				
ANR	8132159	ArrayIndexing	arc_font_widths [ 0 ]		8132142	0					
ANR	8132160	Identifier	arc_font_widths		8132142	0					
ANR	8132161	PrimaryExpression	0		8132142	1					
ANR	8132162	ReturnStatement	return arc_font_widths [ char_index - 0x20 ] ;	5197:4:126435:126476	8132142	1	True				
ANR	8132163	ArrayIndexing	arc_font_widths [ char_index - 0x20 ]		8132142	0					
ANR	8132164	Identifier	arc_font_widths		8132142	0					
ANR	8132165	AdditiveExpression	char_index - 0x20		8132142	1		-			
ANR	8132166	Identifier	char_index		8132142	0					
ANR	8132167	PrimaryExpression	0x20		8132142	1					
ANR	8132168	ReturnType	static int		8132142	1					
ANR	8132169	Identifier	hpgl_arc_width		8132142	2					
ANR	8132170	ParameterList	gs_char char_index		8132142	3					
ANR	8132171	Parameter	gs_char char_index	5193:15:126303:126320	8132142	0	True				
ANR	8132172	ParameterType	gs_char		8132142	0					
ANR	8132173	Identifier	char_index		8132142	1					
ANR	8132174	CFGEntryNode	ENTRY		8132142		True				
ANR	8132175	CFGExitNode	EXIT		8132142		True				
ANR	8132176	Symbol	* char_index		8132142						
ANR	8132177	Symbol	char_index		8132142						
ANR	8132178	Symbol	* arc_font_widths		8132142						
ANR	8132179	Symbol	arc_font_widths		8132142						
ANR	8132180	Function	hpgl_stick_arc_segments	5201:0:126529:126853							
ANR	8132181	FunctionDef	"hpgl_stick_arc_segments (const gs_memory_t * mem , void * data , gs_char char_index , hpgl_font_type_t font_type)"		8132180	0					
ANR	8132182	CompoundStatement		5205:0:126690:126853	8132180	0					
ANR	8132183	IfStatement	if ( font_type == HPGL_ARC_FONT )		8132180	0					
ANR	8132184	Condition	font_type == HPGL_ARC_FONT	5206:8:126700:126725	8132180	0	True				
ANR	8132185	EqualityExpression	font_type == HPGL_ARC_FONT		8132180	0		==			
ANR	8132186	Identifier	font_type		8132180	0					
ANR	8132187	Identifier	HPGL_ARC_FONT		8132180	1					
ANR	8132188	ReturnStatement	"return hpgl_arc_segments ( mem , data , char_index ) ;"	5207:8:126736:126783	8132180	1	True				
ANR	8132189	CallExpression	"hpgl_arc_segments ( mem , data , char_index )"		8132180	0					
ANR	8132190	Callee	hpgl_arc_segments		8132180	0					
ANR	8132191	Identifier	hpgl_arc_segments		8132180	0					
ANR	8132192	ArgumentList	mem		8132180	1					
ANR	8132193	Argument	mem		8132180	0					
ANR	8132194	Identifier	mem		8132180	0					
ANR	8132195	Argument	data		8132180	1					
ANR	8132196	Identifier	data		8132180	0					
ANR	8132197	Argument	char_index		8132180	2					
ANR	8132198	Identifier	char_index		8132180	0					
ANR	8132199	ElseStatement	else		8132180	0					
ANR	8132200	ReturnStatement	"return hpgl_stick_segments ( mem , data , char_index ) ;"	5209:8:126802:126851	8132180	0	True				
ANR	8132201	CallExpression	"hpgl_stick_segments ( mem , data , char_index )"		8132180	0					
ANR	8132202	Callee	hpgl_stick_segments		8132180	0					
ANR	8132203	Identifier	hpgl_stick_segments		8132180	0					
ANR	8132204	ArgumentList	mem		8132180	1					
ANR	8132205	Argument	mem		8132180	0					
ANR	8132206	Identifier	mem		8132180	0					
ANR	8132207	Argument	data		8132180	1					
ANR	8132208	Identifier	data		8132180	0					
ANR	8132209	Argument	char_index		8132180	2					
ANR	8132210	Identifier	char_index		8132180	0					
ANR	8132211	ReturnType	int		8132180	1					
ANR	8132212	Identifier	hpgl_stick_arc_segments		8132180	2					
ANR	8132213	ParameterList	"const gs_memory_t * mem , void * data , gs_char char_index , hpgl_font_type_t font_type"		8132180	3					
ANR	8132214	Parameter	const gs_memory_t * mem	5202:24:126557:126579	8132180	0	True				
ANR	8132215	ParameterType	const gs_memory_t *		8132180	0					
ANR	8132216	Identifier	mem		8132180	1					
ANR	8132217	Parameter	void * data	5203:24:126606:126615	8132180	1	True				
ANR	8132218	ParameterType	void *		8132180	0					
ANR	8132219	Identifier	data		8132180	1					
ANR	8132220	Parameter	gs_char char_index	5203:36:126618:126635	8132180	2	True				
ANR	8132221	ParameterType	gs_char		8132180	0					
ANR	8132222	Identifier	char_index		8132180	1					
ANR	8132223	Parameter	hpgl_font_type_t font_type	5204:24:126662:126687	8132180	3	True				
ANR	8132224	ParameterType	hpgl_font_type_t		8132180	0					
ANR	8132225	Identifier	font_type		8132180	1					
ANR	8132226	CFGEntryNode	ENTRY		8132180		True				
ANR	8132227	CFGExitNode	EXIT		8132180		True				
ANR	8132228	Symbol	hpgl_arc_segments		8132180						
ANR	8132229	Symbol	mem		8132180						
ANR	8132230	Symbol	data		8132180						
ANR	8132231	Symbol	HPGL_ARC_FONT		8132180						
ANR	8132232	Symbol	char_index		8132180						
ANR	8132233	Symbol	font_type		8132180						
ANR	8132234	Symbol	hpgl_stick_segments		8132180						
ANR	8132235	Function	hpgl_stick_arc_width	5213:0:126917:127125							
ANR	8132236	FunctionDef	"hpgl_stick_arc_width (gs_char char_index , hpgl_font_type_t font_type)"		8132235	0					
ANR	8132237	CompoundStatement		5215:0:126990:127125	8132235	0					
ANR	8132238	IfStatement	if ( font_type == HPGL_ARC_FONT )		8132235	0					
ANR	8132239	Condition	font_type == HPGL_ARC_FONT	5216:8:127000:127025	8132235	0	True				
ANR	8132240	EqualityExpression	font_type == HPGL_ARC_FONT		8132235	0		==			
ANR	8132241	Identifier	font_type		8132235	0					
ANR	8132242	Identifier	HPGL_ARC_FONT		8132235	1					
ANR	8132243	ReturnStatement	return hpgl_arc_width ( char_index ) ;	5217:8:127036:127069	8132235	1	True				
ANR	8132244	CallExpression	hpgl_arc_width ( char_index )		8132235	0					
ANR	8132245	Callee	hpgl_arc_width		8132235	0					
ANR	8132246	Identifier	hpgl_arc_width		8132235	0					
ANR	8132247	ArgumentList	char_index		8132235	1					
ANR	8132248	Argument	char_index		8132235	0					
ANR	8132249	Identifier	char_index		8132235	0					
ANR	8132250	ElseStatement	else		8132235	0					
ANR	8132251	ReturnStatement	return hpgl_stick_width ( char_index ) ;	5219:8:127088:127123	8132235	0	True				
ANR	8132252	CallExpression	hpgl_stick_width ( char_index )		8132235	0					
ANR	8132253	Callee	hpgl_stick_width		8132235	0					
ANR	8132254	Identifier	hpgl_stick_width		8132235	0					
ANR	8132255	ArgumentList	char_index		8132235	1					
ANR	8132256	Argument	char_index		8132235	0					
ANR	8132257	Identifier	char_index		8132235	0					
ANR	8132258	ReturnType	int		8132235	1					
ANR	8132259	Identifier	hpgl_stick_arc_width		8132235	2					
ANR	8132260	ParameterList	"gs_char char_index , hpgl_font_type_t font_type"		8132235	3					
ANR	8132261	Parameter	gs_char char_index	5214:21:126942:126959	8132235	0	True				
ANR	8132262	ParameterType	gs_char		8132235	0					
ANR	8132263	Identifier	char_index		8132235	1					
ANR	8132264	Parameter	hpgl_font_type_t font_type	5214:41:126962:126987	8132235	1	True				
ANR	8132265	ParameterType	hpgl_font_type_t		8132235	0					
ANR	8132266	Identifier	font_type		8132235	1					
ANR	8132267	CFGEntryNode	ENTRY		8132235		True				
ANR	8132268	CFGExitNode	EXIT		8132235		True				
ANR	8132269	Symbol	HPGL_ARC_FONT		8132235						
ANR	8132270	Symbol	char_index		8132235						
ANR	8132271	Symbol	hpgl_stick_width		8132235						
ANR	8132272	Symbol	font_type		8132235						
ANR	8132273	Symbol	hpgl_arc_width		8132235						
