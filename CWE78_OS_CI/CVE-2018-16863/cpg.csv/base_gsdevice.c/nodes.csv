command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	505428	File	data/converged/CVE-2018-16863_ghostpdl/base_gsdevice.c								
ANR	505429	Function	gx_device_finalize	48:0:1475:3743							
ANR	505430	FunctionDef	"gx_device_finalize (const gs_memory_t * cmem , void * vptr)"		505429	0					
ANR	505431	CompoundStatement		50:0:1536:3743	505429	0					
ANR	505432	Statement	gx_device	51:4:1542:1550	505429	0	True				
ANR	505433	Statement	*	51:14:1552:1552	505429	1	True				
ANR	505434	Statement	const	51:16:1554:1558	505429	2	True				
ANR	505435	ExpressionStatement	dev = ( gx_device * ) vptr	51:22:1560:1583	505429	3	True				
ANR	505436	AssignmentExpression	dev = ( gx_device * ) vptr		505429	0		=			
ANR	505437	Identifier	dev		505429	0					
ANR	505438	CastExpression	( gx_device * ) vptr		505429	1					
ANR	505439	CastTarget	gx_device *		505429	0					
ANR	505440	Identifier	vptr		505429	1					
ANR	505441	ExpressionStatement	( void ) cmem	52:4:1589:1599	505429	4	True				
ANR	505442	CastExpression	( void ) cmem		505429	0					
ANR	505443	CastTarget	void		505429	0					
ANR	505444	Identifier	cmem		505429	1					
ANR	505445	IfStatement	if ( dev -> icc_struct != NULL )		505429	5					
ANR	505446	Condition	dev -> icc_struct != NULL	54:8:1623:1645	505429	0	True				
ANR	505447	EqualityExpression	dev -> icc_struct != NULL		505429	0		!=			
ANR	505448	PtrMemberAccess	dev -> icc_struct		505429	0					
ANR	505449	Identifier	dev		505429	0					
ANR	505450	Identifier	icc_struct		505429	1					
ANR	505451	Identifier	NULL		505429	1					
ANR	505452	CompoundStatement		5:33:111:111	505429	1					
ANR	505453	ExpressionStatement	"rc_decrement ( dev -> icc_struct , ""gx_device_finalize(icc_profile)"" )"	55:8:1658:1722	505429	0	True				
ANR	505454	CallExpression	"rc_decrement ( dev -> icc_struct , ""gx_device_finalize(icc_profile)"" )"		505429	0					
ANR	505455	Callee	rc_decrement		505429	0					
ANR	505456	Identifier	rc_decrement		505429	0					
ANR	505457	ArgumentList	dev -> icc_struct		505429	1					
ANR	505458	Argument	dev -> icc_struct		505429	0					
ANR	505459	PtrMemberAccess	dev -> icc_struct		505429	0					
ANR	505460	Identifier	dev		505429	0					
ANR	505461	Identifier	icc_struct		505429	1					
ANR	505462	Argument	"""gx_device_finalize(icc_profile)"""		505429	1					
ANR	505463	PrimaryExpression	"""gx_device_finalize(icc_profile)"""		505429	0					
ANR	505464	IfStatement	if ( dev -> finalize )		505429	6					
ANR	505465	Condition	dev -> finalize	57:8:1738:1750	505429	0	True				
ANR	505466	PtrMemberAccess	dev -> finalize		505429	0					
ANR	505467	Identifier	dev		505429	0					
ANR	505468	Identifier	finalize		505429	1					
ANR	505469	ExpressionStatement	dev -> finalize ( dev )	58:8:1761:1779	505429	1	True				
ANR	505470	CallExpression	dev -> finalize ( dev )		505429	0					
ANR	505471	Callee	dev -> finalize		505429	0					
ANR	505472	PtrMemberAccess	dev -> finalize		505429	0					
ANR	505473	Identifier	dev		505429	0					
ANR	505474	Identifier	finalize		505429	1					
ANR	505475	ArgumentList	dev		505429	1					
ANR	505476	Argument	dev		505429	0					
ANR	505477	Identifier	dev		505429	0					
ANR	505478	IfStatement	if ( dev -> child )		505429	7					
ANR	505479	Condition	dev -> child	65:8:2104:2113	505429	0	True				
ANR	505480	PtrMemberAccess	dev -> child		505429	0					
ANR	505481	Identifier	dev		505429	0					
ANR	505482	Identifier	child		505429	1					
ANR	505483	ExpressionStatement	dev -> child -> parent = dev -> parent	66:8:2124:2156	505429	1	True				
ANR	505484	AssignmentExpression	dev -> child -> parent = dev -> parent		505429	0		=			
ANR	505485	PtrMemberAccess	dev -> child -> parent		505429	0					
ANR	505486	PtrMemberAccess	dev -> child		505429	0					
ANR	505487	Identifier	dev		505429	0					
ANR	505488	Identifier	child		505429	1					
ANR	505489	Identifier	parent		505429	1					
ANR	505490	PtrMemberAccess	dev -> parent		505429	1					
ANR	505491	Identifier	dev		505429	0					
ANR	505492	Identifier	parent		505429	1					
ANR	505493	IfStatement	if ( dev -> parent )		505429	8					
ANR	505494	Condition	dev -> parent	67:8:2166:2176	505429	0	True				
ANR	505495	PtrMemberAccess	dev -> parent		505429	0					
ANR	505496	Identifier	dev		505429	0					
ANR	505497	Identifier	parent		505429	1					
ANR	505498	ExpressionStatement	dev -> parent -> child = dev -> child	68:8:2187:2218	505429	1	True				
ANR	505499	AssignmentExpression	dev -> parent -> child = dev -> child		505429	0		=			
ANR	505500	PtrMemberAccess	dev -> parent -> child		505429	0					
ANR	505501	PtrMemberAccess	dev -> parent		505429	0					
ANR	505502	Identifier	dev		505429	0					
ANR	505503	Identifier	parent		505429	1					
ANR	505504	Identifier	child		505429	1					
ANR	505505	PtrMemberAccess	dev -> child		505429	1					
ANR	505506	Identifier	dev		505429	0					
ANR	505507	Identifier	child		505429	1					
ANR	505508	IfStatement	if ( dev -> PageList )		505429	9					
ANR	505509	Condition	dev -> PageList	69:8:2228:2240	505429	0	True				
ANR	505510	PtrMemberAccess	dev -> PageList		505429	0					
ANR	505511	Identifier	dev		505429	0					
ANR	505512	Identifier	PageList		505429	1					
ANR	505513	CompoundStatement		20:23:706:706	505429	1					
ANR	505514	ExpressionStatement	"rc_decrement ( dev -> PageList , ""gx_device_finalize(PageList)"" )"	70:8:2253:2312	505429	0	True				
ANR	505515	CallExpression	"rc_decrement ( dev -> PageList , ""gx_device_finalize(PageList)"" )"		505429	0					
ANR	505516	Callee	rc_decrement		505429	0					
ANR	505517	Identifier	rc_decrement		505429	0					
ANR	505518	ArgumentList	dev -> PageList		505429	1					
ANR	505519	Argument	dev -> PageList		505429	0					
ANR	505520	PtrMemberAccess	dev -> PageList		505429	0					
ANR	505521	Identifier	dev		505429	0					
ANR	505522	Identifier	PageList		505429	1					
ANR	505523	Argument	"""gx_device_finalize(PageList)"""		505429	1					
ANR	505524	PrimaryExpression	"""gx_device_finalize(PageList)"""		505429	0					
ANR	505525	ExpressionStatement	dev -> PageList = 0	71:8:2322:2339	505429	1	True				
ANR	505526	AssignmentExpression	dev -> PageList = 0		505429	0		=			
ANR	505527	PtrMemberAccess	dev -> PageList		505429	0					
ANR	505528	Identifier	dev		505429	0					
ANR	505529	Identifier	PageList		505429	1					
ANR	505530	PrimaryExpression	0		505429	1					
ANR	505531	ExpressionStatement	discard ( gs_closedevice ( dev ) )	74:4:2352:2380	505429	10	True				
ANR	505532	CallExpression	discard ( gs_closedevice ( dev ) )		505429	0					
ANR	505533	Callee	discard		505429	0					
ANR	505534	Identifier	discard		505429	0					
ANR	505535	ArgumentList	gs_closedevice ( dev )		505429	1					
ANR	505536	Argument	gs_closedevice ( dev )		505429	0					
ANR	505537	CallExpression	gs_closedevice ( dev )		505429	0					
ANR	505538	Callee	gs_closedevice		505429	0					
ANR	505539	Identifier	gs_closedevice		505429	0					
ANR	505540	ArgumentList	dev		505429	1					
ANR	505541	Argument	dev		505429	0					
ANR	505542	Identifier	dev		505429	0					
ANR	505543	IfStatement	if ( dev -> stype_is_dynamic )		505429	11					
ANR	505544	Condition	dev -> stype_is_dynamic	75:8:2390:2410	505429	0	True				
ANR	505545	PtrMemberAccess	dev -> stype_is_dynamic		505429	0					
ANR	505546	Identifier	dev		505429	0					
ANR	505547	Identifier	stype_is_dynamic		505429	1					
ANR	505548	ExpressionStatement	"gs_free_const_object ( dev -> memory -> non_gc_memory , dev -> stype , ""gx_device_finalize"" )"	76:8:2421:2532	505429	1	True				
ANR	505549	CallExpression	"gs_free_const_object ( dev -> memory -> non_gc_memory , dev -> stype , ""gx_device_finalize"" )"		505429	0					
ANR	505550	Callee	gs_free_const_object		505429	0					
ANR	505551	Identifier	gs_free_const_object		505429	0					
ANR	505552	ArgumentList	dev -> memory -> non_gc_memory		505429	1					
ANR	505553	Argument	dev -> memory -> non_gc_memory		505429	0					
ANR	505554	PtrMemberAccess	dev -> memory -> non_gc_memory		505429	0					
ANR	505555	PtrMemberAccess	dev -> memory		505429	0					
ANR	505556	Identifier	dev		505429	0					
ANR	505557	Identifier	memory		505429	1					
ANR	505558	Identifier	non_gc_memory		505429	1					
ANR	505559	Argument	dev -> stype		505429	1					
ANR	505560	PtrMemberAccess	dev -> stype		505429	0					
ANR	505561	Identifier	dev		505429	0					
ANR	505562	Identifier	stype		505429	1					
ANR	505563	Argument	"""gx_device_finalize"""		505429	2					
ANR	505564	PrimaryExpression	"""gx_device_finalize"""		505429	0					
ANR	505565	IfStatement	if ( gs_debug_c ( '^' ) )		505429	12					
ANR	505566	Condition	gs_debug_c ( '^' )	97:8:3688:3702	505429	0	True				
ANR	505567	CallExpression	gs_debug_c ( '^' )		505429	0					
ANR	505568	Callee	gs_debug_c		505429	0					
ANR	505569	Identifier	gs_debug_c		505429	0					
ANR	505570	ArgumentList	'^'		505429	1					
ANR	505571	Argument	'^'		505429	0					
ANR	505572	PrimaryExpression	'^'		505429	0					
ANR	505573	ExpressionStatement	dev -> rc . memory = NULL	98:8:3713:3734	505429	1	True				
ANR	505574	AssignmentExpression	dev -> rc . memory = NULL		505429	0		=			
ANR	505575	MemberAccess	dev -> rc . memory		505429	0					
ANR	505576	PtrMemberAccess	dev -> rc		505429	0					
ANR	505577	Identifier	dev		505429	0					
ANR	505578	Identifier	rc		505429	1					
ANR	505579	Identifier	memory		505429	1					
ANR	505580	Identifier	NULL		505429	1					
ANR	505581	ReturnType	void		505429	1					
ANR	505582	Identifier	gx_device_finalize		505429	2					
ANR	505583	ParameterList	"const gs_memory_t * cmem , void * vptr"		505429	3					
ANR	505584	Parameter	const gs_memory_t * cmem	49:19:1499:1521	505429	0	True				
ANR	505585	ParameterType	const gs_memory_t *		505429	0					
ANR	505586	Identifier	cmem		505429	1					
ANR	505587	Parameter	void * vptr	49:44:1524:1533	505429	1	True				
ANR	505588	ParameterType	void *		505429	0					
ANR	505589	Identifier	vptr		505429	1					
ANR	505590	CFGEntryNode	ENTRY		505429		True				
ANR	505591	CFGExitNode	EXIT		505429		True				
ANR	505592	Symbol	* dev		505429						
ANR	505593	Symbol	* dev -> parent		505429						
ANR	505594	Symbol	dev -> stype_is_dynamic		505429						
ANR	505595	Symbol	NULL		505429						
ANR	505596	Symbol	dev -> child		505429						
ANR	505597	Symbol	* * dev		505429						
ANR	505598	Symbol	dev -> memory -> non_gc_memory		505429						
ANR	505599	Symbol	dev -> stype		505429						
ANR	505600	Symbol	dev -> parent		505429						
ANR	505601	Symbol	vptr		505429						
ANR	505602	Symbol	* dev -> child		505429						
ANR	505603	Symbol	dev -> memory		505429						
ANR	505604	Symbol	dev		505429						
ANR	505605	Symbol	dev -> rc		505429						
ANR	505606	Symbol	dev -> icc_struct		505429						
ANR	505607	Symbol	dev -> child -> parent		505429						
ANR	505608	Symbol	dev -> parent -> child		505429						
ANR	505609	Symbol	dev -> PageList		505429						
ANR	505610	Symbol	gs_debug_c		505429						
ANR	505611	Symbol	cmem		505429						
ANR	505612	Symbol	dev -> finalize		505429						
ANR	505613	Symbol	dev -> rc . memory		505429						
ANR	505614	Symbol	gs_closedevice		505429						
ANR	505615	Symbol	* dev -> memory		505429						
ANR	505616	Function	gx_device_free_local	103:0:3818:3904							
ANR	505617	FunctionDef	gx_device_free_local (gx_device * dev)		505616	0					
ANR	505618	CompoundStatement		105:0:3860:3904	505616	0					
ANR	505619	ExpressionStatement	"gx_device_finalize ( dev -> memory , dev )"	106:4:3866:3902	505616	0	True				
ANR	505620	CallExpression	"gx_device_finalize ( dev -> memory , dev )"		505616	0					
ANR	505621	Callee	gx_device_finalize		505616	0					
ANR	505622	Identifier	gx_device_finalize		505616	0					
ANR	505623	ArgumentList	dev -> memory		505616	1					
ANR	505624	Argument	dev -> memory		505616	0					
ANR	505625	PtrMemberAccess	dev -> memory		505616	0					
ANR	505626	Identifier	dev		505616	0					
ANR	505627	Identifier	memory		505616	1					
ANR	505628	Argument	dev		505616	1					
ANR	505629	Identifier	dev		505616	0					
ANR	505630	ReturnType	void		505616	1					
ANR	505631	Identifier	gx_device_free_local		505616	2					
ANR	505632	ParameterList	gx_device * dev		505616	3					
ANR	505633	Parameter	gx_device * dev	104:21:3844:3857	505616	0	True				
ANR	505634	ParameterType	gx_device *		505616	0					
ANR	505635	Identifier	dev		505616	1					
ANR	505636	CFGEntryNode	ENTRY		505616		True				
ANR	505637	CFGExitNode	EXIT		505616		True				
ANR	505638	Symbol	* dev		505616						
ANR	505639	Symbol	dev -> memory		505616						
ANR	505640	Symbol	dev		505616						
ANR	505641	DeclStmt									
ANR	505642	Decl							RELOC_PTRS_END	RELOC_PTRS_END ( )	public_st_device
ANR	505643	Function	gx_device_enum_ptr	142:0:4928:5050							
ANR	505644	FunctionDef	gx_device_enum_ptr (gx_device * dev)		505643	0					
ANR	505645	CompoundStatement		144:0:4976:5050	505643	0					
ANR	505646	IfStatement	if ( dev == 0 || dev -> memory == 0 )		505643	0					
ANR	505647	Condition	dev == 0 || dev -> memory == 0	145:8:4986:5013	505643	0	True				
ANR	505648	OrExpression	dev == 0 || dev -> memory == 0		505643	0		||			
ANR	505649	EqualityExpression	dev == 0		505643	0		==			
ANR	505650	Identifier	dev		505643	0					
ANR	505651	PrimaryExpression	0		505643	1					
ANR	505652	EqualityExpression	dev -> memory == 0		505643	1		==			
ANR	505653	PtrMemberAccess	dev -> memory		505643	0					
ANR	505654	Identifier	dev		505643	0					
ANR	505655	Identifier	memory		505643	1					
ANR	505656	PrimaryExpression	0		505643	1					
ANR	505657	ReturnStatement	return 0 ;	146:8:5024:5032	505643	1	True				
ANR	505658	PrimaryExpression	0		505643	0					
ANR	505659	ReturnStatement	return dev ;	147:4:5038:5048	505643	1	True				
ANR	505660	Identifier	dev		505643	0					
ANR	505661	ReturnType	gx_device *		505643	1					
ANR	505662	Identifier	gx_device_enum_ptr		505643	2					
ANR	505663	ParameterList	gx_device * dev		505643	3					
ANR	505664	Parameter	gx_device * dev	143:19:4959:4973	505643	0	True				
ANR	505665	ParameterType	gx_device *		505643	0					
ANR	505666	Identifier	dev		505643	1					
ANR	505667	CFGEntryNode	ENTRY		505643		True				
ANR	505668	CFGExitNode	EXIT		505643		True				
ANR	505669	Symbol	* dev		505643						
ANR	505670	Symbol	dev -> memory		505643						
ANR	505671	Symbol	dev		505643						
ANR	505672	Function	gx_device_reloc_ptr	149:0:5052:5227							
ANR	505673	FunctionDef	"gx_device_reloc_ptr (gx_device * dev , gc_state_t * gcst)"		505672	0					
ANR	505674	CompoundStatement		151:0:5120:5227	505672	0					
ANR	505675	IfStatement	if ( dev == 0 || dev -> memory == 0 )		505672	0					
ANR	505676	Condition	dev == 0 || dev -> memory == 0	152:8:5130:5157	505672	0	True				
ANR	505677	OrExpression	dev == 0 || dev -> memory == 0		505672	0		||			
ANR	505678	EqualityExpression	dev == 0		505672	0		==			
ANR	505679	Identifier	dev		505672	0					
ANR	505680	PrimaryExpression	0		505672	1					
ANR	505681	EqualityExpression	dev -> memory == 0		505672	1		==			
ANR	505682	PtrMemberAccess	dev -> memory		505672	0					
ANR	505683	Identifier	dev		505672	0					
ANR	505684	Identifier	memory		505672	1					
ANR	505685	PrimaryExpression	0		505672	1					
ANR	505686	ReturnStatement	return dev ;	153:8:5168:5178	505672	1	True				
ANR	505687	Identifier	dev		505672	0					
ANR	505688	ReturnStatement	return RELOC_OBJ ( dev ) ;	154:4:5184:5205	505672	1	True				
ANR	505689	CallExpression	RELOC_OBJ ( dev )		505672	0					
ANR	505690	Callee	RELOC_OBJ		505672	0					
ANR	505691	Identifier	RELOC_OBJ		505672	0					
ANR	505692	ArgumentList	dev		505672	1					
ANR	505693	Argument	dev		505672	0					
ANR	505694	Identifier	dev		505672	0					
ANR	505695	ReturnType	gx_device *		505672	1					
ANR	505696	Identifier	gx_device_reloc_ptr		505672	2					
ANR	505697	ParameterList	"gx_device * dev , gc_state_t * gcst"		505672	3					
ANR	505698	Parameter	gx_device * dev	150:20:5084:5098	505672	0	True				
ANR	505699	ParameterType	gx_device *		505672	0					
ANR	505700	Identifier	dev		505672	1					
ANR	505701	Parameter	gc_state_t * gcst	150:37:5101:5117	505672	1	True				
ANR	505702	ParameterType	gc_state_t *		505672	0					
ANR	505703	Identifier	gcst		505672	1					
ANR	505704	CFGEntryNode	ENTRY		505672		True				
ANR	505705	CFGExitNode	EXIT		505672		True				
ANR	505706	Symbol	* dev		505672						
ANR	505707	Symbol	dev -> memory		505672						
ANR	505708	Symbol	dev		505672						
ANR	505709	Symbol	RELOC_OBJ		505672						
ANR	505710	Symbol	gcst		505672						
ANR	505711	Function	gx_device_set_procs	159:0:5330:5515							
ANR	505712	FunctionDef	gx_device_set_procs (gx_device * dev)		505711	0					
ANR	505713	CompoundStatement		161:0:5372:5515	505711	0					
ANR	505714	IfStatement	if ( dev -> static_procs != 0 )		505711	0					
ANR	505715	Condition	dev -> static_procs != 0	162:8:5382:5403	505711	0	True				
ANR	505716	EqualityExpression	dev -> static_procs != 0		505711	0		!=			
ANR	505717	PtrMemberAccess	dev -> static_procs		505711	0					
ANR	505718	Identifier	dev		505711	0					
ANR	505719	Identifier	static_procs		505711	1					
ANR	505720	PrimaryExpression	0		505711	1					
ANR	505721	CompoundStatement		2:32:33:33	505711	1					
ANR	505722	ExpressionStatement	dev -> procs = * dev -> static_procs	163:8:5445:5476	505711	0	True				
ANR	505723	AssignmentExpression	dev -> procs = * dev -> static_procs		505711	0		=			
ANR	505724	PtrMemberAccess	dev -> procs		505711	0					
ANR	505725	Identifier	dev		505711	0					
ANR	505726	Identifier	procs		505711	1					
ANR	505727	UnaryOperationExpression	* dev -> static_procs		505711	1					
ANR	505728	UnaryOperator	*		505711	0					
ANR	505729	PtrMemberAccess	dev -> static_procs		505711	1					
ANR	505730	Identifier	dev		505711	0					
ANR	505731	Identifier	static_procs		505711	1					
ANR	505732	ExpressionStatement	dev -> static_procs = 0	164:8:5486:5507	505711	1	True				
ANR	505733	AssignmentExpression	dev -> static_procs = 0		505711	0		=			
ANR	505734	PtrMemberAccess	dev -> static_procs		505711	0					
ANR	505735	Identifier	dev		505711	0					
ANR	505736	Identifier	static_procs		505711	1					
ANR	505737	PrimaryExpression	0		505711	1					
ANR	505738	ReturnType	void		505711	1					
ANR	505739	Identifier	gx_device_set_procs		505711	2					
ANR	505740	ParameterList	gx_device * dev		505711	3					
ANR	505741	Parameter	gx_device * dev	160:20:5355:5369	505711	0	True				
ANR	505742	ParameterType	gx_device *		505711	0					
ANR	505743	Identifier	dev		505711	1					
ANR	505744	CFGEntryNode	ENTRY		505711		True				
ANR	505745	CFGExitNode	EXIT		505711		True				
ANR	505746	Symbol	* dev		505711						
ANR	505747	Symbol	dev -> procs		505711						
ANR	505748	Symbol	dev -> static_procs		505711						
ANR	505749	Symbol	dev		505711						
ANR	505750	Symbol	* * dev		505711						
ANR	505751	Symbol	* dev -> static_procs		505711						
ANR	505752	Function	gs_flushpage	169:0:5560:5689							
ANR	505753	FunctionDef	gs_flushpage (gs_gstate * pgs)		505752	0					
ANR	505754	CompoundStatement		171:0:5594:5689	505752	0					
ANR	505755	IdentifierDeclStatement	gx_device * dev = gs_currentdevice ( pgs ) ;	172:4:5600:5638	505752	0	True				
ANR	505756	IdentifierDecl	* dev = gs_currentdevice ( pgs )		505752	0					
ANR	505757	IdentifierDeclType	gx_device *		505752	0					
ANR	505758	Identifier	dev		505752	1					
ANR	505759	AssignmentExpression	* dev = gs_currentdevice ( pgs )		505752	2		=			
ANR	505760	Identifier	dev		505752	0					
ANR	505761	CallExpression	gs_currentdevice ( pgs )		505752	1					
ANR	505762	Callee	gs_currentdevice		505752	0					
ANR	505763	Identifier	gs_currentdevice		505752	0					
ANR	505764	ArgumentList	pgs		505752	1					
ANR	505765	Argument	pgs		505752	0					
ANR	505766	Identifier	pgs		505752	0					
ANR	505767	ReturnStatement	"return ( * dev_proc ( dev , sync_output ) ) ( dev ) ;"	174:4:5645:5687	505752	1	True				
ANR	505768	CallExpression	"( * dev_proc ( dev , sync_output ) ) ( dev )"		505752	0					
ANR	505769	Callee	"* dev_proc ( dev , sync_output )"		505752	0					
ANR	505770	UnaryOperationExpression	"* dev_proc ( dev , sync_output )"		505752	0					
ANR	505771	UnaryOperator	*		505752	0					
ANR	505772	CallExpression	"dev_proc ( dev , sync_output )"		505752	1					
ANR	505773	Callee	dev_proc		505752	0					
ANR	505774	Identifier	dev_proc		505752	0					
ANR	505775	ArgumentList	dev		505752	1					
ANR	505776	Argument	dev		505752	0					
ANR	505777	Identifier	dev		505752	0					
ANR	505778	Argument	sync_output		505752	1					
ANR	505779	Identifier	sync_output		505752	0					
ANR	505780	ArgumentList	dev		505752	1					
ANR	505781	Argument	dev		505752	0					
ANR	505782	Identifier	dev		505752	0					
ANR	505783	ReturnType	int		505752	1					
ANR	505784	Identifier	gs_flushpage		505752	2					
ANR	505785	ParameterList	gs_gstate * pgs		505752	3					
ANR	505786	Parameter	gs_gstate * pgs	170:13:5577:5591	505752	0	True				
ANR	505787	ParameterType	gs_gstate *		505752	0					
ANR	505788	Identifier	pgs		505752	1					
ANR	505789	CFGEntryNode	ENTRY		505752		True				
ANR	505790	CFGExitNode	EXIT		505752		True				
ANR	505791	Symbol	dev		505752						
ANR	505792	Symbol	dev_proc		505752						
ANR	505793	Symbol	"* dev_proc ( dev , sync_output )"		505752						
ANR	505794	Symbol	* dev_proc		505752						
ANR	505795	Symbol	gs_currentdevice		505752						
ANR	505796	Symbol	sync_output		505752						
ANR	505797	Symbol	pgs		505752						
ANR	505798	Function	gs_copypage	178:0:5754:5827							
ANR	505799	FunctionDef	gs_copypage (gs_gstate * pgs)		505798	0					
ANR	505800	CompoundStatement		180:0:5787:5827	505798	0					
ANR	505801	ReturnStatement	"return gs_output_page ( pgs , 1 , 0 ) ;"	181:4:5793:5825	505798	0	True				
ANR	505802	CallExpression	"gs_output_page ( pgs , 1 , 0 )"		505798	0					
ANR	505803	Callee	gs_output_page		505798	0					
ANR	505804	Identifier	gs_output_page		505798	0					
ANR	505805	ArgumentList	pgs		505798	1					
ANR	505806	Argument	pgs		505798	0					
ANR	505807	Identifier	pgs		505798	0					
ANR	505808	Argument	1		505798	1					
ANR	505809	PrimaryExpression	1		505798	0					
ANR	505810	Argument	0		505798	2					
ANR	505811	PrimaryExpression	0		505798	0					
ANR	505812	ReturnType	int		505798	1					
ANR	505813	Identifier	gs_copypage		505798	2					
ANR	505814	ParameterList	gs_gstate * pgs		505798	3					
ANR	505815	Parameter	gs_gstate * pgs	179:12:5770:5784	505798	0	True				
ANR	505816	ParameterType	gs_gstate *		505798	0					
ANR	505817	Identifier	pgs		505798	1					
ANR	505818	CFGEntryNode	ENTRY		505798		True				
ANR	505819	CFGExitNode	EXIT		505798		True				
ANR	505820	Symbol	gs_output_page		505798						
ANR	505821	Symbol	pgs		505798						
ANR	505822	Function	gs_output_page	183:0:5829:7058							
ANR	505823	FunctionDef	"gs_output_page (gs_gstate * pgs , int num_copies , int flush)"		505822	0					
ANR	505824	CompoundStatement		185:0:5892:7058	505822	0					
ANR	505825	IdentifierDeclStatement	gx_device * dev = gs_currentdevice ( pgs ) ;	186:4:5898:5936	505822	0	True				
ANR	505826	IdentifierDecl	* dev = gs_currentdevice ( pgs )		505822	0					
ANR	505827	IdentifierDeclType	gx_device *		505822	0					
ANR	505828	Identifier	dev		505822	1					
ANR	505829	AssignmentExpression	* dev = gs_currentdevice ( pgs )		505822	2		=			
ANR	505830	Identifier	dev		505822	0					
ANR	505831	CallExpression	gs_currentdevice ( pgs )		505822	1					
ANR	505832	Callee	gs_currentdevice		505822	0					
ANR	505833	Identifier	gs_currentdevice		505822	0					
ANR	505834	ArgumentList	pgs		505822	1					
ANR	505835	Argument	pgs		505822	0					
ANR	505836	Identifier	pgs		505822	0					
ANR	505837	IdentifierDeclStatement	cmm_dev_profile_t * dev_profile ;	187:4:5942:5972	505822	1	True				
ANR	505838	IdentifierDecl	* dev_profile		505822	0					
ANR	505839	IdentifierDeclType	cmm_dev_profile_t *		505822	0					
ANR	505840	Identifier	dev_profile		505822	1					
ANR	505841	IdentifierDeclStatement	int code ;	188:4:5978:5986	505822	2	True				
ANR	505842	IdentifierDecl	code		505822	0					
ANR	505843	IdentifierDeclType	int		505822	0					
ANR	505844	Identifier	code		505822	1					
ANR	505845	ExpressionStatement	code = gs_gsave ( pgs )	193:4:6208:6228	505822	3	True				
ANR	505846	AssignmentExpression	code = gs_gsave ( pgs )		505822	0		=			
ANR	505847	Identifier	code		505822	0					
ANR	505848	CallExpression	gs_gsave ( pgs )		505822	1					
ANR	505849	Callee	gs_gsave		505822	0					
ANR	505850	Identifier	gs_gsave		505822	0					
ANR	505851	ArgumentList	pgs		505822	1					
ANR	505852	Argument	pgs		505822	0					
ANR	505853	Identifier	pgs		505822	0					
ANR	505854	IfStatement	if ( code < 0 )		505822	4					
ANR	505855	Condition	code < 0	194:8:6238:6245	505822	0	True				
ANR	505856	RelationalExpression	code < 0		505822	0		<			
ANR	505857	Identifier	code		505822	0					
ANR	505858	PrimaryExpression	0		505822	1					
ANR	505859	ReturnStatement	return code ;	195:8:6256:6267	505822	1	True				
ANR	505860	Identifier	code		505822	0					
ANR	505861	IfStatement	"if ( ( ( code = gs_newpath ( pgs ) ) < 0 ) || ( ( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0 ) || ( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 ) )"		505822	5					
ANR	505862	Condition	"( ( code = gs_newpath ( pgs ) ) < 0 ) || ( ( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0 ) || ( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 )"	196:8:6277:6435	505822	0	True				
ANR	505863	OrExpression	"( ( code = gs_newpath ( pgs ) ) < 0 ) || ( ( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0 ) || ( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 )"		505822	0		||			
ANR	505864	RelationalExpression	( code = gs_newpath ( pgs ) ) < 0		505822	0		<			
ANR	505865	AssignmentExpression	code = gs_newpath ( pgs )		505822	0		=			
ANR	505866	Identifier	code		505822	0					
ANR	505867	CallExpression	gs_newpath ( pgs )		505822	1					
ANR	505868	Callee	gs_newpath		505822	0					
ANR	505869	Identifier	gs_newpath		505822	0					
ANR	505870	ArgumentList	pgs		505822	1					
ANR	505871	Argument	pgs		505822	0					
ANR	505872	Identifier	pgs		505822	0					
ANR	505873	PrimaryExpression	0		505822	1					
ANR	505874	OrExpression	"( ( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0 ) || ( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 )"		505822	1		||			
ANR	505875	RelationalExpression	"( code = gs_moveto ( pgs , 0.0 , 0.0 ) ) < 0"		505822	0		<			
ANR	505876	AssignmentExpression	"code = gs_moveto ( pgs , 0.0 , 0.0 )"		505822	0		=			
ANR	505877	Identifier	code		505822	0					
ANR	505878	CallExpression	"gs_moveto ( pgs , 0.0 , 0.0 )"		505822	1					
ANR	505879	Callee	gs_moveto		505822	0					
ANR	505880	Identifier	gs_moveto		505822	0					
ANR	505881	ArgumentList	pgs		505822	1					
ANR	505882	Argument	pgs		505822	0					
ANR	505883	Identifier	pgs		505822	0					
ANR	505884	Argument	0.0		505822	1					
ANR	505885	PrimaryExpression	0.0		505822	0					
ANR	505886	Argument	0.0		505822	2					
ANR	505887	PrimaryExpression	0.0		505822	0					
ANR	505888	PrimaryExpression	0		505822	1					
ANR	505889	OrExpression	"( ( code = gs_setgray ( pgs , 0.0 ) ) < 0 ) || ( ( code = gs_fill ( pgs ) ) < 0 )"		505822	1		||			
ANR	505890	RelationalExpression	"( code = gs_setgray ( pgs , 0.0 ) ) < 0"		505822	0		<			
ANR	505891	AssignmentExpression	"code = gs_setgray ( pgs , 0.0 )"		505822	0		=			
ANR	505892	Identifier	code		505822	0					
ANR	505893	CallExpression	"gs_setgray ( pgs , 0.0 )"		505822	1					
ANR	505894	Callee	gs_setgray		505822	0					
ANR	505895	Identifier	gs_setgray		505822	0					
ANR	505896	ArgumentList	pgs		505822	1					
ANR	505897	Argument	pgs		505822	0					
ANR	505898	Identifier	pgs		505822	0					
ANR	505899	Argument	0.0		505822	1					
ANR	505900	PrimaryExpression	0.0		505822	0					
ANR	505901	PrimaryExpression	0		505822	1					
ANR	505902	RelationalExpression	( code = gs_fill ( pgs ) ) < 0		505822	1		<			
ANR	505903	AssignmentExpression	code = gs_fill ( pgs )		505822	0		=			
ANR	505904	Identifier	code		505822	0					
ANR	505905	CallExpression	gs_fill ( pgs )		505822	1					
ANR	505906	Callee	gs_fill		505822	0					
ANR	505907	Identifier	gs_fill		505822	0					
ANR	505908	ArgumentList	pgs		505822	1					
ANR	505909	Argument	pgs		505822	0					
ANR	505910	Identifier	pgs		505822	0					
ANR	505911	PrimaryExpression	0		505822	1					
ANR	505912	CompoundStatement		16:4:549:549	505822	1					
ANR	505913	ExpressionStatement	gs_grestore ( pgs )	201:8:6452:6468	505822	0	True				
ANR	505914	CallExpression	gs_grestore ( pgs )		505822	0					
ANR	505915	Callee	gs_grestore		505822	0					
ANR	505916	Identifier	gs_grestore		505822	0					
ANR	505917	ArgumentList	pgs		505822	1					
ANR	505918	Argument	pgs		505822	0					
ANR	505919	Identifier	pgs		505822	0					
ANR	505920	ReturnStatement	return code ;	202:1:6471:6482	505822	1	True				
ANR	505921	Identifier	code		505822	0					
ANR	505922	ExpressionStatement	code = gs_grestore ( pgs )	204:4:6494:6517	505822	6	True				
ANR	505923	AssignmentExpression	code = gs_grestore ( pgs )		505822	0		=			
ANR	505924	Identifier	code		505822	0					
ANR	505925	CallExpression	gs_grestore ( pgs )		505822	1					
ANR	505926	Callee	gs_grestore		505822	0					
ANR	505927	Identifier	gs_grestore		505822	0					
ANR	505928	ArgumentList	pgs		505822	1					
ANR	505929	Argument	pgs		505822	0					
ANR	505930	Identifier	pgs		505822	0					
ANR	505931	IfStatement	if ( code < 0 )		505822	7					
ANR	505932	Condition	code < 0	205:8:6527:6534	505822	0	True				
ANR	505933	RelationalExpression	code < 0		505822	0		<			
ANR	505934	Identifier	code		505822	0					
ANR	505935	PrimaryExpression	0		505822	1					
ANR	505936	ReturnStatement	return code ;	206:8:6545:6556	505822	1	True				
ANR	505937	Identifier	code		505822	0					
ANR	505938	IfStatement	if ( dev -> IgnoreNumCopies )		505822	8					
ANR	505939	Condition	dev -> IgnoreNumCopies	208:8:6567:6586	505822	0	True				
ANR	505940	PtrMemberAccess	dev -> IgnoreNumCopies		505822	0					
ANR	505941	Identifier	dev		505822	0					
ANR	505942	Identifier	IgnoreNumCopies		505822	1					
ANR	505943	ExpressionStatement	num_copies = 1	209:8:6597:6611	505822	1	True				
ANR	505944	AssignmentExpression	num_copies = 1		505822	0		=			
ANR	505945	Identifier	num_copies		505822	0					
ANR	505946	PrimaryExpression	1		505822	1					
ANR	505947	IfStatement	"if ( ( code = ( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush ) ) < 0 )"		505822	9					
ANR	505948	Condition	"( code = ( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush ) ) < 0"	210:8:6621:6687	505822	0	True				
ANR	505949	RelationalExpression	"( code = ( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush ) ) < 0"		505822	0		<			
ANR	505950	AssignmentExpression	"code = ( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush )"		505822	0		=			
ANR	505951	Identifier	code		505822	0					
ANR	505952	CallExpression	"( * dev_proc ( dev , output_page ) ) ( dev , num_copies , flush )"		505822	1					
ANR	505953	Callee	"* dev_proc ( dev , output_page )"		505822	0					
ANR	505954	UnaryOperationExpression	"* dev_proc ( dev , output_page )"		505822	0					
ANR	505955	UnaryOperator	*		505822	0					
ANR	505956	CallExpression	"dev_proc ( dev , output_page )"		505822	1					
ANR	505957	Callee	dev_proc		505822	0					
ANR	505958	Identifier	dev_proc		505822	0					
ANR	505959	ArgumentList	dev		505822	1					
ANR	505960	Argument	dev		505822	0					
ANR	505961	Identifier	dev		505822	0					
ANR	505962	Argument	output_page		505822	1					
ANR	505963	Identifier	output_page		505822	0					
ANR	505964	ArgumentList	dev		505822	1					
ANR	505965	Argument	dev		505822	0					
ANR	505966	Identifier	dev		505822	0					
ANR	505967	Argument	num_copies		505822	1					
ANR	505968	Identifier	num_copies		505822	0					
ANR	505969	Argument	flush		505822	2					
ANR	505970	Identifier	flush		505822	0					
ANR	505971	PrimaryExpression	0		505822	1					
ANR	505972	ReturnStatement	return code ;	211:8:6698:6709	505822	1	True				
ANR	505973	Identifier	code		505822	0					
ANR	505974	ExpressionStatement	"code = dev_proc ( dev , get_profile ) ( dev , & ( dev_profile ) )"	213:4:6716:6770	505822	10	True				
ANR	505975	AssignmentExpression	"code = dev_proc ( dev , get_profile ) ( dev , & ( dev_profile ) )"		505822	0		=			
ANR	505976	Identifier	code		505822	0					
ANR	505977	CallExpression	"dev_proc ( dev , get_profile ) ( dev , & ( dev_profile ) )"		505822	1					
ANR	505978	Callee	"dev_proc ( dev , get_profile )"		505822	0					
ANR	505979	CallExpression	"dev_proc ( dev , get_profile )"		505822	0					
ANR	505980	Callee	dev_proc		505822	0					
ANR	505981	Identifier	dev_proc		505822	0					
ANR	505982	ArgumentList	dev		505822	1					
ANR	505983	Argument	dev		505822	0					
ANR	505984	Identifier	dev		505822	0					
ANR	505985	Argument	get_profile		505822	1					
ANR	505986	Identifier	get_profile		505822	0					
ANR	505987	ArgumentList	dev		505822	1					
ANR	505988	Argument	dev		505822	0					
ANR	505989	Identifier	dev		505822	0					
ANR	505990	Argument	& ( dev_profile )		505822	1					
ANR	505991	UnaryOperationExpression	& ( dev_profile )		505822	0					
ANR	505992	UnaryOperator	&		505822	0					
ANR	505993	Identifier	dev_profile		505822	1					
ANR	505994	IfStatement	if ( code < 0 )		505822	11					
ANR	505995	Condition	code < 0	214:8:6780:6787	505822	0	True				
ANR	505996	RelationalExpression	code < 0		505822	0		<			
ANR	505997	Identifier	code		505822	0					
ANR	505998	PrimaryExpression	0		505822	1					
ANR	505999	ReturnStatement	return code ;	215:8:6798:6809	505822	1	True				
ANR	506000	Identifier	code		505822	0					
ANR	506001	IfStatement	if ( dev_profile -> graydetection && ! dev_profile -> pageneutralcolor )		505822	12					
ANR	506002	Condition	dev_profile -> graydetection && ! dev_profile -> pageneutralcolor	216:8:6819:6878	505822	0	True				
ANR	506003	AndExpression	dev_profile -> graydetection && ! dev_profile -> pageneutralcolor		505822	0		&&			
ANR	506004	PtrMemberAccess	dev_profile -> graydetection		505822	0					
ANR	506005	Identifier	dev_profile		505822	0					
ANR	506006	Identifier	graydetection		505822	1					
ANR	506007	UnaryOperationExpression	! dev_profile -> pageneutralcolor		505822	1					
ANR	506008	UnaryOperator	!		505822	0					
ANR	506009	PtrMemberAccess	dev_profile -> pageneutralcolor		505822	1					
ANR	506010	Identifier	dev_profile		505822	0					
ANR	506011	Identifier	pageneutralcolor		505822	1					
ANR	506012	CompoundStatement		32:70:988:988	505822	1					
ANR	506013	ExpressionStatement	dev_profile -> pageneutralcolor = true	217:8:6891:6927	505822	0	True				
ANR	506014	AssignmentExpression	dev_profile -> pageneutralcolor = true		505822	0		=			
ANR	506015	PtrMemberAccess	dev_profile -> pageneutralcolor		505822	0					
ANR	506016	Identifier	dev_profile		505822	0					
ANR	506017	Identifier	pageneutralcolor		505822	1					
ANR	506018	Identifier	true		505822	1					
ANR	506019	ExpressionStatement	"code = gsicc_mcm_begin_monitor ( pgs -> icc_link_cache , dev )"	218:8:6977:7033	505822	1	True				
ANR	506020	AssignmentExpression	"code = gsicc_mcm_begin_monitor ( pgs -> icc_link_cache , dev )"		505822	0		=			
ANR	506021	Identifier	code		505822	0					
ANR	506022	CallExpression	"gsicc_mcm_begin_monitor ( pgs -> icc_link_cache , dev )"		505822	1					
ANR	506023	Callee	gsicc_mcm_begin_monitor		505822	0					
ANR	506024	Identifier	gsicc_mcm_begin_monitor		505822	0					
ANR	506025	ArgumentList	pgs -> icc_link_cache		505822	1					
ANR	506026	Argument	pgs -> icc_link_cache		505822	0					
ANR	506027	PtrMemberAccess	pgs -> icc_link_cache		505822	0					
ANR	506028	Identifier	pgs		505822	0					
ANR	506029	Identifier	icc_link_cache		505822	1					
ANR	506030	Argument	dev		505822	1					
ANR	506031	Identifier	dev		505822	0					
ANR	506032	ReturnStatement	return code ;	220:4:7045:7056	505822	13	True				
ANR	506033	Identifier	code		505822	0					
ANR	506034	ReturnType	int		505822	1					
ANR	506035	Identifier	gs_output_page		505822	2					
ANR	506036	ParameterList	"gs_gstate * pgs , int num_copies , int flush"		505822	3					
ANR	506037	Parameter	gs_gstate * pgs	184:15:5848:5862	505822	0	True				
ANR	506038	ParameterType	gs_gstate *		505822	0					
ANR	506039	Identifier	pgs		505822	1					
ANR	506040	Parameter	int num_copies	184:32:5865:5878	505822	1	True				
ANR	506041	ParameterType	int		505822	0					
ANR	506042	Identifier	num_copies		505822	1					
ANR	506043	Parameter	int flush	184:48:5881:5889	505822	2	True				
ANR	506044	ParameterType	int		505822	0					
ANR	506045	Identifier	flush		505822	1					
ANR	506046	CFGEntryNode	ENTRY		505822		True				
ANR	506047	CFGExitNode	EXIT		505822		True				
ANR	506048	Symbol	* dev		505822						
ANR	506049	Symbol	dev_profile -> graydetection		505822						
ANR	506050	Symbol	gs_setgray		505822						
ANR	506051	Symbol	dev -> IgnoreNumCopies		505822						
ANR	506052	Symbol	code		505822						
ANR	506053	Symbol	"* dev_proc ( dev , output_page )"		505822						
ANR	506054	Symbol	* dev_proc		505822						
ANR	506055	Symbol	* pgs		505822						
ANR	506056	Symbol	dev_profile		505822						
ANR	506057	Symbol	num_copies		505822						
ANR	506058	Symbol	gs_currentdevice		505822						
ANR	506059	Symbol	gs_moveto		505822						
ANR	506060	Symbol	gs_newpath		505822						
ANR	506061	Symbol	gs_grestore		505822						
ANR	506062	Symbol	gs_gsave		505822						
ANR	506063	Symbol	flush		505822						
ANR	506064	Symbol	dev		505822						
ANR	506065	Symbol	dev_proc		505822						
ANR	506066	Symbol	output_page		505822						
ANR	506067	Symbol	pgs -> icc_link_cache		505822						
ANR	506068	Symbol	gsicc_mcm_begin_monitor		505822						
ANR	506069	Symbol	pgs		505822						
ANR	506070	Symbol	get_profile		505822						
ANR	506071	Symbol	& dev_profile		505822						
ANR	506072	Symbol	* dev_profile		505822						
ANR	506073	Symbol	dev_profile -> pageneutralcolor		505822						
ANR	506074	Symbol	true		505822						
ANR	506075	Symbol	gs_fill		505822						
ANR	506076	Function	gx_finish_output_page	227:0:7215:7334							
ANR	506077	FunctionDef	"gx_finish_output_page (gx_device * dev , int num_copies , int flush)"		506076	0					
ANR	506078	CompoundStatement		229:0:7284:7334	506076	0					
ANR	506079	ExpressionStatement	dev -> PageCount += num_copies	230:4:7290:7318	506076	0	True				
ANR	506080	AssignmentExpression	dev -> PageCount += num_copies		506076	0		+=			
ANR	506081	PtrMemberAccess	dev -> PageCount		506076	0					
ANR	506082	Identifier	dev		506076	0					
ANR	506083	Identifier	PageCount		506076	1					
ANR	506084	Identifier	num_copies		506076	1					
ANR	506085	ReturnStatement	return 0 ;	231:4:7324:7332	506076	1	True				
ANR	506086	PrimaryExpression	0		506076	0					
ANR	506087	ReturnType	int		506076	1					
ANR	506088	Identifier	gx_finish_output_page		506076	2					
ANR	506089	ParameterList	"gx_device * dev , int num_copies , int flush"		506076	3					
ANR	506090	Parameter	gx_device * dev	228:22:7241:7254	506076	0	True				
ANR	506091	ParameterType	gx_device *		506076	0					
ANR	506092	Identifier	dev		506076	1					
ANR	506093	Parameter	int num_copies	228:38:7257:7270	506076	1	True				
ANR	506094	ParameterType	int		506076	0					
ANR	506095	Identifier	num_copies		506076	1					
ANR	506096	Parameter	int flush	228:54:7273:7281	506076	2	True				
ANR	506097	ParameterType	int		506076	0					
ANR	506098	Identifier	flush		506076	1					
ANR	506099	CFGEntryNode	ENTRY		506076		True				
ANR	506100	CFGExitNode	EXIT		506076		True				
ANR	506101	Symbol	* dev		506076						
ANR	506102	Symbol	dev		506076						
ANR	506103	Symbol	flush		506076						
ANR	506104	Symbol	num_copies		506076						
ANR	506105	Symbol	dev -> PageCount		506076						
ANR	506106	Function	gs_copyscanlines	235:0:7380:8093							
ANR	506107	FunctionDef	"gs_copyscanlines (gx_device * dev , int start_y , byte * data , uint size , int * plines_copied , uint * pbytes_copied)"		506106	0					
ANR	506108	CompoundStatement		238:0:7514:8093	506106	0					
ANR	506109	IdentifierDeclStatement	"uint line_size = gx_device_raster ( dev , 0 ) ;"	239:4:7520:7561	506106	0	True				
ANR	506110	IdentifierDecl	"line_size = gx_device_raster ( dev , 0 )"		506106	0					
ANR	506111	IdentifierDeclType	uint		506106	0					
ANR	506112	Identifier	line_size		506106	1					
ANR	506113	AssignmentExpression	"line_size = gx_device_raster ( dev , 0 )"		506106	2		=			
ANR	506114	Identifier	line_size		506106	0					
ANR	506115	CallExpression	"gx_device_raster ( dev , 0 )"		506106	1					
ANR	506116	Callee	gx_device_raster		506106	0					
ANR	506117	Identifier	gx_device_raster		506106	0					
ANR	506118	ArgumentList	dev		506106	1					
ANR	506119	Argument	dev		506106	0					
ANR	506120	Identifier	dev		506106	0					
ANR	506121	Argument	0		506106	1					
ANR	506122	PrimaryExpression	0		506106	0					
ANR	506123	IdentifierDeclStatement	uint count = size / line_size ;	240:4:7567:7596	506106	1	True				
ANR	506124	IdentifierDecl	count = size / line_size		506106	0					
ANR	506125	IdentifierDeclType	uint		506106	0					
ANR	506126	Identifier	count		506106	1					
ANR	506127	AssignmentExpression	count = size / line_size		506106	2		=			
ANR	506128	Identifier	count		506106	0					
ANR	506129	MultiplicativeExpression	size / line_size		506106	1		/			
ANR	506130	Identifier	size		506106	0					
ANR	506131	Identifier	line_size		506106	1					
ANR	506132	IdentifierDeclStatement	uint i ;	241:4:7602:7608	506106	2	True				
ANR	506133	IdentifierDecl	i		506106	0					
ANR	506134	IdentifierDeclType	uint		506106	0					
ANR	506135	Identifier	i		506106	1					
ANR	506136	IdentifierDeclStatement	byte * dest = data ;	242:4:7614:7631	506106	3	True				
ANR	506137	IdentifierDecl	* dest = data		506106	0					
ANR	506138	IdentifierDeclType	byte *		506106	0					
ANR	506139	Identifier	dest		506106	1					
ANR	506140	AssignmentExpression	* dest = data		506106	2		=			
ANR	506141	Identifier	data		506106	0					
ANR	506142	Identifier	data		506106	1					
ANR	506143	ForStatement	"for ( i = 0 ; i < count ; i ++ , dest += line_size )"		506106	4					
ANR	506144	ForInit	i = 0 ;	244:9:7643:7648	506106	0	True				
ANR	506145	AssignmentExpression	i = 0		506106	0		=			
ANR	506146	Identifier	i		506106	0					
ANR	506147	PrimaryExpression	0		506106	1					
ANR	506148	Condition	i < count	244:16:7650:7658	506106	1	True				
ANR	506149	RelationalExpression	i < count		506106	0		<			
ANR	506150	Identifier	i		506106	0					
ANR	506151	Identifier	count		506106	1					
ANR	506152	Expression	"i ++ , dest += line_size"	244:27:7661:7682	506106	2	True				
ANR	506153	PostIncDecOperationExpression	i ++		506106	0					
ANR	506154	Identifier	i		506106	0					
ANR	506155	IncDec	++		506106	1					
ANR	506156	AssignmentExpression	dest += line_size		506106	1		+=			
ANR	506157	Identifier	dest		506106	0					
ANR	506158	Identifier	line_size		506106	1					
ANR	506159	CompoundStatement		8:8:180:248	506106	3					
ANR	506160	IdentifierDeclStatement	"int code = ( * dev_proc ( dev , get_bits ) ) ( dev , start_y + i , dest , NULL ) ;"	245:8:7695:7763	506106	0	True				
ANR	506161	IdentifierDecl	"code = ( * dev_proc ( dev , get_bits ) ) ( dev , start_y + i , dest , NULL )"		506106	0					
ANR	506162	IdentifierDeclType	int		506106	0					
ANR	506163	Identifier	code		506106	1					
ANR	506164	AssignmentExpression	"code = ( * dev_proc ( dev , get_bits ) ) ( dev , start_y + i , dest , NULL )"		506106	2		=			
ANR	506165	Identifier	code		506106	0					
ANR	506166	CallExpression	"( * dev_proc ( dev , get_bits ) ) ( dev , start_y + i , dest , NULL )"		506106	1					
ANR	506167	Callee	"* dev_proc ( dev , get_bits )"		506106	0					
ANR	506168	UnaryOperationExpression	"* dev_proc ( dev , get_bits )"		506106	0					
ANR	506169	UnaryOperator	*		506106	0					
ANR	506170	CallExpression	"dev_proc ( dev , get_bits )"		506106	1					
ANR	506171	Callee	dev_proc		506106	0					
ANR	506172	Identifier	dev_proc		506106	0					
ANR	506173	ArgumentList	dev		506106	1					
ANR	506174	Argument	dev		506106	0					
ANR	506175	Identifier	dev		506106	0					
ANR	506176	Argument	get_bits		506106	1					
ANR	506177	Identifier	get_bits		506106	0					
ANR	506178	ArgumentList	dev		506106	1					
ANR	506179	Argument	dev		506106	0					
ANR	506180	Identifier	dev		506106	0					
ANR	506181	Argument	start_y + i		506106	1					
ANR	506182	AdditiveExpression	start_y + i		506106	0		+			
ANR	506183	Identifier	start_y		506106	0					
ANR	506184	Identifier	i		506106	1					
ANR	506185	Argument	dest		506106	2					
ANR	506186	Identifier	dest		506106	0					
ANR	506187	Argument	NULL		506106	3					
ANR	506188	Identifier	NULL		506106	0					
ANR	506189	IfStatement	if ( code < 0 )		506106	1					
ANR	506190	Condition	code < 0	247:12:7778:7785	506106	0	True				
ANR	506191	RelationalExpression	code < 0		506106	0		<			
ANR	506192	Identifier	code		506106	0					
ANR	506193	PrimaryExpression	0		506106	1					
ANR	506194	CompoundStatement		10:22:273:273	506106	1					
ANR	506195	IfStatement	if ( start_y + i == dev -> height )		506106	0					
ANR	506196	Condition	start_y + i == dev -> height	249:16:7850:7875	506106	0	True				
ANR	506197	EqualityExpression	start_y + i == dev -> height		506106	0		==			
ANR	506198	AdditiveExpression	start_y + i		506106	0		+			
ANR	506199	Identifier	start_y		506106	0					
ANR	506200	Identifier	i		506106	1					
ANR	506201	PtrMemberAccess	dev -> height		506106	1					
ANR	506202	Identifier	dev		506106	0					
ANR	506203	Identifier	height		506106	1					
ANR	506204	BreakStatement	break ;	250:16:7894:7899	506106	1	True				
ANR	506205	ExpressionStatement	return_error ( code )	251:12:7913:7931	506106	1	True				
ANR	506206	CallExpression	return_error ( code )		506106	0					
ANR	506207	Callee	return_error		506106	0					
ANR	506208	Identifier	return_error		506106	0					
ANR	506209	ArgumentList	code		506106	1					
ANR	506210	Argument	code		506106	0					
ANR	506211	Identifier	code		506106	0					
ANR	506212	IfStatement	if ( plines_copied != NULL )		506106	5					
ANR	506213	Condition	plines_copied != NULL	254:8:7957:7977	506106	0	True				
ANR	506214	EqualityExpression	plines_copied != NULL		506106	0		!=			
ANR	506215	Identifier	plines_copied		506106	0					
ANR	506216	Identifier	NULL		506106	1					
ANR	506217	ExpressionStatement	* plines_copied = i	255:8:7988:8006	506106	1	True				
ANR	506218	AssignmentExpression	* plines_copied = i		506106	0		=			
ANR	506219	UnaryOperationExpression	* plines_copied		506106	0					
ANR	506220	UnaryOperator	*		506106	0					
ANR	506221	Identifier	plines_copied		506106	1					
ANR	506222	Identifier	i		506106	1					
ANR	506223	IfStatement	if ( pbytes_copied != NULL )		506106	6					
ANR	506224	Condition	pbytes_copied != NULL	256:8:8016:8036	506106	0	True				
ANR	506225	EqualityExpression	pbytes_copied != NULL		506106	0		!=			
ANR	506226	Identifier	pbytes_copied		506106	0					
ANR	506227	Identifier	NULL		506106	1					
ANR	506228	ExpressionStatement	* pbytes_copied = i * line_size	257:8:8047:8077	506106	1	True				
ANR	506229	AssignmentExpression	* pbytes_copied = i * line_size		506106	0		=			
ANR	506230	UnaryOperationExpression	* pbytes_copied		506106	0					
ANR	506231	UnaryOperator	*		506106	0					
ANR	506232	Identifier	pbytes_copied		506106	1					
ANR	506233	MultiplicativeExpression	i * line_size		506106	1		*			
ANR	506234	Identifier	i		506106	0					
ANR	506235	Identifier	line_size		506106	1					
ANR	506236	ReturnStatement	return 0 ;	258:4:8083:8091	506106	7	True				
ANR	506237	PrimaryExpression	0		506106	0					
ANR	506238	ReturnType	int		506106	1					
ANR	506239	Identifier	gs_copyscanlines		506106	2					
ANR	506240	ParameterList	"gx_device * dev , int start_y , byte * data , uint size , int * plines_copied , uint * pbytes_copied"		506106	3					
ANR	506241	Parameter	gx_device * dev	236:17:7401:7415	506106	0	True				
ANR	506242	ParameterType	gx_device *		506106	0					
ANR	506243	Identifier	dev		506106	1					
ANR	506244	Parameter	int start_y	236:34:7418:7428	506106	1	True				
ANR	506245	ParameterType	int		506106	0					
ANR	506246	Identifier	start_y		506106	1					
ANR	506247	Parameter	byte * data	236:47:7431:7441	506106	2	True				
ANR	506248	ParameterType	byte *		506106	0					
ANR	506249	Identifier	data		506106	1					
ANR	506250	Parameter	uint size	236:60:7444:7452	506106	3	True				
ANR	506251	ParameterType	uint		506106	0					
ANR	506252	Identifier	size		506106	1					
ANR	506253	Parameter	int * plines_copied	237:17:7472:7489	506106	4	True				
ANR	506254	ParameterType	int *		506106	0					
ANR	506255	Identifier	plines_copied		506106	1					
ANR	506256	Parameter	uint * pbytes_copied	237:37:7492:7511	506106	5	True				
ANR	506257	ParameterType	uint *		506106	0					
ANR	506258	Identifier	pbytes_copied		506106	1					
ANR	506259	CFGEntryNode	ENTRY		506106		True				
ANR	506260	CFGExitNode	EXIT		506106		True				
ANR	506261	Symbol	* dev		506106						
ANR	506262	Symbol	gx_device_raster		506106						
ANR	506263	Symbol	"* dev_proc ( dev , get_bits )"		506106						
ANR	506264	Symbol	plines_copied		506106						
ANR	506265	Symbol	pbytes_copied		506106						
ANR	506266	Symbol	code		506106						
ANR	506267	Symbol	NULL		506106						
ANR	506268	Symbol	data		506106						
ANR	506269	Symbol	* dev_proc		506106						
ANR	506270	Symbol	get_bits		506106						
ANR	506271	Symbol	dev -> height		506106						
ANR	506272	Symbol	count		506106						
ANR	506273	Symbol	i		506106						
ANR	506274	Symbol	dest		506106						
ANR	506275	Symbol	* plines_copied		506106						
ANR	506276	Symbol	* pbytes_copied		506106						
ANR	506277	Symbol	dev		506106						
ANR	506278	Symbol	size		506106						
ANR	506279	Symbol	dev_proc		506106						
ANR	506280	Symbol	start_y		506106						
ANR	506281	Symbol	line_size		506106						
ANR	506282	Function	gs_currentdevice	262:0:8150:8228							
ANR	506283	FunctionDef	gs_currentdevice (const gs_gstate * pgs)		506282	0					
ANR	506284	CompoundStatement		264:0:8202:8228	506282	0					
ANR	506285	ReturnStatement	return pgs -> device ;	265:4:8208:8226	506282	0	True				
ANR	506286	PtrMemberAccess	pgs -> device		506282	0					
ANR	506287	Identifier	pgs		506282	0					
ANR	506288	Identifier	device		506282	1					
ANR	506289	ReturnType	gx_device *		506282	1					
ANR	506290	Identifier	gs_currentdevice		506282	2					
ANR	506291	ParameterList	const gs_gstate * pgs		506282	3					
ANR	506292	Parameter	const gs_gstate * pgs	263:17:8179:8199	506282	0	True				
ANR	506293	ParameterType	const gs_gstate *		506282	0					
ANR	506294	Identifier	pgs		506282	1					
ANR	506295	CFGEntryNode	ENTRY		506282		True				
ANR	506296	CFGExitNode	EXIT		506282		True				
ANR	506297	Symbol	* pgs		506282						
ANR	506298	Symbol	pgs -> device		506282						
ANR	506299	Symbol	pgs		506282						
ANR	506300	Function	gs_devicename	269:0:8263:8338							
ANR	506301	FunctionDef	gs_devicename (const gx_device * dev)		506300	0					
ANR	506302	CompoundStatement		271:0:8313:8338	506300	0					
ANR	506303	ReturnStatement	return dev -> dname ;	272:4:8319:8336	506300	0	True				
ANR	506304	PtrMemberAccess	dev -> dname		506300	0					
ANR	506305	Identifier	dev		506300	0					
ANR	506306	Identifier	dname		506300	1					
ANR	506307	ReturnType	const char *		506300	1					
ANR	506308	Identifier	gs_devicename		506300	2					
ANR	506309	ParameterList	const gx_device * dev		506300	3					
ANR	506310	Parameter	const gx_device * dev	270:14:8290:8310	506300	0	True				
ANR	506311	ParameterType	const gx_device *		506300	0					
ANR	506312	Identifier	dev		506300	1					
ANR	506313	CFGEntryNode	ENTRY		506300		True				
ANR	506314	CFGExitNode	EXIT		506300		True				
ANR	506315	Symbol	* dev		506300						
ANR	506316	Symbol	dev		506300						
ANR	506317	Symbol	dev -> dname		506300						
ANR	506318	Function	gs_deviceinitialmatrix	276:0:8383:8577							
ANR	506319	FunctionDef	"gs_deviceinitialmatrix (gx_device * dev , gs_matrix * pmat)"		506318	0					
ANR	506320	CompoundStatement		278:0:8446:8577	506318	0					
ANR	506321	ExpressionStatement	"fill_dev_proc ( dev , get_initial_matrix , gx_default_get_initial_matrix )"	279:4:8452:8521	506318	0	True				
ANR	506322	CallExpression	"fill_dev_proc ( dev , get_initial_matrix , gx_default_get_initial_matrix )"		506318	0					
ANR	506323	Callee	fill_dev_proc		506318	0					
ANR	506324	Identifier	fill_dev_proc		506318	0					
ANR	506325	ArgumentList	dev		506318	1					
ANR	506326	Argument	dev		506318	0					
ANR	506327	Identifier	dev		506318	0					
ANR	506328	Argument	get_initial_matrix		506318	1					
ANR	506329	Identifier	get_initial_matrix		506318	0					
ANR	506330	Argument	gx_default_get_initial_matrix		506318	2					
ANR	506331	Identifier	gx_default_get_initial_matrix		506318	0					
ANR	506332	ExpressionStatement	"( * dev_proc ( dev , get_initial_matrix ) ) ( dev , pmat )"	280:4:8527:8575	506318	1	True				
ANR	506333	CallExpression	"( * dev_proc ( dev , get_initial_matrix ) ) ( dev , pmat )"		506318	0					
ANR	506334	Callee	"* dev_proc ( dev , get_initial_matrix )"		506318	0					
ANR	506335	UnaryOperationExpression	"* dev_proc ( dev , get_initial_matrix )"		506318	0					
ANR	506336	UnaryOperator	*		506318	0					
ANR	506337	CallExpression	"dev_proc ( dev , get_initial_matrix )"		506318	1					
ANR	506338	Callee	dev_proc		506318	0					
ANR	506339	Identifier	dev_proc		506318	0					
ANR	506340	ArgumentList	dev		506318	1					
ANR	506341	Argument	dev		506318	0					
ANR	506342	Identifier	dev		506318	0					
ANR	506343	Argument	get_initial_matrix		506318	1					
ANR	506344	Identifier	get_initial_matrix		506318	0					
ANR	506345	ArgumentList	dev		506318	1					
ANR	506346	Argument	dev		506318	0					
ANR	506347	Identifier	dev		506318	0					
ANR	506348	Argument	pmat		506318	1					
ANR	506349	Identifier	pmat		506318	0					
ANR	506350	ReturnType	void		506318	1					
ANR	506351	Identifier	gs_deviceinitialmatrix		506318	2					
ANR	506352	ParameterList	"gx_device * dev , gs_matrix * pmat"		506318	3					
ANR	506353	Parameter	gx_device * dev	277:23:8411:8425	506318	0	True				
ANR	506354	ParameterType	gx_device *		506318	0					
ANR	506355	Identifier	dev		506318	1					
ANR	506356	Parameter	gs_matrix * pmat	277:40:8428:8443	506318	1	True				
ANR	506357	ParameterType	gs_matrix *		506318	0					
ANR	506358	Identifier	pmat		506318	1					
ANR	506359	CFGEntryNode	ENTRY		506318		True				
ANR	506360	CFGExitNode	EXIT		506318		True				
ANR	506361	Symbol	get_initial_matrix		506318						
ANR	506362	Symbol	dev		506318						
ANR	506363	Symbol	pmat		506318						
ANR	506364	Symbol	dev_proc		506318						
ANR	506365	Symbol	gx_default_get_initial_matrix		506318						
ANR	506366	Function	gs_getdevice	284:0:8633:8866							
ANR	506367	FunctionDef	gs_getdevice (int index)		506366	0					
ANR	506368	CompoundStatement		286:0:8675:8866	506366	0					
ANR	506369	Statement	const	287:4:8681:8685	506366	0	True				
ANR	506370	Statement	gx_device	287:10:8687:8695	506366	1	True				
ANR	506371	Statement	*	287:20:8697:8697	506366	2	True				
ANR	506372	Statement	const	287:21:8698:8702	506366	3	True				
ANR	506373	ExpressionStatement	* list	287:27:8704:8709	506366	4	True				
ANR	506374	UnaryOperationExpression	* list		506366	0					
ANR	506375	UnaryOperator	*		506366	0					
ANR	506376	Identifier	list		506366	1					
ANR	506377	IdentifierDeclStatement	"int count = gs_lib_device_list ( & list , NULL ) ;"	288:4:8715:8758	506366	5	True				
ANR	506378	IdentifierDecl	"count = gs_lib_device_list ( & list , NULL )"		506366	0					
ANR	506379	IdentifierDeclType	int		506366	0					
ANR	506380	Identifier	count		506366	1					
ANR	506381	AssignmentExpression	"count = gs_lib_device_list ( & list , NULL )"		506366	2		=			
ANR	506382	Identifier	count		506366	0					
ANR	506383	CallExpression	"gs_lib_device_list ( & list , NULL )"		506366	1					
ANR	506384	Callee	gs_lib_device_list		506366	0					
ANR	506385	Identifier	gs_lib_device_list		506366	0					
ANR	506386	ArgumentList	& list		506366	1					
ANR	506387	Argument	& list		506366	0					
ANR	506388	UnaryOperationExpression	& list		506366	0					
ANR	506389	UnaryOperator	&		506366	0					
ANR	506390	Identifier	list		506366	1					
ANR	506391	Argument	NULL		506366	1					
ANR	506392	Identifier	NULL		506366	0					
ANR	506393	IfStatement	if ( index < 0 || index >= count )		506366	6					
ANR	506394	Condition	index < 0 || index >= count	290:8:8769:8795	506366	0	True				
ANR	506395	OrExpression	index < 0 || index >= count		506366	0		||			
ANR	506396	RelationalExpression	index < 0		506366	0		<			
ANR	506397	Identifier	index		506366	0					
ANR	506398	PrimaryExpression	0		506366	1					
ANR	506399	RelationalExpression	index >= count		506366	1		>=			
ANR	506400	Identifier	index		506366	0					
ANR	506401	Identifier	count		506366	1					
ANR	506402	ReturnStatement	return 0 ;	291:8:8806:8814	506366	1	True				
ANR	506403	PrimaryExpression	0		506366	0					
ANR	506404	ReturnStatement	return list [ index ] ;	292:4:8846:8864	506366	7	True				
ANR	506405	ArrayIndexing	list [ index ]		506366	0					
ANR	506406	Identifier	list		506366	0					
ANR	506407	Identifier	index		506366	1					
ANR	506408	ReturnType	const gx_device *		506366	1					
ANR	506409	Identifier	gs_getdevice		506366	2					
ANR	506410	ParameterList	int index		506366	3					
ANR	506411	Parameter	int index	285:13:8664:8672	506366	0	True				
ANR	506412	ParameterType	int		506366	0					
ANR	506413	Identifier	index		506366	1					
ANR	506414	CFGEntryNode	ENTRY		506366		True				
ANR	506415	CFGExitNode	EXIT		506366		True				
ANR	506416	Symbol	NULL		506366						
ANR	506417	Symbol	& list		506366						
ANR	506418	Symbol	* list		506366						
ANR	506419	Symbol	* index		506366						
ANR	506420	Symbol	count		506366						
ANR	506421	Symbol	index		506366						
ANR	506422	Symbol	list		506366						
ANR	506423	Symbol	gs_lib_device_list		506366						
ANR	506424	Function	gs_getdefaultlibdevice	296:0:8925:10154							
ANR	506425	FunctionDef	gs_getdefaultlibdevice (gs_memory_t * mem)		506424	0					
ANR	506426	CompoundStatement		298:0:8984:10154	506424	0					
ANR	506427	Statement	const	299:4:8990:8994	506424	0	True				
ANR	506428	Statement	gx_device	299:10:8996:9004	506424	1	True				
ANR	506429	Statement	*	299:20:9006:9006	506424	2	True				
ANR	506430	Statement	const	299:21:9007:9011	506424	3	True				
ANR	506431	ExpressionStatement	* list	299:27:9013:9018	506424	4	True				
ANR	506432	UnaryOperationExpression	* list		506424	0					
ANR	506433	UnaryOperator	*		506424	0					
ANR	506434	Identifier	list		506424	1					
ANR	506435	IdentifierDeclStatement	"int count = gs_lib_device_list ( & list , NULL ) ;"	300:4:9024:9067	506424	5	True				
ANR	506436	IdentifierDecl	"count = gs_lib_device_list ( & list , NULL )"		506424	0					
ANR	506437	IdentifierDeclType	int		506424	0					
ANR	506438	Identifier	count		506424	1					
ANR	506439	AssignmentExpression	"count = gs_lib_device_list ( & list , NULL )"		506424	2		=			
ANR	506440	Identifier	count		506424	0					
ANR	506441	CallExpression	"gs_lib_device_list ( & list , NULL )"		506424	1					
ANR	506442	Callee	gs_lib_device_list		506424	0					
ANR	506443	Identifier	gs_lib_device_list		506424	0					
ANR	506444	ArgumentList	& list		506424	1					
ANR	506445	Argument	& list		506424	0					
ANR	506446	UnaryOperationExpression	& list		506424	0					
ANR	506447	UnaryOperator	&		506424	0					
ANR	506448	Identifier	list		506424	1					
ANR	506449	Argument	NULL		506424	1					
ANR	506450	Identifier	NULL		506424	0					
ANR	506451	IdentifierDeclStatement	"const char * name , * end , * fin ;"	301:4:9073:9101	506424	6	True				
ANR	506452	IdentifierDecl	* name		506424	0					
ANR	506453	IdentifierDeclType	const char *		506424	0					
ANR	506454	Identifier	name		506424	1					
ANR	506455	IdentifierDecl	* end		506424	1					
ANR	506456	IdentifierDeclType	const char *		506424	0					
ANR	506457	Identifier	end		506424	1					
ANR	506458	IdentifierDecl	* fin		506424	2					
ANR	506459	IdentifierDeclType	const char *		506424	0					
ANR	506460	Identifier	fin		506424	1					
ANR	506461	IdentifierDeclStatement	int i ;	302:4:9107:9112	506424	7	True				
ANR	506462	IdentifierDecl	i		506424	0					
ANR	506463	IdentifierDeclType	int		506424	0					
ANR	506464	Identifier	i		506424	1					
ANR	506465	IfStatement	if ( mem && mem -> gs_lib_ctx && mem -> gs_lib_ctx -> default_device_list )		506424	8					
ANR	506466	Condition	mem && mem -> gs_lib_ctx && mem -> gs_lib_ctx -> default_device_list	306:8:9250:9311	506424	0	True				
ANR	506467	AndExpression	mem && mem -> gs_lib_ctx && mem -> gs_lib_ctx -> default_device_list		506424	0		&&			
ANR	506468	Identifier	mem		506424	0					
ANR	506469	AndExpression	mem -> gs_lib_ctx && mem -> gs_lib_ctx -> default_device_list		506424	1		&&			
ANR	506470	PtrMemberAccess	mem -> gs_lib_ctx		506424	0					
ANR	506471	Identifier	mem		506424	0					
ANR	506472	Identifier	gs_lib_ctx		506424	1					
ANR	506473	PtrMemberAccess	mem -> gs_lib_ctx -> default_device_list		506424	1					
ANR	506474	PtrMemberAccess	mem -> gs_lib_ctx		506424	0					
ANR	506475	Identifier	mem		506424	0					
ANR	506476	Identifier	gs_lib_ctx		506424	1					
ANR	506477	Identifier	default_device_list		506424	1					
ANR	506478	CompoundStatement		9:72:329:329	506424	1					
ANR	506479	ExpressionStatement	name = mem -> gs_lib_ctx -> default_device_list	307:8:9324:9367	506424	0	True				
ANR	506480	AssignmentExpression	name = mem -> gs_lib_ctx -> default_device_list		506424	0		=			
ANR	506481	Identifier	name		506424	0					
ANR	506482	PtrMemberAccess	mem -> gs_lib_ctx -> default_device_list		506424	1					
ANR	506483	PtrMemberAccess	mem -> gs_lib_ctx		506424	0					
ANR	506484	Identifier	mem		506424	0					
ANR	506485	Identifier	gs_lib_ctx		506424	1					
ANR	506486	Identifier	default_device_list		506424	1					
ANR	506487	ExpressionStatement	fin = name + strlen ( name )	308:8:9377:9402	506424	1	True				
ANR	506488	AssignmentExpression	fin = name + strlen ( name )		506424	0		=			
ANR	506489	Identifier	fin		506424	0					
ANR	506490	AdditiveExpression	name + strlen ( name )		506424	1		+			
ANR	506491	Identifier	name		506424	0					
ANR	506492	CallExpression	strlen ( name )		506424	1					
ANR	506493	Callee	strlen		506424	0					
ANR	506494	Identifier	strlen		506424	0					
ANR	506495	ArgumentList	name		506424	1					
ANR	506496	Argument	name		506424	0					
ANR	506497	Identifier	name		506424	0					
ANR	506498	ElseStatement	else		506424	0					
ANR	506499	CompoundStatement		13:9:434:434	506424	0					
ANR	506500	ExpressionStatement	name = gs_dev_defaults	311:8:9429:9451	506424	0	True				
ANR	506501	AssignmentExpression	name = gs_dev_defaults		506424	0		=			
ANR	506502	Identifier	name		506424	0					
ANR	506503	Identifier	gs_dev_defaults		506424	1					
ANR	506504	ExpressionStatement	fin = name + strlen ( name )	312:8:9461:9486	506424	1	True				
ANR	506505	AssignmentExpression	fin = name + strlen ( name )		506424	0		=			
ANR	506506	Identifier	fin		506424	0					
ANR	506507	AdditiveExpression	name + strlen ( name )		506424	1		+			
ANR	506508	Identifier	name		506424	0					
ANR	506509	CallExpression	strlen ( name )		506424	1					
ANR	506510	Callee	strlen		506424	0					
ANR	506511	Identifier	strlen		506424	0					
ANR	506512	ArgumentList	name		506424	1					
ANR	506513	Argument	name		506424	0					
ANR	506514	Identifier	name		506424	0					
ANR	506515	WhileStatement	while ( name < fin )		506424	9					
ANR	506516	Condition	name < fin	316:11:9556:9565	506424	0	True				
ANR	506517	RelationalExpression	name < fin		506424	0		<			
ANR	506518	Identifier	name		506424	0					
ANR	506519	Identifier	fin		506424	1					
ANR	506520	CompoundStatement		19:23:583:583	506424	1					
ANR	506521	WhileStatement	while ( ( name < fin ) && ( * name == ' ' || * name == '\\t' ) )		506424	0					
ANR	506522	Condition	( name < fin ) && ( * name == ' ' || * name == '\\t' )	319:13:9629:9675	506424	0	True				
ANR	506523	AndExpression	( name < fin ) && ( * name == ' ' || * name == '\\t' )		506424	0		&&			
ANR	506524	RelationalExpression	name < fin		506424	0		<			
ANR	506525	Identifier	name		506424	0					
ANR	506526	Identifier	fin		506424	1					
ANR	506527	OrExpression	* name == ' ' || * name == '\\t'		506424	1		||			
ANR	506528	EqualityExpression	* name == ' '		506424	0		==			
ANR	506529	UnaryOperationExpression	* name		506424	0					
ANR	506530	UnaryOperator	*		506424	0					
ANR	506531	Identifier	name		506424	1					
ANR	506532	PrimaryExpression	' '		506424	1					
ANR	506533	EqualityExpression	* name == '\\t'		506424	1		==			
ANR	506534	UnaryOperationExpression	* name		506424	0					
ANR	506535	UnaryOperator	*		506424	0					
ANR	506536	Identifier	name		506424	1					
ANR	506537	PrimaryExpression	'\\t'		506424	1					
ANR	506538	ExpressionStatement	name ++	320:8:9686:9692	506424	1	True				
ANR	506539	PostIncDecOperationExpression	name ++		506424	0					
ANR	506540	Identifier	name		506424	0					
ANR	506541	IncDec	++		506424	1					
ANR	506542	ExpressionStatement	end = name	321:6:9700:9710	506424	1	True				
ANR	506543	AssignmentExpression	end = name		506424	0		=			
ANR	506544	Identifier	end		506424	0					
ANR	506545	Identifier	name		506424	1					
ANR	506546	WhileStatement	while ( ( end < fin ) && ( * end != ' ' ) && ( * end != '\\t' ) )		506424	2					
ANR	506547	Condition	( end < fin ) && ( * end != ' ' ) && ( * end != '\\t' )	322:13:9725:9770	506424	0	True				
ANR	506548	AndExpression	( end < fin ) && ( * end != ' ' ) && ( * end != '\\t' )		506424	0		&&			
ANR	506549	RelationalExpression	end < fin		506424	0		<			
ANR	506550	Identifier	end		506424	0					
ANR	506551	Identifier	fin		506424	1					
ANR	506552	AndExpression	( * end != ' ' ) && ( * end != '\\t' )		506424	1		&&			
ANR	506553	EqualityExpression	* end != ' '		506424	0		!=			
ANR	506554	UnaryOperationExpression	* end		506424	0					
ANR	506555	UnaryOperator	*		506424	0					
ANR	506556	Identifier	end		506424	1					
ANR	506557	PrimaryExpression	' '		506424	1					
ANR	506558	EqualityExpression	* end != '\\t'		506424	1		!=			
ANR	506559	UnaryOperationExpression	* end		506424	0					
ANR	506560	UnaryOperator	*		506424	0					
ANR	506561	Identifier	end		506424	1					
ANR	506562	PrimaryExpression	'\\t'		506424	1					
ANR	506563	ExpressionStatement	end ++	323:8:9781:9786	506424	1	True				
ANR	506564	PostIncDecOperationExpression	end ++		506424	0					
ANR	506565	Identifier	end		506424	0					
ANR	506566	IncDec	++		506424	1					
ANR	506567	ForStatement	for ( i = 0 ; i < count ; i ++ )		506424	3					
ANR	506568	ForInit	i = 0 ;	326:11:9831:9836	506424	0	True				
ANR	506569	AssignmentExpression	i = 0		506424	0		=			
ANR	506570	Identifier	i		506424	0					
ANR	506571	PrimaryExpression	0		506424	1					
ANR	506572	Condition	i < count	326:18:9838:9846	506424	1	True				
ANR	506573	RelationalExpression	i < count		506424	0		<			
ANR	506574	Identifier	i		506424	0					
ANR	506575	Identifier	count		506424	1					
ANR	506576	PostIncDecOperationExpression	i ++	326:29:9849:9851	506424	2	True				
ANR	506577	Identifier	i		506424	0					
ANR	506578	IncDec	++		506424	1					
ANR	506579	IfStatement	if ( ( end - name ) == strlen ( list [ i ] -> dname ) )		506424	3					
ANR	506580	Condition	( end - name ) == strlen ( list [ i ] -> dname )	327:12:9866:9903	506424	0	True				
ANR	506581	EqualityExpression	( end - name ) == strlen ( list [ i ] -> dname )		506424	0		==			
ANR	506582	AdditiveExpression	end - name		506424	0		-			
ANR	506583	Identifier	end		506424	0					
ANR	506584	Identifier	name		506424	1					
ANR	506585	CallExpression	strlen ( list [ i ] -> dname )		506424	1					
ANR	506586	Callee	strlen		506424	0					
ANR	506587	Identifier	strlen		506424	0					
ANR	506588	ArgumentList	list [ i ] -> dname		506424	1					
ANR	506589	Argument	list [ i ] -> dname		506424	0					
ANR	506590	PtrMemberAccess	list [ i ] -> dname		506424	0					
ANR	506591	ArrayIndexing	list [ i ]		506424	0					
ANR	506592	Identifier	list		506424	0					
ANR	506593	Identifier	i		506424	1					
ANR	506594	Identifier	dname		506424	1					
ANR	506595	IfStatement	"if ( ! memcmp ( name , list [ i ] -> dname , end - name ) )"		506424	1					
ANR	506596	Condition	"! memcmp ( name , list [ i ] -> dname , end - name )"	328:14:9920:9960	506424	0	True				
ANR	506597	UnaryOperationExpression	"! memcmp ( name , list [ i ] -> dname , end - name )"		506424	0					
ANR	506598	UnaryOperator	!		506424	0					
ANR	506599	CallExpression	"memcmp ( name , list [ i ] -> dname , end - name )"		506424	1					
ANR	506600	Callee	memcmp		506424	0					
ANR	506601	Identifier	memcmp		506424	0					
ANR	506602	ArgumentList	name		506424	1					
ANR	506603	Argument	name		506424	0					
ANR	506604	Identifier	name		506424	0					
ANR	506605	Argument	list [ i ] -> dname		506424	1					
ANR	506606	PtrMemberAccess	list [ i ] -> dname		506424	0					
ANR	506607	ArrayIndexing	list [ i ]		506424	0					
ANR	506608	Identifier	list		506424	0					
ANR	506609	Identifier	i		506424	1					
ANR	506610	Identifier	dname		506424	1					
ANR	506611	Argument	end - name		506424	2					
ANR	506612	AdditiveExpression	end - name		506424	0		-			
ANR	506613	Identifier	end		506424	0					
ANR	506614	Identifier	name		506424	1					
ANR	506615	ReturnStatement	return gs_getdevice ( i ) ;	329:12:9975:9997	506424	1	True				
ANR	506616	CallExpression	gs_getdevice ( i )		506424	0					
ANR	506617	Callee	gs_getdevice		506424	0					
ANR	506618	Identifier	gs_getdevice		506424	0					
ANR	506619	ArgumentList	i		506424	1					
ANR	506620	Argument	i		506424	0					
ANR	506621	Identifier	i		506424	0					
ANR	506622	ExpressionStatement	name = end	332:6:10054:10064	506424	4	True				
ANR	506623	AssignmentExpression	name = end		506424	0		=			
ANR	506624	Identifier	name		506424	0					
ANR	506625	Identifier	end		506424	1					
ANR	506626	ReturnStatement	return gs_getdevice ( 0 ) ;	336:4:10130:10152	506424	10	True				
ANR	506627	CallExpression	gs_getdevice ( 0 )		506424	0					
ANR	506628	Callee	gs_getdevice		506424	0					
ANR	506629	Identifier	gs_getdevice		506424	0					
ANR	506630	ArgumentList	0		506424	1					
ANR	506631	Argument	0		506424	0					
ANR	506632	PrimaryExpression	0		506424	0					
ANR	506633	ReturnType	const gx_device *		506424	1					
ANR	506634	Identifier	gs_getdefaultlibdevice		506424	2					
ANR	506635	ParameterList	gs_memory_t * mem		506424	3					
ANR	506636	Parameter	gs_memory_t * mem	297:23:8966:8981	506424	0	True				
ANR	506637	ParameterType	gs_memory_t *		506424	0					
ANR	506638	Identifier	mem		506424	1					
ANR	506639	CFGEntryNode	ENTRY		506424		True				
ANR	506640	CFGExitNode	EXIT		506424		True				
ANR	506641	Symbol	fin		506424						
ANR	506642	Symbol	gs_getdevice		506424						
ANR	506643	Symbol	strlen		506424						
ANR	506644	Symbol	* * list		506424						
ANR	506645	Symbol	memcmp		506424						
ANR	506646	Symbol	mem		506424						
ANR	506647	Symbol	& list		506424						
ANR	506648	Symbol	end		506424						
ANR	506649	Symbol	gs_lib_device_list		506424						
ANR	506650	Symbol	* name		506424						
ANR	506651	Symbol	gs_dev_defaults		506424						
ANR	506652	Symbol	* * i		506424						
ANR	506653	Symbol	NULL		506424						
ANR	506654	Symbol	count		506424						
ANR	506655	Symbol	i		506424						
ANR	506656	Symbol	* * mem		506424						
ANR	506657	Symbol	list		506424						
ANR	506658	Symbol	mem -> gs_lib_ctx -> default_device_list		506424						
ANR	506659	Symbol	* i		506424						
ANR	506660	Symbol	* list		506424						
ANR	506661	Symbol	name		506424						
ANR	506662	Symbol	list [ i ] -> dname		506424						
ANR	506663	Symbol	* end		506424						
ANR	506664	Symbol	* mem -> gs_lib_ctx		506424						
ANR	506665	Symbol	mem -> gs_lib_ctx		506424						
ANR	506666	Symbol	* mem		506424						
ANR	506667	Function	gs_getdefaultdevice	339:0:10157:10244							
ANR	506668	FunctionDef	gs_getdefaultdevice ()		506667	0					
ANR	506669	CompoundStatement		341:0:10201:10244	506667	0					
ANR	506670	ReturnStatement	return gs_getdefaultlibdevice ( NULL ) ;	342:4:10207:10242	506667	0	True				
ANR	506671	CallExpression	gs_getdefaultlibdevice ( NULL )		506667	0					
ANR	506672	Callee	gs_getdefaultlibdevice		506667	0					
ANR	506673	Identifier	gs_getdefaultlibdevice		506667	0					
ANR	506674	ArgumentList	NULL		506667	1					
ANR	506675	Argument	NULL		506667	0					
ANR	506676	Identifier	NULL		506667	0					
ANR	506677	ReturnType	const gx_device *		506667	1					
ANR	506678	Identifier	gs_getdefaultdevice		506667	2					
ANR	506679	ParameterList			506667	3					
ANR	506680	CFGEntryNode	ENTRY		506667		True				
ANR	506681	CFGExitNode	EXIT		506667		True				
ANR	506682	Symbol	NULL		506667						
ANR	506683	Symbol	gs_getdefaultlibdevice		506667						
ANR	506684	Function	gx_device_make_struct_type	346:0:10303:10645							
ANR	506685	FunctionDef	"gx_device_make_struct_type (gs_memory_struct_type_t * st , const gx_device * dev)"		506684	0					
ANR	506686	CompoundStatement		349:0:10420:10645	506684	0					
ANR	506687	IfStatement	if ( dev -> stype )		506684	0					
ANR	506688	Condition	dev -> stype	350:8:10430:10439	506684	0	True				
ANR	506689	PtrMemberAccess	dev -> stype		506684	0					
ANR	506690	Identifier	dev		506684	0					
ANR	506691	Identifier	stype		506684	1					
ANR	506692	ExpressionStatement	* st = * dev -> stype	351:8:10450:10467	506684	1	True				
ANR	506693	AssignmentExpression	* st = * dev -> stype		506684	0		=			
ANR	506694	UnaryOperationExpression	* st		506684	0					
ANR	506695	UnaryOperator	*		506684	0					
ANR	506696	Identifier	st		506684	1					
ANR	506697	UnaryOperationExpression	* dev -> stype		506684	1					
ANR	506698	UnaryOperator	*		506684	0					
ANR	506699	PtrMemberAccess	dev -> stype		506684	1					
ANR	506700	Identifier	dev		506684	0					
ANR	506701	Identifier	stype		506684	1					
ANR	506702	ElseStatement	else		506684	0					
ANR	506703	IfStatement	"if ( dev_proc ( dev , get_xfont_procs ) == gx_forward_get_xfont_procs )"		506684	0					
ANR	506704	Condition	"dev_proc ( dev , get_xfont_procs ) == gx_forward_get_xfont_procs"	352:13:10482:10541	506684	0	True				
ANR	506705	EqualityExpression	"dev_proc ( dev , get_xfont_procs ) == gx_forward_get_xfont_procs"		506684	0		==			
ANR	506706	CallExpression	"dev_proc ( dev , get_xfont_procs )"		506684	0					
ANR	506707	Callee	dev_proc		506684	0					
ANR	506708	Identifier	dev_proc		506684	0					
ANR	506709	ArgumentList	dev		506684	1					
ANR	506710	Argument	dev		506684	0					
ANR	506711	Identifier	dev		506684	0					
ANR	506712	Argument	get_xfont_procs		506684	1					
ANR	506713	Identifier	get_xfont_procs		506684	0					
ANR	506714	Identifier	gx_forward_get_xfont_procs		506684	1					
ANR	506715	ExpressionStatement	* st = st_device_forward	353:8:10552:10575	506684	1	True				
ANR	506716	AssignmentExpression	* st = st_device_forward		506684	0		=			
ANR	506717	UnaryOperationExpression	* st		506684	0					
ANR	506718	UnaryOperator	*		506684	0					
ANR	506719	Identifier	st		506684	1					
ANR	506720	Identifier	st_device_forward		506684	1					
ANR	506721	ElseStatement	else		506684	0					
ANR	506722	ExpressionStatement	* st = st_device	355:8:10594:10609	506684	0	True				
ANR	506723	AssignmentExpression	* st = st_device		506684	0		=			
ANR	506724	UnaryOperationExpression	* st		506684	0					
ANR	506725	UnaryOperator	*		506684	0					
ANR	506726	Identifier	st		506684	1					
ANR	506727	Identifier	st_device		506684	1					
ANR	506728	ExpressionStatement	st -> ssize = dev -> params_size	356:4:10615:10643	506684	1	True				
ANR	506729	AssignmentExpression	st -> ssize = dev -> params_size		506684	0		=			
ANR	506730	PtrMemberAccess	st -> ssize		506684	0					
ANR	506731	Identifier	st		506684	0					
ANR	506732	Identifier	ssize		506684	1					
ANR	506733	PtrMemberAccess	dev -> params_size		506684	1					
ANR	506734	Identifier	dev		506684	0					
ANR	506735	Identifier	params_size		506684	1					
ANR	506736	ReturnType	static void		506684	1					
ANR	506737	Identifier	gx_device_make_struct_type		506684	2					
ANR	506738	ParameterList	"gs_memory_struct_type_t * st , const gx_device * dev"		506684	3					
ANR	506739	Parameter	gs_memory_struct_type_t * st	347:27:10342:10368	506684	0	True				
ANR	506740	ParameterType	gs_memory_struct_type_t *		506684	0					
ANR	506741	Identifier	st		506684	1					
ANR	506742	Parameter	const gx_device * dev	348:27:10398:10417	506684	1	True				
ANR	506743	ParameterType	const gx_device *		506684	0					
ANR	506744	Identifier	dev		506684	1					
ANR	506745	CFGEntryNode	ENTRY		506684		True				
ANR	506746	CFGExitNode	EXIT		506684		True				
ANR	506747	Symbol	* dev		506684						
ANR	506748	Symbol	st		506684						
ANR	506749	Symbol	* st		506684						
ANR	506750	Symbol	* * dev		506684						
ANR	506751	Symbol	st -> ssize		506684						
ANR	506752	Symbol	st_device_forward		506684						
ANR	506753	Symbol	dev -> stype		506684						
ANR	506754	Symbol	dev -> params_size		506684						
ANR	506755	Symbol	dev		506684						
ANR	506756	Symbol	st_device		506684						
ANR	506757	Symbol	dev_proc		506684						
ANR	506758	Symbol	* dev -> stype		506684						
ANR	506759	Symbol	get_xfont_procs		506684						
ANR	506760	Symbol	gx_forward_get_xfont_procs		506684						
ANR	506761	Function	gs_copydevice2	360:0:10680:13477							
ANR	506762	FunctionDef	"gs_copydevice2 (gx_device * * pnew_dev , const gx_device * dev , bool keep_open , gs_memory_t * mem)"		506761	0					
ANR	506763	CompoundStatement		363:0:10795:13477	506761	0					
ANR	506764	IdentifierDeclStatement	gx_device * new_dev ;	364:4:10801:10819	506761	0	True				
ANR	506765	IdentifierDecl	* new_dev		506761	0					
ANR	506766	IdentifierDeclType	gx_device *		506761	0					
ANR	506767	Identifier	new_dev		506761	1					
ANR	506768	IdentifierDeclStatement	const gs_memory_struct_type_t * std = dev -> stype ;	365:4:10825:10872	506761	1	True				
ANR	506769	IdentifierDecl	* std = dev -> stype		506761	0					
ANR	506770	IdentifierDeclType	const gs_memory_struct_type_t *		506761	0					
ANR	506771	Identifier	std		506761	1					
ANR	506772	AssignmentExpression	* std = dev -> stype		506761	2		=			
ANR	506773	Identifier	std		506761	0					
ANR	506774	PtrMemberAccess	dev -> stype		506761	1					
ANR	506775	Identifier	dev		506761	0					
ANR	506776	Identifier	stype		506761	1					
ANR	506777	IdentifierDeclStatement	const gs_memory_struct_type_t * new_std ;	366:4:10878:10916	506761	2	True				
ANR	506778	IdentifierDecl	* new_std		506761	0					
ANR	506779	IdentifierDeclType	const gs_memory_struct_type_t *		506761	0					
ANR	506780	Identifier	new_std		506761	1					
ANR	506781	IdentifierDeclStatement	gs_memory_struct_type_t * a_std = 0 ;	367:4:10922:10956	506761	3	True				
ANR	506782	IdentifierDecl	* a_std = 0		506761	0					
ANR	506783	IdentifierDeclType	gs_memory_struct_type_t *		506761	0					
ANR	506784	Identifier	a_std		506761	1					
ANR	506785	AssignmentExpression	* a_std = 0		506761	2		=			
ANR	506786	Identifier	a_std		506761	0					
ANR	506787	PrimaryExpression	0		506761	1					
ANR	506788	IdentifierDeclStatement	int code ;	368:4:10962:10970	506761	4	True				
ANR	506789	IdentifierDecl	code		506761	0					
ANR	506790	IdentifierDeclType	int		506761	0					
ANR	506791	Identifier	code		506761	1					
ANR	506792	IfStatement	if ( dev -> stype_is_dynamic )		506761	5					
ANR	506793	Condition	dev -> stype_is_dynamic	370:8:10981:11001	506761	0	True				
ANR	506794	PtrMemberAccess	dev -> stype_is_dynamic		506761	0					
ANR	506795	Identifier	dev		506761	0					
ANR	506796	Identifier	stype_is_dynamic		506761	1					
ANR	506797	CompoundStatement		8:31:208:208	506761	1					
ANR	506798	ExpressionStatement	"a_std = ( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"	375:8:11166:11333	506761	0	True				
ANR	506799	AssignmentExpression	"a_std = ( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		506761	0		=			
ANR	506800	Identifier	a_std		506761	0					
ANR	506801	CastExpression	"( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		506761	1					
ANR	506802	CastTarget	gs_memory_struct_type_t *		506761	0					
ANR	506803	CallExpression	"gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		506761	1					
ANR	506804	Callee	gs_alloc_bytes_immovable		506761	0					
ANR	506805	Identifier	gs_alloc_bytes_immovable		506761	0					
ANR	506806	ArgumentList	mem -> non_gc_memory		506761	1					
ANR	506807	Argument	mem -> non_gc_memory		506761	0					
ANR	506808	PtrMemberAccess	mem -> non_gc_memory		506761	0					
ANR	506809	Identifier	mem		506761	0					
ANR	506810	Identifier	non_gc_memory		506761	1					
ANR	506811	Argument	sizeof ( * std )		506761	1					
ANR	506812	SizeofExpression	sizeof ( * std )		506761	0					
ANR	506813	Sizeof	sizeof		506761	0					
ANR	506814	UnaryOperationExpression	* std		506761	1					
ANR	506815	UnaryOperator	*		506761	0					
ANR	506816	Identifier	std		506761	1					
ANR	506817	Argument	"""gs_copydevice(stype)"""		506761	2					
ANR	506818	PrimaryExpression	"""gs_copydevice(stype)"""		506761	0					
ANR	506819	IfStatement	if ( ! a_std )		506761	1					
ANR	506820	Condition	! a_std	378:12:11347:11352	506761	0	True				
ANR	506821	UnaryOperationExpression	! a_std		506761	0					
ANR	506822	UnaryOperator	!		506761	0					
ANR	506823	Identifier	a_std		506761	1					
ANR	506824	ExpressionStatement	return_error ( gs_error_VMerror )	379:12:11367:11397	506761	1	True				
ANR	506825	CallExpression	return_error ( gs_error_VMerror )		506761	0					
ANR	506826	Callee	return_error		506761	0					
ANR	506827	Identifier	return_error		506761	0					
ANR	506828	ArgumentList	gs_error_VMerror		506761	1					
ANR	506829	Argument	gs_error_VMerror		506761	0					
ANR	506830	Identifier	gs_error_VMerror		506761	0					
ANR	506831	ExpressionStatement	* a_std = * std	380:8:11407:11420	506761	2	True				
ANR	506832	AssignmentExpression	* a_std = * std		506761	0		=			
ANR	506833	UnaryOperationExpression	* a_std		506761	0					
ANR	506834	UnaryOperator	*		506761	0					
ANR	506835	Identifier	a_std		506761	1					
ANR	506836	UnaryOperationExpression	* std		506761	1					
ANR	506837	UnaryOperator	*		506761	0					
ANR	506838	Identifier	std		506761	1					
ANR	506839	ExpressionStatement	new_std = a_std	381:8:11430:11445	506761	3	True				
ANR	506840	AssignmentExpression	new_std = a_std		506761	0		=			
ANR	506841	Identifier	new_std		506761	0					
ANR	506842	Identifier	a_std		506761	1					
ANR	506843	ElseStatement	else		506761	0					
ANR	506844	IfStatement	if ( std != 0 && std -> ssize == dev -> params_size )		506761	0					
ANR	506845	Condition	std != 0 && std -> ssize == dev -> params_size	382:15:11462:11503	506761	0	True				
ANR	506846	AndExpression	std != 0 && std -> ssize == dev -> params_size		506761	0		&&			
ANR	506847	EqualityExpression	std != 0		506761	0		!=			
ANR	506848	Identifier	std		506761	0					
ANR	506849	PrimaryExpression	0		506761	1					
ANR	506850	EqualityExpression	std -> ssize == dev -> params_size		506761	1		==			
ANR	506851	PtrMemberAccess	std -> ssize		506761	0					
ANR	506852	Identifier	std		506761	0					
ANR	506853	Identifier	ssize		506761	1					
ANR	506854	PtrMemberAccess	dev -> params_size		506761	1					
ANR	506855	Identifier	dev		506761	0					
ANR	506856	Identifier	params_size		506761	1					
ANR	506857	CompoundStatement		20:59:710:710	506761	1					
ANR	506858	ExpressionStatement	new_std = std	384:8:11552:11565	506761	0	True				
ANR	506859	AssignmentExpression	new_std = std		506761	0		=			
ANR	506860	Identifier	new_std		506761	0					
ANR	506861	Identifier	std		506761	1					
ANR	506862	ElseStatement	else		506761	0					
ANR	506863	CompoundStatement		23:11:782:782	506761	0					
ANR	506864	ExpressionStatement	"a_std = ( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"	387:8:11645:11812	506761	0	True				
ANR	506865	AssignmentExpression	"a_std = ( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		506761	0		=			
ANR	506866	Identifier	a_std		506761	0					
ANR	506867	CastExpression	"( gs_memory_struct_type_t * ) gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		506761	1					
ANR	506868	CastTarget	gs_memory_struct_type_t *		506761	0					
ANR	506869	CallExpression	"gs_alloc_bytes_immovable ( mem -> non_gc_memory , sizeof ( * std ) , ""gs_copydevice(stype)"" )"		506761	1					
ANR	506870	Callee	gs_alloc_bytes_immovable		506761	0					
ANR	506871	Identifier	gs_alloc_bytes_immovable		506761	0					
ANR	506872	ArgumentList	mem -> non_gc_memory		506761	1					
ANR	506873	Argument	mem -> non_gc_memory		506761	0					
ANR	506874	PtrMemberAccess	mem -> non_gc_memory		506761	0					
ANR	506875	Identifier	mem		506761	0					
ANR	506876	Identifier	non_gc_memory		506761	1					
ANR	506877	Argument	sizeof ( * std )		506761	1					
ANR	506878	SizeofExpression	sizeof ( * std )		506761	0					
ANR	506879	Sizeof	sizeof		506761	0					
ANR	506880	UnaryOperationExpression	* std		506761	1					
ANR	506881	UnaryOperator	*		506761	0					
ANR	506882	Identifier	std		506761	1					
ANR	506883	Argument	"""gs_copydevice(stype)"""		506761	2					
ANR	506884	PrimaryExpression	"""gs_copydevice(stype)"""		506761	0					
ANR	506885	IfStatement	if ( ! a_std )		506761	1					
ANR	506886	Condition	! a_std	390:12:11826:11831	506761	0	True				
ANR	506887	UnaryOperationExpression	! a_std		506761	0					
ANR	506888	UnaryOperator	!		506761	0					
ANR	506889	Identifier	a_std		506761	1					
ANR	506890	ExpressionStatement	return_error ( gs_error_VMerror )	391:12:11846:11876	506761	1	True				
ANR	506891	CallExpression	return_error ( gs_error_VMerror )		506761	0					
ANR	506892	Callee	return_error		506761	0					
ANR	506893	Identifier	return_error		506761	0					
ANR	506894	ArgumentList	gs_error_VMerror		506761	1					
ANR	506895	Argument	gs_error_VMerror		506761	0					
ANR	506896	Identifier	gs_error_VMerror		506761	0					
ANR	506897	ExpressionStatement	"gx_device_make_struct_type ( a_std , dev )"	392:8:11886:11924	506761	2	True				
ANR	506898	CallExpression	"gx_device_make_struct_type ( a_std , dev )"		506761	0					
ANR	506899	Callee	gx_device_make_struct_type		506761	0					
ANR	506900	Identifier	gx_device_make_struct_type		506761	0					
ANR	506901	ArgumentList	a_std		506761	1					
ANR	506902	Argument	a_std		506761	0					
ANR	506903	Identifier	a_std		506761	0					
ANR	506904	Argument	dev		506761	1					
ANR	506905	Identifier	dev		506761	0					
ANR	506906	ExpressionStatement	new_std = a_std	393:8:11934:11949	506761	3	True				
ANR	506907	AssignmentExpression	new_std = a_std		506761	0		=			
ANR	506908	Identifier	new_std		506761	0					
ANR	506909	Identifier	a_std		506761	1					
ANR	506910	ExpressionStatement	"new_dev = gs_alloc_struct_immovable ( mem , gx_device , new_std , ""gs_copydevice(device)"" )"	399:4:12112:12237	506761	6	True				
ANR	506911	AssignmentExpression	"new_dev = gs_alloc_struct_immovable ( mem , gx_device , new_std , ""gs_copydevice(device)"" )"		506761	0		=			
ANR	506912	Identifier	new_dev		506761	0					
ANR	506913	CallExpression	"gs_alloc_struct_immovable ( mem , gx_device , new_std , ""gs_copydevice(device)"" )"		506761	1					
ANR	506914	Callee	gs_alloc_struct_immovable		506761	0					
ANR	506915	Identifier	gs_alloc_struct_immovable		506761	0					
ANR	506916	ArgumentList	mem		506761	1					
ANR	506917	Argument	mem		506761	0					
ANR	506918	Identifier	mem		506761	0					
ANR	506919	Argument	gx_device		506761	1					
ANR	506920	Identifier	gx_device		506761	0					
ANR	506921	Argument	new_std		506761	2					
ANR	506922	Identifier	new_std		506761	0					
ANR	506923	Argument	"""gs_copydevice(device)"""		506761	3					
ANR	506924	PrimaryExpression	"""gs_copydevice(device)"""		506761	0					
ANR	506925	IfStatement	if ( new_dev == 0 )		506761	7					
ANR	506926	Condition	new_dev == 0	401:8:12247:12258	506761	0	True				
ANR	506927	EqualityExpression	new_dev == 0		506761	0		==			
ANR	506928	Identifier	new_dev		506761	0					
ANR	506929	PrimaryExpression	0		506761	1					
ANR	506930	CompoundStatement		39:22:1465:1465	506761	1					
ANR	506931	ExpressionStatement	"gs_free_object ( mem -> non_gc_memory , a_std , ""gs_copydevice(stype)"" )"	402:8:12271:12336	506761	0	True				
ANR	506932	CallExpression	"gs_free_object ( mem -> non_gc_memory , a_std , ""gs_copydevice(stype)"" )"		506761	0					
ANR	506933	Callee	gs_free_object		506761	0					
ANR	506934	Identifier	gs_free_object		506761	0					
ANR	506935	ArgumentList	mem -> non_gc_memory		506761	1					
ANR	506936	Argument	mem -> non_gc_memory		506761	0					
ANR	506937	PtrMemberAccess	mem -> non_gc_memory		506761	0					
ANR	506938	Identifier	mem		506761	0					
ANR	506939	Identifier	non_gc_memory		506761	1					
ANR	506940	Argument	a_std		506761	1					
ANR	506941	Identifier	a_std		506761	0					
ANR	506942	Argument	"""gs_copydevice(stype)"""		506761	2					
ANR	506943	PrimaryExpression	"""gs_copydevice(stype)"""		506761	0					
ANR	506944	ExpressionStatement	return_error ( gs_error_VMerror )	403:8:12346:12376	506761	1	True				
ANR	506945	CallExpression	return_error ( gs_error_VMerror )		506761	0					
ANR	506946	Callee	return_error		506761	0					
ANR	506947	Identifier	return_error		506761	0					
ANR	506948	ArgumentList	gs_error_VMerror		506761	1					
ANR	506949	Argument	gs_error_VMerror		506761	0					
ANR	506950	Identifier	gs_error_VMerror		506761	0					
ANR	506951	ExpressionStatement	"gx_device_init ( new_dev , dev , mem , false )"	405:4:12388:12428	506761	8	True				
ANR	506952	CallExpression	"gx_device_init ( new_dev , dev , mem , false )"		506761	0					
ANR	506953	Callee	gx_device_init		506761	0					
ANR	506954	Identifier	gx_device_init		506761	0					
ANR	506955	ArgumentList	new_dev		506761	1					
ANR	506956	Argument	new_dev		506761	0					
ANR	506957	Identifier	new_dev		506761	0					
ANR	506958	Argument	dev		506761	1					
ANR	506959	Identifier	dev		506761	0					
ANR	506960	Argument	mem		506761	2					
ANR	506961	Identifier	mem		506761	0					
ANR	506962	Argument	false		506761	3					
ANR	506963	Identifier	false		506761	0					
ANR	506964	ExpressionStatement	gx_device_set_procs ( new_dev )	406:4:12434:12462	506761	9	True				
ANR	506965	CallExpression	gx_device_set_procs ( new_dev )		506761	0					
ANR	506966	Callee	gx_device_set_procs		506761	0					
ANR	506967	Identifier	gx_device_set_procs		506761	0					
ANR	506968	ArgumentList	new_dev		506761	1					
ANR	506969	Argument	new_dev		506761	0					
ANR	506970	Identifier	new_dev		506761	0					
ANR	506971	ExpressionStatement	new_dev -> stype = new_std	407:4:12468:12492	506761	10	True				
ANR	506972	AssignmentExpression	new_dev -> stype = new_std		506761	0		=			
ANR	506973	PtrMemberAccess	new_dev -> stype		506761	0					
ANR	506974	Identifier	new_dev		506761	0					
ANR	506975	Identifier	stype		506761	1					
ANR	506976	Identifier	new_std		506761	1					
ANR	506977	ExpressionStatement	new_dev -> stype_is_dynamic = new_std != std	408:4:12498:12540	506761	11	True				
ANR	506978	AssignmentExpression	new_dev -> stype_is_dynamic = new_std != std		506761	0		=			
ANR	506979	PtrMemberAccess	new_dev -> stype_is_dynamic		506761	0					
ANR	506980	Identifier	new_dev		506761	0					
ANR	506981	Identifier	stype_is_dynamic		506761	1					
ANR	506982	EqualityExpression	new_std != std		506761	1		!=			
ANR	506983	Identifier	new_std		506761	0					
ANR	506984	Identifier	std		506761	1					
ANR	506985	ExpressionStatement	new_dev -> is_open = dev -> is_open && keep_open	416:4:12900:12944	506761	12	True				
ANR	506986	AssignmentExpression	new_dev -> is_open = dev -> is_open && keep_open		506761	0		=			
ANR	506987	PtrMemberAccess	new_dev -> is_open		506761	0					
ANR	506988	Identifier	new_dev		506761	0					
ANR	506989	Identifier	is_open		506761	1					
ANR	506990	AndExpression	dev -> is_open && keep_open		506761	1		&&			
ANR	506991	PtrMemberAccess	dev -> is_open		506761	0					
ANR	506992	Identifier	dev		506761	0					
ANR	506993	Identifier	is_open		506761	1					
ANR	506994	Identifier	keep_open		506761	1					
ANR	506995	ExpressionStatement	"fill_dev_proc ( new_dev , finish_copydevice , gx_default_finish_copydevice )"	417:4:12950:13021	506761	13	True				
ANR	506996	CallExpression	"fill_dev_proc ( new_dev , finish_copydevice , gx_default_finish_copydevice )"		506761	0					
ANR	506997	Callee	fill_dev_proc		506761	0					
ANR	506998	Identifier	fill_dev_proc		506761	0					
ANR	506999	ArgumentList	new_dev		506761	1					
ANR	507000	Argument	new_dev		506761	0					
ANR	507001	Identifier	new_dev		506761	0					
ANR	507002	Argument	finish_copydevice		506761	1					
ANR	507003	Identifier	finish_copydevice		506761	0					
ANR	507004	Argument	gx_default_finish_copydevice		506761	2					
ANR	507005	Identifier	gx_default_finish_copydevice		506761	0					
ANR	507006	ExpressionStatement	"code = dev_proc ( new_dev , finish_copydevice ) ( new_dev , dev )"	418:4:13027:13084	506761	14	True				
ANR	507007	AssignmentExpression	"code = dev_proc ( new_dev , finish_copydevice ) ( new_dev , dev )"		506761	0		=			
ANR	507008	Identifier	code		506761	0					
ANR	507009	CallExpression	"dev_proc ( new_dev , finish_copydevice ) ( new_dev , dev )"		506761	1					
ANR	507010	Callee	"dev_proc ( new_dev , finish_copydevice )"		506761	0					
ANR	507011	CallExpression	"dev_proc ( new_dev , finish_copydevice )"		506761	0					
ANR	507012	Callee	dev_proc		506761	0					
ANR	507013	Identifier	dev_proc		506761	0					
ANR	507014	ArgumentList	new_dev		506761	1					
ANR	507015	Argument	new_dev		506761	0					
ANR	507016	Identifier	new_dev		506761	0					
ANR	507017	Argument	finish_copydevice		506761	1					
ANR	507018	Identifier	finish_copydevice		506761	0					
ANR	507019	ArgumentList	new_dev		506761	1					
ANR	507020	Argument	new_dev		506761	0					
ANR	507021	Identifier	new_dev		506761	0					
ANR	507022	Argument	dev		506761	1					
ANR	507023	Identifier	dev		506761	0					
ANR	507024	IfStatement	if ( code < 0 )		506761	15					
ANR	507025	Condition	code < 0	419:8:13094:13101	506761	0	True				
ANR	507026	RelationalExpression	code < 0		506761	0		<			
ANR	507027	Identifier	code		506761	0					
ANR	507028	PrimaryExpression	0		506761	1					
ANR	507029	CompoundStatement		57:18:2308:2308	506761	1					
ANR	507030	ExpressionStatement	"gs_free_object ( mem , new_dev , ""gs_copydevice(device)"" )"	420:8:13114:13167	506761	0	True				
ANR	507031	CallExpression	"gs_free_object ( mem , new_dev , ""gs_copydevice(device)"" )"		506761	0					
ANR	507032	Callee	gs_free_object		506761	0					
ANR	507033	Identifier	gs_free_object		506761	0					
ANR	507034	ArgumentList	mem		506761	1					
ANR	507035	Argument	mem		506761	0					
ANR	507036	Identifier	mem		506761	0					
ANR	507037	Argument	new_dev		506761	1					
ANR	507038	Identifier	new_dev		506761	0					
ANR	507039	Argument	"""gs_copydevice(device)"""		506761	2					
ANR	507040	PrimaryExpression	"""gs_copydevice(device)"""		506761	0					
ANR	507041	Statement	which	422:9:13234:13238	506761	1	True				
ANR	507042	Statement	closes	422:15:13240:13245	506761	2	True				
ANR	507043	Statement	the	422:22:13247:13249	506761	3	True				
ANR	507044	Statement	device	422:26:13251:13256	506761	4	True				
ANR	507045	Statement	and	422:33:13258:13260	506761	5	True				
ANR	507046	Statement	releaszes	422:37:13262:13270	506761	6	True				
ANR	507047	Statement	its	422:47:13272:13274	506761	7	True				
ANR	507048	Statement	stype	422:51:13276:13280	506761	8	True				
ANR	507049	Statement	","	422:56:13281:13281	506761	9	True				
ANR	507050	Statement	i	422:58:13283:13283	506761	10	True				
ANR	507051	Statement	.	422:59:13284:13284	506761	11	True				
ANR	507052	Statement	e	422:60:13285:13285	506761	12	True				
ANR	507053	Statement	.	422:61:13286:13286	506761	13	True				
ANR	507054	Statement	a_std	422:63:13288:13292	506761	14	True				
ANR	507055	Statement	.	422:68:13293:13293	506761	15	True				
ANR	507056	Statement	*	422:70:13295:13295	506761	16	True				
ANR	507057	Statement	/	422:71:13296:13296	506761	17	True				
ANR	507058	IfStatement	if ( a_std )		506761	18					
ANR	507059	Condition	a_std	423:12:13310:13314	506761	0	True				
ANR	507060	Identifier	a_std		506761	0					
ANR	507061	ExpressionStatement	"gs_free_object ( dev -> memory -> non_gc_memory , a_std , ""gs_copydevice(stype)"" )"	424:12:13329:13402	506761	1	True				
ANR	507062	CallExpression	"gs_free_object ( dev -> memory -> non_gc_memory , a_std , ""gs_copydevice(stype)"" )"		506761	0					
ANR	507063	Callee	gs_free_object		506761	0					
ANR	507064	Identifier	gs_free_object		506761	0					
ANR	507065	ArgumentList	dev -> memory -> non_gc_memory		506761	1					
ANR	507066	Argument	dev -> memory -> non_gc_memory		506761	0					
ANR	507067	PtrMemberAccess	dev -> memory -> non_gc_memory		506761	0					
ANR	507068	PtrMemberAccess	dev -> memory		506761	0					
ANR	507069	Identifier	dev		506761	0					
ANR	507070	Identifier	memory		506761	1					
ANR	507071	Identifier	non_gc_memory		506761	1					
ANR	507072	Argument	a_std		506761	1					
ANR	507073	Identifier	a_std		506761	0					
ANR	507074	Argument	"""gs_copydevice(stype)"""		506761	2					
ANR	507075	PrimaryExpression	"""gs_copydevice(stype)"""		506761	0					
ANR	507076	ReturnStatement	return code ;	426:8:13419:13430	506761	19	True				
ANR	507077	Identifier	code		506761	0					
ANR	507078	ExpressionStatement	* pnew_dev = new_dev	428:4:13442:13461	506761	16	True				
ANR	507079	AssignmentExpression	* pnew_dev = new_dev		506761	0		=			
ANR	507080	UnaryOperationExpression	* pnew_dev		506761	0					
ANR	507081	UnaryOperator	*		506761	0					
ANR	507082	Identifier	pnew_dev		506761	1					
ANR	507083	Identifier	new_dev		506761	1					
ANR	507084	ReturnStatement	return 0 ;	429:4:13467:13475	506761	17	True				
ANR	507085	PrimaryExpression	0		506761	0					
ANR	507086	ReturnType	int		506761	1					
ANR	507087	Identifier	gs_copydevice2		506761	2					
ANR	507088	ParameterList	"gx_device * * pnew_dev , const gx_device * dev , bool keep_open , gs_memory_t * mem"		506761	3					
ANR	507089	Parameter	gx_device * * pnew_dev	361:15:10699:10719	506761	0	True				
ANR	507090	ParameterType	gx_device * *		506761	0					
ANR	507091	Identifier	pnew_dev		506761	1					
ANR	507092	Parameter	const gx_device * dev	361:38:10722:10742	506761	1	True				
ANR	507093	ParameterType	const gx_device *		506761	0					
ANR	507094	Identifier	dev		506761	1					
ANR	507095	Parameter	bool keep_open	361:61:10745:10758	506761	2	True				
ANR	507096	ParameterType	bool		506761	0					
ANR	507097	Identifier	keep_open		506761	1					
ANR	507098	Parameter	gs_memory_t * mem	362:15:10776:10792	506761	3	True				
ANR	507099	ParameterType	gs_memory_t *		506761	0					
ANR	507100	Identifier	mem		506761	1					
ANR	507101	CFGEntryNode	ENTRY		506761		True				
ANR	507102	CFGExitNode	EXIT		506761		True				
ANR	507103	Symbol	* dev		506761						
ANR	507104	Symbol	gx_default_finish_copydevice		506761						
ANR	507105	Symbol	pnew_dev		506761						
ANR	507106	Symbol	dev -> stype_is_dynamic		506761						
ANR	507107	Symbol	code		506761						
ANR	507108	Symbol	new_std		506761						
ANR	507109	Symbol	a_std		506761						
ANR	507110	Symbol	gs_alloc_struct_immovable		506761						
ANR	507111	Symbol	std -> ssize		506761						
ANR	507112	Symbol	* std		506761						
ANR	507113	Symbol	new_dev -> is_open		506761						
ANR	507114	Symbol	finish_copydevice		506761						
ANR	507115	Symbol	keep_open		506761						
ANR	507116	Symbol	new_dev -> stype		506761						
ANR	507117	Symbol	dev		506761						
ANR	507118	Symbol	mem		506761						
ANR	507119	Symbol	gs_alloc_bytes_immovable		506761						
ANR	507120	Symbol	gx_device		506761						
ANR	507121	Symbol	dev_proc		506761						
ANR	507122	Symbol	* new_dev		506761						
ANR	507123	Symbol	std		506761						
ANR	507124	Symbol	* pnew_dev		506761						
ANR	507125	Symbol	false		506761						
ANR	507126	Symbol	* * dev		506761						
ANR	507127	Symbol	* a_std		506761						
ANR	507128	Symbol	dev -> memory -> non_gc_memory		506761						
ANR	507129	Symbol	dev -> stype		506761						
ANR	507130	Symbol	mem -> non_gc_memory		506761						
ANR	507131	Symbol	dev -> params_size		506761						
ANR	507132	Symbol	gs_error_VMerror		506761						
ANR	507133	Symbol	dev -> memory		506761						
ANR	507134	Symbol	dev -> is_open		506761						
ANR	507135	Symbol	new_dev		506761						
ANR	507136	Symbol	new_dev -> stype_is_dynamic		506761						
ANR	507137	Symbol	* mem		506761						
ANR	507138	Symbol	* dev -> memory		506761						
ANR	507139	Function	gs_copydevice	431:0:13479:13618							
ANR	507140	FunctionDef	"gs_copydevice (gx_device * * pnew_dev , const gx_device * dev , gs_memory_t * mem)"		507139	0					
ANR	507141	CompoundStatement		433:0:13562:13618	507139	0					
ANR	507142	ReturnStatement	"return gs_copydevice2 ( pnew_dev , dev , false , mem ) ;"	434:4:13568:13616	507139	0	True				
ANR	507143	CallExpression	"gs_copydevice2 ( pnew_dev , dev , false , mem )"		507139	0					
ANR	507144	Callee	gs_copydevice2		507139	0					
ANR	507145	Identifier	gs_copydevice2		507139	0					
ANR	507146	ArgumentList	pnew_dev		507139	1					
ANR	507147	Argument	pnew_dev		507139	0					
ANR	507148	Identifier	pnew_dev		507139	0					
ANR	507149	Argument	dev		507139	1					
ANR	507150	Identifier	dev		507139	0					
ANR	507151	Argument	false		507139	2					
ANR	507152	Identifier	false		507139	0					
ANR	507153	Argument	mem		507139	3					
ANR	507154	Identifier	mem		507139	0					
ANR	507155	ReturnType	int		507139	1					
ANR	507156	Identifier	gs_copydevice		507139	2					
ANR	507157	ParameterList	"gx_device * * pnew_dev , const gx_device * dev , gs_memory_t * mem"		507139	3					
ANR	507158	Parameter	gx_device * * pnew_dev	432:14:13497:13517	507139	0	True				
ANR	507159	ParameterType	gx_device * *		507139	0					
ANR	507160	Identifier	pnew_dev		507139	1					
ANR	507161	Parameter	const gx_device * dev	432:37:13520:13540	507139	1	True				
ANR	507162	ParameterType	const gx_device *		507139	0					
ANR	507163	Identifier	dev		507139	1					
ANR	507164	Parameter	gs_memory_t * mem	432:60:13543:13559	507139	2	True				
ANR	507165	ParameterType	gs_memory_t *		507139	0					
ANR	507166	Identifier	mem		507139	1					
ANR	507167	CFGEntryNode	ENTRY		507139		True				
ANR	507168	CFGExitNode	EXIT		507139		True				
ANR	507169	Symbol	gs_copydevice2		507139						
ANR	507170	Symbol	pnew_dev		507139						
ANR	507171	Symbol	dev		507139						
ANR	507172	Symbol	mem		507139						
ANR	507173	Symbol	false		507139						
ANR	507174	Function	gs_opendevice	439:0:13722:14034							
ANR	507175	FunctionDef	gs_opendevice (gx_device * dev)		507174	0					
ANR	507176	CompoundStatement		441:0:13756:14034	507174	0					
ANR	507177	IfStatement	if ( dev -> is_open )		507174	0					
ANR	507178	Condition	dev -> is_open	442:8:13766:13777	507174	0	True				
ANR	507179	PtrMemberAccess	dev -> is_open		507174	0					
ANR	507180	Identifier	dev		507174	0					
ANR	507181	Identifier	is_open		507174	1					
ANR	507182	ReturnStatement	return 0 ;	443:8:13788:13796	507174	1	True				
ANR	507183	PrimaryExpression	0		507174	0					
ANR	507184	ExpressionStatement	check_device_separable ( dev )	444:4:13802:13829	507174	1	True				
ANR	507185	CallExpression	check_device_separable ( dev )		507174	0					
ANR	507186	Callee	check_device_separable		507174	0					
ANR	507187	Identifier	check_device_separable		507174	0					
ANR	507188	ArgumentList	dev		507174	1					
ANR	507189	Argument	dev		507174	0					
ANR	507190	Identifier	dev		507174	0					
ANR	507191	ExpressionStatement	gx_device_fill_in_procs ( dev )	445:4:13835:13863	507174	2	True				
ANR	507192	CallExpression	gx_device_fill_in_procs ( dev )		507174	0					
ANR	507193	Callee	gx_device_fill_in_procs		507174	0					
ANR	507194	Identifier	gx_device_fill_in_procs		507174	0					
ANR	507195	ArgumentList	dev		507174	1					
ANR	507196	Argument	dev		507174	0					
ANR	507197	Identifier	dev		507174	0					
ANR	507198	CompoundStatement		7:8:122:167	507174	3					
ANR	507199	IdentifierDeclStatement	"int code = ( * dev_proc ( dev , open_device ) ) ( dev ) ;"	447:8:13879:13924	507174	0	True				
ANR	507200	IdentifierDecl	"code = ( * dev_proc ( dev , open_device ) ) ( dev )"		507174	0					
ANR	507201	IdentifierDeclType	int		507174	0					
ANR	507202	Identifier	code		507174	1					
ANR	507203	AssignmentExpression	"code = ( * dev_proc ( dev , open_device ) ) ( dev )"		507174	2		=			
ANR	507204	Identifier	code		507174	0					
ANR	507205	CallExpression	"( * dev_proc ( dev , open_device ) ) ( dev )"		507174	1					
ANR	507206	Callee	"* dev_proc ( dev , open_device )"		507174	0					
ANR	507207	UnaryOperationExpression	"* dev_proc ( dev , open_device )"		507174	0					
ANR	507208	UnaryOperator	*		507174	0					
ANR	507209	CallExpression	"dev_proc ( dev , open_device )"		507174	1					
ANR	507210	Callee	dev_proc		507174	0					
ANR	507211	Identifier	dev_proc		507174	0					
ANR	507212	ArgumentList	dev		507174	1					
ANR	507213	Argument	dev		507174	0					
ANR	507214	Identifier	dev		507174	0					
ANR	507215	Argument	open_device		507174	1					
ANR	507216	Identifier	open_device		507174	0					
ANR	507217	ArgumentList	dev		507174	1					
ANR	507218	Argument	dev		507174	0					
ANR	507219	Identifier	dev		507174	0					
ANR	507220	IfStatement	if ( code < 0 )		507174	1					
ANR	507221	Condition	code < 0	449:12:13939:13946	507174	0	True				
ANR	507222	RelationalExpression	code < 0		507174	0		<			
ANR	507223	Identifier	code		507174	0					
ANR	507224	PrimaryExpression	0		507174	1					
ANR	507225	ExpressionStatement	return_error ( code )	450:12:13961:13979	507174	1	True				
ANR	507226	CallExpression	return_error ( code )		507174	0					
ANR	507227	Callee	return_error		507174	0					
ANR	507228	Identifier	return_error		507174	0					
ANR	507229	ArgumentList	code		507174	1					
ANR	507230	Argument	code		507174	0					
ANR	507231	Identifier	code		507174	0					
ANR	507232	ExpressionStatement	dev -> is_open = true	451:8:13989:14008	507174	2	True				
ANR	507233	AssignmentExpression	dev -> is_open = true		507174	0		=			
ANR	507234	PtrMemberAccess	dev -> is_open		507174	0					
ANR	507235	Identifier	dev		507174	0					
ANR	507236	Identifier	is_open		507174	1					
ANR	507237	Identifier	true		507174	1					
ANR	507238	ReturnStatement	return 1 ;	452:8:14018:14026	507174	3	True				
ANR	507239	PrimaryExpression	1		507174	0					
ANR	507240	ReturnType	int		507174	1					
ANR	507241	Identifier	gs_opendevice		507174	2					
ANR	507242	ParameterList	gx_device * dev		507174	3					
ANR	507243	Parameter	gx_device * dev	440:14:13740:13753	507174	0	True				
ANR	507244	ParameterType	gx_device *		507174	0					
ANR	507245	Identifier	dev		507174	1					
ANR	507246	CFGEntryNode	ENTRY		507174		True				
ANR	507247	CFGExitNode	EXIT		507174		True				
ANR	507248	Symbol	* dev		507174						
ANR	507249	Symbol	dev -> is_open		507174						
ANR	507250	Symbol	code		507174						
ANR	507251	Symbol	dev		507174						
ANR	507252	Symbol	* dev_proc		507174						
ANR	507253	Symbol	dev_proc		507174						
ANR	507254	Symbol	"* dev_proc ( dev , open_device )"		507174						
ANR	507255	Symbol	true		507174						
ANR	507256	Symbol	open_device		507174						
ANR	507257	Function	gs_gstate_update_device	456:0:14037:14175							
ANR	507258	FunctionDef	"gs_gstate_update_device (gs_gstate * pgs , gx_device * dev)"		507257	0					
ANR	507259	CompoundStatement		458:0:14105:14175	507257	0					
ANR	507260	ExpressionStatement	"gx_set_cmap_procs ( pgs , dev )"	459:4:14111:14138	507257	0	True				
ANR	507261	CallExpression	"gx_set_cmap_procs ( pgs , dev )"		507257	0					
ANR	507262	Callee	gx_set_cmap_procs		507257	0					
ANR	507263	Identifier	gx_set_cmap_procs		507257	0					
ANR	507264	ArgumentList	pgs		507257	1					
ANR	507265	Argument	pgs		507257	0					
ANR	507266	Identifier	pgs		507257	0					
ANR	507267	Argument	dev		507257	1					
ANR	507268	Identifier	dev		507257	0					
ANR	507269	ExpressionStatement	gx_unset_both_dev_colors ( pgs )	460:4:14144:14173	507257	1	True				
ANR	507270	CallExpression	gx_unset_both_dev_colors ( pgs )		507257	0					
ANR	507271	Callee	gx_unset_both_dev_colors		507257	0					
ANR	507272	Identifier	gx_unset_both_dev_colors		507257	0					
ANR	507273	ArgumentList	pgs		507257	1					
ANR	507274	Argument	pgs		507257	0					
ANR	507275	Identifier	pgs		507257	0					
ANR	507276	ReturnType	static void		507257	1					
ANR	507277	Identifier	gs_gstate_update_device		507257	2					
ANR	507278	ParameterList	"gs_gstate * pgs , gx_device * dev"		507257	3					
ANR	507279	Parameter	gs_gstate * pgs	457:24:14073:14086	507257	0	True				
ANR	507280	ParameterType	gs_gstate *		507257	0					
ANR	507281	Identifier	pgs		507257	1					
ANR	507282	Parameter	gx_device * dev	457:40:14089:14102	507257	1	True				
ANR	507283	ParameterType	gx_device *		507257	0					
ANR	507284	Identifier	dev		507257	1					
ANR	507285	CFGEntryNode	ENTRY		507257		True				
ANR	507286	CFGExitNode	EXIT		507257		True				
ANR	507287	Symbol	dev		507257						
ANR	507288	Symbol	pgs		507257						
ANR	507289	Function	gs_gstate_putdeviceparams	463:0:14178:14493							
ANR	507290	FunctionDef	"gs_gstate_putdeviceparams (gs_gstate * pgs , gx_device * dev , gs_param_list * plist)"		507289	0					
ANR	507291	CompoundStatement		465:0:14262:14493	507289	0					
ANR	507292	IdentifierDeclStatement	int code ;	466:4:14268:14276	507289	0	True				
ANR	507293	IdentifierDecl	code		507289	0					
ANR	507294	IdentifierDeclType	int		507289	0					
ANR	507295	Identifier	code		507289	1					
ANR	507296	IdentifierDeclStatement	gx_device * dev2 ;	467:4:14282:14297	507289	1	True				
ANR	507297	IdentifierDecl	* dev2		507289	0					
ANR	507298	IdentifierDeclType	gx_device *		507289	0					
ANR	507299	Identifier	dev2		507289	1					
ANR	507300	IfStatement	if ( dev )		507289	2					
ANR	507301	Condition	dev	469:8:14308:14310	507289	0	True				
ANR	507302	Identifier	dev		507289	0					
ANR	507303	ExpressionStatement	dev2 = dev	470:7:14320:14330	507289	1	True				
ANR	507304	AssignmentExpression	dev2 = dev		507289	0		=			
ANR	507305	Identifier	dev2		507289	0					
ANR	507306	Identifier	dev		507289	1					
ANR	507307	ElseStatement	else		507289	0					
ANR	507308	ExpressionStatement	dev2 = pgs -> device	472:7:14348:14366	507289	0	True				
ANR	507309	AssignmentExpression	dev2 = pgs -> device		507289	0		=			
ANR	507310	Identifier	dev2		507289	0					
ANR	507311	PtrMemberAccess	pgs -> device		507289	1					
ANR	507312	Identifier	pgs		507289	0					
ANR	507313	Identifier	device		507289	1					
ANR	507314	ExpressionStatement	"code = gs_putdeviceparams ( dev2 , plist )"	474:4:14373:14411	507289	3	True				
ANR	507315	AssignmentExpression	"code = gs_putdeviceparams ( dev2 , plist )"		507289	0		=			
ANR	507316	Identifier	code		507289	0					
ANR	507317	CallExpression	"gs_putdeviceparams ( dev2 , plist )"		507289	1					
ANR	507318	Callee	gs_putdeviceparams		507289	0					
ANR	507319	Identifier	gs_putdeviceparams		507289	0					
ANR	507320	ArgumentList	dev2		507289	1					
ANR	507321	Argument	dev2		507289	0					
ANR	507322	Identifier	dev2		507289	0					
ANR	507323	Argument	plist		507289	1					
ANR	507324	Identifier	plist		507289	0					
ANR	507325	IfStatement	if ( code >= 0 )		507289	4					
ANR	507326	Condition	code >= 0	475:8:14421:14429	507289	0	True				
ANR	507327	RelationalExpression	code >= 0		507289	0		>=			
ANR	507328	Identifier	code		507289	0					
ANR	507329	PrimaryExpression	0		507289	1					
ANR	507330	ExpressionStatement	"gs_gstate_update_device ( pgs , dev2 )"	476:8:14440:14474	507289	1	True				
ANR	507331	CallExpression	"gs_gstate_update_device ( pgs , dev2 )"		507289	0					
ANR	507332	Callee	gs_gstate_update_device		507289	0					
ANR	507333	Identifier	gs_gstate_update_device		507289	0					
ANR	507334	ArgumentList	pgs		507289	1					
ANR	507335	Argument	pgs		507289	0					
ANR	507336	Identifier	pgs		507289	0					
ANR	507337	Argument	dev2		507289	1					
ANR	507338	Identifier	dev2		507289	0					
ANR	507339	ReturnStatement	return code ;	477:4:14480:14491	507289	5	True				
ANR	507340	Identifier	code		507289	0					
ANR	507341	ReturnType	int		507289	1					
ANR	507342	Identifier	gs_gstate_putdeviceparams		507289	2					
ANR	507343	ParameterList	"gs_gstate * pgs , gx_device * dev , gs_param_list * plist"		507289	3					
ANR	507344	Parameter	gs_gstate * pgs	464:26:14208:14221	507289	0	True				
ANR	507345	ParameterType	gs_gstate *		507289	0					
ANR	507346	Identifier	pgs		507289	1					
ANR	507347	Parameter	gx_device * dev	464:42:14224:14237	507289	1	True				
ANR	507348	ParameterType	gx_device *		507289	0					
ANR	507349	Identifier	dev		507289	1					
ANR	507350	Parameter	gs_param_list * plist	464:58:14240:14259	507289	2	True				
ANR	507351	ParameterType	gs_param_list *		507289	0					
ANR	507352	Identifier	plist		507289	1					
ANR	507353	CFGEntryNode	ENTRY		507289		True				
ANR	507354	CFGExitNode	EXIT		507289		True				
ANR	507355	Symbol	plist		507289						
ANR	507356	Symbol	code		507289						
ANR	507357	Symbol	dev2		507289						
ANR	507358	Symbol	dev		507289						
ANR	507359	Symbol	gs_putdeviceparams		507289						
ANR	507360	Symbol	* pgs		507289						
ANR	507361	Symbol	pgs -> device		507289						
ANR	507362	Symbol	pgs		507289						
ANR	507363	Function	gs_setdevice	481:0:14539:14711							
ANR	507364	FunctionDef	"gs_setdevice (gs_gstate * pgs , gx_device * dev)"		507363	0					
ANR	507365	CompoundStatement		483:0:14590:14711	507363	0					
ANR	507366	IdentifierDeclStatement	"int code = gs_setdevice_no_erase ( pgs , dev ) ;"	484:4:14596:14638	507363	0	True				
ANR	507367	IdentifierDecl	"code = gs_setdevice_no_erase ( pgs , dev )"		507363	0					
ANR	507368	IdentifierDeclType	int		507363	0					
ANR	507369	Identifier	code		507363	1					
ANR	507370	AssignmentExpression	"code = gs_setdevice_no_erase ( pgs , dev )"		507363	2		=			
ANR	507371	Identifier	code		507363	0					
ANR	507372	CallExpression	"gs_setdevice_no_erase ( pgs , dev )"		507363	1					
ANR	507373	Callee	gs_setdevice_no_erase		507363	0					
ANR	507374	Identifier	gs_setdevice_no_erase		507363	0					
ANR	507375	ArgumentList	pgs		507363	1					
ANR	507376	Argument	pgs		507363	0					
ANR	507377	Identifier	pgs		507363	0					
ANR	507378	Argument	dev		507363	1					
ANR	507379	Identifier	dev		507363	0					
ANR	507380	IfStatement	if ( code == 1 )		507363	1					
ANR	507381	Condition	code == 1	486:8:14649:14657	507363	0	True				
ANR	507382	EqualityExpression	code == 1		507363	0		==			
ANR	507383	Identifier	code		507363	0					
ANR	507384	PrimaryExpression	1		507363	1					
ANR	507385	ExpressionStatement	code = gs_erasepage ( pgs )	487:8:14668:14692	507363	1	True				
ANR	507386	AssignmentExpression	code = gs_erasepage ( pgs )		507363	0		=			
ANR	507387	Identifier	code		507363	0					
ANR	507388	CallExpression	gs_erasepage ( pgs )		507363	1					
ANR	507389	Callee	gs_erasepage		507363	0					
ANR	507390	Identifier	gs_erasepage		507363	0					
ANR	507391	ArgumentList	pgs		507363	1					
ANR	507392	Argument	pgs		507363	0					
ANR	507393	Identifier	pgs		507363	0					
ANR	507394	ReturnStatement	return code ;	488:4:14698:14709	507363	2	True				
ANR	507395	Identifier	code		507363	0					
ANR	507396	ReturnType	int		507363	1					
ANR	507397	Identifier	gs_setdevice		507363	2					
ANR	507398	ParameterList	"gs_gstate * pgs , gx_device * dev"		507363	3					
ANR	507399	Parameter	gs_gstate * pgs	482:13:14556:14570	507363	0	True				
ANR	507400	ParameterType	gs_gstate *		507363	0					
ANR	507401	Identifier	pgs		507363	1					
ANR	507402	Parameter	gx_device * dev	482:30:14573:14587	507363	1	True				
ANR	507403	ParameterType	gx_device *		507363	0					
ANR	507404	Identifier	dev		507363	1					
ANR	507405	CFGEntryNode	ENTRY		507363		True				
ANR	507406	CFGExitNode	EXIT		507363		True				
ANR	507407	Symbol	code		507363						
ANR	507408	Symbol	dev		507363						
ANR	507409	Symbol	gs_erasepage		507363						
ANR	507410	Symbol	gs_setdevice_no_erase		507363						
ANR	507411	Symbol	pgs		507363						
ANR	507412	Function	gs_setdevice_no_erase	490:0:14713:18534							
ANR	507413	FunctionDef	"gs_setdevice_no_erase (gs_gstate * pgs , gx_device * dev)"		507412	0					
ANR	507414	CompoundStatement		492:0:14773:18534	507412	0					
ANR	507415	IdentifierDeclStatement	"int open_code = 0 , code ;"	493:4:14779:14802	507412	0	True				
ANR	507416	IdentifierDecl	open_code = 0		507412	0					
ANR	507417	IdentifierDeclType	int		507412	0					
ANR	507418	Identifier	open_code		507412	1					
ANR	507419	AssignmentExpression	open_code = 0		507412	2		=			
ANR	507420	Identifier	open_code		507412	0					
ANR	507421	PrimaryExpression	0		507412	1					
ANR	507422	IdentifierDecl	code		507412	1					
ANR	507423	IdentifierDeclType	int		507412	0					
ANR	507424	Identifier	code		507412	1					
ANR	507425	IdentifierDeclStatement	gs_lib_ctx_t * libctx = gs_lib_ctx_get_interp_instance ( pgs -> memory ) ;	494:4:14808:14874	507412	1	True				
ANR	507426	IdentifierDecl	* libctx = gs_lib_ctx_get_interp_instance ( pgs -> memory )		507412	0					
ANR	507427	IdentifierDeclType	gs_lib_ctx_t *		507412	0					
ANR	507428	Identifier	libctx		507412	1					
ANR	507429	AssignmentExpression	* libctx = gs_lib_ctx_get_interp_instance ( pgs -> memory )		507412	2		=			
ANR	507430	Identifier	libctx		507412	0					
ANR	507431	CallExpression	gs_lib_ctx_get_interp_instance ( pgs -> memory )		507412	1					
ANR	507432	Callee	gs_lib_ctx_get_interp_instance		507412	0					
ANR	507433	Identifier	gs_lib_ctx_get_interp_instance		507412	0					
ANR	507434	ArgumentList	pgs -> memory		507412	1					
ANR	507435	Argument	pgs -> memory		507412	0					
ANR	507436	PtrMemberAccess	pgs -> memory		507412	0					
ANR	507437	Identifier	pgs		507412	0					
ANR	507438	Identifier	memory		507412	1					
ANR	507439	IfStatement	if ( libctx -> io_device_table != NULL )		507412	2					
ANR	507440	Condition	libctx -> io_device_table != NULL	498:8:15004:15034	507412	0	True				
ANR	507441	EqualityExpression	libctx -> io_device_table != NULL		507412	0		!=			
ANR	507442	PtrMemberAccess	libctx -> io_device_table		507412	0					
ANR	507443	Identifier	libctx		507412	0					
ANR	507444	Identifier	io_device_table		507412	1					
ANR	507445	Identifier	NULL		507412	1					
ANR	507446	CompoundStatement		8:8:273:303	507412	1					
ANR	507447	IdentifierDeclStatement	cmm_dev_profile_t * dev_profile ;	499:8:15047:15077	507412	0	True				
ANR	507448	IdentifierDecl	* dev_profile		507412	0					
ANR	507449	IdentifierDeclType	cmm_dev_profile_t *		507412	0					
ANR	507450	Identifier	dev_profile		507412	1					
ANR	507451	IfStatement	if ( pgs -> icc_manager -> lab_profile == NULL )		507412	1					
ANR	507452	Condition	pgs -> icc_manager -> lab_profile == NULL	500:12:15091:15127	507412	0	True				
ANR	507453	EqualityExpression	pgs -> icc_manager -> lab_profile == NULL		507412	0		==			
ANR	507454	PtrMemberAccess	pgs -> icc_manager -> lab_profile		507412	0					
ANR	507455	PtrMemberAccess	pgs -> icc_manager		507412	0					
ANR	507456	Identifier	pgs		507412	0					
ANR	507457	Identifier	icc_manager		507412	1					
ANR	507458	Identifier	lab_profile		507412	1					
ANR	507459	Identifier	NULL		507412	1					
ANR	507460	CompoundStatement		9:51:356:356	507412	1					
ANR	507461	ExpressionStatement	gsicc_init_iccmanager ( pgs )	501:12:15179:15205	507412	0	True				
ANR	507462	CallExpression	gsicc_init_iccmanager ( pgs )		507412	0					
ANR	507463	Callee	gsicc_init_iccmanager		507412	0					
ANR	507464	Identifier	gsicc_init_iccmanager		507412	0					
ANR	507465	ArgumentList	pgs		507412	1					
ANR	507466	Argument	pgs		507412	0					
ANR	507467	Identifier	pgs		507412	0					
ANR	507468	IfStatement	if ( dev -> procs . get_profile != NULL )		507412	2					
ANR	507469	Condition	dev -> procs . get_profile != NULL	509:12:15646:15675	507412	0	True				
ANR	507470	EqualityExpression	dev -> procs . get_profile != NULL		507412	0		!=			
ANR	507471	MemberAccess	dev -> procs . get_profile		507412	0					
ANR	507472	PtrMemberAccess	dev -> procs		507412	0					
ANR	507473	Identifier	dev		507412	0					
ANR	507474	Identifier	procs		507412	1					
ANR	507475	Identifier	get_profile		507412	1					
ANR	507476	Identifier	NULL		507412	1					
ANR	507477	CompoundStatement		18:44:904:904	507412	1					
ANR	507478	ExpressionStatement	"code = dev_proc ( dev , get_profile ) ( dev , & dev_profile )"	510:12:15692:15744	507412	0	True				
ANR	507479	AssignmentExpression	"code = dev_proc ( dev , get_profile ) ( dev , & dev_profile )"		507412	0		=			
ANR	507480	Identifier	code		507412	0					
ANR	507481	CallExpression	"dev_proc ( dev , get_profile ) ( dev , & dev_profile )"		507412	1					
ANR	507482	Callee	"dev_proc ( dev , get_profile )"		507412	0					
ANR	507483	CallExpression	"dev_proc ( dev , get_profile )"		507412	0					
ANR	507484	Callee	dev_proc		507412	0					
ANR	507485	Identifier	dev_proc		507412	0					
ANR	507486	ArgumentList	dev		507412	1					
ANR	507487	Argument	dev		507412	0					
ANR	507488	Identifier	dev		507412	0					
ANR	507489	Argument	get_profile		507412	1					
ANR	507490	Identifier	get_profile		507412	0					
ANR	507491	ArgumentList	dev		507412	1					
ANR	507492	Argument	dev		507412	0					
ANR	507493	Identifier	dev		507412	0					
ANR	507494	Argument	& dev_profile		507412	1					
ANR	507495	UnaryOperationExpression	& dev_profile		507412	0					
ANR	507496	UnaryOperator	&		507412	0					
ANR	507497	Identifier	dev_profile		507412	1					
ANR	507498	IfStatement	if ( code < 0 )		507412	1					
ANR	507499	Condition	code < 0	511:16:15762:15769	507412	0	True				
ANR	507500	RelationalExpression	code < 0		507412	0		<			
ANR	507501	Identifier	code		507412	0					
ANR	507502	PrimaryExpression	0		507412	1					
ANR	507503	CompoundStatement		20:26:998:998	507412	1					
ANR	507504	ReturnStatement	return ( code ) ;	512:16:15790:15802	507412	0	True				
ANR	507505	Identifier	code		507412	0					
ANR	507506	IfStatement	if ( dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL )		507412	2					
ANR	507507	Condition	dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL	514:16:15834:15925	507412	0	True				
ANR	507508	OrExpression	dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL		507412	0		||			
ANR	507509	EqualityExpression	dev_profile == NULL		507412	0		==			
ANR	507510	Identifier	dev_profile		507412	0					
ANR	507511	Identifier	NULL		507412	1					
ANR	507512	EqualityExpression	dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL		507412	1		==			
ANR	507513	ArrayIndexing	dev_profile -> device_profile [ gsDEFAULTPROFILE ]		507412	0					
ANR	507514	PtrMemberAccess	dev_profile -> device_profile		507412	0					
ANR	507515	Identifier	dev_profile		507412	0					
ANR	507516	Identifier	device_profile		507412	1					
ANR	507517	Identifier	gsDEFAULTPROFILE		507412	1					
ANR	507518	Identifier	NULL		507412	1					
ANR	507519	CompoundStatement		24:71:1154:1154	507412	1					
ANR	507520	IfStatement	"if ( ( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0 )"		507412	0					
ANR	507521	Condition	"( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0"	516:20:15950:16079	507412	0	True				
ANR	507522	RelationalExpression	"( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0"		507412	0		<			
ANR	507523	AssignmentExpression	"code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE )"		507412	0		=			
ANR	507524	Identifier	code		507412	0					
ANR	507525	CallExpression	"gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE )"		507412	1					
ANR	507526	Callee	gsicc_init_device_profile_struct		507412	0					
ANR	507527	Identifier	gsicc_init_device_profile_struct		507412	0					
ANR	507528	ArgumentList	dev		507412	1					
ANR	507529	Argument	dev		507412	0					
ANR	507530	Identifier	dev		507412	0					
ANR	507531	Argument	NULL		507412	1					
ANR	507532	Identifier	NULL		507412	0					
ANR	507533	Argument	gsDEFAULTPROFILE		507412	2					
ANR	507534	Identifier	gsDEFAULTPROFILE		507412	0					
ANR	507535	PrimaryExpression	0		507412	1					
ANR	507536	ReturnStatement	return ( code ) ;	518:20:16102:16114	507412	1	True				
ANR	507537	Identifier	code		507412	0					
ANR	507538	IfStatement	"if ( ( code = gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE ) ) < 0 )"		507412	1					
ANR	507539	Condition	"( code = gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE ) ) < 0"	520:20:16177:16316	507412	0	True				
ANR	507540	RelationalExpression	"( code = gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE ) ) < 0"		507412	0		<			
ANR	507541	AssignmentExpression	"code = gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE )"		507412	0		=			
ANR	507542	Identifier	code		507412	0					
ANR	507543	CallExpression	"gsicc_set_device_profile_intent ( dev , gsRINOTSPECIFIED , gsDEFAULTPROFILE )"		507412	1					
ANR	507544	Callee	gsicc_set_device_profile_intent		507412	0					
ANR	507545	Identifier	gsicc_set_device_profile_intent		507412	0					
ANR	507546	ArgumentList	dev		507412	1					
ANR	507547	Argument	dev		507412	0					
ANR	507548	Identifier	dev		507412	0					
ANR	507549	Argument	gsRINOTSPECIFIED		507412	1					
ANR	507550	Identifier	gsRINOTSPECIFIED		507412	0					
ANR	507551	Argument	gsDEFAULTPROFILE		507412	2					
ANR	507552	Identifier	gsDEFAULTPROFILE		507412	0					
ANR	507553	PrimaryExpression	0		507412	1					
ANR	507554	ReturnStatement	return ( code ) ;	522:20:16339:16351	507412	1	True				
ANR	507555	Identifier	code		507412	0					
ANR	507556	IfStatement	if ( ! dev -> is_open )		507412	3					
ANR	507557	Condition	! dev -> is_open	528:8:16424:16436	507412	0	True				
ANR	507558	UnaryOperationExpression	! dev -> is_open		507412	0					
ANR	507559	UnaryOperator	!		507412	0					
ANR	507560	PtrMemberAccess	dev -> is_open		507412	1					
ANR	507561	Identifier	dev		507412	0					
ANR	507562	Identifier	is_open		507412	1					
ANR	507563	CompoundStatement		37:23:1665:1665	507412	1					
ANR	507564	ExpressionStatement	gx_device_fill_in_procs ( dev )	529:8:16449:16477	507412	0	True				
ANR	507565	CallExpression	gx_device_fill_in_procs ( dev )		507412	0					
ANR	507566	Callee	gx_device_fill_in_procs		507412	0					
ANR	507567	Identifier	gx_device_fill_in_procs		507412	0					
ANR	507568	ArgumentList	dev		507412	1					
ANR	507569	Argument	dev		507412	0					
ANR	507570	Identifier	dev		507412	0					
ANR	507571	IfStatement	if ( libctx -> io_device_table != NULL )		507412	1					
ANR	507572	Condition	libctx -> io_device_table != NULL	536:12:16769:16799	507412	0	True				
ANR	507573	EqualityExpression	libctx -> io_device_table != NULL		507412	0		!=			
ANR	507574	PtrMemberAccess	libctx -> io_device_table		507412	0					
ANR	507575	Identifier	libctx		507412	0					
ANR	507576	Identifier	io_device_table		507412	1					
ANR	507577	Identifier	NULL		507412	1					
ANR	507578	CompoundStatement		46:12:2042:2072	507412	1					
ANR	507579	IdentifierDeclStatement	cmm_dev_profile_t * dev_profile ;	537:12:16816:16846	507412	0	True				
ANR	507580	IdentifierDecl	* dev_profile		507412	0					
ANR	507581	IdentifierDeclType	cmm_dev_profile_t *		507412	0					
ANR	507582	Identifier	dev_profile		507412	1					
ANR	507583	IfStatement	if ( dev -> procs . get_profile != NULL )		507412	1					
ANR	507584	Condition	dev -> procs . get_profile != NULL	542:16:17165:17194	507412	0	True				
ANR	507585	EqualityExpression	dev -> procs . get_profile != NULL		507412	0		!=			
ANR	507586	MemberAccess	dev -> procs . get_profile		507412	0					
ANR	507587	PtrMemberAccess	dev -> procs		507412	0					
ANR	507588	Identifier	dev		507412	0					
ANR	507589	Identifier	procs		507412	1					
ANR	507590	Identifier	get_profile		507412	1					
ANR	507591	Identifier	NULL		507412	1					
ANR	507592	CompoundStatement		51:48:2423:2423	507412	1					
ANR	507593	ExpressionStatement	"code = dev_proc ( dev , get_profile ) ( dev , & dev_profile )"	543:16:17215:17267	507412	0	True				
ANR	507594	AssignmentExpression	"code = dev_proc ( dev , get_profile ) ( dev , & dev_profile )"		507412	0		=			
ANR	507595	Identifier	code		507412	0					
ANR	507596	CallExpression	"dev_proc ( dev , get_profile ) ( dev , & dev_profile )"		507412	1					
ANR	507597	Callee	"dev_proc ( dev , get_profile )"		507412	0					
ANR	507598	CallExpression	"dev_proc ( dev , get_profile )"		507412	0					
ANR	507599	Callee	dev_proc		507412	0					
ANR	507600	Identifier	dev_proc		507412	0					
ANR	507601	ArgumentList	dev		507412	1					
ANR	507602	Argument	dev		507412	0					
ANR	507603	Identifier	dev		507412	0					
ANR	507604	Argument	get_profile		507412	1					
ANR	507605	Identifier	get_profile		507412	0					
ANR	507606	ArgumentList	dev		507412	1					
ANR	507607	Argument	dev		507412	0					
ANR	507608	Identifier	dev		507412	0					
ANR	507609	Argument	& dev_profile		507412	1					
ANR	507610	UnaryOperationExpression	& dev_profile		507412	0					
ANR	507611	UnaryOperator	&		507412	0					
ANR	507612	Identifier	dev_profile		507412	1					
ANR	507613	IfStatement	if ( code < 0 )		507412	1					
ANR	507614	Condition	code < 0	544:20:17289:17296	507412	0	True				
ANR	507615	RelationalExpression	code < 0		507412	0		<			
ANR	507616	Identifier	code		507412	0					
ANR	507617	PrimaryExpression	0		507412	1					
ANR	507618	CompoundStatement		53:30:2525:2525	507412	1					
ANR	507619	ReturnStatement	return ( code ) ;	545:20:17321:17333	507412	0	True				
ANR	507620	Identifier	code		507412	0					
ANR	507621	IfStatement	if ( dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL )		507412	2					
ANR	507622	Condition	dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL	547:20:17373:17468	507412	0	True				
ANR	507623	OrExpression	dev_profile == NULL || dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL		507412	0		||			
ANR	507624	EqualityExpression	dev_profile == NULL		507412	0		==			
ANR	507625	Identifier	dev_profile		507412	0					
ANR	507626	Identifier	NULL		507412	1					
ANR	507627	EqualityExpression	dev_profile -> device_profile [ gsDEFAULTPROFILE ] == NULL		507412	1		==			
ANR	507628	ArrayIndexing	dev_profile -> device_profile [ gsDEFAULTPROFILE ]		507412	0					
ANR	507629	PtrMemberAccess	dev_profile -> device_profile		507412	0					
ANR	507630	Identifier	dev_profile		507412	0					
ANR	507631	Identifier	device_profile		507412	1					
ANR	507632	Identifier	gsDEFAULTPROFILE		507412	1					
ANR	507633	Identifier	NULL		507412	1					
ANR	507634	CompoundStatement		57:75:2697:2697	507412	1					
ANR	507635	IfStatement	"if ( ( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0 )"		507412	0					
ANR	507636	Condition	"( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0"	549:24:17497:17630	507412	0	True				
ANR	507637	RelationalExpression	"( code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE ) ) < 0"		507412	0		<			
ANR	507638	AssignmentExpression	"code = gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE )"		507412	0		=			
ANR	507639	Identifier	code		507412	0					
ANR	507640	CallExpression	"gsicc_init_device_profile_struct ( dev , NULL , gsDEFAULTPROFILE )"		507412	1					
ANR	507641	Callee	gsicc_init_device_profile_struct		507412	0					
ANR	507642	Identifier	gsicc_init_device_profile_struct		507412	0					
ANR	507643	ArgumentList	dev		507412	1					
ANR	507644	Argument	dev		507412	0					
ANR	507645	Identifier	dev		507412	0					
ANR	507646	Argument	NULL		507412	1					
ANR	507647	Identifier	NULL		507412	0					
ANR	507648	Argument	gsDEFAULTPROFILE		507412	2					
ANR	507649	Identifier	gsDEFAULTPROFILE		507412	0					
ANR	507650	PrimaryExpression	0		507412	1					
ANR	507651	ReturnStatement	return ( code ) ;	551:24:17657:17669	507412	1	True				
ANR	507652	Identifier	code		507412	0					
ANR	507653	IfStatement	if ( gs_device_is_memory ( dev ) )		507412	2					
ANR	507654	Condition	gs_device_is_memory ( dev )	556:12:17726:17749	507412	0	True				
ANR	507655	CallExpression	gs_device_is_memory ( dev )		507412	0					
ANR	507656	Callee	gs_device_is_memory		507412	0					
ANR	507657	Identifier	gs_device_is_memory		507412	0					
ANR	507658	ArgumentList	dev		507412	1					
ANR	507659	Argument	dev		507412	0					
ANR	507660	Identifier	dev		507412	0					
ANR	507661	CompoundStatement		67:12:3048:3094	507412	1					
ANR	507662	IdentifierDeclStatement	gx_device * odev = gs_currentdevice_inline ( pgs ) ;	558:12:17822:17868	507412	0	True				
ANR	507663	IdentifierDecl	* odev = gs_currentdevice_inline ( pgs )		507412	0					
ANR	507664	IdentifierDeclType	gx_device *		507412	0					
ANR	507665	Identifier	odev		507412	1					
ANR	507666	AssignmentExpression	* odev = gs_currentdevice_inline ( pgs )		507412	2		=			
ANR	507667	Identifier	odev		507412	0					
ANR	507668	CallExpression	gs_currentdevice_inline ( pgs )		507412	1					
ANR	507669	Callee	gs_currentdevice_inline		507412	0					
ANR	507670	Identifier	gs_currentdevice_inline		507412	0					
ANR	507671	ArgumentList	pgs		507412	1					
ANR	507672	Argument	pgs		507412	0					
ANR	507673	Identifier	pgs		507412	0					
ANR	507674	WhileStatement	while ( odev != 0 && gs_device_is_memory ( odev ) )		507412	1					
ANR	507675	Condition	odev != 0 && gs_device_is_memory ( odev )	560:19:17890:17927	507412	0	True				
ANR	507676	AndExpression	odev != 0 && gs_device_is_memory ( odev )		507412	0		&&			
ANR	507677	EqualityExpression	odev != 0		507412	0		!=			
ANR	507678	Identifier	odev		507412	0					
ANR	507679	PrimaryExpression	0		507412	1					
ANR	507680	CallExpression	gs_device_is_memory ( odev )		507412	1					
ANR	507681	Callee	gs_device_is_memory		507412	0					
ANR	507682	Identifier	gs_device_is_memory		507412	0					
ANR	507683	ArgumentList	odev		507412	1					
ANR	507684	Argument	odev		507412	0					
ANR	507685	Identifier	odev		507412	0					
ANR	507686	ExpressionStatement	odev = ( ( gx_device_memory * ) odev ) -> target	561:16:17946:17987	507412	1	True				
ANR	507687	AssignmentExpression	odev = ( ( gx_device_memory * ) odev ) -> target		507412	0		=			
ANR	507688	Identifier	odev		507412	0					
ANR	507689	PtrMemberAccess	( ( gx_device_memory * ) odev ) -> target		507412	1					
ANR	507690	CastExpression	( gx_device_memory * ) odev		507412	0					
ANR	507691	CastTarget	gx_device_memory *		507412	0					
ANR	507692	Identifier	odev		507412	1					
ANR	507693	Identifier	target		507412	1					
ANR	507694	ExpressionStatement	"gx_device_set_target ( ( ( gx_device_forward * ) dev ) , odev )"	562:12:18001:18055	507412	2	True				
ANR	507695	CallExpression	"gx_device_set_target ( ( ( gx_device_forward * ) dev ) , odev )"		507412	0					
ANR	507696	Callee	gx_device_set_target		507412	0					
ANR	507697	Identifier	gx_device_set_target		507412	0					
ANR	507698	ArgumentList	( gx_device_forward * ) dev		507412	1					
ANR	507699	Argument	( gx_device_forward * ) dev		507412	0					
ANR	507700	CastExpression	( gx_device_forward * ) dev		507412	0					
ANR	507701	CastTarget	gx_device_forward *		507412	0					
ANR	507702	Identifier	dev		507412	1					
ANR	507703	Argument	odev		507412	1					
ANR	507704	Identifier	odev		507412	0					
ANR	507705	ExpressionStatement	code = open_code = gs_opendevice ( dev )	564:8:18075:18112	507412	3	True				
ANR	507706	AssignmentExpression	code = open_code = gs_opendevice ( dev )		507412	0		=			
ANR	507707	Identifier	code		507412	0					
ANR	507708	AssignmentExpression	open_code = gs_opendevice ( dev )		507412	1		=			
ANR	507709	Identifier	open_code		507412	0					
ANR	507710	CallExpression	gs_opendevice ( dev )		507412	1					
ANR	507711	Callee	gs_opendevice		507412	0					
ANR	507712	Identifier	gs_opendevice		507412	0					
ANR	507713	ArgumentList	dev		507412	1					
ANR	507714	Argument	dev		507412	0					
ANR	507715	Identifier	dev		507412	0					
ANR	507716	IfStatement	if ( code < 0 )		507412	4					
ANR	507717	Condition	code < 0	565:12:18126:18133	507412	0	True				
ANR	507718	RelationalExpression	code < 0		507412	0		<			
ANR	507719	Identifier	code		507412	0					
ANR	507720	PrimaryExpression	0		507412	1					
ANR	507721	ReturnStatement	return code ;	566:12:18148:18159	507412	1	True				
ANR	507722	Identifier	code		507412	0					
ANR	507723	ExpressionStatement	"gs_setdevice_no_init ( pgs , dev )"	568:4:18171:18201	507412	4	True				
ANR	507724	CallExpression	"gs_setdevice_no_init ( pgs , dev )"		507412	0					
ANR	507725	Callee	gs_setdevice_no_init		507412	0					
ANR	507726	Identifier	gs_setdevice_no_init		507412	0					
ANR	507727	ArgumentList	pgs		507412	1					
ANR	507728	Argument	pgs		507412	0					
ANR	507729	Identifier	pgs		507412	0					
ANR	507730	Argument	dev		507412	1					
ANR	507731	Identifier	dev		507412	0					
ANR	507732	ExpressionStatement	pgs -> ctm_default_set = false	569:4:18207:18235	507412	5	True				
ANR	507733	AssignmentExpression	pgs -> ctm_default_set = false		507412	0		=			
ANR	507734	PtrMemberAccess	pgs -> ctm_default_set		507412	0					
ANR	507735	Identifier	pgs		507412	0					
ANR	507736	Identifier	ctm_default_set		507412	1					
ANR	507737	Identifier	false		507412	1					
ANR	507738	IfStatement	if ( ( code = gs_initmatrix ( pgs ) ) < 0 || ( code = gs_initclip ( pgs ) ) < 0 )		507412	6					
ANR	507739	Condition	( code = gs_initmatrix ( pgs ) ) < 0 || ( code = gs_initclip ( pgs ) ) < 0	570:8:18245:18316	507412	0	True				
ANR	507740	OrExpression	( code = gs_initmatrix ( pgs ) ) < 0 || ( code = gs_initclip ( pgs ) ) < 0		507412	0		||			
ANR	507741	RelationalExpression	( code = gs_initmatrix ( pgs ) ) < 0		507412	0		<			
ANR	507742	AssignmentExpression	code = gs_initmatrix ( pgs )		507412	0		=			
ANR	507743	Identifier	code		507412	0					
ANR	507744	CallExpression	gs_initmatrix ( pgs )		507412	1					
ANR	507745	Callee	gs_initmatrix		507412	0					
ANR	507746	Identifier	gs_initmatrix		507412	0					
ANR	507747	ArgumentList	pgs		507412	1					
ANR	507748	Argument	pgs		507412	0					
ANR	507749	Identifier	pgs		507412	0					
ANR	507750	PrimaryExpression	0		507412	1					
ANR	507751	RelationalExpression	( code = gs_initclip ( pgs ) ) < 0		507412	1		<			
ANR	507752	AssignmentExpression	code = gs_initclip ( pgs )		507412	0		=			
ANR	507753	Identifier	code		507412	0					
ANR	507754	CallExpression	gs_initclip ( pgs )		507412	1					
ANR	507755	Callee	gs_initclip		507412	0					
ANR	507756	Identifier	gs_initclip		507412	0					
ANR	507757	ArgumentList	pgs		507412	1					
ANR	507758	Argument	pgs		507412	0					
ANR	507759	Identifier	pgs		507412	0					
ANR	507760	PrimaryExpression	0		507412	1					
ANR	507761	ReturnStatement	return code ;	573:8:18336:18347	507412	1	True				
ANR	507762	Identifier	code		507412	0					
ANR	507763	ExpressionStatement	pgs -> in_cachedevice = 0	576:4:18441:18464	507412	7	True				
ANR	507764	AssignmentExpression	pgs -> in_cachedevice = 0		507412	0		=			
ANR	507765	PtrMemberAccess	pgs -> in_cachedevice		507412	0					
ANR	507766	Identifier	pgs		507412	0					
ANR	507767	Identifier	in_cachedevice		507412	1					
ANR	507768	PrimaryExpression	0		507412	1					
ANR	507769	ExpressionStatement	pgs -> in_charpath = ( gs_char_path_mode ) 0	577:4:18470:18510	507412	8	True				
ANR	507770	AssignmentExpression	pgs -> in_charpath = ( gs_char_path_mode ) 0		507412	0		=			
ANR	507771	PtrMemberAccess	pgs -> in_charpath		507412	0					
ANR	507772	Identifier	pgs		507412	0					
ANR	507773	Identifier	in_charpath		507412	1					
ANR	507774	CastExpression	( gs_char_path_mode ) 0		507412	1					
ANR	507775	CastTarget	gs_char_path_mode		507412	0					
ANR	507776	PrimaryExpression	0		507412	1					
ANR	507777	ReturnStatement	return open_code ;	578:4:18516:18532	507412	9	True				
ANR	507778	Identifier	open_code		507412	0					
ANR	507779	ReturnType	int		507412	1					
ANR	507780	Identifier	gs_setdevice_no_erase		507412	2					
ANR	507781	ParameterList	"gs_gstate * pgs , gx_device * dev"		507412	3					
ANR	507782	Parameter	gs_gstate * pgs	491:22:14739:14753	507412	0	True				
ANR	507783	ParameterType	gs_gstate *		507412	0					
ANR	507784	Identifier	pgs		507412	1					
ANR	507785	Parameter	gx_device * dev	491:39:14756:14770	507412	1	True				
ANR	507786	ParameterType	gx_device *		507412	0					
ANR	507787	Identifier	dev		507412	1					
ANR	507788	CFGEntryNode	ENTRY		507412		True				
ANR	507789	CFGExitNode	EXIT		507412		True				
ANR	507790	Symbol	* dev		507412						
ANR	507791	Symbol	dev -> procs		507412						
ANR	507792	Symbol	pgs -> in_charpath		507412						
ANR	507793	Symbol	* libctx		507412						
ANR	507794	Symbol	code		507412						
ANR	507795	Symbol	libctx		507412						
ANR	507796	Symbol	pgs -> icc_manager		507412						
ANR	507797	Symbol	dev_profile -> device_profile		507412						
ANR	507798	Symbol	* pgs		507412						
ANR	507799	Symbol	dev_profile		507412						
ANR	507800	Symbol	gs_opendevice		507412						
ANR	507801	Symbol	* dev_profile -> device_profile		507412						
ANR	507802	Symbol	pgs -> ctm_default_set		507412						
ANR	507803	Symbol	libctx -> io_device_table		507412						
ANR	507804	Symbol	* gsDEFAULTPROFILE		507412						
ANR	507805	Symbol	( ( gx_device_memory * ) odev ) -> target		507412						
ANR	507806	Symbol	dev		507412						
ANR	507807	Symbol	gs_currentdevice_inline		507412						
ANR	507808	Symbol	dev_proc		507412						
ANR	507809	Symbol	dev -> procs . get_profile		507412						
ANR	507810	Symbol	pgs -> in_cachedevice		507412						
ANR	507811	Symbol	gs_lib_ctx_get_interp_instance		507412						
ANR	507812	Symbol	pgs		507412						
ANR	507813	Symbol	pgs -> memory		507412						
ANR	507814	Symbol	get_profile		507412						
ANR	507815	Symbol	* odev		507412						
ANR	507816	Symbol	gsicc_set_device_profile_intent		507412						
ANR	507817	Symbol	open_code		507412						
ANR	507818	Symbol	gs_initmatrix		507412						
ANR	507819	Symbol	NULL		507412						
ANR	507820	Symbol	gsDEFAULTPROFILE		507412						
ANR	507821	Symbol	gsicc_init_device_profile_struct		507412						
ANR	507822	Symbol	& dev_profile		507412						
ANR	507823	Symbol	* dev_profile		507412						
ANR	507824	Symbol	false		507412						
ANR	507825	Symbol	* pgs -> icc_manager		507412						
ANR	507826	Symbol	pgs -> icc_manager -> lab_profile		507412						
ANR	507827	Symbol	gsRINOTSPECIFIED		507412						
ANR	507828	Symbol	* * pgs		507412						
ANR	507829	Symbol	dev -> is_open		507412						
ANR	507830	Symbol	odev		507412						
ANR	507831	Symbol	* * dev_profile		507412						
ANR	507832	Symbol	gs_device_is_memory		507412						
ANR	507833	Symbol	gs_initclip		507412						
ANR	507834	Function	gs_setdevice_no_init	580:0:18536:19467							
ANR	507835	FunctionDef	"gs_setdevice_no_init (gs_gstate * pgs , gx_device * dev)"		507834	0					
ANR	507836	CompoundStatement		582:0:18595:19467	507834	0					
ANR	507837	IfStatement	if ( pgs -> device != NULL && pgs -> device -> rc . ref_count == 1 && pgs -> device != dev )		507834	0					
ANR	507838	Condition	pgs -> device != NULL && pgs -> device -> rc . ref_count == 1 && pgs -> device != dev	595:8:19124:19206	507834	0	True				
ANR	507839	AndExpression	pgs -> device != NULL && pgs -> device -> rc . ref_count == 1 && pgs -> device != dev		507834	0		&&			
ANR	507840	EqualityExpression	pgs -> device != NULL		507834	0		!=			
ANR	507841	PtrMemberAccess	pgs -> device		507834	0					
ANR	507842	Identifier	pgs		507834	0					
ANR	507843	Identifier	device		507834	1					
ANR	507844	Identifier	NULL		507834	1					
ANR	507845	AndExpression	pgs -> device -> rc . ref_count == 1 && pgs -> device != dev		507834	1		&&			
ANR	507846	EqualityExpression	pgs -> device -> rc . ref_count == 1		507834	0		==			
ANR	507847	MemberAccess	pgs -> device -> rc . ref_count		507834	0					
ANR	507848	PtrMemberAccess	pgs -> device -> rc		507834	0					
ANR	507849	PtrMemberAccess	pgs -> device		507834	0					
ANR	507850	Identifier	pgs		507834	0					
ANR	507851	Identifier	device		507834	1					
ANR	507852	Identifier	rc		507834	1					
ANR	507853	Identifier	ref_count		507834	1					
ANR	507854	PrimaryExpression	1		507834	1					
ANR	507855	EqualityExpression	pgs -> device != dev		507834	1		!=			
ANR	507856	PtrMemberAccess	pgs -> device		507834	0					
ANR	507857	Identifier	pgs		507834	0					
ANR	507858	Identifier	device		507834	1					
ANR	507859	Identifier	dev		507834	1					
ANR	507860	CompoundStatement		16:8:623:661	507834	1					
ANR	507861	IdentifierDeclStatement	int code = gs_closedevice ( pgs -> device ) ;	597:8:19219:19257	507834	0	True				
ANR	507862	IdentifierDecl	code = gs_closedevice ( pgs -> device )		507834	0					
ANR	507863	IdentifierDeclType	int		507834	0					
ANR	507864	Identifier	code		507834	1					
ANR	507865	AssignmentExpression	code = gs_closedevice ( pgs -> device )		507834	2		=			
ANR	507866	Identifier	code		507834	0					
ANR	507867	CallExpression	gs_closedevice ( pgs -> device )		507834	1					
ANR	507868	Callee	gs_closedevice		507834	0					
ANR	507869	Identifier	gs_closedevice		507834	0					
ANR	507870	ArgumentList	pgs -> device		507834	1					
ANR	507871	Argument	pgs -> device		507834	0					
ANR	507872	PtrMemberAccess	pgs -> device		507834	0					
ANR	507873	Identifier	pgs		507834	0					
ANR	507874	Identifier	device		507834	1					
ANR	507875	IfStatement	if ( code < 0 )		507834	1					
ANR	507876	Condition	code < 0	599:12:19272:19279	507834	0	True				
ANR	507877	RelationalExpression	code < 0		507834	0		<			
ANR	507878	Identifier	code		507834	0					
ANR	507879	PrimaryExpression	0		507834	1					
ANR	507880	ReturnStatement	return code ;	600:12:19294:19305	507834	1	True				
ANR	507881	Identifier	code		507834	0					
ANR	507882	ExpressionStatement	"rc_assign ( pgs -> device , dev , ""gs_setdevice_no_init"" )"	602:4:19317:19368	507834	1	True				
ANR	507883	CallExpression	"rc_assign ( pgs -> device , dev , ""gs_setdevice_no_init"" )"		507834	0					
ANR	507884	Callee	rc_assign		507834	0					
ANR	507885	Identifier	rc_assign		507834	0					
ANR	507886	ArgumentList	pgs -> device		507834	1					
ANR	507887	Argument	pgs -> device		507834	0					
ANR	507888	PtrMemberAccess	pgs -> device		507834	0					
ANR	507889	Identifier	pgs		507834	0					
ANR	507890	Identifier	device		507834	1					
ANR	507891	Argument	dev		507834	1					
ANR	507892	Identifier	dev		507834	0					
ANR	507893	Argument	"""gs_setdevice_no_init"""		507834	2					
ANR	507894	PrimaryExpression	"""gs_setdevice_no_init"""		507834	0					
ANR	507895	ExpressionStatement	"gs_gstate_update_device ( pgs , dev )"	603:4:19374:19407	507834	2	True				
ANR	507896	CallExpression	"gs_gstate_update_device ( pgs , dev )"		507834	0					
ANR	507897	Callee	gs_gstate_update_device		507834	0					
ANR	507898	Identifier	gs_gstate_update_device		507834	0					
ANR	507899	ArgumentList	pgs		507834	1					
ANR	507900	Argument	pgs		507834	0					
ANR	507901	Identifier	pgs		507834	0					
ANR	507902	Argument	dev		507834	1					
ANR	507903	Identifier	dev		507834	0					
ANR	507904	ReturnStatement	return pgs -> overprint ? gs_do_set_overprint ( pgs ) : 0 ;	604:4:19413:19465	507834	3	True				
ANR	507905	ConditionalExpression	pgs -> overprint ? gs_do_set_overprint ( pgs ) : 0		507834	0					
ANR	507906	Condition	pgs -> overprint		507834	0					
ANR	507907	PtrMemberAccess	pgs -> overprint		507834	0					
ANR	507908	Identifier	pgs		507834	0					
ANR	507909	Identifier	overprint		507834	1					
ANR	507910	CallExpression	gs_do_set_overprint ( pgs )		507834	1					
ANR	507911	Callee	gs_do_set_overprint		507834	0					
ANR	507912	Identifier	gs_do_set_overprint		507834	0					
ANR	507913	ArgumentList	pgs		507834	1					
ANR	507914	Argument	pgs		507834	0					
ANR	507915	Identifier	pgs		507834	0					
ANR	507916	PrimaryExpression	0		507834	2					
ANR	507917	ReturnType	int		507834	1					
ANR	507918	Identifier	gs_setdevice_no_init		507834	2					
ANR	507919	ParameterList	"gs_gstate * pgs , gx_device * dev"		507834	3					
ANR	507920	Parameter	gs_gstate * pgs	581:21:18561:18575	507834	0	True				
ANR	507921	ParameterType	gs_gstate *		507834	0					
ANR	507922	Identifier	pgs		507834	1					
ANR	507923	Parameter	gx_device * dev	581:38:18578:18592	507834	1	True				
ANR	507924	ParameterType	gx_device *		507834	0					
ANR	507925	Identifier	dev		507834	1					
ANR	507926	CFGEntryNode	ENTRY		507834		True				
ANR	507927	CFGExitNode	EXIT		507834		True				
ANR	507928	Symbol	pgs -> device -> rc . ref_count		507834						
ANR	507929	Symbol	NULL		507834						
ANR	507930	Symbol	code		507834						
ANR	507931	Symbol	* pgs		507834						
ANR	507932	Symbol	gs_do_set_overprint		507834						
ANR	507933	Symbol	* * pgs		507834						
ANR	507934	Symbol	dev		507834						
ANR	507935	Symbol	pgs -> overprint		507834						
ANR	507936	Symbol	pgs -> device -> rc		507834						
ANR	507937	Symbol	pgs -> device		507834						
ANR	507938	Symbol	* pgs -> device		507834						
ANR	507939	Symbol	pgs		507834						
ANR	507940	Symbol	gs_closedevice		507834						
ANR	507941	Function	gx_device_init	608:0:19512:19801							
ANR	507942	FunctionDef	"gx_device_init (gx_device * dev , const gx_device * proto , gs_memory_t * mem , bool internal)"		507941	0					
ANR	507943	CompoundStatement		611:0:19623:19801	507941	0					
ANR	507944	ExpressionStatement	"memcpy ( dev , proto , proto -> params_size )"	612:4:19629:19667	507941	0	True				
ANR	507945	CallExpression	"memcpy ( dev , proto , proto -> params_size )"		507941	0					
ANR	507946	Callee	memcpy		507941	0					
ANR	507947	Identifier	memcpy		507941	0					
ANR	507948	ArgumentList	dev		507941	1					
ANR	507949	Argument	dev		507941	0					
ANR	507950	Identifier	dev		507941	0					
ANR	507951	Argument	proto		507941	1					
ANR	507952	Identifier	proto		507941	0					
ANR	507953	Argument	proto -> params_size		507941	2					
ANR	507954	PtrMemberAccess	proto -> params_size		507941	0					
ANR	507955	Identifier	proto		507941	0					
ANR	507956	Identifier	params_size		507941	1					
ANR	507957	ExpressionStatement	dev -> memory = mem	613:4:19673:19690	507941	1	True				
ANR	507958	AssignmentExpression	dev -> memory = mem		507941	0		=			
ANR	507959	PtrMemberAccess	dev -> memory		507941	0					
ANR	507960	Identifier	dev		507941	0					
ANR	507961	Identifier	memory		507941	1					
ANR	507962	Identifier	mem		507941	1					
ANR	507963	ExpressionStatement	dev -> retained = ! internal	614:4:19696:19721	507941	2	True				
ANR	507964	AssignmentExpression	dev -> retained = ! internal		507941	0		=			
ANR	507965	PtrMemberAccess	dev -> retained		507941	0					
ANR	507966	Identifier	dev		507941	0					
ANR	507967	Identifier	retained		507941	1					
ANR	507968	UnaryOperationExpression	! internal		507941	1					
ANR	507969	UnaryOperator	!		507941	0					
ANR	507970	Identifier	internal		507941	1					
ANR	507971	ExpressionStatement	"rc_init ( dev , mem , ( internal ? 0 : 1 ) )"	615:4:19727:19764	507941	3	True				
ANR	507972	CallExpression	"rc_init ( dev , mem , ( internal ? 0 : 1 ) )"		507941	0					
ANR	507973	Callee	rc_init		507941	0					
ANR	507974	Identifier	rc_init		507941	0					
ANR	507975	ArgumentList	dev		507941	1					
ANR	507976	Argument	dev		507941	0					
ANR	507977	Identifier	dev		507941	0					
ANR	507978	Argument	mem		507941	1					
ANR	507979	Identifier	mem		507941	0					
ANR	507980	Argument	internal ? 0 : 1		507941	2					
ANR	507981	ConditionalExpression	internal ? 0 : 1		507941	0					
ANR	507982	Condition	internal		507941	0					
ANR	507983	Identifier	internal		507941	0					
ANR	507984	PrimaryExpression	0		507941	1					
ANR	507985	PrimaryExpression	1		507941	2					
ANR	507986	ExpressionStatement	rc_increment ( dev -> icc_struct )	616:4:19770:19799	507941	4	True				
ANR	507987	CallExpression	rc_increment ( dev -> icc_struct )		507941	0					
ANR	507988	Callee	rc_increment		507941	0					
ANR	507989	Identifier	rc_increment		507941	0					
ANR	507990	ArgumentList	dev -> icc_struct		507941	1					
ANR	507991	Argument	dev -> icc_struct		507941	0					
ANR	507992	PtrMemberAccess	dev -> icc_struct		507941	0					
ANR	507993	Identifier	dev		507941	0					
ANR	507994	Identifier	icc_struct		507941	1					
ANR	507995	ReturnType	void		507941	1					
ANR	507996	Identifier	gx_device_init		507941	2					
ANR	507997	ParameterList	"gx_device * dev , const gx_device * proto , gs_memory_t * mem , bool internal"		507941	3					
ANR	507998	Parameter	gx_device * dev	609:15:19532:19546	507941	0	True				
ANR	507999	ParameterType	gx_device *		507941	0					
ANR	508000	Identifier	dev		507941	1					
ANR	508001	Parameter	const gx_device * proto	609:32:19549:19571	507941	1	True				
ANR	508002	ParameterType	const gx_device *		507941	0					
ANR	508003	Identifier	proto		507941	1					
ANR	508004	Parameter	gs_memory_t * mem	609:57:19574:19590	507941	2	True				
ANR	508005	ParameterType	gs_memory_t *		507941	0					
ANR	508006	Identifier	mem		507941	1					
ANR	508007	Parameter	bool internal	610:15:19608:19620	507941	3	True				
ANR	508008	ParameterType	bool		507941	0					
ANR	508009	Identifier	internal		507941	1					
ANR	508010	CFGEntryNode	ENTRY		507941		True				
ANR	508011	CFGExitNode	EXIT		507941		True				
ANR	508012	Symbol	* dev		507941						
ANR	508013	Symbol	proto -> params_size		507941						
ANR	508014	Symbol	internal		507941						
ANR	508015	Symbol	* proto		507941						
ANR	508016	Symbol	dev -> memory		507941						
ANR	508017	Symbol	dev		507941						
ANR	508018	Symbol	mem		507941						
ANR	508019	Symbol	proto		507941						
ANR	508020	Symbol	dev -> icc_struct		507941						
ANR	508021	Symbol	dev -> retained		507941						
ANR	508022	Function	gx_device_init_on_stack	619:0:19804:20152							
ANR	508023	FunctionDef	"gx_device_init_on_stack (gx_device * dev , const gx_device * proto , gs_memory_t * mem)"		508022	0					
ANR	508024	CompoundStatement		622:0:19918:20152	508022	0					
ANR	508025	ExpressionStatement	"memcpy ( dev , proto , proto -> params_size )"	623:4:19924:19962	508022	0	True				
ANR	508026	CallExpression	"memcpy ( dev , proto , proto -> params_size )"		508022	0					
ANR	508027	Callee	memcpy		508022	0					
ANR	508028	Identifier	memcpy		508022	0					
ANR	508029	ArgumentList	dev		508022	1					
ANR	508030	Argument	dev		508022	0					
ANR	508031	Identifier	dev		508022	0					
ANR	508032	Argument	proto		508022	1					
ANR	508033	Identifier	proto		508022	0					
ANR	508034	Argument	proto -> params_size		508022	2					
ANR	508035	PtrMemberAccess	proto -> params_size		508022	0					
ANR	508036	Identifier	proto		508022	0					
ANR	508037	Identifier	params_size		508022	1					
ANR	508038	ExpressionStatement	dev -> memory = mem	624:4:19968:19985	508022	1	True				
ANR	508039	AssignmentExpression	dev -> memory = mem		508022	0		=			
ANR	508040	PtrMemberAccess	dev -> memory		508022	0					
ANR	508041	Identifier	dev		508022	0					
ANR	508042	Identifier	memory		508022	1					
ANR	508043	Identifier	mem		508022	1					
ANR	508044	ExpressionStatement	dev -> retained = 0	625:4:19991:20008	508022	2	True				
ANR	508045	AssignmentExpression	dev -> retained = 0		508022	0		=			
ANR	508046	PtrMemberAccess	dev -> retained		508022	0					
ANR	508047	Identifier	dev		508022	0					
ANR	508048	Identifier	retained		508022	1					
ANR	508049	PrimaryExpression	0		508022	1					
ANR	508050	ExpressionStatement	dev -> pad = proto -> pad	626:4:20014:20035	508022	3	True				
ANR	508051	AssignmentExpression	dev -> pad = proto -> pad		508022	0		=			
ANR	508052	PtrMemberAccess	dev -> pad		508022	0					
ANR	508053	Identifier	dev		508022	0					
ANR	508054	Identifier	pad		508022	1					
ANR	508055	PtrMemberAccess	proto -> pad		508022	1					
ANR	508056	Identifier	proto		508022	0					
ANR	508057	Identifier	pad		508022	1					
ANR	508058	ExpressionStatement	dev -> log2_align_mod = proto -> log2_align_mod	627:4:20041:20084	508022	4	True				
ANR	508059	AssignmentExpression	dev -> log2_align_mod = proto -> log2_align_mod		508022	0		=			
ANR	508060	PtrMemberAccess	dev -> log2_align_mod		508022	0					
ANR	508061	Identifier	dev		508022	0					
ANR	508062	Identifier	log2_align_mod		508022	1					
ANR	508063	PtrMemberAccess	proto -> log2_align_mod		508022	1					
ANR	508064	Identifier	proto		508022	0					
ANR	508065	Identifier	log2_align_mod		508022	1					
ANR	508066	ExpressionStatement	dev -> is_planar = proto -> is_planar	628:4:20090:20123	508022	5	True				
ANR	508067	AssignmentExpression	dev -> is_planar = proto -> is_planar		508022	0		=			
ANR	508068	PtrMemberAccess	dev -> is_planar		508022	0					
ANR	508069	Identifier	dev		508022	0					
ANR	508070	Identifier	is_planar		508022	1					
ANR	508071	PtrMemberAccess	proto -> is_planar		508022	1					
ANR	508072	Identifier	proto		508022	0					
ANR	508073	Identifier	is_planar		508022	1					
ANR	508074	ExpressionStatement	"rc_init ( dev , NULL , 0 )"	629:4:20129:20150	508022	6	True				
ANR	508075	CallExpression	"rc_init ( dev , NULL , 0 )"		508022	0					
ANR	508076	Callee	rc_init		508022	0					
ANR	508077	Identifier	rc_init		508022	0					
ANR	508078	ArgumentList	dev		508022	1					
ANR	508079	Argument	dev		508022	0					
ANR	508080	Identifier	dev		508022	0					
ANR	508081	Argument	NULL		508022	1					
ANR	508082	Identifier	NULL		508022	0					
ANR	508083	Argument	0		508022	2					
ANR	508084	PrimaryExpression	0		508022	0					
ANR	508085	ReturnType	void		508022	1					
ANR	508086	Identifier	gx_device_init_on_stack		508022	2					
ANR	508087	ParameterList	"gx_device * dev , const gx_device * proto , gs_memory_t * mem"		508022	3					
ANR	508088	Parameter	gx_device * dev	620:24:19833:19847	508022	0	True				
ANR	508089	ParameterType	gx_device *		508022	0					
ANR	508090	Identifier	dev		508022	1					
ANR	508091	Parameter	const gx_device * proto	620:41:19850:19872	508022	1	True				
ANR	508092	ParameterType	const gx_device *		508022	0					
ANR	508093	Identifier	proto		508022	1					
ANR	508094	Parameter	gs_memory_t * mem	621:24:19899:19915	508022	2	True				
ANR	508095	ParameterType	gs_memory_t *		508022	0					
ANR	508096	Identifier	mem		508022	1					
ANR	508097	CFGEntryNode	ENTRY		508022		True				
ANR	508098	CFGExitNode	EXIT		508022		True				
ANR	508099	Symbol	* dev		508022						
ANR	508100	Symbol	dev -> log2_align_mod		508022						
ANR	508101	Symbol	proto -> params_size		508022						
ANR	508102	Symbol	NULL		508022						
ANR	508103	Symbol	proto -> pad		508022						
ANR	508104	Symbol	dev -> pad		508022						
ANR	508105	Symbol	proto -> log2_align_mod		508022						
ANR	508106	Symbol	* proto		508022						
ANR	508107	Symbol	dev -> memory		508022						
ANR	508108	Symbol	dev -> is_planar		508022						
ANR	508109	Symbol	dev		508022						
ANR	508110	Symbol	mem		508022						
ANR	508111	Symbol	proto		508022						
ANR	508112	Symbol	dev -> retained		508022						
ANR	508113	Symbol	proto -> is_planar		508022						
ANR	508114	Function	gs_make_null_device	633:0:20181:22309							
ANR	508115	FunctionDef	"gs_make_null_device (gx_device_null * dev_null , gx_device * dev , gs_memory_t * mem)"		508114	0					
ANR	508116	CompoundStatement		636:0:20287:22309	508114	0					
ANR	508117	ExpressionStatement	"gx_device_init ( ( gx_device * ) dev_null , ( const gx_device * ) & gs_null_device , mem , true )"	637:4:20293:20396	508114	0	True				
ANR	508118	CallExpression	"gx_device_init ( ( gx_device * ) dev_null , ( const gx_device * ) & gs_null_device , mem , true )"		508114	0					
ANR	508119	Callee	gx_device_init		508114	0					
ANR	508120	Identifier	gx_device_init		508114	0					
ANR	508121	ArgumentList	( gx_device * ) dev_null		508114	1					
ANR	508122	Argument	( gx_device * ) dev_null		508114	0					
ANR	508123	CastExpression	( gx_device * ) dev_null		508114	0					
ANR	508124	CastTarget	gx_device *		508114	0					
ANR	508125	Identifier	dev_null		508114	1					
ANR	508126	Argument	( const gx_device * ) & gs_null_device		508114	1					
ANR	508127	CastExpression	( const gx_device * ) & gs_null_device		508114	0					
ANR	508128	CastTarget	const gx_device *		508114	0					
ANR	508129	UnaryOperationExpression	& gs_null_device		508114	1					
ANR	508130	UnaryOperator	&		508114	0					
ANR	508131	Identifier	gs_null_device		508114	1					
ANR	508132	Argument	mem		508114	2					
ANR	508133	Identifier	mem		508114	0					
ANR	508134	Argument	true		508114	3					
ANR	508135	Identifier	true		508114	0					
ANR	508136	ExpressionStatement	"gx_device_set_target ( ( gx_device_forward * ) dev_null , dev )"	639:4:20402:20458	508114	1	True				
ANR	508137	CallExpression	"gx_device_set_target ( ( gx_device_forward * ) dev_null , dev )"		508114	0					
ANR	508138	Callee	gx_device_set_target		508114	0					
ANR	508139	Identifier	gx_device_set_target		508114	0					
ANR	508140	ArgumentList	( gx_device_forward * ) dev_null		508114	1					
ANR	508141	Argument	( gx_device_forward * ) dev_null		508114	0					
ANR	508142	CastExpression	( gx_device_forward * ) dev_null		508114	0					
ANR	508143	CastTarget	gx_device_forward *		508114	0					
ANR	508144	Identifier	dev_null		508114	1					
ANR	508145	Argument	dev		508114	1					
ANR	508146	Identifier	dev		508114	0					
ANR	508147	IfStatement	if ( dev )		508114	2					
ANR	508148	Condition	dev	640:8:20468:20470	508114	0	True				
ANR	508149	Identifier	dev		508114	0					
ANR	508150	CompoundStatement		12:8:513:550	508114	1					
ANR	508151	IdentifierDeclStatement	gx_device * dn = ( gx_device * ) dev_null ;	647:8:20801:20838	508114	0	True				
ANR	508152	IdentifierDecl	* dn = ( gx_device * ) dev_null		508114	0					
ANR	508153	IdentifierDeclType	gx_device *		508114	0					
ANR	508154	Identifier	dn		508114	1					
ANR	508155	AssignmentExpression	* dn = ( gx_device * ) dev_null		508114	2		=			
ANR	508156	Identifier	dn		508114	0					
ANR	508157	CastExpression	( gx_device * ) dev_null		508114	1					
ANR	508158	CastTarget	gx_device *		508114	0					
ANR	508159	Identifier	dev_null		508114	1					
ANR	508160	ExpressionStatement	"set_dev_proc ( dn , get_color_mapping_procs , gx_forward_get_color_mapping_procs )"	648:8:20848:20925	508114	1	True				
ANR	508161	CallExpression	"set_dev_proc ( dn , get_color_mapping_procs , gx_forward_get_color_mapping_procs )"		508114	0					
ANR	508162	Callee	set_dev_proc		508114	0					
ANR	508163	Identifier	set_dev_proc		508114	0					
ANR	508164	ArgumentList	dn		508114	1					
ANR	508165	Argument	dn		508114	0					
ANR	508166	Identifier	dn		508114	0					
ANR	508167	Argument	get_color_mapping_procs		508114	1					
ANR	508168	Identifier	get_color_mapping_procs		508114	0					
ANR	508169	Argument	gx_forward_get_color_mapping_procs		508114	2					
ANR	508170	Identifier	gx_forward_get_color_mapping_procs		508114	0					
ANR	508171	ExpressionStatement	"set_dev_proc ( dn , get_color_comp_index , gx_forward_get_color_comp_index )"	649:8:20935:21006	508114	2	True				
ANR	508172	CallExpression	"set_dev_proc ( dn , get_color_comp_index , gx_forward_get_color_comp_index )"		508114	0					
ANR	508173	Callee	set_dev_proc		508114	0					
ANR	508174	Identifier	set_dev_proc		508114	0					
ANR	508175	ArgumentList	dn		508114	1					
ANR	508176	Argument	dn		508114	0					
ANR	508177	Identifier	dn		508114	0					
ANR	508178	Argument	get_color_comp_index		508114	1					
ANR	508179	Identifier	get_color_comp_index		508114	0					
ANR	508180	Argument	gx_forward_get_color_comp_index		508114	2					
ANR	508181	Identifier	gx_forward_get_color_comp_index		508114	0					
ANR	508182	ExpressionStatement	"set_dev_proc ( dn , encode_color , gx_forward_encode_color )"	650:8:21016:21071	508114	3	True				
ANR	508183	CallExpression	"set_dev_proc ( dn , encode_color , gx_forward_encode_color )"		508114	0					
ANR	508184	Callee	set_dev_proc		508114	0					
ANR	508185	Identifier	set_dev_proc		508114	0					
ANR	508186	ArgumentList	dn		508114	1					
ANR	508187	Argument	dn		508114	0					
ANR	508188	Identifier	dn		508114	0					
ANR	508189	Argument	encode_color		508114	1					
ANR	508190	Identifier	encode_color		508114	0					
ANR	508191	Argument	gx_forward_encode_color		508114	2					
ANR	508192	Identifier	gx_forward_encode_color		508114	0					
ANR	508193	ExpressionStatement	"set_dev_proc ( dn , decode_color , gx_forward_decode_color )"	651:8:21081:21136	508114	4	True				
ANR	508194	CallExpression	"set_dev_proc ( dn , decode_color , gx_forward_decode_color )"		508114	0					
ANR	508195	Callee	set_dev_proc		508114	0					
ANR	508196	Identifier	set_dev_proc		508114	0					
ANR	508197	ArgumentList	dn		508114	1					
ANR	508198	Argument	dn		508114	0					
ANR	508199	Identifier	dn		508114	0					
ANR	508200	Argument	decode_color		508114	1					
ANR	508201	Identifier	decode_color		508114	0					
ANR	508202	Argument	gx_forward_decode_color		508114	2					
ANR	508203	Identifier	gx_forward_decode_color		508114	0					
ANR	508204	ExpressionStatement	"set_dev_proc ( dn , get_profile , gx_forward_get_profile )"	652:8:21146:21199	508114	5	True				
ANR	508205	CallExpression	"set_dev_proc ( dn , get_profile , gx_forward_get_profile )"		508114	0					
ANR	508206	Callee	set_dev_proc		508114	0					
ANR	508207	Identifier	set_dev_proc		508114	0					
ANR	508208	ArgumentList	dn		508114	1					
ANR	508209	Argument	dn		508114	0					
ANR	508210	Identifier	dn		508114	0					
ANR	508211	Argument	get_profile		508114	1					
ANR	508212	Identifier	get_profile		508114	0					
ANR	508213	Argument	gx_forward_get_profile		508114	2					
ANR	508214	Identifier	gx_forward_get_profile		508114	0					
ANR	508215	ExpressionStatement	"set_dev_proc ( dn , set_graphics_type_tag , gx_forward_set_graphics_type_tag )"	653:8:21209:21282	508114	6	True				
ANR	508216	CallExpression	"set_dev_proc ( dn , set_graphics_type_tag , gx_forward_set_graphics_type_tag )"		508114	0					
ANR	508217	Callee	set_dev_proc		508114	0					
ANR	508218	Identifier	set_dev_proc		508114	0					
ANR	508219	ArgumentList	dn		508114	1					
ANR	508220	Argument	dn		508114	0					
ANR	508221	Identifier	dn		508114	0					
ANR	508222	Argument	set_graphics_type_tag		508114	1					
ANR	508223	Identifier	set_graphics_type_tag		508114	0					
ANR	508224	Argument	gx_forward_set_graphics_type_tag		508114	2					
ANR	508225	Identifier	gx_forward_set_graphics_type_tag		508114	0					
ANR	508226	ExpressionStatement	"set_dev_proc ( dn , begin_transparency_group , gx_default_begin_transparency_group )"	654:8:21292:21371	508114	7	True				
ANR	508227	CallExpression	"set_dev_proc ( dn , begin_transparency_group , gx_default_begin_transparency_group )"		508114	0					
ANR	508228	Callee	set_dev_proc		508114	0					
ANR	508229	Identifier	set_dev_proc		508114	0					
ANR	508230	ArgumentList	dn		508114	1					
ANR	508231	Argument	dn		508114	0					
ANR	508232	Identifier	dn		508114	0					
ANR	508233	Argument	begin_transparency_group		508114	1					
ANR	508234	Identifier	begin_transparency_group		508114	0					
ANR	508235	Argument	gx_default_begin_transparency_group		508114	2					
ANR	508236	Identifier	gx_default_begin_transparency_group		508114	0					
ANR	508237	ExpressionStatement	"set_dev_proc ( dn , end_transparency_group , gx_default_end_transparency_group )"	655:8:21381:21456	508114	8	True				
ANR	508238	CallExpression	"set_dev_proc ( dn , end_transparency_group , gx_default_end_transparency_group )"		508114	0					
ANR	508239	Callee	set_dev_proc		508114	0					
ANR	508240	Identifier	set_dev_proc		508114	0					
ANR	508241	ArgumentList	dn		508114	1					
ANR	508242	Argument	dn		508114	0					
ANR	508243	Identifier	dn		508114	0					
ANR	508244	Argument	end_transparency_group		508114	1					
ANR	508245	Identifier	end_transparency_group		508114	0					
ANR	508246	Argument	gx_default_end_transparency_group		508114	2					
ANR	508247	Identifier	gx_default_end_transparency_group		508114	0					
ANR	508248	ExpressionStatement	"set_dev_proc ( dn , begin_transparency_mask , gx_default_begin_transparency_mask )"	656:8:21466:21543	508114	9	True				
ANR	508249	CallExpression	"set_dev_proc ( dn , begin_transparency_mask , gx_default_begin_transparency_mask )"		508114	0					
ANR	508250	Callee	set_dev_proc		508114	0					
ANR	508251	Identifier	set_dev_proc		508114	0					
ANR	508252	ArgumentList	dn		508114	1					
ANR	508253	Argument	dn		508114	0					
ANR	508254	Identifier	dn		508114	0					
ANR	508255	Argument	begin_transparency_mask		508114	1					
ANR	508256	Identifier	begin_transparency_mask		508114	0					
ANR	508257	Argument	gx_default_begin_transparency_mask		508114	2					
ANR	508258	Identifier	gx_default_begin_transparency_mask		508114	0					
ANR	508259	ExpressionStatement	"set_dev_proc ( dn , end_transparency_mask , gx_default_end_transparency_mask )"	657:8:21553:21626	508114	10	True				
ANR	508260	CallExpression	"set_dev_proc ( dn , end_transparency_mask , gx_default_end_transparency_mask )"		508114	0					
ANR	508261	Callee	set_dev_proc		508114	0					
ANR	508262	Identifier	set_dev_proc		508114	0					
ANR	508263	ArgumentList	dn		508114	1					
ANR	508264	Argument	dn		508114	0					
ANR	508265	Identifier	dn		508114	0					
ANR	508266	Argument	end_transparency_mask		508114	1					
ANR	508267	Identifier	end_transparency_mask		508114	0					
ANR	508268	Argument	gx_default_end_transparency_mask		508114	2					
ANR	508269	Identifier	gx_default_end_transparency_mask		508114	0					
ANR	508270	ExpressionStatement	"set_dev_proc ( dn , discard_transparency_layer , gx_default_discard_transparency_layer )"	658:8:21636:21719	508114	11	True				
ANR	508271	CallExpression	"set_dev_proc ( dn , discard_transparency_layer , gx_default_discard_transparency_layer )"		508114	0					
ANR	508272	Callee	set_dev_proc		508114	0					
ANR	508273	Identifier	set_dev_proc		508114	0					
ANR	508274	ArgumentList	dn		508114	1					
ANR	508275	Argument	dn		508114	0					
ANR	508276	Identifier	dn		508114	0					
ANR	508277	Argument	discard_transparency_layer		508114	1					
ANR	508278	Identifier	discard_transparency_layer		508114	0					
ANR	508279	Argument	gx_default_discard_transparency_layer		508114	2					
ANR	508280	Identifier	gx_default_discard_transparency_layer		508114	0					
ANR	508281	ExpressionStatement	"set_dev_proc ( dn , pattern_manage , gx_default_pattern_manage )"	659:8:21729:21788	508114	12	True				
ANR	508282	CallExpression	"set_dev_proc ( dn , pattern_manage , gx_default_pattern_manage )"		508114	0					
ANR	508283	Callee	set_dev_proc		508114	0					
ANR	508284	Identifier	set_dev_proc		508114	0					
ANR	508285	ArgumentList	dn		508114	1					
ANR	508286	Argument	dn		508114	0					
ANR	508287	Identifier	dn		508114	0					
ANR	508288	Argument	pattern_manage		508114	1					
ANR	508289	Identifier	pattern_manage		508114	0					
ANR	508290	Argument	gx_default_pattern_manage		508114	2					
ANR	508291	Identifier	gx_default_pattern_manage		508114	0					
ANR	508292	ExpressionStatement	"set_dev_proc ( dn , push_transparency_state , gx_default_push_transparency_state )"	660:8:21798:21875	508114	13	True				
ANR	508293	CallExpression	"set_dev_proc ( dn , push_transparency_state , gx_default_push_transparency_state )"		508114	0					
ANR	508294	Callee	set_dev_proc		508114	0					
ANR	508295	Identifier	set_dev_proc		508114	0					
ANR	508296	ArgumentList	dn		508114	1					
ANR	508297	Argument	dn		508114	0					
ANR	508298	Identifier	dn		508114	0					
ANR	508299	Argument	push_transparency_state		508114	1					
ANR	508300	Identifier	push_transparency_state		508114	0					
ANR	508301	Argument	gx_default_push_transparency_state		508114	2					
ANR	508302	Identifier	gx_default_push_transparency_state		508114	0					
ANR	508303	ExpressionStatement	"set_dev_proc ( dn , pop_transparency_state , gx_default_pop_transparency_state )"	661:8:21885:21960	508114	14	True				
ANR	508304	CallExpression	"set_dev_proc ( dn , pop_transparency_state , gx_default_pop_transparency_state )"		508114	0					
ANR	508305	Callee	set_dev_proc		508114	0					
ANR	508306	Identifier	set_dev_proc		508114	0					
ANR	508307	ArgumentList	dn		508114	1					
ANR	508308	Argument	dn		508114	0					
ANR	508309	Identifier	dn		508114	0					
ANR	508310	Argument	pop_transparency_state		508114	1					
ANR	508311	Identifier	pop_transparency_state		508114	0					
ANR	508312	Argument	gx_default_pop_transparency_state		508114	2					
ANR	508313	Identifier	gx_default_pop_transparency_state		508114	0					
ANR	508314	ExpressionStatement	"set_dev_proc ( dn , put_image , gx_default_put_image )"	662:8:21970:22019	508114	15	True				
ANR	508315	CallExpression	"set_dev_proc ( dn , put_image , gx_default_put_image )"		508114	0					
ANR	508316	Callee	set_dev_proc		508114	0					
ANR	508317	Identifier	set_dev_proc		508114	0					
ANR	508318	ArgumentList	dn		508114	1					
ANR	508319	Argument	dn		508114	0					
ANR	508320	Identifier	dn		508114	0					
ANR	508321	Argument	put_image		508114	1					
ANR	508322	Identifier	put_image		508114	0					
ANR	508323	Argument	gx_default_put_image		508114	2					
ANR	508324	Identifier	gx_default_put_image		508114	0					
ANR	508325	ExpressionStatement	"set_dev_proc ( dn , copy_planes , gx_default_copy_planes )"	663:8:22029:22082	508114	16	True				
ANR	508326	CallExpression	"set_dev_proc ( dn , copy_planes , gx_default_copy_planes )"		508114	0					
ANR	508327	Callee	set_dev_proc		508114	0					
ANR	508328	Identifier	set_dev_proc		508114	0					
ANR	508329	ArgumentList	dn		508114	1					
ANR	508330	Argument	dn		508114	0					
ANR	508331	Identifier	dn		508114	0					
ANR	508332	Argument	copy_planes		508114	1					
ANR	508333	Identifier	copy_planes		508114	0					
ANR	508334	Argument	gx_default_copy_planes		508114	2					
ANR	508335	Identifier	gx_default_copy_planes		508114	0					
ANR	508336	ExpressionStatement	"set_dev_proc ( dn , copy_alpha_hl_color , gx_default_no_copy_alpha_hl_color )"	664:8:22092:22164	508114	17	True				
ANR	508337	CallExpression	"set_dev_proc ( dn , copy_alpha_hl_color , gx_default_no_copy_alpha_hl_color )"		508114	0					
ANR	508338	Callee	set_dev_proc		508114	0					
ANR	508339	Identifier	set_dev_proc		508114	0					
ANR	508340	ArgumentList	dn		508114	1					
ANR	508341	Argument	dn		508114	0					
ANR	508342	Identifier	dn		508114	0					
ANR	508343	Argument	copy_alpha_hl_color		508114	1					
ANR	508344	Identifier	copy_alpha_hl_color		508114	0					
ANR	508345	Argument	gx_default_no_copy_alpha_hl_color		508114	2					
ANR	508346	Identifier	gx_default_no_copy_alpha_hl_color		508114	0					
ANR	508347	ExpressionStatement	dn -> graphics_type_tag = dev -> graphics_type_tag	665:8:22174:22220	508114	18	True				
ANR	508348	AssignmentExpression	dn -> graphics_type_tag = dev -> graphics_type_tag		508114	0		=			
ANR	508349	PtrMemberAccess	dn -> graphics_type_tag		508114	0					
ANR	508350	Identifier	dn		508114	0					
ANR	508351	Identifier	graphics_type_tag		508114	1					
ANR	508352	PtrMemberAccess	dev -> graphics_type_tag		508114	1					
ANR	508353	Identifier	dev		508114	0					
ANR	508354	Identifier	graphics_type_tag		508114	1					
ANR	508355	ExpressionStatement	"gx_device_copy_color_params ( dn , dev )"	666:8:22265:22301	508114	19	True				
ANR	508356	CallExpression	"gx_device_copy_color_params ( dn , dev )"		508114	0					
ANR	508357	Callee	gx_device_copy_color_params		508114	0					
ANR	508358	Identifier	gx_device_copy_color_params		508114	0					
ANR	508359	ArgumentList	dn		508114	1					
ANR	508360	Argument	dn		508114	0					
ANR	508361	Identifier	dn		508114	0					
ANR	508362	Argument	dev		508114	1					
ANR	508363	Identifier	dev		508114	0					
ANR	508364	ReturnType	void		508114	1					
ANR	508365	Identifier	gs_make_null_device		508114	2					
ANR	508366	ParameterList	"gx_device_null * dev_null , gx_device * dev , gs_memory_t * mem"		508114	3					
ANR	508367	Parameter	gx_device_null * dev_null	634:20:20206:20229	508114	0	True				
ANR	508368	ParameterType	gx_device_null *		508114	0					
ANR	508369	Identifier	dev_null		508114	1					
ANR	508370	Parameter	gx_device * dev	634:46:20232:20245	508114	1	True				
ANR	508371	ParameterType	gx_device *		508114	0					
ANR	508372	Identifier	dev		508114	1					
ANR	508373	Parameter	gs_memory_t * mem	635:20:20268:20284	508114	2	True				
ANR	508374	ParameterType	gs_memory_t *		508114	0					
ANR	508375	Identifier	mem		508114	1					
ANR	508376	CFGEntryNode	ENTRY		508114		True				
ANR	508377	CFGExitNode	EXIT		508114		True				
ANR	508378	Symbol	* dev		508114						
ANR	508379	Symbol	gx_default_discard_transparency_layer		508114						
ANR	508380	Symbol	encode_color		508114						
ANR	508381	Symbol	begin_transparency_group		508114						
ANR	508382	Symbol	pattern_manage		508114						
ANR	508383	Symbol	gx_default_no_copy_alpha_hl_color		508114						
ANR	508384	Symbol	gx_default_pattern_manage		508114						
ANR	508385	Symbol	dn		508114						
ANR	508386	Symbol	gx_default_begin_transparency_group		508114						
ANR	508387	Symbol	gx_default_copy_planes		508114						
ANR	508388	Symbol	gx_default_begin_transparency_mask		508114						
ANR	508389	Symbol	& gs_null_device		508114						
ANR	508390	Symbol	decode_color		508114						
ANR	508391	Symbol	gx_default_push_transparency_state		508114						
ANR	508392	Symbol	* dn		508114						
ANR	508393	Symbol	dev		508114						
ANR	508394	Symbol	mem		508114						
ANR	508395	Symbol	gx_forward_set_graphics_type_tag		508114						
ANR	508396	Symbol	gx_default_end_transparency_mask		508114						
ANR	508397	Symbol	discard_transparency_layer		508114						
ANR	508398	Symbol	end_transparency_mask		508114						
ANR	508399	Symbol	get_profile		508114						
ANR	508400	Symbol	begin_transparency_mask		508114						
ANR	508401	Symbol	gx_forward_get_color_mapping_procs		508114						
ANR	508402	Symbol	get_color_comp_index		508114						
ANR	508403	Symbol	dev_null		508114						
ANR	508404	Symbol	end_transparency_group		508114						
ANR	508405	Symbol	put_image		508114						
ANR	508406	Symbol	gx_forward_encode_color		508114						
ANR	508407	Symbol	pop_transparency_state		508114						
ANR	508408	Symbol	gx_default_put_image		508114						
ANR	508409	Symbol	set_graphics_type_tag		508114						
ANR	508410	Symbol	gx_default_pop_transparency_state		508114						
ANR	508411	Symbol	copy_alpha_hl_color		508114						
ANR	508412	Symbol	dn -> graphics_type_tag		508114						
ANR	508413	Symbol	gx_forward_get_color_comp_index		508114						
ANR	508414	Symbol	gx_forward_decode_color		508114						
ANR	508415	Symbol	copy_planes		508114						
ANR	508416	Symbol	true		508114						
ANR	508417	Symbol	get_color_mapping_procs		508114						
ANR	508418	Symbol	gx_default_end_transparency_group		508114						
ANR	508419	Symbol	push_transparency_state		508114						
ANR	508420	Symbol	dev -> graphics_type_tag		508114						
ANR	508421	Symbol	gx_forward_get_profile		508114						
ANR	508422	Function	gs_is_null_device	671:0:22337:22500							
ANR	508423	FunctionDef	gs_is_null_device (gx_device * dev)		508422	0					
ANR	508424	CompoundStatement		672:0:22376:22500	508422	0					
ANR	508425	ReturnStatement	return dev -> procs . fill_path == gs_null_device . procs . fill_path ;	674:4:22437:22498	508422	0	True				
ANR	508426	EqualityExpression	dev -> procs . fill_path == gs_null_device . procs . fill_path		508422	0		==			
ANR	508427	MemberAccess	dev -> procs . fill_path		508422	0					
ANR	508428	PtrMemberAccess	dev -> procs		508422	0					
ANR	508429	Identifier	dev		508422	0					
ANR	508430	Identifier	procs		508422	1					
ANR	508431	Identifier	fill_path		508422	1					
ANR	508432	MemberAccess	gs_null_device . procs . fill_path		508422	1					
ANR	508433	MemberAccess	gs_null_device . procs		508422	0					
ANR	508434	Identifier	gs_null_device		508422	0					
ANR	508435	Identifier	procs		508422	1					
ANR	508436	Identifier	fill_path		508422	1					
ANR	508437	ReturnType	bool		508422	1					
ANR	508438	Identifier	gs_is_null_device		508422	2					
ANR	508439	ParameterList	gx_device * dev		508422	3					
ANR	508440	Parameter	gx_device * dev	671:23:22360:22373	508422	0	True				
ANR	508441	ParameterType	gx_device *		508422	0					
ANR	508442	Identifier	dev		508422	1					
ANR	508443	CFGEntryNode	ENTRY		508422		True				
ANR	508444	CFGExitNode	EXIT		508422		True				
ANR	508445	Symbol	dev -> procs		508422						
ANR	508446	Symbol	* dev		508422						
ANR	508447	Symbol	dev		508422						
ANR	508448	Symbol	gs_null_device . procs		508422						
ANR	508449	Symbol	gs_null_device		508422						
ANR	508450	Symbol	dev -> procs . fill_path		508422						
ANR	508451	Symbol	gs_null_device . procs . fill_path		508422						
ANR	508452	Function	gx_device_retain	678:0:22552:22809							
ANR	508453	FunctionDef	"gx_device_retain (gx_device * dev , bool retained)"		508452	0					
ANR	508454	CompoundStatement		680:0:22605:22809	508452	0					
ANR	508455	IdentifierDeclStatement	int delta = ( int ) retained - ( int ) dev -> retained ;	681:4:22611:22657	508452	0	True				
ANR	508456	IdentifierDecl	delta = ( int ) retained - ( int ) dev -> retained		508452	0					
ANR	508457	IdentifierDeclType	int		508452	0					
ANR	508458	Identifier	delta		508452	1					
ANR	508459	AssignmentExpression	delta = ( int ) retained - ( int ) dev -> retained		508452	2		=			
ANR	508460	Identifier	delta		508452	0					
ANR	508461	AdditiveExpression	( int ) retained - ( int ) dev -> retained		508452	1		-			
ANR	508462	CastExpression	( int ) retained		508452	0					
ANR	508463	CastTarget	int		508452	0					
ANR	508464	Identifier	retained		508452	1					
ANR	508465	CastExpression	( int ) dev -> retained		508452	1					
ANR	508466	CastTarget	int		508452	0					
ANR	508467	PtrMemberAccess	dev -> retained		508452	1					
ANR	508468	Identifier	dev		508452	0					
ANR	508469	Identifier	retained		508452	1					
ANR	508470	IfStatement	if ( delta )		508452	1					
ANR	508471	Condition	delta	683:8:22668:22672	508452	0	True				
ANR	508472	Identifier	delta		508452	0					
ANR	508473	CompoundStatement		4:15:69:69	508452	1					
ANR	508474	ExpressionStatement	dev -> retained = retained	684:8:22685:22709	508452	0	True				
ANR	508475	AssignmentExpression	dev -> retained = retained		508452	0		=			
ANR	508476	PtrMemberAccess	dev -> retained		508452	0					
ANR	508477	Identifier	dev		508452	0					
ANR	508478	Identifier	retained		508452	1					
ANR	508479	Identifier	retained		508452	1					
ANR	508480	ExpressionStatement	"rc_adjust_only ( dev , delta , ""gx_device_retain"" )"	685:8:22755:22801	508452	1	True				
ANR	508481	CallExpression	"rc_adjust_only ( dev , delta , ""gx_device_retain"" )"		508452	0					
ANR	508482	Callee	rc_adjust_only		508452	0					
ANR	508483	Identifier	rc_adjust_only		508452	0					
ANR	508484	ArgumentList	dev		508452	1					
ANR	508485	Argument	dev		508452	0					
ANR	508486	Identifier	dev		508452	0					
ANR	508487	Argument	delta		508452	1					
ANR	508488	Identifier	delta		508452	0					
ANR	508489	Argument	"""gx_device_retain"""		508452	2					
ANR	508490	PrimaryExpression	"""gx_device_retain"""		508452	0					
ANR	508491	ReturnType	void		508452	1					
ANR	508492	Identifier	gx_device_retain		508452	2					
ANR	508493	ParameterList	"gx_device * dev , bool retained"		508452	3					
ANR	508494	Parameter	gx_device * dev	679:17:22574:22587	508452	0	True				
ANR	508495	ParameterType	gx_device *		508452	0					
ANR	508496	Identifier	dev		508452	1					
ANR	508497	Parameter	bool retained	679:33:22590:22602	508452	1	True				
ANR	508498	ParameterType	bool		508452	0					
ANR	508499	Identifier	retained		508452	1					
ANR	508500	CFGEntryNode	ENTRY		508452		True				
ANR	508501	CFGExitNode	EXIT		508452		True				
ANR	508502	Symbol	* dev		508452						
ANR	508503	Symbol	retained		508452						
ANR	508504	Symbol	dev		508452						
ANR	508505	Symbol	dev -> retained		508452						
ANR	508506	Symbol	delta		508452						
ANR	508507	Function	gs_nulldevice	690:0:22840:24070							
ANR	508508	FunctionDef	gs_nulldevice (gs_gstate * pgs)		508507	0					
ANR	508509	CompoundStatement		692:0:22875:24070	508507	0					
ANR	508510	IdentifierDeclStatement	int code = 0 ;	693:4:22881:22893	508507	0	True				
ANR	508511	IdentifierDecl	code = 0		508507	0					
ANR	508512	IdentifierDeclType	int		508507	0					
ANR	508513	Identifier	code		508507	1					
ANR	508514	AssignmentExpression	code = 0		508507	2		=			
ANR	508515	Identifier	code		508507	0					
ANR	508516	PrimaryExpression	0		508507	1					
ANR	508517	IfStatement	if ( pgs -> device == 0 || ! gx_device_is_null ( pgs -> device ) )		508507	1					
ANR	508518	Condition	pgs -> device == 0 || ! gx_device_is_null ( pgs -> device )	695:8:22904:22954	508507	0	True				
ANR	508519	OrExpression	pgs -> device == 0 || ! gx_device_is_null ( pgs -> device )		508507	0		||			
ANR	508520	EqualityExpression	pgs -> device == 0		508507	0		==			
ANR	508521	PtrMemberAccess	pgs -> device		508507	0					
ANR	508522	Identifier	pgs		508507	0					
ANR	508523	Identifier	device		508507	1					
ANR	508524	PrimaryExpression	0		508507	1					
ANR	508525	UnaryOperationExpression	! gx_device_is_null ( pgs -> device )		508507	1					
ANR	508526	UnaryOperator	!		508507	0					
ANR	508527	CallExpression	gx_device_is_null ( pgs -> device )		508507	1					
ANR	508528	Callee	gx_device_is_null		508507	0					
ANR	508529	Identifier	gx_device_is_null		508507	0					
ANR	508530	ArgumentList	pgs -> device		508507	1					
ANR	508531	Argument	pgs -> device		508507	0					
ANR	508532	PtrMemberAccess	pgs -> device		508507	0					
ANR	508533	Identifier	pgs		508507	0					
ANR	508534	Identifier	device		508507	1					
ANR	508535	CompoundStatement		5:8:91:106	508507	1					
ANR	508536	IdentifierDeclStatement	gx_device * ndev ;	696:8:22967:22982	508507	0	True				
ANR	508537	IdentifierDecl	* ndev		508507	0					
ANR	508538	IdentifierDeclType	gx_device *		508507	0					
ANR	508539	Identifier	ndev		508507	1					
ANR	508540	ExpressionStatement	"code = gs_copydevice ( & ndev , ( const gx_device * ) & gs_null_device , pgs -> memory )"	697:8:22992:23101	508507	1	True				
ANR	508541	AssignmentExpression	"code = gs_copydevice ( & ndev , ( const gx_device * ) & gs_null_device , pgs -> memory )"		508507	0		=			
ANR	508542	Identifier	code		508507	0					
ANR	508543	CallExpression	"gs_copydevice ( & ndev , ( const gx_device * ) & gs_null_device , pgs -> memory )"		508507	1					
ANR	508544	Callee	gs_copydevice		508507	0					
ANR	508545	Identifier	gs_copydevice		508507	0					
ANR	508546	ArgumentList	& ndev		508507	1					
ANR	508547	Argument	& ndev		508507	0					
ANR	508548	UnaryOperationExpression	& ndev		508507	0					
ANR	508549	UnaryOperator	&		508507	0					
ANR	508550	Identifier	ndev		508507	1					
ANR	508551	Argument	( const gx_device * ) & gs_null_device		508507	1					
ANR	508552	CastExpression	( const gx_device * ) & gs_null_device		508507	0					
ANR	508553	CastTarget	const gx_device *		508507	0					
ANR	508554	UnaryOperationExpression	& gs_null_device		508507	1					
ANR	508555	UnaryOperator	&		508507	0					
ANR	508556	Identifier	gs_null_device		508507	1					
ANR	508557	Argument	pgs -> memory		508507	2					
ANR	508558	PtrMemberAccess	pgs -> memory		508507	0					
ANR	508559	Identifier	pgs		508507	0					
ANR	508560	Identifier	memory		508507	1					
ANR	508561	IfStatement	if ( code < 0 )		508507	2					
ANR	508562	Condition	code < 0	700:12:23116:23123	508507	0	True				
ANR	508563	RelationalExpression	code < 0		508507	0		<			
ANR	508564	Identifier	code		508507	0					
ANR	508565	PrimaryExpression	0		508507	1					
ANR	508566	ReturnStatement	return code ;	701:12:23138:23149	508507	1	True				
ANR	508567	Identifier	code		508507	0					
ANR	508568	ExpressionStatement	"rc_init ( ndev , pgs -> memory , 0 )"	710:8:23551:23580	508507	3	True				
ANR	508569	CallExpression	"rc_init ( ndev , pgs -> memory , 0 )"		508507	0					
ANR	508570	Callee	rc_init		508507	0					
ANR	508571	Identifier	rc_init		508507	0					
ANR	508572	ArgumentList	ndev		508507	1					
ANR	508573	Argument	ndev		508507	0					
ANR	508574	Identifier	ndev		508507	0					
ANR	508575	Argument	pgs -> memory		508507	1					
ANR	508576	PtrMemberAccess	pgs -> memory		508507	0					
ANR	508577	Identifier	pgs		508507	0					
ANR	508578	Identifier	memory		508507	1					
ANR	508579	Argument	0		508507	2					
ANR	508580	PrimaryExpression	0		508507	0					
ANR	508581	IfStatement	if ( pgs -> device != NULL )		508507	4					
ANR	508582	Condition	pgs -> device != NULL	711:12:23594:23612	508507	0	True				
ANR	508583	EqualityExpression	pgs -> device != NULL		508507	0		!=			
ANR	508584	PtrMemberAccess	pgs -> device		508507	0					
ANR	508585	Identifier	pgs		508507	0					
ANR	508586	Identifier	device		508507	1					
ANR	508587	Identifier	NULL		508507	1					
ANR	508588	CompoundStatement		20:33:739:739	508507	1					
ANR	508589	IfStatement	"if ( ( code = dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) ) ) < 0 )"		508507	0					
ANR	508590	Condition	"( code = dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) ) ) < 0"	712:16:23633:23760	508507	0	True				
ANR	508591	RelationalExpression	"( code = dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) ) ) < 0"		508507	0		<			
ANR	508592	AssignmentExpression	"code = dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) )"		508507	0		=			
ANR	508593	Identifier	code		508507	0					
ANR	508594	CallExpression	"dev_proc ( pgs -> device , get_profile ) ( pgs -> device , & ( ndev -> icc_struct ) )"		508507	1					
ANR	508595	Callee	"dev_proc ( pgs -> device , get_profile )"		508507	0					
ANR	508596	CallExpression	"dev_proc ( pgs -> device , get_profile )"		508507	0					
ANR	508597	Callee	dev_proc		508507	0					
ANR	508598	Identifier	dev_proc		508507	0					
ANR	508599	ArgumentList	pgs -> device		508507	1					
ANR	508600	Argument	pgs -> device		508507	0					
ANR	508601	PtrMemberAccess	pgs -> device		508507	0					
ANR	508602	Identifier	pgs		508507	0					
ANR	508603	Identifier	device		508507	1					
ANR	508604	Argument	get_profile		508507	1					
ANR	508605	Identifier	get_profile		508507	0					
ANR	508606	ArgumentList	pgs -> device		508507	1					
ANR	508607	Argument	pgs -> device		508507	0					
ANR	508608	PtrMemberAccess	pgs -> device		508507	0					
ANR	508609	Identifier	pgs		508507	0					
ANR	508610	Identifier	device		508507	1					
ANR	508611	Argument	& ( ndev -> icc_struct )		508507	1					
ANR	508612	UnaryOperationExpression	& ( ndev -> icc_struct )		508507	0					
ANR	508613	UnaryOperator	&		508507	0					
ANR	508614	PtrMemberAccess	ndev -> icc_struct		508507	1					
ANR	508615	Identifier	ndev		508507	0					
ANR	508616	Identifier	icc_struct		508507	1					
ANR	508617	PrimaryExpression	0		508507	1					
ANR	508618	ReturnStatement	return code ;	714:16:23779:23790	508507	1	True				
ANR	508619	Identifier	code		508507	0					
ANR	508620	ExpressionStatement	rc_increment ( ndev -> icc_struct )	715:12:23804:23834	508507	1	True				
ANR	508621	CallExpression	rc_increment ( ndev -> icc_struct )		508507	0					
ANR	508622	Callee	rc_increment		508507	0					
ANR	508623	Identifier	rc_increment		508507	0					
ANR	508624	ArgumentList	ndev -> icc_struct		508507	1					
ANR	508625	Argument	ndev -> icc_struct		508507	0					
ANR	508626	PtrMemberAccess	ndev -> icc_struct		508507	0					
ANR	508627	Identifier	ndev		508507	0					
ANR	508628	Identifier	icc_struct		508507	1					
ANR	508629	ExpressionStatement	"set_dev_proc ( ndev , get_profile , gx_default_get_profile )"	716:12:23848:23903	508507	2	True				
ANR	508630	CallExpression	"set_dev_proc ( ndev , get_profile , gx_default_get_profile )"		508507	0					
ANR	508631	Callee	set_dev_proc		508507	0					
ANR	508632	Identifier	set_dev_proc		508507	0					
ANR	508633	ArgumentList	ndev		508507	1					
ANR	508634	Argument	ndev		508507	0					
ANR	508635	Identifier	ndev		508507	0					
ANR	508636	Argument	get_profile		508507	1					
ANR	508637	Identifier	get_profile		508507	0					
ANR	508638	Argument	gx_default_get_profile		508507	2					
ANR	508639	Identifier	gx_default_get_profile		508507	0					
ANR	508640	IfStatement	"if ( ( code = gs_setdevice_no_erase ( pgs , ndev ) ) < 0 )"		508507	5					
ANR	508641	Condition	"( code = gs_setdevice_no_erase ( pgs , ndev ) ) < 0"	719:12:23928:23972	508507	0	True				
ANR	508642	RelationalExpression	"( code = gs_setdevice_no_erase ( pgs , ndev ) ) < 0"		508507	0		<			
ANR	508643	AssignmentExpression	"code = gs_setdevice_no_erase ( pgs , ndev )"		508507	0		=			
ANR	508644	Identifier	code		508507	0					
ANR	508645	CallExpression	"gs_setdevice_no_erase ( pgs , ndev )"		508507	1					
ANR	508646	Callee	gs_setdevice_no_erase		508507	0					
ANR	508647	Identifier	gs_setdevice_no_erase		508507	0					
ANR	508648	ArgumentList	pgs		508507	1					
ANR	508649	Argument	pgs		508507	0					
ANR	508650	Identifier	pgs		508507	0					
ANR	508651	Argument	ndev		508507	1					
ANR	508652	Identifier	ndev		508507	0					
ANR	508653	PrimaryExpression	0		508507	1					
ANR	508654	ExpressionStatement	"gs_free_object ( pgs -> memory , ndev , ""gs_copydevice(device)"" )"	720:12:23987:24045	508507	1	True				
ANR	508655	CallExpression	"gs_free_object ( pgs -> memory , ndev , ""gs_copydevice(device)"" )"		508507	0					
ANR	508656	Callee	gs_free_object		508507	0					
ANR	508657	Identifier	gs_free_object		508507	0					
ANR	508658	ArgumentList	pgs -> memory		508507	1					
ANR	508659	Argument	pgs -> memory		508507	0					
ANR	508660	PtrMemberAccess	pgs -> memory		508507	0					
ANR	508661	Identifier	pgs		508507	0					
ANR	508662	Identifier	memory		508507	1					
ANR	508663	Argument	ndev		508507	1					
ANR	508664	Identifier	ndev		508507	0					
ANR	508665	Argument	"""gs_copydevice(device)"""		508507	2					
ANR	508666	PrimaryExpression	"""gs_copydevice(device)"""		508507	0					
ANR	508667	ReturnStatement	return code ;	722:4:24057:24068	508507	2	True				
ANR	508668	Identifier	code		508507	0					
ANR	508669	ReturnType	int		508507	1					
ANR	508670	Identifier	gs_nulldevice		508507	2					
ANR	508671	ParameterList	gs_gstate * pgs		508507	3					
ANR	508672	Parameter	gs_gstate * pgs	691:14:22858:22872	508507	0	True				
ANR	508673	ParameterType	gs_gstate *		508507	0					
ANR	508674	Identifier	pgs		508507	1					
ANR	508675	CFGEntryNode	ENTRY		508507		True				
ANR	508676	CFGExitNode	EXIT		508507		True				
ANR	508677	Symbol	& ndev -> icc_struct		508507						
ANR	508678	Symbol	code		508507						
ANR	508679	Symbol	NULL		508507						
ANR	508680	Symbol	* pgs		508507						
ANR	508681	Symbol	ndev -> icc_struct		508507						
ANR	508682	Symbol	gs_copydevice		508507						
ANR	508683	Symbol	& ndev		508507						
ANR	508684	Symbol	& gs_null_device		508507						
ANR	508685	Symbol	ndev		508507						
ANR	508686	Symbol	gx_default_get_profile		508507						
ANR	508687	Symbol	dev_proc		508507						
ANR	508688	Symbol	pgs -> device		508507						
ANR	508689	Symbol	gx_device_is_null		508507						
ANR	508690	Symbol	gs_setdevice_no_erase		508507						
ANR	508691	Symbol	* ndev		508507						
ANR	508692	Symbol	pgs		508507						
ANR	508693	Symbol	pgs -> memory		508507						
ANR	508694	Symbol	get_profile		508507						
ANR	508695	Function	gs_closedevice	727:0:24196:24436							
ANR	508696	FunctionDef	gs_closedevice (gx_device * dev)		508695	0					
ANR	508697	CompoundStatement		729:0:24232:24436	508695	0					
ANR	508698	IdentifierDeclStatement	int code = 0 ;	730:4:24238:24250	508695	0	True				
ANR	508699	IdentifierDecl	code = 0		508695	0					
ANR	508700	IdentifierDeclType	int		508695	0					
ANR	508701	Identifier	code		508695	1					
ANR	508702	AssignmentExpression	code = 0		508695	2		=			
ANR	508703	Identifier	code		508695	0					
ANR	508704	PrimaryExpression	0		508695	1					
ANR	508705	IfStatement	if ( dev -> is_open )		508695	1					
ANR	508706	Condition	dev -> is_open	732:8:24261:24272	508695	0	True				
ANR	508707	PtrMemberAccess	dev -> is_open		508695	0					
ANR	508708	Identifier	dev		508695	0					
ANR	508709	Identifier	is_open		508695	1					
ANR	508710	CompoundStatement		4:22:42:42	508695	1					
ANR	508711	ExpressionStatement	"code = ( * dev_proc ( dev , close_device ) ) ( dev )"	733:8:24285:24327	508695	0	True				
ANR	508712	AssignmentExpression	"code = ( * dev_proc ( dev , close_device ) ) ( dev )"		508695	0		=			
ANR	508713	Identifier	code		508695	0					
ANR	508714	CallExpression	"( * dev_proc ( dev , close_device ) ) ( dev )"		508695	1					
ANR	508715	Callee	"* dev_proc ( dev , close_device )"		508695	0					
ANR	508716	UnaryOperationExpression	"* dev_proc ( dev , close_device )"		508695	0					
ANR	508717	UnaryOperator	*		508695	0					
ANR	508718	CallExpression	"dev_proc ( dev , close_device )"		508695	1					
ANR	508719	Callee	dev_proc		508695	0					
ANR	508720	Identifier	dev_proc		508695	0					
ANR	508721	ArgumentList	dev		508695	1					
ANR	508722	Argument	dev		508695	0					
ANR	508723	Identifier	dev		508695	0					
ANR	508724	Argument	close_device		508695	1					
ANR	508725	Identifier	close_device		508695	0					
ANR	508726	ArgumentList	dev		508695	1					
ANR	508727	Argument	dev		508695	0					
ANR	508728	Identifier	dev		508695	0					
ANR	508729	ExpressionStatement	dev -> is_open = false	734:8:24337:24357	508695	1	True				
ANR	508730	AssignmentExpression	dev -> is_open = false		508695	0		=			
ANR	508731	PtrMemberAccess	dev -> is_open		508695	0					
ANR	508732	Identifier	dev		508695	0					
ANR	508733	Identifier	is_open		508695	1					
ANR	508734	Identifier	false		508695	1					
ANR	508735	IfStatement	if ( code < 0 )		508695	2					
ANR	508736	Condition	code < 0	735:12:24371:24378	508695	0	True				
ANR	508737	RelationalExpression	code < 0		508695	0		<			
ANR	508738	Identifier	code		508695	0					
ANR	508739	PrimaryExpression	0		508695	1					
ANR	508740	ExpressionStatement	return_error ( code )	736:12:24393:24411	508695	1	True				
ANR	508741	CallExpression	return_error ( code )		508695	0					
ANR	508742	Callee	return_error		508695	0					
ANR	508743	Identifier	return_error		508695	0					
ANR	508744	ArgumentList	code		508695	1					
ANR	508745	Argument	code		508695	0					
ANR	508746	Identifier	code		508695	0					
ANR	508747	ReturnStatement	return code ;	738:4:24423:24434	508695	2	True				
ANR	508748	Identifier	code		508695	0					
ANR	508749	ReturnType	int		508695	1					
ANR	508750	Identifier	gs_closedevice		508695	2					
ANR	508751	ParameterList	gx_device * dev		508695	3					
ANR	508752	Parameter	gx_device * dev	728:15:24215:24229	508695	0	True				
ANR	508753	ParameterType	gx_device *		508695	0					
ANR	508754	Identifier	dev		508695	1					
ANR	508755	CFGEntryNode	ENTRY		508695		True				
ANR	508756	CFGExitNode	EXIT		508695		True				
ANR	508757	Symbol	* dev		508695						
ANR	508758	Symbol	code		508695						
ANR	508759	Symbol	dev -> is_open		508695						
ANR	508760	Symbol	"* dev_proc ( dev , close_device )"		508695						
ANR	508761	Symbol	dev		508695						
ANR	508762	Symbol	* dev_proc		508695						
ANR	508763	Symbol	dev_proc		508695						
ANR	508764	Symbol	false		508695						
ANR	508765	Symbol	close_device		508695						
ANR	508766	Function	gx_set_device_only	745:0:24525:24640							
ANR	508767	FunctionDef	"gx_set_device_only (gs_gstate * pgs , gx_device * dev)"		508766	0					
ANR	508768	CompoundStatement		747:0:24583:24640	508766	0					
ANR	508769	ExpressionStatement	"rc_assign ( pgs -> device , dev , ""gx_set_device_only"" )"	748:4:24589:24638	508766	0	True				
ANR	508770	CallExpression	"rc_assign ( pgs -> device , dev , ""gx_set_device_only"" )"		508766	0					
ANR	508771	Callee	rc_assign		508766	0					
ANR	508772	Identifier	rc_assign		508766	0					
ANR	508773	ArgumentList	pgs -> device		508766	1					
ANR	508774	Argument	pgs -> device		508766	0					
ANR	508775	PtrMemberAccess	pgs -> device		508766	0					
ANR	508776	Identifier	pgs		508766	0					
ANR	508777	Identifier	device		508766	1					
ANR	508778	Argument	dev		508766	1					
ANR	508779	Identifier	dev		508766	0					
ANR	508780	Argument	"""gx_set_device_only"""		508766	2					
ANR	508781	PrimaryExpression	"""gx_set_device_only"""		508766	0					
ANR	508782	ReturnType	void		508766	1					
ANR	508783	Identifier	gx_set_device_only		508766	2					
ANR	508784	ParameterList	"gs_gstate * pgs , gx_device * dev"		508766	3					
ANR	508785	Parameter	gs_gstate * pgs	746:19:24549:24563	508766	0	True				
ANR	508786	ParameterType	gs_gstate *		508766	0					
ANR	508787	Identifier	pgs		508766	1					
ANR	508788	Parameter	gx_device * dev	746:36:24566:24580	508766	1	True				
ANR	508789	ParameterType	gx_device *		508766	0					
ANR	508790	Identifier	dev		508766	1					
ANR	508791	CFGEntryNode	ENTRY		508766		True				
ANR	508792	CFGExitNode	EXIT		508766		True				
ANR	508793	Symbol	dev		508766						
ANR	508794	Symbol	* pgs		508766						
ANR	508795	Symbol	pgs -> device		508766						
ANR	508796	Symbol	pgs		508766						
ANR	508797	Function	gx_device_raster	755:0:24895:25392							
ANR	508798	FunctionDef	"gx_device_raster (const gx_device * dev , bool pad)"		508797	0					
ANR	508799	CompoundStatement		757:0:24950:25392	508797	0					
ANR	508800	IdentifierDeclStatement	ulong bits = ( ulong ) dev -> width * dev -> color_info . depth ;	758:4:24956:25011	508797	0	True				
ANR	508801	IdentifierDecl	bits = ( ulong ) dev -> width * dev -> color_info . depth		508797	0					
ANR	508802	IdentifierDeclType	ulong		508797	0					
ANR	508803	Identifier	bits		508797	1					
ANR	508804	AssignmentExpression	bits = ( ulong ) dev -> width * dev -> color_info . depth		508797	2		=			
ANR	508805	Identifier	bits		508797	0					
ANR	508806	MultiplicativeExpression	( ulong ) dev -> width * dev -> color_info . depth		508797	1		*			
ANR	508807	CastExpression	( ulong ) dev -> width		508797	0					
ANR	508808	CastTarget	ulong		508797	0					
ANR	508809	PtrMemberAccess	dev -> width		508797	1					
ANR	508810	Identifier	dev		508797	0					
ANR	508811	Identifier	width		508797	1					
ANR	508812	MemberAccess	dev -> color_info . depth		508797	1					
ANR	508813	PtrMemberAccess	dev -> color_info		508797	0					
ANR	508814	Identifier	dev		508797	0					
ANR	508815	Identifier	color_info		508797	1					
ANR	508816	Identifier	depth		508797	1					
ANR	508817	IdentifierDeclStatement	ulong raster ;	759:4:25017:25029	508797	1	True				
ANR	508818	IdentifierDecl	raster		508797	0					
ANR	508819	IdentifierDeclType	ulong		508797	0					
ANR	508820	Identifier	raster		508797	1					
ANR	508821	IdentifierDeclStatement	int l2align ;	760:4:25035:25046	508797	2	True				
ANR	508822	IdentifierDecl	l2align		508797	0					
ANR	508823	IdentifierDeclType	int		508797	0					
ANR	508824	Identifier	l2align		508797	1					
ANR	508825	IfStatement	if ( dev -> is_planar )		508797	3					
ANR	508826	Condition	dev -> is_planar	762:8:25057:25070	508797	0	True				
ANR	508827	PtrMemberAccess	dev -> is_planar		508797	0					
ANR	508828	Identifier	dev		508797	0					
ANR	508829	Identifier	is_planar		508797	1					
ANR	508830	ExpressionStatement	bits /= dev -> color_info . num_components	763:8:25081:25119	508797	1	True				
ANR	508831	AssignmentExpression	bits /= dev -> color_info . num_components		508797	0		/=			
ANR	508832	Identifier	bits		508797	0					
ANR	508833	MemberAccess	dev -> color_info . num_components		508797	1					
ANR	508834	PtrMemberAccess	dev -> color_info		508797	0					
ANR	508835	Identifier	dev		508797	0					
ANR	508836	Identifier	color_info		508797	1					
ANR	508837	Identifier	num_components		508797	1					
ANR	508838	ExpressionStatement	raster = ( uint ) ( ( bits + 7 ) >> 3 )	765:4:25126:25158	508797	4	True				
ANR	508839	AssignmentExpression	raster = ( uint ) ( ( bits + 7 ) >> 3 )		508797	0		=			
ANR	508840	Identifier	raster		508797	0					
ANR	508841	CastExpression	( uint ) ( ( bits + 7 ) >> 3 )		508797	1					
ANR	508842	CastTarget	uint		508797	0					
ANR	508843	ShiftExpression	( bits + 7 ) >> 3		508797	1		>>			
ANR	508844	AdditiveExpression	bits + 7		508797	0		+			
ANR	508845	Identifier	bits		508797	0					
ANR	508846	PrimaryExpression	7		508797	1					
ANR	508847	PrimaryExpression	3		508797	1					
ANR	508848	IfStatement	if ( ! pad )		508797	5					
ANR	508849	Condition	! pad	766:8:25168:25171	508797	0	True				
ANR	508850	UnaryOperationExpression	! pad		508797	0					
ANR	508851	UnaryOperator	!		508797	0					
ANR	508852	Identifier	pad		508797	1					
ANR	508853	ReturnStatement	return raster ;	767:8:25182:25195	508797	1	True				
ANR	508854	Identifier	raster		508797	0					
ANR	508855	ExpressionStatement	l2align = dev -> log2_align_mod	768:4:25201:25230	508797	6	True				
ANR	508856	AssignmentExpression	l2align = dev -> log2_align_mod		508797	0		=			
ANR	508857	Identifier	l2align		508797	0					
ANR	508858	PtrMemberAccess	dev -> log2_align_mod		508797	1					
ANR	508859	Identifier	dev		508797	0					
ANR	508860	Identifier	log2_align_mod		508797	1					
ANR	508861	IfStatement	if ( l2align < log2_align_bitmap_mod )		508797	7					
ANR	508862	Condition	l2align < log2_align_bitmap_mod	769:8:25240:25270	508797	0	True				
ANR	508863	RelationalExpression	l2align < log2_align_bitmap_mod		508797	0		<			
ANR	508864	Identifier	l2align		508797	0					
ANR	508865	Identifier	log2_align_bitmap_mod		508797	1					
ANR	508866	ExpressionStatement	l2align = log2_align_bitmap_mod	770:8:25281:25312	508797	1	True				
ANR	508867	AssignmentExpression	l2align = log2_align_bitmap_mod		508797	0		=			
ANR	508868	Identifier	l2align		508797	0					
ANR	508869	Identifier	log2_align_bitmap_mod		508797	1					
ANR	508870	ReturnStatement	return ( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align ) ;	771:4:25318:25390	508797	8	True				
ANR	508871	CastExpression	( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align )		508797	0					
ANR	508872	CastTarget	uint		508797	0					
ANR	508873	ShiftExpression	( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align		508797	1		<<			
ANR	508874	ShiftExpression	( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 )		508797	0		>>			
ANR	508875	AdditiveExpression	bits + ( 8 << l2align ) - 1		508797	0		+			
ANR	508876	Identifier	bits		508797	0					
ANR	508877	AdditiveExpression	( 8 << l2align ) - 1		508797	1		-			
ANR	508878	ShiftExpression	8 << l2align		508797	0		<<			
ANR	508879	PrimaryExpression	8		508797	0					
ANR	508880	Identifier	l2align		508797	1					
ANR	508881	PrimaryExpression	1		508797	1					
ANR	508882	AdditiveExpression	l2align + 3		508797	1		+			
ANR	508883	Identifier	l2align		508797	0					
ANR	508884	PrimaryExpression	3		508797	1					
ANR	508885	Identifier	l2align		508797	1					
ANR	508886	ReturnType	uint		508797	1					
ANR	508887	Identifier	gx_device_raster		508797	2					
ANR	508888	ParameterList	"const gx_device * dev , bool pad"		508797	3					
ANR	508889	Parameter	const gx_device * dev	756:17:24917:24937	508797	0	True				
ANR	508890	ParameterType	const gx_device *		508797	0					
ANR	508891	Identifier	dev		508797	1					
ANR	508892	Parameter	bool pad	756:40:24940:24947	508797	1	True				
ANR	508893	ParameterType	bool		508797	0					
ANR	508894	Identifier	pad		508797	1					
ANR	508895	CFGEntryNode	ENTRY		508797		True				
ANR	508896	CFGExitNode	EXIT		508797		True				
ANR	508897	Symbol	* dev		508797						
ANR	508898	Symbol	dev -> log2_align_mod		508797						
ANR	508899	Symbol	log2_align_bitmap_mod		508797						
ANR	508900	Symbol	l2align		508797						
ANR	508901	Symbol	dev -> color_info . num_components		508797						
ANR	508902	Symbol	bits		508797						
ANR	508903	Symbol	raster		508797						
ANR	508904	Symbol	dev -> color_info		508797						
ANR	508905	Symbol	dev -> color_info . depth		508797						
ANR	508906	Symbol	pad		508797						
ANR	508907	Symbol	dev -> is_planar		508797						
ANR	508908	Symbol	dev		508797						
ANR	508909	Symbol	dev -> width		508797						
ANR	508910	Function	gx_device_raster_chunky	774:0:25395:25826							
ANR	508911	FunctionDef	"gx_device_raster_chunky (const gx_device * dev , bool pad)"		508910	0					
ANR	508912	CompoundStatement		776:0:25457:25826	508910	0					
ANR	508913	IdentifierDeclStatement	ulong bits = ( ulong ) dev -> width * dev -> color_info . depth ;	777:4:25463:25518	508910	0	True				
ANR	508914	IdentifierDecl	bits = ( ulong ) dev -> width * dev -> color_info . depth		508910	0					
ANR	508915	IdentifierDeclType	ulong		508910	0					
ANR	508916	Identifier	bits		508910	1					
ANR	508917	AssignmentExpression	bits = ( ulong ) dev -> width * dev -> color_info . depth		508910	2		=			
ANR	508918	Identifier	bits		508910	0					
ANR	508919	MultiplicativeExpression	( ulong ) dev -> width * dev -> color_info . depth		508910	1		*			
ANR	508920	CastExpression	( ulong ) dev -> width		508910	0					
ANR	508921	CastTarget	ulong		508910	0					
ANR	508922	PtrMemberAccess	dev -> width		508910	1					
ANR	508923	Identifier	dev		508910	0					
ANR	508924	Identifier	width		508910	1					
ANR	508925	MemberAccess	dev -> color_info . depth		508910	1					
ANR	508926	PtrMemberAccess	dev -> color_info		508910	0					
ANR	508927	Identifier	dev		508910	0					
ANR	508928	Identifier	color_info		508910	1					
ANR	508929	Identifier	depth		508910	1					
ANR	508930	IdentifierDeclStatement	ulong raster ;	778:4:25524:25536	508910	1	True				
ANR	508931	IdentifierDecl	raster		508910	0					
ANR	508932	IdentifierDeclType	ulong		508910	0					
ANR	508933	Identifier	raster		508910	1					
ANR	508934	IdentifierDeclStatement	int l2align ;	779:4:25542:25553	508910	2	True				
ANR	508935	IdentifierDecl	l2align		508910	0					
ANR	508936	IdentifierDeclType	int		508910	0					
ANR	508937	Identifier	l2align		508910	1					
ANR	508938	ExpressionStatement	raster = ( uint ) ( ( bits + 7 ) >> 3 )	781:4:25560:25592	508910	3	True				
ANR	508939	AssignmentExpression	raster = ( uint ) ( ( bits + 7 ) >> 3 )		508910	0		=			
ANR	508940	Identifier	raster		508910	0					
ANR	508941	CastExpression	( uint ) ( ( bits + 7 ) >> 3 )		508910	1					
ANR	508942	CastTarget	uint		508910	0					
ANR	508943	ShiftExpression	( bits + 7 ) >> 3		508910	1		>>			
ANR	508944	AdditiveExpression	bits + 7		508910	0		+			
ANR	508945	Identifier	bits		508910	0					
ANR	508946	PrimaryExpression	7		508910	1					
ANR	508947	PrimaryExpression	3		508910	1					
ANR	508948	IfStatement	if ( ! pad )		508910	4					
ANR	508949	Condition	! pad	782:8:25602:25605	508910	0	True				
ANR	508950	UnaryOperationExpression	! pad		508910	0					
ANR	508951	UnaryOperator	!		508910	0					
ANR	508952	Identifier	pad		508910	1					
ANR	508953	ReturnStatement	return raster ;	783:8:25616:25629	508910	1	True				
ANR	508954	Identifier	raster		508910	0					
ANR	508955	ExpressionStatement	l2align = dev -> log2_align_mod	784:4:25635:25664	508910	5	True				
ANR	508956	AssignmentExpression	l2align = dev -> log2_align_mod		508910	0		=			
ANR	508957	Identifier	l2align		508910	0					
ANR	508958	PtrMemberAccess	dev -> log2_align_mod		508910	1					
ANR	508959	Identifier	dev		508910	0					
ANR	508960	Identifier	log2_align_mod		508910	1					
ANR	508961	IfStatement	if ( l2align < log2_align_bitmap_mod )		508910	6					
ANR	508962	Condition	l2align < log2_align_bitmap_mod	785:8:25674:25704	508910	0	True				
ANR	508963	RelationalExpression	l2align < log2_align_bitmap_mod		508910	0		<			
ANR	508964	Identifier	l2align		508910	0					
ANR	508965	Identifier	log2_align_bitmap_mod		508910	1					
ANR	508966	ExpressionStatement	l2align = log2_align_bitmap_mod	786:8:25715:25746	508910	1	True				
ANR	508967	AssignmentExpression	l2align = log2_align_bitmap_mod		508910	0		=			
ANR	508968	Identifier	l2align		508910	0					
ANR	508969	Identifier	log2_align_bitmap_mod		508910	1					
ANR	508970	ReturnStatement	return ( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align ) ;	787:4:25752:25824	508910	7	True				
ANR	508971	CastExpression	( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align )		508910	0					
ANR	508972	CastTarget	uint		508910	0					
ANR	508973	ShiftExpression	( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align		508910	1		<<			
ANR	508974	ShiftExpression	( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 )		508910	0		>>			
ANR	508975	AdditiveExpression	bits + ( 8 << l2align ) - 1		508910	0		+			
ANR	508976	Identifier	bits		508910	0					
ANR	508977	AdditiveExpression	( 8 << l2align ) - 1		508910	1		-			
ANR	508978	ShiftExpression	8 << l2align		508910	0		<<			
ANR	508979	PrimaryExpression	8		508910	0					
ANR	508980	Identifier	l2align		508910	1					
ANR	508981	PrimaryExpression	1		508910	1					
ANR	508982	AdditiveExpression	l2align + 3		508910	1		+			
ANR	508983	Identifier	l2align		508910	0					
ANR	508984	PrimaryExpression	3		508910	1					
ANR	508985	Identifier	l2align		508910	1					
ANR	508986	ReturnType	uint		508910	1					
ANR	508987	Identifier	gx_device_raster_chunky		508910	2					
ANR	508988	ParameterList	"const gx_device * dev , bool pad"		508910	3					
ANR	508989	Parameter	const gx_device * dev	775:24:25424:25444	508910	0	True				
ANR	508990	ParameterType	const gx_device *		508910	0					
ANR	508991	Identifier	dev		508910	1					
ANR	508992	Parameter	bool pad	775:47:25447:25454	508910	1	True				
ANR	508993	ParameterType	bool		508910	0					
ANR	508994	Identifier	pad		508910	1					
ANR	508995	CFGEntryNode	ENTRY		508910		True				
ANR	508996	CFGExitNode	EXIT		508910		True				
ANR	508997	Symbol	* dev		508910						
ANR	508998	Symbol	dev -> log2_align_mod		508910						
ANR	508999	Symbol	log2_align_bitmap_mod		508910						
ANR	509000	Symbol	pad		508910						
ANR	509001	Symbol	l2align		508910						
ANR	509002	Symbol	dev		508910						
ANR	509003	Symbol	dev -> width		508910						
ANR	509004	Symbol	bits		508910						
ANR	509005	Symbol	raster		508910						
ANR	509006	Symbol	dev -> color_info		508910						
ANR	509007	Symbol	dev -> color_info . depth		508910						
ANR	509008	Function	gx_device_raster_plane	789:0:25828:26344							
ANR	509009	FunctionDef	"gx_device_raster_plane (const gx_device * dev , const gx_render_plane_t * render_plane)"		509008	0					
ANR	509010	CompoundStatement		791:0:25918:26344	509008	0					
ANR	509011	IdentifierDeclStatement	ulong bpc = ( render_plane && render_plane -> index >= 0 ? render_plane -> depth : dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 ) ) ;	792:4:25924:26086	509008	0	True				
ANR	509012	IdentifierDecl	bpc = ( render_plane && render_plane -> index >= 0 ? render_plane -> depth : dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 ) )		509008	0					
ANR	509013	IdentifierDeclType	ulong		509008	0					
ANR	509014	Identifier	bpc		509008	1					
ANR	509015	AssignmentExpression	bpc = ( render_plane && render_plane -> index >= 0 ? render_plane -> depth : dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 ) )		509008	2		=			
ANR	509016	Identifier	bpc		509008	0					
ANR	509017	ConditionalExpression	render_plane && render_plane -> index >= 0 ? render_plane -> depth : dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 )		509008	1					
ANR	509018	Condition	render_plane && render_plane -> index >= 0		509008	0					
ANR	509019	AndExpression	render_plane && render_plane -> index >= 0		509008	0		&&			
ANR	509020	Identifier	render_plane		509008	0					
ANR	509021	RelationalExpression	render_plane -> index >= 0		509008	1		>=			
ANR	509022	PtrMemberAccess	render_plane -> index		509008	0					
ANR	509023	Identifier	render_plane		509008	0					
ANR	509024	Identifier	index		509008	1					
ANR	509025	PrimaryExpression	0		509008	1					
ANR	509026	PtrMemberAccess	render_plane -> depth		509008	1					
ANR	509027	Identifier	render_plane		509008	0					
ANR	509028	Identifier	depth		509008	1					
ANR	509029	MultiplicativeExpression	dev -> color_info . depth / ( dev -> is_planar ? dev -> color_info . num_components : 1 )		509008	2		/			
ANR	509030	MemberAccess	dev -> color_info . depth		509008	0					
ANR	509031	PtrMemberAccess	dev -> color_info		509008	0					
ANR	509032	Identifier	dev		509008	0					
ANR	509033	Identifier	color_info		509008	1					
ANR	509034	Identifier	depth		509008	1					
ANR	509035	ConditionalExpression	dev -> is_planar ? dev -> color_info . num_components : 1		509008	1					
ANR	509036	Condition	dev -> is_planar		509008	0					
ANR	509037	PtrMemberAccess	dev -> is_planar		509008	0					
ANR	509038	Identifier	dev		509008	0					
ANR	509039	Identifier	is_planar		509008	1					
ANR	509040	MemberAccess	dev -> color_info . num_components		509008	1					
ANR	509041	PtrMemberAccess	dev -> color_info		509008	0					
ANR	509042	Identifier	dev		509008	0					
ANR	509043	Identifier	color_info		509008	1					
ANR	509044	Identifier	num_components		509008	1					
ANR	509045	PrimaryExpression	1		509008	2					
ANR	509046	IdentifierDeclStatement	ulong bits = ( ulong ) dev -> width * bpc ;	794:4:26092:26129	509008	1	True				
ANR	509047	IdentifierDecl	bits = ( ulong ) dev -> width * bpc		509008	0					
ANR	509048	IdentifierDeclType	ulong		509008	0					
ANR	509049	Identifier	bits		509008	1					
ANR	509050	AssignmentExpression	bits = ( ulong ) dev -> width * bpc		509008	2		=			
ANR	509051	Identifier	bits		509008	0					
ANR	509052	MultiplicativeExpression	( ulong ) dev -> width * bpc		509008	1		*			
ANR	509053	CastExpression	( ulong ) dev -> width		509008	0					
ANR	509054	CastTarget	ulong		509008	0					
ANR	509055	PtrMemberAccess	dev -> width		509008	1					
ANR	509056	Identifier	dev		509008	0					
ANR	509057	Identifier	width		509008	1					
ANR	509058	Identifier	bpc		509008	1					
ANR	509059	IdentifierDeclStatement	int l2align ;	795:4:26135:26146	509008	2	True				
ANR	509060	IdentifierDecl	l2align		509008	0					
ANR	509061	IdentifierDeclType	int		509008	0					
ANR	509062	Identifier	l2align		509008	1					
ANR	509063	ExpressionStatement	l2align = dev -> log2_align_mod	797:4:26153:26182	509008	3	True				
ANR	509064	AssignmentExpression	l2align = dev -> log2_align_mod		509008	0		=			
ANR	509065	Identifier	l2align		509008	0					
ANR	509066	PtrMemberAccess	dev -> log2_align_mod		509008	1					
ANR	509067	Identifier	dev		509008	0					
ANR	509068	Identifier	log2_align_mod		509008	1					
ANR	509069	IfStatement	if ( l2align < log2_align_bitmap_mod )		509008	4					
ANR	509070	Condition	l2align < log2_align_bitmap_mod	798:8:26192:26222	509008	0	True				
ANR	509071	RelationalExpression	l2align < log2_align_bitmap_mod		509008	0		<			
ANR	509072	Identifier	l2align		509008	0					
ANR	509073	Identifier	log2_align_bitmap_mod		509008	1					
ANR	509074	ExpressionStatement	l2align = log2_align_bitmap_mod	799:8:26233:26264	509008	1	True				
ANR	509075	AssignmentExpression	l2align = log2_align_bitmap_mod		509008	0		=			
ANR	509076	Identifier	l2align		509008	0					
ANR	509077	Identifier	log2_align_bitmap_mod		509008	1					
ANR	509078	ReturnStatement	return ( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align ) ;	800:4:26270:26342	509008	5	True				
ANR	509079	CastExpression	( uint ) ( ( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align )		509008	0					
ANR	509080	CastTarget	uint		509008	0					
ANR	509081	ShiftExpression	( ( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 ) ) << l2align		509008	1		<<			
ANR	509082	ShiftExpression	( bits + ( 8 << l2align ) - 1 ) >> ( l2align + 3 )		509008	0		>>			
ANR	509083	AdditiveExpression	bits + ( 8 << l2align ) - 1		509008	0		+			
ANR	509084	Identifier	bits		509008	0					
ANR	509085	AdditiveExpression	( 8 << l2align ) - 1		509008	1		-			
ANR	509086	ShiftExpression	8 << l2align		509008	0		<<			
ANR	509087	PrimaryExpression	8		509008	0					
ANR	509088	Identifier	l2align		509008	1					
ANR	509089	PrimaryExpression	1		509008	1					
ANR	509090	AdditiveExpression	l2align + 3		509008	1		+			
ANR	509091	Identifier	l2align		509008	0					
ANR	509092	PrimaryExpression	3		509008	1					
ANR	509093	Identifier	l2align		509008	1					
ANR	509094	ReturnType	uint		509008	1					
ANR	509095	Identifier	gx_device_raster_plane		509008	2					
ANR	509096	ParameterList	"const gx_device * dev , const gx_render_plane_t * render_plane"		509008	3					
ANR	509097	Parameter	const gx_device * dev	790:23:25856:25876	509008	0	True				
ANR	509098	ParameterType	const gx_device *		509008	0					
ANR	509099	Identifier	dev		509008	1					
ANR	509100	Parameter	const gx_render_plane_t * render_plane	790:46:25879:25915	509008	1	True				
ANR	509101	ParameterType	const gx_render_plane_t *		509008	0					
ANR	509102	Identifier	render_plane		509008	1					
ANR	509103	CFGEntryNode	ENTRY		509008		True				
ANR	509104	CFGExitNode	EXIT		509008		True				
ANR	509105	Symbol	* dev		509008						
ANR	509106	Symbol	dev -> log2_align_mod		509008						
ANR	509107	Symbol	log2_align_bitmap_mod		509008						
ANR	509108	Symbol	l2align		509008						
ANR	509109	Symbol	dev -> color_info . num_components		509008						
ANR	509110	Symbol	render_plane		509008						
ANR	509111	Symbol	bits		509008						
ANR	509112	Symbol	dev -> color_info		509008						
ANR	509113	Symbol	dev -> color_info . depth		509008						
ANR	509114	Symbol	dev -> is_planar		509008						
ANR	509115	Symbol	* render_plane		509008						
ANR	509116	Symbol	dev		509008						
ANR	509117	Symbol	bpc		509008						
ANR	509118	Symbol	dev -> width		509008						
ANR	509119	Symbol	render_plane -> index		509008						
ANR	509120	Symbol	render_plane -> depth		509008						
ANR	509121	Function	gx_device_adjust_resolution	807:0:26629:27129							
ANR	509122	FunctionDef	"gx_device_adjust_resolution (gx_device * dev , int actual_width , int actual_height , int fit)"		509121	0					
ANR	509123	CompoundStatement		810:0:26752:27129	509121	0					
ANR	509124	IdentifierDeclStatement	double width_ratio = ( double ) actual_width / dev -> width ;	811:4:26758:26812	509121	0	True				
ANR	509125	IdentifierDecl	width_ratio = ( double ) actual_width / dev -> width		509121	0					
ANR	509126	IdentifierDeclType	double		509121	0					
ANR	509127	Identifier	width_ratio		509121	1					
ANR	509128	AssignmentExpression	width_ratio = ( double ) actual_width / dev -> width		509121	2		=			
ANR	509129	Identifier	width_ratio		509121	0					
ANR	509130	MultiplicativeExpression	( double ) actual_width / dev -> width		509121	1		/			
ANR	509131	CastExpression	( double ) actual_width		509121	0					
ANR	509132	CastTarget	double		509121	0					
ANR	509133	Identifier	actual_width		509121	1					
ANR	509134	PtrMemberAccess	dev -> width		509121	1					
ANR	509135	Identifier	dev		509121	0					
ANR	509136	Identifier	width		509121	1					
ANR	509137	IdentifierDeclStatement	double height_ratio = ( double ) actual_height / dev -> height ;	812:4:26818:26875	509121	1	True				
ANR	509138	IdentifierDecl	height_ratio = ( double ) actual_height / dev -> height		509121	0					
ANR	509139	IdentifierDeclType	double		509121	0					
ANR	509140	Identifier	height_ratio		509121	1					
ANR	509141	AssignmentExpression	height_ratio = ( double ) actual_height / dev -> height		509121	2		=			
ANR	509142	Identifier	height_ratio		509121	0					
ANR	509143	MultiplicativeExpression	( double ) actual_height / dev -> height		509121	1		/			
ANR	509144	CastExpression	( double ) actual_height		509121	0					
ANR	509145	CastTarget	double		509121	0					
ANR	509146	Identifier	actual_height		509121	1					
ANR	509147	PtrMemberAccess	dev -> height		509121	1					
ANR	509148	Identifier	dev		509121	0					
ANR	509149	Identifier	height		509121	1					
ANR	509150	IdentifierDeclStatement	"double ratio = ( fit ? min ( width_ratio , height_ratio ) : max ( width_ratio , height_ratio ) ) ;"	813:4:26881:26976	509121	2	True				
ANR	509151	IdentifierDecl	"ratio = ( fit ? min ( width_ratio , height_ratio ) : max ( width_ratio , height_ratio ) )"		509121	0					
ANR	509152	IdentifierDeclType	double		509121	0					
ANR	509153	Identifier	ratio		509121	1					
ANR	509154	AssignmentExpression	"ratio = ( fit ? min ( width_ratio , height_ratio ) : max ( width_ratio , height_ratio ) )"		509121	2		=			
ANR	509155	Identifier	ratio		509121	0					
ANR	509156	ConditionalExpression	"fit ? min ( width_ratio , height_ratio ) : max ( width_ratio , height_ratio )"		509121	1					
ANR	509157	Condition	fit		509121	0					
ANR	509158	Identifier	fit		509121	0					
ANR	509159	CallExpression	"min ( width_ratio , height_ratio )"		509121	1					
ANR	509160	Callee	min		509121	0					
ANR	509161	Identifier	min		509121	0					
ANR	509162	ArgumentList	width_ratio		509121	1					
ANR	509163	Argument	width_ratio		509121	0					
ANR	509164	Identifier	width_ratio		509121	0					
ANR	509165	Argument	height_ratio		509121	1					
ANR	509166	Identifier	height_ratio		509121	0					
ANR	509167	CallExpression	"max ( width_ratio , height_ratio )"		509121	2					
ANR	509168	Callee	max		509121	0					
ANR	509169	Identifier	max		509121	0					
ANR	509170	ArgumentList	width_ratio		509121	1					
ANR	509171	Argument	width_ratio		509121	0					
ANR	509172	Identifier	width_ratio		509121	0					
ANR	509173	Argument	height_ratio		509121	1					
ANR	509174	Identifier	height_ratio		509121	0					
ANR	509175	ExpressionStatement	dev -> HWResolution [ 0 ] *= ratio	817:4:26983:27012	509121	3	True				
ANR	509176	AssignmentExpression	dev -> HWResolution [ 0 ] *= ratio		509121	0		*=			
ANR	509177	ArrayIndexing	dev -> HWResolution [ 0 ]		509121	0					
ANR	509178	PtrMemberAccess	dev -> HWResolution		509121	0					
ANR	509179	Identifier	dev		509121	0					
ANR	509180	Identifier	HWResolution		509121	1					
ANR	509181	PrimaryExpression	0		509121	1					
ANR	509182	Identifier	ratio		509121	1					
ANR	509183	ExpressionStatement	dev -> HWResolution [ 1 ] *= ratio	818:4:27018:27047	509121	4	True				
ANR	509184	AssignmentExpression	dev -> HWResolution [ 1 ] *= ratio		509121	0		*=			
ANR	509185	ArrayIndexing	dev -> HWResolution [ 1 ]		509121	0					
ANR	509186	PtrMemberAccess	dev -> HWResolution		509121	0					
ANR	509187	Identifier	dev		509121	0					
ANR	509188	Identifier	HWResolution		509121	1					
ANR	509189	PrimaryExpression	1		509121	1					
ANR	509190	Identifier	ratio		509121	1					
ANR	509191	ExpressionStatement	"gx_device_set_width_height ( dev , actual_width , actual_height )"	819:4:27053:27113	509121	5	True				
ANR	509192	CallExpression	"gx_device_set_width_height ( dev , actual_width , actual_height )"		509121	0					
ANR	509193	Callee	gx_device_set_width_height		509121	0					
ANR	509194	Identifier	gx_device_set_width_height		509121	0					
ANR	509195	ArgumentList	dev		509121	1					
ANR	509196	Argument	dev		509121	0					
ANR	509197	Identifier	dev		509121	0					
ANR	509198	Argument	actual_width		509121	1					
ANR	509199	Identifier	actual_width		509121	0					
ANR	509200	Argument	actual_height		509121	2					
ANR	509201	Identifier	actual_height		509121	0					
ANR	509202	ReturnStatement	return 0 ;	820:4:27119:27127	509121	6	True				
ANR	509203	PrimaryExpression	0		509121	0					
ANR	509204	ReturnType	int		509121	1					
ANR	509205	Identifier	gx_device_adjust_resolution		509121	2					
ANR	509206	ParameterList	"gx_device * dev , int actual_width , int actual_height , int fit"		509121	3					
ANR	509207	Parameter	gx_device * dev	808:28:26661:26675	509121	0	True				
ANR	509208	ParameterType	gx_device *		509121	0					
ANR	509209	Identifier	dev		509121	1					
ANR	509210	Parameter	int actual_width	809:28:26706:26721	509121	1	True				
ANR	509211	ParameterType	int		509121	0					
ANR	509212	Identifier	actual_width		509121	1					
ANR	509213	Parameter	int actual_height	809:46:26724:26740	509121	2	True				
ANR	509214	ParameterType	int		509121	0					
ANR	509215	Identifier	actual_height		509121	1					
ANR	509216	Parameter	int fit	809:65:26743:26749	509121	3	True				
ANR	509217	ParameterType	int		509121	0					
ANR	509218	Identifier	fit		509121	1					
ANR	509219	CFGEntryNode	ENTRY		509121		True				
ANR	509220	CFGExitNode	EXIT		509121		True				
ANR	509221	Symbol	* dev		509121						
ANR	509222	Symbol	max		509121						
ANR	509223	Symbol	dev -> height		509121						
ANR	509224	Symbol	actual_height		509121						
ANR	509225	Symbol	actual_width		509121						
ANR	509226	Symbol	* * dev		509121						
ANR	509227	Symbol	* dev -> HWResolution		509121						
ANR	509228	Symbol	dev -> HWResolution		509121						
ANR	509229	Symbol	fit		509121						
ANR	509230	Symbol	min		509121						
ANR	509231	Symbol	dev		509121						
ANR	509232	Symbol	dev -> width		509121						
ANR	509233	Symbol	width_ratio		509121						
ANR	509234	Symbol	height_ratio		509121						
ANR	509235	Symbol	ratio		509121						
ANR	509236	Function	gx_device_set_margins	826:0:27309:27667							
ANR	509237	FunctionDef	"gx_device_set_margins (gx_device * dev , const float * margins , bool move_origin)"		509236	0					
ANR	509238	CompoundStatement		829:0:27425:27667	509236	0					
ANR	509239	IdentifierDeclStatement	int i ;	830:4:27431:27436	509236	0	True				
ANR	509240	IdentifierDecl	i		509236	0					
ANR	509241	IdentifierDeclType	int		509236	0					
ANR	509242	Identifier	i		509236	1					
ANR	509243	ForStatement	for ( i = 0 ; i < 4 ; ++ i )		509236	1					
ANR	509244	ForInit	i = 0 ;	832:9:27448:27453	509236	0	True				
ANR	509245	AssignmentExpression	i = 0		509236	0		=			
ANR	509246	Identifier	i		509236	0					
ANR	509247	PrimaryExpression	0		509236	1					
ANR	509248	Condition	i < 4	832:16:27455:27459	509236	1	True				
ANR	509249	RelationalExpression	i < 4		509236	0		<			
ANR	509250	Identifier	i		509236	0					
ANR	509251	PrimaryExpression	4		509236	1					
ANR	509252	UnaryExpression	++ i	832:23:27462:27464	509236	2	True				
ANR	509253	IncDec	++		509236	0					
ANR	509254	Identifier	i		509236	1					
ANR	509255	ExpressionStatement	dev -> HWMargins [ i ] = margins [ i ] * 72.0	833:8:27475:27512	509236	3	True				
ANR	509256	AssignmentExpression	dev -> HWMargins [ i ] = margins [ i ] * 72.0		509236	0		=			
ANR	509257	ArrayIndexing	dev -> HWMargins [ i ]		509236	0					
ANR	509258	PtrMemberAccess	dev -> HWMargins		509236	0					
ANR	509259	Identifier	dev		509236	0					
ANR	509260	Identifier	HWMargins		509236	1					
ANR	509261	Identifier	i		509236	1					
ANR	509262	MultiplicativeExpression	margins [ i ] * 72.0		509236	1		*			
ANR	509263	ArrayIndexing	margins [ i ]		509236	0					
ANR	509264	Identifier	margins		509236	0					
ANR	509265	Identifier	i		509236	1					
ANR	509266	PrimaryExpression	72.0		509236	1					
ANR	509267	IfStatement	if ( move_origin )		509236	2					
ANR	509268	Condition	move_origin	834:8:27522:27532	509236	0	True				
ANR	509269	Identifier	move_origin		509236	0					
ANR	509270	CompoundStatement		6:21:109:109	509236	1					
ANR	509271	ExpressionStatement	dev -> Margins [ 0 ] = - margins [ 0 ] * dev -> HWResolution [ 0 ]	835:8:27545:27597	509236	0	True				
ANR	509272	AssignmentExpression	dev -> Margins [ 0 ] = - margins [ 0 ] * dev -> HWResolution [ 0 ]		509236	0		=			
ANR	509273	ArrayIndexing	dev -> Margins [ 0 ]		509236	0					
ANR	509274	PtrMemberAccess	dev -> Margins		509236	0					
ANR	509275	Identifier	dev		509236	0					
ANR	509276	Identifier	Margins		509236	1					
ANR	509277	PrimaryExpression	0		509236	1					
ANR	509278	MultiplicativeExpression	- margins [ 0 ] * dev -> HWResolution [ 0 ]		509236	1		*			
ANR	509279	UnaryOperationExpression	- margins [ 0 ]		509236	0					
ANR	509280	UnaryOperator	-		509236	0					
ANR	509281	ArrayIndexing	margins [ 0 ]		509236	1					
ANR	509282	Identifier	margins		509236	0					
ANR	509283	PrimaryExpression	0		509236	1					
ANR	509284	ArrayIndexing	dev -> HWResolution [ 0 ]		509236	1					
ANR	509285	PtrMemberAccess	dev -> HWResolution		509236	0					
ANR	509286	Identifier	dev		509236	0					
ANR	509287	Identifier	HWResolution		509236	1					
ANR	509288	PrimaryExpression	0		509236	1					
ANR	509289	ExpressionStatement	dev -> Margins [ 1 ] = - margins [ 3 ] * dev -> HWResolution [ 1 ]	836:8:27607:27659	509236	1	True				
ANR	509290	AssignmentExpression	dev -> Margins [ 1 ] = - margins [ 3 ] * dev -> HWResolution [ 1 ]		509236	0		=			
ANR	509291	ArrayIndexing	dev -> Margins [ 1 ]		509236	0					
ANR	509292	PtrMemberAccess	dev -> Margins		509236	0					
ANR	509293	Identifier	dev		509236	0					
ANR	509294	Identifier	Margins		509236	1					
ANR	509295	PrimaryExpression	1		509236	1					
ANR	509296	MultiplicativeExpression	- margins [ 3 ] * dev -> HWResolution [ 1 ]		509236	1		*			
ANR	509297	UnaryOperationExpression	- margins [ 3 ]		509236	0					
ANR	509298	UnaryOperator	-		509236	0					
ANR	509299	ArrayIndexing	margins [ 3 ]		509236	1					
ANR	509300	Identifier	margins		509236	0					
ANR	509301	PrimaryExpression	3		509236	1					
ANR	509302	ArrayIndexing	dev -> HWResolution [ 1 ]		509236	1					
ANR	509303	PtrMemberAccess	dev -> HWResolution		509236	0					
ANR	509304	Identifier	dev		509236	0					
ANR	509305	Identifier	HWResolution		509236	1					
ANR	509306	PrimaryExpression	1		509236	1					
ANR	509307	ReturnType	void		509236	1					
ANR	509308	Identifier	gx_device_set_margins		509236	2					
ANR	509309	ParameterList	"gx_device * dev , const float * margins , bool move_origin"		509236	3					
ANR	509310	Parameter	gx_device * dev	827:22:27336:27350	509236	0	True				
ANR	509311	ParameterType	gx_device *		509236	0					
ANR	509312	Identifier	dev		509236	1					
ANR	509313	Parameter	const float * margins	827:39:27353:27372	509236	1	True				
ANR	509314	ParameterType	const float *		509236	0					
ANR	509315	Identifier	margins		509236	1					
ANR	509316	Parameter	bool move_origin	828:22:27407:27422	509236	2	True				
ANR	509317	ParameterType	bool		509236	0					
ANR	509318	Identifier	move_origin		509236	1					
ANR	509319	CFGEntryNode	ENTRY		509236		True				
ANR	509320	CFGExitNode	EXIT		509236		True				
ANR	509321	Symbol	* dev		509236						
ANR	509322	Symbol	margins		509236						
ANR	509323	Symbol	dev -> HWMargins		509236						
ANR	509324	Symbol	i		509236						
ANR	509325	Symbol	* * dev		509236						
ANR	509326	Symbol	dev -> Margins		509236						
ANR	509327	Symbol	* dev -> HWResolution		509236						
ANR	509328	Symbol	* margins		509236						
ANR	509329	Symbol	dev -> HWResolution		509236						
ANR	509330	Symbol	* dev -> Margins		509236						
ANR	509331	Symbol	* i		509236						
ANR	509332	Symbol	dev		509236						
ANR	509333	Symbol	* dev -> HWMargins		509236						
ANR	509334	Symbol	move_origin		509236						
ANR	509335	Function	gx_device_set_hwsize_from_media	840:0:27670:28058							
ANR	509336	FunctionDef	gx_device_set_hwsize_from_media (gx_device * dev)		509335	0					
ANR	509337	CompoundStatement		842:0:27730:28058	509335	0					
ANR	509338	IdentifierDeclStatement	int rot = ( dev -> LeadingEdge & 1 ) ;	843:4:27736:27768	509335	0	True				
ANR	509339	IdentifierDecl	rot = ( dev -> LeadingEdge & 1 )		509335	0					
ANR	509340	IdentifierDeclType	int		509335	0					
ANR	509341	Identifier	rot		509335	1					
ANR	509342	AssignmentExpression	rot = ( dev -> LeadingEdge & 1 )		509335	2		=			
ANR	509343	Identifier	rot		509335	0					
ANR	509344	BitAndExpression	dev -> LeadingEdge & 1		509335	1		&			
ANR	509345	PtrMemberAccess	dev -> LeadingEdge		509335	0					
ANR	509346	Identifier	dev		509335	0					
ANR	509347	Identifier	LeadingEdge		509335	1					
ANR	509348	PrimaryExpression	1		509335	1					
ANR	509349	IdentifierDeclStatement	double rot_media_x = rot ? dev -> MediaSize [ 1 ] : dev -> MediaSize [ 0 ] ;	844:4:27774:27838	509335	1	True				
ANR	509350	IdentifierDecl	rot_media_x = rot ? dev -> MediaSize [ 1 ] : dev -> MediaSize [ 0 ]		509335	0					
ANR	509351	IdentifierDeclType	double		509335	0					
ANR	509352	Identifier	rot_media_x		509335	1					
ANR	509353	AssignmentExpression	rot_media_x = rot ? dev -> MediaSize [ 1 ] : dev -> MediaSize [ 0 ]		509335	2		=			
ANR	509354	Identifier	rot_media_x		509335	0					
ANR	509355	ConditionalExpression	rot ? dev -> MediaSize [ 1 ] : dev -> MediaSize [ 0 ]		509335	1					
ANR	509356	Condition	rot		509335	0					
ANR	509357	Identifier	rot		509335	0					
ANR	509358	ArrayIndexing	dev -> MediaSize [ 1 ]		509335	1					
ANR	509359	PtrMemberAccess	dev -> MediaSize		509335	0					
ANR	509360	Identifier	dev		509335	0					
ANR	509361	Identifier	MediaSize		509335	1					
ANR	509362	PrimaryExpression	1		509335	1					
ANR	509363	ArrayIndexing	dev -> MediaSize [ 0 ]		509335	2					
ANR	509364	PtrMemberAccess	dev -> MediaSize		509335	0					
ANR	509365	Identifier	dev		509335	0					
ANR	509366	Identifier	MediaSize		509335	1					
ANR	509367	PrimaryExpression	0		509335	1					
ANR	509368	IdentifierDeclStatement	double rot_media_y = rot ? dev -> MediaSize [ 0 ] : dev -> MediaSize [ 1 ] ;	845:4:27844:27908	509335	2	True				
ANR	509369	IdentifierDecl	rot_media_y = rot ? dev -> MediaSize [ 0 ] : dev -> MediaSize [ 1 ]		509335	0					
ANR	509370	IdentifierDeclType	double		509335	0					
ANR	509371	Identifier	rot_media_y		509335	1					
ANR	509372	AssignmentExpression	rot_media_y = rot ? dev -> MediaSize [ 0 ] : dev -> MediaSize [ 1 ]		509335	2		=			
ANR	509373	Identifier	rot_media_y		509335	0					
ANR	509374	ConditionalExpression	rot ? dev -> MediaSize [ 0 ] : dev -> MediaSize [ 1 ]		509335	1					
ANR	509375	Condition	rot		509335	0					
ANR	509376	Identifier	rot		509335	0					
ANR	509377	ArrayIndexing	dev -> MediaSize [ 0 ]		509335	1					
ANR	509378	PtrMemberAccess	dev -> MediaSize		509335	0					
ANR	509379	Identifier	dev		509335	0					
ANR	509380	Identifier	MediaSize		509335	1					
ANR	509381	PrimaryExpression	0		509335	1					
ANR	509382	ArrayIndexing	dev -> MediaSize [ 1 ]		509335	2					
ANR	509383	PtrMemberAccess	dev -> MediaSize		509335	0					
ANR	509384	Identifier	dev		509335	0					
ANR	509385	Identifier	MediaSize		509335	1					
ANR	509386	PrimaryExpression	1		509335	1					
ANR	509387	ExpressionStatement	dev -> width = ( int ) ( rot_media_x * dev -> HWResolution [ 0 ] / 72.0 + 0.5 )	847:4:27915:27982	509335	3	True				
ANR	509388	AssignmentExpression	dev -> width = ( int ) ( rot_media_x * dev -> HWResolution [ 0 ] / 72.0 + 0.5 )		509335	0		=			
ANR	509389	PtrMemberAccess	dev -> width		509335	0					
ANR	509390	Identifier	dev		509335	0					
ANR	509391	Identifier	width		509335	1					
ANR	509392	CastExpression	( int ) ( rot_media_x * dev -> HWResolution [ 0 ] / 72.0 + 0.5 )		509335	1					
ANR	509393	CastTarget	int		509335	0					
ANR	509394	AdditiveExpression	rot_media_x * dev -> HWResolution [ 0 ] / 72.0 + 0.5		509335	1		+			
ANR	509395	MultiplicativeExpression	rot_media_x * dev -> HWResolution [ 0 ] / 72.0		509335	0		*			
ANR	509396	Identifier	rot_media_x		509335	0					
ANR	509397	MultiplicativeExpression	dev -> HWResolution [ 0 ] / 72.0		509335	1		/			
ANR	509398	ArrayIndexing	dev -> HWResolution [ 0 ]		509335	0					
ANR	509399	PtrMemberAccess	dev -> HWResolution		509335	0					
ANR	509400	Identifier	dev		509335	0					
ANR	509401	Identifier	HWResolution		509335	1					
ANR	509402	PrimaryExpression	0		509335	1					
ANR	509403	PrimaryExpression	72.0		509335	1					
ANR	509404	PrimaryExpression	0.5		509335	1					
ANR	509405	ExpressionStatement	dev -> height = ( int ) ( rot_media_y * dev -> HWResolution [ 1 ] / 72.0 + 0.5 )	848:4:27988:28056	509335	4	True				
ANR	509406	AssignmentExpression	dev -> height = ( int ) ( rot_media_y * dev -> HWResolution [ 1 ] / 72.0 + 0.5 )		509335	0		=			
ANR	509407	PtrMemberAccess	dev -> height		509335	0					
ANR	509408	Identifier	dev		509335	0					
ANR	509409	Identifier	height		509335	1					
ANR	509410	CastExpression	( int ) ( rot_media_y * dev -> HWResolution [ 1 ] / 72.0 + 0.5 )		509335	1					
ANR	509411	CastTarget	int		509335	0					
ANR	509412	AdditiveExpression	rot_media_y * dev -> HWResolution [ 1 ] / 72.0 + 0.5		509335	1		+			
ANR	509413	MultiplicativeExpression	rot_media_y * dev -> HWResolution [ 1 ] / 72.0		509335	0		*			
ANR	509414	Identifier	rot_media_y		509335	0					
ANR	509415	MultiplicativeExpression	dev -> HWResolution [ 1 ] / 72.0		509335	1		/			
ANR	509416	ArrayIndexing	dev -> HWResolution [ 1 ]		509335	0					
ANR	509417	PtrMemberAccess	dev -> HWResolution		509335	0					
ANR	509418	Identifier	dev		509335	0					
ANR	509419	Identifier	HWResolution		509335	1					
ANR	509420	PrimaryExpression	1		509335	1					
ANR	509421	PrimaryExpression	72.0		509335	1					
ANR	509422	PrimaryExpression	0.5		509335	1					
ANR	509423	ReturnType	static void		509335	1					
ANR	509424	Identifier	gx_device_set_hwsize_from_media		509335	2					
ANR	509425	ParameterList	gx_device * dev		509335	3					
ANR	509426	Parameter	gx_device * dev	841:32:27714:27727	509335	0	True				
ANR	509427	ParameterType	gx_device *		509335	0					
ANR	509428	Identifier	dev		509335	1					
ANR	509429	CFGEntryNode	ENTRY		509335		True				
ANR	509430	CFGExitNode	EXIT		509335		True				
ANR	509431	Symbol	* dev		509335						
ANR	509432	Symbol	rot_media_x		509335						
ANR	509433	Symbol	rot_media_y		509335						
ANR	509434	Symbol	dev -> height		509335						
ANR	509435	Symbol	* * dev		509335						
ANR	509436	Symbol	* dev -> HWResolution		509335						
ANR	509437	Symbol	dev -> HWResolution		509335						
ANR	509438	Symbol	* dev -> MediaSize		509335						
ANR	509439	Symbol	dev		509335						
ANR	509440	Symbol	dev -> width		509335						
ANR	509441	Symbol	rot		509335						
ANR	509442	Symbol	dev -> LeadingEdge		509335						
ANR	509443	Symbol	dev -> MediaSize		509335						
ANR	509444	Function	gx_device_set_media_from_hwsize	851:0:28061:28435							
ANR	509445	FunctionDef	gx_device_set_media_from_hwsize (gx_device * dev)		509444	0					
ANR	509446	CompoundStatement		853:0:28121:28435	509444	0					
ANR	509447	IdentifierDeclStatement	int rot = ( dev -> LeadingEdge & 1 ) ;	854:4:28127:28159	509444	0	True				
ANR	509448	IdentifierDecl	rot = ( dev -> LeadingEdge & 1 )		509444	0					
ANR	509449	IdentifierDeclType	int		509444	0					
ANR	509450	Identifier	rot		509444	1					
ANR	509451	AssignmentExpression	rot = ( dev -> LeadingEdge & 1 )		509444	2		=			
ANR	509452	Identifier	rot		509444	0					
ANR	509453	BitAndExpression	dev -> LeadingEdge & 1		509444	1		&			
ANR	509454	PtrMemberAccess	dev -> LeadingEdge		509444	0					
ANR	509455	Identifier	dev		509444	0					
ANR	509456	Identifier	LeadingEdge		509444	1					
ANR	509457	PrimaryExpression	1		509444	1					
ANR	509458	IdentifierDeclStatement	double x = dev -> width * 72.0 / dev -> HWResolution [ 0 ] ;	855:4:28165:28216	509444	1	True				
ANR	509459	IdentifierDecl	x = dev -> width * 72.0 / dev -> HWResolution [ 0 ]		509444	0					
ANR	509460	IdentifierDeclType	double		509444	0					
ANR	509461	Identifier	x		509444	1					
ANR	509462	AssignmentExpression	x = dev -> width * 72.0 / dev -> HWResolution [ 0 ]		509444	2		=			
ANR	509463	Identifier	x		509444	0					
ANR	509464	MultiplicativeExpression	dev -> width * 72.0 / dev -> HWResolution [ 0 ]		509444	1		*			
ANR	509465	PtrMemberAccess	dev -> width		509444	0					
ANR	509466	Identifier	dev		509444	0					
ANR	509467	Identifier	width		509444	1					
ANR	509468	MultiplicativeExpression	72.0 / dev -> HWResolution [ 0 ]		509444	1		/			
ANR	509469	PrimaryExpression	72.0		509444	0					
ANR	509470	ArrayIndexing	dev -> HWResolution [ 0 ]		509444	1					
ANR	509471	PtrMemberAccess	dev -> HWResolution		509444	0					
ANR	509472	Identifier	dev		509444	0					
ANR	509473	Identifier	HWResolution		509444	1					
ANR	509474	PrimaryExpression	0		509444	1					
ANR	509475	IdentifierDeclStatement	double y = dev -> height * 72.0 / dev -> HWResolution [ 1 ] ;	856:4:28222:28274	509444	2	True				
ANR	509476	IdentifierDecl	y = dev -> height * 72.0 / dev -> HWResolution [ 1 ]		509444	0					
ANR	509477	IdentifierDeclType	double		509444	0					
ANR	509478	Identifier	y		509444	1					
ANR	509479	AssignmentExpression	y = dev -> height * 72.0 / dev -> HWResolution [ 1 ]		509444	2		=			
ANR	509480	Identifier	y		509444	0					
ANR	509481	MultiplicativeExpression	dev -> height * 72.0 / dev -> HWResolution [ 1 ]		509444	1		*			
ANR	509482	PtrMemberAccess	dev -> height		509444	0					
ANR	509483	Identifier	dev		509444	0					
ANR	509484	Identifier	height		509444	1					
ANR	509485	MultiplicativeExpression	72.0 / dev -> HWResolution [ 1 ]		509444	1		/			
ANR	509486	PrimaryExpression	72.0		509444	0					
ANR	509487	ArrayIndexing	dev -> HWResolution [ 1 ]		509444	1					
ANR	509488	PtrMemberAccess	dev -> HWResolution		509444	0					
ANR	509489	Identifier	dev		509444	0					
ANR	509490	Identifier	HWResolution		509444	1					
ANR	509491	PrimaryExpression	1		509444	1					
ANR	509492	IfStatement	if ( rot )		509444	3					
ANR	509493	Condition	rot	858:8:28285:28287	509444	0	True				
ANR	509494	Identifier	rot		509444	0					
ANR	509495	CompoundStatement		6:13:168:168	509444	1					
ANR	509496	ExpressionStatement	dev -> MediaSize [ 1 ] = x	859:8:28300:28321	509444	0	True				
ANR	509497	AssignmentExpression	dev -> MediaSize [ 1 ] = x		509444	0		=			
ANR	509498	ArrayIndexing	dev -> MediaSize [ 1 ]		509444	0					
ANR	509499	PtrMemberAccess	dev -> MediaSize		509444	0					
ANR	509500	Identifier	dev		509444	0					
ANR	509501	Identifier	MediaSize		509444	1					
ANR	509502	PrimaryExpression	1		509444	1					
ANR	509503	Identifier	x		509444	1					
ANR	509504	ExpressionStatement	dev -> MediaSize [ 0 ] = y	860:8:28331:28352	509444	1	True				
ANR	509505	AssignmentExpression	dev -> MediaSize [ 0 ] = y		509444	0		=			
ANR	509506	ArrayIndexing	dev -> MediaSize [ 0 ]		509444	0					
ANR	509507	PtrMemberAccess	dev -> MediaSize		509444	0					
ANR	509508	Identifier	dev		509444	0					
ANR	509509	Identifier	MediaSize		509444	1					
ANR	509510	PrimaryExpression	0		509444	1					
ANR	509511	Identifier	y		509444	1					
ANR	509512	ElseStatement	else		509444	0					
ANR	509513	CompoundStatement		9:11:243:243	509444	0					
ANR	509514	ExpressionStatement	dev -> MediaSize [ 0 ] = x	862:8:28375:28396	509444	0	True				
ANR	509515	AssignmentExpression	dev -> MediaSize [ 0 ] = x		509444	0		=			
ANR	509516	ArrayIndexing	dev -> MediaSize [ 0 ]		509444	0					
ANR	509517	PtrMemberAccess	dev -> MediaSize		509444	0					
ANR	509518	Identifier	dev		509444	0					
ANR	509519	Identifier	MediaSize		509444	1					
ANR	509520	PrimaryExpression	0		509444	1					
ANR	509521	Identifier	x		509444	1					
ANR	509522	ExpressionStatement	dev -> MediaSize [ 1 ] = y	863:8:28406:28427	509444	1	True				
ANR	509523	AssignmentExpression	dev -> MediaSize [ 1 ] = y		509444	0		=			
ANR	509524	ArrayIndexing	dev -> MediaSize [ 1 ]		509444	0					
ANR	509525	PtrMemberAccess	dev -> MediaSize		509444	0					
ANR	509526	Identifier	dev		509444	0					
ANR	509527	Identifier	MediaSize		509444	1					
ANR	509528	PrimaryExpression	1		509444	1					
ANR	509529	Identifier	y		509444	1					
ANR	509530	ReturnType	static void		509444	1					
ANR	509531	Identifier	gx_device_set_media_from_hwsize		509444	2					
ANR	509532	ParameterList	gx_device * dev		509444	3					
ANR	509533	Parameter	gx_device * dev	852:32:28105:28118	509444	0	True				
ANR	509534	ParameterType	gx_device *		509444	0					
ANR	509535	Identifier	dev		509444	1					
ANR	509536	CFGEntryNode	ENTRY		509444		True				
ANR	509537	CFGExitNode	EXIT		509444		True				
ANR	509538	Symbol	* dev		509444						
ANR	509539	Symbol	dev -> height		509444						
ANR	509540	Symbol	* * dev		509444						
ANR	509541	Symbol	* dev -> HWResolution		509444						
ANR	509542	Symbol	dev -> HWResolution		509444						
ANR	509543	Symbol	* dev -> MediaSize		509444						
ANR	509544	Symbol	dev		509444						
ANR	509545	Symbol	dev -> width		509444						
ANR	509546	Symbol	rot		509444						
ANR	509547	Symbol	dev -> LeadingEdge		509444						
ANR	509548	Symbol	x		509444						
ANR	509549	Symbol	dev -> MediaSize		509444						
ANR	509550	Symbol	y		509444						
ANR	509551	Function	gx_device_set_width_height	868:0:28511:28677							
ANR	509552	FunctionDef	"gx_device_set_width_height (gx_device * dev , int width , int height)"		509551	0					
ANR	509553	CompoundStatement		870:0:28583:28677	509551	0					
ANR	509554	ExpressionStatement	dev -> width = width	871:4:28589:28607	509551	0	True				
ANR	509555	AssignmentExpression	dev -> width = width		509551	0		=			
ANR	509556	PtrMemberAccess	dev -> width		509551	0					
ANR	509557	Identifier	dev		509551	0					
ANR	509558	Identifier	width		509551	1					
ANR	509559	Identifier	width		509551	1					
ANR	509560	ExpressionStatement	dev -> height = height	872:4:28613:28633	509551	1	True				
ANR	509561	AssignmentExpression	dev -> height = height		509551	0		=			
ANR	509562	PtrMemberAccess	dev -> height		509551	0					
ANR	509563	Identifier	dev		509551	0					
ANR	509564	Identifier	height		509551	1					
ANR	509565	Identifier	height		509551	1					
ANR	509566	ExpressionStatement	gx_device_set_media_from_hwsize ( dev )	873:4:28639:28675	509551	2	True				
ANR	509567	CallExpression	gx_device_set_media_from_hwsize ( dev )		509551	0					
ANR	509568	Callee	gx_device_set_media_from_hwsize		509551	0					
ANR	509569	Identifier	gx_device_set_media_from_hwsize		509551	0					
ANR	509570	ArgumentList	dev		509551	1					
ANR	509571	Argument	dev		509551	0					
ANR	509572	Identifier	dev		509551	0					
ANR	509573	ReturnType	void		509551	1					
ANR	509574	Identifier	gx_device_set_width_height		509551	2					
ANR	509575	ParameterList	"gx_device * dev , int width , int height"		509551	3					
ANR	509576	Parameter	gx_device * dev	869:27:28543:28557	509551	0	True				
ANR	509577	ParameterType	gx_device *		509551	0					
ANR	509578	Identifier	dev		509551	1					
ANR	509579	Parameter	int width	869:44:28560:28568	509551	1	True				
ANR	509580	ParameterType	int		509551	0					
ANR	509581	Identifier	width		509551	1					
ANR	509582	Parameter	int height	869:55:28571:28580	509551	2	True				
ANR	509583	ParameterType	int		509551	0					
ANR	509584	Identifier	height		509551	1					
ANR	509585	CFGEntryNode	ENTRY		509551		True				
ANR	509586	CFGExitNode	EXIT		509551		True				
ANR	509587	Symbol	* dev		509551						
ANR	509588	Symbol	dev		509551						
ANR	509589	Symbol	dev -> width		509551						
ANR	509590	Symbol	dev -> height		509551						
ANR	509591	Symbol	width		509551						
ANR	509592	Symbol	height		509551						
ANR	509593	Function	gx_device_set_resolution	877:0:28754:28941							
ANR	509594	FunctionDef	"gx_device_set_resolution (gx_device * dev , double x_dpi , double y_dpi)"		509593	0					
ANR	509595	CompoundStatement		879:0:28829:28941	509593	0					
ANR	509596	ExpressionStatement	dev -> HWResolution [ 0 ] = x_dpi	880:4:28835:28863	509593	0	True				
ANR	509597	AssignmentExpression	dev -> HWResolution [ 0 ] = x_dpi		509593	0		=			
ANR	509598	ArrayIndexing	dev -> HWResolution [ 0 ]		509593	0					
ANR	509599	PtrMemberAccess	dev -> HWResolution		509593	0					
ANR	509600	Identifier	dev		509593	0					
ANR	509601	Identifier	HWResolution		509593	1					
ANR	509602	PrimaryExpression	0		509593	1					
ANR	509603	Identifier	x_dpi		509593	1					
ANR	509604	ExpressionStatement	dev -> HWResolution [ 1 ] = y_dpi	881:4:28869:28897	509593	1	True				
ANR	509605	AssignmentExpression	dev -> HWResolution [ 1 ] = y_dpi		509593	0		=			
ANR	509606	ArrayIndexing	dev -> HWResolution [ 1 ]		509593	0					
ANR	509607	PtrMemberAccess	dev -> HWResolution		509593	0					
ANR	509608	Identifier	dev		509593	0					
ANR	509609	Identifier	HWResolution		509593	1					
ANR	509610	PrimaryExpression	1		509593	1					
ANR	509611	Identifier	y_dpi		509593	1					
ANR	509612	ExpressionStatement	gx_device_set_hwsize_from_media ( dev )	882:4:28903:28939	509593	2	True				
ANR	509613	CallExpression	gx_device_set_hwsize_from_media ( dev )		509593	0					
ANR	509614	Callee	gx_device_set_hwsize_from_media		509593	0					
ANR	509615	Identifier	gx_device_set_hwsize_from_media		509593	0					
ANR	509616	ArgumentList	dev		509593	1					
ANR	509617	Argument	dev		509593	0					
ANR	509618	Identifier	dev		509593	0					
ANR	509619	ReturnType	void		509593	1					
ANR	509620	Identifier	gx_device_set_resolution		509593	2					
ANR	509621	ParameterList	"gx_device * dev , double x_dpi , double y_dpi"		509593	3					
ANR	509622	Parameter	gx_device * dev	878:25:28784:28798	509593	0	True				
ANR	509623	ParameterType	gx_device *		509593	0					
ANR	509624	Identifier	dev		509593	1					
ANR	509625	Parameter	double x_dpi	878:42:28801:28812	509593	1	True				
ANR	509626	ParameterType	double		509593	0					
ANR	509627	Identifier	x_dpi		509593	1					
ANR	509628	Parameter	double y_dpi	878:56:28815:28826	509593	2	True				
ANR	509629	ParameterType	double		509593	0					
ANR	509630	Identifier	y_dpi		509593	1					
ANR	509631	CFGEntryNode	ENTRY		509593		True				
ANR	509632	CFGExitNode	EXIT		509593		True				
ANR	509633	Symbol	* dev		509593						
ANR	509634	Symbol	x_dpi		509593						
ANR	509635	Symbol	y_dpi		509593						
ANR	509636	Symbol	dev		509593						
ANR	509637	Symbol	* * dev		509593						
ANR	509638	Symbol	* dev -> HWResolution		509593						
ANR	509639	Symbol	dev -> HWResolution		509593						
ANR	509640	Function	gx_device_set_media_size	886:0:29017:29224							
ANR	509641	FunctionDef	"gx_device_set_media_size (gx_device * dev , double media_width , double media_height)"		509640	0					
ANR	509642	CompoundStatement		888:0:29105:29224	509640	0					
ANR	509643	ExpressionStatement	dev -> MediaSize [ 0 ] = media_width	889:4:29111:29142	509640	0	True				
ANR	509644	AssignmentExpression	dev -> MediaSize [ 0 ] = media_width		509640	0		=			
ANR	509645	ArrayIndexing	dev -> MediaSize [ 0 ]		509640	0					
ANR	509646	PtrMemberAccess	dev -> MediaSize		509640	0					
ANR	509647	Identifier	dev		509640	0					
ANR	509648	Identifier	MediaSize		509640	1					
ANR	509649	PrimaryExpression	0		509640	1					
ANR	509650	Identifier	media_width		509640	1					
ANR	509651	ExpressionStatement	dev -> MediaSize [ 1 ] = media_height	890:4:29148:29180	509640	1	True				
ANR	509652	AssignmentExpression	dev -> MediaSize [ 1 ] = media_height		509640	0		=			
ANR	509653	ArrayIndexing	dev -> MediaSize [ 1 ]		509640	0					
ANR	509654	PtrMemberAccess	dev -> MediaSize		509640	0					
ANR	509655	Identifier	dev		509640	0					
ANR	509656	Identifier	MediaSize		509640	1					
ANR	509657	PrimaryExpression	1		509640	1					
ANR	509658	Identifier	media_height		509640	1					
ANR	509659	ExpressionStatement	gx_device_set_hwsize_from_media ( dev )	891:4:29186:29222	509640	2	True				
ANR	509660	CallExpression	gx_device_set_hwsize_from_media ( dev )		509640	0					
ANR	509661	Callee	gx_device_set_hwsize_from_media		509640	0					
ANR	509662	Identifier	gx_device_set_hwsize_from_media		509640	0					
ANR	509663	ArgumentList	dev		509640	1					
ANR	509664	Argument	dev		509640	0					
ANR	509665	Identifier	dev		509640	0					
ANR	509666	ReturnType	void		509640	1					
ANR	509667	Identifier	gx_device_set_media_size		509640	2					
ANR	509668	ParameterList	"gx_device * dev , double media_width , double media_height"		509640	3					
ANR	509669	Parameter	gx_device * dev	887:25:29047:29061	509640	0	True				
ANR	509670	ParameterType	gx_device *		509640	0					
ANR	509671	Identifier	dev		509640	1					
ANR	509672	Parameter	double media_width	887:42:29064:29081	509640	1	True				
ANR	509673	ParameterType	double		509640	0					
ANR	509674	Identifier	media_width		509640	1					
ANR	509675	Parameter	double media_height	887:62:29084:29102	509640	2	True				
ANR	509676	ParameterType	double		509640	0					
ANR	509677	Identifier	media_height		509640	1					
ANR	509678	CFGEntryNode	ENTRY		509640		True				
ANR	509679	CFGExitNode	EXIT		509640		True				
ANR	509680	Symbol	* dev		509640						
ANR	509681	Symbol	* dev -> MediaSize		509640						
ANR	509682	Symbol	dev		509640						
ANR	509683	Symbol	media_height		509640						
ANR	509684	Symbol	dev -> MediaSize		509640						
ANR	509685	Symbol	* * dev		509640						
ANR	509686	Symbol	media_width		509640						
ANR	509687	Function	gx_device_copy_color_procs	898:0:29368:31114							
ANR	509688	FunctionDef	"gx_device_copy_color_procs (gx_device * dev , const gx_device * target)"		509687	0					
ANR	509689	CompoundStatement		900:0:29441:31114	509687	0					
ANR	509690	ExpressionStatement	"dev_proc_map_cmyk_color ( ( * from_cmyk ) ) = dev_proc ( dev , map_cmyk_color )"	901:4:29447:29524	509687	0	True				
ANR	509691	AssignmentExpression	"dev_proc_map_cmyk_color ( ( * from_cmyk ) ) = dev_proc ( dev , map_cmyk_color )"		509687	0		=			
ANR	509692	CallExpression	dev_proc_map_cmyk_color ( ( * from_cmyk ) )		509687	0					
ANR	509693	Callee	dev_proc_map_cmyk_color		509687	0					
ANR	509694	Identifier	dev_proc_map_cmyk_color		509687	0					
ANR	509695	ArgumentList	* from_cmyk		509687	1					
ANR	509696	Argument	* from_cmyk		509687	0					
ANR	509697	UnaryOperationExpression	* from_cmyk		509687	0					
ANR	509698	UnaryOperator	*		509687	0					
ANR	509699	Identifier	from_cmyk		509687	1					
ANR	509700	CallExpression	"dev_proc ( dev , map_cmyk_color )"		509687	1					
ANR	509701	Callee	dev_proc		509687	0					
ANR	509702	Identifier	dev_proc		509687	0					
ANR	509703	ArgumentList	dev		509687	1					
ANR	509704	Argument	dev		509687	0					
ANR	509705	Identifier	dev		509687	0					
ANR	509706	Argument	map_cmyk_color		509687	1					
ANR	509707	Identifier	map_cmyk_color		509687	0					
ANR	509708	ExpressionStatement	"dev_proc_map_rgb_color ( ( * from_rgb ) ) = dev_proc ( dev , map_rgb_color )"	903:4:29530:29604	509687	1	True				
ANR	509709	AssignmentExpression	"dev_proc_map_rgb_color ( ( * from_rgb ) ) = dev_proc ( dev , map_rgb_color )"		509687	0		=			
ANR	509710	CallExpression	dev_proc_map_rgb_color ( ( * from_rgb ) )		509687	0					
ANR	509711	Callee	dev_proc_map_rgb_color		509687	0					
ANR	509712	Identifier	dev_proc_map_rgb_color		509687	0					
ANR	509713	ArgumentList	* from_rgb		509687	1					
ANR	509714	Argument	* from_rgb		509687	0					
ANR	509715	UnaryOperationExpression	* from_rgb		509687	0					
ANR	509716	UnaryOperator	*		509687	0					
ANR	509717	Identifier	from_rgb		509687	1					
ANR	509718	CallExpression	"dev_proc ( dev , map_rgb_color )"		509687	1					
ANR	509719	Callee	dev_proc		509687	0					
ANR	509720	Identifier	dev_proc		509687	0					
ANR	509721	ArgumentList	dev		509687	1					
ANR	509722	Argument	dev		509687	0					
ANR	509723	Identifier	dev		509687	0					
ANR	509724	Argument	map_rgb_color		509687	1					
ANR	509725	Identifier	map_rgb_color		509687	0					
ANR	509726	ExpressionStatement	"dev_proc_map_color_rgb ( ( * to_rgb ) ) = dev_proc ( dev , map_color_rgb )"	905:4:29610:29682	509687	2	True				
ANR	509727	AssignmentExpression	"dev_proc_map_color_rgb ( ( * to_rgb ) ) = dev_proc ( dev , map_color_rgb )"		509687	0		=			
ANR	509728	CallExpression	dev_proc_map_color_rgb ( ( * to_rgb ) )		509687	0					
ANR	509729	Callee	dev_proc_map_color_rgb		509687	0					
ANR	509730	Identifier	dev_proc_map_color_rgb		509687	0					
ANR	509731	ArgumentList	* to_rgb		509687	1					
ANR	509732	Argument	* to_rgb		509687	0					
ANR	509733	UnaryOperationExpression	* to_rgb		509687	0					
ANR	509734	UnaryOperator	*		509687	0					
ANR	509735	Identifier	to_rgb		509687	1					
ANR	509736	CallExpression	"dev_proc ( dev , map_color_rgb )"		509687	1					
ANR	509737	Callee	dev_proc		509687	0					
ANR	509738	Identifier	dev_proc		509687	0					
ANR	509739	ArgumentList	dev		509687	1					
ANR	509740	Argument	dev		509687	0					
ANR	509741	Identifier	dev		509687	0					
ANR	509742	Argument	map_color_rgb		509687	1					
ANR	509743	Identifier	map_color_rgb		509687	0					
ANR	509744	IfStatement	if ( from_cmyk == gx_forward_map_cmyk_color || from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color )		509687	3					
ANR	509745	Condition	from_cmyk == gx_forward_map_cmyk_color || from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color	913:8:29950:30085	509687	0	True				
ANR	509746	OrExpression	from_cmyk == gx_forward_map_cmyk_color || from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color		509687	0		||			
ANR	509747	EqualityExpression	from_cmyk == gx_forward_map_cmyk_color		509687	0		==			
ANR	509748	Identifier	from_cmyk		509687	0					
ANR	509749	Identifier	gx_forward_map_cmyk_color		509687	1					
ANR	509750	OrExpression	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color		509687	1		||			
ANR	509751	EqualityExpression	from_cmyk == cmyk_1bit_map_cmyk_color		509687	0		==			
ANR	509752	Identifier	from_cmyk		509687	0					
ANR	509753	Identifier	cmyk_1bit_map_cmyk_color		509687	1					
ANR	509754	EqualityExpression	from_cmyk == cmyk_8bit_map_cmyk_color		509687	1		==			
ANR	509755	Identifier	from_cmyk		509687	0					
ANR	509756	Identifier	cmyk_8bit_map_cmyk_color		509687	1					
ANR	509757	CompoundStatement		16:47:646:646	509687	1					
ANR	509758	ExpressionStatement	"from_cmyk = dev_proc ( target , map_cmyk_color )"	916:8:30098:30142	509687	0	True				
ANR	509759	AssignmentExpression	"from_cmyk = dev_proc ( target , map_cmyk_color )"		509687	0		=			
ANR	509760	Identifier	from_cmyk		509687	0					
ANR	509761	CallExpression	"dev_proc ( target , map_cmyk_color )"		509687	1					
ANR	509762	Callee	dev_proc		509687	0					
ANR	509763	Identifier	dev_proc		509687	0					
ANR	509764	ArgumentList	target		509687	1					
ANR	509765	Argument	target		509687	0					
ANR	509766	Identifier	target		509687	0					
ANR	509767	Argument	map_cmyk_color		509687	1					
ANR	509768	Identifier	map_cmyk_color		509687	0					
ANR	509769	ExpressionStatement	"set_dev_proc ( dev , map_cmyk_color , ( from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color ? from_cmyk : gx_forward_map_cmyk_color ) )"	917:8:30152:30372	509687	1	True				
ANR	509770	CallExpression	"set_dev_proc ( dev , map_cmyk_color , ( from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color ? from_cmyk : gx_forward_map_cmyk_color ) )"		509687	0					
ANR	509771	Callee	set_dev_proc		509687	0					
ANR	509772	Identifier	set_dev_proc		509687	0					
ANR	509773	ArgumentList	dev		509687	1					
ANR	509774	Argument	dev		509687	0					
ANR	509775	Identifier	dev		509687	0					
ANR	509776	Argument	map_cmyk_color		509687	1					
ANR	509777	Identifier	map_cmyk_color		509687	0					
ANR	509778	Argument	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color ? from_cmyk : gx_forward_map_cmyk_color		509687	2					
ANR	509779	ConditionalExpression	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color ? from_cmyk : gx_forward_map_cmyk_color		509687	0					
ANR	509780	Condition	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color		509687	0					
ANR	509781	OrExpression	from_cmyk == cmyk_1bit_map_cmyk_color || from_cmyk == cmyk_8bit_map_cmyk_color		509687	0		||			
ANR	509782	EqualityExpression	from_cmyk == cmyk_1bit_map_cmyk_color		509687	0		==			
ANR	509783	Identifier	from_cmyk		509687	0					
ANR	509784	Identifier	cmyk_1bit_map_cmyk_color		509687	1					
ANR	509785	EqualityExpression	from_cmyk == cmyk_8bit_map_cmyk_color		509687	1		==			
ANR	509786	Identifier	from_cmyk		509687	0					
ANR	509787	Identifier	cmyk_8bit_map_cmyk_color		509687	1					
ANR	509788	Identifier	from_cmyk		509687	1					
ANR	509789	Identifier	gx_forward_map_cmyk_color		509687	2					
ANR	509790	IfStatement	if ( from_rgb == gx_forward_map_rgb_color || from_rgb == gx_default_rgb_map_rgb_color )		509687	4					
ANR	509791	Condition	from_rgb == gx_forward_map_rgb_color || from_rgb == gx_default_rgb_map_rgb_color	922:8:30388:30475	509687	0	True				
ANR	509792	OrExpression	from_rgb == gx_forward_map_rgb_color || from_rgb == gx_default_rgb_map_rgb_color		509687	0		||			
ANR	509793	EqualityExpression	from_rgb == gx_forward_map_rgb_color		509687	0		==			
ANR	509794	Identifier	from_rgb		509687	0					
ANR	509795	Identifier	gx_forward_map_rgb_color		509687	1					
ANR	509796	EqualityExpression	from_rgb == gx_default_rgb_map_rgb_color		509687	1		==			
ANR	509797	Identifier	from_rgb		509687	0					
ANR	509798	Identifier	gx_default_rgb_map_rgb_color		509687	1					
ANR	509799	CompoundStatement		24:50:1036:1036	509687	1					
ANR	509800	ExpressionStatement	"from_rgb = dev_proc ( target , map_rgb_color )"	924:8:30488:30530	509687	0	True				
ANR	509801	AssignmentExpression	"from_rgb = dev_proc ( target , map_rgb_color )"		509687	0		=			
ANR	509802	Identifier	from_rgb		509687	0					
ANR	509803	CallExpression	"dev_proc ( target , map_rgb_color )"		509687	1					
ANR	509804	Callee	dev_proc		509687	0					
ANR	509805	Identifier	dev_proc		509687	0					
ANR	509806	ArgumentList	target		509687	1					
ANR	509807	Argument	target		509687	0					
ANR	509808	Identifier	target		509687	0					
ANR	509809	Argument	map_rgb_color		509687	1					
ANR	509810	Identifier	map_rgb_color		509687	0					
ANR	509811	ExpressionStatement	"set_dev_proc ( dev , map_rgb_color , ( from_rgb == gx_default_rgb_map_rgb_color ? from_rgb : gx_forward_map_rgb_color ) )"	925:8:30540:30697	509687	1	True				
ANR	509812	CallExpression	"set_dev_proc ( dev , map_rgb_color , ( from_rgb == gx_default_rgb_map_rgb_color ? from_rgb : gx_forward_map_rgb_color ) )"		509687	0					
ANR	509813	Callee	set_dev_proc		509687	0					
ANR	509814	Identifier	set_dev_proc		509687	0					
ANR	509815	ArgumentList	dev		509687	1					
ANR	509816	Argument	dev		509687	0					
ANR	509817	Identifier	dev		509687	0					
ANR	509818	Argument	map_rgb_color		509687	1					
ANR	509819	Identifier	map_rgb_color		509687	0					
ANR	509820	Argument	from_rgb == gx_default_rgb_map_rgb_color ? from_rgb : gx_forward_map_rgb_color		509687	2					
ANR	509821	ConditionalExpression	from_rgb == gx_default_rgb_map_rgb_color ? from_rgb : gx_forward_map_rgb_color		509687	0					
ANR	509822	Condition	from_rgb == gx_default_rgb_map_rgb_color		509687	0					
ANR	509823	EqualityExpression	from_rgb == gx_default_rgb_map_rgb_color		509687	0		==			
ANR	509824	Identifier	from_rgb		509687	0					
ANR	509825	Identifier	gx_default_rgb_map_rgb_color		509687	1					
ANR	509826	Identifier	from_rgb		509687	1					
ANR	509827	Identifier	gx_forward_map_rgb_color		509687	2					
ANR	509828	IfStatement	if ( to_rgb == gx_forward_map_color_rgb || to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb )		509687	5					
ANR	509829	Condition	to_rgb == gx_forward_map_color_rgb || to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb	929:8:30713:30836	509687	0	True				
ANR	509830	OrExpression	to_rgb == gx_forward_map_color_rgb || to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb		509687	0		||			
ANR	509831	EqualityExpression	to_rgb == gx_forward_map_color_rgb		509687	0		==			
ANR	509832	Identifier	to_rgb		509687	0					
ANR	509833	Identifier	gx_forward_map_color_rgb		509687	1					
ANR	509834	OrExpression	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb		509687	1		||			
ANR	509835	EqualityExpression	to_rgb == cmyk_1bit_map_color_rgb		509687	0		==			
ANR	509836	Identifier	to_rgb		509687	0					
ANR	509837	Identifier	cmyk_1bit_map_color_rgb		509687	1					
ANR	509838	EqualityExpression	to_rgb == cmyk_8bit_map_color_rgb		509687	1		==			
ANR	509839	Identifier	to_rgb		509687	0					
ANR	509840	Identifier	cmyk_8bit_map_color_rgb		509687	1					
ANR	509841	CompoundStatement		32:43:1397:1397	509687	1					
ANR	509842	ExpressionStatement	"to_rgb = dev_proc ( target , map_color_rgb )"	932:8:30849:30889	509687	0	True				
ANR	509843	AssignmentExpression	"to_rgb = dev_proc ( target , map_color_rgb )"		509687	0		=			
ANR	509844	Identifier	to_rgb		509687	0					
ANR	509845	CallExpression	"dev_proc ( target , map_color_rgb )"		509687	1					
ANR	509846	Callee	dev_proc		509687	0					
ANR	509847	Identifier	dev_proc		509687	0					
ANR	509848	ArgumentList	target		509687	1					
ANR	509849	Argument	target		509687	0					
ANR	509850	Identifier	target		509687	0					
ANR	509851	Argument	map_color_rgb		509687	1					
ANR	509852	Identifier	map_color_rgb		509687	0					
ANR	509853	ExpressionStatement	"set_dev_proc ( dev , map_color_rgb , ( to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb ? to_rgb : gx_forward_map_color_rgb ) )"	933:8:30899:31106	509687	1	True				
ANR	509854	CallExpression	"set_dev_proc ( dev , map_color_rgb , ( to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb ? to_rgb : gx_forward_map_color_rgb ) )"		509687	0					
ANR	509855	Callee	set_dev_proc		509687	0					
ANR	509856	Identifier	set_dev_proc		509687	0					
ANR	509857	ArgumentList	dev		509687	1					
ANR	509858	Argument	dev		509687	0					
ANR	509859	Identifier	dev		509687	0					
ANR	509860	Argument	map_color_rgb		509687	1					
ANR	509861	Identifier	map_color_rgb		509687	0					
ANR	509862	Argument	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb ? to_rgb : gx_forward_map_color_rgb		509687	2					
ANR	509863	ConditionalExpression	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb ? to_rgb : gx_forward_map_color_rgb		509687	0					
ANR	509864	Condition	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb		509687	0					
ANR	509865	OrExpression	to_rgb == cmyk_1bit_map_color_rgb || to_rgb == cmyk_8bit_map_color_rgb		509687	0		||			
ANR	509866	EqualityExpression	to_rgb == cmyk_1bit_map_color_rgb		509687	0		==			
ANR	509867	Identifier	to_rgb		509687	0					
ANR	509868	Identifier	cmyk_1bit_map_color_rgb		509687	1					
ANR	509869	EqualityExpression	to_rgb == cmyk_8bit_map_color_rgb		509687	1		==			
ANR	509870	Identifier	to_rgb		509687	0					
ANR	509871	Identifier	cmyk_8bit_map_color_rgb		509687	1					
ANR	509872	Identifier	to_rgb		509687	1					
ANR	509873	Identifier	gx_forward_map_color_rgb		509687	2					
ANR	509874	ReturnType	void		509687	1					
ANR	509875	Identifier	gx_device_copy_color_procs		509687	2					
ANR	509876	ParameterList	"gx_device * dev , const gx_device * target"		509687	3					
ANR	509877	Parameter	gx_device * dev	899:27:29400:29413	509687	0	True				
ANR	509878	ParameterType	gx_device *		509687	0					
ANR	509879	Identifier	dev		509687	1					
ANR	509880	Parameter	const gx_device * target	899:43:29416:29438	509687	1	True				
ANR	509881	ParameterType	const gx_device *		509687	0					
ANR	509882	Identifier	target		509687	1					
ANR	509883	CFGEntryNode	ENTRY		509687		True				
ANR	509884	CFGExitNode	EXIT		509687		True				
ANR	509885	Symbol	* from_cmyk		509687						
ANR	509886	Symbol	* from_rgb		509687						
ANR	509887	Symbol	map_cmyk_color		509687						
ANR	509888	Symbol	gx_default_rgb_map_rgb_color		509687						
ANR	509889	Symbol	gx_forward_map_rgb_color		509687						
ANR	509890	Symbol	gx_forward_map_color_rgb		509687						
ANR	509891	Symbol	cmyk_1bit_map_color_rgb		509687						
ANR	509892	Symbol	dev_proc_map_rgb_color		509687						
ANR	509893	Symbol	dev_proc_map_color_rgb		509687						
ANR	509894	Symbol	* to_rgb		509687						
ANR	509895	Symbol	from_rgb		509687						
ANR	509896	Symbol	map_color_rgb		509687						
ANR	509897	Symbol	gx_forward_map_cmyk_color		509687						
ANR	509898	Symbol	target		509687						
ANR	509899	Symbol	map_rgb_color		509687						
ANR	509900	Symbol	cmyk_8bit_map_color_rgb		509687						
ANR	509901	Symbol	cmyk_1bit_map_cmyk_color		509687						
ANR	509902	Symbol	cmyk_8bit_map_cmyk_color		509687						
ANR	509903	Symbol	to_rgb		509687						
ANR	509904	Symbol	dev_proc_map_cmyk_color		509687						
ANR	509905	Symbol	dev		509687						
ANR	509906	Symbol	from_cmyk		509687						
ANR	509907	Symbol	dev_proc		509687						
ANR	509908	Function	gx_device_copy_color_params	940:39:31156:31468							
ANR	509909	FunctionDef	"gx_device_copy_color_params (gx_device * dev , const gx_device * target)"		509908	0					
ANR	509910	CompoundStatement		948:0:31350:31468	509908	0					
ANR	509911	ExpressionStatement	COPY_PARAM ( color_info )	949:8:31360:31382	509908	0	True				
ANR	509912	CallExpression	COPY_PARAM ( color_info )		509908	0					
ANR	509913	Callee	COPY_PARAM		509908	0					
ANR	509914	Identifier	COPY_PARAM		509908	0					
ANR	509915	ArgumentList	color_info		509908	1					
ANR	509916	Argument	color_info		509908	0					
ANR	509917	Identifier	color_info		509908	0					
ANR	509918	ExpressionStatement	COPY_PARAM ( cached_colors )	950:8:31392:31417	509908	1	True				
ANR	509919	CallExpression	COPY_PARAM ( cached_colors )		509908	0					
ANR	509920	Callee	COPY_PARAM		509908	0					
ANR	509921	Identifier	COPY_PARAM		509908	0					
ANR	509922	ArgumentList	cached_colors		509908	1					
ANR	509923	Argument	cached_colors		509908	0					
ANR	509924	Identifier	cached_colors		509908	0					
ANR	509925	ExpressionStatement	"gx_device_copy_color_procs ( dev , target )"	951:8:31427:31466	509908	2	True				
ANR	509926	CallExpression	"gx_device_copy_color_procs ( dev , target )"		509908	0					
ANR	509927	Callee	gx_device_copy_color_procs		509908	0					
ANR	509928	Identifier	gx_device_copy_color_procs		509908	0					
ANR	509929	ArgumentList	dev		509908	1					
ANR	509930	Argument	dev		509908	0					
ANR	509931	Identifier	dev		509908	0					
ANR	509932	Argument	target		509908	1					
ANR	509933	Identifier	target		509908	0					
ANR	509934	ReturnType	p void		509908	1					
ANR	509935	Identifier	gx_device_copy_color_params		509908	2					
ANR	509936	ParameterList	"gx_device * dev , const gx_device * target"		509908	3					
ANR	509937	Parameter	gx_device * dev	947:28:31309:31322	509908	0	True				
ANR	509938	ParameterType	gx_device *		509908	0					
ANR	509939	Identifier	dev		509908	1					
ANR	509940	Parameter	const gx_device * target	947:44:31325:31347	509908	1	True				
ANR	509941	ParameterType	const gx_device *		509908	0					
ANR	509942	Identifier	target		509908	1					
ANR	509943	CFGEntryNode	ENTRY		509908		True				
ANR	509944	CFGExitNode	EXIT		509908		True				
ANR	509945	Symbol	color_info		509908						
ANR	509946	Symbol	dev		509908						
ANR	509947	Symbol	cached_colors		509908						
ANR	509948	Symbol	target		509908						
ANR	509949	Function	gx_device_copy_params	959:0:31667:32230							
ANR	509950	FunctionDef	"gx_device_copy_params (gx_device * dev , const gx_device * target)"		509949	0					
ANR	509951	CompoundStatement		961:0:31735:32230	509949	0					
ANR	509952	Statement	define	962:1:31738:31743	509949	0	True				
ANR	509953	Statement	COPY_ARRAY_PARAM	962:8:31745:31760	509949	1	True				
ANR	509954	Statement	(	962:24:31761:31761	509949	2	True				
ANR	509955	Statement	p	962:25:31762:31762	509949	3	True				
ANR	509956	Statement	)	962:26:31763:31763	509949	4	True				
ANR	509957	Statement	memcpy	962:28:31765:31770	509949	5	True				
ANR	509958	Statement	(	962:34:31771:31771	509949	6	True				
ANR	509959	Statement	dev	962:35:31772:31774	509949	7	True				
ANR	509960	Statement	->	962:38:31775:31776	509949	8	True				
ANR	509961	Statement	p	962:40:31777:31777	509949	9	True				
ANR	509962	Statement	","	962:41:31778:31778	509949	10	True				
ANR	509963	Statement	target	962:43:31780:31785	509949	11	True				
ANR	509964	Statement	->	962:49:31786:31787	509949	12	True				
ANR	509965	Statement	p	962:51:31788:31788	509949	13	True				
ANR	509966	Statement	","	962:52:31789:31789	509949	14	True				
ANR	509967	Statement	sizeof	962:54:31791:31796	509949	15	True				
ANR	509968	Statement	(	962:60:31797:31797	509949	16	True				
ANR	509969	Statement	dev	962:61:31798:31800	509949	17	True				
ANR	509970	Statement	->	962:64:31801:31802	509949	18	True				
ANR	509971	Statement	p	962:66:31803:31803	509949	19	True				
ANR	509972	Statement	)	962:67:31804:31804	509949	20	True				
ANR	509973	Statement	)	962:68:31805:31805	509949	21	True				
ANR	509974	ExpressionStatement	COPY_PARAM ( width )	963:8:31815:31832	509949	22	True				
ANR	509975	CallExpression	COPY_PARAM ( width )		509949	0					
ANR	509976	Callee	COPY_PARAM		509949	0					
ANR	509977	Identifier	COPY_PARAM		509949	0					
ANR	509978	ArgumentList	width		509949	1					
ANR	509979	Argument	width		509949	0					
ANR	509980	Identifier	width		509949	0					
ANR	509981	ExpressionStatement	COPY_PARAM ( height )	964:8:31842:31860	509949	23	True				
ANR	509982	CallExpression	COPY_PARAM ( height )		509949	0					
ANR	509983	Callee	COPY_PARAM		509949	0					
ANR	509984	Identifier	COPY_PARAM		509949	0					
ANR	509985	ArgumentList	height		509949	1					
ANR	509986	Argument	height		509949	0					
ANR	509987	Identifier	height		509949	0					
ANR	509988	ExpressionStatement	COPY_ARRAY_PARAM ( MediaSize )	965:8:31870:31897	509949	24	True				
ANR	509989	CallExpression	COPY_ARRAY_PARAM ( MediaSize )		509949	0					
ANR	509990	Callee	COPY_ARRAY_PARAM		509949	0					
ANR	509991	Identifier	COPY_ARRAY_PARAM		509949	0					
ANR	509992	ArgumentList	MediaSize		509949	1					
ANR	509993	Argument	MediaSize		509949	0					
ANR	509994	Identifier	MediaSize		509949	0					
ANR	509995	ExpressionStatement	COPY_ARRAY_PARAM ( ImagingBBox )	966:8:31907:31936	509949	25	True				
ANR	509996	CallExpression	COPY_ARRAY_PARAM ( ImagingBBox )		509949	0					
ANR	509997	Callee	COPY_ARRAY_PARAM		509949	0					
ANR	509998	Identifier	COPY_ARRAY_PARAM		509949	0					
ANR	509999	ArgumentList	ImagingBBox		509949	1					
ANR	510000	Argument	ImagingBBox		509949	0					
ANR	510001	Identifier	ImagingBBox		509949	0					
ANR	510002	ExpressionStatement	COPY_PARAM ( ImagingBBox_set )	967:8:31946:31973	509949	26	True				
ANR	510003	CallExpression	COPY_PARAM ( ImagingBBox_set )		509949	0					
ANR	510004	Callee	COPY_PARAM		509949	0					
ANR	510005	Identifier	COPY_PARAM		509949	0					
ANR	510006	ArgumentList	ImagingBBox_set		509949	1					
ANR	510007	Argument	ImagingBBox_set		509949	0					
ANR	510008	Identifier	ImagingBBox_set		509949	0					
ANR	510009	ExpressionStatement	COPY_ARRAY_PARAM ( HWResolution )	968:8:31983:32013	509949	27	True				
ANR	510010	CallExpression	COPY_ARRAY_PARAM ( HWResolution )		509949	0					
ANR	510011	Callee	COPY_ARRAY_PARAM		509949	0					
ANR	510012	Identifier	COPY_ARRAY_PARAM		509949	0					
ANR	510013	ArgumentList	HWResolution		509949	1					
ANR	510014	Argument	HWResolution		509949	0					
ANR	510015	Identifier	HWResolution		509949	0					
ANR	510016	ExpressionStatement	COPY_ARRAY_PARAM ( Margins )	969:8:32023:32048	509949	28	True				
ANR	510017	CallExpression	COPY_ARRAY_PARAM ( Margins )		509949	0					
ANR	510018	Callee	COPY_ARRAY_PARAM		509949	0					
ANR	510019	Identifier	COPY_ARRAY_PARAM		509949	0					
ANR	510020	ArgumentList	Margins		509949	1					
ANR	510021	Argument	Margins		509949	0					
ANR	510022	Identifier	Margins		509949	0					
ANR	510023	ExpressionStatement	COPY_ARRAY_PARAM ( HWMargins )	970:8:32058:32085	509949	29	True				
ANR	510024	CallExpression	COPY_ARRAY_PARAM ( HWMargins )		509949	0					
ANR	510025	Callee	COPY_ARRAY_PARAM		509949	0					
ANR	510026	Identifier	COPY_ARRAY_PARAM		509949	0					
ANR	510027	ArgumentList	HWMargins		509949	1					
ANR	510028	Argument	HWMargins		509949	0					
ANR	510029	Identifier	HWMargins		509949	0					
ANR	510030	ExpressionStatement	COPY_PARAM ( PageCount )	971:8:32095:32116	509949	30	True				
ANR	510031	CallExpression	COPY_PARAM ( PageCount )		509949	0					
ANR	510032	Callee	COPY_PARAM		509949	0					
ANR	510033	Identifier	COPY_PARAM		509949	0					
ANR	510034	ArgumentList	PageCount		509949	1					
ANR	510035	Argument	PageCount		509949	0					
ANR	510036	Identifier	PageCount		509949	0					
ANR	510037	ExpressionStatement	COPY_PARAM ( MaxPatternBitmap )	972:8:32126:32154	509949	31	True				
ANR	510038	CallExpression	COPY_PARAM ( MaxPatternBitmap )		509949	0					
ANR	510039	Callee	COPY_PARAM		509949	0					
ANR	510040	Identifier	COPY_PARAM		509949	0					
ANR	510041	ArgumentList	MaxPatternBitmap		509949	1					
ANR	510042	Argument	MaxPatternBitmap		509949	0					
ANR	510043	Identifier	MaxPatternBitmap		509949	0					
ANR	510044	IdentifierDeclStatement	"undef COPY_ARRAY_PARAM gx_device_copy_color_params ( dev , target ) ;"	973:1:32157:32228	509949	32	True				
ANR	510045	IdentifierDecl	"gx_device_copy_color_params ( dev , target )"		509949	0					
ANR	510046	IdentifierDeclType	undef COPY_ARRAY_PARAM		509949	0					
ANR	510047	Identifier	gx_device_copy_color_params		509949	1					
ANR	510048	Expression	"dev , target"		509949	2					
ANR	510049	Identifier	dev		509949	0					
ANR	510050	Identifier	target		509949	1					
ANR	510051	ReturnType	void		509949	1					
ANR	510052	Identifier	gx_device_copy_params		509949	2					
ANR	510053	ParameterList	"gx_device * dev , const gx_device * target"		509949	3					
ANR	510054	Parameter	gx_device * dev	960:22:31694:31707	509949	0	True				
ANR	510055	ParameterType	gx_device *		509949	0					
ANR	510056	Identifier	dev		509949	1					
ANR	510057	Parameter	const gx_device * target	960:38:31710:31732	509949	1	True				
ANR	510058	ParameterType	const gx_device *		509949	0					
ANR	510059	Identifier	target		509949	1					
ANR	510060	CFGEntryNode	ENTRY		509949		True				
ANR	510061	CFGExitNode	EXIT		509949		True				
ANR	510062	Symbol	gx_device_copy_color_params		509949						
ANR	510063	Symbol	MediaSize		509949						
ANR	510064	Symbol	target		509949						
ANR	510065	Symbol	MaxPatternBitmap		509949						
ANR	510066	Symbol	ImagingBBox		509949						
ANR	510067	Symbol	dev		509949						
ANR	510068	Symbol	HWMargins		509949						
ANR	510069	Symbol	PageCount		509949						
ANR	510070	Symbol	width		509949						
ANR	510071	Symbol	HWResolution		509949						
ANR	510072	Symbol	Margins		509949						
ANR	510073	Symbol	ImagingBBox_set		509949						
ANR	510074	Symbol	height		509949						
ANR	510075	Function	gx_parse_output_format	988:0:32629:35269							
ANR	510076	FunctionDef	"gx_parse_output_format (gs_parsed_file_name_t * pfn , const char * * pfmt)"		510075	0					
ANR	510077	CompoundStatement		990:0:32710:35269	510075	0					
ANR	510078	IdentifierDeclStatement	"bool have_format = false , field ;"	991:4:32716:32747	510075	0	True				
ANR	510079	IdentifierDecl	have_format = false		510075	0					
ANR	510080	IdentifierDeclType	bool		510075	0					
ANR	510081	Identifier	have_format		510075	1					
ANR	510082	AssignmentExpression	have_format = false		510075	2		=			
ANR	510083	Identifier	false		510075	0					
ANR	510084	Identifier	false		510075	1					
ANR	510085	IdentifierDecl	field		510075	1					
ANR	510086	IdentifierDeclType	bool		510075	0					
ANR	510087	Identifier	field		510075	1					
ANR	510088	IdentifierDeclStatement	"int width [ 2 ] , int_width = sizeof ( int ) * 3 , w = 0 ;"	992:4:32753:32801	510075	1	True				
ANR	510089	IdentifierDecl	width [ 2 ]		510075	0					
ANR	510090	IdentifierDeclType	int [ 2 ]		510075	0					
ANR	510091	Identifier	width		510075	1					
ANR	510092	PrimaryExpression	2		510075	2					
ANR	510093	IdentifierDecl	int_width = sizeof ( int ) * 3		510075	1					
ANR	510094	IdentifierDeclType	int		510075	0					
ANR	510095	Identifier	int_width		510075	1					
ANR	510096	AssignmentExpression	int_width = sizeof ( int ) * 3		510075	2		=			
ANR	510097	Identifier	int_width		510075	0					
ANR	510098	MultiplicativeExpression	sizeof ( int ) * 3		510075	1		*			
ANR	510099	SizeofExpression	sizeof ( int )		510075	0					
ANR	510100	Sizeof	sizeof		510075	0					
ANR	510101	SizeofOperand	int		510075	1					
ANR	510102	PrimaryExpression	3		510075	1					
ANR	510103	IdentifierDecl	w = 0		510075	2					
ANR	510104	IdentifierDeclType	int		510075	0					
ANR	510105	Identifier	w		510075	1					
ANR	510106	AssignmentExpression	w = 0		510075	2		=			
ANR	510107	Identifier	w		510075	0					
ANR	510108	PrimaryExpression	0		510075	1					
ANR	510109	IdentifierDeclStatement	uint i ;	993:4:32807:32813	510075	2	True				
ANR	510110	IdentifierDecl	i		510075	0					
ANR	510111	IdentifierDeclType	uint		510075	0					
ANR	510112	Identifier	i		510075	1					
ANR	510113	ExpressionStatement	width [ 0 ] = width [ 1 ] = 0	996:4:32898:32921	510075	3	True				
ANR	510114	AssignmentExpression	width [ 0 ] = width [ 1 ] = 0		510075	0		=			
ANR	510115	ArrayIndexing	width [ 0 ]		510075	0					
ANR	510116	Identifier	width		510075	0					
ANR	510117	PrimaryExpression	0		510075	1					
ANR	510118	AssignmentExpression	width [ 1 ] = 0		510075	1		=			
ANR	510119	ArrayIndexing	width [ 1 ]		510075	0					
ANR	510120	Identifier	width		510075	0					
ANR	510121	PrimaryExpression	1		510075	1					
ANR	510122	PrimaryExpression	0		510075	1					
ANR	510123	ForStatement	for ( i = 0 ; i < pfn -> len ; ++ i )		510075	4					
ANR	510124	ForInit	i = 0 ;	997:9:32932:32937	510075	0	True				
ANR	510125	AssignmentExpression	i = 0		510075	0		=			
ANR	510126	Identifier	i		510075	0					
ANR	510127	PrimaryExpression	0		510075	1					
ANR	510128	Condition	i < pfn -> len	997:16:32939:32950	510075	1	True				
ANR	510129	RelationalExpression	i < pfn -> len		510075	0		<			
ANR	510130	Identifier	i		510075	0					
ANR	510131	PtrMemberAccess	pfn -> len		510075	1					
ANR	510132	Identifier	pfn		510075	0					
ANR	510133	Identifier	len		510075	1					
ANR	510134	UnaryExpression	++ i	997:30:32953:32955	510075	2	True				
ANR	510135	IncDec	++		510075	0					
ANR	510136	Identifier	i		510075	1					
ANR	510137	IfStatement	if ( pfn -> fname [ i ] == '%' )		510075	3					
ANR	510138	Condition	pfn -> fname [ i ] == '%'	998:12:32970:32989	510075	0	True				
ANR	510139	EqualityExpression	pfn -> fname [ i ] == '%'		510075	0		==			
ANR	510140	ArrayIndexing	pfn -> fname [ i ]		510075	0					
ANR	510141	PtrMemberAccess	pfn -> fname		510075	0					
ANR	510142	Identifier	pfn		510075	0					
ANR	510143	Identifier	fname		510075	1					
ANR	510144	Identifier	i		510075	1					
ANR	510145	PrimaryExpression	'%'		510075	1					
ANR	510146	CompoundStatement		9:34:281:281	510075	1					
ANR	510147	IfStatement	if ( i + 1 < pfn -> len && pfn -> fname [ i + 1 ] == '%' )		510075	0					
ANR	510148	Condition	i + 1 < pfn -> len && pfn -> fname [ i + 1 ] == '%'	999:16:33010:33053	510075	0	True				
ANR	510149	AndExpression	i + 1 < pfn -> len && pfn -> fname [ i + 1 ] == '%'		510075	0		&&			
ANR	510150	RelationalExpression	i + 1 < pfn -> len		510075	0		<			
ANR	510151	AdditiveExpression	i + 1		510075	0		+			
ANR	510152	Identifier	i		510075	0					
ANR	510153	PrimaryExpression	1		510075	1					
ANR	510154	PtrMemberAccess	pfn -> len		510075	1					
ANR	510155	Identifier	pfn		510075	0					
ANR	510156	Identifier	len		510075	1					
ANR	510157	EqualityExpression	pfn -> fname [ i + 1 ] == '%'		510075	1		==			
ANR	510158	ArrayIndexing	pfn -> fname [ i + 1 ]		510075	0					
ANR	510159	PtrMemberAccess	pfn -> fname		510075	0					
ANR	510160	Identifier	pfn		510075	0					
ANR	510161	Identifier	fname		510075	1					
ANR	510162	AdditiveExpression	i + 1		510075	1		+			
ANR	510163	Identifier	i		510075	0					
ANR	510164	PrimaryExpression	1		510075	1					
ANR	510165	PrimaryExpression	'%'		510075	1					
ANR	510166	CompoundStatement		10:62:345:345	510075	1					
ANR	510167	ExpressionStatement	i ++	1000:16:33074:33077	510075	0	True				
ANR	510168	PostIncDecOperationExpression	i ++		510075	0					
ANR	510169	Identifier	i		510075	0					
ANR	510170	IncDec	++		510075	1					
ANR	510171	ContinueStatement	continue ;	1001:16:33095:33103	510075	1	True				
ANR	510172	IfStatement	if ( have_format )		510075	1					
ANR	510173	Condition	have_format	1003:16:33135:33145	510075	0	True				
ANR	510174	Identifier	have_format		510075	0					
ANR	510175	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1004:16:33186:33226	510075	1	True				
ANR	510176	CallExpression	return_error ( gs_error_undefinedfilename )		510075	0					
ANR	510177	Callee	return_error		510075	0					
ANR	510178	Identifier	return_error		510075	0					
ANR	510179	ArgumentList	gs_error_undefinedfilename		510075	1					
ANR	510180	Argument	gs_error_undefinedfilename		510075	0					
ANR	510181	Identifier	gs_error_undefinedfilename		510075	0					
ANR	510182	ExpressionStatement	have_format = true	1005:12:33240:33258	510075	2	True				
ANR	510183	AssignmentExpression	have_format = true		510075	0		=			
ANR	510184	Identifier	have_format		510075	0					
ANR	510185	Identifier	true		510075	1					
ANR	510186	ExpressionStatement	field = - 1	1006:12:33272:33282	510075	3	True				
ANR	510187	AssignmentExpression	field = - 1		510075	0		=			
ANR	510188	Identifier	field		510075	0					
ANR	510189	UnaryOperationExpression	- 1		510075	1					
ANR	510190	UnaryOperator	-		510075	0					
ANR	510191	PrimaryExpression	1		510075	1					
ANR	510192	ForStatement	for ( ; ; )		510075	4					
ANR	510193	IfStatement	if ( ++ i == pfn -> len )		510075	0					
ANR	510194	Condition	++ i == pfn -> len	1008:20:33398:33412	510075	0	True				
ANR	510195	EqualityExpression	++ i == pfn -> len		510075	0		==			
ANR	510196	UnaryExpression	++ i		510075	0					
ANR	510197	IncDec	++		510075	0					
ANR	510198	Identifier	i		510075	1					
ANR	510199	PtrMemberAccess	pfn -> len		510075	1					
ANR	510200	Identifier	pfn		510075	0					
ANR	510201	Identifier	len		510075	1					
ANR	510202	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1009:20:33435:33475	510075	1	True				
ANR	510203	CallExpression	return_error ( gs_error_undefinedfilename )		510075	0					
ANR	510204	Callee	return_error		510075	0					
ANR	510205	Identifier	return_error		510075	0					
ANR	510206	ArgumentList	gs_error_undefinedfilename		510075	1					
ANR	510207	Argument	gs_error_undefinedfilename		510075	0					
ANR	510208	Identifier	gs_error_undefinedfilename		510075	0					
ANR	510209	ElseStatement	else		510075	0					
ANR	510210	CompoundStatement		21:21:787:787	510075	0					
ANR	510211	SwitchStatement	switch ( field )		510075	0					
ANR	510212	Condition	field	1011:28:33528:33532	510075	0	True				
ANR	510213	Identifier	field		510075	0					
ANR	510214	CompoundStatement		22:35:824:824	510075	1					
ANR	510215	Statement	case	1012:24:33561:33564	510075	0	True				
ANR	510216	Statement	-	1012:29:33566:33566	510075	1	True				
ANR	510217	Label	1 :	1012:30:33567:33568	510075	2	True				
ANR	510218	IfStatement	"if ( strchr ( "" #+-"" , pfn -> fname [ i ] ) )"		510075	3					
ANR	510219	Condition	"strchr ( "" #+-"" , pfn -> fname [ i ] )"	1013:32:33614:33642	510075	0	True				
ANR	510220	CallExpression	"strchr ( "" #+-"" , pfn -> fname [ i ] )"		510075	0					
ANR	510221	Callee	strchr		510075	0					
ANR	510222	Identifier	strchr		510075	0					
ANR	510223	ArgumentList	""" #+-"""		510075	1					
ANR	510224	Argument	""" #+-"""		510075	0					
ANR	510225	PrimaryExpression	""" #+-"""		510075	0					
ANR	510226	Argument	pfn -> fname [ i ]		510075	1					
ANR	510227	ArrayIndexing	pfn -> fname [ i ]		510075	0					
ANR	510228	PtrMemberAccess	pfn -> fname		510075	0					
ANR	510229	Identifier	pfn		510075	0					
ANR	510230	Identifier	fname		510075	1					
ANR	510231	Identifier	i		510075	1					
ANR	510232	ContinueStatement	continue ;	1014:32:33677:33685	510075	1	True				
ANR	510233	ElseStatement	else		510075	0					
ANR	510234	ExpressionStatement	field ++	1016:32:33752:33759	510075	0	True				
ANR	510235	PostIncDecOperationExpression	field ++		510075	0					
ANR	510236	Identifier	field		510075	0					
ANR	510237	IncDec	++		510075	1					
ANR	510238	Label	default :	1018:24:33833:33840	510075	4	True				
ANR	510239	Identifier	default		510075	0					
ANR	510240	IfStatement	"if ( strchr ( ""0123456789"" , pfn -> fname [ i ] ) )"		510075	5					
ANR	510241	Condition	"strchr ( ""0123456789"" , pfn -> fname [ i ] )"	1019:32:33924:33958	510075	0	True				
ANR	510242	CallExpression	"strchr ( ""0123456789"" , pfn -> fname [ i ] )"		510075	0					
ANR	510243	Callee	strchr		510075	0					
ANR	510244	Identifier	strchr		510075	0					
ANR	510245	ArgumentList	"""0123456789"""		510075	1					
ANR	510246	Argument	"""0123456789"""		510075	0					
ANR	510247	PrimaryExpression	"""0123456789"""		510075	0					
ANR	510248	Argument	pfn -> fname [ i ]		510075	1					
ANR	510249	ArrayIndexing	pfn -> fname [ i ]		510075	0					
ANR	510250	PtrMemberAccess	pfn -> fname		510075	0					
ANR	510251	Identifier	pfn		510075	0					
ANR	510252	Identifier	fname		510075	1					
ANR	510253	Identifier	i		510075	1					
ANR	510254	CompoundStatement		30:69:1250:1250	510075	1					
ANR	510255	ExpressionStatement	width [ field ] = width [ field ] * 10 + pfn -> fname [ i ] - '0'	1020:32:33995:34049	510075	0	True				
ANR	510256	AssignmentExpression	width [ field ] = width [ field ] * 10 + pfn -> fname [ i ] - '0'		510075	0		=			
ANR	510257	ArrayIndexing	width [ field ]		510075	0					
ANR	510258	Identifier	width		510075	0					
ANR	510259	Identifier	field		510075	1					
ANR	510260	AdditiveExpression	width [ field ] * 10 + pfn -> fname [ i ] - '0'		510075	1		+			
ANR	510261	MultiplicativeExpression	width [ field ] * 10		510075	0		*			
ANR	510262	ArrayIndexing	width [ field ]		510075	0					
ANR	510263	Identifier	width		510075	0					
ANR	510264	Identifier	field		510075	1					
ANR	510265	PrimaryExpression	10		510075	1					
ANR	510266	AdditiveExpression	pfn -> fname [ i ] - '0'		510075	1		-			
ANR	510267	ArrayIndexing	pfn -> fname [ i ]		510075	0					
ANR	510268	PtrMemberAccess	pfn -> fname		510075	0					
ANR	510269	Identifier	pfn		510075	0					
ANR	510270	Identifier	fname		510075	1					
ANR	510271	Identifier	i		510075	1					
ANR	510272	PrimaryExpression	'0'		510075	1					
ANR	510273	ContinueStatement	continue ;	1021:32:34083:34091	510075	1	True				
ANR	510274	ElseStatement	else		510075	0					
ANR	510275	IfStatement	if ( 0 == field && '.' == pfn -> fname [ i ] )		510075	0					
ANR	510276	Condition	0 == field && '.' == pfn -> fname [ i ]	1022:39:34132:34165	510075	0	True				
ANR	510277	AndExpression	0 == field && '.' == pfn -> fname [ i ]		510075	0		&&			
ANR	510278	EqualityExpression	0 == field		510075	0		==			
ANR	510279	PrimaryExpression	0		510075	0					
ANR	510280	Identifier	field		510075	1					
ANR	510281	EqualityExpression	'.' == pfn -> fname [ i ]		510075	1		==			
ANR	510282	PrimaryExpression	'.'		510075	0					
ANR	510283	ArrayIndexing	pfn -> fname [ i ]		510075	1					
ANR	510284	PtrMemberAccess	pfn -> fname		510075	0					
ANR	510285	Identifier	pfn		510075	0					
ANR	510286	Identifier	fname		510075	1					
ANR	510287	Identifier	i		510075	1					
ANR	510288	CompoundStatement		33:75:1457:1457	510075	1					
ANR	510289	ExpressionStatement	field ++	1023:32:34202:34209	510075	0	True				
ANR	510290	PostIncDecOperationExpression	field ++		510075	0					
ANR	510291	Identifier	field		510075	0					
ANR	510292	IncDec	++		510075	1					
ANR	510293	ContinueStatement	continue ;	1024:32:34243:34251	510075	1	True				
ANR	510294	ElseStatement	else		510075	0					
ANR	510295	ExpressionStatement	field = 2	1026:32:34320:34329	510075	0	True				
ANR	510296	AssignmentExpression	field = 2		510075	0		=			
ANR	510297	Identifier	field		510075	0					
ANR	510298	PrimaryExpression	2		510075	1					
ANR	510299	Label	case 2 :	1028:24:34403:34409	510075	6	True				
ANR	510300	ExpressionStatement	field ++	1029:28:34462:34469	510075	7	True				
ANR	510301	PostIncDecOperationExpression	field ++		510075	0					
ANR	510302	Identifier	field		510075	0					
ANR	510303	IncDec	++		510075	1					
ANR	510304	IfStatement	if ( 'l' == pfn -> fname [ i ] )		510075	8					
ANR	510305	Condition	'l' == pfn -> fname [ i ]	1030:32:34503:34522	510075	0	True				
ANR	510306	EqualityExpression	'l' == pfn -> fname [ i ]		510075	0		==			
ANR	510307	PrimaryExpression	'l'		510075	0					
ANR	510308	ArrayIndexing	pfn -> fname [ i ]		510075	1					
ANR	510309	PtrMemberAccess	pfn -> fname		510075	0					
ANR	510310	Identifier	pfn		510075	0					
ANR	510311	Identifier	fname		510075	1					
ANR	510312	Identifier	i		510075	1					
ANR	510313	CompoundStatement		41:54:1814:1814	510075	1					
ANR	510314	ExpressionStatement	int_width = sizeof ( long ) * 3	1031:32:34559:34587	510075	0	True				
ANR	510315	AssignmentExpression	int_width = sizeof ( long ) * 3		510075	0		=			
ANR	510316	Identifier	int_width		510075	0					
ANR	510317	MultiplicativeExpression	sizeof ( long ) * 3		510075	1		*			
ANR	510318	SizeofExpression	sizeof ( long )		510075	0					
ANR	510319	Sizeof	sizeof		510075	0					
ANR	510320	SizeofOperand	long		510075	1					
ANR	510321	PrimaryExpression	3		510075	1					
ANR	510322	ContinueStatement	continue ;	1032:32:34621:34629	510075	1	True				
ANR	510323	Label	case 3 :	1035:24:34733:34739	510075	9	True				
ANR	510324	IfStatement	"if ( strchr ( ""diuoxX"" , pfn -> fname [ i ] ) )"		510075	10					
ANR	510325	Condition	"strchr ( ""diuoxX"" , pfn -> fname [ i ] )"	1036:32:34784:34814	510075	0	True				
ANR	510326	CallExpression	"strchr ( ""diuoxX"" , pfn -> fname [ i ] )"		510075	0					
ANR	510327	Callee	strchr		510075	0					
ANR	510328	Identifier	strchr		510075	0					
ANR	510329	ArgumentList	"""diuoxX"""		510075	1					
ANR	510330	Argument	"""diuoxX"""		510075	0					
ANR	510331	PrimaryExpression	"""diuoxX"""		510075	0					
ANR	510332	Argument	pfn -> fname [ i ]		510075	1					
ANR	510333	ArrayIndexing	pfn -> fname [ i ]		510075	0					
ANR	510334	PtrMemberAccess	pfn -> fname		510075	0					
ANR	510335	Identifier	pfn		510075	0					
ANR	510336	Identifier	fname		510075	1					
ANR	510337	Identifier	i		510075	1					
ANR	510338	CompoundStatement		47:65:2106:2106	510075	1					
ANR	510339	ExpressionStatement	* pfmt = & pfn -> fname [ i ]	1037:32:34851:34873	510075	0	True				
ANR	510340	AssignmentExpression	* pfmt = & pfn -> fname [ i ]		510075	0		=			
ANR	510341	UnaryOperationExpression	* pfmt		510075	0					
ANR	510342	UnaryOperator	*		510075	0					
ANR	510343	Identifier	pfmt		510075	1					
ANR	510344	UnaryOperationExpression	& pfn -> fname [ i ]		510075	1					
ANR	510345	UnaryOperator	&		510075	0					
ANR	510346	ArrayIndexing	pfn -> fname [ i ]		510075	1					
ANR	510347	PtrMemberAccess	pfn -> fname		510075	0					
ANR	510348	Identifier	pfn		510075	0					
ANR	510349	Identifier	fname		510075	1					
ANR	510350	Identifier	i		510075	1					
ANR	510351	BreakStatement	break ;	1038:32:34907:34912	510075	1	True				
ANR	510352	ElseStatement	else		510075	0					
ANR	510353	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1040:32:34981:35021	510075	0	True				
ANR	510354	CallExpression	return_error ( gs_error_undefinedfilename )		510075	0					
ANR	510355	Callee	return_error		510075	0					
ANR	510356	Identifier	return_error		510075	0					
ANR	510357	ArgumentList	gs_error_undefinedfilename		510075	1					
ANR	510358	Argument	gs_error_undefinedfilename		510075	0					
ANR	510359	Identifier	gs_error_undefinedfilename		510075	0					
ANR	510360	BreakStatement	break ;	1042:20:35065:35070	510075	1	True				
ANR	510361	IfStatement	if ( have_format )		510075	5					
ANR	510362	Condition	have_format	1045:8:35108:35118	510075	0	True				
ANR	510363	Identifier	have_format		510075	0					
ANR	510364	CompoundStatement		56:21:2410:2410	510075	1					
ANR	510365	ExpressionStatement	"w = max ( width [ 0 ] , width [ 1 ] )"	1047:8:35185:35212	510075	0	True				
ANR	510366	AssignmentExpression	"w = max ( width [ 0 ] , width [ 1 ] )"		510075	0		=			
ANR	510367	Identifier	w		510075	0					
ANR	510368	CallExpression	"max ( width [ 0 ] , width [ 1 ] )"		510075	1					
ANR	510369	Callee	max		510075	0					
ANR	510370	Identifier	max		510075	0					
ANR	510371	ArgumentList	width [ 0 ]		510075	1					
ANR	510372	Argument	width [ 0 ]		510075	0					
ANR	510373	ArrayIndexing	width [ 0 ]		510075	0					
ANR	510374	Identifier	width		510075	0					
ANR	510375	PrimaryExpression	0		510075	1					
ANR	510376	Argument	width [ 1 ]		510075	1					
ANR	510377	ArrayIndexing	width [ 1 ]		510075	0					
ANR	510378	Identifier	width		510075	0					
ANR	510379	PrimaryExpression	1		510075	1					
ANR	510380	ExpressionStatement	"w = max ( w , int_width ) + 5"	1048:8:35222:35247	510075	1	True				
ANR	510381	AssignmentExpression	"w = max ( w , int_width ) + 5"		510075	0		=			
ANR	510382	Identifier	w		510075	0					
ANR	510383	AdditiveExpression	"max ( w , int_width ) + 5"		510075	1		+			
ANR	510384	CallExpression	"max ( w , int_width )"		510075	0					
ANR	510385	Callee	max		510075	0					
ANR	510386	Identifier	max		510075	0					
ANR	510387	ArgumentList	w		510075	1					
ANR	510388	Argument	w		510075	0					
ANR	510389	Identifier	w		510075	0					
ANR	510390	Argument	int_width		510075	1					
ANR	510391	Identifier	int_width		510075	0					
ANR	510392	PrimaryExpression	5		510075	1					
ANR	510393	ReturnStatement	return w ;	1050:4:35259:35267	510075	6	True				
ANR	510394	Identifier	w		510075	0					
ANR	510395	ReturnType	static int		510075	1					
ANR	510396	Identifier	gx_parse_output_format		510075	2					
ANR	510397	ParameterList	"gs_parsed_file_name_t * pfn , const char * * pfmt"		510075	3					
ANR	510398	Parameter	gs_parsed_file_name_t * pfn	989:23:32663:32688	510075	0	True				
ANR	510399	ParameterType	gs_parsed_file_name_t *		510075	0					
ANR	510400	Identifier	pfn		510075	1					
ANR	510401	Parameter	const char * * pfmt	989:51:32691:32707	510075	1	True				
ANR	510402	ParameterType	const char * *		510075	0					
ANR	510403	Identifier	pfmt		510075	1					
ANR	510404	CFGEntryNode	ENTRY		510075		True				
ANR	510405	CFGExitNode	EXIT		510075		True				
ANR	510406	InfiniteForNode	true		510075		True				
ANR	510407	Symbol	have_format		510075						
ANR	510408	Symbol	* pfn		510075						
ANR	510409	Symbol	max		510075						
ANR	510410	Symbol	false		510075						
ANR	510411	Symbol	pfmt		510075						
ANR	510412	Symbol	i		510075						
ANR	510413	Symbol	strchr		510075						
ANR	510414	Symbol	gs_error_undefinedfilename		510075						
ANR	510415	Symbol	* field		510075						
ANR	510416	Symbol	* * pfn		510075						
ANR	510417	Symbol	* width		510075						
ANR	510418	Symbol	* pfmt		510075						
ANR	510419	Symbol	* i		510075						
ANR	510420	Symbol	field		510075						
ANR	510421	Symbol	int_width		510075						
ANR	510422	Symbol	w		510075						
ANR	510423	Symbol	width		510075						
ANR	510424	Symbol	true		510075						
ANR	510425	Symbol	pfn		510075						
ANR	510426	Symbol	* pfn -> fname		510075						
ANR	510427	Symbol	pfn -> len		510075						
ANR	510428	Symbol	pfn -> fname		510075						
ANR	510429	Function	gx_parse_output_file_name	1060:0:35592:37235							
ANR	510430	FunctionDef	"gx_parse_output_file_name (gs_parsed_file_name_t * pfn , const char * * pfmt , const char * fname , uint fnlen , gs_memory_t * memory)"		510429	0					
ANR	510431	CompoundStatement		1063:0:35747:37235	510429	0					
ANR	510432	IdentifierDeclStatement	int code ;	1064:4:35753:35761	510429	0	True				
ANR	510433	IdentifierDecl	code		510429	0					
ANR	510434	IdentifierDeclType	int		510429	0					
ANR	510435	Identifier	code		510429	1					
ANR	510436	ExpressionStatement	* pfmt = 0	1066:4:35768:35777	510429	1	True				
ANR	510437	AssignmentExpression	* pfmt = 0		510429	0		=			
ANR	510438	UnaryOperationExpression	* pfmt		510429	0					
ANR	510439	UnaryOperator	*		510429	0					
ANR	510440	Identifier	pfmt		510429	1					
ANR	510441	PrimaryExpression	0		510429	1					
ANR	510442	ExpressionStatement	pfn -> memory = 0	1067:4:35783:35798	510429	2	True				
ANR	510443	AssignmentExpression	pfn -> memory = 0		510429	0		=			
ANR	510444	PtrMemberAccess	pfn -> memory		510429	0					
ANR	510445	Identifier	pfn		510429	0					
ANR	510446	Identifier	memory		510429	1					
ANR	510447	PrimaryExpression	0		510429	1					
ANR	510448	ExpressionStatement	pfn -> iodev = NULL	1068:4:35804:35821	510429	3	True				
ANR	510449	AssignmentExpression	pfn -> iodev = NULL		510429	0		=			
ANR	510450	PtrMemberAccess	pfn -> iodev		510429	0					
ANR	510451	Identifier	pfn		510429	0					
ANR	510452	Identifier	iodev		510429	1					
ANR	510453	Identifier	NULL		510429	1					
ANR	510454	ExpressionStatement	pfn -> fname = NULL	1069:4:35827:35844	510429	4	True				
ANR	510455	AssignmentExpression	pfn -> fname = NULL		510429	0		=			
ANR	510456	PtrMemberAccess	pfn -> fname		510429	0					
ANR	510457	Identifier	pfn		510429	0					
ANR	510458	Identifier	fname		510429	1					
ANR	510459	Identifier	NULL		510429	1					
ANR	510460	ExpressionStatement	pfn -> len = 0	1070:4:35885:35897	510429	5	True				
ANR	510461	AssignmentExpression	pfn -> len = 0		510429	0		=			
ANR	510462	PtrMemberAccess	pfn -> len		510429	0					
ANR	510463	Identifier	pfn		510429	0					
ANR	510464	Identifier	len		510429	1					
ANR	510465	PrimaryExpression	0		510429	1					
ANR	510466	IfStatement	if ( fnlen == 0 )		510429	6					
ANR	510467	Condition	fnlen == 0	1071:8:35907:35916	510429	0	True				
ANR	510468	EqualityExpression	fnlen == 0		510429	0		==			
ANR	510469	Identifier	fnlen		510429	0					
ANR	510470	PrimaryExpression	0		510429	1					
ANR	510471	ReturnStatement	return 0 ;	1072:8:35952:35960	510429	1	True				
ANR	510472	PrimaryExpression	0		510429	0					
ANR	510473	ExpressionStatement	"code = gs_parse_file_name ( pfn , fname , fnlen , memory )"	1077:4:36112:36164	510429	7	True				
ANR	510474	AssignmentExpression	"code = gs_parse_file_name ( pfn , fname , fnlen , memory )"		510429	0		=			
ANR	510475	Identifier	code		510429	0					
ANR	510476	CallExpression	"gs_parse_file_name ( pfn , fname , fnlen , memory )"		510429	1					
ANR	510477	Callee	gs_parse_file_name		510429	0					
ANR	510478	Identifier	gs_parse_file_name		510429	0					
ANR	510479	ArgumentList	pfn		510429	1					
ANR	510480	Argument	pfn		510429	0					
ANR	510481	Identifier	pfn		510429	0					
ANR	510482	Argument	fname		510429	1					
ANR	510483	Identifier	fname		510429	0					
ANR	510484	Argument	fnlen		510429	2					
ANR	510485	Identifier	fnlen		510429	0					
ANR	510486	Argument	memory		510429	3					
ANR	510487	Identifier	memory		510429	0					
ANR	510488	IfStatement	if ( code < 0 )		510429	8					
ANR	510489	Condition	code < 0	1078:8:36174:36181	510429	0	True				
ANR	510490	RelationalExpression	code < 0		510429	0		<			
ANR	510491	Identifier	code		510429	0					
ANR	510492	PrimaryExpression	0		510429	1					
ANR	510493	CompoundStatement		16:18:436:436	510429	1					
ANR	510494	IfStatement	if ( fname [ 0 ] == '%' )		510429	0					
ANR	510495	Condition	fname [ 0 ] == '%'	1079:12:36198:36212	510429	0	True				
ANR	510496	EqualityExpression	fname [ 0 ] == '%'		510429	0		==			
ANR	510497	ArrayIndexing	fname [ 0 ]		510429	0					
ANR	510498	Identifier	fname		510429	0					
ANR	510499	PrimaryExpression	0		510429	1					
ANR	510500	PrimaryExpression	'%'		510429	1					
ANR	510501	CompoundStatement		17:29:467:467	510429	1					
ANR	510502	ExpressionStatement	pfn -> len = fnlen	1081:12:36308:36324	510429	0	True				
ANR	510503	AssignmentExpression	pfn -> len = fnlen		510429	0		=			
ANR	510504	PtrMemberAccess	pfn -> len		510429	0					
ANR	510505	Identifier	pfn		510429	0					
ANR	510506	Identifier	len		510429	1					
ANR	510507	Identifier	fnlen		510429	1					
ANR	510508	ExpressionStatement	pfn -> fname = fname	1082:12:36338:36356	510429	1	True				
ANR	510509	AssignmentExpression	pfn -> fname = fname		510429	0		=			
ANR	510510	PtrMemberAccess	pfn -> fname		510429	0					
ANR	510511	Identifier	pfn		510429	0					
ANR	510512	Identifier	fname		510429	1					
ANR	510513	Identifier	fname		510429	1					
ANR	510514	ExpressionStatement	"code = gx_parse_output_format ( pfn , pfmt )"	1083:12:36370:36410	510429	2	True				
ANR	510515	AssignmentExpression	"code = gx_parse_output_format ( pfn , pfmt )"		510429	0		=			
ANR	510516	Identifier	code		510429	0					
ANR	510517	CallExpression	"gx_parse_output_format ( pfn , pfmt )"		510429	1					
ANR	510518	Callee	gx_parse_output_format		510429	0					
ANR	510519	Identifier	gx_parse_output_format		510429	0					
ANR	510520	ArgumentList	pfn		510429	1					
ANR	510521	Argument	pfn		510429	0					
ANR	510522	Identifier	pfn		510429	0					
ANR	510523	Argument	pfmt		510429	1					
ANR	510524	Identifier	pfmt		510429	0					
ANR	510525	IfStatement	if ( code < 0 )		510429	1					
ANR	510526	Condition	code < 0	1085:12:36434:36441	510429	0	True				
ANR	510527	RelationalExpression	code < 0		510429	0		<			
ANR	510528	Identifier	code		510429	0					
ANR	510529	PrimaryExpression	0		510429	1					
ANR	510530	ReturnStatement	return code ;	1086:12:36456:36467	510429	1	True				
ANR	510531	Identifier	code		510429	0					
ANR	510532	IfStatement	if ( ! pfn -> iodev )		510429	9					
ANR	510533	Condition	! pfn -> iodev	1088:8:36483:36493	510429	0	True				
ANR	510534	UnaryOperationExpression	! pfn -> iodev		510429	0					
ANR	510535	UnaryOperator	!		510429	0					
ANR	510536	PtrMemberAccess	pfn -> iodev		510429	1					
ANR	510537	Identifier	pfn		510429	0					
ANR	510538	Identifier	iodev		510429	1					
ANR	510539	CompoundStatement		26:21:748:748	510429	1					
ANR	510540	IfStatement	if ( ( pfn -> len == 1 ) && ( pfn -> fname [ 0 ] == '-' ) )		510429	0					
ANR	510541	Condition	( pfn -> len == 1 ) && ( pfn -> fname [ 0 ] == '-' )	1089:13:36511:36551	510429	0	True				
ANR	510542	AndExpression	( pfn -> len == 1 ) && ( pfn -> fname [ 0 ] == '-' )		510429	0		&&			
ANR	510543	EqualityExpression	pfn -> len == 1		510429	0		==			
ANR	510544	PtrMemberAccess	pfn -> len		510429	0					
ANR	510545	Identifier	pfn		510429	0					
ANR	510546	Identifier	len		510429	1					
ANR	510547	PrimaryExpression	1		510429	1					
ANR	510548	EqualityExpression	pfn -> fname [ 0 ] == '-'		510429	1		==			
ANR	510549	ArrayIndexing	pfn -> fname [ 0 ]		510429	0					
ANR	510550	PtrMemberAccess	pfn -> fname		510429	0					
ANR	510551	Identifier	pfn		510429	0					
ANR	510552	Identifier	fname		510429	1					
ANR	510553	PrimaryExpression	0		510429	1					
ANR	510554	PrimaryExpression	'-'		510429	1					
ANR	510555	CompoundStatement		27:57:807:807	510429	1					
ANR	510556	ExpressionStatement	"pfn -> iodev = gs_findiodevice ( memory , ( const byte * ) ""%stdout"" , 7 )"	1090:12:36569:36633	510429	0	True				
ANR	510557	AssignmentExpression	"pfn -> iodev = gs_findiodevice ( memory , ( const byte * ) ""%stdout"" , 7 )"		510429	0		=			
ANR	510558	PtrMemberAccess	pfn -> iodev		510429	0					
ANR	510559	Identifier	pfn		510429	0					
ANR	510560	Identifier	iodev		510429	1					
ANR	510561	CallExpression	"gs_findiodevice ( memory , ( const byte * ) ""%stdout"" , 7 )"		510429	1					
ANR	510562	Callee	gs_findiodevice		510429	0					
ANR	510563	Identifier	gs_findiodevice		510429	0					
ANR	510564	ArgumentList	memory		510429	1					
ANR	510565	Argument	memory		510429	0					
ANR	510566	Identifier	memory		510429	0					
ANR	510567	Argument	"( const byte * ) ""%stdout"""		510429	1					
ANR	510568	CastExpression	"( const byte * ) ""%stdout"""		510429	0					
ANR	510569	CastTarget	const byte *		510429	0					
ANR	510570	PrimaryExpression	"""%stdout"""		510429	1					
ANR	510571	Argument	7		510429	2					
ANR	510572	PrimaryExpression	7		510429	0					
ANR	510573	ExpressionStatement	pfn -> fname = NULL	1091:12:36647:36664	510429	1	True				
ANR	510574	AssignmentExpression	pfn -> fname = NULL		510429	0		=			
ANR	510575	PtrMemberAccess	pfn -> fname		510429	0					
ANR	510576	Identifier	pfn		510429	0					
ANR	510577	Identifier	fname		510429	1					
ANR	510578	Identifier	NULL		510429	1					
ANR	510579	ElseStatement	else		510429	0					
ANR	510580	IfStatement	if ( pfn -> fname [ 0 ] == '|' )		510429	0					
ANR	510581	Condition	pfn -> fname [ 0 ] == '|'	1092:19:36685:36704	510429	0	True				
ANR	510582	EqualityExpression	pfn -> fname [ 0 ] == '|'		510429	0		==			
ANR	510583	ArrayIndexing	pfn -> fname [ 0 ]		510429	0					
ANR	510584	PtrMemberAccess	pfn -> fname		510429	0					
ANR	510585	Identifier	pfn		510429	0					
ANR	510586	Identifier	fname		510429	1					
ANR	510587	PrimaryExpression	0		510429	1					
ANR	510588	PrimaryExpression	'|'		510429	1					
ANR	510589	CompoundStatement		30:41:959:959	510429	1					
ANR	510590	ExpressionStatement	"pfn -> iodev = gs_findiodevice ( memory , ( const byte * ) ""%pipe"" , 5 )"	1093:12:36721:36783	510429	0	True				
ANR	510591	AssignmentExpression	"pfn -> iodev = gs_findiodevice ( memory , ( const byte * ) ""%pipe"" , 5 )"		510429	0		=			
ANR	510592	PtrMemberAccess	pfn -> iodev		510429	0					
ANR	510593	Identifier	pfn		510429	0					
ANR	510594	Identifier	iodev		510429	1					
ANR	510595	CallExpression	"gs_findiodevice ( memory , ( const byte * ) ""%pipe"" , 5 )"		510429	1					
ANR	510596	Callee	gs_findiodevice		510429	0					
ANR	510597	Identifier	gs_findiodevice		510429	0					
ANR	510598	ArgumentList	memory		510429	1					
ANR	510599	Argument	memory		510429	0					
ANR	510600	Identifier	memory		510429	0					
ANR	510601	Argument	"( const byte * ) ""%pipe"""		510429	1					
ANR	510602	CastExpression	"( const byte * ) ""%pipe"""		510429	0					
ANR	510603	CastTarget	const byte *		510429	0					
ANR	510604	PrimaryExpression	"""%pipe"""		510429	1					
ANR	510605	Argument	5		510429	2					
ANR	510606	PrimaryExpression	5		510429	0					
ANR	510607	ExpressionStatement	"pfn -> fname ++ , pfn -> len --"	1094:12:36797:36821	510429	1	True				
ANR	510608	Expression	"pfn -> fname ++ , pfn -> len --"		510429	0					
ANR	510609	PostIncDecOperationExpression	pfn -> fname ++		510429	0					
ANR	510610	PtrMemberAccess	pfn -> fname		510429	0					
ANR	510611	Identifier	pfn		510429	0					
ANR	510612	Identifier	fname		510429	1					
ANR	510613	IncDec	++		510429	1					
ANR	510614	PostIncDecOperationExpression	pfn -> len --		510429	1					
ANR	510615	PtrMemberAccess	pfn -> len		510429	0					
ANR	510616	Identifier	pfn		510429	0					
ANR	510617	Identifier	len		510429	1					
ANR	510618	IncDec	--		510429	1					
ANR	510619	ElseStatement	else		510429	0					
ANR	510620	ExpressionStatement	pfn -> iodev = iodev_default ( memory )	1096:12:36850:36884	510429	0	True				
ANR	510621	AssignmentExpression	pfn -> iodev = iodev_default ( memory )		510429	0		=			
ANR	510622	PtrMemberAccess	pfn -> iodev		510429	0					
ANR	510623	Identifier	pfn		510429	0					
ANR	510624	Identifier	iodev		510429	1					
ANR	510625	CallExpression	iodev_default ( memory )		510429	1					
ANR	510626	Callee	iodev_default		510429	0					
ANR	510627	Identifier	iodev_default		510429	0					
ANR	510628	ArgumentList	memory		510429	1					
ANR	510629	Argument	memory		510429	0					
ANR	510630	Identifier	memory		510429	0					
ANR	510631	IfStatement	if ( ! pfn -> iodev )		510429	1					
ANR	510632	Condition	! pfn -> iodev	1097:12:36898:36908	510429	0	True				
ANR	510633	UnaryOperationExpression	! pfn -> iodev		510429	0					
ANR	510634	UnaryOperator	!		510429	0					
ANR	510635	PtrMemberAccess	pfn -> iodev		510429	1					
ANR	510636	Identifier	pfn		510429	0					
ANR	510637	Identifier	iodev		510429	1					
ANR	510638	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1098:12:36923:36963	510429	1	True				
ANR	510639	CallExpression	return_error ( gs_error_undefinedfilename )		510429	0					
ANR	510640	Callee	return_error		510429	0					
ANR	510641	Identifier	return_error		510429	0					
ANR	510642	ArgumentList	gs_error_undefinedfilename		510429	1					
ANR	510643	Argument	gs_error_undefinedfilename		510429	0					
ANR	510644	Identifier	gs_error_undefinedfilename		510429	0					
ANR	510645	IfStatement	if ( ! pfn -> fname )		510429	10					
ANR	510646	Condition	! pfn -> fname	1100:8:36979:36989	510429	0	True				
ANR	510647	UnaryOperationExpression	! pfn -> fname		510429	0					
ANR	510648	UnaryOperator	!		510429	0					
ANR	510649	PtrMemberAccess	pfn -> fname		510429	1					
ANR	510650	Identifier	pfn		510429	0					
ANR	510651	Identifier	fname		510429	1					
ANR	510652	ReturnStatement	return 0 ;	1101:8:37000:37008	510429	1	True				
ANR	510653	PrimaryExpression	0		510429	0					
ANR	510654	ExpressionStatement	"code = gx_parse_output_format ( pfn , pfmt )"	1102:4:37014:37054	510429	11	True				
ANR	510655	AssignmentExpression	"code = gx_parse_output_format ( pfn , pfmt )"		510429	0		=			
ANR	510656	Identifier	code		510429	0					
ANR	510657	CallExpression	"gx_parse_output_format ( pfn , pfmt )"		510429	1					
ANR	510658	Callee	gx_parse_output_format		510429	0					
ANR	510659	Identifier	gx_parse_output_format		510429	0					
ANR	510660	ArgumentList	pfn		510429	1					
ANR	510661	Argument	pfn		510429	0					
ANR	510662	Identifier	pfn		510429	0					
ANR	510663	Argument	pfmt		510429	1					
ANR	510664	Identifier	pfmt		510429	0					
ANR	510665	IfStatement	if ( code < 0 )		510429	12					
ANR	510666	Condition	code < 0	1103:8:37064:37071	510429	0	True				
ANR	510667	RelationalExpression	code < 0		510429	0		<			
ANR	510668	Identifier	code		510429	0					
ANR	510669	PrimaryExpression	0		510429	1					
ANR	510670	ReturnStatement	return code ;	1104:8:37082:37093	510429	1	True				
ANR	510671	Identifier	code		510429	0					
ANR	510672	IfStatement	if ( strlen ( pfn -> iodev -> dname ) + pfn -> len + code >= gp_file_name_sizeof )		510429	13					
ANR	510673	Condition	strlen ( pfn -> iodev -> dname ) + pfn -> len + code >= gp_file_name_sizeof	1105:8:37103:37168	510429	0	True				
ANR	510674	RelationalExpression	strlen ( pfn -> iodev -> dname ) + pfn -> len + code >= gp_file_name_sizeof		510429	0		>=			
ANR	510675	AdditiveExpression	strlen ( pfn -> iodev -> dname ) + pfn -> len + code		510429	0		+			
ANR	510676	CallExpression	strlen ( pfn -> iodev -> dname )		510429	0					
ANR	510677	Callee	strlen		510429	0					
ANR	510678	Identifier	strlen		510429	0					
ANR	510679	ArgumentList	pfn -> iodev -> dname		510429	1					
ANR	510680	Argument	pfn -> iodev -> dname		510429	0					
ANR	510681	PtrMemberAccess	pfn -> iodev -> dname		510429	0					
ANR	510682	PtrMemberAccess	pfn -> iodev		510429	0					
ANR	510683	Identifier	pfn		510429	0					
ANR	510684	Identifier	iodev		510429	1					
ANR	510685	Identifier	dname		510429	1					
ANR	510686	AdditiveExpression	pfn -> len + code		510429	1		+			
ANR	510687	PtrMemberAccess	pfn -> len		510429	0					
ANR	510688	Identifier	pfn		510429	0					
ANR	510689	Identifier	len		510429	1					
ANR	510690	Identifier	code		510429	1					
ANR	510691	Identifier	gp_file_name_sizeof		510429	1					
ANR	510692	ExpressionStatement	return_error ( gs_error_undefinedfilename )	1106:8:37179:37219	510429	1	True				
ANR	510693	CallExpression	return_error ( gs_error_undefinedfilename )		510429	0					
ANR	510694	Callee	return_error		510429	0					
ANR	510695	Identifier	return_error		510429	0					
ANR	510696	ArgumentList	gs_error_undefinedfilename		510429	1					
ANR	510697	Argument	gs_error_undefinedfilename		510429	0					
ANR	510698	Identifier	gs_error_undefinedfilename		510429	0					
ANR	510699	ReturnStatement	return 0 ;	1107:4:37225:37233	510429	14	True				
ANR	510700	PrimaryExpression	0		510429	0					
ANR	510701	ReturnType	int		510429	1					
ANR	510702	Identifier	gx_parse_output_file_name		510429	2					
ANR	510703	ParameterList	"gs_parsed_file_name_t * pfn , const char * * pfmt , const char * fname , uint fnlen , gs_memory_t * memory"		510429	3					
ANR	510704	Parameter	gs_parsed_file_name_t * pfn	1061:26:35622:35647	510429	0	True				
ANR	510705	ParameterType	gs_parsed_file_name_t *		510429	0					
ANR	510706	Identifier	pfn		510429	1					
ANR	510707	Parameter	const char * * pfmt	1061:54:35650:35666	510429	1	True				
ANR	510708	ParameterType	const char * *		510429	0					
ANR	510709	Identifier	pfmt		510429	1					
ANR	510710	Parameter	const char * fname	1062:26:35695:35711	510429	2	True				
ANR	510711	ParameterType	const char *		510429	0					
ANR	510712	Identifier	fname		510429	1					
ANR	510713	Parameter	uint fnlen	1062:45:35714:35723	510429	3	True				
ANR	510714	ParameterType	uint		510429	0					
ANR	510715	Identifier	fnlen		510429	1					
ANR	510716	Parameter	gs_memory_t * memory	1062:57:35726:35744	510429	4	True				
ANR	510717	ParameterType	gs_memory_t *		510429	0					
ANR	510718	Identifier	memory		510429	1					
ANR	510719	CFGEntryNode	ENTRY		510429		True				
ANR	510720	CFGExitNode	EXIT		510429		True				
ANR	510721	Symbol	pfn -> memory		510429						
ANR	510722	Symbol	memory		510429						
ANR	510723	Symbol	code		510429						
ANR	510724	Symbol	pfn -> iodev		510429						
ANR	510725	Symbol	* fname		510429						
ANR	510726	Symbol	* * pfn		510429						
ANR	510727	Symbol	strlen		510429						
ANR	510728	Symbol	pfn -> iodev -> dname		510429						
ANR	510729	Symbol	gx_parse_output_format		510429						
ANR	510730	Symbol	* pfn -> fname		510429						
ANR	510731	Symbol	fnlen		510429						
ANR	510732	Symbol	gs_parse_file_name		510429						
ANR	510733	Symbol	pfn -> fname		510429						
ANR	510734	Symbol	fname		510429						
ANR	510735	Symbol	* pfn		510429						
ANR	510736	Symbol	NULL		510429						
ANR	510737	Symbol	pfmt		510429						
ANR	510738	Symbol	gp_file_name_sizeof		510429						
ANR	510739	Symbol	gs_findiodevice		510429						
ANR	510740	Symbol	gs_error_undefinedfilename		510429						
ANR	510741	Symbol	* pfmt		510429						
ANR	510742	Symbol	iodev_default		510429						
ANR	510743	Symbol	pfn		510429						
ANR	510744	Symbol	* pfn -> iodev		510429						
ANR	510745	Symbol	pfn -> len		510429						
ANR	510746	Function	gx_outputfile_is_separate_pages	1111:0:37292:37591							
ANR	510747	FunctionDef	"gx_outputfile_is_separate_pages (const char * fname , gs_memory_t * memory)"		510746	0					
ANR	510748	CompoundStatement		1113:0:37369:37591	510746	0					
ANR	510749	IdentifierDeclStatement	const char * fmt ;	1114:4:37375:37390	510746	0	True				
ANR	510750	IdentifierDecl	* fmt		510746	0					
ANR	510751	IdentifierDeclType	const char *		510746	0					
ANR	510752	Identifier	fmt		510746	1					
ANR	510753	IdentifierDeclStatement	gs_parsed_file_name_t parsed ;	1115:4:37396:37424	510746	1	True				
ANR	510754	IdentifierDecl	parsed		510746	0					
ANR	510755	IdentifierDeclType	gs_parsed_file_name_t		510746	0					
ANR	510756	Identifier	parsed		510746	1					
ANR	510757	IdentifierDeclStatement	"int code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , memory ) ;"	1116:4:37430:37552	510746	2	True				
ANR	510758	IdentifierDecl	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , memory )"		510746	0					
ANR	510759	IdentifierDeclType	int		510746	0					
ANR	510760	Identifier	code		510746	1					
ANR	510761	AssignmentExpression	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , memory )"		510746	2		=			
ANR	510762	Identifier	code		510746	0					
ANR	510763	CallExpression	"gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , memory )"		510746	1					
ANR	510764	Callee	gx_parse_output_file_name		510746	0					
ANR	510765	Identifier	gx_parse_output_file_name		510746	0					
ANR	510766	ArgumentList	& parsed		510746	1					
ANR	510767	Argument	& parsed		510746	0					
ANR	510768	UnaryOperationExpression	& parsed		510746	0					
ANR	510769	UnaryOperator	&		510746	0					
ANR	510770	Identifier	parsed		510746	1					
ANR	510771	Argument	& fmt		510746	1					
ANR	510772	UnaryOperationExpression	& fmt		510746	0					
ANR	510773	UnaryOperator	&		510746	0					
ANR	510774	Identifier	fmt		510746	1					
ANR	510775	Argument	fname		510746	2					
ANR	510776	Identifier	fname		510746	0					
ANR	510777	Argument	strlen ( fname )		510746	3					
ANR	510778	CallExpression	strlen ( fname )		510746	0					
ANR	510779	Callee	strlen		510746	0					
ANR	510780	Identifier	strlen		510746	0					
ANR	510781	ArgumentList	fname		510746	1					
ANR	510782	Argument	fname		510746	0					
ANR	510783	Identifier	fname		510746	0					
ANR	510784	Argument	memory		510746	4					
ANR	510785	Identifier	memory		510746	0					
ANR	510786	ReturnStatement	return ( code >= 0 && fmt != 0 ) ;	1119:4:37559:37589	510746	3	True				
ANR	510787	AndExpression	code >= 0 && fmt != 0		510746	0		&&			
ANR	510788	RelationalExpression	code >= 0		510746	0		>=			
ANR	510789	Identifier	code		510746	0					
ANR	510790	PrimaryExpression	0		510746	1					
ANR	510791	EqualityExpression	fmt != 0		510746	1		!=			
ANR	510792	Identifier	fmt		510746	0					
ANR	510793	PrimaryExpression	0		510746	1					
ANR	510794	ReturnType	bool		510746	1					
ANR	510795	Identifier	gx_outputfile_is_separate_pages		510746	2					
ANR	510796	ParameterList	"const char * fname , gs_memory_t * memory"		510746	3					
ANR	510797	Parameter	const char * fname	1112:32:37329:37345	510746	0	True				
ANR	510798	ParameterType	const char *		510746	0					
ANR	510799	Identifier	fname		510746	1					
ANR	510800	Parameter	gs_memory_t * memory	1112:51:37348:37366	510746	1	True				
ANR	510801	ParameterType	gs_memory_t *		510746	0					
ANR	510802	Identifier	memory		510746	1					
ANR	510803	CFGEntryNode	ENTRY		510746		True				
ANR	510804	CFGExitNode	EXIT		510746		True				
ANR	510805	Symbol	fname		510746						
ANR	510806	Symbol	strlen		510746						
ANR	510807	Symbol	memory		510746						
ANR	510808	Symbol	code		510746						
ANR	510809	Symbol	& parsed		510746						
ANR	510810	Symbol	& fmt		510746						
ANR	510811	Symbol	gx_parse_output_file_name		510746						
ANR	510812	Symbol	parsed		510746						
ANR	510813	Symbol	fmt		510746						
ANR	510814	Function	gx_device_delete_output_file	1123:0:37672:39237							
ANR	510815	FunctionDef	"gx_device_delete_output_file (const gx_device * dev , const char * fname)"		510814	0					
ANR	510816	CompoundStatement		1124:0:37747:39237	510814	0					
ANR	510817	IdentifierDeclStatement	gs_parsed_file_name_t parsed ;	1125:4:37753:37781	510814	0	True				
ANR	510818	IdentifierDecl	parsed		510814	0					
ANR	510819	IdentifierDeclType	gs_parsed_file_name_t		510814	0					
ANR	510820	Identifier	parsed		510814	1					
ANR	510821	IdentifierDeclStatement	const char * fmt ;	1126:4:37787:37802	510814	1	True				
ANR	510822	IdentifierDecl	* fmt		510814	0					
ANR	510823	IdentifierDeclType	const char *		510814	0					
ANR	510824	Identifier	fmt		510814	1					
ANR	510825	IdentifierDeclStatement	"char * pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" ) ;"	1127:4:37808:37919	510814	2	True				
ANR	510826	IdentifierDecl	"* pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" )"		510814	0					
ANR	510827	IdentifierDeclType	char *		510814	0					
ANR	510828	Identifier	pfname		510814	1					
ANR	510829	AssignmentExpression	"* pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" )"		510814	2		=			
ANR	510830	Identifier	pfname		510814	0					
ANR	510831	CastExpression	"( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" )"		510814	1					
ANR	510832	CastTarget	char *		510814	0					
ANR	510833	CallExpression	"gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_delete_output_file(pfname)"" )"		510814	1					
ANR	510834	Callee	gs_alloc_bytes		510814	0					
ANR	510835	Identifier	gs_alloc_bytes		510814	0					
ANR	510836	ArgumentList	dev -> memory		510814	1					
ANR	510837	Argument	dev -> memory		510814	0					
ANR	510838	PtrMemberAccess	dev -> memory		510814	0					
ANR	510839	Identifier	dev		510814	0					
ANR	510840	Identifier	memory		510814	1					
ANR	510841	Argument	gp_file_name_sizeof		510814	1					
ANR	510842	Identifier	gp_file_name_sizeof		510814	0					
ANR	510843	Argument	"""gx_device_delete_output_file(pfname)"""		510814	2					
ANR	510844	PrimaryExpression	"""gx_device_delete_output_file(pfname)"""		510814	0					
ANR	510845	IdentifierDeclStatement	int code ;	1128:4:37925:37933	510814	3	True				
ANR	510846	IdentifierDecl	code		510814	0					
ANR	510847	IdentifierDeclType	int		510814	0					
ANR	510848	Identifier	code		510814	1					
ANR	510849	IfStatement	if ( pfname == NULL )		510814	4					
ANR	510850	Condition	pfname == NULL	1130:8:37944:37957	510814	0	True				
ANR	510851	EqualityExpression	pfname == NULL		510814	0		==			
ANR	510852	Identifier	pfname		510814	0					
ANR	510853	Identifier	NULL		510814	1					
ANR	510854	CompoundStatement		7:24:212:212	510814	1					
ANR	510855	ExpressionStatement	code = gs_note_error ( gs_error_VMerror )	1131:8:37970:38008	510814	0	True				
ANR	510856	AssignmentExpression	code = gs_note_error ( gs_error_VMerror )		510814	0		=			
ANR	510857	Identifier	code		510814	0					
ANR	510858	CallExpression	gs_note_error ( gs_error_VMerror )		510814	1					
ANR	510859	Callee	gs_note_error		510814	0					
ANR	510860	Identifier	gs_note_error		510814	0					
ANR	510861	ArgumentList	gs_error_VMerror		510814	1					
ANR	510862	Argument	gs_error_VMerror		510814	0					
ANR	510863	Identifier	gs_error_VMerror		510814	0					
ANR	510864	GotoStatement	goto done ;	1132:1:38011:38020	510814	1	True				
ANR	510865	Identifier	done		510814	0					
ANR	510866	ExpressionStatement	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"	1135:4:38033:38156	510814	5	True				
ANR	510867	AssignmentExpression	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		510814	0		=			
ANR	510868	Identifier	code		510814	0					
ANR	510869	CallExpression	"gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		510814	1					
ANR	510870	Callee	gx_parse_output_file_name		510814	0					
ANR	510871	Identifier	gx_parse_output_file_name		510814	0					
ANR	510872	ArgumentList	& parsed		510814	1					
ANR	510873	Argument	& parsed		510814	0					
ANR	510874	UnaryOperationExpression	& parsed		510814	0					
ANR	510875	UnaryOperator	&		510814	0					
ANR	510876	Identifier	parsed		510814	1					
ANR	510877	Argument	& fmt		510814	1					
ANR	510878	UnaryOperationExpression	& fmt		510814	0					
ANR	510879	UnaryOperator	&		510814	0					
ANR	510880	Identifier	fmt		510814	1					
ANR	510881	Argument	fname		510814	2					
ANR	510882	Identifier	fname		510814	0					
ANR	510883	Argument	strlen ( fname )		510814	3					
ANR	510884	CallExpression	strlen ( fname )		510814	0					
ANR	510885	Callee	strlen		510814	0					
ANR	510886	Identifier	strlen		510814	0					
ANR	510887	ArgumentList	fname		510814	1					
ANR	510888	Argument	fname		510814	0					
ANR	510889	Identifier	fname		510814	0					
ANR	510890	Argument	dev -> memory		510814	4					
ANR	510891	PtrMemberAccess	dev -> memory		510814	0					
ANR	510892	Identifier	dev		510814	0					
ANR	510893	Identifier	memory		510814	1					
ANR	510894	IfStatement	if ( code < 0 )		510814	6					
ANR	510895	Condition	code < 0	1137:8:38166:38173	510814	0	True				
ANR	510896	RelationalExpression	code < 0		510814	0		<			
ANR	510897	Identifier	code		510814	0					
ANR	510898	PrimaryExpression	0		510814	1					
ANR	510899	CompoundStatement		14:18:428:428	510814	1					
ANR	510900	GotoStatement	goto done ;	1138:8:38186:38195	510814	0	True				
ANR	510901	Identifier	done		510814	0					
ANR	510902	IfStatement	"if ( parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" ) )"		510814	7					
ANR	510903	Condition	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"	1141:8:38212:38267	510814	0	True				
ANR	510904	AndExpression	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		510814	0		&&			
ANR	510905	MemberAccess	parsed . iodev		510814	0					
ANR	510906	Identifier	parsed		510814	0					
ANR	510907	Identifier	iodev		510814	1					
ANR	510908	UnaryOperationExpression	"! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		510814	1					
ANR	510909	UnaryOperator	!		510814	0					
ANR	510910	CallExpression	"strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		510814	1					
ANR	510911	Callee	strcmp		510814	0					
ANR	510912	Identifier	strcmp		510814	0					
ANR	510913	ArgumentList	parsed . iodev -> dname		510814	1					
ANR	510914	Argument	parsed . iodev -> dname		510814	0					
ANR	510915	PtrMemberAccess	parsed . iodev -> dname		510814	0					
ANR	510916	MemberAccess	parsed . iodev		510814	0					
ANR	510917	Identifier	parsed		510814	0					
ANR	510918	Identifier	iodev		510814	1					
ANR	510919	Identifier	dname		510814	1					
ANR	510920	Argument	"""%stdout%"""		510814	1					
ANR	510921	PrimaryExpression	"""%stdout%"""		510814	0					
ANR	510922	GotoStatement	goto done ;	1142:8:38278:38287	510814	1	True				
ANR	510923	Identifier	done		510814	0					
ANR	510924	IfStatement	if ( fmt )		510814	8					
ANR	510925	Condition	fmt	1144:8:38298:38300	510814	0	True				
ANR	510926	Identifier	fmt		510814	0					
ANR	510927	CompoundStatement		22:8:601:633	510814	1					
ANR	510928	IdentifierDeclStatement	long count1 = dev -> PageCount + 1 ;	1145:8:38349:38381	510814	0	True				
ANR	510929	IdentifierDecl	count1 = dev -> PageCount + 1		510814	0					
ANR	510930	IdentifierDeclType	long		510814	0					
ANR	510931	Identifier	count1		510814	1					
ANR	510932	AssignmentExpression	count1 = dev -> PageCount + 1		510814	2		=			
ANR	510933	Identifier	count1		510814	0					
ANR	510934	AdditiveExpression	dev -> PageCount + 1		510814	1		+			
ANR	510935	PtrMemberAccess	dev -> PageCount		510814	0					
ANR	510936	Identifier	dev		510814	0					
ANR	510937	Identifier	PageCount		510814	1					
ANR	510938	PrimaryExpression	1		510814	1					
ANR	510939	WhileStatement	while ( * fmt != 'l' && * fmt != '%' )		510814	1					
ANR	510940	Condition	* fmt != 'l' && * fmt != '%'	1147:15:38399:38424	510814	0	True				
ANR	510941	AndExpression	* fmt != 'l' && * fmt != '%'		510814	0		&&			
ANR	510942	EqualityExpression	* fmt != 'l'		510814	0		!=			
ANR	510943	UnaryOperationExpression	* fmt		510814	0					
ANR	510944	UnaryOperator	*		510814	0					
ANR	510945	Identifier	fmt		510814	1					
ANR	510946	PrimaryExpression	'l'		510814	1					
ANR	510947	EqualityExpression	* fmt != '%'		510814	1		!=			
ANR	510948	UnaryOperationExpression	* fmt		510814	0					
ANR	510949	UnaryOperator	*		510814	0					
ANR	510950	Identifier	fmt		510814	1					
ANR	510951	PrimaryExpression	'%'		510814	1					
ANR	510952	ExpressionStatement	-- fmt	1148:12:38439:38444	510814	1	True				
ANR	510953	UnaryExpression	-- fmt		510814	0					
ANR	510954	IncDec	--		510814	0					
ANR	510955	Identifier	fmt		510814	1					
ANR	510956	IfStatement	if ( * fmt == 'l' )		510814	2					
ANR	510957	Condition	* fmt == 'l'	1149:12:38458:38468	510814	0	True				
ANR	510958	EqualityExpression	* fmt == 'l'		510814	0		==			
ANR	510959	UnaryOperationExpression	* fmt		510814	0					
ANR	510960	UnaryOperator	*		510814	0					
ANR	510961	Identifier	fmt		510814	1					
ANR	510962	PrimaryExpression	'l'		510814	1					
ANR	510963	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname , count1 )"	1150:12:38483:38523	510814	1	True				
ANR	510964	CallExpression	"gs_sprintf ( pfname , parsed . fname , count1 )"		510814	0					
ANR	510965	Callee	gs_sprintf		510814	0					
ANR	510966	Identifier	gs_sprintf		510814	0					
ANR	510967	ArgumentList	pfname		510814	1					
ANR	510968	Argument	pfname		510814	0					
ANR	510969	Identifier	pfname		510814	0					
ANR	510970	Argument	parsed . fname		510814	1					
ANR	510971	MemberAccess	parsed . fname		510814	0					
ANR	510972	Identifier	parsed		510814	0					
ANR	510973	Identifier	fname		510814	1					
ANR	510974	Argument	count1		510814	2					
ANR	510975	Identifier	count1		510814	0					
ANR	510976	ElseStatement	else		510814	0					
ANR	510977	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname , ( int ) count1 )"	1152:12:38550:38595	510814	0	True				
ANR	510978	CallExpression	"gs_sprintf ( pfname , parsed . fname , ( int ) count1 )"		510814	0					
ANR	510979	Callee	gs_sprintf		510814	0					
ANR	510980	Identifier	gs_sprintf		510814	0					
ANR	510981	ArgumentList	pfname		510814	1					
ANR	510982	Argument	pfname		510814	0					
ANR	510983	Identifier	pfname		510814	0					
ANR	510984	Argument	parsed . fname		510814	1					
ANR	510985	MemberAccess	parsed . fname		510814	0					
ANR	510986	Identifier	parsed		510814	0					
ANR	510987	Identifier	fname		510814	1					
ANR	510988	Argument	( int ) count1		510814	2					
ANR	510989	CastExpression	( int ) count1		510814	0					
ANR	510990	CastTarget	int		510814	0					
ANR	510991	Identifier	count1		510814	1					
ANR	510992	ElseStatement	else		510814	0					
ANR	510993	IfStatement	"if ( parsed . len && strchr ( parsed . fname , '%' ) )"		510814	0					
ANR	510994	Condition	"parsed . len && strchr ( parsed . fname , '%' )"	1153:15:38612:38650	510814	0	True				
ANR	510995	AndExpression	"parsed . len && strchr ( parsed . fname , '%' )"		510814	0		&&			
ANR	510996	MemberAccess	parsed . len		510814	0					
ANR	510997	Identifier	parsed		510814	0					
ANR	510998	Identifier	len		510814	1					
ANR	510999	CallExpression	"strchr ( parsed . fname , '%' )"		510814	1					
ANR	511000	Callee	strchr		510814	0					
ANR	511001	Identifier	strchr		510814	0					
ANR	511002	ArgumentList	parsed . fname		510814	1					
ANR	511003	Argument	parsed . fname		510814	0					
ANR	511004	MemberAccess	parsed . fname		510814	0					
ANR	511005	Identifier	parsed		510814	0					
ANR	511006	Identifier	fname		510814	1					
ANR	511007	Argument	'%'		510814	1					
ANR	511008	PrimaryExpression	'%'		510814	0					
ANR	511009	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname )"	1154:8:38700:38732	510814	1	True				
ANR	511010	CallExpression	"gs_sprintf ( pfname , parsed . fname )"		510814	0					
ANR	511011	Callee	gs_sprintf		510814	0					
ANR	511012	Identifier	gs_sprintf		510814	0					
ANR	511013	ArgumentList	pfname		510814	1					
ANR	511014	Argument	pfname		510814	0					
ANR	511015	Identifier	pfname		510814	0					
ANR	511016	Argument	parsed . fname		510814	1					
ANR	511017	MemberAccess	parsed . fname		510814	0					
ANR	511018	Identifier	parsed		510814	0					
ANR	511019	Identifier	fname		510814	1					
ANR	511020	ElseStatement	else		510814	0					
ANR	511021	ExpressionStatement	pfname [ 0 ] = 0	1156:8:38751:38764	510814	0	True				
ANR	511022	AssignmentExpression	pfname [ 0 ] = 0		510814	0		=			
ANR	511023	ArrayIndexing	pfname [ 0 ]		510814	0					
ANR	511024	Identifier	pfname		510814	0					
ANR	511025	PrimaryExpression	0		510814	1					
ANR	511026	PrimaryExpression	0		510814	1					
ANR	511027	IfStatement	if ( pfname [ 0 ] )		510814	9					
ANR	511028	Condition	pfname [ 0 ]	1157:8:38811:38819	510814	0	True				
ANR	511029	ArrayIndexing	pfname [ 0 ]		510814	0					
ANR	511030	Identifier	pfname		510814	0					
ANR	511031	PrimaryExpression	0		510814	1					
ANR	511032	CompoundStatement		34:19:1074:1074	510814	1					
ANR	511033	ExpressionStatement	parsed . fname = pfname	1158:8:38832:38853	510814	0	True				
ANR	511034	AssignmentExpression	parsed . fname = pfname		510814	0		=			
ANR	511035	MemberAccess	parsed . fname		510814	0					
ANR	511036	Identifier	parsed		510814	0					
ANR	511037	Identifier	fname		510814	1					
ANR	511038	Identifier	pfname		510814	1					
ANR	511039	ExpressionStatement	parsed . len = strlen ( parsed . fname )	1159:8:38863:38896	510814	1	True				
ANR	511040	AssignmentExpression	parsed . len = strlen ( parsed . fname )		510814	0		=			
ANR	511041	MemberAccess	parsed . len		510814	0					
ANR	511042	Identifier	parsed		510814	0					
ANR	511043	Identifier	len		510814	1					
ANR	511044	CallExpression	strlen ( parsed . fname )		510814	1					
ANR	511045	Callee	strlen		510814	0					
ANR	511046	Identifier	strlen		510814	0					
ANR	511047	ArgumentList	parsed . fname		510814	1					
ANR	511048	Argument	parsed . fname		510814	0					
ANR	511049	MemberAccess	parsed . fname		510814	0					
ANR	511050	Identifier	parsed		510814	0					
ANR	511051	Identifier	fname		510814	1					
ANR	511052	IfStatement	if ( parsed . iodev )		510814	10					
ANR	511053	Condition	parsed . iodev	1161:8:38912:38923	510814	0	True				
ANR	511054	MemberAccess	parsed . iodev		510814	0					
ANR	511055	Identifier	parsed		510814	0					
ANR	511056	Identifier	iodev		510814	1					
ANR	511057	ExpressionStatement	"code = parsed . iodev -> procs . delete_file ( ( gx_io_device * ) ( & parsed . iodev ) , ( const char * ) parsed . fname )"	1162:8:38934:39033	510814	1	True				
ANR	511058	AssignmentExpression	"code = parsed . iodev -> procs . delete_file ( ( gx_io_device * ) ( & parsed . iodev ) , ( const char * ) parsed . fname )"		510814	0		=			
ANR	511059	Identifier	code		510814	0					
ANR	511060	CallExpression	"parsed . iodev -> procs . delete_file ( ( gx_io_device * ) ( & parsed . iodev ) , ( const char * ) parsed . fname )"		510814	1					
ANR	511061	Callee	parsed . iodev -> procs . delete_file		510814	0					
ANR	511062	MemberAccess	parsed . iodev -> procs . delete_file		510814	0					
ANR	511063	PtrMemberAccess	parsed . iodev -> procs		510814	0					
ANR	511064	MemberAccess	parsed . iodev		510814	0					
ANR	511065	Identifier	parsed		510814	0					
ANR	511066	Identifier	iodev		510814	1					
ANR	511067	Identifier	procs		510814	1					
ANR	511068	Identifier	delete_file		510814	1					
ANR	511069	ArgumentList	( gx_io_device * ) ( & parsed . iodev )		510814	1					
ANR	511070	Argument	( gx_io_device * ) ( & parsed . iodev )		510814	0					
ANR	511071	CastExpression	( gx_io_device * ) ( & parsed . iodev )		510814	0					
ANR	511072	CastTarget	gx_io_device *		510814	0					
ANR	511073	UnaryOperationExpression	& parsed . iodev		510814	1					
ANR	511074	UnaryOperator	&		510814	0					
ANR	511075	MemberAccess	parsed . iodev		510814	1					
ANR	511076	Identifier	parsed		510814	0					
ANR	511077	Identifier	iodev		510814	1					
ANR	511078	Argument	( const char * ) parsed . fname		510814	1					
ANR	511079	CastExpression	( const char * ) parsed . fname		510814	0					
ANR	511080	CastTarget	const char *		510814	0					
ANR	511081	MemberAccess	parsed . fname		510814	1					
ANR	511082	Identifier	parsed		510814	0					
ANR	511083	Identifier	fname		510814	1					
ANR	511084	ElseStatement	else		510814	0					
ANR	511085	ExpressionStatement	code = gs_note_error ( gs_error_invalidfileaccess )	1164:8:39052:39100	510814	0	True				
ANR	511086	AssignmentExpression	code = gs_note_error ( gs_error_invalidfileaccess )		510814	0		=			
ANR	511087	Identifier	code		510814	0					
ANR	511088	CallExpression	gs_note_error ( gs_error_invalidfileaccess )		510814	1					
ANR	511089	Callee	gs_note_error		510814	0					
ANR	511090	Identifier	gs_note_error		510814	0					
ANR	511091	ArgumentList	gs_error_invalidfileaccess		510814	1					
ANR	511092	Argument	gs_error_invalidfileaccess		510814	0					
ANR	511093	Identifier	gs_error_invalidfileaccess		510814	0					
ANR	511094	Label	done :	1166:0:39103:39107	510814	11	True				
ANR	511095	Identifier	done		510814	0					
ANR	511096	IfStatement	if ( pfname != NULL )		510814	12					
ANR	511097	Condition	pfname != NULL	1167:8:39117:39130	510814	0	True				
ANR	511098	EqualityExpression	pfname != NULL		510814	0		!=			
ANR	511099	Identifier	pfname		510814	0					
ANR	511100	Identifier	NULL		510814	1					
ANR	511101	ExpressionStatement	"gs_free_object ( dev -> memory , pfname , ""gx_device_delete_output_file(pfname)"" )"	1168:8:39141:39216	510814	1	True				
ANR	511102	CallExpression	"gs_free_object ( dev -> memory , pfname , ""gx_device_delete_output_file(pfname)"" )"		510814	0					
ANR	511103	Callee	gs_free_object		510814	0					
ANR	511104	Identifier	gs_free_object		510814	0					
ANR	511105	ArgumentList	dev -> memory		510814	1					
ANR	511106	Argument	dev -> memory		510814	0					
ANR	511107	PtrMemberAccess	dev -> memory		510814	0					
ANR	511108	Identifier	dev		510814	0					
ANR	511109	Identifier	memory		510814	1					
ANR	511110	Argument	pfname		510814	1					
ANR	511111	Identifier	pfname		510814	0					
ANR	511112	Argument	"""gx_device_delete_output_file(pfname)"""		510814	2					
ANR	511113	PrimaryExpression	"""gx_device_delete_output_file(pfname)"""		510814	0					
ANR	511114	ReturnStatement	return ( code ) ;	1170:4:39223:39235	510814	13	True				
ANR	511115	Identifier	code		510814	0					
ANR	511116	ReturnType	int		510814	1					
ANR	511117	Identifier	gx_device_delete_output_file		510814	2					
ANR	511118	ParameterList	"const gx_device * dev , const char * fname"		510814	3					
ANR	511119	Parameter	const gx_device * dev	1123:33:37705:37725	510814	0	True				
ANR	511120	ParameterType	const gx_device *		510814	0					
ANR	511121	Identifier	dev		510814	1					
ANR	511122	Parameter	const char * fname	1123:56:37728:37744	510814	1	True				
ANR	511123	ParameterType	const char *		510814	0					
ANR	511124	Identifier	fname		510814	1					
ANR	511125	CFGEntryNode	ENTRY		510814		True				
ANR	511126	CFGExitNode	EXIT		510814		True				
ANR	511127	Symbol	* dev		510814						
ANR	511128	Symbol	count1		510814						
ANR	511129	Symbol	& parsed . iodev		510814						
ANR	511130	Symbol	code		510814						
ANR	511131	Symbol	parsed . iodev -> procs		510814						
ANR	511132	Symbol	* fmt		510814						
ANR	511133	Symbol	strchr		510814						
ANR	511134	Symbol	parsed . iodev -> dname		510814						
ANR	511135	Symbol	fmt		510814						
ANR	511136	Symbol	strlen		510814						
ANR	511137	Symbol	dev		510814						
ANR	511138	Symbol	& parsed		510814						
ANR	511139	Symbol	* parsed . iodev		510814						
ANR	511140	Symbol	parsed . fname		510814						
ANR	511141	Symbol	dev -> PageCount		510814						
ANR	511142	Symbol	parsed . len		510814						
ANR	511143	Symbol	* pfname		510814						
ANR	511144	Symbol	strcmp		510814						
ANR	511145	Symbol	fname		510814						
ANR	511146	Symbol	gs_alloc_bytes		510814						
ANR	511147	Symbol	NULL		510814						
ANR	511148	Symbol	* parsed		510814						
ANR	511149	Symbol	parsed . iodev -> procs . delete_file		510814						
ANR	511150	Symbol	gx_parse_output_file_name		510814						
ANR	511151	Symbol	gp_file_name_sizeof		510814						
ANR	511152	Symbol	pfname		510814						
ANR	511153	Symbol	gs_error_VMerror		510814						
ANR	511154	Symbol	dev -> memory		510814						
ANR	511155	Symbol	gs_note_error		510814						
ANR	511156	Symbol	& fmt		510814						
ANR	511157	Symbol	parsed		510814						
ANR	511158	Symbol	parsed . iodev		510814						
ANR	511159	Symbol	gs_error_invalidfileaccess		510814						
ANR	511160	Function	gx_device_open_output_file	1174:0:39281:42160							
ANR	511161	FunctionDef	"gx_device_open_output_file (const gx_device * dev , char * fname , bool binary , bool positionable , FILE * * pfile)"		511160	0					
ANR	511162	CompoundStatement		1177:0:39422:42160	511160	0					
ANR	511163	IdentifierDeclStatement	gs_parsed_file_name_t parsed ;	1178:4:39428:39456	511160	0	True				
ANR	511164	IdentifierDecl	parsed		511160	0					
ANR	511165	IdentifierDeclType	gs_parsed_file_name_t		511160	0					
ANR	511166	Identifier	parsed		511160	1					
ANR	511167	IdentifierDeclStatement	const char * fmt ;	1179:4:39462:39477	511160	1	True				
ANR	511168	IdentifierDecl	* fmt		511160	0					
ANR	511169	IdentifierDeclType	const char *		511160	0					
ANR	511170	Identifier	fmt		511160	1					
ANR	511171	IdentifierDeclStatement	"char * pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" ) ;"	1180:4:39483:39592	511160	2	True				
ANR	511172	IdentifierDecl	"* pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" )"		511160	0					
ANR	511173	IdentifierDeclType	char *		511160	0					
ANR	511174	Identifier	pfname		511160	1					
ANR	511175	AssignmentExpression	"* pfname = ( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" )"		511160	2		=			
ANR	511176	Identifier	pfname		511160	0					
ANR	511177	CastExpression	"( char * ) gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" )"		511160	1					
ANR	511178	CastTarget	char *		511160	0					
ANR	511179	CallExpression	"gs_alloc_bytes ( dev -> memory , gp_file_name_sizeof , ""gx_device_open_output_file(pfname)"" )"		511160	1					
ANR	511180	Callee	gs_alloc_bytes		511160	0					
ANR	511181	Identifier	gs_alloc_bytes		511160	0					
ANR	511182	ArgumentList	dev -> memory		511160	1					
ANR	511183	Argument	dev -> memory		511160	0					
ANR	511184	PtrMemberAccess	dev -> memory		511160	0					
ANR	511185	Identifier	dev		511160	0					
ANR	511186	Identifier	memory		511160	1					
ANR	511187	Argument	gp_file_name_sizeof		511160	1					
ANR	511188	Identifier	gp_file_name_sizeof		511160	0					
ANR	511189	Argument	"""gx_device_open_output_file(pfname)"""		511160	2					
ANR	511190	PrimaryExpression	"""gx_device_open_output_file(pfname)"""		511160	0					
ANR	511191	IdentifierDeclStatement	int code ;	1181:4:39598:39606	511160	3	True				
ANR	511192	IdentifierDecl	code		511160	0					
ANR	511193	IdentifierDeclType	int		511160	0					
ANR	511194	Identifier	code		511160	1					
ANR	511195	IfStatement	if ( pfname == NULL )		511160	4					
ANR	511196	Condition	pfname == NULL	1183:8:39617:39630	511160	0	True				
ANR	511197	EqualityExpression	pfname == NULL		511160	0		==			
ANR	511198	Identifier	pfname		511160	0					
ANR	511199	Identifier	NULL		511160	1					
ANR	511200	CompoundStatement		7:24:210:210	511160	1					
ANR	511201	ExpressionStatement	code = gs_note_error ( gs_error_VMerror )	1184:8:39643:39681	511160	0	True				
ANR	511202	AssignmentExpression	code = gs_note_error ( gs_error_VMerror )		511160	0		=			
ANR	511203	Identifier	code		511160	0					
ANR	511204	CallExpression	gs_note_error ( gs_error_VMerror )		511160	1					
ANR	511205	Callee	gs_note_error		511160	0					
ANR	511206	Identifier	gs_note_error		511160	0					
ANR	511207	ArgumentList	gs_error_VMerror		511160	1					
ANR	511208	Argument	gs_error_VMerror		511160	0					
ANR	511209	Identifier	gs_error_VMerror		511160	0					
ANR	511210	GotoStatement	goto done ;	1185:1:39684:39693	511160	1	True				
ANR	511211	Identifier	done		511160	0					
ANR	511212	IfStatement	if ( strlen ( fname ) == 0 )		511160	5					
ANR	511213	Condition	strlen ( fname ) == 0	1188:8:39711:39728	511160	0	True				
ANR	511214	EqualityExpression	strlen ( fname ) == 0		511160	0		==			
ANR	511215	CallExpression	strlen ( fname )		511160	0					
ANR	511216	Callee	strlen		511160	0					
ANR	511217	Identifier	strlen		511160	0					
ANR	511218	ArgumentList	fname		511160	1					
ANR	511219	Argument	fname		511160	0					
ANR	511220	Identifier	fname		511160	0					
ANR	511221	PrimaryExpression	0		511160	1					
ANR	511222	CompoundStatement		12:28:308:308	511160	1					
ANR	511223	ExpressionStatement	code = gs_note_error ( gs_error_undefinedfilename )	1189:8:39741:39789	511160	0	True				
ANR	511224	AssignmentExpression	code = gs_note_error ( gs_error_undefinedfilename )		511160	0		=			
ANR	511225	Identifier	code		511160	0					
ANR	511226	CallExpression	gs_note_error ( gs_error_undefinedfilename )		511160	1					
ANR	511227	Callee	gs_note_error		511160	0					
ANR	511228	Identifier	gs_note_error		511160	0					
ANR	511229	ArgumentList	gs_error_undefinedfilename		511160	1					
ANR	511230	Argument	gs_error_undefinedfilename		511160	0					
ANR	511231	Identifier	gs_error_undefinedfilename		511160	0					
ANR	511232	ExpressionStatement	"emprintf1 ( dev -> memory , ""Device '%s' requires an output file but no file was specified.\\n"" , dev -> dname )"	1190:8:39799:39901	511160	1	True				
ANR	511233	CallExpression	"emprintf1 ( dev -> memory , ""Device '%s' requires an output file but no file was specified.\\n"" , dev -> dname )"		511160	0					
ANR	511234	Callee	emprintf1		511160	0					
ANR	511235	Identifier	emprintf1		511160	0					
ANR	511236	ArgumentList	dev -> memory		511160	1					
ANR	511237	Argument	dev -> memory		511160	0					
ANR	511238	PtrMemberAccess	dev -> memory		511160	0					
ANR	511239	Identifier	dev		511160	0					
ANR	511240	Identifier	memory		511160	1					
ANR	511241	Argument	"""Device '%s' requires an output file but no file was specified.\\n"""		511160	1					
ANR	511242	PrimaryExpression	"""Device '%s' requires an output file but no file was specified.\\n"""		511160	0					
ANR	511243	Argument	dev -> dname		511160	2					
ANR	511244	PtrMemberAccess	dev -> dname		511160	0					
ANR	511245	Identifier	dev		511160	0					
ANR	511246	Identifier	dname		511160	1					
ANR	511247	GotoStatement	goto done ;	1191:8:39911:39920	511160	2	True				
ANR	511248	Identifier	done		511160	0					
ANR	511249	ExpressionStatement	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"	1193:4:39932:40014	511160	6	True				
ANR	511250	AssignmentExpression	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		511160	0		=			
ANR	511251	Identifier	code		511160	0					
ANR	511252	CallExpression	"gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		511160	1					
ANR	511253	Callee	gx_parse_output_file_name		511160	0					
ANR	511254	Identifier	gx_parse_output_file_name		511160	0					
ANR	511255	ArgumentList	& parsed		511160	1					
ANR	511256	Argument	& parsed		511160	0					
ANR	511257	UnaryOperationExpression	& parsed		511160	0					
ANR	511258	UnaryOperator	&		511160	0					
ANR	511259	Identifier	parsed		511160	1					
ANR	511260	Argument	& fmt		511160	1					
ANR	511261	UnaryOperationExpression	& fmt		511160	0					
ANR	511262	UnaryOperator	&		511160	0					
ANR	511263	Identifier	fmt		511160	1					
ANR	511264	Argument	fname		511160	2					
ANR	511265	Identifier	fname		511160	0					
ANR	511266	Argument	strlen ( fname )		511160	3					
ANR	511267	CallExpression	strlen ( fname )		511160	0					
ANR	511268	Callee	strlen		511160	0					
ANR	511269	Identifier	strlen		511160	0					
ANR	511270	ArgumentList	fname		511160	1					
ANR	511271	Argument	fname		511160	0					
ANR	511272	Identifier	fname		511160	0					
ANR	511273	Argument	dev -> memory		511160	4					
ANR	511274	PtrMemberAccess	dev -> memory		511160	0					
ANR	511275	Identifier	dev		511160	0					
ANR	511276	Identifier	memory		511160	1					
ANR	511277	IfStatement	if ( code < 0 )		511160	7					
ANR	511278	Condition	code < 0	1194:8:40024:40031	511160	0	True				
ANR	511279	RelationalExpression	code < 0		511160	0		<			
ANR	511280	Identifier	code		511160	0					
ANR	511281	PrimaryExpression	0		511160	1					
ANR	511282	CompoundStatement		18:18:611:611	511160	1					
ANR	511283	GotoStatement	goto done ;	1195:8:40044:40053	511160	0	True				
ANR	511284	Identifier	done		511160	0					
ANR	511285	IfStatement	"if ( parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" ) )"		511160	8					
ANR	511286	Condition	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"	1198:8:40070:40125	511160	0	True				
ANR	511287	AndExpression	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		511160	0		&&			
ANR	511288	MemberAccess	parsed . iodev		511160	0					
ANR	511289	Identifier	parsed		511160	0					
ANR	511290	Identifier	iodev		511160	1					
ANR	511291	UnaryOperationExpression	"! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		511160	1					
ANR	511292	UnaryOperator	!		511160	0					
ANR	511293	CallExpression	"strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		511160	1					
ANR	511294	Callee	strcmp		511160	0					
ANR	511295	Identifier	strcmp		511160	0					
ANR	511296	ArgumentList	parsed . iodev -> dname		511160	1					
ANR	511297	Argument	parsed . iodev -> dname		511160	0					
ANR	511298	PtrMemberAccess	parsed . iodev -> dname		511160	0					
ANR	511299	MemberAccess	parsed . iodev		511160	0					
ANR	511300	Identifier	parsed		511160	0					
ANR	511301	Identifier	iodev		511160	1					
ANR	511302	Identifier	dname		511160	1					
ANR	511303	Argument	"""%stdout%"""		511160	1					
ANR	511304	PrimaryExpression	"""%stdout%"""		511160	0					
ANR	511305	CompoundStatement		22:66:705:705	511160	1					
ANR	511306	IfStatement	if ( parsed . fname )		511160	0					
ANR	511307	Condition	parsed . fname	1199:12:40142:40153	511160	0	True				
ANR	511308	MemberAccess	parsed . fname		511160	0					
ANR	511309	Identifier	parsed		511160	0					
ANR	511310	Identifier	fname		511160	1					
ANR	511311	CompoundStatement		23:26:733:733	511160	1					
ANR	511312	ExpressionStatement	code = gs_note_error ( gs_error_undefinedfilename )	1200:12:40170:40218	511160	0	True				
ANR	511313	AssignmentExpression	code = gs_note_error ( gs_error_undefinedfilename )		511160	0		=			
ANR	511314	Identifier	code		511160	0					
ANR	511315	CallExpression	gs_note_error ( gs_error_undefinedfilename )		511160	1					
ANR	511316	Callee	gs_note_error		511160	0					
ANR	511317	Identifier	gs_note_error		511160	0					
ANR	511318	ArgumentList	gs_error_undefinedfilename		511160	1					
ANR	511319	Argument	gs_error_undefinedfilename		511160	0					
ANR	511320	Identifier	gs_error_undefinedfilename		511160	0					
ANR	511321	GotoStatement	goto done ;	1201:5:40225:40234	511160	1	True				
ANR	511322	Identifier	done		511160	0					
ANR	511323	ExpressionStatement	* pfile = dev -> memory -> gs_lib_ctx -> fstdout	1203:8:40247:40288	511160	1	True				
ANR	511324	AssignmentExpression	* pfile = dev -> memory -> gs_lib_ctx -> fstdout		511160	0		=			
ANR	511325	UnaryOperationExpression	* pfile		511160	0					
ANR	511326	UnaryOperator	*		511160	0					
ANR	511327	Identifier	pfile		511160	1					
ANR	511328	PtrMemberAccess	dev -> memory -> gs_lib_ctx -> fstdout		511160	1					
ANR	511329	PtrMemberAccess	dev -> memory -> gs_lib_ctx		511160	0					
ANR	511330	PtrMemberAccess	dev -> memory		511160	0					
ANR	511331	Identifier	dev		511160	0					
ANR	511332	Identifier	memory		511160	1					
ANR	511333	Identifier	gs_lib_ctx		511160	1					
ANR	511334	Identifier	fstdout		511160	1					
ANR	511335	ExpressionStatement	"code = gp_setmode_binary ( * pfile , true )"	1205:8:40336:40374	511160	2	True				
ANR	511336	AssignmentExpression	"code = gp_setmode_binary ( * pfile , true )"		511160	0		=			
ANR	511337	Identifier	code		511160	0					
ANR	511338	CallExpression	"gp_setmode_binary ( * pfile , true )"		511160	1					
ANR	511339	Callee	gp_setmode_binary		511160	0					
ANR	511340	Identifier	gp_setmode_binary		511160	0					
ANR	511341	ArgumentList	* pfile		511160	1					
ANR	511342	Argument	* pfile		511160	0					
ANR	511343	UnaryOperationExpression	* pfile		511160	0					
ANR	511344	UnaryOperator	*		511160	0					
ANR	511345	Identifier	pfile		511160	1					
ANR	511346	Argument	true		511160	1					
ANR	511347	Identifier	true		511160	0					
ANR	511348	GotoStatement	goto done ;	1206:1:40377:40386	511160	3	True				
ANR	511349	Identifier	done		511160	0					
ANR	511350	ElseStatement	else		511160	0					
ANR	511351	IfStatement	"if ( parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%pipe%"" ) )"		511160	0					
ANR	511352	Condition	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%pipe%"" )"	1207:15:40403:40456	511160	0	True				
ANR	511353	AndExpression	"parsed . iodev && ! strcmp ( parsed . iodev -> dname , ""%pipe%"" )"		511160	0		&&			
ANR	511354	MemberAccess	parsed . iodev		511160	0					
ANR	511355	Identifier	parsed		511160	0					
ANR	511356	Identifier	iodev		511160	1					
ANR	511357	UnaryOperationExpression	"! strcmp ( parsed . iodev -> dname , ""%pipe%"" )"		511160	1					
ANR	511358	UnaryOperator	!		511160	0					
ANR	511359	CallExpression	"strcmp ( parsed . iodev -> dname , ""%pipe%"" )"		511160	1					
ANR	511360	Callee	strcmp		511160	0					
ANR	511361	Identifier	strcmp		511160	0					
ANR	511362	ArgumentList	parsed . iodev -> dname		511160	1					
ANR	511363	Argument	parsed . iodev -> dname		511160	0					
ANR	511364	PtrMemberAccess	parsed . iodev -> dname		511160	0					
ANR	511365	MemberAccess	parsed . iodev		511160	0					
ANR	511366	Identifier	parsed		511160	0					
ANR	511367	Identifier	iodev		511160	1					
ANR	511368	Identifier	dname		511160	1					
ANR	511369	Argument	"""%pipe%"""		511160	1					
ANR	511370	PrimaryExpression	"""%pipe%"""		511160	0					
ANR	511371	CompoundStatement		31:71:1036:1036	511160	1					
ANR	511372	ExpressionStatement	positionable = false	1208:8:40469:40489	511160	0	True				
ANR	511373	AssignmentExpression	positionable = false		511160	0		=			
ANR	511374	Identifier	positionable		511160	0					
ANR	511375	Identifier	false		511160	1					
ANR	511376	IfStatement	if ( fmt )		511160	9					
ANR	511377	Condition	fmt	1210:8:40505:40507	511160	0	True				
ANR	511378	Identifier	fmt		511160	0					
ANR	511379	CompoundStatement		35:8:1133:1165	511160	1					
ANR	511380	IdentifierDeclStatement	long count1 = dev -> PageCount + 1 ;	1211:8:40556:40588	511160	0	True				
ANR	511381	IdentifierDecl	count1 = dev -> PageCount + 1		511160	0					
ANR	511382	IdentifierDeclType	long		511160	0					
ANR	511383	Identifier	count1		511160	1					
ANR	511384	AssignmentExpression	count1 = dev -> PageCount + 1		511160	2		=			
ANR	511385	Identifier	count1		511160	0					
ANR	511386	AdditiveExpression	dev -> PageCount + 1		511160	1		+			
ANR	511387	PtrMemberAccess	dev -> PageCount		511160	0					
ANR	511388	Identifier	dev		511160	0					
ANR	511389	Identifier	PageCount		511160	1					
ANR	511390	PrimaryExpression	1		511160	1					
ANR	511391	WhileStatement	while ( * fmt != 'l' && * fmt != '%' )		511160	1					
ANR	511392	Condition	* fmt != 'l' && * fmt != '%'	1213:15:40606:40631	511160	0	True				
ANR	511393	AndExpression	* fmt != 'l' && * fmt != '%'		511160	0		&&			
ANR	511394	EqualityExpression	* fmt != 'l'		511160	0		!=			
ANR	511395	UnaryOperationExpression	* fmt		511160	0					
ANR	511396	UnaryOperator	*		511160	0					
ANR	511397	Identifier	fmt		511160	1					
ANR	511398	PrimaryExpression	'l'		511160	1					
ANR	511399	EqualityExpression	* fmt != '%'		511160	1		!=			
ANR	511400	UnaryOperationExpression	* fmt		511160	0					
ANR	511401	UnaryOperator	*		511160	0					
ANR	511402	Identifier	fmt		511160	1					
ANR	511403	PrimaryExpression	'%'		511160	1					
ANR	511404	ExpressionStatement	-- fmt	1214:12:40646:40651	511160	1	True				
ANR	511405	UnaryExpression	-- fmt		511160	0					
ANR	511406	IncDec	--		511160	0					
ANR	511407	Identifier	fmt		511160	1					
ANR	511408	IfStatement	if ( * fmt == 'l' )		511160	2					
ANR	511409	Condition	* fmt == 'l'	1215:12:40665:40675	511160	0	True				
ANR	511410	EqualityExpression	* fmt == 'l'		511160	0		==			
ANR	511411	UnaryOperationExpression	* fmt		511160	0					
ANR	511412	UnaryOperator	*		511160	0					
ANR	511413	Identifier	fmt		511160	1					
ANR	511414	PrimaryExpression	'l'		511160	1					
ANR	511415	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname , count1 )"	1216:12:40690:40730	511160	1	True				
ANR	511416	CallExpression	"gs_sprintf ( pfname , parsed . fname , count1 )"		511160	0					
ANR	511417	Callee	gs_sprintf		511160	0					
ANR	511418	Identifier	gs_sprintf		511160	0					
ANR	511419	ArgumentList	pfname		511160	1					
ANR	511420	Argument	pfname		511160	0					
ANR	511421	Identifier	pfname		511160	0					
ANR	511422	Argument	parsed . fname		511160	1					
ANR	511423	MemberAccess	parsed . fname		511160	0					
ANR	511424	Identifier	parsed		511160	0					
ANR	511425	Identifier	fname		511160	1					
ANR	511426	Argument	count1		511160	2					
ANR	511427	Identifier	count1		511160	0					
ANR	511428	ElseStatement	else		511160	0					
ANR	511429	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname , ( int ) count1 )"	1218:12:40757:40802	511160	0	True				
ANR	511430	CallExpression	"gs_sprintf ( pfname , parsed . fname , ( int ) count1 )"		511160	0					
ANR	511431	Callee	gs_sprintf		511160	0					
ANR	511432	Identifier	gs_sprintf		511160	0					
ANR	511433	ArgumentList	pfname		511160	1					
ANR	511434	Argument	pfname		511160	0					
ANR	511435	Identifier	pfname		511160	0					
ANR	511436	Argument	parsed . fname		511160	1					
ANR	511437	MemberAccess	parsed . fname		511160	0					
ANR	511438	Identifier	parsed		511160	0					
ANR	511439	Identifier	fname		511160	1					
ANR	511440	Argument	( int ) count1		511160	2					
ANR	511441	CastExpression	( int ) count1		511160	0					
ANR	511442	CastTarget	int		511160	0					
ANR	511443	Identifier	count1		511160	1					
ANR	511444	ElseStatement	else		511160	0					
ANR	511445	IfStatement	"if ( parsed . len && strchr ( parsed . fname , '%' ) )"		511160	0					
ANR	511446	Condition	"parsed . len && strchr ( parsed . fname , '%' )"	1219:15:40819:40857	511160	0	True				
ANR	511447	AndExpression	"parsed . len && strchr ( parsed . fname , '%' )"		511160	0		&&			
ANR	511448	MemberAccess	parsed . len		511160	0					
ANR	511449	Identifier	parsed		511160	0					
ANR	511450	Identifier	len		511160	1					
ANR	511451	CallExpression	"strchr ( parsed . fname , '%' )"		511160	1					
ANR	511452	Callee	strchr		511160	0					
ANR	511453	Identifier	strchr		511160	0					
ANR	511454	ArgumentList	parsed . fname		511160	1					
ANR	511455	Argument	parsed . fname		511160	0					
ANR	511456	MemberAccess	parsed . fname		511160	0					
ANR	511457	Identifier	parsed		511160	0					
ANR	511458	Identifier	fname		511160	1					
ANR	511459	Argument	'%'		511160	1					
ANR	511460	PrimaryExpression	'%'		511160	0					
ANR	511461	ExpressionStatement	"gs_sprintf ( pfname , parsed . fname )"	1220:8:40907:40939	511160	1	True				
ANR	511462	CallExpression	"gs_sprintf ( pfname , parsed . fname )"		511160	0					
ANR	511463	Callee	gs_sprintf		511160	0					
ANR	511464	Identifier	gs_sprintf		511160	0					
ANR	511465	ArgumentList	pfname		511160	1					
ANR	511466	Argument	pfname		511160	0					
ANR	511467	Identifier	pfname		511160	0					
ANR	511468	Argument	parsed . fname		511160	1					
ANR	511469	MemberAccess	parsed . fname		511160	0					
ANR	511470	Identifier	parsed		511160	0					
ANR	511471	Identifier	fname		511160	1					
ANR	511472	ElseStatement	else		511160	0					
ANR	511473	ExpressionStatement	pfname [ 0 ] = 0	1222:8:40958:40971	511160	0	True				
ANR	511474	AssignmentExpression	pfname [ 0 ] = 0		511160	0		=			
ANR	511475	ArrayIndexing	pfname [ 0 ]		511160	0					
ANR	511476	Identifier	pfname		511160	0					
ANR	511477	PrimaryExpression	0		511160	1					
ANR	511478	PrimaryExpression	0		511160	1					
ANR	511479	IfStatement	if ( pfname [ 0 ] )		511160	10					
ANR	511480	Condition	pfname [ 0 ]	1223:8:41018:41026	511160	0	True				
ANR	511481	ArrayIndexing	pfname [ 0 ]		511160	0					
ANR	511482	Identifier	pfname		511160	0					
ANR	511483	PrimaryExpression	0		511160	1					
ANR	511484	CompoundStatement		47:19:1606:1606	511160	1					
ANR	511485	ExpressionStatement	parsed . fname = pfname	1224:8:41039:41060	511160	0	True				
ANR	511486	AssignmentExpression	parsed . fname = pfname		511160	0		=			
ANR	511487	MemberAccess	parsed . fname		511160	0					
ANR	511488	Identifier	parsed		511160	0					
ANR	511489	Identifier	fname		511160	1					
ANR	511490	Identifier	pfname		511160	1					
ANR	511491	ExpressionStatement	parsed . len = strlen ( parsed . fname )	1225:8:41070:41103	511160	1	True				
ANR	511492	AssignmentExpression	parsed . len = strlen ( parsed . fname )		511160	0		=			
ANR	511493	MemberAccess	parsed . len		511160	0					
ANR	511494	Identifier	parsed		511160	0					
ANR	511495	Identifier	len		511160	1					
ANR	511496	CallExpression	strlen ( parsed . fname )		511160	1					
ANR	511497	Callee	strlen		511160	0					
ANR	511498	Identifier	strlen		511160	0					
ANR	511499	ArgumentList	parsed . fname		511160	1					
ANR	511500	Argument	parsed . fname		511160	0					
ANR	511501	MemberAccess	parsed . fname		511160	0					
ANR	511502	Identifier	parsed		511160	0					
ANR	511503	Identifier	fname		511160	1					
ANR	511504	IfStatement	if ( positionable || ( parsed . iodev && parsed . iodev != iodev_default ( dev -> memory ) ) )		511160	11					
ANR	511505	Condition	positionable || ( parsed . iodev && parsed . iodev != iodev_default ( dev -> memory ) )	1227:8:41119:41194	511160	0	True				
ANR	511506	OrExpression	positionable || ( parsed . iodev && parsed . iodev != iodev_default ( dev -> memory ) )		511160	0		||			
ANR	511507	Identifier	positionable		511160	0					
ANR	511508	AndExpression	parsed . iodev && parsed . iodev != iodev_default ( dev -> memory )		511160	1		&&			
ANR	511509	MemberAccess	parsed . iodev		511160	0					
ANR	511510	Identifier	parsed		511160	0					
ANR	511511	Identifier	iodev		511160	1					
ANR	511512	EqualityExpression	parsed . iodev != iodev_default ( dev -> memory )		511160	1		!=			
ANR	511513	MemberAccess	parsed . iodev		511160	0					
ANR	511514	Identifier	parsed		511160	0					
ANR	511515	Identifier	iodev		511160	1					
ANR	511516	CallExpression	iodev_default ( dev -> memory )		511160	1					
ANR	511517	Callee	iodev_default		511160	0					
ANR	511518	Identifier	iodev_default		511160	0					
ANR	511519	ArgumentList	dev -> memory		511160	1					
ANR	511520	Argument	dev -> memory		511160	0					
ANR	511521	PtrMemberAccess	dev -> memory		511160	0					
ANR	511522	Identifier	dev		511160	0					
ANR	511523	Identifier	memory		511160	1					
ANR	511524	CompoundStatement		52:8:1784:1797	511160	1					
ANR	511525	IdentifierDeclStatement	char fmode [ 4 ] ;	1228:8:41207:41220	511160	0	True				
ANR	511526	IdentifierDecl	fmode [ 4 ]		511160	0					
ANR	511527	IdentifierDeclType	char [ 4 ]		511160	0					
ANR	511528	Identifier	fmode		511160	1					
ANR	511529	PrimaryExpression	4		511160	2					
ANR	511530	IfStatement	if ( ! parsed . fname )		511160	1					
ANR	511531	Condition	! parsed . fname	1230:12:41235:41247	511160	0	True				
ANR	511532	UnaryOperationExpression	! parsed . fname		511160	0					
ANR	511533	UnaryOperator	!		511160	0					
ANR	511534	MemberAccess	parsed . fname		511160	1					
ANR	511535	Identifier	parsed		511160	0					
ANR	511536	Identifier	fname		511160	1					
ANR	511537	CompoundStatement		54:27:1827:1827	511160	1					
ANR	511538	ExpressionStatement	code = gs_note_error ( gs_error_undefinedfilename )	1231:12:41264:41312	511160	0	True				
ANR	511539	AssignmentExpression	code = gs_note_error ( gs_error_undefinedfilename )		511160	0		=			
ANR	511540	Identifier	code		511160	0					
ANR	511541	CallExpression	gs_note_error ( gs_error_undefinedfilename )		511160	1					
ANR	511542	Callee	gs_note_error		511160	0					
ANR	511543	Identifier	gs_note_error		511160	0					
ANR	511544	ArgumentList	gs_error_undefinedfilename		511160	1					
ANR	511545	Argument	gs_error_undefinedfilename		511160	0					
ANR	511546	Identifier	gs_error_undefinedfilename		511160	0					
ANR	511547	GotoStatement	goto done ;	1232:5:41319:41328	511160	1	True				
ANR	511548	Identifier	done		511160	0					
ANR	511549	ExpressionStatement	"strcpy ( fmode , gp_fmode_wb )"	1234:8:41341:41367	511160	2	True				
ANR	511550	CallExpression	"strcpy ( fmode , gp_fmode_wb )"		511160	0					
ANR	511551	Callee	strcpy		511160	0					
ANR	511552	Identifier	strcpy		511160	0					
ANR	511553	ArgumentList	fmode		511160	1					
ANR	511554	Argument	fmode		511160	0					
ANR	511555	Identifier	fmode		511160	0					
ANR	511556	Argument	gp_fmode_wb		511160	1					
ANR	511557	Identifier	gp_fmode_wb		511160	0					
ANR	511558	IfStatement	if ( positionable )		511160	3					
ANR	511559	Condition	positionable	1235:12:41381:41392	511160	0	True				
ANR	511560	Identifier	positionable		511160	0					
ANR	511561	ExpressionStatement	"strcat ( fmode , ""+"" )"	1236:12:41407:41425	511160	1	True				
ANR	511562	CallExpression	"strcat ( fmode , ""+"" )"		511160	0					
ANR	511563	Callee	strcat		511160	0					
ANR	511564	Identifier	strcat		511160	0					
ANR	511565	ArgumentList	fmode		511160	1					
ANR	511566	Argument	fmode		511160	0					
ANR	511567	Identifier	fmode		511160	0					
ANR	511568	Argument	"""+"""		511160	1					
ANR	511569	PrimaryExpression	"""+"""		511160	0					
ANR	511570	ExpressionStatement	"code = parsed . iodev -> procs . gp_fopen ( parsed . iodev , parsed . fname , fmode , pfile , NULL , 0 )"	1237:8:41435:41562	511160	4	True				
ANR	511571	AssignmentExpression	"code = parsed . iodev -> procs . gp_fopen ( parsed . iodev , parsed . fname , fmode , pfile , NULL , 0 )"		511160	0		=			
ANR	511572	Identifier	code		511160	0					
ANR	511573	CallExpression	"parsed . iodev -> procs . gp_fopen ( parsed . iodev , parsed . fname , fmode , pfile , NULL , 0 )"		511160	1					
ANR	511574	Callee	parsed . iodev -> procs . gp_fopen		511160	0					
ANR	511575	MemberAccess	parsed . iodev -> procs . gp_fopen		511160	0					
ANR	511576	PtrMemberAccess	parsed . iodev -> procs		511160	0					
ANR	511577	MemberAccess	parsed . iodev		511160	0					
ANR	511578	Identifier	parsed		511160	0					
ANR	511579	Identifier	iodev		511160	1					
ANR	511580	Identifier	procs		511160	1					
ANR	511581	Identifier	gp_fopen		511160	1					
ANR	511582	ArgumentList	parsed . iodev		511160	1					
ANR	511583	Argument	parsed . iodev		511160	0					
ANR	511584	MemberAccess	parsed . iodev		511160	0					
ANR	511585	Identifier	parsed		511160	0					
ANR	511586	Identifier	iodev		511160	1					
ANR	511587	Argument	parsed . fname		511160	1					
ANR	511588	MemberAccess	parsed . fname		511160	0					
ANR	511589	Identifier	parsed		511160	0					
ANR	511590	Identifier	fname		511160	1					
ANR	511591	Argument	fmode		511160	2					
ANR	511592	Identifier	fmode		511160	0					
ANR	511593	Argument	pfile		511160	3					
ANR	511594	Identifier	pfile		511160	0					
ANR	511595	Argument	NULL		511160	4					
ANR	511596	Identifier	NULL		511160	0					
ANR	511597	Argument	0		511160	5					
ANR	511598	PrimaryExpression	0		511160	0					
ANR	511599	IfStatement	if ( code )		511160	5					
ANR	511600	Condition	code	1239:12:41576:41579	511160	0	True				
ANR	511601	Identifier	code		511160	0					
ANR	511602	ExpressionStatement	"emprintf1 ( dev -> memory , ""**** Could not open the file %s .\\n"" , parsed . fname )"	1240:12:41594:41713	511160	1	True				
ANR	511603	CallExpression	"emprintf1 ( dev -> memory , ""**** Could not open the file %s .\\n"" , parsed . fname )"		511160	0					
ANR	511604	Callee	emprintf1		511160	0					
ANR	511605	Identifier	emprintf1		511160	0					
ANR	511606	ArgumentList	dev -> memory		511160	1					
ANR	511607	Argument	dev -> memory		511160	0					
ANR	511608	PtrMemberAccess	dev -> memory		511160	0					
ANR	511609	Identifier	dev		511160	0					
ANR	511610	Identifier	memory		511160	1					
ANR	511611	Argument	"""**** Could not open the file %s .\\n"""		511160	1					
ANR	511612	PrimaryExpression	"""**** Could not open the file %s .\\n"""		511160	0					
ANR	511613	Argument	parsed . fname		511160	2					
ANR	511614	MemberAccess	parsed . fname		511160	0					
ANR	511615	Identifier	parsed		511160	0					
ANR	511616	Identifier	fname		511160	1					
ANR	511617	ElseStatement	else		511160	0					
ANR	511618	CompoundStatement		68:9:2307:2307	511160	0					
ANR	511619	ExpressionStatement	"* pfile = gp_open_printer ( dev -> memory , ( pfname [ 0 ] ? pfname : fname ) , binary )"	1245:8:41740:41815	511160	0	True				
ANR	511620	AssignmentExpression	"* pfile = gp_open_printer ( dev -> memory , ( pfname [ 0 ] ? pfname : fname ) , binary )"		511160	0		=			
ANR	511621	UnaryOperationExpression	* pfile		511160	0					
ANR	511622	UnaryOperator	*		511160	0					
ANR	511623	Identifier	pfile		511160	1					
ANR	511624	CallExpression	"gp_open_printer ( dev -> memory , ( pfname [ 0 ] ? pfname : fname ) , binary )"		511160	1					
ANR	511625	Callee	gp_open_printer		511160	0					
ANR	511626	Identifier	gp_open_printer		511160	0					
ANR	511627	ArgumentList	dev -> memory		511160	1					
ANR	511628	Argument	dev -> memory		511160	0					
ANR	511629	PtrMemberAccess	dev -> memory		511160	0					
ANR	511630	Identifier	dev		511160	0					
ANR	511631	Identifier	memory		511160	1					
ANR	511632	Argument	pfname [ 0 ] ? pfname : fname		511160	1					
ANR	511633	ConditionalExpression	pfname [ 0 ] ? pfname : fname		511160	0					
ANR	511634	Condition	pfname [ 0 ]		511160	0					
ANR	511635	ArrayIndexing	pfname [ 0 ]		511160	0					
ANR	511636	Identifier	pfname		511160	0					
ANR	511637	PrimaryExpression	0		511160	1					
ANR	511638	Identifier	pfname		511160	1					
ANR	511639	Identifier	fname		511160	2					
ANR	511640	Argument	binary		511160	2					
ANR	511641	Identifier	binary		511160	0					
ANR	511642	IfStatement	if ( ! ( * pfile ) )		511160	1					
ANR	511643	Condition	! ( * pfile )	1246:12:41829:41837	511160	0	True				
ANR	511644	UnaryOperationExpression	! ( * pfile )		511160	0					
ANR	511645	UnaryOperator	!		511160	0					
ANR	511646	UnaryOperationExpression	* pfile		511160	1					
ANR	511647	UnaryOperator	*		511160	0					
ANR	511648	Identifier	pfile		511160	1					
ANR	511649	CompoundStatement		70:23:2417:2417	511160	1					
ANR	511650	ExpressionStatement	"emprintf1 ( dev -> memory , ""**** Could not open the file '%s'.\\n"" , ( pfname [ 0 ] ? pfname : fname ) )"	1247:12:41854:41946	511160	0	True				
ANR	511651	CallExpression	"emprintf1 ( dev -> memory , ""**** Could not open the file '%s'.\\n"" , ( pfname [ 0 ] ? pfname : fname ) )"		511160	0					
ANR	511652	Callee	emprintf1		511160	0					
ANR	511653	Identifier	emprintf1		511160	0					
ANR	511654	ArgumentList	dev -> memory		511160	1					
ANR	511655	Argument	dev -> memory		511160	0					
ANR	511656	PtrMemberAccess	dev -> memory		511160	0					
ANR	511657	Identifier	dev		511160	0					
ANR	511658	Identifier	memory		511160	1					
ANR	511659	Argument	"""**** Could not open the file '%s'.\\n"""		511160	1					
ANR	511660	PrimaryExpression	"""**** Could not open the file '%s'.\\n"""		511160	0					
ANR	511661	Argument	pfname [ 0 ] ? pfname : fname		511160	2					
ANR	511662	ConditionalExpression	pfname [ 0 ] ? pfname : fname		511160	0					
ANR	511663	Condition	pfname [ 0 ]		511160	0					
ANR	511664	ArrayIndexing	pfname [ 0 ]		511160	0					
ANR	511665	Identifier	pfname		511160	0					
ANR	511666	PrimaryExpression	0		511160	1					
ANR	511667	Identifier	pfname		511160	1					
ANR	511668	Identifier	fname		511160	2					
ANR	511669	ExpressionStatement	code = gs_note_error ( gs_error_invalidfileaccess )	1249:12:41961:42009	511160	1	True				
ANR	511670	AssignmentExpression	code = gs_note_error ( gs_error_invalidfileaccess )		511160	0		=			
ANR	511671	Identifier	code		511160	0					
ANR	511672	CallExpression	gs_note_error ( gs_error_invalidfileaccess )		511160	1					
ANR	511673	Callee	gs_note_error		511160	0					
ANR	511674	Identifier	gs_note_error		511160	0					
ANR	511675	ArgumentList	gs_error_invalidfileaccess		511160	1					
ANR	511676	Argument	gs_error_invalidfileaccess		511160	0					
ANR	511677	Identifier	gs_error_invalidfileaccess		511160	0					
ANR	511678	Label	done :	1253:0:42028:42032	511160	12	True				
ANR	511679	Identifier	done		511160	0					
ANR	511680	IfStatement	if ( pfname != NULL )		511160	13					
ANR	511681	Condition	pfname != NULL	1254:8:42042:42055	511160	0	True				
ANR	511682	EqualityExpression	pfname != NULL		511160	0		!=			
ANR	511683	Identifier	pfname		511160	0					
ANR	511684	Identifier	NULL		511160	1					
ANR	511685	ExpressionStatement	"gs_free_object ( dev -> memory , pfname , ""gx_device_open_output_file(pfname)"" )"	1255:8:42066:42139	511160	1	True				
ANR	511686	CallExpression	"gs_free_object ( dev -> memory , pfname , ""gx_device_open_output_file(pfname)"" )"		511160	0					
ANR	511687	Callee	gs_free_object		511160	0					
ANR	511688	Identifier	gs_free_object		511160	0					
ANR	511689	ArgumentList	dev -> memory		511160	1					
ANR	511690	Argument	dev -> memory		511160	0					
ANR	511691	PtrMemberAccess	dev -> memory		511160	0					
ANR	511692	Identifier	dev		511160	0					
ANR	511693	Identifier	memory		511160	1					
ANR	511694	Argument	pfname		511160	1					
ANR	511695	Identifier	pfname		511160	0					
ANR	511696	Argument	"""gx_device_open_output_file(pfname)"""		511160	2					
ANR	511697	PrimaryExpression	"""gx_device_open_output_file(pfname)"""		511160	0					
ANR	511698	ReturnStatement	return ( code ) ;	1257:4:42146:42158	511160	14	True				
ANR	511699	Identifier	code		511160	0					
ANR	511700	ReturnType	int		511160	1					
ANR	511701	Identifier	gx_device_open_output_file		511160	2					
ANR	511702	ParameterList	"const gx_device * dev , char * fname , bool binary , bool positionable , FILE * * pfile"		511160	3					
ANR	511703	Parameter	const gx_device * dev	1175:27:39312:39332	511160	0	True				
ANR	511704	ParameterType	const gx_device *		511160	0					
ANR	511705	Identifier	dev		511160	1					
ANR	511706	Parameter	char * fname	1175:50:39335:39345	511160	1	True				
ANR	511707	ParameterType	char *		511160	0					
ANR	511708	Identifier	fname		511160	1					
ANR	511709	Parameter	bool binary	1176:27:39375:39385	511160	2	True				
ANR	511710	ParameterType	bool		511160	0					
ANR	511711	Identifier	binary		511160	1					
ANR	511712	Parameter	bool positionable	1176:40:39388:39404	511160	3	True				
ANR	511713	ParameterType	bool		511160	0					
ANR	511714	Identifier	positionable		511160	1					
ANR	511715	Parameter	FILE * * pfile	1176:59:39407:39419	511160	4	True				
ANR	511716	ParameterType	FILE * *		511160	0					
ANR	511717	Identifier	pfile		511160	1					
ANR	511718	CFGEntryNode	ENTRY		511160		True				
ANR	511719	CFGExitNode	EXIT		511160		True				
ANR	511720	Symbol	parsed . iodev -> procs		511160						
ANR	511721	Symbol	gp_open_printer		511160						
ANR	511722	Symbol	strchr		511160						
ANR	511723	Symbol	fmt		511160						
ANR	511724	Symbol	positionable		511160						
ANR	511725	Symbol	strlen		511160						
ANR	511726	Symbol	* * * dev		511160						
ANR	511727	Symbol	dev		511160						
ANR	511728	Symbol	& parsed		511160						
ANR	511729	Symbol	dev -> PageCount		511160						
ANR	511730	Symbol	parsed . len		511160						
ANR	511731	Symbol	* pfname		511160						
ANR	511732	Symbol	strcmp		511160						
ANR	511733	Symbol	fname		511160						
ANR	511734	Symbol	NULL		511160						
ANR	511735	Symbol	* parsed		511160						
ANR	511736	Symbol	dev -> memory -> gs_lib_ctx		511160						
ANR	511737	Symbol	gp_fmode_wb		511160						
ANR	511738	Symbol	& fmt		511160						
ANR	511739	Symbol	pfile		511160						
ANR	511740	Symbol	binary		511160						
ANR	511741	Symbol	true		511160						
ANR	511742	Symbol	parsed		511160						
ANR	511743	Symbol	gs_error_invalidfileaccess		511160						
ANR	511744	Symbol	* dev -> memory		511160						
ANR	511745	Symbol	* dev		511160						
ANR	511746	Symbol	count1		511160						
ANR	511747	Symbol	code		511160						
ANR	511748	Symbol	dev -> dname		511160						
ANR	511749	Symbol	* fmt		511160						
ANR	511750	Symbol	gp_setmode_binary		511160						
ANR	511751	Symbol	parsed . iodev -> dname		511160						
ANR	511752	Symbol	* pfile		511160						
ANR	511753	Symbol	parsed . iodev -> procs . gp_fopen		511160						
ANR	511754	Symbol	* * dev -> memory		511160						
ANR	511755	Symbol	* parsed . iodev		511160						
ANR	511756	Symbol	fmode		511160						
ANR	511757	Symbol	parsed . fname		511160						
ANR	511758	Symbol	gs_alloc_bytes		511160						
ANR	511759	Symbol	* dev -> memory -> gs_lib_ctx		511160						
ANR	511760	Symbol	gx_parse_output_file_name		511160						
ANR	511761	Symbol	dev -> memory -> gs_lib_ctx -> fstdout		511160						
ANR	511762	Symbol	false		511160						
ANR	511763	Symbol	gp_file_name_sizeof		511160						
ANR	511764	Symbol	* * dev		511160						
ANR	511765	Symbol	gs_error_undefinedfilename		511160						
ANR	511766	Symbol	pfname		511160						
ANR	511767	Symbol	gs_error_VMerror		511160						
ANR	511768	Symbol	dev -> memory		511160						
ANR	511769	Symbol	gs_note_error		511160						
ANR	511770	Symbol	iodev_default		511160						
ANR	511771	Symbol	parsed . iodev		511160						
ANR	511772	Function	gx_device_close_output_file	1261:0:42205:42949							
ANR	511773	FunctionDef	"gx_device_close_output_file (const gx_device * dev , const char * fname , FILE * file)"		511772	0					
ANR	511774	CompoundStatement		1264:0:42319:42949	511772	0					
ANR	511775	IdentifierDeclStatement	gs_parsed_file_name_t parsed ;	1265:4:42325:42353	511772	0	True				
ANR	511776	IdentifierDecl	parsed		511772	0					
ANR	511777	IdentifierDeclType	gs_parsed_file_name_t		511772	0					
ANR	511778	Identifier	parsed		511772	1					
ANR	511779	IdentifierDeclStatement	const char * fmt ;	1266:4:42359:42374	511772	1	True				
ANR	511780	IdentifierDecl	* fmt		511772	0					
ANR	511781	IdentifierDeclType	const char *		511772	0					
ANR	511782	Identifier	fmt		511772	1					
ANR	511783	IdentifierDeclStatement	"int code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory ) ;"	1267:4:42380:42507	511772	2	True				
ANR	511784	IdentifierDecl	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		511772	0					
ANR	511785	IdentifierDeclType	int		511772	0					
ANR	511786	Identifier	code		511772	1					
ANR	511787	AssignmentExpression	"code = gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		511772	2		=			
ANR	511788	Identifier	code		511772	0					
ANR	511789	CallExpression	"gx_parse_output_file_name ( & parsed , & fmt , fname , strlen ( fname ) , dev -> memory )"		511772	1					
ANR	511790	Callee	gx_parse_output_file_name		511772	0					
ANR	511791	Identifier	gx_parse_output_file_name		511772	0					
ANR	511792	ArgumentList	& parsed		511772	1					
ANR	511793	Argument	& parsed		511772	0					
ANR	511794	UnaryOperationExpression	& parsed		511772	0					
ANR	511795	UnaryOperator	&		511772	0					
ANR	511796	Identifier	parsed		511772	1					
ANR	511797	Argument	& fmt		511772	1					
ANR	511798	UnaryOperationExpression	& fmt		511772	0					
ANR	511799	UnaryOperator	&		511772	0					
ANR	511800	Identifier	fmt		511772	1					
ANR	511801	Argument	fname		511772	2					
ANR	511802	Identifier	fname		511772	0					
ANR	511803	Argument	strlen ( fname )		511772	3					
ANR	511804	CallExpression	strlen ( fname )		511772	0					
ANR	511805	Callee	strlen		511772	0					
ANR	511806	Identifier	strlen		511772	0					
ANR	511807	ArgumentList	fname		511772	1					
ANR	511808	Argument	fname		511772	0					
ANR	511809	Identifier	fname		511772	0					
ANR	511810	Argument	dev -> memory		511772	4					
ANR	511811	PtrMemberAccess	dev -> memory		511772	0					
ANR	511812	Identifier	dev		511772	0					
ANR	511813	Identifier	memory		511772	1					
ANR	511814	IfStatement	if ( code < 0 )		511772	3					
ANR	511815	Condition	code < 0	1270:8:42518:42525	511772	0	True				
ANR	511816	RelationalExpression	code < 0		511772	0		<			
ANR	511817	Identifier	code		511772	0					
ANR	511818	PrimaryExpression	0		511772	1					
ANR	511819	ReturnStatement	return code ;	1271:8:42536:42547	511772	1	True				
ANR	511820	Identifier	code		511772	0					
ANR	511821	IfStatement	if ( parsed . iodev )		511772	4					
ANR	511822	Condition	parsed . iodev	1272:8:42557:42568	511772	0	True				
ANR	511823	MemberAccess	parsed . iodev		511772	0					
ANR	511824	Identifier	parsed		511772	0					
ANR	511825	Identifier	iodev		511772	1					
ANR	511826	CompoundStatement		9:22:251:251	511772	1					
ANR	511827	IfStatement	"if ( ! strcmp ( parsed . iodev -> dname , ""%stdout%"" ) )"		511772	0					
ANR	511828	Condition	"! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"	1273:12:42585:42624	511772	0	True				
ANR	511829	UnaryOperationExpression	"! strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		511772	0					
ANR	511830	UnaryOperator	!		511772	0					
ANR	511831	CallExpression	"strcmp ( parsed . iodev -> dname , ""%stdout%"" )"		511772	1					
ANR	511832	Callee	strcmp		511772	0					
ANR	511833	Identifier	strcmp		511772	0					
ANR	511834	ArgumentList	parsed . iodev -> dname		511772	1					
ANR	511835	Argument	parsed . iodev -> dname		511772	0					
ANR	511836	PtrMemberAccess	parsed . iodev -> dname		511772	0					
ANR	511837	MemberAccess	parsed . iodev		511772	0					
ANR	511838	Identifier	parsed		511772	0					
ANR	511839	Identifier	iodev		511772	1					
ANR	511840	Identifier	dname		511772	1					
ANR	511841	Argument	"""%stdout%"""		511772	1					
ANR	511842	PrimaryExpression	"""%stdout%"""		511772	0					
ANR	511843	ReturnStatement	return 0 ;	1274:12:42639:42647	511772	1	True				
ANR	511844	PrimaryExpression	0		511772	0					
ANR	511845	IfStatement	if ( parsed . iodev != iodev_default ( dev -> memory ) )		511772	1					
ANR	511846	Condition	parsed . iodev != iodev_default ( dev -> memory )	1276:12:42738:42779	511772	0	True				
ANR	511847	EqualityExpression	parsed . iodev != iodev_default ( dev -> memory )		511772	0		!=			
ANR	511848	MemberAccess	parsed . iodev		511772	0					
ANR	511849	Identifier	parsed		511772	0					
ANR	511850	Identifier	iodev		511772	1					
ANR	511851	CallExpression	iodev_default ( dev -> memory )		511772	1					
ANR	511852	Callee	iodev_default		511772	0					
ANR	511853	Identifier	iodev_default		511772	0					
ANR	511854	ArgumentList	dev -> memory		511772	1					
ANR	511855	Argument	dev -> memory		511772	0					
ANR	511856	PtrMemberAccess	dev -> memory		511772	0					
ANR	511857	Identifier	dev		511772	0					
ANR	511858	Identifier	memory		511772	1					
ANR	511859	ReturnStatement	"return parsed . iodev -> procs . fclose ( parsed . iodev , file ) ;"	1277:12:42794:42847	511772	1	True				
ANR	511860	CallExpression	"parsed . iodev -> procs . fclose ( parsed . iodev , file )"		511772	0					
ANR	511861	Callee	parsed . iodev -> procs . fclose		511772	0					
ANR	511862	MemberAccess	parsed . iodev -> procs . fclose		511772	0					
ANR	511863	PtrMemberAccess	parsed . iodev -> procs		511772	0					
ANR	511864	MemberAccess	parsed . iodev		511772	0					
ANR	511865	Identifier	parsed		511772	0					
ANR	511866	Identifier	iodev		511772	1					
ANR	511867	Identifier	procs		511772	1					
ANR	511868	Identifier	fclose		511772	1					
ANR	511869	ArgumentList	parsed . iodev		511772	1					
ANR	511870	Argument	parsed . iodev		511772	0					
ANR	511871	MemberAccess	parsed . iodev		511772	0					
ANR	511872	Identifier	parsed		511772	0					
ANR	511873	Identifier	iodev		511772	1					
ANR	511874	Argument	file		511772	1					
ANR	511875	Identifier	file		511772	0					
ANR	511876	ExpressionStatement	"gp_close_printer ( dev -> memory , file , ( parsed . fname ? parsed . fname : fname ) )"	1279:4:42859:42933	511772	5	True				
ANR	511877	CallExpression	"gp_close_printer ( dev -> memory , file , ( parsed . fname ? parsed . fname : fname ) )"		511772	0					
ANR	511878	Callee	gp_close_printer		511772	0					
ANR	511879	Identifier	gp_close_printer		511772	0					
ANR	511880	ArgumentList	dev -> memory		511772	1					
ANR	511881	Argument	dev -> memory		511772	0					
ANR	511882	PtrMemberAccess	dev -> memory		511772	0					
ANR	511883	Identifier	dev		511772	0					
ANR	511884	Identifier	memory		511772	1					
ANR	511885	Argument	file		511772	1					
ANR	511886	Identifier	file		511772	0					
ANR	511887	Argument	parsed . fname ? parsed . fname : fname		511772	2					
ANR	511888	ConditionalExpression	parsed . fname ? parsed . fname : fname		511772	0					
ANR	511889	Condition	parsed . fname		511772	0					
ANR	511890	MemberAccess	parsed . fname		511772	0					
ANR	511891	Identifier	parsed		511772	0					
ANR	511892	Identifier	fname		511772	1					
ANR	511893	MemberAccess	parsed . fname		511772	1					
ANR	511894	Identifier	parsed		511772	0					
ANR	511895	Identifier	fname		511772	1					
ANR	511896	Identifier	fname		511772	2					
ANR	511897	ReturnStatement	return 0 ;	1280:4:42939:42947	511772	6	True				
ANR	511898	PrimaryExpression	0		511772	0					
ANR	511899	ReturnType	int		511772	1					
ANR	511900	Identifier	gx_device_close_output_file		511772	2					
ANR	511901	ParameterList	"const gx_device * dev , const char * fname , FILE * file"		511772	3					
ANR	511902	Parameter	const gx_device * dev	1262:28:42237:42257	511772	0	True				
ANR	511903	ParameterType	const gx_device *		511772	0					
ANR	511904	Identifier	dev		511772	1					
ANR	511905	Parameter	const char * fname	1262:51:42260:42276	511772	1	True				
ANR	511906	ParameterType	const char *		511772	0					
ANR	511907	Identifier	fname		511772	1					
ANR	511908	Parameter	FILE * file	1263:28:42307:42316	511772	2	True				
ANR	511909	ParameterType	FILE *		511772	0					
ANR	511910	Identifier	file		511772	1					
ANR	511911	CFGEntryNode	ENTRY		511772		True				
ANR	511912	CFGExitNode	EXIT		511772		True				
ANR	511913	Symbol	* dev		511772						
ANR	511914	Symbol	strcmp		511772						
ANR	511915	Symbol	fname		511772						
ANR	511916	Symbol	code		511772						
ANR	511917	Symbol	* parsed		511772						
ANR	511918	Symbol	parsed . iodev -> procs		511772						
ANR	511919	Symbol	gx_parse_output_file_name		511772						
ANR	511920	Symbol	parsed . iodev -> dname		511772						
ANR	511921	Symbol	fmt		511772						
ANR	511922	Symbol	parsed . iodev -> procs . fclose		511772						
ANR	511923	Symbol	strlen		511772						
ANR	511924	Symbol	dev -> memory		511772						
ANR	511925	Symbol	file		511772						
ANR	511926	Symbol	iodev_default		511772						
ANR	511927	Symbol	dev		511772						
ANR	511928	Symbol	& fmt		511772						
ANR	511929	Symbol	& parsed		511772						
ANR	511930	Symbol	* parsed . iodev		511772						
ANR	511931	Symbol	parsed		511772						
ANR	511932	Symbol	parsed . fname		511772						
ANR	511933	Symbol	parsed . iodev		511772						
ANR	511934	Function	gx_color_info_equal	1283:0:42952:44137							
ANR	511935	FunctionDef	"gx_color_info_equal (const gx_device_color_info * p1 , const gx_device_color_info * p2)"		511934	0					
ANR	511936	CompoundStatement		1284:0:43043:44137	511934	0					
ANR	511937	IfStatement	if ( p1 -> anti_alias . graphics_bits != p2 -> anti_alias . graphics_bits )		511934	0					
ANR	511938	Condition	p1 -> anti_alias . graphics_bits != p2 -> anti_alias . graphics_bits	1285:8:43053:43112	511934	0	True				
ANR	511939	EqualityExpression	p1 -> anti_alias . graphics_bits != p2 -> anti_alias . graphics_bits		511934	0		!=			
ANR	511940	MemberAccess	p1 -> anti_alias . graphics_bits		511934	0					
ANR	511941	PtrMemberAccess	p1 -> anti_alias		511934	0					
ANR	511942	Identifier	p1		511934	0					
ANR	511943	Identifier	anti_alias		511934	1					
ANR	511944	Identifier	graphics_bits		511934	1					
ANR	511945	MemberAccess	p2 -> anti_alias . graphics_bits		511934	1					
ANR	511946	PtrMemberAccess	p2 -> anti_alias		511934	0					
ANR	511947	Identifier	p2		511934	0					
ANR	511948	Identifier	anti_alias		511934	1					
ANR	511949	Identifier	graphics_bits		511934	1					
ANR	511950	ReturnStatement	return false ;	1286:8:43123:43135	511934	1	True				
ANR	511951	Identifier	false		511934	0					
ANR	511952	IfStatement	if ( p1 -> anti_alias . text_bits != p2 -> anti_alias . text_bits )		511934	1					
ANR	511953	Condition	p1 -> anti_alias . text_bits != p2 -> anti_alias . text_bits	1287:8:43145:43196	511934	0	True				
ANR	511954	EqualityExpression	p1 -> anti_alias . text_bits != p2 -> anti_alias . text_bits		511934	0		!=			
ANR	511955	MemberAccess	p1 -> anti_alias . text_bits		511934	0					
ANR	511956	PtrMemberAccess	p1 -> anti_alias		511934	0					
ANR	511957	Identifier	p1		511934	0					
ANR	511958	Identifier	anti_alias		511934	1					
ANR	511959	Identifier	text_bits		511934	1					
ANR	511960	MemberAccess	p2 -> anti_alias . text_bits		511934	1					
ANR	511961	PtrMemberAccess	p2 -> anti_alias		511934	0					
ANR	511962	Identifier	p2		511934	0					
ANR	511963	Identifier	anti_alias		511934	1					
ANR	511964	Identifier	text_bits		511934	1					
ANR	511965	ReturnStatement	return false ;	1288:8:43207:43219	511934	1	True				
ANR	511966	Identifier	false		511934	0					
ANR	511967	IfStatement	if ( p1 -> black_component != p2 -> black_component )		511934	2					
ANR	511968	Condition	p1 -> black_component != p2 -> black_component	1289:8:43229:43270	511934	0	True				
ANR	511969	EqualityExpression	p1 -> black_component != p2 -> black_component		511934	0		!=			
ANR	511970	PtrMemberAccess	p1 -> black_component		511934	0					
ANR	511971	Identifier	p1		511934	0					
ANR	511972	Identifier	black_component		511934	1					
ANR	511973	PtrMemberAccess	p2 -> black_component		511934	1					
ANR	511974	Identifier	p2		511934	0					
ANR	511975	Identifier	black_component		511934	1					
ANR	511976	ReturnStatement	return false ;	1290:8:43281:43293	511934	1	True				
ANR	511977	Identifier	false		511934	0					
ANR	511978	IfStatement	"if ( strcmp ( p1 -> cm_name , p2 -> cm_name ) != 0 )"		511934	3					
ANR	511979	Condition	"strcmp ( p1 -> cm_name , p2 -> cm_name ) != 0"	1291:8:43303:43339	511934	0	True				
ANR	511980	EqualityExpression	"strcmp ( p1 -> cm_name , p2 -> cm_name ) != 0"		511934	0		!=			
ANR	511981	CallExpression	"strcmp ( p1 -> cm_name , p2 -> cm_name )"		511934	0					
ANR	511982	Callee	strcmp		511934	0					
ANR	511983	Identifier	strcmp		511934	0					
ANR	511984	ArgumentList	p1 -> cm_name		511934	1					
ANR	511985	Argument	p1 -> cm_name		511934	0					
ANR	511986	PtrMemberAccess	p1 -> cm_name		511934	0					
ANR	511987	Identifier	p1		511934	0					
ANR	511988	Identifier	cm_name		511934	1					
ANR	511989	Argument	p2 -> cm_name		511934	1					
ANR	511990	PtrMemberAccess	p2 -> cm_name		511934	0					
ANR	511991	Identifier	p2		511934	0					
ANR	511992	Identifier	cm_name		511934	1					
ANR	511993	PrimaryExpression	0		511934	1					
ANR	511994	ReturnStatement	return false ;	1292:8:43350:43362	511934	1	True				
ANR	511995	Identifier	false		511934	0					
ANR	511996	IfStatement	if ( p1 -> depth != p2 -> depth )		511934	4					
ANR	511997	Condition	p1 -> depth != p2 -> depth	1293:8:43372:43393	511934	0	True				
ANR	511998	EqualityExpression	p1 -> depth != p2 -> depth		511934	0		!=			
ANR	511999	PtrMemberAccess	p1 -> depth		511934	0					
ANR	512000	Identifier	p1		511934	0					
ANR	512001	Identifier	depth		511934	1					
ANR	512002	PtrMemberAccess	p2 -> depth		511934	1					
ANR	512003	Identifier	p2		511934	0					
ANR	512004	Identifier	depth		511934	1					
ANR	512005	ReturnStatement	return false ;	1294:8:43404:43416	511934	1	True				
ANR	512006	Identifier	false		511934	0					
ANR	512007	IfStatement	if ( p1 -> dither_colors != p2 -> dither_colors )		511934	5					
ANR	512008	Condition	p1 -> dither_colors != p2 -> dither_colors	1295:8:43426:43463	511934	0	True				
ANR	512009	EqualityExpression	p1 -> dither_colors != p2 -> dither_colors		511934	0		!=			
ANR	512010	PtrMemberAccess	p1 -> dither_colors		511934	0					
ANR	512011	Identifier	p1		511934	0					
ANR	512012	Identifier	dither_colors		511934	1					
ANR	512013	PtrMemberAccess	p2 -> dither_colors		511934	1					
ANR	512014	Identifier	p2		511934	0					
ANR	512015	Identifier	dither_colors		511934	1					
ANR	512016	ReturnStatement	return false ;	1296:8:43474:43486	511934	1	True				
ANR	512017	Identifier	false		511934	0					
ANR	512018	IfStatement	if ( p1 -> dither_grays != p2 -> dither_grays )		511934	6					
ANR	512019	Condition	p1 -> dither_grays != p2 -> dither_grays	1297:8:43496:43531	511934	0	True				
ANR	512020	EqualityExpression	p1 -> dither_grays != p2 -> dither_grays		511934	0		!=			
ANR	512021	PtrMemberAccess	p1 -> dither_grays		511934	0					
ANR	512022	Identifier	p1		511934	0					
ANR	512023	Identifier	dither_grays		511934	1					
ANR	512024	PtrMemberAccess	p2 -> dither_grays		511934	1					
ANR	512025	Identifier	p2		511934	0					
ANR	512026	Identifier	dither_grays		511934	1					
ANR	512027	ReturnStatement	return false ;	1298:8:43542:43554	511934	1	True				
ANR	512028	Identifier	false		511934	0					
ANR	512029	IfStatement	if ( p1 -> gray_index != p2 -> gray_index )		511934	7					
ANR	512030	Condition	p1 -> gray_index != p2 -> gray_index	1299:8:43564:43595	511934	0	True				
ANR	512031	EqualityExpression	p1 -> gray_index != p2 -> gray_index		511934	0		!=			
ANR	512032	PtrMemberAccess	p1 -> gray_index		511934	0					
ANR	512033	Identifier	p1		511934	0					
ANR	512034	Identifier	gray_index		511934	1					
ANR	512035	PtrMemberAccess	p2 -> gray_index		511934	1					
ANR	512036	Identifier	p2		511934	0					
ANR	512037	Identifier	gray_index		511934	1					
ANR	512038	ReturnStatement	return false ;	1300:8:43606:43618	511934	1	True				
ANR	512039	Identifier	false		511934	0					
ANR	512040	IfStatement	if ( p1 -> max_color != p2 -> max_color )		511934	8					
ANR	512041	Condition	p1 -> max_color != p2 -> max_color	1301:8:43628:43657	511934	0	True				
ANR	512042	EqualityExpression	p1 -> max_color != p2 -> max_color		511934	0		!=			
ANR	512043	PtrMemberAccess	p1 -> max_color		511934	0					
ANR	512044	Identifier	p1		511934	0					
ANR	512045	Identifier	max_color		511934	1					
ANR	512046	PtrMemberAccess	p2 -> max_color		511934	1					
ANR	512047	Identifier	p2		511934	0					
ANR	512048	Identifier	max_color		511934	1					
ANR	512049	ReturnStatement	return false ;	1302:8:43668:43680	511934	1	True				
ANR	512050	Identifier	false		511934	0					
ANR	512051	IfStatement	if ( p1 -> max_components != p2 -> max_components )		511934	9					
ANR	512052	Condition	p1 -> max_components != p2 -> max_components	1303:8:43690:43729	511934	0	True				
ANR	512053	EqualityExpression	p1 -> max_components != p2 -> max_components		511934	0		!=			
ANR	512054	PtrMemberAccess	p1 -> max_components		511934	0					
ANR	512055	Identifier	p1		511934	0					
ANR	512056	Identifier	max_components		511934	1					
ANR	512057	PtrMemberAccess	p2 -> max_components		511934	1					
ANR	512058	Identifier	p2		511934	0					
ANR	512059	Identifier	max_components		511934	1					
ANR	512060	ReturnStatement	return false ;	1304:8:43740:43752	511934	1	True				
ANR	512061	Identifier	false		511934	0					
ANR	512062	IfStatement	if ( p1 -> opmode != p2 -> opmode )		511934	10					
ANR	512063	Condition	p1 -> opmode != p2 -> opmode	1305:8:43762:43785	511934	0	True				
ANR	512064	EqualityExpression	p1 -> opmode != p2 -> opmode		511934	0		!=			
ANR	512065	PtrMemberAccess	p1 -> opmode		511934	0					
ANR	512066	Identifier	p1		511934	0					
ANR	512067	Identifier	opmode		511934	1					
ANR	512068	PtrMemberAccess	p2 -> opmode		511934	1					
ANR	512069	Identifier	p2		511934	0					
ANR	512070	Identifier	opmode		511934	1					
ANR	512071	ReturnStatement	return false ;	1306:8:43796:43808	511934	1	True				
ANR	512072	Identifier	false		511934	0					
ANR	512073	IfStatement	if ( p1 -> polarity != p2 -> polarity )		511934	11					
ANR	512074	Condition	p1 -> polarity != p2 -> polarity	1307:8:43818:43845	511934	0	True				
ANR	512075	EqualityExpression	p1 -> polarity != p2 -> polarity		511934	0		!=			
ANR	512076	PtrMemberAccess	p1 -> polarity		511934	0					
ANR	512077	Identifier	p1		511934	0					
ANR	512078	Identifier	polarity		511934	1					
ANR	512079	PtrMemberAccess	p2 -> polarity		511934	1					
ANR	512080	Identifier	p2		511934	0					
ANR	512081	Identifier	polarity		511934	1					
ANR	512082	ReturnStatement	return false ;	1308:8:43856:43868	511934	1	True				
ANR	512083	Identifier	false		511934	0					
ANR	512084	IfStatement	if ( p1 -> process_comps != p2 -> process_comps )		511934	12					
ANR	512085	Condition	p1 -> process_comps != p2 -> process_comps	1309:8:43878:43915	511934	0	True				
ANR	512086	EqualityExpression	p1 -> process_comps != p2 -> process_comps		511934	0		!=			
ANR	512087	PtrMemberAccess	p1 -> process_comps		511934	0					
ANR	512088	Identifier	p1		511934	0					
ANR	512089	Identifier	process_comps		511934	1					
ANR	512090	PtrMemberAccess	p2 -> process_comps		511934	1					
ANR	512091	Identifier	p2		511934	0					
ANR	512092	Identifier	process_comps		511934	1					
ANR	512093	ReturnStatement	return false ;	1310:8:43926:43938	511934	1	True				
ANR	512094	Identifier	false		511934	0					
ANR	512095	IfStatement	if ( p1 -> separable_and_linear != p2 -> separable_and_linear )		511934	13					
ANR	512096	Condition	p1 -> separable_and_linear != p2 -> separable_and_linear	1311:8:43948:43999	511934	0	True				
ANR	512097	EqualityExpression	p1 -> separable_and_linear != p2 -> separable_and_linear		511934	0		!=			
ANR	512098	PtrMemberAccess	p1 -> separable_and_linear		511934	0					
ANR	512099	Identifier	p1		511934	0					
ANR	512100	Identifier	separable_and_linear		511934	1					
ANR	512101	PtrMemberAccess	p2 -> separable_and_linear		511934	1					
ANR	512102	Identifier	p2		511934	0					
ANR	512103	Identifier	separable_and_linear		511934	1					
ANR	512104	ReturnStatement	return false ;	1312:8:44010:44022	511934	1	True				
ANR	512105	Identifier	false		511934	0					
ANR	512106	IfStatement	if ( p1 -> use_antidropout_downscaler != p2 -> use_antidropout_downscaler )		511934	14					
ANR	512107	Condition	p1 -> use_antidropout_downscaler != p2 -> use_antidropout_downscaler	1313:8:44032:44095	511934	0	True				
ANR	512108	EqualityExpression	p1 -> use_antidropout_downscaler != p2 -> use_antidropout_downscaler		511934	0		!=			
ANR	512109	PtrMemberAccess	p1 -> use_antidropout_downscaler		511934	0					
ANR	512110	Identifier	p1		511934	0					
ANR	512111	Identifier	use_antidropout_downscaler		511934	1					
ANR	512112	PtrMemberAccess	p2 -> use_antidropout_downscaler		511934	1					
ANR	512113	Identifier	p2		511934	0					
ANR	512114	Identifier	use_antidropout_downscaler		511934	1					
ANR	512115	ReturnStatement	return false ;	1314:8:44106:44118	511934	1	True				
ANR	512116	Identifier	false		511934	0					
ANR	512117	ReturnStatement	return true ;	1315:4:44124:44135	511934	15	True				
ANR	512118	Identifier	true		511934	0					
ANR	512119	ReturnType	bool		511934	1					
ANR	512120	Identifier	gx_color_info_equal		511934	2					
ANR	512121	ParameterList	"const gx_device_color_info * p1 , const gx_device_color_info * p2"		511934	3					
ANR	512122	Parameter	const gx_device_color_info * p1	1283:25:42977:43007	511934	0	True				
ANR	512123	ParameterType	const gx_device_color_info *		511934	0					
ANR	512124	Identifier	p1		511934	1					
ANR	512125	Parameter	const gx_device_color_info * p2	1283:58:43010:43040	511934	1	True				
ANR	512126	ParameterType	const gx_device_color_info *		511934	0					
ANR	512127	Identifier	p2		511934	1					
ANR	512128	CFGEntryNode	ENTRY		511934		True				
ANR	512129	CFGExitNode	EXIT		511934		True				
ANR	512130	Symbol	p1		511934						
ANR	512131	Symbol	p2		511934						
ANR	512132	Symbol	p2 -> anti_alias . text_bits		511934						
ANR	512133	Symbol	p1 -> use_antidropout_downscaler		511934						
ANR	512134	Symbol	p2 -> anti_alias		511934						
ANR	512135	Symbol	p2 -> opmode		511934						
ANR	512136	Symbol	p2 -> anti_alias . graphics_bits		511934						
ANR	512137	Symbol	p1 -> black_component		511934						
ANR	512138	Symbol	p1 -> gray_index		511934						
ANR	512139	Symbol	p2 -> black_component		511934						
ANR	512140	Symbol	p2 -> dither_grays		511934						
ANR	512141	Symbol	p1 -> process_comps		511934						
ANR	512142	Symbol	p1 -> max_components		511934						
ANR	512143	Symbol	p1 -> cm_name		511934						
ANR	512144	Symbol	p1 -> dither_colors		511934						
ANR	512145	Symbol	p1 -> anti_alias . graphics_bits		511934						
ANR	512146	Symbol	p2 -> max_color		511934						
ANR	512147	Symbol	p2 -> cm_name		511934						
ANR	512148	Symbol	p1 -> max_color		511934						
ANR	512149	Symbol	p1 -> dither_grays		511934						
ANR	512150	Symbol	p1 -> depth		511934						
ANR	512151	Symbol	strcmp		511934						
ANR	512152	Symbol	* p1		511934						
ANR	512153	Symbol	p2 -> dither_colors		511934						
ANR	512154	Symbol	p1 -> anti_alias		511934						
ANR	512155	Symbol	p2 -> depth		511934						
ANR	512156	Symbol	false		511934						
ANR	512157	Symbol	p1 -> polarity		511934						
ANR	512158	Symbol	* p2		511934						
ANR	512159	Symbol	p2 -> gray_index		511934						
ANR	512160	Symbol	p2 -> polarity		511934						
ANR	512161	Symbol	p2 -> use_antidropout_downscaler		511934						
ANR	512162	Symbol	p1 -> separable_and_linear		511934						
ANR	512163	Symbol	p2 -> max_components		511934						
ANR	512164	Symbol	p2 -> process_comps		511934						
ANR	512165	Symbol	true		511934						
ANR	512166	Symbol	p2 -> separable_and_linear		511934						
ANR	512167	Symbol	p1 -> anti_alias . text_bits		511934						
ANR	512168	Symbol	p1 -> opmode		511934						
