command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1303320	File	data/converged/CVE-2018-16863_ghostpdl/base_gxsync.c								
ANR	1303321	Function	gx_semaphore_alloc	35:0:1188:2277							
ANR	1303322	FunctionDef	gx_semaphore_alloc (gs_memory_t * memory)		1303321	0					
ANR	1303323	CompoundStatement		39:0:1343:2277	1303321	0					
ANR	1303324	IdentifierDeclStatement	gx_semaphore_t * sema ;	40:4:1349:1369	1303321	0	True				
ANR	1303325	IdentifierDecl	* sema		1303321	0					
ANR	1303326	IdentifierDeclType	gx_semaphore_t *		1303321	0					
ANR	1303327	Identifier	sema		1303321	1					
ANR	1303328	IdentifierDeclStatement	unsigned semaSizeof = sizeof ( * sema ) - sizeof ( sema -> native ) + gp_semaphore_sizeof ( ) ;	43:4:1473:1559	1303321	1	True				
ANR	1303329	IdentifierDecl	semaSizeof = sizeof ( * sema ) - sizeof ( sema -> native ) + gp_semaphore_sizeof ( )		1303321	0					
ANR	1303330	IdentifierDeclType	unsigned		1303321	0					
ANR	1303331	Identifier	semaSizeof		1303321	1					
ANR	1303332	AssignmentExpression	semaSizeof = sizeof ( * sema ) - sizeof ( sema -> native ) + gp_semaphore_sizeof ( )		1303321	2		=			
ANR	1303333	Identifier	semaSizeof		1303321	0					
ANR	1303334	AdditiveExpression	sizeof ( * sema ) - sizeof ( sema -> native ) + gp_semaphore_sizeof ( )		1303321	1		-			
ANR	1303335	SizeofExpression	sizeof ( * sema )		1303321	0					
ANR	1303336	Sizeof	sizeof		1303321	0					
ANR	1303337	UnaryOperationExpression	* sema		1303321	1					
ANR	1303338	UnaryOperator	*		1303321	0					
ANR	1303339	Identifier	sema		1303321	1					
ANR	1303340	AdditiveExpression	sizeof ( sema -> native ) + gp_semaphore_sizeof ( )		1303321	1		+			
ANR	1303341	SizeofExpression	sizeof ( sema -> native )		1303321	0					
ANR	1303342	Sizeof	sizeof		1303321	0					
ANR	1303343	PtrMemberAccess	sema -> native		1303321	1					
ANR	1303344	Identifier	sema		1303321	0					
ANR	1303345	Identifier	native		1303321	1					
ANR	1303346	CallExpression	gp_semaphore_sizeof ( )		1303321	1					
ANR	1303347	Callee	gp_semaphore_sizeof		1303321	0					
ANR	1303348	Identifier	gp_semaphore_sizeof		1303321	0					
ANR	1303349	ArgumentList			1303321	1					
ANR	1303350	IfStatement	if ( gp_semaphore_open ( 0 ) == 0 )		1303321	2					
ANR	1303351	Condition	gp_semaphore_open ( 0 ) == 0	46:8:1570:1594	1303321	0	True				
ANR	1303352	EqualityExpression	gp_semaphore_open ( 0 ) == 0		1303321	0		==			
ANR	1303353	CallExpression	gp_semaphore_open ( 0 )		1303321	0					
ANR	1303354	Callee	gp_semaphore_open		1303321	0					
ANR	1303355	Identifier	gp_semaphore_open		1303321	0					
ANR	1303356	ArgumentList	0		1303321	1					
ANR	1303357	Argument	0		1303321	0					
ANR	1303358	PrimaryExpression	0		1303321	0					
ANR	1303359	PrimaryExpression	0		1303321	1					
ANR	1303360	ExpressionStatement	"sema = ( gx_semaphore_t * ) gs_alloc_bytes ( memory , semaSizeof , ""gx_semaphore (create)"" )"	48:8:1666:1800	1303321	1	True				
ANR	1303361	AssignmentExpression	"sema = ( gx_semaphore_t * ) gs_alloc_bytes ( memory , semaSizeof , ""gx_semaphore (create)"" )"		1303321	0		=			
ANR	1303362	Identifier	sema		1303321	0					
ANR	1303363	CastExpression	"( gx_semaphore_t * ) gs_alloc_bytes ( memory , semaSizeof , ""gx_semaphore (create)"" )"		1303321	1					
ANR	1303364	CastTarget	gx_semaphore_t *		1303321	0					
ANR	1303365	CallExpression	"gs_alloc_bytes ( memory , semaSizeof , ""gx_semaphore (create)"" )"		1303321	1					
ANR	1303366	Callee	gs_alloc_bytes		1303321	0					
ANR	1303367	Identifier	gs_alloc_bytes		1303321	0					
ANR	1303368	ArgumentList	memory		1303321	1					
ANR	1303369	Argument	memory		1303321	0					
ANR	1303370	Identifier	memory		1303321	0					
ANR	1303371	Argument	semaSizeof		1303321	1					
ANR	1303372	Identifier	semaSizeof		1303321	0					
ANR	1303373	Argument	"""gx_semaphore (create)"""		1303321	2					
ANR	1303374	PrimaryExpression	"""gx_semaphore (create)"""		1303321	0					
ANR	1303375	ElseStatement	else		1303321	0					
ANR	1303376	ExpressionStatement	"sema = ( gx_semaphore_t * ) gs_alloc_bytes_immovable ( memory , semaSizeof , ""gx_semaphore (create)"" )"	52:8:1843:1989	1303321	0	True				
ANR	1303377	AssignmentExpression	"sema = ( gx_semaphore_t * ) gs_alloc_bytes_immovable ( memory , semaSizeof , ""gx_semaphore (create)"" )"		1303321	0		=			
ANR	1303378	Identifier	sema		1303321	0					
ANR	1303379	CastExpression	"( gx_semaphore_t * ) gs_alloc_bytes_immovable ( memory , semaSizeof , ""gx_semaphore (create)"" )"		1303321	1					
ANR	1303380	CastTarget	gx_semaphore_t *		1303321	0					
ANR	1303381	CallExpression	"gs_alloc_bytes_immovable ( memory , semaSizeof , ""gx_semaphore (create)"" )"		1303321	1					
ANR	1303382	Callee	gs_alloc_bytes_immovable		1303321	0					
ANR	1303383	Identifier	gs_alloc_bytes_immovable		1303321	0					
ANR	1303384	ArgumentList	memory		1303321	1					
ANR	1303385	Argument	memory		1303321	0					
ANR	1303386	Identifier	memory		1303321	0					
ANR	1303387	Argument	semaSizeof		1303321	1					
ANR	1303388	Identifier	semaSizeof		1303321	0					
ANR	1303389	Argument	"""gx_semaphore (create)"""		1303321	2					
ANR	1303390	PrimaryExpression	"""gx_semaphore (create)"""		1303321	0					
ANR	1303391	IfStatement	if ( sema == 0 )		1303321	3					
ANR	1303392	Condition	sema == 0	54:8:1999:2007	1303321	0	True				
ANR	1303393	EqualityExpression	sema == 0		1303321	0		==			
ANR	1303394	Identifier	sema		1303321	0					
ANR	1303395	PrimaryExpression	0		1303321	1					
ANR	1303396	ReturnStatement	return 0 ;	55:8:2018:2026	1303321	1	True				
ANR	1303397	PrimaryExpression	0		1303321	0					
ANR	1303398	ExpressionStatement	sema -> memory = memory	58:4:2102:2123	1303321	4	True				
ANR	1303399	AssignmentExpression	sema -> memory = memory		1303321	0		=			
ANR	1303400	PtrMemberAccess	sema -> memory		1303321	0					
ANR	1303401	Identifier	sema		1303321	0					
ANR	1303402	Identifier	memory		1303321	1					
ANR	1303403	Identifier	memory		1303321	1					
ANR	1303404	IfStatement	if ( gp_semaphore_open ( & sema -> native ) < 0 )		1303321	5					
ANR	1303405	Condition	gp_semaphore_open ( & sema -> native ) < 0	60:8:2134:2169	1303321	0	True				
ANR	1303406	RelationalExpression	gp_semaphore_open ( & sema -> native ) < 0		1303321	0		<			
ANR	1303407	CallExpression	gp_semaphore_open ( & sema -> native )		1303321	0					
ANR	1303408	Callee	gp_semaphore_open		1303321	0					
ANR	1303409	Identifier	gp_semaphore_open		1303321	0					
ANR	1303410	ArgumentList	& sema -> native		1303321	1					
ANR	1303411	Argument	& sema -> native		1303321	0					
ANR	1303412	UnaryOperationExpression	& sema -> native		1303321	0					
ANR	1303413	UnaryOperator	&		1303321	0					
ANR	1303414	PtrMemberAccess	sema -> native		1303321	1					
ANR	1303415	Identifier	sema		1303321	0					
ANR	1303416	Identifier	native		1303321	1					
ANR	1303417	PrimaryExpression	0		1303321	1					
ANR	1303418	CompoundStatement		22:46:828:828	1303321	1					
ANR	1303419	ExpressionStatement	"gs_free_object ( memory , sema , ""gx_semaphore (alloc)"" )"	61:8:2182:2234	1303321	0	True				
ANR	1303420	CallExpression	"gs_free_object ( memory , sema , ""gx_semaphore (alloc)"" )"		1303321	0					
ANR	1303421	Callee	gs_free_object		1303321	0					
ANR	1303422	Identifier	gs_free_object		1303321	0					
ANR	1303423	ArgumentList	memory		1303321	1					
ANR	1303424	Argument	memory		1303321	0					
ANR	1303425	Identifier	memory		1303321	0					
ANR	1303426	Argument	sema		1303321	1					
ANR	1303427	Identifier	sema		1303321	0					
ANR	1303428	Argument	"""gx_semaphore (alloc)"""		1303321	2					
ANR	1303429	PrimaryExpression	"""gx_semaphore (alloc)"""		1303321	0					
ANR	1303430	ReturnStatement	return 0 ;	62:8:2244:2252	1303321	1	True				
ANR	1303431	PrimaryExpression	0		1303321	0					
ANR	1303432	ReturnStatement	return sema ;	64:4:2264:2275	1303321	6	True				
ANR	1303433	Identifier	sema		1303321	0					
ANR	1303434	ReturnType	gx_semaphore_t *		1303321	1					
ANR	1303435	Identifier	gx_semaphore_alloc		1303321	2					
ANR	1303436	ParameterList	gs_memory_t * memory		1303321	3					
ANR	1303437	Parameter	gs_memory_t * memory	37:22:1290:1309	1303321	0	True				
ANR	1303438	ParameterType	gs_memory_t *		1303321	0					
ANR	1303439	Identifier	memory		1303321	1					
ANR	1303440	CFGEntryNode	ENTRY		1303321		True				
ANR	1303441	CFGExitNode	EXIT		1303321		True				
ANR	1303442	Symbol	sema -> memory		1303321						
ANR	1303443	Symbol	gs_alloc_bytes		1303321						
ANR	1303444	Symbol	memory		1303321						
ANR	1303445	Symbol	sema		1303321						
ANR	1303446	Symbol	semaSizeof		1303321						
ANR	1303447	Symbol	gs_alloc_bytes_immovable		1303321						
ANR	1303448	Symbol	gp_semaphore_sizeof		1303321						
ANR	1303449	Symbol	* sema		1303321						
ANR	1303450	Symbol	gp_semaphore_open		1303321						
ANR	1303451	Symbol	sema -> native		1303321						
ANR	1303452	Symbol	& sema -> native		1303321						
ANR	1303453	Function	gx_semaphore_free	68:0:2312:2541							
ANR	1303454	FunctionDef	gx_semaphore_free (gx_semaphore_t * sema)		1303453	0					
ANR	1303455	CompoundStatement		72:0:2407:2541	1303453	0					
ANR	1303456	IfStatement	if ( sema )		1303453	0					
ANR	1303457	Condition	sema	73:8:2417:2420	1303453	0	True				
ANR	1303458	Identifier	sema		1303453	0					
ANR	1303459	CompoundStatement		2:14:15:15	1303453	1					
ANR	1303460	ExpressionStatement	gp_semaphore_close ( & sema -> native )	74:8:2433:2466	1303453	0	True				
ANR	1303461	CallExpression	gp_semaphore_close ( & sema -> native )		1303453	0					
ANR	1303462	Callee	gp_semaphore_close		1303453	0					
ANR	1303463	Identifier	gp_semaphore_close		1303453	0					
ANR	1303464	ArgumentList	& sema -> native		1303453	1					
ANR	1303465	Argument	& sema -> native		1303453	0					
ANR	1303466	UnaryOperationExpression	& sema -> native		1303453	0					
ANR	1303467	UnaryOperator	&		1303453	0					
ANR	1303468	PtrMemberAccess	sema -> native		1303453	1					
ANR	1303469	Identifier	sema		1303453	0					
ANR	1303470	Identifier	native		1303453	1					
ANR	1303471	ExpressionStatement	"gs_free_object ( sema -> memory , sema , ""gx_semaphore (free)"" )"	75:8:2476:2533	1303453	1	True				
ANR	1303472	CallExpression	"gs_free_object ( sema -> memory , sema , ""gx_semaphore (free)"" )"		1303453	0					
ANR	1303473	Callee	gs_free_object		1303453	0					
ANR	1303474	Identifier	gs_free_object		1303453	0					
ANR	1303475	ArgumentList	sema -> memory		1303453	1					
ANR	1303476	Argument	sema -> memory		1303453	0					
ANR	1303477	PtrMemberAccess	sema -> memory		1303453	0					
ANR	1303478	Identifier	sema		1303453	0					
ANR	1303479	Identifier	memory		1303453	1					
ANR	1303480	Argument	sema		1303453	1					
ANR	1303481	Identifier	sema		1303453	0					
ANR	1303482	Argument	"""gx_semaphore (free)"""		1303453	2					
ANR	1303483	PrimaryExpression	"""gx_semaphore (free)"""		1303453	0					
ANR	1303484	ReturnType	void		1303453	1					
ANR	1303485	Identifier	gx_semaphore_free		1303453	2					
ANR	1303486	ParameterList	gx_semaphore_t * sema		1303453	3					
ANR	1303487	Parameter	gx_semaphore_t * sema	70:21:2357:2377	1303453	0	True				
ANR	1303488	ParameterType	gx_semaphore_t *		1303453	0					
ANR	1303489	Identifier	sema		1303453	1					
ANR	1303490	CFGEntryNode	ENTRY		1303453		True				
ANR	1303491	CFGExitNode	EXIT		1303453		True				
ANR	1303492	Symbol	sema -> memory		1303453						
ANR	1303493	Symbol	sema		1303453						
ANR	1303494	Symbol	* sema		1303453						
ANR	1303495	Symbol	& sema -> native		1303453						
ANR	1303496	Function	gx_semaphore_label	79:0:2544:2719							
ANR	1303497	FunctionDef	"gx_semaphore_label (gx_semaphore_t * sema , const char * name)"		1303496	0					
ANR	1303498	CompoundStatement		80:0:2621:2719	1303496	0					
ANR	1303499	ExpressionStatement	( void ) name	81:4:2627:2637	1303496	0	True				
ANR	1303500	CastExpression	( void ) name		1303496	0					
ANR	1303501	CastTarget	void		1303496	0					
ANR	1303502	Identifier	name		1303496	1					
ANR	1303503	IfStatement	if ( sema )		1303496	1					
ANR	1303504	Condition	sema	82:8:2647:2650	1303496	0	True				
ANR	1303505	Identifier	sema		1303496	0					
ANR	1303506	ExpressionStatement	"gp_semaphore_label ( & sema -> native , name )"	83:8:2661:2700	1303496	1	True				
ANR	1303507	CallExpression	"gp_semaphore_label ( & sema -> native , name )"		1303496	0					
ANR	1303508	Callee	gp_semaphore_label		1303496	0					
ANR	1303509	Identifier	gp_semaphore_label		1303496	0					
ANR	1303510	ArgumentList	& sema -> native		1303496	1					
ANR	1303511	Argument	& sema -> native		1303496	0					
ANR	1303512	UnaryOperationExpression	& sema -> native		1303496	0					
ANR	1303513	UnaryOperator	&		1303496	0					
ANR	1303514	PtrMemberAccess	sema -> native		1303496	1					
ANR	1303515	Identifier	sema		1303496	0					
ANR	1303516	Identifier	native		1303496	1					
ANR	1303517	Argument	name		1303496	1					
ANR	1303518	Identifier	name		1303496	0					
ANR	1303519	ReturnStatement	return sema ;	84:4:2706:2717	1303496	2	True				
ANR	1303520	Identifier	sema		1303496	0					
ANR	1303521	ReturnType	gx_semaphore_t *		1303496	1					
ANR	1303522	Identifier	( gx_semaphore_label )		1303496	2					
ANR	1303523	Identifier	gx_semaphore_label		1303496	3					
ANR	1303524	ParameterList	"gx_semaphore_t * sema , const char * name"		1303496	4					
ANR	1303525	Parameter	gx_semaphore_t * sema	79:37:2581:2600	1303496	0	True				
ANR	1303526	ParameterType	gx_semaphore_t *		1303496	0					
ANR	1303527	Identifier	sema		1303496	1					
ANR	1303528	Parameter	const char * name	79:59:2603:2618	1303496	1	True				
ANR	1303529	ParameterType	const char *		1303496	0					
ANR	1303530	Identifier	name		1303496	1					
ANR	1303531	CFGEntryNode	ENTRY		1303496		True				
ANR	1303532	CFGExitNode	EXIT		1303496		True				
ANR	1303533	Symbol	sema		1303496						
ANR	1303534	Symbol	name		1303496						
ANR	1303535	Symbol	& sema -> native		1303496						
ANR	1303536	Function	gx_monitor_alloc	96:0:3144:4190							
ANR	1303537	FunctionDef	gx_monitor_alloc (gs_memory_t * memory)		1303536	0					
ANR	1303538	CompoundStatement		100:0:3292:4190	1303536	0					
ANR	1303539	IdentifierDeclStatement	gx_monitor_t * mon ;	101:4:3298:3315	1303536	0	True				
ANR	1303540	IdentifierDecl	* mon		1303536	0					
ANR	1303541	IdentifierDeclType	gx_monitor_t *		1303536	0					
ANR	1303542	Identifier	mon		1303536	1					
ANR	1303543	IdentifierDeclStatement	unsigned monSizeof = sizeof ( * mon ) - sizeof ( mon -> native ) + gp_monitor_sizeof ( ) ;	104:4:3414:3495	1303536	1	True				
ANR	1303544	IdentifierDecl	monSizeof = sizeof ( * mon ) - sizeof ( mon -> native ) + gp_monitor_sizeof ( )		1303536	0					
ANR	1303545	IdentifierDeclType	unsigned		1303536	0					
ANR	1303546	Identifier	monSizeof		1303536	1					
ANR	1303547	AssignmentExpression	monSizeof = sizeof ( * mon ) - sizeof ( mon -> native ) + gp_monitor_sizeof ( )		1303536	2		=			
ANR	1303548	Identifier	monSizeof		1303536	0					
ANR	1303549	AdditiveExpression	sizeof ( * mon ) - sizeof ( mon -> native ) + gp_monitor_sizeof ( )		1303536	1		-			
ANR	1303550	SizeofExpression	sizeof ( * mon )		1303536	0					
ANR	1303551	Sizeof	sizeof		1303536	0					
ANR	1303552	UnaryOperationExpression	* mon		1303536	1					
ANR	1303553	UnaryOperator	*		1303536	0					
ANR	1303554	Identifier	mon		1303536	1					
ANR	1303555	AdditiveExpression	sizeof ( mon -> native ) + gp_monitor_sizeof ( )		1303536	1		+			
ANR	1303556	SizeofExpression	sizeof ( mon -> native )		1303536	0					
ANR	1303557	Sizeof	sizeof		1303536	0					
ANR	1303558	PtrMemberAccess	mon -> native		1303536	1					
ANR	1303559	Identifier	mon		1303536	0					
ANR	1303560	Identifier	native		1303536	1					
ANR	1303561	CallExpression	gp_monitor_sizeof ( )		1303536	1					
ANR	1303562	Callee	gp_monitor_sizeof		1303536	0					
ANR	1303563	Identifier	gp_monitor_sizeof		1303536	0					
ANR	1303564	ArgumentList			1303536	1					
ANR	1303565	IfStatement	if ( gp_monitor_open ( 0 ) == 0 )		1303536	2					
ANR	1303566	Condition	gp_monitor_open ( 0 ) == 0	107:8:3506:3528	1303536	0	True				
ANR	1303567	EqualityExpression	gp_monitor_open ( 0 ) == 0		1303536	0		==			
ANR	1303568	CallExpression	gp_monitor_open ( 0 )		1303536	0					
ANR	1303569	Callee	gp_monitor_open		1303536	0					
ANR	1303570	Identifier	gp_monitor_open		1303536	0					
ANR	1303571	ArgumentList	0		1303536	1					
ANR	1303572	Argument	0		1303536	0					
ANR	1303573	PrimaryExpression	0		1303536	0					
ANR	1303574	PrimaryExpression	0		1303536	1					
ANR	1303575	ExpressionStatement	"mon = ( gx_monitor_t * ) gs_alloc_bytes ( memory , monSizeof , ""gx_monitor (create)"" )"	109:8:3598:3723	1303536	1	True				
ANR	1303576	AssignmentExpression	"mon = ( gx_monitor_t * ) gs_alloc_bytes ( memory , monSizeof , ""gx_monitor (create)"" )"		1303536	0		=			
ANR	1303577	Identifier	mon		1303536	0					
ANR	1303578	CastExpression	"( gx_monitor_t * ) gs_alloc_bytes ( memory , monSizeof , ""gx_monitor (create)"" )"		1303536	1					
ANR	1303579	CastTarget	gx_monitor_t *		1303536	0					
ANR	1303580	CallExpression	"gs_alloc_bytes ( memory , monSizeof , ""gx_monitor (create)"" )"		1303536	1					
ANR	1303581	Callee	gs_alloc_bytes		1303536	0					
ANR	1303582	Identifier	gs_alloc_bytes		1303536	0					
ANR	1303583	ArgumentList	memory		1303536	1					
ANR	1303584	Argument	memory		1303536	0					
ANR	1303585	Identifier	memory		1303536	0					
ANR	1303586	Argument	monSizeof		1303536	1					
ANR	1303587	Identifier	monSizeof		1303536	0					
ANR	1303588	Argument	"""gx_monitor (create)"""		1303536	2					
ANR	1303589	PrimaryExpression	"""gx_monitor (create)"""		1303536	0					
ANR	1303590	ElseStatement	else		1303536	0					
ANR	1303591	ExpressionStatement	"mon = ( gx_monitor_t * ) gs_alloc_bytes_immovable ( memory , monSizeof , ""gx_monitor (create)"" )"	113:8:3766:3908	1303536	0	True				
ANR	1303592	AssignmentExpression	"mon = ( gx_monitor_t * ) gs_alloc_bytes_immovable ( memory , monSizeof , ""gx_monitor (create)"" )"		1303536	0		=			
ANR	1303593	Identifier	mon		1303536	0					
ANR	1303594	CastExpression	"( gx_monitor_t * ) gs_alloc_bytes_immovable ( memory , monSizeof , ""gx_monitor (create)"" )"		1303536	1					
ANR	1303595	CastTarget	gx_monitor_t *		1303536	0					
ANR	1303596	CallExpression	"gs_alloc_bytes_immovable ( memory , monSizeof , ""gx_monitor (create)"" )"		1303536	1					
ANR	1303597	Callee	gs_alloc_bytes_immovable		1303536	0					
ANR	1303598	Identifier	gs_alloc_bytes_immovable		1303536	0					
ANR	1303599	ArgumentList	memory		1303536	1					
ANR	1303600	Argument	memory		1303536	0					
ANR	1303601	Identifier	memory		1303536	0					
ANR	1303602	Argument	monSizeof		1303536	1					
ANR	1303603	Identifier	monSizeof		1303536	0					
ANR	1303604	Argument	"""gx_monitor (create)"""		1303536	2					
ANR	1303605	PrimaryExpression	"""gx_monitor (create)"""		1303536	0					
ANR	1303606	IfStatement	if ( mon == 0 )		1303536	3					
ANR	1303607	Condition	mon == 0	115:8:3918:3925	1303536	0	True				
ANR	1303608	EqualityExpression	mon == 0		1303536	0		==			
ANR	1303609	Identifier	mon		1303536	0					
ANR	1303610	PrimaryExpression	0		1303536	1					
ANR	1303611	ReturnStatement	return 0 ;	116:8:3936:3944	1303536	1	True				
ANR	1303612	PrimaryExpression	0		1303536	0					
ANR	1303613	ExpressionStatement	mon -> memory = memory	119:4:4023:4043	1303536	4	True				
ANR	1303614	AssignmentExpression	mon -> memory = memory		1303536	0		=			
ANR	1303615	PtrMemberAccess	mon -> memory		1303536	0					
ANR	1303616	Identifier	mon		1303536	0					
ANR	1303617	Identifier	memory		1303536	1					
ANR	1303618	Identifier	memory		1303536	1					
ANR	1303619	IfStatement	if ( gp_monitor_open ( & mon -> native ) < 0 )		1303536	5					
ANR	1303620	Condition	gp_monitor_open ( & mon -> native ) < 0	121:8:4054:4086	1303536	0	True				
ANR	1303621	RelationalExpression	gp_monitor_open ( & mon -> native ) < 0		1303536	0		<			
ANR	1303622	CallExpression	gp_monitor_open ( & mon -> native )		1303536	0					
ANR	1303623	Callee	gp_monitor_open		1303536	0					
ANR	1303624	Identifier	gp_monitor_open		1303536	0					
ANR	1303625	ArgumentList	& mon -> native		1303536	1					
ANR	1303626	Argument	& mon -> native		1303536	0					
ANR	1303627	UnaryOperationExpression	& mon -> native		1303536	0					
ANR	1303628	UnaryOperator	&		1303536	0					
ANR	1303629	PtrMemberAccess	mon -> native		1303536	1					
ANR	1303630	Identifier	mon		1303536	0					
ANR	1303631	Identifier	native		1303536	1					
ANR	1303632	PrimaryExpression	0		1303536	1					
ANR	1303633	CompoundStatement		22:43:796:796	1303536	1					
ANR	1303634	ExpressionStatement	"gs_free_object ( memory , mon , ""gx_monitor (alloc)"" )"	122:8:4099:4148	1303536	0	True				
ANR	1303635	CallExpression	"gs_free_object ( memory , mon , ""gx_monitor (alloc)"" )"		1303536	0					
ANR	1303636	Callee	gs_free_object		1303536	0					
ANR	1303637	Identifier	gs_free_object		1303536	0					
ANR	1303638	ArgumentList	memory		1303536	1					
ANR	1303639	Argument	memory		1303536	0					
ANR	1303640	Identifier	memory		1303536	0					
ANR	1303641	Argument	mon		1303536	1					
ANR	1303642	Identifier	mon		1303536	0					
ANR	1303643	Argument	"""gx_monitor (alloc)"""		1303536	2					
ANR	1303644	PrimaryExpression	"""gx_monitor (alloc)"""		1303536	0					
ANR	1303645	ReturnStatement	return 0 ;	123:8:4158:4166	1303536	1	True				
ANR	1303646	PrimaryExpression	0		1303536	0					
ANR	1303647	ReturnStatement	return mon ;	125:4:4178:4188	1303536	6	True				
ANR	1303648	Identifier	mon		1303536	0					
ANR	1303649	ReturnType	gx_monitor_t *		1303536	1					
ANR	1303650	Identifier	gx_monitor_alloc		1303536	2					
ANR	1303651	ParameterList	gs_memory_t * memory		1303536	3					
ANR	1303652	Parameter	gs_memory_t * memory	98:20:3239:3258	1303536	0	True				
ANR	1303653	ParameterType	gs_memory_t *		1303536	0					
ANR	1303654	Identifier	memory		1303536	1					
ANR	1303655	CFGEntryNode	ENTRY		1303536		True				
ANR	1303656	CFGExitNode	EXIT		1303536		True				
ANR	1303657	Symbol	& mon -> native		1303536						
ANR	1303658	Symbol	mon -> memory		1303536						
ANR	1303659	Symbol	monSizeof		1303536						
ANR	1303660	Symbol	gs_alloc_bytes		1303536						
ANR	1303661	Symbol	memory		1303536						
ANR	1303662	Symbol	gs_alloc_bytes_immovable		1303536						
ANR	1303663	Symbol	* mon		1303536						
ANR	1303664	Symbol	gp_monitor_open		1303536						
ANR	1303665	Symbol	mon		1303536						
ANR	1303666	Symbol	gp_monitor_sizeof		1303536						
ANR	1303667	Symbol	mon -> native		1303536						
ANR	1303668	Function	gx_monitor_free	129:0:4221:4433							
ANR	1303669	FunctionDef	gx_monitor_free (gx_monitor_t * mon)		1303668	0					
ANR	1303670	CompoundStatement		133:0:4307:4433	1303668	0					
ANR	1303671	IfStatement	if ( mon )		1303668	0					
ANR	1303672	Condition	mon	134:8:4317:4319	1303668	0	True				
ANR	1303673	Identifier	mon		1303668	0					
ANR	1303674	CompoundStatement		2:13:14:14	1303668	1					
ANR	1303675	ExpressionStatement	gp_monitor_close ( & mon -> native )	135:8:4332:4362	1303668	0	True				
ANR	1303676	CallExpression	gp_monitor_close ( & mon -> native )		1303668	0					
ANR	1303677	Callee	gp_monitor_close		1303668	0					
ANR	1303678	Identifier	gp_monitor_close		1303668	0					
ANR	1303679	ArgumentList	& mon -> native		1303668	1					
ANR	1303680	Argument	& mon -> native		1303668	0					
ANR	1303681	UnaryOperationExpression	& mon -> native		1303668	0					
ANR	1303682	UnaryOperator	&		1303668	0					
ANR	1303683	PtrMemberAccess	mon -> native		1303668	1					
ANR	1303684	Identifier	mon		1303668	0					
ANR	1303685	Identifier	native		1303668	1					
ANR	1303686	ExpressionStatement	"gs_free_object ( mon -> memory , mon , ""gx_monitor (free)"" )"	136:8:4372:4425	1303668	1	True				
ANR	1303687	CallExpression	"gs_free_object ( mon -> memory , mon , ""gx_monitor (free)"" )"		1303668	0					
ANR	1303688	Callee	gs_free_object		1303668	0					
ANR	1303689	Identifier	gs_free_object		1303668	0					
ANR	1303690	ArgumentList	mon -> memory		1303668	1					
ANR	1303691	Argument	mon -> memory		1303668	0					
ANR	1303692	PtrMemberAccess	mon -> memory		1303668	0					
ANR	1303693	Identifier	mon		1303668	0					
ANR	1303694	Identifier	memory		1303668	1					
ANR	1303695	Argument	mon		1303668	1					
ANR	1303696	Identifier	mon		1303668	0					
ANR	1303697	Argument	"""gx_monitor (free)"""		1303668	2					
ANR	1303698	PrimaryExpression	"""gx_monitor (free)"""		1303668	0					
ANR	1303699	ReturnType	void		1303668	1					
ANR	1303700	Identifier	gx_monitor_free		1303668	2					
ANR	1303701	ParameterList	gx_monitor_t * mon		1303668	3					
ANR	1303702	Parameter	gx_monitor_t * mon	131:19:4262:4279	1303668	0	True				
ANR	1303703	ParameterType	gx_monitor_t *		1303668	0					
ANR	1303704	Identifier	mon		1303668	1					
ANR	1303705	CFGEntryNode	ENTRY		1303668		True				
ANR	1303706	CFGExitNode	EXIT		1303668		True				
ANR	1303707	Symbol	& mon -> native		1303668						
ANR	1303708	Symbol	mon -> memory		1303668						
ANR	1303709	Symbol	* mon		1303668						
ANR	1303710	Symbol	mon		1303668						
ANR	1303711	Function	gx_monitor_label	140:0:4436:4600							
ANR	1303712	FunctionDef	"gx_monitor_label (gx_monitor_t * mon , const char * name)"		1303711	0					
ANR	1303713	CompoundStatement		142:0:4507:4600	1303711	0					
ANR	1303714	ExpressionStatement	( void ) name	143:4:4513:4523	1303711	0	True				
ANR	1303715	CastExpression	( void ) name		1303711	0					
ANR	1303716	CastTarget	void		1303711	0					
ANR	1303717	Identifier	name		1303711	1					
ANR	1303718	IfStatement	if ( mon )		1303711	1					
ANR	1303719	Condition	mon	144:8:4533:4535	1303711	0	True				
ANR	1303720	Identifier	mon		1303711	0					
ANR	1303721	ExpressionStatement	"gp_monitor_label ( & mon -> native , name )"	145:8:4546:4582	1303711	1	True				
ANR	1303722	CallExpression	"gp_monitor_label ( & mon -> native , name )"		1303711	0					
ANR	1303723	Callee	gp_monitor_label		1303711	0					
ANR	1303724	Identifier	gp_monitor_label		1303711	0					
ANR	1303725	ArgumentList	& mon -> native		1303711	1					
ANR	1303726	Argument	& mon -> native		1303711	0					
ANR	1303727	UnaryOperationExpression	& mon -> native		1303711	0					
ANR	1303728	UnaryOperator	&		1303711	0					
ANR	1303729	PtrMemberAccess	mon -> native		1303711	1					
ANR	1303730	Identifier	mon		1303711	0					
ANR	1303731	Identifier	native		1303711	1					
ANR	1303732	Argument	name		1303711	1					
ANR	1303733	Identifier	name		1303711	0					
ANR	1303734	ReturnStatement	return mon ;	146:4:4588:4598	1303711	2	True				
ANR	1303735	Identifier	mon		1303711	0					
ANR	1303736	ReturnType	gx_monitor_t *		1303711	1					
ANR	1303737	Identifier	( gx_monitor_label )		1303711	2					
ANR	1303738	Identifier	gx_monitor_label		1303711	3					
ANR	1303739	ParameterList	"gx_monitor_t * mon , const char * name"		1303711	4					
ANR	1303740	Parameter	gx_monitor_t * mon	141:19:4470:4486	1303711	0	True				
ANR	1303741	ParameterType	gx_monitor_t *		1303711	0					
ANR	1303742	Identifier	mon		1303711	1					
ANR	1303743	Parameter	const char * name	141:38:4489:4504	1303711	1	True				
ANR	1303744	ParameterType	const char *		1303711	0					
ANR	1303745	Identifier	name		1303711	1					
ANR	1303746	CFGEntryNode	ENTRY		1303711		True				
ANR	1303747	CFGExitNode	EXIT		1303711		True				
ANR	1303748	Symbol	& mon -> native		1303711						
ANR	1303749	Symbol	name		1303711						
ANR	1303750	Symbol	mon		1303711						
