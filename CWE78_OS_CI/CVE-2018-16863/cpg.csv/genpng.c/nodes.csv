command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4919309	File	data/converged/CVE-2018-16863_ghostpdl/genpng.c								
ANR	4919310	ClassDef	color	85:13:3180:3765							
ANR	4919311	DeclStmt									
ANR	4919312	Decl							const char	const char *	name
ANR	4919313	DeclStmt									
ANR	4919314	Decl							double	double	red
ANR	4919315	DeclStmt									
ANR	4919316	Decl							double	double	green
ANR	4919317	DeclStmt									
ANR	4919318	Decl							double	double	blue
ANR	4919319	DeclStmt									
ANR	4919320	Decl							color	color [ ]	colors
ANR	4919321	Function	color_of	111:0:3825:4094							
ANR	4919322	FunctionDef	color_of (const char * arg)		4919321	0					
ANR	4919323	CompoundStatement		113:0:3879:4094	4919321	0					
ANR	4919324	IdentifierDeclStatement	int icolor = color_count ;	114:3:3884:3908	4919321	0	True				
ANR	4919325	IdentifierDecl	icolor = color_count		4919321	0					
ANR	4919326	IdentifierDeclType	int		4919321	0					
ANR	4919327	Identifier	icolor		4919321	1					
ANR	4919328	AssignmentExpression	icolor = color_count		4919321	2		=			
ANR	4919329	Identifier	color_count		4919321	0					
ANR	4919330	Identifier	color_count		4919321	1					
ANR	4919331	WhileStatement	while ( -- icolor >= 0 )		4919321	1					
ANR	4919332	Condition	-- icolor >= 0	116:10:3921:3933	4919321	0	True				
ANR	4919333	RelationalExpression	-- icolor >= 0		4919321	0		>=			
ANR	4919334	UnaryExpression	-- icolor		4919321	0					
ANR	4919335	IncDec	--		4919321	0					
ANR	4919336	Identifier	icolor		4919321	1					
ANR	4919337	PrimaryExpression	0		4919321	1					
ANR	4919338	CompoundStatement		5:3:59:59	4919321	1					
ANR	4919339	IfStatement	"if ( strcmp ( colors [ icolor ] . name , arg ) == 0 )"		4919321	0					
ANR	4919340	Condition	"strcmp ( colors [ icolor ] . name , arg ) == 0"	118:10:3951:3987	4919321	0	True				
ANR	4919341	EqualityExpression	"strcmp ( colors [ icolor ] . name , arg ) == 0"		4919321	0		==			
ANR	4919342	CallExpression	"strcmp ( colors [ icolor ] . name , arg )"		4919321	0					
ANR	4919343	Callee	strcmp		4919321	0					
ANR	4919344	Identifier	strcmp		4919321	0					
ANR	4919345	ArgumentList	colors [ icolor ] . name		4919321	1					
ANR	4919346	Argument	colors [ icolor ] . name		4919321	0					
ANR	4919347	MemberAccess	colors [ icolor ] . name		4919321	0					
ANR	4919348	ArrayIndexing	colors [ icolor ]		4919321	0					
ANR	4919349	Identifier	colors		4919321	0					
ANR	4919350	Identifier	icolor		4919321	1					
ANR	4919351	Identifier	name		4919321	1					
ANR	4919352	Argument	arg		4919321	1					
ANR	4919353	Identifier	arg		4919321	0					
ANR	4919354	PrimaryExpression	0		4919321	1					
ANR	4919355	ReturnStatement	return colors + icolor ;	119:9:3999:4019	4919321	1	True				
ANR	4919356	AdditiveExpression	colors + icolor		4919321	0		+			
ANR	4919357	Identifier	colors		4919321	0					
ANR	4919358	Identifier	icolor		4919321	1					
ANR	4919359	ExpressionStatement	"fprintf ( stderr , ""genpng: invalid color %s\\n"" , arg )"	122:3:4030:4080	4919321	2	True				
ANR	4919360	CallExpression	"fprintf ( stderr , ""genpng: invalid color %s\\n"" , arg )"		4919321	0					
ANR	4919361	Callee	fprintf		4919321	0					
ANR	4919362	Identifier	fprintf		4919321	0					
ANR	4919363	ArgumentList	stderr		4919321	1					
ANR	4919364	Argument	stderr		4919321	0					
ANR	4919365	Identifier	stderr		4919321	0					
ANR	4919366	Argument	"""genpng: invalid color %s\\n"""		4919321	1					
ANR	4919367	PrimaryExpression	"""genpng: invalid color %s\\n"""		4919321	0					
ANR	4919368	Argument	arg		4919321	2					
ANR	4919369	Identifier	arg		4919321	0					
ANR	4919370	ExpressionStatement	exit ( 1 )	123:3:4085:4092	4919321	3	True				
ANR	4919371	CallExpression	exit ( 1 )		4919321	0					
ANR	4919372	Callee	exit		4919321	0					
ANR	4919373	Identifier	exit		4919321	0					
ANR	4919374	ArgumentList	1		4919321	1					
ANR	4919375	Argument	1		4919321	0					
ANR	4919376	PrimaryExpression	1		4919321	0					
ANR	4919377	ReturnType	static const struct color *		4919321	1					
ANR	4919378	Identifier	color_of		4919321	2					
ANR	4919379	ParameterList	const char * arg		4919321	3					
ANR	4919380	Parameter	const char * arg	112:9:3862:3876	4919321	0	True				
ANR	4919381	ParameterType	const char *		4919321	0					
ANR	4919382	Identifier	arg		4919321	1					
ANR	4919383	CFGEntryNode	ENTRY		4919321		True				
ANR	4919384	CFGExitNode	EXIT		4919321		True				
ANR	4919385	Symbol	strcmp		4919321						
ANR	4919386	Symbol	* colors		4919321						
ANR	4919387	Symbol	arg		4919321						
ANR	4919388	Symbol	color_count		4919321						
ANR	4919389	Symbol	colors [ icolor ] . name		4919321						
ANR	4919390	Symbol	* icolor		4919321						
ANR	4919391	Symbol	stderr		4919321						
ANR	4919392	Symbol	icolor		4919321						
ANR	4919393	Symbol	colors		4919321						
ANR	4919394	Function	width_of	126:0:4097:4403							
ANR	4919395	FunctionDef	width_of (const char * arg)		4919394	0					
ANR	4919396	CompoundStatement		128:0:4137:4403	4919394	0					
ANR	4919397	IfStatement	"if ( strcmp ( arg , ""filled"" ) == 0 )"		4919394	0					
ANR	4919398	Condition	"strcmp ( arg , ""filled"" ) == 0"	129:7:4146:4171	4919394	0	True				
ANR	4919399	EqualityExpression	"strcmp ( arg , ""filled"" ) == 0"		4919394	0		==			
ANR	4919400	CallExpression	"strcmp ( arg , ""filled"" )"		4919394	0					
ANR	4919401	Callee	strcmp		4919394	0					
ANR	4919402	Identifier	strcmp		4919394	0					
ANR	4919403	ArgumentList	arg		4919394	1					
ANR	4919404	Argument	arg		4919394	0					
ANR	4919405	Identifier	arg		4919394	0					
ANR	4919406	Argument	"""filled"""		4919394	1					
ANR	4919407	PrimaryExpression	"""filled"""		4919394	0					
ANR	4919408	PrimaryExpression	0		4919394	1					
ANR	4919409	ReturnStatement	return 0 ;	130:6:4180:4188	4919394	1	True				
ANR	4919410	PrimaryExpression	0		4919394	0					
ANR	4919411	ElseStatement	else		4919394	0					
ANR	4919412	CompoundStatement		8:6:95:122	4919394	0					
ANR	4919413	IdentifierDeclStatement	char * ep = NULL ;	134:6:4210:4225	4919394	0	True				
ANR	4919414	IdentifierDecl	* ep = NULL		4919394	0					
ANR	4919415	IdentifierDeclType	char *		4919394	0					
ANR	4919416	Identifier	ep		4919394	1					
ANR	4919417	AssignmentExpression	* ep = NULL		4919394	2		=			
ANR	4919418	Identifier	NULL		4919394	0					
ANR	4919419	Identifier	NULL		4919394	1					
ANR	4919420	IdentifierDeclStatement	"double w = strtod ( arg , & ep ) ;"	135:6:4233:4260	4919394	1	True				
ANR	4919421	IdentifierDecl	"w = strtod ( arg , & ep )"		4919394	0					
ANR	4919422	IdentifierDeclType	double		4919394	0					
ANR	4919423	Identifier	w		4919394	1					
ANR	4919424	AssignmentExpression	"w = strtod ( arg , & ep )"		4919394	2		=			
ANR	4919425	Identifier	w		4919394	0					
ANR	4919426	CallExpression	"strtod ( arg , & ep )"		4919394	1					
ANR	4919427	Callee	strtod		4919394	0					
ANR	4919428	Identifier	strtod		4919394	0					
ANR	4919429	ArgumentList	arg		4919394	1					
ANR	4919430	Argument	arg		4919394	0					
ANR	4919431	Identifier	arg		4919394	0					
ANR	4919432	Argument	& ep		4919394	1					
ANR	4919433	UnaryOperationExpression	& ep		4919394	0					
ANR	4919434	UnaryOperator	&		4919394	0					
ANR	4919435	Identifier	ep		4919394	1					
ANR	4919436	IfStatement	if ( ep != NULL && * ep == 0 && w > 0 )		4919394	2					
ANR	4919437	Condition	ep != NULL && * ep == 0 && w > 0	137:10:4273:4303	4919394	0	True				
ANR	4919438	AndExpression	ep != NULL && * ep == 0 && w > 0		4919394	0		&&			
ANR	4919439	EqualityExpression	ep != NULL		4919394	0		!=			
ANR	4919440	Identifier	ep		4919394	0					
ANR	4919441	Identifier	NULL		4919394	1					
ANR	4919442	AndExpression	* ep == 0 && w > 0		4919394	1		&&			
ANR	4919443	EqualityExpression	* ep == 0		4919394	0		==			
ANR	4919444	UnaryOperationExpression	* ep		4919394	0					
ANR	4919445	UnaryOperator	*		4919394	0					
ANR	4919446	Identifier	ep		4919394	1					
ANR	4919447	PrimaryExpression	0		4919394	1					
ANR	4919448	RelationalExpression	w > 0		4919394	1		>			
ANR	4919449	Identifier	w		4919394	0					
ANR	4919450	PrimaryExpression	0		4919394	1					
ANR	4919451	ReturnStatement	return w ;	138:9:4315:4323	4919394	1	True				
ANR	4919452	Identifier	w		4919394	0					
ANR	4919453	ExpressionStatement	"fprintf ( stderr , ""genpng: invalid line width %s\\n"" , arg )"	141:3:4334:4389	4919394	1	True				
ANR	4919454	CallExpression	"fprintf ( stderr , ""genpng: invalid line width %s\\n"" , arg )"		4919394	0					
ANR	4919455	Callee	fprintf		4919394	0					
ANR	4919456	Identifier	fprintf		4919394	0					
ANR	4919457	ArgumentList	stderr		4919394	1					
ANR	4919458	Argument	stderr		4919394	0					
ANR	4919459	Identifier	stderr		4919394	0					
ANR	4919460	Argument	"""genpng: invalid line width %s\\n"""		4919394	1					
ANR	4919461	PrimaryExpression	"""genpng: invalid line width %s\\n"""		4919394	0					
ANR	4919462	Argument	arg		4919394	2					
ANR	4919463	Identifier	arg		4919394	0					
ANR	4919464	ExpressionStatement	exit ( 1 )	142:3:4394:4401	4919394	2	True				
ANR	4919465	CallExpression	exit ( 1 )		4919394	0					
ANR	4919466	Callee	exit		4919394	0					
ANR	4919467	Identifier	exit		4919394	0					
ANR	4919468	ArgumentList	1		4919394	1					
ANR	4919469	Argument	1		4919394	0					
ANR	4919470	PrimaryExpression	1		4919394	0					
ANR	4919471	ReturnType	static double		4919394	1					
ANR	4919472	Identifier	width_of		4919394	2					
ANR	4919473	ParameterList	const char * arg		4919394	3					
ANR	4919474	Parameter	const char * arg	127:9:4120:4134	4919394	0	True				
ANR	4919475	ParameterType	const char *		4919394	0					
ANR	4919476	Identifier	arg		4919394	1					
ANR	4919477	CFGEntryNode	ENTRY		4919394		True				
ANR	4919478	CFGExitNode	EXIT		4919394		True				
ANR	4919479	Symbol	strcmp		4919394						
ANR	4919480	Symbol	* ep		4919394						
ANR	4919481	Symbol	NULL		4919394						
ANR	4919482	Symbol	& ep		4919394						
ANR	4919483	Symbol	arg		4919394						
ANR	4919484	Symbol	w		4919394						
ANR	4919485	Symbol	ep		4919394						
ANR	4919486	Symbol	stderr		4919394						
ANR	4919487	Symbol	strtod		4919394						
ANR	4919488	Function	coordinate_of	145:0:4406:4632							
ANR	4919489	FunctionDef	coordinate_of (const char * arg)		4919488	0					
ANR	4919490	CompoundStatement		147:0:4451:4632	4919488	0					
ANR	4919491	IdentifierDeclStatement	char * ep = NULL ;	148:3:4456:4471	4919488	0	True				
ANR	4919492	IdentifierDecl	* ep = NULL		4919488	0					
ANR	4919493	IdentifierDeclType	char *		4919488	0					
ANR	4919494	Identifier	ep		4919488	1					
ANR	4919495	AssignmentExpression	* ep = NULL		4919488	2		=			
ANR	4919496	Identifier	NULL		4919488	0					
ANR	4919497	Identifier	NULL		4919488	1					
ANR	4919498	IdentifierDeclStatement	"double w = strtod ( arg , & ep ) ;"	149:3:4476:4503	4919488	1	True				
ANR	4919499	IdentifierDecl	"w = strtod ( arg , & ep )"		4919488	0					
ANR	4919500	IdentifierDeclType	double		4919488	0					
ANR	4919501	Identifier	w		4919488	1					
ANR	4919502	AssignmentExpression	"w = strtod ( arg , & ep )"		4919488	2		=			
ANR	4919503	Identifier	w		4919488	0					
ANR	4919504	CallExpression	"strtod ( arg , & ep )"		4919488	1					
ANR	4919505	Callee	strtod		4919488	0					
ANR	4919506	Identifier	strtod		4919488	0					
ANR	4919507	ArgumentList	arg		4919488	1					
ANR	4919508	Argument	arg		4919488	0					
ANR	4919509	Identifier	arg		4919488	0					
ANR	4919510	Argument	& ep		4919488	1					
ANR	4919511	UnaryOperationExpression	& ep		4919488	0					
ANR	4919512	UnaryOperator	&		4919488	0					
ANR	4919513	Identifier	ep		4919488	1					
ANR	4919514	IfStatement	if ( ep != NULL && * ep == 0 )		4919488	2					
ANR	4919515	Condition	ep != NULL && * ep == 0	151:7:4513:4534	4919488	0	True				
ANR	4919516	AndExpression	ep != NULL && * ep == 0		4919488	0		&&			
ANR	4919517	EqualityExpression	ep != NULL		4919488	0		!=			
ANR	4919518	Identifier	ep		4919488	0					
ANR	4919519	Identifier	NULL		4919488	1					
ANR	4919520	EqualityExpression	* ep == 0		4919488	1		==			
ANR	4919521	UnaryOperationExpression	* ep		4919488	0					
ANR	4919522	UnaryOperator	*		4919488	0					
ANR	4919523	Identifier	ep		4919488	1					
ANR	4919524	PrimaryExpression	0		4919488	1					
ANR	4919525	ReturnStatement	return w ;	152:6:4543:4551	4919488	1	True				
ANR	4919526	Identifier	w		4919488	0					
ANR	4919527	ExpressionStatement	"fprintf ( stderr , ""genpng: invalid coordinate value %s\\n"" , arg )"	154:3:4557:4618	4919488	3	True				
ANR	4919528	CallExpression	"fprintf ( stderr , ""genpng: invalid coordinate value %s\\n"" , arg )"		4919488	0					
ANR	4919529	Callee	fprintf		4919488	0					
ANR	4919530	Identifier	fprintf		4919488	0					
ANR	4919531	ArgumentList	stderr		4919488	1					
ANR	4919532	Argument	stderr		4919488	0					
ANR	4919533	Identifier	stderr		4919488	0					
ANR	4919534	Argument	"""genpng: invalid coordinate value %s\\n"""		4919488	1					
ANR	4919535	PrimaryExpression	"""genpng: invalid coordinate value %s\\n"""		4919488	0					
ANR	4919536	Argument	arg		4919488	2					
ANR	4919537	Identifier	arg		4919488	0					
ANR	4919538	ExpressionStatement	exit ( 1 )	155:3:4623:4630	4919488	4	True				
ANR	4919539	CallExpression	exit ( 1 )		4919488	0					
ANR	4919540	Callee	exit		4919488	0					
ANR	4919541	Identifier	exit		4919488	0					
ANR	4919542	ArgumentList	1		4919488	1					
ANR	4919543	Argument	1		4919488	0					
ANR	4919544	PrimaryExpression	1		4919488	0					
ANR	4919545	ReturnType	static double		4919488	1					
ANR	4919546	Identifier	coordinate_of		4919488	2					
ANR	4919547	ParameterList	const char * arg		4919488	3					
ANR	4919548	Parameter	const char * arg	146:14:4434:4448	4919488	0	True				
ANR	4919549	ParameterType	const char *		4919488	0					
ANR	4919550	Identifier	arg		4919488	1					
ANR	4919551	CFGEntryNode	ENTRY		4919488		True				
ANR	4919552	CFGExitNode	EXIT		4919488		True				
ANR	4919553	Symbol	* ep		4919488						
ANR	4919554	Symbol	NULL		4919488						
ANR	4919555	Symbol	& ep		4919488						
ANR	4919556	Symbol	arg		4919488						
ANR	4919557	Symbol	w		4919488						
ANR	4919558	Symbol	ep		4919488						
ANR	4919559	Symbol	stderr		4919488						
ANR	4919560	Symbol	strtod		4919488						
ANR	4919561	DeclStmt									
ANR	4919562	Decl							"int ( * ) ( const struct arg * arg , double x , double y )"	"int ( * ) ( const struct arg * arg , double x , double y )"	shape_fn_ptr
ANR	4919563	ClassDef	arg	174:0:5196:5408							
ANR	4919564	DeclStmt									
ANR	4919565	Decl							const struct color	const struct color *	color
ANR	4919566	DeclStmt									
ANR	4919567	Decl							shape_fn_ptr	shape_fn_ptr	inside_fn
ANR	4919568	DeclStmt									
ANR	4919569	Decl							shape_fn_ptr	shape_fn_ptr	check_fn
ANR	4919570	DeclStmt									
ANR	4919571	Decl							double	double	width
ANR	4919572	DeclStmt									
ANR	4919573	Decl							double	double	x1
ANR	4919574	Decl							double	double	y1
ANR	4919575	Decl							double	double	x2
ANR	4919576	Decl							double	double	y2
ANR	4919577	Function	alpha_calc	294:0:9434:10665							
ANR	4919578	FunctionDef	"alpha_calc (const struct arg * arg , double x , double y)"		4919577	0					
ANR	4919579	CompoundStatement		296:0:9502:10665	4919577	0					
ANR	4919580	SwitchStatement	"switch ( arg -> check_fn ( arg , x , y ) )"		4919577	0					
ANR	4919581	Condition	"arg -> check_fn ( arg , x , y )"	301:11:9719:9742	4919577	0	True				
ANR	4919582	CallExpression	"arg -> check_fn ( arg , x , y )"		4919577	0					
ANR	4919583	Callee	arg -> check_fn		4919577	0					
ANR	4919584	PtrMemberAccess	arg -> check_fn		4919577	0					
ANR	4919585	Identifier	arg		4919577	0					
ANR	4919586	Identifier	check_fn		4919577	1					
ANR	4919587	ArgumentList	arg		4919577	1					
ANR	4919588	Argument	arg		4919577	0					
ANR	4919589	Identifier	arg		4919577	0					
ANR	4919590	Argument	x		4919577	1					
ANR	4919591	Identifier	x		4919577	0					
ANR	4919592	Argument	y		4919577	2					
ANR	4919593	Identifier	y		4919577	0					
ANR	4919594	CompoundStatement		7:3:245:245	4919577	1					
ANR	4919595	Label	case OUTSIDE :	303:6:9756:9768	4919577	0	True				
ANR	4919596	Identifier	OUTSIDE		4919577	0					
ANR	4919597	ReturnStatement	return 0 ;	304:9:9779:9787	4919577	1	True				
ANR	4919598	PrimaryExpression	0		4919577	0					
ANR	4919599	Label	case INSIDE :	306:6:9832:9843	4919577	2	True				
ANR	4919600	Identifier	INSIDE		4919577	0					
ANR	4919601	ReturnStatement	return 1 ;	307:9:9854:9862	4919577	3	True				
ANR	4919602	PrimaryExpression	1		4919577	0					
ANR	4919603	Label	default :	309:6:9906:9913	4919577	4	True				
ANR	4919604	Identifier	default		4919577	0					
ANR	4919605	CompoundStatement		17:9:446:462	4919577	5					
ANR	4919606	IdentifierDeclStatement	int dy ;	311:9:9932:9938	4919577	0	True				
ANR	4919607	IdentifierDecl	dy		4919577	0					
ANR	4919608	IdentifierDeclType	int		4919577	0					
ANR	4919609	Identifier	dy		4919577	1					
ANR	4919610	IdentifierDeclStatement	double alpha = 0 ;	312:9:9949:9965	4919577	1	True				
ANR	4919611	IdentifierDecl	alpha = 0		4919577	0					
ANR	4919612	IdentifierDeclType	double		4919577	0					
ANR	4919613	Identifier	alpha		4919577	1					
ANR	4919614	AssignmentExpression	alpha = 0		4919577	2		=			
ANR	4919615	Identifier	alpha		4919577	0					
ANR	4919616	PrimaryExpression	0		4919577	1					
ANR	4919617	Statement	define	314:9:9977:9982	4919577	2	True				
ANR	4919618	Statement	FILTER_D	314:16:9984:9991	4919577	3	True				
ANR	4919619	Statement	(	314:25:9993:9993	4919577	4	True				
ANR	4919620	Statement	FILTER_WIDTH	314:26:9994:10005	4919577	5	True				
ANR	4919621	Statement	*	314:38:10006:10006	4919577	6	True				
ANR	4919622	Statement	FILTER_STEPS	314:39:10007:10018	4919577	7	True				
ANR	4919623	Statement	-	314:51:10019:10019	4919577	8	True				
ANR	4919624	Statement	1	314:52:10020:10020	4919577	9	True				
ANR	4919625	Statement	)	314:53:10021:10021	4919577	10	True				
ANR	4919626	ForStatement	for ( dy = - FILTER_D ; dy <= FILTER_D ; ++ dy )		4919577	11					
ANR	4919627	ForInit	dy = - FILTER_D ;	315:14:10037:10049	4919577	0	True				
ANR	4919628	AssignmentExpression	dy = - FILTER_D		4919577	0		=			
ANR	4919629	Identifier	dy		4919577	0					
ANR	4919630	UnaryOperationExpression	- FILTER_D		4919577	1					
ANR	4919631	UnaryOperator	-		4919577	0					
ANR	4919632	Identifier	FILTER_D		4919577	1					
ANR	4919633	Condition	dy <= FILTER_D	315:28:10051:10062	4919577	1	True				
ANR	4919634	RelationalExpression	dy <= FILTER_D		4919577	0		<=			
ANR	4919635	Identifier	dy		4919577	0					
ANR	4919636	Identifier	FILTER_D		4919577	1					
ANR	4919637	UnaryExpression	++ dy	315:42:10065:10068	4919577	2	True				
ANR	4919638	IncDec	++		4919577	0					
ANR	4919639	Identifier	dy		4919577	1					
ANR	4919640	CompoundStatement		22:12:591:622	4919577	3					
ANR	4919641	IdentifierDeclStatement	double wy = bicubic [ abs ( dy ) ] [ 0 ] ;	317:12:10094:10125	4919577	0	True				
ANR	4919642	IdentifierDecl	wy = bicubic [ abs ( dy ) ] [ 0 ]		4919577	0					
ANR	4919643	IdentifierDeclType	double		4919577	0					
ANR	4919644	Identifier	wy		4919577	1					
ANR	4919645	AssignmentExpression	wy = bicubic [ abs ( dy ) ] [ 0 ]		4919577	2		=			
ANR	4919646	Identifier	wy		4919577	0					
ANR	4919647	ArrayIndexing	bicubic [ abs ( dy ) ] [ 0 ]		4919577	1					
ANR	4919648	ArrayIndexing	bicubic [ abs ( dy ) ]		4919577	0					
ANR	4919649	Identifier	bicubic		4919577	0					
ANR	4919650	CallExpression	abs ( dy )		4919577	1					
ANR	4919651	Callee	abs		4919577	0					
ANR	4919652	Identifier	abs		4919577	0					
ANR	4919653	ArgumentList	dy		4919577	1					
ANR	4919654	Argument	dy		4919577	0					
ANR	4919655	Identifier	dy		4919577	0					
ANR	4919656	PrimaryExpression	0		4919577	1					
ANR	4919657	IfStatement	if ( wy != 0 )		4919577	1					
ANR	4919658	Condition	wy != 0	319:16:10144:10150	4919577	0	True				
ANR	4919659	EqualityExpression	wy != 0		4919577	0		!=			
ANR	4919660	Identifier	wy		4919577	0					
ANR	4919661	PrimaryExpression	0		4919577	1					
ANR	4919662	CompoundStatement		27:15:713:719	4919577	1					
ANR	4919663	IdentifierDeclStatement	double alphay = 0 ;	321:15:10182:10199	4919577	0	True				
ANR	4919664	IdentifierDecl	alphay = 0		4919577	0					
ANR	4919665	IdentifierDeclType	double		4919577	0					
ANR	4919666	Identifier	alphay		4919577	1					
ANR	4919667	AssignmentExpression	alphay = 0		4919577	2		=			
ANR	4919668	Identifier	alphay		4919577	0					
ANR	4919669	PrimaryExpression	0		4919577	1					
ANR	4919670	IdentifierDeclStatement	int dx ;	322:15:10216:10222	4919577	1	True				
ANR	4919671	IdentifierDecl	dx		4919577	0					
ANR	4919672	IdentifierDeclType	int		4919577	0					
ANR	4919673	Identifier	dx		4919577	1					
ANR	4919674	ForStatement	for ( dx = - FILTER_D ; dx <= FILTER_D ; ++ dx )		4919577	2					
ANR	4919675	ForInit	dx = - FILTER_D ;	324:20:10245:10257	4919577	0	True				
ANR	4919676	AssignmentExpression	dx = - FILTER_D		4919577	0		=			
ANR	4919677	Identifier	dx		4919577	0					
ANR	4919678	UnaryOperationExpression	- FILTER_D		4919577	1					
ANR	4919679	UnaryOperator	-		4919577	0					
ANR	4919680	Identifier	FILTER_D		4919577	1					
ANR	4919681	Condition	dx <= FILTER_D	324:34:10259:10270	4919577	1	True				
ANR	4919682	RelationalExpression	dx <= FILTER_D		4919577	0		<=			
ANR	4919683	Identifier	dx		4919577	0					
ANR	4919684	Identifier	FILTER_D		4919577	1					
ANR	4919685	UnaryExpression	++ dx	324:48:10273:10276	4919577	2	True				
ANR	4919686	IncDec	++		4919577	0					
ANR	4919687	Identifier	dx		4919577	1					
ANR	4919688	CompoundStatement		31:18:811:842	4919577	3					
ANR	4919689	IdentifierDeclStatement	double wx = bicubic [ abs ( dx ) ] [ 0 ] ;	326:18:10314:10345	4919577	0	True				
ANR	4919690	IdentifierDecl	wx = bicubic [ abs ( dx ) ] [ 0 ]		4919577	0					
ANR	4919691	IdentifierDeclType	double		4919577	0					
ANR	4919692	Identifier	wx		4919577	1					
ANR	4919693	AssignmentExpression	wx = bicubic [ abs ( dx ) ] [ 0 ]		4919577	2		=			
ANR	4919694	Identifier	wx		4919577	0					
ANR	4919695	ArrayIndexing	bicubic [ abs ( dx ) ] [ 0 ]		4919577	1					
ANR	4919696	ArrayIndexing	bicubic [ abs ( dx ) ]		4919577	0					
ANR	4919697	Identifier	bicubic		4919577	0					
ANR	4919698	CallExpression	abs ( dx )		4919577	1					
ANR	4919699	Callee	abs		4919577	0					
ANR	4919700	Identifier	abs		4919577	0					
ANR	4919701	ArgumentList	dx		4919577	1					
ANR	4919702	Argument	dx		4919577	0					
ANR	4919703	Identifier	dx		4919577	0					
ANR	4919704	PrimaryExpression	0		4919577	1					
ANR	4919705	IfStatement	"if ( wx != 0 && arg -> inside_fn ( arg , x + dx / 16 , y + dy / 16 ) )"		4919577	1					
ANR	4919706	Condition	"wx != 0 && arg -> inside_fn ( arg , x + dx / 16 , y + dy / 16 )"	328:22:10370:10417	4919577	0	True				
ANR	4919707	AndExpression	"wx != 0 && arg -> inside_fn ( arg , x + dx / 16 , y + dy / 16 )"		4919577	0		&&			
ANR	4919708	EqualityExpression	wx != 0		4919577	0		!=			
ANR	4919709	Identifier	wx		4919577	0					
ANR	4919710	PrimaryExpression	0		4919577	1					
ANR	4919711	CallExpression	"arg -> inside_fn ( arg , x + dx / 16 , y + dy / 16 )"		4919577	1					
ANR	4919712	Callee	arg -> inside_fn		4919577	0					
ANR	4919713	PtrMemberAccess	arg -> inside_fn		4919577	0					
ANR	4919714	Identifier	arg		4919577	0					
ANR	4919715	Identifier	inside_fn		4919577	1					
ANR	4919716	ArgumentList	arg		4919577	1					
ANR	4919717	Argument	arg		4919577	0					
ANR	4919718	Identifier	arg		4919577	0					
ANR	4919719	Argument	x + dx / 16		4919577	1					
ANR	4919720	AdditiveExpression	x + dx / 16		4919577	0		+			
ANR	4919721	Identifier	x		4919577	0					
ANR	4919722	MultiplicativeExpression	dx / 16		4919577	1		/			
ANR	4919723	Identifier	dx		4919577	0					
ANR	4919724	PrimaryExpression	16		4919577	1					
ANR	4919725	Argument	y + dy / 16		4919577	2					
ANR	4919726	AdditiveExpression	y + dy / 16		4919577	0		+			
ANR	4919727	Identifier	y		4919577	0					
ANR	4919728	MultiplicativeExpression	dy / 16		4919577	1		/			
ANR	4919729	Identifier	dy		4919577	0					
ANR	4919730	PrimaryExpression	16		4919577	1					
ANR	4919731	ExpressionStatement	alphay += wx	329:21:10441:10453	4919577	1	True				
ANR	4919732	AssignmentExpression	alphay += wx		4919577	0		+=			
ANR	4919733	Identifier	alphay		4919577	0					
ANR	4919734	Identifier	wx		4919577	1					
ANR	4919735	ExpressionStatement	alpha += wy * alphay	332:15:10488:10508	4919577	3	True				
ANR	4919736	AssignmentExpression	alpha += wy * alphay		4919577	0		+=			
ANR	4919737	Identifier	alpha		4919577	0					
ANR	4919738	MultiplicativeExpression	wy * alphay		4919577	1		*			
ANR	4919739	Identifier	wy		4919577	0					
ANR	4919740	Identifier	alphay		4919577	1					
ANR	4919741	ReturnStatement	return alpha / ( FILTER_WEIGHT * FILTER_WEIGHT ) ;	337:9:10606:10650	4919577	12	True				
ANR	4919742	MultiplicativeExpression	alpha / ( FILTER_WEIGHT * FILTER_WEIGHT )		4919577	0		/			
ANR	4919743	Identifier	alpha		4919577	0					
ANR	4919744	MultiplicativeExpression	FILTER_WEIGHT * FILTER_WEIGHT		4919577	1		*			
ANR	4919745	Identifier	FILTER_WEIGHT		4919577	0					
ANR	4919746	Identifier	FILTER_WEIGHT		4919577	1					
ANR	4919747	ReturnType	static double		4919577	1					
ANR	4919748	Identifier	alpha_calc		4919577	2					
ANR	4919749	ParameterList	"const struct arg * arg , double x , double y"		4919577	3					
ANR	4919750	Parameter	const struct arg * arg	295:11:9459:9479	4919577	0	True				
ANR	4919751	ParameterType	const struct arg *		4919577	0					
ANR	4919752	Identifier	arg		4919577	1					
ANR	4919753	Parameter	double x	295:34:9482:9489	4919577	1	True				
ANR	4919754	ParameterType	double		4919577	0					
ANR	4919755	Identifier	x		4919577	1					
ANR	4919756	Parameter	double y	295:44:9492:9499	4919577	2	True				
ANR	4919757	ParameterType	double		4919577	0					
ANR	4919758	Identifier	y		4919577	1					
ANR	4919759	CFGEntryNode	ENTRY		4919577		True				
ANR	4919760	CFGExitNode	EXIT		4919577		True				
ANR	4919761	Symbol	wx		4919577						
ANR	4919762	Symbol	wy		4919577						
ANR	4919763	Symbol	* abs		4919577						
ANR	4919764	Symbol	* * abs		4919577						
ANR	4919765	Symbol	abs		4919577						
ANR	4919766	Symbol	FILTER_D		4919577						
ANR	4919767	Symbol	* bicubic		4919577						
ANR	4919768	Symbol	dx		4919577						
ANR	4919769	Symbol	dy		4919577						
ANR	4919770	Symbol	arg		4919577						
ANR	4919771	Symbol	alpha		4919577						
ANR	4919772	Symbol	alphay		4919577						
ANR	4919773	Symbol	x		4919577						
ANR	4919774	Symbol	y		4919577						
ANR	4919775	Symbol	arg -> inside_fn		4919577						
ANR	4919776	Symbol	bicubic		4919577						
ANR	4919777	Symbol	* * bicubic		4919577						
ANR	4919778	Symbol	arg -> check_fn		4919577						
ANR	4919779	Symbol	* arg		4919577						
ANR	4919780	Symbol	FILTER_WEIGHT		4919577						
ANR	4919781	Function	square_check	347:0:10807:11390							
ANR	4919782	FunctionDef	"square_check (double x , double y , double x1 , double y1 , double x2 , double y2)"		4919781	0					
ANR	4919783	CompoundStatement		350:0:10947:11390	4919781	0					
ANR	4919784	ReturnStatement	return ( ( x < x1 ) ^ ( x < x2 ) ) & ( ( y < y1 ) ^ ( y < y2 ) ) ;	362:3:11344:11388	4919781	0	True				
ANR	4919785	BitAndExpression	( ( x < x1 ) ^ ( x < x2 ) ) & ( ( y < y1 ) ^ ( y < y2 ) )		4919781	0		&			
ANR	4919786	ExclusiveOrExpression	( x < x1 ) ^ ( x < x2 )		4919781	0		^			
ANR	4919787	RelationalExpression	x < x1		4919781	0		<			
ANR	4919788	Identifier	x		4919781	0					
ANR	4919789	Identifier	x1		4919781	1					
ANR	4919790	RelationalExpression	x < x2		4919781	1		<			
ANR	4919791	Identifier	x		4919781	0					
ANR	4919792	Identifier	x2		4919781	1					
ANR	4919793	ExclusiveOrExpression	( y < y1 ) ^ ( y < y2 )		4919781	1		^			
ANR	4919794	RelationalExpression	y < y1		4919781	0		<			
ANR	4919795	Identifier	y		4919781	0					
ANR	4919796	Identifier	y1		4919781	1					
ANR	4919797	RelationalExpression	y < y2		4919781	1		<			
ANR	4919798	Identifier	y		4919781	0					
ANR	4919799	Identifier	y2		4919781	1					
ANR	4919800	ReturnType	static int		4919781	1					
ANR	4919801	Identifier	square_check		4919781	2					
ANR	4919802	ParameterList	"double x , double y , double x1 , double y1 , double x2 , double y2"		4919781	3					
ANR	4919803	Parameter	double x	348:13:10831:10838	4919781	0	True				
ANR	4919804	ParameterType	double		4919781	0					
ANR	4919805	Identifier	x		4919781	1					
ANR	4919806	Parameter	double y	348:23:10841:10848	4919781	1	True				
ANR	4919807	ParameterType	double		4919781	0					
ANR	4919808	Identifier	y		4919781	1					
ANR	4919809	Parameter	double x1	348:33:10851:10859	4919781	2	True				
ANR	4919810	ParameterType	double		4919781	0					
ANR	4919811	Identifier	x1		4919781	1					
ANR	4919812	Parameter	double y1	348:44:10862:10870	4919781	3	True				
ANR	4919813	ParameterType	double		4919781	0					
ANR	4919814	Identifier	y1		4919781	1					
ANR	4919815	Parameter	double x2	348:55:10873:10881	4919781	4	True				
ANR	4919816	ParameterType	double		4919781	0					
ANR	4919817	Identifier	x2		4919781	1					
ANR	4919818	Parameter	double y2	348:66:10884:10892	4919781	5	True				
ANR	4919819	ParameterType	double		4919781	0					
ANR	4919820	Identifier	y2		4919781	1					
ANR	4919821	CFGEntryNode	ENTRY		4919781		True				
ANR	4919822	CFGExitNode	EXIT		4919781		True				
ANR	4919823	Symbol	x		4919781						
ANR	4919824	Symbol	y1		4919781						
ANR	4919825	Symbol	y		4919781						
ANR	4919826	Symbol	x1		4919781						
ANR	4919827	Symbol	y2		4919781						
ANR	4919828	Symbol	x2		4919781						
ANR	4919829	Function	inside_square_filled	365:0:11393:11536							
ANR	4919830	FunctionDef	"inside_square_filled (const struct arg * arg , double x , double y)"		4919829	0					
ANR	4919831	CompoundStatement		367:0:11468:11536	4919829	0					
ANR	4919832	ReturnStatement	"return square_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 ) ;"	368:3:11473:11534	4919829	0	True				
ANR	4919833	CallExpression	"square_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 )"		4919829	0					
ANR	4919834	Callee	square_check		4919829	0					
ANR	4919835	Identifier	square_check		4919829	0					
ANR	4919836	ArgumentList	x		4919829	1					
ANR	4919837	Argument	x		4919829	0					
ANR	4919838	Identifier	x		4919829	0					
ANR	4919839	Argument	y		4919829	1					
ANR	4919840	Identifier	y		4919829	0					
ANR	4919841	Argument	arg -> x1		4919829	2					
ANR	4919842	PtrMemberAccess	arg -> x1		4919829	0					
ANR	4919843	Identifier	arg		4919829	0					
ANR	4919844	Identifier	x1		4919829	1					
ANR	4919845	Argument	arg -> y1		4919829	3					
ANR	4919846	PtrMemberAccess	arg -> y1		4919829	0					
ANR	4919847	Identifier	arg		4919829	0					
ANR	4919848	Identifier	y1		4919829	1					
ANR	4919849	Argument	arg -> x2		4919829	4					
ANR	4919850	PtrMemberAccess	arg -> x2		4919829	0					
ANR	4919851	Identifier	arg		4919829	0					
ANR	4919852	Identifier	x2		4919829	1					
ANR	4919853	Argument	arg -> y2		4919829	5					
ANR	4919854	PtrMemberAccess	arg -> y2		4919829	0					
ANR	4919855	Identifier	arg		4919829	0					
ANR	4919856	Identifier	y2		4919829	1					
ANR	4919857	ReturnType	static int		4919829	1					
ANR	4919858	Identifier	inside_square_filled		4919829	2					
ANR	4919859	ParameterList	"const struct arg * arg , double x , double y"		4919829	3					
ANR	4919860	Parameter	const struct arg * arg	366:21:11425:11445	4919829	0	True				
ANR	4919861	ParameterType	const struct arg *		4919829	0					
ANR	4919862	Identifier	arg		4919829	1					
ANR	4919863	Parameter	double x	366:44:11448:11455	4919829	1	True				
ANR	4919864	ParameterType	double		4919829	0					
ANR	4919865	Identifier	x		4919829	1					
ANR	4919866	Parameter	double y	366:54:11458:11465	4919829	2	True				
ANR	4919867	ParameterType	double		4919829	0					
ANR	4919868	Identifier	y		4919829	1					
ANR	4919869	CFGEntryNode	ENTRY		4919829		True				
ANR	4919870	CFGExitNode	EXIT		4919829		True				
ANR	4919871	Symbol	arg		4919829						
ANR	4919872	Symbol	x		4919829						
ANR	4919873	Symbol	arg -> x2		4919829						
ANR	4919874	Symbol	y		4919829						
ANR	4919875	Symbol	arg -> y2		4919829						
ANR	4919876	Symbol	arg -> x1		4919829						
ANR	4919877	Symbol	arg -> y1		4919829						
ANR	4919878	Symbol	square_check		4919829						
ANR	4919879	Symbol	* arg		4919829						
ANR	4919880	Function	square_check_line	371:0:11539:12693							
ANR	4919881	FunctionDef	"square_check_line (const struct arg * arg , double x , double y , double w)"		4919880	0					
ANR	4919882	CompoundStatement		385:0:12075:12693	4919880	0					
ANR	4919883	IdentifierDeclStatement	double cx = ( arg -> x1 + arg -> x2 ) / 2 ;	386:3:12080:12111	4919880	0	True				
ANR	4919884	IdentifierDecl	cx = ( arg -> x1 + arg -> x2 ) / 2		4919880	0					
ANR	4919885	IdentifierDeclType	double		4919880	0					
ANR	4919886	Identifier	cx		4919880	1					
ANR	4919887	AssignmentExpression	cx = ( arg -> x1 + arg -> x2 ) / 2		4919880	2		=			
ANR	4919888	Identifier	cx		4919880	0					
ANR	4919889	MultiplicativeExpression	( arg -> x1 + arg -> x2 ) / 2		4919880	1		/			
ANR	4919890	AdditiveExpression	arg -> x1 + arg -> x2		4919880	0		+			
ANR	4919891	PtrMemberAccess	arg -> x1		4919880	0					
ANR	4919892	Identifier	arg		4919880	0					
ANR	4919893	Identifier	x1		4919880	1					
ANR	4919894	PtrMemberAccess	arg -> x2		4919880	1					
ANR	4919895	Identifier	arg		4919880	0					
ANR	4919896	Identifier	x2		4919880	1					
ANR	4919897	PrimaryExpression	2		4919880	1					
ANR	4919898	IdentifierDeclStatement	double wx = fabs ( arg -> x1 - arg -> x2 ) / 2 ;	387:3:12116:12151	4919880	1	True				
ANR	4919899	IdentifierDecl	wx = fabs ( arg -> x1 - arg -> x2 ) / 2		4919880	0					
ANR	4919900	IdentifierDeclType	double		4919880	0					
ANR	4919901	Identifier	wx		4919880	1					
ANR	4919902	AssignmentExpression	wx = fabs ( arg -> x1 - arg -> x2 ) / 2		4919880	2		=			
ANR	4919903	Identifier	wx		4919880	0					
ANR	4919904	MultiplicativeExpression	fabs ( arg -> x1 - arg -> x2 ) / 2		4919880	1		/			
ANR	4919905	CallExpression	fabs ( arg -> x1 - arg -> x2 )		4919880	0					
ANR	4919906	Callee	fabs		4919880	0					
ANR	4919907	Identifier	fabs		4919880	0					
ANR	4919908	ArgumentList	arg -> x1 - arg -> x2		4919880	1					
ANR	4919909	Argument	arg -> x1 - arg -> x2		4919880	0					
ANR	4919910	AdditiveExpression	arg -> x1 - arg -> x2		4919880	0		-			
ANR	4919911	PtrMemberAccess	arg -> x1		4919880	0					
ANR	4919912	Identifier	arg		4919880	0					
ANR	4919913	Identifier	x1		4919880	1					
ANR	4919914	PtrMemberAccess	arg -> x2		4919880	1					
ANR	4919915	Identifier	arg		4919880	0					
ANR	4919916	Identifier	x2		4919880	1					
ANR	4919917	PrimaryExpression	2		4919880	1					
ANR	4919918	IdentifierDeclStatement	double cy = ( arg -> y1 + arg -> y2 ) / 2 ;	388:3:12156:12187	4919880	2	True				
ANR	4919919	IdentifierDecl	cy = ( arg -> y1 + arg -> y2 ) / 2		4919880	0					
ANR	4919920	IdentifierDeclType	double		4919880	0					
ANR	4919921	Identifier	cy		4919880	1					
ANR	4919922	AssignmentExpression	cy = ( arg -> y1 + arg -> y2 ) / 2		4919880	2		=			
ANR	4919923	Identifier	cy		4919880	0					
ANR	4919924	MultiplicativeExpression	( arg -> y1 + arg -> y2 ) / 2		4919880	1		/			
ANR	4919925	AdditiveExpression	arg -> y1 + arg -> y2		4919880	0		+			
ANR	4919926	PtrMemberAccess	arg -> y1		4919880	0					
ANR	4919927	Identifier	arg		4919880	0					
ANR	4919928	Identifier	y1		4919880	1					
ANR	4919929	PtrMemberAccess	arg -> y2		4919880	1					
ANR	4919930	Identifier	arg		4919880	0					
ANR	4919931	Identifier	y2		4919880	1					
ANR	4919932	PrimaryExpression	2		4919880	1					
ANR	4919933	IdentifierDeclStatement	double wy = fabs ( arg -> y1 - arg -> y2 ) / 2 ;	389:3:12192:12227	4919880	3	True				
ANR	4919934	IdentifierDecl	wy = fabs ( arg -> y1 - arg -> y2 ) / 2		4919880	0					
ANR	4919935	IdentifierDeclType	double		4919880	0					
ANR	4919936	Identifier	wy		4919880	1					
ANR	4919937	AssignmentExpression	wy = fabs ( arg -> y1 - arg -> y2 ) / 2		4919880	2		=			
ANR	4919938	Identifier	wy		4919880	0					
ANR	4919939	MultiplicativeExpression	fabs ( arg -> y1 - arg -> y2 ) / 2		4919880	1		/			
ANR	4919940	CallExpression	fabs ( arg -> y1 - arg -> y2 )		4919880	0					
ANR	4919941	Callee	fabs		4919880	0					
ANR	4919942	Identifier	fabs		4919880	0					
ANR	4919943	ArgumentList	arg -> y1 - arg -> y2		4919880	1					
ANR	4919944	Argument	arg -> y1 - arg -> y2		4919880	0					
ANR	4919945	AdditiveExpression	arg -> y1 - arg -> y2		4919880	0		-			
ANR	4919946	PtrMemberAccess	arg -> y1		4919880	0					
ANR	4919947	Identifier	arg		4919880	0					
ANR	4919948	Identifier	y1		4919880	1					
ANR	4919949	PtrMemberAccess	arg -> y2		4919880	1					
ANR	4919950	Identifier	arg		4919880	0					
ANR	4919951	Identifier	y2		4919880	1					
ANR	4919952	PrimaryExpression	2		4919880	1					
ANR	4919953	IfStatement	"if ( square_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w ) )"		4919880	4					
ANR	4919954	Condition	"square_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w )"	391:7:12237:12290	4919880	0	True				
ANR	4919955	CallExpression	"square_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w )"		4919880	0					
ANR	4919956	Callee	square_check		4919880	0					
ANR	4919957	Identifier	square_check		4919880	0					
ANR	4919958	ArgumentList	x		4919880	1					
ANR	4919959	Argument	x		4919880	0					
ANR	4919960	Identifier	x		4919880	0					
ANR	4919961	Argument	y		4919880	1					
ANR	4919962	Identifier	y		4919880	0					
ANR	4919963	Argument	cx - wx - w		4919880	2					
ANR	4919964	AdditiveExpression	cx - wx - w		4919880	0		-			
ANR	4919965	Identifier	cx		4919880	0					
ANR	4919966	AdditiveExpression	wx - w		4919880	1		-			
ANR	4919967	Identifier	wx		4919880	0					
ANR	4919968	Identifier	w		4919880	1					
ANR	4919969	Argument	cy - wy - w		4919880	3					
ANR	4919970	AdditiveExpression	cy - wy - w		4919880	0		-			
ANR	4919971	Identifier	cy		4919880	0					
ANR	4919972	AdditiveExpression	wy - w		4919880	1		-			
ANR	4919973	Identifier	wy		4919880	0					
ANR	4919974	Identifier	w		4919880	1					
ANR	4919975	Argument	cx + wx + w		4919880	4					
ANR	4919976	AdditiveExpression	cx + wx + w		4919880	0		+			
ANR	4919977	Identifier	cx		4919880	0					
ANR	4919978	AdditiveExpression	wx + w		4919880	1		+			
ANR	4919979	Identifier	wx		4919880	0					
ANR	4919980	Identifier	w		4919880	1					
ANR	4919981	Argument	cy + wy + w		4919880	5					
ANR	4919982	AdditiveExpression	cy + wy + w		4919880	0		+			
ANR	4919983	Identifier	cy		4919880	0					
ANR	4919984	AdditiveExpression	wy + w		4919880	1		+			
ANR	4919985	Identifier	wy		4919880	0					
ANR	4919986	Identifier	w		4919880	1					
ANR	4919987	CompoundStatement		8:3:220:220	4919880	1					
ANR	4919988	ExpressionStatement	wx -= w	396:6:12413:12420	4919880	0	True				
ANR	4919989	AssignmentExpression	wx -= w		4919880	0		-=			
ANR	4919990	Identifier	wx		4919880	0					
ANR	4919991	Identifier	w		4919880	1					
ANR	4919992	ExpressionStatement	wy -= w	397:6:12428:12435	4919880	1	True				
ANR	4919993	AssignmentExpression	wy -= w		4919880	0		-=			
ANR	4919994	Identifier	wy		4919880	0					
ANR	4919995	Identifier	w		4919880	1					
ANR	4919996	IfStatement	"if ( wx > 0 && wy > 0 && square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy ) )"		4919880	2					
ANR	4919997	Condition	"wx > 0 && wy > 0 && square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"	398:10:12447:12512	4919880	0	True				
ANR	4919998	AndExpression	"wx > 0 && wy > 0 && square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		4919880	0		&&			
ANR	4919999	RelationalExpression	wx > 0		4919880	0		>			
ANR	4920000	Identifier	wx		4919880	0					
ANR	4920001	PrimaryExpression	0		4919880	1					
ANR	4920002	AndExpression	"wy > 0 && square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		4919880	1		&&			
ANR	4920003	RelationalExpression	wy > 0		4919880	0		>			
ANR	4920004	Identifier	wy		4919880	0					
ANR	4920005	PrimaryExpression	0		4919880	1					
ANR	4920006	CallExpression	"square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		4919880	1					
ANR	4920007	Callee	square_check		4919880	0					
ANR	4920008	Identifier	square_check		4919880	0					
ANR	4920009	ArgumentList	x		4919880	1					
ANR	4920010	Argument	x		4919880	0					
ANR	4920011	Identifier	x		4919880	0					
ANR	4920012	Argument	y		4919880	1					
ANR	4920013	Identifier	y		4919880	0					
ANR	4920014	Argument	cx - wx		4919880	2					
ANR	4920015	AdditiveExpression	cx - wx		4919880	0		-			
ANR	4920016	Identifier	cx		4919880	0					
ANR	4920017	Identifier	wx		4919880	1					
ANR	4920018	Argument	cy - wy		4919880	3					
ANR	4920019	AdditiveExpression	cy - wy		4919880	0		-			
ANR	4920020	Identifier	cy		4919880	0					
ANR	4920021	Identifier	wy		4919880	1					
ANR	4920022	Argument	cx + wx		4919880	4					
ANR	4920023	AdditiveExpression	cx + wx		4919880	0		+			
ANR	4920024	Identifier	cx		4919880	0					
ANR	4920025	Identifier	wx		4919880	1					
ANR	4920026	Argument	cy + wy		4919880	5					
ANR	4920027	AdditiveExpression	cy + wy		4919880	0		+			
ANR	4920028	Identifier	cy		4919880	0					
ANR	4920029	Identifier	wy		4919880	1					
ANR	4920030	ReturnStatement	return INSIDE ;	399:9:12524:12537	4919880	1	True				
ANR	4920031	Identifier	INSIDE		4919880	0					
ANR	4920032	ReturnStatement	return 0 ;	401:6:12589:12597	4919880	3	True				
ANR	4920033	PrimaryExpression	0		4919880	0					
ANR	4920034	ReturnStatement	return OUTSIDE ;	404:3:12643:12657	4919880	5	True				
ANR	4920035	Identifier	OUTSIDE		4919880	0					
ANR	4920036	ReturnType	static int		4919880	1					
ANR	4920037	Identifier	square_check_line		4919880	2					
ANR	4920038	ParameterList	"const struct arg * arg , double x , double y , double w"		4919880	3					
ANR	4920039	Parameter	const struct arg * arg	372:18:11568:11588	4919880	0	True				
ANR	4920040	ParameterType	const struct arg *		4919880	0					
ANR	4920041	Identifier	arg		4919880	1					
ANR	4920042	Parameter	double x	372:41:11591:11598	4919880	1	True				
ANR	4920043	ParameterType	double		4919880	0					
ANR	4920044	Identifier	x		4919880	1					
ANR	4920045	Parameter	double y	372:51:11601:11608	4919880	2	True				
ANR	4920046	ParameterType	double		4919880	0					
ANR	4920047	Identifier	y		4919880	1					
ANR	4920048	Parameter	double w	372:61:11611:11618	4919880	3	True				
ANR	4920049	ParameterType	double		4919880	0					
ANR	4920050	Identifier	w		4919880	1					
ANR	4920051	CFGEntryNode	ENTRY		4919880		True				
ANR	4920052	CFGExitNode	EXIT		4919880		True				
ANR	4920053	Symbol	wx		4919880						
ANR	4920054	Symbol	wy		4919880						
ANR	4920055	Symbol	fabs		4919880						
ANR	4920056	Symbol	cx		4919880						
ANR	4920057	Symbol	cy		4919880						
ANR	4920058	Symbol	arg		4919880						
ANR	4920059	Symbol	w		4919880						
ANR	4920060	Symbol	x		4919880						
ANR	4920061	Symbol	arg -> x2		4919880						
ANR	4920062	Symbol	y		4919880						
ANR	4920063	Symbol	arg -> x1		4919880						
ANR	4920064	Symbol	arg -> y2		4919880						
ANR	4920065	Symbol	arg -> y1		4919880						
ANR	4920066	Symbol	OUTSIDE		4919880						
ANR	4920067	Symbol	square_check		4919880						
ANR	4920068	Symbol	* arg		4919880						
ANR	4920069	Symbol	INSIDE		4919880						
ANR	4920070	Function	check_square_filled	407:0:12696:13126							
ANR	4920071	FunctionDef	"check_square_filled (const struct arg * arg , double x , double y)"		4920070	0					
ANR	4920072	CompoundStatement		409:0:12770:13126	4920070	0					
ANR	4920073	ReturnStatement	"return square_check_line ( arg , x , y , FILTER_WIDTH ) ;"	415:3:13075:13124	4920070	0	True				
ANR	4920074	CallExpression	"square_check_line ( arg , x , y , FILTER_WIDTH )"		4920070	0					
ANR	4920075	Callee	square_check_line		4920070	0					
ANR	4920076	Identifier	square_check_line		4920070	0					
ANR	4920077	ArgumentList	arg		4920070	1					
ANR	4920078	Argument	arg		4920070	0					
ANR	4920079	Identifier	arg		4920070	0					
ANR	4920080	Argument	x		4920070	1					
ANR	4920081	Identifier	x		4920070	0					
ANR	4920082	Argument	y		4920070	2					
ANR	4920083	Identifier	y		4920070	0					
ANR	4920084	Argument	FILTER_WIDTH		4920070	3					
ANR	4920085	Identifier	FILTER_WIDTH		4920070	0					
ANR	4920086	ReturnType	static int		4920070	1					
ANR	4920087	Identifier	check_square_filled		4920070	2					
ANR	4920088	ParameterList	"const struct arg * arg , double x , double y"		4920070	3					
ANR	4920089	Parameter	const struct arg * arg	408:20:12727:12747	4920070	0	True				
ANR	4920090	ParameterType	const struct arg *		4920070	0					
ANR	4920091	Identifier	arg		4920070	1					
ANR	4920092	Parameter	double x	408:43:12750:12757	4920070	1	True				
ANR	4920093	ParameterType	double		4920070	0					
ANR	4920094	Identifier	x		4920070	1					
ANR	4920095	Parameter	double y	408:53:12760:12767	4920070	2	True				
ANR	4920096	ParameterType	double		4920070	0					
ANR	4920097	Identifier	y		4920070	1					
ANR	4920098	CFGEntryNode	ENTRY		4920070		True				
ANR	4920099	CFGExitNode	EXIT		4920070		True				
ANR	4920100	Symbol	arg		4920070						
ANR	4920101	Symbol	x		4920070						
ANR	4920102	Symbol	y		4920070						
ANR	4920103	Symbol	square_check_line		4920070						
ANR	4920104	Symbol	FILTER_WIDTH		4920070						
ANR	4920105	Function	inside_square	418:0:13129:13375							
ANR	4920106	FunctionDef	"inside_square (const struct arg * arg , double x , double y)"		4920105	0					
ANR	4920107	CompoundStatement		420:0:13197:13375	4920105	0					
ANR	4920108	ReturnStatement	"return square_check_line ( arg , x , y , arg -> width / 2 ) == 0 ;"	424:3:13319:13373	4920105	0	True				
ANR	4920109	EqualityExpression	"square_check_line ( arg , x , y , arg -> width / 2 ) == 0"		4920105	0		==			
ANR	4920110	CallExpression	"square_check_line ( arg , x , y , arg -> width / 2 )"		4920105	0					
ANR	4920111	Callee	square_check_line		4920105	0					
ANR	4920112	Identifier	square_check_line		4920105	0					
ANR	4920113	ArgumentList	arg		4920105	1					
ANR	4920114	Argument	arg		4920105	0					
ANR	4920115	Identifier	arg		4920105	0					
ANR	4920116	Argument	x		4920105	1					
ANR	4920117	Identifier	x		4920105	0					
ANR	4920118	Argument	y		4920105	2					
ANR	4920119	Identifier	y		4920105	0					
ANR	4920120	Argument	arg -> width / 2		4920105	3					
ANR	4920121	MultiplicativeExpression	arg -> width / 2		4920105	0		/			
ANR	4920122	PtrMemberAccess	arg -> width		4920105	0					
ANR	4920123	Identifier	arg		4920105	0					
ANR	4920124	Identifier	width		4920105	1					
ANR	4920125	PrimaryExpression	2		4920105	1					
ANR	4920126	PrimaryExpression	0		4920105	1					
ANR	4920127	ReturnType	static int		4920105	1					
ANR	4920128	Identifier	inside_square		4920105	2					
ANR	4920129	ParameterList	"const struct arg * arg , double x , double y"		4920105	3					
ANR	4920130	Parameter	const struct arg * arg	419:14:13154:13174	4920105	0	True				
ANR	4920131	ParameterType	const struct arg *		4920105	0					
ANR	4920132	Identifier	arg		4920105	1					
ANR	4920133	Parameter	double x	419:37:13177:13184	4920105	1	True				
ANR	4920134	ParameterType	double		4920105	0					
ANR	4920135	Identifier	x		4920105	1					
ANR	4920136	Parameter	double y	419:47:13187:13194	4920105	2	True				
ANR	4920137	ParameterType	double		4920105	0					
ANR	4920138	Identifier	y		4920105	1					
ANR	4920139	CFGEntryNode	ENTRY		4920105		True				
ANR	4920140	CFGExitNode	EXIT		4920105		True				
ANR	4920141	Symbol	arg -> width		4920105						
ANR	4920142	Symbol	arg		4920105						
ANR	4920143	Symbol	x		4920105						
ANR	4920144	Symbol	y		4920105						
ANR	4920145	Symbol	square_check_line		4920105						
ANR	4920146	Symbol	* arg		4920105						
ANR	4920147	Function	check_square	427:0:13378:14029							
ANR	4920148	FunctionDef	"check_square (const struct arg * arg , double x , double y)"		4920147	0					
ANR	4920149	CompoundStatement		429:0:13445:14029	4920147	0					
ANR	4920150	IdentifierDeclStatement	double w = arg -> width / 2 ;	432:3:13536:13559	4920147	0	True				
ANR	4920151	IdentifierDecl	w = arg -> width / 2		4920147	0					
ANR	4920152	IdentifierDeclType	double		4920147	0					
ANR	4920153	Identifier	w		4920147	1					
ANR	4920154	AssignmentExpression	w = arg -> width / 2		4920147	2		=			
ANR	4920155	Identifier	w		4920147	0					
ANR	4920156	MultiplicativeExpression	arg -> width / 2		4920147	1		/			
ANR	4920157	PtrMemberAccess	arg -> width		4920147	0					
ANR	4920158	Identifier	arg		4920147	0					
ANR	4920159	Identifier	width		4920147	1					
ANR	4920160	PrimaryExpression	2		4920147	1					
ANR	4920161	IfStatement	"if ( square_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0 )"		4920147	1					
ANR	4920162	Condition	"square_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0"	434:7:13569:13617	4920147	0	True				
ANR	4920163	EqualityExpression	"square_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0"		4920147	0		==			
ANR	4920164	CallExpression	"square_check_line ( arg , x , y , w + FILTER_WIDTH )"		4920147	0					
ANR	4920165	Callee	square_check_line		4920147	0					
ANR	4920166	Identifier	square_check_line		4920147	0					
ANR	4920167	ArgumentList	arg		4920147	1					
ANR	4920168	Argument	arg		4920147	0					
ANR	4920169	Identifier	arg		4920147	0					
ANR	4920170	Argument	x		4920147	1					
ANR	4920171	Identifier	x		4920147	0					
ANR	4920172	Argument	y		4920147	2					
ANR	4920173	Identifier	y		4920147	0					
ANR	4920174	Argument	w + FILTER_WIDTH		4920147	3					
ANR	4920175	AdditiveExpression	w + FILTER_WIDTH		4920147	0		+			
ANR	4920176	Identifier	w		4920147	0					
ANR	4920177	Identifier	FILTER_WIDTH		4920147	1					
ANR	4920178	PrimaryExpression	0		4920147	1					
ANR	4920179	CompoundStatement		7:3:177:177	4920147	1					
ANR	4920180	ExpressionStatement	w -= FILTER_WIDTH	439:6:13758:13775	4920147	0	True				
ANR	4920181	AssignmentExpression	w -= FILTER_WIDTH		4920147	0		-=			
ANR	4920182	Identifier	w		4920147	0					
ANR	4920183	Identifier	FILTER_WIDTH		4920147	1					
ANR	4920184	IfStatement	"if ( w > 0 && square_check_line ( arg , x , y , w ) == 0 )"		4920147	1					
ANR	4920185	Condition	"w > 0 && square_check_line ( arg , x , y , w ) == 0"	441:10:13788:13832	4920147	0	True				
ANR	4920186	AndExpression	"w > 0 && square_check_line ( arg , x , y , w ) == 0"		4920147	0		&&			
ANR	4920187	RelationalExpression	w > 0		4920147	0		>			
ANR	4920188	Identifier	w		4920147	0					
ANR	4920189	PrimaryExpression	0		4920147	1					
ANR	4920190	EqualityExpression	"square_check_line ( arg , x , y , w ) == 0"		4920147	1		==			
ANR	4920191	CallExpression	"square_check_line ( arg , x , y , w )"		4920147	0					
ANR	4920192	Callee	square_check_line		4920147	0					
ANR	4920193	Identifier	square_check_line		4920147	0					
ANR	4920194	ArgumentList	arg		4920147	1					
ANR	4920195	Argument	arg		4920147	0					
ANR	4920196	Identifier	arg		4920147	0					
ANR	4920197	Argument	x		4920147	1					
ANR	4920198	Identifier	x		4920147	0					
ANR	4920199	Argument	y		4920147	2					
ANR	4920200	Identifier	y		4920147	0					
ANR	4920201	Argument	w		4920147	3					
ANR	4920202	Identifier	w		4920147	0					
ANR	4920203	PrimaryExpression	0		4920147	1					
ANR	4920204	ReturnStatement	return INSIDE ;	442:9:13844:13857	4920147	1	True				
ANR	4920205	Identifier	INSIDE		4920147	0					
ANR	4920206	ReturnStatement	return 0 ;	445:6:13919:13927	4920147	2	True				
ANR	4920207	PrimaryExpression	0		4920147	0					
ANR	4920208	ElseStatement	else		4920147	0					
ANR	4920209	ReturnStatement	return OUTSIDE ;	449:6:14013:14027	4920147	0	True				
ANR	4920210	Identifier	OUTSIDE		4920147	0					
ANR	4920211	ReturnType	static int		4920147	1					
ANR	4920212	Identifier	check_square		4920147	2					
ANR	4920213	ParameterList	"const struct arg * arg , double x , double y"		4920147	3					
ANR	4920214	Parameter	const struct arg * arg	428:13:13402:13422	4920147	0	True				
ANR	4920215	ParameterType	const struct arg *		4920147	0					
ANR	4920216	Identifier	arg		4920147	1					
ANR	4920217	Parameter	double x	428:36:13425:13432	4920147	1	True				
ANR	4920218	ParameterType	double		4920147	0					
ANR	4920219	Identifier	x		4920147	1					
ANR	4920220	Parameter	double y	428:46:13435:13442	4920147	2	True				
ANR	4920221	ParameterType	double		4920147	0					
ANR	4920222	Identifier	y		4920147	1					
ANR	4920223	CFGEntryNode	ENTRY		4920147		True				
ANR	4920224	CFGExitNode	EXIT		4920147		True				
ANR	4920225	Symbol	arg -> width		4920147						
ANR	4920226	Symbol	arg		4920147						
ANR	4920227	Symbol	w		4920147						
ANR	4920228	Symbol	x		4920147						
ANR	4920229	Symbol	y		4920147						
ANR	4920230	Symbol	square_check_line		4920147						
ANR	4920231	Symbol	FILTER_WIDTH		4920147						
ANR	4920232	Symbol	OUTSIDE		4920147						
ANR	4920233	Symbol	* arg		4920147						
ANR	4920234	Symbol	INSIDE		4920147						
ANR	4920235	Function	circle_check	459:0:14272:14828							
ANR	4920236	FunctionDef	"circle_check (double x , double y , double x1 , double y1 , double x2 , double y2)"		4920235	0					
ANR	4920237	CompoundStatement		461:0:14360:14828	4920235	0					
ANR	4920238	IfStatement	"if ( square_check ( x , y , x1 , y1 , x2 , y2 ) )"		4920235	0					
ANR	4920239	Condition	"square_check ( x , y , x1 , y1 , x2 , y2 )"	462:7:14369:14402	4920235	0	True				
ANR	4920240	CallExpression	"square_check ( x , y , x1 , y1 , x2 , y2 )"		4920235	0					
ANR	4920241	Callee	square_check		4920235	0					
ANR	4920242	Identifier	square_check		4920235	0					
ANR	4920243	ArgumentList	x		4920235	1					
ANR	4920244	Argument	x		4920235	0					
ANR	4920245	Identifier	x		4920235	0					
ANR	4920246	Argument	y		4920235	1					
ANR	4920247	Identifier	y		4920235	0					
ANR	4920248	Argument	x1		4920235	2					
ANR	4920249	Identifier	x1		4920235	0					
ANR	4920250	Argument	y1		4920235	3					
ANR	4920251	Identifier	y1		4920235	0					
ANR	4920252	Argument	x2		4920235	4					
ANR	4920253	Identifier	x2		4920235	0					
ANR	4920254	Argument	y2		4920235	5					
ANR	4920255	Identifier	y2		4920235	0					
ANR	4920256	CompoundStatement		8:6:225:250	4920235	1					
ANR	4920257	IdentifierDeclStatement	const double cx = ( x1 + x2 ) / 2 ;	465:6:14479:14508	4920235	0	True				
ANR	4920258	IdentifierDecl	cx = ( x1 + x2 ) / 2		4920235	0					
ANR	4920259	IdentifierDeclType	const double		4920235	0					
ANR	4920260	Identifier	cx		4920235	1					
ANR	4920261	AssignmentExpression	cx = ( x1 + x2 ) / 2		4920235	2		=			
ANR	4920262	Identifier	cx		4920235	0					
ANR	4920263	MultiplicativeExpression	( x1 + x2 ) / 2		4920235	1		/			
ANR	4920264	AdditiveExpression	x1 + x2		4920235	0		+			
ANR	4920265	Identifier	x1		4920235	0					
ANR	4920266	Identifier	x2		4920235	1					
ANR	4920267	PrimaryExpression	2		4920235	1					
ANR	4920268	IdentifierDeclStatement	const double cy = ( y1 + y2 ) / 2 ;	466:6:14516:14545	4920235	1	True				
ANR	4920269	IdentifierDecl	cy = ( y1 + y2 ) / 2		4920235	0					
ANR	4920270	IdentifierDeclType	const double		4920235	0					
ANR	4920271	Identifier	cy		4920235	1					
ANR	4920272	AssignmentExpression	cy = ( y1 + y2 ) / 2		4920235	2		=			
ANR	4920273	Identifier	cy		4920235	0					
ANR	4920274	MultiplicativeExpression	( y1 + y2 ) / 2		4920235	1		/			
ANR	4920275	AdditiveExpression	y1 + y2		4920235	0		+			
ANR	4920276	Identifier	y1		4920235	0					
ANR	4920277	Identifier	y2		4920235	1					
ANR	4920278	PrimaryExpression	2		4920235	1					
ANR	4920279	IdentifierDeclStatement	const double dx = x1 - x2 ;	467:6:14553:14578	4920235	2	True				
ANR	4920280	IdentifierDecl	dx = x1 - x2		4920235	0					
ANR	4920281	IdentifierDeclType	const double		4920235	0					
ANR	4920282	Identifier	dx		4920235	1					
ANR	4920283	AssignmentExpression	dx = x1 - x2		4920235	2		=			
ANR	4920284	Identifier	dx		4920235	0					
ANR	4920285	AdditiveExpression	x1 - x2		4920235	1		-			
ANR	4920286	Identifier	x1		4920235	0					
ANR	4920287	Identifier	x2		4920235	1					
ANR	4920288	IdentifierDeclStatement	const double dy = y1 - y2 ;	468:6:14586:14611	4920235	3	True				
ANR	4920289	IdentifierDecl	dy = y1 - y2		4920235	0					
ANR	4920290	IdentifierDeclType	const double		4920235	0					
ANR	4920291	Identifier	dy		4920235	1					
ANR	4920292	AssignmentExpression	dy = y1 - y2		4920235	2		=			
ANR	4920293	Identifier	dy		4920235	0					
ANR	4920294	AdditiveExpression	y1 - y2		4920235	1		-			
ANR	4920295	Identifier	y1		4920235	0					
ANR	4920296	Identifier	y2		4920235	1					
ANR	4920297	ExpressionStatement	x = ( x - cx ) / dx	470:6:14620:14635	4920235	4	True				
ANR	4920298	AssignmentExpression	x = ( x - cx ) / dx		4920235	0		=			
ANR	4920299	Identifier	x		4920235	0					
ANR	4920300	MultiplicativeExpression	( x - cx ) / dx		4920235	1		/			
ANR	4920301	AdditiveExpression	x - cx		4920235	0		-			
ANR	4920302	Identifier	x		4920235	0					
ANR	4920303	Identifier	cx		4920235	1					
ANR	4920304	Identifier	dx		4920235	1					
ANR	4920305	ExpressionStatement	y = ( y - cy ) / dy	471:6:14643:14658	4920235	5	True				
ANR	4920306	AssignmentExpression	y = ( y - cy ) / dy		4920235	0		=			
ANR	4920307	Identifier	y		4920235	0					
ANR	4920308	MultiplicativeExpression	( y - cy ) / dy		4920235	1		/			
ANR	4920309	AdditiveExpression	y - cy		4920235	0		-			
ANR	4920310	Identifier	y		4920235	0					
ANR	4920311	Identifier	cy		4920235	1					
ANR	4920312	Identifier	dy		4920235	1					
ANR	4920313	ReturnStatement	return x * x + y * y < .25 ;	476:6:14773:14793	4920235	6	True				
ANR	4920314	RelationalExpression	x * x + y * y < .25		4920235	0		<			
ANR	4920315	AdditiveExpression	x * x + y * y		4920235	0		+			
ANR	4920316	MultiplicativeExpression	x * x		4920235	0		*			
ANR	4920317	Identifier	x		4920235	0					
ANR	4920318	Identifier	x		4920235	1					
ANR	4920319	MultiplicativeExpression	y * y		4920235	1		*			
ANR	4920320	Identifier	y		4920235	0					
ANR	4920321	Identifier	y		4920235	1					
ANR	4920322	PrimaryExpression	.25		4920235	1					
ANR	4920323	ReturnStatement	return 0 ;	479:3:14804:14812	4920235	1	True				
ANR	4920324	PrimaryExpression	0		4920235	0					
ANR	4920325	ReturnType	static int		4920235	1					
ANR	4920326	Identifier	circle_check		4920235	2					
ANR	4920327	ParameterList	"double x , double y , double x1 , double y1 , double x2 , double y2"		4920235	3					
ANR	4920328	Parameter	double x	460:13:14296:14303	4920235	0	True				
ANR	4920329	ParameterType	double		4920235	0					
ANR	4920330	Identifier	x		4920235	1					
ANR	4920331	Parameter	double y	460:23:14306:14313	4920235	1	True				
ANR	4920332	ParameterType	double		4920235	0					
ANR	4920333	Identifier	y		4920235	1					
ANR	4920334	Parameter	double x1	460:33:14316:14324	4920235	2	True				
ANR	4920335	ParameterType	double		4920235	0					
ANR	4920336	Identifier	x1		4920235	1					
ANR	4920337	Parameter	double y1	460:44:14327:14335	4920235	3	True				
ANR	4920338	ParameterType	double		4920235	0					
ANR	4920339	Identifier	y1		4920235	1					
ANR	4920340	Parameter	double x2	460:55:14338:14346	4920235	4	True				
ANR	4920341	ParameterType	double		4920235	0					
ANR	4920342	Identifier	x2		4920235	1					
ANR	4920343	Parameter	double y2	460:66:14349:14357	4920235	5	True				
ANR	4920344	ParameterType	double		4920235	0					
ANR	4920345	Identifier	y2		4920235	1					
ANR	4920346	CFGEntryNode	ENTRY		4920235		True				
ANR	4920347	CFGExitNode	EXIT		4920235		True				
ANR	4920348	Symbol	dx		4920235						
ANR	4920349	Symbol	cx		4920235						
ANR	4920350	Symbol	dy		4920235						
ANR	4920351	Symbol	cy		4920235						
ANR	4920352	Symbol	x		4920235						
ANR	4920353	Symbol	y1		4920235						
ANR	4920354	Symbol	y		4920235						
ANR	4920355	Symbol	x1		4920235						
ANR	4920356	Symbol	y2		4920235						
ANR	4920357	Symbol	x2		4920235						
ANR	4920358	Symbol	square_check		4920235						
ANR	4920359	Function	inside_circle_filled	482:0:14831:14974							
ANR	4920360	FunctionDef	"inside_circle_filled (const struct arg * arg , double x , double y)"		4920359	0					
ANR	4920361	CompoundStatement		484:0:14906:14974	4920359	0					
ANR	4920362	ReturnStatement	"return circle_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 ) ;"	485:3:14911:14972	4920359	0	True				
ANR	4920363	CallExpression	"circle_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 )"		4920359	0					
ANR	4920364	Callee	circle_check		4920359	0					
ANR	4920365	Identifier	circle_check		4920359	0					
ANR	4920366	ArgumentList	x		4920359	1					
ANR	4920367	Argument	x		4920359	0					
ANR	4920368	Identifier	x		4920359	0					
ANR	4920369	Argument	y		4920359	1					
ANR	4920370	Identifier	y		4920359	0					
ANR	4920371	Argument	arg -> x1		4920359	2					
ANR	4920372	PtrMemberAccess	arg -> x1		4920359	0					
ANR	4920373	Identifier	arg		4920359	0					
ANR	4920374	Identifier	x1		4920359	1					
ANR	4920375	Argument	arg -> y1		4920359	3					
ANR	4920376	PtrMemberAccess	arg -> y1		4920359	0					
ANR	4920377	Identifier	arg		4920359	0					
ANR	4920378	Identifier	y1		4920359	1					
ANR	4920379	Argument	arg -> x2		4920359	4					
ANR	4920380	PtrMemberAccess	arg -> x2		4920359	0					
ANR	4920381	Identifier	arg		4920359	0					
ANR	4920382	Identifier	x2		4920359	1					
ANR	4920383	Argument	arg -> y2		4920359	5					
ANR	4920384	PtrMemberAccess	arg -> y2		4920359	0					
ANR	4920385	Identifier	arg		4920359	0					
ANR	4920386	Identifier	y2		4920359	1					
ANR	4920387	ReturnType	static int		4920359	1					
ANR	4920388	Identifier	inside_circle_filled		4920359	2					
ANR	4920389	ParameterList	"const struct arg * arg , double x , double y"		4920359	3					
ANR	4920390	Parameter	const struct arg * arg	483:21:14863:14883	4920359	0	True				
ANR	4920391	ParameterType	const struct arg *		4920359	0					
ANR	4920392	Identifier	arg		4920359	1					
ANR	4920393	Parameter	double x	483:44:14886:14893	4920359	1	True				
ANR	4920394	ParameterType	double		4920359	0					
ANR	4920395	Identifier	x		4920359	1					
ANR	4920396	Parameter	double y	483:54:14896:14903	4920359	2	True				
ANR	4920397	ParameterType	double		4920359	0					
ANR	4920398	Identifier	y		4920359	1					
ANR	4920399	CFGEntryNode	ENTRY		4920359		True				
ANR	4920400	CFGExitNode	EXIT		4920359		True				
ANR	4920401	Symbol	arg		4920359						
ANR	4920402	Symbol	x		4920359						
ANR	4920403	Symbol	arg -> x2		4920359						
ANR	4920404	Symbol	y		4920359						
ANR	4920405	Symbol	arg -> y2		4920359						
ANR	4920406	Symbol	circle_check		4920359						
ANR	4920407	Symbol	arg -> x1		4920359						
ANR	4920408	Symbol	arg -> y1		4920359						
ANR	4920409	Symbol	* arg		4920359						
ANR	4920410	Function	circle_check_line	488:0:14977:15907							
ANR	4920411	FunctionDef	"circle_check_line (const struct arg * arg , double x , double y , double w)"		4920410	0					
ANR	4920412	CompoundStatement		494:0:15289:15907	4920410	0					
ANR	4920413	IdentifierDeclStatement	double cx = ( arg -> x1 + arg -> x2 ) / 2 ;	495:3:15294:15325	4920410	0	True				
ANR	4920414	IdentifierDecl	cx = ( arg -> x1 + arg -> x2 ) / 2		4920410	0					
ANR	4920415	IdentifierDeclType	double		4920410	0					
ANR	4920416	Identifier	cx		4920410	1					
ANR	4920417	AssignmentExpression	cx = ( arg -> x1 + arg -> x2 ) / 2		4920410	2		=			
ANR	4920418	Identifier	cx		4920410	0					
ANR	4920419	MultiplicativeExpression	( arg -> x1 + arg -> x2 ) / 2		4920410	1		/			
ANR	4920420	AdditiveExpression	arg -> x1 + arg -> x2		4920410	0		+			
ANR	4920421	PtrMemberAccess	arg -> x1		4920410	0					
ANR	4920422	Identifier	arg		4920410	0					
ANR	4920423	Identifier	x1		4920410	1					
ANR	4920424	PtrMemberAccess	arg -> x2		4920410	1					
ANR	4920425	Identifier	arg		4920410	0					
ANR	4920426	Identifier	x2		4920410	1					
ANR	4920427	PrimaryExpression	2		4920410	1					
ANR	4920428	IdentifierDeclStatement	double wx = fabs ( arg -> x1 - arg -> x2 ) / 2 ;	496:3:15330:15365	4920410	1	True				
ANR	4920429	IdentifierDecl	wx = fabs ( arg -> x1 - arg -> x2 ) / 2		4920410	0					
ANR	4920430	IdentifierDeclType	double		4920410	0					
ANR	4920431	Identifier	wx		4920410	1					
ANR	4920432	AssignmentExpression	wx = fabs ( arg -> x1 - arg -> x2 ) / 2		4920410	2		=			
ANR	4920433	Identifier	wx		4920410	0					
ANR	4920434	MultiplicativeExpression	fabs ( arg -> x1 - arg -> x2 ) / 2		4920410	1		/			
ANR	4920435	CallExpression	fabs ( arg -> x1 - arg -> x2 )		4920410	0					
ANR	4920436	Callee	fabs		4920410	0					
ANR	4920437	Identifier	fabs		4920410	0					
ANR	4920438	ArgumentList	arg -> x1 - arg -> x2		4920410	1					
ANR	4920439	Argument	arg -> x1 - arg -> x2		4920410	0					
ANR	4920440	AdditiveExpression	arg -> x1 - arg -> x2		4920410	0		-			
ANR	4920441	PtrMemberAccess	arg -> x1		4920410	0					
ANR	4920442	Identifier	arg		4920410	0					
ANR	4920443	Identifier	x1		4920410	1					
ANR	4920444	PtrMemberAccess	arg -> x2		4920410	1					
ANR	4920445	Identifier	arg		4920410	0					
ANR	4920446	Identifier	x2		4920410	1					
ANR	4920447	PrimaryExpression	2		4920410	1					
ANR	4920448	IdentifierDeclStatement	double cy = ( arg -> y1 + arg -> y2 ) / 2 ;	497:3:15370:15401	4920410	2	True				
ANR	4920449	IdentifierDecl	cy = ( arg -> y1 + arg -> y2 ) / 2		4920410	0					
ANR	4920450	IdentifierDeclType	double		4920410	0					
ANR	4920451	Identifier	cy		4920410	1					
ANR	4920452	AssignmentExpression	cy = ( arg -> y1 + arg -> y2 ) / 2		4920410	2		=			
ANR	4920453	Identifier	cy		4920410	0					
ANR	4920454	MultiplicativeExpression	( arg -> y1 + arg -> y2 ) / 2		4920410	1		/			
ANR	4920455	AdditiveExpression	arg -> y1 + arg -> y2		4920410	0		+			
ANR	4920456	PtrMemberAccess	arg -> y1		4920410	0					
ANR	4920457	Identifier	arg		4920410	0					
ANR	4920458	Identifier	y1		4920410	1					
ANR	4920459	PtrMemberAccess	arg -> y2		4920410	1					
ANR	4920460	Identifier	arg		4920410	0					
ANR	4920461	Identifier	y2		4920410	1					
ANR	4920462	PrimaryExpression	2		4920410	1					
ANR	4920463	IdentifierDeclStatement	double wy = fabs ( arg -> y1 - arg -> y2 ) / 2 ;	498:3:15406:15441	4920410	3	True				
ANR	4920464	IdentifierDecl	wy = fabs ( arg -> y1 - arg -> y2 ) / 2		4920410	0					
ANR	4920465	IdentifierDeclType	double		4920410	0					
ANR	4920466	Identifier	wy		4920410	1					
ANR	4920467	AssignmentExpression	wy = fabs ( arg -> y1 - arg -> y2 ) / 2		4920410	2		=			
ANR	4920468	Identifier	wy		4920410	0					
ANR	4920469	MultiplicativeExpression	fabs ( arg -> y1 - arg -> y2 ) / 2		4920410	1		/			
ANR	4920470	CallExpression	fabs ( arg -> y1 - arg -> y2 )		4920410	0					
ANR	4920471	Callee	fabs		4920410	0					
ANR	4920472	Identifier	fabs		4920410	0					
ANR	4920473	ArgumentList	arg -> y1 - arg -> y2		4920410	1					
ANR	4920474	Argument	arg -> y1 - arg -> y2		4920410	0					
ANR	4920475	AdditiveExpression	arg -> y1 - arg -> y2		4920410	0		-			
ANR	4920476	PtrMemberAccess	arg -> y1		4920410	0					
ANR	4920477	Identifier	arg		4920410	0					
ANR	4920478	Identifier	y1		4920410	1					
ANR	4920479	PtrMemberAccess	arg -> y2		4920410	1					
ANR	4920480	Identifier	arg		4920410	0					
ANR	4920481	Identifier	y2		4920410	1					
ANR	4920482	PrimaryExpression	2		4920410	1					
ANR	4920483	IfStatement	"if ( circle_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w ) )"		4920410	4					
ANR	4920484	Condition	"circle_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w )"	500:7:15451:15504	4920410	0	True				
ANR	4920485	CallExpression	"circle_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w )"		4920410	0					
ANR	4920486	Callee	circle_check		4920410	0					
ANR	4920487	Identifier	circle_check		4920410	0					
ANR	4920488	ArgumentList	x		4920410	1					
ANR	4920489	Argument	x		4920410	0					
ANR	4920490	Identifier	x		4920410	0					
ANR	4920491	Argument	y		4920410	1					
ANR	4920492	Identifier	y		4920410	0					
ANR	4920493	Argument	cx - wx - w		4920410	2					
ANR	4920494	AdditiveExpression	cx - wx - w		4920410	0		-			
ANR	4920495	Identifier	cx		4920410	0					
ANR	4920496	AdditiveExpression	wx - w		4920410	1		-			
ANR	4920497	Identifier	wx		4920410	0					
ANR	4920498	Identifier	w		4920410	1					
ANR	4920499	Argument	cy - wy - w		4920410	3					
ANR	4920500	AdditiveExpression	cy - wy - w		4920410	0		-			
ANR	4920501	Identifier	cy		4920410	0					
ANR	4920502	AdditiveExpression	wy - w		4920410	1		-			
ANR	4920503	Identifier	wy		4920410	0					
ANR	4920504	Identifier	w		4920410	1					
ANR	4920505	Argument	cx + wx + w		4920410	4					
ANR	4920506	AdditiveExpression	cx + wx + w		4920410	0		+			
ANR	4920507	Identifier	cx		4920410	0					
ANR	4920508	AdditiveExpression	wx + w		4920410	1		+			
ANR	4920509	Identifier	wx		4920410	0					
ANR	4920510	Identifier	w		4920410	1					
ANR	4920511	Argument	cy + wy + w		4920410	5					
ANR	4920512	AdditiveExpression	cy + wy + w		4920410	0		+			
ANR	4920513	Identifier	cy		4920410	0					
ANR	4920514	AdditiveExpression	wy + w		4920410	1		+			
ANR	4920515	Identifier	wy		4920410	0					
ANR	4920516	Identifier	w		4920410	1					
ANR	4920517	CompoundStatement		8:3:220:220	4920410	1					
ANR	4920518	ExpressionStatement	wx -= w	505:6:15627:15634	4920410	0	True				
ANR	4920519	AssignmentExpression	wx -= w		4920410	0		-=			
ANR	4920520	Identifier	wx		4920410	0					
ANR	4920521	Identifier	w		4920410	1					
ANR	4920522	ExpressionStatement	wy -= w	506:6:15642:15649	4920410	1	True				
ANR	4920523	AssignmentExpression	wy -= w		4920410	0		-=			
ANR	4920524	Identifier	wy		4920410	0					
ANR	4920525	Identifier	w		4920410	1					
ANR	4920526	IfStatement	"if ( wx > 0 && wy > 0 && circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy ) )"		4920410	2					
ANR	4920527	Condition	"wx > 0 && wy > 0 && circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"	507:10:15661:15726	4920410	0	True				
ANR	4920528	AndExpression	"wx > 0 && wy > 0 && circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		4920410	0		&&			
ANR	4920529	RelationalExpression	wx > 0		4920410	0		>			
ANR	4920530	Identifier	wx		4920410	0					
ANR	4920531	PrimaryExpression	0		4920410	1					
ANR	4920532	AndExpression	"wy > 0 && circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		4920410	1		&&			
ANR	4920533	RelationalExpression	wy > 0		4920410	0		>			
ANR	4920534	Identifier	wy		4920410	0					
ANR	4920535	PrimaryExpression	0		4920410	1					
ANR	4920536	CallExpression	"circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		4920410	1					
ANR	4920537	Callee	circle_check		4920410	0					
ANR	4920538	Identifier	circle_check		4920410	0					
ANR	4920539	ArgumentList	x		4920410	1					
ANR	4920540	Argument	x		4920410	0					
ANR	4920541	Identifier	x		4920410	0					
ANR	4920542	Argument	y		4920410	1					
ANR	4920543	Identifier	y		4920410	0					
ANR	4920544	Argument	cx - wx		4920410	2					
ANR	4920545	AdditiveExpression	cx - wx		4920410	0		-			
ANR	4920546	Identifier	cx		4920410	0					
ANR	4920547	Identifier	wx		4920410	1					
ANR	4920548	Argument	cy - wy		4920410	3					
ANR	4920549	AdditiveExpression	cy - wy		4920410	0		-			
ANR	4920550	Identifier	cy		4920410	0					
ANR	4920551	Identifier	wy		4920410	1					
ANR	4920552	Argument	cx + wx		4920410	4					
ANR	4920553	AdditiveExpression	cx + wx		4920410	0		+			
ANR	4920554	Identifier	cx		4920410	0					
ANR	4920555	Identifier	wx		4920410	1					
ANR	4920556	Argument	cy + wy		4920410	5					
ANR	4920557	AdditiveExpression	cy + wy		4920410	0		+			
ANR	4920558	Identifier	cy		4920410	0					
ANR	4920559	Identifier	wy		4920410	1					
ANR	4920560	ReturnStatement	return INSIDE ;	508:9:15738:15751	4920410	1	True				
ANR	4920561	Identifier	INSIDE		4920410	0					
ANR	4920562	ReturnStatement	return 0 ;	510:6:15803:15811	4920410	3	True				
ANR	4920563	PrimaryExpression	0		4920410	0					
ANR	4920564	ReturnStatement	return OUTSIDE ;	513:3:15857:15871	4920410	5	True				
ANR	4920565	Identifier	OUTSIDE		4920410	0					
ANR	4920566	ReturnType	static int		4920410	1					
ANR	4920567	Identifier	circle_check_line		4920410	2					
ANR	4920568	ParameterList	"const struct arg * arg , double x , double y , double w"		4920410	3					
ANR	4920569	Parameter	const struct arg * arg	489:18:15006:15026	4920410	0	True				
ANR	4920570	ParameterType	const struct arg *		4920410	0					
ANR	4920571	Identifier	arg		4920410	1					
ANR	4920572	Parameter	double x	489:41:15029:15036	4920410	1	True				
ANR	4920573	ParameterType	double		4920410	0					
ANR	4920574	Identifier	x		4920410	1					
ANR	4920575	Parameter	double y	489:51:15039:15046	4920410	2	True				
ANR	4920576	ParameterType	double		4920410	0					
ANR	4920577	Identifier	y		4920410	1					
ANR	4920578	Parameter	double w	489:61:15049:15056	4920410	3	True				
ANR	4920579	ParameterType	double		4920410	0					
ANR	4920580	Identifier	w		4920410	1					
ANR	4920581	CFGEntryNode	ENTRY		4920410		True				
ANR	4920582	CFGExitNode	EXIT		4920410		True				
ANR	4920583	Symbol	wx		4920410						
ANR	4920584	Symbol	wy		4920410						
ANR	4920585	Symbol	fabs		4920410						
ANR	4920586	Symbol	cx		4920410						
ANR	4920587	Symbol	cy		4920410						
ANR	4920588	Symbol	arg		4920410						
ANR	4920589	Symbol	w		4920410						
ANR	4920590	Symbol	x		4920410						
ANR	4920591	Symbol	arg -> x2		4920410						
ANR	4920592	Symbol	y		4920410						
ANR	4920593	Symbol	arg -> x1		4920410						
ANR	4920594	Symbol	arg -> y2		4920410						
ANR	4920595	Symbol	circle_check		4920410						
ANR	4920596	Symbol	arg -> y1		4920410						
ANR	4920597	Symbol	OUTSIDE		4920410						
ANR	4920598	Symbol	* arg		4920410						
ANR	4920599	Symbol	INSIDE		4920410						
ANR	4920600	Function	check_circle_filled	516:0:15910:16040							
ANR	4920601	FunctionDef	"check_circle_filled (const struct arg * arg , double x , double y)"		4920600	0					
ANR	4920602	CompoundStatement		518:0:15984:16040	4920600	0					
ANR	4920603	ReturnStatement	"return circle_check_line ( arg , x , y , FILTER_WIDTH ) ;"	519:3:15989:16038	4920600	0	True				
ANR	4920604	CallExpression	"circle_check_line ( arg , x , y , FILTER_WIDTH )"		4920600	0					
ANR	4920605	Callee	circle_check_line		4920600	0					
ANR	4920606	Identifier	circle_check_line		4920600	0					
ANR	4920607	ArgumentList	arg		4920600	1					
ANR	4920608	Argument	arg		4920600	0					
ANR	4920609	Identifier	arg		4920600	0					
ANR	4920610	Argument	x		4920600	1					
ANR	4920611	Identifier	x		4920600	0					
ANR	4920612	Argument	y		4920600	2					
ANR	4920613	Identifier	y		4920600	0					
ANR	4920614	Argument	FILTER_WIDTH		4920600	3					
ANR	4920615	Identifier	FILTER_WIDTH		4920600	0					
ANR	4920616	ReturnType	static int		4920600	1					
ANR	4920617	Identifier	check_circle_filled		4920600	2					
ANR	4920618	ParameterList	"const struct arg * arg , double x , double y"		4920600	3					
ANR	4920619	Parameter	const struct arg * arg	517:20:15941:15961	4920600	0	True				
ANR	4920620	ParameterType	const struct arg *		4920600	0					
ANR	4920621	Identifier	arg		4920600	1					
ANR	4920622	Parameter	double x	517:43:15964:15971	4920600	1	True				
ANR	4920623	ParameterType	double		4920600	0					
ANR	4920624	Identifier	x		4920600	1					
ANR	4920625	Parameter	double y	517:53:15974:15981	4920600	2	True				
ANR	4920626	ParameterType	double		4920600	0					
ANR	4920627	Identifier	y		4920600	1					
ANR	4920628	CFGEntryNode	ENTRY		4920600		True				
ANR	4920629	CFGExitNode	EXIT		4920600		True				
ANR	4920630	Symbol	arg		4920600						
ANR	4920631	Symbol	x		4920600						
ANR	4920632	Symbol	y		4920600						
ANR	4920633	Symbol	circle_check_line		4920600						
ANR	4920634	Symbol	FILTER_WIDTH		4920600						
ANR	4920635	Function	inside_circle	522:0:16043:16172							
ANR	4920636	FunctionDef	"inside_circle (const struct arg * arg , double x , double y)"		4920635	0					
ANR	4920637	CompoundStatement		524:0:16111:16172	4920635	0					
ANR	4920638	ReturnStatement	"return circle_check_line ( arg , x , y , arg -> width / 2 ) == 0 ;"	525:3:16116:16170	4920635	0	True				
ANR	4920639	EqualityExpression	"circle_check_line ( arg , x , y , arg -> width / 2 ) == 0"		4920635	0		==			
ANR	4920640	CallExpression	"circle_check_line ( arg , x , y , arg -> width / 2 )"		4920635	0					
ANR	4920641	Callee	circle_check_line		4920635	0					
ANR	4920642	Identifier	circle_check_line		4920635	0					
ANR	4920643	ArgumentList	arg		4920635	1					
ANR	4920644	Argument	arg		4920635	0					
ANR	4920645	Identifier	arg		4920635	0					
ANR	4920646	Argument	x		4920635	1					
ANR	4920647	Identifier	x		4920635	0					
ANR	4920648	Argument	y		4920635	2					
ANR	4920649	Identifier	y		4920635	0					
ANR	4920650	Argument	arg -> width / 2		4920635	3					
ANR	4920651	MultiplicativeExpression	arg -> width / 2		4920635	0		/			
ANR	4920652	PtrMemberAccess	arg -> width		4920635	0					
ANR	4920653	Identifier	arg		4920635	0					
ANR	4920654	Identifier	width		4920635	1					
ANR	4920655	PrimaryExpression	2		4920635	1					
ANR	4920656	PrimaryExpression	0		4920635	1					
ANR	4920657	ReturnType	static int		4920635	1					
ANR	4920658	Identifier	inside_circle		4920635	2					
ANR	4920659	ParameterList	"const struct arg * arg , double x , double y"		4920635	3					
ANR	4920660	Parameter	const struct arg * arg	523:14:16068:16088	4920635	0	True				
ANR	4920661	ParameterType	const struct arg *		4920635	0					
ANR	4920662	Identifier	arg		4920635	1					
ANR	4920663	Parameter	double x	523:37:16091:16098	4920635	1	True				
ANR	4920664	ParameterType	double		4920635	0					
ANR	4920665	Identifier	x		4920635	1					
ANR	4920666	Parameter	double y	523:47:16101:16108	4920635	2	True				
ANR	4920667	ParameterType	double		4920635	0					
ANR	4920668	Identifier	y		4920635	1					
ANR	4920669	CFGEntryNode	ENTRY		4920635		True				
ANR	4920670	CFGExitNode	EXIT		4920635		True				
ANR	4920671	Symbol	arg -> width		4920635						
ANR	4920672	Symbol	arg		4920635						
ANR	4920673	Symbol	x		4920635						
ANR	4920674	Symbol	y		4920635						
ANR	4920675	Symbol	circle_check_line		4920635						
ANR	4920676	Symbol	* arg		4920635						
ANR	4920677	Function	check_circle	528:0:16175:16653							
ANR	4920678	FunctionDef	"check_circle (const struct arg * arg , double x , double y)"		4920677	0					
ANR	4920679	CompoundStatement		530:0:16242:16653	4920677	0					
ANR	4920680	IdentifierDeclStatement	double w = arg -> width / 2 ;	532:3:16287:16310	4920677	0	True				
ANR	4920681	IdentifierDecl	w = arg -> width / 2		4920677	0					
ANR	4920682	IdentifierDeclType	double		4920677	0					
ANR	4920683	Identifier	w		4920677	1					
ANR	4920684	AssignmentExpression	w = arg -> width / 2		4920677	2		=			
ANR	4920685	Identifier	w		4920677	0					
ANR	4920686	MultiplicativeExpression	arg -> width / 2		4920677	1		/			
ANR	4920687	PtrMemberAccess	arg -> width		4920677	0					
ANR	4920688	Identifier	arg		4920677	0					
ANR	4920689	Identifier	width		4920677	1					
ANR	4920690	PrimaryExpression	2		4920677	1					
ANR	4920691	IfStatement	"if ( circle_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0 )"		4920677	1					
ANR	4920692	Condition	"circle_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0"	534:7:16320:16368	4920677	0	True				
ANR	4920693	EqualityExpression	"circle_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0"		4920677	0		==			
ANR	4920694	CallExpression	"circle_check_line ( arg , x , y , w + FILTER_WIDTH )"		4920677	0					
ANR	4920695	Callee	circle_check_line		4920677	0					
ANR	4920696	Identifier	circle_check_line		4920677	0					
ANR	4920697	ArgumentList	arg		4920677	1					
ANR	4920698	Argument	arg		4920677	0					
ANR	4920699	Identifier	arg		4920677	0					
ANR	4920700	Argument	x		4920677	1					
ANR	4920701	Identifier	x		4920677	0					
ANR	4920702	Argument	y		4920677	2					
ANR	4920703	Identifier	y		4920677	0					
ANR	4920704	Argument	w + FILTER_WIDTH		4920677	3					
ANR	4920705	AdditiveExpression	w + FILTER_WIDTH		4920677	0		+			
ANR	4920706	Identifier	w		4920677	0					
ANR	4920707	Identifier	FILTER_WIDTH		4920677	1					
ANR	4920708	PrimaryExpression	0		4920677	1					
ANR	4920709	CompoundStatement		6:3:131:131	4920677	1					
ANR	4920710	ExpressionStatement	w -= FILTER_WIDTH	536:6:16382:16399	4920677	0	True				
ANR	4920711	AssignmentExpression	w -= FILTER_WIDTH		4920677	0		-=			
ANR	4920712	Identifier	w		4920677	0					
ANR	4920713	Identifier	FILTER_WIDTH		4920677	1					
ANR	4920714	IfStatement	"if ( w > 0 && circle_check_line ( arg , x , y , w ) == 0 )"		4920677	1					
ANR	4920715	Condition	"w > 0 && circle_check_line ( arg , x , y , w ) == 0"	538:10:16412:16456	4920677	0	True				
ANR	4920716	AndExpression	"w > 0 && circle_check_line ( arg , x , y , w ) == 0"		4920677	0		&&			
ANR	4920717	RelationalExpression	w > 0		4920677	0		>			
ANR	4920718	Identifier	w		4920677	0					
ANR	4920719	PrimaryExpression	0		4920677	1					
ANR	4920720	EqualityExpression	"circle_check_line ( arg , x , y , w ) == 0"		4920677	1		==			
ANR	4920721	CallExpression	"circle_check_line ( arg , x , y , w )"		4920677	0					
ANR	4920722	Callee	circle_check_line		4920677	0					
ANR	4920723	Identifier	circle_check_line		4920677	0					
ANR	4920724	ArgumentList	arg		4920677	1					
ANR	4920725	Argument	arg		4920677	0					
ANR	4920726	Identifier	arg		4920677	0					
ANR	4920727	Argument	x		4920677	1					
ANR	4920728	Identifier	x		4920677	0					
ANR	4920729	Argument	y		4920677	2					
ANR	4920730	Identifier	y		4920677	0					
ANR	4920731	Argument	w		4920677	3					
ANR	4920732	Identifier	w		4920677	0					
ANR	4920733	PrimaryExpression	0		4920677	1					
ANR	4920734	ReturnStatement	return INSIDE ;	539:9:16468:16481	4920677	1	True				
ANR	4920735	Identifier	INSIDE		4920677	0					
ANR	4920736	ReturnStatement	return 0 ;	542:6:16543:16551	4920677	2	True				
ANR	4920737	PrimaryExpression	0		4920677	0					
ANR	4920738	ElseStatement	else		4920677	0					
ANR	4920739	ReturnStatement	return OUTSIDE ;	546:6:16637:16651	4920677	0	True				
ANR	4920740	Identifier	OUTSIDE		4920677	0					
ANR	4920741	ReturnType	static int		4920677	1					
ANR	4920742	Identifier	check_circle		4920677	2					
ANR	4920743	ParameterList	"const struct arg * arg , double x , double y"		4920677	3					
ANR	4920744	Parameter	const struct arg * arg	529:13:16199:16219	4920677	0	True				
ANR	4920745	ParameterType	const struct arg *		4920677	0					
ANR	4920746	Identifier	arg		4920677	1					
ANR	4920747	Parameter	double x	529:36:16222:16229	4920677	1	True				
ANR	4920748	ParameterType	double		4920677	0					
ANR	4920749	Identifier	x		4920677	1					
ANR	4920750	Parameter	double y	529:46:16232:16239	4920677	2	True				
ANR	4920751	ParameterType	double		4920677	0					
ANR	4920752	Identifier	y		4920677	1					
ANR	4920753	CFGEntryNode	ENTRY		4920677		True				
ANR	4920754	CFGExitNode	EXIT		4920677		True				
ANR	4920755	Symbol	arg -> width		4920677						
ANR	4920756	Symbol	arg		4920677						
ANR	4920757	Symbol	w		4920677						
ANR	4920758	Symbol	x		4920677						
ANR	4920759	Symbol	y		4920677						
ANR	4920760	Symbol	FILTER_WIDTH		4920677						
ANR	4920761	Symbol	circle_check_line		4920677						
ANR	4920762	Symbol	OUTSIDE		4920677						
ANR	4920763	Symbol	* arg		4920677						
ANR	4920764	Symbol	INSIDE		4920677						
ANR	4920765	Function	line_check	553:0:16749:18027							
ANR	4920766	FunctionDef	"line_check (double x , double y , double x1 , double y1 , double x2 , double y2 , double w , double expand)"		4920765	0					
ANR	4920767	CompoundStatement		556:0:16863:18027	4920765	0					
ANR	4920768	IdentifierDeclStatement	double lx = x2 - x1 ;	558:3:16920:16939	4920765	0	True				
ANR	4920769	IdentifierDecl	lx = x2 - x1		4920765	0					
ANR	4920770	IdentifierDeclType	double		4920765	0					
ANR	4920771	Identifier	lx		4920765	1					
ANR	4920772	AssignmentExpression	lx = x2 - x1		4920765	2		=			
ANR	4920773	Identifier	lx		4920765	0					
ANR	4920774	AdditiveExpression	x2 - x1		4920765	1		-			
ANR	4920775	Identifier	x2		4920765	0					
ANR	4920776	Identifier	x1		4920765	1					
ANR	4920777	IdentifierDeclStatement	double ly = y2 - y1 ;	559:3:16944:16963	4920765	1	True				
ANR	4920778	IdentifierDecl	ly = y2 - y1		4920765	0					
ANR	4920779	IdentifierDeclType	double		4920765	0					
ANR	4920780	Identifier	ly		4920765	1					
ANR	4920781	AssignmentExpression	ly = y2 - y1		4920765	2		=			
ANR	4920782	Identifier	ly		4920765	0					
ANR	4920783	AdditiveExpression	y2 - y1		4920765	1		-			
ANR	4920784	Identifier	y2		4920765	0					
ANR	4920785	Identifier	y1		4920765	1					
ANR	4920786	IdentifierDeclStatement	double len2 = lx * lx + ly * ly ;	560:3:16968:16995	4920765	2	True				
ANR	4920787	IdentifierDecl	len2 = lx * lx + ly * ly		4920765	0					
ANR	4920788	IdentifierDeclType	double		4920765	0					
ANR	4920789	Identifier	len2		4920765	1					
ANR	4920790	AssignmentExpression	len2 = lx * lx + ly * ly		4920765	2		=			
ANR	4920791	Identifier	len2		4920765	0					
ANR	4920792	AdditiveExpression	lx * lx + ly * ly		4920765	1		+			
ANR	4920793	MultiplicativeExpression	lx * lx		4920765	0		*			
ANR	4920794	Identifier	lx		4920765	0					
ANR	4920795	Identifier	lx		4920765	1					
ANR	4920796	MultiplicativeExpression	ly * ly		4920765	1		*			
ANR	4920797	Identifier	ly		4920765	0					
ANR	4920798	Identifier	ly		4920765	1					
ANR	4920799	IdentifierDeclStatement	"double cross , dot ;"	561:3:17000:17017	4920765	3	True				
ANR	4920800	IdentifierDecl	cross		4920765	0					
ANR	4920801	IdentifierDeclType	double		4920765	0					
ANR	4920802	Identifier	cross		4920765	1					
ANR	4920803	IdentifierDecl	dot		4920765	1					
ANR	4920804	IdentifierDeclType	double		4920765	0					
ANR	4920805	Identifier	dot		4920765	1					
ANR	4920806	ExpressionStatement	x -= x1	563:3:17023:17030	4920765	4	True				
ANR	4920807	AssignmentExpression	x -= x1		4920765	0		-=			
ANR	4920808	Identifier	x		4920765	0					
ANR	4920809	Identifier	x1		4920765	1					
ANR	4920810	ExpressionStatement	y -= y1	564:3:17035:17042	4920765	5	True				
ANR	4920811	AssignmentExpression	y -= y1		4920765	0		-=			
ANR	4920812	Identifier	y		4920765	0					
ANR	4920813	Identifier	y1		4920765	1					
ANR	4920814	ExpressionStatement	cross = x * ly - y * lx	571:3:17215:17238	4920765	6	True				
ANR	4920815	AssignmentExpression	cross = x * ly - y * lx		4920765	0		=			
ANR	4920816	Identifier	cross		4920765	0					
ANR	4920817	AdditiveExpression	x * ly - y * lx		4920765	1		-			
ANR	4920818	MultiplicativeExpression	x * ly		4920765	0		*			
ANR	4920819	Identifier	x		4920765	0					
ANR	4920820	Identifier	ly		4920765	1					
ANR	4920821	MultiplicativeExpression	y * lx		4920765	1		*			
ANR	4920822	Identifier	y		4920765	0					
ANR	4920823	Identifier	lx		4920765	1					
ANR	4920824	IfStatement	if ( cross * cross >= ( w + expand ) * ( w + expand ) * len2 )		4920765	7					
ANR	4920825	Condition	cross * cross >= ( w + expand ) * ( w + expand ) * len2	579:7:17433:17473	4920765	0	True				
ANR	4920826	RelationalExpression	cross * cross >= ( w + expand ) * ( w + expand ) * len2		4920765	0		>=			
ANR	4920827	MultiplicativeExpression	cross * cross		4920765	0		*			
ANR	4920828	Identifier	cross		4920765	0					
ANR	4920829	Identifier	cross		4920765	1					
ANR	4920830	MultiplicativeExpression	( w + expand ) * ( w + expand ) * len2		4920765	1		*			
ANR	4920831	AdditiveExpression	w + expand		4920765	0		+			
ANR	4920832	Identifier	w		4920765	0					
ANR	4920833	Identifier	expand		4920765	1					
ANR	4920834	MultiplicativeExpression	( w + expand ) * len2		4920765	1		*			
ANR	4920835	AdditiveExpression	w + expand		4920765	0		+			
ANR	4920836	Identifier	w		4920765	0					
ANR	4920837	Identifier	expand		4920765	1					
ANR	4920838	Identifier	len2		4920765	1					
ANR	4920839	ReturnStatement	return 0 ;	580:6:17482:17490	4920765	1	True				
ANR	4920840	PrimaryExpression	0		4920765	0					
ANR	4920841	ExpressionStatement	dot = lx * x + ly * y	587:3:17690:17711	4920765	8	True				
ANR	4920842	AssignmentExpression	dot = lx * x + ly * y		4920765	0		=			
ANR	4920843	Identifier	dot		4920765	0					
ANR	4920844	AdditiveExpression	lx * x + ly * y		4920765	1		+			
ANR	4920845	MultiplicativeExpression	lx * x		4920765	0		*			
ANR	4920846	Identifier	lx		4920765	0					
ANR	4920847	Identifier	x		4920765	1					
ANR	4920848	MultiplicativeExpression	ly * y		4920765	1		*			
ANR	4920849	Identifier	ly		4920765	0					
ANR	4920850	Identifier	y		4920765	1					
ANR	4920851	ReturnStatement	return dot > - expand && dot < len2 + expand ;	597:3:17984:18025	4920765	9	True				
ANR	4920852	AndExpression	dot > - expand && dot < len2 + expand		4920765	0		&&			
ANR	4920853	RelationalExpression	dot > - expand		4920765	0		>			
ANR	4920854	Identifier	dot		4920765	0					
ANR	4920855	UnaryOperationExpression	- expand		4920765	1					
ANR	4920856	UnaryOperator	-		4920765	0					
ANR	4920857	Identifier	expand		4920765	1					
ANR	4920858	RelationalExpression	dot < len2 + expand		4920765	1		<			
ANR	4920859	Identifier	dot		4920765	0					
ANR	4920860	AdditiveExpression	len2 + expand		4920765	1		+			
ANR	4920861	Identifier	len2		4920765	0					
ANR	4920862	Identifier	expand		4920765	1					
ANR	4920863	ReturnType	static int		4920765	1					
ANR	4920864	Identifier	line_check		4920765	2					
ANR	4920865	ParameterList	"double x , double y , double x1 , double y1 , double x2 , double y2 , double w , double expand"		4920765	3					
ANR	4920866	Parameter	double x	554:11:16771:16778	4920765	0	True				
ANR	4920867	ParameterType	double		4920765	0					
ANR	4920868	Identifier	x		4920765	1					
ANR	4920869	Parameter	double y	554:21:16781:16788	4920765	1	True				
ANR	4920870	ParameterType	double		4920765	0					
ANR	4920871	Identifier	y		4920765	1					
ANR	4920872	Parameter	double x1	554:31:16791:16799	4920765	2	True				
ANR	4920873	ParameterType	double		4920765	0					
ANR	4920874	Identifier	x1		4920765	1					
ANR	4920875	Parameter	double y1	554:42:16802:16810	4920765	3	True				
ANR	4920876	ParameterType	double		4920765	0					
ANR	4920877	Identifier	y1		4920765	1					
ANR	4920878	Parameter	double x2	554:53:16813:16821	4920765	4	True				
ANR	4920879	ParameterType	double		4920765	0					
ANR	4920880	Identifier	x2		4920765	1					
ANR	4920881	Parameter	double y2	554:64:16824:16832	4920765	5	True				
ANR	4920882	ParameterType	double		4920765	0					
ANR	4920883	Identifier	y2		4920765	1					
ANR	4920884	Parameter	double w	555:3:16838:16845	4920765	6	True				
ANR	4920885	ParameterType	double		4920765	0					
ANR	4920886	Identifier	w		4920765	1					
ANR	4920887	Parameter	double expand	555:13:16848:16860	4920765	7	True				
ANR	4920888	ParameterType	double		4920765	0					
ANR	4920889	Identifier	expand		4920765	1					
ANR	4920890	CFGEntryNode	ENTRY		4920765		True				
ANR	4920891	CFGExitNode	EXIT		4920765		True				
ANR	4920892	Symbol	dot		4920765						
ANR	4920893	Symbol	cross		4920765						
ANR	4920894	Symbol	lx		4920765						
ANR	4920895	Symbol	ly		4920765						
ANR	4920896	Symbol	len2		4920765						
ANR	4920897	Symbol	expand		4920765						
ANR	4920898	Symbol	w		4920765						
ANR	4920899	Symbol	x		4920765						
ANR	4920900	Symbol	y1		4920765						
ANR	4920901	Symbol	y		4920765						
ANR	4920902	Symbol	x1		4920765						
ANR	4920903	Symbol	y2		4920765						
ANR	4920904	Symbol	x2		4920765						
ANR	4920905	Function	inside_line	600:0:18030:18179							
ANR	4920906	FunctionDef	"inside_line (const struct arg * arg , double x , double y)"		4920905	0					
ANR	4920907	CompoundStatement		602:0:18096:18179	4920905	0					
ANR	4920908	ReturnStatement	"return line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , 0 ) ;"	603:3:18101:18177	4920905	0	True				
ANR	4920909	CallExpression	"line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , 0 )"		4920905	0					
ANR	4920910	Callee	line_check		4920905	0					
ANR	4920911	Identifier	line_check		4920905	0					
ANR	4920912	ArgumentList	x		4920905	1					
ANR	4920913	Argument	x		4920905	0					
ANR	4920914	Identifier	x		4920905	0					
ANR	4920915	Argument	y		4920905	1					
ANR	4920916	Identifier	y		4920905	0					
ANR	4920917	Argument	arg -> x1		4920905	2					
ANR	4920918	PtrMemberAccess	arg -> x1		4920905	0					
ANR	4920919	Identifier	arg		4920905	0					
ANR	4920920	Identifier	x1		4920905	1					
ANR	4920921	Argument	arg -> y1		4920905	3					
ANR	4920922	PtrMemberAccess	arg -> y1		4920905	0					
ANR	4920923	Identifier	arg		4920905	0					
ANR	4920924	Identifier	y1		4920905	1					
ANR	4920925	Argument	arg -> x2		4920905	4					
ANR	4920926	PtrMemberAccess	arg -> x2		4920905	0					
ANR	4920927	Identifier	arg		4920905	0					
ANR	4920928	Identifier	x2		4920905	1					
ANR	4920929	Argument	arg -> y2		4920905	5					
ANR	4920930	PtrMemberAccess	arg -> y2		4920905	0					
ANR	4920931	Identifier	arg		4920905	0					
ANR	4920932	Identifier	y2		4920905	1					
ANR	4920933	Argument	arg -> width / 2		4920905	6					
ANR	4920934	MultiplicativeExpression	arg -> width / 2		4920905	0		/			
ANR	4920935	PtrMemberAccess	arg -> width		4920905	0					
ANR	4920936	Identifier	arg		4920905	0					
ANR	4920937	Identifier	width		4920905	1					
ANR	4920938	PrimaryExpression	2		4920905	1					
ANR	4920939	Argument	0		4920905	7					
ANR	4920940	PrimaryExpression	0		4920905	0					
ANR	4920941	ReturnType	static int		4920905	1					
ANR	4920942	Identifier	inside_line		4920905	2					
ANR	4920943	ParameterList	"const struct arg * arg , double x , double y"		4920905	3					
ANR	4920944	Parameter	const struct arg * arg	601:12:18053:18073	4920905	0	True				
ANR	4920945	ParameterType	const struct arg *		4920905	0					
ANR	4920946	Identifier	arg		4920905	1					
ANR	4920947	Parameter	double x	601:35:18076:18083	4920905	1	True				
ANR	4920948	ParameterType	double		4920905	0					
ANR	4920949	Identifier	x		4920905	1					
ANR	4920950	Parameter	double y	601:45:18086:18093	4920905	2	True				
ANR	4920951	ParameterType	double		4920905	0					
ANR	4920952	Identifier	y		4920905	1					
ANR	4920953	CFGEntryNode	ENTRY		4920905		True				
ANR	4920954	CFGExitNode	EXIT		4920905		True				
ANR	4920955	Symbol	arg -> width		4920905						
ANR	4920956	Symbol	arg		4920905						
ANR	4920957	Symbol	x		4920905						
ANR	4920958	Symbol	arg -> x2		4920905						
ANR	4920959	Symbol	y		4920905						
ANR	4920960	Symbol	arg -> x1		4920905						
ANR	4920961	Symbol	line_check		4920905						
ANR	4920962	Symbol	arg -> y2		4920905						
ANR	4920963	Symbol	arg -> y1		4920905						
ANR	4920964	Symbol	* arg		4920905						
ANR	4920965	Function	check_line	606:0:18182:18820							
ANR	4920966	FunctionDef	"check_line (const struct arg * arg , double x , double y)"		4920965	0					
ANR	4920967	CompoundStatement		608:0:18247:18820	4920965	0					
ANR	4920968	IfStatement	"if ( line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , FILTER_WIDTH ) )"		4920965	0					
ANR	4920969	Condition	"line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , FILTER_WIDTH )"	612:7:18411:18497	4920965	0	True				
ANR	4920970	CallExpression	"line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , FILTER_WIDTH )"		4920965	0					
ANR	4920971	Callee	line_check		4920965	0					
ANR	4920972	Identifier	line_check		4920965	0					
ANR	4920973	ArgumentList	x		4920965	1					
ANR	4920974	Argument	x		4920965	0					
ANR	4920975	Identifier	x		4920965	0					
ANR	4920976	Argument	y		4920965	1					
ANR	4920977	Identifier	y		4920965	0					
ANR	4920978	Argument	arg -> x1		4920965	2					
ANR	4920979	PtrMemberAccess	arg -> x1		4920965	0					
ANR	4920980	Identifier	arg		4920965	0					
ANR	4920981	Identifier	x1		4920965	1					
ANR	4920982	Argument	arg -> y1		4920965	3					
ANR	4920983	PtrMemberAccess	arg -> y1		4920965	0					
ANR	4920984	Identifier	arg		4920965	0					
ANR	4920985	Identifier	y1		4920965	1					
ANR	4920986	Argument	arg -> x2		4920965	4					
ANR	4920987	PtrMemberAccess	arg -> x2		4920965	0					
ANR	4920988	Identifier	arg		4920965	0					
ANR	4920989	Identifier	x2		4920965	1					
ANR	4920990	Argument	arg -> y2		4920965	5					
ANR	4920991	PtrMemberAccess	arg -> y2		4920965	0					
ANR	4920992	Identifier	arg		4920965	0					
ANR	4920993	Identifier	y2		4920965	1					
ANR	4920994	Argument	arg -> width / 2		4920965	6					
ANR	4920995	MultiplicativeExpression	arg -> width / 2		4920965	0		/			
ANR	4920996	PtrMemberAccess	arg -> width		4920965	0					
ANR	4920997	Identifier	arg		4920965	0					
ANR	4920998	Identifier	width		4920965	1					
ANR	4920999	PrimaryExpression	2		4920965	1					
ANR	4921000	Argument	FILTER_WIDTH		4920965	7					
ANR	4921001	Identifier	FILTER_WIDTH		4920965	0					
ANR	4921002	CompoundStatement		7:3:255:255	4920965	1					
ANR	4921003	IfStatement	"if ( arg -> width > 2 * FILTER_WIDTH && line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , - FILTER_WIDTH ) )"		4920965	0					
ANR	4921004	Condition	"arg -> width > 2 * FILTER_WIDTH && line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , - FILTER_WIDTH )"	618:10:18617:18751	4920965	0	True				
ANR	4921005	AndExpression	"arg -> width > 2 * FILTER_WIDTH && line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , - FILTER_WIDTH )"		4920965	0		&&			
ANR	4921006	RelationalExpression	arg -> width > 2 * FILTER_WIDTH		4920965	0		>			
ANR	4921007	PtrMemberAccess	arg -> width		4920965	0					
ANR	4921008	Identifier	arg		4920965	0					
ANR	4921009	Identifier	width		4920965	1					
ANR	4921010	MultiplicativeExpression	2 * FILTER_WIDTH		4920965	1		*			
ANR	4921011	PrimaryExpression	2		4920965	0					
ANR	4921012	Identifier	FILTER_WIDTH		4920965	1					
ANR	4921013	CallExpression	"line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , - FILTER_WIDTH )"		4920965	1					
ANR	4921014	Callee	line_check		4920965	0					
ANR	4921015	Identifier	line_check		4920965	0					
ANR	4921016	ArgumentList	x		4920965	1					
ANR	4921017	Argument	x		4920965	0					
ANR	4921018	Identifier	x		4920965	0					
ANR	4921019	Argument	y		4920965	1					
ANR	4921020	Identifier	y		4920965	0					
ANR	4921021	Argument	arg -> x1		4920965	2					
ANR	4921022	PtrMemberAccess	arg -> x1		4920965	0					
ANR	4921023	Identifier	arg		4920965	0					
ANR	4921024	Identifier	x1		4920965	1					
ANR	4921025	Argument	arg -> y1		4920965	3					
ANR	4921026	PtrMemberAccess	arg -> y1		4920965	0					
ANR	4921027	Identifier	arg		4920965	0					
ANR	4921028	Identifier	y1		4920965	1					
ANR	4921029	Argument	arg -> x2		4920965	4					
ANR	4921030	PtrMemberAccess	arg -> x2		4920965	0					
ANR	4921031	Identifier	arg		4920965	0					
ANR	4921032	Identifier	x2		4920965	1					
ANR	4921033	Argument	arg -> y2		4920965	5					
ANR	4921034	PtrMemberAccess	arg -> y2		4920965	0					
ANR	4921035	Identifier	arg		4920965	0					
ANR	4921036	Identifier	y2		4920965	1					
ANR	4921037	Argument	arg -> width / 2		4920965	6					
ANR	4921038	MultiplicativeExpression	arg -> width / 2		4920965	0		/			
ANR	4921039	PtrMemberAccess	arg -> width		4920965	0					
ANR	4921040	Identifier	arg		4920965	0					
ANR	4921041	Identifier	width		4920965	1					
ANR	4921042	PrimaryExpression	2		4920965	1					
ANR	4921043	Argument	- FILTER_WIDTH		4920965	7					
ANR	4921044	UnaryOperationExpression	- FILTER_WIDTH		4920965	0					
ANR	4921045	UnaryOperator	-		4920965	0					
ANR	4921046	Identifier	FILTER_WIDTH		4920965	1					
ANR	4921047	ReturnStatement	return INSIDE ;	621:9:18763:18776	4920965	1	True				
ANR	4921048	Identifier	INSIDE		4920965	0					
ANR	4921049	ReturnStatement	return 0 ;	623:6:18785:18793	4920965	1	True				
ANR	4921050	PrimaryExpression	0		4920965	0					
ANR	4921051	ReturnStatement	return OUTSIDE ;	626:3:18804:18818	4920965	1	True				
ANR	4921052	Identifier	OUTSIDE		4920965	0					
ANR	4921053	ReturnType	static int		4920965	1					
ANR	4921054	Identifier	check_line		4920965	2					
ANR	4921055	ParameterList	"const struct arg * arg , double x , double y"		4920965	3					
ANR	4921056	Parameter	const struct arg * arg	607:11:18204:18224	4920965	0	True				
ANR	4921057	ParameterType	const struct arg *		4920965	0					
ANR	4921058	Identifier	arg		4920965	1					
ANR	4921059	Parameter	double x	607:34:18227:18234	4920965	1	True				
ANR	4921060	ParameterType	double		4920965	0					
ANR	4921061	Identifier	x		4920965	1					
ANR	4921062	Parameter	double y	607:44:18237:18244	4920965	2	True				
ANR	4921063	ParameterType	double		4920965	0					
ANR	4921064	Identifier	y		4920965	1					
ANR	4921065	CFGEntryNode	ENTRY		4920965		True				
ANR	4921066	CFGExitNode	EXIT		4920965		True				
ANR	4921067	Symbol	arg -> width		4920965						
ANR	4921068	Symbol	arg		4920965						
ANR	4921069	Symbol	x		4920965						
ANR	4921070	Symbol	arg -> x2		4920965						
ANR	4921071	Symbol	y		4920965						
ANR	4921072	Symbol	arg -> y2		4920965						
ANR	4921073	Symbol	line_check		4920965						
ANR	4921074	Symbol	arg -> x1		4920965						
ANR	4921075	Symbol	arg -> y1		4920965						
ANR	4921076	Symbol	FILTER_WIDTH		4920965						
ANR	4921077	Symbol	OUTSIDE		4920965						
ANR	4921078	Symbol	* arg		4920965						
ANR	4921079	Symbol	INSIDE		4920965						
ANR	4921080	ClassDef	<unnamed>	629:13:18836:19320							
ANR	4921081	DeclStmt									
ANR	4921082	Decl							const char	const char *	name
ANR	4921083	DeclStmt									
ANR	4921084	Decl								 [ ]	shape_defs
ANR	4921085	Function	shape_of	653:0:19389:19869							
ANR	4921086	FunctionDef	"shape_of (const char * arg , double width , int f)"		4921085	0					
ANR	4921087	CompoundStatement		655:0:19456:19869	4921085	0					
ANR	4921088	IdentifierDeclStatement	unsigned int i ;	656:3:19461:19475	4921085	0	True				
ANR	4921089	IdentifierDecl	i		4921085	0					
ANR	4921090	IdentifierDeclType	unsigned int		4921085	0					
ANR	4921091	Identifier	i		4921085	1					
ANR	4921092	ForStatement	for ( i = 0 ; i < shape_count ; ++ i )		4921085	1					
ANR	4921093	ForInit	i = 0 ;	658:8:19486:19489	4921085	0	True				
ANR	4921094	AssignmentExpression	i = 0		4921085	0		=			
ANR	4921095	Identifier	i		4921085	0					
ANR	4921096	PrimaryExpression	0		4921085	1					
ANR	4921097	Condition	i < shape_count	658:13:19491:19503	4921085	1	True				
ANR	4921098	RelationalExpression	i < shape_count		4921085	0		<			
ANR	4921099	Identifier	i		4921085	0					
ANR	4921100	Identifier	shape_count		4921085	1					
ANR	4921101	UnaryExpression	++ i	658:28:19506:19508	4921085	2	True				
ANR	4921102	IncDec	++		4921085	0					
ANR	4921103	Identifier	i		4921085	1					
ANR	4921104	IfStatement	"if ( strcmp ( shape_defs [ i ] . name , arg ) == 0 )"		4921085	3					
ANR	4921105	Condition	"strcmp ( shape_defs [ i ] . name , arg ) == 0"	658:37:19515:19550	4921085	0	True				
ANR	4921106	EqualityExpression	"strcmp ( shape_defs [ i ] . name , arg ) == 0"		4921085	0		==			
ANR	4921107	CallExpression	"strcmp ( shape_defs [ i ] . name , arg )"		4921085	0					
ANR	4921108	Callee	strcmp		4921085	0					
ANR	4921109	Identifier	strcmp		4921085	0					
ANR	4921110	ArgumentList	shape_defs [ i ] . name		4921085	1					
ANR	4921111	Argument	shape_defs [ i ] . name		4921085	0					
ANR	4921112	MemberAccess	shape_defs [ i ] . name		4921085	0					
ANR	4921113	ArrayIndexing	shape_defs [ i ]		4921085	0					
ANR	4921114	Identifier	shape_defs		4921085	0					
ANR	4921115	Identifier	i		4921085	1					
ANR	4921116	Identifier	name		4921085	1					
ANR	4921117	Argument	arg		4921085	1					
ANR	4921118	Identifier	arg		4921085	0					
ANR	4921119	PrimaryExpression	0		4921085	1					
ANR	4921120	CompoundStatement		6:6:107:162	4921085	1					
ANR	4921121	IdentifierDeclStatement	shape_fn_ptr fn = shape_defs [ i ] . function [ width != 0 ] [ f ] ;	660:6:19564:19619	4921085	0	True				
ANR	4921122	IdentifierDecl	fn = shape_defs [ i ] . function [ width != 0 ] [ f ]		4921085	0					
ANR	4921123	IdentifierDeclType	shape_fn_ptr		4921085	0					
ANR	4921124	Identifier	fn		4921085	1					
ANR	4921125	AssignmentExpression	fn = shape_defs [ i ] . function [ width != 0 ] [ f ]		4921085	2		=			
ANR	4921126	Identifier	fn		4921085	0					
ANR	4921127	ArrayIndexing	shape_defs [ i ] . function [ width != 0 ] [ f ]		4921085	1					
ANR	4921128	ArrayIndexing	shape_defs [ i ] . function [ width != 0 ]		4921085	0					
ANR	4921129	MemberAccess	shape_defs [ i ] . function		4921085	0					
ANR	4921130	ArrayIndexing	shape_defs [ i ]		4921085	0					
ANR	4921131	Identifier	shape_defs		4921085	0					
ANR	4921132	Identifier	i		4921085	1					
ANR	4921133	Identifier	function		4921085	1					
ANR	4921134	EqualityExpression	width != 0		4921085	1		!=			
ANR	4921135	Identifier	width		4921085	0					
ANR	4921136	PrimaryExpression	0		4921085	1					
ANR	4921137	Identifier	f		4921085	1					
ANR	4921138	IfStatement	if ( fn != NULL )		4921085	1					
ANR	4921139	Condition	fn != NULL	662:10:19632:19641	4921085	0	True				
ANR	4921140	EqualityExpression	fn != NULL		4921085	0		!=			
ANR	4921141	Identifier	fn		4921085	0					
ANR	4921142	Identifier	NULL		4921085	1					
ANR	4921143	ReturnStatement	return fn ;	663:9:19653:19662	4921085	1	True				
ANR	4921144	Identifier	fn		4921085	0					
ANR	4921145	ExpressionStatement	"fprintf ( stderr , ""genpng: %s %s not supported\\n"" , width == 0 ? ""filled"" : ""unfilled"" , arg )"	665:6:19671:19769	4921085	2	True				
ANR	4921146	CallExpression	"fprintf ( stderr , ""genpng: %s %s not supported\\n"" , width == 0 ? ""filled"" : ""unfilled"" , arg )"		4921085	0					
ANR	4921147	Callee	fprintf		4921085	0					
ANR	4921148	Identifier	fprintf		4921085	0					
ANR	4921149	ArgumentList	stderr		4921085	1					
ANR	4921150	Argument	stderr		4921085	0					
ANR	4921151	Identifier	stderr		4921085	0					
ANR	4921152	Argument	"""genpng: %s %s not supported\\n"""		4921085	1					
ANR	4921153	PrimaryExpression	"""genpng: %s %s not supported\\n"""		4921085	0					
ANR	4921154	Argument	"width == 0 ? ""filled"" : ""unfilled"""		4921085	2					
ANR	4921155	ConditionalExpression	"width == 0 ? ""filled"" : ""unfilled"""		4921085	0					
ANR	4921156	Condition	width == 0		4921085	0					
ANR	4921157	EqualityExpression	width == 0		4921085	0		==			
ANR	4921158	Identifier	width		4921085	0					
ANR	4921159	PrimaryExpression	0		4921085	1					
ANR	4921160	PrimaryExpression	"""filled"""		4921085	1					
ANR	4921161	PrimaryExpression	"""unfilled"""		4921085	2					
ANR	4921162	Argument	arg		4921085	3					
ANR	4921163	Identifier	arg		4921085	0					
ANR	4921164	ExpressionStatement	exit ( 1 )	667:6:19777:19784	4921085	3	True				
ANR	4921165	CallExpression	exit ( 1 )		4921085	0					
ANR	4921166	Callee	exit		4921085	0					
ANR	4921167	Identifier	exit		4921085	0					
ANR	4921168	ArgumentList	1		4921085	1					
ANR	4921169	Argument	1		4921085	0					
ANR	4921170	PrimaryExpression	1		4921085	0					
ANR	4921171	ExpressionStatement	"fprintf ( stderr , ""genpng: %s: not a valid shape name\\n"" , arg )"	670:3:19795:19855	4921085	2	True				
ANR	4921172	CallExpression	"fprintf ( stderr , ""genpng: %s: not a valid shape name\\n"" , arg )"		4921085	0					
ANR	4921173	Callee	fprintf		4921085	0					
ANR	4921174	Identifier	fprintf		4921085	0					
ANR	4921175	ArgumentList	stderr		4921085	1					
ANR	4921176	Argument	stderr		4921085	0					
ANR	4921177	Identifier	stderr		4921085	0					
ANR	4921178	Argument	"""genpng: %s: not a valid shape name\\n"""		4921085	1					
ANR	4921179	PrimaryExpression	"""genpng: %s: not a valid shape name\\n"""		4921085	0					
ANR	4921180	Argument	arg		4921085	2					
ANR	4921181	Identifier	arg		4921085	0					
ANR	4921182	ExpressionStatement	exit ( 1 )	671:3:19860:19867	4921085	3	True				
ANR	4921183	CallExpression	exit ( 1 )		4921085	0					
ANR	4921184	Callee	exit		4921085	0					
ANR	4921185	Identifier	exit		4921085	0					
ANR	4921186	ArgumentList	1		4921085	1					
ANR	4921187	Argument	1		4921085	0					
ANR	4921188	PrimaryExpression	1		4921085	0					
ANR	4921189	ReturnType	static shape_fn_ptr		4921085	1					
ANR	4921190	Identifier	shape_of		4921085	2					
ANR	4921191	ParameterList	"const char * arg , double width , int f"		4921085	3					
ANR	4921192	Parameter	const char * arg	654:9:19418:19432	4921085	0	True				
ANR	4921193	ParameterType	const char *		4921085	0					
ANR	4921194	Identifier	arg		4921085	1					
ANR	4921195	Parameter	double width	654:26:19435:19446	4921085	1	True				
ANR	4921196	ParameterType	double		4921085	0					
ANR	4921197	Identifier	width		4921085	1					
ANR	4921198	Parameter	int f	654:40:19449:19453	4921085	2	True				
ANR	4921199	ParameterType	int		4921085	0					
ANR	4921200	Identifier	f		4921085	1					
ANR	4921201	CFGEntryNode	ENTRY		4921085		True				
ANR	4921202	CFGExitNode	EXIT		4921085		True				
ANR	4921203	Symbol	strcmp		4921085						
ANR	4921204	Symbol	* * shape_defs		4921085						
ANR	4921205	Symbol	* * shape_defs [ i ] . function		4921085						
ANR	4921206	Symbol	* * i		4921085						
ANR	4921207	Symbol	NULL		4921085						
ANR	4921208	Symbol	* * width		4921085						
ANR	4921209	Symbol	f		4921085						
ANR	4921210	Symbol	fn		4921085						
ANR	4921211	Symbol	i		4921085						
ANR	4921212	Symbol	* shape_defs [ i ] . function		4921085						
ANR	4921213	Symbol	shape_count		4921085						
ANR	4921214	Symbol	shape_defs [ i ] . function		4921085						
ANR	4921215	Symbol	stderr		4921085						
ANR	4921216	Symbol	* width		4921085						
ANR	4921217	Symbol	* f		4921085						
ANR	4921218	Symbol	shape_defs [ i ] . name		4921085						
ANR	4921219	Symbol	* i		4921085						
ANR	4921220	Symbol	shape_defs		4921085						
ANR	4921221	Symbol	arg		4921085						
ANR	4921222	Symbol	* shape_defs		4921085						
ANR	4921223	Symbol	width		4921085						
ANR	4921224	Symbol	* * * i		4921085						
ANR	4921225	Symbol	* * * shape_defs		4921085						
ANR	4921226	Function	parse_arg	674:0:19872:20336							
ANR	4921227	FunctionDef	"parse_arg (struct arg * arg , const char * * argv)"		4921226	0					
ANR	4921228	CompoundStatement		676:0:19945:20336	4921226	0					
ANR	4921229	ExpressionStatement	arg -> color = color_of ( argv [ 0 ] )	678:3:19999:20029	4921226	0	True				
ANR	4921230	AssignmentExpression	arg -> color = color_of ( argv [ 0 ] )		4921226	0		=			
ANR	4921231	PtrMemberAccess	arg -> color		4921226	0					
ANR	4921232	Identifier	arg		4921226	0					
ANR	4921233	Identifier	color		4921226	1					
ANR	4921234	CallExpression	color_of ( argv [ 0 ] )		4921226	1					
ANR	4921235	Callee	color_of		4921226	0					
ANR	4921236	Identifier	color_of		4921226	0					
ANR	4921237	ArgumentList	argv [ 0 ]		4921226	1					
ANR	4921238	Argument	argv [ 0 ]		4921226	0					
ANR	4921239	ArrayIndexing	argv [ 0 ]		4921226	0					
ANR	4921240	Identifier	argv		4921226	0					
ANR	4921241	PrimaryExpression	0		4921226	1					
ANR	4921242	ExpressionStatement	arg -> width = width_of ( argv [ 1 ] )	679:3:20034:20064	4921226	1	True				
ANR	4921243	AssignmentExpression	arg -> width = width_of ( argv [ 1 ] )		4921226	0		=			
ANR	4921244	PtrMemberAccess	arg -> width		4921226	0					
ANR	4921245	Identifier	arg		4921226	0					
ANR	4921246	Identifier	width		4921226	1					
ANR	4921247	CallExpression	width_of ( argv [ 1 ] )		4921226	1					
ANR	4921248	Callee	width_of		4921226	0					
ANR	4921249	Identifier	width_of		4921226	0					
ANR	4921250	ArgumentList	argv [ 1 ]		4921226	1					
ANR	4921251	Argument	argv [ 1 ]		4921226	0					
ANR	4921252	ArrayIndexing	argv [ 1 ]		4921226	0					
ANR	4921253	Identifier	argv		4921226	0					
ANR	4921254	PrimaryExpression	1		4921226	1					
ANR	4921255	ExpressionStatement	"arg -> inside_fn = shape_of ( argv [ 2 ] , arg -> width , FN_INSIDE )"	680:3:20069:20126	4921226	2	True				
ANR	4921256	AssignmentExpression	"arg -> inside_fn = shape_of ( argv [ 2 ] , arg -> width , FN_INSIDE )"		4921226	0		=			
ANR	4921257	PtrMemberAccess	arg -> inside_fn		4921226	0					
ANR	4921258	Identifier	arg		4921226	0					
ANR	4921259	Identifier	inside_fn		4921226	1					
ANR	4921260	CallExpression	"shape_of ( argv [ 2 ] , arg -> width , FN_INSIDE )"		4921226	1					
ANR	4921261	Callee	shape_of		4921226	0					
ANR	4921262	Identifier	shape_of		4921226	0					
ANR	4921263	ArgumentList	argv [ 2 ]		4921226	1					
ANR	4921264	Argument	argv [ 2 ]		4921226	0					
ANR	4921265	ArrayIndexing	argv [ 2 ]		4921226	0					
ANR	4921266	Identifier	argv		4921226	0					
ANR	4921267	PrimaryExpression	2		4921226	1					
ANR	4921268	Argument	arg -> width		4921226	1					
ANR	4921269	PtrMemberAccess	arg -> width		4921226	0					
ANR	4921270	Identifier	arg		4921226	0					
ANR	4921271	Identifier	width		4921226	1					
ANR	4921272	Argument	FN_INSIDE		4921226	2					
ANR	4921273	Identifier	FN_INSIDE		4921226	0					
ANR	4921274	ExpressionStatement	"arg -> check_fn = shape_of ( argv [ 2 ] , arg -> width , FN_CHECK )"	681:3:20131:20186	4921226	3	True				
ANR	4921275	AssignmentExpression	"arg -> check_fn = shape_of ( argv [ 2 ] , arg -> width , FN_CHECK )"		4921226	0		=			
ANR	4921276	PtrMemberAccess	arg -> check_fn		4921226	0					
ANR	4921277	Identifier	arg		4921226	0					
ANR	4921278	Identifier	check_fn		4921226	1					
ANR	4921279	CallExpression	"shape_of ( argv [ 2 ] , arg -> width , FN_CHECK )"		4921226	1					
ANR	4921280	Callee	shape_of		4921226	0					
ANR	4921281	Identifier	shape_of		4921226	0					
ANR	4921282	ArgumentList	argv [ 2 ]		4921226	1					
ANR	4921283	Argument	argv [ 2 ]		4921226	0					
ANR	4921284	ArrayIndexing	argv [ 2 ]		4921226	0					
ANR	4921285	Identifier	argv		4921226	0					
ANR	4921286	PrimaryExpression	2		4921226	1					
ANR	4921287	Argument	arg -> width		4921226	1					
ANR	4921288	PtrMemberAccess	arg -> width		4921226	0					
ANR	4921289	Identifier	arg		4921226	0					
ANR	4921290	Identifier	width		4921226	1					
ANR	4921291	Argument	FN_CHECK		4921226	2					
ANR	4921292	Identifier	FN_CHECK		4921226	0					
ANR	4921293	ExpressionStatement	arg -> x1 = coordinate_of ( argv [ 3 ] )	682:3:20191:20223	4921226	4	True				
ANR	4921294	AssignmentExpression	arg -> x1 = coordinate_of ( argv [ 3 ] )		4921226	0		=			
ANR	4921295	PtrMemberAccess	arg -> x1		4921226	0					
ANR	4921296	Identifier	arg		4921226	0					
ANR	4921297	Identifier	x1		4921226	1					
ANR	4921298	CallExpression	coordinate_of ( argv [ 3 ] )		4921226	1					
ANR	4921299	Callee	coordinate_of		4921226	0					
ANR	4921300	Identifier	coordinate_of		4921226	0					
ANR	4921301	ArgumentList	argv [ 3 ]		4921226	1					
ANR	4921302	Argument	argv [ 3 ]		4921226	0					
ANR	4921303	ArrayIndexing	argv [ 3 ]		4921226	0					
ANR	4921304	Identifier	argv		4921226	0					
ANR	4921305	PrimaryExpression	3		4921226	1					
ANR	4921306	ExpressionStatement	arg -> y1 = coordinate_of ( argv [ 4 ] )	683:3:20228:20260	4921226	5	True				
ANR	4921307	AssignmentExpression	arg -> y1 = coordinate_of ( argv [ 4 ] )		4921226	0		=			
ANR	4921308	PtrMemberAccess	arg -> y1		4921226	0					
ANR	4921309	Identifier	arg		4921226	0					
ANR	4921310	Identifier	y1		4921226	1					
ANR	4921311	CallExpression	coordinate_of ( argv [ 4 ] )		4921226	1					
ANR	4921312	Callee	coordinate_of		4921226	0					
ANR	4921313	Identifier	coordinate_of		4921226	0					
ANR	4921314	ArgumentList	argv [ 4 ]		4921226	1					
ANR	4921315	Argument	argv [ 4 ]		4921226	0					
ANR	4921316	ArrayIndexing	argv [ 4 ]		4921226	0					
ANR	4921317	Identifier	argv		4921226	0					
ANR	4921318	PrimaryExpression	4		4921226	1					
ANR	4921319	ExpressionStatement	arg -> x2 = coordinate_of ( argv [ 5 ] )	684:3:20265:20297	4921226	6	True				
ANR	4921320	AssignmentExpression	arg -> x2 = coordinate_of ( argv [ 5 ] )		4921226	0		=			
ANR	4921321	PtrMemberAccess	arg -> x2		4921226	0					
ANR	4921322	Identifier	arg		4921226	0					
ANR	4921323	Identifier	x2		4921226	1					
ANR	4921324	CallExpression	coordinate_of ( argv [ 5 ] )		4921226	1					
ANR	4921325	Callee	coordinate_of		4921226	0					
ANR	4921326	Identifier	coordinate_of		4921226	0					
ANR	4921327	ArgumentList	argv [ 5 ]		4921226	1					
ANR	4921328	Argument	argv [ 5 ]		4921226	0					
ANR	4921329	ArrayIndexing	argv [ 5 ]		4921226	0					
ANR	4921330	Identifier	argv		4921226	0					
ANR	4921331	PrimaryExpression	5		4921226	1					
ANR	4921332	ExpressionStatement	arg -> y2 = coordinate_of ( argv [ 6 ] )	685:3:20302:20334	4921226	7	True				
ANR	4921333	AssignmentExpression	arg -> y2 = coordinate_of ( argv [ 6 ] )		4921226	0		=			
ANR	4921334	PtrMemberAccess	arg -> y2		4921226	0					
ANR	4921335	Identifier	arg		4921226	0					
ANR	4921336	Identifier	y2		4921226	1					
ANR	4921337	CallExpression	coordinate_of ( argv [ 6 ] )		4921226	1					
ANR	4921338	Callee	coordinate_of		4921226	0					
ANR	4921339	Identifier	coordinate_of		4921226	0					
ANR	4921340	ArgumentList	argv [ 6 ]		4921226	1					
ANR	4921341	Argument	argv [ 6 ]		4921226	0					
ANR	4921342	ArrayIndexing	argv [ 6 ]		4921226	0					
ANR	4921343	Identifier	argv		4921226	0					
ANR	4921344	PrimaryExpression	6		4921226	1					
ANR	4921345	ReturnType	static void		4921226	1					
ANR	4921346	Identifier	parse_arg		4921226	2					
ANR	4921347	ParameterList	"struct arg * arg , const char * * argv"		4921226	3					
ANR	4921348	Parameter	struct arg * arg	675:10:19894:19908	4921226	0	True				
ANR	4921349	ParameterType	struct arg *		4921226	0					
ANR	4921350	Identifier	arg		4921226	1					
ANR	4921351	Parameter	const char * * argv	675:27:19911:19927	4921226	1	True				
ANR	4921352	ParameterType	const char * *		4921226	0					
ANR	4921353	Identifier	argv		4921226	1					
ANR	4921354	CFGEntryNode	ENTRY		4921226		True				
ANR	4921355	CFGExitNode	EXIT		4921226		True				
ANR	4921356	Symbol	width_of		4921226						
ANR	4921357	Symbol	arg -> color		4921226						
ANR	4921358	Symbol	* argv		4921226						
ANR	4921359	Symbol	argv		4921226						
ANR	4921360	Symbol	coordinate_of		4921226						
ANR	4921361	Symbol	arg -> width		4921226						
ANR	4921362	Symbol	FN_INSIDE		4921226						
ANR	4921363	Symbol	arg		4921226						
ANR	4921364	Symbol	color_of		4921226						
ANR	4921365	Symbol	FN_CHECK		4921226						
ANR	4921366	Symbol	arg -> x2		4921226						
ANR	4921367	Symbol	arg -> inside_fn		4921226						
ANR	4921368	Symbol	arg -> x1		4921226						
ANR	4921369	Symbol	arg -> y2		4921226						
ANR	4921370	Symbol	arg -> y1		4921226						
ANR	4921371	Symbol	shape_of		4921226						
ANR	4921372	Symbol	arg -> check_fn		4921226						
ANR	4921373	Symbol	* arg		4921226						
ANR	4921374	Function	read_wh	688:0:20339:20683							
ANR	4921375	FunctionDef	"read_wh (const char * name , const char * str)"		4921374	0					
ANR	4921376	CompoundStatement		691:0:20437:20683	4921374	0					
ANR	4921377	IdentifierDeclStatement	char * ep = NULL ;	692:3:20442:20457	4921374	0	True				
ANR	4921378	IdentifierDecl	* ep = NULL		4921374	0					
ANR	4921379	IdentifierDeclType	char *		4921374	0					
ANR	4921380	Identifier	ep		4921374	1					
ANR	4921381	AssignmentExpression	* ep = NULL		4921374	2		=			
ANR	4921382	Identifier	NULL		4921374	0					
ANR	4921383	Identifier	NULL		4921374	1					
ANR	4921384	IdentifierDeclStatement	"unsigned long ul = strtoul ( str , & ep , 10 ) ;"	693:3:20462:20502	4921374	1	True				
ANR	4921385	IdentifierDecl	"ul = strtoul ( str , & ep , 10 )"		4921374	0					
ANR	4921386	IdentifierDeclType	unsigned long		4921374	0					
ANR	4921387	Identifier	ul		4921374	1					
ANR	4921388	AssignmentExpression	"ul = strtoul ( str , & ep , 10 )"		4921374	2		=			
ANR	4921389	Identifier	ul		4921374	0					
ANR	4921390	CallExpression	"strtoul ( str , & ep , 10 )"		4921374	1					
ANR	4921391	Callee	strtoul		4921374	0					
ANR	4921392	Identifier	strtoul		4921374	0					
ANR	4921393	ArgumentList	str		4921374	1					
ANR	4921394	Argument	str		4921374	0					
ANR	4921395	Identifier	str		4921374	0					
ANR	4921396	Argument	& ep		4921374	1					
ANR	4921397	UnaryOperationExpression	& ep		4921374	0					
ANR	4921398	UnaryOperator	&		4921374	0					
ANR	4921399	Identifier	ep		4921374	1					
ANR	4921400	Argument	10		4921374	2					
ANR	4921401	PrimaryExpression	10		4921374	0					
ANR	4921402	IfStatement	if ( ep != NULL && * ep == 0 && ul > 0 && ul <= 0x7fffffff )		4921374	2					
ANR	4921403	Condition	ep != NULL && * ep == 0 && ul > 0 && ul <= 0x7fffffff	695:7:20512:20563	4921374	0	True				
ANR	4921404	AndExpression	ep != NULL && * ep == 0 && ul > 0 && ul <= 0x7fffffff		4921374	0		&&			
ANR	4921405	EqualityExpression	ep != NULL		4921374	0		!=			
ANR	4921406	Identifier	ep		4921374	0					
ANR	4921407	Identifier	NULL		4921374	1					
ANR	4921408	AndExpression	* ep == 0 && ul > 0 && ul <= 0x7fffffff		4921374	1		&&			
ANR	4921409	EqualityExpression	* ep == 0		4921374	0		==			
ANR	4921410	UnaryOperationExpression	* ep		4921374	0					
ANR	4921411	UnaryOperator	*		4921374	0					
ANR	4921412	Identifier	ep		4921374	1					
ANR	4921413	PrimaryExpression	0		4921374	1					
ANR	4921414	AndExpression	ul > 0 && ul <= 0x7fffffff		4921374	1		&&			
ANR	4921415	RelationalExpression	ul > 0		4921374	0		>			
ANR	4921416	Identifier	ul		4921374	0					
ANR	4921417	PrimaryExpression	0		4921374	1					
ANR	4921418	RelationalExpression	ul <= 0x7fffffff		4921374	1		<=			
ANR	4921419	Identifier	ul		4921374	0					
ANR	4921420	PrimaryExpression	0x7fffffff		4921374	1					
ANR	4921421	ReturnStatement	return ( png_uint_32 ) ul ;	696:6:20572:20602	4921374	1	True				
ANR	4921422	CastExpression	( png_uint_32 ) ul		4921374	0					
ANR	4921423	CastTarget	png_uint_32		4921374	0					
ANR	4921424	Identifier	ul		4921374	1					
ANR	4921425	ExpressionStatement	"fprintf ( stderr , ""genpng: %s: invalid number %s\\n"" , name , str )"	698:3:20608:20669	4921374	3	True				
ANR	4921426	CallExpression	"fprintf ( stderr , ""genpng: %s: invalid number %s\\n"" , name , str )"		4921374	0					
ANR	4921427	Callee	fprintf		4921374	0					
ANR	4921428	Identifier	fprintf		4921374	0					
ANR	4921429	ArgumentList	stderr		4921374	1					
ANR	4921430	Argument	stderr		4921374	0					
ANR	4921431	Identifier	stderr		4921374	0					
ANR	4921432	Argument	"""genpng: %s: invalid number %s\\n"""		4921374	1					
ANR	4921433	PrimaryExpression	"""genpng: %s: invalid number %s\\n"""		4921374	0					
ANR	4921434	Argument	name		4921374	2					
ANR	4921435	Identifier	name		4921374	0					
ANR	4921436	Argument	str		4921374	3					
ANR	4921437	Identifier	str		4921374	0					
ANR	4921438	ExpressionStatement	exit ( 1 )	699:3:20674:20681	4921374	4	True				
ANR	4921439	CallExpression	exit ( 1 )		4921374	0					
ANR	4921440	Callee	exit		4921374	0					
ANR	4921441	Identifier	exit		4921374	0					
ANR	4921442	ArgumentList	1		4921374	1					
ANR	4921443	Argument	1		4921374	0					
ANR	4921444	PrimaryExpression	1		4921374	0					
ANR	4921445	ReturnType	static png_uint_32		4921374	1					
ANR	4921446	Identifier	read_wh		4921374	2					
ANR	4921447	ParameterList	"const char * name , const char * str"		4921374	3					
ANR	4921448	Parameter	const char * name	689:8:20366:20381	4921374	0	True				
ANR	4921449	ParameterType	const char *		4921374	0					
ANR	4921450	Identifier	name		4921374	1					
ANR	4921451	Parameter	const char * str	689:26:20384:20398	4921374	1	True				
ANR	4921452	ParameterType	const char *		4921374	0					
ANR	4921453	Identifier	str		4921374	1					
ANR	4921454	CFGEntryNode	ENTRY		4921374		True				
ANR	4921455	CFGExitNode	EXIT		4921374		True				
ANR	4921456	Symbol	str		4921374						
ANR	4921457	Symbol	* ep		4921374						
ANR	4921458	Symbol	NULL		4921374						
ANR	4921459	Symbol	& ep		4921374						
ANR	4921460	Symbol	ul		4921374						
ANR	4921461	Symbol	name		4921374						
ANR	4921462	Symbol	strtoul		4921374						
ANR	4921463	Symbol	ep		4921374						
ANR	4921464	Symbol	stderr		4921374						
ANR	4921465	Function	pixel	702:0:20686:21851							
ANR	4921466	FunctionDef	"pixel (png_uint_16p p , struct arg * args , int nargs , double x , double y)"		4921465	0					
ANR	4921467	CompoundStatement		704:0:20769:21851	4921465	0					
ANR	4921468	IdentifierDeclStatement	"double r = 0 , g = 0 , b = 0 , a = 0 ;"	708:3:20889:20914	4921465	0	True				
ANR	4921469	IdentifierDecl	r = 0		4921465	0					
ANR	4921470	IdentifierDeclType	double		4921465	0					
ANR	4921471	Identifier	r		4921465	1					
ANR	4921472	AssignmentExpression	r = 0		4921465	2		=			
ANR	4921473	Identifier	r		4921465	0					
ANR	4921474	PrimaryExpression	0		4921465	1					
ANR	4921475	IdentifierDecl	g = 0		4921465	1					
ANR	4921476	IdentifierDeclType	double		4921465	0					
ANR	4921477	Identifier	g		4921465	1					
ANR	4921478	AssignmentExpression	g = 0		4921465	2		=			
ANR	4921479	Identifier	g		4921465	0					
ANR	4921480	PrimaryExpression	0		4921465	1					
ANR	4921481	IdentifierDecl	b = 0		4921465	2					
ANR	4921482	IdentifierDeclType	double		4921465	0					
ANR	4921483	Identifier	b		4921465	1					
ANR	4921484	AssignmentExpression	b = 0		4921465	2		=			
ANR	4921485	Identifier	b		4921465	0					
ANR	4921486	PrimaryExpression	0		4921465	1					
ANR	4921487	IdentifierDecl	a = 0		4921465	3					
ANR	4921488	IdentifierDeclType	double		4921465	0					
ANR	4921489	Identifier	a		4921465	1					
ANR	4921490	AssignmentExpression	a = 0		4921465	2		=			
ANR	4921491	Identifier	a		4921465	0					
ANR	4921492	PrimaryExpression	0		4921465	1					
ANR	4921493	WhileStatement	while ( -- nargs >= 0 && a != 1 )		4921465	1					
ANR	4921494	Condition	-- nargs >= 0 && a != 1	710:10:20927:20948	4921465	0	True				
ANR	4921495	AndExpression	-- nargs >= 0 && a != 1		4921465	0		&&			
ANR	4921496	RelationalExpression	-- nargs >= 0		4921465	0		>=			
ANR	4921497	UnaryExpression	-- nargs		4921465	0					
ANR	4921498	IncDec	--		4921465	0					
ANR	4921499	Identifier	nargs		4921465	1					
ANR	4921500	PrimaryExpression	0		4921465	1					
ANR	4921501	EqualityExpression	a != 1		4921465	1		!=			
ANR	4921502	Identifier	a		4921465	0					
ANR	4921503	PrimaryExpression	1		4921465	1					
ANR	4921504	CompoundStatement		12:6:304:361	4921465	1					
ANR	4921505	IdentifierDeclStatement	"const double alpha = alpha_calc ( args + nargs , x , y ) * ( 1 - a ) ;"	715:6:21074:21131	4921465	0	True				
ANR	4921506	IdentifierDecl	"alpha = alpha_calc ( args + nargs , x , y ) * ( 1 - a )"		4921465	0					
ANR	4921507	IdentifierDeclType	const double		4921465	0					
ANR	4921508	Identifier	alpha		4921465	1					
ANR	4921509	AssignmentExpression	"alpha = alpha_calc ( args + nargs , x , y ) * ( 1 - a )"		4921465	2		=			
ANR	4921510	Identifier	alpha		4921465	0					
ANR	4921511	MultiplicativeExpression	"alpha_calc ( args + nargs , x , y ) * ( 1 - a )"		4921465	1		*			
ANR	4921512	CallExpression	"alpha_calc ( args + nargs , x , y )"		4921465	0					
ANR	4921513	Callee	alpha_calc		4921465	0					
ANR	4921514	Identifier	alpha_calc		4921465	0					
ANR	4921515	ArgumentList	args + nargs		4921465	1					
ANR	4921516	Argument	args + nargs		4921465	0					
ANR	4921517	AdditiveExpression	args + nargs		4921465	0		+			
ANR	4921518	Identifier	args		4921465	0					
ANR	4921519	Identifier	nargs		4921465	1					
ANR	4921520	Argument	x		4921465	1					
ANR	4921521	Identifier	x		4921465	0					
ANR	4921522	Argument	y		4921465	2					
ANR	4921523	Identifier	y		4921465	0					
ANR	4921524	AdditiveExpression	1 - a		4921465	1		-			
ANR	4921525	PrimaryExpression	1		4921465	0					
ANR	4921526	Identifier	a		4921465	1					
ANR	4921527	ExpressionStatement	r += alpha * args [ nargs ] . color -> red	717:6:21140:21175	4921465	1	True				
ANR	4921528	AssignmentExpression	r += alpha * args [ nargs ] . color -> red		4921465	0		+=			
ANR	4921529	Identifier	r		4921465	0					
ANR	4921530	MultiplicativeExpression	alpha * args [ nargs ] . color -> red		4921465	1		*			
ANR	4921531	Identifier	alpha		4921465	0					
ANR	4921532	PtrMemberAccess	args [ nargs ] . color -> red		4921465	1					
ANR	4921533	MemberAccess	args [ nargs ] . color		4921465	0					
ANR	4921534	ArrayIndexing	args [ nargs ]		4921465	0					
ANR	4921535	Identifier	args		4921465	0					
ANR	4921536	Identifier	nargs		4921465	1					
ANR	4921537	Identifier	color		4921465	1					
ANR	4921538	Identifier	red		4921465	1					
ANR	4921539	ExpressionStatement	g += alpha * args [ nargs ] . color -> green	718:6:21183:21220	4921465	2	True				
ANR	4921540	AssignmentExpression	g += alpha * args [ nargs ] . color -> green		4921465	0		+=			
ANR	4921541	Identifier	g		4921465	0					
ANR	4921542	MultiplicativeExpression	alpha * args [ nargs ] . color -> green		4921465	1		*			
ANR	4921543	Identifier	alpha		4921465	0					
ANR	4921544	PtrMemberAccess	args [ nargs ] . color -> green		4921465	1					
ANR	4921545	MemberAccess	args [ nargs ] . color		4921465	0					
ANR	4921546	ArrayIndexing	args [ nargs ]		4921465	0					
ANR	4921547	Identifier	args		4921465	0					
ANR	4921548	Identifier	nargs		4921465	1					
ANR	4921549	Identifier	color		4921465	1					
ANR	4921550	Identifier	green		4921465	1					
ANR	4921551	ExpressionStatement	b += alpha * args [ nargs ] . color -> blue	719:6:21228:21264	4921465	3	True				
ANR	4921552	AssignmentExpression	b += alpha * args [ nargs ] . color -> blue		4921465	0		+=			
ANR	4921553	Identifier	b		4921465	0					
ANR	4921554	MultiplicativeExpression	alpha * args [ nargs ] . color -> blue		4921465	1		*			
ANR	4921555	Identifier	alpha		4921465	0					
ANR	4921556	PtrMemberAccess	args [ nargs ] . color -> blue		4921465	1					
ANR	4921557	MemberAccess	args [ nargs ] . color		4921465	0					
ANR	4921558	ArrayIndexing	args [ nargs ]		4921465	0					
ANR	4921559	Identifier	args		4921465	0					
ANR	4921560	Identifier	nargs		4921465	1					
ANR	4921561	Identifier	color		4921465	1					
ANR	4921562	Identifier	blue		4921465	1					
ANR	4921563	ExpressionStatement	a += alpha	720:6:21272:21282	4921465	4	True				
ANR	4921564	AssignmentExpression	a += alpha		4921465	0		+=			
ANR	4921565	Identifier	a		4921465	0					
ANR	4921566	Identifier	alpha		4921465	1					
ANR	4921567	IfStatement	if ( a > 0 )		4921465	2					
ANR	4921568	Condition	a > 0	726:7:21414:21418	4921465	0	True				
ANR	4921569	RelationalExpression	a > 0		4921465	0		>			
ANR	4921570	Identifier	a		4921465	0					
ANR	4921571	PrimaryExpression	0		4921465	1					
ANR	4921572	CompoundStatement		24:3:654:654	4921465	1					
ANR	4921573	IfStatement	if ( a > 1 )		4921465	0					
ANR	4921574	Condition	a > 1	728:10:21436:21440	4921465	0	True				
ANR	4921575	RelationalExpression	a > 1		4921465	0		>			
ANR	4921576	Identifier	a		4921465	0					
ANR	4921577	PrimaryExpression	1		4921465	1					
ANR	4921578	CompoundStatement		26:6:679:679	4921465	1					
ANR	4921579	IfStatement	if ( r > 1 )		4921465	0					
ANR	4921580	Condition	r > 1	730:13:21464:21468	4921465	0	True				
ANR	4921581	RelationalExpression	r > 1		4921465	0		>			
ANR	4921582	Identifier	r		4921465	0					
ANR	4921583	PrimaryExpression	1		4921465	1					
ANR	4921584	ExpressionStatement	r = 1	730:20:21471:21476	4921465	1	True				
ANR	4921585	AssignmentExpression	r = 1		4921465	0		=			
ANR	4921586	Identifier	r		4921465	0					
ANR	4921587	PrimaryExpression	1		4921465	1					
ANR	4921588	IfStatement	if ( g > 1 )		4921465	1					
ANR	4921589	Condition	g > 1	731:13:21491:21495	4921465	0	True				
ANR	4921590	RelationalExpression	g > 1		4921465	0		>			
ANR	4921591	Identifier	g		4921465	0					
ANR	4921592	PrimaryExpression	1		4921465	1					
ANR	4921593	ExpressionStatement	g = 1	731:20:21498:21503	4921465	1	True				
ANR	4921594	AssignmentExpression	g = 1		4921465	0		=			
ANR	4921595	Identifier	g		4921465	0					
ANR	4921596	PrimaryExpression	1		4921465	1					
ANR	4921597	IfStatement	if ( b > 1 )		4921465	2					
ANR	4921598	Condition	b > 1	732:13:21518:21522	4921465	0	True				
ANR	4921599	RelationalExpression	b > 1		4921465	0		>			
ANR	4921600	Identifier	b		4921465	0					
ANR	4921601	PrimaryExpression	1		4921465	1					
ANR	4921602	ExpressionStatement	b = 1	732:20:21525:21530	4921465	1	True				
ANR	4921603	AssignmentExpression	b = 1		4921465	0		=			
ANR	4921604	Identifier	b		4921465	0					
ANR	4921605	PrimaryExpression	1		4921465	1					
ANR	4921606	ExpressionStatement	a = 1	733:9:21541:21546	4921465	3	True				
ANR	4921607	AssignmentExpression	a = 1		4921465	0		=			
ANR	4921608	Identifier	a		4921465	0					
ANR	4921609	PrimaryExpression	1		4921465	1					
ANR	4921610	ExpressionStatement	p [ 0 ] = ( png_uint_16 ) round ( r * 65535 )	737:6:21598:21642	4921465	1	True				
ANR	4921611	AssignmentExpression	p [ 0 ] = ( png_uint_16 ) round ( r * 65535 )		4921465	0		=			
ANR	4921612	ArrayIndexing	p [ 0 ]		4921465	0					
ANR	4921613	Identifier	p		4921465	0					
ANR	4921614	PrimaryExpression	0		4921465	1					
ANR	4921615	CastExpression	( png_uint_16 ) round ( r * 65535 )		4921465	1					
ANR	4921616	CastTarget	png_uint_16		4921465	0					
ANR	4921617	CallExpression	round ( r * 65535 )		4921465	1					
ANR	4921618	Callee	round		4921465	0					
ANR	4921619	Identifier	round		4921465	0					
ANR	4921620	ArgumentList	r * 65535		4921465	1					
ANR	4921621	Argument	r * 65535		4921465	0					
ANR	4921622	MultiplicativeExpression	r * 65535		4921465	0		*			
ANR	4921623	Identifier	r		4921465	0					
ANR	4921624	PrimaryExpression	65535		4921465	1					
ANR	4921625	ExpressionStatement	p [ 1 ] = ( png_uint_16 ) round ( g * 65535 )	738:6:21650:21694	4921465	2	True				
ANR	4921626	AssignmentExpression	p [ 1 ] = ( png_uint_16 ) round ( g * 65535 )		4921465	0		=			
ANR	4921627	ArrayIndexing	p [ 1 ]		4921465	0					
ANR	4921628	Identifier	p		4921465	0					
ANR	4921629	PrimaryExpression	1		4921465	1					
ANR	4921630	CastExpression	( png_uint_16 ) round ( g * 65535 )		4921465	1					
ANR	4921631	CastTarget	png_uint_16		4921465	0					
ANR	4921632	CallExpression	round ( g * 65535 )		4921465	1					
ANR	4921633	Callee	round		4921465	0					
ANR	4921634	Identifier	round		4921465	0					
ANR	4921635	ArgumentList	g * 65535		4921465	1					
ANR	4921636	Argument	g * 65535		4921465	0					
ANR	4921637	MultiplicativeExpression	g * 65535		4921465	0		*			
ANR	4921638	Identifier	g		4921465	0					
ANR	4921639	PrimaryExpression	65535		4921465	1					
ANR	4921640	ExpressionStatement	p [ 2 ] = ( png_uint_16 ) round ( b * 65535 )	739:6:21702:21746	4921465	3	True				
ANR	4921641	AssignmentExpression	p [ 2 ] = ( png_uint_16 ) round ( b * 65535 )		4921465	0		=			
ANR	4921642	ArrayIndexing	p [ 2 ]		4921465	0					
ANR	4921643	Identifier	p		4921465	0					
ANR	4921644	PrimaryExpression	2		4921465	1					
ANR	4921645	CastExpression	( png_uint_16 ) round ( b * 65535 )		4921465	1					
ANR	4921646	CastTarget	png_uint_16		4921465	0					
ANR	4921647	CallExpression	round ( b * 65535 )		4921465	1					
ANR	4921648	Callee	round		4921465	0					
ANR	4921649	Identifier	round		4921465	0					
ANR	4921650	ArgumentList	b * 65535		4921465	1					
ANR	4921651	Argument	b * 65535		4921465	0					
ANR	4921652	MultiplicativeExpression	b * 65535		4921465	0		*			
ANR	4921653	Identifier	b		4921465	0					
ANR	4921654	PrimaryExpression	65535		4921465	1					
ANR	4921655	ExpressionStatement	p [ 3 ] = ( png_uint_16 ) round ( a * 65535 )	740:6:21754:21798	4921465	4	True				
ANR	4921656	AssignmentExpression	p [ 3 ] = ( png_uint_16 ) round ( a * 65535 )		4921465	0		=			
ANR	4921657	ArrayIndexing	p [ 3 ]		4921465	0					
ANR	4921658	Identifier	p		4921465	0					
ANR	4921659	PrimaryExpression	3		4921465	1					
ANR	4921660	CastExpression	( png_uint_16 ) round ( a * 65535 )		4921465	1					
ANR	4921661	CastTarget	png_uint_16		4921465	0					
ANR	4921662	CallExpression	round ( a * 65535 )		4921465	1					
ANR	4921663	Callee	round		4921465	0					
ANR	4921664	Identifier	round		4921465	0					
ANR	4921665	ArgumentList	a * 65535		4921465	1					
ANR	4921666	Argument	a * 65535		4921465	0					
ANR	4921667	MultiplicativeExpression	a * 65535		4921465	0		*			
ANR	4921668	Identifier	a		4921465	0					
ANR	4921669	PrimaryExpression	65535		4921465	1					
ANR	4921670	ElseStatement	else		4921465	0					
ANR	4921671	ExpressionStatement	p [ 3 ] = p [ 2 ] = p [ 1 ] = p [ 0 ] = 0	744:6:21820:21849	4921465	0	True				
ANR	4921672	AssignmentExpression	p [ 3 ] = p [ 2 ] = p [ 1 ] = p [ 0 ] = 0		4921465	0		=			
ANR	4921673	ArrayIndexing	p [ 3 ]		4921465	0					
ANR	4921674	Identifier	p		4921465	0					
ANR	4921675	PrimaryExpression	3		4921465	1					
ANR	4921676	AssignmentExpression	p [ 2 ] = p [ 1 ] = p [ 0 ] = 0		4921465	1		=			
ANR	4921677	ArrayIndexing	p [ 2 ]		4921465	0					
ANR	4921678	Identifier	p		4921465	0					
ANR	4921679	PrimaryExpression	2		4921465	1					
ANR	4921680	AssignmentExpression	p [ 1 ] = p [ 0 ] = 0		4921465	1		=			
ANR	4921681	ArrayIndexing	p [ 1 ]		4921465	0					
ANR	4921682	Identifier	p		4921465	0					
ANR	4921683	PrimaryExpression	1		4921465	1					
ANR	4921684	AssignmentExpression	p [ 0 ] = 0		4921465	1		=			
ANR	4921685	ArrayIndexing	p [ 0 ]		4921465	0					
ANR	4921686	Identifier	p		4921465	0					
ANR	4921687	PrimaryExpression	0		4921465	1					
ANR	4921688	PrimaryExpression	0		4921465	1					
ANR	4921689	ReturnType	static void		4921465	1					
ANR	4921690	Identifier	pixel		4921465	2					
ANR	4921691	ParameterList	"png_uint_16p p , struct arg * args , int nargs , double x , double y"		4921465	3					
ANR	4921692	Parameter	png_uint_16p p	703:6:20704:20717	4921465	0	True				
ANR	4921693	ParameterType	png_uint_16p		4921465	0					
ANR	4921694	Identifier	p		4921465	1					
ANR	4921695	Parameter	struct arg * args	703:22:20720:20735	4921465	1	True				
ANR	4921696	ParameterType	struct arg *		4921465	0					
ANR	4921697	Identifier	args		4921465	1					
ANR	4921698	Parameter	int nargs	703:40:20738:20746	4921465	2	True				
ANR	4921699	ParameterType	int		4921465	0					
ANR	4921700	Identifier	nargs		4921465	1					
ANR	4921701	Parameter	double x	703:51:20749:20756	4921465	3	True				
ANR	4921702	ParameterType	double		4921465	0					
ANR	4921703	Identifier	x		4921465	1					
ANR	4921704	Parameter	double y	703:61:20759:20766	4921465	4	True				
ANR	4921705	ParameterType	double		4921465	0					
ANR	4921706	Identifier	y		4921465	1					
ANR	4921707	CFGEntryNode	ENTRY		4921465		True				
ANR	4921708	CFGExitNode	EXIT		4921465		True				
ANR	4921709	Symbol	a		4921465						
ANR	4921710	Symbol	args [ nargs ] . color -> blue		4921465						
ANR	4921711	Symbol	b		4921465						
ANR	4921712	Symbol	args [ nargs ] . color -> green		4921465						
ANR	4921713	Symbol	* * nargs		4921465						
ANR	4921714	Symbol	g		4921465						
ANR	4921715	Symbol	* args [ nargs ] . color		4921465						
ANR	4921716	Symbol	* nargs		4921465						
ANR	4921717	Symbol	args [ nargs ] . color		4921465						
ANR	4921718	Symbol	* args		4921465						
ANR	4921719	Symbol	p		4921465						
ANR	4921720	Symbol	args		4921465						
ANR	4921721	Symbol	nargs		4921465						
ANR	4921722	Symbol	r		4921465						
ANR	4921723	Symbol	round		4921465						
ANR	4921724	Symbol	alpha		4921465						
ANR	4921725	Symbol	x		4921465						
ANR	4921726	Symbol	y		4921465						
ANR	4921727	Symbol	* p		4921465						
ANR	4921728	Symbol	alpha_calc		4921465						
ANR	4921729	Symbol	* * args		4921465						
ANR	4921730	Symbol	args [ nargs ] . color -> red		4921465						
ANR	4921731	Function	main	747:0:21854:26432							
ANR	4921732	FunctionDef	"main (int argc , const char * * argv)"		4921731	0					
ANR	4921733	CompoundStatement		749:0:21892:26432	4921731	0					
ANR	4921734	IdentifierDeclStatement	int convert_to_8bit = 0 ;	750:3:21897:21920	4921731	0	True				
ANR	4921735	IdentifierDecl	convert_to_8bit = 0		4921731	0					
ANR	4921736	IdentifierDeclType	int		4921731	0					
ANR	4921737	Identifier	convert_to_8bit		4921731	1					
ANR	4921738	AssignmentExpression	convert_to_8bit = 0		4921731	2		=			
ANR	4921739	Identifier	convert_to_8bit		4921731	0					
ANR	4921740	PrimaryExpression	0		4921731	1					
ANR	4921741	IfStatement	"if ( argc > 1 && strcmp ( argv [ 1 ] , ""--8bit"" ) == 0 )"		4921731	1					
ANR	4921742	Condition	"argc > 1 && strcmp ( argv [ 1 ] , ""--8bit"" ) == 0"	753:7:21968:22009	4921731	0	True				
ANR	4921743	AndExpression	"argc > 1 && strcmp ( argv [ 1 ] , ""--8bit"" ) == 0"		4921731	0		&&			
ANR	4921744	RelationalExpression	argc > 1		4921731	0		>			
ANR	4921745	Identifier	argc		4921731	0					
ANR	4921746	PrimaryExpression	1		4921731	1					
ANR	4921747	EqualityExpression	"strcmp ( argv [ 1 ] , ""--8bit"" ) == 0"		4921731	1		==			
ANR	4921748	CallExpression	"strcmp ( argv [ 1 ] , ""--8bit"" )"		4921731	0					
ANR	4921749	Callee	strcmp		4921731	0					
ANR	4921750	Identifier	strcmp		4921731	0					
ANR	4921751	ArgumentList	argv [ 1 ]		4921731	1					
ANR	4921752	Argument	argv [ 1 ]		4921731	0					
ANR	4921753	ArrayIndexing	argv [ 1 ]		4921731	0					
ANR	4921754	Identifier	argv		4921731	0					
ANR	4921755	PrimaryExpression	1		4921731	1					
ANR	4921756	Argument	"""--8bit"""		4921731	1					
ANR	4921757	PrimaryExpression	"""--8bit"""		4921731	0					
ANR	4921758	PrimaryExpression	0		4921731	1					
ANR	4921759	ExpressionStatement	"-- argc , ++ argv , convert_to_8bit = 1"	754:6:22018:22053	4921731	1	True				
ANR	4921760	Expression	"-- argc , ++ argv , convert_to_8bit = 1"		4921731	0					
ANR	4921761	UnaryExpression	-- argc		4921731	0					
ANR	4921762	IncDec	--		4921731	0					
ANR	4921763	Identifier	argc		4921731	1					
ANR	4921764	Expression	"++ argv , convert_to_8bit = 1"		4921731	1					
ANR	4921765	UnaryExpression	++ argv		4921731	0					
ANR	4921766	IncDec	++		4921731	0					
ANR	4921767	Identifier	argv		4921731	1					
ANR	4921768	AssignmentExpression	convert_to_8bit = 1		4921731	1		=			
ANR	4921769	Identifier	convert_to_8bit		4921731	0					
ANR	4921770	PrimaryExpression	1		4921731	1					
ANR	4921771	IfStatement	if ( argc >= 3 )		4921731	2					
ANR	4921772	Condition	argc >= 3	756:7:22063:22071	4921731	0	True				
ANR	4921773	RelationalExpression	argc >= 3		4921731	0		>=			
ANR	4921774	Identifier	argc		4921731	0					
ANR	4921775	PrimaryExpression	3		4921731	1					
ANR	4921776	CompoundStatement		14:6:289:320	4921731	1					
ANR	4921777	IdentifierDeclStatement	png_uint_16p buffer ;	758:6:22085:22104	4921731	0	True				
ANR	4921778	IdentifierDecl	buffer		4921731	0					
ANR	4921779	IdentifierDeclType	png_uint_16p		4921731	0					
ANR	4921780	Identifier	buffer		4921731	1					
ANR	4921781	IdentifierDeclStatement	int nshapes ;	759:6:22112:22123	4921731	1	True				
ANR	4921782	IdentifierDecl	nshapes		4921731	0					
ANR	4921783	IdentifierDeclType	int		4921731	0					
ANR	4921784	Identifier	nshapes		4921731	1					
ANR	4921785	IdentifierDeclStatement	png_image image ;	760:6:22131:22146	4921731	2	True				
ANR	4921786	IdentifierDecl	image		4921731	0					
ANR	4921787	IdentifierDeclType	png_image		4921731	0					
ANR	4921788	Identifier	image		4921731	1					
ANR	4921789	Statement	define	761:6:22154:22159	4921731	3	True				
ANR	4921790	Statement	max_shapes	761:13:22161:22170	4921731	4	True				
ANR	4921791	Statement	256	761:24:22172:22174	4921731	5	True				
ANR	4921792	IdentifierDeclStatement	struct arg arg_list [ max_shapes ] ;	762:6:22182:22213	4921731	6	True				
ANR	4921793	IdentifierDecl	arg_list [ max_shapes ]		4921731	0					
ANR	4921794	IdentifierDeclType	struct arg [ max_shapes ]		4921731	0					
ANR	4921795	Identifier	arg_list		4921731	1					
ANR	4921796	Identifier	max_shapes		4921731	2					
ANR	4921797	ExpressionStatement	"memset ( & image , 0 , sizeof image )"	767:6:22327:22358	4921731	7	True				
ANR	4921798	CallExpression	"memset ( & image , 0 , sizeof image )"		4921731	0					
ANR	4921799	Callee	memset		4921731	0					
ANR	4921800	Identifier	memset		4921731	0					
ANR	4921801	ArgumentList	& image		4921731	1					
ANR	4921802	Argument	& image		4921731	0					
ANR	4921803	UnaryOperationExpression	& image		4921731	0					
ANR	4921804	UnaryOperator	&		4921731	0					
ANR	4921805	Identifier	image		4921731	1					
ANR	4921806	Argument	0		4921731	1					
ANR	4921807	PrimaryExpression	0		4921731	0					
ANR	4921808	Argument	sizeof image		4921731	2					
ANR	4921809	SizeofExpression	sizeof image		4921731	0					
ANR	4921810	Sizeof	sizeof		4921731	0					
ANR	4921811	Identifier	image		4921731	1					
ANR	4921812	ExpressionStatement	image . version = PNG_IMAGE_VERSION	768:6:22366:22399	4921731	8	True				
ANR	4921813	AssignmentExpression	image . version = PNG_IMAGE_VERSION		4921731	0		=			
ANR	4921814	MemberAccess	image . version		4921731	0					
ANR	4921815	Identifier	image		4921731	0					
ANR	4921816	Identifier	version		4921731	1					
ANR	4921817	Identifier	PNG_IMAGE_VERSION		4921731	1					
ANR	4921818	ExpressionStatement	image . opaque = NULL	769:6:22407:22426	4921731	9	True				
ANR	4921819	AssignmentExpression	image . opaque = NULL		4921731	0		=			
ANR	4921820	MemberAccess	image . opaque		4921731	0					
ANR	4921821	Identifier	image		4921731	0					
ANR	4921822	Identifier	opaque		4921731	1					
ANR	4921823	Identifier	NULL		4921731	1					
ANR	4921824	ExpressionStatement	"image . width = read_wh ( ""width"" , argv [ 1 ] )"	770:6:22434:22473	4921731	10	True				
ANR	4921825	AssignmentExpression	"image . width = read_wh ( ""width"" , argv [ 1 ] )"		4921731	0		=			
ANR	4921826	MemberAccess	image . width		4921731	0					
ANR	4921827	Identifier	image		4921731	0					
ANR	4921828	Identifier	width		4921731	1					
ANR	4921829	CallExpression	"read_wh ( ""width"" , argv [ 1 ] )"		4921731	1					
ANR	4921830	Callee	read_wh		4921731	0					
ANR	4921831	Identifier	read_wh		4921731	0					
ANR	4921832	ArgumentList	"""width"""		4921731	1					
ANR	4921833	Argument	"""width"""		4921731	0					
ANR	4921834	PrimaryExpression	"""width"""		4921731	0					
ANR	4921835	Argument	argv [ 1 ]		4921731	1					
ANR	4921836	ArrayIndexing	argv [ 1 ]		4921731	0					
ANR	4921837	Identifier	argv		4921731	0					
ANR	4921838	PrimaryExpression	1		4921731	1					
ANR	4921839	ExpressionStatement	"image . height = read_wh ( ""height"" , argv [ 2 ] )"	771:6:22481:22522	4921731	11	True				
ANR	4921840	AssignmentExpression	"image . height = read_wh ( ""height"" , argv [ 2 ] )"		4921731	0		=			
ANR	4921841	MemberAccess	image . height		4921731	0					
ANR	4921842	Identifier	image		4921731	0					
ANR	4921843	Identifier	height		4921731	1					
ANR	4921844	CallExpression	"read_wh ( ""height"" , argv [ 2 ] )"		4921731	1					
ANR	4921845	Callee	read_wh		4921731	0					
ANR	4921846	Identifier	read_wh		4921731	0					
ANR	4921847	ArgumentList	"""height"""		4921731	1					
ANR	4921848	Argument	"""height"""		4921731	0					
ANR	4921849	PrimaryExpression	"""height"""		4921731	0					
ANR	4921850	Argument	argv [ 2 ]		4921731	1					
ANR	4921851	ArrayIndexing	argv [ 2 ]		4921731	0					
ANR	4921852	Identifier	argv		4921731	0					
ANR	4921853	PrimaryExpression	2		4921731	1					
ANR	4921854	ExpressionStatement	image . format = PNG_FORMAT_LINEAR_RGB_ALPHA	772:6:22530:22572	4921731	12	True				
ANR	4921855	AssignmentExpression	image . format = PNG_FORMAT_LINEAR_RGB_ALPHA		4921731	0		=			
ANR	4921856	MemberAccess	image . format		4921731	0					
ANR	4921857	Identifier	image		4921731	0					
ANR	4921858	Identifier	format		4921731	1					
ANR	4921859	Identifier	PNG_FORMAT_LINEAR_RGB_ALPHA		4921731	1					
ANR	4921860	ExpressionStatement	image . flags = 0	773:6:22580:22595	4921731	13	True				
ANR	4921861	AssignmentExpression	image . flags = 0		4921731	0		=			
ANR	4921862	MemberAccess	image . flags		4921731	0					
ANR	4921863	Identifier	image		4921731	0					
ANR	4921864	Identifier	flags		4921731	1					
ANR	4921865	PrimaryExpression	0		4921731	1					
ANR	4921866	ExpressionStatement	image . colormap_entries = 0	774:6:22603:22629	4921731	14	True				
ANR	4921867	AssignmentExpression	image . colormap_entries = 0		4921731	0		=			
ANR	4921868	MemberAccess	image . colormap_entries		4921731	0					
ANR	4921869	Identifier	image		4921731	0					
ANR	4921870	Identifier	colormap_entries		4921731	1					
ANR	4921871	PrimaryExpression	0		4921731	1					
ANR	4921872	ForStatement	for ( nshapes = 0 ; 3 + 7 * ( nshapes + 1 ) <= argc && nshapes < max_shapes ; ++ nshapes )		4921731	15					
ANR	4921873	ForInit	nshapes = 0 ;	777:11:22692:22701	4921731	0	True				
ANR	4921874	AssignmentExpression	nshapes = 0		4921731	0		=			
ANR	4921875	Identifier	nshapes		4921731	0					
ANR	4921876	PrimaryExpression	0		4921731	1					
ANR	4921877	Condition	3 + 7 * ( nshapes + 1 ) <= argc && nshapes < max_shapes	777:22:22703:22749	4921731	1	True				
ANR	4921878	AndExpression	3 + 7 * ( nshapes + 1 ) <= argc && nshapes < max_shapes		4921731	0		&&			
ANR	4921879	RelationalExpression	3 + 7 * ( nshapes + 1 ) <= argc		4921731	0		<=			
ANR	4921880	AdditiveExpression	3 + 7 * ( nshapes + 1 )		4921731	0		+			
ANR	4921881	PrimaryExpression	3		4921731	0					
ANR	4921882	MultiplicativeExpression	7 * ( nshapes + 1 )		4921731	1		*			
ANR	4921883	PrimaryExpression	7		4921731	0					
ANR	4921884	AdditiveExpression	nshapes + 1		4921731	1		+			
ANR	4921885	Identifier	nshapes		4921731	0					
ANR	4921886	PrimaryExpression	1		4921731	1					
ANR	4921887	Identifier	argc		4921731	1					
ANR	4921888	RelationalExpression	nshapes < max_shapes		4921731	1		<			
ANR	4921889	Identifier	nshapes		4921731	0					
ANR	4921890	Identifier	max_shapes		4921731	1					
ANR	4921891	UnaryExpression	++ nshapes	778:11:22763:22771	4921731	2	True				
ANR	4921892	IncDec	++		4921731	0					
ANR	4921893	Identifier	nshapes		4921731	1					
ANR	4921894	ExpressionStatement	"parse_arg ( arg_list + nshapes , argv + 3 + 7 * nshapes )"	779:9:22783:22828	4921731	3	True				
ANR	4921895	CallExpression	"parse_arg ( arg_list + nshapes , argv + 3 + 7 * nshapes )"		4921731	0					
ANR	4921896	Callee	parse_arg		4921731	0					
ANR	4921897	Identifier	parse_arg		4921731	0					
ANR	4921898	ArgumentList	arg_list + nshapes		4921731	1					
ANR	4921899	Argument	arg_list + nshapes		4921731	0					
ANR	4921900	AdditiveExpression	arg_list + nshapes		4921731	0		+			
ANR	4921901	Identifier	arg_list		4921731	0					
ANR	4921902	Identifier	nshapes		4921731	1					
ANR	4921903	Argument	argv + 3 + 7 * nshapes		4921731	1					
ANR	4921904	AdditiveExpression	argv + 3 + 7 * nshapes		4921731	0		+			
ANR	4921905	Identifier	argv		4921731	0					
ANR	4921906	AdditiveExpression	3 + 7 * nshapes		4921731	1		+			
ANR	4921907	PrimaryExpression	3		4921731	0					
ANR	4921908	MultiplicativeExpression	7 * nshapes		4921731	1		*			
ANR	4921909	PrimaryExpression	7		4921731	0					
ANR	4921910	Identifier	nshapes		4921731	1					
ANR	4921911	IfStatement	if ( 3 + 7 * nshapes != argc )		4921731	16					
ANR	4921912	Condition	3 + 7 * nshapes != argc	781:10:22841:22859	4921731	0	True				
ANR	4921913	EqualityExpression	3 + 7 * nshapes != argc		4921731	0		!=			
ANR	4921914	AdditiveExpression	3 + 7 * nshapes		4921731	0		+			
ANR	4921915	PrimaryExpression	3		4921731	0					
ANR	4921916	MultiplicativeExpression	7 * nshapes		4921731	1		*			
ANR	4921917	PrimaryExpression	7		4921731	0					
ANR	4921918	Identifier	nshapes		4921731	1					
ANR	4921919	Identifier	argc		4921731	1					
ANR	4921920	CompoundStatement		34:6:975:975	4921731	1					
ANR	4921921	ExpressionStatement	"fprintf ( stderr , ""genpng: %s: too many arguments\\n"" , argv [ 3 + 7 * nshapes ] )"	783:9:22879:22949	4921731	0	True				
ANR	4921922	CallExpression	"fprintf ( stderr , ""genpng: %s: too many arguments\\n"" , argv [ 3 + 7 * nshapes ] )"		4921731	0					
ANR	4921923	Callee	fprintf		4921731	0					
ANR	4921924	Identifier	fprintf		4921731	0					
ANR	4921925	ArgumentList	stderr		4921731	1					
ANR	4921926	Argument	stderr		4921731	0					
ANR	4921927	Identifier	stderr		4921731	0					
ANR	4921928	Argument	"""genpng: %s: too many arguments\\n"""		4921731	1					
ANR	4921929	PrimaryExpression	"""genpng: %s: too many arguments\\n"""		4921731	0					
ANR	4921930	Argument	argv [ 3 + 7 * nshapes ]		4921731	2					
ANR	4921931	ArrayIndexing	argv [ 3 + 7 * nshapes ]		4921731	0					
ANR	4921932	Identifier	argv		4921731	0					
ANR	4921933	AdditiveExpression	3 + 7 * nshapes		4921731	1		+			
ANR	4921934	PrimaryExpression	3		4921731	0					
ANR	4921935	MultiplicativeExpression	7 * nshapes		4921731	1		*			
ANR	4921936	PrimaryExpression	7		4921731	0					
ANR	4921937	Identifier	nshapes		4921731	1					
ANR	4921938	ReturnStatement	return 1 ;	784:9:22960:22968	4921731	1	True				
ANR	4921939	PrimaryExpression	1		4921731	0					
ANR	4921940	IfStatement	if ( image . height > ( ( size_t ) ( - 1 ) ) / ( 8 * image . width ) )		4921731	17					
ANR	4921941	Condition	image . height > ( ( size_t ) ( - 1 ) ) / ( 8 * image . width )	794:10:23351:23395	4921731	0	True				
ANR	4921942	RelationalExpression	image . height > ( ( size_t ) ( - 1 ) ) / ( 8 * image . width )		4921731	0		>			
ANR	4921943	MemberAccess	image . height		4921731	0					
ANR	4921944	Identifier	image		4921731	0					
ANR	4921945	Identifier	height		4921731	1					
ANR	4921946	MultiplicativeExpression	( ( size_t ) ( - 1 ) ) / ( 8 * image . width )		4921731	1		/			
ANR	4921947	CastExpression	( size_t ) ( - 1 )		4921731	0					
ANR	4921948	CastTarget	size_t		4921731	0					
ANR	4921949	UnaryOperationExpression	- 1		4921731	1					
ANR	4921950	UnaryOperator	-		4921731	0					
ANR	4921951	PrimaryExpression	1		4921731	1					
ANR	4921952	MultiplicativeExpression	8 * image . width		4921731	1		*			
ANR	4921953	PrimaryExpression	8		4921731	0					
ANR	4921954	MemberAccess	image . width		4921731	1					
ANR	4921955	Identifier	image		4921731	0					
ANR	4921956	Identifier	width		4921731	1					
ANR	4921957	CompoundStatement		46:57:1505:1505	4921731	1					
ANR	4921958	ExpressionStatement	"fprintf ( stderr , ""genpng: image buffer would be too big"" )"	795:9:23409:23465	4921731	0	True				
ANR	4921959	CallExpression	"fprintf ( stderr , ""genpng: image buffer would be too big"" )"		4921731	0					
ANR	4921960	Callee	fprintf		4921731	0					
ANR	4921961	Identifier	fprintf		4921731	0					
ANR	4921962	ArgumentList	stderr		4921731	1					
ANR	4921963	Argument	stderr		4921731	0					
ANR	4921964	Identifier	stderr		4921731	0					
ANR	4921965	Argument	"""genpng: image buffer would be too big"""		4921731	1					
ANR	4921966	PrimaryExpression	"""genpng: image buffer would be too big"""		4921731	0					
ANR	4921967	ReturnStatement	return 1 ;	796:9:23476:23484	4921731	1	True				
ANR	4921968	PrimaryExpression	1		4921731	0					
ANR	4921969	ExpressionStatement	buffer = malloc ( PNG_IMAGE_SIZE ( image ) )	801:6:23539:23577	4921731	18	True				
ANR	4921970	AssignmentExpression	buffer = malloc ( PNG_IMAGE_SIZE ( image ) )		4921731	0		=			
ANR	4921971	Identifier	buffer		4921731	0					
ANR	4921972	CallExpression	malloc ( PNG_IMAGE_SIZE ( image ) )		4921731	1					
ANR	4921973	Callee	malloc		4921731	0					
ANR	4921974	Identifier	malloc		4921731	0					
ANR	4921975	ArgumentList	PNG_IMAGE_SIZE ( image )		4921731	1					
ANR	4921976	Argument	PNG_IMAGE_SIZE ( image )		4921731	0					
ANR	4921977	CallExpression	PNG_IMAGE_SIZE ( image )		4921731	0					
ANR	4921978	Callee	PNG_IMAGE_SIZE		4921731	0					
ANR	4921979	Identifier	PNG_IMAGE_SIZE		4921731	0					
ANR	4921980	ArgumentList	image		4921731	1					
ANR	4921981	Argument	image		4921731	0					
ANR	4921982	Identifier	image		4921731	0					
ANR	4921983	IfStatement	if ( buffer != NULL )		4921731	19					
ANR	4921984	Condition	buffer != NULL	803:10:23590:23603	4921731	0	True				
ANR	4921985	EqualityExpression	buffer != NULL		4921731	0		!=			
ANR	4921986	Identifier	buffer		4921731	0					
ANR	4921987	Identifier	NULL		4921731	1					
ANR	4921988	CompoundStatement		57:9:1730:1743	4921731	1					
ANR	4921989	IdentifierDeclStatement	png_uint_32 y ;	805:9:23623:23636	4921731	0	True				
ANR	4921990	IdentifierDecl	y		4921731	0					
ANR	4921991	IdentifierDeclType	png_uint_32		4921731	0					
ANR	4921992	Identifier	y		4921731	1					
ANR	4921993	ForStatement	for ( y = 0 ; y < image . height ; ++ y )		4921731	1					
ANR	4921994	ForInit	y = 0 ;	808:14:23686:23689	4921731	0	True				
ANR	4921995	AssignmentExpression	y = 0		4921731	0		=			
ANR	4921996	Identifier	y		4921731	0					
ANR	4921997	PrimaryExpression	0		4921731	1					
ANR	4921998	Condition	y < image . height	808:19:23691:23704	4921731	1	True				
ANR	4921999	RelationalExpression	y < image . height		4921731	0		<			
ANR	4922000	Identifier	y		4921731	0					
ANR	4922001	MemberAccess	image . height		4921731	1					
ANR	4922002	Identifier	image		4921731	0					
ANR	4922003	Identifier	height		4921731	1					
ANR	4922004	UnaryExpression	++ y	808:35:23707:23709	4921731	2	True				
ANR	4922005	IncDec	++		4921731	0					
ANR	4922006	Identifier	y		4921731	1					
ANR	4922007	CompoundStatement		62:12:1842:1855	4921731	3					
ANR	4922008	IdentifierDeclStatement	png_uint_32 x ;	810:12:23735:23748	4921731	0	True				
ANR	4922009	IdentifierDecl	x		4921731	0					
ANR	4922010	IdentifierDeclType	png_uint_32		4921731	0					
ANR	4922011	Identifier	x		4921731	1					
ANR	4922012	ForStatement	for ( x = 0 ; x < image . width ; ++ x )		4921731	1					
ANR	4922013	ForInit	x = 0 ;	813:17:23810:23813	4921731	0	True				
ANR	4922014	AssignmentExpression	x = 0		4921731	0		=			
ANR	4922015	Identifier	x		4921731	0					
ANR	4922016	PrimaryExpression	0		4921731	1					
ANR	4922017	Condition	x < image . width	813:22:23815:23827	4921731	1	True				
ANR	4922018	RelationalExpression	x < image . width		4921731	0		<			
ANR	4922019	Identifier	x		4921731	0					
ANR	4922020	MemberAccess	image . width		4921731	1					
ANR	4922021	Identifier	image		4921731	0					
ANR	4922022	Identifier	width		4921731	1					
ANR	4922023	UnaryExpression	++ x	813:37:23830:23832	4921731	2	True				
ANR	4922024	IncDec	++		4921731	0					
ANR	4922025	Identifier	x		4921731	1					
ANR	4922026	ExpressionStatement	"pixel ( buffer + 4 * ( x + y * image . width ) , arg_list , nshapes , x , y )"	814:15:23850:23912	4921731	3	True				
ANR	4922027	CallExpression	"pixel ( buffer + 4 * ( x + y * image . width ) , arg_list , nshapes , x , y )"		4921731	0					
ANR	4922028	Callee	pixel		4921731	0					
ANR	4922029	Identifier	pixel		4921731	0					
ANR	4922030	ArgumentList	buffer + 4 * ( x + y * image . width )		4921731	1					
ANR	4922031	Argument	buffer + 4 * ( x + y * image . width )		4921731	0					
ANR	4922032	AdditiveExpression	buffer + 4 * ( x + y * image . width )		4921731	0		+			
ANR	4922033	Identifier	buffer		4921731	0					
ANR	4922034	MultiplicativeExpression	4 * ( x + y * image . width )		4921731	1		*			
ANR	4922035	PrimaryExpression	4		4921731	0					
ANR	4922036	AdditiveExpression	x + y * image . width		4921731	1		+			
ANR	4922037	Identifier	x		4921731	0					
ANR	4922038	MultiplicativeExpression	y * image . width		4921731	1		*			
ANR	4922039	Identifier	y		4921731	0					
ANR	4922040	MemberAccess	image . width		4921731	1					
ANR	4922041	Identifier	image		4921731	0					
ANR	4922042	Identifier	width		4921731	1					
ANR	4922043	Argument	arg_list		4921731	1					
ANR	4922044	Identifier	arg_list		4921731	0					
ANR	4922045	Argument	nshapes		4921731	2					
ANR	4922046	Identifier	nshapes		4921731	0					
ANR	4922047	Argument	x		4921731	3					
ANR	4922048	Identifier	x		4921731	0					
ANR	4922049	Argument	y		4921731	4					
ANR	4922050	Identifier	y		4921731	0					
ANR	4922051	IfStatement	"if ( png_image_write_to_stdio ( & image , stdout , convert_to_8bit , buffer , 0 , NULL ) )"		4921731	2					
ANR	4922052	Condition	"png_image_write_to_stdio ( & image , stdout , convert_to_8bit , buffer , 0 , NULL )"	818:13:23983:24095	4921731	0	True				
ANR	4922053	CallExpression	"png_image_write_to_stdio ( & image , stdout , convert_to_8bit , buffer , 0 , NULL )"		4921731	0					
ANR	4922054	Callee	png_image_write_to_stdio		4921731	0					
ANR	4922055	Identifier	png_image_write_to_stdio		4921731	0					
ANR	4922056	ArgumentList	& image		4921731	1					
ANR	4922057	Argument	& image		4921731	0					
ANR	4922058	UnaryOperationExpression	& image		4921731	0					
ANR	4922059	UnaryOperator	&		4921731	0					
ANR	4922060	Identifier	image		4921731	1					
ANR	4922061	Argument	stdout		4921731	1					
ANR	4922062	Identifier	stdout		4921731	0					
ANR	4922063	Argument	convert_to_8bit		4921731	2					
ANR	4922064	Identifier	convert_to_8bit		4921731	0					
ANR	4922065	Argument	buffer		4921731	3					
ANR	4922066	Identifier	buffer		4921731	0					
ANR	4922067	Argument	0		4921731	4					
ANR	4922068	PrimaryExpression	0		4921731	0					
ANR	4922069	Argument	NULL		4921731	5					
ANR	4922070	Identifier	NULL		4921731	0					
ANR	4922071	CompoundStatement		72:9:2214:2214	4921731	1					
ANR	4922072	ExpressionStatement	free ( buffer )	821:12:24121:24133	4921731	0	True				
ANR	4922073	CallExpression	free ( buffer )		4921731	0					
ANR	4922074	Callee	free		4921731	0					
ANR	4922075	Identifier	free		4921731	0					
ANR	4922076	ArgumentList	buffer		4921731	1					
ANR	4922077	Argument	buffer		4921731	0					
ANR	4922078	Identifier	buffer		4921731	0					
ANR	4922079	ReturnStatement	return 0 ;	822:12:24147:24155	4921731	1	True				
ANR	4922080	PrimaryExpression	0		4921731	0					
ANR	4922081	ElseStatement	else		4921731	0					
ANR	4922082	ExpressionStatement	"fprintf ( stderr , ""genpng: write stdout: %s\\n"" , image . message )"	826:12:24209:24269	4921731	0	True				
ANR	4922083	CallExpression	"fprintf ( stderr , ""genpng: write stdout: %s\\n"" , image . message )"		4921731	0					
ANR	4922084	Callee	fprintf		4921731	0					
ANR	4922085	Identifier	fprintf		4921731	0					
ANR	4922086	ArgumentList	stderr		4921731	1					
ANR	4922087	Argument	stderr		4921731	0					
ANR	4922088	Identifier	stderr		4921731	0					
ANR	4922089	Argument	"""genpng: write stdout: %s\\n"""		4921731	1					
ANR	4922090	PrimaryExpression	"""genpng: write stdout: %s\\n"""		4921731	0					
ANR	4922091	Argument	image . message		4921731	2					
ANR	4922092	MemberAccess	image . message		4921731	0					
ANR	4922093	Identifier	image		4921731	0					
ANR	4922094	Identifier	message		4921731	1					
ANR	4922095	ExpressionStatement	free ( buffer )	828:9:24281:24293	4921731	3	True				
ANR	4922096	CallExpression	free ( buffer )		4921731	0					
ANR	4922097	Callee	free		4921731	0					
ANR	4922098	Identifier	free		4921731	0					
ANR	4922099	ArgumentList	buffer		4921731	1					
ANR	4922100	Argument	buffer		4921731	0					
ANR	4922101	Identifier	buffer		4921731	0					
ANR	4922102	ElseStatement	else		4921731	0					
ANR	4922103	ExpressionStatement	"fprintf ( stderr , ""genpng: out of memory: %lu bytes\\n"" , ( unsigned long ) PNG_IMAGE_SIZE ( image ) )"	832:9:24324:24430	4921731	0	True				
ANR	4922104	CallExpression	"fprintf ( stderr , ""genpng: out of memory: %lu bytes\\n"" , ( unsigned long ) PNG_IMAGE_SIZE ( image ) )"		4921731	0					
ANR	4922105	Callee	fprintf		4921731	0					
ANR	4922106	Identifier	fprintf		4921731	0					
ANR	4922107	ArgumentList	stderr		4921731	1					
ANR	4922108	Argument	stderr		4921731	0					
ANR	4922109	Identifier	stderr		4921731	0					
ANR	4922110	Argument	"""genpng: out of memory: %lu bytes\\n"""		4921731	1					
ANR	4922111	PrimaryExpression	"""genpng: out of memory: %lu bytes\\n"""		4921731	0					
ANR	4922112	Argument	( unsigned long ) PNG_IMAGE_SIZE ( image )		4921731	2					
ANR	4922113	CastExpression	( unsigned long ) PNG_IMAGE_SIZE ( image )		4921731	0					
ANR	4922114	CastTarget	unsigned long		4921731	0					
ANR	4922115	CallExpression	PNG_IMAGE_SIZE ( image )		4921731	1					
ANR	4922116	Callee	PNG_IMAGE_SIZE		4921731	0					
ANR	4922117	Identifier	PNG_IMAGE_SIZE		4921731	0					
ANR	4922118	ArgumentList	image		4921731	1					
ANR	4922119	Argument	image		4921731	0					
ANR	4922120	Identifier	image		4921731	0					
ANR	4922121	ElseStatement	else		4921731	0					
ANR	4922122	CompoundStatement		89:3:2556:2556	4921731	0					
ANR	4922123	Statement	fprintf	839:6:24495:24501	4921731	0	True				
ANR	4922124	Statement	(	839:13:24502:24502	4921731	1	True				
ANR	4922125	Statement	stderr	839:14:24503:24508	4921731	2	True				
ANR	4922126	Statement	","	839:20:24509:24509	4921731	3	True				
ANR	4922127	Statement	"""genpng: usage: genpng [--8bit] width height {shape}\\n"""	839:22:24511:24565	4921731	4	True				
ANR	4922128	Statement	""" Generate a transparent PNG in RGBA (truecolor+alpha) format\\n"""	840:9:24576:24639	4921731	5	True				
ANR	4922129	Statement	""" containing the given shape or shapes.  Shapes are defined:\\n"""	841:9:24650:24712	4921731	6	True				
ANR	4922130	Statement	"""\\n"""	842:9:24723:24726	4921731	7	True				
ANR	4922131	Statement	"""  shape ::= color width shape x1 y1 x2 y2\\n"""	843:9:24737:24781	4921731	8	True				
ANR	4922132	Statement	"""  color ::= black|white|red|green|yellow|blue\\n"""	844:9:24792:24840	4921731	9	True				
ANR	4922133	Statement	"""  color ::= brown|purple|pink|orange|gray|cyan\\n"""	845:9:24851:24900	4921731	10	True				
ANR	4922134	Statement	"""  width ::= filled|<number>\\n"""	846:9:24911:24941	4921731	11	True				
ANR	4922135	Statement	"""  shape ::= circle|square|line\\n"""	847:9:24952:24985	4921731	12	True				
ANR	4922136	Statement	"""  x1,x2 ::= <number>\\n"""	848:9:24996:25019	4921731	13	True				
ANR	4922137	Statement	"""  y1,y2 ::= <number>\\n"""	849:9:25030:25053	4921731	14	True				
ANR	4922138	Statement	"""\\n"""	850:9:25064:25067	4921731	15	True				
ANR	4922139	Statement	""" Numbers are floating point numbers describing points relative to\\n"""	851:9:25078:25146	4921731	16	True				
ANR	4922140	Statement	""" the top left of the output PNG as pixel coordinates.  The 'width'\\n"""	852:9:25157:25226	4921731	17	True				
ANR	4922141	Statement	""" parameter is either the width of the line (in output pixels) used\\n"""	853:9:25237:25306	4921731	18	True				
ANR	4922142	Statement	""" to draw the shape or 'filled' to indicate that the shape should\\n"""	854:9:25317:25384	4921731	19	True				
ANR	4922143	Statement	""" be filled with the color.\\n"""	855:9:25395:25424	4921731	20	True				
ANR	4922144	Statement	"""\\n"""	856:9:25435:25438	4921731	21	True				
ANR	4922145	Statement	""" Colors are interpreted loosely to give access to the eight full\\n"""	857:9:25449:25516	4921731	22	True				
ANR	4922146	Statement	""" intensity RGB values:\\n"""	858:9:25527:25552	4921731	23	True				
ANR	4922147	Statement	"""\\n"""	859:9:25563:25566	4921731	24	True				
ANR	4922148	Statement	"""  black, red, green, blue, yellow, cyan, purple, white,\\n"""	860:9:25577:25635	4921731	25	True				
ANR	4922149	Statement	"""\\n"""	861:9:25646:25649	4921731	26	True				
ANR	4922150	Statement	""" Cyan is full intensity blue+green; RGB(0,1,1), plus the following\\n"""	862:9:25660:25729	4921731	27	True				
ANR	4922151	Statement	""" lower intensity values:\\n"""	863:9:25740:25767	4921731	28	True				
ANR	4922152	Statement	"""\\n"""	864:9:25778:25781	4921731	29	True				
ANR	4922153	Statement	"""  brown:  red+orange:  RGB(0.5, 0.125, 0) (dark red+orange)\\n"""	865:9:25792:25854	4921731	30	True				
ANR	4922154	Statement	"""  pink:   red+white:   RGB(1.0, 0.5,   0.5)\\n"""	866:9:25865:25911	4921731	31	True				
ANR	4922155	Statement	"""  orange: red+yellow:  RGB(1.0, 0.5,   0)\\n"""	867:9:25922:25966	4921731	32	True				
ANR	4922156	Statement	"""  gray:   black+white: RGB(0.5, 0.5,   0.5)\\n"""	868:9:25977:26023	4921731	33	True				
ANR	4922157	Statement	"""\\n"""	869:9:26034:26037	4921731	34	True				
ANR	4922158	Statement	""" The RGB values are selected to make detection of aliasing errors\\n"""	870:9:26048:26116	4921731	35	True				
ANR	4922159	Statement	""" easy. The names are selected to make the description of errors\\n"""	871:9:26127:26193	4921731	36	True				
ANR	4922160	Statement	""" easy.\\n"""	872:9:26204:26213	4921731	37	True				
ANR	4922161	Statement	"""\\n"""	873:9:26224:26227	4921731	38	True				
ANR	4922162	Statement	""" The PNG is written to stdout, if --8bit is given a 32bpp RGBA sRGB\\n"""	874:9:26238:26308	4921731	39	True				
ANR	4922163	Statement	""" file is produced, otherwise a 64bpp RGBA linear encoded file is\\n"""	875:9:26319:26386	4921731	40	True				
ANR	4922164	Statement	""" written.\\n"""	876:9:26397:26409	4921731	41	True				
ANR	4922165	Statement	)	876:22:26410:26410	4921731	42	True				
ANR	4922166	ExpressionStatement		876:23:26411:26411	4921731	43	True				
ANR	4922167	ReturnStatement	return 1 ;	879:3:26422:26430	4921731	3	True				
ANR	4922168	PrimaryExpression	1		4921731	0					
ANR	4922169	ReturnType	int		4921731	1					
ANR	4922170	Identifier	main		4921731	2					
ANR	4922171	ParameterList	"int argc , const char * * argv"		4921731	3					
ANR	4922172	Parameter	int argc	748:5:21863:21870	4921731	0	True				
ANR	4922173	ParameterType	int		4921731	0					
ANR	4922174	Identifier	argc		4921731	1					
ANR	4922175	Parameter	const char * * argv	748:15:21873:21889	4921731	1	True				
ANR	4922176	ParameterType	const char * *		4921731	0					
ANR	4922177	Identifier	argv		4921731	1					
ANR	4922178	CFGEntryNode	ENTRY		4921731		True				
ANR	4922179	CFGExitNode	EXIT		4921731		True				
ANR	4922180	Symbol	image . message		4921731						
ANR	4922181	Symbol	stdout		4921731						
ANR	4922182	Symbol	* argv		4921731						
ANR	4922183	Symbol	convert_to_8bit		4921731						
ANR	4922184	Symbol	argv		4921731						
ANR	4922185	Symbol	PNG_IMAGE_VERSION		4921731						
ANR	4922186	Symbol	image . flags		4921731						
ANR	4922187	Symbol	buffer		4921731						
ANR	4922188	Symbol	* nshapes		4921731						
ANR	4922189	Symbol	argc		4921731						
ANR	4922190	Symbol	strcmp		4921731						
ANR	4922191	Symbol	image		4921731						
ANR	4922192	Symbol	malloc		4921731						
ANR	4922193	Symbol	& image		4921731						
ANR	4922194	Symbol	NULL		4921731						
ANR	4922195	Symbol	image . opaque		4921731						
ANR	4922196	Symbol	image . height		4921731						
ANR	4922197	Symbol	stderr		4921731						
ANR	4922198	Symbol	image . colormap_entries		4921731						
ANR	4922199	Symbol	arg_list		4921731						
ANR	4922200	Symbol	PNG_IMAGE_SIZE		4921731						
ANR	4922201	Symbol	nshapes		4921731						
ANR	4922202	Symbol	image . format		4921731						
ANR	4922203	Symbol	x		4921731						
ANR	4922204	Symbol	max_shapes		4921731						
ANR	4922205	Symbol	y		4921731						
ANR	4922206	Symbol	image . version		4921731						
ANR	4922207	Symbol	png_image_write_to_stdio		4921731						
ANR	4922208	Symbol	PNG_FORMAT_LINEAR_RGB_ALPHA		4921731						
ANR	4922209	Symbol	image . width		4921731						
ANR	4922210	Symbol	read_wh		4921731						
