command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	10789423	File	data/converged/CVE-2018-16863_ghostpdl/xmltok.c								
ANR	10789424	Function	isNever	156:0:5124:5225							
ANR	10789425	FunctionDef	"isNever (const ENCODING * UNUSED_P ( enc ) , const char * UNUSED_P ( p ))"		10789424	0					
ANR	10789426	CompoundStatement		158:0:5211:5225	10789424	0					
ANR	10789427	ReturnStatement	return 0 ;	159:2:5215:5223	10789424	0	True				
ANR	10789428	PrimaryExpression	0		10789424	0					
ANR	10789429	ReturnType	static int PTRFASTCALL		10789424	1					
ANR	10789430	Identifier	isNever		10789424	2					
ANR	10789431	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * UNUSED_P ( p )"		10789424	3					
ANR	10789432	Parameter	const ENCODING * UNUSED_P ( enc )	157:8:5155:5183	10789424	0	True				
ANR	10789433	ParameterType	const ENCODING * ( enc )		10789424	0					
ANR	10789434	Identifier	UNUSED_P		10789424	1					
ANR	10789435	Parameter	const char * UNUSED_P ( p )	157:39:5186:5208	10789424	1	True				
ANR	10789436	ParameterType	const char * ( p )		10789424	0					
ANR	10789437	Identifier	UNUSED_P		10789424	1					
ANR	10789438	CFGEntryNode	ENTRY		10789424		True				
ANR	10789439	CFGExitNode	EXIT		10789424		True				
ANR	10789440	Symbol	UNUSED_P		10789424						
ANR	10789441	Function	utf8_isName2	162:0:5228:5376							
ANR	10789442	FunctionDef	"utf8_isName2 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		10789441	0					
ANR	10789443	CompoundStatement		164:0:5310:5376	10789441	0					
ANR	10789444	ReturnStatement	"return UTF8_GET_NAMING2 ( namePages , ( const unsigned char * ) p ) ;"	165:2:5314:5374	10789441	0	True				
ANR	10789445	CallExpression	"UTF8_GET_NAMING2 ( namePages , ( const unsigned char * ) p )"		10789441	0					
ANR	10789446	Callee	UTF8_GET_NAMING2		10789441	0					
ANR	10789447	Identifier	UTF8_GET_NAMING2		10789441	0					
ANR	10789448	ArgumentList	namePages		10789441	1					
ANR	10789449	Argument	namePages		10789441	0					
ANR	10789450	Identifier	namePages		10789441	0					
ANR	10789451	Argument	( const unsigned char * ) p		10789441	1					
ANR	10789452	CastExpression	( const unsigned char * ) p		10789441	0					
ANR	10789453	CastTarget	const unsigned char *		10789441	0					
ANR	10789454	Identifier	p		10789441	1					
ANR	10789455	ReturnType	static int PTRFASTCALL		10789441	1					
ANR	10789456	Identifier	utf8_isName2		10789441	2					
ANR	10789457	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		10789441	3					
ANR	10789458	Parameter	const ENCODING * UNUSED_P ( enc )	163:13:5264:5292	10789441	0	True				
ANR	10789459	ParameterType	const ENCODING * ( enc )		10789441	0					
ANR	10789460	Identifier	UNUSED_P		10789441	1					
ANR	10789461	Parameter	const char * p	163:44:5295:5307	10789441	1	True				
ANR	10789462	ParameterType	const char *		10789441	0					
ANR	10789463	Identifier	p		10789441	1					
ANR	10789464	CFGEntryNode	ENTRY		10789441		True				
ANR	10789465	CFGExitNode	EXIT		10789441		True				
ANR	10789466	Symbol	UNUSED_P		10789441						
ANR	10789467	Symbol	p		10789441						
ANR	10789468	Symbol	UTF8_GET_NAMING2		10789441						
ANR	10789469	Symbol	namePages		10789441						
ANR	10789470	Function	utf8_isName3	168:0:5379:5527							
ANR	10789471	FunctionDef	"utf8_isName3 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		10789470	0					
ANR	10789472	CompoundStatement		170:0:5461:5527	10789470	0					
ANR	10789473	ReturnStatement	"return UTF8_GET_NAMING3 ( namePages , ( const unsigned char * ) p ) ;"	171:2:5465:5525	10789470	0	True				
ANR	10789474	CallExpression	"UTF8_GET_NAMING3 ( namePages , ( const unsigned char * ) p )"		10789470	0					
ANR	10789475	Callee	UTF8_GET_NAMING3		10789470	0					
ANR	10789476	Identifier	UTF8_GET_NAMING3		10789470	0					
ANR	10789477	ArgumentList	namePages		10789470	1					
ANR	10789478	Argument	namePages		10789470	0					
ANR	10789479	Identifier	namePages		10789470	0					
ANR	10789480	Argument	( const unsigned char * ) p		10789470	1					
ANR	10789481	CastExpression	( const unsigned char * ) p		10789470	0					
ANR	10789482	CastTarget	const unsigned char *		10789470	0					
ANR	10789483	Identifier	p		10789470	1					
ANR	10789484	ReturnType	static int PTRFASTCALL		10789470	1					
ANR	10789485	Identifier	utf8_isName3		10789470	2					
ANR	10789486	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		10789470	3					
ANR	10789487	Parameter	const ENCODING * UNUSED_P ( enc )	169:13:5415:5443	10789470	0	True				
ANR	10789488	ParameterType	const ENCODING * ( enc )		10789470	0					
ANR	10789489	Identifier	UNUSED_P		10789470	1					
ANR	10789490	Parameter	const char * p	169:44:5446:5458	10789470	1	True				
ANR	10789491	ParameterType	const char *		10789470	0					
ANR	10789492	Identifier	p		10789470	1					
ANR	10789493	CFGEntryNode	ENTRY		10789470		True				
ANR	10789494	CFGExitNode	EXIT		10789470		True				
ANR	10789495	Symbol	UNUSED_P		10789470						
ANR	10789496	Symbol	p		10789470						
ANR	10789497	Symbol	UTF8_GET_NAMING3		10789470						
ANR	10789498	Symbol	namePages		10789470						
ANR	10789499	Function	utf8_isNmstrt2	176:0:5560:5712							
ANR	10789500	FunctionDef	"utf8_isNmstrt2 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		10789499	0					
ANR	10789501	CompoundStatement		178:0:5644:5712	10789499	0					
ANR	10789502	ReturnStatement	"return UTF8_GET_NAMING2 ( nmstrtPages , ( const unsigned char * ) p ) ;"	179:2:5648:5710	10789499	0	True				
ANR	10789503	CallExpression	"UTF8_GET_NAMING2 ( nmstrtPages , ( const unsigned char * ) p )"		10789499	0					
ANR	10789504	Callee	UTF8_GET_NAMING2		10789499	0					
ANR	10789505	Identifier	UTF8_GET_NAMING2		10789499	0					
ANR	10789506	ArgumentList	nmstrtPages		10789499	1					
ANR	10789507	Argument	nmstrtPages		10789499	0					
ANR	10789508	Identifier	nmstrtPages		10789499	0					
ANR	10789509	Argument	( const unsigned char * ) p		10789499	1					
ANR	10789510	CastExpression	( const unsigned char * ) p		10789499	0					
ANR	10789511	CastTarget	const unsigned char *		10789499	0					
ANR	10789512	Identifier	p		10789499	1					
ANR	10789513	ReturnType	static int PTRFASTCALL		10789499	1					
ANR	10789514	Identifier	utf8_isNmstrt2		10789499	2					
ANR	10789515	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		10789499	3					
ANR	10789516	Parameter	const ENCODING * UNUSED_P ( enc )	177:15:5598:5626	10789499	0	True				
ANR	10789517	ParameterType	const ENCODING * ( enc )		10789499	0					
ANR	10789518	Identifier	UNUSED_P		10789499	1					
ANR	10789519	Parameter	const char * p	177:46:5629:5641	10789499	1	True				
ANR	10789520	ParameterType	const char *		10789499	0					
ANR	10789521	Identifier	p		10789499	1					
ANR	10789522	CFGEntryNode	ENTRY		10789499		True				
ANR	10789523	CFGExitNode	EXIT		10789499		True				
ANR	10789524	Symbol	UNUSED_P		10789499						
ANR	10789525	Symbol	p		10789499						
ANR	10789526	Symbol	UTF8_GET_NAMING2		10789499						
ANR	10789527	Symbol	nmstrtPages		10789499						
ANR	10789528	Function	utf8_isNmstrt3	182:0:5715:5867							
ANR	10789529	FunctionDef	"utf8_isNmstrt3 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		10789528	0					
ANR	10789530	CompoundStatement		184:0:5799:5867	10789528	0					
ANR	10789531	ReturnStatement	"return UTF8_GET_NAMING3 ( nmstrtPages , ( const unsigned char * ) p ) ;"	185:2:5803:5865	10789528	0	True				
ANR	10789532	CallExpression	"UTF8_GET_NAMING3 ( nmstrtPages , ( const unsigned char * ) p )"		10789528	0					
ANR	10789533	Callee	UTF8_GET_NAMING3		10789528	0					
ANR	10789534	Identifier	UTF8_GET_NAMING3		10789528	0					
ANR	10789535	ArgumentList	nmstrtPages		10789528	1					
ANR	10789536	Argument	nmstrtPages		10789528	0					
ANR	10789537	Identifier	nmstrtPages		10789528	0					
ANR	10789538	Argument	( const unsigned char * ) p		10789528	1					
ANR	10789539	CastExpression	( const unsigned char * ) p		10789528	0					
ANR	10789540	CastTarget	const unsigned char *		10789528	0					
ANR	10789541	Identifier	p		10789528	1					
ANR	10789542	ReturnType	static int PTRFASTCALL		10789528	1					
ANR	10789543	Identifier	utf8_isNmstrt3		10789528	2					
ANR	10789544	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		10789528	3					
ANR	10789545	Parameter	const ENCODING * UNUSED_P ( enc )	183:15:5753:5781	10789528	0	True				
ANR	10789546	ParameterType	const ENCODING * ( enc )		10789528	0					
ANR	10789547	Identifier	UNUSED_P		10789528	1					
ANR	10789548	Parameter	const char * p	183:46:5784:5796	10789528	1	True				
ANR	10789549	ParameterType	const char *		10789528	0					
ANR	10789550	Identifier	p		10789528	1					
ANR	10789551	CFGEntryNode	ENTRY		10789528		True				
ANR	10789552	CFGExitNode	EXIT		10789528		True				
ANR	10789553	Symbol	UNUSED_P		10789528						
ANR	10789554	Symbol	p		10789528						
ANR	10789555	Symbol	UTF8_GET_NAMING3		10789528						
ANR	10789556	Symbol	nmstrtPages		10789528						
ANR	10789557	Function	utf8_isInvalid2	190:0:5902:6039							
ANR	10789558	FunctionDef	"utf8_isInvalid2 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		10789557	0					
ANR	10789559	CompoundStatement		192:0:5987:6039	10789557	0					
ANR	10789560	ReturnStatement	return UTF8_INVALID2 ( ( const unsigned char * ) p ) ;	193:2:5991:6037	10789557	0	True				
ANR	10789561	CallExpression	UTF8_INVALID2 ( ( const unsigned char * ) p )		10789557	0					
ANR	10789562	Callee	UTF8_INVALID2		10789557	0					
ANR	10789563	Identifier	UTF8_INVALID2		10789557	0					
ANR	10789564	ArgumentList	( const unsigned char * ) p		10789557	1					
ANR	10789565	Argument	( const unsigned char * ) p		10789557	0					
ANR	10789566	CastExpression	( const unsigned char * ) p		10789557	0					
ANR	10789567	CastTarget	const unsigned char *		10789557	0					
ANR	10789568	Identifier	p		10789557	1					
ANR	10789569	ReturnType	static int PTRFASTCALL		10789557	1					
ANR	10789570	Identifier	utf8_isInvalid2		10789557	2					
ANR	10789571	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		10789557	3					
ANR	10789572	Parameter	const ENCODING * UNUSED_P ( enc )	191:16:5941:5969	10789557	0	True				
ANR	10789573	ParameterType	const ENCODING * ( enc )		10789557	0					
ANR	10789574	Identifier	UNUSED_P		10789557	1					
ANR	10789575	Parameter	const char * p	191:47:5972:5984	10789557	1	True				
ANR	10789576	ParameterType	const char *		10789557	0					
ANR	10789577	Identifier	p		10789557	1					
ANR	10789578	CFGEntryNode	ENTRY		10789557		True				
ANR	10789579	CFGExitNode	EXIT		10789557		True				
ANR	10789580	Symbol	UNUSED_P		10789557						
ANR	10789581	Symbol	p		10789557						
ANR	10789582	Symbol	UTF8_INVALID2		10789557						
ANR	10789583	Function	utf8_isInvalid3	196:0:6042:6179							
ANR	10789584	FunctionDef	"utf8_isInvalid3 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		10789583	0					
ANR	10789585	CompoundStatement		198:0:6127:6179	10789583	0					
ANR	10789586	ReturnStatement	return UTF8_INVALID3 ( ( const unsigned char * ) p ) ;	199:2:6131:6177	10789583	0	True				
ANR	10789587	CallExpression	UTF8_INVALID3 ( ( const unsigned char * ) p )		10789583	0					
ANR	10789588	Callee	UTF8_INVALID3		10789583	0					
ANR	10789589	Identifier	UTF8_INVALID3		10789583	0					
ANR	10789590	ArgumentList	( const unsigned char * ) p		10789583	1					
ANR	10789591	Argument	( const unsigned char * ) p		10789583	0					
ANR	10789592	CastExpression	( const unsigned char * ) p		10789583	0					
ANR	10789593	CastTarget	const unsigned char *		10789583	0					
ANR	10789594	Identifier	p		10789583	1					
ANR	10789595	ReturnType	static int PTRFASTCALL		10789583	1					
ANR	10789596	Identifier	utf8_isInvalid3		10789583	2					
ANR	10789597	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		10789583	3					
ANR	10789598	Parameter	const ENCODING * UNUSED_P ( enc )	197:16:6081:6109	10789583	0	True				
ANR	10789599	ParameterType	const ENCODING * ( enc )		10789583	0					
ANR	10789600	Identifier	UNUSED_P		10789583	1					
ANR	10789601	Parameter	const char * p	197:47:6112:6124	10789583	1	True				
ANR	10789602	ParameterType	const char *		10789583	0					
ANR	10789603	Identifier	p		10789583	1					
ANR	10789604	CFGEntryNode	ENTRY		10789583		True				
ANR	10789605	CFGExitNode	EXIT		10789583		True				
ANR	10789606	Symbol	UNUSED_P		10789583						
ANR	10789607	Symbol	p		10789583						
ANR	10789608	Symbol	UTF8_INVALID3		10789583						
ANR	10789609	Function	utf8_isInvalid4	202:0:6182:6319							
ANR	10789610	FunctionDef	"utf8_isInvalid4 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		10789609	0					
ANR	10789611	CompoundStatement		204:0:6267:6319	10789609	0					
ANR	10789612	ReturnStatement	return UTF8_INVALID4 ( ( const unsigned char * ) p ) ;	205:2:6271:6317	10789609	0	True				
ANR	10789613	CallExpression	UTF8_INVALID4 ( ( const unsigned char * ) p )		10789609	0					
ANR	10789614	Callee	UTF8_INVALID4		10789609	0					
ANR	10789615	Identifier	UTF8_INVALID4		10789609	0					
ANR	10789616	ArgumentList	( const unsigned char * ) p		10789609	1					
ANR	10789617	Argument	( const unsigned char * ) p		10789609	0					
ANR	10789618	CastExpression	( const unsigned char * ) p		10789609	0					
ANR	10789619	CastTarget	const unsigned char *		10789609	0					
ANR	10789620	Identifier	p		10789609	1					
ANR	10789621	ReturnType	static int PTRFASTCALL		10789609	1					
ANR	10789622	Identifier	utf8_isInvalid4		10789609	2					
ANR	10789623	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		10789609	3					
ANR	10789624	Parameter	const ENCODING * UNUSED_P ( enc )	203:16:6221:6249	10789609	0	True				
ANR	10789625	ParameterType	const ENCODING * ( enc )		10789609	0					
ANR	10789626	Identifier	UNUSED_P		10789609	1					
ANR	10789627	Parameter	const char * p	203:47:6252:6264	10789609	1	True				
ANR	10789628	ParameterType	const char *		10789609	0					
ANR	10789629	Identifier	p		10789609	1					
ANR	10789630	CFGEntryNode	ENTRY		10789609		True				
ANR	10789631	CFGExitNode	EXIT		10789609		True				
ANR	10789632	Symbol	UNUSED_P		10789609						
ANR	10789633	Symbol	p		10789609						
ANR	10789634	Symbol	UTF8_INVALID4		10789609						
ANR	10789635	ClassDef	normal_encoding	208:0:6322:7335							
ANR	10789636	DeclStmt									
ANR	10789637	Decl							ENCODING	ENCODING	enc
ANR	10789638	DeclStmt									
ANR	10789639	Decl							unsigned char	unsigned char [ 256 ]	type
ANR	10789640	DeclStmt									
ANR	10789641	Decl							int FASTCALL	int FASTCALL ( int )	checkCharRefNumber
ANR	10789642	Function	sb_byteType	289:0:8490:8594							
ANR	10789643	FunctionDef	"sb_byteType (const ENCODING * enc , const char * p)"		10789642	0					
ANR	10789644	CompoundStatement		291:0:8561:8594	10789642	0					
ANR	10789645	ReturnStatement	"return SB_BYTE_TYPE ( enc , p ) ;"	292:2:8565:8592	10789642	0	True				
ANR	10789646	CallExpression	"SB_BYTE_TYPE ( enc , p )"		10789642	0					
ANR	10789647	Callee	SB_BYTE_TYPE		10789642	0					
ANR	10789648	Identifier	SB_BYTE_TYPE		10789642	0					
ANR	10789649	ArgumentList	enc		10789642	1					
ANR	10789650	Argument	enc		10789642	0					
ANR	10789651	Identifier	enc		10789642	0					
ANR	10789652	Argument	p		10789642	1					
ANR	10789653	Identifier	p		10789642	0					
ANR	10789654	ReturnType	static int PTRFASTCALL		10789642	1					
ANR	10789655	Identifier	sb_byteType		10789642	2					
ANR	10789656	ParameterList	"const ENCODING * enc , const char * p"		10789642	3					
ANR	10789657	Parameter	const ENCODING * enc	290:12:8525:8543	10789642	0	True				
ANR	10789658	ParameterType	const ENCODING *		10789642	0					
ANR	10789659	Identifier	enc		10789642	1					
ANR	10789660	Parameter	const char * p	290:33:8546:8558	10789642	1	True				
ANR	10789661	ParameterType	const char *		10789642	0					
ANR	10789662	Identifier	p		10789642	1					
ANR	10789663	CFGEntryNode	ENTRY		10789642		True				
ANR	10789664	CFGExitNode	EXIT		10789642		True				
ANR	10789665	Symbol	p		10789642						
ANR	10789666	Symbol	SB_BYTE_TYPE		10789642						
ANR	10789667	Symbol	enc		10789642						
ANR	10789668	Function	sb_byteToAscii	303:0:8830:8919							
ANR	10789669	FunctionDef	"sb_byteToAscii (const ENCODING * enc , const char * p)"		10789668	0					
ANR	10789670	CompoundStatement		305:0:8904:8919	10789668	0					
ANR	10789671	ReturnStatement	return * p ;	306:2:8908:8917	10789668	0	True				
ANR	10789672	UnaryOperationExpression	* p		10789668	0					
ANR	10789673	UnaryOperator	*		10789668	0					
ANR	10789674	Identifier	p		10789668	1					
ANR	10789675	ReturnType	static int PTRFASTCALL		10789668	1					
ANR	10789676	Identifier	sb_byteToAscii		10789668	2					
ANR	10789677	ParameterList	"const ENCODING * enc , const char * p"		10789668	3					
ANR	10789678	Parameter	const ENCODING * enc	304:15:8868:8886	10789668	0	True				
ANR	10789679	ParameterType	const ENCODING *		10789668	0					
ANR	10789680	Identifier	enc		10789668	1					
ANR	10789681	Parameter	const char * p	304:36:8889:8901	10789668	1	True				
ANR	10789682	ParameterType	const char *		10789668	0					
ANR	10789683	Identifier	p		10789668	1					
ANR	10789684	CFGEntryNode	ENTRY		10789668		True				
ANR	10789685	CFGExitNode	EXIT		10789668		True				
ANR	10789686	Symbol	p		10789668						
ANR	10789687	Symbol	* p		10789668						
ANR	10789688	Symbol	enc		10789668						
ANR	10789689	Function	sb_charMatches	332:0:9622:9719							
ANR	10789690	FunctionDef	"sb_charMatches (const ENCODING * enc , const char * p , int c)"		10789689	0					
ANR	10789691	CompoundStatement		334:0:9699:9719	10789689	0					
ANR	10789692	ReturnStatement	return * p == c ;	335:2:9703:9717	10789689	0	True				
ANR	10789693	EqualityExpression	* p == c		10789689	0		==			
ANR	10789694	UnaryOperationExpression	* p		10789689	0					
ANR	10789695	UnaryOperator	*		10789689	0					
ANR	10789696	Identifier	p		10789689	1					
ANR	10789697	Identifier	c		10789689	1					
ANR	10789698	ReturnType	static int PTRCALL		10789689	1					
ANR	10789699	Identifier	sb_charMatches		10789689	2					
ANR	10789700	ParameterList	"const ENCODING * enc , const char * p , int c"		10789689	3					
ANR	10789701	Parameter	const ENCODING * enc	333:15:9656:9674	10789689	0	True				
ANR	10789702	ParameterType	const ENCODING *		10789689	0					
ANR	10789703	Identifier	enc		10789689	1					
ANR	10789704	Parameter	const char * p	333:36:9677:9689	10789689	1	True				
ANR	10789705	ParameterType	const char *		10789689	0					
ANR	10789706	Identifier	p		10789689	1					
ANR	10789707	Parameter	int c	333:51:9692:9696	10789689	2	True				
ANR	10789708	ParameterType	int		10789689	0					
ANR	10789709	Identifier	c		10789689	1					
ANR	10789710	CFGEntryNode	ENTRY		10789689		True				
ANR	10789711	CFGExitNode	EXIT		10789689		True				
ANR	10789712	Symbol	p		10789689						
ANR	10789713	Symbol	c		10789689						
ANR	10789714	Symbol	* p		10789689						
ANR	10789715	Symbol	enc		10789689						
ANR	10789716	ClassDef	<unnamed>	357:0:10113:10270							
ANR	10789717	Function	_INTERNAL_trim_to_complete_utf8_characters	364:0:10274:11271							
ANR	10789718	FunctionDef	"_INTERNAL_trim_to_complete_utf8_characters (const char * from , const char * * fromLimRef)"		10789717	0					
ANR	10789719	CompoundStatement		366:0:10367:11271	10789717	0					
ANR	10789720	IdentifierDeclStatement	const char * fromLim = * fromLimRef ;	367:2:10371:10405	10789717	0	True				
ANR	10789721	IdentifierDecl	* fromLim = * fromLimRef		10789717	0					
ANR	10789722	IdentifierDeclType	const char *		10789717	0					
ANR	10789723	Identifier	fromLim		10789717	1					
ANR	10789724	AssignmentExpression	* fromLim = * fromLimRef		10789717	2		=			
ANR	10789725	Identifier	fromLim		10789717	0					
ANR	10789726	UnaryOperationExpression	* fromLimRef		10789717	1					
ANR	10789727	UnaryOperator	*		10789717	0					
ANR	10789728	Identifier	fromLimRef		10789717	1					
ANR	10789729	IdentifierDeclStatement	size_t walked = 0 ;	368:2:10409:10426	10789717	1	True				
ANR	10789730	IdentifierDecl	walked = 0		10789717	0					
ANR	10789731	IdentifierDeclType	size_t		10789717	0					
ANR	10789732	Identifier	walked		10789717	1					
ANR	10789733	AssignmentExpression	walked = 0		10789717	2		=			
ANR	10789734	Identifier	walked		10789717	0					
ANR	10789735	PrimaryExpression	0		10789717	1					
ANR	10789736	ForStatement	"for ( ; fromLim > from ; fromLim -- , walked ++ )"		10789717	2					
ANR	10789737	Condition	fromLim > from	369:9:10437:10450	10789717	0	True				
ANR	10789738	RelationalExpression	fromLim > from		10789717	0		>			
ANR	10789739	Identifier	fromLim		10789717	0					
ANR	10789740	Identifier	from		10789717	1					
ANR	10789741	Expression	"fromLim -- , walked ++"	369:25:10453:10471	10789717	1	True				
ANR	10789742	PostIncDecOperationExpression	fromLim --		10789717	0					
ANR	10789743	Identifier	fromLim		10789717	0					
ANR	10789744	IncDec	--		10789717	1					
ANR	10789745	PostIncDecOperationExpression	walked ++		10789717	1					
ANR	10789746	Identifier	walked		10789717	0					
ANR	10789747	IncDec	++		10789717	1					
ANR	10789748	CompoundStatement		5:4:112:165	10789717	2					
ANR	10789749	IdentifierDeclStatement	const unsigned char prev = ( unsigned char ) fromLim [ - 1 ] ;	370:4:10480:10533	10789717	0	True				
ANR	10789750	IdentifierDecl	prev = ( unsigned char ) fromLim [ - 1 ]		10789717	0					
ANR	10789751	IdentifierDeclType	const unsigned char		10789717	0					
ANR	10789752	Identifier	prev		10789717	1					
ANR	10789753	AssignmentExpression	prev = ( unsigned char ) fromLim [ - 1 ]		10789717	2		=			
ANR	10789754	Identifier	prev		10789717	0					
ANR	10789755	CastExpression	( unsigned char ) fromLim [ - 1 ]		10789717	1					
ANR	10789756	CastTarget	unsigned char		10789717	0					
ANR	10789757	ArrayIndexing	fromLim [ - 1 ]		10789717	1					
ANR	10789758	Identifier	fromLim		10789717	0					
ANR	10789759	UnaryOperationExpression	- 1		10789717	1					
ANR	10789760	UnaryOperator	-		10789717	0					
ANR	10789761	PrimaryExpression	1		10789717	1					
ANR	10789762	IfStatement	if ( ( prev & 0xf8u ) == 0xf0u )		10789717	1					
ANR	10789763	Condition	( prev & 0xf8u ) == 0xf0u	371:8:10543:10565	10789717	0	True				
ANR	10789764	EqualityExpression	( prev & 0xf8u ) == 0xf0u		10789717	0		==			
ANR	10789765	BitAndExpression	prev & 0xf8u		10789717	0		&			
ANR	10789766	Identifier	prev		10789717	0					
ANR	10789767	PrimaryExpression	0xf8u		10789717	1					
ANR	10789768	PrimaryExpression	0xf0u		10789717	1					
ANR	10789769	CompoundStatement		6:33:200:200	10789717	1					
ANR	10789770	IfStatement	if ( walked + 1 >= 4 )		10789717	0					
ANR	10789771	Condition	walked + 1 >= 4	372:10:10628:10642	10789717	0	True				
ANR	10789772	RelationalExpression	walked + 1 >= 4		10789717	0		>=			
ANR	10789773	AdditiveExpression	walked + 1		10789717	0		+			
ANR	10789774	Identifier	walked		10789717	0					
ANR	10789775	PrimaryExpression	1		10789717	1					
ANR	10789776	PrimaryExpression	4		10789717	1					
ANR	10789777	CompoundStatement		7:27:277:277	10789717	1					
ANR	10789778	ExpressionStatement	fromLim += 4 - 1	373:8:10655:10671	10789717	0	True				
ANR	10789779	AssignmentExpression	fromLim += 4 - 1		10789717	0		+=			
ANR	10789780	Identifier	fromLim		10789717	0					
ANR	10789781	AdditiveExpression	4 - 1		10789717	1		-			
ANR	10789782	PrimaryExpression	4		10789717	0					
ANR	10789783	PrimaryExpression	1		10789717	1					
ANR	10789784	BreakStatement	break ;	374:8:10681:10686	10789717	1	True				
ANR	10789785	ElseStatement	else		10789717	0					
ANR	10789786	CompoundStatement		10:13:333:333	10789717	0					
ANR	10789787	ExpressionStatement	walked = 0	376:8:10711:10721	10789717	0	True				
ANR	10789788	AssignmentExpression	walked = 0		10789717	0		=			
ANR	10789789	Identifier	walked		10789717	0					
ANR	10789790	PrimaryExpression	0		10789717	1					
ANR	10789791	ElseStatement	else		10789717	0					
ANR	10789792	IfStatement	if ( ( prev & 0xf0u ) == 0xe0u )		10789717	0					
ANR	10789793	Condition	( prev & 0xf0u ) == 0xe0u	378:15:10746:10768	10789717	0	True				
ANR	10789794	EqualityExpression	( prev & 0xf0u ) == 0xe0u		10789717	0		==			
ANR	10789795	BitAndExpression	prev & 0xf0u		10789717	0		&			
ANR	10789796	Identifier	prev		10789717	0					
ANR	10789797	PrimaryExpression	0xf0u		10789717	1					
ANR	10789798	PrimaryExpression	0xe0u		10789717	1					
ANR	10789799	CompoundStatement		13:40:403:403	10789717	1					
ANR	10789800	IfStatement	if ( walked + 1 >= 3 )		10789717	0					
ANR	10789801	Condition	walked + 1 >= 3	379:10:10831:10845	10789717	0	True				
ANR	10789802	RelationalExpression	walked + 1 >= 3		10789717	0		>=			
ANR	10789803	AdditiveExpression	walked + 1		10789717	0		+			
ANR	10789804	Identifier	walked		10789717	0					
ANR	10789805	PrimaryExpression	1		10789717	1					
ANR	10789806	PrimaryExpression	3		10789717	1					
ANR	10789807	CompoundStatement		14:27:480:480	10789717	1					
ANR	10789808	ExpressionStatement	fromLim += 3 - 1	380:8:10858:10874	10789717	0	True				
ANR	10789809	AssignmentExpression	fromLim += 3 - 1		10789717	0		+=			
ANR	10789810	Identifier	fromLim		10789717	0					
ANR	10789811	AdditiveExpression	3 - 1		10789717	1		-			
ANR	10789812	PrimaryExpression	3		10789717	0					
ANR	10789813	PrimaryExpression	1		10789717	1					
ANR	10789814	BreakStatement	break ;	381:8:10884:10889	10789717	1	True				
ANR	10789815	ElseStatement	else		10789717	0					
ANR	10789816	CompoundStatement		17:13:536:536	10789717	0					
ANR	10789817	ExpressionStatement	walked = 0	383:8:10914:10924	10789717	0	True				
ANR	10789818	AssignmentExpression	walked = 0		10789717	0		=			
ANR	10789819	Identifier	walked		10789717	0					
ANR	10789820	PrimaryExpression	0		10789717	1					
ANR	10789821	ElseStatement	else		10789717	0					
ANR	10789822	IfStatement	if ( ( prev & 0xe0u ) == 0xc0u )		10789717	0					
ANR	10789823	Condition	( prev & 0xe0u ) == 0xc0u	385:15:10949:10971	10789717	0	True				
ANR	10789824	EqualityExpression	( prev & 0xe0u ) == 0xc0u		10789717	0		==			
ANR	10789825	BitAndExpression	prev & 0xe0u		10789717	0		&			
ANR	10789826	Identifier	prev		10789717	0					
ANR	10789827	PrimaryExpression	0xe0u		10789717	1					
ANR	10789828	PrimaryExpression	0xc0u		10789717	1					
ANR	10789829	CompoundStatement		20:40:606:606	10789717	1					
ANR	10789830	IfStatement	if ( walked + 1 >= 2 )		10789717	0					
ANR	10789831	Condition	walked + 1 >= 2	386:10:11034:11048	10789717	0	True				
ANR	10789832	RelationalExpression	walked + 1 >= 2		10789717	0		>=			
ANR	10789833	AdditiveExpression	walked + 1		10789717	0		+			
ANR	10789834	Identifier	walked		10789717	0					
ANR	10789835	PrimaryExpression	1		10789717	1					
ANR	10789836	PrimaryExpression	2		10789717	1					
ANR	10789837	CompoundStatement		21:27:683:683	10789717	1					
ANR	10789838	ExpressionStatement	fromLim += 2 - 1	387:8:11061:11077	10789717	0	True				
ANR	10789839	AssignmentExpression	fromLim += 2 - 1		10789717	0		+=			
ANR	10789840	Identifier	fromLim		10789717	0					
ANR	10789841	AdditiveExpression	2 - 1		10789717	1		-			
ANR	10789842	PrimaryExpression	2		10789717	0					
ANR	10789843	PrimaryExpression	1		10789717	1					
ANR	10789844	BreakStatement	break ;	388:8:11087:11092	10789717	1	True				
ANR	10789845	ElseStatement	else		10789717	0					
ANR	10789846	CompoundStatement		24:13:739:739	10789717	0					
ANR	10789847	ExpressionStatement	walked = 0	390:8:11117:11127	10789717	0	True				
ANR	10789848	AssignmentExpression	walked = 0		10789717	0		=			
ANR	10789849	Identifier	walked		10789717	0					
ANR	10789850	PrimaryExpression	0		10789717	1					
ANR	10789851	ElseStatement	else		10789717	0					
ANR	10789852	IfStatement	if ( ( prev & 0x80u ) == 0x00u )		10789717	0					
ANR	10789853	Condition	( prev & 0x80u ) == 0x00u	392:15:11152:11174	10789717	0	True				
ANR	10789854	EqualityExpression	( prev & 0x80u ) == 0x00u		10789717	0		==			
ANR	10789855	BitAndExpression	prev & 0x80u		10789717	0		&			
ANR	10789856	Identifier	prev		10789717	0					
ANR	10789857	PrimaryExpression	0x80u		10789717	1					
ANR	10789858	PrimaryExpression	0x00u		10789717	1					
ANR	10789859	CompoundStatement		27:40:809:809	10789717	1					
ANR	10789860	BreakStatement	break ;	393:6:11229:11234	10789717	0	True				
ANR	10789861	ExpressionStatement	* fromLimRef = fromLim	396:2:11248:11269	10789717	3	True				
ANR	10789862	AssignmentExpression	* fromLimRef = fromLim		10789717	0		=			
ANR	10789863	UnaryOperationExpression	* fromLimRef		10789717	0					
ANR	10789864	UnaryOperator	*		10789717	0					
ANR	10789865	Identifier	fromLimRef		10789717	1					
ANR	10789866	Identifier	fromLim		10789717	1					
ANR	10789867	ReturnType	void		10789717	1					
ANR	10789868	Identifier	_INTERNAL_trim_to_complete_utf8_characters		10789717	2					
ANR	10789869	ParameterList	"const char * from , const char * * fromLimRef"		10789717	3					
ANR	10789870	Parameter	const char * from	365:43:10322:10338	10789717	0	True				
ANR	10789871	ParameterType	const char *		10789717	0					
ANR	10789872	Identifier	from		10789717	1					
ANR	10789873	Parameter	const char * * fromLimRef	365:62:10341:10364	10789717	1	True				
ANR	10789874	ParameterType	const char * *		10789717	0					
ANR	10789875	Identifier	fromLimRef		10789717	1					
ANR	10789876	CFGEntryNode	ENTRY		10789717		True				
ANR	10789877	CFGExitNode	EXIT		10789717		True				
ANR	10789878	Symbol	walked		10789717						
ANR	10789879	Symbol	* fromLim		10789717						
ANR	10789880	Symbol	fromLim		10789717						
ANR	10789881	Symbol	prev		10789717						
ANR	10789882	Symbol	from		10789717						
ANR	10789883	Symbol	fromLimRef		10789717						
ANR	10789884	Symbol	* fromLimRef		10789717						
ANR	10789885	Function	utf8_toUtf8	399:0:11274:12413							
ANR	10789886	FunctionDef	"utf8_toUtf8 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		10789885	0					
ANR	10789887	CompoundStatement		403:0:11452:12413	10789885	0					
ANR	10789888	IdentifierDeclStatement	bool input_incomplete = false ;	404:2:11456:11485	10789885	0	True				
ANR	10789889	IdentifierDecl	input_incomplete = false		10789885	0					
ANR	10789890	IdentifierDeclType	bool		10789885	0					
ANR	10789891	Identifier	input_incomplete		10789885	1					
ANR	10789892	AssignmentExpression	input_incomplete = false		10789885	2		=			
ANR	10789893	Identifier	false		10789885	0					
ANR	10789894	Identifier	false		10789885	1					
ANR	10789895	IdentifierDeclStatement	bool output_exhausted = false ;	405:2:11489:11518	10789885	1	True				
ANR	10789896	IdentifierDecl	output_exhausted = false		10789885	0					
ANR	10789897	IdentifierDeclType	bool		10789885	0					
ANR	10789898	Identifier	output_exhausted		10789885	1					
ANR	10789899	AssignmentExpression	output_exhausted = false		10789885	2		=			
ANR	10789900	Identifier	false		10789885	0					
ANR	10789901	Identifier	false		10789885	1					
ANR	10789902	IdentifierDeclStatement	const ptrdiff_t bytesAvailable = fromLim - * fromP ;	408:2:11588:11637	10789885	2	True				
ANR	10789903	IdentifierDecl	bytesAvailable = fromLim - * fromP		10789885	0					
ANR	10789904	IdentifierDeclType	const ptrdiff_t		10789885	0					
ANR	10789905	Identifier	bytesAvailable		10789885	1					
ANR	10789906	AssignmentExpression	bytesAvailable = fromLim - * fromP		10789885	2		=			
ANR	10789907	Identifier	bytesAvailable		10789885	0					
ANR	10789908	AdditiveExpression	fromLim - * fromP		10789885	1		-			
ANR	10789909	Identifier	fromLim		10789885	0					
ANR	10789910	UnaryOperationExpression	* fromP		10789885	1					
ANR	10789911	UnaryOperator	*		10789885	0					
ANR	10789912	Identifier	fromP		10789885	1					
ANR	10789913	IdentifierDeclStatement	const ptrdiff_t bytesStorable = toLim - * toP ;	409:2:11641:11685	10789885	3	True				
ANR	10789914	IdentifierDecl	bytesStorable = toLim - * toP		10789885	0					
ANR	10789915	IdentifierDeclType	const ptrdiff_t		10789885	0					
ANR	10789916	Identifier	bytesStorable		10789885	1					
ANR	10789917	AssignmentExpression	bytesStorable = toLim - * toP		10789885	2		=			
ANR	10789918	Identifier	bytesStorable		10789885	0					
ANR	10789919	AdditiveExpression	toLim - * toP		10789885	1		-			
ANR	10789920	Identifier	toLim		10789885	0					
ANR	10789921	UnaryOperationExpression	* toP		10789885	1					
ANR	10789922	UnaryOperator	*		10789885	0					
ANR	10789923	Identifier	toP		10789885	1					
ANR	10789924	IfStatement	if ( bytesAvailable > bytesStorable )		10789885	4					
ANR	10789925	Condition	bytesAvailable > bytesStorable	410:6:11693:11722	10789885	0	True				
ANR	10789926	RelationalExpression	bytesAvailable > bytesStorable		10789885	0		>			
ANR	10789927	Identifier	bytesAvailable		10789885	0					
ANR	10789928	Identifier	bytesStorable		10789885	1					
ANR	10789929	CompoundStatement		8:38:272:272	10789885	1					
ANR	10789930	ExpressionStatement	fromLim = * fromP + bytesStorable	411:4:11731:11763	10789885	0	True				
ANR	10789931	AssignmentExpression	fromLim = * fromP + bytesStorable		10789885	0		=			
ANR	10789932	Identifier	fromLim		10789885	0					
ANR	10789933	AdditiveExpression	* fromP + bytesStorable		10789885	1		+			
ANR	10789934	UnaryOperationExpression	* fromP		10789885	0					
ANR	10789935	UnaryOperator	*		10789885	0					
ANR	10789936	Identifier	fromP		10789885	1					
ANR	10789937	Identifier	bytesStorable		10789885	1					
ANR	10789938	ExpressionStatement	output_exhausted = true	412:4:11769:11792	10789885	1	True				
ANR	10789939	AssignmentExpression	output_exhausted = true		10789885	0		=			
ANR	10789940	Identifier	output_exhausted		10789885	0					
ANR	10789941	Identifier	true		10789885	1					
ANR	10789942	CompoundStatement		14:2:414:414	10789885	5					
ANR	10789943	Statement	const	417:4:11873:11877	10789885	0	True				
ANR	10789944	Statement	char	417:10:11879:11882	10789885	1	True				
ANR	10789945	Statement	*	417:15:11884:11884	10789885	2	True				
ANR	10789946	Statement	const	417:17:11886:11890	10789885	3	True				
ANR	10789947	ExpressionStatement	fromLimBefore = fromLim	417:23:11892:11915	10789885	4	True				
ANR	10789948	AssignmentExpression	fromLimBefore = fromLim		10789885	0		=			
ANR	10789949	Identifier	fromLimBefore		10789885	0					
ANR	10789950	Identifier	fromLim		10789885	1					
ANR	10789951	ExpressionStatement	"_INTERNAL_trim_to_complete_utf8_characters ( * fromP , & fromLim )"	418:4:11921:11981	10789885	5	True				
ANR	10789952	CallExpression	"_INTERNAL_trim_to_complete_utf8_characters ( * fromP , & fromLim )"		10789885	0					
ANR	10789953	Callee	_INTERNAL_trim_to_complete_utf8_characters		10789885	0					
ANR	10789954	Identifier	_INTERNAL_trim_to_complete_utf8_characters		10789885	0					
ANR	10789955	ArgumentList	* fromP		10789885	1					
ANR	10789956	Argument	* fromP		10789885	0					
ANR	10789957	UnaryOperationExpression	* fromP		10789885	0					
ANR	10789958	UnaryOperator	*		10789885	0					
ANR	10789959	Identifier	fromP		10789885	1					
ANR	10789960	Argument	& fromLim		10789885	1					
ANR	10789961	UnaryOperationExpression	& fromLim		10789885	0					
ANR	10789962	UnaryOperator	&		10789885	0					
ANR	10789963	Identifier	fromLim		10789885	1					
ANR	10789964	IfStatement	if ( fromLim < fromLimBefore )		10789885	6					
ANR	10789965	Condition	fromLim < fromLimBefore	419:8:11991:12013	10789885	0	True				
ANR	10789966	RelationalExpression	fromLim < fromLimBefore		10789885	0		<			
ANR	10789967	Identifier	fromLim		10789885	0					
ANR	10789968	Identifier	fromLimBefore		10789885	1					
ANR	10789969	CompoundStatement		17:33:563:563	10789885	1					
ANR	10789970	ExpressionStatement	input_incomplete = true	420:6:12024:12047	10789885	0	True				
ANR	10789971	AssignmentExpression	input_incomplete = true		10789885	0		=			
ANR	10789972	Identifier	input_incomplete		10789885	0					
ANR	10789973	Identifier	true		10789885	1					
ANR	10789974	CompoundStatement		23:4:615:661	10789885	6					
ANR	10789975	IdentifierDeclStatement	const ptrdiff_t bytesToCopy = fromLim - * fromP ;	425:4:12068:12114	10789885	0	True				
ANR	10789976	IdentifierDecl	bytesToCopy = fromLim - * fromP		10789885	0					
ANR	10789977	IdentifierDeclType	const ptrdiff_t		10789885	0					
ANR	10789978	Identifier	bytesToCopy		10789885	1					
ANR	10789979	AssignmentExpression	bytesToCopy = fromLim - * fromP		10789885	2		=			
ANR	10789980	Identifier	bytesToCopy		10789885	0					
ANR	10789981	AdditiveExpression	fromLim - * fromP		10789885	1		-			
ANR	10789982	Identifier	fromLim		10789885	0					
ANR	10789983	UnaryOperationExpression	* fromP		10789885	1					
ANR	10789984	UnaryOperator	*		10789885	0					
ANR	10789985	Identifier	fromP		10789885	1					
ANR	10789986	ExpressionStatement	"memcpy ( * toP , * fromP , bytesToCopy )"	426:4:12120:12153	10789885	1	True				
ANR	10789987	CallExpression	"memcpy ( * toP , * fromP , bytesToCopy )"		10789885	0					
ANR	10789988	Callee	memcpy		10789885	0					
ANR	10789989	Identifier	memcpy		10789885	0					
ANR	10789990	ArgumentList	* toP		10789885	1					
ANR	10789991	Argument	* toP		10789885	0					
ANR	10789992	UnaryOperationExpression	* toP		10789885	0					
ANR	10789993	UnaryOperator	*		10789885	0					
ANR	10789994	Identifier	toP		10789885	1					
ANR	10789995	Argument	* fromP		10789885	1					
ANR	10789996	UnaryOperationExpression	* fromP		10789885	0					
ANR	10789997	UnaryOperator	*		10789885	0					
ANR	10789998	Identifier	fromP		10789885	1					
ANR	10789999	Argument	bytesToCopy		10789885	2					
ANR	10790000	Identifier	bytesToCopy		10789885	0					
ANR	10790001	ExpressionStatement	* fromP += bytesToCopy	427:4:12159:12180	10789885	2	True				
ANR	10790002	AssignmentExpression	* fromP += bytesToCopy		10789885	0		+=			
ANR	10790003	UnaryOperationExpression	* fromP		10789885	0					
ANR	10790004	UnaryOperator	*		10789885	0					
ANR	10790005	Identifier	fromP		10789885	1					
ANR	10790006	Identifier	bytesToCopy		10789885	1					
ANR	10790007	ExpressionStatement	* toP += bytesToCopy	428:4:12186:12205	10789885	3	True				
ANR	10790008	AssignmentExpression	* toP += bytesToCopy		10789885	0		+=			
ANR	10790009	UnaryOperationExpression	* toP		10789885	0					
ANR	10790010	UnaryOperator	*		10789885	0					
ANR	10790011	Identifier	toP		10789885	1					
ANR	10790012	Identifier	bytesToCopy		10789885	1					
ANR	10790013	IfStatement	if ( output_exhausted )		10789885	7					
ANR	10790014	Condition	output_exhausted	431:6:12218:12233	10789885	0	True				
ANR	10790015	Identifier	output_exhausted		10789885	0					
ANR	10790016	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	432:4:12265:12300	10789885	1	True				
ANR	10790017	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10789885	0					
ANR	10790018	ElseStatement	else		10789885	0					
ANR	10790019	IfStatement	if ( input_incomplete )		10789885	0					
ANR	10790020	Condition	input_incomplete	433:11:12313:12328	10789885	0	True				
ANR	10790021	Identifier	input_incomplete		10789885	0					
ANR	10790022	ReturnStatement	return XML_CONVERT_INPUT_INCOMPLETE ;	434:4:12335:12370	10789885	1	True				
ANR	10790023	Identifier	XML_CONVERT_INPUT_INCOMPLETE		10789885	0					
ANR	10790024	ElseStatement	else		10789885	0					
ANR	10790025	ReturnStatement	return XML_CONVERT_COMPLETED ;	436:4:12383:12411	10789885	0	True				
ANR	10790026	Identifier	XML_CONVERT_COMPLETED		10789885	0					
ANR	10790027	ReturnType	static enum XML_Convert_Result PTRCALL		10789885	1					
ANR	10790028	Identifier	utf8_toUtf8		10789885	2					
ANR	10790029	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		10789885	3					
ANR	10790030	Parameter	const ENCODING * UNUSED_P ( enc )	400:12:11325:11353	10789885	0	True				
ANR	10790031	ParameterType	const ENCODING * ( enc )		10789885	0					
ANR	10790032	Identifier	UNUSED_P		10789885	1					
ANR	10790033	Parameter	const char * * fromP	401:12:11368:11385	10789885	1	True				
ANR	10790034	ParameterType	const char * *		10789885	0					
ANR	10790035	Identifier	fromP		10789885	1					
ANR	10790036	Parameter	const char * fromLim	401:32:11388:11406	10789885	2	True				
ANR	10790037	ParameterType	const char *		10789885	0					
ANR	10790038	Identifier	fromLim		10789885	1					
ANR	10790039	Parameter	char * * toP	402:12:11421:11430	10789885	3	True				
ANR	10790040	ParameterType	char * *		10789885	0					
ANR	10790041	Identifier	toP		10789885	1					
ANR	10790042	Parameter	const char * toLim	402:24:11433:11449	10789885	4	True				
ANR	10790043	ParameterType	const char *		10789885	0					
ANR	10790044	Identifier	toLim		10789885	1					
ANR	10790045	CFGEntryNode	ENTRY		10789885		True				
ANR	10790046	CFGExitNode	EXIT		10789885		True				
ANR	10790047	Symbol	UNUSED_P		10789885						
ANR	10790048	Symbol	bytesToCopy		10789885						
ANR	10790049	Symbol	toLim		10789885						
ANR	10790050	Symbol	* fromP		10789885						
ANR	10790051	Symbol	bytesStorable		10789885						
ANR	10790052	Symbol	output_exhausted		10789885						
ANR	10790053	Symbol	XML_CONVERT_INPUT_INCOMPLETE		10789885						
ANR	10790054	Symbol	false		10789885						
ANR	10790055	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		10789885						
ANR	10790056	Symbol	& fromLim		10789885						
ANR	10790057	Symbol	fromP		10789885						
ANR	10790058	Symbol	fromLim		10789885						
ANR	10790059	Symbol	toP		10789885						
ANR	10790060	Symbol	fromLimBefore		10789885						
ANR	10790061	Symbol	true		10789885						
ANR	10790062	Symbol	input_incomplete		10789885						
ANR	10790063	Symbol	XML_CONVERT_COMPLETED		10789885						
ANR	10790064	Symbol	bytesAvailable		10789885						
ANR	10790065	Symbol	* toP		10789885						
ANR	10790066	Function	utf8_toUtf16	439:0:12416:14107							
ANR	10790067	FunctionDef	"utf8_toUtf16 (const ENCODING * enc , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim)"		10790066	0					
ANR	10790068	CompoundStatement		443:0:12607:14107	10790066	0					
ANR	10790069	IdentifierDeclStatement	enum XML_Convert_Result res = XML_CONVERT_COMPLETED ;	444:2:12611:12662	10790066	0	True				
ANR	10790070	IdentifierDecl	res = XML_CONVERT_COMPLETED		10790066	0					
ANR	10790071	IdentifierDeclType	enum XML_Convert_Result		10790066	0					
ANR	10790072	Identifier	res		10790066	1					
ANR	10790073	AssignmentExpression	res = XML_CONVERT_COMPLETED		10790066	2		=			
ANR	10790074	Identifier	XML_CONVERT_COMPLETED		10790066	0					
ANR	10790075	Identifier	XML_CONVERT_COMPLETED		10790066	1					
ANR	10790076	IdentifierDeclStatement	unsigned short * to = * toP ;	445:2:12666:12691	10790066	1	True				
ANR	10790077	IdentifierDecl	* to = * toP		10790066	0					
ANR	10790078	IdentifierDeclType	unsigned short *		10790066	0					
ANR	10790079	Identifier	to		10790066	1					
ANR	10790080	AssignmentExpression	* to = * toP		10790066	2		=			
ANR	10790081	Identifier	to		10790066	0					
ANR	10790082	UnaryOperationExpression	* toP		10790066	1					
ANR	10790083	UnaryOperator	*		10790066	0					
ANR	10790084	Identifier	toP		10790066	1					
ANR	10790085	IdentifierDeclStatement	const char * from = * fromP ;	446:2:12695:12720	10790066	2	True				
ANR	10790086	IdentifierDecl	* from = * fromP		10790066	0					
ANR	10790087	IdentifierDeclType	const char *		10790066	0					
ANR	10790088	Identifier	from		10790066	1					
ANR	10790089	AssignmentExpression	* from = * fromP		10790066	2		=			
ANR	10790090	Identifier	from		10790066	0					
ANR	10790091	UnaryOperationExpression	* fromP		10790066	1					
ANR	10790092	UnaryOperator	*		10790066	0					
ANR	10790093	Identifier	fromP		10790066	1					
ANR	10790094	WhileStatement	while ( from < fromLim && to < toLim )		10790066	3					
ANR	10790095	Condition	from < fromLim && to < toLim	447:9:12731:12758	10790066	0	True				
ANR	10790096	AndExpression	from < fromLim && to < toLim		10790066	0		&&			
ANR	10790097	RelationalExpression	from < fromLim		10790066	0		<			
ANR	10790098	Identifier	from		10790066	0					
ANR	10790099	Identifier	fromLim		10790066	1					
ANR	10790100	RelationalExpression	to < toLim		10790066	1		<			
ANR	10790101	Identifier	to		10790066	0					
ANR	10790102	Identifier	toLim		10790066	1					
ANR	10790103	CompoundStatement		5:39:153:153	10790066	1					
ANR	10790104	SwitchStatement	switch ( ( ( struct normal_encoding * ) enc ) -> type [ ( unsigned char ) * from ] )		10790066	0					
ANR	10790105	Condition	( ( struct normal_encoding * ) enc ) -> type [ ( unsigned char ) * from ]	448:12:12775:12833	10790066	0	True				
ANR	10790106	ArrayIndexing	( ( struct normal_encoding * ) enc ) -> type [ ( unsigned char ) * from ]		10790066	0					
ANR	10790107	PtrMemberAccess	( ( struct normal_encoding * ) enc ) -> type		10790066	0					
ANR	10790108	CastExpression	( struct normal_encoding * ) enc		10790066	0					
ANR	10790109	CastTarget	struct normal_encoding *		10790066	0					
ANR	10790110	Identifier	enc		10790066	1					
ANR	10790111	Identifier	type		10790066	1					
ANR	10790112	CastExpression	( unsigned char ) * from		10790066	1					
ANR	10790113	CastTarget	unsigned char		10790066	0					
ANR	10790114	UnaryOperationExpression	* from		10790066	1					
ANR	10790115	UnaryOperator	*		10790066	0					
ANR	10790116	Identifier	from		10790066	1					
ANR	10790117	CompoundStatement		6:73:228:228	10790066	1					
ANR	10790118	Label	case BT_LEAD2 :	449:4:12842:12855	10790066	0	True				
ANR	10790119	Identifier	BT_LEAD2		10790066	0					
ANR	10790120	IfStatement	if ( fromLim - from < 2 )		10790066	1					
ANR	10790121	Condition	fromLim - from < 2	450:10:12867:12884	10790066	0	True				
ANR	10790122	RelationalExpression	fromLim - from < 2		10790066	0		<			
ANR	10790123	AdditiveExpression	fromLim - from		10790066	0		-			
ANR	10790124	Identifier	fromLim		10790066	0					
ANR	10790125	Identifier	from		10790066	1					
ANR	10790126	PrimaryExpression	2		10790066	1					
ANR	10790127	CompoundStatement		8:30:279:279	10790066	1					
ANR	10790128	ExpressionStatement	res = XML_CONVERT_INPUT_INCOMPLETE	451:8:12897:12931	10790066	0	True				
ANR	10790129	AssignmentExpression	res = XML_CONVERT_INPUT_INCOMPLETE		10790066	0		=			
ANR	10790130	Identifier	res		10790066	0					
ANR	10790131	Identifier	XML_CONVERT_INPUT_INCOMPLETE		10790066	1					
ANR	10790132	GotoStatement	goto after ;	452:8:12941:12951	10790066	1	True				
ANR	10790133	Identifier	after		10790066	0					
ANR	10790134	ExpressionStatement	* to ++ = ( unsigned short ) ( ( ( from [ 0 ] & 0x1f ) << 6 ) | ( from [ 1 ] & 0x3f ) )	454:6:12967:13035	10790066	2	True				
ANR	10790135	AssignmentExpression	* to ++ = ( unsigned short ) ( ( ( from [ 0 ] & 0x1f ) << 6 ) | ( from [ 1 ] & 0x3f ) )		10790066	0		=			
ANR	10790136	UnaryOperationExpression	* to ++		10790066	0					
ANR	10790137	UnaryOperator	*		10790066	0					
ANR	10790138	PostIncDecOperationExpression	to ++		10790066	1					
ANR	10790139	Identifier	to		10790066	0					
ANR	10790140	IncDec	++		10790066	1					
ANR	10790141	CastExpression	( unsigned short ) ( ( ( from [ 0 ] & 0x1f ) << 6 ) | ( from [ 1 ] & 0x3f ) )		10790066	1					
ANR	10790142	CastTarget	unsigned short		10790066	0					
ANR	10790143	InclusiveOrExpression	( ( from [ 0 ] & 0x1f ) << 6 ) | ( from [ 1 ] & 0x3f )		10790066	1		|			
ANR	10790144	ShiftExpression	( from [ 0 ] & 0x1f ) << 6		10790066	0		<<			
ANR	10790145	BitAndExpression	from [ 0 ] & 0x1f		10790066	0		&			
ANR	10790146	ArrayIndexing	from [ 0 ]		10790066	0					
ANR	10790147	Identifier	from		10790066	0					
ANR	10790148	PrimaryExpression	0		10790066	1					
ANR	10790149	PrimaryExpression	0x1f		10790066	1					
ANR	10790150	PrimaryExpression	6		10790066	1					
ANR	10790151	BitAndExpression	from [ 1 ] & 0x3f		10790066	1		&			
ANR	10790152	ArrayIndexing	from [ 1 ]		10790066	0					
ANR	10790153	Identifier	from		10790066	0					
ANR	10790154	PrimaryExpression	1		10790066	1					
ANR	10790155	PrimaryExpression	0x3f		10790066	1					
ANR	10790156	ExpressionStatement	from += 2	455:6:13043:13052	10790066	3	True				
ANR	10790157	AssignmentExpression	from += 2		10790066	0		+=			
ANR	10790158	Identifier	from		10790066	0					
ANR	10790159	PrimaryExpression	2		10790066	1					
ANR	10790160	BreakStatement	break ;	456:6:13060:13065	10790066	4	True				
ANR	10790161	Label	case BT_LEAD3 :	457:4:13071:13084	10790066	5	True				
ANR	10790162	Identifier	BT_LEAD3		10790066	0					
ANR	10790163	IfStatement	if ( fromLim - from < 3 )		10790066	6					
ANR	10790164	Condition	fromLim - from < 3	458:10:13096:13113	10790066	0	True				
ANR	10790165	RelationalExpression	fromLim - from < 3		10790066	0		<			
ANR	10790166	AdditiveExpression	fromLim - from		10790066	0		-			
ANR	10790167	Identifier	fromLim		10790066	0					
ANR	10790168	Identifier	from		10790066	1					
ANR	10790169	PrimaryExpression	3		10790066	1					
ANR	10790170	CompoundStatement		16:30:508:508	10790066	1					
ANR	10790171	ExpressionStatement	res = XML_CONVERT_INPUT_INCOMPLETE	459:8:13126:13160	10790066	0	True				
ANR	10790172	AssignmentExpression	res = XML_CONVERT_INPUT_INCOMPLETE		10790066	0		=			
ANR	10790173	Identifier	res		10790066	0					
ANR	10790174	Identifier	XML_CONVERT_INPUT_INCOMPLETE		10790066	1					
ANR	10790175	GotoStatement	goto after ;	460:8:13170:13180	10790066	1	True				
ANR	10790176	Identifier	after		10790066	0					
ANR	10790177	ExpressionStatement	* to ++ = ( unsigned short ) ( ( ( from [ 0 ] & 0xf ) << 12 ) | ( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f ) )	462:6:13196:13321	10790066	7	True				
ANR	10790178	AssignmentExpression	* to ++ = ( unsigned short ) ( ( ( from [ 0 ] & 0xf ) << 12 ) | ( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f ) )		10790066	0		=			
ANR	10790179	UnaryOperationExpression	* to ++		10790066	0					
ANR	10790180	UnaryOperator	*		10790066	0					
ANR	10790181	PostIncDecOperationExpression	to ++		10790066	1					
ANR	10790182	Identifier	to		10790066	0					
ANR	10790183	IncDec	++		10790066	1					
ANR	10790184	CastExpression	( unsigned short ) ( ( ( from [ 0 ] & 0xf ) << 12 ) | ( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f ) )		10790066	1					
ANR	10790185	CastTarget	unsigned short		10790066	0					
ANR	10790186	InclusiveOrExpression	( ( from [ 0 ] & 0xf ) << 12 ) | ( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f )		10790066	1		|			
ANR	10790187	ShiftExpression	( from [ 0 ] & 0xf ) << 12		10790066	0		<<			
ANR	10790188	BitAndExpression	from [ 0 ] & 0xf		10790066	0		&			
ANR	10790189	ArrayIndexing	from [ 0 ]		10790066	0					
ANR	10790190	Identifier	from		10790066	0					
ANR	10790191	PrimaryExpression	0		10790066	1					
ANR	10790192	PrimaryExpression	0xf		10790066	1					
ANR	10790193	PrimaryExpression	12		10790066	1					
ANR	10790194	InclusiveOrExpression	( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f )		10790066	1		|			
ANR	10790195	ShiftExpression	( from [ 1 ] & 0x3f ) << 6		10790066	0		<<			
ANR	10790196	BitAndExpression	from [ 1 ] & 0x3f		10790066	0		&			
ANR	10790197	ArrayIndexing	from [ 1 ]		10790066	0					
ANR	10790198	Identifier	from		10790066	0					
ANR	10790199	PrimaryExpression	1		10790066	1					
ANR	10790200	PrimaryExpression	0x3f		10790066	1					
ANR	10790201	PrimaryExpression	6		10790066	1					
ANR	10790202	BitAndExpression	from [ 2 ] & 0x3f		10790066	1		&			
ANR	10790203	ArrayIndexing	from [ 2 ]		10790066	0					
ANR	10790204	Identifier	from		10790066	0					
ANR	10790205	PrimaryExpression	2		10790066	1					
ANR	10790206	PrimaryExpression	0x3f		10790066	1					
ANR	10790207	ExpressionStatement	from += 3	464:6:13329:13338	10790066	8	True				
ANR	10790208	AssignmentExpression	from += 3		10790066	0		+=			
ANR	10790209	Identifier	from		10790066	0					
ANR	10790210	PrimaryExpression	3		10790066	1					
ANR	10790211	BreakStatement	break ;	465:6:13346:13351	10790066	9	True				
ANR	10790212	Label	case BT_LEAD4 :	466:4:13357:13370	10790066	10	True				
ANR	10790213	Identifier	BT_LEAD4		10790066	0					
ANR	10790214	CompoundStatement		26:8:780:795	10790066	11					
ANR	10790215	IdentifierDeclStatement	unsigned long n ;	468:8:13388:13403	10790066	0	True				
ANR	10790216	IdentifierDecl	n		10790066	0					
ANR	10790217	IdentifierDeclType	unsigned long		10790066	0					
ANR	10790218	Identifier	n		10790066	1					
ANR	10790219	IfStatement	if ( toLim - to < 2 )		10790066	1					
ANR	10790220	Condition	toLim - to < 2	469:12:13417:13430	10790066	0	True				
ANR	10790221	RelationalExpression	toLim - to < 2		10790066	0		<			
ANR	10790222	AdditiveExpression	toLim - to		10790066	0		-			
ANR	10790223	Identifier	toLim		10790066	0					
ANR	10790224	Identifier	to		10790066	1					
ANR	10790225	PrimaryExpression	2		10790066	1					
ANR	10790226	CompoundStatement		27:28:825:825	10790066	1					
ANR	10790227	ExpressionStatement	res = XML_CONVERT_OUTPUT_EXHAUSTED	470:10:13445:13479	10790066	0	True				
ANR	10790228	AssignmentExpression	res = XML_CONVERT_OUTPUT_EXHAUSTED		10790066	0		=			
ANR	10790229	Identifier	res		10790066	0					
ANR	10790230	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790066	1					
ANR	10790231	GotoStatement	goto after ;	471:10:13491:13501	10790066	1	True				
ANR	10790232	Identifier	after		10790066	0					
ANR	10790233	IfStatement	if ( fromLim - from < 4 )		10790066	2					
ANR	10790234	Condition	fromLim - from < 4	473:12:13525:13542	10790066	0	True				
ANR	10790235	RelationalExpression	fromLim - from < 4		10790066	0		<			
ANR	10790236	AdditiveExpression	fromLim - from		10790066	0		-			
ANR	10790237	Identifier	fromLim		10790066	0					
ANR	10790238	Identifier	from		10790066	1					
ANR	10790239	PrimaryExpression	4		10790066	1					
ANR	10790240	CompoundStatement		31:32:937:937	10790066	1					
ANR	10790241	ExpressionStatement	res = XML_CONVERT_INPUT_INCOMPLETE	474:10:13557:13591	10790066	0	True				
ANR	10790242	AssignmentExpression	res = XML_CONVERT_INPUT_INCOMPLETE		10790066	0		=			
ANR	10790243	Identifier	res		10790066	0					
ANR	10790244	Identifier	XML_CONVERT_INPUT_INCOMPLETE		10790066	1					
ANR	10790245	GotoStatement	goto after ;	475:10:13603:13613	10790066	1	True				
ANR	10790246	Identifier	after		10790066	0					
ANR	10790247	ExpressionStatement	n = ( ( from [ 0 ] & 0x7 ) << 18 ) | ( ( from [ 1 ] & 0x3f ) << 12 ) | ( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )	477:8:13633:13744	10790066	3	True				
ANR	10790248	AssignmentExpression	n = ( ( from [ 0 ] & 0x7 ) << 18 ) | ( ( from [ 1 ] & 0x3f ) << 12 ) | ( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )		10790066	0		=			
ANR	10790249	Identifier	n		10790066	0					
ANR	10790250	InclusiveOrExpression	( ( from [ 0 ] & 0x7 ) << 18 ) | ( ( from [ 1 ] & 0x3f ) << 12 ) | ( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )		10790066	1		|			
ANR	10790251	ShiftExpression	( from [ 0 ] & 0x7 ) << 18		10790066	0		<<			
ANR	10790252	BitAndExpression	from [ 0 ] & 0x7		10790066	0		&			
ANR	10790253	ArrayIndexing	from [ 0 ]		10790066	0					
ANR	10790254	Identifier	from		10790066	0					
ANR	10790255	PrimaryExpression	0		10790066	1					
ANR	10790256	PrimaryExpression	0x7		10790066	1					
ANR	10790257	PrimaryExpression	18		10790066	1					
ANR	10790258	InclusiveOrExpression	( ( from [ 1 ] & 0x3f ) << 12 ) | ( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )		10790066	1		|			
ANR	10790259	ShiftExpression	( from [ 1 ] & 0x3f ) << 12		10790066	0		<<			
ANR	10790260	BitAndExpression	from [ 1 ] & 0x3f		10790066	0		&			
ANR	10790261	ArrayIndexing	from [ 1 ]		10790066	0					
ANR	10790262	Identifier	from		10790066	0					
ANR	10790263	PrimaryExpression	1		10790066	1					
ANR	10790264	PrimaryExpression	0x3f		10790066	1					
ANR	10790265	PrimaryExpression	12		10790066	1					
ANR	10790266	InclusiveOrExpression	( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )		10790066	1		|			
ANR	10790267	ShiftExpression	( from [ 2 ] & 0x3f ) << 6		10790066	0		<<			
ANR	10790268	BitAndExpression	from [ 2 ] & 0x3f		10790066	0		&			
ANR	10790269	ArrayIndexing	from [ 2 ]		10790066	0					
ANR	10790270	Identifier	from		10790066	0					
ANR	10790271	PrimaryExpression	2		10790066	1					
ANR	10790272	PrimaryExpression	0x3f		10790066	1					
ANR	10790273	PrimaryExpression	6		10790066	1					
ANR	10790274	BitAndExpression	from [ 3 ] & 0x3f		10790066	1		&			
ANR	10790275	ArrayIndexing	from [ 3 ]		10790066	0					
ANR	10790276	Identifier	from		10790066	0					
ANR	10790277	PrimaryExpression	3		10790066	1					
ANR	10790278	PrimaryExpression	0x3f		10790066	1					
ANR	10790279	ExpressionStatement	n -= 0x10000	479:8:13754:13766	10790066	4	True				
ANR	10790280	AssignmentExpression	n -= 0x10000		10790066	0		-=			
ANR	10790281	Identifier	n		10790066	0					
ANR	10790282	PrimaryExpression	0x10000		10790066	1					
ANR	10790283	ExpressionStatement	to [ 0 ] = ( unsigned short ) ( ( n >> 10 ) | 0xD800 )	480:8:13776:13820	10790066	5	True				
ANR	10790284	AssignmentExpression	to [ 0 ] = ( unsigned short ) ( ( n >> 10 ) | 0xD800 )		10790066	0		=			
ANR	10790285	ArrayIndexing	to [ 0 ]		10790066	0					
ANR	10790286	Identifier	to		10790066	0					
ANR	10790287	PrimaryExpression	0		10790066	1					
ANR	10790288	CastExpression	( unsigned short ) ( ( n >> 10 ) | 0xD800 )		10790066	1					
ANR	10790289	CastTarget	unsigned short		10790066	0					
ANR	10790290	InclusiveOrExpression	( n >> 10 ) | 0xD800		10790066	1		|			
ANR	10790291	ShiftExpression	n >> 10		10790066	0		>>			
ANR	10790292	Identifier	n		10790066	0					
ANR	10790293	PrimaryExpression	10		10790066	1					
ANR	10790294	PrimaryExpression	0xD800		10790066	1					
ANR	10790295	ExpressionStatement	to [ 1 ] = ( unsigned short ) ( ( n & 0x3FF ) | 0xDC00 )	481:8:13830:13876	10790066	6	True				
ANR	10790296	AssignmentExpression	to [ 1 ] = ( unsigned short ) ( ( n & 0x3FF ) | 0xDC00 )		10790066	0		=			
ANR	10790297	ArrayIndexing	to [ 1 ]		10790066	0					
ANR	10790298	Identifier	to		10790066	0					
ANR	10790299	PrimaryExpression	1		10790066	1					
ANR	10790300	CastExpression	( unsigned short ) ( ( n & 0x3FF ) | 0xDC00 )		10790066	1					
ANR	10790301	CastTarget	unsigned short		10790066	0					
ANR	10790302	InclusiveOrExpression	( n & 0x3FF ) | 0xDC00		10790066	1		|			
ANR	10790303	BitAndExpression	n & 0x3FF		10790066	0		&			
ANR	10790304	Identifier	n		10790066	0					
ANR	10790305	PrimaryExpression	0x3FF		10790066	1					
ANR	10790306	PrimaryExpression	0xDC00		10790066	1					
ANR	10790307	ExpressionStatement	to += 2	482:8:13886:13893	10790066	7	True				
ANR	10790308	AssignmentExpression	to += 2		10790066	0		+=			
ANR	10790309	Identifier	to		10790066	0					
ANR	10790310	PrimaryExpression	2		10790066	1					
ANR	10790311	ExpressionStatement	from += 4	483:8:13903:13912	10790066	8	True				
ANR	10790312	AssignmentExpression	from += 4		10790066	0		+=			
ANR	10790313	Identifier	from		10790066	0					
ANR	10790314	PrimaryExpression	4		10790066	1					
ANR	10790315	BreakStatement	break ;	485:6:13928:13933	10790066	12	True				
ANR	10790316	Label	default :	486:4:13939:13946	10790066	13	True				
ANR	10790317	Identifier	default		10790066	0					
ANR	10790318	ExpressionStatement	* to ++ = * from ++	487:6:13954:13969	10790066	14	True				
ANR	10790319	AssignmentExpression	* to ++ = * from ++		10790066	0		=			
ANR	10790320	UnaryOperationExpression	* to ++		10790066	0					
ANR	10790321	UnaryOperator	*		10790066	0					
ANR	10790322	PostIncDecOperationExpression	to ++		10790066	1					
ANR	10790323	Identifier	to		10790066	0					
ANR	10790324	IncDec	++		10790066	1					
ANR	10790325	UnaryOperationExpression	* from ++		10790066	1					
ANR	10790326	UnaryOperator	*		10790066	0					
ANR	10790327	PostIncDecOperationExpression	from ++		10790066	1					
ANR	10790328	Identifier	from		10790066	0					
ANR	10790329	IncDec	++		10790066	1					
ANR	10790330	BreakStatement	break ;	488:6:13977:13982	10790066	15	True				
ANR	10790331	IfStatement	if ( from < fromLim )		10790066	4					
ANR	10790332	Condition	from < fromLim	491:6:14000:14013	10790066	0	True				
ANR	10790333	RelationalExpression	from < fromLim		10790066	0		<			
ANR	10790334	Identifier	from		10790066	0					
ANR	10790335	Identifier	fromLim		10790066	1					
ANR	10790336	ExpressionStatement	res = XML_CONVERT_OUTPUT_EXHAUSTED	492:4:14020:14054	10790066	1	True				
ANR	10790337	AssignmentExpression	res = XML_CONVERT_OUTPUT_EXHAUSTED		10790066	0		=			
ANR	10790338	Identifier	res		10790066	0					
ANR	10790339	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790066	1					
ANR	10790340	Label	after :	493:0:14056:14061	10790066	5	True				
ANR	10790341	Identifier	after		10790066	0					
ANR	10790342	ExpressionStatement	* fromP = from	494:2:14065:14078	10790066	6	True				
ANR	10790343	AssignmentExpression	* fromP = from		10790066	0		=			
ANR	10790344	UnaryOperationExpression	* fromP		10790066	0					
ANR	10790345	UnaryOperator	*		10790066	0					
ANR	10790346	Identifier	fromP		10790066	1					
ANR	10790347	Identifier	from		10790066	1					
ANR	10790348	ExpressionStatement	* toP = to	495:2:14082:14091	10790066	7	True				
ANR	10790349	AssignmentExpression	* toP = to		10790066	0		=			
ANR	10790350	UnaryOperationExpression	* toP		10790066	0					
ANR	10790351	UnaryOperator	*		10790066	0					
ANR	10790352	Identifier	toP		10790066	1					
ANR	10790353	Identifier	to		10790066	1					
ANR	10790354	ReturnStatement	return res ;	496:2:14095:14105	10790066	8	True				
ANR	10790355	Identifier	res		10790066	0					
ANR	10790356	ReturnType	static enum XML_Convert_Result PTRCALL		10790066	1					
ANR	10790357	Identifier	utf8_toUtf16		10790066	2					
ANR	10790358	ParameterList	"const ENCODING * enc , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim"		10790066	3					
ANR	10790359	Parameter	const ENCODING * enc	440:13:12468:12486	10790066	0	True				
ANR	10790360	ParameterType	const ENCODING *		10790066	0					
ANR	10790361	Identifier	enc		10790066	1					
ANR	10790362	Parameter	const char * * fromP	441:13:12502:12519	10790066	1	True				
ANR	10790363	ParameterType	const char * *		10790066	0					
ANR	10790364	Identifier	fromP		10790066	1					
ANR	10790365	Parameter	const char * fromLim	441:33:12522:12540	10790066	2	True				
ANR	10790366	ParameterType	const char *		10790066	0					
ANR	10790367	Identifier	fromLim		10790066	1					
ANR	10790368	Parameter	unsigned short * * toP	442:13:12556:12575	10790066	3	True				
ANR	10790369	ParameterType	unsigned short * *		10790066	0					
ANR	10790370	Identifier	toP		10790066	1					
ANR	10790371	Parameter	const unsigned short * toLim	442:35:12578:12604	10790066	4	True				
ANR	10790372	ParameterType	const unsigned short *		10790066	0					
ANR	10790373	Identifier	toLim		10790066	1					
ANR	10790374	CFGEntryNode	ENTRY		10790066		True				
ANR	10790375	CFGExitNode	EXIT		10790066		True				
ANR	10790376	Symbol	res		10790066						
ANR	10790377	Symbol	* * from		10790066						
ANR	10790378	Symbol	* to		10790066						
ANR	10790379	Symbol	toLim		10790066						
ANR	10790380	Symbol	* fromP		10790066						
ANR	10790381	Symbol	( ( struct normal_encoding * ) enc ) -> type		10790066						
ANR	10790382	Symbol	* ( ( struct normal_encoding * ) enc ) -> type		10790066						
ANR	10790383	Symbol	XML_CONVERT_INPUT_INCOMPLETE		10790066						
ANR	10790384	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		10790066						
ANR	10790385	Symbol	* * enc		10790066						
ANR	10790386	Symbol	n		10790066						
ANR	10790387	Symbol	* from ++		10790066						
ANR	10790388	Symbol	fromP		10790066						
ANR	10790389	Symbol	fromLim		10790066						
ANR	10790390	Symbol	toP		10790066						
ANR	10790391	Symbol	* to ++		10790066						
ANR	10790392	Symbol	from		10790066						
ANR	10790393	Symbol	enc		10790066						
ANR	10790394	Symbol	to		10790066						
ANR	10790395	Symbol	* enc		10790066						
ANR	10790396	Symbol	XML_CONVERT_COMPLETED		10790066						
ANR	10790397	Symbol	* from		10790066						
ANR	10790398	Symbol	* toP		10790066						
ANR	10790399	DeclStmt									
ANR	10790400	Decl							const struct normal_encoding	const struct normal_encoding	utf8_encoding_ns
ANR	10790401	DeclStmt									
ANR	10790402	Decl							const struct normal_encoding	const struct normal_encoding	utf8_encoding
ANR	10790403	DeclStmt									
ANR	10790404	Decl							const struct normal_encoding	const struct normal_encoding	internal_utf8_encoding_ns
ANR	10790405	DeclStmt									
ANR	10790406	Decl							const struct normal_encoding	const struct normal_encoding	internal_utf8_encoding
ANR	10790407	Function	latin1_toUtf8	545:0:15086:15734							
ANR	10790408	FunctionDef	"latin1_toUtf8 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		10790407	0					
ANR	10790409	CompoundStatement		549:0:15270:15734	10790407	0					
ANR	10790410	ForStatement	for ( ; ; )		10790407	0					
ANR	10790411	CompoundStatement		3:4:18:33	10790407	0					
ANR	10790412	IdentifierDeclStatement	unsigned char c ;	551:4:15289:15304	10790407	0	True				
ANR	10790413	IdentifierDecl	c		10790407	0					
ANR	10790414	IdentifierDeclType	unsigned char		10790407	0					
ANR	10790415	Identifier	c		10790407	1					
ANR	10790416	IfStatement	if ( * fromP == fromLim )		10790407	1					
ANR	10790417	Condition	* fromP == fromLim	552:8:15314:15330	10790407	0	True				
ANR	10790418	EqualityExpression	* fromP == fromLim		10790407	0		==			
ANR	10790419	UnaryOperationExpression	* fromP		10790407	0					
ANR	10790420	UnaryOperator	*		10790407	0					
ANR	10790421	Identifier	fromP		10790407	1					
ANR	10790422	Identifier	fromLim		10790407	1					
ANR	10790423	ReturnStatement	return XML_CONVERT_COMPLETED ;	553:6:15339:15367	10790407	1	True				
ANR	10790424	Identifier	XML_CONVERT_COMPLETED		10790407	0					
ANR	10790425	ExpressionStatement	c = ( unsigned char ) * * fromP	554:4:15373:15399	10790407	2	True				
ANR	10790426	AssignmentExpression	c = ( unsigned char ) * * fromP		10790407	0		=			
ANR	10790427	Identifier	c		10790407	0					
ANR	10790428	CastExpression	( unsigned char ) * * fromP		10790407	1					
ANR	10790429	CastTarget	unsigned char		10790407	0					
ANR	10790430	UnaryOperationExpression	* * fromP		10790407	1					
ANR	10790431	UnaryOperator	*		10790407	0					
ANR	10790432	UnaryOperationExpression	* fromP		10790407	1					
ANR	10790433	UnaryOperator	*		10790407	0					
ANR	10790434	Identifier	fromP		10790407	1					
ANR	10790435	IfStatement	if ( c & 0x80 )		10790407	3					
ANR	10790436	Condition	c & 0x80	555:8:15409:15416	10790407	0	True				
ANR	10790437	BitAndExpression	c & 0x80		10790407	0		&			
ANR	10790438	Identifier	c		10790407	0					
ANR	10790439	PrimaryExpression	0x80		10790407	1					
ANR	10790440	CompoundStatement		7:18:148:148	10790407	1					
ANR	10790441	IfStatement	if ( toLim - * toP < 2 )		10790407	0					
ANR	10790442	Condition	toLim - * toP < 2	556:10:15431:15446	10790407	0	True				
ANR	10790443	RelationalExpression	toLim - * toP < 2		10790407	0		<			
ANR	10790444	AdditiveExpression	toLim - * toP		10790407	0		-			
ANR	10790445	Identifier	toLim		10790407	0					
ANR	10790446	UnaryOperationExpression	* toP		10790407	1					
ANR	10790447	UnaryOperator	*		10790407	0					
ANR	10790448	Identifier	toP		10790407	1					
ANR	10790449	PrimaryExpression	2		10790407	1					
ANR	10790450	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	557:8:15457:15492	10790407	1	True				
ANR	10790451	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790407	0					
ANR	10790452	ExpressionStatement	* ( * toP ) ++ = ( char ) ( ( c >> 6 ) | UTF8_cval2 )	558:6:15500:15541	10790407	1	True				
ANR	10790453	AssignmentExpression	* ( * toP ) ++ = ( char ) ( ( c >> 6 ) | UTF8_cval2 )		10790407	0		=			
ANR	10790454	UnaryOperationExpression	* ( * toP ) ++		10790407	0					
ANR	10790455	UnaryOperator	*		10790407	0					
ANR	10790456	PostIncDecOperationExpression	( * toP ) ++		10790407	1					
ANR	10790457	UnaryOperationExpression	* toP		10790407	0					
ANR	10790458	UnaryOperator	*		10790407	0					
ANR	10790459	Identifier	toP		10790407	1					
ANR	10790460	IncDec	++		10790407	1					
ANR	10790461	CastExpression	( char ) ( ( c >> 6 ) | UTF8_cval2 )		10790407	1					
ANR	10790462	CastTarget	char		10790407	0					
ANR	10790463	InclusiveOrExpression	( c >> 6 ) | UTF8_cval2		10790407	1		|			
ANR	10790464	ShiftExpression	c >> 6		10790407	0		>>			
ANR	10790465	Identifier	c		10790407	0					
ANR	10790466	PrimaryExpression	6		10790407	1					
ANR	10790467	Identifier	UTF8_cval2		10790407	1					
ANR	10790468	ExpressionStatement	* ( * toP ) ++ = ( char ) ( ( c & 0x3f ) | 0x80 )	559:6:15549:15586	10790407	2	True				
ANR	10790469	AssignmentExpression	* ( * toP ) ++ = ( char ) ( ( c & 0x3f ) | 0x80 )		10790407	0		=			
ANR	10790470	UnaryOperationExpression	* ( * toP ) ++		10790407	0					
ANR	10790471	UnaryOperator	*		10790407	0					
ANR	10790472	PostIncDecOperationExpression	( * toP ) ++		10790407	1					
ANR	10790473	UnaryOperationExpression	* toP		10790407	0					
ANR	10790474	UnaryOperator	*		10790407	0					
ANR	10790475	Identifier	toP		10790407	1					
ANR	10790476	IncDec	++		10790407	1					
ANR	10790477	CastExpression	( char ) ( ( c & 0x3f ) | 0x80 )		10790407	1					
ANR	10790478	CastTarget	char		10790407	0					
ANR	10790479	InclusiveOrExpression	( c & 0x3f ) | 0x80		10790407	1		|			
ANR	10790480	BitAndExpression	c & 0x3f		10790407	0		&			
ANR	10790481	Identifier	c		10790407	0					
ANR	10790482	PrimaryExpression	0x3f		10790407	1					
ANR	10790483	PrimaryExpression	0x80		10790407	1					
ANR	10790484	ExpressionStatement	( * fromP ) ++	560:6:15594:15604	10790407	3	True				
ANR	10790485	PostIncDecOperationExpression	( * fromP ) ++		10790407	0					
ANR	10790486	UnaryOperationExpression	* fromP		10790407	0					
ANR	10790487	UnaryOperator	*		10790407	0					
ANR	10790488	Identifier	fromP		10790407	1					
ANR	10790489	IncDec	++		10790407	1					
ANR	10790490	ElseStatement	else		10790407	0					
ANR	10790491	CompoundStatement		14:9:350:350	10790407	0					
ANR	10790492	IfStatement	if ( * toP == toLim )		10790407	0					
ANR	10790493	Condition	* toP == toLim	563:10:15633:15645	10790407	0	True				
ANR	10790494	EqualityExpression	* toP == toLim		10790407	0		==			
ANR	10790495	UnaryOperationExpression	* toP		10790407	0					
ANR	10790496	UnaryOperator	*		10790407	0					
ANR	10790497	Identifier	toP		10790407	1					
ANR	10790498	Identifier	toLim		10790407	1					
ANR	10790499	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	564:8:15656:15691	10790407	1	True				
ANR	10790500	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790407	0					
ANR	10790501	ExpressionStatement	* ( * toP ) ++ = * ( * fromP ) ++	565:6:15699:15722	10790407	1	True				
ANR	10790502	AssignmentExpression	* ( * toP ) ++ = * ( * fromP ) ++		10790407	0		=			
ANR	10790503	UnaryOperationExpression	* ( * toP ) ++		10790407	0					
ANR	10790504	UnaryOperator	*		10790407	0					
ANR	10790505	PostIncDecOperationExpression	( * toP ) ++		10790407	1					
ANR	10790506	UnaryOperationExpression	* toP		10790407	0					
ANR	10790507	UnaryOperator	*		10790407	0					
ANR	10790508	Identifier	toP		10790407	1					
ANR	10790509	IncDec	++		10790407	1					
ANR	10790510	UnaryOperationExpression	* ( * fromP ) ++		10790407	1					
ANR	10790511	UnaryOperator	*		10790407	0					
ANR	10790512	PostIncDecOperationExpression	( * fromP ) ++		10790407	1					
ANR	10790513	UnaryOperationExpression	* fromP		10790407	0					
ANR	10790514	UnaryOperator	*		10790407	0					
ANR	10790515	Identifier	fromP		10790407	1					
ANR	10790516	IncDec	++		10790407	1					
ANR	10790517	ReturnType	static enum XML_Convert_Result PTRCALL		10790407	1					
ANR	10790518	Identifier	latin1_toUtf8		10790407	2					
ANR	10790519	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		10790407	3					
ANR	10790520	Parameter	const ENCODING * UNUSED_P ( enc )	546:14:15139:15167	10790407	0	True				
ANR	10790521	ParameterType	const ENCODING * ( enc )		10790407	0					
ANR	10790522	Identifier	UNUSED_P		10790407	1					
ANR	10790523	Parameter	const char * * fromP	547:14:15184:15201	10790407	1	True				
ANR	10790524	ParameterType	const char * *		10790407	0					
ANR	10790525	Identifier	fromP		10790407	1					
ANR	10790526	Parameter	const char * fromLim	547:34:15204:15222	10790407	2	True				
ANR	10790527	ParameterType	const char *		10790407	0					
ANR	10790528	Identifier	fromLim		10790407	1					
ANR	10790529	Parameter	char * * toP	548:14:15239:15248	10790407	3	True				
ANR	10790530	ParameterType	char * *		10790407	0					
ANR	10790531	Identifier	toP		10790407	1					
ANR	10790532	Parameter	const char * toLim	548:26:15251:15267	10790407	4	True				
ANR	10790533	ParameterType	const char *		10790407	0					
ANR	10790534	Identifier	toLim		10790407	1					
ANR	10790535	CFGEntryNode	ENTRY		10790407		True				
ANR	10790536	CFGExitNode	EXIT		10790407		True				
ANR	10790537	InfiniteForNode	true		10790407		True				
ANR	10790538	Symbol	UNUSED_P		10790407						
ANR	10790539	Symbol	toLim		10790407						
ANR	10790540	Symbol	c		10790407						
ANR	10790541	Symbol	* fromP		10790407						
ANR	10790542	Symbol	* * fromP		10790407						
ANR	10790543	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		10790407						
ANR	10790544	Symbol	UTF8_cval2		10790407						
ANR	10790545	Symbol	* ( * toP ) ++		10790407						
ANR	10790546	Symbol	* ( * fromP ) ++		10790407						
ANR	10790547	Symbol	fromP		10790407						
ANR	10790548	Symbol	fromLim		10790407						
ANR	10790549	Symbol	toP		10790407						
ANR	10790550	Symbol	XML_CONVERT_COMPLETED		10790407						
ANR	10790551	Symbol	* toP		10790407						
ANR	10790552	Function	latin1_toUtf16	570:0:15737:16161							
ANR	10790553	FunctionDef	"latin1_toUtf16 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim)"		10790552	0					
ANR	10790554	CompoundStatement		574:0:15944:16161	10790552	0					
ANR	10790555	WhileStatement	while ( * fromP < fromLim && * toP < toLim )		10790552	0					
ANR	10790556	Condition	* fromP < fromLim && * toP < toLim	575:9:15955:15986	10790552	0	True				
ANR	10790557	AndExpression	* fromP < fromLim && * toP < toLim		10790552	0		&&			
ANR	10790558	RelationalExpression	* fromP < fromLim		10790552	0		<			
ANR	10790559	UnaryOperationExpression	* fromP		10790552	0					
ANR	10790560	UnaryOperator	*		10790552	0					
ANR	10790561	Identifier	fromP		10790552	1					
ANR	10790562	Identifier	fromLim		10790552	1					
ANR	10790563	RelationalExpression	* toP < toLim		10790552	1		<			
ANR	10790564	UnaryOperationExpression	* toP		10790552	0					
ANR	10790565	UnaryOperator	*		10790552	0					
ANR	10790566	Identifier	toP		10790552	1					
ANR	10790567	Identifier	toLim		10790552	1					
ANR	10790568	ExpressionStatement	* ( * toP ) ++ = ( unsigned char ) * ( * fromP ) ++	576:4:15993:16031	10790552	1	True				
ANR	10790569	AssignmentExpression	* ( * toP ) ++ = ( unsigned char ) * ( * fromP ) ++		10790552	0		=			
ANR	10790570	UnaryOperationExpression	* ( * toP ) ++		10790552	0					
ANR	10790571	UnaryOperator	*		10790552	0					
ANR	10790572	PostIncDecOperationExpression	( * toP ) ++		10790552	1					
ANR	10790573	UnaryOperationExpression	* toP		10790552	0					
ANR	10790574	UnaryOperator	*		10790552	0					
ANR	10790575	Identifier	toP		10790552	1					
ANR	10790576	IncDec	++		10790552	1					
ANR	10790577	CastExpression	( unsigned char ) * ( * fromP ) ++		10790552	1					
ANR	10790578	CastTarget	unsigned char		10790552	0					
ANR	10790579	UnaryOperationExpression	* ( * fromP ) ++		10790552	1					
ANR	10790580	UnaryOperator	*		10790552	0					
ANR	10790581	PostIncDecOperationExpression	( * fromP ) ++		10790552	1					
ANR	10790582	UnaryOperationExpression	* fromP		10790552	0					
ANR	10790583	UnaryOperator	*		10790552	0					
ANR	10790584	Identifier	fromP		10790552	1					
ANR	10790585	IncDec	++		10790552	1					
ANR	10790586	IfStatement	if ( ( * toP == toLim ) && ( * fromP < fromLim ) )		10790552	1					
ANR	10790587	Condition	( * toP == toLim ) && ( * fromP < fromLim )	578:6:16040:16076	10790552	0	True				
ANR	10790588	AndExpression	( * toP == toLim ) && ( * fromP < fromLim )		10790552	0		&&			
ANR	10790589	EqualityExpression	* toP == toLim		10790552	0		==			
ANR	10790590	UnaryOperationExpression	* toP		10790552	0					
ANR	10790591	UnaryOperator	*		10790552	0					
ANR	10790592	Identifier	toP		10790552	1					
ANR	10790593	Identifier	toLim		10790552	1					
ANR	10790594	RelationalExpression	* fromP < fromLim		10790552	1		<			
ANR	10790595	UnaryOperationExpression	* fromP		10790552	0					
ANR	10790596	UnaryOperator	*		10790552	0					
ANR	10790597	Identifier	fromP		10790552	1					
ANR	10790598	Identifier	fromLim		10790552	1					
ANR	10790599	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	579:4:16083:16118	10790552	1	True				
ANR	10790600	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790552	0					
ANR	10790601	ElseStatement	else		10790552	0					
ANR	10790602	ReturnStatement	return XML_CONVERT_COMPLETED ;	581:4:16131:16159	10790552	0	True				
ANR	10790603	Identifier	XML_CONVERT_COMPLETED		10790552	0					
ANR	10790604	ReturnType	static enum XML_Convert_Result PTRCALL		10790552	1					
ANR	10790605	Identifier	latin1_toUtf16		10790552	2					
ANR	10790606	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim"		10790552	3					
ANR	10790607	Parameter	const ENCODING * UNUSED_P ( enc )	571:15:15791:15819	10790552	0	True				
ANR	10790608	ParameterType	const ENCODING * ( enc )		10790552	0					
ANR	10790609	Identifier	UNUSED_P		10790552	1					
ANR	10790610	Parameter	const char * * fromP	572:15:15837:15854	10790552	1	True				
ANR	10790611	ParameterType	const char * *		10790552	0					
ANR	10790612	Identifier	fromP		10790552	1					
ANR	10790613	Parameter	const char * fromLim	572:35:15857:15875	10790552	2	True				
ANR	10790614	ParameterType	const char *		10790552	0					
ANR	10790615	Identifier	fromLim		10790552	1					
ANR	10790616	Parameter	unsigned short * * toP	573:15:15893:15912	10790552	3	True				
ANR	10790617	ParameterType	unsigned short * *		10790552	0					
ANR	10790618	Identifier	toP		10790552	1					
ANR	10790619	Parameter	const unsigned short * toLim	573:37:15915:15941	10790552	4	True				
ANR	10790620	ParameterType	const unsigned short *		10790552	0					
ANR	10790621	Identifier	toLim		10790552	1					
ANR	10790622	CFGEntryNode	ENTRY		10790552		True				
ANR	10790623	CFGExitNode	EXIT		10790552		True				
ANR	10790624	Symbol	UNUSED_P		10790552						
ANR	10790625	Symbol	toLim		10790552						
ANR	10790626	Symbol	* fromP		10790552						
ANR	10790627	Symbol	fromP		10790552						
ANR	10790628	Symbol	fromLim		10790552						
ANR	10790629	Symbol	toP		10790552						
ANR	10790630	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		10790552						
ANR	10790631	Symbol	* ( * fromP ) ++		10790552						
ANR	10790632	Symbol	* ( * toP ) ++		10790552						
ANR	10790633	Symbol	XML_CONVERT_COMPLETED		10790552						
ANR	10790634	Symbol	* toP		10790552						
ANR	10790635	DeclStmt									
ANR	10790636	Decl							const struct normal_encoding	const struct normal_encoding	latin1_encoding_ns
ANR	10790637	DeclStmt									
ANR	10790638	Decl							const struct normal_encoding	const struct normal_encoding	latin1_encoding
ANR	10790639	Function	ascii_toUtf8	608:0:16641:17024							
ANR	10790640	FunctionDef	"ascii_toUtf8 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		10790639	0					
ANR	10790641	CompoundStatement		612:0:16822:17024	10790639	0					
ANR	10790642	WhileStatement	while ( * fromP < fromLim && * toP < toLim )		10790639	0					
ANR	10790643	Condition	* fromP < fromLim && * toP < toLim	613:9:16833:16864	10790639	0	True				
ANR	10790644	AndExpression	* fromP < fromLim && * toP < toLim		10790639	0		&&			
ANR	10790645	RelationalExpression	* fromP < fromLim		10790639	0		<			
ANR	10790646	UnaryOperationExpression	* fromP		10790639	0					
ANR	10790647	UnaryOperator	*		10790639	0					
ANR	10790648	Identifier	fromP		10790639	1					
ANR	10790649	Identifier	fromLim		10790639	1					
ANR	10790650	RelationalExpression	* toP < toLim		10790639	1		<			
ANR	10790651	UnaryOperationExpression	* toP		10790639	0					
ANR	10790652	UnaryOperator	*		10790639	0					
ANR	10790653	Identifier	toP		10790639	1					
ANR	10790654	Identifier	toLim		10790639	1					
ANR	10790655	ExpressionStatement	* ( * toP ) ++ = * ( * fromP ) ++	614:4:16871:16894	10790639	1	True				
ANR	10790656	AssignmentExpression	* ( * toP ) ++ = * ( * fromP ) ++		10790639	0		=			
ANR	10790657	UnaryOperationExpression	* ( * toP ) ++		10790639	0					
ANR	10790658	UnaryOperator	*		10790639	0					
ANR	10790659	PostIncDecOperationExpression	( * toP ) ++		10790639	1					
ANR	10790660	UnaryOperationExpression	* toP		10790639	0					
ANR	10790661	UnaryOperator	*		10790639	0					
ANR	10790662	Identifier	toP		10790639	1					
ANR	10790663	IncDec	++		10790639	1					
ANR	10790664	UnaryOperationExpression	* ( * fromP ) ++		10790639	1					
ANR	10790665	UnaryOperator	*		10790639	0					
ANR	10790666	PostIncDecOperationExpression	( * fromP ) ++		10790639	1					
ANR	10790667	UnaryOperationExpression	* fromP		10790639	0					
ANR	10790668	UnaryOperator	*		10790639	0					
ANR	10790669	Identifier	fromP		10790639	1					
ANR	10790670	IncDec	++		10790639	1					
ANR	10790671	IfStatement	if ( ( * toP == toLim ) && ( * fromP < fromLim ) )		10790639	1					
ANR	10790672	Condition	( * toP == toLim ) && ( * fromP < fromLim )	616:6:16903:16939	10790639	0	True				
ANR	10790673	AndExpression	( * toP == toLim ) && ( * fromP < fromLim )		10790639	0		&&			
ANR	10790674	EqualityExpression	* toP == toLim		10790639	0		==			
ANR	10790675	UnaryOperationExpression	* toP		10790639	0					
ANR	10790676	UnaryOperator	*		10790639	0					
ANR	10790677	Identifier	toP		10790639	1					
ANR	10790678	Identifier	toLim		10790639	1					
ANR	10790679	RelationalExpression	* fromP < fromLim		10790639	1		<			
ANR	10790680	UnaryOperationExpression	* fromP		10790639	0					
ANR	10790681	UnaryOperator	*		10790639	0					
ANR	10790682	Identifier	fromP		10790639	1					
ANR	10790683	Identifier	fromLim		10790639	1					
ANR	10790684	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	617:4:16946:16981	10790639	1	True				
ANR	10790685	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790639	0					
ANR	10790686	ElseStatement	else		10790639	0					
ANR	10790687	ReturnStatement	return XML_CONVERT_COMPLETED ;	619:4:16994:17022	10790639	0	True				
ANR	10790688	Identifier	XML_CONVERT_COMPLETED		10790639	0					
ANR	10790689	ReturnType	static enum XML_Convert_Result PTRCALL		10790639	1					
ANR	10790690	Identifier	ascii_toUtf8		10790639	2					
ANR	10790691	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		10790639	3					
ANR	10790692	Parameter	const ENCODING * UNUSED_P ( enc )	609:13:16693:16721	10790639	0	True				
ANR	10790693	ParameterType	const ENCODING * ( enc )		10790639	0					
ANR	10790694	Identifier	UNUSED_P		10790639	1					
ANR	10790695	Parameter	const char * * fromP	610:13:16737:16754	10790639	1	True				
ANR	10790696	ParameterType	const char * *		10790639	0					
ANR	10790697	Identifier	fromP		10790639	1					
ANR	10790698	Parameter	const char * fromLim	610:33:16757:16775	10790639	2	True				
ANR	10790699	ParameterType	const char *		10790639	0					
ANR	10790700	Identifier	fromLim		10790639	1					
ANR	10790701	Parameter	char * * toP	611:13:16791:16800	10790639	3	True				
ANR	10790702	ParameterType	char * *		10790639	0					
ANR	10790703	Identifier	toP		10790639	1					
ANR	10790704	Parameter	const char * toLim	611:25:16803:16819	10790639	4	True				
ANR	10790705	ParameterType	const char *		10790639	0					
ANR	10790706	Identifier	toLim		10790639	1					
ANR	10790707	CFGEntryNode	ENTRY		10790639		True				
ANR	10790708	CFGExitNode	EXIT		10790639		True				
ANR	10790709	Symbol	UNUSED_P		10790639						
ANR	10790710	Symbol	toLim		10790639						
ANR	10790711	Symbol	* fromP		10790639						
ANR	10790712	Symbol	fromP		10790639						
ANR	10790713	Symbol	fromLim		10790639						
ANR	10790714	Symbol	toP		10790639						
ANR	10790715	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		10790639						
ANR	10790716	Symbol	* ( * toP ) ++		10790639						
ANR	10790717	Symbol	* ( * fromP ) ++		10790639						
ANR	10790718	Symbol	XML_CONVERT_COMPLETED		10790639						
ANR	10790719	Symbol	* toP		10790639						
ANR	10790720	DeclStmt									
ANR	10790721	Decl							const struct normal_encoding	const struct normal_encoding	ascii_encoding_ns
ANR	10790722	DeclStmt									
ANR	10790723	Decl							const struct normal_encoding	const struct normal_encoding	ascii_encoding
ANR	10790724	Function	unicode_byte_type	646:0:17496:17865							
ANR	10790725	FunctionDef	"unicode_byte_type (char hi , char lo)"		10790724	0					
ANR	10790726	CompoundStatement		648:0:17555:17865	10790724	0					
ANR	10790727	SwitchStatement	switch ( ( unsigned char ) hi )		10790724	0					
ANR	10790728	Condition	( unsigned char ) hi	649:10:17567:17583	10790724	0	True				
ANR	10790729	CastExpression	( unsigned char ) hi		10790724	0					
ANR	10790730	CastTarget	unsigned char		10790724	0					
ANR	10790731	Identifier	hi		10790724	1					
ANR	10790732	CompoundStatement		2:29:30:30	10790724	1					
ANR	10790733	Label	case 0xD8 :	650:2:17590:17599	10790724	0	True				
ANR	10790734	Label	case 0xD9 :	650:13:17601:17610	10790724	1	True				
ANR	10790735	Label	case 0xDA :	650:24:17612:17621	10790724	2	True				
ANR	10790736	Label	case 0xDB :	650:35:17623:17632	10790724	3	True				
ANR	10790737	ReturnStatement	return BT_LEAD4 ;	651:4:17638:17653	10790724	4	True				
ANR	10790738	Identifier	BT_LEAD4		10790724	0					
ANR	10790739	Label	case 0xDC :	652:2:17657:17666	10790724	5	True				
ANR	10790740	Label	case 0xDD :	652:13:17668:17677	10790724	6	True				
ANR	10790741	Label	case 0xDE :	652:24:17679:17688	10790724	7	True				
ANR	10790742	Label	case 0xDF :	652:35:17690:17699	10790724	8	True				
ANR	10790743	ReturnStatement	return BT_TRAIL ;	653:4:17705:17720	10790724	9	True				
ANR	10790744	Identifier	BT_TRAIL		10790724	0					
ANR	10790745	Label	case 0xFF :	654:2:17724:17733	10790724	10	True				
ANR	10790746	SwitchStatement	switch ( ( unsigned char ) lo )		10790724	11					
ANR	10790747	Condition	( unsigned char ) lo	655:12:17747:17763	10790724	0	True				
ANR	10790748	CastExpression	( unsigned char ) lo		10790724	0					
ANR	10790749	CastTarget	unsigned char		10790724	0					
ANR	10790750	Identifier	lo		10790724	1					
ANR	10790751	CompoundStatement		8:31:210:210	10790724	1					
ANR	10790752	Label	case 0xFF :	656:4:17772:17781	10790724	0	True				
ANR	10790753	Label	case 0xFE :	657:4:17787:17796	10790724	1	True				
ANR	10790754	ReturnStatement	return BT_NONXML ;	658:6:17804:17820	10790724	2	True				
ANR	10790755	Identifier	BT_NONXML		10790724	0					
ANR	10790756	BreakStatement	break ;	660:4:17832:17837	10790724	12	True				
ANR	10790757	ReturnStatement	return BT_NONASCII ;	662:2:17845:17863	10790724	1	True				
ANR	10790758	Identifier	BT_NONASCII		10790724	0					
ANR	10790759	ReturnType	static int PTRFASTCALL		10790724	1					
ANR	10790760	Identifier	unicode_byte_type		10790724	2					
ANR	10790761	ParameterList	"char hi , char lo"		10790724	3					
ANR	10790762	Parameter	char hi	647:18:17537:17543	10790724	0	True				
ANR	10790763	ParameterType	char		10790724	0					
ANR	10790764	Identifier	hi		10790724	1					
ANR	10790765	Parameter	char lo	647:27:17546:17552	10790724	1	True				
ANR	10790766	ParameterType	char		10790724	0					
ANR	10790767	Identifier	lo		10790724	1					
ANR	10790768	CFGEntryNode	ENTRY		10790724		True				
ANR	10790769	CFGExitNode	EXIT		10790724		True				
ANR	10790770	Symbol	BT_NONASCII		10790724						
ANR	10790771	Symbol	hi		10790724						
ANR	10790772	Symbol	BT_TRAIL		10790724						
ANR	10790773	Symbol	lo		10790724						
ANR	10790774	Symbol	BT_NONXML		10790724						
ANR	10790775	Symbol	BT_LEAD4		10790724						
ANR	10790776	Function	toUtf8	666:0:17902:20144							
ANR	10790777	FunctionDef	"toUtf8 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		10790776	0					
ANR	10790778	CompoundStatement		670:0:18089:20144	10790776	0					
ANR	10790779	IdentifierDeclStatement	const char * from = * fromP ;	671:2:18095:18120	10790776	0	True				
ANR	10790780	IdentifierDecl	* from = * fromP		10790776	0					
ANR	10790781	IdentifierDeclType	const char *		10790776	0					
ANR	10790782	Identifier	from		10790776	1					
ANR	10790783	AssignmentExpression	* from = * fromP		10790776	2		=			
ANR	10790784	Identifier	from		10790776	0					
ANR	10790785	UnaryOperationExpression	* fromP		10790776	1					
ANR	10790786	UnaryOperator	*		10790776	0					
ANR	10790787	Identifier	fromP		10790776	1					
ANR	10790788	ExpressionStatement	fromLim = from + ( ( ( fromLim - from ) >> 1 ) << 1 )	672:2:18126:18173	10790776	1	True				
ANR	10790789	AssignmentExpression	fromLim = from + ( ( ( fromLim - from ) >> 1 ) << 1 )		10790776	0		=			
ANR	10790790	Identifier	fromLim		10790776	0					
ANR	10790791	AdditiveExpression	from + ( ( ( fromLim - from ) >> 1 ) << 1 )		10790776	1		+			
ANR	10790792	Identifier	from		10790776	0					
ANR	10790793	ShiftExpression	( ( fromLim - from ) >> 1 ) << 1		10790776	1		<<			
ANR	10790794	ShiftExpression	( fromLim - from ) >> 1		10790776	0		>>			
ANR	10790795	AdditiveExpression	fromLim - from		10790776	0		-			
ANR	10790796	Identifier	fromLim		10790776	0					
ANR	10790797	Identifier	from		10790776	1					
ANR	10790798	PrimaryExpression	1		10790776	1					
ANR	10790799	PrimaryExpression	1		10790776	1					
ANR	10790800	ForStatement	for ( ; from < fromLim ; from += 2 )		10790776	2					
ANR	10790801	Condition	from < fromLim	673:9:18208:18221	10790776	0	True				
ANR	10790802	RelationalExpression	from < fromLim		10790776	0		<			
ANR	10790803	Identifier	from		10790776	0					
ANR	10790804	Identifier	fromLim		10790776	1					
ANR	10790805	AssignmentExpression	from += 2	673:25:18224:18232	10790776	1	True	+=			
ANR	10790806	Identifier	from		10790776	0					
ANR	10790807	PrimaryExpression	2		10790776	1					
ANR	10790808	CompoundStatement		8:4:234:265	10790776	2					
ANR	10790809	IdentifierDeclStatement	int plane ;	674:4:18243:18252	10790776	0	True				
ANR	10790810	IdentifierDecl	plane		10790776	0					
ANR	10790811	IdentifierDeclType	int		10790776	0					
ANR	10790812	Identifier	plane		10790776	1					
ANR	10790813	IdentifierDeclStatement	unsigned char lo2 ;	675:4:18260:18277	10790776	1	True				
ANR	10790814	IdentifierDecl	lo2		10790776	0					
ANR	10790815	IdentifierDeclType	unsigned char		10790776	0					
ANR	10790816	Identifier	lo2		10790776	1					
ANR	10790817	IdentifierDeclStatement	unsigned char lo = GET_LO ( from ) ;	676:4:18285:18316	10790776	2	True				
ANR	10790818	IdentifierDecl	lo = GET_LO ( from )		10790776	0					
ANR	10790819	IdentifierDeclType	unsigned char		10790776	0					
ANR	10790820	Identifier	lo		10790776	1					
ANR	10790821	AssignmentExpression	lo = GET_LO ( from )		10790776	2		=			
ANR	10790822	Identifier	lo		10790776	0					
ANR	10790823	CallExpression	GET_LO ( from )		10790776	1					
ANR	10790824	Callee	GET_LO		10790776	0					
ANR	10790825	Identifier	GET_LO		10790776	0					
ANR	10790826	ArgumentList	from		10790776	1					
ANR	10790827	Argument	from		10790776	0					
ANR	10790828	Identifier	from		10790776	0					
ANR	10790829	IdentifierDeclStatement	unsigned char hi = GET_HI ( from ) ;	677:4:18324:18355	10790776	3	True				
ANR	10790830	IdentifierDecl	hi = GET_HI ( from )		10790776	0					
ANR	10790831	IdentifierDeclType	unsigned char		10790776	0					
ANR	10790832	Identifier	hi		10790776	1					
ANR	10790833	AssignmentExpression	hi = GET_HI ( from )		10790776	2		=			
ANR	10790834	Identifier	hi		10790776	0					
ANR	10790835	CallExpression	GET_HI ( from )		10790776	1					
ANR	10790836	Callee	GET_HI		10790776	0					
ANR	10790837	Identifier	GET_HI		10790776	0					
ANR	10790838	ArgumentList	from		10790776	1					
ANR	10790839	Argument	from		10790776	0					
ANR	10790840	Identifier	from		10790776	0					
ANR	10790841	SwitchStatement	switch ( hi )		10790776	4					
ANR	10790842	Condition	hi	678:12:18371:18372	10790776	0	True				
ANR	10790843	Identifier	hi		10790776	0					
ANR	10790844	CompoundStatement		9:16:285:285	10790776	1					
ANR	10790845	Label	case 0 :	679:4:18383:18389	10790776	0	True				
ANR	10790846	IfStatement	if ( lo < 0x80 )		10790776	1					
ANR	10790847	Condition	lo < 0x80	680:10:18403:18411	10790776	0	True				
ANR	10790848	RelationalExpression	lo < 0x80		10790776	0		<			
ANR	10790849	Identifier	lo		10790776	0					
ANR	10790850	PrimaryExpression	0x80		10790776	1					
ANR	10790851	CompoundStatement		11:21:324:324	10790776	1					
ANR	10790852	IfStatement	if ( * toP == toLim )		10790776	0					
ANR	10790853	Condition	* toP == toLim	681:12:18430:18442	10790776	0	True				
ANR	10790854	EqualityExpression	* toP == toLim		10790776	0		==			
ANR	10790855	UnaryOperationExpression	* toP		10790776	0					
ANR	10790856	UnaryOperator	*		10790776	0					
ANR	10790857	Identifier	toP		10790776	1					
ANR	10790858	Identifier	toLim		10790776	1					
ANR	10790859	CompoundStatement		12:27:355:355	10790776	1					
ANR	10790860	ExpressionStatement	* fromP = from	682:10:18459:18472	10790776	0	True				
ANR	10790861	AssignmentExpression	* fromP = from		10790776	0		=			
ANR	10790862	UnaryOperationExpression	* fromP		10790776	0					
ANR	10790863	UnaryOperator	*		10790776	0					
ANR	10790864	Identifier	fromP		10790776	1					
ANR	10790865	Identifier	from		10790776	1					
ANR	10790866	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	683:10:18486:18521	10790776	1	True				
ANR	10790867	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790776	0					
ANR	10790868	ExpressionStatement	* ( * toP ) ++ = lo	685:8:18545:18559	10790776	1	True				
ANR	10790869	AssignmentExpression	* ( * toP ) ++ = lo		10790776	0		=			
ANR	10790870	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10790871	UnaryOperator	*		10790776	0					
ANR	10790872	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10790873	UnaryOperationExpression	* toP		10790776	0					
ANR	10790874	UnaryOperator	*		10790776	0					
ANR	10790875	Identifier	toP		10790776	1					
ANR	10790876	IncDec	++		10790776	1					
ANR	10790877	Identifier	lo		10790776	1					
ANR	10790878	BreakStatement	break ;	686:8:18571:18576	10790776	2	True				
ANR	10790879	Label	case 0x1 :	689:4:18621:18629	10790776	2	True				
ANR	10790880	Label	case 0x2 :	689:14:18631:18639	10790776	3	True				
ANR	10790881	Label	case 0x3 :	689:24:18641:18649	10790776	4	True				
ANR	10790882	Label	case 0x4 :	690:4:18657:18665	10790776	5	True				
ANR	10790883	Label	case 0x5 :	690:14:18667:18675	10790776	6	True				
ANR	10790884	Label	case 0x6 :	690:24:18677:18685	10790776	7	True				
ANR	10790885	Label	case 0x7 :	690:34:18687:18695	10790776	8	True				
ANR	10790886	IfStatement	if ( toLim - * toP < 2 )		10790776	9					
ANR	10790887	Condition	toLim - * toP < 2	691:10:18709:18725	10790776	0	True				
ANR	10790888	RelationalExpression	toLim - * toP < 2		10790776	0		<			
ANR	10790889	AdditiveExpression	toLim - * toP		10790776	0		-			
ANR	10790890	Identifier	toLim		10790776	0					
ANR	10790891	UnaryOperationExpression	* toP		10790776	1					
ANR	10790892	UnaryOperator	*		10790776	0					
ANR	10790893	Identifier	toP		10790776	1					
ANR	10790894	PrimaryExpression	2		10790776	1					
ANR	10790895	CompoundStatement		22:29:638:638	10790776	1					
ANR	10790896	ExpressionStatement	* fromP = from	692:8:18740:18753	10790776	0	True				
ANR	10790897	AssignmentExpression	* fromP = from		10790776	0		=			
ANR	10790898	UnaryOperationExpression	* fromP		10790776	0					
ANR	10790899	UnaryOperator	*		10790776	0					
ANR	10790900	Identifier	fromP		10790776	1					
ANR	10790901	Identifier	from		10790776	1					
ANR	10790902	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	693:8:18765:18800	10790776	1	True				
ANR	10790903	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790776	0					
ANR	10790904	ExpressionStatement	* ( * toP ) ++ = ( ( lo >> 6 ) | ( hi << 2 ) | UTF8_cval2 )	695:6:18820:18869	10790776	10	True				
ANR	10790905	AssignmentExpression	* ( * toP ) ++ = ( ( lo >> 6 ) | ( hi << 2 ) | UTF8_cval2 )		10790776	0		=			
ANR	10790906	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10790907	UnaryOperator	*		10790776	0					
ANR	10790908	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10790909	UnaryOperationExpression	* toP		10790776	0					
ANR	10790910	UnaryOperator	*		10790776	0					
ANR	10790911	Identifier	toP		10790776	1					
ANR	10790912	IncDec	++		10790776	1					
ANR	10790913	InclusiveOrExpression	( lo >> 6 ) | ( hi << 2 ) | UTF8_cval2		10790776	1		|			
ANR	10790914	ShiftExpression	lo >> 6		10790776	0		>>			
ANR	10790915	Identifier	lo		10790776	0					
ANR	10790916	PrimaryExpression	6		10790776	1					
ANR	10790917	InclusiveOrExpression	( hi << 2 ) | UTF8_cval2		10790776	1		|			
ANR	10790918	ShiftExpression	hi << 2		10790776	0		<<			
ANR	10790919	Identifier	hi		10790776	0					
ANR	10790920	PrimaryExpression	2		10790776	1					
ANR	10790921	Identifier	UTF8_cval2		10790776	1					
ANR	10790922	ExpressionStatement	* ( * toP ) ++ = ( ( lo & 0x3f ) | 0x80 )	696:6:18879:18911	10790776	11	True				
ANR	10790923	AssignmentExpression	* ( * toP ) ++ = ( ( lo & 0x3f ) | 0x80 )		10790776	0		=			
ANR	10790924	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10790925	UnaryOperator	*		10790776	0					
ANR	10790926	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10790927	UnaryOperationExpression	* toP		10790776	0					
ANR	10790928	UnaryOperator	*		10790776	0					
ANR	10790929	Identifier	toP		10790776	1					
ANR	10790930	IncDec	++		10790776	1					
ANR	10790931	InclusiveOrExpression	( lo & 0x3f ) | 0x80		10790776	1		|			
ANR	10790932	BitAndExpression	lo & 0x3f		10790776	0		&			
ANR	10790933	Identifier	lo		10790776	0					
ANR	10790934	PrimaryExpression	0x3f		10790776	1					
ANR	10790935	PrimaryExpression	0x80		10790776	1					
ANR	10790936	BreakStatement	break ;	697:6:18921:18926	10790776	12	True				
ANR	10790937	Label	default :	698:4:18934:18941	10790776	13	True				
ANR	10790938	Identifier	default		10790776	0					
ANR	10790939	IfStatement	if ( toLim - * toP < 3 )		10790776	14					
ANR	10790940	Condition	toLim - * toP < 3	699:10:18955:18971	10790776	0	True				
ANR	10790941	RelationalExpression	toLim - * toP < 3		10790776	0		<			
ANR	10790942	AdditiveExpression	toLim - * toP		10790776	0		-			
ANR	10790943	Identifier	toLim		10790776	0					
ANR	10790944	UnaryOperationExpression	* toP		10790776	1					
ANR	10790945	UnaryOperator	*		10790776	0					
ANR	10790946	Identifier	toP		10790776	1					
ANR	10790947	PrimaryExpression	3		10790776	1					
ANR	10790948	CompoundStatement		30:30:885:885	10790776	1					
ANR	10790949	ExpressionStatement	* fromP = from	700:8:18987:19000	10790776	0	True				
ANR	10790950	AssignmentExpression	* fromP = from		10790776	0		=			
ANR	10790951	UnaryOperationExpression	* fromP		10790776	0					
ANR	10790952	UnaryOperator	*		10790776	0					
ANR	10790953	Identifier	fromP		10790776	1					
ANR	10790954	Identifier	from		10790776	1					
ANR	10790955	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	701:8:19012:19047	10790776	1	True				
ANR	10790956	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790776	0					
ANR	10790957	ExpressionStatement	* ( * toP ) ++ = ( ( hi >> 4 ) | UTF8_cval3 )	704:6:19121:19157	10790776	15	True				
ANR	10790958	AssignmentExpression	* ( * toP ) ++ = ( ( hi >> 4 ) | UTF8_cval3 )		10790776	0		=			
ANR	10790959	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10790960	UnaryOperator	*		10790776	0					
ANR	10790961	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10790962	UnaryOperationExpression	* toP		10790776	0					
ANR	10790963	UnaryOperator	*		10790776	0					
ANR	10790964	Identifier	toP		10790776	1					
ANR	10790965	IncDec	++		10790776	1					
ANR	10790966	InclusiveOrExpression	( hi >> 4 ) | UTF8_cval3		10790776	1		|			
ANR	10790967	ShiftExpression	hi >> 4		10790776	0		>>			
ANR	10790968	Identifier	hi		10790776	0					
ANR	10790969	PrimaryExpression	4		10790776	1					
ANR	10790970	Identifier	UTF8_cval3		10790776	1					
ANR	10790971	ExpressionStatement	* ( * toP ) ++ = ( ( ( hi & 0xf ) << 2 ) | ( lo >> 6 ) | 0x80 )	705:6:19167:19217	10790776	16	True				
ANR	10790972	AssignmentExpression	* ( * toP ) ++ = ( ( ( hi & 0xf ) << 2 ) | ( lo >> 6 ) | 0x80 )		10790776	0		=			
ANR	10790973	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10790974	UnaryOperator	*		10790776	0					
ANR	10790975	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10790976	UnaryOperationExpression	* toP		10790776	0					
ANR	10790977	UnaryOperator	*		10790776	0					
ANR	10790978	Identifier	toP		10790776	1					
ANR	10790979	IncDec	++		10790776	1					
ANR	10790980	InclusiveOrExpression	( ( hi & 0xf ) << 2 ) | ( lo >> 6 ) | 0x80		10790776	1		|			
ANR	10790981	ShiftExpression	( hi & 0xf ) << 2		10790776	0		<<			
ANR	10790982	BitAndExpression	hi & 0xf		10790776	0		&			
ANR	10790983	Identifier	hi		10790776	0					
ANR	10790984	PrimaryExpression	0xf		10790776	1					
ANR	10790985	PrimaryExpression	2		10790776	1					
ANR	10790986	InclusiveOrExpression	( lo >> 6 ) | 0x80		10790776	1		|			
ANR	10790987	ShiftExpression	lo >> 6		10790776	0		>>			
ANR	10790988	Identifier	lo		10790776	0					
ANR	10790989	PrimaryExpression	6		10790776	1					
ANR	10790990	PrimaryExpression	0x80		10790776	1					
ANR	10790991	ExpressionStatement	* ( * toP ) ++ = ( ( lo & 0x3f ) | 0x80 )	706:6:19227:19259	10790776	17	True				
ANR	10790992	AssignmentExpression	* ( * toP ) ++ = ( ( lo & 0x3f ) | 0x80 )		10790776	0		=			
ANR	10790993	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10790994	UnaryOperator	*		10790776	0					
ANR	10790995	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10790996	UnaryOperationExpression	* toP		10790776	0					
ANR	10790997	UnaryOperator	*		10790776	0					
ANR	10790998	Identifier	toP		10790776	1					
ANR	10790999	IncDec	++		10790776	1					
ANR	10791000	InclusiveOrExpression	( lo & 0x3f ) | 0x80		10790776	1		|			
ANR	10791001	BitAndExpression	lo & 0x3f		10790776	0		&			
ANR	10791002	Identifier	lo		10790776	0					
ANR	10791003	PrimaryExpression	0x3f		10790776	1					
ANR	10791004	PrimaryExpression	0x80		10790776	1					
ANR	10791005	BreakStatement	break ;	707:6:19269:19274	10790776	18	True				
ANR	10791006	Label	case 0xD8 :	708:4:19282:19291	10790776	19	True				
ANR	10791007	Label	case 0xD9 :	708:15:19293:19302	10790776	20	True				
ANR	10791008	Label	case 0xDA :	708:26:19304:19313	10790776	21	True				
ANR	10791009	Label	case 0xDB :	708:37:19315:19324	10790776	22	True				
ANR	10791010	IfStatement	if ( toLim - * toP < 4 )		10790776	23					
ANR	10791011	Condition	toLim - * toP < 4	709:10:19338:19354	10790776	0	True				
ANR	10791012	RelationalExpression	toLim - * toP < 4		10790776	0		<			
ANR	10791013	AdditiveExpression	toLim - * toP		10790776	0		-			
ANR	10791014	Identifier	toLim		10790776	0					
ANR	10791015	UnaryOperationExpression	* toP		10790776	1					
ANR	10791016	UnaryOperator	*		10790776	0					
ANR	10791017	Identifier	toP		10790776	1					
ANR	10791018	PrimaryExpression	4		10790776	1					
ANR	10791019	CompoundStatement		40:29:1267:1267	10790776	1					
ANR	10791020	ExpressionStatement	* fromP = from	710:8:19369:19382	10790776	0	True				
ANR	10791021	AssignmentExpression	* fromP = from		10790776	0		=			
ANR	10791022	UnaryOperationExpression	* fromP		10790776	0					
ANR	10791023	UnaryOperator	*		10790776	0					
ANR	10791024	Identifier	fromP		10790776	1					
ANR	10791025	Identifier	from		10790776	1					
ANR	10791026	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	711:8:19394:19429	10790776	1	True				
ANR	10791027	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10790776	0					
ANR	10791028	IfStatement	if ( fromLim - from < 4 )		10790776	24					
ANR	10791029	Condition	fromLim - from < 4	713:10:19453:19470	10790776	0	True				
ANR	10791030	RelationalExpression	fromLim - from < 4		10790776	0		<			
ANR	10791031	AdditiveExpression	fromLim - from		10790776	0		-			
ANR	10791032	Identifier	fromLim		10790776	0					
ANR	10791033	Identifier	from		10790776	1					
ANR	10791034	PrimaryExpression	4		10790776	1					
ANR	10791035	CompoundStatement		44:30:1383:1383	10790776	1					
ANR	10791036	ExpressionStatement	* fromP = from	714:8:19485:19498	10790776	0	True				
ANR	10791037	AssignmentExpression	* fromP = from		10790776	0		=			
ANR	10791038	UnaryOperationExpression	* fromP		10790776	0					
ANR	10791039	UnaryOperator	*		10790776	0					
ANR	10791040	Identifier	fromP		10790776	1					
ANR	10791041	Identifier	from		10790776	1					
ANR	10791042	ReturnStatement	return XML_CONVERT_INPUT_INCOMPLETE ;	715:8:19510:19545	10790776	1	True				
ANR	10791043	Identifier	XML_CONVERT_INPUT_INCOMPLETE		10790776	0					
ANR	10791044	ExpressionStatement	plane = ( ( ( hi & 0x3 ) << 2 ) | ( ( lo >> 6 ) & 0x3 ) ) + 1	717:6:19565:19616	10790776	25	True				
ANR	10791045	AssignmentExpression	plane = ( ( ( hi & 0x3 ) << 2 ) | ( ( lo >> 6 ) & 0x3 ) ) + 1		10790776	0		=			
ANR	10791046	Identifier	plane		10790776	0					
ANR	10791047	AdditiveExpression	( ( ( hi & 0x3 ) << 2 ) | ( ( lo >> 6 ) & 0x3 ) ) + 1		10790776	1		+			
ANR	10791048	InclusiveOrExpression	( ( hi & 0x3 ) << 2 ) | ( ( lo >> 6 ) & 0x3 )		10790776	0		|			
ANR	10791049	ShiftExpression	( hi & 0x3 ) << 2		10790776	0		<<			
ANR	10791050	BitAndExpression	hi & 0x3		10790776	0		&			
ANR	10791051	Identifier	hi		10790776	0					
ANR	10791052	PrimaryExpression	0x3		10790776	1					
ANR	10791053	PrimaryExpression	2		10790776	1					
ANR	10791054	BitAndExpression	( lo >> 6 ) & 0x3		10790776	1		&			
ANR	10791055	ShiftExpression	lo >> 6		10790776	0		>>			
ANR	10791056	Identifier	lo		10790776	0					
ANR	10791057	PrimaryExpression	6		10790776	1					
ANR	10791058	PrimaryExpression	0x3		10790776	1					
ANR	10791059	PrimaryExpression	1		10790776	1					
ANR	10791060	ExpressionStatement	* ( * toP ) ++ = ( ( plane >> 2 ) | UTF8_cval4 )	718:6:19626:19665	10790776	26	True				
ANR	10791061	AssignmentExpression	* ( * toP ) ++ = ( ( plane >> 2 ) | UTF8_cval4 )		10790776	0		=			
ANR	10791062	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10791063	UnaryOperator	*		10790776	0					
ANR	10791064	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10791065	UnaryOperationExpression	* toP		10790776	0					
ANR	10791066	UnaryOperator	*		10790776	0					
ANR	10791067	Identifier	toP		10790776	1					
ANR	10791068	IncDec	++		10790776	1					
ANR	10791069	InclusiveOrExpression	( plane >> 2 ) | UTF8_cval4		10790776	1		|			
ANR	10791070	ShiftExpression	plane >> 2		10790776	0		>>			
ANR	10791071	Identifier	plane		10790776	0					
ANR	10791072	PrimaryExpression	2		10790776	1					
ANR	10791073	Identifier	UTF8_cval4		10790776	1					
ANR	10791074	ExpressionStatement	* ( * toP ) ++ = ( ( ( lo >> 2 ) & 0xF ) | ( ( plane & 0x3 ) << 4 ) | 0x80 )	719:6:19675:19736	10790776	27	True				
ANR	10791075	AssignmentExpression	* ( * toP ) ++ = ( ( ( lo >> 2 ) & 0xF ) | ( ( plane & 0x3 ) << 4 ) | 0x80 )		10790776	0		=			
ANR	10791076	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10791077	UnaryOperator	*		10790776	0					
ANR	10791078	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10791079	UnaryOperationExpression	* toP		10790776	0					
ANR	10791080	UnaryOperator	*		10790776	0					
ANR	10791081	Identifier	toP		10790776	1					
ANR	10791082	IncDec	++		10790776	1					
ANR	10791083	InclusiveOrExpression	( ( lo >> 2 ) & 0xF ) | ( ( plane & 0x3 ) << 4 ) | 0x80		10790776	1		|			
ANR	10791084	BitAndExpression	( lo >> 2 ) & 0xF		10790776	0		&			
ANR	10791085	ShiftExpression	lo >> 2		10790776	0		>>			
ANR	10791086	Identifier	lo		10790776	0					
ANR	10791087	PrimaryExpression	2		10790776	1					
ANR	10791088	PrimaryExpression	0xF		10790776	1					
ANR	10791089	InclusiveOrExpression	( ( plane & 0x3 ) << 4 ) | 0x80		10790776	1		|			
ANR	10791090	ShiftExpression	( plane & 0x3 ) << 4		10790776	0		<<			
ANR	10791091	BitAndExpression	plane & 0x3		10790776	0		&			
ANR	10791092	Identifier	plane		10790776	0					
ANR	10791093	PrimaryExpression	0x3		10790776	1					
ANR	10791094	PrimaryExpression	4		10790776	1					
ANR	10791095	PrimaryExpression	0x80		10790776	1					
ANR	10791096	ExpressionStatement	from += 2	720:6:19746:19755	10790776	28	True				
ANR	10791097	AssignmentExpression	from += 2		10790776	0		+=			
ANR	10791098	Identifier	from		10790776	0					
ANR	10791099	PrimaryExpression	2		10790776	1					
ANR	10791100	ExpressionStatement	lo2 = GET_LO ( from )	721:6:19765:19783	10790776	29	True				
ANR	10791101	AssignmentExpression	lo2 = GET_LO ( from )		10790776	0		=			
ANR	10791102	Identifier	lo2		10790776	0					
ANR	10791103	CallExpression	GET_LO ( from )		10790776	1					
ANR	10791104	Callee	GET_LO		10790776	0					
ANR	10791105	Identifier	GET_LO		10790776	0					
ANR	10791106	ArgumentList	from		10790776	1					
ANR	10791107	Argument	from		10790776	0					
ANR	10791108	Identifier	from		10790776	0					
ANR	10791109	ExpressionStatement	* ( * toP ) ++ = ( ( ( lo & 0x3 ) << 4 ) | ( ( GET_HI ( from ) & 0x3 ) << 2 ) | ( lo2 >> 6 ) | 0x80 )	722:6:19793:19937	10790776	30	True				
ANR	10791110	AssignmentExpression	* ( * toP ) ++ = ( ( ( lo & 0x3 ) << 4 ) | ( ( GET_HI ( from ) & 0x3 ) << 2 ) | ( lo2 >> 6 ) | 0x80 )		10790776	0		=			
ANR	10791111	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10791112	UnaryOperator	*		10790776	0					
ANR	10791113	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10791114	UnaryOperationExpression	* toP		10790776	0					
ANR	10791115	UnaryOperator	*		10790776	0					
ANR	10791116	Identifier	toP		10790776	1					
ANR	10791117	IncDec	++		10790776	1					
ANR	10791118	InclusiveOrExpression	( ( lo & 0x3 ) << 4 ) | ( ( GET_HI ( from ) & 0x3 ) << 2 ) | ( lo2 >> 6 ) | 0x80		10790776	1		|			
ANR	10791119	ShiftExpression	( lo & 0x3 ) << 4		10790776	0		<<			
ANR	10791120	BitAndExpression	lo & 0x3		10790776	0		&			
ANR	10791121	Identifier	lo		10790776	0					
ANR	10791122	PrimaryExpression	0x3		10790776	1					
ANR	10791123	PrimaryExpression	4		10790776	1					
ANR	10791124	InclusiveOrExpression	( ( GET_HI ( from ) & 0x3 ) << 2 ) | ( lo2 >> 6 ) | 0x80		10790776	1		|			
ANR	10791125	ShiftExpression	( GET_HI ( from ) & 0x3 ) << 2		10790776	0		<<			
ANR	10791126	BitAndExpression	GET_HI ( from ) & 0x3		10790776	0		&			
ANR	10791127	CallExpression	GET_HI ( from )		10790776	0					
ANR	10791128	Callee	GET_HI		10790776	0					
ANR	10791129	Identifier	GET_HI		10790776	0					
ANR	10791130	ArgumentList	from		10790776	1					
ANR	10791131	Argument	from		10790776	0					
ANR	10791132	Identifier	from		10790776	0					
ANR	10791133	PrimaryExpression	0x3		10790776	1					
ANR	10791134	PrimaryExpression	2		10790776	1					
ANR	10791135	InclusiveOrExpression	( lo2 >> 6 ) | 0x80		10790776	1		|			
ANR	10791136	ShiftExpression	lo2 >> 6		10790776	0		>>			
ANR	10791137	Identifier	lo2		10790776	0					
ANR	10791138	PrimaryExpression	6		10790776	1					
ANR	10791139	PrimaryExpression	0x80		10790776	1					
ANR	10791140	ExpressionStatement	* ( * toP ) ++ = ( ( lo2 & 0x3f ) | 0x80 )	726:6:19947:19980	10790776	31	True				
ANR	10791141	AssignmentExpression	* ( * toP ) ++ = ( ( lo2 & 0x3f ) | 0x80 )		10790776	0		=			
ANR	10791142	UnaryOperationExpression	* ( * toP ) ++		10790776	0					
ANR	10791143	UnaryOperator	*		10790776	0					
ANR	10791144	PostIncDecOperationExpression	( * toP ) ++		10790776	1					
ANR	10791145	UnaryOperationExpression	* toP		10790776	0					
ANR	10791146	UnaryOperator	*		10790776	0					
ANR	10791147	Identifier	toP		10790776	1					
ANR	10791148	IncDec	++		10790776	1					
ANR	10791149	InclusiveOrExpression	( lo2 & 0x3f ) | 0x80		10790776	1		|			
ANR	10791150	BitAndExpression	lo2 & 0x3f		10790776	0		&			
ANR	10791151	Identifier	lo2		10790776	0					
ANR	10791152	PrimaryExpression	0x3f		10790776	1					
ANR	10791153	PrimaryExpression	0x80		10790776	1					
ANR	10791154	BreakStatement	break ;	727:6:19990:19995	10790776	32	True				
ANR	10791155	ExpressionStatement	* fromP = from	730:2:20015:20028	10790776	3	True				
ANR	10791156	AssignmentExpression	* fromP = from		10790776	0		=			
ANR	10791157	UnaryOperationExpression	* fromP		10790776	0					
ANR	10791158	UnaryOperator	*		10790776	0					
ANR	10791159	Identifier	fromP		10790776	1					
ANR	10791160	Identifier	from		10790776	1					
ANR	10791161	IfStatement	if ( from < fromLim )		10790776	4					
ANR	10791162	Condition	from < fromLim	731:6:20038:20051	10790776	0	True				
ANR	10791163	RelationalExpression	from < fromLim		10790776	0		<			
ANR	10791164	Identifier	from		10790776	0					
ANR	10791165	Identifier	fromLim		10790776	1					
ANR	10791166	ReturnStatement	return XML_CONVERT_INPUT_INCOMPLETE ;	732:4:20060:20095	10790776	1	True				
ANR	10791167	Identifier	XML_CONVERT_INPUT_INCOMPLETE		10790776	0					
ANR	10791168	ElseStatement	else		10790776	0					
ANR	10791169	ReturnStatement	return XML_CONVERT_COMPLETED ;	734:4:20112:20140	10790776	0	True				
ANR	10791170	Identifier	XML_CONVERT_COMPLETED		10790776	0					
ANR	10791171	ReturnType	static enum XML_Convert_Result PTRCALL E		10790776	1					
ANR	10791172	Identifier	toUtf8		10790776	2					
ANR	10791173	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		10790776	3					
ANR	10791174	Parameter	const ENCODING * UNUSED_P ( enc )	667:12:17956:17984	10790776	0	True				
ANR	10791175	ParameterType	const ENCODING * ( enc )		10790776	0					
ANR	10791176	Identifier	UNUSED_P		10790776	1					
ANR	10791177	Parameter	const char * * fromP	668:12:18001:18018	10790776	1	True				
ANR	10791178	ParameterType	const char * *		10790776	0					
ANR	10791179	Identifier	fromP		10790776	1					
ANR	10791180	Parameter	const char * fromLim	668:32:18021:18039	10790776	2	True				
ANR	10791181	ParameterType	const char *		10790776	0					
ANR	10791182	Identifier	fromLim		10790776	1					
ANR	10791183	Parameter	char * * toP	669:12:18056:18065	10790776	3	True				
ANR	10791184	ParameterType	char * *		10790776	0					
ANR	10791185	Identifier	toP		10790776	1					
ANR	10791186	Parameter	const char * toLim	669:24:18068:18084	10790776	4	True				
ANR	10791187	ParameterType	const char *		10790776	0					
ANR	10791188	Identifier	toLim		10790776	1					
ANR	10791189	CFGEntryNode	ENTRY		10790776		True				
ANR	10791190	CFGExitNode	EXIT		10790776		True				
ANR	10791191	Symbol	UNUSED_P		10790776						
ANR	10791192	Symbol	plane		10790776						
ANR	10791193	Symbol	hi		10790776						
ANR	10791194	Symbol	toLim		10790776						
ANR	10791195	Symbol	* fromP		10790776						
ANR	10791196	Symbol	lo		10790776						
ANR	10791197	Symbol	UTF8_cval4		10790776						
ANR	10791198	Symbol	XML_CONVERT_INPUT_INCOMPLETE		10790776						
ANR	10791199	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		10790776						
ANR	10791200	Symbol	* ( * toP ) ++		10790776						
ANR	10791201	Symbol	UTF8_cval2		10790776						
ANR	10791202	Symbol	UTF8_cval3		10790776						
ANR	10791203	Symbol	lo2		10790776						
ANR	10791204	Symbol	GET_LO		10790776						
ANR	10791205	Symbol	fromP		10790776						
ANR	10791206	Symbol	fromLim		10790776						
ANR	10791207	Symbol	toP		10790776						
ANR	10791208	Symbol	GET_HI		10790776						
ANR	10791209	Symbol	from		10790776						
ANR	10791210	Symbol	XML_CONVERT_COMPLETED		10790776						
ANR	10791211	Symbol	* toP		10790776						
ANR	10791212	Function	toUtf16	738:0:20182:20986							
ANR	10791213	FunctionDef	"toUtf16 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim)"		10791212	0					
ANR	10791214	CompoundStatement		742:0:20392:20986	10791212	0					
ANR	10791215	IdentifierDeclStatement	enum XML_Convert_Result res = XML_CONVERT_COMPLETED ;	743:2:20398:20449	10791212	0	True				
ANR	10791216	IdentifierDecl	res = XML_CONVERT_COMPLETED		10791212	0					
ANR	10791217	IdentifierDeclType	enum XML_Convert_Result		10791212	0					
ANR	10791218	Identifier	res		10791212	1					
ANR	10791219	AssignmentExpression	res = XML_CONVERT_COMPLETED		10791212	2		=			
ANR	10791220	Identifier	XML_CONVERT_COMPLETED		10791212	0					
ANR	10791221	Identifier	XML_CONVERT_COMPLETED		10791212	1					
ANR	10791222	ExpressionStatement	fromLim = * fromP + ( ( ( fromLim - * fromP ) >> 1 ) << 1 )	744:2:20455:20506	10791212	1	True				
ANR	10791223	AssignmentExpression	fromLim = * fromP + ( ( ( fromLim - * fromP ) >> 1 ) << 1 )		10791212	0		=			
ANR	10791224	Identifier	fromLim		10791212	0					
ANR	10791225	AdditiveExpression	* fromP + ( ( ( fromLim - * fromP ) >> 1 ) << 1 )		10791212	1		+			
ANR	10791226	UnaryOperationExpression	* fromP		10791212	0					
ANR	10791227	UnaryOperator	*		10791212	0					
ANR	10791228	Identifier	fromP		10791212	1					
ANR	10791229	ShiftExpression	( ( fromLim - * fromP ) >> 1 ) << 1		10791212	1		<<			
ANR	10791230	ShiftExpression	( fromLim - * fromP ) >> 1		10791212	0		>>			
ANR	10791231	AdditiveExpression	fromLim - * fromP		10791212	0		-			
ANR	10791232	Identifier	fromLim		10791212	0					
ANR	10791233	UnaryOperationExpression	* fromP		10791212	1					
ANR	10791234	UnaryOperator	*		10791212	0					
ANR	10791235	Identifier	fromP		10791212	1					
ANR	10791236	PrimaryExpression	1		10791212	1					
ANR	10791237	PrimaryExpression	1		10791212	1					
ANR	10791238	IfStatement	if ( fromLim - * fromP > ( ( toLim - * toP ) << 1 ) && ( GET_HI ( fromLim - 2 ) & 0xF8 ) == 0xD8 )		10791212	2					
ANR	10791239	Condition	fromLim - * fromP > ( ( toLim - * toP ) << 1 ) && ( GET_HI ( fromLim - 2 ) & 0xF8 ) == 0xD8	746:6:20591:20678	10791212	0	True				
ANR	10791240	AndExpression	fromLim - * fromP > ( ( toLim - * toP ) << 1 ) && ( GET_HI ( fromLim - 2 ) & 0xF8 ) == 0xD8		10791212	0		&&			
ANR	10791241	RelationalExpression	fromLim - * fromP > ( ( toLim - * toP ) << 1 )		10791212	0		>			
ANR	10791242	AdditiveExpression	fromLim - * fromP		10791212	0		-			
ANR	10791243	Identifier	fromLim		10791212	0					
ANR	10791244	UnaryOperationExpression	* fromP		10791212	1					
ANR	10791245	UnaryOperator	*		10791212	0					
ANR	10791246	Identifier	fromP		10791212	1					
ANR	10791247	ShiftExpression	( toLim - * toP ) << 1		10791212	1		<<			
ANR	10791248	AdditiveExpression	toLim - * toP		10791212	0		-			
ANR	10791249	Identifier	toLim		10791212	0					
ANR	10791250	UnaryOperationExpression	* toP		10791212	1					
ANR	10791251	UnaryOperator	*		10791212	0					
ANR	10791252	Identifier	toP		10791212	1					
ANR	10791253	PrimaryExpression	1		10791212	1					
ANR	10791254	EqualityExpression	( GET_HI ( fromLim - 2 ) & 0xF8 ) == 0xD8		10791212	1		==			
ANR	10791255	BitAndExpression	GET_HI ( fromLim - 2 ) & 0xF8		10791212	0		&			
ANR	10791256	CallExpression	GET_HI ( fromLim - 2 )		10791212	0					
ANR	10791257	Callee	GET_HI		10791212	0					
ANR	10791258	Identifier	GET_HI		10791212	0					
ANR	10791259	ArgumentList	fromLim - 2		10791212	1					
ANR	10791260	Argument	fromLim - 2		10791212	0					
ANR	10791261	AdditiveExpression	fromLim - 2		10791212	0		-			
ANR	10791262	Identifier	fromLim		10791212	0					
ANR	10791263	PrimaryExpression	2		10791212	1					
ANR	10791264	PrimaryExpression	0xF8		10791212	1					
ANR	10791265	PrimaryExpression	0xD8		10791212	1					
ANR	10791266	CompoundStatement		6:47:288:288	10791212	1					
ANR	10791267	ExpressionStatement	fromLim -= 2	748:4:20689:20701	10791212	0	True				
ANR	10791268	AssignmentExpression	fromLim -= 2		10791212	0		-=			
ANR	10791269	Identifier	fromLim		10791212	0					
ANR	10791270	PrimaryExpression	2		10791212	1					
ANR	10791271	ExpressionStatement	res = XML_CONVERT_INPUT_INCOMPLETE	749:4:20709:20743	10791212	1	True				
ANR	10791272	AssignmentExpression	res = XML_CONVERT_INPUT_INCOMPLETE		10791212	0		=			
ANR	10791273	Identifier	res		10791212	0					
ANR	10791274	Identifier	XML_CONVERT_INPUT_INCOMPLETE		10791212	1					
ANR	10791275	ForStatement	for ( ; * fromP < fromLim && * toP < toLim ; * fromP += 2 )		10791212	3					
ANR	10791276	Condition	* fromP < fromLim && * toP < toLim	751:9:20762:20793	10791212	0	True				
ANR	10791277	AndExpression	* fromP < fromLim && * toP < toLim		10791212	0		&&			
ANR	10791278	RelationalExpression	* fromP < fromLim		10791212	0		<			
ANR	10791279	UnaryOperationExpression	* fromP		10791212	0					
ANR	10791280	UnaryOperator	*		10791212	0					
ANR	10791281	Identifier	fromP		10791212	1					
ANR	10791282	Identifier	fromLim		10791212	1					
ANR	10791283	RelationalExpression	* toP < toLim		10791212	1		<			
ANR	10791284	UnaryOperationExpression	* toP		10791212	0					
ANR	10791285	UnaryOperator	*		10791212	0					
ANR	10791286	Identifier	toP		10791212	1					
ANR	10791287	Identifier	toLim		10791212	1					
ANR	10791288	AssignmentExpression	* fromP += 2	751:43:20796:20806	10791212	1	True	+=			
ANR	10791289	UnaryOperationExpression	* fromP		10791212	0					
ANR	10791290	UnaryOperator	*		10791212	0					
ANR	10791291	Identifier	fromP		10791212	1					
ANR	10791292	PrimaryExpression	2		10791212	1					
ANR	10791293	ExpressionStatement	* ( * toP ) ++ = ( GET_HI ( * fromP ) << 8 ) | GET_LO ( * fromP )	752:4:20815:20865	10791212	2	True				
ANR	10791294	AssignmentExpression	* ( * toP ) ++ = ( GET_HI ( * fromP ) << 8 ) | GET_LO ( * fromP )		10791212	0		=			
ANR	10791295	UnaryOperationExpression	* ( * toP ) ++		10791212	0					
ANR	10791296	UnaryOperator	*		10791212	0					
ANR	10791297	PostIncDecOperationExpression	( * toP ) ++		10791212	1					
ANR	10791298	UnaryOperationExpression	* toP		10791212	0					
ANR	10791299	UnaryOperator	*		10791212	0					
ANR	10791300	Identifier	toP		10791212	1					
ANR	10791301	IncDec	++		10791212	1					
ANR	10791302	InclusiveOrExpression	( GET_HI ( * fromP ) << 8 ) | GET_LO ( * fromP )		10791212	1		|			
ANR	10791303	ShiftExpression	GET_HI ( * fromP ) << 8		10791212	0		<<			
ANR	10791304	CallExpression	GET_HI ( * fromP )		10791212	0					
ANR	10791305	Callee	GET_HI		10791212	0					
ANR	10791306	Identifier	GET_HI		10791212	0					
ANR	10791307	ArgumentList	* fromP		10791212	1					
ANR	10791308	Argument	* fromP		10791212	0					
ANR	10791309	UnaryOperationExpression	* fromP		10791212	0					
ANR	10791310	UnaryOperator	*		10791212	0					
ANR	10791311	Identifier	fromP		10791212	1					
ANR	10791312	PrimaryExpression	8		10791212	1					
ANR	10791313	CallExpression	GET_LO ( * fromP )		10791212	1					
ANR	10791314	Callee	GET_LO		10791212	0					
ANR	10791315	Identifier	GET_LO		10791212	0					
ANR	10791316	ArgumentList	* fromP		10791212	1					
ANR	10791317	Argument	* fromP		10791212	0					
ANR	10791318	UnaryOperationExpression	* fromP		10791212	0					
ANR	10791319	UnaryOperator	*		10791212	0					
ANR	10791320	Identifier	fromP		10791212	1					
ANR	10791321	IfStatement	if ( ( * toP == toLim ) && ( * fromP < fromLim ) )		10791212	4					
ANR	10791322	Condition	( * toP == toLim ) && ( * fromP < fromLim )	753:6:20875:20911	10791212	0	True				
ANR	10791323	AndExpression	( * toP == toLim ) && ( * fromP < fromLim )		10791212	0		&&			
ANR	10791324	EqualityExpression	* toP == toLim		10791212	0		==			
ANR	10791325	UnaryOperationExpression	* toP		10791212	0					
ANR	10791326	UnaryOperator	*		10791212	0					
ANR	10791327	Identifier	toP		10791212	1					
ANR	10791328	Identifier	toLim		10791212	1					
ANR	10791329	RelationalExpression	* fromP < fromLim		10791212	1		<			
ANR	10791330	UnaryOperationExpression	* fromP		10791212	0					
ANR	10791331	UnaryOperator	*		10791212	0					
ANR	10791332	Identifier	fromP		10791212	1					
ANR	10791333	Identifier	fromLim		10791212	1					
ANR	10791334	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	754:4:20920:20955	10791212	1	True				
ANR	10791335	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10791212	0					
ANR	10791336	ElseStatement	else		10791212	0					
ANR	10791337	ReturnStatement	return res ;	756:4:20972:20982	10791212	0	True				
ANR	10791338	Identifier	res		10791212	0					
ANR	10791339	ReturnType	static enum XML_Convert_Result PTRCALL E		10791212	1					
ANR	10791340	Identifier	toUtf16		10791212	2					
ANR	10791341	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim"		10791212	3					
ANR	10791342	Parameter	const ENCODING * UNUSED_P ( enc )	739:13:20237:20265	10791212	0	True				
ANR	10791343	ParameterType	const ENCODING * ( enc )		10791212	0					
ANR	10791344	Identifier	UNUSED_P		10791212	1					
ANR	10791345	Parameter	const char * * fromP	740:13:20283:20300	10791212	1	True				
ANR	10791346	ParameterType	const char * *		10791212	0					
ANR	10791347	Identifier	fromP		10791212	1					
ANR	10791348	Parameter	const char * fromLim	740:33:20303:20321	10791212	2	True				
ANR	10791349	ParameterType	const char *		10791212	0					
ANR	10791350	Identifier	fromLim		10791212	1					
ANR	10791351	Parameter	unsigned short * * toP	741:13:20339:20358	10791212	3	True				
ANR	10791352	ParameterType	unsigned short * *		10791212	0					
ANR	10791353	Identifier	toP		10791212	1					
ANR	10791354	Parameter	const unsigned short * toLim	741:35:20361:20387	10791212	4	True				
ANR	10791355	ParameterType	const unsigned short *		10791212	0					
ANR	10791356	Identifier	toLim		10791212	1					
ANR	10791357	CFGEntryNode	ENTRY		10791212		True				
ANR	10791358	CFGExitNode	EXIT		10791212		True				
ANR	10791359	Symbol	UNUSED_P		10791212						
ANR	10791360	Symbol	res		10791212						
ANR	10791361	Symbol	toLim		10791212						
ANR	10791362	Symbol	* fromP		10791212						
ANR	10791363	Symbol	XML_CONVERT_INPUT_INCOMPLETE		10791212						
ANR	10791364	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		10791212						
ANR	10791365	Symbol	* ( * toP ) ++		10791212						
ANR	10791366	Symbol	GET_LO		10791212						
ANR	10791367	Symbol	fromP		10791212						
ANR	10791368	Symbol	fromLim		10791212						
ANR	10791369	Symbol	toP		10791212						
ANR	10791370	Symbol	GET_HI		10791212						
ANR	10791371	Symbol	XML_CONVERT_COMPLETED		10791212						
ANR	10791372	Symbol	* toP		10791212						
ANR	10791373	Function	little2_byteType	796:0:22094:22208							
ANR	10791374	FunctionDef	"little2_byteType (const ENCODING * enc , const char * p)"		10791373	0					
ANR	10791375	CompoundStatement		798:0:22170:22208	10791373	0					
ANR	10791376	ReturnStatement	"return LITTLE2_BYTE_TYPE ( enc , p ) ;"	799:2:22174:22206	10791373	0	True				
ANR	10791377	CallExpression	"LITTLE2_BYTE_TYPE ( enc , p )"		10791373	0					
ANR	10791378	Callee	LITTLE2_BYTE_TYPE		10791373	0					
ANR	10791379	Identifier	LITTLE2_BYTE_TYPE		10791373	0					
ANR	10791380	ArgumentList	enc		10791373	1					
ANR	10791381	Argument	enc		10791373	0					
ANR	10791382	Identifier	enc		10791373	0					
ANR	10791383	Argument	p		10791373	1					
ANR	10791384	Identifier	p		10791373	0					
ANR	10791385	ReturnType	static int PTRFASTCALL		10791373	1					
ANR	10791386	Identifier	little2_byteType		10791373	2					
ANR	10791387	ParameterList	"const ENCODING * enc , const char * p"		10791373	3					
ANR	10791388	Parameter	const ENCODING * enc	797:17:22134:22152	10791373	0	True				
ANR	10791389	ParameterType	const ENCODING *		10791373	0					
ANR	10791390	Identifier	enc		10791373	1					
ANR	10791391	Parameter	const char * p	797:38:22155:22167	10791373	1	True				
ANR	10791392	ParameterType	const char *		10791373	0					
ANR	10791393	Identifier	p		10791373	1					
ANR	10791394	CFGEntryNode	ENTRY		10791373		True				
ANR	10791395	CFGExitNode	EXIT		10791373		True				
ANR	10791396	Symbol	p		10791373						
ANR	10791397	Symbol	LITTLE2_BYTE_TYPE		10791373						
ANR	10791398	Symbol	enc		10791373						
ANR	10791399	Function	little2_byteToAscii	802:0:22211:22332							
ANR	10791400	FunctionDef	"little2_byteToAscii (const ENCODING * enc , const char * p)"		10791399	0					
ANR	10791401	CompoundStatement		804:0:22290:22332	10791399	0					
ANR	10791402	ReturnStatement	"return LITTLE2_BYTE_TO_ASCII ( enc , p ) ;"	805:2:22294:22330	10791399	0	True				
ANR	10791403	CallExpression	"LITTLE2_BYTE_TO_ASCII ( enc , p )"		10791399	0					
ANR	10791404	Callee	LITTLE2_BYTE_TO_ASCII		10791399	0					
ANR	10791405	Identifier	LITTLE2_BYTE_TO_ASCII		10791399	0					
ANR	10791406	ArgumentList	enc		10791399	1					
ANR	10791407	Argument	enc		10791399	0					
ANR	10791408	Identifier	enc		10791399	0					
ANR	10791409	Argument	p		10791399	1					
ANR	10791410	Identifier	p		10791399	0					
ANR	10791411	ReturnType	static int PTRFASTCALL		10791399	1					
ANR	10791412	Identifier	little2_byteToAscii		10791399	2					
ANR	10791413	ParameterList	"const ENCODING * enc , const char * p"		10791399	3					
ANR	10791414	Parameter	const ENCODING * enc	803:20:22254:22272	10791399	0	True				
ANR	10791415	ParameterType	const ENCODING *		10791399	0					
ANR	10791416	Identifier	enc		10791399	1					
ANR	10791417	Parameter	const char * p	803:41:22275:22287	10791399	1	True				
ANR	10791418	ParameterType	const char *		10791399	0					
ANR	10791419	Identifier	p		10791399	1					
ANR	10791420	CFGEntryNode	ENTRY		10791399		True				
ANR	10791421	CFGExitNode	EXIT		10791399		True				
ANR	10791422	Symbol	p		10791399						
ANR	10791423	Symbol	LITTLE2_BYTE_TO_ASCII		10791399						
ANR	10791424	Symbol	enc		10791399						
ANR	10791425	Function	little2_charMatches	808:0:22335:22461							
ANR	10791426	FunctionDef	"little2_charMatches (const ENCODING * enc , const char * p , int c)"		10791425	0					
ANR	10791427	CompoundStatement		810:0:22417:22461	10791425	0					
ANR	10791428	ReturnStatement	"return LITTLE2_CHAR_MATCHES ( enc , p , c ) ;"	811:2:22421:22459	10791425	0	True				
ANR	10791429	CallExpression	"LITTLE2_CHAR_MATCHES ( enc , p , c )"		10791425	0					
ANR	10791430	Callee	LITTLE2_CHAR_MATCHES		10791425	0					
ANR	10791431	Identifier	LITTLE2_CHAR_MATCHES		10791425	0					
ANR	10791432	ArgumentList	enc		10791425	1					
ANR	10791433	Argument	enc		10791425	0					
ANR	10791434	Identifier	enc		10791425	0					
ANR	10791435	Argument	p		10791425	1					
ANR	10791436	Identifier	p		10791425	0					
ANR	10791437	Argument	c		10791425	2					
ANR	10791438	Identifier	c		10791425	0					
ANR	10791439	ReturnType	static int PTRCALL		10791425	1					
ANR	10791440	Identifier	little2_charMatches		10791425	2					
ANR	10791441	ParameterList	"const ENCODING * enc , const char * p , int c"		10791425	3					
ANR	10791442	Parameter	const ENCODING * enc	809:20:22374:22392	10791425	0	True				
ANR	10791443	ParameterType	const ENCODING *		10791425	0					
ANR	10791444	Identifier	enc		10791425	1					
ANR	10791445	Parameter	const char * p	809:41:22395:22407	10791425	1	True				
ANR	10791446	ParameterType	const char *		10791425	0					
ANR	10791447	Identifier	p		10791425	1					
ANR	10791448	Parameter	int c	809:56:22410:22414	10791425	2	True				
ANR	10791449	ParameterType	int		10791425	0					
ANR	10791450	Identifier	c		10791425	1					
ANR	10791451	CFGEntryNode	ENTRY		10791425		True				
ANR	10791452	CFGExitNode	EXIT		10791425		True				
ANR	10791453	Symbol	p		10791425						
ANR	10791454	Symbol	c		10791425						
ANR	10791455	Symbol	LITTLE2_CHAR_MATCHES		10791425						
ANR	10791456	Symbol	enc		10791425						
ANR	10791457	Function	little2_isNameMin	814:0:22464:22589							
ANR	10791458	FunctionDef	"little2_isNameMin (const ENCODING * enc , const char * p)"		10791457	0					
ANR	10791459	CompoundStatement		816:0:22541:22589	10791457	0					
ANR	10791460	ReturnStatement	"return LITTLE2_IS_NAME_CHAR_MINBPC ( enc , p ) ;"	817:2:22545:22587	10791457	0	True				
ANR	10791461	CallExpression	"LITTLE2_IS_NAME_CHAR_MINBPC ( enc , p )"		10791457	0					
ANR	10791462	Callee	LITTLE2_IS_NAME_CHAR_MINBPC		10791457	0					
ANR	10791463	Identifier	LITTLE2_IS_NAME_CHAR_MINBPC		10791457	0					
ANR	10791464	ArgumentList	enc		10791457	1					
ANR	10791465	Argument	enc		10791457	0					
ANR	10791466	Identifier	enc		10791457	0					
ANR	10791467	Argument	p		10791457	1					
ANR	10791468	Identifier	p		10791457	0					
ANR	10791469	ReturnType	static int PTRFASTCALL		10791457	1					
ANR	10791470	Identifier	little2_isNameMin		10791457	2					
ANR	10791471	ParameterList	"const ENCODING * enc , const char * p"		10791457	3					
ANR	10791472	Parameter	const ENCODING * enc	815:18:22505:22523	10791457	0	True				
ANR	10791473	ParameterType	const ENCODING *		10791457	0					
ANR	10791474	Identifier	enc		10791457	1					
ANR	10791475	Parameter	const char * p	815:39:22526:22538	10791457	1	True				
ANR	10791476	ParameterType	const char *		10791457	0					
ANR	10791477	Identifier	p		10791457	1					
ANR	10791478	CFGEntryNode	ENTRY		10791457		True				
ANR	10791479	CFGExitNode	EXIT		10791457		True				
ANR	10791480	Symbol	p		10791457						
ANR	10791481	Symbol	LITTLE2_IS_NAME_CHAR_MINBPC		10791457						
ANR	10791482	Symbol	enc		10791457						
ANR	10791483	Function	little2_isNmstrtMin	820:0:22592:22721							
ANR	10791484	FunctionDef	"little2_isNmstrtMin (const ENCODING * enc , const char * p)"		10791483	0					
ANR	10791485	CompoundStatement		822:0:22671:22721	10791483	0					
ANR	10791486	ReturnStatement	"return LITTLE2_IS_NMSTRT_CHAR_MINBPC ( enc , p ) ;"	823:2:22675:22719	10791483	0	True				
ANR	10791487	CallExpression	"LITTLE2_IS_NMSTRT_CHAR_MINBPC ( enc , p )"		10791483	0					
ANR	10791488	Callee	LITTLE2_IS_NMSTRT_CHAR_MINBPC		10791483	0					
ANR	10791489	Identifier	LITTLE2_IS_NMSTRT_CHAR_MINBPC		10791483	0					
ANR	10791490	ArgumentList	enc		10791483	1					
ANR	10791491	Argument	enc		10791483	0					
ANR	10791492	Identifier	enc		10791483	0					
ANR	10791493	Argument	p		10791483	1					
ANR	10791494	Identifier	p		10791483	0					
ANR	10791495	ReturnType	static int PTRFASTCALL		10791483	1					
ANR	10791496	Identifier	little2_isNmstrtMin		10791483	2					
ANR	10791497	ParameterList	"const ENCODING * enc , const char * p"		10791483	3					
ANR	10791498	Parameter	const ENCODING * enc	821:20:22635:22653	10791483	0	True				
ANR	10791499	ParameterType	const ENCODING *		10791483	0					
ANR	10791500	Identifier	enc		10791483	1					
ANR	10791501	Parameter	const char * p	821:41:22656:22668	10791483	1	True				
ANR	10791502	ParameterType	const char *		10791483	0					
ANR	10791503	Identifier	p		10791483	1					
ANR	10791504	CFGEntryNode	ENTRY		10791483		True				
ANR	10791505	CFGExitNode	EXIT		10791483		True				
ANR	10791506	Symbol	p		10791483						
ANR	10791507	Symbol	enc		10791483						
ANR	10791508	Symbol	LITTLE2_IS_NMSTRT_CHAR_MINBPC		10791483						
ANR	10791509	DeclStmt									
ANR	10791510	Decl							const struct normal_encoding	const struct normal_encoding	little2_encoding_ns
ANR	10791511	DeclStmt									
ANR	10791512	Decl							const struct normal_encoding	const struct normal_encoding	little2_encoding
ANR	10791513	DeclStmt									
ANR	10791514	Decl							const struct normal_encoding	const struct normal_encoding	internal_little2_encoding_ns
ANR	10791515	DeclStmt									
ANR	10791516	Decl							const struct normal_encoding	const struct normal_encoding	internal_little2_encoding
ANR	10791517	Function	big2_byteType	937:0:25195:25303							
ANR	10791518	FunctionDef	"big2_byteType (const ENCODING * enc , const char * p)"		10791517	0					
ANR	10791519	CompoundStatement		939:0:25268:25303	10791517	0					
ANR	10791520	ReturnStatement	"return BIG2_BYTE_TYPE ( enc , p ) ;"	940:2:25272:25301	10791517	0	True				
ANR	10791521	CallExpression	"BIG2_BYTE_TYPE ( enc , p )"		10791517	0					
ANR	10791522	Callee	BIG2_BYTE_TYPE		10791517	0					
ANR	10791523	Identifier	BIG2_BYTE_TYPE		10791517	0					
ANR	10791524	ArgumentList	enc		10791517	1					
ANR	10791525	Argument	enc		10791517	0					
ANR	10791526	Identifier	enc		10791517	0					
ANR	10791527	Argument	p		10791517	1					
ANR	10791528	Identifier	p		10791517	0					
ANR	10791529	ReturnType	static int PTRFASTCALL		10791517	1					
ANR	10791530	Identifier	big2_byteType		10791517	2					
ANR	10791531	ParameterList	"const ENCODING * enc , const char * p"		10791517	3					
ANR	10791532	Parameter	const ENCODING * enc	938:14:25232:25250	10791517	0	True				
ANR	10791533	ParameterType	const ENCODING *		10791517	0					
ANR	10791534	Identifier	enc		10791517	1					
ANR	10791535	Parameter	const char * p	938:35:25253:25265	10791517	1	True				
ANR	10791536	ParameterType	const char *		10791517	0					
ANR	10791537	Identifier	p		10791517	1					
ANR	10791538	CFGEntryNode	ENTRY		10791517		True				
ANR	10791539	CFGExitNode	EXIT		10791517		True				
ANR	10791540	Symbol	p		10791517						
ANR	10791541	Symbol	BIG2_BYTE_TYPE		10791517						
ANR	10791542	Symbol	enc		10791517						
ANR	10791543	Function	big2_byteToAscii	943:0:25306:25421							
ANR	10791544	FunctionDef	"big2_byteToAscii (const ENCODING * enc , const char * p)"		10791543	0					
ANR	10791545	CompoundStatement		945:0:25382:25421	10791543	0					
ANR	10791546	ReturnStatement	"return BIG2_BYTE_TO_ASCII ( enc , p ) ;"	946:2:25386:25419	10791543	0	True				
ANR	10791547	CallExpression	"BIG2_BYTE_TO_ASCII ( enc , p )"		10791543	0					
ANR	10791548	Callee	BIG2_BYTE_TO_ASCII		10791543	0					
ANR	10791549	Identifier	BIG2_BYTE_TO_ASCII		10791543	0					
ANR	10791550	ArgumentList	enc		10791543	1					
ANR	10791551	Argument	enc		10791543	0					
ANR	10791552	Identifier	enc		10791543	0					
ANR	10791553	Argument	p		10791543	1					
ANR	10791554	Identifier	p		10791543	0					
ANR	10791555	ReturnType	static int PTRFASTCALL		10791543	1					
ANR	10791556	Identifier	big2_byteToAscii		10791543	2					
ANR	10791557	ParameterList	"const ENCODING * enc , const char * p"		10791543	3					
ANR	10791558	Parameter	const ENCODING * enc	944:17:25346:25364	10791543	0	True				
ANR	10791559	ParameterType	const ENCODING *		10791543	0					
ANR	10791560	Identifier	enc		10791543	1					
ANR	10791561	Parameter	const char * p	944:38:25367:25379	10791543	1	True				
ANR	10791562	ParameterType	const char *		10791543	0					
ANR	10791563	Identifier	p		10791543	1					
ANR	10791564	CFGEntryNode	ENTRY		10791543		True				
ANR	10791565	CFGExitNode	EXIT		10791543		True				
ANR	10791566	Symbol	p		10791543						
ANR	10791567	Symbol	BIG2_BYTE_TO_ASCII		10791543						
ANR	10791568	Symbol	enc		10791543						
ANR	10791569	Function	big2_charMatches	949:0:25424:25544							
ANR	10791570	FunctionDef	"big2_charMatches (const ENCODING * enc , const char * p , int c)"		10791569	0					
ANR	10791571	CompoundStatement		951:0:25503:25544	10791569	0					
ANR	10791572	ReturnStatement	"return BIG2_CHAR_MATCHES ( enc , p , c ) ;"	952:2:25507:25542	10791569	0	True				
ANR	10791573	CallExpression	"BIG2_CHAR_MATCHES ( enc , p , c )"		10791569	0					
ANR	10791574	Callee	BIG2_CHAR_MATCHES		10791569	0					
ANR	10791575	Identifier	BIG2_CHAR_MATCHES		10791569	0					
ANR	10791576	ArgumentList	enc		10791569	1					
ANR	10791577	Argument	enc		10791569	0					
ANR	10791578	Identifier	enc		10791569	0					
ANR	10791579	Argument	p		10791569	1					
ANR	10791580	Identifier	p		10791569	0					
ANR	10791581	Argument	c		10791569	2					
ANR	10791582	Identifier	c		10791569	0					
ANR	10791583	ReturnType	static int PTRCALL		10791569	1					
ANR	10791584	Identifier	big2_charMatches		10791569	2					
ANR	10791585	ParameterList	"const ENCODING * enc , const char * p , int c"		10791569	3					
ANR	10791586	Parameter	const ENCODING * enc	950:17:25460:25478	10791569	0	True				
ANR	10791587	ParameterType	const ENCODING *		10791569	0					
ANR	10791588	Identifier	enc		10791569	1					
ANR	10791589	Parameter	const char * p	950:38:25481:25493	10791569	1	True				
ANR	10791590	ParameterType	const char *		10791569	0					
ANR	10791591	Identifier	p		10791569	1					
ANR	10791592	Parameter	int c	950:53:25496:25500	10791569	2	True				
ANR	10791593	ParameterType	int		10791569	0					
ANR	10791594	Identifier	c		10791569	1					
ANR	10791595	CFGEntryNode	ENTRY		10791569		True				
ANR	10791596	CFGExitNode	EXIT		10791569		True				
ANR	10791597	Symbol	p		10791569						
ANR	10791598	Symbol	c		10791569						
ANR	10791599	Symbol	enc		10791569						
ANR	10791600	Symbol	BIG2_CHAR_MATCHES		10791569						
ANR	10791601	Function	big2_isNameMin	955:0:25547:25666							
ANR	10791602	FunctionDef	"big2_isNameMin (const ENCODING * enc , const char * p)"		10791601	0					
ANR	10791603	CompoundStatement		957:0:25621:25666	10791601	0					
ANR	10791604	ReturnStatement	"return BIG2_IS_NAME_CHAR_MINBPC ( enc , p ) ;"	958:2:25625:25664	10791601	0	True				
ANR	10791605	CallExpression	"BIG2_IS_NAME_CHAR_MINBPC ( enc , p )"		10791601	0					
ANR	10791606	Callee	BIG2_IS_NAME_CHAR_MINBPC		10791601	0					
ANR	10791607	Identifier	BIG2_IS_NAME_CHAR_MINBPC		10791601	0					
ANR	10791608	ArgumentList	enc		10791601	1					
ANR	10791609	Argument	enc		10791601	0					
ANR	10791610	Identifier	enc		10791601	0					
ANR	10791611	Argument	p		10791601	1					
ANR	10791612	Identifier	p		10791601	0					
ANR	10791613	ReturnType	static int PTRFASTCALL		10791601	1					
ANR	10791614	Identifier	big2_isNameMin		10791601	2					
ANR	10791615	ParameterList	"const ENCODING * enc , const char * p"		10791601	3					
ANR	10791616	Parameter	const ENCODING * enc	956:15:25585:25603	10791601	0	True				
ANR	10791617	ParameterType	const ENCODING *		10791601	0					
ANR	10791618	Identifier	enc		10791601	1					
ANR	10791619	Parameter	const char * p	956:36:25606:25618	10791601	1	True				
ANR	10791620	ParameterType	const char *		10791601	0					
ANR	10791621	Identifier	p		10791601	1					
ANR	10791622	CFGEntryNode	ENTRY		10791601		True				
ANR	10791623	CFGExitNode	EXIT		10791601		True				
ANR	10791624	Symbol	p		10791601						
ANR	10791625	Symbol	BIG2_IS_NAME_CHAR_MINBPC		10791601						
ANR	10791626	Symbol	enc		10791601						
ANR	10791627	Function	big2_isNmstrtMin	961:0:25669:25792							
ANR	10791628	FunctionDef	"big2_isNmstrtMin (const ENCODING * enc , const char * p)"		10791627	0					
ANR	10791629	CompoundStatement		963:0:25745:25792	10791627	0					
ANR	10791630	ReturnStatement	"return BIG2_IS_NMSTRT_CHAR_MINBPC ( enc , p ) ;"	964:2:25749:25790	10791627	0	True				
ANR	10791631	CallExpression	"BIG2_IS_NMSTRT_CHAR_MINBPC ( enc , p )"		10791627	0					
ANR	10791632	Callee	BIG2_IS_NMSTRT_CHAR_MINBPC		10791627	0					
ANR	10791633	Identifier	BIG2_IS_NMSTRT_CHAR_MINBPC		10791627	0					
ANR	10791634	ArgumentList	enc		10791627	1					
ANR	10791635	Argument	enc		10791627	0					
ANR	10791636	Identifier	enc		10791627	0					
ANR	10791637	Argument	p		10791627	1					
ANR	10791638	Identifier	p		10791627	0					
ANR	10791639	ReturnType	static int PTRFASTCALL		10791627	1					
ANR	10791640	Identifier	big2_isNmstrtMin		10791627	2					
ANR	10791641	ParameterList	"const ENCODING * enc , const char * p"		10791627	3					
ANR	10791642	Parameter	const ENCODING * enc	962:17:25709:25727	10791627	0	True				
ANR	10791643	ParameterType	const ENCODING *		10791627	0					
ANR	10791644	Identifier	enc		10791627	1					
ANR	10791645	Parameter	const char * p	962:38:25730:25742	10791627	1	True				
ANR	10791646	ParameterType	const char *		10791627	0					
ANR	10791647	Identifier	p		10791627	1					
ANR	10791648	CFGEntryNode	ENTRY		10791627		True				
ANR	10791649	CFGExitNode	EXIT		10791627		True				
ANR	10791650	Symbol	p		10791627						
ANR	10791651	Symbol	enc		10791627						
ANR	10791652	Symbol	BIG2_IS_NMSTRT_CHAR_MINBPC		10791627						
ANR	10791653	DeclStmt									
ANR	10791654	Decl							const struct normal_encoding	const struct normal_encoding	big2_encoding_ns
ANR	10791655	DeclStmt									
ANR	10791656	Decl							const struct normal_encoding	const struct normal_encoding	big2_encoding
ANR	10791657	DeclStmt									
ANR	10791658	Decl							const struct normal_encoding	const struct normal_encoding	internal_big2_encoding_ns
ANR	10791659	DeclStmt									
ANR	10791660	Decl							const struct normal_encoding	const struct normal_encoding	internal_big2_encoding
ANR	10791661	Function	streqci	1066:0:27684:28223							
ANR	10791662	FunctionDef	"streqci (const char * s1 , const char * s2)"		10791661	0					
ANR	10791663	CompoundStatement		1068:0:27744:28223	10791661	0					
ANR	10791664	ForStatement	for ( ; ; )		10791661	0					
ANR	10791665	CompoundStatement		4:4:39:54	10791661	0					
ANR	10791666	IdentifierDeclStatement	char c1 = * s1 ++ ;	1070:4:27763:27778	10791661	0	True				
ANR	10791667	IdentifierDecl	c1 = * s1 ++		10791661	0					
ANR	10791668	IdentifierDeclType	char		10791661	0					
ANR	10791669	Identifier	c1		10791661	1					
ANR	10791670	AssignmentExpression	c1 = * s1 ++		10791661	2		=			
ANR	10791671	Identifier	c1		10791661	0					
ANR	10791672	UnaryOperationExpression	* s1 ++		10791661	1					
ANR	10791673	UnaryOperator	*		10791661	0					
ANR	10791674	PostIncDecOperationExpression	s1 ++		10791661	1					
ANR	10791675	Identifier	s1		10791661	0					
ANR	10791676	IncDec	++		10791661	1					
ANR	10791677	IdentifierDeclStatement	char c2 = * s2 ++ ;	1071:4:27784:27799	10791661	1	True				
ANR	10791678	IdentifierDecl	c2 = * s2 ++		10791661	0					
ANR	10791679	IdentifierDeclType	char		10791661	0					
ANR	10791680	Identifier	c2		10791661	1					
ANR	10791681	AssignmentExpression	c2 = * s2 ++		10791661	2		=			
ANR	10791682	Identifier	c2		10791661	0					
ANR	10791683	UnaryOperationExpression	* s2 ++		10791661	1					
ANR	10791684	UnaryOperator	*		10791661	0					
ANR	10791685	PostIncDecOperationExpression	s2 ++		10791661	1					
ANR	10791686	Identifier	s2		10791661	0					
ANR	10791687	IncDec	++		10791661	1					
ANR	10791688	IfStatement	if ( ASCII_a <= c1 && c1 <= ASCII_z )		10791661	2					
ANR	10791689	Condition	ASCII_a <= c1 && c1 <= ASCII_z	1072:8:27809:27838	10791661	0	True				
ANR	10791690	AndExpression	ASCII_a <= c1 && c1 <= ASCII_z		10791661	0		&&			
ANR	10791691	RelationalExpression	ASCII_a <= c1		10791661	0		<=			
ANR	10791692	Identifier	ASCII_a		10791661	0					
ANR	10791693	Identifier	c1		10791661	1					
ANR	10791694	RelationalExpression	c1 <= ASCII_z		10791661	1		<=			
ANR	10791695	Identifier	c1		10791661	0					
ANR	10791696	Identifier	ASCII_z		10791661	1					
ANR	10791697	ExpressionStatement	c1 += ASCII_A - ASCII_a	1073:6:27847:27870	10791661	1	True				
ANR	10791698	AssignmentExpression	c1 += ASCII_A - ASCII_a		10791661	0		+=			
ANR	10791699	Identifier	c1		10791661	0					
ANR	10791700	AdditiveExpression	ASCII_A - ASCII_a		10791661	1		-			
ANR	10791701	Identifier	ASCII_A		10791661	0					
ANR	10791702	Identifier	ASCII_a		10791661	1					
ANR	10791703	IfStatement	if ( ASCII_a <= c2 && c2 <= ASCII_z )		10791661	3					
ANR	10791704	Condition	ASCII_a <= c2 && c2 <= ASCII_z	1074:8:27880:27909	10791661	0	True				
ANR	10791705	AndExpression	ASCII_a <= c2 && c2 <= ASCII_z		10791661	0		&&			
ANR	10791706	RelationalExpression	ASCII_a <= c2		10791661	0		<=			
ANR	10791707	Identifier	ASCII_a		10791661	0					
ANR	10791708	Identifier	c2		10791661	1					
ANR	10791709	RelationalExpression	c2 <= ASCII_z		10791661	1		<=			
ANR	10791710	Identifier	c2		10791661	0					
ANR	10791711	Identifier	ASCII_z		10791661	1					
ANR	10791712	ExpressionStatement	c2 += ASCII_A - ASCII_a	1079:6:28101:28124	10791661	1	True				
ANR	10791713	AssignmentExpression	c2 += ASCII_A - ASCII_a		10791661	0		+=			
ANR	10791714	Identifier	c2		10791661	0					
ANR	10791715	AdditiveExpression	ASCII_A - ASCII_a		10791661	1		-			
ANR	10791716	Identifier	ASCII_A		10791661	0					
ANR	10791717	Identifier	ASCII_a		10791661	1					
ANR	10791718	IfStatement	if ( c1 != c2 )		10791661	4					
ANR	10791719	Condition	c1 != c2	1080:8:28155:28162	10791661	0	True				
ANR	10791720	EqualityExpression	c1 != c2		10791661	0		!=			
ANR	10791721	Identifier	c1		10791661	0					
ANR	10791722	Identifier	c2		10791661	1					
ANR	10791723	ReturnStatement	return 0 ;	1081:6:28171:28179	10791661	1	True				
ANR	10791724	PrimaryExpression	0		10791661	0					
ANR	10791725	IfStatement	if ( ! c1 )		10791661	5					
ANR	10791726	Condition	! c1	1082:8:28189:28191	10791661	0	True				
ANR	10791727	UnaryOperationExpression	! c1		10791661	0					
ANR	10791728	UnaryOperator	!		10791661	0					
ANR	10791729	Identifier	c1		10791661	1					
ANR	10791730	BreakStatement	break ;	1083:6:28200:28205	10791661	1	True				
ANR	10791731	ReturnStatement	return 1 ;	1085:2:28213:28221	10791661	1	True				
ANR	10791732	PrimaryExpression	1		10791661	0					
ANR	10791733	ReturnType	static int FASTCALL		10791661	1					
ANR	10791734	Identifier	streqci		10791661	2					
ANR	10791735	ParameterList	"const char * s1 , const char * s2"		10791661	3					
ANR	10791736	Parameter	const char * s1	1067:8:27712:27725	10791661	0	True				
ANR	10791737	ParameterType	const char *		10791661	0					
ANR	10791738	Identifier	s1		10791661	1					
ANR	10791739	Parameter	const char * s2	1067:24:27728:27741	10791661	1	True				
ANR	10791740	ParameterType	const char *		10791661	0					
ANR	10791741	Identifier	s2		10791661	1					
ANR	10791742	CFGEntryNode	ENTRY		10791661		True				
ANR	10791743	CFGExitNode	EXIT		10791661		True				
ANR	10791744	InfiniteForNode	true		10791661		True				
ANR	10791745	Symbol	* s1 ++		10791661						
ANR	10791746	Symbol	ASCII_z		10791661						
ANR	10791747	Symbol	* s2 ++		10791661						
ANR	10791748	Symbol	ASCII_a		10791661						
ANR	10791749	Symbol	ASCII_A		10791661						
ANR	10791750	Symbol	s1		10791661						
ANR	10791751	Symbol	c1		10791661						
ANR	10791752	Symbol	s2		10791661						
ANR	10791753	Symbol	c2		10791661						
ANR	10791754	Function	initUpdatePosition	1088:0:28226:28426							
ANR	10791755	FunctionDef	"initUpdatePosition (const ENCODING * UNUSED_P ( enc ) , const char * ptr , const char * end , POSITION * pos)"		10791754	0					
ANR	10791756	CompoundStatement		1091:0:28364:28426	10791754	0					
ANR	10791757	ExpressionStatement	"normal_updatePosition ( & utf8_encoding . enc , ptr , end , pos )"	1092:2:28368:28424	10791754	0	True				
ANR	10791758	CallExpression	"normal_updatePosition ( & utf8_encoding . enc , ptr , end , pos )"		10791754	0					
ANR	10791759	Callee	normal_updatePosition		10791754	0					
ANR	10791760	Identifier	normal_updatePosition		10791754	0					
ANR	10791761	ArgumentList	& utf8_encoding . enc		10791754	1					
ANR	10791762	Argument	& utf8_encoding . enc		10791754	0					
ANR	10791763	UnaryOperationExpression	& utf8_encoding . enc		10791754	0					
ANR	10791764	UnaryOperator	&		10791754	0					
ANR	10791765	MemberAccess	utf8_encoding . enc		10791754	1					
ANR	10791766	Identifier	utf8_encoding		10791754	0					
ANR	10791767	Identifier	enc		10791754	1					
ANR	10791768	Argument	ptr		10791754	1					
ANR	10791769	Identifier	ptr		10791754	0					
ANR	10791770	Argument	end		10791754	2					
ANR	10791771	Identifier	end		10791754	0					
ANR	10791772	Argument	pos		10791754	3					
ANR	10791773	Identifier	pos		10791754	0					
ANR	10791774	ReturnType	static void PTRCALL		10791754	1					
ANR	10791775	Identifier	initUpdatePosition		10791754	2					
ANR	10791776	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * ptr , const char * end , POSITION * pos"		10791754	3					
ANR	10791777	Parameter	const ENCODING * UNUSED_P ( enc )	1089:19:28265:28293	10791754	0	True				
ANR	10791778	ParameterType	const ENCODING * ( enc )		10791754	0					
ANR	10791779	Identifier	UNUSED_P		10791754	1					
ANR	10791780	Parameter	const char * ptr	1089:50:28296:28310	10791754	1	True				
ANR	10791781	ParameterType	const char *		10791754	0					
ANR	10791782	Identifier	ptr		10791754	1					
ANR	10791783	Parameter	const char * end	1090:19:28332:28346	10791754	2	True				
ANR	10791784	ParameterType	const char *		10791754	0					
ANR	10791785	Identifier	end		10791754	1					
ANR	10791786	Parameter	POSITION * pos	1090:36:28349:28361	10791754	3	True				
ANR	10791787	ParameterType	POSITION *		10791754	0					
ANR	10791788	Identifier	pos		10791754	1					
ANR	10791789	CFGEntryNode	ENTRY		10791754		True				
ANR	10791790	CFGExitNode	EXIT		10791754		True				
ANR	10791791	Symbol	UNUSED_P		10791754						
ANR	10791792	Symbol	& utf8_encoding . enc		10791754						
ANR	10791793	Symbol	utf8_encoding		10791754						
ANR	10791794	Symbol	pos		10791754						
ANR	10791795	Symbol	& utf8_encoding		10791754						
ANR	10791796	Symbol	end		10791754						
ANR	10791797	Symbol	ptr		10791754						
ANR	10791798	Function	toAscii	1095:0:28429:28639							
ANR	10791799	FunctionDef	"toAscii (const ENCODING * enc , const char * ptr , const char * end)"		10791798	0					
ANR	10791800	CompoundStatement		1097:0:28503:28639	10791798	0					
ANR	10791801	IdentifierDeclStatement	char buf [ 1 ] ;	1098:2:28507:28518	10791798	0	True				
ANR	10791802	IdentifierDecl	buf [ 1 ]		10791798	0					
ANR	10791803	IdentifierDeclType	char [ 1 ]		10791798	0					
ANR	10791804	Identifier	buf		10791798	1					
ANR	10791805	PrimaryExpression	1		10791798	2					
ANR	10791806	IdentifierDeclStatement	char * p = buf ;	1099:2:28522:28535	10791798	1	True				
ANR	10791807	IdentifierDecl	* p = buf		10791798	0					
ANR	10791808	IdentifierDeclType	char *		10791798	0					
ANR	10791809	Identifier	p		10791798	1					
ANR	10791810	AssignmentExpression	* p = buf		10791798	2		=			
ANR	10791811	Identifier	buf		10791798	0					
ANR	10791812	Identifier	buf		10791798	1					
ANR	10791813	ExpressionStatement	"XmlUtf8Convert ( enc , & ptr , end , & p , p + 1 )"	1100:2:28539:28580	10791798	2	True				
ANR	10791814	CallExpression	"XmlUtf8Convert ( enc , & ptr , end , & p , p + 1 )"		10791798	0					
ANR	10791815	Callee	XmlUtf8Convert		10791798	0					
ANR	10791816	Identifier	XmlUtf8Convert		10791798	0					
ANR	10791817	ArgumentList	enc		10791798	1					
ANR	10791818	Argument	enc		10791798	0					
ANR	10791819	Identifier	enc		10791798	0					
ANR	10791820	Argument	& ptr		10791798	1					
ANR	10791821	UnaryOperationExpression	& ptr		10791798	0					
ANR	10791822	UnaryOperator	&		10791798	0					
ANR	10791823	Identifier	ptr		10791798	1					
ANR	10791824	Argument	end		10791798	2					
ANR	10791825	Identifier	end		10791798	0					
ANR	10791826	Argument	& p		10791798	3					
ANR	10791827	UnaryOperationExpression	& p		10791798	0					
ANR	10791828	UnaryOperator	&		10791798	0					
ANR	10791829	Identifier	p		10791798	1					
ANR	10791830	Argument	p + 1		10791798	4					
ANR	10791831	AdditiveExpression	p + 1		10791798	0		+			
ANR	10791832	Identifier	p		10791798	0					
ANR	10791833	PrimaryExpression	1		10791798	1					
ANR	10791834	IfStatement	if ( p == buf )		10791798	3					
ANR	10791835	Condition	p == buf	1101:6:28588:28595	10791798	0	True				
ANR	10791836	EqualityExpression	p == buf		10791798	0		==			
ANR	10791837	Identifier	p		10791798	0					
ANR	10791838	Identifier	buf		10791798	1					
ANR	10791839	ReturnStatement	return - 1 ;	1102:4:28602:28611	10791798	1	True				
ANR	10791840	UnaryOperationExpression	- 1		10791798	0					
ANR	10791841	UnaryOperator	-		10791798	0					
ANR	10791842	PrimaryExpression	1		10791798	1					
ANR	10791843	ElseStatement	else		10791798	0					
ANR	10791844	ReturnStatement	return buf [ 0 ] ;	1104:4:28624:28637	10791798	0	True				
ANR	10791845	ArrayIndexing	buf [ 0 ]		10791798	0					
ANR	10791846	Identifier	buf		10791798	0					
ANR	10791847	PrimaryExpression	0		10791798	1					
ANR	10791848	ReturnType	static int		10791798	1					
ANR	10791849	Identifier	toAscii		10791798	2					
ANR	10791850	ParameterList	"const ENCODING * enc , const char * ptr , const char * end"		10791798	3					
ANR	10791851	Parameter	const ENCODING * enc	1096:8:28448:28466	10791798	0	True				
ANR	10791852	ParameterType	const ENCODING *		10791798	0					
ANR	10791853	Identifier	enc		10791798	1					
ANR	10791854	Parameter	const char * ptr	1096:29:28469:28483	10791798	1	True				
ANR	10791855	ParameterType	const char *		10791798	0					
ANR	10791856	Identifier	ptr		10791798	1					
ANR	10791857	Parameter	const char * end	1096:46:28486:28500	10791798	2	True				
ANR	10791858	ParameterType	const char *		10791798	0					
ANR	10791859	Identifier	end		10791798	1					
ANR	10791860	CFGEntryNode	ENTRY		10791798		True				
ANR	10791861	CFGExitNode	EXIT		10791798		True				
ANR	10791862	Symbol	p		10791798						
ANR	10791863	Symbol	buf		10791798						
ANR	10791864	Symbol	* buf		10791798						
ANR	10791865	Symbol	& ptr		10791798						
ANR	10791866	Symbol	& p		10791798						
ANR	10791867	Symbol	end		10791798						
ANR	10791868	Symbol	enc		10791798						
ANR	10791869	Symbol	ptr		10791798						
ANR	10791870	Function	isSpace	1107:0:28642:28773							
ANR	10791871	FunctionDef	isSpace (int c)		10791870	0					
ANR	10791872	CompoundStatement		1109:0:28677:28773	10791870	0					
ANR	10791873	SwitchStatement	switch ( c )		10791870	0					
ANR	10791874	Condition	c	1110:10:28689:28689	10791870	0	True				
ANR	10791875	Identifier	c		10791870	0					
ANR	10791876	CompoundStatement		2:13:14:14	10791870	1					
ANR	10791877	Label	case 0x20 :	1111:2:28696:28705	10791870	0	True				
ANR	10791878	Label	case 0xD :	1112:2:28709:28717	10791870	1	True				
ANR	10791879	Label	case 0xA :	1113:2:28721:28729	10791870	2	True				
ANR	10791880	Label	case 0x9 :	1114:2:28733:28741	10791870	3	True				
ANR	10791881	ReturnStatement	return 1 ;	1115:4:28747:28755	10791870	4	True				
ANR	10791882	PrimaryExpression	1		10791870	0					
ANR	10791883	ReturnStatement	return 0 ;	1117:2:28763:28771	10791870	1	True				
ANR	10791884	PrimaryExpression	0		10791870	0					
ANR	10791885	ReturnType	static int FASTCALL		10791870	1					
ANR	10791886	Identifier	isSpace		10791870	2					
ANR	10791887	ParameterList	int c		10791870	3					
ANR	10791888	Parameter	int c	1108:8:28670:28674	10791870	0	True				
ANR	10791889	ParameterType	int		10791870	0					
ANR	10791890	Identifier	c		10791870	1					
ANR	10791891	CFGEntryNode	ENTRY		10791870		True				
ANR	10791892	CFGExitNode	EXIT		10791870		True				
ANR	10791893	Symbol	c		10791870						
ANR	10791894	Function	parsePseudoAttribute	1123:0:28869:30776							
ANR	10791895	FunctionDef	"parsePseudoAttribute (const ENCODING * enc , const char * ptr , const char * end , const char * * namePtr , const char * * nameEndPtr , const char * * valPtr , const char * * nextTokPtr)"		10791894	0					
ANR	10791896	CompoundStatement		1131:0:29175:30776	10791894	0					
ANR	10791897	IdentifierDeclStatement	int c ;	1132:2:29179:29184	10791894	0	True				
ANR	10791898	IdentifierDecl	c		10791894	0					
ANR	10791899	IdentifierDeclType	int		10791894	0					
ANR	10791900	Identifier	c		10791894	1					
ANR	10791901	IdentifierDeclStatement	char open ;	1133:2:29188:29197	10791894	1	True				
ANR	10791902	IdentifierDecl	open		10791894	0					
ANR	10791903	IdentifierDeclType	char		10791894	0					
ANR	10791904	Identifier	open		10791894	1					
ANR	10791905	IfStatement	if ( ptr == end )		10791894	2					
ANR	10791906	Condition	ptr == end	1134:6:29205:29214	10791894	0	True				
ANR	10791907	EqualityExpression	ptr == end		10791894	0		==			
ANR	10791908	Identifier	ptr		10791894	0					
ANR	10791909	Identifier	end		10791894	1					
ANR	10791910	CompoundStatement		4:18:41:41	10791894	1					
ANR	10791911	ExpressionStatement	* namePtr = NULL	1135:4:29223:29238	10791894	0	True				
ANR	10791912	AssignmentExpression	* namePtr = NULL		10791894	0		=			
ANR	10791913	UnaryOperationExpression	* namePtr		10791894	0					
ANR	10791914	UnaryOperator	*		10791894	0					
ANR	10791915	Identifier	namePtr		10791894	1					
ANR	10791916	Identifier	NULL		10791894	1					
ANR	10791917	ReturnStatement	return 1 ;	1136:4:29244:29252	10791894	1	True				
ANR	10791918	PrimaryExpression	1		10791894	0					
ANR	10791919	IfStatement	"if ( ! isSpace ( toAscii ( enc , ptr , end ) ) )"		10791894	3					
ANR	10791920	Condition	"! isSpace ( toAscii ( enc , ptr , end ) )"	1138:6:29264:29295	10791894	0	True				
ANR	10791921	UnaryOperationExpression	"! isSpace ( toAscii ( enc , ptr , end ) )"		10791894	0					
ANR	10791922	UnaryOperator	!		10791894	0					
ANR	10791923	CallExpression	"isSpace ( toAscii ( enc , ptr , end ) )"		10791894	1					
ANR	10791924	Callee	isSpace		10791894	0					
ANR	10791925	Identifier	isSpace		10791894	0					
ANR	10791926	ArgumentList	"toAscii ( enc , ptr , end )"		10791894	1					
ANR	10791927	Argument	"toAscii ( enc , ptr , end )"		10791894	0					
ANR	10791928	CallExpression	"toAscii ( enc , ptr , end )"		10791894	0					
ANR	10791929	Callee	toAscii		10791894	0					
ANR	10791930	Identifier	toAscii		10791894	0					
ANR	10791931	ArgumentList	enc		10791894	1					
ANR	10791932	Argument	enc		10791894	0					
ANR	10791933	Identifier	enc		10791894	0					
ANR	10791934	Argument	ptr		10791894	1					
ANR	10791935	Identifier	ptr		10791894	0					
ANR	10791936	Argument	end		10791894	2					
ANR	10791937	Identifier	end		10791894	0					
ANR	10791938	CompoundStatement		8:40:122:122	10791894	1					
ANR	10791939	ExpressionStatement	* nextTokPtr = ptr	1139:4:29304:29321	10791894	0	True				
ANR	10791940	AssignmentExpression	* nextTokPtr = ptr		10791894	0		=			
ANR	10791941	UnaryOperationExpression	* nextTokPtr		10791894	0					
ANR	10791942	UnaryOperator	*		10791894	0					
ANR	10791943	Identifier	nextTokPtr		10791894	1					
ANR	10791944	Identifier	ptr		10791894	1					
ANR	10791945	ReturnStatement	return 0 ;	1140:4:29327:29335	10791894	1	True				
ANR	10791946	PrimaryExpression	0		10791894	0					
ANR	10791947	DoStatement	do		10791894	4					
ANR	10791948	CompoundStatement		12:5:170:170	10791894	0					
ANR	10791949	ExpressionStatement	ptr += enc -> minBytesPerChar	1143:4:29352:29379	10791894	0	True				
ANR	10791950	AssignmentExpression	ptr += enc -> minBytesPerChar		10791894	0		+=			
ANR	10791951	Identifier	ptr		10791894	0					
ANR	10791952	PtrMemberAccess	enc -> minBytesPerChar		10791894	1					
ANR	10791953	Identifier	enc		10791894	0					
ANR	10791954	Identifier	minBytesPerChar		10791894	1					
ANR	10791955	Condition	"isSpace ( toAscii ( enc , ptr , end ) )"	1144:11:29392:29422	10791894	1	True				
ANR	10791956	CallExpression	"isSpace ( toAscii ( enc , ptr , end ) )"		10791894	0					
ANR	10791957	Callee	isSpace		10791894	0					
ANR	10791958	Identifier	isSpace		10791894	0					
ANR	10791959	ArgumentList	"toAscii ( enc , ptr , end )"		10791894	1					
ANR	10791960	Argument	"toAscii ( enc , ptr , end )"		10791894	0					
ANR	10791961	CallExpression	"toAscii ( enc , ptr , end )"		10791894	0					
ANR	10791962	Callee	toAscii		10791894	0					
ANR	10791963	Identifier	toAscii		10791894	0					
ANR	10791964	ArgumentList	enc		10791894	1					
ANR	10791965	Argument	enc		10791894	0					
ANR	10791966	Identifier	enc		10791894	0					
ANR	10791967	Argument	ptr		10791894	1					
ANR	10791968	Identifier	ptr		10791894	0					
ANR	10791969	Argument	end		10791894	2					
ANR	10791970	Identifier	end		10791894	0					
ANR	10791971	IfStatement	if ( ptr == end )		10791894	5					
ANR	10791972	Condition	ptr == end	1145:6:29432:29441	10791894	0	True				
ANR	10791973	EqualityExpression	ptr == end		10791894	0		==			
ANR	10791974	Identifier	ptr		10791894	0					
ANR	10791975	Identifier	end		10791894	1					
ANR	10791976	CompoundStatement		15:18:268:268	10791894	1					
ANR	10791977	ExpressionStatement	* namePtr = NULL	1146:4:29450:29465	10791894	0	True				
ANR	10791978	AssignmentExpression	* namePtr = NULL		10791894	0		=			
ANR	10791979	UnaryOperationExpression	* namePtr		10791894	0					
ANR	10791980	UnaryOperator	*		10791894	0					
ANR	10791981	Identifier	namePtr		10791894	1					
ANR	10791982	Identifier	NULL		10791894	1					
ANR	10791983	ReturnStatement	return 1 ;	1147:4:29471:29479	10791894	1	True				
ANR	10791984	PrimaryExpression	1		10791894	0					
ANR	10791985	ExpressionStatement	* namePtr = ptr	1149:2:29487:29501	10791894	6	True				
ANR	10791986	AssignmentExpression	* namePtr = ptr		10791894	0		=			
ANR	10791987	UnaryOperationExpression	* namePtr		10791894	0					
ANR	10791988	UnaryOperator	*		10791894	0					
ANR	10791989	Identifier	namePtr		10791894	1					
ANR	10791990	Identifier	ptr		10791894	1					
ANR	10791991	ForStatement	for ( ; ; )		10791894	7					
ANR	10791992	CompoundStatement		20:11:338:338	10791894	0					
ANR	10791993	ExpressionStatement	"c = toAscii ( enc , ptr , end )"	1151:4:29520:29546	10791894	0	True				
ANR	10791994	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		10791894	0		=			
ANR	10791995	Identifier	c		10791894	0					
ANR	10791996	CallExpression	"toAscii ( enc , ptr , end )"		10791894	1					
ANR	10791997	Callee	toAscii		10791894	0					
ANR	10791998	Identifier	toAscii		10791894	0					
ANR	10791999	ArgumentList	enc		10791894	1					
ANR	10792000	Argument	enc		10791894	0					
ANR	10792001	Identifier	enc		10791894	0					
ANR	10792002	Argument	ptr		10791894	1					
ANR	10792003	Identifier	ptr		10791894	0					
ANR	10792004	Argument	end		10791894	2					
ANR	10792005	Identifier	end		10791894	0					
ANR	10792006	IfStatement	if ( c == - 1 )		10791894	1					
ANR	10792007	Condition	c == - 1	1152:8:29556:29562	10791894	0	True				
ANR	10792008	EqualityExpression	c == - 1		10791894	0		==			
ANR	10792009	Identifier	c		10791894	0					
ANR	10792010	UnaryOperationExpression	- 1		10791894	1					
ANR	10792011	UnaryOperator	-		10791894	0					
ANR	10792012	PrimaryExpression	1		10791894	1					
ANR	10792013	CompoundStatement		22:17:389:389	10791894	1					
ANR	10792014	ExpressionStatement	* nextTokPtr = ptr	1153:6:29573:29590	10791894	0	True				
ANR	10792015	AssignmentExpression	* nextTokPtr = ptr		10791894	0		=			
ANR	10792016	UnaryOperationExpression	* nextTokPtr		10791894	0					
ANR	10792017	UnaryOperator	*		10791894	0					
ANR	10792018	Identifier	nextTokPtr		10791894	1					
ANR	10792019	Identifier	ptr		10791894	1					
ANR	10792020	ReturnStatement	return 0 ;	1154:6:29598:29606	10791894	1	True				
ANR	10792021	PrimaryExpression	0		10791894	0					
ANR	10792022	IfStatement	if ( c == ASCII_EQUALS )		10791894	2					
ANR	10792023	Condition	c == ASCII_EQUALS	1156:8:29622:29638	10791894	0	True				
ANR	10792024	EqualityExpression	c == ASCII_EQUALS		10791894	0		==			
ANR	10792025	Identifier	c		10791894	0					
ANR	10792026	Identifier	ASCII_EQUALS		10791894	1					
ANR	10792027	CompoundStatement		26:27:465:465	10791894	1					
ANR	10792028	ExpressionStatement	* nameEndPtr = ptr	1157:6:29649:29666	10791894	0	True				
ANR	10792029	AssignmentExpression	* nameEndPtr = ptr		10791894	0		=			
ANR	10792030	UnaryOperationExpression	* nameEndPtr		10791894	0					
ANR	10792031	UnaryOperator	*		10791894	0					
ANR	10792032	Identifier	nameEndPtr		10791894	1					
ANR	10792033	Identifier	ptr		10791894	1					
ANR	10792034	BreakStatement	break ;	1158:6:29674:29679	10791894	1	True				
ANR	10792035	IfStatement	if ( isSpace ( c ) )		10791894	3					
ANR	10792036	Condition	isSpace ( c )	1160:8:29695:29704	10791894	0	True				
ANR	10792037	CallExpression	isSpace ( c )		10791894	0					
ANR	10792038	Callee	isSpace		10791894	0					
ANR	10792039	Identifier	isSpace		10791894	0					
ANR	10792040	ArgumentList	c		10791894	1					
ANR	10792041	Argument	c		10791894	0					
ANR	10792042	Identifier	c		10791894	0					
ANR	10792043	CompoundStatement		30:20:531:531	10791894	1					
ANR	10792044	ExpressionStatement	* nameEndPtr = ptr	1161:6:29715:29732	10791894	0	True				
ANR	10792045	AssignmentExpression	* nameEndPtr = ptr		10791894	0		=			
ANR	10792046	UnaryOperationExpression	* nameEndPtr		10791894	0					
ANR	10792047	UnaryOperator	*		10791894	0					
ANR	10792048	Identifier	nameEndPtr		10791894	1					
ANR	10792049	Identifier	ptr		10791894	1					
ANR	10792050	DoStatement	do		10791894	1					
ANR	10792051	CompoundStatement		32:9:567:567	10791894	0					
ANR	10792052	ExpressionStatement	ptr += enc -> minBytesPerChar	1163:8:29753:29780	10791894	0	True				
ANR	10792053	AssignmentExpression	ptr += enc -> minBytesPerChar		10791894	0		+=			
ANR	10792054	Identifier	ptr		10791894	0					
ANR	10792055	PtrMemberAccess	enc -> minBytesPerChar		10791894	1					
ANR	10792056	Identifier	enc		10791894	0					
ANR	10792057	Identifier	minBytesPerChar		10791894	1					
ANR	10792058	Condition	"isSpace ( c = toAscii ( enc , ptr , end ) )"	1164:15:29797:29831	10791894	1	True				
ANR	10792059	CallExpression	"isSpace ( c = toAscii ( enc , ptr , end ) )"		10791894	0					
ANR	10792060	Callee	isSpace		10791894	0					
ANR	10792061	Identifier	isSpace		10791894	0					
ANR	10792062	ArgumentList	"c = toAscii ( enc , ptr , end )"		10791894	1					
ANR	10792063	Argument	"c = toAscii ( enc , ptr , end )"		10791894	0					
ANR	10792064	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		10791894	0		=			
ANR	10792065	Identifier	c		10791894	0					
ANR	10792066	CallExpression	"toAscii ( enc , ptr , end )"		10791894	1					
ANR	10792067	Callee	toAscii		10791894	0					
ANR	10792068	Identifier	toAscii		10791894	0					
ANR	10792069	ArgumentList	enc		10791894	1					
ANR	10792070	Argument	enc		10791894	0					
ANR	10792071	Identifier	enc		10791894	0					
ANR	10792072	Argument	ptr		10791894	1					
ANR	10792073	Identifier	ptr		10791894	0					
ANR	10792074	Argument	end		10791894	2					
ANR	10792075	Identifier	end		10791894	0					
ANR	10792076	IfStatement	if ( c != ASCII_EQUALS )		10791894	2					
ANR	10792077	Condition	c != ASCII_EQUALS	1165:10:29845:29861	10791894	0	True				
ANR	10792078	EqualityExpression	c != ASCII_EQUALS		10791894	0		!=			
ANR	10792079	Identifier	c		10791894	0					
ANR	10792080	Identifier	ASCII_EQUALS		10791894	1					
ANR	10792081	CompoundStatement		35:29:688:688	10791894	1					
ANR	10792082	ExpressionStatement	* nextTokPtr = ptr	1166:8:29874:29891	10791894	0	True				
ANR	10792083	AssignmentExpression	* nextTokPtr = ptr		10791894	0		=			
ANR	10792084	UnaryOperationExpression	* nextTokPtr		10791894	0					
ANR	10792085	UnaryOperator	*		10791894	0					
ANR	10792086	Identifier	nextTokPtr		10791894	1					
ANR	10792087	Identifier	ptr		10791894	1					
ANR	10792088	ReturnStatement	return 0 ;	1167:8:29901:29909	10791894	1	True				
ANR	10792089	PrimaryExpression	0		10791894	0					
ANR	10792090	BreakStatement	break ;	1169:6:29925:29930	10791894	3	True				
ANR	10792091	ExpressionStatement	ptr += enc -> minBytesPerChar	1171:4:29942:29969	10791894	4	True				
ANR	10792092	AssignmentExpression	ptr += enc -> minBytesPerChar		10791894	0		+=			
ANR	10792093	Identifier	ptr		10791894	0					
ANR	10792094	PtrMemberAccess	enc -> minBytesPerChar		10791894	1					
ANR	10792095	Identifier	enc		10791894	0					
ANR	10792096	Identifier	minBytesPerChar		10791894	1					
ANR	10792097	IfStatement	if ( ptr == * namePtr )		10791894	8					
ANR	10792098	Condition	ptr == * namePtr	1173:6:29981:29995	10791894	0	True				
ANR	10792099	EqualityExpression	ptr == * namePtr		10791894	0		==			
ANR	10792100	Identifier	ptr		10791894	0					
ANR	10792101	UnaryOperationExpression	* namePtr		10791894	1					
ANR	10792102	UnaryOperator	*		10791894	0					
ANR	10792103	Identifier	namePtr		10791894	1					
ANR	10792104	CompoundStatement		43:23:822:822	10791894	1					
ANR	10792105	ExpressionStatement	* nextTokPtr = ptr	1174:4:30004:30021	10791894	0	True				
ANR	10792106	AssignmentExpression	* nextTokPtr = ptr		10791894	0		=			
ANR	10792107	UnaryOperationExpression	* nextTokPtr		10791894	0					
ANR	10792108	UnaryOperator	*		10791894	0					
ANR	10792109	Identifier	nextTokPtr		10791894	1					
ANR	10792110	Identifier	ptr		10791894	1					
ANR	10792111	ReturnStatement	return 0 ;	1175:4:30027:30035	10791894	1	True				
ANR	10792112	PrimaryExpression	0		10791894	0					
ANR	10792113	ExpressionStatement	ptr += enc -> minBytesPerChar	1177:2:30043:30070	10791894	9	True				
ANR	10792114	AssignmentExpression	ptr += enc -> minBytesPerChar		10791894	0		+=			
ANR	10792115	Identifier	ptr		10791894	0					
ANR	10792116	PtrMemberAccess	enc -> minBytesPerChar		10791894	1					
ANR	10792117	Identifier	enc		10791894	0					
ANR	10792118	Identifier	minBytesPerChar		10791894	1					
ANR	10792119	ExpressionStatement	"c = toAscii ( enc , ptr , end )"	1178:2:30074:30100	10791894	10	True				
ANR	10792120	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		10791894	0		=			
ANR	10792121	Identifier	c		10791894	0					
ANR	10792122	CallExpression	"toAscii ( enc , ptr , end )"		10791894	1					
ANR	10792123	Callee	toAscii		10791894	0					
ANR	10792124	Identifier	toAscii		10791894	0					
ANR	10792125	ArgumentList	enc		10791894	1					
ANR	10792126	Argument	enc		10791894	0					
ANR	10792127	Identifier	enc		10791894	0					
ANR	10792128	Argument	ptr		10791894	1					
ANR	10792129	Identifier	ptr		10791894	0					
ANR	10792130	Argument	end		10791894	2					
ANR	10792131	Identifier	end		10791894	0					
ANR	10792132	WhileStatement	while ( isSpace ( c ) )		10791894	11					
ANR	10792133	Condition	isSpace ( c )	1179:9:30111:30120	10791894	0	True				
ANR	10792134	CallExpression	isSpace ( c )		10791894	0					
ANR	10792135	Callee	isSpace		10791894	0					
ANR	10792136	Identifier	isSpace		10791894	0					
ANR	10792137	ArgumentList	c		10791894	1					
ANR	10792138	Argument	c		10791894	0					
ANR	10792139	Identifier	c		10791894	0					
ANR	10792140	CompoundStatement		49:21:947:947	10791894	1					
ANR	10792141	ExpressionStatement	ptr += enc -> minBytesPerChar	1180:4:30129:30156	10791894	0	True				
ANR	10792142	AssignmentExpression	ptr += enc -> minBytesPerChar		10791894	0		+=			
ANR	10792143	Identifier	ptr		10791894	0					
ANR	10792144	PtrMemberAccess	enc -> minBytesPerChar		10791894	1					
ANR	10792145	Identifier	enc		10791894	0					
ANR	10792146	Identifier	minBytesPerChar		10791894	1					
ANR	10792147	ExpressionStatement	"c = toAscii ( enc , ptr , end )"	1181:4:30162:30188	10791894	1	True				
ANR	10792148	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		10791894	0		=			
ANR	10792149	Identifier	c		10791894	0					
ANR	10792150	CallExpression	"toAscii ( enc , ptr , end )"		10791894	1					
ANR	10792151	Callee	toAscii		10791894	0					
ANR	10792152	Identifier	toAscii		10791894	0					
ANR	10792153	ArgumentList	enc		10791894	1					
ANR	10792154	Argument	enc		10791894	0					
ANR	10792155	Identifier	enc		10791894	0					
ANR	10792156	Argument	ptr		10791894	1					
ANR	10792157	Identifier	ptr		10791894	0					
ANR	10792158	Argument	end		10791894	2					
ANR	10792159	Identifier	end		10791894	0					
ANR	10792160	IfStatement	if ( c != ASCII_QUOT && c != ASCII_APOS )		10791894	12					
ANR	10792161	Condition	c != ASCII_QUOT && c != ASCII_APOS	1183:6:30200:30233	10791894	0	True				
ANR	10792162	AndExpression	c != ASCII_QUOT && c != ASCII_APOS		10791894	0		&&			
ANR	10792163	EqualityExpression	c != ASCII_QUOT		10791894	0		!=			
ANR	10792164	Identifier	c		10791894	0					
ANR	10792165	Identifier	ASCII_QUOT		10791894	1					
ANR	10792166	EqualityExpression	c != ASCII_APOS		10791894	1		!=			
ANR	10792167	Identifier	c		10791894	0					
ANR	10792168	Identifier	ASCII_APOS		10791894	1					
ANR	10792169	CompoundStatement		53:42:1060:1060	10791894	1					
ANR	10792170	ExpressionStatement	* nextTokPtr = ptr	1184:4:30242:30259	10791894	0	True				
ANR	10792171	AssignmentExpression	* nextTokPtr = ptr		10791894	0		=			
ANR	10792172	UnaryOperationExpression	* nextTokPtr		10791894	0					
ANR	10792173	UnaryOperator	*		10791894	0					
ANR	10792174	Identifier	nextTokPtr		10791894	1					
ANR	10792175	Identifier	ptr		10791894	1					
ANR	10792176	ReturnStatement	return 0 ;	1185:4:30265:30273	10791894	1	True				
ANR	10792177	PrimaryExpression	0		10791894	0					
ANR	10792178	ExpressionStatement	open = ( char ) c	1187:2:30281:30295	10791894	13	True				
ANR	10792179	AssignmentExpression	open = ( char ) c		10791894	0		=			
ANR	10792180	Identifier	open		10791894	0					
ANR	10792181	CastExpression	( char ) c		10791894	1					
ANR	10792182	CastTarget	char		10791894	0					
ANR	10792183	Identifier	c		10791894	1					
ANR	10792184	ExpressionStatement	ptr += enc -> minBytesPerChar	1188:2:30299:30326	10791894	14	True				
ANR	10792185	AssignmentExpression	ptr += enc -> minBytesPerChar		10791894	0		+=			
ANR	10792186	Identifier	ptr		10791894	0					
ANR	10792187	PtrMemberAccess	enc -> minBytesPerChar		10791894	1					
ANR	10792188	Identifier	enc		10791894	0					
ANR	10792189	Identifier	minBytesPerChar		10791894	1					
ANR	10792190	ExpressionStatement	* valPtr = ptr	1189:2:30330:30343	10791894	15	True				
ANR	10792191	AssignmentExpression	* valPtr = ptr		10791894	0		=			
ANR	10792192	UnaryOperationExpression	* valPtr		10791894	0					
ANR	10792193	UnaryOperator	*		10791894	0					
ANR	10792194	Identifier	valPtr		10791894	1					
ANR	10792195	Identifier	ptr		10791894	1					
ANR	10792196	ForStatement	for ( ; ; ptr += enc -> minBytesPerChar )		10791894	16					
ANR	10792197	AssignmentExpression	ptr += enc -> minBytesPerChar	1190:10:30355:30381	10791894	0	True	+=			
ANR	10792198	Identifier	ptr		10791894	0					
ANR	10792199	PtrMemberAccess	enc -> minBytesPerChar		10791894	1					
ANR	10792200	Identifier	enc		10791894	0					
ANR	10792201	Identifier	minBytesPerChar		10791894	1					
ANR	10792202	CompoundStatement		60:39:1208:1208	10791894	1					
ANR	10792203	ExpressionStatement	"c = toAscii ( enc , ptr , end )"	1191:4:30390:30416	10791894	0	True				
ANR	10792204	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		10791894	0		=			
ANR	10792205	Identifier	c		10791894	0					
ANR	10792206	CallExpression	"toAscii ( enc , ptr , end )"		10791894	1					
ANR	10792207	Callee	toAscii		10791894	0					
ANR	10792208	Identifier	toAscii		10791894	0					
ANR	10792209	ArgumentList	enc		10791894	1					
ANR	10792210	Argument	enc		10791894	0					
ANR	10792211	Identifier	enc		10791894	0					
ANR	10792212	Argument	ptr		10791894	1					
ANR	10792213	Identifier	ptr		10791894	0					
ANR	10792214	Argument	end		10791894	2					
ANR	10792215	Identifier	end		10791894	0					
ANR	10792216	IfStatement	if ( c == open )		10791894	1					
ANR	10792217	Condition	c == open	1192:8:30426:30434	10791894	0	True				
ANR	10792218	EqualityExpression	c == open		10791894	0		==			
ANR	10792219	Identifier	c		10791894	0					
ANR	10792220	Identifier	open		10791894	1					
ANR	10792221	BreakStatement	break ;	1193:6:30443:30448	10791894	1	True				
ANR	10792222	IfStatement	if ( ! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z ) && ! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE )		10791894	2					
ANR	10792223	Condition	! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z ) && ! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE	1194:8:30458:30664	10791894	0	True				
ANR	10792224	AndExpression	! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z ) && ! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE		10791894	0		&&			
ANR	10792225	UnaryOperationExpression	! ( ASCII_a <= c && c <= ASCII_z )		10791894	0					
ANR	10792226	UnaryOperator	!		10791894	0					
ANR	10792227	AndExpression	ASCII_a <= c && c <= ASCII_z		10791894	1		&&			
ANR	10792228	RelationalExpression	ASCII_a <= c		10791894	0		<=			
ANR	10792229	Identifier	ASCII_a		10791894	0					
ANR	10792230	Identifier	c		10791894	1					
ANR	10792231	RelationalExpression	c <= ASCII_z		10791894	1		<=			
ANR	10792232	Identifier	c		10791894	0					
ANR	10792233	Identifier	ASCII_z		10791894	1					
ANR	10792234	AndExpression	! ( ASCII_A <= c && c <= ASCII_Z ) && ! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE		10791894	1		&&			
ANR	10792235	UnaryOperationExpression	! ( ASCII_A <= c && c <= ASCII_Z )		10791894	0					
ANR	10792236	UnaryOperator	!		10791894	0					
ANR	10792237	AndExpression	ASCII_A <= c && c <= ASCII_Z		10791894	1		&&			
ANR	10792238	RelationalExpression	ASCII_A <= c		10791894	0		<=			
ANR	10792239	Identifier	ASCII_A		10791894	0					
ANR	10792240	Identifier	c		10791894	1					
ANR	10792241	RelationalExpression	c <= ASCII_Z		10791894	1		<=			
ANR	10792242	Identifier	c		10791894	0					
ANR	10792243	Identifier	ASCII_Z		10791894	1					
ANR	10792244	AndExpression	! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE		10791894	1		&&			
ANR	10792245	UnaryOperationExpression	! ( ASCII_0 <= c && c <= ASCII_9 )		10791894	0					
ANR	10792246	UnaryOperator	!		10791894	0					
ANR	10792247	AndExpression	ASCII_0 <= c && c <= ASCII_9		10791894	1		&&			
ANR	10792248	RelationalExpression	ASCII_0 <= c		10791894	0		<=			
ANR	10792249	Identifier	ASCII_0		10791894	0					
ANR	10792250	Identifier	c		10791894	1					
ANR	10792251	RelationalExpression	c <= ASCII_9		10791894	1		<=			
ANR	10792252	Identifier	c		10791894	0					
ANR	10792253	Identifier	ASCII_9		10791894	1					
ANR	10792254	AndExpression	c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE		10791894	1		&&			
ANR	10792255	EqualityExpression	c != ASCII_PERIOD		10791894	0		!=			
ANR	10792256	Identifier	c		10791894	0					
ANR	10792257	Identifier	ASCII_PERIOD		10791894	1					
ANR	10792258	AndExpression	c != ASCII_MINUS && c != ASCII_UNDERSCORE		10791894	1		&&			
ANR	10792259	EqualityExpression	c != ASCII_MINUS		10791894	0		!=			
ANR	10792260	Identifier	c		10791894	0					
ANR	10792261	Identifier	ASCII_MINUS		10791894	1					
ANR	10792262	EqualityExpression	c != ASCII_UNDERSCORE		10791894	1		!=			
ANR	10792263	Identifier	c		10791894	0					
ANR	10792264	Identifier	ASCII_UNDERSCORE		10791894	1					
ANR	10792265	CompoundStatement		69:34:1491:1491	10791894	1					
ANR	10792266	ExpressionStatement	* nextTokPtr = ptr	1200:6:30675:30692	10791894	0	True				
ANR	10792267	AssignmentExpression	* nextTokPtr = ptr		10791894	0		=			
ANR	10792268	UnaryOperationExpression	* nextTokPtr		10791894	0					
ANR	10792269	UnaryOperator	*		10791894	0					
ANR	10792270	Identifier	nextTokPtr		10791894	1					
ANR	10792271	Identifier	ptr		10791894	1					
ANR	10792272	ReturnStatement	return 0 ;	1201:6:30700:30708	10791894	1	True				
ANR	10792273	PrimaryExpression	0		10791894	0					
ANR	10792274	ExpressionStatement	* nextTokPtr = ptr + enc -> minBytesPerChar	1204:2:30722:30762	10791894	17	True				
ANR	10792275	AssignmentExpression	* nextTokPtr = ptr + enc -> minBytesPerChar		10791894	0		=			
ANR	10792276	UnaryOperationExpression	* nextTokPtr		10791894	0					
ANR	10792277	UnaryOperator	*		10791894	0					
ANR	10792278	Identifier	nextTokPtr		10791894	1					
ANR	10792279	AdditiveExpression	ptr + enc -> minBytesPerChar		10791894	1		+			
ANR	10792280	Identifier	ptr		10791894	0					
ANR	10792281	PtrMemberAccess	enc -> minBytesPerChar		10791894	1					
ANR	10792282	Identifier	enc		10791894	0					
ANR	10792283	Identifier	minBytesPerChar		10791894	1					
ANR	10792284	ReturnStatement	return 1 ;	1205:2:30766:30774	10791894	18	True				
ANR	10792285	PrimaryExpression	1		10791894	0					
ANR	10792286	ReturnType	static int		10791894	1					
ANR	10792287	Identifier	parsePseudoAttribute		10791894	2					
ANR	10792288	ParameterList	"const ENCODING * enc , const char * ptr , const char * end , const char * * namePtr , const char * * nameEndPtr , const char * * valPtr , const char * * nextTokPtr"		10791894	3					
ANR	10792289	Parameter	const ENCODING * enc	1124:21:28901:28919	10791894	0	True				
ANR	10792290	ParameterType	const ENCODING *		10791894	0					
ANR	10792291	Identifier	enc		10791894	1					
ANR	10792292	Parameter	const char * ptr	1125:21:28943:28957	10791894	1	True				
ANR	10792293	ParameterType	const char *		10791894	0					
ANR	10792294	Identifier	ptr		10791894	1					
ANR	10792295	Parameter	const char * end	1126:21:28981:28995	10791894	2	True				
ANR	10792296	ParameterType	const char *		10791894	0					
ANR	10792297	Identifier	end		10791894	1					
ANR	10792298	Parameter	const char * * namePtr	1127:21:29019:29038	10791894	3	True				
ANR	10792299	ParameterType	const char * *		10791894	0					
ANR	10792300	Identifier	namePtr		10791894	1					
ANR	10792301	Parameter	const char * * nameEndPtr	1128:21:29062:29084	10791894	4	True				
ANR	10792302	ParameterType	const char * *		10791894	0					
ANR	10792303	Identifier	nameEndPtr		10791894	1					
ANR	10792304	Parameter	const char * * valPtr	1129:21:29108:29126	10791894	5	True				
ANR	10792305	ParameterType	const char * *		10791894	0					
ANR	10792306	Identifier	valPtr		10791894	1					
ANR	10792307	Parameter	const char * * nextTokPtr	1130:21:29150:29172	10791894	6	True				
ANR	10792308	ParameterType	const char * *		10791894	0					
ANR	10792309	Identifier	nextTokPtr		10791894	1					
ANR	10792310	CFGEntryNode	ENTRY		10791894		True				
ANR	10792311	CFGExitNode	EXIT		10791894		True				
ANR	10792312	InfiniteForNode	true		10791894		True				
ANR	10792313	InfiniteForNode	true		10791894		True				
ANR	10792314	Symbol	namePtr		10791894						
ANR	10792315	Symbol	nextTokPtr		10791894						
ANR	10792316	Symbol	ASCII_9		10791894						
ANR	10792317	Symbol	ASCII_z		10791894						
ANR	10792318	Symbol	* nextTokPtr		10791894						
ANR	10792319	Symbol	ASCII_QUOT		10791894						
ANR	10792320	Symbol	ASCII_0		10791894						
ANR	10792321	Symbol	isSpace		10791894						
ANR	10792322	Symbol	toAscii		10791894						
ANR	10792323	Symbol	nameEndPtr		10791894						
ANR	10792324	Symbol	ASCII_PERIOD		10791894						
ANR	10792325	Symbol	end		10791894						
ANR	10792326	Symbol	ASCII_A		10791894						
ANR	10792327	Symbol	enc		10791894						
ANR	10792328	Symbol	* nameEndPtr		10791894						
ANR	10792329	Symbol	ASCII_UNDERSCORE		10791894						
ANR	10792330	Symbol	* valPtr		10791894						
ANR	10792331	Symbol	ASCII_MINUS		10791894						
ANR	10792332	Symbol	c		10791894						
ANR	10792333	Symbol	NULL		10791894						
ANR	10792334	Symbol	ASCII_Z		10791894						
ANR	10792335	Symbol	valPtr		10791894						
ANR	10792336	Symbol	enc -> minBytesPerChar		10791894						
ANR	10792337	Symbol	ptr		10791894						
ANR	10792338	Symbol	* namePtr		10791894						
ANR	10792339	Symbol	ASCII_EQUALS		10791894						
ANR	10792340	Symbol	ASCII_APOS		10791894						
ANR	10792341	Symbol	ASCII_a		10791894						
ANR	10792342	Symbol	* enc		10791894						
ANR	10792343	Symbol	open		10791894						
ANR	10792344	DeclStmt									
ANR	10792345	Decl							const char	const char [ ]	KW_version
ANR	10792346	DeclStmt									
ANR	10792347	Decl							const char	const char [ ]	KW_encoding
ANR	10792348	DeclStmt									
ANR	10792349	Decl							const char	const char [ ]	KW_standalone
ANR	10792350	DeclStmt									
ANR	10792351	Decl							const char	const char [ ]	KW_yes
ANR	10792352	DeclStmt									
ANR	10792353	Decl							const char	const char [ ]	KW_no
ANR	10792354	Function	doParseXmlDecl	1229:0:31278:33766							
ANR	10792355	FunctionDef	"doParseXmlDecl (const ENCODING * ( * encodingFinder ) ( const ENCODING * , const char * , const char * ) , int isGeneralTextEntity , const ENCODING * enc , const char * ptr , const char * end , const char * * badPtr , const char * * versionPtr , const char * * versionEndPtr , const char * * encodingName , const ENCODING * * encoding , int * standalone)"		10792354	0					
ANR	10792356	CompoundStatement		1243:0:31858:33766	10792354	0					
ANR	10792357	IdentifierDeclStatement	const char * val = NULL ;	1244:2:31862:31884	10792354	0	True				
ANR	10792358	IdentifierDecl	* val = NULL		10792354	0					
ANR	10792359	IdentifierDeclType	const char *		10792354	0					
ANR	10792360	Identifier	val		10792354	1					
ANR	10792361	AssignmentExpression	* val = NULL		10792354	2		=			
ANR	10792362	Identifier	NULL		10792354	0					
ANR	10792363	Identifier	NULL		10792354	1					
ANR	10792364	IdentifierDeclStatement	const char * name = NULL ;	1245:2:31888:31911	10792354	1	True				
ANR	10792365	IdentifierDecl	* name = NULL		10792354	0					
ANR	10792366	IdentifierDeclType	const char *		10792354	0					
ANR	10792367	Identifier	name		10792354	1					
ANR	10792368	AssignmentExpression	* name = NULL		10792354	2		=			
ANR	10792369	Identifier	NULL		10792354	0					
ANR	10792370	Identifier	NULL		10792354	1					
ANR	10792371	IdentifierDeclStatement	const char * nameEnd = NULL ;	1246:2:31915:31941	10792354	2	True				
ANR	10792372	IdentifierDecl	* nameEnd = NULL		10792354	0					
ANR	10792373	IdentifierDeclType	const char *		10792354	0					
ANR	10792374	Identifier	nameEnd		10792354	1					
ANR	10792375	AssignmentExpression	* nameEnd = NULL		10792354	2		=			
ANR	10792376	Identifier	NULL		10792354	0					
ANR	10792377	Identifier	NULL		10792354	1					
ANR	10792378	ExpressionStatement	ptr += 5 * enc -> minBytesPerChar	1247:2:31945:31976	10792354	3	True				
ANR	10792379	AssignmentExpression	ptr += 5 * enc -> minBytesPerChar		10792354	0		+=			
ANR	10792380	Identifier	ptr		10792354	0					
ANR	10792381	MultiplicativeExpression	5 * enc -> minBytesPerChar		10792354	1		*			
ANR	10792382	PrimaryExpression	5		10792354	0					
ANR	10792383	PtrMemberAccess	enc -> minBytesPerChar		10792354	1					
ANR	10792384	Identifier	enc		10792354	0					
ANR	10792385	Identifier	minBytesPerChar		10792354	1					
ANR	10792386	ExpressionStatement	end -= 2 * enc -> minBytesPerChar	1248:2:31980:32011	10792354	4	True				
ANR	10792387	AssignmentExpression	end -= 2 * enc -> minBytesPerChar		10792354	0		-=			
ANR	10792388	Identifier	end		10792354	0					
ANR	10792389	MultiplicativeExpression	2 * enc -> minBytesPerChar		10792354	1		*			
ANR	10792390	PrimaryExpression	2		10792354	0					
ANR	10792391	PtrMemberAccess	enc -> minBytesPerChar		10792354	1					
ANR	10792392	Identifier	enc		10792354	0					
ANR	10792393	Identifier	minBytesPerChar		10792354	1					
ANR	10792394	IfStatement	"if ( ! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) || ! name )"		10792354	5					
ANR	10792395	Condition	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) || ! name"	1249:6:32019:32098	10792354	0	True				
ANR	10792396	OrExpression	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) || ! name"		10792354	0		||			
ANR	10792397	UnaryOperationExpression	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		10792354	0					
ANR	10792398	UnaryOperator	!		10792354	0					
ANR	10792399	CallExpression	"parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		10792354	1					
ANR	10792400	Callee	parsePseudoAttribute		10792354	0					
ANR	10792401	Identifier	parsePseudoAttribute		10792354	0					
ANR	10792402	ArgumentList	enc		10792354	1					
ANR	10792403	Argument	enc		10792354	0					
ANR	10792404	Identifier	enc		10792354	0					
ANR	10792405	Argument	ptr		10792354	1					
ANR	10792406	Identifier	ptr		10792354	0					
ANR	10792407	Argument	end		10792354	2					
ANR	10792408	Identifier	end		10792354	0					
ANR	10792409	Argument	& name		10792354	3					
ANR	10792410	UnaryOperationExpression	& name		10792354	0					
ANR	10792411	UnaryOperator	&		10792354	0					
ANR	10792412	Identifier	name		10792354	1					
ANR	10792413	Argument	& nameEnd		10792354	4					
ANR	10792414	UnaryOperationExpression	& nameEnd		10792354	0					
ANR	10792415	UnaryOperator	&		10792354	0					
ANR	10792416	Identifier	nameEnd		10792354	1					
ANR	10792417	Argument	& val		10792354	5					
ANR	10792418	UnaryOperationExpression	& val		10792354	0					
ANR	10792419	UnaryOperator	&		10792354	0					
ANR	10792420	Identifier	val		10792354	1					
ANR	10792421	Argument	& ptr		10792354	6					
ANR	10792422	UnaryOperationExpression	& ptr		10792354	0					
ANR	10792423	UnaryOperator	&		10792354	0					
ANR	10792424	Identifier	ptr		10792354	1					
ANR	10792425	UnaryOperationExpression	! name		10792354	1					
ANR	10792426	UnaryOperator	!		10792354	0					
ANR	10792427	Identifier	name		10792354	1					
ANR	10792428	CompoundStatement		8:16:242:242	10792354	1					
ANR	10792429	ExpressionStatement	* badPtr = ptr	1251:4:32107:32120	10792354	0	True				
ANR	10792430	AssignmentExpression	* badPtr = ptr		10792354	0		=			
ANR	10792431	UnaryOperationExpression	* badPtr		10792354	0					
ANR	10792432	UnaryOperator	*		10792354	0					
ANR	10792433	Identifier	badPtr		10792354	1					
ANR	10792434	Identifier	ptr		10792354	1					
ANR	10792435	ReturnStatement	return 0 ;	1252:4:32126:32134	10792354	1	True				
ANR	10792436	PrimaryExpression	0		10792354	0					
ANR	10792437	IfStatement	"if ( ! XmlNameMatchesAscii ( enc , name , nameEnd , KW_version ) )"		10792354	6					
ANR	10792438	Condition	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_version )"	1254:6:32146:32197	10792354	0	True				
ANR	10792439	UnaryOperationExpression	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_version )"		10792354	0					
ANR	10792440	UnaryOperator	!		10792354	0					
ANR	10792441	CallExpression	"XmlNameMatchesAscii ( enc , name , nameEnd , KW_version )"		10792354	1					
ANR	10792442	Callee	XmlNameMatchesAscii		10792354	0					
ANR	10792443	Identifier	XmlNameMatchesAscii		10792354	0					
ANR	10792444	ArgumentList	enc		10792354	1					
ANR	10792445	Argument	enc		10792354	0					
ANR	10792446	Identifier	enc		10792354	0					
ANR	10792447	Argument	name		10792354	1					
ANR	10792448	Identifier	name		10792354	0					
ANR	10792449	Argument	nameEnd		10792354	2					
ANR	10792450	Identifier	nameEnd		10792354	0					
ANR	10792451	Argument	KW_version		10792354	3					
ANR	10792452	Identifier	KW_version		10792354	0					
ANR	10792453	CompoundStatement		12:60:341:341	10792354	1					
ANR	10792454	IfStatement	if ( ! isGeneralTextEntity )		10792354	0					
ANR	10792455	Condition	! isGeneralTextEntity	1255:8:32210:32229	10792354	0	True				
ANR	10792456	UnaryOperationExpression	! isGeneralTextEntity		10792354	0					
ANR	10792457	UnaryOperator	!		10792354	0					
ANR	10792458	Identifier	isGeneralTextEntity		10792354	1					
ANR	10792459	CompoundStatement		13:30:373:373	10792354	1					
ANR	10792460	ExpressionStatement	* badPtr = name	1256:6:32240:32254	10792354	0	True				
ANR	10792461	AssignmentExpression	* badPtr = name		10792354	0		=			
ANR	10792462	UnaryOperationExpression	* badPtr		10792354	0					
ANR	10792463	UnaryOperator	*		10792354	0					
ANR	10792464	Identifier	badPtr		10792354	1					
ANR	10792465	Identifier	name		10792354	1					
ANR	10792466	ReturnStatement	return 0 ;	1257:6:32262:32270	10792354	1	True				
ANR	10792467	PrimaryExpression	0		10792354	0					
ANR	10792468	ElseStatement	else		10792354	0					
ANR	10792469	CompoundStatement		18:7:430:430	10792354	0					
ANR	10792470	IfStatement	if ( versionPtr )		10792354	0					
ANR	10792471	Condition	versionPtr	1261:8:32299:32308	10792354	0	True				
ANR	10792472	Identifier	versionPtr		10792354	0					
ANR	10792473	ExpressionStatement	* versionPtr = val	1262:6:32317:32334	10792354	1	True				
ANR	10792474	AssignmentExpression	* versionPtr = val		10792354	0		=			
ANR	10792475	UnaryOperationExpression	* versionPtr		10792354	0					
ANR	10792476	UnaryOperator	*		10792354	0					
ANR	10792477	Identifier	versionPtr		10792354	1					
ANR	10792478	Identifier	val		10792354	1					
ANR	10792479	IfStatement	if ( versionEndPtr )		10792354	1					
ANR	10792480	Condition	versionEndPtr	1263:8:32344:32356	10792354	0	True				
ANR	10792481	Identifier	versionEndPtr		10792354	0					
ANR	10792482	ExpressionStatement	* versionEndPtr = ptr	1264:6:32365:32385	10792354	1	True				
ANR	10792483	AssignmentExpression	* versionEndPtr = ptr		10792354	0		=			
ANR	10792484	UnaryOperationExpression	* versionEndPtr		10792354	0					
ANR	10792485	UnaryOperator	*		10792354	0					
ANR	10792486	Identifier	versionEndPtr		10792354	1					
ANR	10792487	Identifier	ptr		10792354	1					
ANR	10792488	IfStatement	"if ( ! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) )"		10792354	2					
ANR	10792489	Condition	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"	1265:8:32395:32459	10792354	0	True				
ANR	10792490	UnaryOperationExpression	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		10792354	0					
ANR	10792491	UnaryOperator	!		10792354	0					
ANR	10792492	CallExpression	"parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		10792354	1					
ANR	10792493	Callee	parsePseudoAttribute		10792354	0					
ANR	10792494	Identifier	parsePseudoAttribute		10792354	0					
ANR	10792495	ArgumentList	enc		10792354	1					
ANR	10792496	Argument	enc		10792354	0					
ANR	10792497	Identifier	enc		10792354	0					
ANR	10792498	Argument	ptr		10792354	1					
ANR	10792499	Identifier	ptr		10792354	0					
ANR	10792500	Argument	end		10792354	2					
ANR	10792501	Identifier	end		10792354	0					
ANR	10792502	Argument	& name		10792354	3					
ANR	10792503	UnaryOperationExpression	& name		10792354	0					
ANR	10792504	UnaryOperator	&		10792354	0					
ANR	10792505	Identifier	name		10792354	1					
ANR	10792506	Argument	& nameEnd		10792354	4					
ANR	10792507	UnaryOperationExpression	& nameEnd		10792354	0					
ANR	10792508	UnaryOperator	&		10792354	0					
ANR	10792509	Identifier	nameEnd		10792354	1					
ANR	10792510	Argument	& val		10792354	5					
ANR	10792511	UnaryOperationExpression	& val		10792354	0					
ANR	10792512	UnaryOperator	&		10792354	0					
ANR	10792513	Identifier	val		10792354	1					
ANR	10792514	Argument	& ptr		10792354	6					
ANR	10792515	UnaryOperationExpression	& ptr		10792354	0					
ANR	10792516	UnaryOperator	&		10792354	0					
ANR	10792517	Identifier	ptr		10792354	1					
ANR	10792518	CompoundStatement		23:75:603:603	10792354	1					
ANR	10792519	ExpressionStatement	* badPtr = ptr	1266:6:32470:32483	10792354	0	True				
ANR	10792520	AssignmentExpression	* badPtr = ptr		10792354	0		=			
ANR	10792521	UnaryOperationExpression	* badPtr		10792354	0					
ANR	10792522	UnaryOperator	*		10792354	0					
ANR	10792523	Identifier	badPtr		10792354	1					
ANR	10792524	Identifier	ptr		10792354	1					
ANR	10792525	ReturnStatement	return 0 ;	1267:6:32491:32499	10792354	1	True				
ANR	10792526	PrimaryExpression	0		10792354	0					
ANR	10792527	IfStatement	if ( ! name )		10792354	3					
ANR	10792528	Condition	! name	1269:8:32515:32519	10792354	0	True				
ANR	10792529	UnaryOperationExpression	! name		10792354	0					
ANR	10792530	UnaryOperator	!		10792354	0					
ANR	10792531	Identifier	name		10792354	1					
ANR	10792532	CompoundStatement		27:15:663:663	10792354	1					
ANR	10792533	IfStatement	if ( isGeneralTextEntity )		10792354	0					
ANR	10792534	Condition	isGeneralTextEntity	1270:10:32534:32552	10792354	0	True				
ANR	10792535	Identifier	isGeneralTextEntity		10792354	0					
ANR	10792536	CompoundStatement		28:31:696:696	10792354	1					
ANR	10792537	ExpressionStatement	* badPtr = ptr	1272:8:32616:32629	10792354	0	True				
ANR	10792538	AssignmentExpression	* badPtr = ptr		10792354	0		=			
ANR	10792539	UnaryOperationExpression	* badPtr		10792354	0					
ANR	10792540	UnaryOperator	*		10792354	0					
ANR	10792541	Identifier	badPtr		10792354	1					
ANR	10792542	Identifier	ptr		10792354	1					
ANR	10792543	ReturnStatement	return 0 ;	1273:8:32639:32647	10792354	1	True				
ANR	10792544	PrimaryExpression	0		10792354	0					
ANR	10792545	ReturnStatement	return 1 ;	1275:6:32663:32671	10792354	1	True				
ANR	10792546	PrimaryExpression	1		10792354	0					
ANR	10792547	IfStatement	"if ( XmlNameMatchesAscii ( enc , name , nameEnd , KW_encoding ) )"		10792354	7					
ANR	10792548	Condition	"XmlNameMatchesAscii ( enc , name , nameEnd , KW_encoding )"	1278:6:32689:32740	10792354	0	True				
ANR	10792549	CallExpression	"XmlNameMatchesAscii ( enc , name , nameEnd , KW_encoding )"		10792354	0					
ANR	10792550	Callee	XmlNameMatchesAscii		10792354	0					
ANR	10792551	Identifier	XmlNameMatchesAscii		10792354	0					
ANR	10792552	ArgumentList	enc		10792354	1					
ANR	10792553	Argument	enc		10792354	0					
ANR	10792554	Identifier	enc		10792354	0					
ANR	10792555	Argument	name		10792354	1					
ANR	10792556	Identifier	name		10792354	0					
ANR	10792557	Argument	nameEnd		10792354	2					
ANR	10792558	Identifier	nameEnd		10792354	0					
ANR	10792559	Argument	KW_encoding		10792354	3					
ANR	10792560	Identifier	KW_encoding		10792354	0					
ANR	10792561	CompoundStatement		37:4:890:920	10792354	1					
ANR	10792562	IdentifierDeclStatement	"int c = toAscii ( enc , val , end ) ;"	1279:4:32749:32779	10792354	0	True				
ANR	10792563	IdentifierDecl	"c = toAscii ( enc , val , end )"		10792354	0					
ANR	10792564	IdentifierDeclType	int		10792354	0					
ANR	10792565	Identifier	c		10792354	1					
ANR	10792566	AssignmentExpression	"c = toAscii ( enc , val , end )"		10792354	2		=			
ANR	10792567	Identifier	c		10792354	0					
ANR	10792568	CallExpression	"toAscii ( enc , val , end )"		10792354	1					
ANR	10792569	Callee	toAscii		10792354	0					
ANR	10792570	Identifier	toAscii		10792354	0					
ANR	10792571	ArgumentList	enc		10792354	1					
ANR	10792572	Argument	enc		10792354	0					
ANR	10792573	Identifier	enc		10792354	0					
ANR	10792574	Argument	val		10792354	1					
ANR	10792575	Identifier	val		10792354	0					
ANR	10792576	Argument	end		10792354	2					
ANR	10792577	Identifier	end		10792354	0					
ANR	10792578	IfStatement	if ( ! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z ) )		10792354	1					
ANR	10792579	Condition	! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z )	1280:8:32789:32854	10792354	0	True				
ANR	10792580	AndExpression	! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z )		10792354	0		&&			
ANR	10792581	UnaryOperationExpression	! ( ASCII_a <= c && c <= ASCII_z )		10792354	0					
ANR	10792582	UnaryOperator	!		10792354	0					
ANR	10792583	AndExpression	ASCII_a <= c && c <= ASCII_z		10792354	1		&&			
ANR	10792584	RelationalExpression	ASCII_a <= c		10792354	0		<=			
ANR	10792585	Identifier	ASCII_a		10792354	0					
ANR	10792586	Identifier	c		10792354	1					
ANR	10792587	RelationalExpression	c <= ASCII_z		10792354	1		<=			
ANR	10792588	Identifier	c		10792354	0					
ANR	10792589	Identifier	ASCII_z		10792354	1					
ANR	10792590	UnaryOperationExpression	! ( ASCII_A <= c && c <= ASCII_Z )		10792354	1					
ANR	10792591	UnaryOperator	!		10792354	0					
ANR	10792592	AndExpression	ASCII_A <= c && c <= ASCII_Z		10792354	1		&&			
ANR	10792593	RelationalExpression	ASCII_A <= c		10792354	0		<=			
ANR	10792594	Identifier	ASCII_A		10792354	0					
ANR	10792595	Identifier	c		10792354	1					
ANR	10792596	RelationalExpression	c <= ASCII_Z		10792354	1		<=			
ANR	10792597	Identifier	c		10792354	0					
ANR	10792598	Identifier	ASCII_Z		10792354	1					
ANR	10792599	CompoundStatement		38:76:998:998	10792354	1					
ANR	10792600	ExpressionStatement	* badPtr = val	1281:6:32865:32878	10792354	0	True				
ANR	10792601	AssignmentExpression	* badPtr = val		10792354	0		=			
ANR	10792602	UnaryOperationExpression	* badPtr		10792354	0					
ANR	10792603	UnaryOperator	*		10792354	0					
ANR	10792604	Identifier	badPtr		10792354	1					
ANR	10792605	Identifier	val		10792354	1					
ANR	10792606	ReturnStatement	return 0 ;	1282:6:32886:32894	10792354	1	True				
ANR	10792607	PrimaryExpression	0		10792354	0					
ANR	10792608	IfStatement	if ( encodingName )		10792354	2					
ANR	10792609	Condition	encodingName	1284:8:32910:32921	10792354	0	True				
ANR	10792610	Identifier	encodingName		10792354	0					
ANR	10792611	ExpressionStatement	* encodingName = val	1285:6:32930:32949	10792354	1	True				
ANR	10792612	AssignmentExpression	* encodingName = val		10792354	0		=			
ANR	10792613	UnaryOperationExpression	* encodingName		10792354	0					
ANR	10792614	UnaryOperator	*		10792354	0					
ANR	10792615	Identifier	encodingName		10792354	1					
ANR	10792616	Identifier	val		10792354	1					
ANR	10792617	IfStatement	if ( encoding )		10792354	3					
ANR	10792618	Condition	encoding	1286:8:32959:32966	10792354	0	True				
ANR	10792619	Identifier	encoding		10792354	0					
ANR	10792620	ExpressionStatement	"* encoding = encodingFinder ( enc , val , ptr - enc -> minBytesPerChar )"	1287:6:32975:33039	10792354	1	True				
ANR	10792621	AssignmentExpression	"* encoding = encodingFinder ( enc , val , ptr - enc -> minBytesPerChar )"		10792354	0		=			
ANR	10792622	UnaryOperationExpression	* encoding		10792354	0					
ANR	10792623	UnaryOperator	*		10792354	0					
ANR	10792624	Identifier	encoding		10792354	1					
ANR	10792625	CallExpression	"encodingFinder ( enc , val , ptr - enc -> minBytesPerChar )"		10792354	1					
ANR	10792626	Callee	encodingFinder		10792354	0					
ANR	10792627	Identifier	encodingFinder		10792354	0					
ANR	10792628	ArgumentList	enc		10792354	1					
ANR	10792629	Argument	enc		10792354	0					
ANR	10792630	Identifier	enc		10792354	0					
ANR	10792631	Argument	val		10792354	1					
ANR	10792632	Identifier	val		10792354	0					
ANR	10792633	Argument	ptr - enc -> minBytesPerChar		10792354	2					
ANR	10792634	AdditiveExpression	ptr - enc -> minBytesPerChar		10792354	0		-			
ANR	10792635	Identifier	ptr		10792354	0					
ANR	10792636	PtrMemberAccess	enc -> minBytesPerChar		10792354	1					
ANR	10792637	Identifier	enc		10792354	0					
ANR	10792638	Identifier	minBytesPerChar		10792354	1					
ANR	10792639	IfStatement	"if ( ! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) )"		10792354	4					
ANR	10792640	Condition	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"	1288:8:33049:33113	10792354	0	True				
ANR	10792641	UnaryOperationExpression	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		10792354	0					
ANR	10792642	UnaryOperator	!		10792354	0					
ANR	10792643	CallExpression	"parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		10792354	1					
ANR	10792644	Callee	parsePseudoAttribute		10792354	0					
ANR	10792645	Identifier	parsePseudoAttribute		10792354	0					
ANR	10792646	ArgumentList	enc		10792354	1					
ANR	10792647	Argument	enc		10792354	0					
ANR	10792648	Identifier	enc		10792354	0					
ANR	10792649	Argument	ptr		10792354	1					
ANR	10792650	Identifier	ptr		10792354	0					
ANR	10792651	Argument	end		10792354	2					
ANR	10792652	Identifier	end		10792354	0					
ANR	10792653	Argument	& name		10792354	3					
ANR	10792654	UnaryOperationExpression	& name		10792354	0					
ANR	10792655	UnaryOperator	&		10792354	0					
ANR	10792656	Identifier	name		10792354	1					
ANR	10792657	Argument	& nameEnd		10792354	4					
ANR	10792658	UnaryOperationExpression	& nameEnd		10792354	0					
ANR	10792659	UnaryOperator	&		10792354	0					
ANR	10792660	Identifier	nameEnd		10792354	1					
ANR	10792661	Argument	& val		10792354	5					
ANR	10792662	UnaryOperationExpression	& val		10792354	0					
ANR	10792663	UnaryOperator	&		10792354	0					
ANR	10792664	Identifier	val		10792354	1					
ANR	10792665	Argument	& ptr		10792354	6					
ANR	10792666	UnaryOperationExpression	& ptr		10792354	0					
ANR	10792667	UnaryOperator	&		10792354	0					
ANR	10792668	Identifier	ptr		10792354	1					
ANR	10792669	CompoundStatement		46:75:1257:1257	10792354	1					
ANR	10792670	ExpressionStatement	* badPtr = ptr	1289:6:33124:33137	10792354	0	True				
ANR	10792671	AssignmentExpression	* badPtr = ptr		10792354	0		=			
ANR	10792672	UnaryOperationExpression	* badPtr		10792354	0					
ANR	10792673	UnaryOperator	*		10792354	0					
ANR	10792674	Identifier	badPtr		10792354	1					
ANR	10792675	Identifier	ptr		10792354	1					
ANR	10792676	ReturnStatement	return 0 ;	1290:6:33145:33153	10792354	1	True				
ANR	10792677	PrimaryExpression	0		10792354	0					
ANR	10792678	IfStatement	if ( ! name )		10792354	5					
ANR	10792679	Condition	! name	1292:8:33169:33173	10792354	0	True				
ANR	10792680	UnaryOperationExpression	! name		10792354	0					
ANR	10792681	UnaryOperator	!		10792354	0					
ANR	10792682	Identifier	name		10792354	1					
ANR	10792683	ReturnStatement	return 1 ;	1293:6:33182:33190	10792354	1	True				
ANR	10792684	PrimaryExpression	1		10792354	0					
ANR	10792685	IfStatement	"if ( ! XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone ) || isGeneralTextEntity )"		10792354	8					
ANR	10792686	Condition	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone ) || isGeneralTextEntity"	1295:6:33202:33285	10792354	0	True				
ANR	10792687	OrExpression	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone ) || isGeneralTextEntity"		10792354	0		||			
ANR	10792688	UnaryOperationExpression	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone )"		10792354	0					
ANR	10792689	UnaryOperator	!		10792354	0					
ANR	10792690	CallExpression	"XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone )"		10792354	1					
ANR	10792691	Callee	XmlNameMatchesAscii		10792354	0					
ANR	10792692	Identifier	XmlNameMatchesAscii		10792354	0					
ANR	10792693	ArgumentList	enc		10792354	1					
ANR	10792694	Argument	enc		10792354	0					
ANR	10792695	Identifier	enc		10792354	0					
ANR	10792696	Argument	name		10792354	1					
ANR	10792697	Identifier	name		10792354	0					
ANR	10792698	Argument	nameEnd		10792354	2					
ANR	10792699	Identifier	nameEnd		10792354	0					
ANR	10792700	Argument	KW_standalone		10792354	3					
ANR	10792701	Identifier	KW_standalone		10792354	0					
ANR	10792702	Identifier	isGeneralTextEntity		10792354	1					
ANR	10792703	CompoundStatement		54:30:1429:1429	10792354	1					
ANR	10792704	ExpressionStatement	* badPtr = name	1297:4:33294:33308	10792354	0	True				
ANR	10792705	AssignmentExpression	* badPtr = name		10792354	0		=			
ANR	10792706	UnaryOperationExpression	* badPtr		10792354	0					
ANR	10792707	UnaryOperator	*		10792354	0					
ANR	10792708	Identifier	badPtr		10792354	1					
ANR	10792709	Identifier	name		10792354	1					
ANR	10792710	ReturnStatement	return 0 ;	1298:4:33314:33322	10792354	1	True				
ANR	10792711	PrimaryExpression	0		10792354	0					
ANR	10792712	IfStatement	"if ( XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_yes ) )"		10792354	9					
ANR	10792713	Condition	"XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_yes )"	1300:6:33334:33398	10792354	0	True				
ANR	10792714	CallExpression	"XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_yes )"		10792354	0					
ANR	10792715	Callee	XmlNameMatchesAscii		10792354	0					
ANR	10792716	Identifier	XmlNameMatchesAscii		10792354	0					
ANR	10792717	ArgumentList	enc		10792354	1					
ANR	10792718	Argument	enc		10792354	0					
ANR	10792719	Identifier	enc		10792354	0					
ANR	10792720	Argument	val		10792354	1					
ANR	10792721	Identifier	val		10792354	0					
ANR	10792722	Argument	ptr - enc -> minBytesPerChar		10792354	2					
ANR	10792723	AdditiveExpression	ptr - enc -> minBytesPerChar		10792354	0		-			
ANR	10792724	Identifier	ptr		10792354	0					
ANR	10792725	PtrMemberAccess	enc -> minBytesPerChar		10792354	1					
ANR	10792726	Identifier	enc		10792354	0					
ANR	10792727	Identifier	minBytesPerChar		10792354	1					
ANR	10792728	Argument	KW_yes		10792354	3					
ANR	10792729	Identifier	KW_yes		10792354	0					
ANR	10792730	CompoundStatement		58:73:1542:1542	10792354	1					
ANR	10792731	IfStatement	if ( standalone )		10792354	0					
ANR	10792732	Condition	standalone	1301:8:33411:33420	10792354	0	True				
ANR	10792733	Identifier	standalone		10792354	0					
ANR	10792734	ExpressionStatement	* standalone = 1	1302:6:33429:33444	10792354	1	True				
ANR	10792735	AssignmentExpression	* standalone = 1		10792354	0		=			
ANR	10792736	UnaryOperationExpression	* standalone		10792354	0					
ANR	10792737	UnaryOperator	*		10792354	0					
ANR	10792738	Identifier	standalone		10792354	1					
ANR	10792739	PrimaryExpression	1		10792354	1					
ANR	10792740	ElseStatement	else		10792354	0					
ANR	10792741	IfStatement	"if ( XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_no ) )"		10792354	0					
ANR	10792742	Condition	"XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_no )"	1304:11:33461:33524	10792354	0	True				
ANR	10792743	CallExpression	"XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_no )"		10792354	0					
ANR	10792744	Callee	XmlNameMatchesAscii		10792354	0					
ANR	10792745	Identifier	XmlNameMatchesAscii		10792354	0					
ANR	10792746	ArgumentList	enc		10792354	1					
ANR	10792747	Argument	enc		10792354	0					
ANR	10792748	Identifier	enc		10792354	0					
ANR	10792749	Argument	val		10792354	1					
ANR	10792750	Identifier	val		10792354	0					
ANR	10792751	Argument	ptr - enc -> minBytesPerChar		10792354	2					
ANR	10792752	AdditiveExpression	ptr - enc -> minBytesPerChar		10792354	0		-			
ANR	10792753	Identifier	ptr		10792354	0					
ANR	10792754	PtrMemberAccess	enc -> minBytesPerChar		10792354	1					
ANR	10792755	Identifier	enc		10792354	0					
ANR	10792756	Identifier	minBytesPerChar		10792354	1					
ANR	10792757	Argument	KW_no		10792354	3					
ANR	10792758	Identifier	KW_no		10792354	0					
ANR	10792759	CompoundStatement		62:77:1668:1668	10792354	1					
ANR	10792760	IfStatement	if ( standalone )		10792354	0					
ANR	10792761	Condition	standalone	1305:8:33537:33546	10792354	0	True				
ANR	10792762	Identifier	standalone		10792354	0					
ANR	10792763	ExpressionStatement	* standalone = 0	1306:6:33555:33570	10792354	1	True				
ANR	10792764	AssignmentExpression	* standalone = 0		10792354	0		=			
ANR	10792765	UnaryOperationExpression	* standalone		10792354	0					
ANR	10792766	UnaryOperator	*		10792354	0					
ANR	10792767	Identifier	standalone		10792354	1					
ANR	10792768	PrimaryExpression	0		10792354	1					
ANR	10792769	ElseStatement	else		10792354	0					
ANR	10792770	CompoundStatement		66:7:1724:1724	10792354	0					
ANR	10792771	ExpressionStatement	* badPtr = val	1309:4:33589:33602	10792354	0	True				
ANR	10792772	AssignmentExpression	* badPtr = val		10792354	0		=			
ANR	10792773	UnaryOperationExpression	* badPtr		10792354	0					
ANR	10792774	UnaryOperator	*		10792354	0					
ANR	10792775	Identifier	badPtr		10792354	1					
ANR	10792776	Identifier	val		10792354	1					
ANR	10792777	ReturnStatement	return 0 ;	1310:4:33608:33616	10792354	1	True				
ANR	10792778	PrimaryExpression	0		10792354	0					
ANR	10792779	WhileStatement	"while ( isSpace ( toAscii ( enc , ptr , end ) ) )"		10792354	10					
ANR	10792780	Condition	"isSpace ( toAscii ( enc , ptr , end ) )"	1312:9:33631:33661	10792354	0	True				
ANR	10792781	CallExpression	"isSpace ( toAscii ( enc , ptr , end ) )"		10792354	0					
ANR	10792782	Callee	isSpace		10792354	0					
ANR	10792783	Identifier	isSpace		10792354	0					
ANR	10792784	ArgumentList	"toAscii ( enc , ptr , end )"		10792354	1					
ANR	10792785	Argument	"toAscii ( enc , ptr , end )"		10792354	0					
ANR	10792786	CallExpression	"toAscii ( enc , ptr , end )"		10792354	0					
ANR	10792787	Callee	toAscii		10792354	0					
ANR	10792788	Identifier	toAscii		10792354	0					
ANR	10792789	ArgumentList	enc		10792354	1					
ANR	10792790	Argument	enc		10792354	0					
ANR	10792791	Identifier	enc		10792354	0					
ANR	10792792	Argument	ptr		10792354	1					
ANR	10792793	Identifier	ptr		10792354	0					
ANR	10792794	Argument	end		10792354	2					
ANR	10792795	Identifier	end		10792354	0					
ANR	10792796	ExpressionStatement	ptr += enc -> minBytesPerChar	1313:4:33668:33695	10792354	1	True				
ANR	10792797	AssignmentExpression	ptr += enc -> minBytesPerChar		10792354	0		+=			
ANR	10792798	Identifier	ptr		10792354	0					
ANR	10792799	PtrMemberAccess	enc -> minBytesPerChar		10792354	1					
ANR	10792800	Identifier	enc		10792354	0					
ANR	10792801	Identifier	minBytesPerChar		10792354	1					
ANR	10792802	IfStatement	if ( ptr != end )		10792354	11					
ANR	10792803	Condition	ptr != end	1314:6:33703:33712	10792354	0	True				
ANR	10792804	EqualityExpression	ptr != end		10792354	0		!=			
ANR	10792805	Identifier	ptr		10792354	0					
ANR	10792806	Identifier	end		10792354	1					
ANR	10792807	CompoundStatement		72:18:1856:1856	10792354	1					
ANR	10792808	ExpressionStatement	* badPtr = ptr	1315:4:33721:33734	10792354	0	True				
ANR	10792809	AssignmentExpression	* badPtr = ptr		10792354	0		=			
ANR	10792810	UnaryOperationExpression	* badPtr		10792354	0					
ANR	10792811	UnaryOperator	*		10792354	0					
ANR	10792812	Identifier	badPtr		10792354	1					
ANR	10792813	Identifier	ptr		10792354	1					
ANR	10792814	ReturnStatement	return 0 ;	1316:4:33740:33748	10792354	1	True				
ANR	10792815	PrimaryExpression	0		10792354	0					
ANR	10792816	ReturnStatement	return 1 ;	1318:2:33756:33764	10792354	12	True				
ANR	10792817	PrimaryExpression	1		10792354	0					
ANR	10792818	ReturnType	static int		10792354	1					
ANR	10792819	Identifier	doParseXmlDecl		10792354	2					
ANR	10792820	ParameterList	"const ENCODING * ( * encodingFinder ) ( const ENCODING * , const char * , const char * ) , int isGeneralTextEntity , const ENCODING * enc , const char * ptr , const char * end , const char * * badPtr , const char * * versionPtr , const char * * versionEndPtr , const char * * encodingName , const ENCODING * * encoding , int * standalone"		10792354	3					
ANR	10792821	Parameter	"const ENCODING * ( * encodingFinder ) ( const ENCODING * , const char * , const char * )"	1230:15:31304:31480	10792354	0	True				
ANR	10792822	ParameterType	"(* ( const ENCODING * , const char * , const char * ) const ENCODING) *"		10792354	0					
ANR	10792823	Identifier	encodingFinder		10792354	1					
ANR	10792824	Parameter	int isGeneralTextEntity	1233:15:31498:31520	10792354	1	True				
ANR	10792825	ParameterType	int		10792354	0					
ANR	10792826	Identifier	isGeneralTextEntity		10792354	1					
ANR	10792827	Parameter	const ENCODING * enc	1234:15:31538:31556	10792354	2	True				
ANR	10792828	ParameterType	const ENCODING *		10792354	0					
ANR	10792829	Identifier	enc		10792354	1					
ANR	10792830	Parameter	const char * ptr	1235:15:31574:31588	10792354	3	True				
ANR	10792831	ParameterType	const char *		10792354	0					
ANR	10792832	Identifier	ptr		10792354	1					
ANR	10792833	Parameter	const char * end	1236:15:31606:31620	10792354	4	True				
ANR	10792834	ParameterType	const char *		10792354	0					
ANR	10792835	Identifier	end		10792354	1					
ANR	10792836	Parameter	const char * * badPtr	1237:15:31638:31656	10792354	5	True				
ANR	10792837	ParameterType	const char * *		10792354	0					
ANR	10792838	Identifier	badPtr		10792354	1					
ANR	10792839	Parameter	const char * * versionPtr	1238:15:31674:31696	10792354	6	True				
ANR	10792840	ParameterType	const char * *		10792354	0					
ANR	10792841	Identifier	versionPtr		10792354	1					
ANR	10792842	Parameter	const char * * versionEndPtr	1239:15:31714:31739	10792354	7	True				
ANR	10792843	ParameterType	const char * *		10792354	0					
ANR	10792844	Identifier	versionEndPtr		10792354	1					
ANR	10792845	Parameter	const char * * encodingName	1240:15:31757:31781	10792354	8	True				
ANR	10792846	ParameterType	const char * *		10792354	0					
ANR	10792847	Identifier	encodingName		10792354	1					
ANR	10792848	Parameter	const ENCODING * * encoding	1241:15:31799:31823	10792354	9	True				
ANR	10792849	ParameterType	const ENCODING * *		10792354	0					
ANR	10792850	Identifier	encoding		10792354	1					
ANR	10792851	Parameter	int * standalone	1242:15:31841:31855	10792354	10	True				
ANR	10792852	ParameterType	int *		10792354	0					
ANR	10792853	Identifier	standalone		10792354	1					
ANR	10792854	CFGEntryNode	ENTRY		10792354		True				
ANR	10792855	CFGExitNode	EXIT		10792354		True				
ANR	10792856	Symbol	& val		10792354						
ANR	10792857	Symbol	ASCII_z		10792354						
ANR	10792858	Symbol	& name		10792354						
ANR	10792859	Symbol	isSpace		10792354						
ANR	10792860	Symbol	KW_version		10792354						
ANR	10792861	Symbol	toAscii		10792354						
ANR	10792862	Symbol	* encoding		10792354						
ANR	10792863	Symbol	* standalone		10792354						
ANR	10792864	Symbol	& ptr		10792354						
ANR	10792865	Symbol	isGeneralTextEntity		10792354						
ANR	10792866	Symbol	XmlNameMatchesAscii		10792354						
ANR	10792867	Symbol	end		10792354						
ANR	10792868	Symbol	ASCII_A		10792354						
ANR	10792869	Symbol	enc		10792354						
ANR	10792870	Symbol	KW_encoding		10792354						
ANR	10792871	Symbol	val		10792354						
ANR	10792872	Symbol	parsePseudoAttribute		10792354						
ANR	10792873	Symbol	NULL		10792354						
ANR	10792874	Symbol	c		10792354						
ANR	10792875	Symbol	encodingFinder		10792354						
ANR	10792876	Symbol	ASCII_Z		10792354						
ANR	10792877	Symbol	versionEndPtr		10792354						
ANR	10792878	Symbol	& nameEnd		10792354						
ANR	10792879	Symbol	* badPtr		10792354						
ANR	10792880	Symbol	KW_yes		10792354						
ANR	10792881	Symbol	standalone		10792354						
ANR	10792882	Symbol	enc -> minBytesPerChar		10792354						
ANR	10792883	Symbol	* versionPtr		10792354						
ANR	10792884	Symbol	badPtr		10792354						
ANR	10792885	Symbol	encodingName		10792354						
ANR	10792886	Symbol	encoding		10792354						
ANR	10792887	Symbol	ptr		10792354						
ANR	10792888	Symbol	* encodingName		10792354						
ANR	10792889	Symbol	* versionEndPtr		10792354						
ANR	10792890	Symbol	nameEnd		10792354						
ANR	10792891	Symbol	KW_standalone		10792354						
ANR	10792892	Symbol	name		10792354						
ANR	10792893	Symbol	ASCII_a		10792354						
ANR	10792894	Symbol	* enc		10792354						
ANR	10792895	Symbol	KW_no		10792354						
ANR	10792896	Symbol	versionPtr		10792354						
ANR	10792897	Function	checkCharRefNumber	1321:0:33769:34151							
ANR	10792898	FunctionDef	checkCharRefNumber (int result)		10792897	0					
ANR	10792899	CompoundStatement		1323:0:33820:34151	10792897	0					
ANR	10792900	SwitchStatement	switch ( result >> 8 )		10792897	0					
ANR	10792901	Condition	result >> 8	1324:10:33832:33842	10792897	0	True				
ANR	10792902	ShiftExpression	result >> 8		10792897	0		>>			
ANR	10792903	Identifier	result		10792897	0					
ANR	10792904	PrimaryExpression	8		10792897	1					
ANR	10792905	CompoundStatement		2:23:24:24	10792897	1					
ANR	10792906	Label	case 0xD8 :	1325:2:33849:33858	10792897	0	True				
ANR	10792907	Label	case 0xD9 :	1325:13:33860:33869	10792897	1	True				
ANR	10792908	Label	case 0xDA :	1325:24:33871:33880	10792897	2	True				
ANR	10792909	Label	case 0xDB :	1325:35:33882:33891	10792897	3	True				
ANR	10792910	Label	case 0xDC :	1326:2:33895:33904	10792897	4	True				
ANR	10792911	Label	case 0xDD :	1326:13:33906:33915	10792897	5	True				
ANR	10792912	Label	case 0xDE :	1326:24:33917:33926	10792897	6	True				
ANR	10792913	Label	case 0xDF :	1326:35:33928:33937	10792897	7	True				
ANR	10792914	ReturnStatement	return - 1 ;	1327:4:33943:33952	10792897	8	True				
ANR	10792915	UnaryOperationExpression	- 1		10792897	0					
ANR	10792916	UnaryOperator	-		10792897	0					
ANR	10792917	PrimaryExpression	1		10792897	1					
ANR	10792918	Label	case 0 :	1328:2:33956:33962	10792897	9	True				
ANR	10792919	IfStatement	if ( latin1_encoding . type [ result ] == BT_NONXML )		10792897	10					
ANR	10792920	Condition	latin1_encoding . type [ result ] == BT_NONXML	1329:8:33972:34012	10792897	0	True				
ANR	10792921	EqualityExpression	latin1_encoding . type [ result ] == BT_NONXML		10792897	0		==			
ANR	10792922	ArrayIndexing	latin1_encoding . type [ result ]		10792897	0					
ANR	10792923	MemberAccess	latin1_encoding . type		10792897	0					
ANR	10792924	Identifier	latin1_encoding		10792897	0					
ANR	10792925	Identifier	type		10792897	1					
ANR	10792926	Identifier	result		10792897	1					
ANR	10792927	Identifier	BT_NONXML		10792897	1					
ANR	10792928	ReturnStatement	return - 1 ;	1330:6:34021:34030	10792897	1	True				
ANR	10792929	UnaryOperationExpression	- 1		10792897	0					
ANR	10792930	UnaryOperator	-		10792897	0					
ANR	10792931	PrimaryExpression	1		10792897	1					
ANR	10792932	BreakStatement	break ;	1331:4:34036:34041	10792897	11	True				
ANR	10792933	Label	case 0xFF :	1332:2:34045:34054	10792897	12	True				
ANR	10792934	IfStatement	if ( result == 0xFFFE || result == 0xFFFF )		10792897	13					
ANR	10792935	Condition	result == 0xFFFE || result == 0xFFFF	1333:8:34064:34099	10792897	0	True				
ANR	10792936	OrExpression	result == 0xFFFE || result == 0xFFFF		10792897	0		||			
ANR	10792937	EqualityExpression	result == 0xFFFE		10792897	0		==			
ANR	10792938	Identifier	result		10792897	0					
ANR	10792939	PrimaryExpression	0xFFFE		10792897	1					
ANR	10792940	EqualityExpression	result == 0xFFFF		10792897	1		==			
ANR	10792941	Identifier	result		10792897	0					
ANR	10792942	PrimaryExpression	0xFFFF		10792897	1					
ANR	10792943	ReturnStatement	return - 1 ;	1334:6:34108:34117	10792897	1	True				
ANR	10792944	UnaryOperationExpression	- 1		10792897	0					
ANR	10792945	UnaryOperator	-		10792897	0					
ANR	10792946	PrimaryExpression	1		10792897	1					
ANR	10792947	BreakStatement	break ;	1335:4:34123:34128	10792897	14	True				
ANR	10792948	ReturnStatement	return result ;	1337:2:34136:34149	10792897	1	True				
ANR	10792949	Identifier	result		10792897	0					
ANR	10792950	ReturnType	static int FASTCALL		10792897	1					
ANR	10792951	Identifier	checkCharRefNumber		10792897	2					
ANR	10792952	ParameterList	int result		10792897	3					
ANR	10792953	Parameter	int result	1322:19:33808:33817	10792897	0	True				
ANR	10792954	ParameterType	int		10792897	0					
ANR	10792955	Identifier	result		10792897	1					
ANR	10792956	CFGEntryNode	ENTRY		10792897		True				
ANR	10792957	CFGExitNode	EXIT		10792897		True				
ANR	10792958	Symbol	result		10792897						
ANR	10792959	Symbol	* result		10792897						
ANR	10792960	Symbol	latin1_encoding . type		10792897						
ANR	10792961	Symbol	* latin1_encoding . type		10792897						
ANR	10792962	Symbol	latin1_encoding		10792897						
ANR	10792963	Symbol	BT_NONXML		10792897						
ANR	10792964	Symbol	* latin1_encoding		10792897						
ANR	10792965	Function	XmlUtf8Encode	1340:0:34154:35087							
ANR	10792966	FunctionDef	"XmlUtf8Encode (int c , char * buf)"		10792965	0					
ANR	10792967	CompoundStatement		1342:0:34199:35087	10792965	0					
ANR	10792968	ClassDefStatement	"enum { min2 = 0x80 , min3 = 0x800 , min4 = 0x10000 }"	1343:2:34203:34334	10792965	0	True				
ANR	10792969	ExpressionStatement		1348:3:34335:34335	10792965	1	True				
ANR	10792970	IfStatement	if ( c < 0 )		10792965	2					
ANR	10792971	Condition	c < 0	1350:6:34344:34348	10792965	0	True				
ANR	10792972	RelationalExpression	c < 0		10792965	0		<			
ANR	10792973	Identifier	c		10792965	0					
ANR	10792974	PrimaryExpression	0		10792965	1					
ANR	10792975	ReturnStatement	return 0 ;	1351:4:34355:34363	10792965	1	True				
ANR	10792976	PrimaryExpression	0		10792965	0					
ANR	10792977	IfStatement	if ( c < min2 )		10792965	3					
ANR	10792978	Condition	c < min2	1352:6:34435:34442	10792965	0	True				
ANR	10792979	RelationalExpression	c < min2		10792965	0		<			
ANR	10792980	Identifier	c		10792965	0					
ANR	10792981	Identifier	min2		10792965	1					
ANR	10792982	CompoundStatement		11:16:245:245	10792965	1					
ANR	10792983	ExpressionStatement	buf [ 0 ] = ( char ) ( c | UTF8_cval1 )	1353:4:34451:34482	10792965	0	True				
ANR	10792984	AssignmentExpression	buf [ 0 ] = ( char ) ( c | UTF8_cval1 )		10792965	0		=			
ANR	10792985	ArrayIndexing	buf [ 0 ]		10792965	0					
ANR	10792986	Identifier	buf		10792965	0					
ANR	10792987	PrimaryExpression	0		10792965	1					
ANR	10792988	CastExpression	( char ) ( c | UTF8_cval1 )		10792965	1					
ANR	10792989	CastTarget	char		10792965	0					
ANR	10792990	InclusiveOrExpression	c | UTF8_cval1		10792965	1		|			
ANR	10792991	Identifier	c		10792965	0					
ANR	10792992	Identifier	UTF8_cval1		10792965	1					
ANR	10792993	ReturnStatement	return 1 ;	1354:4:34488:34496	10792965	1	True				
ANR	10792994	PrimaryExpression	1		10792965	0					
ANR	10792995	IfStatement	if ( c < min3 )		10792965	4					
ANR	10792996	Condition	c < min3	1356:6:34508:34515	10792965	0	True				
ANR	10792997	RelationalExpression	c < min3		10792965	0		<			
ANR	10792998	Identifier	c		10792965	0					
ANR	10792999	Identifier	min3		10792965	1					
ANR	10793000	CompoundStatement		15:16:318:318	10792965	1					
ANR	10793001	ExpressionStatement	buf [ 0 ] = ( char ) ( ( c >> 6 ) | UTF8_cval2 )	1357:4:34524:34562	10792965	0	True				
ANR	10793002	AssignmentExpression	buf [ 0 ] = ( char ) ( ( c >> 6 ) | UTF8_cval2 )		10792965	0		=			
ANR	10793003	ArrayIndexing	buf [ 0 ]		10792965	0					
ANR	10793004	Identifier	buf		10792965	0					
ANR	10793005	PrimaryExpression	0		10792965	1					
ANR	10793006	CastExpression	( char ) ( ( c >> 6 ) | UTF8_cval2 )		10792965	1					
ANR	10793007	CastTarget	char		10792965	0					
ANR	10793008	InclusiveOrExpression	( c >> 6 ) | UTF8_cval2		10792965	1		|			
ANR	10793009	ShiftExpression	c >> 6		10792965	0		>>			
ANR	10793010	Identifier	c		10792965	0					
ANR	10793011	PrimaryExpression	6		10792965	1					
ANR	10793012	Identifier	UTF8_cval2		10792965	1					
ANR	10793013	ExpressionStatement	buf [ 1 ] = ( char ) ( ( c & 0x3f ) | 0x80 )	1358:4:34568:34602	10792965	1	True				
ANR	10793014	AssignmentExpression	buf [ 1 ] = ( char ) ( ( c & 0x3f ) | 0x80 )		10792965	0		=			
ANR	10793015	ArrayIndexing	buf [ 1 ]		10792965	0					
ANR	10793016	Identifier	buf		10792965	0					
ANR	10793017	PrimaryExpression	1		10792965	1					
ANR	10793018	CastExpression	( char ) ( ( c & 0x3f ) | 0x80 )		10792965	1					
ANR	10793019	CastTarget	char		10792965	0					
ANR	10793020	InclusiveOrExpression	( c & 0x3f ) | 0x80		10792965	1		|			
ANR	10793021	BitAndExpression	c & 0x3f		10792965	0		&			
ANR	10793022	Identifier	c		10792965	0					
ANR	10793023	PrimaryExpression	0x3f		10792965	1					
ANR	10793024	PrimaryExpression	0x80		10792965	1					
ANR	10793025	ReturnStatement	return 2 ;	1359:4:34608:34616	10792965	2	True				
ANR	10793026	PrimaryExpression	2		10792965	0					
ANR	10793027	IfStatement	if ( c < min4 )		10792965	5					
ANR	10793028	Condition	c < min4	1361:6:34628:34635	10792965	0	True				
ANR	10793029	RelationalExpression	c < min4		10792965	0		<			
ANR	10793030	Identifier	c		10792965	0					
ANR	10793031	Identifier	min4		10792965	1					
ANR	10793032	CompoundStatement		20:16:438:438	10792965	1					
ANR	10793033	ExpressionStatement	buf [ 0 ] = ( char ) ( ( c >> 12 ) | UTF8_cval3 )	1362:4:34644:34683	10792965	0	True				
ANR	10793034	AssignmentExpression	buf [ 0 ] = ( char ) ( ( c >> 12 ) | UTF8_cval3 )		10792965	0		=			
ANR	10793035	ArrayIndexing	buf [ 0 ]		10792965	0					
ANR	10793036	Identifier	buf		10792965	0					
ANR	10793037	PrimaryExpression	0		10792965	1					
ANR	10793038	CastExpression	( char ) ( ( c >> 12 ) | UTF8_cval3 )		10792965	1					
ANR	10793039	CastTarget	char		10792965	0					
ANR	10793040	InclusiveOrExpression	( c >> 12 ) | UTF8_cval3		10792965	1		|			
ANR	10793041	ShiftExpression	c >> 12		10792965	0		>>			
ANR	10793042	Identifier	c		10792965	0					
ANR	10793043	PrimaryExpression	12		10792965	1					
ANR	10793044	Identifier	UTF8_cval3		10792965	1					
ANR	10793045	ExpressionStatement	buf [ 1 ] = ( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )	1363:4:34689:34730	10792965	1	True				
ANR	10793046	AssignmentExpression	buf [ 1 ] = ( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )		10792965	0		=			
ANR	10793047	ArrayIndexing	buf [ 1 ]		10792965	0					
ANR	10793048	Identifier	buf		10792965	0					
ANR	10793049	PrimaryExpression	1		10792965	1					
ANR	10793050	CastExpression	( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )		10792965	1					
ANR	10793051	CastTarget	char		10792965	0					
ANR	10793052	InclusiveOrExpression	( ( c >> 6 ) & 0x3f ) | 0x80		10792965	1		|			
ANR	10793053	BitAndExpression	( c >> 6 ) & 0x3f		10792965	0		&			
ANR	10793054	ShiftExpression	c >> 6		10792965	0		>>			
ANR	10793055	Identifier	c		10792965	0					
ANR	10793056	PrimaryExpression	6		10792965	1					
ANR	10793057	PrimaryExpression	0x3f		10792965	1					
ANR	10793058	PrimaryExpression	0x80		10792965	1					
ANR	10793059	ExpressionStatement	buf [ 2 ] = ( char ) ( ( c & 0x3f ) | 0x80 )	1364:4:34736:34770	10792965	2	True				
ANR	10793060	AssignmentExpression	buf [ 2 ] = ( char ) ( ( c & 0x3f ) | 0x80 )		10792965	0		=			
ANR	10793061	ArrayIndexing	buf [ 2 ]		10792965	0					
ANR	10793062	Identifier	buf		10792965	0					
ANR	10793063	PrimaryExpression	2		10792965	1					
ANR	10793064	CastExpression	( char ) ( ( c & 0x3f ) | 0x80 )		10792965	1					
ANR	10793065	CastTarget	char		10792965	0					
ANR	10793066	InclusiveOrExpression	( c & 0x3f ) | 0x80		10792965	1		|			
ANR	10793067	BitAndExpression	c & 0x3f		10792965	0		&			
ANR	10793068	Identifier	c		10792965	0					
ANR	10793069	PrimaryExpression	0x3f		10792965	1					
ANR	10793070	PrimaryExpression	0x80		10792965	1					
ANR	10793071	ReturnStatement	return 3 ;	1365:4:34776:34784	10792965	3	True				
ANR	10793072	PrimaryExpression	3		10792965	0					
ANR	10793073	IfStatement	if ( c < 0x110000 )		10792965	6					
ANR	10793074	Condition	c < 0x110000	1367:6:34796:34807	10792965	0	True				
ANR	10793075	RelationalExpression	c < 0x110000		10792965	0		<			
ANR	10793076	Identifier	c		10792965	0					
ANR	10793077	PrimaryExpression	0x110000		10792965	1					
ANR	10793078	CompoundStatement		26:20:610:610	10792965	1					
ANR	10793079	ExpressionStatement	buf [ 0 ] = ( char ) ( ( c >> 18 ) | UTF8_cval4 )	1368:4:34816:34855	10792965	0	True				
ANR	10793080	AssignmentExpression	buf [ 0 ] = ( char ) ( ( c >> 18 ) | UTF8_cval4 )		10792965	0		=			
ANR	10793081	ArrayIndexing	buf [ 0 ]		10792965	0					
ANR	10793082	Identifier	buf		10792965	0					
ANR	10793083	PrimaryExpression	0		10792965	1					
ANR	10793084	CastExpression	( char ) ( ( c >> 18 ) | UTF8_cval4 )		10792965	1					
ANR	10793085	CastTarget	char		10792965	0					
ANR	10793086	InclusiveOrExpression	( c >> 18 ) | UTF8_cval4		10792965	1		|			
ANR	10793087	ShiftExpression	c >> 18		10792965	0		>>			
ANR	10793088	Identifier	c		10792965	0					
ANR	10793089	PrimaryExpression	18		10792965	1					
ANR	10793090	Identifier	UTF8_cval4		10792965	1					
ANR	10793091	ExpressionStatement	buf [ 1 ] = ( char ) ( ( ( c >> 12 ) & 0x3f ) | 0x80 )	1369:4:34861:34903	10792965	1	True				
ANR	10793092	AssignmentExpression	buf [ 1 ] = ( char ) ( ( ( c >> 12 ) & 0x3f ) | 0x80 )		10792965	0		=			
ANR	10793093	ArrayIndexing	buf [ 1 ]		10792965	0					
ANR	10793094	Identifier	buf		10792965	0					
ANR	10793095	PrimaryExpression	1		10792965	1					
ANR	10793096	CastExpression	( char ) ( ( ( c >> 12 ) & 0x3f ) | 0x80 )		10792965	1					
ANR	10793097	CastTarget	char		10792965	0					
ANR	10793098	InclusiveOrExpression	( ( c >> 12 ) & 0x3f ) | 0x80		10792965	1		|			
ANR	10793099	BitAndExpression	( c >> 12 ) & 0x3f		10792965	0		&			
ANR	10793100	ShiftExpression	c >> 12		10792965	0		>>			
ANR	10793101	Identifier	c		10792965	0					
ANR	10793102	PrimaryExpression	12		10792965	1					
ANR	10793103	PrimaryExpression	0x3f		10792965	1					
ANR	10793104	PrimaryExpression	0x80		10792965	1					
ANR	10793105	ExpressionStatement	buf [ 2 ] = ( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )	1370:4:34909:34950	10792965	2	True				
ANR	10793106	AssignmentExpression	buf [ 2 ] = ( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )		10792965	0		=			
ANR	10793107	ArrayIndexing	buf [ 2 ]		10792965	0					
ANR	10793108	Identifier	buf		10792965	0					
ANR	10793109	PrimaryExpression	2		10792965	1					
ANR	10793110	CastExpression	( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )		10792965	1					
ANR	10793111	CastTarget	char		10792965	0					
ANR	10793112	InclusiveOrExpression	( ( c >> 6 ) & 0x3f ) | 0x80		10792965	1		|			
ANR	10793113	BitAndExpression	( c >> 6 ) & 0x3f		10792965	0		&			
ANR	10793114	ShiftExpression	c >> 6		10792965	0		>>			
ANR	10793115	Identifier	c		10792965	0					
ANR	10793116	PrimaryExpression	6		10792965	1					
ANR	10793117	PrimaryExpression	0x3f		10792965	1					
ANR	10793118	PrimaryExpression	0x80		10792965	1					
ANR	10793119	ExpressionStatement	buf [ 3 ] = ( char ) ( ( c & 0x3f ) | 0x80 )	1371:4:34956:34990	10792965	3	True				
ANR	10793120	AssignmentExpression	buf [ 3 ] = ( char ) ( ( c & 0x3f ) | 0x80 )		10792965	0		=			
ANR	10793121	ArrayIndexing	buf [ 3 ]		10792965	0					
ANR	10793122	Identifier	buf		10792965	0					
ANR	10793123	PrimaryExpression	3		10792965	1					
ANR	10793124	CastExpression	( char ) ( ( c & 0x3f ) | 0x80 )		10792965	1					
ANR	10793125	CastTarget	char		10792965	0					
ANR	10793126	InclusiveOrExpression	( c & 0x3f ) | 0x80		10792965	1		|			
ANR	10793127	BitAndExpression	c & 0x3f		10792965	0		&			
ANR	10793128	Identifier	c		10792965	0					
ANR	10793129	PrimaryExpression	0x3f		10792965	1					
ANR	10793130	PrimaryExpression	0x80		10792965	1					
ANR	10793131	ReturnStatement	return 4 ;	1372:4:34996:35004	10792965	4	True				
ANR	10793132	PrimaryExpression	4		10792965	0					
ANR	10793133	ReturnStatement	return 0 ;	1374:2:35012:35020	10792965	7	True				
ANR	10793134	PrimaryExpression	0		10792965	0					
ANR	10793135	ReturnType	int FASTCALL		10792965	1					
ANR	10793136	Identifier	XmlUtf8Encode		10792965	2					
ANR	10793137	ParameterList	"int c , char * buf"		10792965	3					
ANR	10793138	Parameter	int c	1341:14:34181:34185	10792965	0	True				
ANR	10793139	ParameterType	int		10792965	0					
ANR	10793140	Identifier	c		10792965	1					
ANR	10793141	Parameter	char * buf	1341:21:34188:34196	10792965	1	True				
ANR	10793142	ParameterType	char *		10792965	0					
ANR	10793143	Identifier	buf		10792965	1					
ANR	10793144	CFGEntryNode	ENTRY		10792965		True				
ANR	10793145	CFGExitNode	EXIT		10792965		True				
ANR	10793146	Symbol	min4		10792965						
ANR	10793147	Symbol	buf		10792965						
ANR	10793148	Symbol	* buf		10792965						
ANR	10793149	Symbol	min3		10792965						
ANR	10793150	Symbol	c		10792965						
ANR	10793151	Symbol	min2		10792965						
ANR	10793152	Symbol	UTF8_cval4		10792965						
ANR	10793153	Symbol	UTF8_cval1		10792965						
ANR	10793154	Symbol	UTF8_cval2		10792965						
ANR	10793155	Symbol	UTF8_cval3		10792965						
ANR	10793156	Function	XmlUtf16Encode	1377:0:35090:35468							
ANR	10793157	FunctionDef	"XmlUtf16Encode (int charNum , unsigned short * buf)"		10793156	0					
ANR	10793158	CompoundStatement		1379:0:35152:35468	10793156	0					
ANR	10793159	IfStatement	if ( charNum < 0 )		10793156	0					
ANR	10793160	Condition	charNum < 0	1380:6:35160:35170	10793156	0	True				
ANR	10793161	RelationalExpression	charNum < 0		10793156	0		<			
ANR	10793162	Identifier	charNum		10793156	0					
ANR	10793163	PrimaryExpression	0		10793156	1					
ANR	10793164	ReturnStatement	return 0 ;	1381:4:35177:35185	10793156	1	True				
ANR	10793165	PrimaryExpression	0		10793156	0					
ANR	10793166	IfStatement	if ( charNum < 0x10000 )		10793156	1					
ANR	10793167	Condition	charNum < 0x10000	1382:6:35193:35209	10793156	0	True				
ANR	10793168	RelationalExpression	charNum < 0x10000		10793156	0		<			
ANR	10793169	Identifier	charNum		10793156	0					
ANR	10793170	PrimaryExpression	0x10000		10793156	1					
ANR	10793171	CompoundStatement		4:25:59:59	10793156	1					
ANR	10793172	ExpressionStatement	buf [ 0 ] = ( unsigned short ) charNum	1383:4:35218:35250	10793156	0	True				
ANR	10793173	AssignmentExpression	buf [ 0 ] = ( unsigned short ) charNum		10793156	0		=			
ANR	10793174	ArrayIndexing	buf [ 0 ]		10793156	0					
ANR	10793175	Identifier	buf		10793156	0					
ANR	10793176	PrimaryExpression	0		10793156	1					
ANR	10793177	CastExpression	( unsigned short ) charNum		10793156	1					
ANR	10793178	CastTarget	unsigned short		10793156	0					
ANR	10793179	Identifier	charNum		10793156	1					
ANR	10793180	ReturnStatement	return 1 ;	1384:4:35256:35264	10793156	1	True				
ANR	10793181	PrimaryExpression	1		10793156	0					
ANR	10793182	IfStatement	if ( charNum < 0x110000 )		10793156	2					
ANR	10793183	Condition	charNum < 0x110000	1386:6:35276:35293	10793156	0	True				
ANR	10793184	RelationalExpression	charNum < 0x110000		10793156	0		<			
ANR	10793185	Identifier	charNum		10793156	0					
ANR	10793186	PrimaryExpression	0x110000		10793156	1					
ANR	10793187	CompoundStatement		8:26:143:143	10793156	1					
ANR	10793188	ExpressionStatement	charNum -= 0x10000	1387:4:35302:35320	10793156	0	True				
ANR	10793189	AssignmentExpression	charNum -= 0x10000		10793156	0		-=			
ANR	10793190	Identifier	charNum		10793156	0					
ANR	10793191	PrimaryExpression	0x10000		10793156	1					
ANR	10793192	ExpressionStatement	buf [ 0 ] = ( unsigned short ) ( ( charNum >> 10 ) + 0xD800 )	1388:4:35326:35377	10793156	1	True				
ANR	10793193	AssignmentExpression	buf [ 0 ] = ( unsigned short ) ( ( charNum >> 10 ) + 0xD800 )		10793156	0		=			
ANR	10793194	ArrayIndexing	buf [ 0 ]		10793156	0					
ANR	10793195	Identifier	buf		10793156	0					
ANR	10793196	PrimaryExpression	0		10793156	1					
ANR	10793197	CastExpression	( unsigned short ) ( ( charNum >> 10 ) + 0xD800 )		10793156	1					
ANR	10793198	CastTarget	unsigned short		10793156	0					
ANR	10793199	AdditiveExpression	( charNum >> 10 ) + 0xD800		10793156	1		+			
ANR	10793200	ShiftExpression	charNum >> 10		10793156	0		>>			
ANR	10793201	Identifier	charNum		10793156	0					
ANR	10793202	PrimaryExpression	10		10793156	1					
ANR	10793203	PrimaryExpression	0xD800		10793156	1					
ANR	10793204	ExpressionStatement	buf [ 1 ] = ( unsigned short ) ( ( charNum & 0x3FF ) + 0xDC00 )	1389:4:35383:35436	10793156	2	True				
ANR	10793205	AssignmentExpression	buf [ 1 ] = ( unsigned short ) ( ( charNum & 0x3FF ) + 0xDC00 )		10793156	0		=			
ANR	10793206	ArrayIndexing	buf [ 1 ]		10793156	0					
ANR	10793207	Identifier	buf		10793156	0					
ANR	10793208	PrimaryExpression	1		10793156	1					
ANR	10793209	CastExpression	( unsigned short ) ( ( charNum & 0x3FF ) + 0xDC00 )		10793156	1					
ANR	10793210	CastTarget	unsigned short		10793156	0					
ANR	10793211	AdditiveExpression	( charNum & 0x3FF ) + 0xDC00		10793156	1		+			
ANR	10793212	BitAndExpression	charNum & 0x3FF		10793156	0		&			
ANR	10793213	Identifier	charNum		10793156	0					
ANR	10793214	PrimaryExpression	0x3FF		10793156	1					
ANR	10793215	PrimaryExpression	0xDC00		10793156	1					
ANR	10793216	ReturnStatement	return 2 ;	1390:4:35442:35450	10793156	3	True				
ANR	10793217	PrimaryExpression	2		10793156	0					
ANR	10793218	ReturnStatement	return 0 ;	1392:2:35458:35466	10793156	3	True				
ANR	10793219	PrimaryExpression	0		10793156	0					
ANR	10793220	ReturnType	int FASTCALL		10793156	1					
ANR	10793221	Identifier	XmlUtf16Encode		10793156	2					
ANR	10793222	ParameterList	"int charNum , unsigned short * buf"		10793156	3					
ANR	10793223	Parameter	int charNum	1378:15:35118:35128	10793156	0	True				
ANR	10793224	ParameterType	int		10793156	0					
ANR	10793225	Identifier	charNum		10793156	1					
ANR	10793226	Parameter	unsigned short * buf	1378:28:35131:35149	10793156	1	True				
ANR	10793227	ParameterType	unsigned short *		10793156	0					
ANR	10793228	Identifier	buf		10793156	1					
ANR	10793229	CFGEntryNode	ENTRY		10793156		True				
ANR	10793230	CFGExitNode	EXIT		10793156		True				
ANR	10793231	Symbol	buf		10793156						
ANR	10793232	Symbol	* buf		10793156						
ANR	10793233	Symbol	charNum		10793156						
ANR	10793234	ClassDef	unknown_encoding	1395:0:35471:35619							
ANR	10793235	DeclStmt									
ANR	10793236	Decl							struct normal_encoding	struct normal_encoding	normal
ANR	10793237	DeclStmt									
ANR	10793238	Decl							CONVERTER	CONVERTER	convert
ANR	10793239	DeclStmt									
ANR	10793240	Decl							void	void *	userData
ANR	10793241	DeclStmt									
ANR	10793242	Decl							unsigned short	unsigned short [ 256 ]	utf16
ANR	10793243	Function	XmlSizeOfUnknownEncoding	1405:0:35700:35779							
ANR	10793244	FunctionDef	XmlSizeOfUnknownEncoding ()		10793243	0					
ANR	10793245	CompoundStatement		1407:0:35735:35779	10793243	0					
ANR	10793246	ReturnStatement	return sizeof ( struct unknown_encoding ) ;	1408:2:35739:35777	10793243	0	True				
ANR	10793247	SizeofExpression	sizeof ( struct unknown_encoding )		10793243	0					
ANR	10793248	Sizeof	sizeof		10793243	0					
ANR	10793249	SizeofOperand	struct unknown_encoding		10793243	1					
ANR	10793250	ReturnType	int		10793243	1					
ANR	10793251	Identifier	XmlSizeOfUnknownEncoding		10793243	2					
ANR	10793252	ParameterList			10793243	3					
ANR	10793253	CFGEntryNode	ENTRY		10793243		True				
ANR	10793254	CFGExitNode	EXIT		10793243		True				
ANR	10793255	Function	unknown_isName	1411:0:35782:36056							
ANR	10793256	FunctionDef	"unknown_isName (const ENCODING * enc , const char * p)"		10793255	0					
ANR	10793257	CompoundStatement		1413:0:35856:36056	10793255	0					
ANR	10793258	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1414:2:35860:35922	10793255	0	True				
ANR	10793259	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793255	0					
ANR	10793260	IdentifierDeclType	const struct unknown_encoding *		10793255	0					
ANR	10793261	Identifier	uenc		10793255	1					
ANR	10793262	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793255	2		=			
ANR	10793263	Identifier	uenc		10793255	0					
ANR	10793264	CallExpression	AS_UNKNOWN_ENCODING ( enc )		10793255	1					
ANR	10793265	Callee	AS_UNKNOWN_ENCODING		10793255	0					
ANR	10793266	Identifier	AS_UNKNOWN_ENCODING		10793255	0					
ANR	10793267	ArgumentList	enc		10793255	1					
ANR	10793268	Argument	enc		10793255	0					
ANR	10793269	Identifier	enc		10793255	0					
ANR	10793270	IdentifierDeclStatement	"int c = uenc -> convert ( uenc -> userData , p ) ;"	1415:2:35926:35966	10793255	1	True				
ANR	10793271	IdentifierDecl	"c = uenc -> convert ( uenc -> userData , p )"		10793255	0					
ANR	10793272	IdentifierDeclType	int		10793255	0					
ANR	10793273	Identifier	c		10793255	1					
ANR	10793274	AssignmentExpression	"c = uenc -> convert ( uenc -> userData , p )"		10793255	2		=			
ANR	10793275	Identifier	c		10793255	0					
ANR	10793276	CallExpression	"uenc -> convert ( uenc -> userData , p )"		10793255	1					
ANR	10793277	Callee	uenc -> convert		10793255	0					
ANR	10793278	PtrMemberAccess	uenc -> convert		10793255	0					
ANR	10793279	Identifier	uenc		10793255	0					
ANR	10793280	Identifier	convert		10793255	1					
ANR	10793281	ArgumentList	uenc -> userData		10793255	1					
ANR	10793282	Argument	uenc -> userData		10793255	0					
ANR	10793283	PtrMemberAccess	uenc -> userData		10793255	0					
ANR	10793284	Identifier	uenc		10793255	0					
ANR	10793285	Identifier	userData		10793255	1					
ANR	10793286	Argument	p		10793255	1					
ANR	10793287	Identifier	p		10793255	0					
ANR	10793288	IfStatement	if ( c & ~0xFFFF )		10793255	2					
ANR	10793289	Condition	c & ~0xFFFF	1416:6:35974:35984	10793255	0	True				
ANR	10793290	BitAndExpression	c & ~0xFFFF		10793255	0		&			
ANR	10793291	Identifier	c		10793255	0					
ANR	10793292	Identifier	~0xFFFF		10793255	1					
ANR	10793293	ReturnStatement	return 0 ;	1417:4:35991:35999	10793255	1	True				
ANR	10793294	PrimaryExpression	0		10793255	0					
ANR	10793295	ReturnStatement	"return UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xFF ) ;"	1418:2:36003:36054	10793255	3	True				
ANR	10793296	CallExpression	"UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xFF )"		10793255	0					
ANR	10793297	Callee	UCS2_GET_NAMING		10793255	0					
ANR	10793298	Identifier	UCS2_GET_NAMING		10793255	0					
ANR	10793299	ArgumentList	namePages		10793255	1					
ANR	10793300	Argument	namePages		10793255	0					
ANR	10793301	Identifier	namePages		10793255	0					
ANR	10793302	Argument	c >> 8		10793255	1					
ANR	10793303	ShiftExpression	c >> 8		10793255	0		>>			
ANR	10793304	Identifier	c		10793255	0					
ANR	10793305	PrimaryExpression	8		10793255	1					
ANR	10793306	Argument	c & 0xFF		10793255	2					
ANR	10793307	BitAndExpression	c & 0xFF		10793255	0		&			
ANR	10793308	Identifier	c		10793255	0					
ANR	10793309	PrimaryExpression	0xFF		10793255	1					
ANR	10793310	ReturnType	static int PTRFASTCALL		10793255	1					
ANR	10793311	Identifier	unknown_isName		10793255	2					
ANR	10793312	ParameterList	"const ENCODING * enc , const char * p"		10793255	3					
ANR	10793313	Parameter	const ENCODING * enc	1412:15:35820:35838	10793255	0	True				
ANR	10793314	ParameterType	const ENCODING *		10793255	0					
ANR	10793315	Identifier	enc		10793255	1					
ANR	10793316	Parameter	const char * p	1412:36:35841:35853	10793255	1	True				
ANR	10793317	ParameterType	const char *		10793255	0					
ANR	10793318	Identifier	p		10793255	1					
ANR	10793319	CFGEntryNode	ENTRY		10793255		True				
ANR	10793320	CFGExitNode	EXIT		10793255		True				
ANR	10793321	Symbol	p		10793255						
ANR	10793322	Symbol	uenc -> userData		10793255						
ANR	10793323	Symbol	uenc		10793255						
ANR	10793324	Symbol	c		10793255						
ANR	10793325	Symbol	~0xFFFF		10793255						
ANR	10793326	Symbol	UCS2_GET_NAMING		10793255						
ANR	10793327	Symbol	namePages		10793255						
ANR	10793328	Symbol	AS_UNKNOWN_ENCODING		10793255						
ANR	10793329	Symbol	uenc -> convert		10793255						
ANR	10793330	Symbol	enc		10793255						
ANR	10793331	Symbol	* uenc		10793255						
ANR	10793332	Function	unknown_isNmstrt	1421:0:36059:36337							
ANR	10793333	FunctionDef	"unknown_isNmstrt (const ENCODING * enc , const char * p)"		10793332	0					
ANR	10793334	CompoundStatement		1423:0:36135:36337	10793332	0					
ANR	10793335	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1424:2:36139:36201	10793332	0	True				
ANR	10793336	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793332	0					
ANR	10793337	IdentifierDeclType	const struct unknown_encoding *		10793332	0					
ANR	10793338	Identifier	uenc		10793332	1					
ANR	10793339	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793332	2		=			
ANR	10793340	Identifier	uenc		10793332	0					
ANR	10793341	CallExpression	AS_UNKNOWN_ENCODING ( enc )		10793332	1					
ANR	10793342	Callee	AS_UNKNOWN_ENCODING		10793332	0					
ANR	10793343	Identifier	AS_UNKNOWN_ENCODING		10793332	0					
ANR	10793344	ArgumentList	enc		10793332	1					
ANR	10793345	Argument	enc		10793332	0					
ANR	10793346	Identifier	enc		10793332	0					
ANR	10793347	IdentifierDeclStatement	"int c = uenc -> convert ( uenc -> userData , p ) ;"	1425:2:36205:36245	10793332	1	True				
ANR	10793348	IdentifierDecl	"c = uenc -> convert ( uenc -> userData , p )"		10793332	0					
ANR	10793349	IdentifierDeclType	int		10793332	0					
ANR	10793350	Identifier	c		10793332	1					
ANR	10793351	AssignmentExpression	"c = uenc -> convert ( uenc -> userData , p )"		10793332	2		=			
ANR	10793352	Identifier	c		10793332	0					
ANR	10793353	CallExpression	"uenc -> convert ( uenc -> userData , p )"		10793332	1					
ANR	10793354	Callee	uenc -> convert		10793332	0					
ANR	10793355	PtrMemberAccess	uenc -> convert		10793332	0					
ANR	10793356	Identifier	uenc		10793332	0					
ANR	10793357	Identifier	convert		10793332	1					
ANR	10793358	ArgumentList	uenc -> userData		10793332	1					
ANR	10793359	Argument	uenc -> userData		10793332	0					
ANR	10793360	PtrMemberAccess	uenc -> userData		10793332	0					
ANR	10793361	Identifier	uenc		10793332	0					
ANR	10793362	Identifier	userData		10793332	1					
ANR	10793363	Argument	p		10793332	1					
ANR	10793364	Identifier	p		10793332	0					
ANR	10793365	IfStatement	if ( c & ~0xFFFF )		10793332	2					
ANR	10793366	Condition	c & ~0xFFFF	1426:6:36253:36263	10793332	0	True				
ANR	10793367	BitAndExpression	c & ~0xFFFF		10793332	0		&			
ANR	10793368	Identifier	c		10793332	0					
ANR	10793369	Identifier	~0xFFFF		10793332	1					
ANR	10793370	ReturnStatement	return 0 ;	1427:4:36270:36278	10793332	1	True				
ANR	10793371	PrimaryExpression	0		10793332	0					
ANR	10793372	ReturnStatement	"return UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xFF ) ;"	1428:2:36282:36335	10793332	3	True				
ANR	10793373	CallExpression	"UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xFF )"		10793332	0					
ANR	10793374	Callee	UCS2_GET_NAMING		10793332	0					
ANR	10793375	Identifier	UCS2_GET_NAMING		10793332	0					
ANR	10793376	ArgumentList	nmstrtPages		10793332	1					
ANR	10793377	Argument	nmstrtPages		10793332	0					
ANR	10793378	Identifier	nmstrtPages		10793332	0					
ANR	10793379	Argument	c >> 8		10793332	1					
ANR	10793380	ShiftExpression	c >> 8		10793332	0		>>			
ANR	10793381	Identifier	c		10793332	0					
ANR	10793382	PrimaryExpression	8		10793332	1					
ANR	10793383	Argument	c & 0xFF		10793332	2					
ANR	10793384	BitAndExpression	c & 0xFF		10793332	0		&			
ANR	10793385	Identifier	c		10793332	0					
ANR	10793386	PrimaryExpression	0xFF		10793332	1					
ANR	10793387	ReturnType	static int PTRFASTCALL		10793332	1					
ANR	10793388	Identifier	unknown_isNmstrt		10793332	2					
ANR	10793389	ParameterList	"const ENCODING * enc , const char * p"		10793332	3					
ANR	10793390	Parameter	const ENCODING * enc	1422:17:36099:36117	10793332	0	True				
ANR	10793391	ParameterType	const ENCODING *		10793332	0					
ANR	10793392	Identifier	enc		10793332	1					
ANR	10793393	Parameter	const char * p	1422:38:36120:36132	10793332	1	True				
ANR	10793394	ParameterType	const char *		10793332	0					
ANR	10793395	Identifier	p		10793332	1					
ANR	10793396	CFGEntryNode	ENTRY		10793332		True				
ANR	10793397	CFGExitNode	EXIT		10793332		True				
ANR	10793398	Symbol	p		10793332						
ANR	10793399	Symbol	uenc -> userData		10793332						
ANR	10793400	Symbol	uenc		10793332						
ANR	10793401	Symbol	c		10793332						
ANR	10793402	Symbol	~0xFFFF		10793332						
ANR	10793403	Symbol	UCS2_GET_NAMING		10793332						
ANR	10793404	Symbol	AS_UNKNOWN_ENCODING		10793332						
ANR	10793405	Symbol	uenc -> convert		10793332						
ANR	10793406	Symbol	enc		10793332						
ANR	10793407	Symbol	* uenc		10793332						
ANR	10793408	Symbol	nmstrtPages		10793332						
ANR	10793409	Function	unknown_isInvalid	1431:0:36340:36582							
ANR	10793410	FunctionDef	"unknown_isInvalid (const ENCODING * enc , const char * p)"		10793409	0					
ANR	10793411	CompoundStatement		1433:0:36417:36582	10793409	0					
ANR	10793412	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1434:2:36421:36483	10793409	0	True				
ANR	10793413	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793409	0					
ANR	10793414	IdentifierDeclType	const struct unknown_encoding *		10793409	0					
ANR	10793415	Identifier	uenc		10793409	1					
ANR	10793416	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793409	2		=			
ANR	10793417	Identifier	uenc		10793409	0					
ANR	10793418	CallExpression	AS_UNKNOWN_ENCODING ( enc )		10793409	1					
ANR	10793419	Callee	AS_UNKNOWN_ENCODING		10793409	0					
ANR	10793420	Identifier	AS_UNKNOWN_ENCODING		10793409	0					
ANR	10793421	ArgumentList	enc		10793409	1					
ANR	10793422	Argument	enc		10793409	0					
ANR	10793423	Identifier	enc		10793409	0					
ANR	10793424	IdentifierDeclStatement	"int c = uenc -> convert ( uenc -> userData , p ) ;"	1435:2:36487:36527	10793409	1	True				
ANR	10793425	IdentifierDecl	"c = uenc -> convert ( uenc -> userData , p )"		10793409	0					
ANR	10793426	IdentifierDeclType	int		10793409	0					
ANR	10793427	Identifier	c		10793409	1					
ANR	10793428	AssignmentExpression	"c = uenc -> convert ( uenc -> userData , p )"		10793409	2		=			
ANR	10793429	Identifier	c		10793409	0					
ANR	10793430	CallExpression	"uenc -> convert ( uenc -> userData , p )"		10793409	1					
ANR	10793431	Callee	uenc -> convert		10793409	0					
ANR	10793432	PtrMemberAccess	uenc -> convert		10793409	0					
ANR	10793433	Identifier	uenc		10793409	0					
ANR	10793434	Identifier	convert		10793409	1					
ANR	10793435	ArgumentList	uenc -> userData		10793409	1					
ANR	10793436	Argument	uenc -> userData		10793409	0					
ANR	10793437	PtrMemberAccess	uenc -> userData		10793409	0					
ANR	10793438	Identifier	uenc		10793409	0					
ANR	10793439	Identifier	userData		10793409	1					
ANR	10793440	Argument	p		10793409	1					
ANR	10793441	Identifier	p		10793409	0					
ANR	10793442	ReturnStatement	return ( c & ~0xFFFF ) || checkCharRefNumber ( c ) < 0 ;	1436:2:36531:36580	10793409	2	True				
ANR	10793443	OrExpression	( c & ~0xFFFF ) || checkCharRefNumber ( c ) < 0		10793409	0		||			
ANR	10793444	BitAndExpression	c & ~0xFFFF		10793409	0		&			
ANR	10793445	Identifier	c		10793409	0					
ANR	10793446	Identifier	~0xFFFF		10793409	1					
ANR	10793447	RelationalExpression	checkCharRefNumber ( c ) < 0		10793409	1		<			
ANR	10793448	CallExpression	checkCharRefNumber ( c )		10793409	0					
ANR	10793449	Callee	checkCharRefNumber		10793409	0					
ANR	10793450	Identifier	checkCharRefNumber		10793409	0					
ANR	10793451	ArgumentList	c		10793409	1					
ANR	10793452	Argument	c		10793409	0					
ANR	10793453	Identifier	c		10793409	0					
ANR	10793454	PrimaryExpression	0		10793409	1					
ANR	10793455	ReturnType	static int PTRFASTCALL		10793409	1					
ANR	10793456	Identifier	unknown_isInvalid		10793409	2					
ANR	10793457	ParameterList	"const ENCODING * enc , const char * p"		10793409	3					
ANR	10793458	Parameter	const ENCODING * enc	1432:18:36381:36399	10793409	0	True				
ANR	10793459	ParameterType	const ENCODING *		10793409	0					
ANR	10793460	Identifier	enc		10793409	1					
ANR	10793461	Parameter	const char * p	1432:39:36402:36414	10793409	1	True				
ANR	10793462	ParameterType	const char *		10793409	0					
ANR	10793463	Identifier	p		10793409	1					
ANR	10793464	CFGEntryNode	ENTRY		10793409		True				
ANR	10793465	CFGExitNode	EXIT		10793409		True				
ANR	10793466	Symbol	p		10793409						
ANR	10793467	Symbol	uenc -> userData		10793409						
ANR	10793468	Symbol	uenc		10793409						
ANR	10793469	Symbol	c		10793409						
ANR	10793470	Symbol	~0xFFFF		10793409						
ANR	10793471	Symbol	AS_UNKNOWN_ENCODING		10793409						
ANR	10793472	Symbol	uenc -> convert		10793409						
ANR	10793473	Symbol	checkCharRefNumber		10793409						
ANR	10793474	Symbol	enc		10793409						
ANR	10793475	Symbol	* uenc		10793409						
ANR	10793476	Function	unknown_toUtf8	1439:0:36585:37498							
ANR	10793477	FunctionDef	"unknown_toUtf8 (const ENCODING * enc , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		10793476	0					
ANR	10793478	CompoundStatement		1443:0:36762:37498	10793476	0					
ANR	10793479	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1444:2:36766:36828	10793476	0	True				
ANR	10793480	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793476	0					
ANR	10793481	IdentifierDeclType	const struct unknown_encoding *		10793476	0					
ANR	10793482	Identifier	uenc		10793476	1					
ANR	10793483	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793476	2		=			
ANR	10793484	Identifier	uenc		10793476	0					
ANR	10793485	CallExpression	AS_UNKNOWN_ENCODING ( enc )		10793476	1					
ANR	10793486	Callee	AS_UNKNOWN_ENCODING		10793476	0					
ANR	10793487	Identifier	AS_UNKNOWN_ENCODING		10793476	0					
ANR	10793488	ArgumentList	enc		10793476	1					
ANR	10793489	Argument	enc		10793476	0					
ANR	10793490	Identifier	enc		10793476	0					
ANR	10793491	IdentifierDeclStatement	char buf [ XML_UTF8_ENCODE_MAX ] ;	1445:2:36832:36861	10793476	1	True				
ANR	10793492	IdentifierDecl	buf [ XML_UTF8_ENCODE_MAX ]		10793476	0					
ANR	10793493	IdentifierDeclType	char [ XML_UTF8_ENCODE_MAX ]		10793476	0					
ANR	10793494	Identifier	buf		10793476	1					
ANR	10793495	Identifier	XML_UTF8_ENCODE_MAX		10793476	2					
ANR	10793496	ForStatement	for ( ; ; )		10793476	2					
ANR	10793497	CompoundStatement		6:4:139:144	10793476	0					
ANR	10793498	IdentifierDeclStatement	const char * utf8 ;	1447:4:36880:36896	10793476	0	True				
ANR	10793499	IdentifierDecl	* utf8		10793476	0					
ANR	10793500	IdentifierDeclType	const char *		10793476	0					
ANR	10793501	Identifier	utf8		10793476	1					
ANR	10793502	IdentifierDeclStatement	int n ;	1448:4:36902:36907	10793476	1	True				
ANR	10793503	IdentifierDecl	n		10793476	0					
ANR	10793504	IdentifierDeclType	int		10793476	0					
ANR	10793505	Identifier	n		10793476	1					
ANR	10793506	IfStatement	if ( * fromP == fromLim )		10793476	2					
ANR	10793507	Condition	* fromP == fromLim	1449:8:36917:36933	10793476	0	True				
ANR	10793508	EqualityExpression	* fromP == fromLim		10793476	0		==			
ANR	10793509	UnaryOperationExpression	* fromP		10793476	0					
ANR	10793510	UnaryOperator	*		10793476	0					
ANR	10793511	Identifier	fromP		10793476	1					
ANR	10793512	Identifier	fromLim		10793476	1					
ANR	10793513	ReturnStatement	return XML_CONVERT_COMPLETED ;	1450:6:36942:36970	10793476	1	True				
ANR	10793514	Identifier	XML_CONVERT_COMPLETED		10793476	0					
ANR	10793515	ExpressionStatement	utf8 = uenc -> utf8 [ ( unsigned char ) * * fromP ]	1451:4:36976:37017	10793476	3	True				
ANR	10793516	AssignmentExpression	utf8 = uenc -> utf8 [ ( unsigned char ) * * fromP ]		10793476	0		=			
ANR	10793517	Identifier	utf8		10793476	0					
ANR	10793518	ArrayIndexing	uenc -> utf8 [ ( unsigned char ) * * fromP ]		10793476	1					
ANR	10793519	PtrMemberAccess	uenc -> utf8		10793476	0					
ANR	10793520	Identifier	uenc		10793476	0					
ANR	10793521	Identifier	utf8		10793476	1					
ANR	10793522	CastExpression	( unsigned char ) * * fromP		10793476	1					
ANR	10793523	CastTarget	unsigned char		10793476	0					
ANR	10793524	UnaryOperationExpression	* * fromP		10793476	1					
ANR	10793525	UnaryOperator	*		10793476	0					
ANR	10793526	UnaryOperationExpression	* fromP		10793476	1					
ANR	10793527	UnaryOperator	*		10793476	0					
ANR	10793528	Identifier	fromP		10793476	1					
ANR	10793529	ExpressionStatement	n = * utf8 ++	1452:4:37023:37034	10793476	4	True				
ANR	10793530	AssignmentExpression	n = * utf8 ++		10793476	0		=			
ANR	10793531	Identifier	n		10793476	0					
ANR	10793532	UnaryOperationExpression	* utf8 ++		10793476	1					
ANR	10793533	UnaryOperator	*		10793476	0					
ANR	10793534	PostIncDecOperationExpression	utf8 ++		10793476	1					
ANR	10793535	Identifier	utf8		10793476	0					
ANR	10793536	IncDec	++		10793476	1					
ANR	10793537	IfStatement	if ( n == 0 )		10793476	5					
ANR	10793538	Condition	n == 0	1453:8:37044:37049	10793476	0	True				
ANR	10793539	EqualityExpression	n == 0		10793476	0		==			
ANR	10793540	Identifier	n		10793476	0					
ANR	10793541	PrimaryExpression	0		10793476	1					
ANR	10793542	CompoundStatement		12:6:297:342	10793476	1					
ANR	10793543	IdentifierDeclStatement	"int c = uenc -> convert ( uenc -> userData , * fromP ) ;"	1454:6:37060:37105	10793476	0	True				
ANR	10793544	IdentifierDecl	"c = uenc -> convert ( uenc -> userData , * fromP )"		10793476	0					
ANR	10793545	IdentifierDeclType	int		10793476	0					
ANR	10793546	Identifier	c		10793476	1					
ANR	10793547	AssignmentExpression	"c = uenc -> convert ( uenc -> userData , * fromP )"		10793476	2		=			
ANR	10793548	Identifier	c		10793476	0					
ANR	10793549	CallExpression	"uenc -> convert ( uenc -> userData , * fromP )"		10793476	1					
ANR	10793550	Callee	uenc -> convert		10793476	0					
ANR	10793551	PtrMemberAccess	uenc -> convert		10793476	0					
ANR	10793552	Identifier	uenc		10793476	0					
ANR	10793553	Identifier	convert		10793476	1					
ANR	10793554	ArgumentList	uenc -> userData		10793476	1					
ANR	10793555	Argument	uenc -> userData		10793476	0					
ANR	10793556	PtrMemberAccess	uenc -> userData		10793476	0					
ANR	10793557	Identifier	uenc		10793476	0					
ANR	10793558	Identifier	userData		10793476	1					
ANR	10793559	Argument	* fromP		10793476	1					
ANR	10793560	UnaryOperationExpression	* fromP		10793476	0					
ANR	10793561	UnaryOperator	*		10793476	0					
ANR	10793562	Identifier	fromP		10793476	1					
ANR	10793563	ExpressionStatement	"n = XmlUtf8Encode ( c , buf )"	1455:6:37113:37138	10793476	1	True				
ANR	10793564	AssignmentExpression	"n = XmlUtf8Encode ( c , buf )"		10793476	0		=			
ANR	10793565	Identifier	n		10793476	0					
ANR	10793566	CallExpression	"XmlUtf8Encode ( c , buf )"		10793476	1					
ANR	10793567	Callee	XmlUtf8Encode		10793476	0					
ANR	10793568	Identifier	XmlUtf8Encode		10793476	0					
ANR	10793569	ArgumentList	c		10793476	1					
ANR	10793570	Argument	c		10793476	0					
ANR	10793571	Identifier	c		10793476	0					
ANR	10793572	Argument	buf		10793476	1					
ANR	10793573	Identifier	buf		10793476	0					
ANR	10793574	IfStatement	if ( n > toLim - * toP )		10793476	2					
ANR	10793575	Condition	n > toLim - * toP	1456:10:37150:37165	10793476	0	True				
ANR	10793576	RelationalExpression	n > toLim - * toP		10793476	0		>			
ANR	10793577	Identifier	n		10793476	0					
ANR	10793578	AdditiveExpression	toLim - * toP		10793476	1		-			
ANR	10793579	Identifier	toLim		10793476	0					
ANR	10793580	UnaryOperationExpression	* toP		10793476	1					
ANR	10793581	UnaryOperator	*		10793476	0					
ANR	10793582	Identifier	toP		10793476	1					
ANR	10793583	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	1457:8:37176:37211	10793476	1	True				
ANR	10793584	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10793476	0					
ANR	10793585	ExpressionStatement	utf8 = buf	1458:6:37219:37229	10793476	3	True				
ANR	10793586	AssignmentExpression	utf8 = buf		10793476	0		=			
ANR	10793587	Identifier	utf8		10793476	0					
ANR	10793588	Identifier	buf		10793476	1					
ANR	10793589	ExpressionStatement	* fromP += ( AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 ) )	1459:6:37237:37336	10793476	4	True				
ANR	10793590	AssignmentExpression	* fromP += ( AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 ) )		10793476	0		+=			
ANR	10793591	UnaryOperationExpression	* fromP		10793476	0					
ANR	10793592	UnaryOperator	*		10793476	0					
ANR	10793593	Identifier	fromP		10793476	1					
ANR	10793594	AdditiveExpression	AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 )		10793476	1		-			
ANR	10793595	ArrayIndexing	AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ]		10793476	0					
ANR	10793596	PtrMemberAccess	AS_NORMAL_ENCODING ( enc ) -> type		10793476	0					
ANR	10793597	CallExpression	AS_NORMAL_ENCODING ( enc )		10793476	0					
ANR	10793598	Callee	AS_NORMAL_ENCODING		10793476	0					
ANR	10793599	Identifier	AS_NORMAL_ENCODING		10793476	0					
ANR	10793600	ArgumentList	enc		10793476	1					
ANR	10793601	Argument	enc		10793476	0					
ANR	10793602	Identifier	enc		10793476	0					
ANR	10793603	Identifier	type		10793476	1					
ANR	10793604	CastExpression	( unsigned char ) * * fromP		10793476	1					
ANR	10793605	CastTarget	unsigned char		10793476	0					
ANR	10793606	UnaryOperationExpression	* * fromP		10793476	1					
ANR	10793607	UnaryOperator	*		10793476	0					
ANR	10793608	UnaryOperationExpression	* fromP		10793476	1					
ANR	10793609	UnaryOperator	*		10793476	0					
ANR	10793610	Identifier	fromP		10793476	1					
ANR	10793611	AdditiveExpression	BT_LEAD2 - 2		10793476	1		-			
ANR	10793612	Identifier	BT_LEAD2		10793476	0					
ANR	10793613	PrimaryExpression	2		10793476	1					
ANR	10793614	ElseStatement	else		10793476	0					
ANR	10793615	CompoundStatement		20:9:590:590	10793476	0					
ANR	10793616	IfStatement	if ( n > toLim - * toP )		10793476	0					
ANR	10793617	Condition	n > toLim - * toP	1463:10:37365:37380	10793476	0	True				
ANR	10793618	RelationalExpression	n > toLim - * toP		10793476	0		>			
ANR	10793619	Identifier	n		10793476	0					
ANR	10793620	AdditiveExpression	toLim - * toP		10793476	1		-			
ANR	10793621	Identifier	toLim		10793476	0					
ANR	10793622	UnaryOperationExpression	* toP		10793476	1					
ANR	10793623	UnaryOperator	*		10793476	0					
ANR	10793624	Identifier	toP		10793476	1					
ANR	10793625	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	1464:8:37391:37426	10793476	1	True				
ANR	10793626	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10793476	0					
ANR	10793627	ExpressionStatement	( * fromP ) ++	1465:6:37434:37444	10793476	1	True				
ANR	10793628	PostIncDecOperationExpression	( * fromP ) ++		10793476	0					
ANR	10793629	UnaryOperationExpression	* fromP		10793476	0					
ANR	10793630	UnaryOperator	*		10793476	0					
ANR	10793631	Identifier	fromP		10793476	1					
ANR	10793632	IncDec	++		10793476	1					
ANR	10793633	ExpressionStatement	"memcpy ( * toP , utf8 , n )"	1467:4:37456:37477	10793476	6	True				
ANR	10793634	CallExpression	"memcpy ( * toP , utf8 , n )"		10793476	0					
ANR	10793635	Callee	memcpy		10793476	0					
ANR	10793636	Identifier	memcpy		10793476	0					
ANR	10793637	ArgumentList	* toP		10793476	1					
ANR	10793638	Argument	* toP		10793476	0					
ANR	10793639	UnaryOperationExpression	* toP		10793476	0					
ANR	10793640	UnaryOperator	*		10793476	0					
ANR	10793641	Identifier	toP		10793476	1					
ANR	10793642	Argument	utf8		10793476	1					
ANR	10793643	Identifier	utf8		10793476	0					
ANR	10793644	Argument	n		10793476	2					
ANR	10793645	Identifier	n		10793476	0					
ANR	10793646	ExpressionStatement	* toP += n	1468:4:37483:37492	10793476	7	True				
ANR	10793647	AssignmentExpression	* toP += n		10793476	0		+=			
ANR	10793648	UnaryOperationExpression	* toP		10793476	0					
ANR	10793649	UnaryOperator	*		10793476	0					
ANR	10793650	Identifier	toP		10793476	1					
ANR	10793651	Identifier	n		10793476	1					
ANR	10793652	ReturnType	static enum XML_Convert_Result PTRCALL		10793476	1					
ANR	10793653	Identifier	unknown_toUtf8		10793476	2					
ANR	10793654	ParameterList	"const ENCODING * enc , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		10793476	3					
ANR	10793655	Parameter	const ENCODING * enc	1440:15:36639:36657	10793476	0	True				
ANR	10793656	ParameterType	const ENCODING *		10793476	0					
ANR	10793657	Identifier	enc		10793476	1					
ANR	10793658	Parameter	const char * * fromP	1441:15:36675:36692	10793476	1	True				
ANR	10793659	ParameterType	const char * *		10793476	0					
ANR	10793660	Identifier	fromP		10793476	1					
ANR	10793661	Parameter	const char * fromLim	1441:35:36695:36713	10793476	2	True				
ANR	10793662	ParameterType	const char *		10793476	0					
ANR	10793663	Identifier	fromLim		10793476	1					
ANR	10793664	Parameter	char * * toP	1442:15:36731:36740	10793476	3	True				
ANR	10793665	ParameterType	char * *		10793476	0					
ANR	10793666	Identifier	toP		10793476	1					
ANR	10793667	Parameter	const char * toLim	1442:27:36743:36759	10793476	4	True				
ANR	10793668	ParameterType	const char *		10793476	0					
ANR	10793669	Identifier	toLim		10793476	1					
ANR	10793670	CFGEntryNode	ENTRY		10793476		True				
ANR	10793671	CFGExitNode	EXIT		10793476		True				
ANR	10793672	InfiniteForNode	true		10793476		True				
ANR	10793673	Symbol	uenc -> userData		10793476						
ANR	10793674	Symbol	* * * fromP		10793476						
ANR	10793675	Symbol	toLim		10793476						
ANR	10793676	Symbol	* fromP		10793476						
ANR	10793677	Symbol	* uenc -> utf8		10793476						
ANR	10793678	Symbol	AS_NORMAL_ENCODING		10793476						
ANR	10793679	Symbol	utf8		10793476						
ANR	10793680	Symbol	AS_UNKNOWN_ENCODING		10793476						
ANR	10793681	Symbol	uenc -> convert		10793476						
ANR	10793682	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		10793476						
ANR	10793683	Symbol	* * AS_NORMAL_ENCODING		10793476						
ANR	10793684	Symbol	fromLim		10793476						
ANR	10793685	Symbol	enc		10793476						
ANR	10793686	Symbol	* uenc		10793476						
ANR	10793687	Symbol	* toP		10793476						
ANR	10793688	Symbol	c		10793476						
ANR	10793689	Symbol	XmlUtf8Encode		10793476						
ANR	10793690	Symbol	* AS_NORMAL_ENCODING		10793476						
ANR	10793691	Symbol	* AS_NORMAL_ENCODING ( enc ) -> type		10793476						
ANR	10793692	Symbol	* * fromP		10793476						
ANR	10793693	Symbol	AS_NORMAL_ENCODING ( enc ) -> type		10793476						
ANR	10793694	Symbol	* * uenc		10793476						
ANR	10793695	Symbol	BT_LEAD2		10793476						
ANR	10793696	Symbol	n		10793476						
ANR	10793697	Symbol	uenc -> utf8		10793476						
ANR	10793698	Symbol	buf		10793476						
ANR	10793699	Symbol	uenc		10793476						
ANR	10793700	Symbol	fromP		10793476						
ANR	10793701	Symbol	toP		10793476						
ANR	10793702	Symbol	* utf8 ++		10793476						
ANR	10793703	Symbol	XML_CONVERT_COMPLETED		10793476						
ANR	10793704	Function	unknown_toUtf16	1472:0:37501:38259							
ANR	10793705	FunctionDef	"unknown_toUtf16 (const ENCODING * enc , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim)"		10793704	0					
ANR	10793706	CompoundStatement		1476:0:37701:38259	10793704	0					
ANR	10793707	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1477:2:37705:37767	10793704	0	True				
ANR	10793708	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793704	0					
ANR	10793709	IdentifierDeclType	const struct unknown_encoding *		10793704	0					
ANR	10793710	Identifier	uenc		10793704	1					
ANR	10793711	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		10793704	2		=			
ANR	10793712	Identifier	uenc		10793704	0					
ANR	10793713	CallExpression	AS_UNKNOWN_ENCODING ( enc )		10793704	1					
ANR	10793714	Callee	AS_UNKNOWN_ENCODING		10793704	0					
ANR	10793715	Identifier	AS_UNKNOWN_ENCODING		10793704	0					
ANR	10793716	ArgumentList	enc		10793704	1					
ANR	10793717	Argument	enc		10793704	0					
ANR	10793718	Identifier	enc		10793704	0					
ANR	10793719	WhileStatement	while ( * fromP < fromLim && * toP < toLim )		10793704	1					
ANR	10793720	Condition	* fromP < fromLim && * toP < toLim	1478:9:37778:37809	10793704	0	True				
ANR	10793721	AndExpression	* fromP < fromLim && * toP < toLim		10793704	0		&&			
ANR	10793722	RelationalExpression	* fromP < fromLim		10793704	0		<			
ANR	10793723	UnaryOperationExpression	* fromP		10793704	0					
ANR	10793724	UnaryOperator	*		10793704	0					
ANR	10793725	Identifier	fromP		10793704	1					
ANR	10793726	Identifier	fromLim		10793704	1					
ANR	10793727	RelationalExpression	* toP < toLim		10793704	1		<			
ANR	10793728	UnaryOperationExpression	* toP		10793704	0					
ANR	10793729	UnaryOperator	*		10793704	0					
ANR	10793730	Identifier	toP		10793704	1					
ANR	10793731	Identifier	toLim		10793704	1					
ANR	10793732	CompoundStatement		4:4:116:170	10793704	1					
ANR	10793733	IdentifierDeclStatement	unsigned short c = uenc -> utf16 [ ( unsigned char ) * * fromP ] ;	1479:4:37818:37872	10793704	0	True				
ANR	10793734	IdentifierDecl	c = uenc -> utf16 [ ( unsigned char ) * * fromP ]		10793704	0					
ANR	10793735	IdentifierDeclType	unsigned short		10793704	0					
ANR	10793736	Identifier	c		10793704	1					
ANR	10793737	AssignmentExpression	c = uenc -> utf16 [ ( unsigned char ) * * fromP ]		10793704	2		=			
ANR	10793738	Identifier	c		10793704	0					
ANR	10793739	ArrayIndexing	uenc -> utf16 [ ( unsigned char ) * * fromP ]		10793704	1					
ANR	10793740	PtrMemberAccess	uenc -> utf16		10793704	0					
ANR	10793741	Identifier	uenc		10793704	0					
ANR	10793742	Identifier	utf16		10793704	1					
ANR	10793743	CastExpression	( unsigned char ) * * fromP		10793704	1					
ANR	10793744	CastTarget	unsigned char		10793704	0					
ANR	10793745	UnaryOperationExpression	* * fromP		10793704	1					
ANR	10793746	UnaryOperator	*		10793704	0					
ANR	10793747	UnaryOperationExpression	* fromP		10793704	1					
ANR	10793748	UnaryOperator	*		10793704	0					
ANR	10793749	Identifier	fromP		10793704	1					
ANR	10793750	IfStatement	if ( c == 0 )		10793704	1					
ANR	10793751	Condition	c == 0	1480:8:37882:37887	10793704	0	True				
ANR	10793752	EqualityExpression	c == 0		10793704	0		==			
ANR	10793753	Identifier	c		10793704	0					
ANR	10793754	PrimaryExpression	0		10793704	1					
ANR	10793755	CompoundStatement		5:16:188:188	10793704	1					
ANR	10793756	ExpressionStatement	"c = ( unsigned short ) uenc -> convert ( uenc -> userData , * fromP )"	1481:6:37898:37966	10793704	0	True				
ANR	10793757	AssignmentExpression	"c = ( unsigned short ) uenc -> convert ( uenc -> userData , * fromP )"		10793704	0		=			
ANR	10793758	Identifier	c		10793704	0					
ANR	10793759	CastExpression	"( unsigned short ) uenc -> convert ( uenc -> userData , * fromP )"		10793704	1					
ANR	10793760	CastTarget	unsigned short		10793704	0					
ANR	10793761	CallExpression	"uenc -> convert ( uenc -> userData , * fromP )"		10793704	1					
ANR	10793762	Callee	uenc -> convert		10793704	0					
ANR	10793763	PtrMemberAccess	uenc -> convert		10793704	0					
ANR	10793764	Identifier	uenc		10793704	0					
ANR	10793765	Identifier	convert		10793704	1					
ANR	10793766	ArgumentList	uenc -> userData		10793704	1					
ANR	10793767	Argument	uenc -> userData		10793704	0					
ANR	10793768	PtrMemberAccess	uenc -> userData		10793704	0					
ANR	10793769	Identifier	uenc		10793704	0					
ANR	10793770	Identifier	userData		10793704	1					
ANR	10793771	Argument	* fromP		10793704	1					
ANR	10793772	UnaryOperationExpression	* fromP		10793704	0					
ANR	10793773	UnaryOperator	*		10793704	0					
ANR	10793774	Identifier	fromP		10793704	1					
ANR	10793775	ExpressionStatement	* fromP += ( AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 ) )	1483:6:37974:38073	10793704	1	True				
ANR	10793776	AssignmentExpression	* fromP += ( AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 ) )		10793704	0		+=			
ANR	10793777	UnaryOperationExpression	* fromP		10793704	0					
ANR	10793778	UnaryOperator	*		10793704	0					
ANR	10793779	Identifier	fromP		10793704	1					
ANR	10793780	AdditiveExpression	AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 )		10793704	1		-			
ANR	10793781	ArrayIndexing	AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ]		10793704	0					
ANR	10793782	PtrMemberAccess	AS_NORMAL_ENCODING ( enc ) -> type		10793704	0					
ANR	10793783	CallExpression	AS_NORMAL_ENCODING ( enc )		10793704	0					
ANR	10793784	Callee	AS_NORMAL_ENCODING		10793704	0					
ANR	10793785	Identifier	AS_NORMAL_ENCODING		10793704	0					
ANR	10793786	ArgumentList	enc		10793704	1					
ANR	10793787	Argument	enc		10793704	0					
ANR	10793788	Identifier	enc		10793704	0					
ANR	10793789	Identifier	type		10793704	1					
ANR	10793790	CastExpression	( unsigned char ) * * fromP		10793704	1					
ANR	10793791	CastTarget	unsigned char		10793704	0					
ANR	10793792	UnaryOperationExpression	* * fromP		10793704	1					
ANR	10793793	UnaryOperator	*		10793704	0					
ANR	10793794	UnaryOperationExpression	* fromP		10793704	1					
ANR	10793795	UnaryOperator	*		10793704	0					
ANR	10793796	Identifier	fromP		10793704	1					
ANR	10793797	AdditiveExpression	BT_LEAD2 - 2		10793704	1		-			
ANR	10793798	Identifier	BT_LEAD2		10793704	0					
ANR	10793799	PrimaryExpression	2		10793704	1					
ANR	10793800	ElseStatement	else		10793704	0					
ANR	10793801	ExpressionStatement	( * fromP ) ++	1487:6:38096:38106	10793704	0	True				
ANR	10793802	PostIncDecOperationExpression	( * fromP ) ++		10793704	0					
ANR	10793803	UnaryOperationExpression	* fromP		10793704	0					
ANR	10793804	UnaryOperator	*		10793704	0					
ANR	10793805	Identifier	fromP		10793704	1					
ANR	10793806	IncDec	++		10793704	1					
ANR	10793807	ExpressionStatement	* ( * toP ) ++ = c	1488:4:38112:38125	10793704	2	True				
ANR	10793808	AssignmentExpression	* ( * toP ) ++ = c		10793704	0		=			
ANR	10793809	UnaryOperationExpression	* ( * toP ) ++		10793704	0					
ANR	10793810	UnaryOperator	*		10793704	0					
ANR	10793811	PostIncDecOperationExpression	( * toP ) ++		10793704	1					
ANR	10793812	UnaryOperationExpression	* toP		10793704	0					
ANR	10793813	UnaryOperator	*		10793704	0					
ANR	10793814	Identifier	toP		10793704	1					
ANR	10793815	IncDec	++		10793704	1					
ANR	10793816	Identifier	c		10793704	1					
ANR	10793817	IfStatement	if ( ( * toP == toLim ) && ( * fromP < fromLim ) )		10793704	2					
ANR	10793818	Condition	( * toP == toLim ) && ( * fromP < fromLim )	1491:6:38138:38174	10793704	0	True				
ANR	10793819	AndExpression	( * toP == toLim ) && ( * fromP < fromLim )		10793704	0		&&			
ANR	10793820	EqualityExpression	* toP == toLim		10793704	0		==			
ANR	10793821	UnaryOperationExpression	* toP		10793704	0					
ANR	10793822	UnaryOperator	*		10793704	0					
ANR	10793823	Identifier	toP		10793704	1					
ANR	10793824	Identifier	toLim		10793704	1					
ANR	10793825	RelationalExpression	* fromP < fromLim		10793704	1		<			
ANR	10793826	UnaryOperationExpression	* fromP		10793704	0					
ANR	10793827	UnaryOperator	*		10793704	0					
ANR	10793828	Identifier	fromP		10793704	1					
ANR	10793829	Identifier	fromLim		10793704	1					
ANR	10793830	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	1492:4:38181:38216	10793704	1	True				
ANR	10793831	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		10793704	0					
ANR	10793832	ElseStatement	else		10793704	0					
ANR	10793833	ReturnStatement	return XML_CONVERT_COMPLETED ;	1494:4:38229:38257	10793704	0	True				
ANR	10793834	Identifier	XML_CONVERT_COMPLETED		10793704	0					
ANR	10793835	ReturnType	static enum XML_Convert_Result PTRCALL		10793704	1					
ANR	10793836	Identifier	unknown_toUtf16		10793704	2					
ANR	10793837	ParameterList	"const ENCODING * enc , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim"		10793704	3					
ANR	10793838	Parameter	const ENCODING * enc	1473:16:37556:37574	10793704	0	True				
ANR	10793839	ParameterType	const ENCODING *		10793704	0					
ANR	10793840	Identifier	enc		10793704	1					
ANR	10793841	Parameter	const char * * fromP	1474:16:37593:37610	10793704	1	True				
ANR	10793842	ParameterType	const char * *		10793704	0					
ANR	10793843	Identifier	fromP		10793704	1					
ANR	10793844	Parameter	const char * fromLim	1474:36:37613:37631	10793704	2	True				
ANR	10793845	ParameterType	const char *		10793704	0					
ANR	10793846	Identifier	fromLim		10793704	1					
ANR	10793847	Parameter	unsigned short * * toP	1475:16:37650:37669	10793704	3	True				
ANR	10793848	ParameterType	unsigned short * *		10793704	0					
ANR	10793849	Identifier	toP		10793704	1					
ANR	10793850	Parameter	const unsigned short * toLim	1475:38:37672:37698	10793704	4	True				
ANR	10793851	ParameterType	const unsigned short *		10793704	0					
ANR	10793852	Identifier	toLim		10793704	1					
ANR	10793853	CFGEntryNode	ENTRY		10793704		True				
ANR	10793854	CFGExitNode	EXIT		10793704		True				
ANR	10793855	Symbol	uenc -> userData		10793704						
ANR	10793856	Symbol	* * * fromP		10793704						
ANR	10793857	Symbol	toLim		10793704						
ANR	10793858	Symbol	* fromP		10793704						
ANR	10793859	Symbol	AS_NORMAL_ENCODING		10793704						
ANR	10793860	Symbol	AS_UNKNOWN_ENCODING		10793704						
ANR	10793861	Symbol	uenc -> convert		10793704						
ANR	10793862	Symbol	* * AS_NORMAL_ENCODING		10793704						
ANR	10793863	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		10793704						
ANR	10793864	Symbol	* ( * toP ) ++		10793704						
ANR	10793865	Symbol	uenc -> utf16		10793704						
ANR	10793866	Symbol	fromLim		10793704						
ANR	10793867	Symbol	enc		10793704						
ANR	10793868	Symbol	* uenc		10793704						
ANR	10793869	Symbol	* toP		10793704						
ANR	10793870	Symbol	* uenc -> utf16		10793704						
ANR	10793871	Symbol	c		10793704						
ANR	10793872	Symbol	* AS_NORMAL_ENCODING		10793704						
ANR	10793873	Symbol	* AS_NORMAL_ENCODING ( enc ) -> type		10793704						
ANR	10793874	Symbol	* * fromP		10793704						
ANR	10793875	Symbol	AS_NORMAL_ENCODING ( enc ) -> type		10793704						
ANR	10793876	Symbol	* * uenc		10793704						
ANR	10793877	Symbol	BT_LEAD2		10793704						
ANR	10793878	Symbol	uenc		10793704						
ANR	10793879	Symbol	fromP		10793704						
ANR	10793880	Symbol	toP		10793704						
ANR	10793881	Symbol	XML_CONVERT_COMPLETED		10793704						
ANR	10793882	Function	XmlInitUnknownEncoding	1497:0:38262:40809							
ANR	10793883	FunctionDef	"XmlInitUnknownEncoding (void * mem , int * table , CONVERTER convert , void * userData)"		10793882	0					
ANR	10793884	CompoundStatement		1502:0:38423:40809	10793882	0					
ANR	10793885	IdentifierDeclStatement	int i ;	1503:2:38427:38432	10793882	0	True				
ANR	10793886	IdentifierDecl	i		10793882	0					
ANR	10793887	IdentifierDeclType	int		10793882	0					
ANR	10793888	Identifier	i		10793882	1					
ANR	10793889	IdentifierDeclStatement	struct unknown_encoding * e = ( struct unknown_encoding * ) mem ;	1504:2:38436:38495	10793882	1	True				
ANR	10793890	IdentifierDecl	* e = ( struct unknown_encoding * ) mem		10793882	0					
ANR	10793891	IdentifierDeclType	struct unknown_encoding *		10793882	0					
ANR	10793892	Identifier	e		10793882	1					
ANR	10793893	AssignmentExpression	* e = ( struct unknown_encoding * ) mem		10793882	2		=			
ANR	10793894	Identifier	e		10793882	0					
ANR	10793895	CastExpression	( struct unknown_encoding * ) mem		10793882	1					
ANR	10793896	CastTarget	struct unknown_encoding *		10793882	0					
ANR	10793897	Identifier	mem		10793882	1					
ANR	10793898	ForStatement	for ( i = 0 ; i < ( int ) sizeof ( struct normal_encoding ) ; i ++ )		10793882	2					
ANR	10793899	ForInit	i = 0 ;	1505:7:38504:38509	10793882	0	True				
ANR	10793900	AssignmentExpression	i = 0		10793882	0		=			
ANR	10793901	Identifier	i		10793882	0					
ANR	10793902	PrimaryExpression	0		10793882	1					
ANR	10793903	Condition	i < ( int ) sizeof ( struct normal_encoding )	1505:14:38511:38549	10793882	1	True				
ANR	10793904	RelationalExpression	i < ( int ) sizeof ( struct normal_encoding )		10793882	0		<			
ANR	10793905	Identifier	i		10793882	0					
ANR	10793906	CastExpression	( int ) sizeof ( struct normal_encoding )		10793882	1					
ANR	10793907	CastTarget	int		10793882	0					
ANR	10793908	SizeofExpression	sizeof ( struct normal_encoding )		10793882	1					
ANR	10793909	Sizeof	sizeof		10793882	0					
ANR	10793910	SizeofOperand	struct normal_encoding		10793882	1					
ANR	10793911	PostIncDecOperationExpression	i ++	1505:55:38552:38554	10793882	2	True				
ANR	10793912	Identifier	i		10793882	0					
ANR	10793913	IncDec	++		10793882	1					
ANR	10793914	ExpressionStatement	( ( char * ) mem ) [ i ] = ( ( char * ) & latin1_encoding ) [ i ]	1506:4:38561:38609	10793882	3	True				
ANR	10793915	AssignmentExpression	( ( char * ) mem ) [ i ] = ( ( char * ) & latin1_encoding ) [ i ]		10793882	0		=			
ANR	10793916	ArrayIndexing	( ( char * ) mem ) [ i ]		10793882	0					
ANR	10793917	CastExpression	( char * ) mem		10793882	0					
ANR	10793918	CastTarget	char *		10793882	0					
ANR	10793919	Identifier	mem		10793882	1					
ANR	10793920	Identifier	i		10793882	1					
ANR	10793921	ArrayIndexing	( ( char * ) & latin1_encoding ) [ i ]		10793882	1					
ANR	10793922	CastExpression	( char * ) & latin1_encoding		10793882	0					
ANR	10793923	CastTarget	char *		10793882	0					
ANR	10793924	UnaryOperationExpression	& latin1_encoding		10793882	1					
ANR	10793925	UnaryOperator	&		10793882	0					
ANR	10793926	Identifier	latin1_encoding		10793882	1					
ANR	10793927	Identifier	i		10793882	1					
ANR	10793928	ForStatement	for ( i = 0 ; i < 128 ; i ++ )		10793882	3					
ANR	10793929	ForInit	i = 0 ;	1507:7:38618:38623	10793882	0	True				
ANR	10793930	AssignmentExpression	i = 0		10793882	0		=			
ANR	10793931	Identifier	i		10793882	0					
ANR	10793932	PrimaryExpression	0		10793882	1					
ANR	10793933	Condition	i < 128	1507:14:38625:38631	10793882	1	True				
ANR	10793934	RelationalExpression	i < 128		10793882	0		<			
ANR	10793935	Identifier	i		10793882	0					
ANR	10793936	PrimaryExpression	128		10793882	1					
ANR	10793937	PostIncDecOperationExpression	i ++	1507:23:38634:38636	10793882	2	True				
ANR	10793938	Identifier	i		10793882	0					
ANR	10793939	IncDec	++		10793882	1					
ANR	10793940	IfStatement	if ( latin1_encoding . type [ i ] != BT_OTHER && latin1_encoding . type [ i ] != BT_NONXML && table [ i ] != i )		10793882	3					
ANR	10793941	Condition	latin1_encoding . type [ i ] != BT_OTHER && latin1_encoding . type [ i ] != BT_NONXML && table [ i ] != i	1508:8:38647:38754	10793882	0	True				
ANR	10793942	AndExpression	latin1_encoding . type [ i ] != BT_OTHER && latin1_encoding . type [ i ] != BT_NONXML && table [ i ] != i		10793882	0		&&			
ANR	10793943	EqualityExpression	latin1_encoding . type [ i ] != BT_OTHER		10793882	0		!=			
ANR	10793944	ArrayIndexing	latin1_encoding . type [ i ]		10793882	0					
ANR	10793945	MemberAccess	latin1_encoding . type		10793882	0					
ANR	10793946	Identifier	latin1_encoding		10793882	0					
ANR	10793947	Identifier	type		10793882	1					
ANR	10793948	Identifier	i		10793882	1					
ANR	10793949	Identifier	BT_OTHER		10793882	1					
ANR	10793950	AndExpression	latin1_encoding . type [ i ] != BT_NONXML && table [ i ] != i		10793882	1		&&			
ANR	10793951	EqualityExpression	latin1_encoding . type [ i ] != BT_NONXML		10793882	0		!=			
ANR	10793952	ArrayIndexing	latin1_encoding . type [ i ]		10793882	0					
ANR	10793953	MemberAccess	latin1_encoding . type		10793882	0					
ANR	10793954	Identifier	latin1_encoding		10793882	0					
ANR	10793955	Identifier	type		10793882	1					
ANR	10793956	Identifier	i		10793882	1					
ANR	10793957	Identifier	BT_NONXML		10793882	1					
ANR	10793958	EqualityExpression	table [ i ] != i		10793882	1		!=			
ANR	10793959	ArrayIndexing	table [ i ]		10793882	0					
ANR	10793960	Identifier	table		10793882	0					
ANR	10793961	Identifier	i		10793882	1					
ANR	10793962	Identifier	i		10793882	1					
ANR	10793963	ReturnStatement	return 0 ;	1511:6:38763:38771	10793882	1	True				
ANR	10793964	PrimaryExpression	0		10793882	0					
ANR	10793965	ForStatement	for ( i = 0 ; i < 256 ; i ++ )		10793882	4					
ANR	10793966	ForInit	i = 0 ;	1512:7:38780:38785	10793882	0	True				
ANR	10793967	AssignmentExpression	i = 0		10793882	0		=			
ANR	10793968	Identifier	i		10793882	0					
ANR	10793969	PrimaryExpression	0		10793882	1					
ANR	10793970	Condition	i < 256	1512:14:38787:38793	10793882	1	True				
ANR	10793971	RelationalExpression	i < 256		10793882	0		<			
ANR	10793972	Identifier	i		10793882	0					
ANR	10793973	PrimaryExpression	256		10793882	1					
ANR	10793974	PostIncDecOperationExpression	i ++	1512:23:38796:38798	10793882	2	True				
ANR	10793975	Identifier	i		10793882	0					
ANR	10793976	IncDec	++		10793882	1					
ANR	10793977	CompoundStatement		12:4:383:399	10793882	3					
ANR	10793978	IdentifierDeclStatement	int c = table [ i ] ;	1513:4:38807:38823	10793882	0	True				
ANR	10793979	IdentifierDecl	c = table [ i ]		10793882	0					
ANR	10793980	IdentifierDeclType	int		10793882	0					
ANR	10793981	Identifier	c		10793882	1					
ANR	10793982	AssignmentExpression	c = table [ i ]		10793882	2		=			
ANR	10793983	Identifier	c		10793882	0					
ANR	10793984	ArrayIndexing	table [ i ]		10793882	1					
ANR	10793985	Identifier	table		10793882	0					
ANR	10793986	Identifier	i		10793882	1					
ANR	10793987	IfStatement	if ( c == - 1 )		10793882	1					
ANR	10793988	Condition	c == - 1	1514:8:38833:38839	10793882	0	True				
ANR	10793989	EqualityExpression	c == - 1		10793882	0		==			
ANR	10793990	Identifier	c		10793882	0					
ANR	10793991	UnaryOperationExpression	- 1		10793882	1					
ANR	10793992	UnaryOperator	-		10793882	0					
ANR	10793993	PrimaryExpression	1		10793882	1					
ANR	10793994	CompoundStatement		13:17:418:418	10793882	1					
ANR	10793995	ExpressionStatement	e -> normal . type [ i ] = BT_MALFORM	1515:6:38850:38880	10793882	0	True				
ANR	10793996	AssignmentExpression	e -> normal . type [ i ] = BT_MALFORM		10793882	0		=			
ANR	10793997	ArrayIndexing	e -> normal . type [ i ]		10793882	0					
ANR	10793998	MemberAccess	e -> normal . type		10793882	0					
ANR	10793999	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794000	Identifier	e		10793882	0					
ANR	10794001	Identifier	normal		10793882	1					
ANR	10794002	Identifier	type		10793882	1					
ANR	10794003	Identifier	i		10793882	1					
ANR	10794004	Identifier	BT_MALFORM		10793882	1					
ANR	10794005	ExpressionStatement	e -> utf16 [ i ] = 0xFFFF	1517:6:38932:38952	10793882	1	True				
ANR	10794006	AssignmentExpression	e -> utf16 [ i ] = 0xFFFF		10793882	0		=			
ANR	10794007	ArrayIndexing	e -> utf16 [ i ]		10793882	0					
ANR	10794008	PtrMemberAccess	e -> utf16		10793882	0					
ANR	10794009	Identifier	e		10793882	0					
ANR	10794010	Identifier	utf16		10793882	1					
ANR	10794011	Identifier	i		10793882	1					
ANR	10794012	PrimaryExpression	0xFFFF		10793882	1					
ANR	10794013	ExpressionStatement	e -> utf8 [ i ] [ 0 ] = 1	1518:6:38960:38977	10793882	2	True				
ANR	10794014	AssignmentExpression	e -> utf8 [ i ] [ 0 ] = 1		10793882	0		=			
ANR	10794015	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		10793882	0					
ANR	10794016	ArrayIndexing	e -> utf8 [ i ]		10793882	0					
ANR	10794017	PtrMemberAccess	e -> utf8		10793882	0					
ANR	10794018	Identifier	e		10793882	0					
ANR	10794019	Identifier	utf8		10793882	1					
ANR	10794020	Identifier	i		10793882	1					
ANR	10794021	PrimaryExpression	0		10793882	1					
ANR	10794022	PrimaryExpression	1		10793882	1					
ANR	10794023	ExpressionStatement	e -> utf8 [ i ] [ 1 ] = 0	1519:6:38985:39002	10793882	3	True				
ANR	10794024	AssignmentExpression	e -> utf8 [ i ] [ 1 ] = 0		10793882	0		=			
ANR	10794025	ArrayIndexing	e -> utf8 [ i ] [ 1 ]		10793882	0					
ANR	10794026	ArrayIndexing	e -> utf8 [ i ]		10793882	0					
ANR	10794027	PtrMemberAccess	e -> utf8		10793882	0					
ANR	10794028	Identifier	e		10793882	0					
ANR	10794029	Identifier	utf8		10793882	1					
ANR	10794030	Identifier	i		10793882	1					
ANR	10794031	PrimaryExpression	1		10793882	1					
ANR	10794032	PrimaryExpression	0		10793882	1					
ANR	10794033	ElseStatement	else		10793882	0					
ANR	10794034	IfStatement	if ( c < 0 )		10793882	0					
ANR	10794035	Condition	c < 0	1521:13:39023:39027	10793882	0	True				
ANR	10794036	RelationalExpression	c < 0		10793882	0		<			
ANR	10794037	Identifier	c		10793882	0					
ANR	10794038	PrimaryExpression	0		10793882	1					
ANR	10794039	CompoundStatement		20:20:606:606	10793882	1					
ANR	10794040	IfStatement	if ( c < - 4 )		10793882	0					
ANR	10794041	Condition	c < - 4	1522:10:39042:39047	10793882	0	True				
ANR	10794042	RelationalExpression	c < - 4		10793882	0		<			
ANR	10794043	Identifier	c		10793882	0					
ANR	10794044	UnaryOperationExpression	- 4		10793882	1					
ANR	10794045	UnaryOperator	-		10793882	0					
ANR	10794046	PrimaryExpression	4		10793882	1					
ANR	10794047	ReturnStatement	return 0 ;	1523:8:39058:39066	10793882	1	True				
ANR	10794048	PrimaryExpression	0		10793882	0					
ANR	10794049	IfStatement	if ( ! convert )		10793882	1					
ANR	10794050	Condition	! convert	1525:10:39137:39144	10793882	0	True				
ANR	10794051	UnaryOperationExpression	! convert		10793882	0					
ANR	10794052	UnaryOperator	!		10793882	0					
ANR	10794053	Identifier	convert		10793882	1					
ANR	10794054	ReturnStatement	return 0 ;	1526:8:39155:39163	10793882	1	True				
ANR	10794055	PrimaryExpression	0		10793882	0					
ANR	10794056	ExpressionStatement	e -> normal . type [ i ] = ( unsigned char ) ( BT_LEAD2 - ( c + 2 ) )	1527:6:39171:39226	10793882	2	True				
ANR	10794057	AssignmentExpression	e -> normal . type [ i ] = ( unsigned char ) ( BT_LEAD2 - ( c + 2 ) )		10793882	0		=			
ANR	10794058	ArrayIndexing	e -> normal . type [ i ]		10793882	0					
ANR	10794059	MemberAccess	e -> normal . type		10793882	0					
ANR	10794060	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794061	Identifier	e		10793882	0					
ANR	10794062	Identifier	normal		10793882	1					
ANR	10794063	Identifier	type		10793882	1					
ANR	10794064	Identifier	i		10793882	1					
ANR	10794065	CastExpression	( unsigned char ) ( BT_LEAD2 - ( c + 2 ) )		10793882	1					
ANR	10794066	CastTarget	unsigned char		10793882	0					
ANR	10794067	AdditiveExpression	BT_LEAD2 - ( c + 2 )		10793882	1		-			
ANR	10794068	Identifier	BT_LEAD2		10793882	0					
ANR	10794069	AdditiveExpression	c + 2		10793882	1		+			
ANR	10794070	Identifier	c		10793882	0					
ANR	10794071	PrimaryExpression	2		10793882	1					
ANR	10794072	ExpressionStatement	e -> utf8 [ i ] [ 0 ] = 0	1528:6:39234:39251	10793882	3	True				
ANR	10794073	AssignmentExpression	e -> utf8 [ i ] [ 0 ] = 0		10793882	0		=			
ANR	10794074	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		10793882	0					
ANR	10794075	ArrayIndexing	e -> utf8 [ i ]		10793882	0					
ANR	10794076	PtrMemberAccess	e -> utf8		10793882	0					
ANR	10794077	Identifier	e		10793882	0					
ANR	10794078	Identifier	utf8		10793882	1					
ANR	10794079	Identifier	i		10793882	1					
ANR	10794080	PrimaryExpression	0		10793882	1					
ANR	10794081	PrimaryExpression	0		10793882	1					
ANR	10794082	ExpressionStatement	e -> utf16 [ i ] = 0	1529:6:39259:39274	10793882	4	True				
ANR	10794083	AssignmentExpression	e -> utf16 [ i ] = 0		10793882	0		=			
ANR	10794084	ArrayIndexing	e -> utf16 [ i ]		10793882	0					
ANR	10794085	PtrMemberAccess	e -> utf16		10793882	0					
ANR	10794086	Identifier	e		10793882	0					
ANR	10794087	Identifier	utf16		10793882	1					
ANR	10794088	Identifier	i		10793882	1					
ANR	10794089	PrimaryExpression	0		10793882	1					
ANR	10794090	ElseStatement	else		10793882	0					
ANR	10794091	IfStatement	if ( c < 0x80 )		10793882	0					
ANR	10794092	Condition	c < 0x80	1531:13:39295:39302	10793882	0	True				
ANR	10794093	RelationalExpression	c < 0x80		10793882	0		<			
ANR	10794094	Identifier	c		10793882	0					
ANR	10794095	PrimaryExpression	0x80		10793882	1					
ANR	10794096	CompoundStatement		30:23:881:881	10793882	1					
ANR	10794097	IfStatement	if ( latin1_encoding . type [ c ] != BT_OTHER && latin1_encoding . type [ c ] != BT_NONXML && c != i )		10793882	0					
ANR	10794098	Condition	latin1_encoding . type [ c ] != BT_OTHER && latin1_encoding . type [ c ] != BT_NONXML && c != i	1532:10:39317:39421	10793882	0	True				
ANR	10794099	AndExpression	latin1_encoding . type [ c ] != BT_OTHER && latin1_encoding . type [ c ] != BT_NONXML && c != i		10793882	0		&&			
ANR	10794100	EqualityExpression	latin1_encoding . type [ c ] != BT_OTHER		10793882	0		!=			
ANR	10794101	ArrayIndexing	latin1_encoding . type [ c ]		10793882	0					
ANR	10794102	MemberAccess	latin1_encoding . type		10793882	0					
ANR	10794103	Identifier	latin1_encoding		10793882	0					
ANR	10794104	Identifier	type		10793882	1					
ANR	10794105	Identifier	c		10793882	1					
ANR	10794106	Identifier	BT_OTHER		10793882	1					
ANR	10794107	AndExpression	latin1_encoding . type [ c ] != BT_NONXML && c != i		10793882	1		&&			
ANR	10794108	EqualityExpression	latin1_encoding . type [ c ] != BT_NONXML		10793882	0		!=			
ANR	10794109	ArrayIndexing	latin1_encoding . type [ c ]		10793882	0					
ANR	10794110	MemberAccess	latin1_encoding . type		10793882	0					
ANR	10794111	Identifier	latin1_encoding		10793882	0					
ANR	10794112	Identifier	type		10793882	1					
ANR	10794113	Identifier	c		10793882	1					
ANR	10794114	Identifier	BT_NONXML		10793882	1					
ANR	10794115	EqualityExpression	c != i		10793882	1		!=			
ANR	10794116	Identifier	c		10793882	0					
ANR	10794117	Identifier	i		10793882	1					
ANR	10794118	ReturnStatement	return 0 ;	1535:8:39432:39440	10793882	1	True				
ANR	10794119	PrimaryExpression	0		10793882	0					
ANR	10794120	ExpressionStatement	e -> normal . type [ i ] = latin1_encoding . type [ c ]	1536:6:39448:39491	10793882	1	True				
ANR	10794121	AssignmentExpression	e -> normal . type [ i ] = latin1_encoding . type [ c ]		10793882	0		=			
ANR	10794122	ArrayIndexing	e -> normal . type [ i ]		10793882	0					
ANR	10794123	MemberAccess	e -> normal . type		10793882	0					
ANR	10794124	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794125	Identifier	e		10793882	0					
ANR	10794126	Identifier	normal		10793882	1					
ANR	10794127	Identifier	type		10793882	1					
ANR	10794128	Identifier	i		10793882	1					
ANR	10794129	ArrayIndexing	latin1_encoding . type [ c ]		10793882	1					
ANR	10794130	MemberAccess	latin1_encoding . type		10793882	0					
ANR	10794131	Identifier	latin1_encoding		10793882	0					
ANR	10794132	Identifier	type		10793882	1					
ANR	10794133	Identifier	c		10793882	1					
ANR	10794134	ExpressionStatement	e -> utf8 [ i ] [ 0 ] = 1	1537:6:39499:39516	10793882	2	True				
ANR	10794135	AssignmentExpression	e -> utf8 [ i ] [ 0 ] = 1		10793882	0		=			
ANR	10794136	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		10793882	0					
ANR	10794137	ArrayIndexing	e -> utf8 [ i ]		10793882	0					
ANR	10794138	PtrMemberAccess	e -> utf8		10793882	0					
ANR	10794139	Identifier	e		10793882	0					
ANR	10794140	Identifier	utf8		10793882	1					
ANR	10794141	Identifier	i		10793882	1					
ANR	10794142	PrimaryExpression	0		10793882	1					
ANR	10794143	PrimaryExpression	1		10793882	1					
ANR	10794144	ExpressionStatement	e -> utf8 [ i ] [ 1 ] = ( char ) c	1538:6:39524:39547	10793882	3	True				
ANR	10794145	AssignmentExpression	e -> utf8 [ i ] [ 1 ] = ( char ) c		10793882	0		=			
ANR	10794146	ArrayIndexing	e -> utf8 [ i ] [ 1 ]		10793882	0					
ANR	10794147	ArrayIndexing	e -> utf8 [ i ]		10793882	0					
ANR	10794148	PtrMemberAccess	e -> utf8		10793882	0					
ANR	10794149	Identifier	e		10793882	0					
ANR	10794150	Identifier	utf8		10793882	1					
ANR	10794151	Identifier	i		10793882	1					
ANR	10794152	PrimaryExpression	1		10793882	1					
ANR	10794153	CastExpression	( char ) c		10793882	1					
ANR	10794154	CastTarget	char		10793882	0					
ANR	10794155	Identifier	c		10793882	1					
ANR	10794156	ExpressionStatement	e -> utf16 [ i ] = ( unsigned short ) ( c == 0 ? 0xFFFF : c )	1539:6:39555:39606	10793882	4	True				
ANR	10794157	AssignmentExpression	e -> utf16 [ i ] = ( unsigned short ) ( c == 0 ? 0xFFFF : c )		10793882	0		=			
ANR	10794158	ArrayIndexing	e -> utf16 [ i ]		10793882	0					
ANR	10794159	PtrMemberAccess	e -> utf16		10793882	0					
ANR	10794160	Identifier	e		10793882	0					
ANR	10794161	Identifier	utf16		10793882	1					
ANR	10794162	Identifier	i		10793882	1					
ANR	10794163	CastExpression	( unsigned short ) ( c == 0 ? 0xFFFF : c )		10793882	1					
ANR	10794164	CastTarget	unsigned short		10793882	0					
ANR	10794165	ConditionalExpression	c == 0 ? 0xFFFF : c		10793882	1					
ANR	10794166	Condition	c == 0		10793882	0					
ANR	10794167	EqualityExpression	c == 0		10793882	0		==			
ANR	10794168	Identifier	c		10793882	0					
ANR	10794169	PrimaryExpression	0		10793882	1					
ANR	10794170	PrimaryExpression	0xFFFF		10793882	1					
ANR	10794171	Identifier	c		10793882	2					
ANR	10794172	ElseStatement	else		10793882	0					
ANR	10794173	IfStatement	if ( checkCharRefNumber ( c ) < 0 )		10793882	0					
ANR	10794174	Condition	checkCharRefNumber ( c ) < 0	1541:13:39627:39651	10793882	0	True				
ANR	10794175	RelationalExpression	checkCharRefNumber ( c ) < 0		10793882	0		<			
ANR	10794176	CallExpression	checkCharRefNumber ( c )		10793882	0					
ANR	10794177	Callee	checkCharRefNumber		10793882	0					
ANR	10794178	Identifier	checkCharRefNumber		10793882	0					
ANR	10794179	ArgumentList	c		10793882	1					
ANR	10794180	Argument	c		10793882	0					
ANR	10794181	Identifier	c		10793882	0					
ANR	10794182	PrimaryExpression	0		10793882	1					
ANR	10794183	CompoundStatement		40:40:1230:1230	10793882	1					
ANR	10794184	ExpressionStatement	e -> normal . type [ i ] = BT_NONXML	1542:6:39662:39691	10793882	0	True				
ANR	10794185	AssignmentExpression	e -> normal . type [ i ] = BT_NONXML		10793882	0		=			
ANR	10794186	ArrayIndexing	e -> normal . type [ i ]		10793882	0					
ANR	10794187	MemberAccess	e -> normal . type		10793882	0					
ANR	10794188	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794189	Identifier	e		10793882	0					
ANR	10794190	Identifier	normal		10793882	1					
ANR	10794191	Identifier	type		10793882	1					
ANR	10794192	Identifier	i		10793882	1					
ANR	10794193	Identifier	BT_NONXML		10793882	1					
ANR	10794194	ExpressionStatement	e -> utf16 [ i ] = 0xFFFF	1544:6:39743:39763	10793882	1	True				
ANR	10794195	AssignmentExpression	e -> utf16 [ i ] = 0xFFFF		10793882	0		=			
ANR	10794196	ArrayIndexing	e -> utf16 [ i ]		10793882	0					
ANR	10794197	PtrMemberAccess	e -> utf16		10793882	0					
ANR	10794198	Identifier	e		10793882	0					
ANR	10794199	Identifier	utf16		10793882	1					
ANR	10794200	Identifier	i		10793882	1					
ANR	10794201	PrimaryExpression	0xFFFF		10793882	1					
ANR	10794202	ExpressionStatement	e -> utf8 [ i ] [ 0 ] = 1	1545:6:39771:39788	10793882	2	True				
ANR	10794203	AssignmentExpression	e -> utf8 [ i ] [ 0 ] = 1		10793882	0		=			
ANR	10794204	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		10793882	0					
ANR	10794205	ArrayIndexing	e -> utf8 [ i ]		10793882	0					
ANR	10794206	PtrMemberAccess	e -> utf8		10793882	0					
ANR	10794207	Identifier	e		10793882	0					
ANR	10794208	Identifier	utf8		10793882	1					
ANR	10794209	Identifier	i		10793882	1					
ANR	10794210	PrimaryExpression	0		10793882	1					
ANR	10794211	PrimaryExpression	1		10793882	1					
ANR	10794212	ExpressionStatement	e -> utf8 [ i ] [ 1 ] = 0	1546:6:39796:39813	10793882	3	True				
ANR	10794213	AssignmentExpression	e -> utf8 [ i ] [ 1 ] = 0		10793882	0		=			
ANR	10794214	ArrayIndexing	e -> utf8 [ i ] [ 1 ]		10793882	0					
ANR	10794215	ArrayIndexing	e -> utf8 [ i ]		10793882	0					
ANR	10794216	PtrMemberAccess	e -> utf8		10793882	0					
ANR	10794217	Identifier	e		10793882	0					
ANR	10794218	Identifier	utf8		10793882	1					
ANR	10794219	Identifier	i		10793882	1					
ANR	10794220	PrimaryExpression	1		10793882	1					
ANR	10794221	PrimaryExpression	0		10793882	1					
ANR	10794222	ElseStatement	else		10793882	0					
ANR	10794223	CompoundStatement		47:9:1406:1406	10793882	0					
ANR	10794224	IfStatement	if ( c > 0xFFFF )		10793882	0					
ANR	10794225	Condition	c > 0xFFFF	1549:10:39842:39851	10793882	0	True				
ANR	10794226	RelationalExpression	c > 0xFFFF		10793882	0		>			
ANR	10794227	Identifier	c		10793882	0					
ANR	10794228	PrimaryExpression	0xFFFF		10793882	1					
ANR	10794229	ReturnStatement	return 0 ;	1550:8:39862:39870	10793882	1	True				
ANR	10794230	PrimaryExpression	0		10793882	0					
ANR	10794231	IfStatement	"if ( UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xff ) )"		10793882	1					
ANR	10794232	Condition	"UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xff )"	1551:10:39882:39927	10793882	0	True				
ANR	10794233	CallExpression	"UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xff )"		10793882	0					
ANR	10794234	Callee	UCS2_GET_NAMING		10793882	0					
ANR	10794235	Identifier	UCS2_GET_NAMING		10793882	0					
ANR	10794236	ArgumentList	nmstrtPages		10793882	1					
ANR	10794237	Argument	nmstrtPages		10793882	0					
ANR	10794238	Identifier	nmstrtPages		10793882	0					
ANR	10794239	Argument	c >> 8		10793882	1					
ANR	10794240	ShiftExpression	c >> 8		10793882	0		>>			
ANR	10794241	Identifier	c		10793882	0					
ANR	10794242	PrimaryExpression	8		10793882	1					
ANR	10794243	Argument	c & 0xff		10793882	2					
ANR	10794244	BitAndExpression	c & 0xff		10793882	0		&			
ANR	10794245	Identifier	c		10793882	0					
ANR	10794246	PrimaryExpression	0xff		10793882	1					
ANR	10794247	ExpressionStatement	e -> normal . type [ i ] = BT_NMSTRT	1552:8:39938:39967	10793882	1	True				
ANR	10794248	AssignmentExpression	e -> normal . type [ i ] = BT_NMSTRT		10793882	0		=			
ANR	10794249	ArrayIndexing	e -> normal . type [ i ]		10793882	0					
ANR	10794250	MemberAccess	e -> normal . type		10793882	0					
ANR	10794251	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794252	Identifier	e		10793882	0					
ANR	10794253	Identifier	normal		10793882	1					
ANR	10794254	Identifier	type		10793882	1					
ANR	10794255	Identifier	i		10793882	1					
ANR	10794256	Identifier	BT_NMSTRT		10793882	1					
ANR	10794257	ElseStatement	else		10793882	0					
ANR	10794258	IfStatement	"if ( UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xff ) )"		10793882	0					
ANR	10794259	Condition	"UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xff )"	1553:15:39984:40027	10793882	0	True				
ANR	10794260	CallExpression	"UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xff )"		10793882	0					
ANR	10794261	Callee	UCS2_GET_NAMING		10793882	0					
ANR	10794262	Identifier	UCS2_GET_NAMING		10793882	0					
ANR	10794263	ArgumentList	namePages		10793882	1					
ANR	10794264	Argument	namePages		10793882	0					
ANR	10794265	Identifier	namePages		10793882	0					
ANR	10794266	Argument	c >> 8		10793882	1					
ANR	10794267	ShiftExpression	c >> 8		10793882	0		>>			
ANR	10794268	Identifier	c		10793882	0					
ANR	10794269	PrimaryExpression	8		10793882	1					
ANR	10794270	Argument	c & 0xff		10793882	2					
ANR	10794271	BitAndExpression	c & 0xff		10793882	0		&			
ANR	10794272	Identifier	c		10793882	0					
ANR	10794273	PrimaryExpression	0xff		10793882	1					
ANR	10794274	ExpressionStatement	e -> normal . type [ i ] = BT_NAME	1554:8:40038:40065	10793882	1	True				
ANR	10794275	AssignmentExpression	e -> normal . type [ i ] = BT_NAME		10793882	0		=			
ANR	10794276	ArrayIndexing	e -> normal . type [ i ]		10793882	0					
ANR	10794277	MemberAccess	e -> normal . type		10793882	0					
ANR	10794278	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794279	Identifier	e		10793882	0					
ANR	10794280	Identifier	normal		10793882	1					
ANR	10794281	Identifier	type		10793882	1					
ANR	10794282	Identifier	i		10793882	1					
ANR	10794283	Identifier	BT_NAME		10793882	1					
ANR	10794284	ElseStatement	else		10793882	0					
ANR	10794285	ExpressionStatement	e -> normal . type [ i ] = BT_OTHER	1556:8:40086:40114	10793882	0	True				
ANR	10794286	AssignmentExpression	e -> normal . type [ i ] = BT_OTHER		10793882	0		=			
ANR	10794287	ArrayIndexing	e -> normal . type [ i ]		10793882	0					
ANR	10794288	MemberAccess	e -> normal . type		10793882	0					
ANR	10794289	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794290	Identifier	e		10793882	0					
ANR	10794291	Identifier	normal		10793882	1					
ANR	10794292	Identifier	type		10793882	1					
ANR	10794293	Identifier	i		10793882	1					
ANR	10794294	Identifier	BT_OTHER		10793882	1					
ANR	10794295	ExpressionStatement	"e -> utf8 [ i ] [ 0 ] = ( char ) XmlUtf8Encode ( c , e -> utf8 [ i ] + 1 )"	1557:6:40122:40176	10793882	2	True				
ANR	10794296	AssignmentExpression	"e -> utf8 [ i ] [ 0 ] = ( char ) XmlUtf8Encode ( c , e -> utf8 [ i ] + 1 )"		10793882	0		=			
ANR	10794297	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		10793882	0					
ANR	10794298	ArrayIndexing	e -> utf8 [ i ]		10793882	0					
ANR	10794299	PtrMemberAccess	e -> utf8		10793882	0					
ANR	10794300	Identifier	e		10793882	0					
ANR	10794301	Identifier	utf8		10793882	1					
ANR	10794302	Identifier	i		10793882	1					
ANR	10794303	PrimaryExpression	0		10793882	1					
ANR	10794304	CastExpression	"( char ) XmlUtf8Encode ( c , e -> utf8 [ i ] + 1 )"		10793882	1					
ANR	10794305	CastTarget	char		10793882	0					
ANR	10794306	CallExpression	"XmlUtf8Encode ( c , e -> utf8 [ i ] + 1 )"		10793882	1					
ANR	10794307	Callee	XmlUtf8Encode		10793882	0					
ANR	10794308	Identifier	XmlUtf8Encode		10793882	0					
ANR	10794309	ArgumentList	c		10793882	1					
ANR	10794310	Argument	c		10793882	0					
ANR	10794311	Identifier	c		10793882	0					
ANR	10794312	Argument	e -> utf8 [ i ] + 1		10793882	1					
ANR	10794313	AdditiveExpression	e -> utf8 [ i ] + 1		10793882	0		+			
ANR	10794314	ArrayIndexing	e -> utf8 [ i ]		10793882	0					
ANR	10794315	PtrMemberAccess	e -> utf8		10793882	0					
ANR	10794316	Identifier	e		10793882	0					
ANR	10794317	Identifier	utf8		10793882	1					
ANR	10794318	Identifier	i		10793882	1					
ANR	10794319	PrimaryExpression	1		10793882	1					
ANR	10794320	ExpressionStatement	e -> utf16 [ i ] = ( unsigned short ) c	1558:6:40184:40215	10793882	3	True				
ANR	10794321	AssignmentExpression	e -> utf16 [ i ] = ( unsigned short ) c		10793882	0		=			
ANR	10794322	ArrayIndexing	e -> utf16 [ i ]		10793882	0					
ANR	10794323	PtrMemberAccess	e -> utf16		10793882	0					
ANR	10794324	Identifier	e		10793882	0					
ANR	10794325	Identifier	utf16		10793882	1					
ANR	10794326	Identifier	i		10793882	1					
ANR	10794327	CastExpression	( unsigned short ) c		10793882	1					
ANR	10794328	CastTarget	unsigned short		10793882	0					
ANR	10794329	Identifier	c		10793882	1					
ANR	10794330	ExpressionStatement	e -> userData = userData	1561:2:40229:40251	10793882	5	True				
ANR	10794331	AssignmentExpression	e -> userData = userData		10793882	0		=			
ANR	10794332	PtrMemberAccess	e -> userData		10793882	0					
ANR	10794333	Identifier	e		10793882	0					
ANR	10794334	Identifier	userData		10793882	1					
ANR	10794335	Identifier	userData		10793882	1					
ANR	10794336	ExpressionStatement	e -> convert = convert	1562:2:40255:40275	10793882	6	True				
ANR	10794337	AssignmentExpression	e -> convert = convert		10793882	0		=			
ANR	10794338	PtrMemberAccess	e -> convert		10793882	0					
ANR	10794339	Identifier	e		10793882	0					
ANR	10794340	Identifier	convert		10793882	1					
ANR	10794341	Identifier	convert		10793882	1					
ANR	10794342	IfStatement	if ( convert )		10793882	7					
ANR	10794343	Condition	convert	1563:6:40283:40289	10793882	0	True				
ANR	10794344	Identifier	convert		10793882	0					
ANR	10794345	CompoundStatement		62:15:1868:1868	10793882	1					
ANR	10794346	ExpressionStatement	e -> normal . isName2 = unknown_isName	1564:4:40298:40332	10793882	0	True				
ANR	10794347	AssignmentExpression	e -> normal . isName2 = unknown_isName		10793882	0		=			
ANR	10794348	MemberAccess	e -> normal . isName2		10793882	0					
ANR	10794349	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794350	Identifier	e		10793882	0					
ANR	10794351	Identifier	normal		10793882	1					
ANR	10794352	Identifier	isName2		10793882	1					
ANR	10794353	Identifier	unknown_isName		10793882	1					
ANR	10794354	ExpressionStatement	e -> normal . isName3 = unknown_isName	1565:4:40338:40372	10793882	1	True				
ANR	10794355	AssignmentExpression	e -> normal . isName3 = unknown_isName		10793882	0		=			
ANR	10794356	MemberAccess	e -> normal . isName3		10793882	0					
ANR	10794357	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794358	Identifier	e		10793882	0					
ANR	10794359	Identifier	normal		10793882	1					
ANR	10794360	Identifier	isName3		10793882	1					
ANR	10794361	Identifier	unknown_isName		10793882	1					
ANR	10794362	ExpressionStatement	e -> normal . isName4 = unknown_isName	1566:4:40378:40412	10793882	2	True				
ANR	10794363	AssignmentExpression	e -> normal . isName4 = unknown_isName		10793882	0		=			
ANR	10794364	MemberAccess	e -> normal . isName4		10793882	0					
ANR	10794365	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794366	Identifier	e		10793882	0					
ANR	10794367	Identifier	normal		10793882	1					
ANR	10794368	Identifier	isName4		10793882	1					
ANR	10794369	Identifier	unknown_isName		10793882	1					
ANR	10794370	ExpressionStatement	e -> normal . isNmstrt2 = unknown_isNmstrt	1567:4:40418:40456	10793882	3	True				
ANR	10794371	AssignmentExpression	e -> normal . isNmstrt2 = unknown_isNmstrt		10793882	0		=			
ANR	10794372	MemberAccess	e -> normal . isNmstrt2		10793882	0					
ANR	10794373	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794374	Identifier	e		10793882	0					
ANR	10794375	Identifier	normal		10793882	1					
ANR	10794376	Identifier	isNmstrt2		10793882	1					
ANR	10794377	Identifier	unknown_isNmstrt		10793882	1					
ANR	10794378	ExpressionStatement	e -> normal . isNmstrt3 = unknown_isNmstrt	1568:4:40462:40500	10793882	4	True				
ANR	10794379	AssignmentExpression	e -> normal . isNmstrt3 = unknown_isNmstrt		10793882	0		=			
ANR	10794380	MemberAccess	e -> normal . isNmstrt3		10793882	0					
ANR	10794381	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794382	Identifier	e		10793882	0					
ANR	10794383	Identifier	normal		10793882	1					
ANR	10794384	Identifier	isNmstrt3		10793882	1					
ANR	10794385	Identifier	unknown_isNmstrt		10793882	1					
ANR	10794386	ExpressionStatement	e -> normal . isNmstrt4 = unknown_isNmstrt	1569:4:40506:40544	10793882	5	True				
ANR	10794387	AssignmentExpression	e -> normal . isNmstrt4 = unknown_isNmstrt		10793882	0		=			
ANR	10794388	MemberAccess	e -> normal . isNmstrt4		10793882	0					
ANR	10794389	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794390	Identifier	e		10793882	0					
ANR	10794391	Identifier	normal		10793882	1					
ANR	10794392	Identifier	isNmstrt4		10793882	1					
ANR	10794393	Identifier	unknown_isNmstrt		10793882	1					
ANR	10794394	ExpressionStatement	e -> normal . isInvalid2 = unknown_isInvalid	1570:4:40550:40590	10793882	6	True				
ANR	10794395	AssignmentExpression	e -> normal . isInvalid2 = unknown_isInvalid		10793882	0		=			
ANR	10794396	MemberAccess	e -> normal . isInvalid2		10793882	0					
ANR	10794397	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794398	Identifier	e		10793882	0					
ANR	10794399	Identifier	normal		10793882	1					
ANR	10794400	Identifier	isInvalid2		10793882	1					
ANR	10794401	Identifier	unknown_isInvalid		10793882	1					
ANR	10794402	ExpressionStatement	e -> normal . isInvalid3 = unknown_isInvalid	1571:4:40596:40636	10793882	7	True				
ANR	10794403	AssignmentExpression	e -> normal . isInvalid3 = unknown_isInvalid		10793882	0		=			
ANR	10794404	MemberAccess	e -> normal . isInvalid3		10793882	0					
ANR	10794405	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794406	Identifier	e		10793882	0					
ANR	10794407	Identifier	normal		10793882	1					
ANR	10794408	Identifier	isInvalid3		10793882	1					
ANR	10794409	Identifier	unknown_isInvalid		10793882	1					
ANR	10794410	ExpressionStatement	e -> normal . isInvalid4 = unknown_isInvalid	1572:4:40642:40682	10793882	8	True				
ANR	10794411	AssignmentExpression	e -> normal . isInvalid4 = unknown_isInvalid		10793882	0		=			
ANR	10794412	MemberAccess	e -> normal . isInvalid4		10793882	0					
ANR	10794413	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794414	Identifier	e		10793882	0					
ANR	10794415	Identifier	normal		10793882	1					
ANR	10794416	Identifier	isInvalid4		10793882	1					
ANR	10794417	Identifier	unknown_isInvalid		10793882	1					
ANR	10794418	ExpressionStatement	e -> normal . enc . utf8Convert = unknown_toUtf8	1574:2:40690:40732	10793882	8	True				
ANR	10794419	AssignmentExpression	e -> normal . enc . utf8Convert = unknown_toUtf8		10793882	0		=			
ANR	10794420	MemberAccess	e -> normal . enc . utf8Convert		10793882	0					
ANR	10794421	MemberAccess	e -> normal . enc		10793882	0					
ANR	10794422	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794423	Identifier	e		10793882	0					
ANR	10794424	Identifier	normal		10793882	1					
ANR	10794425	Identifier	enc		10793882	1					
ANR	10794426	Identifier	utf8Convert		10793882	1					
ANR	10794427	Identifier	unknown_toUtf8		10793882	1					
ANR	10794428	ExpressionStatement	e -> normal . enc . utf16Convert = unknown_toUtf16	1575:2:40736:40780	10793882	9	True				
ANR	10794429	AssignmentExpression	e -> normal . enc . utf16Convert = unknown_toUtf16		10793882	0		=			
ANR	10794430	MemberAccess	e -> normal . enc . utf16Convert		10793882	0					
ANR	10794431	MemberAccess	e -> normal . enc		10793882	0					
ANR	10794432	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794433	Identifier	e		10793882	0					
ANR	10794434	Identifier	normal		10793882	1					
ANR	10794435	Identifier	enc		10793882	1					
ANR	10794436	Identifier	utf16Convert		10793882	1					
ANR	10794437	Identifier	unknown_toUtf16		10793882	1					
ANR	10794438	ReturnStatement	return & ( e -> normal . enc ) ;	1576:2:40784:40807	10793882	10	True				
ANR	10794439	UnaryOperationExpression	& ( e -> normal . enc )		10793882	0					
ANR	10794440	UnaryOperator	&		10793882	0					
ANR	10794441	MemberAccess	e -> normal . enc		10793882	1					
ANR	10794442	PtrMemberAccess	e -> normal		10793882	0					
ANR	10794443	Identifier	e		10793882	0					
ANR	10794444	Identifier	normal		10793882	1					
ANR	10794445	Identifier	enc		10793882	1					
ANR	10794446	ReturnType	ENCODING *		10793882	1					
ANR	10794447	Identifier	XmlInitUnknownEncoding		10793882	2					
ANR	10794448	ParameterList	"void * mem , int * table , CONVERTER convert , void * userData"		10793882	3					
ANR	10794449	Parameter	void * mem	1498:23:38296:38304	10793882	0	True				
ANR	10794450	ParameterType	void *		10793882	0					
ANR	10794451	Identifier	mem		10793882	1					
ANR	10794452	Parameter	int * table	1499:23:38330:38339	10793882	1	True				
ANR	10794453	ParameterType	int *		10793882	0					
ANR	10794454	Identifier	table		10793882	1					
ANR	10794455	Parameter	CONVERTER convert	1500:23:38365:38381	10793882	2	True				
ANR	10794456	ParameterType	CONVERTER		10793882	0					
ANR	10794457	Identifier	convert		10793882	1					
ANR	10794458	Parameter	void * userData	1501:23:38407:38420	10793882	3	True				
ANR	10794459	ParameterType	void *		10793882	0					
ANR	10794460	Identifier	userData		10793882	1					
ANR	10794461	CFGEntryNode	ENTRY		10793882		True				
ANR	10794462	CFGExitNode	EXIT		10793882		True				
ANR	10794463	Symbol	userData		10793882						
ANR	10794464	Symbol	UCS2_GET_NAMING		10793882						
ANR	10794465	Symbol	* latin1_encoding		10793882						
ANR	10794466	Symbol	convert		10793882						
ANR	10794467	Symbol	e -> normal . isInvalid3		10793882						
ANR	10794468	Symbol	e -> normal . isInvalid2		10793882						
ANR	10794469	Symbol	* * e -> utf8		10793882						
ANR	10794470	Symbol	unknown_isNmstrt		10793882						
ANR	10794471	Symbol	e -> normal . isInvalid4		10793882						
ANR	10794472	Symbol	e -> normal . enc . utf16Convert		10793882						
ANR	10794473	Symbol	e -> normal . type		10793882						
ANR	10794474	Symbol	e -> utf16		10793882						
ANR	10794475	Symbol	e -> normal . enc . utf8Convert		10793882						
ANR	10794476	Symbol	nmstrtPages		10793882						
ANR	10794477	Symbol	unknown_toUtf8		10793882						
ANR	10794478	Symbol	e -> utf8		10793882						
ANR	10794479	Symbol	* * i		10793882						
ANR	10794480	Symbol	XmlUtf8Encode		10793882						
ANR	10794481	Symbol	& e -> normal . enc		10793882						
ANR	10794482	Symbol	e -> normal . enc		10793882						
ANR	10794483	Symbol	* * e		10793882						
ANR	10794484	Symbol	latin1_encoding		10793882						
ANR	10794485	Symbol	* table		10793882						
ANR	10794486	Symbol	& latin1_encoding		10793882						
ANR	10794487	Symbol	BT_LEAD2		10793882						
ANR	10794488	Symbol	& e -> normal		10793882						
ANR	10794489	Symbol	* e -> utf16		10793882						
ANR	10794490	Symbol	BT_NONXML		10793882						
ANR	10794491	Symbol	* * * e		10793882						
ANR	10794492	Symbol	* mem		10793882						
ANR	10794493	Symbol	* e -> normal		10793882						
ANR	10794494	Symbol	unknown_isName		10793882						
ANR	10794495	Symbol	unknown_isInvalid		10793882						
ANR	10794496	Symbol	BT_NAME		10793882						
ANR	10794497	Symbol	checkCharRefNumber		10793882						
ANR	10794498	Symbol	unknown_toUtf16		10793882						
ANR	10794499	Symbol	mem		10793882						
ANR	10794500	Symbol	namePages		10793882						
ANR	10794501	Symbol	* latin1_encoding . type		10793882						
ANR	10794502	Symbol	* e -> utf8		10793882						
ANR	10794503	Symbol	e -> convert		10793882						
ANR	10794504	Symbol	BT_NMSTRT		10793882						
ANR	10794505	Symbol	table		10793882						
ANR	10794506	Symbol	BT_MALFORM		10793882						
ANR	10794507	Symbol	e -> normal . isName2		10793882						
ANR	10794508	Symbol	c		10793882						
ANR	10794509	Symbol	e -> normal . isName3		10793882						
ANR	10794510	Symbol	e		10793882						
ANR	10794511	Symbol	* e -> normal . type		10793882						
ANR	10794512	Symbol	e -> normal . isNmstrt3		10793882						
ANR	10794513	Symbol	e -> normal . isNmstrt4		10793882						
ANR	10794514	Symbol	i		10793882						
ANR	10794515	Symbol	e -> normal . isName4		10793882						
ANR	10794516	Symbol	* c		10793882						
ANR	10794517	Symbol	e -> userData		10793882						
ANR	10794518	Symbol	* e		10793882						
ANR	10794519	Symbol	* i		10793882						
ANR	10794520	Symbol	BT_OTHER		10793882						
ANR	10794521	Symbol	latin1_encoding . type		10793882						
ANR	10794522	Symbol	e -> normal . isNmstrt2		10793882						
ANR	10794523	Symbol	e -> normal		10793882						
ANR	10794524	ClassDef	<unnamed>	1581:0:40903:41080							
ANR	10794525	DeclStmt									
ANR	10794526	Decl							const char	const char [ ]	KW_ISO_8859_1
ANR	10794527	DeclStmt									
ANR	10794528	Decl							const char	const char [ ]	KW_US_ASCII
ANR	10794529	DeclStmt									
ANR	10794530	Decl							const char	const char [ ]	KW_UTF_8
ANR	10794531	DeclStmt									
ANR	10794532	Decl							const char	const char [ ]	KW_UTF_16
ANR	10794533	DeclStmt									
ANR	10794534	Decl							const char	const char [ ]	KW_UTF_16BE
ANR	10794535	DeclStmt									
ANR	10794536	Decl							const char	const char [ ]	KW_UTF_16LE
ANR	10794537	Function	getEncodingIndex	1616:0:41800:42214							
ANR	10794538	FunctionDef	getEncodingIndex (const char * name)		10794537	0					
ANR	10794539	CompoundStatement		1618:0:41855:42214	10794537	0					
ANR	10794540	Statement	static	1619:2:41859:41864	10794537	0	True				
ANR	10794541	Statement	const	1619:9:41866:41870	10794537	1	True				
ANR	10794542	Statement	char	1619:15:41872:41875	10794537	2	True				
ANR	10794543	Statement	*	1619:20:41877:41877	10794537	3	True				
ANR	10794544	Statement	const	1619:22:41879:41883	10794537	4	True				
ANR	10794545	Statement	encodingNames	1619:28:41885:41897	10794537	5	True				
ANR	10794546	Statement	[	1619:41:41898:41898	10794537	6	True				
ANR	10794547	Statement	]	1619:42:41899:41899	10794537	7	True				
ANR	10794548	Statement	=	1619:44:41901:41901	10794537	8	True				
ANR	10794549	CompoundStatement		2:46:47:47	10794537	9					
ANR	10794550	Statement	KW_ISO_8859_1	1620:4:41909:41921	10794537	0	True				
ANR	10794551	Statement	","	1620:17:41922:41922	10794537	1	True				
ANR	10794552	Statement	KW_US_ASCII	1621:4:41928:41938	10794537	2	True				
ANR	10794553	Statement	","	1621:15:41939:41939	10794537	3	True				
ANR	10794554	Statement	KW_UTF_8	1622:4:41945:41952	10794537	4	True				
ANR	10794555	Statement	","	1622:12:41953:41953	10794537	5	True				
ANR	10794556	Statement	KW_UTF_16	1623:4:41959:41967	10794537	6	True				
ANR	10794557	Statement	","	1623:13:41968:41968	10794537	7	True				
ANR	10794558	Statement	KW_UTF_16BE	1624:4:41974:41984	10794537	8	True				
ANR	10794559	Statement	","	1624:15:41985:41985	10794537	9	True				
ANR	10794560	Statement	KW_UTF_16LE	1625:4:41991:42001	10794537	10	True				
ANR	10794561	Statement	","	1625:15:42002:42002	10794537	11	True				
ANR	10794562	ExpressionStatement		1626:3:42007:42007	10794537	10	True				
ANR	10794563	IdentifierDeclStatement	int i ;	1627:2:42011:42016	10794537	11	True				
ANR	10794564	IdentifierDecl	i		10794537	0					
ANR	10794565	IdentifierDeclType	int		10794537	0					
ANR	10794566	Identifier	i		10794537	1					
ANR	10794567	IfStatement	if ( name == NULL )		10794537	12					
ANR	10794568	Condition	name == NULL	1628:6:42024:42035	10794537	0	True				
ANR	10794569	EqualityExpression	name == NULL		10794537	0		==			
ANR	10794570	Identifier	name		10794537	0					
ANR	10794571	Identifier	NULL		10794537	1					
ANR	10794572	ReturnStatement	return NO_ENC ;	1629:4:42042:42055	10794537	1	True				
ANR	10794573	Identifier	NO_ENC		10794537	0					
ANR	10794574	ForStatement	for ( i = 0 ; i < ( int ) ( sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] ) ) ; i ++ )		10794537	13					
ANR	10794575	ForInit	i = 0 ;	1630:7:42064:42069	10794537	0	True				
ANR	10794576	AssignmentExpression	i = 0		10794537	0		=			
ANR	10794577	Identifier	i		10794537	0					
ANR	10794578	PrimaryExpression	0		10794537	1					
ANR	10794579	Condition	i < ( int ) ( sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] ) )	1630:14:42071:42127	10794537	1	True				
ANR	10794580	RelationalExpression	i < ( int ) ( sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] ) )		10794537	0		<			
ANR	10794581	Identifier	i		10794537	0					
ANR	10794582	CastExpression	( int ) ( sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] ) )		10794537	1					
ANR	10794583	CastTarget	int		10794537	0					
ANR	10794584	MultiplicativeExpression	sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] )		10794537	1		/			
ANR	10794585	SizeofExpression	sizeof ( encodingNames )		10794537	0					
ANR	10794586	Sizeof	sizeof		10794537	0					
ANR	10794587	SizeofOperand	encodingNames		10794537	1					
ANR	10794588	SizeofExpression	sizeof ( encodingNames [ 0 ] )		10794537	1					
ANR	10794589	Sizeof	sizeof		10794537	0					
ANR	10794590	ArrayIndexing	encodingNames [ 0 ]		10794537	1					
ANR	10794591	Identifier	encodingNames		10794537	0					
ANR	10794592	PrimaryExpression	0		10794537	1					
ANR	10794593	PostIncDecOperationExpression	i ++	1630:73:42130:42132	10794537	2	True				
ANR	10794594	Identifier	i		10794537	0					
ANR	10794595	IncDec	++		10794537	1					
ANR	10794596	IfStatement	"if ( streqci ( name , encodingNames [ i ] ) )"		10794537	3					
ANR	10794597	Condition	"streqci ( name , encodingNames [ i ] )"	1631:8:42143:42173	10794537	0	True				
ANR	10794598	CallExpression	"streqci ( name , encodingNames [ i ] )"		10794537	0					
ANR	10794599	Callee	streqci		10794537	0					
ANR	10794600	Identifier	streqci		10794537	0					
ANR	10794601	ArgumentList	name		10794537	1					
ANR	10794602	Argument	name		10794537	0					
ANR	10794603	Identifier	name		10794537	0					
ANR	10794604	Argument	encodingNames [ i ]		10794537	1					
ANR	10794605	ArrayIndexing	encodingNames [ i ]		10794537	0					
ANR	10794606	Identifier	encodingNames		10794537	0					
ANR	10794607	Identifier	i		10794537	1					
ANR	10794608	ReturnStatement	return i ;	1632:6:42182:42190	10794537	1	True				
ANR	10794609	Identifier	i		10794537	0					
ANR	10794610	ReturnStatement	return UNKNOWN_ENC ;	1633:2:42194:42212	10794537	14	True				
ANR	10794611	Identifier	UNKNOWN_ENC		10794537	0					
ANR	10794612	ReturnType	static int FASTCALL		10794537	1					
ANR	10794613	Identifier	getEncodingIndex		10794537	2					
ANR	10794614	ParameterList	const char * name		10794537	3					
ANR	10794615	Parameter	const char * name	1617:17:41837:41852	10794537	0	True				
ANR	10794616	ParameterType	const char *		10794537	0					
ANR	10794617	Identifier	name		10794537	1					
ANR	10794618	CFGEntryNode	ENTRY		10794537		True				
ANR	10794619	CFGExitNode	EXIT		10794537		True				
ANR	10794620	Symbol	NULL		10794537						
ANR	10794621	Symbol	NO_ENC		10794537						
ANR	10794622	Symbol	* i		10794537						
ANR	10794623	Symbol	UNKNOWN_ENC		10794537						
ANR	10794624	Symbol	encodingNames		10794537						
ANR	10794625	Symbol	* encodingNames		10794537						
ANR	10794626	Symbol	streqci		10794537						
ANR	10794627	Symbol	name		10794537						
ANR	10794628	Symbol	i		10794537						
ANR	10794629	DeclStmt									
ANR	10794630	Decl							const ENCODING	const ENCODING * *	encPtr
ANR	10794631	DeclStmt									
ANR	10794632	Decl							int	int	e
ANR	10794633	Function	XmlInitUnknownEncodingNS	1789:1:46988:47365							
ANR	10794634	FunctionDef	"XmlInitUnknownEncodingNS (void * mem , int * table , CONVERTER convert , void * userData)"		10794633	0					
ANR	10794635	CompoundStatement		1799:0:47198:47365	10794633	0					
ANR	10794636	IdentifierDeclStatement	"ENCODING * enc = XmlInitUnknownEncoding ( mem , table , convert , userData ) ;"	1800:2:47202:47271	10794633	0	True				
ANR	10794637	IdentifierDecl	"* enc = XmlInitUnknownEncoding ( mem , table , convert , userData )"		10794633	0					
ANR	10794638	IdentifierDeclType	ENCODING *		10794633	0					
ANR	10794639	Identifier	enc		10794633	1					
ANR	10794640	AssignmentExpression	"* enc = XmlInitUnknownEncoding ( mem , table , convert , userData )"		10794633	2		=			
ANR	10794641	Identifier	enc		10794633	0					
ANR	10794642	CallExpression	"XmlInitUnknownEncoding ( mem , table , convert , userData )"		10794633	1					
ANR	10794643	Callee	XmlInitUnknownEncoding		10794633	0					
ANR	10794644	Identifier	XmlInitUnknownEncoding		10794633	0					
ANR	10794645	ArgumentList	mem		10794633	1					
ANR	10794646	Argument	mem		10794633	0					
ANR	10794647	Identifier	mem		10794633	0					
ANR	10794648	Argument	table		10794633	1					
ANR	10794649	Identifier	table		10794633	0					
ANR	10794650	Argument	convert		10794633	2					
ANR	10794651	Identifier	convert		10794633	0					
ANR	10794652	Argument	userData		10794633	3					
ANR	10794653	Identifier	userData		10794633	0					
ANR	10794654	IfStatement	if ( enc )		10794633	1					
ANR	10794655	Condition	enc	1801:6:47279:47281	10794633	0	True				
ANR	10794656	Identifier	enc		10794633	0					
ANR	10794657	ExpressionStatement	( ( struct normal_encoding * ) enc ) -> type [ ASCII_COLON ] = BT_COLON	1802:4:47288:47349	10794633	1	True				
ANR	10794658	AssignmentExpression	( ( struct normal_encoding * ) enc ) -> type [ ASCII_COLON ] = BT_COLON		10794633	0		=			
ANR	10794659	ArrayIndexing	( ( struct normal_encoding * ) enc ) -> type [ ASCII_COLON ]		10794633	0					
ANR	10794660	PtrMemberAccess	( ( struct normal_encoding * ) enc ) -> type		10794633	0					
ANR	10794661	CastExpression	( struct normal_encoding * ) enc		10794633	0					
ANR	10794662	CastTarget	struct normal_encoding *		10794633	0					
ANR	10794663	Identifier	enc		10794633	1					
ANR	10794664	Identifier	type		10794633	1					
ANR	10794665	Identifier	ASCII_COLON		10794633	1					
ANR	10794666	Identifier	BT_COLON		10794633	1					
ANR	10794667	ReturnStatement	return enc ;	1803:2:47353:47363	10794633	2	True				
ANR	10794668	Identifier	enc		10794633	0					
ANR	10794669	ReturnType	undef XML_TOK_NS_C undef NS undef ns ENCODING *		10794633	1					
ANR	10794670	Identifier	XmlInitUnknownEncodingNS		10794633	2					
ANR	10794671	ParameterList	"void * mem , int * table , CONVERTER convert , void * userData"		10794633	3					
ANR	10794672	Parameter	void * mem	1795:25:47065:47073	10794633	0	True				
ANR	10794673	ParameterType	void *		10794633	0					
ANR	10794674	Identifier	mem		10794633	1					
ANR	10794675	Parameter	int * table	1796:25:47101:47110	10794633	1	True				
ANR	10794676	ParameterType	int *		10794633	0					
ANR	10794677	Identifier	table		10794633	1					
ANR	10794678	Parameter	CONVERTER convert	1797:25:47138:47154	10794633	2	True				
ANR	10794679	ParameterType	CONVERTER		10794633	0					
ANR	10794680	Identifier	convert		10794633	1					
ANR	10794681	Parameter	void * userData	1798:25:47182:47195	10794633	3	True				
ANR	10794682	ParameterType	void *		10794633	0					
ANR	10794683	Identifier	userData		10794633	1					
ANR	10794684	CFGEntryNode	ENTRY		10794633		True				
ANR	10794685	CFGExitNode	EXIT		10794633		True				
ANR	10794686	Symbol	XmlInitUnknownEncoding		10794633						
ANR	10794687	Symbol	userData		10794633						
ANR	10794688	Symbol	( ( struct normal_encoding * ) enc ) -> type		10794633						
ANR	10794689	Symbol	* ( ( struct normal_encoding * ) enc ) -> type		10794633						
ANR	10794690	Symbol	ASCII_COLON		10794633						
ANR	10794691	Symbol	convert		10794633						
ANR	10794692	Symbol	* * enc		10794633						
ANR	10794693	Symbol	mem		10794633						
ANR	10794694	Symbol	* ASCII_COLON		10794633						
ANR	10794695	Symbol	BT_COLON		10794633						
ANR	10794696	Symbol	enc		10794633						
ANR	10794697	Symbol	* enc		10794633						
ANR	10794698	Symbol	table		10794633						
