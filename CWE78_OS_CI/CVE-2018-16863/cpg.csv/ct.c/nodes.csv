command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2012833	File	data/converged/CVE-2018-16863_ghostpdl/ct.c								
ANR	2012834	Function	getTok	35:0:1608:2815							
ANR	2012835	FunctionDef	getTok (const char * * pp)		2012834	0					
ANR	2012836	CompoundStatement		37:0:1652:2815	2012834	0					
ANR	2012837	ClassDefStatement	"enum { inAtom , inString , init , inComment }"	38:2:1656:1697	2012834	0	True				
ANR	2012838	ExpressionStatement		38:44:1698:1698	2012834	1	True				
ANR	2012839	IdentifierDeclStatement	int state = init ;	39:2:1702:1718	2012834	2	True				
ANR	2012840	IdentifierDecl	state = init		2012834	0					
ANR	2012841	IdentifierDeclType	int		2012834	0					
ANR	2012842	Identifier	state		2012834	1					
ANR	2012843	AssignmentExpression	state = init		2012834	2		=			
ANR	2012844	Identifier	init		2012834	0					
ANR	2012845	Identifier	init		2012834	1					
ANR	2012846	IdentifierDeclStatement	const char * tokStart = 0 ;	40:2:1722:1746	2012834	3	True				
ANR	2012847	IdentifierDecl	* tokStart = 0		2012834	0					
ANR	2012848	IdentifierDeclType	const char *		2012834	0					
ANR	2012849	Identifier	tokStart		2012834	1					
ANR	2012850	AssignmentExpression	* tokStart = 0		2012834	2		=			
ANR	2012851	Identifier	tokStart		2012834	0					
ANR	2012852	PrimaryExpression	0		2012834	1					
ANR	2012853	ForStatement	for ( ; ; )		2012834	4					
ANR	2012854	CompoundStatement		5:11:106:106	2012834	0					
ANR	2012855	SwitchStatement	switch ( * * pp )		2012834	0					
ANR	2012856	Condition	* * pp	42:12:1773:1776	2012834	0	True				
ANR	2012857	UnaryOperationExpression	* * pp		2012834	0					
ANR	2012858	UnaryOperator	*		2012834	0					
ANR	2012859	UnaryOperationExpression	* pp		2012834	1					
ANR	2012860	UnaryOperator	*		2012834	0					
ANR	2012861	Identifier	pp		2012834	1					
ANR	2012862	CompoundStatement		6:18:126:126	2012834	1					
ANR	2012863	Label	case '\\0' :	43:4:1785:1794	2012834	0	True				
ANR	2012864	ReturnStatement	return 0 ;	44:6:1802:1810	2012834	1	True				
ANR	2012865	PrimaryExpression	0		2012834	0					
ANR	2012866	Label	case ' ' :	45:4:1816:1824	2012834	2	True				
ANR	2012867	Label	case '\\r' :	46:4:1830:1839	2012834	3	True				
ANR	2012868	Label	case '\\t' :	47:4:1845:1854	2012834	4	True				
ANR	2012869	Label	case '\\n' :	48:4:1860:1869	2012834	5	True				
ANR	2012870	IfStatement	if ( state == inAtom )		2012834	6					
ANR	2012871	Condition	state == inAtom	49:10:1881:1895	2012834	0	True				
ANR	2012872	EqualityExpression	state == inAtom		2012834	0		==			
ANR	2012873	Identifier	state		2012834	0					
ANR	2012874	Identifier	inAtom		2012834	1					
ANR	2012875	ReturnStatement	return tokStart ;	50:8:1906:1921	2012834	1	True				
ANR	2012876	Identifier	tokStart		2012834	0					
ANR	2012877	BreakStatement	break ;	51:6:1929:1934	2012834	7	True				
ANR	2012878	Label	case '(' :	52:4:1940:1948	2012834	8	True				
ANR	2012879	IfStatement	if ( state == inAtom )		2012834	9					
ANR	2012880	Condition	state == inAtom	53:10:1960:1974	2012834	0	True				
ANR	2012881	EqualityExpression	state == inAtom		2012834	0		==			
ANR	2012882	Identifier	state		2012834	0					
ANR	2012883	Identifier	inAtom		2012834	1					
ANR	2012884	ReturnStatement	return tokStart ;	54:8:1985:2000	2012834	1	True				
ANR	2012885	Identifier	tokStart		2012834	0					
ANR	2012886	IfStatement	if ( state != inString )		2012834	10					
ANR	2012887	Condition	state != inString	55:10:2012:2028	2012834	0	True				
ANR	2012888	EqualityExpression	state != inString		2012834	0		!=			
ANR	2012889	Identifier	state		2012834	0					
ANR	2012890	Identifier	inString		2012834	1					
ANR	2012891	ExpressionStatement	state ++	56:8:2039:2046	2012834	1	True				
ANR	2012892	PostIncDecOperationExpression	state ++		2012834	0					
ANR	2012893	Identifier	state		2012834	0					
ANR	2012894	IncDec	++		2012834	1					
ANR	2012895	BreakStatement	break ;	57:6:2054:2059	2012834	11	True				
ANR	2012896	Label	case ')' :	58:4:2065:2073	2012834	12	True				
ANR	2012897	IfStatement	if ( state > init )		2012834	13					
ANR	2012898	Condition	state > init	59:10:2085:2096	2012834	0	True				
ANR	2012899	RelationalExpression	state > init		2012834	0		>			
ANR	2012900	Identifier	state		2012834	0					
ANR	2012901	Identifier	init		2012834	1					
ANR	2012902	ExpressionStatement	-- state	60:8:2107:2114	2012834	1	True				
ANR	2012903	UnaryExpression	-- state		2012834	0					
ANR	2012904	IncDec	--		2012834	0					
ANR	2012905	Identifier	state		2012834	1					
ANR	2012906	ElseStatement	else		2012834	0					
ANR	2012907	IfStatement	if ( state != inString )		2012834	0					
ANR	2012908	Condition	state != inString	61:15:2131:2147	2012834	0	True				
ANR	2012909	EqualityExpression	state != inString		2012834	0		!=			
ANR	2012910	Identifier	state		2012834	0					
ANR	2012911	Identifier	inString		2012834	1					
ANR	2012912	ReturnStatement	return 0 ;	62:8:2158:2166	2012834	1	True				
ANR	2012913	PrimaryExpression	0		2012834	0					
ANR	2012914	BreakStatement	break ;	63:6:2174:2179	2012834	14	True				
ANR	2012915	Label	case ';' :	64:4:2185:2193	2012834	15	True				
ANR	2012916	Label	case '/' :	65:4:2199:2207	2012834	16	True				
ANR	2012917	Label	case '=' :	66:4:2213:2221	2012834	17	True				
ANR	2012918	IfStatement	if ( state == inAtom )		2012834	18					
ANR	2012919	Condition	state == inAtom	67:10:2233:2247	2012834	0	True				
ANR	2012920	EqualityExpression	state == inAtom		2012834	0		==			
ANR	2012921	Identifier	state		2012834	0					
ANR	2012922	Identifier	inAtom		2012834	1					
ANR	2012923	ReturnStatement	return tokStart ;	68:8:2258:2273	2012834	1	True				
ANR	2012924	Identifier	tokStart		2012834	0					
ANR	2012925	IfStatement	if ( state == init )		2012834	19					
ANR	2012926	Condition	state == init	69:10:2285:2297	2012834	0	True				
ANR	2012927	EqualityExpression	state == init		2012834	0		==			
ANR	2012928	Identifier	state		2012834	0					
ANR	2012929	Identifier	init		2012834	1					
ANR	2012930	ReturnStatement	return ( * pp ) ++ ;	70:8:2308:2322	2012834	1	True				
ANR	2012931	PostIncDecOperationExpression	( * pp ) ++		2012834	0					
ANR	2012932	UnaryOperationExpression	* pp		2012834	0					
ANR	2012933	UnaryOperator	*		2012834	0					
ANR	2012934	Identifier	pp		2012834	1					
ANR	2012935	IncDec	++		2012834	1					
ANR	2012936	BreakStatement	break ;	71:6:2330:2335	2012834	20	True				
ANR	2012937	Label	case '\\\\' :	72:4:2341:2350	2012834	21	True				
ANR	2012938	ExpressionStatement	++ * pp	73:6:2358:2363	2012834	22	True				
ANR	2012939	UnaryExpression	++ * pp		2012834	0					
ANR	2012940	IncDec	++		2012834	0					
ANR	2012941	UnaryOperationExpression	* pp		2012834	1					
ANR	2012942	UnaryOperator	*		2012834	0					
ANR	2012943	Identifier	pp		2012834	1					
ANR	2012944	IfStatement	if ( * * pp == '\\0' )		2012834	23					
ANR	2012945	Condition	* * pp == '\\0'	74:10:2375:2386	2012834	0	True				
ANR	2012946	EqualityExpression	* * pp == '\\0'		2012834	0		==			
ANR	2012947	UnaryOperationExpression	* * pp		2012834	0					
ANR	2012948	UnaryOperator	*		2012834	0					
ANR	2012949	UnaryOperationExpression	* pp		2012834	1					
ANR	2012950	UnaryOperator	*		2012834	0					
ANR	2012951	Identifier	pp		2012834	1					
ANR	2012952	PrimaryExpression	'\\0'		2012834	1					
ANR	2012953	ReturnStatement	return 0 ;	75:8:2397:2405	2012834	1	True				
ANR	2012954	PrimaryExpression	0		2012834	0					
ANR	2012955	BreakStatement	break ;	76:6:2413:2418	2012834	24	True				
ANR	2012956	Label	"case '""' :"	77:4:2424:2432	2012834	25	True				
ANR	2012957	SwitchStatement	switch ( state )		2012834	26					
ANR	2012958	Condition	state	78:14:2448:2452	2012834	0	True				
ANR	2012959	Identifier	state		2012834	0					
ANR	2012960	CompoundStatement		42:21:802:802	2012834	1					
ANR	2012961	Label	case inString :	79:6:2463:2476	2012834	0	True				
ANR	2012962	Identifier	inString		2012834	0					
ANR	2012963	ExpressionStatement	++ * pp	80:8:2486:2491	2012834	1	True				
ANR	2012964	UnaryExpression	++ * pp		2012834	0					
ANR	2012965	IncDec	++		2012834	0					
ANR	2012966	UnaryOperationExpression	* pp		2012834	1					
ANR	2012967	UnaryOperator	*		2012834	0					
ANR	2012968	Identifier	pp		2012834	1					
ANR	2012969	ReturnStatement	return tokStart ;	81:8:2501:2516	2012834	2	True				
ANR	2012970	Identifier	tokStart		2012834	0					
ANR	2012971	Label	case inAtom :	82:6:2524:2535	2012834	3	True				
ANR	2012972	Identifier	inAtom		2012834	0					
ANR	2012973	ReturnStatement	return tokStart ;	83:8:2545:2560	2012834	4	True				
ANR	2012974	Identifier	tokStart		2012834	0					
ANR	2012975	Label	case init :	84:6:2568:2577	2012834	5	True				
ANR	2012976	Identifier	init		2012834	0					
ANR	2012977	ExpressionStatement	tokStart = * pp	85:8:2587:2601	2012834	6	True				
ANR	2012978	AssignmentExpression	tokStart = * pp		2012834	0		=			
ANR	2012979	Identifier	tokStart		2012834	0					
ANR	2012980	UnaryOperationExpression	* pp		2012834	1					
ANR	2012981	UnaryOperator	*		2012834	0					
ANR	2012982	Identifier	pp		2012834	1					
ANR	2012983	ExpressionStatement	state = inString	86:8:2611:2627	2012834	7	True				
ANR	2012984	AssignmentExpression	state = inString		2012834	0		=			
ANR	2012985	Identifier	state		2012834	0					
ANR	2012986	Identifier	inString		2012834	1					
ANR	2012987	BreakStatement	break ;	87:8:2637:2642	2012834	8	True				
ANR	2012988	BreakStatement	break ;	89:6:2658:2663	2012834	27	True				
ANR	2012989	Label	default :	90:4:2669:2676	2012834	28	True				
ANR	2012990	Identifier	default		2012834	0					
ANR	2012991	IfStatement	if ( state == init )		2012834	29					
ANR	2012992	Condition	state == init	91:10:2688:2700	2012834	0	True				
ANR	2012993	EqualityExpression	state == init		2012834	0		==			
ANR	2012994	Identifier	state		2012834	0					
ANR	2012995	Identifier	init		2012834	1					
ANR	2012996	CompoundStatement		55:25:1050:1050	2012834	1					
ANR	2012997	ExpressionStatement	tokStart = * pp	92:8:2713:2727	2012834	0	True				
ANR	2012998	AssignmentExpression	tokStart = * pp		2012834	0		=			
ANR	2012999	Identifier	tokStart		2012834	0					
ANR	2013000	UnaryOperationExpression	* pp		2012834	1					
ANR	2013001	UnaryOperator	*		2012834	0					
ANR	2013002	Identifier	pp		2012834	1					
ANR	2013003	ExpressionStatement	state = inAtom	93:8:2737:2751	2012834	1	True				
ANR	2013004	AssignmentExpression	state = inAtom		2012834	0		=			
ANR	2013005	Identifier	state		2012834	0					
ANR	2013006	Identifier	inAtom		2012834	1					
ANR	2013007	BreakStatement	break ;	95:6:2767:2772	2012834	30	True				
ANR	2013008	ExpressionStatement	++ * pp	97:4:2784:2789	2012834	1	True				
ANR	2013009	UnaryExpression	++ * pp		2012834	0					
ANR	2013010	IncDec	++		2012834	0					
ANR	2013011	UnaryOperationExpression	* pp		2012834	1					
ANR	2013012	UnaryOperator	*		2012834	0					
ANR	2013013	Identifier	pp		2012834	1					
ANR	2013014	ReturnType	static const char *		2012834	1					
ANR	2013015	Identifier	getTok		2012834	2					
ANR	2013016	ParameterList	const char * * pp		2012834	3					
ANR	2013017	Parameter	const char * * pp	36:7:1635:1649	2012834	0	True				
ANR	2013018	ParameterType	const char * *		2012834	0					
ANR	2013019	Identifier	pp		2012834	1					
ANR	2013020	CFGEntryNode	ENTRY		2012834		True				
ANR	2013021	CFGExitNode	EXIT		2012834		True				
ANR	2013022	InfiniteForNode	true		2012834		True				
ANR	2013023	Symbol	pp		2012834						
ANR	2013024	Symbol	init		2012834						
ANR	2013025	Symbol	* pp		2012834						
ANR	2013026	Symbol	inString		2012834						
ANR	2013027	Symbol	tokStart		2012834						
ANR	2013028	Symbol	state		2012834						
ANR	2013029	Symbol	inAtom		2012834						
ANR	2013030	Symbol	* * pp		2012834						
ANR	2013031	Function	matchkey	104:0:2853:3090							
ANR	2013032	FunctionDef	"matchkey (const char * start , const char * end , const char * key)"		2013031	0					
ANR	2013033	CompoundStatement		106:0:2926:3090	2013031	0					
ANR	2013034	IfStatement	if ( ! start )		2013031	0					
ANR	2013035	Condition	! start	107:6:2934:2939	2013031	0	True				
ANR	2013036	UnaryOperationExpression	! start		2013031	0					
ANR	2013037	UnaryOperator	!		2013031	0					
ANR	2013038	Identifier	start		2013031	1					
ANR	2013039	ReturnStatement	return 0 ;	108:4:2946:2954	2013031	1	True				
ANR	2013040	PrimaryExpression	0		2013031	0					
ANR	2013041	ForStatement	"for ( ; start != end ; start ++ , key ++ )"		2013031	1					
ANR	2013042	Condition	start != end	109:9:2965:2976	2013031	0	True				
ANR	2013043	EqualityExpression	start != end		2013031	0		!=			
ANR	2013044	Identifier	start		2013031	0					
ANR	2013045	Identifier	end		2013031	1					
ANR	2013046	Expression	"start ++ , key ++"	109:23:2979:2992	2013031	1	True				
ANR	2013047	PostIncDecOperationExpression	start ++		2013031	0					
ANR	2013048	Identifier	start		2013031	0					
ANR	2013049	IncDec	++		2013031	1					
ANR	2013050	PostIncDecOperationExpression	key ++		2013031	1					
ANR	2013051	Identifier	key		2013031	0					
ANR	2013052	IncDec	++		2013031	1					
ANR	2013053	IfStatement	if ( * start != * key && * start != 'A' + ( * key - 'a' ) )		2013031	2					
ANR	2013054	Condition	* start != * key && * start != 'A' + ( * key - 'a' )	110:8:3003:3048	2013031	0	True				
ANR	2013055	AndExpression	* start != * key && * start != 'A' + ( * key - 'a' )		2013031	0		&&			
ANR	2013056	EqualityExpression	* start != * key		2013031	0		!=			
ANR	2013057	UnaryOperationExpression	* start		2013031	0					
ANR	2013058	UnaryOperator	*		2013031	0					
ANR	2013059	Identifier	start		2013031	1					
ANR	2013060	UnaryOperationExpression	* key		2013031	1					
ANR	2013061	UnaryOperator	*		2013031	0					
ANR	2013062	Identifier	key		2013031	1					
ANR	2013063	EqualityExpression	* start != 'A' + ( * key - 'a' )		2013031	1		!=			
ANR	2013064	UnaryOperationExpression	* start		2013031	0					
ANR	2013065	UnaryOperator	*		2013031	0					
ANR	2013066	Identifier	start		2013031	1					
ANR	2013067	AdditiveExpression	'A' + ( * key - 'a' )		2013031	1		+			
ANR	2013068	PrimaryExpression	'A'		2013031	0					
ANR	2013069	AdditiveExpression	* key - 'a'		2013031	1		-			
ANR	2013070	UnaryOperationExpression	* key		2013031	0					
ANR	2013071	UnaryOperator	*		2013031	0					
ANR	2013072	Identifier	key		2013031	1					
ANR	2013073	PrimaryExpression	'a'		2013031	1					
ANR	2013074	ReturnStatement	return 0 ;	111:6:3057:3065	2013031	1	True				
ANR	2013075	PrimaryExpression	0		2013031	0					
ANR	2013076	ReturnStatement	return * key == '\\0' ;	112:2:3069:3088	2013031	2	True				
ANR	2013077	EqualityExpression	* key == '\\0'		2013031	0		==			
ANR	2013078	UnaryOperationExpression	* key		2013031	0					
ANR	2013079	UnaryOperator	*		2013031	0					
ANR	2013080	Identifier	key		2013031	1					
ANR	2013081	PrimaryExpression	'\\0'		2013031	1					
ANR	2013082	ReturnType	static int		2013031	1					
ANR	2013083	Identifier	matchkey		2013031	2					
ANR	2013084	ParameterList	"const char * start , const char * end , const char * key"		2013031	3					
ANR	2013085	Parameter	const char * start	105:9:2873:2889	2013031	0	True				
ANR	2013086	ParameterType	const char *		2013031	0					
ANR	2013087	Identifier	start		2013031	1					
ANR	2013088	Parameter	const char * end	105:28:2892:2906	2013031	1	True				
ANR	2013089	ParameterType	const char *		2013031	0					
ANR	2013090	Identifier	end		2013031	1					
ANR	2013091	Parameter	const char * key	105:45:2909:2923	2013031	2	True				
ANR	2013092	ParameterType	const char *		2013031	0					
ANR	2013093	Identifier	key		2013031	1					
ANR	2013094	CFGEntryNode	ENTRY		2013031		True				
ANR	2013095	CFGExitNode	EXIT		2013031		True				
ANR	2013096	Symbol	* start		2013031						
ANR	2013097	Symbol	start		2013031						
ANR	2013098	Symbol	* key		2013031						
ANR	2013099	Symbol	end		2013031						
ANR	2013100	Symbol	key		2013031						
ANR	2013101	Function	getXMLCharset	115:0:3093:4352							
ANR	2013102	FunctionDef	"getXMLCharset (const char * buf , char * charset)"		2013101	0					
ANR	2013103	CompoundStatement		117:0:3144:4352	2013101	0					
ANR	2013104	IdentifierDeclStatement	"const char * next , * p ;"	118:2:3148:3168	2013101	0	True				
ANR	2013105	IdentifierDecl	* next		2013101	0					
ANR	2013106	IdentifierDeclType	const char *		2013101	0					
ANR	2013107	Identifier	next		2013101	1					
ANR	2013108	IdentifierDecl	* p		2013101	1					
ANR	2013109	IdentifierDeclType	const char *		2013101	0					
ANR	2013110	Identifier	p		2013101	1					
ANR	2013111	ExpressionStatement	charset [ 0 ] = '\\0'	120:2:3173:3190	2013101	1	True				
ANR	2013112	AssignmentExpression	charset [ 0 ] = '\\0'		2013101	0		=			
ANR	2013113	ArrayIndexing	charset [ 0 ]		2013101	0					
ANR	2013114	Identifier	charset		2013101	0					
ANR	2013115	PrimaryExpression	0		2013101	1					
ANR	2013116	PrimaryExpression	'\\0'		2013101	1					
ANR	2013117	ExpressionStatement	next = buf	121:2:3194:3204	2013101	2	True				
ANR	2013118	AssignmentExpression	next = buf		2013101	0		=			
ANR	2013119	Identifier	next		2013101	0					
ANR	2013120	Identifier	buf		2013101	1					
ANR	2013121	ExpressionStatement	p = getTok ( & next )	122:2:3208:3225	2013101	3	True				
ANR	2013122	AssignmentExpression	p = getTok ( & next )		2013101	0		=			
ANR	2013123	Identifier	p		2013101	0					
ANR	2013124	CallExpression	getTok ( & next )		2013101	1					
ANR	2013125	Callee	getTok		2013101	0					
ANR	2013126	Identifier	getTok		2013101	0					
ANR	2013127	ArgumentList	& next		2013101	1					
ANR	2013128	Argument	& next		2013101	0					
ANR	2013129	UnaryOperationExpression	& next		2013101	0					
ANR	2013130	UnaryOperator	&		2013101	0					
ANR	2013131	Identifier	next		2013101	1					
ANR	2013132	IfStatement	"if ( matchkey ( p , next , ""text"" ) )"		2013101	4					
ANR	2013133	Condition	"matchkey ( p , next , ""text"" )"	123:6:3233:3257	2013101	0	True				
ANR	2013134	CallExpression	"matchkey ( p , next , ""text"" )"		2013101	0					
ANR	2013135	Callee	matchkey		2013101	0					
ANR	2013136	Identifier	matchkey		2013101	0					
ANR	2013137	ArgumentList	p		2013101	1					
ANR	2013138	Argument	p		2013101	0					
ANR	2013139	Identifier	p		2013101	0					
ANR	2013140	Argument	next		2013101	1					
ANR	2013141	Identifier	next		2013101	0					
ANR	2013142	Argument	"""text"""		2013101	2					
ANR	2013143	PrimaryExpression	"""text"""		2013101	0					
ANR	2013144	ExpressionStatement	"strcpy ( charset , ""us-ascii"" )"	124:4:3264:3291	2013101	1	True				
ANR	2013145	CallExpression	"strcpy ( charset , ""us-ascii"" )"		2013101	0					
ANR	2013146	Callee	strcpy		2013101	0					
ANR	2013147	Identifier	strcpy		2013101	0					
ANR	2013148	ArgumentList	charset		2013101	1					
ANR	2013149	Argument	charset		2013101	0					
ANR	2013150	Identifier	charset		2013101	0					
ANR	2013151	Argument	"""us-ascii"""		2013101	1					
ANR	2013152	PrimaryExpression	"""us-ascii"""		2013101	0					
ANR	2013153	ElseStatement	else		2013101	0					
ANR	2013154	IfStatement	"if ( ! matchkey ( p , next , ""application"" ) )"		2013101	0					
ANR	2013155	Condition	"! matchkey ( p , next , ""application"" )"	125:11:3304:3336	2013101	0	True				
ANR	2013156	UnaryOperationExpression	"! matchkey ( p , next , ""application"" )"		2013101	0					
ANR	2013157	UnaryOperator	!		2013101	0					
ANR	2013158	CallExpression	"matchkey ( p , next , ""application"" )"		2013101	1					
ANR	2013159	Callee	matchkey		2013101	0					
ANR	2013160	Identifier	matchkey		2013101	0					
ANR	2013161	ArgumentList	p		2013101	1					
ANR	2013162	Argument	p		2013101	0					
ANR	2013163	Identifier	p		2013101	0					
ANR	2013164	Argument	next		2013101	1					
ANR	2013165	Identifier	next		2013101	0					
ANR	2013166	Argument	"""application"""		2013101	2					
ANR	2013167	PrimaryExpression	"""application"""		2013101	0					
ANR	2013168	ReturnStatement	return ;	126:4:3343:3349	2013101	1	True				
ANR	2013169	ExpressionStatement	p = getTok ( & next )	127:2:3353:3370	2013101	5	True				
ANR	2013170	AssignmentExpression	p = getTok ( & next )		2013101	0		=			
ANR	2013171	Identifier	p		2013101	0					
ANR	2013172	CallExpression	getTok ( & next )		2013101	1					
ANR	2013173	Callee	getTok		2013101	0					
ANR	2013174	Identifier	getTok		2013101	0					
ANR	2013175	ArgumentList	& next		2013101	1					
ANR	2013176	Argument	& next		2013101	0					
ANR	2013177	UnaryOperationExpression	& next		2013101	0					
ANR	2013178	UnaryOperator	&		2013101	0					
ANR	2013179	Identifier	next		2013101	1					
ANR	2013180	IfStatement	if ( ! p || * p != '/' )		2013101	6					
ANR	2013181	Condition	! p || * p != '/'	128:6:3378:3392	2013101	0	True				
ANR	2013182	OrExpression	! p || * p != '/'		2013101	0		||			
ANR	2013183	UnaryOperationExpression	! p		2013101	0					
ANR	2013184	UnaryOperator	!		2013101	0					
ANR	2013185	Identifier	p		2013101	1					
ANR	2013186	EqualityExpression	* p != '/'		2013101	1		!=			
ANR	2013187	UnaryOperationExpression	* p		2013101	0					
ANR	2013188	UnaryOperator	*		2013101	0					
ANR	2013189	Identifier	p		2013101	1					
ANR	2013190	PrimaryExpression	'/'		2013101	1					
ANR	2013191	ReturnStatement	return ;	129:4:3399:3405	2013101	1	True				
ANR	2013192	ExpressionStatement	p = getTok ( & next )	130:2:3409:3426	2013101	7	True				
ANR	2013193	AssignmentExpression	p = getTok ( & next )		2013101	0		=			
ANR	2013194	Identifier	p		2013101	0					
ANR	2013195	CallExpression	getTok ( & next )		2013101	1					
ANR	2013196	Callee	getTok		2013101	0					
ANR	2013197	Identifier	getTok		2013101	0					
ANR	2013198	ArgumentList	& next		2013101	1					
ANR	2013199	Argument	& next		2013101	0					
ANR	2013200	UnaryOperationExpression	& next		2013101	0					
ANR	2013201	UnaryOperator	&		2013101	0					
ANR	2013202	Identifier	next		2013101	1					
ANR	2013203	IfStatement	"if ( matchkey ( p , next , ""xml"" ) )"		2013101	8					
ANR	2013204	Condition	"matchkey ( p , next , ""xml"" )"	131:6:3434:3457	2013101	0	True				
ANR	2013205	CallExpression	"matchkey ( p , next , ""xml"" )"		2013101	0					
ANR	2013206	Callee	matchkey		2013101	0					
ANR	2013207	Identifier	matchkey		2013101	0					
ANR	2013208	ArgumentList	p		2013101	1					
ANR	2013209	Argument	p		2013101	0					
ANR	2013210	Identifier	p		2013101	0					
ANR	2013211	Argument	next		2013101	1					
ANR	2013212	Identifier	next		2013101	0					
ANR	2013213	Argument	"""xml"""		2013101	2					
ANR	2013214	PrimaryExpression	"""xml"""		2013101	0					
ANR	2013215	ExpressionStatement	isXml = 1	132:4:3464:3473	2013101	1	True				
ANR	2013216	AssignmentExpression	isXml = 1		2013101	0		=			
ANR	2013217	Identifier	isXml		2013101	0					
ANR	2013218	PrimaryExpression	1		2013101	1					
ANR	2013219	ExpressionStatement	p = getTok ( & next )	133:2:3477:3494	2013101	9	True				
ANR	2013220	AssignmentExpression	p = getTok ( & next )		2013101	0		=			
ANR	2013221	Identifier	p		2013101	0					
ANR	2013222	CallExpression	getTok ( & next )		2013101	1					
ANR	2013223	Callee	getTok		2013101	0					
ANR	2013224	Identifier	getTok		2013101	0					
ANR	2013225	ArgumentList	& next		2013101	1					
ANR	2013226	Argument	& next		2013101	0					
ANR	2013227	UnaryOperationExpression	& next		2013101	0					
ANR	2013228	UnaryOperator	&		2013101	0					
ANR	2013229	Identifier	next		2013101	1					
ANR	2013230	WhileStatement	while ( p )		2013101	10					
ANR	2013231	Condition	p	134:9:3505:3505	2013101	0	True				
ANR	2013232	Identifier	p		2013101	0					
ANR	2013233	CompoundStatement		18:12:363:363	2013101	1					
ANR	2013234	IfStatement	if ( * p == ';' )		2013101	0					
ANR	2013235	Condition	* p == ';'	135:8:3518:3526	2013101	0	True				
ANR	2013236	EqualityExpression	* p == ';'		2013101	0		==			
ANR	2013237	UnaryOperationExpression	* p		2013101	0					
ANR	2013238	UnaryOperator	*		2013101	0					
ANR	2013239	Identifier	p		2013101	1					
ANR	2013240	PrimaryExpression	';'		2013101	1					
ANR	2013241	CompoundStatement		19:19:384:384	2013101	1					
ANR	2013242	ExpressionStatement	p = getTok ( & next )	136:6:3537:3554	2013101	0	True				
ANR	2013243	AssignmentExpression	p = getTok ( & next )		2013101	0		=			
ANR	2013244	Identifier	p		2013101	0					
ANR	2013245	CallExpression	getTok ( & next )		2013101	1					
ANR	2013246	Callee	getTok		2013101	0					
ANR	2013247	Identifier	getTok		2013101	0					
ANR	2013248	ArgumentList	& next		2013101	1					
ANR	2013249	Argument	& next		2013101	0					
ANR	2013250	UnaryOperationExpression	& next		2013101	0					
ANR	2013251	UnaryOperator	&		2013101	0					
ANR	2013252	Identifier	next		2013101	1					
ANR	2013253	IfStatement	"if ( matchkey ( p , next , ""charset"" ) )"		2013101	1					
ANR	2013254	Condition	"matchkey ( p , next , ""charset"" )"	137:10:3566:3593	2013101	0	True				
ANR	2013255	CallExpression	"matchkey ( p , next , ""charset"" )"		2013101	0					
ANR	2013256	Callee	matchkey		2013101	0					
ANR	2013257	Identifier	matchkey		2013101	0					
ANR	2013258	ArgumentList	p		2013101	1					
ANR	2013259	Argument	p		2013101	0					
ANR	2013260	Identifier	p		2013101	0					
ANR	2013261	Argument	next		2013101	1					
ANR	2013262	Identifier	next		2013101	0					
ANR	2013263	Argument	"""charset"""		2013101	2					
ANR	2013264	PrimaryExpression	"""charset"""		2013101	0					
ANR	2013265	CompoundStatement		21:40:451:451	2013101	1					
ANR	2013266	ExpressionStatement	p = getTok ( & next )	138:8:3606:3623	2013101	0	True				
ANR	2013267	AssignmentExpression	p = getTok ( & next )		2013101	0		=			
ANR	2013268	Identifier	p		2013101	0					
ANR	2013269	CallExpression	getTok ( & next )		2013101	1					
ANR	2013270	Callee	getTok		2013101	0					
ANR	2013271	Identifier	getTok		2013101	0					
ANR	2013272	ArgumentList	& next		2013101	1					
ANR	2013273	Argument	& next		2013101	0					
ANR	2013274	UnaryOperationExpression	& next		2013101	0					
ANR	2013275	UnaryOperator	&		2013101	0					
ANR	2013276	Identifier	next		2013101	1					
ANR	2013277	IfStatement	if ( p && * p == '=' )		2013101	1					
ANR	2013278	Condition	p && * p == '='	139:12:3637:3650	2013101	0	True				
ANR	2013279	AndExpression	p && * p == '='		2013101	0		&&			
ANR	2013280	Identifier	p		2013101	0					
ANR	2013281	EqualityExpression	* p == '='		2013101	1		==			
ANR	2013282	UnaryOperationExpression	* p		2013101	0					
ANR	2013283	UnaryOperator	*		2013101	0					
ANR	2013284	Identifier	p		2013101	1					
ANR	2013285	PrimaryExpression	'='		2013101	1					
ANR	2013286	CompoundStatement		23:28:508:508	2013101	1					
ANR	2013287	ExpressionStatement	p = getTok ( & next )	140:10:3665:3682	2013101	0	True				
ANR	2013288	AssignmentExpression	p = getTok ( & next )		2013101	0		=			
ANR	2013289	Identifier	p		2013101	0					
ANR	2013290	CallExpression	getTok ( & next )		2013101	1					
ANR	2013291	Callee	getTok		2013101	0					
ANR	2013292	Identifier	getTok		2013101	0					
ANR	2013293	ArgumentList	& next		2013101	1					
ANR	2013294	Argument	& next		2013101	0					
ANR	2013295	UnaryOperationExpression	& next		2013101	0					
ANR	2013296	UnaryOperator	&		2013101	0					
ANR	2013297	Identifier	next		2013101	1					
ANR	2013298	IfStatement	if ( p )		2013101	1					
ANR	2013299	Condition	p	141:14:3698:3698	2013101	0	True				
ANR	2013300	Identifier	p		2013101	0					
ANR	2013301	CompoundStatement		26:12:570:587	2013101	1					
ANR	2013302	IdentifierDeclStatement	char * s = charset ;	142:12:3715:3732	2013101	0	True				
ANR	2013303	IdentifierDecl	* s = charset		2013101	0					
ANR	2013304	IdentifierDeclType	char *		2013101	0					
ANR	2013305	Identifier	s		2013101	1					
ANR	2013306	AssignmentExpression	* s = charset		2013101	2		=			
ANR	2013307	Identifier	charset		2013101	0					
ANR	2013308	Identifier	charset		2013101	1					
ANR	2013309	IfStatement	"if ( * p == '""' )"		2013101	1					
ANR	2013310	Condition	"* p == '""'"	143:16:3750:3758	2013101	0	True				
ANR	2013311	EqualityExpression	"* p == '""'"		2013101	0		==			
ANR	2013312	UnaryOperationExpression	* p		2013101	0					
ANR	2013313	UnaryOperator	*		2013101	0					
ANR	2013314	Identifier	p		2013101	1					
ANR	2013315	PrimaryExpression	"'""'"		2013101	1					
ANR	2013316	CompoundStatement		27:27:616:616	2013101	1					
ANR	2013317	WhileStatement	while ( ++ p != next - 1 )		2013101	0					
ANR	2013318	Condition	++ p != next - 1	144:21:3784:3798	2013101	0	True				
ANR	2013319	EqualityExpression	++ p != next - 1		2013101	0		!=			
ANR	2013320	UnaryExpression	++ p		2013101	0					
ANR	2013321	IncDec	++		2013101	0					
ANR	2013322	Identifier	p		2013101	1					
ANR	2013323	AdditiveExpression	next - 1		2013101	1		-			
ANR	2013324	Identifier	next		2013101	0					
ANR	2013325	PrimaryExpression	1		2013101	1					
ANR	2013326	CompoundStatement		28:38:656:656	2013101	1					
ANR	2013327	IfStatement	if ( * p == '\\\\' )		2013101	0					
ANR	2013328	Condition	* p == '\\\\'	145:20:3823:3832	2013101	0	True				
ANR	2013329	EqualityExpression	* p == '\\\\'		2013101	0		==			
ANR	2013330	UnaryOperationExpression	* p		2013101	0					
ANR	2013331	UnaryOperator	*		2013101	0					
ANR	2013332	Identifier	p		2013101	1					
ANR	2013333	PrimaryExpression	'\\\\'		2013101	1					
ANR	2013334	ExpressionStatement	++ p	146:18:3853:3856	2013101	1	True				
ANR	2013335	UnaryExpression	++ p		2013101	0					
ANR	2013336	IncDec	++		2013101	0					
ANR	2013337	Identifier	p		2013101	1					
ANR	2013338	IfStatement	if ( s == charset + CHARSET_MAX - 1 )		2013101	1					
ANR	2013339	Condition	s == charset + CHARSET_MAX - 1	147:20:3878:3907	2013101	0	True				
ANR	2013340	EqualityExpression	s == charset + CHARSET_MAX - 1		2013101	0		==			
ANR	2013341	Identifier	s		2013101	0					
ANR	2013342	AdditiveExpression	charset + CHARSET_MAX - 1		2013101	1		+			
ANR	2013343	Identifier	charset		2013101	0					
ANR	2013344	AdditiveExpression	CHARSET_MAX - 1		2013101	1		-			
ANR	2013345	Identifier	CHARSET_MAX		2013101	0					
ANR	2013346	PrimaryExpression	1		2013101	1					
ANR	2013347	CompoundStatement		31:52:765:765	2013101	1					
ANR	2013348	ExpressionStatement	charset [ 0 ] = '\\0'	148:18:3930:3947	2013101	0	True				
ANR	2013349	AssignmentExpression	charset [ 0 ] = '\\0'		2013101	0		=			
ANR	2013350	ArrayIndexing	charset [ 0 ]		2013101	0					
ANR	2013351	Identifier	charset		2013101	0					
ANR	2013352	PrimaryExpression	0		2013101	1					
ANR	2013353	PrimaryExpression	'\\0'		2013101	1					
ANR	2013354	BreakStatement	break ;	149:18:3967:3972	2013101	1	True				
ANR	2013355	ExpressionStatement	* s ++ = * p	151:16:4008:4017	2013101	2	True				
ANR	2013356	AssignmentExpression	* s ++ = * p		2013101	0		=			
ANR	2013357	UnaryOperationExpression	* s ++		2013101	0					
ANR	2013358	UnaryOperator	*		2013101	0					
ANR	2013359	PostIncDecOperationExpression	s ++		2013101	1					
ANR	2013360	Identifier	s		2013101	0					
ANR	2013361	IncDec	++		2013101	1					
ANR	2013362	UnaryOperationExpression	* p		2013101	1					
ANR	2013363	UnaryOperator	*		2013101	0					
ANR	2013364	Identifier	p		2013101	1					
ANR	2013365	ExpressionStatement	* s ++ = '\\0'	153:14:4049:4060	2013101	1	True				
ANR	2013366	AssignmentExpression	* s ++ = '\\0'		2013101	0		=			
ANR	2013367	UnaryOperationExpression	* s ++		2013101	0					
ANR	2013368	UnaryOperator	*		2013101	0					
ANR	2013369	PostIncDecOperationExpression	s ++		2013101	1					
ANR	2013370	Identifier	s		2013101	0					
ANR	2013371	IncDec	++		2013101	1					
ANR	2013372	PrimaryExpression	'\\0'		2013101	1					
ANR	2013373	ElseStatement	else		2013101	0					
ANR	2013374	CompoundStatement		39:17:948:948	2013101	0					
ANR	2013375	IfStatement	if ( next - p > CHARSET_MAX - 1 )		2013101	0					
ANR	2013376	Condition	next - p > CHARSET_MAX - 1	156:18:4113:4138	2013101	0	True				
ANR	2013377	RelationalExpression	next - p > CHARSET_MAX - 1		2013101	0		>			
ANR	2013378	AdditiveExpression	next - p		2013101	0		-			
ANR	2013379	Identifier	next		2013101	0					
ANR	2013380	Identifier	p		2013101	1					
ANR	2013381	AdditiveExpression	CHARSET_MAX - 1		2013101	1		-			
ANR	2013382	Identifier	CHARSET_MAX		2013101	0					
ANR	2013383	PrimaryExpression	1		2013101	1					
ANR	2013384	BreakStatement	break ;	157:16:4157:4162	2013101	1	True				
ANR	2013385	WhileStatement	while ( p != next )		2013101	1					
ANR	2013386	Condition	p != next	158:21:4185:4193	2013101	0	True				
ANR	2013387	EqualityExpression	p != next		2013101	0		!=			
ANR	2013388	Identifier	p		2013101	0					
ANR	2013389	Identifier	next		2013101	1					
ANR	2013390	ExpressionStatement	* s ++ = * p ++	159:16:4212:4223	2013101	1	True				
ANR	2013391	AssignmentExpression	* s ++ = * p ++		2013101	0		=			
ANR	2013392	UnaryOperationExpression	* s ++		2013101	0					
ANR	2013393	UnaryOperator	*		2013101	0					
ANR	2013394	PostIncDecOperationExpression	s ++		2013101	1					
ANR	2013395	Identifier	s		2013101	0					
ANR	2013396	IncDec	++		2013101	1					
ANR	2013397	UnaryOperationExpression	* p ++		2013101	1					
ANR	2013398	UnaryOperator	*		2013101	0					
ANR	2013399	PostIncDecOperationExpression	p ++		2013101	1					
ANR	2013400	Identifier	p		2013101	0					
ANR	2013401	IncDec	++		2013101	1					
ANR	2013402	ExpressionStatement	* s = 0	160:14:4239:4245	2013101	2	True				
ANR	2013403	AssignmentExpression	* s = 0		2013101	0		=			
ANR	2013404	UnaryOperationExpression	* s		2013101	0					
ANR	2013405	UnaryOperator	*		2013101	0					
ANR	2013406	Identifier	s		2013101	1					
ANR	2013407	PrimaryExpression	0		2013101	1					
ANR	2013408	BreakStatement	break ;	161:14:4261:4266	2013101	3	True				
ANR	2013409	ElseStatement	else		2013101	0					
ANR	2013410	ExpressionStatement	p = getTok ( & next )	168:4:4329:4346	2013101	0	True				
ANR	2013411	AssignmentExpression	p = getTok ( & next )		2013101	0		=			
ANR	2013412	Identifier	p		2013101	0					
ANR	2013413	CallExpression	getTok ( & next )		2013101	1					
ANR	2013414	Callee	getTok		2013101	0					
ANR	2013415	Identifier	getTok		2013101	0					
ANR	2013416	ArgumentList	& next		2013101	1					
ANR	2013417	Argument	& next		2013101	0					
ANR	2013418	UnaryOperationExpression	& next		2013101	0					
ANR	2013419	UnaryOperator	&		2013101	0					
ANR	2013420	Identifier	next		2013101	1					
ANR	2013421	ReturnType	void		2013101	1					
ANR	2013422	Identifier	getXMLCharset		2013101	2					
ANR	2013423	ParameterList	"const char * buf , char * charset"		2013101	3					
ANR	2013424	Parameter	const char * buf	116:14:3112:3126	2013101	0	True				
ANR	2013425	ParameterType	const char *		2013101	0					
ANR	2013426	Identifier	buf		2013101	1					
ANR	2013427	Parameter	char * charset	116:31:3129:3141	2013101	1	True				
ANR	2013428	ParameterType	char *		2013101	0					
ANR	2013429	Identifier	charset		2013101	1					
ANR	2013430	CFGEntryNode	ENTRY		2013101		True				
ANR	2013431	CFGExitNode	EXIT		2013101		True				
ANR	2013432	Symbol	next		2013101						
ANR	2013433	Symbol	* s ++		2013101						
ANR	2013434	Symbol	charset		2013101						
ANR	2013435	Symbol	& next		2013101						
ANR	2013436	Symbol	CHARSET_MAX		2013101						
ANR	2013437	Symbol	* p ++		2013101						
ANR	2013438	Symbol	matchkey		2013101						
ANR	2013439	Symbol	p		2013101						
ANR	2013440	Symbol	isXml		2013101						
ANR	2013441	Symbol	buf		2013101						
ANR	2013442	Symbol	getTok		2013101						
ANR	2013443	Symbol	s		2013101						
ANR	2013444	Symbol	* p		2013101						
ANR	2013445	Symbol	* charset		2013101						
ANR	2013446	Symbol	* s		2013101						
ANR	2013447	Function	main	172:0:4355:4494							
ANR	2013448	FunctionDef	"main (int argc , char * * argv)"		2013447	0					
ANR	2013449	CompoundStatement		174:0:4387:4494	2013447	0					
ANR	2013450	IdentifierDeclStatement	char buf [ CHARSET_MAX ] ;	175:2:4391:4412	2013447	0	True				
ANR	2013451	IdentifierDecl	buf [ CHARSET_MAX ]		2013447	0					
ANR	2013452	IdentifierDeclType	char [ CHARSET_MAX ]		2013447	0					
ANR	2013453	Identifier	buf		2013447	1					
ANR	2013454	Identifier	CHARSET_MAX		2013447	2					
ANR	2013455	ExpressionStatement	"getXMLCharset ( argv [ 1 ] , buf )"	176:2:4416:4443	2013447	1	True				
ANR	2013456	CallExpression	"getXMLCharset ( argv [ 1 ] , buf )"		2013447	0					
ANR	2013457	Callee	getXMLCharset		2013447	0					
ANR	2013458	Identifier	getXMLCharset		2013447	0					
ANR	2013459	ArgumentList	argv [ 1 ]		2013447	1					
ANR	2013460	Argument	argv [ 1 ]		2013447	0					
ANR	2013461	ArrayIndexing	argv [ 1 ]		2013447	0					
ANR	2013462	Identifier	argv		2013447	0					
ANR	2013463	PrimaryExpression	1		2013447	1					
ANR	2013464	Argument	buf		2013447	1					
ANR	2013465	Identifier	buf		2013447	0					
ANR	2013466	ExpressionStatement	"printf ( ""charset = \\""%s\\""\\n"" , buf )"	177:2:4447:4480	2013447	2	True				
ANR	2013467	CallExpression	"printf ( ""charset = \\""%s\\""\\n"" , buf )"		2013447	0					
ANR	2013468	Callee	printf		2013447	0					
ANR	2013469	Identifier	printf		2013447	0					
ANR	2013470	ArgumentList	"""charset = \\""%s\\""\\n"""		2013447	1					
ANR	2013471	Argument	"""charset = \\""%s\\""\\n"""		2013447	0					
ANR	2013472	PrimaryExpression	"""charset = \\""%s\\""\\n"""		2013447	0					
ANR	2013473	Argument	buf		2013447	1					
ANR	2013474	Identifier	buf		2013447	0					
ANR	2013475	ReturnStatement	return 0 ;	178:2:4484:4492	2013447	3	True				
ANR	2013476	PrimaryExpression	0		2013447	0					
ANR	2013477	ReturnType	int		2013447	1					
ANR	2013478	Identifier	main		2013447	2					
ANR	2013479	ParameterList	"int argc , char * * argv"		2013447	3					
ANR	2013480	Parameter	int argc	173:5:4364:4371	2013447	0	True				
ANR	2013481	ParameterType	int		2013447	0					
ANR	2013482	Identifier	argc		2013447	1					
ANR	2013483	Parameter	char * * argv	173:15:4374:4384	2013447	1	True				
ANR	2013484	ParameterType	char * *		2013447	0					
ANR	2013485	Identifier	argv		2013447	1					
ANR	2013486	CFGEntryNode	ENTRY		2013447		True				
ANR	2013487	CFGExitNode	EXIT		2013447		True				
ANR	2013488	Symbol	argc		2013447						
ANR	2013489	Symbol	buf		2013447						
ANR	2013490	Symbol	* argv		2013447						
ANR	2013491	Symbol	argv		2013447						
