command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	10749552	File	data/converged/CVE-2018-16863_ghostpdl/xmlmime.c								
ANR	10749553	Function	getTok	36:0:1626:2964							
ANR	10749554	FunctionDef	getTok (const char * * pp)		10749553	0					
ANR	10749555	CompoundStatement		38:0:1670:2964	10749553	0					
ANR	10749556	ClassDefStatement	"enum { inAtom , inString , init , inComment }"	40:2:1753:1794	10749553	0	True				
ANR	10749557	ExpressionStatement		40:44:1795:1795	10749553	1	True				
ANR	10749558	IdentifierDeclStatement	int state = init ;	41:2:1799:1815	10749553	2	True				
ANR	10749559	IdentifierDecl	state = init		10749553	0					
ANR	10749560	IdentifierDeclType	int		10749553	0					
ANR	10749561	Identifier	state		10749553	1					
ANR	10749562	AssignmentExpression	state = init		10749553	2		=			
ANR	10749563	Identifier	init		10749553	0					
ANR	10749564	Identifier	init		10749553	1					
ANR	10749565	IdentifierDeclStatement	const char * tokStart = 0 ;	42:2:1819:1843	10749553	3	True				
ANR	10749566	IdentifierDecl	* tokStart = 0		10749553	0					
ANR	10749567	IdentifierDeclType	const char *		10749553	0					
ANR	10749568	Identifier	tokStart		10749553	1					
ANR	10749569	AssignmentExpression	* tokStart = 0		10749553	2		=			
ANR	10749570	Identifier	tokStart		10749553	0					
ANR	10749571	PrimaryExpression	0		10749553	1					
ANR	10749572	ForStatement	for ( ; ; )		10749553	4					
ANR	10749573	CompoundStatement		6:11:185:185	10749553	0					
ANR	10749574	SwitchStatement	switch ( * * pp )		10749553	0					
ANR	10749575	Condition	* * pp	44:12:1870:1873	10749553	0	True				
ANR	10749576	UnaryOperationExpression	* * pp		10749553	0					
ANR	10749577	UnaryOperator	*		10749553	0					
ANR	10749578	UnaryOperationExpression	* pp		10749553	1					
ANR	10749579	UnaryOperator	*		10749553	0					
ANR	10749580	Identifier	pp		10749553	1					
ANR	10749581	CompoundStatement		7:18:205:205	10749553	1					
ANR	10749582	Label	case '\\0' :	45:4:1882:1891	10749553	0	True				
ANR	10749583	IfStatement	if ( state == inAtom )		10749553	1					
ANR	10749584	Condition	state == inAtom	46:10:1903:1917	10749553	0	True				
ANR	10749585	EqualityExpression	state == inAtom		10749553	0		==			
ANR	10749586	Identifier	state		10749553	0					
ANR	10749587	Identifier	inAtom		10749553	1					
ANR	10749588	ReturnStatement	return tokStart ;	47:8:1928:1943	10749553	1	True				
ANR	10749589	Identifier	tokStart		10749553	0					
ANR	10749590	ReturnStatement	return 0 ;	48:6:1951:1959	10749553	2	True				
ANR	10749591	PrimaryExpression	0		10749553	0					
ANR	10749592	Label	case ' ' :	49:4:1965:1973	10749553	3	True				
ANR	10749593	Label	case '\\r' :	50:4:1979:1988	10749553	4	True				
ANR	10749594	Label	case '\\t' :	51:4:1994:2003	10749553	5	True				
ANR	10749595	Label	case '\\n' :	52:4:2009:2018	10749553	6	True				
ANR	10749596	IfStatement	if ( state == inAtom )		10749553	7					
ANR	10749597	Condition	state == inAtom	53:10:2030:2044	10749553	0	True				
ANR	10749598	EqualityExpression	state == inAtom		10749553	0		==			
ANR	10749599	Identifier	state		10749553	0					
ANR	10749600	Identifier	inAtom		10749553	1					
ANR	10749601	ReturnStatement	return tokStart ;	54:8:2055:2070	10749553	1	True				
ANR	10749602	Identifier	tokStart		10749553	0					
ANR	10749603	BreakStatement	break ;	55:6:2078:2083	10749553	8	True				
ANR	10749604	Label	case '(' :	56:4:2089:2097	10749553	9	True				
ANR	10749605	IfStatement	if ( state == inAtom )		10749553	10					
ANR	10749606	Condition	state == inAtom	57:10:2109:2123	10749553	0	True				
ANR	10749607	EqualityExpression	state == inAtom		10749553	0		==			
ANR	10749608	Identifier	state		10749553	0					
ANR	10749609	Identifier	inAtom		10749553	1					
ANR	10749610	ReturnStatement	return tokStart ;	58:8:2134:2149	10749553	1	True				
ANR	10749611	Identifier	tokStart		10749553	0					
ANR	10749612	IfStatement	if ( state != inString )		10749553	11					
ANR	10749613	Condition	state != inString	59:10:2161:2177	10749553	0	True				
ANR	10749614	EqualityExpression	state != inString		10749553	0		!=			
ANR	10749615	Identifier	state		10749553	0					
ANR	10749616	Identifier	inString		10749553	1					
ANR	10749617	ExpressionStatement	state ++	60:8:2188:2195	10749553	1	True				
ANR	10749618	PostIncDecOperationExpression	state ++		10749553	0					
ANR	10749619	Identifier	state		10749553	0					
ANR	10749620	IncDec	++		10749553	1					
ANR	10749621	BreakStatement	break ;	61:6:2203:2208	10749553	12	True				
ANR	10749622	Label	case ')' :	62:4:2214:2222	10749553	13	True				
ANR	10749623	IfStatement	if ( state > init )		10749553	14					
ANR	10749624	Condition	state > init	63:10:2234:2245	10749553	0	True				
ANR	10749625	RelationalExpression	state > init		10749553	0		>			
ANR	10749626	Identifier	state		10749553	0					
ANR	10749627	Identifier	init		10749553	1					
ANR	10749628	ExpressionStatement	-- state	64:8:2256:2263	10749553	1	True				
ANR	10749629	UnaryExpression	-- state		10749553	0					
ANR	10749630	IncDec	--		10749553	0					
ANR	10749631	Identifier	state		10749553	1					
ANR	10749632	ElseStatement	else		10749553	0					
ANR	10749633	IfStatement	if ( state != inString )		10749553	0					
ANR	10749634	Condition	state != inString	65:15:2280:2296	10749553	0	True				
ANR	10749635	EqualityExpression	state != inString		10749553	0		!=			
ANR	10749636	Identifier	state		10749553	0					
ANR	10749637	Identifier	inString		10749553	1					
ANR	10749638	ReturnStatement	return 0 ;	66:8:2307:2315	10749553	1	True				
ANR	10749639	PrimaryExpression	0		10749553	0					
ANR	10749640	BreakStatement	break ;	67:6:2323:2328	10749553	15	True				
ANR	10749641	Label	case ';' :	68:4:2334:2342	10749553	16	True				
ANR	10749642	Label	case '/' :	69:4:2348:2356	10749553	17	True				
ANR	10749643	Label	case '=' :	70:4:2362:2370	10749553	18	True				
ANR	10749644	IfStatement	if ( state == inAtom )		10749553	19					
ANR	10749645	Condition	state == inAtom	71:10:2382:2396	10749553	0	True				
ANR	10749646	EqualityExpression	state == inAtom		10749553	0		==			
ANR	10749647	Identifier	state		10749553	0					
ANR	10749648	Identifier	inAtom		10749553	1					
ANR	10749649	ReturnStatement	return tokStart ;	72:8:2407:2422	10749553	1	True				
ANR	10749650	Identifier	tokStart		10749553	0					
ANR	10749651	IfStatement	if ( state == init )		10749553	20					
ANR	10749652	Condition	state == init	73:10:2434:2446	10749553	0	True				
ANR	10749653	EqualityExpression	state == init		10749553	0		==			
ANR	10749654	Identifier	state		10749553	0					
ANR	10749655	Identifier	init		10749553	1					
ANR	10749656	ReturnStatement	return ( * pp ) ++ ;	74:8:2457:2471	10749553	1	True				
ANR	10749657	PostIncDecOperationExpression	( * pp ) ++		10749553	0					
ANR	10749658	UnaryOperationExpression	* pp		10749553	0					
ANR	10749659	UnaryOperator	*		10749553	0					
ANR	10749660	Identifier	pp		10749553	1					
ANR	10749661	IncDec	++		10749553	1					
ANR	10749662	BreakStatement	break ;	75:6:2479:2484	10749553	21	True				
ANR	10749663	Label	case '\\\\' :	76:4:2490:2499	10749553	22	True				
ANR	10749664	ExpressionStatement	++ * pp	77:6:2507:2512	10749553	23	True				
ANR	10749665	UnaryExpression	++ * pp		10749553	0					
ANR	10749666	IncDec	++		10749553	0					
ANR	10749667	UnaryOperationExpression	* pp		10749553	1					
ANR	10749668	UnaryOperator	*		10749553	0					
ANR	10749669	Identifier	pp		10749553	1					
ANR	10749670	IfStatement	if ( * * pp == '\\0' )		10749553	24					
ANR	10749671	Condition	* * pp == '\\0'	78:10:2524:2535	10749553	0	True				
ANR	10749672	EqualityExpression	* * pp == '\\0'		10749553	0		==			
ANR	10749673	UnaryOperationExpression	* * pp		10749553	0					
ANR	10749674	UnaryOperator	*		10749553	0					
ANR	10749675	UnaryOperationExpression	* pp		10749553	1					
ANR	10749676	UnaryOperator	*		10749553	0					
ANR	10749677	Identifier	pp		10749553	1					
ANR	10749678	PrimaryExpression	'\\0'		10749553	1					
ANR	10749679	ReturnStatement	return 0 ;	79:8:2546:2554	10749553	1	True				
ANR	10749680	PrimaryExpression	0		10749553	0					
ANR	10749681	BreakStatement	break ;	80:6:2562:2567	10749553	25	True				
ANR	10749682	Label	"case '""' :"	81:4:2573:2581	10749553	26	True				
ANR	10749683	SwitchStatement	switch ( state )		10749553	27					
ANR	10749684	Condition	state	82:14:2597:2601	10749553	0	True				
ANR	10749685	Identifier	state		10749553	0					
ANR	10749686	CompoundStatement		45:21:933:933	10749553	1					
ANR	10749687	Label	case inString :	83:6:2612:2625	10749553	0	True				
ANR	10749688	Identifier	inString		10749553	0					
ANR	10749689	ExpressionStatement	++ * pp	84:8:2635:2640	10749553	1	True				
ANR	10749690	UnaryExpression	++ * pp		10749553	0					
ANR	10749691	IncDec	++		10749553	0					
ANR	10749692	UnaryOperationExpression	* pp		10749553	1					
ANR	10749693	UnaryOperator	*		10749553	0					
ANR	10749694	Identifier	pp		10749553	1					
ANR	10749695	ReturnStatement	return tokStart ;	85:8:2650:2665	10749553	2	True				
ANR	10749696	Identifier	tokStart		10749553	0					
ANR	10749697	Label	case inAtom :	86:6:2673:2684	10749553	3	True				
ANR	10749698	Identifier	inAtom		10749553	0					
ANR	10749699	ReturnStatement	return tokStart ;	87:8:2694:2709	10749553	4	True				
ANR	10749700	Identifier	tokStart		10749553	0					
ANR	10749701	Label	case init :	88:6:2717:2726	10749553	5	True				
ANR	10749702	Identifier	init		10749553	0					
ANR	10749703	ExpressionStatement	tokStart = * pp	89:8:2736:2750	10749553	6	True				
ANR	10749704	AssignmentExpression	tokStart = * pp		10749553	0		=			
ANR	10749705	Identifier	tokStart		10749553	0					
ANR	10749706	UnaryOperationExpression	* pp		10749553	1					
ANR	10749707	UnaryOperator	*		10749553	0					
ANR	10749708	Identifier	pp		10749553	1					
ANR	10749709	ExpressionStatement	state = inString	90:8:2760:2776	10749553	7	True				
ANR	10749710	AssignmentExpression	state = inString		10749553	0		=			
ANR	10749711	Identifier	state		10749553	0					
ANR	10749712	Identifier	inString		10749553	1					
ANR	10749713	BreakStatement	break ;	91:8:2786:2791	10749553	8	True				
ANR	10749714	BreakStatement	break ;	93:6:2807:2812	10749553	28	True				
ANR	10749715	Label	default :	94:4:2818:2825	10749553	29	True				
ANR	10749716	Identifier	default		10749553	0					
ANR	10749717	IfStatement	if ( state == init )		10749553	30					
ANR	10749718	Condition	state == init	95:10:2837:2849	10749553	0	True				
ANR	10749719	EqualityExpression	state == init		10749553	0		==			
ANR	10749720	Identifier	state		10749553	0					
ANR	10749721	Identifier	init		10749553	1					
ANR	10749722	CompoundStatement		58:25:1181:1181	10749553	1					
ANR	10749723	ExpressionStatement	tokStart = * pp	96:8:2862:2876	10749553	0	True				
ANR	10749724	AssignmentExpression	tokStart = * pp		10749553	0		=			
ANR	10749725	Identifier	tokStart		10749553	0					
ANR	10749726	UnaryOperationExpression	* pp		10749553	1					
ANR	10749727	UnaryOperator	*		10749553	0					
ANR	10749728	Identifier	pp		10749553	1					
ANR	10749729	ExpressionStatement	state = inAtom	97:8:2886:2900	10749553	1	True				
ANR	10749730	AssignmentExpression	state = inAtom		10749553	0		=			
ANR	10749731	Identifier	state		10749553	0					
ANR	10749732	Identifier	inAtom		10749553	1					
ANR	10749733	BreakStatement	break ;	99:6:2916:2921	10749553	31	True				
ANR	10749734	ExpressionStatement	++ * pp	101:4:2933:2938	10749553	1	True				
ANR	10749735	UnaryExpression	++ * pp		10749553	0					
ANR	10749736	IncDec	++		10749553	0					
ANR	10749737	UnaryOperationExpression	* pp		10749553	1					
ANR	10749738	UnaryOperator	*		10749553	0					
ANR	10749739	Identifier	pp		10749553	1					
ANR	10749740	ReturnType	static const char *		10749553	1					
ANR	10749741	Identifier	getTok		10749553	2					
ANR	10749742	ParameterList	const char * * pp		10749553	3					
ANR	10749743	Parameter	const char * * pp	37:7:1653:1667	10749553	0	True				
ANR	10749744	ParameterType	const char * *		10749553	0					
ANR	10749745	Identifier	pp		10749553	1					
ANR	10749746	CFGEntryNode	ENTRY		10749553		True				
ANR	10749747	CFGExitNode	EXIT		10749553		True				
ANR	10749748	InfiniteForNode	true		10749553		True				
ANR	10749749	Symbol	pp		10749553						
ANR	10749750	Symbol	init		10749553						
ANR	10749751	Symbol	* pp		10749553						
ANR	10749752	Symbol	inString		10749553						
ANR	10749753	Symbol	tokStart		10749553						
ANR	10749754	Symbol	state		10749553						
ANR	10749755	Symbol	inAtom		10749553						
ANR	10749756	Symbol	* * pp		10749553						
ANR	10749757	Function	matchkey	108:0:3002:3239							
ANR	10749758	FunctionDef	"matchkey (const char * start , const char * end , const char * key)"		10749757	0					
ANR	10749759	CompoundStatement		110:0:3075:3239	10749757	0					
ANR	10749760	IfStatement	if ( ! start )		10749757	0					
ANR	10749761	Condition	! start	111:6:3083:3088	10749757	0	True				
ANR	10749762	UnaryOperationExpression	! start		10749757	0					
ANR	10749763	UnaryOperator	!		10749757	0					
ANR	10749764	Identifier	start		10749757	1					
ANR	10749765	ReturnStatement	return 0 ;	112:4:3095:3103	10749757	1	True				
ANR	10749766	PrimaryExpression	0		10749757	0					
ANR	10749767	ForStatement	"for ( ; start != end ; start ++ , key ++ )"		10749757	1					
ANR	10749768	Condition	start != end	113:9:3114:3125	10749757	0	True				
ANR	10749769	EqualityExpression	start != end		10749757	0		!=			
ANR	10749770	Identifier	start		10749757	0					
ANR	10749771	Identifier	end		10749757	1					
ANR	10749772	Expression	"start ++ , key ++"	113:23:3128:3141	10749757	1	True				
ANR	10749773	PostIncDecOperationExpression	start ++		10749757	0					
ANR	10749774	Identifier	start		10749757	0					
ANR	10749775	IncDec	++		10749757	1					
ANR	10749776	PostIncDecOperationExpression	key ++		10749757	1					
ANR	10749777	Identifier	key		10749757	0					
ANR	10749778	IncDec	++		10749757	1					
ANR	10749779	IfStatement	if ( * start != * key && * start != 'A' + ( * key - 'a' ) )		10749757	2					
ANR	10749780	Condition	* start != * key && * start != 'A' + ( * key - 'a' )	114:8:3152:3197	10749757	0	True				
ANR	10749781	AndExpression	* start != * key && * start != 'A' + ( * key - 'a' )		10749757	0		&&			
ANR	10749782	EqualityExpression	* start != * key		10749757	0		!=			
ANR	10749783	UnaryOperationExpression	* start		10749757	0					
ANR	10749784	UnaryOperator	*		10749757	0					
ANR	10749785	Identifier	start		10749757	1					
ANR	10749786	UnaryOperationExpression	* key		10749757	1					
ANR	10749787	UnaryOperator	*		10749757	0					
ANR	10749788	Identifier	key		10749757	1					
ANR	10749789	EqualityExpression	* start != 'A' + ( * key - 'a' )		10749757	1		!=			
ANR	10749790	UnaryOperationExpression	* start		10749757	0					
ANR	10749791	UnaryOperator	*		10749757	0					
ANR	10749792	Identifier	start		10749757	1					
ANR	10749793	AdditiveExpression	'A' + ( * key - 'a' )		10749757	1		+			
ANR	10749794	PrimaryExpression	'A'		10749757	0					
ANR	10749795	AdditiveExpression	* key - 'a'		10749757	1		-			
ANR	10749796	UnaryOperationExpression	* key		10749757	0					
ANR	10749797	UnaryOperator	*		10749757	0					
ANR	10749798	Identifier	key		10749757	1					
ANR	10749799	PrimaryExpression	'a'		10749757	1					
ANR	10749800	ReturnStatement	return 0 ;	115:6:3206:3214	10749757	1	True				
ANR	10749801	PrimaryExpression	0		10749757	0					
ANR	10749802	ReturnStatement	return * key == '\\0' ;	116:2:3218:3237	10749757	2	True				
ANR	10749803	EqualityExpression	* key == '\\0'		10749757	0		==			
ANR	10749804	UnaryOperationExpression	* key		10749757	0					
ANR	10749805	UnaryOperator	*		10749757	0					
ANR	10749806	Identifier	key		10749757	1					
ANR	10749807	PrimaryExpression	'\\0'		10749757	1					
ANR	10749808	ReturnType	static int		10749757	1					
ANR	10749809	Identifier	matchkey		10749757	2					
ANR	10749810	ParameterList	"const char * start , const char * end , const char * key"		10749757	3					
ANR	10749811	Parameter	const char * start	109:9:3022:3038	10749757	0	True				
ANR	10749812	ParameterType	const char *		10749757	0					
ANR	10749813	Identifier	start		10749757	1					
ANR	10749814	Parameter	const char * end	109:28:3041:3055	10749757	1	True				
ANR	10749815	ParameterType	const char *		10749757	0					
ANR	10749816	Identifier	end		10749757	1					
ANR	10749817	Parameter	const char * key	109:45:3058:3072	10749757	2	True				
ANR	10749818	ParameterType	const char *		10749757	0					
ANR	10749819	Identifier	key		10749757	1					
ANR	10749820	CFGEntryNode	ENTRY		10749757		True				
ANR	10749821	CFGExitNode	EXIT		10749757		True				
ANR	10749822	Symbol	* start		10749757						
ANR	10749823	Symbol	start		10749757						
ANR	10749824	Symbol	* key		10749757						
ANR	10749825	Symbol	end		10749757						
ANR	10749826	Symbol	key		10749757						
ANR	10749827	Function	getXMLCharset	119:0:3242:4549							
ANR	10749828	FunctionDef	"getXMLCharset (const char * buf , char * charset)"		10749827	0					
ANR	10749829	CompoundStatement		121:0:3293:4549	10749827	0					
ANR	10749830	IdentifierDeclStatement	"const char * next , * p ;"	122:2:3297:3317	10749827	0	True				
ANR	10749831	IdentifierDecl	* next		10749827	0					
ANR	10749832	IdentifierDeclType	const char *		10749827	0					
ANR	10749833	Identifier	next		10749827	1					
ANR	10749834	IdentifierDecl	* p		10749827	1					
ANR	10749835	IdentifierDeclType	const char *		10749827	0					
ANR	10749836	Identifier	p		10749827	1					
ANR	10749837	ExpressionStatement	charset [ 0 ] = '\\0'	124:2:3322:3339	10749827	1	True				
ANR	10749838	AssignmentExpression	charset [ 0 ] = '\\0'		10749827	0		=			
ANR	10749839	ArrayIndexing	charset [ 0 ]		10749827	0					
ANR	10749840	Identifier	charset		10749827	0					
ANR	10749841	PrimaryExpression	0		10749827	1					
ANR	10749842	PrimaryExpression	'\\0'		10749827	1					
ANR	10749843	ExpressionStatement	next = buf	125:2:3343:3353	10749827	2	True				
ANR	10749844	AssignmentExpression	next = buf		10749827	0		=			
ANR	10749845	Identifier	next		10749827	0					
ANR	10749846	Identifier	buf		10749827	1					
ANR	10749847	ExpressionStatement	p = getTok ( & next )	126:2:3357:3374	10749827	3	True				
ANR	10749848	AssignmentExpression	p = getTok ( & next )		10749827	0		=			
ANR	10749849	Identifier	p		10749827	0					
ANR	10749850	CallExpression	getTok ( & next )		10749827	1					
ANR	10749851	Callee	getTok		10749827	0					
ANR	10749852	Identifier	getTok		10749827	0					
ANR	10749853	ArgumentList	& next		10749827	1					
ANR	10749854	Argument	& next		10749827	0					
ANR	10749855	UnaryOperationExpression	& next		10749827	0					
ANR	10749856	UnaryOperator	&		10749827	0					
ANR	10749857	Identifier	next		10749827	1					
ANR	10749858	IfStatement	"if ( matchkey ( p , next , ""text"" ) )"		10749827	4					
ANR	10749859	Condition	"matchkey ( p , next , ""text"" )"	127:6:3382:3406	10749827	0	True				
ANR	10749860	CallExpression	"matchkey ( p , next , ""text"" )"		10749827	0					
ANR	10749861	Callee	matchkey		10749827	0					
ANR	10749862	Identifier	matchkey		10749827	0					
ANR	10749863	ArgumentList	p		10749827	1					
ANR	10749864	Argument	p		10749827	0					
ANR	10749865	Identifier	p		10749827	0					
ANR	10749866	Argument	next		10749827	1					
ANR	10749867	Identifier	next		10749827	0					
ANR	10749868	Argument	"""text"""		10749827	2					
ANR	10749869	PrimaryExpression	"""text"""		10749827	0					
ANR	10749870	ExpressionStatement	"strcpy ( charset , ""us-ascii"" )"	128:4:3413:3440	10749827	1	True				
ANR	10749871	CallExpression	"strcpy ( charset , ""us-ascii"" )"		10749827	0					
ANR	10749872	Callee	strcpy		10749827	0					
ANR	10749873	Identifier	strcpy		10749827	0					
ANR	10749874	ArgumentList	charset		10749827	1					
ANR	10749875	Argument	charset		10749827	0					
ANR	10749876	Identifier	charset		10749827	0					
ANR	10749877	Argument	"""us-ascii"""		10749827	1					
ANR	10749878	PrimaryExpression	"""us-ascii"""		10749827	0					
ANR	10749879	ElseStatement	else		10749827	0					
ANR	10749880	IfStatement	"if ( ! matchkey ( p , next , ""application"" ) )"		10749827	0					
ANR	10749881	Condition	"! matchkey ( p , next , ""application"" )"	129:11:3453:3485	10749827	0	True				
ANR	10749882	UnaryOperationExpression	"! matchkey ( p , next , ""application"" )"		10749827	0					
ANR	10749883	UnaryOperator	!		10749827	0					
ANR	10749884	CallExpression	"matchkey ( p , next , ""application"" )"		10749827	1					
ANR	10749885	Callee	matchkey		10749827	0					
ANR	10749886	Identifier	matchkey		10749827	0					
ANR	10749887	ArgumentList	p		10749827	1					
ANR	10749888	Argument	p		10749827	0					
ANR	10749889	Identifier	p		10749827	0					
ANR	10749890	Argument	next		10749827	1					
ANR	10749891	Identifier	next		10749827	0					
ANR	10749892	Argument	"""application"""		10749827	2					
ANR	10749893	PrimaryExpression	"""application"""		10749827	0					
ANR	10749894	ReturnStatement	return ;	130:4:3492:3498	10749827	1	True				
ANR	10749895	ExpressionStatement	p = getTok ( & next )	131:2:3502:3519	10749827	5	True				
ANR	10749896	AssignmentExpression	p = getTok ( & next )		10749827	0		=			
ANR	10749897	Identifier	p		10749827	0					
ANR	10749898	CallExpression	getTok ( & next )		10749827	1					
ANR	10749899	Callee	getTok		10749827	0					
ANR	10749900	Identifier	getTok		10749827	0					
ANR	10749901	ArgumentList	& next		10749827	1					
ANR	10749902	Argument	& next		10749827	0					
ANR	10749903	UnaryOperationExpression	& next		10749827	0					
ANR	10749904	UnaryOperator	&		10749827	0					
ANR	10749905	Identifier	next		10749827	1					
ANR	10749906	IfStatement	if ( ! p || * p != '/' )		10749827	6					
ANR	10749907	Condition	! p || * p != '/'	132:6:3527:3541	10749827	0	True				
ANR	10749908	OrExpression	! p || * p != '/'		10749827	0		||			
ANR	10749909	UnaryOperationExpression	! p		10749827	0					
ANR	10749910	UnaryOperator	!		10749827	0					
ANR	10749911	Identifier	p		10749827	1					
ANR	10749912	EqualityExpression	* p != '/'		10749827	1		!=			
ANR	10749913	UnaryOperationExpression	* p		10749827	0					
ANR	10749914	UnaryOperator	*		10749827	0					
ANR	10749915	Identifier	p		10749827	1					
ANR	10749916	PrimaryExpression	'/'		10749827	1					
ANR	10749917	ReturnStatement	return ;	133:4:3548:3554	10749827	1	True				
ANR	10749918	ExpressionStatement	p = getTok ( & next )	134:2:3558:3575	10749827	7	True				
ANR	10749919	AssignmentExpression	p = getTok ( & next )		10749827	0		=			
ANR	10749920	Identifier	p		10749827	0					
ANR	10749921	CallExpression	getTok ( & next )		10749827	1					
ANR	10749922	Callee	getTok		10749827	0					
ANR	10749923	Identifier	getTok		10749827	0					
ANR	10749924	ArgumentList	& next		10749827	1					
ANR	10749925	Argument	& next		10749827	0					
ANR	10749926	UnaryOperationExpression	& next		10749827	0					
ANR	10749927	UnaryOperator	&		10749827	0					
ANR	10749928	Identifier	next		10749827	1					
ANR	10749929	IfStatement	"if ( ! matchkey ( p , next , ""xml"" ) && charset [ 0 ] == '\\0' )"		10749827	8					
ANR	10749930	Condition	"! matchkey ( p , next , ""xml"" ) && charset [ 0 ] == '\\0'"	136:6:3589:3635	10749827	0	True				
ANR	10749931	AndExpression	"! matchkey ( p , next , ""xml"" ) && charset [ 0 ] == '\\0'"		10749827	0		&&			
ANR	10749932	UnaryOperationExpression	"! matchkey ( p , next , ""xml"" )"		10749827	0					
ANR	10749933	UnaryOperator	!		10749827	0					
ANR	10749934	CallExpression	"matchkey ( p , next , ""xml"" )"		10749827	1					
ANR	10749935	Callee	matchkey		10749827	0					
ANR	10749936	Identifier	matchkey		10749827	0					
ANR	10749937	ArgumentList	p		10749827	1					
ANR	10749938	Argument	p		10749827	0					
ANR	10749939	Identifier	p		10749827	0					
ANR	10749940	Argument	next		10749827	1					
ANR	10749941	Identifier	next		10749827	0					
ANR	10749942	Argument	"""xml"""		10749827	2					
ANR	10749943	PrimaryExpression	"""xml"""		10749827	0					
ANR	10749944	EqualityExpression	charset [ 0 ] == '\\0'		10749827	1		==			
ANR	10749945	ArrayIndexing	charset [ 0 ]		10749827	0					
ANR	10749946	Identifier	charset		10749827	0					
ANR	10749947	PrimaryExpression	0		10749827	1					
ANR	10749948	PrimaryExpression	'\\0'		10749827	1					
ANR	10749949	ReturnStatement	return ;	137:4:3642:3648	10749827	1	True				
ANR	10749950	ExpressionStatement	p = getTok ( & next )	139:2:3659:3676	10749827	9	True				
ANR	10749951	AssignmentExpression	p = getTok ( & next )		10749827	0		=			
ANR	10749952	Identifier	p		10749827	0					
ANR	10749953	CallExpression	getTok ( & next )		10749827	1					
ANR	10749954	Callee	getTok		10749827	0					
ANR	10749955	Identifier	getTok		10749827	0					
ANR	10749956	ArgumentList	& next		10749827	1					
ANR	10749957	Argument	& next		10749827	0					
ANR	10749958	UnaryOperationExpression	& next		10749827	0					
ANR	10749959	UnaryOperator	&		10749827	0					
ANR	10749960	Identifier	next		10749827	1					
ANR	10749961	WhileStatement	while ( p )		10749827	10					
ANR	10749962	Condition	p	140:9:3687:3687	10749827	0	True				
ANR	10749963	Identifier	p		10749827	0					
ANR	10749964	CompoundStatement		20:12:396:396	10749827	1					
ANR	10749965	IfStatement	if ( * p == ';' )		10749827	0					
ANR	10749966	Condition	* p == ';'	141:8:3700:3708	10749827	0	True				
ANR	10749967	EqualityExpression	* p == ';'		10749827	0		==			
ANR	10749968	UnaryOperationExpression	* p		10749827	0					
ANR	10749969	UnaryOperator	*		10749827	0					
ANR	10749970	Identifier	p		10749827	1					
ANR	10749971	PrimaryExpression	';'		10749827	1					
ANR	10749972	CompoundStatement		21:19:417:417	10749827	1					
ANR	10749973	ExpressionStatement	p = getTok ( & next )	142:6:3719:3736	10749827	0	True				
ANR	10749974	AssignmentExpression	p = getTok ( & next )		10749827	0		=			
ANR	10749975	Identifier	p		10749827	0					
ANR	10749976	CallExpression	getTok ( & next )		10749827	1					
ANR	10749977	Callee	getTok		10749827	0					
ANR	10749978	Identifier	getTok		10749827	0					
ANR	10749979	ArgumentList	& next		10749827	1					
ANR	10749980	Argument	& next		10749827	0					
ANR	10749981	UnaryOperationExpression	& next		10749827	0					
ANR	10749982	UnaryOperator	&		10749827	0					
ANR	10749983	Identifier	next		10749827	1					
ANR	10749984	IfStatement	"if ( matchkey ( p , next , ""charset"" ) )"		10749827	1					
ANR	10749985	Condition	"matchkey ( p , next , ""charset"" )"	143:10:3748:3775	10749827	0	True				
ANR	10749986	CallExpression	"matchkey ( p , next , ""charset"" )"		10749827	0					
ANR	10749987	Callee	matchkey		10749827	0					
ANR	10749988	Identifier	matchkey		10749827	0					
ANR	10749989	ArgumentList	p		10749827	1					
ANR	10749990	Argument	p		10749827	0					
ANR	10749991	Identifier	p		10749827	0					
ANR	10749992	Argument	next		10749827	1					
ANR	10749993	Identifier	next		10749827	0					
ANR	10749994	Argument	"""charset"""		10749827	2					
ANR	10749995	PrimaryExpression	"""charset"""		10749827	0					
ANR	10749996	CompoundStatement		23:40:484:484	10749827	1					
ANR	10749997	ExpressionStatement	p = getTok ( & next )	144:8:3788:3805	10749827	0	True				
ANR	10749998	AssignmentExpression	p = getTok ( & next )		10749827	0		=			
ANR	10749999	Identifier	p		10749827	0					
ANR	10750000	CallExpression	getTok ( & next )		10749827	1					
ANR	10750001	Callee	getTok		10749827	0					
ANR	10750002	Identifier	getTok		10749827	0					
ANR	10750003	ArgumentList	& next		10749827	1					
ANR	10750004	Argument	& next		10749827	0					
ANR	10750005	UnaryOperationExpression	& next		10749827	0					
ANR	10750006	UnaryOperator	&		10749827	0					
ANR	10750007	Identifier	next		10749827	1					
ANR	10750008	IfStatement	if ( p && * p == '=' )		10749827	1					
ANR	10750009	Condition	p && * p == '='	145:12:3819:3832	10749827	0	True				
ANR	10750010	AndExpression	p && * p == '='		10749827	0		&&			
ANR	10750011	Identifier	p		10749827	0					
ANR	10750012	EqualityExpression	* p == '='		10749827	1		==			
ANR	10750013	UnaryOperationExpression	* p		10749827	0					
ANR	10750014	UnaryOperator	*		10749827	0					
ANR	10750015	Identifier	p		10749827	1					
ANR	10750016	PrimaryExpression	'='		10749827	1					
ANR	10750017	CompoundStatement		25:28:541:541	10749827	1					
ANR	10750018	ExpressionStatement	p = getTok ( & next )	146:10:3847:3864	10749827	0	True				
ANR	10750019	AssignmentExpression	p = getTok ( & next )		10749827	0		=			
ANR	10750020	Identifier	p		10749827	0					
ANR	10750021	CallExpression	getTok ( & next )		10749827	1					
ANR	10750022	Callee	getTok		10749827	0					
ANR	10750023	Identifier	getTok		10749827	0					
ANR	10750024	ArgumentList	& next		10749827	1					
ANR	10750025	Argument	& next		10749827	0					
ANR	10750026	UnaryOperationExpression	& next		10749827	0					
ANR	10750027	UnaryOperator	&		10749827	0					
ANR	10750028	Identifier	next		10749827	1					
ANR	10750029	IfStatement	if ( p )		10749827	1					
ANR	10750030	Condition	p	147:14:3880:3880	10749827	0	True				
ANR	10750031	Identifier	p		10749827	0					
ANR	10750032	CompoundStatement		28:12:603:620	10749827	1					
ANR	10750033	IdentifierDeclStatement	char * s = charset ;	148:12:3897:3914	10749827	0	True				
ANR	10750034	IdentifierDecl	* s = charset		10749827	0					
ANR	10750035	IdentifierDeclType	char *		10749827	0					
ANR	10750036	Identifier	s		10749827	1					
ANR	10750037	AssignmentExpression	* s = charset		10749827	2		=			
ANR	10750038	Identifier	charset		10749827	0					
ANR	10750039	Identifier	charset		10749827	1					
ANR	10750040	IfStatement	"if ( * p == '""' )"		10749827	1					
ANR	10750041	Condition	"* p == '""'"	149:16:3932:3940	10749827	0	True				
ANR	10750042	EqualityExpression	"* p == '""'"		10749827	0		==			
ANR	10750043	UnaryOperationExpression	* p		10749827	0					
ANR	10750044	UnaryOperator	*		10749827	0					
ANR	10750045	Identifier	p		10749827	1					
ANR	10750046	PrimaryExpression	"'""'"		10749827	1					
ANR	10750047	CompoundStatement		29:27:649:649	10749827	1					
ANR	10750048	WhileStatement	while ( ++ p != next - 1 )		10749827	0					
ANR	10750049	Condition	++ p != next - 1	150:21:3966:3980	10749827	0	True				
ANR	10750050	EqualityExpression	++ p != next - 1		10749827	0		!=			
ANR	10750051	UnaryExpression	++ p		10749827	0					
ANR	10750052	IncDec	++		10749827	0					
ANR	10750053	Identifier	p		10749827	1					
ANR	10750054	AdditiveExpression	next - 1		10749827	1		-			
ANR	10750055	Identifier	next		10749827	0					
ANR	10750056	PrimaryExpression	1		10749827	1					
ANR	10750057	CompoundStatement		30:38:689:689	10749827	1					
ANR	10750058	IfStatement	if ( * p == '\\\\' )		10749827	0					
ANR	10750059	Condition	* p == '\\\\'	151:20:4005:4014	10749827	0	True				
ANR	10750060	EqualityExpression	* p == '\\\\'		10749827	0		==			
ANR	10750061	UnaryOperationExpression	* p		10749827	0					
ANR	10750062	UnaryOperator	*		10749827	0					
ANR	10750063	Identifier	p		10749827	1					
ANR	10750064	PrimaryExpression	'\\\\'		10749827	1					
ANR	10750065	ExpressionStatement	++ p	152:18:4035:4038	10749827	1	True				
ANR	10750066	UnaryExpression	++ p		10749827	0					
ANR	10750067	IncDec	++		10749827	0					
ANR	10750068	Identifier	p		10749827	1					
ANR	10750069	IfStatement	if ( s == charset + CHARSET_MAX - 1 )		10749827	1					
ANR	10750070	Condition	s == charset + CHARSET_MAX - 1	153:20:4060:4089	10749827	0	True				
ANR	10750071	EqualityExpression	s == charset + CHARSET_MAX - 1		10749827	0		==			
ANR	10750072	Identifier	s		10749827	0					
ANR	10750073	AdditiveExpression	charset + CHARSET_MAX - 1		10749827	1		+			
ANR	10750074	Identifier	charset		10749827	0					
ANR	10750075	AdditiveExpression	CHARSET_MAX - 1		10749827	1		-			
ANR	10750076	Identifier	CHARSET_MAX		10749827	0					
ANR	10750077	PrimaryExpression	1		10749827	1					
ANR	10750078	CompoundStatement		33:52:798:798	10749827	1					
ANR	10750079	ExpressionStatement	charset [ 0 ] = '\\0'	154:18:4112:4129	10749827	0	True				
ANR	10750080	AssignmentExpression	charset [ 0 ] = '\\0'		10749827	0		=			
ANR	10750081	ArrayIndexing	charset [ 0 ]		10749827	0					
ANR	10750082	Identifier	charset		10749827	0					
ANR	10750083	PrimaryExpression	0		10749827	1					
ANR	10750084	PrimaryExpression	'\\0'		10749827	1					
ANR	10750085	BreakStatement	break ;	155:18:4149:4154	10749827	1	True				
ANR	10750086	ExpressionStatement	* s ++ = * p	157:16:4190:4199	10749827	2	True				
ANR	10750087	AssignmentExpression	* s ++ = * p		10749827	0		=			
ANR	10750088	UnaryOperationExpression	* s ++		10749827	0					
ANR	10750089	UnaryOperator	*		10749827	0					
ANR	10750090	PostIncDecOperationExpression	s ++		10749827	1					
ANR	10750091	Identifier	s		10749827	0					
ANR	10750092	IncDec	++		10749827	1					
ANR	10750093	UnaryOperationExpression	* p		10749827	1					
ANR	10750094	UnaryOperator	*		10749827	0					
ANR	10750095	Identifier	p		10749827	1					
ANR	10750096	ExpressionStatement	* s ++ = '\\0'	159:14:4231:4242	10749827	1	True				
ANR	10750097	AssignmentExpression	* s ++ = '\\0'		10749827	0		=			
ANR	10750098	UnaryOperationExpression	* s ++		10749827	0					
ANR	10750099	UnaryOperator	*		10749827	0					
ANR	10750100	PostIncDecOperationExpression	s ++		10749827	1					
ANR	10750101	Identifier	s		10749827	0					
ANR	10750102	IncDec	++		10749827	1					
ANR	10750103	PrimaryExpression	'\\0'		10749827	1					
ANR	10750104	ElseStatement	else		10749827	0					
ANR	10750105	CompoundStatement		41:17:981:981	10749827	0					
ANR	10750106	IfStatement	if ( next - p > CHARSET_MAX - 1 )		10749827	0					
ANR	10750107	Condition	next - p > CHARSET_MAX - 1	162:18:4295:4320	10749827	0	True				
ANR	10750108	RelationalExpression	next - p > CHARSET_MAX - 1		10749827	0		>			
ANR	10750109	AdditiveExpression	next - p		10749827	0		-			
ANR	10750110	Identifier	next		10749827	0					
ANR	10750111	Identifier	p		10749827	1					
ANR	10750112	AdditiveExpression	CHARSET_MAX - 1		10749827	1		-			
ANR	10750113	Identifier	CHARSET_MAX		10749827	0					
ANR	10750114	PrimaryExpression	1		10749827	1					
ANR	10750115	BreakStatement	break ;	163:16:4339:4344	10749827	1	True				
ANR	10750116	WhileStatement	while ( p != next )		10749827	1					
ANR	10750117	Condition	p != next	164:21:4367:4375	10749827	0	True				
ANR	10750118	EqualityExpression	p != next		10749827	0		!=			
ANR	10750119	Identifier	p		10749827	0					
ANR	10750120	Identifier	next		10749827	1					
ANR	10750121	ExpressionStatement	* s ++ = * p ++	165:16:4394:4405	10749827	1	True				
ANR	10750122	AssignmentExpression	* s ++ = * p ++		10749827	0		=			
ANR	10750123	UnaryOperationExpression	* s ++		10749827	0					
ANR	10750124	UnaryOperator	*		10749827	0					
ANR	10750125	PostIncDecOperationExpression	s ++		10749827	1					
ANR	10750126	Identifier	s		10749827	0					
ANR	10750127	IncDec	++		10749827	1					
ANR	10750128	UnaryOperationExpression	* p ++		10749827	1					
ANR	10750129	UnaryOperator	*		10749827	0					
ANR	10750130	PostIncDecOperationExpression	p ++		10749827	1					
ANR	10750131	Identifier	p		10749827	0					
ANR	10750132	IncDec	++		10749827	1					
ANR	10750133	ExpressionStatement	* s = 0	166:14:4421:4427	10749827	2	True				
ANR	10750134	AssignmentExpression	* s = 0		10749827	0		=			
ANR	10750135	UnaryOperationExpression	* s		10749827	0					
ANR	10750136	UnaryOperator	*		10749827	0					
ANR	10750137	Identifier	s		10749827	1					
ANR	10750138	PrimaryExpression	0		10749827	1					
ANR	10750139	BreakStatement	break ;	167:14:4443:4448	10749827	3	True				
ANR	10750140	BreakStatement	break ;	171:8:4494:4499	10749827	2	True				
ANR	10750141	ElseStatement	else		10749827	0					
ANR	10750142	ExpressionStatement	p = getTok ( & next )	175:4:4526:4543	10749827	0	True				
ANR	10750143	AssignmentExpression	p = getTok ( & next )		10749827	0		=			
ANR	10750144	Identifier	p		10749827	0					
ANR	10750145	CallExpression	getTok ( & next )		10749827	1					
ANR	10750146	Callee	getTok		10749827	0					
ANR	10750147	Identifier	getTok		10749827	0					
ANR	10750148	ArgumentList	& next		10749827	1					
ANR	10750149	Argument	& next		10749827	0					
ANR	10750150	UnaryOperationExpression	& next		10749827	0					
ANR	10750151	UnaryOperator	&		10749827	0					
ANR	10750152	Identifier	next		10749827	1					
ANR	10750153	ReturnType	void		10749827	1					
ANR	10750154	Identifier	getXMLCharset		10749827	2					
ANR	10750155	ParameterList	"const char * buf , char * charset"		10749827	3					
ANR	10750156	Parameter	const char * buf	120:14:3261:3275	10749827	0	True				
ANR	10750157	ParameterType	const char *		10749827	0					
ANR	10750158	Identifier	buf		10749827	1					
ANR	10750159	Parameter	char * charset	120:31:3278:3290	10749827	1	True				
ANR	10750160	ParameterType	char *		10749827	0					
ANR	10750161	Identifier	charset		10749827	1					
ANR	10750162	CFGEntryNode	ENTRY		10749827		True				
ANR	10750163	CFGExitNode	EXIT		10749827		True				
ANR	10750164	Symbol	next		10749827						
ANR	10750165	Symbol	* s ++		10749827						
ANR	10750166	Symbol	charset		10749827						
ANR	10750167	Symbol	& next		10749827						
ANR	10750168	Symbol	CHARSET_MAX		10749827						
ANR	10750169	Symbol	* p ++		10749827						
ANR	10750170	Symbol	matchkey		10749827						
ANR	10750171	Symbol	p		10749827						
ANR	10750172	Symbol	buf		10749827						
ANR	10750173	Symbol	getTok		10749827						
ANR	10750174	Symbol	s		10749827						
ANR	10750175	Symbol	* p		10749827						
ANR	10750176	Symbol	* charset		10749827						
ANR	10750177	Symbol	* s		10749827						
ANR	10750178	Function	main	183:0:4585:4781							
ANR	10750179	FunctionDef	"main (int argc , char * argv [ ])"		10750178	0					
ANR	10750180	CompoundStatement		185:0:4618:4781	10750178	0					
ANR	10750181	IdentifierDeclStatement	char buf [ CHARSET_MAX ] ;	186:2:4622:4643	10750178	0	True				
ANR	10750182	IdentifierDecl	buf [ CHARSET_MAX ]		10750178	0					
ANR	10750183	IdentifierDeclType	char [ CHARSET_MAX ]		10750178	0					
ANR	10750184	Identifier	buf		10750178	1					
ANR	10750185	Identifier	CHARSET_MAX		10750178	2					
ANR	10750186	IfStatement	if ( argc <= 1 )		10750178	1					
ANR	10750187	Condition	argc <= 1	187:6:4651:4659	10750178	0	True				
ANR	10750188	RelationalExpression	argc <= 1		10750178	0		<=			
ANR	10750189	Identifier	argc		10750178	0					
ANR	10750190	PrimaryExpression	1		10750178	1					
ANR	10750191	ReturnStatement	return 1 ;	188:4:4666:4674	10750178	1	True				
ANR	10750192	PrimaryExpression	1		10750178	0					
ANR	10750193	ExpressionStatement	"printf ( ""%s\\n"" , argv [ 1 ] )"	189:2:4678:4701	10750178	2	True				
ANR	10750194	CallExpression	"printf ( ""%s\\n"" , argv [ 1 ] )"		10750178	0					
ANR	10750195	Callee	printf		10750178	0					
ANR	10750196	Identifier	printf		10750178	0					
ANR	10750197	ArgumentList	"""%s\\n"""		10750178	1					
ANR	10750198	Argument	"""%s\\n"""		10750178	0					
ANR	10750199	PrimaryExpression	"""%s\\n"""		10750178	0					
ANR	10750200	Argument	argv [ 1 ]		10750178	1					
ANR	10750201	ArrayIndexing	argv [ 1 ]		10750178	0					
ANR	10750202	Identifier	argv		10750178	0					
ANR	10750203	PrimaryExpression	1		10750178	1					
ANR	10750204	ExpressionStatement	"getXMLCharset ( argv [ 1 ] , buf )"	190:2:4705:4732	10750178	3	True				
ANR	10750205	CallExpression	"getXMLCharset ( argv [ 1 ] , buf )"		10750178	0					
ANR	10750206	Callee	getXMLCharset		10750178	0					
ANR	10750207	Identifier	getXMLCharset		10750178	0					
ANR	10750208	ArgumentList	argv [ 1 ]		10750178	1					
ANR	10750209	Argument	argv [ 1 ]		10750178	0					
ANR	10750210	ArrayIndexing	argv [ 1 ]		10750178	0					
ANR	10750211	Identifier	argv		10750178	0					
ANR	10750212	PrimaryExpression	1		10750178	1					
ANR	10750213	Argument	buf		10750178	1					
ANR	10750214	Identifier	buf		10750178	0					
ANR	10750215	ExpressionStatement	"printf ( ""charset=\\""%s\\""\\n"" , buf )"	191:2:4736:4767	10750178	4	True				
ANR	10750216	CallExpression	"printf ( ""charset=\\""%s\\""\\n"" , buf )"		10750178	0					
ANR	10750217	Callee	printf		10750178	0					
ANR	10750218	Identifier	printf		10750178	0					
ANR	10750219	ArgumentList	"""charset=\\""%s\\""\\n"""		10750178	1					
ANR	10750220	Argument	"""charset=\\""%s\\""\\n"""		10750178	0					
ANR	10750221	PrimaryExpression	"""charset=\\""%s\\""\\n"""		10750178	0					
ANR	10750222	Argument	buf		10750178	1					
ANR	10750223	Identifier	buf		10750178	0					
ANR	10750224	ReturnStatement	return 0 ;	192:2:4771:4779	10750178	5	True				
ANR	10750225	PrimaryExpression	0		10750178	0					
ANR	10750226	ReturnType	int		10750178	1					
ANR	10750227	Identifier	main		10750178	2					
ANR	10750228	ParameterList	"int argc , char * argv [ ]"		10750178	3					
ANR	10750229	Parameter	int argc	184:5:4594:4601	10750178	0	True				
ANR	10750230	ParameterType	int		10750178	0					
ANR	10750231	Identifier	argc		10750178	1					
ANR	10750232	Parameter	char * argv [ ]	184:15:4604:4615	10750178	1	True				
ANR	10750233	ParameterType	char * [ ]		10750178	0					
ANR	10750234	Identifier	argv		10750178	1					
ANR	10750235	CFGEntryNode	ENTRY		10750178		True				
ANR	10750236	CFGExitNode	EXIT		10750178		True				
ANR	10750237	Symbol	argc		10750178						
ANR	10750238	Symbol	buf		10750178						
ANR	10750239	Symbol	* argv		10750178						
ANR	10750240	Symbol	argv		10750178						
