command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8196692	File	data/converged/CVE-2018-16863_ghostpdl/pcl_pl_plfont.c								
ANR	8196693	Function	pl_free_font	55:0:1523:2759							
ANR	8196694	FunctionDef	"pl_free_font (gs_memory_t * mem , void * plf , client_name_t cname)"		8196693	0					
ANR	8196695	CompoundStatement		57:0:1592:2759	8196693	0					
ANR	8196696	IdentifierDeclStatement	pl_font_t * plfont = plf ;	58:4:1598:1621	8196693	0	True				
ANR	8196697	IdentifierDecl	* plfont = plf		8196693	0					
ANR	8196698	IdentifierDeclType	pl_font_t *		8196693	0					
ANR	8196699	Identifier	plfont		8196693	1					
ANR	8196700	AssignmentExpression	* plfont = plf		8196693	2		=			
ANR	8196701	Identifier	plf		8196693	0					
ANR	8196702	Identifier	plf		8196693	1					
ANR	8196703	IfStatement	if ( ! plfont -> data_are_permanent )		8196693	1					
ANR	8196704	Condition	! plfont -> data_are_permanent	61:8:1663:1689	8196693	0	True				
ANR	8196705	UnaryOperationExpression	! plfont -> data_are_permanent		8196693	0					
ANR	8196706	UnaryOperator	!		8196693	0					
ANR	8196707	PtrMemberAccess	plfont -> data_are_permanent		8196693	1					
ANR	8196708	Identifier	plfont		8196693	0					
ANR	8196709	Identifier	data_are_permanent		8196693	1					
ANR	8196710	CompoundStatement		5:37:99:99	8196693	1					
ANR	8196711	IfStatement	if ( plfont -> glyphs . table )		8196693	0					
ANR	8196712	Condition	plfont -> glyphs . table	62:12:1706:1725	8196693	0	True				
ANR	8196713	MemberAccess	plfont -> glyphs . table		8196693	0					
ANR	8196714	PtrMemberAccess	plfont -> glyphs		8196693	0					
ANR	8196715	Identifier	plfont		8196693	0					
ANR	8196716	Identifier	glyphs		8196693	1					
ANR	8196717	Identifier	table		8196693	1					
ANR	8196718	CompoundStatement		7:12:149:155	8196693	1					
ANR	8196719	IdentifierDeclStatement	uint i ;	63:12:1742:1748	8196693	0	True				
ANR	8196720	IdentifierDecl	i		8196693	0					
ANR	8196721	IdentifierDeclType	uint		8196693	0					
ANR	8196722	Identifier	i		8196693	1					
ANR	8196723	ForStatement	for ( i = plfont -> glyphs . size ; i > 0 ; )		8196693	1					
ANR	8196724	ForInit	i = plfont -> glyphs . size ;	65:17:1768:1791	8196693	0	True				
ANR	8196725	AssignmentExpression	i = plfont -> glyphs . size		8196693	0		=			
ANR	8196726	Identifier	i		8196693	0					
ANR	8196727	MemberAccess	plfont -> glyphs . size		8196693	1					
ANR	8196728	PtrMemberAccess	plfont -> glyphs		8196693	0					
ANR	8196729	Identifier	plfont		8196693	0					
ANR	8196730	Identifier	glyphs		8196693	1					
ANR	8196731	Identifier	size		8196693	1					
ANR	8196732	Condition	i > 0	65:42:1793:1797	8196693	1	True				
ANR	8196733	RelationalExpression	i > 0		8196693	0		>			
ANR	8196734	Identifier	i		8196693	0					
ANR	8196735	PrimaryExpression	0		8196693	1					
ANR	8196736	CompoundStatement		10:16:226:277	8196693	2					
ANR	8196737	IdentifierDeclStatement	void * data = ( void * ) plfont -> glyphs . table [ -- i ] . data ;	66:16:1819:1870	8196693	0	True				
ANR	8196738	IdentifierDecl	* data = ( void * ) plfont -> glyphs . table [ -- i ] . data		8196693	0					
ANR	8196739	IdentifierDeclType	void *		8196693	0					
ANR	8196740	Identifier	data		8196693	1					
ANR	8196741	AssignmentExpression	* data = ( void * ) plfont -> glyphs . table [ -- i ] . data		8196693	2		=			
ANR	8196742	Identifier	data		8196693	0					
ANR	8196743	CastExpression	( void * ) plfont -> glyphs . table [ -- i ] . data		8196693	1					
ANR	8196744	CastTarget	void *		8196693	0					
ANR	8196745	MemberAccess	plfont -> glyphs . table [ -- i ] . data		8196693	1					
ANR	8196746	ArrayIndexing	plfont -> glyphs . table [ -- i ]		8196693	0					
ANR	8196747	MemberAccess	plfont -> glyphs . table		8196693	0					
ANR	8196748	PtrMemberAccess	plfont -> glyphs		8196693	0					
ANR	8196749	Identifier	plfont		8196693	0					
ANR	8196750	Identifier	glyphs		8196693	1					
ANR	8196751	Identifier	table		8196693	1					
ANR	8196752	UnaryExpression	-- i		8196693	1					
ANR	8196753	IncDec	--		8196693	0					
ANR	8196754	Identifier	i		8196693	1					
ANR	8196755	Identifier	data		8196693	1					
ANR	8196756	IfStatement	if ( data )		8196693	1					
ANR	8196757	Condition	data	68:20:1893:1896	8196693	0	True				
ANR	8196758	Identifier	data		8196693	0					
ANR	8196759	ExpressionStatement	"gs_free_object ( mem , data , cname )"	69:20:1919:1951	8196693	1	True				
ANR	8196760	CallExpression	"gs_free_object ( mem , data , cname )"		8196693	0					
ANR	8196761	Callee	gs_free_object		8196693	0					
ANR	8196762	Identifier	gs_free_object		8196693	0					
ANR	8196763	ArgumentList	mem		8196693	1					
ANR	8196764	Argument	mem		8196693	0					
ANR	8196765	Identifier	mem		8196693	0					
ANR	8196766	Argument	data		8196693	1					
ANR	8196767	Identifier	data		8196693	0					
ANR	8196768	Argument	cname		8196693	2					
ANR	8196769	Identifier	cname		8196693	0					
ANR	8196770	ExpressionStatement	"gs_free_object ( mem , ( void * ) plfont -> header , cname )"	72:8:1985:2035	8196693	1	True				
ANR	8196771	CallExpression	"gs_free_object ( mem , ( void * ) plfont -> header , cname )"		8196693	0					
ANR	8196772	Callee	gs_free_object		8196693	0					
ANR	8196773	Identifier	gs_free_object		8196693	0					
ANR	8196774	ArgumentList	mem		8196693	1					
ANR	8196775	Argument	mem		8196693	0					
ANR	8196776	Identifier	mem		8196693	0					
ANR	8196777	Argument	( void * ) plfont -> header		8196693	1					
ANR	8196778	CastExpression	( void * ) plfont -> header		8196693	0					
ANR	8196779	CastTarget	void *		8196693	0					
ANR	8196780	PtrMemberAccess	plfont -> header		8196693	1					
ANR	8196781	Identifier	plfont		8196693	0					
ANR	8196782	Identifier	header		8196693	1					
ANR	8196783	Argument	cname		8196693	2					
ANR	8196784	Identifier	cname		8196693	0					
ANR	8196785	ExpressionStatement	plfont -> header = 0	73:8:2045:2063	8196693	2	True				
ANR	8196786	AssignmentExpression	plfont -> header = 0		8196693	0		=			
ANR	8196787	PtrMemberAccess	plfont -> header		8196693	0					
ANR	8196788	Identifier	plfont		8196693	0					
ANR	8196789	Identifier	header		8196693	1					
ANR	8196790	PrimaryExpression	0		8196693	1					
ANR	8196791	ExpressionStatement	pl_font_glyph_width_cache_remove_nodes ( plfont )	77:4:2151:2197	8196693	2	True				
ANR	8196792	CallExpression	pl_font_glyph_width_cache_remove_nodes ( plfont )		8196693	0					
ANR	8196793	Callee	pl_font_glyph_width_cache_remove_nodes		8196693	0					
ANR	8196794	Identifier	pl_font_glyph_width_cache_remove_nodes		8196693	0					
ANR	8196795	ArgumentList	plfont		8196693	1					
ANR	8196796	Argument	plfont		8196693	0					
ANR	8196797	Identifier	plfont		8196693	0					
ANR	8196798	ExpressionStatement	"gs_free_object ( mem , ( void * ) plfont -> char_glyphs . table , cname )"	80:4:2241:2302	8196693	3	True				
ANR	8196799	CallExpression	"gs_free_object ( mem , ( void * ) plfont -> char_glyphs . table , cname )"		8196693	0					
ANR	8196800	Callee	gs_free_object		8196693	0					
ANR	8196801	Identifier	gs_free_object		8196693	0					
ANR	8196802	ArgumentList	mem		8196693	1					
ANR	8196803	Argument	mem		8196693	0					
ANR	8196804	Identifier	mem		8196693	0					
ANR	8196805	Argument	( void * ) plfont -> char_glyphs . table		8196693	1					
ANR	8196806	CastExpression	( void * ) plfont -> char_glyphs . table		8196693	0					
ANR	8196807	CastTarget	void *		8196693	0					
ANR	8196808	MemberAccess	plfont -> char_glyphs . table		8196693	1					
ANR	8196809	PtrMemberAccess	plfont -> char_glyphs		8196693	0					
ANR	8196810	Identifier	plfont		8196693	0					
ANR	8196811	Identifier	char_glyphs		8196693	1					
ANR	8196812	Identifier	table		8196693	1					
ANR	8196813	Argument	cname		8196693	2					
ANR	8196814	Identifier	cname		8196693	0					
ANR	8196815	ExpressionStatement	"gs_free_object ( mem , ( void * ) plfont -> glyphs . table , cname )"	81:4:2308:2364	8196693	4	True				
ANR	8196816	CallExpression	"gs_free_object ( mem , ( void * ) plfont -> glyphs . table , cname )"		8196693	0					
ANR	8196817	Callee	gs_free_object		8196693	0					
ANR	8196818	Identifier	gs_free_object		8196693	0					
ANR	8196819	ArgumentList	mem		8196693	1					
ANR	8196820	Argument	mem		8196693	0					
ANR	8196821	Identifier	mem		8196693	0					
ANR	8196822	Argument	( void * ) plfont -> glyphs . table		8196693	1					
ANR	8196823	CastExpression	( void * ) plfont -> glyphs . table		8196693	0					
ANR	8196824	CastTarget	void *		8196693	0					
ANR	8196825	MemberAccess	plfont -> glyphs . table		8196693	1					
ANR	8196826	PtrMemberAccess	plfont -> glyphs		8196693	0					
ANR	8196827	Identifier	plfont		8196693	0					
ANR	8196828	Identifier	glyphs		8196693	1					
ANR	8196829	Identifier	table		8196693	1					
ANR	8196830	Argument	cname		8196693	2					
ANR	8196831	Identifier	cname		8196693	0					
ANR	8196832	IfStatement	if ( plfont -> pfont )		8196693	5					
ANR	8196833	Condition	plfont -> pfont	82:8:2374:2386	8196693	0	True				
ANR	8196834	PtrMemberAccess	plfont -> pfont		8196693	0					
ANR	8196835	Identifier	plfont		8196693	0					
ANR	8196836	Identifier	pfont		8196693	1					
ANR	8196837	CompoundStatement		26:23:796:796	8196693	1					
ANR	8196838	ExpressionStatement	gs_purge_font_from_char_caches_completely ( plfont -> pfont )	83:8:2448:2504	8196693	0	True				
ANR	8196839	CallExpression	gs_purge_font_from_char_caches_completely ( plfont -> pfont )		8196693	0					
ANR	8196840	Callee	gs_purge_font_from_char_caches_completely		8196693	0					
ANR	8196841	Identifier	gs_purge_font_from_char_caches_completely		8196693	0					
ANR	8196842	ArgumentList	plfont -> pfont		8196693	1					
ANR	8196843	Argument	plfont -> pfont		8196693	0					
ANR	8196844	PtrMemberAccess	plfont -> pfont		8196693	0					
ANR	8196845	Identifier	plfont		8196693	0					
ANR	8196846	Identifier	pfont		8196693	1					
ANR	8196847	ExpressionStatement	gs_purge_font ( plfont -> pfont )	84:8:2514:2542	8196693	1	True				
ANR	8196848	CallExpression	gs_purge_font ( plfont -> pfont )		8196693	0					
ANR	8196849	Callee	gs_purge_font		8196693	0					
ANR	8196850	Identifier	gs_purge_font		8196693	0					
ANR	8196851	ArgumentList	plfont -> pfont		8196693	1					
ANR	8196852	Argument	plfont -> pfont		8196693	0					
ANR	8196853	PtrMemberAccess	plfont -> pfont		8196693	0					
ANR	8196854	Identifier	plfont		8196693	0					
ANR	8196855	Identifier	pfont		8196693	1					
ANR	8196856	ExpressionStatement	"gs_free_object ( mem , plfont -> pfont , cname )"	85:8:2552:2593	8196693	2	True				
ANR	8196857	CallExpression	"gs_free_object ( mem , plfont -> pfont , cname )"		8196693	0					
ANR	8196858	Callee	gs_free_object		8196693	0					
ANR	8196859	Identifier	gs_free_object		8196693	0					
ANR	8196860	ArgumentList	mem		8196693	1					
ANR	8196861	Argument	mem		8196693	0					
ANR	8196862	Identifier	mem		8196693	0					
ANR	8196863	Argument	plfont -> pfont		8196693	1					
ANR	8196864	PtrMemberAccess	plfont -> pfont		8196693	0					
ANR	8196865	Identifier	plfont		8196693	0					
ANR	8196866	Identifier	pfont		8196693	1					
ANR	8196867	Argument	cname		8196693	2					
ANR	8196868	Identifier	cname		8196693	0					
ANR	8196869	IfStatement	if ( plfont -> font_file )		8196693	6					
ANR	8196870	Condition	plfont -> font_file	87:8:2609:2625	8196693	0	True				
ANR	8196871	PtrMemberAccess	plfont -> font_file		8196693	0					
ANR	8196872	Identifier	plfont		8196693	0					
ANR	8196873	Identifier	font_file		8196693	1					
ANR	8196874	CompoundStatement		31:27:1035:1035	8196693	1					
ANR	8196875	ExpressionStatement	"gs_free_object ( mem , plfont -> font_file , cname )"	88:8:2638:2683	8196693	0	True				
ANR	8196876	CallExpression	"gs_free_object ( mem , plfont -> font_file , cname )"		8196693	0					
ANR	8196877	Callee	gs_free_object		8196693	0					
ANR	8196878	Identifier	gs_free_object		8196693	0					
ANR	8196879	ArgumentList	mem		8196693	1					
ANR	8196880	Argument	mem		8196693	0					
ANR	8196881	Identifier	mem		8196693	0					
ANR	8196882	Argument	plfont -> font_file		8196693	1					
ANR	8196883	PtrMemberAccess	plfont -> font_file		8196693	0					
ANR	8196884	Identifier	plfont		8196693	0					
ANR	8196885	Identifier	font_file		8196693	1					
ANR	8196886	Argument	cname		8196693	2					
ANR	8196887	Identifier	cname		8196693	0					
ANR	8196888	ExpressionStatement	plfont -> font_file = 0	89:8:2693:2714	8196693	1	True				
ANR	8196889	AssignmentExpression	plfont -> font_file = 0		8196693	0		=			
ANR	8196890	PtrMemberAccess	plfont -> font_file		8196693	0					
ANR	8196891	Identifier	plfont		8196693	0					
ANR	8196892	Identifier	font_file		8196693	1					
ANR	8196893	PrimaryExpression	0		8196693	1					
ANR	8196894	ExpressionStatement	"gs_free_object ( mem , plf , cname )"	91:4:2726:2757	8196693	7	True				
ANR	8196895	CallExpression	"gs_free_object ( mem , plf , cname )"		8196693	0					
ANR	8196896	Callee	gs_free_object		8196693	0					
ANR	8196897	Identifier	gs_free_object		8196693	0					
ANR	8196898	ArgumentList	mem		8196693	1					
ANR	8196899	Argument	mem		8196693	0					
ANR	8196900	Identifier	mem		8196693	0					
ANR	8196901	Argument	plf		8196693	1					
ANR	8196902	Identifier	plf		8196693	0					
ANR	8196903	Argument	cname		8196693	2					
ANR	8196904	Identifier	cname		8196693	0					
ANR	8196905	ReturnType	void		8196693	1					
ANR	8196906	Identifier	pl_free_font		8196693	2					
ANR	8196907	ParameterList	"gs_memory_t * mem , void * plf , client_name_t cname"		8196693	3					
ANR	8196908	Parameter	gs_memory_t * mem	56:13:1541:1557	8196693	0	True				
ANR	8196909	ParameterType	gs_memory_t *		8196693	0					
ANR	8196910	Identifier	mem		8196693	1					
ANR	8196911	Parameter	void * plf	56:32:1560:1568	8196693	1	True				
ANR	8196912	ParameterType	void *		8196693	0					
ANR	8196913	Identifier	plf		8196693	1					
ANR	8196914	Parameter	client_name_t cname	56:43:1571:1589	8196693	2	True				
ANR	8196915	ParameterType	client_name_t		8196693	0					
ANR	8196916	Identifier	cname		8196693	1					
ANR	8196917	CFGEntryNode	ENTRY		8196693		True				
ANR	8196918	CFGExitNode	EXIT		8196693		True				
ANR	8196919	Symbol	plfont -> glyphs . table		8196693						
ANR	8196920	Symbol	* * plfont		8196693						
ANR	8196921	Symbol	data		8196693						
ANR	8196922	Symbol	plfont -> glyphs . table [ -- i ] . data		8196693						
ANR	8196923	Symbol	plfont -> header		8196693						
ANR	8196924	Symbol	cname		8196693						
ANR	8196925	Symbol	plfont -> char_glyphs		8196693						
ANR	8196926	Symbol	i		8196693						
ANR	8196927	Symbol	plf		8196693						
ANR	8196928	Symbol	plfont		8196693						
ANR	8196929	Symbol	plfont -> data_are_permanent		8196693						
ANR	8196930	Symbol	plfont -> glyphs . size		8196693						
ANR	8196931	Symbol	* i		8196693						
ANR	8196932	Symbol	* plfont -> glyphs		8196693						
ANR	8196933	Symbol	mem		8196693						
ANR	8196934	Symbol	plfont -> pfont		8196693						
ANR	8196935	Symbol	* plfont		8196693						
ANR	8196936	Symbol	plfont -> glyphs		8196693						
ANR	8196937	Symbol	* plfont -> glyphs . table		8196693						
ANR	8196938	Symbol	plfont -> font_file		8196693						
ANR	8196939	Symbol	plfont -> char_glyphs . table		8196693						
ANR	8196940	DeclStmt									
ANR	8196941	Decl							const char	const char * [ 258 ]	pl_mac_names
ANR	8196942	Function	pl_glyph_name	357:0:6514:10401							
ANR	8196943	FunctionDef	"pl_glyph_name (gs_font * pfont , gs_glyph glyph , gs_const_string * pstr)"		8196942	0					
ANR	8196944	CompoundStatement		359:0:6596:10401	8196942	0					
ANR	8196945	IdentifierDeclStatement	uint table_length ;	360:4:6602:6619	8196942	0	True				
ANR	8196946	IdentifierDecl	table_length		8196942	0					
ANR	8196947	IdentifierDeclType	uint		8196942	0					
ANR	8196948	Identifier	table_length		8196942	1					
ANR	8196949	IdentifierDeclStatement	ulong table_offset ;	361:4:6625:6643	8196942	1	True				
ANR	8196950	IdentifierDecl	table_offset		8196942	0					
ANR	8196951	IdentifierDeclType	ulong		8196942	0					
ANR	8196952	Identifier	table_offset		8196942	1					
ANR	8196953	IfStatement	if ( glyph >= GS_MIN_GLYPH_INDEX )		8196942	2					
ANR	8196954	Condition	glyph >= GS_MIN_GLYPH_INDEX	363:8:6654:6680	8196942	0	True				
ANR	8196955	RelationalExpression	glyph >= GS_MIN_GLYPH_INDEX		8196942	0		>=			
ANR	8196956	Identifier	glyph		8196942	0					
ANR	8196957	Identifier	GS_MIN_GLYPH_INDEX		8196942	1					
ANR	8196958	ExpressionStatement	glyph -= GS_MIN_GLYPH_INDEX	364:8:6691:6718	8196942	1	True				
ANR	8196959	AssignmentExpression	glyph -= GS_MIN_GLYPH_INDEX		8196942	0		-=			
ANR	8196960	Identifier	glyph		8196942	0					
ANR	8196961	Identifier	GS_MIN_GLYPH_INDEX		8196942	1					
ANR	8196962	IfStatement	if ( pfont -> FontType != ft_TrueType )		8196942	3					
ANR	8196963	Condition	pfont -> FontType != ft_TrueType	367:8:6778:6807	8196942	0	True				
ANR	8196964	EqualityExpression	pfont -> FontType != ft_TrueType		8196942	0		!=			
ANR	8196965	PtrMemberAccess	pfont -> FontType		8196942	0					
ANR	8196966	Identifier	pfont		8196942	0					
ANR	8196967	Identifier	FontType		8196942	1					
ANR	8196968	Identifier	ft_TrueType		8196942	1					
ANR	8196969	CompoundStatement		9:40:213:213	8196942	1					
ANR	8196970	ExpressionStatement	glyph -= 29	368:8:6820:6831	8196942	0	True				
ANR	8196971	AssignmentExpression	glyph -= 29		8196942	0		-=			
ANR	8196972	Identifier	glyph		8196942	0					
ANR	8196973	PrimaryExpression	29		8196942	1					
ANR	8196974	IfStatement	if ( glyph < 258 )		8196942	1					
ANR	8196975	Condition	glyph < 258	369:12:6845:6855	8196942	0	True				
ANR	8196976	RelationalExpression	glyph < 258		8196942	0		<			
ANR	8196977	Identifier	glyph		8196942	0					
ANR	8196978	PrimaryExpression	258		8196942	1					
ANR	8196979	CompoundStatement		11:25:261:261	8196942	1					
ANR	8196980	ExpressionStatement	pstr -> data = ( const byte * ) pl_mac_names [ glyph ]	370:12:6872:6918	8196942	0	True				
ANR	8196981	AssignmentExpression	pstr -> data = ( const byte * ) pl_mac_names [ glyph ]		8196942	0		=			
ANR	8196982	PtrMemberAccess	pstr -> data		8196942	0					
ANR	8196983	Identifier	pstr		8196942	0					
ANR	8196984	Identifier	data		8196942	1					
ANR	8196985	CastExpression	( const byte * ) pl_mac_names [ glyph ]		8196942	1					
ANR	8196986	CastTarget	const byte *		8196942	0					
ANR	8196987	ArrayIndexing	pl_mac_names [ glyph ]		8196942	1					
ANR	8196988	Identifier	pl_mac_names		8196942	0					
ANR	8196989	Identifier	glyph		8196942	1					
ANR	8196990	ExpressionStatement	pstr -> size = strlen ( ( const char * ) pstr -> data )	371:12:6932:6977	8196942	1	True				
ANR	8196991	AssignmentExpression	pstr -> size = strlen ( ( const char * ) pstr -> data )		8196942	0		=			
ANR	8196992	PtrMemberAccess	pstr -> size		8196942	0					
ANR	8196993	Identifier	pstr		8196942	0					
ANR	8196994	Identifier	size		8196942	1					
ANR	8196995	CallExpression	strlen ( ( const char * ) pstr -> data )		8196942	1					
ANR	8196996	Callee	strlen		8196942	0					
ANR	8196997	Identifier	strlen		8196942	0					
ANR	8196998	ArgumentList	( const char * ) pstr -> data		8196942	1					
ANR	8196999	Argument	( const char * ) pstr -> data		8196942	0					
ANR	8197000	CastExpression	( const char * ) pstr -> data		8196942	0					
ANR	8197001	CastTarget	const char *		8196942	0					
ANR	8197002	PtrMemberAccess	pstr -> data		8196942	1					
ANR	8197003	Identifier	pstr		8196942	0					
ANR	8197004	Identifier	data		8196942	1					
ANR	8197005	ReturnStatement	return 0 ;	372:12:6991:6999	8196942	2	True				
ANR	8197006	PrimaryExpression	0		8196942	0					
ANR	8197007	ElseStatement	else		8196942	0					
ANR	8197008	CompoundStatement		15:15:419:419	8196942	0					
ANR	8197009	ExpressionStatement	"if_debug1m ( '=' , pfont -> memory , ""[=]glyph index %lx out of range\\n"" , ( ulong ) glyph )"	374:12:7030:7135	8196942	0	True				
ANR	8197010	CallExpression	"if_debug1m ( '=' , pfont -> memory , ""[=]glyph index %lx out of range\\n"" , ( ulong ) glyph )"		8196942	0					
ANR	8197011	Callee	if_debug1m		8196942	0					
ANR	8197012	Identifier	if_debug1m		8196942	0					
ANR	8197013	ArgumentList	'='		8196942	1					
ANR	8197014	Argument	'='		8196942	0					
ANR	8197015	PrimaryExpression	'='		8196942	0					
ANR	8197016	Argument	pfont -> memory		8196942	1					
ANR	8197017	PtrMemberAccess	pfont -> memory		8196942	0					
ANR	8197018	Identifier	pfont		8196942	0					
ANR	8197019	Identifier	memory		8196942	1					
ANR	8197020	Argument	"""[=]glyph index %lx out of range\\n"""		8196942	2					
ANR	8197021	PrimaryExpression	"""[=]glyph index %lx out of range\\n"""		8196942	0					
ANR	8197022	Argument	( ulong ) glyph		8196942	3					
ANR	8197023	CastExpression	( ulong ) glyph		8196942	0					
ANR	8197024	CastTarget	ulong		8196942	0					
ANR	8197025	Identifier	glyph		8196942	1					
ANR	8197026	ReturnStatement	return - 1 ;	376:12:7149:7158	8196942	1	True				
ANR	8197027	UnaryOperationExpression	- 1		8196942	0					
ANR	8197028	UnaryOperator	-		8196942	0					
ANR	8197029	PrimaryExpression	1		8196942	1					
ANR	8197030	ExpressionStatement	"table_offset = tt_find_table ( ( gs_font_type42 * ) pfont , ""post"" , & table_length )"	380:4:7181:7266	8196942	4	True				
ANR	8197031	AssignmentExpression	"table_offset = tt_find_table ( ( gs_font_type42 * ) pfont , ""post"" , & table_length )"		8196942	0		=			
ANR	8197032	Identifier	table_offset		8196942	0					
ANR	8197033	CallExpression	"tt_find_table ( ( gs_font_type42 * ) pfont , ""post"" , & table_length )"		8196942	1					
ANR	8197034	Callee	tt_find_table		8196942	0					
ANR	8197035	Identifier	tt_find_table		8196942	0					
ANR	8197036	ArgumentList	( gs_font_type42 * ) pfont		8196942	1					
ANR	8197037	Argument	( gs_font_type42 * ) pfont		8196942	0					
ANR	8197038	CastExpression	( gs_font_type42 * ) pfont		8196942	0					
ANR	8197039	CastTarget	gs_font_type42 *		8196942	0					
ANR	8197040	Identifier	pfont		8196942	1					
ANR	8197041	Argument	"""post"""		8196942	1					
ANR	8197042	PrimaryExpression	"""post"""		8196942	0					
ANR	8197043	Argument	& table_length		8196942	2					
ANR	8197044	UnaryOperationExpression	& table_length		8196942	0					
ANR	8197045	UnaryOperator	&		8196942	0					
ANR	8197046	Identifier	table_length		8196942	1					
ANR	8197047	IfStatement	if ( table_offset == 0 )		8196942	5					
ANR	8197048	Condition	table_offset == 0	383:8:7300:7316	8196942	0	True				
ANR	8197049	EqualityExpression	table_offset == 0		8196942	0		==			
ANR	8197050	Identifier	table_offset		8196942	0					
ANR	8197051	PrimaryExpression	0		8196942	1					
ANR	8197052	ReturnStatement	return - 1 ;	384:8:7327:7336	8196942	1	True				
ANR	8197053	UnaryOperationExpression	- 1		8196942	0					
ANR	8197054	UnaryOperator	-		8196942	0					
ANR	8197055	PrimaryExpression	1		8196942	1					
ANR	8197056	IfStatement	if ( table_length == 0 )		8196942	6					
ANR	8197057	Condition	table_length == 0	386:8:7384:7400	8196942	0	True				
ANR	8197058	EqualityExpression	table_length == 0		8196942	0		==			
ANR	8197059	Identifier	table_length		8196942	0					
ANR	8197060	PrimaryExpression	0		8196942	1					
ANR	8197061	ReturnStatement	return - 1 ;	387:8:7411:7420	8196942	1	True				
ANR	8197062	UnaryOperationExpression	- 1		8196942	0					
ANR	8197063	UnaryOperator	-		8196942	0					
ANR	8197064	PrimaryExpression	1		8196942	1					
ANR	8197065	CompoundStatement		35:8:917:934	8196942	7					
ANR	8197066	IdentifierDeclStatement	ulong format ;	390:8:7437:7449	8196942	0	True				
ANR	8197067	IdentifierDecl	format		8196942	0					
ANR	8197068	IdentifierDeclType	ulong		8196942	0					
ANR	8197069	Identifier	format		8196942	1					
ANR	8197070	IdentifierDeclStatement	uint numGlyphs ;	391:8:7459:7473	8196942	1	True				
ANR	8197071	IdentifierDecl	numGlyphs		8196942	0					
ANR	8197072	IdentifierDeclType	uint		8196942	0					
ANR	8197073	Identifier	numGlyphs		8196942	1					
ANR	8197074	IdentifierDeclStatement	uint glyph_name_index ;	392:8:7483:7504	8196942	2	True				
ANR	8197075	IdentifierDecl	glyph_name_index		8196942	0					
ANR	8197076	IdentifierDeclType	uint		8196942	0					
ANR	8197077	Identifier	glyph_name_index		8196942	1					
ANR	8197078	IdentifierDeclStatement	const byte * postp ;	393:8:7514:7531	8196942	3	True				
ANR	8197079	IdentifierDecl	* postp		8196942	0					
ANR	8197080	IdentifierDeclType	const byte *		8196942	0					
ANR	8197081	Identifier	postp		8196942	1					
ANR	8197082	ExpressionStatement	"( ( gs_font_type42 * ) pfont ) -> data . string_proc ( ( gs_font_type42 * ) pfont , table_offset , table_length , & postp )"	395:8:7572:7784	8196942	4	True				
ANR	8197083	CallExpression	"( ( gs_font_type42 * ) pfont ) -> data . string_proc ( ( gs_font_type42 * ) pfont , table_offset , table_length , & postp )"		8196942	0					
ANR	8197084	Callee	( ( gs_font_type42 * ) pfont ) -> data . string_proc		8196942	0					
ANR	8197085	MemberAccess	( ( gs_font_type42 * ) pfont ) -> data . string_proc		8196942	0					
ANR	8197086	PtrMemberAccess	( ( gs_font_type42 * ) pfont ) -> data		8196942	0					
ANR	8197087	CastExpression	( gs_font_type42 * ) pfont		8196942	0					
ANR	8197088	CastTarget	gs_font_type42 *		8196942	0					
ANR	8197089	Identifier	pfont		8196942	1					
ANR	8197090	Identifier	data		8196942	1					
ANR	8197091	Identifier	string_proc		8196942	1					
ANR	8197092	ArgumentList	( gs_font_type42 * ) pfont		8196942	1					
ANR	8197093	Argument	( gs_font_type42 * ) pfont		8196942	0					
ANR	8197094	CastExpression	( gs_font_type42 * ) pfont		8196942	0					
ANR	8197095	CastTarget	gs_font_type42 *		8196942	0					
ANR	8197096	Identifier	pfont		8196942	1					
ANR	8197097	Argument	table_offset		8196942	1					
ANR	8197098	Identifier	table_offset		8196942	0					
ANR	8197099	Argument	table_length		8196942	2					
ANR	8197100	Identifier	table_length		8196942	0					
ANR	8197101	Argument	& postp		8196942	3					
ANR	8197102	UnaryOperationExpression	& postp		8196942	0					
ANR	8197103	UnaryOperator	&		8196942	0					
ANR	8197104	Identifier	postp		8196942	1					
ANR	8197105	ExpressionStatement	format = u32 ( postp )	398:8:7794:7813	8196942	5	True				
ANR	8197106	AssignmentExpression	format = u32 ( postp )		8196942	0		=			
ANR	8197107	Identifier	format		8196942	0					
ANR	8197108	CallExpression	u32 ( postp )		8196942	1					
ANR	8197109	Callee	u32		8196942	0					
ANR	8197110	Identifier	u32		8196942	0					
ANR	8197111	ArgumentList	postp		8196942	1					
ANR	8197112	Argument	postp		8196942	0					
ANR	8197113	Identifier	postp		8196942	0					
ANR	8197114	IfStatement	if ( format != 0x20000 )		8196942	6					
ANR	8197115	Condition	format != 0x20000	399:12:7827:7843	8196942	0	True				
ANR	8197116	EqualityExpression	format != 0x20000		8196942	0		!=			
ANR	8197117	Identifier	format		8196942	0					
ANR	8197118	PrimaryExpression	0x20000		8196942	1					
ANR	8197119	CompoundStatement		41:31:1249:1249	8196942	1					
ANR	8197120	ExpressionStatement	"dmprintf1 ( pfont -> memory , ""unknown post table format %lX\\n"" , format )"	403:12:8030:8119	8196942	0	True				
ANR	8197121	CallExpression	"dmprintf1 ( pfont -> memory , ""unknown post table format %lX\\n"" , format )"		8196942	0					
ANR	8197122	Callee	dmprintf1		8196942	0					
ANR	8197123	Identifier	dmprintf1		8196942	0					
ANR	8197124	ArgumentList	pfont -> memory		8196942	1					
ANR	8197125	Argument	pfont -> memory		8196942	0					
ANR	8197126	PtrMemberAccess	pfont -> memory		8196942	0					
ANR	8197127	Identifier	pfont		8196942	0					
ANR	8197128	Identifier	memory		8196942	1					
ANR	8197129	Argument	"""unknown post table format %lX\\n"""		8196942	1					
ANR	8197130	PrimaryExpression	"""unknown post table format %lX\\n"""		8196942	0					
ANR	8197131	Argument	format		8196942	2					
ANR	8197132	Identifier	format		8196942	0					
ANR	8197133	ReturnStatement	return - 1 ;	405:12:8133:8142	8196942	1	True				
ANR	8197134	UnaryOperationExpression	- 1		8196942	0					
ANR	8197135	UnaryOperator	-		8196942	0					
ANR	8197136	PrimaryExpression	1		8196942	1					
ANR	8197137	ExpressionStatement	numGlyphs = u16 ( postp + 32 )	408:8:8202:8229	8196942	7	True				
ANR	8197138	AssignmentExpression	numGlyphs = u16 ( postp + 32 )		8196942	0		=			
ANR	8197139	Identifier	numGlyphs		8196942	0					
ANR	8197140	CallExpression	u16 ( postp + 32 )		8196942	1					
ANR	8197141	Callee	u16		8196942	0					
ANR	8197142	Identifier	u16		8196942	0					
ANR	8197143	ArgumentList	postp + 32		8196942	1					
ANR	8197144	Argument	postp + 32		8196942	0					
ANR	8197145	AdditiveExpression	postp + 32		8196942	0		+			
ANR	8197146	Identifier	postp		8196942	0					
ANR	8197147	PrimaryExpression	32		8196942	1					
ANR	8197148	IfStatement	if ( glyph < 0 || glyph > numGlyphs - 1 )		8196942	8					
ANR	8197149	Condition	glyph < 0 || glyph > numGlyphs - 1	409:12:8243:8276	8196942	0	True				
ANR	8197150	OrExpression	glyph < 0 || glyph > numGlyphs - 1		8196942	0		||			
ANR	8197151	RelationalExpression	glyph < 0		8196942	0		<			
ANR	8197152	Identifier	glyph		8196942	0					
ANR	8197153	PrimaryExpression	0		8196942	1					
ANR	8197154	RelationalExpression	glyph > numGlyphs - 1		8196942	1		>			
ANR	8197155	Identifier	glyph		8196942	0					
ANR	8197156	AdditiveExpression	numGlyphs - 1		8196942	1		-			
ANR	8197157	Identifier	numGlyphs		8196942	0					
ANR	8197158	PrimaryExpression	1		8196942	1					
ANR	8197159	CompoundStatement		51:48:1682:1682	8196942	1					
ANR	8197160	ExpressionStatement	"if_debug1m ( '=' , pfont -> memory , ""[=]glyph index %lx out of range\\n"" , glyph )"	410:12:8293:8390	8196942	0	True				
ANR	8197161	CallExpression	"if_debug1m ( '=' , pfont -> memory , ""[=]glyph index %lx out of range\\n"" , glyph )"		8196942	0					
ANR	8197162	Callee	if_debug1m		8196942	0					
ANR	8197163	Identifier	if_debug1m		8196942	0					
ANR	8197164	ArgumentList	'='		8196942	1					
ANR	8197165	Argument	'='		8196942	0					
ANR	8197166	PrimaryExpression	'='		8196942	0					
ANR	8197167	Argument	pfont -> memory		8196942	1					
ANR	8197168	PtrMemberAccess	pfont -> memory		8196942	0					
ANR	8197169	Identifier	pfont		8196942	0					
ANR	8197170	Identifier	memory		8196942	1					
ANR	8197171	Argument	"""[=]glyph index %lx out of range\\n"""		8196942	2					
ANR	8197172	PrimaryExpression	"""[=]glyph index %lx out of range\\n"""		8196942	0					
ANR	8197173	Argument	glyph		8196942	3					
ANR	8197174	Identifier	glyph		8196942	0					
ANR	8197175	ReturnStatement	return - 1 ;	412:12:8404:8413	8196942	1	True				
ANR	8197176	UnaryOperationExpression	- 1		8196942	0					
ANR	8197177	UnaryOperator	-		8196942	0					
ANR	8197178	PrimaryExpression	1		8196942	1					
ANR	8197179	ExpressionStatement	glyph_name_index = u16 ( postp + 34 + ( glyph * 2 ) )	415:8:8506:8554	8196942	9	True				
ANR	8197180	AssignmentExpression	glyph_name_index = u16 ( postp + 34 + ( glyph * 2 ) )		8196942	0		=			
ANR	8197181	Identifier	glyph_name_index		8196942	0					
ANR	8197182	CallExpression	u16 ( postp + 34 + ( glyph * 2 ) )		8196942	1					
ANR	8197183	Callee	u16		8196942	0					
ANR	8197184	Identifier	u16		8196942	0					
ANR	8197185	ArgumentList	postp + 34 + ( glyph * 2 )		8196942	1					
ANR	8197186	Argument	postp + 34 + ( glyph * 2 )		8196942	0					
ANR	8197187	AdditiveExpression	postp + 34 + ( glyph * 2 )		8196942	0		+			
ANR	8197188	Identifier	postp		8196942	0					
ANR	8197189	AdditiveExpression	34 + ( glyph * 2 )		8196942	1		+			
ANR	8197190	PrimaryExpression	34		8196942	0					
ANR	8197191	MultiplicativeExpression	glyph * 2		8196942	1		*			
ANR	8197192	Identifier	glyph		8196942	0					
ANR	8197193	PrimaryExpression	2		8196942	1					
ANR	8197194	IfStatement	if ( glyph_name_index < 0 && glyph_name_index > 0x7fff )		8196942	10					
ANR	8197195	Condition	glyph_name_index < 0 && glyph_name_index > 0x7fff	417:12:8604:8652	8196942	0	True				
ANR	8197196	AndExpression	glyph_name_index < 0 && glyph_name_index > 0x7fff		8196942	0		&&			
ANR	8197197	RelationalExpression	glyph_name_index < 0		8196942	0		<			
ANR	8197198	Identifier	glyph_name_index		8196942	0					
ANR	8197199	PrimaryExpression	0		8196942	1					
ANR	8197200	RelationalExpression	glyph_name_index > 0x7fff		8196942	1		>			
ANR	8197201	Identifier	glyph_name_index		8196942	0					
ANR	8197202	PrimaryExpression	0x7fff		8196942	1					
ANR	8197203	ReturnStatement	return - 1 ;	418:12:8667:8676	8196942	1	True				
ANR	8197204	UnaryOperationExpression	- 1		8196942	0					
ANR	8197205	UnaryOperator	-		8196942	0					
ANR	8197206	PrimaryExpression	1		8196942	1					
ANR	8197207	IfStatement	if ( glyph_name_index < 258 )		8196942	11					
ANR	8197208	Condition	glyph_name_index < 258	420:12:8713:8734	8196942	0	True				
ANR	8197209	RelationalExpression	glyph_name_index < 258		8196942	0		<			
ANR	8197210	Identifier	glyph_name_index		8196942	0					
ANR	8197211	PrimaryExpression	258		8196942	1					
ANR	8197212	CompoundStatement		62:36:2140:2140	8196942	1					
ANR	8197213	ExpressionStatement	pstr -> data = ( const byte * ) pl_mac_names [ glyph_name_index ]	422:12:8752:8809	8196942	0	True				
ANR	8197214	AssignmentExpression	pstr -> data = ( const byte * ) pl_mac_names [ glyph_name_index ]		8196942	0		=			
ANR	8197215	PtrMemberAccess	pstr -> data		8196942	0					
ANR	8197216	Identifier	pstr		8196942	0					
ANR	8197217	Identifier	data		8196942	1					
ANR	8197218	CastExpression	( const byte * ) pl_mac_names [ glyph_name_index ]		8196942	1					
ANR	8197219	CastTarget	const byte *		8196942	0					
ANR	8197220	ArrayIndexing	pl_mac_names [ glyph_name_index ]		8196942	1					
ANR	8197221	Identifier	pl_mac_names		8196942	0					
ANR	8197222	Identifier	glyph_name_index		8196942	1					
ANR	8197223	ExpressionStatement	pstr -> size = strlen ( ( const char * ) pstr -> data )	423:12:8823:8868	8196942	1	True				
ANR	8197224	AssignmentExpression	pstr -> size = strlen ( ( const char * ) pstr -> data )		8196942	0		=			
ANR	8197225	PtrMemberAccess	pstr -> size		8196942	0					
ANR	8197226	Identifier	pstr		8196942	0					
ANR	8197227	Identifier	size		8196942	1					
ANR	8197228	CallExpression	strlen ( ( const char * ) pstr -> data )		8196942	1					
ANR	8197229	Callee	strlen		8196942	0					
ANR	8197230	Identifier	strlen		8196942	0					
ANR	8197231	ArgumentList	( const char * ) pstr -> data		8196942	1					
ANR	8197232	Argument	( const char * ) pstr -> data		8196942	0					
ANR	8197233	CastExpression	( const char * ) pstr -> data		8196942	0					
ANR	8197234	CastTarget	const char *		8196942	0					
ANR	8197235	PtrMemberAccess	pstr -> data		8196942	1					
ANR	8197236	Identifier	pstr		8196942	0					
ANR	8197237	Identifier	data		8196942	1					
ANR	8197238	ReturnStatement	return 0 ;	424:12:8882:8890	8196942	2	True				
ANR	8197239	PrimaryExpression	0		8196942	0					
ANR	8197240	ElseStatement	else		8196942	0					
ANR	8197241	CompoundStatement		71:12:2421:2478	8196942	0					
ANR	8197242	IdentifierDeclStatement	byte * mydata ;	427:12:8947:8959	8196942	0	True				
ANR	8197243	IdentifierDecl	* mydata		8196942	0					
ANR	8197244	IdentifierDeclType	byte *		8196942	0					
ANR	8197245	Identifier	mydata		8196942	1					
ANR	8197246	IdentifierDeclStatement	const byte * pascal_stringp = postp + 34 + ( numGlyphs * 2 ) ;	429:12:9018:9075	8196942	1	True				
ANR	8197247	IdentifierDecl	* pascal_stringp = postp + 34 + ( numGlyphs * 2 )		8196942	0					
ANR	8197248	IdentifierDeclType	const byte *		8196942	0					
ANR	8197249	Identifier	pascal_stringp		8196942	1					
ANR	8197250	AssignmentExpression	* pascal_stringp = postp + 34 + ( numGlyphs * 2 )		8196942	2		=			
ANR	8197251	Identifier	pascal_stringp		8196942	0					
ANR	8197252	AdditiveExpression	postp + 34 + ( numGlyphs * 2 )		8196942	1		+			
ANR	8197253	Identifier	postp		8196942	0					
ANR	8197254	AdditiveExpression	34 + ( numGlyphs * 2 )		8196942	1		+			
ANR	8197255	PrimaryExpression	34		8196942	0					
ANR	8197256	MultiplicativeExpression	numGlyphs * 2		8196942	1		*			
ANR	8197257	Identifier	numGlyphs		8196942	0					
ANR	8197258	PrimaryExpression	2		8196942	1					
ANR	8197259	ExpressionStatement	glyph_name_index -= 258	431:12:9144:9167	8196942	2	True				
ANR	8197260	AssignmentExpression	glyph_name_index -= 258		8196942	0		-=			
ANR	8197261	Identifier	glyph_name_index		8196942	0					
ANR	8197262	PrimaryExpression	258		8196942	1					
ANR	8197263	WhileStatement	while ( glyph_name_index > 0 )		8196942	3					
ANR	8197264	Condition	glyph_name_index > 0	434:19:9318:9337	8196942	0	True				
ANR	8197265	RelationalExpression	glyph_name_index > 0		8196942	0		>			
ANR	8197266	Identifier	glyph_name_index		8196942	0					
ANR	8197267	PrimaryExpression	0		8196942	1					
ANR	8197268	CompoundStatement		76:41:2743:2743	8196942	1					
ANR	8197269	ExpressionStatement	pascal_stringp += ( ( int ) ( * pascal_stringp ) + 1 )	435:16:9358:9404	8196942	0	True				
ANR	8197270	AssignmentExpression	pascal_stringp += ( ( int ) ( * pascal_stringp ) + 1 )		8196942	0		+=			
ANR	8197271	Identifier	pascal_stringp		8196942	0					
ANR	8197272	AdditiveExpression	( int ) ( * pascal_stringp ) + 1		8196942	1		+			
ANR	8197273	CastExpression	( int ) ( * pascal_stringp )		8196942	0					
ANR	8197274	CastTarget	int		8196942	0					
ANR	8197275	UnaryOperationExpression	* pascal_stringp		8196942	1					
ANR	8197276	UnaryOperator	*		8196942	0					
ANR	8197277	Identifier	pascal_stringp		8196942	1					
ANR	8197278	PrimaryExpression	1		8196942	1					
ANR	8197279	ExpressionStatement	glyph_name_index --	436:16:9422:9440	8196942	1	True				
ANR	8197280	PostIncDecOperationExpression	glyph_name_index --		8196942	0					
ANR	8197281	Identifier	glyph_name_index		8196942	0					
ANR	8197282	IncDec	--		8196942	1					
ANR	8197283	ExpressionStatement	pstr -> size = ( int ) ( * pascal_stringp )	439:12:9498:9533	8196942	4	True				
ANR	8197284	AssignmentExpression	pstr -> size = ( int ) ( * pascal_stringp )		8196942	0		=			
ANR	8197285	PtrMemberAccess	pstr -> size		8196942	0					
ANR	8197286	Identifier	pstr		8196942	0					
ANR	8197287	Identifier	size		8196942	1					
ANR	8197288	CastExpression	( int ) ( * pascal_stringp )		8196942	1					
ANR	8197289	CastTarget	int		8196942	0					
ANR	8197290	UnaryOperationExpression	* pascal_stringp		8196942	1					
ANR	8197291	UnaryOperator	*		8196942	0					
ANR	8197292	Identifier	pascal_stringp		8196942	1					
ANR	8197293	ExpressionStatement	pstr -> data = pascal_stringp + 1	441:12:9592:9623	8196942	5	True				
ANR	8197294	AssignmentExpression	pstr -> data = pascal_stringp + 1		8196942	0		=			
ANR	8197295	PtrMemberAccess	pstr -> data		8196942	0					
ANR	8197296	Identifier	pstr		8196942	0					
ANR	8197297	Identifier	data		8196942	1					
ANR	8197298	AdditiveExpression	pascal_stringp + 1		8196942	1		+			
ANR	8197299	Identifier	pascal_stringp		8196942	0					
ANR	8197300	PrimaryExpression	1		8196942	1					
ANR	8197301	IfStatement	if ( pstr -> data + pstr -> size > postp + table_length || pstr -> data - 1 < postp )		8196942	6					
ANR	8197302	Condition	pstr -> data + pstr -> size > postp + table_length || pstr -> data - 1 < postp	443:16:9672:9759	8196942	0	True				
ANR	8197303	OrExpression	pstr -> data + pstr -> size > postp + table_length || pstr -> data - 1 < postp		8196942	0		||			
ANR	8197304	RelationalExpression	pstr -> data + pstr -> size > postp + table_length		8196942	0		>			
ANR	8197305	AdditiveExpression	pstr -> data + pstr -> size		8196942	0		+			
ANR	8197306	PtrMemberAccess	pstr -> data		8196942	0					
ANR	8197307	Identifier	pstr		8196942	0					
ANR	8197308	Identifier	data		8196942	1					
ANR	8197309	PtrMemberAccess	pstr -> size		8196942	1					
ANR	8197310	Identifier	pstr		8196942	0					
ANR	8197311	Identifier	size		8196942	1					
ANR	8197312	AdditiveExpression	postp + table_length		8196942	1		+			
ANR	8197313	Identifier	postp		8196942	0					
ANR	8197314	Identifier	table_length		8196942	1					
ANR	8197315	RelationalExpression	pstr -> data - 1 < postp		8196942	1		<			
ANR	8197316	AdditiveExpression	pstr -> data - 1		8196942	0		-			
ANR	8197317	PtrMemberAccess	pstr -> data		8196942	0					
ANR	8197318	Identifier	pstr		8196942	0					
ANR	8197319	Identifier	data		8196942	1					
ANR	8197320	PrimaryExpression	1		8196942	1					
ANR	8197321	Identifier	postp		8196942	1					
ANR	8197322	CompoundStatement		86:40:3165:3165	8196942	1					
ANR	8197323	ExpressionStatement	"dmprintf ( pfont -> memory , ""data out of range\\n"" )"	445:16:9780:9826	8196942	0	True				
ANR	8197324	CallExpression	"dmprintf ( pfont -> memory , ""data out of range\\n"" )"		8196942	0					
ANR	8197325	Callee	dmprintf		8196942	0					
ANR	8197326	Identifier	dmprintf		8196942	0					
ANR	8197327	ArgumentList	pfont -> memory		8196942	1					
ANR	8197328	Argument	pfont -> memory		8196942	0					
ANR	8197329	PtrMemberAccess	pfont -> memory		8196942	0					
ANR	8197330	Identifier	pfont		8196942	0					
ANR	8197331	Identifier	memory		8196942	1					
ANR	8197332	Argument	"""data out of range\\n"""		8196942	1					
ANR	8197333	PrimaryExpression	"""data out of range\\n"""		8196942	0					
ANR	8197334	ReturnStatement	return - 1 ;	446:16:9844:9853	8196942	1	True				
ANR	8197335	UnaryOperationExpression	- 1		8196942	0					
ANR	8197336	UnaryOperator	-		8196942	0					
ANR	8197337	PrimaryExpression	1		8196942	1					
ANR	8197338	ExpressionStatement	"mydata = gs_alloc_bytes ( pfont -> memory , pstr -> size + 1 , ""glyph to name"" )"	451:12:10080:10198	8196942	7	True				
ANR	8197339	AssignmentExpression	"mydata = gs_alloc_bytes ( pfont -> memory , pstr -> size + 1 , ""glyph to name"" )"		8196942	0		=			
ANR	8197340	Identifier	mydata		8196942	0					
ANR	8197341	CallExpression	"gs_alloc_bytes ( pfont -> memory , pstr -> size + 1 , ""glyph to name"" )"		8196942	1					
ANR	8197342	Callee	gs_alloc_bytes		8196942	0					
ANR	8197343	Identifier	gs_alloc_bytes		8196942	0					
ANR	8197344	ArgumentList	pfont -> memory		8196942	1					
ANR	8197345	Argument	pfont -> memory		8196942	0					
ANR	8197346	PtrMemberAccess	pfont -> memory		8196942	0					
ANR	8197347	Identifier	pfont		8196942	0					
ANR	8197348	Identifier	memory		8196942	1					
ANR	8197349	Argument	pstr -> size + 1		8196942	1					
ANR	8197350	AdditiveExpression	pstr -> size + 1		8196942	0		+			
ANR	8197351	PtrMemberAccess	pstr -> size		8196942	0					
ANR	8197352	Identifier	pstr		8196942	0					
ANR	8197353	Identifier	size		8196942	1					
ANR	8197354	PrimaryExpression	1		8196942	1					
ANR	8197355	Argument	"""glyph to name"""		8196942	2					
ANR	8197356	PrimaryExpression	"""glyph to name"""		8196942	0					
ANR	8197357	IfStatement	if ( mydata == 0 )		8196942	8					
ANR	8197358	Condition	mydata == 0	454:16:10216:10226	8196942	0	True				
ANR	8197359	EqualityExpression	mydata == 0		8196942	0		==			
ANR	8197360	Identifier	mydata		8196942	0					
ANR	8197361	PrimaryExpression	0		8196942	1					
ANR	8197362	ReturnStatement	return - 1 ;	455:16:10245:10254	8196942	1	True				
ANR	8197363	UnaryOperationExpression	- 1		8196942	0					
ANR	8197364	UnaryOperator	-		8196942	0					
ANR	8197365	PrimaryExpression	1		8196942	1					
ANR	8197366	ExpressionStatement	"memcpy ( mydata , pascal_stringp + 1 , pstr -> size )"	456:12:10268:10314	8196942	9	True				
ANR	8197367	CallExpression	"memcpy ( mydata , pascal_stringp + 1 , pstr -> size )"		8196942	0					
ANR	8197368	Callee	memcpy		8196942	0					
ANR	8197369	Identifier	memcpy		8196942	0					
ANR	8197370	ArgumentList	mydata		8196942	1					
ANR	8197371	Argument	mydata		8196942	0					
ANR	8197372	Identifier	mydata		8196942	0					
ANR	8197373	Argument	pascal_stringp + 1		8196942	1					
ANR	8197374	AdditiveExpression	pascal_stringp + 1		8196942	0		+			
ANR	8197375	Identifier	pascal_stringp		8196942	0					
ANR	8197376	PrimaryExpression	1		8196942	1					
ANR	8197377	Argument	pstr -> size		8196942	2					
ANR	8197378	PtrMemberAccess	pstr -> size		8196942	0					
ANR	8197379	Identifier	pstr		8196942	0					
ANR	8197380	Identifier	size		8196942	1					
ANR	8197381	ExpressionStatement	pstr -> data = mydata	457:12:10328:10347	8196942	10	True				
ANR	8197382	AssignmentExpression	pstr -> data = mydata		8196942	0		=			
ANR	8197383	PtrMemberAccess	pstr -> data		8196942	0					
ANR	8197384	Identifier	pstr		8196942	0					
ANR	8197385	Identifier	data		8196942	1					
ANR	8197386	Identifier	mydata		8196942	1					
ANR	8197387	ReturnStatement	return 0 ;	458:12:10361:10369	8196942	11	True				
ANR	8197388	PrimaryExpression	0		8196942	0					
ANR	8197389	ReturnStatement	return 0 ;	461:4:10391:10399	8196942	8	True				
ANR	8197390	PrimaryExpression	0		8196942	0					
ANR	8197391	ReturnType	static int		8196942	1					
ANR	8197392	Identifier	pl_glyph_name		8196942	2					
ANR	8197393	ParameterList	"gs_font * pfont , gs_glyph glyph , gs_const_string * pstr"		8196942	3					
ANR	8197394	Parameter	gs_font * pfont	358:14:6539:6553	8196942	0	True				
ANR	8197395	ParameterType	gs_font *		8196942	0					
ANR	8197396	Identifier	pfont		8196942	1					
ANR	8197397	Parameter	gs_glyph glyph	358:31:6556:6569	8196942	1	True				
ANR	8197398	ParameterType	gs_glyph		8196942	0					
ANR	8197399	Identifier	glyph		8196942	1					
ANR	8197400	Parameter	gs_const_string * pstr	358:47:6572:6593	8196942	2	True				
ANR	8197401	ParameterType	gs_const_string *		8196942	0					
ANR	8197402	Identifier	pstr		8196942	1					
ANR	8197403	CFGEntryNode	ENTRY		8196942		True				
ANR	8197404	CFGExitNode	EXIT		8196942		True				
ANR	8197405	Symbol	table_length		8196942						
ANR	8197406	Symbol	* pascal_stringp		8196942						
ANR	8197407	Symbol	table_offset		8196942						
ANR	8197408	Symbol	* pl_mac_names		8196942						
ANR	8197409	Symbol	pfont -> memory		8196942						
ANR	8197410	Symbol	numGlyphs		8196942						
ANR	8197411	Symbol	* glyph		8196942						
ANR	8197412	Symbol	ft_TrueType		8196942						
ANR	8197413	Symbol	tt_find_table		8196942						
ANR	8197414	Symbol	pstr -> data		8196942						
ANR	8197415	Symbol	postp		8196942						
ANR	8197416	Symbol	mydata		8196942						
ANR	8197417	Symbol	( ( gs_font_type42 * ) pfont ) -> data		8196942						
ANR	8197418	Symbol	strlen		8196942						
ANR	8197419	Symbol	pfont -> FontType		8196942						
ANR	8197420	Symbol	* pstr		8196942						
ANR	8197421	Symbol	u32		8196942						
ANR	8197422	Symbol	u16		8196942						
ANR	8197423	Symbol	pl_mac_names		8196942						
ANR	8197424	Symbol	* glyph_name_index		8196942						
ANR	8197425	Symbol	gs_alloc_bytes		8196942						
ANR	8197426	Symbol	pfont		8196942						
ANR	8197427	Symbol	format		8196942						
ANR	8197428	Symbol	pstr -> size		8196942						
ANR	8197429	Symbol	pascal_stringp		8196942						
ANR	8197430	Symbol	glyph_name_index		8196942						
ANR	8197431	Symbol	& postp		8196942						
ANR	8197432	Symbol	glyph		8196942						
ANR	8197433	Symbol	* pfont		8196942						
ANR	8197434	Symbol	pstr		8196942						
ANR	8197435	Symbol	& table_length		8196942						
ANR	8197436	Symbol	GS_MIN_GLYPH_INDEX		8196942						
ANR	8197437	Function	pl_decode_glyph	465:0:10445:10711							
ANR	8197438	FunctionDef	"pl_decode_glyph (gs_font * font , gs_glyph glyph , int ch , ushort * unicode_return , unsigned int length)"		8197437	0					
ANR	8197439	CompoundStatement		467:0:10557:10711	8197437	0					
ANR	8197440	IdentifierDeclStatement	pl_font_t * plfont = ( pl_font_t * ) font -> client_data ;	468:4:10563:10614	8197437	0	True				
ANR	8197441	IdentifierDecl	* plfont = ( pl_font_t * ) font -> client_data		8197437	0					
ANR	8197442	IdentifierDeclType	pl_font_t *		8197437	0					
ANR	8197443	Identifier	plfont		8197437	1					
ANR	8197444	AssignmentExpression	* plfont = ( pl_font_t * ) font -> client_data		8197437	2		=			
ANR	8197445	Identifier	plfont		8197437	0					
ANR	8197446	CastExpression	( pl_font_t * ) font -> client_data		8197437	1					
ANR	8197447	CastTarget	pl_font_t *		8197437	0					
ANR	8197448	PtrMemberAccess	font -> client_data		8197437	1					
ANR	8197449	Identifier	font		8197437	0					
ANR	8197450	Identifier	client_data		8197437	1					
ANR	8197451	IfStatement	if ( length == 0 )		8197437	1					
ANR	8197452	Condition	length == 0	470:8:10625:10635	8197437	0	True				
ANR	8197453	EqualityExpression	length == 0		8197437	0		==			
ANR	8197454	Identifier	length		8197437	0					
ANR	8197455	PrimaryExpression	0		8197437	1					
ANR	8197456	ReturnStatement	return 1 ;	471:8:10646:10654	8197437	1	True				
ANR	8197457	PrimaryExpression	1		8197437	0					
ANR	8197458	ExpressionStatement	* unicode_return = plfont -> last_char	472:4:10660:10695	8197437	2	True				
ANR	8197459	AssignmentExpression	* unicode_return = plfont -> last_char		8197437	0		=			
ANR	8197460	UnaryOperationExpression	* unicode_return		8197437	0					
ANR	8197461	UnaryOperator	*		8197437	0					
ANR	8197462	Identifier	unicode_return		8197437	1					
ANR	8197463	PtrMemberAccess	plfont -> last_char		8197437	1					
ANR	8197464	Identifier	plfont		8197437	0					
ANR	8197465	Identifier	last_char		8197437	1					
ANR	8197466	ReturnStatement	return 1 ;	473:4:10701:10709	8197437	3	True				
ANR	8197467	PrimaryExpression	1		8197437	0					
ANR	8197468	ReturnType	static int		8197437	1					
ANR	8197469	Identifier	pl_decode_glyph		8197437	2					
ANR	8197470	ParameterList	"gs_font * font , gs_glyph glyph , int ch , ushort * unicode_return , unsigned int length"		8197437	3					
ANR	8197471	Parameter	gs_font * font	466:16:10472:10485	8197437	0	True				
ANR	8197472	ParameterType	gs_font *		8197437	0					
ANR	8197473	Identifier	font		8197437	1					
ANR	8197474	Parameter	gs_glyph glyph	466:32:10488:10501	8197437	1	True				
ANR	8197475	ParameterType	gs_glyph		8197437	0					
ANR	8197476	Identifier	glyph		8197437	1					
ANR	8197477	Parameter	int ch	466:48:10504:10509	8197437	2	True				
ANR	8197478	ParameterType	int		8197437	0					
ANR	8197479	Identifier	ch		8197437	1					
ANR	8197480	Parameter	ushort * unicode_return	466:56:10512:10533	8197437	3	True				
ANR	8197481	ParameterType	ushort *		8197437	0					
ANR	8197482	Identifier	unicode_return		8197437	1					
ANR	8197483	Parameter	unsigned int length	466:80:10536:10554	8197437	4	True				
ANR	8197484	ParameterType	unsigned int		8197437	0					
ANR	8197485	Identifier	length		8197437	1					
ANR	8197486	CFGEntryNode	ENTRY		8197437		True				
ANR	8197487	CFGExitNode	EXIT		8197437		True				
ANR	8197488	Symbol	glyph		8197437						
ANR	8197489	Symbol	unicode_return		8197437						
ANR	8197490	Symbol	font -> client_data		8197437						
ANR	8197491	Symbol	* unicode_return		8197437						
ANR	8197492	Symbol	ch		8197437						
ANR	8197493	Symbol	plfont -> last_char		8197437						
ANR	8197494	Symbol	length		8197437						
ANR	8197495	Symbol	* plfont		8197437						
ANR	8197496	Symbol	plfont		8197437						
ANR	8197497	Symbol	* font		8197437						
ANR	8197498	Symbol	font		8197437						
ANR	8197499	Function	pl_font_glyph_width_cache_node_add	477:0:10766:11948							
ANR	8197500	FunctionDef	"pl_font_glyph_width_cache_node_add (pl_font_t * plfont , uint char_code , gs_point * pwidth)"		8197499	0					
ANR	8197501	CompoundStatement		480:0:10896:11948	8197499	0					
ANR	8197502	IdentifierDeclStatement	pl_glyph_width_node_t * node ;	481:4:10902:10929	8197499	0	True				
ANR	8197503	IdentifierDecl	* node		8197499	0					
ANR	8197504	IdentifierDeclType	pl_glyph_width_node_t *		8197499	0					
ANR	8197505	Identifier	node		8197499	1					
ANR	8197506	IfStatement	if ( plfont -> scaling_technology == plfst_bitmap )		8197499	1					
ANR	8197507	Condition	plfont -> scaling_technology == plfst_bitmap	484:8:10996:11037	8197499	0	True				
ANR	8197508	EqualityExpression	plfont -> scaling_technology == plfst_bitmap		8197499	0		==			
ANR	8197509	PtrMemberAccess	plfont -> scaling_technology		8197499	0					
ANR	8197510	Identifier	plfont		8197499	0					
ANR	8197511	Identifier	scaling_technology		8197499	1					
ANR	8197512	Identifier	plfst_bitmap		8197499	1					
ANR	8197513	CompoundStatement		5:52:143:143	8197499	1					
ANR	8197514	ReturnStatement	return ( 0 ) ;	485:8:11050:11059	8197499	0	True				
ANR	8197515	PrimaryExpression	0		8197499	0					
ANR	8197516	IfStatement	if ( plfont -> widths_cache_nitems > PL_MAX_WIDTHS_CACHE_NITEMS )		8197499	2					
ANR	8197517	Condition	plfont -> widths_cache_nitems > PL_MAX_WIDTHS_CACHE_NITEMS	488:8:11076:11131	8197499	0	True				
ANR	8197518	RelationalExpression	plfont -> widths_cache_nitems > PL_MAX_WIDTHS_CACHE_NITEMS		8197499	0		>			
ANR	8197519	PtrMemberAccess	plfont -> widths_cache_nitems		8197499	0					
ANR	8197520	Identifier	plfont		8197499	0					
ANR	8197521	Identifier	widths_cache_nitems		8197499	1					
ANR	8197522	Identifier	PL_MAX_WIDTHS_CACHE_NITEMS		8197499	1					
ANR	8197523	CompoundStatement		9:66:237:237	8197499	1					
ANR	8197524	ExpressionStatement	pl_font_glyph_width_cache_remove_nodes ( plfont )	489:8:11144:11190	8197499	0	True				
ANR	8197525	CallExpression	pl_font_glyph_width_cache_remove_nodes ( plfont )		8197499	0					
ANR	8197526	Callee	pl_font_glyph_width_cache_remove_nodes		8197499	0					
ANR	8197527	Identifier	pl_font_glyph_width_cache_remove_nodes		8197499	0					
ANR	8197528	ArgumentList	plfont		8197499	1					
ANR	8197529	Argument	plfont		8197499	0					
ANR	8197530	Identifier	plfont		8197499	0					
ANR	8197531	ExpressionStatement	"node = ( pl_glyph_width_node_t * ) gs_alloc_bytes ( plfont -> pfont -> memory , sizeof ( pl_glyph_width_node_t ) , ""pl_glyph_width_cache_node_add"" )"	492:4:11207:11489	8197499	3	True				
ANR	8197532	AssignmentExpression	"node = ( pl_glyph_width_node_t * ) gs_alloc_bytes ( plfont -> pfont -> memory , sizeof ( pl_glyph_width_node_t ) , ""pl_glyph_width_cache_node_add"" )"		8197499	0		=			
ANR	8197533	Identifier	node		8197499	0					
ANR	8197534	CastExpression	"( pl_glyph_width_node_t * ) gs_alloc_bytes ( plfont -> pfont -> memory , sizeof ( pl_glyph_width_node_t ) , ""pl_glyph_width_cache_node_add"" )"		8197499	1					
ANR	8197535	CastTarget	pl_glyph_width_node_t *		8197499	0					
ANR	8197536	CallExpression	"gs_alloc_bytes ( plfont -> pfont -> memory , sizeof ( pl_glyph_width_node_t ) , ""pl_glyph_width_cache_node_add"" )"		8197499	1					
ANR	8197537	Callee	gs_alloc_bytes		8197499	0					
ANR	8197538	Identifier	gs_alloc_bytes		8197499	0					
ANR	8197539	ArgumentList	plfont -> pfont -> memory		8197499	1					
ANR	8197540	Argument	plfont -> pfont -> memory		8197499	0					
ANR	8197541	PtrMemberAccess	plfont -> pfont -> memory		8197499	0					
ANR	8197542	PtrMemberAccess	plfont -> pfont		8197499	0					
ANR	8197543	Identifier	plfont		8197499	0					
ANR	8197544	Identifier	pfont		8197499	1					
ANR	8197545	Identifier	memory		8197499	1					
ANR	8197546	Argument	sizeof ( pl_glyph_width_node_t )		8197499	1					
ANR	8197547	SizeofExpression	sizeof ( pl_glyph_width_node_t )		8197499	0					
ANR	8197548	Sizeof	sizeof		8197499	0					
ANR	8197549	SizeofOperand	pl_glyph_width_node_t		8197499	1					
ANR	8197550	Argument	"""pl_glyph_width_cache_node_add"""		8197499	2					
ANR	8197551	PrimaryExpression	"""pl_glyph_width_cache_node_add"""		8197499	0					
ANR	8197552	IfStatement	if ( node == NULL )		8197499	4					
ANR	8197553	Condition	node == NULL	497:8:11500:11511	8197499	0	True				
ANR	8197554	EqualityExpression	node == NULL		8197499	0		==			
ANR	8197555	Identifier	node		8197499	0					
ANR	8197556	Identifier	NULL		8197499	1					
ANR	8197557	CompoundStatement		18:22:617:617	8197499	1					
ANR	8197558	ExpressionStatement	pl_font_glyph_width_cache_remove_nodes ( plfont )	501:8:11652:11698	8197499	0	True				
ANR	8197559	CallExpression	pl_font_glyph_width_cache_remove_nodes ( plfont )		8197499	0					
ANR	8197560	Callee	pl_font_glyph_width_cache_remove_nodes		8197499	0					
ANR	8197561	Identifier	pl_font_glyph_width_cache_remove_nodes		8197499	0					
ANR	8197562	ArgumentList	plfont		8197499	1					
ANR	8197563	Argument	plfont		8197499	0					
ANR	8197564	Identifier	plfont		8197499	0					
ANR	8197565	ReturnStatement	return - 1 ;	502:8:11708:11717	8197499	1	True				
ANR	8197566	UnaryOperationExpression	- 1		8197499	0					
ANR	8197567	UnaryOperator	-		8197499	0					
ANR	8197568	PrimaryExpression	1		8197499	1					
ANR	8197569	ExpressionStatement	node -> next = plfont -> widths_cache	505:4:11730:11763	8197499	5	True				
ANR	8197570	AssignmentExpression	node -> next = plfont -> widths_cache		8197499	0		=			
ANR	8197571	PtrMemberAccess	node -> next		8197499	0					
ANR	8197572	Identifier	node		8197499	0					
ANR	8197573	Identifier	next		8197499	1					
ANR	8197574	PtrMemberAccess	plfont -> widths_cache		8197499	1					
ANR	8197575	Identifier	plfont		8197499	0					
ANR	8197576	Identifier	widths_cache		8197499	1					
ANR	8197577	ExpressionStatement	plfont -> widths_cache = node	506:4:11769:11796	8197499	6	True				
ANR	8197578	AssignmentExpression	plfont -> widths_cache = node		8197499	0		=			
ANR	8197579	PtrMemberAccess	plfont -> widths_cache		8197499	0					
ANR	8197580	Identifier	plfont		8197499	0					
ANR	8197581	Identifier	widths_cache		8197499	1					
ANR	8197582	Identifier	node		8197499	1					
ANR	8197583	ExpressionStatement	plfont -> widths_cache_nitems ++	507:4:11802:11831	8197499	7	True				
ANR	8197584	PostIncDecOperationExpression	plfont -> widths_cache_nitems ++		8197499	0					
ANR	8197585	PtrMemberAccess	plfont -> widths_cache_nitems		8197499	0					
ANR	8197586	Identifier	plfont		8197499	0					
ANR	8197587	Identifier	widths_cache_nitems		8197499	1					
ANR	8197588	IncDec	++		8197499	1					
ANR	8197589	ExpressionStatement	node -> char_code = char_code	509:4:11838:11865	8197499	8	True				
ANR	8197590	AssignmentExpression	node -> char_code = char_code		8197499	0		=			
ANR	8197591	PtrMemberAccess	node -> char_code		8197499	0					
ANR	8197592	Identifier	node		8197499	0					
ANR	8197593	Identifier	char_code		8197499	1					
ANR	8197594	Identifier	char_code		8197499	1					
ANR	8197595	ExpressionStatement	node -> font_id = plfont -> pfont -> id	510:4:11871:11904	8197499	9	True				
ANR	8197596	AssignmentExpression	node -> font_id = plfont -> pfont -> id		8197499	0		=			
ANR	8197597	PtrMemberAccess	node -> font_id		8197499	0					
ANR	8197598	Identifier	node		8197499	0					
ANR	8197599	Identifier	font_id		8197499	1					
ANR	8197600	PtrMemberAccess	plfont -> pfont -> id		8197499	1					
ANR	8197601	PtrMemberAccess	plfont -> pfont		8197499	0					
ANR	8197602	Identifier	plfont		8197499	0					
ANR	8197603	Identifier	pfont		8197499	1					
ANR	8197604	Identifier	id		8197499	1					
ANR	8197605	ExpressionStatement	node -> width = * pwidth	511:4:11910:11931	8197499	10	True				
ANR	8197606	AssignmentExpression	node -> width = * pwidth		8197499	0		=			
ANR	8197607	PtrMemberAccess	node -> width		8197499	0					
ANR	8197608	Identifier	node		8197499	0					
ANR	8197609	Identifier	width		8197499	1					
ANR	8197610	UnaryOperationExpression	* pwidth		8197499	1					
ANR	8197611	UnaryOperator	*		8197499	0					
ANR	8197612	Identifier	pwidth		8197499	1					
ANR	8197613	ReturnStatement	return 0 ;	513:4:11938:11946	8197499	11	True				
ANR	8197614	PrimaryExpression	0		8197499	0					
ANR	8197615	ReturnType	static int		8197499	1					
ANR	8197616	Identifier	pl_font_glyph_width_cache_node_add		8197499	2					
ANR	8197617	ParameterList	"pl_font_t * plfont , uint char_code , gs_point * pwidth"		8197499	3					
ANR	8197618	Parameter	pl_font_t * plfont	478:35:10812:10828	8197499	0	True				
ANR	8197619	ParameterType	pl_font_t *		8197499	0					
ANR	8197620	Identifier	plfont		8197499	1					
ANR	8197621	Parameter	uint char_code	479:30:10861:10874	8197499	1	True				
ANR	8197622	ParameterType	uint		8197499	0					
ANR	8197623	Identifier	char_code		8197499	1					
ANR	8197624	Parameter	gs_point * pwidth	479:46:10877:10893	8197499	2	True				
ANR	8197625	ParameterType	gs_point *		8197499	0					
ANR	8197626	Identifier	pwidth		8197499	1					
ANR	8197627	CFGEntryNode	ENTRY		8197499		True				
ANR	8197628	CFGExitNode	EXIT		8197499		True				
ANR	8197629	Symbol	plfont -> scaling_technology		8197499						
ANR	8197630	Symbol	gs_alloc_bytes		8197499						
ANR	8197631	Symbol	node -> font_id		8197499						
ANR	8197632	Symbol	plfont -> widths_cache_nitems		8197499						
ANR	8197633	Symbol	NULL		8197499						
ANR	8197634	Symbol	plfont -> widths_cache		8197499						
ANR	8197635	Symbol	* plfont -> pfont		8197499						
ANR	8197636	Symbol	* * plfont		8197499						
ANR	8197637	Symbol	plfst_bitmap		8197499						
ANR	8197638	Symbol	plfont -> pfont -> memory		8197499						
ANR	8197639	Symbol	plfont -> pfont -> id		8197499						
ANR	8197640	Symbol	char_code		8197499						
ANR	8197641	Symbol	pwidth		8197499						
ANR	8197642	Symbol	plfont		8197499						
ANR	8197643	Symbol	node -> next		8197499						
ANR	8197644	Symbol	node		8197499						
ANR	8197645	Symbol	plfont -> pfont		8197499						
ANR	8197646	Symbol	node -> width		8197499						
ANR	8197647	Symbol	* plfont		8197499						
ANR	8197648	Symbol	* pwidth		8197499						
ANR	8197649	Symbol	* node		8197499						
ANR	8197650	Symbol	node -> char_code		8197499						
ANR	8197651	Symbol	PL_MAX_WIDTHS_CACHE_NITEMS		8197499						
ANR	8197652	Function	pl_font_glyph_width_cache_node_search	517:0:11952:12349							
ANR	8197653	FunctionDef	"pl_font_glyph_width_cache_node_search (const pl_font_t * plfont , uint char_code , gs_point * pwidth)"		8197652	0					
ANR	8197654	CompoundStatement		520:0:12094:12349	8197652	0					
ANR	8197655	IdentifierDeclStatement	pl_glyph_width_node_t * current = plfont -> widths_cache ;	521:4:12100:12153	8197652	0	True				
ANR	8197656	IdentifierDecl	* current = plfont -> widths_cache		8197652	0					
ANR	8197657	IdentifierDeclType	pl_glyph_width_node_t *		8197652	0					
ANR	8197658	Identifier	current		8197652	1					
ANR	8197659	AssignmentExpression	* current = plfont -> widths_cache		8197652	2		=			
ANR	8197660	Identifier	current		8197652	0					
ANR	8197661	PtrMemberAccess	plfont -> widths_cache		8197652	1					
ANR	8197662	Identifier	plfont		8197652	0					
ANR	8197663	Identifier	widths_cache		8197652	1					
ANR	8197664	WhileStatement	while ( current )		8197652	1					
ANR	8197665	Condition	current	523:11:12167:12173	8197652	0	True				
ANR	8197666	Identifier	current		8197652	0					
ANR	8197667	CompoundStatement		4:20:81:81	8197652	1					
ANR	8197668	IfStatement	if ( char_code == current -> char_code )		8197652	0					
ANR	8197669	Condition	char_code == current -> char_code	524:12:12190:12220	8197652	0	True				
ANR	8197670	EqualityExpression	char_code == current -> char_code		8197652	0		==			
ANR	8197671	Identifier	char_code		8197652	0					
ANR	8197672	PtrMemberAccess	current -> char_code		8197652	1					
ANR	8197673	Identifier	current		8197652	0					
ANR	8197674	Identifier	char_code		8197652	1					
ANR	8197675	CompoundStatement		5:45:128:128	8197652	1					
ANR	8197676	ExpressionStatement	* pwidth = current -> width	525:12:12237:12261	8197652	0	True				
ANR	8197677	AssignmentExpression	* pwidth = current -> width		8197652	0		=			
ANR	8197678	UnaryOperationExpression	* pwidth		8197652	0					
ANR	8197679	UnaryOperator	*		8197652	0					
ANR	8197680	Identifier	pwidth		8197652	1					
ANR	8197681	PtrMemberAccess	current -> width		8197652	1					
ANR	8197682	Identifier	current		8197652	0					
ANR	8197683	Identifier	width		8197652	1					
ANR	8197684	ReturnStatement	return 0 ;	526:12:12275:12283	8197652	1	True				
ANR	8197685	PrimaryExpression	0		8197652	0					
ANR	8197686	ExpressionStatement	current = current -> next	528:8:12303:12326	8197652	1	True				
ANR	8197687	AssignmentExpression	current = current -> next		8197652	0		=			
ANR	8197688	Identifier	current		8197652	0					
ANR	8197689	PtrMemberAccess	current -> next		8197652	1					
ANR	8197690	Identifier	current		8197652	0					
ANR	8197691	Identifier	next		8197652	1					
ANR	8197692	ReturnStatement	return - 1 ;	530:4:12338:12347	8197652	2	True				
ANR	8197693	UnaryOperationExpression	- 1		8197652	0					
ANR	8197694	UnaryOperator	-		8197652	0					
ANR	8197695	PrimaryExpression	1		8197652	1					
ANR	8197696	ReturnType	static int		8197652	1					
ANR	8197697	Identifier	pl_font_glyph_width_cache_node_search		8197652	2					
ANR	8197698	ParameterList	"const pl_font_t * plfont , uint char_code , gs_point * pwidth"		8197652	3					
ANR	8197699	Parameter	const pl_font_t * plfont	518:38:12001:12023	8197652	0	True				
ANR	8197700	ParameterType	const pl_font_t *		8197652	0					
ANR	8197701	Identifier	plfont		8197652	1					
ANR	8197702	Parameter	uint char_code	518:63:12026:12039	8197652	1	True				
ANR	8197703	ParameterType	uint		8197652	0					
ANR	8197704	Identifier	char_code		8197652	1					
ANR	8197705	Parameter	gs_point * pwidth	519:33:12075:12091	8197652	2	True				
ANR	8197706	ParameterType	gs_point *		8197652	0					
ANR	8197707	Identifier	pwidth		8197652	1					
ANR	8197708	CFGEntryNode	ENTRY		8197652		True				
ANR	8197709	CFGExitNode	EXIT		8197652		True				
ANR	8197710	Symbol	current -> char_code		8197652						
ANR	8197711	Symbol	current		8197652						
ANR	8197712	Symbol	plfont -> widths_cache		8197652						
ANR	8197713	Symbol	current -> width		8197652						
ANR	8197714	Symbol	current -> next		8197652						
ANR	8197715	Symbol	* plfont		8197652						
ANR	8197716	Symbol	* current		8197652						
ANR	8197717	Symbol	char_code		8197652						
ANR	8197718	Symbol	* pwidth		8197652						
ANR	8197719	Symbol	pwidth		8197652						
ANR	8197720	Symbol	plfont		8197652						
ANR	8197721	Function	pl_font_glyph_width_cache_remove_nodes	537:0:12434:12833							
ANR	8197722	FunctionDef	pl_font_glyph_width_cache_remove_nodes (pl_font_t * plfont)		8197721	0					
ANR	8197723	CompoundStatement		539:0:12497:12833	8197721	0					
ANR	8197724	IdentifierDeclStatement	pl_glyph_width_node_t * current = plfont -> widths_cache ;	540:4:12503:12556	8197721	0	True				
ANR	8197725	IdentifierDecl	* current = plfont -> widths_cache		8197721	0					
ANR	8197726	IdentifierDeclType	pl_glyph_width_node_t *		8197721	0					
ANR	8197727	Identifier	current		8197721	1					
ANR	8197728	AssignmentExpression	* current = plfont -> widths_cache		8197721	2		=			
ANR	8197729	Identifier	current		8197721	0					
ANR	8197730	PtrMemberAccess	plfont -> widths_cache		8197721	1					
ANR	8197731	Identifier	plfont		8197721	0					
ANR	8197732	Identifier	widths_cache		8197721	1					
ANR	8197733	WhileStatement	while ( current )		8197721	1					
ANR	8197734	Condition	current	542:11:12570:12576	8197721	0	True				
ANR	8197735	Identifier	current		8197721	0					
ANR	8197736	CompoundStatement		5:8:91:134	8197721	1					
ANR	8197737	IdentifierDeclStatement	pl_glyph_width_node_t * next = current -> next ;	543:8:12589:12632	8197721	0	True				
ANR	8197738	IdentifierDecl	* next = current -> next		8197721	0					
ANR	8197739	IdentifierDeclType	pl_glyph_width_node_t *		8197721	0					
ANR	8197740	Identifier	next		8197721	1					
ANR	8197741	AssignmentExpression	* next = current -> next		8197721	2		=			
ANR	8197742	Identifier	next		8197721	0					
ANR	8197743	PtrMemberAccess	current -> next		8197721	1					
ANR	8197744	Identifier	current		8197721	0					
ANR	8197745	Identifier	next		8197721	1					
ANR	8197746	ExpressionStatement	"gs_free_object ( plfont -> pfont -> memory , current , ""pl_glyph_width_list_remove"" )"	545:8:12643:12719	8197721	1	True				
ANR	8197747	CallExpression	"gs_free_object ( plfont -> pfont -> memory , current , ""pl_glyph_width_list_remove"" )"		8197721	0					
ANR	8197748	Callee	gs_free_object		8197721	0					
ANR	8197749	Identifier	gs_free_object		8197721	0					
ANR	8197750	ArgumentList	plfont -> pfont -> memory		8197721	1					
ANR	8197751	Argument	plfont -> pfont -> memory		8197721	0					
ANR	8197752	PtrMemberAccess	plfont -> pfont -> memory		8197721	0					
ANR	8197753	PtrMemberAccess	plfont -> pfont		8197721	0					
ANR	8197754	Identifier	plfont		8197721	0					
ANR	8197755	Identifier	pfont		8197721	1					
ANR	8197756	Identifier	memory		8197721	1					
ANR	8197757	Argument	current		8197721	1					
ANR	8197758	Identifier	current		8197721	0					
ANR	8197759	Argument	"""pl_glyph_width_list_remove"""		8197721	2					
ANR	8197760	PrimaryExpression	"""pl_glyph_width_list_remove"""		8197721	0					
ANR	8197761	ExpressionStatement	current = next	546:8:12729:12743	8197721	2	True				
ANR	8197762	AssignmentExpression	current = next		8197721	0		=			
ANR	8197763	Identifier	current		8197721	0					
ANR	8197764	Identifier	next		8197721	1					
ANR	8197765	ExpressionStatement	plfont -> widths_cache = NULL	548:4:12755:12782	8197721	2	True				
ANR	8197766	AssignmentExpression	plfont -> widths_cache = NULL		8197721	0		=			
ANR	8197767	PtrMemberAccess	plfont -> widths_cache		8197721	0					
ANR	8197768	Identifier	plfont		8197721	0					
ANR	8197769	Identifier	widths_cache		8197721	1					
ANR	8197770	Identifier	NULL		8197721	1					
ANR	8197771	ExpressionStatement	plfont -> widths_cache_nitems = 0	549:4:12788:12819	8197721	3	True				
ANR	8197772	AssignmentExpression	plfont -> widths_cache_nitems = 0		8197721	0		=			
ANR	8197773	PtrMemberAccess	plfont -> widths_cache_nitems		8197721	0					
ANR	8197774	Identifier	plfont		8197721	0					
ANR	8197775	Identifier	widths_cache_nitems		8197721	1					
ANR	8197776	PrimaryExpression	0		8197721	1					
ANR	8197777	ReturnStatement	return ;	550:4:12825:12831	8197721	4	True				
ANR	8197778	ReturnType	void		8197721	1					
ANR	8197779	Identifier	pl_font_glyph_width_cache_remove_nodes		8197721	2					
ANR	8197780	ParameterList	pl_font_t * plfont		8197721	3					
ANR	8197781	Parameter	pl_font_t * plfont	538:39:12478:12494	8197721	0	True				
ANR	8197782	ParameterType	pl_font_t *		8197721	0					
ANR	8197783	Identifier	plfont		8197721	1					
ANR	8197784	CFGEntryNode	ENTRY		8197721		True				
ANR	8197785	CFGExitNode	EXIT		8197721		True				
ANR	8197786	Symbol	next		8197721						
ANR	8197787	Symbol	plfont -> widths_cache		8197721						
ANR	8197788	Symbol	current -> next		8197721						
ANR	8197789	Symbol	NULL		8197721						
ANR	8197790	Symbol	plfont -> widths_cache_nitems		8197721						
ANR	8197791	Symbol	* plfont -> pfont		8197721						
ANR	8197792	Symbol	* * plfont		8197721						
ANR	8197793	Symbol	plfont -> pfont -> memory		8197721						
ANR	8197794	Symbol	* current		8197721						
ANR	8197795	Symbol	plfont		8197721						
ANR	8197796	Symbol	current		8197721						
ANR	8197797	Symbol	plfont -> pfont		8197721						
ANR	8197798	Symbol	* plfont		8197721						
ANR	8197799	Function	pl_font_char_width	553:0:12836:13453							
ANR	8197800	FunctionDef	"pl_font_char_width (const pl_font_t * plfont , const void * pgs , gs_char char_code , gs_point * pwidth)"		8197799	0					
ANR	8197801	CompoundStatement		556:0:12959:13453	8197799	0					
ANR	8197802	IdentifierDeclStatement	int code = 0 ;	557:4:12965:12977	8197799	0	True				
ANR	8197803	IdentifierDecl	code = 0		8197799	0					
ANR	8197804	IdentifierDeclType	int		8197799	0					
ANR	8197805	Identifier	code		8197799	1					
ANR	8197806	AssignmentExpression	code = 0		8197799	2		=			
ANR	8197807	Identifier	code		8197799	0					
ANR	8197808	PrimaryExpression	0		8197799	1					
ANR	8197809	IfStatement	"if ( pl_font_glyph_width_cache_node_search ( plfont , char_code , pwidth ) >= 0 )"		8197799	1					
ANR	8197810	Condition	"pl_font_glyph_width_cache_node_search ( plfont , char_code , pwidth ) >= 0"	559:8:12988:13056	8197799	0	True				
ANR	8197811	RelationalExpression	"pl_font_glyph_width_cache_node_search ( plfont , char_code , pwidth ) >= 0"		8197799	0		>=			
ANR	8197812	CallExpression	"pl_font_glyph_width_cache_node_search ( plfont , char_code , pwidth )"		8197799	0					
ANR	8197813	Callee	pl_font_glyph_width_cache_node_search		8197799	0					
ANR	8197814	Identifier	pl_font_glyph_width_cache_node_search		8197799	0					
ANR	8197815	ArgumentList	plfont		8197799	1					
ANR	8197816	Argument	plfont		8197799	0					
ANR	8197817	Identifier	plfont		8197799	0					
ANR	8197818	Argument	char_code		8197799	1					
ANR	8197819	Identifier	char_code		8197799	0					
ANR	8197820	Argument	pwidth		8197799	2					
ANR	8197821	Identifier	pwidth		8197799	0					
ANR	8197822	PrimaryExpression	0		8197799	1					
ANR	8197823	CompoundStatement		4:79:99:99	8197799	1					
ANR	8197824	ReturnStatement	return ( code ) ;	560:8:13069:13081	8197799	0	True				
ANR	8197825	Identifier	code		8197799	0					
ANR	8197826	IfStatement	"if ( ( code = ( * ( plfont ) -> char_width ) ( plfont , pgs , char_code , pwidth ) ) == 0 )"		8197799	2					
ANR	8197827	Condition	"( code = ( * ( plfont ) -> char_width ) ( plfont , pgs , char_code , pwidth ) ) == 0"	563:8:13102:13171	8197799	0	True				
ANR	8197828	EqualityExpression	"( code = ( * ( plfont ) -> char_width ) ( plfont , pgs , char_code , pwidth ) ) == 0"		8197799	0		==			
ANR	8197829	AssignmentExpression	"code = ( * ( plfont ) -> char_width ) ( plfont , pgs , char_code , pwidth )"		8197799	0		=			
ANR	8197830	Identifier	code		8197799	0					
ANR	8197831	CallExpression	"( * ( plfont ) -> char_width ) ( plfont , pgs , char_code , pwidth )"		8197799	1					
ANR	8197832	Callee	* ( plfont ) -> char_width		8197799	0					
ANR	8197833	UnaryOperationExpression	* ( plfont ) -> char_width		8197799	0					
ANR	8197834	UnaryOperator	*		8197799	0					
ANR	8197835	PtrMemberAccess	( plfont ) -> char_width		8197799	1					
ANR	8197836	Identifier	plfont		8197799	0					
ANR	8197837	Identifier	char_width		8197799	1					
ANR	8197838	ArgumentList	plfont		8197799	1					
ANR	8197839	Argument	plfont		8197799	0					
ANR	8197840	Identifier	plfont		8197799	0					
ANR	8197841	Argument	pgs		8197799	1					
ANR	8197842	Identifier	pgs		8197799	0					
ANR	8197843	Argument	char_code		8197799	2					
ANR	8197844	Identifier	char_code		8197799	0					
ANR	8197845	Argument	pwidth		8197799	3					
ANR	8197846	Identifier	pwidth		8197799	0					
ANR	8197847	PrimaryExpression	0		8197799	1					
ANR	8197848	CompoundStatement		8:80:214:214	8197799	1					
ANR	8197849	ExpressionStatement	"( void ) pl_font_glyph_width_cache_node_add ( ( pl_font_t * ) plfont , char_code , pwidth )"	568:8:13348:13428	8197799	0	True				
ANR	8197850	CastExpression	"( void ) pl_font_glyph_width_cache_node_add ( ( pl_font_t * ) plfont , char_code , pwidth )"		8197799	0					
ANR	8197851	CastTarget	void		8197799	0					
ANR	8197852	CallExpression	"pl_font_glyph_width_cache_node_add ( ( pl_font_t * ) plfont , char_code , pwidth )"		8197799	1					
ANR	8197853	Callee	pl_font_glyph_width_cache_node_add		8197799	0					
ANR	8197854	Identifier	pl_font_glyph_width_cache_node_add		8197799	0					
ANR	8197855	ArgumentList	( pl_font_t * ) plfont		8197799	1					
ANR	8197856	Argument	( pl_font_t * ) plfont		8197799	0					
ANR	8197857	CastExpression	( pl_font_t * ) plfont		8197799	0					
ANR	8197858	CastTarget	pl_font_t *		8197799	0					
ANR	8197859	Identifier	plfont		8197799	1					
ANR	8197860	Argument	char_code		8197799	1					
ANR	8197861	Identifier	char_code		8197799	0					
ANR	8197862	Argument	pwidth		8197799	2					
ANR	8197863	Identifier	pwidth		8197799	0					
ANR	8197864	ReturnStatement	return code ;	570:4:13440:13451	8197799	3	True				
ANR	8197865	Identifier	code		8197799	0					
ANR	8197866	ReturnType	int		8197799	1					
ANR	8197867	Identifier	pl_font_char_width		8197799	2					
ANR	8197868	ParameterList	"const pl_font_t * plfont , const void * pgs , gs_char char_code , gs_point * pwidth"		8197799	3					
ANR	8197869	Parameter	const pl_font_t * plfont	554:19:12859:12882	8197799	0	True				
ANR	8197870	ParameterType	const pl_font_t *		8197799	0					
ANR	8197871	Identifier	plfont		8197799	1					
ANR	8197872	Parameter	const void * pgs	554:45:12885:12899	8197799	1	True				
ANR	8197873	ParameterType	const void *		8197799	0					
ANR	8197874	Identifier	pgs		8197799	1					
ANR	8197875	Parameter	gs_char char_code	555:19:12921:12937	8197799	2	True				
ANR	8197876	ParameterType	gs_char		8197799	0					
ANR	8197877	Identifier	char_code		8197799	1					
ANR	8197878	Parameter	gs_point * pwidth	555:38:12940:12956	8197799	3	True				
ANR	8197879	ParameterType	gs_point *		8197799	0					
ANR	8197880	Identifier	pwidth		8197799	1					
ANR	8197881	CFGEntryNode	ENTRY		8197799		True				
ANR	8197882	CFGExitNode	EXIT		8197799		True				
ANR	8197883	Symbol	code		8197799						
ANR	8197884	Symbol	* * plfont		8197799						
ANR	8197885	Symbol	pl_font_glyph_width_cache_node_search		8197799						
ANR	8197886	Symbol	* plfont		8197799						
ANR	8197887	Symbol	char_code		8197799						
ANR	8197888	Symbol	pwidth		8197799						
ANR	8197889	Symbol	( plfont ) -> char_width		8197799						
ANR	8197890	Symbol	plfont		8197799						
ANR	8197891	Symbol	pgs		8197799						
ANR	8197892	Symbol	* ( plfont ) -> char_width		8197799						
ANR	8197893	Function	pl_font_char_metrics	574:0:13478:13678							
ANR	8197894	FunctionDef	"pl_font_char_metrics (const pl_font_t * plfont , const void * pgs , gs_char char_code , float metrics [ 4 ])"		8197893	0					
ANR	8197895	CompoundStatement		577:0:13604:13678	8197893	0					
ANR	8197896	ReturnStatement	"return ( * ( plfont ) -> char_metrics ) ( plfont , pgs , char_code , metrics ) ;"	578:4:13610:13676	8197893	0	True				
ANR	8197897	CallExpression	"( * ( plfont ) -> char_metrics ) ( plfont , pgs , char_code , metrics )"		8197893	0					
ANR	8197898	Callee	* ( plfont ) -> char_metrics		8197893	0					
ANR	8197899	UnaryOperationExpression	* ( plfont ) -> char_metrics		8197893	0					
ANR	8197900	UnaryOperator	*		8197893	0					
ANR	8197901	PtrMemberAccess	( plfont ) -> char_metrics		8197893	1					
ANR	8197902	Identifier	plfont		8197893	0					
ANR	8197903	Identifier	char_metrics		8197893	1					
ANR	8197904	ArgumentList	plfont		8197893	1					
ANR	8197905	Argument	plfont		8197893	0					
ANR	8197906	Identifier	plfont		8197893	0					
ANR	8197907	Argument	pgs		8197893	1					
ANR	8197908	Identifier	pgs		8197893	0					
ANR	8197909	Argument	char_code		8197893	2					
ANR	8197910	Identifier	char_code		8197893	0					
ANR	8197911	Argument	metrics		8197893	3					
ANR	8197912	Identifier	metrics		8197893	0					
ANR	8197913	ReturnType	int		8197893	1					
ANR	8197914	Identifier	pl_font_char_metrics		8197893	2					
ANR	8197915	ParameterList	"const pl_font_t * plfont , const void * pgs , gs_char char_code , float metrics [ 4 ]"		8197893	3					
ANR	8197916	Parameter	const pl_font_t * plfont	575:21:13503:13526	8197893	0	True				
ANR	8197917	ParameterType	const pl_font_t *		8197893	0					
ANR	8197918	Identifier	plfont		8197893	1					
ANR	8197919	Parameter	const void * pgs	575:47:13529:13543	8197893	1	True				
ANR	8197920	ParameterType	const void *		8197893	0					
ANR	8197921	Identifier	pgs		8197893	1					
ANR	8197922	Parameter	gs_char char_code	576:21:13567:13583	8197893	2	True				
ANR	8197923	ParameterType	gs_char		8197893	0					
ANR	8197924	Identifier	char_code		8197893	1					
ANR	8197925	Parameter	float metrics [ 4 ]	576:40:13586:13601	8197893	3	True				
ANR	8197926	ParameterType	float [ 4 ]		8197893	0					
ANR	8197927	Identifier	metrics		8197893	1					
ANR	8197928	CFGEntryNode	ENTRY		8197893		True				
ANR	8197929	CFGExitNode	EXIT		8197893		True				
ANR	8197930	Symbol	* * plfont		8197893						
ANR	8197931	Symbol	* plfont		8197893						
ANR	8197932	Symbol	char_code		8197893						
ANR	8197933	Symbol	plfont		8197893						
ANR	8197934	Symbol	metrics		8197893						
ANR	8197935	Symbol	* ( plfont ) -> char_metrics		8197893						
ANR	8197936	Symbol	pgs		8197893						
ANR	8197937	Symbol	( plfont ) -> char_metrics		8197893						
ANR	8197938	Function	pl_alloc_font	582:0:13704:14625							
ANR	8197939	FunctionDef	"pl_alloc_font (gs_memory_t * mem , client_name_t cname)"		8197938	0					
ANR	8197940	CompoundStatement		584:0:13770:14625	8197938	0					
ANR	8197941	IdentifierDeclStatement	"pl_font_t * plfont = gs_alloc_struct ( mem , pl_font_t , & st_pl_font , cname ) ;"	585:4:13776:13847	8197938	0	True				
ANR	8197942	IdentifierDecl	"* plfont = gs_alloc_struct ( mem , pl_font_t , & st_pl_font , cname )"		8197938	0					
ANR	8197943	IdentifierDeclType	pl_font_t *		8197938	0					
ANR	8197944	Identifier	plfont		8197938	1					
ANR	8197945	AssignmentExpression	"* plfont = gs_alloc_struct ( mem , pl_font_t , & st_pl_font , cname )"		8197938	2		=			
ANR	8197946	Identifier	plfont		8197938	0					
ANR	8197947	CallExpression	"gs_alloc_struct ( mem , pl_font_t , & st_pl_font , cname )"		8197938	1					
ANR	8197948	Callee	gs_alloc_struct		8197938	0					
ANR	8197949	Identifier	gs_alloc_struct		8197938	0					
ANR	8197950	ArgumentList	mem		8197938	1					
ANR	8197951	Argument	mem		8197938	0					
ANR	8197952	Identifier	mem		8197938	0					
ANR	8197953	Argument	pl_font_t		8197938	1					
ANR	8197954	Identifier	pl_font_t		8197938	0					
ANR	8197955	Argument	& st_pl_font		8197938	2					
ANR	8197956	UnaryOperationExpression	& st_pl_font		8197938	0					
ANR	8197957	UnaryOperator	&		8197938	0					
ANR	8197958	Identifier	st_pl_font		8197938	1					
ANR	8197959	Argument	cname		8197938	3					
ANR	8197960	Identifier	cname		8197938	0					
ANR	8197961	IfStatement	if ( plfont )		8197938	1					
ANR	8197962	Condition	plfont	587:8:13858:13863	8197938	0	True				
ANR	8197963	Identifier	plfont		8197938	0					
ANR	8197964	CompoundStatement		4:16:95:95	8197938	1					
ANR	8197965	ExpressionStatement	plfont -> pfont = 0	588:8:13917:13934	8197938	0	True				
ANR	8197966	AssignmentExpression	plfont -> pfont = 0		8197938	0		=			
ANR	8197967	PtrMemberAccess	plfont -> pfont		8197938	0					
ANR	8197968	Identifier	plfont		8197938	0					
ANR	8197969	Identifier	pfont		8197938	1					
ANR	8197970	PrimaryExpression	0		8197938	1					
ANR	8197971	ExpressionStatement	plfont -> header = 0	589:8:13944:13962	8197938	1	True				
ANR	8197972	AssignmentExpression	plfont -> header = 0		8197938	0		=			
ANR	8197973	PtrMemberAccess	plfont -> header		8197938	0					
ANR	8197974	Identifier	plfont		8197938	0					
ANR	8197975	Identifier	header		8197938	1					
ANR	8197976	PrimaryExpression	0		8197938	1					
ANR	8197977	ExpressionStatement	plfont -> glyphs . table = 0	590:8:13972:13996	8197938	2	True				
ANR	8197978	AssignmentExpression	plfont -> glyphs . table = 0		8197938	0		=			
ANR	8197979	MemberAccess	plfont -> glyphs . table		8197938	0					
ANR	8197980	PtrMemberAccess	plfont -> glyphs		8197938	0					
ANR	8197981	Identifier	plfont		8197938	0					
ANR	8197982	Identifier	glyphs		8197938	1					
ANR	8197983	Identifier	table		8197938	1					
ANR	8197984	PrimaryExpression	0		8197938	1					
ANR	8197985	ExpressionStatement	plfont -> char_glyphs . table = 0	591:8:14006:14035	8197938	3	True				
ANR	8197986	AssignmentExpression	plfont -> char_glyphs . table = 0		8197938	0		=			
ANR	8197987	MemberAccess	plfont -> char_glyphs . table		8197938	0					
ANR	8197988	PtrMemberAccess	plfont -> char_glyphs		8197938	0					
ANR	8197989	Identifier	plfont		8197938	0					
ANR	8197990	Identifier	char_glyphs		8197938	1					
ANR	8197991	Identifier	table		8197938	1					
ANR	8197992	PrimaryExpression	0		8197938	1					
ANR	8197993	ExpressionStatement	plfont -> orient = 0	593:8:14086:14104	8197938	4	True				
ANR	8197994	AssignmentExpression	plfont -> orient = 0		8197938	0		=			
ANR	8197995	PtrMemberAccess	plfont -> orient		8197938	0					
ANR	8197996	Identifier	plfont		8197938	0					
ANR	8197997	Identifier	orient		8197938	1					
ANR	8197998	PrimaryExpression	0		8197938	1					
ANR	8197999	ExpressionStatement	plfont -> allow_vertical_substitutes = false	594:8:14114:14156	8197938	5	True				
ANR	8198000	AssignmentExpression	plfont -> allow_vertical_substitutes = false		8197938	0		=			
ANR	8198001	PtrMemberAccess	plfont -> allow_vertical_substitutes		8197938	0					
ANR	8198002	Identifier	plfont		8197938	0					
ANR	8198003	Identifier	allow_vertical_substitutes		8197938	1					
ANR	8198004	Identifier	false		8197938	1					
ANR	8198005	ExpressionStatement	plfont -> bold_fraction = 0	595:8:14166:14191	8197938	6	True				
ANR	8198006	AssignmentExpression	plfont -> bold_fraction = 0		8197938	0		=			
ANR	8198007	PtrMemberAccess	plfont -> bold_fraction		8197938	0					
ANR	8198008	Identifier	plfont		8197938	0					
ANR	8198009	Identifier	bold_fraction		8197938	1					
ANR	8198010	PrimaryExpression	0		8197938	1					
ANR	8198011	ExpressionStatement	plfont -> font_file = 0	596:8:14201:14222	8197938	7	True				
ANR	8198012	AssignmentExpression	plfont -> font_file = 0		8197938	0		=			
ANR	8198013	PtrMemberAccess	plfont -> font_file		8197938	0					
ANR	8198014	Identifier	plfont		8197938	0					
ANR	8198015	Identifier	font_file		8197938	1					
ANR	8198016	PrimaryExpression	0		8197938	1					
ANR	8198017	ExpressionStatement	plfont -> resolution . x = plfont -> resolution . y = 0	597:8:14232:14279	8197938	8	True				
ANR	8198018	AssignmentExpression	plfont -> resolution . x = plfont -> resolution . y = 0		8197938	0		=			
ANR	8198019	MemberAccess	plfont -> resolution . x		8197938	0					
ANR	8198020	PtrMemberAccess	plfont -> resolution		8197938	0					
ANR	8198021	Identifier	plfont		8197938	0					
ANR	8198022	Identifier	resolution		8197938	1					
ANR	8198023	Identifier	x		8197938	1					
ANR	8198024	AssignmentExpression	plfont -> resolution . y = 0		8197938	1		=			
ANR	8198025	MemberAccess	plfont -> resolution . y		8197938	0					
ANR	8198026	PtrMemberAccess	plfont -> resolution		8197938	0					
ANR	8198027	Identifier	plfont		8197938	0					
ANR	8198028	Identifier	resolution		8197938	1					
ANR	8198029	Identifier	y		8197938	1					
ANR	8198030	PrimaryExpression	0		8197938	1					
ANR	8198031	ExpressionStatement	plfont -> params . proportional_spacing = true	598:8:14289:14331	8197938	9	True				
ANR	8198032	AssignmentExpression	plfont -> params . proportional_spacing = true		8197938	0		=			
ANR	8198033	MemberAccess	plfont -> params . proportional_spacing		8197938	0					
ANR	8198034	PtrMemberAccess	plfont -> params		8197938	0					
ANR	8198035	Identifier	plfont		8197938	0					
ANR	8198036	Identifier	params		8197938	1					
ANR	8198037	Identifier	proportional_spacing		8197938	1					
ANR	8198038	Identifier	true		8197938	1					
ANR	8198039	ExpressionStatement	"memset ( plfont -> character_complement , 0xff , 8 )"	599:8:14341:14386	8197938	10	True				
ANR	8198040	CallExpression	"memset ( plfont -> character_complement , 0xff , 8 )"		8197938	0					
ANR	8198041	Callee	memset		8197938	0					
ANR	8198042	Identifier	memset		8197938	0					
ANR	8198043	ArgumentList	plfont -> character_complement		8197938	1					
ANR	8198044	Argument	plfont -> character_complement		8197938	0					
ANR	8198045	PtrMemberAccess	plfont -> character_complement		8197938	0					
ANR	8198046	Identifier	plfont		8197938	0					
ANR	8198047	Identifier	character_complement		8197938	1					
ANR	8198048	Argument	0xff		8197938	1					
ANR	8198049	PrimaryExpression	0xff		8197938	0					
ANR	8198050	Argument	8		8197938	2					
ANR	8198051	PrimaryExpression	8		8197938	0					
ANR	8198052	ExpressionStatement	plfont -> offsets . GC = plfont -> offsets . GT = plfont -> offsets . VT = - 1	600:8:14396:14461	8197938	11	True				
ANR	8198053	AssignmentExpression	plfont -> offsets . GC = plfont -> offsets . GT = plfont -> offsets . VT = - 1		8197938	0		=			
ANR	8198054	MemberAccess	plfont -> offsets . GC		8197938	0					
ANR	8198055	PtrMemberAccess	plfont -> offsets		8197938	0					
ANR	8198056	Identifier	plfont		8197938	0					
ANR	8198057	Identifier	offsets		8197938	1					
ANR	8198058	Identifier	GC		8197938	1					
ANR	8198059	AssignmentExpression	plfont -> offsets . GT = plfont -> offsets . VT = - 1		8197938	1		=			
ANR	8198060	MemberAccess	plfont -> offsets . GT		8197938	0					
ANR	8198061	PtrMemberAccess	plfont -> offsets		8197938	0					
ANR	8198062	Identifier	plfont		8197938	0					
ANR	8198063	Identifier	offsets		8197938	1					
ANR	8198064	Identifier	GT		8197938	1					
ANR	8198065	AssignmentExpression	plfont -> offsets . VT = - 1		8197938	1		=			
ANR	8198066	MemberAccess	plfont -> offsets . VT		8197938	0					
ANR	8198067	PtrMemberAccess	plfont -> offsets		8197938	0					
ANR	8198068	Identifier	plfont		8197938	0					
ANR	8198069	Identifier	offsets		8197938	1					
ANR	8198070	Identifier	VT		8197938	1					
ANR	8198071	UnaryOperationExpression	- 1		8197938	1					
ANR	8198072	UnaryOperator	-		8197938	0					
ANR	8198073	PrimaryExpression	1		8197938	1					
ANR	8198074	ExpressionStatement	plfont -> pts_per_inch = 72.0	601:8:14471:14498	8197938	12	True				
ANR	8198075	AssignmentExpression	plfont -> pts_per_inch = 72.0		8197938	0		=			
ANR	8198076	PtrMemberAccess	plfont -> pts_per_inch		8197938	0					
ANR	8198077	Identifier	plfont		8197938	0					
ANR	8198078	Identifier	pts_per_inch		8197938	1					
ANR	8198079	PrimaryExpression	72.0		8197938	1					
ANR	8198080	ExpressionStatement	plfont -> widths_cache = NULL	602:8:14530:14557	8197938	13	True				
ANR	8198081	AssignmentExpression	plfont -> widths_cache = NULL		8197938	0		=			
ANR	8198082	PtrMemberAccess	plfont -> widths_cache		8197938	0					
ANR	8198083	Identifier	plfont		8197938	0					
ANR	8198084	Identifier	widths_cache		8197938	1					
ANR	8198085	Identifier	NULL		8197938	1					
ANR	8198086	ExpressionStatement	plfont -> widths_cache_nitems = 0	603:8:14567:14598	8197938	14	True				
ANR	8198087	AssignmentExpression	plfont -> widths_cache_nitems = 0		8197938	0		=			
ANR	8198088	PtrMemberAccess	plfont -> widths_cache_nitems		8197938	0					
ANR	8198089	Identifier	plfont		8197938	0					
ANR	8198090	Identifier	widths_cache_nitems		8197938	1					
ANR	8198091	PrimaryExpression	0		8197938	1					
ANR	8198092	ReturnStatement	return plfont ;	605:4:14610:14623	8197938	2	True				
ANR	8198093	Identifier	plfont		8197938	0					
ANR	8198094	ReturnType	pl_font_t *		8197938	1					
ANR	8198095	Identifier	pl_alloc_font		8197938	2					
ANR	8198096	ParameterList	"gs_memory_t * mem , client_name_t cname"		8197938	3					
ANR	8198097	Parameter	gs_memory_t * mem	583:14:13730:13746	8197938	0	True				
ANR	8198098	ParameterType	gs_memory_t *		8197938	0					
ANR	8198099	Identifier	mem		8197938	1					
ANR	8198100	Parameter	client_name_t cname	583:33:13749:13767	8197938	1	True				
ANR	8198101	ParameterType	client_name_t		8197938	0					
ANR	8198102	Identifier	cname		8197938	1					
ANR	8198103	CFGEntryNode	ENTRY		8197938		True				
ANR	8198104	CFGExitNode	EXIT		8197938		True				
ANR	8198105	Symbol	plfont -> widths_cache		8197938						
ANR	8198106	Symbol	plfont -> widths_cache_nitems		8197938						
ANR	8198107	Symbol	gs_alloc_struct		8197938						
ANR	8198108	Symbol	plfont -> header		8197938						
ANR	8198109	Symbol	cname		8197938						
ANR	8198110	Symbol	plfont -> char_glyphs		8197938						
ANR	8198111	Symbol	plfont		8197938						
ANR	8198112	Symbol	plfont -> pts_per_inch		8197938						
ANR	8198113	Symbol	plfont -> orient		8197938						
ANR	8198114	Symbol	mem		8197938						
ANR	8198115	Symbol	pl_font_t		8197938						
ANR	8198116	Symbol	plfont -> font_file		8197938						
ANR	8198117	Symbol	plfont -> offsets . VT		8197938						
ANR	8198118	Symbol	plfont -> char_glyphs . table		8197938						
ANR	8198119	Symbol	plfont -> allow_vertical_substitutes		8197938						
ANR	8198120	Symbol	plfont -> params . proportional_spacing		8197938						
ANR	8198121	Symbol	NULL		8197938						
ANR	8198122	Symbol	plfont -> glyphs . table		8197938						
ANR	8198123	Symbol	false		8197938						
ANR	8198124	Symbol	plfont -> resolution		8197938						
ANR	8198125	Symbol	plfont -> character_complement		8197938						
ANR	8198126	Symbol	plfont -> offsets		8197938						
ANR	8198127	Symbol	plfont -> offsets . GT		8197938						
ANR	8198128	Symbol	plfont -> pfont		8197938						
ANR	8198129	Symbol	plfont -> bold_fraction		8197938						
ANR	8198130	Symbol	plfont -> resolution . x		8197938						
ANR	8198131	Symbol	plfont -> resolution . y		8197938						
ANR	8198132	Symbol	plfont -> params		8197938						
ANR	8198133	Symbol	* plfont		8197938						
ANR	8198134	Symbol	plfont -> glyphs		8197938						
ANR	8198135	Symbol	true		8197938						
ANR	8198136	Symbol	& st_pl_font		8197938						
ANR	8198137	Symbol	plfont -> offsets . GC		8197938						
ANR	8198138	Function	pl_clone_font	616:0:15069:21112							
ANR	8198139	FunctionDef	"pl_clone_font (const pl_font_t * src , gs_memory_t * mem , client_name_t cname)"		8198138	0					
ANR	8198140	CompoundStatement		618:0:15158:21112	8198138	0					
ANR	8198141	IdentifierDeclStatement	"pl_font_t * plfont = gs_alloc_struct ( mem , pl_font_t , & st_pl_font , cname ) ;"	619:4:15164:15235	8198138	0	True				
ANR	8198142	IdentifierDecl	"* plfont = gs_alloc_struct ( mem , pl_font_t , & st_pl_font , cname )"		8198138	0					
ANR	8198143	IdentifierDeclType	pl_font_t *		8198138	0					
ANR	8198144	Identifier	plfont		8198138	1					
ANR	8198145	AssignmentExpression	"* plfont = gs_alloc_struct ( mem , pl_font_t , & st_pl_font , cname )"		8198138	2		=			
ANR	8198146	Identifier	plfont		8198138	0					
ANR	8198147	CallExpression	"gs_alloc_struct ( mem , pl_font_t , & st_pl_font , cname )"		8198138	1					
ANR	8198148	Callee	gs_alloc_struct		8198138	0					
ANR	8198149	Identifier	gs_alloc_struct		8198138	0					
ANR	8198150	ArgumentList	mem		8198138	1					
ANR	8198151	Argument	mem		8198138	0					
ANR	8198152	Identifier	mem		8198138	0					
ANR	8198153	Argument	pl_font_t		8198138	1					
ANR	8198154	Identifier	pl_font_t		8198138	0					
ANR	8198155	Argument	& st_pl_font		8198138	2					
ANR	8198156	UnaryOperationExpression	& st_pl_font		8198138	0					
ANR	8198157	UnaryOperator	&		8198138	0					
ANR	8198158	Identifier	st_pl_font		8198138	1					
ANR	8198159	Argument	cname		8198138	3					
ANR	8198160	Identifier	cname		8198138	0					
ANR	8198161	IfStatement	if ( plfont == 0 )		8198138	1					
ANR	8198162	Condition	plfont == 0	621:8:15246:15256	8198138	0	True				
ANR	8198163	EqualityExpression	plfont == 0		8198138	0		==			
ANR	8198164	Identifier	plfont		8198138	0					
ANR	8198165	PrimaryExpression	0		8198138	1					
ANR	8198166	ReturnStatement	return 0 ;	622:8:15267:15275	8198138	1	True				
ANR	8198167	PrimaryExpression	0		8198138	0					
ANR	8198168	ExpressionStatement	plfont -> storage = src -> storage	624:4:15320:15350	8198138	2	True				
ANR	8198169	AssignmentExpression	plfont -> storage = src -> storage		8198138	0		=			
ANR	8198170	PtrMemberAccess	plfont -> storage		8198138	0					
ANR	8198171	Identifier	plfont		8198138	0					
ANR	8198172	Identifier	storage		8198138	1					
ANR	8198173	PtrMemberAccess	src -> storage		8198138	1					
ANR	8198174	Identifier	src		8198138	0					
ANR	8198175	Identifier	storage		8198138	1					
ANR	8198176	ExpressionStatement	plfont -> header_size = src -> header_size	625:4:15356:15394	8198138	3	True				
ANR	8198177	AssignmentExpression	plfont -> header_size = src -> header_size		8198138	0		=			
ANR	8198178	PtrMemberAccess	plfont -> header_size		8198138	0					
ANR	8198179	Identifier	plfont		8198138	0					
ANR	8198180	Identifier	header_size		8198138	1					
ANR	8198181	PtrMemberAccess	src -> header_size		8198138	1					
ANR	8198182	Identifier	src		8198138	0					
ANR	8198183	Identifier	header_size		8198138	1					
ANR	8198184	ExpressionStatement	plfont -> scaling_technology = src -> scaling_technology	626:4:15400:15452	8198138	4	True				
ANR	8198185	AssignmentExpression	plfont -> scaling_technology = src -> scaling_technology		8198138	0		=			
ANR	8198186	PtrMemberAccess	plfont -> scaling_technology		8198138	0					
ANR	8198187	Identifier	plfont		8198138	0					
ANR	8198188	Identifier	scaling_technology		8198138	1					
ANR	8198189	PtrMemberAccess	src -> scaling_technology		8198138	1					
ANR	8198190	Identifier	src		8198138	0					
ANR	8198191	Identifier	scaling_technology		8198138	1					
ANR	8198192	ExpressionStatement	plfont -> is_xl_format = src -> is_xl_format	627:4:15458:15498	8198138	5	True				
ANR	8198193	AssignmentExpression	plfont -> is_xl_format = src -> is_xl_format		8198138	0		=			
ANR	8198194	PtrMemberAccess	plfont -> is_xl_format		8198138	0					
ANR	8198195	Identifier	plfont		8198138	0					
ANR	8198196	Identifier	is_xl_format		8198138	1					
ANR	8198197	PtrMemberAccess	src -> is_xl_format		8198138	1					
ANR	8198198	Identifier	src		8198138	0					
ANR	8198199	Identifier	is_xl_format		8198138	1					
ANR	8198200	ExpressionStatement	plfont -> allow_vertical_substitutes = src -> allow_vertical_substitutes	628:4:15504:15572	8198138	6	True				
ANR	8198201	AssignmentExpression	plfont -> allow_vertical_substitutes = src -> allow_vertical_substitutes		8198138	0		=			
ANR	8198202	PtrMemberAccess	plfont -> allow_vertical_substitutes		8198138	0					
ANR	8198203	Identifier	plfont		8198138	0					
ANR	8198204	Identifier	allow_vertical_substitutes		8198138	1					
ANR	8198205	PtrMemberAccess	src -> allow_vertical_substitutes		8198138	1					
ANR	8198206	Identifier	src		8198138	0					
ANR	8198207	Identifier	allow_vertical_substitutes		8198138	1					
ANR	8198208	ExpressionStatement	plfont -> font_type = src -> font_type	629:4:15578:15612	8198138	7	True				
ANR	8198209	AssignmentExpression	plfont -> font_type = src -> font_type		8198138	0		=			
ANR	8198210	PtrMemberAccess	plfont -> font_type		8198138	0					
ANR	8198211	Identifier	plfont		8198138	0					
ANR	8198212	Identifier	font_type		8198138	1					
ANR	8198213	PtrMemberAccess	src -> font_type		8198138	1					
ANR	8198214	Identifier	src		8198138	0					
ANR	8198215	Identifier	font_type		8198138	1					
ANR	8198216	ExpressionStatement	plfont -> char_width = src -> char_width	630:4:15618:15654	8198138	8	True				
ANR	8198217	AssignmentExpression	plfont -> char_width = src -> char_width		8198138	0		=			
ANR	8198218	PtrMemberAccess	plfont -> char_width		8198138	0					
ANR	8198219	Identifier	plfont		8198138	0					
ANR	8198220	Identifier	char_width		8198138	1					
ANR	8198221	PtrMemberAccess	src -> char_width		8198138	1					
ANR	8198222	Identifier	src		8198138	0					
ANR	8198223	Identifier	char_width		8198138	1					
ANR	8198224	ExpressionStatement	plfont -> char_metrics = src -> char_metrics	631:4:15660:15700	8198138	9	True				
ANR	8198225	AssignmentExpression	plfont -> char_metrics = src -> char_metrics		8198138	0		=			
ANR	8198226	PtrMemberAccess	plfont -> char_metrics		8198138	0					
ANR	8198227	Identifier	plfont		8198138	0					
ANR	8198228	Identifier	char_metrics		8198138	1					
ANR	8198229	PtrMemberAccess	src -> char_metrics		8198138	1					
ANR	8198230	Identifier	src		8198138	0					
ANR	8198231	Identifier	char_metrics		8198138	1					
ANR	8198232	ExpressionStatement	plfont -> large_sizes = src -> large_sizes	632:4:15706:15744	8198138	10	True				
ANR	8198233	AssignmentExpression	plfont -> large_sizes = src -> large_sizes		8198138	0		=			
ANR	8198234	PtrMemberAccess	plfont -> large_sizes		8198138	0					
ANR	8198235	Identifier	plfont		8198138	0					
ANR	8198236	Identifier	large_sizes		8198138	1					
ANR	8198237	PtrMemberAccess	src -> large_sizes		8198138	1					
ANR	8198238	Identifier	src		8198138	0					
ANR	8198239	Identifier	large_sizes		8198138	1					
ANR	8198240	ExpressionStatement	plfont -> resolution = src -> resolution	633:4:15750:15786	8198138	11	True				
ANR	8198241	AssignmentExpression	plfont -> resolution = src -> resolution		8198138	0		=			
ANR	8198242	PtrMemberAccess	plfont -> resolution		8198138	0					
ANR	8198243	Identifier	plfont		8198138	0					
ANR	8198244	Identifier	resolution		8198138	1					
ANR	8198245	PtrMemberAccess	src -> resolution		8198138	1					
ANR	8198246	Identifier	src		8198138	0					
ANR	8198247	Identifier	resolution		8198138	1					
ANR	8198248	ExpressionStatement	plfont -> params = src -> params	634:4:15792:15820	8198138	12	True				
ANR	8198249	AssignmentExpression	plfont -> params = src -> params		8198138	0		=			
ANR	8198250	PtrMemberAccess	plfont -> params		8198138	0					
ANR	8198251	Identifier	plfont		8198138	0					
ANR	8198252	Identifier	params		8198138	1					
ANR	8198253	PtrMemberAccess	src -> params		8198138	1					
ANR	8198254	Identifier	src		8198138	0					
ANR	8198255	Identifier	params		8198138	1					
ANR	8198256	ExpressionStatement	plfont -> pts_per_inch = src -> pts_per_inch	635:4:15826:15866	8198138	13	True				
ANR	8198257	AssignmentExpression	plfont -> pts_per_inch = src -> pts_per_inch		8198138	0		=			
ANR	8198258	PtrMemberAccess	plfont -> pts_per_inch		8198138	0					
ANR	8198259	Identifier	plfont		8198138	0					
ANR	8198260	Identifier	pts_per_inch		8198138	1					
ANR	8198261	PtrMemberAccess	src -> pts_per_inch		8198138	1					
ANR	8198262	Identifier	src		8198138	0					
ANR	8198263	Identifier	pts_per_inch		8198138	1					
ANR	8198264	ExpressionStatement	plfont -> font_file_loaded = src -> font_file_loaded	636:4:15872:15920	8198138	14	True				
ANR	8198265	AssignmentExpression	plfont -> font_file_loaded = src -> font_file_loaded		8198138	0		=			
ANR	8198266	PtrMemberAccess	plfont -> font_file_loaded		8198138	0					
ANR	8198267	Identifier	plfont		8198138	0					
ANR	8198268	Identifier	font_file_loaded		8198138	1					
ANR	8198269	PtrMemberAccess	src -> font_file_loaded		8198138	1					
ANR	8198270	Identifier	src		8198138	0					
ANR	8198271	Identifier	font_file_loaded		8198138	1					
ANR	8198272	ExpressionStatement	plfont -> orient = src -> orient	637:4:15926:15954	8198138	15	True				
ANR	8198273	AssignmentExpression	plfont -> orient = src -> orient		8198138	0		=			
ANR	8198274	PtrMemberAccess	plfont -> orient		8198138	0					
ANR	8198275	Identifier	plfont		8198138	0					
ANR	8198276	Identifier	orient		8198138	1					
ANR	8198277	PtrMemberAccess	src -> orient		8198138	1					
ANR	8198278	Identifier	src		8198138	0					
ANR	8198279	Identifier	orient		8198138	1					
ANR	8198280	ExpressionStatement	plfont -> bold_fraction = src -> bold_fraction	638:4:15960:16002	8198138	16	True				
ANR	8198281	AssignmentExpression	plfont -> bold_fraction = src -> bold_fraction		8198138	0		=			
ANR	8198282	PtrMemberAccess	plfont -> bold_fraction		8198138	0					
ANR	8198283	Identifier	plfont		8198138	0					
ANR	8198284	Identifier	bold_fraction		8198138	1					
ANR	8198285	PtrMemberAccess	src -> bold_fraction		8198138	1					
ANR	8198286	Identifier	src		8198138	0					
ANR	8198287	Identifier	bold_fraction		8198138	1					
ANR	8198288	ExpressionStatement	plfont -> widths_cache = NULL	639:4:16008:16035	8198138	17	True				
ANR	8198289	AssignmentExpression	plfont -> widths_cache = NULL		8198138	0		=			
ANR	8198290	PtrMemberAccess	plfont -> widths_cache		8198138	0					
ANR	8198291	Identifier	plfont		8198138	0					
ANR	8198292	Identifier	widths_cache		8198138	1					
ANR	8198293	Identifier	NULL		8198138	1					
ANR	8198294	ExpressionStatement	plfont -> widths_cache_nitems = 0	640:4:16041:16072	8198138	18	True				
ANR	8198295	AssignmentExpression	plfont -> widths_cache_nitems = 0		8198138	0		=			
ANR	8198296	PtrMemberAccess	plfont -> widths_cache_nitems		8198138	0					
ANR	8198297	Identifier	plfont		8198138	0					
ANR	8198298	Identifier	widths_cache_nitems		8198138	1					
ANR	8198299	PrimaryExpression	0		8198138	1					
ANR	8198300	CompoundStatement		25:8:929:934	8198138	19					
ANR	8198301	IdentifierDeclStatement	int i ;	642:8:16088:16093	8198138	0	True				
ANR	8198302	IdentifierDecl	i		8198138	0					
ANR	8198303	IdentifierDeclType	int		8198138	0					
ANR	8198304	Identifier	i		8198138	1					
ANR	8198305	ForStatement	for ( i = 0 ; i < sizeof ( src -> character_complement ) ; i ++ )		8198138	1					
ANR	8198306	ForInit	i = 0 ;	644:13:16109:16114	8198138	0	True				
ANR	8198307	AssignmentExpression	i = 0		8198138	0		=			
ANR	8198308	Identifier	i		8198138	0					
ANR	8198309	PrimaryExpression	0		8198138	1					
ANR	8198310	Condition	i < sizeof ( src -> character_complement )	644:20:16116:16152	8198138	1	True				
ANR	8198311	RelationalExpression	i < sizeof ( src -> character_complement )		8198138	0		<			
ANR	8198312	Identifier	i		8198138	0					
ANR	8198313	SizeofExpression	sizeof ( src -> character_complement )		8198138	1					
ANR	8198314	Sizeof	sizeof		8198138	0					
ANR	8198315	PtrMemberAccess	src -> character_complement		8198138	1					
ANR	8198316	Identifier	src		8198138	0					
ANR	8198317	Identifier	character_complement		8198138	1					
ANR	8198318	PostIncDecOperationExpression	i ++	644:59:16155:16157	8198138	2	True				
ANR	8198319	Identifier	i		8198138	0					
ANR	8198320	IncDec	++		8198138	1					
ANR	8198321	ExpressionStatement	plfont -> character_complement [ i ] = src -> character_complement [ i ]	645:12:16172:16234	8198138	3	True				
ANR	8198322	AssignmentExpression	plfont -> character_complement [ i ] = src -> character_complement [ i ]		8198138	0		=			
ANR	8198323	ArrayIndexing	plfont -> character_complement [ i ]		8198138	0					
ANR	8198324	PtrMemberAccess	plfont -> character_complement		8198138	0					
ANR	8198325	Identifier	plfont		8198138	0					
ANR	8198326	Identifier	character_complement		8198138	1					
ANR	8198327	Identifier	i		8198138	1					
ANR	8198328	ArrayIndexing	src -> character_complement [ i ]		8198138	1					
ANR	8198329	PtrMemberAccess	src -> character_complement		8198138	0					
ANR	8198330	Identifier	src		8198138	0					
ANR	8198331	Identifier	character_complement		8198138	1					
ANR	8198332	Identifier	i		8198138	1					
ANR	8198333	ExpressionStatement	plfont -> offsets = src -> offsets	647:4:16246:16276	8198138	20	True				
ANR	8198334	AssignmentExpression	plfont -> offsets = src -> offsets		8198138	0		=			
ANR	8198335	PtrMemberAccess	plfont -> offsets		8198138	0					
ANR	8198336	Identifier	plfont		8198138	0					
ANR	8198337	Identifier	offsets		8198138	1					
ANR	8198338	PtrMemberAccess	src -> offsets		8198138	1					
ANR	8198339	Identifier	src		8198138	0					
ANR	8198340	Identifier	offsets		8198138	1					
ANR	8198341	ExpressionStatement	"plfont -> header = gs_alloc_bytes ( mem , src -> header_size , cname )"	648:4:16282:16343	8198138	21	True				
ANR	8198342	AssignmentExpression	"plfont -> header = gs_alloc_bytes ( mem , src -> header_size , cname )"		8198138	0		=			
ANR	8198343	PtrMemberAccess	plfont -> header		8198138	0					
ANR	8198344	Identifier	plfont		8198138	0					
ANR	8198345	Identifier	header		8198138	1					
ANR	8198346	CallExpression	"gs_alloc_bytes ( mem , src -> header_size , cname )"		8198138	1					
ANR	8198347	Callee	gs_alloc_bytes		8198138	0					
ANR	8198348	Identifier	gs_alloc_bytes		8198138	0					
ANR	8198349	ArgumentList	mem		8198138	1					
ANR	8198350	Argument	mem		8198138	0					
ANR	8198351	Identifier	mem		8198138	0					
ANR	8198352	Argument	src -> header_size		8198138	1					
ANR	8198353	PtrMemberAccess	src -> header_size		8198138	0					
ANR	8198354	Identifier	src		8198138	0					
ANR	8198355	Identifier	header_size		8198138	1					
ANR	8198356	Argument	cname		8198138	2					
ANR	8198357	Identifier	cname		8198138	0					
ANR	8198358	IfStatement	if ( plfont -> header == 0 )		8198138	22					
ANR	8198359	Condition	plfont -> header == 0	649:8:16353:16371	8198138	0	True				
ANR	8198360	EqualityExpression	plfont -> header == 0		8198138	0		==			
ANR	8198361	PtrMemberAccess	plfont -> header		8198138	0					
ANR	8198362	Identifier	plfont		8198138	0					
ANR	8198363	Identifier	header		8198138	1					
ANR	8198364	PrimaryExpression	0		8198138	1					
ANR	8198365	ReturnStatement	return 0 ;	650:8:16382:16390	8198138	1	True				
ANR	8198366	PrimaryExpression	0		8198138	0					
ANR	8198367	ExpressionStatement	"memcpy ( plfont -> header , src -> header , src -> header_size )"	651:4:16396:16449	8198138	23	True				
ANR	8198368	CallExpression	"memcpy ( plfont -> header , src -> header , src -> header_size )"		8198138	0					
ANR	8198369	Callee	memcpy		8198138	0					
ANR	8198370	Identifier	memcpy		8198138	0					
ANR	8198371	ArgumentList	plfont -> header		8198138	1					
ANR	8198372	Argument	plfont -> header		8198138	0					
ANR	8198373	PtrMemberAccess	plfont -> header		8198138	0					
ANR	8198374	Identifier	plfont		8198138	0					
ANR	8198375	Identifier	header		8198138	1					
ANR	8198376	Argument	src -> header		8198138	1					
ANR	8198377	PtrMemberAccess	src -> header		8198138	0					
ANR	8198378	Identifier	src		8198138	0					
ANR	8198379	Identifier	header		8198138	1					
ANR	8198380	Argument	src -> header_size		8198138	2					
ANR	8198381	PtrMemberAccess	src -> header_size		8198138	0					
ANR	8198382	Identifier	src		8198138	0					
ANR	8198383	Identifier	header_size		8198138	1					
ANR	8198384	IfStatement	if ( src -> font_file )		8198138	24					
ANR	8198385	Condition	src -> font_file	653:8:16460:16473	8198138	0	True				
ANR	8198386	PtrMemberAccess	src -> font_file		8198138	0					
ANR	8198387	Identifier	src		8198138	0					
ANR	8198388	Identifier	font_file		8198138	1					
ANR	8198389	CompoundStatement		36:24:1317:1317	8198138	1					
ANR	8198390	ExpressionStatement	"plfont -> font_file = ( char * ) gs_alloc_bytes ( mem , strlen ( src -> font_file ) + 1 , ""pl_clone_font"" )"	654:8:16486:16625	8198138	0	True				
ANR	8198391	AssignmentExpression	"plfont -> font_file = ( char * ) gs_alloc_bytes ( mem , strlen ( src -> font_file ) + 1 , ""pl_clone_font"" )"		8198138	0		=			
ANR	8198392	PtrMemberAccess	plfont -> font_file		8198138	0					
ANR	8198393	Identifier	plfont		8198138	0					
ANR	8198394	Identifier	font_file		8198138	1					
ANR	8198395	CastExpression	"( char * ) gs_alloc_bytes ( mem , strlen ( src -> font_file ) + 1 , ""pl_clone_font"" )"		8198138	1					
ANR	8198396	CastTarget	char *		8198138	0					
ANR	8198397	CallExpression	"gs_alloc_bytes ( mem , strlen ( src -> font_file ) + 1 , ""pl_clone_font"" )"		8198138	1					
ANR	8198398	Callee	gs_alloc_bytes		8198138	0					
ANR	8198399	Identifier	gs_alloc_bytes		8198138	0					
ANR	8198400	ArgumentList	mem		8198138	1					
ANR	8198401	Argument	mem		8198138	0					
ANR	8198402	Identifier	mem		8198138	0					
ANR	8198403	Argument	strlen ( src -> font_file ) + 1		8198138	1					
ANR	8198404	AdditiveExpression	strlen ( src -> font_file ) + 1		8198138	0		+			
ANR	8198405	CallExpression	strlen ( src -> font_file )		8198138	0					
ANR	8198406	Callee	strlen		8198138	0					
ANR	8198407	Identifier	strlen		8198138	0					
ANR	8198408	ArgumentList	src -> font_file		8198138	1					
ANR	8198409	Argument	src -> font_file		8198138	0					
ANR	8198410	PtrMemberAccess	src -> font_file		8198138	0					
ANR	8198411	Identifier	src		8198138	0					
ANR	8198412	Identifier	font_file		8198138	1					
ANR	8198413	PrimaryExpression	1		8198138	1					
ANR	8198414	Argument	"""pl_clone_font"""		8198138	2					
ANR	8198415	PrimaryExpression	"""pl_clone_font"""		8198138	0					
ANR	8198416	IfStatement	if ( plfont -> font_file == 0 )		8198138	1					
ANR	8198417	Condition	plfont -> font_file == 0	657:12:16639:16660	8198138	0	True				
ANR	8198418	EqualityExpression	plfont -> font_file == 0		8198138	0		==			
ANR	8198419	PtrMemberAccess	plfont -> font_file		8198138	0					
ANR	8198420	Identifier	plfont		8198138	0					
ANR	8198421	Identifier	font_file		8198138	1					
ANR	8198422	PrimaryExpression	0		8198138	1					
ANR	8198423	ReturnStatement	return 0 ;	658:12:16675:16683	8198138	1	True				
ANR	8198424	PrimaryExpression	0		8198138	0					
ANR	8198425	ExpressionStatement	"strcpy ( plfont -> font_file , src -> font_file )"	659:8:16723:16764	8198138	2	True				
ANR	8198426	CallExpression	"strcpy ( plfont -> font_file , src -> font_file )"		8198138	0					
ANR	8198427	Callee	strcpy		8198138	0					
ANR	8198428	Identifier	strcpy		8198138	0					
ANR	8198429	ArgumentList	plfont -> font_file		8198138	1					
ANR	8198430	Argument	plfont -> font_file		8198138	0					
ANR	8198431	PtrMemberAccess	plfont -> font_file		8198138	0					
ANR	8198432	Identifier	plfont		8198138	0					
ANR	8198433	Identifier	font_file		8198138	1					
ANR	8198434	Argument	src -> font_file		8198138	1					
ANR	8198435	PtrMemberAccess	src -> font_file		8198138	0					
ANR	8198436	Identifier	src		8198138	0					
ANR	8198437	Identifier	font_file		8198138	1					
ANR	8198438	ElseStatement	else		8198138	0					
ANR	8198439	ExpressionStatement	plfont -> font_file = 0	661:8:16785:16806	8198138	0	True				
ANR	8198440	AssignmentExpression	plfont -> font_file = 0		8198138	0		=			
ANR	8198441	PtrMemberAccess	plfont -> font_file		8198138	0					
ANR	8198442	Identifier	plfont		8198138	0					
ANR	8198443	Identifier	font_file		8198138	1					
ANR	8198444	PrimaryExpression	0		8198138	1					
ANR	8198445	SwitchStatement	switch ( plfont -> scaling_technology )		8198138	25					
ANR	8198446	Condition	plfont -> scaling_technology	663:12:16856:16881	8198138	0	True				
ANR	8198447	PtrMemberAccess	plfont -> scaling_technology		8198138	0					
ANR	8198448	Identifier	plfont		8198138	0					
ANR	8198449	Identifier	scaling_technology		8198138	1					
ANR	8198450	CompoundStatement		46:40:1725:1725	8198138	1					
ANR	8198451	Label	case plfst_bitmap :	664:8:16894:16911	8198138	0	True				
ANR	8198452	Identifier	plfst_bitmap		8198138	0					
ANR	8198453	CompoundStatement		49:16:1784:1921	8198138	1					
ANR	8198454	IdentifierDeclStatement	"gs_font_base * pfont = gs_alloc_struct ( mem , gs_font_base , & st_gs_font_base , cname ) ;"	666:16:16943:17080	8198138	0	True				
ANR	8198455	IdentifierDecl	"* pfont = gs_alloc_struct ( mem , gs_font_base , & st_gs_font_base , cname )"		8198138	0					
ANR	8198456	IdentifierDeclType	gs_font_base *		8198138	0					
ANR	8198457	Identifier	pfont		8198138	1					
ANR	8198458	AssignmentExpression	"* pfont = gs_alloc_struct ( mem , gs_font_base , & st_gs_font_base , cname )"		8198138	2		=			
ANR	8198459	Identifier	pfont		8198138	0					
ANR	8198460	CallExpression	"gs_alloc_struct ( mem , gs_font_base , & st_gs_font_base , cname )"		8198138	1					
ANR	8198461	Callee	gs_alloc_struct		8198138	0					
ANR	8198462	Identifier	gs_alloc_struct		8198138	0					
ANR	8198463	ArgumentList	mem		8198138	1					
ANR	8198464	Argument	mem		8198138	0					
ANR	8198465	Identifier	mem		8198138	0					
ANR	8198466	Argument	gs_font_base		8198138	1					
ANR	8198467	Identifier	gs_font_base		8198138	0					
ANR	8198468	Argument	& st_gs_font_base		8198138	2					
ANR	8198469	UnaryOperationExpression	& st_gs_font_base		8198138	0					
ANR	8198470	UnaryOperator	&		8198138	0					
ANR	8198471	Identifier	st_gs_font_base		8198138	1					
ANR	8198472	Argument	cname		8198138	3					
ANR	8198473	Identifier	cname		8198138	0					
ANR	8198474	IfStatement	if ( pfont == 0 )		8198138	1					
ANR	8198475	Condition	pfont == 0	669:20:17102:17111	8198138	0	True				
ANR	8198476	EqualityExpression	pfont == 0		8198138	0		==			
ANR	8198477	Identifier	pfont		8198138	0					
ANR	8198478	PrimaryExpression	0		8198138	1					
ANR	8198479	ReturnStatement	return 0 ;	670:20:17134:17142	8198138	1	True				
ANR	8198480	PrimaryExpression	0		8198138	0					
ANR	8198481	ExpressionStatement	"pl_fill_in_font ( ( gs_font * ) pfont , plfont , src -> pfont -> dir , mem , ""nameless_font"" )"	671:16:17160:17273	8198138	2	True				
ANR	8198482	CallExpression	"pl_fill_in_font ( ( gs_font * ) pfont , plfont , src -> pfont -> dir , mem , ""nameless_font"" )"		8198138	0					
ANR	8198483	Callee	pl_fill_in_font		8198138	0					
ANR	8198484	Identifier	pl_fill_in_font		8198138	0					
ANR	8198485	ArgumentList	( gs_font * ) pfont		8198138	1					
ANR	8198486	Argument	( gs_font * ) pfont		8198138	0					
ANR	8198487	CastExpression	( gs_font * ) pfont		8198138	0					
ANR	8198488	CastTarget	gs_font *		8198138	0					
ANR	8198489	Identifier	pfont		8198138	1					
ANR	8198490	Argument	plfont		8198138	1					
ANR	8198491	Identifier	plfont		8198138	0					
ANR	8198492	Argument	src -> pfont -> dir		8198138	2					
ANR	8198493	PtrMemberAccess	src -> pfont -> dir		8198138	0					
ANR	8198494	PtrMemberAccess	src -> pfont		8198138	0					
ANR	8198495	Identifier	src		8198138	0					
ANR	8198496	Identifier	pfont		8198138	1					
ANR	8198497	Identifier	dir		8198138	1					
ANR	8198498	Argument	mem		8198138	3					
ANR	8198499	Identifier	mem		8198138	0					
ANR	8198500	Argument	"""nameless_font"""		8198138	4					
ANR	8198501	PrimaryExpression	"""nameless_font"""		8198138	0					
ANR	8198502	ExpressionStatement	"pl_fill_in_bitmap_font ( pfont , gs_next_ids ( mem , 1 ) )"	673:16:17291:17341	8198138	3	True				
ANR	8198503	CallExpression	"pl_fill_in_bitmap_font ( pfont , gs_next_ids ( mem , 1 ) )"		8198138	0					
ANR	8198504	Callee	pl_fill_in_bitmap_font		8198138	0					
ANR	8198505	Identifier	pl_fill_in_bitmap_font		8198138	0					
ANR	8198506	ArgumentList	pfont		8198138	1					
ANR	8198507	Argument	pfont		8198138	0					
ANR	8198508	Identifier	pfont		8198138	0					
ANR	8198509	Argument	"gs_next_ids ( mem , 1 )"		8198138	1					
ANR	8198510	CallExpression	"gs_next_ids ( mem , 1 )"		8198138	0					
ANR	8198511	Callee	gs_next_ids		8198138	0					
ANR	8198512	Identifier	gs_next_ids		8198138	0					
ANR	8198513	ArgumentList	mem		8198138	1					
ANR	8198514	Argument	mem		8198138	0					
ANR	8198515	Identifier	mem		8198138	0					
ANR	8198516	Argument	1		8198138	1					
ANR	8198517	PrimaryExpression	1		8198138	0					
ANR	8198518	BreakStatement	break ;	674:16:17359:17364	8198138	4	True				
ANR	8198519	Label	case plfst_Intellifont :	676:8:17388:17410	8198138	2	True				
ANR	8198520	Identifier	plfst_Intellifont		8198138	0					
ANR	8198521	CompoundStatement		61:16:2283:2420	8198138	3					
ANR	8198522	IdentifierDeclStatement	"gs_font_base * pfont = gs_alloc_struct ( mem , gs_font_base , & st_gs_font_base , cname ) ;"	678:16:17442:17579	8198138	0	True				
ANR	8198523	IdentifierDecl	"* pfont = gs_alloc_struct ( mem , gs_font_base , & st_gs_font_base , cname )"		8198138	0					
ANR	8198524	IdentifierDeclType	gs_font_base *		8198138	0					
ANR	8198525	Identifier	pfont		8198138	1					
ANR	8198526	AssignmentExpression	"* pfont = gs_alloc_struct ( mem , gs_font_base , & st_gs_font_base , cname )"		8198138	2		=			
ANR	8198527	Identifier	pfont		8198138	0					
ANR	8198528	CallExpression	"gs_alloc_struct ( mem , gs_font_base , & st_gs_font_base , cname )"		8198138	1					
ANR	8198529	Callee	gs_alloc_struct		8198138	0					
ANR	8198530	Identifier	gs_alloc_struct		8198138	0					
ANR	8198531	ArgumentList	mem		8198138	1					
ANR	8198532	Argument	mem		8198138	0					
ANR	8198533	Identifier	mem		8198138	0					
ANR	8198534	Argument	gs_font_base		8198138	1					
ANR	8198535	Identifier	gs_font_base		8198138	0					
ANR	8198536	Argument	& st_gs_font_base		8198138	2					
ANR	8198537	UnaryOperationExpression	& st_gs_font_base		8198138	0					
ANR	8198538	UnaryOperator	&		8198138	0					
ANR	8198539	Identifier	st_gs_font_base		8198138	1					
ANR	8198540	Argument	cname		8198138	3					
ANR	8198541	Identifier	cname		8198138	0					
ANR	8198542	IfStatement	if ( pfont == 0 )		8198138	1					
ANR	8198543	Condition	pfont == 0	681:20:17601:17610	8198138	0	True				
ANR	8198544	EqualityExpression	pfont == 0		8198138	0		==			
ANR	8198545	Identifier	pfont		8198138	0					
ANR	8198546	PrimaryExpression	0		8198138	1					
ANR	8198547	ReturnStatement	return 0 ;	682:20:17633:17641	8198138	1	True				
ANR	8198548	PrimaryExpression	0		8198138	0					
ANR	8198549	ExpressionStatement	"pl_fill_in_font ( ( gs_font * ) pfont , plfont , src -> pfont -> dir , mem , ""nameless_font"" )"	683:16:17659:17772	8198138	2	True				
ANR	8198550	CallExpression	"pl_fill_in_font ( ( gs_font * ) pfont , plfont , src -> pfont -> dir , mem , ""nameless_font"" )"		8198138	0					
ANR	8198551	Callee	pl_fill_in_font		8198138	0					
ANR	8198552	Identifier	pl_fill_in_font		8198138	0					
ANR	8198553	ArgumentList	( gs_font * ) pfont		8198138	1					
ANR	8198554	Argument	( gs_font * ) pfont		8198138	0					
ANR	8198555	CastExpression	( gs_font * ) pfont		8198138	0					
ANR	8198556	CastTarget	gs_font *		8198138	0					
ANR	8198557	Identifier	pfont		8198138	1					
ANR	8198558	Argument	plfont		8198138	1					
ANR	8198559	Identifier	plfont		8198138	0					
ANR	8198560	Argument	src -> pfont -> dir		8198138	2					
ANR	8198561	PtrMemberAccess	src -> pfont -> dir		8198138	0					
ANR	8198562	PtrMemberAccess	src -> pfont		8198138	0					
ANR	8198563	Identifier	src		8198138	0					
ANR	8198564	Identifier	pfont		8198138	1					
ANR	8198565	Identifier	dir		8198138	1					
ANR	8198566	Argument	mem		8198138	3					
ANR	8198567	Identifier	mem		8198138	0					
ANR	8198568	Argument	"""nameless_font"""		8198138	4					
ANR	8198569	PrimaryExpression	"""nameless_font"""		8198138	0					
ANR	8198570	ExpressionStatement	"pl_fill_in_intelli_font ( pfont , gs_next_ids ( mem , 1 ) )"	685:16:17790:17841	8198138	3	True				
ANR	8198571	CallExpression	"pl_fill_in_intelli_font ( pfont , gs_next_ids ( mem , 1 ) )"		8198138	0					
ANR	8198572	Callee	pl_fill_in_intelli_font		8198138	0					
ANR	8198573	Identifier	pl_fill_in_intelli_font		8198138	0					
ANR	8198574	ArgumentList	pfont		8198138	1					
ANR	8198575	Argument	pfont		8198138	0					
ANR	8198576	Identifier	pfont		8198138	0					
ANR	8198577	Argument	"gs_next_ids ( mem , 1 )"		8198138	1					
ANR	8198578	CallExpression	"gs_next_ids ( mem , 1 )"		8198138	0					
ANR	8198579	Callee	gs_next_ids		8198138	0					
ANR	8198580	Identifier	gs_next_ids		8198138	0					
ANR	8198581	ArgumentList	mem		8198138	1					
ANR	8198582	Argument	mem		8198138	0					
ANR	8198583	Identifier	mem		8198138	0					
ANR	8198584	Argument	1		8198138	1					
ANR	8198585	PrimaryExpression	1		8198138	0					
ANR	8198586	BreakStatement	break ;	686:16:17859:17864	8198138	4	True				
ANR	8198587	Label	case plfst_TrueType :	688:8:17888:17907	8198138	4	True				
ANR	8198588	Identifier	plfst_TrueType		8198138	0					
ANR	8198589	CompoundStatement		72:12:2762:2762	8198138	5					
ANR	8198590	CompoundStatement		80:20:3187:3279	8198138	0					
ANR	8198591	IdentifierDeclStatement	"gs_font_type42 * pfont = gs_alloc_struct ( mem , gs_font_type42 , & st_gs_font_type42 , cname ) ;"	691:20:17961:18112	8198138	0	True				
ANR	8198592	IdentifierDecl	"* pfont = gs_alloc_struct ( mem , gs_font_type42 , & st_gs_font_type42 , cname )"		8198138	0					
ANR	8198593	IdentifierDeclType	gs_font_type42 *		8198138	0					
ANR	8198594	Identifier	pfont		8198138	1					
ANR	8198595	AssignmentExpression	"* pfont = gs_alloc_struct ( mem , gs_font_type42 , & st_gs_font_type42 , cname )"		8198138	2		=			
ANR	8198596	Identifier	pfont		8198138	0					
ANR	8198597	CallExpression	"gs_alloc_struct ( mem , gs_font_type42 , & st_gs_font_type42 , cname )"		8198138	1					
ANR	8198598	Callee	gs_alloc_struct		8198138	0					
ANR	8198599	Identifier	gs_alloc_struct		8198138	0					
ANR	8198600	ArgumentList	mem		8198138	1					
ANR	8198601	Argument	mem		8198138	0					
ANR	8198602	Identifier	mem		8198138	0					
ANR	8198603	Argument	gs_font_type42		8198138	1					
ANR	8198604	Identifier	gs_font_type42		8198138	0					
ANR	8198605	Argument	& st_gs_font_type42		8198138	2					
ANR	8198606	UnaryOperationExpression	& st_gs_font_type42		8198138	0					
ANR	8198607	UnaryOperator	&		8198138	0					
ANR	8198608	Identifier	st_gs_font_type42		8198138	1					
ANR	8198609	Argument	cname		8198138	3					
ANR	8198610	Identifier	cname		8198138	0					
ANR	8198611	IdentifierDeclStatement	gs_font_type42 * pfont_src = ( gs_font_type42 * ) src -> pfont ;	696:20:18267:18324	8198138	1	True				
ANR	8198612	IdentifierDecl	* pfont_src = ( gs_font_type42 * ) src -> pfont		8198138	0					
ANR	8198613	IdentifierDeclType	gs_font_type42 *		8198138	0					
ANR	8198614	Identifier	pfont_src		8198138	1					
ANR	8198615	AssignmentExpression	* pfont_src = ( gs_font_type42 * ) src -> pfont		8198138	2		=			
ANR	8198616	Identifier	pfont_src		8198138	0					
ANR	8198617	CastExpression	( gs_font_type42 * ) src -> pfont		8198138	1					
ANR	8198618	CastTarget	gs_font_type42 *		8198138	0					
ANR	8198619	PtrMemberAccess	src -> pfont		8198138	1					
ANR	8198620	Identifier	src		8198138	0					
ANR	8198621	Identifier	pfont		8198138	1					
ANR	8198622	IdentifierDeclStatement	bool downloaded = ( pfont_src -> data . get_outline == pl_tt_get_outline ) ;	697:20:18346:18438	8198138	2	True				
ANR	8198623	IdentifierDecl	downloaded = ( pfont_src -> data . get_outline == pl_tt_get_outline )		8198138	0					
ANR	8198624	IdentifierDeclType	bool		8198138	0					
ANR	8198625	Identifier	downloaded		8198138	1					
ANR	8198626	AssignmentExpression	downloaded = ( pfont_src -> data . get_outline == pl_tt_get_outline )		8198138	2		=			
ANR	8198627	Identifier	downloaded		8198138	0					
ANR	8198628	EqualityExpression	pfont_src -> data . get_outline == pl_tt_get_outline		8198138	1		==			
ANR	8198629	MemberAccess	pfont_src -> data . get_outline		8198138	0					
ANR	8198630	PtrMemberAccess	pfont_src -> data		8198138	0					
ANR	8198631	Identifier	pfont_src		8198138	0					
ANR	8198632	Identifier	data		8198138	1					
ANR	8198633	Identifier	get_outline		8198138	1					
ANR	8198634	Identifier	pl_tt_get_outline		8198138	1					
ANR	8198635	IfStatement	if ( pfont == 0 )		8198138	3					
ANR	8198636	Condition	pfont == 0	699:24:18464:18473	8198138	0	True				
ANR	8198637	EqualityExpression	pfont == 0		8198138	0		==			
ANR	8198638	Identifier	pfont		8198138	0					
ANR	8198639	PrimaryExpression	0		8198138	1					
ANR	8198640	ReturnStatement	return 0 ;	700:24:18500:18508	8198138	1	True				
ANR	8198641	PrimaryExpression	0		8198138	0					
ANR	8198642	ExpressionStatement	"pl_fill_in_font ( ( gs_font * ) pfont , plfont , src -> pfont -> dir , mem , ""nameless_font"" )"	701:20:18530:18647	8198138	4	True				
ANR	8198643	CallExpression	"pl_fill_in_font ( ( gs_font * ) pfont , plfont , src -> pfont -> dir , mem , ""nameless_font"" )"		8198138	0					
ANR	8198644	Callee	pl_fill_in_font		8198138	0					
ANR	8198645	Identifier	pl_fill_in_font		8198138	0					
ANR	8198646	ArgumentList	( gs_font * ) pfont		8198138	1					
ANR	8198647	Argument	( gs_font * ) pfont		8198138	0					
ANR	8198648	CastExpression	( gs_font * ) pfont		8198138	0					
ANR	8198649	CastTarget	gs_font *		8198138	0					
ANR	8198650	Identifier	pfont		8198138	1					
ANR	8198651	Argument	plfont		8198138	1					
ANR	8198652	Identifier	plfont		8198138	0					
ANR	8198653	Argument	src -> pfont -> dir		8198138	2					
ANR	8198654	PtrMemberAccess	src -> pfont -> dir		8198138	0					
ANR	8198655	PtrMemberAccess	src -> pfont		8198138	0					
ANR	8198656	Identifier	src		8198138	0					
ANR	8198657	Identifier	pfont		8198138	1					
ANR	8198658	Identifier	dir		8198138	1					
ANR	8198659	Argument	mem		8198138	3					
ANR	8198660	Identifier	mem		8198138	0					
ANR	8198661	Argument	"""nameless_font"""		8198138	4					
ANR	8198662	PrimaryExpression	"""nameless_font"""		8198138	0					
ANR	8198663	ExpressionStatement	"pl_fill_in_tt_font ( pfont , downloaded ? NULL : src -> header , gs_next_ids ( mem , 1 ) )"	703:20:18669:18787	8198138	5	True				
ANR	8198664	CallExpression	"pl_fill_in_tt_font ( pfont , downloaded ? NULL : src -> header , gs_next_ids ( mem , 1 ) )"		8198138	0					
ANR	8198665	Callee	pl_fill_in_tt_font		8198138	0					
ANR	8198666	Identifier	pl_fill_in_tt_font		8198138	0					
ANR	8198667	ArgumentList	pfont		8198138	1					
ANR	8198668	Argument	pfont		8198138	0					
ANR	8198669	Identifier	pfont		8198138	0					
ANR	8198670	Argument	downloaded ? NULL : src -> header		8198138	1					
ANR	8198671	ConditionalExpression	downloaded ? NULL : src -> header		8198138	0					
ANR	8198672	Condition	downloaded		8198138	0					
ANR	8198673	Identifier	downloaded		8198138	0					
ANR	8198674	Identifier	NULL		8198138	1					
ANR	8198675	PtrMemberAccess	src -> header		8198138	2					
ANR	8198676	Identifier	src		8198138	0					
ANR	8198677	Identifier	header		8198138	1					
ANR	8198678	Argument	"gs_next_ids ( mem , 1 )"		8198138	2					
ANR	8198679	CallExpression	"gs_next_ids ( mem , 1 )"		8198138	0					
ANR	8198680	Callee	gs_next_ids		8198138	0					
ANR	8198681	Identifier	gs_next_ids		8198138	0					
ANR	8198682	ArgumentList	mem		8198138	1					
ANR	8198683	Argument	mem		8198138	0					
ANR	8198684	Identifier	mem		8198138	0					
ANR	8198685	Argument	1		8198138	1					
ANR	8198686	PrimaryExpression	1		8198138	0					
ANR	8198687	BreakStatement	break ;	706:16:18823:18828	8198138	1	True				
ANR	8198688	Label	default :	708:8:18852:18859	8198138	6	True				
ANR	8198689	Identifier	default		8198138	0					
ANR	8198690	ReturnStatement	return 0 ;	709:12:18873:18881	8198138	7	True				
ANR	8198691	PrimaryExpression	0		8198138	0					
ANR	8198692	IfStatement	if ( src -> char_glyphs . table != 0 )		8198138	26					
ANR	8198693	Condition	src -> char_glyphs . table != 0	711:8:18897:18923	8198138	0	True				
ANR	8198694	EqualityExpression	src -> char_glyphs . table != 0		8198138	0		!=			
ANR	8198695	MemberAccess	src -> char_glyphs . table		8198138	0					
ANR	8198696	PtrMemberAccess	src -> char_glyphs		8198138	0					
ANR	8198697	Identifier	src		8198138	0					
ANR	8198698	Identifier	char_glyphs		8198138	1					
ANR	8198699	Identifier	table		8198138	1					
ANR	8198700	PrimaryExpression	0		8198138	1					
ANR	8198701	CompoundStatement		103:8:4275:4280	8198138	1					
ANR	8198702	IdentifierDeclStatement	"pl_tt_char_glyph_t * char_glyphs = ( pl_tt_char_glyph_t * ) gs_alloc_byte_array ( mem , src -> char_glyphs . size , sizeof ( pl_tt_char_glyph_t ) , cname ) ;"	714:8:19052:19424	8198138	0	True				
ANR	8198703	IdentifierDecl	"* char_glyphs = ( pl_tt_char_glyph_t * ) gs_alloc_byte_array ( mem , src -> char_glyphs . size , sizeof ( pl_tt_char_glyph_t ) , cname )"		8198138	0					
ANR	8198704	IdentifierDeclType	pl_tt_char_glyph_t *		8198138	0					
ANR	8198705	Identifier	char_glyphs		8198138	1					
ANR	8198706	AssignmentExpression	"* char_glyphs = ( pl_tt_char_glyph_t * ) gs_alloc_byte_array ( mem , src -> char_glyphs . size , sizeof ( pl_tt_char_glyph_t ) , cname )"		8198138	2		=			
ANR	8198707	Identifier	char_glyphs		8198138	0					
ANR	8198708	CastExpression	"( pl_tt_char_glyph_t * ) gs_alloc_byte_array ( mem , src -> char_glyphs . size , sizeof ( pl_tt_char_glyph_t ) , cname )"		8198138	1					
ANR	8198709	CastTarget	pl_tt_char_glyph_t *		8198138	0					
ANR	8198710	CallExpression	"gs_alloc_byte_array ( mem , src -> char_glyphs . size , sizeof ( pl_tt_char_glyph_t ) , cname )"		8198138	1					
ANR	8198711	Callee	gs_alloc_byte_array		8198138	0					
ANR	8198712	Identifier	gs_alloc_byte_array		8198138	0					
ANR	8198713	ArgumentList	mem		8198138	1					
ANR	8198714	Argument	mem		8198138	0					
ANR	8198715	Identifier	mem		8198138	0					
ANR	8198716	Argument	src -> char_glyphs . size		8198138	1					
ANR	8198717	MemberAccess	src -> char_glyphs . size		8198138	0					
ANR	8198718	PtrMemberAccess	src -> char_glyphs		8198138	0					
ANR	8198719	Identifier	src		8198138	0					
ANR	8198720	Identifier	char_glyphs		8198138	1					
ANR	8198721	Identifier	size		8198138	1					
ANR	8198722	Argument	sizeof ( pl_tt_char_glyph_t )		8198138	2					
ANR	8198723	SizeofExpression	sizeof ( pl_tt_char_glyph_t )		8198138	0					
ANR	8198724	Sizeof	sizeof		8198138	0					
ANR	8198725	SizeofOperand	pl_tt_char_glyph_t		8198138	1					
ANR	8198726	Argument	cname		8198138	3					
ANR	8198727	Identifier	cname		8198138	0					
ANR	8198728	IdentifierDeclStatement	int i ;	720:8:19434:19439	8198138	1	True				
ANR	8198729	IdentifierDecl	i		8198138	0					
ANR	8198730	IdentifierDeclType	int		8198138	0					
ANR	8198731	Identifier	i		8198138	1					
ANR	8198732	IfStatement	if ( char_glyphs == 0 )		8198138	2					
ANR	8198733	Condition	char_glyphs == 0	722:12:19454:19469	8198138	0	True				
ANR	8198734	EqualityExpression	char_glyphs == 0		8198138	0		==			
ANR	8198735	Identifier	char_glyphs		8198138	0					
ANR	8198736	PrimaryExpression	0		8198138	1					
ANR	8198737	ReturnStatement	return 0 ;	723:12:19484:19492	8198138	1	True				
ANR	8198738	PrimaryExpression	0		8198138	0					
ANR	8198739	ForStatement	for ( i = 0 ; i < src -> char_glyphs . size ; i ++ )		8198138	3					
ANR	8198740	ForInit	i = 0 ;	724:13:19507:19512	8198138	0	True				
ANR	8198741	AssignmentExpression	i = 0		8198138	0		=			
ANR	8198742	Identifier	i		8198138	0					
ANR	8198743	PrimaryExpression	0		8198138	1					
ANR	8198744	Condition	i < src -> char_glyphs . size	724:20:19514:19538	8198138	1	True				
ANR	8198745	RelationalExpression	i < src -> char_glyphs . size		8198138	0		<			
ANR	8198746	Identifier	i		8198138	0					
ANR	8198747	MemberAccess	src -> char_glyphs . size		8198138	1					
ANR	8198748	PtrMemberAccess	src -> char_glyphs		8198138	0					
ANR	8198749	Identifier	src		8198138	0					
ANR	8198750	Identifier	char_glyphs		8198138	1					
ANR	8198751	Identifier	size		8198138	1					
ANR	8198752	PostIncDecOperationExpression	i ++	724:47:19541:19543	8198138	2	True				
ANR	8198753	Identifier	i		8198138	0					
ANR	8198754	IncDec	++		8198138	1					
ANR	8198755	ExpressionStatement	char_glyphs [ i ] = src -> char_glyphs . table [ i ]	725:12:19558:19600	8198138	3	True				
ANR	8198756	AssignmentExpression	char_glyphs [ i ] = src -> char_glyphs . table [ i ]		8198138	0		=			
ANR	8198757	ArrayIndexing	char_glyphs [ i ]		8198138	0					
ANR	8198758	Identifier	char_glyphs		8198138	0					
ANR	8198759	Identifier	i		8198138	1					
ANR	8198760	ArrayIndexing	src -> char_glyphs . table [ i ]		8198138	1					
ANR	8198761	MemberAccess	src -> char_glyphs . table		8198138	0					
ANR	8198762	PtrMemberAccess	src -> char_glyphs		8198138	0					
ANR	8198763	Identifier	src		8198138	0					
ANR	8198764	Identifier	char_glyphs		8198138	1					
ANR	8198765	Identifier	table		8198138	1					
ANR	8198766	Identifier	i		8198138	1					
ANR	8198767	ExpressionStatement	plfont -> char_glyphs = src -> char_glyphs	728:8:19723:19761	8198138	4	True				
ANR	8198768	AssignmentExpression	plfont -> char_glyphs = src -> char_glyphs		8198138	0		=			
ANR	8198769	PtrMemberAccess	plfont -> char_glyphs		8198138	0					
ANR	8198770	Identifier	plfont		8198138	0					
ANR	8198771	Identifier	char_glyphs		8198138	1					
ANR	8198772	PtrMemberAccess	src -> char_glyphs		8198138	1					
ANR	8198773	Identifier	src		8198138	0					
ANR	8198774	Identifier	char_glyphs		8198138	1					
ANR	8198775	ExpressionStatement	plfont -> char_glyphs . table = char_glyphs	729:8:19771:19810	8198138	5	True				
ANR	8198776	AssignmentExpression	plfont -> char_glyphs . table = char_glyphs		8198138	0		=			
ANR	8198777	MemberAccess	plfont -> char_glyphs . table		8198138	0					
ANR	8198778	PtrMemberAccess	plfont -> char_glyphs		8198138	0					
ANR	8198779	Identifier	plfont		8198138	0					
ANR	8198780	Identifier	char_glyphs		8198138	1					
ANR	8198781	Identifier	table		8198138	1					
ANR	8198782	Identifier	char_glyphs		8198138	1					
ANR	8198783	ElseStatement	else		8198138	0					
ANR	8198784	ExpressionStatement	plfont -> char_glyphs = src -> char_glyphs	731:8:19888:19926	8198138	0	True				
ANR	8198785	AssignmentExpression	plfont -> char_glyphs = src -> char_glyphs		8198138	0		=			
ANR	8198786	PtrMemberAccess	plfont -> char_glyphs		8198138	0					
ANR	8198787	Identifier	plfont		8198138	0					
ANR	8198788	Identifier	char_glyphs		8198138	1					
ANR	8198789	PtrMemberAccess	src -> char_glyphs		8198138	1					
ANR	8198790	Identifier	src		8198138	0					
ANR	8198791	Identifier	char_glyphs		8198138	1					
ANR	8198792	IfStatement	if ( src -> glyphs . table != 0 )		8198138	27					
ANR	8198793	Condition	src -> glyphs . table != 0	733:8:19937:19958	8198138	0	True				
ANR	8198794	EqualityExpression	src -> glyphs . table != 0		8198138	0		!=			
ANR	8198795	MemberAccess	src -> glyphs . table		8198138	0					
ANR	8198796	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198797	Identifier	src		8198138	0					
ANR	8198798	Identifier	glyphs		8198138	1					
ANR	8198799	Identifier	table		8198138	1					
ANR	8198800	PrimaryExpression	0		8198138	1					
ANR	8198801	CompoundStatement		117:8:4812:4817	8198138	1					
ANR	8198802	IdentifierDeclStatement	int i ;	734:8:19971:19976	8198138	0	True				
ANR	8198803	IdentifierDecl	i		8198138	0					
ANR	8198804	IdentifierDeclType	int		8198138	0					
ANR	8198805	Identifier	i		8198138	1					
ANR	8198806	ExpressionStatement	"plfont -> glyphs . table = gs_alloc_struct_array ( mem , src -> glyphs . size , pl_font_glyph_t , & st_pl_font_glyph_element_f , cname )"	736:8:19987:20153	8198138	1	True				
ANR	8198807	AssignmentExpression	"plfont -> glyphs . table = gs_alloc_struct_array ( mem , src -> glyphs . size , pl_font_glyph_t , & st_pl_font_glyph_element_f , cname )"		8198138	0		=			
ANR	8198808	MemberAccess	plfont -> glyphs . table		8198138	0					
ANR	8198809	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8198810	Identifier	plfont		8198138	0					
ANR	8198811	Identifier	glyphs		8198138	1					
ANR	8198812	Identifier	table		8198138	1					
ANR	8198813	CallExpression	"gs_alloc_struct_array ( mem , src -> glyphs . size , pl_font_glyph_t , & st_pl_font_glyph_element_f , cname )"		8198138	1					
ANR	8198814	Callee	gs_alloc_struct_array		8198138	0					
ANR	8198815	Identifier	gs_alloc_struct_array		8198138	0					
ANR	8198816	ArgumentList	mem		8198138	1					
ANR	8198817	Argument	mem		8198138	0					
ANR	8198818	Identifier	mem		8198138	0					
ANR	8198819	Argument	src -> glyphs . size		8198138	1					
ANR	8198820	MemberAccess	src -> glyphs . size		8198138	0					
ANR	8198821	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198822	Identifier	src		8198138	0					
ANR	8198823	Identifier	glyphs		8198138	1					
ANR	8198824	Identifier	size		8198138	1					
ANR	8198825	Argument	pl_font_glyph_t		8198138	2					
ANR	8198826	Identifier	pl_font_glyph_t		8198138	0					
ANR	8198827	Argument	& st_pl_font_glyph_element_f		8198138	3					
ANR	8198828	UnaryOperationExpression	& st_pl_font_glyph_element_f		8198138	0					
ANR	8198829	UnaryOperator	&		8198138	0					
ANR	8198830	Identifier	st_pl_font_glyph_element_f		8198138	1					
ANR	8198831	Argument	cname		8198138	4					
ANR	8198832	Identifier	cname		8198138	0					
ANR	8198833	ExpressionStatement	plfont -> glyphs . used = src -> glyphs . used	739:8:20163:20201	8198138	2	True				
ANR	8198834	AssignmentExpression	plfont -> glyphs . used = src -> glyphs . used		8198138	0		=			
ANR	8198835	MemberAccess	plfont -> glyphs . used		8198138	0					
ANR	8198836	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8198837	Identifier	plfont		8198138	0					
ANR	8198838	Identifier	glyphs		8198138	1					
ANR	8198839	Identifier	used		8198138	1					
ANR	8198840	MemberAccess	src -> glyphs . used		8198138	1					
ANR	8198841	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198842	Identifier	src		8198138	0					
ANR	8198843	Identifier	glyphs		8198138	1					
ANR	8198844	Identifier	used		8198138	1					
ANR	8198845	ExpressionStatement	plfont -> glyphs . limit = src -> glyphs . limit	740:8:20211:20251	8198138	3	True				
ANR	8198846	AssignmentExpression	plfont -> glyphs . limit = src -> glyphs . limit		8198138	0		=			
ANR	8198847	MemberAccess	plfont -> glyphs . limit		8198138	0					
ANR	8198848	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8198849	Identifier	plfont		8198138	0					
ANR	8198850	Identifier	glyphs		8198138	1					
ANR	8198851	Identifier	limit		8198138	1					
ANR	8198852	MemberAccess	src -> glyphs . limit		8198138	1					
ANR	8198853	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198854	Identifier	src		8198138	0					
ANR	8198855	Identifier	glyphs		8198138	1					
ANR	8198856	Identifier	limit		8198138	1					
ANR	8198857	ExpressionStatement	plfont -> glyphs . size = src -> glyphs . size	741:8:20261:20299	8198138	4	True				
ANR	8198858	AssignmentExpression	plfont -> glyphs . size = src -> glyphs . size		8198138	0		=			
ANR	8198859	MemberAccess	plfont -> glyphs . size		8198138	0					
ANR	8198860	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8198861	Identifier	plfont		8198138	0					
ANR	8198862	Identifier	glyphs		8198138	1					
ANR	8198863	Identifier	size		8198138	1					
ANR	8198864	MemberAccess	src -> glyphs . size		8198138	1					
ANR	8198865	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198866	Identifier	src		8198138	0					
ANR	8198867	Identifier	glyphs		8198138	1					
ANR	8198868	Identifier	size		8198138	1					
ANR	8198869	ExpressionStatement	plfont -> glyphs . skip = src -> glyphs . skip	742:8:20309:20347	8198138	5	True				
ANR	8198870	AssignmentExpression	plfont -> glyphs . skip = src -> glyphs . skip		8198138	0		=			
ANR	8198871	MemberAccess	plfont -> glyphs . skip		8198138	0					
ANR	8198872	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8198873	Identifier	plfont		8198138	0					
ANR	8198874	Identifier	glyphs		8198138	1					
ANR	8198875	Identifier	skip		8198138	1					
ANR	8198876	MemberAccess	src -> glyphs . skip		8198138	1					
ANR	8198877	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198878	Identifier	src		8198138	0					
ANR	8198879	Identifier	glyphs		8198138	1					
ANR	8198880	Identifier	skip		8198138	1					
ANR	8198881	ForStatement	for ( i = 0 ; i < src -> glyphs . size ; i ++ )		8198138	6					
ANR	8198882	ForInit	i = 0 ;	743:13:20362:20367	8198138	0	True				
ANR	8198883	AssignmentExpression	i = 0		8198138	0		=			
ANR	8198884	Identifier	i		8198138	0					
ANR	8198885	PrimaryExpression	0		8198138	1					
ANR	8198886	Condition	i < src -> glyphs . size	743:20:20369:20388	8198138	1	True				
ANR	8198887	RelationalExpression	i < src -> glyphs . size		8198138	0		<			
ANR	8198888	Identifier	i		8198138	0					
ANR	8198889	MemberAccess	src -> glyphs . size		8198138	1					
ANR	8198890	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198891	Identifier	src		8198138	0					
ANR	8198892	Identifier	glyphs		8198138	1					
ANR	8198893	Identifier	size		8198138	1					
ANR	8198894	PostIncDecOperationExpression	i ++	743:42:20391:20393	8198138	2	True				
ANR	8198895	Identifier	i		8198138	0					
ANR	8198896	IncDec	++		8198138	1					
ANR	8198897	CompoundStatement		128:12:5309:5324	8198138	3					
ANR	8198898	IdentifierDeclStatement	const byte * data = src -> glyphs . table [ i ] . data ;	744:12:20410:20454	8198138	0	True				
ANR	8198899	IdentifierDecl	* data = src -> glyphs . table [ i ] . data		8198138	0					
ANR	8198900	IdentifierDeclType	const byte *		8198138	0					
ANR	8198901	Identifier	data		8198138	1					
ANR	8198902	AssignmentExpression	* data = src -> glyphs . table [ i ] . data		8198138	2		=			
ANR	8198903	Identifier	data		8198138	0					
ANR	8198904	MemberAccess	src -> glyphs . table [ i ] . data		8198138	1					
ANR	8198905	ArrayIndexing	src -> glyphs . table [ i ]		8198138	0					
ANR	8198906	MemberAccess	src -> glyphs . table		8198138	0					
ANR	8198907	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198908	Identifier	src		8198138	0					
ANR	8198909	Identifier	glyphs		8198138	1					
ANR	8198910	Identifier	table		8198138	1					
ANR	8198911	Identifier	i		8198138	1					
ANR	8198912	Identifier	data		8198138	1					
ANR	8198913	IdentifierDeclStatement	byte * char_data ;	745:12:20468:20483	8198138	1	True				
ANR	8198914	IdentifierDecl	* char_data		8198138	0					
ANR	8198915	IdentifierDeclType	byte *		8198138	0					
ANR	8198916	Identifier	char_data		8198138	1					
ANR	8198917	ExpressionStatement	plfont -> glyphs . table [ i ] . glyph = src -> glyphs . table [ i ] . glyph	747:12:20498:20556	8198138	2	True				
ANR	8198918	AssignmentExpression	plfont -> glyphs . table [ i ] . glyph = src -> glyphs . table [ i ] . glyph		8198138	0		=			
ANR	8198919	MemberAccess	plfont -> glyphs . table [ i ] . glyph		8198138	0					
ANR	8198920	ArrayIndexing	plfont -> glyphs . table [ i ]		8198138	0					
ANR	8198921	MemberAccess	plfont -> glyphs . table		8198138	0					
ANR	8198922	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8198923	Identifier	plfont		8198138	0					
ANR	8198924	Identifier	glyphs		8198138	1					
ANR	8198925	Identifier	table		8198138	1					
ANR	8198926	Identifier	i		8198138	1					
ANR	8198927	Identifier	glyph		8198138	1					
ANR	8198928	MemberAccess	src -> glyphs . table [ i ] . glyph		8198138	1					
ANR	8198929	ArrayIndexing	src -> glyphs . table [ i ]		8198138	0					
ANR	8198930	MemberAccess	src -> glyphs . table		8198138	0					
ANR	8198931	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198932	Identifier	src		8198138	0					
ANR	8198933	Identifier	glyphs		8198138	1					
ANR	8198934	Identifier	table		8198138	1					
ANR	8198935	Identifier	i		8198138	1					
ANR	8198936	Identifier	glyph		8198138	1					
ANR	8198937	ExpressionStatement	plfont -> glyphs . table [ i ] . data = 0	748:12:20570:20602	8198138	3	True				
ANR	8198938	AssignmentExpression	plfont -> glyphs . table [ i ] . data = 0		8198138	0		=			
ANR	8198939	MemberAccess	plfont -> glyphs . table [ i ] . data		8198138	0					
ANR	8198940	ArrayIndexing	plfont -> glyphs . table [ i ]		8198138	0					
ANR	8198941	MemberAccess	plfont -> glyphs . table		8198138	0					
ANR	8198942	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8198943	Identifier	plfont		8198138	0					
ANR	8198944	Identifier	glyphs		8198138	1					
ANR	8198945	Identifier	table		8198138	1					
ANR	8198946	Identifier	i		8198138	1					
ANR	8198947	Identifier	data		8198138	1					
ANR	8198948	PrimaryExpression	0		8198138	1					
ANR	8198949	IfStatement	if ( data )		8198138	4					
ANR	8198950	Condition	data	749:16:20620:20623	8198138	0	True				
ANR	8198951	Identifier	data		8198138	0					
ANR	8198952	CompoundStatement		133:16:5485:5526	8198138	1					
ANR	8198953	IdentifierDeclStatement	uint size = src -> glyphs . table [ i ] . data_len ;	750:16:20644:20685	8198138	0	True				
ANR	8198954	IdentifierDecl	size = src -> glyphs . table [ i ] . data_len		8198138	0					
ANR	8198955	IdentifierDeclType	uint		8198138	0					
ANR	8198956	Identifier	size		8198138	1					
ANR	8198957	AssignmentExpression	size = src -> glyphs . table [ i ] . data_len		8198138	2		=			
ANR	8198958	Identifier	size		8198138	0					
ANR	8198959	MemberAccess	src -> glyphs . table [ i ] . data_len		8198138	1					
ANR	8198960	ArrayIndexing	src -> glyphs . table [ i ]		8198138	0					
ANR	8198961	MemberAccess	src -> glyphs . table		8198138	0					
ANR	8198962	PtrMemberAccess	src -> glyphs		8198138	0					
ANR	8198963	Identifier	src		8198138	0					
ANR	8198964	Identifier	glyphs		8198138	1					
ANR	8198965	Identifier	table		8198138	1					
ANR	8198966	Identifier	i		8198138	1					
ANR	8198967	Identifier	data_len		8198138	1					
ANR	8198968	ExpressionStatement	"char_data = gs_alloc_bytes ( mem , size , cname )"	751:16:20703:20747	8198138	1	True				
ANR	8198969	AssignmentExpression	"char_data = gs_alloc_bytes ( mem , size , cname )"		8198138	0		=			
ANR	8198970	Identifier	char_data		8198138	0					
ANR	8198971	CallExpression	"gs_alloc_bytes ( mem , size , cname )"		8198138	1					
ANR	8198972	Callee	gs_alloc_bytes		8198138	0					
ANR	8198973	Identifier	gs_alloc_bytes		8198138	0					
ANR	8198974	ArgumentList	mem		8198138	1					
ANR	8198975	Argument	mem		8198138	0					
ANR	8198976	Identifier	mem		8198138	0					
ANR	8198977	Argument	size		8198138	1					
ANR	8198978	Identifier	size		8198138	0					
ANR	8198979	Argument	cname		8198138	2					
ANR	8198980	Identifier	cname		8198138	0					
ANR	8198981	IfStatement	if ( char_data == 0 )		8198138	2					
ANR	8198982	Condition	char_data == 0	752:20:20769:20782	8198138	0	True				
ANR	8198983	EqualityExpression	char_data == 0		8198138	0		==			
ANR	8198984	Identifier	char_data		8198138	0					
ANR	8198985	PrimaryExpression	0		8198138	1					
ANR	8198986	ReturnStatement	return 0 ;	753:20:20805:20813	8198138	1	True				
ANR	8198987	PrimaryExpression	0		8198138	0					
ANR	8198988	ExpressionStatement	"memcpy ( char_data , data , size )"	754:16:20831:20860	8198138	3	True				
ANR	8198989	CallExpression	"memcpy ( char_data , data , size )"		8198138	0					
ANR	8198990	Callee	memcpy		8198138	0					
ANR	8198991	Identifier	memcpy		8198138	0					
ANR	8198992	ArgumentList	char_data		8198138	1					
ANR	8198993	Argument	char_data		8198138	0					
ANR	8198994	Identifier	char_data		8198138	0					
ANR	8198995	Argument	data		8198138	1					
ANR	8198996	Identifier	data		8198138	0					
ANR	8198997	Argument	size		8198138	2					
ANR	8198998	Identifier	size		8198138	0					
ANR	8198999	ExpressionStatement	plfont -> glyphs . table [ i ] . data = char_data	755:16:20878:20918	8198138	4	True				
ANR	8199000	AssignmentExpression	plfont -> glyphs . table [ i ] . data = char_data		8198138	0		=			
ANR	8199001	MemberAccess	plfont -> glyphs . table [ i ] . data		8198138	0					
ANR	8199002	ArrayIndexing	plfont -> glyphs . table [ i ]		8198138	0					
ANR	8199003	MemberAccess	plfont -> glyphs . table		8198138	0					
ANR	8199004	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8199005	Identifier	plfont		8198138	0					
ANR	8199006	Identifier	glyphs		8198138	1					
ANR	8199007	Identifier	table		8198138	1					
ANR	8199008	Identifier	i		8198138	1					
ANR	8199009	Identifier	data		8198138	1					
ANR	8199010	Identifier	char_data		8198138	1					
ANR	8199011	ExpressionStatement	plfont -> glyphs . table [ i ] . data_len = size	756:16:20936:20975	8198138	5	True				
ANR	8199012	AssignmentExpression	plfont -> glyphs . table [ i ] . data_len = size		8198138	0		=			
ANR	8199013	MemberAccess	plfont -> glyphs . table [ i ] . data_len		8198138	0					
ANR	8199014	ArrayIndexing	plfont -> glyphs . table [ i ]		8198138	0					
ANR	8199015	MemberAccess	plfont -> glyphs . table		8198138	0					
ANR	8199016	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8199017	Identifier	plfont		8198138	0					
ANR	8199018	Identifier	glyphs		8198138	1					
ANR	8199019	Identifier	table		8198138	1					
ANR	8199020	Identifier	i		8198138	1					
ANR	8199021	Identifier	data_len		8198138	1					
ANR	8199022	Identifier	size		8198138	1					
ANR	8199023	ElseStatement	else		8198138	0					
ANR	8199024	ExpressionStatement	plfont -> glyphs = src -> glyphs	761:8:21063:21091	8198138	0	True				
ANR	8199025	AssignmentExpression	plfont -> glyphs = src -> glyphs		8198138	0		=			
ANR	8199026	PtrMemberAccess	plfont -> glyphs		8198138	0					
ANR	8199027	Identifier	plfont		8198138	0					
ANR	8199028	Identifier	glyphs		8198138	1					
ANR	8199029	PtrMemberAccess	src -> glyphs		8198138	1					
ANR	8199030	Identifier	src		8198138	0					
ANR	8199031	Identifier	glyphs		8198138	1					
ANR	8199032	ReturnStatement	return plfont ;	762:4:21097:21110	8198138	28	True				
ANR	8199033	Identifier	plfont		8198138	0					
ANR	8199034	ReturnType	pl_font_t *		8198138	1					
ANR	8199035	Identifier	pl_clone_font		8198138	2					
ANR	8199036	ParameterList	"const pl_font_t * src , gs_memory_t * mem , client_name_t cname"		8198138	3					
ANR	8199037	Parameter	const pl_font_t * src	617:14:15095:15115	8198138	0	True				
ANR	8199038	ParameterType	const pl_font_t *		8198138	0					
ANR	8199039	Identifier	src		8198138	1					
ANR	8199040	Parameter	gs_memory_t * mem	617:37:15118:15134	8198138	1	True				
ANR	8199041	ParameterType	gs_memory_t *		8198138	0					
ANR	8199042	Identifier	mem		8198138	1					
ANR	8199043	Parameter	client_name_t cname	617:56:15137:15155	8198138	2	True				
ANR	8199044	ParameterType	client_name_t		8198138	0					
ANR	8199045	Identifier	cname		8198138	1					
ANR	8199046	CFGEntryNode	ENTRY		8198138		True				
ANR	8199047	CFGExitNode	EXIT		8198138		True				
ANR	8199048	Symbol	src -> params		8198138						
ANR	8199049	Symbol	plfont -> widths_cache_nitems		8198138						
ANR	8199050	Symbol	src -> font_file_loaded		8198138						
ANR	8199051	Symbol	src -> glyphs		8198138						
ANR	8199052	Symbol	plfont -> header		8198138						
ANR	8199053	Symbol	char_glyphs		8198138						
ANR	8199054	Symbol	plfont		8198138						
ANR	8199055	Symbol	pl_tt_get_outline		8198138						
ANR	8199056	Symbol	gs_next_ids		8198138						
ANR	8199057	Symbol	plfont -> orient		8198138						
ANR	8199058	Symbol	src -> glyphs . table [ i ] . glyph		8198138						
ANR	8199059	Symbol	src -> offsets		8198138						
ANR	8199060	Symbol	plfont -> font_type		8198138						
ANR	8199061	Symbol	plfont -> glyphs . table [ i ] . glyph		8198138						
ANR	8199062	Symbol	src -> resolution		8198138						
ANR	8199063	Symbol	plfont -> storage		8198138						
ANR	8199064	Symbol	plfont -> glyphs . table		8198138						
ANR	8199065	Symbol	src -> font_file		8198138						
ANR	8199066	Symbol	* src -> pfont		8198138						
ANR	8199067	Symbol	src -> char_metrics		8198138						
ANR	8199068	Symbol	plfont -> character_complement		8198138						
ANR	8199069	Symbol	size		8198138						
ANR	8199070	Symbol	src -> glyphs . table		8198138						
ANR	8199071	Symbol	plfont -> pts_per_inch		8198138						
ANR	8199072	Symbol	src -> char_width		8198138						
ANR	8199073	Symbol	src -> font_type		8198138						
ANR	8199074	Symbol	src -> char_glyphs		8198138						
ANR	8199075	Symbol	* char_glyphs		8198138						
ANR	8199076	Symbol	pfont_src -> data . get_outline		8198138						
ANR	8199077	Symbol	* src -> char_glyphs . table		8198138						
ANR	8199078	Symbol	plfont -> font_file		8198138						
ANR	8199079	Symbol	src -> storage		8198138						
ANR	8199080	Symbol	plfont -> char_glyphs . table		8198138						
ANR	8199081	Symbol	src -> scaling_technology		8198138						
ANR	8199082	Symbol	i		8198138						
ANR	8199083	Symbol	src -> glyphs . size		8198138						
ANR	8199084	Symbol	plfont -> glyphs . size		8198138						
ANR	8199085	Symbol	src -> pts_per_inch		8198138						
ANR	8199086	Symbol	src -> is_xl_format		8198138						
ANR	8199087	Symbol	plfont -> char_metrics		8198138						
ANR	8199088	Symbol	plfont -> glyphs		8198138						
ANR	8199089	Symbol	& st_gs_font_type42		8198138						
ANR	8199090	Symbol	gs_alloc_byte_array		8198138						
ANR	8199091	Symbol	plfont -> scaling_technology		8198138						
ANR	8199092	Symbol	plfont -> char_width		8198138						
ANR	8199093	Symbol	src -> header		8198138						
ANR	8199094	Symbol	data		8198138						
ANR	8199095	Symbol	src -> glyphs . table [ i ] . data_len		8198138						
ANR	8199096	Symbol	plfont -> glyphs . limit		8198138						
ANR	8199097	Symbol	src -> orient		8198138						
ANR	8199098	Symbol	* src -> glyphs . table		8198138						
ANR	8199099	Symbol	plfont -> large_sizes		8198138						
ANR	8199100	Symbol	gs_font_base		8198138						
ANR	8199101	Symbol	* src		8198138						
ANR	8199102	Symbol	plfont -> glyphs . used		8198138						
ANR	8199103	Symbol	src -> allow_vertical_substitutes		8198138						
ANR	8199104	Symbol	strlen		8198138						
ANR	8199105	Symbol	src -> large_sizes		8198138						
ANR	8199106	Symbol	pfont_src -> data		8198138						
ANR	8199107	Symbol	* plfont -> glyphs		8198138						
ANR	8199108	Symbol	plfont -> font_file_loaded		8198138						
ANR	8199109	Symbol	pl_font_t		8198138						
ANR	8199110	Symbol	& st_gs_font_base		8198138						
ANR	8199111	Symbol	* pfont_src		8198138						
ANR	8199112	Symbol	* src -> character_complement		8198138						
ANR	8199113	Symbol	pl_font_glyph_t		8198138						
ANR	8199114	Symbol	gs_alloc_struct_array		8198138						
ANR	8199115	Symbol	src -> glyphs . table [ i ] . data		8198138						
ANR	8199116	Symbol	plfont -> header_size		8198138						
ANR	8199117	Symbol	NULL		8198138						
ANR	8199118	Symbol	* * plfont		8198138						
ANR	8199119	Symbol	pfont_src		8198138						
ANR	8199120	Symbol	src -> glyphs . used		8198138						
ANR	8199121	Symbol	plfont -> is_xl_format		8198138						
ANR	8199122	Symbol	src -> pfont		8198138						
ANR	8199123	Symbol	plfont -> glyphs . table [ i ] . data_len		8198138						
ANR	8199124	Symbol	downloaded		8198138						
ANR	8199125	Symbol	src -> char_glyphs . table		8198138						
ANR	8199126	Symbol	src -> pfont -> dir		8198138						
ANR	8199127	Symbol	* * src		8198138						
ANR	8199128	Symbol	* plfont -> glyphs . table		8198138						
ANR	8199129	Symbol	plfont -> widths_cache		8198138						
ANR	8199130	Symbol	src -> header_size		8198138						
ANR	8199131	Symbol	gs_alloc_struct		8198138						
ANR	8199132	Symbol	src -> character_complement		8198138						
ANR	8199133	Symbol	cname		8198138						
ANR	8199134	Symbol	plfont -> char_glyphs		8198138						
ANR	8199135	Symbol	* plfont -> character_complement		8198138						
ANR	8199136	Symbol	plfont -> glyphs . table [ i ] . data		8198138						
ANR	8199137	Symbol	mem		8198138						
ANR	8199138	Symbol	& st_pl_font_glyph_element_f		8198138						
ANR	8199139	Symbol	plfont -> allow_vertical_substitutes		8198138						
ANR	8199140	Symbol	src -> char_glyphs . size		8198138						
ANR	8199141	Symbol	src -> glyphs . limit		8198138						
ANR	8199142	Symbol	gs_alloc_bytes		8198138						
ANR	8199143	Symbol	src		8198138						
ANR	8199144	Symbol	pfont		8198138						
ANR	8199145	Symbol	src -> glyphs . skip		8198138						
ANR	8199146	Symbol	plfont -> resolution		8198138						
ANR	8199147	Symbol	plfont -> offsets		8198138						
ANR	8199148	Symbol	char_data		8198138						
ANR	8199149	Symbol	src -> bold_fraction		8198138						
ANR	8199150	Symbol	plfont -> glyphs . skip		8198138						
ANR	8199151	Symbol	* src -> char_glyphs		8198138						
ANR	8199152	Symbol	* src -> glyphs		8198138						
ANR	8199153	Symbol	* i		8198138						
ANR	8199154	Symbol	plfont -> bold_fraction		8198138						
ANR	8199155	Symbol	plfont -> params		8198138						
ANR	8199156	Symbol	* plfont		8198138						
ANR	8199157	Symbol	& st_pl_font		8198138						
ANR	8199158	Symbol	gs_font_type42		8198138						
ANR	8199159	Function	pl_fill_in_font	769:0:21368:23133							
ANR	8199160	FunctionDef	"pl_fill_in_font (gs_font * pfont , pl_font_t * plfont , gs_font_dir * pdir , gs_memory_t * mem , const char * font_name)"		8199159	0					
ANR	8199161	CompoundStatement		772:0:21503:23133	8199159	0					
ANR	8199162	IdentifierDeclStatement	gs_font_base * pbfont = ( gs_font_base * ) pfont ;	773:4:21509:21554	8199159	0	True				
ANR	8199163	IdentifierDecl	* pbfont = ( gs_font_base * ) pfont		8199159	0					
ANR	8199164	IdentifierDeclType	gs_font_base *		8199159	0					
ANR	8199165	Identifier	pbfont		8199159	1					
ANR	8199166	AssignmentExpression	* pbfont = ( gs_font_base * ) pfont		8199159	2		=			
ANR	8199167	Identifier	pbfont		8199159	0					
ANR	8199168	CastExpression	( gs_font_base * ) pfont		8199159	1					
ANR	8199169	CastTarget	gs_font_base *		8199159	0					
ANR	8199170	Identifier	pfont		8199159	1					
ANR	8199171	ExpressionStatement	plfont -> pfont = pfont	775:4:21561:21582	8199159	1	True				
ANR	8199172	AssignmentExpression	plfont -> pfont = pfont		8199159	0		=			
ANR	8199173	PtrMemberAccess	plfont -> pfont		8199159	0					
ANR	8199174	Identifier	plfont		8199159	0					
ANR	8199175	Identifier	pfont		8199159	1					
ANR	8199176	Identifier	pfont		8199159	1					
ANR	8199177	ExpressionStatement	gs_make_identity ( & pbfont -> orig_FontMatrix )	777:4:21628:21670	8199159	2	True				
ANR	8199178	CallExpression	gs_make_identity ( & pbfont -> orig_FontMatrix )		8199159	0					
ANR	8199179	Callee	gs_make_identity		8199159	0					
ANR	8199180	Identifier	gs_make_identity		8199159	0					
ANR	8199181	ArgumentList	& pbfont -> orig_FontMatrix		8199159	1					
ANR	8199182	Argument	& pbfont -> orig_FontMatrix		8199159	0					
ANR	8199183	UnaryOperationExpression	& pbfont -> orig_FontMatrix		8199159	0					
ANR	8199184	UnaryOperator	&		8199159	0					
ANR	8199185	PtrMemberAccess	pbfont -> orig_FontMatrix		8199159	1					
ANR	8199186	Identifier	pbfont		8199159	0					
ANR	8199187	Identifier	orig_FontMatrix		8199159	1					
ANR	8199188	ExpressionStatement	gs_make_identity ( & pbfont -> FontMatrix )	778:4:21676:21713	8199159	3	True				
ANR	8199189	CallExpression	gs_make_identity ( & pbfont -> FontMatrix )		8199159	0					
ANR	8199190	Callee	gs_make_identity		8199159	0					
ANR	8199191	Identifier	gs_make_identity		8199159	0					
ANR	8199192	ArgumentList	& pbfont -> FontMatrix		8199159	1					
ANR	8199193	Argument	& pbfont -> FontMatrix		8199159	0					
ANR	8199194	UnaryOperationExpression	& pbfont -> FontMatrix		8199159	0					
ANR	8199195	UnaryOperator	&		8199159	0					
ANR	8199196	PtrMemberAccess	pbfont -> FontMatrix		8199159	1					
ANR	8199197	Identifier	pbfont		8199159	0					
ANR	8199198	Identifier	FontMatrix		8199159	1					
ANR	8199199	ExpressionStatement	pbfont -> next = pbfont -> prev = 0	779:4:21719:21750	8199159	4	True				
ANR	8199200	AssignmentExpression	pbfont -> next = pbfont -> prev = 0		8199159	0		=			
ANR	8199201	PtrMemberAccess	pbfont -> next		8199159	0					
ANR	8199202	Identifier	pbfont		8199159	0					
ANR	8199203	Identifier	next		8199159	1					
ANR	8199204	AssignmentExpression	pbfont -> prev = 0		8199159	1		=			
ANR	8199205	PtrMemberAccess	pbfont -> prev		8199159	0					
ANR	8199206	Identifier	pbfont		8199159	0					
ANR	8199207	Identifier	prev		8199159	1					
ANR	8199208	PrimaryExpression	0		8199159	1					
ANR	8199209	ExpressionStatement	pbfont -> memory = mem	780:4:21756:21776	8199159	5	True				
ANR	8199210	AssignmentExpression	pbfont -> memory = mem		8199159	0		=			
ANR	8199211	PtrMemberAccess	pbfont -> memory		8199159	0					
ANR	8199212	Identifier	pbfont		8199159	0					
ANR	8199213	Identifier	memory		8199159	1					
ANR	8199214	Identifier	mem		8199159	1					
ANR	8199215	ExpressionStatement	pbfont -> dir = pdir	781:4:21782:21800	8199159	6	True				
ANR	8199216	AssignmentExpression	pbfont -> dir = pdir		8199159	0		=			
ANR	8199217	PtrMemberAccess	pbfont -> dir		8199159	0					
ANR	8199218	Identifier	pbfont		8199159	0					
ANR	8199219	Identifier	dir		8199159	1					
ANR	8199220	Identifier	pdir		8199159	1					
ANR	8199221	ExpressionStatement	pbfont -> is_resource = false	782:4:21806:21833	8199159	7	True				
ANR	8199222	AssignmentExpression	pbfont -> is_resource = false		8199159	0		=			
ANR	8199223	PtrMemberAccess	pbfont -> is_resource		8199159	0					
ANR	8199224	Identifier	pbfont		8199159	0					
ANR	8199225	Identifier	is_resource		8199159	1					
ANR	8199226	Identifier	false		8199159	1					
ANR	8199227	ExpressionStatement	"gs_notify_init ( & pbfont -> notify_list , gs_memory_stable ( mem ) )"	783:4:21839:21898	8199159	8	True				
ANR	8199228	CallExpression	"gs_notify_init ( & pbfont -> notify_list , gs_memory_stable ( mem ) )"		8199159	0					
ANR	8199229	Callee	gs_notify_init		8199159	0					
ANR	8199230	Identifier	gs_notify_init		8199159	0					
ANR	8199231	ArgumentList	& pbfont -> notify_list		8199159	1					
ANR	8199232	Argument	& pbfont -> notify_list		8199159	0					
ANR	8199233	UnaryOperationExpression	& pbfont -> notify_list		8199159	0					
ANR	8199234	UnaryOperator	&		8199159	0					
ANR	8199235	PtrMemberAccess	pbfont -> notify_list		8199159	1					
ANR	8199236	Identifier	pbfont		8199159	0					
ANR	8199237	Identifier	notify_list		8199159	1					
ANR	8199238	Argument	gs_memory_stable ( mem )		8199159	1					
ANR	8199239	CallExpression	gs_memory_stable ( mem )		8199159	0					
ANR	8199240	Callee	gs_memory_stable		8199159	0					
ANR	8199241	Identifier	gs_memory_stable		8199159	0					
ANR	8199242	ArgumentList	mem		8199159	1					
ANR	8199243	Argument	mem		8199159	0					
ANR	8199244	Identifier	mem		8199159	0					
ANR	8199245	ExpressionStatement	pbfont -> base = ( gs_font * ) pbfont	784:4:21904:21937	8199159	9	True				
ANR	8199246	AssignmentExpression	pbfont -> base = ( gs_font * ) pbfont		8199159	0		=			
ANR	8199247	PtrMemberAccess	pbfont -> base		8199159	0					
ANR	8199248	Identifier	pbfont		8199159	0					
ANR	8199249	Identifier	base		8199159	1					
ANR	8199250	CastExpression	( gs_font * ) pbfont		8199159	1					
ANR	8199251	CastTarget	gs_font *		8199159	0					
ANR	8199252	Identifier	pbfont		8199159	1					
ANR	8199253	ExpressionStatement	pbfont -> client_data = plfont	785:4:21943:21971	8199159	10	True				
ANR	8199254	AssignmentExpression	pbfont -> client_data = plfont		8199159	0		=			
ANR	8199255	PtrMemberAccess	pbfont -> client_data		8199159	0					
ANR	8199256	Identifier	pbfont		8199159	0					
ANR	8199257	Identifier	client_data		8199159	1					
ANR	8199258	Identifier	plfont		8199159	1					
ANR	8199259	ExpressionStatement	pbfont -> WMode = 0	786:4:21977:21994	8199159	11	True				
ANR	8199260	AssignmentExpression	pbfont -> WMode = 0		8199159	0		=			
ANR	8199261	PtrMemberAccess	pbfont -> WMode		8199159	0					
ANR	8199262	Identifier	pbfont		8199159	0					
ANR	8199263	Identifier	WMode		8199159	1					
ANR	8199264	PrimaryExpression	0		8199159	1					
ANR	8199265	ExpressionStatement	pbfont -> PaintType = 0	787:4:22000:22021	8199159	12	True				
ANR	8199266	AssignmentExpression	pbfont -> PaintType = 0		8199159	0		=			
ANR	8199267	PtrMemberAccess	pbfont -> PaintType		8199159	0					
ANR	8199268	Identifier	pbfont		8199159	0					
ANR	8199269	Identifier	PaintType		8199159	1					
ANR	8199270	PrimaryExpression	0		8199159	1					
ANR	8199271	ExpressionStatement	pbfont -> StrokeWidth = 0	788:4:22027:22050	8199159	13	True				
ANR	8199272	AssignmentExpression	pbfont -> StrokeWidth = 0		8199159	0		=			
ANR	8199273	PtrMemberAccess	pbfont -> StrokeWidth		8199159	0					
ANR	8199274	Identifier	pbfont		8199159	0					
ANR	8199275	Identifier	StrokeWidth		8199159	1					
ANR	8199276	PrimaryExpression	0		8199159	1					
ANR	8199277	ExpressionStatement	pbfont -> is_cached = 0	789:4:22056:22077	8199159	14	True				
ANR	8199278	AssignmentExpression	pbfont -> is_cached = 0		8199159	0		=			
ANR	8199279	PtrMemberAccess	pbfont -> is_cached		8199159	0					
ANR	8199280	Identifier	pbfont		8199159	0					
ANR	8199281	Identifier	is_cached		8199159	1					
ANR	8199282	PrimaryExpression	0		8199159	1					
ANR	8199283	ExpressionStatement	pbfont -> procs . init_fstack = gs_default_init_fstack	790:4:22083:22133	8199159	15	True				
ANR	8199284	AssignmentExpression	pbfont -> procs . init_fstack = gs_default_init_fstack		8199159	0		=			
ANR	8199285	MemberAccess	pbfont -> procs . init_fstack		8199159	0					
ANR	8199286	PtrMemberAccess	pbfont -> procs		8199159	0					
ANR	8199287	Identifier	pbfont		8199159	0					
ANR	8199288	Identifier	procs		8199159	1					
ANR	8199289	Identifier	init_fstack		8199159	1					
ANR	8199290	Identifier	gs_default_init_fstack		8199159	1					
ANR	8199291	ExpressionStatement	pbfont -> procs . next_char_glyph = gs_default_next_char_glyph	791:4:22139:22197	8199159	16	True				
ANR	8199292	AssignmentExpression	pbfont -> procs . next_char_glyph = gs_default_next_char_glyph		8199159	0		=			
ANR	8199293	MemberAccess	pbfont -> procs . next_char_glyph		8199159	0					
ANR	8199294	PtrMemberAccess	pbfont -> procs		8199159	0					
ANR	8199295	Identifier	pbfont		8199159	0					
ANR	8199296	Identifier	procs		8199159	1					
ANR	8199297	Identifier	next_char_glyph		8199159	1					
ANR	8199298	Identifier	gs_default_next_char_glyph		8199159	1					
ANR	8199299	ExpressionStatement	pbfont -> FAPI = NULL	792:4:22203:22222	8199159	17	True				
ANR	8199300	AssignmentExpression	pbfont -> FAPI = NULL		8199159	0		=			
ANR	8199301	PtrMemberAccess	pbfont -> FAPI		8199159	0					
ANR	8199302	Identifier	pbfont		8199159	0					
ANR	8199303	Identifier	FAPI		8199159	1					
ANR	8199304	Identifier	NULL		8199159	1					
ANR	8199305	ExpressionStatement	pbfont -> FAPI_font_data = NULL	793:4:22228:22257	8199159	18	True				
ANR	8199306	AssignmentExpression	pbfont -> FAPI_font_data = NULL		8199159	0		=			
ANR	8199307	PtrMemberAccess	pbfont -> FAPI_font_data		8199159	0					
ANR	8199308	Identifier	pbfont		8199159	0					
ANR	8199309	Identifier	FAPI_font_data		8199159	1					
ANR	8199310	Identifier	NULL		8199159	1					
ANR	8199311	ExpressionStatement	pbfont -> procs . glyph_name = pl_glyph_name	795:4:22264:22304	8199159	19	True				
ANR	8199312	AssignmentExpression	pbfont -> procs . glyph_name = pl_glyph_name		8199159	0		=			
ANR	8199313	MemberAccess	pbfont -> procs . glyph_name		8199159	0					
ANR	8199314	PtrMemberAccess	pbfont -> procs		8199159	0					
ANR	8199315	Identifier	pbfont		8199159	0					
ANR	8199316	Identifier	procs		8199159	1					
ANR	8199317	Identifier	glyph_name		8199159	1					
ANR	8199318	Identifier	pl_glyph_name		8199159	1					
ANR	8199319	ExpressionStatement	pbfont -> procs . decode_glyph = pl_decode_glyph	796:4:22310:22354	8199159	20	True				
ANR	8199320	AssignmentExpression	pbfont -> procs . decode_glyph = pl_decode_glyph		8199159	0		=			
ANR	8199321	MemberAccess	pbfont -> procs . decode_glyph		8199159	0					
ANR	8199322	PtrMemberAccess	pbfont -> procs		8199159	0					
ANR	8199323	Identifier	pbfont		8199159	0					
ANR	8199324	Identifier	procs		8199159	1					
ANR	8199325	Identifier	decode_glyph		8199159	1					
ANR	8199326	Identifier	pl_decode_glyph		8199159	1					
ANR	8199327	ExpressionStatement	pbfont -> procs . define_font = gs_no_define_font	798:4:22429:22474	8199159	21	True				
ANR	8199328	AssignmentExpression	pbfont -> procs . define_font = gs_no_define_font		8199159	0		=			
ANR	8199329	MemberAccess	pbfont -> procs . define_font		8199159	0					
ANR	8199330	PtrMemberAccess	pbfont -> procs		8199159	0					
ANR	8199331	Identifier	pbfont		8199159	0					
ANR	8199332	Identifier	procs		8199159	1					
ANR	8199333	Identifier	define_font		8199159	1					
ANR	8199334	Identifier	gs_no_define_font		8199159	1					
ANR	8199335	ExpressionStatement	pbfont -> procs . make_font = gs_no_make_font	799:4:22480:22521	8199159	22	True				
ANR	8199336	AssignmentExpression	pbfont -> procs . make_font = gs_no_make_font		8199159	0		=			
ANR	8199337	MemberAccess	pbfont -> procs . make_font		8199159	0					
ANR	8199338	PtrMemberAccess	pbfont -> procs		8199159	0					
ANR	8199339	Identifier	pbfont		8199159	0					
ANR	8199340	Identifier	procs		8199159	1					
ANR	8199341	Identifier	make_font		8199159	1					
ANR	8199342	Identifier	gs_no_make_font		8199159	1					
ANR	8199343	ExpressionStatement	pbfont -> procs . font_info = gs_default_font_info	800:4:22527:22573	8199159	23	True				
ANR	8199344	AssignmentExpression	pbfont -> procs . font_info = gs_default_font_info		8199159	0		=			
ANR	8199345	MemberAccess	pbfont -> procs . font_info		8199159	0					
ANR	8199346	PtrMemberAccess	pbfont -> procs		8199159	0					
ANR	8199347	Identifier	pbfont		8199159	0					
ANR	8199348	Identifier	procs		8199159	1					
ANR	8199349	Identifier	font_info		8199159	1					
ANR	8199350	Identifier	gs_default_font_info		8199159	1					
ANR	8199351	ExpressionStatement	pbfont -> procs . glyph_info = gs_default_glyph_info	801:4:22579:22627	8199159	24	True				
ANR	8199352	AssignmentExpression	pbfont -> procs . glyph_info = gs_default_glyph_info		8199159	0		=			
ANR	8199353	MemberAccess	pbfont -> procs . glyph_info		8199159	0					
ANR	8199354	PtrMemberAccess	pbfont -> procs		8199159	0					
ANR	8199355	Identifier	pbfont		8199159	0					
ANR	8199356	Identifier	procs		8199159	1					
ANR	8199357	Identifier	glyph_info		8199159	1					
ANR	8199358	Identifier	gs_default_glyph_info		8199159	1					
ANR	8199359	ExpressionStatement	pbfont -> procs . glyph_outline = gs_no_glyph_outline	802:4:22633:22682	8199159	25	True				
ANR	8199360	AssignmentExpression	pbfont -> procs . glyph_outline = gs_no_glyph_outline		8199159	0		=			
ANR	8199361	MemberAccess	pbfont -> procs . glyph_outline		8199159	0					
ANR	8199362	PtrMemberAccess	pbfont -> procs		8199159	0					
ANR	8199363	Identifier	pbfont		8199159	0					
ANR	8199364	Identifier	procs		8199159	1					
ANR	8199365	Identifier	glyph_outline		8199159	1					
ANR	8199366	Identifier	gs_no_glyph_outline		8199159	1					
ANR	8199367	ExpressionStatement	"pbfont -> id = gs_next_ids ( mem , 1 )"	803:4:22688:22720	8199159	26	True				
ANR	8199368	AssignmentExpression	"pbfont -> id = gs_next_ids ( mem , 1 )"		8199159	0		=			
ANR	8199369	PtrMemberAccess	pbfont -> id		8199159	0					
ANR	8199370	Identifier	pbfont		8199159	0					
ANR	8199371	Identifier	id		8199159	1					
ANR	8199372	CallExpression	"gs_next_ids ( mem , 1 )"		8199159	1					
ANR	8199373	Callee	gs_next_ids		8199159	0					
ANR	8199374	Identifier	gs_next_ids		8199159	0					
ANR	8199375	ArgumentList	mem		8199159	1					
ANR	8199376	Argument	mem		8199159	0					
ANR	8199377	Identifier	mem		8199159	0					
ANR	8199378	Argument	1		8199159	1					
ANR	8199379	PrimaryExpression	1		8199159	0					
ANR	8199380	CompoundStatement		36:8:1319:1356	8199159	27					
ANR	8199381	IdentifierDeclStatement	size_t sz = strlen ( font_name ) ;	805:8:22736:22765	8199159	0	True				
ANR	8199382	IdentifierDecl	sz = strlen ( font_name )		8199159	0					
ANR	8199383	IdentifierDeclType	size_t		8199159	0					
ANR	8199384	Identifier	sz		8199159	1					
ANR	8199385	AssignmentExpression	sz = strlen ( font_name )		8199159	2		=			
ANR	8199386	Identifier	sz		8199159	0					
ANR	8199387	CallExpression	strlen ( font_name )		8199159	1					
ANR	8199388	Callee	strlen		8199159	0					
ANR	8199389	Identifier	strlen		8199159	0					
ANR	8199390	ArgumentList	font_name		8199159	1					
ANR	8199391	Argument	font_name		8199159	0					
ANR	8199392	Identifier	font_name		8199159	0					
ANR	8199393	IdentifierDeclStatement	gs_font_name * fnm = & pbfont -> font_name ;	806:8:22775:22813	8199159	1	True				
ANR	8199394	IdentifierDecl	* fnm = & pbfont -> font_name		8199159	0					
ANR	8199395	IdentifierDeclType	gs_font_name *		8199159	0					
ANR	8199396	Identifier	fnm		8199159	1					
ANR	8199397	AssignmentExpression	* fnm = & pbfont -> font_name		8199159	2		=			
ANR	8199398	Identifier	fnm		8199159	0					
ANR	8199399	UnaryOperationExpression	& pbfont -> font_name		8199159	1					
ANR	8199400	UnaryOperator	&		8199159	0					
ANR	8199401	PtrMemberAccess	pbfont -> font_name		8199159	1					
ANR	8199402	Identifier	pbfont		8199159	0					
ANR	8199403	Identifier	font_name		8199159	1					
ANR	8199404	IdentifierDeclStatement	gs_font_name * knm = & pbfont -> key_name ;	807:8:22823:22860	8199159	2	True				
ANR	8199405	IdentifierDecl	* knm = & pbfont -> key_name		8199159	0					
ANR	8199406	IdentifierDeclType	gs_font_name *		8199159	0					
ANR	8199407	Identifier	knm		8199159	1					
ANR	8199408	AssignmentExpression	* knm = & pbfont -> key_name		8199159	2		=			
ANR	8199409	Identifier	knm		8199159	0					
ANR	8199410	UnaryOperationExpression	& pbfont -> key_name		8199159	1					
ANR	8199411	UnaryOperator	&		8199159	0					
ANR	8199412	PtrMemberAccess	pbfont -> key_name		8199159	1					
ANR	8199413	Identifier	pbfont		8199159	0					
ANR	8199414	Identifier	key_name		8199159	1					
ANR	8199415	IfStatement	if ( sz > gs_font_name_max )		8199159	3					
ANR	8199416	Condition	sz > gs_font_name_max	809:12:22875:22895	8199159	0	True				
ANR	8199417	RelationalExpression	sz > gs_font_name_max		8199159	0		>			
ANR	8199418	Identifier	sz		8199159	0					
ANR	8199419	Identifier	gs_font_name_max		8199159	1					
ANR	8199420	ExpressionStatement	sz = gs_font_name_max	810:12:22910:22931	8199159	1	True				
ANR	8199421	AssignmentExpression	sz = gs_font_name_max		8199159	0		=			
ANR	8199422	Identifier	sz		8199159	0					
ANR	8199423	Identifier	gs_font_name_max		8199159	1					
ANR	8199424	ExpressionStatement	fnm -> size = knm -> size = sz	811:8:22941:22967	8199159	4	True				
ANR	8199425	AssignmentExpression	fnm -> size = knm -> size = sz		8199159	0		=			
ANR	8199426	PtrMemberAccess	fnm -> size		8199159	0					
ANR	8199427	Identifier	fnm		8199159	0					
ANR	8199428	Identifier	size		8199159	1					
ANR	8199429	AssignmentExpression	knm -> size = sz		8199159	1		=			
ANR	8199430	PtrMemberAccess	knm -> size		8199159	0					
ANR	8199431	Identifier	knm		8199159	0					
ANR	8199432	Identifier	size		8199159	1					
ANR	8199433	Identifier	sz		8199159	1					
ANR	8199434	ExpressionStatement	"memcpy ( fnm -> chars , font_name , sz )"	813:8:22978:23011	8199159	5	True				
ANR	8199435	CallExpression	"memcpy ( fnm -> chars , font_name , sz )"		8199159	0					
ANR	8199436	Callee	memcpy		8199159	0					
ANR	8199437	Identifier	memcpy		8199159	0					
ANR	8199438	ArgumentList	fnm -> chars		8199159	1					
ANR	8199439	Argument	fnm -> chars		8199159	0					
ANR	8199440	PtrMemberAccess	fnm -> chars		8199159	0					
ANR	8199441	Identifier	fnm		8199159	0					
ANR	8199442	Identifier	chars		8199159	1					
ANR	8199443	Argument	font_name		8199159	1					
ANR	8199444	Identifier	font_name		8199159	0					
ANR	8199445	Argument	sz		8199159	2					
ANR	8199446	Identifier	sz		8199159	0					
ANR	8199447	ExpressionStatement	fnm -> chars [ sz ] = 0	814:8:23021:23039	8199159	6	True				
ANR	8199448	AssignmentExpression	fnm -> chars [ sz ] = 0		8199159	0		=			
ANR	8199449	ArrayIndexing	fnm -> chars [ sz ]		8199159	0					
ANR	8199450	PtrMemberAccess	fnm -> chars		8199159	0					
ANR	8199451	Identifier	fnm		8199159	0					
ANR	8199452	Identifier	chars		8199159	1					
ANR	8199453	Identifier	sz		8199159	1					
ANR	8199454	PrimaryExpression	0		8199159	1					
ANR	8199455	ExpressionStatement	"memcpy ( knm -> chars , font_name , sz )"	816:8:23050:23083	8199159	7	True				
ANR	8199456	CallExpression	"memcpy ( knm -> chars , font_name , sz )"		8199159	0					
ANR	8199457	Callee	memcpy		8199159	0					
ANR	8199458	Identifier	memcpy		8199159	0					
ANR	8199459	ArgumentList	knm -> chars		8199159	1					
ANR	8199460	Argument	knm -> chars		8199159	0					
ANR	8199461	PtrMemberAccess	knm -> chars		8199159	0					
ANR	8199462	Identifier	knm		8199159	0					
ANR	8199463	Identifier	chars		8199159	1					
ANR	8199464	Argument	font_name		8199159	1					
ANR	8199465	Identifier	font_name		8199159	0					
ANR	8199466	Argument	sz		8199159	2					
ANR	8199467	Identifier	sz		8199159	0					
ANR	8199468	ExpressionStatement	knm -> chars [ sz ] = 0	817:8:23093:23111	8199159	8	True				
ANR	8199469	AssignmentExpression	knm -> chars [ sz ] = 0		8199159	0		=			
ANR	8199470	ArrayIndexing	knm -> chars [ sz ]		8199159	0					
ANR	8199471	PtrMemberAccess	knm -> chars		8199159	0					
ANR	8199472	Identifier	knm		8199159	0					
ANR	8199473	Identifier	chars		8199159	1					
ANR	8199474	Identifier	sz		8199159	1					
ANR	8199475	PrimaryExpression	0		8199159	1					
ANR	8199476	ReturnStatement	return 0 ;	819:4:23123:23131	8199159	28	True				
ANR	8199477	PrimaryExpression	0		8199159	0					
ANR	8199478	ReturnType	int		8199159	1					
ANR	8199479	Identifier	pl_fill_in_font		8199159	2					
ANR	8199480	ParameterList	"gs_font * pfont , pl_font_t * plfont , gs_font_dir * pdir , gs_memory_t * mem , const char * font_name"		8199159	3					
ANR	8199481	Parameter	gs_font * pfont	770:16:21388:21402	8199159	0	True				
ANR	8199482	ParameterType	gs_font *		8199159	0					
ANR	8199483	Identifier	pfont		8199159	1					
ANR	8199484	Parameter	pl_font_t * plfont	770:33:21405:21422	8199159	1	True				
ANR	8199485	ParameterType	pl_font_t *		8199159	0					
ANR	8199486	Identifier	plfont		8199159	1					
ANR	8199487	Parameter	gs_font_dir * pdir	770:53:21425:21442	8199159	2	True				
ANR	8199488	ParameterType	gs_font_dir *		8199159	0					
ANR	8199489	Identifier	pdir		8199159	1					
ANR	8199490	Parameter	gs_memory_t * mem	771:16:21461:21477	8199159	3	True				
ANR	8199491	ParameterType	gs_memory_t *		8199159	0					
ANR	8199492	Identifier	mem		8199159	1					
ANR	8199493	Parameter	const char * font_name	771:35:21480:21500	8199159	4	True				
ANR	8199494	ParameterType	const char *		8199159	0					
ANR	8199495	Identifier	font_name		8199159	1					
ANR	8199496	CFGEntryNode	ENTRY		8199159		True				
ANR	8199497	CFGExitNode	EXIT		8199159		True				
ANR	8199498	Symbol	gs_default_font_info		8199159						
ANR	8199499	Symbol	pbfont -> procs . define_font		8199159						
ANR	8199500	Symbol	plfont		8199159						
ANR	8199501	Symbol	pbfont -> memory		8199159						
ANR	8199502	Symbol	gs_next_ids		8199159						
ANR	8199503	Symbol	* sz		8199159						
ANR	8199504	Symbol	& pbfont -> notify_list		8199159						
ANR	8199505	Symbol	pbfont -> base		8199159						
ANR	8199506	Symbol	strlen		8199159						
ANR	8199507	Symbol	* knm		8199159						
ANR	8199508	Symbol	pbfont -> StrokeWidth		8199159						
ANR	8199509	Symbol	* pbfont		8199159						
ANR	8199510	Symbol	pbfont -> dir		8199159						
ANR	8199511	Symbol	pbfont -> is_resource		8199159						
ANR	8199512	Symbol	pbfont -> procs . make_font		8199159						
ANR	8199513	Symbol	pbfont -> procs		8199159						
ANR	8199514	Symbol	fnm -> size		8199159						
ANR	8199515	Symbol	NULL		8199159						
ANR	8199516	Symbol	fnm		8199159						
ANR	8199517	Symbol	pbfont -> FAPI		8199159						
ANR	8199518	Symbol	pbfont -> procs . decode_glyph		8199159						
ANR	8199519	Symbol	pdir		8199159						
ANR	8199520	Symbol	gs_no_glyph_outline		8199159						
ANR	8199521	Symbol	pbfont -> procs . next_char_glyph		8199159						
ANR	8199522	Symbol	pbfont -> next		8199159						
ANR	8199523	Symbol	pbfont -> id		8199159						
ANR	8199524	Symbol	& pbfont -> font_name		8199159						
ANR	8199525	Symbol	fnm -> chars		8199159						
ANR	8199526	Symbol	* * knm		8199159						
ANR	8199527	Symbol	pbfont -> procs . glyph_outline		8199159						
ANR	8199528	Symbol	pbfont -> is_cached		8199159						
ANR	8199529	Symbol	* fnm -> chars		8199159						
ANR	8199530	Symbol	pbfont -> procs . init_fstack		8199159						
ANR	8199531	Symbol	gs_default_next_char_glyph		8199159						
ANR	8199532	Symbol	gs_no_make_font		8199159						
ANR	8199533	Symbol	knm -> chars		8199159						
ANR	8199534	Symbol	pbfont -> FAPI_font_data		8199159						
ANR	8199535	Symbol	font_name		8199159						
ANR	8199536	Symbol	pbfont -> PaintType		8199159						
ANR	8199537	Symbol	pbfont -> procs . glyph_name		8199159						
ANR	8199538	Symbol	mem		8199159						
ANR	8199539	Symbol	pl_decode_glyph		8199159						
ANR	8199540	Symbol	gs_default_glyph_info		8199159						
ANR	8199541	Symbol	& pbfont -> key_name		8199159						
ANR	8199542	Symbol	pfont		8199159						
ANR	8199543	Symbol	gs_default_init_fstack		8199159						
ANR	8199544	Symbol	sz		8199159						
ANR	8199545	Symbol	false		8199159						
ANR	8199546	Symbol	pbfont -> procs . glyph_info		8199159						
ANR	8199547	Symbol	* knm -> chars		8199159						
ANR	8199548	Symbol	gs_memory_stable		8199159						
ANR	8199549	Symbol	& pbfont -> orig_FontMatrix		8199159						
ANR	8199550	Symbol	knm		8199159						
ANR	8199551	Symbol	* fnm		8199159						
ANR	8199552	Symbol	pbfont -> WMode		8199159						
ANR	8199553	Symbol	knm -> size		8199159						
ANR	8199554	Symbol	pbfont		8199159						
ANR	8199555	Symbol	plfont -> pfont		8199159						
ANR	8199556	Symbol	pbfont -> prev		8199159						
ANR	8199557	Symbol	* plfont		8199159						
ANR	8199558	Symbol	gs_font_name_max		8199159						
ANR	8199559	Symbol	* * fnm		8199159						
ANR	8199560	Symbol	pbfont -> procs . font_info		8199159						
ANR	8199561	Symbol	pl_glyph_name		8199159						
ANR	8199562	Symbol	gs_no_define_font		8199159						
ANR	8199563	Symbol	& pbfont -> FontMatrix		8199159						
ANR	8199564	Symbol	pbfont -> client_data		8199159						
ANR	8199565	Function	pl_fill_in_bitmap_font	823:0:23175:23826							
ANR	8199566	FunctionDef	"pl_fill_in_bitmap_font (gs_font_base * pfont , long unique_id)"		8199565	0					
ANR	8199567	CompoundStatement		825:0:23241:23826	8199565	0					
ANR	8199568	ExpressionStatement	pfont -> FontType = ft_PCL_user_defined	826:4:23247:23284	8199565	0	True				
ANR	8199569	AssignmentExpression	pfont -> FontType = ft_PCL_user_defined		8199565	0		=			
ANR	8199570	PtrMemberAccess	pfont -> FontType		8199565	0					
ANR	8199571	Identifier	pfont		8199565	0					
ANR	8199572	Identifier	FontType		8199565	1					
ANR	8199573	Identifier	ft_PCL_user_defined		8199565	1					
ANR	8199574	ExpressionStatement	pfont -> BitmapWidths = true	827:4:23290:23316	8199565	1	True				
ANR	8199575	AssignmentExpression	pfont -> BitmapWidths = true		8199565	0		=			
ANR	8199576	PtrMemberAccess	pfont -> BitmapWidths		8199565	0					
ANR	8199577	Identifier	pfont		8199565	0					
ANR	8199578	Identifier	BitmapWidths		8199565	1					
ANR	8199579	Identifier	true		8199565	1					
ANR	8199580	ExpressionStatement	pfont -> ExactSize = fbit_use_bitmaps	828:4:23322:23357	8199565	2	True				
ANR	8199581	AssignmentExpression	pfont -> ExactSize = fbit_use_bitmaps		8199565	0		=			
ANR	8199582	PtrMemberAccess	pfont -> ExactSize		8199565	0					
ANR	8199583	Identifier	pfont		8199565	0					
ANR	8199584	Identifier	ExactSize		8199565	1					
ANR	8199585	Identifier	fbit_use_bitmaps		8199565	1					
ANR	8199586	ExpressionStatement	pfont -> InBetweenSize = fbit_use_bitmaps	829:4:23363:23402	8199565	3	True				
ANR	8199587	AssignmentExpression	pfont -> InBetweenSize = fbit_use_bitmaps		8199565	0		=			
ANR	8199588	PtrMemberAccess	pfont -> InBetweenSize		8199565	0					
ANR	8199589	Identifier	pfont		8199565	0					
ANR	8199590	Identifier	InBetweenSize		8199565	1					
ANR	8199591	Identifier	fbit_use_bitmaps		8199565	1					
ANR	8199592	ExpressionStatement	pfont -> TransformedChar = fbit_transform_bitmaps	830:4:23408:23455	8199565	4	True				
ANR	8199593	AssignmentExpression	pfont -> TransformedChar = fbit_transform_bitmaps		8199565	0		=			
ANR	8199594	PtrMemberAccess	pfont -> TransformedChar		8199565	0					
ANR	8199595	Identifier	pfont		8199565	0					
ANR	8199596	Identifier	TransformedChar		8199565	1					
ANR	8199597	Identifier	fbit_transform_bitmaps		8199565	1					
ANR	8199598	ExpressionStatement	pl_bitmap_init_procs ( pfont )	831:4:23461:23488	8199565	5	True				
ANR	8199599	CallExpression	pl_bitmap_init_procs ( pfont )		8199565	0					
ANR	8199600	Callee	pl_bitmap_init_procs		8199565	0					
ANR	8199601	Identifier	pl_bitmap_init_procs		8199565	0					
ANR	8199602	ArgumentList	pfont		8199565	1					
ANR	8199603	Argument	pfont		8199565	0					
ANR	8199604	Identifier	pfont		8199565	0					
ANR	8199605	ExpressionStatement	pfont -> FontBBox . p . x = pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0	833:4:23549:23646	8199565	6	True				
ANR	8199606	AssignmentExpression	pfont -> FontBBox . p . x = pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		8199565	0		=			
ANR	8199607	MemberAccess	pfont -> FontBBox . p . x		8199565	0					
ANR	8199608	MemberAccess	pfont -> FontBBox . p		8199565	0					
ANR	8199609	PtrMemberAccess	pfont -> FontBBox		8199565	0					
ANR	8199610	Identifier	pfont		8199565	0					
ANR	8199611	Identifier	FontBBox		8199565	1					
ANR	8199612	Identifier	p		8199565	1					
ANR	8199613	Identifier	x		8199565	1					
ANR	8199614	AssignmentExpression	pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		8199565	1		=			
ANR	8199615	MemberAccess	pfont -> FontBBox . p . y		8199565	0					
ANR	8199616	MemberAccess	pfont -> FontBBox . p		8199565	0					
ANR	8199617	PtrMemberAccess	pfont -> FontBBox		8199565	0					
ANR	8199618	Identifier	pfont		8199565	0					
ANR	8199619	Identifier	FontBBox		8199565	1					
ANR	8199620	Identifier	p		8199565	1					
ANR	8199621	Identifier	y		8199565	1					
ANR	8199622	AssignmentExpression	pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		8199565	1		=			
ANR	8199623	MemberAccess	pfont -> FontBBox . q . x		8199565	0					
ANR	8199624	MemberAccess	pfont -> FontBBox . q		8199565	0					
ANR	8199625	PtrMemberAccess	pfont -> FontBBox		8199565	0					
ANR	8199626	Identifier	pfont		8199565	0					
ANR	8199627	Identifier	FontBBox		8199565	1					
ANR	8199628	Identifier	q		8199565	1					
ANR	8199629	Identifier	x		8199565	1					
ANR	8199630	AssignmentExpression	pfont -> FontBBox . q . y = 0		8199565	1		=			
ANR	8199631	MemberAccess	pfont -> FontBBox . q . y		8199565	0					
ANR	8199632	MemberAccess	pfont -> FontBBox . q		8199565	0					
ANR	8199633	PtrMemberAccess	pfont -> FontBBox		8199565	0					
ANR	8199634	Identifier	pfont		8199565	0					
ANR	8199635	Identifier	FontBBox		8199565	1					
ANR	8199636	Identifier	q		8199565	1					
ANR	8199637	Identifier	y		8199565	1					
ANR	8199638	PrimaryExpression	0		8199565	1					
ANR	8199639	ExpressionStatement	"uid_set_UniqueID ( & pfont -> UID , unique_id )"	835:4:23652:23692	8199565	7	True				
ANR	8199640	CallExpression	"uid_set_UniqueID ( & pfont -> UID , unique_id )"		8199565	0					
ANR	8199641	Callee	uid_set_UniqueID		8199565	0					
ANR	8199642	Identifier	uid_set_UniqueID		8199565	0					
ANR	8199643	ArgumentList	& pfont -> UID		8199565	1					
ANR	8199644	Argument	& pfont -> UID		8199565	0					
ANR	8199645	UnaryOperationExpression	& pfont -> UID		8199565	0					
ANR	8199646	UnaryOperator	&		8199565	0					
ANR	8199647	PtrMemberAccess	pfont -> UID		8199565	1					
ANR	8199648	Identifier	pfont		8199565	0					
ANR	8199649	Identifier	UID		8199565	1					
ANR	8199650	Argument	unique_id		8199565	1					
ANR	8199651	Identifier	unique_id		8199565	0					
ANR	8199652	ExpressionStatement	pfont -> encoding_index = 1	836:4:23698:23723	8199565	8	True				
ANR	8199653	AssignmentExpression	pfont -> encoding_index = 1		8199565	0		=			
ANR	8199654	PtrMemberAccess	pfont -> encoding_index		8199565	0					
ANR	8199655	Identifier	pfont		8199565	0					
ANR	8199656	Identifier	encoding_index		8199565	1					
ANR	8199657	PrimaryExpression	1		8199565	1					
ANR	8199658	ExpressionStatement	pfont -> nearest_encoding_index = 1	837:4:23760:23793	8199565	9	True				
ANR	8199659	AssignmentExpression	pfont -> nearest_encoding_index = 1		8199565	0		=			
ANR	8199660	PtrMemberAccess	pfont -> nearest_encoding_index		8199565	0					
ANR	8199661	Identifier	pfont		8199565	0					
ANR	8199662	Identifier	nearest_encoding_index		8199565	1					
ANR	8199663	PrimaryExpression	1		8199565	1					
ANR	8199664	ReturnType	void		8199565	1					
ANR	8199665	Identifier	pl_fill_in_bitmap_font		8199565	2					
ANR	8199666	ParameterList	"gs_font_base * pfont , long unique_id"		8199565	3					
ANR	8199667	Parameter	gs_font_base * pfont	824:23:23203:23222	8199565	0	True				
ANR	8199668	ParameterType	gs_font_base *		8199565	0					
ANR	8199669	Identifier	pfont		8199565	1					
ANR	8199670	Parameter	long unique_id	824:45:23225:23238	8199565	1	True				
ANR	8199671	ParameterType	long		8199565	0					
ANR	8199672	Identifier	unique_id		8199565	1					
ANR	8199673	CFGEntryNode	ENTRY		8199565		True				
ANR	8199674	CFGExitNode	EXIT		8199565		True				
ANR	8199675	Symbol	pfont -> FontBBox . q . y		8199565						
ANR	8199676	Symbol	unique_id		8199565						
ANR	8199677	Symbol	pfont		8199565						
ANR	8199678	Symbol	pfont -> FontBBox . q . x		8199565						
ANR	8199679	Symbol	ft_PCL_user_defined		8199565						
ANR	8199680	Symbol	& pfont -> UID		8199565						
ANR	8199681	Symbol	fbit_use_bitmaps		8199565						
ANR	8199682	Symbol	pfont -> nearest_encoding_index		8199565						
ANR	8199683	Symbol	pfont -> TransformedChar		8199565						
ANR	8199684	Symbol	* pfont		8199565						
ANR	8199685	Symbol	pfont -> FontType		8199565						
ANR	8199686	Symbol	pfont -> FontBBox . p . x		8199565						
ANR	8199687	Symbol	pfont -> FontBBox . p . y		8199565						
ANR	8199688	Symbol	pfont -> InBetweenSize		8199565						
ANR	8199689	Symbol	true		8199565						
ANR	8199690	Symbol	pfont -> BitmapWidths		8199565						
ANR	8199691	Symbol	pfont -> FontBBox . p		8199565						
ANR	8199692	Symbol	pfont -> ExactSize		8199565						
ANR	8199693	Symbol	pfont -> FontBBox . q		8199565						
ANR	8199694	Symbol	fbit_transform_bitmaps		8199565						
ANR	8199695	Symbol	pfont -> FontBBox		8199565						
ANR	8199696	Symbol	pfont -> encoding_index		8199565						
ANR	8199697	Function	pl_fill_in_tt_font	841:0:23870:25020							
ANR	8199698	FunctionDef	"pl_fill_in_tt_font (gs_font_type42 * pfont , void * data , long unique_id)"		8199697	0					
ANR	8199699	CompoundStatement		843:0:23945:25020	8199697	0					
ANR	8199700	ExpressionStatement	pfont -> FontType = ft_TrueType	844:4:23951:23980	8199697	0	True				
ANR	8199701	AssignmentExpression	pfont -> FontType = ft_TrueType		8199697	0		=			
ANR	8199702	PtrMemberAccess	pfont -> FontType		8199697	0					
ANR	8199703	Identifier	pfont		8199697	0					
ANR	8199704	Identifier	FontType		8199697	1					
ANR	8199705	Identifier	ft_TrueType		8199697	1					
ANR	8199706	ExpressionStatement	pfont -> BitmapWidths = true	845:4:23986:24012	8199697	1	True				
ANR	8199707	AssignmentExpression	pfont -> BitmapWidths = true		8199697	0		=			
ANR	8199708	PtrMemberAccess	pfont -> BitmapWidths		8199697	0					
ANR	8199709	Identifier	pfont		8199697	0					
ANR	8199710	Identifier	BitmapWidths		8199697	1					
ANR	8199711	Identifier	true		8199697	1					
ANR	8199712	ExpressionStatement	pfont -> ExactSize = fbit_use_outlines	846:4:24018:24054	8199697	2	True				
ANR	8199713	AssignmentExpression	pfont -> ExactSize = fbit_use_outlines		8199697	0		=			
ANR	8199714	PtrMemberAccess	pfont -> ExactSize		8199697	0					
ANR	8199715	Identifier	pfont		8199697	0					
ANR	8199716	Identifier	ExactSize		8199697	1					
ANR	8199717	Identifier	fbit_use_outlines		8199697	1					
ANR	8199718	ExpressionStatement	pfont -> InBetweenSize = fbit_use_outlines	847:4:24060:24100	8199697	3	True				
ANR	8199719	AssignmentExpression	pfont -> InBetweenSize = fbit_use_outlines		8199697	0		=			
ANR	8199720	PtrMemberAccess	pfont -> InBetweenSize		8199697	0					
ANR	8199721	Identifier	pfont		8199697	0					
ANR	8199722	Identifier	InBetweenSize		8199697	1					
ANR	8199723	Identifier	fbit_use_outlines		8199697	1					
ANR	8199724	ExpressionStatement	pfont -> TransformedChar = fbit_use_outlines	848:4:24106:24148	8199697	4	True				
ANR	8199725	AssignmentExpression	pfont -> TransformedChar = fbit_use_outlines		8199697	0		=			
ANR	8199726	PtrMemberAccess	pfont -> TransformedChar		8199697	0					
ANR	8199727	Identifier	pfont		8199697	0					
ANR	8199728	Identifier	TransformedChar		8199697	1					
ANR	8199729	Identifier	fbit_use_outlines		8199697	1					
ANR	8199730	ExpressionStatement	pfont -> FontBBox . p . x = pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0	855:4:24393:24490	8199697	5	True				
ANR	8199731	AssignmentExpression	pfont -> FontBBox . p . x = pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		8199697	0		=			
ANR	8199732	MemberAccess	pfont -> FontBBox . p . x		8199697	0					
ANR	8199733	MemberAccess	pfont -> FontBBox . p		8199697	0					
ANR	8199734	PtrMemberAccess	pfont -> FontBBox		8199697	0					
ANR	8199735	Identifier	pfont		8199697	0					
ANR	8199736	Identifier	FontBBox		8199697	1					
ANR	8199737	Identifier	p		8199697	1					
ANR	8199738	Identifier	x		8199697	1					
ANR	8199739	AssignmentExpression	pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		8199697	1		=			
ANR	8199740	MemberAccess	pfont -> FontBBox . p . y		8199697	0					
ANR	8199741	MemberAccess	pfont -> FontBBox . p		8199697	0					
ANR	8199742	PtrMemberAccess	pfont -> FontBBox		8199697	0					
ANR	8199743	Identifier	pfont		8199697	0					
ANR	8199744	Identifier	FontBBox		8199697	1					
ANR	8199745	Identifier	p		8199697	1					
ANR	8199746	Identifier	y		8199697	1					
ANR	8199747	AssignmentExpression	pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		8199697	1		=			
ANR	8199748	MemberAccess	pfont -> FontBBox . q . x		8199697	0					
ANR	8199749	MemberAccess	pfont -> FontBBox . q		8199697	0					
ANR	8199750	PtrMemberAccess	pfont -> FontBBox		8199697	0					
ANR	8199751	Identifier	pfont		8199697	0					
ANR	8199752	Identifier	FontBBox		8199697	1					
ANR	8199753	Identifier	q		8199697	1					
ANR	8199754	Identifier	x		8199697	1					
ANR	8199755	AssignmentExpression	pfont -> FontBBox . q . y = 0		8199697	1		=			
ANR	8199756	MemberAccess	pfont -> FontBBox . q . y		8199697	0					
ANR	8199757	MemberAccess	pfont -> FontBBox . q		8199697	0					
ANR	8199758	PtrMemberAccess	pfont -> FontBBox		8199697	0					
ANR	8199759	Identifier	pfont		8199697	0					
ANR	8199760	Identifier	FontBBox		8199697	1					
ANR	8199761	Identifier	q		8199697	1					
ANR	8199762	Identifier	y		8199697	1					
ANR	8199763	PrimaryExpression	0		8199697	1					
ANR	8199764	ExpressionStatement	"uid_set_UniqueID ( & pfont -> UID , unique_id )"	857:4:24496:24536	8199697	6	True				
ANR	8199765	CallExpression	"uid_set_UniqueID ( & pfont -> UID , unique_id )"		8199697	0					
ANR	8199766	Callee	uid_set_UniqueID		8199697	0					
ANR	8199767	Identifier	uid_set_UniqueID		8199697	0					
ANR	8199768	ArgumentList	& pfont -> UID		8199697	1					
ANR	8199769	Argument	& pfont -> UID		8199697	0					
ANR	8199770	UnaryOperationExpression	& pfont -> UID		8199697	0					
ANR	8199771	UnaryOperator	&		8199697	0					
ANR	8199772	PtrMemberAccess	pfont -> UID		8199697	1					
ANR	8199773	Identifier	pfont		8199697	0					
ANR	8199774	Identifier	UID		8199697	1					
ANR	8199775	Argument	unique_id		8199697	1					
ANR	8199776	Identifier	unique_id		8199697	0					
ANR	8199777	ExpressionStatement	pfont -> encoding_index = 1	858:4:24542:24567	8199697	7	True				
ANR	8199778	AssignmentExpression	pfont -> encoding_index = 1		8199697	0		=			
ANR	8199779	PtrMemberAccess	pfont -> encoding_index		8199697	0					
ANR	8199780	Identifier	pfont		8199697	0					
ANR	8199781	Identifier	encoding_index		8199697	1					
ANR	8199782	PrimaryExpression	1		8199697	1					
ANR	8199783	ExpressionStatement	pfont -> nearest_encoding_index = 1	859:4:24604:24637	8199697	8	True				
ANR	8199784	AssignmentExpression	pfont -> nearest_encoding_index = 1		8199697	0		=			
ANR	8199785	PtrMemberAccess	pfont -> nearest_encoding_index		8199697	0					
ANR	8199786	Identifier	pfont		8199697	0					
ANR	8199787	Identifier	nearest_encoding_index		8199697	1					
ANR	8199788	PrimaryExpression	1		8199697	1					
ANR	8199789	ExpressionStatement	pfont -> data . proc_data = data	861:4:24718:24746	8199697	9	True				
ANR	8199790	AssignmentExpression	pfont -> data . proc_data = data		8199697	0		=			
ANR	8199791	MemberAccess	pfont -> data . proc_data		8199697	0					
ANR	8199792	PtrMemberAccess	pfont -> data		8199697	0					
ANR	8199793	Identifier	pfont		8199697	0					
ANR	8199794	Identifier	data		8199697	1					
ANR	8199795	Identifier	proc_data		8199697	1					
ANR	8199796	Identifier	data		8199697	1					
ANR	8199797	ExpressionStatement	pl_tt_init_procs ( pfont )	862:4:24752:24775	8199697	10	True				
ANR	8199798	CallExpression	pl_tt_init_procs ( pfont )		8199697	0					
ANR	8199799	Callee	pl_tt_init_procs		8199697	0					
ANR	8199800	Identifier	pl_tt_init_procs		8199697	0					
ANR	8199801	ArgumentList	pfont		8199697	1					
ANR	8199802	Argument	pfont		8199697	0					
ANR	8199803	Identifier	pfont		8199697	0					
ANR	8199804	CompoundStatement		22:8:845:885	8199697	11					
ANR	8199805	IdentifierDeclStatement	"int code = gs_type42_font_init ( pfont , 0 ) ;"	864:8:24791:24831	8199697	0	True				
ANR	8199806	IdentifierDecl	"code = gs_type42_font_init ( pfont , 0 )"		8199697	0					
ANR	8199807	IdentifierDeclType	int		8199697	0					
ANR	8199808	Identifier	code		8199697	1					
ANR	8199809	AssignmentExpression	"code = gs_type42_font_init ( pfont , 0 )"		8199697	2		=			
ANR	8199810	Identifier	code		8199697	0					
ANR	8199811	CallExpression	"gs_type42_font_init ( pfont , 0 )"		8199697	1					
ANR	8199812	Callee	gs_type42_font_init		8199697	0					
ANR	8199813	Identifier	gs_type42_font_init		8199697	0					
ANR	8199814	ArgumentList	pfont		8199697	1					
ANR	8199815	Argument	pfont		8199697	0					
ANR	8199816	Identifier	pfont		8199697	0					
ANR	8199817	Argument	0		8199697	1					
ANR	8199818	PrimaryExpression	0		8199697	0					
ANR	8199819	IfStatement	if ( code < 0 )		8199697	1					
ANR	8199820	Condition	code < 0	866:12:24846:24853	8199697	0	True				
ANR	8199821	RelationalExpression	code < 0		8199697	0		<			
ANR	8199822	Identifier	code		8199697	0					
ANR	8199823	PrimaryExpression	0		8199697	1					
ANR	8199824	ReturnStatement	return code ;	867:12:24868:24879	8199697	1	True				
ANR	8199825	Identifier	code		8199697	0					
ANR	8199826	ExpressionStatement	pfont -> FAPI = 0	870:4:24921:24936	8199697	12	True				
ANR	8199827	AssignmentExpression	pfont -> FAPI = 0		8199697	0		=			
ANR	8199828	PtrMemberAccess	pfont -> FAPI		8199697	0					
ANR	8199829	Identifier	pfont		8199697	0					
ANR	8199830	Identifier	FAPI		8199697	1					
ANR	8199831	PrimaryExpression	0		8199697	1					
ANR	8199832	ExpressionStatement	pfont -> FAPI_font_data = 0	871:4:24942:24967	8199697	13	True				
ANR	8199833	AssignmentExpression	pfont -> FAPI_font_data = 0		8199697	0		=			
ANR	8199834	PtrMemberAccess	pfont -> FAPI_font_data		8199697	0					
ANR	8199835	Identifier	pfont		8199697	0					
ANR	8199836	Identifier	FAPI_font_data		8199697	1					
ANR	8199837	PrimaryExpression	0		8199697	1					
ANR	8199838	ExpressionStatement	"pl_tt_finish_init ( pfont , ! data )"	872:4:24973:25004	8199697	14	True				
ANR	8199839	CallExpression	"pl_tt_finish_init ( pfont , ! data )"		8199697	0					
ANR	8199840	Callee	pl_tt_finish_init		8199697	0					
ANR	8199841	Identifier	pl_tt_finish_init		8199697	0					
ANR	8199842	ArgumentList	pfont		8199697	1					
ANR	8199843	Argument	pfont		8199697	0					
ANR	8199844	Identifier	pfont		8199697	0					
ANR	8199845	Argument	! data		8199697	1					
ANR	8199846	UnaryOperationExpression	! data		8199697	0					
ANR	8199847	UnaryOperator	!		8199697	0					
ANR	8199848	Identifier	data		8199697	1					
ANR	8199849	ReturnStatement	return 0 ;	873:4:25010:25018	8199697	15	True				
ANR	8199850	PrimaryExpression	0		8199697	0					
ANR	8199851	ReturnType	int		8199697	1					
ANR	8199852	Identifier	pl_fill_in_tt_font		8199697	2					
ANR	8199853	ParameterList	"gs_font_type42 * pfont , void * data , long unique_id"		8199697	3					
ANR	8199854	Parameter	gs_font_type42 * pfont	842:19:23893:23914	8199697	0	True				
ANR	8199855	ParameterType	gs_font_type42 *		8199697	0					
ANR	8199856	Identifier	pfont		8199697	1					
ANR	8199857	Parameter	void * data	842:43:23917:23926	8199697	1	True				
ANR	8199858	ParameterType	void *		8199697	0					
ANR	8199859	Identifier	data		8199697	1					
ANR	8199860	Parameter	long unique_id	842:55:23929:23942	8199697	2	True				
ANR	8199861	ParameterType	long		8199697	0					
ANR	8199862	Identifier	unique_id		8199697	1					
ANR	8199863	CFGEntryNode	ENTRY		8199697		True				
ANR	8199864	CFGExitNode	EXIT		8199697		True				
ANR	8199865	Symbol	pfont -> FontBBox . q . y		8199697						
ANR	8199866	Symbol	pfont -> FAPI		8199697						
ANR	8199867	Symbol	code		8199697						
ANR	8199868	Symbol	data		8199697						
ANR	8199869	Symbol	pfont -> FontBBox . q . x		8199697						
ANR	8199870	Symbol	pfont -> FAPI_font_data		8199697						
ANR	8199871	Symbol	ft_TrueType		8199697						
ANR	8199872	Symbol	& pfont -> UID		8199697						
ANR	8199873	Symbol	pfont -> nearest_encoding_index		8199697						
ANR	8199874	Symbol	pfont -> TransformedChar		8199697						
ANR	8199875	Symbol	pfont -> FontType		8199697						
ANR	8199876	Symbol	pfont -> InBetweenSize		8199697						
ANR	8199877	Symbol	pfont -> BitmapWidths		8199697						
ANR	8199878	Symbol	pfont -> FontBBox		8199697						
ANR	8199879	Symbol	fbit_use_outlines		8199697						
ANR	8199880	Symbol	pfont -> data . proc_data		8199697						
ANR	8199881	Symbol	pfont -> encoding_index		8199697						
ANR	8199882	Symbol	unique_id		8199697						
ANR	8199883	Symbol	pfont		8199697						
ANR	8199884	Symbol	pfont -> data		8199697						
ANR	8199885	Symbol	* pfont		8199697						
ANR	8199886	Symbol	pfont -> FontBBox . p . x		8199697						
ANR	8199887	Symbol	pfont -> FontBBox . p . y		8199697						
ANR	8199888	Symbol	gs_type42_font_init		8199697						
ANR	8199889	Symbol	true		8199697						
ANR	8199890	Symbol	pfont -> FontBBox . p		8199697						
ANR	8199891	Symbol	pfont -> ExactSize		8199697						
ANR	8199892	Symbol	pfont -> FontBBox . q		8199697						
ANR	8199893	Function	pl_fill_in_intelli_font	877:0:25062:25955							
ANR	8199894	FunctionDef	"pl_fill_in_intelli_font (gs_font_base * pfont , long unique_id)"		8199893	0					
ANR	8199895	CompoundStatement		879:0:25129:25955	8199893	0					
ANR	8199896	CompoundStatement		3:8:96:109	8199893	0					
ANR	8199897	IdentifierDeclStatement	gs_matrix mat ;	881:8:25226:25239	8199893	0	True				
ANR	8199898	IdentifierDecl	mat		8199893	0					
ANR	8199899	IdentifierDeclType	gs_matrix		8199893	0					
ANR	8199900	Identifier	mat		8199893	1					
ANR	8199901	ExpressionStatement	"gs_make_scaling ( 1.0 / 8782 , 1.0 / 8782 , & mat )"	883:8:25250:25295	8199893	1	True				
ANR	8199902	CallExpression	"gs_make_scaling ( 1.0 / 8782 , 1.0 / 8782 , & mat )"		8199893	0					
ANR	8199903	Callee	gs_make_scaling		8199893	0					
ANR	8199904	Identifier	gs_make_scaling		8199893	0					
ANR	8199905	ArgumentList	1.0 / 8782		8199893	1					
ANR	8199906	Argument	1.0 / 8782		8199893	0					
ANR	8199907	MultiplicativeExpression	1.0 / 8782		8199893	0		/			
ANR	8199908	PrimaryExpression	1.0		8199893	0					
ANR	8199909	PrimaryExpression	8782		8199893	1					
ANR	8199910	Argument	1.0 / 8782		8199893	1					
ANR	8199911	MultiplicativeExpression	1.0 / 8782		8199893	0		/			
ANR	8199912	PrimaryExpression	1.0		8199893	0					
ANR	8199913	PrimaryExpression	8782		8199893	1					
ANR	8199914	Argument	& mat		8199893	2					
ANR	8199915	UnaryOperationExpression	& mat		8199893	0					
ANR	8199916	UnaryOperator	&		8199893	0					
ANR	8199917	Identifier	mat		8199893	1					
ANR	8199918	ExpressionStatement	"gs_matrix_translate ( & mat , - 2980.0 , - 5380.0 , & pfont -> orig_FontMatrix )"	884:8:25305:25373	8199893	2	True				
ANR	8199919	CallExpression	"gs_matrix_translate ( & mat , - 2980.0 , - 5380.0 , & pfont -> orig_FontMatrix )"		8199893	0					
ANR	8199920	Callee	gs_matrix_translate		8199893	0					
ANR	8199921	Identifier	gs_matrix_translate		8199893	0					
ANR	8199922	ArgumentList	& mat		8199893	1					
ANR	8199923	Argument	& mat		8199893	0					
ANR	8199924	UnaryOperationExpression	& mat		8199893	0					
ANR	8199925	UnaryOperator	&		8199893	0					
ANR	8199926	Identifier	mat		8199893	1					
ANR	8199927	Argument	- 2980.0		8199893	1					
ANR	8199928	UnaryOperationExpression	- 2980.0		8199893	0					
ANR	8199929	UnaryOperator	-		8199893	0					
ANR	8199930	PrimaryExpression	2980.0		8199893	1					
ANR	8199931	Argument	- 5380.0		8199893	2					
ANR	8199932	UnaryOperationExpression	- 5380.0		8199893	0					
ANR	8199933	UnaryOperator	-		8199893	0					
ANR	8199934	PrimaryExpression	5380.0		8199893	1					
ANR	8199935	Argument	& pfont -> orig_FontMatrix		8199893	3					
ANR	8199936	UnaryOperationExpression	& pfont -> orig_FontMatrix		8199893	0					
ANR	8199937	UnaryOperator	&		8199893	0					
ANR	8199938	PtrMemberAccess	pfont -> orig_FontMatrix		8199893	1					
ANR	8199939	Identifier	pfont		8199893	0					
ANR	8199940	Identifier	orig_FontMatrix		8199893	1					
ANR	8199941	ExpressionStatement	pfont -> FontType = ft_MicroType	886:4:25385:25415	8199893	1	True				
ANR	8199942	AssignmentExpression	pfont -> FontType = ft_MicroType		8199893	0		=			
ANR	8199943	PtrMemberAccess	pfont -> FontType		8199893	0					
ANR	8199944	Identifier	pfont		8199893	0					
ANR	8199945	Identifier	FontType		8199893	1					
ANR	8199946	Identifier	ft_MicroType		8199893	1					
ANR	8199947	ExpressionStatement	pfont -> BitmapWidths = true	887:4:25421:25447	8199893	2	True				
ANR	8199948	AssignmentExpression	pfont -> BitmapWidths = true		8199893	0		=			
ANR	8199949	PtrMemberAccess	pfont -> BitmapWidths		8199893	0					
ANR	8199950	Identifier	pfont		8199893	0					
ANR	8199951	Identifier	BitmapWidths		8199893	1					
ANR	8199952	Identifier	true		8199893	1					
ANR	8199953	ExpressionStatement	pfont -> ExactSize = fbit_use_outlines	888:4:25453:25489	8199893	3	True				
ANR	8199954	AssignmentExpression	pfont -> ExactSize = fbit_use_outlines		8199893	0		=			
ANR	8199955	PtrMemberAccess	pfont -> ExactSize		8199893	0					
ANR	8199956	Identifier	pfont		8199893	0					
ANR	8199957	Identifier	ExactSize		8199893	1					
ANR	8199958	Identifier	fbit_use_outlines		8199893	1					
ANR	8199959	ExpressionStatement	pfont -> InBetweenSize = fbit_use_outlines	889:4:25495:25535	8199893	4	True				
ANR	8199960	AssignmentExpression	pfont -> InBetweenSize = fbit_use_outlines		8199893	0		=			
ANR	8199961	PtrMemberAccess	pfont -> InBetweenSize		8199893	0					
ANR	8199962	Identifier	pfont		8199893	0					
ANR	8199963	Identifier	InBetweenSize		8199893	1					
ANR	8199964	Identifier	fbit_use_outlines		8199893	1					
ANR	8199965	ExpressionStatement	pfont -> TransformedChar = fbit_use_outlines	890:4:25541:25583	8199893	5	True				
ANR	8199966	AssignmentExpression	pfont -> TransformedChar = fbit_use_outlines		8199893	0		=			
ANR	8199967	PtrMemberAccess	pfont -> TransformedChar		8199893	0					
ANR	8199968	Identifier	pfont		8199893	0					
ANR	8199969	Identifier	TransformedChar		8199893	1					
ANR	8199970	Identifier	fbit_use_outlines		8199893	1					
ANR	8199971	ExpressionStatement	pfont -> FontBBox . p . x = pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0	892:4:25644:25741	8199893	6	True				
ANR	8199972	AssignmentExpression	pfont -> FontBBox . p . x = pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		8199893	0		=			
ANR	8199973	MemberAccess	pfont -> FontBBox . p . x		8199893	0					
ANR	8199974	MemberAccess	pfont -> FontBBox . p		8199893	0					
ANR	8199975	PtrMemberAccess	pfont -> FontBBox		8199893	0					
ANR	8199976	Identifier	pfont		8199893	0					
ANR	8199977	Identifier	FontBBox		8199893	1					
ANR	8199978	Identifier	p		8199893	1					
ANR	8199979	Identifier	x		8199893	1					
ANR	8199980	AssignmentExpression	pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		8199893	1		=			
ANR	8199981	MemberAccess	pfont -> FontBBox . p . y		8199893	0					
ANR	8199982	MemberAccess	pfont -> FontBBox . p		8199893	0					
ANR	8199983	PtrMemberAccess	pfont -> FontBBox		8199893	0					
ANR	8199984	Identifier	pfont		8199893	0					
ANR	8199985	Identifier	FontBBox		8199893	1					
ANR	8199986	Identifier	p		8199893	1					
ANR	8199987	Identifier	y		8199893	1					
ANR	8199988	AssignmentExpression	pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		8199893	1		=			
ANR	8199989	MemberAccess	pfont -> FontBBox . q . x		8199893	0					
ANR	8199990	MemberAccess	pfont -> FontBBox . q		8199893	0					
ANR	8199991	PtrMemberAccess	pfont -> FontBBox		8199893	0					
ANR	8199992	Identifier	pfont		8199893	0					
ANR	8199993	Identifier	FontBBox		8199893	1					
ANR	8199994	Identifier	q		8199893	1					
ANR	8199995	Identifier	x		8199893	1					
ANR	8199996	AssignmentExpression	pfont -> FontBBox . q . y = 0		8199893	1		=			
ANR	8199997	MemberAccess	pfont -> FontBBox . q . y		8199893	0					
ANR	8199998	MemberAccess	pfont -> FontBBox . q		8199893	0					
ANR	8199999	PtrMemberAccess	pfont -> FontBBox		8199893	0					
ANR	8200000	Identifier	pfont		8199893	0					
ANR	8200001	Identifier	FontBBox		8199893	1					
ANR	8200002	Identifier	q		8199893	1					
ANR	8200003	Identifier	y		8199893	1					
ANR	8200004	PrimaryExpression	0		8199893	1					
ANR	8200005	ExpressionStatement	"uid_set_UniqueID ( & pfont -> UID , unique_id )"	894:4:25747:25787	8199893	7	True				
ANR	8200006	CallExpression	"uid_set_UniqueID ( & pfont -> UID , unique_id )"		8199893	0					
ANR	8200007	Callee	uid_set_UniqueID		8199893	0					
ANR	8200008	Identifier	uid_set_UniqueID		8199893	0					
ANR	8200009	ArgumentList	& pfont -> UID		8199893	1					
ANR	8200010	Argument	& pfont -> UID		8199893	0					
ANR	8200011	UnaryOperationExpression	& pfont -> UID		8199893	0					
ANR	8200012	UnaryOperator	&		8199893	0					
ANR	8200013	PtrMemberAccess	pfont -> UID		8199893	1					
ANR	8200014	Identifier	pfont		8199893	0					
ANR	8200015	Identifier	UID		8199893	1					
ANR	8200016	Argument	unique_id		8199893	1					
ANR	8200017	Identifier	unique_id		8199893	0					
ANR	8200018	ExpressionStatement	pfont -> encoding_index = 1	895:4:25793:25818	8199893	8	True				
ANR	8200019	AssignmentExpression	pfont -> encoding_index = 1		8199893	0		=			
ANR	8200020	PtrMemberAccess	pfont -> encoding_index		8199893	0					
ANR	8200021	Identifier	pfont		8199893	0					
ANR	8200022	Identifier	encoding_index		8199893	1					
ANR	8200023	PrimaryExpression	1		8199893	1					
ANR	8200024	ExpressionStatement	pfont -> nearest_encoding_index = 1	896:4:25855:25888	8199893	9	True				
ANR	8200025	AssignmentExpression	pfont -> nearest_encoding_index = 1		8199893	0		=			
ANR	8200026	PtrMemberAccess	pfont -> nearest_encoding_index		8199893	0					
ANR	8200027	Identifier	pfont		8199893	0					
ANR	8200028	Identifier	nearest_encoding_index		8199893	1					
ANR	8200029	PrimaryExpression	1		8199893	1					
ANR	8200030	ExpressionStatement	pl_intelli_init_procs ( pfont )	897:4:25925:25953	8199893	10	True				
ANR	8200031	CallExpression	pl_intelli_init_procs ( pfont )		8199893	0					
ANR	8200032	Callee	pl_intelli_init_procs		8199893	0					
ANR	8200033	Identifier	pl_intelli_init_procs		8199893	0					
ANR	8200034	ArgumentList	pfont		8199893	1					
ANR	8200035	Argument	pfont		8199893	0					
ANR	8200036	Identifier	pfont		8199893	0					
ANR	8200037	ReturnType	void		8199893	1					
ANR	8200038	Identifier	pl_fill_in_intelli_font		8199893	2					
ANR	8200039	ParameterList	"gs_font_base * pfont , long unique_id"		8199893	3					
ANR	8200040	Parameter	gs_font_base * pfont	878:24:25091:25110	8199893	0	True				
ANR	8200041	ParameterType	gs_font_base *		8199893	0					
ANR	8200042	Identifier	pfont		8199893	1					
ANR	8200043	Parameter	long unique_id	878:46:25113:25126	8199893	1	True				
ANR	8200044	ParameterType	long		8199893	0					
ANR	8200045	Identifier	unique_id		8199893	1					
ANR	8200046	CFGEntryNode	ENTRY		8199893		True				
ANR	8200047	CFGExitNode	EXIT		8199893		True				
ANR	8200048	Symbol	mat		8199893						
ANR	8200049	Symbol	& mat		8199893						
ANR	8200050	Symbol	pfont -> FontBBox . q . y		8199893						
ANR	8200051	Symbol	unique_id		8199893						
ANR	8200052	Symbol	pfont		8199893						
ANR	8200053	Symbol	& pfont -> orig_FontMatrix		8199893						
ANR	8200054	Symbol	pfont -> FontBBox . q . x		8199893						
ANR	8200055	Symbol	& pfont -> UID		8199893						
ANR	8200056	Symbol	pfont -> nearest_encoding_index		8199893						
ANR	8200057	Symbol	pfont -> TransformedChar		8199893						
ANR	8200058	Symbol	* pfont		8199893						
ANR	8200059	Symbol	pfont -> FontType		8199893						
ANR	8200060	Symbol	pfont -> FontBBox . p . x		8199893						
ANR	8200061	Symbol	pfont -> FontBBox . p . y		8199893						
ANR	8200062	Symbol	pfont -> InBetweenSize		8199893						
ANR	8200063	Symbol	true		8199893						
ANR	8200064	Symbol	pfont -> BitmapWidths		8199893						
ANR	8200065	Symbol	pfont -> FontBBox . p		8199893						
ANR	8200066	Symbol	pfont -> ExactSize		8199893						
ANR	8200067	Symbol	pfont -> FontBBox . q		8199893						
ANR	8200068	Symbol	pfont -> FontBBox		8199893						
ANR	8200069	Symbol	ft_MicroType		8199893						
ANR	8200070	Symbol	fbit_use_outlines		8199893						
ANR	8200071	Symbol	pfont -> encoding_index		8199893						
ANR	8200072	Function	pl_font_scan_segments	909:0:26441:32113							
ANR	8200073	FunctionDef	"pl_font_scan_segments (const gs_memory_t * mem , pl_font_t * plfont , int fst_offset , int start_offset , long end_offset , bool large_sizes , const pl_font_offset_errors_t * pfoe)"		8200072	0					
ANR	8200074	CompoundStatement		914:0:26685:32113	8200072	0					
ANR	8200075	IdentifierDeclStatement	const byte * header = plfont -> header ;	915:4:26691:26726	8200072	0	True				
ANR	8200076	IdentifierDecl	* header = plfont -> header		8200072	0					
ANR	8200077	IdentifierDeclType	const byte *		8200072	0					
ANR	8200078	Identifier	header		8200072	1					
ANR	8200079	AssignmentExpression	* header = plfont -> header		8200072	2		=			
ANR	8200080	Identifier	header		8200072	0					
ANR	8200081	PtrMemberAccess	plfont -> header		8200072	1					
ANR	8200082	Identifier	plfont		8200072	0					
ANR	8200083	Identifier	header		8200072	1					
ANR	8200084	IdentifierDeclStatement	pl_font_scaling_technology_t fst = header [ fst_offset ] ;	916:4:26732:26785	8200072	1	True				
ANR	8200085	IdentifierDecl	fst = header [ fst_offset ]		8200072	0					
ANR	8200086	IdentifierDeclType	pl_font_scaling_technology_t		8200072	0					
ANR	8200087	Identifier	fst		8200072	1					
ANR	8200088	AssignmentExpression	fst = header [ fst_offset ]		8200072	2		=			
ANR	8200089	Identifier	fst		8200072	0					
ANR	8200090	ArrayIndexing	header [ fst_offset ]		8200072	1					
ANR	8200091	Identifier	header		8200072	0					
ANR	8200092	Identifier	fst_offset		8200072	1					
ANR	8200093	IdentifierDeclStatement	int wsize = ( large_sizes ? 4 : 2 ) ;	917:4:26791:26824	8200072	2	True				
ANR	8200094	IdentifierDecl	wsize = ( large_sizes ? 4 : 2 )		8200072	0					
ANR	8200095	IdentifierDeclType	int		8200072	0					
ANR	8200096	Identifier	wsize		8200072	1					
ANR	8200097	AssignmentExpression	wsize = ( large_sizes ? 4 : 2 )		8200072	2		=			
ANR	8200098	Identifier	wsize		8200072	0					
ANR	8200099	ConditionalExpression	large_sizes ? 4 : 2		8200072	1					
ANR	8200100	Condition	large_sizes		8200072	0					
ANR	8200101	Identifier	large_sizes		8200072	0					
ANR	8200102	PrimaryExpression	4		8200072	1					
ANR	8200103	PrimaryExpression	2		8200072	2					
ANR	8200104	IdentifierDeclStatement	const byte * segment = header + start_offset ;	918:4:26830:26873	8200072	3	True				
ANR	8200105	IdentifierDecl	* segment = header + start_offset		8200072	0					
ANR	8200106	IdentifierDeclType	const byte *		8200072	0					
ANR	8200107	Identifier	segment		8200072	1					
ANR	8200108	AssignmentExpression	* segment = header + start_offset		8200072	2		=			
ANR	8200109	Identifier	segment		8200072	0					
ANR	8200110	AdditiveExpression	header + start_offset		8200072	1		+			
ANR	8200111	Identifier	header		8200072	0					
ANR	8200112	Identifier	start_offset		8200072	1					
ANR	8200113	IdentifierDeclStatement	const byte * end = header + end_offset ;	919:4:26879:26916	8200072	4	True				
ANR	8200114	IdentifierDecl	* end = header + end_offset		8200072	0					
ANR	8200115	IdentifierDeclType	const byte *		8200072	0					
ANR	8200116	Identifier	end		8200072	1					
ANR	8200117	AssignmentExpression	* end = header + end_offset		8200072	2		=			
ANR	8200118	Identifier	end		8200072	0					
ANR	8200119	AdditiveExpression	header + end_offset		8200072	1		+			
ANR	8200120	Identifier	header		8200072	0					
ANR	8200121	Identifier	end_offset		8200072	1					
ANR	8200122	IdentifierDeclStatement	const byte * null_segment = end - ( 2 + wsize ) ;	920:4:26922:26966	8200072	5	True				
ANR	8200123	IdentifierDecl	* null_segment = end - ( 2 + wsize )		8200072	0					
ANR	8200124	IdentifierDeclType	const byte *		8200072	0					
ANR	8200125	Identifier	null_segment		8200072	1					
ANR	8200126	AssignmentExpression	* null_segment = end - ( 2 + wsize )		8200072	2		=			
ANR	8200127	Identifier	null_segment		8200072	0					
ANR	8200128	AdditiveExpression	end - ( 2 + wsize )		8200072	1		-			
ANR	8200129	Identifier	end		8200072	0					
ANR	8200130	AdditiveExpression	2 + wsize		8200072	1		+			
ANR	8200131	PrimaryExpression	2		8200072	0					
ANR	8200132	Identifier	wsize		8200072	1					
ANR	8200133	IdentifierDeclStatement	bool found = false ;	921:4:26972:26990	8200072	6	True				
ANR	8200134	IdentifierDecl	found = false		8200072	0					
ANR	8200135	IdentifierDeclType	bool		8200072	0					
ANR	8200136	Identifier	found		8200072	1					
ANR	8200137	AssignmentExpression	found = false		8200072	2		=			
ANR	8200138	Identifier	false		8200072	0					
ANR	8200139	Identifier	false		8200072	1					
ANR	8200140	IdentifierDeclStatement	ulong seg_size ;	922:4:26996:27010	8200072	7	True				
ANR	8200141	IdentifierDecl	seg_size		8200072	0					
ANR	8200142	IdentifierDeclType	ulong		8200072	0					
ANR	8200143	Identifier	seg_size		8200072	1					
ANR	8200144	IdentifierDeclStatement	int illegal_font_data = pfoe -> illegal_font_data ;	923:4:27016:27063	8200072	8	True				
ANR	8200145	IdentifierDecl	illegal_font_data = pfoe -> illegal_font_data		8200072	0					
ANR	8200146	IdentifierDeclType	int		8200072	0					
ANR	8200147	Identifier	illegal_font_data		8200072	1					
ANR	8200148	AssignmentExpression	illegal_font_data = pfoe -> illegal_font_data		8200072	2		=			
ANR	8200149	Identifier	illegal_font_data		8200072	0					
ANR	8200150	PtrMemberAccess	pfoe -> illegal_font_data		8200072	1					
ANR	8200151	Identifier	pfoe		8200072	0					
ANR	8200152	Identifier	illegal_font_data		8200072	1					
ANR	8200153	Statement	define	925:1:27067:27072	8200072	9	True				
ANR	8200154	Statement	return_scan_error	925:8:27074:27090	8200072	10	True				
ANR	8200155	ExpressionStatement	( err ) return_error ( ( err ) ? ( err ) : illegal_font_data )	925:25:27091:27147	8200072	11	True				
ANR	8200156	CastExpression	( err ) return_error ( ( err ) ? ( err ) : illegal_font_data )		8200072	0					
ANR	8200157	CastTarget	err		8200072	0					
ANR	8200158	CallExpression	return_error ( ( err ) ? ( err ) : illegal_font_data )		8200072	1					
ANR	8200159	Callee	return_error		8200072	0					
ANR	8200160	Identifier	return_error		8200072	0					
ANR	8200161	ArgumentList	( err ) ? ( err ) : illegal_font_data		8200072	1					
ANR	8200162	Argument	( err ) ? ( err ) : illegal_font_data		8200072	0					
ANR	8200163	ConditionalExpression	( err ) ? ( err ) : illegal_font_data		8200072	0					
ANR	8200164	Condition	err		8200072	0					
ANR	8200165	Identifier	err		8200072	0					
ANR	8200166	Identifier	err		8200072	1					
ANR	8200167	Identifier	illegal_font_data		8200072	2					
ANR	8200168	IfStatement	"if ( memcmp ( null_segment , ""\\377\\377"" , 2 ) )"		8200072	12					
ANR	8200169	Condition	"memcmp ( null_segment , ""\\377\\377"" , 2 )"	928:8:27158:27192	8200072	0	True				
ANR	8200170	CallExpression	"memcmp ( null_segment , ""\\377\\377"" , 2 )"		8200072	0					
ANR	8200171	Callee	memcmp		8200072	0					
ANR	8200172	Identifier	memcmp		8200072	0					
ANR	8200173	ArgumentList	null_segment		8200072	1					
ANR	8200174	Argument	null_segment		8200072	0					
ANR	8200175	Identifier	null_segment		8200072	0					
ANR	8200176	Argument	"""\\377\\377"""		8200072	1					
ANR	8200177	PrimaryExpression	"""\\377\\377"""		8200072	0					
ANR	8200178	Argument	2		8200072	2					
ANR	8200179	PrimaryExpression	2		8200072	0					
ANR	8200180	ExpressionStatement	return_scan_error ( pfoe -> missing_required_segment )	929:8:27230:27279	8200072	1	True				
ANR	8200181	CallExpression	return_scan_error ( pfoe -> missing_required_segment )		8200072	0					
ANR	8200182	Callee	return_scan_error		8200072	0					
ANR	8200183	Identifier	return_scan_error		8200072	0					
ANR	8200184	ArgumentList	pfoe -> missing_required_segment		8200072	1					
ANR	8200185	Argument	pfoe -> missing_required_segment		8200072	0					
ANR	8200186	PtrMemberAccess	pfoe -> missing_required_segment		8200072	0					
ANR	8200187	Identifier	pfoe		8200072	0					
ANR	8200188	Identifier	missing_required_segment		8200072	1					
ANR	8200189	IfStatement	"if ( memcmp ( null_segment + 2 , ""\\0\\0\\0\\0"" , wsize ) )"		8200072	13					
ANR	8200190	Condition	"memcmp ( null_segment + 2 , ""\\0\\0\\0\\0"" , wsize )"	930:8:27289:27331	8200072	0	True				
ANR	8200191	CallExpression	"memcmp ( null_segment + 2 , ""\\0\\0\\0\\0"" , wsize )"		8200072	0					
ANR	8200192	Callee	memcmp		8200072	0					
ANR	8200193	Identifier	memcmp		8200072	0					
ANR	8200194	ArgumentList	null_segment + 2		8200072	1					
ANR	8200195	Argument	null_segment + 2		8200072	0					
ANR	8200196	AdditiveExpression	null_segment + 2		8200072	0		+			
ANR	8200197	Identifier	null_segment		8200072	0					
ANR	8200198	PrimaryExpression	2		8200072	1					
ANR	8200199	Argument	"""\\0\\0\\0\\0"""		8200072	1					
ANR	8200200	PrimaryExpression	"""\\0\\0\\0\\0"""		8200072	0					
ANR	8200201	Argument	wsize		8200072	2					
ANR	8200202	Identifier	wsize		8200072	0					
ANR	8200203	ExpressionStatement	return_scan_error ( pfoe -> illegal_null_segment_size )	931:8:27367:27417	8200072	1	True				
ANR	8200204	CallExpression	return_scan_error ( pfoe -> illegal_null_segment_size )		8200072	0					
ANR	8200205	Callee	return_scan_error		8200072	0					
ANR	8200206	Identifier	return_scan_error		8200072	0					
ANR	8200207	ArgumentList	pfoe -> illegal_null_segment_size		8200072	1					
ANR	8200208	Argument	pfoe -> illegal_null_segment_size		8200072	0					
ANR	8200209	PtrMemberAccess	pfoe -> illegal_null_segment_size		8200072	0					
ANR	8200210	Identifier	pfoe		8200072	0					
ANR	8200211	Identifier	illegal_null_segment_size		8200072	1					
ANR	8200212	SwitchStatement	switch ( fst )		8200072	14					
ANR	8200213	Condition	fst	932:12:27431:27433	8200072	0	True				
ANR	8200214	Identifier	fst		8200072	0					
ANR	8200215	CompoundStatement		19:17:750:750	8200072	1					
ANR	8200216	Label	case plfst_bitmap :	933:8:27446:27463	8200072	0	True				
ANR	8200217	Identifier	plfst_bitmap		8200072	0					
ANR	8200218	Label	case plfst_TrueType :	934:8:27473:27492	8200072	1	True				
ANR	8200219	Identifier	plfst_TrueType		8200072	0					
ANR	8200220	BreakStatement	break ;	935:12:27506:27511	8200072	2	True				
ANR	8200221	Label	default :	936:8:27521:27528	8200072	3	True				
ANR	8200222	Identifier	default		8200072	0					
ANR	8200223	ExpressionStatement	return_scan_error ( pfoe -> illegal_font_header_fields )	937:12:27542:27593	8200072	4	True				
ANR	8200224	CallExpression	return_scan_error ( pfoe -> illegal_font_header_fields )		8200072	0					
ANR	8200225	Callee	return_scan_error		8200072	0					
ANR	8200226	Identifier	return_scan_error		8200072	0					
ANR	8200227	ArgumentList	pfoe -> illegal_font_header_fields		8200072	1					
ANR	8200228	Argument	pfoe -> illegal_font_header_fields		8200072	0					
ANR	8200229	PtrMemberAccess	pfoe -> illegal_font_header_fields		8200072	0					
ANR	8200230	Identifier	pfoe		8200072	0					
ANR	8200231	Identifier	illegal_font_header_fields		8200072	1					
ANR	8200232	IfStatement	if ( header [ fst_offset + 1 ] )		8200072	15					
ANR	8200233	Condition	header [ fst_offset + 1 ]	939:8:27609:27630	8200072	0	True				
ANR	8200234	ArrayIndexing	header [ fst_offset + 1 ]		8200072	0					
ANR	8200235	Identifier	header		8200072	0					
ANR	8200236	AdditiveExpression	fst_offset + 1		8200072	1		+			
ANR	8200237	Identifier	fst_offset		8200072	0					
ANR	8200238	PrimaryExpression	1		8200072	1					
ANR	8200239	ExpressionStatement	return_scan_error ( pfoe -> illegal_font_header_fields )	940:8:27666:27717	8200072	1	True				
ANR	8200240	CallExpression	return_scan_error ( pfoe -> illegal_font_header_fields )		8200072	0					
ANR	8200241	Callee	return_scan_error		8200072	0					
ANR	8200242	Identifier	return_scan_error		8200072	0					
ANR	8200243	ArgumentList	pfoe -> illegal_font_header_fields		8200072	1					
ANR	8200244	Argument	pfoe -> illegal_font_header_fields		8200072	0					
ANR	8200245	PtrMemberAccess	pfoe -> illegal_font_header_fields		8200072	0					
ANR	8200246	Identifier	pfoe		8200072	0					
ANR	8200247	Identifier	illegal_font_header_fields		8200072	1					
ANR	8200248	ForStatement	for ( ; end - segment >= 2 + wsize ; segment += 2 + wsize + seg_size )		8200072	16					
ANR	8200249	Condition	end - segment >= 2 + wsize	942:11:27759:27784	8200072	0	True				
ANR	8200250	RelationalExpression	end - segment >= 2 + wsize		8200072	0		>=			
ANR	8200251	AdditiveExpression	end - segment		8200072	0		-			
ANR	8200252	Identifier	end		8200072	0					
ANR	8200253	Identifier	segment		8200072	1					
ANR	8200254	AdditiveExpression	2 + wsize		8200072	1		+			
ANR	8200255	PrimaryExpression	2		8200072	0					
ANR	8200256	Identifier	wsize		8200072	1					
ANR	8200257	AssignmentExpression	segment += 2 + wsize + seg_size	942:39:27787:27817	8200072	1	True	+=			
ANR	8200258	Identifier	segment		8200072	0					
ANR	8200259	AdditiveExpression	2 + wsize + seg_size		8200072	1		+			
ANR	8200260	PrimaryExpression	2		8200072	0					
ANR	8200261	AdditiveExpression	wsize + seg_size		8200072	1		+			
ANR	8200262	Identifier	wsize		8200072	0					
ANR	8200263	Identifier	seg_size		8200072	1					
ANR	8200264	CompoundStatement		31:8:1180:1219	8200072	2					
ANR	8200265	IdentifierDeclStatement	uint seg_id = u16 ( segment ) ;	943:8:27830:27856	8200072	0	True				
ANR	8200266	IdentifierDecl	seg_id = u16 ( segment )		8200072	0					
ANR	8200267	IdentifierDeclType	uint		8200072	0					
ANR	8200268	Identifier	seg_id		8200072	1					
ANR	8200269	AssignmentExpression	seg_id = u16 ( segment )		8200072	2		=			
ANR	8200270	Identifier	seg_id		8200072	0					
ANR	8200271	CallExpression	u16 ( segment )		8200072	1					
ANR	8200272	Callee	u16		8200072	0					
ANR	8200273	Identifier	u16		8200072	0					
ANR	8200274	ArgumentList	segment		8200072	1					
ANR	8200275	Argument	segment		8200072	0					
ANR	8200276	Identifier	segment		8200072	0					
ANR	8200277	IdentifierDeclStatement	const byte * sdata = segment + 2 + wsize ;	944:8:27866:27905	8200072	1	True				
ANR	8200278	IdentifierDecl	* sdata = segment + 2 + wsize		8200072	0					
ANR	8200279	IdentifierDeclType	const byte *		8200072	0					
ANR	8200280	Identifier	sdata		8200072	1					
ANR	8200281	AssignmentExpression	* sdata = segment + 2 + wsize		8200072	2		=			
ANR	8200282	Identifier	sdata		8200072	0					
ANR	8200283	AdditiveExpression	segment + 2 + wsize		8200072	1		+			
ANR	8200284	Identifier	segment		8200072	0					
ANR	8200285	AdditiveExpression	2 + wsize		8200072	1		+			
ANR	8200286	PrimaryExpression	2		8200072	0					
ANR	8200287	Identifier	wsize		8200072	1					
ANR	8200288	Statement	define	946:1:27909:27914	8200072	2	True				
ANR	8200289	Statement	id2	946:8:27916:27918	8200072	3	True				
ANR	8200290	Statement	(	946:11:27919:27919	8200072	4	True				
ANR	8200291	Statement	c1	946:12:27920:27921	8200072	5	True				
ANR	8200292	Statement	","	946:14:27922:27922	8200072	6	True				
ANR	8200293	Statement	c2	946:15:27923:27924	8200072	7	True				
ANR	8200294	Statement	)	946:17:27925:27925	8200072	8	True				
ANR	8200295	Statement	(	946:19:27927:27927	8200072	9	True				
ANR	8200296	Statement	(	946:20:27928:27928	8200072	10	True				
ANR	8200297	Statement	(	946:21:27929:27929	8200072	11	True				
ANR	8200298	Statement	uint	946:22:27930:27933	8200072	12	True				
ANR	8200299	Statement	)	946:26:27934:27934	8200072	13	True				
ANR	8200300	Statement	(	946:27:27935:27935	8200072	14	True				
ANR	8200301	Statement	c1	946:28:27936:27937	8200072	15	True				
ANR	8200302	Statement	)	946:30:27938:27938	8200072	16	True				
ANR	8200303	Statement	<<	946:32:27940:27941	8200072	17	True				
ANR	8200304	Statement	8	946:35:27943:27943	8200072	18	True				
ANR	8200305	Statement	)	946:36:27944:27944	8200072	19	True				
ANR	8200306	Statement	+	946:38:27946:27946	8200072	20	True				
ANR	8200307	Statement	(	946:40:27948:27948	8200072	21	True				
ANR	8200308	Statement	c2	946:41:27949:27950	8200072	22	True				
ANR	8200309	Statement	)	946:43:27951:27951	8200072	23	True				
ANR	8200310	Statement	)	946:44:27952:27952	8200072	24	True				
ANR	8200311	ExpressionStatement	seg_size = ( large_sizes ? u32 ( segment + 2 ) : u16 ( segment + 2 ) )	948:8:27963:28025	8200072	25	True				
ANR	8200312	AssignmentExpression	seg_size = ( large_sizes ? u32 ( segment + 2 ) : u16 ( segment + 2 ) )		8200072	0		=			
ANR	8200313	Identifier	seg_size		8200072	0					
ANR	8200314	ConditionalExpression	large_sizes ? u32 ( segment + 2 ) : u16 ( segment + 2 )		8200072	1					
ANR	8200315	Condition	large_sizes		8200072	0					
ANR	8200316	Identifier	large_sizes		8200072	0					
ANR	8200317	CallExpression	u32 ( segment + 2 )		8200072	1					
ANR	8200318	Callee	u32		8200072	0					
ANR	8200319	Identifier	u32		8200072	0					
ANR	8200320	ArgumentList	segment + 2		8200072	1					
ANR	8200321	Argument	segment + 2		8200072	0					
ANR	8200322	AdditiveExpression	segment + 2		8200072	0		+			
ANR	8200323	Identifier	segment		8200072	0					
ANR	8200324	PrimaryExpression	2		8200072	1					
ANR	8200325	CallExpression	u16 ( segment + 2 )		8200072	2					
ANR	8200326	Callee	u16		8200072	0					
ANR	8200327	Identifier	u16		8200072	0					
ANR	8200328	ArgumentList	segment + 2		8200072	1					
ANR	8200329	Argument	segment + 2		8200072	0					
ANR	8200330	AdditiveExpression	segment + 2		8200072	0		+			
ANR	8200331	Identifier	segment		8200072	0					
ANR	8200332	PrimaryExpression	2		8200072	1					
ANR	8200333	IfStatement	if ( seg_size + 2 + wsize > end - segment )		8200072	26					
ANR	8200334	Condition	seg_size + 2 + wsize > end - segment	949:12:28039:28074	8200072	0	True				
ANR	8200335	RelationalExpression	seg_size + 2 + wsize > end - segment		8200072	0		>			
ANR	8200336	AdditiveExpression	seg_size + 2 + wsize		8200072	0		+			
ANR	8200337	Identifier	seg_size		8200072	0					
ANR	8200338	AdditiveExpression	2 + wsize		8200072	1		+			
ANR	8200339	PrimaryExpression	2		8200072	0					
ANR	8200340	Identifier	wsize		8200072	1					
ANR	8200341	AdditiveExpression	end - segment		8200072	1		-			
ANR	8200342	Identifier	end		8200072	0					
ANR	8200343	Identifier	segment		8200072	1					
ANR	8200344	ExpressionStatement	return_error ( illegal_font_data )	950:12:28089:28120	8200072	1	True				
ANR	8200345	CallExpression	return_error ( illegal_font_data )		8200072	0					
ANR	8200346	Callee	return_error		8200072	0					
ANR	8200347	Identifier	return_error		8200072	0					
ANR	8200348	ArgumentList	illegal_font_data		8200072	1					
ANR	8200349	Argument	illegal_font_data		8200072	0					
ANR	8200350	Identifier	illegal_font_data		8200072	0					
ANR	8200351	SwitchStatement	switch ( seg_id )		8200072	27					
ANR	8200352	Condition	seg_id	952:16:28189:28194	8200072	0	True				
ANR	8200353	Identifier	seg_id		8200072	0					
ANR	8200354	CompoundStatement		39:24:1511:1511	8200072	1					
ANR	8200355	Label	case 0xffff :	953:12:28211:28222	8200072	0	True				
ANR	8200356	IfStatement	if ( segment != null_segment )		8200072	1					
ANR	8200357	Condition	segment != null_segment	954:20:28272:28294	8200072	0	True				
ANR	8200358	EqualityExpression	segment != null_segment		8200072	0		!=			
ANR	8200359	Identifier	segment		8200072	0					
ANR	8200360	Identifier	null_segment		8200072	1					
ANR	8200361	ExpressionStatement	return_error ( illegal_font_data )	955:20:28317:28348	8200072	1	True				
ANR	8200362	CallExpression	return_error ( illegal_font_data )		8200072	0					
ANR	8200363	Callee	return_error		8200072	0					
ANR	8200364	Identifier	return_error		8200072	0					
ANR	8200365	ArgumentList	illegal_font_data		8200072	1					
ANR	8200366	Argument	illegal_font_data		8200072	0					
ANR	8200367	Identifier	illegal_font_data		8200072	0					
ANR	8200368	ContinueStatement	continue ;	956:16:28366:28374	8200072	2	True				
ANR	8200369	Statement	case	957:12:28388:28391	8200072	3	True				
ANR	8200370	Statement	id2	957:17:28393:28395	8200072	4	True				
ANR	8200371	Statement	(	957:20:28396:28396	8200072	5	True				
ANR	8200372	Statement	'V'	957:21:28397:28399	8200072	6	True				
ANR	8200373	Statement	","	957:24:28400:28400	8200072	7	True				
ANR	8200374	Statement	'I'	957:26:28402:28404	8200072	8	True				
ANR	8200375	Statement	)	957:29:28405:28405	8200072	9	True				
ANR	8200376	Statement	:	957:30:28406:28406	8200072	10	True				
ANR	8200377	ContinueStatement	continue ;	958:16:28424:28432	8200072	11	True				
ANR	8200378	Statement	case	959:12:28446:28449	8200072	12	True				
ANR	8200379	Statement	id2	959:17:28451:28453	8200072	13	True				
ANR	8200380	Statement	(	959:20:28454:28454	8200072	14	True				
ANR	8200381	Statement	'C'	959:21:28455:28457	8200072	15	True				
ANR	8200382	Statement	","	959:24:28458:28458	8200072	16	True				
ANR	8200383	Statement	'C'	959:26:28460:28462	8200072	17	True				
ANR	8200384	Statement	)	959:29:28463:28463	8200072	18	True				
ANR	8200385	Statement	:	959:30:28464:28464	8200072	19	True				
ANR	8200386	IfStatement	if ( seg_size != 8 )		8200072	20					
ANR	8200387	Condition	seg_size != 8	960:20:28486:28498	8200072	0	True				
ANR	8200388	EqualityExpression	seg_size != 8		8200072	0		!=			
ANR	8200389	Identifier	seg_size		8200072	0					
ANR	8200390	PrimaryExpression	8		8200072	1					
ANR	8200391	ExpressionStatement	return_error ( illegal_font_data )	961:20:28521:28552	8200072	1	True				
ANR	8200392	CallExpression	return_error ( illegal_font_data )		8200072	0					
ANR	8200393	Callee	return_error		8200072	0					
ANR	8200394	Identifier	return_error		8200072	0					
ANR	8200395	ArgumentList	illegal_font_data		8200072	1					
ANR	8200396	Argument	illegal_font_data		8200072	0					
ANR	8200397	Identifier	illegal_font_data		8200072	0					
ANR	8200398	ExpressionStatement	"memcpy ( plfont -> character_complement , sdata , 8 )"	962:16:28570:28616	8200072	21	True				
ANR	8200399	CallExpression	"memcpy ( plfont -> character_complement , sdata , 8 )"		8200072	0					
ANR	8200400	Callee	memcpy		8200072	0					
ANR	8200401	Identifier	memcpy		8200072	0					
ANR	8200402	ArgumentList	plfont -> character_complement		8200072	1					
ANR	8200403	Argument	plfont -> character_complement		8200072	0					
ANR	8200404	PtrMemberAccess	plfont -> character_complement		8200072	0					
ANR	8200405	Identifier	plfont		8200072	0					
ANR	8200406	Identifier	character_complement		8200072	1					
ANR	8200407	Argument	sdata		8200072	1					
ANR	8200408	Identifier	sdata		8200072	0					
ANR	8200409	Argument	8		8200072	2					
ANR	8200410	PrimaryExpression	8		8200072	0					
ANR	8200411	ContinueStatement	continue ;	963:16:28634:28642	8200072	22	True				
ANR	8200412	Label	default :	964:12:28656:28663	8200072	23	True				
ANR	8200413	Identifier	default		8200072	0					
ANR	8200414	ExpressionStatement		965:16:28681:28681	8200072	24	True				
ANR	8200415	IfStatement	if ( fst == plfst_bitmap )		8200072	28					
ANR	8200416	Condition	fst == plfst_bitmap	968:12:28771:28789	8200072	0	True				
ANR	8200417	EqualityExpression	fst == plfst_bitmap		8200072	0		==			
ANR	8200418	Identifier	fst		8200072	0					
ANR	8200419	Identifier	plfst_bitmap		8200072	1					
ANR	8200420	SwitchStatement	switch ( seg_id )		8200072	1					
ANR	8200421	Condition	seg_id	969:20:28812:28817	8200072	0	True				
ANR	8200422	Identifier	seg_id		8200072	0					
ANR	8200423	CompoundStatement		56:28:2134:2134	8200072	1					
ANR	8200424	Statement	case	970:16:28838:28841	8200072	0	True				
ANR	8200425	Statement	id2	970:21:28843:28845	8200072	1	True				
ANR	8200426	Statement	(	970:24:28846:28846	8200072	2	True				
ANR	8200427	Statement	'B'	970:25:28847:28849	8200072	3	True				
ANR	8200428	Statement	","	970:28:28850:28850	8200072	4	True				
ANR	8200429	Statement	'R'	970:30:28852:28854	8200072	5	True				
ANR	8200430	Statement	)	970:33:28855:28855	8200072	6	True				
ANR	8200431	Statement	:	970:34:28856:28856	8200072	7	True				
ANR	8200432	IfStatement	if ( seg_size != 4 )		8200072	8					
ANR	8200433	Condition	seg_size != 4	971:24:28882:28894	8200072	0	True				
ANR	8200434	EqualityExpression	seg_size != 4		8200072	0		!=			
ANR	8200435	Identifier	seg_size		8200072	0					
ANR	8200436	PrimaryExpression	4		8200072	1					
ANR	8200437	ExpressionStatement	return_scan_error ( pfoe -> illegal_BR_segment )	972:24:28921:28964	8200072	1	True				
ANR	8200438	CallExpression	return_scan_error ( pfoe -> illegal_BR_segment )		8200072	0					
ANR	8200439	Callee	return_scan_error		8200072	0					
ANR	8200440	Identifier	return_scan_error		8200072	0					
ANR	8200441	ArgumentList	pfoe -> illegal_BR_segment		8200072	1					
ANR	8200442	Argument	pfoe -> illegal_BR_segment		8200072	0					
ANR	8200443	PtrMemberAccess	pfoe -> illegal_BR_segment		8200072	0					
ANR	8200444	Identifier	pfoe		8200072	0					
ANR	8200445	Identifier	illegal_BR_segment		8200072	1					
ANR	8200446	CompoundStatement		62:24:2384:2420	8200072	9					
ANR	8200447	IdentifierDeclStatement	uint xres = pl_get_uint16 ( sdata ) ;	974:24:29012:29044	8200072	0	True				
ANR	8200448	IdentifierDecl	xres = pl_get_uint16 ( sdata )		8200072	0					
ANR	8200449	IdentifierDeclType	uint		8200072	0					
ANR	8200450	Identifier	xres		8200072	1					
ANR	8200451	AssignmentExpression	xres = pl_get_uint16 ( sdata )		8200072	2		=			
ANR	8200452	Identifier	xres		8200072	0					
ANR	8200453	CallExpression	pl_get_uint16 ( sdata )		8200072	1					
ANR	8200454	Callee	pl_get_uint16		8200072	0					
ANR	8200455	Identifier	pl_get_uint16		8200072	0					
ANR	8200456	ArgumentList	sdata		8200072	1					
ANR	8200457	Argument	sdata		8200072	0					
ANR	8200458	Identifier	sdata		8200072	0					
ANR	8200459	IdentifierDeclStatement	uint yres = pl_get_uint16 ( sdata + 2 ) ;	975:24:29070:29106	8200072	1	True				
ANR	8200460	IdentifierDecl	yres = pl_get_uint16 ( sdata + 2 )		8200072	0					
ANR	8200461	IdentifierDeclType	uint		8200072	0					
ANR	8200462	Identifier	yres		8200072	1					
ANR	8200463	AssignmentExpression	yres = pl_get_uint16 ( sdata + 2 )		8200072	2		=			
ANR	8200464	Identifier	yres		8200072	0					
ANR	8200465	CallExpression	pl_get_uint16 ( sdata + 2 )		8200072	1					
ANR	8200466	Callee	pl_get_uint16		8200072	0					
ANR	8200467	Identifier	pl_get_uint16		8200072	0					
ANR	8200468	ArgumentList	sdata + 2		8200072	1					
ANR	8200469	Argument	sdata + 2		8200072	0					
ANR	8200470	AdditiveExpression	sdata + 2		8200072	0		+			
ANR	8200471	Identifier	sdata		8200072	0					
ANR	8200472	PrimaryExpression	2		8200072	1					
ANR	8200473	IfStatement	if ( xres == 0 || yres == 0 )		8200072	2					
ANR	8200474	Condition	xres == 0 || yres == 0	977:28:29137:29158	8200072	0	True				
ANR	8200475	OrExpression	xres == 0 || yres == 0		8200072	0		||			
ANR	8200476	EqualityExpression	xres == 0		8200072	0		==			
ANR	8200477	Identifier	xres		8200072	0					
ANR	8200478	PrimaryExpression	0		8200072	1					
ANR	8200479	EqualityExpression	yres == 0		8200072	1		==			
ANR	8200480	Identifier	yres		8200072	0					
ANR	8200481	PrimaryExpression	0		8200072	1					
ANR	8200482	ExpressionStatement	return_scan_error ( pfoe -> illegal_BR_segment )	978:28:29189:29232	8200072	1	True				
ANR	8200483	CallExpression	return_scan_error ( pfoe -> illegal_BR_segment )		8200072	0					
ANR	8200484	Callee	return_scan_error		8200072	0					
ANR	8200485	Identifier	return_scan_error		8200072	0					
ANR	8200486	ArgumentList	pfoe -> illegal_BR_segment		8200072	1					
ANR	8200487	Argument	pfoe -> illegal_BR_segment		8200072	0					
ANR	8200488	PtrMemberAccess	pfoe -> illegal_BR_segment		8200072	0					
ANR	8200489	Identifier	pfoe		8200072	0					
ANR	8200490	Identifier	illegal_BR_segment		8200072	1					
ANR	8200491	ExpressionStatement	plfont -> resolution . x = xres	979:24:29258:29285	8200072	3	True				
ANR	8200492	AssignmentExpression	plfont -> resolution . x = xres		8200072	0		=			
ANR	8200493	MemberAccess	plfont -> resolution . x		8200072	0					
ANR	8200494	PtrMemberAccess	plfont -> resolution		8200072	0					
ANR	8200495	Identifier	plfont		8200072	0					
ANR	8200496	Identifier	resolution		8200072	1					
ANR	8200497	Identifier	x		8200072	1					
ANR	8200498	Identifier	xres		8200072	1					
ANR	8200499	ExpressionStatement	plfont -> resolution . y = yres	980:24:29311:29338	8200072	4	True				
ANR	8200500	AssignmentExpression	plfont -> resolution . y = yres		8200072	0		=			
ANR	8200501	MemberAccess	plfont -> resolution . y		8200072	0					
ANR	8200502	PtrMemberAccess	plfont -> resolution		8200072	0					
ANR	8200503	Identifier	plfont		8200072	0					
ANR	8200504	Identifier	resolution		8200072	1					
ANR	8200505	Identifier	y		8200072	1					
ANR	8200506	Identifier	yres		8200072	1					
ANR	8200507	ExpressionStatement	found = true	982:20:29382:29394	8200072	10	True				
ANR	8200508	AssignmentExpression	found = true		8200072	0		=			
ANR	8200509	Identifier	found		8200072	0					
ANR	8200510	Identifier	true		8200072	1					
ANR	8200511	BreakStatement	break ;	983:20:29416:29421	8200072	11	True				
ANR	8200512	Label	default :	984:16:29439:29446	8200072	12	True				
ANR	8200513	Identifier	default		8200072	0					
ANR	8200514	IfStatement	if ( pfoe -> illegal_font_segment < 0 )		8200072	13					
ANR	8200515	Condition	pfoe -> illegal_font_segment < 0	985:24:29472:29501	8200072	0	True				
ANR	8200516	RelationalExpression	pfoe -> illegal_font_segment < 0		8200072	0		<			
ANR	8200517	PtrMemberAccess	pfoe -> illegal_font_segment		8200072	0					
ANR	8200518	Identifier	pfoe		8200072	0					
ANR	8200519	Identifier	illegal_font_segment		8200072	1					
ANR	8200520	PrimaryExpression	0		8200072	1					
ANR	8200521	ExpressionStatement	return_error ( pfoe -> illegal_font_segment )	986:24:29528:29568	8200072	1	True				
ANR	8200522	CallExpression	return_error ( pfoe -> illegal_font_segment )		8200072	0					
ANR	8200523	Callee	return_error		8200072	0					
ANR	8200524	Identifier	return_error		8200072	0					
ANR	8200525	ArgumentList	pfoe -> illegal_font_segment		8200072	1					
ANR	8200526	Argument	pfoe -> illegal_font_segment		8200072	0					
ANR	8200527	PtrMemberAccess	pfoe -> illegal_font_segment		8200072	0					
ANR	8200528	Identifier	pfoe		8200072	0					
ANR	8200529	Identifier	illegal_font_segment		8200072	1					
ANR	8200530	ElseStatement	else		8200072	0					
ANR	8200531	SwitchStatement	switch ( seg_id )		8200072	0					
ANR	8200532	Condition	seg_id	988:20:29650:29655	8200072	0	True				
ANR	8200533	Identifier	seg_id		8200072	0					
ANR	8200534	CompoundStatement		75:28:2972:2972	8200072	1					
ANR	8200535	Statement	case	989:16:29676:29679	8200072	0	True				
ANR	8200536	Statement	id2	989:21:29681:29683	8200072	1	True				
ANR	8200537	Statement	(	989:24:29684:29684	8200072	2	True				
ANR	8200538	Statement	'G'	989:25:29685:29687	8200072	3	True				
ANR	8200539	Statement	","	989:28:29688:29688	8200072	4	True				
ANR	8200540	Statement	'T'	989:30:29690:29692	8200072	5	True				
ANR	8200541	Statement	)	989:33:29693:29693	8200072	6	True				
ANR	8200542	Statement	:	989:34:29694:29694	8200072	7	True				
ANR	8200543	IfStatement	if ( seg_size < 12 + 5 * 16 || u16 ( sdata + 4 ) < 3 )		8200072	8					
ANR	8200544	Condition	seg_size < 12 + 5 * 16 || u16 ( sdata + 4 ) < 3	996:24:30047:30184	8200072	0	True				
ANR	8200545	OrExpression	seg_size < 12 + 5 * 16 || u16 ( sdata + 4 ) < 3		8200072	0		||			
ANR	8200546	RelationalExpression	seg_size < 12 + 5 * 16		8200072	0		<			
ANR	8200547	Identifier	seg_size		8200072	0					
ANR	8200548	AdditiveExpression	12 + 5 * 16		8200072	1		+			
ANR	8200549	PrimaryExpression	12		8200072	0					
ANR	8200550	MultiplicativeExpression	5 * 16		8200072	1		*			
ANR	8200551	PrimaryExpression	5		8200072	0					
ANR	8200552	PrimaryExpression	16		8200072	1					
ANR	8200553	RelationalExpression	u16 ( sdata + 4 ) < 3		8200072	1		<			
ANR	8200554	CallExpression	u16 ( sdata + 4 )		8200072	0					
ANR	8200555	Callee	u16		8200072	0					
ANR	8200556	Identifier	u16		8200072	0					
ANR	8200557	ArgumentList	sdata + 4		8200072	1					
ANR	8200558	Argument	sdata + 4		8200072	0					
ANR	8200559	AdditiveExpression	sdata + 4		8200072	0		+			
ANR	8200560	Identifier	sdata		8200072	0					
ANR	8200561	PrimaryExpression	4		8200072	1					
ANR	8200562	PrimaryExpression	3		8200072	1					
ANR	8200563	ExpressionStatement	return_scan_error ( pfoe -> illegal_GT_segment )	999:24:30211:30254	8200072	1	True				
ANR	8200564	CallExpression	return_scan_error ( pfoe -> illegal_GT_segment )		8200072	0					
ANR	8200565	Callee	return_scan_error		8200072	0					
ANR	8200566	Identifier	return_scan_error		8200072	0					
ANR	8200567	ArgumentList	pfoe -> illegal_GT_segment		8200072	1					
ANR	8200568	Argument	pfoe -> illegal_GT_segment		8200072	0					
ANR	8200569	PtrMemberAccess	pfoe -> illegal_GT_segment		8200072	0					
ANR	8200570	Identifier	pfoe		8200072	0					
ANR	8200571	Identifier	illegal_GT_segment		8200072	1					
ANR	8200572	ExpressionStatement	plfont -> offsets . GT = segment - header	1000:20:30276:30313	8200072	9	True				
ANR	8200573	AssignmentExpression	plfont -> offsets . GT = segment - header		8200072	0		=			
ANR	8200574	MemberAccess	plfont -> offsets . GT		8200072	0					
ANR	8200575	PtrMemberAccess	plfont -> offsets		8200072	0					
ANR	8200576	Identifier	plfont		8200072	0					
ANR	8200577	Identifier	offsets		8200072	1					
ANR	8200578	Identifier	GT		8200072	1					
ANR	8200579	AdditiveExpression	segment - header		8200072	1		-			
ANR	8200580	Identifier	segment		8200072	0					
ANR	8200581	Identifier	header		8200072	1					
ANR	8200582	ExpressionStatement	found = true	1001:20:30335:30347	8200072	10	True				
ANR	8200583	AssignmentExpression	found = true		8200072	0		=			
ANR	8200584	Identifier	found		8200072	0					
ANR	8200585	Identifier	true		8200072	1					
ANR	8200586	BreakStatement	break ;	1002:20:30369:30374	8200072	11	True				
ANR	8200587	Statement	case	1003:16:30392:30395	8200072	12	True				
ANR	8200588	Statement	id2	1003:21:30397:30399	8200072	13	True				
ANR	8200589	Statement	(	1003:24:30400:30400	8200072	14	True				
ANR	8200590	Statement	'G'	1003:25:30401:30403	8200072	15	True				
ANR	8200591	Statement	","	1003:28:30404:30404	8200072	16	True				
ANR	8200592	Statement	'C'	1003:30:30406:30408	8200072	17	True				
ANR	8200593	Statement	)	1003:33:30409:30409	8200072	18	True				
ANR	8200594	Statement	:	1003:34:30410:30410	8200072	19	True				
ANR	8200595	IfStatement	if ( seg_size < 6 || u16 ( sdata ) != 0 || seg_size != u16 ( sdata + 4 ) * 6 + 6 )		8200072	20					
ANR	8200596	Condition	seg_size < 6 || u16 ( sdata ) != 0 || seg_size != u16 ( sdata + 4 ) * 6 + 6	1004:24:30436:30528	8200072	0	True				
ANR	8200597	OrExpression	seg_size < 6 || u16 ( sdata ) != 0 || seg_size != u16 ( sdata + 4 ) * 6 + 6		8200072	0		||			
ANR	8200598	RelationalExpression	seg_size < 6		8200072	0		<			
ANR	8200599	Identifier	seg_size		8200072	0					
ANR	8200600	PrimaryExpression	6		8200072	1					
ANR	8200601	OrExpression	u16 ( sdata ) != 0 || seg_size != u16 ( sdata + 4 ) * 6 + 6		8200072	1		||			
ANR	8200602	EqualityExpression	u16 ( sdata ) != 0		8200072	0		!=			
ANR	8200603	CallExpression	u16 ( sdata )		8200072	0					
ANR	8200604	Callee	u16		8200072	0					
ANR	8200605	Identifier	u16		8200072	0					
ANR	8200606	ArgumentList	sdata		8200072	1					
ANR	8200607	Argument	sdata		8200072	0					
ANR	8200608	Identifier	sdata		8200072	0					
ANR	8200609	PrimaryExpression	0		8200072	1					
ANR	8200610	EqualityExpression	seg_size != u16 ( sdata + 4 ) * 6 + 6		8200072	1		!=			
ANR	8200611	Identifier	seg_size		8200072	0					
ANR	8200612	AdditiveExpression	u16 ( sdata + 4 ) * 6 + 6		8200072	1		+			
ANR	8200613	MultiplicativeExpression	u16 ( sdata + 4 ) * 6		8200072	0		*			
ANR	8200614	CallExpression	u16 ( sdata + 4 )		8200072	0					
ANR	8200615	Callee	u16		8200072	0					
ANR	8200616	Identifier	u16		8200072	0					
ANR	8200617	ArgumentList	sdata + 4		8200072	1					
ANR	8200618	Argument	sdata + 4		8200072	0					
ANR	8200619	AdditiveExpression	sdata + 4		8200072	0		+			
ANR	8200620	Identifier	sdata		8200072	0					
ANR	8200621	PrimaryExpression	4		8200072	1					
ANR	8200622	PrimaryExpression	6		8200072	1					
ANR	8200623	PrimaryExpression	6		8200072	1					
ANR	8200624	ExpressionStatement	return_scan_error ( pfoe -> illegal_GC_segment )	1006:24:30555:30598	8200072	1	True				
ANR	8200625	CallExpression	return_scan_error ( pfoe -> illegal_GC_segment )		8200072	0					
ANR	8200626	Callee	return_scan_error		8200072	0					
ANR	8200627	Identifier	return_scan_error		8200072	0					
ANR	8200628	ArgumentList	pfoe -> illegal_GC_segment		8200072	1					
ANR	8200629	Argument	pfoe -> illegal_GC_segment		8200072	0					
ANR	8200630	PtrMemberAccess	pfoe -> illegal_GC_segment		8200072	0					
ANR	8200631	Identifier	pfoe		8200072	0					
ANR	8200632	Identifier	illegal_GC_segment		8200072	1					
ANR	8200633	ExpressionStatement	plfont -> offsets . GC = segment - header	1007:20:30620:30657	8200072	21	True				
ANR	8200634	AssignmentExpression	plfont -> offsets . GC = segment - header		8200072	0		=			
ANR	8200635	MemberAccess	plfont -> offsets . GC		8200072	0					
ANR	8200636	PtrMemberAccess	plfont -> offsets		8200072	0					
ANR	8200637	Identifier	plfont		8200072	0					
ANR	8200638	Identifier	offsets		8200072	1					
ANR	8200639	Identifier	GC		8200072	1					
ANR	8200640	AdditiveExpression	segment - header		8200072	1		-			
ANR	8200641	Identifier	segment		8200072	0					
ANR	8200642	Identifier	header		8200072	1					
ANR	8200643	BreakStatement	break ;	1008:20:30679:30684	8200072	22	True				
ANR	8200644	Statement	case	1009:16:30702:30705	8200072	23	True				
ANR	8200645	Statement	id2	1009:21:30707:30709	8200072	24	True				
ANR	8200646	Statement	(	1009:24:30710:30710	8200072	25	True				
ANR	8200647	Statement	'V'	1009:25:30711:30713	8200072	26	True				
ANR	8200648	Statement	","	1009:28:30714:30714	8200072	27	True				
ANR	8200649	Statement	'T'	1009:30:30716:30718	8200072	28	True				
ANR	8200650	Statement	)	1009:33:30719:30719	8200072	29	True				
ANR	8200651	Statement	:	1009:34:30720:30720	8200072	30	True				
ANR	8200652	IfStatement	if ( ( seg_size & 3 ) != 0 || seg_size < 4 || u16 ( sdata + seg_size - 4 ) != 0xffff )		8200072	31					
ANR	8200653	Condition	( seg_size & 3 ) != 0 || seg_size < 4 || u16 ( sdata + seg_size - 4 ) != 0xffff	1011:24:30800:30897	8200072	0	True				
ANR	8200654	OrExpression	( seg_size & 3 ) != 0 || seg_size < 4 || u16 ( sdata + seg_size - 4 ) != 0xffff		8200072	0		||			
ANR	8200655	EqualityExpression	( seg_size & 3 ) != 0		8200072	0		!=			
ANR	8200656	BitAndExpression	seg_size & 3		8200072	0		&			
ANR	8200657	Identifier	seg_size		8200072	0					
ANR	8200658	PrimaryExpression	3		8200072	1					
ANR	8200659	PrimaryExpression	0		8200072	1					
ANR	8200660	OrExpression	seg_size < 4 || u16 ( sdata + seg_size - 4 ) != 0xffff		8200072	1		||			
ANR	8200661	RelationalExpression	seg_size < 4		8200072	0		<			
ANR	8200662	Identifier	seg_size		8200072	0					
ANR	8200663	PrimaryExpression	4		8200072	1					
ANR	8200664	EqualityExpression	u16 ( sdata + seg_size - 4 ) != 0xffff		8200072	1		!=			
ANR	8200665	CallExpression	u16 ( sdata + seg_size - 4 )		8200072	0					
ANR	8200666	Callee	u16		8200072	0					
ANR	8200667	Identifier	u16		8200072	0					
ANR	8200668	ArgumentList	sdata + seg_size - 4		8200072	1					
ANR	8200669	Argument	sdata + seg_size - 4		8200072	0					
ANR	8200670	AdditiveExpression	sdata + seg_size - 4		8200072	0		+			
ANR	8200671	Identifier	sdata		8200072	0					
ANR	8200672	AdditiveExpression	seg_size - 4		8200072	1		-			
ANR	8200673	Identifier	seg_size		8200072	0					
ANR	8200674	PrimaryExpression	4		8200072	1					
ANR	8200675	PrimaryExpression	0xffff		8200072	1					
ANR	8200676	ExpressionStatement	return_scan_error ( pfoe -> illegal_VT_segment )	1013:24:30924:30967	8200072	1	True				
ANR	8200677	CallExpression	return_scan_error ( pfoe -> illegal_VT_segment )		8200072	0					
ANR	8200678	Callee	return_scan_error		8200072	0					
ANR	8200679	Identifier	return_scan_error		8200072	0					
ANR	8200680	ArgumentList	pfoe -> illegal_VT_segment		8200072	1					
ANR	8200681	Argument	pfoe -> illegal_VT_segment		8200072	0					
ANR	8200682	PtrMemberAccess	pfoe -> illegal_VT_segment		8200072	0					
ANR	8200683	Identifier	pfoe		8200072	0					
ANR	8200684	Identifier	illegal_VT_segment		8200072	1					
ANR	8200685	CompoundStatement		103:24:4401:4407	8200072	32					
ANR	8200686	IdentifierDeclStatement	uint i ;	1016:24:31087:31093	8200072	0	True				
ANR	8200687	IdentifierDecl	i		8200072	0					
ANR	8200688	IdentifierDeclType	uint		8200072	0					
ANR	8200689	Identifier	i		8200072	1					
ANR	8200690	ForStatement	for ( i = 0 ; i < seg_size - 4 ; i += 4 )		8200072	1					
ANR	8200691	ForInit	i = 0 ;	1018:29:31125:31130	8200072	0	True				
ANR	8200692	AssignmentExpression	i = 0		8200072	0		=			
ANR	8200693	Identifier	i		8200072	0					
ANR	8200694	PrimaryExpression	0		8200072	1					
ANR	8200695	Condition	i < seg_size - 4	1018:36:31132:31147	8200072	1	True				
ANR	8200696	RelationalExpression	i < seg_size - 4		8200072	0		<			
ANR	8200697	Identifier	i		8200072	0					
ANR	8200698	AdditiveExpression	seg_size - 4		8200072	1		-			
ANR	8200699	Identifier	seg_size		8200072	0					
ANR	8200700	PrimaryExpression	4		8200072	1					
ANR	8200701	AssignmentExpression	i += 4	1018:54:31150:31155	8200072	2	True	+=			
ANR	8200702	Identifier	i		8200072	0					
ANR	8200703	PrimaryExpression	4		8200072	1					
ANR	8200704	IfStatement	if ( u16 ( sdata + i ) > u16 ( sdata + i + 4 ) )		8200072	3					
ANR	8200705	Condition	u16 ( sdata + i ) > u16 ( sdata + i + 4 )	1019:32:31190:31224	8200072	0	True				
ANR	8200706	RelationalExpression	u16 ( sdata + i ) > u16 ( sdata + i + 4 )		8200072	0		>			
ANR	8200707	CallExpression	u16 ( sdata + i )		8200072	0					
ANR	8200708	Callee	u16		8200072	0					
ANR	8200709	Identifier	u16		8200072	0					
ANR	8200710	ArgumentList	sdata + i		8200072	1					
ANR	8200711	Argument	sdata + i		8200072	0					
ANR	8200712	AdditiveExpression	sdata + i		8200072	0		+			
ANR	8200713	Identifier	sdata		8200072	0					
ANR	8200714	Identifier	i		8200072	1					
ANR	8200715	CallExpression	u16 ( sdata + i + 4 )		8200072	1					
ANR	8200716	Callee	u16		8200072	0					
ANR	8200717	Identifier	u16		8200072	0					
ANR	8200718	ArgumentList	sdata + i + 4		8200072	1					
ANR	8200719	Argument	sdata + i + 4		8200072	0					
ANR	8200720	AdditiveExpression	sdata + i + 4		8200072	0		+			
ANR	8200721	Identifier	sdata		8200072	0					
ANR	8200722	AdditiveExpression	i + 4		8200072	1		+			
ANR	8200723	Identifier	i		8200072	0					
ANR	8200724	PrimaryExpression	4		8200072	1					
ANR	8200725	ExpressionStatement	return_scan_error ( pfoe -> illegal_VT_segment )	1020:32:31259:31302	8200072	1	True				
ANR	8200726	CallExpression	return_scan_error ( pfoe -> illegal_VT_segment )		8200072	0					
ANR	8200727	Callee	return_scan_error		8200072	0					
ANR	8200728	Identifier	return_scan_error		8200072	0					
ANR	8200729	ArgumentList	pfoe -> illegal_VT_segment		8200072	1					
ANR	8200730	Argument	pfoe -> illegal_VT_segment		8200072	0					
ANR	8200731	PtrMemberAccess	pfoe -> illegal_VT_segment		8200072	0					
ANR	8200732	Identifier	pfoe		8200072	0					
ANR	8200733	Identifier	illegal_VT_segment		8200072	1					
ANR	8200734	ExpressionStatement	plfont -> offsets . VT = segment - header	1022:20:31346:31383	8200072	33	True				
ANR	8200735	AssignmentExpression	plfont -> offsets . VT = segment - header		8200072	0		=			
ANR	8200736	MemberAccess	plfont -> offsets . VT		8200072	0					
ANR	8200737	PtrMemberAccess	plfont -> offsets		8200072	0					
ANR	8200738	Identifier	plfont		8200072	0					
ANR	8200739	Identifier	offsets		8200072	1					
ANR	8200740	Identifier	VT		8200072	1					
ANR	8200741	AdditiveExpression	segment - header		8200072	1		-			
ANR	8200742	Identifier	segment		8200072	0					
ANR	8200743	Identifier	header		8200072	1					
ANR	8200744	BreakStatement	break ;	1023:20:31405:31410	8200072	34	True				
ANR	8200745	Statement	case	1024:16:31428:31431	8200072	35	True				
ANR	8200746	Statement	id2	1024:21:31433:31435	8200072	36	True				
ANR	8200747	Statement	(	1024:24:31436:31436	8200072	37	True				
ANR	8200748	Statement	'V'	1024:25:31437:31439	8200072	38	True				
ANR	8200749	Statement	","	1024:28:31440:31440	8200072	39	True				
ANR	8200750	Statement	'E'	1024:30:31442:31444	8200072	40	True				
ANR	8200751	Statement	)	1024:33:31445:31445	8200072	41	True				
ANR	8200752	Statement	:	1024:34:31446:31446	8200072	42	True				
ANR	8200753	BreakStatement	break ;	1025:20:31494:31499	8200072	43	True				
ANR	8200754	Statement	case	1026:16:31517:31520	8200072	44	True				
ANR	8200755	Statement	id2	1026:21:31522:31524	8200072	45	True				
ANR	8200756	Statement	(	1026:24:31525:31525	8200072	46	True				
ANR	8200757	Statement	'V'	1026:25:31526:31528	8200072	47	True				
ANR	8200758	Statement	","	1026:28:31529:31529	8200072	48	True				
ANR	8200759	Statement	'R'	1026:30:31531:31533	8200072	49	True				
ANR	8200760	Statement	)	1026:33:31534:31534	8200072	50	True				
ANR	8200761	Statement	:	1026:34:31535:31535	8200072	51	True				
ANR	8200762	BreakStatement	break ;	1027:20:31583:31588	8200072	52	True				
ANR	8200763	Statement	case	1028:16:31606:31609	8200072	53	True				
ANR	8200764	Statement	id2	1028:21:31611:31613	8200072	54	True				
ANR	8200765	Statement	(	1028:24:31614:31614	8200072	55	True				
ANR	8200766	Statement	'C'	1028:25:31615:31617	8200072	56	True				
ANR	8200767	Statement	","	1028:28:31618:31618	8200072	57	True				
ANR	8200768	Statement	'E'	1028:30:31620:31622	8200072	58	True				
ANR	8200769	Statement	)	1028:33:31623:31623	8200072	59	True				
ANR	8200770	Statement	:	1028:34:31624:31624	8200072	60	True				
ANR	8200771	BreakStatement	break ;	1029:20:31672:31677	8200072	61	True				
ANR	8200772	Label	default :	1030:16:31695:31702	8200072	62	True				
ANR	8200773	Identifier	default		8200072	0					
ANR	8200774	IfStatement	if ( pfoe -> illegal_font_segment < 0 )		8200072	63					
ANR	8200775	Condition	pfoe -> illegal_font_segment < 0	1031:24:31728:31757	8200072	0	True				
ANR	8200776	RelationalExpression	pfoe -> illegal_font_segment < 0		8200072	0		<			
ANR	8200777	PtrMemberAccess	pfoe -> illegal_font_segment		8200072	0					
ANR	8200778	Identifier	pfoe		8200072	0					
ANR	8200779	Identifier	illegal_font_segment		8200072	1					
ANR	8200780	PrimaryExpression	0		8200072	1					
ANR	8200781	ExpressionStatement	return_error ( pfoe -> illegal_font_segment )	1032:24:31784:31824	8200072	1	True				
ANR	8200782	CallExpression	return_error ( pfoe -> illegal_font_segment )		8200072	0					
ANR	8200783	Callee	return_error		8200072	0					
ANR	8200784	Identifier	return_error		8200072	0					
ANR	8200785	ArgumentList	pfoe -> illegal_font_segment		8200072	1					
ANR	8200786	Argument	pfoe -> illegal_font_segment		8200072	0					
ANR	8200787	PtrMemberAccess	pfoe -> illegal_font_segment		8200072	0					
ANR	8200788	Identifier	pfoe		8200072	0					
ANR	8200789	Identifier	illegal_font_segment		8200072	1					
ANR	8200790	Statement	undef	1034:1:31841:31845	8200072	29	True				
ANR	8200791	Statement	id2	1034:7:31847:31849	8200072	30	True				
ANR	8200792	IfStatement	if ( ! found )		8200072	17					
ANR	8200793	Condition	! found	1036:8:31865:31870	8200072	0	True				
ANR	8200794	UnaryOperationExpression	! found		8200072	0					
ANR	8200795	UnaryOperator	!		8200072	0					
ANR	8200796	Identifier	found		8200072	1					
ANR	8200797	ExpressionStatement	return_scan_error ( pfoe -> missing_required_segment )	1037:8:31881:31930	8200072	1	True				
ANR	8200798	CallExpression	return_scan_error ( pfoe -> missing_required_segment )		8200072	0					
ANR	8200799	Callee	return_scan_error		8200072	0					
ANR	8200800	Identifier	return_scan_error		8200072	0					
ANR	8200801	ArgumentList	pfoe -> missing_required_segment		8200072	1					
ANR	8200802	Argument	pfoe -> missing_required_segment		8200072	0					
ANR	8200803	PtrMemberAccess	pfoe -> missing_required_segment		8200072	0					
ANR	8200804	Identifier	pfoe		8200072	0					
ANR	8200805	Identifier	missing_required_segment		8200072	1					
ANR	8200806	IfStatement	if ( segment != end )		8200072	18					
ANR	8200807	Condition	segment != end	1038:8:31940:31953	8200072	0	True				
ANR	8200808	EqualityExpression	segment != end		8200072	0		!=			
ANR	8200809	Identifier	segment		8200072	0					
ANR	8200810	Identifier	end		8200072	1					
ANR	8200811	ExpressionStatement	return_error ( illegal_font_data )	1039:8:31964:31995	8200072	1	True				
ANR	8200812	CallExpression	return_error ( illegal_font_data )		8200072	0					
ANR	8200813	Callee	return_error		8200072	0					
ANR	8200814	Identifier	return_error		8200072	0					
ANR	8200815	ArgumentList	illegal_font_data		8200072	1					
ANR	8200816	Argument	illegal_font_data		8200072	0					
ANR	8200817	Identifier	illegal_font_data		8200072	0					
ANR	8200818	ExpressionStatement	plfont -> large_sizes = large_sizes	1040:4:32001:32034	8200072	19	True				
ANR	8200819	AssignmentExpression	plfont -> large_sizes = large_sizes		8200072	0		=			
ANR	8200820	PtrMemberAccess	plfont -> large_sizes		8200072	0					
ANR	8200821	Identifier	plfont		8200072	0					
ANR	8200822	Identifier	large_sizes		8200072	1					
ANR	8200823	Identifier	large_sizes		8200072	1					
ANR	8200824	ExpressionStatement	plfont -> scaling_technology = fst	1041:4:32040:32072	8200072	20	True				
ANR	8200825	AssignmentExpression	plfont -> scaling_technology = fst		8200072	0		=			
ANR	8200826	PtrMemberAccess	plfont -> scaling_technology		8200072	0					
ANR	8200827	Identifier	plfont		8200072	0					
ANR	8200828	Identifier	scaling_technology		8200072	1					
ANR	8200829	Identifier	fst		8200072	1					
ANR	8200830	ReturnStatement	return 0 ;	1042:4:32078:32086	8200072	21	True				
ANR	8200831	PrimaryExpression	0		8200072	0					
ANR	8200832	Statement	undef	1043:1:32089:32093	8200072	22	True				
ANR	8200833	Statement	return_scan_error	1043:7:32095:32111	8200072	23	True				
ANR	8200834	ReturnType	int		8200072	1					
ANR	8200835	Identifier	pl_font_scan_segments		8200072	2					
ANR	8200836	ParameterList	"const gs_memory_t * mem , pl_font_t * plfont , int fst_offset , int start_offset , long end_offset , bool large_sizes , const pl_font_offset_errors_t * pfoe"		8200072	3					
ANR	8200837	Parameter	const gs_memory_t * mem	910:22:26467:26489	8200072	0	True				
ANR	8200838	ParameterType	const gs_memory_t *		8200072	0					
ANR	8200839	Identifier	mem		8200072	1					
ANR	8200840	Parameter	pl_font_t * plfont	911:22:26514:26531	8200072	1	True				
ANR	8200841	ParameterType	pl_font_t *		8200072	0					
ANR	8200842	Identifier	plfont		8200072	1					
ANR	8200843	Parameter	int fst_offset	911:42:26534:26547	8200072	2	True				
ANR	8200844	ParameterType	int		8200072	0					
ANR	8200845	Identifier	fst_offset		8200072	1					
ANR	8200846	Parameter	int start_offset	911:58:26550:26565	8200072	3	True				
ANR	8200847	ParameterType	int		8200072	0					
ANR	8200848	Identifier	start_offset		8200072	1					
ANR	8200849	Parameter	long end_offset	912:22:26590:26604	8200072	4	True				
ANR	8200850	ParameterType	long		8200072	0					
ANR	8200851	Identifier	end_offset		8200072	1					
ANR	8200852	Parameter	bool large_sizes	912:39:26607:26622	8200072	5	True				
ANR	8200853	ParameterType	bool		8200072	0					
ANR	8200854	Identifier	large_sizes		8200072	1					
ANR	8200855	Parameter	const pl_font_offset_errors_t * pfoe	913:22:26647:26682	8200072	6	True				
ANR	8200856	ParameterType	const pl_font_offset_errors_t *		8200072	0					
ANR	8200857	Identifier	pfoe		8200072	1					
ANR	8200858	CFGEntryNode	ENTRY		8200072		True				
ANR	8200859	CFGExitNode	EXIT		8200072		True				
ANR	8200860	Symbol	plfont -> scaling_technology		8200072						
ANR	8200861	Symbol	plfont -> header		8200072						
ANR	8200862	Symbol	end_offset		8200072						
ANR	8200863	Symbol	plfont		8200072						
ANR	8200864	Symbol	plfont -> large_sizes		8200072						
ANR	8200865	Symbol	pfoe -> illegal_font_header_fields		8200072						
ANR	8200866	Symbol	xres		8200072						
ANR	8200867	Symbol	null_segment		8200072						
ANR	8200868	Symbol	memcmp		8200072						
ANR	8200869	Symbol	u32		8200072						
ANR	8200870	Symbol	segment		8200072						
ANR	8200871	Symbol	seg_size		8200072						
ANR	8200872	Symbol	sdata		8200072						
ANR	8200873	Symbol	* pfoe		8200072						
ANR	8200874	Symbol	pfoe -> illegal_font_segment		8200072						
ANR	8200875	Symbol	plfont -> character_complement		8200072						
ANR	8200876	Symbol	illegal_font_data		8200072						
ANR	8200877	Symbol	pfoe -> illegal_BR_segment		8200072						
ANR	8200878	Symbol	* fst_offset		8200072						
ANR	8200879	Symbol	* header		8200072						
ANR	8200880	Symbol	plfont -> resolution . x		8200072						
ANR	8200881	Symbol	plfont -> resolution . y		8200072						
ANR	8200882	Symbol	true		8200072						
ANR	8200883	Symbol	header		8200072						
ANR	8200884	Symbol	seg_id		8200072						
ANR	8200885	Symbol	pfoe -> illegal_GT_segment		8200072						
ANR	8200886	Symbol	wsize		8200072						
ANR	8200887	Symbol	fst_offset		8200072						
ANR	8200888	Symbol	yres		8200072						
ANR	8200889	Symbol	pfoe -> illegal_GC_segment		8200072						
ANR	8200890	Symbol	fst		8200072						
ANR	8200891	Symbol	plfst_bitmap		8200072						
ANR	8200892	Symbol	found		8200072						
ANR	8200893	Symbol	pfoe -> missing_required_segment		8200072						
ANR	8200894	Symbol	mem		8200072						
ANR	8200895	Symbol	large_sizes		8200072						
ANR	8200896	Symbol	end		8200072						
ANR	8200897	Symbol	u16		8200072						
ANR	8200898	Symbol	pfoe -> illegal_VT_segment		8200072						
ANR	8200899	Symbol	plfont -> offsets . VT		8200072						
ANR	8200900	Symbol	pfoe -> illegal_null_segment_size		8200072						
ANR	8200901	Symbol	pl_get_uint16		8200072						
ANR	8200902	Symbol	err		8200072						
ANR	8200903	Symbol	pfoe -> illegal_font_data		8200072						
ANR	8200904	Symbol	false		8200072						
ANR	8200905	Symbol	plfont -> resolution		8200072						
ANR	8200906	Symbol	i		8200072						
ANR	8200907	Symbol	plfont -> offsets		8200072						
ANR	8200908	Symbol	plfont -> offsets . GT		8200072						
ANR	8200909	Symbol	pfoe		8200072						
ANR	8200910	Symbol	* plfont		8200072						
ANR	8200911	Symbol	start_offset		8200072						
ANR	8200912	Symbol	plfont -> offsets . GC		8200072						
ANR	8200913	Function	pl_free_tt_fontfile_buffer	1046:0:32116:32268							
ANR	8200914	FunctionDef	"pl_free_tt_fontfile_buffer (gs_memory_t * mem , byte * ptt_font_data)"		8200913	0					
ANR	8200915	CompoundStatement		1048:0:32188:32268	8200913	0					
ANR	8200916	ExpressionStatement	"gs_free_object ( mem , ptt_font_data , ""pl_tt_load_font data"" )"	1049:4:32194:32252	8200913	0	True				
ANR	8200917	CallExpression	"gs_free_object ( mem , ptt_font_data , ""pl_tt_load_font data"" )"		8200913	0					
ANR	8200918	Callee	gs_free_object		8200913	0					
ANR	8200919	Identifier	gs_free_object		8200913	0					
ANR	8200920	ArgumentList	mem		8200913	1					
ANR	8200921	Argument	mem		8200913	0					
ANR	8200922	Identifier	mem		8200913	0					
ANR	8200923	Argument	ptt_font_data		8200913	1					
ANR	8200924	Identifier	ptt_font_data		8200913	0					
ANR	8200925	Argument	"""pl_tt_load_font data"""		8200913	2					
ANR	8200926	PrimaryExpression	"""pl_tt_load_font data"""		8200913	0					
ANR	8200927	ReturnStatement	return 0 ;	1050:4:32258:32266	8200913	1	True				
ANR	8200928	PrimaryExpression	0		8200913	0					
ANR	8200929	ReturnType	int		8200913	1					
ANR	8200930	Identifier	pl_free_tt_fontfile_buffer		8200913	2					
ANR	8200931	ParameterList	"gs_memory_t * mem , byte * ptt_font_data"		8200913	3					
ANR	8200932	Parameter	gs_memory_t * mem	1047:27:32147:32163	8200913	0	True				
ANR	8200933	ParameterType	gs_memory_t *		8200913	0					
ANR	8200934	Identifier	mem		8200913	1					
ANR	8200935	Parameter	byte * ptt_font_data	1047:46:32166:32185	8200913	1	True				
ANR	8200936	ParameterType	byte *		8200913	0					
ANR	8200937	Identifier	ptt_font_data		8200913	1					
ANR	8200938	CFGEntryNode	ENTRY		8200913		True				
ANR	8200939	CFGExitNode	EXIT		8200913		True				
ANR	8200940	Symbol	mem		8200913						
ANR	8200941	Symbol	ptt_font_data		8200913						
ANR	8200942	Function	pl_alloc_tt_fontfile_buffer	1053:0:32271:33077							
ANR	8200943	FunctionDef	"pl_alloc_tt_fontfile_buffer (stream * in , gs_memory_t * mem , byte * * pptt_font_data , ulong * size)"		8200942	0					
ANR	8200944	CompoundStatement		1056:0:32401:33077	8200942	0					
ANR	8200945	IdentifierDeclStatement	"ulong len = ( sfseek ( in , 0L , SEEK_END ) , sftell ( in ) ) ;"	1057:4:32407:32457	8200942	0	True				
ANR	8200946	IdentifierDecl	"len = ( sfseek ( in , 0L , SEEK_END ) , sftell ( in ) )"		8200942	0					
ANR	8200947	IdentifierDeclType	ulong		8200942	0					
ANR	8200948	Identifier	len		8200942	1					
ANR	8200949	AssignmentExpression	"len = ( sfseek ( in , 0L , SEEK_END ) , sftell ( in ) )"		8200942	2		=			
ANR	8200950	Identifier	len		8200942	0					
ANR	8200951	Expression	"sfseek ( in , 0L , SEEK_END ) , sftell ( in )"		8200942	1					
ANR	8200952	CallExpression	"sfseek ( in , 0L , SEEK_END )"		8200942	0					
ANR	8200953	Callee	sfseek		8200942	0					
ANR	8200954	Identifier	sfseek		8200942	0					
ANR	8200955	ArgumentList	in		8200942	1					
ANR	8200956	Argument	in		8200942	0					
ANR	8200957	Identifier	in		8200942	0					
ANR	8200958	Argument	0L		8200942	1					
ANR	8200959	PrimaryExpression	0L		8200942	0					
ANR	8200960	Argument	SEEK_END		8200942	2					
ANR	8200961	Identifier	SEEK_END		8200942	0					
ANR	8200962	CallExpression	sftell ( in )		8200942	1					
ANR	8200963	Callee	sftell		8200942	0					
ANR	8200964	Identifier	sftell		8200942	0					
ANR	8200965	ArgumentList	in		8200942	1					
ANR	8200966	Argument	in		8200942	0					
ANR	8200967	Identifier	in		8200942	0					
ANR	8200968	ExpressionStatement	* size = 6 + len	1059:4:32464:32479	8200942	1	True				
ANR	8200969	AssignmentExpression	* size = 6 + len		8200942	0		=			
ANR	8200970	UnaryOperationExpression	* size		8200942	0					
ANR	8200971	UnaryOperator	*		8200942	0					
ANR	8200972	Identifier	size		8200942	1					
ANR	8200973	AdditiveExpression	6 + len		8200942	1		+			
ANR	8200974	PrimaryExpression	6		8200942	0					
ANR	8200975	Identifier	len		8200942	1					
ANR	8200976	IfStatement	if ( * size != ( uint ) ( * size ) )		8200942	2					
ANR	8200977	Condition	* size != ( uint ) ( * size )	1060:8:32536:32558	8200942	0	True				
ANR	8200978	EqualityExpression	* size != ( uint ) ( * size )		8200942	0		!=			
ANR	8200979	UnaryOperationExpression	* size		8200942	0					
ANR	8200980	UnaryOperator	*		8200942	0					
ANR	8200981	Identifier	size		8200942	1					
ANR	8200982	CastExpression	( uint ) ( * size )		8200942	1					
ANR	8200983	CastTarget	uint		8200942	0					
ANR	8200984	UnaryOperationExpression	* size		8200942	1					
ANR	8200985	UnaryOperator	*		8200942	0					
ANR	8200986	Identifier	size		8200942	1					
ANR	8200987	CompoundStatement		5:33:159:159	8200942	1					
ANR	8200988	ExpressionStatement	sfclose ( in )	1066:8:32752:32763	8200942	0	True				
ANR	8200989	CallExpression	sfclose ( in )		8200942	0					
ANR	8200990	Callee	sfclose		8200942	0					
ANR	8200991	Identifier	sfclose		8200942	0					
ANR	8200992	ArgumentList	in		8200942	1					
ANR	8200993	Argument	in		8200942	0					
ANR	8200994	Identifier	in		8200942	0					
ANR	8200995	ExpressionStatement	return_error ( gs_error_VMerror )	1067:8:32773:32803	8200942	1	True				
ANR	8200996	CallExpression	return_error ( gs_error_VMerror )		8200942	0					
ANR	8200997	Callee	return_error		8200942	0					
ANR	8200998	Identifier	return_error		8200942	0					
ANR	8200999	ArgumentList	gs_error_VMerror		8200942	1					
ANR	8201000	Argument	gs_error_VMerror		8200942	0					
ANR	8201001	Identifier	gs_error_VMerror		8200942	0					
ANR	8201002	ExpressionStatement	srewind ( in )	1069:4:32815:32826	8200942	3	True				
ANR	8201003	CallExpression	srewind ( in )		8200942	0					
ANR	8201004	Callee	srewind		8200942	0					
ANR	8201005	Identifier	srewind		8200942	0					
ANR	8201006	ArgumentList	in		8200942	1					
ANR	8201007	Argument	in		8200942	0					
ANR	8201008	Identifier	in		8200942	0					
ANR	8201009	ExpressionStatement	"* pptt_font_data = gs_alloc_bytes ( mem , * size , ""pl_tt_load_font data"" )"	1070:4:32832:32900	8200942	4	True				
ANR	8201010	AssignmentExpression	"* pptt_font_data = gs_alloc_bytes ( mem , * size , ""pl_tt_load_font data"" )"		8200942	0		=			
ANR	8201011	UnaryOperationExpression	* pptt_font_data		8200942	0					
ANR	8201012	UnaryOperator	*		8200942	0					
ANR	8201013	Identifier	pptt_font_data		8200942	1					
ANR	8201014	CallExpression	"gs_alloc_bytes ( mem , * size , ""pl_tt_load_font data"" )"		8200942	1					
ANR	8201015	Callee	gs_alloc_bytes		8200942	0					
ANR	8201016	Identifier	gs_alloc_bytes		8200942	0					
ANR	8201017	ArgumentList	mem		8200942	1					
ANR	8201018	Argument	mem		8200942	0					
ANR	8201019	Identifier	mem		8200942	0					
ANR	8201020	Argument	* size		8200942	1					
ANR	8201021	UnaryOperationExpression	* size		8200942	0					
ANR	8201022	UnaryOperator	*		8200942	0					
ANR	8201023	Identifier	size		8200942	1					
ANR	8201024	Argument	"""pl_tt_load_font data"""		8200942	2					
ANR	8201025	PrimaryExpression	"""pl_tt_load_font data"""		8200942	0					
ANR	8201026	IfStatement	if ( * pptt_font_data == 0 )		8200942	5					
ANR	8201027	Condition	* pptt_font_data == 0	1071:8:32910:32929	8200942	0	True				
ANR	8201028	EqualityExpression	* pptt_font_data == 0		8200942	0		==			
ANR	8201029	UnaryOperationExpression	* pptt_font_data		8200942	0					
ANR	8201030	UnaryOperator	*		8200942	0					
ANR	8201031	Identifier	pptt_font_data		8200942	1					
ANR	8201032	PrimaryExpression	0		8200942	1					
ANR	8201033	CompoundStatement		16:30:530:530	8200942	1					
ANR	8201034	ExpressionStatement	sfclose ( in )	1072:8:32942:32953	8200942	0	True				
ANR	8201035	CallExpression	sfclose ( in )		8200942	0					
ANR	8201036	Callee	sfclose		8200942	0					
ANR	8201037	Identifier	sfclose		8200942	0					
ANR	8201038	ArgumentList	in		8200942	1					
ANR	8201039	Argument	in		8200942	0					
ANR	8201040	Identifier	in		8200942	0					
ANR	8201041	ExpressionStatement	return_error ( gs_error_VMerror )	1073:8:32963:32993	8200942	1	True				
ANR	8201042	CallExpression	return_error ( gs_error_VMerror )		8200942	0					
ANR	8201043	Callee	return_error		8200942	0					
ANR	8201044	Identifier	return_error		8200942	0					
ANR	8201045	ArgumentList	gs_error_VMerror		8200942	1					
ANR	8201046	Argument	gs_error_VMerror		8200942	0					
ANR	8201047	Identifier	gs_error_VMerror		8200942	0					
ANR	8201048	ExpressionStatement	"sfread ( * pptt_font_data + 6 , 1 , len , in )"	1075:4:33005:33044	8200942	6	True				
ANR	8201049	CallExpression	"sfread ( * pptt_font_data + 6 , 1 , len , in )"		8200942	0					
ANR	8201050	Callee	sfread		8200942	0					
ANR	8201051	Identifier	sfread		8200942	0					
ANR	8201052	ArgumentList	* pptt_font_data + 6		8200942	1					
ANR	8201053	Argument	* pptt_font_data + 6		8200942	0					
ANR	8201054	AdditiveExpression	* pptt_font_data + 6		8200942	0		+			
ANR	8201055	UnaryOperationExpression	* pptt_font_data		8200942	0					
ANR	8201056	UnaryOperator	*		8200942	0					
ANR	8201057	Identifier	pptt_font_data		8200942	1					
ANR	8201058	PrimaryExpression	6		8200942	1					
ANR	8201059	Argument	1		8200942	1					
ANR	8201060	PrimaryExpression	1		8200942	0					
ANR	8201061	Argument	len		8200942	2					
ANR	8201062	Identifier	len		8200942	0					
ANR	8201063	Argument	in		8200942	3					
ANR	8201064	Identifier	in		8200942	0					
ANR	8201065	ExpressionStatement	sfclose ( in )	1076:4:33050:33061	8200942	7	True				
ANR	8201066	CallExpression	sfclose ( in )		8200942	0					
ANR	8201067	Callee	sfclose		8200942	0					
ANR	8201068	Identifier	sfclose		8200942	0					
ANR	8201069	ArgumentList	in		8200942	1					
ANR	8201070	Argument	in		8200942	0					
ANR	8201071	Identifier	in		8200942	0					
ANR	8201072	ReturnStatement	return 0 ;	1077:4:33067:33075	8200942	8	True				
ANR	8201073	PrimaryExpression	0		8200942	0					
ANR	8201074	ReturnType	int		8200942	1					
ANR	8201075	Identifier	pl_alloc_tt_fontfile_buffer		8200942	2					
ANR	8201076	ParameterList	"stream * in , gs_memory_t * mem , byte * * pptt_font_data , ulong * size"		8200942	3					
ANR	8201077	Parameter	stream * in	1054:28:32303:32313	8200942	0	True				
ANR	8201078	ParameterType	stream *		8200942	0					
ANR	8201079	Identifier	in		8200942	1					
ANR	8201080	Parameter	gs_memory_t * mem	1054:41:32316:32332	8200942	1	True				
ANR	8201081	ParameterType	gs_memory_t *		8200942	0					
ANR	8201082	Identifier	mem		8200942	1					
ANR	8201083	Parameter	byte * * pptt_font_data	1055:28:32363:32384	8200942	2	True				
ANR	8201084	ParameterType	byte * *		8200942	0					
ANR	8201085	Identifier	pptt_font_data		8200942	1					
ANR	8201086	Parameter	ulong * size	1055:52:32387:32398	8200942	3	True				
ANR	8201087	ParameterType	ulong *		8200942	0					
ANR	8201088	Identifier	size		8200942	1					
ANR	8201089	CFGEntryNode	ENTRY		8200942		True				
ANR	8201090	CFGExitNode	EXIT		8200942		True				
ANR	8201091	Symbol	pptt_font_data		8200942						
ANR	8201092	Symbol	gs_error_VMerror		8200942						
ANR	8201093	Symbol	gs_alloc_bytes		8200942						
ANR	8201094	Symbol	* size		8200942						
ANR	8201095	Symbol	mem		8200942						
ANR	8201096	Symbol	size		8200942						
ANR	8201097	Symbol	len		8200942						
ANR	8201098	Symbol	sftell		8200942						
ANR	8201099	Symbol	in		8200942						
ANR	8201100	Symbol	* pptt_font_data		8200942						
ANR	8201101	Symbol	sfseek		8200942						
ANR	8201102	Symbol	SEEK_END		8200942						
ANR	8201103	Function	pl_load_tt_font	1081:0:33141:35679							
ANR	8201104	FunctionDef	"pl_load_tt_font (stream * in , gs_font_dir * pdir , gs_memory_t * mem , long unique_id , pl_font_t * * pplfont , char * font_name)"		8201103	0					
ANR	8201105	CompoundStatement		1084:0:33284:35679	8201103	0					
ANR	8201106	IdentifierDeclStatement	byte * tt_font_datap = NULL ;	1085:4:33290:33316	8201103	0	True				
ANR	8201107	IdentifierDecl	* tt_font_datap = NULL		8201103	0					
ANR	8201108	IdentifierDeclType	byte *		8201103	0					
ANR	8201109	Identifier	tt_font_datap		8201103	1					
ANR	8201110	AssignmentExpression	* tt_font_datap = NULL		8201103	2		=			
ANR	8201111	Identifier	NULL		8201103	0					
ANR	8201112	Identifier	NULL		8201103	1					
ANR	8201113	IdentifierDeclStatement	ulong size ;	1086:4:33322:33332	8201103	1	True				
ANR	8201114	IdentifierDecl	size		8201103	0					
ANR	8201115	IdentifierDeclType	ulong		8201103	0					
ANR	8201116	Identifier	size		8201103	1					
ANR	8201117	IdentifierDeclStatement	int code ;	1087:4:33338:33346	8201103	2	True				
ANR	8201118	IdentifierDecl	code		8201103	0					
ANR	8201119	IdentifierDeclType	int		8201103	0					
ANR	8201120	Identifier	code		8201103	1					
ANR	8201121	IdentifierDeclStatement	gs_font_type42 * pfont = NULL ;	1088:4:33352:33380	8201103	3	True				
ANR	8201122	IdentifierDecl	* pfont = NULL		8201103	0					
ANR	8201123	IdentifierDeclType	gs_font_type42 *		8201103	0					
ANR	8201124	Identifier	pfont		8201103	1					
ANR	8201125	AssignmentExpression	* pfont = NULL		8201103	2		=			
ANR	8201126	Identifier	NULL		8201103	0					
ANR	8201127	Identifier	NULL		8201103	1					
ANR	8201128	IdentifierDeclStatement	pl_font_t * plfont = NULL ;	1089:4:33386:33410	8201103	4	True				
ANR	8201129	IdentifierDecl	* plfont = NULL		8201103	0					
ANR	8201130	IdentifierDeclType	pl_font_t *		8201103	0					
ANR	8201131	Identifier	plfont		8201103	1					
ANR	8201132	AssignmentExpression	* plfont = NULL		8201103	2		=			
ANR	8201133	Identifier	NULL		8201103	0					
ANR	8201134	Identifier	NULL		8201103	1					
ANR	8201135	IdentifierDeclStatement	byte * file_name = NULL ;	1090:4:33416:33438	8201103	5	True				
ANR	8201136	IdentifierDecl	* file_name = NULL		8201103	0					
ANR	8201137	IdentifierDeclType	byte *		8201103	0					
ANR	8201138	Identifier	file_name		8201103	1					
ANR	8201139	AssignmentExpression	* file_name = NULL		8201103	2		=			
ANR	8201140	Identifier	NULL		8201103	0					
ANR	8201141	Identifier	NULL		8201103	1					
ANR	8201142	IdentifierDeclStatement	gs_const_string pfname ;	1091:4:33444:33466	8201103	6	True				
ANR	8201143	IdentifierDecl	pfname		8201103	0					
ANR	8201144	IdentifierDeclType	gs_const_string		8201103	0					
ANR	8201145	Identifier	pfname		8201103	1					
ANR	8201146	IfStatement	"if ( sfilename ( in , & pfname ) == 0 )"		8201103	7					
ANR	8201147	Condition	"sfilename ( in , & pfname ) == 0"	1093:8:33477:33503	8201103	0	True				
ANR	8201148	EqualityExpression	"sfilename ( in , & pfname ) == 0"		8201103	0		==			
ANR	8201149	CallExpression	"sfilename ( in , & pfname )"		8201103	0					
ANR	8201150	Callee	sfilename		8201103	0					
ANR	8201151	Identifier	sfilename		8201103	0					
ANR	8201152	ArgumentList	in		8201103	1					
ANR	8201153	Argument	in		8201103	0					
ANR	8201154	Identifier	in		8201103	0					
ANR	8201155	Argument	& pfname		8201103	1					
ANR	8201156	UnaryOperationExpression	& pfname		8201103	0					
ANR	8201157	UnaryOperator	&		8201103	0					
ANR	8201158	Identifier	pfname		8201103	1					
ANR	8201159	PrimaryExpression	0		8201103	1					
ANR	8201160	CompoundStatement		10:37:221:221	8201103	1					
ANR	8201161	ExpressionStatement	"file_name = gs_alloc_bytes ( mem , pfname . size + 1 , ""pl_load_tt_font file_name"" )"	1094:8:33516:33605	8201103	0	True				
ANR	8201162	AssignmentExpression	"file_name = gs_alloc_bytes ( mem , pfname . size + 1 , ""pl_load_tt_font file_name"" )"		8201103	0		=			
ANR	8201163	Identifier	file_name		8201103	0					
ANR	8201164	CallExpression	"gs_alloc_bytes ( mem , pfname . size + 1 , ""pl_load_tt_font file_name"" )"		8201103	1					
ANR	8201165	Callee	gs_alloc_bytes		8201103	0					
ANR	8201166	Identifier	gs_alloc_bytes		8201103	0					
ANR	8201167	ArgumentList	mem		8201103	1					
ANR	8201168	Argument	mem		8201103	0					
ANR	8201169	Identifier	mem		8201103	0					
ANR	8201170	Argument	pfname . size + 1		8201103	1					
ANR	8201171	AdditiveExpression	pfname . size + 1		8201103	0		+			
ANR	8201172	MemberAccess	pfname . size		8201103	0					
ANR	8201173	Identifier	pfname		8201103	0					
ANR	8201174	Identifier	size		8201103	1					
ANR	8201175	PrimaryExpression	1		8201103	1					
ANR	8201176	Argument	"""pl_load_tt_font file_name"""		8201103	2					
ANR	8201177	PrimaryExpression	"""pl_load_tt_font file_name"""		8201103	0					
ANR	8201178	IfStatement	if ( ! file_name )		8201103	1					
ANR	8201179	Condition	! file_name	1096:12:33619:33628	8201103	0	True				
ANR	8201180	UnaryOperationExpression	! file_name		8201103	0					
ANR	8201181	UnaryOperator	!		8201103	0					
ANR	8201182	Identifier	file_name		8201103	1					
ANR	8201183	CompoundStatement		13:24:346:346	8201103	1					
ANR	8201184	ExpressionStatement	sfclose ( in )	1097:12:33645:33656	8201103	0	True				
ANR	8201185	CallExpression	sfclose ( in )		8201103	0					
ANR	8201186	Callee	sfclose		8201103	0					
ANR	8201187	Identifier	sfclose		8201103	0					
ANR	8201188	ArgumentList	in		8201103	1					
ANR	8201189	Argument	in		8201103	0					
ANR	8201190	Identifier	in		8201103	0					
ANR	8201191	ExpressionStatement	return_error ( gs_error_VMerror )	1098:12:33670:33700	8201103	1	True				
ANR	8201192	CallExpression	return_error ( gs_error_VMerror )		8201103	0					
ANR	8201193	Callee	return_error		8201103	0					
ANR	8201194	Identifier	return_error		8201103	0					
ANR	8201195	ArgumentList	gs_error_VMerror		8201103	1					
ANR	8201196	Argument	gs_error_VMerror		8201103	0					
ANR	8201197	Identifier	gs_error_VMerror		8201103	0					
ANR	8201198	ExpressionStatement	"memcpy ( file_name , pfname . data , pfname . size + 1 )"	1101:8:33791:33838	8201103	2	True				
ANR	8201199	CallExpression	"memcpy ( file_name , pfname . data , pfname . size + 1 )"		8201103	0					
ANR	8201200	Callee	memcpy		8201103	0					
ANR	8201201	Identifier	memcpy		8201103	0					
ANR	8201202	ArgumentList	file_name		8201103	1					
ANR	8201203	Argument	file_name		8201103	0					
ANR	8201204	Identifier	file_name		8201103	0					
ANR	8201205	Argument	pfname . data		8201103	1					
ANR	8201206	MemberAccess	pfname . data		8201103	0					
ANR	8201207	Identifier	pfname		8201103	0					
ANR	8201208	Identifier	data		8201103	1					
ANR	8201209	Argument	pfname . size + 1		8201103	2					
ANR	8201210	AdditiveExpression	pfname . size + 1		8201103	0		+			
ANR	8201211	MemberAccess	pfname . size		8201103	0					
ANR	8201212	Identifier	pfname		8201103	0					
ANR	8201213	Identifier	size		8201103	1					
ANR	8201214	PrimaryExpression	1		8201103	1					
ANR	8201215	ExpressionStatement	"code = pl_alloc_tt_fontfile_buffer ( in , mem , & tt_font_datap , & size )"	1105:4:33888:33954	8201103	8	True				
ANR	8201216	AssignmentExpression	"code = pl_alloc_tt_fontfile_buffer ( in , mem , & tt_font_datap , & size )"		8201103	0		=			
ANR	8201217	Identifier	code		8201103	0					
ANR	8201218	CallExpression	"pl_alloc_tt_fontfile_buffer ( in , mem , & tt_font_datap , & size )"		8201103	1					
ANR	8201219	Callee	pl_alloc_tt_fontfile_buffer		8201103	0					
ANR	8201220	Identifier	pl_alloc_tt_fontfile_buffer		8201103	0					
ANR	8201221	ArgumentList	in		8201103	1					
ANR	8201222	Argument	in		8201103	0					
ANR	8201223	Identifier	in		8201103	0					
ANR	8201224	Argument	mem		8201103	1					
ANR	8201225	Identifier	mem		8201103	0					
ANR	8201226	Argument	& tt_font_datap		8201103	2					
ANR	8201227	UnaryOperationExpression	& tt_font_datap		8201103	0					
ANR	8201228	UnaryOperator	&		8201103	0					
ANR	8201229	Identifier	tt_font_datap		8201103	1					
ANR	8201230	Argument	& size		8201103	3					
ANR	8201231	UnaryOperationExpression	& size		8201103	0					
ANR	8201232	UnaryOperator	&		8201103	0					
ANR	8201233	Identifier	size		8201103	1					
ANR	8201234	IfStatement	if ( code < 0 )		8201103	9					
ANR	8201235	Condition	code < 0	1106:8:33964:33971	8201103	0	True				
ANR	8201236	RelationalExpression	code < 0		8201103	0		<			
ANR	8201237	Identifier	code		8201103	0					
ANR	8201238	PrimaryExpression	0		8201103	1					
ANR	8201239	GotoStatement	goto error ;	1107:8:33982:33992	8201103	1	True				
ANR	8201240	Identifier	error		8201103	0					
ANR	8201241	ExpressionStatement	"pfont = gs_alloc_struct ( mem , gs_font_type42 , & st_gs_font_type42 , ""pl_tt_load_font(gs_font_type42)"" )"	1109:4:34054:34181	8201103	10	True				
ANR	8201242	AssignmentExpression	"pfont = gs_alloc_struct ( mem , gs_font_type42 , & st_gs_font_type42 , ""pl_tt_load_font(gs_font_type42)"" )"		8201103	0		=			
ANR	8201243	Identifier	pfont		8201103	0					
ANR	8201244	CallExpression	"gs_alloc_struct ( mem , gs_font_type42 , & st_gs_font_type42 , ""pl_tt_load_font(gs_font_type42)"" )"		8201103	1					
ANR	8201245	Callee	gs_alloc_struct		8201103	0					
ANR	8201246	Identifier	gs_alloc_struct		8201103	0					
ANR	8201247	ArgumentList	mem		8201103	1					
ANR	8201248	Argument	mem		8201103	0					
ANR	8201249	Identifier	mem		8201103	0					
ANR	8201250	Argument	gs_font_type42		8201103	1					
ANR	8201251	Identifier	gs_font_type42		8201103	0					
ANR	8201252	Argument	& st_gs_font_type42		8201103	2					
ANR	8201253	UnaryOperationExpression	& st_gs_font_type42		8201103	0					
ANR	8201254	UnaryOperator	&		8201103	0					
ANR	8201255	Identifier	st_gs_font_type42		8201103	1					
ANR	8201256	Argument	"""pl_tt_load_font(gs_font_type42)"""		8201103	3					
ANR	8201257	PrimaryExpression	"""pl_tt_load_font(gs_font_type42)"""		8201103	0					
ANR	8201258	IfStatement	if ( pfont == NULL )		8201103	11					
ANR	8201259	Condition	pfont == NULL	1111:8:34191:34203	8201103	0	True				
ANR	8201260	EqualityExpression	pfont == NULL		8201103	0		==			
ANR	8201261	Identifier	pfont		8201103	0					
ANR	8201262	Identifier	NULL		8201103	1					
ANR	8201263	CompoundStatement		28:23:921:921	8201103	1					
ANR	8201264	ExpressionStatement	code = gs_error_VMerror	1112:8:34216:34239	8201103	0	True				
ANR	8201265	AssignmentExpression	code = gs_error_VMerror		8201103	0		=			
ANR	8201266	Identifier	code		8201103	0					
ANR	8201267	Identifier	gs_error_VMerror		8201103	1					
ANR	8201268	GotoStatement	goto error ;	1113:8:34249:34259	8201103	1	True				
ANR	8201269	Identifier	error		8201103	0					
ANR	8201270	ExpressionStatement	"memset ( pfont , 0 , sizeof ( * pfont ) )"	1115:4:34271:34303	8201103	12	True				
ANR	8201271	CallExpression	"memset ( pfont , 0 , sizeof ( * pfont ) )"		8201103	0					
ANR	8201272	Callee	memset		8201103	0					
ANR	8201273	Identifier	memset		8201103	0					
ANR	8201274	ArgumentList	pfont		8201103	1					
ANR	8201275	Argument	pfont		8201103	0					
ANR	8201276	Identifier	pfont		8201103	0					
ANR	8201277	Argument	0		8201103	1					
ANR	8201278	PrimaryExpression	0		8201103	0					
ANR	8201279	Argument	sizeof ( * pfont )		8201103	2					
ANR	8201280	SizeofExpression	sizeof ( * pfont )		8201103	0					
ANR	8201281	Sizeof	sizeof		8201103	0					
ANR	8201282	UnaryOperationExpression	* pfont		8201103	1					
ANR	8201283	UnaryOperator	*		8201103	0					
ANR	8201284	Identifier	pfont		8201103	1					
ANR	8201285	ExpressionStatement	"plfont = pl_alloc_font ( mem , ""pl_tt_load_font(pl_font_t)"" )"	1116:4:34309:34366	8201103	13	True				
ANR	8201286	AssignmentExpression	"plfont = pl_alloc_font ( mem , ""pl_tt_load_font(pl_font_t)"" )"		8201103	0		=			
ANR	8201287	Identifier	plfont		8201103	0					
ANR	8201288	CallExpression	"pl_alloc_font ( mem , ""pl_tt_load_font(pl_font_t)"" )"		8201103	1					
ANR	8201289	Callee	pl_alloc_font		8201103	0					
ANR	8201290	Identifier	pl_alloc_font		8201103	0					
ANR	8201291	ArgumentList	mem		8201103	1					
ANR	8201292	Argument	mem		8201103	0					
ANR	8201293	Identifier	mem		8201103	0					
ANR	8201294	Argument	"""pl_tt_load_font(pl_font_t)"""		8201103	1					
ANR	8201295	PrimaryExpression	"""pl_tt_load_font(pl_font_t)"""		8201103	0					
ANR	8201296	IfStatement	if ( plfont == NULL )		8201103	14					
ANR	8201297	Condition	plfont == NULL	1117:8:34376:34389	8201103	0	True				
ANR	8201298	EqualityExpression	plfont == NULL		8201103	0		==			
ANR	8201299	Identifier	plfont		8201103	0					
ANR	8201300	Identifier	NULL		8201103	1					
ANR	8201301	CompoundStatement		34:24:1107:1107	8201103	1					
ANR	8201302	ExpressionStatement	code = gs_error_VMerror	1118:8:34402:34425	8201103	0	True				
ANR	8201303	AssignmentExpression	code = gs_error_VMerror		8201103	0		=			
ANR	8201304	Identifier	code		8201103	0					
ANR	8201305	Identifier	gs_error_VMerror		8201103	1					
ANR	8201306	GotoStatement	goto error ;	1119:8:34435:34445	8201103	1	True				
ANR	8201307	Identifier	error		8201103	0					
ANR	8201308	ExpressionStatement	"code = pl_fill_in_font ( ( gs_font * ) pfont , plfont , pdir , mem , font_name )"	1123:4:34505:34576	8201103	15	True				
ANR	8201309	AssignmentExpression	"code = pl_fill_in_font ( ( gs_font * ) pfont , plfont , pdir , mem , font_name )"		8201103	0		=			
ANR	8201310	Identifier	code		8201103	0					
ANR	8201311	CallExpression	"pl_fill_in_font ( ( gs_font * ) pfont , plfont , pdir , mem , font_name )"		8201103	1					
ANR	8201312	Callee	pl_fill_in_font		8201103	0					
ANR	8201313	Identifier	pl_fill_in_font		8201103	0					
ANR	8201314	ArgumentList	( gs_font * ) pfont		8201103	1					
ANR	8201315	Argument	( gs_font * ) pfont		8201103	0					
ANR	8201316	CastExpression	( gs_font * ) pfont		8201103	0					
ANR	8201317	CastTarget	gs_font *		8201103	0					
ANR	8201318	Identifier	pfont		8201103	1					
ANR	8201319	Argument	plfont		8201103	1					
ANR	8201320	Identifier	plfont		8201103	0					
ANR	8201321	Argument	pdir		8201103	2					
ANR	8201322	Identifier	pdir		8201103	0					
ANR	8201323	Argument	mem		8201103	3					
ANR	8201324	Identifier	mem		8201103	0					
ANR	8201325	Argument	font_name		8201103	4					
ANR	8201326	Identifier	font_name		8201103	0					
ANR	8201327	IfStatement	if ( code < 0 )		8201103	16					
ANR	8201328	Condition	code < 0	1124:8:34586:34593	8201103	0	True				
ANR	8201329	RelationalExpression	code < 0		8201103	0		<			
ANR	8201330	Identifier	code		8201103	0					
ANR	8201331	PrimaryExpression	0		8201103	1					
ANR	8201332	GotoStatement	goto error ;	1125:8:34604:34614	8201103	1	True				
ANR	8201333	Identifier	error		8201103	0					
ANR	8201334	ExpressionStatement	plfont -> header = tt_font_datap	1128:4:34669:34699	8201103	17	True				
ANR	8201335	AssignmentExpression	plfont -> header = tt_font_datap		8201103	0		=			
ANR	8201336	PtrMemberAccess	plfont -> header		8201103	0					
ANR	8201337	Identifier	plfont		8201103	0					
ANR	8201338	Identifier	header		8201103	1					
ANR	8201339	Identifier	tt_font_datap		8201103	1					
ANR	8201340	ExpressionStatement	plfont -> header_size = size	1129:4:34705:34731	8201103	18	True				
ANR	8201341	AssignmentExpression	plfont -> header_size = size		8201103	0		=			
ANR	8201342	PtrMemberAccess	plfont -> header_size		8201103	0					
ANR	8201343	Identifier	plfont		8201103	0					
ANR	8201344	Identifier	header_size		8201103	1					
ANR	8201345	Identifier	size		8201103	1					
ANR	8201346	ExpressionStatement	plfont -> scaling_technology = plfst_TrueType	1130:4:34737:34780	8201103	19	True				
ANR	8201347	AssignmentExpression	plfont -> scaling_technology = plfst_TrueType		8201103	0		=			
ANR	8201348	PtrMemberAccess	plfont -> scaling_technology		8201103	0					
ANR	8201349	Identifier	plfont		8201103	0					
ANR	8201350	Identifier	scaling_technology		8201103	1					
ANR	8201351	Identifier	plfst_TrueType		8201103	1					
ANR	8201352	ExpressionStatement	plfont -> font_type = plft_Unicode	1131:4:34786:34818	8201103	20	True				
ANR	8201353	AssignmentExpression	plfont -> font_type = plft_Unicode		8201103	0		=			
ANR	8201354	PtrMemberAccess	plfont -> font_type		8201103	0					
ANR	8201355	Identifier	plfont		8201103	0					
ANR	8201356	Identifier	font_type		8201103	1					
ANR	8201357	Identifier	plft_Unicode		8201103	1					
ANR	8201358	ExpressionStatement	plfont -> large_sizes = true	1132:4:34824:34850	8201103	21	True				
ANR	8201359	AssignmentExpression	plfont -> large_sizes = true		8201103	0		=			
ANR	8201360	PtrMemberAccess	plfont -> large_sizes		8201103	0					
ANR	8201361	Identifier	plfont		8201103	0					
ANR	8201362	Identifier	large_sizes		8201103	1					
ANR	8201363	Identifier	true		8201103	1					
ANR	8201364	ExpressionStatement	plfont -> offsets . GT = 0	1133:4:34856:34878	8201103	22	True				
ANR	8201365	AssignmentExpression	plfont -> offsets . GT = 0		8201103	0		=			
ANR	8201366	MemberAccess	plfont -> offsets . GT		8201103	0					
ANR	8201367	PtrMemberAccess	plfont -> offsets		8201103	0					
ANR	8201368	Identifier	plfont		8201103	0					
ANR	8201369	Identifier	offsets		8201103	1					
ANR	8201370	Identifier	GT		8201103	1					
ANR	8201371	PrimaryExpression	0		8201103	1					
ANR	8201372	ExpressionStatement	plfont -> is_xl_format = false	1134:4:34884:34912	8201103	23	True				
ANR	8201373	AssignmentExpression	plfont -> is_xl_format = false		8201103	0		=			
ANR	8201374	PtrMemberAccess	plfont -> is_xl_format		8201103	0					
ANR	8201375	Identifier	plfont		8201103	0					
ANR	8201376	Identifier	is_xl_format		8201103	1					
ANR	8201377	Identifier	false		8201103	1					
ANR	8201378	ExpressionStatement	"code = pl_fill_in_tt_font ( pfont , tt_font_datap , unique_id )"	1135:4:34918:34976	8201103	24	True				
ANR	8201379	AssignmentExpression	"code = pl_fill_in_tt_font ( pfont , tt_font_datap , unique_id )"		8201103	0		=			
ANR	8201380	Identifier	code		8201103	0					
ANR	8201381	CallExpression	"pl_fill_in_tt_font ( pfont , tt_font_datap , unique_id )"		8201103	1					
ANR	8201382	Callee	pl_fill_in_tt_font		8201103	0					
ANR	8201383	Identifier	pl_fill_in_tt_font		8201103	0					
ANR	8201384	ArgumentList	pfont		8201103	1					
ANR	8201385	Argument	pfont		8201103	0					
ANR	8201386	Identifier	pfont		8201103	0					
ANR	8201387	Argument	tt_font_datap		8201103	1					
ANR	8201388	Identifier	tt_font_datap		8201103	0					
ANR	8201389	Argument	unique_id		8201103	2					
ANR	8201390	Identifier	unique_id		8201103	0					
ANR	8201391	IfStatement	if ( code < 0 )		8201103	25					
ANR	8201392	Condition	code < 0	1136:8:34986:34993	8201103	0	True				
ANR	8201393	RelationalExpression	code < 0		8201103	0		<			
ANR	8201394	Identifier	code		8201103	0					
ANR	8201395	PrimaryExpression	0		8201103	1					
ANR	8201396	GotoStatement	goto error ;	1137:8:35004:35014	8201103	1	True				
ANR	8201397	Identifier	error		8201103	0					
ANR	8201398	ExpressionStatement	"code = gs_definefont ( pdir , ( gs_font * ) pfont )"	1138:4:35020:35065	8201103	26	True				
ANR	8201399	AssignmentExpression	"code = gs_definefont ( pdir , ( gs_font * ) pfont )"		8201103	0		=			
ANR	8201400	Identifier	code		8201103	0					
ANR	8201401	CallExpression	"gs_definefont ( pdir , ( gs_font * ) pfont )"		8201103	1					
ANR	8201402	Callee	gs_definefont		8201103	0					
ANR	8201403	Identifier	gs_definefont		8201103	0					
ANR	8201404	ArgumentList	pdir		8201103	1					
ANR	8201405	Argument	pdir		8201103	0					
ANR	8201406	Identifier	pdir		8201103	0					
ANR	8201407	Argument	( gs_font * ) pfont		8201103	1					
ANR	8201408	CastExpression	( gs_font * ) pfont		8201103	0					
ANR	8201409	CastTarget	gs_font *		8201103	0					
ANR	8201410	Identifier	pfont		8201103	1					
ANR	8201411	IfStatement	if ( code < 0 )		8201103	27					
ANR	8201412	Condition	code < 0	1139:8:35075:35082	8201103	0	True				
ANR	8201413	RelationalExpression	code < 0		8201103	0		<			
ANR	8201414	Identifier	code		8201103	0					
ANR	8201415	PrimaryExpression	0		8201103	1					
ANR	8201416	GotoStatement	goto error ;	1140:8:35093:35103	8201103	1	True				
ANR	8201417	Identifier	error		8201103	0					
ANR	8201418	ExpressionStatement	"code = pl_fapi_passfont ( plfont , 0 , NULL , NULL , plfont -> header + 6 , plfont -> header_size - 6 )"	1142:4:35110:35234	8201103	28	True				
ANR	8201419	AssignmentExpression	"code = pl_fapi_passfont ( plfont , 0 , NULL , NULL , plfont -> header + 6 , plfont -> header_size - 6 )"		8201103	0		=			
ANR	8201420	Identifier	code		8201103	0					
ANR	8201421	CallExpression	"pl_fapi_passfont ( plfont , 0 , NULL , NULL , plfont -> header + 6 , plfont -> header_size - 6 )"		8201103	1					
ANR	8201422	Callee	pl_fapi_passfont		8201103	0					
ANR	8201423	Identifier	pl_fapi_passfont		8201103	0					
ANR	8201424	ArgumentList	plfont		8201103	1					
ANR	8201425	Argument	plfont		8201103	0					
ANR	8201426	Identifier	plfont		8201103	0					
ANR	8201427	Argument	0		8201103	1					
ANR	8201428	PrimaryExpression	0		8201103	0					
ANR	8201429	Argument	NULL		8201103	2					
ANR	8201430	Identifier	NULL		8201103	0					
ANR	8201431	Argument	NULL		8201103	3					
ANR	8201432	Identifier	NULL		8201103	0					
ANR	8201433	Argument	plfont -> header + 6		8201103	4					
ANR	8201434	AdditiveExpression	plfont -> header + 6		8201103	0		+			
ANR	8201435	PtrMemberAccess	plfont -> header		8201103	0					
ANR	8201436	Identifier	plfont		8201103	0					
ANR	8201437	Identifier	header		8201103	1					
ANR	8201438	PrimaryExpression	6		8201103	1					
ANR	8201439	Argument	plfont -> header_size - 6		8201103	5					
ANR	8201440	AdditiveExpression	plfont -> header_size - 6		8201103	0		-			
ANR	8201441	PtrMemberAccess	plfont -> header_size		8201103	0					
ANR	8201442	Identifier	plfont		8201103	0					
ANR	8201443	Identifier	header_size		8201103	1					
ANR	8201444	PrimaryExpression	6		8201103	1					
ANR	8201445	IfStatement	if ( code < 0 )		8201103	29					
ANR	8201446	Condition	code < 0	1145:8:35244:35251	8201103	0	True				
ANR	8201447	RelationalExpression	code < 0		8201103	0		<			
ANR	8201448	Identifier	code		8201103	0					
ANR	8201449	PrimaryExpression	0		8201103	1					
ANR	8201450	GotoStatement	goto error ;	1146:8:35262:35272	8201103	1	True				
ANR	8201451	Identifier	error		8201103	0					
ANR	8201452	IfStatement	if ( file_name )		8201103	30					
ANR	8201453	Condition	file_name	1147:8:35282:35290	8201103	0	True				
ANR	8201454	Identifier	file_name		8201103	0					
ANR	8201455	ExpressionStatement	"gs_free_object ( mem , file_name , ""pl_load_tt_font file_name"" )"	1148:8:35301:35360	8201103	1	True				
ANR	8201456	CallExpression	"gs_free_object ( mem , file_name , ""pl_load_tt_font file_name"" )"		8201103	0					
ANR	8201457	Callee	gs_free_object		8201103	0					
ANR	8201458	Identifier	gs_free_object		8201103	0					
ANR	8201459	ArgumentList	mem		8201103	1					
ANR	8201460	Argument	mem		8201103	0					
ANR	8201461	Identifier	mem		8201103	0					
ANR	8201462	Argument	file_name		8201103	1					
ANR	8201463	Identifier	file_name		8201103	0					
ANR	8201464	Argument	"""pl_load_tt_font file_name"""		8201103	2					
ANR	8201465	PrimaryExpression	"""pl_load_tt_font file_name"""		8201103	0					
ANR	8201466	ExpressionStatement	* pplfont = plfont	1150:4:35367:35384	8201103	31	True				
ANR	8201467	AssignmentExpression	* pplfont = plfont		8201103	0		=			
ANR	8201468	UnaryOperationExpression	* pplfont		8201103	0					
ANR	8201469	UnaryOperator	*		8201103	0					
ANR	8201470	Identifier	pplfont		8201103	1					
ANR	8201471	Identifier	plfont		8201103	1					
ANR	8201472	ReturnStatement	return 0 ;	1151:4:35390:35398	8201103	32	True				
ANR	8201473	PrimaryExpression	0		8201103	0					
ANR	8201474	Label	error :	1153:0:35401:35406	8201103	33	True				
ANR	8201475	Identifier	error		8201103	0					
ANR	8201476	ExpressionStatement	"gs_free_object ( mem , plfont , ""pl_tt_load_font(pl_font_t)"" )"	1154:4:35412:35469	8201103	34	True				
ANR	8201477	CallExpression	"gs_free_object ( mem , plfont , ""pl_tt_load_font(pl_font_t)"" )"		8201103	0					
ANR	8201478	Callee	gs_free_object		8201103	0					
ANR	8201479	Identifier	gs_free_object		8201103	0					
ANR	8201480	ArgumentList	mem		8201103	1					
ANR	8201481	Argument	mem		8201103	0					
ANR	8201482	Identifier	mem		8201103	0					
ANR	8201483	Argument	plfont		8201103	1					
ANR	8201484	Identifier	plfont		8201103	0					
ANR	8201485	Argument	"""pl_tt_load_font(pl_font_t)"""		8201103	2					
ANR	8201486	PrimaryExpression	"""pl_tt_load_font(pl_font_t)"""		8201103	0					
ANR	8201487	ExpressionStatement	"gs_free_object ( mem , pfont , ""pl_tt_load_font(gs_font_type42)"" )"	1155:4:35475:35536	8201103	35	True				
ANR	8201488	CallExpression	"gs_free_object ( mem , pfont , ""pl_tt_load_font(gs_font_type42)"" )"		8201103	0					
ANR	8201489	Callee	gs_free_object		8201103	0					
ANR	8201490	Identifier	gs_free_object		8201103	0					
ANR	8201491	ArgumentList	mem		8201103	1					
ANR	8201492	Argument	mem		8201103	0					
ANR	8201493	Identifier	mem		8201103	0					
ANR	8201494	Argument	pfont		8201103	1					
ANR	8201495	Identifier	pfont		8201103	0					
ANR	8201496	Argument	"""pl_tt_load_font(gs_font_type42)"""		8201103	2					
ANR	8201497	PrimaryExpression	"""pl_tt_load_font(gs_font_type42)"""		8201103	0					
ANR	8201498	ExpressionStatement	"pl_free_tt_fontfile_buffer ( mem , tt_font_datap )"	1156:4:35542:35588	8201103	36	True				
ANR	8201499	CallExpression	"pl_free_tt_fontfile_buffer ( mem , tt_font_datap )"		8201103	0					
ANR	8201500	Callee	pl_free_tt_fontfile_buffer		8201103	0					
ANR	8201501	Identifier	pl_free_tt_fontfile_buffer		8201103	0					
ANR	8201502	ArgumentList	mem		8201103	1					
ANR	8201503	Argument	mem		8201103	0					
ANR	8201504	Identifier	mem		8201103	0					
ANR	8201505	Argument	tt_font_datap		8201103	1					
ANR	8201506	Identifier	tt_font_datap		8201103	0					
ANR	8201507	ExpressionStatement	"gs_free_object ( mem , file_name , ""pl_load_tt_font file_name"" )"	1157:4:35594:35653	8201103	37	True				
ANR	8201508	CallExpression	"gs_free_object ( mem , file_name , ""pl_load_tt_font file_name"" )"		8201103	0					
ANR	8201509	Callee	gs_free_object		8201103	0					
ANR	8201510	Identifier	gs_free_object		8201103	0					
ANR	8201511	ArgumentList	mem		8201103	1					
ANR	8201512	Argument	mem		8201103	0					
ANR	8201513	Identifier	mem		8201103	0					
ANR	8201514	Argument	file_name		8201103	1					
ANR	8201515	Identifier	file_name		8201103	0					
ANR	8201516	Argument	"""pl_load_tt_font file_name"""		8201103	2					
ANR	8201517	PrimaryExpression	"""pl_load_tt_font file_name"""		8201103	0					
ANR	8201518	ExpressionStatement	return_error ( code )	1158:4:35659:35677	8201103	38	True				
ANR	8201519	CallExpression	return_error ( code )		8201103	0					
ANR	8201520	Callee	return_error		8201103	0					
ANR	8201521	Identifier	return_error		8201103	0					
ANR	8201522	ArgumentList	code		8201103	1					
ANR	8201523	Argument	code		8201103	0					
ANR	8201524	Identifier	code		8201103	0					
ANR	8201525	ReturnType	int		8201103	1					
ANR	8201526	Identifier	pl_load_tt_font		8201103	2					
ANR	8201527	ParameterList	"stream * in , gs_font_dir * pdir , gs_memory_t * mem , long unique_id , pl_font_t * * pplfont , char * font_name"		8201103	3					
ANR	8201528	Parameter	stream * in	1082:16:33161:33171	8201103	0	True				
ANR	8201529	ParameterType	stream *		8201103	0					
ANR	8201530	Identifier	in		8201103	1					
ANR	8201531	Parameter	gs_font_dir * pdir	1082:29:33174:33191	8201103	1	True				
ANR	8201532	ParameterType	gs_font_dir *		8201103	0					
ANR	8201533	Identifier	pdir		8201103	1					
ANR	8201534	Parameter	gs_memory_t * mem	1082:49:33194:33210	8201103	2	True				
ANR	8201535	ParameterType	gs_memory_t *		8201103	0					
ANR	8201536	Identifier	mem		8201103	1					
ANR	8201537	Parameter	long unique_id	1083:16:33229:33242	8201103	3	True				
ANR	8201538	ParameterType	long		8201103	0					
ANR	8201539	Identifier	unique_id		8201103	1					
ANR	8201540	Parameter	pl_font_t * * pplfont	1083:32:33245:33264	8201103	4	True				
ANR	8201541	ParameterType	pl_font_t * *		8201103	0					
ANR	8201542	Identifier	pplfont		8201103	1					
ANR	8201543	Parameter	char * font_name	1083:54:33267:33281	8201103	5	True				
ANR	8201544	ParameterType	char *		8201103	0					
ANR	8201545	Identifier	font_name		8201103	1					
ANR	8201546	CFGEntryNode	ENTRY		8201103		True				
ANR	8201547	CFGExitNode	EXIT		8201103		True				
ANR	8201548	Symbol	pl_fapi_passfont		8201103						
ANR	8201549	Symbol	pplfont		8201103						
ANR	8201550	Symbol	plfont -> scaling_technology		8201103						
ANR	8201551	Symbol	code		8201103						
ANR	8201552	Symbol	gs_alloc_struct		8201103						
ANR	8201553	Symbol	plfont -> header		8201103						
ANR	8201554	Symbol	sfilename		8201103						
ANR	8201555	Symbol	plfont		8201103						
ANR	8201556	Symbol	plfont -> large_sizes		8201103						
ANR	8201557	Symbol	font_name		8201103						
ANR	8201558	Symbol	gs_definefont		8201103						
ANR	8201559	Symbol	pl_fill_in_tt_font		8201103						
ANR	8201560	Symbol	mem		8201103						
ANR	8201561	Symbol	& pfname		8201103						
ANR	8201562	Symbol	pl_alloc_tt_fontfile_buffer		8201103						
ANR	8201563	Symbol	pfname . size		8201103						
ANR	8201564	Symbol	plfont -> font_type		8201103						
ANR	8201565	Symbol	* pplfont		8201103						
ANR	8201566	Symbol	gs_alloc_bytes		8201103						
ANR	8201567	Symbol	unique_id		8201103						
ANR	8201568	Symbol	NULL		8201103						
ANR	8201569	Symbol	plfont -> header_size		8201103						
ANR	8201570	Symbol	in		8201103						
ANR	8201571	Symbol	pfont		8201103						
ANR	8201572	Symbol	file_name		8201103						
ANR	8201573	Symbol	false		8201103						
ANR	8201574	Symbol	pdir		8201103						
ANR	8201575	Symbol	plfont -> is_xl_format		8201103						
ANR	8201576	Symbol	& size		8201103						
ANR	8201577	Symbol	pl_fill_in_font		8201103						
ANR	8201578	Symbol	plfont -> offsets		8201103						
ANR	8201579	Symbol	plft_Unicode		8201103						
ANR	8201580	Symbol	pfname		8201103						
ANR	8201581	Symbol	& tt_font_datap		8201103						
ANR	8201582	Symbol	plfont -> offsets . GT		8201103						
ANR	8201583	Symbol	gs_error_VMerror		8201103						
ANR	8201584	Symbol	* pfont		8201103						
ANR	8201585	Symbol	size		8201103						
ANR	8201586	Symbol	* plfont		8201103						
ANR	8201587	Symbol	true		8201103						
ANR	8201588	Symbol	plfst_TrueType		8201103						
ANR	8201589	Symbol	& st_gs_font_type42		8201103						
ANR	8201590	Symbol	pfname . data		8201103						
ANR	8201591	Symbol	gs_font_type42		8201103						
ANR	8201592	Symbol	pl_alloc_font		8201103						
ANR	8201593	Symbol	tt_font_datap		8201103						
ANR	8201594	Function	pl_load_resident_font_data_from_file	1162:0:35719:36903							
ANR	8201595	FunctionDef	"pl_load_resident_font_data_from_file (gs_memory_t * mem , pl_font_t * plfont)"		8201594	0					
ANR	8201596	CompoundStatement		1164:0:35799:36903	8201594	0					
ANR	8201597	IdentifierDeclStatement	"ulong len , size ;"	1166:4:35806:35821	8201594	0	True				
ANR	8201598	IdentifierDecl	len		8201594	0					
ANR	8201599	IdentifierDeclType	ulong		8201594	0					
ANR	8201600	Identifier	len		8201594	1					
ANR	8201601	IdentifierDecl	size		8201594	1					
ANR	8201602	IdentifierDeclType	ulong		8201594	0					
ANR	8201603	Identifier	size		8201594	1					
ANR	8201604	IdentifierDeclStatement	byte * data ;	1167:4:35827:35837	8201594	1	True				
ANR	8201605	IdentifierDecl	* data		8201594	0					
ANR	8201606	IdentifierDeclType	byte *		8201594	0					
ANR	8201607	Identifier	data		8201594	1					
ANR	8201608	IfStatement	if ( plfont -> font_file && ! plfont -> font_file_loaded )		8201594	2					
ANR	8201609	Condition	plfont -> font_file && ! plfont -> font_file_loaded	1169:8:35848:35893	8201594	0	True				
ANR	8201610	AndExpression	plfont -> font_file && ! plfont -> font_file_loaded		8201594	0		&&			
ANR	8201611	PtrMemberAccess	plfont -> font_file		8201594	0					
ANR	8201612	Identifier	plfont		8201594	0					
ANR	8201613	Identifier	font_file		8201594	1					
ANR	8201614	UnaryOperationExpression	! plfont -> font_file_loaded		8201594	1					
ANR	8201615	UnaryOperator	!		8201594	0					
ANR	8201616	PtrMemberAccess	plfont -> font_file_loaded		8201594	1					
ANR	8201617	Identifier	plfont		8201594	0					
ANR	8201618	Identifier	font_file_loaded		8201594	1					
ANR	8201619	CompoundStatement		7:8:106:162	8201594	1					
ANR	8201620	IdentifierDeclStatement	"stream * in = sfopen ( plfont -> font_file , gp_fmode_rb , mem ) ;"	1170:8:35906:35962	8201594	0	True				
ANR	8201621	IdentifierDecl	"* in = sfopen ( plfont -> font_file , gp_fmode_rb , mem )"		8201594	0					
ANR	8201622	IdentifierDeclType	stream *		8201594	0					
ANR	8201623	Identifier	in		8201594	1					
ANR	8201624	AssignmentExpression	"* in = sfopen ( plfont -> font_file , gp_fmode_rb , mem )"		8201594	2		=			
ANR	8201625	Identifier	in		8201594	0					
ANR	8201626	CallExpression	"sfopen ( plfont -> font_file , gp_fmode_rb , mem )"		8201594	1					
ANR	8201627	Callee	sfopen		8201594	0					
ANR	8201628	Identifier	sfopen		8201594	0					
ANR	8201629	ArgumentList	plfont -> font_file		8201594	1					
ANR	8201630	Argument	plfont -> font_file		8201594	0					
ANR	8201631	PtrMemberAccess	plfont -> font_file		8201594	0					
ANR	8201632	Identifier	plfont		8201594	0					
ANR	8201633	Identifier	font_file		8201594	1					
ANR	8201634	Argument	gp_fmode_rb		8201594	1					
ANR	8201635	Identifier	gp_fmode_rb		8201594	0					
ANR	8201636	Argument	mem		8201594	2					
ANR	8201637	Identifier	mem		8201594	0					
ANR	8201638	IfStatement	if ( in == NULL )		8201594	1					
ANR	8201639	Condition	in == NULL	1172:12:35977:35986	8201594	0	True				
ANR	8201640	EqualityExpression	in == NULL		8201594	0		==			
ANR	8201641	Identifier	in		8201594	0					
ANR	8201642	Identifier	NULL		8201594	1					
ANR	8201643	ReturnStatement	return - 1 ;	1173:12:36001:36010	8201594	1	True				
ANR	8201644	UnaryOperationExpression	- 1		8201594	0					
ANR	8201645	UnaryOperator	-		8201594	0					
ANR	8201646	PrimaryExpression	1		8201594	1					
ANR	8201647	ExpressionStatement	"len = ( sfseek ( in , 0L , SEEK_END ) , sftell ( in ) )"	1175:8:36095:36139	8201594	2	True				
ANR	8201648	AssignmentExpression	"len = ( sfseek ( in , 0L , SEEK_END ) , sftell ( in ) )"		8201594	0		=			
ANR	8201649	Identifier	len		8201594	0					
ANR	8201650	Expression	"sfseek ( in , 0L , SEEK_END ) , sftell ( in )"		8201594	1					
ANR	8201651	CallExpression	"sfseek ( in , 0L , SEEK_END )"		8201594	0					
ANR	8201652	Callee	sfseek		8201594	0					
ANR	8201653	Identifier	sfseek		8201594	0					
ANR	8201654	ArgumentList	in		8201594	1					
ANR	8201655	Argument	in		8201594	0					
ANR	8201656	Identifier	in		8201594	0					
ANR	8201657	Argument	0L		8201594	1					
ANR	8201658	PrimaryExpression	0L		8201594	0					
ANR	8201659	Argument	SEEK_END		8201594	2					
ANR	8201660	Identifier	SEEK_END		8201594	0					
ANR	8201661	CallExpression	sftell ( in )		8201594	1					
ANR	8201662	Callee	sftell		8201594	0					
ANR	8201663	Identifier	sftell		8201594	0					
ANR	8201664	ArgumentList	in		8201594	1					
ANR	8201665	Argument	in		8201594	0					
ANR	8201666	Identifier	in		8201594	0					
ANR	8201667	ExpressionStatement	size = 6 + len	1176:8:36149:36163	8201594	3	True				
ANR	8201668	AssignmentExpression	size = 6 + len		8201594	0		=			
ANR	8201669	Identifier	size		8201594	0					
ANR	8201670	AdditiveExpression	6 + len		8201594	1		+			
ANR	8201671	PrimaryExpression	6		8201594	0					
ANR	8201672	Identifier	len		8201594	1					
ANR	8201673	IfStatement	if ( size != ( uint ) size )		8201594	4					
ANR	8201674	Condition	size != ( uint ) size	1178:12:36222:36240	8201594	0	True				
ANR	8201675	EqualityExpression	size != ( uint ) size		8201594	0		!=			
ANR	8201676	Identifier	size		8201594	0					
ANR	8201677	CastExpression	( uint ) size		8201594	1					
ANR	8201678	CastTarget	uint		8201594	0					
ANR	8201679	Identifier	size		8201594	1					
ANR	8201680	CompoundStatement		15:33:443:443	8201594	1					
ANR	8201681	ExpressionStatement	sfclose ( in )	1184:12:36458:36469	8201594	0	True				
ANR	8201682	CallExpression	sfclose ( in )		8201594	0					
ANR	8201683	Callee	sfclose		8201594	0					
ANR	8201684	Identifier	sfclose		8201594	0					
ANR	8201685	ArgumentList	in		8201594	1					
ANR	8201686	Argument	in		8201594	0					
ANR	8201687	Identifier	in		8201594	0					
ANR	8201688	ExpressionStatement	return_error ( gs_error_VMerror )	1185:12:36483:36513	8201594	1	True				
ANR	8201689	CallExpression	return_error ( gs_error_VMerror )		8201594	0					
ANR	8201690	Callee	return_error		8201594	0					
ANR	8201691	Identifier	return_error		8201594	0					
ANR	8201692	ArgumentList	gs_error_VMerror		8201594	1					
ANR	8201693	Argument	gs_error_VMerror		8201594	0					
ANR	8201694	Identifier	gs_error_VMerror		8201594	0					
ANR	8201695	ExpressionStatement	srewind ( in )	1187:8:36533:36544	8201594	5	True				
ANR	8201696	CallExpression	srewind ( in )		8201594	0					
ANR	8201697	Callee	srewind		8201594	0					
ANR	8201698	Identifier	srewind		8201594	0					
ANR	8201699	ArgumentList	in		8201594	1					
ANR	8201700	Argument	in		8201594	0					
ANR	8201701	Identifier	in		8201594	0					
ANR	8201702	ExpressionStatement	"data = gs_alloc_bytes ( mem , size , ""pl_tt_load_font data"" )"	1188:8:36554:36610	8201594	6	True				
ANR	8201703	AssignmentExpression	"data = gs_alloc_bytes ( mem , size , ""pl_tt_load_font data"" )"		8201594	0		=			
ANR	8201704	Identifier	data		8201594	0					
ANR	8201705	CallExpression	"gs_alloc_bytes ( mem , size , ""pl_tt_load_font data"" )"		8201594	1					
ANR	8201706	Callee	gs_alloc_bytes		8201594	0					
ANR	8201707	Identifier	gs_alloc_bytes		8201594	0					
ANR	8201708	ArgumentList	mem		8201594	1					
ANR	8201709	Argument	mem		8201594	0					
ANR	8201710	Identifier	mem		8201594	0					
ANR	8201711	Argument	size		8201594	1					
ANR	8201712	Identifier	size		8201594	0					
ANR	8201713	Argument	"""pl_tt_load_font data"""		8201594	2					
ANR	8201714	PrimaryExpression	"""pl_tt_load_font data"""		8201594	0					
ANR	8201715	IfStatement	if ( data == 0 )		8201594	7					
ANR	8201716	Condition	data == 0	1189:12:36624:36632	8201594	0	True				
ANR	8201717	EqualityExpression	data == 0		8201594	0		==			
ANR	8201718	Identifier	data		8201594	0					
ANR	8201719	PrimaryExpression	0		8201594	1					
ANR	8201720	CompoundStatement		26:23:835:835	8201594	1					
ANR	8201721	ExpressionStatement	sfclose ( in )	1190:12:36649:36660	8201594	0	True				
ANR	8201722	CallExpression	sfclose ( in )		8201594	0					
ANR	8201723	Callee	sfclose		8201594	0					
ANR	8201724	Identifier	sfclose		8201594	0					
ANR	8201725	ArgumentList	in		8201594	1					
ANR	8201726	Argument	in		8201594	0					
ANR	8201727	Identifier	in		8201594	0					
ANR	8201728	ExpressionStatement	return_error ( gs_error_VMerror )	1191:12:36674:36704	8201594	1	True				
ANR	8201729	CallExpression	return_error ( gs_error_VMerror )		8201594	0					
ANR	8201730	Callee	return_error		8201594	0					
ANR	8201731	Identifier	return_error		8201594	0					
ANR	8201732	ArgumentList	gs_error_VMerror		8201594	1					
ANR	8201733	Argument	gs_error_VMerror		8201594	0					
ANR	8201734	Identifier	gs_error_VMerror		8201594	0					
ANR	8201735	ExpressionStatement	"sfread ( data + 6 , 1 , len , in )"	1193:8:36724:36752	8201594	8	True				
ANR	8201736	CallExpression	"sfread ( data + 6 , 1 , len , in )"		8201594	0					
ANR	8201737	Callee	sfread		8201594	0					
ANR	8201738	Identifier	sfread		8201594	0					
ANR	8201739	ArgumentList	data + 6		8201594	1					
ANR	8201740	Argument	data + 6		8201594	0					
ANR	8201741	AdditiveExpression	data + 6		8201594	0		+			
ANR	8201742	Identifier	data		8201594	0					
ANR	8201743	PrimaryExpression	6		8201594	1					
ANR	8201744	Argument	1		8201594	1					
ANR	8201745	PrimaryExpression	1		8201594	0					
ANR	8201746	Argument	len		8201594	2					
ANR	8201747	Identifier	len		8201594	0					
ANR	8201748	Argument	in		8201594	3					
ANR	8201749	Identifier	in		8201594	0					
ANR	8201750	ExpressionStatement	sfclose ( in )	1194:8:36762:36773	8201594	9	True				
ANR	8201751	CallExpression	sfclose ( in )		8201594	0					
ANR	8201752	Callee	sfclose		8201594	0					
ANR	8201753	Identifier	sfclose		8201594	0					
ANR	8201754	ArgumentList	in		8201594	1					
ANR	8201755	Argument	in		8201594	0					
ANR	8201756	Identifier	in		8201594	0					
ANR	8201757	ExpressionStatement	plfont -> header = data	1195:8:36783:36804	8201594	10	True				
ANR	8201758	AssignmentExpression	plfont -> header = data		8201594	0		=			
ANR	8201759	PtrMemberAccess	plfont -> header		8201594	0					
ANR	8201760	Identifier	plfont		8201594	0					
ANR	8201761	Identifier	header		8201594	1					
ANR	8201762	Identifier	data		8201594	1					
ANR	8201763	ExpressionStatement	plfont -> header_size = size	1196:8:36814:36840	8201594	11	True				
ANR	8201764	AssignmentExpression	plfont -> header_size = size		8201594	0		=			
ANR	8201765	PtrMemberAccess	plfont -> header_size		8201594	0					
ANR	8201766	Identifier	plfont		8201594	0					
ANR	8201767	Identifier	header_size		8201594	1					
ANR	8201768	Identifier	size		8201594	1					
ANR	8201769	ExpressionStatement	plfont -> font_file_loaded = true	1197:8:36850:36881	8201594	12	True				
ANR	8201770	AssignmentExpression	plfont -> font_file_loaded = true		8201594	0		=			
ANR	8201771	PtrMemberAccess	plfont -> font_file_loaded		8201594	0					
ANR	8201772	Identifier	plfont		8201594	0					
ANR	8201773	Identifier	font_file_loaded		8201594	1					
ANR	8201774	Identifier	true		8201594	1					
ANR	8201775	ReturnStatement	return 0 ;	1199:4:36893:36901	8201594	3	True				
ANR	8201776	PrimaryExpression	0		8201594	0					
ANR	8201777	ReturnType	int		8201594	1					
ANR	8201778	Identifier	pl_load_resident_font_data_from_file		8201594	2					
ANR	8201779	ParameterList	"gs_memory_t * mem , pl_font_t * plfont"		8201594	3					
ANR	8201780	Parameter	gs_memory_t * mem	1163:37:35760:35776	8201594	0	True				
ANR	8201781	ParameterType	gs_memory_t *		8201594	0					
ANR	8201782	Identifier	mem		8201594	1					
ANR	8201783	Parameter	pl_font_t * plfont	1163:56:35779:35796	8201594	1	True				
ANR	8201784	ParameterType	pl_font_t *		8201594	0					
ANR	8201785	Identifier	plfont		8201594	1					
ANR	8201786	CFGEntryNode	ENTRY		8201594		True				
ANR	8201787	CFGExitNode	EXIT		8201594		True				
ANR	8201788	Symbol	gs_alloc_bytes		8201594						
ANR	8201789	Symbol	NULL		8201594						
ANR	8201790	Symbol	plfont -> header_size		8201594						
ANR	8201791	Symbol	data		8201594						
ANR	8201792	Symbol	in		8201594						
ANR	8201793	Symbol	plfont -> header		8201594						
ANR	8201794	Symbol	plfont		8201594						
ANR	8201795	Symbol	SEEK_END		8201594						
ANR	8201796	Symbol	gs_error_VMerror		8201594						
ANR	8201797	Symbol	sfopen		8201594						
ANR	8201798	Symbol	mem		8201594						
ANR	8201799	Symbol	len		8201594						
ANR	8201800	Symbol	size		8201594						
ANR	8201801	Symbol	sftell		8201594						
ANR	8201802	Symbol	* plfont		8201594						
ANR	8201803	Symbol	gp_fmode_rb		8201594						
ANR	8201804	Symbol	true		8201594						
ANR	8201805	Symbol	plfont -> font_file_loaded		8201594						
ANR	8201806	Symbol	plfont -> font_file		8201594						
ANR	8201807	Symbol	sfseek		8201594						
ANR	8201808	Function	pl_store_resident_font_data_in_file	1203:0:36974:37915							
ANR	8201809	FunctionDef	"pl_store_resident_font_data_in_file (char * font_file , gs_memory_t * mem , pl_font_t * plfont)"		8201808	0					
ANR	8201810	CompoundStatement		1206:0:37106:37915	8201808	0					
ANR	8201811	IfStatement	if ( plfont -> header )		8201808	0					
ANR	8201812	Condition	plfont -> header	1208:8:37147:37160	8201808	0	True				
ANR	8201813	PtrMemberAccess	plfont -> header		8201808	0					
ANR	8201814	Identifier	plfont		8201808	0					
ANR	8201815	Identifier	header		8201808	1					
ANR	8201816	CompoundStatement		3:24:56:56	8201808	1					
ANR	8201817	ExpressionStatement	"gs_free_object ( mem , plfont -> header , ""pl_store_resident_font_data_in_file"" )"	1209:8:37173:37270	8201808	0	True				
ANR	8201818	CallExpression	"gs_free_object ( mem , plfont -> header , ""pl_store_resident_font_data_in_file"" )"		8201808	0					
ANR	8201819	Callee	gs_free_object		8201808	0					
ANR	8201820	Identifier	gs_free_object		8201808	0					
ANR	8201821	ArgumentList	mem		8201808	1					
ANR	8201822	Argument	mem		8201808	0					
ANR	8201823	Identifier	mem		8201808	0					
ANR	8201824	Argument	plfont -> header		8201808	1					
ANR	8201825	PtrMemberAccess	plfont -> header		8201808	0					
ANR	8201826	Identifier	plfont		8201808	0					
ANR	8201827	Identifier	header		8201808	1					
ANR	8201828	Argument	"""pl_store_resident_font_data_in_file"""		8201808	2					
ANR	8201829	PrimaryExpression	"""pl_store_resident_font_data_in_file"""		8201808	0					
ANR	8201830	ExpressionStatement	plfont -> header = 0	1211:8:37280:37298	8201808	1	True				
ANR	8201831	AssignmentExpression	plfont -> header = 0		8201808	0		=			
ANR	8201832	PtrMemberAccess	plfont -> header		8201808	0					
ANR	8201833	Identifier	plfont		8201808	0					
ANR	8201834	Identifier	header		8201808	1					
ANR	8201835	PrimaryExpression	0		8201808	1					
ANR	8201836	ExpressionStatement	plfont -> header_size = 0	1212:8:37308:37331	8201808	2	True				
ANR	8201837	AssignmentExpression	plfont -> header_size = 0		8201808	0		=			
ANR	8201838	PtrMemberAccess	plfont -> header_size		8201808	0					
ANR	8201839	Identifier	plfont		8201808	0					
ANR	8201840	Identifier	header_size		8201808	1					
ANR	8201841	PrimaryExpression	0		8201808	1					
ANR	8201842	ElseStatement	else		8201808	0					
ANR	8201843	CompoundStatement		8:11:237:237	8201808	0					
ANR	8201844	ReturnStatement	return 0 ;	1215:8:37382:37390	8201808	0	True				
ANR	8201845	PrimaryExpression	0		8201808	0					
ANR	8201846	IfStatement	if ( ! plfont -> font_file )		8201808	1					
ANR	8201847	Condition	! plfont -> font_file	1219:8:37511:37528	8201808	0	True				
ANR	8201848	UnaryOperationExpression	! plfont -> font_file		8201808	0					
ANR	8201849	UnaryOperator	!		8201808	0					
ANR	8201850	PtrMemberAccess	plfont -> font_file		8201808	1					
ANR	8201851	Identifier	plfont		8201808	0					
ANR	8201852	Identifier	font_file		8201808	1					
ANR	8201853	CompoundStatement		14:28:424:424	8201808	1					
ANR	8201854	ExpressionStatement	"plfont -> font_file = ( char * ) gs_alloc_bytes ( mem , strlen ( font_file ) + 1 , ""pl_store_resident_font_data_in_file"" )"	1220:8:37541:37697	8201808	0	True				
ANR	8201855	AssignmentExpression	"plfont -> font_file = ( char * ) gs_alloc_bytes ( mem , strlen ( font_file ) + 1 , ""pl_store_resident_font_data_in_file"" )"		8201808	0		=			
ANR	8201856	PtrMemberAccess	plfont -> font_file		8201808	0					
ANR	8201857	Identifier	plfont		8201808	0					
ANR	8201858	Identifier	font_file		8201808	1					
ANR	8201859	CastExpression	"( char * ) gs_alloc_bytes ( mem , strlen ( font_file ) + 1 , ""pl_store_resident_font_data_in_file"" )"		8201808	1					
ANR	8201860	CastTarget	char *		8201808	0					
ANR	8201861	CallExpression	"gs_alloc_bytes ( mem , strlen ( font_file ) + 1 , ""pl_store_resident_font_data_in_file"" )"		8201808	1					
ANR	8201862	Callee	gs_alloc_bytes		8201808	0					
ANR	8201863	Identifier	gs_alloc_bytes		8201808	0					
ANR	8201864	ArgumentList	mem		8201808	1					
ANR	8201865	Argument	mem		8201808	0					
ANR	8201866	Identifier	mem		8201808	0					
ANR	8201867	Argument	strlen ( font_file ) + 1		8201808	1					
ANR	8201868	AdditiveExpression	strlen ( font_file ) + 1		8201808	0		+			
ANR	8201869	CallExpression	strlen ( font_file )		8201808	0					
ANR	8201870	Callee	strlen		8201808	0					
ANR	8201871	Identifier	strlen		8201808	0					
ANR	8201872	ArgumentList	font_file		8201808	1					
ANR	8201873	Argument	font_file		8201808	0					
ANR	8201874	Identifier	font_file		8201808	0					
ANR	8201875	PrimaryExpression	1		8201808	1					
ANR	8201876	Argument	"""pl_store_resident_font_data_in_file"""		8201808	2					
ANR	8201877	PrimaryExpression	"""pl_store_resident_font_data_in_file"""		8201808	0					
ANR	8201878	IfStatement	if ( plfont -> font_file == 0 )		8201808	1					
ANR	8201879	Condition	plfont -> font_file == 0	1223:12:37711:37732	8201808	0	True				
ANR	8201880	EqualityExpression	plfont -> font_file == 0		8201808	0		==			
ANR	8201881	PtrMemberAccess	plfont -> font_file		8201808	0					
ANR	8201882	Identifier	plfont		8201808	0					
ANR	8201883	Identifier	font_file		8201808	1					
ANR	8201884	PrimaryExpression	0		8201808	1					
ANR	8201885	ReturnStatement	return - 1 ;	1224:12:37747:37756	8201808	1	True				
ANR	8201886	UnaryOperationExpression	- 1		8201808	0					
ANR	8201887	UnaryOperator	-		8201808	0					
ANR	8201888	PrimaryExpression	1		8201808	1					
ANR	8201889	ExpressionStatement	"strcpy ( plfont -> font_file , font_file )"	1225:8:37766:37802	8201808	2	True				
ANR	8201890	CallExpression	"strcpy ( plfont -> font_file , font_file )"		8201808	0					
ANR	8201891	Callee	strcpy		8201808	0					
ANR	8201892	Identifier	strcpy		8201808	0					
ANR	8201893	ArgumentList	plfont -> font_file		8201808	1					
ANR	8201894	Argument	plfont -> font_file		8201808	0					
ANR	8201895	PtrMemberAccess	plfont -> font_file		8201808	0					
ANR	8201896	Identifier	plfont		8201808	0					
ANR	8201897	Identifier	font_file		8201808	1					
ANR	8201898	Argument	font_file		8201808	1					
ANR	8201899	Identifier	font_file		8201808	0					
ANR	8201900	ExpressionStatement	plfont -> font_file_loaded = false	1228:4:37867:37899	8201808	2	True				
ANR	8201901	AssignmentExpression	plfont -> font_file_loaded = false		8201808	0		=			
ANR	8201902	PtrMemberAccess	plfont -> font_file_loaded		8201808	0					
ANR	8201903	Identifier	plfont		8201808	0					
ANR	8201904	Identifier	font_file_loaded		8201808	1					
ANR	8201905	Identifier	false		8201808	1					
ANR	8201906	ReturnStatement	return 0 ;	1229:4:37905:37913	8201808	3	True				
ANR	8201907	PrimaryExpression	0		8201808	0					
ANR	8201908	ReturnType	int		8201808	1					
ANR	8201909	Identifier	pl_store_resident_font_data_in_file		8201808	2					
ANR	8201910	ParameterList	"char * font_file , gs_memory_t * mem , pl_font_t * plfont"		8201808	3					
ANR	8201911	Parameter	char * font_file	1204:36:37014:37028	8201808	0	True				
ANR	8201912	ParameterType	char *		8201808	0					
ANR	8201913	Identifier	font_file		8201808	1					
ANR	8201914	Parameter	gs_memory_t * mem	1204:53:37031:37047	8201808	1	True				
ANR	8201915	ParameterType	gs_memory_t *		8201808	0					
ANR	8201916	Identifier	mem		8201808	1					
ANR	8201917	Parameter	pl_font_t * plfont	1205:36:37086:37103	8201808	2	True				
ANR	8201918	ParameterType	pl_font_t *		8201808	0					
ANR	8201919	Identifier	plfont		8201808	1					
ANR	8201920	CFGEntryNode	ENTRY		8201808		True				
ANR	8201921	CFGExitNode	EXIT		8201808		True				
ANR	8201922	Symbol	strlen		8201808						
ANR	8201923	Symbol	gs_alloc_bytes		8201808						
ANR	8201924	Symbol	plfont -> header_size		8201808						
ANR	8201925	Symbol	mem		8201808						
ANR	8201926	Symbol	plfont -> header		8201808						
ANR	8201927	Symbol	* plfont		8201808						
ANR	8201928	Symbol	false		8201808						
ANR	8201929	Symbol	plfont -> font_file_loaded		8201808						
ANR	8201930	Symbol	plfont -> font_file		8201808						
ANR	8201931	Symbol	plfont		8201808						
ANR	8201932	Symbol	font_file		8201808						
ANR	8201933	Function	pl_lookup_font_by_pjl_number	1232:0:37918:38333							
ANR	8201934	FunctionDef	"pl_lookup_font_by_pjl_number (pl_dict_t * pfontdict , int pjl_font_number)"		8201933	0					
ANR	8201935	CompoundStatement		1234:0:38003:38333	8201933	0					
ANR	8201936	IdentifierDeclStatement	pl_dict_enum_t dictp ;	1235:4:38009:38029	8201933	0	True				
ANR	8201937	IdentifierDecl	dictp		8201933	0					
ANR	8201938	IdentifierDeclType	pl_dict_enum_t		8201933	0					
ANR	8201939	Identifier	dictp		8201933	1					
ANR	8201940	IdentifierDeclStatement	gs_const_string key ;	1236:4:38035:38054	8201933	1	True				
ANR	8201941	IdentifierDecl	key		8201933	0					
ANR	8201942	IdentifierDeclType	gs_const_string		8201933	0					
ANR	8201943	Identifier	key		8201933	1					
ANR	8201944	IdentifierDeclStatement	void * value ;	1237:4:38060:38071	8201933	2	True				
ANR	8201945	IdentifierDecl	* value		8201933	0					
ANR	8201946	IdentifierDeclType	void *		8201933	0					
ANR	8201947	Identifier	value		8201933	1					
ANR	8201948	ExpressionStatement	"pl_dict_enum_begin ( pfontdict , & dictp )"	1239:4:38078:38115	8201933	3	True				
ANR	8201949	CallExpression	"pl_dict_enum_begin ( pfontdict , & dictp )"		8201933	0					
ANR	8201950	Callee	pl_dict_enum_begin		8201933	0					
ANR	8201951	Identifier	pl_dict_enum_begin		8201933	0					
ANR	8201952	ArgumentList	pfontdict		8201933	1					
ANR	8201953	Argument	pfontdict		8201933	0					
ANR	8201954	Identifier	pfontdict		8201933	0					
ANR	8201955	Argument	& dictp		8201933	1					
ANR	8201956	UnaryOperationExpression	& dictp		8201933	0					
ANR	8201957	UnaryOperator	&		8201933	0					
ANR	8201958	Identifier	dictp		8201933	1					
ANR	8201959	WhileStatement	"while ( pl_dict_enum_next ( & dictp , & key , & value ) )"		8201933	4					
ANR	8201960	Condition	"pl_dict_enum_next ( & dictp , & key , & value )"	1240:11:38128:38166	8201933	0	True				
ANR	8201961	CallExpression	"pl_dict_enum_next ( & dictp , & key , & value )"		8201933	0					
ANR	8201962	Callee	pl_dict_enum_next		8201933	0					
ANR	8201963	Identifier	pl_dict_enum_next		8201933	0					
ANR	8201964	ArgumentList	& dictp		8201933	1					
ANR	8201965	Argument	& dictp		8201933	0					
ANR	8201966	UnaryOperationExpression	& dictp		8201933	0					
ANR	8201967	UnaryOperator	&		8201933	0					
ANR	8201968	Identifier	dictp		8201933	1					
ANR	8201969	Argument	& key		8201933	1					
ANR	8201970	UnaryOperationExpression	& key		8201933	0					
ANR	8201971	UnaryOperator	&		8201933	0					
ANR	8201972	Identifier	key		8201933	1					
ANR	8201973	Argument	& value		8201933	2					
ANR	8201974	UnaryOperationExpression	& value		8201933	0					
ANR	8201975	UnaryOperator	&		8201933	0					
ANR	8201976	Identifier	value		8201933	1					
ANR	8201977	CompoundStatement		8:8:175:200	8201933	1					
ANR	8201978	IdentifierDeclStatement	pl_font_t * plfont = value ;	1241:8:38179:38204	8201933	0	True				
ANR	8201979	IdentifierDecl	* plfont = value		8201933	0					
ANR	8201980	IdentifierDeclType	pl_font_t *		8201933	0					
ANR	8201981	Identifier	plfont		8201933	1					
ANR	8201982	AssignmentExpression	* plfont = value		8201933	2		=			
ANR	8201983	Identifier	value		8201933	0					
ANR	8201984	Identifier	value		8201933	1					
ANR	8201985	IfStatement	if ( plfont -> params . pjl_font_number == pjl_font_number )		8201933	1					
ANR	8201986	Condition	plfont -> params . pjl_font_number == pjl_font_number	1243:12:38219:38267	8201933	0	True				
ANR	8201987	EqualityExpression	plfont -> params . pjl_font_number == pjl_font_number		8201933	0		==			
ANR	8201988	MemberAccess	plfont -> params . pjl_font_number		8201933	0					
ANR	8201989	PtrMemberAccess	plfont -> params		8201933	0					
ANR	8201990	Identifier	plfont		8201933	0					
ANR	8201991	Identifier	params		8201933	1					
ANR	8201992	Identifier	pjl_font_number		8201933	1					
ANR	8201993	Identifier	pjl_font_number		8201933	1					
ANR	8201994	ReturnStatement	return value ;	1244:12:38282:38294	8201933	1	True				
ANR	8201995	Identifier	value		8201933	0					
ANR	8201996	ReturnStatement	return ( pl_font_t * ) NULL ;	1246:4:38306:38331	8201933	5	True				
ANR	8201997	CastExpression	( pl_font_t * ) NULL		8201933	0					
ANR	8201998	CastTarget	pl_font_t *		8201933	0					
ANR	8201999	Identifier	NULL		8201933	1					
ANR	8202000	ReturnType	pl_font_t *		8201933	1					
ANR	8202001	Identifier	pl_lookup_font_by_pjl_number		8201933	2					
ANR	8202002	ParameterList	"pl_dict_t * pfontdict , int pjl_font_number"		8201933	3					
ANR	8202003	Parameter	pl_dict_t * pfontdict	1233:29:37959:37979	8201933	0	True				
ANR	8202004	ParameterType	pl_dict_t *		8201933	0					
ANR	8202005	Identifier	pfontdict		8201933	1					
ANR	8202006	Parameter	int pjl_font_number	1233:52:37982:38000	8201933	1	True				
ANR	8202007	ParameterType	int		8201933	0					
ANR	8202008	Identifier	pjl_font_number		8201933	1					
ANR	8202009	CFGEntryNode	ENTRY		8201933		True				
ANR	8202010	CFGExitNode	EXIT		8201933		True				
ANR	8202011	Symbol	& key		8201933						
ANR	8202012	Symbol	& value		8201933						
ANR	8202013	Symbol	NULL		8201933						
ANR	8202014	Symbol	dictp		8201933						
ANR	8202015	Symbol	plfont		8201933						
ANR	8202016	Symbol	pl_dict_enum_next		8201933						
ANR	8202017	Symbol	pfontdict		8201933						
ANR	8202018	Symbol	plfont -> params		8201933						
ANR	8202019	Symbol	* plfont		8201933						
ANR	8202020	Symbol	& dictp		8201933						
ANR	8202021	Symbol	pjl_font_number		8201933						
ANR	8202022	Symbol	plfont -> params . pjl_font_number		8201933						
ANR	8202023	Symbol	value		8201933						
ANR	8202024	Symbol	key		8201933						
