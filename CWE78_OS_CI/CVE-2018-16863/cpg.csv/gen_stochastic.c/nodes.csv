command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4903987	File	data/converged/CVE-2018-16863_ghostpdl/gen_stochastic.c								
ANR	4903988	DeclStmt									
ANR	4903989	Decl							int	int	array_width
ANR	4903990	Decl							int	int	array_height
ANR	4903991	Decl							int	int [ 2 ]	resolution
ANR	4903992	DeclStmt									
ANR	4903993	Decl							int	int	quiet
ANR	4903994	DeclStmt									
ANR	4903995	Decl							FILE	FILE *	fp
ANR	4903996	DeclStmt									
ANR	4903997	Decl							double	double [ MAX_ARRAY_WIDTH * MAX_ARRAY_HEIGHT ]	Val
ANR	4903998	DeclStmt									
ANR	4903999	Decl							double	double	MinVal
ANR	4904000	Decl							double	double	MaxVal
ANR	4904001	Decl							double	double	ValRange
ANR	4904002	ClassDef	Order_t	141:8:4946:4994							
ANR	4904003	DeclStmt									
ANR	4904004	Decl							int	int	X
ANR	4904005	DeclStmt									
ANR	4904006	Decl							int	int	Y
ANR	4904007	DeclStmt									
ANR	4904008	Decl							Order_t	Order_t	Order_s
ANR	4904009	DeclStmt									
ANR	4904010	Decl							Order_s	Order_s [ MAX_ARRAY_WIDTH * MAX_ARRAY_HEIGHT ]	Order
ANR	4904011	DeclStmt									
ANR	4904012	Decl							int	"int ( int choice_X , int choice_Y , int level , int last )"	do_dot
ANR	4904013	DeclStmt									
ANR	4904014	Decl							int	"int ( const void * , const void * )"	CompareOrder
ANR	4904015	DeclStmt									
ANR	4904016	Decl							double	"double ( int thisX , int thisY , int refX , int refY , double rx_sq , double ry_sq )"	ValFunction
ANR	4904017	DeclStmt									
ANR	4904018	Decl							int	"int ( int argc , char * * argv )"	init_gs_display
ANR	4904019	DeclStmt									
ANR	4904020	Decl							int	int ( void )	update_gs_image
ANR	4904021	DeclStmt									
ANR	4904022	Decl							int	"int ( int choice_X , int choice_Y , int last )"	update_gs_dot
ANR	4904023	DeclStmt									
ANR	4904024	Decl							void	void ( void )	close_gs_display
ANR	4904025	ClassDef	min_dot_edge	161:7:5506:8471							
ANR	4904026	DeclStmt									
ANR	4904027	Decl							int	int	num_rows
ANR	4904028	DeclStmt									
ANR	4904029	Decl							int	int [ 3 ]	left
ANR	4904030	DeclStmt									
ANR	4904031	Decl							int	int [ 3 ]	right
ANR	4904032	DeclStmt									
ANR	4904033	Decl							min_dot_edge	min_dot_edge [ 20 ]	min_dot_edges
ANR	4904034	Function	main	253:0:8553:24583							
ANR	4904035	FunctionDef	"main (int argc , char * argv [ ])"		4904034	0					
ANR	4904036	CompoundStatement		255:0:8586:24583	4904034	0					
ANR	4904037	IdentifierDeclStatement	"int i , j , k , m , level , level_up = 1 ;"	257:4:8636:8672	4904034	0	True				
ANR	4904038	IdentifierDecl	i		4904034	0					
ANR	4904039	IdentifierDeclType	int		4904034	0					
ANR	4904040	Identifier	i		4904034	1					
ANR	4904041	IdentifierDecl	j		4904034	1					
ANR	4904042	IdentifierDeclType	int		4904034	0					
ANR	4904043	Identifier	j		4904034	1					
ANR	4904044	IdentifierDecl	k		4904034	2					
ANR	4904045	IdentifierDeclType	int		4904034	0					
ANR	4904046	Identifier	k		4904034	1					
ANR	4904047	IdentifierDecl	m		4904034	3					
ANR	4904048	IdentifierDeclType	int		4904034	0					
ANR	4904049	Identifier	m		4904034	1					
ANR	4904050	IdentifierDecl	level		4904034	4					
ANR	4904051	IdentifierDeclType	int		4904034	0					
ANR	4904052	Identifier	level		4904034	1					
ANR	4904053	IdentifierDecl	level_up = 1		4904034	5					
ANR	4904054	IdentifierDeclType	int		4904034	0					
ANR	4904055	Identifier	level_up		4904034	1					
ANR	4904056	AssignmentExpression	level_up = 1		4904034	2		=			
ANR	4904057	Identifier	level_up		4904034	0					
ANR	4904058	PrimaryExpression	1		4904034	1					
ANR	4904059	IdentifierDeclStatement	"int X , Y , choice_range , choice , choice_X , choice_Y ;"	258:4:8678:8729	4904034	1	True				
ANR	4904060	IdentifierDecl	X		4904034	0					
ANR	4904061	IdentifierDeclType	int		4904034	0					
ANR	4904062	Identifier	X		4904034	1					
ANR	4904063	IdentifierDecl	Y		4904034	1					
ANR	4904064	IdentifierDeclType	int		4904034	0					
ANR	4904065	Identifier	Y		4904034	1					
ANR	4904066	IdentifierDecl	choice_range		4904034	2					
ANR	4904067	IdentifierDeclType	int		4904034	0					
ANR	4904068	Identifier	choice_range		4904034	1					
ANR	4904069	IdentifierDecl	choice		4904034	3					
ANR	4904070	IdentifierDeclType	int		4904034	0					
ANR	4904071	Identifier	choice		4904034	1					
ANR	4904072	IdentifierDecl	choice_X		4904034	4					
ANR	4904073	IdentifierDeclType	int		4904034	0					
ANR	4904074	Identifier	choice_X		4904034	1					
ANR	4904075	IdentifierDecl	choice_Y		4904034	5					
ANR	4904076	IdentifierDeclType	int		4904034	0					
ANR	4904077	Identifier	choice_Y		4904034	1					
ANR	4904078	IdentifierDeclStatement	int SortRange ;	259:4:8735:8749	4904034	2	True				
ANR	4904079	IdentifierDecl	SortRange		4904034	0					
ANR	4904080	IdentifierDeclType	int		4904034	0					
ANR	4904081	Identifier	SortRange		4904034	1					
ANR	4904082	IdentifierDeclStatement	"int min_dot_pattern = 0 , do_min_dot ;"	260:4:8755:8791	4904034	3	True				
ANR	4904083	IdentifierDecl	min_dot_pattern = 0		4904034	0					
ANR	4904084	IdentifierDeclType	int		4904034	0					
ANR	4904085	Identifier	min_dot_pattern		4904034	1					
ANR	4904086	AssignmentExpression	min_dot_pattern = 0		4904034	2		=			
ANR	4904087	Identifier	min_dot_pattern		4904034	0					
ANR	4904088	PrimaryExpression	0		4904034	1					
ANR	4904089	IdentifierDecl	do_min_dot		4904034	1					
ANR	4904090	IdentifierDeclType	int		4904034	0					
ANR	4904091	Identifier	do_min_dot		4904034	1					
ANR	4904092	IdentifierDeclStatement	"double value , val_thresh = 0.01 ;"	261:4:8797:8828	4904034	4	True				
ANR	4904093	IdentifierDecl	value		4904034	0					
ANR	4904094	IdentifierDeclType	double		4904034	0					
ANR	4904095	Identifier	value		4904034	1					
ANR	4904096	IdentifierDecl	val_thresh = 0.01		4904034	1					
ANR	4904097	IdentifierDeclType	double		4904034	0					
ANR	4904098	Identifier	val_thresh		4904034	1					
ANR	4904099	AssignmentExpression	val_thresh = 0.01		4904034	2		=			
ANR	4904100	Identifier	val_thresh		4904034	0					
ANR	4904101	PrimaryExpression	0.01		4904034	1					
ANR	4904102	IdentifierDeclStatement	"double rx_sq = 1.0 , ry_sq = 1.0 ;"	262:4:8853:8884	4904034	5	True				
ANR	4904103	IdentifierDecl	rx_sq = 1.0		4904034	0					
ANR	4904104	IdentifierDeclType	double		4904034	0					
ANR	4904105	Identifier	rx_sq		4904034	1					
ANR	4904106	AssignmentExpression	rx_sq = 1.0		4904034	2		=			
ANR	4904107	Identifier	rx_sq		4904034	0					
ANR	4904108	PrimaryExpression	1.0		4904034	1					
ANR	4904109	IdentifierDecl	ry_sq = 1.0		4904034	1					
ANR	4904110	IdentifierDeclType	double		4904034	0					
ANR	4904111	Identifier	ry_sq		4904034	1					
ANR	4904112	AssignmentExpression	ry_sq = 1.0		4904034	2		=			
ANR	4904113	Identifier	ry_sq		4904034	0					
ANR	4904114	PrimaryExpression	1.0		4904034	1					
ANR	4904115	IdentifierDeclStatement	"double rand_scaled , bias_power = 2.0 ;"	263:4:8890:8926	4904034	6	True				
ANR	4904116	IdentifierDecl	rand_scaled		4904034	0					
ANR	4904117	IdentifierDeclType	double		4904034	0					
ANR	4904118	Identifier	rand_scaled		4904034	1					
ANR	4904119	IdentifierDecl	bias_power = 2.0		4904034	1					
ANR	4904120	IdentifierDeclType	double		4904034	0					
ANR	4904121	Identifier	bias_power		4904034	1					
ANR	4904122	AssignmentExpression	bias_power = 2.0		4904034	2		=			
ANR	4904123	Identifier	bias_power		4904034	0					
ANR	4904124	PrimaryExpression	2.0		4904034	1					
ANR	4904125	IdentifierDeclStatement	float x ;	264:4:8932:8939	4904034	7	True				
ANR	4904126	IdentifierDecl	x		4904034	0					
ANR	4904127	IdentifierDeclType	float		4904034	0					
ANR	4904128	Identifier	x		4904034	1					
ANR	4904129	IdentifierDeclStatement	int gsarg_start ;	266:4:8946:8961	4904034	8	True				
ANR	4904130	IdentifierDecl	gsarg_start		4904034	0					
ANR	4904131	IdentifierDeclType	int		4904034	0					
ANR	4904132	Identifier	gsarg_start		4904034	1					
ANR	4904133	IdentifierDeclStatement	"int code = 0 , at_arg ;"	267:4:8967:8987	4904034	9	True				
ANR	4904134	IdentifierDecl	code = 0		4904034	0					
ANR	4904135	IdentifierDeclType	int		4904034	0					
ANR	4904136	Identifier	code		4904034	1					
ANR	4904137	AssignmentExpression	code = 0		4904034	2		=			
ANR	4904138	Identifier	code		4904034	0					
ANR	4904139	PrimaryExpression	0		4904034	1					
ANR	4904140	IdentifierDecl	at_arg		4904034	1					
ANR	4904141	IdentifierDeclType	int		4904034	0					
ANR	4904142	Identifier	at_arg		4904034	1					
ANR	4904143	ExpressionStatement	resolution [ 0 ] = resolution [ 1 ] = 1	269:4:8994:9027	4904034	10	True				
ANR	4904144	AssignmentExpression	resolution [ 0 ] = resolution [ 1 ] = 1		4904034	0		=			
ANR	4904145	ArrayIndexing	resolution [ 0 ]		4904034	0					
ANR	4904146	Identifier	resolution		4904034	0					
ANR	4904147	PrimaryExpression	0		4904034	1					
ANR	4904148	AssignmentExpression	resolution [ 1 ] = 1		4904034	1		=			
ANR	4904149	ArrayIndexing	resolution [ 1 ]		4904034	0					
ANR	4904150	Identifier	resolution		4904034	0					
ANR	4904151	PrimaryExpression	1		4904034	1					
ANR	4904152	PrimaryExpression	1		4904034	1					
ANR	4904153	ForStatement	for ( at_arg = 1 ; at_arg < argc ; at_arg ++ )		4904034	11					
ANR	4904154	ForInit	at_arg = 1 ;	272:9:9080:9088	4904034	0	True				
ANR	4904155	AssignmentExpression	at_arg = 1		4904034	0		=			
ANR	4904156	Identifier	at_arg		4904034	0					
ANR	4904157	PrimaryExpression	1		4904034	1					
ANR	4904158	Condition	at_arg < argc	272:19:9090:9100	4904034	1	True				
ANR	4904159	RelationalExpression	at_arg < argc		4904034	0		<			
ANR	4904160	Identifier	at_arg		4904034	0					
ANR	4904161	Identifier	argc		4904034	1					
ANR	4904162	PostIncDecOperationExpression	at_arg ++	272:32:9103:9110	4904034	2	True				
ANR	4904163	Identifier	at_arg		4904034	0					
ANR	4904164	IncDec	++		4904034	1					
ANR	4904165	CompoundStatement		18:42:526:526	4904034	3					
ANR	4904166	IfStatement	if ( argv [ at_arg ] [ 0 ] != '-' )		4904034	0					
ANR	4904167	Condition	argv [ at_arg ] [ 0 ] != '-'	273:12:9127:9148	4904034	0	True				
ANR	4904168	EqualityExpression	argv [ at_arg ] [ 0 ] != '-'		4904034	0		!=			
ANR	4904169	ArrayIndexing	argv [ at_arg ] [ 0 ]		4904034	0					
ANR	4904170	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904171	Identifier	argv		4904034	0					
ANR	4904172	Identifier	at_arg		4904034	1					
ANR	4904173	PrimaryExpression	0		4904034	1					
ANR	4904174	PrimaryExpression	'-'		4904034	1					
ANR	4904175	CompoundStatement		19:36:564:564	4904034	1					
ANR	4904176	BreakStatement	break ;	274:12:9165:9170	4904034	0	True				
ANR	4904177	ElseStatement	else		4904034	0					
ANR	4904178	IfStatement	if ( argv [ at_arg ] [ 1 ] == 'm' )		4904034	0					
ANR	4904179	Condition	argv [ at_arg ] [ 1 ] == 'm'	275:19:9213:9234	4904034	0	True				
ANR	4904180	EqualityExpression	argv [ at_arg ] [ 1 ] == 'm'		4904034	0		==			
ANR	4904181	ArrayIndexing	argv [ at_arg ] [ 1 ]		4904034	0					
ANR	4904182	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904183	Identifier	argv		4904034	0					
ANR	4904184	Identifier	at_arg		4904034	1					
ANR	4904185	PrimaryExpression	1		4904034	1					
ANR	4904186	PrimaryExpression	'm'		4904034	1					
ANR	4904187	CompoundStatement		21:43:650:650	4904034	1					
ANR	4904188	ExpressionStatement	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%d"" , & m )"	276:12:9251:9289	4904034	0	True				
ANR	4904189	AssignmentExpression	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%d"" , & m )"		4904034	0		=			
ANR	4904190	Identifier	j		4904034	0					
ANR	4904191	CallExpression	"sscanf ( & argv [ at_arg ] [ 2 ] , ""%d"" , & m )"		4904034	1					
ANR	4904192	Callee	sscanf		4904034	0					
ANR	4904193	Identifier	sscanf		4904034	0					
ANR	4904194	ArgumentList	& argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904195	Argument	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904196	UnaryOperationExpression	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904197	UnaryOperator	&		4904034	0					
ANR	4904198	ArrayIndexing	argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904199	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904200	Identifier	argv		4904034	0					
ANR	4904201	Identifier	at_arg		4904034	1					
ANR	4904202	PrimaryExpression	2		4904034	1					
ANR	4904203	Argument	"""%d"""		4904034	1					
ANR	4904204	PrimaryExpression	"""%d"""		4904034	0					
ANR	4904205	Argument	& m		4904034	2					
ANR	4904206	UnaryOperationExpression	& m		4904034	0					
ANR	4904207	UnaryOperator	&		4904034	0					
ANR	4904208	Identifier	m		4904034	1					
ANR	4904209	IfStatement	if ( j < 1 )		4904034	1					
ANR	4904210	Condition	j < 1	277:16:9307:9311	4904034	0	True				
ANR	4904211	RelationalExpression	j < 1		4904034	0		<			
ANR	4904212	Identifier	j		4904034	0					
ANR	4904213	PrimaryExpression	1		4904034	1					
ANR	4904214	GotoStatement	goto usage_exit ;	278:16:9330:9345	4904034	1	True				
ANR	4904215	Identifier	usage_exit		4904034	0					
ANR	4904216	ExpressionStatement	min_dot_pattern = m	279:12:9359:9378	4904034	2	True				
ANR	4904217	AssignmentExpression	min_dot_pattern = m		4904034	0		=			
ANR	4904218	Identifier	min_dot_pattern		4904034	0					
ANR	4904219	Identifier	m		4904034	1					
ANR	4904220	ElseStatement	else		4904034	0					
ANR	4904221	IfStatement	if ( argv [ at_arg ] [ 1 ] == 'p' )		4904034	0					
ANR	4904222	Condition	argv [ at_arg ] [ 1 ] == 'p'	280:19:9399:9420	4904034	0	True				
ANR	4904223	EqualityExpression	argv [ at_arg ] [ 1 ] == 'p'		4904034	0		==			
ANR	4904224	ArrayIndexing	argv [ at_arg ] [ 1 ]		4904034	0					
ANR	4904225	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904226	Identifier	argv		4904034	0					
ANR	4904227	Identifier	at_arg		4904034	1					
ANR	4904228	PrimaryExpression	1		4904034	1					
ANR	4904229	PrimaryExpression	'p'		4904034	1					
ANR	4904230	CompoundStatement		26:43:836:836	4904034	1					
ANR	4904231	ExpressionStatement	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%f"" , & x )"	281:12:9437:9475	4904034	0	True				
ANR	4904232	AssignmentExpression	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%f"" , & x )"		4904034	0		=			
ANR	4904233	Identifier	j		4904034	0					
ANR	4904234	CallExpression	"sscanf ( & argv [ at_arg ] [ 2 ] , ""%f"" , & x )"		4904034	1					
ANR	4904235	Callee	sscanf		4904034	0					
ANR	4904236	Identifier	sscanf		4904034	0					
ANR	4904237	ArgumentList	& argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904238	Argument	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904239	UnaryOperationExpression	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904240	UnaryOperator	&		4904034	0					
ANR	4904241	ArrayIndexing	argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904242	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904243	Identifier	argv		4904034	0					
ANR	4904244	Identifier	at_arg		4904034	1					
ANR	4904245	PrimaryExpression	2		4904034	1					
ANR	4904246	Argument	"""%f"""		4904034	1					
ANR	4904247	PrimaryExpression	"""%f"""		4904034	0					
ANR	4904248	Argument	& x		4904034	2					
ANR	4904249	UnaryOperationExpression	& x		4904034	0					
ANR	4904250	UnaryOperator	&		4904034	0					
ANR	4904251	Identifier	x		4904034	1					
ANR	4904252	IfStatement	if ( j < 1 )		4904034	1					
ANR	4904253	Condition	j < 1	282:16:9493:9497	4904034	0	True				
ANR	4904254	RelationalExpression	j < 1		4904034	0		<			
ANR	4904255	Identifier	j		4904034	0					
ANR	4904256	PrimaryExpression	1		4904034	1					
ANR	4904257	GotoStatement	goto usage_exit ;	283:16:9516:9531	4904034	1	True				
ANR	4904258	Identifier	usage_exit		4904034	0					
ANR	4904259	ExpressionStatement	bias_power = x	284:12:9545:9559	4904034	2	True				
ANR	4904260	AssignmentExpression	bias_power = x		4904034	0		=			
ANR	4904261	Identifier	bias_power		4904034	0					
ANR	4904262	Identifier	x		4904034	1					
ANR	4904263	ElseStatement	else		4904034	0					
ANR	4904264	IfStatement	if ( argv [ at_arg ] [ 1 ] == 'q' )		4904034	0					
ANR	4904265	Condition	argv [ at_arg ] [ 1 ] == 'q'	285:19:9580:9601	4904034	0	True				
ANR	4904266	EqualityExpression	argv [ at_arg ] [ 1 ] == 'q'		4904034	0		==			
ANR	4904267	ArrayIndexing	argv [ at_arg ] [ 1 ]		4904034	0					
ANR	4904268	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904269	Identifier	argv		4904034	0					
ANR	4904270	Identifier	at_arg		4904034	1					
ANR	4904271	PrimaryExpression	1		4904034	1					
ANR	4904272	PrimaryExpression	'q'		4904034	1					
ANR	4904273	CompoundStatement		31:43:1017:1017	4904034	1					
ANR	4904274	ExpressionStatement	quiet = 1	286:20:9626:9635	4904034	0	True				
ANR	4904275	AssignmentExpression	quiet = 1		4904034	0		=			
ANR	4904276	Identifier	quiet		4904034	0					
ANR	4904277	PrimaryExpression	1		4904034	1					
ANR	4904278	ElseStatement	else		4904034	0					
ANR	4904279	IfStatement	if ( argv [ at_arg ] [ 1 ] == 'r' )		4904034	0					
ANR	4904280	Condition	argv [ at_arg ] [ 1 ] == 'r'	287:19:9656:9677	4904034	0	True				
ANR	4904281	EqualityExpression	argv [ at_arg ] [ 1 ] == 'r'		4904034	0		==			
ANR	4904282	ArrayIndexing	argv [ at_arg ] [ 1 ]		4904034	0					
ANR	4904283	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904284	Identifier	argv		4904034	0					
ANR	4904285	Identifier	at_arg		4904034	1					
ANR	4904286	PrimaryExpression	1		4904034	1					
ANR	4904287	PrimaryExpression	'r'		4904034	1					
ANR	4904288	CompoundStatement		33:43:1093:1093	4904034	1					
ANR	4904289	ExpressionStatement	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%dx%d"" , & k , & m )"	289:12:9731:9776	4904034	0	True				
ANR	4904290	AssignmentExpression	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%dx%d"" , & k , & m )"		4904034	0		=			
ANR	4904291	Identifier	j		4904034	0					
ANR	4904292	CallExpression	"sscanf ( & argv [ at_arg ] [ 2 ] , ""%dx%d"" , & k , & m )"		4904034	1					
ANR	4904293	Callee	sscanf		4904034	0					
ANR	4904294	Identifier	sscanf		4904034	0					
ANR	4904295	ArgumentList	& argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904296	Argument	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904297	UnaryOperationExpression	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904298	UnaryOperator	&		4904034	0					
ANR	4904299	ArrayIndexing	argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904300	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904301	Identifier	argv		4904034	0					
ANR	4904302	Identifier	at_arg		4904034	1					
ANR	4904303	PrimaryExpression	2		4904034	1					
ANR	4904304	Argument	"""%dx%d"""		4904034	1					
ANR	4904305	PrimaryExpression	"""%dx%d"""		4904034	0					
ANR	4904306	Argument	& k		4904034	2					
ANR	4904307	UnaryOperationExpression	& k		4904034	0					
ANR	4904308	UnaryOperator	&		4904034	0					
ANR	4904309	Identifier	k		4904034	1					
ANR	4904310	Argument	& m		4904034	3					
ANR	4904311	UnaryOperationExpression	& m		4904034	0					
ANR	4904312	UnaryOperator	&		4904034	0					
ANR	4904313	Identifier	m		4904034	1					
ANR	4904314	IfStatement	if ( j < 1 )		4904034	1					
ANR	4904315	Condition	j < 1	290:16:9794:9798	4904034	0	True				
ANR	4904316	RelationalExpression	j < 1		4904034	0		<			
ANR	4904317	Identifier	j		4904034	0					
ANR	4904318	PrimaryExpression	1		4904034	1					
ANR	4904319	GotoStatement	goto usage_exit ;	291:16:9817:9832	4904034	1	True				
ANR	4904320	Identifier	usage_exit		4904034	0					
ANR	4904321	ExpressionStatement	resolution [ 0 ] = k	292:12:9846:9863	4904034	2	True				
ANR	4904322	AssignmentExpression	resolution [ 0 ] = k		4904034	0		=			
ANR	4904323	ArrayIndexing	resolution [ 0 ]		4904034	0					
ANR	4904324	Identifier	resolution		4904034	0					
ANR	4904325	PrimaryExpression	0		4904034	1					
ANR	4904326	Identifier	k		4904034	1					
ANR	4904327	IfStatement	if ( j > 1 )		4904034	3					
ANR	4904328	Condition	j > 1	293:16:9881:9885	4904034	0	True				
ANR	4904329	RelationalExpression	j > 1		4904034	0		>			
ANR	4904330	Identifier	j		4904034	0					
ANR	4904331	PrimaryExpression	1		4904034	1					
ANR	4904332	ExpressionStatement	resolution [ 1 ] = m	294:16:9904:9921	4904034	1	True				
ANR	4904333	AssignmentExpression	resolution [ 1 ] = m		4904034	0		=			
ANR	4904334	ArrayIndexing	resolution [ 1 ]		4904034	0					
ANR	4904335	Identifier	resolution		4904034	0					
ANR	4904336	PrimaryExpression	1		4904034	1					
ANR	4904337	Identifier	m		4904034	1					
ANR	4904338	ExpressionStatement	rx_sq = resolution [ 0 ] * resolution [ 0 ]	295:12:9935:9972	4904034	4	True				
ANR	4904339	AssignmentExpression	rx_sq = resolution [ 0 ] * resolution [ 0 ]		4904034	0		=			
ANR	4904340	Identifier	rx_sq		4904034	0					
ANR	4904341	MultiplicativeExpression	resolution [ 0 ] * resolution [ 0 ]		4904034	1		*			
ANR	4904342	ArrayIndexing	resolution [ 0 ]		4904034	0					
ANR	4904343	Identifier	resolution		4904034	0					
ANR	4904344	PrimaryExpression	0		4904034	1					
ANR	4904345	ArrayIndexing	resolution [ 0 ]		4904034	1					
ANR	4904346	Identifier	resolution		4904034	0					
ANR	4904347	PrimaryExpression	0		4904034	1					
ANR	4904348	ExpressionStatement	ry_sq = resolution [ 1 ] * resolution [ 1 ]	296:12:9986:10023	4904034	5	True				
ANR	4904349	AssignmentExpression	ry_sq = resolution [ 1 ] * resolution [ 1 ]		4904034	0		=			
ANR	4904350	Identifier	ry_sq		4904034	0					
ANR	4904351	MultiplicativeExpression	resolution [ 1 ] * resolution [ 1 ]		4904034	1		*			
ANR	4904352	ArrayIndexing	resolution [ 1 ]		4904034	0					
ANR	4904353	Identifier	resolution		4904034	0					
ANR	4904354	PrimaryExpression	1		4904034	1					
ANR	4904355	ArrayIndexing	resolution [ 1 ]		4904034	1					
ANR	4904356	Identifier	resolution		4904034	0					
ANR	4904357	PrimaryExpression	1		4904034	1					
ANR	4904358	ElseStatement	else		4904034	0					
ANR	4904359	IfStatement	if ( argv [ at_arg ] [ 1 ] = 's' )		4904034	0					
ANR	4904360	Condition	argv [ at_arg ] [ 1 ] = 's'	297:19:10044:10064	4904034	0	True				
ANR	4904361	AssignmentExpression	argv [ at_arg ] [ 1 ] = 's'		4904034	0		=			
ANR	4904362	ArrayIndexing	argv [ at_arg ] [ 1 ]		4904034	0					
ANR	4904363	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904364	Identifier	argv		4904034	0					
ANR	4904365	Identifier	at_arg		4904034	1					
ANR	4904366	PrimaryExpression	1		4904034	1					
ANR	4904367	PrimaryExpression	's'		4904034	1					
ANR	4904368	CompoundStatement		43:42:1480:1480	4904034	1					
ANR	4904369	ExpressionStatement	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%d"" , & k )"	299:12:10111:10149	4904034	0	True				
ANR	4904370	AssignmentExpression	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%d"" , & k )"		4904034	0		=			
ANR	4904371	Identifier	j		4904034	0					
ANR	4904372	CallExpression	"sscanf ( & argv [ at_arg ] [ 2 ] , ""%d"" , & k )"		4904034	1					
ANR	4904373	Callee	sscanf		4904034	0					
ANR	4904374	Identifier	sscanf		4904034	0					
ANR	4904375	ArgumentList	& argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904376	Argument	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904377	UnaryOperationExpression	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904378	UnaryOperator	&		4904034	0					
ANR	4904379	ArrayIndexing	argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904380	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904381	Identifier	argv		4904034	0					
ANR	4904382	Identifier	at_arg		4904034	1					
ANR	4904383	PrimaryExpression	2		4904034	1					
ANR	4904384	Argument	"""%d"""		4904034	1					
ANR	4904385	PrimaryExpression	"""%d"""		4904034	0					
ANR	4904386	Argument	& k		4904034	2					
ANR	4904387	UnaryOperationExpression	& k		4904034	0					
ANR	4904388	UnaryOperator	&		4904034	0					
ANR	4904389	Identifier	k		4904034	1					
ANR	4904390	IfStatement	if ( j != 0 )		4904034	1					
ANR	4904391	Condition	j != 0	300:16:10167:10172	4904034	0	True				
ANR	4904392	EqualityExpression	j != 0		4904034	0		!=			
ANR	4904393	Identifier	j		4904034	0					
ANR	4904394	PrimaryExpression	0		4904034	1					
ANR	4904395	CompoundStatement		46:24:1588:1588	4904034	1					
ANR	4904396	ExpressionStatement	srand ( k )	301:16:10193:10201	4904034	0	True				
ANR	4904397	CallExpression	srand ( k )		4904034	0					
ANR	4904398	Callee	srand		4904034	0					
ANR	4904399	Identifier	srand		4904034	0					
ANR	4904400	ArgumentList	k		4904034	1					
ANR	4904401	Argument	k		4904034	0					
ANR	4904402	Identifier	k		4904034	0					
ANR	4904403	ElseStatement	else		4904034	0					
ANR	4904404	IfStatement	if ( argv [ at_arg ] [ 1 ] == 't' )		4904034	0					
ANR	4904405	Condition	argv [ at_arg ] [ 1 ] == 't'	303:19:10236:10257	4904034	0	True				
ANR	4904406	EqualityExpression	argv [ at_arg ] [ 1 ] == 't'		4904034	0		==			
ANR	4904407	ArrayIndexing	argv [ at_arg ] [ 1 ]		4904034	0					
ANR	4904408	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904409	Identifier	argv		4904034	0					
ANR	4904410	Identifier	at_arg		4904034	1					
ANR	4904411	PrimaryExpression	1		4904034	1					
ANR	4904412	PrimaryExpression	't'		4904034	1					
ANR	4904413	CompoundStatement		49:43:1673:1673	4904034	1					
ANR	4904414	ExpressionStatement	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%d"" , & k )"	305:12:10310:10348	4904034	0	True				
ANR	4904415	AssignmentExpression	"j = sscanf ( & argv [ at_arg ] [ 2 ] , ""%d"" , & k )"		4904034	0		=			
ANR	4904416	Identifier	j		4904034	0					
ANR	4904417	CallExpression	"sscanf ( & argv [ at_arg ] [ 2 ] , ""%d"" , & k )"		4904034	1					
ANR	4904418	Callee	sscanf		4904034	0					
ANR	4904419	Identifier	sscanf		4904034	0					
ANR	4904420	ArgumentList	& argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904421	Argument	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904422	UnaryOperationExpression	& argv [ at_arg ] [ 2 ]		4904034	0					
ANR	4904423	UnaryOperator	&		4904034	0					
ANR	4904424	ArrayIndexing	argv [ at_arg ] [ 2 ]		4904034	1					
ANR	4904425	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904426	Identifier	argv		4904034	0					
ANR	4904427	Identifier	at_arg		4904034	1					
ANR	4904428	PrimaryExpression	2		4904034	1					
ANR	4904429	Argument	"""%d"""		4904034	1					
ANR	4904430	PrimaryExpression	"""%d"""		4904034	0					
ANR	4904431	Argument	& k		4904034	2					
ANR	4904432	UnaryOperationExpression	& k		4904034	0					
ANR	4904433	UnaryOperator	&		4904034	0					
ANR	4904434	Identifier	k		4904034	1					
ANR	4904435	IfStatement	if ( j < 1 )		4904034	1					
ANR	4904436	Condition	j < 1	306:16:10366:10370	4904034	0	True				
ANR	4904437	RelationalExpression	j < 1		4904034	0		<			
ANR	4904438	Identifier	j		4904034	0					
ANR	4904439	PrimaryExpression	1		4904034	1					
ANR	4904440	GotoStatement	goto usage_exit ;	307:16:10389:10404	4904034	1	True				
ANR	4904441	Identifier	usage_exit		4904034	0					
ANR	4904442	ExpressionStatement	val_thresh = ( double ) k / 1000.0	308:12:10418:10449	4904034	2	True				
ANR	4904443	AssignmentExpression	val_thresh = ( double ) k / 1000.0		4904034	0		=			
ANR	4904444	Identifier	val_thresh		4904034	0					
ANR	4904445	MultiplicativeExpression	( double ) k / 1000.0		4904034	1		/			
ANR	4904446	CastExpression	( double ) k		4904034	0					
ANR	4904447	CastTarget	double		4904034	0					
ANR	4904448	Identifier	k		4904034	1					
ANR	4904449	PrimaryExpression	1000.0		4904034	1					
ANR	4904450	IfStatement	if ( at_arg == argc )		4904034	12					
ANR	4904451	Condition	at_arg == argc	314:8:10617:10630	4904034	0	True				
ANR	4904452	EqualityExpression	at_arg == argc		4904034	0		==			
ANR	4904453	Identifier	at_arg		4904034	0					
ANR	4904454	Identifier	argc		4904034	1					
ANR	4904455	GotoStatement	goto usage_exit ;	315:8:10641:10656	4904034	1	True				
ANR	4904456	Identifier	usage_exit		4904034	0					
ANR	4904457	ExpressionStatement	"j = sscanf ( argv [ at_arg ++ ] , ""%dx%d"" , & k , & m )"	317:4:10663:10706	4904034	13	True				
ANR	4904458	AssignmentExpression	"j = sscanf ( argv [ at_arg ++ ] , ""%dx%d"" , & k , & m )"		4904034	0		=			
ANR	4904459	Identifier	j		4904034	0					
ANR	4904460	CallExpression	"sscanf ( argv [ at_arg ++ ] , ""%dx%d"" , & k , & m )"		4904034	1					
ANR	4904461	Callee	sscanf		4904034	0					
ANR	4904462	Identifier	sscanf		4904034	0					
ANR	4904463	ArgumentList	argv [ at_arg ++ ]		4904034	1					
ANR	4904464	Argument	argv [ at_arg ++ ]		4904034	0					
ANR	4904465	ArrayIndexing	argv [ at_arg ++ ]		4904034	0					
ANR	4904466	Identifier	argv		4904034	0					
ANR	4904467	PostIncDecOperationExpression	at_arg ++		4904034	1					
ANR	4904468	Identifier	at_arg		4904034	0					
ANR	4904469	IncDec	++		4904034	1					
ANR	4904470	Argument	"""%dx%d"""		4904034	1					
ANR	4904471	PrimaryExpression	"""%dx%d"""		4904034	0					
ANR	4904472	Argument	& k		4904034	2					
ANR	4904473	UnaryOperationExpression	& k		4904034	0					
ANR	4904474	UnaryOperator	&		4904034	0					
ANR	4904475	Identifier	k		4904034	1					
ANR	4904476	Argument	& m		4904034	3					
ANR	4904477	UnaryOperationExpression	& m		4904034	0					
ANR	4904478	UnaryOperator	&		4904034	0					
ANR	4904479	Identifier	m		4904034	1					
ANR	4904480	IfStatement	if ( j < 1 )		4904034	14					
ANR	4904481	Condition	j < 1	318:8:10716:10720	4904034	0	True				
ANR	4904482	RelationalExpression	j < 1		4904034	0		<			
ANR	4904483	Identifier	j		4904034	0					
ANR	4904484	PrimaryExpression	1		4904034	1					
ANR	4904485	GotoStatement	goto usage_exit ;	319:8:10731:10746	4904034	1	True				
ANR	4904486	Identifier	usage_exit		4904034	0					
ANR	4904487	ExpressionStatement	array_width = k	321:4:10753:10768	4904034	15	True				
ANR	4904488	AssignmentExpression	array_width = k		4904034	0		=			
ANR	4904489	Identifier	array_width		4904034	0					
ANR	4904490	Identifier	k		4904034	1					
ANR	4904491	ExpressionStatement	array_height = k	322:4:10774:10790	4904034	16	True				
ANR	4904492	AssignmentExpression	array_height = k		4904034	0		=			
ANR	4904493	Identifier	array_height		4904034	0					
ANR	4904494	Identifier	k		4904034	1					
ANR	4904495	IfStatement	if ( j > 1 )		4904034	17					
ANR	4904496	Condition	j > 1	323:8:10800:10804	4904034	0	True				
ANR	4904497	RelationalExpression	j > 1		4904034	0		>			
ANR	4904498	Identifier	j		4904034	0					
ANR	4904499	PrimaryExpression	1		4904034	1					
ANR	4904500	ExpressionStatement	array_height = m	324:8:10815:10831	4904034	1	True				
ANR	4904501	AssignmentExpression	array_height = m		4904034	0		=			
ANR	4904502	Identifier	array_height		4904034	0					
ANR	4904503	Identifier	m		4904034	1					
ANR	4904504	IfStatement	if ( array_width * array_height > MAX_ARRAY_WIDTH * MAX_ARRAY_HEIGHT )		4904034	18					
ANR	4904505	Condition	array_width * array_height > MAX_ARRAY_WIDTH * MAX_ARRAY_HEIGHT	326:8:10842:10904	4904034	0	True				
ANR	4904506	RelationalExpression	array_width * array_height > MAX_ARRAY_WIDTH * MAX_ARRAY_HEIGHT		4904034	0		>			
ANR	4904507	MultiplicativeExpression	array_width * array_height		4904034	0		*			
ANR	4904508	Identifier	array_width		4904034	0					
ANR	4904509	Identifier	array_height		4904034	1					
ANR	4904510	MultiplicativeExpression	MAX_ARRAY_WIDTH * MAX_ARRAY_HEIGHT		4904034	1		*			
ANR	4904511	Identifier	MAX_ARRAY_WIDTH		4904034	0					
ANR	4904512	Identifier	MAX_ARRAY_HEIGHT		4904034	1					
ANR	4904513	CompoundStatement		72:73:2320:2320	4904034	1					
ANR	4904514	ExpressionStatement	"printf ( ""Array size is too large, max width = %d, max height = %d\\n"" , MAX_ARRAY_WIDTH , MAX_ARRAY_HEIGHT )"	327:8:10917:11036	4904034	0	True				
ANR	4904515	CallExpression	"printf ( ""Array size is too large, max width = %d, max height = %d\\n"" , MAX_ARRAY_WIDTH , MAX_ARRAY_HEIGHT )"		4904034	0					
ANR	4904516	Callee	printf		4904034	0					
ANR	4904517	Identifier	printf		4904034	0					
ANR	4904518	ArgumentList	"""Array size is too large, max width = %d, max height = %d\\n"""		4904034	1					
ANR	4904519	Argument	"""Array size is too large, max width = %d, max height = %d\\n"""		4904034	0					
ANR	4904520	PrimaryExpression	"""Array size is too large, max width = %d, max height = %d\\n"""		4904034	0					
ANR	4904521	Argument	MAX_ARRAY_WIDTH		4904034	1					
ANR	4904522	Identifier	MAX_ARRAY_WIDTH		4904034	0					
ANR	4904523	Argument	MAX_ARRAY_HEIGHT		4904034	2					
ANR	4904524	Identifier	MAX_ARRAY_HEIGHT		4904034	0					
ANR	4904525	ReturnStatement	return 1 ;	329:8:11046:11054	4904034	1	True				
ANR	4904526	PrimaryExpression	1		4904034	0					
ANR	4904527	IfStatement	if ( at_arg == argc )		4904034	19					
ANR	4904528	Condition	at_arg == argc	333:8:11147:11160	4904034	0	True				
ANR	4904529	EqualityExpression	at_arg == argc		4904034	0		==			
ANR	4904530	Identifier	at_arg		4904034	0					
ANR	4904531	Identifier	argc		4904034	1					
ANR	4904532	GotoStatement	goto usage_exit ;	334:8:11171:11186	4904034	1	True				
ANR	4904533	Identifier	usage_exit		4904034	0					
ANR	4904534	IfStatement	"if ( ( fp = fopen ( argv [ at_arg ++ ] , ""w"" ) ) == NULL )"		4904034	20					
ANR	4904535	Condition	"( fp = fopen ( argv [ at_arg ++ ] , ""w"" ) ) == NULL"	336:8:11197:11236	4904034	0	True				
ANR	4904536	EqualityExpression	"( fp = fopen ( argv [ at_arg ++ ] , ""w"" ) ) == NULL"		4904034	0		==			
ANR	4904537	AssignmentExpression	"fp = fopen ( argv [ at_arg ++ ] , ""w"" )"		4904034	0		=			
ANR	4904538	Identifier	fp		4904034	0					
ANR	4904539	CallExpression	"fopen ( argv [ at_arg ++ ] , ""w"" )"		4904034	1					
ANR	4904540	Callee	fopen		4904034	0					
ANR	4904541	Identifier	fopen		4904034	0					
ANR	4904542	ArgumentList	argv [ at_arg ++ ]		4904034	1					
ANR	4904543	Argument	argv [ at_arg ++ ]		4904034	0					
ANR	4904544	ArrayIndexing	argv [ at_arg ++ ]		4904034	0					
ANR	4904545	Identifier	argv		4904034	0					
ANR	4904546	PostIncDecOperationExpression	at_arg ++		4904034	1					
ANR	4904547	Identifier	at_arg		4904034	0					
ANR	4904548	IncDec	++		4904034	1					
ANR	4904549	Argument	"""w"""		4904034	1					
ANR	4904550	PrimaryExpression	"""w"""		4904034	0					
ANR	4904551	Identifier	NULL		4904034	1					
ANR	4904552	GotoStatement	goto usage_exit ;	337:8:11247:11262	4904034	1	True				
ANR	4904553	Identifier	usage_exit		4904034	0					
ANR	4904554	ExpressionStatement	gsarg_start = at_arg	340:4:11332:11352	4904034	21	True				
ANR	4904555	AssignmentExpression	gsarg_start = at_arg		4904034	0		=			
ANR	4904556	Identifier	gsarg_start		4904034	0					
ANR	4904557	Identifier	at_arg		4904034	1					
ANR	4904558	IfStatement	if ( at_arg < argc && argv [ at_arg ] [ 0 ] == '-' && argv [ at_arg ] [ 1 ] == 'g' )		4904034	22					
ANR	4904559	Condition	at_arg < argc && argv [ at_arg ] [ 0 ] == '-' && argv [ at_arg ] [ 1 ] == 'g'	341:8:11362:11426	4904034	0	True				
ANR	4904560	AndExpression	at_arg < argc && argv [ at_arg ] [ 0 ] == '-' && argv [ at_arg ] [ 1 ] == 'g'		4904034	0		&&			
ANR	4904561	RelationalExpression	at_arg < argc		4904034	0		<			
ANR	4904562	Identifier	at_arg		4904034	0					
ANR	4904563	Identifier	argc		4904034	1					
ANR	4904564	AndExpression	argv [ at_arg ] [ 0 ] == '-' && argv [ at_arg ] [ 1 ] == 'g'		4904034	1		&&			
ANR	4904565	EqualityExpression	argv [ at_arg ] [ 0 ] == '-'		4904034	0		==			
ANR	4904566	ArrayIndexing	argv [ at_arg ] [ 0 ]		4904034	0					
ANR	4904567	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904568	Identifier	argv		4904034	0					
ANR	4904569	Identifier	at_arg		4904034	1					
ANR	4904570	PrimaryExpression	0		4904034	1					
ANR	4904571	PrimaryExpression	'-'		4904034	1					
ANR	4904572	EqualityExpression	argv [ at_arg ] [ 1 ] == 'g'		4904034	1		==			
ANR	4904573	ArrayIndexing	argv [ at_arg ] [ 1 ]		4904034	0					
ANR	4904574	ArrayIndexing	argv [ at_arg ]		4904034	0					
ANR	4904575	Identifier	argv		4904034	0					
ANR	4904576	Identifier	at_arg		4904034	1					
ANR	4904577	PrimaryExpression	1		4904034	1					
ANR	4904578	PrimaryExpression	'g'		4904034	1					
ANR	4904579	CompoundStatement		87:75:2842:2842	4904034	1					
ANR	4904580	ExpressionStatement	gsarg_start ++	342:8:11439:11452	4904034	0	True				
ANR	4904581	PostIncDecOperationExpression	gsarg_start ++		4904034	0					
ANR	4904582	Identifier	gsarg_start		4904034	0					
ANR	4904583	IncDec	++		4904034	1					
ANR	4904584	IfStatement	"if ( ( code = init_gs_display ( argc - gsarg_start , argv + gsarg_start ) ) < 0 )"		4904034	23					
ANR	4904585	Condition	"( code = init_gs_display ( argc - gsarg_start , argv + gsarg_start ) ) < 0"	345:8:11485:11548	4904034	0	True				
ANR	4904586	RelationalExpression	"( code = init_gs_display ( argc - gsarg_start , argv + gsarg_start ) ) < 0"		4904034	0		<			
ANR	4904587	AssignmentExpression	"code = init_gs_display ( argc - gsarg_start , argv + gsarg_start )"		4904034	0		=			
ANR	4904588	Identifier	code		4904034	0					
ANR	4904589	CallExpression	"init_gs_display ( argc - gsarg_start , argv + gsarg_start )"		4904034	1					
ANR	4904590	Callee	init_gs_display		4904034	0					
ANR	4904591	Identifier	init_gs_display		4904034	0					
ANR	4904592	ArgumentList	argc - gsarg_start		4904034	1					
ANR	4904593	Argument	argc - gsarg_start		4904034	0					
ANR	4904594	AdditiveExpression	argc - gsarg_start		4904034	0		-			
ANR	4904595	Identifier	argc		4904034	0					
ANR	4904596	Identifier	gsarg_start		4904034	1					
ANR	4904597	Argument	argv + gsarg_start		4904034	1					
ANR	4904598	AdditiveExpression	argv + gsarg_start		4904034	0		+			
ANR	4904599	Identifier	argv		4904034	0					
ANR	4904600	Identifier	gsarg_start		4904034	1					
ANR	4904601	PrimaryExpression	0		4904034	1					
ANR	4904602	ReturnStatement	return 1 ;	346:8:11559:11567	4904034	1	True				
ANR	4904603	PrimaryExpression	1		4904034	0					
ANR	4904604	ExpressionStatement	"fprintf ( fp , ""# W=%d H=%d\\n"" , array_width , array_height )"	354:4:11842:11896	4904034	24	True				
ANR	4904605	CallExpression	"fprintf ( fp , ""# W=%d H=%d\\n"" , array_width , array_height )"		4904034	0					
ANR	4904606	Callee	fprintf		4904034	0					
ANR	4904607	Identifier	fprintf		4904034	0					
ANR	4904608	ArgumentList	fp		4904034	1					
ANR	4904609	Argument	fp		4904034	0					
ANR	4904610	Identifier	fp		4904034	0					
ANR	4904611	Argument	"""# W=%d H=%d\\n"""		4904034	1					
ANR	4904612	PrimaryExpression	"""# W=%d H=%d\\n"""		4904034	0					
ANR	4904613	Argument	array_width		4904034	2					
ANR	4904614	Identifier	array_width		4904034	0					
ANR	4904615	Argument	array_height		4904034	3					
ANR	4904616	Identifier	array_height		4904034	0					
ANR	4904617	ForStatement	for ( Y = 0 ; Y < array_height ; Y ++ )		4904034	25					
ANR	4904618	ForInit	Y = 0 ;	358:9:12029:12032	4904034	0	True				
ANR	4904619	AssignmentExpression	Y = 0		4904034	0		=			
ANR	4904620	Identifier	Y		4904034	0					
ANR	4904621	PrimaryExpression	0		4904034	1					
ANR	4904622	Condition	Y < array_height	358:14:12034:12049	4904034	1	True				
ANR	4904623	RelationalExpression	Y < array_height		4904034	0		<			
ANR	4904624	Identifier	Y		4904034	0					
ANR	4904625	Identifier	array_height		4904034	1					
ANR	4904626	PostIncDecOperationExpression	Y ++	358:32:12052:12054	4904034	2	True				
ANR	4904627	Identifier	Y		4904034	0					
ANR	4904628	IncDec	++		4904034	1					
ANR	4904629	CompoundStatement		104:37:3470:3470	4904034	3					
ANR	4904630	ForStatement	for ( X = 0 ; X < array_width ; X ++ )		4904034	0					
ANR	4904631	ForInit	X = 0 ;	359:13:12072:12075	4904034	0	True				
ANR	4904632	AssignmentExpression	X = 0		4904034	0		=			
ANR	4904633	Identifier	X		4904034	0					
ANR	4904634	PrimaryExpression	0		4904034	1					
ANR	4904635	Condition	X < array_width	359:18:12077:12091	4904034	1	True				
ANR	4904636	RelationalExpression	X < array_width		4904034	0		<			
ANR	4904637	Identifier	X		4904034	0					
ANR	4904638	Identifier	array_width		4904034	1					
ANR	4904639	PostIncDecOperationExpression	X ++	359:35:12094:12096	4904034	2	True				
ANR	4904640	Identifier	X		4904034	0					
ANR	4904641	IncDec	++		4904034	1					
ANR	4904642	CompoundStatement		105:40:3512:3512	4904034	3					
ANR	4904643	ExpressionStatement	Order [ Y * array_width + X ] . X = X	360:12:12113:12145	4904034	0	True				
ANR	4904644	AssignmentExpression	Order [ Y * array_width + X ] . X = X		4904034	0		=			
ANR	4904645	MemberAccess	Order [ Y * array_width + X ] . X		4904034	0					
ANR	4904646	ArrayIndexing	Order [ Y * array_width + X ]		4904034	0					
ANR	4904647	Identifier	Order		4904034	0					
ANR	4904648	AdditiveExpression	Y * array_width + X		4904034	1		+			
ANR	4904649	MultiplicativeExpression	Y * array_width		4904034	0		*			
ANR	4904650	Identifier	Y		4904034	0					
ANR	4904651	Identifier	array_width		4904034	1					
ANR	4904652	Identifier	X		4904034	1					
ANR	4904653	Identifier	X		4904034	1					
ANR	4904654	Identifier	X		4904034	1					
ANR	4904655	ExpressionStatement	Order [ Y * array_width + X ] . Y = Y	361:12:12159:12191	4904034	1	True				
ANR	4904656	AssignmentExpression	Order [ Y * array_width + X ] . Y = Y		4904034	0		=			
ANR	4904657	MemberAccess	Order [ Y * array_width + X ] . Y		4904034	0					
ANR	4904658	ArrayIndexing	Order [ Y * array_width + X ]		4904034	0					
ANR	4904659	Identifier	Order		4904034	0					
ANR	4904660	AdditiveExpression	Y * array_width + X		4904034	1		+			
ANR	4904661	MultiplicativeExpression	Y * array_width		4904034	0		*			
ANR	4904662	Identifier	Y		4904034	0					
ANR	4904663	Identifier	array_width		4904034	1					
ANR	4904664	Identifier	X		4904034	1					
ANR	4904665	Identifier	Y		4904034	1					
ANR	4904666	Identifier	Y		4904034	1					
ANR	4904667	ExpressionStatement	Val [ Y * array_width + X ] = 0.0	362:12:12205:12235	4904034	2	True				
ANR	4904668	AssignmentExpression	Val [ Y * array_width + X ] = 0.0		4904034	0		=			
ANR	4904669	ArrayIndexing	Val [ Y * array_width + X ]		4904034	0					
ANR	4904670	Identifier	Val		4904034	0					
ANR	4904671	AdditiveExpression	Y * array_width + X		4904034	1		+			
ANR	4904672	MultiplicativeExpression	Y * array_width		4904034	0		*			
ANR	4904673	Identifier	Y		4904034	0					
ANR	4904674	Identifier	array_width		4904034	1					
ANR	4904675	Identifier	X		4904034	1					
ANR	4904676	PrimaryExpression	0.0		4904034	1					
ANR	4904677	ExpressionStatement	ThresholdArray [ X ] [ Y ] = - 1	363:12:12249:12274	4904034	3	True				
ANR	4904678	AssignmentExpression	ThresholdArray [ X ] [ Y ] = - 1		4904034	0		=			
ANR	4904679	ArrayIndexing	ThresholdArray [ X ] [ Y ]		4904034	0					
ANR	4904680	ArrayIndexing	ThresholdArray [ X ]		4904034	0					
ANR	4904681	Identifier	ThresholdArray		4904034	0					
ANR	4904682	Identifier	X		4904034	1					
ANR	4904683	Identifier	Y		4904034	1					
ANR	4904684	UnaryOperationExpression	- 1		4904034	1					
ANR	4904685	UnaryOperator	-		4904034	0					
ANR	4904686	PrimaryExpression	1		4904034	1					
ANR	4904687	ExpressionStatement	SortRange = ( array_width * array_height )	367:4:12339:12377	4904034	26	True				
ANR	4904688	AssignmentExpression	SortRange = ( array_width * array_height )		4904034	0		=			
ANR	4904689	Identifier	SortRange		4904034	0					
ANR	4904690	MultiplicativeExpression	array_width * array_height		4904034	1		*			
ANR	4904691	Identifier	array_width		4904034	0					
ANR	4904692	Identifier	array_height		4904034	1					
ANR	4904693	ExpressionStatement	MinVal = 0.0	368:4:12383:12395	4904034	27	True				
ANR	4904694	AssignmentExpression	MinVal = 0.0		4904034	0		=			
ANR	4904695	Identifier	MinVal		4904034	0					
ANR	4904696	PrimaryExpression	0.0		4904034	1					
ANR	4904697	ExpressionStatement	MaxVal = 0.0	369:4:12401:12413	4904034	28	True				
ANR	4904698	AssignmentExpression	MaxVal = 0.0		4904034	0		=			
ANR	4904699	Identifier	MaxVal		4904034	0					
ANR	4904700	PrimaryExpression	0.0		4904034	1					
ANR	4904701	ExpressionStatement	ValRange = 1.0	370:4:12419:12433	4904034	29	True				
ANR	4904702	AssignmentExpression	ValRange = 1.0		4904034	0		=			
ANR	4904703	Identifier	ValRange		4904034	0					
ANR	4904704	PrimaryExpression	1.0		4904034	1					
ANR	4904705	ForStatement	for ( level = 0 ; level < ( array_width * array_height ) ; level += level_up )		4904034	30					
ANR	4904706	ForInit	level = 0 ;	372:9:12445:12454	4904034	0	True				
ANR	4904707	AssignmentExpression	level = 0		4904034	0		=			
ANR	4904708	Identifier	level		4904034	0					
ANR	4904709	PrimaryExpression	0		4904034	1					
ANR	4904710	Condition	level < ( array_width * array_height )	372:20:12456:12491	4904034	1	True				
ANR	4904711	RelationalExpression	level < ( array_width * array_height )		4904034	0		<			
ANR	4904712	Identifier	level		4904034	0					
ANR	4904713	MultiplicativeExpression	array_width * array_height		4904034	1		*			
ANR	4904714	Identifier	array_width		4904034	0					
ANR	4904715	Identifier	array_height		4904034	1					
ANR	4904716	AssignmentExpression	level += level_up	372:58:12494:12510	4904034	2	True	+=			
ANR	4904717	Identifier	level		4904034	0					
ANR	4904718	Identifier	level_up		4904034	1					
ANR	4904719	CompoundStatement		118:77:3926:3926	4904034	3					
ANR	4904720	ExpressionStatement	"qsort ( ( void * ) Order , SortRange , sizeof ( Order_s ) , CompareOrder )"	379:8:12791:12853	4904034	0	True				
ANR	4904721	CallExpression	"qsort ( ( void * ) Order , SortRange , sizeof ( Order_s ) , CompareOrder )"		4904034	0					
ANR	4904722	Callee	qsort		4904034	0					
ANR	4904723	Identifier	qsort		4904034	0					
ANR	4904724	ArgumentList	( void * ) Order		4904034	1					
ANR	4904725	Argument	( void * ) Order		4904034	0					
ANR	4904726	CastExpression	( void * ) Order		4904034	0					
ANR	4904727	CastTarget	void *		4904034	0					
ANR	4904728	Identifier	Order		4904034	1					
ANR	4904729	Argument	SortRange		4904034	1					
ANR	4904730	Identifier	SortRange		4904034	0					
ANR	4904731	Argument	sizeof ( Order_s )		4904034	2					
ANR	4904732	SizeofExpression	sizeof ( Order_s )		4904034	0					
ANR	4904733	Sizeof	sizeof		4904034	0					
ANR	4904734	SizeofOperand	Order_s		4904034	1					
ANR	4904735	Argument	CompareOrder		4904034	3					
ANR	4904736	Identifier	CompareOrder		4904034	0					
ANR	4904737	ExpressionStatement	SortRange = array_width * array_height - level	380:8:12863:12909	4904034	1	True				
ANR	4904738	AssignmentExpression	SortRange = array_width * array_height - level		4904034	0		=			
ANR	4904739	Identifier	SortRange		4904034	0					
ANR	4904740	AdditiveExpression	array_width * array_height - level		4904034	1		-			
ANR	4904741	MultiplicativeExpression	array_width * array_height		4904034	0		*			
ANR	4904742	Identifier	array_width		4904034	0					
ANR	4904743	Identifier	array_height		4904034	1					
ANR	4904744	Identifier	level		4904034	1					
ANR	4904745	IfStatement	if ( ( code = update_gs_image ( ) ) < 0 )		4904034	2					
ANR	4904746	Condition	( code = update_gs_image ( ) ) < 0	384:12:12998:13025	4904034	0	True				
ANR	4904747	RelationalExpression	( code = update_gs_image ( ) ) < 0		4904034	0		<			
ANR	4904748	AssignmentExpression	code = update_gs_image ( )		4904034	0		=			
ANR	4904749	Identifier	code		4904034	0					
ANR	4904750	CallExpression	update_gs_image ( )		4904034	1					
ANR	4904751	Callee	update_gs_image		4904034	0					
ANR	4904752	Identifier	update_gs_image		4904034	0					
ANR	4904753	ArgumentList			4904034	1					
ANR	4904754	PrimaryExpression	0		4904034	1					
ANR	4904755	ReturnStatement	return 1 ;	385:12:13040:13048	4904034	1	True				
ANR	4904756	PrimaryExpression	1		4904034	0					
ANR	4904757	IfStatement	if ( ! quiet )		4904034	3					
ANR	4904758	Condition	! quiet	387:12:13069:13075	4904034	0	True				
ANR	4904759	UnaryOperationExpression	! quiet		4904034	0					
ANR	4904760	UnaryOperator	!		4904034	0					
ANR	4904761	Identifier	quiet		4904034	1					
ANR	4904762	CompoundStatement		133:21:4491:4491	4904034	1					
ANR	4904763	ExpressionStatement	"printf ( ""MinVal = %f, MinX = %d, MinY = %d\\n"" , MinVal , Order [ 0 ] . X , Order [ 0 ] . Y )"	388:12:13092:13169	4904034	0	True				
ANR	4904764	CallExpression	"printf ( ""MinVal = %f, MinX = %d, MinY = %d\\n"" , MinVal , Order [ 0 ] . X , Order [ 0 ] . Y )"		4904034	0					
ANR	4904765	Callee	printf		4904034	0					
ANR	4904766	Identifier	printf		4904034	0					
ANR	4904767	ArgumentList	"""MinVal = %f, MinX = %d, MinY = %d\\n"""		4904034	1					
ANR	4904768	Argument	"""MinVal = %f, MinX = %d, MinY = %d\\n"""		4904034	0					
ANR	4904769	PrimaryExpression	"""MinVal = %f, MinX = %d, MinY = %d\\n"""		4904034	0					
ANR	4904770	Argument	MinVal		4904034	1					
ANR	4904771	Identifier	MinVal		4904034	0					
ANR	4904772	Argument	Order [ 0 ] . X		4904034	2					
ANR	4904773	MemberAccess	Order [ 0 ] . X		4904034	0					
ANR	4904774	ArrayIndexing	Order [ 0 ]		4904034	0					
ANR	4904775	Identifier	Order		4904034	0					
ANR	4904776	PrimaryExpression	0		4904034	1					
ANR	4904777	Identifier	X		4904034	1					
ANR	4904778	Argument	Order [ 0 ] . Y		4904034	3					
ANR	4904779	MemberAccess	Order [ 0 ] . Y		4904034	0					
ANR	4904780	ArrayIndexing	Order [ 0 ]		4904034	0					
ANR	4904781	Identifier	Order		4904034	0					
ANR	4904782	PrimaryExpression	0		4904034	1					
ANR	4904783	Identifier	Y		4904034	1					
ANR	4904784	ExpressionStatement	choice_range = 0	392:8:13247:13263	4904034	4	True				
ANR	4904785	AssignmentExpression	choice_range = 0		4904034	0		=			
ANR	4904786	Identifier	choice_range		4904034	0					
ANR	4904787	PrimaryExpression	0		4904034	1					
ANR	4904788	ForStatement	for ( i = 0 ; i < ( array_width * array_height ) - level ; i ++ )		4904034	5					
ANR	4904789	ForInit	i = 0 ;	393:13:13278:13281	4904034	0	True				
ANR	4904790	AssignmentExpression	i = 0		4904034	0		=			
ANR	4904791	Identifier	i		4904034	0					
ANR	4904792	PrimaryExpression	0		4904034	1					
ANR	4904793	Condition	i < ( array_width * array_height ) - level	393:18:13283:13322	4904034	1	True				
ANR	4904794	RelationalExpression	i < ( array_width * array_height ) - level		4904034	0		<			
ANR	4904795	Identifier	i		4904034	0					
ANR	4904796	AdditiveExpression	( array_width * array_height ) - level		4904034	1		-			
ANR	4904797	MultiplicativeExpression	array_width * array_height		4904034	0		*			
ANR	4904798	Identifier	array_width		4904034	0					
ANR	4904799	Identifier	array_height		4904034	1					
ANR	4904800	Identifier	level		4904034	1					
ANR	4904801	PostIncDecOperationExpression	i ++	393:60:13325:13327	4904034	2	True				
ANR	4904802	Identifier	i		4904034	0					
ANR	4904803	IncDec	++		4904034	1					
ANR	4904804	CompoundStatement		139:65:4743:4743	4904034	3					
ANR	4904805	ExpressionStatement	value = Val [ ( Order [ i ] . Y * array_width ) + Order [ i ] . X ]	394:12:13344:13398	4904034	0	True				
ANR	4904806	AssignmentExpression	value = Val [ ( Order [ i ] . Y * array_width ) + Order [ i ] . X ]		4904034	0		=			
ANR	4904807	Identifier	value		4904034	0					
ANR	4904808	ArrayIndexing	Val [ ( Order [ i ] . Y * array_width ) + Order [ i ] . X ]		4904034	1					
ANR	4904809	Identifier	Val		4904034	0					
ANR	4904810	AdditiveExpression	( Order [ i ] . Y * array_width ) + Order [ i ] . X		4904034	1		+			
ANR	4904811	MultiplicativeExpression	Order [ i ] . Y * array_width		4904034	0		*			
ANR	4904812	MemberAccess	Order [ i ] . Y		4904034	0					
ANR	4904813	ArrayIndexing	Order [ i ]		4904034	0					
ANR	4904814	Identifier	Order		4904034	0					
ANR	4904815	Identifier	i		4904034	1					
ANR	4904816	Identifier	Y		4904034	1					
ANR	4904817	Identifier	array_width		4904034	1					
ANR	4904818	MemberAccess	Order [ i ] . X		4904034	1					
ANR	4904819	ArrayIndexing	Order [ i ]		4904034	0					
ANR	4904820	Identifier	Order		4904034	0					
ANR	4904821	Identifier	i		4904034	1					
ANR	4904822	Identifier	X		4904034	1					
ANR	4904823	ExpressionStatement	value = ( value - MinVal ) / ValRange	395:12:13412:13445	4904034	1	True				
ANR	4904824	AssignmentExpression	value = ( value - MinVal ) / ValRange		4904034	0		=			
ANR	4904825	Identifier	value		4904034	0					
ANR	4904826	MultiplicativeExpression	( value - MinVal ) / ValRange		4904034	1		/			
ANR	4904827	AdditiveExpression	value - MinVal		4904034	0		-			
ANR	4904828	Identifier	value		4904034	0					
ANR	4904829	Identifier	MinVal		4904034	1					
ANR	4904830	Identifier	ValRange		4904034	1					
ANR	4904831	IfStatement	if ( value > val_thresh )		4904034	2					
ANR	4904832	Condition	value > val_thresh	396:16:13463:13480	4904034	0	True				
ANR	4904833	RelationalExpression	value > val_thresh		4904034	0		>			
ANR	4904834	Identifier	value		4904034	0					
ANR	4904835	Identifier	val_thresh		4904034	1					
ANR	4904836	BreakStatement	break ;	397:16:13499:13504	4904034	1	True				
ANR	4904837	ExpressionStatement	choice_range ++	398:12:13518:13532	4904034	3	True				
ANR	4904838	PostIncDecOperationExpression	choice_range ++		4904034	0					
ANR	4904839	Identifier	choice_range		4904034	0					
ANR	4904840	IncDec	++		4904034	1					
ANR	4904841	IfStatement	if ( ! quiet )		4904034	6					
ANR	4904842	Condition	! quiet	400:12:13556:13562	4904034	0	True				
ANR	4904843	UnaryOperationExpression	! quiet		4904034	0					
ANR	4904844	UnaryOperator	!		4904034	0					
ANR	4904845	Identifier	quiet		4904034	1					
ANR	4904846	ExpressionStatement	"printf ( ""Number of points less than %5.3f = %d\\n"" , val_thresh , choice_range )"	401:12:13577:13652	4904034	1	True				
ANR	4904847	CallExpression	"printf ( ""Number of points less than %5.3f = %d\\n"" , val_thresh , choice_range )"		4904034	0					
ANR	4904848	Callee	printf		4904034	0					
ANR	4904849	Identifier	printf		4904034	0					
ANR	4904850	ArgumentList	"""Number of points less than %5.3f = %d\\n"""		4904034	1					
ANR	4904851	Argument	"""Number of points less than %5.3f = %d\\n"""		4904034	0					
ANR	4904852	PrimaryExpression	"""Number of points less than %5.3f = %d\\n"""		4904034	0					
ANR	4904853	Argument	val_thresh		4904034	1					
ANR	4904854	Identifier	val_thresh		4904034	0					
ANR	4904855	Argument	choice_range		4904034	2					
ANR	4904856	Identifier	choice_range		4904034	0					
ANR	4904857	IfStatement	if ( choice_range > array_width * array_height / 10 )		4904034	7					
ANR	4904858	Condition	choice_range > array_width * array_height / 10	408:12:13891:13932	4904034	0	True				
ANR	4904859	RelationalExpression	choice_range > array_width * array_height / 10		4904034	0		>			
ANR	4904860	Identifier	choice_range		4904034	0					
ANR	4904861	MultiplicativeExpression	array_width * array_height / 10		4904034	1		*			
ANR	4904862	Identifier	array_width		4904034	0					
ANR	4904863	MultiplicativeExpression	array_height / 10		4904034	1		/			
ANR	4904864	Identifier	array_height		4904034	0					
ANR	4904865	PrimaryExpression	10		4904034	1					
ANR	4904866	ExpressionStatement	choice_range = array_width * array_height / 10	409:12:13947:13989	4904034	1	True				
ANR	4904867	AssignmentExpression	choice_range = array_width * array_height / 10		4904034	0		=			
ANR	4904868	Identifier	choice_range		4904034	0					
ANR	4904869	MultiplicativeExpression	array_width * array_height / 10		4904034	1		*			
ANR	4904870	Identifier	array_width		4904034	0					
ANR	4904871	MultiplicativeExpression	array_height / 10		4904034	1		/			
ANR	4904872	Identifier	array_height		4904034	0					
ANR	4904873	PrimaryExpression	10		4904034	1					
ANR	4904874	ExpressionStatement	rand_scaled = ( double ) rand ( ) / ( double ) RAND_MAX	412:8:14056:14103	4904034	8	True				
ANR	4904875	AssignmentExpression	rand_scaled = ( double ) rand ( ) / ( double ) RAND_MAX		4904034	0		=			
ANR	4904876	Identifier	rand_scaled		4904034	0					
ANR	4904877	MultiplicativeExpression	( double ) rand ( ) / ( double ) RAND_MAX		4904034	1		/			
ANR	4904878	CastExpression	( double ) rand ( )		4904034	0					
ANR	4904879	CastTarget	double		4904034	0					
ANR	4904880	CallExpression	rand ( )		4904034	1					
ANR	4904881	Callee	rand		4904034	0					
ANR	4904882	Identifier	rand		4904034	0					
ANR	4904883	ArgumentList			4904034	1					
ANR	4904884	CastExpression	( double ) RAND_MAX		4904034	1					
ANR	4904885	CastTarget	double		4904034	0					
ANR	4904886	Identifier	RAND_MAX		4904034	1					
ANR	4904887	ExpressionStatement	"choice = ( int ) ( ( double ) choice_range * pow ( rand_scaled , bias_power ) )"	413:8:14113:14180	4904034	9	True				
ANR	4904888	AssignmentExpression	"choice = ( int ) ( ( double ) choice_range * pow ( rand_scaled , bias_power ) )"		4904034	0		=			
ANR	4904889	Identifier	choice		4904034	0					
ANR	4904890	CastExpression	"( int ) ( ( double ) choice_range * pow ( rand_scaled , bias_power ) )"		4904034	1					
ANR	4904891	CastTarget	int		4904034	0					
ANR	4904892	MultiplicativeExpression	"( double ) choice_range * pow ( rand_scaled , bias_power )"		4904034	1		*			
ANR	4904893	CastExpression	( double ) choice_range		4904034	0					
ANR	4904894	CastTarget	double		4904034	0					
ANR	4904895	Identifier	choice_range		4904034	1					
ANR	4904896	CallExpression	"pow ( rand_scaled , bias_power )"		4904034	1					
ANR	4904897	Callee	pow		4904034	0					
ANR	4904898	Identifier	pow		4904034	0					
ANR	4904899	ArgumentList	rand_scaled		4904034	1					
ANR	4904900	Argument	rand_scaled		4904034	0					
ANR	4904901	Identifier	rand_scaled		4904034	0					
ANR	4904902	Argument	bias_power		4904034	1					
ANR	4904903	Identifier	bias_power		4904034	0					
ANR	4904904	ExpressionStatement	choice_X = Order [ choice ] . X	414:8:14190:14216	4904034	10	True				
ANR	4904905	AssignmentExpression	choice_X = Order [ choice ] . X		4904034	0		=			
ANR	4904906	Identifier	choice_X		4904034	0					
ANR	4904907	MemberAccess	Order [ choice ] . X		4904034	1					
ANR	4904908	ArrayIndexing	Order [ choice ]		4904034	0					
ANR	4904909	Identifier	Order		4904034	0					
ANR	4904910	Identifier	choice		4904034	1					
ANR	4904911	Identifier	X		4904034	1					
ANR	4904912	ExpressionStatement	choice_Y = Order [ choice ] . Y	415:8:14226:14252	4904034	11	True				
ANR	4904913	AssignmentExpression	choice_Y = Order [ choice ] . Y		4904034	0		=			
ANR	4904914	Identifier	choice_Y		4904034	0					
ANR	4904915	MemberAccess	Order [ choice ] . Y		4904034	1					
ANR	4904916	ArrayIndexing	Order [ choice ]		4904034	0					
ANR	4904917	Identifier	Order		4904034	0					
ANR	4904918	Identifier	choice		4904034	1					
ANR	4904919	Identifier	Y		4904034	1					
ANR	4904920	ExpressionStatement	do_min_dot = min_dot_pattern	420:8:14496:14524	4904034	12	True				
ANR	4904921	AssignmentExpression	do_min_dot = min_dot_pattern		4904034	0		=			
ANR	4904922	Identifier	do_min_dot		4904034	0					
ANR	4904923	Identifier	min_dot_pattern		4904034	1					
ANR	4904924	ExpressionStatement	level_up = 1	421:8:14534:14546	4904034	13	True				
ANR	4904925	AssignmentExpression	level_up = 1		4904034	0		=			
ANR	4904926	Identifier	level_up		4904034	0					
ANR	4904927	PrimaryExpression	1		4904034	1					
ANR	4904928	IfStatement	if ( min_dot_pattern != 0 )		4904034	14					
ANR	4904929	Condition	min_dot_pattern != 0	422:12:14621:14640	4904034	0	True				
ANR	4904930	EqualityExpression	min_dot_pattern != 0		4904034	0		!=			
ANR	4904931	Identifier	min_dot_pattern		4904034	0					
ANR	4904932	PrimaryExpression	0		4904034	1					
ANR	4904933	CompoundStatement		171:12:6150:6160	4904034	1					
ANR	4904934	IdentifierDeclStatement	"int row , dot , cX , cY ;"	423:12:14657:14677	4904034	0	True				
ANR	4904935	IdentifierDecl	row		4904034	0					
ANR	4904936	IdentifierDeclType	int		4904034	0					
ANR	4904937	Identifier	row		4904034	1					
ANR	4904938	IdentifierDecl	dot		4904034	1					
ANR	4904939	IdentifierDeclType	int		4904034	0					
ANR	4904940	Identifier	dot		4904034	1					
ANR	4904941	IdentifierDecl	cX		4904034	2					
ANR	4904942	IdentifierDeclType	int		4904034	0					
ANR	4904943	Identifier	cX		4904034	1					
ANR	4904944	IdentifierDecl	cY		4904034	3					
ANR	4904945	IdentifierDeclType	int		4904034	0					
ANR	4904946	Identifier	cY		4904034	1					
ANR	4904947	IdentifierDeclStatement	"int row_direction , dot_direction ;"	424:12:14691:14723	4904034	1	True				
ANR	4904948	IdentifierDecl	row_direction		4904034	0					
ANR	4904949	IdentifierDeclType	int		4904034	0					
ANR	4904950	Identifier	row_direction		4904034	1					
ANR	4904951	IdentifierDecl	dot_direction		4904034	1					
ANR	4904952	IdentifierDeclType	int		4904034	0					
ANR	4904953	Identifier	dot_direction		4904034	1					
ANR	4904954	IdentifierDeclStatement	int userow ;	425:12:14737:14747	4904034	2	True				
ANR	4904955	IdentifierDecl	userow		4904034	0					
ANR	4904956	IdentifierDeclType	int		4904034	0					
ANR	4904957	Identifier	userow		4904034	1					
ANR	4904958	ForStatement	for ( row = - 1 ; row <= min_dot_edges [ min_dot_pattern ] . num_rows ; row ++ )		4904034	3					
ANR	4904959	ForInit	row = - 1 ;	431:17:15095:15101	4904034	0	True				
ANR	4904960	AssignmentExpression	row = - 1		4904034	0		=			
ANR	4904961	Identifier	row		4904034	0					
ANR	4904962	UnaryOperationExpression	- 1		4904034	1					
ANR	4904963	UnaryOperator	-		4904034	0					
ANR	4904964	PrimaryExpression	1		4904034	1					
ANR	4904965	Condition	row <= min_dot_edges [ min_dot_pattern ] . num_rows	431:25:15103:15148	4904034	1	True				
ANR	4904966	RelationalExpression	row <= min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0		<=			
ANR	4904967	Identifier	row		4904034	0					
ANR	4904968	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1					
ANR	4904969	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4904970	Identifier	min_dot_edges		4904034	0					
ANR	4904971	Identifier	min_dot_pattern		4904034	1					
ANR	4904972	Identifier	num_rows		4904034	1					
ANR	4904973	PostIncDecOperationExpression	row ++	431:73:15151:15155	4904034	2	True				
ANR	4904974	Identifier	row		4904034	0					
ANR	4904975	IncDec	++		4904034	1					
ANR	4904976	CompoundStatement		177:80:6571:6571	4904034	3					
ANR	4904977	ExpressionStatement	userow = row < 0 ? 0 : row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1	433:16:15267:15523	4904034	0	True				
ANR	4904978	AssignmentExpression	userow = row < 0 ? 0 : row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1		4904034	0		=			
ANR	4904979	Identifier	userow		4904034	0					
ANR	4904980	ConditionalExpression	row < 0 ? 0 : row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1		4904034	1					
ANR	4904981	Condition	row < 0		4904034	0					
ANR	4904982	RelationalExpression	row < 0		4904034	0		<			
ANR	4904983	Identifier	row		4904034	0					
ANR	4904984	PrimaryExpression	0		4904034	1					
ANR	4904985	PrimaryExpression	0		4904034	1					
ANR	4904986	ConditionalExpression	row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1		4904034	2					
ANR	4904987	Condition	row < min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0					
ANR	4904988	RelationalExpression	row < min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0		<			
ANR	4904989	Identifier	row		4904034	0					
ANR	4904990	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1					
ANR	4904991	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4904992	Identifier	min_dot_edges		4904034	0					
ANR	4904993	Identifier	min_dot_pattern		4904034	1					
ANR	4904994	Identifier	num_rows		4904034	1					
ANR	4904995	Identifier	row		4904034	1					
ANR	4904996	AdditiveExpression	row - 1		4904034	2		-			
ANR	4904997	Identifier	row		4904034	0					
ANR	4904998	PrimaryExpression	1		4904034	1					
ANR	4904999	ExpressionStatement	cY = ( choice_Y + row + array_height ) % array_height	437:16:15578:15629	4904034	1	True				
ANR	4905000	AssignmentExpression	cY = ( choice_Y + row + array_height ) % array_height		4904034	0		=			
ANR	4905001	Identifier	cY		4904034	0					
ANR	4905002	MultiplicativeExpression	( choice_Y + row + array_height ) % array_height		4904034	1		%			
ANR	4905003	AdditiveExpression	choice_Y + row + array_height		4904034	0		+			
ANR	4905004	Identifier	choice_Y		4904034	0					
ANR	4905005	AdditiveExpression	row + array_height		4904034	1		+			
ANR	4905006	Identifier	row		4904034	0					
ANR	4905007	Identifier	array_height		4904034	1					
ANR	4905008	Identifier	array_height		4904034	1					
ANR	4905009	ForStatement	for ( dot = min_dot_edges [ min_dot_pattern ] . left [ userow ] - 1 ; dot <= min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1 ; dot ++ )		4904034	2					
ANR	4905010	ForInit	dot = min_dot_edges [ min_dot_pattern ] . left [ userow ] - 1 ;	438:21:15652:15703	4904034	0	True				
ANR	4905011	AssignmentExpression	dot = min_dot_edges [ min_dot_pattern ] . left [ userow ] - 1		4904034	0		=			
ANR	4905012	Identifier	dot		4904034	0					
ANR	4905013	AdditiveExpression	min_dot_edges [ min_dot_pattern ] . left [ userow ] - 1		4904034	1		-			
ANR	4905014	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . left [ userow ]		4904034	0					
ANR	4905015	MemberAccess	min_dot_edges [ min_dot_pattern ] . left		4904034	0					
ANR	4905016	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905017	Identifier	min_dot_edges		4904034	0					
ANR	4905018	Identifier	min_dot_pattern		4904034	1					
ANR	4905019	Identifier	left		4904034	1					
ANR	4905020	Identifier	userow		4904034	1					
ANR	4905021	PrimaryExpression	1		4904034	1					
ANR	4905022	Condition	dot <= min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1	439:24:15729:15783	4904034	1	True				
ANR	4905023	RelationalExpression	dot <= min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1		4904034	0		<=			
ANR	4905024	Identifier	dot		4904034	0					
ANR	4905025	AdditiveExpression	min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1		4904034	1		+			
ANR	4905026	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . right [ userow ]		4904034	0					
ANR	4905027	MemberAccess	min_dot_edges [ min_dot_pattern ] . right		4904034	0					
ANR	4905028	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905029	Identifier	min_dot_edges		4904034	0					
ANR	4905030	Identifier	min_dot_pattern		4904034	1					
ANR	4905031	Identifier	right		4904034	1					
ANR	4905032	Identifier	userow		4904034	1					
ANR	4905033	PrimaryExpression	1		4904034	1					
ANR	4905034	PostIncDecOperationExpression	dot ++	439:81:15786:15790	4904034	2	True				
ANR	4905035	Identifier	dot		4904034	0					
ANR	4905036	IncDec	++		4904034	1					
ANR	4905037	CompoundStatement		185:88:7206:7206	4904034	3					
ANR	4905038	ExpressionStatement	cX = ( choice_X + dot + array_height ) % array_width	440:20:15815:15865	4904034	0	True				
ANR	4905039	AssignmentExpression	cX = ( choice_X + dot + array_height ) % array_width		4904034	0		=			
ANR	4905040	Identifier	cX		4904034	0					
ANR	4905041	MultiplicativeExpression	( choice_X + dot + array_height ) % array_width		4904034	1		%			
ANR	4905042	AdditiveExpression	choice_X + dot + array_height		4904034	0		+			
ANR	4905043	Identifier	choice_X		4904034	0					
ANR	4905044	AdditiveExpression	dot + array_height		4904034	1		+			
ANR	4905045	Identifier	dot		4904034	0					
ANR	4905046	Identifier	array_height		4904034	1					
ANR	4905047	Identifier	array_width		4904034	1					
ANR	4905048	IfStatement	if ( ThresholdArray [ cX ] [ cY ] != - 1 )		4904034	1					
ANR	4905049	Condition	ThresholdArray [ cX ] [ cY ] != - 1	441:24:15891:15918	4904034	0	True				
ANR	4905050	EqualityExpression	ThresholdArray [ cX ] [ cY ] != - 1		4904034	0		!=			
ANR	4905051	ArrayIndexing	ThresholdArray [ cX ] [ cY ]		4904034	0					
ANR	4905052	ArrayIndexing	ThresholdArray [ cX ]		4904034	0					
ANR	4905053	Identifier	ThresholdArray		4904034	0					
ANR	4905054	Identifier	cX		4904034	1					
ANR	4905055	Identifier	cY		4904034	1					
ANR	4905056	UnaryOperationExpression	- 1		4904034	1					
ANR	4905057	UnaryOperator	-		4904034	0					
ANR	4905058	PrimaryExpression	1		4904034	1					
ANR	4905059	GotoStatement	goto find_neighbor ;	442:24:15945:15963	4904034	1	True				
ANR	4905060	Identifier	find_neighbor		4904034	0					
ANR	4905061	GotoStatement	goto do_dot ;	445:12:16009:16020	4904034	4	True				
ANR	4905062	Identifier	do_dot		4904034	0					
ANR	4905063	Label	find_neighbor :	447:0:16068:16081	4904034	5	True				
ANR	4905064	Identifier	find_neighbor		4904034	0					
ANR	4905065	ExpressionStatement	do_min_dot = 0	450:12:16239:16253	4904034	6	True				
ANR	4905066	AssignmentExpression	do_min_dot = 0		4904034	0		=			
ANR	4905067	Identifier	do_min_dot		4904034	0					
ANR	4905068	PrimaryExpression	0		4904034	1					
ANR	4905069	IfStatement	if ( ! quiet )		4904034	7					
ANR	4905070	Condition	! quiet	451:16:16299:16304	4904034	0	True				
ANR	4905071	UnaryOperationExpression	! quiet		4904034	0					
ANR	4905072	UnaryOperator	!		4904034	0					
ANR	4905073	Identifier	quiet		4904034	1					
ANR	4905074	ExpressionStatement	"printf ( ""min_dot at [%d, %d] suppressed due to neighbor dot at: [%d, %d]\\n"" , choice_X , choice_Y , cX , cY )"	452:16:16323:16442	4904034	1	True				
ANR	4905075	CallExpression	"printf ( ""min_dot at [%d, %d] suppressed due to neighbor dot at: [%d, %d]\\n"" , choice_X , choice_Y , cX , cY )"		4904034	0					
ANR	4905076	Callee	printf		4904034	0					
ANR	4905077	Identifier	printf		4904034	0					
ANR	4905078	ArgumentList	"""min_dot at [%d, %d] suppressed due to neighbor dot at: [%d, %d]\\n"""		4904034	1					
ANR	4905079	Argument	"""min_dot at [%d, %d] suppressed due to neighbor dot at: [%d, %d]\\n"""		4904034	0					
ANR	4905080	PrimaryExpression	"""min_dot at [%d, %d] suppressed due to neighbor dot at: [%d, %d]\\n"""		4904034	0					
ANR	4905081	Argument	choice_X		4904034	1					
ANR	4905082	Identifier	choice_X		4904034	0					
ANR	4905083	Argument	choice_Y		4904034	2					
ANR	4905084	Identifier	choice_Y		4904034	0					
ANR	4905085	Argument	cX		4904034	3					
ANR	4905086	Identifier	cX		4904034	0					
ANR	4905087	Argument	cY		4904034	4					
ANR	4905088	Identifier	cY		4904034	0					
ANR	4905089	IfStatement	if ( row < min_dot_edges [ min_dot_pattern ] . num_rows >> 1 )		4904034	8					
ANR	4905090	Condition	row < min_dot_edges [ min_dot_pattern ] . num_rows >> 1	456:16:16624:16673	4904034	0	True				
ANR	4905091	RelationalExpression	row < min_dot_edges [ min_dot_pattern ] . num_rows >> 1		4904034	0		<			
ANR	4905092	Identifier	row		4904034	0					
ANR	4905093	ShiftExpression	min_dot_edges [ min_dot_pattern ] . num_rows >> 1		4904034	1		>>			
ANR	4905094	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0					
ANR	4905095	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905096	Identifier	min_dot_edges		4904034	0					
ANR	4905097	Identifier	min_dot_pattern		4904034	1					
ANR	4905098	Identifier	num_rows		4904034	1					
ANR	4905099	PrimaryExpression	1		4904034	1					
ANR	4905100	ExpressionStatement	row_direction = 1	457:16:16692:16709	4904034	1	True				
ANR	4905101	AssignmentExpression	row_direction = 1		4904034	0		=			
ANR	4905102	Identifier	row_direction		4904034	0					
ANR	4905103	PrimaryExpression	1		4904034	1					
ANR	4905104	ElseStatement	else		4904034	0					
ANR	4905105	ExpressionStatement	row_direction = - 1	459:16:16785:16803	4904034	0	True				
ANR	4905106	AssignmentExpression	row_direction = - 1		4904034	0		=			
ANR	4905107	Identifier	row_direction		4904034	0					
ANR	4905108	UnaryOperationExpression	- 1		4904034	1					
ANR	4905109	UnaryOperator	-		4904034	0					
ANR	4905110	PrimaryExpression	1		4904034	1					
ANR	4905111	IfStatement	if ( dot < min_dot_edges [ min_dot_pattern ] . right [ userow ] >> 1 )		4904034	9					
ANR	4905112	Condition	dot < min_dot_edges [ min_dot_pattern ] . right [ userow ] >> 1	460:16:16852:16906	4904034	0	True				
ANR	4905113	RelationalExpression	dot < min_dot_edges [ min_dot_pattern ] . right [ userow ] >> 1		4904034	0		<			
ANR	4905114	Identifier	dot		4904034	0					
ANR	4905115	ShiftExpression	min_dot_edges [ min_dot_pattern ] . right [ userow ] >> 1		4904034	1		>>			
ANR	4905116	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . right [ userow ]		4904034	0					
ANR	4905117	MemberAccess	min_dot_edges [ min_dot_pattern ] . right		4904034	0					
ANR	4905118	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905119	Identifier	min_dot_edges		4904034	0					
ANR	4905120	Identifier	min_dot_pattern		4904034	1					
ANR	4905121	Identifier	right		4904034	1					
ANR	4905122	Identifier	userow		4904034	1					
ANR	4905123	PrimaryExpression	1		4904034	1					
ANR	4905124	ExpressionStatement	dot_direction = 1	461:16:16925:16942	4904034	1	True				
ANR	4905125	AssignmentExpression	dot_direction = 1		4904034	0		=			
ANR	4905126	Identifier	dot_direction		4904034	0					
ANR	4905127	PrimaryExpression	1		4904034	1					
ANR	4905128	ElseStatement	else		4904034	0					
ANR	4905129	ExpressionStatement	dot_direction = - 1	463:16:16995:17013	4904034	0	True				
ANR	4905130	AssignmentExpression	dot_direction = - 1		4904034	0		=			
ANR	4905131	Identifier	dot_direction		4904034	0					
ANR	4905132	UnaryOperationExpression	- 1		4904034	1					
ANR	4905133	UnaryOperator	-		4904034	0					
ANR	4905134	PrimaryExpression	1		4904034	1					
ANR	4905135	IfStatement	if ( ! quiet )		4904034	10					
ANR	4905136	Condition	! quiet	464:16:17048:17053	4904034	0	True				
ANR	4905137	UnaryOperationExpression	! quiet		4904034	0					
ANR	4905138	UnaryOperator	!		4904034	0					
ANR	4905139	Identifier	quiet		4904034	1					
ANR	4905140	ExpressionStatement	"printf ( ""searching for unmarked dot %s and to the %s\\n"" , row_direction < 0 ? ""above"" : ""below"" , dot_direction < 0 ? ""left"" : ""right"" )"	465:16:17072:17242	4904034	1	True				
ANR	4905141	CallExpression	"printf ( ""searching for unmarked dot %s and to the %s\\n"" , row_direction < 0 ? ""above"" : ""below"" , dot_direction < 0 ? ""left"" : ""right"" )"		4904034	0					
ANR	4905142	Callee	printf		4904034	0					
ANR	4905143	Identifier	printf		4904034	0					
ANR	4905144	ArgumentList	"""searching for unmarked dot %s and to the %s\\n"""		4904034	1					
ANR	4905145	Argument	"""searching for unmarked dot %s and to the %s\\n"""		4904034	0					
ANR	4905146	PrimaryExpression	"""searching for unmarked dot %s and to the %s\\n"""		4904034	0					
ANR	4905147	Argument	"row_direction < 0 ? ""above"" : ""below"""		4904034	1					
ANR	4905148	ConditionalExpression	"row_direction < 0 ? ""above"" : ""below"""		4904034	0					
ANR	4905149	Condition	row_direction < 0		4904034	0					
ANR	4905150	RelationalExpression	row_direction < 0		4904034	0		<			
ANR	4905151	Identifier	row_direction		4904034	0					
ANR	4905152	PrimaryExpression	0		4904034	1					
ANR	4905153	PrimaryExpression	"""above"""		4904034	1					
ANR	4905154	PrimaryExpression	"""below"""		4904034	2					
ANR	4905155	Argument	"dot_direction < 0 ? ""left"" : ""right"""		4904034	2					
ANR	4905156	ConditionalExpression	"dot_direction < 0 ? ""left"" : ""right"""		4904034	0					
ANR	4905157	Condition	dot_direction < 0		4904034	0					
ANR	4905158	RelationalExpression	dot_direction < 0		4904034	0		<			
ANR	4905159	Identifier	dot_direction		4904034	0					
ANR	4905160	PrimaryExpression	0		4904034	1					
ANR	4905161	PrimaryExpression	"""left"""		4904034	1					
ANR	4905162	PrimaryExpression	"""right"""		4904034	2					
ANR	4905163	IfStatement	if ( ( choice_X & 1 ) == 0 )		4904034	11					
ANR	4905164	Condition	( choice_X & 1 ) == 0	468:16:17260:17278	4904034	0	True				
ANR	4905165	EqualityExpression	( choice_X & 1 ) == 0		4904034	0		==			
ANR	4905166	BitAndExpression	choice_X & 1		4904034	0		&			
ANR	4905167	Identifier	choice_X		4904034	0					
ANR	4905168	PrimaryExpression	1		4904034	1					
ANR	4905169	PrimaryExpression	0		4904034	1					
ANR	4905170	CompoundStatement		214:37:8694:8694	4904034	1					
ANR	4905171	ForStatement	for ( ; ( row >= - 1 ) && ( row <= min_dot_edges [ min_dot_pattern ] . num_rows ) ; row += row_direction )		4904034	0					
ANR	4905172	Condition	( row >= - 1 ) && ( row <= min_dot_edges [ min_dot_pattern ] . num_rows )	470:23:17358:17420	4904034	0	True				
ANR	4905173	AndExpression	( row >= - 1 ) && ( row <= min_dot_edges [ min_dot_pattern ] . num_rows )		4904034	0		&&			
ANR	4905174	RelationalExpression	row >= - 1		4904034	0		>=			
ANR	4905175	Identifier	row		4904034	0					
ANR	4905176	UnaryOperationExpression	- 1		4904034	1					
ANR	4905177	UnaryOperator	-		4904034	0					
ANR	4905178	PrimaryExpression	1		4904034	1					
ANR	4905179	RelationalExpression	row <= min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1		<=			
ANR	4905180	Identifier	row		4904034	0					
ANR	4905181	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1					
ANR	4905182	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905183	Identifier	min_dot_edges		4904034	0					
ANR	4905184	Identifier	min_dot_pattern		4904034	1					
ANR	4905185	Identifier	num_rows		4904034	1					
ANR	4905186	AssignmentExpression	row += row_direction	471:21:17444:17463	4904034	1	True	+=			
ANR	4905187	Identifier	row		4904034	0					
ANR	4905188	Identifier	row_direction		4904034	1					
ANR	4905189	CompoundStatement		217:43:8879:8879	4904034	2					
ANR	4905190	ExpressionStatement	userow = row < 0 ? 0 : row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1	472:19:17487:17748	4904034	0	True				
ANR	4905191	AssignmentExpression	userow = row < 0 ? 0 : row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1		4904034	0		=			
ANR	4905192	Identifier	userow		4904034	0					
ANR	4905193	ConditionalExpression	row < 0 ? 0 : row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1		4904034	1					
ANR	4905194	Condition	row < 0		4904034	0					
ANR	4905195	RelationalExpression	row < 0		4904034	0		<			
ANR	4905196	Identifier	row		4904034	0					
ANR	4905197	PrimaryExpression	0		4904034	1					
ANR	4905198	PrimaryExpression	0		4904034	1					
ANR	4905199	ConditionalExpression	row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1		4904034	2					
ANR	4905200	Condition	row < min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0					
ANR	4905201	RelationalExpression	row < min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0		<			
ANR	4905202	Identifier	row		4904034	0					
ANR	4905203	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1					
ANR	4905204	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905205	Identifier	min_dot_edges		4904034	0					
ANR	4905206	Identifier	min_dot_pattern		4904034	1					
ANR	4905207	Identifier	num_rows		4904034	1					
ANR	4905208	Identifier	row		4904034	1					
ANR	4905209	AdditiveExpression	row - 1		4904034	2		-			
ANR	4905210	Identifier	row		4904034	0					
ANR	4905211	PrimaryExpression	1		4904034	1					
ANR	4905212	ExpressionStatement	cY = ( choice_Y + row + array_height ) % array_height	476:19:17806:17857	4904034	1	True				
ANR	4905213	AssignmentExpression	cY = ( choice_Y + row + array_height ) % array_height		4904034	0		=			
ANR	4905214	Identifier	cY		4904034	0					
ANR	4905215	MultiplicativeExpression	( choice_Y + row + array_height ) % array_height		4904034	1		%			
ANR	4905216	AdditiveExpression	choice_Y + row + array_height		4904034	0		+			
ANR	4905217	Identifier	choice_Y		4904034	0					
ANR	4905218	AdditiveExpression	row + array_height		4904034	1		+			
ANR	4905219	Identifier	row		4904034	0					
ANR	4905220	Identifier	array_height		4904034	1					
ANR	4905221	Identifier	array_height		4904034	1					
ANR	4905222	ExpressionStatement	dot = dot_direction > 0 ? min_dot_edges [ min_dot_pattern ] . left [ userow ] - 1 : min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1	477:19:17878:18047	4904034	2	True				
ANR	4905223	AssignmentExpression	dot = dot_direction > 0 ? min_dot_edges [ min_dot_pattern ] . left [ userow ] - 1 : min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1		4904034	0		=			
ANR	4905224	Identifier	dot		4904034	0					
ANR	4905225	ConditionalExpression	dot_direction > 0 ? min_dot_edges [ min_dot_pattern ] . left [ userow ] - 1 : min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1		4904034	1					
ANR	4905226	Condition	dot_direction > 0		4904034	0					
ANR	4905227	RelationalExpression	dot_direction > 0		4904034	0		>			
ANR	4905228	Identifier	dot_direction		4904034	0					
ANR	4905229	PrimaryExpression	0		4904034	1					
ANR	4905230	AdditiveExpression	min_dot_edges [ min_dot_pattern ] . left [ userow ] - 1		4904034	1		-			
ANR	4905231	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . left [ userow ]		4904034	0					
ANR	4905232	MemberAccess	min_dot_edges [ min_dot_pattern ] . left		4904034	0					
ANR	4905233	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905234	Identifier	min_dot_edges		4904034	0					
ANR	4905235	Identifier	min_dot_pattern		4904034	1					
ANR	4905236	Identifier	left		4904034	1					
ANR	4905237	Identifier	userow		4904034	1					
ANR	4905238	PrimaryExpression	1		4904034	1					
ANR	4905239	AdditiveExpression	min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1		4904034	2		+			
ANR	4905240	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . right [ userow ]		4904034	0					
ANR	4905241	MemberAccess	min_dot_edges [ min_dot_pattern ] . right		4904034	0					
ANR	4905242	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905243	Identifier	min_dot_edges		4904034	0					
ANR	4905244	Identifier	min_dot_pattern		4904034	1					
ANR	4905245	Identifier	right		4904034	1					
ANR	4905246	Identifier	userow		4904034	1					
ANR	4905247	PrimaryExpression	1		4904034	1					
ANR	4905248	ForStatement	for ( ; ( dot >= - 1 ) && ( dot <= min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1 ) ; dot += dot_direction )		4904034	3					
ANR	4905249	Condition	( dot >= - 1 ) && ( dot <= min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1 )	479:26:18075:18146	4904034	0	True				
ANR	4905250	AndExpression	( dot >= - 1 ) && ( dot <= min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1 )		4904034	0		&&			
ANR	4905251	RelationalExpression	dot >= - 1		4904034	0		>=			
ANR	4905252	Identifier	dot		4904034	0					
ANR	4905253	UnaryOperationExpression	- 1		4904034	1					
ANR	4905254	UnaryOperator	-		4904034	0					
ANR	4905255	PrimaryExpression	1		4904034	1					
ANR	4905256	RelationalExpression	dot <= min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1		4904034	1		<=			
ANR	4905257	Identifier	dot		4904034	0					
ANR	4905258	AdditiveExpression	min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1		4904034	1		+			
ANR	4905259	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . right [ userow ]		4904034	0					
ANR	4905260	MemberAccess	min_dot_edges [ min_dot_pattern ] . right		4904034	0					
ANR	4905261	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905262	Identifier	min_dot_edges		4904034	0					
ANR	4905263	Identifier	min_dot_pattern		4904034	1					
ANR	4905264	Identifier	right		4904034	1					
ANR	4905265	Identifier	userow		4904034	1					
ANR	4905266	PrimaryExpression	1		4904034	1					
ANR	4905267	AssignmentExpression	dot += dot_direction	480:27:18176:18195	4904034	1	True	+=			
ANR	4905268	Identifier	dot		4904034	0					
ANR	4905269	Identifier	dot_direction		4904034	1					
ANR	4905270	CompoundStatement		226:49:9611:9611	4904034	2					
ANR	4905271	ExpressionStatement	cX = ( choice_X + dot + array_height ) % array_width	481:24:18224:18274	4904034	0	True				
ANR	4905272	AssignmentExpression	cX = ( choice_X + dot + array_height ) % array_width		4904034	0		=			
ANR	4905273	Identifier	cX		4904034	0					
ANR	4905274	MultiplicativeExpression	( choice_X + dot + array_height ) % array_width		4904034	1		%			
ANR	4905275	AdditiveExpression	choice_X + dot + array_height		4904034	0		+			
ANR	4905276	Identifier	choice_X		4904034	0					
ANR	4905277	AdditiveExpression	dot + array_height		4904034	1		+			
ANR	4905278	Identifier	dot		4904034	0					
ANR	4905279	Identifier	array_height		4904034	1					
ANR	4905280	Identifier	array_width		4904034	1					
ANR	4905281	IfStatement	if ( ! quiet )		4904034	1					
ANR	4905282	Condition	! quiet	482:28:18304:18309	4904034	0	True				
ANR	4905283	UnaryOperationExpression	! quiet		4904034	0					
ANR	4905284	UnaryOperator	!		4904034	0					
ANR	4905285	Identifier	quiet		4904034	1					
ANR	4905286	ExpressionStatement	"printf ( ""dot at %d, %d is %s\\n"" , cX , cY , ThresholdArray [ cX ] [ cY ] == - 1 ? ""unmarked"" : ""marked"" )"	483:28:18340:18468	4904034	1	True				
ANR	4905287	CallExpression	"printf ( ""dot at %d, %d is %s\\n"" , cX , cY , ThresholdArray [ cX ] [ cY ] == - 1 ? ""unmarked"" : ""marked"" )"		4904034	0					
ANR	4905288	Callee	printf		4904034	0					
ANR	4905289	Identifier	printf		4904034	0					
ANR	4905290	ArgumentList	"""dot at %d, %d is %s\\n"""		4904034	1					
ANR	4905291	Argument	"""dot at %d, %d is %s\\n"""		4904034	0					
ANR	4905292	PrimaryExpression	"""dot at %d, %d is %s\\n"""		4904034	0					
ANR	4905293	Argument	cX		4904034	1					
ANR	4905294	Identifier	cX		4904034	0					
ANR	4905295	Argument	cY		4904034	2					
ANR	4905296	Identifier	cY		4904034	0					
ANR	4905297	Argument	"ThresholdArray [ cX ] [ cY ] == - 1 ? ""unmarked"" : ""marked"""		4904034	3					
ANR	4905298	ConditionalExpression	"ThresholdArray [ cX ] [ cY ] == - 1 ? ""unmarked"" : ""marked"""		4904034	0					
ANR	4905299	Condition	ThresholdArray [ cX ] [ cY ] == - 1		4904034	0					
ANR	4905300	EqualityExpression	ThresholdArray [ cX ] [ cY ] == - 1		4904034	0		==			
ANR	4905301	ArrayIndexing	ThresholdArray [ cX ] [ cY ]		4904034	0					
ANR	4905302	ArrayIndexing	ThresholdArray [ cX ]		4904034	0					
ANR	4905303	Identifier	ThresholdArray		4904034	0					
ANR	4905304	Identifier	cX		4904034	1					
ANR	4905305	Identifier	cY		4904034	1					
ANR	4905306	UnaryOperationExpression	- 1		4904034	1					
ANR	4905307	UnaryOperator	-		4904034	0					
ANR	4905308	PrimaryExpression	1		4904034	1					
ANR	4905309	PrimaryExpression	"""unmarked"""		4904034	1					
ANR	4905310	PrimaryExpression	"""marked"""		4904034	2					
ANR	4905311	IfStatement	if ( ThresholdArray [ cX ] [ cY ] == - 1 )		4904034	2					
ANR	4905312	Condition	ThresholdArray [ cX ] [ cY ] == - 1	485:28:18498:18525	4904034	0	True				
ANR	4905313	EqualityExpression	ThresholdArray [ cX ] [ cY ] == - 1		4904034	0		==			
ANR	4905314	ArrayIndexing	ThresholdArray [ cX ] [ cY ]		4904034	0					
ANR	4905315	ArrayIndexing	ThresholdArray [ cX ]		4904034	0					
ANR	4905316	Identifier	ThresholdArray		4904034	0					
ANR	4905317	Identifier	cX		4904034	1					
ANR	4905318	Identifier	cY		4904034	1					
ANR	4905319	UnaryOperationExpression	- 1		4904034	1					
ANR	4905320	UnaryOperator	-		4904034	0					
ANR	4905321	PrimaryExpression	1		4904034	1					
ANR	4905322	CompoundStatement		231:58:9941:9941	4904034	1					
ANR	4905323	ExpressionStatement	choice_X = cX	486:28:18558:18571	4904034	0	True				
ANR	4905324	AssignmentExpression	choice_X = cX		4904034	0		=			
ANR	4905325	Identifier	choice_X		4904034	0					
ANR	4905326	Identifier	cX		4904034	1					
ANR	4905327	ExpressionStatement	choice_Y = cY	487:28:18601:18614	4904034	1	True				
ANR	4905328	AssignmentExpression	choice_Y = cY		4904034	0		=			
ANR	4905329	Identifier	choice_Y		4904034	0					
ANR	4905330	Identifier	cY		4904034	1					
ANR	4905331	GotoStatement	goto do_dot ;	488:28:18644:18655	4904034	2	True				
ANR	4905332	Identifier	do_dot		4904034	0					
ANR	4905333	ElseStatement	else		4904034	0					
ANR	4905334	CompoundStatement		238:19:10155:10155	4904034	0					
ANR	4905335	ForStatement	for ( dot = dot_direction > 0 ? - 1 : 3 ; dot >= - 1 && dot <= 3 ; dot += dot_direction )		4904034	0					
ANR	4905336	ForInit	dot = dot_direction > 0 ? - 1 : 3 ;	494:21:18813:18845	4904034	0	True				
ANR	4905337	AssignmentExpression	dot = dot_direction > 0 ? - 1 : 3		4904034	0		=			
ANR	4905338	Identifier	dot		4904034	0					
ANR	4905339	ConditionalExpression	dot_direction > 0 ? - 1 : 3		4904034	1					
ANR	4905340	Condition	dot_direction > 0		4904034	0					
ANR	4905341	RelationalExpression	dot_direction > 0		4904034	0		>			
ANR	4905342	Identifier	dot_direction		4904034	0					
ANR	4905343	PrimaryExpression	0		4904034	1					
ANR	4905344	UnaryOperationExpression	- 1		4904034	1					
ANR	4905345	UnaryOperator	-		4904034	0					
ANR	4905346	PrimaryExpression	1		4904034	1					
ANR	4905347	PrimaryExpression	3		4904034	2					
ANR	4905348	Condition	dot >= - 1 && dot <= 3	495:25:18872:18892	4904034	1	True				
ANR	4905349	AndExpression	dot >= - 1 && dot <= 3		4904034	0		&&			
ANR	4905350	RelationalExpression	dot >= - 1		4904034	0		>=			
ANR	4905351	Identifier	dot		4904034	0					
ANR	4905352	UnaryOperationExpression	- 1		4904034	1					
ANR	4905353	UnaryOperator	-		4904034	0					
ANR	4905354	PrimaryExpression	1		4904034	1					
ANR	4905355	RelationalExpression	dot <= 3		4904034	1		<=			
ANR	4905356	Identifier	dot		4904034	0					
ANR	4905357	PrimaryExpression	3		4904034	1					
ANR	4905358	AssignmentExpression	dot += dot_direction	496:25:18920:18939	4904034	2	True	+=			
ANR	4905359	Identifier	dot		4904034	0					
ANR	4905360	Identifier	dot_direction		4904034	1					
ANR	4905361	CompoundStatement		242:47:10355:10355	4904034	3					
ANR	4905362	ForStatement	for ( row = row_direction > 0 ? - 1 : min_dot_edges [ min_dot_pattern ] . num_rows ; ( row <= min_dot_edges [ min_dot_pattern ] . num_rows ) ; row += row_direction )		4904034	0					
ANR	4905363	ForInit	row = row_direction > 0 ? - 1 : min_dot_edges [ min_dot_pattern ] . num_rows ;	498:25:19024:19094	4904034	0	True				
ANR	4905364	AssignmentExpression	row = row_direction > 0 ? - 1 : min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0		=			
ANR	4905365	Identifier	row		4904034	0					
ANR	4905366	ConditionalExpression	row_direction > 0 ? - 1 : min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1					
ANR	4905367	Condition	row_direction > 0		4904034	0					
ANR	4905368	RelationalExpression	row_direction > 0		4904034	0		>			
ANR	4905369	Identifier	row_direction		4904034	0					
ANR	4905370	PrimaryExpression	0		4904034	1					
ANR	4905371	UnaryOperationExpression	- 1		4904034	1					
ANR	4905372	UnaryOperator	-		4904034	0					
ANR	4905373	PrimaryExpression	1		4904034	1					
ANR	4905374	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	2					
ANR	4905375	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905376	Identifier	min_dot_edges		4904034	0					
ANR	4905377	Identifier	min_dot_pattern		4904034	1					
ANR	4905378	Identifier	num_rows		4904034	1					
ANR	4905379	Condition	row <= min_dot_edges [ min_dot_pattern ] . num_rows	499:27:19123:19170	4904034	1	True				
ANR	4905380	RelationalExpression	row <= min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0		<=			
ANR	4905381	Identifier	row		4904034	0					
ANR	4905382	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1					
ANR	4905383	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905384	Identifier	min_dot_edges		4904034	0					
ANR	4905385	Identifier	min_dot_pattern		4904034	1					
ANR	4905386	Identifier	num_rows		4904034	1					
ANR	4905387	AssignmentExpression	row += row_direction	500:27:19200:19219	4904034	2	True	+=			
ANR	4905388	Identifier	row		4904034	0					
ANR	4905389	Identifier	row_direction		4904034	1					
ANR	4905390	CompoundStatement		246:49:10635:10635	4904034	3					
ANR	4905391	ExpressionStatement	userow = row < 0 ? 0 : row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1	501:24:19248:19525	4904034	0	True				
ANR	4905392	AssignmentExpression	userow = row < 0 ? 0 : row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1		4904034	0		=			
ANR	4905393	Identifier	userow		4904034	0					
ANR	4905394	ConditionalExpression	row < 0 ? 0 : row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1		4904034	1					
ANR	4905395	Condition	row < 0		4904034	0					
ANR	4905396	RelationalExpression	row < 0		4904034	0		<			
ANR	4905397	Identifier	row		4904034	0					
ANR	4905398	PrimaryExpression	0		4904034	1					
ANR	4905399	PrimaryExpression	0		4904034	1					
ANR	4905400	ConditionalExpression	row < min_dot_edges [ min_dot_pattern ] . num_rows ? row : row - 1		4904034	2					
ANR	4905401	Condition	row < min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0					
ANR	4905402	RelationalExpression	row < min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0		<			
ANR	4905403	Identifier	row		4904034	0					
ANR	4905404	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1					
ANR	4905405	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905406	Identifier	min_dot_edges		4904034	0					
ANR	4905407	Identifier	min_dot_pattern		4904034	1					
ANR	4905408	Identifier	num_rows		4904034	1					
ANR	4905409	Identifier	row		4904034	1					
ANR	4905410	AdditiveExpression	row - 1		4904034	2		-			
ANR	4905411	Identifier	row		4904034	0					
ANR	4905412	PrimaryExpression	1		4904034	1					
ANR	4905413	ExpressionStatement	cY = ( choice_Y + row + array_height ) % array_height	505:24:19588:19639	4904034	1	True				
ANR	4905414	AssignmentExpression	cY = ( choice_Y + row + array_height ) % array_height		4904034	0		=			
ANR	4905415	Identifier	cY		4904034	0					
ANR	4905416	MultiplicativeExpression	( choice_Y + row + array_height ) % array_height		4904034	1		%			
ANR	4905417	AdditiveExpression	choice_Y + row + array_height		4904034	0		+			
ANR	4905418	Identifier	choice_Y		4904034	0					
ANR	4905419	AdditiveExpression	row + array_height		4904034	1		+			
ANR	4905420	Identifier	row		4904034	0					
ANR	4905421	Identifier	array_height		4904034	1					
ANR	4905422	Identifier	array_height		4904034	1					
ANR	4905423	IfStatement	if ( dot > min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1 )		4904034	2					
ANR	4905424	Condition	dot > min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1	506:28:19669:19722	4904034	0	True				
ANR	4905425	RelationalExpression	dot > min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1		4904034	0		>			
ANR	4905426	Identifier	dot		4904034	0					
ANR	4905427	AdditiveExpression	min_dot_edges [ min_dot_pattern ] . right [ userow ] + 1		4904034	1		+			
ANR	4905428	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . right [ userow ]		4904034	0					
ANR	4905429	MemberAccess	min_dot_edges [ min_dot_pattern ] . right		4904034	0					
ANR	4905430	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905431	Identifier	min_dot_edges		4904034	0					
ANR	4905432	Identifier	min_dot_pattern		4904034	1					
ANR	4905433	Identifier	right		4904034	1					
ANR	4905434	Identifier	userow		4904034	1					
ANR	4905435	PrimaryExpression	1		4904034	1					
ANR	4905436	BreakStatement	break ;	507:32:19757:19762	4904034	1	True				
ANR	4905437	ExpressionStatement	cX = ( choice_X + dot + array_height ) % array_width	508:24:19823:19873	4904034	3	True				
ANR	4905438	AssignmentExpression	cX = ( choice_X + dot + array_height ) % array_width		4904034	0		=			
ANR	4905439	Identifier	cX		4904034	0					
ANR	4905440	MultiplicativeExpression	( choice_X + dot + array_height ) % array_width		4904034	1		%			
ANR	4905441	AdditiveExpression	choice_X + dot + array_height		4904034	0		+			
ANR	4905442	Identifier	choice_X		4904034	0					
ANR	4905443	AdditiveExpression	dot + array_height		4904034	1		+			
ANR	4905444	Identifier	dot		4904034	0					
ANR	4905445	Identifier	array_height		4904034	1					
ANR	4905446	Identifier	array_width		4904034	1					
ANR	4905447	IfStatement	if ( ! quiet )		4904034	4					
ANR	4905448	Condition	! quiet	509:28:19903:19908	4904034	0	True				
ANR	4905449	UnaryOperationExpression	! quiet		4904034	0					
ANR	4905450	UnaryOperator	!		4904034	0					
ANR	4905451	Identifier	quiet		4904034	1					
ANR	4905452	ExpressionStatement	"printf ( ""dot at %d, %d is %s\\n"" , cX , cY , ThresholdArray [ cX ] [ cY ] == - 1 ? ""unmarked"" : ""marked"" )"	510:29:19940:20069	4904034	1	True				
ANR	4905453	CallExpression	"printf ( ""dot at %d, %d is %s\\n"" , cX , cY , ThresholdArray [ cX ] [ cY ] == - 1 ? ""unmarked"" : ""marked"" )"		4904034	0					
ANR	4905454	Callee	printf		4904034	0					
ANR	4905455	Identifier	printf		4904034	0					
ANR	4905456	ArgumentList	"""dot at %d, %d is %s\\n"""		4904034	1					
ANR	4905457	Argument	"""dot at %d, %d is %s\\n"""		4904034	0					
ANR	4905458	PrimaryExpression	"""dot at %d, %d is %s\\n"""		4904034	0					
ANR	4905459	Argument	cX		4904034	1					
ANR	4905460	Identifier	cX		4904034	0					
ANR	4905461	Argument	cY		4904034	2					
ANR	4905462	Identifier	cY		4904034	0					
ANR	4905463	Argument	"ThresholdArray [ cX ] [ cY ] == - 1 ? ""unmarked"" : ""marked"""		4904034	3					
ANR	4905464	ConditionalExpression	"ThresholdArray [ cX ] [ cY ] == - 1 ? ""unmarked"" : ""marked"""		4904034	0					
ANR	4905465	Condition	ThresholdArray [ cX ] [ cY ] == - 1		4904034	0					
ANR	4905466	EqualityExpression	ThresholdArray [ cX ] [ cY ] == - 1		4904034	0		==			
ANR	4905467	ArrayIndexing	ThresholdArray [ cX ] [ cY ]		4904034	0					
ANR	4905468	ArrayIndexing	ThresholdArray [ cX ]		4904034	0					
ANR	4905469	Identifier	ThresholdArray		4904034	0					
ANR	4905470	Identifier	cX		4904034	1					
ANR	4905471	Identifier	cY		4904034	1					
ANR	4905472	UnaryOperationExpression	- 1		4904034	1					
ANR	4905473	UnaryOperator	-		4904034	0					
ANR	4905474	PrimaryExpression	1		4904034	1					
ANR	4905475	PrimaryExpression	"""unmarked"""		4904034	1					
ANR	4905476	PrimaryExpression	"""marked"""		4904034	2					
ANR	4905477	IfStatement	if ( ThresholdArray [ cX ] [ cY ] == - 1 )		4904034	5					
ANR	4905478	Condition	ThresholdArray [ cX ] [ cY ] == - 1	512:28:20099:20126	4904034	0	True				
ANR	4905479	EqualityExpression	ThresholdArray [ cX ] [ cY ] == - 1		4904034	0		==			
ANR	4905480	ArrayIndexing	ThresholdArray [ cX ] [ cY ]		4904034	0					
ANR	4905481	ArrayIndexing	ThresholdArray [ cX ]		4904034	0					
ANR	4905482	Identifier	ThresholdArray		4904034	0					
ANR	4905483	Identifier	cX		4904034	1					
ANR	4905484	Identifier	cY		4904034	1					
ANR	4905485	UnaryOperationExpression	- 1		4904034	1					
ANR	4905486	UnaryOperator	-		4904034	0					
ANR	4905487	PrimaryExpression	1		4904034	1					
ANR	4905488	CompoundStatement		258:58:11542:11542	4904034	1					
ANR	4905489	ExpressionStatement	choice_X = cX	513:28:20159:20172	4904034	0	True				
ANR	4905490	AssignmentExpression	choice_X = cX		4904034	0		=			
ANR	4905491	Identifier	choice_X		4904034	0					
ANR	4905492	Identifier	cX		4904034	1					
ANR	4905493	ExpressionStatement	choice_Y = cY	514:28:20202:20215	4904034	1	True				
ANR	4905494	AssignmentExpression	choice_Y = cY		4904034	0		=			
ANR	4905495	Identifier	choice_Y		4904034	0					
ANR	4905496	Identifier	cY		4904034	1					
ANR	4905497	GotoStatement	goto do_dot ;	515:28:20245:20256	4904034	2	True				
ANR	4905498	Identifier	do_dot		4904034	0					
ANR	4905499	ExpressionStatement	"printf ( ""what now?\\n"" )"	520:12:20350:20371	4904034	12	True				
ANR	4905500	CallExpression	"printf ( ""what now?\\n"" )"		4904034	0					
ANR	4905501	Callee	printf		4904034	0					
ANR	4905502	Identifier	printf		4904034	0					
ANR	4905503	ArgumentList	"""what now?\\n"""		4904034	1					
ANR	4905504	Argument	"""what now?\\n"""		4904034	0					
ANR	4905505	PrimaryExpression	"""what now?\\n"""		4904034	0					
ANR	4905506	Label	do_dot :	522:0:20414:20420	4904034	15	True				
ANR	4905507	Identifier	do_dot		4904034	0					
ANR	4905508	IfStatement	if ( ! quiet )		4904034	16					
ANR	4905509	Condition	! quiet	523:12:20434:20439	4904034	0	True				
ANR	4905510	UnaryOperationExpression	! quiet		4904034	0					
ANR	4905511	UnaryOperator	!		4904034	0					
ANR	4905512	Identifier	quiet		4904034	1					
ANR	4905513	ExpressionStatement	"printf ( ""choice: %d, choice_range: %d, do_min_dot: %d\\n"" , choice , choice_range , do_min_dot )"	524:12:20454:20568	4904034	1	True				
ANR	4905514	CallExpression	"printf ( ""choice: %d, choice_range: %d, do_min_dot: %d\\n"" , choice , choice_range , do_min_dot )"		4904034	0					
ANR	4905515	Callee	printf		4904034	0					
ANR	4905516	Identifier	printf		4904034	0					
ANR	4905517	ArgumentList	"""choice: %d, choice_range: %d, do_min_dot: %d\\n"""		4904034	1					
ANR	4905518	Argument	"""choice: %d, choice_range: %d, do_min_dot: %d\\n"""		4904034	0					
ANR	4905519	PrimaryExpression	"""choice: %d, choice_range: %d, do_min_dot: %d\\n"""		4904034	0					
ANR	4905520	Argument	choice		4904034	1					
ANR	4905521	Identifier	choice		4904034	0					
ANR	4905522	Argument	choice_range		4904034	2					
ANR	4905523	Identifier	choice_range		4904034	0					
ANR	4905524	Argument	do_min_dot		4904034	3					
ANR	4905525	Identifier	do_min_dot		4904034	0					
ANR	4905526	IfStatement	if ( ! quiet )		4904034	17					
ANR	4905527	Condition	! quiet	527:12:20742:20747	4904034	0	True				
ANR	4905528	UnaryOperationExpression	! quiet		4904034	0					
ANR	4905529	UnaryOperator	!		4904034	0					
ANR	4905530	Identifier	quiet		4904034	1					
ANR	4905531	ExpressionStatement	"printf ( ""Threshold Level %4d is depth %d, val = %5.3f at (%4d, %4d)\\n"" , level , choice , Val [ ( choice_Y * array_width ) + choice_X ] , choice_X , choice_Y )"	528:12:20762:20935	4904034	1	True				
ANR	4905532	CallExpression	"printf ( ""Threshold Level %4d is depth %d, val = %5.3f at (%4d, %4d)\\n"" , level , choice , Val [ ( choice_Y * array_width ) + choice_X ] , choice_X , choice_Y )"		4904034	0					
ANR	4905533	Callee	printf		4904034	0					
ANR	4905534	Identifier	printf		4904034	0					
ANR	4905535	ArgumentList	"""Threshold Level %4d is depth %d, val = %5.3f at (%4d, %4d)\\n"""		4904034	1					
ANR	4905536	Argument	"""Threshold Level %4d is depth %d, val = %5.3f at (%4d, %4d)\\n"""		4904034	0					
ANR	4905537	PrimaryExpression	"""Threshold Level %4d is depth %d, val = %5.3f at (%4d, %4d)\\n"""		4904034	0					
ANR	4905538	Argument	level		4904034	1					
ANR	4905539	Identifier	level		4904034	0					
ANR	4905540	Argument	choice		4904034	2					
ANR	4905541	Identifier	choice		4904034	0					
ANR	4905542	Argument	Val [ ( choice_Y * array_width ) + choice_X ]		4904034	3					
ANR	4905543	ArrayIndexing	Val [ ( choice_Y * array_width ) + choice_X ]		4904034	0					
ANR	4905544	Identifier	Val		4904034	0					
ANR	4905545	AdditiveExpression	( choice_Y * array_width ) + choice_X		4904034	1		+			
ANR	4905546	MultiplicativeExpression	choice_Y * array_width		4904034	0		*			
ANR	4905547	Identifier	choice_Y		4904034	0					
ANR	4905548	Identifier	array_width		4904034	1					
ANR	4905549	Identifier	choice_X		4904034	1					
ANR	4905550	Argument	choice_X		4904034	4					
ANR	4905551	Identifier	choice_X		4904034	0					
ANR	4905552	Argument	choice_Y		4904034	5					
ANR	4905553	Identifier	choice_Y		4904034	0					
ANR	4905554	IfStatement	if ( do_min_dot != 0 )		4904034	18					
ANR	4905555	Condition	do_min_dot != 0	530:12:20949:20963	4904034	0	True				
ANR	4905556	EqualityExpression	do_min_dot != 0		4904034	0		!=			
ANR	4905557	Identifier	do_min_dot		4904034	0					
ANR	4905558	PrimaryExpression	0		4904034	1					
ANR	4905559	CompoundStatement		277:12:12393:12413	4904034	1					
ANR	4905560	IdentifierDeclStatement	"int row , dot , cX , cY ;"	531:12:20980:21000	4904034	0	True				
ANR	4905561	IdentifierDecl	row		4904034	0					
ANR	4905562	IdentifierDeclType	int		4904034	0					
ANR	4905563	Identifier	row		4904034	1					
ANR	4905564	IdentifierDecl	dot		4904034	1					
ANR	4905565	IdentifierDeclType	int		4904034	0					
ANR	4905566	Identifier	dot		4904034	1					
ANR	4905567	IdentifierDecl	cX		4904034	2					
ANR	4905568	IdentifierDeclType	int		4904034	0					
ANR	4905569	Identifier	cX		4904034	1					
ANR	4905570	IdentifierDecl	cY		4904034	3					
ANR	4905571	IdentifierDeclType	int		4904034	0					
ANR	4905572	Identifier	cY		4904034	1					
ANR	4905573	ForStatement	for ( row = 0 ; row < min_dot_edges [ min_dot_pattern ] . num_rows ; row ++ )		4904034	1					
ANR	4905574	ForInit	row = 0 ;	534:17:21117:21122	4904034	0	True				
ANR	4905575	AssignmentExpression	row = 0		4904034	0		=			
ANR	4905576	Identifier	row		4904034	0					
ANR	4905577	PrimaryExpression	0		4904034	1					
ANR	4905578	Condition	row < min_dot_edges [ min_dot_pattern ] . num_rows	534:24:21124:21168	4904034	1	True				
ANR	4905579	RelationalExpression	row < min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0		<			
ANR	4905580	Identifier	row		4904034	0					
ANR	4905581	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1					
ANR	4905582	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905583	Identifier	min_dot_edges		4904034	0					
ANR	4905584	Identifier	min_dot_pattern		4904034	1					
ANR	4905585	Identifier	num_rows		4904034	1					
ANR	4905586	PostIncDecOperationExpression	row ++	534:71:21171:21175	4904034	2	True				
ANR	4905587	Identifier	row		4904034	0					
ANR	4905588	IncDec	++		4904034	1					
ANR	4905589	CompoundStatement		280:78:12591:12591	4904034	3					
ANR	4905590	ExpressionStatement	cY = ( choice_Y + row ) % array_height	535:16:21196:21232	4904034	0	True				
ANR	4905591	AssignmentExpression	cY = ( choice_Y + row ) % array_height		4904034	0		=			
ANR	4905592	Identifier	cY		4904034	0					
ANR	4905593	MultiplicativeExpression	( choice_Y + row ) % array_height		4904034	1		%			
ANR	4905594	AdditiveExpression	choice_Y + row		4904034	0		+			
ANR	4905595	Identifier	choice_Y		4904034	0					
ANR	4905596	Identifier	row		4904034	1					
ANR	4905597	Identifier	array_height		4904034	1					
ANR	4905598	ForStatement	for ( dot = min_dot_edges [ min_dot_pattern ] . left [ row ] ; dot <= min_dot_edges [ min_dot_pattern ] . right [ row ] ; dot ++ )		4904034	1					
ANR	4905599	ForInit	dot = min_dot_edges [ min_dot_pattern ] . left [ row ] ;	536:21:21255:21299	4904034	0	True				
ANR	4905600	AssignmentExpression	dot = min_dot_edges [ min_dot_pattern ] . left [ row ]		4904034	0		=			
ANR	4905601	Identifier	dot		4904034	0					
ANR	4905602	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . left [ row ]		4904034	1					
ANR	4905603	MemberAccess	min_dot_edges [ min_dot_pattern ] . left		4904034	0					
ANR	4905604	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905605	Identifier	min_dot_edges		4904034	0					
ANR	4905606	Identifier	min_dot_pattern		4904034	1					
ANR	4905607	Identifier	left		4904034	1					
ANR	4905608	Identifier	row		4904034	1					
ANR	4905609	Condition	dot <= min_dot_edges [ min_dot_pattern ] . right [ row ]	537:24:21325:21372	4904034	1	True				
ANR	4905610	RelationalExpression	dot <= min_dot_edges [ min_dot_pattern ] . right [ row ]		4904034	0		<=			
ANR	4905611	Identifier	dot		4904034	0					
ANR	4905612	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . right [ row ]		4904034	1					
ANR	4905613	MemberAccess	min_dot_edges [ min_dot_pattern ] . right		4904034	0					
ANR	4905614	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905615	Identifier	min_dot_edges		4904034	0					
ANR	4905616	Identifier	min_dot_pattern		4904034	1					
ANR	4905617	Identifier	right		4904034	1					
ANR	4905618	Identifier	row		4904034	1					
ANR	4905619	PostIncDecOperationExpression	dot ++	537:74:21375:21379	4904034	2	True				
ANR	4905620	Identifier	dot		4904034	0					
ANR	4905621	IncDec	++		4904034	1					
ANR	4905622	CompoundStatement		283:81:12795:12795	4904034	3					
ANR	4905623	ExpressionStatement	cX = ( choice_X + dot ) % array_width	538:20:21404:21439	4904034	0	True				
ANR	4905624	AssignmentExpression	cX = ( choice_X + dot ) % array_width		4904034	0		=			
ANR	4905625	Identifier	cX		4904034	0					
ANR	4905626	MultiplicativeExpression	( choice_X + dot ) % array_width		4904034	1		%			
ANR	4905627	AdditiveExpression	choice_X + dot		4904034	0		+			
ANR	4905628	Identifier	choice_X		4904034	0					
ANR	4905629	Identifier	dot		4904034	1					
ANR	4905630	Identifier	array_width		4904034	1					
ANR	4905631	IfStatement	if ( ( row >= 0 ) || ( dot >= 0 ) )		4904034	1					
ANR	4905632	Condition	( row >= 0 ) || ( dot >= 0 )	539:24:21465:21488	4904034	0	True				
ANR	4905633	OrExpression	( row >= 0 ) || ( dot >= 0 )		4904034	0		||			
ANR	4905634	RelationalExpression	row >= 0		4904034	0		>=			
ANR	4905635	Identifier	row		4904034	0					
ANR	4905636	PrimaryExpression	0		4904034	1					
ANR	4905637	RelationalExpression	dot >= 0		4904034	1		>=			
ANR	4905638	Identifier	dot		4904034	0					
ANR	4905639	PrimaryExpression	0		4904034	1					
ANR	4905640	ExpressionStatement	ThresholdArray [ cX ] [ cY ] = level	540:24:21515:21545	4904034	1	True				
ANR	4905641	AssignmentExpression	ThresholdArray [ cX ] [ cY ] = level		4904034	0		=			
ANR	4905642	ArrayIndexing	ThresholdArray [ cX ] [ cY ]		4904034	0					
ANR	4905643	ArrayIndexing	ThresholdArray [ cX ]		4904034	0					
ANR	4905644	Identifier	ThresholdArray		4904034	0					
ANR	4905645	Identifier	cX		4904034	1					
ANR	4905646	Identifier	cY		4904034	1					
ANR	4905647	Identifier	level		4904034	1					
ANR	4905648	ForStatement	for ( row = 0 ; row < min_dot_edges [ min_dot_pattern ] . num_rows ; row ++ )		4904034	2					
ANR	4905649	ForInit	row = 0 ;	542:17:21595:21600	4904034	0	True				
ANR	4905650	AssignmentExpression	row = 0		4904034	0		=			
ANR	4905651	Identifier	row		4904034	0					
ANR	4905652	PrimaryExpression	0		4904034	1					
ANR	4905653	Condition	row < min_dot_edges [ min_dot_pattern ] . num_rows	542:24:21602:21646	4904034	1	True				
ANR	4905654	RelationalExpression	row < min_dot_edges [ min_dot_pattern ] . num_rows		4904034	0		<			
ANR	4905655	Identifier	row		4904034	0					
ANR	4905656	MemberAccess	min_dot_edges [ min_dot_pattern ] . num_rows		4904034	1					
ANR	4905657	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905658	Identifier	min_dot_edges		4904034	0					
ANR	4905659	Identifier	min_dot_pattern		4904034	1					
ANR	4905660	Identifier	num_rows		4904034	1					
ANR	4905661	PostIncDecOperationExpression	row ++	542:71:21649:21653	4904034	2	True				
ANR	4905662	Identifier	row		4904034	0					
ANR	4905663	IncDec	++		4904034	1					
ANR	4905664	CompoundStatement		288:78:13069:13069	4904034	3					
ANR	4905665	ExpressionStatement	cY = ( choice_Y + row ) % array_height	543:16:21674:21710	4904034	0	True				
ANR	4905666	AssignmentExpression	cY = ( choice_Y + row ) % array_height		4904034	0		=			
ANR	4905667	Identifier	cY		4904034	0					
ANR	4905668	MultiplicativeExpression	( choice_Y + row ) % array_height		4904034	1		%			
ANR	4905669	AdditiveExpression	choice_Y + row		4904034	0		+			
ANR	4905670	Identifier	choice_Y		4904034	0					
ANR	4905671	Identifier	row		4904034	1					
ANR	4905672	Identifier	array_height		4904034	1					
ANR	4905673	ForStatement	for ( dot = min_dot_edges [ min_dot_pattern ] . left [ row ] ; dot <= min_dot_edges [ min_dot_pattern ] . right [ row ] ; dot ++ )		4904034	1					
ANR	4905674	ForInit	dot = min_dot_edges [ min_dot_pattern ] . left [ row ] ;	544:21:21733:21777	4904034	0	True				
ANR	4905675	AssignmentExpression	dot = min_dot_edges [ min_dot_pattern ] . left [ row ]		4904034	0		=			
ANR	4905676	Identifier	dot		4904034	0					
ANR	4905677	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . left [ row ]		4904034	1					
ANR	4905678	MemberAccess	min_dot_edges [ min_dot_pattern ] . left		4904034	0					
ANR	4905679	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905680	Identifier	min_dot_edges		4904034	0					
ANR	4905681	Identifier	min_dot_pattern		4904034	1					
ANR	4905682	Identifier	left		4904034	1					
ANR	4905683	Identifier	row		4904034	1					
ANR	4905684	Condition	dot <= min_dot_edges [ min_dot_pattern ] . right [ row ]	545:24:21803:21850	4904034	1	True				
ANR	4905685	RelationalExpression	dot <= min_dot_edges [ min_dot_pattern ] . right [ row ]		4904034	0		<=			
ANR	4905686	Identifier	dot		4904034	0					
ANR	4905687	ArrayIndexing	min_dot_edges [ min_dot_pattern ] . right [ row ]		4904034	1					
ANR	4905688	MemberAccess	min_dot_edges [ min_dot_pattern ] . right		4904034	0					
ANR	4905689	ArrayIndexing	min_dot_edges [ min_dot_pattern ]		4904034	0					
ANR	4905690	Identifier	min_dot_edges		4904034	0					
ANR	4905691	Identifier	min_dot_pattern		4904034	1					
ANR	4905692	Identifier	right		4904034	1					
ANR	4905693	Identifier	row		4904034	1					
ANR	4905694	PostIncDecOperationExpression	dot ++	545:74:21853:21857	4904034	2	True				
ANR	4905695	Identifier	dot		4904034	0					
ANR	4905696	IncDec	++		4904034	1					
ANR	4905697	CompoundStatement		291:81:13273:13273	4904034	3					
ANR	4905698	ExpressionStatement	cX = ( choice_X + dot ) % array_width	546:20:21882:21917	4904034	0	True				
ANR	4905699	AssignmentExpression	cX = ( choice_X + dot ) % array_width		4904034	0		=			
ANR	4905700	Identifier	cX		4904034	0					
ANR	4905701	MultiplicativeExpression	( choice_X + dot ) % array_width		4904034	1		%			
ANR	4905702	AdditiveExpression	choice_X + dot		4904034	0		+			
ANR	4905703	Identifier	choice_X		4904034	0					
ANR	4905704	Identifier	dot		4904034	1					
ANR	4905705	Identifier	array_width		4904034	1					
ANR	4905706	IfStatement	if ( ( row > 0 ) || ( dot > 0 ) )		4904034	1					
ANR	4905707	Condition	( row > 0 ) || ( dot > 0 )	547:24:21943:21964	4904034	0	True				
ANR	4905708	OrExpression	( row > 0 ) || ( dot > 0 )		4904034	0		||			
ANR	4905709	RelationalExpression	row > 0		4904034	0		>			
ANR	4905710	Identifier	row		4904034	0					
ANR	4905711	PrimaryExpression	0		4904034	1					
ANR	4905712	RelationalExpression	dot > 0		4904034	1		>			
ANR	4905713	Identifier	dot		4904034	0					
ANR	4905714	PrimaryExpression	0		4904034	1					
ANR	4905715	CompoundStatement		293:48:13380:13380	4904034	1					
ANR	4905716	ExpressionStatement	"do_dot ( cX , cY , level , 0 )"	549:24:22086:22110	4904034	0	True				
ANR	4905717	CallExpression	"do_dot ( cX , cY , level , 0 )"		4904034	0					
ANR	4905718	Callee	do_dot		4904034	0					
ANR	4905719	Identifier	do_dot		4904034	0					
ANR	4905720	ArgumentList	cX		4904034	1					
ANR	4905721	Argument	cX		4904034	0					
ANR	4905722	Identifier	cX		4904034	0					
ANR	4905723	Argument	cY		4904034	1					
ANR	4905724	Identifier	cY		4904034	0					
ANR	4905725	Argument	level		4904034	2					
ANR	4905726	Identifier	level		4904034	0					
ANR	4905727	Argument	0		4904034	3					
ANR	4905728	PrimaryExpression	0		4904034	0					
ANR	4905729	ExpressionStatement	level_up ++	550:24:22136:22146	4904034	1	True				
ANR	4905730	PostIncDecOperationExpression	level_up ++		4904034	0					
ANR	4905731	Identifier	level_up		4904034	0					
ANR	4905732	IncDec	++		4904034	1					
ANR	4905733	ExpressionStatement	"do_dot ( choice_X , choice_Y , level , 1 )"	555:8:22220:22256	4904034	19	True				
ANR	4905734	CallExpression	"do_dot ( choice_X , choice_Y , level , 1 )"		4904034	0					
ANR	4905735	Callee	do_dot		4904034	0					
ANR	4905736	Identifier	do_dot		4904034	0					
ANR	4905737	ArgumentList	choice_X		4904034	1					
ANR	4905738	Argument	choice_X		4904034	0					
ANR	4905739	Identifier	choice_X		4904034	0					
ANR	4905740	Argument	choice_Y		4904034	1					
ANR	4905741	Identifier	choice_Y		4904034	0					
ANR	4905742	Argument	level		4904034	2					
ANR	4905743	Identifier	level		4904034	0					
ANR	4905744	Argument	1		4904034	3					
ANR	4905745	PrimaryExpression	1		4904034	0					
ANR	4905746	IfStatement	if ( ! quiet )		4904034	31					
ANR	4905747	Condition	! quiet	559:8:22365:22371	4904034	0	True				
ANR	4905748	UnaryOperationExpression	! quiet		4904034	0					
ANR	4905749	UnaryOperator	!		4904034	0					
ANR	4905750	Identifier	quiet		4904034	1					
ANR	4905751	CompoundStatement		305:17:13787:13787	4904034	1					
ANR	4905752	ForStatement	for ( Y = 0 ; Y < array_height ; Y ++ )		4904034	0					
ANR	4905753	ForInit	Y = 0 ;	560:13:22389:22392	4904034	0	True				
ANR	4905754	AssignmentExpression	Y = 0		4904034	0		=			
ANR	4905755	Identifier	Y		4904034	0					
ANR	4905756	PrimaryExpression	0		4904034	1					
ANR	4905757	Condition	Y < array_height	560:18:22394:22409	4904034	1	True				
ANR	4905758	RelationalExpression	Y < array_height		4904034	0		<			
ANR	4905759	Identifier	Y		4904034	0					
ANR	4905760	Identifier	array_height		4904034	1					
ANR	4905761	PostIncDecOperationExpression	Y ++	560:36:22412:22414	4904034	2	True				
ANR	4905762	Identifier	Y		4904034	0					
ANR	4905763	IncDec	++		4904034	1					
ANR	4905764	CompoundStatement		306:41:13830:13830	4904034	3					
ANR	4905765	ForStatement	for ( X = 0 ; X < array_width ; X ++ )		4904034	0					
ANR	4905766	ForInit	X = 0 ;	561:17:22436:22439	4904034	0	True				
ANR	4905767	AssignmentExpression	X = 0		4904034	0		=			
ANR	4905768	Identifier	X		4904034	0					
ANR	4905769	PrimaryExpression	0		4904034	1					
ANR	4905770	Condition	X < array_width	561:22:22441:22455	4904034	1	True				
ANR	4905771	RelationalExpression	X < array_width		4904034	0		<			
ANR	4905772	Identifier	X		4904034	0					
ANR	4905773	Identifier	array_width		4904034	1					
ANR	4905774	PostIncDecOperationExpression	X ++	561:39:22458:22460	4904034	2	True				
ANR	4905775	Identifier	X		4904034	0					
ANR	4905776	IncDec	++		4904034	1					
ANR	4905777	CompoundStatement		307:44:13876:13876	4904034	3					
ANR	4905778	ExpressionStatement	"printf ( "" %6d"" , ThresholdArray [ X ] [ Y ] )"	562:16:22481:22517	4904034	0	True				
ANR	4905779	CallExpression	"printf ( "" %6d"" , ThresholdArray [ X ] [ Y ] )"		4904034	0					
ANR	4905780	Callee	printf		4904034	0					
ANR	4905781	Identifier	printf		4904034	0					
ANR	4905782	ArgumentList	""" %6d"""		4904034	1					
ANR	4905783	Argument	""" %6d"""		4904034	0					
ANR	4905784	PrimaryExpression	""" %6d"""		4904034	0					
ANR	4905785	Argument	ThresholdArray [ X ] [ Y ]		4904034	1					
ANR	4905786	ArrayIndexing	ThresholdArray [ X ] [ Y ]		4904034	0					
ANR	4905787	ArrayIndexing	ThresholdArray [ X ]		4904034	0					
ANR	4905788	Identifier	ThresholdArray		4904034	0					
ANR	4905789	Identifier	X		4904034	1					
ANR	4905790	Identifier	Y		4904034	1					
ANR	4905791	IfStatement	if ( ( X & 15 ) == 15 )		4904034	1					
ANR	4905792	Condition	( X & 15 ) == 15	563:20:22539:22552	4904034	0	True				
ANR	4905793	EqualityExpression	( X & 15 ) == 15		4904034	0		==			
ANR	4905794	BitAndExpression	X & 15		4904034	0		&			
ANR	4905795	Identifier	X		4904034	0					
ANR	4905796	PrimaryExpression	15		4904034	1					
ANR	4905797	PrimaryExpression	15		4904034	1					
ANR	4905798	ExpressionStatement	"printf ( ""\\n"" )"	564:20:22575:22587	4904034	1	True				
ANR	4905799	CallExpression	"printf ( ""\\n"" )"		4904034	0					
ANR	4905800	Callee	printf		4904034	0					
ANR	4905801	Identifier	printf		4904034	0					
ANR	4905802	ArgumentList	"""\\n"""		4904034	1					
ANR	4905803	Argument	"""\\n"""		4904034	0					
ANR	4905804	PrimaryExpression	"""\\n"""		4904034	0					
ANR	4905805	IfStatement	if ( ( X & 15 ) != 0 )		4904034	1					
ANR	4905806	Condition	( X & 15 ) != 0	566:16:22643:22655	4904034	0	True				
ANR	4905807	EqualityExpression	( X & 15 ) != 0		4904034	0		!=			
ANR	4905808	BitAndExpression	X & 15		4904034	0		&			
ANR	4905809	Identifier	X		4904034	0					
ANR	4905810	PrimaryExpression	15		4904034	1					
ANR	4905811	PrimaryExpression	0		4904034	1					
ANR	4905812	ExpressionStatement	"printf ( ""\\n"" )"	567:20:22678:22690	4904034	1	True				
ANR	4905813	CallExpression	"printf ( ""\\n"" )"		4904034	0					
ANR	4905814	Callee	printf		4904034	0					
ANR	4905815	Identifier	printf		4904034	0					
ANR	4905816	ArgumentList	"""\\n"""		4904034	1					
ANR	4905817	Argument	"""\\n"""		4904034	0					
ANR	4905818	PrimaryExpression	"""\\n"""		4904034	0					
ANR	4905819	ExpressionStatement	code = 0	570:4:22741:22749	4904034	32	True				
ANR	4905820	AssignmentExpression	code = 0		4904034	0		=			
ANR	4905821	Identifier	code		4904034	0					
ANR	4905822	PrimaryExpression	0		4904034	1					
ANR	4905823	ExpressionStatement	fclose ( fp )	571:4:22778:22788	4904034	33	True				
ANR	4905824	CallExpression	fclose ( fp )		4904034	0					
ANR	4905825	Callee	fclose		4904034	0					
ANR	4905826	Identifier	fclose		4904034	0					
ANR	4905827	ArgumentList	fp		4904034	1					
ANR	4905828	Argument	fp		4904034	0					
ANR	4905829	Identifier	fp		4904034	0					
ANR	4905830	ExpressionStatement	close_gs_display ( )	573:4:22811:22829	4904034	34	True				
ANR	4905831	CallExpression	close_gs_display ( )		4904034	0					
ANR	4905832	Callee	close_gs_display		4904034	0					
ANR	4905833	Identifier	close_gs_display		4904034	0					
ANR	4905834	ArgumentList			4904034	1					
ANR	4905835	ReturnStatement	return code ;	576:4:22843:22854	4904034	35	True				
ANR	4905836	Identifier	code		4904034	0					
ANR	4905837	Label	usage_exit :	578:0:22887:22897	4904034	36	True				
ANR	4905838	Identifier	usage_exit		4904034	0					
ANR	4905839	ExpressionStatement	"printf ( ""\\nUsage:\\tgen_stochastic [-m#] [-p#.##] [-q] [-rWxH] [-s#] [-t#] SIZEWxSIZEH outfile [-g ghostscript_args ... ]\\n"" )"	579:4:22903:23026	4904034	37	True				
ANR	4905840	CallExpression	"printf ( ""\\nUsage:\\tgen_stochastic [-m#] [-p#.##] [-q] [-rWxH] [-s#] [-t#] SIZEWxSIZEH outfile [-g ghostscript_args ... ]\\n"" )"		4904034	0					
ANR	4905841	Callee	printf		4904034	0					
ANR	4905842	Identifier	printf		4904034	0					
ANR	4905843	ArgumentList	"""\\nUsage:\\tgen_stochastic [-m#] [-p#.##] [-q] [-rWxH] [-s#] [-t#] SIZEWxSIZEH outfile [-g ghostscript_args ... ]\\n"""		4904034	1					
ANR	4905844	Argument	"""\\nUsage:\\tgen_stochastic [-m#] [-p#.##] [-q] [-rWxH] [-s#] [-t#] SIZEWxSIZEH outfile [-g ghostscript_args ... ]\\n"""		4904034	0					
ANR	4905845	PrimaryExpression	"""\\nUsage:\\tgen_stochastic [-m#] [-p#.##] [-q] [-rWxH] [-s#] [-t#] SIZEWxSIZEH outfile [-g ghostscript_args ... ]\\n"""		4904034	0					
ANR	4905846	ExpressionStatement	"printf ( ""\\n\\t-m#\\tset the minimum dot size/shape pattern. This is an index to a specific \\n"" )"	580:4:23032:23124	4904034	38	True				
ANR	4905847	CallExpression	"printf ( ""\\n\\t-m#\\tset the minimum dot size/shape pattern. This is an index to a specific \\n"" )"		4904034	0					
ANR	4905848	Callee	printf		4904034	0					
ANR	4905849	Identifier	printf		4904034	0					
ANR	4905850	ArgumentList	"""\\n\\t-m#\\tset the minimum dot size/shape pattern. This is an index to a specific \\n"""		4904034	1					
ANR	4905851	Argument	"""\\n\\t-m#\\tset the minimum dot size/shape pattern. This is an index to a specific \\n"""		4904034	0					
ANR	4905852	PrimaryExpression	"""\\n\\t-m#\\tset the minimum dot size/shape pattern. This is an index to a specific \\n"""		4904034	0					
ANR	4905853	ExpressionStatement	"printf ( ""\\t\\tsize/shape table as follows (default 0):\\n"" )"	581:4:23130:23186	4904034	39	True				
ANR	4905854	CallExpression	"printf ( ""\\t\\tsize/shape table as follows (default 0):\\n"" )"		4904034	0					
ANR	4905855	Callee	printf		4904034	0					
ANR	4905856	Identifier	printf		4904034	0					
ANR	4905857	ArgumentList	"""\\t\\tsize/shape table as follows (default 0):\\n"""		4904034	1					
ANR	4905858	Argument	"""\\t\\tsize/shape table as follows (default 0):\\n"""		4904034	0					
ANR	4905859	PrimaryExpression	"""\\t\\tsize/shape table as follows (default 0):\\n"""		4904034	0					
ANR	4905860	ExpressionStatement	"printf ( ""\\n"" )"	582:4:23192:23204	4904034	40	True				
ANR	4905861	CallExpression	"printf ( ""\\n"" )"		4904034	0					
ANR	4905862	Callee	printf		4904034	0					
ANR	4905863	Identifier	printf		4904034	0					
ANR	4905864	ArgumentList	"""\\n"""		4904034	1					
ANR	4905865	Argument	"""\\n"""		4904034	0					
ANR	4905866	PrimaryExpression	"""\\n"""		4904034	0					
ANR	4905867	ExpressionStatement	"printf ( ""\\t\\t\\t0:\\t1:\\t2:\\t3:\\t4:\\t5:\\n"" )"	583:4:23210:23250	4904034	41	True				
ANR	4905868	CallExpression	"printf ( ""\\t\\t\\t0:\\t1:\\t2:\\t3:\\t4:\\t5:\\n"" )"		4904034	0					
ANR	4905869	Callee	printf		4904034	0					
ANR	4905870	Identifier	printf		4904034	0					
ANR	4905871	ArgumentList	"""\\t\\t\\t0:\\t1:\\t2:\\t3:\\t4:\\t5:\\n"""		4904034	1					
ANR	4905872	Argument	"""\\t\\t\\t0:\\t1:\\t2:\\t3:\\t4:\\t5:\\n"""		4904034	0					
ANR	4905873	PrimaryExpression	"""\\t\\t\\t0:\\t1:\\t2:\\t3:\\t4:\\t5:\\n"""		4904034	0					
ANR	4905874	ExpressionStatement	"printf ( ""\\t\\t\\tx\\txx\\tx\\txx\\tx\\txx\\n"" )"	584:4:23256:23293	4904034	42	True				
ANR	4905875	CallExpression	"printf ( ""\\t\\t\\tx\\txx\\tx\\txx\\tx\\txx\\n"" )"		4904034	0					
ANR	4905876	Callee	printf		4904034	0					
ANR	4905877	Identifier	printf		4904034	0					
ANR	4905878	ArgumentList	"""\\t\\t\\tx\\txx\\tx\\txx\\tx\\txx\\n"""		4904034	1					
ANR	4905879	Argument	"""\\t\\t\\tx\\txx\\tx\\txx\\tx\\txx\\n"""		4904034	0					
ANR	4905880	PrimaryExpression	"""\\t\\t\\tx\\txx\\tx\\txx\\tx\\txx\\n"""		4904034	0					
ANR	4905881	ExpressionStatement	"printf ( ""\\t\\t\\t\\t\\tx\\tx\\t x\\txx\\n"" )"	585:4:23299:23333	4904034	43	True				
ANR	4905882	CallExpression	"printf ( ""\\t\\t\\t\\t\\tx\\tx\\t x\\txx\\n"" )"		4904034	0					
ANR	4905883	Callee	printf		4904034	0					
ANR	4905884	Identifier	printf		4904034	0					
ANR	4905885	ArgumentList	"""\\t\\t\\t\\t\\tx\\tx\\t x\\txx\\n"""		4904034	1					
ANR	4905886	Argument	"""\\t\\t\\t\\t\\tx\\tx\\t x\\txx\\n"""		4904034	0					
ANR	4905887	PrimaryExpression	"""\\t\\t\\t\\t\\tx\\tx\\t x\\txx\\n"""		4904034	0					
ANR	4905888	ExpressionStatement	"printf ( ""\\n"" )"	586:4:23339:23351	4904034	44	True				
ANR	4905889	CallExpression	"printf ( ""\\n"" )"		4904034	0					
ANR	4905890	Callee	printf		4904034	0					
ANR	4905891	Identifier	printf		4904034	0					
ANR	4905892	ArgumentList	"""\\n"""		4904034	1					
ANR	4905893	Argument	"""\\n"""		4904034	0					
ANR	4905894	PrimaryExpression	"""\\n"""		4904034	0					
ANR	4905895	ExpressionStatement	"printf ( ""\\t\\t\\t6:\\t7:\\t8:\\t9:\\t10:\\t11:\\t12:\\t13:\\n"" )"	587:4:23357:23409	4904034	45	True				
ANR	4905896	CallExpression	"printf ( ""\\t\\t\\t6:\\t7:\\t8:\\t9:\\t10:\\t11:\\t12:\\t13:\\n"" )"		4904034	0					
ANR	4905897	Callee	printf		4904034	0					
ANR	4905898	Identifier	printf		4904034	0					
ANR	4905899	ArgumentList	"""\\t\\t\\t6:\\t7:\\t8:\\t9:\\t10:\\t11:\\t12:\\t13:\\n"""		4904034	1					
ANR	4905900	Argument	"""\\t\\t\\t6:\\t7:\\t8:\\t9:\\t10:\\t11:\\t12:\\t13:\\n"""		4904034	0					
ANR	4905901	PrimaryExpression	"""\\t\\t\\t6:\\t7:\\t8:\\t9:\\t10:\\t11:\\t12:\\t13:\\n"""		4904034	0					
ANR	4905902	ExpressionStatement	"printf ( ""\\t\\t\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\n"" )"	588:4:23415:23471	4904034	46	True				
ANR	4905903	CallExpression	"printf ( ""\\t\\t\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\n"" )"		4904034	0					
ANR	4905904	Callee	printf		4904034	0					
ANR	4905905	Identifier	printf		4904034	0					
ANR	4905906	ArgumentList	"""\\t\\t\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\n"""		4904034	1					
ANR	4905907	Argument	"""\\t\\t\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\n"""		4904034	0					
ANR	4905908	PrimaryExpression	"""\\t\\t\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\txxx\\n"""		4904034	0					
ANR	4905909	ExpressionStatement	"printf ( ""\\t\\t\\t   \\tx  \\txx \\txxx\\tx  \\txx \\txxx\\txxx\\n"" )"	589:4:23477:23533	4904034	47	True				
ANR	4905910	CallExpression	"printf ( ""\\t\\t\\t   \\tx  \\txx \\txxx\\tx  \\txx \\txxx\\txxx\\n"" )"		4904034	0					
ANR	4905911	Callee	printf		4904034	0					
ANR	4905912	Identifier	printf		4904034	0					
ANR	4905913	ArgumentList	"""\\t\\t\\t   \\tx  \\txx \\txxx\\tx  \\txx \\txxx\\txxx\\n"""		4904034	1					
ANR	4905914	Argument	"""\\t\\t\\t   \\tx  \\txx \\txxx\\tx  \\txx \\txxx\\txxx\\n"""		4904034	0					
ANR	4905915	PrimaryExpression	"""\\t\\t\\t   \\tx  \\txx \\txxx\\tx  \\txx \\txxx\\txxx\\n"""		4904034	0					
ANR	4905916	ExpressionStatement	"printf ( ""\\t\\t   \\t   \\t   \\t   \\tx  \\tx \\tx \\txx\\n"" )"	590:4:23539:23590	4904034	48	True				
ANR	4905917	CallExpression	"printf ( ""\\t\\t   \\t   \\t   \\t   \\tx  \\tx \\tx \\txx\\n"" )"		4904034	0					
ANR	4905918	Callee	printf		4904034	0					
ANR	4905919	Identifier	printf		4904034	0					
ANR	4905920	ArgumentList	"""\\t\\t   \\t   \\t   \\t   \\tx  \\tx \\tx \\txx\\n"""		4904034	1					
ANR	4905921	Argument	"""\\t\\t   \\t   \\t   \\t   \\tx  \\tx \\tx \\txx\\n"""		4904034	0					
ANR	4905922	PrimaryExpression	"""\\t\\t   \\t   \\t   \\t   \\tx  \\tx \\tx \\txx\\n"""		4904034	0					
ANR	4905923	ExpressionStatement	"printf ( ""\\n"" )"	591:4:23596:23608	4904034	49	True				
ANR	4905924	CallExpression	"printf ( ""\\n"" )"		4904034	0					
ANR	4905925	Callee	printf		4904034	0					
ANR	4905926	Identifier	printf		4904034	0					
ANR	4905927	ArgumentList	"""\\n"""		4904034	1					
ANR	4905928	Argument	"""\\n"""		4904034	0					
ANR	4905929	PrimaryExpression	"""\\n"""		4904034	0					
ANR	4905930	ExpressionStatement	"printf ( ""\\t\\t\\t14:\\t15:\\t16:\\t17:\\t18:\\t19:\\n"" )"	592:4:23614:23660	4904034	50	True				
ANR	4905931	CallExpression	"printf ( ""\\t\\t\\t14:\\t15:\\t16:\\t17:\\t18:\\t19:\\n"" )"		4904034	0					
ANR	4905932	Callee	printf		4904034	0					
ANR	4905933	Identifier	printf		4904034	0					
ANR	4905934	ArgumentList	"""\\t\\t\\t14:\\t15:\\t16:\\t17:\\t18:\\t19:\\n"""		4904034	1					
ANR	4905935	Argument	"""\\t\\t\\t14:\\t15:\\t16:\\t17:\\t18:\\t19:\\n"""		4904034	0					
ANR	4905936	PrimaryExpression	"""\\t\\t\\t14:\\t15:\\t16:\\t17:\\t18:\\t19:\\n"""		4904034	0					
ANR	4905937	ExpressionStatement	"printf ( ""\\t\\t\\tx  \\txx \\txx \\txx \\txxx\\txxx\\n"" )"	593:4:23666:23712	4904034	51	True				
ANR	4905938	CallExpression	"printf ( ""\\t\\t\\tx  \\txx \\txx \\txx \\txxx\\txxx\\n"" )"		4904034	0					
ANR	4905939	Callee	printf		4904034	0					
ANR	4905940	Identifier	printf		4904034	0					
ANR	4905941	ArgumentList	"""\\t\\t\\tx  \\txx \\txx \\txx \\txxx\\txxx\\n"""		4904034	1					
ANR	4905942	Argument	"""\\t\\t\\tx  \\txx \\txx \\txx \\txxx\\txxx\\n"""		4904034	0					
ANR	4905943	PrimaryExpression	"""\\t\\t\\tx  \\txx \\txx \\txx \\txxx\\txxx\\n"""		4904034	0					
ANR	4905944	ExpressionStatement	"printf ( ""\\t\\t\\tx   \\tx  \\txx \\txx \\txx \\txxx\\n"" )"	594:4:23718:23765	4904034	52	True				
ANR	4905945	CallExpression	"printf ( ""\\t\\t\\tx   \\tx  \\txx \\txx \\txx \\txxx\\n"" )"		4904034	0					
ANR	4905946	Callee	printf		4904034	0					
ANR	4905947	Identifier	printf		4904034	0					
ANR	4905948	ArgumentList	"""\\t\\t\\tx   \\tx  \\txx \\txx \\txx \\txxx\\n"""		4904034	1					
ANR	4905949	Argument	"""\\t\\t\\tx   \\tx  \\txx \\txx \\txx \\txxx\\n"""		4904034	0					
ANR	4905950	PrimaryExpression	"""\\t\\t\\tx   \\tx  \\txx \\txx \\txx \\txxx\\n"""		4904034	0					
ANR	4905951	ExpressionStatement	"printf ( ""\\t\\t\\tx   \\tx   \\tx   \\txx  \\txx\\txxx\\n"" )"	595:4:23771:23820	4904034	53	True				
ANR	4905952	CallExpression	"printf ( ""\\t\\t\\tx   \\tx   \\tx   \\txx  \\txx\\txxx\\n"" )"		4904034	0					
ANR	4905953	Callee	printf		4904034	0					
ANR	4905954	Identifier	printf		4904034	0					
ANR	4905955	ArgumentList	"""\\t\\t\\tx   \\tx   \\tx   \\txx  \\txx\\txxx\\n"""		4904034	1					
ANR	4905956	Argument	"""\\t\\t\\tx   \\tx   \\tx   \\txx  \\txx\\txxx\\n"""		4904034	0					
ANR	4905957	PrimaryExpression	"""\\t\\t\\tx   \\tx   \\tx   \\txx  \\txx\\txxx\\n"""		4904034	0					
ANR	4905958	ExpressionStatement	"printf ( ""\\n\\t-p#.##\\texponenttial bias of random choice -- higher values are less random.\\n"" )"	596:4:23826:23918	4904034	54	True				
ANR	4905959	CallExpression	"printf ( ""\\n\\t-p#.##\\texponenttial bias of random choice -- higher values are less random.\\n"" )"		4904034	0					
ANR	4905960	Callee	printf		4904034	0					
ANR	4905961	Identifier	printf		4904034	0					
ANR	4905962	ArgumentList	"""\\n\\t-p#.##\\texponenttial bias of random choice -- higher values are less random.\\n"""		4904034	1					
ANR	4905963	Argument	"""\\n\\t-p#.##\\texponenttial bias of random choice -- higher values are less random.\\n"""		4904034	0					
ANR	4905964	PrimaryExpression	"""\\n\\t-p#.##\\texponenttial bias of random choice -- higher values are less random.\\n"""		4904034	0					
ANR	4905965	ExpressionStatement	"printf ( ""\\n\\t-q\\tquiet mode -- only error messages.\\n"" )"	597:4:23924:23978	4904034	55	True				
ANR	4905966	CallExpression	"printf ( ""\\n\\t-q\\tquiet mode -- only error messages.\\n"" )"		4904034	0					
ANR	4905967	Callee	printf		4904034	0					
ANR	4905968	Identifier	printf		4904034	0					
ANR	4905969	ArgumentList	"""\\n\\t-q\\tquiet mode -- only error messages.\\n"""		4904034	1					
ANR	4905970	Argument	"""\\n\\t-q\\tquiet mode -- only error messages.\\n"""		4904034	0					
ANR	4905971	PrimaryExpression	"""\\n\\t-q\\tquiet mode -- only error messages.\\n"""		4904034	0					
ANR	4905972	ExpressionStatement	"printf ( ""\\n\\t-rWxH\\tallows for horizontal / vertical resolution, e.g. -r2x1\\n"" )"	598:4:23984:24062	4904034	56	True				
ANR	4905973	CallExpression	"printf ( ""\\n\\t-rWxH\\tallows for horizontal / vertical resolution, e.g. -r2x1\\n"" )"		4904034	0					
ANR	4905974	Callee	printf		4904034	0					
ANR	4905975	Identifier	printf		4904034	0					
ANR	4905976	ArgumentList	"""\\n\\t-rWxH\\tallows for horizontal / vertical resolution, e.g. -r2x1\\n"""		4904034	1					
ANR	4905977	Argument	"""\\n\\t-rWxH\\tallows for horizontal / vertical resolution, e.g. -r2x1\\n"""		4904034	0					
ANR	4905978	PrimaryExpression	"""\\n\\t-rWxH\\tallows for horizontal / vertical resolution, e.g. -r2x1\\n"""		4904034	0					
ANR	4905979	ExpressionStatement	"printf ( ""\\t\\tvalues are used for aspect ratio -- actual values arbitrary\\n"" )"	599:4:24068:24143	4904034	57	True				
ANR	4905980	CallExpression	"printf ( ""\\t\\tvalues are used for aspect ratio -- actual values arbitrary\\n"" )"		4904034	0					
ANR	4905981	Callee	printf		4904034	0					
ANR	4905982	Identifier	printf		4904034	0					
ANR	4905983	ArgumentList	"""\\t\\tvalues are used for aspect ratio -- actual values arbitrary\\n"""		4904034	1					
ANR	4905984	Argument	"""\\t\\tvalues are used for aspect ratio -- actual values arbitrary\\n"""		4904034	0					
ANR	4905985	PrimaryExpression	"""\\t\\tvalues are used for aspect ratio -- actual values arbitrary\\n"""		4904034	0					
ANR	4905986	ExpressionStatement	"printf ( ""\\n\\t-s#\\tInitial seed for random number generation. Useful to generate"" )"	600:4:24149:24229	4904034	58	True				
ANR	4905987	CallExpression	"printf ( ""\\n\\t-s#\\tInitial seed for random number generation. Useful to generate"" )"		4904034	0					
ANR	4905988	Callee	printf		4904034	0					
ANR	4905989	Identifier	printf		4904034	0					
ANR	4905990	ArgumentList	"""\\n\\t-s#\\tInitial seed for random number generation. Useful to generate"""		4904034	1					
ANR	4905991	Argument	"""\\n\\t-s#\\tInitial seed for random number generation. Useful to generate"""		4904034	0					
ANR	4905992	PrimaryExpression	"""\\n\\t-s#\\tInitial seed for random number generation. Useful to generate"""		4904034	0					
ANR	4905993	ExpressionStatement	"printf ( ""\\n\\t\\tdecorrelated threshold arrays to be used with different colors."" )"	601:4:24235:24314	4904034	59	True				
ANR	4905994	CallExpression	"printf ( ""\\n\\t\\tdecorrelated threshold arrays to be used with different colors."" )"		4904034	0					
ANR	4905995	Callee	printf		4904034	0					
ANR	4905996	Identifier	printf		4904034	0					
ANR	4905997	ArgumentList	"""\\n\\t\\tdecorrelated threshold arrays to be used with different colors."""		4904034	1					
ANR	4905998	Argument	"""\\n\\t\\tdecorrelated threshold arrays to be used with different colors."""		4904034	0					
ANR	4905999	PrimaryExpression	"""\\n\\t\\tdecorrelated threshold arrays to be used with different colors."""		4904034	0					
ANR	4906000	ExpressionStatement	"printf ( ""\\n\\t-t#\\tsets the choice value threshold in 0.1%% units (default 10 = 1%%)\\n"" )"	602:4:24320:24406	4904034	60	True				
ANR	4906001	CallExpression	"printf ( ""\\n\\t-t#\\tsets the choice value threshold in 0.1%% units (default 10 = 1%%)\\n"" )"		4904034	0					
ANR	4906002	Callee	printf		4904034	0					
ANR	4906003	Identifier	printf		4904034	0					
ANR	4906004	ArgumentList	"""\\n\\t-t#\\tsets the choice value threshold in 0.1%% units (default 10 = 1%%)\\n"""		4904034	1					
ANR	4906005	Argument	"""\\n\\t-t#\\tsets the choice value threshold in 0.1%% units (default 10 = 1%%)\\n"""		4904034	0					
ANR	4906006	PrimaryExpression	"""\\n\\t-t#\\tsets the choice value threshold in 0.1%% units (default 10 = 1%%)\\n"""		4904034	0					
ANR	4906007	ExpressionStatement	"printf ( ""\\n\\t-g\\t(must be last) Following arguments are passed to Ghostscript if \\n"" )"	603:4:24412:24496	4904034	61	True				
ANR	4906008	CallExpression	"printf ( ""\\n\\t-g\\t(must be last) Following arguments are passed to Ghostscript if \\n"" )"		4904034	0					
ANR	4906009	Callee	printf		4904034	0					
ANR	4906010	Identifier	printf		4904034	0					
ANR	4906011	ArgumentList	"""\\n\\t-g\\t(must be last) Following arguments are passed to Ghostscript if \\n"""		4904034	1					
ANR	4906012	Argument	"""\\n\\t-g\\t(must be last) Following arguments are passed to Ghostscript if \\n"""		4904034	0					
ANR	4906013	PrimaryExpression	"""\\n\\t-g\\t(must be last) Following arguments are passed to Ghostscript if \\n"""		4904034	0					
ANR	4906014	ExpressionStatement	"printf ( ""\\t\\tcompiled wuth USE_GS_DISPLAY=1.\\n"" )"	604:4:24502:24549	4904034	62	True				
ANR	4906015	CallExpression	"printf ( ""\\t\\tcompiled wuth USE_GS_DISPLAY=1.\\n"" )"		4904034	0					
ANR	4906016	Callee	printf		4904034	0					
ANR	4906017	Identifier	printf		4904034	0					
ANR	4906018	ArgumentList	"""\\t\\tcompiled wuth USE_GS_DISPLAY=1.\\n"""		4904034	1					
ANR	4906019	Argument	"""\\t\\tcompiled wuth USE_GS_DISPLAY=1.\\n"""		4904034	0					
ANR	4906020	PrimaryExpression	"""\\t\\tcompiled wuth USE_GS_DISPLAY=1.\\n"""		4904034	0					
ANR	4906021	ExpressionStatement	"printf ( ""\\n"" )"	605:4:24555:24567	4904034	63	True				
ANR	4906022	CallExpression	"printf ( ""\\n"" )"		4904034	0					
ANR	4906023	Callee	printf		4904034	0					
ANR	4906024	Identifier	printf		4904034	0					
ANR	4906025	ArgumentList	"""\\n"""		4904034	1					
ANR	4906026	Argument	"""\\n"""		4904034	0					
ANR	4906027	PrimaryExpression	"""\\n"""		4904034	0					
ANR	4906028	ReturnStatement	return 1 ;	606:4:24573:24581	4904034	64	True				
ANR	4906029	PrimaryExpression	1		4904034	0					
ANR	4906030	ReturnType	int		4904034	1					
ANR	4906031	Identifier	main		4904034	2					
ANR	4906032	ParameterList	"int argc , char * argv [ ]"		4904034	3					
ANR	4906033	Parameter	int argc	254:5:8562:8569	4904034	0	True				
ANR	4906034	ParameterType	int		4904034	0					
ANR	4906035	Identifier	argc		4904034	1					
ANR	4906036	Parameter	char * argv [ ]	254:15:8572:8583	4904034	1	True				
ANR	4906037	ParameterType	char * [ ]		4904034	0					
ANR	4906038	Identifier	argv		4904034	1					
ANR	4906039	CFGEntryNode	ENTRY		4904034		True				
ANR	4906040	CFGExitNode	EXIT		4904034		True				
ANR	4906041	Symbol	Val		4904034						
ANR	4906042	Symbol	val_thresh		4904034						
ANR	4906043	Symbol	resolution		4904034						
ANR	4906044	Symbol	* min_dot_edges [ min_dot_pattern ] . right		4904034						
ANR	4906045	Symbol	rand		4904034						
ANR	4906046	Symbol	min_dot_edges [ min_dot_pattern ] . left		4904034						
ANR	4906047	Symbol	CompareOrder		4904034						
ANR	4906048	Symbol	update_gs_image		4904034						
ANR	4906049	Symbol	min_dot_pattern		4904034						
ANR	4906050	Symbol	* cX		4904034						
ANR	4906051	Symbol	min_dot_edges [ min_dot_pattern ] . num_rows		4904034						
ANR	4906052	Symbol	init_gs_display		4904034						
ANR	4906053	Symbol	* cY		4904034						
ANR	4906054	Symbol	min_dot_edges [ min_dot_pattern ] . right		4904034						
ANR	4906055	Symbol	ry_sq		4904034						
ANR	4906056	Symbol	* ThresholdArray		4904034						
ANR	4906057	Symbol	array_height		4904034						
ANR	4906058	Symbol	MAX_ARRAY_HEIGHT		4904034						
ANR	4906059	Symbol	sscanf		4904034						
ANR	4906060	Symbol	* resolution		4904034						
ANR	4906061	Symbol	* * min_dot_pattern		4904034						
ANR	4906062	Symbol	dot		4904034						
ANR	4906063	Symbol	* userow		4904034						
ANR	4906064	Symbol	Order [ 0 ] . Y		4904034						
ANR	4906065	Symbol	Order [ 0 ] . X		4904034						
ANR	4906066	Symbol	* * min_dot_edges		4904034						
ANR	4906067	Symbol	* Val		4904034						
ANR	4906068	Symbol	cX		4904034						
ANR	4906069	Symbol	cY		4904034						
ANR	4906070	Symbol	* Order		4904034						
ANR	4906071	Symbol	X		4904034						
ANR	4906072	Symbol	Y		4904034						
ANR	4906073	Symbol	pow		4904034						
ANR	4906074	Symbol	quiet		4904034						
ANR	4906075	Symbol	* * at_arg		4904034						
ANR	4906076	Symbol	at_arg		4904034						
ANR	4906077	Symbol	fopen		4904034						
ANR	4906078	Symbol	ValRange		4904034						
ANR	4906079	Symbol	* * ThresholdArray		4904034						
ANR	4906080	Symbol	* min_dot_pattern		4904034						
ANR	4906081	Symbol	i		4904034						
ANR	4906082	Symbol	j		4904034						
ANR	4906083	Symbol	k		4904034						
ANR	4906084	Symbol	m		4904034						
ANR	4906085	Symbol	* Order [ i ] . X		4904034						
ANR	4906086	Symbol	do_min_dot		4904034						
ANR	4906087	Symbol	x		4904034						
ANR	4906088	Symbol	choice		4904034						
ANR	4906089	Symbol	Order [ i ] . X		4904034						
ANR	4906090	Symbol	Order [ i ] . Y		4904034						
ANR	4906091	Symbol	min_dot_edges		4904034						
ANR	4906092	Symbol	* row		4904034						
ANR	4906093	Symbol	* min_dot_edges [ min_dot_pattern ] . left		4904034						
ANR	4906094	Symbol	rx_sq		4904034						
ANR	4906095	Symbol	* argv		4904034						
ANR	4906096	Symbol	* * Order		4904034						
ANR	4906097	Symbol	* Order [ i ] . Y		4904034						
ANR	4906098	Symbol	bias_power		4904034						
ANR	4906099	Symbol	* * argv		4904034						
ANR	4906100	Symbol	Order [ choice ] . X		4904034						
ANR	4906101	Symbol	ThresholdArray		4904034						
ANR	4906102	Symbol	Order [ choice ] . Y		4904034						
ANR	4906103	Symbol	Order		4904034						
ANR	4906104	Symbol	* * i		4904034						
ANR	4906105	Symbol	NULL		4904034						
ANR	4906106	Symbol	level		4904034						
ANR	4906107	Symbol	MAX_ARRAY_WIDTH		4904034						
ANR	4906108	Symbol	RAND_MAX		4904034						
ANR	4906109	Symbol	gsarg_start		4904034						
ANR	4906110	Symbol	* * X		4904034						
ANR	4906111	Symbol	array_width		4904034						
ANR	4906112	Symbol	dot_direction		4904034						
ANR	4906113	Symbol	* choice		4904034						
ANR	4906114	Symbol	code		4904034						
ANR	4906115	Symbol	* * cX		4904034						
ANR	4906116	Symbol	choice_X		4904034						
ANR	4906117	Symbol	level_up		4904034						
ANR	4906118	Symbol	choice_Y		4904034						
ANR	4906119	Symbol	fp		4904034						
ANR	4906120	Symbol	argv		4904034						
ANR	4906121	Symbol	* min_dot_edges		4904034						
ANR	4906122	Symbol	* at_arg		4904034						
ANR	4906123	Symbol	MaxVal		4904034						
ANR	4906124	Symbol	row_direction		4904034						
ANR	4906125	Symbol	userow		4904034						
ANR	4906126	Symbol	row		4904034						
ANR	4906127	Symbol	value		4904034						
ANR	4906128	Symbol	argc		4904034						
ANR	4906129	Symbol	choice_range		4904034						
ANR	4906130	Symbol	rand_scaled		4904034						
ANR	4906131	Symbol	* X		4904034						
ANR	4906132	Symbol	SortRange		4904034						
ANR	4906133	Symbol	* Y		4904034						
ANR	4906134	Symbol	* choice_X		4904034						
ANR	4906135	Symbol	* choice_Y		4904034						
ANR	4906136	Symbol	* array_width		4904034						
ANR	4906137	Symbol	MinVal		4904034						
ANR	4906138	Symbol	& k		4904034						
ANR	4906139	Symbol	& m		4904034						
ANR	4906140	Symbol	* i		4904034						
ANR	4906141	Symbol	Order [ Y * array_width + X ] . X		4904034						
ANR	4906142	Symbol	Order [ Y * array_width + X ] . Y		4904034						
ANR	4906143	Symbol	& x		4904034						
ANR	4906144	Function	ValFunction	609:0:24603:25260							
ANR	4906145	FunctionDef	"ValFunction (int thisX , int thisY , int refX , int refY , double rx_sq , double ry_sq)"		4906144	0					
ANR	4906146	CompoundStatement		611:0:24692:25260	4906144	0					
ANR	4906147	IdentifierDeclStatement	"int dx , dy ;"	612:4:24698:24708	4906144	0	True				
ANR	4906148	IdentifierDecl	dx		4906144	0					
ANR	4906149	IdentifierDeclType	int		4906144	0					
ANR	4906150	Identifier	dx		4906144	1					
ANR	4906151	IdentifierDecl	dy		4906144	1					
ANR	4906152	IdentifierDeclType	int		4906144	0					
ANR	4906153	Identifier	dy		4906144	1					
ANR	4906154	IdentifierDeclStatement	double distance ;	613:4:24714:24729	4906144	1	True				
ANR	4906155	IdentifierDecl	distance		4906144	0					
ANR	4906156	IdentifierDeclType	double		4906144	0					
ANR	4906157	Identifier	distance		4906144	1					
ANR	4906158	ExpressionStatement	dx = abs ( refX - thisX )	615:4:24736:24758	4906144	2	True				
ANR	4906159	AssignmentExpression	dx = abs ( refX - thisX )		4906144	0		=			
ANR	4906160	Identifier	dx		4906144	0					
ANR	4906161	CallExpression	abs ( refX - thisX )		4906144	1					
ANR	4906162	Callee	abs		4906144	0					
ANR	4906163	Identifier	abs		4906144	0					
ANR	4906164	ArgumentList	refX - thisX		4906144	1					
ANR	4906165	Argument	refX - thisX		4906144	0					
ANR	4906166	AdditiveExpression	refX - thisX		4906144	0		-			
ANR	4906167	Identifier	refX		4906144	0					
ANR	4906168	Identifier	thisX		4906144	1					
ANR	4906169	IfStatement	if ( dx > array_width / 2 )		4906144	3					
ANR	4906170	Condition	dx > array_width / 2	616:8:24768:24785	4906144	0	True				
ANR	4906171	RelationalExpression	dx > array_width / 2		4906144	0		>			
ANR	4906172	Identifier	dx		4906144	0					
ANR	4906173	MultiplicativeExpression	array_width / 2		4906144	1		/			
ANR	4906174	Identifier	array_width		4906144	0					
ANR	4906175	PrimaryExpression	2		4906144	1					
ANR	4906176	ExpressionStatement	dx = array_width - dx	617:8:24796:24817	4906144	1	True				
ANR	4906177	AssignmentExpression	dx = array_width - dx		4906144	0		=			
ANR	4906178	Identifier	dx		4906144	0					
ANR	4906179	AdditiveExpression	array_width - dx		4906144	1		-			
ANR	4906180	Identifier	array_width		4906144	0					
ANR	4906181	Identifier	dx		4906144	1					
ANR	4906182	ExpressionStatement	dy = abs ( refY - thisY )	619:4:24824:24846	4906144	4	True				
ANR	4906183	AssignmentExpression	dy = abs ( refY - thisY )		4906144	0		=			
ANR	4906184	Identifier	dy		4906144	0					
ANR	4906185	CallExpression	abs ( refY - thisY )		4906144	1					
ANR	4906186	Callee	abs		4906144	0					
ANR	4906187	Identifier	abs		4906144	0					
ANR	4906188	ArgumentList	refY - thisY		4906144	1					
ANR	4906189	Argument	refY - thisY		4906144	0					
ANR	4906190	AdditiveExpression	refY - thisY		4906144	0		-			
ANR	4906191	Identifier	refY		4906144	0					
ANR	4906192	Identifier	thisY		4906144	1					
ANR	4906193	IfStatement	if ( dy > array_height / 2 )		4906144	5					
ANR	4906194	Condition	dy > array_height / 2	620:8:24856:24874	4906144	0	True				
ANR	4906195	RelationalExpression	dy > array_height / 2		4906144	0		>			
ANR	4906196	Identifier	dy		4906144	0					
ANR	4906197	MultiplicativeExpression	array_height / 2		4906144	1		/			
ANR	4906198	Identifier	array_height		4906144	0					
ANR	4906199	PrimaryExpression	2		4906144	1					
ANR	4906200	ExpressionStatement	dy = array_height - dy	621:8:24885:24907	4906144	1	True				
ANR	4906201	AssignmentExpression	dy = array_height - dy		4906144	0		=			
ANR	4906202	Identifier	dy		4906144	0					
ANR	4906203	AdditiveExpression	array_height - dy		4906144	1		-			
ANR	4906204	Identifier	array_height		4906144	0					
ANR	4906205	Identifier	dy		4906144	1					
ANR	4906206	ExpressionStatement	distance = ( ( double ) ( dx * dx ) / rx_sq ) + ( ( double ) ( dy * dy ) / ry_sq )	623:4:24914:24974	4906144	6	True				
ANR	4906207	AssignmentExpression	distance = ( ( double ) ( dx * dx ) / rx_sq ) + ( ( double ) ( dy * dy ) / ry_sq )		4906144	0		=			
ANR	4906208	Identifier	distance		4906144	0					
ANR	4906209	AdditiveExpression	( ( double ) ( dx * dx ) / rx_sq ) + ( ( double ) ( dy * dy ) / ry_sq )		4906144	1		+			
ANR	4906210	MultiplicativeExpression	( double ) ( dx * dx ) / rx_sq		4906144	0		/			
ANR	4906211	CastExpression	( double ) ( dx * dx )		4906144	0					
ANR	4906212	CastTarget	double		4906144	0					
ANR	4906213	MultiplicativeExpression	dx * dx		4906144	1		*			
ANR	4906214	Identifier	dx		4906144	0					
ANR	4906215	Identifier	dx		4906144	1					
ANR	4906216	Identifier	rx_sq		4906144	1					
ANR	4906217	MultiplicativeExpression	( double ) ( dy * dy ) / ry_sq		4906144	1		/			
ANR	4906218	CastExpression	( double ) ( dy * dy )		4906144	0					
ANR	4906219	CastTarget	double		4906144	0					
ANR	4906220	MultiplicativeExpression	dy * dy		4906144	1		*			
ANR	4906221	Identifier	dy		4906144	0					
ANR	4906222	Identifier	dy		4906144	1					
ANR	4906223	Identifier	ry_sq		4906144	1					
ANR	4906224	IfStatement	if ( ( dx == 0 ) || ( dy == 0 ) || ( dx == dy ) || ( ( dx + dy ) < 10 ) )		4906144	7					
ANR	4906225	Condition	( dx == 0 ) || ( dy == 0 ) || ( dx == dy ) || ( ( dx + dy ) < 10 )	628:8:25134:25188	4906144	0	True				
ANR	4906226	OrExpression	( dx == 0 ) || ( dy == 0 ) || ( dx == dy ) || ( ( dx + dy ) < 10 )		4906144	0		||			
ANR	4906227	EqualityExpression	dx == 0		4906144	0		==			
ANR	4906228	Identifier	dx		4906144	0					
ANR	4906229	PrimaryExpression	0		4906144	1					
ANR	4906230	OrExpression	( dy == 0 ) || ( dx == dy ) || ( ( dx + dy ) < 10 )		4906144	1		||			
ANR	4906231	EqualityExpression	dy == 0		4906144	0		==			
ANR	4906232	Identifier	dy		4906144	0					
ANR	4906233	PrimaryExpression	0		4906144	1					
ANR	4906234	OrExpression	( dx == dy ) || ( ( dx + dy ) < 10 )		4906144	1		||			
ANR	4906235	EqualityExpression	dx == dy		4906144	0		==			
ANR	4906236	Identifier	dx		4906144	0					
ANR	4906237	Identifier	dy		4906144	1					
ANR	4906238	RelationalExpression	( dx + dy ) < 10		4906144	1		<			
ANR	4906239	AdditiveExpression	dx + dy		4906144	0		+			
ANR	4906240	Identifier	dx		4906144	0					
ANR	4906241	Identifier	dy		4906144	1					
ANR	4906242	PrimaryExpression	10		4906144	1					
ANR	4906243	ExpressionStatement	distance *= 0.7	629:16:25207:25222	4906144	1	True				
ANR	4906244	AssignmentExpression	distance *= 0.7		4906144	0		*=			
ANR	4906245	Identifier	distance		4906144	0					
ANR	4906246	PrimaryExpression	0.7		4906144	1					
ANR	4906247	ReturnStatement	return ( 1.0 / distance ) ;	632:4:25236:25258	4906144	8	True				
ANR	4906248	MultiplicativeExpression	1.0 / distance		4906144	0		/			
ANR	4906249	PrimaryExpression	1.0		4906144	0					
ANR	4906250	Identifier	distance		4906144	1					
ANR	4906251	ReturnType	double		4906144	1					
ANR	4906252	Identifier	ValFunction		4906144	2					
ANR	4906253	ParameterList	"int thisX , int thisY , int refX , int refY , double rx_sq , double ry_sq"		4906144	3					
ANR	4906254	Parameter	int thisX	610:12:24622:24630	4906144	0	True				
ANR	4906255	ParameterType	int		4906144	0					
ANR	4906256	Identifier	thisX		4906144	1					
ANR	4906257	Parameter	int thisY	610:23:24633:24641	4906144	1	True				
ANR	4906258	ParameterType	int		4906144	0					
ANR	4906259	Identifier	thisY		4906144	1					
ANR	4906260	Parameter	int refX	610:34:24644:24651	4906144	2	True				
ANR	4906261	ParameterType	int		4906144	0					
ANR	4906262	Identifier	refX		4906144	1					
ANR	4906263	Parameter	int refY	610:44:24654:24661	4906144	3	True				
ANR	4906264	ParameterType	int		4906144	0					
ANR	4906265	Identifier	refY		4906144	1					
ANR	4906266	Parameter	double rx_sq	610:54:24664:24675	4906144	4	True				
ANR	4906267	ParameterType	double		4906144	0					
ANR	4906268	Identifier	rx_sq		4906144	1					
ANR	4906269	Parameter	double ry_sq	610:68:24678:24689	4906144	5	True				
ANR	4906270	ParameterType	double		4906144	0					
ANR	4906271	Identifier	ry_sq		4906144	1					
ANR	4906272	CFGEntryNode	ENTRY		4906144		True				
ANR	4906273	CFGExitNode	EXIT		4906144		True				
ANR	4906274	Symbol	refX		4906144						
ANR	4906275	Symbol	refY		4906144						
ANR	4906276	Symbol	abs		4906144						
ANR	4906277	Symbol	dx		4906144						
ANR	4906278	Symbol	distance		4906144						
ANR	4906279	Symbol	array_width		4906144						
ANR	4906280	Symbol	dy		4906144						
ANR	4906281	Symbol	thisY		4906144						
ANR	4906282	Symbol	ry_sq		4906144						
ANR	4906283	Symbol	thisX		4906144						
ANR	4906284	Symbol	rx_sq		4906144						
ANR	4906285	Symbol	array_height		4906144						
ANR	4906286	Function	CompareOrder	635:0:25263:25633							
ANR	4906287	FunctionDef	"CompareOrder (const void * vp , const void * vq)"		4906286	0					
ANR	4906288	CompoundStatement		637:0:25312:25633	4906286	0					
ANR	4906289	IdentifierDeclStatement	const Order_s * p = ( const Order_s * ) vp ;	638:4:25318:25356	4906286	0	True				
ANR	4906290	IdentifierDecl	* p = ( const Order_s * ) vp		4906286	0					
ANR	4906291	IdentifierDeclType	const Order_s *		4906286	0					
ANR	4906292	Identifier	p		4906286	1					
ANR	4906293	AssignmentExpression	* p = ( const Order_s * ) vp		4906286	2		=			
ANR	4906294	Identifier	p		4906286	0					
ANR	4906295	CastExpression	( const Order_s * ) vp		4906286	1					
ANR	4906296	CastTarget	const Order_s *		4906286	0					
ANR	4906297	Identifier	vp		4906286	1					
ANR	4906298	IdentifierDeclStatement	const Order_s * q = ( const Order_s * ) vq ;	639:4:25362:25400	4906286	1	True				
ANR	4906299	IdentifierDecl	* q = ( const Order_s * ) vq		4906286	0					
ANR	4906300	IdentifierDeclType	const Order_s *		4906286	0					
ANR	4906301	Identifier	q		4906286	1					
ANR	4906302	AssignmentExpression	* q = ( const Order_s * ) vq		4906286	2		=			
ANR	4906303	Identifier	q		4906286	0					
ANR	4906304	CastExpression	( const Order_s * ) vq		4906286	1					
ANR	4906305	CastTarget	const Order_s *		4906286	0					
ANR	4906306	Identifier	vq		4906286	1					
ANR	4906307	IdentifierDeclStatement	int retval = 0 ;	640:4:25406:25420	4906286	2	True				
ANR	4906308	IdentifierDecl	retval = 0		4906286	0					
ANR	4906309	IdentifierDeclType	int		4906286	0					
ANR	4906310	Identifier	retval		4906286	1					
ANR	4906311	AssignmentExpression	retval = 0		4906286	2		=			
ANR	4906312	Identifier	retval		4906286	0					
ANR	4906313	PrimaryExpression	0		4906286	1					
ANR	4906314	IfStatement	if ( Val [ p -> Y * array_width + p -> X ] < Val [ q -> Y * array_width + q -> X ] )		4906286	3					
ANR	4906315	Condition	Val [ p -> Y * array_width + p -> X ] < Val [ q -> Y * array_width + q -> X ]	642:8:25431:25493	4906286	0	True				
ANR	4906316	RelationalExpression	Val [ p -> Y * array_width + p -> X ] < Val [ q -> Y * array_width + q -> X ]		4906286	0		<			
ANR	4906317	ArrayIndexing	Val [ p -> Y * array_width + p -> X ]		4906286	0					
ANR	4906318	Identifier	Val		4906286	0					
ANR	4906319	AdditiveExpression	p -> Y * array_width + p -> X		4906286	1		+			
ANR	4906320	MultiplicativeExpression	p -> Y * array_width		4906286	0		*			
ANR	4906321	PtrMemberAccess	p -> Y		4906286	0					
ANR	4906322	Identifier	p		4906286	0					
ANR	4906323	Identifier	Y		4906286	1					
ANR	4906324	Identifier	array_width		4906286	1					
ANR	4906325	PtrMemberAccess	p -> X		4906286	1					
ANR	4906326	Identifier	p		4906286	0					
ANR	4906327	Identifier	X		4906286	1					
ANR	4906328	ArrayIndexing	Val [ q -> Y * array_width + q -> X ]		4906286	1					
ANR	4906329	Identifier	Val		4906286	0					
ANR	4906330	AdditiveExpression	q -> Y * array_width + q -> X		4906286	1		+			
ANR	4906331	MultiplicativeExpression	q -> Y * array_width		4906286	0		*			
ANR	4906332	PtrMemberAccess	q -> Y		4906286	0					
ANR	4906333	Identifier	q		4906286	0					
ANR	4906334	Identifier	Y		4906286	1					
ANR	4906335	Identifier	array_width		4906286	1					
ANR	4906336	PtrMemberAccess	q -> X		4906286	1					
ANR	4906337	Identifier	q		4906286	0					
ANR	4906338	Identifier	X		4906286	1					
ANR	4906339	ExpressionStatement	retval = - 1	643:7:25503:25514	4906286	1	True				
ANR	4906340	AssignmentExpression	retval = - 1		4906286	0		=			
ANR	4906341	Identifier	retval		4906286	0					
ANR	4906342	UnaryOperationExpression	- 1		4906286	1					
ANR	4906343	UnaryOperator	-		4906286	0					
ANR	4906344	PrimaryExpression	1		4906286	1					
ANR	4906345	ElseStatement	else		4906286	0					
ANR	4906346	IfStatement	if ( Val [ p -> Y * array_width + p -> X ] > Val [ q -> Y * array_width + q -> X ] )		4906286	0					
ANR	4906347	Condition	Val [ p -> Y * array_width + p -> X ] > Val [ q -> Y * array_width + q -> X ]	644:13:25529:25591	4906286	0	True				
ANR	4906348	RelationalExpression	Val [ p -> Y * array_width + p -> X ] > Val [ q -> Y * array_width + q -> X ]		4906286	0		>			
ANR	4906349	ArrayIndexing	Val [ p -> Y * array_width + p -> X ]		4906286	0					
ANR	4906350	Identifier	Val		4906286	0					
ANR	4906351	AdditiveExpression	p -> Y * array_width + p -> X		4906286	1		+			
ANR	4906352	MultiplicativeExpression	p -> Y * array_width		4906286	0		*			
ANR	4906353	PtrMemberAccess	p -> Y		4906286	0					
ANR	4906354	Identifier	p		4906286	0					
ANR	4906355	Identifier	Y		4906286	1					
ANR	4906356	Identifier	array_width		4906286	1					
ANR	4906357	PtrMemberAccess	p -> X		4906286	1					
ANR	4906358	Identifier	p		4906286	0					
ANR	4906359	Identifier	X		4906286	1					
ANR	4906360	ArrayIndexing	Val [ q -> Y * array_width + q -> X ]		4906286	1					
ANR	4906361	Identifier	Val		4906286	0					
ANR	4906362	AdditiveExpression	q -> Y * array_width + q -> X		4906286	1		+			
ANR	4906363	MultiplicativeExpression	q -> Y * array_width		4906286	0		*			
ANR	4906364	PtrMemberAccess	q -> Y		4906286	0					
ANR	4906365	Identifier	q		4906286	0					
ANR	4906366	Identifier	Y		4906286	1					
ANR	4906367	Identifier	array_width		4906286	1					
ANR	4906368	PtrMemberAccess	q -> X		4906286	1					
ANR	4906369	Identifier	q		4906286	0					
ANR	4906370	Identifier	X		4906286	1					
ANR	4906371	ExpressionStatement	retval = 1	645:7:25601:25611	4906286	1	True				
ANR	4906372	AssignmentExpression	retval = 1		4906286	0		=			
ANR	4906373	Identifier	retval		4906286	0					
ANR	4906374	PrimaryExpression	1		4906286	1					
ANR	4906375	ReturnStatement	return retval ;	647:4:25618:25631	4906286	4	True				
ANR	4906376	Identifier	retval		4906286	0					
ANR	4906377	ReturnType	int		4906286	1					
ANR	4906378	Identifier	CompareOrder		4906286	2					
ANR	4906379	ParameterList	"const void * vp , const void * vq"		4906286	3					
ANR	4906380	Parameter	const void * vp	636:13:25280:25293	4906286	0	True				
ANR	4906381	ParameterType	const void *		4906286	0					
ANR	4906382	Identifier	vp		4906286	1					
ANR	4906383	Parameter	const void * vq	636:29:25296:25309	4906286	1	True				
ANR	4906384	ParameterType	const void *		4906286	0					
ANR	4906385	Identifier	vq		4906286	1					
ANR	4906386	CFGEntryNode	ENTRY		4906286		True				
ANR	4906387	CFGExitNode	EXIT		4906286		True				
ANR	4906388	Symbol	Val		4906286						
ANR	4906389	Symbol	* p -> X		4906286						
ANR	4906390	Symbol	* q -> X		4906286						
ANR	4906391	Symbol	* q -> Y		4906286						
ANR	4906392	Symbol	p -> Y		4906286						
ANR	4906393	Symbol	* array_width		4906286						
ANR	4906394	Symbol	retval		4906286						
ANR	4906395	Symbol	p -> X		4906286						
ANR	4906396	Symbol	p		4906286						
ANR	4906397	Symbol	q		4906286						
ANR	4906398	Symbol	q -> Y		4906286						
ANR	4906399	Symbol	q -> X		4906286						
ANR	4906400	Symbol	* Val		4906286						
ANR	4906401	Symbol	array_width		4906286						
ANR	4906402	Symbol	vp		4906286						
ANR	4906403	Symbol	* * q		4906286						
ANR	4906404	Symbol	* p		4906286						
ANR	4906405	Symbol	vq		4906286						
ANR	4906406	Symbol	* * p		4906286						
ANR	4906407	Symbol	* q		4906286						
ANR	4906408	Symbol	* p -> Y		4906286						
ANR	4906409	Function	do_dot	650:0:25636:27066							
ANR	4906410	FunctionDef	"do_dot (int choice_X , int choice_Y , int level , int last)"		4906409	0					
ANR	4906411	CompoundStatement		652:0:25696:27066	4906409	0					
ANR	4906412	IdentifierDeclStatement	"int code = 0 , X , Y ;"	653:4:25702:25720	4906409	0	True				
ANR	4906413	IdentifierDecl	code = 0		4906409	0					
ANR	4906414	IdentifierDeclType	int		4906409	0					
ANR	4906415	Identifier	code		4906409	1					
ANR	4906416	AssignmentExpression	code = 0		4906409	2		=			
ANR	4906417	Identifier	code		4906409	0					
ANR	4906418	PrimaryExpression	0		4906409	1					
ANR	4906419	IdentifierDecl	X		4906409	1					
ANR	4906420	IdentifierDeclType	int		4906409	0					
ANR	4906421	Identifier	X		4906409	1					
ANR	4906422	IdentifierDecl	Y		4906409	2					
ANR	4906423	IdentifierDeclType	int		4906409	0					
ANR	4906424	Identifier	Y		4906409	1					
ANR	4906425	IdentifierDeclStatement	double value ;	654:4:25726:25738	4906409	1	True				
ANR	4906426	IdentifierDecl	value		4906409	0					
ANR	4906427	IdentifierDeclType	double		4906409	0					
ANR	4906428	Identifier	value		4906409	1					
ANR	4906429	ExpressionStatement	ThresholdArray [ choice_X ] [ choice_Y ] = level	656:4:25745:25787	4906409	2	True				
ANR	4906430	AssignmentExpression	ThresholdArray [ choice_X ] [ choice_Y ] = level		4906409	0		=			
ANR	4906431	ArrayIndexing	ThresholdArray [ choice_X ] [ choice_Y ]		4906409	0					
ANR	4906432	ArrayIndexing	ThresholdArray [ choice_X ]		4906409	0					
ANR	4906433	Identifier	ThresholdArray		4906409	0					
ANR	4906434	Identifier	choice_X		4906409	1					
ANR	4906435	Identifier	choice_Y		4906409	1					
ANR	4906436	Identifier	level		4906409	1					
ANR	4906437	ExpressionStatement	value = Val [ choice_Y * array_width + choice_X ]	657:4:25793:25841	4906409	3	True				
ANR	4906438	AssignmentExpression	value = Val [ choice_Y * array_width + choice_X ]		4906409	0		=			
ANR	4906439	Identifier	value		4906409	0					
ANR	4906440	ArrayIndexing	Val [ choice_Y * array_width + choice_X ]		4906409	1					
ANR	4906441	Identifier	Val		4906409	0					
ANR	4906442	AdditiveExpression	choice_Y * array_width + choice_X		4906409	1		+			
ANR	4906443	MultiplicativeExpression	choice_Y * array_width		4906409	0		*			
ANR	4906444	Identifier	choice_Y		4906409	0					
ANR	4906445	Identifier	array_width		4906409	1					
ANR	4906446	Identifier	choice_X		4906409	1					
ANR	4906447	ExpressionStatement	value = ( value - MinVal ) / ValRange	658:4:25847:25880	4906409	4	True				
ANR	4906448	AssignmentExpression	value = ( value - MinVal ) / ValRange		4906409	0		=			
ANR	4906449	Identifier	value		4906409	0					
ANR	4906450	MultiplicativeExpression	( value - MinVal ) / ValRange		4906409	1		/			
ANR	4906451	AdditiveExpression	value - MinVal		4906409	0		-			
ANR	4906452	Identifier	value		4906409	0					
ANR	4906453	Identifier	MinVal		4906409	1					
ANR	4906454	Identifier	ValRange		4906409	1					
ANR	4906455	ExpressionStatement	"fprintf ( fp , ""%d\\t%d\\n"" , choice_X , choice_Y )"	659:4:25886:25926	4906409	5	True				
ANR	4906456	CallExpression	"fprintf ( fp , ""%d\\t%d\\n"" , choice_X , choice_Y )"		4906409	0					
ANR	4906457	Callee	fprintf		4906409	0					
ANR	4906458	Identifier	fprintf		4906409	0					
ANR	4906459	ArgumentList	fp		4906409	1					
ANR	4906460	Argument	fp		4906409	0					
ANR	4906461	Identifier	fp		4906409	0					
ANR	4906462	Argument	"""%d\\t%d\\n"""		4906409	1					
ANR	4906463	PrimaryExpression	"""%d\\t%d\\n"""		4906409	0					
ANR	4906464	Argument	choice_X		4906409	2					
ANR	4906465	Identifier	choice_X		4906409	0					
ANR	4906466	Argument	choice_Y		4906409	3					
ANR	4906467	Identifier	choice_Y		4906409	0					
ANR	4906468	IfStatement	"if ( ( code = update_gs_dot ( choice_X , choice_Y , last ) ) < 0 )"		4906409	6					
ANR	4906469	Condition	"( code = update_gs_dot ( choice_X , choice_Y , last ) ) < 0"	662:8:25954:26003	4906409	0	True				
ANR	4906470	RelationalExpression	"( code = update_gs_dot ( choice_X , choice_Y , last ) ) < 0"		4906409	0		<			
ANR	4906471	AssignmentExpression	"code = update_gs_dot ( choice_X , choice_Y , last )"		4906409	0		=			
ANR	4906472	Identifier	code		4906409	0					
ANR	4906473	CallExpression	"update_gs_dot ( choice_X , choice_Y , last )"		4906409	1					
ANR	4906474	Callee	update_gs_dot		4906409	0					
ANR	4906475	Identifier	update_gs_dot		4906409	0					
ANR	4906476	ArgumentList	choice_X		4906409	1					
ANR	4906477	Argument	choice_X		4906409	0					
ANR	4906478	Identifier	choice_X		4906409	0					
ANR	4906479	Argument	choice_Y		4906409	1					
ANR	4906480	Identifier	choice_Y		4906409	0					
ANR	4906481	Argument	last		4906409	2					
ANR	4906482	Identifier	last		4906409	0					
ANR	4906483	PrimaryExpression	0		4906409	1					
ANR	4906484	ReturnStatement	return - 1 ;	663:8:26014:26023	4906409	1	True				
ANR	4906485	UnaryOperationExpression	- 1		4906409	0					
ANR	4906486	UnaryOperator	-		4906409	0					
ANR	4906487	PrimaryExpression	1		4906409	1					
ANR	4906488	ExpressionStatement	Val [ choice_Y * array_width + choice_X ] = BIG_FLOAT	666:4:26037:26088	4906409	7	True				
ANR	4906489	AssignmentExpression	Val [ choice_Y * array_width + choice_X ] = BIG_FLOAT		4906409	0		=			
ANR	4906490	ArrayIndexing	Val [ choice_Y * array_width + choice_X ]		4906409	0					
ANR	4906491	Identifier	Val		4906409	0					
ANR	4906492	AdditiveExpression	choice_Y * array_width + choice_X		4906409	1		+			
ANR	4906493	MultiplicativeExpression	choice_Y * array_width		4906409	0		*			
ANR	4906494	Identifier	choice_Y		4906409	0					
ANR	4906495	Identifier	array_width		4906409	1					
ANR	4906496	Identifier	choice_X		4906409	1					
ANR	4906497	Identifier	BIG_FLOAT		4906409	1					
ANR	4906498	ExpressionStatement	MinVal = BIG_FLOAT	669:4:26267:26285	4906409	8	True				
ANR	4906499	AssignmentExpression	MinVal = BIG_FLOAT		4906409	0		=			
ANR	4906500	Identifier	MinVal		4906409	0					
ANR	4906501	Identifier	BIG_FLOAT		4906409	1					
ANR	4906502	ExpressionStatement	MaxVal = 0.0	670:4:26291:26303	4906409	9	True				
ANR	4906503	AssignmentExpression	MaxVal = 0.0		4906409	0		=			
ANR	4906504	Identifier	MaxVal		4906409	0					
ANR	4906505	PrimaryExpression	0.0		4906409	1					
ANR	4906506	ForStatement	for ( Y = 0 ; Y < array_height ; Y ++ )		4906409	10					
ANR	4906507	ForInit	Y = 0 ;	671:9:26314:26317	4906409	0	True				
ANR	4906508	AssignmentExpression	Y = 0		4906409	0		=			
ANR	4906509	Identifier	Y		4906409	0					
ANR	4906510	PrimaryExpression	0		4906409	1					
ANR	4906511	Condition	Y < array_height	671:14:26319:26334	4906409	1	True				
ANR	4906512	RelationalExpression	Y < array_height		4906409	0		<			
ANR	4906513	Identifier	Y		4906409	0					
ANR	4906514	Identifier	array_height		4906409	1					
ANR	4906515	PostIncDecOperationExpression	Y ++	671:32:26337:26339	4906409	2	True				
ANR	4906516	Identifier	Y		4906409	0					
ANR	4906517	IncDec	++		4906409	1					
ANR	4906518	CompoundStatement		20:37:645:645	4906409	3					
ANR	4906519	ForStatement	for ( X = 0 ; X < array_width ; X ++ )		4906409	0					
ANR	4906520	ForInit	X = 0 ;	672:13:26357:26360	4906409	0	True				
ANR	4906521	AssignmentExpression	X = 0		4906409	0		=			
ANR	4906522	Identifier	X		4906409	0					
ANR	4906523	PrimaryExpression	0		4906409	1					
ANR	4906524	Condition	X < array_width	672:18:26362:26376	4906409	1	True				
ANR	4906525	RelationalExpression	X < array_width		4906409	0		<			
ANR	4906526	Identifier	X		4906409	0					
ANR	4906527	Identifier	array_width		4906409	1					
ANR	4906528	PostIncDecOperationExpression	X ++	672:35:26379:26381	4906409	2	True				
ANR	4906529	Identifier	X		4906409	0					
ANR	4906530	IncDec	++		4906409	1					
ANR	4906531	CompoundStatement		21:40:687:687	4906409	3					
ANR	4906532	IfStatement	if ( ThresholdArray [ X ] [ Y ] == - 1 )		4906409	0					
ANR	4906533	Condition	ThresholdArray [ X ] [ Y ] == - 1	673:16:26402:26427	4906409	0	True				
ANR	4906534	EqualityExpression	ThresholdArray [ X ] [ Y ] == - 1		4906409	0		==			
ANR	4906535	ArrayIndexing	ThresholdArray [ X ] [ Y ]		4906409	0					
ANR	4906536	ArrayIndexing	ThresholdArray [ X ]		4906409	0					
ANR	4906537	Identifier	ThresholdArray		4906409	0					
ANR	4906538	Identifier	X		4906409	1					
ANR	4906539	Identifier	Y		4906409	1					
ANR	4906540	UnaryOperationExpression	- 1		4906409	1					
ANR	4906541	UnaryOperator	-		4906409	0					
ANR	4906542	PrimaryExpression	1		4906409	1					
ANR	4906543	CompoundStatement		25:16:875:995	4906409	1					
ANR	4906544	IdentifierDeclStatement	double rx_sq = resolution [ 0 ] * resolution [ 0 ] ;	674:16:26448:26492	4906409	0	True				
ANR	4906545	IdentifierDecl	rx_sq = resolution [ 0 ] * resolution [ 0 ]		4906409	0					
ANR	4906546	IdentifierDeclType	double		4906409	0					
ANR	4906547	Identifier	rx_sq		4906409	1					
ANR	4906548	AssignmentExpression	rx_sq = resolution [ 0 ] * resolution [ 0 ]		4906409	2		=			
ANR	4906549	Identifier	rx_sq		4906409	0					
ANR	4906550	MultiplicativeExpression	resolution [ 0 ] * resolution [ 0 ]		4906409	1		*			
ANR	4906551	ArrayIndexing	resolution [ 0 ]		4906409	0					
ANR	4906552	Identifier	resolution		4906409	0					
ANR	4906553	PrimaryExpression	0		4906409	1					
ANR	4906554	ArrayIndexing	resolution [ 0 ]		4906409	1					
ANR	4906555	Identifier	resolution		4906409	0					
ANR	4906556	PrimaryExpression	0		4906409	1					
ANR	4906557	IdentifierDeclStatement	double ry_sq = resolution [ 1 ] * resolution [ 1 ] ;	675:16:26510:26554	4906409	1	True				
ANR	4906558	IdentifierDecl	ry_sq = resolution [ 1 ] * resolution [ 1 ]		4906409	0					
ANR	4906559	IdentifierDeclType	double		4906409	0					
ANR	4906560	Identifier	ry_sq		4906409	1					
ANR	4906561	AssignmentExpression	ry_sq = resolution [ 1 ] * resolution [ 1 ]		4906409	2		=			
ANR	4906562	Identifier	ry_sq		4906409	0					
ANR	4906563	MultiplicativeExpression	resolution [ 1 ] * resolution [ 1 ]		4906409	1		*			
ANR	4906564	ArrayIndexing	resolution [ 1 ]		4906409	0					
ANR	4906565	Identifier	resolution		4906409	0					
ANR	4906566	PrimaryExpression	1		4906409	1					
ANR	4906567	ArrayIndexing	resolution [ 1 ]		4906409	1					
ANR	4906568	Identifier	resolution		4906409	0					
ANR	4906569	PrimaryExpression	1		4906409	1					
ANR	4906570	IdentifierDeclStatement	"double vtmp = Val [ Y * array_width + X ] + ValFunction ( X , Y , choice_X , choice_Y , rx_sq , ry_sq ) ;"	676:16:26572:26692	4906409	2	True				
ANR	4906571	IdentifierDecl	"vtmp = Val [ Y * array_width + X ] + ValFunction ( X , Y , choice_X , choice_Y , rx_sq , ry_sq )"		4906409	0					
ANR	4906572	IdentifierDeclType	double		4906409	0					
ANR	4906573	Identifier	vtmp		4906409	1					
ANR	4906574	AssignmentExpression	"vtmp = Val [ Y * array_width + X ] + ValFunction ( X , Y , choice_X , choice_Y , rx_sq , ry_sq )"		4906409	2		=			
ANR	4906575	Identifier	vtmp		4906409	0					
ANR	4906576	AdditiveExpression	"Val [ Y * array_width + X ] + ValFunction ( X , Y , choice_X , choice_Y , rx_sq , ry_sq )"		4906409	1		+			
ANR	4906577	ArrayIndexing	Val [ Y * array_width + X ]		4906409	0					
ANR	4906578	Identifier	Val		4906409	0					
ANR	4906579	AdditiveExpression	Y * array_width + X		4906409	1		+			
ANR	4906580	MultiplicativeExpression	Y * array_width		4906409	0		*			
ANR	4906581	Identifier	Y		4906409	0					
ANR	4906582	Identifier	array_width		4906409	1					
ANR	4906583	Identifier	X		4906409	1					
ANR	4906584	CallExpression	"ValFunction ( X , Y , choice_X , choice_Y , rx_sq , ry_sq )"		4906409	1					
ANR	4906585	Callee	ValFunction		4906409	0					
ANR	4906586	Identifier	ValFunction		4906409	0					
ANR	4906587	ArgumentList	X		4906409	1					
ANR	4906588	Argument	X		4906409	0					
ANR	4906589	Identifier	X		4906409	0					
ANR	4906590	Argument	Y		4906409	1					
ANR	4906591	Identifier	Y		4906409	0					
ANR	4906592	Argument	choice_X		4906409	2					
ANR	4906593	Identifier	choice_X		4906409	0					
ANR	4906594	Argument	choice_Y		4906409	3					
ANR	4906595	Identifier	choice_Y		4906409	0					
ANR	4906596	Argument	rx_sq		4906409	4					
ANR	4906597	Identifier	rx_sq		4906409	0					
ANR	4906598	Argument	ry_sq		4906409	5					
ANR	4906599	Identifier	ry_sq		4906409	0					
ANR	4906600	ExpressionStatement	Val [ Y * array_width + X ] = vtmp	679:17:26712:26743	4906409	3	True				
ANR	4906601	AssignmentExpression	Val [ Y * array_width + X ] = vtmp		4906409	0		=			
ANR	4906602	ArrayIndexing	Val [ Y * array_width + X ]		4906409	0					
ANR	4906603	Identifier	Val		4906409	0					
ANR	4906604	AdditiveExpression	Y * array_width + X		4906409	1		+			
ANR	4906605	MultiplicativeExpression	Y * array_width		4906409	0		*			
ANR	4906606	Identifier	Y		4906409	0					
ANR	4906607	Identifier	array_width		4906409	1					
ANR	4906608	Identifier	X		4906409	1					
ANR	4906609	Identifier	vtmp		4906409	1					
ANR	4906610	IfStatement	if ( vtmp < MinVal )		4906409	4					
ANR	4906611	Condition	vtmp < MinVal	680:20:26765:26777	4906409	0	True				
ANR	4906612	RelationalExpression	vtmp < MinVal		4906409	0		<			
ANR	4906613	Identifier	vtmp		4906409	0					
ANR	4906614	Identifier	MinVal		4906409	1					
ANR	4906615	ExpressionStatement	MinVal = vtmp	681:20:26800:26813	4906409	1	True				
ANR	4906616	AssignmentExpression	MinVal = vtmp		4906409	0		=			
ANR	4906617	Identifier	MinVal		4906409	0					
ANR	4906618	Identifier	vtmp		4906409	1					
ANR	4906619	IfStatement	if ( vtmp > MaxVal )		4906409	5					
ANR	4906620	Condition	vtmp > MaxVal	682:20:26835:26847	4906409	0	True				
ANR	4906621	RelationalExpression	vtmp > MaxVal		4906409	0		>			
ANR	4906622	Identifier	vtmp		4906409	0					
ANR	4906623	Identifier	MaxVal		4906409	1					
ANR	4906624	ExpressionStatement	MaxVal = vtmp	683:20:26870:26883	4906409	1	True				
ANR	4906625	AssignmentExpression	MaxVal = vtmp		4906409	0		=			
ANR	4906626	Identifier	MaxVal		4906409	0					
ANR	4906627	Identifier	vtmp		4906409	1					
ANR	4906628	ExpressionStatement	ValRange = MaxVal - MinVal	687:4:26972:26998	4906409	11	True				
ANR	4906629	AssignmentExpression	ValRange = MaxVal - MinVal		4906409	0		=			
ANR	4906630	Identifier	ValRange		4906409	0					
ANR	4906631	AdditiveExpression	MaxVal - MinVal		4906409	1		-			
ANR	4906632	Identifier	MaxVal		4906409	0					
ANR	4906633	Identifier	MinVal		4906409	1					
ANR	4906634	IfStatement	if ( ValRange == 0.0 )		4906409	12					
ANR	4906635	Condition	ValRange == 0.0	688:8:27008:27022	4906409	0	True				
ANR	4906636	EqualityExpression	ValRange == 0.0		4906409	0		==			
ANR	4906637	Identifier	ValRange		4906409	0					
ANR	4906638	PrimaryExpression	0.0		4906409	1					
ANR	4906639	ExpressionStatement	ValRange = 1.0	689:8:27033:27047	4906409	1	True				
ANR	4906640	AssignmentExpression	ValRange = 1.0		4906409	0		=			
ANR	4906641	Identifier	ValRange		4906409	0					
ANR	4906642	PrimaryExpression	1.0		4906409	1					
ANR	4906643	ReturnStatement	return code ;	690:4:27053:27064	4906409	13	True				
ANR	4906644	Identifier	code		4906409	0					
ANR	4906645	ReturnType	int		4906409	1					
ANR	4906646	Identifier	do_dot		4906409	2					
ANR	4906647	ParameterList	"int choice_X , int choice_Y , int level , int last"		4906409	3					
ANR	4906648	Parameter	int choice_X	651:7:25647:25658	4906409	0	True				
ANR	4906649	ParameterType	int		4906409	0					
ANR	4906650	Identifier	choice_X		4906409	1					
ANR	4906651	Parameter	int choice_Y	651:21:25661:25672	4906409	1	True				
ANR	4906652	ParameterType	int		4906409	0					
ANR	4906653	Identifier	choice_Y		4906409	1					
ANR	4906654	Parameter	int level	651:35:25675:25683	4906409	2	True				
ANR	4906655	ParameterType	int		4906409	0					
ANR	4906656	Identifier	level		4906409	1					
ANR	4906657	Parameter	int last	651:46:25686:25693	4906409	3	True				
ANR	4906658	ParameterType	int		4906409	0					
ANR	4906659	Identifier	last		4906409	1					
ANR	4906660	CFGEntryNode	ENTRY		4906409		True				
ANR	4906661	CFGExitNode	EXIT		4906409		True				
ANR	4906662	Symbol	Val		4906409						
ANR	4906663	Symbol	code		4906409						
ANR	4906664	Symbol	choice_X		4906409						
ANR	4906665	Symbol	choice_Y		4906409						
ANR	4906666	Symbol	rx_sq		4906409						
ANR	4906667	Symbol	ValFunction		4906409						
ANR	4906668	Symbol	fp		4906409						
ANR	4906669	Symbol	resolution		4906409						
ANR	4906670	Symbol	MaxVal		4906409						
ANR	4906671	Symbol	BIG_FLOAT		4906409						
ANR	4906672	Symbol	* Val		4906409						
ANR	4906673	Symbol	vtmp		4906409						
ANR	4906674	Symbol	X		4906409						
ANR	4906675	Symbol	Y		4906409						
ANR	4906676	Symbol	value		4906409						
ANR	4906677	Symbol	ThresholdArray		4906409						
ANR	4906678	Symbol	ValRange		4906409						
ANR	4906679	Symbol	* X		4906409						
ANR	4906680	Symbol	* * ThresholdArray		4906409						
ANR	4906681	Symbol	* Y		4906409						
ANR	4906682	Symbol	last		4906409						
ANR	4906683	Symbol	level		4906409						
ANR	4906684	Symbol	* choice_X		4906409						
ANR	4906685	Symbol	* choice_Y		4906409						
ANR	4906686	Symbol	ry_sq		4906409						
ANR	4906687	Symbol	* ThresholdArray		4906409						
ANR	4906688	Symbol	* array_width		4906409						
ANR	4906689	Symbol	array_height		4906409						
ANR	4906690	Symbol	MinVal		4906409						
ANR	4906691	Symbol	* * X		4906409						
ANR	4906692	Symbol	* * choice_X		4906409						
ANR	4906693	Symbol	array_width		4906409						
ANR	4906694	Symbol	update_gs_dot		4906409						
ANR	4906695	Symbol	* resolution		4906409						
ANR	4906696	DeclStmt									
ANR	4906697	Decl							void	void *	instance
ANR	4906698	DeclStmt									
ANR	4906699	Decl							GSDLL	GSDLL	gsdll
ANR	4906700	DeclStmt									
ANR	4906701	Decl							BOOL	BOOL	quitnow
ANR	4906702	DeclStmt									
ANR	4906703	Decl							HANDLE	HANDLE	hthread
ANR	4906704	DeclStmt									
ANR	4906705	Decl							DWORD	DWORD	thread_id
ANR	4906706	DeclStmt									
ANR	4906707	Decl							HWND	HWND	hwndtext
ANR	4906708	DeclStmt									
ANR	4906709	Decl							HWND	HWND	hwndforeground
ANR	4906710	DeclStmt									
ANR	4906711	Decl							int	int	loop_ctr
ANR	4906712	DeclStmt									
ANR	4906713	Decl							char	char [ ]	start_string
ANR	4906714	Function	gsdll_stdin	728:0:27742:27856							
ANR	4906715	FunctionDef	"gsdll_stdin (void * instance , char * buf , int len)"		4906714	0					
ANR	4906716	CompoundStatement		730:0:27811:27856	4906714	0					
ANR	4906717	ReturnStatement	"return _read ( fileno ( stdin ) , buf , len ) ;"	731:4:27817:27854	4906714	0	True				
ANR	4906718	CallExpression	"_read ( fileno ( stdin ) , buf , len )"		4906714	0					
ANR	4906719	Callee	_read		4906714	0					
ANR	4906720	Identifier	_read		4906714	0					
ANR	4906721	ArgumentList	fileno ( stdin )		4906714	1					
ANR	4906722	Argument	fileno ( stdin )		4906714	0					
ANR	4906723	CallExpression	fileno ( stdin )		4906714	0					
ANR	4906724	Callee	fileno		4906714	0					
ANR	4906725	Identifier	fileno		4906714	0					
ANR	4906726	ArgumentList	stdin		4906714	1					
ANR	4906727	Argument	stdin		4906714	0					
ANR	4906728	Identifier	stdin		4906714	0					
ANR	4906729	Argument	buf		4906714	1					
ANR	4906730	Identifier	buf		4906714	0					
ANR	4906731	Argument	len		4906714	2					
ANR	4906732	Identifier	len		4906714	0					
ANR	4906733	ReturnType	static int GSDLLCALL		4906714	1					
ANR	4906734	Identifier	gsdll_stdin		4906714	2					
ANR	4906735	ParameterList	"void * instance , char * buf , int len"		4906714	3					
ANR	4906736	Parameter	void * instance	729:12:27775:27788	4906714	0	True				
ANR	4906737	ParameterType	void *		4906714	0					
ANR	4906738	Identifier	instance		4906714	1					
ANR	4906739	Parameter	char * buf	729:28:27791:27799	4906714	1	True				
ANR	4906740	ParameterType	char *		4906714	0					
ANR	4906741	Identifier	buf		4906714	1					
ANR	4906742	Parameter	int len	729:39:27802:27808	4906714	2	True				
ANR	4906743	ParameterType	int		4906714	0					
ANR	4906744	Identifier	len		4906714	1					
ANR	4906745	CFGEntryNode	ENTRY		4906714		True				
ANR	4906746	CFGExitNode	EXIT		4906714		True				
ANR	4906747	Symbol	buf		4906714						
ANR	4906748	Symbol	stdin		4906714						
ANR	4906749	Symbol	instance		4906714						
ANR	4906750	Symbol	len		4906714						
ANR	4906751	Symbol	fileno		4906714						
ANR	4906752	Symbol	_read		4906714						
ANR	4906753	Function	gsdll_stdout	734:0:27859:28006							
ANR	4906754	FunctionDef	"gsdll_stdout (void * instance , const char * str , int len)"		4906753	0					
ANR	4906755	CompoundStatement		736:0:27935:28006	4906753	0					
ANR	4906756	ExpressionStatement	"fwrite ( str , 1 , len , stdout )"	737:4:27941:27968	4906753	0	True				
ANR	4906757	CallExpression	"fwrite ( str , 1 , len , stdout )"		4906753	0					
ANR	4906758	Callee	fwrite		4906753	0					
ANR	4906759	Identifier	fwrite		4906753	0					
ANR	4906760	ArgumentList	str		4906753	1					
ANR	4906761	Argument	str		4906753	0					
ANR	4906762	Identifier	str		4906753	0					
ANR	4906763	Argument	1		4906753	1					
ANR	4906764	PrimaryExpression	1		4906753	0					
ANR	4906765	Argument	len		4906753	2					
ANR	4906766	Identifier	len		4906753	0					
ANR	4906767	Argument	stdout		4906753	3					
ANR	4906768	Identifier	stdout		4906753	0					
ANR	4906769	ExpressionStatement	fflush ( stdout )	738:4:27974:27988	4906753	1	True				
ANR	4906770	CallExpression	fflush ( stdout )		4906753	0					
ANR	4906771	Callee	fflush		4906753	0					
ANR	4906772	Identifier	fflush		4906753	0					
ANR	4906773	ArgumentList	stdout		4906753	1					
ANR	4906774	Argument	stdout		4906753	0					
ANR	4906775	Identifier	stdout		4906753	0					
ANR	4906776	ReturnStatement	return len ;	739:4:27994:28004	4906753	2	True				
ANR	4906777	Identifier	len		4906753	0					
ANR	4906778	ReturnType	static int GSDLLCALL		4906753	1					
ANR	4906779	Identifier	gsdll_stdout		4906753	2					
ANR	4906780	ParameterList	"void * instance , const char * str , int len"		4906753	3					
ANR	4906781	Parameter	void * instance	735:13:27893:27906	4906753	0	True				
ANR	4906782	ParameterType	void *		4906753	0					
ANR	4906783	Identifier	instance		4906753	1					
ANR	4906784	Parameter	const char * str	735:29:27909:27923	4906753	1	True				
ANR	4906785	ParameterType	const char *		4906753	0					
ANR	4906786	Identifier	str		4906753	1					
ANR	4906787	Parameter	int len	735:46:27926:27932	4906753	2	True				
ANR	4906788	ParameterType	int		4906753	0					
ANR	4906789	Identifier	len		4906753	1					
ANR	4906790	CFGEntryNode	ENTRY		4906753		True				
ANR	4906791	CFGExitNode	EXIT		4906753		True				
ANR	4906792	Symbol	str		4906753						
ANR	4906793	Symbol	instance		4906753						
ANR	4906794	Symbol	len		4906753						
ANR	4906795	Symbol	stdout		4906753						
ANR	4906796	Function	gsdll_stderr	742:0:28009:28156							
ANR	4906797	FunctionDef	"gsdll_stderr (void * instance , const char * str , int len)"		4906796	0					
ANR	4906798	CompoundStatement		744:0:28085:28156	4906796	0					
ANR	4906799	ExpressionStatement	"fwrite ( str , 1 , len , stderr )"	745:4:28091:28118	4906796	0	True				
ANR	4906800	CallExpression	"fwrite ( str , 1 , len , stderr )"		4906796	0					
ANR	4906801	Callee	fwrite		4906796	0					
ANR	4906802	Identifier	fwrite		4906796	0					
ANR	4906803	ArgumentList	str		4906796	1					
ANR	4906804	Argument	str		4906796	0					
ANR	4906805	Identifier	str		4906796	0					
ANR	4906806	Argument	1		4906796	1					
ANR	4906807	PrimaryExpression	1		4906796	0					
ANR	4906808	Argument	len		4906796	2					
ANR	4906809	Identifier	len		4906796	0					
ANR	4906810	Argument	stderr		4906796	3					
ANR	4906811	Identifier	stderr		4906796	0					
ANR	4906812	ExpressionStatement	fflush ( stderr )	746:4:28124:28138	4906796	1	True				
ANR	4906813	CallExpression	fflush ( stderr )		4906796	0					
ANR	4906814	Callee	fflush		4906796	0					
ANR	4906815	Identifier	fflush		4906796	0					
ANR	4906816	ArgumentList	stderr		4906796	1					
ANR	4906817	Argument	stderr		4906796	0					
ANR	4906818	Identifier	stderr		4906796	0					
ANR	4906819	ReturnStatement	return len ;	747:4:28144:28154	4906796	2	True				
ANR	4906820	Identifier	len		4906796	0					
ANR	4906821	ReturnType	static int GSDLLCALL		4906796	1					
ANR	4906822	Identifier	gsdll_stderr		4906796	2					
ANR	4906823	ParameterList	"void * instance , const char * str , int len"		4906796	3					
ANR	4906824	Parameter	void * instance	743:13:28043:28056	4906796	0	True				
ANR	4906825	ParameterType	void *		4906796	0					
ANR	4906826	Identifier	instance		4906796	1					
ANR	4906827	Parameter	const char * str	743:29:28059:28073	4906796	1	True				
ANR	4906828	ParameterType	const char *		4906796	0					
ANR	4906829	Identifier	str		4906796	1					
ANR	4906830	Parameter	int len	743:46:28076:28082	4906796	2	True				
ANR	4906831	ParameterType	int		4906796	0					
ANR	4906832	Identifier	len		4906796	1					
ANR	4906833	CFGEntryNode	ENTRY		4906796		True				
ANR	4906834	CFGExitNode	EXIT		4906796		True				
ANR	4906835	Symbol	str		4906796						
ANR	4906836	Symbol	instance		4906796						
ANR	4906837	Symbol	len		4906796						
ANR	4906838	Symbol	stderr		4906796						
ANR	4906839	Function	winthread	768:0:28800:29820							
ANR	4906840	FunctionDef	winthread (void * arg)		4906839	0					
ANR	4906841	CompoundStatement		769:0:28833:29820	4906839	0					
ANR	4906842	IdentifierDeclStatement	MSG msg ;	770:4:28839:28846	4906839	0	True				
ANR	4906843	IdentifierDecl	msg		4906839	0					
ANR	4906844	IdentifierDeclType	MSG		4906839	0					
ANR	4906845	Identifier	msg		4906839	1					
ANR	4906846	ExpressionStatement	thread_id = GetCurrentThreadId ( )	771:4:28852:28884	4906839	1	True				
ANR	4906847	AssignmentExpression	thread_id = GetCurrentThreadId ( )		4906839	0		=			
ANR	4906848	Identifier	thread_id		4906839	0					
ANR	4906849	CallExpression	GetCurrentThreadId ( )		4906839	1					
ANR	4906850	Callee	GetCurrentThreadId		4906839	0					
ANR	4906851	Identifier	GetCurrentThreadId		4906839	0					
ANR	4906852	ArgumentList			4906839	1					
ANR	4906853	ExpressionStatement	hthread = GetCurrentThread ( )	772:4:28890:28918	4906839	2	True				
ANR	4906854	AssignmentExpression	hthread = GetCurrentThread ( )		4906839	0		=			
ANR	4906855	Identifier	hthread		4906839	0					
ANR	4906856	CallExpression	GetCurrentThread ( )		4906839	1					
ANR	4906857	Callee	GetCurrentThread		4906839	0					
ANR	4906858	Identifier	GetCurrentThread		4906839	0					
ANR	4906859	ArgumentList			4906839	1					
ANR	4906860	WhileStatement	"while ( ! quitnow && GetMessage ( & msg , ( HWND ) NULL , 0 , 0 ) )"		4906839	3					
ANR	4906861	Condition	"! quitnow && GetMessage ( & msg , ( HWND ) NULL , 0 , 0 )"	774:11:28932:28977	4906839	0	True				
ANR	4906862	AndExpression	"! quitnow && GetMessage ( & msg , ( HWND ) NULL , 0 , 0 )"		4906839	0		&&			
ANR	4906863	UnaryOperationExpression	! quitnow		4906839	0					
ANR	4906864	UnaryOperator	!		4906839	0					
ANR	4906865	Identifier	quitnow		4906839	1					
ANR	4906866	CallExpression	"GetMessage ( & msg , ( HWND ) NULL , 0 , 0 )"		4906839	1					
ANR	4906867	Callee	GetMessage		4906839	0					
ANR	4906868	Identifier	GetMessage		4906839	0					
ANR	4906869	ArgumentList	& msg		4906839	1					
ANR	4906870	Argument	& msg		4906839	0					
ANR	4906871	UnaryOperationExpression	& msg		4906839	0					
ANR	4906872	UnaryOperator	&		4906839	0					
ANR	4906873	Identifier	msg		4906839	1					
ANR	4906874	Argument	( HWND ) NULL		4906839	1					
ANR	4906875	CastExpression	( HWND ) NULL		4906839	0					
ANR	4906876	CastTarget	HWND		4906839	0					
ANR	4906877	Identifier	NULL		4906839	1					
ANR	4906878	Argument	0		4906839	2					
ANR	4906879	PrimaryExpression	0		4906839	0					
ANR	4906880	Argument	0		4906839	3					
ANR	4906881	PrimaryExpression	0		4906839	0					
ANR	4906882	CompoundStatement		6:59:146:146	4906839	1					
ANR	4906883	SwitchStatement	switch ( msg . message )		4906839	0					
ANR	4906884	Condition	msg . message	775:16:28998:29008	4906839	0	True				
ANR	4906885	MemberAccess	msg . message		4906839	0					
ANR	4906886	Identifier	msg		4906839	0					
ANR	4906887	Identifier	message		4906839	1					
ANR	4906888	CompoundStatement		7:29:177:177	4906839	1					
ANR	4906889	Label	case DISPLAY_OPEN :	776:12:29025:29042	4906839	0	True				
ANR	4906890	Identifier	DISPLAY_OPEN		4906839	0					
ANR	4906891	ExpressionStatement	image_open ( ( IMAGE * ) msg . lParam )	777:16:29060:29091	4906839	1	True				
ANR	4906892	CallExpression	image_open ( ( IMAGE * ) msg . lParam )		4906839	0					
ANR	4906893	Callee	image_open		4906839	0					
ANR	4906894	Identifier	image_open		4906839	0					
ANR	4906895	ArgumentList	( IMAGE * ) msg . lParam		4906839	1					
ANR	4906896	Argument	( IMAGE * ) msg . lParam		4906839	0					
ANR	4906897	CastExpression	( IMAGE * ) msg . lParam		4906839	0					
ANR	4906898	CastTarget	IMAGE *		4906839	0					
ANR	4906899	MemberAccess	msg . lParam		4906839	1					
ANR	4906900	Identifier	msg		4906839	0					
ANR	4906901	Identifier	lParam		4906839	1					
ANR	4906902	BreakStatement	break ;	778:16:29109:29114	4906839	2	True				
ANR	4906903	Label	case DISPLAY_CLOSE :	779:12:29128:29146	4906839	3	True				
ANR	4906904	Identifier	DISPLAY_CLOSE		4906839	0					
ANR	4906905	CompoundStatement		14:20:406:433	4906839	4					
ANR	4906906	IdentifierDeclStatement	IMAGE * img = ( IMAGE * ) msg . lParam ;	781:20:29186:29218	4906839	0	True				
ANR	4906907	IdentifierDecl	* img = ( IMAGE * ) msg . lParam		4906839	0					
ANR	4906908	IdentifierDeclType	IMAGE *		4906839	0					
ANR	4906909	Identifier	img		4906839	1					
ANR	4906910	AssignmentExpression	* img = ( IMAGE * ) msg . lParam		4906839	2		=			
ANR	4906911	Identifier	img		4906839	0					
ANR	4906912	CastExpression	( IMAGE * ) msg . lParam		4906839	1					
ANR	4906913	CastTarget	IMAGE *		4906839	0					
ANR	4906914	MemberAccess	msg . lParam		4906839	1					
ANR	4906915	Identifier	msg		4906839	0					
ANR	4906916	Identifier	lParam		4906839	1					
ANR	4906917	IdentifierDeclStatement	HANDLE hmutex = img -> hmutex ;	782:20:29240:29267	4906839	1	True				
ANR	4906918	IdentifierDecl	hmutex = img -> hmutex		4906839	0					
ANR	4906919	IdentifierDeclType	HANDLE		4906839	0					
ANR	4906920	Identifier	hmutex		4906839	1					
ANR	4906921	AssignmentExpression	hmutex = img -> hmutex		4906839	2		=			
ANR	4906922	Identifier	hmutex		4906839	0					
ANR	4906923	PtrMemberAccess	img -> hmutex		4906839	1					
ANR	4906924	Identifier	img		4906839	0					
ANR	4906925	Identifier	hmutex		4906839	1					
ANR	4906926	ExpressionStatement	image_close ( img )	783:20:29289:29305	4906839	2	True				
ANR	4906927	CallExpression	image_close ( img )		4906839	0					
ANR	4906928	Callee	image_close		4906839	0					
ANR	4906929	Identifier	image_close		4906839	0					
ANR	4906930	ArgumentList	img		4906839	1					
ANR	4906931	Argument	img		4906839	0					
ANR	4906932	Identifier	img		4906839	0					
ANR	4906933	ExpressionStatement	CloseHandle ( hmutex )	784:20:29327:29346	4906839	3	True				
ANR	4906934	CallExpression	CloseHandle ( hmutex )		4906839	0					
ANR	4906935	Callee	CloseHandle		4906839	0					
ANR	4906936	Identifier	CloseHandle		4906839	0					
ANR	4906937	ArgumentList	hmutex		4906839	1					
ANR	4906938	Argument	hmutex		4906839	0					
ANR	4906939	Identifier	hmutex		4906839	0					
ANR	4906940	BreakStatement	break ;	786:16:29382:29387	4906839	5	True				
ANR	4906941	Label	case DISPLAY_SIZE :	787:12:29401:29418	4906839	6	True				
ANR	4906942	Identifier	DISPLAY_SIZE		4906839	0					
ANR	4906943	ExpressionStatement	image_updatesize ( ( IMAGE * ) msg . lParam )	788:16:29436:29473	4906839	7	True				
ANR	4906944	CallExpression	image_updatesize ( ( IMAGE * ) msg . lParam )		4906839	0					
ANR	4906945	Callee	image_updatesize		4906839	0					
ANR	4906946	Identifier	image_updatesize		4906839	0					
ANR	4906947	ArgumentList	( IMAGE * ) msg . lParam		4906839	1					
ANR	4906948	Argument	( IMAGE * ) msg . lParam		4906839	0					
ANR	4906949	CastExpression	( IMAGE * ) msg . lParam		4906839	0					
ANR	4906950	CastTarget	IMAGE *		4906839	0					
ANR	4906951	MemberAccess	msg . lParam		4906839	1					
ANR	4906952	Identifier	msg		4906839	0					
ANR	4906953	Identifier	lParam		4906839	1					
ANR	4906954	BreakStatement	break ;	789:16:29491:29496	4906839	8	True				
ANR	4906955	Label	case DISPLAY_SYNC :	790:12:29510:29527	4906839	9	True				
ANR	4906956	Identifier	DISPLAY_SYNC		4906839	0					
ANR	4906957	ExpressionStatement	image_sync ( ( IMAGE * ) msg . lParam )	791:16:29545:29576	4906839	10	True				
ANR	4906958	CallExpression	image_sync ( ( IMAGE * ) msg . lParam )		4906839	0					
ANR	4906959	Callee	image_sync		4906839	0					
ANR	4906960	Identifier	image_sync		4906839	0					
ANR	4906961	ArgumentList	( IMAGE * ) msg . lParam		4906839	1					
ANR	4906962	Argument	( IMAGE * ) msg . lParam		4906839	0					
ANR	4906963	CastExpression	( IMAGE * ) msg . lParam		4906839	0					
ANR	4906964	CastTarget	IMAGE *		4906839	0					
ANR	4906965	MemberAccess	msg . lParam		4906839	1					
ANR	4906966	Identifier	msg		4906839	0					
ANR	4906967	Identifier	lParam		4906839	1					
ANR	4906968	BreakStatement	break ;	792:16:29594:29599	4906839	11	True				
ANR	4906969	Label	case DISPLAY_PAGE :	793:12:29613:29630	4906839	12	True				
ANR	4906970	Identifier	DISPLAY_PAGE		4906839	0					
ANR	4906971	ExpressionStatement	image_page ( ( IMAGE * ) msg . lParam )	794:16:29648:29679	4906839	13	True				
ANR	4906972	CallExpression	image_page ( ( IMAGE * ) msg . lParam )		4906839	0					
ANR	4906973	Callee	image_page		4906839	0					
ANR	4906974	Identifier	image_page		4906839	0					
ANR	4906975	ArgumentList	( IMAGE * ) msg . lParam		4906839	1					
ANR	4906976	Argument	( IMAGE * ) msg . lParam		4906839	0					
ANR	4906977	CastExpression	( IMAGE * ) msg . lParam		4906839	0					
ANR	4906978	CastTarget	IMAGE *		4906839	0					
ANR	4906979	MemberAccess	msg . lParam		4906839	1					
ANR	4906980	Identifier	msg		4906839	0					
ANR	4906981	Identifier	lParam		4906839	1					
ANR	4906982	BreakStatement	break ;	795:16:29697:29702	4906839	14	True				
ANR	4906983	Label	default :	796:12:29716:29723	4906839	15	True				
ANR	4906984	Identifier	default		4906839	0					
ANR	4906985	ExpressionStatement	TranslateMessage ( & msg )	797:16:29741:29763	4906839	16	True				
ANR	4906986	CallExpression	TranslateMessage ( & msg )		4906839	0					
ANR	4906987	Callee	TranslateMessage		4906839	0					
ANR	4906988	Identifier	TranslateMessage		4906839	0					
ANR	4906989	ArgumentList	& msg		4906839	1					
ANR	4906990	Argument	& msg		4906839	0					
ANR	4906991	UnaryOperationExpression	& msg		4906839	0					
ANR	4906992	UnaryOperator	&		4906839	0					
ANR	4906993	Identifier	msg		4906839	1					
ANR	4906994	ExpressionStatement	DispatchMessage ( & msg )	798:16:29781:29802	4906839	17	True				
ANR	4906995	CallExpression	DispatchMessage ( & msg )		4906839	0					
ANR	4906996	Callee	DispatchMessage		4906839	0					
ANR	4906997	Identifier	DispatchMessage		4906839	0					
ANR	4906998	ArgumentList	& msg		4906839	1					
ANR	4906999	Argument	& msg		4906839	0					
ANR	4907000	UnaryOperationExpression	& msg		4906839	0					
ANR	4907001	UnaryOperator	&		4906839	0					
ANR	4907002	Identifier	msg		4906839	1					
ANR	4907003	ReturnType	static void		4906839	1					
ANR	4907004	Identifier	winthread		4906839	2					
ANR	4907005	ParameterList	void * arg		4906839	3					
ANR	4907006	Parameter	void * arg	768:22:28822:28830	4906839	0	True				
ANR	4907007	ParameterType	void *		4906839	0					
ANR	4907008	Identifier	arg		4906839	1					
ANR	4907009	CFGEntryNode	ENTRY		4906839		True				
ANR	4907010	CFGExitNode	EXIT		4906839		True				
ANR	4907011	Symbol	msg		4906839						
ANR	4907012	Symbol	& msg		4906839						
ANR	4907013	Symbol	quitnow		4906839						
ANR	4907014	Symbol	img		4906839						
ANR	4907015	Symbol	NULL		4906839						
ANR	4907016	Symbol	GetCurrentThreadId		4906839						
ANR	4907017	Symbol	GetCurrentThread		4906839						
ANR	4907018	Symbol	msg . lParam		4906839						
ANR	4907019	Symbol	img -> hmutex		4906839						
ANR	4907020	Symbol	thread_id		4906839						
ANR	4907021	Symbol	* img		4906839						
ANR	4907022	Symbol	msg . message		4906839						
ANR	4907023	Symbol	arg		4906839						
ANR	4907024	Symbol	hmutex		4906839						
ANR	4907025	Symbol	hthread		4906839						
ANR	4907026	Symbol	GetMessage		4906839						
ANR	4907027	Function	display_open	806:0:29895:30264							
ANR	4907028	FunctionDef	"display_open (void * handle , void * device)"		4907027	0					
ANR	4907029	CompoundStatement		807:0:29940:30264	4907027	0					
ANR	4907030	IdentifierDeclStatement	IMAGE * img ;	808:4:29946:29956	4907027	0	True				
ANR	4907031	IdentifierDecl	* img		4907027	0					
ANR	4907032	IdentifierDeclType	IMAGE *		4907027	0					
ANR	4907033	Identifier	img		4907027	1					
ANR	4907034	ExpressionStatement	"fprintf ( stdout , ""display_open(0x%x, 0x%x)\\n"" , handle , device )"	810:4:29983:30044	4907027	1	True				
ANR	4907035	CallExpression	"fprintf ( stdout , ""display_open(0x%x, 0x%x)\\n"" , handle , device )"		4907027	0					
ANR	4907036	Callee	fprintf		4907027	0					
ANR	4907037	Identifier	fprintf		4907027	0					
ANR	4907038	ArgumentList	stdout		4907027	1					
ANR	4907039	Argument	stdout		4907027	0					
ANR	4907040	Identifier	stdout		4907027	0					
ANR	4907041	Argument	"""display_open(0x%x, 0x%x)\\n"""		4907027	1					
ANR	4907042	PrimaryExpression	"""display_open(0x%x, 0x%x)\\n"""		4907027	0					
ANR	4907043	Argument	handle		4907027	2					
ANR	4907044	Identifier	handle		4907027	0					
ANR	4907045	Argument	device		4907027	3					
ANR	4907046	Identifier	device		4907027	0					
ANR	4907047	ExpressionStatement	"img = image_new ( handle , device )"	812:4:30057:30088	4907027	2	True				
ANR	4907048	AssignmentExpression	"img = image_new ( handle , device )"		4907027	0		=			
ANR	4907049	Identifier	img		4907027	0					
ANR	4907050	CallExpression	"image_new ( handle , device )"		4907027	1					
ANR	4907051	Callee	image_new		4907027	0					
ANR	4907052	Identifier	image_new		4907027	0					
ANR	4907053	ArgumentList	handle		4907027	1					
ANR	4907054	Argument	handle		4907027	0					
ANR	4907055	Identifier	handle		4907027	0					
ANR	4907056	Argument	device		4907027	1					
ANR	4907057	Identifier	device		4907027	0					
ANR	4907058	ExpressionStatement	"img -> hmutex = CreateMutex ( NULL , FALSE , NULL )"	813:4:30123:30167	4907027	3	True				
ANR	4907059	AssignmentExpression	"img -> hmutex = CreateMutex ( NULL , FALSE , NULL )"		4907027	0		=			
ANR	4907060	PtrMemberAccess	img -> hmutex		4907027	0					
ANR	4907061	Identifier	img		4907027	0					
ANR	4907062	Identifier	hmutex		4907027	1					
ANR	4907063	CallExpression	"CreateMutex ( NULL , FALSE , NULL )"		4907027	1					
ANR	4907064	Callee	CreateMutex		4907027	0					
ANR	4907065	Identifier	CreateMutex		4907027	0					
ANR	4907066	ArgumentList	NULL		4907027	1					
ANR	4907067	Argument	NULL		4907027	0					
ANR	4907068	Identifier	NULL		4907027	0					
ANR	4907069	Argument	FALSE		4907027	1					
ANR	4907070	Identifier	FALSE		4907027	0					
ANR	4907071	Argument	NULL		4907027	2					
ANR	4907072	Identifier	NULL		4907027	0					
ANR	4907073	IfStatement	if ( img )		4907027	4					
ANR	4907074	Condition	img	814:8:30177:30179	4907027	0	True				
ANR	4907075	Identifier	img		4907027	0					
ANR	4907076	ExpressionStatement	"PostThreadMessage ( thread_id , DISPLAY_OPEN , 0 , ( LPARAM ) img )"	815:8:30190:30248	4907027	1	True				
ANR	4907077	CallExpression	"PostThreadMessage ( thread_id , DISPLAY_OPEN , 0 , ( LPARAM ) img )"		4907027	0					
ANR	4907078	Callee	PostThreadMessage		4907027	0					
ANR	4907079	Identifier	PostThreadMessage		4907027	0					
ANR	4907080	ArgumentList	thread_id		4907027	1					
ANR	4907081	Argument	thread_id		4907027	0					
ANR	4907082	Identifier	thread_id		4907027	0					
ANR	4907083	Argument	DISPLAY_OPEN		4907027	1					
ANR	4907084	Identifier	DISPLAY_OPEN		4907027	0					
ANR	4907085	Argument	0		4907027	2					
ANR	4907086	PrimaryExpression	0		4907027	0					
ANR	4907087	Argument	( LPARAM ) img		4907027	3					
ANR	4907088	CastExpression	( LPARAM ) img		4907027	0					
ANR	4907089	CastTarget	LPARAM		4907027	0					
ANR	4907090	Identifier	img		4907027	1					
ANR	4907091	ReturnStatement	return 0 ;	816:4:30254:30262	4907027	5	True				
ANR	4907092	PrimaryExpression	0		4907027	0					
ANR	4907093	ReturnType	int		4907027	1					
ANR	4907094	Identifier	display_open		4907027	2					
ANR	4907095	ParameterList	"void * handle , void * device"		4907027	3					
ANR	4907096	Parameter	void * handle	806:17:29912:29923	4907027	0	True				
ANR	4907097	ParameterType	void *		4907027	0					
ANR	4907098	Identifier	handle		4907027	1					
ANR	4907099	Parameter	void * device	806:31:29926:29937	4907027	1	True				
ANR	4907100	ParameterType	void *		4907027	0					
ANR	4907101	Identifier	device		4907027	1					
ANR	4907102	CFGEntryNode	ENTRY		4907027		True				
ANR	4907103	CFGExitNode	EXIT		4907027		True				
ANR	4907104	Symbol	img -> hmutex		4907027						
ANR	4907105	Symbol	image_new		4907027						
ANR	4907106	Symbol	DISPLAY_OPEN		4907027						
ANR	4907107	Symbol	img		4907027						
ANR	4907108	Symbol	* img		4907027						
ANR	4907109	Symbol	CreateMutex		4907027						
ANR	4907110	Symbol	thread_id		4907027						
ANR	4907111	Symbol	NULL		4907027						
ANR	4907112	Symbol	stdout		4907027						
ANR	4907113	Symbol	handle		4907027						
ANR	4907114	Symbol	FALSE		4907027						
ANR	4907115	Symbol	device		4907027						
ANR	4907116	Function	display_preclose	819:0:30267:30615							
ANR	4907117	FunctionDef	"display_preclose (void * handle , void * device)"		4907116	0					
ANR	4907118	CompoundStatement		820:0:30316:30615	4907116	0					
ANR	4907119	IdentifierDeclStatement	IMAGE * img ;	821:4:30322:30332	4907116	0	True				
ANR	4907120	IdentifierDecl	* img		4907116	0					
ANR	4907121	IdentifierDeclType	IMAGE *		4907116	0					
ANR	4907122	Identifier	img		4907116	1					
ANR	4907123	ExpressionStatement	"fprintf ( stdout , ""display_preclose(0x%x, 0x%x)\\n"" , handle , device )"	823:4:30359:30424	4907116	1	True				
ANR	4907124	CallExpression	"fprintf ( stdout , ""display_preclose(0x%x, 0x%x)\\n"" , handle , device )"		4907116	0					
ANR	4907125	Callee	fprintf		4907116	0					
ANR	4907126	Identifier	fprintf		4907116	0					
ANR	4907127	ArgumentList	stdout		4907116	1					
ANR	4907128	Argument	stdout		4907116	0					
ANR	4907129	Identifier	stdout		4907116	0					
ANR	4907130	Argument	"""display_preclose(0x%x, 0x%x)\\n"""		4907116	1					
ANR	4907131	PrimaryExpression	"""display_preclose(0x%x, 0x%x)\\n"""		4907116	0					
ANR	4907132	Argument	handle		4907116	2					
ANR	4907133	Identifier	handle		4907116	0					
ANR	4907134	Argument	device		4907116	3					
ANR	4907135	Identifier	device		4907116	0					
ANR	4907136	ExpressionStatement	"img = image_find ( handle , device )"	825:4:30437:30469	4907116	2	True				
ANR	4907137	AssignmentExpression	"img = image_find ( handle , device )"		4907116	0		=			
ANR	4907138	Identifier	img		4907116	0					
ANR	4907139	CallExpression	"image_find ( handle , device )"		4907116	1					
ANR	4907140	Callee	image_find		4907116	0					
ANR	4907141	Identifier	image_find		4907116	0					
ANR	4907142	ArgumentList	handle		4907116	1					
ANR	4907143	Argument	handle		4907116	0					
ANR	4907144	Identifier	handle		4907116	0					
ANR	4907145	Argument	device		4907116	1					
ANR	4907146	Identifier	device		4907116	0					
ANR	4907147	IfStatement	if ( img )		4907116	3					
ANR	4907148	Condition	img	826:8:30479:30481	4907116	0	True				
ANR	4907149	Identifier	img		4907116	0					
ANR	4907150	CompoundStatement		7:13:167:167	4907116	1					
ANR	4907151	ExpressionStatement	"WaitForSingleObject ( img -> hmutex , 120000 )"	828:8:30553:30593	4907116	0	True				
ANR	4907152	CallExpression	"WaitForSingleObject ( img -> hmutex , 120000 )"		4907116	0					
ANR	4907153	Callee	WaitForSingleObject		4907116	0					
ANR	4907154	Identifier	WaitForSingleObject		4907116	0					
ANR	4907155	ArgumentList	img -> hmutex		4907116	1					
ANR	4907156	Argument	img -> hmutex		4907116	0					
ANR	4907157	PtrMemberAccess	img -> hmutex		4907116	0					
ANR	4907158	Identifier	img		4907116	0					
ANR	4907159	Identifier	hmutex		4907116	1					
ANR	4907160	Argument	120000		4907116	1					
ANR	4907161	PrimaryExpression	120000		4907116	0					
ANR	4907162	ReturnStatement	return 0 ;	830:4:30605:30613	4907116	4	True				
ANR	4907163	PrimaryExpression	0		4907116	0					
ANR	4907164	ReturnType	int		4907116	1					
ANR	4907165	Identifier	display_preclose		4907116	2					
ANR	4907166	ParameterList	"void * handle , void * device"		4907116	3					
ANR	4907167	Parameter	void * handle	819:21:30288:30299	4907116	0	True				
ANR	4907168	ParameterType	void *		4907116	0					
ANR	4907169	Identifier	handle		4907116	1					
ANR	4907170	Parameter	void * device	819:35:30302:30313	4907116	1	True				
ANR	4907171	ParameterType	void *		4907116	0					
ANR	4907172	Identifier	device		4907116	1					
ANR	4907173	CFGEntryNode	ENTRY		4907116		True				
ANR	4907174	CFGExitNode	EXIT		4907116		True				
ANR	4907175	Symbol	img -> hmutex		4907116						
ANR	4907176	Symbol	img		4907116						
ANR	4907177	Symbol	* img		4907116						
ANR	4907178	Symbol	stdout		4907116						
ANR	4907179	Symbol	image_find		4907116						
ANR	4907180	Symbol	handle		4907116						
ANR	4907181	Symbol	device		4907116						
ANR	4907182	Function	display_close	833:0:30618:31156							
ANR	4907183	FunctionDef	"display_close (void * handle , void * device)"		4907182	0					
ANR	4907184	CompoundStatement		834:0:30664:31156	4907182	0					
ANR	4907185	IdentifierDeclStatement	IMAGE * img ;	835:4:30670:30680	4907182	0	True				
ANR	4907186	IdentifierDecl	* img		4907182	0					
ANR	4907187	IdentifierDeclType	IMAGE *		4907182	0					
ANR	4907188	Identifier	img		4907182	1					
ANR	4907189	ExpressionStatement	"fprintf ( stdout , ""display_close(0x%x, 0x%x)\\n"" , handle , device )"	837:4:30707:30769	4907182	1	True				
ANR	4907190	CallExpression	"fprintf ( stdout , ""display_close(0x%x, 0x%x)\\n"" , handle , device )"		4907182	0					
ANR	4907191	Callee	fprintf		4907182	0					
ANR	4907192	Identifier	fprintf		4907182	0					
ANR	4907193	ArgumentList	stdout		4907182	1					
ANR	4907194	Argument	stdout		4907182	0					
ANR	4907195	Identifier	stdout		4907182	0					
ANR	4907196	Argument	"""display_close(0x%x, 0x%x)\\n"""		4907182	1					
ANR	4907197	PrimaryExpression	"""display_close(0x%x, 0x%x)\\n"""		4907182	0					
ANR	4907198	Argument	handle		4907182	2					
ANR	4907199	Identifier	handle		4907182	0					
ANR	4907200	Argument	device		4907182	3					
ANR	4907201	Identifier	device		4907182	0					
ANR	4907202	ExpressionStatement	"img = image_find ( handle , device )"	839:4:30782:30814	4907182	2	True				
ANR	4907203	AssignmentExpression	"img = image_find ( handle , device )"		4907182	0		=			
ANR	4907204	Identifier	img		4907182	0					
ANR	4907205	CallExpression	"image_find ( handle , device )"		4907182	1					
ANR	4907206	Callee	image_find		4907182	0					
ANR	4907207	Identifier	image_find		4907182	0					
ANR	4907208	ArgumentList	handle		4907182	1					
ANR	4907209	Argument	handle		4907182	0					
ANR	4907210	Identifier	handle		4907182	0					
ANR	4907211	Argument	device		4907182	1					
ANR	4907212	Identifier	device		4907182	0					
ANR	4907213	IfStatement	if ( img )		4907182	3					
ANR	4907214	Condition	img	840:8:30824:30826	4907182	0	True				
ANR	4907215	Identifier	img		4907182	0					
ANR	4907216	CompoundStatement		7:13:164:164	4907182	1					
ANR	4907217	IfStatement	if ( GetForegroundWindow ( ) == img -> hwnd )		4907182	0					
ANR	4907218	Condition	GetForegroundWindow ( ) == img -> hwnd	842:12:30915:30948	4907182	0	True				
ANR	4907219	EqualityExpression	GetForegroundWindow ( ) == img -> hwnd		4907182	0		==			
ANR	4907220	CallExpression	GetForegroundWindow ( )		4907182	0					
ANR	4907221	Callee	GetForegroundWindow		4907182	0					
ANR	4907222	Identifier	GetForegroundWindow		4907182	0					
ANR	4907223	ArgumentList			4907182	1					
ANR	4907224	PtrMemberAccess	img -> hwnd		4907182	1					
ANR	4907225	Identifier	img		4907182	0					
ANR	4907226	Identifier	hwnd		4907182	1					
ANR	4907227	ExpressionStatement	SetForegroundWindow ( hwndforeground )	843:12:30963:30998	4907182	1	True				
ANR	4907228	CallExpression	SetForegroundWindow ( hwndforeground )		4907182	0					
ANR	4907229	Callee	SetForegroundWindow		4907182	0					
ANR	4907230	Identifier	SetForegroundWindow		4907182	0					
ANR	4907231	ArgumentList	hwndforeground		4907182	1					
ANR	4907232	Argument	hwndforeground		4907182	0					
ANR	4907233	Identifier	hwndforeground		4907182	0					
ANR	4907234	ExpressionStatement	image_delete ( img )	845:8:31009:31026	4907182	1	True				
ANR	4907235	CallExpression	image_delete ( img )		4907182	0					
ANR	4907236	Callee	image_delete		4907182	0					
ANR	4907237	Identifier	image_delete		4907182	0					
ANR	4907238	ArgumentList	img		4907182	1					
ANR	4907239	Argument	img		4907182	0					
ANR	4907240	Identifier	img		4907182	0					
ANR	4907241	ExpressionStatement	"PostThreadMessage ( thread_id , DISPLAY_CLOSE , 0 , ( LPARAM ) img )"	846:8:31075:31134	4907182	2	True				
ANR	4907242	CallExpression	"PostThreadMessage ( thread_id , DISPLAY_CLOSE , 0 , ( LPARAM ) img )"		4907182	0					
ANR	4907243	Callee	PostThreadMessage		4907182	0					
ANR	4907244	Identifier	PostThreadMessage		4907182	0					
ANR	4907245	ArgumentList	thread_id		4907182	1					
ANR	4907246	Argument	thread_id		4907182	0					
ANR	4907247	Identifier	thread_id		4907182	0					
ANR	4907248	Argument	DISPLAY_CLOSE		4907182	1					
ANR	4907249	Identifier	DISPLAY_CLOSE		4907182	0					
ANR	4907250	Argument	0		4907182	2					
ANR	4907251	PrimaryExpression	0		4907182	0					
ANR	4907252	Argument	( LPARAM ) img		4907182	3					
ANR	4907253	CastExpression	( LPARAM ) img		4907182	0					
ANR	4907254	CastTarget	LPARAM		4907182	0					
ANR	4907255	Identifier	img		4907182	1					
ANR	4907256	ReturnStatement	return 0 ;	848:4:31146:31154	4907182	4	True				
ANR	4907257	PrimaryExpression	0		4907182	0					
ANR	4907258	ReturnType	int		4907182	1					
ANR	4907259	Identifier	display_close		4907182	2					
ANR	4907260	ParameterList	"void * handle , void * device"		4907182	3					
ANR	4907261	Parameter	void * handle	833:18:30636:30647	4907182	0	True				
ANR	4907262	ParameterType	void *		4907182	0					
ANR	4907263	Identifier	handle		4907182	1					
ANR	4907264	Parameter	void * device	833:32:30650:30661	4907182	1	True				
ANR	4907265	ParameterType	void *		4907182	0					
ANR	4907266	Identifier	device		4907182	1					
ANR	4907267	CFGEntryNode	ENTRY		4907182		True				
ANR	4907268	CFGExitNode	EXIT		4907182		True				
ANR	4907269	Symbol	img		4907182						
ANR	4907270	Symbol	* img		4907182						
ANR	4907271	Symbol	thread_id		4907182						
ANR	4907272	Symbol	stdout		4907182						
ANR	4907273	Symbol	image_find		4907182						
ANR	4907274	Symbol	handle		4907182						
ANR	4907275	Symbol	DISPLAY_CLOSE		4907182						
ANR	4907276	Symbol	device		4907182						
ANR	4907277	Symbol	GetForegroundWindow		4907182						
ANR	4907278	Symbol	hwndforeground		4907182						
ANR	4907279	Symbol	img -> hwnd		4907182						
ANR	4907280	Function	display_presize	851:0:31159:31628							
ANR	4907281	FunctionDef	"display_presize (void * handle , void * device , int width , int height , int raster , unsigned int format)"		4907280	0					
ANR	4907282	CompoundStatement		853:0:31271:31628	4907280	0					
ANR	4907283	IdentifierDeclStatement	IMAGE * img ;	854:4:31277:31287	4907280	0	True				
ANR	4907284	IdentifierDecl	* img		4907280	0					
ANR	4907285	IdentifierDeclType	IMAGE *		4907280	0					
ANR	4907286	Identifier	img		4907280	1					
ANR	4907287	ExpressionStatement	"fprintf ( stdout , ""display_presize(0x%x 0x%x, %d, %d, %d, %d, %ld)\\n"" , handle , device , width , height , raster , format )"	856:4:31314:31437	4907280	1	True				
ANR	4907288	CallExpression	"fprintf ( stdout , ""display_presize(0x%x 0x%x, %d, %d, %d, %d, %ld)\\n"" , handle , device , width , height , raster , format )"		4907280	0					
ANR	4907289	Callee	fprintf		4907280	0					
ANR	4907290	Identifier	fprintf		4907280	0					
ANR	4907291	ArgumentList	stdout		4907280	1					
ANR	4907292	Argument	stdout		4907280	0					
ANR	4907293	Identifier	stdout		4907280	0					
ANR	4907294	Argument	"""display_presize(0x%x 0x%x, %d, %d, %d, %d, %ld)\\n"""		4907280	1					
ANR	4907295	PrimaryExpression	"""display_presize(0x%x 0x%x, %d, %d, %d, %d, %ld)\\n"""		4907280	0					
ANR	4907296	Argument	handle		4907280	2					
ANR	4907297	Identifier	handle		4907280	0					
ANR	4907298	Argument	device		4907280	3					
ANR	4907299	Identifier	device		4907280	0					
ANR	4907300	Argument	width		4907280	4					
ANR	4907301	Identifier	width		4907280	0					
ANR	4907302	Argument	height		4907280	5					
ANR	4907303	Identifier	height		4907280	0					
ANR	4907304	Argument	raster		4907280	6					
ANR	4907305	Identifier	raster		4907280	0					
ANR	4907306	Argument	format		4907280	7					
ANR	4907307	Identifier	format		4907280	0					
ANR	4907308	ExpressionStatement	"img = image_find ( handle , device )"	859:4:31450:31482	4907280	2	True				
ANR	4907309	AssignmentExpression	"img = image_find ( handle , device )"		4907280	0		=			
ANR	4907310	Identifier	img		4907280	0					
ANR	4907311	CallExpression	"image_find ( handle , device )"		4907280	1					
ANR	4907312	Callee	image_find		4907280	0					
ANR	4907313	Identifier	image_find		4907280	0					
ANR	4907314	ArgumentList	handle		4907280	1					
ANR	4907315	Argument	handle		4907280	0					
ANR	4907316	Identifier	handle		4907280	0					
ANR	4907317	Argument	device		4907280	1					
ANR	4907318	Identifier	device		4907280	0					
ANR	4907319	IfStatement	if ( img )		4907280	3					
ANR	4907320	Condition	img	860:8:31492:31494	4907280	0	True				
ANR	4907321	Identifier	img		4907280	0					
ANR	4907322	CompoundStatement		8:13:225:225	4907280	1					
ANR	4907323	ExpressionStatement	"WaitForSingleObject ( img -> hmutex , 120000 )"	862:8:31566:31606	4907280	0	True				
ANR	4907324	CallExpression	"WaitForSingleObject ( img -> hmutex , 120000 )"		4907280	0					
ANR	4907325	Callee	WaitForSingleObject		4907280	0					
ANR	4907326	Identifier	WaitForSingleObject		4907280	0					
ANR	4907327	ArgumentList	img -> hmutex		4907280	1					
ANR	4907328	Argument	img -> hmutex		4907280	0					
ANR	4907329	PtrMemberAccess	img -> hmutex		4907280	0					
ANR	4907330	Identifier	img		4907280	0					
ANR	4907331	Identifier	hmutex		4907280	1					
ANR	4907332	Argument	120000		4907280	1					
ANR	4907333	PrimaryExpression	120000		4907280	0					
ANR	4907334	ReturnStatement	return 0 ;	864:4:31618:31626	4907280	4	True				
ANR	4907335	PrimaryExpression	0		4907280	0					
ANR	4907336	ReturnType	int		4907280	1					
ANR	4907337	Identifier	display_presize		4907280	2					
ANR	4907338	ParameterList	"void * handle , void * device , int width , int height , int raster , unsigned int format"		4907280	3					
ANR	4907339	Parameter	void * handle	851:20:31179:31190	4907280	0	True				
ANR	4907340	ParameterType	void *		4907280	0					
ANR	4907341	Identifier	handle		4907280	1					
ANR	4907342	Parameter	void * device	851:34:31193:31204	4907280	1	True				
ANR	4907343	ParameterType	void *		4907280	0					
ANR	4907344	Identifier	device		4907280	1					
ANR	4907345	Parameter	int width	851:48:31207:31215	4907280	2	True				
ANR	4907346	ParameterType	int		4907280	0					
ANR	4907347	Identifier	width		4907280	1					
ANR	4907348	Parameter	int height	851:59:31218:31227	4907280	3	True				
ANR	4907349	ParameterType	int		4907280	0					
ANR	4907350	Identifier	height		4907280	1					
ANR	4907351	Parameter	int raster	852:8:31238:31247	4907280	4	True				
ANR	4907352	ParameterType	int		4907280	0					
ANR	4907353	Identifier	raster		4907280	1					
ANR	4907354	Parameter	unsigned int format	852:20:31250:31268	4907280	5	True				
ANR	4907355	ParameterType	unsigned int		4907280	0					
ANR	4907356	Identifier	format		4907280	1					
ANR	4907357	CFGEntryNode	ENTRY		4907280		True				
ANR	4907358	CFGExitNode	EXIT		4907280		True				
ANR	4907359	Symbol	img -> hmutex		4907280						
ANR	4907360	Symbol	img		4907280						
ANR	4907361	Symbol	* img		4907280						
ANR	4907362	Symbol	stdout		4907280						
ANR	4907363	Symbol	image_find		4907280						
ANR	4907364	Symbol	width		4907280						
ANR	4907365	Symbol	raster		4907280						
ANR	4907366	Symbol	format		4907280						
ANR	4907367	Symbol	handle		4907280						
ANR	4907368	Symbol	device		4907280						
ANR	4907369	Symbol	height		4907280						
ANR	4907370	Function	display_size	867:0:31631:32253							
ANR	4907371	FunctionDef	"display_size (void * handle , void * device , int width , int height , int raster , unsigned int format , unsigned char * pimage)"		4907370	0					
ANR	4907372	CompoundStatement		869:0:31763:32253	4907370	0					
ANR	4907373	IdentifierDeclStatement	IMAGE * img ;	870:4:31769:31779	4907370	0	True				
ANR	4907374	IdentifierDecl	* img		4907370	0					
ANR	4907375	IdentifierDeclType	IMAGE *		4907370	0					
ANR	4907376	Identifier	img		4907370	1					
ANR	4907377	ExpressionStatement	"fprintf ( stdout , ""display_size(0x%x 0x%x, %d, %d, %d, %d, %ld, 0x%x)\\n"" , handle , device , width , height , raster , format , pimage )"	872:4:31806:31940	4907370	1	True				
ANR	4907378	CallExpression	"fprintf ( stdout , ""display_size(0x%x 0x%x, %d, %d, %d, %d, %ld, 0x%x)\\n"" , handle , device , width , height , raster , format , pimage )"		4907370	0					
ANR	4907379	Callee	fprintf		4907370	0					
ANR	4907380	Identifier	fprintf		4907370	0					
ANR	4907381	ArgumentList	stdout		4907370	1					
ANR	4907382	Argument	stdout		4907370	0					
ANR	4907383	Identifier	stdout		4907370	0					
ANR	4907384	Argument	"""display_size(0x%x 0x%x, %d, %d, %d, %d, %ld, 0x%x)\\n"""		4907370	1					
ANR	4907385	PrimaryExpression	"""display_size(0x%x 0x%x, %d, %d, %d, %d, %ld, 0x%x)\\n"""		4907370	0					
ANR	4907386	Argument	handle		4907370	2					
ANR	4907387	Identifier	handle		4907370	0					
ANR	4907388	Argument	device		4907370	3					
ANR	4907389	Identifier	device		4907370	0					
ANR	4907390	Argument	width		4907370	4					
ANR	4907391	Identifier	width		4907370	0					
ANR	4907392	Argument	height		4907370	5					
ANR	4907393	Identifier	height		4907370	0					
ANR	4907394	Argument	raster		4907370	6					
ANR	4907395	Identifier	raster		4907370	0					
ANR	4907396	Argument	format		4907370	7					
ANR	4907397	Identifier	format		4907370	0					
ANR	4907398	Argument	pimage		4907370	8					
ANR	4907399	Identifier	pimage		4907370	0					
ANR	4907400	ExpressionStatement	"img = image_find ( handle , device )"	875:4:31953:31985	4907370	2	True				
ANR	4907401	AssignmentExpression	"img = image_find ( handle , device )"		4907370	0		=			
ANR	4907402	Identifier	img		4907370	0					
ANR	4907403	CallExpression	"image_find ( handle , device )"		4907370	1					
ANR	4907404	Callee	image_find		4907370	0					
ANR	4907405	Identifier	image_find		4907370	0					
ANR	4907406	ArgumentList	handle		4907370	1					
ANR	4907407	Argument	handle		4907370	0					
ANR	4907408	Identifier	handle		4907370	0					
ANR	4907409	Argument	device		4907370	1					
ANR	4907410	Identifier	device		4907370	0					
ANR	4907411	IfStatement	if ( img )		4907370	3					
ANR	4907412	Condition	img	876:8:31995:31997	4907370	0	True				
ANR	4907413	Identifier	img		4907370	0					
ANR	4907414	CompoundStatement		8:13:236:236	4907370	1					
ANR	4907415	ExpressionStatement	"image_size ( img , width , height , raster , format , pimage )"	877:8:32010:32064	4907370	0	True				
ANR	4907416	CallExpression	"image_size ( img , width , height , raster , format , pimage )"		4907370	0					
ANR	4907417	Callee	image_size		4907370	0					
ANR	4907418	Identifier	image_size		4907370	0					
ANR	4907419	ArgumentList	img		4907370	1					
ANR	4907420	Argument	img		4907370	0					
ANR	4907421	Identifier	img		4907370	0					
ANR	4907422	Argument	width		4907370	1					
ANR	4907423	Identifier	width		4907370	0					
ANR	4907424	Argument	height		4907370	2					
ANR	4907425	Identifier	height		4907370	0					
ANR	4907426	Argument	raster		4907370	3					
ANR	4907427	Identifier	raster		4907370	0					
ANR	4907428	Argument	format		4907370	4					
ANR	4907429	Identifier	format		4907370	0					
ANR	4907430	Argument	pimage		4907370	5					
ANR	4907431	Identifier	pimage		4907370	0					
ANR	4907432	ExpressionStatement	ReleaseMutex ( img -> hmutex )	879:8:32138:32163	4907370	1	True				
ANR	4907433	CallExpression	ReleaseMutex ( img -> hmutex )		4907370	0					
ANR	4907434	Callee	ReleaseMutex		4907370	0					
ANR	4907435	Identifier	ReleaseMutex		4907370	0					
ANR	4907436	ArgumentList	img -> hmutex		4907370	1					
ANR	4907437	Argument	img -> hmutex		4907370	0					
ANR	4907438	PtrMemberAccess	img -> hmutex		4907370	0					
ANR	4907439	Identifier	img		4907370	0					
ANR	4907440	Identifier	hmutex		4907370	1					
ANR	4907441	ExpressionStatement	"PostThreadMessage ( thread_id , DISPLAY_SIZE , 0 , ( LPARAM ) img )"	880:8:32173:32231	4907370	2	True				
ANR	4907442	CallExpression	"PostThreadMessage ( thread_id , DISPLAY_SIZE , 0 , ( LPARAM ) img )"		4907370	0					
ANR	4907443	Callee	PostThreadMessage		4907370	0					
ANR	4907444	Identifier	PostThreadMessage		4907370	0					
ANR	4907445	ArgumentList	thread_id		4907370	1					
ANR	4907446	Argument	thread_id		4907370	0					
ANR	4907447	Identifier	thread_id		4907370	0					
ANR	4907448	Argument	DISPLAY_SIZE		4907370	1					
ANR	4907449	Identifier	DISPLAY_SIZE		4907370	0					
ANR	4907450	Argument	0		4907370	2					
ANR	4907451	PrimaryExpression	0		4907370	0					
ANR	4907452	Argument	( LPARAM ) img		4907370	3					
ANR	4907453	CastExpression	( LPARAM ) img		4907370	0					
ANR	4907454	CastTarget	LPARAM		4907370	0					
ANR	4907455	Identifier	img		4907370	1					
ANR	4907456	ReturnStatement	return 0 ;	882:4:32243:32251	4907370	4	True				
ANR	4907457	PrimaryExpression	0		4907370	0					
ANR	4907458	ReturnType	int		4907370	1					
ANR	4907459	Identifier	display_size		4907370	2					
ANR	4907460	ParameterList	"void * handle , void * device , int width , int height , int raster , unsigned int format , unsigned char * pimage"		4907370	3					
ANR	4907461	Parameter	void * handle	867:17:31648:31659	4907370	0	True				
ANR	4907462	ParameterType	void *		4907370	0					
ANR	4907463	Identifier	handle		4907370	1					
ANR	4907464	Parameter	void * device	867:31:31662:31673	4907370	1	True				
ANR	4907465	ParameterType	void *		4907370	0					
ANR	4907466	Identifier	device		4907370	1					
ANR	4907467	Parameter	int width	867:45:31676:31684	4907370	2	True				
ANR	4907468	ParameterType	int		4907370	0					
ANR	4907469	Identifier	width		4907370	1					
ANR	4907470	Parameter	int height	867:56:31687:31696	4907370	3	True				
ANR	4907471	ParameterType	int		4907370	0					
ANR	4907472	Identifier	height		4907370	1					
ANR	4907473	Parameter	int raster	868:8:31707:31716	4907370	4	True				
ANR	4907474	ParameterType	int		4907370	0					
ANR	4907475	Identifier	raster		4907370	1					
ANR	4907476	Parameter	unsigned int format	868:20:31719:31737	4907370	5	True				
ANR	4907477	ParameterType	unsigned int		4907370	0					
ANR	4907478	Identifier	format		4907370	1					
ANR	4907479	Parameter	unsigned char * pimage	868:41:31740:31760	4907370	6	True				
ANR	4907480	ParameterType	unsigned char *		4907370	0					
ANR	4907481	Identifier	pimage		4907370	1					
ANR	4907482	CFGEntryNode	ENTRY		4907370		True				
ANR	4907483	CFGExitNode	EXIT		4907370		True				
ANR	4907484	Symbol	img		4907370						
ANR	4907485	Symbol	stdout		4907370						
ANR	4907486	Symbol	image_find		4907370						
ANR	4907487	Symbol	raster		4907370						
ANR	4907488	Symbol	format		4907370						
ANR	4907489	Symbol	handle		4907370						
ANR	4907490	Symbol	img -> hmutex		4907370						
ANR	4907491	Symbol	pimage		4907370						
ANR	4907492	Symbol	* img		4907370						
ANR	4907493	Symbol	thread_id		4907370						
ANR	4907494	Symbol	DISPLAY_SIZE		4907370						
ANR	4907495	Symbol	width		4907370						
ANR	4907496	Symbol	device		4907370						
ANR	4907497	Symbol	height		4907370						
ANR	4907498	Function	display_sync	885:0:32256:32547							
ANR	4907499	FunctionDef	"display_sync (void * handle , void * device)"		4907498	0					
ANR	4907500	CompoundStatement		886:0:32301:32547	4907498	0					
ANR	4907501	IdentifierDeclStatement	IMAGE * img ;	887:4:32307:32317	4907498	0	True				
ANR	4907502	IdentifierDecl	* img		4907498	0					
ANR	4907503	IdentifierDeclType	IMAGE *		4907498	0					
ANR	4907504	Identifier	img		4907498	1					
ANR	4907505	ExpressionStatement	"fprintf ( stdout , ""display_sync(0x%x, 0x%x)\\n"" , handle , device )"	889:4:32344:32405	4907498	1	True				
ANR	4907506	CallExpression	"fprintf ( stdout , ""display_sync(0x%x, 0x%x)\\n"" , handle , device )"		4907498	0					
ANR	4907507	Callee	fprintf		4907498	0					
ANR	4907508	Identifier	fprintf		4907498	0					
ANR	4907509	ArgumentList	stdout		4907498	1					
ANR	4907510	Argument	stdout		4907498	0					
ANR	4907511	Identifier	stdout		4907498	0					
ANR	4907512	Argument	"""display_sync(0x%x, 0x%x)\\n"""		4907498	1					
ANR	4907513	PrimaryExpression	"""display_sync(0x%x, 0x%x)\\n"""		4907498	0					
ANR	4907514	Argument	handle		4907498	2					
ANR	4907515	Identifier	handle		4907498	0					
ANR	4907516	Argument	device		4907498	3					
ANR	4907517	Identifier	device		4907498	0					
ANR	4907518	ExpressionStatement	"img = image_find ( handle , device )"	891:4:32418:32450	4907498	2	True				
ANR	4907519	AssignmentExpression	"img = image_find ( handle , device )"		4907498	0		=			
ANR	4907520	Identifier	img		4907498	0					
ANR	4907521	CallExpression	"image_find ( handle , device )"		4907498	1					
ANR	4907522	Callee	image_find		4907498	0					
ANR	4907523	Identifier	image_find		4907498	0					
ANR	4907524	ArgumentList	handle		4907498	1					
ANR	4907525	Argument	handle		4907498	0					
ANR	4907526	Identifier	handle		4907498	0					
ANR	4907527	Argument	device		4907498	1					
ANR	4907528	Identifier	device		4907498	0					
ANR	4907529	IfStatement	if ( img )		4907498	3					
ANR	4907530	Condition	img	892:8:32460:32462	4907498	0	True				
ANR	4907531	Identifier	img		4907498	0					
ANR	4907532	ExpressionStatement	"PostThreadMessage ( thread_id , DISPLAY_SYNC , 0 , ( LPARAM ) img )"	893:8:32473:32531	4907498	1	True				
ANR	4907533	CallExpression	"PostThreadMessage ( thread_id , DISPLAY_SYNC , 0 , ( LPARAM ) img )"		4907498	0					
ANR	4907534	Callee	PostThreadMessage		4907498	0					
ANR	4907535	Identifier	PostThreadMessage		4907498	0					
ANR	4907536	ArgumentList	thread_id		4907498	1					
ANR	4907537	Argument	thread_id		4907498	0					
ANR	4907538	Identifier	thread_id		4907498	0					
ANR	4907539	Argument	DISPLAY_SYNC		4907498	1					
ANR	4907540	Identifier	DISPLAY_SYNC		4907498	0					
ANR	4907541	Argument	0		4907498	2					
ANR	4907542	PrimaryExpression	0		4907498	0					
ANR	4907543	Argument	( LPARAM ) img		4907498	3					
ANR	4907544	CastExpression	( LPARAM ) img		4907498	0					
ANR	4907545	CastTarget	LPARAM		4907498	0					
ANR	4907546	Identifier	img		4907498	1					
ANR	4907547	ReturnStatement	return 0 ;	894:4:32537:32545	4907498	4	True				
ANR	4907548	PrimaryExpression	0		4907498	0					
ANR	4907549	ReturnType	int		4907498	1					
ANR	4907550	Identifier	display_sync		4907498	2					
ANR	4907551	ParameterList	"void * handle , void * device"		4907498	3					
ANR	4907552	Parameter	void * handle	885:17:32273:32284	4907498	0	True				
ANR	4907553	ParameterType	void *		4907498	0					
ANR	4907554	Identifier	handle		4907498	1					
ANR	4907555	Parameter	void * device	885:31:32287:32298	4907498	1	True				
ANR	4907556	ParameterType	void *		4907498	0					
ANR	4907557	Identifier	device		4907498	1					
ANR	4907558	CFGEntryNode	ENTRY		4907498		True				
ANR	4907559	CFGExitNode	EXIT		4907498		True				
ANR	4907560	Symbol	DISPLAY_SYNC		4907498						
ANR	4907561	Symbol	img		4907498						
ANR	4907562	Symbol	thread_id		4907498						
ANR	4907563	Symbol	stdout		4907498						
ANR	4907564	Symbol	image_find		4907498						
ANR	4907565	Symbol	handle		4907498						
ANR	4907566	Symbol	device		4907498						
ANR	4907567	Function	display_page	897:0:32550:32908							
ANR	4907568	FunctionDef	"display_page (void * handle , void * device , int copies , int flush)"		4907567	0					
ANR	4907569	CompoundStatement		898:0:32618:32908	4907567	0					
ANR	4907570	IdentifierDeclStatement	IMAGE * img ;	899:4:32624:32634	4907567	0	True				
ANR	4907571	IdentifierDecl	* img		4907567	0					
ANR	4907572	IdentifierDeclType	IMAGE *		4907567	0					
ANR	4907573	Identifier	img		4907567	1					
ANR	4907574	ExpressionStatement	"fprintf ( stdout , ""display_page(0x%x, 0x%x, copies=%d, flush=%d)\\n"" , handle , device , copies , flush )"	901:4:32661:32766	4907567	1	True				
ANR	4907575	CallExpression	"fprintf ( stdout , ""display_page(0x%x, 0x%x, copies=%d, flush=%d)\\n"" , handle , device , copies , flush )"		4907567	0					
ANR	4907576	Callee	fprintf		4907567	0					
ANR	4907577	Identifier	fprintf		4907567	0					
ANR	4907578	ArgumentList	stdout		4907567	1					
ANR	4907579	Argument	stdout		4907567	0					
ANR	4907580	Identifier	stdout		4907567	0					
ANR	4907581	Argument	"""display_page(0x%x, 0x%x, copies=%d, flush=%d)\\n"""		4907567	1					
ANR	4907582	PrimaryExpression	"""display_page(0x%x, 0x%x, copies=%d, flush=%d)\\n"""		4907567	0					
ANR	4907583	Argument	handle		4907567	2					
ANR	4907584	Identifier	handle		4907567	0					
ANR	4907585	Argument	device		4907567	3					
ANR	4907586	Identifier	device		4907567	0					
ANR	4907587	Argument	copies		4907567	4					
ANR	4907588	Identifier	copies		4907567	0					
ANR	4907589	Argument	flush		4907567	5					
ANR	4907590	Identifier	flush		4907567	0					
ANR	4907591	ExpressionStatement	"img = image_find ( handle , device )"	904:4:32779:32811	4907567	2	True				
ANR	4907592	AssignmentExpression	"img = image_find ( handle , device )"		4907567	0		=			
ANR	4907593	Identifier	img		4907567	0					
ANR	4907594	CallExpression	"image_find ( handle , device )"		4907567	1					
ANR	4907595	Callee	image_find		4907567	0					
ANR	4907596	Identifier	image_find		4907567	0					
ANR	4907597	ArgumentList	handle		4907567	1					
ANR	4907598	Argument	handle		4907567	0					
ANR	4907599	Identifier	handle		4907567	0					
ANR	4907600	Argument	device		4907567	1					
ANR	4907601	Identifier	device		4907567	0					
ANR	4907602	IfStatement	if ( img )		4907567	3					
ANR	4907603	Condition	img	905:8:32821:32823	4907567	0	True				
ANR	4907604	Identifier	img		4907567	0					
ANR	4907605	ExpressionStatement	"PostThreadMessage ( thread_id , DISPLAY_PAGE , 0 , ( LPARAM ) img )"	906:8:32834:32892	4907567	1	True				
ANR	4907606	CallExpression	"PostThreadMessage ( thread_id , DISPLAY_PAGE , 0 , ( LPARAM ) img )"		4907567	0					
ANR	4907607	Callee	PostThreadMessage		4907567	0					
ANR	4907608	Identifier	PostThreadMessage		4907567	0					
ANR	4907609	ArgumentList	thread_id		4907567	1					
ANR	4907610	Argument	thread_id		4907567	0					
ANR	4907611	Identifier	thread_id		4907567	0					
ANR	4907612	Argument	DISPLAY_PAGE		4907567	1					
ANR	4907613	Identifier	DISPLAY_PAGE		4907567	0					
ANR	4907614	Argument	0		4907567	2					
ANR	4907615	PrimaryExpression	0		4907567	0					
ANR	4907616	Argument	( LPARAM ) img		4907567	3					
ANR	4907617	CastExpression	( LPARAM ) img		4907567	0					
ANR	4907618	CastTarget	LPARAM		4907567	0					
ANR	4907619	Identifier	img		4907567	1					
ANR	4907620	ReturnStatement	return 0 ;	907:4:32898:32906	4907567	4	True				
ANR	4907621	PrimaryExpression	0		4907567	0					
ANR	4907622	ReturnType	int		4907567	1					
ANR	4907623	Identifier	display_page		4907567	2					
ANR	4907624	ParameterList	"void * handle , void * device , int copies , int flush"		4907567	3					
ANR	4907625	Parameter	void * handle	897:17:32567:32578	4907567	0	True				
ANR	4907626	ParameterType	void *		4907567	0					
ANR	4907627	Identifier	handle		4907567	1					
ANR	4907628	Parameter	void * device	897:31:32581:32592	4907567	1	True				
ANR	4907629	ParameterType	void *		4907567	0					
ANR	4907630	Identifier	device		4907567	1					
ANR	4907631	Parameter	int copies	897:45:32595:32604	4907567	2	True				
ANR	4907632	ParameterType	int		4907567	0					
ANR	4907633	Identifier	copies		4907567	1					
ANR	4907634	Parameter	int flush	897:57:32607:32615	4907567	3	True				
ANR	4907635	ParameterType	int		4907567	0					
ANR	4907636	Identifier	flush		4907567	1					
ANR	4907637	CFGEntryNode	ENTRY		4907567		True				
ANR	4907638	CFGExitNode	EXIT		4907567		True				
ANR	4907639	Symbol	img		4907567						
ANR	4907640	Symbol	thread_id		4907567						
ANR	4907641	Symbol	copies		4907567						
ANR	4907642	Symbol	flush		4907567						
ANR	4907643	Symbol	stdout		4907567						
ANR	4907644	Symbol	image_find		4907567						
ANR	4907645	Symbol	handle		4907567						
ANR	4907646	Symbol	DISPLAY_PAGE		4907567						
ANR	4907647	Symbol	device		4907567						
ANR	4907648	Function	display_update	910:0:32911:33203							
ANR	4907649	FunctionDef	"display_update (void * handle , void * device , int x , int y , int w , int h)"		4907648	0					
ANR	4907650	CompoundStatement		912:0:32990:33203	4907648	0					
ANR	4907651	ReturnStatement	return 0 ;	917:4:33193:33201	4907648	0	True				
ANR	4907652	PrimaryExpression	0		4907648	0					
ANR	4907653	ReturnType	int		4907648	1					
ANR	4907654	Identifier	display_update		4907648	2					
ANR	4907655	ParameterList	"void * handle , void * device , int x , int y , int w , int h"		4907648	3					
ANR	4907656	Parameter	void * handle	910:19:32930:32941	4907648	0	True				
ANR	4907657	ParameterType	void *		4907648	0					
ANR	4907658	Identifier	handle		4907648	1					
ANR	4907659	Parameter	void * device	910:33:32944:32955	4907648	1	True				
ANR	4907660	ParameterType	void *		4907648	0					
ANR	4907661	Identifier	device		4907648	1					
ANR	4907662	Parameter	int x	911:4:32962:32966	4907648	2	True				
ANR	4907663	ParameterType	int		4907648	0					
ANR	4907664	Identifier	x		4907648	1					
ANR	4907665	Parameter	int y	911:11:32969:32973	4907648	3	True				
ANR	4907666	ParameterType	int		4907648	0					
ANR	4907667	Identifier	y		4907648	1					
ANR	4907668	Parameter	int w	911:18:32976:32980	4907648	4	True				
ANR	4907669	ParameterType	int		4907648	0					
ANR	4907670	Identifier	w		4907648	1					
ANR	4907671	Parameter	int h	911:25:32983:32987	4907648	5	True				
ANR	4907672	ParameterType	int		4907648	0					
ANR	4907673	Identifier	h		4907648	1					
ANR	4907674	CFGEntryNode	ENTRY		4907648		True				
ANR	4907675	CFGExitNode	EXIT		4907648		True				
ANR	4907676	Symbol	w		4907648						
ANR	4907677	Symbol	x		4907648						
ANR	4907678	Symbol	h		4907648						
ANR	4907679	Symbol	y		4907648						
ANR	4907680	Symbol	handle		4907648						
ANR	4907681	Symbol	device		4907648						
ANR	4907682	Function	display_memalloc	925:0:33338:33662							
ANR	4907683	FunctionDef	"display_memalloc (void * handle , void * device , unsigned long size)"		4907682	0					
ANR	4907684	CompoundStatement		926:0:33409:33662	4907682	0					
ANR	4907685	IdentifierDeclStatement	void * mem ;	927:4:33415:33424	4907682	0	True				
ANR	4907686	IdentifierDecl	* mem		4907682	0					
ANR	4907687	IdentifierDeclType	void *		4907682	0					
ANR	4907688	Identifier	mem		4907682	1					
ANR	4907689	ExpressionStatement	"fprintf ( stdout , ""display_memalloc(0x%x 0x%x %d)\\n"" , handle , device , size )"	929:4:33451:33532	4907682	1	True				
ANR	4907690	CallExpression	"fprintf ( stdout , ""display_memalloc(0x%x 0x%x %d)\\n"" , handle , device , size )"		4907682	0					
ANR	4907691	Callee	fprintf		4907682	0					
ANR	4907692	Identifier	fprintf		4907682	0					
ANR	4907693	ArgumentList	stdout		4907682	1					
ANR	4907694	Argument	stdout		4907682	0					
ANR	4907695	Identifier	stdout		4907682	0					
ANR	4907696	Argument	"""display_memalloc(0x%x 0x%x %d)\\n"""		4907682	1					
ANR	4907697	PrimaryExpression	"""display_memalloc(0x%x 0x%x %d)\\n"""		4907682	0					
ANR	4907698	Argument	handle		4907682	2					
ANR	4907699	Identifier	handle		4907682	0					
ANR	4907700	Argument	device		4907682	3					
ANR	4907701	Identifier	device		4907682	0					
ANR	4907702	Argument	size		4907682	4					
ANR	4907703	Identifier	size		4907682	0					
ANR	4907704	ExpressionStatement	mem = malloc ( size )	932:4:33545:33563	4907682	2	True				
ANR	4907705	AssignmentExpression	mem = malloc ( size )		4907682	0		=			
ANR	4907706	Identifier	mem		4907682	0					
ANR	4907707	CallExpression	malloc ( size )		4907682	1					
ANR	4907708	Callee	malloc		4907682	0					
ANR	4907709	Identifier	malloc		4907682	0					
ANR	4907710	ArgumentList	size		4907682	1					
ANR	4907711	Argument	size		4907682	0					
ANR	4907712	Identifier	size		4907682	0					
ANR	4907713	ExpressionStatement	"fprintf ( stdout , ""  returning 0x%x\\n"" , ( int ) mem )"	934:4:33590:33637	4907682	3	True				
ANR	4907714	CallExpression	"fprintf ( stdout , ""  returning 0x%x\\n"" , ( int ) mem )"		4907682	0					
ANR	4907715	Callee	fprintf		4907682	0					
ANR	4907716	Identifier	fprintf		4907682	0					
ANR	4907717	ArgumentList	stdout		4907682	1					
ANR	4907718	Argument	stdout		4907682	0					
ANR	4907719	Identifier	stdout		4907682	0					
ANR	4907720	Argument	"""  returning 0x%x\\n"""		4907682	1					
ANR	4907721	PrimaryExpression	"""  returning 0x%x\\n"""		4907682	0					
ANR	4907722	Argument	( int ) mem		4907682	2					
ANR	4907723	CastExpression	( int ) mem		4907682	0					
ANR	4907724	CastTarget	int		4907682	0					
ANR	4907725	Identifier	mem		4907682	1					
ANR	4907726	ReturnStatement	return mem ;	936:4:33650:33660	4907682	4	True				
ANR	4907727	Identifier	mem		4907682	0					
ANR	4907728	ReturnType	void *		4907682	1					
ANR	4907729	Identifier	display_memalloc		4907682	2					
ANR	4907730	ParameterList	"void * handle , void * device , unsigned long size"		4907682	3					
ANR	4907731	Parameter	void * handle	925:23:33361:33372	4907682	0	True				
ANR	4907732	ParameterType	void *		4907682	0					
ANR	4907733	Identifier	handle		4907682	1					
ANR	4907734	Parameter	void * device	925:37:33375:33386	4907682	1	True				
ANR	4907735	ParameterType	void *		4907682	0					
ANR	4907736	Identifier	device		4907682	1					
ANR	4907737	Parameter	unsigned long size	925:51:33389:33406	4907682	2	True				
ANR	4907738	ParameterType	unsigned long		4907682	0					
ANR	4907739	Identifier	size		4907682	1					
ANR	4907740	CFGEntryNode	ENTRY		4907682		True				
ANR	4907741	CFGExitNode	EXIT		4907682		True				
ANR	4907742	Symbol	malloc		4907682						
ANR	4907743	Symbol	size		4907682						
ANR	4907744	Symbol	mem		4907682						
ANR	4907745	Symbol	stdout		4907682						
ANR	4907746	Symbol	handle		4907682						
ANR	4907747	Symbol	device		4907682						
ANR	4907748	Function	display_memfree	939:0:33665:33872							
ANR	4907749	FunctionDef	"display_memfree (void * handle , void * device , void * mem)"		4907748	0					
ANR	4907750	CompoundStatement		940:0:33724:33872	4907748	0					
ANR	4907751	ExpressionStatement	"fprintf ( stdout , ""display_memfree(0x%x, 0x%x, 0x%x)\\n"" , handle , device , mem )"	942:4:33751:33834	4907748	0	True				
ANR	4907752	CallExpression	"fprintf ( stdout , ""display_memfree(0x%x, 0x%x, 0x%x)\\n"" , handle , device , mem )"		4907748	0					
ANR	4907753	Callee	fprintf		4907748	0					
ANR	4907754	Identifier	fprintf		4907748	0					
ANR	4907755	ArgumentList	stdout		4907748	1					
ANR	4907756	Argument	stdout		4907748	0					
ANR	4907757	Identifier	stdout		4907748	0					
ANR	4907758	Argument	"""display_memfree(0x%x, 0x%x, 0x%x)\\n"""		4907748	1					
ANR	4907759	PrimaryExpression	"""display_memfree(0x%x, 0x%x, 0x%x)\\n"""		4907748	0					
ANR	4907760	Argument	handle		4907748	2					
ANR	4907761	Identifier	handle		4907748	0					
ANR	4907762	Argument	device		4907748	3					
ANR	4907763	Identifier	device		4907748	0					
ANR	4907764	Argument	mem		4907748	4					
ANR	4907765	Identifier	mem		4907748	0					
ANR	4907766	ExpressionStatement	free ( mem )	945:4:33847:33856	4907748	1	True				
ANR	4907767	CallExpression	free ( mem )		4907748	0					
ANR	4907768	Callee	free		4907748	0					
ANR	4907769	Identifier	free		4907748	0					
ANR	4907770	ArgumentList	mem		4907748	1					
ANR	4907771	Argument	mem		4907748	0					
ANR	4907772	Identifier	mem		4907748	0					
ANR	4907773	ReturnStatement	return 0 ;	946:4:33862:33870	4907748	2	True				
ANR	4907774	PrimaryExpression	0		4907748	0					
ANR	4907775	ReturnType	int		4907748	1					
ANR	4907776	Identifier	display_memfree		4907748	2					
ANR	4907777	ParameterList	"void * handle , void * device , void * mem"		4907748	3					
ANR	4907778	Parameter	void * handle	939:20:33685:33696	4907748	0	True				
ANR	4907779	ParameterType	void *		4907748	0					
ANR	4907780	Identifier	handle		4907748	1					
ANR	4907781	Parameter	void * device	939:34:33699:33710	4907748	1	True				
ANR	4907782	ParameterType	void *		4907748	0					
ANR	4907783	Identifier	device		4907748	1					
ANR	4907784	Parameter	void * mem	939:48:33713:33721	4907748	2	True				
ANR	4907785	ParameterType	void *		4907748	0					
ANR	4907786	Identifier	mem		4907748	1					
ANR	4907787	CFGEntryNode	ENTRY		4907748		True				
ANR	4907788	CFGExitNode	EXIT		4907748		True				
ANR	4907789	Symbol	mem		4907748						
ANR	4907790	Symbol	stdout		4907748						
ANR	4907791	Symbol	handle		4907748						
ANR	4907792	Symbol	device		4907748						
ANR	4907793	DeclStmt									
ANR	4907794	Decl							display_callback	display_callback	display
ANR	4907795	Function	init_gs_display	974:0:34341:36659							
ANR	4907796	FunctionDef	"init_gs_display (int argc , char * * argv)"		4907795	0					
ANR	4907797	CompoundStatement		976:0:34384:36659	4907795	0					
ANR	4907798	IdentifierDeclStatement	char buf [ 256 ] ;	977:4:34390:34403	4907795	0	True				
ANR	4907799	IdentifierDecl	buf [ 256 ]		4907795	0					
ANR	4907800	IdentifierDeclType	char [ 256 ]		4907795	0					
ANR	4907801	Identifier	buf		4907795	1					
ANR	4907802	PrimaryExpression	256		4907795	2					
ANR	4907803	IdentifierDeclStatement	char * gsargs [ 32 ] ;	978:4:34409:34425	4907795	1	True				
ANR	4907804	IdentifierDecl	* gsargs [ 32 ]		4907795	0					
ANR	4907805	IdentifierDeclType	char * [ 32 ]		4907795	0					
ANR	4907806	Identifier	gsargs		4907795	1					
ANR	4907807	PrimaryExpression	32		4907795	2					
ANR	4907808	IdentifierDeclStatement	int atgsarg = 1 ;	979:4:34444:34459	4907795	2	True				
ANR	4907809	IdentifierDecl	atgsarg = 1		4907795	0					
ANR	4907810	IdentifierDeclType	int		4907795	0					
ANR	4907811	Identifier	atgsarg		4907795	1					
ANR	4907812	AssignmentExpression	atgsarg = 1		4907795	2		=			
ANR	4907813	Identifier	atgsarg		4907795	0					
ANR	4907814	PrimaryExpression	1		4907795	1					
ANR	4907815	IdentifierDeclStatement	"int code , exit_code , i , j , k ;"	980:4:34465:34493	4907795	3	True				
ANR	4907816	IdentifierDecl	code		4907795	0					
ANR	4907817	IdentifierDeclType	int		4907795	0					
ANR	4907818	Identifier	code		4907795	1					
ANR	4907819	IdentifierDecl	exit_code		4907795	1					
ANR	4907820	IdentifierDeclType	int		4907795	0					
ANR	4907821	Identifier	exit_code		4907795	1					
ANR	4907822	IdentifierDecl	i		4907795	2					
ANR	4907823	IdentifierDeclType	int		4907795	0					
ANR	4907824	Identifier	i		4907795	1					
ANR	4907825	IdentifierDecl	j		4907795	3					
ANR	4907826	IdentifierDeclType	int		4907795	0					
ANR	4907827	Identifier	j		4907795	1					
ANR	4907828	IdentifierDecl	k		4907795	4					
ANR	4907829	IdentifierDeclType	int		4907795	0					
ANR	4907830	Identifier	k		4907795	1					
ANR	4907831	ExpressionStatement	"gsargs [ 0 ] = """""	982:4:34500:34514	4907795	4	True				
ANR	4907832	AssignmentExpression	"gsargs [ 0 ] = """""		4907795	0		=			
ANR	4907833	ArrayIndexing	gsargs [ 0 ]		4907795	0					
ANR	4907834	Identifier	gsargs		4907795	0					
ANR	4907835	PrimaryExpression	0		4907795	1					
ANR	4907836	PrimaryExpression	""""""		4907795	1					
ANR	4907837	ExpressionStatement	"memset ( buf , 0 , sizeof ( buf ) )"	983:4:34520:34547	4907795	5	True				
ANR	4907838	CallExpression	"memset ( buf , 0 , sizeof ( buf ) )"		4907795	0					
ANR	4907839	Callee	memset		4907795	0					
ANR	4907840	Identifier	memset		4907795	0					
ANR	4907841	ArgumentList	buf		4907795	1					
ANR	4907842	Argument	buf		4907795	0					
ANR	4907843	Identifier	buf		4907795	0					
ANR	4907844	Argument	0		4907795	1					
ANR	4907845	PrimaryExpression	0		4907795	0					
ANR	4907846	Argument	sizeof ( buf )		4907795	2					
ANR	4907847	SizeofExpression	sizeof ( buf )		4907795	0					
ANR	4907848	Sizeof	sizeof		4907795	0					
ANR	4907849	SizeofOperand	buf		4907795	1					
ANR	4907850	IfStatement	if ( ! _isatty ( fileno ( stdin ) ) )		4907795	6					
ANR	4907851	Condition	! _isatty ( fileno ( stdin ) )	986:8:34575:34597	4907795	0	True				
ANR	4907852	UnaryOperationExpression	! _isatty ( fileno ( stdin ) )		4907795	0					
ANR	4907853	UnaryOperator	!		4907795	0					
ANR	4907854	CallExpression	_isatty ( fileno ( stdin ) )		4907795	1					
ANR	4907855	Callee	_isatty		4907795	0					
ANR	4907856	Identifier	_isatty		4907795	0					
ANR	4907857	ArgumentList	fileno ( stdin )		4907795	1					
ANR	4907858	Argument	fileno ( stdin )		4907795	0					
ANR	4907859	CallExpression	fileno ( stdin )		4907795	0					
ANR	4907860	Callee	fileno		4907795	0					
ANR	4907861	Identifier	fileno		4907795	0					
ANR	4907862	ArgumentList	stdin		4907795	1					
ANR	4907863	Argument	stdin		4907795	0					
ANR	4907864	Identifier	stdin		4907795	0					
ANR	4907865	ExpressionStatement	"_setmode ( fileno ( stdin ) , _O_BINARY )"	987:8:34608:34642	4907795	1	True				
ANR	4907866	CallExpression	"_setmode ( fileno ( stdin ) , _O_BINARY )"		4907795	0					
ANR	4907867	Callee	_setmode		4907795	0					
ANR	4907868	Identifier	_setmode		4907795	0					
ANR	4907869	ArgumentList	fileno ( stdin )		4907795	1					
ANR	4907870	Argument	fileno ( stdin )		4907795	0					
ANR	4907871	CallExpression	fileno ( stdin )		4907795	0					
ANR	4907872	Callee	fileno		4907795	0					
ANR	4907873	Identifier	fileno		4907795	0					
ANR	4907874	ArgumentList	stdin		4907795	1					
ANR	4907875	Argument	stdin		4907795	0					
ANR	4907876	Identifier	stdin		4907795	0					
ANR	4907877	Argument	_O_BINARY		4907795	1					
ANR	4907878	Identifier	_O_BINARY		4907795	0					
ANR	4907879	ExpressionStatement	"_setmode ( fileno ( stdout ) , _O_BINARY )"	988:4:34648:34683	4907795	7	True				
ANR	4907880	CallExpression	"_setmode ( fileno ( stdout ) , _O_BINARY )"		4907795	0					
ANR	4907881	Callee	_setmode		4907795	0					
ANR	4907882	Identifier	_setmode		4907795	0					
ANR	4907883	ArgumentList	fileno ( stdout )		4907795	1					
ANR	4907884	Argument	fileno ( stdout )		4907795	0					
ANR	4907885	CallExpression	fileno ( stdout )		4907795	0					
ANR	4907886	Callee	fileno		4907795	0					
ANR	4907887	Identifier	fileno		4907795	0					
ANR	4907888	ArgumentList	stdout		4907795	1					
ANR	4907889	Argument	stdout		4907795	0					
ANR	4907890	Identifier	stdout		4907795	0					
ANR	4907891	Argument	_O_BINARY		4907795	1					
ANR	4907892	Identifier	_O_BINARY		4907795	0					
ANR	4907893	ExpressionStatement	"_setmode ( fileno ( stderr ) , _O_BINARY )"	989:4:34689:34724	4907795	8	True				
ANR	4907894	CallExpression	"_setmode ( fileno ( stderr ) , _O_BINARY )"		4907795	0					
ANR	4907895	Callee	_setmode		4907795	0					
ANR	4907896	Identifier	_setmode		4907795	0					
ANR	4907897	ArgumentList	fileno ( stderr )		4907795	1					
ANR	4907898	Argument	fileno ( stderr )		4907795	0					
ANR	4907899	CallExpression	fileno ( stderr )		4907795	0					
ANR	4907900	Callee	fileno		4907795	0					
ANR	4907901	Identifier	fileno		4907795	0					
ANR	4907902	ArgumentList	stderr		4907795	1					
ANR	4907903	Argument	stderr		4907795	0					
ANR	4907904	Identifier	stderr		4907795	0					
ANR	4907905	Argument	_O_BINARY		4907795	1					
ANR	4907906	Identifier	_O_BINARY		4907795	0					
ANR	4907907	ExpressionStatement	hwndforeground = GetForegroundWindow ( )	991:4:34731:34769	4907795	9	True				
ANR	4907908	AssignmentExpression	hwndforeground = GetForegroundWindow ( )		4907795	0		=			
ANR	4907909	Identifier	hwndforeground		4907795	0					
ANR	4907910	CallExpression	GetForegroundWindow ( )		4907795	1					
ANR	4907911	Callee	GetForegroundWindow		4907795	0					
ANR	4907912	Identifier	GetForegroundWindow		4907795	0					
ANR	4907913	ArgumentList			4907795	1					
ANR	4907914	IfStatement	"if ( gsapi_new_instance ( ( void * ) & instance , NULL ) < 0 )"		4907795	10					
ANR	4907915	Condition	"gsapi_new_instance ( ( void * ) & instance , NULL ) < 0"	993:8:34828:34874	4907795	0	True				
ANR	4907916	RelationalExpression	"gsapi_new_instance ( ( void * ) & instance , NULL ) < 0"		4907795	0		<			
ANR	4907917	CallExpression	"gsapi_new_instance ( ( void * ) & instance , NULL )"		4907795	0					
ANR	4907918	Callee	gsapi_new_instance		4907795	0					
ANR	4907919	Identifier	gsapi_new_instance		4907795	0					
ANR	4907920	ArgumentList	( void * ) & instance		4907795	1					
ANR	4907921	Argument	( void * ) & instance		4907795	0					
ANR	4907922	CastExpression	( void * ) & instance		4907795	0					
ANR	4907923	CastTarget	void *		4907795	0					
ANR	4907924	UnaryOperationExpression	& instance		4907795	1					
ANR	4907925	UnaryOperator	&		4907795	0					
ANR	4907926	Identifier	instance		4907795	1					
ANR	4907927	Argument	NULL		4907795	1					
ANR	4907928	Identifier	NULL		4907795	0					
ANR	4907929	PrimaryExpression	0		4907795	1					
ANR	4907930	CompoundStatement		18:57:492:492	4907795	1					
ANR	4907931	ExpressionStatement	"fprintf ( stderr , ""Can't create Ghostscript instance\\n"" )"	994:8:34887:34941	4907795	0	True				
ANR	4907932	CallExpression	"fprintf ( stderr , ""Can't create Ghostscript instance\\n"" )"		4907795	0					
ANR	4907933	Callee	fprintf		4907795	0					
ANR	4907934	Identifier	fprintf		4907795	0					
ANR	4907935	ArgumentList	stderr		4907795	1					
ANR	4907936	Argument	stderr		4907795	0					
ANR	4907937	Identifier	stderr		4907795	0					
ANR	4907938	Argument	"""Can't create Ghostscript instance\\n"""		4907795	1					
ANR	4907939	PrimaryExpression	"""Can't create Ghostscript instance\\n"""		4907795	0					
ANR	4907940	ReturnStatement	return 1 ;	995:8:34951:34959	4907795	1	True				
ANR	4907941	PrimaryExpression	1		4907795	0					
ANR	4907942	IfStatement	"if ( _beginthread ( winthread , 65535 , NULL ) == - 1 )"		4907795	11					
ANR	4907943	Condition	"_beginthread ( winthread , 65535 , NULL ) == - 1"	999:8:34993:35034	4907795	0	True				
ANR	4907944	EqualityExpression	"_beginthread ( winthread , 65535 , NULL ) == - 1"		4907795	0		==			
ANR	4907945	CallExpression	"_beginthread ( winthread , 65535 , NULL )"		4907795	0					
ANR	4907946	Callee	_beginthread		4907795	0					
ANR	4907947	Identifier	_beginthread		4907795	0					
ANR	4907948	ArgumentList	winthread		4907795	1					
ANR	4907949	Argument	winthread		4907795	0					
ANR	4907950	Identifier	winthread		4907795	0					
ANR	4907951	Argument	65535		4907795	1					
ANR	4907952	PrimaryExpression	65535		4907795	0					
ANR	4907953	Argument	NULL		4907795	2					
ANR	4907954	Identifier	NULL		4907795	0					
ANR	4907955	UnaryOperationExpression	- 1		4907795	1					
ANR	4907956	UnaryOperator	-		4907795	0					
ANR	4907957	PrimaryExpression	1		4907795	1					
ANR	4907958	CompoundStatement		24:52:652:652	4907795	1					
ANR	4907959	ExpressionStatement	"fprintf ( stderr , ""GUI thread creation failed\\n"" )"	1000:8:35047:35094	4907795	0	True				
ANR	4907960	CallExpression	"fprintf ( stderr , ""GUI thread creation failed\\n"" )"		4907795	0					
ANR	4907961	Callee	fprintf		4907795	0					
ANR	4907962	Identifier	fprintf		4907795	0					
ANR	4907963	ArgumentList	stderr		4907795	1					
ANR	4907964	Argument	stderr		4907795	0					
ANR	4907965	Identifier	stderr		4907795	0					
ANR	4907966	Argument	"""GUI thread creation failed\\n"""		4907795	1					
ANR	4907967	PrimaryExpression	"""GUI thread creation failed\\n"""		4907795	0					
ANR	4907968	ElseStatement	else		4907795	0					
ANR	4907969	CompoundStatement		28:8:736:746	4907795	0					
ANR	4907970	IdentifierDeclStatement	int n = 30 ;	1003:8:35121:35131	4907795	0	True				
ANR	4907971	IdentifierDecl	n = 30		4907795	0					
ANR	4907972	IdentifierDeclType	int		4907795	0					
ANR	4907973	Identifier	n		4907795	1					
ANR	4907974	AssignmentExpression	n = 30		4907795	2		=			
ANR	4907975	Identifier	n		4907795	0					
ANR	4907976	PrimaryExpression	30		4907795	1					
ANR	4907977	ExpressionStatement	Sleep ( 0 )	1005:8:35180:35188	4907795	1	True				
ANR	4907978	CallExpression	Sleep ( 0 )		4907795	0					
ANR	4907979	Callee	Sleep		4907795	0					
ANR	4907980	Identifier	Sleep		4907795	0					
ANR	4907981	ArgumentList	0		4907795	1					
ANR	4907982	Argument	0		4907795	0					
ANR	4907983	PrimaryExpression	0		4907795	0					
ANR	4907984	WhileStatement	while ( n && ( hthread == INVALID_HANDLE_VALUE ) )		4907795	2					
ANR	4907985	Condition	n && ( hthread == INVALID_HANDLE_VALUE )	1006:15:35205:35242	4907795	0	True				
ANR	4907986	AndExpression	n && ( hthread == INVALID_HANDLE_VALUE )		4907795	0		&&			
ANR	4907987	Identifier	n		4907795	0					
ANR	4907988	EqualityExpression	hthread == INVALID_HANDLE_VALUE		4907795	1		==			
ANR	4907989	Identifier	hthread		4907795	0					
ANR	4907990	Identifier	INVALID_HANDLE_VALUE		4907795	1					
ANR	4907991	CompoundStatement		31:55:860:860	4907795	1					
ANR	4907992	ExpressionStatement	n --	1007:12:35259:35262	4907795	0	True				
ANR	4907993	PostIncDecOperationExpression	n --		4907795	0					
ANR	4907994	Identifier	n		4907795	0					
ANR	4907995	IncDec	--		4907795	1					
ANR	4907996	ExpressionStatement	Sleep ( 100 )	1008:12:35276:35286	4907795	1	True				
ANR	4907997	CallExpression	Sleep ( 100 )		4907795	0					
ANR	4907998	Callee	Sleep		4907795	0					
ANR	4907999	Identifier	Sleep		4907795	0					
ANR	4908000	ArgumentList	100		4907795	1					
ANR	4908001	Argument	100		4907795	0					
ANR	4908002	PrimaryExpression	100		4907795	0					
ANR	4908003	WhileStatement	"while ( n && ( PostThreadMessage ( thread_id , WM_USER , 0 , 0 ) == 0 ) )"		4907795	3					
ANR	4908004	Condition	"n && ( PostThreadMessage ( thread_id , WM_USER , 0 , 0 ) == 0 )"	1010:15:35313:35367	4907795	0	True				
ANR	4908005	AndExpression	"n && ( PostThreadMessage ( thread_id , WM_USER , 0 , 0 ) == 0 )"		4907795	0		&&			
ANR	4908006	Identifier	n		4907795	0					
ANR	4908007	EqualityExpression	"PostThreadMessage ( thread_id , WM_USER , 0 , 0 ) == 0"		4907795	1		==			
ANR	4908008	CallExpression	"PostThreadMessage ( thread_id , WM_USER , 0 , 0 )"		4907795	0					
ANR	4908009	Callee	PostThreadMessage		4907795	0					
ANR	4908010	Identifier	PostThreadMessage		4907795	0					
ANR	4908011	ArgumentList	thread_id		4907795	1					
ANR	4908012	Argument	thread_id		4907795	0					
ANR	4908013	Identifier	thread_id		4907795	0					
ANR	4908014	Argument	WM_USER		4907795	1					
ANR	4908015	Identifier	WM_USER		4907795	0					
ANR	4908016	Argument	0		4907795	2					
ANR	4908017	PrimaryExpression	0		4907795	0					
ANR	4908018	Argument	0		4907795	3					
ANR	4908019	PrimaryExpression	0		4907795	0					
ANR	4908020	PrimaryExpression	0		4907795	1					
ANR	4908021	CompoundStatement		35:72:985:985	4907795	1					
ANR	4908022	ExpressionStatement	n --	1011:12:35384:35387	4907795	0	True				
ANR	4908023	PostIncDecOperationExpression	n --		4907795	0					
ANR	4908024	Identifier	n		4907795	0					
ANR	4908025	IncDec	--		4907795	1					
ANR	4908026	ExpressionStatement	Sleep ( 100 )	1012:12:35401:35411	4907795	1	True				
ANR	4908027	CallExpression	Sleep ( 100 )		4907795	0					
ANR	4908028	Callee	Sleep		4907795	0					
ANR	4908029	Identifier	Sleep		4907795	0					
ANR	4908030	ArgumentList	100		4907795	1					
ANR	4908031	Argument	100		4907795	0					
ANR	4908032	PrimaryExpression	100		4907795	0					
ANR	4908033	IfStatement	if ( n == 0 )		4907795	4					
ANR	4908034	Condition	n == 0	1014:12:35435:35440	4907795	0	True				
ANR	4908035	EqualityExpression	n == 0		4907795	0		==			
ANR	4908036	Identifier	n		4907795	0					
ANR	4908037	PrimaryExpression	0		4907795	1					
ANR	4908038	ExpressionStatement	"fprintf ( stderr , ""Can't post message to GUI thread\\n"" )"	1015:12:35455:35508	4907795	1	True				
ANR	4908039	CallExpression	"fprintf ( stderr , ""Can't post message to GUI thread\\n"" )"		4907795	0					
ANR	4908040	Callee	fprintf		4907795	0					
ANR	4908041	Identifier	fprintf		4907795	0					
ANR	4908042	ArgumentList	stderr		4907795	1					
ANR	4908043	Argument	stderr		4907795	0					
ANR	4908044	Identifier	stderr		4907795	0					
ANR	4908045	Argument	"""Can't post message to GUI thread\\n"""		4907795	1					
ANR	4908046	PrimaryExpression	"""Can't post message to GUI thread\\n"""		4907795	0					
ANR	4908047	ExpressionStatement	"gsapi_set_stdio ( instance , gsdll_stdin , gsdll_stdout , gsdll_stderr )"	1017:4:35520:35586	4907795	12	True				
ANR	4908048	CallExpression	"gsapi_set_stdio ( instance , gsdll_stdin , gsdll_stdout , gsdll_stderr )"		4907795	0					
ANR	4908049	Callee	gsapi_set_stdio		4907795	0					
ANR	4908050	Identifier	gsapi_set_stdio		4907795	0					
ANR	4908051	ArgumentList	instance		4907795	1					
ANR	4908052	Argument	instance		4907795	0					
ANR	4908053	Identifier	instance		4907795	0					
ANR	4908054	Argument	gsdll_stdin		4907795	1					
ANR	4908055	Identifier	gsdll_stdin		4907795	0					
ANR	4908056	Argument	gsdll_stdout		4907795	2					
ANR	4908057	Identifier	gsdll_stdout		4907795	0					
ANR	4908058	Argument	gsdll_stderr		4907795	3					
ANR	4908059	Identifier	gsdll_stderr		4907795	0					
ANR	4908060	ExpressionStatement	"gsapi_set_display_callback ( instance , & display )"	1018:4:35592:35638	4907795	13	True				
ANR	4908061	CallExpression	"gsapi_set_display_callback ( instance , & display )"		4907795	0					
ANR	4908062	Callee	gsapi_set_display_callback		4907795	0					
ANR	4908063	Identifier	gsapi_set_display_callback		4907795	0					
ANR	4908064	ArgumentList	instance		4907795	1					
ANR	4908065	Argument	instance		4907795	0					
ANR	4908066	Identifier	instance		4907795	0					
ANR	4908067	Argument	& display		4907795	1					
ANR	4908068	UnaryOperationExpression	& display		4907795	0					
ANR	4908069	UnaryOperator	&		4907795	0					
ANR	4908070	Identifier	display		4907795	1					
ANR	4908071	ExpressionStatement	"gsargs [ atgsarg ++ ] = ""-dDisplayFormat=16#20804"""	1019:4:35644:35690	4907795	14	True				
ANR	4908072	AssignmentExpression	"gsargs [ atgsarg ++ ] = ""-dDisplayFormat=16#20804"""		4907795	0		=			
ANR	4908073	ArrayIndexing	gsargs [ atgsarg ++ ]		4907795	0					
ANR	4908074	Identifier	gsargs		4907795	0					
ANR	4908075	PostIncDecOperationExpression	atgsarg ++		4907795	1					
ANR	4908076	Identifier	atgsarg		4907795	0					
ANR	4908077	IncDec	++		4907795	1					
ANR	4908078	PrimaryExpression	"""-dDisplayFormat=16#20804"""		4907795	1					
ANR	4908079	ForStatement	for ( i = 0 ; i < argc ; i ++ )		4907795	15					
ANR	4908080	ForInit	i = 0 ;	1022:8:35724:35727	4907795	0	True				
ANR	4908081	AssignmentExpression	i = 0		4907795	0		=			
ANR	4908082	Identifier	i		4907795	0					
ANR	4908083	PrimaryExpression	0		4907795	1					
ANR	4908084	Condition	i < argc	1022:13:35729:35734	4907795	1	True				
ANR	4908085	RelationalExpression	i < argc		4907795	0		<			
ANR	4908086	Identifier	i		4907795	0					
ANR	4908087	Identifier	argc		4907795	1					
ANR	4908088	PostIncDecOperationExpression	i ++	1022:21:35737:35739	4907795	2	True				
ANR	4908089	Identifier	i		4907795	0					
ANR	4908090	IncDec	++		4907795	1					
ANR	4908091	ExpressionStatement	gsargs [ atgsarg ++ ] = argv [ i ]	1023:8:35750:35777	4907795	3	True				
ANR	4908092	AssignmentExpression	gsargs [ atgsarg ++ ] = argv [ i ]		4907795	0		=			
ANR	4908093	ArrayIndexing	gsargs [ atgsarg ++ ]		4907795	0					
ANR	4908094	Identifier	gsargs		4907795	0					
ANR	4908095	PostIncDecOperationExpression	atgsarg ++		4907795	1					
ANR	4908096	Identifier	atgsarg		4907795	0					
ANR	4908097	IncDec	++		4907795	1					
ANR	4908098	ArrayIndexing	argv [ i ]		4907795	1					
ANR	4908099	Identifier	argv		4907795	0					
ANR	4908100	Identifier	i		4907795	1					
ANR	4908101	IfStatement	"if ( ( code = gsapi_init_with_args ( instance , atgsarg , gsargs ) ) < 0 )"		4907795	16					
ANR	4908102	Condition	"( code = gsapi_init_with_args ( instance , atgsarg , gsargs ) ) < 0"	1024:8:35787:35846	4907795	0	True				
ANR	4908103	RelationalExpression	"( code = gsapi_init_with_args ( instance , atgsarg , gsargs ) ) < 0"		4907795	0		<			
ANR	4908104	AssignmentExpression	"code = gsapi_init_with_args ( instance , atgsarg , gsargs )"		4907795	0		=			
ANR	4908105	Identifier	code		4907795	0					
ANR	4908106	CallExpression	"gsapi_init_with_args ( instance , atgsarg , gsargs )"		4907795	1					
ANR	4908107	Callee	gsapi_init_with_args		4907795	0					
ANR	4908108	Identifier	gsapi_init_with_args		4907795	0					
ANR	4908109	ArgumentList	instance		4907795	1					
ANR	4908110	Argument	instance		4907795	0					
ANR	4908111	Identifier	instance		4907795	0					
ANR	4908112	Argument	atgsarg		4907795	1					
ANR	4908113	Identifier	atgsarg		4907795	0					
ANR	4908114	Argument	gsargs		4907795	2					
ANR	4908115	Identifier	gsargs		4907795	0					
ANR	4908116	PrimaryExpression	0		4907795	1					
ANR	4908117	CompoundStatement		49:70:1464:1464	4907795	1					
ANR	4908118	ExpressionStatement	"printf ( ""gsapi_init returned code = %d\\n"" , code )"	1025:8:35859:35906	4907795	0	True				
ANR	4908119	CallExpression	"printf ( ""gsapi_init returned code = %d\\n"" , code )"		4907795	0					
ANR	4908120	Callee	printf		4907795	0					
ANR	4908121	Identifier	printf		4907795	0					
ANR	4908122	ArgumentList	"""gsapi_init returned code = %d\\n"""		4907795	1					
ANR	4908123	Argument	"""gsapi_init returned code = %d\\n"""		4907795	0					
ANR	4908124	PrimaryExpression	"""gsapi_init returned code = %d\\n"""		4907795	0					
ANR	4908125	Argument	code		4907795	1					
ANR	4908126	Identifier	code		4907795	0					
ANR	4908127	ReturnStatement	return code ;	1026:8:35916:35927	4907795	1	True				
ANR	4908128	Identifier	code		4907795	0					
ANR	4908129	IfStatement	"if ( ( code = gsapi_run_string_begin ( instance , 0 , & exit_code ) ) < 0 )"		4907795	17					
ANR	4908130	Condition	"( code = gsapi_run_string_begin ( instance , 0 , & exit_code ) ) < 0"	1028:8:35943:36002	4907795	0	True				
ANR	4908131	RelationalExpression	"( code = gsapi_run_string_begin ( instance , 0 , & exit_code ) ) < 0"		4907795	0		<			
ANR	4908132	AssignmentExpression	"code = gsapi_run_string_begin ( instance , 0 , & exit_code )"		4907795	0		=			
ANR	4908133	Identifier	code		4907795	0					
ANR	4908134	CallExpression	"gsapi_run_string_begin ( instance , 0 , & exit_code )"		4907795	1					
ANR	4908135	Callee	gsapi_run_string_begin		4907795	0					
ANR	4908136	Identifier	gsapi_run_string_begin		4907795	0					
ANR	4908137	ArgumentList	instance		4907795	1					
ANR	4908138	Argument	instance		4907795	0					
ANR	4908139	Identifier	instance		4907795	0					
ANR	4908140	Argument	0		4907795	1					
ANR	4908141	PrimaryExpression	0		4907795	0					
ANR	4908142	Argument	& exit_code		4907795	2					
ANR	4908143	UnaryOperationExpression	& exit_code		4907795	0					
ANR	4908144	UnaryOperator	&		4907795	0					
ANR	4908145	Identifier	exit_code		4907795	1					
ANR	4908146	PrimaryExpression	0		4907795	1					
ANR	4908147	CompoundStatement		53:70:1620:1620	4907795	1					
ANR	4908148	ExpressionStatement	"printf ( ""gsapi_run_string_begin returned code = %d\\n"" , code )"	1029:8:36015:36074	4907795	0	True				
ANR	4908149	CallExpression	"printf ( ""gsapi_run_string_begin returned code = %d\\n"" , code )"		4907795	0					
ANR	4908150	Callee	printf		4907795	0					
ANR	4908151	Identifier	printf		4907795	0					
ANR	4908152	ArgumentList	"""gsapi_run_string_begin returned code = %d\\n"""		4907795	1					
ANR	4908153	Argument	"""gsapi_run_string_begin returned code = %d\\n"""		4907795	0					
ANR	4908154	PrimaryExpression	"""gsapi_run_string_begin returned code = %d\\n"""		4907795	0					
ANR	4908155	Argument	code		4907795	1					
ANR	4908156	Identifier	code		4907795	0					
ANR	4908157	ExpressionStatement	gsapi_exit ( instance )	1030:8:36084:36104	4907795	1	True				
ANR	4908158	CallExpression	gsapi_exit ( instance )		4907795	0					
ANR	4908159	Callee	gsapi_exit		4907795	0					
ANR	4908160	Identifier	gsapi_exit		4907795	0					
ANR	4908161	ArgumentList	instance		4907795	1					
ANR	4908162	Argument	instance		4907795	0					
ANR	4908163	Identifier	instance		4907795	0					
ANR	4908164	ExpressionStatement	gsapi_delete_instance ( instance )	1031:8:36114:36145	4907795	2	True				
ANR	4908165	CallExpression	gsapi_delete_instance ( instance )		4907795	0					
ANR	4908166	Callee	gsapi_delete_instance		4907795	0					
ANR	4908167	Identifier	gsapi_delete_instance		4907795	0					
ANR	4908168	ArgumentList	instance		4907795	1					
ANR	4908169	Argument	instance		4907795	0					
ANR	4908170	Identifier	instance		4907795	0					
ANR	4908171	ReturnStatement	return - 1 ;	1032:8:36155:36164	4907795	3	True				
ANR	4908172	UnaryOperationExpression	- 1		4907795	0					
ANR	4908173	UnaryOperator	-		4907795	0					
ANR	4908174	PrimaryExpression	1		4907795	1					
ANR	4908175	Statement	sprintf	1034:4:36176:36182	4907795	18	True				
ANR	4908176	Statement	(	1034:11:36183:36183	4907795	19	True				
ANR	4908177	Statement	buf	1034:12:36184:36186	4907795	20	True				
ANR	4908178	Statement	","	1034:15:36187:36187	4907795	21	True				
ANR	4908179	Statement	"""/NX %d def /NY %d def /RX %d def /RY %d def\\n"""	1034:17:36189:36235	4907795	22	True				
ANR	4908180	Statement	""" (genpat0.ps) run\\n"""	1035:16:36253:36273	4907795	23	True				
ANR	4908181	Statement	"""1 false .outputpage\\n"""	1036:16:36291:36313	4907795	24	True				
ANR	4908182	Statement	","	1036:39:36314:36314	4907795	25	True				
ANR	4908183	Statement	array_width	1037:16:36332:36342	4907795	26	True				
ANR	4908184	Statement	","	1037:27:36343:36343	4907795	27	True				
ANR	4908185	Statement	array_height	1037:29:36345:36356	4907795	28	True				
ANR	4908186	Statement	","	1037:41:36357:36357	4907795	29	True				
ANR	4908187	Statement	resolution	1037:43:36359:36368	4907795	30	True				
ANR	4908188	Statement	[	1037:53:36369:36369	4907795	31	True				
ANR	4908189	Statement	0	1037:54:36370:36370	4907795	32	True				
ANR	4908190	Statement	]	1037:55:36371:36371	4907795	33	True				
ANR	4908191	Statement	","	1037:56:36372:36372	4907795	34	True				
ANR	4908192	Statement	resolution	1037:58:36374:36383	4907795	35	True				
ANR	4908193	Statement	[	1037:68:36384:36384	4907795	36	True				
ANR	4908194	Statement	1	1037:69:36385:36385	4907795	37	True				
ANR	4908195	Statement	]	1037:70:36386:36386	4907795	38	True				
ANR	4908196	Statement	)	1037:71:36387:36387	4907795	39	True				
ANR	4908197	ExpressionStatement		1037:72:36388:36388	4907795	40	True				
ANR	4908198	IfStatement	"if ( ( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) != gs_error_NeedInput )"		4907795	41					
ANR	4908199	Condition	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) != gs_error_NeedInput"	1038:8:36398:36496	4907795	0	True				
ANR	4908200	EqualityExpression	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) != gs_error_NeedInput"		4907795	0		!=			
ANR	4908201	AssignmentExpression	"code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4907795	0		=			
ANR	4908202	Identifier	code		4907795	0					
ANR	4908203	CallExpression	"gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4907795	1					
ANR	4908204	Callee	gsapi_run_string_continue		4907795	0					
ANR	4908205	Identifier	gsapi_run_string_continue		4907795	0					
ANR	4908206	ArgumentList	instance		4907795	1					
ANR	4908207	Argument	instance		4907795	0					
ANR	4908208	Identifier	instance		4907795	0					
ANR	4908209	Argument	buf		4907795	1					
ANR	4908210	Identifier	buf		4907795	0					
ANR	4908211	Argument	strlen ( buf )		4907795	2					
ANR	4908212	CallExpression	strlen ( buf )		4907795	0					
ANR	4908213	Callee	strlen		4907795	0					
ANR	4908214	Identifier	strlen		4907795	0					
ANR	4908215	ArgumentList	buf		4907795	1					
ANR	4908216	Argument	buf		4907795	0					
ANR	4908217	Identifier	buf		4907795	0					
ANR	4908218	Argument	0		4907795	3					
ANR	4908219	PrimaryExpression	0		4907795	0					
ANR	4908220	Argument	& exit_code		4907795	4					
ANR	4908221	UnaryOperationExpression	& exit_code		4907795	0					
ANR	4908222	UnaryOperator	&		4907795	0					
ANR	4908223	Identifier	exit_code		4907795	1					
ANR	4908224	Identifier	gs_error_NeedInput		4907795	1					
ANR	4908225	CompoundStatement		63:109:2114:2114	4907795	1					
ANR	4908226	ExpressionStatement	"printf ( "" Execution of 'genpat0.ps' returned code = %d\\n"" , code )"	1039:8:36509:36572	4907795	0	True				
ANR	4908227	CallExpression	"printf ( "" Execution of 'genpat0.ps' returned code = %d\\n"" , code )"		4907795	0					
ANR	4908228	Callee	printf		4907795	0					
ANR	4908229	Identifier	printf		4907795	0					
ANR	4908230	ArgumentList	""" Execution of 'genpat0.ps' returned code = %d\\n"""		4907795	1					
ANR	4908231	Argument	""" Execution of 'genpat0.ps' returned code = %d\\n"""		4907795	0					
ANR	4908232	PrimaryExpression	""" Execution of 'genpat0.ps' returned code = %d\\n"""		4907795	0					
ANR	4908233	Argument	code		4907795	1					
ANR	4908234	Identifier	code		4907795	0					
ANR	4908235	ReturnStatement	return - 1 ;	1040:8:36582:36591	4907795	1	True				
ANR	4908236	UnaryOperationExpression	- 1		4907795	0					
ANR	4908237	UnaryOperator	-		4907795	0					
ANR	4908238	PrimaryExpression	1		4907795	1					
ANR	4908239	ExpressionStatement	loop_ctr = 1	1042:4:36603:36615	4907795	42	True				
ANR	4908240	AssignmentExpression	loop_ctr = 1		4907795	0		=			
ANR	4908241	Identifier	loop_ctr		4907795	0					
ANR	4908242	PrimaryExpression	1		4907795	1					
ANR	4908243	ReturnStatement	return 0 ;	1043:4:36649:36657	4907795	43	True				
ANR	4908244	PrimaryExpression	0		4907795	0					
ANR	4908245	ReturnType	int		4907795	1					
ANR	4908246	Identifier	init_gs_display		4907795	2					
ANR	4908247	ParameterList	"int argc , char * * argv"		4907795	3					
ANR	4908248	Parameter	int argc	975:16:34361:34368	4907795	0	True				
ANR	4908249	ParameterType	int		4907795	0					
ANR	4908250	Identifier	argc		4907795	1					
ANR	4908251	Parameter	char * * argv	975:26:34371:34381	4907795	1	True				
ANR	4908252	ParameterType	char * *		4907795	0					
ANR	4908253	Identifier	argv		4907795	1					
ANR	4908254	CFGEntryNode	ENTRY		4907795		True				
ANR	4908255	CFGExitNode	EXIT		4907795		True				
ANR	4908256	Symbol	* gsargs		4907795						
ANR	4908257	Symbol	stdin		4907795						
ANR	4908258	Symbol	gsapi_run_string_continue		4907795						
ANR	4908259	Symbol	code		4907795						
ANR	4908260	Symbol	instance		4907795						
ANR	4908261	Symbol	& exit_code		4907795						
ANR	4908262	Symbol	stdout		4907795						
ANR	4908263	Symbol	& instance		4907795						
ANR	4908264	Symbol	gsdll_stdin		4907795						
ANR	4908265	Symbol	* argv		4907795						
ANR	4908266	Symbol	_O_BINARY		4907795						
ANR	4908267	Symbol	gsdll_stderr		4907795						
ANR	4908268	Symbol	gsargs		4907795						
ANR	4908269	Symbol	argv		4907795						
ANR	4908270	Symbol	gsapi_new_instance		4907795						
ANR	4908271	Symbol	_beginthread		4907795						
ANR	4908272	Symbol	WM_USER		4907795						
ANR	4908273	Symbol	gsapi_run_string_begin		4907795						
ANR	4908274	Symbol	strlen		4907795						
ANR	4908275	Symbol	thread_id		4907795						
ANR	4908276	Symbol	loop_ctr		4907795						
ANR	4908277	Symbol	atgsarg		4907795						
ANR	4908278	Symbol	gsapi_init_with_args		4907795						
ANR	4908279	Symbol	hthread		4907795						
ANR	4908280	Symbol	PostThreadMessage		4907795						
ANR	4908281	Symbol	_isatty		4907795						
ANR	4908282	Symbol	winthread		4907795						
ANR	4908283	Symbol	argc		4907795						
ANR	4908284	Symbol	NULL		4907795						
ANR	4908285	Symbol	i		4907795						
ANR	4908286	Symbol	j		4907795						
ANR	4908287	Symbol	k		4907795						
ANR	4908288	Symbol	stderr		4907795						
ANR	4908289	Symbol	INVALID_HANDLE_VALUE		4907795						
ANR	4908290	Symbol	n		4907795						
ANR	4908291	Symbol	gsdll_stdout		4907795						
ANR	4908292	Symbol	buf		4907795						
ANR	4908293	Symbol	* i		4907795						
ANR	4908294	Symbol	fileno		4907795						
ANR	4908295	Symbol	exit_code		4907795						
ANR	4908296	Symbol	& display		4907795						
ANR	4908297	Symbol	gs_error_NeedInput		4907795						
ANR	4908298	Symbol	hwndforeground		4907795						
ANR	4908299	Symbol	GetForegroundWindow		4907795						
ANR	4908300	Function	update_gs_image	1046:0:36662:37666							
ANR	4908301	FunctionDef	update_gs_image ()		4908300	0					
ANR	4908302	CompoundStatement		1048:0:36684:37666	4908300	0					
ANR	4908303	IdentifierDeclStatement	char buf [ MAX_ARRAY_WIDTH * 2 + 256 ] ;	1049:4:36690:36723	4908300	0	True				
ANR	4908304	IdentifierDecl	buf [ MAX_ARRAY_WIDTH * 2 + 256 ]		4908300	0					
ANR	4908305	IdentifierDeclType	char [ MAX_ARRAY_WIDTH * 2 + 256 ]		4908300	0					
ANR	4908306	Identifier	buf		4908300	1					
ANR	4908307	AdditiveExpression	MAX_ARRAY_WIDTH * 2 + 256		4908300	2		+			
ANR	4908308	MultiplicativeExpression	MAX_ARRAY_WIDTH * 2		4908300	0		*			
ANR	4908309	Identifier	MAX_ARRAY_WIDTH		4908300	0					
ANR	4908310	PrimaryExpression	2		4908300	1					
ANR	4908311	PrimaryExpression	256		4908300	1					
ANR	4908312	IdentifierDeclStatement	char * bufp ;	1050:4:36729:36739	4908300	1	True				
ANR	4908313	IdentifierDecl	* bufp		4908300	0					
ANR	4908314	IdentifierDeclType	char *		4908300	0					
ANR	4908315	Identifier	bufp		4908300	1					
ANR	4908316	IdentifierDeclStatement	"int code , exit_code , i , j , k , Gray ;"	1051:4:36745:36783	4908300	2	True				
ANR	4908317	IdentifierDecl	code		4908300	0					
ANR	4908318	IdentifierDeclType	int		4908300	0					
ANR	4908319	Identifier	code		4908300	1					
ANR	4908320	IdentifierDecl	exit_code		4908300	1					
ANR	4908321	IdentifierDeclType	int		4908300	0					
ANR	4908322	Identifier	exit_code		4908300	1					
ANR	4908323	IdentifierDecl	i		4908300	2					
ANR	4908324	IdentifierDeclType	int		4908300	0					
ANR	4908325	Identifier	i		4908300	1					
ANR	4908326	IdentifierDecl	j		4908300	3					
ANR	4908327	IdentifierDeclType	int		4908300	0					
ANR	4908328	Identifier	j		4908300	1					
ANR	4908329	IdentifierDecl	k		4908300	4					
ANR	4908330	IdentifierDeclType	int		4908300	0					
ANR	4908331	Identifier	k		4908300	1					
ANR	4908332	IdentifierDecl	Gray		4908300	5					
ANR	4908333	IdentifierDeclType	int		4908300	0					
ANR	4908334	Identifier	Gray		4908300	1					
ANR	4908335	ExpressionStatement	"sprintf ( buf , ""DoImage\\n"" )"	1053:4:36790:36815	4908300	3	True				
ANR	4908336	CallExpression	"sprintf ( buf , ""DoImage\\n"" )"		4908300	0					
ANR	4908337	Callee	sprintf		4908300	0					
ANR	4908338	Identifier	sprintf		4908300	0					
ANR	4908339	ArgumentList	buf		4908300	1					
ANR	4908340	Argument	buf		4908300	0					
ANR	4908341	Identifier	buf		4908300	0					
ANR	4908342	Argument	"""DoImage\\n"""		4908300	1					
ANR	4908343	PrimaryExpression	"""DoImage\\n"""		4908300	0					
ANR	4908344	ExpressionStatement	bufp = buf + 8	1054:4:36821:36835	4908300	4	True				
ANR	4908345	AssignmentExpression	bufp = buf + 8		4908300	0		=			
ANR	4908346	Identifier	bufp		4908300	0					
ANR	4908347	AdditiveExpression	buf + 8		4908300	1		+			
ANR	4908348	Identifier	buf		4908300	0					
ANR	4908349	PrimaryExpression	8		4908300	1					
ANR	4908350	ForStatement	for ( i = 0 ; i < array_width * array_height ; i ++ )		4908300	5					
ANR	4908351	ForInit	i = 0 ;	1055:9:36846:36849	4908300	0	True				
ANR	4908352	AssignmentExpression	i = 0		4908300	0		=			
ANR	4908353	Identifier	i		4908300	0					
ANR	4908354	PrimaryExpression	0		4908300	1					
ANR	4908355	Condition	i < array_width * array_height	1055:14:36851:36878	4908300	1	True				
ANR	4908356	RelationalExpression	i < array_width * array_height		4908300	0		<			
ANR	4908357	Identifier	i		4908300	0					
ANR	4908358	MultiplicativeExpression	array_width * array_height		4908300	1		*			
ANR	4908359	Identifier	array_width		4908300	0					
ANR	4908360	Identifier	array_height		4908300	1					
ANR	4908361	PostIncDecOperationExpression	i ++	1055:44:36881:36883	4908300	2	True				
ANR	4908362	Identifier	i		4908300	0					
ANR	4908363	IncDec	++		4908300	1					
ANR	4908364	CompoundStatement		8:49:201:201	4908300	3					
ANR	4908365	IfStatement	if ( Val [ i ] < BIG_FLOAT )		4908300	0					
ANR	4908366	Condition	Val [ i ] < BIG_FLOAT	1056:12:36900:36917	4908300	0	True				
ANR	4908367	RelationalExpression	Val [ i ] < BIG_FLOAT		4908300	0		<			
ANR	4908368	ArrayIndexing	Val [ i ]		4908300	0					
ANR	4908369	Identifier	Val		4908300	0					
ANR	4908370	Identifier	i		4908300	1					
ANR	4908371	Identifier	BIG_FLOAT		4908300	1					
ANR	4908372	ExpressionStatement	"Gray = 254 - ( int ) ( 0.5 + 253.0 * pow ( ( Val [ i ] - MinVal ) / ( ValRange ) , 0.25 ) )"	1059:12:37065:37155	4908300	1	True				
ANR	4908373	AssignmentExpression	"Gray = 254 - ( int ) ( 0.5 + 253.0 * pow ( ( Val [ i ] - MinVal ) / ( ValRange ) , 0.25 ) )"		4908300	0		=			
ANR	4908374	Identifier	Gray		4908300	0					
ANR	4908375	AdditiveExpression	"254 - ( int ) ( 0.5 + 253.0 * pow ( ( Val [ i ] - MinVal ) / ( ValRange ) , 0.25 ) )"		4908300	1		-			
ANR	4908376	PrimaryExpression	254		4908300	0					
ANR	4908377	CastExpression	"( int ) ( 0.5 + 253.0 * pow ( ( Val [ i ] - MinVal ) / ( ValRange ) , 0.25 ) )"		4908300	1					
ANR	4908378	CastTarget	int		4908300	0					
ANR	4908379	AdditiveExpression	"0.5 + 253.0 * pow ( ( Val [ i ] - MinVal ) / ( ValRange ) , 0.25 )"		4908300	1		+			
ANR	4908380	PrimaryExpression	0.5		4908300	0					
ANR	4908381	MultiplicativeExpression	"253.0 * pow ( ( Val [ i ] - MinVal ) / ( ValRange ) , 0.25 )"		4908300	1		*			
ANR	4908382	PrimaryExpression	253.0		4908300	0					
ANR	4908383	CallExpression	"pow ( ( Val [ i ] - MinVal ) / ( ValRange ) , 0.25 )"		4908300	1					
ANR	4908384	Callee	pow		4908300	0					
ANR	4908385	Identifier	pow		4908300	0					
ANR	4908386	ArgumentList	( Val [ i ] - MinVal ) / ( ValRange )		4908300	1					
ANR	4908387	Argument	( Val [ i ] - MinVal ) / ( ValRange )		4908300	0					
ANR	4908388	MultiplicativeExpression	( Val [ i ] - MinVal ) / ( ValRange )		4908300	0		/			
ANR	4908389	AdditiveExpression	Val [ i ] - MinVal		4908300	0		-			
ANR	4908390	ArrayIndexing	Val [ i ]		4908300	0					
ANR	4908391	Identifier	Val		4908300	0					
ANR	4908392	Identifier	i		4908300	1					
ANR	4908393	Identifier	MinVal		4908300	1					
ANR	4908394	Identifier	ValRange		4908300	1					
ANR	4908395	Argument	0.25		4908300	1					
ANR	4908396	PrimaryExpression	0.25		4908300	0					
ANR	4908397	ElseStatement	else		4908300	0					
ANR	4908398	ExpressionStatement	Gray = 0	1062:12:37182:37190	4908300	0	True				
ANR	4908399	AssignmentExpression	Gray = 0		4908300	0		=			
ANR	4908400	Identifier	Gray		4908300	0					
ANR	4908401	PrimaryExpression	0		4908300	1					
ANR	4908402	IfStatement	if ( ( i % array_width ) == array_width - 1 )		4908300	1					
ANR	4908403	Condition	( i % array_width ) == array_width - 1	1063:12:37204:37239	4908300	0	True				
ANR	4908404	EqualityExpression	( i % array_width ) == array_width - 1		4908300	0		==			
ANR	4908405	MultiplicativeExpression	i % array_width		4908300	0		%			
ANR	4908406	Identifier	i		4908300	0					
ANR	4908407	Identifier	array_width		4908300	1					
ANR	4908408	AdditiveExpression	array_width - 1		4908300	1		-			
ANR	4908409	Identifier	array_width		4908300	0					
ANR	4908410	PrimaryExpression	1		4908300	1					
ANR	4908411	CompoundStatement		16:50:557:557	4908300	1					
ANR	4908412	ExpressionStatement	"sprintf ( bufp , ""%02X\\n"" , Gray )"	1064:12:37256:37285	4908300	0	True				
ANR	4908413	CallExpression	"sprintf ( bufp , ""%02X\\n"" , Gray )"		4908300	0					
ANR	4908414	Callee	sprintf		4908300	0					
ANR	4908415	Identifier	sprintf		4908300	0					
ANR	4908416	ArgumentList	bufp		4908300	1					
ANR	4908417	Argument	bufp		4908300	0					
ANR	4908418	Identifier	bufp		4908300	0					
ANR	4908419	Argument	"""%02X\\n"""		4908300	1					
ANR	4908420	PrimaryExpression	"""%02X\\n"""		4908300	0					
ANR	4908421	Argument	Gray		4908300	2					
ANR	4908422	Identifier	Gray		4908300	0					
ANR	4908423	IfStatement	"if ( ( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput )"		4908300	1					
ANR	4908424	Condition	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput"	1065:16:37303:37400	4908300	0	True				
ANR	4908425	RelationalExpression	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput"		4908300	0		<			
ANR	4908426	AssignmentExpression	"code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4908300	0		=			
ANR	4908427	Identifier	code		4908300	0					
ANR	4908428	CallExpression	"gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4908300	1					
ANR	4908429	Callee	gsapi_run_string_continue		4908300	0					
ANR	4908430	Identifier	gsapi_run_string_continue		4908300	0					
ANR	4908431	ArgumentList	instance		4908300	1					
ANR	4908432	Argument	instance		4908300	0					
ANR	4908433	Identifier	instance		4908300	0					
ANR	4908434	Argument	buf		4908300	1					
ANR	4908435	Identifier	buf		4908300	0					
ANR	4908436	Argument	strlen ( buf )		4908300	2					
ANR	4908437	CallExpression	strlen ( buf )		4908300	0					
ANR	4908438	Callee	strlen		4908300	0					
ANR	4908439	Identifier	strlen		4908300	0					
ANR	4908440	ArgumentList	buf		4908300	1					
ANR	4908441	Argument	buf		4908300	0					
ANR	4908442	Identifier	buf		4908300	0					
ANR	4908443	Argument	0		4908300	3					
ANR	4908444	PrimaryExpression	0		4908300	0					
ANR	4908445	Argument	& exit_code		4908300	4					
ANR	4908446	UnaryOperationExpression	& exit_code		4908300	0					
ANR	4908447	UnaryOperator	&		4908300	0					
ANR	4908448	Identifier	exit_code		4908300	1					
ANR	4908449	Identifier	gs_error_NeedInput		4908300	1					
ANR	4908450	CompoundStatement		18:116:718:718	4908300	1					
ANR	4908451	ExpressionStatement	"printf ( "" during image data for DoImage returned code = %d\\n"" , code )"	1066:16:37421:37488	4908300	0	True				
ANR	4908452	CallExpression	"printf ( "" during image data for DoImage returned code = %d\\n"" , code )"		4908300	0					
ANR	4908453	Callee	printf		4908300	0					
ANR	4908454	Identifier	printf		4908300	0					
ANR	4908455	ArgumentList	""" during image data for DoImage returned code = %d\\n"""		4908300	1					
ANR	4908456	Argument	""" during image data for DoImage returned code = %d\\n"""		4908300	0					
ANR	4908457	PrimaryExpression	""" during image data for DoImage returned code = %d\\n"""		4908300	0					
ANR	4908458	Argument	code		4908300	1					
ANR	4908459	Identifier	code		4908300	0					
ANR	4908460	ReturnStatement	return - 1 ;	1067:16:37506:37515	4908300	1	True				
ANR	4908461	UnaryOperationExpression	- 1		4908300	0					
ANR	4908462	UnaryOperator	-		4908300	0					
ANR	4908463	PrimaryExpression	1		4908300	1					
ANR	4908464	ExpressionStatement	bufp = buf	1069:12:37543:37553	4908300	2	True				
ANR	4908465	AssignmentExpression	bufp = buf		4908300	0		=			
ANR	4908466	Identifier	bufp		4908300	0					
ANR	4908467	Identifier	buf		4908300	1					
ANR	4908468	ElseStatement	else		4908300	0					
ANR	4908469	CompoundStatement		23:15:885:885	4908300	0					
ANR	4908470	ExpressionStatement	"sprintf ( bufp , ""%02X"" , Gray )"	1071:12:37584:37611	4908300	0	True				
ANR	4908471	CallExpression	"sprintf ( bufp , ""%02X"" , Gray )"		4908300	0					
ANR	4908472	Callee	sprintf		4908300	0					
ANR	4908473	Identifier	sprintf		4908300	0					
ANR	4908474	ArgumentList	bufp		4908300	1					
ANR	4908475	Argument	bufp		4908300	0					
ANR	4908476	Identifier	bufp		4908300	0					
ANR	4908477	Argument	"""%02X"""		4908300	1					
ANR	4908478	PrimaryExpression	"""%02X"""		4908300	0					
ANR	4908479	Argument	Gray		4908300	2					
ANR	4908480	Identifier	Gray		4908300	0					
ANR	4908481	ExpressionStatement	bufp += 2	1072:12:37625:37634	4908300	1	True				
ANR	4908482	AssignmentExpression	bufp += 2		4908300	0		+=			
ANR	4908483	Identifier	bufp		4908300	0					
ANR	4908484	PrimaryExpression	2		4908300	1					
ANR	4908485	ReturnStatement	return 0 ;	1075:4:37656:37664	4908300	6	True				
ANR	4908486	PrimaryExpression	0		4908300	0					
ANR	4908487	ReturnType	int		4908300	1					
ANR	4908488	Identifier	update_gs_image		4908300	2					
ANR	4908489	ParameterList			4908300	3					
ANR	4908490	CFGEntryNode	ENTRY		4908300		True				
ANR	4908491	CFGExitNode	EXIT		4908300		True				
ANR	4908492	Symbol	Val		4908300						
ANR	4908493	Symbol	Gray		4908300						
ANR	4908494	Symbol	ValRange		4908300						
ANR	4908495	Symbol	gsapi_run_string_continue		4908300						
ANR	4908496	Symbol	code		4908300						
ANR	4908497	Symbol	instance		4908300						
ANR	4908498	Symbol	& exit_code		4908300						
ANR	4908499	Symbol	i		4908300						
ANR	4908500	Symbol	j		4908300						
ANR	4908501	Symbol	k		4908300						
ANR	4908502	Symbol	array_height		4908300						
ANR	4908503	Symbol	MinVal		4908300						
ANR	4908504	Symbol	strlen		4908300						
ANR	4908505	Symbol	buf		4908300						
ANR	4908506	Symbol	BIG_FLOAT		4908300						
ANR	4908507	Symbol	bufp		4908300						
ANR	4908508	Symbol	* i		4908300						
ANR	4908509	Symbol	array_width		4908300						
ANR	4908510	Symbol	* Val		4908300						
ANR	4908511	Symbol	exit_code		4908300						
ANR	4908512	Symbol	pow		4908300						
ANR	4908513	Symbol	gs_error_NeedInput		4908300						
ANR	4908514	Function	update_gs_dot	1078:0:37669:39224							
ANR	4908515	FunctionDef	"update_gs_dot (int choice_X , int choice_Y , int last)"		4908514	0					
ANR	4908516	CompoundStatement		1080:0:37725:39224	4908514	0					
ANR	4908517	IdentifierDeclStatement	char buf [ 256 ] ;	1081:4:37731:37744	4908514	0	True				
ANR	4908518	IdentifierDecl	buf [ 256 ]		4908514	0					
ANR	4908519	IdentifierDeclType	char [ 256 ]		4908514	0					
ANR	4908520	Identifier	buf		4908514	1					
ANR	4908521	PrimaryExpression	256		4908514	2					
ANR	4908522	IdentifierDeclStatement	"int code , exit_code ;"	1082:4:37750:37773	4908514	1	True				
ANR	4908523	IdentifierDecl	code		4908514	0					
ANR	4908524	IdentifierDeclType	int		4908514	0					
ANR	4908525	Identifier	code		4908514	1					
ANR	4908526	IdentifierDecl	exit_code		4908514	1					
ANR	4908527	IdentifierDeclType	int		4908514	0					
ANR	4908528	Identifier	exit_code		4908514	1					
ANR	4908529	IfStatement	if ( loop_ctr <= 1 )		4908514	2					
ANR	4908530	Condition	loop_ctr <= 1	1084:8:37784:37796	4908514	0	True				
ANR	4908531	RelationalExpression	loop_ctr <= 1		4908514	0		<=			
ANR	4908532	Identifier	loop_ctr		4908514	0					
ANR	4908533	PrimaryExpression	1		4908514	1					
ANR	4908534	CompoundStatement		5:23:73:73	4908514	1					
ANR	4908535	ExpressionStatement	"sprintf ( buf , ""%d %d %d Dot\\n"" , choice_X , choice_Y , 180 )"	1085:8:37809:37864	4908514	0	True				
ANR	4908536	CallExpression	"sprintf ( buf , ""%d %d %d Dot\\n"" , choice_X , choice_Y , 180 )"		4908514	0					
ANR	4908537	Callee	sprintf		4908514	0					
ANR	4908538	Identifier	sprintf		4908514	0					
ANR	4908539	ArgumentList	buf		4908514	1					
ANR	4908540	Argument	buf		4908514	0					
ANR	4908541	Identifier	buf		4908514	0					
ANR	4908542	Argument	"""%d %d %d Dot\\n"""		4908514	1					
ANR	4908543	PrimaryExpression	"""%d %d %d Dot\\n"""		4908514	0					
ANR	4908544	Argument	choice_X		4908514	2					
ANR	4908545	Identifier	choice_X		4908514	0					
ANR	4908546	Argument	choice_Y		4908514	3					
ANR	4908547	Identifier	choice_Y		4908514	0					
ANR	4908548	Argument	180		4908514	4					
ANR	4908549	PrimaryExpression	180		4908514	0					
ANR	4908550	IfStatement	"if ( ( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput )"		4908514	1					
ANR	4908551	Condition	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput"	1086:12:37878:37975	4908514	0	True				
ANR	4908552	RelationalExpression	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput"		4908514	0		<			
ANR	4908553	AssignmentExpression	"code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4908514	0		=			
ANR	4908554	Identifier	code		4908514	0					
ANR	4908555	CallExpression	"gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4908514	1					
ANR	4908556	Callee	gsapi_run_string_continue		4908514	0					
ANR	4908557	Identifier	gsapi_run_string_continue		4908514	0					
ANR	4908558	ArgumentList	instance		4908514	1					
ANR	4908559	Argument	instance		4908514	0					
ANR	4908560	Identifier	instance		4908514	0					
ANR	4908561	Argument	buf		4908514	1					
ANR	4908562	Identifier	buf		4908514	0					
ANR	4908563	Argument	strlen ( buf )		4908514	2					
ANR	4908564	CallExpression	strlen ( buf )		4908514	0					
ANR	4908565	Callee	strlen		4908514	0					
ANR	4908566	Identifier	strlen		4908514	0					
ANR	4908567	ArgumentList	buf		4908514	1					
ANR	4908568	Argument	buf		4908514	0					
ANR	4908569	Identifier	buf		4908514	0					
ANR	4908570	Argument	0		4908514	3					
ANR	4908571	PrimaryExpression	0		4908514	0					
ANR	4908572	Argument	& exit_code		4908514	4					
ANR	4908573	UnaryOperationExpression	& exit_code		4908514	0					
ANR	4908574	UnaryOperator	&		4908514	0					
ANR	4908575	Identifier	exit_code		4908514	1					
ANR	4908576	Identifier	gs_error_NeedInput		4908514	1					
ANR	4908577	CompoundStatement		7:112:252:252	4908514	1					
ANR	4908578	ExpressionStatement	"printf ( "" Execution of Dot returned code = %d\\n"" , code )"	1087:12:37992:38046	4908514	0	True				
ANR	4908579	CallExpression	"printf ( "" Execution of Dot returned code = %d\\n"" , code )"		4908514	0					
ANR	4908580	Callee	printf		4908514	0					
ANR	4908581	Identifier	printf		4908514	0					
ANR	4908582	ArgumentList	""" Execution of Dot returned code = %d\\n"""		4908514	1					
ANR	4908583	Argument	""" Execution of Dot returned code = %d\\n"""		4908514	0					
ANR	4908584	PrimaryExpression	""" Execution of Dot returned code = %d\\n"""		4908514	0					
ANR	4908585	Argument	code		4908514	1					
ANR	4908586	Identifier	code		4908514	0					
ANR	4908587	ReturnStatement	return - 1 ;	1088:12:38060:38069	4908514	1	True				
ANR	4908588	UnaryOperationExpression	- 1		4908514	0					
ANR	4908589	UnaryOperator	-		4908514	0					
ANR	4908590	PrimaryExpression	1		4908514	1					
ANR	4908591	IfStatement	if ( last )		4908514	3					
ANR	4908592	Condition	last	1091:8:38095:38098	4908514	0	True				
ANR	4908593	Identifier	last		4908514	0					
ANR	4908594	CompoundStatement		12:14:375:375	4908514	1					
ANR	4908595	ExpressionStatement	"sprintf ( buf , ""1 false .outputpage\\n"" )"	1093:8:38173:38210	4908514	0	True				
ANR	4908596	CallExpression	"sprintf ( buf , ""1 false .outputpage\\n"" )"		4908514	0					
ANR	4908597	Callee	sprintf		4908514	0					
ANR	4908598	Identifier	sprintf		4908514	0					
ANR	4908599	ArgumentList	buf		4908514	1					
ANR	4908600	Argument	buf		4908514	0					
ANR	4908601	Identifier	buf		4908514	0					
ANR	4908602	Argument	"""1 false .outputpage\\n"""		4908514	1					
ANR	4908603	PrimaryExpression	"""1 false .outputpage\\n"""		4908514	0					
ANR	4908604	IfStatement	"if ( ( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput )"		4908514	1					
ANR	4908605	Condition	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput"	1094:12:38224:38321	4908514	0	True				
ANR	4908606	RelationalExpression	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput"		4908514	0		<			
ANR	4908607	AssignmentExpression	"code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4908514	0		=			
ANR	4908608	Identifier	code		4908514	0					
ANR	4908609	CallExpression	"gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4908514	1					
ANR	4908610	Callee	gsapi_run_string_continue		4908514	0					
ANR	4908611	Identifier	gsapi_run_string_continue		4908514	0					
ANR	4908612	ArgumentList	instance		4908514	1					
ANR	4908613	Argument	instance		4908514	0					
ANR	4908614	Identifier	instance		4908514	0					
ANR	4908615	Argument	buf		4908514	1					
ANR	4908616	Identifier	buf		4908514	0					
ANR	4908617	Argument	strlen ( buf )		4908514	2					
ANR	4908618	CallExpression	strlen ( buf )		4908514	0					
ANR	4908619	Callee	strlen		4908514	0					
ANR	4908620	Identifier	strlen		4908514	0					
ANR	4908621	ArgumentList	buf		4908514	1					
ANR	4908622	Argument	buf		4908514	0					
ANR	4908623	Identifier	buf		4908514	0					
ANR	4908624	Argument	0		4908514	3					
ANR	4908625	PrimaryExpression	0		4908514	0					
ANR	4908626	Argument	& exit_code		4908514	4					
ANR	4908627	UnaryOperationExpression	& exit_code		4908514	0					
ANR	4908628	UnaryOperator	&		4908514	0					
ANR	4908629	Identifier	exit_code		4908514	1					
ANR	4908630	Identifier	gs_error_NeedInput		4908514	1					
ANR	4908631	CompoundStatement		15:112:598:598	4908514	1					
ANR	4908632	ExpressionStatement	"printf ( "" Execution of .outputpage returned code = %d\\n"" , code )"	1095:12:38338:38400	4908514	0	True				
ANR	4908633	CallExpression	"printf ( "" Execution of .outputpage returned code = %d\\n"" , code )"		4908514	0					
ANR	4908634	Callee	printf		4908514	0					
ANR	4908635	Identifier	printf		4908514	0					
ANR	4908636	ArgumentList	""" Execution of .outputpage returned code = %d\\n"""		4908514	1					
ANR	4908637	Argument	""" Execution of .outputpage returned code = %d\\n"""		4908514	0					
ANR	4908638	PrimaryExpression	""" Execution of .outputpage returned code = %d\\n"""		4908514	0					
ANR	4908639	Argument	code		4908514	1					
ANR	4908640	Identifier	code		4908514	0					
ANR	4908641	ReturnStatement	return - 1 ;	1096:12:38414:38423	4908514	1	True				
ANR	4908642	UnaryOperationExpression	- 1		4908514	0					
ANR	4908643	UnaryOperator	-		4908514	0					
ANR	4908644	PrimaryExpression	1		4908514	1					
ANR	4908645	IfStatement	if ( -- loop_ctr <= 0 )		4908514	2					
ANR	4908646	Condition	-- loop_ctr <= 0	1100:12:38449:38463	4908514	0	True				
ANR	4908647	RelationalExpression	-- loop_ctr <= 0		4908514	0		<=			
ANR	4908648	UnaryExpression	-- loop_ctr		4908514	0					
ANR	4908649	IncDec	--		4908514	0					
ANR	4908650	Identifier	loop_ctr		4908514	1					
ANR	4908651	PrimaryExpression	0		4908514	1					
ANR	4908652	CompoundStatement		21:29:740:740	4908514	1					
ANR	4908653	ExpressionStatement	loop_ctr = getch ( )	1102:12:38497:38515	4908514	0	True				
ANR	4908654	AssignmentExpression	loop_ctr = getch ( )		4908514	0		=			
ANR	4908655	Identifier	loop_ctr		4908514	0					
ANR	4908656	CallExpression	getch ( )		4908514	1					
ANR	4908657	Callee	getch		4908514	0					
ANR	4908658	Identifier	getch		4908514	0					
ANR	4908659	ArgumentList			4908514	1					
ANR	4908660	IfStatement	if ( loop_ctr == 'q' )		4908514	1					
ANR	4908661	Condition	loop_ctr == 'q'	1106:16:38580:38594	4908514	0	True				
ANR	4908662	EqualityExpression	loop_ctr == 'q'		4908514	0		==			
ANR	4908663	Identifier	loop_ctr		4908514	0					
ANR	4908664	PrimaryExpression	'q'		4908514	1					
ANR	4908665	ExpressionStatement	exit ( 1 )	1107:16:38613:38620	4908514	1	True				
ANR	4908666	CallExpression	exit ( 1 )		4908514	0					
ANR	4908667	Callee	exit		4908514	0					
ANR	4908668	Identifier	exit		4908514	0					
ANR	4908669	ArgumentList	1		4908514	1					
ANR	4908670	Argument	1		4908514	0					
ANR	4908671	PrimaryExpression	1		4908514	0					
ANR	4908672	IfStatement	if ( loop_ctr == 27 || loop_ctr == 'g' )		4908514	2					
ANR	4908673	Condition	loop_ctr == 27 || loop_ctr == 'g'	1108:16:38638:38670	4908514	0	True				
ANR	4908674	OrExpression	loop_ctr == 27 || loop_ctr == 'g'		4908514	0		||			
ANR	4908675	EqualityExpression	loop_ctr == 27		4908514	0		==			
ANR	4908676	Identifier	loop_ctr		4908514	0					
ANR	4908677	PrimaryExpression	27		4908514	1					
ANR	4908678	EqualityExpression	loop_ctr == 'g'		4908514	1		==			
ANR	4908679	Identifier	loop_ctr		4908514	0					
ANR	4908680	PrimaryExpression	'g'		4908514	1					
ANR	4908681	ExpressionStatement	loop_ctr = 9999999	1109:16:38720:38738	4908514	1	True				
ANR	4908682	AssignmentExpression	loop_ctr = 9999999		4908514	0		=			
ANR	4908683	Identifier	loop_ctr		4908514	0					
ANR	4908684	PrimaryExpression	9999999		4908514	1					
ANR	4908685	ElseStatement	else		4908514	0					
ANR	4908686	ExpressionStatement	loop_ctr -= ' '	1111:16:38773:38788	4908514	0	True				
ANR	4908687	AssignmentExpression	loop_ctr -= ' '		4908514	0		-=			
ANR	4908688	Identifier	loop_ctr		4908514	0					
ANR	4908689	PrimaryExpression	' '		4908514	1					
ANR	4908690	IfStatement	if ( loop_ctr < 0 )		4908514	3					
ANR	4908691	Condition	loop_ctr < 0	1112:16:38806:38817	4908514	0	True				
ANR	4908692	RelationalExpression	loop_ctr < 0		4908514	0		<			
ANR	4908693	Identifier	loop_ctr		4908514	0					
ANR	4908694	PrimaryExpression	0		4908514	1					
ANR	4908695	ExpressionStatement	loop_ctr = 1	1113:16:38836:38848	4908514	1	True				
ANR	4908696	AssignmentExpression	loop_ctr = 1		4908514	0		=			
ANR	4908697	Identifier	loop_ctr		4908514	0					
ANR	4908698	PrimaryExpression	1		4908514	1					
ANR	4908699	ExpressionStatement	"sprintf ( buf , ""%d %d %d Dot\\n"" , choice_X , choice_Y , 0 )"	1117:8:38934:38987	4908514	3	True				
ANR	4908700	CallExpression	"sprintf ( buf , ""%d %d %d Dot\\n"" , choice_X , choice_Y , 0 )"		4908514	0					
ANR	4908701	Callee	sprintf		4908514	0					
ANR	4908702	Identifier	sprintf		4908514	0					
ANR	4908703	ArgumentList	buf		4908514	1					
ANR	4908704	Argument	buf		4908514	0					
ANR	4908705	Identifier	buf		4908514	0					
ANR	4908706	Argument	"""%d %d %d Dot\\n"""		4908514	1					
ANR	4908707	PrimaryExpression	"""%d %d %d Dot\\n"""		4908514	0					
ANR	4908708	Argument	choice_X		4908514	2					
ANR	4908709	Identifier	choice_X		4908514	0					
ANR	4908710	Argument	choice_Y		4908514	3					
ANR	4908711	Identifier	choice_Y		4908514	0					
ANR	4908712	Argument	0		4908514	4					
ANR	4908713	PrimaryExpression	0		4908514	0					
ANR	4908714	IfStatement	"if ( ( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput )"		4908514	4					
ANR	4908715	Condition	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput"	1118:12:39001:39098	4908514	0	True				
ANR	4908716	RelationalExpression	"( code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code ) ) < gs_error_NeedInput"		4908514	0		<			
ANR	4908717	AssignmentExpression	"code = gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4908514	0		=			
ANR	4908718	Identifier	code		4908514	0					
ANR	4908719	CallExpression	"gsapi_run_string_continue ( instance , buf , strlen ( buf ) , 0 , & exit_code )"		4908514	1					
ANR	4908720	Callee	gsapi_run_string_continue		4908514	0					
ANR	4908721	Identifier	gsapi_run_string_continue		4908514	0					
ANR	4908722	ArgumentList	instance		4908514	1					
ANR	4908723	Argument	instance		4908514	0					
ANR	4908724	Identifier	instance		4908514	0					
ANR	4908725	Argument	buf		4908514	1					
ANR	4908726	Identifier	buf		4908514	0					
ANR	4908727	Argument	strlen ( buf )		4908514	2					
ANR	4908728	CallExpression	strlen ( buf )		4908514	0					
ANR	4908729	Callee	strlen		4908514	0					
ANR	4908730	Identifier	strlen		4908514	0					
ANR	4908731	ArgumentList	buf		4908514	1					
ANR	4908732	Argument	buf		4908514	0					
ANR	4908733	Identifier	buf		4908514	0					
ANR	4908734	Argument	0		4908514	3					
ANR	4908735	PrimaryExpression	0		4908514	0					
ANR	4908736	Argument	& exit_code		4908514	4					
ANR	4908737	UnaryOperationExpression	& exit_code		4908514	0					
ANR	4908738	UnaryOperator	&		4908514	0					
ANR	4908739	Identifier	exit_code		4908514	1					
ANR	4908740	Identifier	gs_error_NeedInput		4908514	1					
ANR	4908741	CompoundStatement		39:112:1375:1375	4908514	1					
ANR	4908742	ExpressionStatement	"printf ( "" Execution of Dot returned code = %d\\n"" , code )"	1119:12:39115:39169	4908514	0	True				
ANR	4908743	CallExpression	"printf ( "" Execution of Dot returned code = %d\\n"" , code )"		4908514	0					
ANR	4908744	Callee	printf		4908514	0					
ANR	4908745	Identifier	printf		4908514	0					
ANR	4908746	ArgumentList	""" Execution of Dot returned code = %d\\n"""		4908514	1					
ANR	4908747	Argument	""" Execution of Dot returned code = %d\\n"""		4908514	0					
ANR	4908748	PrimaryExpression	""" Execution of Dot returned code = %d\\n"""		4908514	0					
ANR	4908749	Argument	code		4908514	1					
ANR	4908750	Identifier	code		4908514	0					
ANR	4908751	ReturnStatement	return - 1 ;	1120:12:39183:39192	4908514	1	True				
ANR	4908752	UnaryOperationExpression	- 1		4908514	0					
ANR	4908753	UnaryOperator	-		4908514	0					
ANR	4908754	PrimaryExpression	1		4908514	1					
ANR	4908755	ReturnStatement	return 0 ;	1123:4:39214:39222	4908514	4	True				
ANR	4908756	PrimaryExpression	0		4908514	0					
ANR	4908757	ReturnType	int		4908514	1					
ANR	4908758	Identifier	update_gs_dot		4908514	2					
ANR	4908759	ParameterList	"int choice_X , int choice_Y , int last"		4908514	3					
ANR	4908760	Parameter	int choice_X	1079:14:37687:37698	4908514	0	True				
ANR	4908761	ParameterType	int		4908514	0					
ANR	4908762	Identifier	choice_X		4908514	1					
ANR	4908763	Parameter	int choice_Y	1079:28:37701:37712	4908514	1	True				
ANR	4908764	ParameterType	int		4908514	0					
ANR	4908765	Identifier	choice_Y		4908514	1					
ANR	4908766	Parameter	int last	1079:42:37715:37722	4908514	2	True				
ANR	4908767	ParameterType	int		4908514	0					
ANR	4908768	Identifier	last		4908514	1					
ANR	4908769	CFGEntryNode	ENTRY		4908514		True				
ANR	4908770	CFGExitNode	EXIT		4908514		True				
ANR	4908771	Symbol	getch		4908514						
ANR	4908772	Symbol	gsapi_run_string_continue		4908514						
ANR	4908773	Symbol	code		4908514						
ANR	4908774	Symbol	& exit_code		4908514						
ANR	4908775	Symbol	instance		4908514						
ANR	4908776	Symbol	last		4908514						
ANR	4908777	Symbol	choice_X		4908514						
ANR	4908778	Symbol	choice_Y		4908514						
ANR	4908779	Symbol	strlen		4908514						
ANR	4908780	Symbol	buf		4908514						
ANR	4908781	Symbol	loop_ctr		4908514						
ANR	4908782	Symbol	exit_code		4908514						
ANR	4908783	Symbol	gs_error_NeedInput		4908514						
ANR	4908784	Function	close_gs_display	1126:0:39227:39403							
ANR	4908785	FunctionDef	close_gs_display ()		4908784	0					
ANR	4908786	CompoundStatement		1128:0:39251:39403	4908784	0					
ANR	4908787	IdentifierDeclStatement	int exit_code ;	1129:4:39257:39270	4908784	0	True				
ANR	4908788	IdentifierDecl	exit_code		4908784	0					
ANR	4908789	IdentifierDeclType	int		4908784	0					
ANR	4908790	Identifier	exit_code		4908784	1					
ANR	4908791	ExpressionStatement	"gsapi_run_string_end ( instance , 0 , & exit_code )"	1131:4:39277:39322	4908784	1	True				
ANR	4908792	CallExpression	"gsapi_run_string_end ( instance , 0 , & exit_code )"		4908784	0					
ANR	4908793	Callee	gsapi_run_string_end		4908784	0					
ANR	4908794	Identifier	gsapi_run_string_end		4908784	0					
ANR	4908795	ArgumentList	instance		4908784	1					
ANR	4908796	Argument	instance		4908784	0					
ANR	4908797	Identifier	instance		4908784	0					
ANR	4908798	Argument	0		4908784	1					
ANR	4908799	PrimaryExpression	0		4908784	0					
ANR	4908800	Argument	& exit_code		4908784	2					
ANR	4908801	UnaryOperationExpression	& exit_code		4908784	0					
ANR	4908802	UnaryOperator	&		4908784	0					
ANR	4908803	Identifier	exit_code		4908784	1					
ANR	4908804	Label	close_dll_exit :	1132:0:39324:39338	4908784	2	True				
ANR	4908805	Identifier	close_dll_exit		4908784	0					
ANR	4908806	ExpressionStatement	gsapi_exit ( instance )	1133:4:39344:39364	4908784	3	True				
ANR	4908807	CallExpression	gsapi_exit ( instance )		4908784	0					
ANR	4908808	Callee	gsapi_exit		4908784	0					
ANR	4908809	Identifier	gsapi_exit		4908784	0					
ANR	4908810	ArgumentList	instance		4908784	1					
ANR	4908811	Argument	instance		4908784	0					
ANR	4908812	Identifier	instance		4908784	0					
ANR	4908813	ExpressionStatement	gsapi_delete_instance ( instance )	1134:4:39370:39401	4908784	4	True				
ANR	4908814	CallExpression	gsapi_delete_instance ( instance )		4908784	0					
ANR	4908815	Callee	gsapi_delete_instance		4908784	0					
ANR	4908816	Identifier	gsapi_delete_instance		4908784	0					
ANR	4908817	ArgumentList	instance		4908784	1					
ANR	4908818	Argument	instance		4908784	0					
ANR	4908819	Identifier	instance		4908784	0					
ANR	4908820	ReturnType	void		4908784	1					
ANR	4908821	Identifier	close_gs_display		4908784	2					
ANR	4908822	ParameterList			4908784	3					
ANR	4908823	CFGEntryNode	ENTRY		4908784		True				
ANR	4908824	CFGExitNode	EXIT		4908784		True				
ANR	4908825	Symbol	& exit_code		4908784						
ANR	4908826	Symbol	instance		4908784						
ANR	4908827	Symbol	exit_code		4908784						
