command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	7319113	File	data/converged/CVE-2018-16863_ghostpdl/libpng_contrib_tools_genpng.c								
ANR	7319114	ClassDef	color	85:13:3180:3765							
ANR	7319115	DeclStmt									
ANR	7319116	Decl							const char	const char *	name
ANR	7319117	DeclStmt									
ANR	7319118	Decl							double	double	red
ANR	7319119	DeclStmt									
ANR	7319120	Decl							double	double	green
ANR	7319121	DeclStmt									
ANR	7319122	Decl							double	double	blue
ANR	7319123	DeclStmt									
ANR	7319124	Decl							color	color [ ]	colors
ANR	7319125	Function	color_of	111:0:3825:4094							
ANR	7319126	FunctionDef	color_of (const char * arg)		7319125	0					
ANR	7319127	CompoundStatement		113:0:3879:4094	7319125	0					
ANR	7319128	IdentifierDeclStatement	int icolor = color_count ;	114:3:3884:3908	7319125	0	True				
ANR	7319129	IdentifierDecl	icolor = color_count		7319125	0					
ANR	7319130	IdentifierDeclType	int		7319125	0					
ANR	7319131	Identifier	icolor		7319125	1					
ANR	7319132	AssignmentExpression	icolor = color_count		7319125	2		=			
ANR	7319133	Identifier	color_count		7319125	0					
ANR	7319134	Identifier	color_count		7319125	1					
ANR	7319135	WhileStatement	while ( -- icolor >= 0 )		7319125	1					
ANR	7319136	Condition	-- icolor >= 0	116:10:3921:3933	7319125	0	True				
ANR	7319137	RelationalExpression	-- icolor >= 0		7319125	0		>=			
ANR	7319138	UnaryExpression	-- icolor		7319125	0					
ANR	7319139	IncDec	--		7319125	0					
ANR	7319140	Identifier	icolor		7319125	1					
ANR	7319141	PrimaryExpression	0		7319125	1					
ANR	7319142	CompoundStatement		5:3:59:59	7319125	1					
ANR	7319143	IfStatement	"if ( strcmp ( colors [ icolor ] . name , arg ) == 0 )"		7319125	0					
ANR	7319144	Condition	"strcmp ( colors [ icolor ] . name , arg ) == 0"	118:10:3951:3987	7319125	0	True				
ANR	7319145	EqualityExpression	"strcmp ( colors [ icolor ] . name , arg ) == 0"		7319125	0		==			
ANR	7319146	CallExpression	"strcmp ( colors [ icolor ] . name , arg )"		7319125	0					
ANR	7319147	Callee	strcmp		7319125	0					
ANR	7319148	Identifier	strcmp		7319125	0					
ANR	7319149	ArgumentList	colors [ icolor ] . name		7319125	1					
ANR	7319150	Argument	colors [ icolor ] . name		7319125	0					
ANR	7319151	MemberAccess	colors [ icolor ] . name		7319125	0					
ANR	7319152	ArrayIndexing	colors [ icolor ]		7319125	0					
ANR	7319153	Identifier	colors		7319125	0					
ANR	7319154	Identifier	icolor		7319125	1					
ANR	7319155	Identifier	name		7319125	1					
ANR	7319156	Argument	arg		7319125	1					
ANR	7319157	Identifier	arg		7319125	0					
ANR	7319158	PrimaryExpression	0		7319125	1					
ANR	7319159	ReturnStatement	return colors + icolor ;	119:9:3999:4019	7319125	1	True				
ANR	7319160	AdditiveExpression	colors + icolor		7319125	0		+			
ANR	7319161	Identifier	colors		7319125	0					
ANR	7319162	Identifier	icolor		7319125	1					
ANR	7319163	ExpressionStatement	"fprintf ( stderr , ""genpng: invalid color %s\\n"" , arg )"	122:3:4030:4080	7319125	2	True				
ANR	7319164	CallExpression	"fprintf ( stderr , ""genpng: invalid color %s\\n"" , arg )"		7319125	0					
ANR	7319165	Callee	fprintf		7319125	0					
ANR	7319166	Identifier	fprintf		7319125	0					
ANR	7319167	ArgumentList	stderr		7319125	1					
ANR	7319168	Argument	stderr		7319125	0					
ANR	7319169	Identifier	stderr		7319125	0					
ANR	7319170	Argument	"""genpng: invalid color %s\\n"""		7319125	1					
ANR	7319171	PrimaryExpression	"""genpng: invalid color %s\\n"""		7319125	0					
ANR	7319172	Argument	arg		7319125	2					
ANR	7319173	Identifier	arg		7319125	0					
ANR	7319174	ExpressionStatement	exit ( 1 )	123:3:4085:4092	7319125	3	True				
ANR	7319175	CallExpression	exit ( 1 )		7319125	0					
ANR	7319176	Callee	exit		7319125	0					
ANR	7319177	Identifier	exit		7319125	0					
ANR	7319178	ArgumentList	1		7319125	1					
ANR	7319179	Argument	1		7319125	0					
ANR	7319180	PrimaryExpression	1		7319125	0					
ANR	7319181	ReturnType	static const struct color *		7319125	1					
ANR	7319182	Identifier	color_of		7319125	2					
ANR	7319183	ParameterList	const char * arg		7319125	3					
ANR	7319184	Parameter	const char * arg	112:9:3862:3876	7319125	0	True				
ANR	7319185	ParameterType	const char *		7319125	0					
ANR	7319186	Identifier	arg		7319125	1					
ANR	7319187	CFGEntryNode	ENTRY		7319125		True				
ANR	7319188	CFGExitNode	EXIT		7319125		True				
ANR	7319189	Symbol	strcmp		7319125						
ANR	7319190	Symbol	* colors		7319125						
ANR	7319191	Symbol	arg		7319125						
ANR	7319192	Symbol	color_count		7319125						
ANR	7319193	Symbol	colors [ icolor ] . name		7319125						
ANR	7319194	Symbol	* icolor		7319125						
ANR	7319195	Symbol	stderr		7319125						
ANR	7319196	Symbol	icolor		7319125						
ANR	7319197	Symbol	colors		7319125						
ANR	7319198	Function	width_of	126:0:4097:4403							
ANR	7319199	FunctionDef	width_of (const char * arg)		7319198	0					
ANR	7319200	CompoundStatement		128:0:4137:4403	7319198	0					
ANR	7319201	IfStatement	"if ( strcmp ( arg , ""filled"" ) == 0 )"		7319198	0					
ANR	7319202	Condition	"strcmp ( arg , ""filled"" ) == 0"	129:7:4146:4171	7319198	0	True				
ANR	7319203	EqualityExpression	"strcmp ( arg , ""filled"" ) == 0"		7319198	0		==			
ANR	7319204	CallExpression	"strcmp ( arg , ""filled"" )"		7319198	0					
ANR	7319205	Callee	strcmp		7319198	0					
ANR	7319206	Identifier	strcmp		7319198	0					
ANR	7319207	ArgumentList	arg		7319198	1					
ANR	7319208	Argument	arg		7319198	0					
ANR	7319209	Identifier	arg		7319198	0					
ANR	7319210	Argument	"""filled"""		7319198	1					
ANR	7319211	PrimaryExpression	"""filled"""		7319198	0					
ANR	7319212	PrimaryExpression	0		7319198	1					
ANR	7319213	ReturnStatement	return 0 ;	130:6:4180:4188	7319198	1	True				
ANR	7319214	PrimaryExpression	0		7319198	0					
ANR	7319215	ElseStatement	else		7319198	0					
ANR	7319216	CompoundStatement		8:6:95:122	7319198	0					
ANR	7319217	IdentifierDeclStatement	char * ep = NULL ;	134:6:4210:4225	7319198	0	True				
ANR	7319218	IdentifierDecl	* ep = NULL		7319198	0					
ANR	7319219	IdentifierDeclType	char *		7319198	0					
ANR	7319220	Identifier	ep		7319198	1					
ANR	7319221	AssignmentExpression	* ep = NULL		7319198	2		=			
ANR	7319222	Identifier	NULL		7319198	0					
ANR	7319223	Identifier	NULL		7319198	1					
ANR	7319224	IdentifierDeclStatement	"double w = strtod ( arg , & ep ) ;"	135:6:4233:4260	7319198	1	True				
ANR	7319225	IdentifierDecl	"w = strtod ( arg , & ep )"		7319198	0					
ANR	7319226	IdentifierDeclType	double		7319198	0					
ANR	7319227	Identifier	w		7319198	1					
ANR	7319228	AssignmentExpression	"w = strtod ( arg , & ep )"		7319198	2		=			
ANR	7319229	Identifier	w		7319198	0					
ANR	7319230	CallExpression	"strtod ( arg , & ep )"		7319198	1					
ANR	7319231	Callee	strtod		7319198	0					
ANR	7319232	Identifier	strtod		7319198	0					
ANR	7319233	ArgumentList	arg		7319198	1					
ANR	7319234	Argument	arg		7319198	0					
ANR	7319235	Identifier	arg		7319198	0					
ANR	7319236	Argument	& ep		7319198	1					
ANR	7319237	UnaryOperationExpression	& ep		7319198	0					
ANR	7319238	UnaryOperator	&		7319198	0					
ANR	7319239	Identifier	ep		7319198	1					
ANR	7319240	IfStatement	if ( ep != NULL && * ep == 0 && w > 0 )		7319198	2					
ANR	7319241	Condition	ep != NULL && * ep == 0 && w > 0	137:10:4273:4303	7319198	0	True				
ANR	7319242	AndExpression	ep != NULL && * ep == 0 && w > 0		7319198	0		&&			
ANR	7319243	EqualityExpression	ep != NULL		7319198	0		!=			
ANR	7319244	Identifier	ep		7319198	0					
ANR	7319245	Identifier	NULL		7319198	1					
ANR	7319246	AndExpression	* ep == 0 && w > 0		7319198	1		&&			
ANR	7319247	EqualityExpression	* ep == 0		7319198	0		==			
ANR	7319248	UnaryOperationExpression	* ep		7319198	0					
ANR	7319249	UnaryOperator	*		7319198	0					
ANR	7319250	Identifier	ep		7319198	1					
ANR	7319251	PrimaryExpression	0		7319198	1					
ANR	7319252	RelationalExpression	w > 0		7319198	1		>			
ANR	7319253	Identifier	w		7319198	0					
ANR	7319254	PrimaryExpression	0		7319198	1					
ANR	7319255	ReturnStatement	return w ;	138:9:4315:4323	7319198	1	True				
ANR	7319256	Identifier	w		7319198	0					
ANR	7319257	ExpressionStatement	"fprintf ( stderr , ""genpng: invalid line width %s\\n"" , arg )"	141:3:4334:4389	7319198	1	True				
ANR	7319258	CallExpression	"fprintf ( stderr , ""genpng: invalid line width %s\\n"" , arg )"		7319198	0					
ANR	7319259	Callee	fprintf		7319198	0					
ANR	7319260	Identifier	fprintf		7319198	0					
ANR	7319261	ArgumentList	stderr		7319198	1					
ANR	7319262	Argument	stderr		7319198	0					
ANR	7319263	Identifier	stderr		7319198	0					
ANR	7319264	Argument	"""genpng: invalid line width %s\\n"""		7319198	1					
ANR	7319265	PrimaryExpression	"""genpng: invalid line width %s\\n"""		7319198	0					
ANR	7319266	Argument	arg		7319198	2					
ANR	7319267	Identifier	arg		7319198	0					
ANR	7319268	ExpressionStatement	exit ( 1 )	142:3:4394:4401	7319198	2	True				
ANR	7319269	CallExpression	exit ( 1 )		7319198	0					
ANR	7319270	Callee	exit		7319198	0					
ANR	7319271	Identifier	exit		7319198	0					
ANR	7319272	ArgumentList	1		7319198	1					
ANR	7319273	Argument	1		7319198	0					
ANR	7319274	PrimaryExpression	1		7319198	0					
ANR	7319275	ReturnType	static double		7319198	1					
ANR	7319276	Identifier	width_of		7319198	2					
ANR	7319277	ParameterList	const char * arg		7319198	3					
ANR	7319278	Parameter	const char * arg	127:9:4120:4134	7319198	0	True				
ANR	7319279	ParameterType	const char *		7319198	0					
ANR	7319280	Identifier	arg		7319198	1					
ANR	7319281	CFGEntryNode	ENTRY		7319198		True				
ANR	7319282	CFGExitNode	EXIT		7319198		True				
ANR	7319283	Symbol	strcmp		7319198						
ANR	7319284	Symbol	* ep		7319198						
ANR	7319285	Symbol	NULL		7319198						
ANR	7319286	Symbol	& ep		7319198						
ANR	7319287	Symbol	arg		7319198						
ANR	7319288	Symbol	w		7319198						
ANR	7319289	Symbol	ep		7319198						
ANR	7319290	Symbol	stderr		7319198						
ANR	7319291	Symbol	strtod		7319198						
ANR	7319292	Function	coordinate_of	145:0:4406:4632							
ANR	7319293	FunctionDef	coordinate_of (const char * arg)		7319292	0					
ANR	7319294	CompoundStatement		147:0:4451:4632	7319292	0					
ANR	7319295	IdentifierDeclStatement	char * ep = NULL ;	148:3:4456:4471	7319292	0	True				
ANR	7319296	IdentifierDecl	* ep = NULL		7319292	0					
ANR	7319297	IdentifierDeclType	char *		7319292	0					
ANR	7319298	Identifier	ep		7319292	1					
ANR	7319299	AssignmentExpression	* ep = NULL		7319292	2		=			
ANR	7319300	Identifier	NULL		7319292	0					
ANR	7319301	Identifier	NULL		7319292	1					
ANR	7319302	IdentifierDeclStatement	"double w = strtod ( arg , & ep ) ;"	149:3:4476:4503	7319292	1	True				
ANR	7319303	IdentifierDecl	"w = strtod ( arg , & ep )"		7319292	0					
ANR	7319304	IdentifierDeclType	double		7319292	0					
ANR	7319305	Identifier	w		7319292	1					
ANR	7319306	AssignmentExpression	"w = strtod ( arg , & ep )"		7319292	2		=			
ANR	7319307	Identifier	w		7319292	0					
ANR	7319308	CallExpression	"strtod ( arg , & ep )"		7319292	1					
ANR	7319309	Callee	strtod		7319292	0					
ANR	7319310	Identifier	strtod		7319292	0					
ANR	7319311	ArgumentList	arg		7319292	1					
ANR	7319312	Argument	arg		7319292	0					
ANR	7319313	Identifier	arg		7319292	0					
ANR	7319314	Argument	& ep		7319292	1					
ANR	7319315	UnaryOperationExpression	& ep		7319292	0					
ANR	7319316	UnaryOperator	&		7319292	0					
ANR	7319317	Identifier	ep		7319292	1					
ANR	7319318	IfStatement	if ( ep != NULL && * ep == 0 )		7319292	2					
ANR	7319319	Condition	ep != NULL && * ep == 0	151:7:4513:4534	7319292	0	True				
ANR	7319320	AndExpression	ep != NULL && * ep == 0		7319292	0		&&			
ANR	7319321	EqualityExpression	ep != NULL		7319292	0		!=			
ANR	7319322	Identifier	ep		7319292	0					
ANR	7319323	Identifier	NULL		7319292	1					
ANR	7319324	EqualityExpression	* ep == 0		7319292	1		==			
ANR	7319325	UnaryOperationExpression	* ep		7319292	0					
ANR	7319326	UnaryOperator	*		7319292	0					
ANR	7319327	Identifier	ep		7319292	1					
ANR	7319328	PrimaryExpression	0		7319292	1					
ANR	7319329	ReturnStatement	return w ;	152:6:4543:4551	7319292	1	True				
ANR	7319330	Identifier	w		7319292	0					
ANR	7319331	ExpressionStatement	"fprintf ( stderr , ""genpng: invalid coordinate value %s\\n"" , arg )"	154:3:4557:4618	7319292	3	True				
ANR	7319332	CallExpression	"fprintf ( stderr , ""genpng: invalid coordinate value %s\\n"" , arg )"		7319292	0					
ANR	7319333	Callee	fprintf		7319292	0					
ANR	7319334	Identifier	fprintf		7319292	0					
ANR	7319335	ArgumentList	stderr		7319292	1					
ANR	7319336	Argument	stderr		7319292	0					
ANR	7319337	Identifier	stderr		7319292	0					
ANR	7319338	Argument	"""genpng: invalid coordinate value %s\\n"""		7319292	1					
ANR	7319339	PrimaryExpression	"""genpng: invalid coordinate value %s\\n"""		7319292	0					
ANR	7319340	Argument	arg		7319292	2					
ANR	7319341	Identifier	arg		7319292	0					
ANR	7319342	ExpressionStatement	exit ( 1 )	155:3:4623:4630	7319292	4	True				
ANR	7319343	CallExpression	exit ( 1 )		7319292	0					
ANR	7319344	Callee	exit		7319292	0					
ANR	7319345	Identifier	exit		7319292	0					
ANR	7319346	ArgumentList	1		7319292	1					
ANR	7319347	Argument	1		7319292	0					
ANR	7319348	PrimaryExpression	1		7319292	0					
ANR	7319349	ReturnType	static double		7319292	1					
ANR	7319350	Identifier	coordinate_of		7319292	2					
ANR	7319351	ParameterList	const char * arg		7319292	3					
ANR	7319352	Parameter	const char * arg	146:14:4434:4448	7319292	0	True				
ANR	7319353	ParameterType	const char *		7319292	0					
ANR	7319354	Identifier	arg		7319292	1					
ANR	7319355	CFGEntryNode	ENTRY		7319292		True				
ANR	7319356	CFGExitNode	EXIT		7319292		True				
ANR	7319357	Symbol	* ep		7319292						
ANR	7319358	Symbol	NULL		7319292						
ANR	7319359	Symbol	& ep		7319292						
ANR	7319360	Symbol	arg		7319292						
ANR	7319361	Symbol	w		7319292						
ANR	7319362	Symbol	ep		7319292						
ANR	7319363	Symbol	stderr		7319292						
ANR	7319364	Symbol	strtod		7319292						
ANR	7319365	DeclStmt									
ANR	7319366	Decl							"int ( * ) ( const struct arg * arg , double x , double y )"	"int ( * ) ( const struct arg * arg , double x , double y )"	shape_fn_ptr
ANR	7319367	ClassDef	arg	174:0:5196:5408							
ANR	7319368	DeclStmt									
ANR	7319369	Decl							const struct color	const struct color *	color
ANR	7319370	DeclStmt									
ANR	7319371	Decl							shape_fn_ptr	shape_fn_ptr	inside_fn
ANR	7319372	DeclStmt									
ANR	7319373	Decl							shape_fn_ptr	shape_fn_ptr	check_fn
ANR	7319374	DeclStmt									
ANR	7319375	Decl							double	double	width
ANR	7319376	DeclStmt									
ANR	7319377	Decl							double	double	x1
ANR	7319378	Decl							double	double	y1
ANR	7319379	Decl							double	double	x2
ANR	7319380	Decl							double	double	y2
ANR	7319381	Function	alpha_calc	294:0:9434:10665							
ANR	7319382	FunctionDef	"alpha_calc (const struct arg * arg , double x , double y)"		7319381	0					
ANR	7319383	CompoundStatement		296:0:9502:10665	7319381	0					
ANR	7319384	SwitchStatement	"switch ( arg -> check_fn ( arg , x , y ) )"		7319381	0					
ANR	7319385	Condition	"arg -> check_fn ( arg , x , y )"	301:11:9719:9742	7319381	0	True				
ANR	7319386	CallExpression	"arg -> check_fn ( arg , x , y )"		7319381	0					
ANR	7319387	Callee	arg -> check_fn		7319381	0					
ANR	7319388	PtrMemberAccess	arg -> check_fn		7319381	0					
ANR	7319389	Identifier	arg		7319381	0					
ANR	7319390	Identifier	check_fn		7319381	1					
ANR	7319391	ArgumentList	arg		7319381	1					
ANR	7319392	Argument	arg		7319381	0					
ANR	7319393	Identifier	arg		7319381	0					
ANR	7319394	Argument	x		7319381	1					
ANR	7319395	Identifier	x		7319381	0					
ANR	7319396	Argument	y		7319381	2					
ANR	7319397	Identifier	y		7319381	0					
ANR	7319398	CompoundStatement		7:3:245:245	7319381	1					
ANR	7319399	Label	case OUTSIDE :	303:6:9756:9768	7319381	0	True				
ANR	7319400	Identifier	OUTSIDE		7319381	0					
ANR	7319401	ReturnStatement	return 0 ;	304:9:9779:9787	7319381	1	True				
ANR	7319402	PrimaryExpression	0		7319381	0					
ANR	7319403	Label	case INSIDE :	306:6:9832:9843	7319381	2	True				
ANR	7319404	Identifier	INSIDE		7319381	0					
ANR	7319405	ReturnStatement	return 1 ;	307:9:9854:9862	7319381	3	True				
ANR	7319406	PrimaryExpression	1		7319381	0					
ANR	7319407	Label	default :	309:6:9906:9913	7319381	4	True				
ANR	7319408	Identifier	default		7319381	0					
ANR	7319409	CompoundStatement		17:9:446:462	7319381	5					
ANR	7319410	IdentifierDeclStatement	int dy ;	311:9:9932:9938	7319381	0	True				
ANR	7319411	IdentifierDecl	dy		7319381	0					
ANR	7319412	IdentifierDeclType	int		7319381	0					
ANR	7319413	Identifier	dy		7319381	1					
ANR	7319414	IdentifierDeclStatement	double alpha = 0 ;	312:9:9949:9965	7319381	1	True				
ANR	7319415	IdentifierDecl	alpha = 0		7319381	0					
ANR	7319416	IdentifierDeclType	double		7319381	0					
ANR	7319417	Identifier	alpha		7319381	1					
ANR	7319418	AssignmentExpression	alpha = 0		7319381	2		=			
ANR	7319419	Identifier	alpha		7319381	0					
ANR	7319420	PrimaryExpression	0		7319381	1					
ANR	7319421	Statement	define	314:9:9977:9982	7319381	2	True				
ANR	7319422	Statement	FILTER_D	314:16:9984:9991	7319381	3	True				
ANR	7319423	Statement	(	314:25:9993:9993	7319381	4	True				
ANR	7319424	Statement	FILTER_WIDTH	314:26:9994:10005	7319381	5	True				
ANR	7319425	Statement	*	314:38:10006:10006	7319381	6	True				
ANR	7319426	Statement	FILTER_STEPS	314:39:10007:10018	7319381	7	True				
ANR	7319427	Statement	-	314:51:10019:10019	7319381	8	True				
ANR	7319428	Statement	1	314:52:10020:10020	7319381	9	True				
ANR	7319429	Statement	)	314:53:10021:10021	7319381	10	True				
ANR	7319430	ForStatement	for ( dy = - FILTER_D ; dy <= FILTER_D ; ++ dy )		7319381	11					
ANR	7319431	ForInit	dy = - FILTER_D ;	315:14:10037:10049	7319381	0	True				
ANR	7319432	AssignmentExpression	dy = - FILTER_D		7319381	0		=			
ANR	7319433	Identifier	dy		7319381	0					
ANR	7319434	UnaryOperationExpression	- FILTER_D		7319381	1					
ANR	7319435	UnaryOperator	-		7319381	0					
ANR	7319436	Identifier	FILTER_D		7319381	1					
ANR	7319437	Condition	dy <= FILTER_D	315:28:10051:10062	7319381	1	True				
ANR	7319438	RelationalExpression	dy <= FILTER_D		7319381	0		<=			
ANR	7319439	Identifier	dy		7319381	0					
ANR	7319440	Identifier	FILTER_D		7319381	1					
ANR	7319441	UnaryExpression	++ dy	315:42:10065:10068	7319381	2	True				
ANR	7319442	IncDec	++		7319381	0					
ANR	7319443	Identifier	dy		7319381	1					
ANR	7319444	CompoundStatement		22:12:591:622	7319381	3					
ANR	7319445	IdentifierDeclStatement	double wy = bicubic [ abs ( dy ) ] [ 0 ] ;	317:12:10094:10125	7319381	0	True				
ANR	7319446	IdentifierDecl	wy = bicubic [ abs ( dy ) ] [ 0 ]		7319381	0					
ANR	7319447	IdentifierDeclType	double		7319381	0					
ANR	7319448	Identifier	wy		7319381	1					
ANR	7319449	AssignmentExpression	wy = bicubic [ abs ( dy ) ] [ 0 ]		7319381	2		=			
ANR	7319450	Identifier	wy		7319381	0					
ANR	7319451	ArrayIndexing	bicubic [ abs ( dy ) ] [ 0 ]		7319381	1					
ANR	7319452	ArrayIndexing	bicubic [ abs ( dy ) ]		7319381	0					
ANR	7319453	Identifier	bicubic		7319381	0					
ANR	7319454	CallExpression	abs ( dy )		7319381	1					
ANR	7319455	Callee	abs		7319381	0					
ANR	7319456	Identifier	abs		7319381	0					
ANR	7319457	ArgumentList	dy		7319381	1					
ANR	7319458	Argument	dy		7319381	0					
ANR	7319459	Identifier	dy		7319381	0					
ANR	7319460	PrimaryExpression	0		7319381	1					
ANR	7319461	IfStatement	if ( wy != 0 )		7319381	1					
ANR	7319462	Condition	wy != 0	319:16:10144:10150	7319381	0	True				
ANR	7319463	EqualityExpression	wy != 0		7319381	0		!=			
ANR	7319464	Identifier	wy		7319381	0					
ANR	7319465	PrimaryExpression	0		7319381	1					
ANR	7319466	CompoundStatement		27:15:713:719	7319381	1					
ANR	7319467	IdentifierDeclStatement	double alphay = 0 ;	321:15:10182:10199	7319381	0	True				
ANR	7319468	IdentifierDecl	alphay = 0		7319381	0					
ANR	7319469	IdentifierDeclType	double		7319381	0					
ANR	7319470	Identifier	alphay		7319381	1					
ANR	7319471	AssignmentExpression	alphay = 0		7319381	2		=			
ANR	7319472	Identifier	alphay		7319381	0					
ANR	7319473	PrimaryExpression	0		7319381	1					
ANR	7319474	IdentifierDeclStatement	int dx ;	322:15:10216:10222	7319381	1	True				
ANR	7319475	IdentifierDecl	dx		7319381	0					
ANR	7319476	IdentifierDeclType	int		7319381	0					
ANR	7319477	Identifier	dx		7319381	1					
ANR	7319478	ForStatement	for ( dx = - FILTER_D ; dx <= FILTER_D ; ++ dx )		7319381	2					
ANR	7319479	ForInit	dx = - FILTER_D ;	324:20:10245:10257	7319381	0	True				
ANR	7319480	AssignmentExpression	dx = - FILTER_D		7319381	0		=			
ANR	7319481	Identifier	dx		7319381	0					
ANR	7319482	UnaryOperationExpression	- FILTER_D		7319381	1					
ANR	7319483	UnaryOperator	-		7319381	0					
ANR	7319484	Identifier	FILTER_D		7319381	1					
ANR	7319485	Condition	dx <= FILTER_D	324:34:10259:10270	7319381	1	True				
ANR	7319486	RelationalExpression	dx <= FILTER_D		7319381	0		<=			
ANR	7319487	Identifier	dx		7319381	0					
ANR	7319488	Identifier	FILTER_D		7319381	1					
ANR	7319489	UnaryExpression	++ dx	324:48:10273:10276	7319381	2	True				
ANR	7319490	IncDec	++		7319381	0					
ANR	7319491	Identifier	dx		7319381	1					
ANR	7319492	CompoundStatement		31:18:811:842	7319381	3					
ANR	7319493	IdentifierDeclStatement	double wx = bicubic [ abs ( dx ) ] [ 0 ] ;	326:18:10314:10345	7319381	0	True				
ANR	7319494	IdentifierDecl	wx = bicubic [ abs ( dx ) ] [ 0 ]		7319381	0					
ANR	7319495	IdentifierDeclType	double		7319381	0					
ANR	7319496	Identifier	wx		7319381	1					
ANR	7319497	AssignmentExpression	wx = bicubic [ abs ( dx ) ] [ 0 ]		7319381	2		=			
ANR	7319498	Identifier	wx		7319381	0					
ANR	7319499	ArrayIndexing	bicubic [ abs ( dx ) ] [ 0 ]		7319381	1					
ANR	7319500	ArrayIndexing	bicubic [ abs ( dx ) ]		7319381	0					
ANR	7319501	Identifier	bicubic		7319381	0					
ANR	7319502	CallExpression	abs ( dx )		7319381	1					
ANR	7319503	Callee	abs		7319381	0					
ANR	7319504	Identifier	abs		7319381	0					
ANR	7319505	ArgumentList	dx		7319381	1					
ANR	7319506	Argument	dx		7319381	0					
ANR	7319507	Identifier	dx		7319381	0					
ANR	7319508	PrimaryExpression	0		7319381	1					
ANR	7319509	IfStatement	"if ( wx != 0 && arg -> inside_fn ( arg , x + dx / 16 , y + dy / 16 ) )"		7319381	1					
ANR	7319510	Condition	"wx != 0 && arg -> inside_fn ( arg , x + dx / 16 , y + dy / 16 )"	328:22:10370:10417	7319381	0	True				
ANR	7319511	AndExpression	"wx != 0 && arg -> inside_fn ( arg , x + dx / 16 , y + dy / 16 )"		7319381	0		&&			
ANR	7319512	EqualityExpression	wx != 0		7319381	0		!=			
ANR	7319513	Identifier	wx		7319381	0					
ANR	7319514	PrimaryExpression	0		7319381	1					
ANR	7319515	CallExpression	"arg -> inside_fn ( arg , x + dx / 16 , y + dy / 16 )"		7319381	1					
ANR	7319516	Callee	arg -> inside_fn		7319381	0					
ANR	7319517	PtrMemberAccess	arg -> inside_fn		7319381	0					
ANR	7319518	Identifier	arg		7319381	0					
ANR	7319519	Identifier	inside_fn		7319381	1					
ANR	7319520	ArgumentList	arg		7319381	1					
ANR	7319521	Argument	arg		7319381	0					
ANR	7319522	Identifier	arg		7319381	0					
ANR	7319523	Argument	x + dx / 16		7319381	1					
ANR	7319524	AdditiveExpression	x + dx / 16		7319381	0		+			
ANR	7319525	Identifier	x		7319381	0					
ANR	7319526	MultiplicativeExpression	dx / 16		7319381	1		/			
ANR	7319527	Identifier	dx		7319381	0					
ANR	7319528	PrimaryExpression	16		7319381	1					
ANR	7319529	Argument	y + dy / 16		7319381	2					
ANR	7319530	AdditiveExpression	y + dy / 16		7319381	0		+			
ANR	7319531	Identifier	y		7319381	0					
ANR	7319532	MultiplicativeExpression	dy / 16		7319381	1		/			
ANR	7319533	Identifier	dy		7319381	0					
ANR	7319534	PrimaryExpression	16		7319381	1					
ANR	7319535	ExpressionStatement	alphay += wx	329:21:10441:10453	7319381	1	True				
ANR	7319536	AssignmentExpression	alphay += wx		7319381	0		+=			
ANR	7319537	Identifier	alphay		7319381	0					
ANR	7319538	Identifier	wx		7319381	1					
ANR	7319539	ExpressionStatement	alpha += wy * alphay	332:15:10488:10508	7319381	3	True				
ANR	7319540	AssignmentExpression	alpha += wy * alphay		7319381	0		+=			
ANR	7319541	Identifier	alpha		7319381	0					
ANR	7319542	MultiplicativeExpression	wy * alphay		7319381	1		*			
ANR	7319543	Identifier	wy		7319381	0					
ANR	7319544	Identifier	alphay		7319381	1					
ANR	7319545	ReturnStatement	return alpha / ( FILTER_WEIGHT * FILTER_WEIGHT ) ;	337:9:10606:10650	7319381	12	True				
ANR	7319546	MultiplicativeExpression	alpha / ( FILTER_WEIGHT * FILTER_WEIGHT )		7319381	0		/			
ANR	7319547	Identifier	alpha		7319381	0					
ANR	7319548	MultiplicativeExpression	FILTER_WEIGHT * FILTER_WEIGHT		7319381	1		*			
ANR	7319549	Identifier	FILTER_WEIGHT		7319381	0					
ANR	7319550	Identifier	FILTER_WEIGHT		7319381	1					
ANR	7319551	ReturnType	static double		7319381	1					
ANR	7319552	Identifier	alpha_calc		7319381	2					
ANR	7319553	ParameterList	"const struct arg * arg , double x , double y"		7319381	3					
ANR	7319554	Parameter	const struct arg * arg	295:11:9459:9479	7319381	0	True				
ANR	7319555	ParameterType	const struct arg *		7319381	0					
ANR	7319556	Identifier	arg		7319381	1					
ANR	7319557	Parameter	double x	295:34:9482:9489	7319381	1	True				
ANR	7319558	ParameterType	double		7319381	0					
ANR	7319559	Identifier	x		7319381	1					
ANR	7319560	Parameter	double y	295:44:9492:9499	7319381	2	True				
ANR	7319561	ParameterType	double		7319381	0					
ANR	7319562	Identifier	y		7319381	1					
ANR	7319563	CFGEntryNode	ENTRY		7319381		True				
ANR	7319564	CFGExitNode	EXIT		7319381		True				
ANR	7319565	Symbol	wx		7319381						
ANR	7319566	Symbol	wy		7319381						
ANR	7319567	Symbol	* abs		7319381						
ANR	7319568	Symbol	* * abs		7319381						
ANR	7319569	Symbol	abs		7319381						
ANR	7319570	Symbol	FILTER_D		7319381						
ANR	7319571	Symbol	* bicubic		7319381						
ANR	7319572	Symbol	dx		7319381						
ANR	7319573	Symbol	dy		7319381						
ANR	7319574	Symbol	arg		7319381						
ANR	7319575	Symbol	alpha		7319381						
ANR	7319576	Symbol	alphay		7319381						
ANR	7319577	Symbol	x		7319381						
ANR	7319578	Symbol	y		7319381						
ANR	7319579	Symbol	arg -> inside_fn		7319381						
ANR	7319580	Symbol	bicubic		7319381						
ANR	7319581	Symbol	* * bicubic		7319381						
ANR	7319582	Symbol	arg -> check_fn		7319381						
ANR	7319583	Symbol	* arg		7319381						
ANR	7319584	Symbol	FILTER_WEIGHT		7319381						
ANR	7319585	Function	square_check	347:0:10807:11390							
ANR	7319586	FunctionDef	"square_check (double x , double y , double x1 , double y1 , double x2 , double y2)"		7319585	0					
ANR	7319587	CompoundStatement		350:0:10947:11390	7319585	0					
ANR	7319588	ReturnStatement	return ( ( x < x1 ) ^ ( x < x2 ) ) & ( ( y < y1 ) ^ ( y < y2 ) ) ;	362:3:11344:11388	7319585	0	True				
ANR	7319589	BitAndExpression	( ( x < x1 ) ^ ( x < x2 ) ) & ( ( y < y1 ) ^ ( y < y2 ) )		7319585	0		&			
ANR	7319590	ExclusiveOrExpression	( x < x1 ) ^ ( x < x2 )		7319585	0		^			
ANR	7319591	RelationalExpression	x < x1		7319585	0		<			
ANR	7319592	Identifier	x		7319585	0					
ANR	7319593	Identifier	x1		7319585	1					
ANR	7319594	RelationalExpression	x < x2		7319585	1		<			
ANR	7319595	Identifier	x		7319585	0					
ANR	7319596	Identifier	x2		7319585	1					
ANR	7319597	ExclusiveOrExpression	( y < y1 ) ^ ( y < y2 )		7319585	1		^			
ANR	7319598	RelationalExpression	y < y1		7319585	0		<			
ANR	7319599	Identifier	y		7319585	0					
ANR	7319600	Identifier	y1		7319585	1					
ANR	7319601	RelationalExpression	y < y2		7319585	1		<			
ANR	7319602	Identifier	y		7319585	0					
ANR	7319603	Identifier	y2		7319585	1					
ANR	7319604	ReturnType	static int		7319585	1					
ANR	7319605	Identifier	square_check		7319585	2					
ANR	7319606	ParameterList	"double x , double y , double x1 , double y1 , double x2 , double y2"		7319585	3					
ANR	7319607	Parameter	double x	348:13:10831:10838	7319585	0	True				
ANR	7319608	ParameterType	double		7319585	0					
ANR	7319609	Identifier	x		7319585	1					
ANR	7319610	Parameter	double y	348:23:10841:10848	7319585	1	True				
ANR	7319611	ParameterType	double		7319585	0					
ANR	7319612	Identifier	y		7319585	1					
ANR	7319613	Parameter	double x1	348:33:10851:10859	7319585	2	True				
ANR	7319614	ParameterType	double		7319585	0					
ANR	7319615	Identifier	x1		7319585	1					
ANR	7319616	Parameter	double y1	348:44:10862:10870	7319585	3	True				
ANR	7319617	ParameterType	double		7319585	0					
ANR	7319618	Identifier	y1		7319585	1					
ANR	7319619	Parameter	double x2	348:55:10873:10881	7319585	4	True				
ANR	7319620	ParameterType	double		7319585	0					
ANR	7319621	Identifier	x2		7319585	1					
ANR	7319622	Parameter	double y2	348:66:10884:10892	7319585	5	True				
ANR	7319623	ParameterType	double		7319585	0					
ANR	7319624	Identifier	y2		7319585	1					
ANR	7319625	CFGEntryNode	ENTRY		7319585		True				
ANR	7319626	CFGExitNode	EXIT		7319585		True				
ANR	7319627	Symbol	x		7319585						
ANR	7319628	Symbol	y1		7319585						
ANR	7319629	Symbol	y		7319585						
ANR	7319630	Symbol	x1		7319585						
ANR	7319631	Symbol	y2		7319585						
ANR	7319632	Symbol	x2		7319585						
ANR	7319633	Function	inside_square_filled	365:0:11393:11536							
ANR	7319634	FunctionDef	"inside_square_filled (const struct arg * arg , double x , double y)"		7319633	0					
ANR	7319635	CompoundStatement		367:0:11468:11536	7319633	0					
ANR	7319636	ReturnStatement	"return square_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 ) ;"	368:3:11473:11534	7319633	0	True				
ANR	7319637	CallExpression	"square_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 )"		7319633	0					
ANR	7319638	Callee	square_check		7319633	0					
ANR	7319639	Identifier	square_check		7319633	0					
ANR	7319640	ArgumentList	x		7319633	1					
ANR	7319641	Argument	x		7319633	0					
ANR	7319642	Identifier	x		7319633	0					
ANR	7319643	Argument	y		7319633	1					
ANR	7319644	Identifier	y		7319633	0					
ANR	7319645	Argument	arg -> x1		7319633	2					
ANR	7319646	PtrMemberAccess	arg -> x1		7319633	0					
ANR	7319647	Identifier	arg		7319633	0					
ANR	7319648	Identifier	x1		7319633	1					
ANR	7319649	Argument	arg -> y1		7319633	3					
ANR	7319650	PtrMemberAccess	arg -> y1		7319633	0					
ANR	7319651	Identifier	arg		7319633	0					
ANR	7319652	Identifier	y1		7319633	1					
ANR	7319653	Argument	arg -> x2		7319633	4					
ANR	7319654	PtrMemberAccess	arg -> x2		7319633	0					
ANR	7319655	Identifier	arg		7319633	0					
ANR	7319656	Identifier	x2		7319633	1					
ANR	7319657	Argument	arg -> y2		7319633	5					
ANR	7319658	PtrMemberAccess	arg -> y2		7319633	0					
ANR	7319659	Identifier	arg		7319633	0					
ANR	7319660	Identifier	y2		7319633	1					
ANR	7319661	ReturnType	static int		7319633	1					
ANR	7319662	Identifier	inside_square_filled		7319633	2					
ANR	7319663	ParameterList	"const struct arg * arg , double x , double y"		7319633	3					
ANR	7319664	Parameter	const struct arg * arg	366:21:11425:11445	7319633	0	True				
ANR	7319665	ParameterType	const struct arg *		7319633	0					
ANR	7319666	Identifier	arg		7319633	1					
ANR	7319667	Parameter	double x	366:44:11448:11455	7319633	1	True				
ANR	7319668	ParameterType	double		7319633	0					
ANR	7319669	Identifier	x		7319633	1					
ANR	7319670	Parameter	double y	366:54:11458:11465	7319633	2	True				
ANR	7319671	ParameterType	double		7319633	0					
ANR	7319672	Identifier	y		7319633	1					
ANR	7319673	CFGEntryNode	ENTRY		7319633		True				
ANR	7319674	CFGExitNode	EXIT		7319633		True				
ANR	7319675	Symbol	arg		7319633						
ANR	7319676	Symbol	x		7319633						
ANR	7319677	Symbol	arg -> x2		7319633						
ANR	7319678	Symbol	y		7319633						
ANR	7319679	Symbol	arg -> x1		7319633						
ANR	7319680	Symbol	arg -> y2		7319633						
ANR	7319681	Symbol	arg -> y1		7319633						
ANR	7319682	Symbol	square_check		7319633						
ANR	7319683	Symbol	* arg		7319633						
ANR	7319684	Function	square_check_line	371:0:11539:12693							
ANR	7319685	FunctionDef	"square_check_line (const struct arg * arg , double x , double y , double w)"		7319684	0					
ANR	7319686	CompoundStatement		385:0:12075:12693	7319684	0					
ANR	7319687	IdentifierDeclStatement	double cx = ( arg -> x1 + arg -> x2 ) / 2 ;	386:3:12080:12111	7319684	0	True				
ANR	7319688	IdentifierDecl	cx = ( arg -> x1 + arg -> x2 ) / 2		7319684	0					
ANR	7319689	IdentifierDeclType	double		7319684	0					
ANR	7319690	Identifier	cx		7319684	1					
ANR	7319691	AssignmentExpression	cx = ( arg -> x1 + arg -> x2 ) / 2		7319684	2		=			
ANR	7319692	Identifier	cx		7319684	0					
ANR	7319693	MultiplicativeExpression	( arg -> x1 + arg -> x2 ) / 2		7319684	1		/			
ANR	7319694	AdditiveExpression	arg -> x1 + arg -> x2		7319684	0		+			
ANR	7319695	PtrMemberAccess	arg -> x1		7319684	0					
ANR	7319696	Identifier	arg		7319684	0					
ANR	7319697	Identifier	x1		7319684	1					
ANR	7319698	PtrMemberAccess	arg -> x2		7319684	1					
ANR	7319699	Identifier	arg		7319684	0					
ANR	7319700	Identifier	x2		7319684	1					
ANR	7319701	PrimaryExpression	2		7319684	1					
ANR	7319702	IdentifierDeclStatement	double wx = fabs ( arg -> x1 - arg -> x2 ) / 2 ;	387:3:12116:12151	7319684	1	True				
ANR	7319703	IdentifierDecl	wx = fabs ( arg -> x1 - arg -> x2 ) / 2		7319684	0					
ANR	7319704	IdentifierDeclType	double		7319684	0					
ANR	7319705	Identifier	wx		7319684	1					
ANR	7319706	AssignmentExpression	wx = fabs ( arg -> x1 - arg -> x2 ) / 2		7319684	2		=			
ANR	7319707	Identifier	wx		7319684	0					
ANR	7319708	MultiplicativeExpression	fabs ( arg -> x1 - arg -> x2 ) / 2		7319684	1		/			
ANR	7319709	CallExpression	fabs ( arg -> x1 - arg -> x2 )		7319684	0					
ANR	7319710	Callee	fabs		7319684	0					
ANR	7319711	Identifier	fabs		7319684	0					
ANR	7319712	ArgumentList	arg -> x1 - arg -> x2		7319684	1					
ANR	7319713	Argument	arg -> x1 - arg -> x2		7319684	0					
ANR	7319714	AdditiveExpression	arg -> x1 - arg -> x2		7319684	0		-			
ANR	7319715	PtrMemberAccess	arg -> x1		7319684	0					
ANR	7319716	Identifier	arg		7319684	0					
ANR	7319717	Identifier	x1		7319684	1					
ANR	7319718	PtrMemberAccess	arg -> x2		7319684	1					
ANR	7319719	Identifier	arg		7319684	0					
ANR	7319720	Identifier	x2		7319684	1					
ANR	7319721	PrimaryExpression	2		7319684	1					
ANR	7319722	IdentifierDeclStatement	double cy = ( arg -> y1 + arg -> y2 ) / 2 ;	388:3:12156:12187	7319684	2	True				
ANR	7319723	IdentifierDecl	cy = ( arg -> y1 + arg -> y2 ) / 2		7319684	0					
ANR	7319724	IdentifierDeclType	double		7319684	0					
ANR	7319725	Identifier	cy		7319684	1					
ANR	7319726	AssignmentExpression	cy = ( arg -> y1 + arg -> y2 ) / 2		7319684	2		=			
ANR	7319727	Identifier	cy		7319684	0					
ANR	7319728	MultiplicativeExpression	( arg -> y1 + arg -> y2 ) / 2		7319684	1		/			
ANR	7319729	AdditiveExpression	arg -> y1 + arg -> y2		7319684	0		+			
ANR	7319730	PtrMemberAccess	arg -> y1		7319684	0					
ANR	7319731	Identifier	arg		7319684	0					
ANR	7319732	Identifier	y1		7319684	1					
ANR	7319733	PtrMemberAccess	arg -> y2		7319684	1					
ANR	7319734	Identifier	arg		7319684	0					
ANR	7319735	Identifier	y2		7319684	1					
ANR	7319736	PrimaryExpression	2		7319684	1					
ANR	7319737	IdentifierDeclStatement	double wy = fabs ( arg -> y1 - arg -> y2 ) / 2 ;	389:3:12192:12227	7319684	3	True				
ANR	7319738	IdentifierDecl	wy = fabs ( arg -> y1 - arg -> y2 ) / 2		7319684	0					
ANR	7319739	IdentifierDeclType	double		7319684	0					
ANR	7319740	Identifier	wy		7319684	1					
ANR	7319741	AssignmentExpression	wy = fabs ( arg -> y1 - arg -> y2 ) / 2		7319684	2		=			
ANR	7319742	Identifier	wy		7319684	0					
ANR	7319743	MultiplicativeExpression	fabs ( arg -> y1 - arg -> y2 ) / 2		7319684	1		/			
ANR	7319744	CallExpression	fabs ( arg -> y1 - arg -> y2 )		7319684	0					
ANR	7319745	Callee	fabs		7319684	0					
ANR	7319746	Identifier	fabs		7319684	0					
ANR	7319747	ArgumentList	arg -> y1 - arg -> y2		7319684	1					
ANR	7319748	Argument	arg -> y1 - arg -> y2		7319684	0					
ANR	7319749	AdditiveExpression	arg -> y1 - arg -> y2		7319684	0		-			
ANR	7319750	PtrMemberAccess	arg -> y1		7319684	0					
ANR	7319751	Identifier	arg		7319684	0					
ANR	7319752	Identifier	y1		7319684	1					
ANR	7319753	PtrMemberAccess	arg -> y2		7319684	1					
ANR	7319754	Identifier	arg		7319684	0					
ANR	7319755	Identifier	y2		7319684	1					
ANR	7319756	PrimaryExpression	2		7319684	1					
ANR	7319757	IfStatement	"if ( square_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w ) )"		7319684	4					
ANR	7319758	Condition	"square_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w )"	391:7:12237:12290	7319684	0	True				
ANR	7319759	CallExpression	"square_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w )"		7319684	0					
ANR	7319760	Callee	square_check		7319684	0					
ANR	7319761	Identifier	square_check		7319684	0					
ANR	7319762	ArgumentList	x		7319684	1					
ANR	7319763	Argument	x		7319684	0					
ANR	7319764	Identifier	x		7319684	0					
ANR	7319765	Argument	y		7319684	1					
ANR	7319766	Identifier	y		7319684	0					
ANR	7319767	Argument	cx - wx - w		7319684	2					
ANR	7319768	AdditiveExpression	cx - wx - w		7319684	0		-			
ANR	7319769	Identifier	cx		7319684	0					
ANR	7319770	AdditiveExpression	wx - w		7319684	1		-			
ANR	7319771	Identifier	wx		7319684	0					
ANR	7319772	Identifier	w		7319684	1					
ANR	7319773	Argument	cy - wy - w		7319684	3					
ANR	7319774	AdditiveExpression	cy - wy - w		7319684	0		-			
ANR	7319775	Identifier	cy		7319684	0					
ANR	7319776	AdditiveExpression	wy - w		7319684	1		-			
ANR	7319777	Identifier	wy		7319684	0					
ANR	7319778	Identifier	w		7319684	1					
ANR	7319779	Argument	cx + wx + w		7319684	4					
ANR	7319780	AdditiveExpression	cx + wx + w		7319684	0		+			
ANR	7319781	Identifier	cx		7319684	0					
ANR	7319782	AdditiveExpression	wx + w		7319684	1		+			
ANR	7319783	Identifier	wx		7319684	0					
ANR	7319784	Identifier	w		7319684	1					
ANR	7319785	Argument	cy + wy + w		7319684	5					
ANR	7319786	AdditiveExpression	cy + wy + w		7319684	0		+			
ANR	7319787	Identifier	cy		7319684	0					
ANR	7319788	AdditiveExpression	wy + w		7319684	1		+			
ANR	7319789	Identifier	wy		7319684	0					
ANR	7319790	Identifier	w		7319684	1					
ANR	7319791	CompoundStatement		8:3:220:220	7319684	1					
ANR	7319792	ExpressionStatement	wx -= w	396:6:12413:12420	7319684	0	True				
ANR	7319793	AssignmentExpression	wx -= w		7319684	0		-=			
ANR	7319794	Identifier	wx		7319684	0					
ANR	7319795	Identifier	w		7319684	1					
ANR	7319796	ExpressionStatement	wy -= w	397:6:12428:12435	7319684	1	True				
ANR	7319797	AssignmentExpression	wy -= w		7319684	0		-=			
ANR	7319798	Identifier	wy		7319684	0					
ANR	7319799	Identifier	w		7319684	1					
ANR	7319800	IfStatement	"if ( wx > 0 && wy > 0 && square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy ) )"		7319684	2					
ANR	7319801	Condition	"wx > 0 && wy > 0 && square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"	398:10:12447:12512	7319684	0	True				
ANR	7319802	AndExpression	"wx > 0 && wy > 0 && square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		7319684	0		&&			
ANR	7319803	RelationalExpression	wx > 0		7319684	0		>			
ANR	7319804	Identifier	wx		7319684	0					
ANR	7319805	PrimaryExpression	0		7319684	1					
ANR	7319806	AndExpression	"wy > 0 && square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		7319684	1		&&			
ANR	7319807	RelationalExpression	wy > 0		7319684	0		>			
ANR	7319808	Identifier	wy		7319684	0					
ANR	7319809	PrimaryExpression	0		7319684	1					
ANR	7319810	CallExpression	"square_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		7319684	1					
ANR	7319811	Callee	square_check		7319684	0					
ANR	7319812	Identifier	square_check		7319684	0					
ANR	7319813	ArgumentList	x		7319684	1					
ANR	7319814	Argument	x		7319684	0					
ANR	7319815	Identifier	x		7319684	0					
ANR	7319816	Argument	y		7319684	1					
ANR	7319817	Identifier	y		7319684	0					
ANR	7319818	Argument	cx - wx		7319684	2					
ANR	7319819	AdditiveExpression	cx - wx		7319684	0		-			
ANR	7319820	Identifier	cx		7319684	0					
ANR	7319821	Identifier	wx		7319684	1					
ANR	7319822	Argument	cy - wy		7319684	3					
ANR	7319823	AdditiveExpression	cy - wy		7319684	0		-			
ANR	7319824	Identifier	cy		7319684	0					
ANR	7319825	Identifier	wy		7319684	1					
ANR	7319826	Argument	cx + wx		7319684	4					
ANR	7319827	AdditiveExpression	cx + wx		7319684	0		+			
ANR	7319828	Identifier	cx		7319684	0					
ANR	7319829	Identifier	wx		7319684	1					
ANR	7319830	Argument	cy + wy		7319684	5					
ANR	7319831	AdditiveExpression	cy + wy		7319684	0		+			
ANR	7319832	Identifier	cy		7319684	0					
ANR	7319833	Identifier	wy		7319684	1					
ANR	7319834	ReturnStatement	return INSIDE ;	399:9:12524:12537	7319684	1	True				
ANR	7319835	Identifier	INSIDE		7319684	0					
ANR	7319836	ReturnStatement	return 0 ;	401:6:12589:12597	7319684	3	True				
ANR	7319837	PrimaryExpression	0		7319684	0					
ANR	7319838	ReturnStatement	return OUTSIDE ;	404:3:12643:12657	7319684	5	True				
ANR	7319839	Identifier	OUTSIDE		7319684	0					
ANR	7319840	ReturnType	static int		7319684	1					
ANR	7319841	Identifier	square_check_line		7319684	2					
ANR	7319842	ParameterList	"const struct arg * arg , double x , double y , double w"		7319684	3					
ANR	7319843	Parameter	const struct arg * arg	372:18:11568:11588	7319684	0	True				
ANR	7319844	ParameterType	const struct arg *		7319684	0					
ANR	7319845	Identifier	arg		7319684	1					
ANR	7319846	Parameter	double x	372:41:11591:11598	7319684	1	True				
ANR	7319847	ParameterType	double		7319684	0					
ANR	7319848	Identifier	x		7319684	1					
ANR	7319849	Parameter	double y	372:51:11601:11608	7319684	2	True				
ANR	7319850	ParameterType	double		7319684	0					
ANR	7319851	Identifier	y		7319684	1					
ANR	7319852	Parameter	double w	372:61:11611:11618	7319684	3	True				
ANR	7319853	ParameterType	double		7319684	0					
ANR	7319854	Identifier	w		7319684	1					
ANR	7319855	CFGEntryNode	ENTRY		7319684		True				
ANR	7319856	CFGExitNode	EXIT		7319684		True				
ANR	7319857	Symbol	wx		7319684						
ANR	7319858	Symbol	wy		7319684						
ANR	7319859	Symbol	fabs		7319684						
ANR	7319860	Symbol	cx		7319684						
ANR	7319861	Symbol	cy		7319684						
ANR	7319862	Symbol	arg		7319684						
ANR	7319863	Symbol	w		7319684						
ANR	7319864	Symbol	x		7319684						
ANR	7319865	Symbol	arg -> x2		7319684						
ANR	7319866	Symbol	y		7319684						
ANR	7319867	Symbol	arg -> x1		7319684						
ANR	7319868	Symbol	arg -> y2		7319684						
ANR	7319869	Symbol	arg -> y1		7319684						
ANR	7319870	Symbol	OUTSIDE		7319684						
ANR	7319871	Symbol	square_check		7319684						
ANR	7319872	Symbol	* arg		7319684						
ANR	7319873	Symbol	INSIDE		7319684						
ANR	7319874	Function	check_square_filled	407:0:12696:13126							
ANR	7319875	FunctionDef	"check_square_filled (const struct arg * arg , double x , double y)"		7319874	0					
ANR	7319876	CompoundStatement		409:0:12770:13126	7319874	0					
ANR	7319877	ReturnStatement	"return square_check_line ( arg , x , y , FILTER_WIDTH ) ;"	415:3:13075:13124	7319874	0	True				
ANR	7319878	CallExpression	"square_check_line ( arg , x , y , FILTER_WIDTH )"		7319874	0					
ANR	7319879	Callee	square_check_line		7319874	0					
ANR	7319880	Identifier	square_check_line		7319874	0					
ANR	7319881	ArgumentList	arg		7319874	1					
ANR	7319882	Argument	arg		7319874	0					
ANR	7319883	Identifier	arg		7319874	0					
ANR	7319884	Argument	x		7319874	1					
ANR	7319885	Identifier	x		7319874	0					
ANR	7319886	Argument	y		7319874	2					
ANR	7319887	Identifier	y		7319874	0					
ANR	7319888	Argument	FILTER_WIDTH		7319874	3					
ANR	7319889	Identifier	FILTER_WIDTH		7319874	0					
ANR	7319890	ReturnType	static int		7319874	1					
ANR	7319891	Identifier	check_square_filled		7319874	2					
ANR	7319892	ParameterList	"const struct arg * arg , double x , double y"		7319874	3					
ANR	7319893	Parameter	const struct arg * arg	408:20:12727:12747	7319874	0	True				
ANR	7319894	ParameterType	const struct arg *		7319874	0					
ANR	7319895	Identifier	arg		7319874	1					
ANR	7319896	Parameter	double x	408:43:12750:12757	7319874	1	True				
ANR	7319897	ParameterType	double		7319874	0					
ANR	7319898	Identifier	x		7319874	1					
ANR	7319899	Parameter	double y	408:53:12760:12767	7319874	2	True				
ANR	7319900	ParameterType	double		7319874	0					
ANR	7319901	Identifier	y		7319874	1					
ANR	7319902	CFGEntryNode	ENTRY		7319874		True				
ANR	7319903	CFGExitNode	EXIT		7319874		True				
ANR	7319904	Symbol	arg		7319874						
ANR	7319905	Symbol	x		7319874						
ANR	7319906	Symbol	y		7319874						
ANR	7319907	Symbol	square_check_line		7319874						
ANR	7319908	Symbol	FILTER_WIDTH		7319874						
ANR	7319909	Function	inside_square	418:0:13129:13375							
ANR	7319910	FunctionDef	"inside_square (const struct arg * arg , double x , double y)"		7319909	0					
ANR	7319911	CompoundStatement		420:0:13197:13375	7319909	0					
ANR	7319912	ReturnStatement	"return square_check_line ( arg , x , y , arg -> width / 2 ) == 0 ;"	424:3:13319:13373	7319909	0	True				
ANR	7319913	EqualityExpression	"square_check_line ( arg , x , y , arg -> width / 2 ) == 0"		7319909	0		==			
ANR	7319914	CallExpression	"square_check_line ( arg , x , y , arg -> width / 2 )"		7319909	0					
ANR	7319915	Callee	square_check_line		7319909	0					
ANR	7319916	Identifier	square_check_line		7319909	0					
ANR	7319917	ArgumentList	arg		7319909	1					
ANR	7319918	Argument	arg		7319909	0					
ANR	7319919	Identifier	arg		7319909	0					
ANR	7319920	Argument	x		7319909	1					
ANR	7319921	Identifier	x		7319909	0					
ANR	7319922	Argument	y		7319909	2					
ANR	7319923	Identifier	y		7319909	0					
ANR	7319924	Argument	arg -> width / 2		7319909	3					
ANR	7319925	MultiplicativeExpression	arg -> width / 2		7319909	0		/			
ANR	7319926	PtrMemberAccess	arg -> width		7319909	0					
ANR	7319927	Identifier	arg		7319909	0					
ANR	7319928	Identifier	width		7319909	1					
ANR	7319929	PrimaryExpression	2		7319909	1					
ANR	7319930	PrimaryExpression	0		7319909	1					
ANR	7319931	ReturnType	static int		7319909	1					
ANR	7319932	Identifier	inside_square		7319909	2					
ANR	7319933	ParameterList	"const struct arg * arg , double x , double y"		7319909	3					
ANR	7319934	Parameter	const struct arg * arg	419:14:13154:13174	7319909	0	True				
ANR	7319935	ParameterType	const struct arg *		7319909	0					
ANR	7319936	Identifier	arg		7319909	1					
ANR	7319937	Parameter	double x	419:37:13177:13184	7319909	1	True				
ANR	7319938	ParameterType	double		7319909	0					
ANR	7319939	Identifier	x		7319909	1					
ANR	7319940	Parameter	double y	419:47:13187:13194	7319909	2	True				
ANR	7319941	ParameterType	double		7319909	0					
ANR	7319942	Identifier	y		7319909	1					
ANR	7319943	CFGEntryNode	ENTRY		7319909		True				
ANR	7319944	CFGExitNode	EXIT		7319909		True				
ANR	7319945	Symbol	arg -> width		7319909						
ANR	7319946	Symbol	arg		7319909						
ANR	7319947	Symbol	x		7319909						
ANR	7319948	Symbol	y		7319909						
ANR	7319949	Symbol	square_check_line		7319909						
ANR	7319950	Symbol	* arg		7319909						
ANR	7319951	Function	check_square	427:0:13378:14029							
ANR	7319952	FunctionDef	"check_square (const struct arg * arg , double x , double y)"		7319951	0					
ANR	7319953	CompoundStatement		429:0:13445:14029	7319951	0					
ANR	7319954	IdentifierDeclStatement	double w = arg -> width / 2 ;	432:3:13536:13559	7319951	0	True				
ANR	7319955	IdentifierDecl	w = arg -> width / 2		7319951	0					
ANR	7319956	IdentifierDeclType	double		7319951	0					
ANR	7319957	Identifier	w		7319951	1					
ANR	7319958	AssignmentExpression	w = arg -> width / 2		7319951	2		=			
ANR	7319959	Identifier	w		7319951	0					
ANR	7319960	MultiplicativeExpression	arg -> width / 2		7319951	1		/			
ANR	7319961	PtrMemberAccess	arg -> width		7319951	0					
ANR	7319962	Identifier	arg		7319951	0					
ANR	7319963	Identifier	width		7319951	1					
ANR	7319964	PrimaryExpression	2		7319951	1					
ANR	7319965	IfStatement	"if ( square_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0 )"		7319951	1					
ANR	7319966	Condition	"square_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0"	434:7:13569:13617	7319951	0	True				
ANR	7319967	EqualityExpression	"square_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0"		7319951	0		==			
ANR	7319968	CallExpression	"square_check_line ( arg , x , y , w + FILTER_WIDTH )"		7319951	0					
ANR	7319969	Callee	square_check_line		7319951	0					
ANR	7319970	Identifier	square_check_line		7319951	0					
ANR	7319971	ArgumentList	arg		7319951	1					
ANR	7319972	Argument	arg		7319951	0					
ANR	7319973	Identifier	arg		7319951	0					
ANR	7319974	Argument	x		7319951	1					
ANR	7319975	Identifier	x		7319951	0					
ANR	7319976	Argument	y		7319951	2					
ANR	7319977	Identifier	y		7319951	0					
ANR	7319978	Argument	w + FILTER_WIDTH		7319951	3					
ANR	7319979	AdditiveExpression	w + FILTER_WIDTH		7319951	0		+			
ANR	7319980	Identifier	w		7319951	0					
ANR	7319981	Identifier	FILTER_WIDTH		7319951	1					
ANR	7319982	PrimaryExpression	0		7319951	1					
ANR	7319983	CompoundStatement		7:3:177:177	7319951	1					
ANR	7319984	ExpressionStatement	w -= FILTER_WIDTH	439:6:13758:13775	7319951	0	True				
ANR	7319985	AssignmentExpression	w -= FILTER_WIDTH		7319951	0		-=			
ANR	7319986	Identifier	w		7319951	0					
ANR	7319987	Identifier	FILTER_WIDTH		7319951	1					
ANR	7319988	IfStatement	"if ( w > 0 && square_check_line ( arg , x , y , w ) == 0 )"		7319951	1					
ANR	7319989	Condition	"w > 0 && square_check_line ( arg , x , y , w ) == 0"	441:10:13788:13832	7319951	0	True				
ANR	7319990	AndExpression	"w > 0 && square_check_line ( arg , x , y , w ) == 0"		7319951	0		&&			
ANR	7319991	RelationalExpression	w > 0		7319951	0		>			
ANR	7319992	Identifier	w		7319951	0					
ANR	7319993	PrimaryExpression	0		7319951	1					
ANR	7319994	EqualityExpression	"square_check_line ( arg , x , y , w ) == 0"		7319951	1		==			
ANR	7319995	CallExpression	"square_check_line ( arg , x , y , w )"		7319951	0					
ANR	7319996	Callee	square_check_line		7319951	0					
ANR	7319997	Identifier	square_check_line		7319951	0					
ANR	7319998	ArgumentList	arg		7319951	1					
ANR	7319999	Argument	arg		7319951	0					
ANR	7320000	Identifier	arg		7319951	0					
ANR	7320001	Argument	x		7319951	1					
ANR	7320002	Identifier	x		7319951	0					
ANR	7320003	Argument	y		7319951	2					
ANR	7320004	Identifier	y		7319951	0					
ANR	7320005	Argument	w		7319951	3					
ANR	7320006	Identifier	w		7319951	0					
ANR	7320007	PrimaryExpression	0		7319951	1					
ANR	7320008	ReturnStatement	return INSIDE ;	442:9:13844:13857	7319951	1	True				
ANR	7320009	Identifier	INSIDE		7319951	0					
ANR	7320010	ReturnStatement	return 0 ;	445:6:13919:13927	7319951	2	True				
ANR	7320011	PrimaryExpression	0		7319951	0					
ANR	7320012	ElseStatement	else		7319951	0					
ANR	7320013	ReturnStatement	return OUTSIDE ;	449:6:14013:14027	7319951	0	True				
ANR	7320014	Identifier	OUTSIDE		7319951	0					
ANR	7320015	ReturnType	static int		7319951	1					
ANR	7320016	Identifier	check_square		7319951	2					
ANR	7320017	ParameterList	"const struct arg * arg , double x , double y"		7319951	3					
ANR	7320018	Parameter	const struct arg * arg	428:13:13402:13422	7319951	0	True				
ANR	7320019	ParameterType	const struct arg *		7319951	0					
ANR	7320020	Identifier	arg		7319951	1					
ANR	7320021	Parameter	double x	428:36:13425:13432	7319951	1	True				
ANR	7320022	ParameterType	double		7319951	0					
ANR	7320023	Identifier	x		7319951	1					
ANR	7320024	Parameter	double y	428:46:13435:13442	7319951	2	True				
ANR	7320025	ParameterType	double		7319951	0					
ANR	7320026	Identifier	y		7319951	1					
ANR	7320027	CFGEntryNode	ENTRY		7319951		True				
ANR	7320028	CFGExitNode	EXIT		7319951		True				
ANR	7320029	Symbol	arg -> width		7319951						
ANR	7320030	Symbol	arg		7319951						
ANR	7320031	Symbol	w		7319951						
ANR	7320032	Symbol	x		7319951						
ANR	7320033	Symbol	y		7319951						
ANR	7320034	Symbol	square_check_line		7319951						
ANR	7320035	Symbol	FILTER_WIDTH		7319951						
ANR	7320036	Symbol	OUTSIDE		7319951						
ANR	7320037	Symbol	* arg		7319951						
ANR	7320038	Symbol	INSIDE		7319951						
ANR	7320039	Function	circle_check	459:0:14272:14828							
ANR	7320040	FunctionDef	"circle_check (double x , double y , double x1 , double y1 , double x2 , double y2)"		7320039	0					
ANR	7320041	CompoundStatement		461:0:14360:14828	7320039	0					
ANR	7320042	IfStatement	"if ( square_check ( x , y , x1 , y1 , x2 , y2 ) )"		7320039	0					
ANR	7320043	Condition	"square_check ( x , y , x1 , y1 , x2 , y2 )"	462:7:14369:14402	7320039	0	True				
ANR	7320044	CallExpression	"square_check ( x , y , x1 , y1 , x2 , y2 )"		7320039	0					
ANR	7320045	Callee	square_check		7320039	0					
ANR	7320046	Identifier	square_check		7320039	0					
ANR	7320047	ArgumentList	x		7320039	1					
ANR	7320048	Argument	x		7320039	0					
ANR	7320049	Identifier	x		7320039	0					
ANR	7320050	Argument	y		7320039	1					
ANR	7320051	Identifier	y		7320039	0					
ANR	7320052	Argument	x1		7320039	2					
ANR	7320053	Identifier	x1		7320039	0					
ANR	7320054	Argument	y1		7320039	3					
ANR	7320055	Identifier	y1		7320039	0					
ANR	7320056	Argument	x2		7320039	4					
ANR	7320057	Identifier	x2		7320039	0					
ANR	7320058	Argument	y2		7320039	5					
ANR	7320059	Identifier	y2		7320039	0					
ANR	7320060	CompoundStatement		8:6:225:250	7320039	1					
ANR	7320061	IdentifierDeclStatement	const double cx = ( x1 + x2 ) / 2 ;	465:6:14479:14508	7320039	0	True				
ANR	7320062	IdentifierDecl	cx = ( x1 + x2 ) / 2		7320039	0					
ANR	7320063	IdentifierDeclType	const double		7320039	0					
ANR	7320064	Identifier	cx		7320039	1					
ANR	7320065	AssignmentExpression	cx = ( x1 + x2 ) / 2		7320039	2		=			
ANR	7320066	Identifier	cx		7320039	0					
ANR	7320067	MultiplicativeExpression	( x1 + x2 ) / 2		7320039	1		/			
ANR	7320068	AdditiveExpression	x1 + x2		7320039	0		+			
ANR	7320069	Identifier	x1		7320039	0					
ANR	7320070	Identifier	x2		7320039	1					
ANR	7320071	PrimaryExpression	2		7320039	1					
ANR	7320072	IdentifierDeclStatement	const double cy = ( y1 + y2 ) / 2 ;	466:6:14516:14545	7320039	1	True				
ANR	7320073	IdentifierDecl	cy = ( y1 + y2 ) / 2		7320039	0					
ANR	7320074	IdentifierDeclType	const double		7320039	0					
ANR	7320075	Identifier	cy		7320039	1					
ANR	7320076	AssignmentExpression	cy = ( y1 + y2 ) / 2		7320039	2		=			
ANR	7320077	Identifier	cy		7320039	0					
ANR	7320078	MultiplicativeExpression	( y1 + y2 ) / 2		7320039	1		/			
ANR	7320079	AdditiveExpression	y1 + y2		7320039	0		+			
ANR	7320080	Identifier	y1		7320039	0					
ANR	7320081	Identifier	y2		7320039	1					
ANR	7320082	PrimaryExpression	2		7320039	1					
ANR	7320083	IdentifierDeclStatement	const double dx = x1 - x2 ;	467:6:14553:14578	7320039	2	True				
ANR	7320084	IdentifierDecl	dx = x1 - x2		7320039	0					
ANR	7320085	IdentifierDeclType	const double		7320039	0					
ANR	7320086	Identifier	dx		7320039	1					
ANR	7320087	AssignmentExpression	dx = x1 - x2		7320039	2		=			
ANR	7320088	Identifier	dx		7320039	0					
ANR	7320089	AdditiveExpression	x1 - x2		7320039	1		-			
ANR	7320090	Identifier	x1		7320039	0					
ANR	7320091	Identifier	x2		7320039	1					
ANR	7320092	IdentifierDeclStatement	const double dy = y1 - y2 ;	468:6:14586:14611	7320039	3	True				
ANR	7320093	IdentifierDecl	dy = y1 - y2		7320039	0					
ANR	7320094	IdentifierDeclType	const double		7320039	0					
ANR	7320095	Identifier	dy		7320039	1					
ANR	7320096	AssignmentExpression	dy = y1 - y2		7320039	2		=			
ANR	7320097	Identifier	dy		7320039	0					
ANR	7320098	AdditiveExpression	y1 - y2		7320039	1		-			
ANR	7320099	Identifier	y1		7320039	0					
ANR	7320100	Identifier	y2		7320039	1					
ANR	7320101	ExpressionStatement	x = ( x - cx ) / dx	470:6:14620:14635	7320039	4	True				
ANR	7320102	AssignmentExpression	x = ( x - cx ) / dx		7320039	0		=			
ANR	7320103	Identifier	x		7320039	0					
ANR	7320104	MultiplicativeExpression	( x - cx ) / dx		7320039	1		/			
ANR	7320105	AdditiveExpression	x - cx		7320039	0		-			
ANR	7320106	Identifier	x		7320039	0					
ANR	7320107	Identifier	cx		7320039	1					
ANR	7320108	Identifier	dx		7320039	1					
ANR	7320109	ExpressionStatement	y = ( y - cy ) / dy	471:6:14643:14658	7320039	5	True				
ANR	7320110	AssignmentExpression	y = ( y - cy ) / dy		7320039	0		=			
ANR	7320111	Identifier	y		7320039	0					
ANR	7320112	MultiplicativeExpression	( y - cy ) / dy		7320039	1		/			
ANR	7320113	AdditiveExpression	y - cy		7320039	0		-			
ANR	7320114	Identifier	y		7320039	0					
ANR	7320115	Identifier	cy		7320039	1					
ANR	7320116	Identifier	dy		7320039	1					
ANR	7320117	ReturnStatement	return x * x + y * y < .25 ;	476:6:14773:14793	7320039	6	True				
ANR	7320118	RelationalExpression	x * x + y * y < .25		7320039	0		<			
ANR	7320119	AdditiveExpression	x * x + y * y		7320039	0		+			
ANR	7320120	MultiplicativeExpression	x * x		7320039	0		*			
ANR	7320121	Identifier	x		7320039	0					
ANR	7320122	Identifier	x		7320039	1					
ANR	7320123	MultiplicativeExpression	y * y		7320039	1		*			
ANR	7320124	Identifier	y		7320039	0					
ANR	7320125	Identifier	y		7320039	1					
ANR	7320126	PrimaryExpression	.25		7320039	1					
ANR	7320127	ReturnStatement	return 0 ;	479:3:14804:14812	7320039	1	True				
ANR	7320128	PrimaryExpression	0		7320039	0					
ANR	7320129	ReturnType	static int		7320039	1					
ANR	7320130	Identifier	circle_check		7320039	2					
ANR	7320131	ParameterList	"double x , double y , double x1 , double y1 , double x2 , double y2"		7320039	3					
ANR	7320132	Parameter	double x	460:13:14296:14303	7320039	0	True				
ANR	7320133	ParameterType	double		7320039	0					
ANR	7320134	Identifier	x		7320039	1					
ANR	7320135	Parameter	double y	460:23:14306:14313	7320039	1	True				
ANR	7320136	ParameterType	double		7320039	0					
ANR	7320137	Identifier	y		7320039	1					
ANR	7320138	Parameter	double x1	460:33:14316:14324	7320039	2	True				
ANR	7320139	ParameterType	double		7320039	0					
ANR	7320140	Identifier	x1		7320039	1					
ANR	7320141	Parameter	double y1	460:44:14327:14335	7320039	3	True				
ANR	7320142	ParameterType	double		7320039	0					
ANR	7320143	Identifier	y1		7320039	1					
ANR	7320144	Parameter	double x2	460:55:14338:14346	7320039	4	True				
ANR	7320145	ParameterType	double		7320039	0					
ANR	7320146	Identifier	x2		7320039	1					
ANR	7320147	Parameter	double y2	460:66:14349:14357	7320039	5	True				
ANR	7320148	ParameterType	double		7320039	0					
ANR	7320149	Identifier	y2		7320039	1					
ANR	7320150	CFGEntryNode	ENTRY		7320039		True				
ANR	7320151	CFGExitNode	EXIT		7320039		True				
ANR	7320152	Symbol	dx		7320039						
ANR	7320153	Symbol	cx		7320039						
ANR	7320154	Symbol	dy		7320039						
ANR	7320155	Symbol	cy		7320039						
ANR	7320156	Symbol	x		7320039						
ANR	7320157	Symbol	y1		7320039						
ANR	7320158	Symbol	y		7320039						
ANR	7320159	Symbol	x1		7320039						
ANR	7320160	Symbol	y2		7320039						
ANR	7320161	Symbol	x2		7320039						
ANR	7320162	Symbol	square_check		7320039						
ANR	7320163	Function	inside_circle_filled	482:0:14831:14974							
ANR	7320164	FunctionDef	"inside_circle_filled (const struct arg * arg , double x , double y)"		7320163	0					
ANR	7320165	CompoundStatement		484:0:14906:14974	7320163	0					
ANR	7320166	ReturnStatement	"return circle_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 ) ;"	485:3:14911:14972	7320163	0	True				
ANR	7320167	CallExpression	"circle_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 )"		7320163	0					
ANR	7320168	Callee	circle_check		7320163	0					
ANR	7320169	Identifier	circle_check		7320163	0					
ANR	7320170	ArgumentList	x		7320163	1					
ANR	7320171	Argument	x		7320163	0					
ANR	7320172	Identifier	x		7320163	0					
ANR	7320173	Argument	y		7320163	1					
ANR	7320174	Identifier	y		7320163	0					
ANR	7320175	Argument	arg -> x1		7320163	2					
ANR	7320176	PtrMemberAccess	arg -> x1		7320163	0					
ANR	7320177	Identifier	arg		7320163	0					
ANR	7320178	Identifier	x1		7320163	1					
ANR	7320179	Argument	arg -> y1		7320163	3					
ANR	7320180	PtrMemberAccess	arg -> y1		7320163	0					
ANR	7320181	Identifier	arg		7320163	0					
ANR	7320182	Identifier	y1		7320163	1					
ANR	7320183	Argument	arg -> x2		7320163	4					
ANR	7320184	PtrMemberAccess	arg -> x2		7320163	0					
ANR	7320185	Identifier	arg		7320163	0					
ANR	7320186	Identifier	x2		7320163	1					
ANR	7320187	Argument	arg -> y2		7320163	5					
ANR	7320188	PtrMemberAccess	arg -> y2		7320163	0					
ANR	7320189	Identifier	arg		7320163	0					
ANR	7320190	Identifier	y2		7320163	1					
ANR	7320191	ReturnType	static int		7320163	1					
ANR	7320192	Identifier	inside_circle_filled		7320163	2					
ANR	7320193	ParameterList	"const struct arg * arg , double x , double y"		7320163	3					
ANR	7320194	Parameter	const struct arg * arg	483:21:14863:14883	7320163	0	True				
ANR	7320195	ParameterType	const struct arg *		7320163	0					
ANR	7320196	Identifier	arg		7320163	1					
ANR	7320197	Parameter	double x	483:44:14886:14893	7320163	1	True				
ANR	7320198	ParameterType	double		7320163	0					
ANR	7320199	Identifier	x		7320163	1					
ANR	7320200	Parameter	double y	483:54:14896:14903	7320163	2	True				
ANR	7320201	ParameterType	double		7320163	0					
ANR	7320202	Identifier	y		7320163	1					
ANR	7320203	CFGEntryNode	ENTRY		7320163		True				
ANR	7320204	CFGExitNode	EXIT		7320163		True				
ANR	7320205	Symbol	arg		7320163						
ANR	7320206	Symbol	x		7320163						
ANR	7320207	Symbol	arg -> x2		7320163						
ANR	7320208	Symbol	y		7320163						
ANR	7320209	Symbol	arg -> y2		7320163						
ANR	7320210	Symbol	arg -> x1		7320163						
ANR	7320211	Symbol	circle_check		7320163						
ANR	7320212	Symbol	arg -> y1		7320163						
ANR	7320213	Symbol	* arg		7320163						
ANR	7320214	Function	circle_check_line	488:0:14977:15907							
ANR	7320215	FunctionDef	"circle_check_line (const struct arg * arg , double x , double y , double w)"		7320214	0					
ANR	7320216	CompoundStatement		494:0:15289:15907	7320214	0					
ANR	7320217	IdentifierDeclStatement	double cx = ( arg -> x1 + arg -> x2 ) / 2 ;	495:3:15294:15325	7320214	0	True				
ANR	7320218	IdentifierDecl	cx = ( arg -> x1 + arg -> x2 ) / 2		7320214	0					
ANR	7320219	IdentifierDeclType	double		7320214	0					
ANR	7320220	Identifier	cx		7320214	1					
ANR	7320221	AssignmentExpression	cx = ( arg -> x1 + arg -> x2 ) / 2		7320214	2		=			
ANR	7320222	Identifier	cx		7320214	0					
ANR	7320223	MultiplicativeExpression	( arg -> x1 + arg -> x2 ) / 2		7320214	1		/			
ANR	7320224	AdditiveExpression	arg -> x1 + arg -> x2		7320214	0		+			
ANR	7320225	PtrMemberAccess	arg -> x1		7320214	0					
ANR	7320226	Identifier	arg		7320214	0					
ANR	7320227	Identifier	x1		7320214	1					
ANR	7320228	PtrMemberAccess	arg -> x2		7320214	1					
ANR	7320229	Identifier	arg		7320214	0					
ANR	7320230	Identifier	x2		7320214	1					
ANR	7320231	PrimaryExpression	2		7320214	1					
ANR	7320232	IdentifierDeclStatement	double wx = fabs ( arg -> x1 - arg -> x2 ) / 2 ;	496:3:15330:15365	7320214	1	True				
ANR	7320233	IdentifierDecl	wx = fabs ( arg -> x1 - arg -> x2 ) / 2		7320214	0					
ANR	7320234	IdentifierDeclType	double		7320214	0					
ANR	7320235	Identifier	wx		7320214	1					
ANR	7320236	AssignmentExpression	wx = fabs ( arg -> x1 - arg -> x2 ) / 2		7320214	2		=			
ANR	7320237	Identifier	wx		7320214	0					
ANR	7320238	MultiplicativeExpression	fabs ( arg -> x1 - arg -> x2 ) / 2		7320214	1		/			
ANR	7320239	CallExpression	fabs ( arg -> x1 - arg -> x2 )		7320214	0					
ANR	7320240	Callee	fabs		7320214	0					
ANR	7320241	Identifier	fabs		7320214	0					
ANR	7320242	ArgumentList	arg -> x1 - arg -> x2		7320214	1					
ANR	7320243	Argument	arg -> x1 - arg -> x2		7320214	0					
ANR	7320244	AdditiveExpression	arg -> x1 - arg -> x2		7320214	0		-			
ANR	7320245	PtrMemberAccess	arg -> x1		7320214	0					
ANR	7320246	Identifier	arg		7320214	0					
ANR	7320247	Identifier	x1		7320214	1					
ANR	7320248	PtrMemberAccess	arg -> x2		7320214	1					
ANR	7320249	Identifier	arg		7320214	0					
ANR	7320250	Identifier	x2		7320214	1					
ANR	7320251	PrimaryExpression	2		7320214	1					
ANR	7320252	IdentifierDeclStatement	double cy = ( arg -> y1 + arg -> y2 ) / 2 ;	497:3:15370:15401	7320214	2	True				
ANR	7320253	IdentifierDecl	cy = ( arg -> y1 + arg -> y2 ) / 2		7320214	0					
ANR	7320254	IdentifierDeclType	double		7320214	0					
ANR	7320255	Identifier	cy		7320214	1					
ANR	7320256	AssignmentExpression	cy = ( arg -> y1 + arg -> y2 ) / 2		7320214	2		=			
ANR	7320257	Identifier	cy		7320214	0					
ANR	7320258	MultiplicativeExpression	( arg -> y1 + arg -> y2 ) / 2		7320214	1		/			
ANR	7320259	AdditiveExpression	arg -> y1 + arg -> y2		7320214	0		+			
ANR	7320260	PtrMemberAccess	arg -> y1		7320214	0					
ANR	7320261	Identifier	arg		7320214	0					
ANR	7320262	Identifier	y1		7320214	1					
ANR	7320263	PtrMemberAccess	arg -> y2		7320214	1					
ANR	7320264	Identifier	arg		7320214	0					
ANR	7320265	Identifier	y2		7320214	1					
ANR	7320266	PrimaryExpression	2		7320214	1					
ANR	7320267	IdentifierDeclStatement	double wy = fabs ( arg -> y1 - arg -> y2 ) / 2 ;	498:3:15406:15441	7320214	3	True				
ANR	7320268	IdentifierDecl	wy = fabs ( arg -> y1 - arg -> y2 ) / 2		7320214	0					
ANR	7320269	IdentifierDeclType	double		7320214	0					
ANR	7320270	Identifier	wy		7320214	1					
ANR	7320271	AssignmentExpression	wy = fabs ( arg -> y1 - arg -> y2 ) / 2		7320214	2		=			
ANR	7320272	Identifier	wy		7320214	0					
ANR	7320273	MultiplicativeExpression	fabs ( arg -> y1 - arg -> y2 ) / 2		7320214	1		/			
ANR	7320274	CallExpression	fabs ( arg -> y1 - arg -> y2 )		7320214	0					
ANR	7320275	Callee	fabs		7320214	0					
ANR	7320276	Identifier	fabs		7320214	0					
ANR	7320277	ArgumentList	arg -> y1 - arg -> y2		7320214	1					
ANR	7320278	Argument	arg -> y1 - arg -> y2		7320214	0					
ANR	7320279	AdditiveExpression	arg -> y1 - arg -> y2		7320214	0		-			
ANR	7320280	PtrMemberAccess	arg -> y1		7320214	0					
ANR	7320281	Identifier	arg		7320214	0					
ANR	7320282	Identifier	y1		7320214	1					
ANR	7320283	PtrMemberAccess	arg -> y2		7320214	1					
ANR	7320284	Identifier	arg		7320214	0					
ANR	7320285	Identifier	y2		7320214	1					
ANR	7320286	PrimaryExpression	2		7320214	1					
ANR	7320287	IfStatement	"if ( circle_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w ) )"		7320214	4					
ANR	7320288	Condition	"circle_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w )"	500:7:15451:15504	7320214	0	True				
ANR	7320289	CallExpression	"circle_check ( x , y , cx - wx - w , cy - wy - w , cx + wx + w , cy + wy + w )"		7320214	0					
ANR	7320290	Callee	circle_check		7320214	0					
ANR	7320291	Identifier	circle_check		7320214	0					
ANR	7320292	ArgumentList	x		7320214	1					
ANR	7320293	Argument	x		7320214	0					
ANR	7320294	Identifier	x		7320214	0					
ANR	7320295	Argument	y		7320214	1					
ANR	7320296	Identifier	y		7320214	0					
ANR	7320297	Argument	cx - wx - w		7320214	2					
ANR	7320298	AdditiveExpression	cx - wx - w		7320214	0		-			
ANR	7320299	Identifier	cx		7320214	0					
ANR	7320300	AdditiveExpression	wx - w		7320214	1		-			
ANR	7320301	Identifier	wx		7320214	0					
ANR	7320302	Identifier	w		7320214	1					
ANR	7320303	Argument	cy - wy - w		7320214	3					
ANR	7320304	AdditiveExpression	cy - wy - w		7320214	0		-			
ANR	7320305	Identifier	cy		7320214	0					
ANR	7320306	AdditiveExpression	wy - w		7320214	1		-			
ANR	7320307	Identifier	wy		7320214	0					
ANR	7320308	Identifier	w		7320214	1					
ANR	7320309	Argument	cx + wx + w		7320214	4					
ANR	7320310	AdditiveExpression	cx + wx + w		7320214	0		+			
ANR	7320311	Identifier	cx		7320214	0					
ANR	7320312	AdditiveExpression	wx + w		7320214	1		+			
ANR	7320313	Identifier	wx		7320214	0					
ANR	7320314	Identifier	w		7320214	1					
ANR	7320315	Argument	cy + wy + w		7320214	5					
ANR	7320316	AdditiveExpression	cy + wy + w		7320214	0		+			
ANR	7320317	Identifier	cy		7320214	0					
ANR	7320318	AdditiveExpression	wy + w		7320214	1		+			
ANR	7320319	Identifier	wy		7320214	0					
ANR	7320320	Identifier	w		7320214	1					
ANR	7320321	CompoundStatement		8:3:220:220	7320214	1					
ANR	7320322	ExpressionStatement	wx -= w	505:6:15627:15634	7320214	0	True				
ANR	7320323	AssignmentExpression	wx -= w		7320214	0		-=			
ANR	7320324	Identifier	wx		7320214	0					
ANR	7320325	Identifier	w		7320214	1					
ANR	7320326	ExpressionStatement	wy -= w	506:6:15642:15649	7320214	1	True				
ANR	7320327	AssignmentExpression	wy -= w		7320214	0		-=			
ANR	7320328	Identifier	wy		7320214	0					
ANR	7320329	Identifier	w		7320214	1					
ANR	7320330	IfStatement	"if ( wx > 0 && wy > 0 && circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy ) )"		7320214	2					
ANR	7320331	Condition	"wx > 0 && wy > 0 && circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"	507:10:15661:15726	7320214	0	True				
ANR	7320332	AndExpression	"wx > 0 && wy > 0 && circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		7320214	0		&&			
ANR	7320333	RelationalExpression	wx > 0		7320214	0		>			
ANR	7320334	Identifier	wx		7320214	0					
ANR	7320335	PrimaryExpression	0		7320214	1					
ANR	7320336	AndExpression	"wy > 0 && circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		7320214	1		&&			
ANR	7320337	RelationalExpression	wy > 0		7320214	0		>			
ANR	7320338	Identifier	wy		7320214	0					
ANR	7320339	PrimaryExpression	0		7320214	1					
ANR	7320340	CallExpression	"circle_check ( x , y , cx - wx , cy - wy , cx + wx , cy + wy )"		7320214	1					
ANR	7320341	Callee	circle_check		7320214	0					
ANR	7320342	Identifier	circle_check		7320214	0					
ANR	7320343	ArgumentList	x		7320214	1					
ANR	7320344	Argument	x		7320214	0					
ANR	7320345	Identifier	x		7320214	0					
ANR	7320346	Argument	y		7320214	1					
ANR	7320347	Identifier	y		7320214	0					
ANR	7320348	Argument	cx - wx		7320214	2					
ANR	7320349	AdditiveExpression	cx - wx		7320214	0		-			
ANR	7320350	Identifier	cx		7320214	0					
ANR	7320351	Identifier	wx		7320214	1					
ANR	7320352	Argument	cy - wy		7320214	3					
ANR	7320353	AdditiveExpression	cy - wy		7320214	0		-			
ANR	7320354	Identifier	cy		7320214	0					
ANR	7320355	Identifier	wy		7320214	1					
ANR	7320356	Argument	cx + wx		7320214	4					
ANR	7320357	AdditiveExpression	cx + wx		7320214	0		+			
ANR	7320358	Identifier	cx		7320214	0					
ANR	7320359	Identifier	wx		7320214	1					
ANR	7320360	Argument	cy + wy		7320214	5					
ANR	7320361	AdditiveExpression	cy + wy		7320214	0		+			
ANR	7320362	Identifier	cy		7320214	0					
ANR	7320363	Identifier	wy		7320214	1					
ANR	7320364	ReturnStatement	return INSIDE ;	508:9:15738:15751	7320214	1	True				
ANR	7320365	Identifier	INSIDE		7320214	0					
ANR	7320366	ReturnStatement	return 0 ;	510:6:15803:15811	7320214	3	True				
ANR	7320367	PrimaryExpression	0		7320214	0					
ANR	7320368	ReturnStatement	return OUTSIDE ;	513:3:15857:15871	7320214	5	True				
ANR	7320369	Identifier	OUTSIDE		7320214	0					
ANR	7320370	ReturnType	static int		7320214	1					
ANR	7320371	Identifier	circle_check_line		7320214	2					
ANR	7320372	ParameterList	"const struct arg * arg , double x , double y , double w"		7320214	3					
ANR	7320373	Parameter	const struct arg * arg	489:18:15006:15026	7320214	0	True				
ANR	7320374	ParameterType	const struct arg *		7320214	0					
ANR	7320375	Identifier	arg		7320214	1					
ANR	7320376	Parameter	double x	489:41:15029:15036	7320214	1	True				
ANR	7320377	ParameterType	double		7320214	0					
ANR	7320378	Identifier	x		7320214	1					
ANR	7320379	Parameter	double y	489:51:15039:15046	7320214	2	True				
ANR	7320380	ParameterType	double		7320214	0					
ANR	7320381	Identifier	y		7320214	1					
ANR	7320382	Parameter	double w	489:61:15049:15056	7320214	3	True				
ANR	7320383	ParameterType	double		7320214	0					
ANR	7320384	Identifier	w		7320214	1					
ANR	7320385	CFGEntryNode	ENTRY		7320214		True				
ANR	7320386	CFGExitNode	EXIT		7320214		True				
ANR	7320387	Symbol	wx		7320214						
ANR	7320388	Symbol	wy		7320214						
ANR	7320389	Symbol	fabs		7320214						
ANR	7320390	Symbol	cx		7320214						
ANR	7320391	Symbol	cy		7320214						
ANR	7320392	Symbol	arg		7320214						
ANR	7320393	Symbol	w		7320214						
ANR	7320394	Symbol	x		7320214						
ANR	7320395	Symbol	arg -> x2		7320214						
ANR	7320396	Symbol	y		7320214						
ANR	7320397	Symbol	arg -> x1		7320214						
ANR	7320398	Symbol	arg -> y2		7320214						
ANR	7320399	Symbol	circle_check		7320214						
ANR	7320400	Symbol	arg -> y1		7320214						
ANR	7320401	Symbol	OUTSIDE		7320214						
ANR	7320402	Symbol	* arg		7320214						
ANR	7320403	Symbol	INSIDE		7320214						
ANR	7320404	Function	check_circle_filled	516:0:15910:16040							
ANR	7320405	FunctionDef	"check_circle_filled (const struct arg * arg , double x , double y)"		7320404	0					
ANR	7320406	CompoundStatement		518:0:15984:16040	7320404	0					
ANR	7320407	ReturnStatement	"return circle_check_line ( arg , x , y , FILTER_WIDTH ) ;"	519:3:15989:16038	7320404	0	True				
ANR	7320408	CallExpression	"circle_check_line ( arg , x , y , FILTER_WIDTH )"		7320404	0					
ANR	7320409	Callee	circle_check_line		7320404	0					
ANR	7320410	Identifier	circle_check_line		7320404	0					
ANR	7320411	ArgumentList	arg		7320404	1					
ANR	7320412	Argument	arg		7320404	0					
ANR	7320413	Identifier	arg		7320404	0					
ANR	7320414	Argument	x		7320404	1					
ANR	7320415	Identifier	x		7320404	0					
ANR	7320416	Argument	y		7320404	2					
ANR	7320417	Identifier	y		7320404	0					
ANR	7320418	Argument	FILTER_WIDTH		7320404	3					
ANR	7320419	Identifier	FILTER_WIDTH		7320404	0					
ANR	7320420	ReturnType	static int		7320404	1					
ANR	7320421	Identifier	check_circle_filled		7320404	2					
ANR	7320422	ParameterList	"const struct arg * arg , double x , double y"		7320404	3					
ANR	7320423	Parameter	const struct arg * arg	517:20:15941:15961	7320404	0	True				
ANR	7320424	ParameterType	const struct arg *		7320404	0					
ANR	7320425	Identifier	arg		7320404	1					
ANR	7320426	Parameter	double x	517:43:15964:15971	7320404	1	True				
ANR	7320427	ParameterType	double		7320404	0					
ANR	7320428	Identifier	x		7320404	1					
ANR	7320429	Parameter	double y	517:53:15974:15981	7320404	2	True				
ANR	7320430	ParameterType	double		7320404	0					
ANR	7320431	Identifier	y		7320404	1					
ANR	7320432	CFGEntryNode	ENTRY		7320404		True				
ANR	7320433	CFGExitNode	EXIT		7320404		True				
ANR	7320434	Symbol	arg		7320404						
ANR	7320435	Symbol	x		7320404						
ANR	7320436	Symbol	y		7320404						
ANR	7320437	Symbol	circle_check_line		7320404						
ANR	7320438	Symbol	FILTER_WIDTH		7320404						
ANR	7320439	Function	inside_circle	522:0:16043:16172							
ANR	7320440	FunctionDef	"inside_circle (const struct arg * arg , double x , double y)"		7320439	0					
ANR	7320441	CompoundStatement		524:0:16111:16172	7320439	0					
ANR	7320442	ReturnStatement	"return circle_check_line ( arg , x , y , arg -> width / 2 ) == 0 ;"	525:3:16116:16170	7320439	0	True				
ANR	7320443	EqualityExpression	"circle_check_line ( arg , x , y , arg -> width / 2 ) == 0"		7320439	0		==			
ANR	7320444	CallExpression	"circle_check_line ( arg , x , y , arg -> width / 2 )"		7320439	0					
ANR	7320445	Callee	circle_check_line		7320439	0					
ANR	7320446	Identifier	circle_check_line		7320439	0					
ANR	7320447	ArgumentList	arg		7320439	1					
ANR	7320448	Argument	arg		7320439	0					
ANR	7320449	Identifier	arg		7320439	0					
ANR	7320450	Argument	x		7320439	1					
ANR	7320451	Identifier	x		7320439	0					
ANR	7320452	Argument	y		7320439	2					
ANR	7320453	Identifier	y		7320439	0					
ANR	7320454	Argument	arg -> width / 2		7320439	3					
ANR	7320455	MultiplicativeExpression	arg -> width / 2		7320439	0		/			
ANR	7320456	PtrMemberAccess	arg -> width		7320439	0					
ANR	7320457	Identifier	arg		7320439	0					
ANR	7320458	Identifier	width		7320439	1					
ANR	7320459	PrimaryExpression	2		7320439	1					
ANR	7320460	PrimaryExpression	0		7320439	1					
ANR	7320461	ReturnType	static int		7320439	1					
ANR	7320462	Identifier	inside_circle		7320439	2					
ANR	7320463	ParameterList	"const struct arg * arg , double x , double y"		7320439	3					
ANR	7320464	Parameter	const struct arg * arg	523:14:16068:16088	7320439	0	True				
ANR	7320465	ParameterType	const struct arg *		7320439	0					
ANR	7320466	Identifier	arg		7320439	1					
ANR	7320467	Parameter	double x	523:37:16091:16098	7320439	1	True				
ANR	7320468	ParameterType	double		7320439	0					
ANR	7320469	Identifier	x		7320439	1					
ANR	7320470	Parameter	double y	523:47:16101:16108	7320439	2	True				
ANR	7320471	ParameterType	double		7320439	0					
ANR	7320472	Identifier	y		7320439	1					
ANR	7320473	CFGEntryNode	ENTRY		7320439		True				
ANR	7320474	CFGExitNode	EXIT		7320439		True				
ANR	7320475	Symbol	arg -> width		7320439						
ANR	7320476	Symbol	arg		7320439						
ANR	7320477	Symbol	x		7320439						
ANR	7320478	Symbol	y		7320439						
ANR	7320479	Symbol	circle_check_line		7320439						
ANR	7320480	Symbol	* arg		7320439						
ANR	7320481	Function	check_circle	528:0:16175:16653							
ANR	7320482	FunctionDef	"check_circle (const struct arg * arg , double x , double y)"		7320481	0					
ANR	7320483	CompoundStatement		530:0:16242:16653	7320481	0					
ANR	7320484	IdentifierDeclStatement	double w = arg -> width / 2 ;	532:3:16287:16310	7320481	0	True				
ANR	7320485	IdentifierDecl	w = arg -> width / 2		7320481	0					
ANR	7320486	IdentifierDeclType	double		7320481	0					
ANR	7320487	Identifier	w		7320481	1					
ANR	7320488	AssignmentExpression	w = arg -> width / 2		7320481	2		=			
ANR	7320489	Identifier	w		7320481	0					
ANR	7320490	MultiplicativeExpression	arg -> width / 2		7320481	1		/			
ANR	7320491	PtrMemberAccess	arg -> width		7320481	0					
ANR	7320492	Identifier	arg		7320481	0					
ANR	7320493	Identifier	width		7320481	1					
ANR	7320494	PrimaryExpression	2		7320481	1					
ANR	7320495	IfStatement	"if ( circle_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0 )"		7320481	1					
ANR	7320496	Condition	"circle_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0"	534:7:16320:16368	7320481	0	True				
ANR	7320497	EqualityExpression	"circle_check_line ( arg , x , y , w + FILTER_WIDTH ) == 0"		7320481	0		==			
ANR	7320498	CallExpression	"circle_check_line ( arg , x , y , w + FILTER_WIDTH )"		7320481	0					
ANR	7320499	Callee	circle_check_line		7320481	0					
ANR	7320500	Identifier	circle_check_line		7320481	0					
ANR	7320501	ArgumentList	arg		7320481	1					
ANR	7320502	Argument	arg		7320481	0					
ANR	7320503	Identifier	arg		7320481	0					
ANR	7320504	Argument	x		7320481	1					
ANR	7320505	Identifier	x		7320481	0					
ANR	7320506	Argument	y		7320481	2					
ANR	7320507	Identifier	y		7320481	0					
ANR	7320508	Argument	w + FILTER_WIDTH		7320481	3					
ANR	7320509	AdditiveExpression	w + FILTER_WIDTH		7320481	0		+			
ANR	7320510	Identifier	w		7320481	0					
ANR	7320511	Identifier	FILTER_WIDTH		7320481	1					
ANR	7320512	PrimaryExpression	0		7320481	1					
ANR	7320513	CompoundStatement		6:3:131:131	7320481	1					
ANR	7320514	ExpressionStatement	w -= FILTER_WIDTH	536:6:16382:16399	7320481	0	True				
ANR	7320515	AssignmentExpression	w -= FILTER_WIDTH		7320481	0		-=			
ANR	7320516	Identifier	w		7320481	0					
ANR	7320517	Identifier	FILTER_WIDTH		7320481	1					
ANR	7320518	IfStatement	"if ( w > 0 && circle_check_line ( arg , x , y , w ) == 0 )"		7320481	1					
ANR	7320519	Condition	"w > 0 && circle_check_line ( arg , x , y , w ) == 0"	538:10:16412:16456	7320481	0	True				
ANR	7320520	AndExpression	"w > 0 && circle_check_line ( arg , x , y , w ) == 0"		7320481	0		&&			
ANR	7320521	RelationalExpression	w > 0		7320481	0		>			
ANR	7320522	Identifier	w		7320481	0					
ANR	7320523	PrimaryExpression	0		7320481	1					
ANR	7320524	EqualityExpression	"circle_check_line ( arg , x , y , w ) == 0"		7320481	1		==			
ANR	7320525	CallExpression	"circle_check_line ( arg , x , y , w )"		7320481	0					
ANR	7320526	Callee	circle_check_line		7320481	0					
ANR	7320527	Identifier	circle_check_line		7320481	0					
ANR	7320528	ArgumentList	arg		7320481	1					
ANR	7320529	Argument	arg		7320481	0					
ANR	7320530	Identifier	arg		7320481	0					
ANR	7320531	Argument	x		7320481	1					
ANR	7320532	Identifier	x		7320481	0					
ANR	7320533	Argument	y		7320481	2					
ANR	7320534	Identifier	y		7320481	0					
ANR	7320535	Argument	w		7320481	3					
ANR	7320536	Identifier	w		7320481	0					
ANR	7320537	PrimaryExpression	0		7320481	1					
ANR	7320538	ReturnStatement	return INSIDE ;	539:9:16468:16481	7320481	1	True				
ANR	7320539	Identifier	INSIDE		7320481	0					
ANR	7320540	ReturnStatement	return 0 ;	542:6:16543:16551	7320481	2	True				
ANR	7320541	PrimaryExpression	0		7320481	0					
ANR	7320542	ElseStatement	else		7320481	0					
ANR	7320543	ReturnStatement	return OUTSIDE ;	546:6:16637:16651	7320481	0	True				
ANR	7320544	Identifier	OUTSIDE		7320481	0					
ANR	7320545	ReturnType	static int		7320481	1					
ANR	7320546	Identifier	check_circle		7320481	2					
ANR	7320547	ParameterList	"const struct arg * arg , double x , double y"		7320481	3					
ANR	7320548	Parameter	const struct arg * arg	529:13:16199:16219	7320481	0	True				
ANR	7320549	ParameterType	const struct arg *		7320481	0					
ANR	7320550	Identifier	arg		7320481	1					
ANR	7320551	Parameter	double x	529:36:16222:16229	7320481	1	True				
ANR	7320552	ParameterType	double		7320481	0					
ANR	7320553	Identifier	x		7320481	1					
ANR	7320554	Parameter	double y	529:46:16232:16239	7320481	2	True				
ANR	7320555	ParameterType	double		7320481	0					
ANR	7320556	Identifier	y		7320481	1					
ANR	7320557	CFGEntryNode	ENTRY		7320481		True				
ANR	7320558	CFGExitNode	EXIT		7320481		True				
ANR	7320559	Symbol	arg -> width		7320481						
ANR	7320560	Symbol	arg		7320481						
ANR	7320561	Symbol	w		7320481						
ANR	7320562	Symbol	x		7320481						
ANR	7320563	Symbol	y		7320481						
ANR	7320564	Symbol	FILTER_WIDTH		7320481						
ANR	7320565	Symbol	circle_check_line		7320481						
ANR	7320566	Symbol	OUTSIDE		7320481						
ANR	7320567	Symbol	* arg		7320481						
ANR	7320568	Symbol	INSIDE		7320481						
ANR	7320569	Function	line_check	553:0:16749:18027							
ANR	7320570	FunctionDef	"line_check (double x , double y , double x1 , double y1 , double x2 , double y2 , double w , double expand)"		7320569	0					
ANR	7320571	CompoundStatement		556:0:16863:18027	7320569	0					
ANR	7320572	IdentifierDeclStatement	double lx = x2 - x1 ;	558:3:16920:16939	7320569	0	True				
ANR	7320573	IdentifierDecl	lx = x2 - x1		7320569	0					
ANR	7320574	IdentifierDeclType	double		7320569	0					
ANR	7320575	Identifier	lx		7320569	1					
ANR	7320576	AssignmentExpression	lx = x2 - x1		7320569	2		=			
ANR	7320577	Identifier	lx		7320569	0					
ANR	7320578	AdditiveExpression	x2 - x1		7320569	1		-			
ANR	7320579	Identifier	x2		7320569	0					
ANR	7320580	Identifier	x1		7320569	1					
ANR	7320581	IdentifierDeclStatement	double ly = y2 - y1 ;	559:3:16944:16963	7320569	1	True				
ANR	7320582	IdentifierDecl	ly = y2 - y1		7320569	0					
ANR	7320583	IdentifierDeclType	double		7320569	0					
ANR	7320584	Identifier	ly		7320569	1					
ANR	7320585	AssignmentExpression	ly = y2 - y1		7320569	2		=			
ANR	7320586	Identifier	ly		7320569	0					
ANR	7320587	AdditiveExpression	y2 - y1		7320569	1		-			
ANR	7320588	Identifier	y2		7320569	0					
ANR	7320589	Identifier	y1		7320569	1					
ANR	7320590	IdentifierDeclStatement	double len2 = lx * lx + ly * ly ;	560:3:16968:16995	7320569	2	True				
ANR	7320591	IdentifierDecl	len2 = lx * lx + ly * ly		7320569	0					
ANR	7320592	IdentifierDeclType	double		7320569	0					
ANR	7320593	Identifier	len2		7320569	1					
ANR	7320594	AssignmentExpression	len2 = lx * lx + ly * ly		7320569	2		=			
ANR	7320595	Identifier	len2		7320569	0					
ANR	7320596	AdditiveExpression	lx * lx + ly * ly		7320569	1		+			
ANR	7320597	MultiplicativeExpression	lx * lx		7320569	0		*			
ANR	7320598	Identifier	lx		7320569	0					
ANR	7320599	Identifier	lx		7320569	1					
ANR	7320600	MultiplicativeExpression	ly * ly		7320569	1		*			
ANR	7320601	Identifier	ly		7320569	0					
ANR	7320602	Identifier	ly		7320569	1					
ANR	7320603	IdentifierDeclStatement	"double cross , dot ;"	561:3:17000:17017	7320569	3	True				
ANR	7320604	IdentifierDecl	cross		7320569	0					
ANR	7320605	IdentifierDeclType	double		7320569	0					
ANR	7320606	Identifier	cross		7320569	1					
ANR	7320607	IdentifierDecl	dot		7320569	1					
ANR	7320608	IdentifierDeclType	double		7320569	0					
ANR	7320609	Identifier	dot		7320569	1					
ANR	7320610	ExpressionStatement	x -= x1	563:3:17023:17030	7320569	4	True				
ANR	7320611	AssignmentExpression	x -= x1		7320569	0		-=			
ANR	7320612	Identifier	x		7320569	0					
ANR	7320613	Identifier	x1		7320569	1					
ANR	7320614	ExpressionStatement	y -= y1	564:3:17035:17042	7320569	5	True				
ANR	7320615	AssignmentExpression	y -= y1		7320569	0		-=			
ANR	7320616	Identifier	y		7320569	0					
ANR	7320617	Identifier	y1		7320569	1					
ANR	7320618	ExpressionStatement	cross = x * ly - y * lx	571:3:17215:17238	7320569	6	True				
ANR	7320619	AssignmentExpression	cross = x * ly - y * lx		7320569	0		=			
ANR	7320620	Identifier	cross		7320569	0					
ANR	7320621	AdditiveExpression	x * ly - y * lx		7320569	1		-			
ANR	7320622	MultiplicativeExpression	x * ly		7320569	0		*			
ANR	7320623	Identifier	x		7320569	0					
ANR	7320624	Identifier	ly		7320569	1					
ANR	7320625	MultiplicativeExpression	y * lx		7320569	1		*			
ANR	7320626	Identifier	y		7320569	0					
ANR	7320627	Identifier	lx		7320569	1					
ANR	7320628	IfStatement	if ( cross * cross >= ( w + expand ) * ( w + expand ) * len2 )		7320569	7					
ANR	7320629	Condition	cross * cross >= ( w + expand ) * ( w + expand ) * len2	579:7:17433:17473	7320569	0	True				
ANR	7320630	RelationalExpression	cross * cross >= ( w + expand ) * ( w + expand ) * len2		7320569	0		>=			
ANR	7320631	MultiplicativeExpression	cross * cross		7320569	0		*			
ANR	7320632	Identifier	cross		7320569	0					
ANR	7320633	Identifier	cross		7320569	1					
ANR	7320634	MultiplicativeExpression	( w + expand ) * ( w + expand ) * len2		7320569	1		*			
ANR	7320635	AdditiveExpression	w + expand		7320569	0		+			
ANR	7320636	Identifier	w		7320569	0					
ANR	7320637	Identifier	expand		7320569	1					
ANR	7320638	MultiplicativeExpression	( w + expand ) * len2		7320569	1		*			
ANR	7320639	AdditiveExpression	w + expand		7320569	0		+			
ANR	7320640	Identifier	w		7320569	0					
ANR	7320641	Identifier	expand		7320569	1					
ANR	7320642	Identifier	len2		7320569	1					
ANR	7320643	ReturnStatement	return 0 ;	580:6:17482:17490	7320569	1	True				
ANR	7320644	PrimaryExpression	0		7320569	0					
ANR	7320645	ExpressionStatement	dot = lx * x + ly * y	587:3:17690:17711	7320569	8	True				
ANR	7320646	AssignmentExpression	dot = lx * x + ly * y		7320569	0		=			
ANR	7320647	Identifier	dot		7320569	0					
ANR	7320648	AdditiveExpression	lx * x + ly * y		7320569	1		+			
ANR	7320649	MultiplicativeExpression	lx * x		7320569	0		*			
ANR	7320650	Identifier	lx		7320569	0					
ANR	7320651	Identifier	x		7320569	1					
ANR	7320652	MultiplicativeExpression	ly * y		7320569	1		*			
ANR	7320653	Identifier	ly		7320569	0					
ANR	7320654	Identifier	y		7320569	1					
ANR	7320655	ReturnStatement	return dot > - expand && dot < len2 + expand ;	597:3:17984:18025	7320569	9	True				
ANR	7320656	AndExpression	dot > - expand && dot < len2 + expand		7320569	0		&&			
ANR	7320657	RelationalExpression	dot > - expand		7320569	0		>			
ANR	7320658	Identifier	dot		7320569	0					
ANR	7320659	UnaryOperationExpression	- expand		7320569	1					
ANR	7320660	UnaryOperator	-		7320569	0					
ANR	7320661	Identifier	expand		7320569	1					
ANR	7320662	RelationalExpression	dot < len2 + expand		7320569	1		<			
ANR	7320663	Identifier	dot		7320569	0					
ANR	7320664	AdditiveExpression	len2 + expand		7320569	1		+			
ANR	7320665	Identifier	len2		7320569	0					
ANR	7320666	Identifier	expand		7320569	1					
ANR	7320667	ReturnType	static int		7320569	1					
ANR	7320668	Identifier	line_check		7320569	2					
ANR	7320669	ParameterList	"double x , double y , double x1 , double y1 , double x2 , double y2 , double w , double expand"		7320569	3					
ANR	7320670	Parameter	double x	554:11:16771:16778	7320569	0	True				
ANR	7320671	ParameterType	double		7320569	0					
ANR	7320672	Identifier	x		7320569	1					
ANR	7320673	Parameter	double y	554:21:16781:16788	7320569	1	True				
ANR	7320674	ParameterType	double		7320569	0					
ANR	7320675	Identifier	y		7320569	1					
ANR	7320676	Parameter	double x1	554:31:16791:16799	7320569	2	True				
ANR	7320677	ParameterType	double		7320569	0					
ANR	7320678	Identifier	x1		7320569	1					
ANR	7320679	Parameter	double y1	554:42:16802:16810	7320569	3	True				
ANR	7320680	ParameterType	double		7320569	0					
ANR	7320681	Identifier	y1		7320569	1					
ANR	7320682	Parameter	double x2	554:53:16813:16821	7320569	4	True				
ANR	7320683	ParameterType	double		7320569	0					
ANR	7320684	Identifier	x2		7320569	1					
ANR	7320685	Parameter	double y2	554:64:16824:16832	7320569	5	True				
ANR	7320686	ParameterType	double		7320569	0					
ANR	7320687	Identifier	y2		7320569	1					
ANR	7320688	Parameter	double w	555:3:16838:16845	7320569	6	True				
ANR	7320689	ParameterType	double		7320569	0					
ANR	7320690	Identifier	w		7320569	1					
ANR	7320691	Parameter	double expand	555:13:16848:16860	7320569	7	True				
ANR	7320692	ParameterType	double		7320569	0					
ANR	7320693	Identifier	expand		7320569	1					
ANR	7320694	CFGEntryNode	ENTRY		7320569		True				
ANR	7320695	CFGExitNode	EXIT		7320569		True				
ANR	7320696	Symbol	cross		7320569						
ANR	7320697	Symbol	dot		7320569						
ANR	7320698	Symbol	lx		7320569						
ANR	7320699	Symbol	ly		7320569						
ANR	7320700	Symbol	len2		7320569						
ANR	7320701	Symbol	expand		7320569						
ANR	7320702	Symbol	w		7320569						
ANR	7320703	Symbol	x		7320569						
ANR	7320704	Symbol	y1		7320569						
ANR	7320705	Symbol	y		7320569						
ANR	7320706	Symbol	x1		7320569						
ANR	7320707	Symbol	y2		7320569						
ANR	7320708	Symbol	x2		7320569						
ANR	7320709	Function	inside_line	600:0:18030:18179							
ANR	7320710	FunctionDef	"inside_line (const struct arg * arg , double x , double y)"		7320709	0					
ANR	7320711	CompoundStatement		602:0:18096:18179	7320709	0					
ANR	7320712	ReturnStatement	"return line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , 0 ) ;"	603:3:18101:18177	7320709	0	True				
ANR	7320713	CallExpression	"line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , 0 )"		7320709	0					
ANR	7320714	Callee	line_check		7320709	0					
ANR	7320715	Identifier	line_check		7320709	0					
ANR	7320716	ArgumentList	x		7320709	1					
ANR	7320717	Argument	x		7320709	0					
ANR	7320718	Identifier	x		7320709	0					
ANR	7320719	Argument	y		7320709	1					
ANR	7320720	Identifier	y		7320709	0					
ANR	7320721	Argument	arg -> x1		7320709	2					
ANR	7320722	PtrMemberAccess	arg -> x1		7320709	0					
ANR	7320723	Identifier	arg		7320709	0					
ANR	7320724	Identifier	x1		7320709	1					
ANR	7320725	Argument	arg -> y1		7320709	3					
ANR	7320726	PtrMemberAccess	arg -> y1		7320709	0					
ANR	7320727	Identifier	arg		7320709	0					
ANR	7320728	Identifier	y1		7320709	1					
ANR	7320729	Argument	arg -> x2		7320709	4					
ANR	7320730	PtrMemberAccess	arg -> x2		7320709	0					
ANR	7320731	Identifier	arg		7320709	0					
ANR	7320732	Identifier	x2		7320709	1					
ANR	7320733	Argument	arg -> y2		7320709	5					
ANR	7320734	PtrMemberAccess	arg -> y2		7320709	0					
ANR	7320735	Identifier	arg		7320709	0					
ANR	7320736	Identifier	y2		7320709	1					
ANR	7320737	Argument	arg -> width / 2		7320709	6					
ANR	7320738	MultiplicativeExpression	arg -> width / 2		7320709	0		/			
ANR	7320739	PtrMemberAccess	arg -> width		7320709	0					
ANR	7320740	Identifier	arg		7320709	0					
ANR	7320741	Identifier	width		7320709	1					
ANR	7320742	PrimaryExpression	2		7320709	1					
ANR	7320743	Argument	0		7320709	7					
ANR	7320744	PrimaryExpression	0		7320709	0					
ANR	7320745	ReturnType	static int		7320709	1					
ANR	7320746	Identifier	inside_line		7320709	2					
ANR	7320747	ParameterList	"const struct arg * arg , double x , double y"		7320709	3					
ANR	7320748	Parameter	const struct arg * arg	601:12:18053:18073	7320709	0	True				
ANR	7320749	ParameterType	const struct arg *		7320709	0					
ANR	7320750	Identifier	arg		7320709	1					
ANR	7320751	Parameter	double x	601:35:18076:18083	7320709	1	True				
ANR	7320752	ParameterType	double		7320709	0					
ANR	7320753	Identifier	x		7320709	1					
ANR	7320754	Parameter	double y	601:45:18086:18093	7320709	2	True				
ANR	7320755	ParameterType	double		7320709	0					
ANR	7320756	Identifier	y		7320709	1					
ANR	7320757	CFGEntryNode	ENTRY		7320709		True				
ANR	7320758	CFGExitNode	EXIT		7320709		True				
ANR	7320759	Symbol	arg -> width		7320709						
ANR	7320760	Symbol	arg		7320709						
ANR	7320761	Symbol	x		7320709						
ANR	7320762	Symbol	arg -> x2		7320709						
ANR	7320763	Symbol	y		7320709						
ANR	7320764	Symbol	arg -> x1		7320709						
ANR	7320765	Symbol	arg -> y2		7320709						
ANR	7320766	Symbol	line_check		7320709						
ANR	7320767	Symbol	arg -> y1		7320709						
ANR	7320768	Symbol	* arg		7320709						
ANR	7320769	Function	check_line	606:0:18182:18820							
ANR	7320770	FunctionDef	"check_line (const struct arg * arg , double x , double y)"		7320769	0					
ANR	7320771	CompoundStatement		608:0:18247:18820	7320769	0					
ANR	7320772	IfStatement	"if ( line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , FILTER_WIDTH ) )"		7320769	0					
ANR	7320773	Condition	"line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , FILTER_WIDTH )"	612:7:18411:18497	7320769	0	True				
ANR	7320774	CallExpression	"line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , FILTER_WIDTH )"		7320769	0					
ANR	7320775	Callee	line_check		7320769	0					
ANR	7320776	Identifier	line_check		7320769	0					
ANR	7320777	ArgumentList	x		7320769	1					
ANR	7320778	Argument	x		7320769	0					
ANR	7320779	Identifier	x		7320769	0					
ANR	7320780	Argument	y		7320769	1					
ANR	7320781	Identifier	y		7320769	0					
ANR	7320782	Argument	arg -> x1		7320769	2					
ANR	7320783	PtrMemberAccess	arg -> x1		7320769	0					
ANR	7320784	Identifier	arg		7320769	0					
ANR	7320785	Identifier	x1		7320769	1					
ANR	7320786	Argument	arg -> y1		7320769	3					
ANR	7320787	PtrMemberAccess	arg -> y1		7320769	0					
ANR	7320788	Identifier	arg		7320769	0					
ANR	7320789	Identifier	y1		7320769	1					
ANR	7320790	Argument	arg -> x2		7320769	4					
ANR	7320791	PtrMemberAccess	arg -> x2		7320769	0					
ANR	7320792	Identifier	arg		7320769	0					
ANR	7320793	Identifier	x2		7320769	1					
ANR	7320794	Argument	arg -> y2		7320769	5					
ANR	7320795	PtrMemberAccess	arg -> y2		7320769	0					
ANR	7320796	Identifier	arg		7320769	0					
ANR	7320797	Identifier	y2		7320769	1					
ANR	7320798	Argument	arg -> width / 2		7320769	6					
ANR	7320799	MultiplicativeExpression	arg -> width / 2		7320769	0		/			
ANR	7320800	PtrMemberAccess	arg -> width		7320769	0					
ANR	7320801	Identifier	arg		7320769	0					
ANR	7320802	Identifier	width		7320769	1					
ANR	7320803	PrimaryExpression	2		7320769	1					
ANR	7320804	Argument	FILTER_WIDTH		7320769	7					
ANR	7320805	Identifier	FILTER_WIDTH		7320769	0					
ANR	7320806	CompoundStatement		7:3:255:255	7320769	1					
ANR	7320807	IfStatement	"if ( arg -> width > 2 * FILTER_WIDTH && line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , - FILTER_WIDTH ) )"		7320769	0					
ANR	7320808	Condition	"arg -> width > 2 * FILTER_WIDTH && line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , - FILTER_WIDTH )"	618:10:18617:18751	7320769	0	True				
ANR	7320809	AndExpression	"arg -> width > 2 * FILTER_WIDTH && line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , - FILTER_WIDTH )"		7320769	0		&&			
ANR	7320810	RelationalExpression	arg -> width > 2 * FILTER_WIDTH		7320769	0		>			
ANR	7320811	PtrMemberAccess	arg -> width		7320769	0					
ANR	7320812	Identifier	arg		7320769	0					
ANR	7320813	Identifier	width		7320769	1					
ANR	7320814	MultiplicativeExpression	2 * FILTER_WIDTH		7320769	1		*			
ANR	7320815	PrimaryExpression	2		7320769	0					
ANR	7320816	Identifier	FILTER_WIDTH		7320769	1					
ANR	7320817	CallExpression	"line_check ( x , y , arg -> x1 , arg -> y1 , arg -> x2 , arg -> y2 , arg -> width / 2 , - FILTER_WIDTH )"		7320769	1					
ANR	7320818	Callee	line_check		7320769	0					
ANR	7320819	Identifier	line_check		7320769	0					
ANR	7320820	ArgumentList	x		7320769	1					
ANR	7320821	Argument	x		7320769	0					
ANR	7320822	Identifier	x		7320769	0					
ANR	7320823	Argument	y		7320769	1					
ANR	7320824	Identifier	y		7320769	0					
ANR	7320825	Argument	arg -> x1		7320769	2					
ANR	7320826	PtrMemberAccess	arg -> x1		7320769	0					
ANR	7320827	Identifier	arg		7320769	0					
ANR	7320828	Identifier	x1		7320769	1					
ANR	7320829	Argument	arg -> y1		7320769	3					
ANR	7320830	PtrMemberAccess	arg -> y1		7320769	0					
ANR	7320831	Identifier	arg		7320769	0					
ANR	7320832	Identifier	y1		7320769	1					
ANR	7320833	Argument	arg -> x2		7320769	4					
ANR	7320834	PtrMemberAccess	arg -> x2		7320769	0					
ANR	7320835	Identifier	arg		7320769	0					
ANR	7320836	Identifier	x2		7320769	1					
ANR	7320837	Argument	arg -> y2		7320769	5					
ANR	7320838	PtrMemberAccess	arg -> y2		7320769	0					
ANR	7320839	Identifier	arg		7320769	0					
ANR	7320840	Identifier	y2		7320769	1					
ANR	7320841	Argument	arg -> width / 2		7320769	6					
ANR	7320842	MultiplicativeExpression	arg -> width / 2		7320769	0		/			
ANR	7320843	PtrMemberAccess	arg -> width		7320769	0					
ANR	7320844	Identifier	arg		7320769	0					
ANR	7320845	Identifier	width		7320769	1					
ANR	7320846	PrimaryExpression	2		7320769	1					
ANR	7320847	Argument	- FILTER_WIDTH		7320769	7					
ANR	7320848	UnaryOperationExpression	- FILTER_WIDTH		7320769	0					
ANR	7320849	UnaryOperator	-		7320769	0					
ANR	7320850	Identifier	FILTER_WIDTH		7320769	1					
ANR	7320851	ReturnStatement	return INSIDE ;	621:9:18763:18776	7320769	1	True				
ANR	7320852	Identifier	INSIDE		7320769	0					
ANR	7320853	ReturnStatement	return 0 ;	623:6:18785:18793	7320769	1	True				
ANR	7320854	PrimaryExpression	0		7320769	0					
ANR	7320855	ReturnStatement	return OUTSIDE ;	626:3:18804:18818	7320769	1	True				
ANR	7320856	Identifier	OUTSIDE		7320769	0					
ANR	7320857	ReturnType	static int		7320769	1					
ANR	7320858	Identifier	check_line		7320769	2					
ANR	7320859	ParameterList	"const struct arg * arg , double x , double y"		7320769	3					
ANR	7320860	Parameter	const struct arg * arg	607:11:18204:18224	7320769	0	True				
ANR	7320861	ParameterType	const struct arg *		7320769	0					
ANR	7320862	Identifier	arg		7320769	1					
ANR	7320863	Parameter	double x	607:34:18227:18234	7320769	1	True				
ANR	7320864	ParameterType	double		7320769	0					
ANR	7320865	Identifier	x		7320769	1					
ANR	7320866	Parameter	double y	607:44:18237:18244	7320769	2	True				
ANR	7320867	ParameterType	double		7320769	0					
ANR	7320868	Identifier	y		7320769	1					
ANR	7320869	CFGEntryNode	ENTRY		7320769		True				
ANR	7320870	CFGExitNode	EXIT		7320769		True				
ANR	7320871	Symbol	arg -> width		7320769						
ANR	7320872	Symbol	arg		7320769						
ANR	7320873	Symbol	x		7320769						
ANR	7320874	Symbol	arg -> x2		7320769						
ANR	7320875	Symbol	y		7320769						
ANR	7320876	Symbol	arg -> x1		7320769						
ANR	7320877	Symbol	arg -> y2		7320769						
ANR	7320878	Symbol	line_check		7320769						
ANR	7320879	Symbol	arg -> y1		7320769						
ANR	7320880	Symbol	FILTER_WIDTH		7320769						
ANR	7320881	Symbol	OUTSIDE		7320769						
ANR	7320882	Symbol	* arg		7320769						
ANR	7320883	Symbol	INSIDE		7320769						
ANR	7320884	ClassDef	<unnamed>	629:13:18836:19320							
ANR	7320885	DeclStmt									
ANR	7320886	Decl							const char	const char *	name
ANR	7320887	DeclStmt									
ANR	7320888	Decl								 [ ]	shape_defs
ANR	7320889	Function	shape_of	653:0:19389:19869							
ANR	7320890	FunctionDef	"shape_of (const char * arg , double width , int f)"		7320889	0					
ANR	7320891	CompoundStatement		655:0:19456:19869	7320889	0					
ANR	7320892	IdentifierDeclStatement	unsigned int i ;	656:3:19461:19475	7320889	0	True				
ANR	7320893	IdentifierDecl	i		7320889	0					
ANR	7320894	IdentifierDeclType	unsigned int		7320889	0					
ANR	7320895	Identifier	i		7320889	1					
ANR	7320896	ForStatement	for ( i = 0 ; i < shape_count ; ++ i )		7320889	1					
ANR	7320897	ForInit	i = 0 ;	658:8:19486:19489	7320889	0	True				
ANR	7320898	AssignmentExpression	i = 0		7320889	0		=			
ANR	7320899	Identifier	i		7320889	0					
ANR	7320900	PrimaryExpression	0		7320889	1					
ANR	7320901	Condition	i < shape_count	658:13:19491:19503	7320889	1	True				
ANR	7320902	RelationalExpression	i < shape_count		7320889	0		<			
ANR	7320903	Identifier	i		7320889	0					
ANR	7320904	Identifier	shape_count		7320889	1					
ANR	7320905	UnaryExpression	++ i	658:28:19506:19508	7320889	2	True				
ANR	7320906	IncDec	++		7320889	0					
ANR	7320907	Identifier	i		7320889	1					
ANR	7320908	IfStatement	"if ( strcmp ( shape_defs [ i ] . name , arg ) == 0 )"		7320889	3					
ANR	7320909	Condition	"strcmp ( shape_defs [ i ] . name , arg ) == 0"	658:37:19515:19550	7320889	0	True				
ANR	7320910	EqualityExpression	"strcmp ( shape_defs [ i ] . name , arg ) == 0"		7320889	0		==			
ANR	7320911	CallExpression	"strcmp ( shape_defs [ i ] . name , arg )"		7320889	0					
ANR	7320912	Callee	strcmp		7320889	0					
ANR	7320913	Identifier	strcmp		7320889	0					
ANR	7320914	ArgumentList	shape_defs [ i ] . name		7320889	1					
ANR	7320915	Argument	shape_defs [ i ] . name		7320889	0					
ANR	7320916	MemberAccess	shape_defs [ i ] . name		7320889	0					
ANR	7320917	ArrayIndexing	shape_defs [ i ]		7320889	0					
ANR	7320918	Identifier	shape_defs		7320889	0					
ANR	7320919	Identifier	i		7320889	1					
ANR	7320920	Identifier	name		7320889	1					
ANR	7320921	Argument	arg		7320889	1					
ANR	7320922	Identifier	arg		7320889	0					
ANR	7320923	PrimaryExpression	0		7320889	1					
ANR	7320924	CompoundStatement		6:6:107:162	7320889	1					
ANR	7320925	IdentifierDeclStatement	shape_fn_ptr fn = shape_defs [ i ] . function [ width != 0 ] [ f ] ;	660:6:19564:19619	7320889	0	True				
ANR	7320926	IdentifierDecl	fn = shape_defs [ i ] . function [ width != 0 ] [ f ]		7320889	0					
ANR	7320927	IdentifierDeclType	shape_fn_ptr		7320889	0					
ANR	7320928	Identifier	fn		7320889	1					
ANR	7320929	AssignmentExpression	fn = shape_defs [ i ] . function [ width != 0 ] [ f ]		7320889	2		=			
ANR	7320930	Identifier	fn		7320889	0					
ANR	7320931	ArrayIndexing	shape_defs [ i ] . function [ width != 0 ] [ f ]		7320889	1					
ANR	7320932	ArrayIndexing	shape_defs [ i ] . function [ width != 0 ]		7320889	0					
ANR	7320933	MemberAccess	shape_defs [ i ] . function		7320889	0					
ANR	7320934	ArrayIndexing	shape_defs [ i ]		7320889	0					
ANR	7320935	Identifier	shape_defs		7320889	0					
ANR	7320936	Identifier	i		7320889	1					
ANR	7320937	Identifier	function		7320889	1					
ANR	7320938	EqualityExpression	width != 0		7320889	1		!=			
ANR	7320939	Identifier	width		7320889	0					
ANR	7320940	PrimaryExpression	0		7320889	1					
ANR	7320941	Identifier	f		7320889	1					
ANR	7320942	IfStatement	if ( fn != NULL )		7320889	1					
ANR	7320943	Condition	fn != NULL	662:10:19632:19641	7320889	0	True				
ANR	7320944	EqualityExpression	fn != NULL		7320889	0		!=			
ANR	7320945	Identifier	fn		7320889	0					
ANR	7320946	Identifier	NULL		7320889	1					
ANR	7320947	ReturnStatement	return fn ;	663:9:19653:19662	7320889	1	True				
ANR	7320948	Identifier	fn		7320889	0					
ANR	7320949	ExpressionStatement	"fprintf ( stderr , ""genpng: %s %s not supported\\n"" , width == 0 ? ""filled"" : ""unfilled"" , arg )"	665:6:19671:19769	7320889	2	True				
ANR	7320950	CallExpression	"fprintf ( stderr , ""genpng: %s %s not supported\\n"" , width == 0 ? ""filled"" : ""unfilled"" , arg )"		7320889	0					
ANR	7320951	Callee	fprintf		7320889	0					
ANR	7320952	Identifier	fprintf		7320889	0					
ANR	7320953	ArgumentList	stderr		7320889	1					
ANR	7320954	Argument	stderr		7320889	0					
ANR	7320955	Identifier	stderr		7320889	0					
ANR	7320956	Argument	"""genpng: %s %s not supported\\n"""		7320889	1					
ANR	7320957	PrimaryExpression	"""genpng: %s %s not supported\\n"""		7320889	0					
ANR	7320958	Argument	"width == 0 ? ""filled"" : ""unfilled"""		7320889	2					
ANR	7320959	ConditionalExpression	"width == 0 ? ""filled"" : ""unfilled"""		7320889	0					
ANR	7320960	Condition	width == 0		7320889	0					
ANR	7320961	EqualityExpression	width == 0		7320889	0		==			
ANR	7320962	Identifier	width		7320889	0					
ANR	7320963	PrimaryExpression	0		7320889	1					
ANR	7320964	PrimaryExpression	"""filled"""		7320889	1					
ANR	7320965	PrimaryExpression	"""unfilled"""		7320889	2					
ANR	7320966	Argument	arg		7320889	3					
ANR	7320967	Identifier	arg		7320889	0					
ANR	7320968	ExpressionStatement	exit ( 1 )	667:6:19777:19784	7320889	3	True				
ANR	7320969	CallExpression	exit ( 1 )		7320889	0					
ANR	7320970	Callee	exit		7320889	0					
ANR	7320971	Identifier	exit		7320889	0					
ANR	7320972	ArgumentList	1		7320889	1					
ANR	7320973	Argument	1		7320889	0					
ANR	7320974	PrimaryExpression	1		7320889	0					
ANR	7320975	ExpressionStatement	"fprintf ( stderr , ""genpng: %s: not a valid shape name\\n"" , arg )"	670:3:19795:19855	7320889	2	True				
ANR	7320976	CallExpression	"fprintf ( stderr , ""genpng: %s: not a valid shape name\\n"" , arg )"		7320889	0					
ANR	7320977	Callee	fprintf		7320889	0					
ANR	7320978	Identifier	fprintf		7320889	0					
ANR	7320979	ArgumentList	stderr		7320889	1					
ANR	7320980	Argument	stderr		7320889	0					
ANR	7320981	Identifier	stderr		7320889	0					
ANR	7320982	Argument	"""genpng: %s: not a valid shape name\\n"""		7320889	1					
ANR	7320983	PrimaryExpression	"""genpng: %s: not a valid shape name\\n"""		7320889	0					
ANR	7320984	Argument	arg		7320889	2					
ANR	7320985	Identifier	arg		7320889	0					
ANR	7320986	ExpressionStatement	exit ( 1 )	671:3:19860:19867	7320889	3	True				
ANR	7320987	CallExpression	exit ( 1 )		7320889	0					
ANR	7320988	Callee	exit		7320889	0					
ANR	7320989	Identifier	exit		7320889	0					
ANR	7320990	ArgumentList	1		7320889	1					
ANR	7320991	Argument	1		7320889	0					
ANR	7320992	PrimaryExpression	1		7320889	0					
ANR	7320993	ReturnType	static shape_fn_ptr		7320889	1					
ANR	7320994	Identifier	shape_of		7320889	2					
ANR	7320995	ParameterList	"const char * arg , double width , int f"		7320889	3					
ANR	7320996	Parameter	const char * arg	654:9:19418:19432	7320889	0	True				
ANR	7320997	ParameterType	const char *		7320889	0					
ANR	7320998	Identifier	arg		7320889	1					
ANR	7320999	Parameter	double width	654:26:19435:19446	7320889	1	True				
ANR	7321000	ParameterType	double		7320889	0					
ANR	7321001	Identifier	width		7320889	1					
ANR	7321002	Parameter	int f	654:40:19449:19453	7320889	2	True				
ANR	7321003	ParameterType	int		7320889	0					
ANR	7321004	Identifier	f		7320889	1					
ANR	7321005	CFGEntryNode	ENTRY		7320889		True				
ANR	7321006	CFGExitNode	EXIT		7320889		True				
ANR	7321007	Symbol	strcmp		7320889						
ANR	7321008	Symbol	* * shape_defs		7320889						
ANR	7321009	Symbol	* * i		7320889						
ANR	7321010	Symbol	* * shape_defs [ i ] . function		7320889						
ANR	7321011	Symbol	NULL		7320889						
ANR	7321012	Symbol	* * width		7320889						
ANR	7321013	Symbol	f		7320889						
ANR	7321014	Symbol	fn		7320889						
ANR	7321015	Symbol	i		7320889						
ANR	7321016	Symbol	* shape_defs [ i ] . function		7320889						
ANR	7321017	Symbol	shape_count		7320889						
ANR	7321018	Symbol	shape_defs [ i ] . function		7320889						
ANR	7321019	Symbol	stderr		7320889						
ANR	7321020	Symbol	* width		7320889						
ANR	7321021	Symbol	* f		7320889						
ANR	7321022	Symbol	* i		7320889						
ANR	7321023	Symbol	shape_defs [ i ] . name		7320889						
ANR	7321024	Symbol	shape_defs		7320889						
ANR	7321025	Symbol	arg		7320889						
ANR	7321026	Symbol	* shape_defs		7320889						
ANR	7321027	Symbol	width		7320889						
ANR	7321028	Symbol	* * * i		7320889						
ANR	7321029	Symbol	* * * shape_defs		7320889						
ANR	7321030	Function	parse_arg	674:0:19872:20336							
ANR	7321031	FunctionDef	"parse_arg (struct arg * arg , const char * * argv)"		7321030	0					
ANR	7321032	CompoundStatement		676:0:19945:20336	7321030	0					
ANR	7321033	ExpressionStatement	arg -> color = color_of ( argv [ 0 ] )	678:3:19999:20029	7321030	0	True				
ANR	7321034	AssignmentExpression	arg -> color = color_of ( argv [ 0 ] )		7321030	0		=			
ANR	7321035	PtrMemberAccess	arg -> color		7321030	0					
ANR	7321036	Identifier	arg		7321030	0					
ANR	7321037	Identifier	color		7321030	1					
ANR	7321038	CallExpression	color_of ( argv [ 0 ] )		7321030	1					
ANR	7321039	Callee	color_of		7321030	0					
ANR	7321040	Identifier	color_of		7321030	0					
ANR	7321041	ArgumentList	argv [ 0 ]		7321030	1					
ANR	7321042	Argument	argv [ 0 ]		7321030	0					
ANR	7321043	ArrayIndexing	argv [ 0 ]		7321030	0					
ANR	7321044	Identifier	argv		7321030	0					
ANR	7321045	PrimaryExpression	0		7321030	1					
ANR	7321046	ExpressionStatement	arg -> width = width_of ( argv [ 1 ] )	679:3:20034:20064	7321030	1	True				
ANR	7321047	AssignmentExpression	arg -> width = width_of ( argv [ 1 ] )		7321030	0		=			
ANR	7321048	PtrMemberAccess	arg -> width		7321030	0					
ANR	7321049	Identifier	arg		7321030	0					
ANR	7321050	Identifier	width		7321030	1					
ANR	7321051	CallExpression	width_of ( argv [ 1 ] )		7321030	1					
ANR	7321052	Callee	width_of		7321030	0					
ANR	7321053	Identifier	width_of		7321030	0					
ANR	7321054	ArgumentList	argv [ 1 ]		7321030	1					
ANR	7321055	Argument	argv [ 1 ]		7321030	0					
ANR	7321056	ArrayIndexing	argv [ 1 ]		7321030	0					
ANR	7321057	Identifier	argv		7321030	0					
ANR	7321058	PrimaryExpression	1		7321030	1					
ANR	7321059	ExpressionStatement	"arg -> inside_fn = shape_of ( argv [ 2 ] , arg -> width , FN_INSIDE )"	680:3:20069:20126	7321030	2	True				
ANR	7321060	AssignmentExpression	"arg -> inside_fn = shape_of ( argv [ 2 ] , arg -> width , FN_INSIDE )"		7321030	0		=			
ANR	7321061	PtrMemberAccess	arg -> inside_fn		7321030	0					
ANR	7321062	Identifier	arg		7321030	0					
ANR	7321063	Identifier	inside_fn		7321030	1					
ANR	7321064	CallExpression	"shape_of ( argv [ 2 ] , arg -> width , FN_INSIDE )"		7321030	1					
ANR	7321065	Callee	shape_of		7321030	0					
ANR	7321066	Identifier	shape_of		7321030	0					
ANR	7321067	ArgumentList	argv [ 2 ]		7321030	1					
ANR	7321068	Argument	argv [ 2 ]		7321030	0					
ANR	7321069	ArrayIndexing	argv [ 2 ]		7321030	0					
ANR	7321070	Identifier	argv		7321030	0					
ANR	7321071	PrimaryExpression	2		7321030	1					
ANR	7321072	Argument	arg -> width		7321030	1					
ANR	7321073	PtrMemberAccess	arg -> width		7321030	0					
ANR	7321074	Identifier	arg		7321030	0					
ANR	7321075	Identifier	width		7321030	1					
ANR	7321076	Argument	FN_INSIDE		7321030	2					
ANR	7321077	Identifier	FN_INSIDE		7321030	0					
ANR	7321078	ExpressionStatement	"arg -> check_fn = shape_of ( argv [ 2 ] , arg -> width , FN_CHECK )"	681:3:20131:20186	7321030	3	True				
ANR	7321079	AssignmentExpression	"arg -> check_fn = shape_of ( argv [ 2 ] , arg -> width , FN_CHECK )"		7321030	0		=			
ANR	7321080	PtrMemberAccess	arg -> check_fn		7321030	0					
ANR	7321081	Identifier	arg		7321030	0					
ANR	7321082	Identifier	check_fn		7321030	1					
ANR	7321083	CallExpression	"shape_of ( argv [ 2 ] , arg -> width , FN_CHECK )"		7321030	1					
ANR	7321084	Callee	shape_of		7321030	0					
ANR	7321085	Identifier	shape_of		7321030	0					
ANR	7321086	ArgumentList	argv [ 2 ]		7321030	1					
ANR	7321087	Argument	argv [ 2 ]		7321030	0					
ANR	7321088	ArrayIndexing	argv [ 2 ]		7321030	0					
ANR	7321089	Identifier	argv		7321030	0					
ANR	7321090	PrimaryExpression	2		7321030	1					
ANR	7321091	Argument	arg -> width		7321030	1					
ANR	7321092	PtrMemberAccess	arg -> width		7321030	0					
ANR	7321093	Identifier	arg		7321030	0					
ANR	7321094	Identifier	width		7321030	1					
ANR	7321095	Argument	FN_CHECK		7321030	2					
ANR	7321096	Identifier	FN_CHECK		7321030	0					
ANR	7321097	ExpressionStatement	arg -> x1 = coordinate_of ( argv [ 3 ] )	682:3:20191:20223	7321030	4	True				
ANR	7321098	AssignmentExpression	arg -> x1 = coordinate_of ( argv [ 3 ] )		7321030	0		=			
ANR	7321099	PtrMemberAccess	arg -> x1		7321030	0					
ANR	7321100	Identifier	arg		7321030	0					
ANR	7321101	Identifier	x1		7321030	1					
ANR	7321102	CallExpression	coordinate_of ( argv [ 3 ] )		7321030	1					
ANR	7321103	Callee	coordinate_of		7321030	0					
ANR	7321104	Identifier	coordinate_of		7321030	0					
ANR	7321105	ArgumentList	argv [ 3 ]		7321030	1					
ANR	7321106	Argument	argv [ 3 ]		7321030	0					
ANR	7321107	ArrayIndexing	argv [ 3 ]		7321030	0					
ANR	7321108	Identifier	argv		7321030	0					
ANR	7321109	PrimaryExpression	3		7321030	1					
ANR	7321110	ExpressionStatement	arg -> y1 = coordinate_of ( argv [ 4 ] )	683:3:20228:20260	7321030	5	True				
ANR	7321111	AssignmentExpression	arg -> y1 = coordinate_of ( argv [ 4 ] )		7321030	0		=			
ANR	7321112	PtrMemberAccess	arg -> y1		7321030	0					
ANR	7321113	Identifier	arg		7321030	0					
ANR	7321114	Identifier	y1		7321030	1					
ANR	7321115	CallExpression	coordinate_of ( argv [ 4 ] )		7321030	1					
ANR	7321116	Callee	coordinate_of		7321030	0					
ANR	7321117	Identifier	coordinate_of		7321030	0					
ANR	7321118	ArgumentList	argv [ 4 ]		7321030	1					
ANR	7321119	Argument	argv [ 4 ]		7321030	0					
ANR	7321120	ArrayIndexing	argv [ 4 ]		7321030	0					
ANR	7321121	Identifier	argv		7321030	0					
ANR	7321122	PrimaryExpression	4		7321030	1					
ANR	7321123	ExpressionStatement	arg -> x2 = coordinate_of ( argv [ 5 ] )	684:3:20265:20297	7321030	6	True				
ANR	7321124	AssignmentExpression	arg -> x2 = coordinate_of ( argv [ 5 ] )		7321030	0		=			
ANR	7321125	PtrMemberAccess	arg -> x2		7321030	0					
ANR	7321126	Identifier	arg		7321030	0					
ANR	7321127	Identifier	x2		7321030	1					
ANR	7321128	CallExpression	coordinate_of ( argv [ 5 ] )		7321030	1					
ANR	7321129	Callee	coordinate_of		7321030	0					
ANR	7321130	Identifier	coordinate_of		7321030	0					
ANR	7321131	ArgumentList	argv [ 5 ]		7321030	1					
ANR	7321132	Argument	argv [ 5 ]		7321030	0					
ANR	7321133	ArrayIndexing	argv [ 5 ]		7321030	0					
ANR	7321134	Identifier	argv		7321030	0					
ANR	7321135	PrimaryExpression	5		7321030	1					
ANR	7321136	ExpressionStatement	arg -> y2 = coordinate_of ( argv [ 6 ] )	685:3:20302:20334	7321030	7	True				
ANR	7321137	AssignmentExpression	arg -> y2 = coordinate_of ( argv [ 6 ] )		7321030	0		=			
ANR	7321138	PtrMemberAccess	arg -> y2		7321030	0					
ANR	7321139	Identifier	arg		7321030	0					
ANR	7321140	Identifier	y2		7321030	1					
ANR	7321141	CallExpression	coordinate_of ( argv [ 6 ] )		7321030	1					
ANR	7321142	Callee	coordinate_of		7321030	0					
ANR	7321143	Identifier	coordinate_of		7321030	0					
ANR	7321144	ArgumentList	argv [ 6 ]		7321030	1					
ANR	7321145	Argument	argv [ 6 ]		7321030	0					
ANR	7321146	ArrayIndexing	argv [ 6 ]		7321030	0					
ANR	7321147	Identifier	argv		7321030	0					
ANR	7321148	PrimaryExpression	6		7321030	1					
ANR	7321149	ReturnType	static void		7321030	1					
ANR	7321150	Identifier	parse_arg		7321030	2					
ANR	7321151	ParameterList	"struct arg * arg , const char * * argv"		7321030	3					
ANR	7321152	Parameter	struct arg * arg	675:10:19894:19908	7321030	0	True				
ANR	7321153	ParameterType	struct arg *		7321030	0					
ANR	7321154	Identifier	arg		7321030	1					
ANR	7321155	Parameter	const char * * argv	675:27:19911:19927	7321030	1	True				
ANR	7321156	ParameterType	const char * *		7321030	0					
ANR	7321157	Identifier	argv		7321030	1					
ANR	7321158	CFGEntryNode	ENTRY		7321030		True				
ANR	7321159	CFGExitNode	EXIT		7321030		True				
ANR	7321160	Symbol	width_of		7321030						
ANR	7321161	Symbol	arg -> color		7321030						
ANR	7321162	Symbol	* argv		7321030						
ANR	7321163	Symbol	argv		7321030						
ANR	7321164	Symbol	coordinate_of		7321030						
ANR	7321165	Symbol	arg -> width		7321030						
ANR	7321166	Symbol	FN_INSIDE		7321030						
ANR	7321167	Symbol	arg		7321030						
ANR	7321168	Symbol	color_of		7321030						
ANR	7321169	Symbol	FN_CHECK		7321030						
ANR	7321170	Symbol	arg -> x2		7321030						
ANR	7321171	Symbol	arg -> inside_fn		7321030						
ANR	7321172	Symbol	arg -> x1		7321030						
ANR	7321173	Symbol	arg -> y2		7321030						
ANR	7321174	Symbol	arg -> y1		7321030						
ANR	7321175	Symbol	shape_of		7321030						
ANR	7321176	Symbol	arg -> check_fn		7321030						
ANR	7321177	Symbol	* arg		7321030						
ANR	7321178	Function	read_wh	688:0:20339:20683							
ANR	7321179	FunctionDef	"read_wh (const char * name , const char * str)"		7321178	0					
ANR	7321180	CompoundStatement		691:0:20437:20683	7321178	0					
ANR	7321181	IdentifierDeclStatement	char * ep = NULL ;	692:3:20442:20457	7321178	0	True				
ANR	7321182	IdentifierDecl	* ep = NULL		7321178	0					
ANR	7321183	IdentifierDeclType	char *		7321178	0					
ANR	7321184	Identifier	ep		7321178	1					
ANR	7321185	AssignmentExpression	* ep = NULL		7321178	2		=			
ANR	7321186	Identifier	NULL		7321178	0					
ANR	7321187	Identifier	NULL		7321178	1					
ANR	7321188	IdentifierDeclStatement	"unsigned long ul = strtoul ( str , & ep , 10 ) ;"	693:3:20462:20502	7321178	1	True				
ANR	7321189	IdentifierDecl	"ul = strtoul ( str , & ep , 10 )"		7321178	0					
ANR	7321190	IdentifierDeclType	unsigned long		7321178	0					
ANR	7321191	Identifier	ul		7321178	1					
ANR	7321192	AssignmentExpression	"ul = strtoul ( str , & ep , 10 )"		7321178	2		=			
ANR	7321193	Identifier	ul		7321178	0					
ANR	7321194	CallExpression	"strtoul ( str , & ep , 10 )"		7321178	1					
ANR	7321195	Callee	strtoul		7321178	0					
ANR	7321196	Identifier	strtoul		7321178	0					
ANR	7321197	ArgumentList	str		7321178	1					
ANR	7321198	Argument	str		7321178	0					
ANR	7321199	Identifier	str		7321178	0					
ANR	7321200	Argument	& ep		7321178	1					
ANR	7321201	UnaryOperationExpression	& ep		7321178	0					
ANR	7321202	UnaryOperator	&		7321178	0					
ANR	7321203	Identifier	ep		7321178	1					
ANR	7321204	Argument	10		7321178	2					
ANR	7321205	PrimaryExpression	10		7321178	0					
ANR	7321206	IfStatement	if ( ep != NULL && * ep == 0 && ul > 0 && ul <= 0x7fffffff )		7321178	2					
ANR	7321207	Condition	ep != NULL && * ep == 0 && ul > 0 && ul <= 0x7fffffff	695:7:20512:20563	7321178	0	True				
ANR	7321208	AndExpression	ep != NULL && * ep == 0 && ul > 0 && ul <= 0x7fffffff		7321178	0		&&			
ANR	7321209	EqualityExpression	ep != NULL		7321178	0		!=			
ANR	7321210	Identifier	ep		7321178	0					
ANR	7321211	Identifier	NULL		7321178	1					
ANR	7321212	AndExpression	* ep == 0 && ul > 0 && ul <= 0x7fffffff		7321178	1		&&			
ANR	7321213	EqualityExpression	* ep == 0		7321178	0		==			
ANR	7321214	UnaryOperationExpression	* ep		7321178	0					
ANR	7321215	UnaryOperator	*		7321178	0					
ANR	7321216	Identifier	ep		7321178	1					
ANR	7321217	PrimaryExpression	0		7321178	1					
ANR	7321218	AndExpression	ul > 0 && ul <= 0x7fffffff		7321178	1		&&			
ANR	7321219	RelationalExpression	ul > 0		7321178	0		>			
ANR	7321220	Identifier	ul		7321178	0					
ANR	7321221	PrimaryExpression	0		7321178	1					
ANR	7321222	RelationalExpression	ul <= 0x7fffffff		7321178	1		<=			
ANR	7321223	Identifier	ul		7321178	0					
ANR	7321224	PrimaryExpression	0x7fffffff		7321178	1					
ANR	7321225	ReturnStatement	return ( png_uint_32 ) ul ;	696:6:20572:20602	7321178	1	True				
ANR	7321226	CastExpression	( png_uint_32 ) ul		7321178	0					
ANR	7321227	CastTarget	png_uint_32		7321178	0					
ANR	7321228	Identifier	ul		7321178	1					
ANR	7321229	ExpressionStatement	"fprintf ( stderr , ""genpng: %s: invalid number %s\\n"" , name , str )"	698:3:20608:20669	7321178	3	True				
ANR	7321230	CallExpression	"fprintf ( stderr , ""genpng: %s: invalid number %s\\n"" , name , str )"		7321178	0					
ANR	7321231	Callee	fprintf		7321178	0					
ANR	7321232	Identifier	fprintf		7321178	0					
ANR	7321233	ArgumentList	stderr		7321178	1					
ANR	7321234	Argument	stderr		7321178	0					
ANR	7321235	Identifier	stderr		7321178	0					
ANR	7321236	Argument	"""genpng: %s: invalid number %s\\n"""		7321178	1					
ANR	7321237	PrimaryExpression	"""genpng: %s: invalid number %s\\n"""		7321178	0					
ANR	7321238	Argument	name		7321178	2					
ANR	7321239	Identifier	name		7321178	0					
ANR	7321240	Argument	str		7321178	3					
ANR	7321241	Identifier	str		7321178	0					
ANR	7321242	ExpressionStatement	exit ( 1 )	699:3:20674:20681	7321178	4	True				
ANR	7321243	CallExpression	exit ( 1 )		7321178	0					
ANR	7321244	Callee	exit		7321178	0					
ANR	7321245	Identifier	exit		7321178	0					
ANR	7321246	ArgumentList	1		7321178	1					
ANR	7321247	Argument	1		7321178	0					
ANR	7321248	PrimaryExpression	1		7321178	0					
ANR	7321249	ReturnType	static png_uint_32		7321178	1					
ANR	7321250	Identifier	read_wh		7321178	2					
ANR	7321251	ParameterList	"const char * name , const char * str"		7321178	3					
ANR	7321252	Parameter	const char * name	689:8:20366:20381	7321178	0	True				
ANR	7321253	ParameterType	const char *		7321178	0					
ANR	7321254	Identifier	name		7321178	1					
ANR	7321255	Parameter	const char * str	689:26:20384:20398	7321178	1	True				
ANR	7321256	ParameterType	const char *		7321178	0					
ANR	7321257	Identifier	str		7321178	1					
ANR	7321258	CFGEntryNode	ENTRY		7321178		True				
ANR	7321259	CFGExitNode	EXIT		7321178		True				
ANR	7321260	Symbol	str		7321178						
ANR	7321261	Symbol	* ep		7321178						
ANR	7321262	Symbol	NULL		7321178						
ANR	7321263	Symbol	& ep		7321178						
ANR	7321264	Symbol	ul		7321178						
ANR	7321265	Symbol	name		7321178						
ANR	7321266	Symbol	strtoul		7321178						
ANR	7321267	Symbol	ep		7321178						
ANR	7321268	Symbol	stderr		7321178						
ANR	7321269	Function	pixel	702:0:20686:21851							
ANR	7321270	FunctionDef	"pixel (png_uint_16p p , struct arg * args , int nargs , double x , double y)"		7321269	0					
ANR	7321271	CompoundStatement		704:0:20769:21851	7321269	0					
ANR	7321272	IdentifierDeclStatement	"double r = 0 , g = 0 , b = 0 , a = 0 ;"	708:3:20889:20914	7321269	0	True				
ANR	7321273	IdentifierDecl	r = 0		7321269	0					
ANR	7321274	IdentifierDeclType	double		7321269	0					
ANR	7321275	Identifier	r		7321269	1					
ANR	7321276	AssignmentExpression	r = 0		7321269	2		=			
ANR	7321277	Identifier	r		7321269	0					
ANR	7321278	PrimaryExpression	0		7321269	1					
ANR	7321279	IdentifierDecl	g = 0		7321269	1					
ANR	7321280	IdentifierDeclType	double		7321269	0					
ANR	7321281	Identifier	g		7321269	1					
ANR	7321282	AssignmentExpression	g = 0		7321269	2		=			
ANR	7321283	Identifier	g		7321269	0					
ANR	7321284	PrimaryExpression	0		7321269	1					
ANR	7321285	IdentifierDecl	b = 0		7321269	2					
ANR	7321286	IdentifierDeclType	double		7321269	0					
ANR	7321287	Identifier	b		7321269	1					
ANR	7321288	AssignmentExpression	b = 0		7321269	2		=			
ANR	7321289	Identifier	b		7321269	0					
ANR	7321290	PrimaryExpression	0		7321269	1					
ANR	7321291	IdentifierDecl	a = 0		7321269	3					
ANR	7321292	IdentifierDeclType	double		7321269	0					
ANR	7321293	Identifier	a		7321269	1					
ANR	7321294	AssignmentExpression	a = 0		7321269	2		=			
ANR	7321295	Identifier	a		7321269	0					
ANR	7321296	PrimaryExpression	0		7321269	1					
ANR	7321297	WhileStatement	while ( -- nargs >= 0 && a != 1 )		7321269	1					
ANR	7321298	Condition	-- nargs >= 0 && a != 1	710:10:20927:20948	7321269	0	True				
ANR	7321299	AndExpression	-- nargs >= 0 && a != 1		7321269	0		&&			
ANR	7321300	RelationalExpression	-- nargs >= 0		7321269	0		>=			
ANR	7321301	UnaryExpression	-- nargs		7321269	0					
ANR	7321302	IncDec	--		7321269	0					
ANR	7321303	Identifier	nargs		7321269	1					
ANR	7321304	PrimaryExpression	0		7321269	1					
ANR	7321305	EqualityExpression	a != 1		7321269	1		!=			
ANR	7321306	Identifier	a		7321269	0					
ANR	7321307	PrimaryExpression	1		7321269	1					
ANR	7321308	CompoundStatement		12:6:304:361	7321269	1					
ANR	7321309	IdentifierDeclStatement	"const double alpha = alpha_calc ( args + nargs , x , y ) * ( 1 - a ) ;"	715:6:21074:21131	7321269	0	True				
ANR	7321310	IdentifierDecl	"alpha = alpha_calc ( args + nargs , x , y ) * ( 1 - a )"		7321269	0					
ANR	7321311	IdentifierDeclType	const double		7321269	0					
ANR	7321312	Identifier	alpha		7321269	1					
ANR	7321313	AssignmentExpression	"alpha = alpha_calc ( args + nargs , x , y ) * ( 1 - a )"		7321269	2		=			
ANR	7321314	Identifier	alpha		7321269	0					
ANR	7321315	MultiplicativeExpression	"alpha_calc ( args + nargs , x , y ) * ( 1 - a )"		7321269	1		*			
ANR	7321316	CallExpression	"alpha_calc ( args + nargs , x , y )"		7321269	0					
ANR	7321317	Callee	alpha_calc		7321269	0					
ANR	7321318	Identifier	alpha_calc		7321269	0					
ANR	7321319	ArgumentList	args + nargs		7321269	1					
ANR	7321320	Argument	args + nargs		7321269	0					
ANR	7321321	AdditiveExpression	args + nargs		7321269	0		+			
ANR	7321322	Identifier	args		7321269	0					
ANR	7321323	Identifier	nargs		7321269	1					
ANR	7321324	Argument	x		7321269	1					
ANR	7321325	Identifier	x		7321269	0					
ANR	7321326	Argument	y		7321269	2					
ANR	7321327	Identifier	y		7321269	0					
ANR	7321328	AdditiveExpression	1 - a		7321269	1		-			
ANR	7321329	PrimaryExpression	1		7321269	0					
ANR	7321330	Identifier	a		7321269	1					
ANR	7321331	ExpressionStatement	r += alpha * args [ nargs ] . color -> red	717:6:21140:21175	7321269	1	True				
ANR	7321332	AssignmentExpression	r += alpha * args [ nargs ] . color -> red		7321269	0		+=			
ANR	7321333	Identifier	r		7321269	0					
ANR	7321334	MultiplicativeExpression	alpha * args [ nargs ] . color -> red		7321269	1		*			
ANR	7321335	Identifier	alpha		7321269	0					
ANR	7321336	PtrMemberAccess	args [ nargs ] . color -> red		7321269	1					
ANR	7321337	MemberAccess	args [ nargs ] . color		7321269	0					
ANR	7321338	ArrayIndexing	args [ nargs ]		7321269	0					
ANR	7321339	Identifier	args		7321269	0					
ANR	7321340	Identifier	nargs		7321269	1					
ANR	7321341	Identifier	color		7321269	1					
ANR	7321342	Identifier	red		7321269	1					
ANR	7321343	ExpressionStatement	g += alpha * args [ nargs ] . color -> green	718:6:21183:21220	7321269	2	True				
ANR	7321344	AssignmentExpression	g += alpha * args [ nargs ] . color -> green		7321269	0		+=			
ANR	7321345	Identifier	g		7321269	0					
ANR	7321346	MultiplicativeExpression	alpha * args [ nargs ] . color -> green		7321269	1		*			
ANR	7321347	Identifier	alpha		7321269	0					
ANR	7321348	PtrMemberAccess	args [ nargs ] . color -> green		7321269	1					
ANR	7321349	MemberAccess	args [ nargs ] . color		7321269	0					
ANR	7321350	ArrayIndexing	args [ nargs ]		7321269	0					
ANR	7321351	Identifier	args		7321269	0					
ANR	7321352	Identifier	nargs		7321269	1					
ANR	7321353	Identifier	color		7321269	1					
ANR	7321354	Identifier	green		7321269	1					
ANR	7321355	ExpressionStatement	b += alpha * args [ nargs ] . color -> blue	719:6:21228:21264	7321269	3	True				
ANR	7321356	AssignmentExpression	b += alpha * args [ nargs ] . color -> blue		7321269	0		+=			
ANR	7321357	Identifier	b		7321269	0					
ANR	7321358	MultiplicativeExpression	alpha * args [ nargs ] . color -> blue		7321269	1		*			
ANR	7321359	Identifier	alpha		7321269	0					
ANR	7321360	PtrMemberAccess	args [ nargs ] . color -> blue		7321269	1					
ANR	7321361	MemberAccess	args [ nargs ] . color		7321269	0					
ANR	7321362	ArrayIndexing	args [ nargs ]		7321269	0					
ANR	7321363	Identifier	args		7321269	0					
ANR	7321364	Identifier	nargs		7321269	1					
ANR	7321365	Identifier	color		7321269	1					
ANR	7321366	Identifier	blue		7321269	1					
ANR	7321367	ExpressionStatement	a += alpha	720:6:21272:21282	7321269	4	True				
ANR	7321368	AssignmentExpression	a += alpha		7321269	0		+=			
ANR	7321369	Identifier	a		7321269	0					
ANR	7321370	Identifier	alpha		7321269	1					
ANR	7321371	IfStatement	if ( a > 0 )		7321269	2					
ANR	7321372	Condition	a > 0	726:7:21414:21418	7321269	0	True				
ANR	7321373	RelationalExpression	a > 0		7321269	0		>			
ANR	7321374	Identifier	a		7321269	0					
ANR	7321375	PrimaryExpression	0		7321269	1					
ANR	7321376	CompoundStatement		24:3:654:654	7321269	1					
ANR	7321377	IfStatement	if ( a > 1 )		7321269	0					
ANR	7321378	Condition	a > 1	728:10:21436:21440	7321269	0	True				
ANR	7321379	RelationalExpression	a > 1		7321269	0		>			
ANR	7321380	Identifier	a		7321269	0					
ANR	7321381	PrimaryExpression	1		7321269	1					
ANR	7321382	CompoundStatement		26:6:679:679	7321269	1					
ANR	7321383	IfStatement	if ( r > 1 )		7321269	0					
ANR	7321384	Condition	r > 1	730:13:21464:21468	7321269	0	True				
ANR	7321385	RelationalExpression	r > 1		7321269	0		>			
ANR	7321386	Identifier	r		7321269	0					
ANR	7321387	PrimaryExpression	1		7321269	1					
ANR	7321388	ExpressionStatement	r = 1	730:20:21471:21476	7321269	1	True				
ANR	7321389	AssignmentExpression	r = 1		7321269	0		=			
ANR	7321390	Identifier	r		7321269	0					
ANR	7321391	PrimaryExpression	1		7321269	1					
ANR	7321392	IfStatement	if ( g > 1 )		7321269	1					
ANR	7321393	Condition	g > 1	731:13:21491:21495	7321269	0	True				
ANR	7321394	RelationalExpression	g > 1		7321269	0		>			
ANR	7321395	Identifier	g		7321269	0					
ANR	7321396	PrimaryExpression	1		7321269	1					
ANR	7321397	ExpressionStatement	g = 1	731:20:21498:21503	7321269	1	True				
ANR	7321398	AssignmentExpression	g = 1		7321269	0		=			
ANR	7321399	Identifier	g		7321269	0					
ANR	7321400	PrimaryExpression	1		7321269	1					
ANR	7321401	IfStatement	if ( b > 1 )		7321269	2					
ANR	7321402	Condition	b > 1	732:13:21518:21522	7321269	0	True				
ANR	7321403	RelationalExpression	b > 1		7321269	0		>			
ANR	7321404	Identifier	b		7321269	0					
ANR	7321405	PrimaryExpression	1		7321269	1					
ANR	7321406	ExpressionStatement	b = 1	732:20:21525:21530	7321269	1	True				
ANR	7321407	AssignmentExpression	b = 1		7321269	0		=			
ANR	7321408	Identifier	b		7321269	0					
ANR	7321409	PrimaryExpression	1		7321269	1					
ANR	7321410	ExpressionStatement	a = 1	733:9:21541:21546	7321269	3	True				
ANR	7321411	AssignmentExpression	a = 1		7321269	0		=			
ANR	7321412	Identifier	a		7321269	0					
ANR	7321413	PrimaryExpression	1		7321269	1					
ANR	7321414	ExpressionStatement	p [ 0 ] = ( png_uint_16 ) round ( r * 65535 )	737:6:21598:21642	7321269	1	True				
ANR	7321415	AssignmentExpression	p [ 0 ] = ( png_uint_16 ) round ( r * 65535 )		7321269	0		=			
ANR	7321416	ArrayIndexing	p [ 0 ]		7321269	0					
ANR	7321417	Identifier	p		7321269	0					
ANR	7321418	PrimaryExpression	0		7321269	1					
ANR	7321419	CastExpression	( png_uint_16 ) round ( r * 65535 )		7321269	1					
ANR	7321420	CastTarget	png_uint_16		7321269	0					
ANR	7321421	CallExpression	round ( r * 65535 )		7321269	1					
ANR	7321422	Callee	round		7321269	0					
ANR	7321423	Identifier	round		7321269	0					
ANR	7321424	ArgumentList	r * 65535		7321269	1					
ANR	7321425	Argument	r * 65535		7321269	0					
ANR	7321426	MultiplicativeExpression	r * 65535		7321269	0		*			
ANR	7321427	Identifier	r		7321269	0					
ANR	7321428	PrimaryExpression	65535		7321269	1					
ANR	7321429	ExpressionStatement	p [ 1 ] = ( png_uint_16 ) round ( g * 65535 )	738:6:21650:21694	7321269	2	True				
ANR	7321430	AssignmentExpression	p [ 1 ] = ( png_uint_16 ) round ( g * 65535 )		7321269	0		=			
ANR	7321431	ArrayIndexing	p [ 1 ]		7321269	0					
ANR	7321432	Identifier	p		7321269	0					
ANR	7321433	PrimaryExpression	1		7321269	1					
ANR	7321434	CastExpression	( png_uint_16 ) round ( g * 65535 )		7321269	1					
ANR	7321435	CastTarget	png_uint_16		7321269	0					
ANR	7321436	CallExpression	round ( g * 65535 )		7321269	1					
ANR	7321437	Callee	round		7321269	0					
ANR	7321438	Identifier	round		7321269	0					
ANR	7321439	ArgumentList	g * 65535		7321269	1					
ANR	7321440	Argument	g * 65535		7321269	0					
ANR	7321441	MultiplicativeExpression	g * 65535		7321269	0		*			
ANR	7321442	Identifier	g		7321269	0					
ANR	7321443	PrimaryExpression	65535		7321269	1					
ANR	7321444	ExpressionStatement	p [ 2 ] = ( png_uint_16 ) round ( b * 65535 )	739:6:21702:21746	7321269	3	True				
ANR	7321445	AssignmentExpression	p [ 2 ] = ( png_uint_16 ) round ( b * 65535 )		7321269	0		=			
ANR	7321446	ArrayIndexing	p [ 2 ]		7321269	0					
ANR	7321447	Identifier	p		7321269	0					
ANR	7321448	PrimaryExpression	2		7321269	1					
ANR	7321449	CastExpression	( png_uint_16 ) round ( b * 65535 )		7321269	1					
ANR	7321450	CastTarget	png_uint_16		7321269	0					
ANR	7321451	CallExpression	round ( b * 65535 )		7321269	1					
ANR	7321452	Callee	round		7321269	0					
ANR	7321453	Identifier	round		7321269	0					
ANR	7321454	ArgumentList	b * 65535		7321269	1					
ANR	7321455	Argument	b * 65535		7321269	0					
ANR	7321456	MultiplicativeExpression	b * 65535		7321269	0		*			
ANR	7321457	Identifier	b		7321269	0					
ANR	7321458	PrimaryExpression	65535		7321269	1					
ANR	7321459	ExpressionStatement	p [ 3 ] = ( png_uint_16 ) round ( a * 65535 )	740:6:21754:21798	7321269	4	True				
ANR	7321460	AssignmentExpression	p [ 3 ] = ( png_uint_16 ) round ( a * 65535 )		7321269	0		=			
ANR	7321461	ArrayIndexing	p [ 3 ]		7321269	0					
ANR	7321462	Identifier	p		7321269	0					
ANR	7321463	PrimaryExpression	3		7321269	1					
ANR	7321464	CastExpression	( png_uint_16 ) round ( a * 65535 )		7321269	1					
ANR	7321465	CastTarget	png_uint_16		7321269	0					
ANR	7321466	CallExpression	round ( a * 65535 )		7321269	1					
ANR	7321467	Callee	round		7321269	0					
ANR	7321468	Identifier	round		7321269	0					
ANR	7321469	ArgumentList	a * 65535		7321269	1					
ANR	7321470	Argument	a * 65535		7321269	0					
ANR	7321471	MultiplicativeExpression	a * 65535		7321269	0		*			
ANR	7321472	Identifier	a		7321269	0					
ANR	7321473	PrimaryExpression	65535		7321269	1					
ANR	7321474	ElseStatement	else		7321269	0					
ANR	7321475	ExpressionStatement	p [ 3 ] = p [ 2 ] = p [ 1 ] = p [ 0 ] = 0	744:6:21820:21849	7321269	0	True				
ANR	7321476	AssignmentExpression	p [ 3 ] = p [ 2 ] = p [ 1 ] = p [ 0 ] = 0		7321269	0		=			
ANR	7321477	ArrayIndexing	p [ 3 ]		7321269	0					
ANR	7321478	Identifier	p		7321269	0					
ANR	7321479	PrimaryExpression	3		7321269	1					
ANR	7321480	AssignmentExpression	p [ 2 ] = p [ 1 ] = p [ 0 ] = 0		7321269	1		=			
ANR	7321481	ArrayIndexing	p [ 2 ]		7321269	0					
ANR	7321482	Identifier	p		7321269	0					
ANR	7321483	PrimaryExpression	2		7321269	1					
ANR	7321484	AssignmentExpression	p [ 1 ] = p [ 0 ] = 0		7321269	1		=			
ANR	7321485	ArrayIndexing	p [ 1 ]		7321269	0					
ANR	7321486	Identifier	p		7321269	0					
ANR	7321487	PrimaryExpression	1		7321269	1					
ANR	7321488	AssignmentExpression	p [ 0 ] = 0		7321269	1		=			
ANR	7321489	ArrayIndexing	p [ 0 ]		7321269	0					
ANR	7321490	Identifier	p		7321269	0					
ANR	7321491	PrimaryExpression	0		7321269	1					
ANR	7321492	PrimaryExpression	0		7321269	1					
ANR	7321493	ReturnType	static void		7321269	1					
ANR	7321494	Identifier	pixel		7321269	2					
ANR	7321495	ParameterList	"png_uint_16p p , struct arg * args , int nargs , double x , double y"		7321269	3					
ANR	7321496	Parameter	png_uint_16p p	703:6:20704:20717	7321269	0	True				
ANR	7321497	ParameterType	png_uint_16p		7321269	0					
ANR	7321498	Identifier	p		7321269	1					
ANR	7321499	Parameter	struct arg * args	703:22:20720:20735	7321269	1	True				
ANR	7321500	ParameterType	struct arg *		7321269	0					
ANR	7321501	Identifier	args		7321269	1					
ANR	7321502	Parameter	int nargs	703:40:20738:20746	7321269	2	True				
ANR	7321503	ParameterType	int		7321269	0					
ANR	7321504	Identifier	nargs		7321269	1					
ANR	7321505	Parameter	double x	703:51:20749:20756	7321269	3	True				
ANR	7321506	ParameterType	double		7321269	0					
ANR	7321507	Identifier	x		7321269	1					
ANR	7321508	Parameter	double y	703:61:20759:20766	7321269	4	True				
ANR	7321509	ParameterType	double		7321269	0					
ANR	7321510	Identifier	y		7321269	1					
ANR	7321511	CFGEntryNode	ENTRY		7321269		True				
ANR	7321512	CFGExitNode	EXIT		7321269		True				
ANR	7321513	Symbol	a		7321269						
ANR	7321514	Symbol	args [ nargs ] . color -> blue		7321269						
ANR	7321515	Symbol	b		7321269						
ANR	7321516	Symbol	args [ nargs ] . color -> green		7321269						
ANR	7321517	Symbol	* * nargs		7321269						
ANR	7321518	Symbol	g		7321269						
ANR	7321519	Symbol	* args [ nargs ] . color		7321269						
ANR	7321520	Symbol	* nargs		7321269						
ANR	7321521	Symbol	args [ nargs ] . color		7321269						
ANR	7321522	Symbol	* args		7321269						
ANR	7321523	Symbol	p		7321269						
ANR	7321524	Symbol	args		7321269						
ANR	7321525	Symbol	nargs		7321269						
ANR	7321526	Symbol	r		7321269						
ANR	7321527	Symbol	round		7321269						
ANR	7321528	Symbol	alpha		7321269						
ANR	7321529	Symbol	x		7321269						
ANR	7321530	Symbol	y		7321269						
ANR	7321531	Symbol	* p		7321269						
ANR	7321532	Symbol	alpha_calc		7321269						
ANR	7321533	Symbol	args [ nargs ] . color -> red		7321269						
ANR	7321534	Symbol	* * args		7321269						
ANR	7321535	Function	main	747:0:21854:26432							
ANR	7321536	FunctionDef	"main (int argc , const char * * argv)"		7321535	0					
ANR	7321537	CompoundStatement		749:0:21892:26432	7321535	0					
ANR	7321538	IdentifierDeclStatement	int convert_to_8bit = 0 ;	750:3:21897:21920	7321535	0	True				
ANR	7321539	IdentifierDecl	convert_to_8bit = 0		7321535	0					
ANR	7321540	IdentifierDeclType	int		7321535	0					
ANR	7321541	Identifier	convert_to_8bit		7321535	1					
ANR	7321542	AssignmentExpression	convert_to_8bit = 0		7321535	2		=			
ANR	7321543	Identifier	convert_to_8bit		7321535	0					
ANR	7321544	PrimaryExpression	0		7321535	1					
ANR	7321545	IfStatement	"if ( argc > 1 && strcmp ( argv [ 1 ] , ""--8bit"" ) == 0 )"		7321535	1					
ANR	7321546	Condition	"argc > 1 && strcmp ( argv [ 1 ] , ""--8bit"" ) == 0"	753:7:21968:22009	7321535	0	True				
ANR	7321547	AndExpression	"argc > 1 && strcmp ( argv [ 1 ] , ""--8bit"" ) == 0"		7321535	0		&&			
ANR	7321548	RelationalExpression	argc > 1		7321535	0		>			
ANR	7321549	Identifier	argc		7321535	0					
ANR	7321550	PrimaryExpression	1		7321535	1					
ANR	7321551	EqualityExpression	"strcmp ( argv [ 1 ] , ""--8bit"" ) == 0"		7321535	1		==			
ANR	7321552	CallExpression	"strcmp ( argv [ 1 ] , ""--8bit"" )"		7321535	0					
ANR	7321553	Callee	strcmp		7321535	0					
ANR	7321554	Identifier	strcmp		7321535	0					
ANR	7321555	ArgumentList	argv [ 1 ]		7321535	1					
ANR	7321556	Argument	argv [ 1 ]		7321535	0					
ANR	7321557	ArrayIndexing	argv [ 1 ]		7321535	0					
ANR	7321558	Identifier	argv		7321535	0					
ANR	7321559	PrimaryExpression	1		7321535	1					
ANR	7321560	Argument	"""--8bit"""		7321535	1					
ANR	7321561	PrimaryExpression	"""--8bit"""		7321535	0					
ANR	7321562	PrimaryExpression	0		7321535	1					
ANR	7321563	ExpressionStatement	"-- argc , ++ argv , convert_to_8bit = 1"	754:6:22018:22053	7321535	1	True				
ANR	7321564	Expression	"-- argc , ++ argv , convert_to_8bit = 1"		7321535	0					
ANR	7321565	UnaryExpression	-- argc		7321535	0					
ANR	7321566	IncDec	--		7321535	0					
ANR	7321567	Identifier	argc		7321535	1					
ANR	7321568	Expression	"++ argv , convert_to_8bit = 1"		7321535	1					
ANR	7321569	UnaryExpression	++ argv		7321535	0					
ANR	7321570	IncDec	++		7321535	0					
ANR	7321571	Identifier	argv		7321535	1					
ANR	7321572	AssignmentExpression	convert_to_8bit = 1		7321535	1		=			
ANR	7321573	Identifier	convert_to_8bit		7321535	0					
ANR	7321574	PrimaryExpression	1		7321535	1					
ANR	7321575	IfStatement	if ( argc >= 3 )		7321535	2					
ANR	7321576	Condition	argc >= 3	756:7:22063:22071	7321535	0	True				
ANR	7321577	RelationalExpression	argc >= 3		7321535	0		>=			
ANR	7321578	Identifier	argc		7321535	0					
ANR	7321579	PrimaryExpression	3		7321535	1					
ANR	7321580	CompoundStatement		14:6:289:320	7321535	1					
ANR	7321581	IdentifierDeclStatement	png_uint_16p buffer ;	758:6:22085:22104	7321535	0	True				
ANR	7321582	IdentifierDecl	buffer		7321535	0					
ANR	7321583	IdentifierDeclType	png_uint_16p		7321535	0					
ANR	7321584	Identifier	buffer		7321535	1					
ANR	7321585	IdentifierDeclStatement	int nshapes ;	759:6:22112:22123	7321535	1	True				
ANR	7321586	IdentifierDecl	nshapes		7321535	0					
ANR	7321587	IdentifierDeclType	int		7321535	0					
ANR	7321588	Identifier	nshapes		7321535	1					
ANR	7321589	IdentifierDeclStatement	png_image image ;	760:6:22131:22146	7321535	2	True				
ANR	7321590	IdentifierDecl	image		7321535	0					
ANR	7321591	IdentifierDeclType	png_image		7321535	0					
ANR	7321592	Identifier	image		7321535	1					
ANR	7321593	Statement	define	761:6:22154:22159	7321535	3	True				
ANR	7321594	Statement	max_shapes	761:13:22161:22170	7321535	4	True				
ANR	7321595	Statement	256	761:24:22172:22174	7321535	5	True				
ANR	7321596	IdentifierDeclStatement	struct arg arg_list [ max_shapes ] ;	762:6:22182:22213	7321535	6	True				
ANR	7321597	IdentifierDecl	arg_list [ max_shapes ]		7321535	0					
ANR	7321598	IdentifierDeclType	struct arg [ max_shapes ]		7321535	0					
ANR	7321599	Identifier	arg_list		7321535	1					
ANR	7321600	Identifier	max_shapes		7321535	2					
ANR	7321601	ExpressionStatement	"memset ( & image , 0 , sizeof image )"	767:6:22327:22358	7321535	7	True				
ANR	7321602	CallExpression	"memset ( & image , 0 , sizeof image )"		7321535	0					
ANR	7321603	Callee	memset		7321535	0					
ANR	7321604	Identifier	memset		7321535	0					
ANR	7321605	ArgumentList	& image		7321535	1					
ANR	7321606	Argument	& image		7321535	0					
ANR	7321607	UnaryOperationExpression	& image		7321535	0					
ANR	7321608	UnaryOperator	&		7321535	0					
ANR	7321609	Identifier	image		7321535	1					
ANR	7321610	Argument	0		7321535	1					
ANR	7321611	PrimaryExpression	0		7321535	0					
ANR	7321612	Argument	sizeof image		7321535	2					
ANR	7321613	SizeofExpression	sizeof image		7321535	0					
ANR	7321614	Sizeof	sizeof		7321535	0					
ANR	7321615	Identifier	image		7321535	1					
ANR	7321616	ExpressionStatement	image . version = PNG_IMAGE_VERSION	768:6:22366:22399	7321535	8	True				
ANR	7321617	AssignmentExpression	image . version = PNG_IMAGE_VERSION		7321535	0		=			
ANR	7321618	MemberAccess	image . version		7321535	0					
ANR	7321619	Identifier	image		7321535	0					
ANR	7321620	Identifier	version		7321535	1					
ANR	7321621	Identifier	PNG_IMAGE_VERSION		7321535	1					
ANR	7321622	ExpressionStatement	image . opaque = NULL	769:6:22407:22426	7321535	9	True				
ANR	7321623	AssignmentExpression	image . opaque = NULL		7321535	0		=			
ANR	7321624	MemberAccess	image . opaque		7321535	0					
ANR	7321625	Identifier	image		7321535	0					
ANR	7321626	Identifier	opaque		7321535	1					
ANR	7321627	Identifier	NULL		7321535	1					
ANR	7321628	ExpressionStatement	"image . width = read_wh ( ""width"" , argv [ 1 ] )"	770:6:22434:22473	7321535	10	True				
ANR	7321629	AssignmentExpression	"image . width = read_wh ( ""width"" , argv [ 1 ] )"		7321535	0		=			
ANR	7321630	MemberAccess	image . width		7321535	0					
ANR	7321631	Identifier	image		7321535	0					
ANR	7321632	Identifier	width		7321535	1					
ANR	7321633	CallExpression	"read_wh ( ""width"" , argv [ 1 ] )"		7321535	1					
ANR	7321634	Callee	read_wh		7321535	0					
ANR	7321635	Identifier	read_wh		7321535	0					
ANR	7321636	ArgumentList	"""width"""		7321535	1					
ANR	7321637	Argument	"""width"""		7321535	0					
ANR	7321638	PrimaryExpression	"""width"""		7321535	0					
ANR	7321639	Argument	argv [ 1 ]		7321535	1					
ANR	7321640	ArrayIndexing	argv [ 1 ]		7321535	0					
ANR	7321641	Identifier	argv		7321535	0					
ANR	7321642	PrimaryExpression	1		7321535	1					
ANR	7321643	ExpressionStatement	"image . height = read_wh ( ""height"" , argv [ 2 ] )"	771:6:22481:22522	7321535	11	True				
ANR	7321644	AssignmentExpression	"image . height = read_wh ( ""height"" , argv [ 2 ] )"		7321535	0		=			
ANR	7321645	MemberAccess	image . height		7321535	0					
ANR	7321646	Identifier	image		7321535	0					
ANR	7321647	Identifier	height		7321535	1					
ANR	7321648	CallExpression	"read_wh ( ""height"" , argv [ 2 ] )"		7321535	1					
ANR	7321649	Callee	read_wh		7321535	0					
ANR	7321650	Identifier	read_wh		7321535	0					
ANR	7321651	ArgumentList	"""height"""		7321535	1					
ANR	7321652	Argument	"""height"""		7321535	0					
ANR	7321653	PrimaryExpression	"""height"""		7321535	0					
ANR	7321654	Argument	argv [ 2 ]		7321535	1					
ANR	7321655	ArrayIndexing	argv [ 2 ]		7321535	0					
ANR	7321656	Identifier	argv		7321535	0					
ANR	7321657	PrimaryExpression	2		7321535	1					
ANR	7321658	ExpressionStatement	image . format = PNG_FORMAT_LINEAR_RGB_ALPHA	772:6:22530:22572	7321535	12	True				
ANR	7321659	AssignmentExpression	image . format = PNG_FORMAT_LINEAR_RGB_ALPHA		7321535	0		=			
ANR	7321660	MemberAccess	image . format		7321535	0					
ANR	7321661	Identifier	image		7321535	0					
ANR	7321662	Identifier	format		7321535	1					
ANR	7321663	Identifier	PNG_FORMAT_LINEAR_RGB_ALPHA		7321535	1					
ANR	7321664	ExpressionStatement	image . flags = 0	773:6:22580:22595	7321535	13	True				
ANR	7321665	AssignmentExpression	image . flags = 0		7321535	0		=			
ANR	7321666	MemberAccess	image . flags		7321535	0					
ANR	7321667	Identifier	image		7321535	0					
ANR	7321668	Identifier	flags		7321535	1					
ANR	7321669	PrimaryExpression	0		7321535	1					
ANR	7321670	ExpressionStatement	image . colormap_entries = 0	774:6:22603:22629	7321535	14	True				
ANR	7321671	AssignmentExpression	image . colormap_entries = 0		7321535	0		=			
ANR	7321672	MemberAccess	image . colormap_entries		7321535	0					
ANR	7321673	Identifier	image		7321535	0					
ANR	7321674	Identifier	colormap_entries		7321535	1					
ANR	7321675	PrimaryExpression	0		7321535	1					
ANR	7321676	ForStatement	for ( nshapes = 0 ; 3 + 7 * ( nshapes + 1 ) <= argc && nshapes < max_shapes ; ++ nshapes )		7321535	15					
ANR	7321677	ForInit	nshapes = 0 ;	777:11:22692:22701	7321535	0	True				
ANR	7321678	AssignmentExpression	nshapes = 0		7321535	0		=			
ANR	7321679	Identifier	nshapes		7321535	0					
ANR	7321680	PrimaryExpression	0		7321535	1					
ANR	7321681	Condition	3 + 7 * ( nshapes + 1 ) <= argc && nshapes < max_shapes	777:22:22703:22749	7321535	1	True				
ANR	7321682	AndExpression	3 + 7 * ( nshapes + 1 ) <= argc && nshapes < max_shapes		7321535	0		&&			
ANR	7321683	RelationalExpression	3 + 7 * ( nshapes + 1 ) <= argc		7321535	0		<=			
ANR	7321684	AdditiveExpression	3 + 7 * ( nshapes + 1 )		7321535	0		+			
ANR	7321685	PrimaryExpression	3		7321535	0					
ANR	7321686	MultiplicativeExpression	7 * ( nshapes + 1 )		7321535	1		*			
ANR	7321687	PrimaryExpression	7		7321535	0					
ANR	7321688	AdditiveExpression	nshapes + 1		7321535	1		+			
ANR	7321689	Identifier	nshapes		7321535	0					
ANR	7321690	PrimaryExpression	1		7321535	1					
ANR	7321691	Identifier	argc		7321535	1					
ANR	7321692	RelationalExpression	nshapes < max_shapes		7321535	1		<			
ANR	7321693	Identifier	nshapes		7321535	0					
ANR	7321694	Identifier	max_shapes		7321535	1					
ANR	7321695	UnaryExpression	++ nshapes	778:11:22763:22771	7321535	2	True				
ANR	7321696	IncDec	++		7321535	0					
ANR	7321697	Identifier	nshapes		7321535	1					
ANR	7321698	ExpressionStatement	"parse_arg ( arg_list + nshapes , argv + 3 + 7 * nshapes )"	779:9:22783:22828	7321535	3	True				
ANR	7321699	CallExpression	"parse_arg ( arg_list + nshapes , argv + 3 + 7 * nshapes )"		7321535	0					
ANR	7321700	Callee	parse_arg		7321535	0					
ANR	7321701	Identifier	parse_arg		7321535	0					
ANR	7321702	ArgumentList	arg_list + nshapes		7321535	1					
ANR	7321703	Argument	arg_list + nshapes		7321535	0					
ANR	7321704	AdditiveExpression	arg_list + nshapes		7321535	0		+			
ANR	7321705	Identifier	arg_list		7321535	0					
ANR	7321706	Identifier	nshapes		7321535	1					
ANR	7321707	Argument	argv + 3 + 7 * nshapes		7321535	1					
ANR	7321708	AdditiveExpression	argv + 3 + 7 * nshapes		7321535	0		+			
ANR	7321709	Identifier	argv		7321535	0					
ANR	7321710	AdditiveExpression	3 + 7 * nshapes		7321535	1		+			
ANR	7321711	PrimaryExpression	3		7321535	0					
ANR	7321712	MultiplicativeExpression	7 * nshapes		7321535	1		*			
ANR	7321713	PrimaryExpression	7		7321535	0					
ANR	7321714	Identifier	nshapes		7321535	1					
ANR	7321715	IfStatement	if ( 3 + 7 * nshapes != argc )		7321535	16					
ANR	7321716	Condition	3 + 7 * nshapes != argc	781:10:22841:22859	7321535	0	True				
ANR	7321717	EqualityExpression	3 + 7 * nshapes != argc		7321535	0		!=			
ANR	7321718	AdditiveExpression	3 + 7 * nshapes		7321535	0		+			
ANR	7321719	PrimaryExpression	3		7321535	0					
ANR	7321720	MultiplicativeExpression	7 * nshapes		7321535	1		*			
ANR	7321721	PrimaryExpression	7		7321535	0					
ANR	7321722	Identifier	nshapes		7321535	1					
ANR	7321723	Identifier	argc		7321535	1					
ANR	7321724	CompoundStatement		34:6:975:975	7321535	1					
ANR	7321725	ExpressionStatement	"fprintf ( stderr , ""genpng: %s: too many arguments\\n"" , argv [ 3 + 7 * nshapes ] )"	783:9:22879:22949	7321535	0	True				
ANR	7321726	CallExpression	"fprintf ( stderr , ""genpng: %s: too many arguments\\n"" , argv [ 3 + 7 * nshapes ] )"		7321535	0					
ANR	7321727	Callee	fprintf		7321535	0					
ANR	7321728	Identifier	fprintf		7321535	0					
ANR	7321729	ArgumentList	stderr		7321535	1					
ANR	7321730	Argument	stderr		7321535	0					
ANR	7321731	Identifier	stderr		7321535	0					
ANR	7321732	Argument	"""genpng: %s: too many arguments\\n"""		7321535	1					
ANR	7321733	PrimaryExpression	"""genpng: %s: too many arguments\\n"""		7321535	0					
ANR	7321734	Argument	argv [ 3 + 7 * nshapes ]		7321535	2					
ANR	7321735	ArrayIndexing	argv [ 3 + 7 * nshapes ]		7321535	0					
ANR	7321736	Identifier	argv		7321535	0					
ANR	7321737	AdditiveExpression	3 + 7 * nshapes		7321535	1		+			
ANR	7321738	PrimaryExpression	3		7321535	0					
ANR	7321739	MultiplicativeExpression	7 * nshapes		7321535	1		*			
ANR	7321740	PrimaryExpression	7		7321535	0					
ANR	7321741	Identifier	nshapes		7321535	1					
ANR	7321742	ReturnStatement	return 1 ;	784:9:22960:22968	7321535	1	True				
ANR	7321743	PrimaryExpression	1		7321535	0					
ANR	7321744	IfStatement	if ( image . height > ( ( size_t ) ( - 1 ) ) / ( 8 * image . width ) )		7321535	17					
ANR	7321745	Condition	image . height > ( ( size_t ) ( - 1 ) ) / ( 8 * image . width )	794:10:23351:23395	7321535	0	True				
ANR	7321746	RelationalExpression	image . height > ( ( size_t ) ( - 1 ) ) / ( 8 * image . width )		7321535	0		>			
ANR	7321747	MemberAccess	image . height		7321535	0					
ANR	7321748	Identifier	image		7321535	0					
ANR	7321749	Identifier	height		7321535	1					
ANR	7321750	MultiplicativeExpression	( ( size_t ) ( - 1 ) ) / ( 8 * image . width )		7321535	1		/			
ANR	7321751	CastExpression	( size_t ) ( - 1 )		7321535	0					
ANR	7321752	CastTarget	size_t		7321535	0					
ANR	7321753	UnaryOperationExpression	- 1		7321535	1					
ANR	7321754	UnaryOperator	-		7321535	0					
ANR	7321755	PrimaryExpression	1		7321535	1					
ANR	7321756	MultiplicativeExpression	8 * image . width		7321535	1		*			
ANR	7321757	PrimaryExpression	8		7321535	0					
ANR	7321758	MemberAccess	image . width		7321535	1					
ANR	7321759	Identifier	image		7321535	0					
ANR	7321760	Identifier	width		7321535	1					
ANR	7321761	CompoundStatement		46:57:1505:1505	7321535	1					
ANR	7321762	ExpressionStatement	"fprintf ( stderr , ""genpng: image buffer would be too big"" )"	795:9:23409:23465	7321535	0	True				
ANR	7321763	CallExpression	"fprintf ( stderr , ""genpng: image buffer would be too big"" )"		7321535	0					
ANR	7321764	Callee	fprintf		7321535	0					
ANR	7321765	Identifier	fprintf		7321535	0					
ANR	7321766	ArgumentList	stderr		7321535	1					
ANR	7321767	Argument	stderr		7321535	0					
ANR	7321768	Identifier	stderr		7321535	0					
ANR	7321769	Argument	"""genpng: image buffer would be too big"""		7321535	1					
ANR	7321770	PrimaryExpression	"""genpng: image buffer would be too big"""		7321535	0					
ANR	7321771	ReturnStatement	return 1 ;	796:9:23476:23484	7321535	1	True				
ANR	7321772	PrimaryExpression	1		7321535	0					
ANR	7321773	ExpressionStatement	buffer = malloc ( PNG_IMAGE_SIZE ( image ) )	801:6:23539:23577	7321535	18	True				
ANR	7321774	AssignmentExpression	buffer = malloc ( PNG_IMAGE_SIZE ( image ) )		7321535	0		=			
ANR	7321775	Identifier	buffer		7321535	0					
ANR	7321776	CallExpression	malloc ( PNG_IMAGE_SIZE ( image ) )		7321535	1					
ANR	7321777	Callee	malloc		7321535	0					
ANR	7321778	Identifier	malloc		7321535	0					
ANR	7321779	ArgumentList	PNG_IMAGE_SIZE ( image )		7321535	1					
ANR	7321780	Argument	PNG_IMAGE_SIZE ( image )		7321535	0					
ANR	7321781	CallExpression	PNG_IMAGE_SIZE ( image )		7321535	0					
ANR	7321782	Callee	PNG_IMAGE_SIZE		7321535	0					
ANR	7321783	Identifier	PNG_IMAGE_SIZE		7321535	0					
ANR	7321784	ArgumentList	image		7321535	1					
ANR	7321785	Argument	image		7321535	0					
ANR	7321786	Identifier	image		7321535	0					
ANR	7321787	IfStatement	if ( buffer != NULL )		7321535	19					
ANR	7321788	Condition	buffer != NULL	803:10:23590:23603	7321535	0	True				
ANR	7321789	EqualityExpression	buffer != NULL		7321535	0		!=			
ANR	7321790	Identifier	buffer		7321535	0					
ANR	7321791	Identifier	NULL		7321535	1					
ANR	7321792	CompoundStatement		57:9:1730:1743	7321535	1					
ANR	7321793	IdentifierDeclStatement	png_uint_32 y ;	805:9:23623:23636	7321535	0	True				
ANR	7321794	IdentifierDecl	y		7321535	0					
ANR	7321795	IdentifierDeclType	png_uint_32		7321535	0					
ANR	7321796	Identifier	y		7321535	1					
ANR	7321797	ForStatement	for ( y = 0 ; y < image . height ; ++ y )		7321535	1					
ANR	7321798	ForInit	y = 0 ;	808:14:23686:23689	7321535	0	True				
ANR	7321799	AssignmentExpression	y = 0		7321535	0		=			
ANR	7321800	Identifier	y		7321535	0					
ANR	7321801	PrimaryExpression	0		7321535	1					
ANR	7321802	Condition	y < image . height	808:19:23691:23704	7321535	1	True				
ANR	7321803	RelationalExpression	y < image . height		7321535	0		<			
ANR	7321804	Identifier	y		7321535	0					
ANR	7321805	MemberAccess	image . height		7321535	1					
ANR	7321806	Identifier	image		7321535	0					
ANR	7321807	Identifier	height		7321535	1					
ANR	7321808	UnaryExpression	++ y	808:35:23707:23709	7321535	2	True				
ANR	7321809	IncDec	++		7321535	0					
ANR	7321810	Identifier	y		7321535	1					
ANR	7321811	CompoundStatement		62:12:1842:1855	7321535	3					
ANR	7321812	IdentifierDeclStatement	png_uint_32 x ;	810:12:23735:23748	7321535	0	True				
ANR	7321813	IdentifierDecl	x		7321535	0					
ANR	7321814	IdentifierDeclType	png_uint_32		7321535	0					
ANR	7321815	Identifier	x		7321535	1					
ANR	7321816	ForStatement	for ( x = 0 ; x < image . width ; ++ x )		7321535	1					
ANR	7321817	ForInit	x = 0 ;	813:17:23810:23813	7321535	0	True				
ANR	7321818	AssignmentExpression	x = 0		7321535	0		=			
ANR	7321819	Identifier	x		7321535	0					
ANR	7321820	PrimaryExpression	0		7321535	1					
ANR	7321821	Condition	x < image . width	813:22:23815:23827	7321535	1	True				
ANR	7321822	RelationalExpression	x < image . width		7321535	0		<			
ANR	7321823	Identifier	x		7321535	0					
ANR	7321824	MemberAccess	image . width		7321535	1					
ANR	7321825	Identifier	image		7321535	0					
ANR	7321826	Identifier	width		7321535	1					
ANR	7321827	UnaryExpression	++ x	813:37:23830:23832	7321535	2	True				
ANR	7321828	IncDec	++		7321535	0					
ANR	7321829	Identifier	x		7321535	1					
ANR	7321830	ExpressionStatement	"pixel ( buffer + 4 * ( x + y * image . width ) , arg_list , nshapes , x , y )"	814:15:23850:23912	7321535	3	True				
ANR	7321831	CallExpression	"pixel ( buffer + 4 * ( x + y * image . width ) , arg_list , nshapes , x , y )"		7321535	0					
ANR	7321832	Callee	pixel		7321535	0					
ANR	7321833	Identifier	pixel		7321535	0					
ANR	7321834	ArgumentList	buffer + 4 * ( x + y * image . width )		7321535	1					
ANR	7321835	Argument	buffer + 4 * ( x + y * image . width )		7321535	0					
ANR	7321836	AdditiveExpression	buffer + 4 * ( x + y * image . width )		7321535	0		+			
ANR	7321837	Identifier	buffer		7321535	0					
ANR	7321838	MultiplicativeExpression	4 * ( x + y * image . width )		7321535	1		*			
ANR	7321839	PrimaryExpression	4		7321535	0					
ANR	7321840	AdditiveExpression	x + y * image . width		7321535	1		+			
ANR	7321841	Identifier	x		7321535	0					
ANR	7321842	MultiplicativeExpression	y * image . width		7321535	1		*			
ANR	7321843	Identifier	y		7321535	0					
ANR	7321844	MemberAccess	image . width		7321535	1					
ANR	7321845	Identifier	image		7321535	0					
ANR	7321846	Identifier	width		7321535	1					
ANR	7321847	Argument	arg_list		7321535	1					
ANR	7321848	Identifier	arg_list		7321535	0					
ANR	7321849	Argument	nshapes		7321535	2					
ANR	7321850	Identifier	nshapes		7321535	0					
ANR	7321851	Argument	x		7321535	3					
ANR	7321852	Identifier	x		7321535	0					
ANR	7321853	Argument	y		7321535	4					
ANR	7321854	Identifier	y		7321535	0					
ANR	7321855	IfStatement	"if ( png_image_write_to_stdio ( & image , stdout , convert_to_8bit , buffer , 0 , NULL ) )"		7321535	2					
ANR	7321856	Condition	"png_image_write_to_stdio ( & image , stdout , convert_to_8bit , buffer , 0 , NULL )"	818:13:23983:24095	7321535	0	True				
ANR	7321857	CallExpression	"png_image_write_to_stdio ( & image , stdout , convert_to_8bit , buffer , 0 , NULL )"		7321535	0					
ANR	7321858	Callee	png_image_write_to_stdio		7321535	0					
ANR	7321859	Identifier	png_image_write_to_stdio		7321535	0					
ANR	7321860	ArgumentList	& image		7321535	1					
ANR	7321861	Argument	& image		7321535	0					
ANR	7321862	UnaryOperationExpression	& image		7321535	0					
ANR	7321863	UnaryOperator	&		7321535	0					
ANR	7321864	Identifier	image		7321535	1					
ANR	7321865	Argument	stdout		7321535	1					
ANR	7321866	Identifier	stdout		7321535	0					
ANR	7321867	Argument	convert_to_8bit		7321535	2					
ANR	7321868	Identifier	convert_to_8bit		7321535	0					
ANR	7321869	Argument	buffer		7321535	3					
ANR	7321870	Identifier	buffer		7321535	0					
ANR	7321871	Argument	0		7321535	4					
ANR	7321872	PrimaryExpression	0		7321535	0					
ANR	7321873	Argument	NULL		7321535	5					
ANR	7321874	Identifier	NULL		7321535	0					
ANR	7321875	CompoundStatement		72:9:2214:2214	7321535	1					
ANR	7321876	ExpressionStatement	free ( buffer )	821:12:24121:24133	7321535	0	True				
ANR	7321877	CallExpression	free ( buffer )		7321535	0					
ANR	7321878	Callee	free		7321535	0					
ANR	7321879	Identifier	free		7321535	0					
ANR	7321880	ArgumentList	buffer		7321535	1					
ANR	7321881	Argument	buffer		7321535	0					
ANR	7321882	Identifier	buffer		7321535	0					
ANR	7321883	ReturnStatement	return 0 ;	822:12:24147:24155	7321535	1	True				
ANR	7321884	PrimaryExpression	0		7321535	0					
ANR	7321885	ElseStatement	else		7321535	0					
ANR	7321886	ExpressionStatement	"fprintf ( stderr , ""genpng: write stdout: %s\\n"" , image . message )"	826:12:24209:24269	7321535	0	True				
ANR	7321887	CallExpression	"fprintf ( stderr , ""genpng: write stdout: %s\\n"" , image . message )"		7321535	0					
ANR	7321888	Callee	fprintf		7321535	0					
ANR	7321889	Identifier	fprintf		7321535	0					
ANR	7321890	ArgumentList	stderr		7321535	1					
ANR	7321891	Argument	stderr		7321535	0					
ANR	7321892	Identifier	stderr		7321535	0					
ANR	7321893	Argument	"""genpng: write stdout: %s\\n"""		7321535	1					
ANR	7321894	PrimaryExpression	"""genpng: write stdout: %s\\n"""		7321535	0					
ANR	7321895	Argument	image . message		7321535	2					
ANR	7321896	MemberAccess	image . message		7321535	0					
ANR	7321897	Identifier	image		7321535	0					
ANR	7321898	Identifier	message		7321535	1					
ANR	7321899	ExpressionStatement	free ( buffer )	828:9:24281:24293	7321535	3	True				
ANR	7321900	CallExpression	free ( buffer )		7321535	0					
ANR	7321901	Callee	free		7321535	0					
ANR	7321902	Identifier	free		7321535	0					
ANR	7321903	ArgumentList	buffer		7321535	1					
ANR	7321904	Argument	buffer		7321535	0					
ANR	7321905	Identifier	buffer		7321535	0					
ANR	7321906	ElseStatement	else		7321535	0					
ANR	7321907	ExpressionStatement	"fprintf ( stderr , ""genpng: out of memory: %lu bytes\\n"" , ( unsigned long ) PNG_IMAGE_SIZE ( image ) )"	832:9:24324:24430	7321535	0	True				
ANR	7321908	CallExpression	"fprintf ( stderr , ""genpng: out of memory: %lu bytes\\n"" , ( unsigned long ) PNG_IMAGE_SIZE ( image ) )"		7321535	0					
ANR	7321909	Callee	fprintf		7321535	0					
ANR	7321910	Identifier	fprintf		7321535	0					
ANR	7321911	ArgumentList	stderr		7321535	1					
ANR	7321912	Argument	stderr		7321535	0					
ANR	7321913	Identifier	stderr		7321535	0					
ANR	7321914	Argument	"""genpng: out of memory: %lu bytes\\n"""		7321535	1					
ANR	7321915	PrimaryExpression	"""genpng: out of memory: %lu bytes\\n"""		7321535	0					
ANR	7321916	Argument	( unsigned long ) PNG_IMAGE_SIZE ( image )		7321535	2					
ANR	7321917	CastExpression	( unsigned long ) PNG_IMAGE_SIZE ( image )		7321535	0					
ANR	7321918	CastTarget	unsigned long		7321535	0					
ANR	7321919	CallExpression	PNG_IMAGE_SIZE ( image )		7321535	1					
ANR	7321920	Callee	PNG_IMAGE_SIZE		7321535	0					
ANR	7321921	Identifier	PNG_IMAGE_SIZE		7321535	0					
ANR	7321922	ArgumentList	image		7321535	1					
ANR	7321923	Argument	image		7321535	0					
ANR	7321924	Identifier	image		7321535	0					
ANR	7321925	ElseStatement	else		7321535	0					
ANR	7321926	CompoundStatement		89:3:2556:2556	7321535	0					
ANR	7321927	Statement	fprintf	839:6:24495:24501	7321535	0	True				
ANR	7321928	Statement	(	839:13:24502:24502	7321535	1	True				
ANR	7321929	Statement	stderr	839:14:24503:24508	7321535	2	True				
ANR	7321930	Statement	","	839:20:24509:24509	7321535	3	True				
ANR	7321931	Statement	"""genpng: usage: genpng [--8bit] width height {shape}\\n"""	839:22:24511:24565	7321535	4	True				
ANR	7321932	Statement	""" Generate a transparent PNG in RGBA (truecolor+alpha) format\\n"""	840:9:24576:24639	7321535	5	True				
ANR	7321933	Statement	""" containing the given shape or shapes.  Shapes are defined:\\n"""	841:9:24650:24712	7321535	6	True				
ANR	7321934	Statement	"""\\n"""	842:9:24723:24726	7321535	7	True				
ANR	7321935	Statement	"""  shape ::= color width shape x1 y1 x2 y2\\n"""	843:9:24737:24781	7321535	8	True				
ANR	7321936	Statement	"""  color ::= black|white|red|green|yellow|blue\\n"""	844:9:24792:24840	7321535	9	True				
ANR	7321937	Statement	"""  color ::= brown|purple|pink|orange|gray|cyan\\n"""	845:9:24851:24900	7321535	10	True				
ANR	7321938	Statement	"""  width ::= filled|<number>\\n"""	846:9:24911:24941	7321535	11	True				
ANR	7321939	Statement	"""  shape ::= circle|square|line\\n"""	847:9:24952:24985	7321535	12	True				
ANR	7321940	Statement	"""  x1,x2 ::= <number>\\n"""	848:9:24996:25019	7321535	13	True				
ANR	7321941	Statement	"""  y1,y2 ::= <number>\\n"""	849:9:25030:25053	7321535	14	True				
ANR	7321942	Statement	"""\\n"""	850:9:25064:25067	7321535	15	True				
ANR	7321943	Statement	""" Numbers are floating point numbers describing points relative to\\n"""	851:9:25078:25146	7321535	16	True				
ANR	7321944	Statement	""" the top left of the output PNG as pixel coordinates.  The 'width'\\n"""	852:9:25157:25226	7321535	17	True				
ANR	7321945	Statement	""" parameter is either the width of the line (in output pixels) used\\n"""	853:9:25237:25306	7321535	18	True				
ANR	7321946	Statement	""" to draw the shape or 'filled' to indicate that the shape should\\n"""	854:9:25317:25384	7321535	19	True				
ANR	7321947	Statement	""" be filled with the color.\\n"""	855:9:25395:25424	7321535	20	True				
ANR	7321948	Statement	"""\\n"""	856:9:25435:25438	7321535	21	True				
ANR	7321949	Statement	""" Colors are interpreted loosely to give access to the eight full\\n"""	857:9:25449:25516	7321535	22	True				
ANR	7321950	Statement	""" intensity RGB values:\\n"""	858:9:25527:25552	7321535	23	True				
ANR	7321951	Statement	"""\\n"""	859:9:25563:25566	7321535	24	True				
ANR	7321952	Statement	"""  black, red, green, blue, yellow, cyan, purple, white,\\n"""	860:9:25577:25635	7321535	25	True				
ANR	7321953	Statement	"""\\n"""	861:9:25646:25649	7321535	26	True				
ANR	7321954	Statement	""" Cyan is full intensity blue+green; RGB(0,1,1), plus the following\\n"""	862:9:25660:25729	7321535	27	True				
ANR	7321955	Statement	""" lower intensity values:\\n"""	863:9:25740:25767	7321535	28	True				
ANR	7321956	Statement	"""\\n"""	864:9:25778:25781	7321535	29	True				
ANR	7321957	Statement	"""  brown:  red+orange:  RGB(0.5, 0.125, 0) (dark red+orange)\\n"""	865:9:25792:25854	7321535	30	True				
ANR	7321958	Statement	"""  pink:   red+white:   RGB(1.0, 0.5,   0.5)\\n"""	866:9:25865:25911	7321535	31	True				
ANR	7321959	Statement	"""  orange: red+yellow:  RGB(1.0, 0.5,   0)\\n"""	867:9:25922:25966	7321535	32	True				
ANR	7321960	Statement	"""  gray:   black+white: RGB(0.5, 0.5,   0.5)\\n"""	868:9:25977:26023	7321535	33	True				
ANR	7321961	Statement	"""\\n"""	869:9:26034:26037	7321535	34	True				
ANR	7321962	Statement	""" The RGB values are selected to make detection of aliasing errors\\n"""	870:9:26048:26116	7321535	35	True				
ANR	7321963	Statement	""" easy. The names are selected to make the description of errors\\n"""	871:9:26127:26193	7321535	36	True				
ANR	7321964	Statement	""" easy.\\n"""	872:9:26204:26213	7321535	37	True				
ANR	7321965	Statement	"""\\n"""	873:9:26224:26227	7321535	38	True				
ANR	7321966	Statement	""" The PNG is written to stdout, if --8bit is given a 32bpp RGBA sRGB\\n"""	874:9:26238:26308	7321535	39	True				
ANR	7321967	Statement	""" file is produced, otherwise a 64bpp RGBA linear encoded file is\\n"""	875:9:26319:26386	7321535	40	True				
ANR	7321968	Statement	""" written.\\n"""	876:9:26397:26409	7321535	41	True				
ANR	7321969	Statement	)	876:22:26410:26410	7321535	42	True				
ANR	7321970	ExpressionStatement		876:23:26411:26411	7321535	43	True				
ANR	7321971	ReturnStatement	return 1 ;	879:3:26422:26430	7321535	3	True				
ANR	7321972	PrimaryExpression	1		7321535	0					
ANR	7321973	ReturnType	int		7321535	1					
ANR	7321974	Identifier	main		7321535	2					
ANR	7321975	ParameterList	"int argc , const char * * argv"		7321535	3					
ANR	7321976	Parameter	int argc	748:5:21863:21870	7321535	0	True				
ANR	7321977	ParameterType	int		7321535	0					
ANR	7321978	Identifier	argc		7321535	1					
ANR	7321979	Parameter	const char * * argv	748:15:21873:21889	7321535	1	True				
ANR	7321980	ParameterType	const char * *		7321535	0					
ANR	7321981	Identifier	argv		7321535	1					
ANR	7321982	CFGEntryNode	ENTRY		7321535		True				
ANR	7321983	CFGExitNode	EXIT		7321535		True				
ANR	7321984	Symbol	image . message		7321535						
ANR	7321985	Symbol	stdout		7321535						
ANR	7321986	Symbol	* argv		7321535						
ANR	7321987	Symbol	convert_to_8bit		7321535						
ANR	7321988	Symbol	argv		7321535						
ANR	7321989	Symbol	PNG_IMAGE_VERSION		7321535						
ANR	7321990	Symbol	image . flags		7321535						
ANR	7321991	Symbol	buffer		7321535						
ANR	7321992	Symbol	* nshapes		7321535						
ANR	7321993	Symbol	argc		7321535						
ANR	7321994	Symbol	strcmp		7321535						
ANR	7321995	Symbol	image		7321535						
ANR	7321996	Symbol	malloc		7321535						
ANR	7321997	Symbol	& image		7321535						
ANR	7321998	Symbol	NULL		7321535						
ANR	7321999	Symbol	image . opaque		7321535						
ANR	7322000	Symbol	image . height		7321535						
ANR	7322001	Symbol	stderr		7321535						
ANR	7322002	Symbol	image . colormap_entries		7321535						
ANR	7322003	Symbol	arg_list		7321535						
ANR	7322004	Symbol	PNG_IMAGE_SIZE		7321535						
ANR	7322005	Symbol	nshapes		7321535						
ANR	7322006	Symbol	image . format		7321535						
ANR	7322007	Symbol	x		7321535						
ANR	7322008	Symbol	max_shapes		7321535						
ANR	7322009	Symbol	y		7321535						
ANR	7322010	Symbol	image . version		7321535						
ANR	7322011	Symbol	png_image_write_to_stdio		7321535						
ANR	7322012	Symbol	PNG_FORMAT_LINEAR_RGB_ALPHA		7321535						
ANR	7322013	Symbol	image . width		7321535						
ANR	7322014	Symbol	read_wh		7321535						
