command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5655562	File	data/converged/CVE-2018-16863_ghostpdl/gxhtbit.c								
ANR	5655563	Function	construct_ht_order_default	34:0:946:1244							
ANR	5655564	FunctionDef	"construct_ht_order_default (gx_ht_order * porder , const byte * thresholds)"		5655563	0					
ANR	5655565	CompoundStatement		36:0:1029:1244	5655563	0					
ANR	5655566	IdentifierDeclStatement	gx_ht_bit * bits = ( gx_ht_bit * ) porder -> bit_data ;	37:4:1035:1082	5655563	0	True				
ANR	5655567	IdentifierDecl	* bits = ( gx_ht_bit * ) porder -> bit_data		5655563	0					
ANR	5655568	IdentifierDeclType	gx_ht_bit *		5655563	0					
ANR	5655569	Identifier	bits		5655563	1					
ANR	5655570	AssignmentExpression	* bits = ( gx_ht_bit * ) porder -> bit_data		5655563	2		=			
ANR	5655571	Identifier	bits		5655563	0					
ANR	5655572	CastExpression	( gx_ht_bit * ) porder -> bit_data		5655563	1					
ANR	5655573	CastTarget	gx_ht_bit *		5655563	0					
ANR	5655574	PtrMemberAccess	porder -> bit_data		5655563	1					
ANR	5655575	Identifier	porder		5655563	0					
ANR	5655576	Identifier	bit_data		5655563	1					
ANR	5655577	IdentifierDeclStatement	uint i ;	38:4:1088:1094	5655563	1	True				
ANR	5655578	IdentifierDecl	i		5655563	0					
ANR	5655579	IdentifierDeclType	uint		5655563	0					
ANR	5655580	Identifier	i		5655563	1					
ANR	5655581	ForStatement	for ( i = 0 ; i < porder -> num_bits ; i ++ )		5655563	2					
ANR	5655582	ForInit	i = 0 ;	40:9:1106:1111	5655563	0	True				
ANR	5655583	AssignmentExpression	i = 0		5655563	0		=			
ANR	5655584	Identifier	i		5655563	0					
ANR	5655585	PrimaryExpression	0		5655563	1					
ANR	5655586	Condition	i < porder -> num_bits	40:16:1113:1132	5655563	1	True				
ANR	5655587	RelationalExpression	i < porder -> num_bits		5655563	0		<			
ANR	5655588	Identifier	i		5655563	0					
ANR	5655589	PtrMemberAccess	porder -> num_bits		5655563	1					
ANR	5655590	Identifier	porder		5655563	0					
ANR	5655591	Identifier	num_bits		5655563	1					
ANR	5655592	PostIncDecOperationExpression	i ++	40:38:1135:1137	5655563	2	True				
ANR	5655593	Identifier	i		5655563	0					
ANR	5655594	IncDec	++		5655563	1					
ANR	5655595	ExpressionStatement	"bits [ i ] . mask = max ( 1 , thresholds [ i ] )"	41:8:1148:1184	5655563	3	True				
ANR	5655596	AssignmentExpression	"bits [ i ] . mask = max ( 1 , thresholds [ i ] )"		5655563	0		=			
ANR	5655597	MemberAccess	bits [ i ] . mask		5655563	0					
ANR	5655598	ArrayIndexing	bits [ i ]		5655563	0					
ANR	5655599	Identifier	bits		5655563	0					
ANR	5655600	Identifier	i		5655563	1					
ANR	5655601	Identifier	mask		5655563	1					
ANR	5655602	CallExpression	"max ( 1 , thresholds [ i ] )"		5655563	1					
ANR	5655603	Callee	max		5655563	0					
ANR	5655604	Identifier	max		5655563	0					
ANR	5655605	ArgumentList	1		5655563	1					
ANR	5655606	Argument	1		5655563	0					
ANR	5655607	PrimaryExpression	1		5655563	0					
ANR	5655608	Argument	thresholds [ i ]		5655563	1					
ANR	5655609	ArrayIndexing	thresholds [ i ]		5655563	0					
ANR	5655610	Identifier	thresholds		5655563	0					
ANR	5655611	Identifier	i		5655563	1					
ANR	5655612	ExpressionStatement	gx_ht_complete_threshold_order ( porder )	42:4:1190:1228	5655563	3	True				
ANR	5655613	CallExpression	gx_ht_complete_threshold_order ( porder )		5655563	0					
ANR	5655614	Callee	gx_ht_complete_threshold_order		5655563	0					
ANR	5655615	Identifier	gx_ht_complete_threshold_order		5655563	0					
ANR	5655616	ArgumentList	porder		5655563	1					
ANR	5655617	Argument	porder		5655563	0					
ANR	5655618	Identifier	porder		5655563	0					
ANR	5655619	ReturnStatement	return 0 ;	43:4:1234:1242	5655563	4	True				
ANR	5655620	PrimaryExpression	0		5655563	0					
ANR	5655621	ReturnType	static int		5655563	1					
ANR	5655622	Identifier	construct_ht_order_default		5655563	2					
ANR	5655623	ParameterList	"gx_ht_order * porder , const byte * thresholds"		5655563	3					
ANR	5655624	Parameter	gx_ht_order * porder	35:27:984:1002	5655563	0	True				
ANR	5655625	ParameterType	gx_ht_order *		5655563	0					
ANR	5655626	Identifier	porder		5655563	1					
ANR	5655627	Parameter	const byte * thresholds	35:48:1005:1026	5655563	1	True				
ANR	5655628	ParameterType	const byte *		5655563	0					
ANR	5655629	Identifier	thresholds		5655563	1					
ANR	5655630	CFGEntryNode	ENTRY		5655563		True				
ANR	5655631	CFGExitNode	EXIT		5655563		True				
ANR	5655632	Symbol	* bits		5655563						
ANR	5655633	Symbol	thresholds		5655563						
ANR	5655634	Symbol	porder -> bit_data		5655563						
ANR	5655635	Symbol	* i		5655563						
ANR	5655636	Symbol	max		5655563						
ANR	5655637	Symbol	bits		5655563						
ANR	5655638	Symbol	* thresholds		5655563						
ANR	5655639	Symbol	i		5655563						
ANR	5655640	Symbol	bits [ i ] . mask		5655563						
ANR	5655641	Symbol	porder -> num_bits		5655563						
ANR	5655642	Symbol	* porder		5655563						
ANR	5655643	Symbol	porder		5655563						
ANR	5655644	Function	construct_ht_order_short	51:0:1421:3991							
ANR	5655645	FunctionDef	"construct_ht_order_short (gx_ht_order * porder , const byte * thresholds)"		5655644	0					
ANR	5655646	CompoundStatement		53:0:1502:3991	5655644	0					
ANR	5655647	IdentifierDeclStatement	uint size = porder -> num_bits ;	54:4:1508:1536	5655644	0	True				
ANR	5655648	IdentifierDecl	size = porder -> num_bits		5655644	0					
ANR	5655649	IdentifierDeclType	uint		5655644	0					
ANR	5655650	Identifier	size		5655644	1					
ANR	5655651	AssignmentExpression	size = porder -> num_bits		5655644	2		=			
ANR	5655652	Identifier	size		5655644	0					
ANR	5655653	PtrMemberAccess	porder -> num_bits		5655644	1					
ANR	5655654	Identifier	porder		5655644	0					
ANR	5655655	Identifier	num_bits		5655644	1					
ANR	5655656	IdentifierDeclStatement	uint i ;	55:4:1542:1548	5655644	1	True				
ANR	5655657	IdentifierDecl	i		5655644	0					
ANR	5655658	IdentifierDeclType	uint		5655644	0					
ANR	5655659	Identifier	i		5655644	1					
ANR	5655660	IdentifierDeclStatement	ushort * bits = ( ushort * ) porder -> bit_data ;	56:4:1554:1595	5655644	2	True				
ANR	5655661	IdentifierDecl	* bits = ( ushort * ) porder -> bit_data		5655644	0					
ANR	5655662	IdentifierDeclType	ushort *		5655644	0					
ANR	5655663	Identifier	bits		5655644	1					
ANR	5655664	AssignmentExpression	* bits = ( ushort * ) porder -> bit_data		5655644	2		=			
ANR	5655665	Identifier	bits		5655644	0					
ANR	5655666	CastExpression	( ushort * ) porder -> bit_data		5655644	1					
ANR	5655667	CastTarget	ushort *		5655644	0					
ANR	5655668	PtrMemberAccess	porder -> bit_data		5655644	1					
ANR	5655669	Identifier	porder		5655644	0					
ANR	5655670	Identifier	bit_data		5655644	1					
ANR	5655671	IdentifierDeclStatement	uint * levels = porder -> levels ;	57:4:1601:1630	5655644	3	True				
ANR	5655672	IdentifierDecl	* levels = porder -> levels		5655644	0					
ANR	5655673	IdentifierDeclType	uint *		5655644	0					
ANR	5655674	Identifier	levels		5655644	1					
ANR	5655675	AssignmentExpression	* levels = porder -> levels		5655644	2		=			
ANR	5655676	Identifier	levels		5655644	0					
ANR	5655677	PtrMemberAccess	porder -> levels		5655644	1					
ANR	5655678	Identifier	porder		5655644	0					
ANR	5655679	Identifier	levels		5655644	1					
ANR	5655680	IdentifierDeclStatement	uint num_levels = porder -> num_levels ;	58:4:1636:1672	5655644	4	True				
ANR	5655681	IdentifierDecl	num_levels = porder -> num_levels		5655644	0					
ANR	5655682	IdentifierDeclType	uint		5655644	0					
ANR	5655683	Identifier	num_levels		5655644	1					
ANR	5655684	AssignmentExpression	num_levels = porder -> num_levels		5655644	2		=			
ANR	5655685	Identifier	num_levels		5655644	0					
ANR	5655686	PtrMemberAccess	porder -> num_levels		5655644	1					
ANR	5655687	Identifier	porder		5655644	0					
ANR	5655688	Identifier	num_levels		5655644	1					
ANR	5655689	ExpressionStatement	"memset ( levels , 0 , num_levels * sizeof ( * levels ) )"	60:4:1679:1726	5655644	5	True				
ANR	5655690	CallExpression	"memset ( levels , 0 , num_levels * sizeof ( * levels ) )"		5655644	0					
ANR	5655691	Callee	memset		5655644	0					
ANR	5655692	Identifier	memset		5655644	0					
ANR	5655693	ArgumentList	levels		5655644	1					
ANR	5655694	Argument	levels		5655644	0					
ANR	5655695	Identifier	levels		5655644	0					
ANR	5655696	Argument	0		5655644	1					
ANR	5655697	PrimaryExpression	0		5655644	0					
ANR	5655698	Argument	num_levels * sizeof ( * levels )		5655644	2					
ANR	5655699	MultiplicativeExpression	num_levels * sizeof ( * levels )		5655644	0		*			
ANR	5655700	Identifier	num_levels		5655644	0					
ANR	5655701	SizeofExpression	sizeof ( * levels )		5655644	1					
ANR	5655702	Sizeof	sizeof		5655644	0					
ANR	5655703	UnaryOperationExpression	* levels		5655644	1					
ANR	5655704	UnaryOperator	*		5655644	0					
ANR	5655705	Identifier	levels		5655644	1					
ANR	5655706	ForStatement	for ( i = 0 ; i < size ; i ++ )		5655644	6					
ANR	5655707	ForInit	i = 0 ;	62:9:1803:1808	5655644	0	True				
ANR	5655708	AssignmentExpression	i = 0		5655644	0		=			
ANR	5655709	Identifier	i		5655644	0					
ANR	5655710	PrimaryExpression	0		5655644	1					
ANR	5655711	Condition	i < size	62:16:1810:1817	5655644	1	True				
ANR	5655712	RelationalExpression	i < size		5655644	0		<			
ANR	5655713	Identifier	i		5655644	0					
ANR	5655714	Identifier	size		5655644	1					
ANR	5655715	PostIncDecOperationExpression	i ++	62:26:1820:1822	5655644	2	True				
ANR	5655716	Identifier	i		5655644	0					
ANR	5655717	IncDec	++		5655644	1					
ANR	5655718	CompoundStatement		11:8:332:366	5655644	3					
ANR	5655719	IdentifierDeclStatement	"uint value = max ( 1 , thresholds [ i ] ) ;"	63:8:1835:1869	5655644	0	True				
ANR	5655720	IdentifierDecl	"value = max ( 1 , thresholds [ i ] )"		5655644	0					
ANR	5655721	IdentifierDeclType	uint		5655644	0					
ANR	5655722	Identifier	value		5655644	1					
ANR	5655723	AssignmentExpression	"value = max ( 1 , thresholds [ i ] )"		5655644	2		=			
ANR	5655724	Identifier	value		5655644	0					
ANR	5655725	CallExpression	"max ( 1 , thresholds [ i ] )"		5655644	1					
ANR	5655726	Callee	max		5655644	0					
ANR	5655727	Identifier	max		5655644	0					
ANR	5655728	ArgumentList	1		5655644	1					
ANR	5655729	Argument	1		5655644	0					
ANR	5655730	PrimaryExpression	1		5655644	0					
ANR	5655731	Argument	thresholds [ i ]		5655644	1					
ANR	5655732	ArrayIndexing	thresholds [ i ]		5655644	0					
ANR	5655733	Identifier	thresholds		5655644	0					
ANR	5655734	Identifier	i		5655644	1					
ANR	5655735	IfStatement	if ( value + 1 < num_levels )		5655644	1					
ANR	5655736	Condition	value + 1 < num_levels	65:12:1884:1905	5655644	0	True				
ANR	5655737	RelationalExpression	value + 1 < num_levels		5655644	0		<			
ANR	5655738	AdditiveExpression	value + 1		5655644	0		+			
ANR	5655739	Identifier	value		5655644	0					
ANR	5655740	PrimaryExpression	1		5655644	1					
ANR	5655741	Identifier	num_levels		5655644	1					
ANR	5655742	ExpressionStatement	levels [ value + 1 ] ++	66:12:1920:1939	5655644	1	True				
ANR	5655743	PostIncDecOperationExpression	levels [ value + 1 ] ++		5655644	0					
ANR	5655744	ArrayIndexing	levels [ value + 1 ]		5655644	0					
ANR	5655745	Identifier	levels		5655644	0					
ANR	5655746	AdditiveExpression	value + 1		5655644	1		+			
ANR	5655747	Identifier	value		5655644	0					
ANR	5655748	PrimaryExpression	1		5655644	1					
ANR	5655749	IncDec	++		5655644	1					
ANR	5655750	ForStatement	for ( i = 2 ; i < num_levels ; ++ i )		5655644	7					
ANR	5655751	ForInit	i = 2 ;	68:9:1956:1961	5655644	0	True				
ANR	5655752	AssignmentExpression	i = 2		5655644	0		=			
ANR	5655753	Identifier	i		5655644	0					
ANR	5655754	PrimaryExpression	2		5655644	1					
ANR	5655755	Condition	i < num_levels	68:16:1963:1976	5655644	1	True				
ANR	5655756	RelationalExpression	i < num_levels		5655644	0		<			
ANR	5655757	Identifier	i		5655644	0					
ANR	5655758	Identifier	num_levels		5655644	1					
ANR	5655759	UnaryExpression	++ i	68:32:1979:1981	5655644	2	True				
ANR	5655760	IncDec	++		5655644	0					
ANR	5655761	Identifier	i		5655644	1					
ANR	5655762	ExpressionStatement	levels [ i ] += levels [ i - 1 ]	69:8:1992:2018	5655644	3	True				
ANR	5655763	AssignmentExpression	levels [ i ] += levels [ i - 1 ]		5655644	0		+=			
ANR	5655764	ArrayIndexing	levels [ i ]		5655644	0					
ANR	5655765	Identifier	levels		5655644	0					
ANR	5655766	Identifier	i		5655644	1					
ANR	5655767	ArrayIndexing	levels [ i - 1 ]		5655644	1					
ANR	5655768	Identifier	levels		5655644	0					
ANR	5655769	AdditiveExpression	i - 1		5655644	1		-			
ANR	5655770	Identifier	i		5655644	0					
ANR	5655771	PrimaryExpression	1		5655644	1					
ANR	5655772	CompoundStatement		21:8:609:656	5655644	8					
ANR	5655773	IdentifierDeclStatement	uint width = porder -> width ;	72:8:2076:2102	5655644	0	True				
ANR	5655774	IdentifierDecl	width = porder -> width		5655644	0					
ANR	5655775	IdentifierDeclType	uint		5655644	0					
ANR	5655776	Identifier	width		5655644	1					
ANR	5655777	AssignmentExpression	width = porder -> width		5655644	2		=			
ANR	5655778	Identifier	width		5655644	0					
ANR	5655779	PtrMemberAccess	porder -> width		5655644	1					
ANR	5655780	Identifier	porder		5655644	0					
ANR	5655781	Identifier	width		5655644	1					
ANR	5655782	IdentifierDeclStatement	uint padding = bitmap_raster ( width ) * 8 - width ;	73:8:2112:2159	5655644	1	True				
ANR	5655783	IdentifierDecl	padding = bitmap_raster ( width ) * 8 - width		5655644	0					
ANR	5655784	IdentifierDeclType	uint		5655644	0					
ANR	5655785	Identifier	padding		5655644	1					
ANR	5655786	AssignmentExpression	padding = bitmap_raster ( width ) * 8 - width		5655644	2		=			
ANR	5655787	Identifier	padding		5655644	0					
ANR	5655788	AdditiveExpression	bitmap_raster ( width ) * 8 - width		5655644	1		-			
ANR	5655789	MultiplicativeExpression	bitmap_raster ( width ) * 8		5655644	0		*			
ANR	5655790	CallExpression	bitmap_raster ( width )		5655644	0					
ANR	5655791	Callee	bitmap_raster		5655644	0					
ANR	5655792	Identifier	bitmap_raster		5655644	0					
ANR	5655793	ArgumentList	width		5655644	1					
ANR	5655794	Argument	width		5655644	0					
ANR	5655795	Identifier	width		5655644	0					
ANR	5655796	PrimaryExpression	8		5655644	1					
ANR	5655797	Identifier	width		5655644	1					
ANR	5655798	ForStatement	for ( i = 0 ; i < size ; i ++ )		5655644	2					
ANR	5655799	ForInit	i = 0 ;	75:13:2175:2180	5655644	0	True				
ANR	5655800	AssignmentExpression	i = 0		5655644	0		=			
ANR	5655801	Identifier	i		5655644	0					
ANR	5655802	PrimaryExpression	0		5655644	1					
ANR	5655803	Condition	i < size	75:20:2182:2189	5655644	1	True				
ANR	5655804	RelationalExpression	i < size		5655644	0		<			
ANR	5655805	Identifier	i		5655644	0					
ANR	5655806	Identifier	size		5655644	1					
ANR	5655807	PostIncDecOperationExpression	i ++	75:30:2192:2194	5655644	2	True				
ANR	5655808	Identifier	i		5655644	0					
ANR	5655809	IncDec	++		5655644	1					
ANR	5655810	CompoundStatement		24:12:708:742	5655644	3					
ANR	5655811	IdentifierDeclStatement	"uint value = max ( 1 , thresholds [ i ] ) ;"	76:12:2211:2245	5655644	0	True				
ANR	5655812	IdentifierDecl	"value = max ( 1 , thresholds [ i ] )"		5655644	0					
ANR	5655813	IdentifierDeclType	uint		5655644	0					
ANR	5655814	Identifier	value		5655644	1					
ANR	5655815	AssignmentExpression	"value = max ( 1 , thresholds [ i ] )"		5655644	2		=			
ANR	5655816	Identifier	value		5655644	0					
ANR	5655817	CallExpression	"max ( 1 , thresholds [ i ] )"		5655644	1					
ANR	5655818	Callee	max		5655644	0					
ANR	5655819	Identifier	max		5655644	0					
ANR	5655820	ArgumentList	1		5655644	1					
ANR	5655821	Argument	1		5655644	0					
ANR	5655822	PrimaryExpression	1		5655644	0					
ANR	5655823	Argument	thresholds [ i ]		5655644	1					
ANR	5655824	ArrayIndexing	thresholds [ i ]		5655644	0					
ANR	5655825	Identifier	thresholds		5655644	0					
ANR	5655826	Identifier	i		5655644	1					
ANR	5655827	ExpressionStatement	bits [ levels [ value ] ++ ] = i + ( i / width * padding )	79:12:2323:2372	5655644	1	True				
ANR	5655828	AssignmentExpression	bits [ levels [ value ] ++ ] = i + ( i / width * padding )		5655644	0		=			
ANR	5655829	ArrayIndexing	bits [ levels [ value ] ++ ]		5655644	0					
ANR	5655830	Identifier	bits		5655644	0					
ANR	5655831	PostIncDecOperationExpression	levels [ value ] ++		5655644	1					
ANR	5655832	ArrayIndexing	levels [ value ]		5655644	0					
ANR	5655833	Identifier	levels		5655644	0					
ANR	5655834	Identifier	value		5655644	1					
ANR	5655835	IncDec	++		5655644	1					
ANR	5655836	AdditiveExpression	i + ( i / width * padding )		5655644	1		+			
ANR	5655837	Identifier	i		5655644	0					
ANR	5655838	MultiplicativeExpression	i / width * padding		5655644	1		/			
ANR	5655839	Identifier	i		5655644	0					
ANR	5655840	MultiplicativeExpression	width * padding		5655644	1		*			
ANR	5655841	Identifier	width		5655644	0					
ANR	5655842	Identifier	padding		5655644	1					
ANR	5655843	CompoundStatement		33:8:957:1007	5655644	9					
ANR	5655844	IdentifierDeclStatement	const gx_dht_proc * phtrp = gx_device_halftone_list ;	85:8:2460:2510	5655644	0	True				
ANR	5655845	IdentifierDecl	* phtrp = gx_device_halftone_list		5655644	0					
ANR	5655846	IdentifierDeclType	const gx_dht_proc *		5655644	0					
ANR	5655847	Identifier	phtrp		5655644	1					
ANR	5655848	AssignmentExpression	* phtrp = gx_device_halftone_list		5655644	2		=			
ANR	5655849	Identifier	gx_device_halftone_list		5655644	0					
ANR	5655850	Identifier	gx_device_halftone_list		5655644	1					
ANR	5655851	ForStatement	for ( ; * phtrp ; ++ phtrp )		5655644	1					
ANR	5655852	Condition	* phtrp	87:15:2528:2533	5655644	0	True				
ANR	5655853	UnaryOperationExpression	* phtrp		5655644	0					
ANR	5655854	UnaryOperator	*		5655644	0					
ANR	5655855	Identifier	phtrp		5655644	1					
ANR	5655856	UnaryExpression	++ phtrp	87:23:2536:2542	5655644	1	True				
ANR	5655857	IncDec	++		5655644	0					
ANR	5655858	Identifier	phtrp		5655644	1					
ANR	5655859	CompoundStatement		37:12:1132:1173	5655644	2					
ANR	5655860	Statement	const	88:12:2559:2563	5655644	0	True				
ANR	5655861	Statement	gx_device_halftone_resource_t	88:18:2565:2593	5655644	1	True				
ANR	5655862	Statement	*	88:48:2595:2595	5655644	2	True				
ANR	5655863	Statement	const	88:49:2596:2600	5655644	3	True				
ANR	5655864	ExpressionStatement	* pphtr = ( * phtrp ) ( )	88:55:2602:2621	5655644	4	True				
ANR	5655865	AssignmentExpression	* pphtr = ( * phtrp ) ( )		5655644	0		=			
ANR	5655866	UnaryOperationExpression	* pphtr		5655644	0					
ANR	5655867	UnaryOperator	*		5655644	0					
ANR	5655868	Identifier	pphtr		5655644	1					
ANR	5655869	CallExpression	( * phtrp ) ( )		5655644	1					
ANR	5655870	Callee	* phtrp		5655644	0					
ANR	5655871	UnaryOperationExpression	* phtrp		5655644	0					
ANR	5655872	UnaryOperator	*		5655644	0					
ANR	5655873	Identifier	phtrp		5655644	1					
ANR	5655874	ArgumentList			5655644	1					
ANR	5655875	IdentifierDeclStatement	const gx_device_halftone_resource_t * phtr ;	89:12:2635:2676	5655644	5	True				
ANR	5655876	IdentifierDecl	* phtr		5655644	0					
ANR	5655877	IdentifierDeclType	const gx_device_halftone_resource_t *		5655644	0					
ANR	5655878	Identifier	phtr		5655644	1					
ANR	5655879	WhileStatement	while ( ( phtr = * pphtr ++ ) != 0 )		5655644	6					
ANR	5655880	Condition	( phtr = * pphtr ++ ) != 0	91:19:2698:2719	5655644	0	True				
ANR	5655881	EqualityExpression	( phtr = * pphtr ++ ) != 0		5655644	0		!=			
ANR	5655882	AssignmentExpression	phtr = * pphtr ++		5655644	0		=			
ANR	5655883	Identifier	phtr		5655644	0					
ANR	5655884	UnaryOperationExpression	* pphtr ++		5655644	1					
ANR	5655885	UnaryOperator	*		5655644	0					
ANR	5655886	PostIncDecOperationExpression	pphtr ++		5655644	1					
ANR	5655887	Identifier	pphtr		5655644	0					
ANR	5655888	IncDec	++		5655644	1					
ANR	5655889	PrimaryExpression	0		5655644	1					
ANR	5655890	CompoundStatement		39:43:1219:1219	5655644	1					
ANR	5655891	IfStatement	"if ( phtr -> Width == porder -> width && phtr -> Height == porder -> height && phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size ) )"		5655644	0					
ANR	5655892	Condition	"phtr -> Width == porder -> width && phtr -> Height == porder -> height && phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"	92:20:2744:3080	5655644	0	True				
ANR	5655893	AndExpression	"phtr -> Width == porder -> width && phtr -> Height == porder -> height && phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		5655644	0		&&			
ANR	5655894	EqualityExpression	phtr -> Width == porder -> width		5655644	0		==			
ANR	5655895	PtrMemberAccess	phtr -> Width		5655644	0					
ANR	5655896	Identifier	phtr		5655644	0					
ANR	5655897	Identifier	Width		5655644	1					
ANR	5655898	PtrMemberAccess	porder -> width		5655644	1					
ANR	5655899	Identifier	porder		5655644	0					
ANR	5655900	Identifier	width		5655644	1					
ANR	5655901	AndExpression	"phtr -> Height == porder -> height && phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		5655644	1		&&			
ANR	5655902	EqualityExpression	phtr -> Height == porder -> height		5655644	0		==			
ANR	5655903	PtrMemberAccess	phtr -> Height		5655644	0					
ANR	5655904	Identifier	phtr		5655644	0					
ANR	5655905	Identifier	Height		5655644	1					
ANR	5655906	PtrMemberAccess	porder -> height		5655644	1					
ANR	5655907	Identifier	porder		5655644	0					
ANR	5655908	Identifier	height		5655644	1					
ANR	5655909	AndExpression	"phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		5655644	1		&&			
ANR	5655910	EqualityExpression	phtr -> elt_size == sizeof ( ushort )		5655644	0		==			
ANR	5655911	PtrMemberAccess	phtr -> elt_size		5655644	0					
ANR	5655912	Identifier	phtr		5655644	0					
ANR	5655913	Identifier	elt_size		5655644	1					
ANR	5655914	SizeofExpression	sizeof ( ushort )		5655644	1					
ANR	5655915	Sizeof	sizeof		5655644	0					
ANR	5655916	SizeofOperand	ushort		5655644	1					
ANR	5655917	AndExpression	"! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		5655644	1		&&			
ANR	5655918	UnaryOperationExpression	"! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) )"		5655644	0					
ANR	5655919	UnaryOperator	!		5655644	0					
ANR	5655920	CallExpression	"memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) )"		5655644	1					
ANR	5655921	Callee	memcmp		5655644	0					
ANR	5655922	Identifier	memcmp		5655644	0					
ANR	5655923	ArgumentList	phtr -> levels		5655644	1					
ANR	5655924	Argument	phtr -> levels		5655644	0					
ANR	5655925	PtrMemberAccess	phtr -> levels		5655644	0					
ANR	5655926	Identifier	phtr		5655644	0					
ANR	5655927	Identifier	levels		5655644	1					
ANR	5655928	Argument	levels		5655644	1					
ANR	5655929	Identifier	levels		5655644	0					
ANR	5655930	Argument	num_levels * sizeof ( * levels )		5655644	2					
ANR	5655931	MultiplicativeExpression	num_levels * sizeof ( * levels )		5655644	0		*			
ANR	5655932	Identifier	num_levels		5655644	0					
ANR	5655933	SizeofExpression	sizeof ( * levels )		5655644	1					
ANR	5655934	Sizeof	sizeof		5655644	0					
ANR	5655935	UnaryOperationExpression	* levels		5655644	1					
ANR	5655936	UnaryOperator	*		5655644	0					
ANR	5655937	Identifier	levels		5655644	1					
ANR	5655938	UnaryOperationExpression	"! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		5655644	1					
ANR	5655939	UnaryOperator	!		5655644	0					
ANR	5655940	CallExpression	"memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		5655644	1					
ANR	5655941	Callee	memcmp		5655644	0					
ANR	5655942	Identifier	memcmp		5655644	0					
ANR	5655943	ArgumentList	phtr -> bit_data		5655644	1					
ANR	5655944	Argument	phtr -> bit_data		5655644	0					
ANR	5655945	PtrMemberAccess	phtr -> bit_data		5655644	0					
ANR	5655946	Identifier	phtr		5655644	0					
ANR	5655947	Identifier	bit_data		5655644	1					
ANR	5655948	Argument	porder -> bit_data		5655644	1					
ANR	5655949	PtrMemberAccess	porder -> bit_data		5655644	0					
ANR	5655950	Identifier	porder		5655644	0					
ANR	5655951	Identifier	bit_data		5655644	1					
ANR	5655952	Argument	size * phtr -> elt_size		5655644	2					
ANR	5655953	MultiplicativeExpression	size * phtr -> elt_size		5655644	0		*			
ANR	5655954	Identifier	size		5655644	0					
ANR	5655955	PtrMemberAccess	phtr -> elt_size		5655644	1					
ANR	5655956	Identifier	phtr		5655644	0					
ANR	5655957	Identifier	elt_size		5655644	1					
ANR	5655958	CompoundStatement		46:22:1601:1601	5655644	1					
ANR	5655959	IfStatement	if ( porder -> data_memory )		5655644	0					
ANR	5655960	Condition	porder -> data_memory	103:24:3331:3349	5655644	0	True				
ANR	5655961	PtrMemberAccess	porder -> data_memory		5655644	0					
ANR	5655962	Identifier	porder		5655644	0					
ANR	5655963	Identifier	data_memory		5655644	1					
ANR	5655964	CompoundStatement		51:45:1849:1849	5655644	1					
ANR	5655965	ExpressionStatement	"gs_free_object ( porder -> data_memory , porder -> bit_data , ""construct_ht_order_short(bit_data)"" )"	104:24:3378:3508	5655644	0	True				
ANR	5655966	CallExpression	"gs_free_object ( porder -> data_memory , porder -> bit_data , ""construct_ht_order_short(bit_data)"" )"		5655644	0					
ANR	5655967	Callee	gs_free_object		5655644	0					
ANR	5655968	Identifier	gs_free_object		5655644	0					
ANR	5655969	ArgumentList	porder -> data_memory		5655644	1					
ANR	5655970	Argument	porder -> data_memory		5655644	0					
ANR	5655971	PtrMemberAccess	porder -> data_memory		5655644	0					
ANR	5655972	Identifier	porder		5655644	0					
ANR	5655973	Identifier	data_memory		5655644	1					
ANR	5655974	Argument	porder -> bit_data		5655644	1					
ANR	5655975	PtrMemberAccess	porder -> bit_data		5655644	0					
ANR	5655976	Identifier	porder		5655644	0					
ANR	5655977	Identifier	bit_data		5655644	1					
ANR	5655978	Argument	"""construct_ht_order_short(bit_data)"""		5655644	2					
ANR	5655979	PrimaryExpression	"""construct_ht_order_short(bit_data)"""		5655644	0					
ANR	5655980	ExpressionStatement	"gs_free_object ( porder -> data_memory , porder -> levels , ""construct_ht_order_short(levels)"" )"	106:24:3534:3660	5655644	1	True				
ANR	5655981	CallExpression	"gs_free_object ( porder -> data_memory , porder -> levels , ""construct_ht_order_short(levels)"" )"		5655644	0					
ANR	5655982	Callee	gs_free_object		5655644	0					
ANR	5655983	Identifier	gs_free_object		5655644	0					
ANR	5655984	ArgumentList	porder -> data_memory		5655644	1					
ANR	5655985	Argument	porder -> data_memory		5655644	0					
ANR	5655986	PtrMemberAccess	porder -> data_memory		5655644	0					
ANR	5655987	Identifier	porder		5655644	0					
ANR	5655988	Identifier	data_memory		5655644	1					
ANR	5655989	Argument	porder -> levels		5655644	1					
ANR	5655990	PtrMemberAccess	porder -> levels		5655644	0					
ANR	5655991	Identifier	porder		5655644	0					
ANR	5655992	Identifier	levels		5655644	1					
ANR	5655993	Argument	"""construct_ht_order_short(levels)"""		5655644	2					
ANR	5655994	PrimaryExpression	"""construct_ht_order_short(levels)"""		5655644	0					
ANR	5655995	ExpressionStatement	porder -> data_memory = 0	109:20:3704:3727	5655644	1	True				
ANR	5655996	AssignmentExpression	porder -> data_memory = 0		5655644	0		=			
ANR	5655997	PtrMemberAccess	porder -> data_memory		5655644	0					
ANR	5655998	Identifier	porder		5655644	0					
ANR	5655999	Identifier	data_memory		5655644	1					
ANR	5656000	PrimaryExpression	0		5655644	1					
ANR	5656001	ExpressionStatement	porder -> levels = ( uint * ) phtr -> levels	110:20:3749:3786	5655644	2	True				
ANR	5656002	AssignmentExpression	porder -> levels = ( uint * ) phtr -> levels		5655644	0		=			
ANR	5656003	PtrMemberAccess	porder -> levels		5655644	0					
ANR	5656004	Identifier	porder		5655644	0					
ANR	5656005	Identifier	levels		5655644	1					
ANR	5656006	CastExpression	( uint * ) phtr -> levels		5655644	1					
ANR	5656007	CastTarget	uint *		5655644	0					
ANR	5656008	PtrMemberAccess	phtr -> levels		5655644	1					
ANR	5656009	Identifier	phtr		5655644	0					
ANR	5656010	Identifier	levels		5655644	1					
ANR	5656011	ExpressionStatement	porder -> bit_data = ( void * ) phtr -> bit_data	111:20:3829:3870	5655644	3	True				
ANR	5656012	AssignmentExpression	porder -> bit_data = ( void * ) phtr -> bit_data		5655644	0		=			
ANR	5656013	PtrMemberAccess	porder -> bit_data		5655644	0					
ANR	5656014	Identifier	porder		5655644	0					
ANR	5656015	Identifier	bit_data		5655644	1					
ANR	5656016	CastExpression	( void * ) phtr -> bit_data		5655644	1					
ANR	5656017	CastTarget	void *		5655644	0					
ANR	5656018	PtrMemberAccess	phtr -> bit_data		5655644	1					
ANR	5656019	Identifier	phtr		5655644	0					
ANR	5656020	Identifier	bit_data		5655644	1					
ANR	5656021	GotoStatement	goto out ;	112:20:3913:3921	5655644	4	True				
ANR	5656022	Identifier	out		5655644	0					
ANR	5656023	Label	out :	117:1:3972:3975	5655644	10	True				
ANR	5656024	Identifier	out		5655644	0					
ANR	5656025	ReturnStatement	return 0 ;	118:4:3981:3989	5655644	11	True				
ANR	5656026	PrimaryExpression	0		5655644	0					
ANR	5656027	ReturnType	static int		5655644	1					
ANR	5656028	Identifier	construct_ht_order_short		5655644	2					
ANR	5656029	ParameterList	"gx_ht_order * porder , const byte * thresholds"		5655644	3					
ANR	5656030	Parameter	gx_ht_order * porder	52:25:1457:1475	5655644	0	True				
ANR	5656031	ParameterType	gx_ht_order *		5655644	0					
ANR	5656032	Identifier	porder		5655644	1					
ANR	5656033	Parameter	const byte * thresholds	52:46:1478:1499	5655644	1	True				
ANR	5656034	ParameterType	const byte *		5655644	0					
ANR	5656035	Identifier	thresholds		5655644	1					
ANR	5656036	CFGEntryNode	ENTRY		5655644		True				
ANR	5656037	CFGExitNode	EXIT		5655644		True				
ANR	5656038	Symbol	phtr		5655644						
ANR	5656039	Symbol	porder -> num_levels		5655644						
ANR	5656040	Symbol	* thresholds		5655644						
ANR	5656041	Symbol	phtr -> bit_data		5655644						
ANR	5656042	Symbol	porder -> width		5655644						
ANR	5656043	Symbol	porder -> num_bits		5655644						
ANR	5656044	Symbol	* phtr		5655644						
ANR	5656045	Symbol	* pphtr		5655644						
ANR	5656046	Symbol	porder -> levels		5655644						
ANR	5656047	Symbol	phtr -> Height		5655644						
ANR	5656048	Symbol	porder -> bit_data		5655644						
ANR	5656049	Symbol	memcmp		5655644						
ANR	5656050	Symbol	value		5655644						
ANR	5656051	Symbol	phtr -> elt_size		5655644						
ANR	5656052	Symbol	* bits		5655644						
ANR	5656053	Symbol	padding		5655644						
ANR	5656054	Symbol	phtrp		5655644						
ANR	5656055	Symbol	max		5655644						
ANR	5656056	Symbol	phtr -> levels		5655644						
ANR	5656057	Symbol	porder -> height		5655644						
ANR	5656058	Symbol	bits		5655644						
ANR	5656059	Symbol	i		5655644						
ANR	5656060	Symbol	porder		5655644						
ANR	5656061	Symbol	* levels		5655644						
ANR	5656062	Symbol	bitmap_raster		5655644						
ANR	5656063	Symbol	phtr -> Width		5655644						
ANR	5656064	Symbol	thresholds		5655644						
ANR	5656065	Symbol	* i		5655644						
ANR	5656066	Symbol	size		5655644						
ANR	5656067	Symbol	* value		5655644						
ANR	5656068	Symbol	gx_device_halftone_list		5655644						
ANR	5656069	Symbol	* pphtr ++		5655644						
ANR	5656070	Symbol	width		5655644						
ANR	5656071	Symbol	* phtrp		5655644						
ANR	5656072	Symbol	pphtr		5655644						
ANR	5656073	Symbol	* porder		5655644						
ANR	5656074	Symbol	levels		5655644						
ANR	5656075	Symbol	porder -> data_memory		5655644						
ANR	5656076	Symbol	num_levels		5655644						
ANR	5656077	Function	ht_bit_index_default	122:0:4061:4470							
ANR	5656078	FunctionDef	"ht_bit_index_default (const gx_ht_order * porder , uint index , gs_int_point * ppt)"		5656077	0					
ANR	5656079	CompoundStatement		124:0:4151:4470	5656077	0					
ANR	5656080	IdentifierDeclStatement	const gx_ht_bit * phtb = & ( ( const gx_ht_bit * ) porder -> bit_data ) [ index ] ;	125:4:4157:4226	5656077	0	True				
ANR	5656081	IdentifierDecl	* phtb = & ( ( const gx_ht_bit * ) porder -> bit_data ) [ index ]		5656077	0					
ANR	5656082	IdentifierDeclType	const gx_ht_bit *		5656077	0					
ANR	5656083	Identifier	phtb		5656077	1					
ANR	5656084	AssignmentExpression	* phtb = & ( ( const gx_ht_bit * ) porder -> bit_data ) [ index ]		5656077	2		=			
ANR	5656085	Identifier	phtb		5656077	0					
ANR	5656086	UnaryOperationExpression	& ( ( const gx_ht_bit * ) porder -> bit_data ) [ index ]		5656077	1					
ANR	5656087	UnaryOperator	&		5656077	0					
ANR	5656088	ArrayIndexing	( ( const gx_ht_bit * ) porder -> bit_data ) [ index ]		5656077	1					
ANR	5656089	CastExpression	( const gx_ht_bit * ) porder -> bit_data		5656077	0					
ANR	5656090	CastTarget	const gx_ht_bit *		5656077	0					
ANR	5656091	PtrMemberAccess	porder -> bit_data		5656077	1					
ANR	5656092	Identifier	porder		5656077	0					
ANR	5656093	Identifier	bit_data		5656077	1					
ANR	5656094	Identifier	index		5656077	1					
ANR	5656095	IdentifierDeclStatement	uint offset = phtb -> offset ;	126:4:4232:4258	5656077	1	True				
ANR	5656096	IdentifierDecl	offset = phtb -> offset		5656077	0					
ANR	5656097	IdentifierDeclType	uint		5656077	0					
ANR	5656098	Identifier	offset		5656077	1					
ANR	5656099	AssignmentExpression	offset = phtb -> offset		5656077	2		=			
ANR	5656100	Identifier	offset		5656077	0					
ANR	5656101	PtrMemberAccess	phtb -> offset		5656077	1					
ANR	5656102	Identifier	phtb		5656077	0					
ANR	5656103	Identifier	offset		5656077	1					
ANR	5656104	IdentifierDeclStatement	int bit = 0 ;	127:4:4264:4275	5656077	2	True				
ANR	5656105	IdentifierDecl	bit = 0		5656077	0					
ANR	5656106	IdentifierDeclType	int		5656077	0					
ANR	5656107	Identifier	bit		5656077	1					
ANR	5656108	AssignmentExpression	bit = 0		5656077	2		=			
ANR	5656109	Identifier	bit		5656077	0					
ANR	5656110	PrimaryExpression	0		5656077	1					
ANR	5656111	WhileStatement	while ( ! ( ( ( const byte * ) & phtb -> mask ) [ bit >> 3 ] & ( 0x80 >> ( bit & 7 ) ) ) )		5656077	3					
ANR	5656112	Condition	! ( ( ( const byte * ) & phtb -> mask ) [ bit >> 3 ] & ( 0x80 >> ( bit & 7 ) ) )	129:11:4289:4350	5656077	0	True				
ANR	5656113	UnaryOperationExpression	! ( ( ( const byte * ) & phtb -> mask ) [ bit >> 3 ] & ( 0x80 >> ( bit & 7 ) ) )		5656077	0					
ANR	5656114	UnaryOperator	!		5656077	0					
ANR	5656115	BitAndExpression	( ( const byte * ) & phtb -> mask ) [ bit >> 3 ] & ( 0x80 >> ( bit & 7 ) )		5656077	1		&			
ANR	5656116	ArrayIndexing	( ( const byte * ) & phtb -> mask ) [ bit >> 3 ]		5656077	0					
ANR	5656117	CastExpression	( const byte * ) & phtb -> mask		5656077	0					
ANR	5656118	CastTarget	const byte *		5656077	0					
ANR	5656119	UnaryOperationExpression	& phtb -> mask		5656077	1					
ANR	5656120	UnaryOperator	&		5656077	0					
ANR	5656121	PtrMemberAccess	phtb -> mask		5656077	1					
ANR	5656122	Identifier	phtb		5656077	0					
ANR	5656123	Identifier	mask		5656077	1					
ANR	5656124	ShiftExpression	bit >> 3		5656077	1		>>			
ANR	5656125	Identifier	bit		5656077	0					
ANR	5656126	PrimaryExpression	3		5656077	1					
ANR	5656127	ShiftExpression	0x80 >> ( bit & 7 )		5656077	1		>>			
ANR	5656128	PrimaryExpression	0x80		5656077	0					
ANR	5656129	BitAndExpression	bit & 7		5656077	1		&			
ANR	5656130	Identifier	bit		5656077	0					
ANR	5656131	PrimaryExpression	7		5656077	1					
ANR	5656132	ExpressionStatement	++ bit	130:8:4361:4366	5656077	1	True				
ANR	5656133	UnaryExpression	++ bit		5656077	0					
ANR	5656134	IncDec	++		5656077	0					
ANR	5656135	Identifier	bit		5656077	1					
ANR	5656136	ExpressionStatement	ppt -> x = ( offset % porder -> raster * 8 ) + bit	131:4:4372:4416	5656077	4	True				
ANR	5656137	AssignmentExpression	ppt -> x = ( offset % porder -> raster * 8 ) + bit		5656077	0		=			
ANR	5656138	PtrMemberAccess	ppt -> x		5656077	0					
ANR	5656139	Identifier	ppt		5656077	0					
ANR	5656140	Identifier	x		5656077	1					
ANR	5656141	AdditiveExpression	( offset % porder -> raster * 8 ) + bit		5656077	1		+			
ANR	5656142	MultiplicativeExpression	offset % porder -> raster * 8		5656077	0		%			
ANR	5656143	Identifier	offset		5656077	0					
ANR	5656144	MultiplicativeExpression	porder -> raster * 8		5656077	1		*			
ANR	5656145	PtrMemberAccess	porder -> raster		5656077	0					
ANR	5656146	Identifier	porder		5656077	0					
ANR	5656147	Identifier	raster		5656077	1					
ANR	5656148	PrimaryExpression	8		5656077	1					
ANR	5656149	Identifier	bit		5656077	1					
ANR	5656150	ExpressionStatement	ppt -> y = offset / porder -> raster	132:4:4422:4454	5656077	5	True				
ANR	5656151	AssignmentExpression	ppt -> y = offset / porder -> raster		5656077	0		=			
ANR	5656152	PtrMemberAccess	ppt -> y		5656077	0					
ANR	5656153	Identifier	ppt		5656077	0					
ANR	5656154	Identifier	y		5656077	1					
ANR	5656155	MultiplicativeExpression	offset / porder -> raster		5656077	1		/			
ANR	5656156	Identifier	offset		5656077	0					
ANR	5656157	PtrMemberAccess	porder -> raster		5656077	1					
ANR	5656158	Identifier	porder		5656077	0					
ANR	5656159	Identifier	raster		5656077	1					
ANR	5656160	ReturnStatement	return 0 ;	133:4:4460:4468	5656077	6	True				
ANR	5656161	PrimaryExpression	0		5656077	0					
ANR	5656162	ReturnType	static int		5656077	1					
ANR	5656163	Identifier	ht_bit_index_default		5656077	2					
ANR	5656164	ParameterList	"const gx_ht_order * porder , uint index , gs_int_point * ppt"		5656077	3					
ANR	5656165	Parameter	const gx_ht_order * porder	123:21:4093:4117	5656077	0	True				
ANR	5656166	ParameterType	const gx_ht_order *		5656077	0					
ANR	5656167	Identifier	porder		5656077	1					
ANR	5656168	Parameter	uint index	123:48:4120:4129	5656077	1	True				
ANR	5656169	ParameterType	uint		5656077	0					
ANR	5656170	Identifier	index		5656077	1					
ANR	5656171	Parameter	gs_int_point * ppt	123:60:4132:4148	5656077	2	True				
ANR	5656172	ParameterType	gs_int_point *		5656077	0					
ANR	5656173	Identifier	ppt		5656077	1					
ANR	5656174	CFGEntryNode	ENTRY		5656077		True				
ANR	5656175	CFGExitNode	EXIT		5656077		True				
ANR	5656176	Symbol	phtb -> offset		5656077						
ANR	5656177	Symbol	offset		5656077						
ANR	5656178	Symbol	porder -> raster		5656077						
ANR	5656179	Symbol	* bit		5656077						
ANR	5656180	Symbol	index		5656077						
ANR	5656181	Symbol	bit		5656077						
ANR	5656182	Symbol	porder		5656077						
ANR	5656183	Symbol	phtb		5656077						
ANR	5656184	Symbol	porder -> bit_data		5656077						
ANR	5656185	Symbol	ppt		5656077						
ANR	5656186	Symbol	phtb -> mask		5656077						
ANR	5656187	Symbol	& phtb -> mask		5656077						
ANR	5656188	Symbol	* porder		5656077						
ANR	5656189	Symbol	ppt -> x		5656077						
ANR	5656190	Symbol	* phtb		5656077						
ANR	5656191	Symbol	* ppt		5656077						
ANR	5656192	Symbol	ppt -> y		5656077						
ANR	5656193	Function	ht_bit_index_short	137:0:4537:4822							
ANR	5656194	FunctionDef	"ht_bit_index_short (const gx_ht_order * porder , uint index , gs_int_point * ppt)"		5656193	0					
ANR	5656195	CompoundStatement		139:0:4625:4822	5656193	0					
ANR	5656196	IdentifierDeclStatement	uint bit_index = ( ( const ushort * ) porder -> bit_data ) [ index ] ;	140:4:4631:4689	5656193	0	True				
ANR	5656197	IdentifierDecl	bit_index = ( ( const ushort * ) porder -> bit_data ) [ index ]		5656193	0					
ANR	5656198	IdentifierDeclType	uint		5656193	0					
ANR	5656199	Identifier	bit_index		5656193	1					
ANR	5656200	AssignmentExpression	bit_index = ( ( const ushort * ) porder -> bit_data ) [ index ]		5656193	2		=			
ANR	5656201	Identifier	bit_index		5656193	0					
ANR	5656202	ArrayIndexing	( ( const ushort * ) porder -> bit_data ) [ index ]		5656193	1					
ANR	5656203	CastExpression	( const ushort * ) porder -> bit_data		5656193	0					
ANR	5656204	CastTarget	const ushort *		5656193	0					
ANR	5656205	PtrMemberAccess	porder -> bit_data		5656193	1					
ANR	5656206	Identifier	porder		5656193	0					
ANR	5656207	Identifier	bit_data		5656193	1					
ANR	5656208	Identifier	index		5656193	1					
ANR	5656209	IdentifierDeclStatement	uint bit_raster = porder -> raster * 8 ;	141:4:4695:4731	5656193	1	True				
ANR	5656210	IdentifierDecl	bit_raster = porder -> raster * 8		5656193	0					
ANR	5656211	IdentifierDeclType	uint		5656193	0					
ANR	5656212	Identifier	bit_raster		5656193	1					
ANR	5656213	AssignmentExpression	bit_raster = porder -> raster * 8		5656193	2		=			
ANR	5656214	Identifier	bit_raster		5656193	0					
ANR	5656215	MultiplicativeExpression	porder -> raster * 8		5656193	1		*			
ANR	5656216	PtrMemberAccess	porder -> raster		5656193	0					
ANR	5656217	Identifier	porder		5656193	0					
ANR	5656218	Identifier	raster		5656193	1					
ANR	5656219	PrimaryExpression	8		5656193	1					
ANR	5656220	ExpressionStatement	ppt -> x = bit_index % bit_raster	143:4:4738:4769	5656193	2	True				
ANR	5656221	AssignmentExpression	ppt -> x = bit_index % bit_raster		5656193	0		=			
ANR	5656222	PtrMemberAccess	ppt -> x		5656193	0					
ANR	5656223	Identifier	ppt		5656193	0					
ANR	5656224	Identifier	x		5656193	1					
ANR	5656225	MultiplicativeExpression	bit_index % bit_raster		5656193	1		%			
ANR	5656226	Identifier	bit_index		5656193	0					
ANR	5656227	Identifier	bit_raster		5656193	1					
ANR	5656228	ExpressionStatement	ppt -> y = bit_index / bit_raster	144:4:4775:4806	5656193	3	True				
ANR	5656229	AssignmentExpression	ppt -> y = bit_index / bit_raster		5656193	0		=			
ANR	5656230	PtrMemberAccess	ppt -> y		5656193	0					
ANR	5656231	Identifier	ppt		5656193	0					
ANR	5656232	Identifier	y		5656193	1					
ANR	5656233	MultiplicativeExpression	bit_index / bit_raster		5656193	1		/			
ANR	5656234	Identifier	bit_index		5656193	0					
ANR	5656235	Identifier	bit_raster		5656193	1					
ANR	5656236	ReturnStatement	return 0 ;	145:4:4812:4820	5656193	4	True				
ANR	5656237	PrimaryExpression	0		5656193	0					
ANR	5656238	ReturnType	static int		5656193	1					
ANR	5656239	Identifier	ht_bit_index_short		5656193	2					
ANR	5656240	ParameterList	"const gx_ht_order * porder , uint index , gs_int_point * ppt"		5656193	3					
ANR	5656241	Parameter	const gx_ht_order * porder	138:19:4567:4591	5656193	0	True				
ANR	5656242	ParameterType	const gx_ht_order *		5656193	0					
ANR	5656243	Identifier	porder		5656193	1					
ANR	5656244	Parameter	uint index	138:46:4594:4603	5656193	1	True				
ANR	5656245	ParameterType	uint		5656193	0					
ANR	5656246	Identifier	index		5656193	1					
ANR	5656247	Parameter	gs_int_point * ppt	138:58:4606:4622	5656193	2	True				
ANR	5656248	ParameterType	gs_int_point *		5656193	0					
ANR	5656249	Identifier	ppt		5656193	1					
ANR	5656250	CFGEntryNode	ENTRY		5656193		True				
ANR	5656251	CFGExitNode	EXIT		5656193		True				
ANR	5656252	Symbol	porder -> raster		5656193						
ANR	5656253	Symbol	* index		5656193						
ANR	5656254	Symbol	index		5656193						
ANR	5656255	Symbol	* * porder		5656193						
ANR	5656256	Symbol	* porder -> bit_data		5656193						
ANR	5656257	Symbol	porder		5656193						
ANR	5656258	Symbol	porder -> bit_data		5656193						
ANR	5656259	Symbol	bit_raster		5656193						
ANR	5656260	Symbol	ppt		5656193						
ANR	5656261	Symbol	bit_index		5656193						
ANR	5656262	Symbol	* porder		5656193						
ANR	5656263	Symbol	ppt -> x		5656193						
ANR	5656264	Symbol	* ppt		5656193						
ANR	5656265	Symbol	ppt -> y		5656193						
ANR	5656266	Function	render_ht_default	149:0:4894:6721							
ANR	5656267	FunctionDef	"render_ht_default (gx_ht_tile * pbt , int level , const gx_ht_order * porder)"		5656266	0					
ANR	5656268	CompoundStatement		151:0:4978:6721	5656266	0					
ANR	5656269	IdentifierDeclStatement	int old_level = pbt -> level ;	152:4:4984:5010	5656266	0	True				
ANR	5656270	IdentifierDecl	old_level = pbt -> level		5656266	0					
ANR	5656271	IdentifierDeclType	int		5656266	0					
ANR	5656272	Identifier	old_level		5656266	1					
ANR	5656273	AssignmentExpression	old_level = pbt -> level		5656266	2		=			
ANR	5656274	Identifier	old_level		5656266	0					
ANR	5656275	PtrMemberAccess	pbt -> level		5656266	1					
ANR	5656276	Identifier	pbt		5656266	0					
ANR	5656277	Identifier	level		5656266	1					
ANR	5656278	Statement	register	153:4:5016:5023	5656266	1	True				
ANR	5656279	IdentifierDeclStatement	const gx_ht_bit * p = ( const gx_ht_bit * ) porder -> bit_data + old_level ;	153:13:5025:5101	5656266	2	True				
ANR	5656280	IdentifierDecl	* p = ( const gx_ht_bit * ) porder -> bit_data + old_level		5656266	0					
ANR	5656281	IdentifierDeclType	const gx_ht_bit *		5656266	0					
ANR	5656282	Identifier	p		5656266	1					
ANR	5656283	AssignmentExpression	* p = ( const gx_ht_bit * ) porder -> bit_data + old_level		5656266	2		=			
ANR	5656284	Identifier	p		5656266	0					
ANR	5656285	AdditiveExpression	( const gx_ht_bit * ) porder -> bit_data + old_level		5656266	1		+			
ANR	5656286	CastExpression	( const gx_ht_bit * ) porder -> bit_data		5656266	0					
ANR	5656287	CastTarget	const gx_ht_bit *		5656266	0					
ANR	5656288	PtrMemberAccess	porder -> bit_data		5656266	1					
ANR	5656289	Identifier	porder		5656266	0					
ANR	5656290	Identifier	bit_data		5656266	1					
ANR	5656291	Identifier	old_level		5656266	1					
ANR	5656292	Statement	register	155:4:5107:5114	5656266	3	True				
ANR	5656293	IdentifierDeclStatement	byte * data = pbt -> tiles . data ;	155:13:5116:5144	5656266	4	True				
ANR	5656294	IdentifierDecl	* data = pbt -> tiles . data		5656266	0					
ANR	5656295	IdentifierDeclType	byte *		5656266	0					
ANR	5656296	Identifier	data		5656266	1					
ANR	5656297	AssignmentExpression	* data = pbt -> tiles . data		5656266	2		=			
ANR	5656298	Identifier	data		5656266	0					
ANR	5656299	MemberAccess	pbt -> tiles . data		5656266	1					
ANR	5656300	PtrMemberAccess	pbt -> tiles		5656266	0					
ANR	5656301	Identifier	pbt		5656266	0					
ANR	5656302	Identifier	tiles		5656266	1					
ANR	5656303	Identifier	data		5656266	1					
ANR	5656304	Statement	define	163:1:5446:5451	5656266	5	True				
ANR	5656305	Statement	INVERT_DATA	163:8:5453:5463	5656266	6	True				
ANR	5656306	Statement	(	163:19:5464:5464	5656266	7	True				
ANR	5656307	Statement	i	163:20:5465:5465	5656266	8	True				
ANR	5656308	Statement	)	163:21:5466:5466	5656266	9	True				
ANR	5656309	IdentifierDeclStatement	BEGIN ht_mask_t * dp = ( ht_mask_t * ) & data [ p [ i ] . offset ] ;	164:5:5474:5535	5656266	10	True				
ANR	5656310	IdentifierDecl	* dp = ( ht_mask_t * ) & data [ p [ i ] . offset ]		5656266	0					
ANR	5656311	IdentifierDeclType	BEGIN ht_mask_t *		5656266	0					
ANR	5656312	Identifier	dp		5656266	1					
ANR	5656313	AssignmentExpression	* dp = ( ht_mask_t * ) & data [ p [ i ] . offset ]		5656266	2		=			
ANR	5656314	Identifier	dp		5656266	0					
ANR	5656315	CastExpression	( ht_mask_t * ) & data [ p [ i ] . offset ]		5656266	1					
ANR	5656316	CastTarget	ht_mask_t *		5656266	0					
ANR	5656317	UnaryOperationExpression	& data [ p [ i ] . offset ]		5656266	1					
ANR	5656318	UnaryOperator	&		5656266	0					
ANR	5656319	ArrayIndexing	data [ p [ i ] . offset ]		5656266	1					
ANR	5656320	Identifier	data		5656266	0					
ANR	5656321	MemberAccess	p [ i ] . offset		5656266	1					
ANR	5656322	ArrayIndexing	p [ i ]		5656266	0					
ANR	5656323	Identifier	p		5656266	0					
ANR	5656324	Identifier	i		5656266	1					
ANR	5656325	Identifier	offset		5656266	1					
ANR	5656326	ExpressionStatement	* dp ^= p [ i ] . mask	166:7:5545:5561	5656266	11	True				
ANR	5656327	AssignmentExpression	* dp ^= p [ i ] . mask		5656266	0		^=			
ANR	5656328	UnaryOperationExpression	* dp		5656266	0					
ANR	5656329	UnaryOperator	*		5656266	0					
ANR	5656330	Identifier	dp		5656266	1					
ANR	5656331	MemberAccess	p [ i ] . mask		5656266	1					
ANR	5656332	ArrayIndexing	p [ i ]		5656266	0					
ANR	5656333	Identifier	p		5656266	0					
ANR	5656334	Identifier	i		5656266	1					
ANR	5656335	Identifier	mask		5656266	1					
ANR	5656336	Statement	END	167:5:5569:5571	5656266	12	True				
ANR	5656337	Statement	define	169:3:5589:5594	5656266	13	True				
ANR	5656338	Statement	INVERT	169:10:5596:5601	5656266	14	True				
ANR	5656339	Statement	(	169:16:5602:5602	5656266	15	True				
ANR	5656340	Statement	i	169:17:5603:5603	5656266	16	True				
ANR	5656341	Statement	)	169:18:5604:5604	5656266	17	True				
ANR	5656342	IdentifierDeclStatement	"BEGIN if_debug3 ( 'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask ) ;"	170:5:5612:5796	5656266	18	True				
ANR	5656343	IdentifierDecl	"if_debug3 ( 'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask )"		5656266	0					
ANR	5656344	IdentifierDeclType	BEGIN		5656266	0					
ANR	5656345	Identifier	if_debug3		5656266	1					
ANR	5656346	Expression	"'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask"		5656266	2					
ANR	5656347	PrimaryExpression	'H'		5656266	0					
ANR	5656348	Expression	"""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask"		5656266	1					
ANR	5656349	PrimaryExpression	"""[H]invert level=%d offset=%u mask=0x%x\\n"""		5656266	0					
ANR	5656350	Expression	"( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask"		5656266	1					
ANR	5656351	CastExpression	( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data )		5656266	0					
ANR	5656352	CastTarget	int		5656266	0					
ANR	5656353	AdditiveExpression	p + i - ( const gx_ht_bit * ) porder -> bit_data		5656266	1		+			
ANR	5656354	Identifier	p		5656266	0					
ANR	5656355	AdditiveExpression	i - ( const gx_ht_bit * ) porder -> bit_data		5656266	1		-			
ANR	5656356	Identifier	i		5656266	0					
ANR	5656357	CastExpression	( const gx_ht_bit * ) porder -> bit_data		5656266	1					
ANR	5656358	CastTarget	const gx_ht_bit *		5656266	0					
ANR	5656359	PtrMemberAccess	porder -> bit_data		5656266	1					
ANR	5656360	Identifier	porder		5656266	0					
ANR	5656361	Identifier	bit_data		5656266	1					
ANR	5656362	Expression	"p [ i ] . offset , p [ i ] . mask"		5656266	1					
ANR	5656363	MemberAccess	p [ i ] . offset		5656266	0					
ANR	5656364	ArrayIndexing	p [ i ]		5656266	0					
ANR	5656365	Identifier	p		5656266	0					
ANR	5656366	Identifier	i		5656266	1					
ANR	5656367	Identifier	offset		5656266	1					
ANR	5656368	MemberAccess	p [ i ] . mask		5656266	1					
ANR	5656369	ArrayIndexing	p [ i ]		5656266	0					
ANR	5656370	Identifier	p		5656266	0					
ANR	5656371	Identifier	i		5656266	1					
ANR	5656372	Identifier	mask		5656266	1					
ANR	5656373	ExpressionStatement	INVERT_DATA ( i )	174:7:5806:5820	5656266	19	True				
ANR	5656374	CallExpression	INVERT_DATA ( i )		5656266	0					
ANR	5656375	Callee	INVERT_DATA		5656266	0					
ANR	5656376	Identifier	INVERT_DATA		5656266	0					
ANR	5656377	ArgumentList	i		5656266	1					
ANR	5656378	Argument	i		5656266	0					
ANR	5656379	Identifier	i		5656266	0					
ANR	5656380	Statement	END	175:5:5828:5830	5656266	20	True				
ANR	5656381	Label	sw :	179:2:5882:5884	5656266	21	True				
ANR	5656382	Identifier	sw		5656266	0					
ANR	5656383	SwitchStatement	switch ( level - old_level )		5656266	22					
ANR	5656384	Condition	level - old_level	179:13:5893:5909	5656266	0	True				
ANR	5656385	AdditiveExpression	level - old_level		5656266	0		-			
ANR	5656386	Identifier	level		5656266	0					
ANR	5656387	Identifier	old_level		5656266	1					
ANR	5656388	CompoundStatement		29:32:933:933	5656266	1					
ANR	5656389	Label	default :	180:8:5922:5929	5656266	0	True				
ANR	5656390	Identifier	default		5656266	0					
ANR	5656391	IfStatement	if ( level > old_level )		5656266	1					
ANR	5656392	Condition	level > old_level	181:16:5947:5963	5656266	0	True				
ANR	5656393	RelationalExpression	level > old_level		5656266	0		>			
ANR	5656394	Identifier	level		5656266	0					
ANR	5656395	Identifier	old_level		5656266	1					
ANR	5656396	CompoundStatement		31:35:987:987	5656266	1					
ANR	5656397	ExpressionStatement	INVERT ( 0 )	182:16:5984:5993	5656266	0	True				
ANR	5656398	CallExpression	INVERT ( 0 )		5656266	0					
ANR	5656399	Callee	INVERT		5656266	0					
ANR	5656400	Identifier	INVERT		5656266	0					
ANR	5656401	ArgumentList	0		5656266	1					
ANR	5656402	Argument	0		5656266	0					
ANR	5656403	PrimaryExpression	0		5656266	0					
ANR	5656404	ExpressionStatement	INVERT ( 1 )	182:27:5995:6004	5656266	1	True				
ANR	5656405	CallExpression	INVERT ( 1 )		5656266	0					
ANR	5656406	Callee	INVERT		5656266	0					
ANR	5656407	Identifier	INVERT		5656266	0					
ANR	5656408	ArgumentList	1		5656266	1					
ANR	5656409	Argument	1		5656266	0					
ANR	5656410	PrimaryExpression	1		5656266	0					
ANR	5656411	ExpressionStatement	INVERT ( 2 )	182:38:6006:6015	5656266	2	True				
ANR	5656412	CallExpression	INVERT ( 2 )		5656266	0					
ANR	5656413	Callee	INVERT		5656266	0					
ANR	5656414	Identifier	INVERT		5656266	0					
ANR	5656415	ArgumentList	2		5656266	1					
ANR	5656416	Argument	2		5656266	0					
ANR	5656417	PrimaryExpression	2		5656266	0					
ANR	5656418	ExpressionStatement	INVERT ( 3 )	182:49:6017:6026	5656266	3	True				
ANR	5656419	CallExpression	INVERT ( 3 )		5656266	0					
ANR	5656420	Callee	INVERT		5656266	0					
ANR	5656421	Identifier	INVERT		5656266	0					
ANR	5656422	ArgumentList	3		5656266	1					
ANR	5656423	Argument	3		5656266	0					
ANR	5656424	PrimaryExpression	3		5656266	0					
ANR	5656425	ExpressionStatement	p += 4	183:16:6044:6050	5656266	4	True				
ANR	5656426	AssignmentExpression	p += 4		5656266	0		+=			
ANR	5656427	Identifier	p		5656266	0					
ANR	5656428	PrimaryExpression	4		5656266	1					
ANR	5656429	ExpressionStatement	old_level += 4	183:24:6052:6066	5656266	5	True				
ANR	5656430	AssignmentExpression	old_level += 4		5656266	0		+=			
ANR	5656431	Identifier	old_level		5656266	0					
ANR	5656432	PrimaryExpression	4		5656266	1					
ANR	5656433	ElseStatement	else		5656266	0					
ANR	5656434	CompoundStatement		34:19:1108:1108	5656266	0					
ANR	5656435	ExpressionStatement	INVERT ( - 1 )	185:16:6105:6115	5656266	0	True				
ANR	5656436	CallExpression	INVERT ( - 1 )		5656266	0					
ANR	5656437	Callee	INVERT		5656266	0					
ANR	5656438	Identifier	INVERT		5656266	0					
ANR	5656439	ArgumentList	- 1		5656266	1					
ANR	5656440	Argument	- 1		5656266	0					
ANR	5656441	UnaryOperationExpression	- 1		5656266	0					
ANR	5656442	UnaryOperator	-		5656266	0					
ANR	5656443	PrimaryExpression	1		5656266	1					
ANR	5656444	ExpressionStatement	INVERT ( - 2 )	185:28:6117:6127	5656266	1	True				
ANR	5656445	CallExpression	INVERT ( - 2 )		5656266	0					
ANR	5656446	Callee	INVERT		5656266	0					
ANR	5656447	Identifier	INVERT		5656266	0					
ANR	5656448	ArgumentList	- 2		5656266	1					
ANR	5656449	Argument	- 2		5656266	0					
ANR	5656450	UnaryOperationExpression	- 2		5656266	0					
ANR	5656451	UnaryOperator	-		5656266	0					
ANR	5656452	PrimaryExpression	2		5656266	1					
ANR	5656453	ExpressionStatement	INVERT ( - 3 )	185:40:6129:6139	5656266	2	True				
ANR	5656454	CallExpression	INVERT ( - 3 )		5656266	0					
ANR	5656455	Callee	INVERT		5656266	0					
ANR	5656456	Identifier	INVERT		5656266	0					
ANR	5656457	ArgumentList	- 3		5656266	1					
ANR	5656458	Argument	- 3		5656266	0					
ANR	5656459	UnaryOperationExpression	- 3		5656266	0					
ANR	5656460	UnaryOperator	-		5656266	0					
ANR	5656461	PrimaryExpression	3		5656266	1					
ANR	5656462	ExpressionStatement	INVERT ( - 4 )	185:52:6141:6151	5656266	3	True				
ANR	5656463	CallExpression	INVERT ( - 4 )		5656266	0					
ANR	5656464	Callee	INVERT		5656266	0					
ANR	5656465	Identifier	INVERT		5656266	0					
ANR	5656466	ArgumentList	- 4		5656266	1					
ANR	5656467	Argument	- 4		5656266	0					
ANR	5656468	UnaryOperationExpression	- 4		5656266	0					
ANR	5656469	UnaryOperator	-		5656266	0					
ANR	5656470	PrimaryExpression	4		5656266	1					
ANR	5656471	ExpressionStatement	p -= 4	186:16:6169:6175	5656266	4	True				
ANR	5656472	AssignmentExpression	p -= 4		5656266	0		-=			
ANR	5656473	Identifier	p		5656266	0					
ANR	5656474	PrimaryExpression	4		5656266	1					
ANR	5656475	ExpressionStatement	old_level -= 4	186:24:6177:6191	5656266	5	True				
ANR	5656476	AssignmentExpression	old_level -= 4		5656266	0		-=			
ANR	5656477	Identifier	old_level		5656266	0					
ANR	5656478	PrimaryExpression	4		5656266	1					
ANR	5656479	GotoStatement	goto sw ;	188:12:6219:6226	5656266	2	True				
ANR	5656480	Identifier	sw		5656266	0					
ANR	5656481	Label	case 7 :	189:8:6236:6242	5656266	3	True				
ANR	5656482	ExpressionStatement	INVERT ( 6 )	189:16:6244:6253	5656266	4	True				
ANR	5656483	CallExpression	INVERT ( 6 )		5656266	0					
ANR	5656484	Callee	INVERT		5656266	0					
ANR	5656485	Identifier	INVERT		5656266	0					
ANR	5656486	ArgumentList	6		5656266	1					
ANR	5656487	Argument	6		5656266	0					
ANR	5656488	PrimaryExpression	6		5656266	0					
ANR	5656489	Label	case 6 :	190:8:6263:6269	5656266	5	True				
ANR	5656490	ExpressionStatement	INVERT ( 5 )	190:16:6271:6280	5656266	6	True				
ANR	5656491	CallExpression	INVERT ( 5 )		5656266	0					
ANR	5656492	Callee	INVERT		5656266	0					
ANR	5656493	Identifier	INVERT		5656266	0					
ANR	5656494	ArgumentList	5		5656266	1					
ANR	5656495	Argument	5		5656266	0					
ANR	5656496	PrimaryExpression	5		5656266	0					
ANR	5656497	Label	case 5 :	191:8:6290:6296	5656266	7	True				
ANR	5656498	ExpressionStatement	INVERT ( 4 )	191:16:6298:6307	5656266	8	True				
ANR	5656499	CallExpression	INVERT ( 4 )		5656266	0					
ANR	5656500	Callee	INVERT		5656266	0					
ANR	5656501	Identifier	INVERT		5656266	0					
ANR	5656502	ArgumentList	4		5656266	1					
ANR	5656503	Argument	4		5656266	0					
ANR	5656504	PrimaryExpression	4		5656266	0					
ANR	5656505	Label	case 4 :	192:8:6317:6323	5656266	9	True				
ANR	5656506	ExpressionStatement	INVERT ( 3 )	192:16:6325:6334	5656266	10	True				
ANR	5656507	CallExpression	INVERT ( 3 )		5656266	0					
ANR	5656508	Callee	INVERT		5656266	0					
ANR	5656509	Identifier	INVERT		5656266	0					
ANR	5656510	ArgumentList	3		5656266	1					
ANR	5656511	Argument	3		5656266	0					
ANR	5656512	PrimaryExpression	3		5656266	0					
ANR	5656513	Label	case 3 :	193:8:6344:6350	5656266	11	True				
ANR	5656514	ExpressionStatement	INVERT ( 2 )	193:16:6352:6361	5656266	12	True				
ANR	5656515	CallExpression	INVERT ( 2 )		5656266	0					
ANR	5656516	Callee	INVERT		5656266	0					
ANR	5656517	Identifier	INVERT		5656266	0					
ANR	5656518	ArgumentList	2		5656266	1					
ANR	5656519	Argument	2		5656266	0					
ANR	5656520	PrimaryExpression	2		5656266	0					
ANR	5656521	Label	case 2 :	194:8:6371:6377	5656266	13	True				
ANR	5656522	ExpressionStatement	INVERT ( 1 )	194:16:6379:6388	5656266	14	True				
ANR	5656523	CallExpression	INVERT ( 1 )		5656266	0					
ANR	5656524	Callee	INVERT		5656266	0					
ANR	5656525	Identifier	INVERT		5656266	0					
ANR	5656526	ArgumentList	1		5656266	1					
ANR	5656527	Argument	1		5656266	0					
ANR	5656528	PrimaryExpression	1		5656266	0					
ANR	5656529	Label	case 1 :	195:8:6398:6404	5656266	15	True				
ANR	5656530	ExpressionStatement	INVERT ( 0 )	195:16:6406:6415	5656266	16	True				
ANR	5656531	CallExpression	INVERT ( 0 )		5656266	0					
ANR	5656532	Callee	INVERT		5656266	0					
ANR	5656533	Identifier	INVERT		5656266	0					
ANR	5656534	ArgumentList	0		5656266	1					
ANR	5656535	Argument	0		5656266	0					
ANR	5656536	PrimaryExpression	0		5656266	0					
ANR	5656537	Label	case 0 :	196:8:6425:6431	5656266	17	True				
ANR	5656538	BreakStatement	break ;	196:16:6433:6438	5656266	18	True				
ANR	5656539	Statement	case	197:8:6473:6476	5656266	19	True				
ANR	5656540	Statement	-	197:13:6478:6478	5656266	20	True				
ANR	5656541	Label	7 :	197:14:6479:6480	5656266	21	True				
ANR	5656542	ExpressionStatement	INVERT ( - 7 )	197:17:6482:6492	5656266	22	True				
ANR	5656543	CallExpression	INVERT ( - 7 )		5656266	0					
ANR	5656544	Callee	INVERT		5656266	0					
ANR	5656545	Identifier	INVERT		5656266	0					
ANR	5656546	ArgumentList	- 7		5656266	1					
ANR	5656547	Argument	- 7		5656266	0					
ANR	5656548	UnaryOperationExpression	- 7		5656266	0					
ANR	5656549	UnaryOperator	-		5656266	0					
ANR	5656550	PrimaryExpression	7		5656266	1					
ANR	5656551	Statement	case	198:8:6502:6505	5656266	23	True				
ANR	5656552	Statement	-	198:13:6507:6507	5656266	24	True				
ANR	5656553	Label	6 :	198:14:6508:6509	5656266	25	True				
ANR	5656554	ExpressionStatement	INVERT ( - 6 )	198:17:6511:6521	5656266	26	True				
ANR	5656555	CallExpression	INVERT ( - 6 )		5656266	0					
ANR	5656556	Callee	INVERT		5656266	0					
ANR	5656557	Identifier	INVERT		5656266	0					
ANR	5656558	ArgumentList	- 6		5656266	1					
ANR	5656559	Argument	- 6		5656266	0					
ANR	5656560	UnaryOperationExpression	- 6		5656266	0					
ANR	5656561	UnaryOperator	-		5656266	0					
ANR	5656562	PrimaryExpression	6		5656266	1					
ANR	5656563	Statement	case	199:8:6531:6534	5656266	27	True				
ANR	5656564	Statement	-	199:13:6536:6536	5656266	28	True				
ANR	5656565	Label	5 :	199:14:6537:6538	5656266	29	True				
ANR	5656566	ExpressionStatement	INVERT ( - 5 )	199:17:6540:6550	5656266	30	True				
ANR	5656567	CallExpression	INVERT ( - 5 )		5656266	0					
ANR	5656568	Callee	INVERT		5656266	0					
ANR	5656569	Identifier	INVERT		5656266	0					
ANR	5656570	ArgumentList	- 5		5656266	1					
ANR	5656571	Argument	- 5		5656266	0					
ANR	5656572	UnaryOperationExpression	- 5		5656266	0					
ANR	5656573	UnaryOperator	-		5656266	0					
ANR	5656574	PrimaryExpression	5		5656266	1					
ANR	5656575	Statement	case	200:8:6560:6563	5656266	31	True				
ANR	5656576	Statement	-	200:13:6565:6565	5656266	32	True				
ANR	5656577	Label	4 :	200:14:6566:6567	5656266	33	True				
ANR	5656578	ExpressionStatement	INVERT ( - 4 )	200:17:6569:6579	5656266	34	True				
ANR	5656579	CallExpression	INVERT ( - 4 )		5656266	0					
ANR	5656580	Callee	INVERT		5656266	0					
ANR	5656581	Identifier	INVERT		5656266	0					
ANR	5656582	ArgumentList	- 4		5656266	1					
ANR	5656583	Argument	- 4		5656266	0					
ANR	5656584	UnaryOperationExpression	- 4		5656266	0					
ANR	5656585	UnaryOperator	-		5656266	0					
ANR	5656586	PrimaryExpression	4		5656266	1					
ANR	5656587	Statement	case	201:8:6589:6592	5656266	35	True				
ANR	5656588	Statement	-	201:13:6594:6594	5656266	36	True				
ANR	5656589	Label	3 :	201:14:6595:6596	5656266	37	True				
ANR	5656590	ExpressionStatement	INVERT ( - 3 )	201:17:6598:6608	5656266	38	True				
ANR	5656591	CallExpression	INVERT ( - 3 )		5656266	0					
ANR	5656592	Callee	INVERT		5656266	0					
ANR	5656593	Identifier	INVERT		5656266	0					
ANR	5656594	ArgumentList	- 3		5656266	1					
ANR	5656595	Argument	- 3		5656266	0					
ANR	5656596	UnaryOperationExpression	- 3		5656266	0					
ANR	5656597	UnaryOperator	-		5656266	0					
ANR	5656598	PrimaryExpression	3		5656266	1					
ANR	5656599	Statement	case	202:8:6618:6621	5656266	39	True				
ANR	5656600	Statement	-	202:13:6623:6623	5656266	40	True				
ANR	5656601	Label	2 :	202:14:6624:6625	5656266	41	True				
ANR	5656602	ExpressionStatement	INVERT ( - 2 )	202:17:6627:6637	5656266	42	True				
ANR	5656603	CallExpression	INVERT ( - 2 )		5656266	0					
ANR	5656604	Callee	INVERT		5656266	0					
ANR	5656605	Identifier	INVERT		5656266	0					
ANR	5656606	ArgumentList	- 2		5656266	1					
ANR	5656607	Argument	- 2		5656266	0					
ANR	5656608	UnaryOperationExpression	- 2		5656266	0					
ANR	5656609	UnaryOperator	-		5656266	0					
ANR	5656610	PrimaryExpression	2		5656266	1					
ANR	5656611	Statement	case	203:8:6647:6650	5656266	43	True				
ANR	5656612	Statement	-	203:13:6652:6652	5656266	44	True				
ANR	5656613	Label	1 :	203:14:6653:6654	5656266	45	True				
ANR	5656614	ExpressionStatement	INVERT ( - 1 )	203:17:6656:6666	5656266	46	True				
ANR	5656615	CallExpression	INVERT ( - 1 )		5656266	0					
ANR	5656616	Callee	INVERT		5656266	0					
ANR	5656617	Identifier	INVERT		5656266	0					
ANR	5656618	ArgumentList	- 1		5656266	1					
ANR	5656619	Argument	- 1		5656266	0					
ANR	5656620	UnaryOperationExpression	- 1		5656266	0					
ANR	5656621	UnaryOperator	-		5656266	0					
ANR	5656622	PrimaryExpression	1		5656266	1					
ANR	5656623	Statement	undef	205:1:6675:6679	5656266	23	True				
ANR	5656624	Statement	INVERT_DATA	205:7:6681:6691	5656266	24	True				
ANR	5656625	Statement	undef	206:1:6694:6698	5656266	25	True				
ANR	5656626	Statement	INVERT	206:7:6700:6705	5656266	26	True				
ANR	5656627	ReturnStatement	return 0 ;	207:4:6711:6719	5656266	27	True				
ANR	5656628	PrimaryExpression	0		5656266	0					
ANR	5656629	ReturnType	static int		5656266	1					
ANR	5656630	Identifier	render_ht_default		5656266	2					
ANR	5656631	ParameterList	"gx_ht_tile * pbt , int level , const gx_ht_order * porder"		5656266	3					
ANR	5656632	Parameter	gx_ht_tile * pbt	150:18:4923:4937	5656266	0	True				
ANR	5656633	ParameterType	gx_ht_tile *		5656266	0					
ANR	5656634	Identifier	pbt		5656266	1					
ANR	5656635	Parameter	int level	150:35:4940:4948	5656266	1	True				
ANR	5656636	ParameterType	int		5656266	0					
ANR	5656637	Identifier	level		5656266	1					
ANR	5656638	Parameter	const gx_ht_order * porder	150:46:4951:4975	5656266	2	True				
ANR	5656639	ParameterType	const gx_ht_order *		5656266	0					
ANR	5656640	Identifier	porder		5656266	1					
ANR	5656641	CFGEntryNode	ENTRY		5656266		True				
ANR	5656642	CFGExitNode	EXIT		5656266		True				
ANR	5656643	Symbol	pbt -> tiles . data		5656266						
ANR	5656644	Symbol	pbt		5656266						
ANR	5656645	Symbol	data		5656266						
ANR	5656646	Symbol	level		5656266						
ANR	5656647	Symbol	i		5656266						
ANR	5656648	Symbol	* pbt		5656266						
ANR	5656649	Symbol	dp		5656266						
ANR	5656650	Symbol	p [ i ] . offset		5656266						
ANR	5656651	Symbol	porder		5656266						
ANR	5656652	Symbol	p		5656266						
ANR	5656653	Symbol	* dp		5656266						
ANR	5656654	Symbol	p [ i ] . mask		5656266						
ANR	5656655	Symbol	porder -> bit_data		5656266						
ANR	5656656	Symbol	* i		5656266						
ANR	5656657	Symbol	old_level		5656266						
ANR	5656658	Symbol	pbt -> tiles		5656266						
ANR	5656659	Symbol	if_debug3		5656266						
ANR	5656660	Symbol	* p		5656266						
ANR	5656661	Symbol	* porder		5656266						
ANR	5656662	Symbol	pbt -> level		5656266						
ANR	5656663	Function	render_ht_short	211:0:6785:8378							
ANR	5656664	FunctionDef	"render_ht_short (gx_ht_tile * pbt , int level , const gx_ht_order * porder)"		5656663	0					
ANR	5656665	CompoundStatement		213:0:6867:8378	5656663	0					
ANR	5656666	IdentifierDeclStatement	int old_level = pbt -> level ;	214:4:6873:6899	5656663	0	True				
ANR	5656667	IdentifierDecl	old_level = pbt -> level		5656663	0					
ANR	5656668	IdentifierDeclType	int		5656663	0					
ANR	5656669	Identifier	old_level		5656663	1					
ANR	5656670	AssignmentExpression	old_level = pbt -> level		5656663	2		=			
ANR	5656671	Identifier	old_level		5656663	0					
ANR	5656672	PtrMemberAccess	pbt -> level		5656663	1					
ANR	5656673	Identifier	pbt		5656663	0					
ANR	5656674	Identifier	level		5656663	1					
ANR	5656675	Statement	register	215:4:6905:6912	5656663	1	True				
ANR	5656676	IdentifierDeclStatement	const ushort * p = ( const ushort * ) porder -> bit_data + old_level ;	215:13:6914:6976	5656663	2	True				
ANR	5656677	IdentifierDecl	* p = ( const ushort * ) porder -> bit_data + old_level		5656663	0					
ANR	5656678	IdentifierDeclType	const ushort *		5656663	0					
ANR	5656679	Identifier	p		5656663	1					
ANR	5656680	AssignmentExpression	* p = ( const ushort * ) porder -> bit_data + old_level		5656663	2		=			
ANR	5656681	Identifier	p		5656663	0					
ANR	5656682	AdditiveExpression	( const ushort * ) porder -> bit_data + old_level		5656663	1		+			
ANR	5656683	CastExpression	( const ushort * ) porder -> bit_data		5656663	0					
ANR	5656684	CastTarget	const ushort *		5656663	0					
ANR	5656685	PtrMemberAccess	porder -> bit_data		5656663	1					
ANR	5656686	Identifier	porder		5656663	0					
ANR	5656687	Identifier	bit_data		5656663	1					
ANR	5656688	Identifier	old_level		5656663	1					
ANR	5656689	Statement	register	216:4:6982:6989	5656663	3	True				
ANR	5656690	IdentifierDeclStatement	byte * data = pbt -> tiles . data ;	216:13:6991:7019	5656663	4	True				
ANR	5656691	IdentifierDecl	* data = pbt -> tiles . data		5656663	0					
ANR	5656692	IdentifierDeclType	byte *		5656663	0					
ANR	5656693	Identifier	data		5656663	1					
ANR	5656694	AssignmentExpression	* data = pbt -> tiles . data		5656663	2		=			
ANR	5656695	Identifier	data		5656663	0					
ANR	5656696	MemberAccess	pbt -> tiles . data		5656663	1					
ANR	5656697	PtrMemberAccess	pbt -> tiles		5656663	0					
ANR	5656698	Identifier	pbt		5656663	0					
ANR	5656699	Identifier	tiles		5656663	1					
ANR	5656700	Identifier	data		5656663	1					
ANR	5656701	Statement	define	219:1:7069:7074	5656663	5	True				
ANR	5656702	Statement	INVERT_DATA	219:8:7076:7086	5656663	6	True				
ANR	5656703	Statement	(	219:19:7087:7087	5656663	7	True				
ANR	5656704	Statement	i	219:20:7088:7088	5656663	8	True				
ANR	5656705	Statement	)	219:21:7089:7089	5656663	9	True				
ANR	5656706	IdentifierDeclStatement	BEGIN uint bit_index = p [ i ] ;	220:5:7097:7132	5656663	10	True				
ANR	5656707	IdentifierDecl	bit_index = p [ i ]		5656663	0					
ANR	5656708	IdentifierDeclType	BEGIN uint		5656663	0					
ANR	5656709	Identifier	bit_index		5656663	1					
ANR	5656710	AssignmentExpression	bit_index = p [ i ]		5656663	2		=			
ANR	5656711	Identifier	bit_index		5656663	0					
ANR	5656712	ArrayIndexing	p [ i ]		5656663	1					
ANR	5656713	Identifier	p		5656663	0					
ANR	5656714	Identifier	i		5656663	1					
ANR	5656715	IdentifierDeclStatement	byte * dp = & data [ bit_index >> 3 ] ;	222:7:7142:7174	5656663	11	True				
ANR	5656716	IdentifierDecl	* dp = & data [ bit_index >> 3 ]		5656663	0					
ANR	5656717	IdentifierDeclType	byte *		5656663	0					
ANR	5656718	Identifier	dp		5656663	1					
ANR	5656719	AssignmentExpression	* dp = & data [ bit_index >> 3 ]		5656663	2		=			
ANR	5656720	Identifier	dp		5656663	0					
ANR	5656721	UnaryOperationExpression	& data [ bit_index >> 3 ]		5656663	1					
ANR	5656722	UnaryOperator	&		5656663	0					
ANR	5656723	ArrayIndexing	data [ bit_index >> 3 ]		5656663	1					
ANR	5656724	Identifier	data		5656663	0					
ANR	5656725	ShiftExpression	bit_index >> 3		5656663	1		>>			
ANR	5656726	Identifier	bit_index		5656663	0					
ANR	5656727	PrimaryExpression	3		5656663	1					
ANR	5656728	ExpressionStatement	* dp ^= 0x80 >> ( bit_index & 7 )	223:7:7184:7214	5656663	12	True				
ANR	5656729	AssignmentExpression	* dp ^= 0x80 >> ( bit_index & 7 )		5656663	0		^=			
ANR	5656730	UnaryOperationExpression	* dp		5656663	0					
ANR	5656731	UnaryOperator	*		5656663	0					
ANR	5656732	Identifier	dp		5656663	1					
ANR	5656733	ShiftExpression	0x80 >> ( bit_index & 7 )		5656663	1		>>			
ANR	5656734	PrimaryExpression	0x80		5656663	0					
ANR	5656735	BitAndExpression	bit_index & 7		5656663	1		&			
ANR	5656736	Identifier	bit_index		5656663	0					
ANR	5656737	PrimaryExpression	7		5656663	1					
ANR	5656738	Statement	END	224:5:7222:7224	5656663	13	True				
ANR	5656739	Statement	define	226:3:7242:7247	5656663	14	True				
ANR	5656740	Statement	INVERT	226:10:7249:7254	5656663	15	True				
ANR	5656741	Statement	(	226:16:7255:7255	5656663	16	True				
ANR	5656742	Statement	i	226:17:7256:7256	5656663	17	True				
ANR	5656743	Statement	)	226:18:7257:7257	5656663	18	True				
ANR	5656744	IdentifierDeclStatement	"BEGIN if_debug3 ( 'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 ) ) ;"	227:5:7265:7453	5656663	19	True				
ANR	5656745	IdentifierDecl	"if_debug3 ( 'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 ) )"		5656663	0					
ANR	5656746	IdentifierDeclType	BEGIN		5656663	0					
ANR	5656747	Identifier	if_debug3		5656663	1					
ANR	5656748	Expression	"'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 )"		5656663	2					
ANR	5656749	PrimaryExpression	'H'		5656663	0					
ANR	5656750	Expression	"""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 )"		5656663	1					
ANR	5656751	PrimaryExpression	"""[H]invert level=%d offset=%u mask=0x%x\\n"""		5656663	0					
ANR	5656752	Expression	"( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 )"		5656663	1					
ANR	5656753	CastExpression	( int ) ( p + i - ( const ushort * ) porder -> bit_data )		5656663	0					
ANR	5656754	CastTarget	int		5656663	0					
ANR	5656755	AdditiveExpression	p + i - ( const ushort * ) porder -> bit_data		5656663	1		+			
ANR	5656756	Identifier	p		5656663	0					
ANR	5656757	AdditiveExpression	i - ( const ushort * ) porder -> bit_data		5656663	1		-			
ANR	5656758	Identifier	i		5656663	0					
ANR	5656759	CastExpression	( const ushort * ) porder -> bit_data		5656663	1					
ANR	5656760	CastTarget	const ushort *		5656663	0					
ANR	5656761	PtrMemberAccess	porder -> bit_data		5656663	1					
ANR	5656762	Identifier	porder		5656663	0					
ANR	5656763	Identifier	bit_data		5656663	1					
ANR	5656764	Expression	"p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 )"		5656663	1					
ANR	5656765	ShiftExpression	p [ i ] >> 3		5656663	0		>>			
ANR	5656766	ArrayIndexing	p [ i ]		5656663	0					
ANR	5656767	Identifier	p		5656663	0					
ANR	5656768	Identifier	i		5656663	1					
ANR	5656769	PrimaryExpression	3		5656663	1					
ANR	5656770	ShiftExpression	0x80 >> ( p [ i ] & 7 )		5656663	1		>>			
ANR	5656771	PrimaryExpression	0x80		5656663	0					
ANR	5656772	BitAndExpression	p [ i ] & 7		5656663	1		&			
ANR	5656773	ArrayIndexing	p [ i ]		5656663	0					
ANR	5656774	Identifier	p		5656663	0					
ANR	5656775	Identifier	i		5656663	1					
ANR	5656776	PrimaryExpression	7		5656663	1					
ANR	5656777	ExpressionStatement	INVERT_DATA ( i )	231:7:7463:7477	5656663	20	True				
ANR	5656778	CallExpression	INVERT_DATA ( i )		5656663	0					
ANR	5656779	Callee	INVERT_DATA		5656663	0					
ANR	5656780	Identifier	INVERT_DATA		5656663	0					
ANR	5656781	ArgumentList	i		5656663	1					
ANR	5656782	Argument	i		5656663	0					
ANR	5656783	Identifier	i		5656663	0					
ANR	5656784	Statement	END	232:5:7485:7487	5656663	21	True				
ANR	5656785	Label	sw :	236:2:7539:7541	5656663	22	True				
ANR	5656786	Identifier	sw		5656663	0					
ANR	5656787	SwitchStatement	switch ( level - old_level )		5656663	23					
ANR	5656788	Condition	level - old_level	236:13:7550:7566	5656663	0	True				
ANR	5656789	AdditiveExpression	level - old_level		5656663	0		-			
ANR	5656790	Identifier	level		5656663	0					
ANR	5656791	Identifier	old_level		5656663	1					
ANR	5656792	CompoundStatement		24:32:701:701	5656663	1					
ANR	5656793	Label	default :	237:8:7579:7586	5656663	0	True				
ANR	5656794	Identifier	default		5656663	0					
ANR	5656795	IfStatement	if ( level > old_level )		5656663	1					
ANR	5656796	Condition	level > old_level	238:16:7604:7620	5656663	0	True				
ANR	5656797	RelationalExpression	level > old_level		5656663	0		>			
ANR	5656798	Identifier	level		5656663	0					
ANR	5656799	Identifier	old_level		5656663	1					
ANR	5656800	CompoundStatement		26:35:755:755	5656663	1					
ANR	5656801	ExpressionStatement	INVERT ( 0 )	239:16:7641:7650	5656663	0	True				
ANR	5656802	CallExpression	INVERT ( 0 )		5656663	0					
ANR	5656803	Callee	INVERT		5656663	0					
ANR	5656804	Identifier	INVERT		5656663	0					
ANR	5656805	ArgumentList	0		5656663	1					
ANR	5656806	Argument	0		5656663	0					
ANR	5656807	PrimaryExpression	0		5656663	0					
ANR	5656808	ExpressionStatement	INVERT ( 1 )	239:27:7652:7661	5656663	1	True				
ANR	5656809	CallExpression	INVERT ( 1 )		5656663	0					
ANR	5656810	Callee	INVERT		5656663	0					
ANR	5656811	Identifier	INVERT		5656663	0					
ANR	5656812	ArgumentList	1		5656663	1					
ANR	5656813	Argument	1		5656663	0					
ANR	5656814	PrimaryExpression	1		5656663	0					
ANR	5656815	ExpressionStatement	INVERT ( 2 )	239:38:7663:7672	5656663	2	True				
ANR	5656816	CallExpression	INVERT ( 2 )		5656663	0					
ANR	5656817	Callee	INVERT		5656663	0					
ANR	5656818	Identifier	INVERT		5656663	0					
ANR	5656819	ArgumentList	2		5656663	1					
ANR	5656820	Argument	2		5656663	0					
ANR	5656821	PrimaryExpression	2		5656663	0					
ANR	5656822	ExpressionStatement	INVERT ( 3 )	239:49:7674:7683	5656663	3	True				
ANR	5656823	CallExpression	INVERT ( 3 )		5656663	0					
ANR	5656824	Callee	INVERT		5656663	0					
ANR	5656825	Identifier	INVERT		5656663	0					
ANR	5656826	ArgumentList	3		5656663	1					
ANR	5656827	Argument	3		5656663	0					
ANR	5656828	PrimaryExpression	3		5656663	0					
ANR	5656829	ExpressionStatement	p += 4	240:16:7701:7707	5656663	4	True				
ANR	5656830	AssignmentExpression	p += 4		5656663	0		+=			
ANR	5656831	Identifier	p		5656663	0					
ANR	5656832	PrimaryExpression	4		5656663	1					
ANR	5656833	ExpressionStatement	old_level += 4	240:24:7709:7723	5656663	5	True				
ANR	5656834	AssignmentExpression	old_level += 4		5656663	0		+=			
ANR	5656835	Identifier	old_level		5656663	0					
ANR	5656836	PrimaryExpression	4		5656663	1					
ANR	5656837	ElseStatement	else		5656663	0					
ANR	5656838	CompoundStatement		29:19:876:876	5656663	0					
ANR	5656839	ExpressionStatement	INVERT ( - 1 )	242:16:7762:7772	5656663	0	True				
ANR	5656840	CallExpression	INVERT ( - 1 )		5656663	0					
ANR	5656841	Callee	INVERT		5656663	0					
ANR	5656842	Identifier	INVERT		5656663	0					
ANR	5656843	ArgumentList	- 1		5656663	1					
ANR	5656844	Argument	- 1		5656663	0					
ANR	5656845	UnaryOperationExpression	- 1		5656663	0					
ANR	5656846	UnaryOperator	-		5656663	0					
ANR	5656847	PrimaryExpression	1		5656663	1					
ANR	5656848	ExpressionStatement	INVERT ( - 2 )	242:28:7774:7784	5656663	1	True				
ANR	5656849	CallExpression	INVERT ( - 2 )		5656663	0					
ANR	5656850	Callee	INVERT		5656663	0					
ANR	5656851	Identifier	INVERT		5656663	0					
ANR	5656852	ArgumentList	- 2		5656663	1					
ANR	5656853	Argument	- 2		5656663	0					
ANR	5656854	UnaryOperationExpression	- 2		5656663	0					
ANR	5656855	UnaryOperator	-		5656663	0					
ANR	5656856	PrimaryExpression	2		5656663	1					
ANR	5656857	ExpressionStatement	INVERT ( - 3 )	242:40:7786:7796	5656663	2	True				
ANR	5656858	CallExpression	INVERT ( - 3 )		5656663	0					
ANR	5656859	Callee	INVERT		5656663	0					
ANR	5656860	Identifier	INVERT		5656663	0					
ANR	5656861	ArgumentList	- 3		5656663	1					
ANR	5656862	Argument	- 3		5656663	0					
ANR	5656863	UnaryOperationExpression	- 3		5656663	0					
ANR	5656864	UnaryOperator	-		5656663	0					
ANR	5656865	PrimaryExpression	3		5656663	1					
ANR	5656866	ExpressionStatement	INVERT ( - 4 )	242:52:7798:7808	5656663	3	True				
ANR	5656867	CallExpression	INVERT ( - 4 )		5656663	0					
ANR	5656868	Callee	INVERT		5656663	0					
ANR	5656869	Identifier	INVERT		5656663	0					
ANR	5656870	ArgumentList	- 4		5656663	1					
ANR	5656871	Argument	- 4		5656663	0					
ANR	5656872	UnaryOperationExpression	- 4		5656663	0					
ANR	5656873	UnaryOperator	-		5656663	0					
ANR	5656874	PrimaryExpression	4		5656663	1					
ANR	5656875	ExpressionStatement	p -= 4	243:16:7826:7832	5656663	4	True				
ANR	5656876	AssignmentExpression	p -= 4		5656663	0		-=			
ANR	5656877	Identifier	p		5656663	0					
ANR	5656878	PrimaryExpression	4		5656663	1					
ANR	5656879	ExpressionStatement	old_level -= 4	243:24:7834:7848	5656663	5	True				
ANR	5656880	AssignmentExpression	old_level -= 4		5656663	0		-=			
ANR	5656881	Identifier	old_level		5656663	0					
ANR	5656882	PrimaryExpression	4		5656663	1					
ANR	5656883	GotoStatement	goto sw ;	245:12:7876:7883	5656663	2	True				
ANR	5656884	Identifier	sw		5656663	0					
ANR	5656885	Label	case 7 :	246:8:7893:7899	5656663	3	True				
ANR	5656886	ExpressionStatement	INVERT ( 6 )	246:16:7901:7910	5656663	4	True				
ANR	5656887	CallExpression	INVERT ( 6 )		5656663	0					
ANR	5656888	Callee	INVERT		5656663	0					
ANR	5656889	Identifier	INVERT		5656663	0					
ANR	5656890	ArgumentList	6		5656663	1					
ANR	5656891	Argument	6		5656663	0					
ANR	5656892	PrimaryExpression	6		5656663	0					
ANR	5656893	Label	case 6 :	247:8:7920:7926	5656663	5	True				
ANR	5656894	ExpressionStatement	INVERT ( 5 )	247:16:7928:7937	5656663	6	True				
ANR	5656895	CallExpression	INVERT ( 5 )		5656663	0					
ANR	5656896	Callee	INVERT		5656663	0					
ANR	5656897	Identifier	INVERT		5656663	0					
ANR	5656898	ArgumentList	5		5656663	1					
ANR	5656899	Argument	5		5656663	0					
ANR	5656900	PrimaryExpression	5		5656663	0					
ANR	5656901	Label	case 5 :	248:8:7947:7953	5656663	7	True				
ANR	5656902	ExpressionStatement	INVERT ( 4 )	248:16:7955:7964	5656663	8	True				
ANR	5656903	CallExpression	INVERT ( 4 )		5656663	0					
ANR	5656904	Callee	INVERT		5656663	0					
ANR	5656905	Identifier	INVERT		5656663	0					
ANR	5656906	ArgumentList	4		5656663	1					
ANR	5656907	Argument	4		5656663	0					
ANR	5656908	PrimaryExpression	4		5656663	0					
ANR	5656909	Label	case 4 :	249:8:7974:7980	5656663	9	True				
ANR	5656910	ExpressionStatement	INVERT ( 3 )	249:16:7982:7991	5656663	10	True				
ANR	5656911	CallExpression	INVERT ( 3 )		5656663	0					
ANR	5656912	Callee	INVERT		5656663	0					
ANR	5656913	Identifier	INVERT		5656663	0					
ANR	5656914	ArgumentList	3		5656663	1					
ANR	5656915	Argument	3		5656663	0					
ANR	5656916	PrimaryExpression	3		5656663	0					
ANR	5656917	Label	case 3 :	250:8:8001:8007	5656663	11	True				
ANR	5656918	ExpressionStatement	INVERT ( 2 )	250:16:8009:8018	5656663	12	True				
ANR	5656919	CallExpression	INVERT ( 2 )		5656663	0					
ANR	5656920	Callee	INVERT		5656663	0					
ANR	5656921	Identifier	INVERT		5656663	0					
ANR	5656922	ArgumentList	2		5656663	1					
ANR	5656923	Argument	2		5656663	0					
ANR	5656924	PrimaryExpression	2		5656663	0					
ANR	5656925	Label	case 2 :	251:8:8028:8034	5656663	13	True				
ANR	5656926	ExpressionStatement	INVERT ( 1 )	251:16:8036:8045	5656663	14	True				
ANR	5656927	CallExpression	INVERT ( 1 )		5656663	0					
ANR	5656928	Callee	INVERT		5656663	0					
ANR	5656929	Identifier	INVERT		5656663	0					
ANR	5656930	ArgumentList	1		5656663	1					
ANR	5656931	Argument	1		5656663	0					
ANR	5656932	PrimaryExpression	1		5656663	0					
ANR	5656933	Label	case 1 :	252:8:8055:8061	5656663	15	True				
ANR	5656934	ExpressionStatement	INVERT ( 0 )	252:16:8063:8072	5656663	16	True				
ANR	5656935	CallExpression	INVERT ( 0 )		5656663	0					
ANR	5656936	Callee	INVERT		5656663	0					
ANR	5656937	Identifier	INVERT		5656663	0					
ANR	5656938	ArgumentList	0		5656663	1					
ANR	5656939	Argument	0		5656663	0					
ANR	5656940	PrimaryExpression	0		5656663	0					
ANR	5656941	Label	case 0 :	253:8:8082:8088	5656663	17	True				
ANR	5656942	BreakStatement	break ;	253:16:8090:8095	5656663	18	True				
ANR	5656943	Statement	case	254:8:8130:8133	5656663	19	True				
ANR	5656944	Statement	-	254:13:8135:8135	5656663	20	True				
ANR	5656945	Label	7 :	254:14:8136:8137	5656663	21	True				
ANR	5656946	ExpressionStatement	INVERT ( - 7 )	254:17:8139:8149	5656663	22	True				
ANR	5656947	CallExpression	INVERT ( - 7 )		5656663	0					
ANR	5656948	Callee	INVERT		5656663	0					
ANR	5656949	Identifier	INVERT		5656663	0					
ANR	5656950	ArgumentList	- 7		5656663	1					
ANR	5656951	Argument	- 7		5656663	0					
ANR	5656952	UnaryOperationExpression	- 7		5656663	0					
ANR	5656953	UnaryOperator	-		5656663	0					
ANR	5656954	PrimaryExpression	7		5656663	1					
ANR	5656955	Statement	case	255:8:8159:8162	5656663	23	True				
ANR	5656956	Statement	-	255:13:8164:8164	5656663	24	True				
ANR	5656957	Label	6 :	255:14:8165:8166	5656663	25	True				
ANR	5656958	ExpressionStatement	INVERT ( - 6 )	255:17:8168:8178	5656663	26	True				
ANR	5656959	CallExpression	INVERT ( - 6 )		5656663	0					
ANR	5656960	Callee	INVERT		5656663	0					
ANR	5656961	Identifier	INVERT		5656663	0					
ANR	5656962	ArgumentList	- 6		5656663	1					
ANR	5656963	Argument	- 6		5656663	0					
ANR	5656964	UnaryOperationExpression	- 6		5656663	0					
ANR	5656965	UnaryOperator	-		5656663	0					
ANR	5656966	PrimaryExpression	6		5656663	1					
ANR	5656967	Statement	case	256:8:8188:8191	5656663	27	True				
ANR	5656968	Statement	-	256:13:8193:8193	5656663	28	True				
ANR	5656969	Label	5 :	256:14:8194:8195	5656663	29	True				
ANR	5656970	ExpressionStatement	INVERT ( - 5 )	256:17:8197:8207	5656663	30	True				
ANR	5656971	CallExpression	INVERT ( - 5 )		5656663	0					
ANR	5656972	Callee	INVERT		5656663	0					
ANR	5656973	Identifier	INVERT		5656663	0					
ANR	5656974	ArgumentList	- 5		5656663	1					
ANR	5656975	Argument	- 5		5656663	0					
ANR	5656976	UnaryOperationExpression	- 5		5656663	0					
ANR	5656977	UnaryOperator	-		5656663	0					
ANR	5656978	PrimaryExpression	5		5656663	1					
ANR	5656979	Statement	case	257:8:8217:8220	5656663	31	True				
ANR	5656980	Statement	-	257:13:8222:8222	5656663	32	True				
ANR	5656981	Label	4 :	257:14:8223:8224	5656663	33	True				
ANR	5656982	ExpressionStatement	INVERT ( - 4 )	257:17:8226:8236	5656663	34	True				
ANR	5656983	CallExpression	INVERT ( - 4 )		5656663	0					
ANR	5656984	Callee	INVERT		5656663	0					
ANR	5656985	Identifier	INVERT		5656663	0					
ANR	5656986	ArgumentList	- 4		5656663	1					
ANR	5656987	Argument	- 4		5656663	0					
ANR	5656988	UnaryOperationExpression	- 4		5656663	0					
ANR	5656989	UnaryOperator	-		5656663	0					
ANR	5656990	PrimaryExpression	4		5656663	1					
ANR	5656991	Statement	case	258:8:8246:8249	5656663	35	True				
ANR	5656992	Statement	-	258:13:8251:8251	5656663	36	True				
ANR	5656993	Label	3 :	258:14:8252:8253	5656663	37	True				
ANR	5656994	ExpressionStatement	INVERT ( - 3 )	258:17:8255:8265	5656663	38	True				
ANR	5656995	CallExpression	INVERT ( - 3 )		5656663	0					
ANR	5656996	Callee	INVERT		5656663	0					
ANR	5656997	Identifier	INVERT		5656663	0					
ANR	5656998	ArgumentList	- 3		5656663	1					
ANR	5656999	Argument	- 3		5656663	0					
ANR	5657000	UnaryOperationExpression	- 3		5656663	0					
ANR	5657001	UnaryOperator	-		5656663	0					
ANR	5657002	PrimaryExpression	3		5656663	1					
ANR	5657003	Statement	case	259:8:8275:8278	5656663	39	True				
ANR	5657004	Statement	-	259:13:8280:8280	5656663	40	True				
ANR	5657005	Label	2 :	259:14:8281:8282	5656663	41	True				
ANR	5657006	ExpressionStatement	INVERT ( - 2 )	259:17:8284:8294	5656663	42	True				
ANR	5657007	CallExpression	INVERT ( - 2 )		5656663	0					
ANR	5657008	Callee	INVERT		5656663	0					
ANR	5657009	Identifier	INVERT		5656663	0					
ANR	5657010	ArgumentList	- 2		5656663	1					
ANR	5657011	Argument	- 2		5656663	0					
ANR	5657012	UnaryOperationExpression	- 2		5656663	0					
ANR	5657013	UnaryOperator	-		5656663	0					
ANR	5657014	PrimaryExpression	2		5656663	1					
ANR	5657015	Statement	case	260:8:8304:8307	5656663	43	True				
ANR	5657016	Statement	-	260:13:8309:8309	5656663	44	True				
ANR	5657017	Label	1 :	260:14:8310:8311	5656663	45	True				
ANR	5657018	ExpressionStatement	INVERT ( - 1 )	260:17:8313:8323	5656663	46	True				
ANR	5657019	CallExpression	INVERT ( - 1 )		5656663	0					
ANR	5657020	Callee	INVERT		5656663	0					
ANR	5657021	Identifier	INVERT		5656663	0					
ANR	5657022	ArgumentList	- 1		5656663	1					
ANR	5657023	Argument	- 1		5656663	0					
ANR	5657024	UnaryOperationExpression	- 1		5656663	0					
ANR	5657025	UnaryOperator	-		5656663	0					
ANR	5657026	PrimaryExpression	1		5656663	1					
ANR	5657027	Statement	undef	262:1:8332:8336	5656663	24	True				
ANR	5657028	Statement	INVERT_DATA	262:7:8338:8348	5656663	25	True				
ANR	5657029	Statement	undef	263:1:8351:8355	5656663	26	True				
ANR	5657030	Statement	INVERT	263:7:8357:8362	5656663	27	True				
ANR	5657031	ReturnStatement	return 0 ;	264:4:8368:8376	5656663	28	True				
ANR	5657032	PrimaryExpression	0		5656663	0					
ANR	5657033	ReturnType	static int		5656663	1					
ANR	5657034	Identifier	render_ht_short		5656663	2					
ANR	5657035	ParameterList	"gx_ht_tile * pbt , int level , const gx_ht_order * porder"		5656663	3					
ANR	5657036	Parameter	gx_ht_tile * pbt	212:16:6812:6826	5656663	0	True				
ANR	5657037	ParameterType	gx_ht_tile *		5656663	0					
ANR	5657038	Identifier	pbt		5656663	1					
ANR	5657039	Parameter	int level	212:33:6829:6837	5656663	1	True				
ANR	5657040	ParameterType	int		5656663	0					
ANR	5657041	Identifier	level		5656663	1					
ANR	5657042	Parameter	const gx_ht_order * porder	212:44:6840:6864	5656663	2	True				
ANR	5657043	ParameterType	const gx_ht_order *		5656663	0					
ANR	5657044	Identifier	porder		5656663	1					
ANR	5657045	CFGEntryNode	ENTRY		5656663		True				
ANR	5657046	CFGExitNode	EXIT		5656663		True				
ANR	5657047	Symbol	pbt -> tiles . data		5656663						
ANR	5657048	Symbol	pbt		5656663						
ANR	5657049	Symbol	data		5656663						
ANR	5657050	Symbol	level		5656663						
ANR	5657051	Symbol	i		5656663						
ANR	5657052	Symbol	* pbt		5656663						
ANR	5657053	Symbol	dp		5656663						
ANR	5657054	Symbol	porder		5656663						
ANR	5657055	Symbol	p		5656663						
ANR	5657056	Symbol	* dp		5656663						
ANR	5657057	Symbol	porder -> bit_data		5656663						
ANR	5657058	Symbol	* i		5656663						
ANR	5657059	Symbol	old_level		5656663						
ANR	5657060	Symbol	pbt -> tiles		5656663						
ANR	5657061	Symbol	bit_index		5656663						
ANR	5657062	Symbol	if_debug3		5656663						
ANR	5657063	Symbol	* p		5656663						
ANR	5657064	Symbol	* porder		5656663						
ANR	5657065	Symbol	pbt -> level		5656663						
ANR	5657066	DeclStmt									
ANR	5657067	Decl							const gx_ht_order_procs_t	const gx_ht_order_procs_t [ 2 ]	ht_order_procs_table
