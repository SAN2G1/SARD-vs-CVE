command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3186708	File	data/converged/CVE-2018-16863_ghostpdl/expat_xmlwf_xmlmime.c								
ANR	3186709	Function	getTok	36:0:1626:2964							
ANR	3186710	FunctionDef	getTok (const char * * pp)		3186709	0					
ANR	3186711	CompoundStatement		38:0:1670:2964	3186709	0					
ANR	3186712	ClassDefStatement	"enum { inAtom , inString , init , inComment }"	40:2:1753:1794	3186709	0	True				
ANR	3186713	ExpressionStatement		40:44:1795:1795	3186709	1	True				
ANR	3186714	IdentifierDeclStatement	int state = init ;	41:2:1799:1815	3186709	2	True				
ANR	3186715	IdentifierDecl	state = init		3186709	0					
ANR	3186716	IdentifierDeclType	int		3186709	0					
ANR	3186717	Identifier	state		3186709	1					
ANR	3186718	AssignmentExpression	state = init		3186709	2		=			
ANR	3186719	Identifier	init		3186709	0					
ANR	3186720	Identifier	init		3186709	1					
ANR	3186721	IdentifierDeclStatement	const char * tokStart = 0 ;	42:2:1819:1843	3186709	3	True				
ANR	3186722	IdentifierDecl	* tokStart = 0		3186709	0					
ANR	3186723	IdentifierDeclType	const char *		3186709	0					
ANR	3186724	Identifier	tokStart		3186709	1					
ANR	3186725	AssignmentExpression	* tokStart = 0		3186709	2		=			
ANR	3186726	Identifier	tokStart		3186709	0					
ANR	3186727	PrimaryExpression	0		3186709	1					
ANR	3186728	ForStatement	for ( ; ; )		3186709	4					
ANR	3186729	CompoundStatement		6:11:185:185	3186709	0					
ANR	3186730	SwitchStatement	switch ( * * pp )		3186709	0					
ANR	3186731	Condition	* * pp	44:12:1870:1873	3186709	0	True				
ANR	3186732	UnaryOperationExpression	* * pp		3186709	0					
ANR	3186733	UnaryOperator	*		3186709	0					
ANR	3186734	UnaryOperationExpression	* pp		3186709	1					
ANR	3186735	UnaryOperator	*		3186709	0					
ANR	3186736	Identifier	pp		3186709	1					
ANR	3186737	CompoundStatement		7:18:205:205	3186709	1					
ANR	3186738	Label	case '\\0' :	45:4:1882:1891	3186709	0	True				
ANR	3186739	IfStatement	if ( state == inAtom )		3186709	1					
ANR	3186740	Condition	state == inAtom	46:10:1903:1917	3186709	0	True				
ANR	3186741	EqualityExpression	state == inAtom		3186709	0		==			
ANR	3186742	Identifier	state		3186709	0					
ANR	3186743	Identifier	inAtom		3186709	1					
ANR	3186744	ReturnStatement	return tokStart ;	47:8:1928:1943	3186709	1	True				
ANR	3186745	Identifier	tokStart		3186709	0					
ANR	3186746	ReturnStatement	return 0 ;	48:6:1951:1959	3186709	2	True				
ANR	3186747	PrimaryExpression	0		3186709	0					
ANR	3186748	Label	case ' ' :	49:4:1965:1973	3186709	3	True				
ANR	3186749	Label	case '\\r' :	50:4:1979:1988	3186709	4	True				
ANR	3186750	Label	case '\\t' :	51:4:1994:2003	3186709	5	True				
ANR	3186751	Label	case '\\n' :	52:4:2009:2018	3186709	6	True				
ANR	3186752	IfStatement	if ( state == inAtom )		3186709	7					
ANR	3186753	Condition	state == inAtom	53:10:2030:2044	3186709	0	True				
ANR	3186754	EqualityExpression	state == inAtom		3186709	0		==			
ANR	3186755	Identifier	state		3186709	0					
ANR	3186756	Identifier	inAtom		3186709	1					
ANR	3186757	ReturnStatement	return tokStart ;	54:8:2055:2070	3186709	1	True				
ANR	3186758	Identifier	tokStart		3186709	0					
ANR	3186759	BreakStatement	break ;	55:6:2078:2083	3186709	8	True				
ANR	3186760	Label	case '(' :	56:4:2089:2097	3186709	9	True				
ANR	3186761	IfStatement	if ( state == inAtom )		3186709	10					
ANR	3186762	Condition	state == inAtom	57:10:2109:2123	3186709	0	True				
ANR	3186763	EqualityExpression	state == inAtom		3186709	0		==			
ANR	3186764	Identifier	state		3186709	0					
ANR	3186765	Identifier	inAtom		3186709	1					
ANR	3186766	ReturnStatement	return tokStart ;	58:8:2134:2149	3186709	1	True				
ANR	3186767	Identifier	tokStart		3186709	0					
ANR	3186768	IfStatement	if ( state != inString )		3186709	11					
ANR	3186769	Condition	state != inString	59:10:2161:2177	3186709	0	True				
ANR	3186770	EqualityExpression	state != inString		3186709	0		!=			
ANR	3186771	Identifier	state		3186709	0					
ANR	3186772	Identifier	inString		3186709	1					
ANR	3186773	ExpressionStatement	state ++	60:8:2188:2195	3186709	1	True				
ANR	3186774	PostIncDecOperationExpression	state ++		3186709	0					
ANR	3186775	Identifier	state		3186709	0					
ANR	3186776	IncDec	++		3186709	1					
ANR	3186777	BreakStatement	break ;	61:6:2203:2208	3186709	12	True				
ANR	3186778	Label	case ')' :	62:4:2214:2222	3186709	13	True				
ANR	3186779	IfStatement	if ( state > init )		3186709	14					
ANR	3186780	Condition	state > init	63:10:2234:2245	3186709	0	True				
ANR	3186781	RelationalExpression	state > init		3186709	0		>			
ANR	3186782	Identifier	state		3186709	0					
ANR	3186783	Identifier	init		3186709	1					
ANR	3186784	ExpressionStatement	-- state	64:8:2256:2263	3186709	1	True				
ANR	3186785	UnaryExpression	-- state		3186709	0					
ANR	3186786	IncDec	--		3186709	0					
ANR	3186787	Identifier	state		3186709	1					
ANR	3186788	ElseStatement	else		3186709	0					
ANR	3186789	IfStatement	if ( state != inString )		3186709	0					
ANR	3186790	Condition	state != inString	65:15:2280:2296	3186709	0	True				
ANR	3186791	EqualityExpression	state != inString		3186709	0		!=			
ANR	3186792	Identifier	state		3186709	0					
ANR	3186793	Identifier	inString		3186709	1					
ANR	3186794	ReturnStatement	return 0 ;	66:8:2307:2315	3186709	1	True				
ANR	3186795	PrimaryExpression	0		3186709	0					
ANR	3186796	BreakStatement	break ;	67:6:2323:2328	3186709	15	True				
ANR	3186797	Label	case ';' :	68:4:2334:2342	3186709	16	True				
ANR	3186798	Label	case '/' :	69:4:2348:2356	3186709	17	True				
ANR	3186799	Label	case '=' :	70:4:2362:2370	3186709	18	True				
ANR	3186800	IfStatement	if ( state == inAtom )		3186709	19					
ANR	3186801	Condition	state == inAtom	71:10:2382:2396	3186709	0	True				
ANR	3186802	EqualityExpression	state == inAtom		3186709	0		==			
ANR	3186803	Identifier	state		3186709	0					
ANR	3186804	Identifier	inAtom		3186709	1					
ANR	3186805	ReturnStatement	return tokStart ;	72:8:2407:2422	3186709	1	True				
ANR	3186806	Identifier	tokStart		3186709	0					
ANR	3186807	IfStatement	if ( state == init )		3186709	20					
ANR	3186808	Condition	state == init	73:10:2434:2446	3186709	0	True				
ANR	3186809	EqualityExpression	state == init		3186709	0		==			
ANR	3186810	Identifier	state		3186709	0					
ANR	3186811	Identifier	init		3186709	1					
ANR	3186812	ReturnStatement	return ( * pp ) ++ ;	74:8:2457:2471	3186709	1	True				
ANR	3186813	PostIncDecOperationExpression	( * pp ) ++		3186709	0					
ANR	3186814	UnaryOperationExpression	* pp		3186709	0					
ANR	3186815	UnaryOperator	*		3186709	0					
ANR	3186816	Identifier	pp		3186709	1					
ANR	3186817	IncDec	++		3186709	1					
ANR	3186818	BreakStatement	break ;	75:6:2479:2484	3186709	21	True				
ANR	3186819	Label	case '\\\\' :	76:4:2490:2499	3186709	22	True				
ANR	3186820	ExpressionStatement	++ * pp	77:6:2507:2512	3186709	23	True				
ANR	3186821	UnaryExpression	++ * pp		3186709	0					
ANR	3186822	IncDec	++		3186709	0					
ANR	3186823	UnaryOperationExpression	* pp		3186709	1					
ANR	3186824	UnaryOperator	*		3186709	0					
ANR	3186825	Identifier	pp		3186709	1					
ANR	3186826	IfStatement	if ( * * pp == '\\0' )		3186709	24					
ANR	3186827	Condition	* * pp == '\\0'	78:10:2524:2535	3186709	0	True				
ANR	3186828	EqualityExpression	* * pp == '\\0'		3186709	0		==			
ANR	3186829	UnaryOperationExpression	* * pp		3186709	0					
ANR	3186830	UnaryOperator	*		3186709	0					
ANR	3186831	UnaryOperationExpression	* pp		3186709	1					
ANR	3186832	UnaryOperator	*		3186709	0					
ANR	3186833	Identifier	pp		3186709	1					
ANR	3186834	PrimaryExpression	'\\0'		3186709	1					
ANR	3186835	ReturnStatement	return 0 ;	79:8:2546:2554	3186709	1	True				
ANR	3186836	PrimaryExpression	0		3186709	0					
ANR	3186837	BreakStatement	break ;	80:6:2562:2567	3186709	25	True				
ANR	3186838	Label	"case '""' :"	81:4:2573:2581	3186709	26	True				
ANR	3186839	SwitchStatement	switch ( state )		3186709	27					
ANR	3186840	Condition	state	82:14:2597:2601	3186709	0	True				
ANR	3186841	Identifier	state		3186709	0					
ANR	3186842	CompoundStatement		45:21:933:933	3186709	1					
ANR	3186843	Label	case inString :	83:6:2612:2625	3186709	0	True				
ANR	3186844	Identifier	inString		3186709	0					
ANR	3186845	ExpressionStatement	++ * pp	84:8:2635:2640	3186709	1	True				
ANR	3186846	UnaryExpression	++ * pp		3186709	0					
ANR	3186847	IncDec	++		3186709	0					
ANR	3186848	UnaryOperationExpression	* pp		3186709	1					
ANR	3186849	UnaryOperator	*		3186709	0					
ANR	3186850	Identifier	pp		3186709	1					
ANR	3186851	ReturnStatement	return tokStart ;	85:8:2650:2665	3186709	2	True				
ANR	3186852	Identifier	tokStart		3186709	0					
ANR	3186853	Label	case inAtom :	86:6:2673:2684	3186709	3	True				
ANR	3186854	Identifier	inAtom		3186709	0					
ANR	3186855	ReturnStatement	return tokStart ;	87:8:2694:2709	3186709	4	True				
ANR	3186856	Identifier	tokStart		3186709	0					
ANR	3186857	Label	case init :	88:6:2717:2726	3186709	5	True				
ANR	3186858	Identifier	init		3186709	0					
ANR	3186859	ExpressionStatement	tokStart = * pp	89:8:2736:2750	3186709	6	True				
ANR	3186860	AssignmentExpression	tokStart = * pp		3186709	0		=			
ANR	3186861	Identifier	tokStart		3186709	0					
ANR	3186862	UnaryOperationExpression	* pp		3186709	1					
ANR	3186863	UnaryOperator	*		3186709	0					
ANR	3186864	Identifier	pp		3186709	1					
ANR	3186865	ExpressionStatement	state = inString	90:8:2760:2776	3186709	7	True				
ANR	3186866	AssignmentExpression	state = inString		3186709	0		=			
ANR	3186867	Identifier	state		3186709	0					
ANR	3186868	Identifier	inString		3186709	1					
ANR	3186869	BreakStatement	break ;	91:8:2786:2791	3186709	8	True				
ANR	3186870	BreakStatement	break ;	93:6:2807:2812	3186709	28	True				
ANR	3186871	Label	default :	94:4:2818:2825	3186709	29	True				
ANR	3186872	Identifier	default		3186709	0					
ANR	3186873	IfStatement	if ( state == init )		3186709	30					
ANR	3186874	Condition	state == init	95:10:2837:2849	3186709	0	True				
ANR	3186875	EqualityExpression	state == init		3186709	0		==			
ANR	3186876	Identifier	state		3186709	0					
ANR	3186877	Identifier	init		3186709	1					
ANR	3186878	CompoundStatement		58:25:1181:1181	3186709	1					
ANR	3186879	ExpressionStatement	tokStart = * pp	96:8:2862:2876	3186709	0	True				
ANR	3186880	AssignmentExpression	tokStart = * pp		3186709	0		=			
ANR	3186881	Identifier	tokStart		3186709	0					
ANR	3186882	UnaryOperationExpression	* pp		3186709	1					
ANR	3186883	UnaryOperator	*		3186709	0					
ANR	3186884	Identifier	pp		3186709	1					
ANR	3186885	ExpressionStatement	state = inAtom	97:8:2886:2900	3186709	1	True				
ANR	3186886	AssignmentExpression	state = inAtom		3186709	0		=			
ANR	3186887	Identifier	state		3186709	0					
ANR	3186888	Identifier	inAtom		3186709	1					
ANR	3186889	BreakStatement	break ;	99:6:2916:2921	3186709	31	True				
ANR	3186890	ExpressionStatement	++ * pp	101:4:2933:2938	3186709	1	True				
ANR	3186891	UnaryExpression	++ * pp		3186709	0					
ANR	3186892	IncDec	++		3186709	0					
ANR	3186893	UnaryOperationExpression	* pp		3186709	1					
ANR	3186894	UnaryOperator	*		3186709	0					
ANR	3186895	Identifier	pp		3186709	1					
ANR	3186896	ReturnType	static const char *		3186709	1					
ANR	3186897	Identifier	getTok		3186709	2					
ANR	3186898	ParameterList	const char * * pp		3186709	3					
ANR	3186899	Parameter	const char * * pp	37:7:1653:1667	3186709	0	True				
ANR	3186900	ParameterType	const char * *		3186709	0					
ANR	3186901	Identifier	pp		3186709	1					
ANR	3186902	CFGEntryNode	ENTRY		3186709		True				
ANR	3186903	CFGExitNode	EXIT		3186709		True				
ANR	3186904	InfiniteForNode	true		3186709		True				
ANR	3186905	Symbol	pp		3186709						
ANR	3186906	Symbol	init		3186709						
ANR	3186907	Symbol	* pp		3186709						
ANR	3186908	Symbol	inString		3186709						
ANR	3186909	Symbol	tokStart		3186709						
ANR	3186910	Symbol	state		3186709						
ANR	3186911	Symbol	inAtom		3186709						
ANR	3186912	Symbol	* * pp		3186709						
ANR	3186913	Function	matchkey	108:0:3002:3239							
ANR	3186914	FunctionDef	"matchkey (const char * start , const char * end , const char * key)"		3186913	0					
ANR	3186915	CompoundStatement		110:0:3075:3239	3186913	0					
ANR	3186916	IfStatement	if ( ! start )		3186913	0					
ANR	3186917	Condition	! start	111:6:3083:3088	3186913	0	True				
ANR	3186918	UnaryOperationExpression	! start		3186913	0					
ANR	3186919	UnaryOperator	!		3186913	0					
ANR	3186920	Identifier	start		3186913	1					
ANR	3186921	ReturnStatement	return 0 ;	112:4:3095:3103	3186913	1	True				
ANR	3186922	PrimaryExpression	0		3186913	0					
ANR	3186923	ForStatement	"for ( ; start != end ; start ++ , key ++ )"		3186913	1					
ANR	3186924	Condition	start != end	113:9:3114:3125	3186913	0	True				
ANR	3186925	EqualityExpression	start != end		3186913	0		!=			
ANR	3186926	Identifier	start		3186913	0					
ANR	3186927	Identifier	end		3186913	1					
ANR	3186928	Expression	"start ++ , key ++"	113:23:3128:3141	3186913	1	True				
ANR	3186929	PostIncDecOperationExpression	start ++		3186913	0					
ANR	3186930	Identifier	start		3186913	0					
ANR	3186931	IncDec	++		3186913	1					
ANR	3186932	PostIncDecOperationExpression	key ++		3186913	1					
ANR	3186933	Identifier	key		3186913	0					
ANR	3186934	IncDec	++		3186913	1					
ANR	3186935	IfStatement	if ( * start != * key && * start != 'A' + ( * key - 'a' ) )		3186913	2					
ANR	3186936	Condition	* start != * key && * start != 'A' + ( * key - 'a' )	114:8:3152:3197	3186913	0	True				
ANR	3186937	AndExpression	* start != * key && * start != 'A' + ( * key - 'a' )		3186913	0		&&			
ANR	3186938	EqualityExpression	* start != * key		3186913	0		!=			
ANR	3186939	UnaryOperationExpression	* start		3186913	0					
ANR	3186940	UnaryOperator	*		3186913	0					
ANR	3186941	Identifier	start		3186913	1					
ANR	3186942	UnaryOperationExpression	* key		3186913	1					
ANR	3186943	UnaryOperator	*		3186913	0					
ANR	3186944	Identifier	key		3186913	1					
ANR	3186945	EqualityExpression	* start != 'A' + ( * key - 'a' )		3186913	1		!=			
ANR	3186946	UnaryOperationExpression	* start		3186913	0					
ANR	3186947	UnaryOperator	*		3186913	0					
ANR	3186948	Identifier	start		3186913	1					
ANR	3186949	AdditiveExpression	'A' + ( * key - 'a' )		3186913	1		+			
ANR	3186950	PrimaryExpression	'A'		3186913	0					
ANR	3186951	AdditiveExpression	* key - 'a'		3186913	1		-			
ANR	3186952	UnaryOperationExpression	* key		3186913	0					
ANR	3186953	UnaryOperator	*		3186913	0					
ANR	3186954	Identifier	key		3186913	1					
ANR	3186955	PrimaryExpression	'a'		3186913	1					
ANR	3186956	ReturnStatement	return 0 ;	115:6:3206:3214	3186913	1	True				
ANR	3186957	PrimaryExpression	0		3186913	0					
ANR	3186958	ReturnStatement	return * key == '\\0' ;	116:2:3218:3237	3186913	2	True				
ANR	3186959	EqualityExpression	* key == '\\0'		3186913	0		==			
ANR	3186960	UnaryOperationExpression	* key		3186913	0					
ANR	3186961	UnaryOperator	*		3186913	0					
ANR	3186962	Identifier	key		3186913	1					
ANR	3186963	PrimaryExpression	'\\0'		3186913	1					
ANR	3186964	ReturnType	static int		3186913	1					
ANR	3186965	Identifier	matchkey		3186913	2					
ANR	3186966	ParameterList	"const char * start , const char * end , const char * key"		3186913	3					
ANR	3186967	Parameter	const char * start	109:9:3022:3038	3186913	0	True				
ANR	3186968	ParameterType	const char *		3186913	0					
ANR	3186969	Identifier	start		3186913	1					
ANR	3186970	Parameter	const char * end	109:28:3041:3055	3186913	1	True				
ANR	3186971	ParameterType	const char *		3186913	0					
ANR	3186972	Identifier	end		3186913	1					
ANR	3186973	Parameter	const char * key	109:45:3058:3072	3186913	2	True				
ANR	3186974	ParameterType	const char *		3186913	0					
ANR	3186975	Identifier	key		3186913	1					
ANR	3186976	CFGEntryNode	ENTRY		3186913		True				
ANR	3186977	CFGExitNode	EXIT		3186913		True				
ANR	3186978	Symbol	* start		3186913						
ANR	3186979	Symbol	start		3186913						
ANR	3186980	Symbol	* key		3186913						
ANR	3186981	Symbol	end		3186913						
ANR	3186982	Symbol	key		3186913						
ANR	3186983	Function	getXMLCharset	119:0:3242:4549							
ANR	3186984	FunctionDef	"getXMLCharset (const char * buf , char * charset)"		3186983	0					
ANR	3186985	CompoundStatement		121:0:3293:4549	3186983	0					
ANR	3186986	IdentifierDeclStatement	"const char * next , * p ;"	122:2:3297:3317	3186983	0	True				
ANR	3186987	IdentifierDecl	* next		3186983	0					
ANR	3186988	IdentifierDeclType	const char *		3186983	0					
ANR	3186989	Identifier	next		3186983	1					
ANR	3186990	IdentifierDecl	* p		3186983	1					
ANR	3186991	IdentifierDeclType	const char *		3186983	0					
ANR	3186992	Identifier	p		3186983	1					
ANR	3186993	ExpressionStatement	charset [ 0 ] = '\\0'	124:2:3322:3339	3186983	1	True				
ANR	3186994	AssignmentExpression	charset [ 0 ] = '\\0'		3186983	0		=			
ANR	3186995	ArrayIndexing	charset [ 0 ]		3186983	0					
ANR	3186996	Identifier	charset		3186983	0					
ANR	3186997	PrimaryExpression	0		3186983	1					
ANR	3186998	PrimaryExpression	'\\0'		3186983	1					
ANR	3186999	ExpressionStatement	next = buf	125:2:3343:3353	3186983	2	True				
ANR	3187000	AssignmentExpression	next = buf		3186983	0		=			
ANR	3187001	Identifier	next		3186983	0					
ANR	3187002	Identifier	buf		3186983	1					
ANR	3187003	ExpressionStatement	p = getTok ( & next )	126:2:3357:3374	3186983	3	True				
ANR	3187004	AssignmentExpression	p = getTok ( & next )		3186983	0		=			
ANR	3187005	Identifier	p		3186983	0					
ANR	3187006	CallExpression	getTok ( & next )		3186983	1					
ANR	3187007	Callee	getTok		3186983	0					
ANR	3187008	Identifier	getTok		3186983	0					
ANR	3187009	ArgumentList	& next		3186983	1					
ANR	3187010	Argument	& next		3186983	0					
ANR	3187011	UnaryOperationExpression	& next		3186983	0					
ANR	3187012	UnaryOperator	&		3186983	0					
ANR	3187013	Identifier	next		3186983	1					
ANR	3187014	IfStatement	"if ( matchkey ( p , next , ""text"" ) )"		3186983	4					
ANR	3187015	Condition	"matchkey ( p , next , ""text"" )"	127:6:3382:3406	3186983	0	True				
ANR	3187016	CallExpression	"matchkey ( p , next , ""text"" )"		3186983	0					
ANR	3187017	Callee	matchkey		3186983	0					
ANR	3187018	Identifier	matchkey		3186983	0					
ANR	3187019	ArgumentList	p		3186983	1					
ANR	3187020	Argument	p		3186983	0					
ANR	3187021	Identifier	p		3186983	0					
ANR	3187022	Argument	next		3186983	1					
ANR	3187023	Identifier	next		3186983	0					
ANR	3187024	Argument	"""text"""		3186983	2					
ANR	3187025	PrimaryExpression	"""text"""		3186983	0					
ANR	3187026	ExpressionStatement	"strcpy ( charset , ""us-ascii"" )"	128:4:3413:3440	3186983	1	True				
ANR	3187027	CallExpression	"strcpy ( charset , ""us-ascii"" )"		3186983	0					
ANR	3187028	Callee	strcpy		3186983	0					
ANR	3187029	Identifier	strcpy		3186983	0					
ANR	3187030	ArgumentList	charset		3186983	1					
ANR	3187031	Argument	charset		3186983	0					
ANR	3187032	Identifier	charset		3186983	0					
ANR	3187033	Argument	"""us-ascii"""		3186983	1					
ANR	3187034	PrimaryExpression	"""us-ascii"""		3186983	0					
ANR	3187035	ElseStatement	else		3186983	0					
ANR	3187036	IfStatement	"if ( ! matchkey ( p , next , ""application"" ) )"		3186983	0					
ANR	3187037	Condition	"! matchkey ( p , next , ""application"" )"	129:11:3453:3485	3186983	0	True				
ANR	3187038	UnaryOperationExpression	"! matchkey ( p , next , ""application"" )"		3186983	0					
ANR	3187039	UnaryOperator	!		3186983	0					
ANR	3187040	CallExpression	"matchkey ( p , next , ""application"" )"		3186983	1					
ANR	3187041	Callee	matchkey		3186983	0					
ANR	3187042	Identifier	matchkey		3186983	0					
ANR	3187043	ArgumentList	p		3186983	1					
ANR	3187044	Argument	p		3186983	0					
ANR	3187045	Identifier	p		3186983	0					
ANR	3187046	Argument	next		3186983	1					
ANR	3187047	Identifier	next		3186983	0					
ANR	3187048	Argument	"""application"""		3186983	2					
ANR	3187049	PrimaryExpression	"""application"""		3186983	0					
ANR	3187050	ReturnStatement	return ;	130:4:3492:3498	3186983	1	True				
ANR	3187051	ExpressionStatement	p = getTok ( & next )	131:2:3502:3519	3186983	5	True				
ANR	3187052	AssignmentExpression	p = getTok ( & next )		3186983	0		=			
ANR	3187053	Identifier	p		3186983	0					
ANR	3187054	CallExpression	getTok ( & next )		3186983	1					
ANR	3187055	Callee	getTok		3186983	0					
ANR	3187056	Identifier	getTok		3186983	0					
ANR	3187057	ArgumentList	& next		3186983	1					
ANR	3187058	Argument	& next		3186983	0					
ANR	3187059	UnaryOperationExpression	& next		3186983	0					
ANR	3187060	UnaryOperator	&		3186983	0					
ANR	3187061	Identifier	next		3186983	1					
ANR	3187062	IfStatement	if ( ! p || * p != '/' )		3186983	6					
ANR	3187063	Condition	! p || * p != '/'	132:6:3527:3541	3186983	0	True				
ANR	3187064	OrExpression	! p || * p != '/'		3186983	0		||			
ANR	3187065	UnaryOperationExpression	! p		3186983	0					
ANR	3187066	UnaryOperator	!		3186983	0					
ANR	3187067	Identifier	p		3186983	1					
ANR	3187068	EqualityExpression	* p != '/'		3186983	1		!=			
ANR	3187069	UnaryOperationExpression	* p		3186983	0					
ANR	3187070	UnaryOperator	*		3186983	0					
ANR	3187071	Identifier	p		3186983	1					
ANR	3187072	PrimaryExpression	'/'		3186983	1					
ANR	3187073	ReturnStatement	return ;	133:4:3548:3554	3186983	1	True				
ANR	3187074	ExpressionStatement	p = getTok ( & next )	134:2:3558:3575	3186983	7	True				
ANR	3187075	AssignmentExpression	p = getTok ( & next )		3186983	0		=			
ANR	3187076	Identifier	p		3186983	0					
ANR	3187077	CallExpression	getTok ( & next )		3186983	1					
ANR	3187078	Callee	getTok		3186983	0					
ANR	3187079	Identifier	getTok		3186983	0					
ANR	3187080	ArgumentList	& next		3186983	1					
ANR	3187081	Argument	& next		3186983	0					
ANR	3187082	UnaryOperationExpression	& next		3186983	0					
ANR	3187083	UnaryOperator	&		3186983	0					
ANR	3187084	Identifier	next		3186983	1					
ANR	3187085	IfStatement	"if ( ! matchkey ( p , next , ""xml"" ) && charset [ 0 ] == '\\0' )"		3186983	8					
ANR	3187086	Condition	"! matchkey ( p , next , ""xml"" ) && charset [ 0 ] == '\\0'"	136:6:3589:3635	3186983	0	True				
ANR	3187087	AndExpression	"! matchkey ( p , next , ""xml"" ) && charset [ 0 ] == '\\0'"		3186983	0		&&			
ANR	3187088	UnaryOperationExpression	"! matchkey ( p , next , ""xml"" )"		3186983	0					
ANR	3187089	UnaryOperator	!		3186983	0					
ANR	3187090	CallExpression	"matchkey ( p , next , ""xml"" )"		3186983	1					
ANR	3187091	Callee	matchkey		3186983	0					
ANR	3187092	Identifier	matchkey		3186983	0					
ANR	3187093	ArgumentList	p		3186983	1					
ANR	3187094	Argument	p		3186983	0					
ANR	3187095	Identifier	p		3186983	0					
ANR	3187096	Argument	next		3186983	1					
ANR	3187097	Identifier	next		3186983	0					
ANR	3187098	Argument	"""xml"""		3186983	2					
ANR	3187099	PrimaryExpression	"""xml"""		3186983	0					
ANR	3187100	EqualityExpression	charset [ 0 ] == '\\0'		3186983	1		==			
ANR	3187101	ArrayIndexing	charset [ 0 ]		3186983	0					
ANR	3187102	Identifier	charset		3186983	0					
ANR	3187103	PrimaryExpression	0		3186983	1					
ANR	3187104	PrimaryExpression	'\\0'		3186983	1					
ANR	3187105	ReturnStatement	return ;	137:4:3642:3648	3186983	1	True				
ANR	3187106	ExpressionStatement	p = getTok ( & next )	139:2:3659:3676	3186983	9	True				
ANR	3187107	AssignmentExpression	p = getTok ( & next )		3186983	0		=			
ANR	3187108	Identifier	p		3186983	0					
ANR	3187109	CallExpression	getTok ( & next )		3186983	1					
ANR	3187110	Callee	getTok		3186983	0					
ANR	3187111	Identifier	getTok		3186983	0					
ANR	3187112	ArgumentList	& next		3186983	1					
ANR	3187113	Argument	& next		3186983	0					
ANR	3187114	UnaryOperationExpression	& next		3186983	0					
ANR	3187115	UnaryOperator	&		3186983	0					
ANR	3187116	Identifier	next		3186983	1					
ANR	3187117	WhileStatement	while ( p )		3186983	10					
ANR	3187118	Condition	p	140:9:3687:3687	3186983	0	True				
ANR	3187119	Identifier	p		3186983	0					
ANR	3187120	CompoundStatement		20:12:396:396	3186983	1					
ANR	3187121	IfStatement	if ( * p == ';' )		3186983	0					
ANR	3187122	Condition	* p == ';'	141:8:3700:3708	3186983	0	True				
ANR	3187123	EqualityExpression	* p == ';'		3186983	0		==			
ANR	3187124	UnaryOperationExpression	* p		3186983	0					
ANR	3187125	UnaryOperator	*		3186983	0					
ANR	3187126	Identifier	p		3186983	1					
ANR	3187127	PrimaryExpression	';'		3186983	1					
ANR	3187128	CompoundStatement		21:19:417:417	3186983	1					
ANR	3187129	ExpressionStatement	p = getTok ( & next )	142:6:3719:3736	3186983	0	True				
ANR	3187130	AssignmentExpression	p = getTok ( & next )		3186983	0		=			
ANR	3187131	Identifier	p		3186983	0					
ANR	3187132	CallExpression	getTok ( & next )		3186983	1					
ANR	3187133	Callee	getTok		3186983	0					
ANR	3187134	Identifier	getTok		3186983	0					
ANR	3187135	ArgumentList	& next		3186983	1					
ANR	3187136	Argument	& next		3186983	0					
ANR	3187137	UnaryOperationExpression	& next		3186983	0					
ANR	3187138	UnaryOperator	&		3186983	0					
ANR	3187139	Identifier	next		3186983	1					
ANR	3187140	IfStatement	"if ( matchkey ( p , next , ""charset"" ) )"		3186983	1					
ANR	3187141	Condition	"matchkey ( p , next , ""charset"" )"	143:10:3748:3775	3186983	0	True				
ANR	3187142	CallExpression	"matchkey ( p , next , ""charset"" )"		3186983	0					
ANR	3187143	Callee	matchkey		3186983	0					
ANR	3187144	Identifier	matchkey		3186983	0					
ANR	3187145	ArgumentList	p		3186983	1					
ANR	3187146	Argument	p		3186983	0					
ANR	3187147	Identifier	p		3186983	0					
ANR	3187148	Argument	next		3186983	1					
ANR	3187149	Identifier	next		3186983	0					
ANR	3187150	Argument	"""charset"""		3186983	2					
ANR	3187151	PrimaryExpression	"""charset"""		3186983	0					
ANR	3187152	CompoundStatement		23:40:484:484	3186983	1					
ANR	3187153	ExpressionStatement	p = getTok ( & next )	144:8:3788:3805	3186983	0	True				
ANR	3187154	AssignmentExpression	p = getTok ( & next )		3186983	0		=			
ANR	3187155	Identifier	p		3186983	0					
ANR	3187156	CallExpression	getTok ( & next )		3186983	1					
ANR	3187157	Callee	getTok		3186983	0					
ANR	3187158	Identifier	getTok		3186983	0					
ANR	3187159	ArgumentList	& next		3186983	1					
ANR	3187160	Argument	& next		3186983	0					
ANR	3187161	UnaryOperationExpression	& next		3186983	0					
ANR	3187162	UnaryOperator	&		3186983	0					
ANR	3187163	Identifier	next		3186983	1					
ANR	3187164	IfStatement	if ( p && * p == '=' )		3186983	1					
ANR	3187165	Condition	p && * p == '='	145:12:3819:3832	3186983	0	True				
ANR	3187166	AndExpression	p && * p == '='		3186983	0		&&			
ANR	3187167	Identifier	p		3186983	0					
ANR	3187168	EqualityExpression	* p == '='		3186983	1		==			
ANR	3187169	UnaryOperationExpression	* p		3186983	0					
ANR	3187170	UnaryOperator	*		3186983	0					
ANR	3187171	Identifier	p		3186983	1					
ANR	3187172	PrimaryExpression	'='		3186983	1					
ANR	3187173	CompoundStatement		25:28:541:541	3186983	1					
ANR	3187174	ExpressionStatement	p = getTok ( & next )	146:10:3847:3864	3186983	0	True				
ANR	3187175	AssignmentExpression	p = getTok ( & next )		3186983	0		=			
ANR	3187176	Identifier	p		3186983	0					
ANR	3187177	CallExpression	getTok ( & next )		3186983	1					
ANR	3187178	Callee	getTok		3186983	0					
ANR	3187179	Identifier	getTok		3186983	0					
ANR	3187180	ArgumentList	& next		3186983	1					
ANR	3187181	Argument	& next		3186983	0					
ANR	3187182	UnaryOperationExpression	& next		3186983	0					
ANR	3187183	UnaryOperator	&		3186983	0					
ANR	3187184	Identifier	next		3186983	1					
ANR	3187185	IfStatement	if ( p )		3186983	1					
ANR	3187186	Condition	p	147:14:3880:3880	3186983	0	True				
ANR	3187187	Identifier	p		3186983	0					
ANR	3187188	CompoundStatement		28:12:603:620	3186983	1					
ANR	3187189	IdentifierDeclStatement	char * s = charset ;	148:12:3897:3914	3186983	0	True				
ANR	3187190	IdentifierDecl	* s = charset		3186983	0					
ANR	3187191	IdentifierDeclType	char *		3186983	0					
ANR	3187192	Identifier	s		3186983	1					
ANR	3187193	AssignmentExpression	* s = charset		3186983	2		=			
ANR	3187194	Identifier	charset		3186983	0					
ANR	3187195	Identifier	charset		3186983	1					
ANR	3187196	IfStatement	"if ( * p == '""' )"		3186983	1					
ANR	3187197	Condition	"* p == '""'"	149:16:3932:3940	3186983	0	True				
ANR	3187198	EqualityExpression	"* p == '""'"		3186983	0		==			
ANR	3187199	UnaryOperationExpression	* p		3186983	0					
ANR	3187200	UnaryOperator	*		3186983	0					
ANR	3187201	Identifier	p		3186983	1					
ANR	3187202	PrimaryExpression	"'""'"		3186983	1					
ANR	3187203	CompoundStatement		29:27:649:649	3186983	1					
ANR	3187204	WhileStatement	while ( ++ p != next - 1 )		3186983	0					
ANR	3187205	Condition	++ p != next - 1	150:21:3966:3980	3186983	0	True				
ANR	3187206	EqualityExpression	++ p != next - 1		3186983	0		!=			
ANR	3187207	UnaryExpression	++ p		3186983	0					
ANR	3187208	IncDec	++		3186983	0					
ANR	3187209	Identifier	p		3186983	1					
ANR	3187210	AdditiveExpression	next - 1		3186983	1		-			
ANR	3187211	Identifier	next		3186983	0					
ANR	3187212	PrimaryExpression	1		3186983	1					
ANR	3187213	CompoundStatement		30:38:689:689	3186983	1					
ANR	3187214	IfStatement	if ( * p == '\\\\' )		3186983	0					
ANR	3187215	Condition	* p == '\\\\'	151:20:4005:4014	3186983	0	True				
ANR	3187216	EqualityExpression	* p == '\\\\'		3186983	0		==			
ANR	3187217	UnaryOperationExpression	* p		3186983	0					
ANR	3187218	UnaryOperator	*		3186983	0					
ANR	3187219	Identifier	p		3186983	1					
ANR	3187220	PrimaryExpression	'\\\\'		3186983	1					
ANR	3187221	ExpressionStatement	++ p	152:18:4035:4038	3186983	1	True				
ANR	3187222	UnaryExpression	++ p		3186983	0					
ANR	3187223	IncDec	++		3186983	0					
ANR	3187224	Identifier	p		3186983	1					
ANR	3187225	IfStatement	if ( s == charset + CHARSET_MAX - 1 )		3186983	1					
ANR	3187226	Condition	s == charset + CHARSET_MAX - 1	153:20:4060:4089	3186983	0	True				
ANR	3187227	EqualityExpression	s == charset + CHARSET_MAX - 1		3186983	0		==			
ANR	3187228	Identifier	s		3186983	0					
ANR	3187229	AdditiveExpression	charset + CHARSET_MAX - 1		3186983	1		+			
ANR	3187230	Identifier	charset		3186983	0					
ANR	3187231	AdditiveExpression	CHARSET_MAX - 1		3186983	1		-			
ANR	3187232	Identifier	CHARSET_MAX		3186983	0					
ANR	3187233	PrimaryExpression	1		3186983	1					
ANR	3187234	CompoundStatement		33:52:798:798	3186983	1					
ANR	3187235	ExpressionStatement	charset [ 0 ] = '\\0'	154:18:4112:4129	3186983	0	True				
ANR	3187236	AssignmentExpression	charset [ 0 ] = '\\0'		3186983	0		=			
ANR	3187237	ArrayIndexing	charset [ 0 ]		3186983	0					
ANR	3187238	Identifier	charset		3186983	0					
ANR	3187239	PrimaryExpression	0		3186983	1					
ANR	3187240	PrimaryExpression	'\\0'		3186983	1					
ANR	3187241	BreakStatement	break ;	155:18:4149:4154	3186983	1	True				
ANR	3187242	ExpressionStatement	* s ++ = * p	157:16:4190:4199	3186983	2	True				
ANR	3187243	AssignmentExpression	* s ++ = * p		3186983	0		=			
ANR	3187244	UnaryOperationExpression	* s ++		3186983	0					
ANR	3187245	UnaryOperator	*		3186983	0					
ANR	3187246	PostIncDecOperationExpression	s ++		3186983	1					
ANR	3187247	Identifier	s		3186983	0					
ANR	3187248	IncDec	++		3186983	1					
ANR	3187249	UnaryOperationExpression	* p		3186983	1					
ANR	3187250	UnaryOperator	*		3186983	0					
ANR	3187251	Identifier	p		3186983	1					
ANR	3187252	ExpressionStatement	* s ++ = '\\0'	159:14:4231:4242	3186983	1	True				
ANR	3187253	AssignmentExpression	* s ++ = '\\0'		3186983	0		=			
ANR	3187254	UnaryOperationExpression	* s ++		3186983	0					
ANR	3187255	UnaryOperator	*		3186983	0					
ANR	3187256	PostIncDecOperationExpression	s ++		3186983	1					
ANR	3187257	Identifier	s		3186983	0					
ANR	3187258	IncDec	++		3186983	1					
ANR	3187259	PrimaryExpression	'\\0'		3186983	1					
ANR	3187260	ElseStatement	else		3186983	0					
ANR	3187261	CompoundStatement		41:17:981:981	3186983	0					
ANR	3187262	IfStatement	if ( next - p > CHARSET_MAX - 1 )		3186983	0					
ANR	3187263	Condition	next - p > CHARSET_MAX - 1	162:18:4295:4320	3186983	0	True				
ANR	3187264	RelationalExpression	next - p > CHARSET_MAX - 1		3186983	0		>			
ANR	3187265	AdditiveExpression	next - p		3186983	0		-			
ANR	3187266	Identifier	next		3186983	0					
ANR	3187267	Identifier	p		3186983	1					
ANR	3187268	AdditiveExpression	CHARSET_MAX - 1		3186983	1		-			
ANR	3187269	Identifier	CHARSET_MAX		3186983	0					
ANR	3187270	PrimaryExpression	1		3186983	1					
ANR	3187271	BreakStatement	break ;	163:16:4339:4344	3186983	1	True				
ANR	3187272	WhileStatement	while ( p != next )		3186983	1					
ANR	3187273	Condition	p != next	164:21:4367:4375	3186983	0	True				
ANR	3187274	EqualityExpression	p != next		3186983	0		!=			
ANR	3187275	Identifier	p		3186983	0					
ANR	3187276	Identifier	next		3186983	1					
ANR	3187277	ExpressionStatement	* s ++ = * p ++	165:16:4394:4405	3186983	1	True				
ANR	3187278	AssignmentExpression	* s ++ = * p ++		3186983	0		=			
ANR	3187279	UnaryOperationExpression	* s ++		3186983	0					
ANR	3187280	UnaryOperator	*		3186983	0					
ANR	3187281	PostIncDecOperationExpression	s ++		3186983	1					
ANR	3187282	Identifier	s		3186983	0					
ANR	3187283	IncDec	++		3186983	1					
ANR	3187284	UnaryOperationExpression	* p ++		3186983	1					
ANR	3187285	UnaryOperator	*		3186983	0					
ANR	3187286	PostIncDecOperationExpression	p ++		3186983	1					
ANR	3187287	Identifier	p		3186983	0					
ANR	3187288	IncDec	++		3186983	1					
ANR	3187289	ExpressionStatement	* s = 0	166:14:4421:4427	3186983	2	True				
ANR	3187290	AssignmentExpression	* s = 0		3186983	0		=			
ANR	3187291	UnaryOperationExpression	* s		3186983	0					
ANR	3187292	UnaryOperator	*		3186983	0					
ANR	3187293	Identifier	s		3186983	1					
ANR	3187294	PrimaryExpression	0		3186983	1					
ANR	3187295	BreakStatement	break ;	167:14:4443:4448	3186983	3	True				
ANR	3187296	BreakStatement	break ;	171:8:4494:4499	3186983	2	True				
ANR	3187297	ElseStatement	else		3186983	0					
ANR	3187298	ExpressionStatement	p = getTok ( & next )	175:4:4526:4543	3186983	0	True				
ANR	3187299	AssignmentExpression	p = getTok ( & next )		3186983	0		=			
ANR	3187300	Identifier	p		3186983	0					
ANR	3187301	CallExpression	getTok ( & next )		3186983	1					
ANR	3187302	Callee	getTok		3186983	0					
ANR	3187303	Identifier	getTok		3186983	0					
ANR	3187304	ArgumentList	& next		3186983	1					
ANR	3187305	Argument	& next		3186983	0					
ANR	3187306	UnaryOperationExpression	& next		3186983	0					
ANR	3187307	UnaryOperator	&		3186983	0					
ANR	3187308	Identifier	next		3186983	1					
ANR	3187309	ReturnType	void		3186983	1					
ANR	3187310	Identifier	getXMLCharset		3186983	2					
ANR	3187311	ParameterList	"const char * buf , char * charset"		3186983	3					
ANR	3187312	Parameter	const char * buf	120:14:3261:3275	3186983	0	True				
ANR	3187313	ParameterType	const char *		3186983	0					
ANR	3187314	Identifier	buf		3186983	1					
ANR	3187315	Parameter	char * charset	120:31:3278:3290	3186983	1	True				
ANR	3187316	ParameterType	char *		3186983	0					
ANR	3187317	Identifier	charset		3186983	1					
ANR	3187318	CFGEntryNode	ENTRY		3186983		True				
ANR	3187319	CFGExitNode	EXIT		3186983		True				
ANR	3187320	Symbol	next		3186983						
ANR	3187321	Symbol	* s ++		3186983						
ANR	3187322	Symbol	charset		3186983						
ANR	3187323	Symbol	& next		3186983						
ANR	3187324	Symbol	CHARSET_MAX		3186983						
ANR	3187325	Symbol	* p ++		3186983						
ANR	3187326	Symbol	matchkey		3186983						
ANR	3187327	Symbol	p		3186983						
ANR	3187328	Symbol	buf		3186983						
ANR	3187329	Symbol	getTok		3186983						
ANR	3187330	Symbol	s		3186983						
ANR	3187331	Symbol	* p		3186983						
ANR	3187332	Symbol	* charset		3186983						
ANR	3187333	Symbol	* s		3186983						
ANR	3187334	Function	main	183:0:4585:4781							
ANR	3187335	FunctionDef	"main (int argc , char * argv [ ])"		3187334	0					
ANR	3187336	CompoundStatement		185:0:4618:4781	3187334	0					
ANR	3187337	IdentifierDeclStatement	char buf [ CHARSET_MAX ] ;	186:2:4622:4643	3187334	0	True				
ANR	3187338	IdentifierDecl	buf [ CHARSET_MAX ]		3187334	0					
ANR	3187339	IdentifierDeclType	char [ CHARSET_MAX ]		3187334	0					
ANR	3187340	Identifier	buf		3187334	1					
ANR	3187341	Identifier	CHARSET_MAX		3187334	2					
ANR	3187342	IfStatement	if ( argc <= 1 )		3187334	1					
ANR	3187343	Condition	argc <= 1	187:6:4651:4659	3187334	0	True				
ANR	3187344	RelationalExpression	argc <= 1		3187334	0		<=			
ANR	3187345	Identifier	argc		3187334	0					
ANR	3187346	PrimaryExpression	1		3187334	1					
ANR	3187347	ReturnStatement	return 1 ;	188:4:4666:4674	3187334	1	True				
ANR	3187348	PrimaryExpression	1		3187334	0					
ANR	3187349	ExpressionStatement	"printf ( ""%s\\n"" , argv [ 1 ] )"	189:2:4678:4701	3187334	2	True				
ANR	3187350	CallExpression	"printf ( ""%s\\n"" , argv [ 1 ] )"		3187334	0					
ANR	3187351	Callee	printf		3187334	0					
ANR	3187352	Identifier	printf		3187334	0					
ANR	3187353	ArgumentList	"""%s\\n"""		3187334	1					
ANR	3187354	Argument	"""%s\\n"""		3187334	0					
ANR	3187355	PrimaryExpression	"""%s\\n"""		3187334	0					
ANR	3187356	Argument	argv [ 1 ]		3187334	1					
ANR	3187357	ArrayIndexing	argv [ 1 ]		3187334	0					
ANR	3187358	Identifier	argv		3187334	0					
ANR	3187359	PrimaryExpression	1		3187334	1					
ANR	3187360	ExpressionStatement	"getXMLCharset ( argv [ 1 ] , buf )"	190:2:4705:4732	3187334	3	True				
ANR	3187361	CallExpression	"getXMLCharset ( argv [ 1 ] , buf )"		3187334	0					
ANR	3187362	Callee	getXMLCharset		3187334	0					
ANR	3187363	Identifier	getXMLCharset		3187334	0					
ANR	3187364	ArgumentList	argv [ 1 ]		3187334	1					
ANR	3187365	Argument	argv [ 1 ]		3187334	0					
ANR	3187366	ArrayIndexing	argv [ 1 ]		3187334	0					
ANR	3187367	Identifier	argv		3187334	0					
ANR	3187368	PrimaryExpression	1		3187334	1					
ANR	3187369	Argument	buf		3187334	1					
ANR	3187370	Identifier	buf		3187334	0					
ANR	3187371	ExpressionStatement	"printf ( ""charset=\\""%s\\""\\n"" , buf )"	191:2:4736:4767	3187334	4	True				
ANR	3187372	CallExpression	"printf ( ""charset=\\""%s\\""\\n"" , buf )"		3187334	0					
ANR	3187373	Callee	printf		3187334	0					
ANR	3187374	Identifier	printf		3187334	0					
ANR	3187375	ArgumentList	"""charset=\\""%s\\""\\n"""		3187334	1					
ANR	3187376	Argument	"""charset=\\""%s\\""\\n"""		3187334	0					
ANR	3187377	PrimaryExpression	"""charset=\\""%s\\""\\n"""		3187334	0					
ANR	3187378	Argument	buf		3187334	1					
ANR	3187379	Identifier	buf		3187334	0					
ANR	3187380	ReturnStatement	return 0 ;	192:2:4771:4779	3187334	5	True				
ANR	3187381	PrimaryExpression	0		3187334	0					
ANR	3187382	ReturnType	int		3187334	1					
ANR	3187383	Identifier	main		3187334	2					
ANR	3187384	ParameterList	"int argc , char * argv [ ]"		3187334	3					
ANR	3187385	Parameter	int argc	184:5:4594:4601	3187334	0	True				
ANR	3187386	ParameterType	int		3187334	0					
ANR	3187387	Identifier	argc		3187334	1					
ANR	3187388	Parameter	char * argv [ ]	184:15:4604:4615	3187334	1	True				
ANR	3187389	ParameterType	char * [ ]		3187334	0					
ANR	3187390	Identifier	argv		3187334	1					
ANR	3187391	CFGEntryNode	ENTRY		3187334		True				
ANR	3187392	CFGExitNode	EXIT		3187334		True				
ANR	3187393	Symbol	argc		3187334						
ANR	3187394	Symbol	buf		3187334						
ANR	3187395	Symbol	* argv		3187334						
ANR	3187396	Symbol	argv		3187334						
