command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3148352	File	data/converged/CVE-2018-16863_ghostpdl/expat_lib_xmltok.c								
ANR	3148353	Function	isNever	156:0:5124:5225							
ANR	3148354	FunctionDef	"isNever (const ENCODING * UNUSED_P ( enc ) , const char * UNUSED_P ( p ))"		3148353	0					
ANR	3148355	CompoundStatement		158:0:5211:5225	3148353	0					
ANR	3148356	ReturnStatement	return 0 ;	159:2:5215:5223	3148353	0	True				
ANR	3148357	PrimaryExpression	0		3148353	0					
ANR	3148358	ReturnType	static int PTRFASTCALL		3148353	1					
ANR	3148359	Identifier	isNever		3148353	2					
ANR	3148360	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * UNUSED_P ( p )"		3148353	3					
ANR	3148361	Parameter	const ENCODING * UNUSED_P ( enc )	157:8:5155:5183	3148353	0	True				
ANR	3148362	ParameterType	const ENCODING * ( enc )		3148353	0					
ANR	3148363	Identifier	UNUSED_P		3148353	1					
ANR	3148364	Parameter	const char * UNUSED_P ( p )	157:39:5186:5208	3148353	1	True				
ANR	3148365	ParameterType	const char * ( p )		3148353	0					
ANR	3148366	Identifier	UNUSED_P		3148353	1					
ANR	3148367	CFGEntryNode	ENTRY		3148353		True				
ANR	3148368	CFGExitNode	EXIT		3148353		True				
ANR	3148369	Symbol	UNUSED_P		3148353						
ANR	3148370	Function	utf8_isName2	162:0:5228:5376							
ANR	3148371	FunctionDef	"utf8_isName2 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		3148370	0					
ANR	3148372	CompoundStatement		164:0:5310:5376	3148370	0					
ANR	3148373	ReturnStatement	"return UTF8_GET_NAMING2 ( namePages , ( const unsigned char * ) p ) ;"	165:2:5314:5374	3148370	0	True				
ANR	3148374	CallExpression	"UTF8_GET_NAMING2 ( namePages , ( const unsigned char * ) p )"		3148370	0					
ANR	3148375	Callee	UTF8_GET_NAMING2		3148370	0					
ANR	3148376	Identifier	UTF8_GET_NAMING2		3148370	0					
ANR	3148377	ArgumentList	namePages		3148370	1					
ANR	3148378	Argument	namePages		3148370	0					
ANR	3148379	Identifier	namePages		3148370	0					
ANR	3148380	Argument	( const unsigned char * ) p		3148370	1					
ANR	3148381	CastExpression	( const unsigned char * ) p		3148370	0					
ANR	3148382	CastTarget	const unsigned char *		3148370	0					
ANR	3148383	Identifier	p		3148370	1					
ANR	3148384	ReturnType	static int PTRFASTCALL		3148370	1					
ANR	3148385	Identifier	utf8_isName2		3148370	2					
ANR	3148386	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		3148370	3					
ANR	3148387	Parameter	const ENCODING * UNUSED_P ( enc )	163:13:5264:5292	3148370	0	True				
ANR	3148388	ParameterType	const ENCODING * ( enc )		3148370	0					
ANR	3148389	Identifier	UNUSED_P		3148370	1					
ANR	3148390	Parameter	const char * p	163:44:5295:5307	3148370	1	True				
ANR	3148391	ParameterType	const char *		3148370	0					
ANR	3148392	Identifier	p		3148370	1					
ANR	3148393	CFGEntryNode	ENTRY		3148370		True				
ANR	3148394	CFGExitNode	EXIT		3148370		True				
ANR	3148395	Symbol	UNUSED_P		3148370						
ANR	3148396	Symbol	p		3148370						
ANR	3148397	Symbol	UTF8_GET_NAMING2		3148370						
ANR	3148398	Symbol	namePages		3148370						
ANR	3148399	Function	utf8_isName3	168:0:5379:5527							
ANR	3148400	FunctionDef	"utf8_isName3 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		3148399	0					
ANR	3148401	CompoundStatement		170:0:5461:5527	3148399	0					
ANR	3148402	ReturnStatement	"return UTF8_GET_NAMING3 ( namePages , ( const unsigned char * ) p ) ;"	171:2:5465:5525	3148399	0	True				
ANR	3148403	CallExpression	"UTF8_GET_NAMING3 ( namePages , ( const unsigned char * ) p )"		3148399	0					
ANR	3148404	Callee	UTF8_GET_NAMING3		3148399	0					
ANR	3148405	Identifier	UTF8_GET_NAMING3		3148399	0					
ANR	3148406	ArgumentList	namePages		3148399	1					
ANR	3148407	Argument	namePages		3148399	0					
ANR	3148408	Identifier	namePages		3148399	0					
ANR	3148409	Argument	( const unsigned char * ) p		3148399	1					
ANR	3148410	CastExpression	( const unsigned char * ) p		3148399	0					
ANR	3148411	CastTarget	const unsigned char *		3148399	0					
ANR	3148412	Identifier	p		3148399	1					
ANR	3148413	ReturnType	static int PTRFASTCALL		3148399	1					
ANR	3148414	Identifier	utf8_isName3		3148399	2					
ANR	3148415	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		3148399	3					
ANR	3148416	Parameter	const ENCODING * UNUSED_P ( enc )	169:13:5415:5443	3148399	0	True				
ANR	3148417	ParameterType	const ENCODING * ( enc )		3148399	0					
ANR	3148418	Identifier	UNUSED_P		3148399	1					
ANR	3148419	Parameter	const char * p	169:44:5446:5458	3148399	1	True				
ANR	3148420	ParameterType	const char *		3148399	0					
ANR	3148421	Identifier	p		3148399	1					
ANR	3148422	CFGEntryNode	ENTRY		3148399		True				
ANR	3148423	CFGExitNode	EXIT		3148399		True				
ANR	3148424	Symbol	UNUSED_P		3148399						
ANR	3148425	Symbol	p		3148399						
ANR	3148426	Symbol	UTF8_GET_NAMING3		3148399						
ANR	3148427	Symbol	namePages		3148399						
ANR	3148428	Function	utf8_isNmstrt2	176:0:5560:5712							
ANR	3148429	FunctionDef	"utf8_isNmstrt2 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		3148428	0					
ANR	3148430	CompoundStatement		178:0:5644:5712	3148428	0					
ANR	3148431	ReturnStatement	"return UTF8_GET_NAMING2 ( nmstrtPages , ( const unsigned char * ) p ) ;"	179:2:5648:5710	3148428	0	True				
ANR	3148432	CallExpression	"UTF8_GET_NAMING2 ( nmstrtPages , ( const unsigned char * ) p )"		3148428	0					
ANR	3148433	Callee	UTF8_GET_NAMING2		3148428	0					
ANR	3148434	Identifier	UTF8_GET_NAMING2		3148428	0					
ANR	3148435	ArgumentList	nmstrtPages		3148428	1					
ANR	3148436	Argument	nmstrtPages		3148428	0					
ANR	3148437	Identifier	nmstrtPages		3148428	0					
ANR	3148438	Argument	( const unsigned char * ) p		3148428	1					
ANR	3148439	CastExpression	( const unsigned char * ) p		3148428	0					
ANR	3148440	CastTarget	const unsigned char *		3148428	0					
ANR	3148441	Identifier	p		3148428	1					
ANR	3148442	ReturnType	static int PTRFASTCALL		3148428	1					
ANR	3148443	Identifier	utf8_isNmstrt2		3148428	2					
ANR	3148444	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		3148428	3					
ANR	3148445	Parameter	const ENCODING * UNUSED_P ( enc )	177:15:5598:5626	3148428	0	True				
ANR	3148446	ParameterType	const ENCODING * ( enc )		3148428	0					
ANR	3148447	Identifier	UNUSED_P		3148428	1					
ANR	3148448	Parameter	const char * p	177:46:5629:5641	3148428	1	True				
ANR	3148449	ParameterType	const char *		3148428	0					
ANR	3148450	Identifier	p		3148428	1					
ANR	3148451	CFGEntryNode	ENTRY		3148428		True				
ANR	3148452	CFGExitNode	EXIT		3148428		True				
ANR	3148453	Symbol	UNUSED_P		3148428						
ANR	3148454	Symbol	p		3148428						
ANR	3148455	Symbol	UTF8_GET_NAMING2		3148428						
ANR	3148456	Symbol	nmstrtPages		3148428						
ANR	3148457	Function	utf8_isNmstrt3	182:0:5715:5867							
ANR	3148458	FunctionDef	"utf8_isNmstrt3 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		3148457	0					
ANR	3148459	CompoundStatement		184:0:5799:5867	3148457	0					
ANR	3148460	ReturnStatement	"return UTF8_GET_NAMING3 ( nmstrtPages , ( const unsigned char * ) p ) ;"	185:2:5803:5865	3148457	0	True				
ANR	3148461	CallExpression	"UTF8_GET_NAMING3 ( nmstrtPages , ( const unsigned char * ) p )"		3148457	0					
ANR	3148462	Callee	UTF8_GET_NAMING3		3148457	0					
ANR	3148463	Identifier	UTF8_GET_NAMING3		3148457	0					
ANR	3148464	ArgumentList	nmstrtPages		3148457	1					
ANR	3148465	Argument	nmstrtPages		3148457	0					
ANR	3148466	Identifier	nmstrtPages		3148457	0					
ANR	3148467	Argument	( const unsigned char * ) p		3148457	1					
ANR	3148468	CastExpression	( const unsigned char * ) p		3148457	0					
ANR	3148469	CastTarget	const unsigned char *		3148457	0					
ANR	3148470	Identifier	p		3148457	1					
ANR	3148471	ReturnType	static int PTRFASTCALL		3148457	1					
ANR	3148472	Identifier	utf8_isNmstrt3		3148457	2					
ANR	3148473	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		3148457	3					
ANR	3148474	Parameter	const ENCODING * UNUSED_P ( enc )	183:15:5753:5781	3148457	0	True				
ANR	3148475	ParameterType	const ENCODING * ( enc )		3148457	0					
ANR	3148476	Identifier	UNUSED_P		3148457	1					
ANR	3148477	Parameter	const char * p	183:46:5784:5796	3148457	1	True				
ANR	3148478	ParameterType	const char *		3148457	0					
ANR	3148479	Identifier	p		3148457	1					
ANR	3148480	CFGEntryNode	ENTRY		3148457		True				
ANR	3148481	CFGExitNode	EXIT		3148457		True				
ANR	3148482	Symbol	UNUSED_P		3148457						
ANR	3148483	Symbol	p		3148457						
ANR	3148484	Symbol	UTF8_GET_NAMING3		3148457						
ANR	3148485	Symbol	nmstrtPages		3148457						
ANR	3148486	Function	utf8_isInvalid2	190:0:5902:6039							
ANR	3148487	FunctionDef	"utf8_isInvalid2 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		3148486	0					
ANR	3148488	CompoundStatement		192:0:5987:6039	3148486	0					
ANR	3148489	ReturnStatement	return UTF8_INVALID2 ( ( const unsigned char * ) p ) ;	193:2:5991:6037	3148486	0	True				
ANR	3148490	CallExpression	UTF8_INVALID2 ( ( const unsigned char * ) p )		3148486	0					
ANR	3148491	Callee	UTF8_INVALID2		3148486	0					
ANR	3148492	Identifier	UTF8_INVALID2		3148486	0					
ANR	3148493	ArgumentList	( const unsigned char * ) p		3148486	1					
ANR	3148494	Argument	( const unsigned char * ) p		3148486	0					
ANR	3148495	CastExpression	( const unsigned char * ) p		3148486	0					
ANR	3148496	CastTarget	const unsigned char *		3148486	0					
ANR	3148497	Identifier	p		3148486	1					
ANR	3148498	ReturnType	static int PTRFASTCALL		3148486	1					
ANR	3148499	Identifier	utf8_isInvalid2		3148486	2					
ANR	3148500	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		3148486	3					
ANR	3148501	Parameter	const ENCODING * UNUSED_P ( enc )	191:16:5941:5969	3148486	0	True				
ANR	3148502	ParameterType	const ENCODING * ( enc )		3148486	0					
ANR	3148503	Identifier	UNUSED_P		3148486	1					
ANR	3148504	Parameter	const char * p	191:47:5972:5984	3148486	1	True				
ANR	3148505	ParameterType	const char *		3148486	0					
ANR	3148506	Identifier	p		3148486	1					
ANR	3148507	CFGEntryNode	ENTRY		3148486		True				
ANR	3148508	CFGExitNode	EXIT		3148486		True				
ANR	3148509	Symbol	UNUSED_P		3148486						
ANR	3148510	Symbol	p		3148486						
ANR	3148511	Symbol	UTF8_INVALID2		3148486						
ANR	3148512	Function	utf8_isInvalid3	196:0:6042:6179							
ANR	3148513	FunctionDef	"utf8_isInvalid3 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		3148512	0					
ANR	3148514	CompoundStatement		198:0:6127:6179	3148512	0					
ANR	3148515	ReturnStatement	return UTF8_INVALID3 ( ( const unsigned char * ) p ) ;	199:2:6131:6177	3148512	0	True				
ANR	3148516	CallExpression	UTF8_INVALID3 ( ( const unsigned char * ) p )		3148512	0					
ANR	3148517	Callee	UTF8_INVALID3		3148512	0					
ANR	3148518	Identifier	UTF8_INVALID3		3148512	0					
ANR	3148519	ArgumentList	( const unsigned char * ) p		3148512	1					
ANR	3148520	Argument	( const unsigned char * ) p		3148512	0					
ANR	3148521	CastExpression	( const unsigned char * ) p		3148512	0					
ANR	3148522	CastTarget	const unsigned char *		3148512	0					
ANR	3148523	Identifier	p		3148512	1					
ANR	3148524	ReturnType	static int PTRFASTCALL		3148512	1					
ANR	3148525	Identifier	utf8_isInvalid3		3148512	2					
ANR	3148526	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		3148512	3					
ANR	3148527	Parameter	const ENCODING * UNUSED_P ( enc )	197:16:6081:6109	3148512	0	True				
ANR	3148528	ParameterType	const ENCODING * ( enc )		3148512	0					
ANR	3148529	Identifier	UNUSED_P		3148512	1					
ANR	3148530	Parameter	const char * p	197:47:6112:6124	3148512	1	True				
ANR	3148531	ParameterType	const char *		3148512	0					
ANR	3148532	Identifier	p		3148512	1					
ANR	3148533	CFGEntryNode	ENTRY		3148512		True				
ANR	3148534	CFGExitNode	EXIT		3148512		True				
ANR	3148535	Symbol	UNUSED_P		3148512						
ANR	3148536	Symbol	p		3148512						
ANR	3148537	Symbol	UTF8_INVALID3		3148512						
ANR	3148538	Function	utf8_isInvalid4	202:0:6182:6319							
ANR	3148539	FunctionDef	"utf8_isInvalid4 (const ENCODING * UNUSED_P ( enc ) , const char * p)"		3148538	0					
ANR	3148540	CompoundStatement		204:0:6267:6319	3148538	0					
ANR	3148541	ReturnStatement	return UTF8_INVALID4 ( ( const unsigned char * ) p ) ;	205:2:6271:6317	3148538	0	True				
ANR	3148542	CallExpression	UTF8_INVALID4 ( ( const unsigned char * ) p )		3148538	0					
ANR	3148543	Callee	UTF8_INVALID4		3148538	0					
ANR	3148544	Identifier	UTF8_INVALID4		3148538	0					
ANR	3148545	ArgumentList	( const unsigned char * ) p		3148538	1					
ANR	3148546	Argument	( const unsigned char * ) p		3148538	0					
ANR	3148547	CastExpression	( const unsigned char * ) p		3148538	0					
ANR	3148548	CastTarget	const unsigned char *		3148538	0					
ANR	3148549	Identifier	p		3148538	1					
ANR	3148550	ReturnType	static int PTRFASTCALL		3148538	1					
ANR	3148551	Identifier	utf8_isInvalid4		3148538	2					
ANR	3148552	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * p"		3148538	3					
ANR	3148553	Parameter	const ENCODING * UNUSED_P ( enc )	203:16:6221:6249	3148538	0	True				
ANR	3148554	ParameterType	const ENCODING * ( enc )		3148538	0					
ANR	3148555	Identifier	UNUSED_P		3148538	1					
ANR	3148556	Parameter	const char * p	203:47:6252:6264	3148538	1	True				
ANR	3148557	ParameterType	const char *		3148538	0					
ANR	3148558	Identifier	p		3148538	1					
ANR	3148559	CFGEntryNode	ENTRY		3148538		True				
ANR	3148560	CFGExitNode	EXIT		3148538		True				
ANR	3148561	Symbol	UNUSED_P		3148538						
ANR	3148562	Symbol	p		3148538						
ANR	3148563	Symbol	UTF8_INVALID4		3148538						
ANR	3148564	ClassDef	normal_encoding	208:0:6322:7335							
ANR	3148565	DeclStmt									
ANR	3148566	Decl							ENCODING	ENCODING	enc
ANR	3148567	DeclStmt									
ANR	3148568	Decl							unsigned char	unsigned char [ 256 ]	type
ANR	3148569	DeclStmt									
ANR	3148570	Decl							int FASTCALL	int FASTCALL ( int )	checkCharRefNumber
ANR	3148571	Function	sb_byteType	289:0:8490:8594							
ANR	3148572	FunctionDef	"sb_byteType (const ENCODING * enc , const char * p)"		3148571	0					
ANR	3148573	CompoundStatement		291:0:8561:8594	3148571	0					
ANR	3148574	ReturnStatement	"return SB_BYTE_TYPE ( enc , p ) ;"	292:2:8565:8592	3148571	0	True				
ANR	3148575	CallExpression	"SB_BYTE_TYPE ( enc , p )"		3148571	0					
ANR	3148576	Callee	SB_BYTE_TYPE		3148571	0					
ANR	3148577	Identifier	SB_BYTE_TYPE		3148571	0					
ANR	3148578	ArgumentList	enc		3148571	1					
ANR	3148579	Argument	enc		3148571	0					
ANR	3148580	Identifier	enc		3148571	0					
ANR	3148581	Argument	p		3148571	1					
ANR	3148582	Identifier	p		3148571	0					
ANR	3148583	ReturnType	static int PTRFASTCALL		3148571	1					
ANR	3148584	Identifier	sb_byteType		3148571	2					
ANR	3148585	ParameterList	"const ENCODING * enc , const char * p"		3148571	3					
ANR	3148586	Parameter	const ENCODING * enc	290:12:8525:8543	3148571	0	True				
ANR	3148587	ParameterType	const ENCODING *		3148571	0					
ANR	3148588	Identifier	enc		3148571	1					
ANR	3148589	Parameter	const char * p	290:33:8546:8558	3148571	1	True				
ANR	3148590	ParameterType	const char *		3148571	0					
ANR	3148591	Identifier	p		3148571	1					
ANR	3148592	CFGEntryNode	ENTRY		3148571		True				
ANR	3148593	CFGExitNode	EXIT		3148571		True				
ANR	3148594	Symbol	p		3148571						
ANR	3148595	Symbol	SB_BYTE_TYPE		3148571						
ANR	3148596	Symbol	enc		3148571						
ANR	3148597	Function	sb_byteToAscii	303:0:8830:8919							
ANR	3148598	FunctionDef	"sb_byteToAscii (const ENCODING * enc , const char * p)"		3148597	0					
ANR	3148599	CompoundStatement		305:0:8904:8919	3148597	0					
ANR	3148600	ReturnStatement	return * p ;	306:2:8908:8917	3148597	0	True				
ANR	3148601	UnaryOperationExpression	* p		3148597	0					
ANR	3148602	UnaryOperator	*		3148597	0					
ANR	3148603	Identifier	p		3148597	1					
ANR	3148604	ReturnType	static int PTRFASTCALL		3148597	1					
ANR	3148605	Identifier	sb_byteToAscii		3148597	2					
ANR	3148606	ParameterList	"const ENCODING * enc , const char * p"		3148597	3					
ANR	3148607	Parameter	const ENCODING * enc	304:15:8868:8886	3148597	0	True				
ANR	3148608	ParameterType	const ENCODING *		3148597	0					
ANR	3148609	Identifier	enc		3148597	1					
ANR	3148610	Parameter	const char * p	304:36:8889:8901	3148597	1	True				
ANR	3148611	ParameterType	const char *		3148597	0					
ANR	3148612	Identifier	p		3148597	1					
ANR	3148613	CFGEntryNode	ENTRY		3148597		True				
ANR	3148614	CFGExitNode	EXIT		3148597		True				
ANR	3148615	Symbol	p		3148597						
ANR	3148616	Symbol	* p		3148597						
ANR	3148617	Symbol	enc		3148597						
ANR	3148618	Function	sb_charMatches	332:0:9622:9719							
ANR	3148619	FunctionDef	"sb_charMatches (const ENCODING * enc , const char * p , int c)"		3148618	0					
ANR	3148620	CompoundStatement		334:0:9699:9719	3148618	0					
ANR	3148621	ReturnStatement	return * p == c ;	335:2:9703:9717	3148618	0	True				
ANR	3148622	EqualityExpression	* p == c		3148618	0		==			
ANR	3148623	UnaryOperationExpression	* p		3148618	0					
ANR	3148624	UnaryOperator	*		3148618	0					
ANR	3148625	Identifier	p		3148618	1					
ANR	3148626	Identifier	c		3148618	1					
ANR	3148627	ReturnType	static int PTRCALL		3148618	1					
ANR	3148628	Identifier	sb_charMatches		3148618	2					
ANR	3148629	ParameterList	"const ENCODING * enc , const char * p , int c"		3148618	3					
ANR	3148630	Parameter	const ENCODING * enc	333:15:9656:9674	3148618	0	True				
ANR	3148631	ParameterType	const ENCODING *		3148618	0					
ANR	3148632	Identifier	enc		3148618	1					
ANR	3148633	Parameter	const char * p	333:36:9677:9689	3148618	1	True				
ANR	3148634	ParameterType	const char *		3148618	0					
ANR	3148635	Identifier	p		3148618	1					
ANR	3148636	Parameter	int c	333:51:9692:9696	3148618	2	True				
ANR	3148637	ParameterType	int		3148618	0					
ANR	3148638	Identifier	c		3148618	1					
ANR	3148639	CFGEntryNode	ENTRY		3148618		True				
ANR	3148640	CFGExitNode	EXIT		3148618		True				
ANR	3148641	Symbol	p		3148618						
ANR	3148642	Symbol	c		3148618						
ANR	3148643	Symbol	* p		3148618						
ANR	3148644	Symbol	enc		3148618						
ANR	3148645	ClassDef	<unnamed>	357:0:10113:10270							
ANR	3148646	Function	_INTERNAL_trim_to_complete_utf8_characters	364:0:10274:11271							
ANR	3148647	FunctionDef	"_INTERNAL_trim_to_complete_utf8_characters (const char * from , const char * * fromLimRef)"		3148646	0					
ANR	3148648	CompoundStatement		366:0:10367:11271	3148646	0					
ANR	3148649	IdentifierDeclStatement	const char * fromLim = * fromLimRef ;	367:2:10371:10405	3148646	0	True				
ANR	3148650	IdentifierDecl	* fromLim = * fromLimRef		3148646	0					
ANR	3148651	IdentifierDeclType	const char *		3148646	0					
ANR	3148652	Identifier	fromLim		3148646	1					
ANR	3148653	AssignmentExpression	* fromLim = * fromLimRef		3148646	2		=			
ANR	3148654	Identifier	fromLim		3148646	0					
ANR	3148655	UnaryOperationExpression	* fromLimRef		3148646	1					
ANR	3148656	UnaryOperator	*		3148646	0					
ANR	3148657	Identifier	fromLimRef		3148646	1					
ANR	3148658	IdentifierDeclStatement	size_t walked = 0 ;	368:2:10409:10426	3148646	1	True				
ANR	3148659	IdentifierDecl	walked = 0		3148646	0					
ANR	3148660	IdentifierDeclType	size_t		3148646	0					
ANR	3148661	Identifier	walked		3148646	1					
ANR	3148662	AssignmentExpression	walked = 0		3148646	2		=			
ANR	3148663	Identifier	walked		3148646	0					
ANR	3148664	PrimaryExpression	0		3148646	1					
ANR	3148665	ForStatement	"for ( ; fromLim > from ; fromLim -- , walked ++ )"		3148646	2					
ANR	3148666	Condition	fromLim > from	369:9:10437:10450	3148646	0	True				
ANR	3148667	RelationalExpression	fromLim > from		3148646	0		>			
ANR	3148668	Identifier	fromLim		3148646	0					
ANR	3148669	Identifier	from		3148646	1					
ANR	3148670	Expression	"fromLim -- , walked ++"	369:25:10453:10471	3148646	1	True				
ANR	3148671	PostIncDecOperationExpression	fromLim --		3148646	0					
ANR	3148672	Identifier	fromLim		3148646	0					
ANR	3148673	IncDec	--		3148646	1					
ANR	3148674	PostIncDecOperationExpression	walked ++		3148646	1					
ANR	3148675	Identifier	walked		3148646	0					
ANR	3148676	IncDec	++		3148646	1					
ANR	3148677	CompoundStatement		5:4:112:165	3148646	2					
ANR	3148678	IdentifierDeclStatement	const unsigned char prev = ( unsigned char ) fromLim [ - 1 ] ;	370:4:10480:10533	3148646	0	True				
ANR	3148679	IdentifierDecl	prev = ( unsigned char ) fromLim [ - 1 ]		3148646	0					
ANR	3148680	IdentifierDeclType	const unsigned char		3148646	0					
ANR	3148681	Identifier	prev		3148646	1					
ANR	3148682	AssignmentExpression	prev = ( unsigned char ) fromLim [ - 1 ]		3148646	2		=			
ANR	3148683	Identifier	prev		3148646	0					
ANR	3148684	CastExpression	( unsigned char ) fromLim [ - 1 ]		3148646	1					
ANR	3148685	CastTarget	unsigned char		3148646	0					
ANR	3148686	ArrayIndexing	fromLim [ - 1 ]		3148646	1					
ANR	3148687	Identifier	fromLim		3148646	0					
ANR	3148688	UnaryOperationExpression	- 1		3148646	1					
ANR	3148689	UnaryOperator	-		3148646	0					
ANR	3148690	PrimaryExpression	1		3148646	1					
ANR	3148691	IfStatement	if ( ( prev & 0xf8u ) == 0xf0u )		3148646	1					
ANR	3148692	Condition	( prev & 0xf8u ) == 0xf0u	371:8:10543:10565	3148646	0	True				
ANR	3148693	EqualityExpression	( prev & 0xf8u ) == 0xf0u		3148646	0		==			
ANR	3148694	BitAndExpression	prev & 0xf8u		3148646	0		&			
ANR	3148695	Identifier	prev		3148646	0					
ANR	3148696	PrimaryExpression	0xf8u		3148646	1					
ANR	3148697	PrimaryExpression	0xf0u		3148646	1					
ANR	3148698	CompoundStatement		6:33:200:200	3148646	1					
ANR	3148699	IfStatement	if ( walked + 1 >= 4 )		3148646	0					
ANR	3148700	Condition	walked + 1 >= 4	372:10:10628:10642	3148646	0	True				
ANR	3148701	RelationalExpression	walked + 1 >= 4		3148646	0		>=			
ANR	3148702	AdditiveExpression	walked + 1		3148646	0		+			
ANR	3148703	Identifier	walked		3148646	0					
ANR	3148704	PrimaryExpression	1		3148646	1					
ANR	3148705	PrimaryExpression	4		3148646	1					
ANR	3148706	CompoundStatement		7:27:277:277	3148646	1					
ANR	3148707	ExpressionStatement	fromLim += 4 - 1	373:8:10655:10671	3148646	0	True				
ANR	3148708	AssignmentExpression	fromLim += 4 - 1		3148646	0		+=			
ANR	3148709	Identifier	fromLim		3148646	0					
ANR	3148710	AdditiveExpression	4 - 1		3148646	1		-			
ANR	3148711	PrimaryExpression	4		3148646	0					
ANR	3148712	PrimaryExpression	1		3148646	1					
ANR	3148713	BreakStatement	break ;	374:8:10681:10686	3148646	1	True				
ANR	3148714	ElseStatement	else		3148646	0					
ANR	3148715	CompoundStatement		10:13:333:333	3148646	0					
ANR	3148716	ExpressionStatement	walked = 0	376:8:10711:10721	3148646	0	True				
ANR	3148717	AssignmentExpression	walked = 0		3148646	0		=			
ANR	3148718	Identifier	walked		3148646	0					
ANR	3148719	PrimaryExpression	0		3148646	1					
ANR	3148720	ElseStatement	else		3148646	0					
ANR	3148721	IfStatement	if ( ( prev & 0xf0u ) == 0xe0u )		3148646	0					
ANR	3148722	Condition	( prev & 0xf0u ) == 0xe0u	378:15:10746:10768	3148646	0	True				
ANR	3148723	EqualityExpression	( prev & 0xf0u ) == 0xe0u		3148646	0		==			
ANR	3148724	BitAndExpression	prev & 0xf0u		3148646	0		&			
ANR	3148725	Identifier	prev		3148646	0					
ANR	3148726	PrimaryExpression	0xf0u		3148646	1					
ANR	3148727	PrimaryExpression	0xe0u		3148646	1					
ANR	3148728	CompoundStatement		13:40:403:403	3148646	1					
ANR	3148729	IfStatement	if ( walked + 1 >= 3 )		3148646	0					
ANR	3148730	Condition	walked + 1 >= 3	379:10:10831:10845	3148646	0	True				
ANR	3148731	RelationalExpression	walked + 1 >= 3		3148646	0		>=			
ANR	3148732	AdditiveExpression	walked + 1		3148646	0		+			
ANR	3148733	Identifier	walked		3148646	0					
ANR	3148734	PrimaryExpression	1		3148646	1					
ANR	3148735	PrimaryExpression	3		3148646	1					
ANR	3148736	CompoundStatement		14:27:480:480	3148646	1					
ANR	3148737	ExpressionStatement	fromLim += 3 - 1	380:8:10858:10874	3148646	0	True				
ANR	3148738	AssignmentExpression	fromLim += 3 - 1		3148646	0		+=			
ANR	3148739	Identifier	fromLim		3148646	0					
ANR	3148740	AdditiveExpression	3 - 1		3148646	1		-			
ANR	3148741	PrimaryExpression	3		3148646	0					
ANR	3148742	PrimaryExpression	1		3148646	1					
ANR	3148743	BreakStatement	break ;	381:8:10884:10889	3148646	1	True				
ANR	3148744	ElseStatement	else		3148646	0					
ANR	3148745	CompoundStatement		17:13:536:536	3148646	0					
ANR	3148746	ExpressionStatement	walked = 0	383:8:10914:10924	3148646	0	True				
ANR	3148747	AssignmentExpression	walked = 0		3148646	0		=			
ANR	3148748	Identifier	walked		3148646	0					
ANR	3148749	PrimaryExpression	0		3148646	1					
ANR	3148750	ElseStatement	else		3148646	0					
ANR	3148751	IfStatement	if ( ( prev & 0xe0u ) == 0xc0u )		3148646	0					
ANR	3148752	Condition	( prev & 0xe0u ) == 0xc0u	385:15:10949:10971	3148646	0	True				
ANR	3148753	EqualityExpression	( prev & 0xe0u ) == 0xc0u		3148646	0		==			
ANR	3148754	BitAndExpression	prev & 0xe0u		3148646	0		&			
ANR	3148755	Identifier	prev		3148646	0					
ANR	3148756	PrimaryExpression	0xe0u		3148646	1					
ANR	3148757	PrimaryExpression	0xc0u		3148646	1					
ANR	3148758	CompoundStatement		20:40:606:606	3148646	1					
ANR	3148759	IfStatement	if ( walked + 1 >= 2 )		3148646	0					
ANR	3148760	Condition	walked + 1 >= 2	386:10:11034:11048	3148646	0	True				
ANR	3148761	RelationalExpression	walked + 1 >= 2		3148646	0		>=			
ANR	3148762	AdditiveExpression	walked + 1		3148646	0		+			
ANR	3148763	Identifier	walked		3148646	0					
ANR	3148764	PrimaryExpression	1		3148646	1					
ANR	3148765	PrimaryExpression	2		3148646	1					
ANR	3148766	CompoundStatement		21:27:683:683	3148646	1					
ANR	3148767	ExpressionStatement	fromLim += 2 - 1	387:8:11061:11077	3148646	0	True				
ANR	3148768	AssignmentExpression	fromLim += 2 - 1		3148646	0		+=			
ANR	3148769	Identifier	fromLim		3148646	0					
ANR	3148770	AdditiveExpression	2 - 1		3148646	1		-			
ANR	3148771	PrimaryExpression	2		3148646	0					
ANR	3148772	PrimaryExpression	1		3148646	1					
ANR	3148773	BreakStatement	break ;	388:8:11087:11092	3148646	1	True				
ANR	3148774	ElseStatement	else		3148646	0					
ANR	3148775	CompoundStatement		24:13:739:739	3148646	0					
ANR	3148776	ExpressionStatement	walked = 0	390:8:11117:11127	3148646	0	True				
ANR	3148777	AssignmentExpression	walked = 0		3148646	0		=			
ANR	3148778	Identifier	walked		3148646	0					
ANR	3148779	PrimaryExpression	0		3148646	1					
ANR	3148780	ElseStatement	else		3148646	0					
ANR	3148781	IfStatement	if ( ( prev & 0x80u ) == 0x00u )		3148646	0					
ANR	3148782	Condition	( prev & 0x80u ) == 0x00u	392:15:11152:11174	3148646	0	True				
ANR	3148783	EqualityExpression	( prev & 0x80u ) == 0x00u		3148646	0		==			
ANR	3148784	BitAndExpression	prev & 0x80u		3148646	0		&			
ANR	3148785	Identifier	prev		3148646	0					
ANR	3148786	PrimaryExpression	0x80u		3148646	1					
ANR	3148787	PrimaryExpression	0x00u		3148646	1					
ANR	3148788	CompoundStatement		27:40:809:809	3148646	1					
ANR	3148789	BreakStatement	break ;	393:6:11229:11234	3148646	0	True				
ANR	3148790	ExpressionStatement	* fromLimRef = fromLim	396:2:11248:11269	3148646	3	True				
ANR	3148791	AssignmentExpression	* fromLimRef = fromLim		3148646	0		=			
ANR	3148792	UnaryOperationExpression	* fromLimRef		3148646	0					
ANR	3148793	UnaryOperator	*		3148646	0					
ANR	3148794	Identifier	fromLimRef		3148646	1					
ANR	3148795	Identifier	fromLim		3148646	1					
ANR	3148796	ReturnType	void		3148646	1					
ANR	3148797	Identifier	_INTERNAL_trim_to_complete_utf8_characters		3148646	2					
ANR	3148798	ParameterList	"const char * from , const char * * fromLimRef"		3148646	3					
ANR	3148799	Parameter	const char * from	365:43:10322:10338	3148646	0	True				
ANR	3148800	ParameterType	const char *		3148646	0					
ANR	3148801	Identifier	from		3148646	1					
ANR	3148802	Parameter	const char * * fromLimRef	365:62:10341:10364	3148646	1	True				
ANR	3148803	ParameterType	const char * *		3148646	0					
ANR	3148804	Identifier	fromLimRef		3148646	1					
ANR	3148805	CFGEntryNode	ENTRY		3148646		True				
ANR	3148806	CFGExitNode	EXIT		3148646		True				
ANR	3148807	Symbol	walked		3148646						
ANR	3148808	Symbol	* fromLim		3148646						
ANR	3148809	Symbol	fromLim		3148646						
ANR	3148810	Symbol	prev		3148646						
ANR	3148811	Symbol	from		3148646						
ANR	3148812	Symbol	fromLimRef		3148646						
ANR	3148813	Symbol	* fromLimRef		3148646						
ANR	3148814	Function	utf8_toUtf8	399:0:11274:12413							
ANR	3148815	FunctionDef	"utf8_toUtf8 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		3148814	0					
ANR	3148816	CompoundStatement		403:0:11452:12413	3148814	0					
ANR	3148817	IdentifierDeclStatement	bool input_incomplete = false ;	404:2:11456:11485	3148814	0	True				
ANR	3148818	IdentifierDecl	input_incomplete = false		3148814	0					
ANR	3148819	IdentifierDeclType	bool		3148814	0					
ANR	3148820	Identifier	input_incomplete		3148814	1					
ANR	3148821	AssignmentExpression	input_incomplete = false		3148814	2		=			
ANR	3148822	Identifier	false		3148814	0					
ANR	3148823	Identifier	false		3148814	1					
ANR	3148824	IdentifierDeclStatement	bool output_exhausted = false ;	405:2:11489:11518	3148814	1	True				
ANR	3148825	IdentifierDecl	output_exhausted = false		3148814	0					
ANR	3148826	IdentifierDeclType	bool		3148814	0					
ANR	3148827	Identifier	output_exhausted		3148814	1					
ANR	3148828	AssignmentExpression	output_exhausted = false		3148814	2		=			
ANR	3148829	Identifier	false		3148814	0					
ANR	3148830	Identifier	false		3148814	1					
ANR	3148831	IdentifierDeclStatement	const ptrdiff_t bytesAvailable = fromLim - * fromP ;	408:2:11588:11637	3148814	2	True				
ANR	3148832	IdentifierDecl	bytesAvailable = fromLim - * fromP		3148814	0					
ANR	3148833	IdentifierDeclType	const ptrdiff_t		3148814	0					
ANR	3148834	Identifier	bytesAvailable		3148814	1					
ANR	3148835	AssignmentExpression	bytesAvailable = fromLim - * fromP		3148814	2		=			
ANR	3148836	Identifier	bytesAvailable		3148814	0					
ANR	3148837	AdditiveExpression	fromLim - * fromP		3148814	1		-			
ANR	3148838	Identifier	fromLim		3148814	0					
ANR	3148839	UnaryOperationExpression	* fromP		3148814	1					
ANR	3148840	UnaryOperator	*		3148814	0					
ANR	3148841	Identifier	fromP		3148814	1					
ANR	3148842	IdentifierDeclStatement	const ptrdiff_t bytesStorable = toLim - * toP ;	409:2:11641:11685	3148814	3	True				
ANR	3148843	IdentifierDecl	bytesStorable = toLim - * toP		3148814	0					
ANR	3148844	IdentifierDeclType	const ptrdiff_t		3148814	0					
ANR	3148845	Identifier	bytesStorable		3148814	1					
ANR	3148846	AssignmentExpression	bytesStorable = toLim - * toP		3148814	2		=			
ANR	3148847	Identifier	bytesStorable		3148814	0					
ANR	3148848	AdditiveExpression	toLim - * toP		3148814	1		-			
ANR	3148849	Identifier	toLim		3148814	0					
ANR	3148850	UnaryOperationExpression	* toP		3148814	1					
ANR	3148851	UnaryOperator	*		3148814	0					
ANR	3148852	Identifier	toP		3148814	1					
ANR	3148853	IfStatement	if ( bytesAvailable > bytesStorable )		3148814	4					
ANR	3148854	Condition	bytesAvailable > bytesStorable	410:6:11693:11722	3148814	0	True				
ANR	3148855	RelationalExpression	bytesAvailable > bytesStorable		3148814	0		>			
ANR	3148856	Identifier	bytesAvailable		3148814	0					
ANR	3148857	Identifier	bytesStorable		3148814	1					
ANR	3148858	CompoundStatement		8:38:272:272	3148814	1					
ANR	3148859	ExpressionStatement	fromLim = * fromP + bytesStorable	411:4:11731:11763	3148814	0	True				
ANR	3148860	AssignmentExpression	fromLim = * fromP + bytesStorable		3148814	0		=			
ANR	3148861	Identifier	fromLim		3148814	0					
ANR	3148862	AdditiveExpression	* fromP + bytesStorable		3148814	1		+			
ANR	3148863	UnaryOperationExpression	* fromP		3148814	0					
ANR	3148864	UnaryOperator	*		3148814	0					
ANR	3148865	Identifier	fromP		3148814	1					
ANR	3148866	Identifier	bytesStorable		3148814	1					
ANR	3148867	ExpressionStatement	output_exhausted = true	412:4:11769:11792	3148814	1	True				
ANR	3148868	AssignmentExpression	output_exhausted = true		3148814	0		=			
ANR	3148869	Identifier	output_exhausted		3148814	0					
ANR	3148870	Identifier	true		3148814	1					
ANR	3148871	CompoundStatement		14:2:414:414	3148814	5					
ANR	3148872	Statement	const	417:4:11873:11877	3148814	0	True				
ANR	3148873	Statement	char	417:10:11879:11882	3148814	1	True				
ANR	3148874	Statement	*	417:15:11884:11884	3148814	2	True				
ANR	3148875	Statement	const	417:17:11886:11890	3148814	3	True				
ANR	3148876	ExpressionStatement	fromLimBefore = fromLim	417:23:11892:11915	3148814	4	True				
ANR	3148877	AssignmentExpression	fromLimBefore = fromLim		3148814	0		=			
ANR	3148878	Identifier	fromLimBefore		3148814	0					
ANR	3148879	Identifier	fromLim		3148814	1					
ANR	3148880	ExpressionStatement	"_INTERNAL_trim_to_complete_utf8_characters ( * fromP , & fromLim )"	418:4:11921:11981	3148814	5	True				
ANR	3148881	CallExpression	"_INTERNAL_trim_to_complete_utf8_characters ( * fromP , & fromLim )"		3148814	0					
ANR	3148882	Callee	_INTERNAL_trim_to_complete_utf8_characters		3148814	0					
ANR	3148883	Identifier	_INTERNAL_trim_to_complete_utf8_characters		3148814	0					
ANR	3148884	ArgumentList	* fromP		3148814	1					
ANR	3148885	Argument	* fromP		3148814	0					
ANR	3148886	UnaryOperationExpression	* fromP		3148814	0					
ANR	3148887	UnaryOperator	*		3148814	0					
ANR	3148888	Identifier	fromP		3148814	1					
ANR	3148889	Argument	& fromLim		3148814	1					
ANR	3148890	UnaryOperationExpression	& fromLim		3148814	0					
ANR	3148891	UnaryOperator	&		3148814	0					
ANR	3148892	Identifier	fromLim		3148814	1					
ANR	3148893	IfStatement	if ( fromLim < fromLimBefore )		3148814	6					
ANR	3148894	Condition	fromLim < fromLimBefore	419:8:11991:12013	3148814	0	True				
ANR	3148895	RelationalExpression	fromLim < fromLimBefore		3148814	0		<			
ANR	3148896	Identifier	fromLim		3148814	0					
ANR	3148897	Identifier	fromLimBefore		3148814	1					
ANR	3148898	CompoundStatement		17:33:563:563	3148814	1					
ANR	3148899	ExpressionStatement	input_incomplete = true	420:6:12024:12047	3148814	0	True				
ANR	3148900	AssignmentExpression	input_incomplete = true		3148814	0		=			
ANR	3148901	Identifier	input_incomplete		3148814	0					
ANR	3148902	Identifier	true		3148814	1					
ANR	3148903	CompoundStatement		23:4:615:661	3148814	6					
ANR	3148904	IdentifierDeclStatement	const ptrdiff_t bytesToCopy = fromLim - * fromP ;	425:4:12068:12114	3148814	0	True				
ANR	3148905	IdentifierDecl	bytesToCopy = fromLim - * fromP		3148814	0					
ANR	3148906	IdentifierDeclType	const ptrdiff_t		3148814	0					
ANR	3148907	Identifier	bytesToCopy		3148814	1					
ANR	3148908	AssignmentExpression	bytesToCopy = fromLim - * fromP		3148814	2		=			
ANR	3148909	Identifier	bytesToCopy		3148814	0					
ANR	3148910	AdditiveExpression	fromLim - * fromP		3148814	1		-			
ANR	3148911	Identifier	fromLim		3148814	0					
ANR	3148912	UnaryOperationExpression	* fromP		3148814	1					
ANR	3148913	UnaryOperator	*		3148814	0					
ANR	3148914	Identifier	fromP		3148814	1					
ANR	3148915	ExpressionStatement	"memcpy ( * toP , * fromP , bytesToCopy )"	426:4:12120:12153	3148814	1	True				
ANR	3148916	CallExpression	"memcpy ( * toP , * fromP , bytesToCopy )"		3148814	0					
ANR	3148917	Callee	memcpy		3148814	0					
ANR	3148918	Identifier	memcpy		3148814	0					
ANR	3148919	ArgumentList	* toP		3148814	1					
ANR	3148920	Argument	* toP		3148814	0					
ANR	3148921	UnaryOperationExpression	* toP		3148814	0					
ANR	3148922	UnaryOperator	*		3148814	0					
ANR	3148923	Identifier	toP		3148814	1					
ANR	3148924	Argument	* fromP		3148814	1					
ANR	3148925	UnaryOperationExpression	* fromP		3148814	0					
ANR	3148926	UnaryOperator	*		3148814	0					
ANR	3148927	Identifier	fromP		3148814	1					
ANR	3148928	Argument	bytesToCopy		3148814	2					
ANR	3148929	Identifier	bytesToCopy		3148814	0					
ANR	3148930	ExpressionStatement	* fromP += bytesToCopy	427:4:12159:12180	3148814	2	True				
ANR	3148931	AssignmentExpression	* fromP += bytesToCopy		3148814	0		+=			
ANR	3148932	UnaryOperationExpression	* fromP		3148814	0					
ANR	3148933	UnaryOperator	*		3148814	0					
ANR	3148934	Identifier	fromP		3148814	1					
ANR	3148935	Identifier	bytesToCopy		3148814	1					
ANR	3148936	ExpressionStatement	* toP += bytesToCopy	428:4:12186:12205	3148814	3	True				
ANR	3148937	AssignmentExpression	* toP += bytesToCopy		3148814	0		+=			
ANR	3148938	UnaryOperationExpression	* toP		3148814	0					
ANR	3148939	UnaryOperator	*		3148814	0					
ANR	3148940	Identifier	toP		3148814	1					
ANR	3148941	Identifier	bytesToCopy		3148814	1					
ANR	3148942	IfStatement	if ( output_exhausted )		3148814	7					
ANR	3148943	Condition	output_exhausted	431:6:12218:12233	3148814	0	True				
ANR	3148944	Identifier	output_exhausted		3148814	0					
ANR	3148945	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	432:4:12265:12300	3148814	1	True				
ANR	3148946	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3148814	0					
ANR	3148947	ElseStatement	else		3148814	0					
ANR	3148948	IfStatement	if ( input_incomplete )		3148814	0					
ANR	3148949	Condition	input_incomplete	433:11:12313:12328	3148814	0	True				
ANR	3148950	Identifier	input_incomplete		3148814	0					
ANR	3148951	ReturnStatement	return XML_CONVERT_INPUT_INCOMPLETE ;	434:4:12335:12370	3148814	1	True				
ANR	3148952	Identifier	XML_CONVERT_INPUT_INCOMPLETE		3148814	0					
ANR	3148953	ElseStatement	else		3148814	0					
ANR	3148954	ReturnStatement	return XML_CONVERT_COMPLETED ;	436:4:12383:12411	3148814	0	True				
ANR	3148955	Identifier	XML_CONVERT_COMPLETED		3148814	0					
ANR	3148956	ReturnType	static enum XML_Convert_Result PTRCALL		3148814	1					
ANR	3148957	Identifier	utf8_toUtf8		3148814	2					
ANR	3148958	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		3148814	3					
ANR	3148959	Parameter	const ENCODING * UNUSED_P ( enc )	400:12:11325:11353	3148814	0	True				
ANR	3148960	ParameterType	const ENCODING * ( enc )		3148814	0					
ANR	3148961	Identifier	UNUSED_P		3148814	1					
ANR	3148962	Parameter	const char * * fromP	401:12:11368:11385	3148814	1	True				
ANR	3148963	ParameterType	const char * *		3148814	0					
ANR	3148964	Identifier	fromP		3148814	1					
ANR	3148965	Parameter	const char * fromLim	401:32:11388:11406	3148814	2	True				
ANR	3148966	ParameterType	const char *		3148814	0					
ANR	3148967	Identifier	fromLim		3148814	1					
ANR	3148968	Parameter	char * * toP	402:12:11421:11430	3148814	3	True				
ANR	3148969	ParameterType	char * *		3148814	0					
ANR	3148970	Identifier	toP		3148814	1					
ANR	3148971	Parameter	const char * toLim	402:24:11433:11449	3148814	4	True				
ANR	3148972	ParameterType	const char *		3148814	0					
ANR	3148973	Identifier	toLim		3148814	1					
ANR	3148974	CFGEntryNode	ENTRY		3148814		True				
ANR	3148975	CFGExitNode	EXIT		3148814		True				
ANR	3148976	Symbol	UNUSED_P		3148814						
ANR	3148977	Symbol	bytesToCopy		3148814						
ANR	3148978	Symbol	toLim		3148814						
ANR	3148979	Symbol	* fromP		3148814						
ANR	3148980	Symbol	bytesStorable		3148814						
ANR	3148981	Symbol	output_exhausted		3148814						
ANR	3148982	Symbol	XML_CONVERT_INPUT_INCOMPLETE		3148814						
ANR	3148983	Symbol	false		3148814						
ANR	3148984	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		3148814						
ANR	3148985	Symbol	& fromLim		3148814						
ANR	3148986	Symbol	fromP		3148814						
ANR	3148987	Symbol	fromLim		3148814						
ANR	3148988	Symbol	toP		3148814						
ANR	3148989	Symbol	fromLimBefore		3148814						
ANR	3148990	Symbol	true		3148814						
ANR	3148991	Symbol	input_incomplete		3148814						
ANR	3148992	Symbol	XML_CONVERT_COMPLETED		3148814						
ANR	3148993	Symbol	bytesAvailable		3148814						
ANR	3148994	Symbol	* toP		3148814						
ANR	3148995	Function	utf8_toUtf16	439:0:12416:14107							
ANR	3148996	FunctionDef	"utf8_toUtf16 (const ENCODING * enc , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim)"		3148995	0					
ANR	3148997	CompoundStatement		443:0:12607:14107	3148995	0					
ANR	3148998	IdentifierDeclStatement	enum XML_Convert_Result res = XML_CONVERT_COMPLETED ;	444:2:12611:12662	3148995	0	True				
ANR	3148999	IdentifierDecl	res = XML_CONVERT_COMPLETED		3148995	0					
ANR	3149000	IdentifierDeclType	enum XML_Convert_Result		3148995	0					
ANR	3149001	Identifier	res		3148995	1					
ANR	3149002	AssignmentExpression	res = XML_CONVERT_COMPLETED		3148995	2		=			
ANR	3149003	Identifier	XML_CONVERT_COMPLETED		3148995	0					
ANR	3149004	Identifier	XML_CONVERT_COMPLETED		3148995	1					
ANR	3149005	IdentifierDeclStatement	unsigned short * to = * toP ;	445:2:12666:12691	3148995	1	True				
ANR	3149006	IdentifierDecl	* to = * toP		3148995	0					
ANR	3149007	IdentifierDeclType	unsigned short *		3148995	0					
ANR	3149008	Identifier	to		3148995	1					
ANR	3149009	AssignmentExpression	* to = * toP		3148995	2		=			
ANR	3149010	Identifier	to		3148995	0					
ANR	3149011	UnaryOperationExpression	* toP		3148995	1					
ANR	3149012	UnaryOperator	*		3148995	0					
ANR	3149013	Identifier	toP		3148995	1					
ANR	3149014	IdentifierDeclStatement	const char * from = * fromP ;	446:2:12695:12720	3148995	2	True				
ANR	3149015	IdentifierDecl	* from = * fromP		3148995	0					
ANR	3149016	IdentifierDeclType	const char *		3148995	0					
ANR	3149017	Identifier	from		3148995	1					
ANR	3149018	AssignmentExpression	* from = * fromP		3148995	2		=			
ANR	3149019	Identifier	from		3148995	0					
ANR	3149020	UnaryOperationExpression	* fromP		3148995	1					
ANR	3149021	UnaryOperator	*		3148995	0					
ANR	3149022	Identifier	fromP		3148995	1					
ANR	3149023	WhileStatement	while ( from < fromLim && to < toLim )		3148995	3					
ANR	3149024	Condition	from < fromLim && to < toLim	447:9:12731:12758	3148995	0	True				
ANR	3149025	AndExpression	from < fromLim && to < toLim		3148995	0		&&			
ANR	3149026	RelationalExpression	from < fromLim		3148995	0		<			
ANR	3149027	Identifier	from		3148995	0					
ANR	3149028	Identifier	fromLim		3148995	1					
ANR	3149029	RelationalExpression	to < toLim		3148995	1		<			
ANR	3149030	Identifier	to		3148995	0					
ANR	3149031	Identifier	toLim		3148995	1					
ANR	3149032	CompoundStatement		5:39:153:153	3148995	1					
ANR	3149033	SwitchStatement	switch ( ( ( struct normal_encoding * ) enc ) -> type [ ( unsigned char ) * from ] )		3148995	0					
ANR	3149034	Condition	( ( struct normal_encoding * ) enc ) -> type [ ( unsigned char ) * from ]	448:12:12775:12833	3148995	0	True				
ANR	3149035	ArrayIndexing	( ( struct normal_encoding * ) enc ) -> type [ ( unsigned char ) * from ]		3148995	0					
ANR	3149036	PtrMemberAccess	( ( struct normal_encoding * ) enc ) -> type		3148995	0					
ANR	3149037	CastExpression	( struct normal_encoding * ) enc		3148995	0					
ANR	3149038	CastTarget	struct normal_encoding *		3148995	0					
ANR	3149039	Identifier	enc		3148995	1					
ANR	3149040	Identifier	type		3148995	1					
ANR	3149041	CastExpression	( unsigned char ) * from		3148995	1					
ANR	3149042	CastTarget	unsigned char		3148995	0					
ANR	3149043	UnaryOperationExpression	* from		3148995	1					
ANR	3149044	UnaryOperator	*		3148995	0					
ANR	3149045	Identifier	from		3148995	1					
ANR	3149046	CompoundStatement		6:73:228:228	3148995	1					
ANR	3149047	Label	case BT_LEAD2 :	449:4:12842:12855	3148995	0	True				
ANR	3149048	Identifier	BT_LEAD2		3148995	0					
ANR	3149049	IfStatement	if ( fromLim - from < 2 )		3148995	1					
ANR	3149050	Condition	fromLim - from < 2	450:10:12867:12884	3148995	0	True				
ANR	3149051	RelationalExpression	fromLim - from < 2		3148995	0		<			
ANR	3149052	AdditiveExpression	fromLim - from		3148995	0		-			
ANR	3149053	Identifier	fromLim		3148995	0					
ANR	3149054	Identifier	from		3148995	1					
ANR	3149055	PrimaryExpression	2		3148995	1					
ANR	3149056	CompoundStatement		8:30:279:279	3148995	1					
ANR	3149057	ExpressionStatement	res = XML_CONVERT_INPUT_INCOMPLETE	451:8:12897:12931	3148995	0	True				
ANR	3149058	AssignmentExpression	res = XML_CONVERT_INPUT_INCOMPLETE		3148995	0		=			
ANR	3149059	Identifier	res		3148995	0					
ANR	3149060	Identifier	XML_CONVERT_INPUT_INCOMPLETE		3148995	1					
ANR	3149061	GotoStatement	goto after ;	452:8:12941:12951	3148995	1	True				
ANR	3149062	Identifier	after		3148995	0					
ANR	3149063	ExpressionStatement	* to ++ = ( unsigned short ) ( ( ( from [ 0 ] & 0x1f ) << 6 ) | ( from [ 1 ] & 0x3f ) )	454:6:12967:13035	3148995	2	True				
ANR	3149064	AssignmentExpression	* to ++ = ( unsigned short ) ( ( ( from [ 0 ] & 0x1f ) << 6 ) | ( from [ 1 ] & 0x3f ) )		3148995	0		=			
ANR	3149065	UnaryOperationExpression	* to ++		3148995	0					
ANR	3149066	UnaryOperator	*		3148995	0					
ANR	3149067	PostIncDecOperationExpression	to ++		3148995	1					
ANR	3149068	Identifier	to		3148995	0					
ANR	3149069	IncDec	++		3148995	1					
ANR	3149070	CastExpression	( unsigned short ) ( ( ( from [ 0 ] & 0x1f ) << 6 ) | ( from [ 1 ] & 0x3f ) )		3148995	1					
ANR	3149071	CastTarget	unsigned short		3148995	0					
ANR	3149072	InclusiveOrExpression	( ( from [ 0 ] & 0x1f ) << 6 ) | ( from [ 1 ] & 0x3f )		3148995	1		|			
ANR	3149073	ShiftExpression	( from [ 0 ] & 0x1f ) << 6		3148995	0		<<			
ANR	3149074	BitAndExpression	from [ 0 ] & 0x1f		3148995	0		&			
ANR	3149075	ArrayIndexing	from [ 0 ]		3148995	0					
ANR	3149076	Identifier	from		3148995	0					
ANR	3149077	PrimaryExpression	0		3148995	1					
ANR	3149078	PrimaryExpression	0x1f		3148995	1					
ANR	3149079	PrimaryExpression	6		3148995	1					
ANR	3149080	BitAndExpression	from [ 1 ] & 0x3f		3148995	1		&			
ANR	3149081	ArrayIndexing	from [ 1 ]		3148995	0					
ANR	3149082	Identifier	from		3148995	0					
ANR	3149083	PrimaryExpression	1		3148995	1					
ANR	3149084	PrimaryExpression	0x3f		3148995	1					
ANR	3149085	ExpressionStatement	from += 2	455:6:13043:13052	3148995	3	True				
ANR	3149086	AssignmentExpression	from += 2		3148995	0		+=			
ANR	3149087	Identifier	from		3148995	0					
ANR	3149088	PrimaryExpression	2		3148995	1					
ANR	3149089	BreakStatement	break ;	456:6:13060:13065	3148995	4	True				
ANR	3149090	Label	case BT_LEAD3 :	457:4:13071:13084	3148995	5	True				
ANR	3149091	Identifier	BT_LEAD3		3148995	0					
ANR	3149092	IfStatement	if ( fromLim - from < 3 )		3148995	6					
ANR	3149093	Condition	fromLim - from < 3	458:10:13096:13113	3148995	0	True				
ANR	3149094	RelationalExpression	fromLim - from < 3		3148995	0		<			
ANR	3149095	AdditiveExpression	fromLim - from		3148995	0		-			
ANR	3149096	Identifier	fromLim		3148995	0					
ANR	3149097	Identifier	from		3148995	1					
ANR	3149098	PrimaryExpression	3		3148995	1					
ANR	3149099	CompoundStatement		16:30:508:508	3148995	1					
ANR	3149100	ExpressionStatement	res = XML_CONVERT_INPUT_INCOMPLETE	459:8:13126:13160	3148995	0	True				
ANR	3149101	AssignmentExpression	res = XML_CONVERT_INPUT_INCOMPLETE		3148995	0		=			
ANR	3149102	Identifier	res		3148995	0					
ANR	3149103	Identifier	XML_CONVERT_INPUT_INCOMPLETE		3148995	1					
ANR	3149104	GotoStatement	goto after ;	460:8:13170:13180	3148995	1	True				
ANR	3149105	Identifier	after		3148995	0					
ANR	3149106	ExpressionStatement	* to ++ = ( unsigned short ) ( ( ( from [ 0 ] & 0xf ) << 12 ) | ( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f ) )	462:6:13196:13321	3148995	7	True				
ANR	3149107	AssignmentExpression	* to ++ = ( unsigned short ) ( ( ( from [ 0 ] & 0xf ) << 12 ) | ( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f ) )		3148995	0		=			
ANR	3149108	UnaryOperationExpression	* to ++		3148995	0					
ANR	3149109	UnaryOperator	*		3148995	0					
ANR	3149110	PostIncDecOperationExpression	to ++		3148995	1					
ANR	3149111	Identifier	to		3148995	0					
ANR	3149112	IncDec	++		3148995	1					
ANR	3149113	CastExpression	( unsigned short ) ( ( ( from [ 0 ] & 0xf ) << 12 ) | ( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f ) )		3148995	1					
ANR	3149114	CastTarget	unsigned short		3148995	0					
ANR	3149115	InclusiveOrExpression	( ( from [ 0 ] & 0xf ) << 12 ) | ( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f )		3148995	1		|			
ANR	3149116	ShiftExpression	( from [ 0 ] & 0xf ) << 12		3148995	0		<<			
ANR	3149117	BitAndExpression	from [ 0 ] & 0xf		3148995	0		&			
ANR	3149118	ArrayIndexing	from [ 0 ]		3148995	0					
ANR	3149119	Identifier	from		3148995	0					
ANR	3149120	PrimaryExpression	0		3148995	1					
ANR	3149121	PrimaryExpression	0xf		3148995	1					
ANR	3149122	PrimaryExpression	12		3148995	1					
ANR	3149123	InclusiveOrExpression	( ( from [ 1 ] & 0x3f ) << 6 ) | ( from [ 2 ] & 0x3f )		3148995	1		|			
ANR	3149124	ShiftExpression	( from [ 1 ] & 0x3f ) << 6		3148995	0		<<			
ANR	3149125	BitAndExpression	from [ 1 ] & 0x3f		3148995	0		&			
ANR	3149126	ArrayIndexing	from [ 1 ]		3148995	0					
ANR	3149127	Identifier	from		3148995	0					
ANR	3149128	PrimaryExpression	1		3148995	1					
ANR	3149129	PrimaryExpression	0x3f		3148995	1					
ANR	3149130	PrimaryExpression	6		3148995	1					
ANR	3149131	BitAndExpression	from [ 2 ] & 0x3f		3148995	1		&			
ANR	3149132	ArrayIndexing	from [ 2 ]		3148995	0					
ANR	3149133	Identifier	from		3148995	0					
ANR	3149134	PrimaryExpression	2		3148995	1					
ANR	3149135	PrimaryExpression	0x3f		3148995	1					
ANR	3149136	ExpressionStatement	from += 3	464:6:13329:13338	3148995	8	True				
ANR	3149137	AssignmentExpression	from += 3		3148995	0		+=			
ANR	3149138	Identifier	from		3148995	0					
ANR	3149139	PrimaryExpression	3		3148995	1					
ANR	3149140	BreakStatement	break ;	465:6:13346:13351	3148995	9	True				
ANR	3149141	Label	case BT_LEAD4 :	466:4:13357:13370	3148995	10	True				
ANR	3149142	Identifier	BT_LEAD4		3148995	0					
ANR	3149143	CompoundStatement		26:8:780:795	3148995	11					
ANR	3149144	IdentifierDeclStatement	unsigned long n ;	468:8:13388:13403	3148995	0	True				
ANR	3149145	IdentifierDecl	n		3148995	0					
ANR	3149146	IdentifierDeclType	unsigned long		3148995	0					
ANR	3149147	Identifier	n		3148995	1					
ANR	3149148	IfStatement	if ( toLim - to < 2 )		3148995	1					
ANR	3149149	Condition	toLim - to < 2	469:12:13417:13430	3148995	0	True				
ANR	3149150	RelationalExpression	toLim - to < 2		3148995	0		<			
ANR	3149151	AdditiveExpression	toLim - to		3148995	0		-			
ANR	3149152	Identifier	toLim		3148995	0					
ANR	3149153	Identifier	to		3148995	1					
ANR	3149154	PrimaryExpression	2		3148995	1					
ANR	3149155	CompoundStatement		27:28:825:825	3148995	1					
ANR	3149156	ExpressionStatement	res = XML_CONVERT_OUTPUT_EXHAUSTED	470:10:13445:13479	3148995	0	True				
ANR	3149157	AssignmentExpression	res = XML_CONVERT_OUTPUT_EXHAUSTED		3148995	0		=			
ANR	3149158	Identifier	res		3148995	0					
ANR	3149159	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3148995	1					
ANR	3149160	GotoStatement	goto after ;	471:10:13491:13501	3148995	1	True				
ANR	3149161	Identifier	after		3148995	0					
ANR	3149162	IfStatement	if ( fromLim - from < 4 )		3148995	2					
ANR	3149163	Condition	fromLim - from < 4	473:12:13525:13542	3148995	0	True				
ANR	3149164	RelationalExpression	fromLim - from < 4		3148995	0		<			
ANR	3149165	AdditiveExpression	fromLim - from		3148995	0		-			
ANR	3149166	Identifier	fromLim		3148995	0					
ANR	3149167	Identifier	from		3148995	1					
ANR	3149168	PrimaryExpression	4		3148995	1					
ANR	3149169	CompoundStatement		31:32:937:937	3148995	1					
ANR	3149170	ExpressionStatement	res = XML_CONVERT_INPUT_INCOMPLETE	474:10:13557:13591	3148995	0	True				
ANR	3149171	AssignmentExpression	res = XML_CONVERT_INPUT_INCOMPLETE		3148995	0		=			
ANR	3149172	Identifier	res		3148995	0					
ANR	3149173	Identifier	XML_CONVERT_INPUT_INCOMPLETE		3148995	1					
ANR	3149174	GotoStatement	goto after ;	475:10:13603:13613	3148995	1	True				
ANR	3149175	Identifier	after		3148995	0					
ANR	3149176	ExpressionStatement	n = ( ( from [ 0 ] & 0x7 ) << 18 ) | ( ( from [ 1 ] & 0x3f ) << 12 ) | ( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )	477:8:13633:13744	3148995	3	True				
ANR	3149177	AssignmentExpression	n = ( ( from [ 0 ] & 0x7 ) << 18 ) | ( ( from [ 1 ] & 0x3f ) << 12 ) | ( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )		3148995	0		=			
ANR	3149178	Identifier	n		3148995	0					
ANR	3149179	InclusiveOrExpression	( ( from [ 0 ] & 0x7 ) << 18 ) | ( ( from [ 1 ] & 0x3f ) << 12 ) | ( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )		3148995	1		|			
ANR	3149180	ShiftExpression	( from [ 0 ] & 0x7 ) << 18		3148995	0		<<			
ANR	3149181	BitAndExpression	from [ 0 ] & 0x7		3148995	0		&			
ANR	3149182	ArrayIndexing	from [ 0 ]		3148995	0					
ANR	3149183	Identifier	from		3148995	0					
ANR	3149184	PrimaryExpression	0		3148995	1					
ANR	3149185	PrimaryExpression	0x7		3148995	1					
ANR	3149186	PrimaryExpression	18		3148995	1					
ANR	3149187	InclusiveOrExpression	( ( from [ 1 ] & 0x3f ) << 12 ) | ( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )		3148995	1		|			
ANR	3149188	ShiftExpression	( from [ 1 ] & 0x3f ) << 12		3148995	0		<<			
ANR	3149189	BitAndExpression	from [ 1 ] & 0x3f		3148995	0		&			
ANR	3149190	ArrayIndexing	from [ 1 ]		3148995	0					
ANR	3149191	Identifier	from		3148995	0					
ANR	3149192	PrimaryExpression	1		3148995	1					
ANR	3149193	PrimaryExpression	0x3f		3148995	1					
ANR	3149194	PrimaryExpression	12		3148995	1					
ANR	3149195	InclusiveOrExpression	( ( from [ 2 ] & 0x3f ) << 6 ) | ( from [ 3 ] & 0x3f )		3148995	1		|			
ANR	3149196	ShiftExpression	( from [ 2 ] & 0x3f ) << 6		3148995	0		<<			
ANR	3149197	BitAndExpression	from [ 2 ] & 0x3f		3148995	0		&			
ANR	3149198	ArrayIndexing	from [ 2 ]		3148995	0					
ANR	3149199	Identifier	from		3148995	0					
ANR	3149200	PrimaryExpression	2		3148995	1					
ANR	3149201	PrimaryExpression	0x3f		3148995	1					
ANR	3149202	PrimaryExpression	6		3148995	1					
ANR	3149203	BitAndExpression	from [ 3 ] & 0x3f		3148995	1		&			
ANR	3149204	ArrayIndexing	from [ 3 ]		3148995	0					
ANR	3149205	Identifier	from		3148995	0					
ANR	3149206	PrimaryExpression	3		3148995	1					
ANR	3149207	PrimaryExpression	0x3f		3148995	1					
ANR	3149208	ExpressionStatement	n -= 0x10000	479:8:13754:13766	3148995	4	True				
ANR	3149209	AssignmentExpression	n -= 0x10000		3148995	0		-=			
ANR	3149210	Identifier	n		3148995	0					
ANR	3149211	PrimaryExpression	0x10000		3148995	1					
ANR	3149212	ExpressionStatement	to [ 0 ] = ( unsigned short ) ( ( n >> 10 ) | 0xD800 )	480:8:13776:13820	3148995	5	True				
ANR	3149213	AssignmentExpression	to [ 0 ] = ( unsigned short ) ( ( n >> 10 ) | 0xD800 )		3148995	0		=			
ANR	3149214	ArrayIndexing	to [ 0 ]		3148995	0					
ANR	3149215	Identifier	to		3148995	0					
ANR	3149216	PrimaryExpression	0		3148995	1					
ANR	3149217	CastExpression	( unsigned short ) ( ( n >> 10 ) | 0xD800 )		3148995	1					
ANR	3149218	CastTarget	unsigned short		3148995	0					
ANR	3149219	InclusiveOrExpression	( n >> 10 ) | 0xD800		3148995	1		|			
ANR	3149220	ShiftExpression	n >> 10		3148995	0		>>			
ANR	3149221	Identifier	n		3148995	0					
ANR	3149222	PrimaryExpression	10		3148995	1					
ANR	3149223	PrimaryExpression	0xD800		3148995	1					
ANR	3149224	ExpressionStatement	to [ 1 ] = ( unsigned short ) ( ( n & 0x3FF ) | 0xDC00 )	481:8:13830:13876	3148995	6	True				
ANR	3149225	AssignmentExpression	to [ 1 ] = ( unsigned short ) ( ( n & 0x3FF ) | 0xDC00 )		3148995	0		=			
ANR	3149226	ArrayIndexing	to [ 1 ]		3148995	0					
ANR	3149227	Identifier	to		3148995	0					
ANR	3149228	PrimaryExpression	1		3148995	1					
ANR	3149229	CastExpression	( unsigned short ) ( ( n & 0x3FF ) | 0xDC00 )		3148995	1					
ANR	3149230	CastTarget	unsigned short		3148995	0					
ANR	3149231	InclusiveOrExpression	( n & 0x3FF ) | 0xDC00		3148995	1		|			
ANR	3149232	BitAndExpression	n & 0x3FF		3148995	0		&			
ANR	3149233	Identifier	n		3148995	0					
ANR	3149234	PrimaryExpression	0x3FF		3148995	1					
ANR	3149235	PrimaryExpression	0xDC00		3148995	1					
ANR	3149236	ExpressionStatement	to += 2	482:8:13886:13893	3148995	7	True				
ANR	3149237	AssignmentExpression	to += 2		3148995	0		+=			
ANR	3149238	Identifier	to		3148995	0					
ANR	3149239	PrimaryExpression	2		3148995	1					
ANR	3149240	ExpressionStatement	from += 4	483:8:13903:13912	3148995	8	True				
ANR	3149241	AssignmentExpression	from += 4		3148995	0		+=			
ANR	3149242	Identifier	from		3148995	0					
ANR	3149243	PrimaryExpression	4		3148995	1					
ANR	3149244	BreakStatement	break ;	485:6:13928:13933	3148995	12	True				
ANR	3149245	Label	default :	486:4:13939:13946	3148995	13	True				
ANR	3149246	Identifier	default		3148995	0					
ANR	3149247	ExpressionStatement	* to ++ = * from ++	487:6:13954:13969	3148995	14	True				
ANR	3149248	AssignmentExpression	* to ++ = * from ++		3148995	0		=			
ANR	3149249	UnaryOperationExpression	* to ++		3148995	0					
ANR	3149250	UnaryOperator	*		3148995	0					
ANR	3149251	PostIncDecOperationExpression	to ++		3148995	1					
ANR	3149252	Identifier	to		3148995	0					
ANR	3149253	IncDec	++		3148995	1					
ANR	3149254	UnaryOperationExpression	* from ++		3148995	1					
ANR	3149255	UnaryOperator	*		3148995	0					
ANR	3149256	PostIncDecOperationExpression	from ++		3148995	1					
ANR	3149257	Identifier	from		3148995	0					
ANR	3149258	IncDec	++		3148995	1					
ANR	3149259	BreakStatement	break ;	488:6:13977:13982	3148995	15	True				
ANR	3149260	IfStatement	if ( from < fromLim )		3148995	4					
ANR	3149261	Condition	from < fromLim	491:6:14000:14013	3148995	0	True				
ANR	3149262	RelationalExpression	from < fromLim		3148995	0		<			
ANR	3149263	Identifier	from		3148995	0					
ANR	3149264	Identifier	fromLim		3148995	1					
ANR	3149265	ExpressionStatement	res = XML_CONVERT_OUTPUT_EXHAUSTED	492:4:14020:14054	3148995	1	True				
ANR	3149266	AssignmentExpression	res = XML_CONVERT_OUTPUT_EXHAUSTED		3148995	0		=			
ANR	3149267	Identifier	res		3148995	0					
ANR	3149268	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3148995	1					
ANR	3149269	Label	after :	493:0:14056:14061	3148995	5	True				
ANR	3149270	Identifier	after		3148995	0					
ANR	3149271	ExpressionStatement	* fromP = from	494:2:14065:14078	3148995	6	True				
ANR	3149272	AssignmentExpression	* fromP = from		3148995	0		=			
ANR	3149273	UnaryOperationExpression	* fromP		3148995	0					
ANR	3149274	UnaryOperator	*		3148995	0					
ANR	3149275	Identifier	fromP		3148995	1					
ANR	3149276	Identifier	from		3148995	1					
ANR	3149277	ExpressionStatement	* toP = to	495:2:14082:14091	3148995	7	True				
ANR	3149278	AssignmentExpression	* toP = to		3148995	0		=			
ANR	3149279	UnaryOperationExpression	* toP		3148995	0					
ANR	3149280	UnaryOperator	*		3148995	0					
ANR	3149281	Identifier	toP		3148995	1					
ANR	3149282	Identifier	to		3148995	1					
ANR	3149283	ReturnStatement	return res ;	496:2:14095:14105	3148995	8	True				
ANR	3149284	Identifier	res		3148995	0					
ANR	3149285	ReturnType	static enum XML_Convert_Result PTRCALL		3148995	1					
ANR	3149286	Identifier	utf8_toUtf16		3148995	2					
ANR	3149287	ParameterList	"const ENCODING * enc , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim"		3148995	3					
ANR	3149288	Parameter	const ENCODING * enc	440:13:12468:12486	3148995	0	True				
ANR	3149289	ParameterType	const ENCODING *		3148995	0					
ANR	3149290	Identifier	enc		3148995	1					
ANR	3149291	Parameter	const char * * fromP	441:13:12502:12519	3148995	1	True				
ANR	3149292	ParameterType	const char * *		3148995	0					
ANR	3149293	Identifier	fromP		3148995	1					
ANR	3149294	Parameter	const char * fromLim	441:33:12522:12540	3148995	2	True				
ANR	3149295	ParameterType	const char *		3148995	0					
ANR	3149296	Identifier	fromLim		3148995	1					
ANR	3149297	Parameter	unsigned short * * toP	442:13:12556:12575	3148995	3	True				
ANR	3149298	ParameterType	unsigned short * *		3148995	0					
ANR	3149299	Identifier	toP		3148995	1					
ANR	3149300	Parameter	const unsigned short * toLim	442:35:12578:12604	3148995	4	True				
ANR	3149301	ParameterType	const unsigned short *		3148995	0					
ANR	3149302	Identifier	toLim		3148995	1					
ANR	3149303	CFGEntryNode	ENTRY		3148995		True				
ANR	3149304	CFGExitNode	EXIT		3148995		True				
ANR	3149305	Symbol	res		3148995						
ANR	3149306	Symbol	* * from		3148995						
ANR	3149307	Symbol	* to		3148995						
ANR	3149308	Symbol	toLim		3148995						
ANR	3149309	Symbol	* fromP		3148995						
ANR	3149310	Symbol	( ( struct normal_encoding * ) enc ) -> type		3148995						
ANR	3149311	Symbol	* ( ( struct normal_encoding * ) enc ) -> type		3148995						
ANR	3149312	Symbol	XML_CONVERT_INPUT_INCOMPLETE		3148995						
ANR	3149313	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		3148995						
ANR	3149314	Symbol	* * enc		3148995						
ANR	3149315	Symbol	n		3148995						
ANR	3149316	Symbol	* from ++		3148995						
ANR	3149317	Symbol	fromP		3148995						
ANR	3149318	Symbol	fromLim		3148995						
ANR	3149319	Symbol	toP		3148995						
ANR	3149320	Symbol	* to ++		3148995						
ANR	3149321	Symbol	from		3148995						
ANR	3149322	Symbol	enc		3148995						
ANR	3149323	Symbol	to		3148995						
ANR	3149324	Symbol	* enc		3148995						
ANR	3149325	Symbol	XML_CONVERT_COMPLETED		3148995						
ANR	3149326	Symbol	* from		3148995						
ANR	3149327	Symbol	* toP		3148995						
ANR	3149328	DeclStmt									
ANR	3149329	Decl							const struct normal_encoding	const struct normal_encoding	utf8_encoding_ns
ANR	3149330	DeclStmt									
ANR	3149331	Decl							const struct normal_encoding	const struct normal_encoding	utf8_encoding
ANR	3149332	DeclStmt									
ANR	3149333	Decl							const struct normal_encoding	const struct normal_encoding	internal_utf8_encoding_ns
ANR	3149334	DeclStmt									
ANR	3149335	Decl							const struct normal_encoding	const struct normal_encoding	internal_utf8_encoding
ANR	3149336	Function	latin1_toUtf8	545:0:15086:15734							
ANR	3149337	FunctionDef	"latin1_toUtf8 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		3149336	0					
ANR	3149338	CompoundStatement		549:0:15270:15734	3149336	0					
ANR	3149339	ForStatement	for ( ; ; )		3149336	0					
ANR	3149340	CompoundStatement		3:4:18:33	3149336	0					
ANR	3149341	IdentifierDeclStatement	unsigned char c ;	551:4:15289:15304	3149336	0	True				
ANR	3149342	IdentifierDecl	c		3149336	0					
ANR	3149343	IdentifierDeclType	unsigned char		3149336	0					
ANR	3149344	Identifier	c		3149336	1					
ANR	3149345	IfStatement	if ( * fromP == fromLim )		3149336	1					
ANR	3149346	Condition	* fromP == fromLim	552:8:15314:15330	3149336	0	True				
ANR	3149347	EqualityExpression	* fromP == fromLim		3149336	0		==			
ANR	3149348	UnaryOperationExpression	* fromP		3149336	0					
ANR	3149349	UnaryOperator	*		3149336	0					
ANR	3149350	Identifier	fromP		3149336	1					
ANR	3149351	Identifier	fromLim		3149336	1					
ANR	3149352	ReturnStatement	return XML_CONVERT_COMPLETED ;	553:6:15339:15367	3149336	1	True				
ANR	3149353	Identifier	XML_CONVERT_COMPLETED		3149336	0					
ANR	3149354	ExpressionStatement	c = ( unsigned char ) * * fromP	554:4:15373:15399	3149336	2	True				
ANR	3149355	AssignmentExpression	c = ( unsigned char ) * * fromP		3149336	0		=			
ANR	3149356	Identifier	c		3149336	0					
ANR	3149357	CastExpression	( unsigned char ) * * fromP		3149336	1					
ANR	3149358	CastTarget	unsigned char		3149336	0					
ANR	3149359	UnaryOperationExpression	* * fromP		3149336	1					
ANR	3149360	UnaryOperator	*		3149336	0					
ANR	3149361	UnaryOperationExpression	* fromP		3149336	1					
ANR	3149362	UnaryOperator	*		3149336	0					
ANR	3149363	Identifier	fromP		3149336	1					
ANR	3149364	IfStatement	if ( c & 0x80 )		3149336	3					
ANR	3149365	Condition	c & 0x80	555:8:15409:15416	3149336	0	True				
ANR	3149366	BitAndExpression	c & 0x80		3149336	0		&			
ANR	3149367	Identifier	c		3149336	0					
ANR	3149368	PrimaryExpression	0x80		3149336	1					
ANR	3149369	CompoundStatement		7:18:148:148	3149336	1					
ANR	3149370	IfStatement	if ( toLim - * toP < 2 )		3149336	0					
ANR	3149371	Condition	toLim - * toP < 2	556:10:15431:15446	3149336	0	True				
ANR	3149372	RelationalExpression	toLim - * toP < 2		3149336	0		<			
ANR	3149373	AdditiveExpression	toLim - * toP		3149336	0		-			
ANR	3149374	Identifier	toLim		3149336	0					
ANR	3149375	UnaryOperationExpression	* toP		3149336	1					
ANR	3149376	UnaryOperator	*		3149336	0					
ANR	3149377	Identifier	toP		3149336	1					
ANR	3149378	PrimaryExpression	2		3149336	1					
ANR	3149379	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	557:8:15457:15492	3149336	1	True				
ANR	3149380	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3149336	0					
ANR	3149381	ExpressionStatement	* ( * toP ) ++ = ( char ) ( ( c >> 6 ) | UTF8_cval2 )	558:6:15500:15541	3149336	1	True				
ANR	3149382	AssignmentExpression	* ( * toP ) ++ = ( char ) ( ( c >> 6 ) | UTF8_cval2 )		3149336	0		=			
ANR	3149383	UnaryOperationExpression	* ( * toP ) ++		3149336	0					
ANR	3149384	UnaryOperator	*		3149336	0					
ANR	3149385	PostIncDecOperationExpression	( * toP ) ++		3149336	1					
ANR	3149386	UnaryOperationExpression	* toP		3149336	0					
ANR	3149387	UnaryOperator	*		3149336	0					
ANR	3149388	Identifier	toP		3149336	1					
ANR	3149389	IncDec	++		3149336	1					
ANR	3149390	CastExpression	( char ) ( ( c >> 6 ) | UTF8_cval2 )		3149336	1					
ANR	3149391	CastTarget	char		3149336	0					
ANR	3149392	InclusiveOrExpression	( c >> 6 ) | UTF8_cval2		3149336	1		|			
ANR	3149393	ShiftExpression	c >> 6		3149336	0		>>			
ANR	3149394	Identifier	c		3149336	0					
ANR	3149395	PrimaryExpression	6		3149336	1					
ANR	3149396	Identifier	UTF8_cval2		3149336	1					
ANR	3149397	ExpressionStatement	* ( * toP ) ++ = ( char ) ( ( c & 0x3f ) | 0x80 )	559:6:15549:15586	3149336	2	True				
ANR	3149398	AssignmentExpression	* ( * toP ) ++ = ( char ) ( ( c & 0x3f ) | 0x80 )		3149336	0		=			
ANR	3149399	UnaryOperationExpression	* ( * toP ) ++		3149336	0					
ANR	3149400	UnaryOperator	*		3149336	0					
ANR	3149401	PostIncDecOperationExpression	( * toP ) ++		3149336	1					
ANR	3149402	UnaryOperationExpression	* toP		3149336	0					
ANR	3149403	UnaryOperator	*		3149336	0					
ANR	3149404	Identifier	toP		3149336	1					
ANR	3149405	IncDec	++		3149336	1					
ANR	3149406	CastExpression	( char ) ( ( c & 0x3f ) | 0x80 )		3149336	1					
ANR	3149407	CastTarget	char		3149336	0					
ANR	3149408	InclusiveOrExpression	( c & 0x3f ) | 0x80		3149336	1		|			
ANR	3149409	BitAndExpression	c & 0x3f		3149336	0		&			
ANR	3149410	Identifier	c		3149336	0					
ANR	3149411	PrimaryExpression	0x3f		3149336	1					
ANR	3149412	PrimaryExpression	0x80		3149336	1					
ANR	3149413	ExpressionStatement	( * fromP ) ++	560:6:15594:15604	3149336	3	True				
ANR	3149414	PostIncDecOperationExpression	( * fromP ) ++		3149336	0					
ANR	3149415	UnaryOperationExpression	* fromP		3149336	0					
ANR	3149416	UnaryOperator	*		3149336	0					
ANR	3149417	Identifier	fromP		3149336	1					
ANR	3149418	IncDec	++		3149336	1					
ANR	3149419	ElseStatement	else		3149336	0					
ANR	3149420	CompoundStatement		14:9:350:350	3149336	0					
ANR	3149421	IfStatement	if ( * toP == toLim )		3149336	0					
ANR	3149422	Condition	* toP == toLim	563:10:15633:15645	3149336	0	True				
ANR	3149423	EqualityExpression	* toP == toLim		3149336	0		==			
ANR	3149424	UnaryOperationExpression	* toP		3149336	0					
ANR	3149425	UnaryOperator	*		3149336	0					
ANR	3149426	Identifier	toP		3149336	1					
ANR	3149427	Identifier	toLim		3149336	1					
ANR	3149428	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	564:8:15656:15691	3149336	1	True				
ANR	3149429	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3149336	0					
ANR	3149430	ExpressionStatement	* ( * toP ) ++ = * ( * fromP ) ++	565:6:15699:15722	3149336	1	True				
ANR	3149431	AssignmentExpression	* ( * toP ) ++ = * ( * fromP ) ++		3149336	0		=			
ANR	3149432	UnaryOperationExpression	* ( * toP ) ++		3149336	0					
ANR	3149433	UnaryOperator	*		3149336	0					
ANR	3149434	PostIncDecOperationExpression	( * toP ) ++		3149336	1					
ANR	3149435	UnaryOperationExpression	* toP		3149336	0					
ANR	3149436	UnaryOperator	*		3149336	0					
ANR	3149437	Identifier	toP		3149336	1					
ANR	3149438	IncDec	++		3149336	1					
ANR	3149439	UnaryOperationExpression	* ( * fromP ) ++		3149336	1					
ANR	3149440	UnaryOperator	*		3149336	0					
ANR	3149441	PostIncDecOperationExpression	( * fromP ) ++		3149336	1					
ANR	3149442	UnaryOperationExpression	* fromP		3149336	0					
ANR	3149443	UnaryOperator	*		3149336	0					
ANR	3149444	Identifier	fromP		3149336	1					
ANR	3149445	IncDec	++		3149336	1					
ANR	3149446	ReturnType	static enum XML_Convert_Result PTRCALL		3149336	1					
ANR	3149447	Identifier	latin1_toUtf8		3149336	2					
ANR	3149448	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		3149336	3					
ANR	3149449	Parameter	const ENCODING * UNUSED_P ( enc )	546:14:15139:15167	3149336	0	True				
ANR	3149450	ParameterType	const ENCODING * ( enc )		3149336	0					
ANR	3149451	Identifier	UNUSED_P		3149336	1					
ANR	3149452	Parameter	const char * * fromP	547:14:15184:15201	3149336	1	True				
ANR	3149453	ParameterType	const char * *		3149336	0					
ANR	3149454	Identifier	fromP		3149336	1					
ANR	3149455	Parameter	const char * fromLim	547:34:15204:15222	3149336	2	True				
ANR	3149456	ParameterType	const char *		3149336	0					
ANR	3149457	Identifier	fromLim		3149336	1					
ANR	3149458	Parameter	char * * toP	548:14:15239:15248	3149336	3	True				
ANR	3149459	ParameterType	char * *		3149336	0					
ANR	3149460	Identifier	toP		3149336	1					
ANR	3149461	Parameter	const char * toLim	548:26:15251:15267	3149336	4	True				
ANR	3149462	ParameterType	const char *		3149336	0					
ANR	3149463	Identifier	toLim		3149336	1					
ANR	3149464	CFGEntryNode	ENTRY		3149336		True				
ANR	3149465	CFGExitNode	EXIT		3149336		True				
ANR	3149466	InfiniteForNode	true		3149336		True				
ANR	3149467	Symbol	UNUSED_P		3149336						
ANR	3149468	Symbol	toLim		3149336						
ANR	3149469	Symbol	c		3149336						
ANR	3149470	Symbol	* fromP		3149336						
ANR	3149471	Symbol	* * fromP		3149336						
ANR	3149472	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		3149336						
ANR	3149473	Symbol	* ( * toP ) ++		3149336						
ANR	3149474	Symbol	UTF8_cval2		3149336						
ANR	3149475	Symbol	* ( * fromP ) ++		3149336						
ANR	3149476	Symbol	fromP		3149336						
ANR	3149477	Symbol	fromLim		3149336						
ANR	3149478	Symbol	toP		3149336						
ANR	3149479	Symbol	XML_CONVERT_COMPLETED		3149336						
ANR	3149480	Symbol	* toP		3149336						
ANR	3149481	Function	latin1_toUtf16	570:0:15737:16161							
ANR	3149482	FunctionDef	"latin1_toUtf16 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim)"		3149481	0					
ANR	3149483	CompoundStatement		574:0:15944:16161	3149481	0					
ANR	3149484	WhileStatement	while ( * fromP < fromLim && * toP < toLim )		3149481	0					
ANR	3149485	Condition	* fromP < fromLim && * toP < toLim	575:9:15955:15986	3149481	0	True				
ANR	3149486	AndExpression	* fromP < fromLim && * toP < toLim		3149481	0		&&			
ANR	3149487	RelationalExpression	* fromP < fromLim		3149481	0		<			
ANR	3149488	UnaryOperationExpression	* fromP		3149481	0					
ANR	3149489	UnaryOperator	*		3149481	0					
ANR	3149490	Identifier	fromP		3149481	1					
ANR	3149491	Identifier	fromLim		3149481	1					
ANR	3149492	RelationalExpression	* toP < toLim		3149481	1		<			
ANR	3149493	UnaryOperationExpression	* toP		3149481	0					
ANR	3149494	UnaryOperator	*		3149481	0					
ANR	3149495	Identifier	toP		3149481	1					
ANR	3149496	Identifier	toLim		3149481	1					
ANR	3149497	ExpressionStatement	* ( * toP ) ++ = ( unsigned char ) * ( * fromP ) ++	576:4:15993:16031	3149481	1	True				
ANR	3149498	AssignmentExpression	* ( * toP ) ++ = ( unsigned char ) * ( * fromP ) ++		3149481	0		=			
ANR	3149499	UnaryOperationExpression	* ( * toP ) ++		3149481	0					
ANR	3149500	UnaryOperator	*		3149481	0					
ANR	3149501	PostIncDecOperationExpression	( * toP ) ++		3149481	1					
ANR	3149502	UnaryOperationExpression	* toP		3149481	0					
ANR	3149503	UnaryOperator	*		3149481	0					
ANR	3149504	Identifier	toP		3149481	1					
ANR	3149505	IncDec	++		3149481	1					
ANR	3149506	CastExpression	( unsigned char ) * ( * fromP ) ++		3149481	1					
ANR	3149507	CastTarget	unsigned char		3149481	0					
ANR	3149508	UnaryOperationExpression	* ( * fromP ) ++		3149481	1					
ANR	3149509	UnaryOperator	*		3149481	0					
ANR	3149510	PostIncDecOperationExpression	( * fromP ) ++		3149481	1					
ANR	3149511	UnaryOperationExpression	* fromP		3149481	0					
ANR	3149512	UnaryOperator	*		3149481	0					
ANR	3149513	Identifier	fromP		3149481	1					
ANR	3149514	IncDec	++		3149481	1					
ANR	3149515	IfStatement	if ( ( * toP == toLim ) && ( * fromP < fromLim ) )		3149481	1					
ANR	3149516	Condition	( * toP == toLim ) && ( * fromP < fromLim )	578:6:16040:16076	3149481	0	True				
ANR	3149517	AndExpression	( * toP == toLim ) && ( * fromP < fromLim )		3149481	0		&&			
ANR	3149518	EqualityExpression	* toP == toLim		3149481	0		==			
ANR	3149519	UnaryOperationExpression	* toP		3149481	0					
ANR	3149520	UnaryOperator	*		3149481	0					
ANR	3149521	Identifier	toP		3149481	1					
ANR	3149522	Identifier	toLim		3149481	1					
ANR	3149523	RelationalExpression	* fromP < fromLim		3149481	1		<			
ANR	3149524	UnaryOperationExpression	* fromP		3149481	0					
ANR	3149525	UnaryOperator	*		3149481	0					
ANR	3149526	Identifier	fromP		3149481	1					
ANR	3149527	Identifier	fromLim		3149481	1					
ANR	3149528	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	579:4:16083:16118	3149481	1	True				
ANR	3149529	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3149481	0					
ANR	3149530	ElseStatement	else		3149481	0					
ANR	3149531	ReturnStatement	return XML_CONVERT_COMPLETED ;	581:4:16131:16159	3149481	0	True				
ANR	3149532	Identifier	XML_CONVERT_COMPLETED		3149481	0					
ANR	3149533	ReturnType	static enum XML_Convert_Result PTRCALL		3149481	1					
ANR	3149534	Identifier	latin1_toUtf16		3149481	2					
ANR	3149535	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim"		3149481	3					
ANR	3149536	Parameter	const ENCODING * UNUSED_P ( enc )	571:15:15791:15819	3149481	0	True				
ANR	3149537	ParameterType	const ENCODING * ( enc )		3149481	0					
ANR	3149538	Identifier	UNUSED_P		3149481	1					
ANR	3149539	Parameter	const char * * fromP	572:15:15837:15854	3149481	1	True				
ANR	3149540	ParameterType	const char * *		3149481	0					
ANR	3149541	Identifier	fromP		3149481	1					
ANR	3149542	Parameter	const char * fromLim	572:35:15857:15875	3149481	2	True				
ANR	3149543	ParameterType	const char *		3149481	0					
ANR	3149544	Identifier	fromLim		3149481	1					
ANR	3149545	Parameter	unsigned short * * toP	573:15:15893:15912	3149481	3	True				
ANR	3149546	ParameterType	unsigned short * *		3149481	0					
ANR	3149547	Identifier	toP		3149481	1					
ANR	3149548	Parameter	const unsigned short * toLim	573:37:15915:15941	3149481	4	True				
ANR	3149549	ParameterType	const unsigned short *		3149481	0					
ANR	3149550	Identifier	toLim		3149481	1					
ANR	3149551	CFGEntryNode	ENTRY		3149481		True				
ANR	3149552	CFGExitNode	EXIT		3149481		True				
ANR	3149553	Symbol	UNUSED_P		3149481						
ANR	3149554	Symbol	toLim		3149481						
ANR	3149555	Symbol	* fromP		3149481						
ANR	3149556	Symbol	fromP		3149481						
ANR	3149557	Symbol	fromLim		3149481						
ANR	3149558	Symbol	toP		3149481						
ANR	3149559	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		3149481						
ANR	3149560	Symbol	* ( * toP ) ++		3149481						
ANR	3149561	Symbol	* ( * fromP ) ++		3149481						
ANR	3149562	Symbol	XML_CONVERT_COMPLETED		3149481						
ANR	3149563	Symbol	* toP		3149481						
ANR	3149564	DeclStmt									
ANR	3149565	Decl							const struct normal_encoding	const struct normal_encoding	latin1_encoding_ns
ANR	3149566	DeclStmt									
ANR	3149567	Decl							const struct normal_encoding	const struct normal_encoding	latin1_encoding
ANR	3149568	Function	ascii_toUtf8	608:0:16641:17024							
ANR	3149569	FunctionDef	"ascii_toUtf8 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		3149568	0					
ANR	3149570	CompoundStatement		612:0:16822:17024	3149568	0					
ANR	3149571	WhileStatement	while ( * fromP < fromLim && * toP < toLim )		3149568	0					
ANR	3149572	Condition	* fromP < fromLim && * toP < toLim	613:9:16833:16864	3149568	0	True				
ANR	3149573	AndExpression	* fromP < fromLim && * toP < toLim		3149568	0		&&			
ANR	3149574	RelationalExpression	* fromP < fromLim		3149568	0		<			
ANR	3149575	UnaryOperationExpression	* fromP		3149568	0					
ANR	3149576	UnaryOperator	*		3149568	0					
ANR	3149577	Identifier	fromP		3149568	1					
ANR	3149578	Identifier	fromLim		3149568	1					
ANR	3149579	RelationalExpression	* toP < toLim		3149568	1		<			
ANR	3149580	UnaryOperationExpression	* toP		3149568	0					
ANR	3149581	UnaryOperator	*		3149568	0					
ANR	3149582	Identifier	toP		3149568	1					
ANR	3149583	Identifier	toLim		3149568	1					
ANR	3149584	ExpressionStatement	* ( * toP ) ++ = * ( * fromP ) ++	614:4:16871:16894	3149568	1	True				
ANR	3149585	AssignmentExpression	* ( * toP ) ++ = * ( * fromP ) ++		3149568	0		=			
ANR	3149586	UnaryOperationExpression	* ( * toP ) ++		3149568	0					
ANR	3149587	UnaryOperator	*		3149568	0					
ANR	3149588	PostIncDecOperationExpression	( * toP ) ++		3149568	1					
ANR	3149589	UnaryOperationExpression	* toP		3149568	0					
ANR	3149590	UnaryOperator	*		3149568	0					
ANR	3149591	Identifier	toP		3149568	1					
ANR	3149592	IncDec	++		3149568	1					
ANR	3149593	UnaryOperationExpression	* ( * fromP ) ++		3149568	1					
ANR	3149594	UnaryOperator	*		3149568	0					
ANR	3149595	PostIncDecOperationExpression	( * fromP ) ++		3149568	1					
ANR	3149596	UnaryOperationExpression	* fromP		3149568	0					
ANR	3149597	UnaryOperator	*		3149568	0					
ANR	3149598	Identifier	fromP		3149568	1					
ANR	3149599	IncDec	++		3149568	1					
ANR	3149600	IfStatement	if ( ( * toP == toLim ) && ( * fromP < fromLim ) )		3149568	1					
ANR	3149601	Condition	( * toP == toLim ) && ( * fromP < fromLim )	616:6:16903:16939	3149568	0	True				
ANR	3149602	AndExpression	( * toP == toLim ) && ( * fromP < fromLim )		3149568	0		&&			
ANR	3149603	EqualityExpression	* toP == toLim		3149568	0		==			
ANR	3149604	UnaryOperationExpression	* toP		3149568	0					
ANR	3149605	UnaryOperator	*		3149568	0					
ANR	3149606	Identifier	toP		3149568	1					
ANR	3149607	Identifier	toLim		3149568	1					
ANR	3149608	RelationalExpression	* fromP < fromLim		3149568	1		<			
ANR	3149609	UnaryOperationExpression	* fromP		3149568	0					
ANR	3149610	UnaryOperator	*		3149568	0					
ANR	3149611	Identifier	fromP		3149568	1					
ANR	3149612	Identifier	fromLim		3149568	1					
ANR	3149613	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	617:4:16946:16981	3149568	1	True				
ANR	3149614	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3149568	0					
ANR	3149615	ElseStatement	else		3149568	0					
ANR	3149616	ReturnStatement	return XML_CONVERT_COMPLETED ;	619:4:16994:17022	3149568	0	True				
ANR	3149617	Identifier	XML_CONVERT_COMPLETED		3149568	0					
ANR	3149618	ReturnType	static enum XML_Convert_Result PTRCALL		3149568	1					
ANR	3149619	Identifier	ascii_toUtf8		3149568	2					
ANR	3149620	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		3149568	3					
ANR	3149621	Parameter	const ENCODING * UNUSED_P ( enc )	609:13:16693:16721	3149568	0	True				
ANR	3149622	ParameterType	const ENCODING * ( enc )		3149568	0					
ANR	3149623	Identifier	UNUSED_P		3149568	1					
ANR	3149624	Parameter	const char * * fromP	610:13:16737:16754	3149568	1	True				
ANR	3149625	ParameterType	const char * *		3149568	0					
ANR	3149626	Identifier	fromP		3149568	1					
ANR	3149627	Parameter	const char * fromLim	610:33:16757:16775	3149568	2	True				
ANR	3149628	ParameterType	const char *		3149568	0					
ANR	3149629	Identifier	fromLim		3149568	1					
ANR	3149630	Parameter	char * * toP	611:13:16791:16800	3149568	3	True				
ANR	3149631	ParameterType	char * *		3149568	0					
ANR	3149632	Identifier	toP		3149568	1					
ANR	3149633	Parameter	const char * toLim	611:25:16803:16819	3149568	4	True				
ANR	3149634	ParameterType	const char *		3149568	0					
ANR	3149635	Identifier	toLim		3149568	1					
ANR	3149636	CFGEntryNode	ENTRY		3149568		True				
ANR	3149637	CFGExitNode	EXIT		3149568		True				
ANR	3149638	Symbol	UNUSED_P		3149568						
ANR	3149639	Symbol	toLim		3149568						
ANR	3149640	Symbol	* fromP		3149568						
ANR	3149641	Symbol	fromP		3149568						
ANR	3149642	Symbol	fromLim		3149568						
ANR	3149643	Symbol	toP		3149568						
ANR	3149644	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		3149568						
ANR	3149645	Symbol	* ( * toP ) ++		3149568						
ANR	3149646	Symbol	* ( * fromP ) ++		3149568						
ANR	3149647	Symbol	XML_CONVERT_COMPLETED		3149568						
ANR	3149648	Symbol	* toP		3149568						
ANR	3149649	DeclStmt									
ANR	3149650	Decl							const struct normal_encoding	const struct normal_encoding	ascii_encoding_ns
ANR	3149651	DeclStmt									
ANR	3149652	Decl							const struct normal_encoding	const struct normal_encoding	ascii_encoding
ANR	3149653	Function	unicode_byte_type	646:0:17496:17865							
ANR	3149654	FunctionDef	"unicode_byte_type (char hi , char lo)"		3149653	0					
ANR	3149655	CompoundStatement		648:0:17555:17865	3149653	0					
ANR	3149656	SwitchStatement	switch ( ( unsigned char ) hi )		3149653	0					
ANR	3149657	Condition	( unsigned char ) hi	649:10:17567:17583	3149653	0	True				
ANR	3149658	CastExpression	( unsigned char ) hi		3149653	0					
ANR	3149659	CastTarget	unsigned char		3149653	0					
ANR	3149660	Identifier	hi		3149653	1					
ANR	3149661	CompoundStatement		2:29:30:30	3149653	1					
ANR	3149662	Label	case 0xD8 :	650:2:17590:17599	3149653	0	True				
ANR	3149663	Label	case 0xD9 :	650:13:17601:17610	3149653	1	True				
ANR	3149664	Label	case 0xDA :	650:24:17612:17621	3149653	2	True				
ANR	3149665	Label	case 0xDB :	650:35:17623:17632	3149653	3	True				
ANR	3149666	ReturnStatement	return BT_LEAD4 ;	651:4:17638:17653	3149653	4	True				
ANR	3149667	Identifier	BT_LEAD4		3149653	0					
ANR	3149668	Label	case 0xDC :	652:2:17657:17666	3149653	5	True				
ANR	3149669	Label	case 0xDD :	652:13:17668:17677	3149653	6	True				
ANR	3149670	Label	case 0xDE :	652:24:17679:17688	3149653	7	True				
ANR	3149671	Label	case 0xDF :	652:35:17690:17699	3149653	8	True				
ANR	3149672	ReturnStatement	return BT_TRAIL ;	653:4:17705:17720	3149653	9	True				
ANR	3149673	Identifier	BT_TRAIL		3149653	0					
ANR	3149674	Label	case 0xFF :	654:2:17724:17733	3149653	10	True				
ANR	3149675	SwitchStatement	switch ( ( unsigned char ) lo )		3149653	11					
ANR	3149676	Condition	( unsigned char ) lo	655:12:17747:17763	3149653	0	True				
ANR	3149677	CastExpression	( unsigned char ) lo		3149653	0					
ANR	3149678	CastTarget	unsigned char		3149653	0					
ANR	3149679	Identifier	lo		3149653	1					
ANR	3149680	CompoundStatement		8:31:210:210	3149653	1					
ANR	3149681	Label	case 0xFF :	656:4:17772:17781	3149653	0	True				
ANR	3149682	Label	case 0xFE :	657:4:17787:17796	3149653	1	True				
ANR	3149683	ReturnStatement	return BT_NONXML ;	658:6:17804:17820	3149653	2	True				
ANR	3149684	Identifier	BT_NONXML		3149653	0					
ANR	3149685	BreakStatement	break ;	660:4:17832:17837	3149653	12	True				
ANR	3149686	ReturnStatement	return BT_NONASCII ;	662:2:17845:17863	3149653	1	True				
ANR	3149687	Identifier	BT_NONASCII		3149653	0					
ANR	3149688	ReturnType	static int PTRFASTCALL		3149653	1					
ANR	3149689	Identifier	unicode_byte_type		3149653	2					
ANR	3149690	ParameterList	"char hi , char lo"		3149653	3					
ANR	3149691	Parameter	char hi	647:18:17537:17543	3149653	0	True				
ANR	3149692	ParameterType	char		3149653	0					
ANR	3149693	Identifier	hi		3149653	1					
ANR	3149694	Parameter	char lo	647:27:17546:17552	3149653	1	True				
ANR	3149695	ParameterType	char		3149653	0					
ANR	3149696	Identifier	lo		3149653	1					
ANR	3149697	CFGEntryNode	ENTRY		3149653		True				
ANR	3149698	CFGExitNode	EXIT		3149653		True				
ANR	3149699	Symbol	BT_NONASCII		3149653						
ANR	3149700	Symbol	hi		3149653						
ANR	3149701	Symbol	BT_TRAIL		3149653						
ANR	3149702	Symbol	lo		3149653						
ANR	3149703	Symbol	BT_NONXML		3149653						
ANR	3149704	Symbol	BT_LEAD4		3149653						
ANR	3149705	Function	toUtf8	666:0:17902:20144							
ANR	3149706	FunctionDef	"toUtf8 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		3149705	0					
ANR	3149707	CompoundStatement		670:0:18089:20144	3149705	0					
ANR	3149708	IdentifierDeclStatement	const char * from = * fromP ;	671:2:18095:18120	3149705	0	True				
ANR	3149709	IdentifierDecl	* from = * fromP		3149705	0					
ANR	3149710	IdentifierDeclType	const char *		3149705	0					
ANR	3149711	Identifier	from		3149705	1					
ANR	3149712	AssignmentExpression	* from = * fromP		3149705	2		=			
ANR	3149713	Identifier	from		3149705	0					
ANR	3149714	UnaryOperationExpression	* fromP		3149705	1					
ANR	3149715	UnaryOperator	*		3149705	0					
ANR	3149716	Identifier	fromP		3149705	1					
ANR	3149717	ExpressionStatement	fromLim = from + ( ( ( fromLim - from ) >> 1 ) << 1 )	672:2:18126:18173	3149705	1	True				
ANR	3149718	AssignmentExpression	fromLim = from + ( ( ( fromLim - from ) >> 1 ) << 1 )		3149705	0		=			
ANR	3149719	Identifier	fromLim		3149705	0					
ANR	3149720	AdditiveExpression	from + ( ( ( fromLim - from ) >> 1 ) << 1 )		3149705	1		+			
ANR	3149721	Identifier	from		3149705	0					
ANR	3149722	ShiftExpression	( ( fromLim - from ) >> 1 ) << 1		3149705	1		<<			
ANR	3149723	ShiftExpression	( fromLim - from ) >> 1		3149705	0		>>			
ANR	3149724	AdditiveExpression	fromLim - from		3149705	0		-			
ANR	3149725	Identifier	fromLim		3149705	0					
ANR	3149726	Identifier	from		3149705	1					
ANR	3149727	PrimaryExpression	1		3149705	1					
ANR	3149728	PrimaryExpression	1		3149705	1					
ANR	3149729	ForStatement	for ( ; from < fromLim ; from += 2 )		3149705	2					
ANR	3149730	Condition	from < fromLim	673:9:18208:18221	3149705	0	True				
ANR	3149731	RelationalExpression	from < fromLim		3149705	0		<			
ANR	3149732	Identifier	from		3149705	0					
ANR	3149733	Identifier	fromLim		3149705	1					
ANR	3149734	AssignmentExpression	from += 2	673:25:18224:18232	3149705	1	True	+=			
ANR	3149735	Identifier	from		3149705	0					
ANR	3149736	PrimaryExpression	2		3149705	1					
ANR	3149737	CompoundStatement		8:4:234:265	3149705	2					
ANR	3149738	IdentifierDeclStatement	int plane ;	674:4:18243:18252	3149705	0	True				
ANR	3149739	IdentifierDecl	plane		3149705	0					
ANR	3149740	IdentifierDeclType	int		3149705	0					
ANR	3149741	Identifier	plane		3149705	1					
ANR	3149742	IdentifierDeclStatement	unsigned char lo2 ;	675:4:18260:18277	3149705	1	True				
ANR	3149743	IdentifierDecl	lo2		3149705	0					
ANR	3149744	IdentifierDeclType	unsigned char		3149705	0					
ANR	3149745	Identifier	lo2		3149705	1					
ANR	3149746	IdentifierDeclStatement	unsigned char lo = GET_LO ( from ) ;	676:4:18285:18316	3149705	2	True				
ANR	3149747	IdentifierDecl	lo = GET_LO ( from )		3149705	0					
ANR	3149748	IdentifierDeclType	unsigned char		3149705	0					
ANR	3149749	Identifier	lo		3149705	1					
ANR	3149750	AssignmentExpression	lo = GET_LO ( from )		3149705	2		=			
ANR	3149751	Identifier	lo		3149705	0					
ANR	3149752	CallExpression	GET_LO ( from )		3149705	1					
ANR	3149753	Callee	GET_LO		3149705	0					
ANR	3149754	Identifier	GET_LO		3149705	0					
ANR	3149755	ArgumentList	from		3149705	1					
ANR	3149756	Argument	from		3149705	0					
ANR	3149757	Identifier	from		3149705	0					
ANR	3149758	IdentifierDeclStatement	unsigned char hi = GET_HI ( from ) ;	677:4:18324:18355	3149705	3	True				
ANR	3149759	IdentifierDecl	hi = GET_HI ( from )		3149705	0					
ANR	3149760	IdentifierDeclType	unsigned char		3149705	0					
ANR	3149761	Identifier	hi		3149705	1					
ANR	3149762	AssignmentExpression	hi = GET_HI ( from )		3149705	2		=			
ANR	3149763	Identifier	hi		3149705	0					
ANR	3149764	CallExpression	GET_HI ( from )		3149705	1					
ANR	3149765	Callee	GET_HI		3149705	0					
ANR	3149766	Identifier	GET_HI		3149705	0					
ANR	3149767	ArgumentList	from		3149705	1					
ANR	3149768	Argument	from		3149705	0					
ANR	3149769	Identifier	from		3149705	0					
ANR	3149770	SwitchStatement	switch ( hi )		3149705	4					
ANR	3149771	Condition	hi	678:12:18371:18372	3149705	0	True				
ANR	3149772	Identifier	hi		3149705	0					
ANR	3149773	CompoundStatement		9:16:285:285	3149705	1					
ANR	3149774	Label	case 0 :	679:4:18383:18389	3149705	0	True				
ANR	3149775	IfStatement	if ( lo < 0x80 )		3149705	1					
ANR	3149776	Condition	lo < 0x80	680:10:18403:18411	3149705	0	True				
ANR	3149777	RelationalExpression	lo < 0x80		3149705	0		<			
ANR	3149778	Identifier	lo		3149705	0					
ANR	3149779	PrimaryExpression	0x80		3149705	1					
ANR	3149780	CompoundStatement		11:21:324:324	3149705	1					
ANR	3149781	IfStatement	if ( * toP == toLim )		3149705	0					
ANR	3149782	Condition	* toP == toLim	681:12:18430:18442	3149705	0	True				
ANR	3149783	EqualityExpression	* toP == toLim		3149705	0		==			
ANR	3149784	UnaryOperationExpression	* toP		3149705	0					
ANR	3149785	UnaryOperator	*		3149705	0					
ANR	3149786	Identifier	toP		3149705	1					
ANR	3149787	Identifier	toLim		3149705	1					
ANR	3149788	CompoundStatement		12:27:355:355	3149705	1					
ANR	3149789	ExpressionStatement	* fromP = from	682:10:18459:18472	3149705	0	True				
ANR	3149790	AssignmentExpression	* fromP = from		3149705	0		=			
ANR	3149791	UnaryOperationExpression	* fromP		3149705	0					
ANR	3149792	UnaryOperator	*		3149705	0					
ANR	3149793	Identifier	fromP		3149705	1					
ANR	3149794	Identifier	from		3149705	1					
ANR	3149795	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	683:10:18486:18521	3149705	1	True				
ANR	3149796	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3149705	0					
ANR	3149797	ExpressionStatement	* ( * toP ) ++ = lo	685:8:18545:18559	3149705	1	True				
ANR	3149798	AssignmentExpression	* ( * toP ) ++ = lo		3149705	0		=			
ANR	3149799	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3149800	UnaryOperator	*		3149705	0					
ANR	3149801	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3149802	UnaryOperationExpression	* toP		3149705	0					
ANR	3149803	UnaryOperator	*		3149705	0					
ANR	3149804	Identifier	toP		3149705	1					
ANR	3149805	IncDec	++		3149705	1					
ANR	3149806	Identifier	lo		3149705	1					
ANR	3149807	BreakStatement	break ;	686:8:18571:18576	3149705	2	True				
ANR	3149808	Label	case 0x1 :	689:4:18621:18629	3149705	2	True				
ANR	3149809	Label	case 0x2 :	689:14:18631:18639	3149705	3	True				
ANR	3149810	Label	case 0x3 :	689:24:18641:18649	3149705	4	True				
ANR	3149811	Label	case 0x4 :	690:4:18657:18665	3149705	5	True				
ANR	3149812	Label	case 0x5 :	690:14:18667:18675	3149705	6	True				
ANR	3149813	Label	case 0x6 :	690:24:18677:18685	3149705	7	True				
ANR	3149814	Label	case 0x7 :	690:34:18687:18695	3149705	8	True				
ANR	3149815	IfStatement	if ( toLim - * toP < 2 )		3149705	9					
ANR	3149816	Condition	toLim - * toP < 2	691:10:18709:18725	3149705	0	True				
ANR	3149817	RelationalExpression	toLim - * toP < 2		3149705	0		<			
ANR	3149818	AdditiveExpression	toLim - * toP		3149705	0		-			
ANR	3149819	Identifier	toLim		3149705	0					
ANR	3149820	UnaryOperationExpression	* toP		3149705	1					
ANR	3149821	UnaryOperator	*		3149705	0					
ANR	3149822	Identifier	toP		3149705	1					
ANR	3149823	PrimaryExpression	2		3149705	1					
ANR	3149824	CompoundStatement		22:29:638:638	3149705	1					
ANR	3149825	ExpressionStatement	* fromP = from	692:8:18740:18753	3149705	0	True				
ANR	3149826	AssignmentExpression	* fromP = from		3149705	0		=			
ANR	3149827	UnaryOperationExpression	* fromP		3149705	0					
ANR	3149828	UnaryOperator	*		3149705	0					
ANR	3149829	Identifier	fromP		3149705	1					
ANR	3149830	Identifier	from		3149705	1					
ANR	3149831	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	693:8:18765:18800	3149705	1	True				
ANR	3149832	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3149705	0					
ANR	3149833	ExpressionStatement	* ( * toP ) ++ = ( ( lo >> 6 ) | ( hi << 2 ) | UTF8_cval2 )	695:6:18820:18869	3149705	10	True				
ANR	3149834	AssignmentExpression	* ( * toP ) ++ = ( ( lo >> 6 ) | ( hi << 2 ) | UTF8_cval2 )		3149705	0		=			
ANR	3149835	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3149836	UnaryOperator	*		3149705	0					
ANR	3149837	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3149838	UnaryOperationExpression	* toP		3149705	0					
ANR	3149839	UnaryOperator	*		3149705	0					
ANR	3149840	Identifier	toP		3149705	1					
ANR	3149841	IncDec	++		3149705	1					
ANR	3149842	InclusiveOrExpression	( lo >> 6 ) | ( hi << 2 ) | UTF8_cval2		3149705	1		|			
ANR	3149843	ShiftExpression	lo >> 6		3149705	0		>>			
ANR	3149844	Identifier	lo		3149705	0					
ANR	3149845	PrimaryExpression	6		3149705	1					
ANR	3149846	InclusiveOrExpression	( hi << 2 ) | UTF8_cval2		3149705	1		|			
ANR	3149847	ShiftExpression	hi << 2		3149705	0		<<			
ANR	3149848	Identifier	hi		3149705	0					
ANR	3149849	PrimaryExpression	2		3149705	1					
ANR	3149850	Identifier	UTF8_cval2		3149705	1					
ANR	3149851	ExpressionStatement	* ( * toP ) ++ = ( ( lo & 0x3f ) | 0x80 )	696:6:18879:18911	3149705	11	True				
ANR	3149852	AssignmentExpression	* ( * toP ) ++ = ( ( lo & 0x3f ) | 0x80 )		3149705	0		=			
ANR	3149853	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3149854	UnaryOperator	*		3149705	0					
ANR	3149855	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3149856	UnaryOperationExpression	* toP		3149705	0					
ANR	3149857	UnaryOperator	*		3149705	0					
ANR	3149858	Identifier	toP		3149705	1					
ANR	3149859	IncDec	++		3149705	1					
ANR	3149860	InclusiveOrExpression	( lo & 0x3f ) | 0x80		3149705	1		|			
ANR	3149861	BitAndExpression	lo & 0x3f		3149705	0		&			
ANR	3149862	Identifier	lo		3149705	0					
ANR	3149863	PrimaryExpression	0x3f		3149705	1					
ANR	3149864	PrimaryExpression	0x80		3149705	1					
ANR	3149865	BreakStatement	break ;	697:6:18921:18926	3149705	12	True				
ANR	3149866	Label	default :	698:4:18934:18941	3149705	13	True				
ANR	3149867	Identifier	default		3149705	0					
ANR	3149868	IfStatement	if ( toLim - * toP < 3 )		3149705	14					
ANR	3149869	Condition	toLim - * toP < 3	699:10:18955:18971	3149705	0	True				
ANR	3149870	RelationalExpression	toLim - * toP < 3		3149705	0		<			
ANR	3149871	AdditiveExpression	toLim - * toP		3149705	0		-			
ANR	3149872	Identifier	toLim		3149705	0					
ANR	3149873	UnaryOperationExpression	* toP		3149705	1					
ANR	3149874	UnaryOperator	*		3149705	0					
ANR	3149875	Identifier	toP		3149705	1					
ANR	3149876	PrimaryExpression	3		3149705	1					
ANR	3149877	CompoundStatement		30:30:885:885	3149705	1					
ANR	3149878	ExpressionStatement	* fromP = from	700:8:18987:19000	3149705	0	True				
ANR	3149879	AssignmentExpression	* fromP = from		3149705	0		=			
ANR	3149880	UnaryOperationExpression	* fromP		3149705	0					
ANR	3149881	UnaryOperator	*		3149705	0					
ANR	3149882	Identifier	fromP		3149705	1					
ANR	3149883	Identifier	from		3149705	1					
ANR	3149884	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	701:8:19012:19047	3149705	1	True				
ANR	3149885	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3149705	0					
ANR	3149886	ExpressionStatement	* ( * toP ) ++ = ( ( hi >> 4 ) | UTF8_cval3 )	704:6:19121:19157	3149705	15	True				
ANR	3149887	AssignmentExpression	* ( * toP ) ++ = ( ( hi >> 4 ) | UTF8_cval3 )		3149705	0		=			
ANR	3149888	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3149889	UnaryOperator	*		3149705	0					
ANR	3149890	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3149891	UnaryOperationExpression	* toP		3149705	0					
ANR	3149892	UnaryOperator	*		3149705	0					
ANR	3149893	Identifier	toP		3149705	1					
ANR	3149894	IncDec	++		3149705	1					
ANR	3149895	InclusiveOrExpression	( hi >> 4 ) | UTF8_cval3		3149705	1		|			
ANR	3149896	ShiftExpression	hi >> 4		3149705	0		>>			
ANR	3149897	Identifier	hi		3149705	0					
ANR	3149898	PrimaryExpression	4		3149705	1					
ANR	3149899	Identifier	UTF8_cval3		3149705	1					
ANR	3149900	ExpressionStatement	* ( * toP ) ++ = ( ( ( hi & 0xf ) << 2 ) | ( lo >> 6 ) | 0x80 )	705:6:19167:19217	3149705	16	True				
ANR	3149901	AssignmentExpression	* ( * toP ) ++ = ( ( ( hi & 0xf ) << 2 ) | ( lo >> 6 ) | 0x80 )		3149705	0		=			
ANR	3149902	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3149903	UnaryOperator	*		3149705	0					
ANR	3149904	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3149905	UnaryOperationExpression	* toP		3149705	0					
ANR	3149906	UnaryOperator	*		3149705	0					
ANR	3149907	Identifier	toP		3149705	1					
ANR	3149908	IncDec	++		3149705	1					
ANR	3149909	InclusiveOrExpression	( ( hi & 0xf ) << 2 ) | ( lo >> 6 ) | 0x80		3149705	1		|			
ANR	3149910	ShiftExpression	( hi & 0xf ) << 2		3149705	0		<<			
ANR	3149911	BitAndExpression	hi & 0xf		3149705	0		&			
ANR	3149912	Identifier	hi		3149705	0					
ANR	3149913	PrimaryExpression	0xf		3149705	1					
ANR	3149914	PrimaryExpression	2		3149705	1					
ANR	3149915	InclusiveOrExpression	( lo >> 6 ) | 0x80		3149705	1		|			
ANR	3149916	ShiftExpression	lo >> 6		3149705	0		>>			
ANR	3149917	Identifier	lo		3149705	0					
ANR	3149918	PrimaryExpression	6		3149705	1					
ANR	3149919	PrimaryExpression	0x80		3149705	1					
ANR	3149920	ExpressionStatement	* ( * toP ) ++ = ( ( lo & 0x3f ) | 0x80 )	706:6:19227:19259	3149705	17	True				
ANR	3149921	AssignmentExpression	* ( * toP ) ++ = ( ( lo & 0x3f ) | 0x80 )		3149705	0		=			
ANR	3149922	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3149923	UnaryOperator	*		3149705	0					
ANR	3149924	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3149925	UnaryOperationExpression	* toP		3149705	0					
ANR	3149926	UnaryOperator	*		3149705	0					
ANR	3149927	Identifier	toP		3149705	1					
ANR	3149928	IncDec	++		3149705	1					
ANR	3149929	InclusiveOrExpression	( lo & 0x3f ) | 0x80		3149705	1		|			
ANR	3149930	BitAndExpression	lo & 0x3f		3149705	0		&			
ANR	3149931	Identifier	lo		3149705	0					
ANR	3149932	PrimaryExpression	0x3f		3149705	1					
ANR	3149933	PrimaryExpression	0x80		3149705	1					
ANR	3149934	BreakStatement	break ;	707:6:19269:19274	3149705	18	True				
ANR	3149935	Label	case 0xD8 :	708:4:19282:19291	3149705	19	True				
ANR	3149936	Label	case 0xD9 :	708:15:19293:19302	3149705	20	True				
ANR	3149937	Label	case 0xDA :	708:26:19304:19313	3149705	21	True				
ANR	3149938	Label	case 0xDB :	708:37:19315:19324	3149705	22	True				
ANR	3149939	IfStatement	if ( toLim - * toP < 4 )		3149705	23					
ANR	3149940	Condition	toLim - * toP < 4	709:10:19338:19354	3149705	0	True				
ANR	3149941	RelationalExpression	toLim - * toP < 4		3149705	0		<			
ANR	3149942	AdditiveExpression	toLim - * toP		3149705	0		-			
ANR	3149943	Identifier	toLim		3149705	0					
ANR	3149944	UnaryOperationExpression	* toP		3149705	1					
ANR	3149945	UnaryOperator	*		3149705	0					
ANR	3149946	Identifier	toP		3149705	1					
ANR	3149947	PrimaryExpression	4		3149705	1					
ANR	3149948	CompoundStatement		40:29:1267:1267	3149705	1					
ANR	3149949	ExpressionStatement	* fromP = from	710:8:19369:19382	3149705	0	True				
ANR	3149950	AssignmentExpression	* fromP = from		3149705	0		=			
ANR	3149951	UnaryOperationExpression	* fromP		3149705	0					
ANR	3149952	UnaryOperator	*		3149705	0					
ANR	3149953	Identifier	fromP		3149705	1					
ANR	3149954	Identifier	from		3149705	1					
ANR	3149955	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	711:8:19394:19429	3149705	1	True				
ANR	3149956	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3149705	0					
ANR	3149957	IfStatement	if ( fromLim - from < 4 )		3149705	24					
ANR	3149958	Condition	fromLim - from < 4	713:10:19453:19470	3149705	0	True				
ANR	3149959	RelationalExpression	fromLim - from < 4		3149705	0		<			
ANR	3149960	AdditiveExpression	fromLim - from		3149705	0		-			
ANR	3149961	Identifier	fromLim		3149705	0					
ANR	3149962	Identifier	from		3149705	1					
ANR	3149963	PrimaryExpression	4		3149705	1					
ANR	3149964	CompoundStatement		44:30:1383:1383	3149705	1					
ANR	3149965	ExpressionStatement	* fromP = from	714:8:19485:19498	3149705	0	True				
ANR	3149966	AssignmentExpression	* fromP = from		3149705	0		=			
ANR	3149967	UnaryOperationExpression	* fromP		3149705	0					
ANR	3149968	UnaryOperator	*		3149705	0					
ANR	3149969	Identifier	fromP		3149705	1					
ANR	3149970	Identifier	from		3149705	1					
ANR	3149971	ReturnStatement	return XML_CONVERT_INPUT_INCOMPLETE ;	715:8:19510:19545	3149705	1	True				
ANR	3149972	Identifier	XML_CONVERT_INPUT_INCOMPLETE		3149705	0					
ANR	3149973	ExpressionStatement	plane = ( ( ( hi & 0x3 ) << 2 ) | ( ( lo >> 6 ) & 0x3 ) ) + 1	717:6:19565:19616	3149705	25	True				
ANR	3149974	AssignmentExpression	plane = ( ( ( hi & 0x3 ) << 2 ) | ( ( lo >> 6 ) & 0x3 ) ) + 1		3149705	0		=			
ANR	3149975	Identifier	plane		3149705	0					
ANR	3149976	AdditiveExpression	( ( ( hi & 0x3 ) << 2 ) | ( ( lo >> 6 ) & 0x3 ) ) + 1		3149705	1		+			
ANR	3149977	InclusiveOrExpression	( ( hi & 0x3 ) << 2 ) | ( ( lo >> 6 ) & 0x3 )		3149705	0		|			
ANR	3149978	ShiftExpression	( hi & 0x3 ) << 2		3149705	0		<<			
ANR	3149979	BitAndExpression	hi & 0x3		3149705	0		&			
ANR	3149980	Identifier	hi		3149705	0					
ANR	3149981	PrimaryExpression	0x3		3149705	1					
ANR	3149982	PrimaryExpression	2		3149705	1					
ANR	3149983	BitAndExpression	( lo >> 6 ) & 0x3		3149705	1		&			
ANR	3149984	ShiftExpression	lo >> 6		3149705	0		>>			
ANR	3149985	Identifier	lo		3149705	0					
ANR	3149986	PrimaryExpression	6		3149705	1					
ANR	3149987	PrimaryExpression	0x3		3149705	1					
ANR	3149988	PrimaryExpression	1		3149705	1					
ANR	3149989	ExpressionStatement	* ( * toP ) ++ = ( ( plane >> 2 ) | UTF8_cval4 )	718:6:19626:19665	3149705	26	True				
ANR	3149990	AssignmentExpression	* ( * toP ) ++ = ( ( plane >> 2 ) | UTF8_cval4 )		3149705	0		=			
ANR	3149991	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3149992	UnaryOperator	*		3149705	0					
ANR	3149993	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3149994	UnaryOperationExpression	* toP		3149705	0					
ANR	3149995	UnaryOperator	*		3149705	0					
ANR	3149996	Identifier	toP		3149705	1					
ANR	3149997	IncDec	++		3149705	1					
ANR	3149998	InclusiveOrExpression	( plane >> 2 ) | UTF8_cval4		3149705	1		|			
ANR	3149999	ShiftExpression	plane >> 2		3149705	0		>>			
ANR	3150000	Identifier	plane		3149705	0					
ANR	3150001	PrimaryExpression	2		3149705	1					
ANR	3150002	Identifier	UTF8_cval4		3149705	1					
ANR	3150003	ExpressionStatement	* ( * toP ) ++ = ( ( ( lo >> 2 ) & 0xF ) | ( ( plane & 0x3 ) << 4 ) | 0x80 )	719:6:19675:19736	3149705	27	True				
ANR	3150004	AssignmentExpression	* ( * toP ) ++ = ( ( ( lo >> 2 ) & 0xF ) | ( ( plane & 0x3 ) << 4 ) | 0x80 )		3149705	0		=			
ANR	3150005	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3150006	UnaryOperator	*		3149705	0					
ANR	3150007	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3150008	UnaryOperationExpression	* toP		3149705	0					
ANR	3150009	UnaryOperator	*		3149705	0					
ANR	3150010	Identifier	toP		3149705	1					
ANR	3150011	IncDec	++		3149705	1					
ANR	3150012	InclusiveOrExpression	( ( lo >> 2 ) & 0xF ) | ( ( plane & 0x3 ) << 4 ) | 0x80		3149705	1		|			
ANR	3150013	BitAndExpression	( lo >> 2 ) & 0xF		3149705	0		&			
ANR	3150014	ShiftExpression	lo >> 2		3149705	0		>>			
ANR	3150015	Identifier	lo		3149705	0					
ANR	3150016	PrimaryExpression	2		3149705	1					
ANR	3150017	PrimaryExpression	0xF		3149705	1					
ANR	3150018	InclusiveOrExpression	( ( plane & 0x3 ) << 4 ) | 0x80		3149705	1		|			
ANR	3150019	ShiftExpression	( plane & 0x3 ) << 4		3149705	0		<<			
ANR	3150020	BitAndExpression	plane & 0x3		3149705	0		&			
ANR	3150021	Identifier	plane		3149705	0					
ANR	3150022	PrimaryExpression	0x3		3149705	1					
ANR	3150023	PrimaryExpression	4		3149705	1					
ANR	3150024	PrimaryExpression	0x80		3149705	1					
ANR	3150025	ExpressionStatement	from += 2	720:6:19746:19755	3149705	28	True				
ANR	3150026	AssignmentExpression	from += 2		3149705	0		+=			
ANR	3150027	Identifier	from		3149705	0					
ANR	3150028	PrimaryExpression	2		3149705	1					
ANR	3150029	ExpressionStatement	lo2 = GET_LO ( from )	721:6:19765:19783	3149705	29	True				
ANR	3150030	AssignmentExpression	lo2 = GET_LO ( from )		3149705	0		=			
ANR	3150031	Identifier	lo2		3149705	0					
ANR	3150032	CallExpression	GET_LO ( from )		3149705	1					
ANR	3150033	Callee	GET_LO		3149705	0					
ANR	3150034	Identifier	GET_LO		3149705	0					
ANR	3150035	ArgumentList	from		3149705	1					
ANR	3150036	Argument	from		3149705	0					
ANR	3150037	Identifier	from		3149705	0					
ANR	3150038	ExpressionStatement	* ( * toP ) ++ = ( ( ( lo & 0x3 ) << 4 ) | ( ( GET_HI ( from ) & 0x3 ) << 2 ) | ( lo2 >> 6 ) | 0x80 )	722:6:19793:19937	3149705	30	True				
ANR	3150039	AssignmentExpression	* ( * toP ) ++ = ( ( ( lo & 0x3 ) << 4 ) | ( ( GET_HI ( from ) & 0x3 ) << 2 ) | ( lo2 >> 6 ) | 0x80 )		3149705	0		=			
ANR	3150040	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3150041	UnaryOperator	*		3149705	0					
ANR	3150042	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3150043	UnaryOperationExpression	* toP		3149705	0					
ANR	3150044	UnaryOperator	*		3149705	0					
ANR	3150045	Identifier	toP		3149705	1					
ANR	3150046	IncDec	++		3149705	1					
ANR	3150047	InclusiveOrExpression	( ( lo & 0x3 ) << 4 ) | ( ( GET_HI ( from ) & 0x3 ) << 2 ) | ( lo2 >> 6 ) | 0x80		3149705	1		|			
ANR	3150048	ShiftExpression	( lo & 0x3 ) << 4		3149705	0		<<			
ANR	3150049	BitAndExpression	lo & 0x3		3149705	0		&			
ANR	3150050	Identifier	lo		3149705	0					
ANR	3150051	PrimaryExpression	0x3		3149705	1					
ANR	3150052	PrimaryExpression	4		3149705	1					
ANR	3150053	InclusiveOrExpression	( ( GET_HI ( from ) & 0x3 ) << 2 ) | ( lo2 >> 6 ) | 0x80		3149705	1		|			
ANR	3150054	ShiftExpression	( GET_HI ( from ) & 0x3 ) << 2		3149705	0		<<			
ANR	3150055	BitAndExpression	GET_HI ( from ) & 0x3		3149705	0		&			
ANR	3150056	CallExpression	GET_HI ( from )		3149705	0					
ANR	3150057	Callee	GET_HI		3149705	0					
ANR	3150058	Identifier	GET_HI		3149705	0					
ANR	3150059	ArgumentList	from		3149705	1					
ANR	3150060	Argument	from		3149705	0					
ANR	3150061	Identifier	from		3149705	0					
ANR	3150062	PrimaryExpression	0x3		3149705	1					
ANR	3150063	PrimaryExpression	2		3149705	1					
ANR	3150064	InclusiveOrExpression	( lo2 >> 6 ) | 0x80		3149705	1		|			
ANR	3150065	ShiftExpression	lo2 >> 6		3149705	0		>>			
ANR	3150066	Identifier	lo2		3149705	0					
ANR	3150067	PrimaryExpression	6		3149705	1					
ANR	3150068	PrimaryExpression	0x80		3149705	1					
ANR	3150069	ExpressionStatement	* ( * toP ) ++ = ( ( lo2 & 0x3f ) | 0x80 )	726:6:19947:19980	3149705	31	True				
ANR	3150070	AssignmentExpression	* ( * toP ) ++ = ( ( lo2 & 0x3f ) | 0x80 )		3149705	0		=			
ANR	3150071	UnaryOperationExpression	* ( * toP ) ++		3149705	0					
ANR	3150072	UnaryOperator	*		3149705	0					
ANR	3150073	PostIncDecOperationExpression	( * toP ) ++		3149705	1					
ANR	3150074	UnaryOperationExpression	* toP		3149705	0					
ANR	3150075	UnaryOperator	*		3149705	0					
ANR	3150076	Identifier	toP		3149705	1					
ANR	3150077	IncDec	++		3149705	1					
ANR	3150078	InclusiveOrExpression	( lo2 & 0x3f ) | 0x80		3149705	1		|			
ANR	3150079	BitAndExpression	lo2 & 0x3f		3149705	0		&			
ANR	3150080	Identifier	lo2		3149705	0					
ANR	3150081	PrimaryExpression	0x3f		3149705	1					
ANR	3150082	PrimaryExpression	0x80		3149705	1					
ANR	3150083	BreakStatement	break ;	727:6:19990:19995	3149705	32	True				
ANR	3150084	ExpressionStatement	* fromP = from	730:2:20015:20028	3149705	3	True				
ANR	3150085	AssignmentExpression	* fromP = from		3149705	0		=			
ANR	3150086	UnaryOperationExpression	* fromP		3149705	0					
ANR	3150087	UnaryOperator	*		3149705	0					
ANR	3150088	Identifier	fromP		3149705	1					
ANR	3150089	Identifier	from		3149705	1					
ANR	3150090	IfStatement	if ( from < fromLim )		3149705	4					
ANR	3150091	Condition	from < fromLim	731:6:20038:20051	3149705	0	True				
ANR	3150092	RelationalExpression	from < fromLim		3149705	0		<			
ANR	3150093	Identifier	from		3149705	0					
ANR	3150094	Identifier	fromLim		3149705	1					
ANR	3150095	ReturnStatement	return XML_CONVERT_INPUT_INCOMPLETE ;	732:4:20060:20095	3149705	1	True				
ANR	3150096	Identifier	XML_CONVERT_INPUT_INCOMPLETE		3149705	0					
ANR	3150097	ElseStatement	else		3149705	0					
ANR	3150098	ReturnStatement	return XML_CONVERT_COMPLETED ;	734:4:20112:20140	3149705	0	True				
ANR	3150099	Identifier	XML_CONVERT_COMPLETED		3149705	0					
ANR	3150100	ReturnType	static enum XML_Convert_Result PTRCALL E		3149705	1					
ANR	3150101	Identifier	toUtf8		3149705	2					
ANR	3150102	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		3149705	3					
ANR	3150103	Parameter	const ENCODING * UNUSED_P ( enc )	667:12:17956:17984	3149705	0	True				
ANR	3150104	ParameterType	const ENCODING * ( enc )		3149705	0					
ANR	3150105	Identifier	UNUSED_P		3149705	1					
ANR	3150106	Parameter	const char * * fromP	668:12:18001:18018	3149705	1	True				
ANR	3150107	ParameterType	const char * *		3149705	0					
ANR	3150108	Identifier	fromP		3149705	1					
ANR	3150109	Parameter	const char * fromLim	668:32:18021:18039	3149705	2	True				
ANR	3150110	ParameterType	const char *		3149705	0					
ANR	3150111	Identifier	fromLim		3149705	1					
ANR	3150112	Parameter	char * * toP	669:12:18056:18065	3149705	3	True				
ANR	3150113	ParameterType	char * *		3149705	0					
ANR	3150114	Identifier	toP		3149705	1					
ANR	3150115	Parameter	const char * toLim	669:24:18068:18084	3149705	4	True				
ANR	3150116	ParameterType	const char *		3149705	0					
ANR	3150117	Identifier	toLim		3149705	1					
ANR	3150118	CFGEntryNode	ENTRY		3149705		True				
ANR	3150119	CFGExitNode	EXIT		3149705		True				
ANR	3150120	Symbol	UNUSED_P		3149705						
ANR	3150121	Symbol	plane		3149705						
ANR	3150122	Symbol	hi		3149705						
ANR	3150123	Symbol	toLim		3149705						
ANR	3150124	Symbol	* fromP		3149705						
ANR	3150125	Symbol	lo		3149705						
ANR	3150126	Symbol	UTF8_cval4		3149705						
ANR	3150127	Symbol	XML_CONVERT_INPUT_INCOMPLETE		3149705						
ANR	3150128	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		3149705						
ANR	3150129	Symbol	* ( * toP ) ++		3149705						
ANR	3150130	Symbol	UTF8_cval2		3149705						
ANR	3150131	Symbol	UTF8_cval3		3149705						
ANR	3150132	Symbol	lo2		3149705						
ANR	3150133	Symbol	GET_LO		3149705						
ANR	3150134	Symbol	fromP		3149705						
ANR	3150135	Symbol	fromLim		3149705						
ANR	3150136	Symbol	toP		3149705						
ANR	3150137	Symbol	GET_HI		3149705						
ANR	3150138	Symbol	from		3149705						
ANR	3150139	Symbol	XML_CONVERT_COMPLETED		3149705						
ANR	3150140	Symbol	* toP		3149705						
ANR	3150141	Function	toUtf16	738:0:20182:20986							
ANR	3150142	FunctionDef	"toUtf16 (const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim)"		3150141	0					
ANR	3150143	CompoundStatement		742:0:20392:20986	3150141	0					
ANR	3150144	IdentifierDeclStatement	enum XML_Convert_Result res = XML_CONVERT_COMPLETED ;	743:2:20398:20449	3150141	0	True				
ANR	3150145	IdentifierDecl	res = XML_CONVERT_COMPLETED		3150141	0					
ANR	3150146	IdentifierDeclType	enum XML_Convert_Result		3150141	0					
ANR	3150147	Identifier	res		3150141	1					
ANR	3150148	AssignmentExpression	res = XML_CONVERT_COMPLETED		3150141	2		=			
ANR	3150149	Identifier	XML_CONVERT_COMPLETED		3150141	0					
ANR	3150150	Identifier	XML_CONVERT_COMPLETED		3150141	1					
ANR	3150151	ExpressionStatement	fromLim = * fromP + ( ( ( fromLim - * fromP ) >> 1 ) << 1 )	744:2:20455:20506	3150141	1	True				
ANR	3150152	AssignmentExpression	fromLim = * fromP + ( ( ( fromLim - * fromP ) >> 1 ) << 1 )		3150141	0		=			
ANR	3150153	Identifier	fromLim		3150141	0					
ANR	3150154	AdditiveExpression	* fromP + ( ( ( fromLim - * fromP ) >> 1 ) << 1 )		3150141	1		+			
ANR	3150155	UnaryOperationExpression	* fromP		3150141	0					
ANR	3150156	UnaryOperator	*		3150141	0					
ANR	3150157	Identifier	fromP		3150141	1					
ANR	3150158	ShiftExpression	( ( fromLim - * fromP ) >> 1 ) << 1		3150141	1		<<			
ANR	3150159	ShiftExpression	( fromLim - * fromP ) >> 1		3150141	0		>>			
ANR	3150160	AdditiveExpression	fromLim - * fromP		3150141	0		-			
ANR	3150161	Identifier	fromLim		3150141	0					
ANR	3150162	UnaryOperationExpression	* fromP		3150141	1					
ANR	3150163	UnaryOperator	*		3150141	0					
ANR	3150164	Identifier	fromP		3150141	1					
ANR	3150165	PrimaryExpression	1		3150141	1					
ANR	3150166	PrimaryExpression	1		3150141	1					
ANR	3150167	IfStatement	if ( fromLim - * fromP > ( ( toLim - * toP ) << 1 ) && ( GET_HI ( fromLim - 2 ) & 0xF8 ) == 0xD8 )		3150141	2					
ANR	3150168	Condition	fromLim - * fromP > ( ( toLim - * toP ) << 1 ) && ( GET_HI ( fromLim - 2 ) & 0xF8 ) == 0xD8	746:6:20591:20678	3150141	0	True				
ANR	3150169	AndExpression	fromLim - * fromP > ( ( toLim - * toP ) << 1 ) && ( GET_HI ( fromLim - 2 ) & 0xF8 ) == 0xD8		3150141	0		&&			
ANR	3150170	RelationalExpression	fromLim - * fromP > ( ( toLim - * toP ) << 1 )		3150141	0		>			
ANR	3150171	AdditiveExpression	fromLim - * fromP		3150141	0		-			
ANR	3150172	Identifier	fromLim		3150141	0					
ANR	3150173	UnaryOperationExpression	* fromP		3150141	1					
ANR	3150174	UnaryOperator	*		3150141	0					
ANR	3150175	Identifier	fromP		3150141	1					
ANR	3150176	ShiftExpression	( toLim - * toP ) << 1		3150141	1		<<			
ANR	3150177	AdditiveExpression	toLim - * toP		3150141	0		-			
ANR	3150178	Identifier	toLim		3150141	0					
ANR	3150179	UnaryOperationExpression	* toP		3150141	1					
ANR	3150180	UnaryOperator	*		3150141	0					
ANR	3150181	Identifier	toP		3150141	1					
ANR	3150182	PrimaryExpression	1		3150141	1					
ANR	3150183	EqualityExpression	( GET_HI ( fromLim - 2 ) & 0xF8 ) == 0xD8		3150141	1		==			
ANR	3150184	BitAndExpression	GET_HI ( fromLim - 2 ) & 0xF8		3150141	0		&			
ANR	3150185	CallExpression	GET_HI ( fromLim - 2 )		3150141	0					
ANR	3150186	Callee	GET_HI		3150141	0					
ANR	3150187	Identifier	GET_HI		3150141	0					
ANR	3150188	ArgumentList	fromLim - 2		3150141	1					
ANR	3150189	Argument	fromLim - 2		3150141	0					
ANR	3150190	AdditiveExpression	fromLim - 2		3150141	0		-			
ANR	3150191	Identifier	fromLim		3150141	0					
ANR	3150192	PrimaryExpression	2		3150141	1					
ANR	3150193	PrimaryExpression	0xF8		3150141	1					
ANR	3150194	PrimaryExpression	0xD8		3150141	1					
ANR	3150195	CompoundStatement		6:47:288:288	3150141	1					
ANR	3150196	ExpressionStatement	fromLim -= 2	748:4:20689:20701	3150141	0	True				
ANR	3150197	AssignmentExpression	fromLim -= 2		3150141	0		-=			
ANR	3150198	Identifier	fromLim		3150141	0					
ANR	3150199	PrimaryExpression	2		3150141	1					
ANR	3150200	ExpressionStatement	res = XML_CONVERT_INPUT_INCOMPLETE	749:4:20709:20743	3150141	1	True				
ANR	3150201	AssignmentExpression	res = XML_CONVERT_INPUT_INCOMPLETE		3150141	0		=			
ANR	3150202	Identifier	res		3150141	0					
ANR	3150203	Identifier	XML_CONVERT_INPUT_INCOMPLETE		3150141	1					
ANR	3150204	ForStatement	for ( ; * fromP < fromLim && * toP < toLim ; * fromP += 2 )		3150141	3					
ANR	3150205	Condition	* fromP < fromLim && * toP < toLim	751:9:20762:20793	3150141	0	True				
ANR	3150206	AndExpression	* fromP < fromLim && * toP < toLim		3150141	0		&&			
ANR	3150207	RelationalExpression	* fromP < fromLim		3150141	0		<			
ANR	3150208	UnaryOperationExpression	* fromP		3150141	0					
ANR	3150209	UnaryOperator	*		3150141	0					
ANR	3150210	Identifier	fromP		3150141	1					
ANR	3150211	Identifier	fromLim		3150141	1					
ANR	3150212	RelationalExpression	* toP < toLim		3150141	1		<			
ANR	3150213	UnaryOperationExpression	* toP		3150141	0					
ANR	3150214	UnaryOperator	*		3150141	0					
ANR	3150215	Identifier	toP		3150141	1					
ANR	3150216	Identifier	toLim		3150141	1					
ANR	3150217	AssignmentExpression	* fromP += 2	751:43:20796:20806	3150141	1	True	+=			
ANR	3150218	UnaryOperationExpression	* fromP		3150141	0					
ANR	3150219	UnaryOperator	*		3150141	0					
ANR	3150220	Identifier	fromP		3150141	1					
ANR	3150221	PrimaryExpression	2		3150141	1					
ANR	3150222	ExpressionStatement	* ( * toP ) ++ = ( GET_HI ( * fromP ) << 8 ) | GET_LO ( * fromP )	752:4:20815:20865	3150141	2	True				
ANR	3150223	AssignmentExpression	* ( * toP ) ++ = ( GET_HI ( * fromP ) << 8 ) | GET_LO ( * fromP )		3150141	0		=			
ANR	3150224	UnaryOperationExpression	* ( * toP ) ++		3150141	0					
ANR	3150225	UnaryOperator	*		3150141	0					
ANR	3150226	PostIncDecOperationExpression	( * toP ) ++		3150141	1					
ANR	3150227	UnaryOperationExpression	* toP		3150141	0					
ANR	3150228	UnaryOperator	*		3150141	0					
ANR	3150229	Identifier	toP		3150141	1					
ANR	3150230	IncDec	++		3150141	1					
ANR	3150231	InclusiveOrExpression	( GET_HI ( * fromP ) << 8 ) | GET_LO ( * fromP )		3150141	1		|			
ANR	3150232	ShiftExpression	GET_HI ( * fromP ) << 8		3150141	0		<<			
ANR	3150233	CallExpression	GET_HI ( * fromP )		3150141	0					
ANR	3150234	Callee	GET_HI		3150141	0					
ANR	3150235	Identifier	GET_HI		3150141	0					
ANR	3150236	ArgumentList	* fromP		3150141	1					
ANR	3150237	Argument	* fromP		3150141	0					
ANR	3150238	UnaryOperationExpression	* fromP		3150141	0					
ANR	3150239	UnaryOperator	*		3150141	0					
ANR	3150240	Identifier	fromP		3150141	1					
ANR	3150241	PrimaryExpression	8		3150141	1					
ANR	3150242	CallExpression	GET_LO ( * fromP )		3150141	1					
ANR	3150243	Callee	GET_LO		3150141	0					
ANR	3150244	Identifier	GET_LO		3150141	0					
ANR	3150245	ArgumentList	* fromP		3150141	1					
ANR	3150246	Argument	* fromP		3150141	0					
ANR	3150247	UnaryOperationExpression	* fromP		3150141	0					
ANR	3150248	UnaryOperator	*		3150141	0					
ANR	3150249	Identifier	fromP		3150141	1					
ANR	3150250	IfStatement	if ( ( * toP == toLim ) && ( * fromP < fromLim ) )		3150141	4					
ANR	3150251	Condition	( * toP == toLim ) && ( * fromP < fromLim )	753:6:20875:20911	3150141	0	True				
ANR	3150252	AndExpression	( * toP == toLim ) && ( * fromP < fromLim )		3150141	0		&&			
ANR	3150253	EqualityExpression	* toP == toLim		3150141	0		==			
ANR	3150254	UnaryOperationExpression	* toP		3150141	0					
ANR	3150255	UnaryOperator	*		3150141	0					
ANR	3150256	Identifier	toP		3150141	1					
ANR	3150257	Identifier	toLim		3150141	1					
ANR	3150258	RelationalExpression	* fromP < fromLim		3150141	1		<			
ANR	3150259	UnaryOperationExpression	* fromP		3150141	0					
ANR	3150260	UnaryOperator	*		3150141	0					
ANR	3150261	Identifier	fromP		3150141	1					
ANR	3150262	Identifier	fromLim		3150141	1					
ANR	3150263	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	754:4:20920:20955	3150141	1	True				
ANR	3150264	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3150141	0					
ANR	3150265	ElseStatement	else		3150141	0					
ANR	3150266	ReturnStatement	return res ;	756:4:20972:20982	3150141	0	True				
ANR	3150267	Identifier	res		3150141	0					
ANR	3150268	ReturnType	static enum XML_Convert_Result PTRCALL E		3150141	1					
ANR	3150269	Identifier	toUtf16		3150141	2					
ANR	3150270	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim"		3150141	3					
ANR	3150271	Parameter	const ENCODING * UNUSED_P ( enc )	739:13:20237:20265	3150141	0	True				
ANR	3150272	ParameterType	const ENCODING * ( enc )		3150141	0					
ANR	3150273	Identifier	UNUSED_P		3150141	1					
ANR	3150274	Parameter	const char * * fromP	740:13:20283:20300	3150141	1	True				
ANR	3150275	ParameterType	const char * *		3150141	0					
ANR	3150276	Identifier	fromP		3150141	1					
ANR	3150277	Parameter	const char * fromLim	740:33:20303:20321	3150141	2	True				
ANR	3150278	ParameterType	const char *		3150141	0					
ANR	3150279	Identifier	fromLim		3150141	1					
ANR	3150280	Parameter	unsigned short * * toP	741:13:20339:20358	3150141	3	True				
ANR	3150281	ParameterType	unsigned short * *		3150141	0					
ANR	3150282	Identifier	toP		3150141	1					
ANR	3150283	Parameter	const unsigned short * toLim	741:35:20361:20387	3150141	4	True				
ANR	3150284	ParameterType	const unsigned short *		3150141	0					
ANR	3150285	Identifier	toLim		3150141	1					
ANR	3150286	CFGEntryNode	ENTRY		3150141		True				
ANR	3150287	CFGExitNode	EXIT		3150141		True				
ANR	3150288	Symbol	UNUSED_P		3150141						
ANR	3150289	Symbol	res		3150141						
ANR	3150290	Symbol	toLim		3150141						
ANR	3150291	Symbol	* fromP		3150141						
ANR	3150292	Symbol	XML_CONVERT_INPUT_INCOMPLETE		3150141						
ANR	3150293	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		3150141						
ANR	3150294	Symbol	* ( * toP ) ++		3150141						
ANR	3150295	Symbol	GET_LO		3150141						
ANR	3150296	Symbol	fromP		3150141						
ANR	3150297	Symbol	fromLim		3150141						
ANR	3150298	Symbol	toP		3150141						
ANR	3150299	Symbol	GET_HI		3150141						
ANR	3150300	Symbol	XML_CONVERT_COMPLETED		3150141						
ANR	3150301	Symbol	* toP		3150141						
ANR	3150302	Function	little2_byteType	796:0:22094:22208							
ANR	3150303	FunctionDef	"little2_byteType (const ENCODING * enc , const char * p)"		3150302	0					
ANR	3150304	CompoundStatement		798:0:22170:22208	3150302	0					
ANR	3150305	ReturnStatement	"return LITTLE2_BYTE_TYPE ( enc , p ) ;"	799:2:22174:22206	3150302	0	True				
ANR	3150306	CallExpression	"LITTLE2_BYTE_TYPE ( enc , p )"		3150302	0					
ANR	3150307	Callee	LITTLE2_BYTE_TYPE		3150302	0					
ANR	3150308	Identifier	LITTLE2_BYTE_TYPE		3150302	0					
ANR	3150309	ArgumentList	enc		3150302	1					
ANR	3150310	Argument	enc		3150302	0					
ANR	3150311	Identifier	enc		3150302	0					
ANR	3150312	Argument	p		3150302	1					
ANR	3150313	Identifier	p		3150302	0					
ANR	3150314	ReturnType	static int PTRFASTCALL		3150302	1					
ANR	3150315	Identifier	little2_byteType		3150302	2					
ANR	3150316	ParameterList	"const ENCODING * enc , const char * p"		3150302	3					
ANR	3150317	Parameter	const ENCODING * enc	797:17:22134:22152	3150302	0	True				
ANR	3150318	ParameterType	const ENCODING *		3150302	0					
ANR	3150319	Identifier	enc		3150302	1					
ANR	3150320	Parameter	const char * p	797:38:22155:22167	3150302	1	True				
ANR	3150321	ParameterType	const char *		3150302	0					
ANR	3150322	Identifier	p		3150302	1					
ANR	3150323	CFGEntryNode	ENTRY		3150302		True				
ANR	3150324	CFGExitNode	EXIT		3150302		True				
ANR	3150325	Symbol	p		3150302						
ANR	3150326	Symbol	LITTLE2_BYTE_TYPE		3150302						
ANR	3150327	Symbol	enc		3150302						
ANR	3150328	Function	little2_byteToAscii	802:0:22211:22332							
ANR	3150329	FunctionDef	"little2_byteToAscii (const ENCODING * enc , const char * p)"		3150328	0					
ANR	3150330	CompoundStatement		804:0:22290:22332	3150328	0					
ANR	3150331	ReturnStatement	"return LITTLE2_BYTE_TO_ASCII ( enc , p ) ;"	805:2:22294:22330	3150328	0	True				
ANR	3150332	CallExpression	"LITTLE2_BYTE_TO_ASCII ( enc , p )"		3150328	0					
ANR	3150333	Callee	LITTLE2_BYTE_TO_ASCII		3150328	0					
ANR	3150334	Identifier	LITTLE2_BYTE_TO_ASCII		3150328	0					
ANR	3150335	ArgumentList	enc		3150328	1					
ANR	3150336	Argument	enc		3150328	0					
ANR	3150337	Identifier	enc		3150328	0					
ANR	3150338	Argument	p		3150328	1					
ANR	3150339	Identifier	p		3150328	0					
ANR	3150340	ReturnType	static int PTRFASTCALL		3150328	1					
ANR	3150341	Identifier	little2_byteToAscii		3150328	2					
ANR	3150342	ParameterList	"const ENCODING * enc , const char * p"		3150328	3					
ANR	3150343	Parameter	const ENCODING * enc	803:20:22254:22272	3150328	0	True				
ANR	3150344	ParameterType	const ENCODING *		3150328	0					
ANR	3150345	Identifier	enc		3150328	1					
ANR	3150346	Parameter	const char * p	803:41:22275:22287	3150328	1	True				
ANR	3150347	ParameterType	const char *		3150328	0					
ANR	3150348	Identifier	p		3150328	1					
ANR	3150349	CFGEntryNode	ENTRY		3150328		True				
ANR	3150350	CFGExitNode	EXIT		3150328		True				
ANR	3150351	Symbol	p		3150328						
ANR	3150352	Symbol	LITTLE2_BYTE_TO_ASCII		3150328						
ANR	3150353	Symbol	enc		3150328						
ANR	3150354	Function	little2_charMatches	808:0:22335:22461							
ANR	3150355	FunctionDef	"little2_charMatches (const ENCODING * enc , const char * p , int c)"		3150354	0					
ANR	3150356	CompoundStatement		810:0:22417:22461	3150354	0					
ANR	3150357	ReturnStatement	"return LITTLE2_CHAR_MATCHES ( enc , p , c ) ;"	811:2:22421:22459	3150354	0	True				
ANR	3150358	CallExpression	"LITTLE2_CHAR_MATCHES ( enc , p , c )"		3150354	0					
ANR	3150359	Callee	LITTLE2_CHAR_MATCHES		3150354	0					
ANR	3150360	Identifier	LITTLE2_CHAR_MATCHES		3150354	0					
ANR	3150361	ArgumentList	enc		3150354	1					
ANR	3150362	Argument	enc		3150354	0					
ANR	3150363	Identifier	enc		3150354	0					
ANR	3150364	Argument	p		3150354	1					
ANR	3150365	Identifier	p		3150354	0					
ANR	3150366	Argument	c		3150354	2					
ANR	3150367	Identifier	c		3150354	0					
ANR	3150368	ReturnType	static int PTRCALL		3150354	1					
ANR	3150369	Identifier	little2_charMatches		3150354	2					
ANR	3150370	ParameterList	"const ENCODING * enc , const char * p , int c"		3150354	3					
ANR	3150371	Parameter	const ENCODING * enc	809:20:22374:22392	3150354	0	True				
ANR	3150372	ParameterType	const ENCODING *		3150354	0					
ANR	3150373	Identifier	enc		3150354	1					
ANR	3150374	Parameter	const char * p	809:41:22395:22407	3150354	1	True				
ANR	3150375	ParameterType	const char *		3150354	0					
ANR	3150376	Identifier	p		3150354	1					
ANR	3150377	Parameter	int c	809:56:22410:22414	3150354	2	True				
ANR	3150378	ParameterType	int		3150354	0					
ANR	3150379	Identifier	c		3150354	1					
ANR	3150380	CFGEntryNode	ENTRY		3150354		True				
ANR	3150381	CFGExitNode	EXIT		3150354		True				
ANR	3150382	Symbol	p		3150354						
ANR	3150383	Symbol	c		3150354						
ANR	3150384	Symbol	LITTLE2_CHAR_MATCHES		3150354						
ANR	3150385	Symbol	enc		3150354						
ANR	3150386	Function	little2_isNameMin	814:0:22464:22589							
ANR	3150387	FunctionDef	"little2_isNameMin (const ENCODING * enc , const char * p)"		3150386	0					
ANR	3150388	CompoundStatement		816:0:22541:22589	3150386	0					
ANR	3150389	ReturnStatement	"return LITTLE2_IS_NAME_CHAR_MINBPC ( enc , p ) ;"	817:2:22545:22587	3150386	0	True				
ANR	3150390	CallExpression	"LITTLE2_IS_NAME_CHAR_MINBPC ( enc , p )"		3150386	0					
ANR	3150391	Callee	LITTLE2_IS_NAME_CHAR_MINBPC		3150386	0					
ANR	3150392	Identifier	LITTLE2_IS_NAME_CHAR_MINBPC		3150386	0					
ANR	3150393	ArgumentList	enc		3150386	1					
ANR	3150394	Argument	enc		3150386	0					
ANR	3150395	Identifier	enc		3150386	0					
ANR	3150396	Argument	p		3150386	1					
ANR	3150397	Identifier	p		3150386	0					
ANR	3150398	ReturnType	static int PTRFASTCALL		3150386	1					
ANR	3150399	Identifier	little2_isNameMin		3150386	2					
ANR	3150400	ParameterList	"const ENCODING * enc , const char * p"		3150386	3					
ANR	3150401	Parameter	const ENCODING * enc	815:18:22505:22523	3150386	0	True				
ANR	3150402	ParameterType	const ENCODING *		3150386	0					
ANR	3150403	Identifier	enc		3150386	1					
ANR	3150404	Parameter	const char * p	815:39:22526:22538	3150386	1	True				
ANR	3150405	ParameterType	const char *		3150386	0					
ANR	3150406	Identifier	p		3150386	1					
ANR	3150407	CFGEntryNode	ENTRY		3150386		True				
ANR	3150408	CFGExitNode	EXIT		3150386		True				
ANR	3150409	Symbol	p		3150386						
ANR	3150410	Symbol	LITTLE2_IS_NAME_CHAR_MINBPC		3150386						
ANR	3150411	Symbol	enc		3150386						
ANR	3150412	Function	little2_isNmstrtMin	820:0:22592:22721							
ANR	3150413	FunctionDef	"little2_isNmstrtMin (const ENCODING * enc , const char * p)"		3150412	0					
ANR	3150414	CompoundStatement		822:0:22671:22721	3150412	0					
ANR	3150415	ReturnStatement	"return LITTLE2_IS_NMSTRT_CHAR_MINBPC ( enc , p ) ;"	823:2:22675:22719	3150412	0	True				
ANR	3150416	CallExpression	"LITTLE2_IS_NMSTRT_CHAR_MINBPC ( enc , p )"		3150412	0					
ANR	3150417	Callee	LITTLE2_IS_NMSTRT_CHAR_MINBPC		3150412	0					
ANR	3150418	Identifier	LITTLE2_IS_NMSTRT_CHAR_MINBPC		3150412	0					
ANR	3150419	ArgumentList	enc		3150412	1					
ANR	3150420	Argument	enc		3150412	0					
ANR	3150421	Identifier	enc		3150412	0					
ANR	3150422	Argument	p		3150412	1					
ANR	3150423	Identifier	p		3150412	0					
ANR	3150424	ReturnType	static int PTRFASTCALL		3150412	1					
ANR	3150425	Identifier	little2_isNmstrtMin		3150412	2					
ANR	3150426	ParameterList	"const ENCODING * enc , const char * p"		3150412	3					
ANR	3150427	Parameter	const ENCODING * enc	821:20:22635:22653	3150412	0	True				
ANR	3150428	ParameterType	const ENCODING *		3150412	0					
ANR	3150429	Identifier	enc		3150412	1					
ANR	3150430	Parameter	const char * p	821:41:22656:22668	3150412	1	True				
ANR	3150431	ParameterType	const char *		3150412	0					
ANR	3150432	Identifier	p		3150412	1					
ANR	3150433	CFGEntryNode	ENTRY		3150412		True				
ANR	3150434	CFGExitNode	EXIT		3150412		True				
ANR	3150435	Symbol	p		3150412						
ANR	3150436	Symbol	enc		3150412						
ANR	3150437	Symbol	LITTLE2_IS_NMSTRT_CHAR_MINBPC		3150412						
ANR	3150438	DeclStmt									
ANR	3150439	Decl							const struct normal_encoding	const struct normal_encoding	little2_encoding_ns
ANR	3150440	DeclStmt									
ANR	3150441	Decl							const struct normal_encoding	const struct normal_encoding	little2_encoding
ANR	3150442	DeclStmt									
ANR	3150443	Decl							const struct normal_encoding	const struct normal_encoding	internal_little2_encoding_ns
ANR	3150444	DeclStmt									
ANR	3150445	Decl							const struct normal_encoding	const struct normal_encoding	internal_little2_encoding
ANR	3150446	Function	big2_byteType	937:0:25195:25303							
ANR	3150447	FunctionDef	"big2_byteType (const ENCODING * enc , const char * p)"		3150446	0					
ANR	3150448	CompoundStatement		939:0:25268:25303	3150446	0					
ANR	3150449	ReturnStatement	"return BIG2_BYTE_TYPE ( enc , p ) ;"	940:2:25272:25301	3150446	0	True				
ANR	3150450	CallExpression	"BIG2_BYTE_TYPE ( enc , p )"		3150446	0					
ANR	3150451	Callee	BIG2_BYTE_TYPE		3150446	0					
ANR	3150452	Identifier	BIG2_BYTE_TYPE		3150446	0					
ANR	3150453	ArgumentList	enc		3150446	1					
ANR	3150454	Argument	enc		3150446	0					
ANR	3150455	Identifier	enc		3150446	0					
ANR	3150456	Argument	p		3150446	1					
ANR	3150457	Identifier	p		3150446	0					
ANR	3150458	ReturnType	static int PTRFASTCALL		3150446	1					
ANR	3150459	Identifier	big2_byteType		3150446	2					
ANR	3150460	ParameterList	"const ENCODING * enc , const char * p"		3150446	3					
ANR	3150461	Parameter	const ENCODING * enc	938:14:25232:25250	3150446	0	True				
ANR	3150462	ParameterType	const ENCODING *		3150446	0					
ANR	3150463	Identifier	enc		3150446	1					
ANR	3150464	Parameter	const char * p	938:35:25253:25265	3150446	1	True				
ANR	3150465	ParameterType	const char *		3150446	0					
ANR	3150466	Identifier	p		3150446	1					
ANR	3150467	CFGEntryNode	ENTRY		3150446		True				
ANR	3150468	CFGExitNode	EXIT		3150446		True				
ANR	3150469	Symbol	p		3150446						
ANR	3150470	Symbol	BIG2_BYTE_TYPE		3150446						
ANR	3150471	Symbol	enc		3150446						
ANR	3150472	Function	big2_byteToAscii	943:0:25306:25421							
ANR	3150473	FunctionDef	"big2_byteToAscii (const ENCODING * enc , const char * p)"		3150472	0					
ANR	3150474	CompoundStatement		945:0:25382:25421	3150472	0					
ANR	3150475	ReturnStatement	"return BIG2_BYTE_TO_ASCII ( enc , p ) ;"	946:2:25386:25419	3150472	0	True				
ANR	3150476	CallExpression	"BIG2_BYTE_TO_ASCII ( enc , p )"		3150472	0					
ANR	3150477	Callee	BIG2_BYTE_TO_ASCII		3150472	0					
ANR	3150478	Identifier	BIG2_BYTE_TO_ASCII		3150472	0					
ANR	3150479	ArgumentList	enc		3150472	1					
ANR	3150480	Argument	enc		3150472	0					
ANR	3150481	Identifier	enc		3150472	0					
ANR	3150482	Argument	p		3150472	1					
ANR	3150483	Identifier	p		3150472	0					
ANR	3150484	ReturnType	static int PTRFASTCALL		3150472	1					
ANR	3150485	Identifier	big2_byteToAscii		3150472	2					
ANR	3150486	ParameterList	"const ENCODING * enc , const char * p"		3150472	3					
ANR	3150487	Parameter	const ENCODING * enc	944:17:25346:25364	3150472	0	True				
ANR	3150488	ParameterType	const ENCODING *		3150472	0					
ANR	3150489	Identifier	enc		3150472	1					
ANR	3150490	Parameter	const char * p	944:38:25367:25379	3150472	1	True				
ANR	3150491	ParameterType	const char *		3150472	0					
ANR	3150492	Identifier	p		3150472	1					
ANR	3150493	CFGEntryNode	ENTRY		3150472		True				
ANR	3150494	CFGExitNode	EXIT		3150472		True				
ANR	3150495	Symbol	p		3150472						
ANR	3150496	Symbol	BIG2_BYTE_TO_ASCII		3150472						
ANR	3150497	Symbol	enc		3150472						
ANR	3150498	Function	big2_charMatches	949:0:25424:25544							
ANR	3150499	FunctionDef	"big2_charMatches (const ENCODING * enc , const char * p , int c)"		3150498	0					
ANR	3150500	CompoundStatement		951:0:25503:25544	3150498	0					
ANR	3150501	ReturnStatement	"return BIG2_CHAR_MATCHES ( enc , p , c ) ;"	952:2:25507:25542	3150498	0	True				
ANR	3150502	CallExpression	"BIG2_CHAR_MATCHES ( enc , p , c )"		3150498	0					
ANR	3150503	Callee	BIG2_CHAR_MATCHES		3150498	0					
ANR	3150504	Identifier	BIG2_CHAR_MATCHES		3150498	0					
ANR	3150505	ArgumentList	enc		3150498	1					
ANR	3150506	Argument	enc		3150498	0					
ANR	3150507	Identifier	enc		3150498	0					
ANR	3150508	Argument	p		3150498	1					
ANR	3150509	Identifier	p		3150498	0					
ANR	3150510	Argument	c		3150498	2					
ANR	3150511	Identifier	c		3150498	0					
ANR	3150512	ReturnType	static int PTRCALL		3150498	1					
ANR	3150513	Identifier	big2_charMatches		3150498	2					
ANR	3150514	ParameterList	"const ENCODING * enc , const char * p , int c"		3150498	3					
ANR	3150515	Parameter	const ENCODING * enc	950:17:25460:25478	3150498	0	True				
ANR	3150516	ParameterType	const ENCODING *		3150498	0					
ANR	3150517	Identifier	enc		3150498	1					
ANR	3150518	Parameter	const char * p	950:38:25481:25493	3150498	1	True				
ANR	3150519	ParameterType	const char *		3150498	0					
ANR	3150520	Identifier	p		3150498	1					
ANR	3150521	Parameter	int c	950:53:25496:25500	3150498	2	True				
ANR	3150522	ParameterType	int		3150498	0					
ANR	3150523	Identifier	c		3150498	1					
ANR	3150524	CFGEntryNode	ENTRY		3150498		True				
ANR	3150525	CFGExitNode	EXIT		3150498		True				
ANR	3150526	Symbol	p		3150498						
ANR	3150527	Symbol	c		3150498						
ANR	3150528	Symbol	enc		3150498						
ANR	3150529	Symbol	BIG2_CHAR_MATCHES		3150498						
ANR	3150530	Function	big2_isNameMin	955:0:25547:25666							
ANR	3150531	FunctionDef	"big2_isNameMin (const ENCODING * enc , const char * p)"		3150530	0					
ANR	3150532	CompoundStatement		957:0:25621:25666	3150530	0					
ANR	3150533	ReturnStatement	"return BIG2_IS_NAME_CHAR_MINBPC ( enc , p ) ;"	958:2:25625:25664	3150530	0	True				
ANR	3150534	CallExpression	"BIG2_IS_NAME_CHAR_MINBPC ( enc , p )"		3150530	0					
ANR	3150535	Callee	BIG2_IS_NAME_CHAR_MINBPC		3150530	0					
ANR	3150536	Identifier	BIG2_IS_NAME_CHAR_MINBPC		3150530	0					
ANR	3150537	ArgumentList	enc		3150530	1					
ANR	3150538	Argument	enc		3150530	0					
ANR	3150539	Identifier	enc		3150530	0					
ANR	3150540	Argument	p		3150530	1					
ANR	3150541	Identifier	p		3150530	0					
ANR	3150542	ReturnType	static int PTRFASTCALL		3150530	1					
ANR	3150543	Identifier	big2_isNameMin		3150530	2					
ANR	3150544	ParameterList	"const ENCODING * enc , const char * p"		3150530	3					
ANR	3150545	Parameter	const ENCODING * enc	956:15:25585:25603	3150530	0	True				
ANR	3150546	ParameterType	const ENCODING *		3150530	0					
ANR	3150547	Identifier	enc		3150530	1					
ANR	3150548	Parameter	const char * p	956:36:25606:25618	3150530	1	True				
ANR	3150549	ParameterType	const char *		3150530	0					
ANR	3150550	Identifier	p		3150530	1					
ANR	3150551	CFGEntryNode	ENTRY		3150530		True				
ANR	3150552	CFGExitNode	EXIT		3150530		True				
ANR	3150553	Symbol	p		3150530						
ANR	3150554	Symbol	BIG2_IS_NAME_CHAR_MINBPC		3150530						
ANR	3150555	Symbol	enc		3150530						
ANR	3150556	Function	big2_isNmstrtMin	961:0:25669:25792							
ANR	3150557	FunctionDef	"big2_isNmstrtMin (const ENCODING * enc , const char * p)"		3150556	0					
ANR	3150558	CompoundStatement		963:0:25745:25792	3150556	0					
ANR	3150559	ReturnStatement	"return BIG2_IS_NMSTRT_CHAR_MINBPC ( enc , p ) ;"	964:2:25749:25790	3150556	0	True				
ANR	3150560	CallExpression	"BIG2_IS_NMSTRT_CHAR_MINBPC ( enc , p )"		3150556	0					
ANR	3150561	Callee	BIG2_IS_NMSTRT_CHAR_MINBPC		3150556	0					
ANR	3150562	Identifier	BIG2_IS_NMSTRT_CHAR_MINBPC		3150556	0					
ANR	3150563	ArgumentList	enc		3150556	1					
ANR	3150564	Argument	enc		3150556	0					
ANR	3150565	Identifier	enc		3150556	0					
ANR	3150566	Argument	p		3150556	1					
ANR	3150567	Identifier	p		3150556	0					
ANR	3150568	ReturnType	static int PTRFASTCALL		3150556	1					
ANR	3150569	Identifier	big2_isNmstrtMin		3150556	2					
ANR	3150570	ParameterList	"const ENCODING * enc , const char * p"		3150556	3					
ANR	3150571	Parameter	const ENCODING * enc	962:17:25709:25727	3150556	0	True				
ANR	3150572	ParameterType	const ENCODING *		3150556	0					
ANR	3150573	Identifier	enc		3150556	1					
ANR	3150574	Parameter	const char * p	962:38:25730:25742	3150556	1	True				
ANR	3150575	ParameterType	const char *		3150556	0					
ANR	3150576	Identifier	p		3150556	1					
ANR	3150577	CFGEntryNode	ENTRY		3150556		True				
ANR	3150578	CFGExitNode	EXIT		3150556		True				
ANR	3150579	Symbol	p		3150556						
ANR	3150580	Symbol	enc		3150556						
ANR	3150581	Symbol	BIG2_IS_NMSTRT_CHAR_MINBPC		3150556						
ANR	3150582	DeclStmt									
ANR	3150583	Decl							const struct normal_encoding	const struct normal_encoding	big2_encoding_ns
ANR	3150584	DeclStmt									
ANR	3150585	Decl							const struct normal_encoding	const struct normal_encoding	big2_encoding
ANR	3150586	DeclStmt									
ANR	3150587	Decl							const struct normal_encoding	const struct normal_encoding	internal_big2_encoding_ns
ANR	3150588	DeclStmt									
ANR	3150589	Decl							const struct normal_encoding	const struct normal_encoding	internal_big2_encoding
ANR	3150590	Function	streqci	1066:0:27684:28223							
ANR	3150591	FunctionDef	"streqci (const char * s1 , const char * s2)"		3150590	0					
ANR	3150592	CompoundStatement		1068:0:27744:28223	3150590	0					
ANR	3150593	ForStatement	for ( ; ; )		3150590	0					
ANR	3150594	CompoundStatement		4:4:39:54	3150590	0					
ANR	3150595	IdentifierDeclStatement	char c1 = * s1 ++ ;	1070:4:27763:27778	3150590	0	True				
ANR	3150596	IdentifierDecl	c1 = * s1 ++		3150590	0					
ANR	3150597	IdentifierDeclType	char		3150590	0					
ANR	3150598	Identifier	c1		3150590	1					
ANR	3150599	AssignmentExpression	c1 = * s1 ++		3150590	2		=			
ANR	3150600	Identifier	c1		3150590	0					
ANR	3150601	UnaryOperationExpression	* s1 ++		3150590	1					
ANR	3150602	UnaryOperator	*		3150590	0					
ANR	3150603	PostIncDecOperationExpression	s1 ++		3150590	1					
ANR	3150604	Identifier	s1		3150590	0					
ANR	3150605	IncDec	++		3150590	1					
ANR	3150606	IdentifierDeclStatement	char c2 = * s2 ++ ;	1071:4:27784:27799	3150590	1	True				
ANR	3150607	IdentifierDecl	c2 = * s2 ++		3150590	0					
ANR	3150608	IdentifierDeclType	char		3150590	0					
ANR	3150609	Identifier	c2		3150590	1					
ANR	3150610	AssignmentExpression	c2 = * s2 ++		3150590	2		=			
ANR	3150611	Identifier	c2		3150590	0					
ANR	3150612	UnaryOperationExpression	* s2 ++		3150590	1					
ANR	3150613	UnaryOperator	*		3150590	0					
ANR	3150614	PostIncDecOperationExpression	s2 ++		3150590	1					
ANR	3150615	Identifier	s2		3150590	0					
ANR	3150616	IncDec	++		3150590	1					
ANR	3150617	IfStatement	if ( ASCII_a <= c1 && c1 <= ASCII_z )		3150590	2					
ANR	3150618	Condition	ASCII_a <= c1 && c1 <= ASCII_z	1072:8:27809:27838	3150590	0	True				
ANR	3150619	AndExpression	ASCII_a <= c1 && c1 <= ASCII_z		3150590	0		&&			
ANR	3150620	RelationalExpression	ASCII_a <= c1		3150590	0		<=			
ANR	3150621	Identifier	ASCII_a		3150590	0					
ANR	3150622	Identifier	c1		3150590	1					
ANR	3150623	RelationalExpression	c1 <= ASCII_z		3150590	1		<=			
ANR	3150624	Identifier	c1		3150590	0					
ANR	3150625	Identifier	ASCII_z		3150590	1					
ANR	3150626	ExpressionStatement	c1 += ASCII_A - ASCII_a	1073:6:27847:27870	3150590	1	True				
ANR	3150627	AssignmentExpression	c1 += ASCII_A - ASCII_a		3150590	0		+=			
ANR	3150628	Identifier	c1		3150590	0					
ANR	3150629	AdditiveExpression	ASCII_A - ASCII_a		3150590	1		-			
ANR	3150630	Identifier	ASCII_A		3150590	0					
ANR	3150631	Identifier	ASCII_a		3150590	1					
ANR	3150632	IfStatement	if ( ASCII_a <= c2 && c2 <= ASCII_z )		3150590	3					
ANR	3150633	Condition	ASCII_a <= c2 && c2 <= ASCII_z	1074:8:27880:27909	3150590	0	True				
ANR	3150634	AndExpression	ASCII_a <= c2 && c2 <= ASCII_z		3150590	0		&&			
ANR	3150635	RelationalExpression	ASCII_a <= c2		3150590	0		<=			
ANR	3150636	Identifier	ASCII_a		3150590	0					
ANR	3150637	Identifier	c2		3150590	1					
ANR	3150638	RelationalExpression	c2 <= ASCII_z		3150590	1		<=			
ANR	3150639	Identifier	c2		3150590	0					
ANR	3150640	Identifier	ASCII_z		3150590	1					
ANR	3150641	ExpressionStatement	c2 += ASCII_A - ASCII_a	1079:6:28101:28124	3150590	1	True				
ANR	3150642	AssignmentExpression	c2 += ASCII_A - ASCII_a		3150590	0		+=			
ANR	3150643	Identifier	c2		3150590	0					
ANR	3150644	AdditiveExpression	ASCII_A - ASCII_a		3150590	1		-			
ANR	3150645	Identifier	ASCII_A		3150590	0					
ANR	3150646	Identifier	ASCII_a		3150590	1					
ANR	3150647	IfStatement	if ( c1 != c2 )		3150590	4					
ANR	3150648	Condition	c1 != c2	1080:8:28155:28162	3150590	0	True				
ANR	3150649	EqualityExpression	c1 != c2		3150590	0		!=			
ANR	3150650	Identifier	c1		3150590	0					
ANR	3150651	Identifier	c2		3150590	1					
ANR	3150652	ReturnStatement	return 0 ;	1081:6:28171:28179	3150590	1	True				
ANR	3150653	PrimaryExpression	0		3150590	0					
ANR	3150654	IfStatement	if ( ! c1 )		3150590	5					
ANR	3150655	Condition	! c1	1082:8:28189:28191	3150590	0	True				
ANR	3150656	UnaryOperationExpression	! c1		3150590	0					
ANR	3150657	UnaryOperator	!		3150590	0					
ANR	3150658	Identifier	c1		3150590	1					
ANR	3150659	BreakStatement	break ;	1083:6:28200:28205	3150590	1	True				
ANR	3150660	ReturnStatement	return 1 ;	1085:2:28213:28221	3150590	1	True				
ANR	3150661	PrimaryExpression	1		3150590	0					
ANR	3150662	ReturnType	static int FASTCALL		3150590	1					
ANR	3150663	Identifier	streqci		3150590	2					
ANR	3150664	ParameterList	"const char * s1 , const char * s2"		3150590	3					
ANR	3150665	Parameter	const char * s1	1067:8:27712:27725	3150590	0	True				
ANR	3150666	ParameterType	const char *		3150590	0					
ANR	3150667	Identifier	s1		3150590	1					
ANR	3150668	Parameter	const char * s2	1067:24:27728:27741	3150590	1	True				
ANR	3150669	ParameterType	const char *		3150590	0					
ANR	3150670	Identifier	s2		3150590	1					
ANR	3150671	CFGEntryNode	ENTRY		3150590		True				
ANR	3150672	CFGExitNode	EXIT		3150590		True				
ANR	3150673	InfiniteForNode	true		3150590		True				
ANR	3150674	Symbol	* s1 ++		3150590						
ANR	3150675	Symbol	ASCII_z		3150590						
ANR	3150676	Symbol	* s2 ++		3150590						
ANR	3150677	Symbol	ASCII_a		3150590						
ANR	3150678	Symbol	ASCII_A		3150590						
ANR	3150679	Symbol	s1		3150590						
ANR	3150680	Symbol	c1		3150590						
ANR	3150681	Symbol	s2		3150590						
ANR	3150682	Symbol	c2		3150590						
ANR	3150683	Function	initUpdatePosition	1088:0:28226:28426							
ANR	3150684	FunctionDef	"initUpdatePosition (const ENCODING * UNUSED_P ( enc ) , const char * ptr , const char * end , POSITION * pos)"		3150683	0					
ANR	3150685	CompoundStatement		1091:0:28364:28426	3150683	0					
ANR	3150686	ExpressionStatement	"normal_updatePosition ( & utf8_encoding . enc , ptr , end , pos )"	1092:2:28368:28424	3150683	0	True				
ANR	3150687	CallExpression	"normal_updatePosition ( & utf8_encoding . enc , ptr , end , pos )"		3150683	0					
ANR	3150688	Callee	normal_updatePosition		3150683	0					
ANR	3150689	Identifier	normal_updatePosition		3150683	0					
ANR	3150690	ArgumentList	& utf8_encoding . enc		3150683	1					
ANR	3150691	Argument	& utf8_encoding . enc		3150683	0					
ANR	3150692	UnaryOperationExpression	& utf8_encoding . enc		3150683	0					
ANR	3150693	UnaryOperator	&		3150683	0					
ANR	3150694	MemberAccess	utf8_encoding . enc		3150683	1					
ANR	3150695	Identifier	utf8_encoding		3150683	0					
ANR	3150696	Identifier	enc		3150683	1					
ANR	3150697	Argument	ptr		3150683	1					
ANR	3150698	Identifier	ptr		3150683	0					
ANR	3150699	Argument	end		3150683	2					
ANR	3150700	Identifier	end		3150683	0					
ANR	3150701	Argument	pos		3150683	3					
ANR	3150702	Identifier	pos		3150683	0					
ANR	3150703	ReturnType	static void PTRCALL		3150683	1					
ANR	3150704	Identifier	initUpdatePosition		3150683	2					
ANR	3150705	ParameterList	"const ENCODING * UNUSED_P ( enc ) , const char * ptr , const char * end , POSITION * pos"		3150683	3					
ANR	3150706	Parameter	const ENCODING * UNUSED_P ( enc )	1089:19:28265:28293	3150683	0	True				
ANR	3150707	ParameterType	const ENCODING * ( enc )		3150683	0					
ANR	3150708	Identifier	UNUSED_P		3150683	1					
ANR	3150709	Parameter	const char * ptr	1089:50:28296:28310	3150683	1	True				
ANR	3150710	ParameterType	const char *		3150683	0					
ANR	3150711	Identifier	ptr		3150683	1					
ANR	3150712	Parameter	const char * end	1090:19:28332:28346	3150683	2	True				
ANR	3150713	ParameterType	const char *		3150683	0					
ANR	3150714	Identifier	end		3150683	1					
ANR	3150715	Parameter	POSITION * pos	1090:36:28349:28361	3150683	3	True				
ANR	3150716	ParameterType	POSITION *		3150683	0					
ANR	3150717	Identifier	pos		3150683	1					
ANR	3150718	CFGEntryNode	ENTRY		3150683		True				
ANR	3150719	CFGExitNode	EXIT		3150683		True				
ANR	3150720	Symbol	UNUSED_P		3150683						
ANR	3150721	Symbol	& utf8_encoding . enc		3150683						
ANR	3150722	Symbol	utf8_encoding		3150683						
ANR	3150723	Symbol	pos		3150683						
ANR	3150724	Symbol	& utf8_encoding		3150683						
ANR	3150725	Symbol	end		3150683						
ANR	3150726	Symbol	ptr		3150683						
ANR	3150727	Function	toAscii	1095:0:28429:28639							
ANR	3150728	FunctionDef	"toAscii (const ENCODING * enc , const char * ptr , const char * end)"		3150727	0					
ANR	3150729	CompoundStatement		1097:0:28503:28639	3150727	0					
ANR	3150730	IdentifierDeclStatement	char buf [ 1 ] ;	1098:2:28507:28518	3150727	0	True				
ANR	3150731	IdentifierDecl	buf [ 1 ]		3150727	0					
ANR	3150732	IdentifierDeclType	char [ 1 ]		3150727	0					
ANR	3150733	Identifier	buf		3150727	1					
ANR	3150734	PrimaryExpression	1		3150727	2					
ANR	3150735	IdentifierDeclStatement	char * p = buf ;	1099:2:28522:28535	3150727	1	True				
ANR	3150736	IdentifierDecl	* p = buf		3150727	0					
ANR	3150737	IdentifierDeclType	char *		3150727	0					
ANR	3150738	Identifier	p		3150727	1					
ANR	3150739	AssignmentExpression	* p = buf		3150727	2		=			
ANR	3150740	Identifier	buf		3150727	0					
ANR	3150741	Identifier	buf		3150727	1					
ANR	3150742	ExpressionStatement	"XmlUtf8Convert ( enc , & ptr , end , & p , p + 1 )"	1100:2:28539:28580	3150727	2	True				
ANR	3150743	CallExpression	"XmlUtf8Convert ( enc , & ptr , end , & p , p + 1 )"		3150727	0					
ANR	3150744	Callee	XmlUtf8Convert		3150727	0					
ANR	3150745	Identifier	XmlUtf8Convert		3150727	0					
ANR	3150746	ArgumentList	enc		3150727	1					
ANR	3150747	Argument	enc		3150727	0					
ANR	3150748	Identifier	enc		3150727	0					
ANR	3150749	Argument	& ptr		3150727	1					
ANR	3150750	UnaryOperationExpression	& ptr		3150727	0					
ANR	3150751	UnaryOperator	&		3150727	0					
ANR	3150752	Identifier	ptr		3150727	1					
ANR	3150753	Argument	end		3150727	2					
ANR	3150754	Identifier	end		3150727	0					
ANR	3150755	Argument	& p		3150727	3					
ANR	3150756	UnaryOperationExpression	& p		3150727	0					
ANR	3150757	UnaryOperator	&		3150727	0					
ANR	3150758	Identifier	p		3150727	1					
ANR	3150759	Argument	p + 1		3150727	4					
ANR	3150760	AdditiveExpression	p + 1		3150727	0		+			
ANR	3150761	Identifier	p		3150727	0					
ANR	3150762	PrimaryExpression	1		3150727	1					
ANR	3150763	IfStatement	if ( p == buf )		3150727	3					
ANR	3150764	Condition	p == buf	1101:6:28588:28595	3150727	0	True				
ANR	3150765	EqualityExpression	p == buf		3150727	0		==			
ANR	3150766	Identifier	p		3150727	0					
ANR	3150767	Identifier	buf		3150727	1					
ANR	3150768	ReturnStatement	return - 1 ;	1102:4:28602:28611	3150727	1	True				
ANR	3150769	UnaryOperationExpression	- 1		3150727	0					
ANR	3150770	UnaryOperator	-		3150727	0					
ANR	3150771	PrimaryExpression	1		3150727	1					
ANR	3150772	ElseStatement	else		3150727	0					
ANR	3150773	ReturnStatement	return buf [ 0 ] ;	1104:4:28624:28637	3150727	0	True				
ANR	3150774	ArrayIndexing	buf [ 0 ]		3150727	0					
ANR	3150775	Identifier	buf		3150727	0					
ANR	3150776	PrimaryExpression	0		3150727	1					
ANR	3150777	ReturnType	static int		3150727	1					
ANR	3150778	Identifier	toAscii		3150727	2					
ANR	3150779	ParameterList	"const ENCODING * enc , const char * ptr , const char * end"		3150727	3					
ANR	3150780	Parameter	const ENCODING * enc	1096:8:28448:28466	3150727	0	True				
ANR	3150781	ParameterType	const ENCODING *		3150727	0					
ANR	3150782	Identifier	enc		3150727	1					
ANR	3150783	Parameter	const char * ptr	1096:29:28469:28483	3150727	1	True				
ANR	3150784	ParameterType	const char *		3150727	0					
ANR	3150785	Identifier	ptr		3150727	1					
ANR	3150786	Parameter	const char * end	1096:46:28486:28500	3150727	2	True				
ANR	3150787	ParameterType	const char *		3150727	0					
ANR	3150788	Identifier	end		3150727	1					
ANR	3150789	CFGEntryNode	ENTRY		3150727		True				
ANR	3150790	CFGExitNode	EXIT		3150727		True				
ANR	3150791	Symbol	p		3150727						
ANR	3150792	Symbol	buf		3150727						
ANR	3150793	Symbol	* buf		3150727						
ANR	3150794	Symbol	& ptr		3150727						
ANR	3150795	Symbol	& p		3150727						
ANR	3150796	Symbol	end		3150727						
ANR	3150797	Symbol	enc		3150727						
ANR	3150798	Symbol	ptr		3150727						
ANR	3150799	Function	isSpace	1107:0:28642:28773							
ANR	3150800	FunctionDef	isSpace (int c)		3150799	0					
ANR	3150801	CompoundStatement		1109:0:28677:28773	3150799	0					
ANR	3150802	SwitchStatement	switch ( c )		3150799	0					
ANR	3150803	Condition	c	1110:10:28689:28689	3150799	0	True				
ANR	3150804	Identifier	c		3150799	0					
ANR	3150805	CompoundStatement		2:13:14:14	3150799	1					
ANR	3150806	Label	case 0x20 :	1111:2:28696:28705	3150799	0	True				
ANR	3150807	Label	case 0xD :	1112:2:28709:28717	3150799	1	True				
ANR	3150808	Label	case 0xA :	1113:2:28721:28729	3150799	2	True				
ANR	3150809	Label	case 0x9 :	1114:2:28733:28741	3150799	3	True				
ANR	3150810	ReturnStatement	return 1 ;	1115:4:28747:28755	3150799	4	True				
ANR	3150811	PrimaryExpression	1		3150799	0					
ANR	3150812	ReturnStatement	return 0 ;	1117:2:28763:28771	3150799	1	True				
ANR	3150813	PrimaryExpression	0		3150799	0					
ANR	3150814	ReturnType	static int FASTCALL		3150799	1					
ANR	3150815	Identifier	isSpace		3150799	2					
ANR	3150816	ParameterList	int c		3150799	3					
ANR	3150817	Parameter	int c	1108:8:28670:28674	3150799	0	True				
ANR	3150818	ParameterType	int		3150799	0					
ANR	3150819	Identifier	c		3150799	1					
ANR	3150820	CFGEntryNode	ENTRY		3150799		True				
ANR	3150821	CFGExitNode	EXIT		3150799		True				
ANR	3150822	Symbol	c		3150799						
ANR	3150823	Function	parsePseudoAttribute	1123:0:28869:30776							
ANR	3150824	FunctionDef	"parsePseudoAttribute (const ENCODING * enc , const char * ptr , const char * end , const char * * namePtr , const char * * nameEndPtr , const char * * valPtr , const char * * nextTokPtr)"		3150823	0					
ANR	3150825	CompoundStatement		1131:0:29175:30776	3150823	0					
ANR	3150826	IdentifierDeclStatement	int c ;	1132:2:29179:29184	3150823	0	True				
ANR	3150827	IdentifierDecl	c		3150823	0					
ANR	3150828	IdentifierDeclType	int		3150823	0					
ANR	3150829	Identifier	c		3150823	1					
ANR	3150830	IdentifierDeclStatement	char open ;	1133:2:29188:29197	3150823	1	True				
ANR	3150831	IdentifierDecl	open		3150823	0					
ANR	3150832	IdentifierDeclType	char		3150823	0					
ANR	3150833	Identifier	open		3150823	1					
ANR	3150834	IfStatement	if ( ptr == end )		3150823	2					
ANR	3150835	Condition	ptr == end	1134:6:29205:29214	3150823	0	True				
ANR	3150836	EqualityExpression	ptr == end		3150823	0		==			
ANR	3150837	Identifier	ptr		3150823	0					
ANR	3150838	Identifier	end		3150823	1					
ANR	3150839	CompoundStatement		4:18:41:41	3150823	1					
ANR	3150840	ExpressionStatement	* namePtr = NULL	1135:4:29223:29238	3150823	0	True				
ANR	3150841	AssignmentExpression	* namePtr = NULL		3150823	0		=			
ANR	3150842	UnaryOperationExpression	* namePtr		3150823	0					
ANR	3150843	UnaryOperator	*		3150823	0					
ANR	3150844	Identifier	namePtr		3150823	1					
ANR	3150845	Identifier	NULL		3150823	1					
ANR	3150846	ReturnStatement	return 1 ;	1136:4:29244:29252	3150823	1	True				
ANR	3150847	PrimaryExpression	1		3150823	0					
ANR	3150848	IfStatement	"if ( ! isSpace ( toAscii ( enc , ptr , end ) ) )"		3150823	3					
ANR	3150849	Condition	"! isSpace ( toAscii ( enc , ptr , end ) )"	1138:6:29264:29295	3150823	0	True				
ANR	3150850	UnaryOperationExpression	"! isSpace ( toAscii ( enc , ptr , end ) )"		3150823	0					
ANR	3150851	UnaryOperator	!		3150823	0					
ANR	3150852	CallExpression	"isSpace ( toAscii ( enc , ptr , end ) )"		3150823	1					
ANR	3150853	Callee	isSpace		3150823	0					
ANR	3150854	Identifier	isSpace		3150823	0					
ANR	3150855	ArgumentList	"toAscii ( enc , ptr , end )"		3150823	1					
ANR	3150856	Argument	"toAscii ( enc , ptr , end )"		3150823	0					
ANR	3150857	CallExpression	"toAscii ( enc , ptr , end )"		3150823	0					
ANR	3150858	Callee	toAscii		3150823	0					
ANR	3150859	Identifier	toAscii		3150823	0					
ANR	3150860	ArgumentList	enc		3150823	1					
ANR	3150861	Argument	enc		3150823	0					
ANR	3150862	Identifier	enc		3150823	0					
ANR	3150863	Argument	ptr		3150823	1					
ANR	3150864	Identifier	ptr		3150823	0					
ANR	3150865	Argument	end		3150823	2					
ANR	3150866	Identifier	end		3150823	0					
ANR	3150867	CompoundStatement		8:40:122:122	3150823	1					
ANR	3150868	ExpressionStatement	* nextTokPtr = ptr	1139:4:29304:29321	3150823	0	True				
ANR	3150869	AssignmentExpression	* nextTokPtr = ptr		3150823	0		=			
ANR	3150870	UnaryOperationExpression	* nextTokPtr		3150823	0					
ANR	3150871	UnaryOperator	*		3150823	0					
ANR	3150872	Identifier	nextTokPtr		3150823	1					
ANR	3150873	Identifier	ptr		3150823	1					
ANR	3150874	ReturnStatement	return 0 ;	1140:4:29327:29335	3150823	1	True				
ANR	3150875	PrimaryExpression	0		3150823	0					
ANR	3150876	DoStatement	do		3150823	4					
ANR	3150877	CompoundStatement		12:5:170:170	3150823	0					
ANR	3150878	ExpressionStatement	ptr += enc -> minBytesPerChar	1143:4:29352:29379	3150823	0	True				
ANR	3150879	AssignmentExpression	ptr += enc -> minBytesPerChar		3150823	0		+=			
ANR	3150880	Identifier	ptr		3150823	0					
ANR	3150881	PtrMemberAccess	enc -> minBytesPerChar		3150823	1					
ANR	3150882	Identifier	enc		3150823	0					
ANR	3150883	Identifier	minBytesPerChar		3150823	1					
ANR	3150884	Condition	"isSpace ( toAscii ( enc , ptr , end ) )"	1144:11:29392:29422	3150823	1	True				
ANR	3150885	CallExpression	"isSpace ( toAscii ( enc , ptr , end ) )"		3150823	0					
ANR	3150886	Callee	isSpace		3150823	0					
ANR	3150887	Identifier	isSpace		3150823	0					
ANR	3150888	ArgumentList	"toAscii ( enc , ptr , end )"		3150823	1					
ANR	3150889	Argument	"toAscii ( enc , ptr , end )"		3150823	0					
ANR	3150890	CallExpression	"toAscii ( enc , ptr , end )"		3150823	0					
ANR	3150891	Callee	toAscii		3150823	0					
ANR	3150892	Identifier	toAscii		3150823	0					
ANR	3150893	ArgumentList	enc		3150823	1					
ANR	3150894	Argument	enc		3150823	0					
ANR	3150895	Identifier	enc		3150823	0					
ANR	3150896	Argument	ptr		3150823	1					
ANR	3150897	Identifier	ptr		3150823	0					
ANR	3150898	Argument	end		3150823	2					
ANR	3150899	Identifier	end		3150823	0					
ANR	3150900	IfStatement	if ( ptr == end )		3150823	5					
ANR	3150901	Condition	ptr == end	1145:6:29432:29441	3150823	0	True				
ANR	3150902	EqualityExpression	ptr == end		3150823	0		==			
ANR	3150903	Identifier	ptr		3150823	0					
ANR	3150904	Identifier	end		3150823	1					
ANR	3150905	CompoundStatement		15:18:268:268	3150823	1					
ANR	3150906	ExpressionStatement	* namePtr = NULL	1146:4:29450:29465	3150823	0	True				
ANR	3150907	AssignmentExpression	* namePtr = NULL		3150823	0		=			
ANR	3150908	UnaryOperationExpression	* namePtr		3150823	0					
ANR	3150909	UnaryOperator	*		3150823	0					
ANR	3150910	Identifier	namePtr		3150823	1					
ANR	3150911	Identifier	NULL		3150823	1					
ANR	3150912	ReturnStatement	return 1 ;	1147:4:29471:29479	3150823	1	True				
ANR	3150913	PrimaryExpression	1		3150823	0					
ANR	3150914	ExpressionStatement	* namePtr = ptr	1149:2:29487:29501	3150823	6	True				
ANR	3150915	AssignmentExpression	* namePtr = ptr		3150823	0		=			
ANR	3150916	UnaryOperationExpression	* namePtr		3150823	0					
ANR	3150917	UnaryOperator	*		3150823	0					
ANR	3150918	Identifier	namePtr		3150823	1					
ANR	3150919	Identifier	ptr		3150823	1					
ANR	3150920	ForStatement	for ( ; ; )		3150823	7					
ANR	3150921	CompoundStatement		20:11:338:338	3150823	0					
ANR	3150922	ExpressionStatement	"c = toAscii ( enc , ptr , end )"	1151:4:29520:29546	3150823	0	True				
ANR	3150923	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		3150823	0		=			
ANR	3150924	Identifier	c		3150823	0					
ANR	3150925	CallExpression	"toAscii ( enc , ptr , end )"		3150823	1					
ANR	3150926	Callee	toAscii		3150823	0					
ANR	3150927	Identifier	toAscii		3150823	0					
ANR	3150928	ArgumentList	enc		3150823	1					
ANR	3150929	Argument	enc		3150823	0					
ANR	3150930	Identifier	enc		3150823	0					
ANR	3150931	Argument	ptr		3150823	1					
ANR	3150932	Identifier	ptr		3150823	0					
ANR	3150933	Argument	end		3150823	2					
ANR	3150934	Identifier	end		3150823	0					
ANR	3150935	IfStatement	if ( c == - 1 )		3150823	1					
ANR	3150936	Condition	c == - 1	1152:8:29556:29562	3150823	0	True				
ANR	3150937	EqualityExpression	c == - 1		3150823	0		==			
ANR	3150938	Identifier	c		3150823	0					
ANR	3150939	UnaryOperationExpression	- 1		3150823	1					
ANR	3150940	UnaryOperator	-		3150823	0					
ANR	3150941	PrimaryExpression	1		3150823	1					
ANR	3150942	CompoundStatement		22:17:389:389	3150823	1					
ANR	3150943	ExpressionStatement	* nextTokPtr = ptr	1153:6:29573:29590	3150823	0	True				
ANR	3150944	AssignmentExpression	* nextTokPtr = ptr		3150823	0		=			
ANR	3150945	UnaryOperationExpression	* nextTokPtr		3150823	0					
ANR	3150946	UnaryOperator	*		3150823	0					
ANR	3150947	Identifier	nextTokPtr		3150823	1					
ANR	3150948	Identifier	ptr		3150823	1					
ANR	3150949	ReturnStatement	return 0 ;	1154:6:29598:29606	3150823	1	True				
ANR	3150950	PrimaryExpression	0		3150823	0					
ANR	3150951	IfStatement	if ( c == ASCII_EQUALS )		3150823	2					
ANR	3150952	Condition	c == ASCII_EQUALS	1156:8:29622:29638	3150823	0	True				
ANR	3150953	EqualityExpression	c == ASCII_EQUALS		3150823	0		==			
ANR	3150954	Identifier	c		3150823	0					
ANR	3150955	Identifier	ASCII_EQUALS		3150823	1					
ANR	3150956	CompoundStatement		26:27:465:465	3150823	1					
ANR	3150957	ExpressionStatement	* nameEndPtr = ptr	1157:6:29649:29666	3150823	0	True				
ANR	3150958	AssignmentExpression	* nameEndPtr = ptr		3150823	0		=			
ANR	3150959	UnaryOperationExpression	* nameEndPtr		3150823	0					
ANR	3150960	UnaryOperator	*		3150823	0					
ANR	3150961	Identifier	nameEndPtr		3150823	1					
ANR	3150962	Identifier	ptr		3150823	1					
ANR	3150963	BreakStatement	break ;	1158:6:29674:29679	3150823	1	True				
ANR	3150964	IfStatement	if ( isSpace ( c ) )		3150823	3					
ANR	3150965	Condition	isSpace ( c )	1160:8:29695:29704	3150823	0	True				
ANR	3150966	CallExpression	isSpace ( c )		3150823	0					
ANR	3150967	Callee	isSpace		3150823	0					
ANR	3150968	Identifier	isSpace		3150823	0					
ANR	3150969	ArgumentList	c		3150823	1					
ANR	3150970	Argument	c		3150823	0					
ANR	3150971	Identifier	c		3150823	0					
ANR	3150972	CompoundStatement		30:20:531:531	3150823	1					
ANR	3150973	ExpressionStatement	* nameEndPtr = ptr	1161:6:29715:29732	3150823	0	True				
ANR	3150974	AssignmentExpression	* nameEndPtr = ptr		3150823	0		=			
ANR	3150975	UnaryOperationExpression	* nameEndPtr		3150823	0					
ANR	3150976	UnaryOperator	*		3150823	0					
ANR	3150977	Identifier	nameEndPtr		3150823	1					
ANR	3150978	Identifier	ptr		3150823	1					
ANR	3150979	DoStatement	do		3150823	1					
ANR	3150980	CompoundStatement		32:9:567:567	3150823	0					
ANR	3150981	ExpressionStatement	ptr += enc -> minBytesPerChar	1163:8:29753:29780	3150823	0	True				
ANR	3150982	AssignmentExpression	ptr += enc -> minBytesPerChar		3150823	0		+=			
ANR	3150983	Identifier	ptr		3150823	0					
ANR	3150984	PtrMemberAccess	enc -> minBytesPerChar		3150823	1					
ANR	3150985	Identifier	enc		3150823	0					
ANR	3150986	Identifier	minBytesPerChar		3150823	1					
ANR	3150987	Condition	"isSpace ( c = toAscii ( enc , ptr , end ) )"	1164:15:29797:29831	3150823	1	True				
ANR	3150988	CallExpression	"isSpace ( c = toAscii ( enc , ptr , end ) )"		3150823	0					
ANR	3150989	Callee	isSpace		3150823	0					
ANR	3150990	Identifier	isSpace		3150823	0					
ANR	3150991	ArgumentList	"c = toAscii ( enc , ptr , end )"		3150823	1					
ANR	3150992	Argument	"c = toAscii ( enc , ptr , end )"		3150823	0					
ANR	3150993	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		3150823	0		=			
ANR	3150994	Identifier	c		3150823	0					
ANR	3150995	CallExpression	"toAscii ( enc , ptr , end )"		3150823	1					
ANR	3150996	Callee	toAscii		3150823	0					
ANR	3150997	Identifier	toAscii		3150823	0					
ANR	3150998	ArgumentList	enc		3150823	1					
ANR	3150999	Argument	enc		3150823	0					
ANR	3151000	Identifier	enc		3150823	0					
ANR	3151001	Argument	ptr		3150823	1					
ANR	3151002	Identifier	ptr		3150823	0					
ANR	3151003	Argument	end		3150823	2					
ANR	3151004	Identifier	end		3150823	0					
ANR	3151005	IfStatement	if ( c != ASCII_EQUALS )		3150823	2					
ANR	3151006	Condition	c != ASCII_EQUALS	1165:10:29845:29861	3150823	0	True				
ANR	3151007	EqualityExpression	c != ASCII_EQUALS		3150823	0		!=			
ANR	3151008	Identifier	c		3150823	0					
ANR	3151009	Identifier	ASCII_EQUALS		3150823	1					
ANR	3151010	CompoundStatement		35:29:688:688	3150823	1					
ANR	3151011	ExpressionStatement	* nextTokPtr = ptr	1166:8:29874:29891	3150823	0	True				
ANR	3151012	AssignmentExpression	* nextTokPtr = ptr		3150823	0		=			
ANR	3151013	UnaryOperationExpression	* nextTokPtr		3150823	0					
ANR	3151014	UnaryOperator	*		3150823	0					
ANR	3151015	Identifier	nextTokPtr		3150823	1					
ANR	3151016	Identifier	ptr		3150823	1					
ANR	3151017	ReturnStatement	return 0 ;	1167:8:29901:29909	3150823	1	True				
ANR	3151018	PrimaryExpression	0		3150823	0					
ANR	3151019	BreakStatement	break ;	1169:6:29925:29930	3150823	3	True				
ANR	3151020	ExpressionStatement	ptr += enc -> minBytesPerChar	1171:4:29942:29969	3150823	4	True				
ANR	3151021	AssignmentExpression	ptr += enc -> minBytesPerChar		3150823	0		+=			
ANR	3151022	Identifier	ptr		3150823	0					
ANR	3151023	PtrMemberAccess	enc -> minBytesPerChar		3150823	1					
ANR	3151024	Identifier	enc		3150823	0					
ANR	3151025	Identifier	minBytesPerChar		3150823	1					
ANR	3151026	IfStatement	if ( ptr == * namePtr )		3150823	8					
ANR	3151027	Condition	ptr == * namePtr	1173:6:29981:29995	3150823	0	True				
ANR	3151028	EqualityExpression	ptr == * namePtr		3150823	0		==			
ANR	3151029	Identifier	ptr		3150823	0					
ANR	3151030	UnaryOperationExpression	* namePtr		3150823	1					
ANR	3151031	UnaryOperator	*		3150823	0					
ANR	3151032	Identifier	namePtr		3150823	1					
ANR	3151033	CompoundStatement		43:23:822:822	3150823	1					
ANR	3151034	ExpressionStatement	* nextTokPtr = ptr	1174:4:30004:30021	3150823	0	True				
ANR	3151035	AssignmentExpression	* nextTokPtr = ptr		3150823	0		=			
ANR	3151036	UnaryOperationExpression	* nextTokPtr		3150823	0					
ANR	3151037	UnaryOperator	*		3150823	0					
ANR	3151038	Identifier	nextTokPtr		3150823	1					
ANR	3151039	Identifier	ptr		3150823	1					
ANR	3151040	ReturnStatement	return 0 ;	1175:4:30027:30035	3150823	1	True				
ANR	3151041	PrimaryExpression	0		3150823	0					
ANR	3151042	ExpressionStatement	ptr += enc -> minBytesPerChar	1177:2:30043:30070	3150823	9	True				
ANR	3151043	AssignmentExpression	ptr += enc -> minBytesPerChar		3150823	0		+=			
ANR	3151044	Identifier	ptr		3150823	0					
ANR	3151045	PtrMemberAccess	enc -> minBytesPerChar		3150823	1					
ANR	3151046	Identifier	enc		3150823	0					
ANR	3151047	Identifier	minBytesPerChar		3150823	1					
ANR	3151048	ExpressionStatement	"c = toAscii ( enc , ptr , end )"	1178:2:30074:30100	3150823	10	True				
ANR	3151049	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		3150823	0		=			
ANR	3151050	Identifier	c		3150823	0					
ANR	3151051	CallExpression	"toAscii ( enc , ptr , end )"		3150823	1					
ANR	3151052	Callee	toAscii		3150823	0					
ANR	3151053	Identifier	toAscii		3150823	0					
ANR	3151054	ArgumentList	enc		3150823	1					
ANR	3151055	Argument	enc		3150823	0					
ANR	3151056	Identifier	enc		3150823	0					
ANR	3151057	Argument	ptr		3150823	1					
ANR	3151058	Identifier	ptr		3150823	0					
ANR	3151059	Argument	end		3150823	2					
ANR	3151060	Identifier	end		3150823	0					
ANR	3151061	WhileStatement	while ( isSpace ( c ) )		3150823	11					
ANR	3151062	Condition	isSpace ( c )	1179:9:30111:30120	3150823	0	True				
ANR	3151063	CallExpression	isSpace ( c )		3150823	0					
ANR	3151064	Callee	isSpace		3150823	0					
ANR	3151065	Identifier	isSpace		3150823	0					
ANR	3151066	ArgumentList	c		3150823	1					
ANR	3151067	Argument	c		3150823	0					
ANR	3151068	Identifier	c		3150823	0					
ANR	3151069	CompoundStatement		49:21:947:947	3150823	1					
ANR	3151070	ExpressionStatement	ptr += enc -> minBytesPerChar	1180:4:30129:30156	3150823	0	True				
ANR	3151071	AssignmentExpression	ptr += enc -> minBytesPerChar		3150823	0		+=			
ANR	3151072	Identifier	ptr		3150823	0					
ANR	3151073	PtrMemberAccess	enc -> minBytesPerChar		3150823	1					
ANR	3151074	Identifier	enc		3150823	0					
ANR	3151075	Identifier	minBytesPerChar		3150823	1					
ANR	3151076	ExpressionStatement	"c = toAscii ( enc , ptr , end )"	1181:4:30162:30188	3150823	1	True				
ANR	3151077	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		3150823	0		=			
ANR	3151078	Identifier	c		3150823	0					
ANR	3151079	CallExpression	"toAscii ( enc , ptr , end )"		3150823	1					
ANR	3151080	Callee	toAscii		3150823	0					
ANR	3151081	Identifier	toAscii		3150823	0					
ANR	3151082	ArgumentList	enc		3150823	1					
ANR	3151083	Argument	enc		3150823	0					
ANR	3151084	Identifier	enc		3150823	0					
ANR	3151085	Argument	ptr		3150823	1					
ANR	3151086	Identifier	ptr		3150823	0					
ANR	3151087	Argument	end		3150823	2					
ANR	3151088	Identifier	end		3150823	0					
ANR	3151089	IfStatement	if ( c != ASCII_QUOT && c != ASCII_APOS )		3150823	12					
ANR	3151090	Condition	c != ASCII_QUOT && c != ASCII_APOS	1183:6:30200:30233	3150823	0	True				
ANR	3151091	AndExpression	c != ASCII_QUOT && c != ASCII_APOS		3150823	0		&&			
ANR	3151092	EqualityExpression	c != ASCII_QUOT		3150823	0		!=			
ANR	3151093	Identifier	c		3150823	0					
ANR	3151094	Identifier	ASCII_QUOT		3150823	1					
ANR	3151095	EqualityExpression	c != ASCII_APOS		3150823	1		!=			
ANR	3151096	Identifier	c		3150823	0					
ANR	3151097	Identifier	ASCII_APOS		3150823	1					
ANR	3151098	CompoundStatement		53:42:1060:1060	3150823	1					
ANR	3151099	ExpressionStatement	* nextTokPtr = ptr	1184:4:30242:30259	3150823	0	True				
ANR	3151100	AssignmentExpression	* nextTokPtr = ptr		3150823	0		=			
ANR	3151101	UnaryOperationExpression	* nextTokPtr		3150823	0					
ANR	3151102	UnaryOperator	*		3150823	0					
ANR	3151103	Identifier	nextTokPtr		3150823	1					
ANR	3151104	Identifier	ptr		3150823	1					
ANR	3151105	ReturnStatement	return 0 ;	1185:4:30265:30273	3150823	1	True				
ANR	3151106	PrimaryExpression	0		3150823	0					
ANR	3151107	ExpressionStatement	open = ( char ) c	1187:2:30281:30295	3150823	13	True				
ANR	3151108	AssignmentExpression	open = ( char ) c		3150823	0		=			
ANR	3151109	Identifier	open		3150823	0					
ANR	3151110	CastExpression	( char ) c		3150823	1					
ANR	3151111	CastTarget	char		3150823	0					
ANR	3151112	Identifier	c		3150823	1					
ANR	3151113	ExpressionStatement	ptr += enc -> minBytesPerChar	1188:2:30299:30326	3150823	14	True				
ANR	3151114	AssignmentExpression	ptr += enc -> minBytesPerChar		3150823	0		+=			
ANR	3151115	Identifier	ptr		3150823	0					
ANR	3151116	PtrMemberAccess	enc -> minBytesPerChar		3150823	1					
ANR	3151117	Identifier	enc		3150823	0					
ANR	3151118	Identifier	minBytesPerChar		3150823	1					
ANR	3151119	ExpressionStatement	* valPtr = ptr	1189:2:30330:30343	3150823	15	True				
ANR	3151120	AssignmentExpression	* valPtr = ptr		3150823	0		=			
ANR	3151121	UnaryOperationExpression	* valPtr		3150823	0					
ANR	3151122	UnaryOperator	*		3150823	0					
ANR	3151123	Identifier	valPtr		3150823	1					
ANR	3151124	Identifier	ptr		3150823	1					
ANR	3151125	ForStatement	for ( ; ; ptr += enc -> minBytesPerChar )		3150823	16					
ANR	3151126	AssignmentExpression	ptr += enc -> minBytesPerChar	1190:10:30355:30381	3150823	0	True	+=			
ANR	3151127	Identifier	ptr		3150823	0					
ANR	3151128	PtrMemberAccess	enc -> minBytesPerChar		3150823	1					
ANR	3151129	Identifier	enc		3150823	0					
ANR	3151130	Identifier	minBytesPerChar		3150823	1					
ANR	3151131	CompoundStatement		60:39:1208:1208	3150823	1					
ANR	3151132	ExpressionStatement	"c = toAscii ( enc , ptr , end )"	1191:4:30390:30416	3150823	0	True				
ANR	3151133	AssignmentExpression	"c = toAscii ( enc , ptr , end )"		3150823	0		=			
ANR	3151134	Identifier	c		3150823	0					
ANR	3151135	CallExpression	"toAscii ( enc , ptr , end )"		3150823	1					
ANR	3151136	Callee	toAscii		3150823	0					
ANR	3151137	Identifier	toAscii		3150823	0					
ANR	3151138	ArgumentList	enc		3150823	1					
ANR	3151139	Argument	enc		3150823	0					
ANR	3151140	Identifier	enc		3150823	0					
ANR	3151141	Argument	ptr		3150823	1					
ANR	3151142	Identifier	ptr		3150823	0					
ANR	3151143	Argument	end		3150823	2					
ANR	3151144	Identifier	end		3150823	0					
ANR	3151145	IfStatement	if ( c == open )		3150823	1					
ANR	3151146	Condition	c == open	1192:8:30426:30434	3150823	0	True				
ANR	3151147	EqualityExpression	c == open		3150823	0		==			
ANR	3151148	Identifier	c		3150823	0					
ANR	3151149	Identifier	open		3150823	1					
ANR	3151150	BreakStatement	break ;	1193:6:30443:30448	3150823	1	True				
ANR	3151151	IfStatement	if ( ! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z ) && ! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE )		3150823	2					
ANR	3151152	Condition	! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z ) && ! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE	1194:8:30458:30664	3150823	0	True				
ANR	3151153	AndExpression	! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z ) && ! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE		3150823	0		&&			
ANR	3151154	UnaryOperationExpression	! ( ASCII_a <= c && c <= ASCII_z )		3150823	0					
ANR	3151155	UnaryOperator	!		3150823	0					
ANR	3151156	AndExpression	ASCII_a <= c && c <= ASCII_z		3150823	1		&&			
ANR	3151157	RelationalExpression	ASCII_a <= c		3150823	0		<=			
ANR	3151158	Identifier	ASCII_a		3150823	0					
ANR	3151159	Identifier	c		3150823	1					
ANR	3151160	RelationalExpression	c <= ASCII_z		3150823	1		<=			
ANR	3151161	Identifier	c		3150823	0					
ANR	3151162	Identifier	ASCII_z		3150823	1					
ANR	3151163	AndExpression	! ( ASCII_A <= c && c <= ASCII_Z ) && ! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE		3150823	1		&&			
ANR	3151164	UnaryOperationExpression	! ( ASCII_A <= c && c <= ASCII_Z )		3150823	0					
ANR	3151165	UnaryOperator	!		3150823	0					
ANR	3151166	AndExpression	ASCII_A <= c && c <= ASCII_Z		3150823	1		&&			
ANR	3151167	RelationalExpression	ASCII_A <= c		3150823	0		<=			
ANR	3151168	Identifier	ASCII_A		3150823	0					
ANR	3151169	Identifier	c		3150823	1					
ANR	3151170	RelationalExpression	c <= ASCII_Z		3150823	1		<=			
ANR	3151171	Identifier	c		3150823	0					
ANR	3151172	Identifier	ASCII_Z		3150823	1					
ANR	3151173	AndExpression	! ( ASCII_0 <= c && c <= ASCII_9 ) && c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE		3150823	1		&&			
ANR	3151174	UnaryOperationExpression	! ( ASCII_0 <= c && c <= ASCII_9 )		3150823	0					
ANR	3151175	UnaryOperator	!		3150823	0					
ANR	3151176	AndExpression	ASCII_0 <= c && c <= ASCII_9		3150823	1		&&			
ANR	3151177	RelationalExpression	ASCII_0 <= c		3150823	0		<=			
ANR	3151178	Identifier	ASCII_0		3150823	0					
ANR	3151179	Identifier	c		3150823	1					
ANR	3151180	RelationalExpression	c <= ASCII_9		3150823	1		<=			
ANR	3151181	Identifier	c		3150823	0					
ANR	3151182	Identifier	ASCII_9		3150823	1					
ANR	3151183	AndExpression	c != ASCII_PERIOD && c != ASCII_MINUS && c != ASCII_UNDERSCORE		3150823	1		&&			
ANR	3151184	EqualityExpression	c != ASCII_PERIOD		3150823	0		!=			
ANR	3151185	Identifier	c		3150823	0					
ANR	3151186	Identifier	ASCII_PERIOD		3150823	1					
ANR	3151187	AndExpression	c != ASCII_MINUS && c != ASCII_UNDERSCORE		3150823	1		&&			
ANR	3151188	EqualityExpression	c != ASCII_MINUS		3150823	0		!=			
ANR	3151189	Identifier	c		3150823	0					
ANR	3151190	Identifier	ASCII_MINUS		3150823	1					
ANR	3151191	EqualityExpression	c != ASCII_UNDERSCORE		3150823	1		!=			
ANR	3151192	Identifier	c		3150823	0					
ANR	3151193	Identifier	ASCII_UNDERSCORE		3150823	1					
ANR	3151194	CompoundStatement		69:34:1491:1491	3150823	1					
ANR	3151195	ExpressionStatement	* nextTokPtr = ptr	1200:6:30675:30692	3150823	0	True				
ANR	3151196	AssignmentExpression	* nextTokPtr = ptr		3150823	0		=			
ANR	3151197	UnaryOperationExpression	* nextTokPtr		3150823	0					
ANR	3151198	UnaryOperator	*		3150823	0					
ANR	3151199	Identifier	nextTokPtr		3150823	1					
ANR	3151200	Identifier	ptr		3150823	1					
ANR	3151201	ReturnStatement	return 0 ;	1201:6:30700:30708	3150823	1	True				
ANR	3151202	PrimaryExpression	0		3150823	0					
ANR	3151203	ExpressionStatement	* nextTokPtr = ptr + enc -> minBytesPerChar	1204:2:30722:30762	3150823	17	True				
ANR	3151204	AssignmentExpression	* nextTokPtr = ptr + enc -> minBytesPerChar		3150823	0		=			
ANR	3151205	UnaryOperationExpression	* nextTokPtr		3150823	0					
ANR	3151206	UnaryOperator	*		3150823	0					
ANR	3151207	Identifier	nextTokPtr		3150823	1					
ANR	3151208	AdditiveExpression	ptr + enc -> minBytesPerChar		3150823	1		+			
ANR	3151209	Identifier	ptr		3150823	0					
ANR	3151210	PtrMemberAccess	enc -> minBytesPerChar		3150823	1					
ANR	3151211	Identifier	enc		3150823	0					
ANR	3151212	Identifier	minBytesPerChar		3150823	1					
ANR	3151213	ReturnStatement	return 1 ;	1205:2:30766:30774	3150823	18	True				
ANR	3151214	PrimaryExpression	1		3150823	0					
ANR	3151215	ReturnType	static int		3150823	1					
ANR	3151216	Identifier	parsePseudoAttribute		3150823	2					
ANR	3151217	ParameterList	"const ENCODING * enc , const char * ptr , const char * end , const char * * namePtr , const char * * nameEndPtr , const char * * valPtr , const char * * nextTokPtr"		3150823	3					
ANR	3151218	Parameter	const ENCODING * enc	1124:21:28901:28919	3150823	0	True				
ANR	3151219	ParameterType	const ENCODING *		3150823	0					
ANR	3151220	Identifier	enc		3150823	1					
ANR	3151221	Parameter	const char * ptr	1125:21:28943:28957	3150823	1	True				
ANR	3151222	ParameterType	const char *		3150823	0					
ANR	3151223	Identifier	ptr		3150823	1					
ANR	3151224	Parameter	const char * end	1126:21:28981:28995	3150823	2	True				
ANR	3151225	ParameterType	const char *		3150823	0					
ANR	3151226	Identifier	end		3150823	1					
ANR	3151227	Parameter	const char * * namePtr	1127:21:29019:29038	3150823	3	True				
ANR	3151228	ParameterType	const char * *		3150823	0					
ANR	3151229	Identifier	namePtr		3150823	1					
ANR	3151230	Parameter	const char * * nameEndPtr	1128:21:29062:29084	3150823	4	True				
ANR	3151231	ParameterType	const char * *		3150823	0					
ANR	3151232	Identifier	nameEndPtr		3150823	1					
ANR	3151233	Parameter	const char * * valPtr	1129:21:29108:29126	3150823	5	True				
ANR	3151234	ParameterType	const char * *		3150823	0					
ANR	3151235	Identifier	valPtr		3150823	1					
ANR	3151236	Parameter	const char * * nextTokPtr	1130:21:29150:29172	3150823	6	True				
ANR	3151237	ParameterType	const char * *		3150823	0					
ANR	3151238	Identifier	nextTokPtr		3150823	1					
ANR	3151239	CFGEntryNode	ENTRY		3150823		True				
ANR	3151240	CFGExitNode	EXIT		3150823		True				
ANR	3151241	InfiniteForNode	true		3150823		True				
ANR	3151242	InfiniteForNode	true		3150823		True				
ANR	3151243	Symbol	namePtr		3150823						
ANR	3151244	Symbol	nextTokPtr		3150823						
ANR	3151245	Symbol	ASCII_9		3150823						
ANR	3151246	Symbol	ASCII_z		3150823						
ANR	3151247	Symbol	* nextTokPtr		3150823						
ANR	3151248	Symbol	ASCII_QUOT		3150823						
ANR	3151249	Symbol	ASCII_0		3150823						
ANR	3151250	Symbol	isSpace		3150823						
ANR	3151251	Symbol	toAscii		3150823						
ANR	3151252	Symbol	nameEndPtr		3150823						
ANR	3151253	Symbol	ASCII_PERIOD		3150823						
ANR	3151254	Symbol	end		3150823						
ANR	3151255	Symbol	ASCII_A		3150823						
ANR	3151256	Symbol	enc		3150823						
ANR	3151257	Symbol	* nameEndPtr		3150823						
ANR	3151258	Symbol	ASCII_UNDERSCORE		3150823						
ANR	3151259	Symbol	* valPtr		3150823						
ANR	3151260	Symbol	ASCII_MINUS		3150823						
ANR	3151261	Symbol	c		3150823						
ANR	3151262	Symbol	NULL		3150823						
ANR	3151263	Symbol	ASCII_Z		3150823						
ANR	3151264	Symbol	valPtr		3150823						
ANR	3151265	Symbol	enc -> minBytesPerChar		3150823						
ANR	3151266	Symbol	ptr		3150823						
ANR	3151267	Symbol	* namePtr		3150823						
ANR	3151268	Symbol	ASCII_EQUALS		3150823						
ANR	3151269	Symbol	ASCII_APOS		3150823						
ANR	3151270	Symbol	ASCII_a		3150823						
ANR	3151271	Symbol	* enc		3150823						
ANR	3151272	Symbol	open		3150823						
ANR	3151273	DeclStmt									
ANR	3151274	Decl							const char	const char [ ]	KW_version
ANR	3151275	DeclStmt									
ANR	3151276	Decl							const char	const char [ ]	KW_encoding
ANR	3151277	DeclStmt									
ANR	3151278	Decl							const char	const char [ ]	KW_standalone
ANR	3151279	DeclStmt									
ANR	3151280	Decl							const char	const char [ ]	KW_yes
ANR	3151281	DeclStmt									
ANR	3151282	Decl							const char	const char [ ]	KW_no
ANR	3151283	Function	doParseXmlDecl	1229:0:31278:33766							
ANR	3151284	FunctionDef	"doParseXmlDecl (const ENCODING * ( * encodingFinder ) ( const ENCODING * , const char * , const char * ) , int isGeneralTextEntity , const ENCODING * enc , const char * ptr , const char * end , const char * * badPtr , const char * * versionPtr , const char * * versionEndPtr , const char * * encodingName , const ENCODING * * encoding , int * standalone)"		3151283	0					
ANR	3151285	CompoundStatement		1243:0:31858:33766	3151283	0					
ANR	3151286	IdentifierDeclStatement	const char * val = NULL ;	1244:2:31862:31884	3151283	0	True				
ANR	3151287	IdentifierDecl	* val = NULL		3151283	0					
ANR	3151288	IdentifierDeclType	const char *		3151283	0					
ANR	3151289	Identifier	val		3151283	1					
ANR	3151290	AssignmentExpression	* val = NULL		3151283	2		=			
ANR	3151291	Identifier	NULL		3151283	0					
ANR	3151292	Identifier	NULL		3151283	1					
ANR	3151293	IdentifierDeclStatement	const char * name = NULL ;	1245:2:31888:31911	3151283	1	True				
ANR	3151294	IdentifierDecl	* name = NULL		3151283	0					
ANR	3151295	IdentifierDeclType	const char *		3151283	0					
ANR	3151296	Identifier	name		3151283	1					
ANR	3151297	AssignmentExpression	* name = NULL		3151283	2		=			
ANR	3151298	Identifier	NULL		3151283	0					
ANR	3151299	Identifier	NULL		3151283	1					
ANR	3151300	IdentifierDeclStatement	const char * nameEnd = NULL ;	1246:2:31915:31941	3151283	2	True				
ANR	3151301	IdentifierDecl	* nameEnd = NULL		3151283	0					
ANR	3151302	IdentifierDeclType	const char *		3151283	0					
ANR	3151303	Identifier	nameEnd		3151283	1					
ANR	3151304	AssignmentExpression	* nameEnd = NULL		3151283	2		=			
ANR	3151305	Identifier	NULL		3151283	0					
ANR	3151306	Identifier	NULL		3151283	1					
ANR	3151307	ExpressionStatement	ptr += 5 * enc -> minBytesPerChar	1247:2:31945:31976	3151283	3	True				
ANR	3151308	AssignmentExpression	ptr += 5 * enc -> minBytesPerChar		3151283	0		+=			
ANR	3151309	Identifier	ptr		3151283	0					
ANR	3151310	MultiplicativeExpression	5 * enc -> minBytesPerChar		3151283	1		*			
ANR	3151311	PrimaryExpression	5		3151283	0					
ANR	3151312	PtrMemberAccess	enc -> minBytesPerChar		3151283	1					
ANR	3151313	Identifier	enc		3151283	0					
ANR	3151314	Identifier	minBytesPerChar		3151283	1					
ANR	3151315	ExpressionStatement	end -= 2 * enc -> minBytesPerChar	1248:2:31980:32011	3151283	4	True				
ANR	3151316	AssignmentExpression	end -= 2 * enc -> minBytesPerChar		3151283	0		-=			
ANR	3151317	Identifier	end		3151283	0					
ANR	3151318	MultiplicativeExpression	2 * enc -> minBytesPerChar		3151283	1		*			
ANR	3151319	PrimaryExpression	2		3151283	0					
ANR	3151320	PtrMemberAccess	enc -> minBytesPerChar		3151283	1					
ANR	3151321	Identifier	enc		3151283	0					
ANR	3151322	Identifier	minBytesPerChar		3151283	1					
ANR	3151323	IfStatement	"if ( ! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) || ! name )"		3151283	5					
ANR	3151324	Condition	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) || ! name"	1249:6:32019:32098	3151283	0	True				
ANR	3151325	OrExpression	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) || ! name"		3151283	0		||			
ANR	3151326	UnaryOperationExpression	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		3151283	0					
ANR	3151327	UnaryOperator	!		3151283	0					
ANR	3151328	CallExpression	"parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		3151283	1					
ANR	3151329	Callee	parsePseudoAttribute		3151283	0					
ANR	3151330	Identifier	parsePseudoAttribute		3151283	0					
ANR	3151331	ArgumentList	enc		3151283	1					
ANR	3151332	Argument	enc		3151283	0					
ANR	3151333	Identifier	enc		3151283	0					
ANR	3151334	Argument	ptr		3151283	1					
ANR	3151335	Identifier	ptr		3151283	0					
ANR	3151336	Argument	end		3151283	2					
ANR	3151337	Identifier	end		3151283	0					
ANR	3151338	Argument	& name		3151283	3					
ANR	3151339	UnaryOperationExpression	& name		3151283	0					
ANR	3151340	UnaryOperator	&		3151283	0					
ANR	3151341	Identifier	name		3151283	1					
ANR	3151342	Argument	& nameEnd		3151283	4					
ANR	3151343	UnaryOperationExpression	& nameEnd		3151283	0					
ANR	3151344	UnaryOperator	&		3151283	0					
ANR	3151345	Identifier	nameEnd		3151283	1					
ANR	3151346	Argument	& val		3151283	5					
ANR	3151347	UnaryOperationExpression	& val		3151283	0					
ANR	3151348	UnaryOperator	&		3151283	0					
ANR	3151349	Identifier	val		3151283	1					
ANR	3151350	Argument	& ptr		3151283	6					
ANR	3151351	UnaryOperationExpression	& ptr		3151283	0					
ANR	3151352	UnaryOperator	&		3151283	0					
ANR	3151353	Identifier	ptr		3151283	1					
ANR	3151354	UnaryOperationExpression	! name		3151283	1					
ANR	3151355	UnaryOperator	!		3151283	0					
ANR	3151356	Identifier	name		3151283	1					
ANR	3151357	CompoundStatement		8:16:242:242	3151283	1					
ANR	3151358	ExpressionStatement	* badPtr = ptr	1251:4:32107:32120	3151283	0	True				
ANR	3151359	AssignmentExpression	* badPtr = ptr		3151283	0		=			
ANR	3151360	UnaryOperationExpression	* badPtr		3151283	0					
ANR	3151361	UnaryOperator	*		3151283	0					
ANR	3151362	Identifier	badPtr		3151283	1					
ANR	3151363	Identifier	ptr		3151283	1					
ANR	3151364	ReturnStatement	return 0 ;	1252:4:32126:32134	3151283	1	True				
ANR	3151365	PrimaryExpression	0		3151283	0					
ANR	3151366	IfStatement	"if ( ! XmlNameMatchesAscii ( enc , name , nameEnd , KW_version ) )"		3151283	6					
ANR	3151367	Condition	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_version )"	1254:6:32146:32197	3151283	0	True				
ANR	3151368	UnaryOperationExpression	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_version )"		3151283	0					
ANR	3151369	UnaryOperator	!		3151283	0					
ANR	3151370	CallExpression	"XmlNameMatchesAscii ( enc , name , nameEnd , KW_version )"		3151283	1					
ANR	3151371	Callee	XmlNameMatchesAscii		3151283	0					
ANR	3151372	Identifier	XmlNameMatchesAscii		3151283	0					
ANR	3151373	ArgumentList	enc		3151283	1					
ANR	3151374	Argument	enc		3151283	0					
ANR	3151375	Identifier	enc		3151283	0					
ANR	3151376	Argument	name		3151283	1					
ANR	3151377	Identifier	name		3151283	0					
ANR	3151378	Argument	nameEnd		3151283	2					
ANR	3151379	Identifier	nameEnd		3151283	0					
ANR	3151380	Argument	KW_version		3151283	3					
ANR	3151381	Identifier	KW_version		3151283	0					
ANR	3151382	CompoundStatement		12:60:341:341	3151283	1					
ANR	3151383	IfStatement	if ( ! isGeneralTextEntity )		3151283	0					
ANR	3151384	Condition	! isGeneralTextEntity	1255:8:32210:32229	3151283	0	True				
ANR	3151385	UnaryOperationExpression	! isGeneralTextEntity		3151283	0					
ANR	3151386	UnaryOperator	!		3151283	0					
ANR	3151387	Identifier	isGeneralTextEntity		3151283	1					
ANR	3151388	CompoundStatement		13:30:373:373	3151283	1					
ANR	3151389	ExpressionStatement	* badPtr = name	1256:6:32240:32254	3151283	0	True				
ANR	3151390	AssignmentExpression	* badPtr = name		3151283	0		=			
ANR	3151391	UnaryOperationExpression	* badPtr		3151283	0					
ANR	3151392	UnaryOperator	*		3151283	0					
ANR	3151393	Identifier	badPtr		3151283	1					
ANR	3151394	Identifier	name		3151283	1					
ANR	3151395	ReturnStatement	return 0 ;	1257:6:32262:32270	3151283	1	True				
ANR	3151396	PrimaryExpression	0		3151283	0					
ANR	3151397	ElseStatement	else		3151283	0					
ANR	3151398	CompoundStatement		18:7:430:430	3151283	0					
ANR	3151399	IfStatement	if ( versionPtr )		3151283	0					
ANR	3151400	Condition	versionPtr	1261:8:32299:32308	3151283	0	True				
ANR	3151401	Identifier	versionPtr		3151283	0					
ANR	3151402	ExpressionStatement	* versionPtr = val	1262:6:32317:32334	3151283	1	True				
ANR	3151403	AssignmentExpression	* versionPtr = val		3151283	0		=			
ANR	3151404	UnaryOperationExpression	* versionPtr		3151283	0					
ANR	3151405	UnaryOperator	*		3151283	0					
ANR	3151406	Identifier	versionPtr		3151283	1					
ANR	3151407	Identifier	val		3151283	1					
ANR	3151408	IfStatement	if ( versionEndPtr )		3151283	1					
ANR	3151409	Condition	versionEndPtr	1263:8:32344:32356	3151283	0	True				
ANR	3151410	Identifier	versionEndPtr		3151283	0					
ANR	3151411	ExpressionStatement	* versionEndPtr = ptr	1264:6:32365:32385	3151283	1	True				
ANR	3151412	AssignmentExpression	* versionEndPtr = ptr		3151283	0		=			
ANR	3151413	UnaryOperationExpression	* versionEndPtr		3151283	0					
ANR	3151414	UnaryOperator	*		3151283	0					
ANR	3151415	Identifier	versionEndPtr		3151283	1					
ANR	3151416	Identifier	ptr		3151283	1					
ANR	3151417	IfStatement	"if ( ! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) )"		3151283	2					
ANR	3151418	Condition	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"	1265:8:32395:32459	3151283	0	True				
ANR	3151419	UnaryOperationExpression	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		3151283	0					
ANR	3151420	UnaryOperator	!		3151283	0					
ANR	3151421	CallExpression	"parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		3151283	1					
ANR	3151422	Callee	parsePseudoAttribute		3151283	0					
ANR	3151423	Identifier	parsePseudoAttribute		3151283	0					
ANR	3151424	ArgumentList	enc		3151283	1					
ANR	3151425	Argument	enc		3151283	0					
ANR	3151426	Identifier	enc		3151283	0					
ANR	3151427	Argument	ptr		3151283	1					
ANR	3151428	Identifier	ptr		3151283	0					
ANR	3151429	Argument	end		3151283	2					
ANR	3151430	Identifier	end		3151283	0					
ANR	3151431	Argument	& name		3151283	3					
ANR	3151432	UnaryOperationExpression	& name		3151283	0					
ANR	3151433	UnaryOperator	&		3151283	0					
ANR	3151434	Identifier	name		3151283	1					
ANR	3151435	Argument	& nameEnd		3151283	4					
ANR	3151436	UnaryOperationExpression	& nameEnd		3151283	0					
ANR	3151437	UnaryOperator	&		3151283	0					
ANR	3151438	Identifier	nameEnd		3151283	1					
ANR	3151439	Argument	& val		3151283	5					
ANR	3151440	UnaryOperationExpression	& val		3151283	0					
ANR	3151441	UnaryOperator	&		3151283	0					
ANR	3151442	Identifier	val		3151283	1					
ANR	3151443	Argument	& ptr		3151283	6					
ANR	3151444	UnaryOperationExpression	& ptr		3151283	0					
ANR	3151445	UnaryOperator	&		3151283	0					
ANR	3151446	Identifier	ptr		3151283	1					
ANR	3151447	CompoundStatement		23:75:603:603	3151283	1					
ANR	3151448	ExpressionStatement	* badPtr = ptr	1266:6:32470:32483	3151283	0	True				
ANR	3151449	AssignmentExpression	* badPtr = ptr		3151283	0		=			
ANR	3151450	UnaryOperationExpression	* badPtr		3151283	0					
ANR	3151451	UnaryOperator	*		3151283	0					
ANR	3151452	Identifier	badPtr		3151283	1					
ANR	3151453	Identifier	ptr		3151283	1					
ANR	3151454	ReturnStatement	return 0 ;	1267:6:32491:32499	3151283	1	True				
ANR	3151455	PrimaryExpression	0		3151283	0					
ANR	3151456	IfStatement	if ( ! name )		3151283	3					
ANR	3151457	Condition	! name	1269:8:32515:32519	3151283	0	True				
ANR	3151458	UnaryOperationExpression	! name		3151283	0					
ANR	3151459	UnaryOperator	!		3151283	0					
ANR	3151460	Identifier	name		3151283	1					
ANR	3151461	CompoundStatement		27:15:663:663	3151283	1					
ANR	3151462	IfStatement	if ( isGeneralTextEntity )		3151283	0					
ANR	3151463	Condition	isGeneralTextEntity	1270:10:32534:32552	3151283	0	True				
ANR	3151464	Identifier	isGeneralTextEntity		3151283	0					
ANR	3151465	CompoundStatement		28:31:696:696	3151283	1					
ANR	3151466	ExpressionStatement	* badPtr = ptr	1272:8:32616:32629	3151283	0	True				
ANR	3151467	AssignmentExpression	* badPtr = ptr		3151283	0		=			
ANR	3151468	UnaryOperationExpression	* badPtr		3151283	0					
ANR	3151469	UnaryOperator	*		3151283	0					
ANR	3151470	Identifier	badPtr		3151283	1					
ANR	3151471	Identifier	ptr		3151283	1					
ANR	3151472	ReturnStatement	return 0 ;	1273:8:32639:32647	3151283	1	True				
ANR	3151473	PrimaryExpression	0		3151283	0					
ANR	3151474	ReturnStatement	return 1 ;	1275:6:32663:32671	3151283	1	True				
ANR	3151475	PrimaryExpression	1		3151283	0					
ANR	3151476	IfStatement	"if ( XmlNameMatchesAscii ( enc , name , nameEnd , KW_encoding ) )"		3151283	7					
ANR	3151477	Condition	"XmlNameMatchesAscii ( enc , name , nameEnd , KW_encoding )"	1278:6:32689:32740	3151283	0	True				
ANR	3151478	CallExpression	"XmlNameMatchesAscii ( enc , name , nameEnd , KW_encoding )"		3151283	0					
ANR	3151479	Callee	XmlNameMatchesAscii		3151283	0					
ANR	3151480	Identifier	XmlNameMatchesAscii		3151283	0					
ANR	3151481	ArgumentList	enc		3151283	1					
ANR	3151482	Argument	enc		3151283	0					
ANR	3151483	Identifier	enc		3151283	0					
ANR	3151484	Argument	name		3151283	1					
ANR	3151485	Identifier	name		3151283	0					
ANR	3151486	Argument	nameEnd		3151283	2					
ANR	3151487	Identifier	nameEnd		3151283	0					
ANR	3151488	Argument	KW_encoding		3151283	3					
ANR	3151489	Identifier	KW_encoding		3151283	0					
ANR	3151490	CompoundStatement		37:4:890:920	3151283	1					
ANR	3151491	IdentifierDeclStatement	"int c = toAscii ( enc , val , end ) ;"	1279:4:32749:32779	3151283	0	True				
ANR	3151492	IdentifierDecl	"c = toAscii ( enc , val , end )"		3151283	0					
ANR	3151493	IdentifierDeclType	int		3151283	0					
ANR	3151494	Identifier	c		3151283	1					
ANR	3151495	AssignmentExpression	"c = toAscii ( enc , val , end )"		3151283	2		=			
ANR	3151496	Identifier	c		3151283	0					
ANR	3151497	CallExpression	"toAscii ( enc , val , end )"		3151283	1					
ANR	3151498	Callee	toAscii		3151283	0					
ANR	3151499	Identifier	toAscii		3151283	0					
ANR	3151500	ArgumentList	enc		3151283	1					
ANR	3151501	Argument	enc		3151283	0					
ANR	3151502	Identifier	enc		3151283	0					
ANR	3151503	Argument	val		3151283	1					
ANR	3151504	Identifier	val		3151283	0					
ANR	3151505	Argument	end		3151283	2					
ANR	3151506	Identifier	end		3151283	0					
ANR	3151507	IfStatement	if ( ! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z ) )		3151283	1					
ANR	3151508	Condition	! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z )	1280:8:32789:32854	3151283	0	True				
ANR	3151509	AndExpression	! ( ASCII_a <= c && c <= ASCII_z ) && ! ( ASCII_A <= c && c <= ASCII_Z )		3151283	0		&&			
ANR	3151510	UnaryOperationExpression	! ( ASCII_a <= c && c <= ASCII_z )		3151283	0					
ANR	3151511	UnaryOperator	!		3151283	0					
ANR	3151512	AndExpression	ASCII_a <= c && c <= ASCII_z		3151283	1		&&			
ANR	3151513	RelationalExpression	ASCII_a <= c		3151283	0		<=			
ANR	3151514	Identifier	ASCII_a		3151283	0					
ANR	3151515	Identifier	c		3151283	1					
ANR	3151516	RelationalExpression	c <= ASCII_z		3151283	1		<=			
ANR	3151517	Identifier	c		3151283	0					
ANR	3151518	Identifier	ASCII_z		3151283	1					
ANR	3151519	UnaryOperationExpression	! ( ASCII_A <= c && c <= ASCII_Z )		3151283	1					
ANR	3151520	UnaryOperator	!		3151283	0					
ANR	3151521	AndExpression	ASCII_A <= c && c <= ASCII_Z		3151283	1		&&			
ANR	3151522	RelationalExpression	ASCII_A <= c		3151283	0		<=			
ANR	3151523	Identifier	ASCII_A		3151283	0					
ANR	3151524	Identifier	c		3151283	1					
ANR	3151525	RelationalExpression	c <= ASCII_Z		3151283	1		<=			
ANR	3151526	Identifier	c		3151283	0					
ANR	3151527	Identifier	ASCII_Z		3151283	1					
ANR	3151528	CompoundStatement		38:76:998:998	3151283	1					
ANR	3151529	ExpressionStatement	* badPtr = val	1281:6:32865:32878	3151283	0	True				
ANR	3151530	AssignmentExpression	* badPtr = val		3151283	0		=			
ANR	3151531	UnaryOperationExpression	* badPtr		3151283	0					
ANR	3151532	UnaryOperator	*		3151283	0					
ANR	3151533	Identifier	badPtr		3151283	1					
ANR	3151534	Identifier	val		3151283	1					
ANR	3151535	ReturnStatement	return 0 ;	1282:6:32886:32894	3151283	1	True				
ANR	3151536	PrimaryExpression	0		3151283	0					
ANR	3151537	IfStatement	if ( encodingName )		3151283	2					
ANR	3151538	Condition	encodingName	1284:8:32910:32921	3151283	0	True				
ANR	3151539	Identifier	encodingName		3151283	0					
ANR	3151540	ExpressionStatement	* encodingName = val	1285:6:32930:32949	3151283	1	True				
ANR	3151541	AssignmentExpression	* encodingName = val		3151283	0		=			
ANR	3151542	UnaryOperationExpression	* encodingName		3151283	0					
ANR	3151543	UnaryOperator	*		3151283	0					
ANR	3151544	Identifier	encodingName		3151283	1					
ANR	3151545	Identifier	val		3151283	1					
ANR	3151546	IfStatement	if ( encoding )		3151283	3					
ANR	3151547	Condition	encoding	1286:8:32959:32966	3151283	0	True				
ANR	3151548	Identifier	encoding		3151283	0					
ANR	3151549	ExpressionStatement	"* encoding = encodingFinder ( enc , val , ptr - enc -> minBytesPerChar )"	1287:6:32975:33039	3151283	1	True				
ANR	3151550	AssignmentExpression	"* encoding = encodingFinder ( enc , val , ptr - enc -> minBytesPerChar )"		3151283	0		=			
ANR	3151551	UnaryOperationExpression	* encoding		3151283	0					
ANR	3151552	UnaryOperator	*		3151283	0					
ANR	3151553	Identifier	encoding		3151283	1					
ANR	3151554	CallExpression	"encodingFinder ( enc , val , ptr - enc -> minBytesPerChar )"		3151283	1					
ANR	3151555	Callee	encodingFinder		3151283	0					
ANR	3151556	Identifier	encodingFinder		3151283	0					
ANR	3151557	ArgumentList	enc		3151283	1					
ANR	3151558	Argument	enc		3151283	0					
ANR	3151559	Identifier	enc		3151283	0					
ANR	3151560	Argument	val		3151283	1					
ANR	3151561	Identifier	val		3151283	0					
ANR	3151562	Argument	ptr - enc -> minBytesPerChar		3151283	2					
ANR	3151563	AdditiveExpression	ptr - enc -> minBytesPerChar		3151283	0		-			
ANR	3151564	Identifier	ptr		3151283	0					
ANR	3151565	PtrMemberAccess	enc -> minBytesPerChar		3151283	1					
ANR	3151566	Identifier	enc		3151283	0					
ANR	3151567	Identifier	minBytesPerChar		3151283	1					
ANR	3151568	IfStatement	"if ( ! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr ) )"		3151283	4					
ANR	3151569	Condition	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"	1288:8:33049:33113	3151283	0	True				
ANR	3151570	UnaryOperationExpression	"! parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		3151283	0					
ANR	3151571	UnaryOperator	!		3151283	0					
ANR	3151572	CallExpression	"parsePseudoAttribute ( enc , ptr , end , & name , & nameEnd , & val , & ptr )"		3151283	1					
ANR	3151573	Callee	parsePseudoAttribute		3151283	0					
ANR	3151574	Identifier	parsePseudoAttribute		3151283	0					
ANR	3151575	ArgumentList	enc		3151283	1					
ANR	3151576	Argument	enc		3151283	0					
ANR	3151577	Identifier	enc		3151283	0					
ANR	3151578	Argument	ptr		3151283	1					
ANR	3151579	Identifier	ptr		3151283	0					
ANR	3151580	Argument	end		3151283	2					
ANR	3151581	Identifier	end		3151283	0					
ANR	3151582	Argument	& name		3151283	3					
ANR	3151583	UnaryOperationExpression	& name		3151283	0					
ANR	3151584	UnaryOperator	&		3151283	0					
ANR	3151585	Identifier	name		3151283	1					
ANR	3151586	Argument	& nameEnd		3151283	4					
ANR	3151587	UnaryOperationExpression	& nameEnd		3151283	0					
ANR	3151588	UnaryOperator	&		3151283	0					
ANR	3151589	Identifier	nameEnd		3151283	1					
ANR	3151590	Argument	& val		3151283	5					
ANR	3151591	UnaryOperationExpression	& val		3151283	0					
ANR	3151592	UnaryOperator	&		3151283	0					
ANR	3151593	Identifier	val		3151283	1					
ANR	3151594	Argument	& ptr		3151283	6					
ANR	3151595	UnaryOperationExpression	& ptr		3151283	0					
ANR	3151596	UnaryOperator	&		3151283	0					
ANR	3151597	Identifier	ptr		3151283	1					
ANR	3151598	CompoundStatement		46:75:1257:1257	3151283	1					
ANR	3151599	ExpressionStatement	* badPtr = ptr	1289:6:33124:33137	3151283	0	True				
ANR	3151600	AssignmentExpression	* badPtr = ptr		3151283	0		=			
ANR	3151601	UnaryOperationExpression	* badPtr		3151283	0					
ANR	3151602	UnaryOperator	*		3151283	0					
ANR	3151603	Identifier	badPtr		3151283	1					
ANR	3151604	Identifier	ptr		3151283	1					
ANR	3151605	ReturnStatement	return 0 ;	1290:6:33145:33153	3151283	1	True				
ANR	3151606	PrimaryExpression	0		3151283	0					
ANR	3151607	IfStatement	if ( ! name )		3151283	5					
ANR	3151608	Condition	! name	1292:8:33169:33173	3151283	0	True				
ANR	3151609	UnaryOperationExpression	! name		3151283	0					
ANR	3151610	UnaryOperator	!		3151283	0					
ANR	3151611	Identifier	name		3151283	1					
ANR	3151612	ReturnStatement	return 1 ;	1293:6:33182:33190	3151283	1	True				
ANR	3151613	PrimaryExpression	1		3151283	0					
ANR	3151614	IfStatement	"if ( ! XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone ) || isGeneralTextEntity )"		3151283	8					
ANR	3151615	Condition	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone ) || isGeneralTextEntity"	1295:6:33202:33285	3151283	0	True				
ANR	3151616	OrExpression	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone ) || isGeneralTextEntity"		3151283	0		||			
ANR	3151617	UnaryOperationExpression	"! XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone )"		3151283	0					
ANR	3151618	UnaryOperator	!		3151283	0					
ANR	3151619	CallExpression	"XmlNameMatchesAscii ( enc , name , nameEnd , KW_standalone )"		3151283	1					
ANR	3151620	Callee	XmlNameMatchesAscii		3151283	0					
ANR	3151621	Identifier	XmlNameMatchesAscii		3151283	0					
ANR	3151622	ArgumentList	enc		3151283	1					
ANR	3151623	Argument	enc		3151283	0					
ANR	3151624	Identifier	enc		3151283	0					
ANR	3151625	Argument	name		3151283	1					
ANR	3151626	Identifier	name		3151283	0					
ANR	3151627	Argument	nameEnd		3151283	2					
ANR	3151628	Identifier	nameEnd		3151283	0					
ANR	3151629	Argument	KW_standalone		3151283	3					
ANR	3151630	Identifier	KW_standalone		3151283	0					
ANR	3151631	Identifier	isGeneralTextEntity		3151283	1					
ANR	3151632	CompoundStatement		54:30:1429:1429	3151283	1					
ANR	3151633	ExpressionStatement	* badPtr = name	1297:4:33294:33308	3151283	0	True				
ANR	3151634	AssignmentExpression	* badPtr = name		3151283	0		=			
ANR	3151635	UnaryOperationExpression	* badPtr		3151283	0					
ANR	3151636	UnaryOperator	*		3151283	0					
ANR	3151637	Identifier	badPtr		3151283	1					
ANR	3151638	Identifier	name		3151283	1					
ANR	3151639	ReturnStatement	return 0 ;	1298:4:33314:33322	3151283	1	True				
ANR	3151640	PrimaryExpression	0		3151283	0					
ANR	3151641	IfStatement	"if ( XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_yes ) )"		3151283	9					
ANR	3151642	Condition	"XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_yes )"	1300:6:33334:33398	3151283	0	True				
ANR	3151643	CallExpression	"XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_yes )"		3151283	0					
ANR	3151644	Callee	XmlNameMatchesAscii		3151283	0					
ANR	3151645	Identifier	XmlNameMatchesAscii		3151283	0					
ANR	3151646	ArgumentList	enc		3151283	1					
ANR	3151647	Argument	enc		3151283	0					
ANR	3151648	Identifier	enc		3151283	0					
ANR	3151649	Argument	val		3151283	1					
ANR	3151650	Identifier	val		3151283	0					
ANR	3151651	Argument	ptr - enc -> minBytesPerChar		3151283	2					
ANR	3151652	AdditiveExpression	ptr - enc -> minBytesPerChar		3151283	0		-			
ANR	3151653	Identifier	ptr		3151283	0					
ANR	3151654	PtrMemberAccess	enc -> minBytesPerChar		3151283	1					
ANR	3151655	Identifier	enc		3151283	0					
ANR	3151656	Identifier	minBytesPerChar		3151283	1					
ANR	3151657	Argument	KW_yes		3151283	3					
ANR	3151658	Identifier	KW_yes		3151283	0					
ANR	3151659	CompoundStatement		58:73:1542:1542	3151283	1					
ANR	3151660	IfStatement	if ( standalone )		3151283	0					
ANR	3151661	Condition	standalone	1301:8:33411:33420	3151283	0	True				
ANR	3151662	Identifier	standalone		3151283	0					
ANR	3151663	ExpressionStatement	* standalone = 1	1302:6:33429:33444	3151283	1	True				
ANR	3151664	AssignmentExpression	* standalone = 1		3151283	0		=			
ANR	3151665	UnaryOperationExpression	* standalone		3151283	0					
ANR	3151666	UnaryOperator	*		3151283	0					
ANR	3151667	Identifier	standalone		3151283	1					
ANR	3151668	PrimaryExpression	1		3151283	1					
ANR	3151669	ElseStatement	else		3151283	0					
ANR	3151670	IfStatement	"if ( XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_no ) )"		3151283	0					
ANR	3151671	Condition	"XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_no )"	1304:11:33461:33524	3151283	0	True				
ANR	3151672	CallExpression	"XmlNameMatchesAscii ( enc , val , ptr - enc -> minBytesPerChar , KW_no )"		3151283	0					
ANR	3151673	Callee	XmlNameMatchesAscii		3151283	0					
ANR	3151674	Identifier	XmlNameMatchesAscii		3151283	0					
ANR	3151675	ArgumentList	enc		3151283	1					
ANR	3151676	Argument	enc		3151283	0					
ANR	3151677	Identifier	enc		3151283	0					
ANR	3151678	Argument	val		3151283	1					
ANR	3151679	Identifier	val		3151283	0					
ANR	3151680	Argument	ptr - enc -> minBytesPerChar		3151283	2					
ANR	3151681	AdditiveExpression	ptr - enc -> minBytesPerChar		3151283	0		-			
ANR	3151682	Identifier	ptr		3151283	0					
ANR	3151683	PtrMemberAccess	enc -> minBytesPerChar		3151283	1					
ANR	3151684	Identifier	enc		3151283	0					
ANR	3151685	Identifier	minBytesPerChar		3151283	1					
ANR	3151686	Argument	KW_no		3151283	3					
ANR	3151687	Identifier	KW_no		3151283	0					
ANR	3151688	CompoundStatement		62:77:1668:1668	3151283	1					
ANR	3151689	IfStatement	if ( standalone )		3151283	0					
ANR	3151690	Condition	standalone	1305:8:33537:33546	3151283	0	True				
ANR	3151691	Identifier	standalone		3151283	0					
ANR	3151692	ExpressionStatement	* standalone = 0	1306:6:33555:33570	3151283	1	True				
ANR	3151693	AssignmentExpression	* standalone = 0		3151283	0		=			
ANR	3151694	UnaryOperationExpression	* standalone		3151283	0					
ANR	3151695	UnaryOperator	*		3151283	0					
ANR	3151696	Identifier	standalone		3151283	1					
ANR	3151697	PrimaryExpression	0		3151283	1					
ANR	3151698	ElseStatement	else		3151283	0					
ANR	3151699	CompoundStatement		66:7:1724:1724	3151283	0					
ANR	3151700	ExpressionStatement	* badPtr = val	1309:4:33589:33602	3151283	0	True				
ANR	3151701	AssignmentExpression	* badPtr = val		3151283	0		=			
ANR	3151702	UnaryOperationExpression	* badPtr		3151283	0					
ANR	3151703	UnaryOperator	*		3151283	0					
ANR	3151704	Identifier	badPtr		3151283	1					
ANR	3151705	Identifier	val		3151283	1					
ANR	3151706	ReturnStatement	return 0 ;	1310:4:33608:33616	3151283	1	True				
ANR	3151707	PrimaryExpression	0		3151283	0					
ANR	3151708	WhileStatement	"while ( isSpace ( toAscii ( enc , ptr , end ) ) )"		3151283	10					
ANR	3151709	Condition	"isSpace ( toAscii ( enc , ptr , end ) )"	1312:9:33631:33661	3151283	0	True				
ANR	3151710	CallExpression	"isSpace ( toAscii ( enc , ptr , end ) )"		3151283	0					
ANR	3151711	Callee	isSpace		3151283	0					
ANR	3151712	Identifier	isSpace		3151283	0					
ANR	3151713	ArgumentList	"toAscii ( enc , ptr , end )"		3151283	1					
ANR	3151714	Argument	"toAscii ( enc , ptr , end )"		3151283	0					
ANR	3151715	CallExpression	"toAscii ( enc , ptr , end )"		3151283	0					
ANR	3151716	Callee	toAscii		3151283	0					
ANR	3151717	Identifier	toAscii		3151283	0					
ANR	3151718	ArgumentList	enc		3151283	1					
ANR	3151719	Argument	enc		3151283	0					
ANR	3151720	Identifier	enc		3151283	0					
ANR	3151721	Argument	ptr		3151283	1					
ANR	3151722	Identifier	ptr		3151283	0					
ANR	3151723	Argument	end		3151283	2					
ANR	3151724	Identifier	end		3151283	0					
ANR	3151725	ExpressionStatement	ptr += enc -> minBytesPerChar	1313:4:33668:33695	3151283	1	True				
ANR	3151726	AssignmentExpression	ptr += enc -> minBytesPerChar		3151283	0		+=			
ANR	3151727	Identifier	ptr		3151283	0					
ANR	3151728	PtrMemberAccess	enc -> minBytesPerChar		3151283	1					
ANR	3151729	Identifier	enc		3151283	0					
ANR	3151730	Identifier	minBytesPerChar		3151283	1					
ANR	3151731	IfStatement	if ( ptr != end )		3151283	11					
ANR	3151732	Condition	ptr != end	1314:6:33703:33712	3151283	0	True				
ANR	3151733	EqualityExpression	ptr != end		3151283	0		!=			
ANR	3151734	Identifier	ptr		3151283	0					
ANR	3151735	Identifier	end		3151283	1					
ANR	3151736	CompoundStatement		72:18:1856:1856	3151283	1					
ANR	3151737	ExpressionStatement	* badPtr = ptr	1315:4:33721:33734	3151283	0	True				
ANR	3151738	AssignmentExpression	* badPtr = ptr		3151283	0		=			
ANR	3151739	UnaryOperationExpression	* badPtr		3151283	0					
ANR	3151740	UnaryOperator	*		3151283	0					
ANR	3151741	Identifier	badPtr		3151283	1					
ANR	3151742	Identifier	ptr		3151283	1					
ANR	3151743	ReturnStatement	return 0 ;	1316:4:33740:33748	3151283	1	True				
ANR	3151744	PrimaryExpression	0		3151283	0					
ANR	3151745	ReturnStatement	return 1 ;	1318:2:33756:33764	3151283	12	True				
ANR	3151746	PrimaryExpression	1		3151283	0					
ANR	3151747	ReturnType	static int		3151283	1					
ANR	3151748	Identifier	doParseXmlDecl		3151283	2					
ANR	3151749	ParameterList	"const ENCODING * ( * encodingFinder ) ( const ENCODING * , const char * , const char * ) , int isGeneralTextEntity , const ENCODING * enc , const char * ptr , const char * end , const char * * badPtr , const char * * versionPtr , const char * * versionEndPtr , const char * * encodingName , const ENCODING * * encoding , int * standalone"		3151283	3					
ANR	3151750	Parameter	"const ENCODING * ( * encodingFinder ) ( const ENCODING * , const char * , const char * )"	1230:15:31304:31480	3151283	0	True				
ANR	3151751	ParameterType	"(* ( const ENCODING * , const char * , const char * ) const ENCODING) *"		3151283	0					
ANR	3151752	Identifier	encodingFinder		3151283	1					
ANR	3151753	Parameter	int isGeneralTextEntity	1233:15:31498:31520	3151283	1	True				
ANR	3151754	ParameterType	int		3151283	0					
ANR	3151755	Identifier	isGeneralTextEntity		3151283	1					
ANR	3151756	Parameter	const ENCODING * enc	1234:15:31538:31556	3151283	2	True				
ANR	3151757	ParameterType	const ENCODING *		3151283	0					
ANR	3151758	Identifier	enc		3151283	1					
ANR	3151759	Parameter	const char * ptr	1235:15:31574:31588	3151283	3	True				
ANR	3151760	ParameterType	const char *		3151283	0					
ANR	3151761	Identifier	ptr		3151283	1					
ANR	3151762	Parameter	const char * end	1236:15:31606:31620	3151283	4	True				
ANR	3151763	ParameterType	const char *		3151283	0					
ANR	3151764	Identifier	end		3151283	1					
ANR	3151765	Parameter	const char * * badPtr	1237:15:31638:31656	3151283	5	True				
ANR	3151766	ParameterType	const char * *		3151283	0					
ANR	3151767	Identifier	badPtr		3151283	1					
ANR	3151768	Parameter	const char * * versionPtr	1238:15:31674:31696	3151283	6	True				
ANR	3151769	ParameterType	const char * *		3151283	0					
ANR	3151770	Identifier	versionPtr		3151283	1					
ANR	3151771	Parameter	const char * * versionEndPtr	1239:15:31714:31739	3151283	7	True				
ANR	3151772	ParameterType	const char * *		3151283	0					
ANR	3151773	Identifier	versionEndPtr		3151283	1					
ANR	3151774	Parameter	const char * * encodingName	1240:15:31757:31781	3151283	8	True				
ANR	3151775	ParameterType	const char * *		3151283	0					
ANR	3151776	Identifier	encodingName		3151283	1					
ANR	3151777	Parameter	const ENCODING * * encoding	1241:15:31799:31823	3151283	9	True				
ANR	3151778	ParameterType	const ENCODING * *		3151283	0					
ANR	3151779	Identifier	encoding		3151283	1					
ANR	3151780	Parameter	int * standalone	1242:15:31841:31855	3151283	10	True				
ANR	3151781	ParameterType	int *		3151283	0					
ANR	3151782	Identifier	standalone		3151283	1					
ANR	3151783	CFGEntryNode	ENTRY		3151283		True				
ANR	3151784	CFGExitNode	EXIT		3151283		True				
ANR	3151785	Symbol	& val		3151283						
ANR	3151786	Symbol	ASCII_z		3151283						
ANR	3151787	Symbol	& name		3151283						
ANR	3151788	Symbol	isSpace		3151283						
ANR	3151789	Symbol	KW_version		3151283						
ANR	3151790	Symbol	toAscii		3151283						
ANR	3151791	Symbol	* encoding		3151283						
ANR	3151792	Symbol	* standalone		3151283						
ANR	3151793	Symbol	& ptr		3151283						
ANR	3151794	Symbol	isGeneralTextEntity		3151283						
ANR	3151795	Symbol	XmlNameMatchesAscii		3151283						
ANR	3151796	Symbol	end		3151283						
ANR	3151797	Symbol	ASCII_A		3151283						
ANR	3151798	Symbol	enc		3151283						
ANR	3151799	Symbol	KW_encoding		3151283						
ANR	3151800	Symbol	val		3151283						
ANR	3151801	Symbol	parsePseudoAttribute		3151283						
ANR	3151802	Symbol	NULL		3151283						
ANR	3151803	Symbol	c		3151283						
ANR	3151804	Symbol	encodingFinder		3151283						
ANR	3151805	Symbol	ASCII_Z		3151283						
ANR	3151806	Symbol	versionEndPtr		3151283						
ANR	3151807	Symbol	& nameEnd		3151283						
ANR	3151808	Symbol	* badPtr		3151283						
ANR	3151809	Symbol	KW_yes		3151283						
ANR	3151810	Symbol	standalone		3151283						
ANR	3151811	Symbol	enc -> minBytesPerChar		3151283						
ANR	3151812	Symbol	* versionPtr		3151283						
ANR	3151813	Symbol	badPtr		3151283						
ANR	3151814	Symbol	encodingName		3151283						
ANR	3151815	Symbol	encoding		3151283						
ANR	3151816	Symbol	ptr		3151283						
ANR	3151817	Symbol	* encodingName		3151283						
ANR	3151818	Symbol	* versionEndPtr		3151283						
ANR	3151819	Symbol	nameEnd		3151283						
ANR	3151820	Symbol	KW_standalone		3151283						
ANR	3151821	Symbol	name		3151283						
ANR	3151822	Symbol	ASCII_a		3151283						
ANR	3151823	Symbol	* enc		3151283						
ANR	3151824	Symbol	KW_no		3151283						
ANR	3151825	Symbol	versionPtr		3151283						
ANR	3151826	Function	checkCharRefNumber	1321:0:33769:34151							
ANR	3151827	FunctionDef	checkCharRefNumber (int result)		3151826	0					
ANR	3151828	CompoundStatement		1323:0:33820:34151	3151826	0					
ANR	3151829	SwitchStatement	switch ( result >> 8 )		3151826	0					
ANR	3151830	Condition	result >> 8	1324:10:33832:33842	3151826	0	True				
ANR	3151831	ShiftExpression	result >> 8		3151826	0		>>			
ANR	3151832	Identifier	result		3151826	0					
ANR	3151833	PrimaryExpression	8		3151826	1					
ANR	3151834	CompoundStatement		2:23:24:24	3151826	1					
ANR	3151835	Label	case 0xD8 :	1325:2:33849:33858	3151826	0	True				
ANR	3151836	Label	case 0xD9 :	1325:13:33860:33869	3151826	1	True				
ANR	3151837	Label	case 0xDA :	1325:24:33871:33880	3151826	2	True				
ANR	3151838	Label	case 0xDB :	1325:35:33882:33891	3151826	3	True				
ANR	3151839	Label	case 0xDC :	1326:2:33895:33904	3151826	4	True				
ANR	3151840	Label	case 0xDD :	1326:13:33906:33915	3151826	5	True				
ANR	3151841	Label	case 0xDE :	1326:24:33917:33926	3151826	6	True				
ANR	3151842	Label	case 0xDF :	1326:35:33928:33937	3151826	7	True				
ANR	3151843	ReturnStatement	return - 1 ;	1327:4:33943:33952	3151826	8	True				
ANR	3151844	UnaryOperationExpression	- 1		3151826	0					
ANR	3151845	UnaryOperator	-		3151826	0					
ANR	3151846	PrimaryExpression	1		3151826	1					
ANR	3151847	Label	case 0 :	1328:2:33956:33962	3151826	9	True				
ANR	3151848	IfStatement	if ( latin1_encoding . type [ result ] == BT_NONXML )		3151826	10					
ANR	3151849	Condition	latin1_encoding . type [ result ] == BT_NONXML	1329:8:33972:34012	3151826	0	True				
ANR	3151850	EqualityExpression	latin1_encoding . type [ result ] == BT_NONXML		3151826	0		==			
ANR	3151851	ArrayIndexing	latin1_encoding . type [ result ]		3151826	0					
ANR	3151852	MemberAccess	latin1_encoding . type		3151826	0					
ANR	3151853	Identifier	latin1_encoding		3151826	0					
ANR	3151854	Identifier	type		3151826	1					
ANR	3151855	Identifier	result		3151826	1					
ANR	3151856	Identifier	BT_NONXML		3151826	1					
ANR	3151857	ReturnStatement	return - 1 ;	1330:6:34021:34030	3151826	1	True				
ANR	3151858	UnaryOperationExpression	- 1		3151826	0					
ANR	3151859	UnaryOperator	-		3151826	0					
ANR	3151860	PrimaryExpression	1		3151826	1					
ANR	3151861	BreakStatement	break ;	1331:4:34036:34041	3151826	11	True				
ANR	3151862	Label	case 0xFF :	1332:2:34045:34054	3151826	12	True				
ANR	3151863	IfStatement	if ( result == 0xFFFE || result == 0xFFFF )		3151826	13					
ANR	3151864	Condition	result == 0xFFFE || result == 0xFFFF	1333:8:34064:34099	3151826	0	True				
ANR	3151865	OrExpression	result == 0xFFFE || result == 0xFFFF		3151826	0		||			
ANR	3151866	EqualityExpression	result == 0xFFFE		3151826	0		==			
ANR	3151867	Identifier	result		3151826	0					
ANR	3151868	PrimaryExpression	0xFFFE		3151826	1					
ANR	3151869	EqualityExpression	result == 0xFFFF		3151826	1		==			
ANR	3151870	Identifier	result		3151826	0					
ANR	3151871	PrimaryExpression	0xFFFF		3151826	1					
ANR	3151872	ReturnStatement	return - 1 ;	1334:6:34108:34117	3151826	1	True				
ANR	3151873	UnaryOperationExpression	- 1		3151826	0					
ANR	3151874	UnaryOperator	-		3151826	0					
ANR	3151875	PrimaryExpression	1		3151826	1					
ANR	3151876	BreakStatement	break ;	1335:4:34123:34128	3151826	14	True				
ANR	3151877	ReturnStatement	return result ;	1337:2:34136:34149	3151826	1	True				
ANR	3151878	Identifier	result		3151826	0					
ANR	3151879	ReturnType	static int FASTCALL		3151826	1					
ANR	3151880	Identifier	checkCharRefNumber		3151826	2					
ANR	3151881	ParameterList	int result		3151826	3					
ANR	3151882	Parameter	int result	1322:19:33808:33817	3151826	0	True				
ANR	3151883	ParameterType	int		3151826	0					
ANR	3151884	Identifier	result		3151826	1					
ANR	3151885	CFGEntryNode	ENTRY		3151826		True				
ANR	3151886	CFGExitNode	EXIT		3151826		True				
ANR	3151887	Symbol	result		3151826						
ANR	3151888	Symbol	* result		3151826						
ANR	3151889	Symbol	latin1_encoding . type		3151826						
ANR	3151890	Symbol	* latin1_encoding		3151826						
ANR	3151891	Symbol	BT_NONXML		3151826						
ANR	3151892	Symbol	latin1_encoding		3151826						
ANR	3151893	Symbol	* latin1_encoding . type		3151826						
ANR	3151894	Function	XmlUtf8Encode	1340:0:34154:35087							
ANR	3151895	FunctionDef	"XmlUtf8Encode (int c , char * buf)"		3151894	0					
ANR	3151896	CompoundStatement		1342:0:34199:35087	3151894	0					
ANR	3151897	ClassDefStatement	"enum { min2 = 0x80 , min3 = 0x800 , min4 = 0x10000 }"	1343:2:34203:34334	3151894	0	True				
ANR	3151898	ExpressionStatement		1348:3:34335:34335	3151894	1	True				
ANR	3151899	IfStatement	if ( c < 0 )		3151894	2					
ANR	3151900	Condition	c < 0	1350:6:34344:34348	3151894	0	True				
ANR	3151901	RelationalExpression	c < 0		3151894	0		<			
ANR	3151902	Identifier	c		3151894	0					
ANR	3151903	PrimaryExpression	0		3151894	1					
ANR	3151904	ReturnStatement	return 0 ;	1351:4:34355:34363	3151894	1	True				
ANR	3151905	PrimaryExpression	0		3151894	0					
ANR	3151906	IfStatement	if ( c < min2 )		3151894	3					
ANR	3151907	Condition	c < min2	1352:6:34435:34442	3151894	0	True				
ANR	3151908	RelationalExpression	c < min2		3151894	0		<			
ANR	3151909	Identifier	c		3151894	0					
ANR	3151910	Identifier	min2		3151894	1					
ANR	3151911	CompoundStatement		11:16:245:245	3151894	1					
ANR	3151912	ExpressionStatement	buf [ 0 ] = ( char ) ( c | UTF8_cval1 )	1353:4:34451:34482	3151894	0	True				
ANR	3151913	AssignmentExpression	buf [ 0 ] = ( char ) ( c | UTF8_cval1 )		3151894	0		=			
ANR	3151914	ArrayIndexing	buf [ 0 ]		3151894	0					
ANR	3151915	Identifier	buf		3151894	0					
ANR	3151916	PrimaryExpression	0		3151894	1					
ANR	3151917	CastExpression	( char ) ( c | UTF8_cval1 )		3151894	1					
ANR	3151918	CastTarget	char		3151894	0					
ANR	3151919	InclusiveOrExpression	c | UTF8_cval1		3151894	1		|			
ANR	3151920	Identifier	c		3151894	0					
ANR	3151921	Identifier	UTF8_cval1		3151894	1					
ANR	3151922	ReturnStatement	return 1 ;	1354:4:34488:34496	3151894	1	True				
ANR	3151923	PrimaryExpression	1		3151894	0					
ANR	3151924	IfStatement	if ( c < min3 )		3151894	4					
ANR	3151925	Condition	c < min3	1356:6:34508:34515	3151894	0	True				
ANR	3151926	RelationalExpression	c < min3		3151894	0		<			
ANR	3151927	Identifier	c		3151894	0					
ANR	3151928	Identifier	min3		3151894	1					
ANR	3151929	CompoundStatement		15:16:318:318	3151894	1					
ANR	3151930	ExpressionStatement	buf [ 0 ] = ( char ) ( ( c >> 6 ) | UTF8_cval2 )	1357:4:34524:34562	3151894	0	True				
ANR	3151931	AssignmentExpression	buf [ 0 ] = ( char ) ( ( c >> 6 ) | UTF8_cval2 )		3151894	0		=			
ANR	3151932	ArrayIndexing	buf [ 0 ]		3151894	0					
ANR	3151933	Identifier	buf		3151894	0					
ANR	3151934	PrimaryExpression	0		3151894	1					
ANR	3151935	CastExpression	( char ) ( ( c >> 6 ) | UTF8_cval2 )		3151894	1					
ANR	3151936	CastTarget	char		3151894	0					
ANR	3151937	InclusiveOrExpression	( c >> 6 ) | UTF8_cval2		3151894	1		|			
ANR	3151938	ShiftExpression	c >> 6		3151894	0		>>			
ANR	3151939	Identifier	c		3151894	0					
ANR	3151940	PrimaryExpression	6		3151894	1					
ANR	3151941	Identifier	UTF8_cval2		3151894	1					
ANR	3151942	ExpressionStatement	buf [ 1 ] = ( char ) ( ( c & 0x3f ) | 0x80 )	1358:4:34568:34602	3151894	1	True				
ANR	3151943	AssignmentExpression	buf [ 1 ] = ( char ) ( ( c & 0x3f ) | 0x80 )		3151894	0		=			
ANR	3151944	ArrayIndexing	buf [ 1 ]		3151894	0					
ANR	3151945	Identifier	buf		3151894	0					
ANR	3151946	PrimaryExpression	1		3151894	1					
ANR	3151947	CastExpression	( char ) ( ( c & 0x3f ) | 0x80 )		3151894	1					
ANR	3151948	CastTarget	char		3151894	0					
ANR	3151949	InclusiveOrExpression	( c & 0x3f ) | 0x80		3151894	1		|			
ANR	3151950	BitAndExpression	c & 0x3f		3151894	0		&			
ANR	3151951	Identifier	c		3151894	0					
ANR	3151952	PrimaryExpression	0x3f		3151894	1					
ANR	3151953	PrimaryExpression	0x80		3151894	1					
ANR	3151954	ReturnStatement	return 2 ;	1359:4:34608:34616	3151894	2	True				
ANR	3151955	PrimaryExpression	2		3151894	0					
ANR	3151956	IfStatement	if ( c < min4 )		3151894	5					
ANR	3151957	Condition	c < min4	1361:6:34628:34635	3151894	0	True				
ANR	3151958	RelationalExpression	c < min4		3151894	0		<			
ANR	3151959	Identifier	c		3151894	0					
ANR	3151960	Identifier	min4		3151894	1					
ANR	3151961	CompoundStatement		20:16:438:438	3151894	1					
ANR	3151962	ExpressionStatement	buf [ 0 ] = ( char ) ( ( c >> 12 ) | UTF8_cval3 )	1362:4:34644:34683	3151894	0	True				
ANR	3151963	AssignmentExpression	buf [ 0 ] = ( char ) ( ( c >> 12 ) | UTF8_cval3 )		3151894	0		=			
ANR	3151964	ArrayIndexing	buf [ 0 ]		3151894	0					
ANR	3151965	Identifier	buf		3151894	0					
ANR	3151966	PrimaryExpression	0		3151894	1					
ANR	3151967	CastExpression	( char ) ( ( c >> 12 ) | UTF8_cval3 )		3151894	1					
ANR	3151968	CastTarget	char		3151894	0					
ANR	3151969	InclusiveOrExpression	( c >> 12 ) | UTF8_cval3		3151894	1		|			
ANR	3151970	ShiftExpression	c >> 12		3151894	0		>>			
ANR	3151971	Identifier	c		3151894	0					
ANR	3151972	PrimaryExpression	12		3151894	1					
ANR	3151973	Identifier	UTF8_cval3		3151894	1					
ANR	3151974	ExpressionStatement	buf [ 1 ] = ( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )	1363:4:34689:34730	3151894	1	True				
ANR	3151975	AssignmentExpression	buf [ 1 ] = ( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )		3151894	0		=			
ANR	3151976	ArrayIndexing	buf [ 1 ]		3151894	0					
ANR	3151977	Identifier	buf		3151894	0					
ANR	3151978	PrimaryExpression	1		3151894	1					
ANR	3151979	CastExpression	( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )		3151894	1					
ANR	3151980	CastTarget	char		3151894	0					
ANR	3151981	InclusiveOrExpression	( ( c >> 6 ) & 0x3f ) | 0x80		3151894	1		|			
ANR	3151982	BitAndExpression	( c >> 6 ) & 0x3f		3151894	0		&			
ANR	3151983	ShiftExpression	c >> 6		3151894	0		>>			
ANR	3151984	Identifier	c		3151894	0					
ANR	3151985	PrimaryExpression	6		3151894	1					
ANR	3151986	PrimaryExpression	0x3f		3151894	1					
ANR	3151987	PrimaryExpression	0x80		3151894	1					
ANR	3151988	ExpressionStatement	buf [ 2 ] = ( char ) ( ( c & 0x3f ) | 0x80 )	1364:4:34736:34770	3151894	2	True				
ANR	3151989	AssignmentExpression	buf [ 2 ] = ( char ) ( ( c & 0x3f ) | 0x80 )		3151894	0		=			
ANR	3151990	ArrayIndexing	buf [ 2 ]		3151894	0					
ANR	3151991	Identifier	buf		3151894	0					
ANR	3151992	PrimaryExpression	2		3151894	1					
ANR	3151993	CastExpression	( char ) ( ( c & 0x3f ) | 0x80 )		3151894	1					
ANR	3151994	CastTarget	char		3151894	0					
ANR	3151995	InclusiveOrExpression	( c & 0x3f ) | 0x80		3151894	1		|			
ANR	3151996	BitAndExpression	c & 0x3f		3151894	0		&			
ANR	3151997	Identifier	c		3151894	0					
ANR	3151998	PrimaryExpression	0x3f		3151894	1					
ANR	3151999	PrimaryExpression	0x80		3151894	1					
ANR	3152000	ReturnStatement	return 3 ;	1365:4:34776:34784	3151894	3	True				
ANR	3152001	PrimaryExpression	3		3151894	0					
ANR	3152002	IfStatement	if ( c < 0x110000 )		3151894	6					
ANR	3152003	Condition	c < 0x110000	1367:6:34796:34807	3151894	0	True				
ANR	3152004	RelationalExpression	c < 0x110000		3151894	0		<			
ANR	3152005	Identifier	c		3151894	0					
ANR	3152006	PrimaryExpression	0x110000		3151894	1					
ANR	3152007	CompoundStatement		26:20:610:610	3151894	1					
ANR	3152008	ExpressionStatement	buf [ 0 ] = ( char ) ( ( c >> 18 ) | UTF8_cval4 )	1368:4:34816:34855	3151894	0	True				
ANR	3152009	AssignmentExpression	buf [ 0 ] = ( char ) ( ( c >> 18 ) | UTF8_cval4 )		3151894	0		=			
ANR	3152010	ArrayIndexing	buf [ 0 ]		3151894	0					
ANR	3152011	Identifier	buf		3151894	0					
ANR	3152012	PrimaryExpression	0		3151894	1					
ANR	3152013	CastExpression	( char ) ( ( c >> 18 ) | UTF8_cval4 )		3151894	1					
ANR	3152014	CastTarget	char		3151894	0					
ANR	3152015	InclusiveOrExpression	( c >> 18 ) | UTF8_cval4		3151894	1		|			
ANR	3152016	ShiftExpression	c >> 18		3151894	0		>>			
ANR	3152017	Identifier	c		3151894	0					
ANR	3152018	PrimaryExpression	18		3151894	1					
ANR	3152019	Identifier	UTF8_cval4		3151894	1					
ANR	3152020	ExpressionStatement	buf [ 1 ] = ( char ) ( ( ( c >> 12 ) & 0x3f ) | 0x80 )	1369:4:34861:34903	3151894	1	True				
ANR	3152021	AssignmentExpression	buf [ 1 ] = ( char ) ( ( ( c >> 12 ) & 0x3f ) | 0x80 )		3151894	0		=			
ANR	3152022	ArrayIndexing	buf [ 1 ]		3151894	0					
ANR	3152023	Identifier	buf		3151894	0					
ANR	3152024	PrimaryExpression	1		3151894	1					
ANR	3152025	CastExpression	( char ) ( ( ( c >> 12 ) & 0x3f ) | 0x80 )		3151894	1					
ANR	3152026	CastTarget	char		3151894	0					
ANR	3152027	InclusiveOrExpression	( ( c >> 12 ) & 0x3f ) | 0x80		3151894	1		|			
ANR	3152028	BitAndExpression	( c >> 12 ) & 0x3f		3151894	0		&			
ANR	3152029	ShiftExpression	c >> 12		3151894	0		>>			
ANR	3152030	Identifier	c		3151894	0					
ANR	3152031	PrimaryExpression	12		3151894	1					
ANR	3152032	PrimaryExpression	0x3f		3151894	1					
ANR	3152033	PrimaryExpression	0x80		3151894	1					
ANR	3152034	ExpressionStatement	buf [ 2 ] = ( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )	1370:4:34909:34950	3151894	2	True				
ANR	3152035	AssignmentExpression	buf [ 2 ] = ( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )		3151894	0		=			
ANR	3152036	ArrayIndexing	buf [ 2 ]		3151894	0					
ANR	3152037	Identifier	buf		3151894	0					
ANR	3152038	PrimaryExpression	2		3151894	1					
ANR	3152039	CastExpression	( char ) ( ( ( c >> 6 ) & 0x3f ) | 0x80 )		3151894	1					
ANR	3152040	CastTarget	char		3151894	0					
ANR	3152041	InclusiveOrExpression	( ( c >> 6 ) & 0x3f ) | 0x80		3151894	1		|			
ANR	3152042	BitAndExpression	( c >> 6 ) & 0x3f		3151894	0		&			
ANR	3152043	ShiftExpression	c >> 6		3151894	0		>>			
ANR	3152044	Identifier	c		3151894	0					
ANR	3152045	PrimaryExpression	6		3151894	1					
ANR	3152046	PrimaryExpression	0x3f		3151894	1					
ANR	3152047	PrimaryExpression	0x80		3151894	1					
ANR	3152048	ExpressionStatement	buf [ 3 ] = ( char ) ( ( c & 0x3f ) | 0x80 )	1371:4:34956:34990	3151894	3	True				
ANR	3152049	AssignmentExpression	buf [ 3 ] = ( char ) ( ( c & 0x3f ) | 0x80 )		3151894	0		=			
ANR	3152050	ArrayIndexing	buf [ 3 ]		3151894	0					
ANR	3152051	Identifier	buf		3151894	0					
ANR	3152052	PrimaryExpression	3		3151894	1					
ANR	3152053	CastExpression	( char ) ( ( c & 0x3f ) | 0x80 )		3151894	1					
ANR	3152054	CastTarget	char		3151894	0					
ANR	3152055	InclusiveOrExpression	( c & 0x3f ) | 0x80		3151894	1		|			
ANR	3152056	BitAndExpression	c & 0x3f		3151894	0		&			
ANR	3152057	Identifier	c		3151894	0					
ANR	3152058	PrimaryExpression	0x3f		3151894	1					
ANR	3152059	PrimaryExpression	0x80		3151894	1					
ANR	3152060	ReturnStatement	return 4 ;	1372:4:34996:35004	3151894	4	True				
ANR	3152061	PrimaryExpression	4		3151894	0					
ANR	3152062	ReturnStatement	return 0 ;	1374:2:35012:35020	3151894	7	True				
ANR	3152063	PrimaryExpression	0		3151894	0					
ANR	3152064	ReturnType	int FASTCALL		3151894	1					
ANR	3152065	Identifier	XmlUtf8Encode		3151894	2					
ANR	3152066	ParameterList	"int c , char * buf"		3151894	3					
ANR	3152067	Parameter	int c	1341:14:34181:34185	3151894	0	True				
ANR	3152068	ParameterType	int		3151894	0					
ANR	3152069	Identifier	c		3151894	1					
ANR	3152070	Parameter	char * buf	1341:21:34188:34196	3151894	1	True				
ANR	3152071	ParameterType	char *		3151894	0					
ANR	3152072	Identifier	buf		3151894	1					
ANR	3152073	CFGEntryNode	ENTRY		3151894		True				
ANR	3152074	CFGExitNode	EXIT		3151894		True				
ANR	3152075	Symbol	min4		3151894						
ANR	3152076	Symbol	buf		3151894						
ANR	3152077	Symbol	* buf		3151894						
ANR	3152078	Symbol	min3		3151894						
ANR	3152079	Symbol	c		3151894						
ANR	3152080	Symbol	min2		3151894						
ANR	3152081	Symbol	UTF8_cval4		3151894						
ANR	3152082	Symbol	UTF8_cval1		3151894						
ANR	3152083	Symbol	UTF8_cval2		3151894						
ANR	3152084	Symbol	UTF8_cval3		3151894						
ANR	3152085	Function	XmlUtf16Encode	1377:0:35090:35468							
ANR	3152086	FunctionDef	"XmlUtf16Encode (int charNum , unsigned short * buf)"		3152085	0					
ANR	3152087	CompoundStatement		1379:0:35152:35468	3152085	0					
ANR	3152088	IfStatement	if ( charNum < 0 )		3152085	0					
ANR	3152089	Condition	charNum < 0	1380:6:35160:35170	3152085	0	True				
ANR	3152090	RelationalExpression	charNum < 0		3152085	0		<			
ANR	3152091	Identifier	charNum		3152085	0					
ANR	3152092	PrimaryExpression	0		3152085	1					
ANR	3152093	ReturnStatement	return 0 ;	1381:4:35177:35185	3152085	1	True				
ANR	3152094	PrimaryExpression	0		3152085	0					
ANR	3152095	IfStatement	if ( charNum < 0x10000 )		3152085	1					
ANR	3152096	Condition	charNum < 0x10000	1382:6:35193:35209	3152085	0	True				
ANR	3152097	RelationalExpression	charNum < 0x10000		3152085	0		<			
ANR	3152098	Identifier	charNum		3152085	0					
ANR	3152099	PrimaryExpression	0x10000		3152085	1					
ANR	3152100	CompoundStatement		4:25:59:59	3152085	1					
ANR	3152101	ExpressionStatement	buf [ 0 ] = ( unsigned short ) charNum	1383:4:35218:35250	3152085	0	True				
ANR	3152102	AssignmentExpression	buf [ 0 ] = ( unsigned short ) charNum		3152085	0		=			
ANR	3152103	ArrayIndexing	buf [ 0 ]		3152085	0					
ANR	3152104	Identifier	buf		3152085	0					
ANR	3152105	PrimaryExpression	0		3152085	1					
ANR	3152106	CastExpression	( unsigned short ) charNum		3152085	1					
ANR	3152107	CastTarget	unsigned short		3152085	0					
ANR	3152108	Identifier	charNum		3152085	1					
ANR	3152109	ReturnStatement	return 1 ;	1384:4:35256:35264	3152085	1	True				
ANR	3152110	PrimaryExpression	1		3152085	0					
ANR	3152111	IfStatement	if ( charNum < 0x110000 )		3152085	2					
ANR	3152112	Condition	charNum < 0x110000	1386:6:35276:35293	3152085	0	True				
ANR	3152113	RelationalExpression	charNum < 0x110000		3152085	0		<			
ANR	3152114	Identifier	charNum		3152085	0					
ANR	3152115	PrimaryExpression	0x110000		3152085	1					
ANR	3152116	CompoundStatement		8:26:143:143	3152085	1					
ANR	3152117	ExpressionStatement	charNum -= 0x10000	1387:4:35302:35320	3152085	0	True				
ANR	3152118	AssignmentExpression	charNum -= 0x10000		3152085	0		-=			
ANR	3152119	Identifier	charNum		3152085	0					
ANR	3152120	PrimaryExpression	0x10000		3152085	1					
ANR	3152121	ExpressionStatement	buf [ 0 ] = ( unsigned short ) ( ( charNum >> 10 ) + 0xD800 )	1388:4:35326:35377	3152085	1	True				
ANR	3152122	AssignmentExpression	buf [ 0 ] = ( unsigned short ) ( ( charNum >> 10 ) + 0xD800 )		3152085	0		=			
ANR	3152123	ArrayIndexing	buf [ 0 ]		3152085	0					
ANR	3152124	Identifier	buf		3152085	0					
ANR	3152125	PrimaryExpression	0		3152085	1					
ANR	3152126	CastExpression	( unsigned short ) ( ( charNum >> 10 ) + 0xD800 )		3152085	1					
ANR	3152127	CastTarget	unsigned short		3152085	0					
ANR	3152128	AdditiveExpression	( charNum >> 10 ) + 0xD800		3152085	1		+			
ANR	3152129	ShiftExpression	charNum >> 10		3152085	0		>>			
ANR	3152130	Identifier	charNum		3152085	0					
ANR	3152131	PrimaryExpression	10		3152085	1					
ANR	3152132	PrimaryExpression	0xD800		3152085	1					
ANR	3152133	ExpressionStatement	buf [ 1 ] = ( unsigned short ) ( ( charNum & 0x3FF ) + 0xDC00 )	1389:4:35383:35436	3152085	2	True				
ANR	3152134	AssignmentExpression	buf [ 1 ] = ( unsigned short ) ( ( charNum & 0x3FF ) + 0xDC00 )		3152085	0		=			
ANR	3152135	ArrayIndexing	buf [ 1 ]		3152085	0					
ANR	3152136	Identifier	buf		3152085	0					
ANR	3152137	PrimaryExpression	1		3152085	1					
ANR	3152138	CastExpression	( unsigned short ) ( ( charNum & 0x3FF ) + 0xDC00 )		3152085	1					
ANR	3152139	CastTarget	unsigned short		3152085	0					
ANR	3152140	AdditiveExpression	( charNum & 0x3FF ) + 0xDC00		3152085	1		+			
ANR	3152141	BitAndExpression	charNum & 0x3FF		3152085	0		&			
ANR	3152142	Identifier	charNum		3152085	0					
ANR	3152143	PrimaryExpression	0x3FF		3152085	1					
ANR	3152144	PrimaryExpression	0xDC00		3152085	1					
ANR	3152145	ReturnStatement	return 2 ;	1390:4:35442:35450	3152085	3	True				
ANR	3152146	PrimaryExpression	2		3152085	0					
ANR	3152147	ReturnStatement	return 0 ;	1392:2:35458:35466	3152085	3	True				
ANR	3152148	PrimaryExpression	0		3152085	0					
ANR	3152149	ReturnType	int FASTCALL		3152085	1					
ANR	3152150	Identifier	XmlUtf16Encode		3152085	2					
ANR	3152151	ParameterList	"int charNum , unsigned short * buf"		3152085	3					
ANR	3152152	Parameter	int charNum	1378:15:35118:35128	3152085	0	True				
ANR	3152153	ParameterType	int		3152085	0					
ANR	3152154	Identifier	charNum		3152085	1					
ANR	3152155	Parameter	unsigned short * buf	1378:28:35131:35149	3152085	1	True				
ANR	3152156	ParameterType	unsigned short *		3152085	0					
ANR	3152157	Identifier	buf		3152085	1					
ANR	3152158	CFGEntryNode	ENTRY		3152085		True				
ANR	3152159	CFGExitNode	EXIT		3152085		True				
ANR	3152160	Symbol	buf		3152085						
ANR	3152161	Symbol	* buf		3152085						
ANR	3152162	Symbol	charNum		3152085						
ANR	3152163	ClassDef	unknown_encoding	1395:0:35471:35619							
ANR	3152164	DeclStmt									
ANR	3152165	Decl							struct normal_encoding	struct normal_encoding	normal
ANR	3152166	DeclStmt									
ANR	3152167	Decl							CONVERTER	CONVERTER	convert
ANR	3152168	DeclStmt									
ANR	3152169	Decl							void	void *	userData
ANR	3152170	DeclStmt									
ANR	3152171	Decl							unsigned short	unsigned short [ 256 ]	utf16
ANR	3152172	Function	XmlSizeOfUnknownEncoding	1405:0:35700:35779							
ANR	3152173	FunctionDef	XmlSizeOfUnknownEncoding ()		3152172	0					
ANR	3152174	CompoundStatement		1407:0:35735:35779	3152172	0					
ANR	3152175	ReturnStatement	return sizeof ( struct unknown_encoding ) ;	1408:2:35739:35777	3152172	0	True				
ANR	3152176	SizeofExpression	sizeof ( struct unknown_encoding )		3152172	0					
ANR	3152177	Sizeof	sizeof		3152172	0					
ANR	3152178	SizeofOperand	struct unknown_encoding		3152172	1					
ANR	3152179	ReturnType	int		3152172	1					
ANR	3152180	Identifier	XmlSizeOfUnknownEncoding		3152172	2					
ANR	3152181	ParameterList			3152172	3					
ANR	3152182	CFGEntryNode	ENTRY		3152172		True				
ANR	3152183	CFGExitNode	EXIT		3152172		True				
ANR	3152184	Function	unknown_isName	1411:0:35782:36056							
ANR	3152185	FunctionDef	"unknown_isName (const ENCODING * enc , const char * p)"		3152184	0					
ANR	3152186	CompoundStatement		1413:0:35856:36056	3152184	0					
ANR	3152187	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1414:2:35860:35922	3152184	0	True				
ANR	3152188	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152184	0					
ANR	3152189	IdentifierDeclType	const struct unknown_encoding *		3152184	0					
ANR	3152190	Identifier	uenc		3152184	1					
ANR	3152191	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152184	2		=			
ANR	3152192	Identifier	uenc		3152184	0					
ANR	3152193	CallExpression	AS_UNKNOWN_ENCODING ( enc )		3152184	1					
ANR	3152194	Callee	AS_UNKNOWN_ENCODING		3152184	0					
ANR	3152195	Identifier	AS_UNKNOWN_ENCODING		3152184	0					
ANR	3152196	ArgumentList	enc		3152184	1					
ANR	3152197	Argument	enc		3152184	0					
ANR	3152198	Identifier	enc		3152184	0					
ANR	3152199	IdentifierDeclStatement	"int c = uenc -> convert ( uenc -> userData , p ) ;"	1415:2:35926:35966	3152184	1	True				
ANR	3152200	IdentifierDecl	"c = uenc -> convert ( uenc -> userData , p )"		3152184	0					
ANR	3152201	IdentifierDeclType	int		3152184	0					
ANR	3152202	Identifier	c		3152184	1					
ANR	3152203	AssignmentExpression	"c = uenc -> convert ( uenc -> userData , p )"		3152184	2		=			
ANR	3152204	Identifier	c		3152184	0					
ANR	3152205	CallExpression	"uenc -> convert ( uenc -> userData , p )"		3152184	1					
ANR	3152206	Callee	uenc -> convert		3152184	0					
ANR	3152207	PtrMemberAccess	uenc -> convert		3152184	0					
ANR	3152208	Identifier	uenc		3152184	0					
ANR	3152209	Identifier	convert		3152184	1					
ANR	3152210	ArgumentList	uenc -> userData		3152184	1					
ANR	3152211	Argument	uenc -> userData		3152184	0					
ANR	3152212	PtrMemberAccess	uenc -> userData		3152184	0					
ANR	3152213	Identifier	uenc		3152184	0					
ANR	3152214	Identifier	userData		3152184	1					
ANR	3152215	Argument	p		3152184	1					
ANR	3152216	Identifier	p		3152184	0					
ANR	3152217	IfStatement	if ( c & ~0xFFFF )		3152184	2					
ANR	3152218	Condition	c & ~0xFFFF	1416:6:35974:35984	3152184	0	True				
ANR	3152219	BitAndExpression	c & ~0xFFFF		3152184	0		&			
ANR	3152220	Identifier	c		3152184	0					
ANR	3152221	Identifier	~0xFFFF		3152184	1					
ANR	3152222	ReturnStatement	return 0 ;	1417:4:35991:35999	3152184	1	True				
ANR	3152223	PrimaryExpression	0		3152184	0					
ANR	3152224	ReturnStatement	"return UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xFF ) ;"	1418:2:36003:36054	3152184	3	True				
ANR	3152225	CallExpression	"UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xFF )"		3152184	0					
ANR	3152226	Callee	UCS2_GET_NAMING		3152184	0					
ANR	3152227	Identifier	UCS2_GET_NAMING		3152184	0					
ANR	3152228	ArgumentList	namePages		3152184	1					
ANR	3152229	Argument	namePages		3152184	0					
ANR	3152230	Identifier	namePages		3152184	0					
ANR	3152231	Argument	c >> 8		3152184	1					
ANR	3152232	ShiftExpression	c >> 8		3152184	0		>>			
ANR	3152233	Identifier	c		3152184	0					
ANR	3152234	PrimaryExpression	8		3152184	1					
ANR	3152235	Argument	c & 0xFF		3152184	2					
ANR	3152236	BitAndExpression	c & 0xFF		3152184	0		&			
ANR	3152237	Identifier	c		3152184	0					
ANR	3152238	PrimaryExpression	0xFF		3152184	1					
ANR	3152239	ReturnType	static int PTRFASTCALL		3152184	1					
ANR	3152240	Identifier	unknown_isName		3152184	2					
ANR	3152241	ParameterList	"const ENCODING * enc , const char * p"		3152184	3					
ANR	3152242	Parameter	const ENCODING * enc	1412:15:35820:35838	3152184	0	True				
ANR	3152243	ParameterType	const ENCODING *		3152184	0					
ANR	3152244	Identifier	enc		3152184	1					
ANR	3152245	Parameter	const char * p	1412:36:35841:35853	3152184	1	True				
ANR	3152246	ParameterType	const char *		3152184	0					
ANR	3152247	Identifier	p		3152184	1					
ANR	3152248	CFGEntryNode	ENTRY		3152184		True				
ANR	3152249	CFGExitNode	EXIT		3152184		True				
ANR	3152250	Symbol	p		3152184						
ANR	3152251	Symbol	uenc -> userData		3152184						
ANR	3152252	Symbol	uenc		3152184						
ANR	3152253	Symbol	c		3152184						
ANR	3152254	Symbol	~0xFFFF		3152184						
ANR	3152255	Symbol	UCS2_GET_NAMING		3152184						
ANR	3152256	Symbol	namePages		3152184						
ANR	3152257	Symbol	AS_UNKNOWN_ENCODING		3152184						
ANR	3152258	Symbol	uenc -> convert		3152184						
ANR	3152259	Symbol	enc		3152184						
ANR	3152260	Symbol	* uenc		3152184						
ANR	3152261	Function	unknown_isNmstrt	1421:0:36059:36337							
ANR	3152262	FunctionDef	"unknown_isNmstrt (const ENCODING * enc , const char * p)"		3152261	0					
ANR	3152263	CompoundStatement		1423:0:36135:36337	3152261	0					
ANR	3152264	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1424:2:36139:36201	3152261	0	True				
ANR	3152265	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152261	0					
ANR	3152266	IdentifierDeclType	const struct unknown_encoding *		3152261	0					
ANR	3152267	Identifier	uenc		3152261	1					
ANR	3152268	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152261	2		=			
ANR	3152269	Identifier	uenc		3152261	0					
ANR	3152270	CallExpression	AS_UNKNOWN_ENCODING ( enc )		3152261	1					
ANR	3152271	Callee	AS_UNKNOWN_ENCODING		3152261	0					
ANR	3152272	Identifier	AS_UNKNOWN_ENCODING		3152261	0					
ANR	3152273	ArgumentList	enc		3152261	1					
ANR	3152274	Argument	enc		3152261	0					
ANR	3152275	Identifier	enc		3152261	0					
ANR	3152276	IdentifierDeclStatement	"int c = uenc -> convert ( uenc -> userData , p ) ;"	1425:2:36205:36245	3152261	1	True				
ANR	3152277	IdentifierDecl	"c = uenc -> convert ( uenc -> userData , p )"		3152261	0					
ANR	3152278	IdentifierDeclType	int		3152261	0					
ANR	3152279	Identifier	c		3152261	1					
ANR	3152280	AssignmentExpression	"c = uenc -> convert ( uenc -> userData , p )"		3152261	2		=			
ANR	3152281	Identifier	c		3152261	0					
ANR	3152282	CallExpression	"uenc -> convert ( uenc -> userData , p )"		3152261	1					
ANR	3152283	Callee	uenc -> convert		3152261	0					
ANR	3152284	PtrMemberAccess	uenc -> convert		3152261	0					
ANR	3152285	Identifier	uenc		3152261	0					
ANR	3152286	Identifier	convert		3152261	1					
ANR	3152287	ArgumentList	uenc -> userData		3152261	1					
ANR	3152288	Argument	uenc -> userData		3152261	0					
ANR	3152289	PtrMemberAccess	uenc -> userData		3152261	0					
ANR	3152290	Identifier	uenc		3152261	0					
ANR	3152291	Identifier	userData		3152261	1					
ANR	3152292	Argument	p		3152261	1					
ANR	3152293	Identifier	p		3152261	0					
ANR	3152294	IfStatement	if ( c & ~0xFFFF )		3152261	2					
ANR	3152295	Condition	c & ~0xFFFF	1426:6:36253:36263	3152261	0	True				
ANR	3152296	BitAndExpression	c & ~0xFFFF		3152261	0		&			
ANR	3152297	Identifier	c		3152261	0					
ANR	3152298	Identifier	~0xFFFF		3152261	1					
ANR	3152299	ReturnStatement	return 0 ;	1427:4:36270:36278	3152261	1	True				
ANR	3152300	PrimaryExpression	0		3152261	0					
ANR	3152301	ReturnStatement	"return UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xFF ) ;"	1428:2:36282:36335	3152261	3	True				
ANR	3152302	CallExpression	"UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xFF )"		3152261	0					
ANR	3152303	Callee	UCS2_GET_NAMING		3152261	0					
ANR	3152304	Identifier	UCS2_GET_NAMING		3152261	0					
ANR	3152305	ArgumentList	nmstrtPages		3152261	1					
ANR	3152306	Argument	nmstrtPages		3152261	0					
ANR	3152307	Identifier	nmstrtPages		3152261	0					
ANR	3152308	Argument	c >> 8		3152261	1					
ANR	3152309	ShiftExpression	c >> 8		3152261	0		>>			
ANR	3152310	Identifier	c		3152261	0					
ANR	3152311	PrimaryExpression	8		3152261	1					
ANR	3152312	Argument	c & 0xFF		3152261	2					
ANR	3152313	BitAndExpression	c & 0xFF		3152261	0		&			
ANR	3152314	Identifier	c		3152261	0					
ANR	3152315	PrimaryExpression	0xFF		3152261	1					
ANR	3152316	ReturnType	static int PTRFASTCALL		3152261	1					
ANR	3152317	Identifier	unknown_isNmstrt		3152261	2					
ANR	3152318	ParameterList	"const ENCODING * enc , const char * p"		3152261	3					
ANR	3152319	Parameter	const ENCODING * enc	1422:17:36099:36117	3152261	0	True				
ANR	3152320	ParameterType	const ENCODING *		3152261	0					
ANR	3152321	Identifier	enc		3152261	1					
ANR	3152322	Parameter	const char * p	1422:38:36120:36132	3152261	1	True				
ANR	3152323	ParameterType	const char *		3152261	0					
ANR	3152324	Identifier	p		3152261	1					
ANR	3152325	CFGEntryNode	ENTRY		3152261		True				
ANR	3152326	CFGExitNode	EXIT		3152261		True				
ANR	3152327	Symbol	p		3152261						
ANR	3152328	Symbol	uenc -> userData		3152261						
ANR	3152329	Symbol	uenc		3152261						
ANR	3152330	Symbol	c		3152261						
ANR	3152331	Symbol	~0xFFFF		3152261						
ANR	3152332	Symbol	UCS2_GET_NAMING		3152261						
ANR	3152333	Symbol	AS_UNKNOWN_ENCODING		3152261						
ANR	3152334	Symbol	uenc -> convert		3152261						
ANR	3152335	Symbol	enc		3152261						
ANR	3152336	Symbol	* uenc		3152261						
ANR	3152337	Symbol	nmstrtPages		3152261						
ANR	3152338	Function	unknown_isInvalid	1431:0:36340:36582							
ANR	3152339	FunctionDef	"unknown_isInvalid (const ENCODING * enc , const char * p)"		3152338	0					
ANR	3152340	CompoundStatement		1433:0:36417:36582	3152338	0					
ANR	3152341	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1434:2:36421:36483	3152338	0	True				
ANR	3152342	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152338	0					
ANR	3152343	IdentifierDeclType	const struct unknown_encoding *		3152338	0					
ANR	3152344	Identifier	uenc		3152338	1					
ANR	3152345	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152338	2		=			
ANR	3152346	Identifier	uenc		3152338	0					
ANR	3152347	CallExpression	AS_UNKNOWN_ENCODING ( enc )		3152338	1					
ANR	3152348	Callee	AS_UNKNOWN_ENCODING		3152338	0					
ANR	3152349	Identifier	AS_UNKNOWN_ENCODING		3152338	0					
ANR	3152350	ArgumentList	enc		3152338	1					
ANR	3152351	Argument	enc		3152338	0					
ANR	3152352	Identifier	enc		3152338	0					
ANR	3152353	IdentifierDeclStatement	"int c = uenc -> convert ( uenc -> userData , p ) ;"	1435:2:36487:36527	3152338	1	True				
ANR	3152354	IdentifierDecl	"c = uenc -> convert ( uenc -> userData , p )"		3152338	0					
ANR	3152355	IdentifierDeclType	int		3152338	0					
ANR	3152356	Identifier	c		3152338	1					
ANR	3152357	AssignmentExpression	"c = uenc -> convert ( uenc -> userData , p )"		3152338	2		=			
ANR	3152358	Identifier	c		3152338	0					
ANR	3152359	CallExpression	"uenc -> convert ( uenc -> userData , p )"		3152338	1					
ANR	3152360	Callee	uenc -> convert		3152338	0					
ANR	3152361	PtrMemberAccess	uenc -> convert		3152338	0					
ANR	3152362	Identifier	uenc		3152338	0					
ANR	3152363	Identifier	convert		3152338	1					
ANR	3152364	ArgumentList	uenc -> userData		3152338	1					
ANR	3152365	Argument	uenc -> userData		3152338	0					
ANR	3152366	PtrMemberAccess	uenc -> userData		3152338	0					
ANR	3152367	Identifier	uenc		3152338	0					
ANR	3152368	Identifier	userData		3152338	1					
ANR	3152369	Argument	p		3152338	1					
ANR	3152370	Identifier	p		3152338	0					
ANR	3152371	ReturnStatement	return ( c & ~0xFFFF ) || checkCharRefNumber ( c ) < 0 ;	1436:2:36531:36580	3152338	2	True				
ANR	3152372	OrExpression	( c & ~0xFFFF ) || checkCharRefNumber ( c ) < 0		3152338	0		||			
ANR	3152373	BitAndExpression	c & ~0xFFFF		3152338	0		&			
ANR	3152374	Identifier	c		3152338	0					
ANR	3152375	Identifier	~0xFFFF		3152338	1					
ANR	3152376	RelationalExpression	checkCharRefNumber ( c ) < 0		3152338	1		<			
ANR	3152377	CallExpression	checkCharRefNumber ( c )		3152338	0					
ANR	3152378	Callee	checkCharRefNumber		3152338	0					
ANR	3152379	Identifier	checkCharRefNumber		3152338	0					
ANR	3152380	ArgumentList	c		3152338	1					
ANR	3152381	Argument	c		3152338	0					
ANR	3152382	Identifier	c		3152338	0					
ANR	3152383	PrimaryExpression	0		3152338	1					
ANR	3152384	ReturnType	static int PTRFASTCALL		3152338	1					
ANR	3152385	Identifier	unknown_isInvalid		3152338	2					
ANR	3152386	ParameterList	"const ENCODING * enc , const char * p"		3152338	3					
ANR	3152387	Parameter	const ENCODING * enc	1432:18:36381:36399	3152338	0	True				
ANR	3152388	ParameterType	const ENCODING *		3152338	0					
ANR	3152389	Identifier	enc		3152338	1					
ANR	3152390	Parameter	const char * p	1432:39:36402:36414	3152338	1	True				
ANR	3152391	ParameterType	const char *		3152338	0					
ANR	3152392	Identifier	p		3152338	1					
ANR	3152393	CFGEntryNode	ENTRY		3152338		True				
ANR	3152394	CFGExitNode	EXIT		3152338		True				
ANR	3152395	Symbol	p		3152338						
ANR	3152396	Symbol	uenc -> userData		3152338						
ANR	3152397	Symbol	uenc		3152338						
ANR	3152398	Symbol	c		3152338						
ANR	3152399	Symbol	~0xFFFF		3152338						
ANR	3152400	Symbol	AS_UNKNOWN_ENCODING		3152338						
ANR	3152401	Symbol	uenc -> convert		3152338						
ANR	3152402	Symbol	checkCharRefNumber		3152338						
ANR	3152403	Symbol	enc		3152338						
ANR	3152404	Symbol	* uenc		3152338						
ANR	3152405	Function	unknown_toUtf8	1439:0:36585:37498							
ANR	3152406	FunctionDef	"unknown_toUtf8 (const ENCODING * enc , const char * * fromP , const char * fromLim , char * * toP , const char * toLim)"		3152405	0					
ANR	3152407	CompoundStatement		1443:0:36762:37498	3152405	0					
ANR	3152408	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1444:2:36766:36828	3152405	0	True				
ANR	3152409	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152405	0					
ANR	3152410	IdentifierDeclType	const struct unknown_encoding *		3152405	0					
ANR	3152411	Identifier	uenc		3152405	1					
ANR	3152412	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152405	2		=			
ANR	3152413	Identifier	uenc		3152405	0					
ANR	3152414	CallExpression	AS_UNKNOWN_ENCODING ( enc )		3152405	1					
ANR	3152415	Callee	AS_UNKNOWN_ENCODING		3152405	0					
ANR	3152416	Identifier	AS_UNKNOWN_ENCODING		3152405	0					
ANR	3152417	ArgumentList	enc		3152405	1					
ANR	3152418	Argument	enc		3152405	0					
ANR	3152419	Identifier	enc		3152405	0					
ANR	3152420	IdentifierDeclStatement	char buf [ XML_UTF8_ENCODE_MAX ] ;	1445:2:36832:36861	3152405	1	True				
ANR	3152421	IdentifierDecl	buf [ XML_UTF8_ENCODE_MAX ]		3152405	0					
ANR	3152422	IdentifierDeclType	char [ XML_UTF8_ENCODE_MAX ]		3152405	0					
ANR	3152423	Identifier	buf		3152405	1					
ANR	3152424	Identifier	XML_UTF8_ENCODE_MAX		3152405	2					
ANR	3152425	ForStatement	for ( ; ; )		3152405	2					
ANR	3152426	CompoundStatement		6:4:139:144	3152405	0					
ANR	3152427	IdentifierDeclStatement	const char * utf8 ;	1447:4:36880:36896	3152405	0	True				
ANR	3152428	IdentifierDecl	* utf8		3152405	0					
ANR	3152429	IdentifierDeclType	const char *		3152405	0					
ANR	3152430	Identifier	utf8		3152405	1					
ANR	3152431	IdentifierDeclStatement	int n ;	1448:4:36902:36907	3152405	1	True				
ANR	3152432	IdentifierDecl	n		3152405	0					
ANR	3152433	IdentifierDeclType	int		3152405	0					
ANR	3152434	Identifier	n		3152405	1					
ANR	3152435	IfStatement	if ( * fromP == fromLim )		3152405	2					
ANR	3152436	Condition	* fromP == fromLim	1449:8:36917:36933	3152405	0	True				
ANR	3152437	EqualityExpression	* fromP == fromLim		3152405	0		==			
ANR	3152438	UnaryOperationExpression	* fromP		3152405	0					
ANR	3152439	UnaryOperator	*		3152405	0					
ANR	3152440	Identifier	fromP		3152405	1					
ANR	3152441	Identifier	fromLim		3152405	1					
ANR	3152442	ReturnStatement	return XML_CONVERT_COMPLETED ;	1450:6:36942:36970	3152405	1	True				
ANR	3152443	Identifier	XML_CONVERT_COMPLETED		3152405	0					
ANR	3152444	ExpressionStatement	utf8 = uenc -> utf8 [ ( unsigned char ) * * fromP ]	1451:4:36976:37017	3152405	3	True				
ANR	3152445	AssignmentExpression	utf8 = uenc -> utf8 [ ( unsigned char ) * * fromP ]		3152405	0		=			
ANR	3152446	Identifier	utf8		3152405	0					
ANR	3152447	ArrayIndexing	uenc -> utf8 [ ( unsigned char ) * * fromP ]		3152405	1					
ANR	3152448	PtrMemberAccess	uenc -> utf8		3152405	0					
ANR	3152449	Identifier	uenc		3152405	0					
ANR	3152450	Identifier	utf8		3152405	1					
ANR	3152451	CastExpression	( unsigned char ) * * fromP		3152405	1					
ANR	3152452	CastTarget	unsigned char		3152405	0					
ANR	3152453	UnaryOperationExpression	* * fromP		3152405	1					
ANR	3152454	UnaryOperator	*		3152405	0					
ANR	3152455	UnaryOperationExpression	* fromP		3152405	1					
ANR	3152456	UnaryOperator	*		3152405	0					
ANR	3152457	Identifier	fromP		3152405	1					
ANR	3152458	ExpressionStatement	n = * utf8 ++	1452:4:37023:37034	3152405	4	True				
ANR	3152459	AssignmentExpression	n = * utf8 ++		3152405	0		=			
ANR	3152460	Identifier	n		3152405	0					
ANR	3152461	UnaryOperationExpression	* utf8 ++		3152405	1					
ANR	3152462	UnaryOperator	*		3152405	0					
ANR	3152463	PostIncDecOperationExpression	utf8 ++		3152405	1					
ANR	3152464	Identifier	utf8		3152405	0					
ANR	3152465	IncDec	++		3152405	1					
ANR	3152466	IfStatement	if ( n == 0 )		3152405	5					
ANR	3152467	Condition	n == 0	1453:8:37044:37049	3152405	0	True				
ANR	3152468	EqualityExpression	n == 0		3152405	0		==			
ANR	3152469	Identifier	n		3152405	0					
ANR	3152470	PrimaryExpression	0		3152405	1					
ANR	3152471	CompoundStatement		12:6:297:342	3152405	1					
ANR	3152472	IdentifierDeclStatement	"int c = uenc -> convert ( uenc -> userData , * fromP ) ;"	1454:6:37060:37105	3152405	0	True				
ANR	3152473	IdentifierDecl	"c = uenc -> convert ( uenc -> userData , * fromP )"		3152405	0					
ANR	3152474	IdentifierDeclType	int		3152405	0					
ANR	3152475	Identifier	c		3152405	1					
ANR	3152476	AssignmentExpression	"c = uenc -> convert ( uenc -> userData , * fromP )"		3152405	2		=			
ANR	3152477	Identifier	c		3152405	0					
ANR	3152478	CallExpression	"uenc -> convert ( uenc -> userData , * fromP )"		3152405	1					
ANR	3152479	Callee	uenc -> convert		3152405	0					
ANR	3152480	PtrMemberAccess	uenc -> convert		3152405	0					
ANR	3152481	Identifier	uenc		3152405	0					
ANR	3152482	Identifier	convert		3152405	1					
ANR	3152483	ArgumentList	uenc -> userData		3152405	1					
ANR	3152484	Argument	uenc -> userData		3152405	0					
ANR	3152485	PtrMemberAccess	uenc -> userData		3152405	0					
ANR	3152486	Identifier	uenc		3152405	0					
ANR	3152487	Identifier	userData		3152405	1					
ANR	3152488	Argument	* fromP		3152405	1					
ANR	3152489	UnaryOperationExpression	* fromP		3152405	0					
ANR	3152490	UnaryOperator	*		3152405	0					
ANR	3152491	Identifier	fromP		3152405	1					
ANR	3152492	ExpressionStatement	"n = XmlUtf8Encode ( c , buf )"	1455:6:37113:37138	3152405	1	True				
ANR	3152493	AssignmentExpression	"n = XmlUtf8Encode ( c , buf )"		3152405	0		=			
ANR	3152494	Identifier	n		3152405	0					
ANR	3152495	CallExpression	"XmlUtf8Encode ( c , buf )"		3152405	1					
ANR	3152496	Callee	XmlUtf8Encode		3152405	0					
ANR	3152497	Identifier	XmlUtf8Encode		3152405	0					
ANR	3152498	ArgumentList	c		3152405	1					
ANR	3152499	Argument	c		3152405	0					
ANR	3152500	Identifier	c		3152405	0					
ANR	3152501	Argument	buf		3152405	1					
ANR	3152502	Identifier	buf		3152405	0					
ANR	3152503	IfStatement	if ( n > toLim - * toP )		3152405	2					
ANR	3152504	Condition	n > toLim - * toP	1456:10:37150:37165	3152405	0	True				
ANR	3152505	RelationalExpression	n > toLim - * toP		3152405	0		>			
ANR	3152506	Identifier	n		3152405	0					
ANR	3152507	AdditiveExpression	toLim - * toP		3152405	1		-			
ANR	3152508	Identifier	toLim		3152405	0					
ANR	3152509	UnaryOperationExpression	* toP		3152405	1					
ANR	3152510	UnaryOperator	*		3152405	0					
ANR	3152511	Identifier	toP		3152405	1					
ANR	3152512	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	1457:8:37176:37211	3152405	1	True				
ANR	3152513	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3152405	0					
ANR	3152514	ExpressionStatement	utf8 = buf	1458:6:37219:37229	3152405	3	True				
ANR	3152515	AssignmentExpression	utf8 = buf		3152405	0		=			
ANR	3152516	Identifier	utf8		3152405	0					
ANR	3152517	Identifier	buf		3152405	1					
ANR	3152518	ExpressionStatement	* fromP += ( AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 ) )	1459:6:37237:37336	3152405	4	True				
ANR	3152519	AssignmentExpression	* fromP += ( AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 ) )		3152405	0		+=			
ANR	3152520	UnaryOperationExpression	* fromP		3152405	0					
ANR	3152521	UnaryOperator	*		3152405	0					
ANR	3152522	Identifier	fromP		3152405	1					
ANR	3152523	AdditiveExpression	AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 )		3152405	1		-			
ANR	3152524	ArrayIndexing	AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ]		3152405	0					
ANR	3152525	PtrMemberAccess	AS_NORMAL_ENCODING ( enc ) -> type		3152405	0					
ANR	3152526	CallExpression	AS_NORMAL_ENCODING ( enc )		3152405	0					
ANR	3152527	Callee	AS_NORMAL_ENCODING		3152405	0					
ANR	3152528	Identifier	AS_NORMAL_ENCODING		3152405	0					
ANR	3152529	ArgumentList	enc		3152405	1					
ANR	3152530	Argument	enc		3152405	0					
ANR	3152531	Identifier	enc		3152405	0					
ANR	3152532	Identifier	type		3152405	1					
ANR	3152533	CastExpression	( unsigned char ) * * fromP		3152405	1					
ANR	3152534	CastTarget	unsigned char		3152405	0					
ANR	3152535	UnaryOperationExpression	* * fromP		3152405	1					
ANR	3152536	UnaryOperator	*		3152405	0					
ANR	3152537	UnaryOperationExpression	* fromP		3152405	1					
ANR	3152538	UnaryOperator	*		3152405	0					
ANR	3152539	Identifier	fromP		3152405	1					
ANR	3152540	AdditiveExpression	BT_LEAD2 - 2		3152405	1		-			
ANR	3152541	Identifier	BT_LEAD2		3152405	0					
ANR	3152542	PrimaryExpression	2		3152405	1					
ANR	3152543	ElseStatement	else		3152405	0					
ANR	3152544	CompoundStatement		20:9:590:590	3152405	0					
ANR	3152545	IfStatement	if ( n > toLim - * toP )		3152405	0					
ANR	3152546	Condition	n > toLim - * toP	1463:10:37365:37380	3152405	0	True				
ANR	3152547	RelationalExpression	n > toLim - * toP		3152405	0		>			
ANR	3152548	Identifier	n		3152405	0					
ANR	3152549	AdditiveExpression	toLim - * toP		3152405	1		-			
ANR	3152550	Identifier	toLim		3152405	0					
ANR	3152551	UnaryOperationExpression	* toP		3152405	1					
ANR	3152552	UnaryOperator	*		3152405	0					
ANR	3152553	Identifier	toP		3152405	1					
ANR	3152554	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	1464:8:37391:37426	3152405	1	True				
ANR	3152555	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3152405	0					
ANR	3152556	ExpressionStatement	( * fromP ) ++	1465:6:37434:37444	3152405	1	True				
ANR	3152557	PostIncDecOperationExpression	( * fromP ) ++		3152405	0					
ANR	3152558	UnaryOperationExpression	* fromP		3152405	0					
ANR	3152559	UnaryOperator	*		3152405	0					
ANR	3152560	Identifier	fromP		3152405	1					
ANR	3152561	IncDec	++		3152405	1					
ANR	3152562	ExpressionStatement	"memcpy ( * toP , utf8 , n )"	1467:4:37456:37477	3152405	6	True				
ANR	3152563	CallExpression	"memcpy ( * toP , utf8 , n )"		3152405	0					
ANR	3152564	Callee	memcpy		3152405	0					
ANR	3152565	Identifier	memcpy		3152405	0					
ANR	3152566	ArgumentList	* toP		3152405	1					
ANR	3152567	Argument	* toP		3152405	0					
ANR	3152568	UnaryOperationExpression	* toP		3152405	0					
ANR	3152569	UnaryOperator	*		3152405	0					
ANR	3152570	Identifier	toP		3152405	1					
ANR	3152571	Argument	utf8		3152405	1					
ANR	3152572	Identifier	utf8		3152405	0					
ANR	3152573	Argument	n		3152405	2					
ANR	3152574	Identifier	n		3152405	0					
ANR	3152575	ExpressionStatement	* toP += n	1468:4:37483:37492	3152405	7	True				
ANR	3152576	AssignmentExpression	* toP += n		3152405	0		+=			
ANR	3152577	UnaryOperationExpression	* toP		3152405	0					
ANR	3152578	UnaryOperator	*		3152405	0					
ANR	3152579	Identifier	toP		3152405	1					
ANR	3152580	Identifier	n		3152405	1					
ANR	3152581	ReturnType	static enum XML_Convert_Result PTRCALL		3152405	1					
ANR	3152582	Identifier	unknown_toUtf8		3152405	2					
ANR	3152583	ParameterList	"const ENCODING * enc , const char * * fromP , const char * fromLim , char * * toP , const char * toLim"		3152405	3					
ANR	3152584	Parameter	const ENCODING * enc	1440:15:36639:36657	3152405	0	True				
ANR	3152585	ParameterType	const ENCODING *		3152405	0					
ANR	3152586	Identifier	enc		3152405	1					
ANR	3152587	Parameter	const char * * fromP	1441:15:36675:36692	3152405	1	True				
ANR	3152588	ParameterType	const char * *		3152405	0					
ANR	3152589	Identifier	fromP		3152405	1					
ANR	3152590	Parameter	const char * fromLim	1441:35:36695:36713	3152405	2	True				
ANR	3152591	ParameterType	const char *		3152405	0					
ANR	3152592	Identifier	fromLim		3152405	1					
ANR	3152593	Parameter	char * * toP	1442:15:36731:36740	3152405	3	True				
ANR	3152594	ParameterType	char * *		3152405	0					
ANR	3152595	Identifier	toP		3152405	1					
ANR	3152596	Parameter	const char * toLim	1442:27:36743:36759	3152405	4	True				
ANR	3152597	ParameterType	const char *		3152405	0					
ANR	3152598	Identifier	toLim		3152405	1					
ANR	3152599	CFGEntryNode	ENTRY		3152405		True				
ANR	3152600	CFGExitNode	EXIT		3152405		True				
ANR	3152601	InfiniteForNode	true		3152405		True				
ANR	3152602	Symbol	uenc -> userData		3152405						
ANR	3152603	Symbol	* * * fromP		3152405						
ANR	3152604	Symbol	toLim		3152405						
ANR	3152605	Symbol	* fromP		3152405						
ANR	3152606	Symbol	* uenc -> utf8		3152405						
ANR	3152607	Symbol	AS_NORMAL_ENCODING		3152405						
ANR	3152608	Symbol	utf8		3152405						
ANR	3152609	Symbol	AS_UNKNOWN_ENCODING		3152405						
ANR	3152610	Symbol	uenc -> convert		3152405						
ANR	3152611	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		3152405						
ANR	3152612	Symbol	* * AS_NORMAL_ENCODING		3152405						
ANR	3152613	Symbol	fromLim		3152405						
ANR	3152614	Symbol	enc		3152405						
ANR	3152615	Symbol	* uenc		3152405						
ANR	3152616	Symbol	* toP		3152405						
ANR	3152617	Symbol	c		3152405						
ANR	3152618	Symbol	XmlUtf8Encode		3152405						
ANR	3152619	Symbol	* AS_NORMAL_ENCODING		3152405						
ANR	3152620	Symbol	* AS_NORMAL_ENCODING ( enc ) -> type		3152405						
ANR	3152621	Symbol	* * fromP		3152405						
ANR	3152622	Symbol	AS_NORMAL_ENCODING ( enc ) -> type		3152405						
ANR	3152623	Symbol	* * uenc		3152405						
ANR	3152624	Symbol	BT_LEAD2		3152405						
ANR	3152625	Symbol	n		3152405						
ANR	3152626	Symbol	uenc -> utf8		3152405						
ANR	3152627	Symbol	buf		3152405						
ANR	3152628	Symbol	uenc		3152405						
ANR	3152629	Symbol	fromP		3152405						
ANR	3152630	Symbol	toP		3152405						
ANR	3152631	Symbol	* utf8 ++		3152405						
ANR	3152632	Symbol	XML_CONVERT_COMPLETED		3152405						
ANR	3152633	Function	unknown_toUtf16	1472:0:37501:38259							
ANR	3152634	FunctionDef	"unknown_toUtf16 (const ENCODING * enc , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim)"		3152633	0					
ANR	3152635	CompoundStatement		1476:0:37701:38259	3152633	0					
ANR	3152636	IdentifierDeclStatement	const struct unknown_encoding * uenc = AS_UNKNOWN_ENCODING ( enc ) ;	1477:2:37705:37767	3152633	0	True				
ANR	3152637	IdentifierDecl	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152633	0					
ANR	3152638	IdentifierDeclType	const struct unknown_encoding *		3152633	0					
ANR	3152639	Identifier	uenc		3152633	1					
ANR	3152640	AssignmentExpression	* uenc = AS_UNKNOWN_ENCODING ( enc )		3152633	2		=			
ANR	3152641	Identifier	uenc		3152633	0					
ANR	3152642	CallExpression	AS_UNKNOWN_ENCODING ( enc )		3152633	1					
ANR	3152643	Callee	AS_UNKNOWN_ENCODING		3152633	0					
ANR	3152644	Identifier	AS_UNKNOWN_ENCODING		3152633	0					
ANR	3152645	ArgumentList	enc		3152633	1					
ANR	3152646	Argument	enc		3152633	0					
ANR	3152647	Identifier	enc		3152633	0					
ANR	3152648	WhileStatement	while ( * fromP < fromLim && * toP < toLim )		3152633	1					
ANR	3152649	Condition	* fromP < fromLim && * toP < toLim	1478:9:37778:37809	3152633	0	True				
ANR	3152650	AndExpression	* fromP < fromLim && * toP < toLim		3152633	0		&&			
ANR	3152651	RelationalExpression	* fromP < fromLim		3152633	0		<			
ANR	3152652	UnaryOperationExpression	* fromP		3152633	0					
ANR	3152653	UnaryOperator	*		3152633	0					
ANR	3152654	Identifier	fromP		3152633	1					
ANR	3152655	Identifier	fromLim		3152633	1					
ANR	3152656	RelationalExpression	* toP < toLim		3152633	1		<			
ANR	3152657	UnaryOperationExpression	* toP		3152633	0					
ANR	3152658	UnaryOperator	*		3152633	0					
ANR	3152659	Identifier	toP		3152633	1					
ANR	3152660	Identifier	toLim		3152633	1					
ANR	3152661	CompoundStatement		4:4:116:170	3152633	1					
ANR	3152662	IdentifierDeclStatement	unsigned short c = uenc -> utf16 [ ( unsigned char ) * * fromP ] ;	1479:4:37818:37872	3152633	0	True				
ANR	3152663	IdentifierDecl	c = uenc -> utf16 [ ( unsigned char ) * * fromP ]		3152633	0					
ANR	3152664	IdentifierDeclType	unsigned short		3152633	0					
ANR	3152665	Identifier	c		3152633	1					
ANR	3152666	AssignmentExpression	c = uenc -> utf16 [ ( unsigned char ) * * fromP ]		3152633	2		=			
ANR	3152667	Identifier	c		3152633	0					
ANR	3152668	ArrayIndexing	uenc -> utf16 [ ( unsigned char ) * * fromP ]		3152633	1					
ANR	3152669	PtrMemberAccess	uenc -> utf16		3152633	0					
ANR	3152670	Identifier	uenc		3152633	0					
ANR	3152671	Identifier	utf16		3152633	1					
ANR	3152672	CastExpression	( unsigned char ) * * fromP		3152633	1					
ANR	3152673	CastTarget	unsigned char		3152633	0					
ANR	3152674	UnaryOperationExpression	* * fromP		3152633	1					
ANR	3152675	UnaryOperator	*		3152633	0					
ANR	3152676	UnaryOperationExpression	* fromP		3152633	1					
ANR	3152677	UnaryOperator	*		3152633	0					
ANR	3152678	Identifier	fromP		3152633	1					
ANR	3152679	IfStatement	if ( c == 0 )		3152633	1					
ANR	3152680	Condition	c == 0	1480:8:37882:37887	3152633	0	True				
ANR	3152681	EqualityExpression	c == 0		3152633	0		==			
ANR	3152682	Identifier	c		3152633	0					
ANR	3152683	PrimaryExpression	0		3152633	1					
ANR	3152684	CompoundStatement		5:16:188:188	3152633	1					
ANR	3152685	ExpressionStatement	"c = ( unsigned short ) uenc -> convert ( uenc -> userData , * fromP )"	1481:6:37898:37966	3152633	0	True				
ANR	3152686	AssignmentExpression	"c = ( unsigned short ) uenc -> convert ( uenc -> userData , * fromP )"		3152633	0		=			
ANR	3152687	Identifier	c		3152633	0					
ANR	3152688	CastExpression	"( unsigned short ) uenc -> convert ( uenc -> userData , * fromP )"		3152633	1					
ANR	3152689	CastTarget	unsigned short		3152633	0					
ANR	3152690	CallExpression	"uenc -> convert ( uenc -> userData , * fromP )"		3152633	1					
ANR	3152691	Callee	uenc -> convert		3152633	0					
ANR	3152692	PtrMemberAccess	uenc -> convert		3152633	0					
ANR	3152693	Identifier	uenc		3152633	0					
ANR	3152694	Identifier	convert		3152633	1					
ANR	3152695	ArgumentList	uenc -> userData		3152633	1					
ANR	3152696	Argument	uenc -> userData		3152633	0					
ANR	3152697	PtrMemberAccess	uenc -> userData		3152633	0					
ANR	3152698	Identifier	uenc		3152633	0					
ANR	3152699	Identifier	userData		3152633	1					
ANR	3152700	Argument	* fromP		3152633	1					
ANR	3152701	UnaryOperationExpression	* fromP		3152633	0					
ANR	3152702	UnaryOperator	*		3152633	0					
ANR	3152703	Identifier	fromP		3152633	1					
ANR	3152704	ExpressionStatement	* fromP += ( AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 ) )	1483:6:37974:38073	3152633	1	True				
ANR	3152705	AssignmentExpression	* fromP += ( AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 ) )		3152633	0		+=			
ANR	3152706	UnaryOperationExpression	* fromP		3152633	0					
ANR	3152707	UnaryOperator	*		3152633	0					
ANR	3152708	Identifier	fromP		3152633	1					
ANR	3152709	AdditiveExpression	AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ] - ( BT_LEAD2 - 2 )		3152633	1		-			
ANR	3152710	ArrayIndexing	AS_NORMAL_ENCODING ( enc ) -> type [ ( unsigned char ) * * fromP ]		3152633	0					
ANR	3152711	PtrMemberAccess	AS_NORMAL_ENCODING ( enc ) -> type		3152633	0					
ANR	3152712	CallExpression	AS_NORMAL_ENCODING ( enc )		3152633	0					
ANR	3152713	Callee	AS_NORMAL_ENCODING		3152633	0					
ANR	3152714	Identifier	AS_NORMAL_ENCODING		3152633	0					
ANR	3152715	ArgumentList	enc		3152633	1					
ANR	3152716	Argument	enc		3152633	0					
ANR	3152717	Identifier	enc		3152633	0					
ANR	3152718	Identifier	type		3152633	1					
ANR	3152719	CastExpression	( unsigned char ) * * fromP		3152633	1					
ANR	3152720	CastTarget	unsigned char		3152633	0					
ANR	3152721	UnaryOperationExpression	* * fromP		3152633	1					
ANR	3152722	UnaryOperator	*		3152633	0					
ANR	3152723	UnaryOperationExpression	* fromP		3152633	1					
ANR	3152724	UnaryOperator	*		3152633	0					
ANR	3152725	Identifier	fromP		3152633	1					
ANR	3152726	AdditiveExpression	BT_LEAD2 - 2		3152633	1		-			
ANR	3152727	Identifier	BT_LEAD2		3152633	0					
ANR	3152728	PrimaryExpression	2		3152633	1					
ANR	3152729	ElseStatement	else		3152633	0					
ANR	3152730	ExpressionStatement	( * fromP ) ++	1487:6:38096:38106	3152633	0	True				
ANR	3152731	PostIncDecOperationExpression	( * fromP ) ++		3152633	0					
ANR	3152732	UnaryOperationExpression	* fromP		3152633	0					
ANR	3152733	UnaryOperator	*		3152633	0					
ANR	3152734	Identifier	fromP		3152633	1					
ANR	3152735	IncDec	++		3152633	1					
ANR	3152736	ExpressionStatement	* ( * toP ) ++ = c	1488:4:38112:38125	3152633	2	True				
ANR	3152737	AssignmentExpression	* ( * toP ) ++ = c		3152633	0		=			
ANR	3152738	UnaryOperationExpression	* ( * toP ) ++		3152633	0					
ANR	3152739	UnaryOperator	*		3152633	0					
ANR	3152740	PostIncDecOperationExpression	( * toP ) ++		3152633	1					
ANR	3152741	UnaryOperationExpression	* toP		3152633	0					
ANR	3152742	UnaryOperator	*		3152633	0					
ANR	3152743	Identifier	toP		3152633	1					
ANR	3152744	IncDec	++		3152633	1					
ANR	3152745	Identifier	c		3152633	1					
ANR	3152746	IfStatement	if ( ( * toP == toLim ) && ( * fromP < fromLim ) )		3152633	2					
ANR	3152747	Condition	( * toP == toLim ) && ( * fromP < fromLim )	1491:6:38138:38174	3152633	0	True				
ANR	3152748	AndExpression	( * toP == toLim ) && ( * fromP < fromLim )		3152633	0		&&			
ANR	3152749	EqualityExpression	* toP == toLim		3152633	0		==			
ANR	3152750	UnaryOperationExpression	* toP		3152633	0					
ANR	3152751	UnaryOperator	*		3152633	0					
ANR	3152752	Identifier	toP		3152633	1					
ANR	3152753	Identifier	toLim		3152633	1					
ANR	3152754	RelationalExpression	* fromP < fromLim		3152633	1		<			
ANR	3152755	UnaryOperationExpression	* fromP		3152633	0					
ANR	3152756	UnaryOperator	*		3152633	0					
ANR	3152757	Identifier	fromP		3152633	1					
ANR	3152758	Identifier	fromLim		3152633	1					
ANR	3152759	ReturnStatement	return XML_CONVERT_OUTPUT_EXHAUSTED ;	1492:4:38181:38216	3152633	1	True				
ANR	3152760	Identifier	XML_CONVERT_OUTPUT_EXHAUSTED		3152633	0					
ANR	3152761	ElseStatement	else		3152633	0					
ANR	3152762	ReturnStatement	return XML_CONVERT_COMPLETED ;	1494:4:38229:38257	3152633	0	True				
ANR	3152763	Identifier	XML_CONVERT_COMPLETED		3152633	0					
ANR	3152764	ReturnType	static enum XML_Convert_Result PTRCALL		3152633	1					
ANR	3152765	Identifier	unknown_toUtf16		3152633	2					
ANR	3152766	ParameterList	"const ENCODING * enc , const char * * fromP , const char * fromLim , unsigned short * * toP , const unsigned short * toLim"		3152633	3					
ANR	3152767	Parameter	const ENCODING * enc	1473:16:37556:37574	3152633	0	True				
ANR	3152768	ParameterType	const ENCODING *		3152633	0					
ANR	3152769	Identifier	enc		3152633	1					
ANR	3152770	Parameter	const char * * fromP	1474:16:37593:37610	3152633	1	True				
ANR	3152771	ParameterType	const char * *		3152633	0					
ANR	3152772	Identifier	fromP		3152633	1					
ANR	3152773	Parameter	const char * fromLim	1474:36:37613:37631	3152633	2	True				
ANR	3152774	ParameterType	const char *		3152633	0					
ANR	3152775	Identifier	fromLim		3152633	1					
ANR	3152776	Parameter	unsigned short * * toP	1475:16:37650:37669	3152633	3	True				
ANR	3152777	ParameterType	unsigned short * *		3152633	0					
ANR	3152778	Identifier	toP		3152633	1					
ANR	3152779	Parameter	const unsigned short * toLim	1475:38:37672:37698	3152633	4	True				
ANR	3152780	ParameterType	const unsigned short *		3152633	0					
ANR	3152781	Identifier	toLim		3152633	1					
ANR	3152782	CFGEntryNode	ENTRY		3152633		True				
ANR	3152783	CFGExitNode	EXIT		3152633		True				
ANR	3152784	Symbol	uenc -> userData		3152633						
ANR	3152785	Symbol	* * * fromP		3152633						
ANR	3152786	Symbol	toLim		3152633						
ANR	3152787	Symbol	* fromP		3152633						
ANR	3152788	Symbol	AS_NORMAL_ENCODING		3152633						
ANR	3152789	Symbol	AS_UNKNOWN_ENCODING		3152633						
ANR	3152790	Symbol	uenc -> convert		3152633						
ANR	3152791	Symbol	* * AS_NORMAL_ENCODING		3152633						
ANR	3152792	Symbol	XML_CONVERT_OUTPUT_EXHAUSTED		3152633						
ANR	3152793	Symbol	* ( * toP ) ++		3152633						
ANR	3152794	Symbol	uenc -> utf16		3152633						
ANR	3152795	Symbol	fromLim		3152633						
ANR	3152796	Symbol	enc		3152633						
ANR	3152797	Symbol	* uenc		3152633						
ANR	3152798	Symbol	* toP		3152633						
ANR	3152799	Symbol	* uenc -> utf16		3152633						
ANR	3152800	Symbol	c		3152633						
ANR	3152801	Symbol	* AS_NORMAL_ENCODING		3152633						
ANR	3152802	Symbol	* AS_NORMAL_ENCODING ( enc ) -> type		3152633						
ANR	3152803	Symbol	* * fromP		3152633						
ANR	3152804	Symbol	AS_NORMAL_ENCODING ( enc ) -> type		3152633						
ANR	3152805	Symbol	* * uenc		3152633						
ANR	3152806	Symbol	BT_LEAD2		3152633						
ANR	3152807	Symbol	uenc		3152633						
ANR	3152808	Symbol	fromP		3152633						
ANR	3152809	Symbol	toP		3152633						
ANR	3152810	Symbol	XML_CONVERT_COMPLETED		3152633						
ANR	3152811	Function	XmlInitUnknownEncoding	1497:0:38262:40809							
ANR	3152812	FunctionDef	"XmlInitUnknownEncoding (void * mem , int * table , CONVERTER convert , void * userData)"		3152811	0					
ANR	3152813	CompoundStatement		1502:0:38423:40809	3152811	0					
ANR	3152814	IdentifierDeclStatement	int i ;	1503:2:38427:38432	3152811	0	True				
ANR	3152815	IdentifierDecl	i		3152811	0					
ANR	3152816	IdentifierDeclType	int		3152811	0					
ANR	3152817	Identifier	i		3152811	1					
ANR	3152818	IdentifierDeclStatement	struct unknown_encoding * e = ( struct unknown_encoding * ) mem ;	1504:2:38436:38495	3152811	1	True				
ANR	3152819	IdentifierDecl	* e = ( struct unknown_encoding * ) mem		3152811	0					
ANR	3152820	IdentifierDeclType	struct unknown_encoding *		3152811	0					
ANR	3152821	Identifier	e		3152811	1					
ANR	3152822	AssignmentExpression	* e = ( struct unknown_encoding * ) mem		3152811	2		=			
ANR	3152823	Identifier	e		3152811	0					
ANR	3152824	CastExpression	( struct unknown_encoding * ) mem		3152811	1					
ANR	3152825	CastTarget	struct unknown_encoding *		3152811	0					
ANR	3152826	Identifier	mem		3152811	1					
ANR	3152827	ForStatement	for ( i = 0 ; i < ( int ) sizeof ( struct normal_encoding ) ; i ++ )		3152811	2					
ANR	3152828	ForInit	i = 0 ;	1505:7:38504:38509	3152811	0	True				
ANR	3152829	AssignmentExpression	i = 0		3152811	0		=			
ANR	3152830	Identifier	i		3152811	0					
ANR	3152831	PrimaryExpression	0		3152811	1					
ANR	3152832	Condition	i < ( int ) sizeof ( struct normal_encoding )	1505:14:38511:38549	3152811	1	True				
ANR	3152833	RelationalExpression	i < ( int ) sizeof ( struct normal_encoding )		3152811	0		<			
ANR	3152834	Identifier	i		3152811	0					
ANR	3152835	CastExpression	( int ) sizeof ( struct normal_encoding )		3152811	1					
ANR	3152836	CastTarget	int		3152811	0					
ANR	3152837	SizeofExpression	sizeof ( struct normal_encoding )		3152811	1					
ANR	3152838	Sizeof	sizeof		3152811	0					
ANR	3152839	SizeofOperand	struct normal_encoding		3152811	1					
ANR	3152840	PostIncDecOperationExpression	i ++	1505:55:38552:38554	3152811	2	True				
ANR	3152841	Identifier	i		3152811	0					
ANR	3152842	IncDec	++		3152811	1					
ANR	3152843	ExpressionStatement	( ( char * ) mem ) [ i ] = ( ( char * ) & latin1_encoding ) [ i ]	1506:4:38561:38609	3152811	3	True				
ANR	3152844	AssignmentExpression	( ( char * ) mem ) [ i ] = ( ( char * ) & latin1_encoding ) [ i ]		3152811	0		=			
ANR	3152845	ArrayIndexing	( ( char * ) mem ) [ i ]		3152811	0					
ANR	3152846	CastExpression	( char * ) mem		3152811	0					
ANR	3152847	CastTarget	char *		3152811	0					
ANR	3152848	Identifier	mem		3152811	1					
ANR	3152849	Identifier	i		3152811	1					
ANR	3152850	ArrayIndexing	( ( char * ) & latin1_encoding ) [ i ]		3152811	1					
ANR	3152851	CastExpression	( char * ) & latin1_encoding		3152811	0					
ANR	3152852	CastTarget	char *		3152811	0					
ANR	3152853	UnaryOperationExpression	& latin1_encoding		3152811	1					
ANR	3152854	UnaryOperator	&		3152811	0					
ANR	3152855	Identifier	latin1_encoding		3152811	1					
ANR	3152856	Identifier	i		3152811	1					
ANR	3152857	ForStatement	for ( i = 0 ; i < 128 ; i ++ )		3152811	3					
ANR	3152858	ForInit	i = 0 ;	1507:7:38618:38623	3152811	0	True				
ANR	3152859	AssignmentExpression	i = 0		3152811	0		=			
ANR	3152860	Identifier	i		3152811	0					
ANR	3152861	PrimaryExpression	0		3152811	1					
ANR	3152862	Condition	i < 128	1507:14:38625:38631	3152811	1	True				
ANR	3152863	RelationalExpression	i < 128		3152811	0		<			
ANR	3152864	Identifier	i		3152811	0					
ANR	3152865	PrimaryExpression	128		3152811	1					
ANR	3152866	PostIncDecOperationExpression	i ++	1507:23:38634:38636	3152811	2	True				
ANR	3152867	Identifier	i		3152811	0					
ANR	3152868	IncDec	++		3152811	1					
ANR	3152869	IfStatement	if ( latin1_encoding . type [ i ] != BT_OTHER && latin1_encoding . type [ i ] != BT_NONXML && table [ i ] != i )		3152811	3					
ANR	3152870	Condition	latin1_encoding . type [ i ] != BT_OTHER && latin1_encoding . type [ i ] != BT_NONXML && table [ i ] != i	1508:8:38647:38754	3152811	0	True				
ANR	3152871	AndExpression	latin1_encoding . type [ i ] != BT_OTHER && latin1_encoding . type [ i ] != BT_NONXML && table [ i ] != i		3152811	0		&&			
ANR	3152872	EqualityExpression	latin1_encoding . type [ i ] != BT_OTHER		3152811	0		!=			
ANR	3152873	ArrayIndexing	latin1_encoding . type [ i ]		3152811	0					
ANR	3152874	MemberAccess	latin1_encoding . type		3152811	0					
ANR	3152875	Identifier	latin1_encoding		3152811	0					
ANR	3152876	Identifier	type		3152811	1					
ANR	3152877	Identifier	i		3152811	1					
ANR	3152878	Identifier	BT_OTHER		3152811	1					
ANR	3152879	AndExpression	latin1_encoding . type [ i ] != BT_NONXML && table [ i ] != i		3152811	1		&&			
ANR	3152880	EqualityExpression	latin1_encoding . type [ i ] != BT_NONXML		3152811	0		!=			
ANR	3152881	ArrayIndexing	latin1_encoding . type [ i ]		3152811	0					
ANR	3152882	MemberAccess	latin1_encoding . type		3152811	0					
ANR	3152883	Identifier	latin1_encoding		3152811	0					
ANR	3152884	Identifier	type		3152811	1					
ANR	3152885	Identifier	i		3152811	1					
ANR	3152886	Identifier	BT_NONXML		3152811	1					
ANR	3152887	EqualityExpression	table [ i ] != i		3152811	1		!=			
ANR	3152888	ArrayIndexing	table [ i ]		3152811	0					
ANR	3152889	Identifier	table		3152811	0					
ANR	3152890	Identifier	i		3152811	1					
ANR	3152891	Identifier	i		3152811	1					
ANR	3152892	ReturnStatement	return 0 ;	1511:6:38763:38771	3152811	1	True				
ANR	3152893	PrimaryExpression	0		3152811	0					
ANR	3152894	ForStatement	for ( i = 0 ; i < 256 ; i ++ )		3152811	4					
ANR	3152895	ForInit	i = 0 ;	1512:7:38780:38785	3152811	0	True				
ANR	3152896	AssignmentExpression	i = 0		3152811	0		=			
ANR	3152897	Identifier	i		3152811	0					
ANR	3152898	PrimaryExpression	0		3152811	1					
ANR	3152899	Condition	i < 256	1512:14:38787:38793	3152811	1	True				
ANR	3152900	RelationalExpression	i < 256		3152811	0		<			
ANR	3152901	Identifier	i		3152811	0					
ANR	3152902	PrimaryExpression	256		3152811	1					
ANR	3152903	PostIncDecOperationExpression	i ++	1512:23:38796:38798	3152811	2	True				
ANR	3152904	Identifier	i		3152811	0					
ANR	3152905	IncDec	++		3152811	1					
ANR	3152906	CompoundStatement		12:4:383:399	3152811	3					
ANR	3152907	IdentifierDeclStatement	int c = table [ i ] ;	1513:4:38807:38823	3152811	0	True				
ANR	3152908	IdentifierDecl	c = table [ i ]		3152811	0					
ANR	3152909	IdentifierDeclType	int		3152811	0					
ANR	3152910	Identifier	c		3152811	1					
ANR	3152911	AssignmentExpression	c = table [ i ]		3152811	2		=			
ANR	3152912	Identifier	c		3152811	0					
ANR	3152913	ArrayIndexing	table [ i ]		3152811	1					
ANR	3152914	Identifier	table		3152811	0					
ANR	3152915	Identifier	i		3152811	1					
ANR	3152916	IfStatement	if ( c == - 1 )		3152811	1					
ANR	3152917	Condition	c == - 1	1514:8:38833:38839	3152811	0	True				
ANR	3152918	EqualityExpression	c == - 1		3152811	0		==			
ANR	3152919	Identifier	c		3152811	0					
ANR	3152920	UnaryOperationExpression	- 1		3152811	1					
ANR	3152921	UnaryOperator	-		3152811	0					
ANR	3152922	PrimaryExpression	1		3152811	1					
ANR	3152923	CompoundStatement		13:17:418:418	3152811	1					
ANR	3152924	ExpressionStatement	e -> normal . type [ i ] = BT_MALFORM	1515:6:38850:38880	3152811	0	True				
ANR	3152925	AssignmentExpression	e -> normal . type [ i ] = BT_MALFORM		3152811	0		=			
ANR	3152926	ArrayIndexing	e -> normal . type [ i ]		3152811	0					
ANR	3152927	MemberAccess	e -> normal . type		3152811	0					
ANR	3152928	PtrMemberAccess	e -> normal		3152811	0					
ANR	3152929	Identifier	e		3152811	0					
ANR	3152930	Identifier	normal		3152811	1					
ANR	3152931	Identifier	type		3152811	1					
ANR	3152932	Identifier	i		3152811	1					
ANR	3152933	Identifier	BT_MALFORM		3152811	1					
ANR	3152934	ExpressionStatement	e -> utf16 [ i ] = 0xFFFF	1517:6:38932:38952	3152811	1	True				
ANR	3152935	AssignmentExpression	e -> utf16 [ i ] = 0xFFFF		3152811	0		=			
ANR	3152936	ArrayIndexing	e -> utf16 [ i ]		3152811	0					
ANR	3152937	PtrMemberAccess	e -> utf16		3152811	0					
ANR	3152938	Identifier	e		3152811	0					
ANR	3152939	Identifier	utf16		3152811	1					
ANR	3152940	Identifier	i		3152811	1					
ANR	3152941	PrimaryExpression	0xFFFF		3152811	1					
ANR	3152942	ExpressionStatement	e -> utf8 [ i ] [ 0 ] = 1	1518:6:38960:38977	3152811	2	True				
ANR	3152943	AssignmentExpression	e -> utf8 [ i ] [ 0 ] = 1		3152811	0		=			
ANR	3152944	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		3152811	0					
ANR	3152945	ArrayIndexing	e -> utf8 [ i ]		3152811	0					
ANR	3152946	PtrMemberAccess	e -> utf8		3152811	0					
ANR	3152947	Identifier	e		3152811	0					
ANR	3152948	Identifier	utf8		3152811	1					
ANR	3152949	Identifier	i		3152811	1					
ANR	3152950	PrimaryExpression	0		3152811	1					
ANR	3152951	PrimaryExpression	1		3152811	1					
ANR	3152952	ExpressionStatement	e -> utf8 [ i ] [ 1 ] = 0	1519:6:38985:39002	3152811	3	True				
ANR	3152953	AssignmentExpression	e -> utf8 [ i ] [ 1 ] = 0		3152811	0		=			
ANR	3152954	ArrayIndexing	e -> utf8 [ i ] [ 1 ]		3152811	0					
ANR	3152955	ArrayIndexing	e -> utf8 [ i ]		3152811	0					
ANR	3152956	PtrMemberAccess	e -> utf8		3152811	0					
ANR	3152957	Identifier	e		3152811	0					
ANR	3152958	Identifier	utf8		3152811	1					
ANR	3152959	Identifier	i		3152811	1					
ANR	3152960	PrimaryExpression	1		3152811	1					
ANR	3152961	PrimaryExpression	0		3152811	1					
ANR	3152962	ElseStatement	else		3152811	0					
ANR	3152963	IfStatement	if ( c < 0 )		3152811	0					
ANR	3152964	Condition	c < 0	1521:13:39023:39027	3152811	0	True				
ANR	3152965	RelationalExpression	c < 0		3152811	0		<			
ANR	3152966	Identifier	c		3152811	0					
ANR	3152967	PrimaryExpression	0		3152811	1					
ANR	3152968	CompoundStatement		20:20:606:606	3152811	1					
ANR	3152969	IfStatement	if ( c < - 4 )		3152811	0					
ANR	3152970	Condition	c < - 4	1522:10:39042:39047	3152811	0	True				
ANR	3152971	RelationalExpression	c < - 4		3152811	0		<			
ANR	3152972	Identifier	c		3152811	0					
ANR	3152973	UnaryOperationExpression	- 4		3152811	1					
ANR	3152974	UnaryOperator	-		3152811	0					
ANR	3152975	PrimaryExpression	4		3152811	1					
ANR	3152976	ReturnStatement	return 0 ;	1523:8:39058:39066	3152811	1	True				
ANR	3152977	PrimaryExpression	0		3152811	0					
ANR	3152978	IfStatement	if ( ! convert )		3152811	1					
ANR	3152979	Condition	! convert	1525:10:39137:39144	3152811	0	True				
ANR	3152980	UnaryOperationExpression	! convert		3152811	0					
ANR	3152981	UnaryOperator	!		3152811	0					
ANR	3152982	Identifier	convert		3152811	1					
ANR	3152983	ReturnStatement	return 0 ;	1526:8:39155:39163	3152811	1	True				
ANR	3152984	PrimaryExpression	0		3152811	0					
ANR	3152985	ExpressionStatement	e -> normal . type [ i ] = ( unsigned char ) ( BT_LEAD2 - ( c + 2 ) )	1527:6:39171:39226	3152811	2	True				
ANR	3152986	AssignmentExpression	e -> normal . type [ i ] = ( unsigned char ) ( BT_LEAD2 - ( c + 2 ) )		3152811	0		=			
ANR	3152987	ArrayIndexing	e -> normal . type [ i ]		3152811	0					
ANR	3152988	MemberAccess	e -> normal . type		3152811	0					
ANR	3152989	PtrMemberAccess	e -> normal		3152811	0					
ANR	3152990	Identifier	e		3152811	0					
ANR	3152991	Identifier	normal		3152811	1					
ANR	3152992	Identifier	type		3152811	1					
ANR	3152993	Identifier	i		3152811	1					
ANR	3152994	CastExpression	( unsigned char ) ( BT_LEAD2 - ( c + 2 ) )		3152811	1					
ANR	3152995	CastTarget	unsigned char		3152811	0					
ANR	3152996	AdditiveExpression	BT_LEAD2 - ( c + 2 )		3152811	1		-			
ANR	3152997	Identifier	BT_LEAD2		3152811	0					
ANR	3152998	AdditiveExpression	c + 2		3152811	1		+			
ANR	3152999	Identifier	c		3152811	0					
ANR	3153000	PrimaryExpression	2		3152811	1					
ANR	3153001	ExpressionStatement	e -> utf8 [ i ] [ 0 ] = 0	1528:6:39234:39251	3152811	3	True				
ANR	3153002	AssignmentExpression	e -> utf8 [ i ] [ 0 ] = 0		3152811	0		=			
ANR	3153003	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		3152811	0					
ANR	3153004	ArrayIndexing	e -> utf8 [ i ]		3152811	0					
ANR	3153005	PtrMemberAccess	e -> utf8		3152811	0					
ANR	3153006	Identifier	e		3152811	0					
ANR	3153007	Identifier	utf8		3152811	1					
ANR	3153008	Identifier	i		3152811	1					
ANR	3153009	PrimaryExpression	0		3152811	1					
ANR	3153010	PrimaryExpression	0		3152811	1					
ANR	3153011	ExpressionStatement	e -> utf16 [ i ] = 0	1529:6:39259:39274	3152811	4	True				
ANR	3153012	AssignmentExpression	e -> utf16 [ i ] = 0		3152811	0		=			
ANR	3153013	ArrayIndexing	e -> utf16 [ i ]		3152811	0					
ANR	3153014	PtrMemberAccess	e -> utf16		3152811	0					
ANR	3153015	Identifier	e		3152811	0					
ANR	3153016	Identifier	utf16		3152811	1					
ANR	3153017	Identifier	i		3152811	1					
ANR	3153018	PrimaryExpression	0		3152811	1					
ANR	3153019	ElseStatement	else		3152811	0					
ANR	3153020	IfStatement	if ( c < 0x80 )		3152811	0					
ANR	3153021	Condition	c < 0x80	1531:13:39295:39302	3152811	0	True				
ANR	3153022	RelationalExpression	c < 0x80		3152811	0		<			
ANR	3153023	Identifier	c		3152811	0					
ANR	3153024	PrimaryExpression	0x80		3152811	1					
ANR	3153025	CompoundStatement		30:23:881:881	3152811	1					
ANR	3153026	IfStatement	if ( latin1_encoding . type [ c ] != BT_OTHER && latin1_encoding . type [ c ] != BT_NONXML && c != i )		3152811	0					
ANR	3153027	Condition	latin1_encoding . type [ c ] != BT_OTHER && latin1_encoding . type [ c ] != BT_NONXML && c != i	1532:10:39317:39421	3152811	0	True				
ANR	3153028	AndExpression	latin1_encoding . type [ c ] != BT_OTHER && latin1_encoding . type [ c ] != BT_NONXML && c != i		3152811	0		&&			
ANR	3153029	EqualityExpression	latin1_encoding . type [ c ] != BT_OTHER		3152811	0		!=			
ANR	3153030	ArrayIndexing	latin1_encoding . type [ c ]		3152811	0					
ANR	3153031	MemberAccess	latin1_encoding . type		3152811	0					
ANR	3153032	Identifier	latin1_encoding		3152811	0					
ANR	3153033	Identifier	type		3152811	1					
ANR	3153034	Identifier	c		3152811	1					
ANR	3153035	Identifier	BT_OTHER		3152811	1					
ANR	3153036	AndExpression	latin1_encoding . type [ c ] != BT_NONXML && c != i		3152811	1		&&			
ANR	3153037	EqualityExpression	latin1_encoding . type [ c ] != BT_NONXML		3152811	0		!=			
ANR	3153038	ArrayIndexing	latin1_encoding . type [ c ]		3152811	0					
ANR	3153039	MemberAccess	latin1_encoding . type		3152811	0					
ANR	3153040	Identifier	latin1_encoding		3152811	0					
ANR	3153041	Identifier	type		3152811	1					
ANR	3153042	Identifier	c		3152811	1					
ANR	3153043	Identifier	BT_NONXML		3152811	1					
ANR	3153044	EqualityExpression	c != i		3152811	1		!=			
ANR	3153045	Identifier	c		3152811	0					
ANR	3153046	Identifier	i		3152811	1					
ANR	3153047	ReturnStatement	return 0 ;	1535:8:39432:39440	3152811	1	True				
ANR	3153048	PrimaryExpression	0		3152811	0					
ANR	3153049	ExpressionStatement	e -> normal . type [ i ] = latin1_encoding . type [ c ]	1536:6:39448:39491	3152811	1	True				
ANR	3153050	AssignmentExpression	e -> normal . type [ i ] = latin1_encoding . type [ c ]		3152811	0		=			
ANR	3153051	ArrayIndexing	e -> normal . type [ i ]		3152811	0					
ANR	3153052	MemberAccess	e -> normal . type		3152811	0					
ANR	3153053	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153054	Identifier	e		3152811	0					
ANR	3153055	Identifier	normal		3152811	1					
ANR	3153056	Identifier	type		3152811	1					
ANR	3153057	Identifier	i		3152811	1					
ANR	3153058	ArrayIndexing	latin1_encoding . type [ c ]		3152811	1					
ANR	3153059	MemberAccess	latin1_encoding . type		3152811	0					
ANR	3153060	Identifier	latin1_encoding		3152811	0					
ANR	3153061	Identifier	type		3152811	1					
ANR	3153062	Identifier	c		3152811	1					
ANR	3153063	ExpressionStatement	e -> utf8 [ i ] [ 0 ] = 1	1537:6:39499:39516	3152811	2	True				
ANR	3153064	AssignmentExpression	e -> utf8 [ i ] [ 0 ] = 1		3152811	0		=			
ANR	3153065	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		3152811	0					
ANR	3153066	ArrayIndexing	e -> utf8 [ i ]		3152811	0					
ANR	3153067	PtrMemberAccess	e -> utf8		3152811	0					
ANR	3153068	Identifier	e		3152811	0					
ANR	3153069	Identifier	utf8		3152811	1					
ANR	3153070	Identifier	i		3152811	1					
ANR	3153071	PrimaryExpression	0		3152811	1					
ANR	3153072	PrimaryExpression	1		3152811	1					
ANR	3153073	ExpressionStatement	e -> utf8 [ i ] [ 1 ] = ( char ) c	1538:6:39524:39547	3152811	3	True				
ANR	3153074	AssignmentExpression	e -> utf8 [ i ] [ 1 ] = ( char ) c		3152811	0		=			
ANR	3153075	ArrayIndexing	e -> utf8 [ i ] [ 1 ]		3152811	0					
ANR	3153076	ArrayIndexing	e -> utf8 [ i ]		3152811	0					
ANR	3153077	PtrMemberAccess	e -> utf8		3152811	0					
ANR	3153078	Identifier	e		3152811	0					
ANR	3153079	Identifier	utf8		3152811	1					
ANR	3153080	Identifier	i		3152811	1					
ANR	3153081	PrimaryExpression	1		3152811	1					
ANR	3153082	CastExpression	( char ) c		3152811	1					
ANR	3153083	CastTarget	char		3152811	0					
ANR	3153084	Identifier	c		3152811	1					
ANR	3153085	ExpressionStatement	e -> utf16 [ i ] = ( unsigned short ) ( c == 0 ? 0xFFFF : c )	1539:6:39555:39606	3152811	4	True				
ANR	3153086	AssignmentExpression	e -> utf16 [ i ] = ( unsigned short ) ( c == 0 ? 0xFFFF : c )		3152811	0		=			
ANR	3153087	ArrayIndexing	e -> utf16 [ i ]		3152811	0					
ANR	3153088	PtrMemberAccess	e -> utf16		3152811	0					
ANR	3153089	Identifier	e		3152811	0					
ANR	3153090	Identifier	utf16		3152811	1					
ANR	3153091	Identifier	i		3152811	1					
ANR	3153092	CastExpression	( unsigned short ) ( c == 0 ? 0xFFFF : c )		3152811	1					
ANR	3153093	CastTarget	unsigned short		3152811	0					
ANR	3153094	ConditionalExpression	c == 0 ? 0xFFFF : c		3152811	1					
ANR	3153095	Condition	c == 0		3152811	0					
ANR	3153096	EqualityExpression	c == 0		3152811	0		==			
ANR	3153097	Identifier	c		3152811	0					
ANR	3153098	PrimaryExpression	0		3152811	1					
ANR	3153099	PrimaryExpression	0xFFFF		3152811	1					
ANR	3153100	Identifier	c		3152811	2					
ANR	3153101	ElseStatement	else		3152811	0					
ANR	3153102	IfStatement	if ( checkCharRefNumber ( c ) < 0 )		3152811	0					
ANR	3153103	Condition	checkCharRefNumber ( c ) < 0	1541:13:39627:39651	3152811	0	True				
ANR	3153104	RelationalExpression	checkCharRefNumber ( c ) < 0		3152811	0		<			
ANR	3153105	CallExpression	checkCharRefNumber ( c )		3152811	0					
ANR	3153106	Callee	checkCharRefNumber		3152811	0					
ANR	3153107	Identifier	checkCharRefNumber		3152811	0					
ANR	3153108	ArgumentList	c		3152811	1					
ANR	3153109	Argument	c		3152811	0					
ANR	3153110	Identifier	c		3152811	0					
ANR	3153111	PrimaryExpression	0		3152811	1					
ANR	3153112	CompoundStatement		40:40:1230:1230	3152811	1					
ANR	3153113	ExpressionStatement	e -> normal . type [ i ] = BT_NONXML	1542:6:39662:39691	3152811	0	True				
ANR	3153114	AssignmentExpression	e -> normal . type [ i ] = BT_NONXML		3152811	0		=			
ANR	3153115	ArrayIndexing	e -> normal . type [ i ]		3152811	0					
ANR	3153116	MemberAccess	e -> normal . type		3152811	0					
ANR	3153117	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153118	Identifier	e		3152811	0					
ANR	3153119	Identifier	normal		3152811	1					
ANR	3153120	Identifier	type		3152811	1					
ANR	3153121	Identifier	i		3152811	1					
ANR	3153122	Identifier	BT_NONXML		3152811	1					
ANR	3153123	ExpressionStatement	e -> utf16 [ i ] = 0xFFFF	1544:6:39743:39763	3152811	1	True				
ANR	3153124	AssignmentExpression	e -> utf16 [ i ] = 0xFFFF		3152811	0		=			
ANR	3153125	ArrayIndexing	e -> utf16 [ i ]		3152811	0					
ANR	3153126	PtrMemberAccess	e -> utf16		3152811	0					
ANR	3153127	Identifier	e		3152811	0					
ANR	3153128	Identifier	utf16		3152811	1					
ANR	3153129	Identifier	i		3152811	1					
ANR	3153130	PrimaryExpression	0xFFFF		3152811	1					
ANR	3153131	ExpressionStatement	e -> utf8 [ i ] [ 0 ] = 1	1545:6:39771:39788	3152811	2	True				
ANR	3153132	AssignmentExpression	e -> utf8 [ i ] [ 0 ] = 1		3152811	0		=			
ANR	3153133	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		3152811	0					
ANR	3153134	ArrayIndexing	e -> utf8 [ i ]		3152811	0					
ANR	3153135	PtrMemberAccess	e -> utf8		3152811	0					
ANR	3153136	Identifier	e		3152811	0					
ANR	3153137	Identifier	utf8		3152811	1					
ANR	3153138	Identifier	i		3152811	1					
ANR	3153139	PrimaryExpression	0		3152811	1					
ANR	3153140	PrimaryExpression	1		3152811	1					
ANR	3153141	ExpressionStatement	e -> utf8 [ i ] [ 1 ] = 0	1546:6:39796:39813	3152811	3	True				
ANR	3153142	AssignmentExpression	e -> utf8 [ i ] [ 1 ] = 0		3152811	0		=			
ANR	3153143	ArrayIndexing	e -> utf8 [ i ] [ 1 ]		3152811	0					
ANR	3153144	ArrayIndexing	e -> utf8 [ i ]		3152811	0					
ANR	3153145	PtrMemberAccess	e -> utf8		3152811	0					
ANR	3153146	Identifier	e		3152811	0					
ANR	3153147	Identifier	utf8		3152811	1					
ANR	3153148	Identifier	i		3152811	1					
ANR	3153149	PrimaryExpression	1		3152811	1					
ANR	3153150	PrimaryExpression	0		3152811	1					
ANR	3153151	ElseStatement	else		3152811	0					
ANR	3153152	CompoundStatement		47:9:1406:1406	3152811	0					
ANR	3153153	IfStatement	if ( c > 0xFFFF )		3152811	0					
ANR	3153154	Condition	c > 0xFFFF	1549:10:39842:39851	3152811	0	True				
ANR	3153155	RelationalExpression	c > 0xFFFF		3152811	0		>			
ANR	3153156	Identifier	c		3152811	0					
ANR	3153157	PrimaryExpression	0xFFFF		3152811	1					
ANR	3153158	ReturnStatement	return 0 ;	1550:8:39862:39870	3152811	1	True				
ANR	3153159	PrimaryExpression	0		3152811	0					
ANR	3153160	IfStatement	"if ( UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xff ) )"		3152811	1					
ANR	3153161	Condition	"UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xff )"	1551:10:39882:39927	3152811	0	True				
ANR	3153162	CallExpression	"UCS2_GET_NAMING ( nmstrtPages , c >> 8 , c & 0xff )"		3152811	0					
ANR	3153163	Callee	UCS2_GET_NAMING		3152811	0					
ANR	3153164	Identifier	UCS2_GET_NAMING		3152811	0					
ANR	3153165	ArgumentList	nmstrtPages		3152811	1					
ANR	3153166	Argument	nmstrtPages		3152811	0					
ANR	3153167	Identifier	nmstrtPages		3152811	0					
ANR	3153168	Argument	c >> 8		3152811	1					
ANR	3153169	ShiftExpression	c >> 8		3152811	0		>>			
ANR	3153170	Identifier	c		3152811	0					
ANR	3153171	PrimaryExpression	8		3152811	1					
ANR	3153172	Argument	c & 0xff		3152811	2					
ANR	3153173	BitAndExpression	c & 0xff		3152811	0		&			
ANR	3153174	Identifier	c		3152811	0					
ANR	3153175	PrimaryExpression	0xff		3152811	1					
ANR	3153176	ExpressionStatement	e -> normal . type [ i ] = BT_NMSTRT	1552:8:39938:39967	3152811	1	True				
ANR	3153177	AssignmentExpression	e -> normal . type [ i ] = BT_NMSTRT		3152811	0		=			
ANR	3153178	ArrayIndexing	e -> normal . type [ i ]		3152811	0					
ANR	3153179	MemberAccess	e -> normal . type		3152811	0					
ANR	3153180	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153181	Identifier	e		3152811	0					
ANR	3153182	Identifier	normal		3152811	1					
ANR	3153183	Identifier	type		3152811	1					
ANR	3153184	Identifier	i		3152811	1					
ANR	3153185	Identifier	BT_NMSTRT		3152811	1					
ANR	3153186	ElseStatement	else		3152811	0					
ANR	3153187	IfStatement	"if ( UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xff ) )"		3152811	0					
ANR	3153188	Condition	"UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xff )"	1553:15:39984:40027	3152811	0	True				
ANR	3153189	CallExpression	"UCS2_GET_NAMING ( namePages , c >> 8 , c & 0xff )"		3152811	0					
ANR	3153190	Callee	UCS2_GET_NAMING		3152811	0					
ANR	3153191	Identifier	UCS2_GET_NAMING		3152811	0					
ANR	3153192	ArgumentList	namePages		3152811	1					
ANR	3153193	Argument	namePages		3152811	0					
ANR	3153194	Identifier	namePages		3152811	0					
ANR	3153195	Argument	c >> 8		3152811	1					
ANR	3153196	ShiftExpression	c >> 8		3152811	0		>>			
ANR	3153197	Identifier	c		3152811	0					
ANR	3153198	PrimaryExpression	8		3152811	1					
ANR	3153199	Argument	c & 0xff		3152811	2					
ANR	3153200	BitAndExpression	c & 0xff		3152811	0		&			
ANR	3153201	Identifier	c		3152811	0					
ANR	3153202	PrimaryExpression	0xff		3152811	1					
ANR	3153203	ExpressionStatement	e -> normal . type [ i ] = BT_NAME	1554:8:40038:40065	3152811	1	True				
ANR	3153204	AssignmentExpression	e -> normal . type [ i ] = BT_NAME		3152811	0		=			
ANR	3153205	ArrayIndexing	e -> normal . type [ i ]		3152811	0					
ANR	3153206	MemberAccess	e -> normal . type		3152811	0					
ANR	3153207	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153208	Identifier	e		3152811	0					
ANR	3153209	Identifier	normal		3152811	1					
ANR	3153210	Identifier	type		3152811	1					
ANR	3153211	Identifier	i		3152811	1					
ANR	3153212	Identifier	BT_NAME		3152811	1					
ANR	3153213	ElseStatement	else		3152811	0					
ANR	3153214	ExpressionStatement	e -> normal . type [ i ] = BT_OTHER	1556:8:40086:40114	3152811	0	True				
ANR	3153215	AssignmentExpression	e -> normal . type [ i ] = BT_OTHER		3152811	0		=			
ANR	3153216	ArrayIndexing	e -> normal . type [ i ]		3152811	0					
ANR	3153217	MemberAccess	e -> normal . type		3152811	0					
ANR	3153218	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153219	Identifier	e		3152811	0					
ANR	3153220	Identifier	normal		3152811	1					
ANR	3153221	Identifier	type		3152811	1					
ANR	3153222	Identifier	i		3152811	1					
ANR	3153223	Identifier	BT_OTHER		3152811	1					
ANR	3153224	ExpressionStatement	"e -> utf8 [ i ] [ 0 ] = ( char ) XmlUtf8Encode ( c , e -> utf8 [ i ] + 1 )"	1557:6:40122:40176	3152811	2	True				
ANR	3153225	AssignmentExpression	"e -> utf8 [ i ] [ 0 ] = ( char ) XmlUtf8Encode ( c , e -> utf8 [ i ] + 1 )"		3152811	0		=			
ANR	3153226	ArrayIndexing	e -> utf8 [ i ] [ 0 ]		3152811	0					
ANR	3153227	ArrayIndexing	e -> utf8 [ i ]		3152811	0					
ANR	3153228	PtrMemberAccess	e -> utf8		3152811	0					
ANR	3153229	Identifier	e		3152811	0					
ANR	3153230	Identifier	utf8		3152811	1					
ANR	3153231	Identifier	i		3152811	1					
ANR	3153232	PrimaryExpression	0		3152811	1					
ANR	3153233	CastExpression	"( char ) XmlUtf8Encode ( c , e -> utf8 [ i ] + 1 )"		3152811	1					
ANR	3153234	CastTarget	char		3152811	0					
ANR	3153235	CallExpression	"XmlUtf8Encode ( c , e -> utf8 [ i ] + 1 )"		3152811	1					
ANR	3153236	Callee	XmlUtf8Encode		3152811	0					
ANR	3153237	Identifier	XmlUtf8Encode		3152811	0					
ANR	3153238	ArgumentList	c		3152811	1					
ANR	3153239	Argument	c		3152811	0					
ANR	3153240	Identifier	c		3152811	0					
ANR	3153241	Argument	e -> utf8 [ i ] + 1		3152811	1					
ANR	3153242	AdditiveExpression	e -> utf8 [ i ] + 1		3152811	0		+			
ANR	3153243	ArrayIndexing	e -> utf8 [ i ]		3152811	0					
ANR	3153244	PtrMemberAccess	e -> utf8		3152811	0					
ANR	3153245	Identifier	e		3152811	0					
ANR	3153246	Identifier	utf8		3152811	1					
ANR	3153247	Identifier	i		3152811	1					
ANR	3153248	PrimaryExpression	1		3152811	1					
ANR	3153249	ExpressionStatement	e -> utf16 [ i ] = ( unsigned short ) c	1558:6:40184:40215	3152811	3	True				
ANR	3153250	AssignmentExpression	e -> utf16 [ i ] = ( unsigned short ) c		3152811	0		=			
ANR	3153251	ArrayIndexing	e -> utf16 [ i ]		3152811	0					
ANR	3153252	PtrMemberAccess	e -> utf16		3152811	0					
ANR	3153253	Identifier	e		3152811	0					
ANR	3153254	Identifier	utf16		3152811	1					
ANR	3153255	Identifier	i		3152811	1					
ANR	3153256	CastExpression	( unsigned short ) c		3152811	1					
ANR	3153257	CastTarget	unsigned short		3152811	0					
ANR	3153258	Identifier	c		3152811	1					
ANR	3153259	ExpressionStatement	e -> userData = userData	1561:2:40229:40251	3152811	5	True				
ANR	3153260	AssignmentExpression	e -> userData = userData		3152811	0		=			
ANR	3153261	PtrMemberAccess	e -> userData		3152811	0					
ANR	3153262	Identifier	e		3152811	0					
ANR	3153263	Identifier	userData		3152811	1					
ANR	3153264	Identifier	userData		3152811	1					
ANR	3153265	ExpressionStatement	e -> convert = convert	1562:2:40255:40275	3152811	6	True				
ANR	3153266	AssignmentExpression	e -> convert = convert		3152811	0		=			
ANR	3153267	PtrMemberAccess	e -> convert		3152811	0					
ANR	3153268	Identifier	e		3152811	0					
ANR	3153269	Identifier	convert		3152811	1					
ANR	3153270	Identifier	convert		3152811	1					
ANR	3153271	IfStatement	if ( convert )		3152811	7					
ANR	3153272	Condition	convert	1563:6:40283:40289	3152811	0	True				
ANR	3153273	Identifier	convert		3152811	0					
ANR	3153274	CompoundStatement		62:15:1868:1868	3152811	1					
ANR	3153275	ExpressionStatement	e -> normal . isName2 = unknown_isName	1564:4:40298:40332	3152811	0	True				
ANR	3153276	AssignmentExpression	e -> normal . isName2 = unknown_isName		3152811	0		=			
ANR	3153277	MemberAccess	e -> normal . isName2		3152811	0					
ANR	3153278	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153279	Identifier	e		3152811	0					
ANR	3153280	Identifier	normal		3152811	1					
ANR	3153281	Identifier	isName2		3152811	1					
ANR	3153282	Identifier	unknown_isName		3152811	1					
ANR	3153283	ExpressionStatement	e -> normal . isName3 = unknown_isName	1565:4:40338:40372	3152811	1	True				
ANR	3153284	AssignmentExpression	e -> normal . isName3 = unknown_isName		3152811	0		=			
ANR	3153285	MemberAccess	e -> normal . isName3		3152811	0					
ANR	3153286	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153287	Identifier	e		3152811	0					
ANR	3153288	Identifier	normal		3152811	1					
ANR	3153289	Identifier	isName3		3152811	1					
ANR	3153290	Identifier	unknown_isName		3152811	1					
ANR	3153291	ExpressionStatement	e -> normal . isName4 = unknown_isName	1566:4:40378:40412	3152811	2	True				
ANR	3153292	AssignmentExpression	e -> normal . isName4 = unknown_isName		3152811	0		=			
ANR	3153293	MemberAccess	e -> normal . isName4		3152811	0					
ANR	3153294	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153295	Identifier	e		3152811	0					
ANR	3153296	Identifier	normal		3152811	1					
ANR	3153297	Identifier	isName4		3152811	1					
ANR	3153298	Identifier	unknown_isName		3152811	1					
ANR	3153299	ExpressionStatement	e -> normal . isNmstrt2 = unknown_isNmstrt	1567:4:40418:40456	3152811	3	True				
ANR	3153300	AssignmentExpression	e -> normal . isNmstrt2 = unknown_isNmstrt		3152811	0		=			
ANR	3153301	MemberAccess	e -> normal . isNmstrt2		3152811	0					
ANR	3153302	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153303	Identifier	e		3152811	0					
ANR	3153304	Identifier	normal		3152811	1					
ANR	3153305	Identifier	isNmstrt2		3152811	1					
ANR	3153306	Identifier	unknown_isNmstrt		3152811	1					
ANR	3153307	ExpressionStatement	e -> normal . isNmstrt3 = unknown_isNmstrt	1568:4:40462:40500	3152811	4	True				
ANR	3153308	AssignmentExpression	e -> normal . isNmstrt3 = unknown_isNmstrt		3152811	0		=			
ANR	3153309	MemberAccess	e -> normal . isNmstrt3		3152811	0					
ANR	3153310	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153311	Identifier	e		3152811	0					
ANR	3153312	Identifier	normal		3152811	1					
ANR	3153313	Identifier	isNmstrt3		3152811	1					
ANR	3153314	Identifier	unknown_isNmstrt		3152811	1					
ANR	3153315	ExpressionStatement	e -> normal . isNmstrt4 = unknown_isNmstrt	1569:4:40506:40544	3152811	5	True				
ANR	3153316	AssignmentExpression	e -> normal . isNmstrt4 = unknown_isNmstrt		3152811	0		=			
ANR	3153317	MemberAccess	e -> normal . isNmstrt4		3152811	0					
ANR	3153318	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153319	Identifier	e		3152811	0					
ANR	3153320	Identifier	normal		3152811	1					
ANR	3153321	Identifier	isNmstrt4		3152811	1					
ANR	3153322	Identifier	unknown_isNmstrt		3152811	1					
ANR	3153323	ExpressionStatement	e -> normal . isInvalid2 = unknown_isInvalid	1570:4:40550:40590	3152811	6	True				
ANR	3153324	AssignmentExpression	e -> normal . isInvalid2 = unknown_isInvalid		3152811	0		=			
ANR	3153325	MemberAccess	e -> normal . isInvalid2		3152811	0					
ANR	3153326	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153327	Identifier	e		3152811	0					
ANR	3153328	Identifier	normal		3152811	1					
ANR	3153329	Identifier	isInvalid2		3152811	1					
ANR	3153330	Identifier	unknown_isInvalid		3152811	1					
ANR	3153331	ExpressionStatement	e -> normal . isInvalid3 = unknown_isInvalid	1571:4:40596:40636	3152811	7	True				
ANR	3153332	AssignmentExpression	e -> normal . isInvalid3 = unknown_isInvalid		3152811	0		=			
ANR	3153333	MemberAccess	e -> normal . isInvalid3		3152811	0					
ANR	3153334	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153335	Identifier	e		3152811	0					
ANR	3153336	Identifier	normal		3152811	1					
ANR	3153337	Identifier	isInvalid3		3152811	1					
ANR	3153338	Identifier	unknown_isInvalid		3152811	1					
ANR	3153339	ExpressionStatement	e -> normal . isInvalid4 = unknown_isInvalid	1572:4:40642:40682	3152811	8	True				
ANR	3153340	AssignmentExpression	e -> normal . isInvalid4 = unknown_isInvalid		3152811	0		=			
ANR	3153341	MemberAccess	e -> normal . isInvalid4		3152811	0					
ANR	3153342	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153343	Identifier	e		3152811	0					
ANR	3153344	Identifier	normal		3152811	1					
ANR	3153345	Identifier	isInvalid4		3152811	1					
ANR	3153346	Identifier	unknown_isInvalid		3152811	1					
ANR	3153347	ExpressionStatement	e -> normal . enc . utf8Convert = unknown_toUtf8	1574:2:40690:40732	3152811	8	True				
ANR	3153348	AssignmentExpression	e -> normal . enc . utf8Convert = unknown_toUtf8		3152811	0		=			
ANR	3153349	MemberAccess	e -> normal . enc . utf8Convert		3152811	0					
ANR	3153350	MemberAccess	e -> normal . enc		3152811	0					
ANR	3153351	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153352	Identifier	e		3152811	0					
ANR	3153353	Identifier	normal		3152811	1					
ANR	3153354	Identifier	enc		3152811	1					
ANR	3153355	Identifier	utf8Convert		3152811	1					
ANR	3153356	Identifier	unknown_toUtf8		3152811	1					
ANR	3153357	ExpressionStatement	e -> normal . enc . utf16Convert = unknown_toUtf16	1575:2:40736:40780	3152811	9	True				
ANR	3153358	AssignmentExpression	e -> normal . enc . utf16Convert = unknown_toUtf16		3152811	0		=			
ANR	3153359	MemberAccess	e -> normal . enc . utf16Convert		3152811	0					
ANR	3153360	MemberAccess	e -> normal . enc		3152811	0					
ANR	3153361	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153362	Identifier	e		3152811	0					
ANR	3153363	Identifier	normal		3152811	1					
ANR	3153364	Identifier	enc		3152811	1					
ANR	3153365	Identifier	utf16Convert		3152811	1					
ANR	3153366	Identifier	unknown_toUtf16		3152811	1					
ANR	3153367	ReturnStatement	return & ( e -> normal . enc ) ;	1576:2:40784:40807	3152811	10	True				
ANR	3153368	UnaryOperationExpression	& ( e -> normal . enc )		3152811	0					
ANR	3153369	UnaryOperator	&		3152811	0					
ANR	3153370	MemberAccess	e -> normal . enc		3152811	1					
ANR	3153371	PtrMemberAccess	e -> normal		3152811	0					
ANR	3153372	Identifier	e		3152811	0					
ANR	3153373	Identifier	normal		3152811	1					
ANR	3153374	Identifier	enc		3152811	1					
ANR	3153375	ReturnType	ENCODING *		3152811	1					
ANR	3153376	Identifier	XmlInitUnknownEncoding		3152811	2					
ANR	3153377	ParameterList	"void * mem , int * table , CONVERTER convert , void * userData"		3152811	3					
ANR	3153378	Parameter	void * mem	1498:23:38296:38304	3152811	0	True				
ANR	3153379	ParameterType	void *		3152811	0					
ANR	3153380	Identifier	mem		3152811	1					
ANR	3153381	Parameter	int * table	1499:23:38330:38339	3152811	1	True				
ANR	3153382	ParameterType	int *		3152811	0					
ANR	3153383	Identifier	table		3152811	1					
ANR	3153384	Parameter	CONVERTER convert	1500:23:38365:38381	3152811	2	True				
ANR	3153385	ParameterType	CONVERTER		3152811	0					
ANR	3153386	Identifier	convert		3152811	1					
ANR	3153387	Parameter	void * userData	1501:23:38407:38420	3152811	3	True				
ANR	3153388	ParameterType	void *		3152811	0					
ANR	3153389	Identifier	userData		3152811	1					
ANR	3153390	CFGEntryNode	ENTRY		3152811		True				
ANR	3153391	CFGExitNode	EXIT		3152811		True				
ANR	3153392	Symbol	userData		3152811						
ANR	3153393	Symbol	UCS2_GET_NAMING		3152811						
ANR	3153394	Symbol	* latin1_encoding		3152811						
ANR	3153395	Symbol	convert		3152811						
ANR	3153396	Symbol	e -> normal . isInvalid3		3152811						
ANR	3153397	Symbol	e -> normal . isInvalid2		3152811						
ANR	3153398	Symbol	* * e -> utf8		3152811						
ANR	3153399	Symbol	unknown_isNmstrt		3152811						
ANR	3153400	Symbol	e -> normal . isInvalid4		3152811						
ANR	3153401	Symbol	e -> normal . enc . utf16Convert		3152811						
ANR	3153402	Symbol	e -> normal . type		3152811						
ANR	3153403	Symbol	e -> utf16		3152811						
ANR	3153404	Symbol	e -> normal . enc . utf8Convert		3152811						
ANR	3153405	Symbol	nmstrtPages		3152811						
ANR	3153406	Symbol	unknown_toUtf8		3152811						
ANR	3153407	Symbol	e -> utf8		3152811						
ANR	3153408	Symbol	* * i		3152811						
ANR	3153409	Symbol	XmlUtf8Encode		3152811						
ANR	3153410	Symbol	& e -> normal . enc		3152811						
ANR	3153411	Symbol	e -> normal . enc		3152811						
ANR	3153412	Symbol	* * e		3152811						
ANR	3153413	Symbol	latin1_encoding		3152811						
ANR	3153414	Symbol	* table		3152811						
ANR	3153415	Symbol	& latin1_encoding		3152811						
ANR	3153416	Symbol	BT_LEAD2		3152811						
ANR	3153417	Symbol	& e -> normal		3152811						
ANR	3153418	Symbol	* e -> utf16		3152811						
ANR	3153419	Symbol	BT_NONXML		3152811						
ANR	3153420	Symbol	* * * e		3152811						
ANR	3153421	Symbol	* mem		3152811						
ANR	3153422	Symbol	* e -> normal		3152811						
ANR	3153423	Symbol	unknown_isName		3152811						
ANR	3153424	Symbol	unknown_isInvalid		3152811						
ANR	3153425	Symbol	BT_NAME		3152811						
ANR	3153426	Symbol	checkCharRefNumber		3152811						
ANR	3153427	Symbol	unknown_toUtf16		3152811						
ANR	3153428	Symbol	mem		3152811						
ANR	3153429	Symbol	namePages		3152811						
ANR	3153430	Symbol	* latin1_encoding . type		3152811						
ANR	3153431	Symbol	* e -> utf8		3152811						
ANR	3153432	Symbol	e -> convert		3152811						
ANR	3153433	Symbol	BT_NMSTRT		3152811						
ANR	3153434	Symbol	table		3152811						
ANR	3153435	Symbol	BT_MALFORM		3152811						
ANR	3153436	Symbol	e -> normal . isName2		3152811						
ANR	3153437	Symbol	c		3152811						
ANR	3153438	Symbol	e -> normal . isName3		3152811						
ANR	3153439	Symbol	e		3152811						
ANR	3153440	Symbol	* e -> normal . type		3152811						
ANR	3153441	Symbol	e -> normal . isNmstrt3		3152811						
ANR	3153442	Symbol	e -> normal . isNmstrt4		3152811						
ANR	3153443	Symbol	i		3152811						
ANR	3153444	Symbol	e -> normal . isName4		3152811						
ANR	3153445	Symbol	* c		3152811						
ANR	3153446	Symbol	e -> userData		3152811						
ANR	3153447	Symbol	* e		3152811						
ANR	3153448	Symbol	* i		3152811						
ANR	3153449	Symbol	BT_OTHER		3152811						
ANR	3153450	Symbol	latin1_encoding . type		3152811						
ANR	3153451	Symbol	e -> normal . isNmstrt2		3152811						
ANR	3153452	Symbol	e -> normal		3152811						
ANR	3153453	ClassDef	<unnamed>	1581:0:40903:41080							
ANR	3153454	DeclStmt									
ANR	3153455	Decl							const char	const char [ ]	KW_ISO_8859_1
ANR	3153456	DeclStmt									
ANR	3153457	Decl							const char	const char [ ]	KW_US_ASCII
ANR	3153458	DeclStmt									
ANR	3153459	Decl							const char	const char [ ]	KW_UTF_8
ANR	3153460	DeclStmt									
ANR	3153461	Decl							const char	const char [ ]	KW_UTF_16
ANR	3153462	DeclStmt									
ANR	3153463	Decl							const char	const char [ ]	KW_UTF_16BE
ANR	3153464	DeclStmt									
ANR	3153465	Decl							const char	const char [ ]	KW_UTF_16LE
ANR	3153466	Function	getEncodingIndex	1616:0:41800:42214							
ANR	3153467	FunctionDef	getEncodingIndex (const char * name)		3153466	0					
ANR	3153468	CompoundStatement		1618:0:41855:42214	3153466	0					
ANR	3153469	Statement	static	1619:2:41859:41864	3153466	0	True				
ANR	3153470	Statement	const	1619:9:41866:41870	3153466	1	True				
ANR	3153471	Statement	char	1619:15:41872:41875	3153466	2	True				
ANR	3153472	Statement	*	1619:20:41877:41877	3153466	3	True				
ANR	3153473	Statement	const	1619:22:41879:41883	3153466	4	True				
ANR	3153474	Statement	encodingNames	1619:28:41885:41897	3153466	5	True				
ANR	3153475	Statement	[	1619:41:41898:41898	3153466	6	True				
ANR	3153476	Statement	]	1619:42:41899:41899	3153466	7	True				
ANR	3153477	Statement	=	1619:44:41901:41901	3153466	8	True				
ANR	3153478	CompoundStatement		2:46:47:47	3153466	9					
ANR	3153479	Statement	KW_ISO_8859_1	1620:4:41909:41921	3153466	0	True				
ANR	3153480	Statement	","	1620:17:41922:41922	3153466	1	True				
ANR	3153481	Statement	KW_US_ASCII	1621:4:41928:41938	3153466	2	True				
ANR	3153482	Statement	","	1621:15:41939:41939	3153466	3	True				
ANR	3153483	Statement	KW_UTF_8	1622:4:41945:41952	3153466	4	True				
ANR	3153484	Statement	","	1622:12:41953:41953	3153466	5	True				
ANR	3153485	Statement	KW_UTF_16	1623:4:41959:41967	3153466	6	True				
ANR	3153486	Statement	","	1623:13:41968:41968	3153466	7	True				
ANR	3153487	Statement	KW_UTF_16BE	1624:4:41974:41984	3153466	8	True				
ANR	3153488	Statement	","	1624:15:41985:41985	3153466	9	True				
ANR	3153489	Statement	KW_UTF_16LE	1625:4:41991:42001	3153466	10	True				
ANR	3153490	Statement	","	1625:15:42002:42002	3153466	11	True				
ANR	3153491	ExpressionStatement		1626:3:42007:42007	3153466	10	True				
ANR	3153492	IdentifierDeclStatement	int i ;	1627:2:42011:42016	3153466	11	True				
ANR	3153493	IdentifierDecl	i		3153466	0					
ANR	3153494	IdentifierDeclType	int		3153466	0					
ANR	3153495	Identifier	i		3153466	1					
ANR	3153496	IfStatement	if ( name == NULL )		3153466	12					
ANR	3153497	Condition	name == NULL	1628:6:42024:42035	3153466	0	True				
ANR	3153498	EqualityExpression	name == NULL		3153466	0		==			
ANR	3153499	Identifier	name		3153466	0					
ANR	3153500	Identifier	NULL		3153466	1					
ANR	3153501	ReturnStatement	return NO_ENC ;	1629:4:42042:42055	3153466	1	True				
ANR	3153502	Identifier	NO_ENC		3153466	0					
ANR	3153503	ForStatement	for ( i = 0 ; i < ( int ) ( sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] ) ) ; i ++ )		3153466	13					
ANR	3153504	ForInit	i = 0 ;	1630:7:42064:42069	3153466	0	True				
ANR	3153505	AssignmentExpression	i = 0		3153466	0		=			
ANR	3153506	Identifier	i		3153466	0					
ANR	3153507	PrimaryExpression	0		3153466	1					
ANR	3153508	Condition	i < ( int ) ( sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] ) )	1630:14:42071:42127	3153466	1	True				
ANR	3153509	RelationalExpression	i < ( int ) ( sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] ) )		3153466	0		<			
ANR	3153510	Identifier	i		3153466	0					
ANR	3153511	CastExpression	( int ) ( sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] ) )		3153466	1					
ANR	3153512	CastTarget	int		3153466	0					
ANR	3153513	MultiplicativeExpression	sizeof ( encodingNames ) / sizeof ( encodingNames [ 0 ] )		3153466	1		/			
ANR	3153514	SizeofExpression	sizeof ( encodingNames )		3153466	0					
ANR	3153515	Sizeof	sizeof		3153466	0					
ANR	3153516	SizeofOperand	encodingNames		3153466	1					
ANR	3153517	SizeofExpression	sizeof ( encodingNames [ 0 ] )		3153466	1					
ANR	3153518	Sizeof	sizeof		3153466	0					
ANR	3153519	ArrayIndexing	encodingNames [ 0 ]		3153466	1					
ANR	3153520	Identifier	encodingNames		3153466	0					
ANR	3153521	PrimaryExpression	0		3153466	1					
ANR	3153522	PostIncDecOperationExpression	i ++	1630:73:42130:42132	3153466	2	True				
ANR	3153523	Identifier	i		3153466	0					
ANR	3153524	IncDec	++		3153466	1					
ANR	3153525	IfStatement	"if ( streqci ( name , encodingNames [ i ] ) )"		3153466	3					
ANR	3153526	Condition	"streqci ( name , encodingNames [ i ] )"	1631:8:42143:42173	3153466	0	True				
ANR	3153527	CallExpression	"streqci ( name , encodingNames [ i ] )"		3153466	0					
ANR	3153528	Callee	streqci		3153466	0					
ANR	3153529	Identifier	streqci		3153466	0					
ANR	3153530	ArgumentList	name		3153466	1					
ANR	3153531	Argument	name		3153466	0					
ANR	3153532	Identifier	name		3153466	0					
ANR	3153533	Argument	encodingNames [ i ]		3153466	1					
ANR	3153534	ArrayIndexing	encodingNames [ i ]		3153466	0					
ANR	3153535	Identifier	encodingNames		3153466	0					
ANR	3153536	Identifier	i		3153466	1					
ANR	3153537	ReturnStatement	return i ;	1632:6:42182:42190	3153466	1	True				
ANR	3153538	Identifier	i		3153466	0					
ANR	3153539	ReturnStatement	return UNKNOWN_ENC ;	1633:2:42194:42212	3153466	14	True				
ANR	3153540	Identifier	UNKNOWN_ENC		3153466	0					
ANR	3153541	ReturnType	static int FASTCALL		3153466	1					
ANR	3153542	Identifier	getEncodingIndex		3153466	2					
ANR	3153543	ParameterList	const char * name		3153466	3					
ANR	3153544	Parameter	const char * name	1617:17:41837:41852	3153466	0	True				
ANR	3153545	ParameterType	const char *		3153466	0					
ANR	3153546	Identifier	name		3153466	1					
ANR	3153547	CFGEntryNode	ENTRY		3153466		True				
ANR	3153548	CFGExitNode	EXIT		3153466		True				
ANR	3153549	Symbol	NULL		3153466						
ANR	3153550	Symbol	NO_ENC		3153466						
ANR	3153551	Symbol	* i		3153466						
ANR	3153552	Symbol	UNKNOWN_ENC		3153466						
ANR	3153553	Symbol	encodingNames		3153466						
ANR	3153554	Symbol	* encodingNames		3153466						
ANR	3153555	Symbol	streqci		3153466						
ANR	3153556	Symbol	name		3153466						
ANR	3153557	Symbol	i		3153466						
ANR	3153558	DeclStmt									
ANR	3153559	Decl							const ENCODING	const ENCODING * *	encPtr
ANR	3153560	DeclStmt									
ANR	3153561	Decl							int	int	e
ANR	3153562	Function	XmlInitUnknownEncodingNS	1789:1:46988:47365							
ANR	3153563	FunctionDef	"XmlInitUnknownEncodingNS (void * mem , int * table , CONVERTER convert , void * userData)"		3153562	0					
ANR	3153564	CompoundStatement		1799:0:47198:47365	3153562	0					
ANR	3153565	IdentifierDeclStatement	"ENCODING * enc = XmlInitUnknownEncoding ( mem , table , convert , userData ) ;"	1800:2:47202:47271	3153562	0	True				
ANR	3153566	IdentifierDecl	"* enc = XmlInitUnknownEncoding ( mem , table , convert , userData )"		3153562	0					
ANR	3153567	IdentifierDeclType	ENCODING *		3153562	0					
ANR	3153568	Identifier	enc		3153562	1					
ANR	3153569	AssignmentExpression	"* enc = XmlInitUnknownEncoding ( mem , table , convert , userData )"		3153562	2		=			
ANR	3153570	Identifier	enc		3153562	0					
ANR	3153571	CallExpression	"XmlInitUnknownEncoding ( mem , table , convert , userData )"		3153562	1					
ANR	3153572	Callee	XmlInitUnknownEncoding		3153562	0					
ANR	3153573	Identifier	XmlInitUnknownEncoding		3153562	0					
ANR	3153574	ArgumentList	mem		3153562	1					
ANR	3153575	Argument	mem		3153562	0					
ANR	3153576	Identifier	mem		3153562	0					
ANR	3153577	Argument	table		3153562	1					
ANR	3153578	Identifier	table		3153562	0					
ANR	3153579	Argument	convert		3153562	2					
ANR	3153580	Identifier	convert		3153562	0					
ANR	3153581	Argument	userData		3153562	3					
ANR	3153582	Identifier	userData		3153562	0					
ANR	3153583	IfStatement	if ( enc )		3153562	1					
ANR	3153584	Condition	enc	1801:6:47279:47281	3153562	0	True				
ANR	3153585	Identifier	enc		3153562	0					
ANR	3153586	ExpressionStatement	( ( struct normal_encoding * ) enc ) -> type [ ASCII_COLON ] = BT_COLON	1802:4:47288:47349	3153562	1	True				
ANR	3153587	AssignmentExpression	( ( struct normal_encoding * ) enc ) -> type [ ASCII_COLON ] = BT_COLON		3153562	0		=			
ANR	3153588	ArrayIndexing	( ( struct normal_encoding * ) enc ) -> type [ ASCII_COLON ]		3153562	0					
ANR	3153589	PtrMemberAccess	( ( struct normal_encoding * ) enc ) -> type		3153562	0					
ANR	3153590	CastExpression	( struct normal_encoding * ) enc		3153562	0					
ANR	3153591	CastTarget	struct normal_encoding *		3153562	0					
ANR	3153592	Identifier	enc		3153562	1					
ANR	3153593	Identifier	type		3153562	1					
ANR	3153594	Identifier	ASCII_COLON		3153562	1					
ANR	3153595	Identifier	BT_COLON		3153562	1					
ANR	3153596	ReturnStatement	return enc ;	1803:2:47353:47363	3153562	2	True				
ANR	3153597	Identifier	enc		3153562	0					
ANR	3153598	ReturnType	undef XML_TOK_NS_C undef NS undef ns ENCODING *		3153562	1					
ANR	3153599	Identifier	XmlInitUnknownEncodingNS		3153562	2					
ANR	3153600	ParameterList	"void * mem , int * table , CONVERTER convert , void * userData"		3153562	3					
ANR	3153601	Parameter	void * mem	1795:25:47065:47073	3153562	0	True				
ANR	3153602	ParameterType	void *		3153562	0					
ANR	3153603	Identifier	mem		3153562	1					
ANR	3153604	Parameter	int * table	1796:25:47101:47110	3153562	1	True				
ANR	3153605	ParameterType	int *		3153562	0					
ANR	3153606	Identifier	table		3153562	1					
ANR	3153607	Parameter	CONVERTER convert	1797:25:47138:47154	3153562	2	True				
ANR	3153608	ParameterType	CONVERTER		3153562	0					
ANR	3153609	Identifier	convert		3153562	1					
ANR	3153610	Parameter	void * userData	1798:25:47182:47195	3153562	3	True				
ANR	3153611	ParameterType	void *		3153562	0					
ANR	3153612	Identifier	userData		3153562	1					
ANR	3153613	CFGEntryNode	ENTRY		3153562		True				
ANR	3153614	CFGExitNode	EXIT		3153562		True				
ANR	3153615	Symbol	XmlInitUnknownEncoding		3153562						
ANR	3153616	Symbol	userData		3153562						
ANR	3153617	Symbol	( ( struct normal_encoding * ) enc ) -> type		3153562						
ANR	3153618	Symbol	* ( ( struct normal_encoding * ) enc ) -> type		3153562						
ANR	3153619	Symbol	ASCII_COLON		3153562						
ANR	3153620	Symbol	convert		3153562						
ANR	3153621	Symbol	* * enc		3153562						
ANR	3153622	Symbol	mem		3153562						
ANR	3153623	Symbol	* ASCII_COLON		3153562						
ANR	3153624	Symbol	BT_COLON		3153562						
ANR	3153625	Symbol	enc		3153562						
ANR	3153626	Symbol	* enc		3153562						
ANR	3153627	Symbol	table		3153562						
