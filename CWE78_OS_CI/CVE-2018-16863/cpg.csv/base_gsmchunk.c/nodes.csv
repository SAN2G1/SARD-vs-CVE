command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	689340	File	data/converged/CVE-2018-16863_ghostpdl/base_gsmchunk.c								
ANR	689341	Function	gs_chunk_assert	65:0:1824:2020							
ANR	689342	FunctionDef	"gs_chunk_assert (gs_memory_t * m , int v , const char * s)"		689341	0					
ANR	689343	CompoundStatement		66:0:1890:2020	689341	0					
ANR	689344	IdentifierDeclStatement	void ( * crash ) ( void ) ;	67:4:1896:1915	689341	0	True				
ANR	689345	IdentifierDecl	( * crash ) ( void )		689341	0					
ANR	689346	IdentifierDeclType	void ( * ) ( void )		689341	0					
ANR	689347	Identifier	crash		689341	1					
ANR	689348	IfStatement	if ( v )		689341	1					
ANR	689349	Condition	v	68:8:1925:1925	689341	0	True				
ANR	689350	Identifier	v		689341	0					
ANR	689351	ReturnStatement	return ;	69:8:1936:1942	689341	1	True				
ANR	689352	ExpressionStatement	"dmlprintf1 ( m , ""Assert failed: %s\\n"" , s )"	70:4:1948:1987	689341	2	True				
ANR	689353	CallExpression	"dmlprintf1 ( m , ""Assert failed: %s\\n"" , s )"		689341	0					
ANR	689354	Callee	dmlprintf1		689341	0					
ANR	689355	Identifier	dmlprintf1		689341	0					
ANR	689356	ArgumentList	m		689341	1					
ANR	689357	Argument	m		689341	0					
ANR	689358	Identifier	m		689341	0					
ANR	689359	Argument	"""Assert failed: %s\\n"""		689341	1					
ANR	689360	PrimaryExpression	"""Assert failed: %s\\n"""		689341	0					
ANR	689361	Argument	s		689341	2					
ANR	689362	Identifier	s		689341	0					
ANR	689363	ExpressionStatement	crash = NULL	71:4:1993:2005	689341	3	True				
ANR	689364	AssignmentExpression	crash = NULL		689341	0		=			
ANR	689365	Identifier	crash		689341	0					
ANR	689366	Identifier	NULL		689341	1					
ANR	689367	ExpressionStatement	crash ( )	72:4:2011:2018	689341	4	True				
ANR	689368	CallExpression	crash ( )		689341	0					
ANR	689369	Callee	crash		689341	0					
ANR	689370	Identifier	crash		689341	0					
ANR	689371	ArgumentList			689341	1					
ANR	689372	ReturnType	static void		689341	1					
ANR	689373	Identifier	gs_chunk_assert		689341	2					
ANR	689374	ParameterList	"gs_memory_t * m , int v , const char * s"		689341	3					
ANR	689375	Parameter	gs_memory_t * m	65:28:1852:1865	689341	0	True				
ANR	689376	ParameterType	gs_memory_t *		689341	0					
ANR	689377	Identifier	m		689341	1					
ANR	689378	Parameter	int v	65:44:1868:1872	689341	1	True				
ANR	689379	ParameterType	int		689341	0					
ANR	689380	Identifier	v		689341	1					
ANR	689381	Parameter	const char * s	65:51:1875:1887	689341	2	True				
ANR	689382	ParameterType	const char *		689341	0					
ANR	689383	Identifier	s		689341	1					
ANR	689384	CFGEntryNode	ENTRY		689341		True				
ANR	689385	CFGExitNode	EXIT		689341		True				
ANR	689386	Symbol	s		689341						
ANR	689387	Symbol	NULL		689341						
ANR	689388	Symbol	v		689341						
ANR	689389	Symbol	m		689341						
ANR	689390	Symbol	crash		689341						
ANR	689391	DeclStmt									
ANR	689392	Decl							const gs_memory_procs_t	const gs_memory_procs_t	chunk_procs
ANR	689393	ClassDef	chunk_obj_node_s	138:8:4391:4653							
ANR	689394	DeclStmt									
ANR	689395	Decl							gs_memory_type_ptr_t	gs_memory_type_ptr_t	type
ANR	689396	DeclStmt									
ANR	689397	Decl							unsigned int	unsigned int	sequence
ANR	689398	DeclStmt									
ANR	689399	Decl							struct chunk_obj_node_s	struct chunk_obj_node_s *	defer_next
ANR	689400	DeclStmt									
ANR	689401	Decl							uint	uint	size
ANR	689402	DeclStmt									
ANR	689403	Decl							uint	uint	padding
ANR	689404	DeclStmt									
ANR	689405	Decl							chunk_obj_node_s	chunk_obj_node_s	chunk_obj_node_t
ANR	689406	ClassDef	chunk_free_node_s	148:8:4664:4942							
ANR	689407	DeclStmt									
ANR	689408	Decl							struct chunk_free_node_s	struct chunk_free_node_s *	left_loc
ANR	689409	DeclStmt									
ANR	689410	Decl							struct chunk_free_node_s	struct chunk_free_node_s *	right_loc
ANR	689411	DeclStmt									
ANR	689412	Decl							struct chunk_free_node_s	struct chunk_free_node_s *	left_size
ANR	689413	DeclStmt									
ANR	689414	Decl							struct chunk_free_node_s	struct chunk_free_node_s *	right_size
ANR	689415	DeclStmt									
ANR	689416	Decl							uint	uint	size
ANR	689417	DeclStmt									
ANR	689418	Decl							chunk_free_node_s	chunk_free_node_s	chunk_free_node_t
ANR	689419	ClassDef	chunk_slab_s	160:8:5097:5164							
ANR	689420	DeclStmt									
ANR	689421	Decl							struct chunk_slab_s	struct chunk_slab_s *	next
ANR	689422	DeclStmt									
ANR	689423	Decl							chunk_slab_s	chunk_slab_s	chunk_slab_t
ANR	689424	ClassDef	gs_memory_chunk_s	164:8:5175:5738							
ANR	689425	DeclStmt									
ANR	689426	Decl							gs_memory_t	gs_memory_t *	target
ANR	689427	DeclStmt									
ANR	689428	Decl							chunk_slab_t	chunk_slab_t *	slabs
ANR	689429	DeclStmt									
ANR	689430	Decl							chunk_free_node_t	chunk_free_node_t *	free_size
ANR	689431	DeclStmt									
ANR	689432	Decl							chunk_free_node_t	chunk_free_node_t *	free_loc
ANR	689433	DeclStmt									
ANR	689434	Decl							chunk_obj_node_t	chunk_obj_node_t *	defer_finalize_list
ANR	689435	DeclStmt									
ANR	689436	Decl							chunk_obj_node_t	chunk_obj_node_t *	defer_free_list
ANR	689437	DeclStmt									
ANR	689438	Decl							unsigned long	unsigned long	used
ANR	689439	DeclStmt									
ANR	689440	Decl							unsigned long	unsigned long	max_used
ANR	689441	DeclStmt									
ANR	689442	Decl							unsigned long	unsigned long	total_free
ANR	689443	DeclStmt									
ANR	689444	Decl							unsigned int	unsigned int	sequence
ANR	689445	DeclStmt									
ANR	689446	Decl							int	int	deferring
ANR	689447	DeclStmt									
ANR	689448	Decl							gs_memory_chunk_s	gs_memory_chunk_s	gs_memory_chunk_t
ANR	689449	Function	gs_memory_chunk_wrap	186:0:5905:7374							
ANR	689450	FunctionDef	"gs_memory_chunk_wrap (gs_memory_t * * wrapped , gs_memory_t * target)"		689449	0					
ANR	689451	CompoundStatement		189:0:6054:7374	689449	0					
ANR	689452	IdentifierDeclStatement	gs_memory_t * non_gc_target = target -> non_gc_memory ;	191:4:6110:6166	689449	0	True				
ANR	689453	IdentifierDecl	* non_gc_target = target -> non_gc_memory		689449	0					
ANR	689454	IdentifierDeclType	gs_memory_t *		689449	0					
ANR	689455	Identifier	non_gc_target		689449	1					
ANR	689456	AssignmentExpression	* non_gc_target = target -> non_gc_memory		689449	2		=			
ANR	689457	Identifier	non_gc_target		689449	0					
ANR	689458	PtrMemberAccess	target -> non_gc_memory		689449	1					
ANR	689459	Identifier	target		689449	0					
ANR	689460	Identifier	non_gc_memory		689449	1					
ANR	689461	IdentifierDeclStatement	gs_memory_chunk_t * cmem = NULL ;	192:4:6172:6202	689449	1	True				
ANR	689462	IdentifierDecl	* cmem = NULL		689449	0					
ANR	689463	IdentifierDeclType	gs_memory_chunk_t *		689449	0					
ANR	689464	Identifier	cmem		689449	1					
ANR	689465	AssignmentExpression	* cmem = NULL		689449	2		=			
ANR	689466	Identifier	NULL		689449	0					
ANR	689467	Identifier	NULL		689449	1					
ANR	689468	IfStatement	if ( non_gc_target )		689449	2					
ANR	689469	Condition	non_gc_target	194:8:6213:6225	689449	0	True				
ANR	689470	Identifier	non_gc_target		689449	0					
ANR	689471	ExpressionStatement	"cmem = ( gs_memory_chunk_t * ) gs_alloc_bytes_immovable ( non_gc_target , sizeof ( gs_memory_chunk_t ) , ""gs_memory_chunk_wrap"" )"	195:8:6236:6474	689449	1	True				
ANR	689472	AssignmentExpression	"cmem = ( gs_memory_chunk_t * ) gs_alloc_bytes_immovable ( non_gc_target , sizeof ( gs_memory_chunk_t ) , ""gs_memory_chunk_wrap"" )"		689449	0		=			
ANR	689473	Identifier	cmem		689449	0					
ANR	689474	CastExpression	"( gs_memory_chunk_t * ) gs_alloc_bytes_immovable ( non_gc_target , sizeof ( gs_memory_chunk_t ) , ""gs_memory_chunk_wrap"" )"		689449	1					
ANR	689475	CastTarget	gs_memory_chunk_t *		689449	0					
ANR	689476	CallExpression	"gs_alloc_bytes_immovable ( non_gc_target , sizeof ( gs_memory_chunk_t ) , ""gs_memory_chunk_wrap"" )"		689449	1					
ANR	689477	Callee	gs_alloc_bytes_immovable		689449	0					
ANR	689478	Identifier	gs_alloc_bytes_immovable		689449	0					
ANR	689479	ArgumentList	non_gc_target		689449	1					
ANR	689480	Argument	non_gc_target		689449	0					
ANR	689481	Identifier	non_gc_target		689449	0					
ANR	689482	Argument	sizeof ( gs_memory_chunk_t )		689449	1					
ANR	689483	SizeofExpression	sizeof ( gs_memory_chunk_t )		689449	0					
ANR	689484	Sizeof	sizeof		689449	0					
ANR	689485	SizeofOperand	gs_memory_chunk_t		689449	1					
ANR	689486	Argument	"""gs_memory_chunk_wrap"""		689449	2					
ANR	689487	PrimaryExpression	"""gs_memory_chunk_wrap"""		689449	0					
ANR	689488	IfStatement	if ( cmem == NULL )		689449	3					
ANR	689489	Condition	cmem == NULL	198:8:6484:6495	689449	0	True				
ANR	689490	EqualityExpression	cmem == NULL		689449	0		==			
ANR	689491	Identifier	cmem		689449	0					
ANR	689492	Identifier	NULL		689449	1					
ANR	689493	CompoundStatement		10:22:443:443	689449	1					
ANR	689494	ExpressionStatement	* wrapped = NULL	199:8:6508:6523	689449	0	True				
ANR	689495	AssignmentExpression	* wrapped = NULL		689449	0		=			
ANR	689496	UnaryOperationExpression	* wrapped		689449	0					
ANR	689497	UnaryOperator	*		689449	0					
ANR	689498	Identifier	wrapped		689449	1					
ANR	689499	Identifier	NULL		689449	1					
ANR	689500	ExpressionStatement	return_error ( gs_error_VMerror )	200:8:6533:6563	689449	1	True				
ANR	689501	CallExpression	return_error ( gs_error_VMerror )		689449	0					
ANR	689502	Callee	return_error		689449	0					
ANR	689503	Identifier	return_error		689449	0					
ANR	689504	ArgumentList	gs_error_VMerror		689449	1					
ANR	689505	Argument	gs_error_VMerror		689449	0					
ANR	689506	Identifier	gs_error_VMerror		689449	0					
ANR	689507	ExpressionStatement	cmem -> stable_memory = ( gs_memory_t * ) cmem	202:4:6575:6616	689449	4	True				
ANR	689508	AssignmentExpression	cmem -> stable_memory = ( gs_memory_t * ) cmem		689449	0		=			
ANR	689509	PtrMemberAccess	cmem -> stable_memory		689449	0					
ANR	689510	Identifier	cmem		689449	0					
ANR	689511	Identifier	stable_memory		689449	1					
ANR	689512	CastExpression	( gs_memory_t * ) cmem		689449	1					
ANR	689513	CastTarget	gs_memory_t *		689449	0					
ANR	689514	Identifier	cmem		689449	1					
ANR	689515	ExpressionStatement	cmem -> procs = chunk_procs	203:4:6642:6667	689449	5	True				
ANR	689516	AssignmentExpression	cmem -> procs = chunk_procs		689449	0		=			
ANR	689517	PtrMemberAccess	cmem -> procs		689449	0					
ANR	689518	Identifier	cmem		689449	0					
ANR	689519	Identifier	procs		689449	1					
ANR	689520	Identifier	chunk_procs		689449	1					
ANR	689521	ExpressionStatement	cmem -> gs_lib_ctx = non_gc_target -> gs_lib_ctx	204:4:6673:6717	689449	6	True				
ANR	689522	AssignmentExpression	cmem -> gs_lib_ctx = non_gc_target -> gs_lib_ctx		689449	0		=			
ANR	689523	PtrMemberAccess	cmem -> gs_lib_ctx		689449	0					
ANR	689524	Identifier	cmem		689449	0					
ANR	689525	Identifier	gs_lib_ctx		689449	1					
ANR	689526	PtrMemberAccess	non_gc_target -> gs_lib_ctx		689449	1					
ANR	689527	Identifier	non_gc_target		689449	0					
ANR	689528	Identifier	gs_lib_ctx		689449	1					
ANR	689529	ExpressionStatement	cmem -> non_gc_memory = ( gs_memory_t * ) cmem	205:4:6723:6764	689449	7	True				
ANR	689530	AssignmentExpression	cmem -> non_gc_memory = ( gs_memory_t * ) cmem		689449	0		=			
ANR	689531	PtrMemberAccess	cmem -> non_gc_memory		689449	0					
ANR	689532	Identifier	cmem		689449	0					
ANR	689533	Identifier	non_gc_memory		689449	1					
ANR	689534	CastExpression	( gs_memory_t * ) cmem		689449	1					
ANR	689535	CastTarget	gs_memory_t *		689449	0					
ANR	689536	Identifier	cmem		689449	1					
ANR	689537	ExpressionStatement	cmem -> thread_safe_memory = non_gc_target -> thread_safe_memory	206:4:6802:6862	689449	8	True				
ANR	689538	AssignmentExpression	cmem -> thread_safe_memory = non_gc_target -> thread_safe_memory		689449	0		=			
ANR	689539	PtrMemberAccess	cmem -> thread_safe_memory		689449	0					
ANR	689540	Identifier	cmem		689449	0					
ANR	689541	Identifier	thread_safe_memory		689449	1					
ANR	689542	PtrMemberAccess	non_gc_target -> thread_safe_memory		689449	1					
ANR	689543	Identifier	non_gc_target		689449	0					
ANR	689544	Identifier	thread_safe_memory		689449	1					
ANR	689545	ExpressionStatement	cmem -> target = non_gc_target	207:4:6868:6896	689449	9	True				
ANR	689546	AssignmentExpression	cmem -> target = non_gc_target		689449	0		=			
ANR	689547	PtrMemberAccess	cmem -> target		689449	0					
ANR	689548	Identifier	cmem		689449	0					
ANR	689549	Identifier	target		689449	1					
ANR	689550	Identifier	non_gc_target		689449	1					
ANR	689551	ExpressionStatement	cmem -> slabs = NULL	208:4:6902:6920	689449	10	True				
ANR	689552	AssignmentExpression	cmem -> slabs = NULL		689449	0		=			
ANR	689553	PtrMemberAccess	cmem -> slabs		689449	0					
ANR	689554	Identifier	cmem		689449	0					
ANR	689555	Identifier	slabs		689449	1					
ANR	689556	Identifier	NULL		689449	1					
ANR	689557	ExpressionStatement	cmem -> free_size = NULL	209:4:6926:6948	689449	11	True				
ANR	689558	AssignmentExpression	cmem -> free_size = NULL		689449	0		=			
ANR	689559	PtrMemberAccess	cmem -> free_size		689449	0					
ANR	689560	Identifier	cmem		689449	0					
ANR	689561	Identifier	free_size		689449	1					
ANR	689562	Identifier	NULL		689449	1					
ANR	689563	ExpressionStatement	cmem -> free_loc = NULL	210:4:6954:6975	689449	12	True				
ANR	689564	AssignmentExpression	cmem -> free_loc = NULL		689449	0		=			
ANR	689565	PtrMemberAccess	cmem -> free_loc		689449	0					
ANR	689566	Identifier	cmem		689449	0					
ANR	689567	Identifier	free_loc		689449	1					
ANR	689568	Identifier	NULL		689449	1					
ANR	689569	ExpressionStatement	cmem -> used = 0	211:4:6981:6995	689449	13	True				
ANR	689570	AssignmentExpression	cmem -> used = 0		689449	0		=			
ANR	689571	PtrMemberAccess	cmem -> used		689449	0					
ANR	689572	Identifier	cmem		689449	0					
ANR	689573	Identifier	used		689449	1					
ANR	689574	PrimaryExpression	0		689449	1					
ANR	689575	ExpressionStatement	cmem -> max_used = 0	212:4:7001:7019	689449	14	True				
ANR	689576	AssignmentExpression	cmem -> max_used = 0		689449	0		=			
ANR	689577	PtrMemberAccess	cmem -> max_used		689449	0					
ANR	689578	Identifier	cmem		689449	0					
ANR	689579	Identifier	max_used		689449	1					
ANR	689580	PrimaryExpression	0		689449	1					
ANR	689581	ExpressionStatement	cmem -> total_free = 0	213:4:7025:7045	689449	15	True				
ANR	689582	AssignmentExpression	cmem -> total_free = 0		689449	0		=			
ANR	689583	PtrMemberAccess	cmem -> total_free		689449	0					
ANR	689584	Identifier	cmem		689449	0					
ANR	689585	Identifier	total_free		689449	1					
ANR	689586	PrimaryExpression	0		689449	1					
ANR	689587	ExpressionStatement	cmem -> sequence = 0	215:4:7068:7086	689449	16	True				
ANR	689588	AssignmentExpression	cmem -> sequence = 0		689449	0		=			
ANR	689589	PtrMemberAccess	cmem -> sequence		689449	0					
ANR	689590	Identifier	cmem		689449	0					
ANR	689591	Identifier	sequence		689449	1					
ANR	689592	PrimaryExpression	0		689449	1					
ANR	689593	ExpressionStatement	cmem -> deferring = 0	217:4:7099:7118	689449	17	True				
ANR	689594	AssignmentExpression	cmem -> deferring = 0		689449	0		=			
ANR	689595	PtrMemberAccess	cmem -> deferring		689449	0					
ANR	689596	Identifier	cmem		689449	0					
ANR	689597	Identifier	deferring		689449	1					
ANR	689598	PrimaryExpression	0		689449	1					
ANR	689599	ExpressionStatement	cmem -> defer_finalize_list = NULL	218:4:7124:7156	689449	18	True				
ANR	689600	AssignmentExpression	cmem -> defer_finalize_list = NULL		689449	0		=			
ANR	689601	PtrMemberAccess	cmem -> defer_finalize_list		689449	0					
ANR	689602	Identifier	cmem		689449	0					
ANR	689603	Identifier	defer_finalize_list		689449	1					
ANR	689604	Identifier	NULL		689449	1					
ANR	689605	ExpressionStatement	cmem -> defer_free_list = NULL	219:4:7162:7190	689449	19	True				
ANR	689606	AssignmentExpression	cmem -> defer_free_list = NULL		689449	0		=			
ANR	689607	PtrMemberAccess	cmem -> defer_free_list		689449	0					
ANR	689608	Identifier	cmem		689449	0					
ANR	689609	Identifier	defer_free_list		689449	1					
ANR	689610	Identifier	NULL		689449	1					
ANR	689611	ExpressionStatement	"dmlprintf1 ( non_gc_target , ""New chunk %p\\n"" , cmem )"	222:4:7222:7271	689449	20	True				
ANR	689612	CallExpression	"dmlprintf1 ( non_gc_target , ""New chunk %p\\n"" , cmem )"		689449	0					
ANR	689613	Callee	dmlprintf1		689449	0					
ANR	689614	Identifier	dmlprintf1		689449	0					
ANR	689615	ArgumentList	non_gc_target		689449	1					
ANR	689616	Argument	non_gc_target		689449	0					
ANR	689617	Identifier	non_gc_target		689449	0					
ANR	689618	Argument	"""New chunk %p\\n"""		689449	1					
ANR	689619	PrimaryExpression	"""New chunk %p\\n"""		689449	0					
ANR	689620	Argument	cmem		689449	2					
ANR	689621	Identifier	cmem		689449	0					
ANR	689622	ExpressionStatement	* wrapped = ( gs_memory_t * ) cmem	226:4:7328:7358	689449	21	True				
ANR	689623	AssignmentExpression	* wrapped = ( gs_memory_t * ) cmem		689449	0		=			
ANR	689624	UnaryOperationExpression	* wrapped		689449	0					
ANR	689625	UnaryOperator	*		689449	0					
ANR	689626	Identifier	wrapped		689449	1					
ANR	689627	CastExpression	( gs_memory_t * ) cmem		689449	1					
ANR	689628	CastTarget	gs_memory_t *		689449	0					
ANR	689629	Identifier	cmem		689449	1					
ANR	689630	ReturnStatement	return 0 ;	227:4:7364:7372	689449	22	True				
ANR	689631	PrimaryExpression	0		689449	0					
ANR	689632	ReturnType	int		689449	1					
ANR	689633	Identifier	gs_memory_chunk_wrap		689449	2					
ANR	689634	ParameterList	"gs_memory_t * * wrapped , gs_memory_t * target"		689449	3					
ANR	689635	Parameter	gs_memory_t * * wrapped	187:21:5930:5950	689449	0	True				
ANR	689636	ParameterType	gs_memory_t * *		689449	0					
ANR	689637	Identifier	wrapped		689449	1					
ANR	689638	Parameter	gs_memory_t * target	188:20:6005:6024	689449	1	True				
ANR	689639	ParameterType	gs_memory_t *		689449	0					
ANR	689640	Identifier	target		689449	1					
ANR	689641	CFGEntryNode	ENTRY		689449		True				
ANR	689642	CFGExitNode	EXIT		689449		True				
ANR	689643	Symbol	non_gc_target		689449						
ANR	689644	Symbol	target -> non_gc_memory		689449						
ANR	689645	Symbol	cmem -> total_free		689449						
ANR	689646	Symbol	cmem -> max_used		689449						
ANR	689647	Symbol	cmem -> stable_memory		689449						
ANR	689648	Symbol	chunk_procs		689449						
ANR	689649	Symbol	cmem -> slabs		689449						
ANR	689650	Symbol	cmem -> sequence		689449						
ANR	689651	Symbol	cmem -> procs		689449						
ANR	689652	Symbol	cmem -> defer_free_list		689449						
ANR	689653	Symbol	gs_alloc_bytes_immovable		689449						
ANR	689654	Symbol	* cmem		689449						
ANR	689655	Symbol	cmem -> gs_lib_ctx		689449						
ANR	689656	Symbol	cmem -> deferring		689449						
ANR	689657	Symbol	cmem -> target		689449						
ANR	689658	Symbol	wrapped		689449						
ANR	689659	Symbol	cmem -> free_loc		689449						
ANR	689660	Symbol	non_gc_target -> thread_safe_memory		689449						
ANR	689661	Symbol	cmem -> defer_finalize_list		689449						
ANR	689662	Symbol	NULL		689449						
ANR	689663	Symbol	cmem -> used		689449						
ANR	689664	Symbol	cmem -> thread_safe_memory		689449						
ANR	689665	Symbol	target		689449						
ANR	689666	Symbol	* target		689449						
ANR	689667	Symbol	gs_error_VMerror		689449						
ANR	689668	Symbol	* non_gc_target		689449						
ANR	689669	Symbol	cmem -> free_size		689449						
ANR	689670	Symbol	* wrapped		689449						
ANR	689671	Symbol	cmem -> non_gc_memory		689449						
ANR	689672	Symbol	cmem		689449						
ANR	689673	Symbol	non_gc_target -> gs_lib_ctx		689449						
ANR	689674	Function	gs_memory_chunk_release	232:0:7465:7629							
ANR	689675	FunctionDef	gs_memory_chunk_release (gs_memory_t * mem)		689674	0					
ANR	689676	CompoundStatement		234:0:7512:7629	689674	0					
ANR	689677	ExpressionStatement	"gs_memory_free_all ( ( gs_memory_t * ) mem , FREE_ALL_EVERYTHING , ""gs_memory_chunk_release"" )"	235:4:7518:7627	689674	0	True				
ANR	689678	CallExpression	"gs_memory_free_all ( ( gs_memory_t * ) mem , FREE_ALL_EVERYTHING , ""gs_memory_chunk_release"" )"		689674	0					
ANR	689679	Callee	gs_memory_free_all		689674	0					
ANR	689680	Identifier	gs_memory_free_all		689674	0					
ANR	689681	ArgumentList	( gs_memory_t * ) mem		689674	1					
ANR	689682	Argument	( gs_memory_t * ) mem		689674	0					
ANR	689683	CastExpression	( gs_memory_t * ) mem		689674	0					
ANR	689684	CastTarget	gs_memory_t *		689674	0					
ANR	689685	Identifier	mem		689674	1					
ANR	689686	Argument	FREE_ALL_EVERYTHING		689674	1					
ANR	689687	Identifier	FREE_ALL_EVERYTHING		689674	0					
ANR	689688	Argument	"""gs_memory_chunk_release"""		689674	2					
ANR	689689	PrimaryExpression	"""gs_memory_chunk_release"""		689674	0					
ANR	689690	ReturnType	void		689674	1					
ANR	689691	Identifier	gs_memory_chunk_release		689674	2					
ANR	689692	ParameterList	gs_memory_t * mem		689674	3					
ANR	689693	Parameter	gs_memory_t * mem	233:24:7494:7509	689674	0	True				
ANR	689694	ParameterType	gs_memory_t *		689674	0					
ANR	689695	Identifier	mem		689674	1					
ANR	689696	CFGEntryNode	ENTRY		689674		True				
ANR	689697	CFGExitNode	EXIT		689674		True				
ANR	689698	Symbol	mem		689674						
ANR	689699	Symbol	FREE_ALL_EVERYTHING		689674						
ANR	689700	Function	gs_memory_chunk_unwrap	240:0:7690:8007							
ANR	689701	FunctionDef	gs_memory_chunk_unwrap (gs_memory_t * mem)		689700	0					
ANR	689702	CompoundStatement		242:0:7767:8007	689700	0					
ANR	689703	IdentifierDeclStatement	gs_memory_t * tmem ;	243:4:7773:7790	689700	0	True				
ANR	689704	IdentifierDecl	* tmem		689700	0					
ANR	689705	IdentifierDeclType	gs_memory_t *		689700	0					
ANR	689706	Identifier	tmem		689700	1					
ANR	689707	IfStatement	if ( mem -> procs . status != chunk_status )		689700	1					
ANR	689708	Condition	mem -> procs . status != chunk_status	246:8:7852:7884	689700	0	True				
ANR	689709	EqualityExpression	mem -> procs . status != chunk_status		689700	0		!=			
ANR	689710	MemberAccess	mem -> procs . status		689700	0					
ANR	689711	PtrMemberAccess	mem -> procs		689700	0					
ANR	689712	Identifier	mem		689700	0					
ANR	689713	Identifier	procs		689700	1					
ANR	689714	Identifier	status		689700	1					
ANR	689715	Identifier	chunk_status		689700	1					
ANR	689716	ReturnStatement	return mem ;	247:8:7895:7905	689700	1	True				
ANR	689717	Identifier	mem		689700	0					
ANR	689718	ExpressionStatement	tmem = ( ( gs_memory_chunk_t * ) mem ) -> target	249:4:7912:7953	689700	2	True				
ANR	689719	AssignmentExpression	tmem = ( ( gs_memory_chunk_t * ) mem ) -> target		689700	0		=			
ANR	689720	Identifier	tmem		689700	0					
ANR	689721	PtrMemberAccess	( ( gs_memory_chunk_t * ) mem ) -> target		689700	1					
ANR	689722	CastExpression	( gs_memory_chunk_t * ) mem		689700	0					
ANR	689723	CastTarget	gs_memory_chunk_t *		689700	0					
ANR	689724	Identifier	mem		689700	1					
ANR	689725	Identifier	target		689700	1					
ANR	689726	ExpressionStatement	gs_memory_chunk_release ( mem )	250:4:7959:7987	689700	3	True				
ANR	689727	CallExpression	gs_memory_chunk_release ( mem )		689700	0					
ANR	689728	Callee	gs_memory_chunk_release		689700	0					
ANR	689729	Identifier	gs_memory_chunk_release		689700	0					
ANR	689730	ArgumentList	mem		689700	1					
ANR	689731	Argument	mem		689700	0					
ANR	689732	Identifier	mem		689700	0					
ANR	689733	ReturnStatement	return tmem ;	252:4:7994:8005	689700	4	True				
ANR	689734	Identifier	tmem		689700	0					
ANR	689735	ReturnType	gs_memory_t *		689700	1					
ANR	689736	Identifier	gs_memory_chunk_unwrap		689700	2					
ANR	689737	ParameterList	gs_memory_t * mem		689700	3					
ANR	689738	Parameter	gs_memory_t * mem	241:23:7749:7764	689700	0	True				
ANR	689739	ParameterType	gs_memory_t *		689700	0					
ANR	689740	Identifier	mem		689700	1					
ANR	689741	CFGEntryNode	ENTRY		689700		True				
ANR	689742	CFGExitNode	EXIT		689700		True				
ANR	689743	Symbol	( ( gs_memory_chunk_t * ) mem ) -> target		689700						
ANR	689744	Symbol	mem		689700						
ANR	689745	Symbol	mem -> procs . status		689700						
ANR	689746	Symbol	tmem		689700						
ANR	689747	Symbol	mem -> procs		689700						
ANR	689748	Symbol	chunk_status		689700						
ANR	689749	Symbol	* mem		689700						
ANR	689750	Function	gs_memory_chunk_target	258:0:8091:8235							
ANR	689751	FunctionDef	gs_memory_chunk_target (const gs_memory_t * mem)		689750	0					
ANR	689752	CompoundStatement		260:0:8152:8235	689750	0					
ANR	689753	IdentifierDeclStatement	gs_memory_chunk_t * cmem = ( gs_memory_chunk_t * ) mem ;	261:4:8158:8208	689750	0	True				
ANR	689754	IdentifierDecl	* cmem = ( gs_memory_chunk_t * ) mem		689750	0					
ANR	689755	IdentifierDeclType	gs_memory_chunk_t *		689750	0					
ANR	689756	Identifier	cmem		689750	1					
ANR	689757	AssignmentExpression	* cmem = ( gs_memory_chunk_t * ) mem		689750	2		=			
ANR	689758	Identifier	cmem		689750	0					
ANR	689759	CastExpression	( gs_memory_chunk_t * ) mem		689750	1					
ANR	689760	CastTarget	gs_memory_chunk_t *		689750	0					
ANR	689761	Identifier	mem		689750	1					
ANR	689762	ReturnStatement	return cmem -> target ;	262:4:8214:8233	689750	1	True				
ANR	689763	PtrMemberAccess	cmem -> target		689750	0					
ANR	689764	Identifier	cmem		689750	0					
ANR	689765	Identifier	target		689750	1					
ANR	689766	ReturnType	gs_memory_t *		689750	1					
ANR	689767	Identifier	gs_memory_chunk_target		689750	2					
ANR	689768	ParameterList	const gs_memory_t * mem		689750	3					
ANR	689769	Parameter	const gs_memory_t * mem	259:23:8128:8149	689750	0	True				
ANR	689770	ParameterType	const gs_memory_t *		689750	0					
ANR	689771	Identifier	mem		689750	1					
ANR	689772	CFGEntryNode	ENTRY		689750		True				
ANR	689773	CFGExitNode	EXIT		689750		True				
ANR	689774	Symbol	mem		689750						
ANR	689775	Symbol	* cmem		689750						
ANR	689776	Symbol	cmem -> target		689750						
ANR	689777	Symbol	cmem		689750						
ANR	689778	Function	chunk_mem_node_free_all_slabs	273:0:8510:8945							
ANR	689779	FunctionDef	chunk_mem_node_free_all_slabs (gs_memory_chunk_t * cmem)		689778	0					
ANR	689780	CompoundStatement		275:0:8577:8945	689778	0					
ANR	689781	IdentifierDeclStatement	"chunk_slab_t * slab , * next ;"	276:4:8583:8608	689778	0	True				
ANR	689782	IdentifierDecl	* slab		689778	0					
ANR	689783	IdentifierDeclType	chunk_slab_t *		689778	0					
ANR	689784	Identifier	slab		689778	1					
ANR	689785	IdentifierDecl	* next		689778	1					
ANR	689786	IdentifierDeclType	chunk_slab_t *		689778	0					
ANR	689787	Identifier	next		689778	1					
ANR	689788	Statement	gs_memory_t	277:4:8614:8624	689778	1	True				
ANR	689789	Statement	*	277:16:8626:8626	689778	2	True				
ANR	689790	Statement	const	277:17:8627:8631	689778	3	True				
ANR	689791	ExpressionStatement	target = cmem -> target	277:23:8633:8654	689778	4	True				
ANR	689792	AssignmentExpression	target = cmem -> target		689778	0		=			
ANR	689793	Identifier	target		689778	0					
ANR	689794	PtrMemberAccess	cmem -> target		689778	1					
ANR	689795	Identifier	cmem		689778	0					
ANR	689796	Identifier	target		689778	1					
ANR	689797	ForStatement	for ( slab = cmem -> slabs ; slab != NULL ; slab = next )		689778	5					
ANR	689798	ForInit	slab = cmem -> slabs ;	279:9:8666:8684	689778	0	True				
ANR	689799	AssignmentExpression	slab = cmem -> slabs		689778	0		=			
ANR	689800	Identifier	slab		689778	0					
ANR	689801	PtrMemberAccess	cmem -> slabs		689778	1					
ANR	689802	Identifier	cmem		689778	0					
ANR	689803	Identifier	slabs		689778	1					
ANR	689804	Condition	slab != NULL	279:29:8686:8697	689778	1	True				
ANR	689805	EqualityExpression	slab != NULL		689778	0		!=			
ANR	689806	Identifier	slab		689778	0					
ANR	689807	Identifier	NULL		689778	1					
ANR	689808	AssignmentExpression	slab = next	279:43:8700:8710	689778	2	True	=			
ANR	689809	Identifier	slab		689778	0					
ANR	689810	Identifier	next		689778	1					
ANR	689811	CompoundStatement		5:56:135:135	689778	3					
ANR	689812	ExpressionStatement	next = slab -> next	280:8:8723:8740	689778	0	True				
ANR	689813	AssignmentExpression	next = slab -> next		689778	0		=			
ANR	689814	Identifier	next		689778	0					
ANR	689815	PtrMemberAccess	slab -> next		689778	1					
ANR	689816	Identifier	slab		689778	0					
ANR	689817	Identifier	next		689778	1					
ANR	689818	ExpressionStatement	"gs_free_object ( target , slab , ""chunk_mem_node_free_all_slabs"" )"	281:8:8750:8811	689778	1	True				
ANR	689819	CallExpression	"gs_free_object ( target , slab , ""chunk_mem_node_free_all_slabs"" )"		689778	0					
ANR	689820	Callee	gs_free_object		689778	0					
ANR	689821	Identifier	gs_free_object		689778	0					
ANR	689822	ArgumentList	target		689778	1					
ANR	689823	Argument	target		689778	0					
ANR	689824	Identifier	target		689778	0					
ANR	689825	Argument	slab		689778	1					
ANR	689826	Identifier	slab		689778	0					
ANR	689827	Argument	"""chunk_mem_node_free_all_slabs"""		689778	2					
ANR	689828	PrimaryExpression	"""chunk_mem_node_free_all_slabs"""		689778	0					
ANR	689829	ExpressionStatement	cmem -> slabs = NULL	284:4:8824:8842	689778	6	True				
ANR	689830	AssignmentExpression	cmem -> slabs = NULL		689778	0		=			
ANR	689831	PtrMemberAccess	cmem -> slabs		689778	0					
ANR	689832	Identifier	cmem		689778	0					
ANR	689833	Identifier	slabs		689778	1					
ANR	689834	Identifier	NULL		689778	1					
ANR	689835	ExpressionStatement	cmem -> free_size = NULL	285:4:8848:8870	689778	7	True				
ANR	689836	AssignmentExpression	cmem -> free_size = NULL		689778	0		=			
ANR	689837	PtrMemberAccess	cmem -> free_size		689778	0					
ANR	689838	Identifier	cmem		689778	0					
ANR	689839	Identifier	free_size		689778	1					
ANR	689840	Identifier	NULL		689778	1					
ANR	689841	ExpressionStatement	cmem -> free_loc = NULL	286:4:8876:8897	689778	8	True				
ANR	689842	AssignmentExpression	cmem -> free_loc = NULL		689778	0		=			
ANR	689843	PtrMemberAccess	cmem -> free_loc		689778	0					
ANR	689844	Identifier	cmem		689778	0					
ANR	689845	Identifier	free_loc		689778	1					
ANR	689846	Identifier	NULL		689778	1					
ANR	689847	ExpressionStatement	cmem -> total_free = 0	287:4:8903:8923	689778	9	True				
ANR	689848	AssignmentExpression	cmem -> total_free = 0		689778	0		=			
ANR	689849	PtrMemberAccess	cmem -> total_free		689778	0					
ANR	689850	Identifier	cmem		689778	0					
ANR	689851	Identifier	total_free		689778	1					
ANR	689852	PrimaryExpression	0		689778	1					
ANR	689853	ExpressionStatement	cmem -> used = 0	288:4:8929:8943	689778	10	True				
ANR	689854	AssignmentExpression	cmem -> used = 0		689778	0		=			
ANR	689855	PtrMemberAccess	cmem -> used		689778	0					
ANR	689856	Identifier	cmem		689778	0					
ANR	689857	Identifier	used		689778	1					
ANR	689858	PrimaryExpression	0		689778	1					
ANR	689859	ReturnType	static void		689778	1					
ANR	689860	Identifier	chunk_mem_node_free_all_slabs		689778	2					
ANR	689861	ParameterList	gs_memory_chunk_t * cmem		689778	3					
ANR	689862	Parameter	gs_memory_chunk_t * cmem	274:30:8552:8574	689778	0	True				
ANR	689863	ParameterType	gs_memory_chunk_t *		689778	0					
ANR	689864	Identifier	cmem		689778	1					
ANR	689865	CFGEntryNode	ENTRY		689778		True				
ANR	689866	CFGExitNode	EXIT		689778		True				
ANR	689867	Symbol	next		689778						
ANR	689868	Symbol	NULL		689778						
ANR	689869	Symbol	cmem -> total_free		689778						
ANR	689870	Symbol	cmem -> used		689778						
ANR	689871	Symbol	slab -> next		689778						
ANR	689872	Symbol	cmem -> slabs		689778						
ANR	689873	Symbol	slab		689778						
ANR	689874	Symbol	target		689778						
ANR	689875	Symbol	cmem -> free_size		689778						
ANR	689876	Symbol	* slab		689778						
ANR	689877	Symbol	* cmem		689778						
ANR	689878	Symbol	cmem -> target		689778						
ANR	689879	Symbol	cmem		689778						
ANR	689880	Symbol	cmem -> free_loc		689778						
ANR	689881	Function	chunk_free_all	291:0:8948:9670							
ANR	689882	FunctionDef	"chunk_free_all (gs_memory_t * mem , uint free_mask , client_name_t cname)"		689881	0					
ANR	689883	CompoundStatement		293:0:9031:9670	689881	0					
ANR	689884	Statement	gs_memory_chunk_t	294:4:9037:9053	689881	0	True				
ANR	689885	Statement	*	294:22:9055:9055	689881	1	True				
ANR	689886	Statement	const	294:24:9057:9061	689881	2	True				
ANR	689887	ExpressionStatement	cmem = ( gs_memory_chunk_t * ) mem	294:30:9063:9094	689881	3	True				
ANR	689888	AssignmentExpression	cmem = ( gs_memory_chunk_t * ) mem		689881	0		=			
ANR	689889	Identifier	cmem		689881	0					
ANR	689890	CastExpression	( gs_memory_chunk_t * ) mem		689881	1					
ANR	689891	CastTarget	gs_memory_chunk_t *		689881	0					
ANR	689892	Identifier	mem		689881	1					
ANR	689893	Statement	gs_memory_t	295:4:9100:9110	689881	4	True				
ANR	689894	Statement	*	295:16:9112:9112	689881	5	True				
ANR	689895	Statement	const	295:18:9114:9118	689881	6	True				
ANR	689896	ExpressionStatement	target = cmem -> target	295:24:9120:9141	689881	7	True				
ANR	689897	AssignmentExpression	target = cmem -> target		689881	0		=			
ANR	689898	Identifier	target		689881	0					
ANR	689899	PtrMemberAccess	cmem -> target		689881	1					
ANR	689900	Identifier	cmem		689881	0					
ANR	689901	Identifier	target		689881	1					
ANR	689902	IfStatement	if ( free_mask & FREE_ALL_DATA )		689881	8					
ANR	689903	Condition	free_mask & FREE_ALL_DATA	297:8:9152:9176	689881	0	True				
ANR	689904	BitAndExpression	free_mask & FREE_ALL_DATA		689881	0		&			
ANR	689905	Identifier	free_mask		689881	0					
ANR	689906	Identifier	FREE_ALL_DATA		689881	1					
ANR	689907	ExpressionStatement	chunk_mem_node_free_all_slabs ( cmem )	298:8:9187:9222	689881	1	True				
ANR	689908	CallExpression	chunk_mem_node_free_all_slabs ( cmem )		689881	0					
ANR	689909	Callee	chunk_mem_node_free_all_slabs		689881	0					
ANR	689910	Identifier	chunk_mem_node_free_all_slabs		689881	0					
ANR	689911	ArgumentList	cmem		689881	1					
ANR	689912	Argument	cmem		689881	0					
ANR	689913	Identifier	cmem		689881	0					
ANR	689914	IfStatement	if ( mem -> stable_memory )		689881	9					
ANR	689915	Condition	mem -> stable_memory	300:8:9293:9310	689881	0	True				
ANR	689916	PtrMemberAccess	mem -> stable_memory		689881	0					
ANR	689917	Identifier	mem		689881	0					
ANR	689918	Identifier	stable_memory		689881	1					
ANR	689919	CompoundStatement		8:28:281:281	689881	1					
ANR	689920	IfStatement	if ( mem -> stable_memory != mem )		689881	0					
ANR	689921	Condition	mem -> stable_memory != mem	301:12:9327:9351	689881	0	True				
ANR	689922	EqualityExpression	mem -> stable_memory != mem		689881	0		!=			
ANR	689923	PtrMemberAccess	mem -> stable_memory		689881	0					
ANR	689924	Identifier	mem		689881	0					
ANR	689925	Identifier	stable_memory		689881	1					
ANR	689926	Identifier	mem		689881	1					
ANR	689927	ExpressionStatement	"gs_memory_free_all ( mem -> stable_memory , free_mask , cname )"	302:12:9366:9422	689881	1	True				
ANR	689928	CallExpression	"gs_memory_free_all ( mem -> stable_memory , free_mask , cname )"		689881	0					
ANR	689929	Callee	gs_memory_free_all		689881	0					
ANR	689930	Identifier	gs_memory_free_all		689881	0					
ANR	689931	ArgumentList	mem -> stable_memory		689881	1					
ANR	689932	Argument	mem -> stable_memory		689881	0					
ANR	689933	PtrMemberAccess	mem -> stable_memory		689881	0					
ANR	689934	Identifier	mem		689881	0					
ANR	689935	Identifier	stable_memory		689881	1					
ANR	689936	Argument	free_mask		689881	1					
ANR	689937	Identifier	free_mask		689881	0					
ANR	689938	Argument	cname		689881	2					
ANR	689939	Identifier	cname		689881	0					
ANR	689940	IfStatement	if ( free_mask & FREE_ALL_ALLOCATOR )		689881	1					
ANR	689941	Condition	free_mask & FREE_ALL_ALLOCATOR	303:12:9436:9465	689881	0	True				
ANR	689942	BitAndExpression	free_mask & FREE_ALL_ALLOCATOR		689881	0		&			
ANR	689943	Identifier	free_mask		689881	0					
ANR	689944	Identifier	FREE_ALL_ALLOCATOR		689881	1					
ANR	689945	ExpressionStatement	mem -> stable_memory = 0	304:12:9480:9502	689881	1	True				
ANR	689946	AssignmentExpression	mem -> stable_memory = 0		689881	0		=			
ANR	689947	PtrMemberAccess	mem -> stable_memory		689881	0					
ANR	689948	Identifier	mem		689881	0					
ANR	689949	Identifier	stable_memory		689881	1					
ANR	689950	PrimaryExpression	0		689881	1					
ANR	689951	IfStatement	if ( free_mask & FREE_ALL_STRUCTURES )		689881	10					
ANR	689952	Condition	free_mask & FREE_ALL_STRUCTURES	306:8:9518:9548	689881	0	True				
ANR	689953	BitAndExpression	free_mask & FREE_ALL_STRUCTURES		689881	0		&			
ANR	689954	Identifier	free_mask		689881	0					
ANR	689955	Identifier	FREE_ALL_STRUCTURES		689881	1					
ANR	689956	CompoundStatement		14:41:519:519	689881	1					
ANR	689957	ExpressionStatement	cmem -> target = 0	307:8:9561:9577	689881	0	True				
ANR	689958	AssignmentExpression	cmem -> target = 0		689881	0		=			
ANR	689959	PtrMemberAccess	cmem -> target		689881	0					
ANR	689960	Identifier	cmem		689881	0					
ANR	689961	Identifier	target		689881	1					
ANR	689962	PrimaryExpression	0		689881	1					
ANR	689963	IfStatement	if ( free_mask & FREE_ALL_ALLOCATOR )		689881	11					
ANR	689964	Condition	free_mask & FREE_ALL_ALLOCATOR	309:8:9593:9622	689881	0	True				
ANR	689965	BitAndExpression	free_mask & FREE_ALL_ALLOCATOR		689881	0		&			
ANR	689966	Identifier	free_mask		689881	0					
ANR	689967	Identifier	FREE_ALL_ALLOCATOR		689881	1					
ANR	689968	ExpressionStatement	"gs_free_object ( target , cmem , cname )"	310:8:9633:9668	689881	1	True				
ANR	689969	CallExpression	"gs_free_object ( target , cmem , cname )"		689881	0					
ANR	689970	Callee	gs_free_object		689881	0					
ANR	689971	Identifier	gs_free_object		689881	0					
ANR	689972	ArgumentList	target		689881	1					
ANR	689973	Argument	target		689881	0					
ANR	689974	Identifier	target		689881	0					
ANR	689975	Argument	cmem		689881	1					
ANR	689976	Identifier	cmem		689881	0					
ANR	689977	Argument	cname		689881	2					
ANR	689978	Identifier	cname		689881	0					
ANR	689979	ReturnType	static void		689881	1					
ANR	689980	Identifier	chunk_free_all		689881	2					
ANR	689981	ParameterList	"gs_memory_t * mem , uint free_mask , client_name_t cname"		689881	3					
ANR	689982	Parameter	gs_memory_t * mem	292:15:8975:8991	689881	0	True				
ANR	689983	ParameterType	gs_memory_t *		689881	0					
ANR	689984	Identifier	mem		689881	1					
ANR	689985	Parameter	uint free_mask	292:34:8994:9007	689881	1	True				
ANR	689986	ParameterType	uint		689881	0					
ANR	689987	Identifier	free_mask		689881	1					
ANR	689988	Parameter	client_name_t cname	292:50:9010:9028	689881	2	True				
ANR	689989	ParameterType	client_name_t		689881	0					
ANR	689990	Identifier	cname		689881	1					
ANR	689991	CFGEntryNode	ENTRY		689881		True				
ANR	689992	CFGExitNode	EXIT		689881		True				
ANR	689993	Symbol	mem -> stable_memory		689881						
ANR	689994	Symbol	mem		689881						
ANR	689995	Symbol	* cmem		689881						
ANR	689996	Symbol	cname		689881						
ANR	689997	Symbol	free_mask		689881						
ANR	689998	Symbol	FREE_ALL_STRUCTURES		689881						
ANR	689999	Symbol	cmem -> target		689881						
ANR	690000	Symbol	FREE_ALL_DATA		689881						
ANR	690001	Symbol	cmem		689881						
ANR	690002	Symbol	FREE_ALL_ALLOCATOR		689881						
ANR	690003	Symbol	target		689881						
ANR	690004	Symbol	* mem		689881						
ANR	690005	DeclStmt									
ANR	690006	Decl							const gs_memory_struct_type_t	const gs_memory_struct_type_t	st_bytes
ANR	690007	Function	dump_free_loc	316:0:9734:10557							
ANR	690008	FunctionDef	"dump_free_loc (gs_memory_t * mem , chunk_free_node_t * node , int depth , void * * limit , uint * total)"		690007	0					
ANR	690009	CompoundStatement		317:0:9840:10557	690007	0					
ANR	690010	IdentifierDeclStatement	int i ;	319:4:9871:9876	690007	0	True				
ANR	690011	IdentifierDecl	i		690007	0					
ANR	690012	IdentifierDeclType	int		690007	0					
ANR	690013	Identifier	i		690007	1					
ANR	690014	IdentifierDeclStatement	int count ;	321:4:9889:9898	690007	1	True				
ANR	690015	IdentifierDecl	count		690007	0					
ANR	690016	IdentifierDeclType	int		690007	0					
ANR	690017	Identifier	count		690007	1					
ANR	690018	IfStatement	if ( node == NULL )		690007	2					
ANR	690019	Condition	node == NULL	323:8:9909:9920	690007	0	True				
ANR	690020	EqualityExpression	node == NULL		690007	0		==			
ANR	690021	Identifier	node		690007	0					
ANR	690022	Identifier	NULL		690007	1					
ANR	690023	ReturnStatement	return 0 ;	324:8:9931:9939	690007	1	True				
ANR	690024	PrimaryExpression	0		690007	0					
ANR	690025	ExpressionStatement	"count = dump_free_loc ( mem , node -> left_loc , depth + 1 + ( depth & 1 ) , limit , total )"	326:4:9946:10025	690007	3	True				
ANR	690026	AssignmentExpression	"count = dump_free_loc ( mem , node -> left_loc , depth + 1 + ( depth & 1 ) , limit , total )"		690007	0		=			
ANR	690027	Identifier	count		690007	0					
ANR	690028	CallExpression	"dump_free_loc ( mem , node -> left_loc , depth + 1 + ( depth & 1 ) , limit , total )"		690007	1					
ANR	690029	Callee	dump_free_loc		690007	0					
ANR	690030	Identifier	dump_free_loc		690007	0					
ANR	690031	ArgumentList	mem		690007	1					
ANR	690032	Argument	mem		690007	0					
ANR	690033	Identifier	mem		690007	0					
ANR	690034	Argument	node -> left_loc		690007	1					
ANR	690035	PtrMemberAccess	node -> left_loc		690007	0					
ANR	690036	Identifier	node		690007	0					
ANR	690037	Identifier	left_loc		690007	1					
ANR	690038	Argument	depth + 1 + ( depth & 1 )		690007	2					
ANR	690039	AdditiveExpression	depth + 1 + ( depth & 1 )		690007	0		+			
ANR	690040	Identifier	depth		690007	0					
ANR	690041	AdditiveExpression	1 + ( depth & 1 )		690007	1		+			
ANR	690042	PrimaryExpression	1		690007	0					
ANR	690043	BitAndExpression	depth & 1		690007	1		&			
ANR	690044	Identifier	depth		690007	0					
ANR	690045	PrimaryExpression	1		690007	1					
ANR	690046	Argument	limit		690007	3					
ANR	690047	Identifier	limit		690007	0					
ANR	690048	Argument	total		690007	4					
ANR	690049	Identifier	total		690007	0					
ANR	690050	ExpressionStatement	* total += node -> size	327:4:10031:10051	690007	4	True				
ANR	690051	AssignmentExpression	* total += node -> size		690007	0		+=			
ANR	690052	UnaryOperationExpression	* total		690007	0					
ANR	690053	UnaryOperator	*		690007	0					
ANR	690054	Identifier	total		690007	1					
ANR	690055	PtrMemberAccess	node -> size		690007	1					
ANR	690056	Identifier	node		690007	0					
ANR	690057	Identifier	size		690007	1					
ANR	690058	IfStatement	if ( depth != 0 )		690007	5					
ANR	690059	Condition	depth != 0	329:8:10086:10095	690007	0	True				
ANR	690060	EqualityExpression	depth != 0		690007	0		!=			
ANR	690061	Identifier	depth		690007	0					
ANR	690062	PrimaryExpression	0		690007	1					
ANR	690063	CompoundStatement		13:20:257:257	690007	1					
ANR	690064	ForStatement	for ( i = ( depth - 1 ) >> 1 ; i != 0 ; i -- )		690007	0					
ANR	690065	ForInit	i = ( depth - 1 ) >> 1 ;	330:13:10113:10129	690007	0	True				
ANR	690066	AssignmentExpression	i = ( depth - 1 ) >> 1		690007	0		=			
ANR	690067	Identifier	i		690007	0					
ANR	690068	ShiftExpression	( depth - 1 ) >> 1		690007	1		>>			
ANR	690069	AdditiveExpression	depth - 1		690007	0		-			
ANR	690070	Identifier	depth		690007	0					
ANR	690071	PrimaryExpression	1		690007	1					
ANR	690072	PrimaryExpression	1		690007	1					
ANR	690073	Condition	i != 0	330:31:10131:10136	690007	1	True				
ANR	690074	EqualityExpression	i != 0		690007	0		!=			
ANR	690075	Identifier	i		690007	0					
ANR	690076	PrimaryExpression	0		690007	1					
ANR	690077	PostIncDecOperationExpression	i --	330:39:10139:10141	690007	2	True				
ANR	690078	Identifier	i		690007	0					
ANR	690079	IncDec	--		690007	1					
ANR	690080	ExpressionStatement	"dmlprintf ( mem , "" "" )"	331:12:10156:10175	690007	3	True				
ANR	690081	CallExpression	"dmlprintf ( mem , "" "" )"		690007	0					
ANR	690082	Callee	dmlprintf		690007	0					
ANR	690083	Identifier	dmlprintf		690007	0					
ANR	690084	ArgumentList	mem		690007	1					
ANR	690085	Argument	mem		690007	0					
ANR	690086	Identifier	mem		690007	0					
ANR	690087	Argument	""" """		690007	1					
ANR	690088	PrimaryExpression	""" """		690007	0					
ANR	690089	IfStatement	if ( depth & 1 )		690007	1					
ANR	690090	Condition	depth & 1	332:12:10189:10197	690007	0	True				
ANR	690091	BitAndExpression	depth & 1		690007	0		&			
ANR	690092	Identifier	depth		690007	0					
ANR	690093	PrimaryExpression	1		690007	1					
ANR	690094	ExpressionStatement	"dmlprintf ( mem , ""/"" )"	333:12:10212:10231	690007	1	True				
ANR	690095	CallExpression	"dmlprintf ( mem , ""/"" )"		690007	0					
ANR	690096	Callee	dmlprintf		690007	0					
ANR	690097	Identifier	dmlprintf		690007	0					
ANR	690098	ArgumentList	mem		690007	1					
ANR	690099	Argument	mem		690007	0					
ANR	690100	Identifier	mem		690007	0					
ANR	690101	Argument	"""/"""		690007	1					
ANR	690102	PrimaryExpression	"""/"""		690007	0					
ANR	690103	ElseStatement	else		690007	0					
ANR	690104	ExpressionStatement	"dmlprintf ( mem , ""\\\\"" )"	335:12:10258:10278	690007	0	True				
ANR	690105	CallExpression	"dmlprintf ( mem , ""\\\\"" )"		690007	0					
ANR	690106	Callee	dmlprintf		690007	0					
ANR	690107	Identifier	dmlprintf		690007	0					
ANR	690108	ArgumentList	mem		690007	1					
ANR	690109	Argument	mem		690007	0					
ANR	690110	Identifier	mem		690007	0					
ANR	690111	Argument	"""\\\\"""		690007	1					
ANR	690112	PrimaryExpression	"""\\\\"""		690007	0					
ANR	690113	ExpressionStatement	"dmlprintf3 ( mem , ""%p+%x->%p\\n"" , node , node -> size , ( ( byte * ) node ) + node -> size )"	337:4:10290:10365	690007	6	True				
ANR	690114	CallExpression	"dmlprintf3 ( mem , ""%p+%x->%p\\n"" , node , node -> size , ( ( byte * ) node ) + node -> size )"		690007	0					
ANR	690115	Callee	dmlprintf3		690007	0					
ANR	690116	Identifier	dmlprintf3		690007	0					
ANR	690117	ArgumentList	mem		690007	1					
ANR	690118	Argument	mem		690007	0					
ANR	690119	Identifier	mem		690007	0					
ANR	690120	Argument	"""%p+%x->%p\\n"""		690007	1					
ANR	690121	PrimaryExpression	"""%p+%x->%p\\n"""		690007	0					
ANR	690122	Argument	node		690007	2					
ANR	690123	Identifier	node		690007	0					
ANR	690124	Argument	node -> size		690007	3					
ANR	690125	PtrMemberAccess	node -> size		690007	0					
ANR	690126	Identifier	node		690007	0					
ANR	690127	Identifier	size		690007	1					
ANR	690128	Argument	( ( byte * ) node ) + node -> size		690007	4					
ANR	690129	AdditiveExpression	( ( byte * ) node ) + node -> size		690007	0		+			
ANR	690130	CastExpression	( byte * ) node		690007	0					
ANR	690131	CastTarget	byte *		690007	0					
ANR	690132	Identifier	node		690007	1					
ANR	690133	PtrMemberAccess	node -> size		690007	1					
ANR	690134	Identifier	node		690007	0					
ANR	690135	Identifier	size		690007	1					
ANR	690136	ExpressionStatement	"CHUNK_ASSERT ( mem , * limit < ( void * ) node )"	339:4:10378:10418	690007	7	True				
ANR	690137	CallExpression	"CHUNK_ASSERT ( mem , * limit < ( void * ) node )"		690007	0					
ANR	690138	Callee	CHUNK_ASSERT		690007	0					
ANR	690139	Identifier	CHUNK_ASSERT		690007	0					
ANR	690140	ArgumentList	mem		690007	1					
ANR	690141	Argument	mem		690007	0					
ANR	690142	Identifier	mem		690007	0					
ANR	690143	Argument	* limit < ( void * ) node		690007	1					
ANR	690144	RelationalExpression	* limit < ( void * ) node		690007	0		<			
ANR	690145	UnaryOperationExpression	* limit		690007	0					
ANR	690146	UnaryOperator	*		690007	0					
ANR	690147	Identifier	limit		690007	1					
ANR	690148	CastExpression	( void * ) node		690007	1					
ANR	690149	CastTarget	void *		690007	0					
ANR	690150	Identifier	node		690007	1					
ANR	690151	ExpressionStatement	* limit = ( ( byte * ) node ) + node -> size	340:4:10424:10458	690007	8	True				
ANR	690152	AssignmentExpression	* limit = ( ( byte * ) node ) + node -> size		690007	0		=			
ANR	690153	UnaryOperationExpression	* limit		690007	0					
ANR	690154	UnaryOperator	*		690007	0					
ANR	690155	Identifier	limit		690007	1					
ANR	690156	AdditiveExpression	( ( byte * ) node ) + node -> size		690007	1		+			
ANR	690157	CastExpression	( byte * ) node		690007	0					
ANR	690158	CastTarget	byte *		690007	0					
ANR	690159	Identifier	node		690007	1					
ANR	690160	PtrMemberAccess	node -> size		690007	1					
ANR	690161	Identifier	node		690007	0					
ANR	690162	Identifier	size		690007	1					
ANR	690163	ReturnStatement	"return 1 + count + dump_free_loc ( mem , node -> right_loc , depth + 2 + ( depth & 1 ) , limit , total ) ;"	341:4:10464:10555	690007	9	True				
ANR	690164	AdditiveExpression	"1 + count + dump_free_loc ( mem , node -> right_loc , depth + 2 + ( depth & 1 ) , limit , total )"		690007	0		+			
ANR	690165	PrimaryExpression	1		690007	0					
ANR	690166	AdditiveExpression	"count + dump_free_loc ( mem , node -> right_loc , depth + 2 + ( depth & 1 ) , limit , total )"		690007	1		+			
ANR	690167	Identifier	count		690007	0					
ANR	690168	CallExpression	"dump_free_loc ( mem , node -> right_loc , depth + 2 + ( depth & 1 ) , limit , total )"		690007	1					
ANR	690169	Callee	dump_free_loc		690007	0					
ANR	690170	Identifier	dump_free_loc		690007	0					
ANR	690171	ArgumentList	mem		690007	1					
ANR	690172	Argument	mem		690007	0					
ANR	690173	Identifier	mem		690007	0					
ANR	690174	Argument	node -> right_loc		690007	1					
ANR	690175	PtrMemberAccess	node -> right_loc		690007	0					
ANR	690176	Identifier	node		690007	0					
ANR	690177	Identifier	right_loc		690007	1					
ANR	690178	Argument	depth + 2 + ( depth & 1 )		690007	2					
ANR	690179	AdditiveExpression	depth + 2 + ( depth & 1 )		690007	0		+			
ANR	690180	Identifier	depth		690007	0					
ANR	690181	AdditiveExpression	2 + ( depth & 1 )		690007	1		+			
ANR	690182	PrimaryExpression	2		690007	0					
ANR	690183	BitAndExpression	depth & 1		690007	1		&			
ANR	690184	Identifier	depth		690007	0					
ANR	690185	PrimaryExpression	1		690007	1					
ANR	690186	Argument	limit		690007	3					
ANR	690187	Identifier	limit		690007	0					
ANR	690188	Argument	total		690007	4					
ANR	690189	Identifier	total		690007	0					
ANR	690190	ReturnType	static int		690007	1					
ANR	690191	Identifier	dump_free_loc		690007	2					
ANR	690192	ParameterList	"gs_memory_t * mem , chunk_free_node_t * node , int depth , void * * limit , uint * total"		690007	3					
ANR	690193	Parameter	gs_memory_t * mem	316:25:9759:9774	690007	0	True				
ANR	690194	ParameterType	gs_memory_t *		690007	0					
ANR	690195	Identifier	mem		690007	1					
ANR	690196	Parameter	chunk_free_node_t * node	316:43:9777:9799	690007	1	True				
ANR	690197	ParameterType	chunk_free_node_t *		690007	0					
ANR	690198	Identifier	node		690007	1					
ANR	690199	Parameter	int depth	316:68:9802:9810	690007	2	True				
ANR	690200	ParameterType	int		690007	0					
ANR	690201	Identifier	depth		690007	1					
ANR	690202	Parameter	void * * limit	316:79:9813:9824	690007	3	True				
ANR	690203	ParameterType	void * *		690007	0					
ANR	690204	Identifier	limit		690007	1					
ANR	690205	Parameter	uint * total	316:93:9827:9837	690007	4	True				
ANR	690206	ParameterType	uint *		690007	0					
ANR	690207	Identifier	total		690007	1					
ANR	690208	CFGEntryNode	ENTRY		690007		True				
ANR	690209	CFGExitNode	EXIT		690007		True				
ANR	690210	Symbol	dump_free_loc		690007						
ANR	690211	Symbol	* limit		690007						
ANR	690212	Symbol	NULL		690007						
ANR	690213	Symbol	node -> size		690007						
ANR	690214	Symbol	count		690007						
ANR	690215	Symbol	i		690007						
ANR	690216	Symbol	node -> left_loc		690007						
ANR	690217	Symbol	node		690007						
ANR	690218	Symbol	node -> right_loc		690007						
ANR	690219	Symbol	total		690007						
ANR	690220	Symbol	depth		690007						
ANR	690221	Symbol	mem		690007						
ANR	690222	Symbol	limit		690007						
ANR	690223	Symbol	* total		690007						
ANR	690224	Symbol	* node		690007						
ANR	690225	Function	dump_free_size	344:0:10560:11404							
ANR	690226	FunctionDef	"dump_free_size (gs_memory_t * mem , chunk_free_node_t * node , int depth , uint * size , void * * addr)"		690225	0					
ANR	690227	CompoundStatement		345:0:10665:11404	690225	0					
ANR	690228	IdentifierDeclStatement	int i ;	347:4:10696:10701	690225	0	True				
ANR	690229	IdentifierDecl	i		690225	0					
ANR	690230	IdentifierDeclType	int		690225	0					
ANR	690231	Identifier	i		690225	1					
ANR	690232	IdentifierDeclStatement	int count ;	349:4:10714:10723	690225	1	True				
ANR	690233	IdentifierDecl	count		690225	0					
ANR	690234	IdentifierDeclType	int		690225	0					
ANR	690235	Identifier	count		690225	1					
ANR	690236	IfStatement	if ( node == NULL )		690225	2					
ANR	690237	Condition	node == NULL	351:8:10734:10745	690225	0	True				
ANR	690238	EqualityExpression	node == NULL		690225	0		==			
ANR	690239	Identifier	node		690225	0					
ANR	690240	Identifier	NULL		690225	1					
ANR	690241	ReturnStatement	return 0 ;	352:8:10756:10764	690225	1	True				
ANR	690242	PrimaryExpression	0		690225	0					
ANR	690243	ExpressionStatement	"count = dump_free_size ( mem , node -> left_size , depth + 1 + ( depth & 1 ) , size , addr )"	354:4:10771:10850	690225	3	True				
ANR	690244	AssignmentExpression	"count = dump_free_size ( mem , node -> left_size , depth + 1 + ( depth & 1 ) , size , addr )"		690225	0		=			
ANR	690245	Identifier	count		690225	0					
ANR	690246	CallExpression	"dump_free_size ( mem , node -> left_size , depth + 1 + ( depth & 1 ) , size , addr )"		690225	1					
ANR	690247	Callee	dump_free_size		690225	0					
ANR	690248	Identifier	dump_free_size		690225	0					
ANR	690249	ArgumentList	mem		690225	1					
ANR	690250	Argument	mem		690225	0					
ANR	690251	Identifier	mem		690225	0					
ANR	690252	Argument	node -> left_size		690225	1					
ANR	690253	PtrMemberAccess	node -> left_size		690225	0					
ANR	690254	Identifier	node		690225	0					
ANR	690255	Identifier	left_size		690225	1					
ANR	690256	Argument	depth + 1 + ( depth & 1 )		690225	2					
ANR	690257	AdditiveExpression	depth + 1 + ( depth & 1 )		690225	0		+			
ANR	690258	Identifier	depth		690225	0					
ANR	690259	AdditiveExpression	1 + ( depth & 1 )		690225	1		+			
ANR	690260	PrimaryExpression	1		690225	0					
ANR	690261	BitAndExpression	depth & 1		690225	1		&			
ANR	690262	Identifier	depth		690225	0					
ANR	690263	PrimaryExpression	1		690225	1					
ANR	690264	Argument	size		690225	3					
ANR	690265	Identifier	size		690225	0					
ANR	690266	Argument	addr		690225	4					
ANR	690267	Identifier	addr		690225	0					
ANR	690268	IfStatement	if ( depth != 0 )		690225	4					
ANR	690269	Condition	depth != 0	356:8:10885:10894	690225	0	True				
ANR	690270	EqualityExpression	depth != 0		690225	0		!=			
ANR	690271	Identifier	depth		690225	0					
ANR	690272	PrimaryExpression	0		690225	1					
ANR	690273	CompoundStatement		12:20:231:231	690225	1					
ANR	690274	ForStatement	for ( i = ( depth - 1 ) >> 1 ; i != 0 ; i -- )		690225	0					
ANR	690275	ForInit	i = ( depth - 1 ) >> 1 ;	357:13:10912:10928	690225	0	True				
ANR	690276	AssignmentExpression	i = ( depth - 1 ) >> 1		690225	0		=			
ANR	690277	Identifier	i		690225	0					
ANR	690278	ShiftExpression	( depth - 1 ) >> 1		690225	1		>>			
ANR	690279	AdditiveExpression	depth - 1		690225	0		-			
ANR	690280	Identifier	depth		690225	0					
ANR	690281	PrimaryExpression	1		690225	1					
ANR	690282	PrimaryExpression	1		690225	1					
ANR	690283	Condition	i != 0	357:31:10930:10935	690225	1	True				
ANR	690284	EqualityExpression	i != 0		690225	0		!=			
ANR	690285	Identifier	i		690225	0					
ANR	690286	PrimaryExpression	0		690225	1					
ANR	690287	PostIncDecOperationExpression	i --	357:39:10938:10940	690225	2	True				
ANR	690288	Identifier	i		690225	0					
ANR	690289	IncDec	--		690225	1					
ANR	690290	ExpressionStatement	"dmlprintf ( mem , "" "" )"	358:12:10955:10974	690225	3	True				
ANR	690291	CallExpression	"dmlprintf ( mem , "" "" )"		690225	0					
ANR	690292	Callee	dmlprintf		690225	0					
ANR	690293	Identifier	dmlprintf		690225	0					
ANR	690294	ArgumentList	mem		690225	1					
ANR	690295	Argument	mem		690225	0					
ANR	690296	Identifier	mem		690225	0					
ANR	690297	Argument	""" """		690225	1					
ANR	690298	PrimaryExpression	""" """		690225	0					
ANR	690299	IfStatement	if ( depth & 1 )		690225	1					
ANR	690300	Condition	depth & 1	359:12:10988:10996	690225	0	True				
ANR	690301	BitAndExpression	depth & 1		690225	0		&			
ANR	690302	Identifier	depth		690225	0					
ANR	690303	PrimaryExpression	1		690225	1					
ANR	690304	ExpressionStatement	"dmlprintf ( mem , ""/"" )"	360:12:11011:11030	690225	1	True				
ANR	690305	CallExpression	"dmlprintf ( mem , ""/"" )"		690225	0					
ANR	690306	Callee	dmlprintf		690225	0					
ANR	690307	Identifier	dmlprintf		690225	0					
ANR	690308	ArgumentList	mem		690225	1					
ANR	690309	Argument	mem		690225	0					
ANR	690310	Identifier	mem		690225	0					
ANR	690311	Argument	"""/"""		690225	1					
ANR	690312	PrimaryExpression	"""/"""		690225	0					
ANR	690313	ElseStatement	else		690225	0					
ANR	690314	ExpressionStatement	"dmlprintf ( mem , ""\\\\"" )"	362:12:11057:11077	690225	0	True				
ANR	690315	CallExpression	"dmlprintf ( mem , ""\\\\"" )"		690225	0					
ANR	690316	Callee	dmlprintf		690225	0					
ANR	690317	Identifier	dmlprintf		690225	0					
ANR	690318	ArgumentList	mem		690225	1					
ANR	690319	Argument	mem		690225	0					
ANR	690320	Identifier	mem		690225	0					
ANR	690321	Argument	"""\\\\"""		690225	1					
ANR	690322	PrimaryExpression	"""\\\\"""		690225	0					
ANR	690323	ExpressionStatement	"dmlprintf3 ( mem , ""%p+%x->%p\\n"" , node , node -> size , ( ( byte * ) node ) + node -> size )"	364:4:11089:11164	690225	5	True				
ANR	690324	CallExpression	"dmlprintf3 ( mem , ""%p+%x->%p\\n"" , node , node -> size , ( ( byte * ) node ) + node -> size )"		690225	0					
ANR	690325	Callee	dmlprintf3		690225	0					
ANR	690326	Identifier	dmlprintf3		690225	0					
ANR	690327	ArgumentList	mem		690225	1					
ANR	690328	Argument	mem		690225	0					
ANR	690329	Identifier	mem		690225	0					
ANR	690330	Argument	"""%p+%x->%p\\n"""		690225	1					
ANR	690331	PrimaryExpression	"""%p+%x->%p\\n"""		690225	0					
ANR	690332	Argument	node		690225	2					
ANR	690333	Identifier	node		690225	0					
ANR	690334	Argument	node -> size		690225	3					
ANR	690335	PtrMemberAccess	node -> size		690225	0					
ANR	690336	Identifier	node		690225	0					
ANR	690337	Identifier	size		690225	1					
ANR	690338	Argument	( ( byte * ) node ) + node -> size		690225	4					
ANR	690339	AdditiveExpression	( ( byte * ) node ) + node -> size		690225	0		+			
ANR	690340	CastExpression	( byte * ) node		690225	0					
ANR	690341	CastTarget	byte *		690225	0					
ANR	690342	Identifier	node		690225	1					
ANR	690343	PtrMemberAccess	node -> size		690225	1					
ANR	690344	Identifier	node		690225	0					
ANR	690345	Identifier	size		690225	1					
ANR	690346	ExpressionStatement	"CHUNK_ASSERT ( mem , * size < node -> size || ( * size == node -> size && * addr < ( void * ) node ) )"	366:4:11177:11263	690225	6	True				
ANR	690347	CallExpression	"CHUNK_ASSERT ( mem , * size < node -> size || ( * size == node -> size && * addr < ( void * ) node ) )"		690225	0					
ANR	690348	Callee	CHUNK_ASSERT		690225	0					
ANR	690349	Identifier	CHUNK_ASSERT		690225	0					
ANR	690350	ArgumentList	mem		690225	1					
ANR	690351	Argument	mem		690225	0					
ANR	690352	Identifier	mem		690225	0					
ANR	690353	Argument	* size < node -> size || ( * size == node -> size && * addr < ( void * ) node )		690225	1					
ANR	690354	OrExpression	* size < node -> size || ( * size == node -> size && * addr < ( void * ) node )		690225	0		||			
ANR	690355	RelationalExpression	* size < node -> size		690225	0		<			
ANR	690356	UnaryOperationExpression	* size		690225	0					
ANR	690357	UnaryOperator	*		690225	0					
ANR	690358	Identifier	size		690225	1					
ANR	690359	PtrMemberAccess	node -> size		690225	1					
ANR	690360	Identifier	node		690225	0					
ANR	690361	Identifier	size		690225	1					
ANR	690362	AndExpression	* size == node -> size && * addr < ( void * ) node		690225	1		&&			
ANR	690363	EqualityExpression	* size == node -> size		690225	0		==			
ANR	690364	UnaryOperationExpression	* size		690225	0					
ANR	690365	UnaryOperator	*		690225	0					
ANR	690366	Identifier	size		690225	1					
ANR	690367	PtrMemberAccess	node -> size		690225	1					
ANR	690368	Identifier	node		690225	0					
ANR	690369	Identifier	size		690225	1					
ANR	690370	RelationalExpression	* addr < ( void * ) node		690225	1		<			
ANR	690371	UnaryOperationExpression	* addr		690225	0					
ANR	690372	UnaryOperator	*		690225	0					
ANR	690373	Identifier	addr		690225	1					
ANR	690374	CastExpression	( void * ) node		690225	1					
ANR	690375	CastTarget	void *		690225	0					
ANR	690376	Identifier	node		690225	1					
ANR	690377	ExpressionStatement	* size = node -> size	367:4:11269:11287	690225	7	True				
ANR	690378	AssignmentExpression	* size = node -> size		690225	0		=			
ANR	690379	UnaryOperationExpression	* size		690225	0					
ANR	690380	UnaryOperator	*		690225	0					
ANR	690381	Identifier	size		690225	1					
ANR	690382	PtrMemberAccess	node -> size		690225	1					
ANR	690383	Identifier	node		690225	0					
ANR	690384	Identifier	size		690225	1					
ANR	690385	ExpressionStatement	* addr = node	368:4:11293:11305	690225	8	True				
ANR	690386	AssignmentExpression	* addr = node		690225	0		=			
ANR	690387	UnaryOperationExpression	* addr		690225	0					
ANR	690388	UnaryOperator	*		690225	0					
ANR	690389	Identifier	addr		690225	1					
ANR	690390	Identifier	node		690225	1					
ANR	690391	ReturnStatement	"return 1 + count + dump_free_size ( mem , node -> right_size , depth + 2 + ( depth & 1 ) , size , addr ) ;"	369:4:11311:11402	690225	9	True				
ANR	690392	AdditiveExpression	"1 + count + dump_free_size ( mem , node -> right_size , depth + 2 + ( depth & 1 ) , size , addr )"		690225	0		+			
ANR	690393	PrimaryExpression	1		690225	0					
ANR	690394	AdditiveExpression	"count + dump_free_size ( mem , node -> right_size , depth + 2 + ( depth & 1 ) , size , addr )"		690225	1		+			
ANR	690395	Identifier	count		690225	0					
ANR	690396	CallExpression	"dump_free_size ( mem , node -> right_size , depth + 2 + ( depth & 1 ) , size , addr )"		690225	1					
ANR	690397	Callee	dump_free_size		690225	0					
ANR	690398	Identifier	dump_free_size		690225	0					
ANR	690399	ArgumentList	mem		690225	1					
ANR	690400	Argument	mem		690225	0					
ANR	690401	Identifier	mem		690225	0					
ANR	690402	Argument	node -> right_size		690225	1					
ANR	690403	PtrMemberAccess	node -> right_size		690225	0					
ANR	690404	Identifier	node		690225	0					
ANR	690405	Identifier	right_size		690225	1					
ANR	690406	Argument	depth + 2 + ( depth & 1 )		690225	2					
ANR	690407	AdditiveExpression	depth + 2 + ( depth & 1 )		690225	0		+			
ANR	690408	Identifier	depth		690225	0					
ANR	690409	AdditiveExpression	2 + ( depth & 1 )		690225	1		+			
ANR	690410	PrimaryExpression	2		690225	0					
ANR	690411	BitAndExpression	depth & 1		690225	1		&			
ANR	690412	Identifier	depth		690225	0					
ANR	690413	PrimaryExpression	1		690225	1					
ANR	690414	Argument	size		690225	3					
ANR	690415	Identifier	size		690225	0					
ANR	690416	Argument	addr		690225	4					
ANR	690417	Identifier	addr		690225	0					
ANR	690418	ReturnType	static int		690225	1					
ANR	690419	Identifier	dump_free_size		690225	2					
ANR	690420	ParameterList	"gs_memory_t * mem , chunk_free_node_t * node , int depth , uint * size , void * * addr"		690225	3					
ANR	690421	Parameter	gs_memory_t * mem	344:26:10586:10601	690225	0	True				
ANR	690422	ParameterType	gs_memory_t *		690225	0					
ANR	690423	Identifier	mem		690225	1					
ANR	690424	Parameter	chunk_free_node_t * node	344:44:10604:10626	690225	1	True				
ANR	690425	ParameterType	chunk_free_node_t *		690225	0					
ANR	690426	Identifier	node		690225	1					
ANR	690427	Parameter	int depth	344:69:10629:10637	690225	2	True				
ANR	690428	ParameterType	int		690225	0					
ANR	690429	Identifier	depth		690225	1					
ANR	690430	Parameter	uint * size	344:80:10640:10649	690225	3	True				
ANR	690431	ParameterType	uint *		690225	0					
ANR	690432	Identifier	size		690225	1					
ANR	690433	Parameter	void * * addr	344:92:10652:10662	690225	4	True				
ANR	690434	ParameterType	void * *		690225	0					
ANR	690435	Identifier	addr		690225	1					
ANR	690436	CFGEntryNode	ENTRY		690225		True				
ANR	690437	CFGExitNode	EXIT		690225		True				
ANR	690438	Symbol	NULL		690225						
ANR	690439	Symbol	node -> size		690225						
ANR	690440	Symbol	count		690225						
ANR	690441	Symbol	i		690225						
ANR	690442	Symbol	dump_free_size		690225						
ANR	690443	Symbol	node		690225						
ANR	690444	Symbol	depth		690225						
ANR	690445	Symbol	* size		690225						
ANR	690446	Symbol	mem		690225						
ANR	690447	Symbol	size		690225						
ANR	690448	Symbol	* node		690225						
ANR	690449	Symbol	node -> left_size		690225						
ANR	690450	Symbol	* addr		690225						
ANR	690451	Symbol	addr		690225						
ANR	690452	Symbol	node -> right_size		690225						
ANR	690453	Function	gs_memory_chunk_dump_memory	372:0:11407:12592							
ANR	690454	FunctionDef	gs_memory_chunk_dump_memory (const gs_memory_t * mem)		690453	0					
ANR	690455	CompoundStatement		374:0:11464:12592	690453	0					
ANR	690456	IdentifierDeclStatement	const gs_memory_chunk_t * cmem = ( const gs_memory_chunk_t * ) mem ;	375:4:11470:11532	690453	0	True				
ANR	690457	IdentifierDecl	* cmem = ( const gs_memory_chunk_t * ) mem		690453	0					
ANR	690458	IdentifierDeclType	const gs_memory_chunk_t *		690453	0					
ANR	690459	Identifier	cmem		690453	1					
ANR	690460	AssignmentExpression	* cmem = ( const gs_memory_chunk_t * ) mem		690453	2		=			
ANR	690461	Identifier	cmem		690453	0					
ANR	690462	CastExpression	( const gs_memory_chunk_t * ) mem		690453	1					
ANR	690463	CastTarget	const gs_memory_chunk_t *		690453	0					
ANR	690464	Identifier	mem		690453	1					
ANR	690465	IdentifierDeclStatement	"int count1 , count2 ;"	376:4:11538:11556	690453	1	True				
ANR	690466	IdentifierDecl	count1		690453	0					
ANR	690467	IdentifierDeclType	int		690453	0					
ANR	690468	Identifier	count1		690453	1					
ANR	690469	IdentifierDecl	count2		690453	1					
ANR	690470	IdentifierDeclType	int		690453	0					
ANR	690471	Identifier	count2		690453	1					
ANR	690472	IdentifierDeclStatement	void * limit = NULL ;	377:4:11562:11580	690453	2	True				
ANR	690473	IdentifierDecl	* limit = NULL		690453	0					
ANR	690474	IdentifierDeclType	void *		690453	0					
ANR	690475	Identifier	limit		690453	1					
ANR	690476	AssignmentExpression	* limit = NULL		690453	2		=			
ANR	690477	Identifier	NULL		690453	0					
ANR	690478	Identifier	NULL		690453	1					
ANR	690479	IdentifierDeclStatement	void * addr = NULL ;	378:4:11586:11603	690453	3	True				
ANR	690480	IdentifierDecl	* addr = NULL		690453	0					
ANR	690481	IdentifierDeclType	void *		690453	0					
ANR	690482	Identifier	addr		690453	1					
ANR	690483	AssignmentExpression	* addr = NULL		690453	2		=			
ANR	690484	Identifier	NULL		690453	0					
ANR	690485	Identifier	NULL		690453	1					
ANR	690486	IdentifierDeclStatement	uint size = 1 ;	379:4:11609:11622	690453	4	True				
ANR	690487	IdentifierDecl	size = 1		690453	0					
ANR	690488	IdentifierDeclType	uint		690453	0					
ANR	690489	Identifier	size		690453	1					
ANR	690490	AssignmentExpression	size = 1		690453	2		=			
ANR	690491	Identifier	size		690453	0					
ANR	690492	PrimaryExpression	1		690453	1					
ANR	690493	IdentifierDeclStatement	uint total = 0 ;	380:4:11628:11642	690453	5	True				
ANR	690494	IdentifierDecl	total = 0		690453	0					
ANR	690495	IdentifierDeclType	uint		690453	0					
ANR	690496	Identifier	total		690453	1					
ANR	690497	AssignmentExpression	total = 0		690453	2		=			
ANR	690498	Identifier	total		690453	0					
ANR	690499	PrimaryExpression	0		690453	1					
ANR	690500	ExpressionStatement	"dmlprintf1 ( cmem -> target , ""Chunk %p:\\n"" , cmem )"	383:4:11674:11719	690453	6	True				
ANR	690501	CallExpression	"dmlprintf1 ( cmem -> target , ""Chunk %p:\\n"" , cmem )"		690453	0					
ANR	690502	Callee	dmlprintf1		690453	0					
ANR	690503	Identifier	dmlprintf1		690453	0					
ANR	690504	ArgumentList	cmem -> target		690453	1					
ANR	690505	Argument	cmem -> target		690453	0					
ANR	690506	PtrMemberAccess	cmem -> target		690453	0					
ANR	690507	Identifier	cmem		690453	0					
ANR	690508	Identifier	target		690453	1					
ANR	690509	Argument	"""Chunk %p:\\n"""		690453	1					
ANR	690510	PrimaryExpression	"""Chunk %p:\\n"""		690453	0					
ANR	690511	Argument	cmem		690453	2					
ANR	690512	Identifier	cmem		690453	0					
ANR	690513	CompoundStatement		13:8:301:319	690453	7					
ANR	690514	IdentifierDeclStatement	chunk_slab_t * slab ;	386:8:11766:11784	690453	0	True				
ANR	690515	IdentifierDecl	* slab		690453	0					
ANR	690516	IdentifierDeclType	chunk_slab_t *		690453	0					
ANR	690517	Identifier	slab		690453	1					
ANR	690518	ExpressionStatement	"dmlprintf ( cmem -> target , ""Slabs\\n"" )"	387:8:11794:11828	690453	1	True				
ANR	690519	CallExpression	"dmlprintf ( cmem -> target , ""Slabs\\n"" )"		690453	0					
ANR	690520	Callee	dmlprintf		690453	0					
ANR	690521	Identifier	dmlprintf		690453	0					
ANR	690522	ArgumentList	cmem -> target		690453	1					
ANR	690523	Argument	cmem -> target		690453	0					
ANR	690524	PtrMemberAccess	cmem -> target		690453	0					
ANR	690525	Identifier	cmem		690453	0					
ANR	690526	Identifier	target		690453	1					
ANR	690527	Argument	"""Slabs\\n"""		690453	1					
ANR	690528	PrimaryExpression	"""Slabs\\n"""		690453	0					
ANR	690529	ForStatement	for ( slab = cmem -> slabs ; slab != NULL ; slab = slab -> next )		690453	2					
ANR	690530	ForInit	slab = cmem -> slabs ;	388:13:11843:11861	690453	0	True				
ANR	690531	AssignmentExpression	slab = cmem -> slabs		690453	0		=			
ANR	690532	Identifier	slab		690453	0					
ANR	690533	PtrMemberAccess	cmem -> slabs		690453	1					
ANR	690534	Identifier	cmem		690453	0					
ANR	690535	Identifier	slabs		690453	1					
ANR	690536	Condition	slab != NULL	388:33:11863:11874	690453	1	True				
ANR	690537	EqualityExpression	slab != NULL		690453	0		!=			
ANR	690538	Identifier	slab		690453	0					
ANR	690539	Identifier	NULL		690453	1					
ANR	690540	AssignmentExpression	slab = slab -> next	388:47:11877:11893	690453	2	True	=			
ANR	690541	Identifier	slab		690453	0					
ANR	690542	PtrMemberAccess	slab -> next		690453	1					
ANR	690543	Identifier	slab		690453	0					
ANR	690544	Identifier	next		690453	1					
ANR	690545	ExpressionStatement	"dmlprintf1 ( cmem -> target , "" %p\\n"" , slab )"	389:12:11908:11947	690453	3	True				
ANR	690546	CallExpression	"dmlprintf1 ( cmem -> target , "" %p\\n"" , slab )"		690453	0					
ANR	690547	Callee	dmlprintf1		690453	0					
ANR	690548	Identifier	dmlprintf1		690453	0					
ANR	690549	ArgumentList	cmem -> target		690453	1					
ANR	690550	Argument	cmem -> target		690453	0					
ANR	690551	PtrMemberAccess	cmem -> target		690453	0					
ANR	690552	Identifier	cmem		690453	0					
ANR	690553	Identifier	target		690453	1					
ANR	690554	Argument	""" %p\\n"""		690453	1					
ANR	690555	PrimaryExpression	""" %p\\n"""		690453	0					
ANR	690556	Argument	slab		690453	2					
ANR	690557	Identifier	slab		690453	0					
ANR	690558	ExpressionStatement	"dmlprintf ( cmem -> target , ""Locs:\\n"" )"	392:4:11966:12000	690453	8	True				
ANR	690559	CallExpression	"dmlprintf ( cmem -> target , ""Locs:\\n"" )"		690453	0					
ANR	690560	Callee	dmlprintf		690453	0					
ANR	690561	Identifier	dmlprintf		690453	0					
ANR	690562	ArgumentList	cmem -> target		690453	1					
ANR	690563	Argument	cmem -> target		690453	0					
ANR	690564	PtrMemberAccess	cmem -> target		690453	0					
ANR	690565	Identifier	cmem		690453	0					
ANR	690566	Identifier	target		690453	1					
ANR	690567	Argument	"""Locs:\\n"""		690453	1					
ANR	690568	PrimaryExpression	"""Locs:\\n"""		690453	0					
ANR	690569	ExpressionStatement	"count1 = dump_free_loc ( cmem -> target , cmem -> free_loc , 0 , & limit , & total )"	394:4:12013:12084	690453	9	True				
ANR	690570	AssignmentExpression	"count1 = dump_free_loc ( cmem -> target , cmem -> free_loc , 0 , & limit , & total )"		690453	0		=			
ANR	690571	Identifier	count1		690453	0					
ANR	690572	CallExpression	"dump_free_loc ( cmem -> target , cmem -> free_loc , 0 , & limit , & total )"		690453	1					
ANR	690573	Callee	dump_free_loc		690453	0					
ANR	690574	Identifier	dump_free_loc		690453	0					
ANR	690575	ArgumentList	cmem -> target		690453	1					
ANR	690576	Argument	cmem -> target		690453	0					
ANR	690577	PtrMemberAccess	cmem -> target		690453	0					
ANR	690578	Identifier	cmem		690453	0					
ANR	690579	Identifier	target		690453	1					
ANR	690580	Argument	cmem -> free_loc		690453	1					
ANR	690581	PtrMemberAccess	cmem -> free_loc		690453	0					
ANR	690582	Identifier	cmem		690453	0					
ANR	690583	Identifier	free_loc		690453	1					
ANR	690584	Argument	0		690453	2					
ANR	690585	PrimaryExpression	0		690453	0					
ANR	690586	Argument	& limit		690453	3					
ANR	690587	UnaryOperationExpression	& limit		690453	0					
ANR	690588	UnaryOperator	&		690453	0					
ANR	690589	Identifier	limit		690453	1					
ANR	690590	Argument	& total		690453	4					
ANR	690591	UnaryOperationExpression	& total		690453	0					
ANR	690592	UnaryOperator	&		690453	0					
ANR	690593	Identifier	total		690453	1					
ANR	690594	ExpressionStatement	"dmlprintf ( cmem -> target , ""Sizes:\\n"" )"	396:4:12115:12150	690453	10	True				
ANR	690595	CallExpression	"dmlprintf ( cmem -> target , ""Sizes:\\n"" )"		690453	0					
ANR	690596	Callee	dmlprintf		690453	0					
ANR	690597	Identifier	dmlprintf		690453	0					
ANR	690598	ArgumentList	cmem -> target		690453	1					
ANR	690599	Argument	cmem -> target		690453	0					
ANR	690600	PtrMemberAccess	cmem -> target		690453	0					
ANR	690601	Identifier	cmem		690453	0					
ANR	690602	Identifier	target		690453	1					
ANR	690603	Argument	"""Sizes:\\n"""		690453	1					
ANR	690604	PrimaryExpression	"""Sizes:\\n"""		690453	0					
ANR	690605	ExpressionStatement	"count2 = dump_free_size ( cmem -> target , cmem -> free_size , 0 , & size , & addr )"	398:4:12163:12234	690453	11	True				
ANR	690606	AssignmentExpression	"count2 = dump_free_size ( cmem -> target , cmem -> free_size , 0 , & size , & addr )"		690453	0		=			
ANR	690607	Identifier	count2		690453	0					
ANR	690608	CallExpression	"dump_free_size ( cmem -> target , cmem -> free_size , 0 , & size , & addr )"		690453	1					
ANR	690609	Callee	dump_free_size		690453	0					
ANR	690610	Identifier	dump_free_size		690453	0					
ANR	690611	ArgumentList	cmem -> target		690453	1					
ANR	690612	Argument	cmem -> target		690453	0					
ANR	690613	PtrMemberAccess	cmem -> target		690453	0					
ANR	690614	Identifier	cmem		690453	0					
ANR	690615	Identifier	target		690453	1					
ANR	690616	Argument	cmem -> free_size		690453	1					
ANR	690617	PtrMemberAccess	cmem -> free_size		690453	0					
ANR	690618	Identifier	cmem		690453	0					
ANR	690619	Identifier	free_size		690453	1					
ANR	690620	Argument	0		690453	2					
ANR	690621	PrimaryExpression	0		690453	0					
ANR	690622	Argument	& size		690453	3					
ANR	690623	UnaryOperationExpression	& size		690453	0					
ANR	690624	UnaryOperator	&		690453	0					
ANR	690625	Identifier	size		690453	1					
ANR	690626	Argument	& addr		690453	4					
ANR	690627	UnaryOperationExpression	& addr		690453	0					
ANR	690628	UnaryOperator	&		690453	0					
ANR	690629	Identifier	addr		690453	1					
ANR	690630	IfStatement	if ( count1 != count2 )		690453	12					
ANR	690631	Condition	count1 != count2	399:8:12244:12259	690453	0	True				
ANR	690632	EqualityExpression	count1 != count2		690453	0		!=			
ANR	690633	Identifier	count1		690453	0					
ANR	690634	Identifier	count2		690453	1					
ANR	690635	CompoundStatement		27:8:807:833	690453	1					
ANR	690636	IdentifierDeclStatement	void ( * crash ) ( void ) = NULL ;	400:8:12272:12298	690453	0	True				
ANR	690637	IdentifierDecl	( * crash ) ( void ) = NULL		690453	0					
ANR	690638	IdentifierDeclType	void ( * ) ( void )		690453	0					
ANR	690639	Identifier	crash		690453	1					
ANR	690640	AssignmentExpression	( * crash ) ( void ) = NULL		690453	2		=			
ANR	690641	Identifier	NULL		690453	0					
ANR	690642	Identifier	NULL		690453	1					
ANR	690643	ExpressionStatement	"dmlprintf2 ( cmem -> target , ""Tree mismatch! %d vs %d\\n"" , count1 , count2 )"	401:8:12308:12377	690453	1	True				
ANR	690644	CallExpression	"dmlprintf2 ( cmem -> target , ""Tree mismatch! %d vs %d\\n"" , count1 , count2 )"		690453	0					
ANR	690645	Callee	dmlprintf2		690453	0					
ANR	690646	Identifier	dmlprintf2		690453	0					
ANR	690647	ArgumentList	cmem -> target		690453	1					
ANR	690648	Argument	cmem -> target		690453	0					
ANR	690649	PtrMemberAccess	cmem -> target		690453	0					
ANR	690650	Identifier	cmem		690453	0					
ANR	690651	Identifier	target		690453	1					
ANR	690652	Argument	"""Tree mismatch! %d vs %d\\n"""		690453	1					
ANR	690653	PrimaryExpression	"""Tree mismatch! %d vs %d\\n"""		690453	0					
ANR	690654	Argument	count1		690453	2					
ANR	690655	Identifier	count1		690453	0					
ANR	690656	Argument	count2		690453	3					
ANR	690657	Identifier	count2		690453	0					
ANR	690658	ExpressionStatement	crash ( )	402:8:12387:12394	690453	2	True				
ANR	690659	CallExpression	crash ( )		690453	0					
ANR	690660	Callee	crash		690453	0					
ANR	690661	Identifier	crash		690453	0					
ANR	690662	ArgumentList			690453	1					
ANR	690663	IfStatement	if ( total != cmem -> total_free )		690453	13					
ANR	690664	Condition	total != cmem -> total_free	404:8:12410:12434	690453	0	True				
ANR	690665	EqualityExpression	total != cmem -> total_free		690453	0		!=			
ANR	690666	Identifier	total		690453	0					
ANR	690667	PtrMemberAccess	cmem -> total_free		690453	1					
ANR	690668	Identifier	cmem		690453	0					
ANR	690669	Identifier	total_free		690453	1					
ANR	690670	CompoundStatement		32:8:982:1008	690453	1					
ANR	690671	IdentifierDeclStatement	void ( * crash ) ( void ) = NULL ;	405:8:12447:12473	690453	0	True				
ANR	690672	IdentifierDecl	( * crash ) ( void ) = NULL		690453	0					
ANR	690673	IdentifierDeclType	void ( * ) ( void )		690453	0					
ANR	690674	Identifier	crash		690453	1					
ANR	690675	AssignmentExpression	( * crash ) ( void ) = NULL		690453	2		=			
ANR	690676	Identifier	NULL		690453	0					
ANR	690677	Identifier	NULL		690453	1					
ANR	690678	ExpressionStatement	"dmlprintf2 ( cmem -> target , ""Free size mismatch! %u vs %lu\\n"" , total , cmem -> total_free )"	406:8:12483:12567	690453	1	True				
ANR	690679	CallExpression	"dmlprintf2 ( cmem -> target , ""Free size mismatch! %u vs %lu\\n"" , total , cmem -> total_free )"		690453	0					
ANR	690680	Callee	dmlprintf2		690453	0					
ANR	690681	Identifier	dmlprintf2		690453	0					
ANR	690682	ArgumentList	cmem -> target		690453	1					
ANR	690683	Argument	cmem -> target		690453	0					
ANR	690684	PtrMemberAccess	cmem -> target		690453	0					
ANR	690685	Identifier	cmem		690453	0					
ANR	690686	Identifier	target		690453	1					
ANR	690687	Argument	"""Free size mismatch! %u vs %lu\\n"""		690453	1					
ANR	690688	PrimaryExpression	"""Free size mismatch! %u vs %lu\\n"""		690453	0					
ANR	690689	Argument	total		690453	2					
ANR	690690	Identifier	total		690453	0					
ANR	690691	Argument	cmem -> total_free		690453	3					
ANR	690692	PtrMemberAccess	cmem -> total_free		690453	0					
ANR	690693	Identifier	cmem		690453	0					
ANR	690694	Identifier	total_free		690453	1					
ANR	690695	ExpressionStatement	crash ( )	407:8:12577:12584	690453	2	True				
ANR	690696	CallExpression	crash ( )		690453	0					
ANR	690697	Callee	crash		690453	0					
ANR	690698	Identifier	crash		690453	0					
ANR	690699	ArgumentList			690453	1					
ANR	690700	ReturnType	void		690453	1					
ANR	690701	Identifier	gs_memory_chunk_dump_memory		690453	2					
ANR	690702	ParameterList	const gs_memory_t * mem		690453	3					
ANR	690703	Parameter	const gs_memory_t * mem	373:28:11440:11461	690453	0	True				
ANR	690704	ParameterType	const gs_memory_t *		690453	0					
ANR	690705	Identifier	mem		690453	1					
ANR	690706	CFGEntryNode	ENTRY		690453		True				
ANR	690707	CFGExitNode	EXIT		690453		True				
ANR	690708	Symbol	count1		690453						
ANR	690709	Symbol	count2		690453						
ANR	690710	Symbol	dump_free_loc		690453						
ANR	690711	Symbol	dump_free_size		690453						
ANR	690712	Symbol	cmem -> total_free		690453						
ANR	690713	Symbol	cmem -> slabs		690453						
ANR	690714	Symbol	slab		690453						
ANR	690715	Symbol	crash		690453						
ANR	690716	Symbol	total		690453						
ANR	690717	Symbol	mem		690453						
ANR	690718	Symbol	* slab		690453						
ANR	690719	Symbol	& total		690453						
ANR	690720	Symbol	* cmem		690453						
ANR	690721	Symbol	limit		690453						
ANR	690722	Symbol	cmem -> target		690453						
ANR	690723	Symbol	addr		690453						
ANR	690724	Symbol	cmem -> free_loc		690453						
ANR	690725	Symbol	NULL		690453						
ANR	690726	Symbol	& addr		690453						
ANR	690727	Symbol	& limit		690453						
ANR	690728	Symbol	& size		690453						
ANR	690729	Symbol	slab -> next		690453						
ANR	690730	Symbol	cmem -> free_size		690453						
ANR	690731	Symbol	size		690453						
ANR	690732	Symbol	cmem		690453						
ANR	690733	Function	round_up_to_align	413:0:12669:12906							
ANR	690734	FunctionDef	round_up_to_align (uint size)		690733	0					
ANR	690735	CompoundStatement		415:0:12717:12906	690733	0					
ANR	690736	IdentifierDeclStatement	uint num_node_headers = ( size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) - 1 ) / SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) ;	416:4:12723:12835	690733	0	True				
ANR	690737	IdentifierDecl	num_node_headers = ( size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) - 1 ) / SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		690733	0					
ANR	690738	IdentifierDeclType	uint		690733	0					
ANR	690739	Identifier	num_node_headers		690733	1					
ANR	690740	AssignmentExpression	num_node_headers = ( size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) - 1 ) / SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		690733	2		=			
ANR	690741	Identifier	num_node_headers		690733	0					
ANR	690742	MultiplicativeExpression	( size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) - 1 ) / SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		690733	1		/			
ANR	690743	AdditiveExpression	size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) - 1		690733	0		+			
ANR	690744	Identifier	size		690733	0					
ANR	690745	AdditiveExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) - 1		690733	1		-			
ANR	690746	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		690733	0					
ANR	690747	Callee	SIZEOF_ROUND_ALIGN		690733	0					
ANR	690748	Identifier	SIZEOF_ROUND_ALIGN		690733	0					
ANR	690749	ArgumentList	chunk_obj_node_t		690733	1					
ANR	690750	Argument	chunk_obj_node_t		690733	0					
ANR	690751	Identifier	chunk_obj_node_t		690733	0					
ANR	690752	PrimaryExpression	1		690733	1					
ANR	690753	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		690733	1					
ANR	690754	Callee	SIZEOF_ROUND_ALIGN		690733	0					
ANR	690755	Identifier	SIZEOF_ROUND_ALIGN		690733	0					
ANR	690756	ArgumentList	chunk_obj_node_t		690733	1					
ANR	690757	Argument	chunk_obj_node_t		690733	0					
ANR	690758	Identifier	chunk_obj_node_t		690733	0					
ANR	690759	ReturnStatement	return num_node_headers * SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) ;	418:4:12842:12904	690733	1	True				
ANR	690760	MultiplicativeExpression	num_node_headers * SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		690733	0		*			
ANR	690761	Identifier	num_node_headers		690733	0					
ANR	690762	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		690733	1					
ANR	690763	Callee	SIZEOF_ROUND_ALIGN		690733	0					
ANR	690764	Identifier	SIZEOF_ROUND_ALIGN		690733	0					
ANR	690765	ArgumentList	chunk_obj_node_t		690733	1					
ANR	690766	Argument	chunk_obj_node_t		690733	0					
ANR	690767	Identifier	chunk_obj_node_t		690733	0					
ANR	690768	ReturnType	inline static uint		690733	1					
ANR	690769	Identifier	round_up_to_align		690733	2					
ANR	690770	ParameterList	uint size		690733	3					
ANR	690771	Parameter	uint size	414:18:12706:12714	690733	0	True				
ANR	690772	ParameterType	uint		690733	0					
ANR	690773	Identifier	size		690733	1					
ANR	690774	CFGEntryNode	ENTRY		690733		True				
ANR	690775	CFGExitNode	EXIT		690733		True				
ANR	690776	Symbol	size		690733						
ANR	690777	Symbol	SIZEOF_ROUND_ALIGN		690733						
ANR	690778	Symbol	chunk_obj_node_t		690733						
ANR	690779	Symbol	num_node_headers		690733						
ANR	690780	Function	CMP_SIZE	421:0:12909:13106							
ANR	690781	FunctionDef	"CMP_SIZE (const chunk_free_node_t * a , const chunk_free_node_t * b)"		690780	0					
ANR	690782	CompoundStatement		422:0:12994:13106	690780	0					
ANR	690783	IfStatement	if ( a -> size > b -> size )		690780	0					
ANR	690784	Condition	a -> size > b -> size	423:8:13004:13020	690780	0	True				
ANR	690785	RelationalExpression	a -> size > b -> size		690780	0		>			
ANR	690786	PtrMemberAccess	a -> size		690780	0					
ANR	690787	Identifier	a		690780	0					
ANR	690788	Identifier	size		690780	1					
ANR	690789	PtrMemberAccess	b -> size		690780	1					
ANR	690790	Identifier	b		690780	0					
ANR	690791	Identifier	size		690780	1					
ANR	690792	ReturnStatement	return 1 ;	424:8:13031:13039	690780	1	True				
ANR	690793	PrimaryExpression	1		690780	0					
ANR	690794	IfStatement	if ( a -> size < b -> size )		690780	1					
ANR	690795	Condition	a -> size < b -> size	425:8:13049:13065	690780	0	True				
ANR	690796	RelationalExpression	a -> size < b -> size		690780	0		<			
ANR	690797	PtrMemberAccess	a -> size		690780	0					
ANR	690798	Identifier	a		690780	0					
ANR	690799	Identifier	size		690780	1					
ANR	690800	PtrMemberAccess	b -> size		690780	1					
ANR	690801	Identifier	b		690780	0					
ANR	690802	Identifier	size		690780	1					
ANR	690803	ReturnStatement	return 0 ;	426:8:13076:13084	690780	1	True				
ANR	690804	PrimaryExpression	0		690780	0					
ANR	690805	ReturnStatement	return ( a > b ) ;	427:4:13090:13104	690780	2	True				
ANR	690806	RelationalExpression	a > b		690780	0		>			
ANR	690807	Identifier	a		690780	0					
ANR	690808	Identifier	b		690780	1					
ANR	690809	ReturnType	static inline int		690780	1					
ANR	690810	Identifier	CMP_SIZE		690780	2					
ANR	690811	ParameterList	"const chunk_free_node_t * a , const chunk_free_node_t * b"		690780	3					
ANR	690812	Parameter	const chunk_free_node_t * a	421:27:12936:12962	690780	0	True				
ANR	690813	ParameterType	const chunk_free_node_t *		690780	0					
ANR	690814	Identifier	a		690780	1					
ANR	690815	Parameter	const chunk_free_node_t * b	421:56:12965:12991	690780	1	True				
ANR	690816	ParameterType	const chunk_free_node_t *		690780	0					
ANR	690817	Identifier	b		690780	1					
ANR	690818	CFGEntryNode	ENTRY		690780		True				
ANR	690819	CFGExitNode	EXIT		690780		True				
ANR	690820	Symbol	a -> size		690780						
ANR	690821	Symbol	a		690780						
ANR	690822	Symbol	b		690780						
ANR	690823	Symbol	b -> size		690780						
ANR	690824	Symbol	* a		690780						
ANR	690825	Symbol	* b		690780						
ANR	690826	Function	insert_free_size	430:0:13109:16724							
ANR	690827	FunctionDef	"insert_free_size (gs_memory_chunk_t * cmem , chunk_free_node_t * node)"		690826	0					
ANR	690828	CompoundStatement		431:0:13188:16724	690826	0					
ANR	690829	IdentifierDeclStatement	chunk_free_node_t * * ap ;	432:4:13194:13216	690826	0	True				
ANR	690830	IdentifierDecl	* * ap		690826	0					
ANR	690831	IdentifierDeclType	chunk_free_node_t * *		690826	0					
ANR	690832	Identifier	ap		690826	1					
ANR	690833	IdentifierDeclStatement	"chunk_free_node_t * a , * b , * c ;"	433:4:13222:13250	690826	1	True				
ANR	690834	IdentifierDecl	* a		690826	0					
ANR	690835	IdentifierDeclType	chunk_free_node_t *		690826	0					
ANR	690836	Identifier	a		690826	1					
ANR	690837	IdentifierDecl	* b		690826	1					
ANR	690838	IdentifierDeclType	chunk_free_node_t *		690826	0					
ANR	690839	Identifier	b		690826	1					
ANR	690840	IdentifierDecl	* c		690826	2					
ANR	690841	IdentifierDeclType	chunk_free_node_t *		690826	0					
ANR	690842	Identifier	c		690826	1					
ANR	690843	ExpressionStatement	node -> left_size = NULL	435:4:13257:13280	690826	2	True				
ANR	690844	AssignmentExpression	node -> left_size = NULL		690826	0		=			
ANR	690845	PtrMemberAccess	node -> left_size		690826	0					
ANR	690846	Identifier	node		690826	0					
ANR	690847	Identifier	left_size		690826	1					
ANR	690848	Identifier	NULL		690826	1					
ANR	690849	ExpressionStatement	node -> right_size = NULL	436:4:13286:13309	690826	3	True				
ANR	690850	AssignmentExpression	node -> right_size = NULL		690826	0		=			
ANR	690851	PtrMemberAccess	node -> right_size		690826	0					
ANR	690852	Identifier	node		690826	0					
ANR	690853	Identifier	right_size		690826	1					
ANR	690854	Identifier	NULL		690826	1					
ANR	690855	ExpressionStatement	ap = & cmem -> free_size	439:4:13343:13364	690826	4	True				
ANR	690856	AssignmentExpression	ap = & cmem -> free_size		690826	0		=			
ANR	690857	Identifier	ap		690826	0					
ANR	690858	UnaryOperationExpression	& cmem -> free_size		690826	1					
ANR	690859	UnaryOperator	&		690826	0					
ANR	690860	PtrMemberAccess	cmem -> free_size		690826	1					
ANR	690861	Identifier	cmem		690826	0					
ANR	690862	Identifier	free_size		690826	1					
ANR	690863	WhileStatement	while ( ( a = * ap ) != NULL )		690826	5					
ANR	690864	Condition	( a = * ap ) != NULL	440:11:13377:13393	690826	0	True				
ANR	690865	EqualityExpression	( a = * ap ) != NULL		690826	0		!=			
ANR	690866	AssignmentExpression	a = * ap		690826	0		=			
ANR	690867	Identifier	a		690826	0					
ANR	690868	UnaryOperationExpression	* ap		690826	1					
ANR	690869	UnaryOperator	*		690826	0					
ANR	690870	Identifier	ap		690826	1					
ANR	690871	Identifier	NULL		690826	1					
ANR	690872	CompoundStatement		10:30:207:207	690826	1					
ANR	690873	IfStatement	"if ( CMP_SIZE ( a , node ) )"		690826	0					
ANR	690874	Condition	"CMP_SIZE ( a , node )"	441:12:13410:13426	690826	0	True				
ANR	690875	CallExpression	"CMP_SIZE ( a , node )"		690826	0					
ANR	690876	Callee	CMP_SIZE		690826	0					
ANR	690877	Identifier	CMP_SIZE		690826	0					
ANR	690878	ArgumentList	a		690826	1					
ANR	690879	Argument	a		690826	0					
ANR	690880	Identifier	a		690826	0					
ANR	690881	Argument	node		690826	1					
ANR	690882	Identifier	node		690826	0					
ANR	690883	CompoundStatement		11:31:240:240	690826	1					
ANR	690884	ExpressionStatement	b = a -> left_size	442:12:13443:13459	690826	0	True				
ANR	690885	AssignmentExpression	b = a -> left_size		690826	0		=			
ANR	690886	Identifier	b		690826	0					
ANR	690887	PtrMemberAccess	a -> left_size		690826	1					
ANR	690888	Identifier	a		690826	0					
ANR	690889	Identifier	left_size		690826	1					
ANR	690890	IfStatement	if ( b == NULL )		690826	1					
ANR	690891	Condition	b == NULL	443:16:13477:13485	690826	0	True				
ANR	690892	EqualityExpression	b == NULL		690826	0		==			
ANR	690893	Identifier	b		690826	0					
ANR	690894	Identifier	NULL		690826	1					
ANR	690895	CompoundStatement		13:27:299:299	690826	1					
ANR	690896	ExpressionStatement	ap = & a -> left_size	444:16:13506:13524	690826	0	True				
ANR	690897	AssignmentExpression	ap = & a -> left_size		690826	0		=			
ANR	690898	Identifier	ap		690826	0					
ANR	690899	UnaryOperationExpression	& a -> left_size		690826	1					
ANR	690900	UnaryOperator	&		690826	0					
ANR	690901	PtrMemberAccess	a -> left_size		690826	1					
ANR	690902	Identifier	a		690826	0					
ANR	690903	Identifier	left_size		690826	1					
ANR	690904	BreakStatement	break ;	445:16:13542:13547	690826	1	True				
ANR	690905	IfStatement	"if ( CMP_SIZE ( b , node ) )"		690826	2					
ANR	690906	Condition	"CMP_SIZE ( b , node )"	447:16:13600:13616	690826	0	True				
ANR	690907	CallExpression	"CMP_SIZE ( b , node )"		690826	0					
ANR	690908	Callee	CMP_SIZE		690826	0					
ANR	690909	Identifier	CMP_SIZE		690826	0					
ANR	690910	ArgumentList	b		690826	1					
ANR	690911	Argument	b		690826	0					
ANR	690912	Identifier	b		690826	0					
ANR	690913	Argument	node		690826	1					
ANR	690914	Identifier	node		690826	0					
ANR	690915	CompoundStatement		17:35:430:430	690826	1					
ANR	690916	ExpressionStatement	c = b -> left_size	448:16:13637:13653	690826	0	True				
ANR	690917	AssignmentExpression	c = b -> left_size		690826	0		=			
ANR	690918	Identifier	c		690826	0					
ANR	690919	PtrMemberAccess	b -> left_size		690826	1					
ANR	690920	Identifier	b		690826	0					
ANR	690921	Identifier	left_size		690826	1					
ANR	690922	IfStatement	if ( c == NULL )		690826	1					
ANR	690923	Condition	c == NULL	449:20:13675:13683	690826	0	True				
ANR	690924	EqualityExpression	c == NULL		690826	0		==			
ANR	690925	Identifier	c		690826	0					
ANR	690926	Identifier	NULL		690826	1					
ANR	690927	CompoundStatement		19:31:497:497	690826	1					
ANR	690928	ExpressionStatement	ap = & b -> left_size	450:20:13708:13726	690826	0	True				
ANR	690929	AssignmentExpression	ap = & b -> left_size		690826	0		=			
ANR	690930	Identifier	ap		690826	0					
ANR	690931	UnaryOperationExpression	& b -> left_size		690826	1					
ANR	690932	UnaryOperator	&		690826	0					
ANR	690933	PtrMemberAccess	b -> left_size		690826	1					
ANR	690934	Identifier	b		690826	0					
ANR	690935	Identifier	left_size		690826	1					
ANR	690936	BreakStatement	break ;	451:20:13748:13753	690826	1	True				
ANR	690937	ExpressionStatement	* ap = c	458:16:14019:14026	690826	2	True				
ANR	690938	AssignmentExpression	* ap = c		690826	0		=			
ANR	690939	UnaryOperationExpression	* ap		690826	0					
ANR	690940	UnaryOperator	*		690826	0					
ANR	690941	Identifier	ap		690826	1					
ANR	690942	Identifier	c		690826	1					
ANR	690943	ExpressionStatement	a -> left_size = b -> right_size	459:16:14044:14073	690826	3	True				
ANR	690944	AssignmentExpression	a -> left_size = b -> right_size		690826	0		=			
ANR	690945	PtrMemberAccess	a -> left_size		690826	0					
ANR	690946	Identifier	a		690826	0					
ANR	690947	Identifier	left_size		690826	1					
ANR	690948	PtrMemberAccess	b -> right_size		690826	1					
ANR	690949	Identifier	b		690826	0					
ANR	690950	Identifier	right_size		690826	1					
ANR	690951	ExpressionStatement	b -> left_size = c -> right_size	460:16:14091:14120	690826	4	True				
ANR	690952	AssignmentExpression	b -> left_size = c -> right_size		690826	0		=			
ANR	690953	PtrMemberAccess	b -> left_size		690826	0					
ANR	690954	Identifier	b		690826	0					
ANR	690955	Identifier	left_size		690826	1					
ANR	690956	PtrMemberAccess	c -> right_size		690826	1					
ANR	690957	Identifier	c		690826	0					
ANR	690958	Identifier	right_size		690826	1					
ANR	690959	ExpressionStatement	b -> right_size = a	461:16:14138:14155	690826	5	True				
ANR	690960	AssignmentExpression	b -> right_size = a		690826	0		=			
ANR	690961	PtrMemberAccess	b -> right_size		690826	0					
ANR	690962	Identifier	b		690826	0					
ANR	690963	Identifier	right_size		690826	1					
ANR	690964	Identifier	a		690826	1					
ANR	690965	ExpressionStatement	c -> right_size = b	462:16:14173:14190	690826	6	True				
ANR	690966	AssignmentExpression	c -> right_size = b		690826	0		=			
ANR	690967	PtrMemberAccess	c -> right_size		690826	0					
ANR	690968	Identifier	c		690826	0					
ANR	690969	Identifier	right_size		690826	1					
ANR	690970	Identifier	b		690826	1					
ANR	690971	IfStatement	"if ( CMP_SIZE ( c , node ) )"		690826	7					
ANR	690972	Condition	"CMP_SIZE ( c , node )"	463:20:14212:14228	690826	0	True				
ANR	690973	CallExpression	"CMP_SIZE ( c , node )"		690826	0					
ANR	690974	Callee	CMP_SIZE		690826	0					
ANR	690975	Identifier	CMP_SIZE		690826	0					
ANR	690976	ArgumentList	c		690826	1					
ANR	690977	Argument	c		690826	0					
ANR	690978	Identifier	c		690826	0					
ANR	690979	Argument	node		690826	1					
ANR	690980	Identifier	node		690826	0					
ANR	690981	ExpressionStatement	ap = & c -> left_size	464:20:14251:14269	690826	1	True				
ANR	690982	AssignmentExpression	ap = & c -> left_size		690826	0		=			
ANR	690983	Identifier	ap		690826	0					
ANR	690984	UnaryOperationExpression	& c -> left_size		690826	1					
ANR	690985	UnaryOperator	&		690826	0					
ANR	690986	PtrMemberAccess	c -> left_size		690826	1					
ANR	690987	Identifier	c		690826	0					
ANR	690988	Identifier	left_size		690826	1					
ANR	690989	ElseStatement	else		690826	0					
ANR	690990	ExpressionStatement	ap = & b -> left_size	466:20:14312:14330	690826	0	True				
ANR	690991	AssignmentExpression	ap = & b -> left_size		690826	0		=			
ANR	690992	Identifier	ap		690826	0					
ANR	690993	UnaryOperationExpression	& b -> left_size		690826	1					
ANR	690994	UnaryOperator	&		690826	0					
ANR	690995	PtrMemberAccess	b -> left_size		690826	1					
ANR	690996	Identifier	b		690826	0					
ANR	690997	Identifier	left_size		690826	1					
ANR	690998	ElseStatement	else		690826	0					
ANR	690999	CompoundStatement		37:19:1162:1162	690826	0					
ANR	691000	ExpressionStatement	c = b -> right_size	468:16:14369:14386	690826	0	True				
ANR	691001	AssignmentExpression	c = b -> right_size		690826	0		=			
ANR	691002	Identifier	c		690826	0					
ANR	691003	PtrMemberAccess	b -> right_size		690826	1					
ANR	691004	Identifier	b		690826	0					
ANR	691005	Identifier	right_size		690826	1					
ANR	691006	IfStatement	if ( c == NULL )		690826	1					
ANR	691007	Condition	c == NULL	469:20:14408:14416	690826	0	True				
ANR	691008	EqualityExpression	c == NULL		690826	0		==			
ANR	691009	Identifier	c		690826	0					
ANR	691010	Identifier	NULL		690826	1					
ANR	691011	CompoundStatement		39:31:1230:1230	690826	1					
ANR	691012	ExpressionStatement	ap = & b -> right_size	470:20:14441:14460	690826	0	True				
ANR	691013	AssignmentExpression	ap = & b -> right_size		690826	0		=			
ANR	691014	Identifier	ap		690826	0					
ANR	691015	UnaryOperationExpression	& b -> right_size		690826	1					
ANR	691016	UnaryOperator	&		690826	0					
ANR	691017	PtrMemberAccess	b -> right_size		690826	1					
ANR	691018	Identifier	b		690826	0					
ANR	691019	Identifier	right_size		690826	1					
ANR	691020	BreakStatement	break ;	471:20:14482:14487	690826	1	True				
ANR	691021	ExpressionStatement	* ap = c	478:16:14733:14740	690826	2	True				
ANR	691022	AssignmentExpression	* ap = c		690826	0		=			
ANR	691023	UnaryOperationExpression	* ap		690826	0					
ANR	691024	UnaryOperator	*		690826	0					
ANR	691025	Identifier	ap		690826	1					
ANR	691026	Identifier	c		690826	1					
ANR	691027	ExpressionStatement	a -> left_size = c -> right_size	479:16:14758:14787	690826	3	True				
ANR	691028	AssignmentExpression	a -> left_size = c -> right_size		690826	0		=			
ANR	691029	PtrMemberAccess	a -> left_size		690826	0					
ANR	691030	Identifier	a		690826	0					
ANR	691031	Identifier	left_size		690826	1					
ANR	691032	PtrMemberAccess	c -> right_size		690826	1					
ANR	691033	Identifier	c		690826	0					
ANR	691034	Identifier	right_size		690826	1					
ANR	691035	ExpressionStatement	b -> right_size = c -> left_size	480:16:14805:14833	690826	4	True				
ANR	691036	AssignmentExpression	b -> right_size = c -> left_size		690826	0		=			
ANR	691037	PtrMemberAccess	b -> right_size		690826	0					
ANR	691038	Identifier	b		690826	0					
ANR	691039	Identifier	right_size		690826	1					
ANR	691040	PtrMemberAccess	c -> left_size		690826	1					
ANR	691041	Identifier	c		690826	0					
ANR	691042	Identifier	left_size		690826	1					
ANR	691043	ExpressionStatement	c -> left_size = b	481:16:14851:14868	690826	5	True				
ANR	691044	AssignmentExpression	c -> left_size = b		690826	0		=			
ANR	691045	PtrMemberAccess	c -> left_size		690826	0					
ANR	691046	Identifier	c		690826	0					
ANR	691047	Identifier	left_size		690826	1					
ANR	691048	Identifier	b		690826	1					
ANR	691049	ExpressionStatement	c -> right_size = a	482:16:14886:14903	690826	6	True				
ANR	691050	AssignmentExpression	c -> right_size = a		690826	0		=			
ANR	691051	PtrMemberAccess	c -> right_size		690826	0					
ANR	691052	Identifier	c		690826	0					
ANR	691053	Identifier	right_size		690826	1					
ANR	691054	Identifier	a		690826	1					
ANR	691055	IfStatement	"if ( CMP_SIZE ( c , node ) )"		690826	7					
ANR	691056	Condition	"CMP_SIZE ( c , node )"	483:20:14925:14941	690826	0	True				
ANR	691057	CallExpression	"CMP_SIZE ( c , node )"		690826	0					
ANR	691058	Callee	CMP_SIZE		690826	0					
ANR	691059	Identifier	CMP_SIZE		690826	0					
ANR	691060	ArgumentList	c		690826	1					
ANR	691061	Argument	c		690826	0					
ANR	691062	Identifier	c		690826	0					
ANR	691063	Argument	node		690826	1					
ANR	691064	Identifier	node		690826	0					
ANR	691065	ExpressionStatement	ap = & b -> right_size	484:20:14964:14983	690826	1	True				
ANR	691066	AssignmentExpression	ap = & b -> right_size		690826	0		=			
ANR	691067	Identifier	ap		690826	0					
ANR	691068	UnaryOperationExpression	& b -> right_size		690826	1					
ANR	691069	UnaryOperator	&		690826	0					
ANR	691070	PtrMemberAccess	b -> right_size		690826	1					
ANR	691071	Identifier	b		690826	0					
ANR	691072	Identifier	right_size		690826	1					
ANR	691073	ElseStatement	else		690826	0					
ANR	691074	ExpressionStatement	ap = & a -> left_size	486:20:15026:15044	690826	0	True				
ANR	691075	AssignmentExpression	ap = & a -> left_size		690826	0		=			
ANR	691076	Identifier	ap		690826	0					
ANR	691077	UnaryOperationExpression	& a -> left_size		690826	1					
ANR	691078	UnaryOperator	&		690826	0					
ANR	691079	PtrMemberAccess	a -> left_size		690826	1					
ANR	691080	Identifier	a		690826	0					
ANR	691081	Identifier	left_size		690826	1					
ANR	691082	ElseStatement	else		690826	0					
ANR	691083	CompoundStatement		58:15:1886:1886	690826	0					
ANR	691084	ExpressionStatement	b = a -> right_size	489:12:15089:15106	690826	0	True				
ANR	691085	AssignmentExpression	b = a -> right_size		690826	0		=			
ANR	691086	Identifier	b		690826	0					
ANR	691087	PtrMemberAccess	a -> right_size		690826	1					
ANR	691088	Identifier	a		690826	0					
ANR	691089	Identifier	right_size		690826	1					
ANR	691090	IfStatement	if ( b == NULL )		690826	1					
ANR	691091	Condition	b == NULL	490:16:15124:15132	690826	0	True				
ANR	691092	EqualityExpression	b == NULL		690826	0		==			
ANR	691093	Identifier	b		690826	0					
ANR	691094	Identifier	NULL		690826	1					
ANR	691095	CompoundStatement		61:12:1958:1958	690826	1					
ANR	691096	ExpressionStatement	ap = & a -> right_size	492:16:15165:15184	690826	0	True				
ANR	691097	AssignmentExpression	ap = & a -> right_size		690826	0		=			
ANR	691098	Identifier	ap		690826	0					
ANR	691099	UnaryOperationExpression	& a -> right_size		690826	1					
ANR	691100	UnaryOperator	&		690826	0					
ANR	691101	PtrMemberAccess	a -> right_size		690826	1					
ANR	691102	Identifier	a		690826	0					
ANR	691103	Identifier	right_size		690826	1					
ANR	691104	BreakStatement	break ;	493:16:15202:15207	690826	1	True				
ANR	691105	IfStatement	"if ( CMP_SIZE ( b , node ) )"		690826	2					
ANR	691106	Condition	"CMP_SIZE ( b , node )"	495:16:15239:15255	690826	0	True				
ANR	691107	CallExpression	"CMP_SIZE ( b , node )"		690826	0					
ANR	691108	Callee	CMP_SIZE		690826	0					
ANR	691109	Identifier	CMP_SIZE		690826	0					
ANR	691110	ArgumentList	b		690826	1					
ANR	691111	Argument	b		690826	0					
ANR	691112	Identifier	b		690826	0					
ANR	691113	Argument	node		690826	1					
ANR	691114	Identifier	node		690826	0					
ANR	691115	CompoundStatement		65:35:2069:2069	690826	1					
ANR	691116	ExpressionStatement	c = b -> left_size	496:16:15276:15292	690826	0	True				
ANR	691117	AssignmentExpression	c = b -> left_size		690826	0		=			
ANR	691118	Identifier	c		690826	0					
ANR	691119	PtrMemberAccess	b -> left_size		690826	1					
ANR	691120	Identifier	b		690826	0					
ANR	691121	Identifier	left_size		690826	1					
ANR	691122	IfStatement	if ( c == NULL )		690826	1					
ANR	691123	Condition	c == NULL	497:20:15314:15322	690826	0	True				
ANR	691124	EqualityExpression	c == NULL		690826	0		==			
ANR	691125	Identifier	c		690826	0					
ANR	691126	Identifier	NULL		690826	1					
ANR	691127	CompoundStatement		67:31:2136:2136	690826	1					
ANR	691128	ExpressionStatement	ap = & b -> left_size	498:20:15347:15365	690826	0	True				
ANR	691129	AssignmentExpression	ap = & b -> left_size		690826	0		=			
ANR	691130	Identifier	ap		690826	0					
ANR	691131	UnaryOperationExpression	& b -> left_size		690826	1					
ANR	691132	UnaryOperator	&		690826	0					
ANR	691133	PtrMemberAccess	b -> left_size		690826	1					
ANR	691134	Identifier	b		690826	0					
ANR	691135	Identifier	left_size		690826	1					
ANR	691136	BreakStatement	break ;	499:20:15387:15392	690826	1	True				
ANR	691137	ExpressionStatement	* ap = c	506:16:15639:15646	690826	2	True				
ANR	691138	AssignmentExpression	* ap = c		690826	0		=			
ANR	691139	UnaryOperationExpression	* ap		690826	0					
ANR	691140	UnaryOperator	*		690826	0					
ANR	691141	Identifier	ap		690826	1					
ANR	691142	Identifier	c		690826	1					
ANR	691143	ExpressionStatement	a -> right_size = c -> left_size	507:16:15664:15692	690826	3	True				
ANR	691144	AssignmentExpression	a -> right_size = c -> left_size		690826	0		=			
ANR	691145	PtrMemberAccess	a -> right_size		690826	0					
ANR	691146	Identifier	a		690826	0					
ANR	691147	Identifier	right_size		690826	1					
ANR	691148	PtrMemberAccess	c -> left_size		690826	1					
ANR	691149	Identifier	c		690826	0					
ANR	691150	Identifier	left_size		690826	1					
ANR	691151	ExpressionStatement	b -> left_size = c -> right_size	508:16:15710:15739	690826	4	True				
ANR	691152	AssignmentExpression	b -> left_size = c -> right_size		690826	0		=			
ANR	691153	PtrMemberAccess	b -> left_size		690826	0					
ANR	691154	Identifier	b		690826	0					
ANR	691155	Identifier	left_size		690826	1					
ANR	691156	PtrMemberAccess	c -> right_size		690826	1					
ANR	691157	Identifier	c		690826	0					
ANR	691158	Identifier	right_size		690826	1					
ANR	691159	ExpressionStatement	c -> left_size = a	509:16:15757:15774	690826	5	True				
ANR	691160	AssignmentExpression	c -> left_size = a		690826	0		=			
ANR	691161	PtrMemberAccess	c -> left_size		690826	0					
ANR	691162	Identifier	c		690826	0					
ANR	691163	Identifier	left_size		690826	1					
ANR	691164	Identifier	a		690826	1					
ANR	691165	ExpressionStatement	c -> right_size = b	510:16:15792:15809	690826	6	True				
ANR	691166	AssignmentExpression	c -> right_size = b		690826	0		=			
ANR	691167	PtrMemberAccess	c -> right_size		690826	0					
ANR	691168	Identifier	c		690826	0					
ANR	691169	Identifier	right_size		690826	1					
ANR	691170	Identifier	b		690826	1					
ANR	691171	IfStatement	"if ( CMP_SIZE ( c , node ) )"		690826	7					
ANR	691172	Condition	"CMP_SIZE ( c , node )"	511:20:15831:15847	690826	0	True				
ANR	691173	CallExpression	"CMP_SIZE ( c , node )"		690826	0					
ANR	691174	Callee	CMP_SIZE		690826	0					
ANR	691175	Identifier	CMP_SIZE		690826	0					
ANR	691176	ArgumentList	c		690826	1					
ANR	691177	Argument	c		690826	0					
ANR	691178	Identifier	c		690826	0					
ANR	691179	Argument	node		690826	1					
ANR	691180	Identifier	node		690826	0					
ANR	691181	ExpressionStatement	ap = & a -> right_size	512:20:15870:15889	690826	1	True				
ANR	691182	AssignmentExpression	ap = & a -> right_size		690826	0		=			
ANR	691183	Identifier	ap		690826	0					
ANR	691184	UnaryOperationExpression	& a -> right_size		690826	1					
ANR	691185	UnaryOperator	&		690826	0					
ANR	691186	PtrMemberAccess	a -> right_size		690826	1					
ANR	691187	Identifier	a		690826	0					
ANR	691188	Identifier	right_size		690826	1					
ANR	691189	ElseStatement	else		690826	0					
ANR	691190	ExpressionStatement	ap = & b -> left_size	514:20:15932:15950	690826	0	True				
ANR	691191	AssignmentExpression	ap = & b -> left_size		690826	0		=			
ANR	691192	Identifier	ap		690826	0					
ANR	691193	UnaryOperationExpression	& b -> left_size		690826	1					
ANR	691194	UnaryOperator	&		690826	0					
ANR	691195	PtrMemberAccess	b -> left_size		690826	1					
ANR	691196	Identifier	b		690826	0					
ANR	691197	Identifier	left_size		690826	1					
ANR	691198	ElseStatement	else		690826	0					
ANR	691199	CompoundStatement		85:19:2782:2782	690826	0					
ANR	691200	ExpressionStatement	c = b -> right_size	516:16:15989:16006	690826	0	True				
ANR	691201	AssignmentExpression	c = b -> right_size		690826	0		=			
ANR	691202	Identifier	c		690826	0					
ANR	691203	PtrMemberAccess	b -> right_size		690826	1					
ANR	691204	Identifier	b		690826	0					
ANR	691205	Identifier	right_size		690826	1					
ANR	691206	IfStatement	if ( c == NULL )		690826	1					
ANR	691207	Condition	c == NULL	517:20:16028:16036	690826	0	True				
ANR	691208	EqualityExpression	c == NULL		690826	0		==			
ANR	691209	Identifier	c		690826	0					
ANR	691210	Identifier	NULL		690826	1					
ANR	691211	CompoundStatement		87:31:2850:2850	690826	1					
ANR	691212	ExpressionStatement	ap = & b -> right_size	518:20:16061:16080	690826	0	True				
ANR	691213	AssignmentExpression	ap = & b -> right_size		690826	0		=			
ANR	691214	Identifier	ap		690826	0					
ANR	691215	UnaryOperationExpression	& b -> right_size		690826	1					
ANR	691216	UnaryOperator	&		690826	0					
ANR	691217	PtrMemberAccess	b -> right_size		690826	1					
ANR	691218	Identifier	b		690826	0					
ANR	691219	Identifier	right_size		690826	1					
ANR	691220	BreakStatement	break ;	519:20:16102:16107	690826	1	True				
ANR	691221	ExpressionStatement	* ap = c	526:16:16365:16372	690826	2	True				
ANR	691222	AssignmentExpression	* ap = c		690826	0		=			
ANR	691223	UnaryOperationExpression	* ap		690826	0					
ANR	691224	UnaryOperator	*		690826	0					
ANR	691225	Identifier	ap		690826	1					
ANR	691226	Identifier	c		690826	1					
ANR	691227	ExpressionStatement	a -> right_size = b -> left_size	527:16:16390:16418	690826	3	True				
ANR	691228	AssignmentExpression	a -> right_size = b -> left_size		690826	0		=			
ANR	691229	PtrMemberAccess	a -> right_size		690826	0					
ANR	691230	Identifier	a		690826	0					
ANR	691231	Identifier	right_size		690826	1					
ANR	691232	PtrMemberAccess	b -> left_size		690826	1					
ANR	691233	Identifier	b		690826	0					
ANR	691234	Identifier	left_size		690826	1					
ANR	691235	ExpressionStatement	b -> right_size = c -> left_size	528:16:16436:16464	690826	4	True				
ANR	691236	AssignmentExpression	b -> right_size = c -> left_size		690826	0		=			
ANR	691237	PtrMemberAccess	b -> right_size		690826	0					
ANR	691238	Identifier	b		690826	0					
ANR	691239	Identifier	right_size		690826	1					
ANR	691240	PtrMemberAccess	c -> left_size		690826	1					
ANR	691241	Identifier	c		690826	0					
ANR	691242	Identifier	left_size		690826	1					
ANR	691243	ExpressionStatement	b -> left_size = a	529:16:16482:16499	690826	5	True				
ANR	691244	AssignmentExpression	b -> left_size = a		690826	0		=			
ANR	691245	PtrMemberAccess	b -> left_size		690826	0					
ANR	691246	Identifier	b		690826	0					
ANR	691247	Identifier	left_size		690826	1					
ANR	691248	Identifier	a		690826	1					
ANR	691249	ExpressionStatement	c -> left_size = b	530:16:16517:16534	690826	6	True				
ANR	691250	AssignmentExpression	c -> left_size = b		690826	0		=			
ANR	691251	PtrMemberAccess	c -> left_size		690826	0					
ANR	691252	Identifier	c		690826	0					
ANR	691253	Identifier	left_size		690826	1					
ANR	691254	Identifier	b		690826	1					
ANR	691255	IfStatement	"if ( CMP_SIZE ( c , node ) )"		690826	7					
ANR	691256	Condition	"CMP_SIZE ( c , node )"	531:20:16556:16572	690826	0	True				
ANR	691257	CallExpression	"CMP_SIZE ( c , node )"		690826	0					
ANR	691258	Callee	CMP_SIZE		690826	0					
ANR	691259	Identifier	CMP_SIZE		690826	0					
ANR	691260	ArgumentList	c		690826	1					
ANR	691261	Argument	c		690826	0					
ANR	691262	Identifier	c		690826	0					
ANR	691263	Argument	node		690826	1					
ANR	691264	Identifier	node		690826	0					
ANR	691265	ExpressionStatement	ap = & b -> right_size	532:20:16595:16614	690826	1	True				
ANR	691266	AssignmentExpression	ap = & b -> right_size		690826	0		=			
ANR	691267	Identifier	ap		690826	0					
ANR	691268	UnaryOperationExpression	& b -> right_size		690826	1					
ANR	691269	UnaryOperator	&		690826	0					
ANR	691270	PtrMemberAccess	b -> right_size		690826	1					
ANR	691271	Identifier	b		690826	0					
ANR	691272	Identifier	right_size		690826	1					
ANR	691273	ElseStatement	else		690826	0					
ANR	691274	ExpressionStatement	ap = & c -> right_size	534:20:16657:16676	690826	0	True				
ANR	691275	AssignmentExpression	ap = & c -> right_size		690826	0		=			
ANR	691276	Identifier	ap		690826	0					
ANR	691277	UnaryOperationExpression	& c -> right_size		690826	1					
ANR	691278	UnaryOperator	&		690826	0					
ANR	691279	PtrMemberAccess	c -> right_size		690826	1					
ANR	691280	Identifier	c		690826	0					
ANR	691281	Identifier	right_size		690826	1					
ANR	691282	ExpressionStatement	* ap = node	538:4:16712:16722	690826	6	True				
ANR	691283	AssignmentExpression	* ap = node		690826	0		=			
ANR	691284	UnaryOperationExpression	* ap		690826	0					
ANR	691285	UnaryOperator	*		690826	0					
ANR	691286	Identifier	ap		690826	1					
ANR	691287	Identifier	node		690826	1					
ANR	691288	ReturnType	static void		690826	1					
ANR	691289	Identifier	insert_free_size		690826	2					
ANR	691290	ParameterList	"gs_memory_chunk_t * cmem , chunk_free_node_t * node"		690826	3					
ANR	691291	Parameter	gs_memory_chunk_t * cmem	430:29:13138:13160	690826	0	True				
ANR	691292	ParameterType	gs_memory_chunk_t *		690826	0					
ANR	691293	Identifier	cmem		690826	1					
ANR	691294	Parameter	chunk_free_node_t * node	430:54:13163:13185	690826	1	True				
ANR	691295	ParameterType	chunk_free_node_t *		690826	0					
ANR	691296	Identifier	node		690826	1					
ANR	691297	CFGEntryNode	ENTRY		690826		True				
ANR	691298	CFGExitNode	EXIT		690826		True				
ANR	691299	Symbol	& b -> right_size		690826						
ANR	691300	Symbol	c -> right_size		690826						
ANR	691301	Symbol	node -> left_size		690826						
ANR	691302	Symbol	* node		690826						
ANR	691303	Symbol	a -> right_size		690826						
ANR	691304	Symbol	a -> left_size		690826						
ANR	691305	Symbol	a		690826						
ANR	691306	Symbol	b		690826						
ANR	691307	Symbol	c -> left_size		690826						
ANR	691308	Symbol	c		690826						
ANR	691309	Symbol	NULL		690826						
ANR	691310	Symbol	& a -> right_size		690826						
ANR	691311	Symbol	& c -> right_size		690826						
ANR	691312	Symbol	CMP_SIZE		690826						
ANR	691313	Symbol	* a		690826						
ANR	691314	Symbol	* b		690826						
ANR	691315	Symbol	* c		690826						
ANR	691316	Symbol	ap		690826						
ANR	691317	Symbol	b -> left_size		690826						
ANR	691318	Symbol	node		690826						
ANR	691319	Symbol	& cmem -> free_size		690826						
ANR	691320	Symbol	b -> right_size		690826						
ANR	691321	Symbol	* ap		690826						
ANR	691322	Symbol	& c -> left_size		690826						
ANR	691323	Symbol	& b -> left_size		690826						
ANR	691324	Symbol	cmem		690826						
ANR	691325	Symbol	node -> right_size		690826						
ANR	691326	Symbol	& a -> left_size		690826						
ANR	691327	Function	insert_free_loc	541:0:16727:20232							
ANR	691328	FunctionDef	"insert_free_loc (gs_memory_chunk_t * cmem , chunk_free_node_t * node)"		691327	0					
ANR	691329	CompoundStatement		542:0:16805:20232	691327	0					
ANR	691330	IdentifierDeclStatement	chunk_free_node_t * * ap ;	543:4:16811:16833	691327	0	True				
ANR	691331	IdentifierDecl	* * ap		691327	0					
ANR	691332	IdentifierDeclType	chunk_free_node_t * *		691327	0					
ANR	691333	Identifier	ap		691327	1					
ANR	691334	IdentifierDeclStatement	"chunk_free_node_t * a , * b , * c ;"	544:4:16839:16867	691327	1	True				
ANR	691335	IdentifierDecl	* a		691327	0					
ANR	691336	IdentifierDeclType	chunk_free_node_t *		691327	0					
ANR	691337	Identifier	a		691327	1					
ANR	691338	IdentifierDecl	* b		691327	1					
ANR	691339	IdentifierDeclType	chunk_free_node_t *		691327	0					
ANR	691340	Identifier	b		691327	1					
ANR	691341	IdentifierDecl	* c		691327	2					
ANR	691342	IdentifierDeclType	chunk_free_node_t *		691327	0					
ANR	691343	Identifier	c		691327	1					
ANR	691344	ExpressionStatement	node -> left_loc = NULL	546:4:16874:16897	691327	2	True				
ANR	691345	AssignmentExpression	node -> left_loc = NULL		691327	0		=			
ANR	691346	PtrMemberAccess	node -> left_loc		691327	0					
ANR	691347	Identifier	node		691327	0					
ANR	691348	Identifier	left_loc		691327	1					
ANR	691349	Identifier	NULL		691327	1					
ANR	691350	ExpressionStatement	node -> right_loc = NULL	547:4:16903:16926	691327	3	True				
ANR	691351	AssignmentExpression	node -> right_loc = NULL		691327	0		=			
ANR	691352	PtrMemberAccess	node -> right_loc		691327	0					
ANR	691353	Identifier	node		691327	0					
ANR	691354	Identifier	right_loc		691327	1					
ANR	691355	Identifier	NULL		691327	1					
ANR	691356	ExpressionStatement	ap = & cmem -> free_loc	550:4:16959:16979	691327	4	True				
ANR	691357	AssignmentExpression	ap = & cmem -> free_loc		691327	0		=			
ANR	691358	Identifier	ap		691327	0					
ANR	691359	UnaryOperationExpression	& cmem -> free_loc		691327	1					
ANR	691360	UnaryOperator	&		691327	0					
ANR	691361	PtrMemberAccess	cmem -> free_loc		691327	1					
ANR	691362	Identifier	cmem		691327	0					
ANR	691363	Identifier	free_loc		691327	1					
ANR	691364	WhileStatement	while ( ( a = * ap ) != NULL )		691327	5					
ANR	691365	Condition	( a = * ap ) != NULL	551:11:16992:17008	691327	0	True				
ANR	691366	EqualityExpression	( a = * ap ) != NULL		691327	0		!=			
ANR	691367	AssignmentExpression	a = * ap		691327	0		=			
ANR	691368	Identifier	a		691327	0					
ANR	691369	UnaryOperationExpression	* ap		691327	1					
ANR	691370	UnaryOperator	*		691327	0					
ANR	691371	Identifier	ap		691327	1					
ANR	691372	Identifier	NULL		691327	1					
ANR	691373	CompoundStatement		10:30:205:205	691327	1					
ANR	691374	IfStatement	if ( a > node )		691327	0					
ANR	691375	Condition	a > node	552:12:17025:17032	691327	0	True				
ANR	691376	RelationalExpression	a > node		691327	0		>			
ANR	691377	Identifier	a		691327	0					
ANR	691378	Identifier	node		691327	1					
ANR	691379	CompoundStatement		11:22:229:229	691327	1					
ANR	691380	ExpressionStatement	b = a -> left_loc	553:12:17049:17064	691327	0	True				
ANR	691381	AssignmentExpression	b = a -> left_loc		691327	0		=			
ANR	691382	Identifier	b		691327	0					
ANR	691383	PtrMemberAccess	a -> left_loc		691327	1					
ANR	691384	Identifier	a		691327	0					
ANR	691385	Identifier	left_loc		691327	1					
ANR	691386	IfStatement	if ( b == NULL )		691327	1					
ANR	691387	Condition	b == NULL	554:16:17082:17090	691327	0	True				
ANR	691388	EqualityExpression	b == NULL		691327	0		==			
ANR	691389	Identifier	b		691327	0					
ANR	691390	Identifier	NULL		691327	1					
ANR	691391	CompoundStatement		13:27:287:287	691327	1					
ANR	691392	ExpressionStatement	ap = & a -> left_loc	555:16:17111:17128	691327	0	True				
ANR	691393	AssignmentExpression	ap = & a -> left_loc		691327	0		=			
ANR	691394	Identifier	ap		691327	0					
ANR	691395	UnaryOperationExpression	& a -> left_loc		691327	1					
ANR	691396	UnaryOperator	&		691327	0					
ANR	691397	PtrMemberAccess	a -> left_loc		691327	1					
ANR	691398	Identifier	a		691327	0					
ANR	691399	Identifier	left_loc		691327	1					
ANR	691400	BreakStatement	break ;	556:16:17146:17151	691327	1	True				
ANR	691401	IfStatement	if ( b > node )		691327	2					
ANR	691402	Condition	b > node	558:16:17204:17211	691327	0	True				
ANR	691403	RelationalExpression	b > node		691327	0		>			
ANR	691404	Identifier	b		691327	0					
ANR	691405	Identifier	node		691327	1					
ANR	691406	CompoundStatement		17:26:408:408	691327	1					
ANR	691407	ExpressionStatement	c = b -> left_loc	559:16:17232:17247	691327	0	True				
ANR	691408	AssignmentExpression	c = b -> left_loc		691327	0		=			
ANR	691409	Identifier	c		691327	0					
ANR	691410	PtrMemberAccess	b -> left_loc		691327	1					
ANR	691411	Identifier	b		691327	0					
ANR	691412	Identifier	left_loc		691327	1					
ANR	691413	IfStatement	if ( c == NULL )		691327	1					
ANR	691414	Condition	c == NULL	560:20:17269:17277	691327	0	True				
ANR	691415	EqualityExpression	c == NULL		691327	0		==			
ANR	691416	Identifier	c		691327	0					
ANR	691417	Identifier	NULL		691327	1					
ANR	691418	CompoundStatement		19:31:474:474	691327	1					
ANR	691419	ExpressionStatement	ap = & b -> left_loc	561:20:17302:17319	691327	0	True				
ANR	691420	AssignmentExpression	ap = & b -> left_loc		691327	0		=			
ANR	691421	Identifier	ap		691327	0					
ANR	691422	UnaryOperationExpression	& b -> left_loc		691327	1					
ANR	691423	UnaryOperator	&		691327	0					
ANR	691424	PtrMemberAccess	b -> left_loc		691327	1					
ANR	691425	Identifier	b		691327	0					
ANR	691426	Identifier	left_loc		691327	1					
ANR	691427	BreakStatement	break ;	562:20:17341:17346	691327	1	True				
ANR	691428	ExpressionStatement	* ap = c	569:16:17612:17619	691327	2	True				
ANR	691429	AssignmentExpression	* ap = c		691327	0		=			
ANR	691430	UnaryOperationExpression	* ap		691327	0					
ANR	691431	UnaryOperator	*		691327	0					
ANR	691432	Identifier	ap		691327	1					
ANR	691433	Identifier	c		691327	1					
ANR	691434	ExpressionStatement	a -> left_loc = b -> right_loc	570:16:17637:17664	691327	3	True				
ANR	691435	AssignmentExpression	a -> left_loc = b -> right_loc		691327	0		=			
ANR	691436	PtrMemberAccess	a -> left_loc		691327	0					
ANR	691437	Identifier	a		691327	0					
ANR	691438	Identifier	left_loc		691327	1					
ANR	691439	PtrMemberAccess	b -> right_loc		691327	1					
ANR	691440	Identifier	b		691327	0					
ANR	691441	Identifier	right_loc		691327	1					
ANR	691442	ExpressionStatement	b -> left_loc = c -> right_loc	571:16:17682:17709	691327	4	True				
ANR	691443	AssignmentExpression	b -> left_loc = c -> right_loc		691327	0		=			
ANR	691444	PtrMemberAccess	b -> left_loc		691327	0					
ANR	691445	Identifier	b		691327	0					
ANR	691446	Identifier	left_loc		691327	1					
ANR	691447	PtrMemberAccess	c -> right_loc		691327	1					
ANR	691448	Identifier	c		691327	0					
ANR	691449	Identifier	right_loc		691327	1					
ANR	691450	ExpressionStatement	b -> right_loc = a	572:16:17727:17743	691327	5	True				
ANR	691451	AssignmentExpression	b -> right_loc = a		691327	0		=			
ANR	691452	PtrMemberAccess	b -> right_loc		691327	0					
ANR	691453	Identifier	b		691327	0					
ANR	691454	Identifier	right_loc		691327	1					
ANR	691455	Identifier	a		691327	1					
ANR	691456	ExpressionStatement	c -> right_loc = b	573:16:17761:17777	691327	6	True				
ANR	691457	AssignmentExpression	c -> right_loc = b		691327	0		=			
ANR	691458	PtrMemberAccess	c -> right_loc		691327	0					
ANR	691459	Identifier	c		691327	0					
ANR	691460	Identifier	right_loc		691327	1					
ANR	691461	Identifier	b		691327	1					
ANR	691462	IfStatement	if ( c > node )		691327	7					
ANR	691463	Condition	c > node	574:20:17799:17806	691327	0	True				
ANR	691464	RelationalExpression	c > node		691327	0		>			
ANR	691465	Identifier	c		691327	0					
ANR	691466	Identifier	node		691327	1					
ANR	691467	ExpressionStatement	ap = & c -> left_loc	575:20:17829:17846	691327	1	True				
ANR	691468	AssignmentExpression	ap = & c -> left_loc		691327	0		=			
ANR	691469	Identifier	ap		691327	0					
ANR	691470	UnaryOperationExpression	& c -> left_loc		691327	1					
ANR	691471	UnaryOperator	&		691327	0					
ANR	691472	PtrMemberAccess	c -> left_loc		691327	1					
ANR	691473	Identifier	c		691327	0					
ANR	691474	Identifier	left_loc		691327	1					
ANR	691475	ElseStatement	else		691327	0					
ANR	691476	ExpressionStatement	ap = & b -> left_loc	577:20:17889:17906	691327	0	True				
ANR	691477	AssignmentExpression	ap = & b -> left_loc		691327	0		=			
ANR	691478	Identifier	ap		691327	0					
ANR	691479	UnaryOperationExpression	& b -> left_loc		691327	1					
ANR	691480	UnaryOperator	&		691327	0					
ANR	691481	PtrMemberAccess	b -> left_loc		691327	1					
ANR	691482	Identifier	b		691327	0					
ANR	691483	Identifier	left_loc		691327	1					
ANR	691484	ElseStatement	else		691327	0					
ANR	691485	CompoundStatement		37:19:1121:1121	691327	0					
ANR	691486	ExpressionStatement	c = b -> right_loc	579:16:17945:17961	691327	0	True				
ANR	691487	AssignmentExpression	c = b -> right_loc		691327	0		=			
ANR	691488	Identifier	c		691327	0					
ANR	691489	PtrMemberAccess	b -> right_loc		691327	1					
ANR	691490	Identifier	b		691327	0					
ANR	691491	Identifier	right_loc		691327	1					
ANR	691492	IfStatement	if ( c == NULL )		691327	1					
ANR	691493	Condition	c == NULL	580:20:17983:17991	691327	0	True				
ANR	691494	EqualityExpression	c == NULL		691327	0		==			
ANR	691495	Identifier	c		691327	0					
ANR	691496	Identifier	NULL		691327	1					
ANR	691497	CompoundStatement		39:31:1188:1188	691327	1					
ANR	691498	ExpressionStatement	ap = & b -> right_loc	581:20:18016:18034	691327	0	True				
ANR	691499	AssignmentExpression	ap = & b -> right_loc		691327	0		=			
ANR	691500	Identifier	ap		691327	0					
ANR	691501	UnaryOperationExpression	& b -> right_loc		691327	1					
ANR	691502	UnaryOperator	&		691327	0					
ANR	691503	PtrMemberAccess	b -> right_loc		691327	1					
ANR	691504	Identifier	b		691327	0					
ANR	691505	Identifier	right_loc		691327	1					
ANR	691506	BreakStatement	break ;	582:20:18056:18061	691327	1	True				
ANR	691507	ExpressionStatement	* ap = c	589:16:18307:18314	691327	2	True				
ANR	691508	AssignmentExpression	* ap = c		691327	0		=			
ANR	691509	UnaryOperationExpression	* ap		691327	0					
ANR	691510	UnaryOperator	*		691327	0					
ANR	691511	Identifier	ap		691327	1					
ANR	691512	Identifier	c		691327	1					
ANR	691513	ExpressionStatement	a -> left_loc = c -> right_loc	590:16:18332:18359	691327	3	True				
ANR	691514	AssignmentExpression	a -> left_loc = c -> right_loc		691327	0		=			
ANR	691515	PtrMemberAccess	a -> left_loc		691327	0					
ANR	691516	Identifier	a		691327	0					
ANR	691517	Identifier	left_loc		691327	1					
ANR	691518	PtrMemberAccess	c -> right_loc		691327	1					
ANR	691519	Identifier	c		691327	0					
ANR	691520	Identifier	right_loc		691327	1					
ANR	691521	ExpressionStatement	b -> right_loc = c -> left_loc	591:16:18377:18403	691327	4	True				
ANR	691522	AssignmentExpression	b -> right_loc = c -> left_loc		691327	0		=			
ANR	691523	PtrMemberAccess	b -> right_loc		691327	0					
ANR	691524	Identifier	b		691327	0					
ANR	691525	Identifier	right_loc		691327	1					
ANR	691526	PtrMemberAccess	c -> left_loc		691327	1					
ANR	691527	Identifier	c		691327	0					
ANR	691528	Identifier	left_loc		691327	1					
ANR	691529	ExpressionStatement	c -> left_loc = b	592:16:18421:18437	691327	5	True				
ANR	691530	AssignmentExpression	c -> left_loc = b		691327	0		=			
ANR	691531	PtrMemberAccess	c -> left_loc		691327	0					
ANR	691532	Identifier	c		691327	0					
ANR	691533	Identifier	left_loc		691327	1					
ANR	691534	Identifier	b		691327	1					
ANR	691535	ExpressionStatement	c -> right_loc = a	593:16:18455:18471	691327	6	True				
ANR	691536	AssignmentExpression	c -> right_loc = a		691327	0		=			
ANR	691537	PtrMemberAccess	c -> right_loc		691327	0					
ANR	691538	Identifier	c		691327	0					
ANR	691539	Identifier	right_loc		691327	1					
ANR	691540	Identifier	a		691327	1					
ANR	691541	IfStatement	if ( c > node )		691327	7					
ANR	691542	Condition	c > node	594:20:18493:18500	691327	0	True				
ANR	691543	RelationalExpression	c > node		691327	0		>			
ANR	691544	Identifier	c		691327	0					
ANR	691545	Identifier	node		691327	1					
ANR	691546	ExpressionStatement	ap = & b -> right_loc	595:20:18523:18541	691327	1	True				
ANR	691547	AssignmentExpression	ap = & b -> right_loc		691327	0		=			
ANR	691548	Identifier	ap		691327	0					
ANR	691549	UnaryOperationExpression	& b -> right_loc		691327	1					
ANR	691550	UnaryOperator	&		691327	0					
ANR	691551	PtrMemberAccess	b -> right_loc		691327	1					
ANR	691552	Identifier	b		691327	0					
ANR	691553	Identifier	right_loc		691327	1					
ANR	691554	ElseStatement	else		691327	0					
ANR	691555	ExpressionStatement	ap = & a -> left_loc	597:20:18584:18601	691327	0	True				
ANR	691556	AssignmentExpression	ap = & a -> left_loc		691327	0		=			
ANR	691557	Identifier	ap		691327	0					
ANR	691558	UnaryOperationExpression	& a -> left_loc		691327	1					
ANR	691559	UnaryOperator	&		691327	0					
ANR	691560	PtrMemberAccess	a -> left_loc		691327	1					
ANR	691561	Identifier	a		691327	0					
ANR	691562	Identifier	left_loc		691327	1					
ANR	691563	ElseStatement	else		691327	0					
ANR	691564	CompoundStatement		58:15:1826:1826	691327	0					
ANR	691565	ExpressionStatement	b = a -> right_loc	600:12:18646:18662	691327	0	True				
ANR	691566	AssignmentExpression	b = a -> right_loc		691327	0		=			
ANR	691567	Identifier	b		691327	0					
ANR	691568	PtrMemberAccess	a -> right_loc		691327	1					
ANR	691569	Identifier	a		691327	0					
ANR	691570	Identifier	right_loc		691327	1					
ANR	691571	IfStatement	if ( b == NULL )		691327	1					
ANR	691572	Condition	b == NULL	601:16:18680:18688	691327	0	True				
ANR	691573	EqualityExpression	b == NULL		691327	0		==			
ANR	691574	Identifier	b		691327	0					
ANR	691575	Identifier	NULL		691327	1					
ANR	691576	CompoundStatement		61:12:1897:1897	691327	1					
ANR	691577	ExpressionStatement	ap = & a -> right_loc	603:16:18721:18739	691327	0	True				
ANR	691578	AssignmentExpression	ap = & a -> right_loc		691327	0		=			
ANR	691579	Identifier	ap		691327	0					
ANR	691580	UnaryOperationExpression	& a -> right_loc		691327	1					
ANR	691581	UnaryOperator	&		691327	0					
ANR	691582	PtrMemberAccess	a -> right_loc		691327	1					
ANR	691583	Identifier	a		691327	0					
ANR	691584	Identifier	right_loc		691327	1					
ANR	691585	BreakStatement	break ;	604:16:18757:18762	691327	1	True				
ANR	691586	IfStatement	if ( b > node )		691327	2					
ANR	691587	Condition	b > node	606:16:18794:18801	691327	0	True				
ANR	691588	RelationalExpression	b > node		691327	0		>			
ANR	691589	Identifier	b		691327	0					
ANR	691590	Identifier	node		691327	1					
ANR	691591	CompoundStatement		65:26:1998:1998	691327	1					
ANR	691592	ExpressionStatement	c = b -> left_loc	607:16:18822:18837	691327	0	True				
ANR	691593	AssignmentExpression	c = b -> left_loc		691327	0		=			
ANR	691594	Identifier	c		691327	0					
ANR	691595	PtrMemberAccess	b -> left_loc		691327	1					
ANR	691596	Identifier	b		691327	0					
ANR	691597	Identifier	left_loc		691327	1					
ANR	691598	IfStatement	if ( c == NULL )		691327	1					
ANR	691599	Condition	c == NULL	608:20:18859:18867	691327	0	True				
ANR	691600	EqualityExpression	c == NULL		691327	0		==			
ANR	691601	Identifier	c		691327	0					
ANR	691602	Identifier	NULL		691327	1					
ANR	691603	CompoundStatement		67:31:2064:2064	691327	1					
ANR	691604	ExpressionStatement	ap = & b -> left_loc	609:20:18892:18909	691327	0	True				
ANR	691605	AssignmentExpression	ap = & b -> left_loc		691327	0		=			
ANR	691606	Identifier	ap		691327	0					
ANR	691607	UnaryOperationExpression	& b -> left_loc		691327	1					
ANR	691608	UnaryOperator	&		691327	0					
ANR	691609	PtrMemberAccess	b -> left_loc		691327	1					
ANR	691610	Identifier	b		691327	0					
ANR	691611	Identifier	left_loc		691327	1					
ANR	691612	BreakStatement	break ;	610:20:18931:18936	691327	1	True				
ANR	691613	ExpressionStatement	* ap = c	617:16:19183:19190	691327	2	True				
ANR	691614	AssignmentExpression	* ap = c		691327	0		=			
ANR	691615	UnaryOperationExpression	* ap		691327	0					
ANR	691616	UnaryOperator	*		691327	0					
ANR	691617	Identifier	ap		691327	1					
ANR	691618	Identifier	c		691327	1					
ANR	691619	ExpressionStatement	a -> right_loc = c -> left_loc	618:16:19208:19234	691327	3	True				
ANR	691620	AssignmentExpression	a -> right_loc = c -> left_loc		691327	0		=			
ANR	691621	PtrMemberAccess	a -> right_loc		691327	0					
ANR	691622	Identifier	a		691327	0					
ANR	691623	Identifier	right_loc		691327	1					
ANR	691624	PtrMemberAccess	c -> left_loc		691327	1					
ANR	691625	Identifier	c		691327	0					
ANR	691626	Identifier	left_loc		691327	1					
ANR	691627	ExpressionStatement	b -> left_loc = c -> right_loc	619:16:19252:19279	691327	4	True				
ANR	691628	AssignmentExpression	b -> left_loc = c -> right_loc		691327	0		=			
ANR	691629	PtrMemberAccess	b -> left_loc		691327	0					
ANR	691630	Identifier	b		691327	0					
ANR	691631	Identifier	left_loc		691327	1					
ANR	691632	PtrMemberAccess	c -> right_loc		691327	1					
ANR	691633	Identifier	c		691327	0					
ANR	691634	Identifier	right_loc		691327	1					
ANR	691635	ExpressionStatement	c -> left_loc = a	620:16:19297:19313	691327	5	True				
ANR	691636	AssignmentExpression	c -> left_loc = a		691327	0		=			
ANR	691637	PtrMemberAccess	c -> left_loc		691327	0					
ANR	691638	Identifier	c		691327	0					
ANR	691639	Identifier	left_loc		691327	1					
ANR	691640	Identifier	a		691327	1					
ANR	691641	ExpressionStatement	c -> right_loc = b	621:16:19331:19347	691327	6	True				
ANR	691642	AssignmentExpression	c -> right_loc = b		691327	0		=			
ANR	691643	PtrMemberAccess	c -> right_loc		691327	0					
ANR	691644	Identifier	c		691327	0					
ANR	691645	Identifier	right_loc		691327	1					
ANR	691646	Identifier	b		691327	1					
ANR	691647	IfStatement	if ( c > node )		691327	7					
ANR	691648	Condition	c > node	622:20:19369:19376	691327	0	True				
ANR	691649	RelationalExpression	c > node		691327	0		>			
ANR	691650	Identifier	c		691327	0					
ANR	691651	Identifier	node		691327	1					
ANR	691652	ExpressionStatement	ap = & a -> right_loc	623:20:19399:19417	691327	1	True				
ANR	691653	AssignmentExpression	ap = & a -> right_loc		691327	0		=			
ANR	691654	Identifier	ap		691327	0					
ANR	691655	UnaryOperationExpression	& a -> right_loc		691327	1					
ANR	691656	UnaryOperator	&		691327	0					
ANR	691657	PtrMemberAccess	a -> right_loc		691327	1					
ANR	691658	Identifier	a		691327	0					
ANR	691659	Identifier	right_loc		691327	1					
ANR	691660	ElseStatement	else		691327	0					
ANR	691661	ExpressionStatement	ap = & b -> left_loc	625:20:19460:19477	691327	0	True				
ANR	691662	AssignmentExpression	ap = & b -> left_loc		691327	0		=			
ANR	691663	Identifier	ap		691327	0					
ANR	691664	UnaryOperationExpression	& b -> left_loc		691327	1					
ANR	691665	UnaryOperator	&		691327	0					
ANR	691666	PtrMemberAccess	b -> left_loc		691327	1					
ANR	691667	Identifier	b		691327	0					
ANR	691668	Identifier	left_loc		691327	1					
ANR	691669	ElseStatement	else		691327	0					
ANR	691670	CompoundStatement		85:19:2692:2692	691327	0					
ANR	691671	ExpressionStatement	c = b -> right_loc	627:16:19516:19532	691327	0	True				
ANR	691672	AssignmentExpression	c = b -> right_loc		691327	0		=			
ANR	691673	Identifier	c		691327	0					
ANR	691674	PtrMemberAccess	b -> right_loc		691327	1					
ANR	691675	Identifier	b		691327	0					
ANR	691676	Identifier	right_loc		691327	1					
ANR	691677	IfStatement	if ( c == NULL )		691327	1					
ANR	691678	Condition	c == NULL	628:20:19554:19562	691327	0	True				
ANR	691679	EqualityExpression	c == NULL		691327	0		==			
ANR	691680	Identifier	c		691327	0					
ANR	691681	Identifier	NULL		691327	1					
ANR	691682	CompoundStatement		87:31:2759:2759	691327	1					
ANR	691683	ExpressionStatement	ap = & b -> right_loc	629:20:19587:19605	691327	0	True				
ANR	691684	AssignmentExpression	ap = & b -> right_loc		691327	0		=			
ANR	691685	Identifier	ap		691327	0					
ANR	691686	UnaryOperationExpression	& b -> right_loc		691327	1					
ANR	691687	UnaryOperator	&		691327	0					
ANR	691688	PtrMemberAccess	b -> right_loc		691327	1					
ANR	691689	Identifier	b		691327	0					
ANR	691690	Identifier	right_loc		691327	1					
ANR	691691	BreakStatement	break ;	630:20:19627:19632	691327	1	True				
ANR	691692	ExpressionStatement	* ap = c	637:16:19890:19897	691327	2	True				
ANR	691693	AssignmentExpression	* ap = c		691327	0		=			
ANR	691694	UnaryOperationExpression	* ap		691327	0					
ANR	691695	UnaryOperator	*		691327	0					
ANR	691696	Identifier	ap		691327	1					
ANR	691697	Identifier	c		691327	1					
ANR	691698	ExpressionStatement	a -> right_loc = b -> left_loc	638:16:19915:19941	691327	3	True				
ANR	691699	AssignmentExpression	a -> right_loc = b -> left_loc		691327	0		=			
ANR	691700	PtrMemberAccess	a -> right_loc		691327	0					
ANR	691701	Identifier	a		691327	0					
ANR	691702	Identifier	right_loc		691327	1					
ANR	691703	PtrMemberAccess	b -> left_loc		691327	1					
ANR	691704	Identifier	b		691327	0					
ANR	691705	Identifier	left_loc		691327	1					
ANR	691706	ExpressionStatement	b -> right_loc = c -> left_loc	639:16:19959:19985	691327	4	True				
ANR	691707	AssignmentExpression	b -> right_loc = c -> left_loc		691327	0		=			
ANR	691708	PtrMemberAccess	b -> right_loc		691327	0					
ANR	691709	Identifier	b		691327	0					
ANR	691710	Identifier	right_loc		691327	1					
ANR	691711	PtrMemberAccess	c -> left_loc		691327	1					
ANR	691712	Identifier	c		691327	0					
ANR	691713	Identifier	left_loc		691327	1					
ANR	691714	ExpressionStatement	b -> left_loc = a	640:16:20003:20019	691327	5	True				
ANR	691715	AssignmentExpression	b -> left_loc = a		691327	0		=			
ANR	691716	PtrMemberAccess	b -> left_loc		691327	0					
ANR	691717	Identifier	b		691327	0					
ANR	691718	Identifier	left_loc		691327	1					
ANR	691719	Identifier	a		691327	1					
ANR	691720	ExpressionStatement	c -> left_loc = b	641:16:20037:20053	691327	6	True				
ANR	691721	AssignmentExpression	c -> left_loc = b		691327	0		=			
ANR	691722	PtrMemberAccess	c -> left_loc		691327	0					
ANR	691723	Identifier	c		691327	0					
ANR	691724	Identifier	left_loc		691327	1					
ANR	691725	Identifier	b		691327	1					
ANR	691726	IfStatement	if ( c > node )		691327	7					
ANR	691727	Condition	c > node	642:20:20075:20082	691327	0	True				
ANR	691728	RelationalExpression	c > node		691327	0		>			
ANR	691729	Identifier	c		691327	0					
ANR	691730	Identifier	node		691327	1					
ANR	691731	ExpressionStatement	ap = & b -> right_loc	643:20:20105:20123	691327	1	True				
ANR	691732	AssignmentExpression	ap = & b -> right_loc		691327	0		=			
ANR	691733	Identifier	ap		691327	0					
ANR	691734	UnaryOperationExpression	& b -> right_loc		691327	1					
ANR	691735	UnaryOperator	&		691327	0					
ANR	691736	PtrMemberAccess	b -> right_loc		691327	1					
ANR	691737	Identifier	b		691327	0					
ANR	691738	Identifier	right_loc		691327	1					
ANR	691739	ElseStatement	else		691327	0					
ANR	691740	ExpressionStatement	ap = & c -> right_loc	645:20:20166:20184	691327	0	True				
ANR	691741	AssignmentExpression	ap = & c -> right_loc		691327	0		=			
ANR	691742	Identifier	ap		691327	0					
ANR	691743	UnaryOperationExpression	& c -> right_loc		691327	1					
ANR	691744	UnaryOperator	&		691327	0					
ANR	691745	PtrMemberAccess	c -> right_loc		691327	1					
ANR	691746	Identifier	c		691327	0					
ANR	691747	Identifier	right_loc		691327	1					
ANR	691748	ExpressionStatement	* ap = node	649:4:20220:20230	691327	6	True				
ANR	691749	AssignmentExpression	* ap = node		691327	0		=			
ANR	691750	UnaryOperationExpression	* ap		691327	0					
ANR	691751	UnaryOperator	*		691327	0					
ANR	691752	Identifier	ap		691327	1					
ANR	691753	Identifier	node		691327	1					
ANR	691754	ReturnType	static void		691327	1					
ANR	691755	Identifier	insert_free_loc		691327	2					
ANR	691756	ParameterList	"gs_memory_chunk_t * cmem , chunk_free_node_t * node"		691327	3					
ANR	691757	Parameter	gs_memory_chunk_t * cmem	541:28:16755:16777	691327	0	True				
ANR	691758	ParameterType	gs_memory_chunk_t *		691327	0					
ANR	691759	Identifier	cmem		691327	1					
ANR	691760	Parameter	chunk_free_node_t * node	541:53:16780:16802	691327	1	True				
ANR	691761	ParameterType	chunk_free_node_t *		691327	0					
ANR	691762	Identifier	node		691327	1					
ANR	691763	CFGEntryNode	ENTRY		691327		True				
ANR	691764	CFGExitNode	EXIT		691327		True				
ANR	691765	Symbol	b -> left_loc		691327						
ANR	691766	Symbol	& b -> right_loc		691327						
ANR	691767	Symbol	c -> left_loc		691327						
ANR	691768	Symbol	& c -> right_loc		691327						
ANR	691769	Symbol	& c -> left_loc		691327						
ANR	691770	Symbol	a -> left_loc		691327						
ANR	691771	Symbol	& a -> right_loc		691327						
ANR	691772	Symbol	node -> right_loc		691327						
ANR	691773	Symbol	* node		691327						
ANR	691774	Symbol	a		691327						
ANR	691775	Symbol	b		691327						
ANR	691776	Symbol	c		691327						
ANR	691777	Symbol	NULL		691327						
ANR	691778	Symbol	c -> right_loc		691327						
ANR	691779	Symbol	* a		691327						
ANR	691780	Symbol	* b		691327						
ANR	691781	Symbol	* c		691327						
ANR	691782	Symbol	ap		691327						
ANR	691783	Symbol	node -> left_loc		691327						
ANR	691784	Symbol	node		691327						
ANR	691785	Symbol	* ap		691327						
ANR	691786	Symbol	& b -> left_loc		691327						
ANR	691787	Symbol	cmem		691327						
ANR	691788	Symbol	& cmem -> free_loc		691327						
ANR	691789	Symbol	b -> right_loc		691327						
ANR	691790	Symbol	a -> right_loc		691327						
ANR	691791	Symbol	& a -> left_loc		691327						
ANR	691792	Function	insert_free	652:0:20235:20412							
ANR	691793	FunctionDef	"insert_free (gs_memory_chunk_t * cmem , chunk_free_node_t * node , uint size)"		691792	0					
ANR	691794	CompoundStatement		653:0:20320:20412	691792	0					
ANR	691795	ExpressionStatement	node -> size = size	654:4:20326:20343	691792	0	True				
ANR	691796	AssignmentExpression	node -> size = size		691792	0		=			
ANR	691797	PtrMemberAccess	node -> size		691792	0					
ANR	691798	Identifier	node		691792	0					
ANR	691799	Identifier	size		691792	1					
ANR	691800	Identifier	size		691792	1					
ANR	691801	ExpressionStatement	"insert_free_size ( cmem , node )"	655:4:20349:20377	691792	1	True				
ANR	691802	CallExpression	"insert_free_size ( cmem , node )"		691792	0					
ANR	691803	Callee	insert_free_size		691792	0					
ANR	691804	Identifier	insert_free_size		691792	0					
ANR	691805	ArgumentList	cmem		691792	1					
ANR	691806	Argument	cmem		691792	0					
ANR	691807	Identifier	cmem		691792	0					
ANR	691808	Argument	node		691792	1					
ANR	691809	Identifier	node		691792	0					
ANR	691810	ExpressionStatement	"insert_free_loc ( cmem , node )"	656:4:20383:20410	691792	2	True				
ANR	691811	CallExpression	"insert_free_loc ( cmem , node )"		691792	0					
ANR	691812	Callee	insert_free_loc		691792	0					
ANR	691813	Identifier	insert_free_loc		691792	0					
ANR	691814	ArgumentList	cmem		691792	1					
ANR	691815	Argument	cmem		691792	0					
ANR	691816	Identifier	cmem		691792	0					
ANR	691817	Argument	node		691792	1					
ANR	691818	Identifier	node		691792	0					
ANR	691819	ReturnType	static void		691792	1					
ANR	691820	Identifier	insert_free		691792	2					
ANR	691821	ParameterList	"gs_memory_chunk_t * cmem , chunk_free_node_t * node , uint size"		691792	3					
ANR	691822	Parameter	gs_memory_chunk_t * cmem	652:24:20259:20281	691792	0	True				
ANR	691823	ParameterType	gs_memory_chunk_t *		691792	0					
ANR	691824	Identifier	cmem		691792	1					
ANR	691825	Parameter	chunk_free_node_t * node	652:49:20284:20306	691792	1	True				
ANR	691826	ParameterType	chunk_free_node_t *		691792	0					
ANR	691827	Identifier	node		691792	1					
ANR	691828	Parameter	uint size	652:74:20309:20317	691792	2	True				
ANR	691829	ParameterType	uint		691792	0					
ANR	691830	Identifier	size		691792	1					
ANR	691831	CFGEntryNode	ENTRY		691792		True				
ANR	691832	CFGExitNode	EXIT		691792		True				
ANR	691833	Symbol	node		691792						
ANR	691834	Symbol	node -> size		691792						
ANR	691835	Symbol	size		691792						
ANR	691836	Symbol	* node		691792						
ANR	691837	Symbol	cmem		691792						
ANR	691838	Function	remove_free_loc	659:0:20415:21219							
ANR	691839	FunctionDef	"remove_free_loc (gs_memory_chunk_t * cmem , chunk_free_node_t * node)"		691838	0					
ANR	691840	CompoundStatement		660:0:20493:21219	691838	0					
ANR	691841	IdentifierDeclStatement	chunk_free_node_t * * ap = & cmem -> free_loc ;	661:4:20499:20539	691838	0	True				
ANR	691842	IdentifierDecl	* * ap = & cmem -> free_loc		691838	0					
ANR	691843	IdentifierDeclType	chunk_free_node_t * *		691838	0					
ANR	691844	Identifier	ap		691838	1					
ANR	691845	AssignmentExpression	* * ap = & cmem -> free_loc		691838	2		=			
ANR	691846	Identifier	ap		691838	0					
ANR	691847	UnaryOperationExpression	& cmem -> free_loc		691838	1					
ANR	691848	UnaryOperator	&		691838	0					
ANR	691849	PtrMemberAccess	cmem -> free_loc		691838	1					
ANR	691850	Identifier	cmem		691838	0					
ANR	691851	Identifier	free_loc		691838	1					
ANR	691852	WhileStatement	while ( * ap != node )		691838	1					
ANR	691853	Condition	* ap != node	663:11:20553:20563	691838	0	True				
ANR	691854	EqualityExpression	* ap != node		691838	0		!=			
ANR	691855	UnaryOperationExpression	* ap		691838	0					
ANR	691856	UnaryOperator	*		691838	0					
ANR	691857	Identifier	ap		691838	1					
ANR	691858	Identifier	node		691838	1					
ANR	691859	CompoundStatement		5:4:76:76	691838	1					
ANR	691860	IfStatement	if ( * ap > node )		691838	0					
ANR	691861	Condition	* ap > node	665:12:20584:20593	691838	0	True				
ANR	691862	RelationalExpression	* ap > node		691838	0		>			
ANR	691863	UnaryOperationExpression	* ap		691838	0					
ANR	691864	UnaryOperator	*		691838	0					
ANR	691865	Identifier	ap		691838	1					
ANR	691866	Identifier	node		691838	1					
ANR	691867	ExpressionStatement	ap = & ( * ap ) -> left_loc	666:12:20608:20629	691838	1	True				
ANR	691868	AssignmentExpression	ap = & ( * ap ) -> left_loc		691838	0		=			
ANR	691869	Identifier	ap		691838	0					
ANR	691870	UnaryOperationExpression	& ( * ap ) -> left_loc		691838	1					
ANR	691871	UnaryOperator	&		691838	0					
ANR	691872	PtrMemberAccess	( * ap ) -> left_loc		691838	1					
ANR	691873	UnaryOperationExpression	* ap		691838	0					
ANR	691874	UnaryOperator	*		691838	0					
ANR	691875	Identifier	ap		691838	1					
ANR	691876	Identifier	left_loc		691838	1					
ANR	691877	ElseStatement	else		691838	0					
ANR	691878	ExpressionStatement	ap = & ( * ap ) -> right_loc	668:12:20656:20678	691838	0	True				
ANR	691879	AssignmentExpression	ap = & ( * ap ) -> right_loc		691838	0		=			
ANR	691880	Identifier	ap		691838	0					
ANR	691881	UnaryOperationExpression	& ( * ap ) -> right_loc		691838	1					
ANR	691882	UnaryOperator	&		691838	0					
ANR	691883	PtrMemberAccess	( * ap ) -> right_loc		691838	1					
ANR	691884	UnaryOperationExpression	* ap		691838	0					
ANR	691885	UnaryOperator	*		691838	0					
ANR	691886	Identifier	ap		691838	1					
ANR	691887	Identifier	right_loc		691838	1					
ANR	691888	IfStatement	if ( node -> left_loc == NULL )		691838	2					
ANR	691889	Condition	node -> left_loc == NULL	671:8:20695:20716	691838	0	True				
ANR	691890	EqualityExpression	node -> left_loc == NULL		691838	0		==			
ANR	691891	PtrMemberAccess	node -> left_loc		691838	0					
ANR	691892	Identifier	node		691838	0					
ANR	691893	Identifier	left_loc		691838	1					
ANR	691894	Identifier	NULL		691838	1					
ANR	691895	ExpressionStatement	* ap = node -> right_loc	672:8:20727:20748	691838	1	True				
ANR	691896	AssignmentExpression	* ap = node -> right_loc		691838	0		=			
ANR	691897	UnaryOperationExpression	* ap		691838	0					
ANR	691898	UnaryOperator	*		691838	0					
ANR	691899	Identifier	ap		691838	1					
ANR	691900	PtrMemberAccess	node -> right_loc		691838	1					
ANR	691901	Identifier	node		691838	0					
ANR	691902	Identifier	right_loc		691838	1					
ANR	691903	ElseStatement	else		691838	0					
ANR	691904	IfStatement	if ( node -> right_loc == NULL )		691838	0					
ANR	691905	Condition	node -> right_loc == NULL	673:13:20763:20785	691838	0	True				
ANR	691906	EqualityExpression	node -> right_loc == NULL		691838	0		==			
ANR	691907	PtrMemberAccess	node -> right_loc		691838	0					
ANR	691908	Identifier	node		691838	0					
ANR	691909	Identifier	right_loc		691838	1					
ANR	691910	Identifier	NULL		691838	1					
ANR	691911	ExpressionStatement	* ap = node -> left_loc	674:8:20796:20816	691838	1	True				
ANR	691912	AssignmentExpression	* ap = node -> left_loc		691838	0		=			
ANR	691913	UnaryOperationExpression	* ap		691838	0					
ANR	691914	UnaryOperator	*		691838	0					
ANR	691915	Identifier	ap		691838	1					
ANR	691916	PtrMemberAccess	node -> left_loc		691838	1					
ANR	691917	Identifier	node		691838	0					
ANR	691918	Identifier	left_loc		691838	1					
ANR	691919	ElseStatement	else		691838	0					
ANR	691920	CompoundStatement		19:8:456:477	691838	0					
ANR	691921	IdentifierDeclStatement	chunk_free_node_t * * bp ;	677:8:20918:20940	691838	0	True				
ANR	691922	IdentifierDecl	* * bp		691838	0					
ANR	691923	IdentifierDeclType	chunk_free_node_t * *		691838	0					
ANR	691924	Identifier	bp		691838	1					
ANR	691925	IdentifierDeclStatement	chunk_free_node_t * b ;	678:8:20950:20971	691838	1	True				
ANR	691926	IdentifierDecl	* b		691838	0					
ANR	691927	IdentifierDeclType	chunk_free_node_t *		691838	0					
ANR	691928	Identifier	b		691838	1					
ANR	691929	ExpressionStatement	bp = & node -> left_loc	679:8:20981:21001	691838	2	True				
ANR	691930	AssignmentExpression	bp = & node -> left_loc		691838	0		=			
ANR	691931	Identifier	bp		691838	0					
ANR	691932	UnaryOperationExpression	& node -> left_loc		691838	1					
ANR	691933	UnaryOperator	&		691838	0					
ANR	691934	PtrMemberAccess	node -> left_loc		691838	1					
ANR	691935	Identifier	node		691838	0					
ANR	691936	Identifier	left_loc		691838	1					
ANR	691937	WhileStatement	while ( ( * bp ) -> right_loc )		691838	3					
ANR	691938	Condition	( * bp ) -> right_loc	680:15:21018:21033	691838	0	True				
ANR	691939	PtrMemberAccess	( * bp ) -> right_loc		691838	0					
ANR	691940	UnaryOperationExpression	* bp		691838	0					
ANR	691941	UnaryOperator	*		691838	0					
ANR	691942	Identifier	bp		691838	1					
ANR	691943	Identifier	right_loc		691838	1					
ANR	691944	ExpressionStatement	bp = & ( * bp ) -> right_loc	681:12:21048:21070	691838	1	True				
ANR	691945	AssignmentExpression	bp = & ( * bp ) -> right_loc		691838	0		=			
ANR	691946	Identifier	bp		691838	0					
ANR	691947	UnaryOperationExpression	& ( * bp ) -> right_loc		691838	1					
ANR	691948	UnaryOperator	&		691838	0					
ANR	691949	PtrMemberAccess	( * bp ) -> right_loc		691838	1					
ANR	691950	UnaryOperationExpression	* bp		691838	0					
ANR	691951	UnaryOperator	*		691838	0					
ANR	691952	Identifier	bp		691838	1					
ANR	691953	Identifier	right_loc		691838	1					
ANR	691954	ExpressionStatement	b = ( * bp )	682:8:21080:21089	691838	4	True				
ANR	691955	AssignmentExpression	b = ( * bp )		691838	0		=			
ANR	691956	Identifier	b		691838	0					
ANR	691957	UnaryOperationExpression	* bp		691838	1					
ANR	691958	UnaryOperator	*		691838	0					
ANR	691959	Identifier	bp		691838	1					
ANR	691960	ExpressionStatement	* bp = b -> left_loc	683:8:21099:21116	691838	5	True				
ANR	691961	AssignmentExpression	* bp = b -> left_loc		691838	0		=			
ANR	691962	UnaryOperationExpression	* bp		691838	0					
ANR	691963	UnaryOperator	*		691838	0					
ANR	691964	Identifier	bp		691838	1					
ANR	691965	PtrMemberAccess	b -> left_loc		691838	1					
ANR	691966	Identifier	b		691838	0					
ANR	691967	Identifier	left_loc		691838	1					
ANR	691968	ExpressionStatement	b -> left_loc = node -> left_loc	684:8:21126:21154	691838	6	True				
ANR	691969	AssignmentExpression	b -> left_loc = node -> left_loc		691838	0		=			
ANR	691970	PtrMemberAccess	b -> left_loc		691838	0					
ANR	691971	Identifier	b		691838	0					
ANR	691972	Identifier	left_loc		691838	1					
ANR	691973	PtrMemberAccess	node -> left_loc		691838	1					
ANR	691974	Identifier	node		691838	0					
ANR	691975	Identifier	left_loc		691838	1					
ANR	691976	ExpressionStatement	b -> right_loc = node -> right_loc	685:8:21164:21194	691838	7	True				
ANR	691977	AssignmentExpression	b -> right_loc = node -> right_loc		691838	0		=			
ANR	691978	PtrMemberAccess	b -> right_loc		691838	0					
ANR	691979	Identifier	b		691838	0					
ANR	691980	Identifier	right_loc		691838	1					
ANR	691981	PtrMemberAccess	node -> right_loc		691838	1					
ANR	691982	Identifier	node		691838	0					
ANR	691983	Identifier	right_loc		691838	1					
ANR	691984	ExpressionStatement	* ap = b	686:8:21204:21211	691838	8	True				
ANR	691985	AssignmentExpression	* ap = b		691838	0		=			
ANR	691986	UnaryOperationExpression	* ap		691838	0					
ANR	691987	UnaryOperator	*		691838	0					
ANR	691988	Identifier	ap		691838	1					
ANR	691989	Identifier	b		691838	1					
ANR	691990	ReturnType	static void		691838	1					
ANR	691991	Identifier	remove_free_loc		691838	2					
ANR	691992	ParameterList	"gs_memory_chunk_t * cmem , chunk_free_node_t * node"		691838	3					
ANR	691993	Parameter	gs_memory_chunk_t * cmem	659:28:20443:20465	691838	0	True				
ANR	691994	ParameterType	gs_memory_chunk_t *		691838	0					
ANR	691995	Identifier	cmem		691838	1					
ANR	691996	Parameter	chunk_free_node_t * node	659:53:20468:20490	691838	1	True				
ANR	691997	ParameterType	chunk_free_node_t *		691838	0					
ANR	691998	Identifier	node		691838	1					
ANR	691999	CFGEntryNode	ENTRY		691838		True				
ANR	692000	CFGExitNode	EXIT		691838		True				
ANR	692001	Symbol	b -> left_loc		691838						
ANR	692002	Symbol	b		691838						
ANR	692003	Symbol	NULL		691838						
ANR	692004	Symbol	& node -> left_loc		691838						
ANR	692005	Symbol	* b		691838						
ANR	692006	Symbol	bp		691838						
ANR	692007	Symbol	ap		691838						
ANR	692008	Symbol	node -> left_loc		691838						
ANR	692009	Symbol	( * bp ) -> right_loc		691838						
ANR	692010	Symbol	node		691838						
ANR	692011	Symbol	node -> right_loc		691838						
ANR	692012	Symbol	& ( * ap ) -> left_loc		691838						
ANR	692013	Symbol	& ( * bp ) -> right_loc		691838						
ANR	692014	Symbol	* ap		691838						
ANR	692015	Symbol	* bp		691838						
ANR	692016	Symbol	* * bp		691838						
ANR	692017	Symbol	* node		691838						
ANR	692018	Symbol	cmem		691838						
ANR	692019	Symbol	& cmem -> free_loc		691838						
ANR	692020	Symbol	b -> right_loc		691838						
ANR	692021	Symbol	& ( * ap ) -> right_loc		691838						
ANR	692022	Function	remove_free_size	690:0:21222:22051							
ANR	692023	FunctionDef	"remove_free_size (gs_memory_chunk_t * cmem , chunk_free_node_t * node)"		692022	0					
ANR	692024	CompoundStatement		691:0:21301:22051	692022	0					
ANR	692025	IdentifierDeclStatement	chunk_free_node_t * * ap = & cmem -> free_size ;	692:4:21307:21348	692022	0	True				
ANR	692026	IdentifierDecl	* * ap = & cmem -> free_size		692022	0					
ANR	692027	IdentifierDeclType	chunk_free_node_t * *		692022	0					
ANR	692028	Identifier	ap		692022	1					
ANR	692029	AssignmentExpression	* * ap = & cmem -> free_size		692022	2		=			
ANR	692030	Identifier	ap		692022	0					
ANR	692031	UnaryOperationExpression	& cmem -> free_size		692022	1					
ANR	692032	UnaryOperator	&		692022	0					
ANR	692033	PtrMemberAccess	cmem -> free_size		692022	1					
ANR	692034	Identifier	cmem		692022	0					
ANR	692035	Identifier	free_size		692022	1					
ANR	692036	WhileStatement	while ( * ap != node )		692022	1					
ANR	692037	Condition	* ap != node	694:11:21362:21372	692022	0	True				
ANR	692038	EqualityExpression	* ap != node		692022	0		!=			
ANR	692039	UnaryOperationExpression	* ap		692022	0					
ANR	692040	UnaryOperator	*		692022	0					
ANR	692041	Identifier	ap		692022	1					
ANR	692042	Identifier	node		692022	1					
ANR	692043	CompoundStatement		5:4:77:77	692022	1					
ANR	692044	IfStatement	"if ( CMP_SIZE ( * ap , node ) )"		692022	0					
ANR	692045	Condition	"CMP_SIZE ( * ap , node )"	696:12:21393:21411	692022	0	True				
ANR	692046	CallExpression	"CMP_SIZE ( * ap , node )"		692022	0					
ANR	692047	Callee	CMP_SIZE		692022	0					
ANR	692048	Identifier	CMP_SIZE		692022	0					
ANR	692049	ArgumentList	* ap		692022	1					
ANR	692050	Argument	* ap		692022	0					
ANR	692051	UnaryOperationExpression	* ap		692022	0					
ANR	692052	UnaryOperator	*		692022	0					
ANR	692053	Identifier	ap		692022	1					
ANR	692054	Argument	node		692022	1					
ANR	692055	Identifier	node		692022	0					
ANR	692056	ExpressionStatement	ap = & ( * ap ) -> left_size	697:12:21426:21448	692022	1	True				
ANR	692057	AssignmentExpression	ap = & ( * ap ) -> left_size		692022	0		=			
ANR	692058	Identifier	ap		692022	0					
ANR	692059	UnaryOperationExpression	& ( * ap ) -> left_size		692022	1					
ANR	692060	UnaryOperator	&		692022	0					
ANR	692061	PtrMemberAccess	( * ap ) -> left_size		692022	1					
ANR	692062	UnaryOperationExpression	* ap		692022	0					
ANR	692063	UnaryOperator	*		692022	0					
ANR	692064	Identifier	ap		692022	1					
ANR	692065	Identifier	left_size		692022	1					
ANR	692066	ElseStatement	else		692022	0					
ANR	692067	ExpressionStatement	ap = & ( * ap ) -> right_size	699:12:21475:21498	692022	0	True				
ANR	692068	AssignmentExpression	ap = & ( * ap ) -> right_size		692022	0		=			
ANR	692069	Identifier	ap		692022	0					
ANR	692070	UnaryOperationExpression	& ( * ap ) -> right_size		692022	1					
ANR	692071	UnaryOperator	&		692022	0					
ANR	692072	PtrMemberAccess	( * ap ) -> right_size		692022	1					
ANR	692073	UnaryOperationExpression	* ap		692022	0					
ANR	692074	UnaryOperator	*		692022	0					
ANR	692075	Identifier	ap		692022	1					
ANR	692076	Identifier	right_size		692022	1					
ANR	692077	IfStatement	if ( node -> left_size == NULL )		692022	2					
ANR	692078	Condition	node -> left_size == NULL	702:8:21515:21537	692022	0	True				
ANR	692079	EqualityExpression	node -> left_size == NULL		692022	0		==			
ANR	692080	PtrMemberAccess	node -> left_size		692022	0					
ANR	692081	Identifier	node		692022	0					
ANR	692082	Identifier	left_size		692022	1					
ANR	692083	Identifier	NULL		692022	1					
ANR	692084	ExpressionStatement	* ap = node -> right_size	703:8:21548:21570	692022	1	True				
ANR	692085	AssignmentExpression	* ap = node -> right_size		692022	0		=			
ANR	692086	UnaryOperationExpression	* ap		692022	0					
ANR	692087	UnaryOperator	*		692022	0					
ANR	692088	Identifier	ap		692022	1					
ANR	692089	PtrMemberAccess	node -> right_size		692022	1					
ANR	692090	Identifier	node		692022	0					
ANR	692091	Identifier	right_size		692022	1					
ANR	692092	ElseStatement	else		692022	0					
ANR	692093	IfStatement	if ( node -> right_size == NULL )		692022	0					
ANR	692094	Condition	node -> right_size == NULL	704:13:21585:21608	692022	0	True				
ANR	692095	EqualityExpression	node -> right_size == NULL		692022	0		==			
ANR	692096	PtrMemberAccess	node -> right_size		692022	0					
ANR	692097	Identifier	node		692022	0					
ANR	692098	Identifier	right_size		692022	1					
ANR	692099	Identifier	NULL		692022	1					
ANR	692100	ExpressionStatement	* ap = node -> left_size	705:8:21619:21640	692022	1	True				
ANR	692101	AssignmentExpression	* ap = node -> left_size		692022	0		=			
ANR	692102	UnaryOperationExpression	* ap		692022	0					
ANR	692103	UnaryOperator	*		692022	0					
ANR	692104	Identifier	ap		692022	1					
ANR	692105	PtrMemberAccess	node -> left_size		692022	1					
ANR	692106	Identifier	node		692022	0					
ANR	692107	Identifier	left_size		692022	1					
ANR	692108	ElseStatement	else		692022	0					
ANR	692109	CompoundStatement		19:8:472:493	692022	0					
ANR	692110	IdentifierDeclStatement	chunk_free_node_t * * bp ;	708:8:21742:21764	692022	0	True				
ANR	692111	IdentifierDecl	* * bp		692022	0					
ANR	692112	IdentifierDeclType	chunk_free_node_t * *		692022	0					
ANR	692113	Identifier	bp		692022	1					
ANR	692114	IdentifierDeclStatement	chunk_free_node_t * b ;	709:8:21774:21795	692022	1	True				
ANR	692115	IdentifierDecl	* b		692022	0					
ANR	692116	IdentifierDeclType	chunk_free_node_t *		692022	0					
ANR	692117	Identifier	b		692022	1					
ANR	692118	ExpressionStatement	bp = & node -> left_size	710:8:21805:21826	692022	2	True				
ANR	692119	AssignmentExpression	bp = & node -> left_size		692022	0		=			
ANR	692120	Identifier	bp		692022	0					
ANR	692121	UnaryOperationExpression	& node -> left_size		692022	1					
ANR	692122	UnaryOperator	&		692022	0					
ANR	692123	PtrMemberAccess	node -> left_size		692022	1					
ANR	692124	Identifier	node		692022	0					
ANR	692125	Identifier	left_size		692022	1					
ANR	692126	WhileStatement	while ( ( * bp ) -> right_size )		692022	3					
ANR	692127	Condition	( * bp ) -> right_size	711:15:21843:21859	692022	0	True				
ANR	692128	PtrMemberAccess	( * bp ) -> right_size		692022	0					
ANR	692129	UnaryOperationExpression	* bp		692022	0					
ANR	692130	UnaryOperator	*		692022	0					
ANR	692131	Identifier	bp		692022	1					
ANR	692132	Identifier	right_size		692022	1					
ANR	692133	ExpressionStatement	bp = & ( * bp ) -> right_size	712:12:21874:21897	692022	1	True				
ANR	692134	AssignmentExpression	bp = & ( * bp ) -> right_size		692022	0		=			
ANR	692135	Identifier	bp		692022	0					
ANR	692136	UnaryOperationExpression	& ( * bp ) -> right_size		692022	1					
ANR	692137	UnaryOperator	&		692022	0					
ANR	692138	PtrMemberAccess	( * bp ) -> right_size		692022	1					
ANR	692139	UnaryOperationExpression	* bp		692022	0					
ANR	692140	UnaryOperator	*		692022	0					
ANR	692141	Identifier	bp		692022	1					
ANR	692142	Identifier	right_size		692022	1					
ANR	692143	ExpressionStatement	b = ( * bp )	713:8:21907:21916	692022	4	True				
ANR	692144	AssignmentExpression	b = ( * bp )		692022	0		=			
ANR	692145	Identifier	b		692022	0					
ANR	692146	UnaryOperationExpression	* bp		692022	1					
ANR	692147	UnaryOperator	*		692022	0					
ANR	692148	Identifier	bp		692022	1					
ANR	692149	ExpressionStatement	* bp = b -> left_size	714:8:21926:21944	692022	5	True				
ANR	692150	AssignmentExpression	* bp = b -> left_size		692022	0		=			
ANR	692151	UnaryOperationExpression	* bp		692022	0					
ANR	692152	UnaryOperator	*		692022	0					
ANR	692153	Identifier	bp		692022	1					
ANR	692154	PtrMemberAccess	b -> left_size		692022	1					
ANR	692155	Identifier	b		692022	0					
ANR	692156	Identifier	left_size		692022	1					
ANR	692157	ExpressionStatement	b -> left_size = node -> left_size	715:8:21954:21984	692022	6	True				
ANR	692158	AssignmentExpression	b -> left_size = node -> left_size		692022	0		=			
ANR	692159	PtrMemberAccess	b -> left_size		692022	0					
ANR	692160	Identifier	b		692022	0					
ANR	692161	Identifier	left_size		692022	1					
ANR	692162	PtrMemberAccess	node -> left_size		692022	1					
ANR	692163	Identifier	node		692022	0					
ANR	692164	Identifier	left_size		692022	1					
ANR	692165	ExpressionStatement	b -> right_size = node -> right_size	716:8:21994:22026	692022	7	True				
ANR	692166	AssignmentExpression	b -> right_size = node -> right_size		692022	0		=			
ANR	692167	PtrMemberAccess	b -> right_size		692022	0					
ANR	692168	Identifier	b		692022	0					
ANR	692169	Identifier	right_size		692022	1					
ANR	692170	PtrMemberAccess	node -> right_size		692022	1					
ANR	692171	Identifier	node		692022	0					
ANR	692172	Identifier	right_size		692022	1					
ANR	692173	ExpressionStatement	* ap = b	717:8:22036:22043	692022	8	True				
ANR	692174	AssignmentExpression	* ap = b		692022	0		=			
ANR	692175	UnaryOperationExpression	* ap		692022	0					
ANR	692176	UnaryOperator	*		692022	0					
ANR	692177	Identifier	ap		692022	1					
ANR	692178	Identifier	b		692022	1					
ANR	692179	ReturnType	static void		692022	1					
ANR	692180	Identifier	remove_free_size		692022	2					
ANR	692181	ParameterList	"gs_memory_chunk_t * cmem , chunk_free_node_t * node"		692022	3					
ANR	692182	Parameter	gs_memory_chunk_t * cmem	690:29:21251:21273	692022	0	True				
ANR	692183	ParameterType	gs_memory_chunk_t *		692022	0					
ANR	692184	Identifier	cmem		692022	1					
ANR	692185	Parameter	chunk_free_node_t * node	690:54:21276:21298	692022	1	True				
ANR	692186	ParameterType	chunk_free_node_t *		692022	0					
ANR	692187	Identifier	node		692022	1					
ANR	692188	CFGEntryNode	ENTRY		692022		True				
ANR	692189	CFGExitNode	EXIT		692022		True				
ANR	692190	Symbol	b		692022						
ANR	692191	Symbol	NULL		692022						
ANR	692192	Symbol	CMP_SIZE		692022						
ANR	692193	Symbol	& ( * ap ) -> left_size		692022						
ANR	692194	Symbol	* b		692022						
ANR	692195	Symbol	bp		692022						
ANR	692196	Symbol	& ( * bp ) -> right_size		692022						
ANR	692197	Symbol	ap		692022						
ANR	692198	Symbol	b -> left_size		692022						
ANR	692199	Symbol	node		692022						
ANR	692200	Symbol	& cmem -> free_size		692022						
ANR	692201	Symbol	b -> right_size		692022						
ANR	692202	Symbol	* ap		692022						
ANR	692203	Symbol	( * bp ) -> right_size		692022						
ANR	692204	Symbol	& node -> left_size		692022						
ANR	692205	Symbol	* bp		692022						
ANR	692206	Symbol	* * bp		692022						
ANR	692207	Symbol	& ( * ap ) -> right_size		692022						
ANR	692208	Symbol	* node		692022						
ANR	692209	Symbol	node -> left_size		692022						
ANR	692210	Symbol	cmem		692022						
ANR	692211	Symbol	node -> right_size		692022						
ANR	692212	Function	remove_free_size_fast	721:0:22054:22719							
ANR	692213	FunctionDef	"remove_free_size_fast (gs_memory_chunk_t * cmem , chunk_free_node_t * * ap)"		692212	0					
ANR	692214	CompoundStatement		722:0:22137:22719	692212	0					
ANR	692215	IdentifierDeclStatement	chunk_free_node_t * node = * ap ;	723:4:22143:22172	692212	0	True				
ANR	692216	IdentifierDecl	* node = * ap		692212	0					
ANR	692217	IdentifierDeclType	chunk_free_node_t *		692212	0					
ANR	692218	Identifier	node		692212	1					
ANR	692219	AssignmentExpression	* node = * ap		692212	2		=			
ANR	692220	Identifier	node		692212	0					
ANR	692221	UnaryOperationExpression	* ap		692212	1					
ANR	692222	UnaryOperator	*		692212	0					
ANR	692223	Identifier	ap		692212	1					
ANR	692224	IfStatement	if ( node -> left_size == NULL )		692212	1					
ANR	692225	Condition	node -> left_size == NULL	725:8:22183:22205	692212	0	True				
ANR	692226	EqualityExpression	node -> left_size == NULL		692212	0		==			
ANR	692227	PtrMemberAccess	node -> left_size		692212	0					
ANR	692228	Identifier	node		692212	0					
ANR	692229	Identifier	left_size		692212	1					
ANR	692230	Identifier	NULL		692212	1					
ANR	692231	ExpressionStatement	* ap = node -> right_size	726:8:22216:22238	692212	1	True				
ANR	692232	AssignmentExpression	* ap = node -> right_size		692212	0		=			
ANR	692233	UnaryOperationExpression	* ap		692212	0					
ANR	692234	UnaryOperator	*		692212	0					
ANR	692235	Identifier	ap		692212	1					
ANR	692236	PtrMemberAccess	node -> right_size		692212	1					
ANR	692237	Identifier	node		692212	0					
ANR	692238	Identifier	right_size		692212	1					
ANR	692239	ElseStatement	else		692212	0					
ANR	692240	IfStatement	if ( node -> right_size == NULL )		692212	0					
ANR	692241	Condition	node -> right_size == NULL	727:13:22253:22276	692212	0	True				
ANR	692242	EqualityExpression	node -> right_size == NULL		692212	0		==			
ANR	692243	PtrMemberAccess	node -> right_size		692212	0					
ANR	692244	Identifier	node		692212	0					
ANR	692245	Identifier	right_size		692212	1					
ANR	692246	Identifier	NULL		692212	1					
ANR	692247	ExpressionStatement	* ap = node -> left_size	728:8:22287:22308	692212	1	True				
ANR	692248	AssignmentExpression	* ap = node -> left_size		692212	0		=			
ANR	692249	UnaryOperationExpression	* ap		692212	0					
ANR	692250	UnaryOperator	*		692212	0					
ANR	692251	Identifier	ap		692212	1					
ANR	692252	PtrMemberAccess	node -> left_size		692212	1					
ANR	692253	Identifier	node		692212	0					
ANR	692254	Identifier	left_size		692212	1					
ANR	692255	ElseStatement	else		692212	0					
ANR	692256	CompoundStatement		11:8:304:325	692212	0					
ANR	692257	IdentifierDeclStatement	chunk_free_node_t * * bp ;	731:8:22410:22432	692212	0	True				
ANR	692258	IdentifierDecl	* * bp		692212	0					
ANR	692259	IdentifierDeclType	chunk_free_node_t * *		692212	0					
ANR	692260	Identifier	bp		692212	1					
ANR	692261	IdentifierDeclStatement	chunk_free_node_t * b ;	732:8:22442:22463	692212	1	True				
ANR	692262	IdentifierDecl	* b		692212	0					
ANR	692263	IdentifierDeclType	chunk_free_node_t *		692212	0					
ANR	692264	Identifier	b		692212	1					
ANR	692265	ExpressionStatement	bp = & node -> left_size	733:8:22473:22494	692212	2	True				
ANR	692266	AssignmentExpression	bp = & node -> left_size		692212	0		=			
ANR	692267	Identifier	bp		692212	0					
ANR	692268	UnaryOperationExpression	& node -> left_size		692212	1					
ANR	692269	UnaryOperator	&		692212	0					
ANR	692270	PtrMemberAccess	node -> left_size		692212	1					
ANR	692271	Identifier	node		692212	0					
ANR	692272	Identifier	left_size		692212	1					
ANR	692273	WhileStatement	while ( ( * bp ) -> right_size )		692212	3					
ANR	692274	Condition	( * bp ) -> right_size	734:15:22511:22527	692212	0	True				
ANR	692275	PtrMemberAccess	( * bp ) -> right_size		692212	0					
ANR	692276	UnaryOperationExpression	* bp		692212	0					
ANR	692277	UnaryOperator	*		692212	0					
ANR	692278	Identifier	bp		692212	1					
ANR	692279	Identifier	right_size		692212	1					
ANR	692280	ExpressionStatement	bp = & ( * bp ) -> right_size	735:12:22542:22565	692212	1	True				
ANR	692281	AssignmentExpression	bp = & ( * bp ) -> right_size		692212	0		=			
ANR	692282	Identifier	bp		692212	0					
ANR	692283	UnaryOperationExpression	& ( * bp ) -> right_size		692212	1					
ANR	692284	UnaryOperator	&		692212	0					
ANR	692285	PtrMemberAccess	( * bp ) -> right_size		692212	1					
ANR	692286	UnaryOperationExpression	* bp		692212	0					
ANR	692287	UnaryOperator	*		692212	0					
ANR	692288	Identifier	bp		692212	1					
ANR	692289	Identifier	right_size		692212	1					
ANR	692290	ExpressionStatement	b = ( * bp )	736:8:22575:22584	692212	4	True				
ANR	692291	AssignmentExpression	b = ( * bp )		692212	0		=			
ANR	692292	Identifier	b		692212	0					
ANR	692293	UnaryOperationExpression	* bp		692212	1					
ANR	692294	UnaryOperator	*		692212	0					
ANR	692295	Identifier	bp		692212	1					
ANR	692296	ExpressionStatement	* bp = b -> left_size	737:8:22594:22612	692212	5	True				
ANR	692297	AssignmentExpression	* bp = b -> left_size		692212	0		=			
ANR	692298	UnaryOperationExpression	* bp		692212	0					
ANR	692299	UnaryOperator	*		692212	0					
ANR	692300	Identifier	bp		692212	1					
ANR	692301	PtrMemberAccess	b -> left_size		692212	1					
ANR	692302	Identifier	b		692212	0					
ANR	692303	Identifier	left_size		692212	1					
ANR	692304	ExpressionStatement	b -> left_size = node -> left_size	738:8:22622:22652	692212	6	True				
ANR	692305	AssignmentExpression	b -> left_size = node -> left_size		692212	0		=			
ANR	692306	PtrMemberAccess	b -> left_size		692212	0					
ANR	692307	Identifier	b		692212	0					
ANR	692308	Identifier	left_size		692212	1					
ANR	692309	PtrMemberAccess	node -> left_size		692212	1					
ANR	692310	Identifier	node		692212	0					
ANR	692311	Identifier	left_size		692212	1					
ANR	692312	ExpressionStatement	b -> right_size = node -> right_size	739:8:22662:22694	692212	7	True				
ANR	692313	AssignmentExpression	b -> right_size = node -> right_size		692212	0		=			
ANR	692314	PtrMemberAccess	b -> right_size		692212	0					
ANR	692315	Identifier	b		692212	0					
ANR	692316	Identifier	right_size		692212	1					
ANR	692317	PtrMemberAccess	node -> right_size		692212	1					
ANR	692318	Identifier	node		692212	0					
ANR	692319	Identifier	right_size		692212	1					
ANR	692320	ExpressionStatement	* ap = b	740:8:22704:22711	692212	8	True				
ANR	692321	AssignmentExpression	* ap = b		692212	0		=			
ANR	692322	UnaryOperationExpression	* ap		692212	0					
ANR	692323	UnaryOperator	*		692212	0					
ANR	692324	Identifier	ap		692212	1					
ANR	692325	Identifier	b		692212	1					
ANR	692326	ReturnType	static void		692212	1					
ANR	692327	Identifier	remove_free_size_fast		692212	2					
ANR	692328	ParameterList	"gs_memory_chunk_t * cmem , chunk_free_node_t * * ap"		692212	3					
ANR	692329	Parameter	gs_memory_chunk_t * cmem	721:34:22088:22110	692212	0	True				
ANR	692330	ParameterType	gs_memory_chunk_t *		692212	0					
ANR	692331	Identifier	cmem		692212	1					
ANR	692332	Parameter	chunk_free_node_t * * ap	721:59:22113:22134	692212	1	True				
ANR	692333	ParameterType	chunk_free_node_t * *		692212	0					
ANR	692334	Identifier	ap		692212	1					
ANR	692335	CFGEntryNode	ENTRY		692212		True				
ANR	692336	CFGExitNode	EXIT		692212		True				
ANR	692337	Symbol	b		692212						
ANR	692338	Symbol	NULL		692212						
ANR	692339	Symbol	* b		692212						
ANR	692340	Symbol	bp		692212						
ANR	692341	Symbol	& ( * bp ) -> right_size		692212						
ANR	692342	Symbol	ap		692212						
ANR	692343	Symbol	b -> left_size		692212						
ANR	692344	Symbol	node		692212						
ANR	692345	Symbol	b -> right_size		692212						
ANR	692346	Symbol	* ap		692212						
ANR	692347	Symbol	( * bp ) -> right_size		692212						
ANR	692348	Symbol	& node -> left_size		692212						
ANR	692349	Symbol	* bp		692212						
ANR	692350	Symbol	* * bp		692212						
ANR	692351	Symbol	* node		692212						
ANR	692352	Symbol	node -> left_size		692212						
ANR	692353	Symbol	cmem		692212						
ANR	692354	Symbol	node -> right_size		692212						
ANR	692355	Function	remove_free	744:0:22722:22865							
ANR	692356	FunctionDef	"remove_free (gs_memory_chunk_t * cmem , chunk_free_node_t * node)"		692355	0					
ANR	692357	CompoundStatement		745:0:22796:22865	692355	0					
ANR	692358	ExpressionStatement	"remove_free_loc ( cmem , node )"	746:4:22802:22829	692355	0	True				
ANR	692359	CallExpression	"remove_free_loc ( cmem , node )"		692355	0					
ANR	692360	Callee	remove_free_loc		692355	0					
ANR	692361	Identifier	remove_free_loc		692355	0					
ANR	692362	ArgumentList	cmem		692355	1					
ANR	692363	Argument	cmem		692355	0					
ANR	692364	Identifier	cmem		692355	0					
ANR	692365	Argument	node		692355	1					
ANR	692366	Identifier	node		692355	0					
ANR	692367	ExpressionStatement	"remove_free_size ( cmem , node )"	747:4:22835:22863	692355	1	True				
ANR	692368	CallExpression	"remove_free_size ( cmem , node )"		692355	0					
ANR	692369	Callee	remove_free_size		692355	0					
ANR	692370	Identifier	remove_free_size		692355	0					
ANR	692371	ArgumentList	cmem		692355	1					
ANR	692372	Argument	cmem		692355	0					
ANR	692373	Identifier	cmem		692355	0					
ANR	692374	Argument	node		692355	1					
ANR	692375	Identifier	node		692355	0					
ANR	692376	ReturnType	static void		692355	1					
ANR	692377	Identifier	remove_free		692355	2					
ANR	692378	ParameterList	"gs_memory_chunk_t * cmem , chunk_free_node_t * node"		692355	3					
ANR	692379	Parameter	gs_memory_chunk_t * cmem	744:24:22746:22768	692355	0	True				
ANR	692380	ParameterType	gs_memory_chunk_t *		692355	0					
ANR	692381	Identifier	cmem		692355	1					
ANR	692382	Parameter	chunk_free_node_t * node	744:49:22771:22793	692355	1	True				
ANR	692383	ParameterType	chunk_free_node_t *		692355	0					
ANR	692384	Identifier	node		692355	1					
ANR	692385	CFGEntryNode	ENTRY		692355		True				
ANR	692386	CFGExitNode	EXIT		692355		True				
ANR	692387	Symbol	node		692355						
ANR	692388	Symbol	cmem		692355						
ANR	692389	Function	chunk_obj_alloc	757:0:23108:31721							
ANR	692390	FunctionDef	"chunk_obj_alloc (gs_memory_t * mem , uint size , gs_memory_type_ptr_t type , client_name_t cname)"		692389	0					
ANR	692391	CompoundStatement		759:0:23215:31721	692389	0					
ANR	692392	IdentifierDeclStatement	gs_memory_chunk_t * cmem = ( gs_memory_chunk_t * ) mem ;	760:4:23221:23272	692389	0	True				
ANR	692393	IdentifierDecl	* cmem = ( gs_memory_chunk_t * ) mem		692389	0					
ANR	692394	IdentifierDeclType	gs_memory_chunk_t *		692389	0					
ANR	692395	Identifier	cmem		692389	1					
ANR	692396	AssignmentExpression	* cmem = ( gs_memory_chunk_t * ) mem		692389	2		=			
ANR	692397	Identifier	cmem		692389	0					
ANR	692398	CastExpression	( gs_memory_chunk_t * ) mem		692389	1					
ANR	692399	CastTarget	gs_memory_chunk_t *		692389	0					
ANR	692400	Identifier	mem		692389	1					
ANR	692401	IdentifierDeclStatement	"chunk_free_node_t * * ap , * * okp ;"	761:4:23278:23307	692389	1	True				
ANR	692402	IdentifierDecl	* * ap		692389	0					
ANR	692403	IdentifierDeclType	chunk_free_node_t * *		692389	0					
ANR	692404	Identifier	ap		692389	1					
ANR	692405	IdentifierDecl	* * okp		692389	1					
ANR	692406	IdentifierDeclType	chunk_free_node_t * *		692389	0					
ANR	692407	Identifier	okp		692389	1					
ANR	692408	IdentifierDeclStatement	"chunk_free_node_t * a , * b , * c ;"	762:4:23313:23342	692389	2	True				
ANR	692409	IdentifierDecl	* a		692389	0					
ANR	692410	IdentifierDeclType	chunk_free_node_t *		692389	0					
ANR	692411	Identifier	a		692389	1					
ANR	692412	IdentifierDecl	* b		692389	1					
ANR	692413	IdentifierDeclType	chunk_free_node_t *		692389	0					
ANR	692414	Identifier	b		692389	1					
ANR	692415	IdentifierDecl	* c		692389	2					
ANR	692416	IdentifierDeclType	chunk_free_node_t *		692389	0					
ANR	692417	Identifier	c		692389	1					
ANR	692418	IdentifierDeclStatement	uint newsize ;	763:4:23348:23360	692389	3	True				
ANR	692419	IdentifierDecl	newsize		692389	0					
ANR	692420	IdentifierDeclType	uint		692389	0					
ANR	692421	Identifier	newsize		692389	1					
ANR	692422	IdentifierDeclStatement	chunk_obj_node_t * obj = NULL ;	764:4:23366:23394	692389	4	True				
ANR	692423	IdentifierDecl	* obj = NULL		692389	0					
ANR	692424	IdentifierDeclType	chunk_obj_node_t *		692389	0					
ANR	692425	Identifier	obj		692389	1					
ANR	692426	AssignmentExpression	* obj = NULL		692389	2		=			
ANR	692427	Identifier	NULL		692389	0					
ANR	692428	Identifier	NULL		692389	1					
ANR	692429	ExpressionStatement	newsize = round_up_to_align ( size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )	766:4:23401:23473	692389	5	True				
ANR	692430	AssignmentExpression	newsize = round_up_to_align ( size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		692389	0		=			
ANR	692431	Identifier	newsize		692389	0					
ANR	692432	CallExpression	round_up_to_align ( size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		692389	1					
ANR	692433	Callee	round_up_to_align		692389	0					
ANR	692434	Identifier	round_up_to_align		692389	0					
ANR	692435	ArgumentList	size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	692436	Argument	size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	0					
ANR	692437	AdditiveExpression	size + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	0		+			
ANR	692438	Identifier	size		692389	0					
ANR	692439	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	692440	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	692441	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	692442	ArgumentList	chunk_obj_node_t		692389	1					
ANR	692443	Argument	chunk_obj_node_t		692389	0					
ANR	692444	Identifier	chunk_obj_node_t		692389	0					
ANR	692445	IfStatement	if ( newsize < SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) )		692389	6					
ANR	692446	Condition	newsize < SIZEOF_ROUND_ALIGN ( chunk_free_node_t )	769:8:23649:23695	692389	0	True				
ANR	692447	RelationalExpression	newsize < SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		692389	0		<			
ANR	692448	Identifier	newsize		692389	0					
ANR	692449	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		692389	1					
ANR	692450	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	692451	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	692452	ArgumentList	chunk_free_node_t		692389	1					
ANR	692453	Argument	chunk_free_node_t		692389	0					
ANR	692454	Identifier	chunk_free_node_t		692389	0					
ANR	692455	ExpressionStatement	newsize = SIZEOF_ROUND_ALIGN ( chunk_free_node_t )	770:8:23706:23753	692389	1	True				
ANR	692456	AssignmentExpression	newsize = SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		692389	0		=			
ANR	692457	Identifier	newsize		692389	0					
ANR	692458	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		692389	1					
ANR	692459	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	692460	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	692461	ArgumentList	chunk_free_node_t		692389	1					
ANR	692462	Argument	chunk_free_node_t		692389	0					
ANR	692463	Identifier	chunk_free_node_t		692389	0					
ANR	692464	IfStatement	if ( newsize < size )		692389	7					
ANR	692465	Condition	newsize < size	772:8:23798:23811	692389	0	True				
ANR	692466	RelationalExpression	newsize < size		692389	0		<			
ANR	692467	Identifier	newsize		692389	0					
ANR	692468	Identifier	size		692389	1					
ANR	692469	ReturnStatement	return NULL ;	773:8:23822:23833	692389	1	True				
ANR	692470	Identifier	NULL		692389	0					
ANR	692471	ExpressionStatement	cmem -> sequence ++	776:4:23857:23873	692389	8	True				
ANR	692472	PostIncDecOperationExpression	cmem -> sequence ++		692389	0					
ANR	692473	PtrMemberAccess	cmem -> sequence		692389	0					
ANR	692474	Identifier	cmem		692389	0					
ANR	692475	Identifier	sequence		692389	1					
ANR	692476	IncDec	++		692389	1					
ANR	692477	ExpressionStatement	"dmlprintf4 ( cmem -> target , ""Event %x: malloc(chunk=%p, size=%x, cname=%s)\\n"" , cmem -> sequence , cmem , newsize , cname )"	781:4:23929:24042	692389	9	True				
ANR	692478	CallExpression	"dmlprintf4 ( cmem -> target , ""Event %x: malloc(chunk=%p, size=%x, cname=%s)\\n"" , cmem -> sequence , cmem , newsize , cname )"		692389	0					
ANR	692479	Callee	dmlprintf4		692389	0					
ANR	692480	Identifier	dmlprintf4		692389	0					
ANR	692481	ArgumentList	cmem -> target		692389	1					
ANR	692482	Argument	cmem -> target		692389	0					
ANR	692483	PtrMemberAccess	cmem -> target		692389	0					
ANR	692484	Identifier	cmem		692389	0					
ANR	692485	Identifier	target		692389	1					
ANR	692486	Argument	"""Event %x: malloc(chunk=%p, size=%x, cname=%s)\\n"""		692389	1					
ANR	692487	PrimaryExpression	"""Event %x: malloc(chunk=%p, size=%x, cname=%s)\\n"""		692389	0					
ANR	692488	Argument	cmem -> sequence		692389	2					
ANR	692489	PtrMemberAccess	cmem -> sequence		692389	0					
ANR	692490	Identifier	cmem		692389	0					
ANR	692491	Identifier	sequence		692389	1					
ANR	692492	Argument	cmem		692389	3					
ANR	692493	Identifier	cmem		692389	0					
ANR	692494	Argument	newsize		692389	4					
ANR	692495	Identifier	newsize		692389	0					
ANR	692496	Argument	cname		692389	5					
ANR	692497	Identifier	cname		692389	0					
ANR	692498	IfStatement	if ( SINGLE_OBJECT_CHUNK ( newsize ) )		692389	10					
ANR	692499	Condition	SINGLE_OBJECT_CHUNK ( newsize )	788:8:24212:24239	692389	0	True				
ANR	692500	CallExpression	SINGLE_OBJECT_CHUNK ( newsize )		692389	0					
ANR	692501	Callee	SINGLE_OBJECT_CHUNK		692389	0					
ANR	692502	Identifier	SINGLE_OBJECT_CHUNK		692389	0					
ANR	692503	ArgumentList	newsize		692389	1					
ANR	692504	Argument	newsize		692389	0					
ANR	692505	Identifier	newsize		692389	0					
ANR	692506	CompoundStatement		30:38:1026:1026	692389	1					
ANR	692507	ExpressionStatement	"obj = ( chunk_obj_node_t * ) gs_alloc_bytes_immovable ( cmem -> target , newsize , cname )"	789:8:24252:24332	692389	0	True				
ANR	692508	AssignmentExpression	"obj = ( chunk_obj_node_t * ) gs_alloc_bytes_immovable ( cmem -> target , newsize , cname )"		692389	0		=			
ANR	692509	Identifier	obj		692389	0					
ANR	692510	CastExpression	"( chunk_obj_node_t * ) gs_alloc_bytes_immovable ( cmem -> target , newsize , cname )"		692389	1					
ANR	692511	CastTarget	chunk_obj_node_t *		692389	0					
ANR	692512	CallExpression	"gs_alloc_bytes_immovable ( cmem -> target , newsize , cname )"		692389	1					
ANR	692513	Callee	gs_alloc_bytes_immovable		692389	0					
ANR	692514	Identifier	gs_alloc_bytes_immovable		692389	0					
ANR	692515	ArgumentList	cmem -> target		692389	1					
ANR	692516	Argument	cmem -> target		692389	0					
ANR	692517	PtrMemberAccess	cmem -> target		692389	0					
ANR	692518	Identifier	cmem		692389	0					
ANR	692519	Identifier	target		692389	1					
ANR	692520	Argument	newsize		692389	1					
ANR	692521	Identifier	newsize		692389	0					
ANR	692522	Argument	cname		692389	2					
ANR	692523	Identifier	cname		692389	0					
ANR	692524	IfStatement	if ( obj == NULL )		692389	1					
ANR	692525	Condition	obj == NULL	790:12:24346:24356	692389	0	True				
ANR	692526	EqualityExpression	obj == NULL		692389	0		==			
ANR	692527	Identifier	obj		692389	0					
ANR	692528	Identifier	NULL		692389	1					
ANR	692529	ReturnStatement	return NULL ;	791:12:24371:24382	692389	1	True				
ANR	692530	Identifier	NULL		692389	0					
ANR	692531	ElseStatement	else		692389	0					
ANR	692532	CompoundStatement		34:11:1179:1179	692389	0					
ANR	692533	ExpressionStatement	ap = & cmem -> free_size	795:8:24536:24557	692389	0	True				
ANR	692534	AssignmentExpression	ap = & cmem -> free_size		692389	0		=			
ANR	692535	Identifier	ap		692389	0					
ANR	692536	UnaryOperationExpression	& cmem -> free_size		692389	1					
ANR	692537	UnaryOperator	&		692389	0					
ANR	692538	PtrMemberAccess	cmem -> free_size		692389	1					
ANR	692539	Identifier	cmem		692389	0					
ANR	692540	Identifier	free_size		692389	1					
ANR	692541	ExpressionStatement	okp = NULL	796:8:24567:24577	692389	1	True				
ANR	692542	AssignmentExpression	okp = NULL		692389	0		=			
ANR	692543	Identifier	okp		692389	0					
ANR	692544	Identifier	NULL		692389	1					
ANR	692545	WhileStatement	while ( ( a = * ap ) != NULL )		692389	2					
ANR	692546	Condition	( a = * ap ) != NULL	797:15:24594:24610	692389	0	True				
ANR	692547	EqualityExpression	( a = * ap ) != NULL		692389	0		!=			
ANR	692548	AssignmentExpression	a = * ap		692389	0		=			
ANR	692549	Identifier	a		692389	0					
ANR	692550	UnaryOperationExpression	* ap		692389	1					
ANR	692551	UnaryOperator	*		692389	0					
ANR	692552	Identifier	ap		692389	1					
ANR	692553	Identifier	NULL		692389	1					
ANR	692554	CompoundStatement		39:34:1397:1397	692389	1					
ANR	692555	IfStatement	if ( a -> size >= newsize )		692389	0					
ANR	692556	Condition	a -> size >= newsize	798:16:24631:24648	692389	0	True				
ANR	692557	RelationalExpression	a -> size >= newsize		692389	0		>=			
ANR	692558	PtrMemberAccess	a -> size		692389	0					
ANR	692559	Identifier	a		692389	0					
ANR	692560	Identifier	size		692389	1					
ANR	692561	Identifier	newsize		692389	1					
ANR	692562	CompoundStatement		40:36:1435:1435	692389	1					
ANR	692563	ExpressionStatement	b = a -> left_size	799:16:24669:24685	692389	0	True				
ANR	692564	AssignmentExpression	b = a -> left_size		692389	0		=			
ANR	692565	Identifier	b		692389	0					
ANR	692566	PtrMemberAccess	a -> left_size		692389	1					
ANR	692567	Identifier	a		692389	0					
ANR	692568	Identifier	left_size		692389	1					
ANR	692569	IfStatement	if ( b == NULL )		692389	1					
ANR	692570	Condition	b == NULL	800:20:24707:24715	692389	0	True				
ANR	692571	EqualityExpression	b == NULL		692389	0		==			
ANR	692572	Identifier	b		692389	0					
ANR	692573	Identifier	NULL		692389	1					
ANR	692574	CompoundStatement		42:31:1502:1502	692389	1					
ANR	692575	ExpressionStatement	okp = ap	801:20:24740:24748	692389	0	True				
ANR	692576	AssignmentExpression	okp = ap		692389	0		=			
ANR	692577	Identifier	okp		692389	0					
ANR	692578	Identifier	ap		692389	1					
ANR	692579	BreakStatement	break ;	802:20:24786:24791	692389	1	True				
ANR	692580	IfStatement	if ( b -> size >= newsize )		692389	2					
ANR	692581	Condition	b -> size >= newsize	804:20:24852:24869	692389	0	True				
ANR	692582	RelationalExpression	b -> size >= newsize		692389	0		>=			
ANR	692583	PtrMemberAccess	b -> size		692389	0					
ANR	692584	Identifier	b		692389	0					
ANR	692585	Identifier	size		692389	1					
ANR	692586	Identifier	newsize		692389	1					
ANR	692587	CompoundStatement		46:40:1656:1656	692389	1					
ANR	692588	ExpressionStatement	c = b -> left_size	805:20:24894:24910	692389	0	True				
ANR	692589	AssignmentExpression	c = b -> left_size		692389	0		=			
ANR	692590	Identifier	c		692389	0					
ANR	692591	PtrMemberAccess	b -> left_size		692389	1					
ANR	692592	Identifier	b		692389	0					
ANR	692593	Identifier	left_size		692389	1					
ANR	692594	IfStatement	if ( c == NULL )		692389	1					
ANR	692595	Condition	c == NULL	806:24:24936:24944	692389	0	True				
ANR	692596	EqualityExpression	c == NULL		692389	0		==			
ANR	692597	Identifier	c		692389	0					
ANR	692598	Identifier	NULL		692389	1					
ANR	692599	CompoundStatement		48:35:1731:1731	692389	1					
ANR	692600	ExpressionStatement	okp = & a -> left_size	807:24:24973:24992	692389	0	True				
ANR	692601	AssignmentExpression	okp = & a -> left_size		692389	0		=			
ANR	692602	Identifier	okp		692389	0					
ANR	692603	UnaryOperationExpression	& a -> left_size		692389	1					
ANR	692604	UnaryOperator	&		692389	0					
ANR	692605	PtrMemberAccess	a -> left_size		692389	1					
ANR	692606	Identifier	a		692389	0					
ANR	692607	Identifier	left_size		692389	1					
ANR	692608	BreakStatement	break ;	808:24:25059:25064	692389	1	True				
ANR	692609	ExpressionStatement	* ap = c	815:20:25358:25365	692389	2	True				
ANR	692610	AssignmentExpression	* ap = c		692389	0		=			
ANR	692611	UnaryOperationExpression	* ap		692389	0					
ANR	692612	UnaryOperator	*		692389	0					
ANR	692613	Identifier	ap		692389	1					
ANR	692614	Identifier	c		692389	1					
ANR	692615	ExpressionStatement	a -> left_size = b -> right_size	816:20:25387:25416	692389	3	True				
ANR	692616	AssignmentExpression	a -> left_size = b -> right_size		692389	0		=			
ANR	692617	PtrMemberAccess	a -> left_size		692389	0					
ANR	692618	Identifier	a		692389	0					
ANR	692619	Identifier	left_size		692389	1					
ANR	692620	PtrMemberAccess	b -> right_size		692389	1					
ANR	692621	Identifier	b		692389	0					
ANR	692622	Identifier	right_size		692389	1					
ANR	692623	ExpressionStatement	b -> left_size = c -> right_size	817:20:25438:25467	692389	4	True				
ANR	692624	AssignmentExpression	b -> left_size = c -> right_size		692389	0		=			
ANR	692625	PtrMemberAccess	b -> left_size		692389	0					
ANR	692626	Identifier	b		692389	0					
ANR	692627	Identifier	left_size		692389	1					
ANR	692628	PtrMemberAccess	c -> right_size		692389	1					
ANR	692629	Identifier	c		692389	0					
ANR	692630	Identifier	right_size		692389	1					
ANR	692631	ExpressionStatement	b -> right_size = a	818:20:25489:25506	692389	5	True				
ANR	692632	AssignmentExpression	b -> right_size = a		692389	0		=			
ANR	692633	PtrMemberAccess	b -> right_size		692389	0					
ANR	692634	Identifier	b		692389	0					
ANR	692635	Identifier	right_size		692389	1					
ANR	692636	Identifier	a		692389	1					
ANR	692637	ExpressionStatement	c -> right_size = b	819:20:25528:25545	692389	6	True				
ANR	692638	AssignmentExpression	c -> right_size = b		692389	0		=			
ANR	692639	PtrMemberAccess	c -> right_size		692389	0					
ANR	692640	Identifier	c		692389	0					
ANR	692641	Identifier	right_size		692389	1					
ANR	692642	Identifier	b		692389	1					
ANR	692643	IfStatement	if ( c -> size >= newsize )		692389	7					
ANR	692644	Condition	c -> size >= newsize	820:24:25571:25588	692389	0	True				
ANR	692645	RelationalExpression	c -> size >= newsize		692389	0		>=			
ANR	692646	PtrMemberAccess	c -> size		692389	0					
ANR	692647	Identifier	c		692389	0					
ANR	692648	Identifier	size		692389	1					
ANR	692649	Identifier	newsize		692389	1					
ANR	692650	CompoundStatement		62:44:2375:2375	692389	1					
ANR	692651	ExpressionStatement	okp = ap	821:24:25617:25625	692389	0	True				
ANR	692652	AssignmentExpression	okp = ap		692389	0		=			
ANR	692653	Identifier	okp		692389	0					
ANR	692654	Identifier	ap		692389	1					
ANR	692655	ExpressionStatement	ap = & c -> left_size	822:24:25678:25696	692389	1	True				
ANR	692656	AssignmentExpression	ap = & c -> left_size		692389	0		=			
ANR	692657	Identifier	ap		692389	0					
ANR	692658	UnaryOperationExpression	& c -> left_size		692389	1					
ANR	692659	UnaryOperator	&		692389	0					
ANR	692660	PtrMemberAccess	c -> left_size		692389	1					
ANR	692661	Identifier	c		692389	0					
ANR	692662	Identifier	left_size		692389	1					
ANR	692663	ElseStatement	else		692389	0					
ANR	692664	CompoundStatement		65:27:2509:2509	692389	0					
ANR	692665	ExpressionStatement	okp = & c -> right_size	824:24:25751:25771	692389	0	True				
ANR	692666	AssignmentExpression	okp = & c -> right_size		692389	0		=			
ANR	692667	Identifier	okp		692389	0					
ANR	692668	UnaryOperationExpression	& c -> right_size		692389	1					
ANR	692669	UnaryOperator	&		692389	0					
ANR	692670	PtrMemberAccess	c -> right_size		692389	1					
ANR	692671	Identifier	c		692389	0					
ANR	692672	Identifier	right_size		692389	1					
ANR	692673	ExpressionStatement	ap = & b -> left_size	825:24:25824:25842	692389	1	True				
ANR	692674	AssignmentExpression	ap = & b -> left_size		692389	0		=			
ANR	692675	Identifier	ap		692389	0					
ANR	692676	UnaryOperationExpression	& b -> left_size		692389	1					
ANR	692677	UnaryOperator	&		692389	0					
ANR	692678	PtrMemberAccess	b -> left_size		692389	1					
ANR	692679	Identifier	b		692389	0					
ANR	692680	Identifier	left_size		692389	1					
ANR	692681	ElseStatement	else		692389	0					
ANR	692682	CompoundStatement		69:23:2673:2673	692389	0					
ANR	692683	ExpressionStatement	c = b -> right_size	828:20:25911:25928	692389	0	True				
ANR	692684	AssignmentExpression	c = b -> right_size		692389	0		=			
ANR	692685	Identifier	c		692389	0					
ANR	692686	PtrMemberAccess	b -> right_size		692389	1					
ANR	692687	Identifier	b		692389	0					
ANR	692688	Identifier	right_size		692389	1					
ANR	692689	IfStatement	if ( c == NULL )		692389	1					
ANR	692690	Condition	c == NULL	829:24:25954:25962	692389	0	True				
ANR	692691	EqualityExpression	c == NULL		692389	0		==			
ANR	692692	Identifier	c		692389	0					
ANR	692693	Identifier	NULL		692389	1					
ANR	692694	CompoundStatement		71:35:2749:2749	692389	1					
ANR	692695	ExpressionStatement	okp = ap	830:24:25991:25999	692389	0	True				
ANR	692696	AssignmentExpression	okp = ap		692389	0		=			
ANR	692697	Identifier	okp		692389	0					
ANR	692698	Identifier	ap		692389	1					
ANR	692699	BreakStatement	break ;	831:24:26067:26072	692389	1	True				
ANR	692700	ExpressionStatement	* ap = c	838:20:26346:26353	692389	2	True				
ANR	692701	AssignmentExpression	* ap = c		692389	0		=			
ANR	692702	UnaryOperationExpression	* ap		692389	0					
ANR	692703	UnaryOperator	*		692389	0					
ANR	692704	Identifier	ap		692389	1					
ANR	692705	Identifier	c		692389	1					
ANR	692706	ExpressionStatement	a -> left_size = c -> right_size	839:20:26375:26404	692389	3	True				
ANR	692707	AssignmentExpression	a -> left_size = c -> right_size		692389	0		=			
ANR	692708	PtrMemberAccess	a -> left_size		692389	0					
ANR	692709	Identifier	a		692389	0					
ANR	692710	Identifier	left_size		692389	1					
ANR	692711	PtrMemberAccess	c -> right_size		692389	1					
ANR	692712	Identifier	c		692389	0					
ANR	692713	Identifier	right_size		692389	1					
ANR	692714	ExpressionStatement	b -> right_size = c -> left_size	840:20:26426:26454	692389	4	True				
ANR	692715	AssignmentExpression	b -> right_size = c -> left_size		692389	0		=			
ANR	692716	PtrMemberAccess	b -> right_size		692389	0					
ANR	692717	Identifier	b		692389	0					
ANR	692718	Identifier	right_size		692389	1					
ANR	692719	PtrMemberAccess	c -> left_size		692389	1					
ANR	692720	Identifier	c		692389	0					
ANR	692721	Identifier	left_size		692389	1					
ANR	692722	ExpressionStatement	c -> left_size = b	841:20:26476:26493	692389	5	True				
ANR	692723	AssignmentExpression	c -> left_size = b		692389	0		=			
ANR	692724	PtrMemberAccess	c -> left_size		692389	0					
ANR	692725	Identifier	c		692389	0					
ANR	692726	Identifier	left_size		692389	1					
ANR	692727	Identifier	b		692389	1					
ANR	692728	ExpressionStatement	c -> right_size = a	842:20:26515:26532	692389	6	True				
ANR	692729	AssignmentExpression	c -> right_size = a		692389	0		=			
ANR	692730	PtrMemberAccess	c -> right_size		692389	0					
ANR	692731	Identifier	c		692389	0					
ANR	692732	Identifier	right_size		692389	1					
ANR	692733	Identifier	a		692389	1					
ANR	692734	IfStatement	if ( c -> size >= newsize )		692389	7					
ANR	692735	Condition	c -> size >= newsize	843:24:26558:26575	692389	0	True				
ANR	692736	RelationalExpression	c -> size >= newsize		692389	0		>=			
ANR	692737	PtrMemberAccess	c -> size		692389	0					
ANR	692738	Identifier	c		692389	0					
ANR	692739	Identifier	size		692389	1					
ANR	692740	Identifier	newsize		692389	1					
ANR	692741	CompoundStatement		85:44:3362:3362	692389	1					
ANR	692742	ExpressionStatement	okp = ap	844:24:26604:26612	692389	0	True				
ANR	692743	AssignmentExpression	okp = ap		692389	0		=			
ANR	692744	Identifier	okp		692389	0					
ANR	692745	Identifier	ap		692389	1					
ANR	692746	ExpressionStatement	ap = & b -> right_size	845:24:26665:26684	692389	1	True				
ANR	692747	AssignmentExpression	ap = & b -> right_size		692389	0		=			
ANR	692748	Identifier	ap		692389	0					
ANR	692749	UnaryOperationExpression	& b -> right_size		692389	1					
ANR	692750	UnaryOperator	&		692389	0					
ANR	692751	PtrMemberAccess	b -> right_size		692389	1					
ANR	692752	Identifier	b		692389	0					
ANR	692753	Identifier	right_size		692389	1					
ANR	692754	ElseStatement	else		692389	0					
ANR	692755	CompoundStatement		88:27:3497:3497	692389	0					
ANR	692756	ExpressionStatement	okp = & c -> right_size	847:24:26739:26759	692389	0	True				
ANR	692757	AssignmentExpression	okp = & c -> right_size		692389	0		=			
ANR	692758	Identifier	okp		692389	0					
ANR	692759	UnaryOperationExpression	& c -> right_size		692389	1					
ANR	692760	UnaryOperator	&		692389	0					
ANR	692761	PtrMemberAccess	c -> right_size		692389	1					
ANR	692762	Identifier	c		692389	0					
ANR	692763	Identifier	right_size		692389	1					
ANR	692764	ExpressionStatement	ap = & a -> left_size	848:24:26812:26830	692389	1	True				
ANR	692765	AssignmentExpression	ap = & a -> left_size		692389	0		=			
ANR	692766	Identifier	ap		692389	0					
ANR	692767	UnaryOperationExpression	& a -> left_size		692389	1					
ANR	692768	UnaryOperator	&		692389	0					
ANR	692769	PtrMemberAccess	a -> left_size		692389	1					
ANR	692770	Identifier	a		692389	0					
ANR	692771	Identifier	left_size		692389	1					
ANR	692772	ElseStatement	else		692389	0					
ANR	692773	CompoundStatement		93:19:3675:3675	692389	0					
ANR	692774	ExpressionStatement	b = a -> right_size	852:16:26909:26926	692389	0	True				
ANR	692775	AssignmentExpression	b = a -> right_size		692389	0		=			
ANR	692776	Identifier	b		692389	0					
ANR	692777	PtrMemberAccess	a -> right_size		692389	1					
ANR	692778	Identifier	a		692389	0					
ANR	692779	Identifier	right_size		692389	1					
ANR	692780	IfStatement	if ( b == NULL )		692389	1					
ANR	692781	Condition	b == NULL	853:20:26948:26956	692389	0	True				
ANR	692782	EqualityExpression	b == NULL		692389	0		==			
ANR	692783	Identifier	b		692389	0					
ANR	692784	Identifier	NULL		692389	1					
ANR	692785	BreakStatement	break ;	854:20:26979:26984	692389	1	True				
ANR	692786	IfStatement	if ( b -> size >= newsize )		692389	2					
ANR	692787	Condition	b -> size >= newsize	855:20:27040:27057	692389	0	True				
ANR	692788	RelationalExpression	b -> size >= newsize		692389	0		>=			
ANR	692789	PtrMemberAccess	b -> size		692389	0					
ANR	692790	Identifier	b		692389	0					
ANR	692791	Identifier	size		692389	1					
ANR	692792	Identifier	newsize		692389	1					
ANR	692793	CompoundStatement		97:40:3844:3844	692389	1					
ANR	692794	ExpressionStatement	c = b -> left_size	856:20:27082:27098	692389	0	True				
ANR	692795	AssignmentExpression	c = b -> left_size		692389	0		=			
ANR	692796	Identifier	c		692389	0					
ANR	692797	PtrMemberAccess	b -> left_size		692389	1					
ANR	692798	Identifier	b		692389	0					
ANR	692799	Identifier	left_size		692389	1					
ANR	692800	IfStatement	if ( c == NULL )		692389	1					
ANR	692801	Condition	c == NULL	857:24:27124:27132	692389	0	True				
ANR	692802	EqualityExpression	c == NULL		692389	0		==			
ANR	692803	Identifier	c		692389	0					
ANR	692804	Identifier	NULL		692389	1					
ANR	692805	CompoundStatement		99:35:3919:3919	692389	1					
ANR	692806	ExpressionStatement	okp = & a -> right_size	858:24:27161:27181	692389	0	True				
ANR	692807	AssignmentExpression	okp = & a -> right_size		692389	0		=			
ANR	692808	Identifier	okp		692389	0					
ANR	692809	UnaryOperationExpression	& a -> right_size		692389	1					
ANR	692810	UnaryOperator	&		692389	0					
ANR	692811	PtrMemberAccess	a -> right_size		692389	1					
ANR	692812	Identifier	a		692389	0					
ANR	692813	Identifier	right_size		692389	1					
ANR	692814	BreakStatement	break ;	859:24:27248:27253	692389	1	True				
ANR	692815	ExpressionStatement	* ap = c	866:20:27528:27535	692389	2	True				
ANR	692816	AssignmentExpression	* ap = c		692389	0		=			
ANR	692817	UnaryOperationExpression	* ap		692389	0					
ANR	692818	UnaryOperator	*		692389	0					
ANR	692819	Identifier	ap		692389	1					
ANR	692820	Identifier	c		692389	1					
ANR	692821	ExpressionStatement	a -> right_size = c -> left_size	867:20:27557:27585	692389	3	True				
ANR	692822	AssignmentExpression	a -> right_size = c -> left_size		692389	0		=			
ANR	692823	PtrMemberAccess	a -> right_size		692389	0					
ANR	692824	Identifier	a		692389	0					
ANR	692825	Identifier	right_size		692389	1					
ANR	692826	PtrMemberAccess	c -> left_size		692389	1					
ANR	692827	Identifier	c		692389	0					
ANR	692828	Identifier	left_size		692389	1					
ANR	692829	ExpressionStatement	b -> left_size = c -> right_size	868:20:27607:27636	692389	4	True				
ANR	692830	AssignmentExpression	b -> left_size = c -> right_size		692389	0		=			
ANR	692831	PtrMemberAccess	b -> left_size		692389	0					
ANR	692832	Identifier	b		692389	0					
ANR	692833	Identifier	left_size		692389	1					
ANR	692834	PtrMemberAccess	c -> right_size		692389	1					
ANR	692835	Identifier	c		692389	0					
ANR	692836	Identifier	right_size		692389	1					
ANR	692837	ExpressionStatement	c -> left_size = a	869:20:27658:27675	692389	5	True				
ANR	692838	AssignmentExpression	c -> left_size = a		692389	0		=			
ANR	692839	PtrMemberAccess	c -> left_size		692389	0					
ANR	692840	Identifier	c		692389	0					
ANR	692841	Identifier	left_size		692389	1					
ANR	692842	Identifier	a		692389	1					
ANR	692843	ExpressionStatement	c -> right_size = b	870:20:27697:27714	692389	6	True				
ANR	692844	AssignmentExpression	c -> right_size = b		692389	0		=			
ANR	692845	PtrMemberAccess	c -> right_size		692389	0					
ANR	692846	Identifier	c		692389	0					
ANR	692847	Identifier	right_size		692389	1					
ANR	692848	Identifier	b		692389	1					
ANR	692849	IfStatement	if ( c -> size >= newsize )		692389	7					
ANR	692850	Condition	c -> size >= newsize	871:24:27740:27757	692389	0	True				
ANR	692851	RelationalExpression	c -> size >= newsize		692389	0		>=			
ANR	692852	PtrMemberAccess	c -> size		692389	0					
ANR	692853	Identifier	c		692389	0					
ANR	692854	Identifier	size		692389	1					
ANR	692855	Identifier	newsize		692389	1					
ANR	692856	CompoundStatement		113:44:4544:4544	692389	1					
ANR	692857	ExpressionStatement	okp = ap	872:24:27786:27794	692389	0	True				
ANR	692858	AssignmentExpression	okp = ap		692389	0		=			
ANR	692859	Identifier	okp		692389	0					
ANR	692860	Identifier	ap		692389	1					
ANR	692861	ExpressionStatement	ap = & a -> right_size	873:24:27847:27866	692389	1	True				
ANR	692862	AssignmentExpression	ap = & a -> right_size		692389	0		=			
ANR	692863	Identifier	ap		692389	0					
ANR	692864	UnaryOperationExpression	& a -> right_size		692389	1					
ANR	692865	UnaryOperator	&		692389	0					
ANR	692866	PtrMemberAccess	a -> right_size		692389	1					
ANR	692867	Identifier	a		692389	0					
ANR	692868	Identifier	right_size		692389	1					
ANR	692869	ElseStatement	else		692389	0					
ANR	692870	CompoundStatement		116:27:4679:4679	692389	0					
ANR	692871	ExpressionStatement	okp = & c -> right_size	875:24:27921:27941	692389	0	True				
ANR	692872	AssignmentExpression	okp = & c -> right_size		692389	0		=			
ANR	692873	Identifier	okp		692389	0					
ANR	692874	UnaryOperationExpression	& c -> right_size		692389	1					
ANR	692875	UnaryOperator	&		692389	0					
ANR	692876	PtrMemberAccess	c -> right_size		692389	1					
ANR	692877	Identifier	c		692389	0					
ANR	692878	Identifier	right_size		692389	1					
ANR	692879	ExpressionStatement	ap = & b -> left_size	876:24:27994:28012	692389	1	True				
ANR	692880	AssignmentExpression	ap = & b -> left_size		692389	0		=			
ANR	692881	Identifier	ap		692389	0					
ANR	692882	UnaryOperationExpression	& b -> left_size		692389	1					
ANR	692883	UnaryOperator	&		692389	0					
ANR	692884	PtrMemberAccess	b -> left_size		692389	1					
ANR	692885	Identifier	b		692389	0					
ANR	692886	Identifier	left_size		692389	1					
ANR	692887	ElseStatement	else		692389	0					
ANR	692888	CompoundStatement		120:23:4843:4843	692389	0					
ANR	692889	ExpressionStatement	c = b -> right_size	879:20:28081:28098	692389	0	True				
ANR	692890	AssignmentExpression	c = b -> right_size		692389	0		=			
ANR	692891	Identifier	c		692389	0					
ANR	692892	PtrMemberAccess	b -> right_size		692389	1					
ANR	692893	Identifier	b		692389	0					
ANR	692894	Identifier	right_size		692389	1					
ANR	692895	IfStatement	if ( c == NULL )		692389	1					
ANR	692896	Condition	c == NULL	880:24:28124:28132	692389	0	True				
ANR	692897	EqualityExpression	c == NULL		692389	0		==			
ANR	692898	Identifier	c		692389	0					
ANR	692899	Identifier	NULL		692389	1					
ANR	692900	BreakStatement	break ;	881:24:28159:28164	692389	1	True				
ANR	692901	ExpressionStatement	* ap = c	887:20:28462:28469	692389	2	True				
ANR	692902	AssignmentExpression	* ap = c		692389	0		=			
ANR	692903	UnaryOperationExpression	* ap		692389	0					
ANR	692904	UnaryOperator	*		692389	0					
ANR	692905	Identifier	ap		692389	1					
ANR	692906	Identifier	c		692389	1					
ANR	692907	ExpressionStatement	a -> right_size = b -> left_size	888:20:28491:28519	692389	3	True				
ANR	692908	AssignmentExpression	a -> right_size = b -> left_size		692389	0		=			
ANR	692909	PtrMemberAccess	a -> right_size		692389	0					
ANR	692910	Identifier	a		692389	0					
ANR	692911	Identifier	right_size		692389	1					
ANR	692912	PtrMemberAccess	b -> left_size		692389	1					
ANR	692913	Identifier	b		692389	0					
ANR	692914	Identifier	left_size		692389	1					
ANR	692915	ExpressionStatement	b -> right_size = c -> left_size	889:20:28541:28569	692389	4	True				
ANR	692916	AssignmentExpression	b -> right_size = c -> left_size		692389	0		=			
ANR	692917	PtrMemberAccess	b -> right_size		692389	0					
ANR	692918	Identifier	b		692389	0					
ANR	692919	Identifier	right_size		692389	1					
ANR	692920	PtrMemberAccess	c -> left_size		692389	1					
ANR	692921	Identifier	c		692389	0					
ANR	692922	Identifier	left_size		692389	1					
ANR	692923	ExpressionStatement	b -> left_size = a	890:20:28591:28608	692389	5	True				
ANR	692924	AssignmentExpression	b -> left_size = a		692389	0		=			
ANR	692925	PtrMemberAccess	b -> left_size		692389	0					
ANR	692926	Identifier	b		692389	0					
ANR	692927	Identifier	left_size		692389	1					
ANR	692928	Identifier	a		692389	1					
ANR	692929	ExpressionStatement	c -> left_size = b	891:20:28630:28647	692389	6	True				
ANR	692930	AssignmentExpression	c -> left_size = b		692389	0		=			
ANR	692931	PtrMemberAccess	c -> left_size		692389	0					
ANR	692932	Identifier	c		692389	0					
ANR	692933	Identifier	left_size		692389	1					
ANR	692934	Identifier	b		692389	1					
ANR	692935	IfStatement	if ( c -> size >= newsize )		692389	7					
ANR	692936	Condition	c -> size >= newsize	892:24:28673:28690	692389	0	True				
ANR	692937	RelationalExpression	c -> size >= newsize		692389	0		>=			
ANR	692938	PtrMemberAccess	c -> size		692389	0					
ANR	692939	Identifier	c		692389	0					
ANR	692940	Identifier	size		692389	1					
ANR	692941	Identifier	newsize		692389	1					
ANR	692942	CompoundStatement		134:44:5477:5477	692389	1					
ANR	692943	ExpressionStatement	okp = ap	893:24:28719:28727	692389	0	True				
ANR	692944	AssignmentExpression	okp = ap		692389	0		=			
ANR	692945	Identifier	okp		692389	0					
ANR	692946	Identifier	ap		692389	1					
ANR	692947	ExpressionStatement	ap = & b -> right_size	894:24:28780:28799	692389	1	True				
ANR	692948	AssignmentExpression	ap = & b -> right_size		692389	0		=			
ANR	692949	Identifier	ap		692389	0					
ANR	692950	UnaryOperationExpression	& b -> right_size		692389	1					
ANR	692951	UnaryOperator	&		692389	0					
ANR	692952	PtrMemberAccess	b -> right_size		692389	1					
ANR	692953	Identifier	b		692389	0					
ANR	692954	Identifier	right_size		692389	1					
ANR	692955	ElseStatement	else		692389	0					
ANR	692956	ExpressionStatement	ap = & c -> right_size	896:24:28852:28871	692389	0	True				
ANR	692957	AssignmentExpression	ap = & c -> right_size		692389	0		=			
ANR	692958	Identifier	ap		692389	0					
ANR	692959	UnaryOperationExpression	& c -> right_size		692389	1					
ANR	692960	UnaryOperator	&		692389	0					
ANR	692961	PtrMemberAccess	c -> right_size		692389	1					
ANR	692962	Identifier	c		692389	0					
ANR	692963	Identifier	right_size		692389	1					
ANR	692964	IfStatement	if ( okp == NULL )		692389	3					
ANR	692965	Condition	okp == NULL	903:12:28999:29009	692389	0	True				
ANR	692966	EqualityExpression	okp == NULL		692389	0		==			
ANR	692967	Identifier	okp		692389	0					
ANR	692968	Identifier	NULL		692389	1					
ANR	692969	CompoundStatement		148:12:5924:5983	692389	1					
ANR	692970	IdentifierDeclStatement	chunk_slab_t * slab ;	905:12:29108:29126	692389	0	True				
ANR	692971	IdentifierDecl	* slab		692389	0					
ANR	692972	IdentifierDeclType	chunk_slab_t *		692389	0					
ANR	692973	Identifier	slab		692389	1					
ANR	692974	IdentifierDeclStatement	uint slab_size = newsize + SIZEOF_ROUND_ALIGN ( chunk_slab_t ) ;	906:12:29140:29199	692389	1	True				
ANR	692975	IdentifierDecl	slab_size = newsize + SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	0					
ANR	692976	IdentifierDeclType	uint		692389	0					
ANR	692977	Identifier	slab_size		692389	1					
ANR	692978	AssignmentExpression	slab_size = newsize + SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	2		=			
ANR	692979	Identifier	slab_size		692389	0					
ANR	692980	AdditiveExpression	newsize + SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1		+			
ANR	692981	Identifier	newsize		692389	0					
ANR	692982	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1					
ANR	692983	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	692984	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	692985	ArgumentList	chunk_slab_t		692389	1					
ANR	692986	Argument	chunk_slab_t		692389	0					
ANR	692987	Identifier	chunk_slab_t		692389	0					
ANR	692988	IfStatement	if ( slab_size <= ( CHUNK_SIZE >> 1 ) )		692389	2					
ANR	692989	Condition	slab_size <= ( CHUNK_SIZE >> 1 )	907:16:29217:29244	692389	0	True				
ANR	692990	RelationalExpression	slab_size <= ( CHUNK_SIZE >> 1 )		692389	0		<=			
ANR	692991	Identifier	slab_size		692389	0					
ANR	692992	ShiftExpression	CHUNK_SIZE >> 1		692389	1		>>			
ANR	692993	Identifier	CHUNK_SIZE		692389	0					
ANR	692994	PrimaryExpression	1		692389	1					
ANR	692995	ExpressionStatement	slab_size = CHUNK_SIZE	908:16:29263:29285	692389	1	True				
ANR	692996	AssignmentExpression	slab_size = CHUNK_SIZE		692389	0		=			
ANR	692997	Identifier	slab_size		692389	0					
ANR	692998	Identifier	CHUNK_SIZE		692389	1					
ANR	692999	ExpressionStatement	"slab = ( chunk_slab_t * ) gs_alloc_bytes_immovable ( cmem -> target , slab_size , cname )"	909:12:29299:29378	692389	3	True				
ANR	693000	AssignmentExpression	"slab = ( chunk_slab_t * ) gs_alloc_bytes_immovable ( cmem -> target , slab_size , cname )"		692389	0		=			
ANR	693001	Identifier	slab		692389	0					
ANR	693002	CastExpression	"( chunk_slab_t * ) gs_alloc_bytes_immovable ( cmem -> target , slab_size , cname )"		692389	1					
ANR	693003	CastTarget	chunk_slab_t *		692389	0					
ANR	693004	CallExpression	"gs_alloc_bytes_immovable ( cmem -> target , slab_size , cname )"		692389	1					
ANR	693005	Callee	gs_alloc_bytes_immovable		692389	0					
ANR	693006	Identifier	gs_alloc_bytes_immovable		692389	0					
ANR	693007	ArgumentList	cmem -> target		692389	1					
ANR	693008	Argument	cmem -> target		692389	0					
ANR	693009	PtrMemberAccess	cmem -> target		692389	0					
ANR	693010	Identifier	cmem		692389	0					
ANR	693011	Identifier	target		692389	1					
ANR	693012	Argument	slab_size		692389	1					
ANR	693013	Identifier	slab_size		692389	0					
ANR	693014	Argument	cname		692389	2					
ANR	693015	Identifier	cname		692389	0					
ANR	693016	IfStatement	if ( slab == NULL )		692389	4					
ANR	693017	Condition	slab == NULL	910:16:29396:29407	692389	0	True				
ANR	693018	EqualityExpression	slab == NULL		692389	0		==			
ANR	693019	Identifier	slab		692389	0					
ANR	693020	Identifier	NULL		692389	1					
ANR	693021	ReturnStatement	return NULL ;	911:16:29426:29437	692389	1	True				
ANR	693022	Identifier	NULL		692389	0					
ANR	693023	ExpressionStatement	slab -> next = cmem -> slabs	912:12:29451:29475	692389	5	True				
ANR	693024	AssignmentExpression	slab -> next = cmem -> slabs		692389	0		=			
ANR	693025	PtrMemberAccess	slab -> next		692389	0					
ANR	693026	Identifier	slab		692389	0					
ANR	693027	Identifier	next		692389	1					
ANR	693028	PtrMemberAccess	cmem -> slabs		692389	1					
ANR	693029	Identifier	cmem		692389	0					
ANR	693030	Identifier	slabs		692389	1					
ANR	693031	ExpressionStatement	cmem -> slabs = slab	913:12:29489:29507	692389	6	True				
ANR	693032	AssignmentExpression	cmem -> slabs = slab		692389	0		=			
ANR	693033	PtrMemberAccess	cmem -> slabs		692389	0					
ANR	693034	Identifier	cmem		692389	0					
ANR	693035	Identifier	slabs		692389	1					
ANR	693036	Identifier	slab		692389	1					
ANR	693037	ExpressionStatement	obj = ( chunk_obj_node_t * ) ( ( ( byte * ) slab ) + SIZEOF_ROUND_ALIGN ( chunk_slab_t ) )	915:12:29522:29599	692389	7	True				
ANR	693038	AssignmentExpression	obj = ( chunk_obj_node_t * ) ( ( ( byte * ) slab ) + SIZEOF_ROUND_ALIGN ( chunk_slab_t ) )		692389	0		=			
ANR	693039	Identifier	obj		692389	0					
ANR	693040	CastExpression	( chunk_obj_node_t * ) ( ( ( byte * ) slab ) + SIZEOF_ROUND_ALIGN ( chunk_slab_t ) )		692389	1					
ANR	693041	CastTarget	chunk_obj_node_t *		692389	0					
ANR	693042	AdditiveExpression	( ( byte * ) slab ) + SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1		+			
ANR	693043	CastExpression	( byte * ) slab		692389	0					
ANR	693044	CastTarget	byte *		692389	0					
ANR	693045	Identifier	slab		692389	1					
ANR	693046	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1					
ANR	693047	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693048	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693049	ArgumentList	chunk_slab_t		692389	1					
ANR	693050	Argument	chunk_slab_t		692389	0					
ANR	693051	Identifier	chunk_slab_t		692389	0					
ANR	693052	IfStatement	if ( slab_size != newsize + SIZEOF_ROUND_ALIGN ( chunk_slab_t ) )		692389	8					
ANR	693053	Condition	slab_size != newsize + SIZEOF_ROUND_ALIGN ( chunk_slab_t )	916:16:29617:29671	692389	0	True				
ANR	693054	EqualityExpression	slab_size != newsize + SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	0		!=			
ANR	693055	Identifier	slab_size		692389	0					
ANR	693056	AdditiveExpression	newsize + SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1		+			
ANR	693057	Identifier	newsize		692389	0					
ANR	693058	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1					
ANR	693059	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693060	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693061	ArgumentList	chunk_slab_t		692389	1					
ANR	693062	Argument	chunk_slab_t		692389	0					
ANR	693063	Identifier	chunk_slab_t		692389	0					
ANR	693064	CompoundStatement		158:73:6458:6458	692389	1					
ANR	693065	ExpressionStatement	"insert_free ( cmem , ( chunk_free_node_t * ) ( ( ( byte * ) obj ) + newsize ) , slab_size - newsize - SIZEOF_ROUND_ALIGN ( chunk_slab_t ) )"	917:16:29692:29811	692389	0	True				
ANR	693066	CallExpression	"insert_free ( cmem , ( chunk_free_node_t * ) ( ( ( byte * ) obj ) + newsize ) , slab_size - newsize - SIZEOF_ROUND_ALIGN ( chunk_slab_t ) )"		692389	0					
ANR	693067	Callee	insert_free		692389	0					
ANR	693068	Identifier	insert_free		692389	0					
ANR	693069	ArgumentList	cmem		692389	1					
ANR	693070	Argument	cmem		692389	0					
ANR	693071	Identifier	cmem		692389	0					
ANR	693072	Argument	( chunk_free_node_t * ) ( ( ( byte * ) obj ) + newsize )		692389	1					
ANR	693073	CastExpression	( chunk_free_node_t * ) ( ( ( byte * ) obj ) + newsize )		692389	0					
ANR	693074	CastTarget	chunk_free_node_t *		692389	0					
ANR	693075	AdditiveExpression	( ( byte * ) obj ) + newsize		692389	1		+			
ANR	693076	CastExpression	( byte * ) obj		692389	0					
ANR	693077	CastTarget	byte *		692389	0					
ANR	693078	Identifier	obj		692389	1					
ANR	693079	Identifier	newsize		692389	1					
ANR	693080	Argument	slab_size - newsize - SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	2					
ANR	693081	AdditiveExpression	slab_size - newsize - SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	0		-			
ANR	693082	Identifier	slab_size		692389	0					
ANR	693083	AdditiveExpression	newsize - SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1		-			
ANR	693084	Identifier	newsize		692389	0					
ANR	693085	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1					
ANR	693086	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693087	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693088	ArgumentList	chunk_slab_t		692389	1					
ANR	693089	Argument	chunk_slab_t		692389	0					
ANR	693090	Identifier	chunk_slab_t		692389	0					
ANR	693091	ExpressionStatement	cmem -> total_free += slab_size - newsize - SIZEOF_ROUND_ALIGN ( chunk_slab_t )	918:16:29829:29903	692389	1	True				
ANR	693092	AssignmentExpression	cmem -> total_free += slab_size - newsize - SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	0		+=			
ANR	693093	PtrMemberAccess	cmem -> total_free		692389	0					
ANR	693094	Identifier	cmem		692389	0					
ANR	693095	Identifier	total_free		692389	1					
ANR	693096	AdditiveExpression	slab_size - newsize - SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1		-			
ANR	693097	Identifier	slab_size		692389	0					
ANR	693098	AdditiveExpression	newsize - SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1		-			
ANR	693099	Identifier	newsize		692389	0					
ANR	693100	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_slab_t )		692389	1					
ANR	693101	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693102	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693103	ArgumentList	chunk_slab_t		692389	1					
ANR	693104	Argument	chunk_slab_t		692389	0					
ANR	693105	Identifier	chunk_slab_t		692389	0					
ANR	693106	ElseStatement	else		692389	0					
ANR	693107	CompoundStatement		163:12:6732:6760	692389	0					
ANR	693108	IdentifierDeclStatement	chunk_free_node_t * ok = * okp ;	921:12:29948:29976	692389	0	True				
ANR	693109	IdentifierDecl	* ok = * okp		692389	0					
ANR	693110	IdentifierDeclType	chunk_free_node_t *		692389	0					
ANR	693111	Identifier	ok		692389	1					
ANR	693112	AssignmentExpression	* ok = * okp		692389	2		=			
ANR	693113	Identifier	ok		692389	0					
ANR	693114	UnaryOperationExpression	* okp		692389	1					
ANR	693115	UnaryOperator	*		692389	0					
ANR	693116	Identifier	okp		692389	1					
ANR	693117	ExpressionStatement	obj = ( chunk_obj_node_t * ) ( void * ) ok	922:12:29990:30026	692389	1	True				
ANR	693118	AssignmentExpression	obj = ( chunk_obj_node_t * ) ( void * ) ok		692389	0		=			
ANR	693119	Identifier	obj		692389	0					
ANR	693120	CastExpression	( chunk_obj_node_t * ) ( void * ) ok		692389	1					
ANR	693121	CastTarget	chunk_obj_node_t *		692389	0					
ANR	693122	CastExpression	( void * ) ok		692389	1					
ANR	693123	CastTarget	void *		692389	0					
ANR	693124	Identifier	ok		692389	1					
ANR	693125	IfStatement	if ( ok -> size >= newsize + SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) )		692389	2					
ANR	693126	Condition	ok -> size >= newsize + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )	923:16:30044:30102	692389	0	True				
ANR	693127	RelationalExpression	ok -> size >= newsize + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		692389	0		>=			
ANR	693128	PtrMemberAccess	ok -> size		692389	0					
ANR	693129	Identifier	ok		692389	0					
ANR	693130	Identifier	size		692389	1					
ANR	693131	AdditiveExpression	newsize + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		692389	1		+			
ANR	693132	Identifier	newsize		692389	0					
ANR	693133	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		692389	1					
ANR	693134	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693135	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693136	ArgumentList	chunk_free_node_t		692389	1					
ANR	693137	Argument	chunk_free_node_t		692389	0					
ANR	693138	Identifier	chunk_free_node_t		692389	0					
ANR	693139	CompoundStatement		167:16:6996:7031	692389	1					
ANR	693140	IdentifierDeclStatement	chunk_free_node_t * tail = ( chunk_free_node_t * ) ( ( ( byte * ) ok ) + newsize ) ;	924:16:30123:30194	692389	0	True				
ANR	693141	IdentifierDecl	* tail = ( chunk_free_node_t * ) ( ( ( byte * ) ok ) + newsize )		692389	0					
ANR	693142	IdentifierDeclType	chunk_free_node_t *		692389	0					
ANR	693143	Identifier	tail		692389	1					
ANR	693144	AssignmentExpression	* tail = ( chunk_free_node_t * ) ( ( ( byte * ) ok ) + newsize )		692389	2		=			
ANR	693145	Identifier	tail		692389	0					
ANR	693146	CastExpression	( chunk_free_node_t * ) ( ( ( byte * ) ok ) + newsize )		692389	1					
ANR	693147	CastTarget	chunk_free_node_t *		692389	0					
ANR	693148	AdditiveExpression	( ( byte * ) ok ) + newsize		692389	1		+			
ANR	693149	CastExpression	( byte * ) ok		692389	0					
ANR	693150	CastTarget	byte *		692389	0					
ANR	693151	Identifier	ok		692389	1					
ANR	693152	Identifier	newsize		692389	1					
ANR	693153	IdentifierDeclStatement	uint tail_size = ok -> size - newsize ;	925:16:30212:30247	692389	1	True				
ANR	693154	IdentifierDecl	tail_size = ok -> size - newsize		692389	0					
ANR	693155	IdentifierDeclType	uint		692389	0					
ANR	693156	Identifier	tail_size		692389	1					
ANR	693157	AssignmentExpression	tail_size = ok -> size - newsize		692389	2		=			
ANR	693158	Identifier	tail_size		692389	0					
ANR	693159	AdditiveExpression	ok -> size - newsize		692389	1		-			
ANR	693160	PtrMemberAccess	ok -> size		692389	0					
ANR	693161	Identifier	ok		692389	0					
ANR	693162	Identifier	size		692389	1					
ANR	693163	Identifier	newsize		692389	1					
ANR	693164	ExpressionStatement	"remove_free_size_fast ( cmem , okp )"	926:16:30265:30297	692389	2	True				
ANR	693165	CallExpression	"remove_free_size_fast ( cmem , okp )"		692389	0					
ANR	693166	Callee	remove_free_size_fast		692389	0					
ANR	693167	Identifier	remove_free_size_fast		692389	0					
ANR	693168	ArgumentList	cmem		692389	1					
ANR	693169	Argument	cmem		692389	0					
ANR	693170	Identifier	cmem		692389	0					
ANR	693171	Argument	okp		692389	1					
ANR	693172	Identifier	okp		692389	0					
ANR	693173	ExpressionStatement	"remove_free_loc ( cmem , ok )"	927:16:30315:30340	692389	3	True				
ANR	693174	CallExpression	"remove_free_loc ( cmem , ok )"		692389	0					
ANR	693175	Callee	remove_free_loc		692389	0					
ANR	693176	Identifier	remove_free_loc		692389	0					
ANR	693177	ArgumentList	cmem		692389	1					
ANR	693178	Argument	cmem		692389	0					
ANR	693179	Identifier	cmem		692389	0					
ANR	693180	Argument	ok		692389	1					
ANR	693181	Identifier	ok		692389	0					
ANR	693182	ExpressionStatement	"insert_free ( cmem , tail , tail_size )"	928:16:30358:30392	692389	4	True				
ANR	693183	CallExpression	"insert_free ( cmem , tail , tail_size )"		692389	0					
ANR	693184	Callee	insert_free		692389	0					
ANR	693185	Identifier	insert_free		692389	0					
ANR	693186	ArgumentList	cmem		692389	1					
ANR	693187	Argument	cmem		692389	0					
ANR	693188	Identifier	cmem		692389	0					
ANR	693189	Argument	tail		692389	1					
ANR	693190	Identifier	tail		692389	0					
ANR	693191	Argument	tail_size		692389	2					
ANR	693192	Identifier	tail_size		692389	0					
ANR	693193	ElseStatement	else		692389	0					
ANR	693194	CompoundStatement		171:19:7197:7197	692389	0					
ANR	693195	ExpressionStatement	newsize = ok -> size	930:16:30431:30449	692389	0	True				
ANR	693196	AssignmentExpression	newsize = ok -> size		692389	0		=			
ANR	693197	Identifier	newsize		692389	0					
ANR	693198	PtrMemberAccess	ok -> size		692389	1					
ANR	693199	Identifier	ok		692389	0					
ANR	693200	Identifier	size		692389	1					
ANR	693201	ExpressionStatement	"remove_free_size_fast ( cmem , okp )"	931:16:30467:30499	692389	1	True				
ANR	693202	CallExpression	"remove_free_size_fast ( cmem , okp )"		692389	0					
ANR	693203	Callee	remove_free_size_fast		692389	0					
ANR	693204	Identifier	remove_free_size_fast		692389	0					
ANR	693205	ArgumentList	cmem		692389	1					
ANR	693206	Argument	cmem		692389	0					
ANR	693207	Identifier	cmem		692389	0					
ANR	693208	Argument	okp		692389	1					
ANR	693209	Identifier	okp		692389	0					
ANR	693210	ExpressionStatement	"remove_free_loc ( cmem , ok )"	932:16:30517:30542	692389	2	True				
ANR	693211	CallExpression	"remove_free_loc ( cmem , ok )"		692389	0					
ANR	693212	Callee	remove_free_loc		692389	0					
ANR	693213	Identifier	remove_free_loc		692389	0					
ANR	693214	ArgumentList	cmem		692389	1					
ANR	693215	Argument	cmem		692389	0					
ANR	693216	Identifier	cmem		692389	0					
ANR	693217	Argument	ok		692389	1					
ANR	693218	Identifier	ok		692389	0					
ANR	693219	ExpressionStatement	cmem -> total_free -= newsize	934:12:30570:30597	692389	3	True				
ANR	693220	AssignmentExpression	cmem -> total_free -= newsize		692389	0		-=			
ANR	693221	PtrMemberAccess	cmem -> total_free		692389	0					
ANR	693222	Identifier	cmem		692389	0					
ANR	693223	Identifier	total_free		692389	1					
ANR	693224	Identifier	newsize		692389	1					
ANR	693225	IfStatement	if ( gs_alloc_debug )		692389	11					
ANR	693226	Condition	gs_alloc_debug	938:8:30624:30637	692389	0	True				
ANR	693227	Identifier	gs_alloc_debug		692389	0					
ANR	693228	CompoundStatement		180:24:7424:7424	692389	1					
ANR	693229	ExpressionStatement	"memset ( ( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) , 0xa1 , newsize - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )"	939:8:30650:30764	692389	0	True				
ANR	693230	CallExpression	"memset ( ( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) , 0xa1 , newsize - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )"		692389	0					
ANR	693231	Callee	memset		692389	0					
ANR	693232	Identifier	memset		692389	0					
ANR	693233	ArgumentList	( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693234	Argument	( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	0					
ANR	693235	CastExpression	( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	0					
ANR	693236	CastTarget	byte *		692389	0					
ANR	693237	CastExpression	( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693238	CastTarget	obj		692389	0					
ANR	693239	UnaryOperationExpression	+ SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693240	UnaryOperator	+		692389	0					
ANR	693241	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693242	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693243	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693244	ArgumentList	chunk_obj_node_t		692389	1					
ANR	693245	Argument	chunk_obj_node_t		692389	0					
ANR	693246	Identifier	chunk_obj_node_t		692389	0					
ANR	693247	Argument	0xa1		692389	1					
ANR	693248	PrimaryExpression	0xa1		692389	0					
ANR	693249	Argument	newsize - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	2					
ANR	693250	AdditiveExpression	newsize - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	0		-			
ANR	693251	Identifier	newsize		692389	0					
ANR	693252	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693253	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693254	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693255	ArgumentList	chunk_obj_node_t		692389	1					
ANR	693256	Argument	chunk_obj_node_t		692389	0					
ANR	693257	Identifier	chunk_obj_node_t		692389	0					
ANR	693258	ExpressionStatement	"memset ( ( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) , 0xac , size )"	940:8:30774:30846	692389	1	True				
ANR	693259	CallExpression	"memset ( ( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) , 0xac , size )"		692389	0					
ANR	693260	Callee	memset		692389	0					
ANR	693261	Identifier	memset		692389	0					
ANR	693262	ArgumentList	( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693263	Argument	( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	0					
ANR	693264	CastExpression	( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	0					
ANR	693265	CastTarget	byte *		692389	0					
ANR	693266	CastExpression	( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693267	CastTarget	obj		692389	0					
ANR	693268	UnaryOperationExpression	+ SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693269	UnaryOperator	+		692389	0					
ANR	693270	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693271	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693272	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693273	ArgumentList	chunk_obj_node_t		692389	1					
ANR	693274	Argument	chunk_obj_node_t		692389	0					
ANR	693275	Identifier	chunk_obj_node_t		692389	0					
ANR	693276	Argument	0xac		692389	1					
ANR	693277	PrimaryExpression	0xac		692389	0					
ANR	693278	Argument	size		692389	2					
ANR	693279	Identifier	size		692389	0					
ANR	693280	ExpressionStatement	obj -> size = newsize	943:4:30859:30878	692389	12	True				
ANR	693281	AssignmentExpression	obj -> size = newsize		692389	0		=			
ANR	693282	PtrMemberAccess	obj -> size		692389	0					
ANR	693283	Identifier	obj		692389	0					
ANR	693284	Identifier	size		692389	1					
ANR	693285	Identifier	newsize		692389	1					
ANR	693286	ExpressionStatement	obj -> padding = newsize - size	944:4:30902:30931	692389	13	True				
ANR	693287	AssignmentExpression	obj -> padding = newsize - size		692389	0		=			
ANR	693288	PtrMemberAccess	obj -> padding		692389	0					
ANR	693289	Identifier	obj		692389	0					
ANR	693290	Identifier	padding		692389	1					
ANR	693291	AdditiveExpression	newsize - size		692389	1		-			
ANR	693292	Identifier	newsize		692389	0					
ANR	693293	Identifier	size		692389	1					
ANR	693294	ExpressionStatement	obj -> type = type	945:4:30979:30995	692389	14	True				
ANR	693295	AssignmentExpression	obj -> type = type		692389	0		=			
ANR	693296	PtrMemberAccess	obj -> type		692389	0					
ANR	693297	Identifier	obj		692389	0					
ANR	693298	Identifier	type		692389	1					
ANR	693299	Identifier	type		692389	1					
ANR	693300	ExpressionStatement	obj -> defer_next = NULL	946:4:31034:31056	692389	15	True				
ANR	693301	AssignmentExpression	obj -> defer_next = NULL		692389	0		=			
ANR	693302	PtrMemberAccess	obj -> defer_next		692389	0					
ANR	693303	Identifier	obj		692389	0					
ANR	693304	Identifier	defer_next		692389	1					
ANR	693305	Identifier	NULL		692389	1					
ANR	693306	ExpressionStatement	obj -> sequence = cmem -> sequence	949:4:31080:31110	692389	16	True				
ANR	693307	AssignmentExpression	obj -> sequence = cmem -> sequence		692389	0		=			
ANR	693308	PtrMemberAccess	obj -> sequence		692389	0					
ANR	693309	Identifier	obj		692389	0					
ANR	693310	Identifier	sequence		692389	1					
ANR	693311	PtrMemberAccess	cmem -> sequence		692389	1					
ANR	693312	Identifier	cmem		692389	0					
ANR	693313	Identifier	sequence		692389	1					
ANR	693314	IfStatement	if ( gs_debug_c ( 'A' ) )		692389	17					
ANR	693315	Condition	gs_debug_c ( 'A' )	951:8:31127:31141	692389	0	True				
ANR	693316	CallExpression	gs_debug_c ( 'A' )		692389	0					
ANR	693317	Callee	gs_debug_c		692389	0					
ANR	693318	Identifier	gs_debug_c		692389	0					
ANR	693319	ArgumentList	'A'		692389	1					
ANR	693320	Argument	'A'		692389	0					
ANR	693321	PrimaryExpression	'A'		692389	0					
ANR	693322	ExpressionStatement	"dmlprintf3 ( mem , ""[a+]chunk_obj_alloc (%s)(%u) = 0x%lx: OK.\\n"" , client_name_string ( cname ) , size , ( ulong ) obj )"	952:8:31152:31279	692389	1	True				
ANR	693323	CallExpression	"dmlprintf3 ( mem , ""[a+]chunk_obj_alloc (%s)(%u) = 0x%lx: OK.\\n"" , client_name_string ( cname ) , size , ( ulong ) obj )"		692389	0					
ANR	693324	Callee	dmlprintf3		692389	0					
ANR	693325	Identifier	dmlprintf3		692389	0					
ANR	693326	ArgumentList	mem		692389	1					
ANR	693327	Argument	mem		692389	0					
ANR	693328	Identifier	mem		692389	0					
ANR	693329	Argument	"""[a+]chunk_obj_alloc (%s)(%u) = 0x%lx: OK.\\n"""		692389	1					
ANR	693330	PrimaryExpression	"""[a+]chunk_obj_alloc (%s)(%u) = 0x%lx: OK.\\n"""		692389	0					
ANR	693331	Argument	client_name_string ( cname )		692389	2					
ANR	693332	CallExpression	client_name_string ( cname )		692389	0					
ANR	693333	Callee	client_name_string		692389	0					
ANR	693334	Identifier	client_name_string		692389	0					
ANR	693335	ArgumentList	cname		692389	1					
ANR	693336	Argument	cname		692389	0					
ANR	693337	Identifier	cname		692389	0					
ANR	693338	Argument	size		692389	3					
ANR	693339	Identifier	size		692389	0					
ANR	693340	Argument	( ulong ) obj		692389	4					
ANR	693341	CastExpression	( ulong ) obj		692389	0					
ANR	693342	CastTarget	ulong		692389	0					
ANR	693343	Identifier	obj		692389	1					
ANR	693344	ExpressionStatement	"dmlprintf5 ( cmem -> target , ""Event %x: malloced(chunk=%p, addr=%p, size=%x, cname=%s)\\n"" , obj -> sequence , cmem , obj , obj -> size , cname )"	956:4:31327:31457	692389	18	True				
ANR	693345	CallExpression	"dmlprintf5 ( cmem -> target , ""Event %x: malloced(chunk=%p, addr=%p, size=%x, cname=%s)\\n"" , obj -> sequence , cmem , obj , obj -> size , cname )"		692389	0					
ANR	693346	Callee	dmlprintf5		692389	0					
ANR	693347	Identifier	dmlprintf5		692389	0					
ANR	693348	ArgumentList	cmem -> target		692389	1					
ANR	693349	Argument	cmem -> target		692389	0					
ANR	693350	PtrMemberAccess	cmem -> target		692389	0					
ANR	693351	Identifier	cmem		692389	0					
ANR	693352	Identifier	target		692389	1					
ANR	693353	Argument	"""Event %x: malloced(chunk=%p, addr=%p, size=%x, cname=%s)\\n"""		692389	1					
ANR	693354	PrimaryExpression	"""Event %x: malloced(chunk=%p, addr=%p, size=%x, cname=%s)\\n"""		692389	0					
ANR	693355	Argument	obj -> sequence		692389	2					
ANR	693356	PtrMemberAccess	obj -> sequence		692389	0					
ANR	693357	Identifier	obj		692389	0					
ANR	693358	Identifier	sequence		692389	1					
ANR	693359	Argument	cmem		692389	3					
ANR	693360	Identifier	cmem		692389	0					
ANR	693361	Argument	obj		692389	4					
ANR	693362	Identifier	obj		692389	0					
ANR	693363	Argument	obj -> size		692389	5					
ANR	693364	PtrMemberAccess	obj -> size		692389	0					
ANR	693365	Identifier	obj		692389	0					
ANR	693366	Identifier	size		692389	1					
ANR	693367	Argument	cname		692389	6					
ANR	693368	Identifier	cname		692389	0					
ANR	693369	ExpressionStatement	gs_memory_chunk_dump_memory ( cmem )	962:4:31613:31646	692389	19	True				
ANR	693370	CallExpression	gs_memory_chunk_dump_memory ( cmem )		692389	0					
ANR	693371	Callee	gs_memory_chunk_dump_memory		692389	0					
ANR	693372	Identifier	gs_memory_chunk_dump_memory		692389	0					
ANR	693373	ArgumentList	cmem		692389	1					
ANR	693374	Argument	cmem		692389	0					
ANR	693375	Identifier	cmem		692389	0					
ANR	693376	ReturnStatement	return ( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) ;	965:4:31660:31719	692389	20	True				
ANR	693377	CastExpression	( byte * ) ( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	0					
ANR	693378	CastTarget	byte *		692389	0					
ANR	693379	CastExpression	( obj ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693380	CastTarget	obj		692389	0					
ANR	693381	UnaryOperationExpression	+ SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693382	UnaryOperator	+		692389	0					
ANR	693383	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		692389	1					
ANR	693384	Callee	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693385	Identifier	SIZEOF_ROUND_ALIGN		692389	0					
ANR	693386	ArgumentList	chunk_obj_node_t		692389	1					
ANR	693387	Argument	chunk_obj_node_t		692389	0					
ANR	693388	Identifier	chunk_obj_node_t		692389	0					
ANR	693389	ReturnType	static byte *		692389	1					
ANR	693390	Identifier	chunk_obj_alloc		692389	2					
ANR	693391	ParameterList	"gs_memory_t * mem , uint size , gs_memory_type_ptr_t type , client_name_t cname"		692389	3					
ANR	693392	Parameter	gs_memory_t * mem	758:16:23138:23153	692389	0	True				
ANR	693393	ParameterType	gs_memory_t *		692389	0					
ANR	693394	Identifier	mem		692389	1					
ANR	693395	Parameter	uint size	758:34:23156:23164	692389	1	True				
ANR	693396	ParameterType	uint		692389	0					
ANR	693397	Identifier	size		692389	1					
ANR	693398	Parameter	gs_memory_type_ptr_t type	758:45:23167:23191	692389	2	True				
ANR	693399	ParameterType	gs_memory_type_ptr_t		692389	0					
ANR	693400	Identifier	type		692389	1					
ANR	693401	Parameter	client_name_t cname	758:72:23194:23212	692389	3	True				
ANR	693402	ParameterType	client_name_t		692389	0					
ANR	693403	Identifier	cname		692389	1					
ANR	693404	CFGEntryNode	ENTRY		692389		True				
ANR	693405	CFGExitNode	EXIT		692389		True				
ANR	693406	Symbol	a -> size		692389						
ANR	693407	Symbol	* ok		692389						
ANR	693408	Symbol	chunk_free_node_t		692389						
ANR	693409	Symbol	c -> size		692389						
ANR	693410	Symbol	gs_alloc_debug		692389						
ANR	693411	Symbol	type		692389						
ANR	693412	Symbol	cmem -> sequence		692389						
ANR	693413	Symbol	CHUNK_SIZE		692389						
ANR	693414	Symbol	slab		692389						
ANR	693415	Symbol	SINGLE_OBJECT_CHUNK		692389						
ANR	693416	Symbol	okp		692389						
ANR	693417	Symbol	round_up_to_align		692389						
ANR	693418	Symbol	c -> right_size		692389						
ANR	693419	Symbol	ok -> size		692389						
ANR	693420	Symbol	gs_debug_c		692389						
ANR	693421	Symbol	obj -> type		692389						
ANR	693422	Symbol	NULL		692389						
ANR	693423	Symbol	& a -> right_size		692389						
ANR	693424	Symbol	newsize		692389						
ANR	693425	Symbol	slab -> next		692389						
ANR	693426	Symbol	ap		692389						
ANR	693427	Symbol	& cmem -> free_size		692389						
ANR	693428	Symbol	size		692389						
ANR	693429	Symbol	SIZEOF_ROUND_ALIGN		692389						
ANR	693430	Symbol	& c -> left_size		692389						
ANR	693431	Symbol	& b -> left_size		692389						
ANR	693432	Symbol	client_name_string		692389						
ANR	693433	Symbol	cmem		692389						
ANR	693434	Symbol	& a -> left_size		692389						
ANR	693435	Symbol	chunk_slab_t		692389						
ANR	693436	Symbol	slab_size		692389						
ANR	693437	Symbol	& b -> right_size		692389						
ANR	693438	Symbol	b -> size		692389						
ANR	693439	Symbol	cname		692389						
ANR	693440	Symbol	cmem -> total_free		692389						
ANR	693441	Symbol	cmem -> slabs		692389						
ANR	693442	Symbol	mem		692389						
ANR	693443	Symbol	gs_alloc_bytes_immovable		692389						
ANR	693444	Symbol	* slab		692389						
ANR	693445	Symbol	* cmem		692389						
ANR	693446	Symbol	chunk_obj_node_t		692389						
ANR	693447	Symbol	cmem -> target		692389						
ANR	693448	Symbol	ok		692389						
ANR	693449	Symbol	obj -> sequence		692389						
ANR	693450	Symbol	a -> right_size		692389						
ANR	693451	Symbol	a -> left_size		692389						
ANR	693452	Symbol	a		692389						
ANR	693453	Symbol	* obj		692389						
ANR	693454	Symbol	b		692389						
ANR	693455	Symbol	c -> left_size		692389						
ANR	693456	Symbol	obj -> padding		692389						
ANR	693457	Symbol	c		692389						
ANR	693458	Symbol	tail		692389						
ANR	693459	Symbol	obj -> size		692389						
ANR	693460	Symbol	& c -> right_size		692389						
ANR	693461	Symbol	* a		692389						
ANR	693462	Symbol	* b		692389						
ANR	693463	Symbol	* c		692389						
ANR	693464	Symbol	tail_size		692389						
ANR	693465	Symbol	b -> left_size		692389						
ANR	693466	Symbol	obj -> defer_next		692389						
ANR	693467	Symbol	b -> right_size		692389						
ANR	693468	Symbol	obj		692389						
ANR	693469	Symbol	* ap		692389						
ANR	693470	Symbol	* okp		692389						
ANR	693471	Function	chunk_alloc_bytes_immovable	968:0:31724:31876							
ANR	693472	FunctionDef	"chunk_alloc_bytes_immovable (gs_memory_t * mem , uint size , client_name_t cname)"		693471	0					
ANR	693473	CompoundStatement		970:0:31817:31876	693471	0					
ANR	693474	ReturnStatement	"return chunk_obj_alloc ( mem , size , & st_bytes , cname ) ;"	971:4:31823:31874	693471	0	True				
ANR	693475	CallExpression	"chunk_obj_alloc ( mem , size , & st_bytes , cname )"		693471	0					
ANR	693476	Callee	chunk_obj_alloc		693471	0					
ANR	693477	Identifier	chunk_obj_alloc		693471	0					
ANR	693478	ArgumentList	mem		693471	1					
ANR	693479	Argument	mem		693471	0					
ANR	693480	Identifier	mem		693471	0					
ANR	693481	Argument	size		693471	1					
ANR	693482	Identifier	size		693471	0					
ANR	693483	Argument	& st_bytes		693471	2					
ANR	693484	UnaryOperationExpression	& st_bytes		693471	0					
ANR	693485	UnaryOperator	&		693471	0					
ANR	693486	Identifier	st_bytes		693471	1					
ANR	693487	Argument	cname		693471	3					
ANR	693488	Identifier	cname		693471	0					
ANR	693489	ReturnType	static byte *		693471	1					
ANR	693490	Identifier	chunk_alloc_bytes_immovable		693471	2					
ANR	693491	ParameterList	"gs_memory_t * mem , uint size , client_name_t cname"		693471	3					
ANR	693492	Parameter	gs_memory_t * mem	969:28:31766:31782	693471	0	True				
ANR	693493	ParameterType	gs_memory_t *		693471	0					
ANR	693494	Identifier	mem		693471	1					
ANR	693495	Parameter	uint size	969:47:31785:31793	693471	1	True				
ANR	693496	ParameterType	uint		693471	0					
ANR	693497	Identifier	size		693471	1					
ANR	693498	Parameter	client_name_t cname	969:58:31796:31814	693471	2	True				
ANR	693499	ParameterType	client_name_t		693471	0					
ANR	693500	Identifier	cname		693471	1					
ANR	693501	CFGEntryNode	ENTRY		693471		True				
ANR	693502	CFGExitNode	EXIT		693471		True				
ANR	693503	Symbol	mem		693471						
ANR	693504	Symbol	size		693471						
ANR	693505	Symbol	chunk_obj_alloc		693471						
ANR	693506	Symbol	cname		693471						
ANR	693507	Symbol	& st_bytes		693471						
ANR	693508	Function	chunk_alloc_bytes	974:0:31879:32021							
ANR	693509	FunctionDef	"chunk_alloc_bytes (gs_memory_t * mem , uint size , client_name_t cname)"		693508	0					
ANR	693510	CompoundStatement		976:0:31962:32021	693508	0					
ANR	693511	ReturnStatement	"return chunk_obj_alloc ( mem , size , & st_bytes , cname ) ;"	977:4:31968:32019	693508	0	True				
ANR	693512	CallExpression	"chunk_obj_alloc ( mem , size , & st_bytes , cname )"		693508	0					
ANR	693513	Callee	chunk_obj_alloc		693508	0					
ANR	693514	Identifier	chunk_obj_alloc		693508	0					
ANR	693515	ArgumentList	mem		693508	1					
ANR	693516	Argument	mem		693508	0					
ANR	693517	Identifier	mem		693508	0					
ANR	693518	Argument	size		693508	1					
ANR	693519	Identifier	size		693508	0					
ANR	693520	Argument	& st_bytes		693508	2					
ANR	693521	UnaryOperationExpression	& st_bytes		693508	0					
ANR	693522	UnaryOperator	&		693508	0					
ANR	693523	Identifier	st_bytes		693508	1					
ANR	693524	Argument	cname		693508	3					
ANR	693525	Identifier	cname		693508	0					
ANR	693526	ReturnType	static byte *		693508	1					
ANR	693527	Identifier	chunk_alloc_bytes		693508	2					
ANR	693528	ParameterList	"gs_memory_t * mem , uint size , client_name_t cname"		693508	3					
ANR	693529	Parameter	gs_memory_t * mem	975:18:31911:31927	693508	0	True				
ANR	693530	ParameterType	gs_memory_t *		693508	0					
ANR	693531	Identifier	mem		693508	1					
ANR	693532	Parameter	uint size	975:37:31930:31938	693508	1	True				
ANR	693533	ParameterType	uint		693508	0					
ANR	693534	Identifier	size		693508	1					
ANR	693535	Parameter	client_name_t cname	975:48:31941:31959	693508	2	True				
ANR	693536	ParameterType	client_name_t		693508	0					
ANR	693537	Identifier	cname		693508	1					
ANR	693538	CFGEntryNode	ENTRY		693508		True				
ANR	693539	CFGExitNode	EXIT		693508		True				
ANR	693540	Symbol	mem		693508						
ANR	693541	Symbol	size		693508						
ANR	693542	Symbol	chunk_obj_alloc		693508						
ANR	693543	Symbol	cname		693508						
ANR	693544	Symbol	& st_bytes		693508						
ANR	693545	Function	chunk_alloc_struct_immovable	980:0:32024:32226							
ANR	693546	FunctionDef	"chunk_alloc_struct_immovable (gs_memory_t * mem , gs_memory_type_ptr_t pstype , client_name_t cname)"		693545	0					
ANR	693547	CompoundStatement		983:0:32161:32226	693545	0					
ANR	693548	ReturnStatement	"return chunk_obj_alloc ( mem , pstype -> ssize , pstype , cname ) ;"	984:4:32167:32224	693545	0	True				
ANR	693549	CallExpression	"chunk_obj_alloc ( mem , pstype -> ssize , pstype , cname )"		693545	0					
ANR	693550	Callee	chunk_obj_alloc		693545	0					
ANR	693551	Identifier	chunk_obj_alloc		693545	0					
ANR	693552	ArgumentList	mem		693545	1					
ANR	693553	Argument	mem		693545	0					
ANR	693554	Identifier	mem		693545	0					
ANR	693555	Argument	pstype -> ssize		693545	1					
ANR	693556	PtrMemberAccess	pstype -> ssize		693545	0					
ANR	693557	Identifier	pstype		693545	0					
ANR	693558	Identifier	ssize		693545	1					
ANR	693559	Argument	pstype		693545	2					
ANR	693560	Identifier	pstype		693545	0					
ANR	693561	Argument	cname		693545	3					
ANR	693562	Identifier	cname		693545	0					
ANR	693563	ReturnType	static void *		693545	1					
ANR	693564	Identifier	chunk_alloc_struct_immovable		693545	2					
ANR	693565	ParameterList	"gs_memory_t * mem , gs_memory_type_ptr_t pstype , client_name_t cname"		693545	3					
ANR	693566	Parameter	gs_memory_t * mem	981:29:32067:32083	693545	0	True				
ANR	693567	ParameterType	gs_memory_t *		693545	0					
ANR	693568	Identifier	mem		693545	1					
ANR	693569	Parameter	gs_memory_type_ptr_t pstype	981:48:32086:32112	693545	1	True				
ANR	693570	ParameterType	gs_memory_type_ptr_t		693545	0					
ANR	693571	Identifier	pstype		693545	1					
ANR	693572	Parameter	client_name_t cname	982:25:32140:32158	693545	2	True				
ANR	693573	ParameterType	client_name_t		693545	0					
ANR	693574	Identifier	cname		693545	1					
ANR	693575	CFGEntryNode	ENTRY		693545		True				
ANR	693576	CFGExitNode	EXIT		693545		True				
ANR	693577	Symbol	pstype -> ssize		693545						
ANR	693578	Symbol	* pstype		693545						
ANR	693579	Symbol	mem		693545						
ANR	693580	Symbol	pstype		693545						
ANR	693581	Symbol	chunk_obj_alloc		693545						
ANR	693582	Symbol	cname		693545						
ANR	693583	Function	chunk_alloc_struct	987:0:32229:32411							
ANR	693584	FunctionDef	"chunk_alloc_struct (gs_memory_t * mem , gs_memory_type_ptr_t pstype , client_name_t cname)"		693583	0					
ANR	693585	CompoundStatement		990:0:32346:32411	693583	0					
ANR	693586	ReturnStatement	"return chunk_obj_alloc ( mem , pstype -> ssize , pstype , cname ) ;"	991:4:32352:32409	693583	0	True				
ANR	693587	CallExpression	"chunk_obj_alloc ( mem , pstype -> ssize , pstype , cname )"		693583	0					
ANR	693588	Callee	chunk_obj_alloc		693583	0					
ANR	693589	Identifier	chunk_obj_alloc		693583	0					
ANR	693590	ArgumentList	mem		693583	1					
ANR	693591	Argument	mem		693583	0					
ANR	693592	Identifier	mem		693583	0					
ANR	693593	Argument	pstype -> ssize		693583	1					
ANR	693594	PtrMemberAccess	pstype -> ssize		693583	0					
ANR	693595	Identifier	pstype		693583	0					
ANR	693596	Identifier	ssize		693583	1					
ANR	693597	Argument	pstype		693583	2					
ANR	693598	Identifier	pstype		693583	0					
ANR	693599	Argument	cname		693583	3					
ANR	693600	Identifier	cname		693583	0					
ANR	693601	ReturnType	static void *		693583	1					
ANR	693602	Identifier	chunk_alloc_struct		693583	2					
ANR	693603	ParameterList	"gs_memory_t * mem , gs_memory_type_ptr_t pstype , client_name_t cname"		693583	3					
ANR	693604	Parameter	gs_memory_t * mem	988:19:32262:32278	693583	0	True				
ANR	693605	ParameterType	gs_memory_t *		693583	0					
ANR	693606	Identifier	mem		693583	1					
ANR	693607	Parameter	gs_memory_type_ptr_t pstype	988:38:32281:32307	693583	1	True				
ANR	693608	ParameterType	gs_memory_type_ptr_t		693583	0					
ANR	693609	Identifier	pstype		693583	1					
ANR	693610	Parameter	client_name_t cname	989:15:32325:32343	693583	2	True				
ANR	693611	ParameterType	client_name_t		693583	0					
ANR	693612	Identifier	cname		693583	1					
ANR	693613	CFGEntryNode	ENTRY		693583		True				
ANR	693614	CFGExitNode	EXIT		693583		True				
ANR	693615	Symbol	pstype -> ssize		693583						
ANR	693616	Symbol	* pstype		693583						
ANR	693617	Symbol	mem		693583						
ANR	693618	Symbol	pstype		693583						
ANR	693619	Symbol	chunk_obj_alloc		693583						
ANR	693620	Symbol	cname		693583						
ANR	693621	Function	chunk_alloc_byte_array_immovable	994:0:32414:32633							
ANR	693622	FunctionDef	"chunk_alloc_byte_array_immovable (gs_memory_t * mem , uint num_elements , uint elt_size , client_name_t cname)"		693621	0					
ANR	693623	CompoundStatement		997:0:32564:32633	693621	0					
ANR	693624	ReturnStatement	"return chunk_alloc_bytes ( mem , num_elements * elt_size , cname ) ;"	998:4:32570:32631	693621	0	True				
ANR	693625	CallExpression	"chunk_alloc_bytes ( mem , num_elements * elt_size , cname )"		693621	0					
ANR	693626	Callee	chunk_alloc_bytes		693621	0					
ANR	693627	Identifier	chunk_alloc_bytes		693621	0					
ANR	693628	ArgumentList	mem		693621	1					
ANR	693629	Argument	mem		693621	0					
ANR	693630	Identifier	mem		693621	0					
ANR	693631	Argument	num_elements * elt_size		693621	1					
ANR	693632	MultiplicativeExpression	num_elements * elt_size		693621	0		*			
ANR	693633	Identifier	num_elements		693621	0					
ANR	693634	Identifier	elt_size		693621	1					
ANR	693635	Argument	cname		693621	2					
ANR	693636	Identifier	cname		693621	0					
ANR	693637	ReturnType	static byte *		693621	1					
ANR	693638	Identifier	chunk_alloc_byte_array_immovable		693621	2					
ANR	693639	ParameterList	"gs_memory_t * mem , uint num_elements , uint elt_size , client_name_t cname"		693621	3					
ANR	693640	Parameter	gs_memory_t * mem	995:33:32461:32477	693621	0	True				
ANR	693641	ParameterType	gs_memory_t *		693621	0					
ANR	693642	Identifier	mem		693621	1					
ANR	693643	Parameter	uint num_elements	995:52:32480:32496	693621	1	True				
ANR	693644	ParameterType	uint		693621	0					
ANR	693645	Identifier	num_elements		693621	1					
ANR	693646	Parameter	uint elt_size	996:29:32528:32540	693621	2	True				
ANR	693647	ParameterType	uint		693621	0					
ANR	693648	Identifier	elt_size		693621	1					
ANR	693649	Parameter	client_name_t cname	996:44:32543:32561	693621	3	True				
ANR	693650	ParameterType	client_name_t		693621	0					
ANR	693651	Identifier	cname		693621	1					
ANR	693652	CFGEntryNode	ENTRY		693621		True				
ANR	693653	CFGExitNode	EXIT		693621		True				
ANR	693654	Symbol	chunk_alloc_bytes		693621						
ANR	693655	Symbol	mem		693621						
ANR	693656	Symbol	num_elements		693621						
ANR	693657	Symbol	cname		693621						
ANR	693658	Symbol	elt_size		693621						
ANR	693659	Function	chunk_alloc_byte_array	1001:0:32636:32835							
ANR	693660	FunctionDef	"chunk_alloc_byte_array (gs_memory_t * mem , uint num_elements , uint elt_size , client_name_t cname)"		693659	0					
ANR	693661	CompoundStatement		1004:0:32766:32835	693659	0					
ANR	693662	ReturnStatement	"return chunk_alloc_bytes ( mem , num_elements * elt_size , cname ) ;"	1005:4:32772:32833	693659	0	True				
ANR	693663	CallExpression	"chunk_alloc_bytes ( mem , num_elements * elt_size , cname )"		693659	0					
ANR	693664	Callee	chunk_alloc_bytes		693659	0					
ANR	693665	Identifier	chunk_alloc_bytes		693659	0					
ANR	693666	ArgumentList	mem		693659	1					
ANR	693667	Argument	mem		693659	0					
ANR	693668	Identifier	mem		693659	0					
ANR	693669	Argument	num_elements * elt_size		693659	1					
ANR	693670	MultiplicativeExpression	num_elements * elt_size		693659	0		*			
ANR	693671	Identifier	num_elements		693659	0					
ANR	693672	Identifier	elt_size		693659	1					
ANR	693673	Argument	cname		693659	2					
ANR	693674	Identifier	cname		693659	0					
ANR	693675	ReturnType	static byte *		693659	1					
ANR	693676	Identifier	chunk_alloc_byte_array		693659	2					
ANR	693677	ParameterList	"gs_memory_t * mem , uint num_elements , uint elt_size , client_name_t cname"		693659	3					
ANR	693678	Parameter	gs_memory_t * mem	1002:23:32673:32689	693659	0	True				
ANR	693679	ParameterType	gs_memory_t *		693659	0					
ANR	693680	Identifier	mem		693659	1					
ANR	693681	Parameter	uint num_elements	1002:42:32692:32708	693659	1	True				
ANR	693682	ParameterType	uint		693659	0					
ANR	693683	Identifier	num_elements		693659	1					
ANR	693684	Parameter	uint elt_size	1002:61:32711:32723	693659	2	True				
ANR	693685	ParameterType	uint		693659	0					
ANR	693686	Identifier	elt_size		693659	1					
ANR	693687	Parameter	client_name_t cname	1003:19:32745:32763	693659	3	True				
ANR	693688	ParameterType	client_name_t		693659	0					
ANR	693689	Identifier	cname		693659	1					
ANR	693690	CFGEntryNode	ENTRY		693659		True				
ANR	693691	CFGExitNode	EXIT		693659		True				
ANR	693692	Symbol	chunk_alloc_bytes		693659						
ANR	693693	Symbol	mem		693659						
ANR	693694	Symbol	num_elements		693659						
ANR	693695	Symbol	cname		693659						
ANR	693696	Symbol	elt_size		693659						
ANR	693697	Function	chunk_alloc_struct_array_immovable	1008:0:32838:33082							
ANR	693698	FunctionDef	"chunk_alloc_struct_array_immovable (gs_memory_t * mem , uint num_elements , gs_memory_type_ptr_t pstype , client_name_t cname)"		693697	0					
ANR	693699	CompoundStatement		1011:0:33002:33082	693697	0					
ANR	693700	ReturnStatement	"return chunk_obj_alloc ( mem , num_elements * pstype -> ssize , pstype , cname ) ;"	1012:4:33008:33080	693697	0	True				
ANR	693701	CallExpression	"chunk_obj_alloc ( mem , num_elements * pstype -> ssize , pstype , cname )"		693697	0					
ANR	693702	Callee	chunk_obj_alloc		693697	0					
ANR	693703	Identifier	chunk_obj_alloc		693697	0					
ANR	693704	ArgumentList	mem		693697	1					
ANR	693705	Argument	mem		693697	0					
ANR	693706	Identifier	mem		693697	0					
ANR	693707	Argument	num_elements * pstype -> ssize		693697	1					
ANR	693708	MultiplicativeExpression	num_elements * pstype -> ssize		693697	0		*			
ANR	693709	Identifier	num_elements		693697	0					
ANR	693710	PtrMemberAccess	pstype -> ssize		693697	1					
ANR	693711	Identifier	pstype		693697	0					
ANR	693712	Identifier	ssize		693697	1					
ANR	693713	Argument	pstype		693697	2					
ANR	693714	Identifier	pstype		693697	0					
ANR	693715	Argument	cname		693697	3					
ANR	693716	Identifier	cname		693697	0					
ANR	693717	ReturnType	static void *		693697	1					
ANR	693718	Identifier	chunk_alloc_struct_array_immovable		693697	2					
ANR	693719	ParameterList	"gs_memory_t * mem , uint num_elements , gs_memory_type_ptr_t pstype , client_name_t cname"		693697	3					
ANR	693720	Parameter	gs_memory_t * mem	1009:35:32887:32903	693697	0	True				
ANR	693721	ParameterType	gs_memory_t *		693697	0					
ANR	693722	Identifier	mem		693697	1					
ANR	693723	Parameter	uint num_elements	1009:54:32906:32922	693697	1	True				
ANR	693724	ParameterType	uint		693697	0					
ANR	693725	Identifier	num_elements		693697	1					
ANR	693726	Parameter	gs_memory_type_ptr_t pstype	1010:27:32952:32978	693697	2	True				
ANR	693727	ParameterType	gs_memory_type_ptr_t		693697	0					
ANR	693728	Identifier	pstype		693697	1					
ANR	693729	Parameter	client_name_t cname	1010:56:32981:32999	693697	3	True				
ANR	693730	ParameterType	client_name_t		693697	0					
ANR	693731	Identifier	cname		693697	1					
ANR	693732	CFGEntryNode	ENTRY		693697		True				
ANR	693733	CFGExitNode	EXIT		693697		True				
ANR	693734	Symbol	pstype -> ssize		693697						
ANR	693735	Symbol	* pstype		693697						
ANR	693736	Symbol	mem		693697						
ANR	693737	Symbol	pstype		693697						
ANR	693738	Symbol	num_elements		693697						
ANR	693739	Symbol	chunk_obj_alloc		693697						
ANR	693740	Symbol	cname		693697						
ANR	693741	Function	chunk_alloc_struct_array	1015:0:33085:33313							
ANR	693742	FunctionDef	"chunk_alloc_struct_array (gs_memory_t * mem , uint num_elements , gs_memory_type_ptr_t pstype , client_name_t cname)"		693741	0					
ANR	693743	CompoundStatement		1018:0:33233:33313	693741	0					
ANR	693744	ReturnStatement	"return chunk_obj_alloc ( mem , num_elements * pstype -> ssize , pstype , cname ) ;"	1019:4:33239:33311	693741	0	True				
ANR	693745	CallExpression	"chunk_obj_alloc ( mem , num_elements * pstype -> ssize , pstype , cname )"		693741	0					
ANR	693746	Callee	chunk_obj_alloc		693741	0					
ANR	693747	Identifier	chunk_obj_alloc		693741	0					
ANR	693748	ArgumentList	mem		693741	1					
ANR	693749	Argument	mem		693741	0					
ANR	693750	Identifier	mem		693741	0					
ANR	693751	Argument	num_elements * pstype -> ssize		693741	1					
ANR	693752	MultiplicativeExpression	num_elements * pstype -> ssize		693741	0		*			
ANR	693753	Identifier	num_elements		693741	0					
ANR	693754	PtrMemberAccess	pstype -> ssize		693741	1					
ANR	693755	Identifier	pstype		693741	0					
ANR	693756	Identifier	ssize		693741	1					
ANR	693757	Argument	pstype		693741	2					
ANR	693758	Identifier	pstype		693741	0					
ANR	693759	Argument	cname		693741	3					
ANR	693760	Identifier	cname		693741	0					
ANR	693761	ReturnType	static void *		693741	1					
ANR	693762	Identifier	chunk_alloc_struct_array		693741	2					
ANR	693763	ParameterList	"gs_memory_t * mem , uint num_elements , gs_memory_type_ptr_t pstype , client_name_t cname"		693741	3					
ANR	693764	Parameter	gs_memory_t * mem	1016:25:33124:33140	693741	0	True				
ANR	693765	ParameterType	gs_memory_t *		693741	0					
ANR	693766	Identifier	mem		693741	1					
ANR	693767	Parameter	uint num_elements	1016:44:33143:33159	693741	1	True				
ANR	693768	ParameterType	uint		693741	0					
ANR	693769	Identifier	num_elements		693741	1					
ANR	693770	Parameter	gs_memory_type_ptr_t pstype	1017:21:33183:33209	693741	2	True				
ANR	693771	ParameterType	gs_memory_type_ptr_t		693741	0					
ANR	693772	Identifier	pstype		693741	1					
ANR	693773	Parameter	client_name_t cname	1017:50:33212:33230	693741	3	True				
ANR	693774	ParameterType	client_name_t		693741	0					
ANR	693775	Identifier	cname		693741	1					
ANR	693776	CFGEntryNode	ENTRY		693741		True				
ANR	693777	CFGExitNode	EXIT		693741		True				
ANR	693778	Symbol	pstype -> ssize		693741						
ANR	693779	Symbol	* pstype		693741						
ANR	693780	Symbol	mem		693741						
ANR	693781	Symbol	pstype		693741						
ANR	693782	Symbol	num_elements		693741						
ANR	693783	Symbol	chunk_obj_alloc		693741						
ANR	693784	Symbol	cname		693741						
ANR	693785	Function	chunk_resize_object	1022:0:33316:34267							
ANR	693786	FunctionDef	"chunk_resize_object (gs_memory_t * mem , void * ptr , uint new_num_elements , client_name_t cname)"		693785	0					
ANR	693787	CompoundStatement		1024:0:33424:34267	693785	0					
ANR	693788	IdentifierDeclStatement	chunk_obj_node_t * obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) ) ;	1026:4:33497:33595	693785	0	True				
ANR	693789	IdentifierDecl	* obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		693785	0					
ANR	693790	IdentifierDeclType	chunk_obj_node_t *		693785	0					
ANR	693791	Identifier	obj		693785	1					
ANR	693792	AssignmentExpression	* obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		693785	2		=			
ANR	693793	Identifier	obj		693785	0					
ANR	693794	CastExpression	( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		693785	1					
ANR	693795	CastTarget	chunk_obj_node_t *		693785	0					
ANR	693796	AdditiveExpression	( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		693785	1		-			
ANR	693797	CastExpression	( byte * ) ptr		693785	0					
ANR	693798	CastTarget	byte *		693785	0					
ANR	693799	Identifier	ptr		693785	1					
ANR	693800	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		693785	1					
ANR	693801	Callee	SIZEOF_ROUND_ALIGN		693785	0					
ANR	693802	Identifier	SIZEOF_ROUND_ALIGN		693785	0					
ANR	693803	ArgumentList	chunk_obj_node_t		693785	1					
ANR	693804	Argument	chunk_obj_node_t		693785	0					
ANR	693805	Identifier	chunk_obj_node_t		693785	0					
ANR	693806	IdentifierDeclStatement	ulong new_size = ( obj -> type -> ssize * new_num_elements ) ;	1027:4:33601:33655	693785	1	True				
ANR	693807	IdentifierDecl	new_size = ( obj -> type -> ssize * new_num_elements )		693785	0					
ANR	693808	IdentifierDeclType	ulong		693785	0					
ANR	693809	Identifier	new_size		693785	1					
ANR	693810	AssignmentExpression	new_size = ( obj -> type -> ssize * new_num_elements )		693785	2		=			
ANR	693811	Identifier	new_size		693785	0					
ANR	693812	MultiplicativeExpression	obj -> type -> ssize * new_num_elements		693785	1		*			
ANR	693813	PtrMemberAccess	obj -> type -> ssize		693785	0					
ANR	693814	PtrMemberAccess	obj -> type		693785	0					
ANR	693815	Identifier	obj		693785	0					
ANR	693816	Identifier	type		693785	1					
ANR	693817	Identifier	ssize		693785	1					
ANR	693818	Identifier	new_num_elements		693785	1					
ANR	693819	IdentifierDeclStatement	ulong old_size = obj -> size - obj -> padding ;	1028:4:33661:33702	693785	2	True				
ANR	693820	IdentifierDecl	old_size = obj -> size - obj -> padding		693785	0					
ANR	693821	IdentifierDeclType	ulong		693785	0					
ANR	693822	Identifier	old_size		693785	1					
ANR	693823	AssignmentExpression	old_size = obj -> size - obj -> padding		693785	2		=			
ANR	693824	Identifier	old_size		693785	0					
ANR	693825	AdditiveExpression	obj -> size - obj -> padding		693785	1		-			
ANR	693826	PtrMemberAccess	obj -> size		693785	0					
ANR	693827	Identifier	obj		693785	0					
ANR	693828	Identifier	size		693785	1					
ANR	693829	PtrMemberAccess	obj -> padding		693785	1					
ANR	693830	Identifier	obj		693785	0					
ANR	693831	Identifier	padding		693785	1					
ANR	693832	IdentifierDeclStatement	gs_memory_type_ptr_t type = obj -> type ;	1030:4:33751:33788	693785	3	True				
ANR	693833	IdentifierDecl	type = obj -> type		693785	0					
ANR	693834	IdentifierDeclType	gs_memory_type_ptr_t		693785	0					
ANR	693835	Identifier	type		693785	1					
ANR	693836	AssignmentExpression	type = obj -> type		693785	2		=			
ANR	693837	Identifier	type		693785	0					
ANR	693838	PtrMemberAccess	obj -> type		693785	1					
ANR	693839	Identifier	obj		693785	0					
ANR	693840	Identifier	type		693785	1					
ANR	693841	IdentifierDeclStatement	void * new_ptr ;	1031:4:33794:33807	693785	4	True				
ANR	693842	IdentifierDecl	* new_ptr		693785	0					
ANR	693843	IdentifierDeclType	void *		693785	0					
ANR	693844	Identifier	new_ptr		693785	1					
ANR	693845	IdentifierDeclStatement	gs_memory_chunk_t * cmem = ( gs_memory_chunk_t * ) mem ;	1032:4:33813:33863	693785	5	True				
ANR	693846	IdentifierDecl	* cmem = ( gs_memory_chunk_t * ) mem		693785	0					
ANR	693847	IdentifierDeclType	gs_memory_chunk_t *		693785	0					
ANR	693848	Identifier	cmem		693785	1					
ANR	693849	AssignmentExpression	* cmem = ( gs_memory_chunk_t * ) mem		693785	2		=			
ANR	693850	Identifier	cmem		693785	0					
ANR	693851	CastExpression	( gs_memory_chunk_t * ) mem		693785	1					
ANR	693852	CastTarget	gs_memory_chunk_t *		693785	0					
ANR	693853	Identifier	mem		693785	1					
ANR	693854	IdentifierDeclStatement	ulong save_max_used = cmem -> max_used ;	1033:4:33869:33905	693785	6	True				
ANR	693855	IdentifierDecl	save_max_used = cmem -> max_used		693785	0					
ANR	693856	IdentifierDeclType	ulong		693785	0					
ANR	693857	Identifier	save_max_used		693785	1					
ANR	693858	AssignmentExpression	save_max_used = cmem -> max_used		693785	2		=			
ANR	693859	Identifier	save_max_used		693785	0					
ANR	693860	PtrMemberAccess	cmem -> max_used		693785	1					
ANR	693861	Identifier	cmem		693785	0					
ANR	693862	Identifier	max_used		693785	1					
ANR	693863	IfStatement	if ( new_size == old_size )		693785	7					
ANR	693864	Condition	new_size == old_size	1035:8:33916:33935	693785	0	True				
ANR	693865	EqualityExpression	new_size == old_size		693785	0		==			
ANR	693866	Identifier	new_size		693785	0					
ANR	693867	Identifier	old_size		693785	1					
ANR	693868	ReturnStatement	return ptr ;	1036:8:33946:33956	693785	1	True				
ANR	693869	Identifier	ptr		693785	0					
ANR	693870	IfStatement	"if ( ( new_ptr = chunk_obj_alloc ( mem , new_size , type , cname ) ) == 0 )"		693785	8					
ANR	693871	Condition	"( new_ptr = chunk_obj_alloc ( mem , new_size , type , cname ) ) == 0"	1037:8:33966:34025	693785	0	True				
ANR	693872	EqualityExpression	"( new_ptr = chunk_obj_alloc ( mem , new_size , type , cname ) ) == 0"		693785	0		==			
ANR	693873	AssignmentExpression	"new_ptr = chunk_obj_alloc ( mem , new_size , type , cname )"		693785	0		=			
ANR	693874	Identifier	new_ptr		693785	0					
ANR	693875	CallExpression	"chunk_obj_alloc ( mem , new_size , type , cname )"		693785	1					
ANR	693876	Callee	chunk_obj_alloc		693785	0					
ANR	693877	Identifier	chunk_obj_alloc		693785	0					
ANR	693878	ArgumentList	mem		693785	1					
ANR	693879	Argument	mem		693785	0					
ANR	693880	Identifier	mem		693785	0					
ANR	693881	Argument	new_size		693785	1					
ANR	693882	Identifier	new_size		693785	0					
ANR	693883	Argument	type		693785	2					
ANR	693884	Identifier	type		693785	0					
ANR	693885	Argument	cname		693785	3					
ANR	693886	Identifier	cname		693785	0					
ANR	693887	PrimaryExpression	0		693785	1					
ANR	693888	ReturnStatement	return 0 ;	1038:8:34036:34044	693785	1	True				
ANR	693889	PrimaryExpression	0		693785	0					
ANR	693890	ExpressionStatement	"memcpy ( new_ptr , ptr , min ( old_size , new_size ) )"	1039:4:34050:34095	693785	9	True				
ANR	693891	CallExpression	"memcpy ( new_ptr , ptr , min ( old_size , new_size ) )"		693785	0					
ANR	693892	Callee	memcpy		693785	0					
ANR	693893	Identifier	memcpy		693785	0					
ANR	693894	ArgumentList	new_ptr		693785	1					
ANR	693895	Argument	new_ptr		693785	0					
ANR	693896	Identifier	new_ptr		693785	0					
ANR	693897	Argument	ptr		693785	1					
ANR	693898	Identifier	ptr		693785	0					
ANR	693899	Argument	"min ( old_size , new_size )"		693785	2					
ANR	693900	CallExpression	"min ( old_size , new_size )"		693785	0					
ANR	693901	Callee	min		693785	0					
ANR	693902	Identifier	min		693785	0					
ANR	693903	ArgumentList	old_size		693785	1					
ANR	693904	Argument	old_size		693785	0					
ANR	693905	Identifier	old_size		693785	0					
ANR	693906	Argument	new_size		693785	1					
ANR	693907	Identifier	new_size		693785	0					
ANR	693908	ExpressionStatement	"chunk_free_object ( mem , ptr , cname )"	1040:4:34101:34135	693785	10	True				
ANR	693909	CallExpression	"chunk_free_object ( mem , ptr , cname )"		693785	0					
ANR	693910	Callee	chunk_free_object		693785	0					
ANR	693911	Identifier	chunk_free_object		693785	0					
ANR	693912	ArgumentList	mem		693785	1					
ANR	693913	Argument	mem		693785	0					
ANR	693914	Identifier	mem		693785	0					
ANR	693915	Argument	ptr		693785	1					
ANR	693916	Identifier	ptr		693785	0					
ANR	693917	Argument	cname		693785	2					
ANR	693918	Identifier	cname		693785	0					
ANR	693919	ExpressionStatement	cmem -> max_used = save_max_used	1041:4:34141:34171	693785	11	True				
ANR	693920	AssignmentExpression	cmem -> max_used = save_max_used		693785	0		=			
ANR	693921	PtrMemberAccess	cmem -> max_used		693785	0					
ANR	693922	Identifier	cmem		693785	0					
ANR	693923	Identifier	max_used		693785	1					
ANR	693924	Identifier	save_max_used		693785	1					
ANR	693925	IfStatement	if ( cmem -> used > cmem -> max_used )		693785	12					
ANR	693926	Condition	cmem -> used > cmem -> max_used	1042:8:34181:34207	693785	0	True				
ANR	693927	RelationalExpression	cmem -> used > cmem -> max_used		693785	0		>			
ANR	693928	PtrMemberAccess	cmem -> used		693785	0					
ANR	693929	Identifier	cmem		693785	0					
ANR	693930	Identifier	used		693785	1					
ANR	693931	PtrMemberAccess	cmem -> max_used		693785	1					
ANR	693932	Identifier	cmem		693785	0					
ANR	693933	Identifier	max_used		693785	1					
ANR	693934	ExpressionStatement	cmem -> max_used = cmem -> used	1043:8:34218:34245	693785	1	True				
ANR	693935	AssignmentExpression	cmem -> max_used = cmem -> used		693785	0		=			
ANR	693936	PtrMemberAccess	cmem -> max_used		693785	0					
ANR	693937	Identifier	cmem		693785	0					
ANR	693938	Identifier	max_used		693785	1					
ANR	693939	PtrMemberAccess	cmem -> used		693785	1					
ANR	693940	Identifier	cmem		693785	0					
ANR	693941	Identifier	used		693785	1					
ANR	693942	ReturnStatement	return new_ptr ;	1044:4:34251:34265	693785	13	True				
ANR	693943	Identifier	new_ptr		693785	0					
ANR	693944	ReturnType	static void *		693785	1					
ANR	693945	Identifier	chunk_resize_object		693785	2					
ANR	693946	ParameterList	"gs_memory_t * mem , void * ptr , uint new_num_elements , client_name_t cname"		693785	3					
ANR	693947	Parameter	gs_memory_t * mem	1023:20:33350:33366	693785	0	True				
ANR	693948	ParameterType	gs_memory_t *		693785	0					
ANR	693949	Identifier	mem		693785	1					
ANR	693950	Parameter	void * ptr	1023:39:33369:33377	693785	1	True				
ANR	693951	ParameterType	void *		693785	0					
ANR	693952	Identifier	ptr		693785	1					
ANR	693953	Parameter	uint new_num_elements	1023:50:33380:33400	693785	2	True				
ANR	693954	ParameterType	uint		693785	0					
ANR	693955	Identifier	new_num_elements		693785	1					
ANR	693956	Parameter	client_name_t cname	1023:73:33403:33421	693785	3	True				
ANR	693957	ParameterType	client_name_t		693785	0					
ANR	693958	Identifier	cname		693785	1					
ANR	693959	CFGEntryNode	ENTRY		693785		True				
ANR	693960	CFGExitNode	EXIT		693785		True				
ANR	693961	Symbol	old_size		693785						
ANR	693962	Symbol	chunk_obj_alloc		693785						
ANR	693963	Symbol	cname		693785						
ANR	693964	Symbol	* * obj		693785						
ANR	693965	Symbol	cmem -> max_used		693785						
ANR	693966	Symbol	type		693785						
ANR	693967	Symbol	new_ptr		693785						
ANR	693968	Symbol	min		693785						
ANR	693969	Symbol	mem		693785						
ANR	693970	Symbol	* cmem		693785						
ANR	693971	Symbol	new_size		693785						
ANR	693972	Symbol	chunk_obj_node_t		693785						
ANR	693973	Symbol	* obj -> type		693785						
ANR	693974	Symbol	obj -> type		693785						
ANR	693975	Symbol	* obj		693785						
ANR	693976	Symbol	obj -> padding		693785						
ANR	693977	Symbol	obj -> size		693785						
ANR	693978	Symbol	cmem -> used		693785						
ANR	693979	Symbol	ptr		693785						
ANR	693980	Symbol	save_max_used		693785						
ANR	693981	Symbol	new_num_elements		693785						
ANR	693982	Symbol	obj		693785						
ANR	693983	Symbol	obj -> type -> ssize		693785						
ANR	693984	Symbol	SIZEOF_ROUND_ALIGN		693785						
ANR	693985	Symbol	cmem		693785						
ANR	693986	Function	chunk_free_object	1047:0:34270:43984							
ANR	693987	FunctionDef	"chunk_free_object (gs_memory_t * mem , void * ptr , client_name_t cname)"		693986	0					
ANR	693988	CompoundStatement		1049:0:34350:43984	693986	0					
ANR	693989	Statement	gs_memory_chunk_t	1050:4:34356:34372	693986	0	True				
ANR	693990	Statement	*	1050:22:34374:34374	693986	1	True				
ANR	693991	Statement	const	1050:24:34376:34380	693986	2	True				
ANR	693992	ExpressionStatement	cmem = ( gs_memory_chunk_t * ) mem	1050:30:34382:34413	693986	3	True				
ANR	693993	AssignmentExpression	cmem = ( gs_memory_chunk_t * ) mem		693986	0		=			
ANR	693994	Identifier	cmem		693986	0					
ANR	693995	CastExpression	( gs_memory_chunk_t * ) mem		693986	1					
ANR	693996	CastTarget	gs_memory_chunk_t *		693986	0					
ANR	693997	Identifier	mem		693986	1					
ANR	693998	IdentifierDeclStatement	int obj_node_size ;	1051:4:34419:34436	693986	4	True				
ANR	693999	IdentifierDecl	obj_node_size		693986	0					
ANR	694000	IdentifierDeclType	int		693986	0					
ANR	694001	Identifier	obj_node_size		693986	1					
ANR	694002	IdentifierDeclStatement	chunk_obj_node_t * obj ;	1052:4:34442:34463	693986	5	True				
ANR	694003	IdentifierDecl	* obj		693986	0					
ANR	694004	IdentifierDeclType	chunk_obj_node_t *		693986	0					
ANR	694005	Identifier	obj		693986	1					
ANR	694006	ExpressionStatement	struct_proc_finalize ( ( * finalize ) )	1053:4:34469:34502	693986	6	True				
ANR	694007	CallExpression	struct_proc_finalize ( ( * finalize ) )		693986	0					
ANR	694008	Callee	struct_proc_finalize		693986	0					
ANR	694009	Identifier	struct_proc_finalize		693986	0					
ANR	694010	ArgumentList	* finalize		693986	1					
ANR	694011	Argument	* finalize		693986	0					
ANR	694012	UnaryOperationExpression	* finalize		693986	0					
ANR	694013	UnaryOperator	*		693986	0					
ANR	694014	Identifier	finalize		693986	1					
ANR	694015	IdentifierDeclStatement	"chunk_free_node_t * * ap , * * gtp , * * ltp ;"	1054:4:34508:34544	693986	7	True				
ANR	694016	IdentifierDecl	* * ap		693986	0					
ANR	694017	IdentifierDeclType	chunk_free_node_t * *		693986	0					
ANR	694018	Identifier	ap		693986	1					
ANR	694019	IdentifierDecl	* * gtp		693986	1					
ANR	694020	IdentifierDeclType	chunk_free_node_t * *		693986	0					
ANR	694021	Identifier	gtp		693986	1					
ANR	694022	IdentifierDecl	* * ltp		693986	2					
ANR	694023	IdentifierDeclType	chunk_free_node_t * *		693986	0					
ANR	694024	Identifier	ltp		693986	1					
ANR	694025	IdentifierDeclStatement	"chunk_free_node_t * a , * b , * c ;"	1055:4:34550:34578	693986	8	True				
ANR	694026	IdentifierDecl	* a		693986	0					
ANR	694027	IdentifierDeclType	chunk_free_node_t *		693986	0					
ANR	694028	Identifier	a		693986	1					
ANR	694029	IdentifierDecl	* b		693986	1					
ANR	694030	IdentifierDeclType	chunk_free_node_t *		693986	0					
ANR	694031	Identifier	b		693986	1					
ANR	694032	IdentifierDecl	* c		693986	2					
ANR	694033	IdentifierDeclType	chunk_free_node_t *		693986	0					
ANR	694034	Identifier	c		693986	1					
ANR	694035	IfStatement	if ( ptr == NULL )		693986	9					
ANR	694036	Condition	ptr == NULL	1057:8:34589:34599	693986	0	True				
ANR	694037	EqualityExpression	ptr == NULL		693986	0		==			
ANR	694038	Identifier	ptr		693986	0					
ANR	694039	Identifier	NULL		693986	1					
ANR	694040	ReturnStatement	return ;	1058:8:34610:34616	693986	1	True				
ANR	694041	ExpressionStatement	obj_node_size = SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )	1061:4:34655:34707	693986	10	True				
ANR	694042	AssignmentExpression	obj_node_size = SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		693986	0		=			
ANR	694043	Identifier	obj_node_size		693986	0					
ANR	694044	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		693986	1					
ANR	694045	Callee	SIZEOF_ROUND_ALIGN		693986	0					
ANR	694046	Identifier	SIZEOF_ROUND_ALIGN		693986	0					
ANR	694047	ArgumentList	chunk_obj_node_t		693986	1					
ANR	694048	Argument	chunk_obj_node_t		693986	0					
ANR	694049	Identifier	chunk_obj_node_t		693986	0					
ANR	694050	ExpressionStatement	obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - obj_node_size )	1062:4:34713:34770	693986	11	True				
ANR	694051	AssignmentExpression	obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - obj_node_size )		693986	0		=			
ANR	694052	Identifier	obj		693986	0					
ANR	694053	CastExpression	( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - obj_node_size )		693986	1					
ANR	694054	CastTarget	chunk_obj_node_t *		693986	0					
ANR	694055	AdditiveExpression	( ( byte * ) ptr ) - obj_node_size		693986	1		-			
ANR	694056	CastExpression	( byte * ) ptr		693986	0					
ANR	694057	CastTarget	byte *		693986	0					
ANR	694058	Identifier	ptr		693986	1					
ANR	694059	Identifier	obj_node_size		693986	1					
ANR	694060	IfStatement	if ( cmem -> deferring )		693986	12					
ANR	694061	Condition	cmem -> deferring	1064:8:34781:34795	693986	0	True				
ANR	694062	PtrMemberAccess	cmem -> deferring		693986	0					
ANR	694063	Identifier	cmem		693986	0					
ANR	694064	Identifier	deferring		693986	1					
ANR	694065	CompoundStatement		16:25:447:447	693986	1					
ANR	694066	IfStatement	if ( obj -> defer_next == NULL )		693986	0					
ANR	694067	Condition	obj -> defer_next == NULL	1065:12:34812:34834	693986	0	True				
ANR	694068	EqualityExpression	obj -> defer_next == NULL		693986	0		==			
ANR	694069	PtrMemberAccess	obj -> defer_next		693986	0					
ANR	694070	Identifier	obj		693986	0					
ANR	694071	Identifier	defer_next		693986	1					
ANR	694072	Identifier	NULL		693986	1					
ANR	694073	CompoundStatement		17:37:486:486	693986	1					
ANR	694074	ExpressionStatement	obj -> defer_next = cmem -> defer_finalize_list	1066:12:34851:34894	693986	0	True				
ANR	694075	AssignmentExpression	obj -> defer_next = cmem -> defer_finalize_list		693986	0		=			
ANR	694076	PtrMemberAccess	obj -> defer_next		693986	0					
ANR	694077	Identifier	obj		693986	0					
ANR	694078	Identifier	defer_next		693986	1					
ANR	694079	PtrMemberAccess	cmem -> defer_finalize_list		693986	1					
ANR	694080	Identifier	cmem		693986	0					
ANR	694081	Identifier	defer_finalize_list		693986	1					
ANR	694082	ExpressionStatement	cmem -> defer_finalize_list = obj	1067:12:34908:34939	693986	1	True				
ANR	694083	AssignmentExpression	cmem -> defer_finalize_list = obj		693986	0		=			
ANR	694084	PtrMemberAccess	cmem -> defer_finalize_list		693986	0					
ANR	694085	Identifier	cmem		693986	0					
ANR	694086	Identifier	defer_finalize_list		693986	1					
ANR	694087	Identifier	obj		693986	1					
ANR	694088	ReturnStatement	return ;	1069:8:34959:34965	693986	1	True				
ANR	694089	ExpressionStatement	cmem -> sequence ++	1074:4:35020:35036	693986	13	True				
ANR	694090	PostIncDecOperationExpression	cmem -> sequence ++		693986	0					
ANR	694091	PtrMemberAccess	cmem -> sequence		693986	0					
ANR	694092	Identifier	cmem		693986	0					
ANR	694093	Identifier	sequence		693986	1					
ANR	694094	IncDec	++		693986	1					
ANR	694095	ExpressionStatement	"dmlprintf6 ( cmem -> target , ""Event %x: free(chunk=%p, addr=%p, size=%x, num=%x, cname=%s)\\n"" , cmem -> sequence , cmem , obj , obj -> size , obj -> sequence , cname )"	1075:4:35042:35192	693986	14	True				
ANR	694096	CallExpression	"dmlprintf6 ( cmem -> target , ""Event %x: free(chunk=%p, addr=%p, size=%x, num=%x, cname=%s)\\n"" , cmem -> sequence , cmem , obj , obj -> size , obj -> sequence , cname )"		693986	0					
ANR	694097	Callee	dmlprintf6		693986	0					
ANR	694098	Identifier	dmlprintf6		693986	0					
ANR	694099	ArgumentList	cmem -> target		693986	1					
ANR	694100	Argument	cmem -> target		693986	0					
ANR	694101	PtrMemberAccess	cmem -> target		693986	0					
ANR	694102	Identifier	cmem		693986	0					
ANR	694103	Identifier	target		693986	1					
ANR	694104	Argument	"""Event %x: free(chunk=%p, addr=%p, size=%x, num=%x, cname=%s)\\n"""		693986	1					
ANR	694105	PrimaryExpression	"""Event %x: free(chunk=%p, addr=%p, size=%x, num=%x, cname=%s)\\n"""		693986	0					
ANR	694106	Argument	cmem -> sequence		693986	2					
ANR	694107	PtrMemberAccess	cmem -> sequence		693986	0					
ANR	694108	Identifier	cmem		693986	0					
ANR	694109	Identifier	sequence		693986	1					
ANR	694110	Argument	cmem		693986	3					
ANR	694111	Identifier	cmem		693986	0					
ANR	694112	Argument	obj		693986	4					
ANR	694113	Identifier	obj		693986	0					
ANR	694114	Argument	obj -> size		693986	5					
ANR	694115	PtrMemberAccess	obj -> size		693986	0					
ANR	694116	Identifier	obj		693986	0					
ANR	694117	Identifier	size		693986	1					
ANR	694118	Argument	obj -> sequence		693986	6					
ANR	694119	PtrMemberAccess	obj -> sequence		693986	0					
ANR	694120	Identifier	obj		693986	0					
ANR	694121	Identifier	sequence		693986	1					
ANR	694122	Argument	cname		693986	7					
ANR	694123	Identifier	cname		693986	0					
ANR	694124	IfStatement	if ( obj -> type )		693986	15					
ANR	694125	Condition	obj -> type	1081:8:35330:35338	693986	0	True				
ANR	694126	PtrMemberAccess	obj -> type		693986	0					
ANR	694127	Identifier	obj		693986	0					
ANR	694128	Identifier	type		693986	1					
ANR	694129	CompoundStatement		33:19:990:990	693986	1					
ANR	694130	ExpressionStatement	finalize = obj -> type -> finalize	1082:8:35351:35381	693986	0	True				
ANR	694131	AssignmentExpression	finalize = obj -> type -> finalize		693986	0		=			
ANR	694132	Identifier	finalize		693986	0					
ANR	694133	PtrMemberAccess	obj -> type -> finalize		693986	1					
ANR	694134	PtrMemberAccess	obj -> type		693986	0					
ANR	694135	Identifier	obj		693986	0					
ANR	694136	Identifier	type		693986	1					
ANR	694137	Identifier	finalize		693986	1					
ANR	694138	IfStatement	if ( finalize != NULL )		693986	1					
ANR	694139	Condition	finalize != NULL	1083:12:35395:35410	693986	0	True				
ANR	694140	EqualityExpression	finalize != NULL		693986	0		!=			
ANR	694141	Identifier	finalize		693986	0					
ANR	694142	Identifier	NULL		693986	1					
ANR	694143	ExpressionStatement	"finalize ( mem , ptr )"	1084:12:35425:35443	693986	1	True				
ANR	694144	CallExpression	"finalize ( mem , ptr )"		693986	0					
ANR	694145	Callee	finalize		693986	0					
ANR	694146	Identifier	finalize		693986	0					
ANR	694147	ArgumentList	mem		693986	1					
ANR	694148	Argument	mem		693986	0					
ANR	694149	Identifier	mem		693986	0					
ANR	694150	Argument	ptr		693986	1					
ANR	694151	Identifier	ptr		693986	0					
ANR	694152	ExpressionStatement	"if_debug3m ( 'A' , cmem -> target , ""[a-]chunk_free_object(%s) 0x%lx(%u)\\n"" , client_name_string ( cname ) , ( ulong ) ptr , obj -> size )"	1088:4:35524:35660	693986	16	True				
ANR	694153	CallExpression	"if_debug3m ( 'A' , cmem -> target , ""[a-]chunk_free_object(%s) 0x%lx(%u)\\n"" , client_name_string ( cname ) , ( ulong ) ptr , obj -> size )"		693986	0					
ANR	694154	Callee	if_debug3m		693986	0					
ANR	694155	Identifier	if_debug3m		693986	0					
ANR	694156	ArgumentList	'A'		693986	1					
ANR	694157	Argument	'A'		693986	0					
ANR	694158	PrimaryExpression	'A'		693986	0					
ANR	694159	Argument	cmem -> target		693986	1					
ANR	694160	PtrMemberAccess	cmem -> target		693986	0					
ANR	694161	Identifier	cmem		693986	0					
ANR	694162	Identifier	target		693986	1					
ANR	694163	Argument	"""[a-]chunk_free_object(%s) 0x%lx(%u)\\n"""		693986	2					
ANR	694164	PrimaryExpression	"""[a-]chunk_free_object(%s) 0x%lx(%u)\\n"""		693986	0					
ANR	694165	Argument	client_name_string ( cname )		693986	3					
ANR	694166	CallExpression	client_name_string ( cname )		693986	0					
ANR	694167	Callee	client_name_string		693986	0					
ANR	694168	Identifier	client_name_string		693986	0					
ANR	694169	ArgumentList	cname		693986	1					
ANR	694170	Argument	cname		693986	0					
ANR	694171	Identifier	cname		693986	0					
ANR	694172	Argument	( ulong ) ptr		693986	4					
ANR	694173	CastExpression	( ulong ) ptr		693986	0					
ANR	694174	CastTarget	ulong		693986	0					
ANR	694175	Identifier	ptr		693986	1					
ANR	694176	Argument	obj -> size		693986	5					
ANR	694177	PtrMemberAccess	obj -> size		693986	0					
ANR	694178	Identifier	obj		693986	0					
ANR	694179	Identifier	size		693986	1					
ANR	694180	IfStatement	if ( SINGLE_OBJECT_CHUNK ( obj -> size - obj -> padding ) )		693986	17					
ANR	694181	Condition	SINGLE_OBJECT_CHUNK ( obj -> size - obj -> padding )	1091:8:35671:35715	693986	0	True				
ANR	694182	CallExpression	SINGLE_OBJECT_CHUNK ( obj -> size - obj -> padding )		693986	0					
ANR	694183	Callee	SINGLE_OBJECT_CHUNK		693986	0					
ANR	694184	Identifier	SINGLE_OBJECT_CHUNK		693986	0					
ANR	694185	ArgumentList	obj -> size - obj -> padding		693986	1					
ANR	694186	Argument	obj -> size - obj -> padding		693986	0					
ANR	694187	AdditiveExpression	obj -> size - obj -> padding		693986	0		-			
ANR	694188	PtrMemberAccess	obj -> size		693986	0					
ANR	694189	Identifier	obj		693986	0					
ANR	694190	Identifier	size		693986	1					
ANR	694191	PtrMemberAccess	obj -> padding		693986	1					
ANR	694192	Identifier	obj		693986	0					
ANR	694193	Identifier	padding		693986	1					
ANR	694194	CompoundStatement		43:55:1367:1367	693986	1					
ANR	694195	ExpressionStatement	"gs_free_object ( cmem -> target , obj , ""chunk_free_object(single object)"" )"	1092:8:35728:35797	693986	0	True				
ANR	694196	CallExpression	"gs_free_object ( cmem -> target , obj , ""chunk_free_object(single object)"" )"		693986	0					
ANR	694197	Callee	gs_free_object		693986	0					
ANR	694198	Identifier	gs_free_object		693986	0					
ANR	694199	ArgumentList	cmem -> target		693986	1					
ANR	694200	Argument	cmem -> target		693986	0					
ANR	694201	PtrMemberAccess	cmem -> target		693986	0					
ANR	694202	Identifier	cmem		693986	0					
ANR	694203	Identifier	target		693986	1					
ANR	694204	Argument	obj		693986	1					
ANR	694205	Identifier	obj		693986	0					
ANR	694206	Argument	"""chunk_free_object(single object)"""		693986	2					
ANR	694207	PrimaryExpression	"""chunk_free_object(single object)"""		693986	0					
ANR	694208	ExpressionStatement	gs_memory_chunk_dump_memory ( cmem )	1094:8:35826:35859	693986	1	True				
ANR	694209	CallExpression	gs_memory_chunk_dump_memory ( cmem )		693986	0					
ANR	694210	Callee	gs_memory_chunk_dump_memory		693986	0					
ANR	694211	Identifier	gs_memory_chunk_dump_memory		693986	0					
ANR	694212	ArgumentList	cmem		693986	1					
ANR	694213	Argument	cmem		693986	0					
ANR	694214	Identifier	cmem		693986	0					
ANR	694215	ReturnStatement	return ;	1096:8:35876:35882	693986	2	True				
ANR	694216	ExpressionStatement	gtp = NULL	1104:4:36271:36281	693986	18	True				
ANR	694217	AssignmentExpression	gtp = NULL		693986	0		=			
ANR	694218	Identifier	gtp		693986	0					
ANR	694219	Identifier	NULL		693986	1					
ANR	694220	ExpressionStatement	ltp = NULL	1105:4:36373:36383	693986	19	True				
ANR	694221	AssignmentExpression	ltp = NULL		693986	0		=			
ANR	694222	Identifier	ltp		693986	0					
ANR	694223	Identifier	NULL		693986	1					
ANR	694224	ExpressionStatement	ap = & cmem -> free_loc	1106:4:36476:36496	693986	20	True				
ANR	694225	AssignmentExpression	ap = & cmem -> free_loc		693986	0		=			
ANR	694226	Identifier	ap		693986	0					
ANR	694227	UnaryOperationExpression	& cmem -> free_loc		693986	1					
ANR	694228	UnaryOperator	&		693986	0					
ANR	694229	PtrMemberAccess	cmem -> free_loc		693986	1					
ANR	694230	Identifier	cmem		693986	0					
ANR	694231	Identifier	free_loc		693986	1					
ANR	694232	WhileStatement	while ( ( a = * ap ) != NULL )		693986	21					
ANR	694233	Condition	( a = * ap ) != NULL	1107:11:36509:36525	693986	0	True				
ANR	694234	EqualityExpression	( a = * ap ) != NULL		693986	0		!=			
ANR	694235	AssignmentExpression	a = * ap		693986	0		=			
ANR	694236	Identifier	a		693986	0					
ANR	694237	UnaryOperationExpression	* ap		693986	1					
ANR	694238	UnaryOperator	*		693986	0					
ANR	694239	Identifier	ap		693986	1					
ANR	694240	Identifier	NULL		693986	1					
ANR	694241	CompoundStatement		59:30:2177:2177	693986	1					
ANR	694242	IfStatement	if ( ( void * ) a > ( void * ) obj )		693986	0					
ANR	694243	Condition	( void * ) a > ( void * ) obj	1108:12:36542:36564	693986	0	True				
ANR	694244	RelationalExpression	( void * ) a > ( void * ) obj		693986	0		>			
ANR	694245	CastExpression	( void * ) a		693986	0					
ANR	694246	CastTarget	void *		693986	0					
ANR	694247	Identifier	a		693986	1					
ANR	694248	CastExpression	( void * ) obj		693986	1					
ANR	694249	CastTarget	void *		693986	0					
ANR	694250	Identifier	obj		693986	1					
ANR	694251	CompoundStatement		60:37:2216:2216	693986	1					
ANR	694252	ExpressionStatement	b = a -> left_loc	1109:12:36581:36596	693986	0	True				
ANR	694253	AssignmentExpression	b = a -> left_loc		693986	0		=			
ANR	694254	Identifier	b		693986	0					
ANR	694255	PtrMemberAccess	a -> left_loc		693986	1					
ANR	694256	Identifier	a		693986	0					
ANR	694257	Identifier	left_loc		693986	1					
ANR	694258	IfStatement	if ( b == NULL )		693986	1					
ANR	694259	Condition	b == NULL	1110:16:36644:36652	693986	0	True				
ANR	694260	EqualityExpression	b == NULL		693986	0		==			
ANR	694261	Identifier	b		693986	0					
ANR	694262	Identifier	NULL		693986	1					
ANR	694263	CompoundStatement		62:27:2304:2304	693986	1					
ANR	694264	ExpressionStatement	gtp = ap	1111:16:36673:36681	693986	0	True				
ANR	694265	AssignmentExpression	gtp = ap		693986	0		=			
ANR	694266	Identifier	gtp		693986	0					
ANR	694267	Identifier	ap		693986	1					
ANR	694268	BreakStatement	break ;	1112:16:36726:36731	693986	1	True				
ANR	694269	IfStatement	if ( ( void * ) b > ( void * ) obj )		693986	2					
ANR	694270	Condition	( void * ) b > ( void * ) obj	1114:16:36763:36785	693986	0	True				
ANR	694271	RelationalExpression	( void * ) b > ( void * ) obj		693986	0		>			
ANR	694272	CastExpression	( void * ) b		693986	0					
ANR	694273	CastTarget	void *		693986	0					
ANR	694274	Identifier	b		693986	1					
ANR	694275	CastExpression	( void * ) obj		693986	1					
ANR	694276	CastTarget	void *		693986	0					
ANR	694277	Identifier	obj		693986	1					
ANR	694278	CompoundStatement		66:41:2437:2437	693986	1					
ANR	694279	ExpressionStatement	c = b -> left_loc	1115:16:36806:36821	693986	0	True				
ANR	694280	AssignmentExpression	c = b -> left_loc		693986	0		=			
ANR	694281	Identifier	c		693986	0					
ANR	694282	PtrMemberAccess	b -> left_loc		693986	1					
ANR	694283	Identifier	b		693986	0					
ANR	694284	Identifier	left_loc		693986	1					
ANR	694285	IfStatement	if ( c == NULL )		693986	1					
ANR	694286	Condition	c == NULL	1116:20:36873:36881	693986	0	True				
ANR	694287	EqualityExpression	c == NULL		693986	0		==			
ANR	694288	Identifier	c		693986	0					
ANR	694289	Identifier	NULL		693986	1					
ANR	694290	CompoundStatement		68:31:2533:2533	693986	1					
ANR	694291	ExpressionStatement	gtp = & a -> left_loc	1117:20:36906:36924	693986	0	True				
ANR	694292	AssignmentExpression	gtp = & a -> left_loc		693986	0		=			
ANR	694293	Identifier	gtp		693986	0					
ANR	694294	UnaryOperationExpression	& a -> left_loc		693986	1					
ANR	694295	UnaryOperator	&		693986	0					
ANR	694296	PtrMemberAccess	a -> left_loc		693986	1					
ANR	694297	Identifier	a		693986	0					
ANR	694298	Identifier	left_loc		693986	1					
ANR	694299	BreakStatement	break ;	1118:20:36973:36978	693986	1	True				
ANR	694300	ExpressionStatement	* ap = c	1125:16:37244:37251	693986	2	True				
ANR	694301	AssignmentExpression	* ap = c		693986	0		=			
ANR	694302	UnaryOperationExpression	* ap		693986	0					
ANR	694303	UnaryOperator	*		693986	0					
ANR	694304	Identifier	ap		693986	1					
ANR	694305	Identifier	c		693986	1					
ANR	694306	ExpressionStatement	a -> left_loc = b -> right_loc	1126:16:37269:37296	693986	3	True				
ANR	694307	AssignmentExpression	a -> left_loc = b -> right_loc		693986	0		=			
ANR	694308	PtrMemberAccess	a -> left_loc		693986	0					
ANR	694309	Identifier	a		693986	0					
ANR	694310	Identifier	left_loc		693986	1					
ANR	694311	PtrMemberAccess	b -> right_loc		693986	1					
ANR	694312	Identifier	b		693986	0					
ANR	694313	Identifier	right_loc		693986	1					
ANR	694314	ExpressionStatement	b -> left_loc = c -> right_loc	1127:16:37314:37341	693986	4	True				
ANR	694315	AssignmentExpression	b -> left_loc = c -> right_loc		693986	0		=			
ANR	694316	PtrMemberAccess	b -> left_loc		693986	0					
ANR	694317	Identifier	b		693986	0					
ANR	694318	Identifier	left_loc		693986	1					
ANR	694319	PtrMemberAccess	c -> right_loc		693986	1					
ANR	694320	Identifier	c		693986	0					
ANR	694321	Identifier	right_loc		693986	1					
ANR	694322	ExpressionStatement	b -> right_loc = a	1128:16:37359:37375	693986	5	True				
ANR	694323	AssignmentExpression	b -> right_loc = a		693986	0		=			
ANR	694324	PtrMemberAccess	b -> right_loc		693986	0					
ANR	694325	Identifier	b		693986	0					
ANR	694326	Identifier	right_loc		693986	1					
ANR	694327	Identifier	a		693986	1					
ANR	694328	ExpressionStatement	c -> right_loc = b	1129:16:37393:37409	693986	6	True				
ANR	694329	AssignmentExpression	c -> right_loc = b		693986	0		=			
ANR	694330	PtrMemberAccess	c -> right_loc		693986	0					
ANR	694331	Identifier	c		693986	0					
ANR	694332	Identifier	right_loc		693986	1					
ANR	694333	Identifier	b		693986	1					
ANR	694334	IfStatement	if ( ( void * ) c > ( void * ) obj )		693986	7					
ANR	694335	Condition	( void * ) c > ( void * ) obj	1130:20:37431:37453	693986	0	True				
ANR	694336	RelationalExpression	( void * ) c > ( void * ) obj		693986	0		>			
ANR	694337	CastExpression	( void * ) c		693986	0					
ANR	694338	CastTarget	void *		693986	0					
ANR	694339	Identifier	c		693986	1					
ANR	694340	CastExpression	( void * ) obj		693986	1					
ANR	694341	CastTarget	void *		693986	0					
ANR	694342	Identifier	obj		693986	1					
ANR	694343	CompoundStatement		82:45:3105:3105	693986	1					
ANR	694344	ExpressionStatement	gtp = ap	1131:20:37486:37494	693986	0	True				
ANR	694345	AssignmentExpression	gtp = ap		693986	0		=			
ANR	694346	Identifier	gtp		693986	0					
ANR	694347	Identifier	ap		693986	1					
ANR	694348	ExpressionStatement	ap = & c -> left_loc	1132:20:37543:37560	693986	1	True				
ANR	694349	AssignmentExpression	ap = & c -> left_loc		693986	0		=			
ANR	694350	Identifier	ap		693986	0					
ANR	694351	UnaryOperationExpression	& c -> left_loc		693986	1					
ANR	694352	UnaryOperator	&		693986	0					
ANR	694353	PtrMemberAccess	c -> left_loc		693986	1					
ANR	694354	Identifier	c		693986	0					
ANR	694355	Identifier	left_loc		693986	1					
ANR	694356	ElseStatement	else		693986	0					
ANR	694357	CompoundStatement		85:23:3234:3234	693986	0					
ANR	694358	ExpressionStatement	gtp = & c -> right_loc	1134:20:37615:37634	693986	0	True				
ANR	694359	AssignmentExpression	gtp = & c -> right_loc		693986	0		=			
ANR	694360	Identifier	gtp		693986	0					
ANR	694361	UnaryOperationExpression	& c -> right_loc		693986	1					
ANR	694362	UnaryOperator	&		693986	0					
ANR	694363	PtrMemberAccess	c -> right_loc		693986	1					
ANR	694364	Identifier	c		693986	0					
ANR	694365	Identifier	right_loc		693986	1					
ANR	694366	ExpressionStatement	ltp = ap	1135:20:37683:37691	693986	1	True				
ANR	694367	AssignmentExpression	ltp = ap		693986	0		=			
ANR	694368	Identifier	ltp		693986	0					
ANR	694369	Identifier	ap		693986	1					
ANR	694370	ExpressionStatement	ap = & b -> left_loc	1136:20:37737:37754	693986	2	True				
ANR	694371	AssignmentExpression	ap = & b -> left_loc		693986	0		=			
ANR	694372	Identifier	ap		693986	0					
ANR	694373	UnaryOperationExpression	& b -> left_loc		693986	1					
ANR	694374	UnaryOperator	&		693986	0					
ANR	694375	PtrMemberAccess	b -> left_loc		693986	1					
ANR	694376	Identifier	b		693986	0					
ANR	694377	Identifier	left_loc		693986	1					
ANR	694378	ElseStatement	else		693986	0					
ANR	694379	CompoundStatement		90:19:3442:3442	693986	0					
ANR	694380	ExpressionStatement	c = b -> right_loc	1139:16:37811:37827	693986	0	True				
ANR	694381	AssignmentExpression	c = b -> right_loc		693986	0		=			
ANR	694382	Identifier	c		693986	0					
ANR	694383	PtrMemberAccess	b -> right_loc		693986	1					
ANR	694384	Identifier	b		693986	0					
ANR	694385	Identifier	right_loc		693986	1					
ANR	694386	IfStatement	if ( c == NULL )		693986	1					
ANR	694387	Condition	c == NULL	1140:20:37880:37888	693986	0	True				
ANR	694388	EqualityExpression	c == NULL		693986	0		==			
ANR	694389	Identifier	c		693986	0					
ANR	694390	Identifier	NULL		693986	1					
ANR	694391	CompoundStatement		92:31:3540:3540	693986	1					
ANR	694392	ExpressionStatement	gtp = ap	1141:20:37913:37921	693986	0	True				
ANR	694393	AssignmentExpression	gtp = ap		693986	0		=			
ANR	694394	Identifier	gtp		693986	0					
ANR	694395	Identifier	ap		693986	1					
ANR	694396	ExpressionStatement	ltp = & a -> left_loc	1142:20:37970:37988	693986	1	True				
ANR	694397	AssignmentExpression	ltp = & a -> left_loc		693986	0		=			
ANR	694398	Identifier	ltp		693986	0					
ANR	694399	UnaryOperationExpression	& a -> left_loc		693986	1					
ANR	694400	UnaryOperator	&		693986	0					
ANR	694401	PtrMemberAccess	a -> left_loc		693986	1					
ANR	694402	Identifier	a		693986	0					
ANR	694403	Identifier	left_loc		693986	1					
ANR	694404	BreakStatement	break ;	1143:20:38034:38039	693986	2	True				
ANR	694405	ExpressionStatement	* ap = c	1150:16:38285:38292	693986	2	True				
ANR	694406	AssignmentExpression	* ap = c		693986	0		=			
ANR	694407	UnaryOperationExpression	* ap		693986	0					
ANR	694408	UnaryOperator	*		693986	0					
ANR	694409	Identifier	ap		693986	1					
ANR	694410	Identifier	c		693986	1					
ANR	694411	ExpressionStatement	a -> left_loc = c -> right_loc	1151:16:38310:38337	693986	3	True				
ANR	694412	AssignmentExpression	a -> left_loc = c -> right_loc		693986	0		=			
ANR	694413	PtrMemberAccess	a -> left_loc		693986	0					
ANR	694414	Identifier	a		693986	0					
ANR	694415	Identifier	left_loc		693986	1					
ANR	694416	PtrMemberAccess	c -> right_loc		693986	1					
ANR	694417	Identifier	c		693986	0					
ANR	694418	Identifier	right_loc		693986	1					
ANR	694419	ExpressionStatement	b -> right_loc = c -> left_loc	1152:16:38355:38381	693986	4	True				
ANR	694420	AssignmentExpression	b -> right_loc = c -> left_loc		693986	0		=			
ANR	694421	PtrMemberAccess	b -> right_loc		693986	0					
ANR	694422	Identifier	b		693986	0					
ANR	694423	Identifier	right_loc		693986	1					
ANR	694424	PtrMemberAccess	c -> left_loc		693986	1					
ANR	694425	Identifier	c		693986	0					
ANR	694426	Identifier	left_loc		693986	1					
ANR	694427	ExpressionStatement	c -> left_loc = b	1153:16:38399:38415	693986	5	True				
ANR	694428	AssignmentExpression	c -> left_loc = b		693986	0		=			
ANR	694429	PtrMemberAccess	c -> left_loc		693986	0					
ANR	694430	Identifier	c		693986	0					
ANR	694431	Identifier	left_loc		693986	1					
ANR	694432	Identifier	b		693986	1					
ANR	694433	ExpressionStatement	c -> right_loc = a	1154:16:38433:38449	693986	6	True				
ANR	694434	AssignmentExpression	c -> right_loc = a		693986	0		=			
ANR	694435	PtrMemberAccess	c -> right_loc		693986	0					
ANR	694436	Identifier	c		693986	0					
ANR	694437	Identifier	right_loc		693986	1					
ANR	694438	Identifier	a		693986	1					
ANR	694439	IfStatement	if ( ( void * ) c > ( void * ) obj )		693986	7					
ANR	694440	Condition	( void * ) c > ( void * ) obj	1155:20:38471:38493	693986	0	True				
ANR	694441	RelationalExpression	( void * ) c > ( void * ) obj		693986	0		>			
ANR	694442	CastExpression	( void * ) c		693986	0					
ANR	694443	CastTarget	void *		693986	0					
ANR	694444	Identifier	c		693986	1					
ANR	694445	CastExpression	( void * ) obj		693986	1					
ANR	694446	CastTarget	void *		693986	0					
ANR	694447	Identifier	obj		693986	1					
ANR	694448	CompoundStatement		107:45:4145:4145	693986	1					
ANR	694449	ExpressionStatement	gtp = ap	1156:20:38526:38534	693986	0	True				
ANR	694450	AssignmentExpression	gtp = ap		693986	0		=			
ANR	694451	Identifier	gtp		693986	0					
ANR	694452	Identifier	ap		693986	1					
ANR	694453	ExpressionStatement	ltp = & c -> left_loc	1157:20:38583:38601	693986	1	True				
ANR	694454	AssignmentExpression	ltp = & c -> left_loc		693986	0		=			
ANR	694455	Identifier	ltp		693986	0					
ANR	694456	UnaryOperationExpression	& c -> left_loc		693986	1					
ANR	694457	UnaryOperator	&		693986	0					
ANR	694458	PtrMemberAccess	c -> left_loc		693986	1					
ANR	694459	Identifier	c		693986	0					
ANR	694460	Identifier	left_loc		693986	1					
ANR	694461	ExpressionStatement	ap = & b -> right_loc	1158:20:38647:38665	693986	2	True				
ANR	694462	AssignmentExpression	ap = & b -> right_loc		693986	0		=			
ANR	694463	Identifier	ap		693986	0					
ANR	694464	UnaryOperationExpression	& b -> right_loc		693986	1					
ANR	694465	UnaryOperator	&		693986	0					
ANR	694466	PtrMemberAccess	b -> right_loc		693986	1					
ANR	694467	Identifier	b		693986	0					
ANR	694468	Identifier	right_loc		693986	1					
ANR	694469	ElseStatement	else		693986	0					
ANR	694470	CompoundStatement		111:23:4339:4339	693986	0					
ANR	694471	ExpressionStatement	gtp = & c -> right_loc	1160:20:38720:38739	693986	0	True				
ANR	694472	AssignmentExpression	gtp = & c -> right_loc		693986	0		=			
ANR	694473	Identifier	gtp		693986	0					
ANR	694474	UnaryOperationExpression	& c -> right_loc		693986	1					
ANR	694475	UnaryOperator	&		693986	0					
ANR	694476	PtrMemberAccess	c -> right_loc		693986	1					
ANR	694477	Identifier	c		693986	0					
ANR	694478	Identifier	right_loc		693986	1					
ANR	694479	ExpressionStatement	ltp = ap	1161:20:38788:38796	693986	1	True				
ANR	694480	AssignmentExpression	ltp = ap		693986	0		=			
ANR	694481	Identifier	ltp		693986	0					
ANR	694482	Identifier	ap		693986	1					
ANR	694483	ExpressionStatement	ap = & a -> left_loc	1162:20:38842:38859	693986	2	True				
ANR	694484	AssignmentExpression	ap = & a -> left_loc		693986	0		=			
ANR	694485	Identifier	ap		693986	0					
ANR	694486	UnaryOperationExpression	& a -> left_loc		693986	1					
ANR	694487	UnaryOperator	&		693986	0					
ANR	694488	PtrMemberAccess	a -> left_loc		693986	1					
ANR	694489	Identifier	a		693986	0					
ANR	694490	Identifier	left_loc		693986	1					
ANR	694491	ElseStatement	else		693986	0					
ANR	694492	CompoundStatement		117:15:4557:4557	693986	0					
ANR	694493	ExpressionStatement	b = a -> right_loc	1166:12:38922:38938	693986	0	True				
ANR	694494	AssignmentExpression	b = a -> right_loc		693986	0		=			
ANR	694495	Identifier	b		693986	0					
ANR	694496	PtrMemberAccess	a -> right_loc		693986	1					
ANR	694497	Identifier	a		693986	0					
ANR	694498	Identifier	right_loc		693986	1					
ANR	694499	IfStatement	if ( b == NULL )		693986	1					
ANR	694500	Condition	b == NULL	1167:16:38987:38995	693986	0	True				
ANR	694501	EqualityExpression	b == NULL		693986	0		==			
ANR	694502	Identifier	b		693986	0					
ANR	694503	Identifier	NULL		693986	1					
ANR	694504	CompoundStatement		119:27:4647:4647	693986	1					
ANR	694505	ExpressionStatement	ltp = ap	1168:16:39016:39024	693986	0	True				
ANR	694506	AssignmentExpression	ltp = ap		693986	0		=			
ANR	694507	Identifier	ltp		693986	0					
ANR	694508	Identifier	ap		693986	1					
ANR	694509	BreakStatement	break ;	1169:16:39066:39071	693986	1	True				
ANR	694510	IfStatement	if ( ( void * ) b > ( void * ) obj )		693986	2					
ANR	694511	Condition	( void * ) b > ( void * ) obj	1171:16:39103:39125	693986	0	True				
ANR	694512	RelationalExpression	( void * ) b > ( void * ) obj		693986	0		>			
ANR	694513	CastExpression	( void * ) b		693986	0					
ANR	694514	CastTarget	void *		693986	0					
ANR	694515	Identifier	b		693986	1					
ANR	694516	CastExpression	( void * ) obj		693986	1					
ANR	694517	CastTarget	void *		693986	0					
ANR	694518	Identifier	obj		693986	1					
ANR	694519	CompoundStatement		123:41:4777:4777	693986	1					
ANR	694520	ExpressionStatement	c = b -> left_loc	1172:16:39146:39161	693986	0	True				
ANR	694521	AssignmentExpression	c = b -> left_loc		693986	0		=			
ANR	694522	Identifier	c		693986	0					
ANR	694523	PtrMemberAccess	b -> left_loc		693986	1					
ANR	694524	Identifier	b		693986	0					
ANR	694525	Identifier	left_loc		693986	1					
ANR	694526	IfStatement	if ( c == NULL )		693986	1					
ANR	694527	Condition	c == NULL	1173:20:39183:39191	693986	0	True				
ANR	694528	EqualityExpression	c == NULL		693986	0		==			
ANR	694529	Identifier	c		693986	0					
ANR	694530	Identifier	NULL		693986	1					
ANR	694531	CompoundStatement		125:31:4843:4843	693986	1					
ANR	694532	ExpressionStatement	gtp = & a -> right_loc	1174:20:39216:39235	693986	0	True				
ANR	694533	AssignmentExpression	gtp = & a -> right_loc		693986	0		=			
ANR	694534	Identifier	gtp		693986	0					
ANR	694535	UnaryOperationExpression	& a -> right_loc		693986	1					
ANR	694536	UnaryOperator	&		693986	0					
ANR	694537	PtrMemberAccess	a -> right_loc		693986	1					
ANR	694538	Identifier	a		693986	0					
ANR	694539	Identifier	right_loc		693986	1					
ANR	694540	ExpressionStatement	ltp = ap	1175:20:39284:39292	693986	1	True				
ANR	694541	AssignmentExpression	ltp = ap		693986	0		=			
ANR	694542	Identifier	ltp		693986	0					
ANR	694543	Identifier	ap		693986	1					
ANR	694544	BreakStatement	break ;	1176:20:39338:39343	693986	2	True				
ANR	694545	ExpressionStatement	* ap = c	1183:16:39590:39597	693986	2	True				
ANR	694546	AssignmentExpression	* ap = c		693986	0		=			
ANR	694547	UnaryOperationExpression	* ap		693986	0					
ANR	694548	UnaryOperator	*		693986	0					
ANR	694549	Identifier	ap		693986	1					
ANR	694550	Identifier	c		693986	1					
ANR	694551	ExpressionStatement	a -> right_loc = c -> left_loc	1184:16:39615:39641	693986	3	True				
ANR	694552	AssignmentExpression	a -> right_loc = c -> left_loc		693986	0		=			
ANR	694553	PtrMemberAccess	a -> right_loc		693986	0					
ANR	694554	Identifier	a		693986	0					
ANR	694555	Identifier	right_loc		693986	1					
ANR	694556	PtrMemberAccess	c -> left_loc		693986	1					
ANR	694557	Identifier	c		693986	0					
ANR	694558	Identifier	left_loc		693986	1					
ANR	694559	ExpressionStatement	b -> left_loc = c -> right_loc	1185:16:39659:39686	693986	4	True				
ANR	694560	AssignmentExpression	b -> left_loc = c -> right_loc		693986	0		=			
ANR	694561	PtrMemberAccess	b -> left_loc		693986	0					
ANR	694562	Identifier	b		693986	0					
ANR	694563	Identifier	left_loc		693986	1					
ANR	694564	PtrMemberAccess	c -> right_loc		693986	1					
ANR	694565	Identifier	c		693986	0					
ANR	694566	Identifier	right_loc		693986	1					
ANR	694567	ExpressionStatement	c -> left_loc = a	1186:16:39704:39720	693986	5	True				
ANR	694568	AssignmentExpression	c -> left_loc = a		693986	0		=			
ANR	694569	PtrMemberAccess	c -> left_loc		693986	0					
ANR	694570	Identifier	c		693986	0					
ANR	694571	Identifier	left_loc		693986	1					
ANR	694572	Identifier	a		693986	1					
ANR	694573	ExpressionStatement	c -> right_loc = b	1187:16:39738:39754	693986	6	True				
ANR	694574	AssignmentExpression	c -> right_loc = b		693986	0		=			
ANR	694575	PtrMemberAccess	c -> right_loc		693986	0					
ANR	694576	Identifier	c		693986	0					
ANR	694577	Identifier	right_loc		693986	1					
ANR	694578	Identifier	b		693986	1					
ANR	694579	IfStatement	if ( ( void * ) c > ( void * ) obj )		693986	7					
ANR	694580	Condition	( void * ) c > ( void * ) obj	1188:20:39776:39798	693986	0	True				
ANR	694581	RelationalExpression	( void * ) c > ( void * ) obj		693986	0		>			
ANR	694582	CastExpression	( void * ) c		693986	0					
ANR	694583	CastTarget	void *		693986	0					
ANR	694584	Identifier	c		693986	1					
ANR	694585	CastExpression	( void * ) obj		693986	1					
ANR	694586	CastTarget	void *		693986	0					
ANR	694587	Identifier	obj		693986	1					
ANR	694588	CompoundStatement		140:45:5450:5450	693986	1					
ANR	694589	ExpressionStatement	gtp = ap	1189:20:39831:39839	693986	0	True				
ANR	694590	AssignmentExpression	gtp = ap		693986	0		=			
ANR	694591	Identifier	gtp		693986	0					
ANR	694592	Identifier	ap		693986	1					
ANR	694593	ExpressionStatement	ltp = & c -> left_loc	1190:20:39888:39906	693986	1	True				
ANR	694594	AssignmentExpression	ltp = & c -> left_loc		693986	0		=			
ANR	694595	Identifier	ltp		693986	0					
ANR	694596	UnaryOperationExpression	& c -> left_loc		693986	1					
ANR	694597	UnaryOperator	&		693986	0					
ANR	694598	PtrMemberAccess	c -> left_loc		693986	1					
ANR	694599	Identifier	c		693986	0					
ANR	694600	Identifier	left_loc		693986	1					
ANR	694601	ExpressionStatement	ap = & a -> right_loc	1191:20:39952:39970	693986	2	True				
ANR	694602	AssignmentExpression	ap = & a -> right_loc		693986	0		=			
ANR	694603	Identifier	ap		693986	0					
ANR	694604	UnaryOperationExpression	& a -> right_loc		693986	1					
ANR	694605	UnaryOperator	&		693986	0					
ANR	694606	PtrMemberAccess	a -> right_loc		693986	1					
ANR	694607	Identifier	a		693986	0					
ANR	694608	Identifier	right_loc		693986	1					
ANR	694609	ElseStatement	else		693986	0					
ANR	694610	CompoundStatement		144:23:5644:5644	693986	0					
ANR	694611	ExpressionStatement	gtp = & c -> right_loc	1193:20:40025:40044	693986	0	True				
ANR	694612	AssignmentExpression	gtp = & c -> right_loc		693986	0		=			
ANR	694613	Identifier	gtp		693986	0					
ANR	694614	UnaryOperationExpression	& c -> right_loc		693986	1					
ANR	694615	UnaryOperator	&		693986	0					
ANR	694616	PtrMemberAccess	c -> right_loc		693986	1					
ANR	694617	Identifier	c		693986	0					
ANR	694618	Identifier	right_loc		693986	1					
ANR	694619	ExpressionStatement	ltp = ap	1194:20:40093:40101	693986	1	True				
ANR	694620	AssignmentExpression	ltp = ap		693986	0		=			
ANR	694621	Identifier	ltp		693986	0					
ANR	694622	Identifier	ap		693986	1					
ANR	694623	ExpressionStatement	ap = & b -> left_loc	1195:20:40152:40169	693986	2	True				
ANR	694624	AssignmentExpression	ap = & b -> left_loc		693986	0		=			
ANR	694625	Identifier	ap		693986	0					
ANR	694626	UnaryOperationExpression	& b -> left_loc		693986	1					
ANR	694627	UnaryOperator	&		693986	0					
ANR	694628	PtrMemberAccess	b -> left_loc		693986	1					
ANR	694629	Identifier	b		693986	0					
ANR	694630	Identifier	left_loc		693986	1					
ANR	694631	ElseStatement	else		693986	0					
ANR	694632	CompoundStatement		149:19:5857:5857	693986	0					
ANR	694633	ExpressionStatement	c = b -> right_loc	1198:16:40226:40242	693986	0	True				
ANR	694634	AssignmentExpression	c = b -> right_loc		693986	0		=			
ANR	694635	Identifier	c		693986	0					
ANR	694636	PtrMemberAccess	b -> right_loc		693986	1					
ANR	694637	Identifier	b		693986	0					
ANR	694638	Identifier	right_loc		693986	1					
ANR	694639	IfStatement	if ( c == NULL )		693986	1					
ANR	694640	Condition	c == NULL	1199:20:40264:40272	693986	0	True				
ANR	694641	EqualityExpression	c == NULL		693986	0		==			
ANR	694642	Identifier	c		693986	0					
ANR	694643	Identifier	NULL		693986	1					
ANR	694644	CompoundStatement		151:31:5924:5924	693986	1					
ANR	694645	ExpressionStatement	ltp = & a -> right_loc	1200:20:40297:40316	693986	0	True				
ANR	694646	AssignmentExpression	ltp = & a -> right_loc		693986	0		=			
ANR	694647	Identifier	ltp		693986	0					
ANR	694648	UnaryOperationExpression	& a -> right_loc		693986	1					
ANR	694649	UnaryOperator	&		693986	0					
ANR	694650	PtrMemberAccess	a -> right_loc		693986	1					
ANR	694651	Identifier	a		693986	0					
ANR	694652	Identifier	right_loc		693986	1					
ANR	694653	BreakStatement	break ;	1201:20:40365:40370	693986	1	True				
ANR	694654	ExpressionStatement	* ap = c	1208:16:40628:40635	693986	2	True				
ANR	694655	AssignmentExpression	* ap = c		693986	0		=			
ANR	694656	UnaryOperationExpression	* ap		693986	0					
ANR	694657	UnaryOperator	*		693986	0					
ANR	694658	Identifier	ap		693986	1					
ANR	694659	Identifier	c		693986	1					
ANR	694660	ExpressionStatement	a -> right_loc = b -> left_loc	1209:16:40653:40679	693986	3	True				
ANR	694661	AssignmentExpression	a -> right_loc = b -> left_loc		693986	0		=			
ANR	694662	PtrMemberAccess	a -> right_loc		693986	0					
ANR	694663	Identifier	a		693986	0					
ANR	694664	Identifier	right_loc		693986	1					
ANR	694665	PtrMemberAccess	b -> left_loc		693986	1					
ANR	694666	Identifier	b		693986	0					
ANR	694667	Identifier	left_loc		693986	1					
ANR	694668	ExpressionStatement	b -> right_loc = c -> left_loc	1210:16:40697:40723	693986	4	True				
ANR	694669	AssignmentExpression	b -> right_loc = c -> left_loc		693986	0		=			
ANR	694670	PtrMemberAccess	b -> right_loc		693986	0					
ANR	694671	Identifier	b		693986	0					
ANR	694672	Identifier	right_loc		693986	1					
ANR	694673	PtrMemberAccess	c -> left_loc		693986	1					
ANR	694674	Identifier	c		693986	0					
ANR	694675	Identifier	left_loc		693986	1					
ANR	694676	ExpressionStatement	b -> left_loc = a	1211:16:40741:40757	693986	5	True				
ANR	694677	AssignmentExpression	b -> left_loc = a		693986	0		=			
ANR	694678	PtrMemberAccess	b -> left_loc		693986	0					
ANR	694679	Identifier	b		693986	0					
ANR	694680	Identifier	left_loc		693986	1					
ANR	694681	Identifier	a		693986	1					
ANR	694682	ExpressionStatement	c -> left_loc = b	1212:16:40775:40791	693986	6	True				
ANR	694683	AssignmentExpression	c -> left_loc = b		693986	0		=			
ANR	694684	PtrMemberAccess	c -> left_loc		693986	0					
ANR	694685	Identifier	c		693986	0					
ANR	694686	Identifier	left_loc		693986	1					
ANR	694687	Identifier	b		693986	1					
ANR	694688	IfStatement	if ( ( void * ) c > ( void * ) obj )		693986	7					
ANR	694689	Condition	( void * ) c > ( void * ) obj	1213:20:40813:40835	693986	0	True				
ANR	694690	RelationalExpression	( void * ) c > ( void * ) obj		693986	0		>			
ANR	694691	CastExpression	( void * ) c		693986	0					
ANR	694692	CastTarget	void *		693986	0					
ANR	694693	Identifier	c		693986	1					
ANR	694694	CastExpression	( void * ) obj		693986	1					
ANR	694695	CastTarget	void *		693986	0					
ANR	694696	Identifier	obj		693986	1					
ANR	694697	CompoundStatement		165:45:6487:6487	693986	1					
ANR	694698	ExpressionStatement	gtp = ap	1214:20:40868:40876	693986	0	True				
ANR	694699	AssignmentExpression	gtp = ap		693986	0		=			
ANR	694700	Identifier	gtp		693986	0					
ANR	694701	Identifier	ap		693986	1					
ANR	694702	ExpressionStatement	ltp = & c -> left_loc	1215:20:40925:40943	693986	1	True				
ANR	694703	AssignmentExpression	ltp = & c -> left_loc		693986	0		=			
ANR	694704	Identifier	ltp		693986	0					
ANR	694705	UnaryOperationExpression	& c -> left_loc		693986	1					
ANR	694706	UnaryOperator	&		693986	0					
ANR	694707	PtrMemberAccess	c -> left_loc		693986	1					
ANR	694708	Identifier	c		693986	0					
ANR	694709	Identifier	left_loc		693986	1					
ANR	694710	ExpressionStatement	ap = & b -> right_loc	1216:20:40989:41007	693986	2	True				
ANR	694711	AssignmentExpression	ap = & b -> right_loc		693986	0		=			
ANR	694712	Identifier	ap		693986	0					
ANR	694713	UnaryOperationExpression	& b -> right_loc		693986	1					
ANR	694714	UnaryOperator	&		693986	0					
ANR	694715	PtrMemberAccess	b -> right_loc		693986	1					
ANR	694716	Identifier	b		693986	0					
ANR	694717	Identifier	right_loc		693986	1					
ANR	694718	ElseStatement	else		693986	0					
ANR	694719	CompoundStatement		169:23:6681:6681	693986	0					
ANR	694720	ExpressionStatement	ltp = ap	1218:20:41062:41070	693986	0	True				
ANR	694721	AssignmentExpression	ltp = ap		693986	0		=			
ANR	694722	Identifier	ltp		693986	0					
ANR	694723	Identifier	ap		693986	1					
ANR	694724	ExpressionStatement	ap = & c -> right_loc	1219:20:41121:41139	693986	1	True				
ANR	694725	AssignmentExpression	ap = & c -> right_loc		693986	0		=			
ANR	694726	Identifier	ap		693986	0					
ANR	694727	UnaryOperationExpression	& c -> right_loc		693986	1					
ANR	694728	UnaryOperator	&		693986	0					
ANR	694729	PtrMemberAccess	c -> right_loc		693986	1					
ANR	694730	Identifier	c		693986	0					
ANR	694731	Identifier	right_loc		693986	1					
ANR	694732	IfStatement	if ( ltp )		693986	22					
ANR	694733	Condition	ltp	1225:8:41198:41200	693986	0	True				
ANR	694734	Identifier	ltp		693986	0					
ANR	694735	CompoundStatement		179:8:6937:6992	693986	1					
ANR	694736	IdentifierDeclStatement	chunk_free_node_t * ltfree = ( chunk_free_node_t * ) ( * ltp ) ;	1227:8:41288:41343	693986	0	True				
ANR	694737	IdentifierDecl	* ltfree = ( chunk_free_node_t * ) ( * ltp )		693986	0					
ANR	694738	IdentifierDeclType	chunk_free_node_t *		693986	0					
ANR	694739	Identifier	ltfree		693986	1					
ANR	694740	AssignmentExpression	* ltfree = ( chunk_free_node_t * ) ( * ltp )		693986	2		=			
ANR	694741	Identifier	ltfree		693986	0					
ANR	694742	CastExpression	( chunk_free_node_t * ) ( * ltp )		693986	1					
ANR	694743	CastTarget	chunk_free_node_t *		693986	0					
ANR	694744	UnaryOperationExpression	* ltp		693986	1					
ANR	694745	UnaryOperator	*		693986	0					
ANR	694746	Identifier	ltp		693986	1					
ANR	694747	IfStatement	if ( ( ( ( byte * ) ltfree ) + ltfree -> size ) == ( byte * ) ( void * ) obj )		693986	1					
ANR	694748	Condition	( ( ( byte * ) ltfree ) + ltfree -> size ) == ( byte * ) ( void * ) obj	1228:12:41357:41412	693986	0	True				
ANR	694749	EqualityExpression	( ( ( byte * ) ltfree ) + ltfree -> size ) == ( byte * ) ( void * ) obj		693986	0		==			
ANR	694750	AdditiveExpression	( ( byte * ) ltfree ) + ltfree -> size		693986	0		+			
ANR	694751	CastExpression	( byte * ) ltfree		693986	0					
ANR	694752	CastTarget	byte *		693986	0					
ANR	694753	Identifier	ltfree		693986	1					
ANR	694754	PtrMemberAccess	ltfree -> size		693986	1					
ANR	694755	Identifier	ltfree		693986	0					
ANR	694756	Identifier	size		693986	1					
ANR	694757	CastExpression	( byte * ) ( void * ) obj		693986	1					
ANR	694758	CastTarget	byte *		693986	0					
ANR	694759	CastExpression	( void * ) obj		693986	1					
ANR	694760	CastTarget	void *		693986	0					
ANR	694761	Identifier	obj		693986	1					
ANR	694762	CompoundStatement		180:70:7064:7064	693986	1					
ANR	694763	ExpressionStatement	cmem -> total_free += obj -> size	1230:12:41454:41483	693986	0	True				
ANR	694764	AssignmentExpression	cmem -> total_free += obj -> size		693986	0		+=			
ANR	694765	PtrMemberAccess	cmem -> total_free		693986	0					
ANR	694766	Identifier	cmem		693986	0					
ANR	694767	Identifier	total_free		693986	1					
ANR	694768	PtrMemberAccess	obj -> size		693986	1					
ANR	694769	Identifier	obj		693986	0					
ANR	694770	Identifier	size		693986	1					
ANR	694771	ExpressionStatement	"remove_free_size ( cmem , ltfree )"	1231:12:41497:41527	693986	1	True				
ANR	694772	CallExpression	"remove_free_size ( cmem , ltfree )"		693986	0					
ANR	694773	Callee	remove_free_size		693986	0					
ANR	694774	Identifier	remove_free_size		693986	0					
ANR	694775	ArgumentList	cmem		693986	1					
ANR	694776	Argument	cmem		693986	0					
ANR	694777	Identifier	cmem		693986	0					
ANR	694778	Argument	ltfree		693986	1					
ANR	694779	Identifier	ltfree		693986	0					
ANR	694780	ExpressionStatement	ltfree -> size += obj -> size	1232:12:41541:41566	693986	2	True				
ANR	694781	AssignmentExpression	ltfree -> size += obj -> size		693986	0		+=			
ANR	694782	PtrMemberAccess	ltfree -> size		693986	0					
ANR	694783	Identifier	ltfree		693986	0					
ANR	694784	Identifier	size		693986	1					
ANR	694785	PtrMemberAccess	obj -> size		693986	1					
ANR	694786	Identifier	obj		693986	0					
ANR	694787	Identifier	size		693986	1					
ANR	694788	IfStatement	if ( gtp )		693986	3					
ANR	694789	Condition	gtp	1233:16:41584:41586	693986	0	True				
ANR	694790	Identifier	gtp		693986	0					
ANR	694791	CompoundStatement		187:16:7339:7394	693986	1					
ANR	694792	IdentifierDeclStatement	chunk_free_node_t * gtfree = ( chunk_free_node_t * ) ( * gtp ) ;	1235:16:41690:41745	693986	0	True				
ANR	694793	IdentifierDecl	* gtfree = ( chunk_free_node_t * ) ( * gtp )		693986	0					
ANR	694794	IdentifierDeclType	chunk_free_node_t *		693986	0					
ANR	694795	Identifier	gtfree		693986	1					
ANR	694796	AssignmentExpression	* gtfree = ( chunk_free_node_t * ) ( * gtp )		693986	2		=			
ANR	694797	Identifier	gtfree		693986	0					
ANR	694798	CastExpression	( chunk_free_node_t * ) ( * gtp )		693986	1					
ANR	694799	CastTarget	chunk_free_node_t *		693986	0					
ANR	694800	UnaryOperationExpression	* gtp		693986	1					
ANR	694801	UnaryOperator	*		693986	0					
ANR	694802	Identifier	gtp		693986	1					
ANR	694803	IfStatement	if ( ( ( ( byte * ) obj ) + obj -> size ) == ( byte * ) ( void * ) gtfree )		693986	1					
ANR	694804	Condition	( ( ( byte * ) obj ) + obj -> size ) == ( byte * ) ( void * ) gtfree	1236:20:41767:41819	693986	0	True				
ANR	694805	EqualityExpression	( ( ( byte * ) obj ) + obj -> size ) == ( byte * ) ( void * ) gtfree		693986	0		==			
ANR	694806	AdditiveExpression	( ( byte * ) obj ) + obj -> size		693986	0		+			
ANR	694807	CastExpression	( byte * ) obj		693986	0					
ANR	694808	CastTarget	byte *		693986	0					
ANR	694809	Identifier	obj		693986	1					
ANR	694810	PtrMemberAccess	obj -> size		693986	1					
ANR	694811	Identifier	obj		693986	0					
ANR	694812	Identifier	size		693986	1					
ANR	694813	CastExpression	( byte * ) ( void * ) gtfree		693986	1					
ANR	694814	CastTarget	byte *		693986	0					
ANR	694815	CastExpression	( void * ) gtfree		693986	1					
ANR	694816	CastTarget	void *		693986	0					
ANR	694817	Identifier	gtfree		693986	1					
ANR	694818	CompoundStatement		188:75:7471:7471	693986	1					
ANR	694819	ExpressionStatement	ltfree -> size += gtfree -> size	1238:20:41884:41912	693986	0	True				
ANR	694820	AssignmentExpression	ltfree -> size += gtfree -> size		693986	0		+=			
ANR	694821	PtrMemberAccess	ltfree -> size		693986	0					
ANR	694822	Identifier	ltfree		693986	0					
ANR	694823	Identifier	size		693986	1					
ANR	694824	PtrMemberAccess	gtfree -> size		693986	1					
ANR	694825	Identifier	gtfree		693986	0					
ANR	694826	Identifier	size		693986	1					
ANR	694827	ExpressionStatement	"remove_free ( cmem , gtfree )"	1239:20:41934:41959	693986	1	True				
ANR	694828	CallExpression	"remove_free ( cmem , gtfree )"		693986	0					
ANR	694829	Callee	remove_free		693986	0					
ANR	694830	Identifier	remove_free		693986	0					
ANR	694831	ArgumentList	cmem		693986	1					
ANR	694832	Argument	cmem		693986	0					
ANR	694833	Identifier	cmem		693986	0					
ANR	694834	Argument	gtfree		693986	1					
ANR	694835	Identifier	gtfree		693986	0					
ANR	694836	ExpressionStatement	gtp = NULL	1241:16:41995:42005	693986	2	True				
ANR	694837	AssignmentExpression	gtp = NULL		693986	0		=			
ANR	694838	Identifier	gtp		693986	0					
ANR	694839	Identifier	NULL		693986	1					
ANR	694840	ExpressionStatement	"insert_free_size ( cmem , ltfree )"	1243:12:42033:42063	693986	4	True				
ANR	694841	CallExpression	"insert_free_size ( cmem , ltfree )"		693986	0					
ANR	694842	Callee	insert_free_size		693986	0					
ANR	694843	Identifier	insert_free_size		693986	0					
ANR	694844	ArgumentList	cmem		693986	1					
ANR	694845	Argument	cmem		693986	0					
ANR	694846	Identifier	cmem		693986	0					
ANR	694847	Argument	ltfree		693986	1					
ANR	694848	Identifier	ltfree		693986	0					
ANR	694849	IfStatement	if ( gs_alloc_debug )		693986	5					
ANR	694850	Condition	gs_alloc_debug	1244:16:42081:42094	693986	0	True				
ANR	694851	Identifier	gs_alloc_debug		693986	0					
ANR	694852	ExpressionStatement	"memset ( ( ( byte * ) ltfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) , 0x69 , ltfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) )"	1245:16:42113:42237	693986	1	True				
ANR	694853	CallExpression	"memset ( ( ( byte * ) ltfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) , 0x69 , ltfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) )"		693986	0					
ANR	694854	Callee	memset		693986	0					
ANR	694855	Identifier	memset		693986	0					
ANR	694856	ArgumentList	( ( byte * ) ltfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	1					
ANR	694857	Argument	( ( byte * ) ltfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	0					
ANR	694858	AdditiveExpression	( ( byte * ) ltfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	0		+			
ANR	694859	CastExpression	( byte * ) ltfree		693986	0					
ANR	694860	CastTarget	byte *		693986	0					
ANR	694861	Identifier	ltfree		693986	1					
ANR	694862	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	1					
ANR	694863	Callee	SIZEOF_ROUND_ALIGN		693986	0					
ANR	694864	Identifier	SIZEOF_ROUND_ALIGN		693986	0					
ANR	694865	ArgumentList	chunk_free_node_t		693986	1					
ANR	694866	Argument	chunk_free_node_t		693986	0					
ANR	694867	Identifier	chunk_free_node_t		693986	0					
ANR	694868	Argument	0x69		693986	1					
ANR	694869	PrimaryExpression	0x69		693986	0					
ANR	694870	Argument	ltfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	2					
ANR	694871	AdditiveExpression	ltfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	0		-			
ANR	694872	PtrMemberAccess	ltfree -> size		693986	0					
ANR	694873	Identifier	ltfree		693986	0					
ANR	694874	Identifier	size		693986	1					
ANR	694875	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	1					
ANR	694876	Callee	SIZEOF_ROUND_ALIGN		693986	0					
ANR	694877	Identifier	SIZEOF_ROUND_ALIGN		693986	0					
ANR	694878	ArgumentList	chunk_free_node_t		693986	1					
ANR	694879	Argument	chunk_free_node_t		693986	0					
ANR	694880	Identifier	chunk_free_node_t		693986	0					
ANR	694881	ExpressionStatement	obj = NULL	1246:12:42251:42261	693986	6	True				
ANR	694882	AssignmentExpression	obj = NULL		693986	0		=			
ANR	694883	Identifier	obj		693986	0					
ANR	694884	Identifier	NULL		693986	1					
ANR	694885	IfStatement	if ( gtp && obj )		693986	23					
ANR	694886	Condition	gtp && obj	1249:8:42287:42296	693986	0	True				
ANR	694887	AndExpression	gtp && obj		693986	0		&&			
ANR	694888	Identifier	gtp		693986	0					
ANR	694889	Identifier	obj		693986	1					
ANR	694890	CompoundStatement		203:8:8033:8088	693986	1					
ANR	694891	IdentifierDeclStatement	chunk_free_node_t * gtfree = ( chunk_free_node_t * ) ( * gtp ) ;	1251:8:42384:42439	693986	0	True				
ANR	694892	IdentifierDecl	* gtfree = ( chunk_free_node_t * ) ( * gtp )		693986	0					
ANR	694893	IdentifierDeclType	chunk_free_node_t *		693986	0					
ANR	694894	Identifier	gtfree		693986	1					
ANR	694895	AssignmentExpression	* gtfree = ( chunk_free_node_t * ) ( * gtp )		693986	2		=			
ANR	694896	Identifier	gtfree		693986	0					
ANR	694897	CastExpression	( chunk_free_node_t * ) ( * gtp )		693986	1					
ANR	694898	CastTarget	chunk_free_node_t *		693986	0					
ANR	694899	UnaryOperationExpression	* gtp		693986	1					
ANR	694900	UnaryOperator	*		693986	0					
ANR	694901	Identifier	gtp		693986	1					
ANR	694902	IfStatement	if ( ( ( ( byte * ) obj ) + obj -> size ) == ( byte * ) ( void * ) gtfree )		693986	1					
ANR	694903	Condition	( ( ( byte * ) obj ) + obj -> size ) == ( byte * ) ( void * ) gtfree	1252:12:42453:42505	693986	0	True				
ANR	694904	EqualityExpression	( ( ( byte * ) obj ) + obj -> size ) == ( byte * ) ( void * ) gtfree		693986	0		==			
ANR	694905	AdditiveExpression	( ( byte * ) obj ) + obj -> size		693986	0		+			
ANR	694906	CastExpression	( byte * ) obj		693986	0					
ANR	694907	CastTarget	byte *		693986	0					
ANR	694908	Identifier	obj		693986	1					
ANR	694909	PtrMemberAccess	obj -> size		693986	1					
ANR	694910	Identifier	obj		693986	0					
ANR	694911	Identifier	size		693986	1					
ANR	694912	CastExpression	( byte * ) ( void * ) gtfree		693986	1					
ANR	694913	CastTarget	byte *		693986	0					
ANR	694914	CastExpression	( void * ) gtfree		693986	1					
ANR	694915	CastTarget	void *		693986	0					
ANR	694916	Identifier	gtfree		693986	1					
ANR	694917	CompoundStatement		207:12:8271:8296	693986	1					
ANR	694918	IdentifierDeclStatement	chunk_free_node_t * objfree = ( chunk_free_node_t * ) ( void * ) obj ;	1254:12:42547:42608	693986	0	True				
ANR	694919	IdentifierDecl	* objfree = ( chunk_free_node_t * ) ( void * ) obj		693986	0					
ANR	694920	IdentifierDeclType	chunk_free_node_t *		693986	0					
ANR	694921	Identifier	objfree		693986	1					
ANR	694922	AssignmentExpression	* objfree = ( chunk_free_node_t * ) ( void * ) obj		693986	2		=			
ANR	694923	Identifier	objfree		693986	0					
ANR	694924	CastExpression	( chunk_free_node_t * ) ( void * ) obj		693986	1					
ANR	694925	CastTarget	chunk_free_node_t *		693986	0					
ANR	694926	CastExpression	( void * ) obj		693986	1					
ANR	694927	CastTarget	void *		693986	0					
ANR	694928	Identifier	obj		693986	1					
ANR	694929	IdentifierDeclStatement	uint obj_size = obj -> size ;	1255:12:42622:42647	693986	1	True				
ANR	694930	IdentifierDecl	obj_size = obj -> size		693986	0					
ANR	694931	IdentifierDeclType	uint		693986	0					
ANR	694932	Identifier	obj_size		693986	1					
ANR	694933	AssignmentExpression	obj_size = obj -> size		693986	2		=			
ANR	694934	Identifier	obj_size		693986	0					
ANR	694935	PtrMemberAccess	obj -> size		693986	1					
ANR	694936	Identifier	obj		693986	0					
ANR	694937	Identifier	size		693986	1					
ANR	694938	ExpressionStatement	cmem -> total_free += obj_size	1256:12:42661:42689	693986	2	True				
ANR	694939	AssignmentExpression	cmem -> total_free += obj_size		693986	0		+=			
ANR	694940	PtrMemberAccess	cmem -> total_free		693986	0					
ANR	694941	Identifier	cmem		693986	0					
ANR	694942	Identifier	total_free		693986	1					
ANR	694943	Identifier	obj_size		693986	1					
ANR	694944	ExpressionStatement	"remove_free_size ( cmem , gtfree )"	1257:12:42703:42733	693986	3	True				
ANR	694945	CallExpression	"remove_free_size ( cmem , gtfree )"		693986	0					
ANR	694946	Callee	remove_free_size		693986	0					
ANR	694947	Identifier	remove_free_size		693986	0					
ANR	694948	ArgumentList	cmem		693986	1					
ANR	694949	Argument	cmem		693986	0					
ANR	694950	Identifier	cmem		693986	0					
ANR	694951	Argument	gtfree		693986	1					
ANR	694952	Identifier	gtfree		693986	0					
ANR	694953	ExpressionStatement	* objfree = * gtfree	1258:12:42747:42765	693986	4	True				
ANR	694954	AssignmentExpression	* objfree = * gtfree		693986	0		=			
ANR	694955	UnaryOperationExpression	* objfree		693986	0					
ANR	694956	UnaryOperator	*		693986	0					
ANR	694957	Identifier	objfree		693986	1					
ANR	694958	UnaryOperationExpression	* gtfree		693986	1					
ANR	694959	UnaryOperator	*		693986	0					
ANR	694960	Identifier	gtfree		693986	1					
ANR	694961	ExpressionStatement	objfree -> size += obj_size	1259:12:42779:42804	693986	5	True				
ANR	694962	AssignmentExpression	objfree -> size += obj_size		693986	0		+=			
ANR	694963	PtrMemberAccess	objfree -> size		693986	0					
ANR	694964	Identifier	objfree		693986	0					
ANR	694965	Identifier	size		693986	1					
ANR	694966	Identifier	obj_size		693986	1					
ANR	694967	ExpressionStatement	* gtp = objfree	1260:12:42818:42832	693986	6	True				
ANR	694968	AssignmentExpression	* gtp = objfree		693986	0		=			
ANR	694969	UnaryOperationExpression	* gtp		693986	0					
ANR	694970	UnaryOperator	*		693986	0					
ANR	694971	Identifier	gtp		693986	1					
ANR	694972	Identifier	objfree		693986	1					
ANR	694973	ExpressionStatement	"insert_free_size ( cmem , objfree )"	1261:12:42846:42877	693986	7	True				
ANR	694974	CallExpression	"insert_free_size ( cmem , objfree )"		693986	0					
ANR	694975	Callee	insert_free_size		693986	0					
ANR	694976	Identifier	insert_free_size		693986	0					
ANR	694977	ArgumentList	cmem		693986	1					
ANR	694978	Argument	cmem		693986	0					
ANR	694979	Identifier	cmem		693986	0					
ANR	694980	Argument	objfree		693986	1					
ANR	694981	Identifier	objfree		693986	0					
ANR	694982	IfStatement	if ( gs_alloc_debug )		693986	8					
ANR	694983	Condition	gs_alloc_debug	1262:16:42895:42908	693986	0	True				
ANR	694984	Identifier	gs_alloc_debug		693986	0					
ANR	694985	ExpressionStatement	"memset ( ( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) , 0x96 , objfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) )"	1263:16:42927:43053	693986	1	True				
ANR	694986	CallExpression	"memset ( ( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) , 0x96 , objfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) )"		693986	0					
ANR	694987	Callee	memset		693986	0					
ANR	694988	Identifier	memset		693986	0					
ANR	694989	ArgumentList	( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	1					
ANR	694990	Argument	( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	0					
ANR	694991	AdditiveExpression	( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	0		+			
ANR	694992	CastExpression	( byte * ) objfree		693986	0					
ANR	694993	CastTarget	byte *		693986	0					
ANR	694994	Identifier	objfree		693986	1					
ANR	694995	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	1					
ANR	694996	Callee	SIZEOF_ROUND_ALIGN		693986	0					
ANR	694997	Identifier	SIZEOF_ROUND_ALIGN		693986	0					
ANR	694998	ArgumentList	chunk_free_node_t		693986	1					
ANR	694999	Argument	chunk_free_node_t		693986	0					
ANR	695000	Identifier	chunk_free_node_t		693986	0					
ANR	695001	Argument	0x96		693986	1					
ANR	695002	PrimaryExpression	0x96		693986	0					
ANR	695003	Argument	objfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	2					
ANR	695004	AdditiveExpression	objfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	0		-			
ANR	695005	PtrMemberAccess	objfree -> size		693986	0					
ANR	695006	Identifier	objfree		693986	0					
ANR	695007	Identifier	size		693986	1					
ANR	695008	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	1					
ANR	695009	Callee	SIZEOF_ROUND_ALIGN		693986	0					
ANR	695010	Identifier	SIZEOF_ROUND_ALIGN		693986	0					
ANR	695011	ArgumentList	chunk_free_node_t		693986	1					
ANR	695012	Argument	chunk_free_node_t		693986	0					
ANR	695013	Identifier	chunk_free_node_t		693986	0					
ANR	695014	ExpressionStatement	obj = NULL	1264:12:43067:43077	693986	9	True				
ANR	695015	AssignmentExpression	obj = NULL		693986	0		=			
ANR	695016	Identifier	obj		693986	0					
ANR	695017	Identifier	NULL		693986	1					
ANR	695018	IfStatement	if ( obj )		693986	24					
ANR	695019	Condition	obj	1268:8:43104:43106	693986	0	True				
ANR	695020	Identifier	obj		693986	0					
ANR	695021	CompoundStatement		222:8:8797:8858	693986	1					
ANR	695022	IdentifierDeclStatement	chunk_free_node_t * objfree = ( chunk_free_node_t * ) ( void * ) obj ;	1270:8:43148:43209	693986	0	True				
ANR	695023	IdentifierDecl	* objfree = ( chunk_free_node_t * ) ( void * ) obj		693986	0					
ANR	695024	IdentifierDeclType	chunk_free_node_t *		693986	0					
ANR	695025	Identifier	objfree		693986	1					
ANR	695026	AssignmentExpression	* objfree = ( chunk_free_node_t * ) ( void * ) obj		693986	2		=			
ANR	695027	Identifier	objfree		693986	0					
ANR	695028	CastExpression	( chunk_free_node_t * ) ( void * ) obj		693986	1					
ANR	695029	CastTarget	chunk_free_node_t *		693986	0					
ANR	695030	CastExpression	( void * ) obj		693986	1					
ANR	695031	CastTarget	void *		693986	0					
ANR	695032	Identifier	obj		693986	1					
ANR	695033	ExpressionStatement	cmem -> total_free += obj -> size	1271:8:43219:43248	693986	1	True				
ANR	695034	AssignmentExpression	cmem -> total_free += obj -> size		693986	0		+=			
ANR	695035	PtrMemberAccess	cmem -> total_free		693986	0					
ANR	695036	Identifier	cmem		693986	0					
ANR	695037	Identifier	total_free		693986	1					
ANR	695038	PtrMemberAccess	obj -> size		693986	1					
ANR	695039	Identifier	obj		693986	0					
ANR	695040	Identifier	size		693986	1					
ANR	695041	ExpressionStatement	objfree -> size = obj -> size	1272:8:43258:43283	693986	2	True				
ANR	695042	AssignmentExpression	objfree -> size = obj -> size		693986	0		=			
ANR	695043	PtrMemberAccess	objfree -> size		693986	0					
ANR	695044	Identifier	objfree		693986	0					
ANR	695045	Identifier	size		693986	1					
ANR	695046	PtrMemberAccess	obj -> size		693986	1					
ANR	695047	Identifier	obj		693986	0					
ANR	695048	Identifier	size		693986	1					
ANR	695049	ExpressionStatement	objfree -> left_loc = NULL	1273:8:43293:43317	693986	3	True				
ANR	695050	AssignmentExpression	objfree -> left_loc = NULL		693986	0		=			
ANR	695051	PtrMemberAccess	objfree -> left_loc		693986	0					
ANR	695052	Identifier	objfree		693986	0					
ANR	695053	Identifier	left_loc		693986	1					
ANR	695054	Identifier	NULL		693986	1					
ANR	695055	ExpressionStatement	objfree -> right_loc = NULL	1274:8:43327:43352	693986	4	True				
ANR	695056	AssignmentExpression	objfree -> right_loc = NULL		693986	0		=			
ANR	695057	PtrMemberAccess	objfree -> right_loc		693986	0					
ANR	695058	Identifier	objfree		693986	0					
ANR	695059	Identifier	right_loc		693986	1					
ANR	695060	Identifier	NULL		693986	1					
ANR	695061	IfStatement	if ( gtp )		693986	5					
ANR	695062	Condition	gtp	1275:12:43366:43368	693986	0	True				
ANR	695063	Identifier	gtp		693986	0					
ANR	695064	CompoundStatement		227:17:9020:9020	693986	1					
ANR	695065	ExpressionStatement	ap = & ( * gtp ) -> left_loc	1276:12:43385:43407	693986	0	True				
ANR	695066	AssignmentExpression	ap = & ( * gtp ) -> left_loc		693986	0		=			
ANR	695067	Identifier	ap		693986	0					
ANR	695068	UnaryOperationExpression	& ( * gtp ) -> left_loc		693986	1					
ANR	695069	UnaryOperator	&		693986	0					
ANR	695070	PtrMemberAccess	( * gtp ) -> left_loc		693986	1					
ANR	695071	UnaryOperationExpression	* gtp		693986	0					
ANR	695072	UnaryOperator	*		693986	0					
ANR	695073	Identifier	gtp		693986	1					
ANR	695074	Identifier	left_loc		693986	1					
ANR	695075	WhileStatement	while ( * ap )		693986	1					
ANR	695076	Condition	* ap	1277:19:43428:43430	693986	0	True				
ANR	695077	UnaryOperationExpression	* ap		693986	0					
ANR	695078	UnaryOperator	*		693986	0					
ANR	695079	Identifier	ap		693986	1					
ANR	695080	CompoundStatement		229:24:9082:9082	693986	1					
ANR	695081	ExpressionStatement	ap = & ( * ap ) -> right_loc	1278:16:43451:43473	693986	0	True				
ANR	695082	AssignmentExpression	ap = & ( * ap ) -> right_loc		693986	0		=			
ANR	695083	Identifier	ap		693986	0					
ANR	695084	UnaryOperationExpression	& ( * ap ) -> right_loc		693986	1					
ANR	695085	UnaryOperator	&		693986	0					
ANR	695086	PtrMemberAccess	( * ap ) -> right_loc		693986	1					
ANR	695087	UnaryOperationExpression	* ap		693986	0					
ANR	695088	UnaryOperator	*		693986	0					
ANR	695089	Identifier	ap		693986	1					
ANR	695090	Identifier	right_loc		693986	1					
ANR	695091	ElseStatement	else		693986	0					
ANR	695092	IfStatement	if ( ltp )		693986	0					
ANR	695093	Condition	ltp	1280:19:43508:43510	693986	0	True				
ANR	695094	Identifier	ltp		693986	0					
ANR	695095	CompoundStatement		232:24:9162:9162	693986	1					
ANR	695096	ExpressionStatement	ap = & ( * ltp ) -> right_loc	1281:12:43527:43550	693986	0	True				
ANR	695097	AssignmentExpression	ap = & ( * ltp ) -> right_loc		693986	0		=			
ANR	695098	Identifier	ap		693986	0					
ANR	695099	UnaryOperationExpression	& ( * ltp ) -> right_loc		693986	1					
ANR	695100	UnaryOperator	&		693986	0					
ANR	695101	PtrMemberAccess	( * ltp ) -> right_loc		693986	1					
ANR	695102	UnaryOperationExpression	* ltp		693986	0					
ANR	695103	UnaryOperator	*		693986	0					
ANR	695104	Identifier	ltp		693986	1					
ANR	695105	Identifier	right_loc		693986	1					
ANR	695106	WhileStatement	while ( * ap )		693986	1					
ANR	695107	Condition	* ap	1282:19:43571:43573	693986	0	True				
ANR	695108	UnaryOperationExpression	* ap		693986	0					
ANR	695109	UnaryOperator	*		693986	0					
ANR	695110	Identifier	ap		693986	1					
ANR	695111	CompoundStatement		234:24:9225:9225	693986	1					
ANR	695112	ExpressionStatement	ap = & ( * ap ) -> left_loc	1283:16:43594:43615	693986	0	True				
ANR	695113	AssignmentExpression	ap = & ( * ap ) -> left_loc		693986	0		=			
ANR	695114	Identifier	ap		693986	0					
ANR	695115	UnaryOperationExpression	& ( * ap ) -> left_loc		693986	1					
ANR	695116	UnaryOperator	&		693986	0					
ANR	695117	PtrMemberAccess	( * ap ) -> left_loc		693986	1					
ANR	695118	UnaryOperationExpression	* ap		693986	0					
ANR	695119	UnaryOperator	*		693986	0					
ANR	695120	Identifier	ap		693986	1					
ANR	695121	Identifier	left_loc		693986	1					
ANR	695122	ElseStatement	else		693986	0					
ANR	695123	ExpressionStatement	ap = & cmem -> free_loc	1286:12:43658:43678	693986	0	True				
ANR	695124	AssignmentExpression	ap = & cmem -> free_loc		693986	0		=			
ANR	695125	Identifier	ap		693986	0					
ANR	695126	UnaryOperationExpression	& cmem -> free_loc		693986	1					
ANR	695127	UnaryOperator	&		693986	0					
ANR	695128	PtrMemberAccess	cmem -> free_loc		693986	1					
ANR	695129	Identifier	cmem		693986	0					
ANR	695130	Identifier	free_loc		693986	1					
ANR	695131	ExpressionStatement	* ap = objfree	1287:8:43688:43701	693986	6	True				
ANR	695132	AssignmentExpression	* ap = objfree		693986	0		=			
ANR	695133	UnaryOperationExpression	* ap		693986	0					
ANR	695134	UnaryOperator	*		693986	0					
ANR	695135	Identifier	ap		693986	1					
ANR	695136	Identifier	objfree		693986	1					
ANR	695137	ExpressionStatement	"insert_free_size ( cmem , objfree )"	1288:8:43711:43742	693986	7	True				
ANR	695138	CallExpression	"insert_free_size ( cmem , objfree )"		693986	0					
ANR	695139	Callee	insert_free_size		693986	0					
ANR	695140	Identifier	insert_free_size		693986	0					
ANR	695141	ArgumentList	cmem		693986	1					
ANR	695142	Argument	cmem		693986	0					
ANR	695143	Identifier	cmem		693986	0					
ANR	695144	Argument	objfree		693986	1					
ANR	695145	Identifier	objfree		693986	0					
ANR	695146	IfStatement	if ( gs_alloc_debug )		693986	8					
ANR	695147	Condition	gs_alloc_debug	1289:12:43756:43769	693986	0	True				
ANR	695148	Identifier	gs_alloc_debug		693986	0					
ANR	695149	ExpressionStatement	"memset ( ( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) , 0x9b , objfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) )"	1290:12:43784:43910	693986	1	True				
ANR	695150	CallExpression	"memset ( ( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) , 0x9b , objfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t ) )"		693986	0					
ANR	695151	Callee	memset		693986	0					
ANR	695152	Identifier	memset		693986	0					
ANR	695153	ArgumentList	( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	1					
ANR	695154	Argument	( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	0					
ANR	695155	AdditiveExpression	( ( byte * ) objfree ) + SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	0		+			
ANR	695156	CastExpression	( byte * ) objfree		693986	0					
ANR	695157	CastTarget	byte *		693986	0					
ANR	695158	Identifier	objfree		693986	1					
ANR	695159	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	1					
ANR	695160	Callee	SIZEOF_ROUND_ALIGN		693986	0					
ANR	695161	Identifier	SIZEOF_ROUND_ALIGN		693986	0					
ANR	695162	ArgumentList	chunk_free_node_t		693986	1					
ANR	695163	Argument	chunk_free_node_t		693986	0					
ANR	695164	Identifier	chunk_free_node_t		693986	0					
ANR	695165	Argument	0x9b		693986	1					
ANR	695166	PrimaryExpression	0x9b		693986	0					
ANR	695167	Argument	objfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	2					
ANR	695168	AdditiveExpression	objfree -> size - SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	0		-			
ANR	695169	PtrMemberAccess	objfree -> size		693986	0					
ANR	695170	Identifier	objfree		693986	0					
ANR	695171	Identifier	size		693986	1					
ANR	695172	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_free_node_t )		693986	1					
ANR	695173	Callee	SIZEOF_ROUND_ALIGN		693986	0					
ANR	695174	Identifier	SIZEOF_ROUND_ALIGN		693986	0					
ANR	695175	ArgumentList	chunk_free_node_t		693986	1					
ANR	695176	Argument	chunk_free_node_t		693986	0					
ANR	695177	Identifier	chunk_free_node_t		693986	0					
ANR	695178	ExpressionStatement	gs_memory_chunk_dump_memory ( cmem )	1294:4:43942:43975	693986	25	True				
ANR	695179	CallExpression	gs_memory_chunk_dump_memory ( cmem )		693986	0					
ANR	695180	Callee	gs_memory_chunk_dump_memory		693986	0					
ANR	695181	Identifier	gs_memory_chunk_dump_memory		693986	0					
ANR	695182	ArgumentList	cmem		693986	1					
ANR	695183	Argument	cmem		693986	0					
ANR	695184	Identifier	cmem		693986	0					
ANR	695185	ReturnType	static void		693986	1					
ANR	695186	Identifier	chunk_free_object		693986	2					
ANR	695187	ParameterList	"gs_memory_t * mem , void * ptr , client_name_t cname"		693986	3					
ANR	695188	Parameter	gs_memory_t * mem	1048:18:34300:34315	693986	0	True				
ANR	695189	ParameterType	gs_memory_t *		693986	0					
ANR	695190	Identifier	mem		693986	1					
ANR	695191	Parameter	void * ptr	1048:36:34318:34326	693986	1	True				
ANR	695192	ParameterType	void *		693986	0					
ANR	695193	Identifier	ptr		693986	1					
ANR	695194	Parameter	client_name_t cname	1048:47:34329:34347	693986	2	True				
ANR	695195	ParameterType	client_name_t		693986	0					
ANR	695196	Identifier	cname		693986	1					
ANR	695197	CFGEntryNode	ENTRY		693986		True				
ANR	695198	CFGExitNode	EXIT		693986		True				
ANR	695199	Symbol	b -> left_loc		693986						
ANR	695200	Symbol	* gtfree		693986						
ANR	695201	Symbol	& b -> right_loc		693986						
ANR	695202	Symbol	c -> left_loc		693986						
ANR	695203	Symbol	ltfree -> size		693986						
ANR	695204	Symbol	gs_alloc_debug		693986						
ANR	695205	Symbol	chunk_free_node_t		693986						
ANR	695206	Symbol	gtfree		693986						
ANR	695207	Symbol	cmem -> sequence		693986						
ANR	695208	Symbol	a -> left_loc		693986						
ANR	695209	Symbol	SINGLE_OBJECT_CHUNK		693986						
ANR	695210	Symbol	* ltp		693986						
ANR	695211	Symbol	objfree -> size		693986						
ANR	695212	Symbol	& ( * ltp ) -> right_loc		693986						
ANR	695213	Symbol	* objfree		693986						
ANR	695214	Symbol	objfree -> left_loc		693986						
ANR	695215	Symbol	* obj -> type		693986						
ANR	695216	Symbol	& ( * ap ) -> right_loc		693986						
ANR	695217	Symbol	obj -> type		693986						
ANR	695218	Symbol	gtp		693986						
ANR	695219	Symbol	cmem -> defer_finalize_list		693986						
ANR	695220	Symbol	NULL		693986						
ANR	695221	Symbol	objfree -> right_loc		693986						
ANR	695222	Symbol	ltfree		693986						
ANR	695223	Symbol	* finalize		693986						
ANR	695224	Symbol	ap		693986						
ANR	695225	Symbol	& ( * ap ) -> left_loc		693986						
ANR	695226	Symbol	SIZEOF_ROUND_ALIGN		693986						
ANR	695227	Symbol	client_name_string		693986						
ANR	695228	Symbol	cmem		693986						
ANR	695229	Symbol	* ltfree		693986						
ANR	695230	Symbol	& cmem -> free_loc		693986						
ANR	695231	Symbol	& ( * gtp ) -> left_loc		693986						
ANR	695232	Symbol	& c -> right_loc		693986						
ANR	695233	Symbol	& c -> left_loc		693986						
ANR	695234	Symbol	cname		693986						
ANR	695235	Symbol	cmem -> total_free		693986						
ANR	695236	Symbol	* * obj		693986						
ANR	695237	Symbol	& a -> right_loc		693986						
ANR	695238	Symbol	obj_node_size		693986						
ANR	695239	Symbol	mem		693986						
ANR	695240	Symbol	* cmem		693986						
ANR	695241	Symbol	chunk_obj_node_t		693986						
ANR	695242	Symbol	cmem -> deferring		693986						
ANR	695243	Symbol	cmem -> target		693986						
ANR	695244	Symbol	obj -> sequence		693986						
ANR	695245	Symbol	gtfree -> size		693986						
ANR	695246	Symbol	obj_size		693986						
ANR	695247	Symbol	obj -> type -> finalize		693986						
ANR	695248	Symbol	a		693986						
ANR	695249	Symbol	* obj		693986						
ANR	695250	Symbol	b		693986						
ANR	695251	Symbol	obj -> padding		693986						
ANR	695252	Symbol	c		693986						
ANR	695253	Symbol	c -> right_loc		693986						
ANR	695254	Symbol	obj -> size		693986						
ANR	695255	Symbol	ltp		693986						
ANR	695256	Symbol	* a		693986						
ANR	695257	Symbol	* b		693986						
ANR	695258	Symbol	* c		693986						
ANR	695259	Symbol	ptr		693986						
ANR	695260	Symbol	obj -> defer_next		693986						
ANR	695261	Symbol	* gtp		693986						
ANR	695262	Symbol	obj		693986						
ANR	695263	Symbol	* ap		693986						
ANR	695264	Symbol	objfree		693986						
ANR	695265	Symbol	finalize		693986						
ANR	695266	Symbol	& b -> left_loc		693986						
ANR	695267	Symbol	b -> right_loc		693986						
ANR	695268	Symbol	a -> right_loc		693986						
ANR	695269	Symbol	& a -> left_loc		693986						
ANR	695270	Function	chunk_alloc_string_immovable	1298:0:43987:44170							
ANR	695271	FunctionDef	"chunk_alloc_string_immovable (gs_memory_t * mem , uint nbytes , client_name_t cname)"		695270	0					
ANR	695272	CompoundStatement		1300:0:44083:44170	695270	0					
ANR	695273	ReturnStatement	"return chunk_alloc_bytes ( mem , nbytes , cname ) ;"	1302:4:44124:44168	695270	0	True				
ANR	695274	CallExpression	"chunk_alloc_bytes ( mem , nbytes , cname )"		695270	0					
ANR	695275	Callee	chunk_alloc_bytes		695270	0					
ANR	695276	Identifier	chunk_alloc_bytes		695270	0					
ANR	695277	ArgumentList	mem		695270	1					
ANR	695278	Argument	mem		695270	0					
ANR	695279	Identifier	mem		695270	0					
ANR	695280	Argument	nbytes		695270	1					
ANR	695281	Identifier	nbytes		695270	0					
ANR	695282	Argument	cname		695270	2					
ANR	695283	Identifier	cname		695270	0					
ANR	695284	ReturnType	static byte *		695270	1					
ANR	695285	Identifier	chunk_alloc_string_immovable		695270	2					
ANR	695286	ParameterList	"gs_memory_t * mem , uint nbytes , client_name_t cname"		695270	3					
ANR	695287	Parameter	gs_memory_t * mem	1299:29:44030:44046	695270	0	True				
ANR	695288	ParameterType	gs_memory_t *		695270	0					
ANR	695289	Identifier	mem		695270	1					
ANR	695290	Parameter	uint nbytes	1299:48:44049:44059	695270	1	True				
ANR	695291	ParameterType	uint		695270	0					
ANR	695292	Identifier	nbytes		695270	1					
ANR	695293	Parameter	client_name_t cname	1299:61:44062:44080	695270	2	True				
ANR	695294	ParameterType	client_name_t		695270	0					
ANR	695295	Identifier	cname		695270	1					
ANR	695296	CFGEntryNode	ENTRY		695270		True				
ANR	695297	CFGExitNode	EXIT		695270		True				
ANR	695298	Symbol	chunk_alloc_bytes		695270						
ANR	695299	Symbol	mem		695270						
ANR	695300	Symbol	cname		695270						
ANR	695301	Symbol	nbytes		695270						
ANR	695302	Function	chunk_alloc_string	1305:0:44173:44346							
ANR	695303	FunctionDef	"chunk_alloc_string (gs_memory_t * mem , uint nbytes , client_name_t cname)"		695302	0					
ANR	695304	CompoundStatement		1307:0:44259:44346	695302	0					
ANR	695305	ReturnStatement	"return chunk_alloc_bytes ( mem , nbytes , cname ) ;"	1309:4:44300:44344	695302	0	True				
ANR	695306	CallExpression	"chunk_alloc_bytes ( mem , nbytes , cname )"		695302	0					
ANR	695307	Callee	chunk_alloc_bytes		695302	0					
ANR	695308	Identifier	chunk_alloc_bytes		695302	0					
ANR	695309	ArgumentList	mem		695302	1					
ANR	695310	Argument	mem		695302	0					
ANR	695311	Identifier	mem		695302	0					
ANR	695312	Argument	nbytes		695302	1					
ANR	695313	Identifier	nbytes		695302	0					
ANR	695314	Argument	cname		695302	2					
ANR	695315	Identifier	cname		695302	0					
ANR	695316	ReturnType	static byte *		695302	1					
ANR	695317	Identifier	chunk_alloc_string		695302	2					
ANR	695318	ParameterList	"gs_memory_t * mem , uint nbytes , client_name_t cname"		695302	3					
ANR	695319	Parameter	gs_memory_t * mem	1306:19:44206:44222	695302	0	True				
ANR	695320	ParameterType	gs_memory_t *		695302	0					
ANR	695321	Identifier	mem		695302	1					
ANR	695322	Parameter	uint nbytes	1306:38:44225:44235	695302	1	True				
ANR	695323	ParameterType	uint		695302	0					
ANR	695324	Identifier	nbytes		695302	1					
ANR	695325	Parameter	client_name_t cname	1306:51:44238:44256	695302	2	True				
ANR	695326	ParameterType	client_name_t		695302	0					
ANR	695327	Identifier	cname		695302	1					
ANR	695328	CFGEntryNode	ENTRY		695302		True				
ANR	695329	CFGExitNode	EXIT		695302		True				
ANR	695330	Symbol	chunk_alloc_bytes		695302						
ANR	695331	Symbol	mem		695302						
ANR	695332	Symbol	cname		695302						
ANR	695333	Symbol	nbytes		695302						
ANR	695334	Function	chunk_resize_string	1312:0:44349:44588							
ANR	695335	FunctionDef	"chunk_resize_string (gs_memory_t * mem , byte * data , uint old_num , uint new_num , client_name_t cname)"		695334	0					
ANR	695336	CompoundStatement		1315:0:44480:44588	695334	0					
ANR	695337	ReturnStatement	"return chunk_resize_object ( mem , data , new_num , cname ) ;"	1317:4:44533:44586	695334	0	True				
ANR	695338	CallExpression	"chunk_resize_object ( mem , data , new_num , cname )"		695334	0					
ANR	695339	Callee	chunk_resize_object		695334	0					
ANR	695340	Identifier	chunk_resize_object		695334	0					
ANR	695341	ArgumentList	mem		695334	1					
ANR	695342	Argument	mem		695334	0					
ANR	695343	Identifier	mem		695334	0					
ANR	695344	Argument	data		695334	1					
ANR	695345	Identifier	data		695334	0					
ANR	695346	Argument	new_num		695334	2					
ANR	695347	Identifier	new_num		695334	0					
ANR	695348	Argument	cname		695334	3					
ANR	695349	Identifier	cname		695334	0					
ANR	695350	ReturnType	static byte *		695334	1					
ANR	695351	Identifier	chunk_resize_string		695334	2					
ANR	695352	ParameterList	"gs_memory_t * mem , byte * data , uint old_num , uint new_num , client_name_t cname"		695334	3					
ANR	695353	Parameter	gs_memory_t * mem	1313:20:44383:44399	695334	0	True				
ANR	695354	ParameterType	gs_memory_t *		695334	0					
ANR	695355	Identifier	mem		695334	1					
ANR	695356	Parameter	byte * data	1313:39:44402:44412	695334	1	True				
ANR	695357	ParameterType	byte *		695334	0					
ANR	695358	Identifier	data		695334	1					
ANR	695359	Parameter	uint old_num	1313:52:44415:44426	695334	2	True				
ANR	695360	ParameterType	uint		695334	0					
ANR	695361	Identifier	old_num		695334	1					
ANR	695362	Parameter	uint new_num	1313:66:44429:44440	695334	3	True				
ANR	695363	ParameterType	uint		695334	0					
ANR	695364	Identifier	new_num		695334	1					
ANR	695365	Parameter	client_name_t cname	1314:16:44459:44477	695334	4	True				
ANR	695366	ParameterType	client_name_t		695334	0					
ANR	695367	Identifier	cname		695334	1					
ANR	695368	CFGEntryNode	ENTRY		695334		True				
ANR	695369	CFGExitNode	EXIT		695334		True				
ANR	695370	Symbol	chunk_resize_object		695334						
ANR	695371	Symbol	old_num		695334						
ANR	695372	Symbol	mem		695334						
ANR	695373	Symbol	data		695334						
ANR	695374	Symbol	new_num		695334						
ANR	695375	Symbol	cname		695334						
ANR	695376	Function	chunk_free_string	1320:0:44591:44744							
ANR	695377	FunctionDef	"chunk_free_string (gs_memory_t * mem , byte * data , uint nbytes , client_name_t cname)"		695376	0					
ANR	695378	CompoundStatement		1323:0:44701:44744	695376	0					
ANR	695379	ExpressionStatement	"chunk_free_object ( mem , data , cname )"	1324:4:44707:44742	695376	0	True				
ANR	695380	CallExpression	"chunk_free_object ( mem , data , cname )"		695376	0					
ANR	695381	Callee	chunk_free_object		695376	0					
ANR	695382	Identifier	chunk_free_object		695376	0					
ANR	695383	ArgumentList	mem		695376	1					
ANR	695384	Argument	mem		695376	0					
ANR	695385	Identifier	mem		695376	0					
ANR	695386	Argument	data		695376	1					
ANR	695387	Identifier	data		695376	0					
ANR	695388	Argument	cname		695376	2					
ANR	695389	Identifier	cname		695376	0					
ANR	695390	ReturnType	static void		695376	1					
ANR	695391	Identifier	chunk_free_string		695376	2					
ANR	695392	ParameterList	"gs_memory_t * mem , byte * data , uint nbytes , client_name_t cname"		695376	3					
ANR	695393	Parameter	gs_memory_t * mem	1321:18:44621:44637	695376	0	True				
ANR	695394	ParameterType	gs_memory_t *		695376	0					
ANR	695395	Identifier	mem		695376	1					
ANR	695396	Parameter	byte * data	1321:37:44640:44650	695376	1	True				
ANR	695397	ParameterType	byte *		695376	0					
ANR	695398	Identifier	data		695376	1					
ANR	695399	Parameter	uint nbytes	1321:50:44653:44663	695376	2	True				
ANR	695400	ParameterType	uint		695376	0					
ANR	695401	Identifier	nbytes		695376	1					
ANR	695402	Parameter	client_name_t cname	1322:14:44680:44698	695376	3	True				
ANR	695403	ParameterType	client_name_t		695376	0					
ANR	695404	Identifier	cname		695376	1					
ANR	695405	CFGEntryNode	ENTRY		695376		True				
ANR	695406	CFGExitNode	EXIT		695376		True				
ANR	695407	Symbol	mem		695376						
ANR	695408	Symbol	data		695376						
ANR	695409	Symbol	cname		695376						
ANR	695410	Symbol	nbytes		695376						
ANR	695411	Function	chunk_status	1327:0:44747:45088							
ANR	695412	FunctionDef	"chunk_status (gs_memory_t * mem , gs_memory_status_t * pstat)"		695411	0					
ANR	695413	CompoundStatement		1329:0:44819:45088	695411	0					
ANR	695414	IdentifierDeclStatement	gs_memory_chunk_t * cmem = ( gs_memory_chunk_t * ) mem ;	1330:4:44825:44875	695411	0	True				
ANR	695415	IdentifierDecl	* cmem = ( gs_memory_chunk_t * ) mem		695411	0					
ANR	695416	IdentifierDeclType	gs_memory_chunk_t *		695411	0					
ANR	695417	Identifier	cmem		695411	1					
ANR	695418	AssignmentExpression	* cmem = ( gs_memory_chunk_t * ) mem		695411	2		=			
ANR	695419	Identifier	cmem		695411	0					
ANR	695420	CastExpression	( gs_memory_chunk_t * ) mem		695411	1					
ANR	695421	CastTarget	gs_memory_chunk_t *		695411	0					
ANR	695422	Identifier	mem		695411	1					
ANR	695423	ExpressionStatement	pstat -> allocated = cmem -> used	1332:4:44882:44911	695411	1	True				
ANR	695424	AssignmentExpression	pstat -> allocated = cmem -> used		695411	0		=			
ANR	695425	PtrMemberAccess	pstat -> allocated		695411	0					
ANR	695426	Identifier	pstat		695411	0					
ANR	695427	Identifier	allocated		695411	1					
ANR	695428	PtrMemberAccess	cmem -> used		695411	1					
ANR	695429	Identifier	cmem		695411	0					
ANR	695430	Identifier	used		695411	1					
ANR	695431	ExpressionStatement	pstat -> used = cmem -> used - cmem -> total_free	1333:4:44917:44960	695411	2	True				
ANR	695432	AssignmentExpression	pstat -> used = cmem -> used - cmem -> total_free		695411	0		=			
ANR	695433	PtrMemberAccess	pstat -> used		695411	0					
ANR	695434	Identifier	pstat		695411	0					
ANR	695435	Identifier	used		695411	1					
ANR	695436	AdditiveExpression	cmem -> used - cmem -> total_free		695411	1		-			
ANR	695437	PtrMemberAccess	cmem -> used		695411	0					
ANR	695438	Identifier	cmem		695411	0					
ANR	695439	Identifier	used		695411	1					
ANR	695440	PtrMemberAccess	cmem -> total_free		695411	1					
ANR	695441	Identifier	cmem		695411	0					
ANR	695442	Identifier	total_free		695411	1					
ANR	695443	ExpressionStatement	pstat -> max_used = cmem -> max_used	1334:4:44966:44998	695411	3	True				
ANR	695444	AssignmentExpression	pstat -> max_used = cmem -> max_used		695411	0		=			
ANR	695445	PtrMemberAccess	pstat -> max_used		695411	0					
ANR	695446	Identifier	pstat		695411	0					
ANR	695447	Identifier	max_used		695411	1					
ANR	695448	PtrMemberAccess	cmem -> max_used		695411	1					
ANR	695449	Identifier	cmem		695411	0					
ANR	695450	Identifier	max_used		695411	1					
ANR	695451	ExpressionStatement	pstat -> is_thread_safe = false	1335:4:45004:45033	695411	4	True				
ANR	695452	AssignmentExpression	pstat -> is_thread_safe = false		695411	0		=			
ANR	695453	PtrMemberAccess	pstat -> is_thread_safe		695411	0					
ANR	695454	Identifier	pstat		695411	0					
ANR	695455	Identifier	is_thread_safe		695411	1					
ANR	695456	Identifier	false		695411	1					
ANR	695457	ReturnType	static void		695411	1					
ANR	695458	Identifier	chunk_status		695411	2					
ANR	695459	ParameterList	"gs_memory_t * mem , gs_memory_status_t * pstat"		695411	3					
ANR	695460	Parameter	gs_memory_t * mem	1328:13:44772:44788	695411	0	True				
ANR	695461	ParameterType	gs_memory_t *		695411	0					
ANR	695462	Identifier	mem		695411	1					
ANR	695463	Parameter	gs_memory_status_t * pstat	1328:32:44791:44816	695411	1	True				
ANR	695464	ParameterType	gs_memory_status_t *		695411	0					
ANR	695465	Identifier	pstat		695411	1					
ANR	695466	CFGEntryNode	ENTRY		695411		True				
ANR	695467	CFGExitNode	EXIT		695411		True				
ANR	695468	Symbol	pstat		695411						
ANR	695469	Symbol	false		695411						
ANR	695470	Symbol	cmem -> used		695411						
ANR	695471	Symbol	cmem -> total_free		695411						
ANR	695472	Symbol	pstat -> used		695411						
ANR	695473	Symbol	cmem -> max_used		695411						
ANR	695474	Symbol	pstat -> is_thread_safe		695411						
ANR	695475	Symbol	* pstat		695411						
ANR	695476	Symbol	mem		695411						
ANR	695477	Symbol	pstat -> max_used		695411						
ANR	695478	Symbol	pstat -> allocated		695411						
ANR	695479	Symbol	* cmem		695411						
ANR	695480	Symbol	cmem		695411						
ANR	695481	Function	chunk_stable	1338:0:45091:45162							
ANR	695482	FunctionDef	chunk_stable (gs_memory_t * mem)		695481	0					
ANR	695483	CompoundStatement		1340:0:45144:45162	695481	0					
ANR	695484	ReturnStatement	return mem ;	1341:4:45150:45160	695481	0	True				
ANR	695485	Identifier	mem		695481	0					
ANR	695486	ReturnType	static gs_memory_t *		695481	1					
ANR	695487	Identifier	chunk_stable		695481	2					
ANR	695488	ParameterList	gs_memory_t * mem		695481	3					
ANR	695489	Parameter	gs_memory_t * mem	1339:13:45125:45141	695481	0	True				
ANR	695490	ParameterType	gs_memory_t *		695481	0					
ANR	695491	Identifier	mem		695481	1					
ANR	695492	CFGEntryNode	ENTRY		695481		True				
ANR	695493	CFGExitNode	EXIT		695481		True				
ANR	695494	Symbol	mem		695481						
ANR	695495	Function	chunk_enable_free	1344:0:45165:45229							
ANR	695496	FunctionDef	"chunk_enable_free (gs_memory_t * mem , bool enable)"		695495	0					
ANR	695497	CompoundStatement		1346:0:45227:45229	695495	0					
ANR	695498	ReturnType	static void		695495	1					
ANR	695499	Identifier	chunk_enable_free		695495	2					
ANR	695500	ParameterList	"gs_memory_t * mem , bool enable"		695495	3					
ANR	695501	Parameter	gs_memory_t * mem	1345:18:45195:45211	695495	0	True				
ANR	695502	ParameterType	gs_memory_t *		695495	0					
ANR	695503	Identifier	mem		695495	1					
ANR	695504	Parameter	bool enable	1345:37:45214:45224	695495	1	True				
ANR	695505	ParameterType	bool		695495	0					
ANR	695506	Identifier	enable		695495	1					
ANR	695507	CFGEntryNode	ENTRY		695495		True				
ANR	695508	CFGExitNode	EXIT		695495		True				
ANR	695509	Symbol	mem		695495						
ANR	695510	Symbol	enable		695495						
ANR	695511	Function	chunk_set_object_type	1349:0:45232:45485							
ANR	695512	FunctionDef	"chunk_set_object_type (gs_memory_t * mem , void * ptr , gs_memory_type_ptr_t type)"		695511	0					
ANR	695513	CompoundStatement		1350:0:45322:45485	695511	0					
ANR	695514	IdentifierDeclStatement	chunk_obj_node_t * obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) ) ;	1351:4:45328:45426	695511	0	True				
ANR	695515	IdentifierDecl	* obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		695511	0					
ANR	695516	IdentifierDeclType	chunk_obj_node_t *		695511	0					
ANR	695517	Identifier	obj		695511	1					
ANR	695518	AssignmentExpression	* obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		695511	2		=			
ANR	695519	Identifier	obj		695511	0					
ANR	695520	CastExpression	( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		695511	1					
ANR	695521	CastTarget	chunk_obj_node_t *		695511	0					
ANR	695522	AdditiveExpression	( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695511	1		-			
ANR	695523	CastExpression	( byte * ) ptr		695511	0					
ANR	695524	CastTarget	byte *		695511	0					
ANR	695525	Identifier	ptr		695511	1					
ANR	695526	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695511	1					
ANR	695527	Callee	SIZEOF_ROUND_ALIGN		695511	0					
ANR	695528	Identifier	SIZEOF_ROUND_ALIGN		695511	0					
ANR	695529	ArgumentList	chunk_obj_node_t		695511	1					
ANR	695530	Argument	chunk_obj_node_t		695511	0					
ANR	695531	Identifier	chunk_obj_node_t		695511	0					
ANR	695532	IfStatement	if ( ptr == 0 )		695511	1					
ANR	695533	Condition	ptr == 0	1353:8:45437:45444	695511	0	True				
ANR	695534	EqualityExpression	ptr == 0		695511	0		==			
ANR	695535	Identifier	ptr		695511	0					
ANR	695536	PrimaryExpression	0		695511	1					
ANR	695537	ReturnStatement	return ;	1354:8:45455:45461	695511	1	True				
ANR	695538	ExpressionStatement	obj -> type = type	1355:4:45467:45483	695511	2	True				
ANR	695539	AssignmentExpression	obj -> type = type		695511	0		=			
ANR	695540	PtrMemberAccess	obj -> type		695511	0					
ANR	695541	Identifier	obj		695511	0					
ANR	695542	Identifier	type		695511	1					
ANR	695543	Identifier	type		695511	1					
ANR	695544	ReturnType	static void		695511	1					
ANR	695545	Identifier	chunk_set_object_type		695511	2					
ANR	695546	ParameterList	"gs_memory_t * mem , void * ptr , gs_memory_type_ptr_t type"		695511	3					
ANR	695547	Parameter	gs_memory_t * mem	1349:34:45266:45281	695511	0	True				
ANR	695548	ParameterType	gs_memory_t *		695511	0					
ANR	695549	Identifier	mem		695511	1					
ANR	695550	Parameter	void * ptr	1349:52:45284:45292	695511	1	True				
ANR	695551	ParameterType	void *		695511	0					
ANR	695552	Identifier	ptr		695511	1					
ANR	695553	Parameter	gs_memory_type_ptr_t type	1349:63:45295:45319	695511	2	True				
ANR	695554	ParameterType	gs_memory_type_ptr_t		695511	0					
ANR	695555	Identifier	type		695511	1					
ANR	695556	CFGEntryNode	ENTRY		695511		True				
ANR	695557	CFGExitNode	EXIT		695511		True				
ANR	695558	Symbol	obj -> type		695511						
ANR	695559	Symbol	* obj		695511						
ANR	695560	Symbol	mem		695511						
ANR	695561	Symbol	obj		695511						
ANR	695562	Symbol	SIZEOF_ROUND_ALIGN		695511						
ANR	695563	Symbol	chunk_obj_node_t		695511						
ANR	695564	Symbol	type		695511						
ANR	695565	Symbol	ptr		695511						
ANR	695566	Function	chunk_defer_frees	1358:0:45488:46685							
ANR	695567	FunctionDef	"chunk_defer_frees (gs_memory_t * mem , int defer)"		695566	0					
ANR	695568	CompoundStatement		1359:0:45547:46685	695566	0					
ANR	695569	IdentifierDeclStatement	gs_memory_chunk_t * cmem = ( gs_memory_chunk_t * ) mem ;	1360:4:45553:45603	695566	0	True				
ANR	695570	IdentifierDecl	* cmem = ( gs_memory_chunk_t * ) mem		695566	0					
ANR	695571	IdentifierDeclType	gs_memory_chunk_t *		695566	0					
ANR	695572	Identifier	cmem		695566	1					
ANR	695573	AssignmentExpression	* cmem = ( gs_memory_chunk_t * ) mem		695566	2		=			
ANR	695574	Identifier	cmem		695566	0					
ANR	695575	CastExpression	( gs_memory_chunk_t * ) mem		695566	1					
ANR	695576	CastTarget	gs_memory_chunk_t *		695566	0					
ANR	695577	Identifier	mem		695566	1					
ANR	695578	IdentifierDeclStatement	chunk_obj_node_t * n ;	1361:4:45609:45628	695566	1	True				
ANR	695579	IdentifierDecl	* n		695566	0					
ANR	695580	IdentifierDeclType	chunk_obj_node_t *		695566	0					
ANR	695581	Identifier	n		695566	1					
ANR	695582	IfStatement	if ( defer == 0 )		695566	2					
ANR	695583	Condition	defer == 0	1363:8:45639:45648	695566	0	True				
ANR	695584	EqualityExpression	defer == 0		695566	0		==			
ANR	695585	Identifier	defer		695566	0					
ANR	695586	PrimaryExpression	0		695566	1					
ANR	695587	CompoundStatement		5:20:103:103	695566	1					
ANR	695588	WhileStatement	while ( cmem -> defer_finalize_list )		695566	0					
ANR	695589	Condition	cmem -> defer_finalize_list	1367:15:45875:45899	695566	0	True				
ANR	695590	PtrMemberAccess	cmem -> defer_finalize_list		695566	0					
ANR	695591	Identifier	cmem		695566	0					
ANR	695592	Identifier	defer_finalize_list		695566	1					
ANR	695593	CompoundStatement		9:42:354:354	695566	1					
ANR	695594	ExpressionStatement	n = cmem -> defer_finalize_list	1368:12:45916:45945	695566	0	True				
ANR	695595	AssignmentExpression	n = cmem -> defer_finalize_list		695566	0		=			
ANR	695596	Identifier	n		695566	0					
ANR	695597	PtrMemberAccess	cmem -> defer_finalize_list		695566	1					
ANR	695598	Identifier	cmem		695566	0					
ANR	695599	Identifier	defer_finalize_list		695566	1					
ANR	695600	ExpressionStatement	cmem -> defer_finalize_list = n -> defer_next	1369:12:45959:46000	695566	1	True				
ANR	695601	AssignmentExpression	cmem -> defer_finalize_list = n -> defer_next		695566	0		=			
ANR	695602	PtrMemberAccess	cmem -> defer_finalize_list		695566	0					
ANR	695603	Identifier	cmem		695566	0					
ANR	695604	Identifier	defer_finalize_list		695566	1					
ANR	695605	PtrMemberAccess	n -> defer_next		695566	1					
ANR	695606	Identifier	n		695566	0					
ANR	695607	Identifier	defer_next		695566	1					
ANR	695608	IfStatement	if ( n -> type )		695566	2					
ANR	695609	Condition	n -> type	1370:16:46018:46024	695566	0	True				
ANR	695610	PtrMemberAccess	n -> type		695566	0					
ANR	695611	Identifier	n		695566	0					
ANR	695612	Identifier	type		695566	1					
ANR	695613	CompoundStatement		12:25:479:479	695566	1					
ANR	695614	IfStatement	if ( n -> type -> finalize )		695566	0					
ANR	695615	Condition	n -> type -> finalize	1371:20:46049:46065	695566	0	True				
ANR	695616	PtrMemberAccess	n -> type -> finalize		695566	0					
ANR	695617	PtrMemberAccess	n -> type		695566	0					
ANR	695618	Identifier	n		695566	0					
ANR	695619	Identifier	type		695566	1					
ANR	695620	Identifier	finalize		695566	1					
ANR	695621	ExpressionStatement	"n -> type -> finalize ( mem , ( ( byte * ) n ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )"	1372:20:46088:46162	695566	1	True				
ANR	695622	CallExpression	"n -> type -> finalize ( mem , ( ( byte * ) n ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )"		695566	0					
ANR	695623	Callee	n -> type -> finalize		695566	0					
ANR	695624	PtrMemberAccess	n -> type -> finalize		695566	0					
ANR	695625	PtrMemberAccess	n -> type		695566	0					
ANR	695626	Identifier	n		695566	0					
ANR	695627	Identifier	type		695566	1					
ANR	695628	Identifier	finalize		695566	1					
ANR	695629	ArgumentList	mem		695566	1					
ANR	695630	Argument	mem		695566	0					
ANR	695631	Identifier	mem		695566	0					
ANR	695632	Argument	( ( byte * ) n ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695566	1					
ANR	695633	AdditiveExpression	( ( byte * ) n ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695566	0		+			
ANR	695634	CastExpression	( byte * ) n		695566	0					
ANR	695635	CastTarget	byte *		695566	0					
ANR	695636	Identifier	n		695566	1					
ANR	695637	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695566	1					
ANR	695638	Callee	SIZEOF_ROUND_ALIGN		695566	0					
ANR	695639	Identifier	SIZEOF_ROUND_ALIGN		695566	0					
ANR	695640	ArgumentList	chunk_obj_node_t		695566	1					
ANR	695641	Argument	chunk_obj_node_t		695566	0					
ANR	695642	Identifier	chunk_obj_node_t		695566	0					
ANR	695643	ExpressionStatement	n -> type = NULL	1373:16:46180:46194	695566	1	True				
ANR	695644	AssignmentExpression	n -> type = NULL		695566	0		=			
ANR	695645	PtrMemberAccess	n -> type		695566	0					
ANR	695646	Identifier	n		695566	0					
ANR	695647	Identifier	type		695566	1					
ANR	695648	Identifier	NULL		695566	1					
ANR	695649	ExpressionStatement	n -> defer_next = cmem -> defer_free_list	1375:12:46222:46259	695566	3	True				
ANR	695650	AssignmentExpression	n -> defer_next = cmem -> defer_free_list		695566	0		=			
ANR	695651	PtrMemberAccess	n -> defer_next		695566	0					
ANR	695652	Identifier	n		695566	0					
ANR	695653	Identifier	defer_next		695566	1					
ANR	695654	PtrMemberAccess	cmem -> defer_free_list		695566	1					
ANR	695655	Identifier	cmem		695566	0					
ANR	695656	Identifier	defer_free_list		695566	1					
ANR	695657	ExpressionStatement	cmem -> defer_free_list = n	1376:12:46273:46298	695566	4	True				
ANR	695658	AssignmentExpression	cmem -> defer_free_list = n		695566	0		=			
ANR	695659	PtrMemberAccess	cmem -> defer_free_list		695566	0					
ANR	695660	Identifier	cmem		695566	0					
ANR	695661	Identifier	defer_free_list		695566	1					
ANR	695662	Identifier	n		695566	1					
ANR	695663	ExpressionStatement	cmem -> deferring = defer	1379:4:46320:46343	695566	3	True				
ANR	695664	AssignmentExpression	cmem -> deferring = defer		695566	0		=			
ANR	695665	PtrMemberAccess	cmem -> deferring		695566	0					
ANR	695666	Identifier	cmem		695566	0					
ANR	695667	Identifier	deferring		695566	1					
ANR	695668	Identifier	defer		695566	1					
ANR	695669	IfStatement	if ( defer == 0 )		695566	4					
ANR	695670	Condition	defer == 0	1380:8:46353:46362	695566	0	True				
ANR	695671	EqualityExpression	defer == 0		695566	0		==			
ANR	695672	Identifier	defer		695566	0					
ANR	695673	PrimaryExpression	0		695566	1					
ANR	695674	CompoundStatement		22:20:817:817	695566	1					
ANR	695675	WhileStatement	while ( cmem -> defer_free_list )		695566	0					
ANR	695676	Condition	cmem -> defer_free_list	1382:15:46449:46469	695566	0	True				
ANR	695677	PtrMemberAccess	cmem -> defer_free_list		695566	0					
ANR	695678	Identifier	cmem		695566	0					
ANR	695679	Identifier	defer_free_list		695566	1					
ANR	695680	CompoundStatement		24:38:924:924	695566	1					
ANR	695681	ExpressionStatement	n = cmem -> defer_free_list	1383:12:46486:46511	695566	0	True				
ANR	695682	AssignmentExpression	n = cmem -> defer_free_list		695566	0		=			
ANR	695683	Identifier	n		695566	0					
ANR	695684	PtrMemberAccess	cmem -> defer_free_list		695566	1					
ANR	695685	Identifier	cmem		695566	0					
ANR	695686	Identifier	defer_free_list		695566	1					
ANR	695687	ExpressionStatement	cmem -> defer_free_list = n -> defer_next	1384:12:46525:46562	695566	1	True				
ANR	695688	AssignmentExpression	cmem -> defer_free_list = n -> defer_next		695566	0		=			
ANR	695689	PtrMemberAccess	cmem -> defer_free_list		695566	0					
ANR	695690	Identifier	cmem		695566	0					
ANR	695691	Identifier	defer_free_list		695566	1					
ANR	695692	PtrMemberAccess	n -> defer_next		695566	1					
ANR	695693	Identifier	n		695566	0					
ANR	695694	Identifier	defer_next		695566	1					
ANR	695695	ExpressionStatement	"chunk_free_object ( mem , ( ( byte * ) n ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) , ""deferred free"" )"	1385:12:46576:46667	695566	2	True				
ANR	695696	CallExpression	"chunk_free_object ( mem , ( ( byte * ) n ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) , ""deferred free"" )"		695566	0					
ANR	695697	Callee	chunk_free_object		695566	0					
ANR	695698	Identifier	chunk_free_object		695566	0					
ANR	695699	ArgumentList	mem		695566	1					
ANR	695700	Argument	mem		695566	0					
ANR	695701	Identifier	mem		695566	0					
ANR	695702	Argument	( ( byte * ) n ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695566	1					
ANR	695703	AdditiveExpression	( ( byte * ) n ) + SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695566	0		+			
ANR	695704	CastExpression	( byte * ) n		695566	0					
ANR	695705	CastTarget	byte *		695566	0					
ANR	695706	Identifier	n		695566	1					
ANR	695707	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695566	1					
ANR	695708	Callee	SIZEOF_ROUND_ALIGN		695566	0					
ANR	695709	Identifier	SIZEOF_ROUND_ALIGN		695566	0					
ANR	695710	ArgumentList	chunk_obj_node_t		695566	1					
ANR	695711	Argument	chunk_obj_node_t		695566	0					
ANR	695712	Identifier	chunk_obj_node_t		695566	0					
ANR	695713	Argument	"""deferred free"""		695566	2					
ANR	695714	PrimaryExpression	"""deferred free"""		695566	0					
ANR	695715	ReturnType	static void		695566	1					
ANR	695716	Identifier	chunk_defer_frees		695566	2					
ANR	695717	ParameterList	"gs_memory_t * mem , int defer"		695566	3					
ANR	695718	Parameter	gs_memory_t * mem	1358:30:45518:45533	695566	0	True				
ANR	695719	ParameterType	gs_memory_t *		695566	0					
ANR	695720	Identifier	mem		695566	1					
ANR	695721	Parameter	int defer	1358:48:45536:45544	695566	1	True				
ANR	695722	ParameterType	int		695566	0					
ANR	695723	Identifier	defer		695566	1					
ANR	695724	CFGEntryNode	ENTRY		695566		True				
ANR	695725	CFGExitNode	EXIT		695566		True				
ANR	695726	Symbol	defer		695566						
ANR	695727	Symbol	cmem -> defer_finalize_list		695566						
ANR	695728	Symbol	NULL		695566						
ANR	695729	Symbol	n -> defer_next		695566						
ANR	695730	Symbol	n -> type -> finalize		695566						
ANR	695731	Symbol	n		695566						
ANR	695732	Symbol	cmem -> defer_free_list		695566						
ANR	695733	Symbol	mem		695566						
ANR	695734	Symbol	* cmem		695566						
ANR	695735	Symbol	* n		695566						
ANR	695736	Symbol	SIZEOF_ROUND_ALIGN		695566						
ANR	695737	Symbol	chunk_obj_node_t		695566						
ANR	695738	Symbol	cmem -> deferring		695566						
ANR	695739	Symbol	cmem		695566						
ANR	695740	Symbol	n -> type		695566						
ANR	695741	Symbol	* * n		695566						
ANR	695742	Symbol	* n -> type		695566						
ANR	695743	Function	chunk_consolidate_free	1390:0:46688:46743							
ANR	695744	FunctionDef	chunk_consolidate_free (gs_memory_t * mem)		695743	0					
ANR	695745	CompoundStatement		1392:0:46741:46743	695743	0					
ANR	695746	ReturnType	static void		695743	1					
ANR	695747	Identifier	chunk_consolidate_free		695743	2					
ANR	695748	ParameterList	gs_memory_t * mem		695743	3					
ANR	695749	Parameter	gs_memory_t * mem	1391:23:46723:46738	695743	0	True				
ANR	695750	ParameterType	gs_memory_t *		695743	0					
ANR	695751	Identifier	mem		695743	1					
ANR	695752	CFGEntryNode	ENTRY		695743		True				
ANR	695753	CFGExitNode	EXIT		695743		True				
ANR	695754	Symbol	mem		695743						
ANR	695755	Function	chunk_object_size	1396:0:46824:47034							
ANR	695756	FunctionDef	"chunk_object_size (gs_memory_t * mem , const void * ptr)"		695755	0					
ANR	695757	CompoundStatement		1398:0:46890:47034	695755	0					
ANR	695758	IdentifierDeclStatement	chunk_obj_node_t * obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) ) ;	1399:4:46896:46994	695755	0	True				
ANR	695759	IdentifierDecl	* obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		695755	0					
ANR	695760	IdentifierDeclType	chunk_obj_node_t *		695755	0					
ANR	695761	Identifier	obj		695755	1					
ANR	695762	AssignmentExpression	* obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		695755	2		=			
ANR	695763	Identifier	obj		695755	0					
ANR	695764	CastExpression	( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		695755	1					
ANR	695765	CastTarget	chunk_obj_node_t *		695755	0					
ANR	695766	AdditiveExpression	( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695755	1		-			
ANR	695767	CastExpression	( byte * ) ptr		695755	0					
ANR	695768	CastTarget	byte *		695755	0					
ANR	695769	Identifier	ptr		695755	1					
ANR	695770	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695755	1					
ANR	695771	Callee	SIZEOF_ROUND_ALIGN		695755	0					
ANR	695772	Identifier	SIZEOF_ROUND_ALIGN		695755	0					
ANR	695773	ArgumentList	chunk_obj_node_t		695755	1					
ANR	695774	Argument	chunk_obj_node_t		695755	0					
ANR	695775	Identifier	chunk_obj_node_t		695755	0					
ANR	695776	ReturnStatement	return obj -> size - obj -> padding ;	1401:4:47001:47032	695755	1	True				
ANR	695777	AdditiveExpression	obj -> size - obj -> padding		695755	0		-			
ANR	695778	PtrMemberAccess	obj -> size		695755	0					
ANR	695779	Identifier	obj		695755	0					
ANR	695780	Identifier	size		695755	1					
ANR	695781	PtrMemberAccess	obj -> padding		695755	1					
ANR	695782	Identifier	obj		695755	0					
ANR	695783	Identifier	padding		695755	1					
ANR	695784	ReturnType	static uint		695755	1					
ANR	695785	Identifier	chunk_object_size		695755	2					
ANR	695786	ParameterList	"gs_memory_t * mem , const void * ptr"		695755	3					
ANR	695787	Parameter	gs_memory_t * mem	1397:18:46854:46870	695755	0	True				
ANR	695788	ParameterType	gs_memory_t *		695755	0					
ANR	695789	Identifier	mem		695755	1					
ANR	695790	Parameter	const void * ptr	1397:37:46873:46887	695755	1	True				
ANR	695791	ParameterType	const void *		695755	0					
ANR	695792	Identifier	ptr		695755	1					
ANR	695793	CFGEntryNode	ENTRY		695755		True				
ANR	695794	CFGExitNode	EXIT		695755		True				
ANR	695795	Symbol	* obj		695755						
ANR	695796	Symbol	obj -> padding		695755						
ANR	695797	Symbol	mem		695755						
ANR	695798	Symbol	obj		695755						
ANR	695799	Symbol	obj -> size		695755						
ANR	695800	Symbol	SIZEOF_ROUND_ALIGN		695755						
ANR	695801	Symbol	chunk_obj_node_t		695755						
ANR	695802	Symbol	ptr		695755						
ANR	695803	Function	chunk_object_type	1404:0:47037:47253							
ANR	695804	FunctionDef	"chunk_object_type (const gs_memory_t * mem , const void * ptr)"		695803	0					
ANR	695805	CompoundStatement		1406:0:47125:47253	695803	0					
ANR	695806	IdentifierDeclStatement	chunk_obj_node_t * obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) ) ;	1407:4:47131:47229	695803	0	True				
ANR	695807	IdentifierDecl	* obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		695803	0					
ANR	695808	IdentifierDeclType	chunk_obj_node_t *		695803	0					
ANR	695809	Identifier	obj		695803	1					
ANR	695810	AssignmentExpression	* obj = ( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		695803	2		=			
ANR	695811	Identifier	obj		695803	0					
ANR	695812	CastExpression	( chunk_obj_node_t * ) ( ( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t ) )		695803	1					
ANR	695813	CastTarget	chunk_obj_node_t *		695803	0					
ANR	695814	AdditiveExpression	( ( byte * ) ptr ) - SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695803	1		-			
ANR	695815	CastExpression	( byte * ) ptr		695803	0					
ANR	695816	CastTarget	byte *		695803	0					
ANR	695817	Identifier	ptr		695803	1					
ANR	695818	CallExpression	SIZEOF_ROUND_ALIGN ( chunk_obj_node_t )		695803	1					
ANR	695819	Callee	SIZEOF_ROUND_ALIGN		695803	0					
ANR	695820	Identifier	SIZEOF_ROUND_ALIGN		695803	0					
ANR	695821	ArgumentList	chunk_obj_node_t		695803	1					
ANR	695822	Argument	chunk_obj_node_t		695803	0					
ANR	695823	Identifier	chunk_obj_node_t		695803	0					
ANR	695824	ReturnStatement	return obj -> type ;	1408:4:47235:47251	695803	1	True				
ANR	695825	PtrMemberAccess	obj -> type		695803	0					
ANR	695826	Identifier	obj		695803	0					
ANR	695827	Identifier	type		695803	1					
ANR	695828	ReturnType	static gs_memory_type_ptr_t		695803	1					
ANR	695829	Identifier	chunk_object_type		695803	2					
ANR	695830	ParameterList	"const gs_memory_t * mem , const void * ptr"		695803	3					
ANR	695831	Parameter	const gs_memory_t * mem	1405:18:47083:47105	695803	0	True				
ANR	695832	ParameterType	const gs_memory_t *		695803	0					
ANR	695833	Identifier	mem		695803	1					
ANR	695834	Parameter	const void * ptr	1405:43:47108:47122	695803	1	True				
ANR	695835	ParameterType	const void *		695803	0					
ANR	695836	Identifier	ptr		695803	1					
ANR	695837	CFGEntryNode	ENTRY		695803		True				
ANR	695838	CFGExitNode	EXIT		695803		True				
ANR	695839	Symbol	obj -> type		695803						
ANR	695840	Symbol	* obj		695803						
ANR	695841	Symbol	mem		695803						
ANR	695842	Symbol	obj		695803						
ANR	695843	Symbol	SIZEOF_ROUND_ALIGN		695803						
ANR	695844	Symbol	chunk_obj_node_t		695803						
ANR	695845	Symbol	ptr		695803						
ANR	695846	Function	chunk_register_root	1411:0:47256:47411							
ANR	695847	FunctionDef	"chunk_register_root (gs_memory_t * mem , gs_gc_root_t * rp , gs_ptr_type_t ptype , void * * up , client_name_t cname)"		695846	0					
ANR	695848	CompoundStatement		1414:0:47395:47411	695846	0					
ANR	695849	ReturnStatement	return 0 ;	1415:4:47401:47409	695846	0	True				
ANR	695850	PrimaryExpression	0		695846	0					
ANR	695851	ReturnType	static int		695846	1					
ANR	695852	Identifier	chunk_register_root		695846	2					
ANR	695853	ParameterList	"gs_memory_t * mem , gs_gc_root_t * rp , gs_ptr_type_t ptype , void * * up , client_name_t cname"		695846	3					
ANR	695854	Parameter	gs_memory_t * mem	1412:20:47287:47303	695846	0	True				
ANR	695855	ParameterType	gs_memory_t *		695846	0					
ANR	695856	Identifier	mem		695846	1					
ANR	695857	Parameter	gs_gc_root_t * rp	1412:39:47306:47322	695846	1	True				
ANR	695858	ParameterType	gs_gc_root_t *		695846	0					
ANR	695859	Identifier	rp		695846	1					
ANR	695860	Parameter	gs_ptr_type_t ptype	1412:58:47325:47343	695846	2	True				
ANR	695861	ParameterType	gs_ptr_type_t		695846	0					
ANR	695862	Identifier	ptype		695846	1					
ANR	695863	Parameter	void * * up	1413:17:47363:47371	695846	3	True				
ANR	695864	ParameterType	void * *		695846	0					
ANR	695865	Identifier	up		695846	1					
ANR	695866	Parameter	client_name_t cname	1413:28:47374:47392	695846	4	True				
ANR	695867	ParameterType	client_name_t		695846	0					
ANR	695868	Identifier	cname		695846	1					
ANR	695869	CFGEntryNode	ENTRY		695846		True				
ANR	695870	CFGExitNode	EXIT		695846		True				
ANR	695871	Symbol	mem		695846						
ANR	695872	Symbol	cname		695846						
ANR	695873	Symbol	ptype		695846						
ANR	695874	Symbol	up		695846						
ANR	695875	Symbol	rp		695846						
ANR	695876	Function	chunk_unregister_root	1418:0:47414:47509							
ANR	695877	FunctionDef	"chunk_unregister_root (gs_memory_t * mem , gs_gc_root_t * rp , client_name_t cname)"		695876	0					
ANR	695878	CompoundStatement		1420:0:47507:47509	695876	0					
ANR	695879	ReturnType	static void		695876	1					
ANR	695880	Identifier	chunk_unregister_root		695876	2					
ANR	695881	ParameterList	"gs_memory_t * mem , gs_gc_root_t * rp , client_name_t cname"		695876	3					
ANR	695882	Parameter	gs_memory_t * mem	1419:22:47448:47464	695876	0	True				
ANR	695883	ParameterType	gs_memory_t *		695876	0					
ANR	695884	Identifier	mem		695876	1					
ANR	695885	Parameter	gs_gc_root_t * rp	1419:41:47467:47483	695876	1	True				
ANR	695886	ParameterType	gs_gc_root_t *		695876	0					
ANR	695887	Identifier	rp		695876	1					
ANR	695888	Parameter	client_name_t cname	1419:60:47486:47504	695876	2	True				
ANR	695889	ParameterType	client_name_t		695876	0					
ANR	695890	Identifier	cname		695876	1					
ANR	695891	CFGEntryNode	ENTRY		695876		True				
ANR	695892	CFGExitNode	EXIT		695876		True				
ANR	695893	Symbol	mem		695876						
ANR	695894	Symbol	cname		695876						
ANR	695895	Symbol	rp		695876						
