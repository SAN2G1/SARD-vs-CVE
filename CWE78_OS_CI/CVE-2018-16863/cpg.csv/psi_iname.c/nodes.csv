command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8885139	File	data/converged/CVE-2018-16863_ghostpdl/psi_iname.c								
ANR	8885140	DeclStmt									
ANR	8885141	Decl							const uint	const uint	name_max_string
ANR	8885142	DeclStmt									
ANR	8885143	Decl							const byte	const byte [ 256 ]	hash_permutation
ANR	8885144	DeclStmt									
ANR	8885145	Decl							const byte	const byte [ NT_1CHAR_SIZE ]	nt_1char_names
ANR	8885146	DeclStmt									
ANR	8885147	Decl							void	"void ( const gs_memory_t * , void * )"	gs_names_finalize
ANR	8885148	DeclStmt									
ANR	8885149	Decl							int	int ( name_table * )	name_alloc_sub
ANR	8885150	DeclStmt									
ANR	8885151	Decl							void	"void ( name_table * , uint , bool )"	name_free_sub
ANR	8885152	DeclStmt									
ANR	8885153	Decl							void	"void ( name_table * , uint , bool , bool )"	name_scan_sub
ANR	8885154	Function	name_print	59:0:1950:2517							
ANR	8885155	FunctionDef	"name_print (const char * msg , const name_table * nt , uint nidx , const int * pflag)"		8885154	0					
ANR	8885156	CompoundStatement		61:0:2041:2517	8885154	0					
ANR	8885157	IdentifierDeclStatement	"const name_string_t * pnstr = names_index_string_inline ( nt , nidx ) ;"	62:4:2047:2111	8885154	0	True				
ANR	8885158	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , nidx )"		8885154	0					
ANR	8885159	IdentifierDeclType	const name_string_t *		8885154	0					
ANR	8885160	Identifier	pnstr		8885154	1					
ANR	8885161	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , nidx )"		8885154	2		=			
ANR	8885162	Identifier	pnstr		8885154	0					
ANR	8885163	CallExpression	"names_index_string_inline ( nt , nidx )"		8885154	1					
ANR	8885164	Callee	names_index_string_inline		8885154	0					
ANR	8885165	Identifier	names_index_string_inline		8885154	0					
ANR	8885166	ArgumentList	nt		8885154	1					
ANR	8885167	Argument	nt		8885154	0					
ANR	8885168	Identifier	nt		8885154	0					
ANR	8885169	Argument	nidx		8885154	1					
ANR	8885170	Identifier	nidx		8885154	0					
ANR	8885171	IdentifierDeclStatement	"const name * pname = names_index_ptr_inline ( nt , nidx ) ;"	63:4:2117:2169	8885154	1	True				
ANR	8885172	IdentifierDecl	"* pname = names_index_ptr_inline ( nt , nidx )"		8885154	0					
ANR	8885173	IdentifierDeclType	const name *		8885154	0					
ANR	8885174	Identifier	pname		8885154	1					
ANR	8885175	AssignmentExpression	"* pname = names_index_ptr_inline ( nt , nidx )"		8885154	2		=			
ANR	8885176	Identifier	pname		8885154	0					
ANR	8885177	CallExpression	"names_index_ptr_inline ( nt , nidx )"		8885154	1					
ANR	8885178	Callee	names_index_ptr_inline		8885154	0					
ANR	8885179	Identifier	names_index_ptr_inline		8885154	0					
ANR	8885180	ArgumentList	nt		8885154	1					
ANR	8885181	Argument	nt		8885154	0					
ANR	8885182	Identifier	nt		8885154	0					
ANR	8885183	Argument	nidx		8885154	1					
ANR	8885184	Identifier	nidx		8885154	0					
ANR	8885185	IdentifierDeclStatement	const byte * str = pnstr -> string_bytes ;	64:4:2175:2212	8885154	2	True				
ANR	8885186	IdentifierDecl	* str = pnstr -> string_bytes		8885154	0					
ANR	8885187	IdentifierDeclType	const byte *		8885154	0					
ANR	8885188	Identifier	str		8885154	1					
ANR	8885189	AssignmentExpression	* str = pnstr -> string_bytes		8885154	2		=			
ANR	8885190	Identifier	str		8885154	0					
ANR	8885191	PtrMemberAccess	pnstr -> string_bytes		8885154	1					
ANR	8885192	Identifier	pnstr		8885154	0					
ANR	8885193	Identifier	string_bytes		8885154	1					
ANR	8885194	ExpressionStatement	"dmlprintf1 ( nt -> memory , ""[n]%s"" , msg )"	66:4:2219:2255	8885154	3	True				
ANR	8885195	CallExpression	"dmlprintf1 ( nt -> memory , ""[n]%s"" , msg )"		8885154	0					
ANR	8885196	Callee	dmlprintf1		8885154	0					
ANR	8885197	Identifier	dmlprintf1		8885154	0					
ANR	8885198	ArgumentList	nt -> memory		8885154	1					
ANR	8885199	Argument	nt -> memory		8885154	0					
ANR	8885200	PtrMemberAccess	nt -> memory		8885154	0					
ANR	8885201	Identifier	nt		8885154	0					
ANR	8885202	Identifier	memory		8885154	1					
ANR	8885203	Argument	"""[n]%s"""		8885154	1					
ANR	8885204	PrimaryExpression	"""[n]%s"""		8885154	0					
ANR	8885205	Argument	msg		8885154	2					
ANR	8885206	Identifier	msg		8885154	0					
ANR	8885207	IfStatement	if ( pflag )		8885154	4					
ANR	8885208	Condition	pflag	67:8:2265:2269	8885154	0	True				
ANR	8885209	Identifier	pflag		8885154	0					
ANR	8885210	ExpressionStatement	"dmprintf1 ( nt -> memory , ""(%d)"" , * pflag )"	68:8:2280:2317	8885154	1	True				
ANR	8885211	CallExpression	"dmprintf1 ( nt -> memory , ""(%d)"" , * pflag )"		8885154	0					
ANR	8885212	Callee	dmprintf1		8885154	0					
ANR	8885213	Identifier	dmprintf1		8885154	0					
ANR	8885214	ArgumentList	nt -> memory		8885154	1					
ANR	8885215	Argument	nt -> memory		8885154	0					
ANR	8885216	PtrMemberAccess	nt -> memory		8885154	0					
ANR	8885217	Identifier	nt		8885154	0					
ANR	8885218	Identifier	memory		8885154	1					
ANR	8885219	Argument	"""(%d)"""		8885154	1					
ANR	8885220	PrimaryExpression	"""(%d)"""		8885154	0					
ANR	8885221	Argument	* pflag		8885154	2					
ANR	8885222	UnaryOperationExpression	* pflag		8885154	0					
ANR	8885223	UnaryOperator	*		8885154	0					
ANR	8885224	Identifier	pflag		8885154	1					
ANR	8885225	ExpressionStatement	"dmprintf2 ( nt -> memory , "" (0x%lx#%u)"" , ( ulong ) pname , nidx )"	69:4:2323:2379	8885154	5	True				
ANR	8885226	CallExpression	"dmprintf2 ( nt -> memory , "" (0x%lx#%u)"" , ( ulong ) pname , nidx )"		8885154	0					
ANR	8885227	Callee	dmprintf2		8885154	0					
ANR	8885228	Identifier	dmprintf2		8885154	0					
ANR	8885229	ArgumentList	nt -> memory		8885154	1					
ANR	8885230	Argument	nt -> memory		8885154	0					
ANR	8885231	PtrMemberAccess	nt -> memory		8885154	0					
ANR	8885232	Identifier	nt		8885154	0					
ANR	8885233	Identifier	memory		8885154	1					
ANR	8885234	Argument	""" (0x%lx#%u)"""		8885154	1					
ANR	8885235	PrimaryExpression	""" (0x%lx#%u)"""		8885154	0					
ANR	8885236	Argument	( ulong ) pname		8885154	2					
ANR	8885237	CastExpression	( ulong ) pname		8885154	0					
ANR	8885238	CastTarget	ulong		8885154	0					
ANR	8885239	Identifier	pname		8885154	1					
ANR	8885240	Argument	nidx		8885154	3					
ANR	8885241	Identifier	nidx		8885154	0					
ANR	8885242	ExpressionStatement	"debug_print_string ( nt -> memory , str , pnstr -> string_size )"	70:4:2385:2440	8885154	6	True				
ANR	8885243	CallExpression	"debug_print_string ( nt -> memory , str , pnstr -> string_size )"		8885154	0					
ANR	8885244	Callee	debug_print_string		8885154	0					
ANR	8885245	Identifier	debug_print_string		8885154	0					
ANR	8885246	ArgumentList	nt -> memory		8885154	1					
ANR	8885247	Argument	nt -> memory		8885154	0					
ANR	8885248	PtrMemberAccess	nt -> memory		8885154	0					
ANR	8885249	Identifier	nt		8885154	0					
ANR	8885250	Identifier	memory		8885154	1					
ANR	8885251	Argument	str		8885154	1					
ANR	8885252	Identifier	str		8885154	0					
ANR	8885253	Argument	pnstr -> string_size		8885154	2					
ANR	8885254	PtrMemberAccess	pnstr -> string_size		8885154	0					
ANR	8885255	Identifier	pnstr		8885154	0					
ANR	8885256	Identifier	string_size		8885154	1					
ANR	8885257	ExpressionStatement	"dmprintf2 ( nt -> memory , ""(0x%lx,%u)\\n"" , ( ulong ) str , pnstr -> string_size )"	71:4:2446:2515	8885154	7	True				
ANR	8885258	CallExpression	"dmprintf2 ( nt -> memory , ""(0x%lx,%u)\\n"" , ( ulong ) str , pnstr -> string_size )"		8885154	0					
ANR	8885259	Callee	dmprintf2		8885154	0					
ANR	8885260	Identifier	dmprintf2		8885154	0					
ANR	8885261	ArgumentList	nt -> memory		8885154	1					
ANR	8885262	Argument	nt -> memory		8885154	0					
ANR	8885263	PtrMemberAccess	nt -> memory		8885154	0					
ANR	8885264	Identifier	nt		8885154	0					
ANR	8885265	Identifier	memory		8885154	1					
ANR	8885266	Argument	"""(0x%lx,%u)\\n"""		8885154	1					
ANR	8885267	PrimaryExpression	"""(0x%lx,%u)\\n"""		8885154	0					
ANR	8885268	Argument	( ulong ) str		8885154	2					
ANR	8885269	CastExpression	( ulong ) str		8885154	0					
ANR	8885270	CastTarget	ulong		8885154	0					
ANR	8885271	Identifier	str		8885154	1					
ANR	8885272	Argument	pnstr -> string_size		8885154	3					
ANR	8885273	PtrMemberAccess	pnstr -> string_size		8885154	0					
ANR	8885274	Identifier	pnstr		8885154	0					
ANR	8885275	Identifier	string_size		8885154	1					
ANR	8885276	ReturnType	static void		8885154	1					
ANR	8885277	Identifier	name_print		8885154	2					
ANR	8885278	ParameterList	"const char * msg , const name_table * nt , uint nidx , const int * pflag"		8885154	3					
ANR	8885279	Parameter	const char * msg	60:11:1973:1987	8885154	0	True				
ANR	8885280	ParameterType	const char *		8885154	0					
ANR	8885281	Identifier	msg		8885154	1					
ANR	8885282	Parameter	const name_table * nt	60:28:1990:2009	8885154	1	True				
ANR	8885283	ParameterType	const name_table *		8885154	0					
ANR	8885284	Identifier	nt		8885154	1					
ANR	8885285	Parameter	uint nidx	60:50:2012:2020	8885154	2	True				
ANR	8885286	ParameterType	uint		8885154	0					
ANR	8885287	Identifier	nidx		8885154	1					
ANR	8885288	Parameter	const int * pflag	60:61:2023:2038	8885154	3	True				
ANR	8885289	ParameterType	const int *		8885154	0					
ANR	8885290	Identifier	pflag		8885154	1					
ANR	8885291	CFGEntryNode	ENTRY		8885154		True				
ANR	8885292	CFGExitNode	EXIT		8885154		True				
ANR	8885293	Symbol	msg		8885154						
ANR	8885294	Symbol	pnstr -> string_size		8885154						
ANR	8885295	Symbol	* pnstr		8885154						
ANR	8885296	Symbol	nt		8885154						
ANR	8885297	Symbol	pflag		8885154						
ANR	8885298	Symbol	pname		8885154						
ANR	8885299	Symbol	nt -> memory		8885154						
ANR	8885300	Symbol	pnstr -> string_bytes		8885154						
ANR	8885301	Symbol	pnstr		8885154						
ANR	8885302	Symbol	names_index_string_inline		8885154						
ANR	8885303	Symbol	* nt		8885154						
ANR	8885304	Symbol	str		8885154						
ANR	8885305	Symbol	names_index_ptr_inline		8885154						
ANR	8885306	Symbol	nidx		8885154						
ANR	8885307	Symbol	* pflag		8885154						
ANR	8885308	Function	names_init	80:0:2728:4335							
ANR	8885309	FunctionDef	"names_init (ulong count , gs_ref_memory_t * imem)"		8885308	0					
ANR	8885310	CompoundStatement		82:0:2788:4335	8885308	0					
ANR	8885311	IdentifierDeclStatement	gs_memory_t * mem = ( gs_memory_t * ) imem ;	83:4:2794:2832	8885308	0	True				
ANR	8885312	IdentifierDecl	* mem = ( gs_memory_t * ) imem		8885308	0					
ANR	8885313	IdentifierDeclType	gs_memory_t *		8885308	0					
ANR	8885314	Identifier	mem		8885308	1					
ANR	8885315	AssignmentExpression	* mem = ( gs_memory_t * ) imem		8885308	2		=			
ANR	8885316	Identifier	mem		8885308	0					
ANR	8885317	CastExpression	( gs_memory_t * ) imem		8885308	1					
ANR	8885318	CastTarget	gs_memory_t *		8885308	0					
ANR	8885319	Identifier	imem		8885308	1					
ANR	8885320	IdentifierDeclStatement	name_table * nt ;	84:4:2838:2852	8885308	1	True				
ANR	8885321	IdentifierDecl	* nt		8885308	0					
ANR	8885322	IdentifierDeclType	name_table *		8885308	0					
ANR	8885323	Identifier	nt		8885308	1					
ANR	8885324	IdentifierDeclStatement	int i ;	85:4:2858:2863	8885308	2	True				
ANR	8885325	IdentifierDecl	i		8885308	0					
ANR	8885326	IdentifierDeclType	int		8885308	0					
ANR	8885327	Identifier	i		8885308	1					
ANR	8885328	IfStatement	if ( count == 0 )		8885308	3					
ANR	8885329	Condition	count == 0	87:8:2874:2883	8885308	0	True				
ANR	8885330	EqualityExpression	count == 0		8885308	0		==			
ANR	8885331	Identifier	count		8885308	0					
ANR	8885332	PrimaryExpression	0		8885308	1					
ANR	8885333	ExpressionStatement	count = max_name_count + 1L	88:8:2894:2921	8885308	1	True				
ANR	8885334	AssignmentExpression	count = max_name_count + 1L		8885308	0		=			
ANR	8885335	Identifier	count		8885308	0					
ANR	8885336	AdditiveExpression	max_name_count + 1L		8885308	1		+			
ANR	8885337	Identifier	max_name_count		8885308	0					
ANR	8885338	PrimaryExpression	1L		8885308	1					
ANR	8885339	ElseStatement	else		8885308	0					
ANR	8885340	IfStatement	if ( count - 1 > max_name_count )		8885308	0					
ANR	8885341	Condition	count - 1 > max_name_count	89:13:2936:2961	8885308	0	True				
ANR	8885342	RelationalExpression	count - 1 > max_name_count		8885308	0		>			
ANR	8885343	AdditiveExpression	count - 1		8885308	0		-			
ANR	8885344	Identifier	count		8885308	0					
ANR	8885345	PrimaryExpression	1		8885308	1					
ANR	8885346	Identifier	max_name_count		8885308	1					
ANR	8885347	ReturnStatement	return 0 ;	90:8:2972:2980	8885308	1	True				
ANR	8885348	PrimaryExpression	0		8885308	0					
ANR	8885349	ExpressionStatement	"nt = gs_alloc_struct ( mem , name_table , & st_name_table , ""name_init(nt)"" )"	91:4:2986:3056	8885308	4	True				
ANR	8885350	AssignmentExpression	"nt = gs_alloc_struct ( mem , name_table , & st_name_table , ""name_init(nt)"" )"		8885308	0		=			
ANR	8885351	Identifier	nt		8885308	0					
ANR	8885352	CallExpression	"gs_alloc_struct ( mem , name_table , & st_name_table , ""name_init(nt)"" )"		8885308	1					
ANR	8885353	Callee	gs_alloc_struct		8885308	0					
ANR	8885354	Identifier	gs_alloc_struct		8885308	0					
ANR	8885355	ArgumentList	mem		8885308	1					
ANR	8885356	Argument	mem		8885308	0					
ANR	8885357	Identifier	mem		8885308	0					
ANR	8885358	Argument	name_table		8885308	1					
ANR	8885359	Identifier	name_table		8885308	0					
ANR	8885360	Argument	& st_name_table		8885308	2					
ANR	8885361	UnaryOperationExpression	& st_name_table		8885308	0					
ANR	8885362	UnaryOperator	&		8885308	0					
ANR	8885363	Identifier	st_name_table		8885308	1					
ANR	8885364	Argument	"""name_init(nt)"""		8885308	3					
ANR	8885365	PrimaryExpression	"""name_init(nt)"""		8885308	0					
ANR	8885366	IfStatement	if ( nt == 0 )		8885308	5					
ANR	8885367	Condition	nt == 0	92:8:3066:3072	8885308	0	True				
ANR	8885368	EqualityExpression	nt == 0		8885308	0		==			
ANR	8885369	Identifier	nt		8885308	0					
ANR	8885370	PrimaryExpression	0		8885308	1					
ANR	8885371	ReturnStatement	return 0 ;	93:8:3083:3091	8885308	1	True				
ANR	8885372	PrimaryExpression	0		8885308	0					
ANR	8885373	ExpressionStatement	"memset ( nt , 0 , sizeof ( name_table ) )"	94:4:3097:3130	8885308	6	True				
ANR	8885374	CallExpression	"memset ( nt , 0 , sizeof ( name_table ) )"		8885308	0					
ANR	8885375	Callee	memset		8885308	0					
ANR	8885376	Identifier	memset		8885308	0					
ANR	8885377	ArgumentList	nt		8885308	1					
ANR	8885378	Argument	nt		8885308	0					
ANR	8885379	Identifier	nt		8885308	0					
ANR	8885380	Argument	0		8885308	1					
ANR	8885381	PrimaryExpression	0		8885308	0					
ANR	8885382	Argument	sizeof ( name_table )		8885308	2					
ANR	8885383	SizeofExpression	sizeof ( name_table )		8885308	0					
ANR	8885384	Sizeof	sizeof		8885308	0					
ANR	8885385	SizeofOperand	name_table		8885308	1					
ANR	8885386	ExpressionStatement	nt -> max_sub_count = ( ( count - 1 ) | nt_sub_index_mask ) >> nt_log2_sub_size	95:4:3136:3217	8885308	7	True				
ANR	8885387	AssignmentExpression	nt -> max_sub_count = ( ( count - 1 ) | nt_sub_index_mask ) >> nt_log2_sub_size		8885308	0		=			
ANR	8885388	PtrMemberAccess	nt -> max_sub_count		8885308	0					
ANR	8885389	Identifier	nt		8885308	0					
ANR	8885390	Identifier	max_sub_count		8885308	1					
ANR	8885391	ShiftExpression	( ( count - 1 ) | nt_sub_index_mask ) >> nt_log2_sub_size		8885308	1		>>			
ANR	8885392	InclusiveOrExpression	( count - 1 ) | nt_sub_index_mask		8885308	0		|			
ANR	8885393	AdditiveExpression	count - 1		8885308	0		-			
ANR	8885394	Identifier	count		8885308	0					
ANR	8885395	PrimaryExpression	1		8885308	1					
ANR	8885396	Identifier	nt_sub_index_mask		8885308	1					
ANR	8885397	Identifier	nt_log2_sub_size		8885308	1					
ANR	8885398	ExpressionStatement	nt -> name_string_attrs = imemory_space ( imem ) | a_readonly	97:4:3223:3279	8885308	8	True				
ANR	8885399	AssignmentExpression	nt -> name_string_attrs = imemory_space ( imem ) | a_readonly		8885308	0		=			
ANR	8885400	PtrMemberAccess	nt -> name_string_attrs		8885308	0					
ANR	8885401	Identifier	nt		8885308	0					
ANR	8885402	Identifier	name_string_attrs		8885308	1					
ANR	8885403	InclusiveOrExpression	imemory_space ( imem ) | a_readonly		8885308	1		|			
ANR	8885404	CallExpression	imemory_space ( imem )		8885308	0					
ANR	8885405	Callee	imemory_space		8885308	0					
ANR	8885406	Identifier	imemory_space		8885308	0					
ANR	8885407	ArgumentList	imem		8885308	1					
ANR	8885408	Argument	imem		8885308	0					
ANR	8885409	Identifier	imem		8885308	0					
ANR	8885410	Identifier	a_readonly		8885308	1					
ANR	8885411	ExpressionStatement	nt -> memory = mem	98:4:3285:3301	8885308	9	True				
ANR	8885412	AssignmentExpression	nt -> memory = mem		8885308	0		=			
ANR	8885413	PtrMemberAccess	nt -> memory		8885308	0					
ANR	8885414	Identifier	nt		8885308	0					
ANR	8885415	Identifier	memory		8885308	1					
ANR	8885416	Identifier	mem		8885308	1					
ANR	8885417	ForStatement	for ( i = 0 ; i < NT_1CHAR_FIRST + NT_1CHAR_SIZE ; i += nt_sub_size )		8885308	10					
ANR	8885418	ForInit	i = 0 ;	101:9:3412:3417	8885308	0	True				
ANR	8885419	AssignmentExpression	i = 0		8885308	0		=			
ANR	8885420	Identifier	i		8885308	0					
ANR	8885421	PrimaryExpression	0		8885308	1					
ANR	8885422	Condition	i < NT_1CHAR_FIRST + NT_1CHAR_SIZE	101:16:3419:3452	8885308	1	True				
ANR	8885423	RelationalExpression	i < NT_1CHAR_FIRST + NT_1CHAR_SIZE		8885308	0		<			
ANR	8885424	Identifier	i		8885308	0					
ANR	8885425	AdditiveExpression	NT_1CHAR_FIRST + NT_1CHAR_SIZE		8885308	1		+			
ANR	8885426	Identifier	NT_1CHAR_FIRST		8885308	0					
ANR	8885427	Identifier	NT_1CHAR_SIZE		8885308	1					
ANR	8885428	AssignmentExpression	i += nt_sub_size	101:52:3455:3470	8885308	2	True	+=			
ANR	8885429	Identifier	i		8885308	0					
ANR	8885430	Identifier	nt_sub_size		8885308	1					
ANR	8885431	CompoundStatement		21:8:694:723	8885308	3					
ANR	8885432	IdentifierDeclStatement	int code = name_alloc_sub ( nt ) ;	102:8:3483:3512	8885308	0	True				
ANR	8885433	IdentifierDecl	code = name_alloc_sub ( nt )		8885308	0					
ANR	8885434	IdentifierDeclType	int		8885308	0					
ANR	8885435	Identifier	code		8885308	1					
ANR	8885436	AssignmentExpression	code = name_alloc_sub ( nt )		8885308	2		=			
ANR	8885437	Identifier	code		8885308	0					
ANR	8885438	CallExpression	name_alloc_sub ( nt )		8885308	1					
ANR	8885439	Callee	name_alloc_sub		8885308	0					
ANR	8885440	Identifier	name_alloc_sub		8885308	0					
ANR	8885441	ArgumentList	nt		8885308	1					
ANR	8885442	Argument	nt		8885308	0					
ANR	8885443	Identifier	nt		8885308	0					
ANR	8885444	IfStatement	if ( code < 0 )		8885308	1					
ANR	8885445	Condition	code < 0	104:12:3527:3534	8885308	0	True				
ANR	8885446	RelationalExpression	code < 0		8885308	0		<			
ANR	8885447	Identifier	code		8885308	0					
ANR	8885448	PrimaryExpression	0		8885308	1					
ANR	8885449	CompoundStatement		23:22:748:748	8885308	1					
ANR	8885450	ExpressionStatement	names_free ( nt )	105:12:3551:3565	8885308	0	True				
ANR	8885451	CallExpression	names_free ( nt )		8885308	0					
ANR	8885452	Callee	names_free		8885308	0					
ANR	8885453	Identifier	names_free		8885308	0					
ANR	8885454	ArgumentList	nt		8885308	1					
ANR	8885455	Argument	nt		8885308	0					
ANR	8885456	Identifier	nt		8885308	0					
ANR	8885457	ReturnStatement	return 0 ;	106:12:3579:3587	8885308	1	True				
ANR	8885458	PrimaryExpression	0		8885308	0					
ANR	8885459	ForStatement	for ( i = - 1 ; i < NT_1CHAR_SIZE ; i ++ )		8885308	11					
ANR	8885460	ForInit	i = - 1 ;	109:9:3614:3620	8885308	0	True				
ANR	8885461	AssignmentExpression	i = - 1		8885308	0		=			
ANR	8885462	Identifier	i		8885308	0					
ANR	8885463	UnaryOperationExpression	- 1		8885308	1					
ANR	8885464	UnaryOperator	-		8885308	0					
ANR	8885465	PrimaryExpression	1		8885308	1					
ANR	8885466	Condition	i < NT_1CHAR_SIZE	109:17:3622:3638	8885308	1	True				
ANR	8885467	RelationalExpression	i < NT_1CHAR_SIZE		8885308	0		<			
ANR	8885468	Identifier	i		8885308	0					
ANR	8885469	Identifier	NT_1CHAR_SIZE		8885308	1					
ANR	8885470	PostIncDecOperationExpression	i ++	109:36:3641:3643	8885308	2	True				
ANR	8885471	Identifier	i		8885308	0					
ANR	8885472	IncDec	++		8885308	1					
ANR	8885473	CompoundStatement		32:8:1010:1068	8885308	3					
ANR	8885474	IdentifierDeclStatement	uint ncnt = NT_1CHAR_FIRST + i ;	110:8:3656:3686	8885308	0	True				
ANR	8885475	IdentifierDecl	ncnt = NT_1CHAR_FIRST + i		8885308	0					
ANR	8885476	IdentifierDeclType	uint		8885308	0					
ANR	8885477	Identifier	ncnt		8885308	1					
ANR	8885478	AssignmentExpression	ncnt = NT_1CHAR_FIRST + i		8885308	2		=			
ANR	8885479	Identifier	ncnt		8885308	0					
ANR	8885480	AdditiveExpression	NT_1CHAR_FIRST + i		8885308	1		+			
ANR	8885481	Identifier	NT_1CHAR_FIRST		8885308	0					
ANR	8885482	Identifier	i		8885308	1					
ANR	8885483	IdentifierDeclStatement	uint nidx = name_count_to_index ( ncnt ) ;	111:8:3696:3733	8885308	1	True				
ANR	8885484	IdentifierDecl	nidx = name_count_to_index ( ncnt )		8885308	0					
ANR	8885485	IdentifierDeclType	uint		8885308	0					
ANR	8885486	Identifier	nidx		8885308	1					
ANR	8885487	AssignmentExpression	nidx = name_count_to_index ( ncnt )		8885308	2		=			
ANR	8885488	Identifier	nidx		8885308	0					
ANR	8885489	CallExpression	name_count_to_index ( ncnt )		8885308	1					
ANR	8885490	Callee	name_count_to_index		8885308	0					
ANR	8885491	Identifier	name_count_to_index		8885308	0					
ANR	8885492	ArgumentList	ncnt		8885308	1					
ANR	8885493	Argument	ncnt		8885308	0					
ANR	8885494	Identifier	ncnt		8885308	0					
ANR	8885495	IdentifierDeclStatement	"name * pname = names_index_ptr_inline ( nt , nidx ) ;"	112:8:3743:3789	8885308	2	True				
ANR	8885496	IdentifierDecl	"* pname = names_index_ptr_inline ( nt , nidx )"		8885308	0					
ANR	8885497	IdentifierDeclType	name *		8885308	0					
ANR	8885498	Identifier	pname		8885308	1					
ANR	8885499	AssignmentExpression	"* pname = names_index_ptr_inline ( nt , nidx )"		8885308	2		=			
ANR	8885500	Identifier	pname		8885308	0					
ANR	8885501	CallExpression	"names_index_ptr_inline ( nt , nidx )"		8885308	1					
ANR	8885502	Callee	names_index_ptr_inline		8885308	0					
ANR	8885503	Identifier	names_index_ptr_inline		8885308	0					
ANR	8885504	ArgumentList	nt		8885308	1					
ANR	8885505	Argument	nt		8885308	0					
ANR	8885506	Identifier	nt		8885308	0					
ANR	8885507	Argument	nidx		8885308	1					
ANR	8885508	Identifier	nidx		8885308	0					
ANR	8885509	IdentifierDeclStatement	"name_string_t * pnstr = names_index_string_inline ( nt , nidx ) ;"	113:8:3799:3857	8885308	3	True				
ANR	8885510	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , nidx )"		8885308	0					
ANR	8885511	IdentifierDeclType	name_string_t *		8885308	0					
ANR	8885512	Identifier	pnstr		8885308	1					
ANR	8885513	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , nidx )"		8885308	2		=			
ANR	8885514	Identifier	pnstr		8885308	0					
ANR	8885515	CallExpression	"names_index_string_inline ( nt , nidx )"		8885308	1					
ANR	8885516	Callee	names_index_string_inline		8885308	0					
ANR	8885517	Identifier	names_index_string_inline		8885308	0					
ANR	8885518	ArgumentList	nt		8885308	1					
ANR	8885519	Argument	nt		8885308	0					
ANR	8885520	Identifier	nt		8885308	0					
ANR	8885521	Argument	nidx		8885308	1					
ANR	8885522	Identifier	nidx		8885308	0					
ANR	8885523	IfStatement	if ( i < 0 )		8885308	4					
ANR	8885524	Condition	i < 0	115:12:3872:3876	8885308	0	True				
ANR	8885525	RelationalExpression	i < 0		8885308	0		<			
ANR	8885526	Identifier	i		8885308	0					
ANR	8885527	PrimaryExpression	0		8885308	1					
ANR	8885528	ExpressionStatement	"pnstr -> string_bytes = nt_1char_names , pnstr -> string_size = 0"	116:12:3891:3967	8885308	1	True				
ANR	8885529	Expression	"pnstr -> string_bytes = nt_1char_names , pnstr -> string_size = 0"		8885308	0					
ANR	8885530	AssignmentExpression	pnstr -> string_bytes = nt_1char_names		8885308	0		=			
ANR	8885531	PtrMemberAccess	pnstr -> string_bytes		8885308	0					
ANR	8885532	Identifier	pnstr		8885308	0					
ANR	8885533	Identifier	string_bytes		8885308	1					
ANR	8885534	Identifier	nt_1char_names		8885308	1					
ANR	8885535	AssignmentExpression	pnstr -> string_size = 0		8885308	1		=			
ANR	8885536	PtrMemberAccess	pnstr -> string_size		8885308	0					
ANR	8885537	Identifier	pnstr		8885308	0					
ANR	8885538	Identifier	string_size		8885308	1					
ANR	8885539	PrimaryExpression	0		8885308	1					
ANR	8885540	ElseStatement	else		8885308	0					
ANR	8885541	ExpressionStatement	"pnstr -> string_bytes = nt_1char_names + i , pnstr -> string_size = 1"	119:12:3994:4074	8885308	0	True				
ANR	8885542	Expression	"pnstr -> string_bytes = nt_1char_names + i , pnstr -> string_size = 1"		8885308	0					
ANR	8885543	AssignmentExpression	pnstr -> string_bytes = nt_1char_names + i		8885308	0		=			
ANR	8885544	PtrMemberAccess	pnstr -> string_bytes		8885308	0					
ANR	8885545	Identifier	pnstr		8885308	0					
ANR	8885546	Identifier	string_bytes		8885308	1					
ANR	8885547	AdditiveExpression	nt_1char_names + i		8885308	1		+			
ANR	8885548	Identifier	nt_1char_names		8885308	0					
ANR	8885549	Identifier	i		8885308	1					
ANR	8885550	AssignmentExpression	pnstr -> string_size = 1		8885308	1		=			
ANR	8885551	PtrMemberAccess	pnstr -> string_size		8885308	0					
ANR	8885552	Identifier	pnstr		8885308	0					
ANR	8885553	Identifier	string_size		8885308	1					
ANR	8885554	PrimaryExpression	1		8885308	1					
ANR	8885555	ExpressionStatement	pnstr -> foreign_string = 1	121:8:4084:4109	8885308	5	True				
ANR	8885556	AssignmentExpression	pnstr -> foreign_string = 1		8885308	0		=			
ANR	8885557	PtrMemberAccess	pnstr -> foreign_string		8885308	0					
ANR	8885558	Identifier	pnstr		8885308	0					
ANR	8885559	Identifier	foreign_string		8885308	1					
ANR	8885560	PrimaryExpression	1		8885308	1					
ANR	8885561	ExpressionStatement	pnstr -> mark = 1	122:8:4119:4134	8885308	6	True				
ANR	8885562	AssignmentExpression	pnstr -> mark = 1		8885308	0		=			
ANR	8885563	PtrMemberAccess	pnstr -> mark		8885308	0					
ANR	8885564	Identifier	pnstr		8885308	0					
ANR	8885565	Identifier	mark		8885308	1					
ANR	8885566	PrimaryExpression	1		8885308	1					
ANR	8885567	ExpressionStatement	pname -> pvalue = pv_no_defn	123:8:4144:4170	8885308	7	True				
ANR	8885568	AssignmentExpression	pname -> pvalue = pv_no_defn		8885308	0		=			
ANR	8885569	PtrMemberAccess	pname -> pvalue		8885308	0					
ANR	8885570	Identifier	pname		8885308	0					
ANR	8885571	Identifier	pvalue		8885308	1					
ANR	8885572	Identifier	pv_no_defn		8885308	1					
ANR	8885573	ExpressionStatement	nt -> perm_count = NT_1CHAR_FIRST + NT_1CHAR_SIZE	125:4:4182:4229	8885308	12	True				
ANR	8885574	AssignmentExpression	nt -> perm_count = NT_1CHAR_FIRST + NT_1CHAR_SIZE		8885308	0		=			
ANR	8885575	PtrMemberAccess	nt -> perm_count		8885308	0					
ANR	8885576	Identifier	nt		8885308	0					
ANR	8885577	Identifier	perm_count		8885308	1					
ANR	8885578	AdditiveExpression	NT_1CHAR_FIRST + NT_1CHAR_SIZE		8885308	1		+			
ANR	8885579	Identifier	NT_1CHAR_FIRST		8885308	0					
ANR	8885580	Identifier	NT_1CHAR_SIZE		8885308	1					
ANR	8885581	ExpressionStatement	nt -> free = 0	127:4:4272:4284	8885308	13	True				
ANR	8885582	AssignmentExpression	nt -> free = 0		8885308	0		=			
ANR	8885583	PtrMemberAccess	nt -> free		8885308	0					
ANR	8885584	Identifier	nt		8885308	0					
ANR	8885585	Identifier	free		8885308	1					
ANR	8885586	PrimaryExpression	0		8885308	1					
ANR	8885587	ExpressionStatement	"names_trace_finish ( nt , NULL )"	128:4:4290:4318	8885308	14	True				
ANR	8885588	CallExpression	"names_trace_finish ( nt , NULL )"		8885308	0					
ANR	8885589	Callee	names_trace_finish		8885308	0					
ANR	8885590	Identifier	names_trace_finish		8885308	0					
ANR	8885591	ArgumentList	nt		8885308	1					
ANR	8885592	Argument	nt		8885308	0					
ANR	8885593	Identifier	nt		8885308	0					
ANR	8885594	Argument	NULL		8885308	1					
ANR	8885595	Identifier	NULL		8885308	0					
ANR	8885596	ReturnStatement	return nt ;	129:4:4324:4333	8885308	15	True				
ANR	8885597	Identifier	nt		8885308	0					
ANR	8885598	ReturnType	name_table *		8885308	1					
ANR	8885599	Identifier	names_init		8885308	2					
ANR	8885600	ParameterList	"ulong count , gs_ref_memory_t * imem"		8885308	3					
ANR	8885601	Parameter	ulong count	81:11:2752:2762	8885308	0	True				
ANR	8885602	ParameterType	ulong		8885308	0					
ANR	8885603	Identifier	count		8885308	1					
ANR	8885604	Parameter	gs_ref_memory_t * imem	81:24:2765:2785	8885308	1	True				
ANR	8885605	ParameterType	gs_ref_memory_t *		8885308	0					
ANR	8885606	Identifier	imem		8885308	1					
ANR	8885607	CFGEntryNode	ENTRY		8885308		True				
ANR	8885608	CFGExitNode	EXIT		8885308		True				
ANR	8885609	Symbol	pnstr -> string_size		8885308						
ANR	8885610	Symbol	name_count_to_index		8885308						
ANR	8885611	Symbol	code		8885308						
ANR	8885612	Symbol	* pnstr		8885308						
ANR	8885613	Symbol	name_table		8885308						
ANR	8885614	Symbol	nt_sub_size		8885308						
ANR	8885615	Symbol	nt		8885308						
ANR	8885616	Symbol	gs_alloc_struct		8885308						
ANR	8885617	Symbol	nt -> memory		8885308						
ANR	8885618	Symbol	ncnt		8885308						
ANR	8885619	Symbol	nt -> max_sub_count		8885308						
ANR	8885620	Symbol	nt -> free		8885308						
ANR	8885621	Symbol	mem		8885308						
ANR	8885622	Symbol	nt_1char_names		8885308						
ANR	8885623	Symbol	names_index_ptr_inline		8885308						
ANR	8885624	Symbol	nt_log2_sub_size		8885308						
ANR	8885625	Symbol	nt -> name_string_attrs		8885308						
ANR	8885626	Symbol	nt_sub_index_mask		8885308						
ANR	8885627	Symbol	& st_name_table		8885308						
ANR	8885628	Symbol	nt -> perm_count		8885308						
ANR	8885629	Symbol	pnstr -> foreign_string		8885308						
ANR	8885630	Symbol	NT_1CHAR_FIRST		8885308						
ANR	8885631	Symbol	NULL		8885308						
ANR	8885632	Symbol	pname		8885308						
ANR	8885633	Symbol	count		8885308						
ANR	8885634	Symbol	i		8885308						
ANR	8885635	Symbol	name_alloc_sub		8885308						
ANR	8885636	Symbol	pnstr -> string_bytes		8885308						
ANR	8885637	Symbol	pnstr -> mark		8885308						
ANR	8885638	Symbol	pnstr		8885308						
ANR	8885639	Symbol	names_index_string_inline		8885308						
ANR	8885640	Symbol	* nt		8885308						
ANR	8885641	Symbol	a_readonly		8885308						
ANR	8885642	Symbol	pv_no_defn		8885308						
ANR	8885643	Symbol	pname -> pvalue		8885308						
ANR	8885644	Symbol	NT_1CHAR_SIZE		8885308						
ANR	8885645	Symbol	max_name_count		8885308						
ANR	8885646	Symbol	imemory_space		8885308						
ANR	8885647	Symbol	* pname		8885308						
ANR	8885648	Symbol	nidx		8885308						
ANR	8885649	Symbol	imem		8885308						
ANR	8885650	Function	names_free	133:0:4362:4561							
ANR	8885651	FunctionDef	names_free (name_table * nt)		8885650	0					
ANR	8885652	CompoundStatement		135:0:4394:4561	8885650	0					
ANR	8885653	IfStatement	if ( nt == NULL )		8885650	0					
ANR	8885654	Condition	nt == NULL	136:8:4404:4413	8885650	0	True				
ANR	8885655	EqualityExpression	nt == NULL		8885650	0		==			
ANR	8885656	Identifier	nt		8885650	0					
ANR	8885657	Identifier	NULL		8885650	1					
ANR	8885658	ReturnStatement	return ;	136:20:4416:4422	8885650	1	True				
ANR	8885659	WhileStatement	while ( nt -> sub_count > 0 )		8885650	1					
ANR	8885660	Condition	nt -> sub_count > 0	138:11:4436:4452	8885650	0	True				
ANR	8885661	RelationalExpression	nt -> sub_count > 0		8885650	0		>			
ANR	8885662	PtrMemberAccess	nt -> sub_count		8885650	0					
ANR	8885663	Identifier	nt		8885650	0					
ANR	8885664	Identifier	sub_count		8885650	1					
ANR	8885665	PrimaryExpression	0		8885650	1					
ANR	8885666	ExpressionStatement	"name_free_sub ( nt , -- ( nt -> sub_count ) , false )"	139:8:4463:4506	8885650	1	True				
ANR	8885667	CallExpression	"name_free_sub ( nt , -- ( nt -> sub_count ) , false )"		8885650	0					
ANR	8885668	Callee	name_free_sub		8885650	0					
ANR	8885669	Identifier	name_free_sub		8885650	0					
ANR	8885670	ArgumentList	nt		8885650	1					
ANR	8885671	Argument	nt		8885650	0					
ANR	8885672	Identifier	nt		8885650	0					
ANR	8885673	Argument	-- ( nt -> sub_count )		8885650	1					
ANR	8885674	UnaryExpression	-- ( nt -> sub_count )		8885650	0					
ANR	8885675	IncDec	--		8885650	0					
ANR	8885676	PtrMemberAccess	nt -> sub_count		8885650	1					
ANR	8885677	Identifier	nt		8885650	0					
ANR	8885678	Identifier	sub_count		8885650	1					
ANR	8885679	Argument	false		8885650	2					
ANR	8885680	Identifier	false		8885650	0					
ANR	8885681	ExpressionStatement	"gs_free_object ( nt -> memory , nt , ""name_init(nt)"" )"	140:4:4512:4559	8885650	2	True				
ANR	8885682	CallExpression	"gs_free_object ( nt -> memory , nt , ""name_init(nt)"" )"		8885650	0					
ANR	8885683	Callee	gs_free_object		8885650	0					
ANR	8885684	Identifier	gs_free_object		8885650	0					
ANR	8885685	ArgumentList	nt -> memory		8885650	1					
ANR	8885686	Argument	nt -> memory		8885650	0					
ANR	8885687	PtrMemberAccess	nt -> memory		8885650	0					
ANR	8885688	Identifier	nt		8885650	0					
ANR	8885689	Identifier	memory		8885650	1					
ANR	8885690	Argument	nt		8885650	1					
ANR	8885691	Identifier	nt		8885650	0					
ANR	8885692	Argument	"""name_init(nt)"""		8885650	2					
ANR	8885693	PrimaryExpression	"""name_init(nt)"""		8885650	0					
ANR	8885694	ReturnType	void		8885650	1					
ANR	8885695	Identifier	names_free		8885650	2					
ANR	8885696	ParameterList	name_table * nt		8885650	3					
ANR	8885697	Parameter	name_table * nt	134:11:4378:4391	8885650	0	True				
ANR	8885698	ParameterType	name_table *		8885650	0					
ANR	8885699	Identifier	nt		8885650	1					
ANR	8885700	CFGEntryNode	ENTRY		8885650		True				
ANR	8885701	CFGExitNode	EXIT		8885650		True				
ANR	8885702	Symbol	NULL		8885650						
ANR	8885703	Symbol	nt		8885650						
ANR	8885704	Symbol	false		8885650						
ANR	8885705	Symbol	nt -> memory		8885650						
ANR	8885706	Symbol	nt -> sub_count		8885650						
ANR	8885707	Symbol	* nt		8885650						
ANR	8885708	Function	gs_names_finalize	143:0:4564:4706							
ANR	8885709	FunctionDef	"gs_names_finalize (const gs_memory_t * cmem , void * vptr)"		8885708	0					
ANR	8885710	CompoundStatement		145:0:4631:4706	8885708	0					
ANR	8885711	ExpressionStatement	( void ) vptr	146:4:4637:4647	8885708	0	True				
ANR	8885712	CastExpression	( void ) vptr		8885708	0					
ANR	8885713	CastTarget	void		8885708	0					
ANR	8885714	Identifier	vptr		8885708	1					
ANR	8885715	ExpressionStatement	cmem -> gs_lib_ctx -> gs_name_table = NULL	147:4:4666:4704	8885708	1	True				
ANR	8885716	AssignmentExpression	cmem -> gs_lib_ctx -> gs_name_table = NULL		8885708	0		=			
ANR	8885717	PtrMemberAccess	cmem -> gs_lib_ctx -> gs_name_table		8885708	0					
ANR	8885718	PtrMemberAccess	cmem -> gs_lib_ctx		8885708	0					
ANR	8885719	Identifier	cmem		8885708	0					
ANR	8885720	Identifier	gs_lib_ctx		8885708	1					
ANR	8885721	Identifier	gs_name_table		8885708	1					
ANR	8885722	Identifier	NULL		8885708	1					
ANR	8885723	ReturnType	static void		8885708	1					
ANR	8885724	Identifier	gs_names_finalize		8885708	2					
ANR	8885725	ParameterList	"const gs_memory_t * cmem , void * vptr"		8885708	3					
ANR	8885726	Parameter	const gs_memory_t * cmem	144:18:4594:4616	8885708	0	True				
ANR	8885727	ParameterType	const gs_memory_t *		8885708	0					
ANR	8885728	Identifier	cmem		8885708	1					
ANR	8885729	Parameter	void * vptr	144:43:4619:4628	8885708	1	True				
ANR	8885730	ParameterType	void *		8885708	0					
ANR	8885731	Identifier	vptr		8885708	1					
ANR	8885732	CFGEntryNode	ENTRY		8885708		True				
ANR	8885733	CFGExitNode	EXIT		8885708		True				
ANR	8885734	Symbol	NULL		8885708						
ANR	8885735	Symbol	* cmem		8885708						
ANR	8885736	Symbol	cmem -> gs_lib_ctx		8885708						
ANR	8885737	Symbol	* cmem -> gs_lib_ctx		8885708						
ANR	8885738	Symbol	* * cmem		8885708						
ANR	8885739	Symbol	cmem -> gs_lib_ctx -> gs_name_table		8885708						
ANR	8885740	Symbol	cmem		8885708						
ANR	8885741	Symbol	vptr		8885708						
ANR	8885742	Function	names_memory	151:0:4753:4828							
ANR	8885743	FunctionDef	names_memory (const name_table * nt)		8885742	0					
ANR	8885744	CompoundStatement		153:0:4803:4828	8885742	0					
ANR	8885745	ReturnStatement	return nt -> memory ;	154:4:4809:4826	8885742	0	True				
ANR	8885746	PtrMemberAccess	nt -> memory		8885742	0					
ANR	8885747	Identifier	nt		8885742	0					
ANR	8885748	Identifier	memory		8885742	1					
ANR	8885749	ReturnType	gs_memory_t *		8885742	1					
ANR	8885750	Identifier	names_memory		8885742	2					
ANR	8885751	ParameterList	const name_table * nt		8885742	3					
ANR	8885752	Parameter	const name_table * nt	152:13:4780:4800	8885742	0	True				
ANR	8885753	ParameterType	const name_table *		8885742	0					
ANR	8885754	Identifier	nt		8885742	1					
ANR	8885755	CFGEntryNode	ENTRY		8885742		True				
ANR	8885756	CFGExitNode	EXIT		8885742		True				
ANR	8885757	Symbol	nt		8885742						
ANR	8885758	Symbol	nt -> memory		8885742						
ANR	8885759	Symbol	* nt		8885742						
ANR	8885760	Function	names_ref	161:0:5015:7348							
ANR	8885761	FunctionDef	"names_ref (name_table * nt , const byte * ptr , uint size , ref * pref , int enterflag)"		8885760	0					
ANR	8885762	CompoundStatement		163:0:5099:7348	8885760	0					
ANR	8885763	IdentifierDeclStatement	name * pname ;	164:4:5105:5116	8885760	0	True				
ANR	8885764	IdentifierDecl	* pname		8885760	0					
ANR	8885765	IdentifierDeclType	name *		8885760	0					
ANR	8885766	Identifier	pname		8885760	1					
ANR	8885767	IdentifierDeclStatement	name_string_t * pnstr ;	165:4:5122:5142	8885760	1	True				
ANR	8885768	IdentifierDecl	* pnstr		8885760	0					
ANR	8885769	IdentifierDeclType	name_string_t *		8885760	0					
ANR	8885770	Identifier	pnstr		8885760	1					
ANR	8885771	IdentifierDeclStatement	uint nidx ;	166:4:5148:5157	8885760	2	True				
ANR	8885772	IdentifierDecl	nidx		8885760	0					
ANR	8885773	IdentifierDeclType	uint		8885760	0					
ANR	8885774	Identifier	nidx		8885760	1					
ANR	8885775	IdentifierDeclStatement	uint * phash ;	167:4:5163:5174	8885760	3	True				
ANR	8885776	IdentifierDecl	* phash		8885760	0					
ANR	8885777	IdentifierDeclType	uint *		8885760	0					
ANR	8885778	Identifier	phash		8885760	1					
ANR	8885779	SwitchStatement	switch ( size )		8885760	4					
ANR	8885780	Condition	size	171:12:5284:5287	8885760	0	True				
ANR	8885781	Identifier	size		8885760	0					
ANR	8885782	CompoundStatement		9:18:190:190	8885760	1					
ANR	8885783	Label	case 0 :	172:4:5296:5302	8885760	0	True				
ANR	8885784	ExpressionStatement	nidx = name_count_to_index ( 1 )	173:8:5312:5341	8885760	1	True				
ANR	8885785	AssignmentExpression	nidx = name_count_to_index ( 1 )		8885760	0		=			
ANR	8885786	Identifier	nidx		8885760	0					
ANR	8885787	CallExpression	name_count_to_index ( 1 )		8885760	1					
ANR	8885788	Callee	name_count_to_index		8885760	0					
ANR	8885789	Identifier	name_count_to_index		8885760	0					
ANR	8885790	ArgumentList	1		8885760	1					
ANR	8885791	Argument	1		8885760	0					
ANR	8885792	PrimaryExpression	1		8885760	0					
ANR	8885793	ExpressionStatement	"pname = names_index_ptr_inline ( nt , nidx )"	174:8:5351:5391	8885760	2	True				
ANR	8885794	AssignmentExpression	"pname = names_index_ptr_inline ( nt , nidx )"		8885760	0		=			
ANR	8885795	Identifier	pname		8885760	0					
ANR	8885796	CallExpression	"names_index_ptr_inline ( nt , nidx )"		8885760	1					
ANR	8885797	Callee	names_index_ptr_inline		8885760	0					
ANR	8885798	Identifier	names_index_ptr_inline		8885760	0					
ANR	8885799	ArgumentList	nt		8885760	1					
ANR	8885800	Argument	nt		8885760	0					
ANR	8885801	Identifier	nt		8885760	0					
ANR	8885802	Argument	nidx		8885760	1					
ANR	8885803	Identifier	nidx		8885760	0					
ANR	8885804	GotoStatement	goto mkn ;	175:8:5401:5409	8885760	3	True				
ANR	8885805	Identifier	mkn		8885760	0					
ANR	8885806	Label	case 1 :	176:4:5415:5421	8885760	4	True				
ANR	8885807	IfStatement	if ( * ptr < NT_1CHAR_SIZE )		8885760	5					
ANR	8885808	Condition	* ptr < NT_1CHAR_SIZE	177:12:5435:5454	8885760	0	True				
ANR	8885809	RelationalExpression	* ptr < NT_1CHAR_SIZE		8885760	0		<			
ANR	8885810	UnaryOperationExpression	* ptr		8885760	0					
ANR	8885811	UnaryOperator	*		8885760	0					
ANR	8885812	Identifier	ptr		8885760	1					
ANR	8885813	Identifier	NT_1CHAR_SIZE		8885760	1					
ANR	8885814	CompoundStatement		16:12:371:404	8885760	1					
ANR	8885815	IdentifierDeclStatement	uint hash = * ptr + NT_1CHAR_FIRST ;	178:12:5471:5504	8885760	0	True				
ANR	8885816	IdentifierDecl	hash = * ptr + NT_1CHAR_FIRST		8885760	0					
ANR	8885817	IdentifierDeclType	uint		8885760	0					
ANR	8885818	Identifier	hash		8885760	1					
ANR	8885819	AssignmentExpression	hash = * ptr + NT_1CHAR_FIRST		8885760	2		=			
ANR	8885820	Identifier	hash		8885760	0					
ANR	8885821	AdditiveExpression	* ptr + NT_1CHAR_FIRST		8885760	1		+			
ANR	8885822	UnaryOperationExpression	* ptr		8885760	0					
ANR	8885823	UnaryOperator	*		8885760	0					
ANR	8885824	Identifier	ptr		8885760	1					
ANR	8885825	Identifier	NT_1CHAR_FIRST		8885760	1					
ANR	8885826	ExpressionStatement	nidx = name_count_to_index ( hash )	180:12:5519:5551	8885760	1	True				
ANR	8885827	AssignmentExpression	nidx = name_count_to_index ( hash )		8885760	0		=			
ANR	8885828	Identifier	nidx		8885760	0					
ANR	8885829	CallExpression	name_count_to_index ( hash )		8885760	1					
ANR	8885830	Callee	name_count_to_index		8885760	0					
ANR	8885831	Identifier	name_count_to_index		8885760	0					
ANR	8885832	ArgumentList	hash		8885760	1					
ANR	8885833	Argument	hash		8885760	0					
ANR	8885834	Identifier	hash		8885760	0					
ANR	8885835	ExpressionStatement	"pname = names_index_ptr_inline ( nt , nidx )"	181:12:5565:5605	8885760	2	True				
ANR	8885836	AssignmentExpression	"pname = names_index_ptr_inline ( nt , nidx )"		8885760	0		=			
ANR	8885837	Identifier	pname		8885760	0					
ANR	8885838	CallExpression	"names_index_ptr_inline ( nt , nidx )"		8885760	1					
ANR	8885839	Callee	names_index_ptr_inline		8885760	0					
ANR	8885840	Identifier	names_index_ptr_inline		8885760	0					
ANR	8885841	ArgumentList	nt		8885760	1					
ANR	8885842	Argument	nt		8885760	0					
ANR	8885843	Identifier	nt		8885760	0					
ANR	8885844	Argument	nidx		8885760	1					
ANR	8885845	Identifier	nidx		8885760	0					
ANR	8885846	GotoStatement	goto mkn ;	182:12:5619:5627	8885760	3	True				
ANR	8885847	Identifier	mkn		8885760	0					
ANR	8885848	Label	default :	185:4:5671:5678	8885760	6	True				
ANR	8885849	Identifier	default		8885760	0					
ANR	8885850	CompoundStatement		24:8:590:599	8885760	7					
ANR	8885851	IdentifierDeclStatement	uint hash ;	186:8:5690:5699	8885760	0	True				
ANR	8885852	IdentifierDecl	hash		8885760	0					
ANR	8885853	IdentifierDeclType	uint		8885760	0					
ANR	8885854	Identifier	hash		8885760	1					
ANR	8885855	ExpressionStatement	"NAME_HASH ( hash , hash_permutation , ptr , size )"	188:8:5710:5754	8885760	1	True				
ANR	8885856	CallExpression	"NAME_HASH ( hash , hash_permutation , ptr , size )"		8885760	0					
ANR	8885857	Callee	NAME_HASH		8885760	0					
ANR	8885858	Identifier	NAME_HASH		8885760	0					
ANR	8885859	ArgumentList	hash		8885760	1					
ANR	8885860	Argument	hash		8885760	0					
ANR	8885861	Identifier	hash		8885760	0					
ANR	8885862	Argument	hash_permutation		8885760	1					
ANR	8885863	Identifier	hash_permutation		8885760	0					
ANR	8885864	Argument	ptr		8885760	2					
ANR	8885865	Identifier	ptr		8885760	0					
ANR	8885866	Argument	size		8885760	3					
ANR	8885867	Identifier	size		8885760	0					
ANR	8885868	ExpressionStatement	phash = nt -> hash + ( hash & ( NT_HASH_SIZE - 1 ) )	189:8:5764:5810	8885760	2	True				
ANR	8885869	AssignmentExpression	phash = nt -> hash + ( hash & ( NT_HASH_SIZE - 1 ) )		8885760	0		=			
ANR	8885870	Identifier	phash		8885760	0					
ANR	8885871	AdditiveExpression	nt -> hash + ( hash & ( NT_HASH_SIZE - 1 ) )		8885760	1		+			
ANR	8885872	PtrMemberAccess	nt -> hash		8885760	0					
ANR	8885873	Identifier	nt		8885760	0					
ANR	8885874	Identifier	hash		8885760	1					
ANR	8885875	BitAndExpression	hash & ( NT_HASH_SIZE - 1 )		8885760	1		&			
ANR	8885876	Identifier	hash		8885760	0					
ANR	8885877	AdditiveExpression	NT_HASH_SIZE - 1		8885760	1		-			
ANR	8885878	Identifier	NT_HASH_SIZE		8885760	0					
ANR	8885879	PrimaryExpression	1		8885760	1					
ANR	8885880	ForStatement	"for ( nidx = * phash ; nidx != 0 ; nidx = name_next_index ( nidx , pnstr ) )"		8885760	5					
ANR	8885881	ForInit	nidx = * phash ;	193:9:5834:5847	8885760	0	True				
ANR	8885882	AssignmentExpression	nidx = * phash		8885760	0		=			
ANR	8885883	Identifier	nidx		8885760	0					
ANR	8885884	UnaryOperationExpression	* phash		8885760	1					
ANR	8885885	UnaryOperator	*		8885760	0					
ANR	8885886	Identifier	phash		8885760	1					
ANR	8885887	Condition	nidx != 0	193:24:5849:5857	8885760	1	True				
ANR	8885888	EqualityExpression	nidx != 0		8885760	0		!=			
ANR	8885889	Identifier	nidx		8885760	0					
ANR	8885890	PrimaryExpression	0		8885760	1					
ANR	8885891	AssignmentExpression	"nidx = name_next_index ( nidx , pnstr )"	194:9:5869:5903	8885760	2	True	=			
ANR	8885892	Identifier	nidx		8885760	0					
ANR	8885893	CallExpression	"name_next_index ( nidx , pnstr )"		8885760	1					
ANR	8885894	Callee	name_next_index		8885760	0					
ANR	8885895	Identifier	name_next_index		8885760	0					
ANR	8885896	ArgumentList	nidx		8885760	1					
ANR	8885897	Argument	nidx		8885760	0					
ANR	8885898	Identifier	nidx		8885760	0					
ANR	8885899	Argument	pnstr		8885760	1					
ANR	8885900	Identifier	pnstr		8885760	0					
ANR	8885901	CompoundStatement		33:10:815:815	8885760	3					
ANR	8885902	ExpressionStatement	"pnstr = names_index_string_inline ( nt , nidx )"	196:8:5925:5968	8885760	0	True				
ANR	8885903	AssignmentExpression	"pnstr = names_index_string_inline ( nt , nidx )"		8885760	0		=			
ANR	8885904	Identifier	pnstr		8885760	0					
ANR	8885905	CallExpression	"names_index_string_inline ( nt , nidx )"		8885760	1					
ANR	8885906	Callee	names_index_string_inline		8885760	0					
ANR	8885907	Identifier	names_index_string_inline		8885760	0					
ANR	8885908	ArgumentList	nt		8885760	1					
ANR	8885909	Argument	nt		8885760	0					
ANR	8885910	Identifier	nt		8885760	0					
ANR	8885911	Argument	nidx		8885760	1					
ANR	8885912	Identifier	nidx		8885760	0					
ANR	8885913	IfStatement	"if ( pnstr -> string_size == size && ! memcmp_inline ( ptr , pnstr -> string_bytes , size ) )"		8885760	1					
ANR	8885914	Condition	"pnstr -> string_size == size && ! memcmp_inline ( ptr , pnstr -> string_bytes , size )"	197:12:5982:6069	8885760	0	True				
ANR	8885915	AndExpression	"pnstr -> string_size == size && ! memcmp_inline ( ptr , pnstr -> string_bytes , size )"		8885760	0		&&			
ANR	8885916	EqualityExpression	pnstr -> string_size == size		8885760	0		==			
ANR	8885917	PtrMemberAccess	pnstr -> string_size		8885760	0					
ANR	8885918	Identifier	pnstr		8885760	0					
ANR	8885919	Identifier	string_size		8885760	1					
ANR	8885920	Identifier	size		8885760	1					
ANR	8885921	UnaryOperationExpression	"! memcmp_inline ( ptr , pnstr -> string_bytes , size )"		8885760	1					
ANR	8885922	UnaryOperator	!		8885760	0					
ANR	8885923	CallExpression	"memcmp_inline ( ptr , pnstr -> string_bytes , size )"		8885760	1					
ANR	8885924	Callee	memcmp_inline		8885760	0					
ANR	8885925	Identifier	memcmp_inline		8885760	0					
ANR	8885926	ArgumentList	ptr		8885760	1					
ANR	8885927	Argument	ptr		8885760	0					
ANR	8885928	Identifier	ptr		8885760	0					
ANR	8885929	Argument	pnstr -> string_bytes		8885760	1					
ANR	8885930	PtrMemberAccess	pnstr -> string_bytes		8885760	0					
ANR	8885931	Identifier	pnstr		8885760	0					
ANR	8885932	Identifier	string_bytes		8885760	1					
ANR	8885933	Argument	size		8885760	2					
ANR	8885934	Identifier	size		8885760	0					
ANR	8885935	CompoundStatement		37:14:985:985	8885760	1					
ANR	8885936	ExpressionStatement	"pname = name_index_ptr_inline ( nt , nidx )"	200:12:6099:6138	8885760	0	True				
ANR	8885937	AssignmentExpression	"pname = name_index_ptr_inline ( nt , nidx )"		8885760	0		=			
ANR	8885938	Identifier	pname		8885760	0					
ANR	8885939	CallExpression	"name_index_ptr_inline ( nt , nidx )"		8885760	1					
ANR	8885940	Callee	name_index_ptr_inline		8885760	0					
ANR	8885941	Identifier	name_index_ptr_inline		8885760	0					
ANR	8885942	ArgumentList	nt		8885760	1					
ANR	8885943	Argument	nt		8885760	0					
ANR	8885944	Identifier	nt		8885760	0					
ANR	8885945	Argument	nidx		8885760	1					
ANR	8885946	Identifier	nidx		8885760	0					
ANR	8885947	GotoStatement	goto mkn ;	201:12:6152:6160	8885760	1	True				
ANR	8885948	Identifier	mkn		8885760	0					
ANR	8885949	IfStatement	if ( enterflag < 0 )		8885760	6					
ANR	8885950	Condition	enterflag < 0	205:8:6242:6254	8885760	0	True				
ANR	8885951	RelationalExpression	enterflag < 0		8885760	0		<			
ANR	8885952	Identifier	enterflag		8885760	0					
ANR	8885953	PrimaryExpression	0		8885760	1					
ANR	8885954	ExpressionStatement	return_error ( gs_error_undefined )	206:8:6265:6297	8885760	1	True				
ANR	8885955	CallExpression	return_error ( gs_error_undefined )		8885760	0					
ANR	8885956	Callee	return_error		8885760	0					
ANR	8885957	Identifier	return_error		8885760	0					
ANR	8885958	ArgumentList	gs_error_undefined		8885760	1					
ANR	8885959	Argument	gs_error_undefined		8885760	0					
ANR	8885960	Identifier	gs_error_undefined		8885760	0					
ANR	8885961	IfStatement	if ( size > max_name_string )		8885760	7					
ANR	8885962	Condition	size > max_name_string	207:8:6307:6328	8885760	0	True				
ANR	8885963	RelationalExpression	size > max_name_string		8885760	0		>			
ANR	8885964	Identifier	size		8885760	0					
ANR	8885965	Identifier	max_name_string		8885760	1					
ANR	8885966	ExpressionStatement	return_error ( gs_error_limitcheck )	208:8:6339:6372	8885760	1	True				
ANR	8885967	CallExpression	return_error ( gs_error_limitcheck )		8885760	0					
ANR	8885968	Callee	return_error		8885760	0					
ANR	8885969	Identifier	return_error		8885760	0					
ANR	8885970	ArgumentList	gs_error_limitcheck		8885760	1					
ANR	8885971	Argument	gs_error_limitcheck		8885760	0					
ANR	8885972	Identifier	gs_error_limitcheck		8885760	0					
ANR	8885973	ExpressionStatement	nidx = nt -> free	209:4:6378:6393	8885760	8	True				
ANR	8885974	AssignmentExpression	nidx = nt -> free		8885760	0		=			
ANR	8885975	Identifier	nidx		8885760	0					
ANR	8885976	PtrMemberAccess	nt -> free		8885760	1					
ANR	8885977	Identifier	nt		8885760	0					
ANR	8885978	Identifier	free		8885760	1					
ANR	8885979	IfStatement	if ( nidx == 0 )		8885760	9					
ANR	8885980	Condition	nidx == 0	210:8:6403:6411	8885760	0	True				
ANR	8885981	EqualityExpression	nidx == 0		8885760	0		==			
ANR	8885982	Identifier	nidx		8885760	0					
ANR	8885983	PrimaryExpression	0		8885760	1					
ANR	8885984	CompoundStatement		49:8:1324:1353	8885760	1					
ANR	8885985	IdentifierDeclStatement	int code = name_alloc_sub ( nt ) ;	211:8:6424:6453	8885760	0	True				
ANR	8885986	IdentifierDecl	code = name_alloc_sub ( nt )		8885760	0					
ANR	8885987	IdentifierDeclType	int		8885760	0					
ANR	8885988	Identifier	code		8885760	1					
ANR	8885989	AssignmentExpression	code = name_alloc_sub ( nt )		8885760	2		=			
ANR	8885990	Identifier	code		8885760	0					
ANR	8885991	CallExpression	name_alloc_sub ( nt )		8885760	1					
ANR	8885992	Callee	name_alloc_sub		8885760	0					
ANR	8885993	Identifier	name_alloc_sub		8885760	0					
ANR	8885994	ArgumentList	nt		8885760	1					
ANR	8885995	Argument	nt		8885760	0					
ANR	8885996	Identifier	nt		8885760	0					
ANR	8885997	IfStatement	if ( code < 0 )		8885760	1					
ANR	8885998	Condition	code < 0	213:12:6468:6475	8885760	0	True				
ANR	8885999	RelationalExpression	code < 0		8885760	0		<			
ANR	8886000	Identifier	code		8885760	0					
ANR	8886001	PrimaryExpression	0		8885760	1					
ANR	8886002	ReturnStatement	return code ;	214:12:6490:6501	8885760	1	True				
ANR	8886003	Identifier	code		8885760	0					
ANR	8886004	ExpressionStatement	nidx = nt -> free	215:8:6511:6526	8885760	2	True				
ANR	8886005	AssignmentExpression	nidx = nt -> free		8885760	0		=			
ANR	8886006	Identifier	nidx		8885760	0					
ANR	8886007	PtrMemberAccess	nt -> free		8885760	1					
ANR	8886008	Identifier	nt		8885760	0					
ANR	8886009	Identifier	free		8885760	1					
ANR	8886010	ExpressionStatement	"pnstr = names_index_string_inline ( nt , nidx )"	217:4:6538:6581	8885760	10	True				
ANR	8886011	AssignmentExpression	"pnstr = names_index_string_inline ( nt , nidx )"		8885760	0		=			
ANR	8886012	Identifier	pnstr		8885760	0					
ANR	8886013	CallExpression	"names_index_string_inline ( nt , nidx )"		8885760	1					
ANR	8886014	Callee	names_index_string_inline		8885760	0					
ANR	8886015	Identifier	names_index_string_inline		8885760	0					
ANR	8886016	ArgumentList	nt		8885760	1					
ANR	8886017	Argument	nt		8885760	0					
ANR	8886018	Identifier	nt		8885760	0					
ANR	8886019	Argument	nidx		8885760	1					
ANR	8886020	Identifier	nidx		8885760	0					
ANR	8886021	IfStatement	if ( enterflag == 1 )		8885760	11					
ANR	8886022	Condition	enterflag == 1	218:8:6591:6604	8885760	0	True				
ANR	8886023	EqualityExpression	enterflag == 1		8885760	0		==			
ANR	8886024	Identifier	enterflag		8885760	0					
ANR	8886025	PrimaryExpression	1		8885760	1					
ANR	8886026	CompoundStatement		57:8:1517:1637	8885760	1					
ANR	8886027	IdentifierDeclStatement	"byte * cptr = ( byte * ) gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" ) ;"	219:8:6617:6737	8885760	0	True				
ANR	8886028	IdentifierDecl	"* cptr = ( byte * ) gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" )"		8885760	0					
ANR	8886029	IdentifierDeclType	byte *		8885760	0					
ANR	8886030	Identifier	cptr		8885760	1					
ANR	8886031	AssignmentExpression	"* cptr = ( byte * ) gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" )"		8885760	2		=			
ANR	8886032	Identifier	cptr		8885760	0					
ANR	8886033	CastExpression	"( byte * ) gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" )"		8885760	1					
ANR	8886034	CastTarget	byte *		8885760	0					
ANR	8886035	CallExpression	"gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" )"		8885760	1					
ANR	8886036	Callee	gs_alloc_string		8885760	0					
ANR	8886037	Identifier	gs_alloc_string		8885760	0					
ANR	8886038	ArgumentList	nt -> memory		8885760	1					
ANR	8886039	Argument	nt -> memory		8885760	0					
ANR	8886040	PtrMemberAccess	nt -> memory		8885760	0					
ANR	8886041	Identifier	nt		8885760	0					
ANR	8886042	Identifier	memory		8885760	1					
ANR	8886043	Argument	size		8885760	1					
ANR	8886044	Identifier	size		8885760	0					
ANR	8886045	Argument	"""names_ref(string)"""		8885760	2					
ANR	8886046	PrimaryExpression	"""names_ref(string)"""		8885760	0					
ANR	8886047	IfStatement	if ( cptr == 0 )		8885760	1					
ANR	8886048	Condition	cptr == 0	222:12:6752:6760	8885760	0	True				
ANR	8886049	EqualityExpression	cptr == 0		8885760	0		==			
ANR	8886050	Identifier	cptr		8885760	0					
ANR	8886051	PrimaryExpression	0		8885760	1					
ANR	8886052	ExpressionStatement	return_error ( gs_error_VMerror )	223:12:6775:6805	8885760	1	True				
ANR	8886053	CallExpression	return_error ( gs_error_VMerror )		8885760	0					
ANR	8886054	Callee	return_error		8885760	0					
ANR	8886055	Identifier	return_error		8885760	0					
ANR	8886056	ArgumentList	gs_error_VMerror		8885760	1					
ANR	8886057	Argument	gs_error_VMerror		8885760	0					
ANR	8886058	Identifier	gs_error_VMerror		8885760	0					
ANR	8886059	ExpressionStatement	"memcpy ( cptr , ptr , size )"	224:8:6815:6838	8885760	2	True				
ANR	8886060	CallExpression	"memcpy ( cptr , ptr , size )"		8885760	0					
ANR	8886061	Callee	memcpy		8885760	0					
ANR	8886062	Identifier	memcpy		8885760	0					
ANR	8886063	ArgumentList	cptr		8885760	1					
ANR	8886064	Argument	cptr		8885760	0					
ANR	8886065	Identifier	cptr		8885760	0					
ANR	8886066	Argument	ptr		8885760	1					
ANR	8886067	Identifier	ptr		8885760	0					
ANR	8886068	Argument	size		8885760	2					
ANR	8886069	Identifier	size		8885760	0					
ANR	8886070	ExpressionStatement	pnstr -> string_bytes = cptr	225:8:6848:6874	8885760	3	True				
ANR	8886071	AssignmentExpression	pnstr -> string_bytes = cptr		8885760	0		=			
ANR	8886072	PtrMemberAccess	pnstr -> string_bytes		8885760	0					
ANR	8886073	Identifier	pnstr		8885760	0					
ANR	8886074	Identifier	string_bytes		8885760	1					
ANR	8886075	Identifier	cptr		8885760	1					
ANR	8886076	ExpressionStatement	pnstr -> foreign_string = 0	226:8:6884:6909	8885760	4	True				
ANR	8886077	AssignmentExpression	pnstr -> foreign_string = 0		8885760	0		=			
ANR	8886078	PtrMemberAccess	pnstr -> foreign_string		8885760	0					
ANR	8886079	Identifier	pnstr		8885760	0					
ANR	8886080	Identifier	foreign_string		8885760	1					
ANR	8886081	PrimaryExpression	0		8885760	1					
ANR	8886082	ElseStatement	else		8885760	0					
ANR	8886083	CompoundStatement		65:11:1822:1822	8885760	0					
ANR	8886084	ExpressionStatement	pnstr -> string_bytes = ptr	228:8:6932:6957	8885760	0	True				
ANR	8886085	AssignmentExpression	pnstr -> string_bytes = ptr		8885760	0		=			
ANR	8886086	PtrMemberAccess	pnstr -> string_bytes		8885760	0					
ANR	8886087	Identifier	pnstr		8885760	0					
ANR	8886088	Identifier	string_bytes		8885760	1					
ANR	8886089	Identifier	ptr		8885760	1					
ANR	8886090	ExpressionStatement	pnstr -> foreign_string = ( enterflag == 0 ? 1 : 0 )	229:8:6967:7015	8885760	1	True				
ANR	8886091	AssignmentExpression	pnstr -> foreign_string = ( enterflag == 0 ? 1 : 0 )		8885760	0		=			
ANR	8886092	PtrMemberAccess	pnstr -> foreign_string		8885760	0					
ANR	8886093	Identifier	pnstr		8885760	0					
ANR	8886094	Identifier	foreign_string		8885760	1					
ANR	8886095	ConditionalExpression	enterflag == 0 ? 1 : 0		8885760	1					
ANR	8886096	Condition	enterflag == 0		8885760	0					
ANR	8886097	EqualityExpression	enterflag == 0		8885760	0		==			
ANR	8886098	Identifier	enterflag		8885760	0					
ANR	8886099	PrimaryExpression	0		8885760	1					
ANR	8886100	PrimaryExpression	1		8885760	1					
ANR	8886101	PrimaryExpression	0		8885760	2					
ANR	8886102	ExpressionStatement	pnstr -> string_size = size	231:4:7027:7052	8885760	12	True				
ANR	8886103	AssignmentExpression	pnstr -> string_size = size		8885760	0		=			
ANR	8886104	PtrMemberAccess	pnstr -> string_size		8885760	0					
ANR	8886105	Identifier	pnstr		8885760	0					
ANR	8886106	Identifier	string_size		8885760	1					
ANR	8886107	Identifier	size		8885760	1					
ANR	8886108	ExpressionStatement	"pname = name_index_ptr_inline ( nt , nidx )"	232:4:7058:7097	8885760	13	True				
ANR	8886109	AssignmentExpression	"pname = name_index_ptr_inline ( nt , nidx )"		8885760	0		=			
ANR	8886110	Identifier	pname		8885760	0					
ANR	8886111	CallExpression	"name_index_ptr_inline ( nt , nidx )"		8885760	1					
ANR	8886112	Callee	name_index_ptr_inline		8885760	0					
ANR	8886113	Identifier	name_index_ptr_inline		8885760	0					
ANR	8886114	ArgumentList	nt		8885760	1					
ANR	8886115	Argument	nt		8885760	0					
ANR	8886116	Identifier	nt		8885760	0					
ANR	8886117	Argument	nidx		8885760	1					
ANR	8886118	Identifier	nidx		8885760	0					
ANR	8886119	ExpressionStatement	pname -> pvalue = pv_no_defn	233:4:7103:7129	8885760	14	True				
ANR	8886120	AssignmentExpression	pname -> pvalue = pv_no_defn		8885760	0		=			
ANR	8886121	PtrMemberAccess	pname -> pvalue		8885760	0					
ANR	8886122	Identifier	pname		8885760	0					
ANR	8886123	Identifier	pvalue		8885760	1					
ANR	8886124	Identifier	pv_no_defn		8885760	1					
ANR	8886125	ExpressionStatement	"nt -> free = name_next_index ( nidx , pnstr )"	234:4:7135:7174	8885760	15	True				
ANR	8886126	AssignmentExpression	"nt -> free = name_next_index ( nidx , pnstr )"		8885760	0		=			
ANR	8886127	PtrMemberAccess	nt -> free		8885760	0					
ANR	8886128	Identifier	nt		8885760	0					
ANR	8886129	Identifier	free		8885760	1					
ANR	8886130	CallExpression	"name_next_index ( nidx , pnstr )"		8885760	1					
ANR	8886131	Callee	name_next_index		8885760	0					
ANR	8886132	Identifier	name_next_index		8885760	0					
ANR	8886133	ArgumentList	nidx		8885760	1					
ANR	8886134	Argument	nidx		8885760	0					
ANR	8886135	Identifier	nidx		8885760	0					
ANR	8886136	Argument	pnstr		8885760	1					
ANR	8886137	Identifier	pnstr		8885760	0					
ANR	8886138	ExpressionStatement	"set_name_next_index ( nidx , pnstr , * phash )"	235:4:7180:7220	8885760	16	True				
ANR	8886139	CallExpression	"set_name_next_index ( nidx , pnstr , * phash )"		8885760	0					
ANR	8886140	Callee	set_name_next_index		8885760	0					
ANR	8886141	Identifier	set_name_next_index		8885760	0					
ANR	8886142	ArgumentList	nidx		8885760	1					
ANR	8886143	Argument	nidx		8885760	0					
ANR	8886144	Identifier	nidx		8885760	0					
ANR	8886145	Argument	pnstr		8885760	1					
ANR	8886146	Identifier	pnstr		8885760	0					
ANR	8886147	Argument	* phash		8885760	2					
ANR	8886148	UnaryOperationExpression	* phash		8885760	0					
ANR	8886149	UnaryOperator	*		8885760	0					
ANR	8886150	Identifier	phash		8885760	1					
ANR	8886151	ExpressionStatement	* phash = nidx	236:4:7226:7239	8885760	17	True				
ANR	8886152	AssignmentExpression	* phash = nidx		8885760	0		=			
ANR	8886153	UnaryOperationExpression	* phash		8885760	0					
ANR	8886154	UnaryOperator	*		8885760	0					
ANR	8886155	Identifier	phash		8885760	1					
ANR	8886156	Identifier	nidx		8885760	1					
ANR	8886157	ExpressionStatement	"if_debug_name ( ""new name"" , nt , nidx , & enterflag )"	237:4:7245:7292	8885760	18	True				
ANR	8886158	CallExpression	"if_debug_name ( ""new name"" , nt , nidx , & enterflag )"		8885760	0					
ANR	8886159	Callee	if_debug_name		8885760	0					
ANR	8886160	Identifier	if_debug_name		8885760	0					
ANR	8886161	ArgumentList	"""new name"""		8885760	1					
ANR	8886162	Argument	"""new name"""		8885760	0					
ANR	8886163	PrimaryExpression	"""new name"""		8885760	0					
ANR	8886164	Argument	nt		8885760	1					
ANR	8886165	Identifier	nt		8885760	0					
ANR	8886166	Argument	nidx		8885760	2					
ANR	8886167	Identifier	nidx		8885760	0					
ANR	8886168	Argument	& enterflag		8885760	3					
ANR	8886169	UnaryOperationExpression	& enterflag		8885760	0					
ANR	8886170	UnaryOperator	&		8885760	0					
ANR	8886171	Identifier	enterflag		8885760	1					
ANR	8886172	Label	mkn :	238:1:7295:7298	8885760	19	True				
ANR	8886173	Identifier	mkn		8885760	0					
ANR	8886174	ExpressionStatement	"make_name ( pref , nidx , pname )"	239:4:7304:7332	8885760	20	True				
ANR	8886175	CallExpression	"make_name ( pref , nidx , pname )"		8885760	0					
ANR	8886176	Callee	make_name		8885760	0					
ANR	8886177	Identifier	make_name		8885760	0					
ANR	8886178	ArgumentList	pref		8885760	1					
ANR	8886179	Argument	pref		8885760	0					
ANR	8886180	Identifier	pref		8885760	0					
ANR	8886181	Argument	nidx		8885760	1					
ANR	8886182	Identifier	nidx		8885760	0					
ANR	8886183	Argument	pname		8885760	2					
ANR	8886184	Identifier	pname		8885760	0					
ANR	8886185	ReturnStatement	return 0 ;	240:4:7338:7346	8885760	21	True				
ANR	8886186	PrimaryExpression	0		8885760	0					
ANR	8886187	ReturnType	int		8885760	1					
ANR	8886188	Identifier	names_ref		8885760	2					
ANR	8886189	ParameterList	"name_table * nt , const byte * ptr , uint size , ref * pref , int enterflag"		8885760	3					
ANR	8886190	Parameter	name_table * nt	162:10:5029:5042	8885760	0	True				
ANR	8886191	ParameterType	name_table *		8885760	0					
ANR	8886192	Identifier	nt		8885760	1					
ANR	8886193	Parameter	const byte * ptr	162:26:5045:5059	8885760	1	True				
ANR	8886194	ParameterType	const byte *		8885760	0					
ANR	8886195	Identifier	ptr		8885760	1					
ANR	8886196	Parameter	uint size	162:43:5062:5070	8885760	2	True				
ANR	8886197	ParameterType	uint		8885760	0					
ANR	8886198	Identifier	size		8885760	1					
ANR	8886199	Parameter	ref * pref	162:54:5073:5081	8885760	3	True				
ANR	8886200	ParameterType	ref *		8885760	0					
ANR	8886201	Identifier	pref		8885760	1					
ANR	8886202	Parameter	int enterflag	162:65:5084:5096	8885760	4	True				
ANR	8886203	ParameterType	int		8885760	0					
ANR	8886204	Identifier	enterflag		8885760	1					
ANR	8886205	CFGEntryNode	ENTRY		8885760		True				
ANR	8886206	CFGExitNode	EXIT		8885760		True				
ANR	8886207	Symbol	pnstr -> string_size		8885760						
ANR	8886208	Symbol	name_count_to_index		8885760						
ANR	8886209	Symbol	name_index_ptr_inline		8885760						
ANR	8886210	Symbol	* pnstr		8885760						
ANR	8886211	Symbol	code		8885760						
ANR	8886212	Symbol	cptr		8885760						
ANR	8886213	Symbol	nt		8885760						
ANR	8886214	Symbol	gs_error_undefined		8885760						
ANR	8886215	Symbol	nt -> memory		8885760						
ANR	8886216	Symbol	& enterflag		8885760						
ANR	8886217	Symbol	max_name_string		8885760						
ANR	8886218	Symbol	nt -> free		8885760						
ANR	8886219	Symbol	hash_permutation		8885760						
ANR	8886220	Symbol	pref		8885760						
ANR	8886221	Symbol	names_index_ptr_inline		8885760						
ANR	8886222	Symbol	gs_error_limitcheck		8885760						
ANR	8886223	Symbol	* ptr		8885760						
ANR	8886224	Symbol	gs_alloc_string		8885760						
ANR	8886225	Symbol	pnstr -> foreign_string		8885760						
ANR	8886226	Symbol	NT_1CHAR_FIRST		8885760						
ANR	8886227	Symbol	NT_HASH_SIZE		8885760						
ANR	8886228	Symbol	phash		8885760						
ANR	8886229	Symbol	pname		8885760						
ANR	8886230	Symbol	enterflag		8885760						
ANR	8886231	Symbol	pnstr -> string_bytes		8885760						
ANR	8886232	Symbol	name_alloc_sub		8885760						
ANR	8886233	Symbol	nt -> hash		8885760						
ANR	8886234	Symbol	memcmp_inline		8885760						
ANR	8886235	Symbol	pnstr		8885760						
ANR	8886236	Symbol	names_index_string_inline		8885760						
ANR	8886237	Symbol	ptr		8885760						
ANR	8886238	Symbol	* nt		8885760						
ANR	8886239	Symbol	name_next_index		8885760						
ANR	8886240	Symbol	gs_error_VMerror		8885760						
ANR	8886241	Symbol	* phash		8885760						
ANR	8886242	Symbol	pv_no_defn		8885760						
ANR	8886243	Symbol	size		8885760						
ANR	8886244	Symbol	pname -> pvalue		8885760						
ANR	8886245	Symbol	NT_1CHAR_SIZE		8885760						
ANR	8886246	Symbol	* pname		8885760						
ANR	8886247	Symbol	nidx		8885760						
ANR	8886248	Symbol	hash		8885760						
ANR	8886249	Function	names_string_ref	244:0:7384:7834							
ANR	8886250	FunctionDef	"names_string_ref (const name_table * nt , const ref * pnref , ref * psref)"		8886249	0					
ANR	8886251	CompoundStatement		247:0:7516:7834	8886249	0					
ANR	8886252	IdentifierDeclStatement	"const name_string_t * pnstr = names_string_inline ( nt , pnref ) ;"	248:4:7522:7581	8886249	0	True				
ANR	8886253	IdentifierDecl	"* pnstr = names_string_inline ( nt , pnref )"		8886249	0					
ANR	8886254	IdentifierDeclType	const name_string_t *		8886249	0					
ANR	8886255	Identifier	pnstr		8886249	1					
ANR	8886256	AssignmentExpression	"* pnstr = names_string_inline ( nt , pnref )"		8886249	2		=			
ANR	8886257	Identifier	pnstr		8886249	0					
ANR	8886258	CallExpression	"names_string_inline ( nt , pnref )"		8886249	1					
ANR	8886259	Callee	names_string_inline		8886249	0					
ANR	8886260	Identifier	names_string_inline		8886249	0					
ANR	8886261	ArgumentList	nt		8886249	1					
ANR	8886262	Argument	nt		8886249	0					
ANR	8886263	Identifier	nt		8886249	0					
ANR	8886264	Argument	pnref		8886249	1					
ANR	8886265	Identifier	pnref		8886249	0					
ANR	8886266	ExpressionStatement	"make_const_string ( psref , ( pnstr -> foreign_string ? avm_foreign | a_readonly : nt -> name_string_attrs ) , pnstr -> string_size , ( const byte * ) pnstr -> string_bytes )"	250:4:7588:7832	8886249	1	True				
ANR	8886267	CallExpression	"make_const_string ( psref , ( pnstr -> foreign_string ? avm_foreign | a_readonly : nt -> name_string_attrs ) , pnstr -> string_size , ( const byte * ) pnstr -> string_bytes )"		8886249	0					
ANR	8886268	Callee	make_const_string		8886249	0					
ANR	8886269	Identifier	make_const_string		8886249	0					
ANR	8886270	ArgumentList	psref		8886249	1					
ANR	8886271	Argument	psref		8886249	0					
ANR	8886272	Identifier	psref		8886249	0					
ANR	8886273	Argument	pnstr -> foreign_string ? avm_foreign | a_readonly : nt -> name_string_attrs		8886249	1					
ANR	8886274	ConditionalExpression	pnstr -> foreign_string ? avm_foreign | a_readonly : nt -> name_string_attrs		8886249	0					
ANR	8886275	Condition	pnstr -> foreign_string		8886249	0					
ANR	8886276	PtrMemberAccess	pnstr -> foreign_string		8886249	0					
ANR	8886277	Identifier	pnstr		8886249	0					
ANR	8886278	Identifier	foreign_string		8886249	1					
ANR	8886279	InclusiveOrExpression	avm_foreign | a_readonly		8886249	1		|			
ANR	8886280	Identifier	avm_foreign		8886249	0					
ANR	8886281	Identifier	a_readonly		8886249	1					
ANR	8886282	PtrMemberAccess	nt -> name_string_attrs		8886249	2					
ANR	8886283	Identifier	nt		8886249	0					
ANR	8886284	Identifier	name_string_attrs		8886249	1					
ANR	8886285	Argument	pnstr -> string_size		8886249	2					
ANR	8886286	PtrMemberAccess	pnstr -> string_size		8886249	0					
ANR	8886287	Identifier	pnstr		8886249	0					
ANR	8886288	Identifier	string_size		8886249	1					
ANR	8886289	Argument	( const byte * ) pnstr -> string_bytes		8886249	3					
ANR	8886290	CastExpression	( const byte * ) pnstr -> string_bytes		8886249	0					
ANR	8886291	CastTarget	const byte *		8886249	0					
ANR	8886292	PtrMemberAccess	pnstr -> string_bytes		8886249	1					
ANR	8886293	Identifier	pnstr		8886249	0					
ANR	8886294	Identifier	string_bytes		8886249	1					
ANR	8886295	ReturnType	void		8886249	1					
ANR	8886296	Identifier	names_string_ref		8886249	2					
ANR	8886297	ParameterList	"const name_table * nt , const ref * pnref , ref * psref"		8886249	3					
ANR	8886298	Parameter	const name_table * nt	245:17:7406:7426	8886249	0	True				
ANR	8886299	ParameterType	const name_table *		8886249	0					
ANR	8886300	Identifier	nt		8886249	1					
ANR	8886301	Parameter	const ref * pnref	245:40:7429:7445	8886249	1	True				
ANR	8886302	ParameterType	const ref *		8886249	0					
ANR	8886303	Identifier	pnref		8886249	1					
ANR	8886304	Parameter	ref * psref	246:17:7479:7489	8886249	2	True				
ANR	8886305	ParameterType	ref *		8886249	0					
ANR	8886306	Identifier	psref		8886249	1					
ANR	8886307	CFGEntryNode	ENTRY		8886249		True				
ANR	8886308	CFGExitNode	EXIT		8886249		True				
ANR	8886309	Symbol	pnstr -> string_size		8886249						
ANR	8886310	Symbol	* pnstr		8886249						
ANR	8886311	Symbol	nt		8886249						
ANR	8886312	Symbol	pnstr -> string_bytes		8886249						
ANR	8886313	Symbol	pnref		8886249						
ANR	8886314	Symbol	pnstr		8886249						
ANR	8886315	Symbol	* nt		8886249						
ANR	8886316	Symbol	a_readonly		8886249						
ANR	8886317	Symbol	psref		8886249						
ANR	8886318	Symbol	nt -> name_string_attrs		8886249						
ANR	8886319	Symbol	names_string_inline		8886249						
ANR	8886320	Symbol	avm_foreign		8886249						
ANR	8886321	Symbol	pnstr -> foreign_string		8886249						
ANR	8886322	Function	names_from_string	259:0:7917:8226							
ANR	8886323	FunctionDef	"names_from_string (name_table * nt , const ref * psref , ref * pnref)"		8886322	0					
ANR	8886324	CompoundStatement		261:0:7988:8226	8886322	0					
ANR	8886325	IdentifierDeclStatement	"int exec = r_has_attr ( psref , a_executable ) ;"	262:4:7994:8036	8886322	0	True				
ANR	8886326	IdentifierDecl	"exec = r_has_attr ( psref , a_executable )"		8886322	0					
ANR	8886327	IdentifierDeclType	int		8886322	0					
ANR	8886328	Identifier	exec		8886322	1					
ANR	8886329	AssignmentExpression	"exec = r_has_attr ( psref , a_executable )"		8886322	2		=			
ANR	8886330	Identifier	exec		8886322	0					
ANR	8886331	CallExpression	"r_has_attr ( psref , a_executable )"		8886322	1					
ANR	8886332	Callee	r_has_attr		8886322	0					
ANR	8886333	Identifier	r_has_attr		8886322	0					
ANR	8886334	ArgumentList	psref		8886322	1					
ANR	8886335	Argument	psref		8886322	0					
ANR	8886336	Identifier	psref		8886322	0					
ANR	8886337	Argument	a_executable		8886322	1					
ANR	8886338	Identifier	a_executable		8886322	0					
ANR	8886339	IdentifierDeclStatement	"int code = names_ref ( nt , psref -> value . bytes , r_size ( psref ) , pnref , 1 ) ;"	263:4:8042:8111	8886322	1	True				
ANR	8886340	IdentifierDecl	"code = names_ref ( nt , psref -> value . bytes , r_size ( psref ) , pnref , 1 )"		8886322	0					
ANR	8886341	IdentifierDeclType	int		8886322	0					
ANR	8886342	Identifier	code		8886322	1					
ANR	8886343	AssignmentExpression	"code = names_ref ( nt , psref -> value . bytes , r_size ( psref ) , pnref , 1 )"		8886322	2		=			
ANR	8886344	Identifier	code		8886322	0					
ANR	8886345	CallExpression	"names_ref ( nt , psref -> value . bytes , r_size ( psref ) , pnref , 1 )"		8886322	1					
ANR	8886346	Callee	names_ref		8886322	0					
ANR	8886347	Identifier	names_ref		8886322	0					
ANR	8886348	ArgumentList	nt		8886322	1					
ANR	8886349	Argument	nt		8886322	0					
ANR	8886350	Identifier	nt		8886322	0					
ANR	8886351	Argument	psref -> value . bytes		8886322	1					
ANR	8886352	MemberAccess	psref -> value . bytes		8886322	0					
ANR	8886353	PtrMemberAccess	psref -> value		8886322	0					
ANR	8886354	Identifier	psref		8886322	0					
ANR	8886355	Identifier	value		8886322	1					
ANR	8886356	Identifier	bytes		8886322	1					
ANR	8886357	Argument	r_size ( psref )		8886322	2					
ANR	8886358	CallExpression	r_size ( psref )		8886322	0					
ANR	8886359	Callee	r_size		8886322	0					
ANR	8886360	Identifier	r_size		8886322	0					
ANR	8886361	ArgumentList	psref		8886322	1					
ANR	8886362	Argument	psref		8886322	0					
ANR	8886363	Identifier	psref		8886322	0					
ANR	8886364	Argument	pnref		8886322	3					
ANR	8886365	Identifier	pnref		8886322	0					
ANR	8886366	Argument	1		8886322	4					
ANR	8886367	PrimaryExpression	1		8886322	0					
ANR	8886368	IfStatement	if ( code < 0 )		8886322	2					
ANR	8886369	Condition	code < 0	265:8:8122:8129	8886322	0	True				
ANR	8886370	RelationalExpression	code < 0		8886322	0		<			
ANR	8886371	Identifier	code		8886322	0					
ANR	8886372	PrimaryExpression	0		8886322	1					
ANR	8886373	ReturnStatement	return code ;	266:8:8140:8151	8886322	1	True				
ANR	8886374	Identifier	code		8886322	0					
ANR	8886375	IfStatement	if ( exec )		8886322	3					
ANR	8886376	Condition	exec	267:8:8161:8164	8886322	0	True				
ANR	8886377	Identifier	exec		8886322	0					
ANR	8886378	ExpressionStatement	"r_set_attrs ( pnref , a_executable )"	268:8:8175:8207	8886322	1	True				
ANR	8886379	CallExpression	"r_set_attrs ( pnref , a_executable )"		8886322	0					
ANR	8886380	Callee	r_set_attrs		8886322	0					
ANR	8886381	Identifier	r_set_attrs		8886322	0					
ANR	8886382	ArgumentList	pnref		8886322	1					
ANR	8886383	Argument	pnref		8886322	0					
ANR	8886384	Identifier	pnref		8886322	0					
ANR	8886385	Argument	a_executable		8886322	1					
ANR	8886386	Identifier	a_executable		8886322	0					
ANR	8886387	ReturnStatement	return code ;	269:4:8213:8224	8886322	4	True				
ANR	8886388	Identifier	code		8886322	0					
ANR	8886389	ReturnType	int		8886322	1					
ANR	8886390	Identifier	names_from_string		8886322	2					
ANR	8886391	ParameterList	"name_table * nt , const ref * psref , ref * pnref"		8886322	3					
ANR	8886392	Parameter	name_table * nt	260:18:7939:7953	8886322	0	True				
ANR	8886393	ParameterType	name_table *		8886322	0					
ANR	8886394	Identifier	nt		8886322	1					
ANR	8886395	Parameter	const ref * psref	260:35:7956:7972	8886322	1	True				
ANR	8886396	ParameterType	const ref *		8886322	0					
ANR	8886397	Identifier	psref		8886322	1					
ANR	8886398	Parameter	ref * pnref	260:54:7975:7985	8886322	2	True				
ANR	8886399	ParameterType	ref *		8886322	0					
ANR	8886400	Identifier	pnref		8886322	1					
ANR	8886401	CFGEntryNode	ENTRY		8886322		True				
ANR	8886402	CFGExitNode	EXIT		8886322		True				
ANR	8886403	Symbol	psref		8886322						
ANR	8886404	Symbol	code		8886322						
ANR	8886405	Symbol	r_has_attr		8886322						
ANR	8886406	Symbol	nt		8886322						
ANR	8886407	Symbol	names_ref		8886322						
ANR	8886408	Symbol	r_size		8886322						
ANR	8886409	Symbol	psref -> value . bytes		8886322						
ANR	8886410	Symbol	psref -> value		8886322						
ANR	8886411	Symbol	a_executable		8886322						
ANR	8886412	Symbol	pnref		8886322						
ANR	8886413	Symbol	* psref		8886322						
ANR	8886414	Symbol	exec		8886322						
ANR	8886415	Function	names_enter_string	273:0:8287:8425							
ANR	8886416	FunctionDef	"names_enter_string (name_table * nt , const char * str , ref * pref)"		8886415	0					
ANR	8886417	CompoundStatement		275:0:8356:8425	8886415	0					
ANR	8886418	ReturnStatement	"return names_ref ( nt , ( const byte * ) str , strlen ( str ) , pref , 0 ) ;"	276:4:8362:8423	8886415	0	True				
ANR	8886419	CallExpression	"names_ref ( nt , ( const byte * ) str , strlen ( str ) , pref , 0 )"		8886415	0					
ANR	8886420	Callee	names_ref		8886415	0					
ANR	8886421	Identifier	names_ref		8886415	0					
ANR	8886422	ArgumentList	nt		8886415	1					
ANR	8886423	Argument	nt		8886415	0					
ANR	8886424	Identifier	nt		8886415	0					
ANR	8886425	Argument	( const byte * ) str		8886415	1					
ANR	8886426	CastExpression	( const byte * ) str		8886415	0					
ANR	8886427	CastTarget	const byte *		8886415	0					
ANR	8886428	Identifier	str		8886415	1					
ANR	8886429	Argument	strlen ( str )		8886415	2					
ANR	8886430	CallExpression	strlen ( str )		8886415	0					
ANR	8886431	Callee	strlen		8886415	0					
ANR	8886432	Identifier	strlen		8886415	0					
ANR	8886433	ArgumentList	str		8886415	1					
ANR	8886434	Argument	str		8886415	0					
ANR	8886435	Identifier	str		8886415	0					
ANR	8886436	Argument	pref		8886415	3					
ANR	8886437	Identifier	pref		8886415	0					
ANR	8886438	Argument	0		8886415	4					
ANR	8886439	PrimaryExpression	0		8886415	0					
ANR	8886440	ReturnType	int		8886415	1					
ANR	8886441	Identifier	names_enter_string		8886415	2					
ANR	8886442	ParameterList	"name_table * nt , const char * str , ref * pref"		8886415	3					
ANR	8886443	Parameter	name_table * nt	274:19:8310:8324	8886415	0	True				
ANR	8886444	ParameterType	name_table *		8886415	0					
ANR	8886445	Identifier	nt		8886415	1					
ANR	8886446	Parameter	const char * str	274:36:8327:8341	8886415	1	True				
ANR	8886447	ParameterType	const char *		8886415	0					
ANR	8886448	Identifier	str		8886415	1					
ANR	8886449	Parameter	ref * pref	274:53:8344:8353	8886415	2	True				
ANR	8886450	ParameterType	ref *		8886415	0					
ANR	8886451	Identifier	pref		8886415	1					
ANR	8886452	CFGEntryNode	ENTRY		8886415		True				
ANR	8886453	CFGExitNode	EXIT		8886415		True				
ANR	8886454	Symbol	str		8886415						
ANR	8886455	Symbol	strlen		8886415						
ANR	8886456	Symbol	nt		8886415						
ANR	8886457	Symbol	pref		8886415						
ANR	8886458	Symbol	names_ref		8886415						
ANR	8886459	Function	names_invalidate_value_cache	280:0:8473:8588							
ANR	8886460	FunctionDef	"names_invalidate_value_cache (name_table * nt , const ref * pnref)"		8886459	0					
ANR	8886461	CompoundStatement		282:0:8543:8588	8886459	0					
ANR	8886462	ExpressionStatement	pnref -> value . pname -> pvalue = pv_other	283:4:8549:8586	8886459	0	True				
ANR	8886463	AssignmentExpression	pnref -> value . pname -> pvalue = pv_other		8886459	0		=			
ANR	8886464	PtrMemberAccess	pnref -> value . pname -> pvalue		8886459	0					
ANR	8886465	MemberAccess	pnref -> value . pname		8886459	0					
ANR	8886466	PtrMemberAccess	pnref -> value		8886459	0					
ANR	8886467	Identifier	pnref		8886459	0					
ANR	8886468	Identifier	value		8886459	1					
ANR	8886469	Identifier	pname		8886459	1					
ANR	8886470	Identifier	pvalue		8886459	1					
ANR	8886471	Identifier	pv_other		8886459	1					
ANR	8886472	ReturnType	void		8886459	1					
ANR	8886473	Identifier	names_invalidate_value_cache		8886459	2					
ANR	8886474	ParameterList	"name_table * nt , const ref * pnref"		8886459	3					
ANR	8886475	Parameter	name_table * nt	281:29:8507:8521	8886459	0	True				
ANR	8886476	ParameterType	name_table *		8886459	0					
ANR	8886477	Identifier	nt		8886459	1					
ANR	8886478	Parameter	const ref * pnref	281:46:8524:8540	8886459	1	True				
ANR	8886479	ParameterType	const ref *		8886459	0					
ANR	8886480	Identifier	pnref		8886459	1					
ANR	8886481	CFGEntryNode	ENTRY		8886459		True				
ANR	8886482	CFGExitNode	EXIT		8886459		True				
ANR	8886483	Symbol	* pnref		8886459						
ANR	8886484	Symbol	* pnref -> value		8886459						
ANR	8886485	Symbol	nt		8886459						
ANR	8886486	Symbol	pnref -> value		8886459						
ANR	8886487	Symbol	pv_other		8886459						
ANR	8886488	Symbol	* * pnref		8886459						
ANR	8886489	Symbol	* pnref -> value . pname		8886459						
ANR	8886490	Symbol	pnref -> value . pname		8886459						
ANR	8886491	Symbol	pnref		8886459						
ANR	8886492	Symbol	pnref -> value . pname -> pvalue		8886459						
ANR	8886493	Function	names_index	287:1:8633:8762							
ANR	8886494	FunctionDef	"names_index (const name_table * nt , const ref * pnref)"		8886493	0					
ANR	8886495	CompoundStatement		290:0:8718:8762	8886493	0					
ANR	8886496	ReturnStatement	"return names_index_inline ( nt , pnref ) ;"	291:4:8724:8760	8886493	0	True				
ANR	8886497	CallExpression	"names_index_inline ( nt , pnref )"		8886493	0					
ANR	8886498	Callee	names_index_inline		8886493	0					
ANR	8886499	Identifier	names_index_inline		8886493	0					
ANR	8886500	ArgumentList	nt		8886493	1					
ANR	8886501	Argument	nt		8886493	0					
ANR	8886502	Identifier	nt		8886493	0					
ANR	8886503	Argument	pnref		8886493	1					
ANR	8886504	Identifier	pnref		8886493	0					
ANR	8886505	ReturnType	undef names_index name_index_t		8886493	1					
ANR	8886506	Identifier	names_index		8886493	2					
ANR	8886507	ParameterList	"const name_table * nt , const ref * pnref"		8886493	3					
ANR	8886508	Parameter	const name_table * nt	289:12:8676:8696	8886493	0	True				
ANR	8886509	ParameterType	const name_table *		8886493	0					
ANR	8886510	Identifier	nt		8886493	1					
ANR	8886511	Parameter	const ref * pnref	289:35:8699:8715	8886493	1	True				
ANR	8886512	ParameterType	const ref *		8886493	0					
ANR	8886513	Identifier	pnref		8886493	1					
ANR	8886514	CFGEntryNode	ENTRY		8886493		True				
ANR	8886515	CFGExitNode	EXIT		8886493		True				
ANR	8886516	Symbol	nt		8886493						
ANR	8886517	Symbol	names_index_inline		8886493						
ANR	8886518	Symbol	pnref		8886493						
ANR	8886519	Function	names_index_ref	293:0:8764:8889							
ANR	8886520	FunctionDef	"names_index_ref (const name_table * nt , name_index_t index , ref * pnref)"		8886519	0					
ANR	8886521	CompoundStatement		295:0:8841:8889	8886519	0					
ANR	8886522	ExpressionStatement	"names_index_ref_inline ( nt , index , pnref )"	296:4:8847:8887	8886519	0	True				
ANR	8886523	CallExpression	"names_index_ref_inline ( nt , index , pnref )"		8886519	0					
ANR	8886524	Callee	names_index_ref_inline		8886519	0					
ANR	8886525	Identifier	names_index_ref_inline		8886519	0					
ANR	8886526	ArgumentList	nt		8886519	1					
ANR	8886527	Argument	nt		8886519	0					
ANR	8886528	Identifier	nt		8886519	0					
ANR	8886529	Argument	index		8886519	1					
ANR	8886530	Identifier	index		8886519	0					
ANR	8886531	Argument	pnref		8886519	2					
ANR	8886532	Identifier	pnref		8886519	0					
ANR	8886533	ReturnType	void		8886519	1					
ANR	8886534	Identifier	names_index_ref		8886519	2					
ANR	8886535	ParameterList	"const name_table * nt , name_index_t index , ref * pnref"		8886519	3					
ANR	8886536	Parameter	const name_table * nt	294:16:8785:8805	8886519	0	True				
ANR	8886537	ParameterType	const name_table *		8886519	0					
ANR	8886538	Identifier	nt		8886519	1					
ANR	8886539	Parameter	name_index_t index	294:39:8808:8825	8886519	1	True				
ANR	8886540	ParameterType	name_index_t		8886519	0					
ANR	8886541	Identifier	index		8886519	1					
ANR	8886542	Parameter	ref * pnref	294:59:8828:8838	8886519	2	True				
ANR	8886543	ParameterType	ref *		8886519	0					
ANR	8886544	Identifier	pnref		8886519	1					
ANR	8886545	CFGEntryNode	ENTRY		8886519		True				
ANR	8886546	CFGExitNode	EXIT		8886519		True				
ANR	8886547	Symbol	nt		8886519						
ANR	8886548	Symbol	index		8886519						
ANR	8886549	Symbol	pnref		8886519						
ANR	8886550	Function	names_index_ptr	298:0:8891:9005							
ANR	8886551	FunctionDef	"names_index_ptr (const name_table * nt , name_index_t index)"		8886550	0					
ANR	8886552	CompoundStatement		300:0:8957:9005	8886550	0					
ANR	8886553	ReturnStatement	"return names_index_ptr_inline ( nt , index ) ;"	301:4:8963:9003	8886550	0	True				
ANR	8886554	CallExpression	"names_index_ptr_inline ( nt , index )"		8886550	0					
ANR	8886555	Callee	names_index_ptr_inline		8886550	0					
ANR	8886556	Identifier	names_index_ptr_inline		8886550	0					
ANR	8886557	ArgumentList	nt		8886550	1					
ANR	8886558	Argument	nt		8886550	0					
ANR	8886559	Identifier	nt		8886550	0					
ANR	8886560	Argument	index		8886550	1					
ANR	8886561	Identifier	index		8886550	0					
ANR	8886562	ReturnType	name *		8886550	1					
ANR	8886563	Identifier	names_index_ptr		8886550	2					
ANR	8886564	ParameterList	"const name_table * nt , name_index_t index"		8886550	3					
ANR	8886565	Parameter	const name_table * nt	299:16:8914:8934	8886550	0	True				
ANR	8886566	ParameterType	const name_table *		8886550	0					
ANR	8886567	Identifier	nt		8886550	1					
ANR	8886568	Parameter	name_index_t index	299:39:8937:8954	8886550	1	True				
ANR	8886569	ParameterType	name_index_t		8886550	0					
ANR	8886570	Identifier	index		8886550	1					
ANR	8886571	CFGEntryNode	ENTRY		8886550		True				
ANR	8886572	CFGExitNode	EXIT		8886550		True				
ANR	8886573	Symbol	nt		8886550						
ANR	8886574	Symbol	names_index_ptr_inline		8886550						
ANR	8886575	Symbol	index		8886550						
ANR	8886576	Function	names_next_valid_index	307:0:9131:9796							
ANR	8886577	FunctionDef	"names_next_valid_index (name_table * nt , name_index_t nidx)"		8886576	0					
ANR	8886578	CompoundStatement		309:0:9203:9796	8886576	0					
ANR	8886579	IdentifierDeclStatement	const name_string_sub_table_t * ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings ;	310:4:9209:9296	8886576	0	True				
ANR	8886580	IdentifierDecl	* ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings		8886576	0					
ANR	8886581	IdentifierDeclType	const name_string_sub_table_t *		8886576	0					
ANR	8886582	Identifier	ssub		8886576	1					
ANR	8886583	AssignmentExpression	* ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings		8886576	2		=			
ANR	8886584	Identifier	ssub		8886576	0					
ANR	8886585	MemberAccess	nt -> sub [ nidx >> nt_log2_sub_size ] . strings		8886576	1					
ANR	8886586	ArrayIndexing	nt -> sub [ nidx >> nt_log2_sub_size ]		8886576	0					
ANR	8886587	PtrMemberAccess	nt -> sub		8886576	0					
ANR	8886588	Identifier	nt		8886576	0					
ANR	8886589	Identifier	sub		8886576	1					
ANR	8886590	ShiftExpression	nidx >> nt_log2_sub_size		8886576	1		>>			
ANR	8886591	Identifier	nidx		8886576	0					
ANR	8886592	Identifier	nt_log2_sub_size		8886576	1					
ANR	8886593	Identifier	strings		8886576	1					
ANR	8886594	IdentifierDeclStatement	const name_string_t * pnstr ;	312:4:9302:9328	8886576	1	True				
ANR	8886595	IdentifierDecl	* pnstr		8886576	0					
ANR	8886596	IdentifierDeclType	const name_string_t *		8886576	0					
ANR	8886597	Identifier	pnstr		8886576	1					
ANR	8886598	DoStatement	do		8886576	2					
ANR	8886599	CompoundStatement		6:7:134:134	8886576	0					
ANR	8886600	ExpressionStatement	++ nidx	315:8:9348:9354	8886576	0	True				
ANR	8886601	UnaryExpression	++ nidx		8886576	0					
ANR	8886602	IncDec	++		8886576	0					
ANR	8886603	Identifier	nidx		8886576	1					
ANR	8886604	IfStatement	if ( ( nidx & nt_sub_index_mask ) == 0 )		8886576	1					
ANR	8886605	Condition	( nidx & nt_sub_index_mask ) == 0	316:12:9368:9398	8886576	0	True				
ANR	8886606	EqualityExpression	( nidx & nt_sub_index_mask ) == 0		8886576	0		==			
ANR	8886607	BitAndExpression	nidx & nt_sub_index_mask		8886576	0		&			
ANR	8886608	Identifier	nidx		8886576	0					
ANR	8886609	Identifier	nt_sub_index_mask		8886576	1					
ANR	8886610	PrimaryExpression	0		8886576	1					
ANR	8886611	ForStatement	for ( ; ; nidx += nt_sub_size )		8886576	1					
ANR	8886612	AssignmentExpression	nidx += nt_sub_size	317:20:9421:9439	8886576	0	True	+=			
ANR	8886613	Identifier	nidx		8886576	0					
ANR	8886614	Identifier	nt_sub_size		8886576	1					
ANR	8886615	CompoundStatement		9:41:238:238	8886576	1					
ANR	8886616	IfStatement	if ( ( nidx >> nt_log2_sub_size ) >= nt -> sub_count )		8886576	0					
ANR	8886617	Condition	( nidx >> nt_log2_sub_size ) >= nt -> sub_count	318:20:9464:9506	8886576	0	True				
ANR	8886618	RelationalExpression	( nidx >> nt_log2_sub_size ) >= nt -> sub_count		8886576	0		>=			
ANR	8886619	ShiftExpression	nidx >> nt_log2_sub_size		8886576	0		>>			
ANR	8886620	Identifier	nidx		8886576	0					
ANR	8886621	Identifier	nt_log2_sub_size		8886576	1					
ANR	8886622	PtrMemberAccess	nt -> sub_count		8886576	1					
ANR	8886623	Identifier	nt		8886576	0					
ANR	8886624	Identifier	sub_count		8886576	1					
ANR	8886625	ReturnStatement	return 0 ;	319:20:9529:9537	8886576	1	True				
ANR	8886626	PrimaryExpression	0		8886576	0					
ANR	8886627	ExpressionStatement	ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings	320:16:9555:9603	8886576	1	True				
ANR	8886628	AssignmentExpression	ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings		8886576	0		=			
ANR	8886629	Identifier	ssub		8886576	0					
ANR	8886630	MemberAccess	nt -> sub [ nidx >> nt_log2_sub_size ] . strings		8886576	1					
ANR	8886631	ArrayIndexing	nt -> sub [ nidx >> nt_log2_sub_size ]		8886576	0					
ANR	8886632	PtrMemberAccess	nt -> sub		8886576	0					
ANR	8886633	Identifier	nt		8886576	0					
ANR	8886634	Identifier	sub		8886576	1					
ANR	8886635	ShiftExpression	nidx >> nt_log2_sub_size		8886576	1		>>			
ANR	8886636	Identifier	nidx		8886576	0					
ANR	8886637	Identifier	nt_log2_sub_size		8886576	1					
ANR	8886638	Identifier	strings		8886576	1					
ANR	8886639	IfStatement	if ( ssub != 0 )		8886576	2					
ANR	8886640	Condition	ssub != 0	321:20:9625:9633	8886576	0	True				
ANR	8886641	EqualityExpression	ssub != 0		8886576	0		!=			
ANR	8886642	Identifier	ssub		8886576	0					
ANR	8886643	PrimaryExpression	0		8886576	1					
ANR	8886644	BreakStatement	break ;	322:20:9656:9661	8886576	1	True				
ANR	8886645	ExpressionStatement	pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ]	324:8:9685:9733	8886576	2	True				
ANR	8886646	AssignmentExpression	pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ]		8886576	0		=			
ANR	8886647	Identifier	pnstr		8886576	0					
ANR	8886648	UnaryOperationExpression	& ssub -> strings [ nidx & nt_sub_index_mask ]		8886576	1					
ANR	8886649	UnaryOperator	&		8886576	0					
ANR	8886650	ArrayIndexing	ssub -> strings [ nidx & nt_sub_index_mask ]		8886576	1					
ANR	8886651	PtrMemberAccess	ssub -> strings		8886576	0					
ANR	8886652	Identifier	ssub		8886576	0					
ANR	8886653	Identifier	strings		8886576	1					
ANR	8886654	BitAndExpression	nidx & nt_sub_index_mask		8886576	1		&			
ANR	8886655	Identifier	nidx		8886576	0					
ANR	8886656	Identifier	nt_sub_index_mask		8886576	1					
ANR	8886657	Condition	pnstr -> string_bytes == 0	326:11:9752:9775	8886576	1	True				
ANR	8886658	EqualityExpression	pnstr -> string_bytes == 0		8886576	0		==			
ANR	8886659	PtrMemberAccess	pnstr -> string_bytes		8886576	0					
ANR	8886660	Identifier	pnstr		8886576	0					
ANR	8886661	Identifier	string_bytes		8886576	1					
ANR	8886662	PrimaryExpression	0		8886576	1					
ANR	8886663	ReturnStatement	return nidx ;	327:4:9783:9794	8886576	3	True				
ANR	8886664	Identifier	nidx		8886576	0					
ANR	8886665	ReturnType	name_index_t		8886576	1					
ANR	8886666	Identifier	names_next_valid_index		8886576	2					
ANR	8886667	ParameterList	"name_table * nt , name_index_t nidx"		8886576	3					
ANR	8886668	Parameter	name_table * nt	308:23:9167:9181	8886576	0	True				
ANR	8886669	ParameterType	name_table *		8886576	0					
ANR	8886670	Identifier	nt		8886576	1					
ANR	8886671	Parameter	name_index_t nidx	308:40:9184:9200	8886576	1	True				
ANR	8886672	ParameterType	name_index_t		8886576	0					
ANR	8886673	Identifier	nidx		8886576	1					
ANR	8886674	CFGEntryNode	ENTRY		8886576		True				
ANR	8886675	CFGExitNode	EXIT		8886576		True				
ANR	8886676	InfiniteForNode	true		8886576		True				
ANR	8886677	Symbol	* nt_log2_sub_size		8886576						
ANR	8886678	Symbol	* pnstr		8886576						
ANR	8886679	Symbol	nt_sub_size		8886576						
ANR	8886680	Symbol	ssub -> strings		8886576						
ANR	8886681	Symbol	nt		8886576						
ANR	8886682	Symbol	nt -> sub [ nidx >> nt_log2_sub_size ] . strings		8886576						
ANR	8886683	Symbol	* nidx		8886576						
ANR	8886684	Symbol	* ssub		8886576						
ANR	8886685	Symbol	pnstr -> string_bytes		8886576						
ANR	8886686	Symbol	pnstr		8886576						
ANR	8886687	Symbol	* nt		8886576						
ANR	8886688	Symbol	* * nt		8886576						
ANR	8886689	Symbol	nt -> sub		8886576						
ANR	8886690	Symbol	nt_log2_sub_size		8886576						
ANR	8886691	Symbol	nt -> sub_count		8886576						
ANR	8886692	Symbol	* nt -> sub		8886576						
ANR	8886693	Symbol	ssub		8886576						
ANR	8886694	Symbol	nt_sub_index_mask		8886576						
ANR	8886695	Symbol	nidx		8886576						
ANR	8886696	Function	names_unmark_all	333:0:9905:10394							
ANR	8886697	FunctionDef	names_unmark_all (name_table * nt)		8886696	0					
ANR	8886698	CompoundStatement		335:0:9944:10394	8886696	0					
ANR	8886699	IdentifierDeclStatement	uint si ;	336:4:9950:9957	8886696	0	True				
ANR	8886700	IdentifierDecl	si		8886696	0					
ANR	8886701	IdentifierDeclType	uint		8886696	0					
ANR	8886702	Identifier	si		8886696	1					
ANR	8886703	IdentifierDeclStatement	name_string_sub_table_t * ssub ;	337:4:9963:9992	8886696	1	True				
ANR	8886704	IdentifierDecl	* ssub		8886696	0					
ANR	8886705	IdentifierDeclType	name_string_sub_table_t *		8886696	0					
ANR	8886706	Identifier	ssub		8886696	1					
ANR	8886707	ForStatement	for ( si = 0 ; si < nt -> sub_count ; ++ si )		8886696	2					
ANR	8886708	ForInit	si = 0 ;	339:9:10004:10010	8886696	0	True				
ANR	8886709	AssignmentExpression	si = 0		8886696	0		=			
ANR	8886710	Identifier	si		8886696	0					
ANR	8886711	PrimaryExpression	0		8886696	1					
ANR	8886712	Condition	si < nt -> sub_count	339:17:10012:10029	8886696	1	True				
ANR	8886713	RelationalExpression	si < nt -> sub_count		8886696	0		<			
ANR	8886714	Identifier	si		8886696	0					
ANR	8886715	PtrMemberAccess	nt -> sub_count		8886696	1					
ANR	8886716	Identifier	nt		8886696	0					
ANR	8886717	Identifier	sub_count		8886696	1					
ANR	8886718	UnaryExpression	++ si	339:37:10032:10035	8886696	2	True				
ANR	8886719	IncDec	++		8886696	0					
ANR	8886720	Identifier	si		8886696	1					
ANR	8886721	IfStatement	if ( ( ssub = nt -> sub [ si ] . strings ) != 0 )		8886696	3					
ANR	8886722	Condition	( ssub = nt -> sub [ si ] . strings ) != 0	340:12:10050:10082	8886696	0	True				
ANR	8886723	EqualityExpression	( ssub = nt -> sub [ si ] . strings ) != 0		8886696	0		!=			
ANR	8886724	AssignmentExpression	ssub = nt -> sub [ si ] . strings		8886696	0		=			
ANR	8886725	Identifier	ssub		8886696	0					
ANR	8886726	MemberAccess	nt -> sub [ si ] . strings		8886696	1					
ANR	8886727	ArrayIndexing	nt -> sub [ si ]		8886696	0					
ANR	8886728	PtrMemberAccess	nt -> sub		8886696	0					
ANR	8886729	Identifier	nt		8886696	0					
ANR	8886730	Identifier	sub		8886696	1					
ANR	8886731	Identifier	si		8886696	1					
ANR	8886732	Identifier	strings		8886696	1					
ANR	8886733	PrimaryExpression	0		8886696	1					
ANR	8886734	CompoundStatement		7:12:154:160	8886696	1					
ANR	8886735	IdentifierDeclStatement	uint i ;	341:12:10099:10105	8886696	0	True				
ANR	8886736	IdentifierDecl	i		8886696	0					
ANR	8886737	IdentifierDeclType	uint		8886696	0					
ANR	8886738	Identifier	i		8886696	1					
ANR	8886739	ForStatement	for ( i = 0 ; i < nt_sub_size ; ++ i )		8886696	1					
ANR	8886740	ForInit	i = 0 ;	344:17:10199:10204	8886696	0	True				
ANR	8886741	AssignmentExpression	i = 0		8886696	0		=			
ANR	8886742	Identifier	i		8886696	0					
ANR	8886743	PrimaryExpression	0		8886696	1					
ANR	8886744	Condition	i < nt_sub_size	344:24:10206:10220	8886696	1	True				
ANR	8886745	RelationalExpression	i < nt_sub_size		8886696	0		<			
ANR	8886746	Identifier	i		8886696	0					
ANR	8886747	Identifier	nt_sub_size		8886696	1					
ANR	8886748	UnaryExpression	++ i	344:41:10223:10225	8886696	2	True				
ANR	8886749	IncDec	++		8886696	0					
ANR	8886750	Identifier	i		8886696	1					
ANR	8886751	IfStatement	if ( name_index_to_count ( ( si << nt_log2_sub_size ) + i ) >= nt -> perm_count )		8886696	3					
ANR	8886752	Condition	name_index_to_count ( ( si << nt_log2_sub_size ) + i ) >= nt -> perm_count	345:20:10248:10334	8886696	0	True				
ANR	8886753	RelationalExpression	name_index_to_count ( ( si << nt_log2_sub_size ) + i ) >= nt -> perm_count		8886696	0		>=			
ANR	8886754	CallExpression	name_index_to_count ( ( si << nt_log2_sub_size ) + i )		8886696	0					
ANR	8886755	Callee	name_index_to_count		8886696	0					
ANR	8886756	Identifier	name_index_to_count		8886696	0					
ANR	8886757	ArgumentList	( si << nt_log2_sub_size ) + i		8886696	1					
ANR	8886758	Argument	( si << nt_log2_sub_size ) + i		8886696	0					
ANR	8886759	AdditiveExpression	( si << nt_log2_sub_size ) + i		8886696	0		+			
ANR	8886760	ShiftExpression	si << nt_log2_sub_size		8886696	0		<<			
ANR	8886761	Identifier	si		8886696	0					
ANR	8886762	Identifier	nt_log2_sub_size		8886696	1					
ANR	8886763	Identifier	i		8886696	1					
ANR	8886764	PtrMemberAccess	nt -> perm_count		8886696	1					
ANR	8886765	Identifier	nt		8886696	0					
ANR	8886766	Identifier	perm_count		8886696	1					
ANR	8886767	ExpressionStatement	ssub -> strings [ i ] . mark = 0	347:20:10357:10382	8886696	1	True				
ANR	8886768	AssignmentExpression	ssub -> strings [ i ] . mark = 0		8886696	0		=			
ANR	8886769	MemberAccess	ssub -> strings [ i ] . mark		8886696	0					
ANR	8886770	ArrayIndexing	ssub -> strings [ i ]		8886696	0					
ANR	8886771	PtrMemberAccess	ssub -> strings		8886696	0					
ANR	8886772	Identifier	ssub		8886696	0					
ANR	8886773	Identifier	strings		8886696	1					
ANR	8886774	Identifier	i		8886696	1					
ANR	8886775	Identifier	mark		8886696	1					
ANR	8886776	PrimaryExpression	0		8886696	1					
ANR	8886777	ReturnType	void		8886696	1					
ANR	8886778	Identifier	names_unmark_all		8886696	2					
ANR	8886779	ParameterList	name_table * nt		8886696	3					
ANR	8886780	Parameter	name_table * nt	334:17:9927:9941	8886696	0	True				
ANR	8886781	ParameterType	name_table *		8886696	0					
ANR	8886782	Identifier	nt		8886696	1					
ANR	8886783	CFGEntryNode	ENTRY		8886696		True				
ANR	8886784	CFGExitNode	EXIT		8886696		True				
ANR	8886785	Symbol	nt -> sub [ si ] . strings		8886696						
ANR	8886786	Symbol	nt_sub_size		8886696						
ANR	8886787	Symbol	* * ssub		8886696						
ANR	8886788	Symbol	ssub -> strings		8886696						
ANR	8886789	Symbol	nt		8886696						
ANR	8886790	Symbol	* ssub		8886696						
ANR	8886791	Symbol	i		8886696						
ANR	8886792	Symbol	* ssub -> strings		8886696						
ANR	8886793	Symbol	* nt		8886696						
ANR	8886794	Symbol	* * nt		8886696						
ANR	8886795	Symbol	nt -> sub		8886696						
ANR	8886796	Symbol	name_index_to_count		8886696						
ANR	8886797	Symbol	* i		8886696						
ANR	8886798	Symbol	si		8886696						
ANR	8886799	Symbol	nt_log2_sub_size		8886696						
ANR	8886800	Symbol	ssub -> strings [ i ] . mark		8886696						
ANR	8886801	Symbol	nt -> sub_count		8886696						
ANR	8886802	Symbol	ssub		8886696						
ANR	8886803	Symbol	* nt -> sub		8886696						
ANR	8886804	Symbol	nt -> perm_count		8886696						
ANR	8886805	Symbol	* si		8886696						
ANR	8886806	Function	names_mark_index	353:0:10519:10725							
ANR	8886807	FunctionDef	"names_mark_index (name_table * nt , name_index_t nidx)"		8886806	0					
ANR	8886808	CompoundStatement		355:0:10577:10725	8886806	0					
ANR	8886809	IdentifierDeclStatement	"name_string_t * pnstr = names_index_string_inline ( nt , nidx ) ;"	356:4:10583:10641	8886806	0	True				
ANR	8886810	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , nidx )"		8886806	0					
ANR	8886811	IdentifierDeclType	name_string_t *		8886806	0					
ANR	8886812	Identifier	pnstr		8886806	1					
ANR	8886813	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , nidx )"		8886806	2		=			
ANR	8886814	Identifier	pnstr		8886806	0					
ANR	8886815	CallExpression	"names_index_string_inline ( nt , nidx )"		8886806	1					
ANR	8886816	Callee	names_index_string_inline		8886806	0					
ANR	8886817	Identifier	names_index_string_inline		8886806	0					
ANR	8886818	ArgumentList	nt		8886806	1					
ANR	8886819	Argument	nt		8886806	0					
ANR	8886820	Identifier	nt		8886806	0					
ANR	8886821	Argument	nidx		8886806	1					
ANR	8886822	Identifier	nidx		8886806	0					
ANR	8886823	IfStatement	if ( pnstr -> mark )		8886806	1					
ANR	8886824	Condition	pnstr -> mark	358:8:10652:10662	8886806	0	True				
ANR	8886825	PtrMemberAccess	pnstr -> mark		8886806	0					
ANR	8886826	Identifier	pnstr		8886806	0					
ANR	8886827	Identifier	mark		8886806	1					
ANR	8886828	ReturnStatement	return false ;	359:8:10673:10685	8886806	1	True				
ANR	8886829	Identifier	false		8886806	0					
ANR	8886830	ExpressionStatement	pnstr -> mark = 1	360:4:10691:10706	8886806	2	True				
ANR	8886831	AssignmentExpression	pnstr -> mark = 1		8886806	0		=			
ANR	8886832	PtrMemberAccess	pnstr -> mark		8886806	0					
ANR	8886833	Identifier	pnstr		8886806	0					
ANR	8886834	Identifier	mark		8886806	1					
ANR	8886835	PrimaryExpression	1		8886806	1					
ANR	8886836	ReturnStatement	return true ;	361:4:10712:10723	8886806	3	True				
ANR	8886837	Identifier	true		8886806	0					
ANR	8886838	ReturnType	bool		8886806	1					
ANR	8886839	Identifier	names_mark_index		8886806	2					
ANR	8886840	ParameterList	"name_table * nt , name_index_t nidx"		8886806	3					
ANR	8886841	Parameter	name_table * nt	354:17:10541:10555	8886806	0	True				
ANR	8886842	ParameterType	name_table *		8886806	0					
ANR	8886843	Identifier	nt		8886806	1					
ANR	8886844	Parameter	name_index_t nidx	354:34:10558:10574	8886806	1	True				
ANR	8886845	ParameterType	name_index_t		8886806	0					
ANR	8886846	Identifier	nidx		8886806	1					
ANR	8886847	CFGEntryNode	ENTRY		8886806		True				
ANR	8886848	CFGExitNode	EXIT		8886806		True				
ANR	8886849	Symbol	* pnstr		8886806						
ANR	8886850	Symbol	nt		8886806						
ANR	8886851	Symbol	false		8886806						
ANR	8886852	Symbol	true		8886806						
ANR	8886853	Symbol	pnstr -> mark		8886806						
ANR	8886854	Symbol	nidx		8886806						
ANR	8886855	Symbol	pnstr		8886806						
ANR	8886856	Symbol	names_index_string_inline		8886806						
ANR	8886857	Function	names_ref_sub_table	366:0:10857:11263							
ANR	8886858	FunctionDef	"names_ref_sub_table (name_table * nt , const ref * pnref)"		8886857	0					
ANR	8886859	CompoundStatement		368:0:10938:11263	8886857	0					
ANR	8886860	ReturnStatement	return pnref -> value . pname - ( r_size ( pnref ) & nt_sub_index_mask ) ;	373:4:11198:11261	8886857	0	True				
ANR	8886861	AdditiveExpression	pnref -> value . pname - ( r_size ( pnref ) & nt_sub_index_mask )		8886857	0		-			
ANR	8886862	MemberAccess	pnref -> value . pname		8886857	0					
ANR	8886863	PtrMemberAccess	pnref -> value		8886857	0					
ANR	8886864	Identifier	pnref		8886857	0					
ANR	8886865	Identifier	value		8886857	1					
ANR	8886866	Identifier	pname		8886857	1					
ANR	8886867	BitAndExpression	r_size ( pnref ) & nt_sub_index_mask		8886857	1		&			
ANR	8886868	CallExpression	r_size ( pnref )		8886857	0					
ANR	8886869	Callee	r_size		8886857	0					
ANR	8886870	Identifier	r_size		8886857	0					
ANR	8886871	ArgumentList	pnref		8886857	1					
ANR	8886872	Argument	pnref		8886857	0					
ANR	8886873	Identifier	pnref		8886857	0					
ANR	8886874	Identifier	nt_sub_index_mask		8886857	1					
ANR	8886875	ReturnType	void *		8886857	1					
ANR	8886876	Identifier	names_ref_sub_table		8886857	2					
ANR	8886877	ParameterList	"name_table * nt , const ref * pnref"		8886857	3					
ANR	8886878	Parameter	name_table * nt	367:20:10902:10916	8886857	0	True				
ANR	8886879	ParameterType	name_table *		8886857	0					
ANR	8886880	Identifier	nt		8886857	1					
ANR	8886881	Parameter	const ref * pnref	367:37:10919:10935	8886857	1	True				
ANR	8886882	ParameterType	const ref *		8886857	0					
ANR	8886883	Identifier	pnref		8886857	1					
ANR	8886884	CFGEntryNode	ENTRY		8886857		True				
ANR	8886885	CFGExitNode	EXIT		8886857		True				
ANR	8886886	Symbol	* pnref		8886857						
ANR	8886887	Symbol	nt		8886857						
ANR	8886888	Symbol	pnref -> value		8886857						
ANR	8886889	Symbol	r_size		8886857						
ANR	8886890	Symbol	pnref -> value . pname		8886857						
ANR	8886891	Symbol	pnref		8886857						
ANR	8886892	Symbol	nt_sub_index_mask		8886857						
ANR	8886893	Function	names_index_sub_table	375:0:11265:11404							
ANR	8886894	FunctionDef	"names_index_sub_table (name_table * nt , name_index_t index)"		8886893	0					
ANR	8886895	CompoundStatement		377:0:11349:11404	8886893	0					
ANR	8886896	ReturnStatement	return nt -> sub [ index >> nt_log2_sub_size ] . names ;	378:4:11355:11402	8886893	0	True				
ANR	8886897	MemberAccess	nt -> sub [ index >> nt_log2_sub_size ] . names		8886893	0					
ANR	8886898	ArrayIndexing	nt -> sub [ index >> nt_log2_sub_size ]		8886893	0					
ANR	8886899	PtrMemberAccess	nt -> sub		8886893	0					
ANR	8886900	Identifier	nt		8886893	0					
ANR	8886901	Identifier	sub		8886893	1					
ANR	8886902	ShiftExpression	index >> nt_log2_sub_size		8886893	1		>>			
ANR	8886903	Identifier	index		8886893	0					
ANR	8886904	Identifier	nt_log2_sub_size		8886893	1					
ANR	8886905	Identifier	names		8886893	1					
ANR	8886906	ReturnType	void *		8886893	1					
ANR	8886907	Identifier	names_index_sub_table		8886893	2					
ANR	8886908	ParameterList	"name_table * nt , name_index_t index"		8886893	3					
ANR	8886909	Parameter	name_table * nt	376:22:11312:11326	8886893	0	True				
ANR	8886910	ParameterType	name_table *		8886893	0					
ANR	8886911	Identifier	nt		8886893	1					
ANR	8886912	Parameter	name_index_t index	376:39:11329:11346	8886893	1	True				
ANR	8886913	ParameterType	name_index_t		8886893	0					
ANR	8886914	Identifier	index		8886893	1					
ANR	8886915	CFGEntryNode	ENTRY		8886893		True				
ANR	8886916	CFGExitNode	EXIT		8886893		True				
ANR	8886917	Symbol	nt -> sub		8886893						
ANR	8886918	Symbol	* * nt		8886893						
ANR	8886919	Symbol	* nt_log2_sub_size		8886893						
ANR	8886920	Symbol	nt		8886893						
ANR	8886921	Symbol	nt -> sub [ index >> nt_log2_sub_size ] . names		8886893						
ANR	8886922	Symbol	* index		8886893						
ANR	8886923	Symbol	index		8886893						
ANR	8886924	Symbol	nt_log2_sub_size		8886893						
ANR	8886925	Symbol	* nt -> sub		8886893						
ANR	8886926	Symbol	* nt		8886893						
ANR	8886927	Function	names_index_string_sub_table	380:0:11406:11554							
ANR	8886928	FunctionDef	"names_index_string_sub_table (name_table * nt , name_index_t index)"		8886927	0					
ANR	8886929	CompoundStatement		382:0:11497:11554	8886927	0					
ANR	8886930	ReturnStatement	return nt -> sub [ index >> nt_log2_sub_size ] . strings ;	383:4:11503:11552	8886927	0	True				
ANR	8886931	MemberAccess	nt -> sub [ index >> nt_log2_sub_size ] . strings		8886927	0					
ANR	8886932	ArrayIndexing	nt -> sub [ index >> nt_log2_sub_size ]		8886927	0					
ANR	8886933	PtrMemberAccess	nt -> sub		8886927	0					
ANR	8886934	Identifier	nt		8886927	0					
ANR	8886935	Identifier	sub		8886927	1					
ANR	8886936	ShiftExpression	index >> nt_log2_sub_size		8886927	1		>>			
ANR	8886937	Identifier	index		8886927	0					
ANR	8886938	Identifier	nt_log2_sub_size		8886927	1					
ANR	8886939	Identifier	strings		8886927	1					
ANR	8886940	ReturnType	void *		8886927	1					
ANR	8886941	Identifier	names_index_string_sub_table		8886927	2					
ANR	8886942	ParameterList	"name_table * nt , name_index_t index"		8886927	3					
ANR	8886943	Parameter	name_table * nt	381:29:11460:11474	8886927	0	True				
ANR	8886944	ParameterType	name_table *		8886927	0					
ANR	8886945	Identifier	nt		8886927	1					
ANR	8886946	Parameter	name_index_t index	381:46:11477:11494	8886927	1	True				
ANR	8886947	ParameterType	name_index_t		8886927	0					
ANR	8886948	Identifier	index		8886927	1					
ANR	8886949	CFGEntryNode	ENTRY		8886927		True				
ANR	8886950	CFGExitNode	EXIT		8886927		True				
ANR	8886951	Symbol	nt -> sub		8886927						
ANR	8886952	Symbol	* * nt		8886927						
ANR	8886953	Symbol	* nt_log2_sub_size		8886927						
ANR	8886954	Symbol	nt		8886927						
ANR	8886955	Symbol	* index		8886927						
ANR	8886956	Symbol	index		8886927						
ANR	8886957	Symbol	nt_log2_sub_size		8886927						
ANR	8886958	Symbol	* nt -> sub		8886927						
ANR	8886959	Symbol	nt -> sub [ index >> nt_log2_sub_size ] . strings		8886927						
ANR	8886960	Symbol	* nt		8886927						
ANR	8886961	Function	names_trace_finish	391:0:11780:13199							
ANR	8886962	FunctionDef	"names_trace_finish (name_table * nt , gc_state_t * gcst)"		8886961	0					
ANR	8886963	CompoundStatement		393:0:11840:13199	8886961	0					
ANR	8886964	IdentifierDeclStatement	uint * phash = & nt -> hash [ 0 ] ;	394:4:11846:11872	8886961	0	True				
ANR	8886965	IdentifierDecl	* phash = & nt -> hash [ 0 ]		8886961	0					
ANR	8886966	IdentifierDeclType	uint *		8886961	0					
ANR	8886967	Identifier	phash		8886961	1					
ANR	8886968	AssignmentExpression	* phash = & nt -> hash [ 0 ]		8886961	2		=			
ANR	8886969	Identifier	phash		8886961	0					
ANR	8886970	UnaryOperationExpression	& nt -> hash [ 0 ]		8886961	1					
ANR	8886971	UnaryOperator	&		8886961	0					
ANR	8886972	ArrayIndexing	nt -> hash [ 0 ]		8886961	1					
ANR	8886973	PtrMemberAccess	nt -> hash		8886961	0					
ANR	8886974	Identifier	nt		8886961	0					
ANR	8886975	Identifier	hash		8886961	1					
ANR	8886976	PrimaryExpression	0		8886961	1					
ANR	8886977	IdentifierDeclStatement	int i ;	395:4:11878:11883	8886961	1	True				
ANR	8886978	IdentifierDecl	i		8886961	0					
ANR	8886979	IdentifierDeclType	int		8886961	0					
ANR	8886980	Identifier	i		8886961	1					
ANR	8886981	ForStatement	"for ( i = 0 ; i < NT_HASH_SIZE ; phash ++ , i ++ )"		8886961	2					
ANR	8886982	ForInit	i = 0 ;	397:9:11895:11900	8886961	0	True				
ANR	8886983	AssignmentExpression	i = 0		8886961	0		=			
ANR	8886984	Identifier	i		8886961	0					
ANR	8886985	PrimaryExpression	0		8886961	1					
ANR	8886986	Condition	i < NT_HASH_SIZE	397:16:11902:11917	8886961	1	True				
ANR	8886987	RelationalExpression	i < NT_HASH_SIZE		8886961	0		<			
ANR	8886988	Identifier	i		8886961	0					
ANR	8886989	Identifier	NT_HASH_SIZE		8886961	1					
ANR	8886990	Expression	"phash ++ , i ++"	397:34:11920:11931	8886961	2	True				
ANR	8886991	PostIncDecOperationExpression	phash ++		8886961	0					
ANR	8886992	Identifier	phash		8886961	0					
ANR	8886993	IncDec	++		8886961	1					
ANR	8886994	PostIncDecOperationExpression	i ++		8886961	1					
ANR	8886995	Identifier	i		8886961	0					
ANR	8886996	IncDec	++		8886961	1					
ANR	8886997	CompoundStatement		13:8:377:403	8886961	3					
ANR	8886998	IdentifierDeclStatement	name_index_t prev = 0 ;	398:8:11944:11965	8886961	0	True				
ANR	8886999	IdentifierDecl	prev = 0		8886961	0					
ANR	8887000	IdentifierDeclType	name_index_t		8886961	0					
ANR	8887001	Identifier	prev		8886961	1					
ANR	8887002	AssignmentExpression	prev = 0		8886961	2		=			
ANR	8887003	Identifier	prev		8886961	0					
ANR	8887004	PrimaryExpression	0		8886961	1					
ANR	8887005	IdentifierDeclStatement	name_string_t * pnprev = 0 ;	404:8:12183:12208	8886961	1	True				
ANR	8887006	IdentifierDecl	* pnprev = 0		8886961	0					
ANR	8887007	IdentifierDeclType	name_string_t *		8886961	0					
ANR	8887008	Identifier	pnprev		8886961	1					
ANR	8887009	AssignmentExpression	* pnprev = 0		8886961	2		=			
ANR	8887010	Identifier	pnprev		8886961	0					
ANR	8887011	PrimaryExpression	0		8886961	1					
ANR	8887012	IdentifierDeclStatement	name_index_t nidx = * phash ;	405:8:12218:12244	8886961	2	True				
ANR	8887013	IdentifierDecl	nidx = * phash		8886961	0					
ANR	8887014	IdentifierDeclType	name_index_t		8886961	0					
ANR	8887015	Identifier	nidx		8886961	1					
ANR	8887016	AssignmentExpression	nidx = * phash		8886961	2		=			
ANR	8887017	Identifier	nidx		8886961	0					
ANR	8887018	UnaryOperationExpression	* phash		8886961	1					
ANR	8887019	UnaryOperator	*		8886961	0					
ANR	8887020	Identifier	phash		8886961	1					
ANR	8887021	WhileStatement	while ( nidx != 0 )		8886961	3					
ANR	8887022	Condition	nidx != 0	407:15:12262:12270	8886961	0	True				
ANR	8887023	EqualityExpression	nidx != 0		8886961	0		!=			
ANR	8887024	Identifier	nidx		8886961	0					
ANR	8887025	PrimaryExpression	0		8886961	1					
ANR	8887026	CompoundStatement		17:12:518:566	8886961	1					
ANR	8887027	IdentifierDeclStatement	"name_string_t * pnstr = names_index_string_inline ( nt , nidx ) ;"	408:12:12287:12345	8886961	0	True				
ANR	8887028	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , nidx )"		8886961	0					
ANR	8887029	IdentifierDeclType	name_string_t *		8886961	0					
ANR	8887030	Identifier	pnstr		8886961	1					
ANR	8887031	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , nidx )"		8886961	2		=			
ANR	8887032	Identifier	pnstr		8886961	0					
ANR	8887033	CallExpression	"names_index_string_inline ( nt , nidx )"		8886961	1					
ANR	8887034	Callee	names_index_string_inline		8886961	0					
ANR	8887035	Identifier	names_index_string_inline		8886961	0					
ANR	8887036	ArgumentList	nt		8886961	1					
ANR	8887037	Argument	nt		8886961	0					
ANR	8887038	Identifier	nt		8886961	0					
ANR	8887039	Argument	nidx		8886961	1					
ANR	8887040	Identifier	nidx		8886961	0					
ANR	8887041	IdentifierDeclStatement	"name_index_t next = name_next_index ( nidx , pnstr ) ;"	409:12:12359:12407	8886961	1	True				
ANR	8887042	IdentifierDecl	"next = name_next_index ( nidx , pnstr )"		8886961	0					
ANR	8887043	IdentifierDeclType	name_index_t		8886961	0					
ANR	8887044	Identifier	next		8886961	1					
ANR	8887045	AssignmentExpression	"next = name_next_index ( nidx , pnstr )"		8886961	2		=			
ANR	8887046	Identifier	next		8886961	0					
ANR	8887047	CallExpression	"name_next_index ( nidx , pnstr )"		8886961	1					
ANR	8887048	Callee	name_next_index		8886961	0					
ANR	8887049	Identifier	name_next_index		8886961	0					
ANR	8887050	ArgumentList	nidx		8886961	1					
ANR	8887051	Argument	nidx		8886961	0					
ANR	8887052	Identifier	nidx		8886961	0					
ANR	8887053	Argument	pnstr		8886961	1					
ANR	8887054	Identifier	pnstr		8886961	0					
ANR	8887055	IfStatement	if ( pnstr -> mark )		8886961	2					
ANR	8887056	Condition	pnstr -> mark	411:16:12426:12436	8886961	0	True				
ANR	8887057	PtrMemberAccess	pnstr -> mark		8886961	0					
ANR	8887058	Identifier	pnstr		8886961	0					
ANR	8887059	Identifier	mark		8886961	1					
ANR	8887060	CompoundStatement		19:29:598:598	8886961	1					
ANR	8887061	ExpressionStatement	prev = nidx	412:16:12457:12468	8886961	0	True				
ANR	8887062	AssignmentExpression	prev = nidx		8886961	0		=			
ANR	8887063	Identifier	prev		8886961	0					
ANR	8887064	Identifier	nidx		8886961	1					
ANR	8887065	ExpressionStatement	pnprev = pnstr	413:16:12486:12500	8886961	1	True				
ANR	8887066	AssignmentExpression	pnprev = pnstr		8886961	0		=			
ANR	8887067	Identifier	pnprev		8886961	0					
ANR	8887068	Identifier	pnstr		8886961	1					
ANR	8887069	ElseStatement	else		8886961	0					
ANR	8887070	CompoundStatement		22:19:680:680	8886961	0					
ANR	8887071	ExpressionStatement	"if_debug_name ( ""GC remove name"" , nt , nidx , NULL )"	415:16:12539:12586	8886961	0	True				
ANR	8887072	CallExpression	"if_debug_name ( ""GC remove name"" , nt , nidx , NULL )"		8886961	0					
ANR	8887073	Callee	if_debug_name		8886961	0					
ANR	8887074	Identifier	if_debug_name		8886961	0					
ANR	8887075	ArgumentList	"""GC remove name"""		8886961	1					
ANR	8887076	Argument	"""GC remove name"""		8886961	0					
ANR	8887077	PrimaryExpression	"""GC remove name"""		8886961	0					
ANR	8887078	Argument	nt		8886961	1					
ANR	8887079	Identifier	nt		8886961	0					
ANR	8887080	Argument	nidx		8886961	2					
ANR	8887081	Identifier	nidx		8886961	0					
ANR	8887082	Argument	NULL		8886961	3					
ANR	8887083	Identifier	NULL		8886961	0					
ANR	8887084	ExpressionStatement	pnstr -> string_bytes = 0	417:16:12663:12686	8886961	1	True				
ANR	8887085	AssignmentExpression	pnstr -> string_bytes = 0		8886961	0		=			
ANR	8887086	PtrMemberAccess	pnstr -> string_bytes		8886961	0					
ANR	8887087	Identifier	pnstr		8886961	0					
ANR	8887088	Identifier	string_bytes		8886961	1					
ANR	8887089	PrimaryExpression	0		8886961	1					
ANR	8887090	ExpressionStatement	pnstr -> string_size = 0	418:16:12704:12726	8886961	2	True				
ANR	8887091	AssignmentExpression	pnstr -> string_size = 0		8886961	0		=			
ANR	8887092	PtrMemberAccess	pnstr -> string_size		8886961	0					
ANR	8887093	Identifier	pnstr		8886961	0					
ANR	8887094	Identifier	string_size		8886961	1					
ANR	8887095	PrimaryExpression	0		8886961	1					
ANR	8887096	IfStatement	if ( prev == 0 )		8886961	3					
ANR	8887097	Condition	prev == 0	419:20:12748:12756	8886961	0	True				
ANR	8887098	EqualityExpression	prev == 0		8886961	0		==			
ANR	8887099	Identifier	prev		8886961	0					
ANR	8887100	PrimaryExpression	0		8886961	1					
ANR	8887101	ExpressionStatement	* phash = next	420:20:12779:12792	8886961	1	True				
ANR	8887102	AssignmentExpression	* phash = next		8886961	0		=			
ANR	8887103	UnaryOperationExpression	* phash		8886961	0					
ANR	8887104	UnaryOperator	*		8886961	0					
ANR	8887105	Identifier	phash		8886961	1					
ANR	8887106	Identifier	next		8886961	1					
ANR	8887107	ElseStatement	else		8886961	0					
ANR	8887108	ExpressionStatement	"set_name_next_index ( prev , pnprev , next )"	422:20:12835:12874	8886961	0	True				
ANR	8887109	CallExpression	"set_name_next_index ( prev , pnprev , next )"		8886961	0					
ANR	8887110	Callee	set_name_next_index		8886961	0					
ANR	8887111	Identifier	set_name_next_index		8886961	0					
ANR	8887112	ArgumentList	prev		8886961	1					
ANR	8887113	Argument	prev		8886961	0					
ANR	8887114	Identifier	prev		8886961	0					
ANR	8887115	Argument	pnprev		8886961	1					
ANR	8887116	Identifier	pnprev		8886961	0					
ANR	8887117	Argument	next		8886961	2					
ANR	8887118	Identifier	next		8886961	0					
ANR	8887119	ExpressionStatement	nidx = next	424:12:12902:12913	8886961	3	True				
ANR	8887120	AssignmentExpression	nidx = next		8886961	0		=			
ANR	8887121	Identifier	nidx		8886961	0					
ANR	8887122	Identifier	next		8886961	1					
ANR	8887123	ExpressionStatement	nt -> free = 0	428:4:12972:12984	8886961	3	True				
ANR	8887124	AssignmentExpression	nt -> free = 0		8886961	0		=			
ANR	8887125	PtrMemberAccess	nt -> free		8886961	0					
ANR	8887126	Identifier	nt		8886961	0					
ANR	8887127	Identifier	free		8886961	1					
ANR	8887128	PrimaryExpression	0		8886961	1					
ANR	8887129	ForStatement	for ( i = nt -> sub_count ; -- i >= 0 ; )		8886961	4					
ANR	8887130	ForInit	i = nt -> sub_count ;	429:9:12995:13012	8886961	0	True				
ANR	8887131	AssignmentExpression	i = nt -> sub_count		8886961	0		=			
ANR	8887132	Identifier	i		8886961	0					
ANR	8887133	PtrMemberAccess	nt -> sub_count		8886961	1					
ANR	8887134	Identifier	nt		8886961	0					
ANR	8887135	Identifier	sub_count		8886961	1					
ANR	8887136	Condition	-- i >= 0	429:28:13014:13021	8886961	1	True				
ANR	8887137	RelationalExpression	-- i >= 0		8886961	0		>=			
ANR	8887138	UnaryExpression	-- i		8886961	0					
ANR	8887139	IncDec	--		8886961	0					
ANR	8887140	Identifier	i		8886961	1					
ANR	8887141	PrimaryExpression	0		8886961	1					
ANR	8887142	CompoundStatement		38:8:1194:1232	8886961	2					
ANR	8887143	IdentifierDeclStatement	name_sub_table * sub = nt -> sub [ i ] . names ;	430:8:13035:13073	8886961	0	True				
ANR	8887144	IdentifierDecl	* sub = nt -> sub [ i ] . names		8886961	0					
ANR	8887145	IdentifierDeclType	name_sub_table *		8886961	0					
ANR	8887146	Identifier	sub		8886961	1					
ANR	8887147	AssignmentExpression	* sub = nt -> sub [ i ] . names		8886961	2		=			
ANR	8887148	Identifier	sub		8886961	0					
ANR	8887149	MemberAccess	nt -> sub [ i ] . names		8886961	1					
ANR	8887150	ArrayIndexing	nt -> sub [ i ]		8886961	0					
ANR	8887151	PtrMemberAccess	nt -> sub		8886961	0					
ANR	8887152	Identifier	nt		8886961	0					
ANR	8887153	Identifier	sub		8886961	1					
ANR	8887154	Identifier	i		8886961	1					
ANR	8887155	Identifier	names		8886961	1					
ANR	8887156	IfStatement	if ( sub != 0 )		8886961	1					
ANR	8887157	Condition	sub != 0	432:12:13088:13095	8886961	0	True				
ANR	8887158	EqualityExpression	sub != 0		8886961	0		!=			
ANR	8887159	Identifier	sub		8886961	0					
ANR	8887160	PrimaryExpression	0		8886961	1					
ANR	8887161	CompoundStatement		40:22:1257:1257	8886961	1					
ANR	8887162	ExpressionStatement	"name_scan_sub ( nt , i , true , true && ( gcst != 0 ) )"	433:12:13112:13159	8886961	0	True				
ANR	8887163	CallExpression	"name_scan_sub ( nt , i , true , true && ( gcst != 0 ) )"		8886961	0					
ANR	8887164	Callee	name_scan_sub		8886961	0					
ANR	8887165	Identifier	name_scan_sub		8886961	0					
ANR	8887166	ArgumentList	nt		8886961	1					
ANR	8887167	Argument	nt		8886961	0					
ANR	8887168	Identifier	nt		8886961	0					
ANR	8887169	Argument	i		8886961	1					
ANR	8887170	Identifier	i		8886961	0					
ANR	8887171	Argument	true		8886961	2					
ANR	8887172	Identifier	true		8886961	0					
ANR	8887173	Argument	true && ( gcst != 0 )		8886961	3					
ANR	8887174	AndExpression	true && ( gcst != 0 )		8886961	0		&&			
ANR	8887175	Identifier	true		8886961	0					
ANR	8887176	EqualityExpression	gcst != 0		8886961	1		!=			
ANR	8887177	Identifier	gcst		8886961	0					
ANR	8887178	PrimaryExpression	0		8886961	1					
ANR	8887179	ExpressionStatement	nt -> sub_next = 0	436:4:13181:13197	8886961	5	True				
ANR	8887180	AssignmentExpression	nt -> sub_next = 0		8886961	0		=			
ANR	8887181	PtrMemberAccess	nt -> sub_next		8886961	0					
ANR	8887182	Identifier	nt		8886961	0					
ANR	8887183	Identifier	sub_next		8886961	1					
ANR	8887184	PrimaryExpression	0		8886961	1					
ANR	8887185	ReturnType	void		8886961	1					
ANR	8887186	Identifier	names_trace_finish		8886961	2					
ANR	8887187	ParameterList	"name_table * nt , gc_state_t * gcst"		8886961	3					
ANR	8887188	Parameter	name_table * nt	392:19:11804:11818	8886961	0	True				
ANR	8887189	ParameterType	name_table *		8886961	0					
ANR	8887190	Identifier	nt		8886961	1					
ANR	8887191	Parameter	gc_state_t * gcst	392:36:11821:11837	8886961	1	True				
ANR	8887192	ParameterType	gc_state_t *		8886961	0					
ANR	8887193	Identifier	gcst		8886961	1					
ANR	8887194	CFGEntryNode	ENTRY		8886961		True				
ANR	8887195	CFGExitNode	EXIT		8886961		True				
ANR	8887196	Symbol	next		8886961						
ANR	8887197	Symbol	pnstr -> string_size		8886961						
ANR	8887198	Symbol	sub		8886961						
ANR	8887199	Symbol	* pnstr		8886961						
ANR	8887200	Symbol	nt		8886961						
ANR	8887201	Symbol	prev		8886961						
ANR	8887202	Symbol	nt -> sub [ i ] . names		8886961						
ANR	8887203	Symbol	gcst		8886961						
ANR	8887204	Symbol	nt -> free		8886961						
ANR	8887205	Symbol	pnprev		8886961						
ANR	8887206	Symbol	nt -> sub		8886961						
ANR	8887207	Symbol	* nt -> sub		8886961						
ANR	8887208	Symbol	NT_HASH_SIZE		8886961						
ANR	8887209	Symbol	NULL		8886961						
ANR	8887210	Symbol	phash		8886961						
ANR	8887211	Symbol	i		8886961						
ANR	8887212	Symbol	pnstr -> mark		8886961						
ANR	8887213	Symbol	pnstr -> string_bytes		8886961						
ANR	8887214	Symbol	nt -> hash		8886961						
ANR	8887215	Symbol	pnstr		8886961						
ANR	8887216	Symbol	names_index_string_inline		8886961						
ANR	8887217	Symbol	* nt		8886961						
ANR	8887218	Symbol	name_next_index		8886961						
ANR	8887219	Symbol	* * nt		8886961						
ANR	8887220	Symbol	* phash		8886961						
ANR	8887221	Symbol	* i		8886961						
ANR	8887222	Symbol	nt -> sub_next		8886961						
ANR	8887223	Symbol	true		8886961						
ANR	8887224	Symbol	nt -> sub_count		8886961						
ANR	8887225	Symbol	nidx		8886961						
ANR	8887226	Function	names_restore	447:0:13636:14566							
ANR	8887227	FunctionDef	"names_restore (name_table * nt , alloc_save_t * save)"		8887226	0					
ANR	8887228	CompoundStatement		449:0:13693:14566	8887226	0					
ANR	8887229	IdentifierDeclStatement	uint si ;	452:4:13813:13820	8887226	0	True				
ANR	8887230	IdentifierDecl	si		8887226	0					
ANR	8887231	IdentifierDeclType	uint		8887226	0					
ANR	8887232	Identifier	si		8887226	1					
ANR	8887233	ForStatement	for ( si = 0 ; si < nt -> sub_count ; ++ si )		8887226	1					
ANR	8887234	ForInit	si = 0 ;	454:9:13832:13838	8887226	0	True				
ANR	8887235	AssignmentExpression	si = 0		8887226	0		=			
ANR	8887236	Identifier	si		8887226	0					
ANR	8887237	PrimaryExpression	0		8887226	1					
ANR	8887238	Condition	si < nt -> sub_count	454:17:13840:13857	8887226	1	True				
ANR	8887239	RelationalExpression	si < nt -> sub_count		8887226	0		<			
ANR	8887240	Identifier	si		8887226	0					
ANR	8887241	PtrMemberAccess	nt -> sub_count		8887226	1					
ANR	8887242	Identifier	nt		8887226	0					
ANR	8887243	Identifier	sub_count		8887226	1					
ANR	8887244	UnaryExpression	++ si	454:37:13860:13863	8887226	2	True				
ANR	8887245	IncDec	++		8887226	0					
ANR	8887246	Identifier	si		8887226	1					
ANR	8887247	IfStatement	if ( nt -> sub [ si ] . strings != 0 )		8887226	3					
ANR	8887248	Condition	nt -> sub [ si ] . strings != 0	455:12:13878:13901	8887226	0	True				
ANR	8887249	EqualityExpression	nt -> sub [ si ] . strings != 0		8887226	0		!=			
ANR	8887250	MemberAccess	nt -> sub [ si ] . strings		8887226	0					
ANR	8887251	ArrayIndexing	nt -> sub [ si ]		8887226	0					
ANR	8887252	PtrMemberAccess	nt -> sub		8887226	0					
ANR	8887253	Identifier	nt		8887226	0					
ANR	8887254	Identifier	sub		8887226	1					
ANR	8887255	Identifier	si		8887226	1					
ANR	8887256	Identifier	strings		8887226	1					
ANR	8887257	PrimaryExpression	0		8887226	1					
ANR	8887258	CompoundStatement		8:12:224:230	8887226	1					
ANR	8887259	IdentifierDeclStatement	uint i ;	456:12:13918:13924	8887226	0	True				
ANR	8887260	IdentifierDecl	i		8887226	0					
ANR	8887261	IdentifierDeclType	uint		8887226	0					
ANR	8887262	Identifier	i		8887226	1					
ANR	8887263	ForStatement	for ( i = 0 ; i < nt_sub_size ; ++ i )		8887226	1					
ANR	8887264	ForInit	i = 0 ;	458:17:13944:13949	8887226	0	True				
ANR	8887265	AssignmentExpression	i = 0		8887226	0		=			
ANR	8887266	Identifier	i		8887226	0					
ANR	8887267	PrimaryExpression	0		8887226	1					
ANR	8887268	Condition	i < nt_sub_size	458:24:13951:13965	8887226	1	True				
ANR	8887269	RelationalExpression	i < nt_sub_size		8887226	0		<			
ANR	8887270	Identifier	i		8887226	0					
ANR	8887271	Identifier	nt_sub_size		8887226	1					
ANR	8887272	UnaryExpression	++ i	458:41:13968:13970	8887226	2	True				
ANR	8887273	IncDec	++		8887226	0					
ANR	8887274	Identifier	i		8887226	1					
ANR	8887275	CompoundStatement		11:16:297:399	8887226	3					
ANR	8887276	IdentifierDeclStatement	"name_string_t * pnstr = names_index_string_inline ( nt , ( si << nt_log2_sub_size ) + i ) ;"	459:16:13991:14093	8887226	0	True				
ANR	8887277	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , ( si << nt_log2_sub_size ) + i )"		8887226	0					
ANR	8887278	IdentifierDeclType	name_string_t *		8887226	0					
ANR	8887279	Identifier	pnstr		8887226	1					
ANR	8887280	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , ( si << nt_log2_sub_size ) + i )"		8887226	2		=			
ANR	8887281	Identifier	pnstr		8887226	0					
ANR	8887282	CallExpression	"names_index_string_inline ( nt , ( si << nt_log2_sub_size ) + i )"		8887226	1					
ANR	8887283	Callee	names_index_string_inline		8887226	0					
ANR	8887284	Identifier	names_index_string_inline		8887226	0					
ANR	8887285	ArgumentList	nt		8887226	1					
ANR	8887286	Argument	nt		8887226	0					
ANR	8887287	Identifier	nt		8887226	0					
ANR	8887288	Argument	( si << nt_log2_sub_size ) + i		8887226	1					
ANR	8887289	AdditiveExpression	( si << nt_log2_sub_size ) + i		8887226	0		+			
ANR	8887290	ShiftExpression	si << nt_log2_sub_size		8887226	0		<<			
ANR	8887291	Identifier	si		8887226	0					
ANR	8887292	Identifier	nt_log2_sub_size		8887226	1					
ANR	8887293	Identifier	i		8887226	1					
ANR	8887294	IfStatement	if ( pnstr -> string_bytes == 0 )		8887226	1					
ANR	8887295	Condition	pnstr -> string_bytes == 0	462:20:14116:14139	8887226	0	True				
ANR	8887296	EqualityExpression	pnstr -> string_bytes == 0		8887226	0		==			
ANR	8887297	PtrMemberAccess	pnstr -> string_bytes		8887226	0					
ANR	8887298	Identifier	pnstr		8887226	0					
ANR	8887299	Identifier	string_bytes		8887226	1					
ANR	8887300	PrimaryExpression	0		8887226	1					
ANR	8887301	ExpressionStatement	pnstr -> mark = 0	463:20:14162:14177	8887226	1	True				
ANR	8887302	AssignmentExpression	pnstr -> mark = 0		8887226	0		=			
ANR	8887303	PtrMemberAccess	pnstr -> mark		8887226	0					
ANR	8887304	Identifier	pnstr		8887226	0					
ANR	8887305	Identifier	mark		8887226	1					
ANR	8887306	PrimaryExpression	0		8887226	1					
ANR	8887307	ElseStatement	else		8887226	0					
ANR	8887308	IfStatement	if ( pnstr -> foreign_string )		8887226	0					
ANR	8887309	Condition	pnstr -> foreign_string	464:25:14204:14224	8887226	0	True				
ANR	8887310	PtrMemberAccess	pnstr -> foreign_string		8887226	0					
ANR	8887311	Identifier	pnstr		8887226	0					
ANR	8887312	Identifier	foreign_string		8887226	1					
ANR	8887313	CompoundStatement		16:48:533:533	8887226	1					
ANR	8887314	IfStatement	if ( ! pnstr -> mark )		8887226	0					
ANR	8887315	Condition	! pnstr -> mark	466:24:14323:14334	8887226	0	True				
ANR	8887316	UnaryOperationExpression	! pnstr -> mark		8887226	0					
ANR	8887317	UnaryOperator	!		8887226	0					
ANR	8887318	PtrMemberAccess	pnstr -> mark		8887226	1					
ANR	8887319	Identifier	pnstr		8887226	0					
ANR	8887320	Identifier	mark		8887226	1					
ANR	8887321	ExpressionStatement	pnstr -> mark = 1	467:24:14361:14376	8887226	1	True				
ANR	8887322	AssignmentExpression	pnstr -> mark = 1		8887226	0		=			
ANR	8887323	PtrMemberAccess	pnstr -> mark		8887226	0					
ANR	8887324	Identifier	pnstr		8887226	0					
ANR	8887325	Identifier	mark		8887226	1					
ANR	8887326	PrimaryExpression	1		8887226	1					
ANR	8887327	ElseStatement	else		8887226	0					
ANR	8887328	ExpressionStatement	"pnstr -> mark = ! alloc_is_since_save ( pnstr -> string_bytes , save )"	469:20:14421:14506	8887226	0	True				
ANR	8887329	AssignmentExpression	"pnstr -> mark = ! alloc_is_since_save ( pnstr -> string_bytes , save )"		8887226	0		=			
ANR	8887330	PtrMemberAccess	pnstr -> mark		8887226	0					
ANR	8887331	Identifier	pnstr		8887226	0					
ANR	8887332	Identifier	mark		8887226	1					
ANR	8887333	UnaryOperationExpression	"! alloc_is_since_save ( pnstr -> string_bytes , save )"		8887226	1					
ANR	8887334	UnaryOperator	!		8887226	0					
ANR	8887335	CallExpression	"alloc_is_since_save ( pnstr -> string_bytes , save )"		8887226	1					
ANR	8887336	Callee	alloc_is_since_save		8887226	0					
ANR	8887337	Identifier	alloc_is_since_save		8887226	0					
ANR	8887338	ArgumentList	pnstr -> string_bytes		8887226	1					
ANR	8887339	Argument	pnstr -> string_bytes		8887226	0					
ANR	8887340	PtrMemberAccess	pnstr -> string_bytes		8887226	0					
ANR	8887341	Identifier	pnstr		8887226	0					
ANR	8887342	Identifier	string_bytes		8887226	1					
ANR	8887343	Argument	save		8887226	1					
ANR	8887344	Identifier	save		8887226	0					
ANR	8887345	ExpressionStatement	"names_trace_finish ( nt , NULL )"	473:4:14536:14564	8887226	2	True				
ANR	8887346	CallExpression	"names_trace_finish ( nt , NULL )"		8887226	0					
ANR	8887347	Callee	names_trace_finish		8887226	0					
ANR	8887348	Identifier	names_trace_finish		8887226	0					
ANR	8887349	ArgumentList	nt		8887226	1					
ANR	8887350	Argument	nt		8887226	0					
ANR	8887351	Identifier	nt		8887226	0					
ANR	8887352	Argument	NULL		8887226	1					
ANR	8887353	Identifier	NULL		8887226	0					
ANR	8887354	ReturnType	void		8887226	1					
ANR	8887355	Identifier	names_restore		8887226	2					
ANR	8887356	ParameterList	"name_table * nt , alloc_save_t * save"		8887226	3					
ANR	8887357	Parameter	name_table * nt	448:14:13655:13669	8887226	0	True				
ANR	8887358	ParameterType	name_table *		8887226	0					
ANR	8887359	Identifier	nt		8887226	1					
ANR	8887360	Parameter	alloc_save_t * save	448:31:13672:13690	8887226	1	True				
ANR	8887361	ParameterType	alloc_save_t *		8887226	0					
ANR	8887362	Identifier	save		8887226	1					
ANR	8887363	CFGEntryNode	ENTRY		8887226		True				
ANR	8887364	CFGExitNode	EXIT		8887226		True				
ANR	8887365	Symbol	nt -> sub [ si ] . strings		8887226						
ANR	8887366	Symbol	* pnstr		8887226						
ANR	8887367	Symbol	NULL		8887226						
ANR	8887368	Symbol	nt_sub_size		8887226						
ANR	8887369	Symbol	nt		8887226						
ANR	8887370	Symbol	save		8887226						
ANR	8887371	Symbol	i		8887226						
ANR	8887372	Symbol	pnstr -> string_bytes		8887226						
ANR	8887373	Symbol	pnstr -> mark		8887226						
ANR	8887374	Symbol	pnstr		8887226						
ANR	8887375	Symbol	names_index_string_inline		8887226						
ANR	8887376	Symbol	* nt		8887226						
ANR	8887377	Symbol	nt -> sub		8887226						
ANR	8887378	Symbol	* * nt		8887226						
ANR	8887379	Symbol	si		8887226						
ANR	8887380	Symbol	nt_log2_sub_size		8887226						
ANR	8887381	Symbol	nt -> sub_count		8887226						
ANR	8887382	Symbol	alloc_is_since_save		8887226						
ANR	8887383	Symbol	* nt -> sub		8887226						
ANR	8887384	Symbol	pnstr -> foreign_string		8887226						
ANR	8887385	Symbol	* si		8887226						
ANR	8887386	Function	name_alloc_sub	479:0:14645:16857							
ANR	8887387	FunctionDef	name_alloc_sub (name_table * nt)		8887386	0					
ANR	8887388	CompoundStatement		481:0:14688:16857	8887386	0					
ANR	8887389	IdentifierDeclStatement	gs_memory_t * mem = nt -> memory ;	482:4:14694:14723	8887386	0	True				
ANR	8887390	IdentifierDecl	* mem = nt -> memory		8887386	0					
ANR	8887391	IdentifierDeclType	gs_memory_t *		8887386	0					
ANR	8887392	Identifier	mem		8887386	1					
ANR	8887393	AssignmentExpression	* mem = nt -> memory		8887386	2		=			
ANR	8887394	Identifier	mem		8887386	0					
ANR	8887395	PtrMemberAccess	nt -> memory		8887386	1					
ANR	8887396	Identifier	nt		8887386	0					
ANR	8887397	Identifier	memory		8887386	1					
ANR	8887398	IdentifierDeclStatement	uint sub_index = nt -> sub_next ;	483:4:14729:14758	8887386	1	True				
ANR	8887399	IdentifierDecl	sub_index = nt -> sub_next		8887386	0					
ANR	8887400	IdentifierDeclType	uint		8887386	0					
ANR	8887401	Identifier	sub_index		8887386	1					
ANR	8887402	AssignmentExpression	sub_index = nt -> sub_next		8887386	2		=			
ANR	8887403	Identifier	sub_index		8887386	0					
ANR	8887404	PtrMemberAccess	nt -> sub_next		8887386	1					
ANR	8887405	Identifier	nt		8887386	0					
ANR	8887406	Identifier	sub_next		8887386	1					
ANR	8887407	IdentifierDeclStatement	name_sub_table * sub ;	484:4:14764:14783	8887386	2	True				
ANR	8887408	IdentifierDecl	* sub		8887386	0					
ANR	8887409	IdentifierDeclType	name_sub_table *		8887386	0					
ANR	8887410	Identifier	sub		8887386	1					
ANR	8887411	IdentifierDeclStatement	name_string_sub_table_t * ssub ;	485:4:14789:14818	8887386	3	True				
ANR	8887412	IdentifierDecl	* ssub		8887386	0					
ANR	8887413	IdentifierDeclType	name_string_sub_table_t *		8887386	0					
ANR	8887414	Identifier	ssub		8887386	1					
ANR	8887415	ForStatement	for ( ; ; ++ sub_index )		8887386	4					
ANR	8887416	UnaryExpression	++ sub_index	487:12:14833:14843	8887386	0	True				
ANR	8887417	IncDec	++		8887386	0					
ANR	8887418	Identifier	sub_index		8887386	1					
ANR	8887419	CompoundStatement		7:25:157:157	8887386	1					
ANR	8887420	IfStatement	if ( sub_index > nt -> max_sub_count )		8887386	0					
ANR	8887421	Condition	sub_index > nt -> max_sub_count	488:12:14860:14888	8887386	0	True				
ANR	8887422	RelationalExpression	sub_index > nt -> max_sub_count		8887386	0		>			
ANR	8887423	Identifier	sub_index		8887386	0					
ANR	8887424	PtrMemberAccess	nt -> max_sub_count		8887386	1					
ANR	8887425	Identifier	nt		8887386	0					
ANR	8887426	Identifier	max_sub_count		8887386	1					
ANR	8887427	ExpressionStatement	return_error ( gs_error_limitcheck )	489:12:14903:14936	8887386	1	True				
ANR	8887428	CallExpression	return_error ( gs_error_limitcheck )		8887386	0					
ANR	8887429	Callee	return_error		8887386	0					
ANR	8887430	Identifier	return_error		8887386	0					
ANR	8887431	ArgumentList	gs_error_limitcheck		8887386	1					
ANR	8887432	Argument	gs_error_limitcheck		8887386	0					
ANR	8887433	Identifier	gs_error_limitcheck		8887386	0					
ANR	8887434	IfStatement	if ( nt -> sub [ sub_index ] . names == 0 )		8887386	1					
ANR	8887435	Condition	nt -> sub [ sub_index ] . names == 0	490:12:14950:14978	8887386	0	True				
ANR	8887436	EqualityExpression	nt -> sub [ sub_index ] . names == 0		8887386	0		==			
ANR	8887437	MemberAccess	nt -> sub [ sub_index ] . names		8887386	0					
ANR	8887438	ArrayIndexing	nt -> sub [ sub_index ]		8887386	0					
ANR	8887439	PtrMemberAccess	nt -> sub		8887386	0					
ANR	8887440	Identifier	nt		8887386	0					
ANR	8887441	Identifier	sub		8887386	1					
ANR	8887442	Identifier	sub_index		8887386	1					
ANR	8887443	Identifier	names		8887386	1					
ANR	8887444	PrimaryExpression	0		8887386	1					
ANR	8887445	BreakStatement	break ;	491:12:14993:14998	8887386	1	True				
ANR	8887446	ExpressionStatement	nt -> sub_next = sub_index + 1	493:4:15010:15038	8887386	5	True				
ANR	8887447	AssignmentExpression	nt -> sub_next = sub_index + 1		8887386	0		=			
ANR	8887448	PtrMemberAccess	nt -> sub_next		8887386	0					
ANR	8887449	Identifier	nt		8887386	0					
ANR	8887450	Identifier	sub_next		8887386	1					
ANR	8887451	AdditiveExpression	sub_index + 1		8887386	1		+			
ANR	8887452	Identifier	sub_index		8887386	0					
ANR	8887453	PrimaryExpression	1		8887386	1					
ANR	8887454	IfStatement	if ( nt -> sub_next > nt -> sub_count )		8887386	6					
ANR	8887455	Condition	nt -> sub_next > nt -> sub_count	494:8:15048:15075	8887386	0	True				
ANR	8887456	RelationalExpression	nt -> sub_next > nt -> sub_count		8887386	0		>			
ANR	8887457	PtrMemberAccess	nt -> sub_next		8887386	0					
ANR	8887458	Identifier	nt		8887386	0					
ANR	8887459	Identifier	sub_next		8887386	1					
ANR	8887460	PtrMemberAccess	nt -> sub_count		8887386	1					
ANR	8887461	Identifier	nt		8887386	0					
ANR	8887462	Identifier	sub_count		8887386	1					
ANR	8887463	ExpressionStatement	nt -> sub_count = nt -> sub_next	495:8:15086:15114	8887386	1	True				
ANR	8887464	AssignmentExpression	nt -> sub_count = nt -> sub_next		8887386	0		=			
ANR	8887465	PtrMemberAccess	nt -> sub_count		8887386	0					
ANR	8887466	Identifier	nt		8887386	0					
ANR	8887467	Identifier	sub_count		8887386	1					
ANR	8887468	PtrMemberAccess	nt -> sub_next		8887386	1					
ANR	8887469	Identifier	nt		8887386	0					
ANR	8887470	Identifier	sub_next		8887386	1					
ANR	8887471	ExpressionStatement	"sub = gs_alloc_struct ( mem , name_sub_table , & st_name_sub_table , ""name_alloc_sub(sub-table)"" )"	496:4:15120:15237	8887386	7	True				
ANR	8887472	AssignmentExpression	"sub = gs_alloc_struct ( mem , name_sub_table , & st_name_sub_table , ""name_alloc_sub(sub-table)"" )"		8887386	0		=			
ANR	8887473	Identifier	sub		8887386	0					
ANR	8887474	CallExpression	"gs_alloc_struct ( mem , name_sub_table , & st_name_sub_table , ""name_alloc_sub(sub-table)"" )"		8887386	1					
ANR	8887475	Callee	gs_alloc_struct		8887386	0					
ANR	8887476	Identifier	gs_alloc_struct		8887386	0					
ANR	8887477	ArgumentList	mem		8887386	1					
ANR	8887478	Argument	mem		8887386	0					
ANR	8887479	Identifier	mem		8887386	0					
ANR	8887480	Argument	name_sub_table		8887386	1					
ANR	8887481	Identifier	name_sub_table		8887386	0					
ANR	8887482	Argument	& st_name_sub_table		8887386	2					
ANR	8887483	UnaryOperationExpression	& st_name_sub_table		8887386	0					
ANR	8887484	UnaryOperator	&		8887386	0					
ANR	8887485	Identifier	st_name_sub_table		8887386	1					
ANR	8887486	Argument	"""name_alloc_sub(sub-table)"""		8887386	3					
ANR	8887487	PrimaryExpression	"""name_alloc_sub(sub-table)"""		8887386	0					
ANR	8887488	ExpressionStatement	"ssub = gs_alloc_struct ( mem , name_string_sub_table_t , & st_name_string_sub_table , ""name_alloc_sub(string sub-table)"" )"	498:4:15243:15411	8887386	8	True				
ANR	8887489	AssignmentExpression	"ssub = gs_alloc_struct ( mem , name_string_sub_table_t , & st_name_string_sub_table , ""name_alloc_sub(string sub-table)"" )"		8887386	0		=			
ANR	8887490	Identifier	ssub		8887386	0					
ANR	8887491	CallExpression	"gs_alloc_struct ( mem , name_string_sub_table_t , & st_name_string_sub_table , ""name_alloc_sub(string sub-table)"" )"		8887386	1					
ANR	8887492	Callee	gs_alloc_struct		8887386	0					
ANR	8887493	Identifier	gs_alloc_struct		8887386	0					
ANR	8887494	ArgumentList	mem		8887386	1					
ANR	8887495	Argument	mem		8887386	0					
ANR	8887496	Identifier	mem		8887386	0					
ANR	8887497	Argument	name_string_sub_table_t		8887386	1					
ANR	8887498	Identifier	name_string_sub_table_t		8887386	0					
ANR	8887499	Argument	& st_name_string_sub_table		8887386	2					
ANR	8887500	UnaryOperationExpression	& st_name_string_sub_table		8887386	0					
ANR	8887501	UnaryOperator	&		8887386	0					
ANR	8887502	Identifier	st_name_string_sub_table		8887386	1					
ANR	8887503	Argument	"""name_alloc_sub(string sub-table)"""		8887386	3					
ANR	8887504	PrimaryExpression	"""name_alloc_sub(string sub-table)"""		8887386	0					
ANR	8887505	IfStatement	if ( sub == 0 || ssub == 0 )		8887386	9					
ANR	8887506	Condition	sub == 0 || ssub == 0	501:8:15421:15441	8887386	0	True				
ANR	8887507	OrExpression	sub == 0 || ssub == 0		8887386	0		||			
ANR	8887508	EqualityExpression	sub == 0		8887386	0		==			
ANR	8887509	Identifier	sub		8887386	0					
ANR	8887510	PrimaryExpression	0		8887386	1					
ANR	8887511	EqualityExpression	ssub == 0		8887386	1		==			
ANR	8887512	Identifier	ssub		8887386	0					
ANR	8887513	PrimaryExpression	0		8887386	1					
ANR	8887514	CompoundStatement		21:31:755:755	8887386	1					
ANR	8887515	ExpressionStatement	"gs_free_object ( mem , ssub , ""name_alloc_sub(string sub-table)"" )"	502:8:15454:15515	8887386	0	True				
ANR	8887516	CallExpression	"gs_free_object ( mem , ssub , ""name_alloc_sub(string sub-table)"" )"		8887386	0					
ANR	8887517	Callee	gs_free_object		8887386	0					
ANR	8887518	Identifier	gs_free_object		8887386	0					
ANR	8887519	ArgumentList	mem		8887386	1					
ANR	8887520	Argument	mem		8887386	0					
ANR	8887521	Identifier	mem		8887386	0					
ANR	8887522	Argument	ssub		8887386	1					
ANR	8887523	Identifier	ssub		8887386	0					
ANR	8887524	Argument	"""name_alloc_sub(string sub-table)"""		8887386	2					
ANR	8887525	PrimaryExpression	"""name_alloc_sub(string sub-table)"""		8887386	0					
ANR	8887526	ExpressionStatement	"gs_free_object ( mem , sub , ""name_alloc_sub(sub-table)"" )"	503:8:15525:15578	8887386	1	True				
ANR	8887527	CallExpression	"gs_free_object ( mem , sub , ""name_alloc_sub(sub-table)"" )"		8887386	0					
ANR	8887528	Callee	gs_free_object		8887386	0					
ANR	8887529	Identifier	gs_free_object		8887386	0					
ANR	8887530	ArgumentList	mem		8887386	1					
ANR	8887531	Argument	mem		8887386	0					
ANR	8887532	Identifier	mem		8887386	0					
ANR	8887533	Argument	sub		8887386	1					
ANR	8887534	Identifier	sub		8887386	0					
ANR	8887535	Argument	"""name_alloc_sub(sub-table)"""		8887386	2					
ANR	8887536	PrimaryExpression	"""name_alloc_sub(sub-table)"""		8887386	0					
ANR	8887537	ExpressionStatement	return_error ( gs_error_VMerror )	504:8:15588:15618	8887386	2	True				
ANR	8887538	CallExpression	return_error ( gs_error_VMerror )		8887386	0					
ANR	8887539	Callee	return_error		8887386	0					
ANR	8887540	Identifier	return_error		8887386	0					
ANR	8887541	ArgumentList	gs_error_VMerror		8887386	1					
ANR	8887542	Argument	gs_error_VMerror		8887386	0					
ANR	8887543	Identifier	gs_error_VMerror		8887386	0					
ANR	8887544	ExpressionStatement	"memset ( sub , 0 , sizeof ( name_sub_table ) )"	506:4:15630:15668	8887386	10	True				
ANR	8887545	CallExpression	"memset ( sub , 0 , sizeof ( name_sub_table ) )"		8887386	0					
ANR	8887546	Callee	memset		8887386	0					
ANR	8887547	Identifier	memset		8887386	0					
ANR	8887548	ArgumentList	sub		8887386	1					
ANR	8887549	Argument	sub		8887386	0					
ANR	8887550	Identifier	sub		8887386	0					
ANR	8887551	Argument	0		8887386	1					
ANR	8887552	PrimaryExpression	0		8887386	0					
ANR	8887553	Argument	sizeof ( name_sub_table )		8887386	2					
ANR	8887554	SizeofExpression	sizeof ( name_sub_table )		8887386	0					
ANR	8887555	Sizeof	sizeof		8887386	0					
ANR	8887556	SizeofOperand	name_sub_table		8887386	1					
ANR	8887557	ExpressionStatement	"memset ( ssub , 0 , sizeof ( name_string_sub_table_t ) )"	507:4:15674:15722	8887386	11	True				
ANR	8887558	CallExpression	"memset ( ssub , 0 , sizeof ( name_string_sub_table_t ) )"		8887386	0					
ANR	8887559	Callee	memset		8887386	0					
ANR	8887560	Identifier	memset		8887386	0					
ANR	8887561	ArgumentList	ssub		8887386	1					
ANR	8887562	Argument	ssub		8887386	0					
ANR	8887563	Identifier	ssub		8887386	0					
ANR	8887564	Argument	0		8887386	1					
ANR	8887565	PrimaryExpression	0		8887386	0					
ANR	8887566	Argument	sizeof ( name_string_sub_table_t )		8887386	2					
ANR	8887567	SizeofExpression	sizeof ( name_string_sub_table_t )		8887386	0					
ANR	8887568	Sizeof	sizeof		8887386	0					
ANR	8887569	SizeofOperand	name_string_sub_table_t		8887386	1					
ANR	8887570	ExpressionStatement	sub -> high_index = ( sub_index >> ( 16 - nt_log2_sub_size ) ) << 16	510:4:15827:15889	8887386	12	True				
ANR	8887571	AssignmentExpression	sub -> high_index = ( sub_index >> ( 16 - nt_log2_sub_size ) ) << 16		8887386	0		=			
ANR	8887572	PtrMemberAccess	sub -> high_index		8887386	0					
ANR	8887573	Identifier	sub		8887386	0					
ANR	8887574	Identifier	high_index		8887386	1					
ANR	8887575	ShiftExpression	( sub_index >> ( 16 - nt_log2_sub_size ) ) << 16		8887386	1		<<			
ANR	8887576	ShiftExpression	sub_index >> ( 16 - nt_log2_sub_size )		8887386	0		>>			
ANR	8887577	Identifier	sub_index		8887386	0					
ANR	8887578	AdditiveExpression	16 - nt_log2_sub_size		8887386	1		-			
ANR	8887579	PrimaryExpression	16		8887386	0					
ANR	8887580	Identifier	nt_log2_sub_size		8887386	1					
ANR	8887581	PrimaryExpression	16		8887386	1					
ANR	8887582	ExpressionStatement	nt -> sub [ sub_index ] . names = sub	512:4:15902:15932	8887386	13	True				
ANR	8887583	AssignmentExpression	nt -> sub [ sub_index ] . names = sub		8887386	0		=			
ANR	8887584	MemberAccess	nt -> sub [ sub_index ] . names		8887386	0					
ANR	8887585	ArrayIndexing	nt -> sub [ sub_index ]		8887386	0					
ANR	8887586	PtrMemberAccess	nt -> sub		8887386	0					
ANR	8887587	Identifier	nt		8887386	0					
ANR	8887588	Identifier	sub		8887386	1					
ANR	8887589	Identifier	sub_index		8887386	1					
ANR	8887590	Identifier	names		8887386	1					
ANR	8887591	Identifier	sub		8887386	1					
ANR	8887592	ExpressionStatement	nt -> sub [ sub_index ] . strings = ssub	513:4:15938:15971	8887386	14	True				
ANR	8887593	AssignmentExpression	nt -> sub [ sub_index ] . strings = ssub		8887386	0		=			
ANR	8887594	MemberAccess	nt -> sub [ sub_index ] . strings		8887386	0					
ANR	8887595	ArrayIndexing	nt -> sub [ sub_index ]		8887386	0					
ANR	8887596	PtrMemberAccess	nt -> sub		8887386	0					
ANR	8887597	Identifier	nt		8887386	0					
ANR	8887598	Identifier	sub		8887386	1					
ANR	8887599	Identifier	sub_index		8887386	1					
ANR	8887600	Identifier	strings		8887386	1					
ANR	8887601	Identifier	ssub		8887386	1					
ANR	8887602	ExpressionStatement	"name_scan_sub ( nt , sub_index , false , false )"	517:4:16137:16179	8887386	15	True				
ANR	8887603	CallExpression	"name_scan_sub ( nt , sub_index , false , false )"		8887386	0					
ANR	8887604	Callee	name_scan_sub		8887386	0					
ANR	8887605	Identifier	name_scan_sub		8887386	0					
ANR	8887606	ArgumentList	nt		8887386	1					
ANR	8887607	Argument	nt		8887386	0					
ANR	8887608	Identifier	nt		8887386	0					
ANR	8887609	Argument	sub_index		8887386	1					
ANR	8887610	Identifier	sub_index		8887386	0					
ANR	8887611	Argument	false		8887386	2					
ANR	8887612	Identifier	false		8887386	0					
ANR	8887613	Argument	false		8887386	3					
ANR	8887614	Identifier	false		8887386	0					
ANR	8887615	IfStatement	if ( gs_debug_c ( 'n' ) )		8887386	16					
ANR	8887616	Condition	gs_debug_c ( 'n' )	519:8:16202:16216	8887386	0	True				
ANR	8887617	CallExpression	gs_debug_c ( 'n' )		8887386	0					
ANR	8887618	Callee	gs_debug_c		8887386	0					
ANR	8887619	Identifier	gs_debug_c		8887386	0					
ANR	8887620	ArgumentList	'n'		8887386	1					
ANR	8887621	Argument	'n'		8887386	0					
ANR	8887622	PrimaryExpression	'n'		8887386	0					
ANR	8887623	CompoundStatement		40:8:1584:1590	8887386	1					
ANR	8887624	IdentifierDeclStatement	int i0 ;	520:8:16273:16279	8887386	0	True				
ANR	8887625	IdentifierDecl	i0		8887386	0					
ANR	8887626	IdentifierDeclType	int		8887386	0					
ANR	8887627	Identifier	i0		8887386	1					
ANR	8887628	ForStatement	for ( i0 = 0 ; i0 < NT_HASH_SIZE ; i0 += 16 )		8887386	1					
ANR	8887629	ForInit	i0 = 0 ;	522:13:16295:16301	8887386	0	True				
ANR	8887630	AssignmentExpression	i0 = 0		8887386	0		=			
ANR	8887631	Identifier	i0		8887386	0					
ANR	8887632	PrimaryExpression	0		8887386	1					
ANR	8887633	Condition	i0 < NT_HASH_SIZE	522:21:16303:16319	8887386	1	True				
ANR	8887634	RelationalExpression	i0 < NT_HASH_SIZE		8887386	0		<			
ANR	8887635	Identifier	i0		8887386	0					
ANR	8887636	Identifier	NT_HASH_SIZE		8887386	1					
ANR	8887637	AssignmentExpression	i0 += 16	522:40:16322:16329	8887386	2	True	+=			
ANR	8887638	Identifier	i0		8887386	0					
ANR	8887639	PrimaryExpression	16		8887386	1					
ANR	8887640	CompoundStatement		43:12:1657:1662	8887386	3					
ANR	8887641	IdentifierDeclStatement	int i ;	523:12:16346:16351	8887386	0	True				
ANR	8887642	IdentifierDecl	i		8887386	0					
ANR	8887643	IdentifierDeclType	int		8887386	0					
ANR	8887644	Identifier	i		8887386	1					
ANR	8887645	ExpressionStatement	"dmlprintf1 ( mem , ""[n]chain %d:"" , i0 )"	525:12:16366:16401	8887386	1	True				
ANR	8887646	CallExpression	"dmlprintf1 ( mem , ""[n]chain %d:"" , i0 )"		8887386	0					
ANR	8887647	Callee	dmlprintf1		8887386	0					
ANR	8887648	Identifier	dmlprintf1		8887386	0					
ANR	8887649	ArgumentList	mem		8887386	1					
ANR	8887650	Argument	mem		8887386	0					
ANR	8887651	Identifier	mem		8887386	0					
ANR	8887652	Argument	"""[n]chain %d:"""		8887386	1					
ANR	8887653	PrimaryExpression	"""[n]chain %d:"""		8887386	0					
ANR	8887654	Argument	i0		8887386	2					
ANR	8887655	Identifier	i0		8887386	0					
ANR	8887656	ForStatement	for ( i = i0 ; i < i0 + 16 ; i ++ )		8887386	2					
ANR	8887657	ForInit	i = i0 ;	526:17:16420:16426	8887386	0	True				
ANR	8887658	AssignmentExpression	i = i0		8887386	0		=			
ANR	8887659	Identifier	i		8887386	0					
ANR	8887660	Identifier	i0		8887386	1					
ANR	8887661	Condition	i < i0 + 16	526:25:16428:16438	8887386	1	True				
ANR	8887662	RelationalExpression	i < i0 + 16		8887386	0		<			
ANR	8887663	Identifier	i		8887386	0					
ANR	8887664	AdditiveExpression	i0 + 16		8887386	1		+			
ANR	8887665	Identifier	i0		8887386	0					
ANR	8887666	PrimaryExpression	16		8887386	1					
ANR	8887667	PostIncDecOperationExpression	i ++	526:38:16441:16443	8887386	2	True				
ANR	8887668	Identifier	i		8887386	0					
ANR	8887669	IncDec	++		8887386	1					
ANR	8887670	CompoundStatement		48:16:1802:1811	8887386	3					
ANR	8887671	IdentifierDeclStatement	int n = 0 ;	527:16:16464:16473	8887386	0	True				
ANR	8887672	IdentifierDecl	n = 0		8887386	0					
ANR	8887673	IdentifierDeclType	int		8887386	0					
ANR	8887674	Identifier	n		8887386	1					
ANR	8887675	AssignmentExpression	n = 0		8887386	2		=			
ANR	8887676	Identifier	n		8887386	0					
ANR	8887677	PrimaryExpression	0		8887386	1					
ANR	8887678	IdentifierDeclStatement	uint nidx ;	528:16:16491:16500	8887386	1	True				
ANR	8887679	IdentifierDecl	nidx		8887386	0					
ANR	8887680	IdentifierDeclType	uint		8887386	0					
ANR	8887681	Identifier	nidx		8887386	1					
ANR	8887682	ForStatement	"for ( nidx = nt -> hash [ i ] ; nidx != 0 ; nidx = name_next_index ( nidx , names_index_string_inline ( nt , nidx ) ) )"		8887386	2					
ANR	8887683	ForInit	nidx = nt -> hash [ i ] ;	530:21:16524:16542	8887386	0	True				
ANR	8887684	AssignmentExpression	nidx = nt -> hash [ i ]		8887386	0		=			
ANR	8887685	Identifier	nidx		8887386	0					
ANR	8887686	ArrayIndexing	nt -> hash [ i ]		8887386	1					
ANR	8887687	PtrMemberAccess	nt -> hash		8887386	0					
ANR	8887688	Identifier	nt		8887386	0					
ANR	8887689	Identifier	hash		8887386	1					
ANR	8887690	Identifier	i		8887386	1					
ANR	8887691	Condition	nidx != 0	530:41:16544:16552	8887386	1	True				
ANR	8887692	EqualityExpression	nidx != 0		8887386	0		!=			
ANR	8887693	Identifier	nidx		8887386	0					
ANR	8887694	PrimaryExpression	0		8887386	1					
ANR	8887695	AssignmentExpression	"nidx = name_next_index ( nidx , names_index_string_inline ( nt , nidx ) )"	531:21:16576:16684	8887386	2	True	=			
ANR	8887696	Identifier	nidx		8887386	0					
ANR	8887697	CallExpression	"name_next_index ( nidx , names_index_string_inline ( nt , nidx ) )"		8887386	1					
ANR	8887698	Callee	name_next_index		8887386	0					
ANR	8887699	Identifier	name_next_index		8887386	0					
ANR	8887700	ArgumentList	nidx		8887386	1					
ANR	8887701	Argument	nidx		8887386	0					
ANR	8887702	Identifier	nidx		8887386	0					
ANR	8887703	Argument	"names_index_string_inline ( nt , nidx )"		8887386	1					
ANR	8887704	CallExpression	"names_index_string_inline ( nt , nidx )"		8887386	0					
ANR	8887705	Callee	names_index_string_inline		8887386	0					
ANR	8887706	Identifier	names_index_string_inline		8887386	0					
ANR	8887707	ArgumentList	nt		8887386	1					
ANR	8887708	Argument	nt		8887386	0					
ANR	8887709	Identifier	nt		8887386	0					
ANR	8887710	Argument	nidx		8887386	1					
ANR	8887711	Identifier	nidx		8887386	0					
ANR	8887712	ExpressionStatement	n ++	534:20:16728:16731	8887386	3	True				
ANR	8887713	PostIncDecOperationExpression	n ++		8887386	0					
ANR	8887714	Identifier	n		8887386	0					
ANR	8887715	IncDec	++		8887386	1					
ANR	8887716	ExpressionStatement	"dmprintf1 ( mem , "" %d"" , n )"	535:16:16749:16773	8887386	3	True				
ANR	8887717	CallExpression	"dmprintf1 ( mem , "" %d"" , n )"		8887386	0					
ANR	8887718	Callee	dmprintf1		8887386	0					
ANR	8887719	Identifier	dmprintf1		8887386	0					
ANR	8887720	ArgumentList	mem		8887386	1					
ANR	8887721	Argument	mem		8887386	0					
ANR	8887722	Identifier	mem		8887386	0					
ANR	8887723	Argument	""" %d"""		8887386	1					
ANR	8887724	PrimaryExpression	""" %d"""		8887386	0					
ANR	8887725	Argument	n		8887386	2					
ANR	8887726	Identifier	n		8887386	0					
ANR	8887727	ExpressionStatement	"dmputc ( mem , '\\n' )"	537:12:16801:16818	8887386	3	True				
ANR	8887728	CallExpression	"dmputc ( mem , '\\n' )"		8887386	0					
ANR	8887729	Callee	dmputc		8887386	0					
ANR	8887730	Identifier	dmputc		8887386	0					
ANR	8887731	ArgumentList	mem		8887386	1					
ANR	8887732	Argument	mem		8887386	0					
ANR	8887733	Identifier	mem		8887386	0					
ANR	8887734	Argument	'\\n'		8887386	1					
ANR	8887735	PrimaryExpression	'\\n'		8887386	0					
ANR	8887736	ReturnStatement	return 0 ;	541:4:16847:16855	8887386	17	True				
ANR	8887737	PrimaryExpression	0		8887386	0					
ANR	8887738	ReturnType	static int		8887386	1					
ANR	8887739	Identifier	name_alloc_sub		8887386	2					
ANR	8887740	ParameterList	name_table * nt		8887386	3					
ANR	8887741	Parameter	name_table * nt	480:15:14671:14685	8887386	0	True				
ANR	8887742	ParameterType	name_table *		8887386	0					
ANR	8887743	Identifier	nt		8887386	1					
ANR	8887744	CFGEntryNode	ENTRY		8887386		True				
ANR	8887745	CFGExitNode	EXIT		8887386		True				
ANR	8887746	InfiniteForNode	true		8887386		True				
ANR	8887747	Symbol	nt -> sub [ sub_index ] . strings		8887386						
ANR	8887748	Symbol	sub		8887386						
ANR	8887749	Symbol	nt		8887386						
ANR	8887750	Symbol	nt -> sub [ sub_index ] . names		8887386						
ANR	8887751	Symbol	gs_alloc_struct		8887386						
ANR	8887752	Symbol	nt -> memory		8887386						
ANR	8887753	Symbol	* sub_index		8887386						
ANR	8887754	Symbol	nt -> max_sub_count		8887386						
ANR	8887755	Symbol	nt -> sub		8887386						
ANR	8887756	Symbol	sub -> high_index		8887386						
ANR	8887757	Symbol	* nt -> hash		8887386						
ANR	8887758	Symbol	mem		8887386						
ANR	8887759	Symbol	gs_error_limitcheck		8887386						
ANR	8887760	Symbol	nt_log2_sub_size		8887386						
ANR	8887761	Symbol	gs_debug_c		8887386						
ANR	8887762	Symbol	ssub		8887386						
ANR	8887763	Symbol	* nt -> sub		8887386						
ANR	8887764	Symbol	name_sub_table		8887386						
ANR	8887765	Symbol	& st_name_sub_table		8887386						
ANR	8887766	Symbol	name_string_sub_table_t		8887386						
ANR	8887767	Symbol	NT_HASH_SIZE		8887386						
ANR	8887768	Symbol	i0		8887386						
ANR	8887769	Symbol	false		8887386						
ANR	8887770	Symbol	i		8887386						
ANR	8887771	Symbol	* sub		8887386						
ANR	8887772	Symbol	nt -> hash		8887386						
ANR	8887773	Symbol	names_index_string_inline		8887386						
ANR	8887774	Symbol	n		8887386						
ANR	8887775	Symbol	* nt		8887386						
ANR	8887776	Symbol	name_next_index		8887386						
ANR	8887777	Symbol	* * nt		8887386						
ANR	8887778	Symbol	gs_error_VMerror		8887386						
ANR	8887779	Symbol	sub_index		8887386						
ANR	8887780	Symbol	nt -> sub_next		8887386						
ANR	8887781	Symbol	* i		8887386						
ANR	8887782	Symbol	nt -> sub_count		8887386						
ANR	8887783	Symbol	nidx		8887386						
ANR	8887784	Symbol	& st_name_string_sub_table		8887386						
ANR	8887785	Function	name_free_sub	545:0:16884:17698							
ANR	8887786	FunctionDef	"name_free_sub (name_table * nt , uint sub_index , bool unmark)"		8887785	0					
ANR	8887787	CompoundStatement		547:0:16956:17698	8887785	0					
ANR	8887788	IfStatement	if ( unmark )		8887785	0					
ANR	8887789	Condition	unmark	552:8:17168:17173	8887785	0	True				
ANR	8887790	Identifier	unmark		8887785	0					
ANR	8887791	CompoundStatement		8:8:285:343	8887785	1					
ANR	8887792	IdentifierDeclStatement	name_sub_table * sub = nt -> sub [ sub_index ] . names ;	553:8:17186:17232	8887785	0	True				
ANR	8887793	IdentifierDecl	* sub = nt -> sub [ sub_index ] . names		8887785	0					
ANR	8887794	IdentifierDeclType	name_sub_table *		8887785	0					
ANR	8887795	Identifier	sub		8887785	1					
ANR	8887796	AssignmentExpression	* sub = nt -> sub [ sub_index ] . names		8887785	2		=			
ANR	8887797	Identifier	sub		8887785	0					
ANR	8887798	MemberAccess	nt -> sub [ sub_index ] . names		8887785	1					
ANR	8887799	ArrayIndexing	nt -> sub [ sub_index ]		8887785	0					
ANR	8887800	PtrMemberAccess	nt -> sub		8887785	0					
ANR	8887801	Identifier	nt		8887785	0					
ANR	8887802	Identifier	sub		8887785	1					
ANR	8887803	Identifier	sub_index		8887785	1					
ANR	8887804	Identifier	names		8887785	1					
ANR	8887805	IdentifierDeclStatement	name_string_sub_table_t * ssub = nt -> sub [ sub_index ] . strings ;	554:8:17242:17300	8887785	1	True				
ANR	8887806	IdentifierDecl	* ssub = nt -> sub [ sub_index ] . strings		8887785	0					
ANR	8887807	IdentifierDeclType	name_string_sub_table_t *		8887785	0					
ANR	8887808	Identifier	ssub		8887785	1					
ANR	8887809	AssignmentExpression	* ssub = nt -> sub [ sub_index ] . strings		8887785	2		=			
ANR	8887810	Identifier	ssub		8887785	0					
ANR	8887811	MemberAccess	nt -> sub [ sub_index ] . strings		8887785	1					
ANR	8887812	ArrayIndexing	nt -> sub [ sub_index ]		8887785	0					
ANR	8887813	PtrMemberAccess	nt -> sub		8887785	0					
ANR	8887814	Identifier	nt		8887785	0					
ANR	8887815	Identifier	sub		8887785	1					
ANR	8887816	Identifier	sub_index		8887785	1					
ANR	8887817	Identifier	strings		8887785	1					
ANR	8887818	ExpressionStatement	o_set_unmarked ( ( obj_header_t * ) sub - 1 )	556:8:17311:17350	8887785	2	True				
ANR	8887819	CallExpression	o_set_unmarked ( ( obj_header_t * ) sub - 1 )		8887785	0					
ANR	8887820	Callee	o_set_unmarked		8887785	0					
ANR	8887821	Identifier	o_set_unmarked		8887785	0					
ANR	8887822	ArgumentList	( obj_header_t * ) sub - 1		8887785	1					
ANR	8887823	Argument	( obj_header_t * ) sub - 1		8887785	0					
ANR	8887824	AdditiveExpression	( obj_header_t * ) sub - 1		8887785	0		-			
ANR	8887825	CastExpression	( obj_header_t * ) sub		8887785	0					
ANR	8887826	CastTarget	obj_header_t *		8887785	0					
ANR	8887827	Identifier	sub		8887785	1					
ANR	8887828	PrimaryExpression	1		8887785	1					
ANR	8887829	ExpressionStatement	o_set_unmarked ( ( obj_header_t * ) ssub - 1 )	557:8:17360:17400	8887785	3	True				
ANR	8887830	CallExpression	o_set_unmarked ( ( obj_header_t * ) ssub - 1 )		8887785	0					
ANR	8887831	Callee	o_set_unmarked		8887785	0					
ANR	8887832	Identifier	o_set_unmarked		8887785	0					
ANR	8887833	ArgumentList	( obj_header_t * ) ssub - 1		8887785	1					
ANR	8887834	Argument	( obj_header_t * ) ssub - 1		8887785	0					
ANR	8887835	AdditiveExpression	( obj_header_t * ) ssub - 1		8887785	0		-			
ANR	8887836	CastExpression	( obj_header_t * ) ssub		8887785	0					
ANR	8887837	CastTarget	obj_header_t *		8887785	0					
ANR	8887838	Identifier	ssub		8887785	1					
ANR	8887839	PrimaryExpression	1		8887785	1					
ANR	8887840	ExpressionStatement	"gs_free_object ( nt -> memory , nt -> sub [ sub_index ] . strings , ""name_free_sub(string sub-table)"" )"	560:4:17413:17521	8887785	1	True				
ANR	8887841	CallExpression	"gs_free_object ( nt -> memory , nt -> sub [ sub_index ] . strings , ""name_free_sub(string sub-table)"" )"		8887785	0					
ANR	8887842	Callee	gs_free_object		8887785	0					
ANR	8887843	Identifier	gs_free_object		8887785	0					
ANR	8887844	ArgumentList	nt -> memory		8887785	1					
ANR	8887845	Argument	nt -> memory		8887785	0					
ANR	8887846	PtrMemberAccess	nt -> memory		8887785	0					
ANR	8887847	Identifier	nt		8887785	0					
ANR	8887848	Identifier	memory		8887785	1					
ANR	8887849	Argument	nt -> sub [ sub_index ] . strings		8887785	1					
ANR	8887850	MemberAccess	nt -> sub [ sub_index ] . strings		8887785	0					
ANR	8887851	ArrayIndexing	nt -> sub [ sub_index ]		8887785	0					
ANR	8887852	PtrMemberAccess	nt -> sub		8887785	0					
ANR	8887853	Identifier	nt		8887785	0					
ANR	8887854	Identifier	sub		8887785	1					
ANR	8887855	Identifier	sub_index		8887785	1					
ANR	8887856	Identifier	strings		8887785	1					
ANR	8887857	Argument	"""name_free_sub(string sub-table)"""		8887785	2					
ANR	8887858	PrimaryExpression	"""name_free_sub(string sub-table)"""		8887785	0					
ANR	8887859	ExpressionStatement	"gs_free_object ( nt -> memory , nt -> sub [ sub_index ] . names , ""name_free_sub(sub-table)"" )"	562:4:17527:17626	8887785	2	True				
ANR	8887860	CallExpression	"gs_free_object ( nt -> memory , nt -> sub [ sub_index ] . names , ""name_free_sub(sub-table)"" )"		8887785	0					
ANR	8887861	Callee	gs_free_object		8887785	0					
ANR	8887862	Identifier	gs_free_object		8887785	0					
ANR	8887863	ArgumentList	nt -> memory		8887785	1					
ANR	8887864	Argument	nt -> memory		8887785	0					
ANR	8887865	PtrMemberAccess	nt -> memory		8887785	0					
ANR	8887866	Identifier	nt		8887785	0					
ANR	8887867	Identifier	memory		8887785	1					
ANR	8887868	Argument	nt -> sub [ sub_index ] . names		8887785	1					
ANR	8887869	MemberAccess	nt -> sub [ sub_index ] . names		8887785	0					
ANR	8887870	ArrayIndexing	nt -> sub [ sub_index ]		8887785	0					
ANR	8887871	PtrMemberAccess	nt -> sub		8887785	0					
ANR	8887872	Identifier	nt		8887785	0					
ANR	8887873	Identifier	sub		8887785	1					
ANR	8887874	Identifier	sub_index		8887785	1					
ANR	8887875	Identifier	names		8887785	1					
ANR	8887876	Argument	"""name_free_sub(sub-table)"""		8887785	2					
ANR	8887877	PrimaryExpression	"""name_free_sub(sub-table)"""		8887785	0					
ANR	8887878	ExpressionStatement	nt -> sub [ sub_index ] . names = 0	564:4:17632:17660	8887785	3	True				
ANR	8887879	AssignmentExpression	nt -> sub [ sub_index ] . names = 0		8887785	0		=			
ANR	8887880	MemberAccess	nt -> sub [ sub_index ] . names		8887785	0					
ANR	8887881	ArrayIndexing	nt -> sub [ sub_index ]		8887785	0					
ANR	8887882	PtrMemberAccess	nt -> sub		8887785	0					
ANR	8887883	Identifier	nt		8887785	0					
ANR	8887884	Identifier	sub		8887785	1					
ANR	8887885	Identifier	sub_index		8887785	1					
ANR	8887886	Identifier	names		8887785	1					
ANR	8887887	PrimaryExpression	0		8887785	1					
ANR	8887888	ExpressionStatement	nt -> sub [ sub_index ] . strings = 0	565:4:17666:17696	8887785	4	True				
ANR	8887889	AssignmentExpression	nt -> sub [ sub_index ] . strings = 0		8887785	0		=			
ANR	8887890	MemberAccess	nt -> sub [ sub_index ] . strings		8887785	0					
ANR	8887891	ArrayIndexing	nt -> sub [ sub_index ]		8887785	0					
ANR	8887892	PtrMemberAccess	nt -> sub		8887785	0					
ANR	8887893	Identifier	nt		8887785	0					
ANR	8887894	Identifier	sub		8887785	1					
ANR	8887895	Identifier	sub_index		8887785	1					
ANR	8887896	Identifier	strings		8887785	1					
ANR	8887897	PrimaryExpression	0		8887785	1					
ANR	8887898	ReturnType	static void		8887785	1					
ANR	8887899	Identifier	name_free_sub		8887785	2					
ANR	8887900	ParameterList	"name_table * nt , uint sub_index , bool unmark"		8887785	3					
ANR	8887901	Parameter	name_table * nt	546:14:16910:16924	8887785	0	True				
ANR	8887902	ParameterType	name_table *		8887785	0					
ANR	8887903	Identifier	nt		8887785	1					
ANR	8887904	Parameter	uint sub_index	546:31:16927:16940	8887785	1	True				
ANR	8887905	ParameterType	uint		8887785	0					
ANR	8887906	Identifier	sub_index		8887785	1					
ANR	8887907	Parameter	bool unmark	546:47:16943:16953	8887785	2	True				
ANR	8887908	ParameterType	bool		8887785	0					
ANR	8887909	Identifier	unmark		8887785	1					
ANR	8887910	CFGEntryNode	ENTRY		8887785		True				
ANR	8887911	CFGExitNode	EXIT		8887785		True				
ANR	8887912	Symbol	nt -> sub [ sub_index ] . strings		8887785						
ANR	8887913	Symbol	sub		8887785						
ANR	8887914	Symbol	nt		8887785						
ANR	8887915	Symbol	nt -> sub [ sub_index ] . names		8887785						
ANR	8887916	Symbol	* sub_index		8887785						
ANR	8887917	Symbol	nt -> memory		8887785						
ANR	8887918	Symbol	unmark		8887785						
ANR	8887919	Symbol	* nt		8887785						
ANR	8887920	Symbol	* * nt		8887785						
ANR	8887921	Symbol	nt -> sub		8887785						
ANR	8887922	Symbol	sub_index		8887785						
ANR	8887923	Symbol	* nt -> sub		8887785						
ANR	8887924	Symbol	ssub		8887785						
ANR	8887925	Function	name_scan_sub	572:0:17939:19266							
ANR	8887926	FunctionDef	"name_scan_sub (name_table * nt , uint sub_index , bool free_empty , bool unmark)"		8887925	0					
ANR	8887927	CompoundStatement		574:0:18028:19266	8887925	0					
ANR	8887928	IdentifierDeclStatement	name_string_sub_table_t * ssub = nt -> sub [ sub_index ] . strings ;	575:4:18034:18092	8887925	0	True				
ANR	8887929	IdentifierDecl	* ssub = nt -> sub [ sub_index ] . strings		8887925	0					
ANR	8887930	IdentifierDeclType	name_string_sub_table_t *		8887925	0					
ANR	8887931	Identifier	ssub		8887925	1					
ANR	8887932	AssignmentExpression	* ssub = nt -> sub [ sub_index ] . strings		8887925	2		=			
ANR	8887933	Identifier	ssub		8887925	0					
ANR	8887934	MemberAccess	nt -> sub [ sub_index ] . strings		8887925	1					
ANR	8887935	ArrayIndexing	nt -> sub [ sub_index ]		8887925	0					
ANR	8887936	PtrMemberAccess	nt -> sub		8887925	0					
ANR	8887937	Identifier	nt		8887925	0					
ANR	8887938	Identifier	sub		8887925	1					
ANR	8887939	Identifier	sub_index		8887925	1					
ANR	8887940	Identifier	strings		8887925	1					
ANR	8887941	IdentifierDeclStatement	uint free = nt -> free ;	576:4:18098:18118	8887925	1	True				
ANR	8887942	IdentifierDecl	free = nt -> free		8887925	0					
ANR	8887943	IdentifierDeclType	uint		8887925	0					
ANR	8887944	Identifier	free		8887925	1					
ANR	8887945	AssignmentExpression	free = nt -> free		8887925	2		=			
ANR	8887946	Identifier	free		8887925	0					
ANR	8887947	PtrMemberAccess	nt -> free		8887925	1					
ANR	8887948	Identifier	nt		8887925	0					
ANR	8887949	Identifier	free		8887925	1					
ANR	8887950	IdentifierDeclStatement	uint nbase = sub_index << nt_log2_sub_size ;	577:4:18124:18166	8887925	2	True				
ANR	8887951	IdentifierDecl	nbase = sub_index << nt_log2_sub_size		8887925	0					
ANR	8887952	IdentifierDeclType	uint		8887925	0					
ANR	8887953	Identifier	nbase		8887925	1					
ANR	8887954	AssignmentExpression	nbase = sub_index << nt_log2_sub_size		8887925	2		=			
ANR	8887955	Identifier	nbase		8887925	0					
ANR	8887956	ShiftExpression	sub_index << nt_log2_sub_size		8887925	1		<<			
ANR	8887957	Identifier	sub_index		8887925	0					
ANR	8887958	Identifier	nt_log2_sub_size		8887925	1					
ANR	8887959	IdentifierDeclStatement	uint ncnt = nbase + ( nt_sub_size - 1 ) ;	578:4:18172:18209	8887925	3	True				
ANR	8887960	IdentifierDecl	ncnt = nbase + ( nt_sub_size - 1 )		8887925	0					
ANR	8887961	IdentifierDeclType	uint		8887925	0					
ANR	8887962	Identifier	ncnt		8887925	1					
ANR	8887963	AssignmentExpression	ncnt = nbase + ( nt_sub_size - 1 )		8887925	2		=			
ANR	8887964	Identifier	ncnt		8887925	0					
ANR	8887965	AdditiveExpression	nbase + ( nt_sub_size - 1 )		8887925	1		+			
ANR	8887966	Identifier	nbase		8887925	0					
ANR	8887967	AdditiveExpression	nt_sub_size - 1		8887925	1		-			
ANR	8887968	Identifier	nt_sub_size		8887925	0					
ANR	8887969	PrimaryExpression	1		8887925	1					
ANR	8887970	IdentifierDeclStatement	bool keep = ! free_empty ;	579:4:18215:18238	8887925	4	True				
ANR	8887971	IdentifierDecl	keep = ! free_empty		8887925	0					
ANR	8887972	IdentifierDeclType	bool		8887925	0					
ANR	8887973	Identifier	keep		8887925	1					
ANR	8887974	AssignmentExpression	keep = ! free_empty		8887925	2		=			
ANR	8887975	Identifier	keep		8887925	0					
ANR	8887976	UnaryOperationExpression	! free_empty		8887925	1					
ANR	8887977	UnaryOperator	!		8887925	0					
ANR	8887978	Identifier	free_empty		8887925	1					
ANR	8887979	IfStatement	if ( ssub == 0 )		8887925	5					
ANR	8887980	Condition	ssub == 0	581:8:18249:18257	8887925	0	True				
ANR	8887981	EqualityExpression	ssub == 0		8887925	0		==			
ANR	8887982	Identifier	ssub		8887925	0					
ANR	8887983	PrimaryExpression	0		8887925	1					
ANR	8887984	ReturnStatement	return ;	582:8:18268:18274	8887925	1	True				
ANR	8887985	IfStatement	if ( nbase == 0 )		8887925	6					
ANR	8887986	Condition	nbase == 0	583:8:18284:18293	8887925	0	True				
ANR	8887987	EqualityExpression	nbase == 0		8887925	0		==			
ANR	8887988	Identifier	nbase		8887925	0					
ANR	8887989	PrimaryExpression	0		8887925	1					
ANR	8887990	ExpressionStatement	"nbase = 1 , keep = true"	584:8:18304:18326	8887925	1	True				
ANR	8887991	Expression	"nbase = 1 , keep = true"		8887925	0					
ANR	8887992	AssignmentExpression	nbase = 1		8887925	0		=			
ANR	8887993	Identifier	nbase		8887925	0					
ANR	8887994	PrimaryExpression	1		8887925	1					
ANR	8887995	AssignmentExpression	keep = true		8887925	1		=			
ANR	8887996	Identifier	keep		8887925	0					
ANR	8887997	Identifier	true		8887925	1					
ANR	8887998	ForStatement	for ( ; ; -- ncnt )		8887925	7					
ANR	8887999	UnaryExpression	-- ncnt	585:12:18364:18369	8887925	0	True				
ANR	8888000	IncDec	--		8887925	0					
ANR	8888001	Identifier	ncnt		8887925	1					
ANR	8888002	CompoundStatement		14:8:400:463	8887925	1					
ANR	8888003	IdentifierDeclStatement	uint nidx = name_count_to_index ( ncnt ) ;	586:8:18382:18419	8887925	0	True				
ANR	8888004	IdentifierDecl	nidx = name_count_to_index ( ncnt )		8887925	0					
ANR	8888005	IdentifierDeclType	uint		8887925	0					
ANR	8888006	Identifier	nidx		8887925	1					
ANR	8888007	AssignmentExpression	nidx = name_count_to_index ( ncnt )		8887925	2		=			
ANR	8888008	Identifier	nidx		8887925	0					
ANR	8888009	CallExpression	name_count_to_index ( ncnt )		8887925	1					
ANR	8888010	Callee	name_count_to_index		8887925	0					
ANR	8888011	Identifier	name_count_to_index		8887925	0					
ANR	8888012	ArgumentList	ncnt		8887925	1					
ANR	8888013	Argument	ncnt		8887925	0					
ANR	8888014	Identifier	ncnt		8887925	0					
ANR	8888015	IdentifierDeclStatement	name_string_t * pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ] ;	587:8:18429:18492	8887925	1	True				
ANR	8888016	IdentifierDecl	* pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ]		8887925	0					
ANR	8888017	IdentifierDeclType	name_string_t *		8887925	0					
ANR	8888018	Identifier	pnstr		8887925	1					
ANR	8888019	AssignmentExpression	* pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ]		8887925	2		=			
ANR	8888020	Identifier	pnstr		8887925	0					
ANR	8888021	UnaryOperationExpression	& ssub -> strings [ nidx & nt_sub_index_mask ]		8887925	1					
ANR	8888022	UnaryOperator	&		8887925	0					
ANR	8888023	ArrayIndexing	ssub -> strings [ nidx & nt_sub_index_mask ]		8887925	1					
ANR	8888024	PtrMemberAccess	ssub -> strings		8887925	0					
ANR	8888025	Identifier	ssub		8887925	0					
ANR	8888026	Identifier	strings		8887925	1					
ANR	8888027	BitAndExpression	nidx & nt_sub_index_mask		8887925	1		&			
ANR	8888028	Identifier	nidx		8887925	0					
ANR	8888029	Identifier	nt_sub_index_mask		8887925	1					
ANR	8888030	IfStatement	if ( pnstr -> mark )		8887925	2					
ANR	8888031	Condition	pnstr -> mark	589:12:18507:18517	8887925	0	True				
ANR	8888032	PtrMemberAccess	pnstr -> mark		8887925	0					
ANR	8888033	Identifier	pnstr		8887925	0					
ANR	8888034	Identifier	mark		8887925	1					
ANR	8888035	ExpressionStatement	keep = true	590:12:18532:18543	8887925	1	True				
ANR	8888036	AssignmentExpression	keep = true		8887925	0		=			
ANR	8888037	Identifier	keep		8887925	0					
ANR	8888038	Identifier	true		8887925	1					
ANR	8888039	ElseStatement	else		8887925	0					
ANR	8888040	CompoundStatement		18:13:529:529	8887925	0					
ANR	8888041	ExpressionStatement	"set_name_next_index ( nidx , pnstr , free )"	592:12:18572:18610	8887925	0	True				
ANR	8888042	CallExpression	"set_name_next_index ( nidx , pnstr , free )"		8887925	0					
ANR	8888043	Callee	set_name_next_index		8887925	0					
ANR	8888044	Identifier	set_name_next_index		8887925	0					
ANR	8888045	ArgumentList	nidx		8887925	1					
ANR	8888046	Argument	nidx		8887925	0					
ANR	8888047	Identifier	nidx		8887925	0					
ANR	8888048	Argument	pnstr		8887925	1					
ANR	8888049	Identifier	pnstr		8887925	0					
ANR	8888050	Argument	free		8887925	2					
ANR	8888051	Identifier	free		8887925	0					
ANR	8888052	ExpressionStatement	free = nidx	593:12:18624:18635	8887925	1	True				
ANR	8888053	AssignmentExpression	free = nidx		8887925	0		=			
ANR	8888054	Identifier	free		8887925	0					
ANR	8888055	Identifier	nidx		8887925	1					
ANR	8888056	IfStatement	if ( ncnt == nbase )		8887925	3					
ANR	8888057	Condition	ncnt == nbase	595:12:18659:18671	8887925	0	True				
ANR	8888058	EqualityExpression	ncnt == nbase		8887925	0		==			
ANR	8888059	Identifier	ncnt		8887925	0					
ANR	8888060	Identifier	nbase		8887925	1					
ANR	8888061	BreakStatement	break ;	596:12:18686:18691	8887925	1	True				
ANR	8888062	IfStatement	if ( keep )		8887925	8					
ANR	8888063	Condition	keep	598:8:18707:18710	8887925	0	True				
ANR	8888064	Identifier	keep		8887925	0					
ANR	8888065	ExpressionStatement	nt -> free = free	599:8:18721:18736	8887925	1	True				
ANR	8888066	AssignmentExpression	nt -> free = free		8887925	0		=			
ANR	8888067	PtrMemberAccess	nt -> free		8887925	0					
ANR	8888068	Identifier	nt		8887925	0					
ANR	8888069	Identifier	free		8887925	1					
ANR	8888070	Identifier	free		8887925	1					
ANR	8888071	ElseStatement	else		8887925	0					
ANR	8888072	CompoundStatement		27:9:718:718	8887925	0					
ANR	8888073	ExpressionStatement	"name_free_sub ( nt , sub_index , unmark )"	602:8:18810:18846	8887925	0	True				
ANR	8888074	CallExpression	"name_free_sub ( nt , sub_index , unmark )"		8887925	0					
ANR	8888075	Callee	name_free_sub		8887925	0					
ANR	8888076	Identifier	name_free_sub		8887925	0					
ANR	8888077	ArgumentList	nt		8887925	1					
ANR	8888078	Argument	nt		8887925	0					
ANR	8888079	Identifier	nt		8887925	0					
ANR	8888080	Argument	sub_index		8887925	1					
ANR	8888081	Identifier	sub_index		8887925	0					
ANR	8888082	Argument	unmark		8887925	2					
ANR	8888083	Identifier	unmark		8887925	0					
ANR	8888084	IfStatement	if ( sub_index == nt -> sub_count - 1 )		8887925	1					
ANR	8888085	Condition	sub_index == nt -> sub_count - 1	603:12:18860:18889	8887925	0	True				
ANR	8888086	EqualityExpression	sub_index == nt -> sub_count - 1		8887925	0		==			
ANR	8888087	Identifier	sub_index		8887925	0					
ANR	8888088	AdditiveExpression	nt -> sub_count - 1		8887925	1		-			
ANR	8888089	PtrMemberAccess	nt -> sub_count		8887925	0					
ANR	8888090	Identifier	nt		8887925	0					
ANR	8888091	Identifier	sub_count		8887925	1					
ANR	8888092	PrimaryExpression	1		8887925	1					
ANR	8888093	CompoundStatement		30:44:863:863	8887925	1					
ANR	8888094	DoStatement	do		8887925	0					
ANR	8888095	CompoundStatement		32:15:946:946	8887925	0					
ANR	8888096	ExpressionStatement	-- sub_index	606:16:18993:19004	8887925	0	True				
ANR	8888097	UnaryExpression	-- sub_index		8887925	0					
ANR	8888098	IncDec	--		8887925	0					
ANR	8888099	Identifier	sub_index		8887925	1					
ANR	8888100	Condition	nt -> sub [ sub_index ] . names == 0	607:21:19027:19055	8887925	1	True				
ANR	8888101	EqualityExpression	nt -> sub [ sub_index ] . names == 0		8887925	0		==			
ANR	8888102	MemberAccess	nt -> sub [ sub_index ] . names		8887925	0					
ANR	8888103	ArrayIndexing	nt -> sub [ sub_index ]		8887925	0					
ANR	8888104	PtrMemberAccess	nt -> sub		8887925	0					
ANR	8888105	Identifier	nt		8887925	0					
ANR	8888106	Identifier	sub		8887925	1					
ANR	8888107	Identifier	sub_index		8887925	1					
ANR	8888108	Identifier	names		8887925	1					
ANR	8888109	PrimaryExpression	0		8887925	1					
ANR	8888110	ExpressionStatement	nt -> sub_count = sub_index + 1	608:12:19071:19100	8887925	1	True				
ANR	8888111	AssignmentExpression	nt -> sub_count = sub_index + 1		8887925	0		=			
ANR	8888112	PtrMemberAccess	nt -> sub_count		8887925	0					
ANR	8888113	Identifier	nt		8887925	0					
ANR	8888114	Identifier	sub_count		8887925	1					
ANR	8888115	AdditiveExpression	sub_index + 1		8887925	1		+			
ANR	8888116	Identifier	sub_index		8887925	0					
ANR	8888117	PrimaryExpression	1		8887925	1					
ANR	8888118	IfStatement	if ( nt -> sub_next > sub_index )		8887925	2					
ANR	8888119	Condition	nt -> sub_next > sub_index	609:16:19118:19141	8887925	0	True				
ANR	8888120	RelationalExpression	nt -> sub_next > sub_index		8887925	0		>			
ANR	8888121	PtrMemberAccess	nt -> sub_next		8887925	0					
ANR	8888122	Identifier	nt		8887925	0					
ANR	8888123	Identifier	sub_next		8887925	1					
ANR	8888124	Identifier	sub_index		8887925	1					
ANR	8888125	ExpressionStatement	nt -> sub_next = sub_index	610:16:19160:19184	8887925	1	True				
ANR	8888126	AssignmentExpression	nt -> sub_next = sub_index		8887925	0		=			
ANR	8888127	PtrMemberAccess	nt -> sub_next		8887925	0					
ANR	8888128	Identifier	nt		8887925	0					
ANR	8888129	Identifier	sub_next		8887925	1					
ANR	8888130	Identifier	sub_index		8887925	1					
ANR	8888131	ElseStatement	else		8887925	0					
ANR	8888132	IfStatement	if ( nt -> sub_next == sub_index )		8887925	0					
ANR	8888133	Condition	nt -> sub_next == sub_index	611:19:19205:19229	8887925	0	True				
ANR	8888134	EqualityExpression	nt -> sub_next == sub_index		8887925	0		==			
ANR	8888135	PtrMemberAccess	nt -> sub_next		8887925	0					
ANR	8888136	Identifier	nt		8887925	0					
ANR	8888137	Identifier	sub_next		8887925	1					
ANR	8888138	Identifier	sub_index		8887925	1					
ANR	8888139	ExpressionStatement	nt -> sub_next --	612:12:19244:19258	8887925	1	True				
ANR	8888140	PostIncDecOperationExpression	nt -> sub_next --		8887925	0					
ANR	8888141	PtrMemberAccess	nt -> sub_next		8887925	0					
ANR	8888142	Identifier	nt		8887925	0					
ANR	8888143	Identifier	sub_next		8887925	1					
ANR	8888144	IncDec	--		8887925	1					
ANR	8888145	ReturnType	static void		8887925	1					
ANR	8888146	Identifier	name_scan_sub		8887925	2					
ANR	8888147	ParameterList	"name_table * nt , uint sub_index , bool free_empty , bool unmark"		8887925	3					
ANR	8888148	Parameter	name_table * nt	573:14:17965:17979	8887925	0	True				
ANR	8888149	ParameterType	name_table *		8887925	0					
ANR	8888150	Identifier	nt		8887925	1					
ANR	8888151	Parameter	uint sub_index	573:31:17982:17995	8887925	1	True				
ANR	8888152	ParameterType	uint		8887925	0					
ANR	8888153	Identifier	sub_index		8887925	1					
ANR	8888154	Parameter	bool free_empty	573:47:17998:18012	8887925	2	True				
ANR	8888155	ParameterType	bool		8887925	0					
ANR	8888156	Identifier	free_empty		8887925	1					
ANR	8888157	Parameter	bool unmark	573:64:18015:18025	8887925	3	True				
ANR	8888158	ParameterType	bool		8887925	0					
ANR	8888159	Identifier	unmark		8887925	1					
ANR	8888160	CFGEntryNode	ENTRY		8887925		True				
ANR	8888161	CFGExitNode	EXIT		8887925		True				
ANR	8888162	InfiniteForNode	true		8887925		True				
ANR	8888163	Symbol	nt -> sub [ sub_index ] . strings		8887925						
ANR	8888164	Symbol	name_count_to_index		8887925						
ANR	8888165	Symbol	nbase		8887925						
ANR	8888166	Symbol	* pnstr		8887925						
ANR	8888167	Symbol	nt_sub_size		8887925						
ANR	8888168	Symbol	ssub -> strings		8887925						
ANR	8888169	Symbol	nt		8887925						
ANR	8888170	Symbol	nt -> sub [ sub_index ] . names		8887925						
ANR	8888171	Symbol	* ssub		8887925						
ANR	8888172	Symbol	* sub_index		8887925						
ANR	8888173	Symbol	ncnt		8887925						
ANR	8888174	Symbol	unmark		8887925						
ANR	8888175	Symbol	nt -> free		8887925						
ANR	8888176	Symbol	nt -> sub		8887925						
ANR	8888177	Symbol	nt_log2_sub_size		8887925						
ANR	8888178	Symbol	* nt -> sub		8887925						
ANR	8888179	Symbol	ssub		8887925						
ANR	8888180	Symbol	nt_sub_index_mask		8887925						
ANR	8888181	Symbol	free		8887925						
ANR	8888182	Symbol	pnstr -> mark		8887925						
ANR	8888183	Symbol	pnstr		8887925						
ANR	8888184	Symbol	* nt		8887925						
ANR	8888185	Symbol	* * nt		8887925						
ANR	8888186	Symbol	sub_index		8887925						
ANR	8888187	Symbol	nt -> sub_next		8887925						
ANR	8888188	Symbol	keep		8887925						
ANR	8888189	Symbol	true		8887925						
ANR	8888190	Symbol	nt -> sub_count		8887925						
ANR	8888191	Symbol	nidx		8887925						
ANR	8888192	Symbol	free_empty		8887925						
ANR	8888193	DeclStmt									
ANR	8888194	Decl							uint	uint	i
ANR	8888195	DeclStmt									
ANR	8888196	Decl							uint	uint	sub_count
ANR	8888197	DeclStmt									
ANR	8888198	Decl							uint	uint	i
ANR	8888199	DeclStmt									
ANR	8888200	Decl							name_string_t	name_string_t *	pnstr
ANR	8888201	DeclStmt									
ANR	8888202	Decl							uint	uint	i
ANR	8888203	DeclStmt									
ANR	8888204	Decl							gs_const_string	gs_const_string	nstr
