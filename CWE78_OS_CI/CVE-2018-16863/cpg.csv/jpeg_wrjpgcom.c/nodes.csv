command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6700974	File	data/converged/CVE-2018-16863_ghostpdl/jpeg_wrjpgcom.c								
ANR	6700975	DeclStmt									
ANR	6700976	Decl							extern void	extern void * ( )	malloc
ANR	6700977	DeclStmt									
ANR	6700978	Decl							FILE	FILE *	infile
ANR	6700979	DeclStmt									
ANR	6700980	Decl							FILE	FILE *	outfile
ANR	6700981	Function	read_1_byte	92:0:2597:2728							
ANR	6700982	FunctionDef	read_1_byte ()		6700981	0					
ANR	6700983	CompoundStatement		94:0:2627:2728	6700981	0					
ANR	6700984	IdentifierDeclStatement	int c ;	95:2:2631:2636	6700981	0	True				
ANR	6700985	IdentifierDecl	c		6700981	0					
ANR	6700986	IdentifierDeclType	int		6700981	0					
ANR	6700987	Identifier	c		6700981	1					
ANR	6700988	ExpressionStatement	c = NEXTBYTE ( )	97:2:2641:2655	6700981	1	True				
ANR	6700989	AssignmentExpression	c = NEXTBYTE ( )		6700981	0		=			
ANR	6700990	Identifier	c		6700981	0					
ANR	6700991	CallExpression	NEXTBYTE ( )		6700981	1					
ANR	6700992	Callee	NEXTBYTE		6700981	0					
ANR	6700993	Identifier	NEXTBYTE		6700981	0					
ANR	6700994	ArgumentList			6700981	1					
ANR	6700995	IfStatement	if ( c == EOF )		6700981	2					
ANR	6700996	Condition	c == EOF	98:6:2663:2670	6700981	0	True				
ANR	6700997	EqualityExpression	c == EOF		6700981	0		==			
ANR	6700998	Identifier	c		6700981	0					
ANR	6700999	Identifier	EOF		6700981	1					
ANR	6701000	ExpressionStatement	"ERREXIT ( ""Premature EOF in JPEG file"" )"	99:4:2677:2714	6700981	1	True				
ANR	6701001	CallExpression	"ERREXIT ( ""Premature EOF in JPEG file"" )"		6700981	0					
ANR	6701002	Callee	ERREXIT		6700981	0					
ANR	6701003	Identifier	ERREXIT		6700981	0					
ANR	6701004	ArgumentList	"""Premature EOF in JPEG file"""		6700981	1					
ANR	6701005	Argument	"""Premature EOF in JPEG file"""		6700981	0					
ANR	6701006	PrimaryExpression	"""Premature EOF in JPEG file"""		6700981	0					
ANR	6701007	ReturnStatement	return c ;	100:2:2718:2726	6700981	3	True				
ANR	6701008	Identifier	c		6700981	0					
ANR	6701009	ReturnType	static int		6700981	1					
ANR	6701010	Identifier	read_1_byte		6700981	2					
ANR	6701011	ParameterList			6700981	3					
ANR	6701012	CFGEntryNode	ENTRY		6700981		True				
ANR	6701013	CFGExitNode	EXIT		6700981		True				
ANR	6701014	Symbol	c		6700981						
ANR	6701015	Symbol	NEXTBYTE		6700981						
ANR	6701016	Symbol	EOF		6700981						
ANR	6701017	Function	read_2_bytes	105:0:2833:3107							
ANR	6701018	FunctionDef	read_2_bytes ()		6701017	0					
ANR	6701019	CompoundStatement		107:0:2873:3107	6701017	0					
ANR	6701020	IdentifierDeclStatement	"int c1 , c2 ;"	108:2:2877:2887	6701017	0	True				
ANR	6701021	IdentifierDecl	c1		6701017	0					
ANR	6701022	IdentifierDeclType	int		6701017	0					
ANR	6701023	Identifier	c1		6701017	1					
ANR	6701024	IdentifierDecl	c2		6701017	1					
ANR	6701025	IdentifierDeclType	int		6701017	0					
ANR	6701026	Identifier	c2		6701017	1					
ANR	6701027	ExpressionStatement	c1 = NEXTBYTE ( )	110:2:2892:2907	6701017	1	True				
ANR	6701028	AssignmentExpression	c1 = NEXTBYTE ( )		6701017	0		=			
ANR	6701029	Identifier	c1		6701017	0					
ANR	6701030	CallExpression	NEXTBYTE ( )		6701017	1					
ANR	6701031	Callee	NEXTBYTE		6701017	0					
ANR	6701032	Identifier	NEXTBYTE		6701017	0					
ANR	6701033	ArgumentList			6701017	1					
ANR	6701034	IfStatement	if ( c1 == EOF )		6701017	2					
ANR	6701035	Condition	c1 == EOF	111:6:2915:2923	6701017	0	True				
ANR	6701036	EqualityExpression	c1 == EOF		6701017	0		==			
ANR	6701037	Identifier	c1		6701017	0					
ANR	6701038	Identifier	EOF		6701017	1					
ANR	6701039	ExpressionStatement	"ERREXIT ( ""Premature EOF in JPEG file"" )"	112:4:2930:2967	6701017	1	True				
ANR	6701040	CallExpression	"ERREXIT ( ""Premature EOF in JPEG file"" )"		6701017	0					
ANR	6701041	Callee	ERREXIT		6701017	0					
ANR	6701042	Identifier	ERREXIT		6701017	0					
ANR	6701043	ArgumentList	"""Premature EOF in JPEG file"""		6701017	1					
ANR	6701044	Argument	"""Premature EOF in JPEG file"""		6701017	0					
ANR	6701045	PrimaryExpression	"""Premature EOF in JPEG file"""		6701017	0					
ANR	6701046	ExpressionStatement	c2 = NEXTBYTE ( )	113:2:2971:2986	6701017	3	True				
ANR	6701047	AssignmentExpression	c2 = NEXTBYTE ( )		6701017	0		=			
ANR	6701048	Identifier	c2		6701017	0					
ANR	6701049	CallExpression	NEXTBYTE ( )		6701017	1					
ANR	6701050	Callee	NEXTBYTE		6701017	0					
ANR	6701051	Identifier	NEXTBYTE		6701017	0					
ANR	6701052	ArgumentList			6701017	1					
ANR	6701053	IfStatement	if ( c2 == EOF )		6701017	4					
ANR	6701054	Condition	c2 == EOF	114:6:2994:3002	6701017	0	True				
ANR	6701055	EqualityExpression	c2 == EOF		6701017	0		==			
ANR	6701056	Identifier	c2		6701017	0					
ANR	6701057	Identifier	EOF		6701017	1					
ANR	6701058	ExpressionStatement	"ERREXIT ( ""Premature EOF in JPEG file"" )"	115:4:3009:3046	6701017	1	True				
ANR	6701059	CallExpression	"ERREXIT ( ""Premature EOF in JPEG file"" )"		6701017	0					
ANR	6701060	Callee	ERREXIT		6701017	0					
ANR	6701061	Identifier	ERREXIT		6701017	0					
ANR	6701062	ArgumentList	"""Premature EOF in JPEG file"""		6701017	1					
ANR	6701063	Argument	"""Premature EOF in JPEG file"""		6701017	0					
ANR	6701064	PrimaryExpression	"""Premature EOF in JPEG file"""		6701017	0					
ANR	6701065	ReturnStatement	return ( ( ( unsigned int ) c1 ) << 8 ) + ( ( unsigned int ) c2 ) ;	116:2:3050:3105	6701017	5	True				
ANR	6701066	AdditiveExpression	( ( ( unsigned int ) c1 ) << 8 ) + ( ( unsigned int ) c2 )		6701017	0		+			
ANR	6701067	ShiftExpression	( ( unsigned int ) c1 ) << 8		6701017	0		<<			
ANR	6701068	CastExpression	( unsigned int ) c1		6701017	0					
ANR	6701069	CastTarget	unsigned int		6701017	0					
ANR	6701070	Identifier	c1		6701017	1					
ANR	6701071	PrimaryExpression	8		6701017	1					
ANR	6701072	CastExpression	( unsigned int ) c2		6701017	1					
ANR	6701073	CastTarget	unsigned int		6701017	0					
ANR	6701074	Identifier	c2		6701017	1					
ANR	6701075	ReturnType	static unsigned int		6701017	1					
ANR	6701076	Identifier	read_2_bytes		6701017	2					
ANR	6701077	ParameterList			6701017	3					
ANR	6701078	CFGEntryNode	ENTRY		6701017		True				
ANR	6701079	CFGExitNode	EXIT		6701017		True				
ANR	6701080	Symbol	NEXTBYTE		6701017						
ANR	6701081	Symbol	EOF		6701017						
ANR	6701082	Symbol	c1		6701017						
ANR	6701083	Symbol	c2		6701017						
ANR	6701084	Function	write_1_byte	122:0:3156:3205							
ANR	6701085	FunctionDef	write_1_byte (int c)		6701084	0					
ANR	6701086	CompoundStatement		124:0:3189:3205	6701084	0					
ANR	6701087	ExpressionStatement	PUTBYTE ( c )	125:2:3193:3203	6701084	0	True				
ANR	6701088	CallExpression	PUTBYTE ( c )		6701084	0					
ANR	6701089	Callee	PUTBYTE		6701084	0					
ANR	6701090	Identifier	PUTBYTE		6701084	0					
ANR	6701091	ArgumentList	c		6701084	1					
ANR	6701092	Argument	c		6701084	0					
ANR	6701093	Identifier	c		6701084	0					
ANR	6701094	ReturnType	static void		6701084	1					
ANR	6701095	Identifier	write_1_byte		6701084	2					
ANR	6701096	ParameterList	int c		6701084	3					
ANR	6701097	Parameter	int c	123:14:3182:3186	6701084	0	True				
ANR	6701098	ParameterType	int		6701084	0					
ANR	6701099	Identifier	c		6701084	1					
ANR	6701100	CFGEntryNode	ENTRY		6701084		True				
ANR	6701101	CFGExitNode	EXIT		6701084		True				
ANR	6701102	Symbol	c		6701084						
ANR	6701103	Function	write_2_bytes	128:0:3208:3308							
ANR	6701104	FunctionDef	write_2_bytes (unsigned int val)		6701103	0					
ANR	6701105	CompoundStatement		130:0:3253:3308	6701103	0					
ANR	6701106	ExpressionStatement	PUTBYTE ( ( val >> 8 ) & 0xFF )	131:2:3257:3283	6701103	0	True				
ANR	6701107	CallExpression	PUTBYTE ( ( val >> 8 ) & 0xFF )		6701103	0					
ANR	6701108	Callee	PUTBYTE		6701103	0					
ANR	6701109	Identifier	PUTBYTE		6701103	0					
ANR	6701110	ArgumentList	( val >> 8 ) & 0xFF		6701103	1					
ANR	6701111	Argument	( val >> 8 ) & 0xFF		6701103	0					
ANR	6701112	BitAndExpression	( val >> 8 ) & 0xFF		6701103	0		&			
ANR	6701113	ShiftExpression	val >> 8		6701103	0		>>			
ANR	6701114	Identifier	val		6701103	0					
ANR	6701115	PrimaryExpression	8		6701103	1					
ANR	6701116	PrimaryExpression	0xFF		6701103	1					
ANR	6701117	ExpressionStatement	PUTBYTE ( val & 0xFF )	132:2:3287:3306	6701103	1	True				
ANR	6701118	CallExpression	PUTBYTE ( val & 0xFF )		6701103	0					
ANR	6701119	Callee	PUTBYTE		6701103	0					
ANR	6701120	Identifier	PUTBYTE		6701103	0					
ANR	6701121	ArgumentList	val & 0xFF		6701103	1					
ANR	6701122	Argument	val & 0xFF		6701103	0					
ANR	6701123	BitAndExpression	val & 0xFF		6701103	0		&			
ANR	6701124	Identifier	val		6701103	0					
ANR	6701125	PrimaryExpression	0xFF		6701103	1					
ANR	6701126	ReturnType	static void		6701103	1					
ANR	6701127	Identifier	write_2_bytes		6701103	2					
ANR	6701128	ParameterList	unsigned int val		6701103	3					
ANR	6701129	Parameter	unsigned int val	129:15:3235:3250	6701103	0	True				
ANR	6701130	ParameterType	unsigned int		6701103	0					
ANR	6701131	Identifier	val		6701103	1					
ANR	6701132	CFGEntryNode	ENTRY		6701103		True				
ANR	6701133	CFGExitNode	EXIT		6701103		True				
ANR	6701134	Symbol	val		6701103						
ANR	6701135	Function	write_marker	135:0:3311:3387							
ANR	6701136	FunctionDef	write_marker (int marker)		6701135	0					
ANR	6701137	CompoundStatement		137:0:3349:3387	6701135	0					
ANR	6701138	ExpressionStatement	PUTBYTE ( 0xFF )	138:2:3353:3366	6701135	0	True				
ANR	6701139	CallExpression	PUTBYTE ( 0xFF )		6701135	0					
ANR	6701140	Callee	PUTBYTE		6701135	0					
ANR	6701141	Identifier	PUTBYTE		6701135	0					
ANR	6701142	ArgumentList	0xFF		6701135	1					
ANR	6701143	Argument	0xFF		6701135	0					
ANR	6701144	PrimaryExpression	0xFF		6701135	0					
ANR	6701145	ExpressionStatement	PUTBYTE ( marker )	139:2:3370:3385	6701135	1	True				
ANR	6701146	CallExpression	PUTBYTE ( marker )		6701135	0					
ANR	6701147	Callee	PUTBYTE		6701135	0					
ANR	6701148	Identifier	PUTBYTE		6701135	0					
ANR	6701149	ArgumentList	marker		6701135	1					
ANR	6701150	Argument	marker		6701135	0					
ANR	6701151	Identifier	marker		6701135	0					
ANR	6701152	ReturnType	static void		6701135	1					
ANR	6701153	Identifier	write_marker		6701135	2					
ANR	6701154	ParameterList	int marker		6701135	3					
ANR	6701155	Parameter	int marker	136:14:3337:3346	6701135	0	True				
ANR	6701156	ParameterType	int		6701135	0					
ANR	6701157	Identifier	marker		6701135	1					
ANR	6701158	CFGEntryNode	ENTRY		6701135		True				
ANR	6701159	CFGExitNode	EXIT		6701135		True				
ANR	6701160	Symbol	marker		6701135						
ANR	6701161	Function	copy_rest_of_file	142:0:3390:3489							
ANR	6701162	FunctionDef	copy_rest_of_file ()		6701161	0					
ANR	6701163	CompoundStatement		144:0:3427:3489	6701161	0					
ANR	6701164	IdentifierDeclStatement	int c ;	145:2:3431:3436	6701161	0	True				
ANR	6701165	IdentifierDecl	c		6701161	0					
ANR	6701166	IdentifierDeclType	int		6701161	0					
ANR	6701167	Identifier	c		6701161	1					
ANR	6701168	WhileStatement	while ( ( c = NEXTBYTE ( ) ) != EOF )		6701161	1					
ANR	6701169	Condition	( c = NEXTBYTE ( ) ) != EOF	147:9:3448:3470	6701161	0	True				
ANR	6701170	EqualityExpression	( c = NEXTBYTE ( ) ) != EOF		6701161	0		!=			
ANR	6701171	AssignmentExpression	c = NEXTBYTE ( )		6701161	0		=			
ANR	6701172	Identifier	c		6701161	0					
ANR	6701173	CallExpression	NEXTBYTE ( )		6701161	1					
ANR	6701174	Callee	NEXTBYTE		6701161	0					
ANR	6701175	Identifier	NEXTBYTE		6701161	0					
ANR	6701176	ArgumentList			6701161	1					
ANR	6701177	Identifier	EOF		6701161	1					
ANR	6701178	ExpressionStatement	PUTBYTE ( c )	148:4:3477:3487	6701161	1	True				
ANR	6701179	CallExpression	PUTBYTE ( c )		6701161	0					
ANR	6701180	Callee	PUTBYTE		6701161	0					
ANR	6701181	Identifier	PUTBYTE		6701161	0					
ANR	6701182	ArgumentList	c		6701161	1					
ANR	6701183	Argument	c		6701161	0					
ANR	6701184	Identifier	c		6701161	0					
ANR	6701185	ReturnType	static void		6701161	1					
ANR	6701186	Identifier	copy_rest_of_file		6701161	2					
ANR	6701187	ParameterList			6701161	3					
ANR	6701188	CFGEntryNode	ENTRY		6701161		True				
ANR	6701189	CFGExitNode	EXIT		6701161		True				
ANR	6701190	Symbol	c		6701161						
ANR	6701191	Symbol	NEXTBYTE		6701161						
ANR	6701192	Symbol	EOF		6701161						
ANR	6701193	Function	next_marker	187:0:4904:5434							
ANR	6701194	FunctionDef	next_marker ()		6701193	0					
ANR	6701195	CompoundStatement		189:0:4934:5434	6701193	0					
ANR	6701196	IdentifierDeclStatement	int c ;	190:2:4938:4943	6701193	0	True				
ANR	6701197	IdentifierDecl	c		6701193	0					
ANR	6701198	IdentifierDeclType	int		6701193	0					
ANR	6701199	Identifier	c		6701193	1					
ANR	6701200	IdentifierDeclStatement	int discarded_bytes = 0 ;	191:2:4947:4970	6701193	1	True				
ANR	6701201	IdentifierDecl	discarded_bytes = 0		6701193	0					
ANR	6701202	IdentifierDeclType	int		6701193	0					
ANR	6701203	Identifier	discarded_bytes		6701193	1					
ANR	6701204	AssignmentExpression	discarded_bytes = 0		6701193	2		=			
ANR	6701205	Identifier	discarded_bytes		6701193	0					
ANR	6701206	PrimaryExpression	0		6701193	1					
ANR	6701207	ExpressionStatement	c = read_1_byte ( )	194:2:5027:5044	6701193	2	True				
ANR	6701208	AssignmentExpression	c = read_1_byte ( )		6701193	0		=			
ANR	6701209	Identifier	c		6701193	0					
ANR	6701210	CallExpression	read_1_byte ( )		6701193	1					
ANR	6701211	Callee	read_1_byte		6701193	0					
ANR	6701212	Identifier	read_1_byte		6701193	0					
ANR	6701213	ArgumentList			6701193	1					
ANR	6701214	WhileStatement	while ( c != 0xFF )		6701193	3					
ANR	6701215	Condition	c != 0xFF	195:9:5055:5063	6701193	0	True				
ANR	6701216	EqualityExpression	c != 0xFF		6701193	0		!=			
ANR	6701217	Identifier	c		6701193	0					
ANR	6701218	PrimaryExpression	0xFF		6701193	1					
ANR	6701219	CompoundStatement		7:20:131:131	6701193	1					
ANR	6701220	ExpressionStatement	discarded_bytes ++	196:4:5072:5089	6701193	0	True				
ANR	6701221	PostIncDecOperationExpression	discarded_bytes ++		6701193	0					
ANR	6701222	Identifier	discarded_bytes		6701193	0					
ANR	6701223	IncDec	++		6701193	1					
ANR	6701224	ExpressionStatement	c = read_1_byte ( )	197:4:5095:5112	6701193	1	True				
ANR	6701225	AssignmentExpression	c = read_1_byte ( )		6701193	0		=			
ANR	6701226	Identifier	c		6701193	0					
ANR	6701227	CallExpression	read_1_byte ( )		6701193	1					
ANR	6701228	Callee	read_1_byte		6701193	0					
ANR	6701229	Identifier	read_1_byte		6701193	0					
ANR	6701230	ArgumentList			6701193	1					
ANR	6701231	DoStatement	do		6701193	4					
ANR	6701232	CompoundStatement		14:5:336:336	6701193	0					
ANR	6701233	ExpressionStatement	c = read_1_byte ( )	203:4:5277:5294	6701193	0	True				
ANR	6701234	AssignmentExpression	c = read_1_byte ( )		6701193	0		=			
ANR	6701235	Identifier	c		6701193	0					
ANR	6701236	CallExpression	read_1_byte ( )		6701193	1					
ANR	6701237	Callee	read_1_byte		6701193	0					
ANR	6701238	Identifier	read_1_byte		6701193	0					
ANR	6701239	ArgumentList			6701193	1					
ANR	6701240	Condition	c == 0xFF	204:11:5307:5315	6701193	1	True				
ANR	6701241	EqualityExpression	c == 0xFF		6701193	0		==			
ANR	6701242	Identifier	c		6701193	0					
ANR	6701243	PrimaryExpression	0xFF		6701193	1					
ANR	6701244	IfStatement	if ( discarded_bytes != 0 )		6701193	5					
ANR	6701245	Condition	discarded_bytes != 0	206:6:5326:5345	6701193	0	True				
ANR	6701246	EqualityExpression	discarded_bytes != 0		6701193	0		!=			
ANR	6701247	Identifier	discarded_bytes		6701193	0					
ANR	6701248	PrimaryExpression	0		6701193	1					
ANR	6701249	CompoundStatement		18:28:413:413	6701193	1					
ANR	6701250	ExpressionStatement	"fprintf ( stderr , ""Warning: garbage data found in JPEG file\\n"" )"	207:4:5354:5415	6701193	0	True				
ANR	6701251	CallExpression	"fprintf ( stderr , ""Warning: garbage data found in JPEG file\\n"" )"		6701193	0					
ANR	6701252	Callee	fprintf		6701193	0					
ANR	6701253	Identifier	fprintf		6701193	0					
ANR	6701254	ArgumentList	stderr		6701193	1					
ANR	6701255	Argument	stderr		6701193	0					
ANR	6701256	Identifier	stderr		6701193	0					
ANR	6701257	Argument	"""Warning: garbage data found in JPEG file\\n"""		6701193	1					
ANR	6701258	PrimaryExpression	"""Warning: garbage data found in JPEG file\\n"""		6701193	0					
ANR	6701259	ReturnStatement	return c ;	210:2:5424:5432	6701193	6	True				
ANR	6701260	Identifier	c		6701193	0					
ANR	6701261	ReturnType	static int		6701193	1					
ANR	6701262	Identifier	next_marker		6701193	2					
ANR	6701263	ParameterList			6701193	3					
ANR	6701264	CFGEntryNode	ENTRY		6701193		True				
ANR	6701265	CFGExitNode	EXIT		6701193		True				
ANR	6701266	Symbol	c		6701193						
ANR	6701267	Symbol	read_1_byte		6701193						
ANR	6701268	Symbol	discarded_bytes		6701193						
ANR	6701269	Symbol	stderr		6701193						
ANR	6701270	Function	first_marker	222:0:5771:5935							
ANR	6701271	FunctionDef	first_marker ()		6701270	0					
ANR	6701272	CompoundStatement		224:0:5802:5935	6701270	0					
ANR	6701273	IdentifierDeclStatement	"int c1 , c2 ;"	225:2:5806:5816	6701270	0	True				
ANR	6701274	IdentifierDecl	c1		6701270	0					
ANR	6701275	IdentifierDeclType	int		6701270	0					
ANR	6701276	Identifier	c1		6701270	1					
ANR	6701277	IdentifierDecl	c2		6701270	1					
ANR	6701278	IdentifierDeclType	int		6701270	0					
ANR	6701279	Identifier	c2		6701270	1					
ANR	6701280	ExpressionStatement	c1 = NEXTBYTE ( )	227:2:5821:5836	6701270	1	True				
ANR	6701281	AssignmentExpression	c1 = NEXTBYTE ( )		6701270	0		=			
ANR	6701282	Identifier	c1		6701270	0					
ANR	6701283	CallExpression	NEXTBYTE ( )		6701270	1					
ANR	6701284	Callee	NEXTBYTE		6701270	0					
ANR	6701285	Identifier	NEXTBYTE		6701270	0					
ANR	6701286	ArgumentList			6701270	1					
ANR	6701287	ExpressionStatement	c2 = NEXTBYTE ( )	228:2:5840:5855	6701270	2	True				
ANR	6701288	AssignmentExpression	c2 = NEXTBYTE ( )		6701270	0		=			
ANR	6701289	Identifier	c2		6701270	0					
ANR	6701290	CallExpression	NEXTBYTE ( )		6701270	1					
ANR	6701291	Callee	NEXTBYTE		6701270	0					
ANR	6701292	Identifier	NEXTBYTE		6701270	0					
ANR	6701293	ArgumentList			6701270	1					
ANR	6701294	IfStatement	if ( c1 != 0xFF || c2 != M_SOI )		6701270	3					
ANR	6701295	Condition	c1 != 0xFF || c2 != M_SOI	229:6:5863:5887	6701270	0	True				
ANR	6701296	OrExpression	c1 != 0xFF || c2 != M_SOI		6701270	0		||			
ANR	6701297	EqualityExpression	c1 != 0xFF		6701270	0		!=			
ANR	6701298	Identifier	c1		6701270	0					
ANR	6701299	PrimaryExpression	0xFF		6701270	1					
ANR	6701300	EqualityExpression	c2 != M_SOI		6701270	1		!=			
ANR	6701301	Identifier	c2		6701270	0					
ANR	6701302	Identifier	M_SOI		6701270	1					
ANR	6701303	ExpressionStatement	"ERREXIT ( ""Not a JPEG file"" )"	230:4:5894:5920	6701270	1	True				
ANR	6701304	CallExpression	"ERREXIT ( ""Not a JPEG file"" )"		6701270	0					
ANR	6701305	Callee	ERREXIT		6701270	0					
ANR	6701306	Identifier	ERREXIT		6701270	0					
ANR	6701307	ArgumentList	"""Not a JPEG file"""		6701270	1					
ANR	6701308	Argument	"""Not a JPEG file"""		6701270	0					
ANR	6701309	PrimaryExpression	"""Not a JPEG file"""		6701270	0					
ANR	6701310	ReturnStatement	return c2 ;	231:2:5924:5933	6701270	4	True				
ANR	6701311	Identifier	c2		6701270	0					
ANR	6701312	ReturnType	static int		6701270	1					
ANR	6701313	Identifier	first_marker		6701270	2					
ANR	6701314	ParameterList			6701270	3					
ANR	6701315	CFGEntryNode	ENTRY		6701270		True				
ANR	6701316	CFGExitNode	EXIT		6701270		True				
ANR	6701317	Symbol	M_SOI		6701270						
ANR	6701318	Symbol	NEXTBYTE		6701270						
ANR	6701319	Symbol	c1		6701270						
ANR	6701320	Symbol	c2		6701270						
ANR	6701321	Function	copy_variable	244:0:6314:6772							
ANR	6701322	FunctionDef	copy_variable ()		6701321	0					
ANR	6701323	CompoundStatement		247:0:6409:6772	6701321	0					
ANR	6701324	IdentifierDeclStatement	unsigned int length ;	248:2:6413:6432	6701321	0	True				
ANR	6701325	IdentifierDecl	length		6701321	0					
ANR	6701326	IdentifierDeclType	unsigned int		6701321	0					
ANR	6701327	Identifier	length		6701321	1					
ANR	6701328	ExpressionStatement	length = read_2_bytes ( )	251:2:6483:6506	6701321	1	True				
ANR	6701329	AssignmentExpression	length = read_2_bytes ( )		6701321	0		=			
ANR	6701330	Identifier	length		6701321	0					
ANR	6701331	CallExpression	read_2_bytes ( )		6701321	1					
ANR	6701332	Callee	read_2_bytes		6701321	0					
ANR	6701333	Identifier	read_2_bytes		6701321	0					
ANR	6701334	ArgumentList			6701321	1					
ANR	6701335	ExpressionStatement	write_2_bytes ( length )	252:2:6510:6531	6701321	2	True				
ANR	6701336	CallExpression	write_2_bytes ( length )		6701321	0					
ANR	6701337	Callee	write_2_bytes		6701321	0					
ANR	6701338	Identifier	write_2_bytes		6701321	0					
ANR	6701339	ArgumentList	length		6701321	1					
ANR	6701340	Argument	length		6701321	0					
ANR	6701341	Identifier	length		6701321	0					
ANR	6701342	IfStatement	if ( length < 2 )		6701321	3					
ANR	6701343	Condition	length < 2	254:6:6593:6602	6701321	0	True				
ANR	6701344	RelationalExpression	length < 2		6701321	0		<			
ANR	6701345	Identifier	length		6701321	0					
ANR	6701346	PrimaryExpression	2		6701321	1					
ANR	6701347	ExpressionStatement	"ERREXIT ( ""Erroneous JPEG marker length"" )"	255:4:6609:6648	6701321	1	True				
ANR	6701348	CallExpression	"ERREXIT ( ""Erroneous JPEG marker length"" )"		6701321	0					
ANR	6701349	Callee	ERREXIT		6701321	0					
ANR	6701350	Identifier	ERREXIT		6701321	0					
ANR	6701351	ArgumentList	"""Erroneous JPEG marker length"""		6701321	1					
ANR	6701352	Argument	"""Erroneous JPEG marker length"""		6701321	0					
ANR	6701353	PrimaryExpression	"""Erroneous JPEG marker length"""		6701321	0					
ANR	6701354	ExpressionStatement	length -= 2	256:2:6652:6663	6701321	4	True				
ANR	6701355	AssignmentExpression	length -= 2		6701321	0		-=			
ANR	6701356	Identifier	length		6701321	0					
ANR	6701357	PrimaryExpression	2		6701321	1					
ANR	6701358	WhileStatement	while ( length > 0 )		6701321	5					
ANR	6701359	Condition	length > 0	258:9:6707:6716	6701321	0	True				
ANR	6701360	RelationalExpression	length > 0		6701321	0		>			
ANR	6701361	Identifier	length		6701321	0					
ANR	6701362	PrimaryExpression	0		6701321	1					
ANR	6701363	CompoundStatement		12:21:309:309	6701321	1					
ANR	6701364	ExpressionStatement	write_1_byte ( read_1_byte ( ) )	259:4:6725:6752	6701321	0	True				
ANR	6701365	CallExpression	write_1_byte ( read_1_byte ( ) )		6701321	0					
ANR	6701366	Callee	write_1_byte		6701321	0					
ANR	6701367	Identifier	write_1_byte		6701321	0					
ANR	6701368	ArgumentList	read_1_byte ( )		6701321	1					
ANR	6701369	Argument	read_1_byte ( )		6701321	0					
ANR	6701370	CallExpression	read_1_byte ( )		6701321	0					
ANR	6701371	Callee	read_1_byte		6701321	0					
ANR	6701372	Identifier	read_1_byte		6701321	0					
ANR	6701373	ArgumentList			6701321	1					
ANR	6701374	ExpressionStatement	length --	260:4:6758:6766	6701321	1	True				
ANR	6701375	PostIncDecOperationExpression	length --		6701321	0					
ANR	6701376	Identifier	length		6701321	0					
ANR	6701377	IncDec	--		6701321	1					
ANR	6701378	ReturnType	static void		6701321	1					
ANR	6701379	Identifier	copy_variable		6701321	2					
ANR	6701380	ParameterList			6701321	3					
ANR	6701381	CFGEntryNode	ENTRY		6701321		True				
ANR	6701382	CFGExitNode	EXIT		6701321		True				
ANR	6701383	Symbol	read_2_bytes		6701321						
ANR	6701384	Symbol	read_1_byte		6701321						
ANR	6701385	Symbol	length		6701321						
ANR	6701386	Function	skip_variable	264:0:6775:7211							
ANR	6701387	FunctionDef	skip_variable ()		6701386	0					
ANR	6701388	CompoundStatement		267:0:6875:7211	6701386	0					
ANR	6701389	IdentifierDeclStatement	unsigned int length ;	268:2:6879:6898	6701386	0	True				
ANR	6701390	IdentifierDecl	length		6701386	0					
ANR	6701391	IdentifierDeclType	unsigned int		6701386	0					
ANR	6701392	Identifier	length		6701386	1					
ANR	6701393	ExpressionStatement	length = read_2_bytes ( )	271:2:6949:6972	6701386	1	True				
ANR	6701394	AssignmentExpression	length = read_2_bytes ( )		6701386	0		=			
ANR	6701395	Identifier	length		6701386	0					
ANR	6701396	CallExpression	read_2_bytes ( )		6701386	1					
ANR	6701397	Callee	read_2_bytes		6701386	0					
ANR	6701398	Identifier	read_2_bytes		6701386	0					
ANR	6701399	ArgumentList			6701386	1					
ANR	6701400	IfStatement	if ( length < 2 )		6701386	2					
ANR	6701401	Condition	length < 2	273:6:7034:7043	6701386	0	True				
ANR	6701402	RelationalExpression	length < 2		6701386	0		<			
ANR	6701403	Identifier	length		6701386	0					
ANR	6701404	PrimaryExpression	2		6701386	1					
ANR	6701405	ExpressionStatement	"ERREXIT ( ""Erroneous JPEG marker length"" )"	274:4:7050:7089	6701386	1	True				
ANR	6701406	CallExpression	"ERREXIT ( ""Erroneous JPEG marker length"" )"		6701386	0					
ANR	6701407	Callee	ERREXIT		6701386	0					
ANR	6701408	Identifier	ERREXIT		6701386	0					
ANR	6701409	ArgumentList	"""Erroneous JPEG marker length"""		6701386	1					
ANR	6701410	Argument	"""Erroneous JPEG marker length"""		6701386	0					
ANR	6701411	PrimaryExpression	"""Erroneous JPEG marker length"""		6701386	0					
ANR	6701412	ExpressionStatement	length -= 2	275:2:7093:7104	6701386	3	True				
ANR	6701413	AssignmentExpression	length -= 2		6701386	0		-=			
ANR	6701414	Identifier	length		6701386	0					
ANR	6701415	PrimaryExpression	2		6701386	1					
ANR	6701416	WhileStatement	while ( length > 0 )		6701386	4					
ANR	6701417	Condition	length > 0	277:9:7153:7162	6701386	0	True				
ANR	6701418	RelationalExpression	length > 0		6701386	0		>			
ANR	6701419	Identifier	length		6701386	0					
ANR	6701420	PrimaryExpression	0		6701386	1					
ANR	6701421	CompoundStatement		11:21:289:289	6701386	1					
ANR	6701422	ExpressionStatement	( void ) read_1_byte ( )	278:4:7171:7191	6701386	0	True				
ANR	6701423	CastExpression	( void ) read_1_byte ( )		6701386	0					
ANR	6701424	CastTarget	void		6701386	0					
ANR	6701425	CallExpression	read_1_byte ( )		6701386	1					
ANR	6701426	Callee	read_1_byte		6701386	0					
ANR	6701427	Identifier	read_1_byte		6701386	0					
ANR	6701428	ArgumentList			6701386	1					
ANR	6701429	ExpressionStatement	length --	279:4:7197:7205	6701386	1	True				
ANR	6701430	PostIncDecOperationExpression	length --		6701386	0					
ANR	6701431	Identifier	length		6701386	0					
ANR	6701432	IncDec	--		6701386	1					
ANR	6701433	ReturnType	static void		6701386	1					
ANR	6701434	Identifier	skip_variable		6701386	2					
ANR	6701435	ParameterList			6701386	3					
ANR	6701436	CFGEntryNode	ENTRY		6701386		True				
ANR	6701437	CFGExitNode	EXIT		6701386		True				
ANR	6701438	Symbol	read_2_bytes		6701386						
ANR	6701439	Symbol	length		6701386						
ANR	6701440	Function	scan_JPEG_header	289:0:7350:9076							
ANR	6701441	FunctionDef	scan_JPEG_header (int keep_COM)		6701440	0					
ANR	6701442	CompoundStatement		291:0:7393:9076	6701440	0					
ANR	6701443	IdentifierDeclStatement	int marker ;	292:2:7397:7407	6701440	0	True				
ANR	6701444	IdentifierDecl	marker		6701440	0					
ANR	6701445	IdentifierDeclType	int		6701440	0					
ANR	6701446	Identifier	marker		6701440	1					
ANR	6701447	IfStatement	if ( first_marker ( ) != M_SOI )		6701440	1					
ANR	6701448	Condition	first_marker ( ) != M_SOI	295:6:7452:7474	6701440	0	True				
ANR	6701449	EqualityExpression	first_marker ( ) != M_SOI		6701440	0		!=			
ANR	6701450	CallExpression	first_marker ( )		6701440	0					
ANR	6701451	Callee	first_marker		6701440	0					
ANR	6701452	Identifier	first_marker		6701440	0					
ANR	6701453	ArgumentList			6701440	1					
ANR	6701454	Identifier	M_SOI		6701440	1					
ANR	6701455	ExpressionStatement	"ERREXIT ( ""Expected SOI marker first"" )"	296:4:7481:7517	6701440	1	True				
ANR	6701456	CallExpression	"ERREXIT ( ""Expected SOI marker first"" )"		6701440	0					
ANR	6701457	Callee	ERREXIT		6701440	0					
ANR	6701458	Identifier	ERREXIT		6701440	0					
ANR	6701459	ArgumentList	"""Expected SOI marker first"""		6701440	1					
ANR	6701460	Argument	"""Expected SOI marker first"""		6701440	0					
ANR	6701461	PrimaryExpression	"""Expected SOI marker first"""		6701440	0					
ANR	6701462	ExpressionStatement	write_marker ( M_SOI )	297:2:7521:7540	6701440	2	True				
ANR	6701463	CallExpression	write_marker ( M_SOI )		6701440	0					
ANR	6701464	Callee	write_marker		6701440	0					
ANR	6701465	Identifier	write_marker		6701440	0					
ANR	6701466	ArgumentList	M_SOI		6701440	1					
ANR	6701467	Argument	M_SOI		6701440	0					
ANR	6701468	Identifier	M_SOI		6701440	0					
ANR	6701469	ForStatement	for ( ; ; )		6701440	3					
ANR	6701470	CompoundStatement		10:11:216:216	6701440	0					
ANR	6701471	ExpressionStatement	marker = next_marker ( )	301:4:7616:7638	6701440	0	True				
ANR	6701472	AssignmentExpression	marker = next_marker ( )		6701440	0		=			
ANR	6701473	Identifier	marker		6701440	0					
ANR	6701474	CallExpression	next_marker ( )		6701440	1					
ANR	6701475	Callee	next_marker		6701440	0					
ANR	6701476	Identifier	next_marker		6701440	0					
ANR	6701477	ArgumentList			6701440	1					
ANR	6701478	SwitchStatement	switch ( marker )		6701440	1					
ANR	6701479	Condition	marker	302:12:7652:7657	6701440	0	True				
ANR	6701480	Identifier	marker		6701440	0					
ANR	6701481	CompoundStatement		12:20:266:266	6701440	1					
ANR	6701482	Label	case M_SOF0 :	306:4:7812:7823	6701440	0	True				
ANR	6701483	Identifier	M_SOF0		6701440	0					
ANR	6701484	Label	case M_SOF1 :	307:4:7845:7856	6701440	1	True				
ANR	6701485	Identifier	M_SOF1		6701440	0					
ANR	6701486	Label	case M_SOF2 :	308:4:7898:7909	6701440	2	True				
ANR	6701487	Identifier	M_SOF2		6701440	0					
ANR	6701488	Label	case M_SOF3 :	309:4:7943:7954	6701440	3	True				
ANR	6701489	Identifier	M_SOF3		6701440	0					
ANR	6701490	Label	case M_SOF5 :	310:4:7985:7996	6701440	4	True				
ANR	6701491	Identifier	M_SOF5		6701440	0					
ANR	6701492	Label	case M_SOF6 :	311:4:8042:8053	6701440	5	True				
ANR	6701493	Identifier	M_SOF6		6701440	0					
ANR	6701494	Label	case M_SOF7 :	312:4:8100:8111	6701440	6	True				
ANR	6701495	Identifier	M_SOF7		6701440	0					
ANR	6701496	Label	case M_SOF9 :	313:4:8155:8166	6701440	7	True				
ANR	6701497	Identifier	M_SOF9		6701440	0					
ANR	6701498	Label	case M_SOF10 :	314:4:8211:8223	6701440	8	True				
ANR	6701499	Identifier	M_SOF10		6701440	0					
ANR	6701500	Label	case M_SOF11 :	315:4:8260:8272	6701440	9	True				
ANR	6701501	Identifier	M_SOF11		6701440	0					
ANR	6701502	Label	case M_SOF13 :	316:4:8306:8318	6701440	10	True				
ANR	6701503	Identifier	M_SOF13		6701440	0					
ANR	6701504	Label	case M_SOF14 :	317:4:8367:8379	6701440	11	True				
ANR	6701505	Identifier	M_SOF14		6701440	0					
ANR	6701506	Label	case M_SOF15 :	318:4:8429:8441	6701440	12	True				
ANR	6701507	Identifier	M_SOF15		6701440	0					
ANR	6701508	ReturnStatement	return marker ;	319:6:8490:8503	6701440	13	True				
ANR	6701509	Identifier	marker		6701440	0					
ANR	6701510	Label	case M_SOS :	321:4:8510:8520	6701440	14	True				
ANR	6701511	Identifier	M_SOS		6701440	0					
ANR	6701512	ExpressionStatement	"ERREXIT ( ""SOS without prior SOFn"" )"	322:6:8578:8611	6701440	15	True				
ANR	6701513	CallExpression	"ERREXIT ( ""SOS without prior SOFn"" )"		6701440	0					
ANR	6701514	Callee	ERREXIT		6701440	0					
ANR	6701515	Identifier	ERREXIT		6701440	0					
ANR	6701516	ArgumentList	"""SOS without prior SOFn"""		6701440	1					
ANR	6701517	Argument	"""SOS without prior SOFn"""		6701440	0					
ANR	6701518	PrimaryExpression	"""SOS without prior SOFn"""		6701440	0					
ANR	6701519	BreakStatement	break ;	323:6:8619:8624	6701440	16	True				
ANR	6701520	Label	case M_EOI :	325:4:8631:8641	6701440	17	True				
ANR	6701521	Identifier	M_EOI		6701440	0					
ANR	6701522	ReturnStatement	return marker ;	326:6:8696:8709	6701440	18	True				
ANR	6701523	Identifier	marker		6701440	0					
ANR	6701524	Label	case M_COM :	328:4:8716:8726	6701440	19	True				
ANR	6701525	Identifier	M_COM		6701440	0					
ANR	6701526	IfStatement	if ( keep_COM )		6701440	20					
ANR	6701527	Condition	keep_COM	329:10:8782:8789	6701440	0	True				
ANR	6701528	Identifier	keep_COM		6701440	0					
ANR	6701529	CompoundStatement		39:20:1398:1398	6701440	1					
ANR	6701530	ExpressionStatement	write_marker ( marker )	330:1:8795:8815	6701440	0	True				
ANR	6701531	CallExpression	write_marker ( marker )		6701440	0					
ANR	6701532	Callee	write_marker		6701440	0					
ANR	6701533	Identifier	write_marker		6701440	0					
ANR	6701534	ArgumentList	marker		6701440	1					
ANR	6701535	Argument	marker		6701440	0					
ANR	6701536	Identifier	marker		6701440	0					
ANR	6701537	ExpressionStatement	copy_variable ( )	331:1:8818:8833	6701440	1	True				
ANR	6701538	CallExpression	copy_variable ( )		6701440	0					
ANR	6701539	Callee	copy_variable		6701440	0					
ANR	6701540	Identifier	copy_variable		6701440	0					
ANR	6701541	ArgumentList			6701440	1					
ANR	6701542	ElseStatement	else		6701440	0					
ANR	6701543	CompoundStatement		42:13:1454:1454	6701440	0					
ANR	6701544	ExpressionStatement	skip_variable ( )	333:1:8851:8866	6701440	0	True				
ANR	6701545	CallExpression	skip_variable ( )		6701440	0					
ANR	6701546	Callee	skip_variable		6701440	0					
ANR	6701547	Identifier	skip_variable		6701440	0					
ANR	6701548	ArgumentList			6701440	1					
ANR	6701549	BreakStatement	break ;	335:6:8882:8887	6701440	21	True				
ANR	6701550	Label	default :	337:4:8894:8901	6701440	22	True				
ANR	6701551	Identifier	default		6701440	0					
ANR	6701552	ExpressionStatement	write_marker ( marker )	338:6:8948:8968	6701440	23	True				
ANR	6701553	CallExpression	write_marker ( marker )		6701440	0					
ANR	6701554	Callee	write_marker		6701440	0					
ANR	6701555	Identifier	write_marker		6701440	0					
ANR	6701556	ArgumentList	marker		6701440	1					
ANR	6701557	Argument	marker		6701440	0					
ANR	6701558	Identifier	marker		6701440	0					
ANR	6701559	ExpressionStatement	copy_variable ( )	339:6:8976:8991	6701440	24	True				
ANR	6701560	CallExpression	copy_variable ( )		6701440	0					
ANR	6701561	Callee	copy_variable		6701440	0					
ANR	6701562	Identifier	copy_variable		6701440	0					
ANR	6701563	ArgumentList			6701440	1					
ANR	6701564	BreakStatement	break ;	340:6:9044:9049	6701440	25	True				
ANR	6701565	ReturnType	static int		6701440	1					
ANR	6701566	Identifier	scan_JPEG_header		6701440	2					
ANR	6701567	ParameterList	int keep_COM		6701440	3					
ANR	6701568	Parameter	int keep_COM	290:18:7379:7390	6701440	0	True				
ANR	6701569	ParameterType	int		6701440	0					
ANR	6701570	Identifier	keep_COM		6701440	1					
ANR	6701571	CFGEntryNode	ENTRY		6701440		True				
ANR	6701572	CFGExitNode	EXIT		6701440		True				
ANR	6701573	InfiniteForNode	true		6701440		True				
ANR	6701574	Symbol	next_marker		6701440						
ANR	6701575	Symbol	M_SOI		6701440						
ANR	6701576	Symbol	keep_COM		6701440						
ANR	6701577	Symbol	first_marker		6701440						
ANR	6701578	Symbol	marker		6701440						
ANR	6701579	DeclStmt									
ANR	6701580	Decl							const char	const char *	progname
ANR	6701581	Function	usage	351:0:9183:10457							
ANR	6701582	FunctionDef	usage ()		6701581	0					
ANR	6701583	CompoundStatement		354:0:9246:10457	6701581	0					
ANR	6701584	ExpressionStatement	"fprintf ( stderr , ""wrjpgcom inserts a textual comment in a JPEG file.\\n"" )"	355:2:9250:9321	6701581	0	True				
ANR	6701585	CallExpression	"fprintf ( stderr , ""wrjpgcom inserts a textual comment in a JPEG file.\\n"" )"		6701581	0					
ANR	6701586	Callee	fprintf		6701581	0					
ANR	6701587	Identifier	fprintf		6701581	0					
ANR	6701588	ArgumentList	stderr		6701581	1					
ANR	6701589	Argument	stderr		6701581	0					
ANR	6701590	Identifier	stderr		6701581	0					
ANR	6701591	Argument	"""wrjpgcom inserts a textual comment in a JPEG file.\\n"""		6701581	1					
ANR	6701592	PrimaryExpression	"""wrjpgcom inserts a textual comment in a JPEG file.\\n"""		6701581	0					
ANR	6701593	ExpressionStatement	"fprintf ( stderr , ""You can add to or replace any existing comment(s).\\n"" )"	356:2:9325:9396	6701581	1	True				
ANR	6701594	CallExpression	"fprintf ( stderr , ""You can add to or replace any existing comment(s).\\n"" )"		6701581	0					
ANR	6701595	Callee	fprintf		6701581	0					
ANR	6701596	Identifier	fprintf		6701581	0					
ANR	6701597	ArgumentList	stderr		6701581	1					
ANR	6701598	Argument	stderr		6701581	0					
ANR	6701599	Identifier	stderr		6701581	0					
ANR	6701600	Argument	"""You can add to or replace any existing comment(s).\\n"""		6701581	1					
ANR	6701601	PrimaryExpression	"""You can add to or replace any existing comment(s).\\n"""		6701581	0					
ANR	6701602	ExpressionStatement	"fprintf ( stderr , ""Usage: %s [switches] "" , progname )"	358:2:9401:9451	6701581	2	True				
ANR	6701603	CallExpression	"fprintf ( stderr , ""Usage: %s [switches] "" , progname )"		6701581	0					
ANR	6701604	Callee	fprintf		6701581	0					
ANR	6701605	Identifier	fprintf		6701581	0					
ANR	6701606	ArgumentList	stderr		6701581	1					
ANR	6701607	Argument	stderr		6701581	0					
ANR	6701608	Identifier	stderr		6701581	0					
ANR	6701609	Argument	"""Usage: %s [switches] """		6701581	1					
ANR	6701610	PrimaryExpression	"""Usage: %s [switches] """		6701581	0					
ANR	6701611	Argument	progname		6701581	2					
ANR	6701612	Identifier	progname		6701581	0					
ANR	6701613	ExpressionStatement	"fprintf ( stderr , ""inputfile outputfile\\n"" )"	360:2:9483:9524	6701581	3	True				
ANR	6701614	CallExpression	"fprintf ( stderr , ""inputfile outputfile\\n"" )"		6701581	0					
ANR	6701615	Callee	fprintf		6701581	0					
ANR	6701616	Identifier	fprintf		6701581	0					
ANR	6701617	ArgumentList	stderr		6701581	1					
ANR	6701618	Argument	stderr		6701581	0					
ANR	6701619	Identifier	stderr		6701581	0					
ANR	6701620	Argument	"""inputfile outputfile\\n"""		6701581	1					
ANR	6701621	PrimaryExpression	"""inputfile outputfile\\n"""		6701581	0					
ANR	6701622	ExpressionStatement	"fprintf ( stderr , ""Switches (names may be abbreviated):\\n"" )"	365:2:9578:9635	6701581	4	True				
ANR	6701623	CallExpression	"fprintf ( stderr , ""Switches (names may be abbreviated):\\n"" )"		6701581	0					
ANR	6701624	Callee	fprintf		6701581	0					
ANR	6701625	Identifier	fprintf		6701581	0					
ANR	6701626	ArgumentList	stderr		6701581	1					
ANR	6701627	Argument	stderr		6701581	0					
ANR	6701628	Identifier	stderr		6701581	0					
ANR	6701629	Argument	"""Switches (names may be abbreviated):\\n"""		6701581	1					
ANR	6701630	PrimaryExpression	"""Switches (names may be abbreviated):\\n"""		6701581	0					
ANR	6701631	ExpressionStatement	"fprintf ( stderr , ""  -replace         Delete any existing comments\\n"" )"	366:2:9639:9707	6701581	5	True				
ANR	6701632	CallExpression	"fprintf ( stderr , ""  -replace         Delete any existing comments\\n"" )"		6701581	0					
ANR	6701633	Callee	fprintf		6701581	0					
ANR	6701634	Identifier	fprintf		6701581	0					
ANR	6701635	ArgumentList	stderr		6701581	1					
ANR	6701636	Argument	stderr		6701581	0					
ANR	6701637	Identifier	stderr		6701581	0					
ANR	6701638	Argument	"""  -replace         Delete any existing comments\\n"""		6701581	1					
ANR	6701639	PrimaryExpression	"""  -replace         Delete any existing comments\\n"""		6701581	0					
ANR	6701640	ExpressionStatement	"fprintf ( stderr , ""  -comment \\""text\\""  Insert comment with given text\\n"" )"	367:2:9711:9783	6701581	6	True				
ANR	6701641	CallExpression	"fprintf ( stderr , ""  -comment \\""text\\""  Insert comment with given text\\n"" )"		6701581	0					
ANR	6701642	Callee	fprintf		6701581	0					
ANR	6701643	Identifier	fprintf		6701581	0					
ANR	6701644	ArgumentList	stderr		6701581	1					
ANR	6701645	Argument	stderr		6701581	0					
ANR	6701646	Identifier	stderr		6701581	0					
ANR	6701647	Argument	"""  -comment \\""text\\""  Insert comment with given text\\n"""		6701581	1					
ANR	6701648	PrimaryExpression	"""  -comment \\""text\\""  Insert comment with given text\\n"""		6701581	0					
ANR	6701649	ExpressionStatement	"fprintf ( stderr , ""  -cfile name      Read comment from named file\\n"" )"	368:2:9787:9855	6701581	7	True				
ANR	6701650	CallExpression	"fprintf ( stderr , ""  -cfile name      Read comment from named file\\n"" )"		6701581	0					
ANR	6701651	Callee	fprintf		6701581	0					
ANR	6701652	Identifier	fprintf		6701581	0					
ANR	6701653	ArgumentList	stderr		6701581	1					
ANR	6701654	Argument	stderr		6701581	0					
ANR	6701655	Identifier	stderr		6701581	0					
ANR	6701656	Argument	"""  -cfile name      Read comment from named file\\n"""		6701581	1					
ANR	6701657	PrimaryExpression	"""  -cfile name      Read comment from named file\\n"""		6701581	0					
ANR	6701658	ExpressionStatement	"fprintf ( stderr , ""Notice that you must put quotes around the comment text\\n"" )"	369:2:9859:9935	6701581	8	True				
ANR	6701659	CallExpression	"fprintf ( stderr , ""Notice that you must put quotes around the comment text\\n"" )"		6701581	0					
ANR	6701660	Callee	fprintf		6701581	0					
ANR	6701661	Identifier	fprintf		6701581	0					
ANR	6701662	ArgumentList	stderr		6701581	1					
ANR	6701663	Argument	stderr		6701581	0					
ANR	6701664	Identifier	stderr		6701581	0					
ANR	6701665	Argument	"""Notice that you must put quotes around the comment text\\n"""		6701581	1					
ANR	6701666	PrimaryExpression	"""Notice that you must put quotes around the comment text\\n"""		6701581	0					
ANR	6701667	ExpressionStatement	"fprintf ( stderr , ""when you use -comment.\\n"" )"	370:2:9939:9982	6701581	9	True				
ANR	6701668	CallExpression	"fprintf ( stderr , ""when you use -comment.\\n"" )"		6701581	0					
ANR	6701669	Callee	fprintf		6701581	0					
ANR	6701670	Identifier	fprintf		6701581	0					
ANR	6701671	ArgumentList	stderr		6701581	1					
ANR	6701672	Argument	stderr		6701581	0					
ANR	6701673	Identifier	stderr		6701581	0					
ANR	6701674	Argument	"""when you use -comment.\\n"""		6701581	1					
ANR	6701675	PrimaryExpression	"""when you use -comment.\\n"""		6701581	0					
ANR	6701676	ExpressionStatement	"fprintf ( stderr , ""If you do not give either -comment or -cfile on the command line,\\n"" )"	371:2:9986:10072	6701581	10	True				
ANR	6701677	CallExpression	"fprintf ( stderr , ""If you do not give either -comment or -cfile on the command line,\\n"" )"		6701581	0					
ANR	6701678	Callee	fprintf		6701581	0					
ANR	6701679	Identifier	fprintf		6701581	0					
ANR	6701680	ArgumentList	stderr		6701581	1					
ANR	6701681	Argument	stderr		6701581	0					
ANR	6701682	Identifier	stderr		6701581	0					
ANR	6701683	Argument	"""If you do not give either -comment or -cfile on the command line,\\n"""		6701581	1					
ANR	6701684	PrimaryExpression	"""If you do not give either -comment or -cfile on the command line,\\n"""		6701581	0					
ANR	6701685	ExpressionStatement	"fprintf ( stderr , ""then the comment text is read from standard input.\\n"" )"	372:2:10076:10147	6701581	11	True				
ANR	6701686	CallExpression	"fprintf ( stderr , ""then the comment text is read from standard input.\\n"" )"		6701581	0					
ANR	6701687	Callee	fprintf		6701581	0					
ANR	6701688	Identifier	fprintf		6701581	0					
ANR	6701689	ArgumentList	stderr		6701581	1					
ANR	6701690	Argument	stderr		6701581	0					
ANR	6701691	Identifier	stderr		6701581	0					
ANR	6701692	Argument	"""then the comment text is read from standard input.\\n"""		6701581	1					
ANR	6701693	PrimaryExpression	"""then the comment text is read from standard input.\\n"""		6701581	0					
ANR	6701694	ExpressionStatement	"fprintf ( stderr , ""It can be multiple lines, up to %u characters total.\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	373:2:10151:10258	6701581	12	True				
ANR	6701695	CallExpression	"fprintf ( stderr , ""It can be multiple lines, up to %u characters total.\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		6701581	0					
ANR	6701696	Callee	fprintf		6701581	0					
ANR	6701697	Identifier	fprintf		6701581	0					
ANR	6701698	ArgumentList	stderr		6701581	1					
ANR	6701699	Argument	stderr		6701581	0					
ANR	6701700	Identifier	stderr		6701581	0					
ANR	6701701	Argument	"""It can be multiple lines, up to %u characters total.\\n"""		6701581	1					
ANR	6701702	PrimaryExpression	"""It can be multiple lines, up to %u characters total.\\n"""		6701581	0					
ANR	6701703	Argument	( unsigned int ) MAX_COM_LENGTH		6701581	2					
ANR	6701704	CastExpression	( unsigned int ) MAX_COM_LENGTH		6701581	0					
ANR	6701705	CastTarget	unsigned int		6701581	0					
ANR	6701706	Identifier	MAX_COM_LENGTH		6701581	1					
ANR	6701707	ExpressionStatement	"fprintf ( stderr , ""You must specify an input JPEG file name when supplying\\n"" )"	376:2:10291:10367	6701581	13	True				
ANR	6701708	CallExpression	"fprintf ( stderr , ""You must specify an input JPEG file name when supplying\\n"" )"		6701581	0					
ANR	6701709	Callee	fprintf		6701581	0					
ANR	6701710	Identifier	fprintf		6701581	0					
ANR	6701711	ArgumentList	stderr		6701581	1					
ANR	6701712	Argument	stderr		6701581	0					
ANR	6701713	Identifier	stderr		6701581	0					
ANR	6701714	Argument	"""You must specify an input JPEG file name when supplying\\n"""		6701581	1					
ANR	6701715	PrimaryExpression	"""You must specify an input JPEG file name when supplying\\n"""		6701581	0					
ANR	6701716	ExpressionStatement	"fprintf ( stderr , ""comment text from standard input.\\n"" )"	377:2:10371:10425	6701581	14	True				
ANR	6701717	CallExpression	"fprintf ( stderr , ""comment text from standard input.\\n"" )"		6701581	0					
ANR	6701718	Callee	fprintf		6701581	0					
ANR	6701719	Identifier	fprintf		6701581	0					
ANR	6701720	ArgumentList	stderr		6701581	1					
ANR	6701721	Argument	stderr		6701581	0					
ANR	6701722	Identifier	stderr		6701581	0					
ANR	6701723	Argument	"""comment text from standard input.\\n"""		6701581	1					
ANR	6701724	PrimaryExpression	"""comment text from standard input.\\n"""		6701581	0					
ANR	6701725	ExpressionStatement	exit ( EXIT_FAILURE )	380:2:10437:10455	6701581	15	True				
ANR	6701726	CallExpression	exit ( EXIT_FAILURE )		6701581	0					
ANR	6701727	Callee	exit		6701581	0					
ANR	6701728	Identifier	exit		6701581	0					
ANR	6701729	ArgumentList	EXIT_FAILURE		6701581	1					
ANR	6701730	Argument	EXIT_FAILURE		6701581	0					
ANR	6701731	Identifier	EXIT_FAILURE		6701581	0					
ANR	6701732	ReturnType	static void		6701581	1					
ANR	6701733	Identifier	usage		6701581	2					
ANR	6701734	ParameterList			6701581	3					
ANR	6701735	CFGEntryNode	ENTRY		6701581		True				
ANR	6701736	CFGExitNode	EXIT		6701581		True				
ANR	6701737	Symbol	MAX_COM_LENGTH		6701581						
ANR	6701738	Symbol	EXIT_FAILURE		6701581						
ANR	6701739	Symbol	progname		6701581						
ANR	6701740	Symbol	stderr		6701581						
ANR	6701741	Function	keymatch	384:0:10461:11248							
ANR	6701742	FunctionDef	"keymatch (char * arg , const char * keyword , int minchars)"		6701741	0					
ANR	6701743	CompoundStatement		389:0:10730:11248	6701741	0					
ANR	6701744	Statement	register	390:2:10734:10741	6701741	0	True				
ANR	6701745	IdentifierDeclStatement	"int ca , ck ;"	390:11:10743:10753	6701741	1	True				
ANR	6701746	IdentifierDecl	ca		6701741	0					
ANR	6701747	IdentifierDeclType	int		6701741	0					
ANR	6701748	Identifier	ca		6701741	1					
ANR	6701749	IdentifierDecl	ck		6701741	1					
ANR	6701750	IdentifierDeclType	int		6701741	0					
ANR	6701751	Identifier	ck		6701741	1					
ANR	6701752	Statement	register	391:2:10757:10764	6701741	2	True				
ANR	6701753	IdentifierDeclStatement	int nmatched = 0 ;	391:11:10766:10782	6701741	3	True				
ANR	6701754	IdentifierDecl	nmatched = 0		6701741	0					
ANR	6701755	IdentifierDeclType	int		6701741	0					
ANR	6701756	Identifier	nmatched		6701741	1					
ANR	6701757	AssignmentExpression	nmatched = 0		6701741	2		=			
ANR	6701758	Identifier	nmatched		6701741	0					
ANR	6701759	PrimaryExpression	0		6701741	1					
ANR	6701760	WhileStatement	while ( ( ca = * arg ++ ) != '\\0' )		6701741	4					
ANR	6701761	Condition	( ca = * arg ++ ) != '\\0'	393:9:10794:10814	6701741	0	True				
ANR	6701762	EqualityExpression	( ca = * arg ++ ) != '\\0'		6701741	0		!=			
ANR	6701763	AssignmentExpression	ca = * arg ++		6701741	0		=			
ANR	6701764	Identifier	ca		6701741	0					
ANR	6701765	UnaryOperationExpression	* arg ++		6701741	1					
ANR	6701766	UnaryOperator	*		6701741	0					
ANR	6701767	PostIncDecOperationExpression	arg ++		6701741	1					
ANR	6701768	Identifier	arg		6701741	0					
ANR	6701769	IncDec	++		6701741	1					
ANR	6701770	PrimaryExpression	'\\0'		6701741	1					
ANR	6701771	CompoundStatement		5:32:86:86	6701741	1					
ANR	6701772	IfStatement	if ( ( ck = * keyword ++ ) == '\\0' )		6701741	0					
ANR	6701773	Condition	( ck = * keyword ++ ) == '\\0'	394:8:10827:10851	6701741	0	True				
ANR	6701774	EqualityExpression	( ck = * keyword ++ ) == '\\0'		6701741	0		==			
ANR	6701775	AssignmentExpression	ck = * keyword ++		6701741	0		=			
ANR	6701776	Identifier	ck		6701741	0					
ANR	6701777	UnaryOperationExpression	* keyword ++		6701741	1					
ANR	6701778	UnaryOperator	*		6701741	0					
ANR	6701779	PostIncDecOperationExpression	keyword ++		6701741	1					
ANR	6701780	Identifier	keyword		6701741	0					
ANR	6701781	IncDec	++		6701741	1					
ANR	6701782	PrimaryExpression	'\\0'		6701741	1					
ANR	6701783	ReturnStatement	return 0 ;	395:6:10860:10868	6701741	1	True				
ANR	6701784	PrimaryExpression	0		6701741	0					
ANR	6701785	IfStatement	if ( isupper ( ca ) )		6701741	1					
ANR	6701786	Condition	isupper ( ca )	396:8:10919:10929	6701741	0	True				
ANR	6701787	CallExpression	isupper ( ca )		6701741	0					
ANR	6701788	Callee	isupper		6701741	0					
ANR	6701789	Identifier	isupper		6701741	0					
ANR	6701790	ArgumentList	ca		6701741	1					
ANR	6701791	Argument	ca		6701741	0					
ANR	6701792	Identifier	ca		6701741	0					
ANR	6701793	ExpressionStatement	ca = tolower ( ca )	397:6:10987:11003	6701741	1	True				
ANR	6701794	AssignmentExpression	ca = tolower ( ca )		6701741	0		=			
ANR	6701795	Identifier	ca		6701741	0					
ANR	6701796	CallExpression	tolower ( ca )		6701741	1					
ANR	6701797	Callee	tolower		6701741	0					
ANR	6701798	Identifier	tolower		6701741	0					
ANR	6701799	ArgumentList	ca		6701741	1					
ANR	6701800	Argument	ca		6701741	0					
ANR	6701801	Identifier	ca		6701741	0					
ANR	6701802	IfStatement	if ( ca != ck )		6701741	2					
ANR	6701803	Condition	ca != ck	398:8:11013:11020	6701741	0	True				
ANR	6701804	EqualityExpression	ca != ck		6701741	0		!=			
ANR	6701805	Identifier	ca		6701741	0					
ANR	6701806	Identifier	ck		6701741	1					
ANR	6701807	ReturnStatement	return 0 ;	399:6:11029:11037	6701741	1	True				
ANR	6701808	PrimaryExpression	0		6701741	0					
ANR	6701809	ExpressionStatement	nmatched ++	400:4:11059:11069	6701741	3	True				
ANR	6701810	PostIncDecOperationExpression	nmatched ++		6701741	0					
ANR	6701811	Identifier	nmatched		6701741	0					
ANR	6701812	IncDec	++		6701741	1					
ANR	6701813	IfStatement	if ( nmatched < minchars )		6701741	5					
ANR	6701814	Condition	nmatched < minchars	403:6:11188:11206	6701741	0	True				
ANR	6701815	RelationalExpression	nmatched < minchars		6701741	0		<			
ANR	6701816	Identifier	nmatched		6701741	0					
ANR	6701817	Identifier	minchars		6701741	1					
ANR	6701818	ReturnStatement	return 0 ;	404:4:11213:11221	6701741	1	True				
ANR	6701819	PrimaryExpression	0		6701741	0					
ANR	6701820	ReturnStatement	return 1 ;	405:2:11225:11233	6701741	6	True				
ANR	6701821	PrimaryExpression	1		6701741	0					
ANR	6701822	ReturnType	static int		6701741	1					
ANR	6701823	Identifier	keymatch		6701741	2					
ANR	6701824	ParameterList	"char * arg , const char * keyword , int minchars"		6701741	3					
ANR	6701825	Parameter	char * arg	385:10:10482:10491	6701741	0	True				
ANR	6701826	ParameterType	char *		6701741	0					
ANR	6701827	Identifier	arg		6701741	1					
ANR	6701828	Parameter	const char * keyword	385:22:10494:10513	6701741	1	True				
ANR	6701829	ParameterType	const char *		6701741	0					
ANR	6701830	Identifier	keyword		6701741	1					
ANR	6701831	Parameter	int minchars	385:44:10516:10527	6701741	2	True				
ANR	6701832	ParameterType	int		6701741	0					
ANR	6701833	Identifier	minchars		6701741	1					
ANR	6701834	CFGEntryNode	ENTRY		6701741		True				
ANR	6701835	CFGExitNode	EXIT		6701741		True				
ANR	6701836	Symbol	* keyword ++		6701741						
ANR	6701837	Symbol	* arg ++		6701741						
ANR	6701838	Symbol	tolower		6701741						
ANR	6701839	Symbol	arg		6701741						
ANR	6701840	Symbol	ck		6701741						
ANR	6701841	Symbol	isupper		6701741						
ANR	6701842	Symbol	nmatched		6701741						
ANR	6701843	Symbol	keyword		6701741						
ANR	6701844	Symbol	minchars		6701741						
ANR	6701845	Symbol	ca		6701741						
ANR	6701846	Function	main	413:0:11281:17179							
ANR	6701847	FunctionDef	"main (int argc , char * * argv)"		6701846	0					
ANR	6701848	CompoundStatement		415:0:11314:17179	6701846	0					
ANR	6701849	IdentifierDeclStatement	int argn ;	416:2:11318:11326	6701846	0	True				
ANR	6701850	IdentifierDecl	argn		6701846	0					
ANR	6701851	IdentifierDeclType	int		6701846	0					
ANR	6701852	Identifier	argn		6701846	1					
ANR	6701853	IdentifierDeclStatement	char * arg ;	417:2:11330:11340	6701846	1	True				
ANR	6701854	IdentifierDecl	* arg		6701846	0					
ANR	6701855	IdentifierDeclType	char *		6701846	0					
ANR	6701856	Identifier	arg		6701846	1					
ANR	6701857	IdentifierDeclStatement	int keep_COM = 1 ;	418:2:11344:11360	6701846	2	True				
ANR	6701858	IdentifierDecl	keep_COM = 1		6701846	0					
ANR	6701859	IdentifierDeclType	int		6701846	0					
ANR	6701860	Identifier	keep_COM		6701846	1					
ANR	6701861	AssignmentExpression	keep_COM = 1		6701846	2		=			
ANR	6701862	Identifier	keep_COM		6701846	0					
ANR	6701863	PrimaryExpression	1		6701846	1					
ANR	6701864	IdentifierDeclStatement	char * comment_arg = NULL ;	419:2:11364:11389	6701846	3	True				
ANR	6701865	IdentifierDecl	* comment_arg = NULL		6701846	0					
ANR	6701866	IdentifierDeclType	char *		6701846	0					
ANR	6701867	Identifier	comment_arg		6701846	1					
ANR	6701868	AssignmentExpression	* comment_arg = NULL		6701846	2		=			
ANR	6701869	Identifier	NULL		6701846	0					
ANR	6701870	Identifier	NULL		6701846	1					
ANR	6701871	IdentifierDeclStatement	FILE * comment_file = NULL ;	420:2:11393:11419	6701846	4	True				
ANR	6701872	IdentifierDecl	* comment_file = NULL		6701846	0					
ANR	6701873	IdentifierDeclType	FILE *		6701846	0					
ANR	6701874	Identifier	comment_file		6701846	1					
ANR	6701875	AssignmentExpression	* comment_file = NULL		6701846	2		=			
ANR	6701876	Identifier	NULL		6701846	0					
ANR	6701877	Identifier	NULL		6701846	1					
ANR	6701878	IdentifierDeclStatement	unsigned int comment_length = 0 ;	421:2:11423:11454	6701846	5	True				
ANR	6701879	IdentifierDecl	comment_length = 0		6701846	0					
ANR	6701880	IdentifierDeclType	unsigned int		6701846	0					
ANR	6701881	Identifier	comment_length		6701846	1					
ANR	6701882	AssignmentExpression	comment_length = 0		6701846	2		=			
ANR	6701883	Identifier	comment_length		6701846	0					
ANR	6701884	PrimaryExpression	0		6701846	1					
ANR	6701885	IdentifierDeclStatement	int marker ;	422:2:11458:11468	6701846	6	True				
ANR	6701886	IdentifierDecl	marker		6701846	0					
ANR	6701887	IdentifierDeclType	int		6701846	0					
ANR	6701888	Identifier	marker		6701846	1					
ANR	6701889	ExpressionStatement	argc = ccommand ( & argv )	426:2:11531:11553	6701846	7	True				
ANR	6701890	AssignmentExpression	argc = ccommand ( & argv )		6701846	0		=			
ANR	6701891	Identifier	argc		6701846	0					
ANR	6701892	CallExpression	ccommand ( & argv )		6701846	1					
ANR	6701893	Callee	ccommand		6701846	0					
ANR	6701894	Identifier	ccommand		6701846	0					
ANR	6701895	ArgumentList	& argv		6701846	1					
ANR	6701896	Argument	& argv		6701846	0					
ANR	6701897	UnaryOperationExpression	& argv		6701846	0					
ANR	6701898	UnaryOperator	&		6701846	0					
ANR	6701899	Identifier	argv		6701846	1					
ANR	6701900	ExpressionStatement	progname = argv [ 0 ]	429:2:11565:11583	6701846	8	True				
ANR	6701901	AssignmentExpression	progname = argv [ 0 ]		6701846	0		=			
ANR	6701902	Identifier	progname		6701846	0					
ANR	6701903	ArrayIndexing	argv [ 0 ]		6701846	1					
ANR	6701904	Identifier	argv		6701846	0					
ANR	6701905	PrimaryExpression	0		6701846	1					
ANR	6701906	IfStatement	if ( progname == NULL || progname [ 0 ] == 0 )		6701846	9					
ANR	6701907	Condition	progname == NULL || progname [ 0 ] == 0	430:6:11591:11626	6701846	0	True				
ANR	6701908	OrExpression	progname == NULL || progname [ 0 ] == 0		6701846	0		||			
ANR	6701909	EqualityExpression	progname == NULL		6701846	0		==			
ANR	6701910	Identifier	progname		6701846	0					
ANR	6701911	Identifier	NULL		6701846	1					
ANR	6701912	EqualityExpression	progname [ 0 ] == 0		6701846	1		==			
ANR	6701913	ArrayIndexing	progname [ 0 ]		6701846	0					
ANR	6701914	Identifier	progname		6701846	0					
ANR	6701915	PrimaryExpression	0		6701846	1					
ANR	6701916	PrimaryExpression	0		6701846	1					
ANR	6701917	ExpressionStatement	"progname = ""wrjpgcom"""	431:4:11633:11654	6701846	1	True				
ANR	6701918	AssignmentExpression	"progname = ""wrjpgcom"""		6701846	0		=			
ANR	6701919	Identifier	progname		6701846	0					
ANR	6701920	PrimaryExpression	"""wrjpgcom"""		6701846	1					
ANR	6701921	ForStatement	for ( argn = 1 ; argn < argc ; argn ++ )		6701846	10					
ANR	6701922	ForInit	argn = 1 ;	434:7:11738:11746	6701846	0	True				
ANR	6701923	AssignmentExpression	argn = 1		6701846	0		=			
ANR	6701924	Identifier	argn		6701846	0					
ANR	6701925	PrimaryExpression	1		6701846	1					
ANR	6701926	Condition	argn < argc	434:17:11748:11758	6701846	1	True				
ANR	6701927	RelationalExpression	argn < argc		6701846	0		<			
ANR	6701928	Identifier	argn		6701846	0					
ANR	6701929	Identifier	argc		6701846	1					
ANR	6701930	PostIncDecOperationExpression	argn ++	434:30:11761:11766	6701846	2	True				
ANR	6701931	Identifier	argn		6701846	0					
ANR	6701932	IncDec	++		6701846	1					
ANR	6701933	CompoundStatement		20:38:454:454	6701846	3					
ANR	6701934	ExpressionStatement	arg = argv [ argn ]	435:4:11775:11791	6701846	0	True				
ANR	6701935	AssignmentExpression	arg = argv [ argn ]		6701846	0		=			
ANR	6701936	Identifier	arg		6701846	0					
ANR	6701937	ArrayIndexing	argv [ argn ]		6701846	1					
ANR	6701938	Identifier	argv		6701846	0					
ANR	6701939	Identifier	argn		6701846	1					
ANR	6701940	IfStatement	if ( arg [ 0 ] != '-' )		6701846	1					
ANR	6701941	Condition	arg [ 0 ] != '-'	436:8:11801:11813	6701846	0	True				
ANR	6701942	EqualityExpression	arg [ 0 ] != '-'		6701846	0		!=			
ANR	6701943	ArrayIndexing	arg [ 0 ]		6701846	0					
ANR	6701944	Identifier	arg		6701846	0					
ANR	6701945	PrimaryExpression	0		6701846	1					
ANR	6701946	PrimaryExpression	'-'		6701846	1					
ANR	6701947	BreakStatement	break ;	437:6:11822:11827	6701846	1	True				
ANR	6701948	ExpressionStatement	arg ++	438:4:11871:11876	6701846	2	True				
ANR	6701949	PostIncDecOperationExpression	arg ++		6701846	0					
ANR	6701950	Identifier	arg		6701846	0					
ANR	6701951	IncDec	++		6701846	1					
ANR	6701952	IfStatement	"if ( keymatch ( arg , ""replace"" , 1 ) )"		6701846	3					
ANR	6701953	Condition	"keymatch ( arg , ""replace"" , 1 )"	439:8:11911:11937	6701846	0	True				
ANR	6701954	CallExpression	"keymatch ( arg , ""replace"" , 1 )"		6701846	0					
ANR	6701955	Callee	keymatch		6701846	0					
ANR	6701956	Identifier	keymatch		6701846	0					
ANR	6701957	ArgumentList	arg		6701846	1					
ANR	6701958	Argument	arg		6701846	0					
ANR	6701959	Identifier	arg		6701846	0					
ANR	6701960	Argument	"""replace"""		6701846	1					
ANR	6701961	PrimaryExpression	"""replace"""		6701846	0					
ANR	6701962	Argument	1		6701846	2					
ANR	6701963	PrimaryExpression	1		6701846	0					
ANR	6701964	CompoundStatement		25:37:625:625	6701846	1					
ANR	6701965	ExpressionStatement	keep_COM = 0	440:6:11948:11960	6701846	0	True				
ANR	6701966	AssignmentExpression	keep_COM = 0		6701846	0		=			
ANR	6701967	Identifier	keep_COM		6701846	0					
ANR	6701968	PrimaryExpression	0		6701846	1					
ANR	6701969	ElseStatement	else		6701846	0					
ANR	6701970	IfStatement	"if ( keymatch ( arg , ""cfile"" , 2 ) )"		6701846	0					
ANR	6701971	Condition	"keymatch ( arg , ""cfile"" , 2 )"	441:15:11977:12001	6701846	0	True				
ANR	6701972	CallExpression	"keymatch ( arg , ""cfile"" , 2 )"		6701846	0					
ANR	6701973	Callee	keymatch		6701846	0					
ANR	6701974	Identifier	keymatch		6701846	0					
ANR	6701975	ArgumentList	arg		6701846	1					
ANR	6701976	Argument	arg		6701846	0					
ANR	6701977	Identifier	arg		6701846	0					
ANR	6701978	Argument	"""cfile"""		6701846	1					
ANR	6701979	PrimaryExpression	"""cfile"""		6701846	0					
ANR	6701980	Argument	2		6701846	2					
ANR	6701981	PrimaryExpression	2		6701846	0					
ANR	6701982	CompoundStatement		27:42:689:689	6701846	1					
ANR	6701983	IfStatement	if ( ++ argn >= argc )		6701846	0					
ANR	6701984	Condition	++ argn >= argc	442:10:12016:12029	6701846	0	True				
ANR	6701985	RelationalExpression	++ argn >= argc		6701846	0		>=			
ANR	6701986	UnaryExpression	++ argn		6701846	0					
ANR	6701987	IncDec	++		6701846	0					
ANR	6701988	Identifier	argn		6701846	1					
ANR	6701989	Identifier	argc		6701846	1					
ANR	6701990	ExpressionStatement	usage ( )	442:26:12032:12039	6701846	1	True				
ANR	6701991	CallExpression	usage ( )		6701846	0					
ANR	6701992	Callee	usage		6701846	0					
ANR	6701993	Identifier	usage		6701846	0					
ANR	6701994	ArgumentList			6701846	1					
ANR	6701995	IfStatement	"if ( ( comment_file = fopen ( argv [ argn ] , ""r"" ) ) == NULL )"		6701846	1					
ANR	6701996	Condition	"( comment_file = fopen ( argv [ argn ] , ""r"" ) ) == NULL"	443:10:12051:12097	6701846	0	True				
ANR	6701997	EqualityExpression	"( comment_file = fopen ( argv [ argn ] , ""r"" ) ) == NULL"		6701846	0		==			
ANR	6701998	AssignmentExpression	"comment_file = fopen ( argv [ argn ] , ""r"" )"		6701846	0		=			
ANR	6701999	Identifier	comment_file		6701846	0					
ANR	6702000	CallExpression	"fopen ( argv [ argn ] , ""r"" )"		6701846	1					
ANR	6702001	Callee	fopen		6701846	0					
ANR	6702002	Identifier	fopen		6701846	0					
ANR	6702003	ArgumentList	argv [ argn ]		6701846	1					
ANR	6702004	Argument	argv [ argn ]		6701846	0					
ANR	6702005	ArrayIndexing	argv [ argn ]		6701846	0					
ANR	6702006	Identifier	argv		6701846	0					
ANR	6702007	Identifier	argn		6701846	1					
ANR	6702008	Argument	"""r"""		6701846	1					
ANR	6702009	PrimaryExpression	"""r"""		6701846	0					
ANR	6702010	Identifier	NULL		6701846	1					
ANR	6702011	CompoundStatement		29:59:785:785	6701846	1					
ANR	6702012	ExpressionStatement	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn ] )"	444:1:12103:12163	6701846	0	True				
ANR	6702013	CallExpression	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn ] )"		6701846	0					
ANR	6702014	Callee	fprintf		6701846	0					
ANR	6702015	Identifier	fprintf		6701846	0					
ANR	6702016	ArgumentList	stderr		6701846	1					
ANR	6702017	Argument	stderr		6701846	0					
ANR	6702018	Identifier	stderr		6701846	0					
ANR	6702019	Argument	"""%s: can't open %s\\n"""		6701846	1					
ANR	6702020	PrimaryExpression	"""%s: can't open %s\\n"""		6701846	0					
ANR	6702021	Argument	progname		6701846	2					
ANR	6702022	Identifier	progname		6701846	0					
ANR	6702023	Argument	argv [ argn ]		6701846	3					
ANR	6702024	ArrayIndexing	argv [ argn ]		6701846	0					
ANR	6702025	Identifier	argv		6701846	0					
ANR	6702026	Identifier	argn		6701846	1					
ANR	6702027	ExpressionStatement	exit ( EXIT_FAILURE )	445:1:12166:12184	6701846	1	True				
ANR	6702028	CallExpression	exit ( EXIT_FAILURE )		6701846	0					
ANR	6702029	Callee	exit		6701846	0					
ANR	6702030	Identifier	exit		6701846	0					
ANR	6702031	ArgumentList	EXIT_FAILURE		6701846	1					
ANR	6702032	Argument	EXIT_FAILURE		6701846	0					
ANR	6702033	Identifier	EXIT_FAILURE		6701846	0					
ANR	6702034	ElseStatement	else		6701846	0					
ANR	6702035	IfStatement	"if ( keymatch ( arg , ""comment"" , 1 ) )"		6701846	0					
ANR	6702036	Condition	"keymatch ( arg , ""comment"" , 1 )"	447:15:12209:12235	6701846	0	True				
ANR	6702037	CallExpression	"keymatch ( arg , ""comment"" , 1 )"		6701846	0					
ANR	6702038	Callee	keymatch		6701846	0					
ANR	6702039	Identifier	keymatch		6701846	0					
ANR	6702040	ArgumentList	arg		6701846	1					
ANR	6702041	Argument	arg		6701846	0					
ANR	6702042	Identifier	arg		6701846	0					
ANR	6702043	Argument	"""comment"""		6701846	1					
ANR	6702044	PrimaryExpression	"""comment"""		6701846	0					
ANR	6702045	Argument	1		6701846	2					
ANR	6702046	PrimaryExpression	1		6701846	0					
ANR	6702047	CompoundStatement		33:44:923:923	6701846	1					
ANR	6702048	IfStatement	if ( ++ argn >= argc )		6701846	0					
ANR	6702049	Condition	++ argn >= argc	448:10:12250:12263	6701846	0	True				
ANR	6702050	RelationalExpression	++ argn >= argc		6701846	0		>=			
ANR	6702051	UnaryExpression	++ argn		6701846	0					
ANR	6702052	IncDec	++		6701846	0					
ANR	6702053	Identifier	argn		6701846	1					
ANR	6702054	Identifier	argc		6701846	1					
ANR	6702055	ExpressionStatement	usage ( )	448:26:12266:12273	6701846	1	True				
ANR	6702056	CallExpression	usage ( )		6701846	0					
ANR	6702057	Callee	usage		6701846	0					
ANR	6702058	Identifier	usage		6701846	0					
ANR	6702059	ArgumentList			6701846	1					
ANR	6702060	ExpressionStatement	comment_arg = argv [ argn ]	449:6:12281:12305	6701846	1	True				
ANR	6702061	AssignmentExpression	comment_arg = argv [ argn ]		6701846	0		=			
ANR	6702062	Identifier	comment_arg		6701846	0					
ANR	6702063	ArrayIndexing	argv [ argn ]		6701846	1					
ANR	6702064	Identifier	argv		6701846	0					
ANR	6702065	Identifier	argn		6701846	1					
ANR	6702066	IfStatement	"if ( comment_arg [ 0 ] == '""' )"		6701846	2					
ANR	6702067	Condition	"comment_arg [ 0 ] == '""'"	453:10:12479:12499	6701846	0	True				
ANR	6702068	EqualityExpression	"comment_arg [ 0 ] == '""'"		6701846	0		==			
ANR	6702069	ArrayIndexing	comment_arg [ 0 ]		6701846	0					
ANR	6702070	Identifier	comment_arg		6701846	0					
ANR	6702071	PrimaryExpression	0		6701846	1					
ANR	6702072	PrimaryExpression	"'""'"		6701846	1					
ANR	6702073	CompoundStatement		39:33:1187:1187	6701846	1					
ANR	6702074	ExpressionStatement	comment_arg = ( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )	454:1:12505:12559	6701846	0	True				
ANR	6702075	AssignmentExpression	comment_arg = ( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )		6701846	0		=			
ANR	6702076	Identifier	comment_arg		6701846	0					
ANR	6702077	CastExpression	( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )		6701846	1					
ANR	6702078	CastTarget	char *		6701846	0					
ANR	6702079	CallExpression	malloc ( ( size_t ) MAX_COM_LENGTH )		6701846	1					
ANR	6702080	Callee	malloc		6701846	0					
ANR	6702081	Identifier	malloc		6701846	0					
ANR	6702082	ArgumentList	( size_t ) MAX_COM_LENGTH		6701846	1					
ANR	6702083	Argument	( size_t ) MAX_COM_LENGTH		6701846	0					
ANR	6702084	CastExpression	( size_t ) MAX_COM_LENGTH		6701846	0					
ANR	6702085	CastTarget	size_t		6701846	0					
ANR	6702086	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702087	IfStatement	if ( comment_arg == NULL )		6701846	1					
ANR	6702088	Condition	comment_arg == NULL	455:5:12566:12584	6701846	0	True				
ANR	6702089	EqualityExpression	comment_arg == NULL		6701846	0		==			
ANR	6702090	Identifier	comment_arg		6701846	0					
ANR	6702091	Identifier	NULL		6701846	1					
ANR	6702092	ExpressionStatement	"ERREXIT ( ""Insufficient memory"" )"	456:3:12590:12620	6701846	1	True				
ANR	6702093	CallExpression	"ERREXIT ( ""Insufficient memory"" )"		6701846	0					
ANR	6702094	Callee	ERREXIT		6701846	0					
ANR	6702095	Identifier	ERREXIT		6701846	0					
ANR	6702096	ArgumentList	"""Insufficient memory"""		6701846	1					
ANR	6702097	Argument	"""Insufficient memory"""		6701846	0					
ANR	6702098	PrimaryExpression	"""Insufficient memory"""		6701846	0					
ANR	6702099	IfStatement	if ( strlen ( argv [ argn ] + 1 ) >= ( size_t ) MAX_COM_LENGTH )		6701846	2					
ANR	6702100	Condition	strlen ( argv [ argn ] + 1 ) >= ( size_t ) MAX_COM_LENGTH	457:5:12627:12673	6701846	0	True				
ANR	6702101	RelationalExpression	strlen ( argv [ argn ] + 1 ) >= ( size_t ) MAX_COM_LENGTH		6701846	0		>=			
ANR	6702102	CallExpression	strlen ( argv [ argn ] + 1 )		6701846	0					
ANR	6702103	Callee	strlen		6701846	0					
ANR	6702104	Identifier	strlen		6701846	0					
ANR	6702105	ArgumentList	argv [ argn ] + 1		6701846	1					
ANR	6702106	Argument	argv [ argn ] + 1		6701846	0					
ANR	6702107	AdditiveExpression	argv [ argn ] + 1		6701846	0		+			
ANR	6702108	ArrayIndexing	argv [ argn ]		6701846	0					
ANR	6702109	Identifier	argv		6701846	0					
ANR	6702110	Identifier	argn		6701846	1					
ANR	6702111	PrimaryExpression	1		6701846	1					
ANR	6702112	CastExpression	( size_t ) MAX_COM_LENGTH		6701846	1					
ANR	6702113	CastTarget	size_t		6701846	0					
ANR	6702114	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702115	CompoundStatement		43:54:1361:1361	6701846	1					
ANR	6702116	ExpressionStatement	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	458:3:12681:12773	6701846	0	True				
ANR	6702117	CallExpression	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		6701846	0					
ANR	6702118	Callee	fprintf		6701846	0					
ANR	6702119	Identifier	fprintf		6701846	0					
ANR	6702120	ArgumentList	stderr		6701846	1					
ANR	6702121	Argument	stderr		6701846	0					
ANR	6702122	Identifier	stderr		6701846	0					
ANR	6702123	Argument	"""Comment text may not exceed %u bytes\\n"""		6701846	1					
ANR	6702124	PrimaryExpression	"""Comment text may not exceed %u bytes\\n"""		6701846	0					
ANR	6702125	Argument	( unsigned int ) MAX_COM_LENGTH		6701846	2					
ANR	6702126	CastExpression	( unsigned int ) MAX_COM_LENGTH		6701846	0					
ANR	6702127	CastTarget	unsigned int		6701846	0					
ANR	6702128	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702129	ExpressionStatement	exit ( EXIT_FAILURE )	460:3:12778:12796	6701846	1	True				
ANR	6702130	CallExpression	exit ( EXIT_FAILURE )		6701846	0					
ANR	6702131	Callee	exit		6701846	0					
ANR	6702132	Identifier	exit		6701846	0					
ANR	6702133	ArgumentList	EXIT_FAILURE		6701846	1					
ANR	6702134	Argument	EXIT_FAILURE		6701846	0					
ANR	6702135	Identifier	EXIT_FAILURE		6701846	0					
ANR	6702136	ExpressionStatement	"strcpy ( comment_arg , argv [ argn ] + 1 )"	462:1:12802:12835	6701846	3	True				
ANR	6702137	CallExpression	"strcpy ( comment_arg , argv [ argn ] + 1 )"		6701846	0					
ANR	6702138	Callee	strcpy		6701846	0					
ANR	6702139	Identifier	strcpy		6701846	0					
ANR	6702140	ArgumentList	comment_arg		6701846	1					
ANR	6702141	Argument	comment_arg		6701846	0					
ANR	6702142	Identifier	comment_arg		6701846	0					
ANR	6702143	Argument	argv [ argn ] + 1		6701846	1					
ANR	6702144	AdditiveExpression	argv [ argn ] + 1		6701846	0		+			
ANR	6702145	ArrayIndexing	argv [ argn ]		6701846	0					
ANR	6702146	Identifier	argv		6701846	0					
ANR	6702147	Identifier	argn		6701846	1					
ANR	6702148	PrimaryExpression	1		6701846	1					
ANR	6702149	ForStatement	for ( ; ; )		6701846	4					
ANR	6702150	CompoundStatement		49:10:1532:1532	6701846	0					
ANR	6702151	ExpressionStatement	comment_length = ( unsigned int ) strlen ( comment_arg )	464:3:12852:12903	6701846	0	True				
ANR	6702152	AssignmentExpression	comment_length = ( unsigned int ) strlen ( comment_arg )		6701846	0		=			
ANR	6702153	Identifier	comment_length		6701846	0					
ANR	6702154	CastExpression	( unsigned int ) strlen ( comment_arg )		6701846	1					
ANR	6702155	CastTarget	unsigned int		6701846	0					
ANR	6702156	CallExpression	strlen ( comment_arg )		6701846	1					
ANR	6702157	Callee	strlen		6701846	0					
ANR	6702158	Identifier	strlen		6701846	0					
ANR	6702159	ArgumentList	comment_arg		6701846	1					
ANR	6702160	Argument	comment_arg		6701846	0					
ANR	6702161	Identifier	comment_arg		6701846	0					
ANR	6702162	IfStatement	"if ( comment_length > 0 && comment_arg [ comment_length - 1 ] == '""' )"		6701846	1					
ANR	6702163	Condition	"comment_length > 0 && comment_arg [ comment_length - 1 ] == '""'"	465:7:12912:12969	6701846	0	True				
ANR	6702164	AndExpression	"comment_length > 0 && comment_arg [ comment_length - 1 ] == '""'"		6701846	0		&&			
ANR	6702165	RelationalExpression	comment_length > 0		6701846	0		>			
ANR	6702166	Identifier	comment_length		6701846	0					
ANR	6702167	PrimaryExpression	0		6701846	1					
ANR	6702168	EqualityExpression	"comment_arg [ comment_length - 1 ] == '""'"		6701846	1		==			
ANR	6702169	ArrayIndexing	comment_arg [ comment_length - 1 ]		6701846	0					
ANR	6702170	Identifier	comment_arg		6701846	0					
ANR	6702171	AdditiveExpression	comment_length - 1		6701846	1		-			
ANR	6702172	Identifier	comment_length		6701846	0					
ANR	6702173	PrimaryExpression	1		6701846	1					
ANR	6702174	PrimaryExpression	"'""'"		6701846	1					
ANR	6702175	CompoundStatement		51:67:1657:1657	6701846	1					
ANR	6702176	ExpressionStatement	comment_arg [ comment_length - 1 ] = '\\0'	466:5:12979:13015	6701846	0	True				
ANR	6702177	AssignmentExpression	comment_arg [ comment_length - 1 ] = '\\0'		6701846	0		=			
ANR	6702178	ArrayIndexing	comment_arg [ comment_length - 1 ]		6701846	0					
ANR	6702179	Identifier	comment_arg		6701846	0					
ANR	6702180	AdditiveExpression	comment_length - 1		6701846	1		-			
ANR	6702181	Identifier	comment_length		6701846	0					
ANR	6702182	PrimaryExpression	1		6701846	1					
ANR	6702183	PrimaryExpression	'\\0'		6701846	1					
ANR	6702184	BreakStatement	break ;	467:5:13050:13055	6701846	1	True				
ANR	6702185	IfStatement	if ( ++ argn >= argc )		6701846	2					
ANR	6702186	Condition	++ argn >= argc	469:7:13069:13082	6701846	0	True				
ANR	6702187	RelationalExpression	++ argn >= argc		6701846	0		>=			
ANR	6702188	UnaryExpression	++ argn		6701846	0					
ANR	6702189	IncDec	++		6701846	0					
ANR	6702190	Identifier	argn		6701846	1					
ANR	6702191	Identifier	argc		6701846	1					
ANR	6702192	ExpressionStatement	"ERREXIT ( ""Missing ending quote mark"" )"	470:5:13090:13126	6701846	1	True				
ANR	6702193	CallExpression	"ERREXIT ( ""Missing ending quote mark"" )"		6701846	0					
ANR	6702194	Callee	ERREXIT		6701846	0					
ANR	6702195	Identifier	ERREXIT		6701846	0					
ANR	6702196	ArgumentList	"""Missing ending quote mark"""		6701846	1					
ANR	6702197	Argument	"""Missing ending quote mark"""		6701846	0					
ANR	6702198	PrimaryExpression	"""Missing ending quote mark"""		6701846	0					
ANR	6702199	IfStatement	if ( strlen ( comment_arg ) + 1 + strlen ( argv [ argn ] ) >= ( size_t ) MAX_COM_LENGTH )		6701846	3					
ANR	6702200	Condition	strlen ( comment_arg ) + 1 + strlen ( argv [ argn ] ) >= ( size_t ) MAX_COM_LENGTH	471:7:13135:13212	6701846	0	True				
ANR	6702201	RelationalExpression	strlen ( comment_arg ) + 1 + strlen ( argv [ argn ] ) >= ( size_t ) MAX_COM_LENGTH		6701846	0		>=			
ANR	6702202	AdditiveExpression	strlen ( comment_arg ) + 1 + strlen ( argv [ argn ] )		6701846	0		+			
ANR	6702203	CallExpression	strlen ( comment_arg )		6701846	0					
ANR	6702204	Callee	strlen		6701846	0					
ANR	6702205	Identifier	strlen		6701846	0					
ANR	6702206	ArgumentList	comment_arg		6701846	1					
ANR	6702207	Argument	comment_arg		6701846	0					
ANR	6702208	Identifier	comment_arg		6701846	0					
ANR	6702209	AdditiveExpression	1 + strlen ( argv [ argn ] )		6701846	1		+			
ANR	6702210	PrimaryExpression	1		6701846	0					
ANR	6702211	CallExpression	strlen ( argv [ argn ] )		6701846	1					
ANR	6702212	Callee	strlen		6701846	0					
ANR	6702213	Identifier	strlen		6701846	0					
ANR	6702214	ArgumentList	argv [ argn ]		6701846	1					
ANR	6702215	Argument	argv [ argn ]		6701846	0					
ANR	6702216	ArrayIndexing	argv [ argn ]		6701846	0					
ANR	6702217	Identifier	argv		6701846	0					
ANR	6702218	Identifier	argn		6701846	1					
ANR	6702219	CastExpression	( size_t ) MAX_COM_LENGTH		6701846	1					
ANR	6702220	CastTarget	size_t		6701846	0					
ANR	6702221	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702222	CompoundStatement		58:32:1900:1900	6701846	1					
ANR	6702223	ExpressionStatement	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	473:5:13222:13316	6701846	0	True				
ANR	6702224	CallExpression	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		6701846	0					
ANR	6702225	Callee	fprintf		6701846	0					
ANR	6702226	Identifier	fprintf		6701846	0					
ANR	6702227	ArgumentList	stderr		6701846	1					
ANR	6702228	Argument	stderr		6701846	0					
ANR	6702229	Identifier	stderr		6701846	0					
ANR	6702230	Argument	"""Comment text may not exceed %u bytes\\n"""		6701846	1					
ANR	6702231	PrimaryExpression	"""Comment text may not exceed %u bytes\\n"""		6701846	0					
ANR	6702232	Argument	( unsigned int ) MAX_COM_LENGTH		6701846	2					
ANR	6702233	CastExpression	( unsigned int ) MAX_COM_LENGTH		6701846	0					
ANR	6702234	CastTarget	unsigned int		6701846	0					
ANR	6702235	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702236	ExpressionStatement	exit ( EXIT_FAILURE )	475:5:13323:13341	6701846	1	True				
ANR	6702237	CallExpression	exit ( EXIT_FAILURE )		6701846	0					
ANR	6702238	Callee	exit		6701846	0					
ANR	6702239	Identifier	exit		6701846	0					
ANR	6702240	ArgumentList	EXIT_FAILURE		6701846	1					
ANR	6702241	Argument	EXIT_FAILURE		6701846	0					
ANR	6702242	Identifier	EXIT_FAILURE		6701846	0					
ANR	6702243	ExpressionStatement	"strcat ( comment_arg , "" "" )"	477:3:13351:13375	6701846	4	True				
ANR	6702244	CallExpression	"strcat ( comment_arg , "" "" )"		6701846	0					
ANR	6702245	Callee	strcat		6701846	0					
ANR	6702246	Identifier	strcat		6701846	0					
ANR	6702247	ArgumentList	comment_arg		6701846	1					
ANR	6702248	Argument	comment_arg		6701846	0					
ANR	6702249	Identifier	comment_arg		6701846	0					
ANR	6702250	Argument	""" """		6701846	1					
ANR	6702251	PrimaryExpression	""" """		6701846	0					
ANR	6702252	ExpressionStatement	"strcat ( comment_arg , argv [ argn ] )"	478:3:13380:13411	6701846	5	True				
ANR	6702253	CallExpression	"strcat ( comment_arg , argv [ argn ] )"		6701846	0					
ANR	6702254	Callee	strcat		6701846	0					
ANR	6702255	Identifier	strcat		6701846	0					
ANR	6702256	ArgumentList	comment_arg		6701846	1					
ANR	6702257	Argument	comment_arg		6701846	0					
ANR	6702258	Identifier	comment_arg		6701846	0					
ANR	6702259	Argument	argv [ argn ]		6701846	1					
ANR	6702260	ArrayIndexing	argv [ argn ]		6701846	0					
ANR	6702261	Identifier	argv		6701846	0					
ANR	6702262	Identifier	argn		6701846	1					
ANR	6702263	ElseStatement	else		6701846	0					
ANR	6702264	IfStatement	if ( strlen ( comment_arg ) >= ( size_t ) MAX_COM_LENGTH )		6701846	0					
ANR	6702265	Condition	strlen ( comment_arg ) >= ( size_t ) MAX_COM_LENGTH	480:17:13433:13478	6701846	0	True				
ANR	6702266	RelationalExpression	strlen ( comment_arg ) >= ( size_t ) MAX_COM_LENGTH		6701846	0		>=			
ANR	6702267	CallExpression	strlen ( comment_arg )		6701846	0					
ANR	6702268	Callee	strlen		6701846	0					
ANR	6702269	Identifier	strlen		6701846	0					
ANR	6702270	ArgumentList	comment_arg		6701846	1					
ANR	6702271	Argument	comment_arg		6701846	0					
ANR	6702272	Identifier	comment_arg		6701846	0					
ANR	6702273	CastExpression	( size_t ) MAX_COM_LENGTH		6701846	1					
ANR	6702274	CastTarget	size_t		6701846	0					
ANR	6702275	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702276	CompoundStatement		66:65:2166:2166	6701846	1					
ANR	6702277	ExpressionStatement	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	481:1:13484:13574	6701846	0	True				
ANR	6702278	CallExpression	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		6701846	0					
ANR	6702279	Callee	fprintf		6701846	0					
ANR	6702280	Identifier	fprintf		6701846	0					
ANR	6702281	ArgumentList	stderr		6701846	1					
ANR	6702282	Argument	stderr		6701846	0					
ANR	6702283	Identifier	stderr		6701846	0					
ANR	6702284	Argument	"""Comment text may not exceed %u bytes\\n"""		6701846	1					
ANR	6702285	PrimaryExpression	"""Comment text may not exceed %u bytes\\n"""		6701846	0					
ANR	6702286	Argument	( unsigned int ) MAX_COM_LENGTH		6701846	2					
ANR	6702287	CastExpression	( unsigned int ) MAX_COM_LENGTH		6701846	0					
ANR	6702288	CastTarget	unsigned int		6701846	0					
ANR	6702289	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702290	ExpressionStatement	exit ( EXIT_FAILURE )	483:1:13577:13595	6701846	1	True				
ANR	6702291	CallExpression	exit ( EXIT_FAILURE )		6701846	0					
ANR	6702292	Callee	exit		6701846	0					
ANR	6702293	Identifier	exit		6701846	0					
ANR	6702294	ArgumentList	EXIT_FAILURE		6701846	1					
ANR	6702295	Argument	EXIT_FAILURE		6701846	0					
ANR	6702296	Identifier	EXIT_FAILURE		6701846	0					
ANR	6702297	ExpressionStatement	comment_length = ( unsigned int ) strlen ( comment_arg )	485:6:13611:13662	6701846	3	True				
ANR	6702298	AssignmentExpression	comment_length = ( unsigned int ) strlen ( comment_arg )		6701846	0		=			
ANR	6702299	Identifier	comment_length		6701846	0					
ANR	6702300	CastExpression	( unsigned int ) strlen ( comment_arg )		6701846	1					
ANR	6702301	CastTarget	unsigned int		6701846	0					
ANR	6702302	CallExpression	strlen ( comment_arg )		6701846	1					
ANR	6702303	Callee	strlen		6701846	0					
ANR	6702304	Identifier	strlen		6701846	0					
ANR	6702305	ArgumentList	comment_arg		6701846	1					
ANR	6702306	Argument	comment_arg		6701846	0					
ANR	6702307	Identifier	comment_arg		6701846	0					
ANR	6702308	ElseStatement	else		6701846	0					
ANR	6702309	ExpressionStatement	usage ( )	487:6:13681:13688	6701846	0	True				
ANR	6702310	CallExpression	usage ( )		6701846	0					
ANR	6702311	Callee	usage		6701846	0					
ANR	6702312	Identifier	usage		6701846	0					
ANR	6702313	ArgumentList			6701846	1					
ANR	6702314	IfStatement	if ( comment_arg != NULL && comment_file != NULL )		6701846	11					
ANR	6702315	Condition	comment_arg != NULL && comment_file != NULL	491:6:13746:13788	6701846	0	True				
ANR	6702316	AndExpression	comment_arg != NULL && comment_file != NULL		6701846	0		&&			
ANR	6702317	EqualityExpression	comment_arg != NULL		6701846	0		!=			
ANR	6702318	Identifier	comment_arg		6701846	0					
ANR	6702319	Identifier	NULL		6701846	1					
ANR	6702320	EqualityExpression	comment_file != NULL		6701846	1		!=			
ANR	6702321	Identifier	comment_file		6701846	0					
ANR	6702322	Identifier	NULL		6701846	1					
ANR	6702323	ExpressionStatement	usage ( )	492:4:13795:13802	6701846	1	True				
ANR	6702324	CallExpression	usage ( )		6701846	0					
ANR	6702325	Callee	usage		6701846	0					
ANR	6702326	Identifier	usage		6701846	0					
ANR	6702327	ArgumentList			6701846	1					
ANR	6702328	IfStatement	if ( comment_arg == NULL && comment_file == NULL && argn >= argc )		6701846	12					
ANR	6702329	Condition	comment_arg == NULL && comment_file == NULL && argn >= argc	496:6:13961:14019	6701846	0	True				
ANR	6702330	AndExpression	comment_arg == NULL && comment_file == NULL && argn >= argc		6701846	0		&&			
ANR	6702331	EqualityExpression	comment_arg == NULL		6701846	0		==			
ANR	6702332	Identifier	comment_arg		6701846	0					
ANR	6702333	Identifier	NULL		6701846	1					
ANR	6702334	AndExpression	comment_file == NULL && argn >= argc		6701846	1		&&			
ANR	6702335	EqualityExpression	comment_file == NULL		6701846	0		==			
ANR	6702336	Identifier	comment_file		6701846	0					
ANR	6702337	Identifier	NULL		6701846	1					
ANR	6702338	RelationalExpression	argn >= argc		6701846	1		>=			
ANR	6702339	Identifier	argn		6701846	0					
ANR	6702340	Identifier	argc		6701846	1					
ANR	6702341	ExpressionStatement	usage ( )	497:4:14026:14033	6701846	1	True				
ANR	6702342	CallExpression	usage ( )		6701846	0					
ANR	6702343	Callee	usage		6701846	0					
ANR	6702344	Identifier	usage		6701846	0					
ANR	6702345	ArgumentList			6701846	1					
ANR	6702346	IfStatement	if ( argn < argc )		6701846	13					
ANR	6702347	Condition	argn < argc	500:6:14071:14081	6701846	0	True				
ANR	6702348	RelationalExpression	argn < argc		6701846	0		<			
ANR	6702349	Identifier	argn		6701846	0					
ANR	6702350	Identifier	argc		6701846	1					
ANR	6702351	CompoundStatement		86:19:2769:2769	6701846	1					
ANR	6702352	IfStatement	"if ( ( infile = fopen ( argv [ argn ] , READ_BINARY ) ) == NULL )"		6701846	0					
ANR	6702353	Condition	"( infile = fopen ( argv [ argn ] , READ_BINARY ) ) == NULL"	501:8:14094:14142	6701846	0	True				
ANR	6702354	EqualityExpression	"( infile = fopen ( argv [ argn ] , READ_BINARY ) ) == NULL"		6701846	0		==			
ANR	6702355	AssignmentExpression	"infile = fopen ( argv [ argn ] , READ_BINARY )"		6701846	0		=			
ANR	6702356	Identifier	infile		6701846	0					
ANR	6702357	CallExpression	"fopen ( argv [ argn ] , READ_BINARY )"		6701846	1					
ANR	6702358	Callee	fopen		6701846	0					
ANR	6702359	Identifier	fopen		6701846	0					
ANR	6702360	ArgumentList	argv [ argn ]		6701846	1					
ANR	6702361	Argument	argv [ argn ]		6701846	0					
ANR	6702362	ArrayIndexing	argv [ argn ]		6701846	0					
ANR	6702363	Identifier	argv		6701846	0					
ANR	6702364	Identifier	argn		6701846	1					
ANR	6702365	Argument	READ_BINARY		6701846	1					
ANR	6702366	Identifier	READ_BINARY		6701846	0					
ANR	6702367	Identifier	NULL		6701846	1					
ANR	6702368	CompoundStatement		87:59:2830:2830	6701846	1					
ANR	6702369	ExpressionStatement	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn ] )"	502:6:14153:14213	6701846	0	True				
ANR	6702370	CallExpression	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn ] )"		6701846	0					
ANR	6702371	Callee	fprintf		6701846	0					
ANR	6702372	Identifier	fprintf		6701846	0					
ANR	6702373	ArgumentList	stderr		6701846	1					
ANR	6702374	Argument	stderr		6701846	0					
ANR	6702375	Identifier	stderr		6701846	0					
ANR	6702376	Argument	"""%s: can't open %s\\n"""		6701846	1					
ANR	6702377	PrimaryExpression	"""%s: can't open %s\\n"""		6701846	0					
ANR	6702378	Argument	progname		6701846	2					
ANR	6702379	Identifier	progname		6701846	0					
ANR	6702380	Argument	argv [ argn ]		6701846	3					
ANR	6702381	ArrayIndexing	argv [ argn ]		6701846	0					
ANR	6702382	Identifier	argv		6701846	0					
ANR	6702383	Identifier	argn		6701846	1					
ANR	6702384	ExpressionStatement	exit ( EXIT_FAILURE )	503:6:14221:14239	6701846	1	True				
ANR	6702385	CallExpression	exit ( EXIT_FAILURE )		6701846	0					
ANR	6702386	Callee	exit		6701846	0					
ANR	6702387	Identifier	exit		6701846	0					
ANR	6702388	ArgumentList	EXIT_FAILURE		6701846	1					
ANR	6702389	Argument	EXIT_FAILURE		6701846	0					
ANR	6702390	Identifier	EXIT_FAILURE		6701846	0					
ANR	6702391	ElseStatement	else		6701846	0					
ANR	6702392	CompoundStatement		91:9:2941:2941	6701846	0					
ANR	6702393	ExpressionStatement	"setmode ( fileno ( stdin ) , O_BINARY )"	508:4:14350:14382	6701846	0	True				
ANR	6702394	CallExpression	"setmode ( fileno ( stdin ) , O_BINARY )"		6701846	0					
ANR	6702395	Callee	setmode		6701846	0					
ANR	6702396	Identifier	setmode		6701846	0					
ANR	6702397	ArgumentList	fileno ( stdin )		6701846	1					
ANR	6702398	Argument	fileno ( stdin )		6701846	0					
ANR	6702399	CallExpression	fileno ( stdin )		6701846	0					
ANR	6702400	Callee	fileno		6701846	0					
ANR	6702401	Identifier	fileno		6701846	0					
ANR	6702402	ArgumentList	stdin		6701846	1					
ANR	6702403	Argument	stdin		6701846	0					
ANR	6702404	Identifier	stdin		6701846	0					
ANR	6702405	Argument	O_BINARY		6701846	1					
ANR	6702406	Identifier	O_BINARY		6701846	0					
ANR	6702407	IfStatement	"if ( ( infile = fdopen ( fileno ( stdin ) , READ_BINARY ) ) == NULL )"		6701846	1					
ANR	6702408	Condition	"( infile = fdopen ( fileno ( stdin ) , READ_BINARY ) ) == NULL"	511:8:14456:14508	6701846	0	True				
ANR	6702409	EqualityExpression	"( infile = fdopen ( fileno ( stdin ) , READ_BINARY ) ) == NULL"		6701846	0		==			
ANR	6702410	AssignmentExpression	"infile = fdopen ( fileno ( stdin ) , READ_BINARY )"		6701846	0		=			
ANR	6702411	Identifier	infile		6701846	0					
ANR	6702412	CallExpression	"fdopen ( fileno ( stdin ) , READ_BINARY )"		6701846	1					
ANR	6702413	Callee	fdopen		6701846	0					
ANR	6702414	Identifier	fdopen		6701846	0					
ANR	6702415	ArgumentList	fileno ( stdin )		6701846	1					
ANR	6702416	Argument	fileno ( stdin )		6701846	0					
ANR	6702417	CallExpression	fileno ( stdin )		6701846	0					
ANR	6702418	Callee	fileno		6701846	0					
ANR	6702419	Identifier	fileno		6701846	0					
ANR	6702420	ArgumentList	stdin		6701846	1					
ANR	6702421	Argument	stdin		6701846	0					
ANR	6702422	Identifier	stdin		6701846	0					
ANR	6702423	Argument	READ_BINARY		6701846	1					
ANR	6702424	Identifier	READ_BINARY		6701846	0					
ANR	6702425	Identifier	NULL		6701846	1					
ANR	6702426	CompoundStatement		97:63:3196:3196	6701846	1					
ANR	6702427	ExpressionStatement	"fprintf ( stderr , ""%s: can't open stdin\\n"" , progname )"	512:6:14519:14570	6701846	0	True				
ANR	6702428	CallExpression	"fprintf ( stderr , ""%s: can't open stdin\\n"" , progname )"		6701846	0					
ANR	6702429	Callee	fprintf		6701846	0					
ANR	6702430	Identifier	fprintf		6701846	0					
ANR	6702431	ArgumentList	stderr		6701846	1					
ANR	6702432	Argument	stderr		6701846	0					
ANR	6702433	Identifier	stderr		6701846	0					
ANR	6702434	Argument	"""%s: can't open stdin\\n"""		6701846	1					
ANR	6702435	PrimaryExpression	"""%s: can't open stdin\\n"""		6701846	0					
ANR	6702436	Argument	progname		6701846	2					
ANR	6702437	Identifier	progname		6701846	0					
ANR	6702438	ExpressionStatement	exit ( EXIT_FAILURE )	513:6:14578:14596	6701846	1	True				
ANR	6702439	CallExpression	exit ( EXIT_FAILURE )		6701846	0					
ANR	6702440	Callee	exit		6701846	0					
ANR	6702441	Identifier	exit		6701846	0					
ANR	6702442	ArgumentList	EXIT_FAILURE		6701846	1					
ANR	6702443	Argument	EXIT_FAILURE		6701846	0					
ANR	6702444	Identifier	EXIT_FAILURE		6701846	0					
ANR	6702445	IfStatement	if ( argn != argc - 2 )		6701846	14					
ANR	6702446	Condition	argn != argc - 2	523:6:14750:14763	6701846	0	True				
ANR	6702447	EqualityExpression	argn != argc - 2		6701846	0		!=			
ANR	6702448	Identifier	argn		6701846	0					
ANR	6702449	AdditiveExpression	argc - 2		6701846	1		-			
ANR	6702450	Identifier	argc		6701846	0					
ANR	6702451	PrimaryExpression	2		6701846	1					
ANR	6702452	CompoundStatement		109:22:3451:3451	6701846	1					
ANR	6702453	ExpressionStatement	"fprintf ( stderr , ""%s: must name one input and one output file\\n"" , progname )"	524:4:14772:14851	6701846	0	True				
ANR	6702454	CallExpression	"fprintf ( stderr , ""%s: must name one input and one output file\\n"" , progname )"		6701846	0					
ANR	6702455	Callee	fprintf		6701846	0					
ANR	6702456	Identifier	fprintf		6701846	0					
ANR	6702457	ArgumentList	stderr		6701846	1					
ANR	6702458	Argument	stderr		6701846	0					
ANR	6702459	Identifier	stderr		6701846	0					
ANR	6702460	Argument	"""%s: must name one input and one output file\\n"""		6701846	1					
ANR	6702461	PrimaryExpression	"""%s: must name one input and one output file\\n"""		6701846	0					
ANR	6702462	Argument	progname		6701846	2					
ANR	6702463	Identifier	progname		6701846	0					
ANR	6702464	ExpressionStatement	usage ( )	526:4:14857:14864	6701846	1	True				
ANR	6702465	CallExpression	usage ( )		6701846	0					
ANR	6702466	Callee	usage		6701846	0					
ANR	6702467	Identifier	usage		6701846	0					
ANR	6702468	ArgumentList			6701846	1					
ANR	6702469	IfStatement	"if ( ( outfile = fopen ( argv [ argn + 1 ] , WRITE_BINARY ) ) == NULL )"		6701846	15					
ANR	6702470	Condition	"( outfile = fopen ( argv [ argn + 1 ] , WRITE_BINARY ) ) == NULL"	528:6:14876:14928	6701846	0	True				
ANR	6702471	EqualityExpression	"( outfile = fopen ( argv [ argn + 1 ] , WRITE_BINARY ) ) == NULL"		6701846	0		==			
ANR	6702472	AssignmentExpression	"outfile = fopen ( argv [ argn + 1 ] , WRITE_BINARY )"		6701846	0		=			
ANR	6702473	Identifier	outfile		6701846	0					
ANR	6702474	CallExpression	"fopen ( argv [ argn + 1 ] , WRITE_BINARY )"		6701846	1					
ANR	6702475	Callee	fopen		6701846	0					
ANR	6702476	Identifier	fopen		6701846	0					
ANR	6702477	ArgumentList	argv [ argn + 1 ]		6701846	1					
ANR	6702478	Argument	argv [ argn + 1 ]		6701846	0					
ANR	6702479	ArrayIndexing	argv [ argn + 1 ]		6701846	0					
ANR	6702480	Identifier	argv		6701846	0					
ANR	6702481	AdditiveExpression	argn + 1		6701846	1		+			
ANR	6702482	Identifier	argn		6701846	0					
ANR	6702483	PrimaryExpression	1		6701846	1					
ANR	6702484	Argument	WRITE_BINARY		6701846	1					
ANR	6702485	Identifier	WRITE_BINARY		6701846	0					
ANR	6702486	Identifier	NULL		6701846	1					
ANR	6702487	CompoundStatement		114:61:3616:3616	6701846	1					
ANR	6702488	ExpressionStatement	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn + 1 ] )"	529:4:14937:14999	6701846	0	True				
ANR	6702489	CallExpression	"fprintf ( stderr , ""%s: can't open %s\\n"" , progname , argv [ argn + 1 ] )"		6701846	0					
ANR	6702490	Callee	fprintf		6701846	0					
ANR	6702491	Identifier	fprintf		6701846	0					
ANR	6702492	ArgumentList	stderr		6701846	1					
ANR	6702493	Argument	stderr		6701846	0					
ANR	6702494	Identifier	stderr		6701846	0					
ANR	6702495	Argument	"""%s: can't open %s\\n"""		6701846	1					
ANR	6702496	PrimaryExpression	"""%s: can't open %s\\n"""		6701846	0					
ANR	6702497	Argument	progname		6701846	2					
ANR	6702498	Identifier	progname		6701846	0					
ANR	6702499	Argument	argv [ argn + 1 ]		6701846	3					
ANR	6702500	ArrayIndexing	argv [ argn + 1 ]		6701846	0					
ANR	6702501	Identifier	argv		6701846	0					
ANR	6702502	AdditiveExpression	argn + 1		6701846	1		+			
ANR	6702503	Identifier	argn		6701846	0					
ANR	6702504	PrimaryExpression	1		6701846	1					
ANR	6702505	ExpressionStatement	exit ( EXIT_FAILURE )	530:4:15005:15023	6701846	1	True				
ANR	6702506	CallExpression	exit ( EXIT_FAILURE )		6701846	0					
ANR	6702507	Callee	exit		6701846	0					
ANR	6702508	Identifier	exit		6701846	0					
ANR	6702509	ArgumentList	EXIT_FAILURE		6701846	1					
ANR	6702510	Argument	EXIT_FAILURE		6701846	0					
ANR	6702511	Identifier	EXIT_FAILURE		6701846	0					
ANR	6702512	IfStatement	if ( comment_arg == NULL )		6701846	16					
ANR	6702513	Condition	comment_arg == NULL	553:6:15669:15687	6701846	0	True				
ANR	6702514	EqualityExpression	comment_arg == NULL		6701846	0		==			
ANR	6702515	Identifier	comment_arg		6701846	0					
ANR	6702516	Identifier	NULL		6701846	1					
ANR	6702517	CompoundStatement		141:4:4402:4407	6701846	1					
ANR	6702518	IdentifierDeclStatement	FILE * src_file ;	554:4:15696:15711	6701846	0	True				
ANR	6702519	IdentifierDecl	* src_file		6701846	0					
ANR	6702520	IdentifierDeclType	FILE *		6701846	0					
ANR	6702521	Identifier	src_file		6701846	1					
ANR	6702522	IdentifierDeclStatement	int c ;	555:4:15717:15722	6701846	1	True				
ANR	6702523	IdentifierDecl	c		6701846	0					
ANR	6702524	IdentifierDeclType	int		6701846	0					
ANR	6702525	Identifier	c		6701846	1					
ANR	6702526	ExpressionStatement	comment_arg = ( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )	557:4:15729:15783	6701846	2	True				
ANR	6702527	AssignmentExpression	comment_arg = ( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )		6701846	0		=			
ANR	6702528	Identifier	comment_arg		6701846	0					
ANR	6702529	CastExpression	( char * ) malloc ( ( size_t ) MAX_COM_LENGTH )		6701846	1					
ANR	6702530	CastTarget	char *		6701846	0					
ANR	6702531	CallExpression	malloc ( ( size_t ) MAX_COM_LENGTH )		6701846	1					
ANR	6702532	Callee	malloc		6701846	0					
ANR	6702533	Identifier	malloc		6701846	0					
ANR	6702534	ArgumentList	( size_t ) MAX_COM_LENGTH		6701846	1					
ANR	6702535	Argument	( size_t ) MAX_COM_LENGTH		6701846	0					
ANR	6702536	CastExpression	( size_t ) MAX_COM_LENGTH		6701846	0					
ANR	6702537	CastTarget	size_t		6701846	0					
ANR	6702538	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702539	IfStatement	if ( comment_arg == NULL )		6701846	3					
ANR	6702540	Condition	comment_arg == NULL	558:8:15793:15811	6701846	0	True				
ANR	6702541	EqualityExpression	comment_arg == NULL		6701846	0		==			
ANR	6702542	Identifier	comment_arg		6701846	0					
ANR	6702543	Identifier	NULL		6701846	1					
ANR	6702544	ExpressionStatement	"ERREXIT ( ""Insufficient memory"" )"	559:6:15820:15850	6701846	1	True				
ANR	6702545	CallExpression	"ERREXIT ( ""Insufficient memory"" )"		6701846	0					
ANR	6702546	Callee	ERREXIT		6701846	0					
ANR	6702547	Identifier	ERREXIT		6701846	0					
ANR	6702548	ArgumentList	"""Insufficient memory"""		6701846	1					
ANR	6702549	Argument	"""Insufficient memory"""		6701846	0					
ANR	6702550	PrimaryExpression	"""Insufficient memory"""		6701846	0					
ANR	6702551	ExpressionStatement	comment_length = 0	560:4:15856:15874	6701846	4	True				
ANR	6702552	AssignmentExpression	comment_length = 0		6701846	0		=			
ANR	6702553	Identifier	comment_length		6701846	0					
ANR	6702554	PrimaryExpression	0		6701846	1					
ANR	6702555	ExpressionStatement	src_file = ( comment_file != NULL ? comment_file : stdin )	561:4:15880:15936	6701846	5	True				
ANR	6702556	AssignmentExpression	src_file = ( comment_file != NULL ? comment_file : stdin )		6701846	0		=			
ANR	6702557	Identifier	src_file		6701846	0					
ANR	6702558	ConditionalExpression	comment_file != NULL ? comment_file : stdin		6701846	1					
ANR	6702559	Condition	comment_file != NULL		6701846	0					
ANR	6702560	EqualityExpression	comment_file != NULL		6701846	0		!=			
ANR	6702561	Identifier	comment_file		6701846	0					
ANR	6702562	Identifier	NULL		6701846	1					
ANR	6702563	Identifier	comment_file		6701846	1					
ANR	6702564	Identifier	stdin		6701846	2					
ANR	6702565	WhileStatement	while ( ( c = getc ( src_file ) ) != EOF )		6701846	6					
ANR	6702566	Condition	( c = getc ( src_file ) ) != EOF	562:11:15949:15975	6701846	0	True				
ANR	6702567	EqualityExpression	( c = getc ( src_file ) ) != EOF		6701846	0		!=			
ANR	6702568	AssignmentExpression	c = getc ( src_file )		6701846	0		=			
ANR	6702569	Identifier	c		6701846	0					
ANR	6702570	CallExpression	getc ( src_file )		6701846	1					
ANR	6702571	Callee	getc		6701846	0					
ANR	6702572	Identifier	getc		6701846	0					
ANR	6702573	ArgumentList	src_file		6701846	1					
ANR	6702574	Argument	src_file		6701846	0					
ANR	6702575	Identifier	src_file		6701846	0					
ANR	6702576	Identifier	EOF		6701846	1					
ANR	6702577	CompoundStatement		148:40:4663:4663	6701846	1					
ANR	6702578	IfStatement	if ( comment_length >= ( unsigned int ) MAX_COM_LENGTH )		6701846	0					
ANR	6702579	Condition	comment_length >= ( unsigned int ) MAX_COM_LENGTH	563:10:15990:16036	6701846	0	True				
ANR	6702580	RelationalExpression	comment_length >= ( unsigned int ) MAX_COM_LENGTH		6701846	0		>=			
ANR	6702581	Identifier	comment_length		6701846	0					
ANR	6702582	CastExpression	( unsigned int ) MAX_COM_LENGTH		6701846	1					
ANR	6702583	CastTarget	unsigned int		6701846	0					
ANR	6702584	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702585	CompoundStatement		149:59:4724:4724	6701846	1					
ANR	6702586	ExpressionStatement	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"	564:1:16042:16132	6701846	0	True				
ANR	6702587	CallExpression	"fprintf ( stderr , ""Comment text may not exceed %u bytes\\n"" , ( unsigned int ) MAX_COM_LENGTH )"		6701846	0					
ANR	6702588	Callee	fprintf		6701846	0					
ANR	6702589	Identifier	fprintf		6701846	0					
ANR	6702590	ArgumentList	stderr		6701846	1					
ANR	6702591	Argument	stderr		6701846	0					
ANR	6702592	Identifier	stderr		6701846	0					
ANR	6702593	Argument	"""Comment text may not exceed %u bytes\\n"""		6701846	1					
ANR	6702594	PrimaryExpression	"""Comment text may not exceed %u bytes\\n"""		6701846	0					
ANR	6702595	Argument	( unsigned int ) MAX_COM_LENGTH		6701846	2					
ANR	6702596	CastExpression	( unsigned int ) MAX_COM_LENGTH		6701846	0					
ANR	6702597	CastTarget	unsigned int		6701846	0					
ANR	6702598	Identifier	MAX_COM_LENGTH		6701846	1					
ANR	6702599	ExpressionStatement	exit ( EXIT_FAILURE )	566:1:16135:16153	6701846	1	True				
ANR	6702600	CallExpression	exit ( EXIT_FAILURE )		6701846	0					
ANR	6702601	Callee	exit		6701846	0					
ANR	6702602	Identifier	exit		6701846	0					
ANR	6702603	ArgumentList	EXIT_FAILURE		6701846	1					
ANR	6702604	Argument	EXIT_FAILURE		6701846	0					
ANR	6702605	Identifier	EXIT_FAILURE		6701846	0					
ANR	6702606	ExpressionStatement	comment_arg [ comment_length ++ ] = ( char ) c	568:6:16169:16209	6701846	1	True				
ANR	6702607	AssignmentExpression	comment_arg [ comment_length ++ ] = ( char ) c		6701846	0		=			
ANR	6702608	ArrayIndexing	comment_arg [ comment_length ++ ]		6701846	0					
ANR	6702609	Identifier	comment_arg		6701846	0					
ANR	6702610	PostIncDecOperationExpression	comment_length ++		6701846	1					
ANR	6702611	Identifier	comment_length		6701846	0					
ANR	6702612	IncDec	++		6701846	1					
ANR	6702613	CastExpression	( char ) c		6701846	1					
ANR	6702614	CastTarget	char		6701846	0					
ANR	6702615	Identifier	c		6701846	1					
ANR	6702616	IfStatement	if ( comment_file != NULL )		6701846	7					
ANR	6702617	Condition	comment_file != NULL	570:8:16225:16244	6701846	0	True				
ANR	6702618	EqualityExpression	comment_file != NULL		6701846	0		!=			
ANR	6702619	Identifier	comment_file		6701846	0					
ANR	6702620	Identifier	NULL		6701846	1					
ANR	6702621	ExpressionStatement	fclose ( comment_file )	571:6:16253:16273	6701846	1	True				
ANR	6702622	CallExpression	fclose ( comment_file )		6701846	0					
ANR	6702623	Callee	fclose		6701846	0					
ANR	6702624	Identifier	fclose		6701846	0					
ANR	6702625	ArgumentList	comment_file		6701846	1					
ANR	6702626	Argument	comment_file		6701846	0					
ANR	6702627	Identifier	comment_file		6701846	0					
ANR	6702628	ExpressionStatement	marker = scan_JPEG_header ( keep_COM )	580:2:16600:16635	6701846	17	True				
ANR	6702629	AssignmentExpression	marker = scan_JPEG_header ( keep_COM )		6701846	0		=			
ANR	6702630	Identifier	marker		6701846	0					
ANR	6702631	CallExpression	scan_JPEG_header ( keep_COM )		6701846	1					
ANR	6702632	Callee	scan_JPEG_header		6701846	0					
ANR	6702633	Identifier	scan_JPEG_header		6701846	0					
ANR	6702634	ArgumentList	keep_COM		6701846	1					
ANR	6702635	Argument	keep_COM		6701846	0					
ANR	6702636	Identifier	keep_COM		6701846	0					
ANR	6702637	IfStatement	if ( comment_length > 0 )		6701846	18					
ANR	6702638	Condition	comment_length > 0	582:6:16722:16739	6701846	0	True				
ANR	6702639	RelationalExpression	comment_length > 0		6701846	0		>			
ANR	6702640	Identifier	comment_length		6701846	0					
ANR	6702641	PrimaryExpression	0		6701846	1					
ANR	6702642	CompoundStatement		168:26:5427:5427	6701846	1					
ANR	6702643	ExpressionStatement	write_marker ( M_COM )	583:4:16748:16767	6701846	0	True				
ANR	6702644	CallExpression	write_marker ( M_COM )		6701846	0					
ANR	6702645	Callee	write_marker		6701846	0					
ANR	6702646	Identifier	write_marker		6701846	0					
ANR	6702647	ArgumentList	M_COM		6701846	1					
ANR	6702648	Argument	M_COM		6701846	0					
ANR	6702649	Identifier	M_COM		6701846	0					
ANR	6702650	ExpressionStatement	write_2_bytes ( comment_length + 2 )	584:4:16773:16806	6701846	1	True				
ANR	6702651	CallExpression	write_2_bytes ( comment_length + 2 )		6701846	0					
ANR	6702652	Callee	write_2_bytes		6701846	0					
ANR	6702653	Identifier	write_2_bytes		6701846	0					
ANR	6702654	ArgumentList	comment_length + 2		6701846	1					
ANR	6702655	Argument	comment_length + 2		6701846	0					
ANR	6702656	AdditiveExpression	comment_length + 2		6701846	0		+			
ANR	6702657	Identifier	comment_length		6701846	0					
ANR	6702658	PrimaryExpression	2		6701846	1					
ANR	6702659	WhileStatement	while ( comment_length > 0 )		6701846	2					
ANR	6702660	Condition	comment_length > 0	585:11:16819:16836	6701846	0	True				
ANR	6702661	RelationalExpression	comment_length > 0		6701846	0		>			
ANR	6702662	Identifier	comment_length		6701846	0					
ANR	6702663	PrimaryExpression	0		6701846	1					
ANR	6702664	CompoundStatement		171:31:5524:5524	6701846	1					
ANR	6702665	ExpressionStatement	write_1_byte ( * comment_arg ++ )	586:6:16847:16875	6701846	0	True				
ANR	6702666	CallExpression	write_1_byte ( * comment_arg ++ )		6701846	0					
ANR	6702667	Callee	write_1_byte		6701846	0					
ANR	6702668	Identifier	write_1_byte		6701846	0					
ANR	6702669	ArgumentList	* comment_arg ++		6701846	1					
ANR	6702670	Argument	* comment_arg ++		6701846	0					
ANR	6702671	UnaryOperationExpression	* comment_arg ++		6701846	0					
ANR	6702672	UnaryOperator	*		6701846	0					
ANR	6702673	PostIncDecOperationExpression	comment_arg ++		6701846	1					
ANR	6702674	Identifier	comment_arg		6701846	0					
ANR	6702675	IncDec	++		6701846	1					
ANR	6702676	ExpressionStatement	comment_length --	587:6:16883:16899	6701846	1	True				
ANR	6702677	PostIncDecOperationExpression	comment_length --		6701846	0					
ANR	6702678	Identifier	comment_length		6701846	0					
ANR	6702679	IncDec	--		6701846	1					
ANR	6702680	ExpressionStatement	write_marker ( marker )	593:2:17039:17059	6701846	19	True				
ANR	6702681	CallExpression	write_marker ( marker )		6701846	0					
ANR	6702682	Callee	write_marker		6701846	0					
ANR	6702683	Identifier	write_marker		6701846	0					
ANR	6702684	ArgumentList	marker		6701846	1					
ANR	6702685	Argument	marker		6701846	0					
ANR	6702686	Identifier	marker		6701846	0					
ANR	6702687	ExpressionStatement	copy_rest_of_file ( )	594:2:17063:17082	6701846	20	True				
ANR	6702688	CallExpression	copy_rest_of_file ( )		6701846	0					
ANR	6702689	Callee	copy_rest_of_file		6701846	0					
ANR	6702690	Identifier	copy_rest_of_file		6701846	0					
ANR	6702691	ArgumentList			6701846	1					
ANR	6702692	ExpressionStatement	exit ( EXIT_SUCCESS )	597:2:17105:17123	6701846	21	True				
ANR	6702693	CallExpression	exit ( EXIT_SUCCESS )		6701846	0					
ANR	6702694	Callee	exit		6701846	0					
ANR	6702695	Identifier	exit		6701846	0					
ANR	6702696	ArgumentList	EXIT_SUCCESS		6701846	1					
ANR	6702697	Argument	EXIT_SUCCESS		6701846	0					
ANR	6702698	Identifier	EXIT_SUCCESS		6701846	0					
ANR	6702699	ReturnStatement	return 0 ;	598:2:17127:17135	6701846	22	True				
ANR	6702700	PrimaryExpression	0		6701846	0					
ANR	6702701	ReturnType	int		6701846	1					
ANR	6702702	Identifier	main		6701846	2					
ANR	6702703	ParameterList	"int argc , char * * argv"		6701846	3					
ANR	6702704	Parameter	int argc	414:6:11291:11298	6701846	0	True				
ANR	6702705	ParameterType	int		6701846	0					
ANR	6702706	Identifier	argc		6701846	1					
ANR	6702707	Parameter	char * * argv	414:16:11301:11311	6701846	1	True				
ANR	6702708	ParameterType	char * *		6701846	0					
ANR	6702709	Identifier	argv		6701846	1					
ANR	6702710	CFGEntryNode	ENTRY		6701846		True				
ANR	6702711	CFGExitNode	EXIT		6701846		True				
ANR	6702712	InfiniteForNode	true		6701846		True				
ANR	6702713	Symbol	stdin		6701846						
ANR	6702714	Symbol	keep_COM		6701846						
ANR	6702715	Symbol	O_BINARY		6701846						
ANR	6702716	Symbol	comment_length		6701846						
ANR	6702717	Symbol	M_COM		6701846						
ANR	6702718	Symbol	outfile		6701846						
ANR	6702719	Symbol	* comment_arg ++		6701846						
ANR	6702720	Symbol	* argv		6701846						
ANR	6702721	Symbol	infile		6701846						
ANR	6702722	Symbol	fdopen		6701846						
ANR	6702723	Symbol	argv		6701846						
ANR	6702724	Symbol	comment_arg		6701846						
ANR	6702725	Symbol	strlen		6701846						
ANR	6702726	Symbol	& argv		6701846						
ANR	6702727	Symbol	* argn		6701846						
ANR	6702728	Symbol	MAX_COM_LENGTH		6701846						
ANR	6702729	Symbol	arg		6701846						
ANR	6702730	Symbol	* comment_arg		6701846						
ANR	6702731	Symbol	keymatch		6701846						
ANR	6702732	Symbol	EOF		6701846						
ANR	6702733	Symbol	argc		6701846						
ANR	6702734	Symbol	fopen		6701846						
ANR	6702735	Symbol	malloc		6701846						
ANR	6702736	Symbol	NULL		6701846						
ANR	6702737	Symbol	c		6701846						
ANR	6702738	Symbol	* comment_length		6701846						
ANR	6702739	Symbol	stderr		6701846						
ANR	6702740	Symbol	src_file		6701846						
ANR	6702741	Symbol	WRITE_BINARY		6701846						
ANR	6702742	Symbol	ccommand		6701846						
ANR	6702743	Symbol	argn		6701846						
ANR	6702744	Symbol	EXIT_FAILURE		6701846						
ANR	6702745	Symbol	fileno		6701846						
ANR	6702746	Symbol	marker		6701846						
ANR	6702747	Symbol	* progname		6701846						
ANR	6702748	Symbol	progname		6701846						
ANR	6702749	Symbol	EXIT_SUCCESS		6701846						
ANR	6702750	Symbol	comment_file		6701846						
ANR	6702751	Symbol	getc		6701846						
ANR	6702752	Symbol	scan_JPEG_header		6701846						
ANR	6702753	Symbol	* arg		6701846						
ANR	6702754	Symbol	READ_BINARY		6701846						
