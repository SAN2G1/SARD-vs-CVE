command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1100763	File	data/converged/CVE-2018-16863_ghostpdl/base_gxhtbit.c								
ANR	1100764	Function	construct_ht_order_default	34:0:946:1244							
ANR	1100765	FunctionDef	"construct_ht_order_default (gx_ht_order * porder , const byte * thresholds)"		1100764	0					
ANR	1100766	CompoundStatement		36:0:1029:1244	1100764	0					
ANR	1100767	IdentifierDeclStatement	gx_ht_bit * bits = ( gx_ht_bit * ) porder -> bit_data ;	37:4:1035:1082	1100764	0	True				
ANR	1100768	IdentifierDecl	* bits = ( gx_ht_bit * ) porder -> bit_data		1100764	0					
ANR	1100769	IdentifierDeclType	gx_ht_bit *		1100764	0					
ANR	1100770	Identifier	bits		1100764	1					
ANR	1100771	AssignmentExpression	* bits = ( gx_ht_bit * ) porder -> bit_data		1100764	2		=			
ANR	1100772	Identifier	bits		1100764	0					
ANR	1100773	CastExpression	( gx_ht_bit * ) porder -> bit_data		1100764	1					
ANR	1100774	CastTarget	gx_ht_bit *		1100764	0					
ANR	1100775	PtrMemberAccess	porder -> bit_data		1100764	1					
ANR	1100776	Identifier	porder		1100764	0					
ANR	1100777	Identifier	bit_data		1100764	1					
ANR	1100778	IdentifierDeclStatement	uint i ;	38:4:1088:1094	1100764	1	True				
ANR	1100779	IdentifierDecl	i		1100764	0					
ANR	1100780	IdentifierDeclType	uint		1100764	0					
ANR	1100781	Identifier	i		1100764	1					
ANR	1100782	ForStatement	for ( i = 0 ; i < porder -> num_bits ; i ++ )		1100764	2					
ANR	1100783	ForInit	i = 0 ;	40:9:1106:1111	1100764	0	True				
ANR	1100784	AssignmentExpression	i = 0		1100764	0		=			
ANR	1100785	Identifier	i		1100764	0					
ANR	1100786	PrimaryExpression	0		1100764	1					
ANR	1100787	Condition	i < porder -> num_bits	40:16:1113:1132	1100764	1	True				
ANR	1100788	RelationalExpression	i < porder -> num_bits		1100764	0		<			
ANR	1100789	Identifier	i		1100764	0					
ANR	1100790	PtrMemberAccess	porder -> num_bits		1100764	1					
ANR	1100791	Identifier	porder		1100764	0					
ANR	1100792	Identifier	num_bits		1100764	1					
ANR	1100793	PostIncDecOperationExpression	i ++	40:38:1135:1137	1100764	2	True				
ANR	1100794	Identifier	i		1100764	0					
ANR	1100795	IncDec	++		1100764	1					
ANR	1100796	ExpressionStatement	"bits [ i ] . mask = max ( 1 , thresholds [ i ] )"	41:8:1148:1184	1100764	3	True				
ANR	1100797	AssignmentExpression	"bits [ i ] . mask = max ( 1 , thresholds [ i ] )"		1100764	0		=			
ANR	1100798	MemberAccess	bits [ i ] . mask		1100764	0					
ANR	1100799	ArrayIndexing	bits [ i ]		1100764	0					
ANR	1100800	Identifier	bits		1100764	0					
ANR	1100801	Identifier	i		1100764	1					
ANR	1100802	Identifier	mask		1100764	1					
ANR	1100803	CallExpression	"max ( 1 , thresholds [ i ] )"		1100764	1					
ANR	1100804	Callee	max		1100764	0					
ANR	1100805	Identifier	max		1100764	0					
ANR	1100806	ArgumentList	1		1100764	1					
ANR	1100807	Argument	1		1100764	0					
ANR	1100808	PrimaryExpression	1		1100764	0					
ANR	1100809	Argument	thresholds [ i ]		1100764	1					
ANR	1100810	ArrayIndexing	thresholds [ i ]		1100764	0					
ANR	1100811	Identifier	thresholds		1100764	0					
ANR	1100812	Identifier	i		1100764	1					
ANR	1100813	ExpressionStatement	gx_ht_complete_threshold_order ( porder )	42:4:1190:1228	1100764	3	True				
ANR	1100814	CallExpression	gx_ht_complete_threshold_order ( porder )		1100764	0					
ANR	1100815	Callee	gx_ht_complete_threshold_order		1100764	0					
ANR	1100816	Identifier	gx_ht_complete_threshold_order		1100764	0					
ANR	1100817	ArgumentList	porder		1100764	1					
ANR	1100818	Argument	porder		1100764	0					
ANR	1100819	Identifier	porder		1100764	0					
ANR	1100820	ReturnStatement	return 0 ;	43:4:1234:1242	1100764	4	True				
ANR	1100821	PrimaryExpression	0		1100764	0					
ANR	1100822	ReturnType	static int		1100764	1					
ANR	1100823	Identifier	construct_ht_order_default		1100764	2					
ANR	1100824	ParameterList	"gx_ht_order * porder , const byte * thresholds"		1100764	3					
ANR	1100825	Parameter	gx_ht_order * porder	35:27:984:1002	1100764	0	True				
ANR	1100826	ParameterType	gx_ht_order *		1100764	0					
ANR	1100827	Identifier	porder		1100764	1					
ANR	1100828	Parameter	const byte * thresholds	35:48:1005:1026	1100764	1	True				
ANR	1100829	ParameterType	const byte *		1100764	0					
ANR	1100830	Identifier	thresholds		1100764	1					
ANR	1100831	CFGEntryNode	ENTRY		1100764		True				
ANR	1100832	CFGExitNode	EXIT		1100764		True				
ANR	1100833	Symbol	* bits		1100764						
ANR	1100834	Symbol	thresholds		1100764						
ANR	1100835	Symbol	porder -> bit_data		1100764						
ANR	1100836	Symbol	* i		1100764						
ANR	1100837	Symbol	max		1100764						
ANR	1100838	Symbol	bits		1100764						
ANR	1100839	Symbol	* thresholds		1100764						
ANR	1100840	Symbol	i		1100764						
ANR	1100841	Symbol	bits [ i ] . mask		1100764						
ANR	1100842	Symbol	porder -> num_bits		1100764						
ANR	1100843	Symbol	* porder		1100764						
ANR	1100844	Symbol	porder		1100764						
ANR	1100845	Function	construct_ht_order_short	51:0:1421:3991							
ANR	1100846	FunctionDef	"construct_ht_order_short (gx_ht_order * porder , const byte * thresholds)"		1100845	0					
ANR	1100847	CompoundStatement		53:0:1502:3991	1100845	0					
ANR	1100848	IdentifierDeclStatement	uint size = porder -> num_bits ;	54:4:1508:1536	1100845	0	True				
ANR	1100849	IdentifierDecl	size = porder -> num_bits		1100845	0					
ANR	1100850	IdentifierDeclType	uint		1100845	0					
ANR	1100851	Identifier	size		1100845	1					
ANR	1100852	AssignmentExpression	size = porder -> num_bits		1100845	2		=			
ANR	1100853	Identifier	size		1100845	0					
ANR	1100854	PtrMemberAccess	porder -> num_bits		1100845	1					
ANR	1100855	Identifier	porder		1100845	0					
ANR	1100856	Identifier	num_bits		1100845	1					
ANR	1100857	IdentifierDeclStatement	uint i ;	55:4:1542:1548	1100845	1	True				
ANR	1100858	IdentifierDecl	i		1100845	0					
ANR	1100859	IdentifierDeclType	uint		1100845	0					
ANR	1100860	Identifier	i		1100845	1					
ANR	1100861	IdentifierDeclStatement	ushort * bits = ( ushort * ) porder -> bit_data ;	56:4:1554:1595	1100845	2	True				
ANR	1100862	IdentifierDecl	* bits = ( ushort * ) porder -> bit_data		1100845	0					
ANR	1100863	IdentifierDeclType	ushort *		1100845	0					
ANR	1100864	Identifier	bits		1100845	1					
ANR	1100865	AssignmentExpression	* bits = ( ushort * ) porder -> bit_data		1100845	2		=			
ANR	1100866	Identifier	bits		1100845	0					
ANR	1100867	CastExpression	( ushort * ) porder -> bit_data		1100845	1					
ANR	1100868	CastTarget	ushort *		1100845	0					
ANR	1100869	PtrMemberAccess	porder -> bit_data		1100845	1					
ANR	1100870	Identifier	porder		1100845	0					
ANR	1100871	Identifier	bit_data		1100845	1					
ANR	1100872	IdentifierDeclStatement	uint * levels = porder -> levels ;	57:4:1601:1630	1100845	3	True				
ANR	1100873	IdentifierDecl	* levels = porder -> levels		1100845	0					
ANR	1100874	IdentifierDeclType	uint *		1100845	0					
ANR	1100875	Identifier	levels		1100845	1					
ANR	1100876	AssignmentExpression	* levels = porder -> levels		1100845	2		=			
ANR	1100877	Identifier	levels		1100845	0					
ANR	1100878	PtrMemberAccess	porder -> levels		1100845	1					
ANR	1100879	Identifier	porder		1100845	0					
ANR	1100880	Identifier	levels		1100845	1					
ANR	1100881	IdentifierDeclStatement	uint num_levels = porder -> num_levels ;	58:4:1636:1672	1100845	4	True				
ANR	1100882	IdentifierDecl	num_levels = porder -> num_levels		1100845	0					
ANR	1100883	IdentifierDeclType	uint		1100845	0					
ANR	1100884	Identifier	num_levels		1100845	1					
ANR	1100885	AssignmentExpression	num_levels = porder -> num_levels		1100845	2		=			
ANR	1100886	Identifier	num_levels		1100845	0					
ANR	1100887	PtrMemberAccess	porder -> num_levels		1100845	1					
ANR	1100888	Identifier	porder		1100845	0					
ANR	1100889	Identifier	num_levels		1100845	1					
ANR	1100890	ExpressionStatement	"memset ( levels , 0 , num_levels * sizeof ( * levels ) )"	60:4:1679:1726	1100845	5	True				
ANR	1100891	CallExpression	"memset ( levels , 0 , num_levels * sizeof ( * levels ) )"		1100845	0					
ANR	1100892	Callee	memset		1100845	0					
ANR	1100893	Identifier	memset		1100845	0					
ANR	1100894	ArgumentList	levels		1100845	1					
ANR	1100895	Argument	levels		1100845	0					
ANR	1100896	Identifier	levels		1100845	0					
ANR	1100897	Argument	0		1100845	1					
ANR	1100898	PrimaryExpression	0		1100845	0					
ANR	1100899	Argument	num_levels * sizeof ( * levels )		1100845	2					
ANR	1100900	MultiplicativeExpression	num_levels * sizeof ( * levels )		1100845	0		*			
ANR	1100901	Identifier	num_levels		1100845	0					
ANR	1100902	SizeofExpression	sizeof ( * levels )		1100845	1					
ANR	1100903	Sizeof	sizeof		1100845	0					
ANR	1100904	UnaryOperationExpression	* levels		1100845	1					
ANR	1100905	UnaryOperator	*		1100845	0					
ANR	1100906	Identifier	levels		1100845	1					
ANR	1100907	ForStatement	for ( i = 0 ; i < size ; i ++ )		1100845	6					
ANR	1100908	ForInit	i = 0 ;	62:9:1803:1808	1100845	0	True				
ANR	1100909	AssignmentExpression	i = 0		1100845	0		=			
ANR	1100910	Identifier	i		1100845	0					
ANR	1100911	PrimaryExpression	0		1100845	1					
ANR	1100912	Condition	i < size	62:16:1810:1817	1100845	1	True				
ANR	1100913	RelationalExpression	i < size		1100845	0		<			
ANR	1100914	Identifier	i		1100845	0					
ANR	1100915	Identifier	size		1100845	1					
ANR	1100916	PostIncDecOperationExpression	i ++	62:26:1820:1822	1100845	2	True				
ANR	1100917	Identifier	i		1100845	0					
ANR	1100918	IncDec	++		1100845	1					
ANR	1100919	CompoundStatement		11:8:332:366	1100845	3					
ANR	1100920	IdentifierDeclStatement	"uint value = max ( 1 , thresholds [ i ] ) ;"	63:8:1835:1869	1100845	0	True				
ANR	1100921	IdentifierDecl	"value = max ( 1 , thresholds [ i ] )"		1100845	0					
ANR	1100922	IdentifierDeclType	uint		1100845	0					
ANR	1100923	Identifier	value		1100845	1					
ANR	1100924	AssignmentExpression	"value = max ( 1 , thresholds [ i ] )"		1100845	2		=			
ANR	1100925	Identifier	value		1100845	0					
ANR	1100926	CallExpression	"max ( 1 , thresholds [ i ] )"		1100845	1					
ANR	1100927	Callee	max		1100845	0					
ANR	1100928	Identifier	max		1100845	0					
ANR	1100929	ArgumentList	1		1100845	1					
ANR	1100930	Argument	1		1100845	0					
ANR	1100931	PrimaryExpression	1		1100845	0					
ANR	1100932	Argument	thresholds [ i ]		1100845	1					
ANR	1100933	ArrayIndexing	thresholds [ i ]		1100845	0					
ANR	1100934	Identifier	thresholds		1100845	0					
ANR	1100935	Identifier	i		1100845	1					
ANR	1100936	IfStatement	if ( value + 1 < num_levels )		1100845	1					
ANR	1100937	Condition	value + 1 < num_levels	65:12:1884:1905	1100845	0	True				
ANR	1100938	RelationalExpression	value + 1 < num_levels		1100845	0		<			
ANR	1100939	AdditiveExpression	value + 1		1100845	0		+			
ANR	1100940	Identifier	value		1100845	0					
ANR	1100941	PrimaryExpression	1		1100845	1					
ANR	1100942	Identifier	num_levels		1100845	1					
ANR	1100943	ExpressionStatement	levels [ value + 1 ] ++	66:12:1920:1939	1100845	1	True				
ANR	1100944	PostIncDecOperationExpression	levels [ value + 1 ] ++		1100845	0					
ANR	1100945	ArrayIndexing	levels [ value + 1 ]		1100845	0					
ANR	1100946	Identifier	levels		1100845	0					
ANR	1100947	AdditiveExpression	value + 1		1100845	1		+			
ANR	1100948	Identifier	value		1100845	0					
ANR	1100949	PrimaryExpression	1		1100845	1					
ANR	1100950	IncDec	++		1100845	1					
ANR	1100951	ForStatement	for ( i = 2 ; i < num_levels ; ++ i )		1100845	7					
ANR	1100952	ForInit	i = 2 ;	68:9:1956:1961	1100845	0	True				
ANR	1100953	AssignmentExpression	i = 2		1100845	0		=			
ANR	1100954	Identifier	i		1100845	0					
ANR	1100955	PrimaryExpression	2		1100845	1					
ANR	1100956	Condition	i < num_levels	68:16:1963:1976	1100845	1	True				
ANR	1100957	RelationalExpression	i < num_levels		1100845	0		<			
ANR	1100958	Identifier	i		1100845	0					
ANR	1100959	Identifier	num_levels		1100845	1					
ANR	1100960	UnaryExpression	++ i	68:32:1979:1981	1100845	2	True				
ANR	1100961	IncDec	++		1100845	0					
ANR	1100962	Identifier	i		1100845	1					
ANR	1100963	ExpressionStatement	levels [ i ] += levels [ i - 1 ]	69:8:1992:2018	1100845	3	True				
ANR	1100964	AssignmentExpression	levels [ i ] += levels [ i - 1 ]		1100845	0		+=			
ANR	1100965	ArrayIndexing	levels [ i ]		1100845	0					
ANR	1100966	Identifier	levels		1100845	0					
ANR	1100967	Identifier	i		1100845	1					
ANR	1100968	ArrayIndexing	levels [ i - 1 ]		1100845	1					
ANR	1100969	Identifier	levels		1100845	0					
ANR	1100970	AdditiveExpression	i - 1		1100845	1		-			
ANR	1100971	Identifier	i		1100845	0					
ANR	1100972	PrimaryExpression	1		1100845	1					
ANR	1100973	CompoundStatement		21:8:609:656	1100845	8					
ANR	1100974	IdentifierDeclStatement	uint width = porder -> width ;	72:8:2076:2102	1100845	0	True				
ANR	1100975	IdentifierDecl	width = porder -> width		1100845	0					
ANR	1100976	IdentifierDeclType	uint		1100845	0					
ANR	1100977	Identifier	width		1100845	1					
ANR	1100978	AssignmentExpression	width = porder -> width		1100845	2		=			
ANR	1100979	Identifier	width		1100845	0					
ANR	1100980	PtrMemberAccess	porder -> width		1100845	1					
ANR	1100981	Identifier	porder		1100845	0					
ANR	1100982	Identifier	width		1100845	1					
ANR	1100983	IdentifierDeclStatement	uint padding = bitmap_raster ( width ) * 8 - width ;	73:8:2112:2159	1100845	1	True				
ANR	1100984	IdentifierDecl	padding = bitmap_raster ( width ) * 8 - width		1100845	0					
ANR	1100985	IdentifierDeclType	uint		1100845	0					
ANR	1100986	Identifier	padding		1100845	1					
ANR	1100987	AssignmentExpression	padding = bitmap_raster ( width ) * 8 - width		1100845	2		=			
ANR	1100988	Identifier	padding		1100845	0					
ANR	1100989	AdditiveExpression	bitmap_raster ( width ) * 8 - width		1100845	1		-			
ANR	1100990	MultiplicativeExpression	bitmap_raster ( width ) * 8		1100845	0		*			
ANR	1100991	CallExpression	bitmap_raster ( width )		1100845	0					
ANR	1100992	Callee	bitmap_raster		1100845	0					
ANR	1100993	Identifier	bitmap_raster		1100845	0					
ANR	1100994	ArgumentList	width		1100845	1					
ANR	1100995	Argument	width		1100845	0					
ANR	1100996	Identifier	width		1100845	0					
ANR	1100997	PrimaryExpression	8		1100845	1					
ANR	1100998	Identifier	width		1100845	1					
ANR	1100999	ForStatement	for ( i = 0 ; i < size ; i ++ )		1100845	2					
ANR	1101000	ForInit	i = 0 ;	75:13:2175:2180	1100845	0	True				
ANR	1101001	AssignmentExpression	i = 0		1100845	0		=			
ANR	1101002	Identifier	i		1100845	0					
ANR	1101003	PrimaryExpression	0		1100845	1					
ANR	1101004	Condition	i < size	75:20:2182:2189	1100845	1	True				
ANR	1101005	RelationalExpression	i < size		1100845	0		<			
ANR	1101006	Identifier	i		1100845	0					
ANR	1101007	Identifier	size		1100845	1					
ANR	1101008	PostIncDecOperationExpression	i ++	75:30:2192:2194	1100845	2	True				
ANR	1101009	Identifier	i		1100845	0					
ANR	1101010	IncDec	++		1100845	1					
ANR	1101011	CompoundStatement		24:12:708:742	1100845	3					
ANR	1101012	IdentifierDeclStatement	"uint value = max ( 1 , thresholds [ i ] ) ;"	76:12:2211:2245	1100845	0	True				
ANR	1101013	IdentifierDecl	"value = max ( 1 , thresholds [ i ] )"		1100845	0					
ANR	1101014	IdentifierDeclType	uint		1100845	0					
ANR	1101015	Identifier	value		1100845	1					
ANR	1101016	AssignmentExpression	"value = max ( 1 , thresholds [ i ] )"		1100845	2		=			
ANR	1101017	Identifier	value		1100845	0					
ANR	1101018	CallExpression	"max ( 1 , thresholds [ i ] )"		1100845	1					
ANR	1101019	Callee	max		1100845	0					
ANR	1101020	Identifier	max		1100845	0					
ANR	1101021	ArgumentList	1		1100845	1					
ANR	1101022	Argument	1		1100845	0					
ANR	1101023	PrimaryExpression	1		1100845	0					
ANR	1101024	Argument	thresholds [ i ]		1100845	1					
ANR	1101025	ArrayIndexing	thresholds [ i ]		1100845	0					
ANR	1101026	Identifier	thresholds		1100845	0					
ANR	1101027	Identifier	i		1100845	1					
ANR	1101028	ExpressionStatement	bits [ levels [ value ] ++ ] = i + ( i / width * padding )	79:12:2323:2372	1100845	1	True				
ANR	1101029	AssignmentExpression	bits [ levels [ value ] ++ ] = i + ( i / width * padding )		1100845	0		=			
ANR	1101030	ArrayIndexing	bits [ levels [ value ] ++ ]		1100845	0					
ANR	1101031	Identifier	bits		1100845	0					
ANR	1101032	PostIncDecOperationExpression	levels [ value ] ++		1100845	1					
ANR	1101033	ArrayIndexing	levels [ value ]		1100845	0					
ANR	1101034	Identifier	levels		1100845	0					
ANR	1101035	Identifier	value		1100845	1					
ANR	1101036	IncDec	++		1100845	1					
ANR	1101037	AdditiveExpression	i + ( i / width * padding )		1100845	1		+			
ANR	1101038	Identifier	i		1100845	0					
ANR	1101039	MultiplicativeExpression	i / width * padding		1100845	1		/			
ANR	1101040	Identifier	i		1100845	0					
ANR	1101041	MultiplicativeExpression	width * padding		1100845	1		*			
ANR	1101042	Identifier	width		1100845	0					
ANR	1101043	Identifier	padding		1100845	1					
ANR	1101044	CompoundStatement		33:8:957:1007	1100845	9					
ANR	1101045	IdentifierDeclStatement	const gx_dht_proc * phtrp = gx_device_halftone_list ;	85:8:2460:2510	1100845	0	True				
ANR	1101046	IdentifierDecl	* phtrp = gx_device_halftone_list		1100845	0					
ANR	1101047	IdentifierDeclType	const gx_dht_proc *		1100845	0					
ANR	1101048	Identifier	phtrp		1100845	1					
ANR	1101049	AssignmentExpression	* phtrp = gx_device_halftone_list		1100845	2		=			
ANR	1101050	Identifier	gx_device_halftone_list		1100845	0					
ANR	1101051	Identifier	gx_device_halftone_list		1100845	1					
ANR	1101052	ForStatement	for ( ; * phtrp ; ++ phtrp )		1100845	1					
ANR	1101053	Condition	* phtrp	87:15:2528:2533	1100845	0	True				
ANR	1101054	UnaryOperationExpression	* phtrp		1100845	0					
ANR	1101055	UnaryOperator	*		1100845	0					
ANR	1101056	Identifier	phtrp		1100845	1					
ANR	1101057	UnaryExpression	++ phtrp	87:23:2536:2542	1100845	1	True				
ANR	1101058	IncDec	++		1100845	0					
ANR	1101059	Identifier	phtrp		1100845	1					
ANR	1101060	CompoundStatement		37:12:1132:1173	1100845	2					
ANR	1101061	Statement	const	88:12:2559:2563	1100845	0	True				
ANR	1101062	Statement	gx_device_halftone_resource_t	88:18:2565:2593	1100845	1	True				
ANR	1101063	Statement	*	88:48:2595:2595	1100845	2	True				
ANR	1101064	Statement	const	88:49:2596:2600	1100845	3	True				
ANR	1101065	ExpressionStatement	* pphtr = ( * phtrp ) ( )	88:55:2602:2621	1100845	4	True				
ANR	1101066	AssignmentExpression	* pphtr = ( * phtrp ) ( )		1100845	0		=			
ANR	1101067	UnaryOperationExpression	* pphtr		1100845	0					
ANR	1101068	UnaryOperator	*		1100845	0					
ANR	1101069	Identifier	pphtr		1100845	1					
ANR	1101070	CallExpression	( * phtrp ) ( )		1100845	1					
ANR	1101071	Callee	* phtrp		1100845	0					
ANR	1101072	UnaryOperationExpression	* phtrp		1100845	0					
ANR	1101073	UnaryOperator	*		1100845	0					
ANR	1101074	Identifier	phtrp		1100845	1					
ANR	1101075	ArgumentList			1100845	1					
ANR	1101076	IdentifierDeclStatement	const gx_device_halftone_resource_t * phtr ;	89:12:2635:2676	1100845	5	True				
ANR	1101077	IdentifierDecl	* phtr		1100845	0					
ANR	1101078	IdentifierDeclType	const gx_device_halftone_resource_t *		1100845	0					
ANR	1101079	Identifier	phtr		1100845	1					
ANR	1101080	WhileStatement	while ( ( phtr = * pphtr ++ ) != 0 )		1100845	6					
ANR	1101081	Condition	( phtr = * pphtr ++ ) != 0	91:19:2698:2719	1100845	0	True				
ANR	1101082	EqualityExpression	( phtr = * pphtr ++ ) != 0		1100845	0		!=			
ANR	1101083	AssignmentExpression	phtr = * pphtr ++		1100845	0		=			
ANR	1101084	Identifier	phtr		1100845	0					
ANR	1101085	UnaryOperationExpression	* pphtr ++		1100845	1					
ANR	1101086	UnaryOperator	*		1100845	0					
ANR	1101087	PostIncDecOperationExpression	pphtr ++		1100845	1					
ANR	1101088	Identifier	pphtr		1100845	0					
ANR	1101089	IncDec	++		1100845	1					
ANR	1101090	PrimaryExpression	0		1100845	1					
ANR	1101091	CompoundStatement		39:43:1219:1219	1100845	1					
ANR	1101092	IfStatement	"if ( phtr -> Width == porder -> width && phtr -> Height == porder -> height && phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size ) )"		1100845	0					
ANR	1101093	Condition	"phtr -> Width == porder -> width && phtr -> Height == porder -> height && phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"	92:20:2744:3080	1100845	0	True				
ANR	1101094	AndExpression	"phtr -> Width == porder -> width && phtr -> Height == porder -> height && phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		1100845	0		&&			
ANR	1101095	EqualityExpression	phtr -> Width == porder -> width		1100845	0		==			
ANR	1101096	PtrMemberAccess	phtr -> Width		1100845	0					
ANR	1101097	Identifier	phtr		1100845	0					
ANR	1101098	Identifier	Width		1100845	1					
ANR	1101099	PtrMemberAccess	porder -> width		1100845	1					
ANR	1101100	Identifier	porder		1100845	0					
ANR	1101101	Identifier	width		1100845	1					
ANR	1101102	AndExpression	"phtr -> Height == porder -> height && phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		1100845	1		&&			
ANR	1101103	EqualityExpression	phtr -> Height == porder -> height		1100845	0		==			
ANR	1101104	PtrMemberAccess	phtr -> Height		1100845	0					
ANR	1101105	Identifier	phtr		1100845	0					
ANR	1101106	Identifier	Height		1100845	1					
ANR	1101107	PtrMemberAccess	porder -> height		1100845	1					
ANR	1101108	Identifier	porder		1100845	0					
ANR	1101109	Identifier	height		1100845	1					
ANR	1101110	AndExpression	"phtr -> elt_size == sizeof ( ushort ) && ! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		1100845	1		&&			
ANR	1101111	EqualityExpression	phtr -> elt_size == sizeof ( ushort )		1100845	0		==			
ANR	1101112	PtrMemberAccess	phtr -> elt_size		1100845	0					
ANR	1101113	Identifier	phtr		1100845	0					
ANR	1101114	Identifier	elt_size		1100845	1					
ANR	1101115	SizeofExpression	sizeof ( ushort )		1100845	1					
ANR	1101116	Sizeof	sizeof		1100845	0					
ANR	1101117	SizeofOperand	ushort		1100845	1					
ANR	1101118	AndExpression	"! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) ) && ! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		1100845	1		&&			
ANR	1101119	UnaryOperationExpression	"! memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) )"		1100845	0					
ANR	1101120	UnaryOperator	!		1100845	0					
ANR	1101121	CallExpression	"memcmp ( phtr -> levels , levels , num_levels * sizeof ( * levels ) )"		1100845	1					
ANR	1101122	Callee	memcmp		1100845	0					
ANR	1101123	Identifier	memcmp		1100845	0					
ANR	1101124	ArgumentList	phtr -> levels		1100845	1					
ANR	1101125	Argument	phtr -> levels		1100845	0					
ANR	1101126	PtrMemberAccess	phtr -> levels		1100845	0					
ANR	1101127	Identifier	phtr		1100845	0					
ANR	1101128	Identifier	levels		1100845	1					
ANR	1101129	Argument	levels		1100845	1					
ANR	1101130	Identifier	levels		1100845	0					
ANR	1101131	Argument	num_levels * sizeof ( * levels )		1100845	2					
ANR	1101132	MultiplicativeExpression	num_levels * sizeof ( * levels )		1100845	0		*			
ANR	1101133	Identifier	num_levels		1100845	0					
ANR	1101134	SizeofExpression	sizeof ( * levels )		1100845	1					
ANR	1101135	Sizeof	sizeof		1100845	0					
ANR	1101136	UnaryOperationExpression	* levels		1100845	1					
ANR	1101137	UnaryOperator	*		1100845	0					
ANR	1101138	Identifier	levels		1100845	1					
ANR	1101139	UnaryOperationExpression	"! memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		1100845	1					
ANR	1101140	UnaryOperator	!		1100845	0					
ANR	1101141	CallExpression	"memcmp ( phtr -> bit_data , porder -> bit_data , size * phtr -> elt_size )"		1100845	1					
ANR	1101142	Callee	memcmp		1100845	0					
ANR	1101143	Identifier	memcmp		1100845	0					
ANR	1101144	ArgumentList	phtr -> bit_data		1100845	1					
ANR	1101145	Argument	phtr -> bit_data		1100845	0					
ANR	1101146	PtrMemberAccess	phtr -> bit_data		1100845	0					
ANR	1101147	Identifier	phtr		1100845	0					
ANR	1101148	Identifier	bit_data		1100845	1					
ANR	1101149	Argument	porder -> bit_data		1100845	1					
ANR	1101150	PtrMemberAccess	porder -> bit_data		1100845	0					
ANR	1101151	Identifier	porder		1100845	0					
ANR	1101152	Identifier	bit_data		1100845	1					
ANR	1101153	Argument	size * phtr -> elt_size		1100845	2					
ANR	1101154	MultiplicativeExpression	size * phtr -> elt_size		1100845	0		*			
ANR	1101155	Identifier	size		1100845	0					
ANR	1101156	PtrMemberAccess	phtr -> elt_size		1100845	1					
ANR	1101157	Identifier	phtr		1100845	0					
ANR	1101158	Identifier	elt_size		1100845	1					
ANR	1101159	CompoundStatement		46:22:1601:1601	1100845	1					
ANR	1101160	IfStatement	if ( porder -> data_memory )		1100845	0					
ANR	1101161	Condition	porder -> data_memory	103:24:3331:3349	1100845	0	True				
ANR	1101162	PtrMemberAccess	porder -> data_memory		1100845	0					
ANR	1101163	Identifier	porder		1100845	0					
ANR	1101164	Identifier	data_memory		1100845	1					
ANR	1101165	CompoundStatement		51:45:1849:1849	1100845	1					
ANR	1101166	ExpressionStatement	"gs_free_object ( porder -> data_memory , porder -> bit_data , ""construct_ht_order_short(bit_data)"" )"	104:24:3378:3508	1100845	0	True				
ANR	1101167	CallExpression	"gs_free_object ( porder -> data_memory , porder -> bit_data , ""construct_ht_order_short(bit_data)"" )"		1100845	0					
ANR	1101168	Callee	gs_free_object		1100845	0					
ANR	1101169	Identifier	gs_free_object		1100845	0					
ANR	1101170	ArgumentList	porder -> data_memory		1100845	1					
ANR	1101171	Argument	porder -> data_memory		1100845	0					
ANR	1101172	PtrMemberAccess	porder -> data_memory		1100845	0					
ANR	1101173	Identifier	porder		1100845	0					
ANR	1101174	Identifier	data_memory		1100845	1					
ANR	1101175	Argument	porder -> bit_data		1100845	1					
ANR	1101176	PtrMemberAccess	porder -> bit_data		1100845	0					
ANR	1101177	Identifier	porder		1100845	0					
ANR	1101178	Identifier	bit_data		1100845	1					
ANR	1101179	Argument	"""construct_ht_order_short(bit_data)"""		1100845	2					
ANR	1101180	PrimaryExpression	"""construct_ht_order_short(bit_data)"""		1100845	0					
ANR	1101181	ExpressionStatement	"gs_free_object ( porder -> data_memory , porder -> levels , ""construct_ht_order_short(levels)"" )"	106:24:3534:3660	1100845	1	True				
ANR	1101182	CallExpression	"gs_free_object ( porder -> data_memory , porder -> levels , ""construct_ht_order_short(levels)"" )"		1100845	0					
ANR	1101183	Callee	gs_free_object		1100845	0					
ANR	1101184	Identifier	gs_free_object		1100845	0					
ANR	1101185	ArgumentList	porder -> data_memory		1100845	1					
ANR	1101186	Argument	porder -> data_memory		1100845	0					
ANR	1101187	PtrMemberAccess	porder -> data_memory		1100845	0					
ANR	1101188	Identifier	porder		1100845	0					
ANR	1101189	Identifier	data_memory		1100845	1					
ANR	1101190	Argument	porder -> levels		1100845	1					
ANR	1101191	PtrMemberAccess	porder -> levels		1100845	0					
ANR	1101192	Identifier	porder		1100845	0					
ANR	1101193	Identifier	levels		1100845	1					
ANR	1101194	Argument	"""construct_ht_order_short(levels)"""		1100845	2					
ANR	1101195	PrimaryExpression	"""construct_ht_order_short(levels)"""		1100845	0					
ANR	1101196	ExpressionStatement	porder -> data_memory = 0	109:20:3704:3727	1100845	1	True				
ANR	1101197	AssignmentExpression	porder -> data_memory = 0		1100845	0		=			
ANR	1101198	PtrMemberAccess	porder -> data_memory		1100845	0					
ANR	1101199	Identifier	porder		1100845	0					
ANR	1101200	Identifier	data_memory		1100845	1					
ANR	1101201	PrimaryExpression	0		1100845	1					
ANR	1101202	ExpressionStatement	porder -> levels = ( uint * ) phtr -> levels	110:20:3749:3786	1100845	2	True				
ANR	1101203	AssignmentExpression	porder -> levels = ( uint * ) phtr -> levels		1100845	0		=			
ANR	1101204	PtrMemberAccess	porder -> levels		1100845	0					
ANR	1101205	Identifier	porder		1100845	0					
ANR	1101206	Identifier	levels		1100845	1					
ANR	1101207	CastExpression	( uint * ) phtr -> levels		1100845	1					
ANR	1101208	CastTarget	uint *		1100845	0					
ANR	1101209	PtrMemberAccess	phtr -> levels		1100845	1					
ANR	1101210	Identifier	phtr		1100845	0					
ANR	1101211	Identifier	levels		1100845	1					
ANR	1101212	ExpressionStatement	porder -> bit_data = ( void * ) phtr -> bit_data	111:20:3829:3870	1100845	3	True				
ANR	1101213	AssignmentExpression	porder -> bit_data = ( void * ) phtr -> bit_data		1100845	0		=			
ANR	1101214	PtrMemberAccess	porder -> bit_data		1100845	0					
ANR	1101215	Identifier	porder		1100845	0					
ANR	1101216	Identifier	bit_data		1100845	1					
ANR	1101217	CastExpression	( void * ) phtr -> bit_data		1100845	1					
ANR	1101218	CastTarget	void *		1100845	0					
ANR	1101219	PtrMemberAccess	phtr -> bit_data		1100845	1					
ANR	1101220	Identifier	phtr		1100845	0					
ANR	1101221	Identifier	bit_data		1100845	1					
ANR	1101222	GotoStatement	goto out ;	112:20:3913:3921	1100845	4	True				
ANR	1101223	Identifier	out		1100845	0					
ANR	1101224	Label	out :	117:1:3972:3975	1100845	10	True				
ANR	1101225	Identifier	out		1100845	0					
ANR	1101226	ReturnStatement	return 0 ;	118:4:3981:3989	1100845	11	True				
ANR	1101227	PrimaryExpression	0		1100845	0					
ANR	1101228	ReturnType	static int		1100845	1					
ANR	1101229	Identifier	construct_ht_order_short		1100845	2					
ANR	1101230	ParameterList	"gx_ht_order * porder , const byte * thresholds"		1100845	3					
ANR	1101231	Parameter	gx_ht_order * porder	52:25:1457:1475	1100845	0	True				
ANR	1101232	ParameterType	gx_ht_order *		1100845	0					
ANR	1101233	Identifier	porder		1100845	1					
ANR	1101234	Parameter	const byte * thresholds	52:46:1478:1499	1100845	1	True				
ANR	1101235	ParameterType	const byte *		1100845	0					
ANR	1101236	Identifier	thresholds		1100845	1					
ANR	1101237	CFGEntryNode	ENTRY		1100845		True				
ANR	1101238	CFGExitNode	EXIT		1100845		True				
ANR	1101239	Symbol	phtr		1100845						
ANR	1101240	Symbol	porder -> num_levels		1100845						
ANR	1101241	Symbol	* thresholds		1100845						
ANR	1101242	Symbol	phtr -> bit_data		1100845						
ANR	1101243	Symbol	porder -> width		1100845						
ANR	1101244	Symbol	porder -> num_bits		1100845						
ANR	1101245	Symbol	* phtr		1100845						
ANR	1101246	Symbol	* pphtr		1100845						
ANR	1101247	Symbol	porder -> levels		1100845						
ANR	1101248	Symbol	phtr -> Height		1100845						
ANR	1101249	Symbol	porder -> bit_data		1100845						
ANR	1101250	Symbol	memcmp		1100845						
ANR	1101251	Symbol	value		1100845						
ANR	1101252	Symbol	phtr -> elt_size		1100845						
ANR	1101253	Symbol	* bits		1100845						
ANR	1101254	Symbol	padding		1100845						
ANR	1101255	Symbol	phtrp		1100845						
ANR	1101256	Symbol	max		1100845						
ANR	1101257	Symbol	phtr -> levels		1100845						
ANR	1101258	Symbol	porder -> height		1100845						
ANR	1101259	Symbol	bits		1100845						
ANR	1101260	Symbol	i		1100845						
ANR	1101261	Symbol	porder		1100845						
ANR	1101262	Symbol	* levels		1100845						
ANR	1101263	Symbol	bitmap_raster		1100845						
ANR	1101264	Symbol	phtr -> Width		1100845						
ANR	1101265	Symbol	thresholds		1100845						
ANR	1101266	Symbol	* i		1100845						
ANR	1101267	Symbol	size		1100845						
ANR	1101268	Symbol	* value		1100845						
ANR	1101269	Symbol	gx_device_halftone_list		1100845						
ANR	1101270	Symbol	* pphtr ++		1100845						
ANR	1101271	Symbol	width		1100845						
ANR	1101272	Symbol	* phtrp		1100845						
ANR	1101273	Symbol	pphtr		1100845						
ANR	1101274	Symbol	* porder		1100845						
ANR	1101275	Symbol	levels		1100845						
ANR	1101276	Symbol	porder -> data_memory		1100845						
ANR	1101277	Symbol	num_levels		1100845						
ANR	1101278	Function	ht_bit_index_default	122:0:4061:4470							
ANR	1101279	FunctionDef	"ht_bit_index_default (const gx_ht_order * porder , uint index , gs_int_point * ppt)"		1101278	0					
ANR	1101280	CompoundStatement		124:0:4151:4470	1101278	0					
ANR	1101281	IdentifierDeclStatement	const gx_ht_bit * phtb = & ( ( const gx_ht_bit * ) porder -> bit_data ) [ index ] ;	125:4:4157:4226	1101278	0	True				
ANR	1101282	IdentifierDecl	* phtb = & ( ( const gx_ht_bit * ) porder -> bit_data ) [ index ]		1101278	0					
ANR	1101283	IdentifierDeclType	const gx_ht_bit *		1101278	0					
ANR	1101284	Identifier	phtb		1101278	1					
ANR	1101285	AssignmentExpression	* phtb = & ( ( const gx_ht_bit * ) porder -> bit_data ) [ index ]		1101278	2		=			
ANR	1101286	Identifier	phtb		1101278	0					
ANR	1101287	UnaryOperationExpression	& ( ( const gx_ht_bit * ) porder -> bit_data ) [ index ]		1101278	1					
ANR	1101288	UnaryOperator	&		1101278	0					
ANR	1101289	ArrayIndexing	( ( const gx_ht_bit * ) porder -> bit_data ) [ index ]		1101278	1					
ANR	1101290	CastExpression	( const gx_ht_bit * ) porder -> bit_data		1101278	0					
ANR	1101291	CastTarget	const gx_ht_bit *		1101278	0					
ANR	1101292	PtrMemberAccess	porder -> bit_data		1101278	1					
ANR	1101293	Identifier	porder		1101278	0					
ANR	1101294	Identifier	bit_data		1101278	1					
ANR	1101295	Identifier	index		1101278	1					
ANR	1101296	IdentifierDeclStatement	uint offset = phtb -> offset ;	126:4:4232:4258	1101278	1	True				
ANR	1101297	IdentifierDecl	offset = phtb -> offset		1101278	0					
ANR	1101298	IdentifierDeclType	uint		1101278	0					
ANR	1101299	Identifier	offset		1101278	1					
ANR	1101300	AssignmentExpression	offset = phtb -> offset		1101278	2		=			
ANR	1101301	Identifier	offset		1101278	0					
ANR	1101302	PtrMemberAccess	phtb -> offset		1101278	1					
ANR	1101303	Identifier	phtb		1101278	0					
ANR	1101304	Identifier	offset		1101278	1					
ANR	1101305	IdentifierDeclStatement	int bit = 0 ;	127:4:4264:4275	1101278	2	True				
ANR	1101306	IdentifierDecl	bit = 0		1101278	0					
ANR	1101307	IdentifierDeclType	int		1101278	0					
ANR	1101308	Identifier	bit		1101278	1					
ANR	1101309	AssignmentExpression	bit = 0		1101278	2		=			
ANR	1101310	Identifier	bit		1101278	0					
ANR	1101311	PrimaryExpression	0		1101278	1					
ANR	1101312	WhileStatement	while ( ! ( ( ( const byte * ) & phtb -> mask ) [ bit >> 3 ] & ( 0x80 >> ( bit & 7 ) ) ) )		1101278	3					
ANR	1101313	Condition	! ( ( ( const byte * ) & phtb -> mask ) [ bit >> 3 ] & ( 0x80 >> ( bit & 7 ) ) )	129:11:4289:4350	1101278	0	True				
ANR	1101314	UnaryOperationExpression	! ( ( ( const byte * ) & phtb -> mask ) [ bit >> 3 ] & ( 0x80 >> ( bit & 7 ) ) )		1101278	0					
ANR	1101315	UnaryOperator	!		1101278	0					
ANR	1101316	BitAndExpression	( ( const byte * ) & phtb -> mask ) [ bit >> 3 ] & ( 0x80 >> ( bit & 7 ) )		1101278	1		&			
ANR	1101317	ArrayIndexing	( ( const byte * ) & phtb -> mask ) [ bit >> 3 ]		1101278	0					
ANR	1101318	CastExpression	( const byte * ) & phtb -> mask		1101278	0					
ANR	1101319	CastTarget	const byte *		1101278	0					
ANR	1101320	UnaryOperationExpression	& phtb -> mask		1101278	1					
ANR	1101321	UnaryOperator	&		1101278	0					
ANR	1101322	PtrMemberAccess	phtb -> mask		1101278	1					
ANR	1101323	Identifier	phtb		1101278	0					
ANR	1101324	Identifier	mask		1101278	1					
ANR	1101325	ShiftExpression	bit >> 3		1101278	1		>>			
ANR	1101326	Identifier	bit		1101278	0					
ANR	1101327	PrimaryExpression	3		1101278	1					
ANR	1101328	ShiftExpression	0x80 >> ( bit & 7 )		1101278	1		>>			
ANR	1101329	PrimaryExpression	0x80		1101278	0					
ANR	1101330	BitAndExpression	bit & 7		1101278	1		&			
ANR	1101331	Identifier	bit		1101278	0					
ANR	1101332	PrimaryExpression	7		1101278	1					
ANR	1101333	ExpressionStatement	++ bit	130:8:4361:4366	1101278	1	True				
ANR	1101334	UnaryExpression	++ bit		1101278	0					
ANR	1101335	IncDec	++		1101278	0					
ANR	1101336	Identifier	bit		1101278	1					
ANR	1101337	ExpressionStatement	ppt -> x = ( offset % porder -> raster * 8 ) + bit	131:4:4372:4416	1101278	4	True				
ANR	1101338	AssignmentExpression	ppt -> x = ( offset % porder -> raster * 8 ) + bit		1101278	0		=			
ANR	1101339	PtrMemberAccess	ppt -> x		1101278	0					
ANR	1101340	Identifier	ppt		1101278	0					
ANR	1101341	Identifier	x		1101278	1					
ANR	1101342	AdditiveExpression	( offset % porder -> raster * 8 ) + bit		1101278	1		+			
ANR	1101343	MultiplicativeExpression	offset % porder -> raster * 8		1101278	0		%			
ANR	1101344	Identifier	offset		1101278	0					
ANR	1101345	MultiplicativeExpression	porder -> raster * 8		1101278	1		*			
ANR	1101346	PtrMemberAccess	porder -> raster		1101278	0					
ANR	1101347	Identifier	porder		1101278	0					
ANR	1101348	Identifier	raster		1101278	1					
ANR	1101349	PrimaryExpression	8		1101278	1					
ANR	1101350	Identifier	bit		1101278	1					
ANR	1101351	ExpressionStatement	ppt -> y = offset / porder -> raster	132:4:4422:4454	1101278	5	True				
ANR	1101352	AssignmentExpression	ppt -> y = offset / porder -> raster		1101278	0		=			
ANR	1101353	PtrMemberAccess	ppt -> y		1101278	0					
ANR	1101354	Identifier	ppt		1101278	0					
ANR	1101355	Identifier	y		1101278	1					
ANR	1101356	MultiplicativeExpression	offset / porder -> raster		1101278	1		/			
ANR	1101357	Identifier	offset		1101278	0					
ANR	1101358	PtrMemberAccess	porder -> raster		1101278	1					
ANR	1101359	Identifier	porder		1101278	0					
ANR	1101360	Identifier	raster		1101278	1					
ANR	1101361	ReturnStatement	return 0 ;	133:4:4460:4468	1101278	6	True				
ANR	1101362	PrimaryExpression	0		1101278	0					
ANR	1101363	ReturnType	static int		1101278	1					
ANR	1101364	Identifier	ht_bit_index_default		1101278	2					
ANR	1101365	ParameterList	"const gx_ht_order * porder , uint index , gs_int_point * ppt"		1101278	3					
ANR	1101366	Parameter	const gx_ht_order * porder	123:21:4093:4117	1101278	0	True				
ANR	1101367	ParameterType	const gx_ht_order *		1101278	0					
ANR	1101368	Identifier	porder		1101278	1					
ANR	1101369	Parameter	uint index	123:48:4120:4129	1101278	1	True				
ANR	1101370	ParameterType	uint		1101278	0					
ANR	1101371	Identifier	index		1101278	1					
ANR	1101372	Parameter	gs_int_point * ppt	123:60:4132:4148	1101278	2	True				
ANR	1101373	ParameterType	gs_int_point *		1101278	0					
ANR	1101374	Identifier	ppt		1101278	1					
ANR	1101375	CFGEntryNode	ENTRY		1101278		True				
ANR	1101376	CFGExitNode	EXIT		1101278		True				
ANR	1101377	Symbol	phtb -> offset		1101278						
ANR	1101378	Symbol	offset		1101278						
ANR	1101379	Symbol	porder -> raster		1101278						
ANR	1101380	Symbol	* bit		1101278						
ANR	1101381	Symbol	index		1101278						
ANR	1101382	Symbol	bit		1101278						
ANR	1101383	Symbol	porder		1101278						
ANR	1101384	Symbol	phtb		1101278						
ANR	1101385	Symbol	porder -> bit_data		1101278						
ANR	1101386	Symbol	ppt		1101278						
ANR	1101387	Symbol	phtb -> mask		1101278						
ANR	1101388	Symbol	& phtb -> mask		1101278						
ANR	1101389	Symbol	* porder		1101278						
ANR	1101390	Symbol	ppt -> x		1101278						
ANR	1101391	Symbol	* phtb		1101278						
ANR	1101392	Symbol	* ppt		1101278						
ANR	1101393	Symbol	ppt -> y		1101278						
ANR	1101394	Function	ht_bit_index_short	137:0:4537:4822							
ANR	1101395	FunctionDef	"ht_bit_index_short (const gx_ht_order * porder , uint index , gs_int_point * ppt)"		1101394	0					
ANR	1101396	CompoundStatement		139:0:4625:4822	1101394	0					
ANR	1101397	IdentifierDeclStatement	uint bit_index = ( ( const ushort * ) porder -> bit_data ) [ index ] ;	140:4:4631:4689	1101394	0	True				
ANR	1101398	IdentifierDecl	bit_index = ( ( const ushort * ) porder -> bit_data ) [ index ]		1101394	0					
ANR	1101399	IdentifierDeclType	uint		1101394	0					
ANR	1101400	Identifier	bit_index		1101394	1					
ANR	1101401	AssignmentExpression	bit_index = ( ( const ushort * ) porder -> bit_data ) [ index ]		1101394	2		=			
ANR	1101402	Identifier	bit_index		1101394	0					
ANR	1101403	ArrayIndexing	( ( const ushort * ) porder -> bit_data ) [ index ]		1101394	1					
ANR	1101404	CastExpression	( const ushort * ) porder -> bit_data		1101394	0					
ANR	1101405	CastTarget	const ushort *		1101394	0					
ANR	1101406	PtrMemberAccess	porder -> bit_data		1101394	1					
ANR	1101407	Identifier	porder		1101394	0					
ANR	1101408	Identifier	bit_data		1101394	1					
ANR	1101409	Identifier	index		1101394	1					
ANR	1101410	IdentifierDeclStatement	uint bit_raster = porder -> raster * 8 ;	141:4:4695:4731	1101394	1	True				
ANR	1101411	IdentifierDecl	bit_raster = porder -> raster * 8		1101394	0					
ANR	1101412	IdentifierDeclType	uint		1101394	0					
ANR	1101413	Identifier	bit_raster		1101394	1					
ANR	1101414	AssignmentExpression	bit_raster = porder -> raster * 8		1101394	2		=			
ANR	1101415	Identifier	bit_raster		1101394	0					
ANR	1101416	MultiplicativeExpression	porder -> raster * 8		1101394	1		*			
ANR	1101417	PtrMemberAccess	porder -> raster		1101394	0					
ANR	1101418	Identifier	porder		1101394	0					
ANR	1101419	Identifier	raster		1101394	1					
ANR	1101420	PrimaryExpression	8		1101394	1					
ANR	1101421	ExpressionStatement	ppt -> x = bit_index % bit_raster	143:4:4738:4769	1101394	2	True				
ANR	1101422	AssignmentExpression	ppt -> x = bit_index % bit_raster		1101394	0		=			
ANR	1101423	PtrMemberAccess	ppt -> x		1101394	0					
ANR	1101424	Identifier	ppt		1101394	0					
ANR	1101425	Identifier	x		1101394	1					
ANR	1101426	MultiplicativeExpression	bit_index % bit_raster		1101394	1		%			
ANR	1101427	Identifier	bit_index		1101394	0					
ANR	1101428	Identifier	bit_raster		1101394	1					
ANR	1101429	ExpressionStatement	ppt -> y = bit_index / bit_raster	144:4:4775:4806	1101394	3	True				
ANR	1101430	AssignmentExpression	ppt -> y = bit_index / bit_raster		1101394	0		=			
ANR	1101431	PtrMemberAccess	ppt -> y		1101394	0					
ANR	1101432	Identifier	ppt		1101394	0					
ANR	1101433	Identifier	y		1101394	1					
ANR	1101434	MultiplicativeExpression	bit_index / bit_raster		1101394	1		/			
ANR	1101435	Identifier	bit_index		1101394	0					
ANR	1101436	Identifier	bit_raster		1101394	1					
ANR	1101437	ReturnStatement	return 0 ;	145:4:4812:4820	1101394	4	True				
ANR	1101438	PrimaryExpression	0		1101394	0					
ANR	1101439	ReturnType	static int		1101394	1					
ANR	1101440	Identifier	ht_bit_index_short		1101394	2					
ANR	1101441	ParameterList	"const gx_ht_order * porder , uint index , gs_int_point * ppt"		1101394	3					
ANR	1101442	Parameter	const gx_ht_order * porder	138:19:4567:4591	1101394	0	True				
ANR	1101443	ParameterType	const gx_ht_order *		1101394	0					
ANR	1101444	Identifier	porder		1101394	1					
ANR	1101445	Parameter	uint index	138:46:4594:4603	1101394	1	True				
ANR	1101446	ParameterType	uint		1101394	0					
ANR	1101447	Identifier	index		1101394	1					
ANR	1101448	Parameter	gs_int_point * ppt	138:58:4606:4622	1101394	2	True				
ANR	1101449	ParameterType	gs_int_point *		1101394	0					
ANR	1101450	Identifier	ppt		1101394	1					
ANR	1101451	CFGEntryNode	ENTRY		1101394		True				
ANR	1101452	CFGExitNode	EXIT		1101394		True				
ANR	1101453	Symbol	porder -> raster		1101394						
ANR	1101454	Symbol	* index		1101394						
ANR	1101455	Symbol	index		1101394						
ANR	1101456	Symbol	* * porder		1101394						
ANR	1101457	Symbol	* porder -> bit_data		1101394						
ANR	1101458	Symbol	porder		1101394						
ANR	1101459	Symbol	porder -> bit_data		1101394						
ANR	1101460	Symbol	bit_raster		1101394						
ANR	1101461	Symbol	ppt		1101394						
ANR	1101462	Symbol	bit_index		1101394						
ANR	1101463	Symbol	* porder		1101394						
ANR	1101464	Symbol	ppt -> x		1101394						
ANR	1101465	Symbol	* ppt		1101394						
ANR	1101466	Symbol	ppt -> y		1101394						
ANR	1101467	Function	render_ht_default	149:0:4894:6721							
ANR	1101468	FunctionDef	"render_ht_default (gx_ht_tile * pbt , int level , const gx_ht_order * porder)"		1101467	0					
ANR	1101469	CompoundStatement		151:0:4978:6721	1101467	0					
ANR	1101470	IdentifierDeclStatement	int old_level = pbt -> level ;	152:4:4984:5010	1101467	0	True				
ANR	1101471	IdentifierDecl	old_level = pbt -> level		1101467	0					
ANR	1101472	IdentifierDeclType	int		1101467	0					
ANR	1101473	Identifier	old_level		1101467	1					
ANR	1101474	AssignmentExpression	old_level = pbt -> level		1101467	2		=			
ANR	1101475	Identifier	old_level		1101467	0					
ANR	1101476	PtrMemberAccess	pbt -> level		1101467	1					
ANR	1101477	Identifier	pbt		1101467	0					
ANR	1101478	Identifier	level		1101467	1					
ANR	1101479	Statement	register	153:4:5016:5023	1101467	1	True				
ANR	1101480	IdentifierDeclStatement	const gx_ht_bit * p = ( const gx_ht_bit * ) porder -> bit_data + old_level ;	153:13:5025:5101	1101467	2	True				
ANR	1101481	IdentifierDecl	* p = ( const gx_ht_bit * ) porder -> bit_data + old_level		1101467	0					
ANR	1101482	IdentifierDeclType	const gx_ht_bit *		1101467	0					
ANR	1101483	Identifier	p		1101467	1					
ANR	1101484	AssignmentExpression	* p = ( const gx_ht_bit * ) porder -> bit_data + old_level		1101467	2		=			
ANR	1101485	Identifier	p		1101467	0					
ANR	1101486	AdditiveExpression	( const gx_ht_bit * ) porder -> bit_data + old_level		1101467	1		+			
ANR	1101487	CastExpression	( const gx_ht_bit * ) porder -> bit_data		1101467	0					
ANR	1101488	CastTarget	const gx_ht_bit *		1101467	0					
ANR	1101489	PtrMemberAccess	porder -> bit_data		1101467	1					
ANR	1101490	Identifier	porder		1101467	0					
ANR	1101491	Identifier	bit_data		1101467	1					
ANR	1101492	Identifier	old_level		1101467	1					
ANR	1101493	Statement	register	155:4:5107:5114	1101467	3	True				
ANR	1101494	IdentifierDeclStatement	byte * data = pbt -> tiles . data ;	155:13:5116:5144	1101467	4	True				
ANR	1101495	IdentifierDecl	* data = pbt -> tiles . data		1101467	0					
ANR	1101496	IdentifierDeclType	byte *		1101467	0					
ANR	1101497	Identifier	data		1101467	1					
ANR	1101498	AssignmentExpression	* data = pbt -> tiles . data		1101467	2		=			
ANR	1101499	Identifier	data		1101467	0					
ANR	1101500	MemberAccess	pbt -> tiles . data		1101467	1					
ANR	1101501	PtrMemberAccess	pbt -> tiles		1101467	0					
ANR	1101502	Identifier	pbt		1101467	0					
ANR	1101503	Identifier	tiles		1101467	1					
ANR	1101504	Identifier	data		1101467	1					
ANR	1101505	Statement	define	163:1:5446:5451	1101467	5	True				
ANR	1101506	Statement	INVERT_DATA	163:8:5453:5463	1101467	6	True				
ANR	1101507	Statement	(	163:19:5464:5464	1101467	7	True				
ANR	1101508	Statement	i	163:20:5465:5465	1101467	8	True				
ANR	1101509	Statement	)	163:21:5466:5466	1101467	9	True				
ANR	1101510	IdentifierDeclStatement	BEGIN ht_mask_t * dp = ( ht_mask_t * ) & data [ p [ i ] . offset ] ;	164:5:5474:5535	1101467	10	True				
ANR	1101511	IdentifierDecl	* dp = ( ht_mask_t * ) & data [ p [ i ] . offset ]		1101467	0					
ANR	1101512	IdentifierDeclType	BEGIN ht_mask_t *		1101467	0					
ANR	1101513	Identifier	dp		1101467	1					
ANR	1101514	AssignmentExpression	* dp = ( ht_mask_t * ) & data [ p [ i ] . offset ]		1101467	2		=			
ANR	1101515	Identifier	dp		1101467	0					
ANR	1101516	CastExpression	( ht_mask_t * ) & data [ p [ i ] . offset ]		1101467	1					
ANR	1101517	CastTarget	ht_mask_t *		1101467	0					
ANR	1101518	UnaryOperationExpression	& data [ p [ i ] . offset ]		1101467	1					
ANR	1101519	UnaryOperator	&		1101467	0					
ANR	1101520	ArrayIndexing	data [ p [ i ] . offset ]		1101467	1					
ANR	1101521	Identifier	data		1101467	0					
ANR	1101522	MemberAccess	p [ i ] . offset		1101467	1					
ANR	1101523	ArrayIndexing	p [ i ]		1101467	0					
ANR	1101524	Identifier	p		1101467	0					
ANR	1101525	Identifier	i		1101467	1					
ANR	1101526	Identifier	offset		1101467	1					
ANR	1101527	ExpressionStatement	* dp ^= p [ i ] . mask	166:7:5545:5561	1101467	11	True				
ANR	1101528	AssignmentExpression	* dp ^= p [ i ] . mask		1101467	0		^=			
ANR	1101529	UnaryOperationExpression	* dp		1101467	0					
ANR	1101530	UnaryOperator	*		1101467	0					
ANR	1101531	Identifier	dp		1101467	1					
ANR	1101532	MemberAccess	p [ i ] . mask		1101467	1					
ANR	1101533	ArrayIndexing	p [ i ]		1101467	0					
ANR	1101534	Identifier	p		1101467	0					
ANR	1101535	Identifier	i		1101467	1					
ANR	1101536	Identifier	mask		1101467	1					
ANR	1101537	Statement	END	167:5:5569:5571	1101467	12	True				
ANR	1101538	Statement	define	169:3:5589:5594	1101467	13	True				
ANR	1101539	Statement	INVERT	169:10:5596:5601	1101467	14	True				
ANR	1101540	Statement	(	169:16:5602:5602	1101467	15	True				
ANR	1101541	Statement	i	169:17:5603:5603	1101467	16	True				
ANR	1101542	Statement	)	169:18:5604:5604	1101467	17	True				
ANR	1101543	IdentifierDeclStatement	"BEGIN if_debug3 ( 'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask ) ;"	170:5:5612:5796	1101467	18	True				
ANR	1101544	IdentifierDecl	"if_debug3 ( 'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask )"		1101467	0					
ANR	1101545	IdentifierDeclType	BEGIN		1101467	0					
ANR	1101546	Identifier	if_debug3		1101467	1					
ANR	1101547	Expression	"'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask"		1101467	2					
ANR	1101548	PrimaryExpression	'H'		1101467	0					
ANR	1101549	Expression	"""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask"		1101467	1					
ANR	1101550	PrimaryExpression	"""[H]invert level=%d offset=%u mask=0x%x\\n"""		1101467	0					
ANR	1101551	Expression	"( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data ) , p [ i ] . offset , p [ i ] . mask"		1101467	1					
ANR	1101552	CastExpression	( int ) ( p + i - ( const gx_ht_bit * ) porder -> bit_data )		1101467	0					
ANR	1101553	CastTarget	int		1101467	0					
ANR	1101554	AdditiveExpression	p + i - ( const gx_ht_bit * ) porder -> bit_data		1101467	1		+			
ANR	1101555	Identifier	p		1101467	0					
ANR	1101556	AdditiveExpression	i - ( const gx_ht_bit * ) porder -> bit_data		1101467	1		-			
ANR	1101557	Identifier	i		1101467	0					
ANR	1101558	CastExpression	( const gx_ht_bit * ) porder -> bit_data		1101467	1					
ANR	1101559	CastTarget	const gx_ht_bit *		1101467	0					
ANR	1101560	PtrMemberAccess	porder -> bit_data		1101467	1					
ANR	1101561	Identifier	porder		1101467	0					
ANR	1101562	Identifier	bit_data		1101467	1					
ANR	1101563	Expression	"p [ i ] . offset , p [ i ] . mask"		1101467	1					
ANR	1101564	MemberAccess	p [ i ] . offset		1101467	0					
ANR	1101565	ArrayIndexing	p [ i ]		1101467	0					
ANR	1101566	Identifier	p		1101467	0					
ANR	1101567	Identifier	i		1101467	1					
ANR	1101568	Identifier	offset		1101467	1					
ANR	1101569	MemberAccess	p [ i ] . mask		1101467	1					
ANR	1101570	ArrayIndexing	p [ i ]		1101467	0					
ANR	1101571	Identifier	p		1101467	0					
ANR	1101572	Identifier	i		1101467	1					
ANR	1101573	Identifier	mask		1101467	1					
ANR	1101574	ExpressionStatement	INVERT_DATA ( i )	174:7:5806:5820	1101467	19	True				
ANR	1101575	CallExpression	INVERT_DATA ( i )		1101467	0					
ANR	1101576	Callee	INVERT_DATA		1101467	0					
ANR	1101577	Identifier	INVERT_DATA		1101467	0					
ANR	1101578	ArgumentList	i		1101467	1					
ANR	1101579	Argument	i		1101467	0					
ANR	1101580	Identifier	i		1101467	0					
ANR	1101581	Statement	END	175:5:5828:5830	1101467	20	True				
ANR	1101582	Label	sw :	179:2:5882:5884	1101467	21	True				
ANR	1101583	Identifier	sw		1101467	0					
ANR	1101584	SwitchStatement	switch ( level - old_level )		1101467	22					
ANR	1101585	Condition	level - old_level	179:13:5893:5909	1101467	0	True				
ANR	1101586	AdditiveExpression	level - old_level		1101467	0		-			
ANR	1101587	Identifier	level		1101467	0					
ANR	1101588	Identifier	old_level		1101467	1					
ANR	1101589	CompoundStatement		29:32:933:933	1101467	1					
ANR	1101590	Label	default :	180:8:5922:5929	1101467	0	True				
ANR	1101591	Identifier	default		1101467	0					
ANR	1101592	IfStatement	if ( level > old_level )		1101467	1					
ANR	1101593	Condition	level > old_level	181:16:5947:5963	1101467	0	True				
ANR	1101594	RelationalExpression	level > old_level		1101467	0		>			
ANR	1101595	Identifier	level		1101467	0					
ANR	1101596	Identifier	old_level		1101467	1					
ANR	1101597	CompoundStatement		31:35:987:987	1101467	1					
ANR	1101598	ExpressionStatement	INVERT ( 0 )	182:16:5984:5993	1101467	0	True				
ANR	1101599	CallExpression	INVERT ( 0 )		1101467	0					
ANR	1101600	Callee	INVERT		1101467	0					
ANR	1101601	Identifier	INVERT		1101467	0					
ANR	1101602	ArgumentList	0		1101467	1					
ANR	1101603	Argument	0		1101467	0					
ANR	1101604	PrimaryExpression	0		1101467	0					
ANR	1101605	ExpressionStatement	INVERT ( 1 )	182:27:5995:6004	1101467	1	True				
ANR	1101606	CallExpression	INVERT ( 1 )		1101467	0					
ANR	1101607	Callee	INVERT		1101467	0					
ANR	1101608	Identifier	INVERT		1101467	0					
ANR	1101609	ArgumentList	1		1101467	1					
ANR	1101610	Argument	1		1101467	0					
ANR	1101611	PrimaryExpression	1		1101467	0					
ANR	1101612	ExpressionStatement	INVERT ( 2 )	182:38:6006:6015	1101467	2	True				
ANR	1101613	CallExpression	INVERT ( 2 )		1101467	0					
ANR	1101614	Callee	INVERT		1101467	0					
ANR	1101615	Identifier	INVERT		1101467	0					
ANR	1101616	ArgumentList	2		1101467	1					
ANR	1101617	Argument	2		1101467	0					
ANR	1101618	PrimaryExpression	2		1101467	0					
ANR	1101619	ExpressionStatement	INVERT ( 3 )	182:49:6017:6026	1101467	3	True				
ANR	1101620	CallExpression	INVERT ( 3 )		1101467	0					
ANR	1101621	Callee	INVERT		1101467	0					
ANR	1101622	Identifier	INVERT		1101467	0					
ANR	1101623	ArgumentList	3		1101467	1					
ANR	1101624	Argument	3		1101467	0					
ANR	1101625	PrimaryExpression	3		1101467	0					
ANR	1101626	ExpressionStatement	p += 4	183:16:6044:6050	1101467	4	True				
ANR	1101627	AssignmentExpression	p += 4		1101467	0		+=			
ANR	1101628	Identifier	p		1101467	0					
ANR	1101629	PrimaryExpression	4		1101467	1					
ANR	1101630	ExpressionStatement	old_level += 4	183:24:6052:6066	1101467	5	True				
ANR	1101631	AssignmentExpression	old_level += 4		1101467	0		+=			
ANR	1101632	Identifier	old_level		1101467	0					
ANR	1101633	PrimaryExpression	4		1101467	1					
ANR	1101634	ElseStatement	else		1101467	0					
ANR	1101635	CompoundStatement		34:19:1108:1108	1101467	0					
ANR	1101636	ExpressionStatement	INVERT ( - 1 )	185:16:6105:6115	1101467	0	True				
ANR	1101637	CallExpression	INVERT ( - 1 )		1101467	0					
ANR	1101638	Callee	INVERT		1101467	0					
ANR	1101639	Identifier	INVERT		1101467	0					
ANR	1101640	ArgumentList	- 1		1101467	1					
ANR	1101641	Argument	- 1		1101467	0					
ANR	1101642	UnaryOperationExpression	- 1		1101467	0					
ANR	1101643	UnaryOperator	-		1101467	0					
ANR	1101644	PrimaryExpression	1		1101467	1					
ANR	1101645	ExpressionStatement	INVERT ( - 2 )	185:28:6117:6127	1101467	1	True				
ANR	1101646	CallExpression	INVERT ( - 2 )		1101467	0					
ANR	1101647	Callee	INVERT		1101467	0					
ANR	1101648	Identifier	INVERT		1101467	0					
ANR	1101649	ArgumentList	- 2		1101467	1					
ANR	1101650	Argument	- 2		1101467	0					
ANR	1101651	UnaryOperationExpression	- 2		1101467	0					
ANR	1101652	UnaryOperator	-		1101467	0					
ANR	1101653	PrimaryExpression	2		1101467	1					
ANR	1101654	ExpressionStatement	INVERT ( - 3 )	185:40:6129:6139	1101467	2	True				
ANR	1101655	CallExpression	INVERT ( - 3 )		1101467	0					
ANR	1101656	Callee	INVERT		1101467	0					
ANR	1101657	Identifier	INVERT		1101467	0					
ANR	1101658	ArgumentList	- 3		1101467	1					
ANR	1101659	Argument	- 3		1101467	0					
ANR	1101660	UnaryOperationExpression	- 3		1101467	0					
ANR	1101661	UnaryOperator	-		1101467	0					
ANR	1101662	PrimaryExpression	3		1101467	1					
ANR	1101663	ExpressionStatement	INVERT ( - 4 )	185:52:6141:6151	1101467	3	True				
ANR	1101664	CallExpression	INVERT ( - 4 )		1101467	0					
ANR	1101665	Callee	INVERT		1101467	0					
ANR	1101666	Identifier	INVERT		1101467	0					
ANR	1101667	ArgumentList	- 4		1101467	1					
ANR	1101668	Argument	- 4		1101467	0					
ANR	1101669	UnaryOperationExpression	- 4		1101467	0					
ANR	1101670	UnaryOperator	-		1101467	0					
ANR	1101671	PrimaryExpression	4		1101467	1					
ANR	1101672	ExpressionStatement	p -= 4	186:16:6169:6175	1101467	4	True				
ANR	1101673	AssignmentExpression	p -= 4		1101467	0		-=			
ANR	1101674	Identifier	p		1101467	0					
ANR	1101675	PrimaryExpression	4		1101467	1					
ANR	1101676	ExpressionStatement	old_level -= 4	186:24:6177:6191	1101467	5	True				
ANR	1101677	AssignmentExpression	old_level -= 4		1101467	0		-=			
ANR	1101678	Identifier	old_level		1101467	0					
ANR	1101679	PrimaryExpression	4		1101467	1					
ANR	1101680	GotoStatement	goto sw ;	188:12:6219:6226	1101467	2	True				
ANR	1101681	Identifier	sw		1101467	0					
ANR	1101682	Label	case 7 :	189:8:6236:6242	1101467	3	True				
ANR	1101683	ExpressionStatement	INVERT ( 6 )	189:16:6244:6253	1101467	4	True				
ANR	1101684	CallExpression	INVERT ( 6 )		1101467	0					
ANR	1101685	Callee	INVERT		1101467	0					
ANR	1101686	Identifier	INVERT		1101467	0					
ANR	1101687	ArgumentList	6		1101467	1					
ANR	1101688	Argument	6		1101467	0					
ANR	1101689	PrimaryExpression	6		1101467	0					
ANR	1101690	Label	case 6 :	190:8:6263:6269	1101467	5	True				
ANR	1101691	ExpressionStatement	INVERT ( 5 )	190:16:6271:6280	1101467	6	True				
ANR	1101692	CallExpression	INVERT ( 5 )		1101467	0					
ANR	1101693	Callee	INVERT		1101467	0					
ANR	1101694	Identifier	INVERT		1101467	0					
ANR	1101695	ArgumentList	5		1101467	1					
ANR	1101696	Argument	5		1101467	0					
ANR	1101697	PrimaryExpression	5		1101467	0					
ANR	1101698	Label	case 5 :	191:8:6290:6296	1101467	7	True				
ANR	1101699	ExpressionStatement	INVERT ( 4 )	191:16:6298:6307	1101467	8	True				
ANR	1101700	CallExpression	INVERT ( 4 )		1101467	0					
ANR	1101701	Callee	INVERT		1101467	0					
ANR	1101702	Identifier	INVERT		1101467	0					
ANR	1101703	ArgumentList	4		1101467	1					
ANR	1101704	Argument	4		1101467	0					
ANR	1101705	PrimaryExpression	4		1101467	0					
ANR	1101706	Label	case 4 :	192:8:6317:6323	1101467	9	True				
ANR	1101707	ExpressionStatement	INVERT ( 3 )	192:16:6325:6334	1101467	10	True				
ANR	1101708	CallExpression	INVERT ( 3 )		1101467	0					
ANR	1101709	Callee	INVERT		1101467	0					
ANR	1101710	Identifier	INVERT		1101467	0					
ANR	1101711	ArgumentList	3		1101467	1					
ANR	1101712	Argument	3		1101467	0					
ANR	1101713	PrimaryExpression	3		1101467	0					
ANR	1101714	Label	case 3 :	193:8:6344:6350	1101467	11	True				
ANR	1101715	ExpressionStatement	INVERT ( 2 )	193:16:6352:6361	1101467	12	True				
ANR	1101716	CallExpression	INVERT ( 2 )		1101467	0					
ANR	1101717	Callee	INVERT		1101467	0					
ANR	1101718	Identifier	INVERT		1101467	0					
ANR	1101719	ArgumentList	2		1101467	1					
ANR	1101720	Argument	2		1101467	0					
ANR	1101721	PrimaryExpression	2		1101467	0					
ANR	1101722	Label	case 2 :	194:8:6371:6377	1101467	13	True				
ANR	1101723	ExpressionStatement	INVERT ( 1 )	194:16:6379:6388	1101467	14	True				
ANR	1101724	CallExpression	INVERT ( 1 )		1101467	0					
ANR	1101725	Callee	INVERT		1101467	0					
ANR	1101726	Identifier	INVERT		1101467	0					
ANR	1101727	ArgumentList	1		1101467	1					
ANR	1101728	Argument	1		1101467	0					
ANR	1101729	PrimaryExpression	1		1101467	0					
ANR	1101730	Label	case 1 :	195:8:6398:6404	1101467	15	True				
ANR	1101731	ExpressionStatement	INVERT ( 0 )	195:16:6406:6415	1101467	16	True				
ANR	1101732	CallExpression	INVERT ( 0 )		1101467	0					
ANR	1101733	Callee	INVERT		1101467	0					
ANR	1101734	Identifier	INVERT		1101467	0					
ANR	1101735	ArgumentList	0		1101467	1					
ANR	1101736	Argument	0		1101467	0					
ANR	1101737	PrimaryExpression	0		1101467	0					
ANR	1101738	Label	case 0 :	196:8:6425:6431	1101467	17	True				
ANR	1101739	BreakStatement	break ;	196:16:6433:6438	1101467	18	True				
ANR	1101740	Statement	case	197:8:6473:6476	1101467	19	True				
ANR	1101741	Statement	-	197:13:6478:6478	1101467	20	True				
ANR	1101742	Label	7 :	197:14:6479:6480	1101467	21	True				
ANR	1101743	ExpressionStatement	INVERT ( - 7 )	197:17:6482:6492	1101467	22	True				
ANR	1101744	CallExpression	INVERT ( - 7 )		1101467	0					
ANR	1101745	Callee	INVERT		1101467	0					
ANR	1101746	Identifier	INVERT		1101467	0					
ANR	1101747	ArgumentList	- 7		1101467	1					
ANR	1101748	Argument	- 7		1101467	0					
ANR	1101749	UnaryOperationExpression	- 7		1101467	0					
ANR	1101750	UnaryOperator	-		1101467	0					
ANR	1101751	PrimaryExpression	7		1101467	1					
ANR	1101752	Statement	case	198:8:6502:6505	1101467	23	True				
ANR	1101753	Statement	-	198:13:6507:6507	1101467	24	True				
ANR	1101754	Label	6 :	198:14:6508:6509	1101467	25	True				
ANR	1101755	ExpressionStatement	INVERT ( - 6 )	198:17:6511:6521	1101467	26	True				
ANR	1101756	CallExpression	INVERT ( - 6 )		1101467	0					
ANR	1101757	Callee	INVERT		1101467	0					
ANR	1101758	Identifier	INVERT		1101467	0					
ANR	1101759	ArgumentList	- 6		1101467	1					
ANR	1101760	Argument	- 6		1101467	0					
ANR	1101761	UnaryOperationExpression	- 6		1101467	0					
ANR	1101762	UnaryOperator	-		1101467	0					
ANR	1101763	PrimaryExpression	6		1101467	1					
ANR	1101764	Statement	case	199:8:6531:6534	1101467	27	True				
ANR	1101765	Statement	-	199:13:6536:6536	1101467	28	True				
ANR	1101766	Label	5 :	199:14:6537:6538	1101467	29	True				
ANR	1101767	ExpressionStatement	INVERT ( - 5 )	199:17:6540:6550	1101467	30	True				
ANR	1101768	CallExpression	INVERT ( - 5 )		1101467	0					
ANR	1101769	Callee	INVERT		1101467	0					
ANR	1101770	Identifier	INVERT		1101467	0					
ANR	1101771	ArgumentList	- 5		1101467	1					
ANR	1101772	Argument	- 5		1101467	0					
ANR	1101773	UnaryOperationExpression	- 5		1101467	0					
ANR	1101774	UnaryOperator	-		1101467	0					
ANR	1101775	PrimaryExpression	5		1101467	1					
ANR	1101776	Statement	case	200:8:6560:6563	1101467	31	True				
ANR	1101777	Statement	-	200:13:6565:6565	1101467	32	True				
ANR	1101778	Label	4 :	200:14:6566:6567	1101467	33	True				
ANR	1101779	ExpressionStatement	INVERT ( - 4 )	200:17:6569:6579	1101467	34	True				
ANR	1101780	CallExpression	INVERT ( - 4 )		1101467	0					
ANR	1101781	Callee	INVERT		1101467	0					
ANR	1101782	Identifier	INVERT		1101467	0					
ANR	1101783	ArgumentList	- 4		1101467	1					
ANR	1101784	Argument	- 4		1101467	0					
ANR	1101785	UnaryOperationExpression	- 4		1101467	0					
ANR	1101786	UnaryOperator	-		1101467	0					
ANR	1101787	PrimaryExpression	4		1101467	1					
ANR	1101788	Statement	case	201:8:6589:6592	1101467	35	True				
ANR	1101789	Statement	-	201:13:6594:6594	1101467	36	True				
ANR	1101790	Label	3 :	201:14:6595:6596	1101467	37	True				
ANR	1101791	ExpressionStatement	INVERT ( - 3 )	201:17:6598:6608	1101467	38	True				
ANR	1101792	CallExpression	INVERT ( - 3 )		1101467	0					
ANR	1101793	Callee	INVERT		1101467	0					
ANR	1101794	Identifier	INVERT		1101467	0					
ANR	1101795	ArgumentList	- 3		1101467	1					
ANR	1101796	Argument	- 3		1101467	0					
ANR	1101797	UnaryOperationExpression	- 3		1101467	0					
ANR	1101798	UnaryOperator	-		1101467	0					
ANR	1101799	PrimaryExpression	3		1101467	1					
ANR	1101800	Statement	case	202:8:6618:6621	1101467	39	True				
ANR	1101801	Statement	-	202:13:6623:6623	1101467	40	True				
ANR	1101802	Label	2 :	202:14:6624:6625	1101467	41	True				
ANR	1101803	ExpressionStatement	INVERT ( - 2 )	202:17:6627:6637	1101467	42	True				
ANR	1101804	CallExpression	INVERT ( - 2 )		1101467	0					
ANR	1101805	Callee	INVERT		1101467	0					
ANR	1101806	Identifier	INVERT		1101467	0					
ANR	1101807	ArgumentList	- 2		1101467	1					
ANR	1101808	Argument	- 2		1101467	0					
ANR	1101809	UnaryOperationExpression	- 2		1101467	0					
ANR	1101810	UnaryOperator	-		1101467	0					
ANR	1101811	PrimaryExpression	2		1101467	1					
ANR	1101812	Statement	case	203:8:6647:6650	1101467	43	True				
ANR	1101813	Statement	-	203:13:6652:6652	1101467	44	True				
ANR	1101814	Label	1 :	203:14:6653:6654	1101467	45	True				
ANR	1101815	ExpressionStatement	INVERT ( - 1 )	203:17:6656:6666	1101467	46	True				
ANR	1101816	CallExpression	INVERT ( - 1 )		1101467	0					
ANR	1101817	Callee	INVERT		1101467	0					
ANR	1101818	Identifier	INVERT		1101467	0					
ANR	1101819	ArgumentList	- 1		1101467	1					
ANR	1101820	Argument	- 1		1101467	0					
ANR	1101821	UnaryOperationExpression	- 1		1101467	0					
ANR	1101822	UnaryOperator	-		1101467	0					
ANR	1101823	PrimaryExpression	1		1101467	1					
ANR	1101824	Statement	undef	205:1:6675:6679	1101467	23	True				
ANR	1101825	Statement	INVERT_DATA	205:7:6681:6691	1101467	24	True				
ANR	1101826	Statement	undef	206:1:6694:6698	1101467	25	True				
ANR	1101827	Statement	INVERT	206:7:6700:6705	1101467	26	True				
ANR	1101828	ReturnStatement	return 0 ;	207:4:6711:6719	1101467	27	True				
ANR	1101829	PrimaryExpression	0		1101467	0					
ANR	1101830	ReturnType	static int		1101467	1					
ANR	1101831	Identifier	render_ht_default		1101467	2					
ANR	1101832	ParameterList	"gx_ht_tile * pbt , int level , const gx_ht_order * porder"		1101467	3					
ANR	1101833	Parameter	gx_ht_tile * pbt	150:18:4923:4937	1101467	0	True				
ANR	1101834	ParameterType	gx_ht_tile *		1101467	0					
ANR	1101835	Identifier	pbt		1101467	1					
ANR	1101836	Parameter	int level	150:35:4940:4948	1101467	1	True				
ANR	1101837	ParameterType	int		1101467	0					
ANR	1101838	Identifier	level		1101467	1					
ANR	1101839	Parameter	const gx_ht_order * porder	150:46:4951:4975	1101467	2	True				
ANR	1101840	ParameterType	const gx_ht_order *		1101467	0					
ANR	1101841	Identifier	porder		1101467	1					
ANR	1101842	CFGEntryNode	ENTRY		1101467		True				
ANR	1101843	CFGExitNode	EXIT		1101467		True				
ANR	1101844	Symbol	pbt -> tiles . data		1101467						
ANR	1101845	Symbol	pbt		1101467						
ANR	1101846	Symbol	data		1101467						
ANR	1101847	Symbol	level		1101467						
ANR	1101848	Symbol	i		1101467						
ANR	1101849	Symbol	* pbt		1101467						
ANR	1101850	Symbol	dp		1101467						
ANR	1101851	Symbol	p [ i ] . offset		1101467						
ANR	1101852	Symbol	porder		1101467						
ANR	1101853	Symbol	p		1101467						
ANR	1101854	Symbol	* dp		1101467						
ANR	1101855	Symbol	p [ i ] . mask		1101467						
ANR	1101856	Symbol	porder -> bit_data		1101467						
ANR	1101857	Symbol	* i		1101467						
ANR	1101858	Symbol	old_level		1101467						
ANR	1101859	Symbol	pbt -> tiles		1101467						
ANR	1101860	Symbol	if_debug3		1101467						
ANR	1101861	Symbol	* p		1101467						
ANR	1101862	Symbol	* porder		1101467						
ANR	1101863	Symbol	pbt -> level		1101467						
ANR	1101864	Function	render_ht_short	211:0:6785:8378							
ANR	1101865	FunctionDef	"render_ht_short (gx_ht_tile * pbt , int level , const gx_ht_order * porder)"		1101864	0					
ANR	1101866	CompoundStatement		213:0:6867:8378	1101864	0					
ANR	1101867	IdentifierDeclStatement	int old_level = pbt -> level ;	214:4:6873:6899	1101864	0	True				
ANR	1101868	IdentifierDecl	old_level = pbt -> level		1101864	0					
ANR	1101869	IdentifierDeclType	int		1101864	0					
ANR	1101870	Identifier	old_level		1101864	1					
ANR	1101871	AssignmentExpression	old_level = pbt -> level		1101864	2		=			
ANR	1101872	Identifier	old_level		1101864	0					
ANR	1101873	PtrMemberAccess	pbt -> level		1101864	1					
ANR	1101874	Identifier	pbt		1101864	0					
ANR	1101875	Identifier	level		1101864	1					
ANR	1101876	Statement	register	215:4:6905:6912	1101864	1	True				
ANR	1101877	IdentifierDeclStatement	const ushort * p = ( const ushort * ) porder -> bit_data + old_level ;	215:13:6914:6976	1101864	2	True				
ANR	1101878	IdentifierDecl	* p = ( const ushort * ) porder -> bit_data + old_level		1101864	0					
ANR	1101879	IdentifierDeclType	const ushort *		1101864	0					
ANR	1101880	Identifier	p		1101864	1					
ANR	1101881	AssignmentExpression	* p = ( const ushort * ) porder -> bit_data + old_level		1101864	2		=			
ANR	1101882	Identifier	p		1101864	0					
ANR	1101883	AdditiveExpression	( const ushort * ) porder -> bit_data + old_level		1101864	1		+			
ANR	1101884	CastExpression	( const ushort * ) porder -> bit_data		1101864	0					
ANR	1101885	CastTarget	const ushort *		1101864	0					
ANR	1101886	PtrMemberAccess	porder -> bit_data		1101864	1					
ANR	1101887	Identifier	porder		1101864	0					
ANR	1101888	Identifier	bit_data		1101864	1					
ANR	1101889	Identifier	old_level		1101864	1					
ANR	1101890	Statement	register	216:4:6982:6989	1101864	3	True				
ANR	1101891	IdentifierDeclStatement	byte * data = pbt -> tiles . data ;	216:13:6991:7019	1101864	4	True				
ANR	1101892	IdentifierDecl	* data = pbt -> tiles . data		1101864	0					
ANR	1101893	IdentifierDeclType	byte *		1101864	0					
ANR	1101894	Identifier	data		1101864	1					
ANR	1101895	AssignmentExpression	* data = pbt -> tiles . data		1101864	2		=			
ANR	1101896	Identifier	data		1101864	0					
ANR	1101897	MemberAccess	pbt -> tiles . data		1101864	1					
ANR	1101898	PtrMemberAccess	pbt -> tiles		1101864	0					
ANR	1101899	Identifier	pbt		1101864	0					
ANR	1101900	Identifier	tiles		1101864	1					
ANR	1101901	Identifier	data		1101864	1					
ANR	1101902	Statement	define	219:1:7069:7074	1101864	5	True				
ANR	1101903	Statement	INVERT_DATA	219:8:7076:7086	1101864	6	True				
ANR	1101904	Statement	(	219:19:7087:7087	1101864	7	True				
ANR	1101905	Statement	i	219:20:7088:7088	1101864	8	True				
ANR	1101906	Statement	)	219:21:7089:7089	1101864	9	True				
ANR	1101907	IdentifierDeclStatement	BEGIN uint bit_index = p [ i ] ;	220:5:7097:7132	1101864	10	True				
ANR	1101908	IdentifierDecl	bit_index = p [ i ]		1101864	0					
ANR	1101909	IdentifierDeclType	BEGIN uint		1101864	0					
ANR	1101910	Identifier	bit_index		1101864	1					
ANR	1101911	AssignmentExpression	bit_index = p [ i ]		1101864	2		=			
ANR	1101912	Identifier	bit_index		1101864	0					
ANR	1101913	ArrayIndexing	p [ i ]		1101864	1					
ANR	1101914	Identifier	p		1101864	0					
ANR	1101915	Identifier	i		1101864	1					
ANR	1101916	IdentifierDeclStatement	byte * dp = & data [ bit_index >> 3 ] ;	222:7:7142:7174	1101864	11	True				
ANR	1101917	IdentifierDecl	* dp = & data [ bit_index >> 3 ]		1101864	0					
ANR	1101918	IdentifierDeclType	byte *		1101864	0					
ANR	1101919	Identifier	dp		1101864	1					
ANR	1101920	AssignmentExpression	* dp = & data [ bit_index >> 3 ]		1101864	2		=			
ANR	1101921	Identifier	dp		1101864	0					
ANR	1101922	UnaryOperationExpression	& data [ bit_index >> 3 ]		1101864	1					
ANR	1101923	UnaryOperator	&		1101864	0					
ANR	1101924	ArrayIndexing	data [ bit_index >> 3 ]		1101864	1					
ANR	1101925	Identifier	data		1101864	0					
ANR	1101926	ShiftExpression	bit_index >> 3		1101864	1		>>			
ANR	1101927	Identifier	bit_index		1101864	0					
ANR	1101928	PrimaryExpression	3		1101864	1					
ANR	1101929	ExpressionStatement	* dp ^= 0x80 >> ( bit_index & 7 )	223:7:7184:7214	1101864	12	True				
ANR	1101930	AssignmentExpression	* dp ^= 0x80 >> ( bit_index & 7 )		1101864	0		^=			
ANR	1101931	UnaryOperationExpression	* dp		1101864	0					
ANR	1101932	UnaryOperator	*		1101864	0					
ANR	1101933	Identifier	dp		1101864	1					
ANR	1101934	ShiftExpression	0x80 >> ( bit_index & 7 )		1101864	1		>>			
ANR	1101935	PrimaryExpression	0x80		1101864	0					
ANR	1101936	BitAndExpression	bit_index & 7		1101864	1		&			
ANR	1101937	Identifier	bit_index		1101864	0					
ANR	1101938	PrimaryExpression	7		1101864	1					
ANR	1101939	Statement	END	224:5:7222:7224	1101864	13	True				
ANR	1101940	Statement	define	226:3:7242:7247	1101864	14	True				
ANR	1101941	Statement	INVERT	226:10:7249:7254	1101864	15	True				
ANR	1101942	Statement	(	226:16:7255:7255	1101864	16	True				
ANR	1101943	Statement	i	226:17:7256:7256	1101864	17	True				
ANR	1101944	Statement	)	226:18:7257:7257	1101864	18	True				
ANR	1101945	IdentifierDeclStatement	"BEGIN if_debug3 ( 'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 ) ) ;"	227:5:7265:7453	1101864	19	True				
ANR	1101946	IdentifierDecl	"if_debug3 ( 'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 ) )"		1101864	0					
ANR	1101947	IdentifierDeclType	BEGIN		1101864	0					
ANR	1101948	Identifier	if_debug3		1101864	1					
ANR	1101949	Expression	"'H' , ""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 )"		1101864	2					
ANR	1101950	PrimaryExpression	'H'		1101864	0					
ANR	1101951	Expression	"""[H]invert level=%d offset=%u mask=0x%x\\n"" , ( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 )"		1101864	1					
ANR	1101952	PrimaryExpression	"""[H]invert level=%d offset=%u mask=0x%x\\n"""		1101864	0					
ANR	1101953	Expression	"( int ) ( p + i - ( const ushort * ) porder -> bit_data ) , p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 )"		1101864	1					
ANR	1101954	CastExpression	( int ) ( p + i - ( const ushort * ) porder -> bit_data )		1101864	0					
ANR	1101955	CastTarget	int		1101864	0					
ANR	1101956	AdditiveExpression	p + i - ( const ushort * ) porder -> bit_data		1101864	1		+			
ANR	1101957	Identifier	p		1101864	0					
ANR	1101958	AdditiveExpression	i - ( const ushort * ) porder -> bit_data		1101864	1		-			
ANR	1101959	Identifier	i		1101864	0					
ANR	1101960	CastExpression	( const ushort * ) porder -> bit_data		1101864	1					
ANR	1101961	CastTarget	const ushort *		1101864	0					
ANR	1101962	PtrMemberAccess	porder -> bit_data		1101864	1					
ANR	1101963	Identifier	porder		1101864	0					
ANR	1101964	Identifier	bit_data		1101864	1					
ANR	1101965	Expression	"p [ i ] >> 3 , 0x80 >> ( p [ i ] & 7 )"		1101864	1					
ANR	1101966	ShiftExpression	p [ i ] >> 3		1101864	0		>>			
ANR	1101967	ArrayIndexing	p [ i ]		1101864	0					
ANR	1101968	Identifier	p		1101864	0					
ANR	1101969	Identifier	i		1101864	1					
ANR	1101970	PrimaryExpression	3		1101864	1					
ANR	1101971	ShiftExpression	0x80 >> ( p [ i ] & 7 )		1101864	1		>>			
ANR	1101972	PrimaryExpression	0x80		1101864	0					
ANR	1101973	BitAndExpression	p [ i ] & 7		1101864	1		&			
ANR	1101974	ArrayIndexing	p [ i ]		1101864	0					
ANR	1101975	Identifier	p		1101864	0					
ANR	1101976	Identifier	i		1101864	1					
ANR	1101977	PrimaryExpression	7		1101864	1					
ANR	1101978	ExpressionStatement	INVERT_DATA ( i )	231:7:7463:7477	1101864	20	True				
ANR	1101979	CallExpression	INVERT_DATA ( i )		1101864	0					
ANR	1101980	Callee	INVERT_DATA		1101864	0					
ANR	1101981	Identifier	INVERT_DATA		1101864	0					
ANR	1101982	ArgumentList	i		1101864	1					
ANR	1101983	Argument	i		1101864	0					
ANR	1101984	Identifier	i		1101864	0					
ANR	1101985	Statement	END	232:5:7485:7487	1101864	21	True				
ANR	1101986	Label	sw :	236:2:7539:7541	1101864	22	True				
ANR	1101987	Identifier	sw		1101864	0					
ANR	1101988	SwitchStatement	switch ( level - old_level )		1101864	23					
ANR	1101989	Condition	level - old_level	236:13:7550:7566	1101864	0	True				
ANR	1101990	AdditiveExpression	level - old_level		1101864	0		-			
ANR	1101991	Identifier	level		1101864	0					
ANR	1101992	Identifier	old_level		1101864	1					
ANR	1101993	CompoundStatement		24:32:701:701	1101864	1					
ANR	1101994	Label	default :	237:8:7579:7586	1101864	0	True				
ANR	1101995	Identifier	default		1101864	0					
ANR	1101996	IfStatement	if ( level > old_level )		1101864	1					
ANR	1101997	Condition	level > old_level	238:16:7604:7620	1101864	0	True				
ANR	1101998	RelationalExpression	level > old_level		1101864	0		>			
ANR	1101999	Identifier	level		1101864	0					
ANR	1102000	Identifier	old_level		1101864	1					
ANR	1102001	CompoundStatement		26:35:755:755	1101864	1					
ANR	1102002	ExpressionStatement	INVERT ( 0 )	239:16:7641:7650	1101864	0	True				
ANR	1102003	CallExpression	INVERT ( 0 )		1101864	0					
ANR	1102004	Callee	INVERT		1101864	0					
ANR	1102005	Identifier	INVERT		1101864	0					
ANR	1102006	ArgumentList	0		1101864	1					
ANR	1102007	Argument	0		1101864	0					
ANR	1102008	PrimaryExpression	0		1101864	0					
ANR	1102009	ExpressionStatement	INVERT ( 1 )	239:27:7652:7661	1101864	1	True				
ANR	1102010	CallExpression	INVERT ( 1 )		1101864	0					
ANR	1102011	Callee	INVERT		1101864	0					
ANR	1102012	Identifier	INVERT		1101864	0					
ANR	1102013	ArgumentList	1		1101864	1					
ANR	1102014	Argument	1		1101864	0					
ANR	1102015	PrimaryExpression	1		1101864	0					
ANR	1102016	ExpressionStatement	INVERT ( 2 )	239:38:7663:7672	1101864	2	True				
ANR	1102017	CallExpression	INVERT ( 2 )		1101864	0					
ANR	1102018	Callee	INVERT		1101864	0					
ANR	1102019	Identifier	INVERT		1101864	0					
ANR	1102020	ArgumentList	2		1101864	1					
ANR	1102021	Argument	2		1101864	0					
ANR	1102022	PrimaryExpression	2		1101864	0					
ANR	1102023	ExpressionStatement	INVERT ( 3 )	239:49:7674:7683	1101864	3	True				
ANR	1102024	CallExpression	INVERT ( 3 )		1101864	0					
ANR	1102025	Callee	INVERT		1101864	0					
ANR	1102026	Identifier	INVERT		1101864	0					
ANR	1102027	ArgumentList	3		1101864	1					
ANR	1102028	Argument	3		1101864	0					
ANR	1102029	PrimaryExpression	3		1101864	0					
ANR	1102030	ExpressionStatement	p += 4	240:16:7701:7707	1101864	4	True				
ANR	1102031	AssignmentExpression	p += 4		1101864	0		+=			
ANR	1102032	Identifier	p		1101864	0					
ANR	1102033	PrimaryExpression	4		1101864	1					
ANR	1102034	ExpressionStatement	old_level += 4	240:24:7709:7723	1101864	5	True				
ANR	1102035	AssignmentExpression	old_level += 4		1101864	0		+=			
ANR	1102036	Identifier	old_level		1101864	0					
ANR	1102037	PrimaryExpression	4		1101864	1					
ANR	1102038	ElseStatement	else		1101864	0					
ANR	1102039	CompoundStatement		29:19:876:876	1101864	0					
ANR	1102040	ExpressionStatement	INVERT ( - 1 )	242:16:7762:7772	1101864	0	True				
ANR	1102041	CallExpression	INVERT ( - 1 )		1101864	0					
ANR	1102042	Callee	INVERT		1101864	0					
ANR	1102043	Identifier	INVERT		1101864	0					
ANR	1102044	ArgumentList	- 1		1101864	1					
ANR	1102045	Argument	- 1		1101864	0					
ANR	1102046	UnaryOperationExpression	- 1		1101864	0					
ANR	1102047	UnaryOperator	-		1101864	0					
ANR	1102048	PrimaryExpression	1		1101864	1					
ANR	1102049	ExpressionStatement	INVERT ( - 2 )	242:28:7774:7784	1101864	1	True				
ANR	1102050	CallExpression	INVERT ( - 2 )		1101864	0					
ANR	1102051	Callee	INVERT		1101864	0					
ANR	1102052	Identifier	INVERT		1101864	0					
ANR	1102053	ArgumentList	- 2		1101864	1					
ANR	1102054	Argument	- 2		1101864	0					
ANR	1102055	UnaryOperationExpression	- 2		1101864	0					
ANR	1102056	UnaryOperator	-		1101864	0					
ANR	1102057	PrimaryExpression	2		1101864	1					
ANR	1102058	ExpressionStatement	INVERT ( - 3 )	242:40:7786:7796	1101864	2	True				
ANR	1102059	CallExpression	INVERT ( - 3 )		1101864	0					
ANR	1102060	Callee	INVERT		1101864	0					
ANR	1102061	Identifier	INVERT		1101864	0					
ANR	1102062	ArgumentList	- 3		1101864	1					
ANR	1102063	Argument	- 3		1101864	0					
ANR	1102064	UnaryOperationExpression	- 3		1101864	0					
ANR	1102065	UnaryOperator	-		1101864	0					
ANR	1102066	PrimaryExpression	3		1101864	1					
ANR	1102067	ExpressionStatement	INVERT ( - 4 )	242:52:7798:7808	1101864	3	True				
ANR	1102068	CallExpression	INVERT ( - 4 )		1101864	0					
ANR	1102069	Callee	INVERT		1101864	0					
ANR	1102070	Identifier	INVERT		1101864	0					
ANR	1102071	ArgumentList	- 4		1101864	1					
ANR	1102072	Argument	- 4		1101864	0					
ANR	1102073	UnaryOperationExpression	- 4		1101864	0					
ANR	1102074	UnaryOperator	-		1101864	0					
ANR	1102075	PrimaryExpression	4		1101864	1					
ANR	1102076	ExpressionStatement	p -= 4	243:16:7826:7832	1101864	4	True				
ANR	1102077	AssignmentExpression	p -= 4		1101864	0		-=			
ANR	1102078	Identifier	p		1101864	0					
ANR	1102079	PrimaryExpression	4		1101864	1					
ANR	1102080	ExpressionStatement	old_level -= 4	243:24:7834:7848	1101864	5	True				
ANR	1102081	AssignmentExpression	old_level -= 4		1101864	0		-=			
ANR	1102082	Identifier	old_level		1101864	0					
ANR	1102083	PrimaryExpression	4		1101864	1					
ANR	1102084	GotoStatement	goto sw ;	245:12:7876:7883	1101864	2	True				
ANR	1102085	Identifier	sw		1101864	0					
ANR	1102086	Label	case 7 :	246:8:7893:7899	1101864	3	True				
ANR	1102087	ExpressionStatement	INVERT ( 6 )	246:16:7901:7910	1101864	4	True				
ANR	1102088	CallExpression	INVERT ( 6 )		1101864	0					
ANR	1102089	Callee	INVERT		1101864	0					
ANR	1102090	Identifier	INVERT		1101864	0					
ANR	1102091	ArgumentList	6		1101864	1					
ANR	1102092	Argument	6		1101864	0					
ANR	1102093	PrimaryExpression	6		1101864	0					
ANR	1102094	Label	case 6 :	247:8:7920:7926	1101864	5	True				
ANR	1102095	ExpressionStatement	INVERT ( 5 )	247:16:7928:7937	1101864	6	True				
ANR	1102096	CallExpression	INVERT ( 5 )		1101864	0					
ANR	1102097	Callee	INVERT		1101864	0					
ANR	1102098	Identifier	INVERT		1101864	0					
ANR	1102099	ArgumentList	5		1101864	1					
ANR	1102100	Argument	5		1101864	0					
ANR	1102101	PrimaryExpression	5		1101864	0					
ANR	1102102	Label	case 5 :	248:8:7947:7953	1101864	7	True				
ANR	1102103	ExpressionStatement	INVERT ( 4 )	248:16:7955:7964	1101864	8	True				
ANR	1102104	CallExpression	INVERT ( 4 )		1101864	0					
ANR	1102105	Callee	INVERT		1101864	0					
ANR	1102106	Identifier	INVERT		1101864	0					
ANR	1102107	ArgumentList	4		1101864	1					
ANR	1102108	Argument	4		1101864	0					
ANR	1102109	PrimaryExpression	4		1101864	0					
ANR	1102110	Label	case 4 :	249:8:7974:7980	1101864	9	True				
ANR	1102111	ExpressionStatement	INVERT ( 3 )	249:16:7982:7991	1101864	10	True				
ANR	1102112	CallExpression	INVERT ( 3 )		1101864	0					
ANR	1102113	Callee	INVERT		1101864	0					
ANR	1102114	Identifier	INVERT		1101864	0					
ANR	1102115	ArgumentList	3		1101864	1					
ANR	1102116	Argument	3		1101864	0					
ANR	1102117	PrimaryExpression	3		1101864	0					
ANR	1102118	Label	case 3 :	250:8:8001:8007	1101864	11	True				
ANR	1102119	ExpressionStatement	INVERT ( 2 )	250:16:8009:8018	1101864	12	True				
ANR	1102120	CallExpression	INVERT ( 2 )		1101864	0					
ANR	1102121	Callee	INVERT		1101864	0					
ANR	1102122	Identifier	INVERT		1101864	0					
ANR	1102123	ArgumentList	2		1101864	1					
ANR	1102124	Argument	2		1101864	0					
ANR	1102125	PrimaryExpression	2		1101864	0					
ANR	1102126	Label	case 2 :	251:8:8028:8034	1101864	13	True				
ANR	1102127	ExpressionStatement	INVERT ( 1 )	251:16:8036:8045	1101864	14	True				
ANR	1102128	CallExpression	INVERT ( 1 )		1101864	0					
ANR	1102129	Callee	INVERT		1101864	0					
ANR	1102130	Identifier	INVERT		1101864	0					
ANR	1102131	ArgumentList	1		1101864	1					
ANR	1102132	Argument	1		1101864	0					
ANR	1102133	PrimaryExpression	1		1101864	0					
ANR	1102134	Label	case 1 :	252:8:8055:8061	1101864	15	True				
ANR	1102135	ExpressionStatement	INVERT ( 0 )	252:16:8063:8072	1101864	16	True				
ANR	1102136	CallExpression	INVERT ( 0 )		1101864	0					
ANR	1102137	Callee	INVERT		1101864	0					
ANR	1102138	Identifier	INVERT		1101864	0					
ANR	1102139	ArgumentList	0		1101864	1					
ANR	1102140	Argument	0		1101864	0					
ANR	1102141	PrimaryExpression	0		1101864	0					
ANR	1102142	Label	case 0 :	253:8:8082:8088	1101864	17	True				
ANR	1102143	BreakStatement	break ;	253:16:8090:8095	1101864	18	True				
ANR	1102144	Statement	case	254:8:8130:8133	1101864	19	True				
ANR	1102145	Statement	-	254:13:8135:8135	1101864	20	True				
ANR	1102146	Label	7 :	254:14:8136:8137	1101864	21	True				
ANR	1102147	ExpressionStatement	INVERT ( - 7 )	254:17:8139:8149	1101864	22	True				
ANR	1102148	CallExpression	INVERT ( - 7 )		1101864	0					
ANR	1102149	Callee	INVERT		1101864	0					
ANR	1102150	Identifier	INVERT		1101864	0					
ANR	1102151	ArgumentList	- 7		1101864	1					
ANR	1102152	Argument	- 7		1101864	0					
ANR	1102153	UnaryOperationExpression	- 7		1101864	0					
ANR	1102154	UnaryOperator	-		1101864	0					
ANR	1102155	PrimaryExpression	7		1101864	1					
ANR	1102156	Statement	case	255:8:8159:8162	1101864	23	True				
ANR	1102157	Statement	-	255:13:8164:8164	1101864	24	True				
ANR	1102158	Label	6 :	255:14:8165:8166	1101864	25	True				
ANR	1102159	ExpressionStatement	INVERT ( - 6 )	255:17:8168:8178	1101864	26	True				
ANR	1102160	CallExpression	INVERT ( - 6 )		1101864	0					
ANR	1102161	Callee	INVERT		1101864	0					
ANR	1102162	Identifier	INVERT		1101864	0					
ANR	1102163	ArgumentList	- 6		1101864	1					
ANR	1102164	Argument	- 6		1101864	0					
ANR	1102165	UnaryOperationExpression	- 6		1101864	0					
ANR	1102166	UnaryOperator	-		1101864	0					
ANR	1102167	PrimaryExpression	6		1101864	1					
ANR	1102168	Statement	case	256:8:8188:8191	1101864	27	True				
ANR	1102169	Statement	-	256:13:8193:8193	1101864	28	True				
ANR	1102170	Label	5 :	256:14:8194:8195	1101864	29	True				
ANR	1102171	ExpressionStatement	INVERT ( - 5 )	256:17:8197:8207	1101864	30	True				
ANR	1102172	CallExpression	INVERT ( - 5 )		1101864	0					
ANR	1102173	Callee	INVERT		1101864	0					
ANR	1102174	Identifier	INVERT		1101864	0					
ANR	1102175	ArgumentList	- 5		1101864	1					
ANR	1102176	Argument	- 5		1101864	0					
ANR	1102177	UnaryOperationExpression	- 5		1101864	0					
ANR	1102178	UnaryOperator	-		1101864	0					
ANR	1102179	PrimaryExpression	5		1101864	1					
ANR	1102180	Statement	case	257:8:8217:8220	1101864	31	True				
ANR	1102181	Statement	-	257:13:8222:8222	1101864	32	True				
ANR	1102182	Label	4 :	257:14:8223:8224	1101864	33	True				
ANR	1102183	ExpressionStatement	INVERT ( - 4 )	257:17:8226:8236	1101864	34	True				
ANR	1102184	CallExpression	INVERT ( - 4 )		1101864	0					
ANR	1102185	Callee	INVERT		1101864	0					
ANR	1102186	Identifier	INVERT		1101864	0					
ANR	1102187	ArgumentList	- 4		1101864	1					
ANR	1102188	Argument	- 4		1101864	0					
ANR	1102189	UnaryOperationExpression	- 4		1101864	0					
ANR	1102190	UnaryOperator	-		1101864	0					
ANR	1102191	PrimaryExpression	4		1101864	1					
ANR	1102192	Statement	case	258:8:8246:8249	1101864	35	True				
ANR	1102193	Statement	-	258:13:8251:8251	1101864	36	True				
ANR	1102194	Label	3 :	258:14:8252:8253	1101864	37	True				
ANR	1102195	ExpressionStatement	INVERT ( - 3 )	258:17:8255:8265	1101864	38	True				
ANR	1102196	CallExpression	INVERT ( - 3 )		1101864	0					
ANR	1102197	Callee	INVERT		1101864	0					
ANR	1102198	Identifier	INVERT		1101864	0					
ANR	1102199	ArgumentList	- 3		1101864	1					
ANR	1102200	Argument	- 3		1101864	0					
ANR	1102201	UnaryOperationExpression	- 3		1101864	0					
ANR	1102202	UnaryOperator	-		1101864	0					
ANR	1102203	PrimaryExpression	3		1101864	1					
ANR	1102204	Statement	case	259:8:8275:8278	1101864	39	True				
ANR	1102205	Statement	-	259:13:8280:8280	1101864	40	True				
ANR	1102206	Label	2 :	259:14:8281:8282	1101864	41	True				
ANR	1102207	ExpressionStatement	INVERT ( - 2 )	259:17:8284:8294	1101864	42	True				
ANR	1102208	CallExpression	INVERT ( - 2 )		1101864	0					
ANR	1102209	Callee	INVERT		1101864	0					
ANR	1102210	Identifier	INVERT		1101864	0					
ANR	1102211	ArgumentList	- 2		1101864	1					
ANR	1102212	Argument	- 2		1101864	0					
ANR	1102213	UnaryOperationExpression	- 2		1101864	0					
ANR	1102214	UnaryOperator	-		1101864	0					
ANR	1102215	PrimaryExpression	2		1101864	1					
ANR	1102216	Statement	case	260:8:8304:8307	1101864	43	True				
ANR	1102217	Statement	-	260:13:8309:8309	1101864	44	True				
ANR	1102218	Label	1 :	260:14:8310:8311	1101864	45	True				
ANR	1102219	ExpressionStatement	INVERT ( - 1 )	260:17:8313:8323	1101864	46	True				
ANR	1102220	CallExpression	INVERT ( - 1 )		1101864	0					
ANR	1102221	Callee	INVERT		1101864	0					
ANR	1102222	Identifier	INVERT		1101864	0					
ANR	1102223	ArgumentList	- 1		1101864	1					
ANR	1102224	Argument	- 1		1101864	0					
ANR	1102225	UnaryOperationExpression	- 1		1101864	0					
ANR	1102226	UnaryOperator	-		1101864	0					
ANR	1102227	PrimaryExpression	1		1101864	1					
ANR	1102228	Statement	undef	262:1:8332:8336	1101864	24	True				
ANR	1102229	Statement	INVERT_DATA	262:7:8338:8348	1101864	25	True				
ANR	1102230	Statement	undef	263:1:8351:8355	1101864	26	True				
ANR	1102231	Statement	INVERT	263:7:8357:8362	1101864	27	True				
ANR	1102232	ReturnStatement	return 0 ;	264:4:8368:8376	1101864	28	True				
ANR	1102233	PrimaryExpression	0		1101864	0					
ANR	1102234	ReturnType	static int		1101864	1					
ANR	1102235	Identifier	render_ht_short		1101864	2					
ANR	1102236	ParameterList	"gx_ht_tile * pbt , int level , const gx_ht_order * porder"		1101864	3					
ANR	1102237	Parameter	gx_ht_tile * pbt	212:16:6812:6826	1101864	0	True				
ANR	1102238	ParameterType	gx_ht_tile *		1101864	0					
ANR	1102239	Identifier	pbt		1101864	1					
ANR	1102240	Parameter	int level	212:33:6829:6837	1101864	1	True				
ANR	1102241	ParameterType	int		1101864	0					
ANR	1102242	Identifier	level		1101864	1					
ANR	1102243	Parameter	const gx_ht_order * porder	212:44:6840:6864	1101864	2	True				
ANR	1102244	ParameterType	const gx_ht_order *		1101864	0					
ANR	1102245	Identifier	porder		1101864	1					
ANR	1102246	CFGEntryNode	ENTRY		1101864		True				
ANR	1102247	CFGExitNode	EXIT		1101864		True				
ANR	1102248	Symbol	pbt -> tiles . data		1101864						
ANR	1102249	Symbol	pbt		1101864						
ANR	1102250	Symbol	data		1101864						
ANR	1102251	Symbol	level		1101864						
ANR	1102252	Symbol	i		1101864						
ANR	1102253	Symbol	* pbt		1101864						
ANR	1102254	Symbol	dp		1101864						
ANR	1102255	Symbol	porder		1101864						
ANR	1102256	Symbol	p		1101864						
ANR	1102257	Symbol	* dp		1101864						
ANR	1102258	Symbol	porder -> bit_data		1101864						
ANR	1102259	Symbol	* i		1101864						
ANR	1102260	Symbol	old_level		1101864						
ANR	1102261	Symbol	pbt -> tiles		1101864						
ANR	1102262	Symbol	bit_index		1101864						
ANR	1102263	Symbol	if_debug3		1101864						
ANR	1102264	Symbol	* p		1101864						
ANR	1102265	Symbol	* porder		1101864						
ANR	1102266	Symbol	pbt -> level		1101864						
ANR	1102267	DeclStmt									
ANR	1102268	Decl							const gx_ht_order_procs_t	const gx_ht_order_procs_t [ 2 ]	ht_order_procs_table
