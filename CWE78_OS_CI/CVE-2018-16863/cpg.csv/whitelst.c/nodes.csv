command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	10707266	File	data/converged/CVE-2018-16863_ghostpdl/whitelst.c								
ANR	10707267	Function	whitelist_strncmp	524:0:8447:9323							
ANR	10707268	FunctionDef	"whitelist_strncmp (const char * s1 , const char * s2 , int length)"		10707267	0					
ANR	10707269	CompoundStatement		525:0:8520:9323	10707267	0					
ANR	10707270	IdentifierDeclStatement	"int s1_index , s2_index , result = 0 ;"	526:4:8526:8560	10707267	0	True				
ANR	10707271	IdentifierDecl	s1_index		10707267	0					
ANR	10707272	IdentifierDeclType	int		10707267	0					
ANR	10707273	Identifier	s1_index		10707267	1					
ANR	10707274	IdentifierDecl	s2_index		10707267	1					
ANR	10707275	IdentifierDeclType	int		10707267	0					
ANR	10707276	Identifier	s2_index		10707267	1					
ANR	10707277	IdentifierDecl	result = 0		10707267	2					
ANR	10707278	IdentifierDeclType	int		10707267	0					
ANR	10707279	Identifier	result		10707267	1					
ANR	10707280	AssignmentExpression	result = 0		10707267	2		=			
ANR	10707281	Identifier	result		10707267	0					
ANR	10707282	PrimaryExpression	0		10707267	1					
ANR	10707283	ExpressionStatement	s1_index = s2_index = 0	528:4:8567:8590	10707267	1	True				
ANR	10707284	AssignmentExpression	s1_index = s2_index = 0		10707267	0		=			
ANR	10707285	Identifier	s1_index		10707267	0					
ANR	10707286	AssignmentExpression	s2_index = 0		10707267	1		=			
ANR	10707287	Identifier	s2_index		10707267	0					
ANR	10707288	PrimaryExpression	0		10707267	1					
ANR	10707289	WhileStatement	while ( s2_index < length && s1 [ s1_index ] != 0x00 )		10707267	2					
ANR	10707290	Condition	s2_index < length && s1 [ s1_index ] != 0x00	530:11:8604:8644	10707267	0	True				
ANR	10707291	AndExpression	s2_index < length && s1 [ s1_index ] != 0x00		10707267	0		&&			
ANR	10707292	RelationalExpression	s2_index < length		10707267	0		<			
ANR	10707293	Identifier	s2_index		10707267	0					
ANR	10707294	Identifier	length		10707267	1					
ANR	10707295	EqualityExpression	s1 [ s1_index ] != 0x00		10707267	1		!=			
ANR	10707296	ArrayIndexing	s1 [ s1_index ]		10707267	0					
ANR	10707297	Identifier	s1		10707267	0					
ANR	10707298	Identifier	s1_index		10707267	1					
ANR	10707299	PrimaryExpression	0x00		10707267	1					
ANR	10707300	CompoundStatement		6:54:126:126	10707267	1					
ANR	10707301	WhileStatement	while ( s1 [ s1_index ] == ' ' )		10707267	0					
ANR	10707302	Condition	s1 [ s1_index ] == ' '	531:15:8664:8682	10707267	0	True				
ANR	10707303	EqualityExpression	s1 [ s1_index ] == ' '		10707267	0		==			
ANR	10707304	ArrayIndexing	s1 [ s1_index ]		10707267	0					
ANR	10707305	Identifier	s1		10707267	0					
ANR	10707306	Identifier	s1_index		10707267	1					
ANR	10707307	PrimaryExpression	' '		10707267	1					
ANR	10707308	ExpressionStatement	s1_index ++	532:12:8697:8707	10707267	1	True				
ANR	10707309	PostIncDecOperationExpression	s1_index ++		10707267	0					
ANR	10707310	Identifier	s1_index		10707267	0					
ANR	10707311	IncDec	++		10707267	1					
ANR	10707312	WhileStatement	while ( s2 [ s2_index ] == ' ' && s2_index < length )		10707267	1					
ANR	10707313	Condition	s2 [ s2_index ] == ' ' && s2_index < length	533:15:8724:8763	10707267	0	True				
ANR	10707314	AndExpression	s2 [ s2_index ] == ' ' && s2_index < length		10707267	0		&&			
ANR	10707315	EqualityExpression	s2 [ s2_index ] == ' '		10707267	0		==			
ANR	10707316	ArrayIndexing	s2 [ s2_index ]		10707267	0					
ANR	10707317	Identifier	s2		10707267	0					
ANR	10707318	Identifier	s2_index		10707267	1					
ANR	10707319	PrimaryExpression	' '		10707267	1					
ANR	10707320	RelationalExpression	s2_index < length		10707267	1		<			
ANR	10707321	Identifier	s2_index		10707267	0					
ANR	10707322	Identifier	length		10707267	1					
ANR	10707323	ExpressionStatement	s2_index ++	534:12:8778:8788	10707267	1	True				
ANR	10707324	PostIncDecOperationExpression	s2_index ++		10707267	0					
ANR	10707325	Identifier	s2_index		10707267	0					
ANR	10707326	IncDec	++		10707267	1					
ANR	10707327	IfStatement	if ( s2_index > length )		10707267	2					
ANR	10707328	Condition	s2_index > length	535:12:8802:8818	10707267	0	True				
ANR	10707329	RelationalExpression	s2_index > length		10707267	0		>			
ANR	10707330	Identifier	s2_index		10707267	0					
ANR	10707331	Identifier	length		10707267	1					
ANR	10707332	CompoundStatement		11:31:300:300	10707267	1					
ANR	10707333	IfStatement	if ( s1 [ s1_index ] == 0x00 )		10707267	0					
ANR	10707334	Condition	s1 [ s1_index ] == 0x00	536:16:8839:8858	10707267	0	True				
ANR	10707335	EqualityExpression	s1 [ s1_index ] == 0x00		10707267	0		==			
ANR	10707336	ArrayIndexing	s1 [ s1_index ]		10707267	0					
ANR	10707337	Identifier	s1		10707267	0					
ANR	10707338	Identifier	s1_index		10707267	1					
ANR	10707339	PrimaryExpression	0x00		10707267	1					
ANR	10707340	ReturnStatement	return 0 ;	537:16:8877:8885	10707267	1	True				
ANR	10707341	PrimaryExpression	0		10707267	0					
ANR	10707342	ReturnStatement	return 1 ;	538:12:8899:8907	10707267	1	True				
ANR	10707343	PrimaryExpression	1		10707267	0					
ANR	10707344	IfStatement	if ( s1 [ s1_index ] == 0x00 )		10707267	3					
ANR	10707345	Condition	s1 [ s1_index ] == 0x00	540:12:8931:8950	10707267	0	True				
ANR	10707346	EqualityExpression	s1 [ s1_index ] == 0x00		10707267	0		==			
ANR	10707347	ArrayIndexing	s1 [ s1_index ]		10707267	0					
ANR	10707348	Identifier	s1		10707267	0					
ANR	10707349	Identifier	s1_index		10707267	1					
ANR	10707350	PrimaryExpression	0x00		10707267	1					
ANR	10707351	CompoundStatement		16:34:432:432	10707267	1					
ANR	10707352	IfStatement	if ( s2_index > length )		10707267	0					
ANR	10707353	Condition	s2_index > length	541:16:8971:8987	10707267	0	True				
ANR	10707354	RelationalExpression	s2_index > length		10707267	0		>			
ANR	10707355	Identifier	s2_index		10707267	0					
ANR	10707356	Identifier	length		10707267	1					
ANR	10707357	ReturnStatement	return 0 ;	542:16:9006:9014	10707267	1	True				
ANR	10707358	PrimaryExpression	0		10707267	0					
ANR	10707359	ReturnStatement	return - 1 ;	543:12:9028:9037	10707267	1	True				
ANR	10707360	UnaryOperationExpression	- 1		10707267	0					
ANR	10707361	UnaryOperator	-		10707267	0					
ANR	10707362	PrimaryExpression	1		10707267	1					
ANR	10707363	IfStatement	if ( s1 [ s1_index ] == s2 [ s2_index ] )		10707267	4					
ANR	10707364	Condition	s1 [ s1_index ] == s2 [ s2_index ]	545:12:9061:9088	10707267	0	True				
ANR	10707365	EqualityExpression	s1 [ s1_index ] == s2 [ s2_index ]		10707267	0		==			
ANR	10707366	ArrayIndexing	s1 [ s1_index ]		10707267	0					
ANR	10707367	Identifier	s1		10707267	0					
ANR	10707368	Identifier	s1_index		10707267	1					
ANR	10707369	ArrayIndexing	s2 [ s2_index ]		10707267	1					
ANR	10707370	Identifier	s2		10707267	0					
ANR	10707371	Identifier	s2_index		10707267	1					
ANR	10707372	CompoundStatement		21:42:570:570	10707267	1					
ANR	10707373	ExpressionStatement	s1_index ++	546:12:9105:9115	10707267	0	True				
ANR	10707374	PostIncDecOperationExpression	s1_index ++		10707267	0					
ANR	10707375	Identifier	s1_index		10707267	0					
ANR	10707376	IncDec	++		10707267	1					
ANR	10707377	ExpressionStatement	s2_index ++	547:12:9129:9139	10707267	1	True				
ANR	10707378	PostIncDecOperationExpression	s2_index ++		10707267	0					
ANR	10707379	Identifier	s2_index		10707267	0					
ANR	10707380	IncDec	++		10707267	1					
ANR	10707381	ContinueStatement	continue ;	548:12:9153:9161	10707267	2	True				
ANR	10707382	IfStatement	if ( s1 [ s1_index ] < s2 [ s2_index ] )		10707267	5					
ANR	10707383	Condition	s1 [ s1_index ] < s2 [ s2_index ]	550:11:9184:9210	10707267	0	True				
ANR	10707384	RelationalExpression	s1 [ s1_index ] < s2 [ s2_index ]		10707267	0		<			
ANR	10707385	ArrayIndexing	s1 [ s1_index ]		10707267	0					
ANR	10707386	Identifier	s1		10707267	0					
ANR	10707387	Identifier	s1_index		10707267	1					
ANR	10707388	ArrayIndexing	s2 [ s2_index ]		10707267	1					
ANR	10707389	Identifier	s2		10707267	0					
ANR	10707390	Identifier	s2_index		10707267	1					
ANR	10707391	ReturnStatement	return - 1 ;	551:12:9225:9234	10707267	1	True				
ANR	10707392	UnaryOperationExpression	- 1		10707267	0					
ANR	10707393	UnaryOperator	-		10707267	0					
ANR	10707394	PrimaryExpression	1		10707267	1					
ANR	10707395	IfStatement	if ( s1 [ s1_index ] > s2 [ s2_index ] )		10707267	6					
ANR	10707396	Condition	s1 [ s1_index ] > s2 [ s2_index ]	552:11:9247:9273	10707267	0	True				
ANR	10707397	RelationalExpression	s1 [ s1_index ] > s2 [ s2_index ]		10707267	0		>			
ANR	10707398	ArrayIndexing	s1 [ s1_index ]		10707267	0					
ANR	10707399	Identifier	s1		10707267	0					
ANR	10707400	Identifier	s1_index		10707267	1					
ANR	10707401	ArrayIndexing	s2 [ s2_index ]		10707267	1					
ANR	10707402	Identifier	s2		10707267	0					
ANR	10707403	Identifier	s2_index		10707267	1					
ANR	10707404	ReturnStatement	return 1 ;	553:12:9288:9296	10707267	1	True				
ANR	10707405	PrimaryExpression	1		10707267	0					
ANR	10707406	ReturnStatement	return result ;	555:4:9308:9321	10707267	3	True				
ANR	10707407	Identifier	result		10707267	0					
ANR	10707408	ReturnType	static int		10707267	1					
ANR	10707409	Identifier	whitelist_strncmp		10707267	2					
ANR	10707410	ParameterList	"const char * s1 , const char * s2 , int length"		10707267	3					
ANR	10707411	Parameter	const char * s1	524:29:8476:8489	10707267	0	True				
ANR	10707412	ParameterType	const char *		10707267	0					
ANR	10707413	Identifier	s1		10707267	1					
ANR	10707414	Parameter	const char * s2	524:45:8492:8505	10707267	1	True				
ANR	10707415	ParameterType	const char *		10707267	0					
ANR	10707416	Identifier	s2		10707267	1					
ANR	10707417	Parameter	int length	524:61:8508:8517	10707267	2	True				
ANR	10707418	ParameterType	int		10707267	0					
ANR	10707419	Identifier	length		10707267	1					
ANR	10707420	CFGEntryNode	ENTRY		10707267		True				
ANR	10707421	CFGExitNode	EXIT		10707267		True				
ANR	10707422	Symbol	result		10707267						
ANR	10707423	Symbol	s1_index		10707267						
ANR	10707424	Symbol	s2_index		10707267						
ANR	10707425	Symbol	* s2		10707267						
ANR	10707426	Symbol	* s1		10707267						
ANR	10707427	Symbol	length		10707267						
ANR	10707428	Symbol	* s2_index		10707267						
ANR	10707429	Symbol	* s1_index		10707267						
ANR	10707430	Symbol	s1		10707267						
ANR	10707431	Symbol	s2		10707267						
ANR	10707432	Function	IsInWhiteList	558:0:9326:9941							
ANR	10707433	FunctionDef	"IsInWhiteList (const char * Name , int size)"		10707432	0					
ANR	10707434	CompoundStatement		559:0:9373:9941	10707432	0					
ANR	10707435	IdentifierDeclStatement	"int low = 0 , mid , high = WHITE_LIST_SIZE , test ;"	560:4:9379:9425	10707432	0	True				
ANR	10707436	IdentifierDecl	low = 0		10707432	0					
ANR	10707437	IdentifierDeclType	int		10707432	0					
ANR	10707438	Identifier	low		10707432	1					
ANR	10707439	AssignmentExpression	low = 0		10707432	2		=			
ANR	10707440	Identifier	low		10707432	0					
ANR	10707441	PrimaryExpression	0		10707432	1					
ANR	10707442	IdentifierDecl	mid		10707432	1					
ANR	10707443	IdentifierDeclType	int		10707432	0					
ANR	10707444	Identifier	mid		10707432	1					
ANR	10707445	IdentifierDecl	high = WHITE_LIST_SIZE		10707432	2					
ANR	10707446	IdentifierDeclType	int		10707432	0					
ANR	10707447	Identifier	high		10707432	1					
ANR	10707448	AssignmentExpression	high = WHITE_LIST_SIZE		10707432	2		=			
ANR	10707449	Identifier	WHITE_LIST_SIZE		10707432	0					
ANR	10707450	Identifier	WHITE_LIST_SIZE		10707432	1					
ANR	10707451	IdentifierDecl	test		10707432	3					
ANR	10707452	IdentifierDeclType	int		10707432	0					
ANR	10707453	Identifier	test		10707432	1					
ANR	10707454	WhileStatement	while ( low < high )		10707432	1					
ANR	10707455	Condition	low < high	562:11:9439:9448	10707432	0	True				
ANR	10707456	RelationalExpression	low < high		10707432	0		<			
ANR	10707457	Identifier	low		10707432	0					
ANR	10707458	Identifier	high		10707432	1					
ANR	10707459	CompoundStatement		4:23:77:77	10707432	1					
ANR	10707460	ExpressionStatement	mid = ( low + high ) / 2	564:8:9496:9518	10707432	0	True				
ANR	10707461	AssignmentExpression	mid = ( low + high ) / 2		10707432	0		=			
ANR	10707462	Identifier	mid		10707432	0					
ANR	10707463	MultiplicativeExpression	( low + high ) / 2		10707432	1		/			
ANR	10707464	AdditiveExpression	low + high		10707432	0		+			
ANR	10707465	Identifier	low		10707432	0					
ANR	10707466	Identifier	high		10707432	1					
ANR	10707467	PrimaryExpression	2		10707432	1					
ANR	10707468	ExpressionStatement	"test = whitelist_strncmp ( EmbeddingWhiteList [ mid ] , Name , size )"	565:8:9528:9589	10707432	1	True				
ANR	10707469	AssignmentExpression	"test = whitelist_strncmp ( EmbeddingWhiteList [ mid ] , Name , size )"		10707432	0		=			
ANR	10707470	Identifier	test		10707432	0					
ANR	10707471	CallExpression	"whitelist_strncmp ( EmbeddingWhiteList [ mid ] , Name , size )"		10707432	1					
ANR	10707472	Callee	whitelist_strncmp		10707432	0					
ANR	10707473	Identifier	whitelist_strncmp		10707432	0					
ANR	10707474	ArgumentList	EmbeddingWhiteList [ mid ]		10707432	1					
ANR	10707475	Argument	EmbeddingWhiteList [ mid ]		10707432	0					
ANR	10707476	ArrayIndexing	EmbeddingWhiteList [ mid ]		10707432	0					
ANR	10707477	Identifier	EmbeddingWhiteList		10707432	0					
ANR	10707478	Identifier	mid		10707432	1					
ANR	10707479	Argument	Name		10707432	1					
ANR	10707480	Identifier	Name		10707432	0					
ANR	10707481	Argument	size		10707432	2					
ANR	10707482	Identifier	size		10707432	0					
ANR	10707483	IfStatement	if ( test == 0 )		10707432	2					
ANR	10707484	Condition	test == 0	566:12:9603:9611	10707432	0	True				
ANR	10707485	EqualityExpression	test == 0		10707432	0		==			
ANR	10707486	Identifier	test		10707432	0					
ANR	10707487	PrimaryExpression	0		10707432	1					
ANR	10707488	ReturnStatement	return 1 ;	567:12:9626:9634	10707432	1	True				
ANR	10707489	PrimaryExpression	1		10707432	0					
ANR	10707490	IfStatement	if ( test < 0 )		10707432	3					
ANR	10707491	Condition	test < 0	569:11:9723:9730	10707432	0	True				
ANR	10707492	RelationalExpression	test < 0		10707432	0		<			
ANR	10707493	Identifier	test		10707432	0					
ANR	10707494	PrimaryExpression	0		10707432	1					
ANR	10707495	ExpressionStatement	low = mid + 1	570:12:9745:9758	10707432	1	True				
ANR	10707496	AssignmentExpression	low = mid + 1		10707432	0		=			
ANR	10707497	Identifier	low		10707432	0					
ANR	10707498	AdditiveExpression	mid + 1		10707432	1		+			
ANR	10707499	Identifier	mid		10707432	0					
ANR	10707500	PrimaryExpression	1		10707432	1					
ANR	10707501	ElseStatement	else		10707432	0					
ANR	10707502	ExpressionStatement	high = mid - 1	572:8:9781:9795	10707432	0	True				
ANR	10707503	AssignmentExpression	high = mid - 1		10707432	0		=			
ANR	10707504	Identifier	high		10707432	0					
ANR	10707505	AdditiveExpression	mid - 1		10707432	1		-			
ANR	10707506	Identifier	mid		10707432	0					
ANR	10707507	PrimaryExpression	1		10707432	1					
ANR	10707508	IfStatement	if ( low == high )		10707432	2					
ANR	10707509	Condition	low == high	574:8:9811:9821	10707432	0	True				
ANR	10707510	EqualityExpression	low == high		10707432	0		==			
ANR	10707511	Identifier	low		10707432	0					
ANR	10707512	Identifier	high		10707432	1					
ANR	10707513	CompoundStatement		16:21:450:450	10707432	1					
ANR	10707514	IfStatement	"if ( whitelist_strncmp ( EmbeddingWhiteList [ low ] , Name , size ) == 0 )"		10707432	0					
ANR	10707515	Condition	"whitelist_strncmp ( EmbeddingWhiteList [ low ] , Name , size ) == 0"	575:12:9838:9896	10707432	0	True				
ANR	10707516	EqualityExpression	"whitelist_strncmp ( EmbeddingWhiteList [ low ] , Name , size ) == 0"		10707432	0		==			
ANR	10707517	CallExpression	"whitelist_strncmp ( EmbeddingWhiteList [ low ] , Name , size )"		10707432	0					
ANR	10707518	Callee	whitelist_strncmp		10707432	0					
ANR	10707519	Identifier	whitelist_strncmp		10707432	0					
ANR	10707520	ArgumentList	EmbeddingWhiteList [ low ]		10707432	1					
ANR	10707521	Argument	EmbeddingWhiteList [ low ]		10707432	0					
ANR	10707522	ArrayIndexing	EmbeddingWhiteList [ low ]		10707432	0					
ANR	10707523	Identifier	EmbeddingWhiteList		10707432	0					
ANR	10707524	Identifier	low		10707432	1					
ANR	10707525	Argument	Name		10707432	1					
ANR	10707526	Identifier	Name		10707432	0					
ANR	10707527	Argument	size		10707432	2					
ANR	10707528	Identifier	size		10707432	0					
ANR	10707529	PrimaryExpression	0		10707432	1					
ANR	10707530	ReturnStatement	return 1 ;	576:12:9911:9919	10707432	1	True				
ANR	10707531	PrimaryExpression	1		10707432	0					
ANR	10707532	ReturnStatement	return 0 ;	578:4:9931:9939	10707432	3	True				
ANR	10707533	PrimaryExpression	0		10707432	0					
ANR	10707534	ReturnType	int		10707432	1					
ANR	10707535	Identifier	IsInWhiteList		10707432	2					
ANR	10707536	ParameterList	"const char * Name , int size"		10707432	3					
ANR	10707537	Parameter	const char * Name	558:19:9345:9360	10707432	0	True				
ANR	10707538	ParameterType	const char *		10707432	0					
ANR	10707539	Identifier	Name		10707432	1					
ANR	10707540	Parameter	int size	558:37:9363:9370	10707432	1	True				
ANR	10707541	ParameterType	int		10707432	0					
ANR	10707542	Identifier	size		10707432	1					
ANR	10707543	CFGEntryNode	ENTRY		10707432		True				
ANR	10707544	CFGExitNode	EXIT		10707432		True				
ANR	10707545	Symbol	high		10707432						
ANR	10707546	Symbol	* mid		10707432						
ANR	10707547	Symbol	* EmbeddingWhiteList		10707432						
ANR	10707548	Symbol	size		10707432						
ANR	10707549	Symbol	test		10707432						
ANR	10707550	Symbol	low		10707432						
ANR	10707551	Symbol	mid		10707432						
ANR	10707552	Symbol	EmbeddingWhiteList		10707432						
ANR	10707553	Symbol	WHITE_LIST_SIZE		10707432						
ANR	10707554	Symbol	whitelist_strncmp		10707432						
ANR	10707555	Symbol	* low		10707432						
ANR	10707556	Symbol	Name		10707432						
