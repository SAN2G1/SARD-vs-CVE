command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	9737102	File	data/converged/CVE-2018-16863_ghostpdl/testlang.c								
ANR	9737103	Function	main	33:0:898:2913							
ANR	9737104	FunctionDef	"main (int argc , char * argv [ ])"		9737103	0					
ANR	9737105	CompoundStatement		36:0:1044:2913	9737103	0					
ANR	9737106	IdentifierDeclStatement	int i ;	37:2:1048:1055	9737103	0	True				
ANR	9737107	IdentifierDecl	i		9737103	0					
ANR	9737108	IdentifierDeclType	int		9737103	0					
ANR	9737109	Identifier	i		9737103	1					
ANR	9737110	IdentifierDeclStatement	int errors = 0 ;	38:2:1078:1094	9737103	1	True				
ANR	9737111	IdentifierDecl	errors = 0		9737103	0					
ANR	9737112	IdentifierDeclType	int		9737103	0					
ANR	9737113	Identifier	errors		9737103	1					
ANR	9737114	AssignmentExpression	errors = 0		9737103	2		=			
ANR	9737115	Identifier	errors		9737103	0					
ANR	9737116	PrimaryExpression	0		9737103	1					
ANR	9737117	IdentifierDeclStatement	cups_lang_t * language ;	39:2:1121:1143	9737103	2	True				
ANR	9737118	IdentifierDecl	* language		9737103	0					
ANR	9737119	IdentifierDeclType	cups_lang_t *		9737103	0					
ANR	9737120	Identifier	language		9737103	1					
ANR	9737121	IdentifierDeclStatement	cups_lang_t * language2 ;	40:2:1169:1192	9737103	3	True				
ANR	9737122	IdentifierDecl	* language2		9737103	0					
ANR	9737123	IdentifierDeclType	cups_lang_t *		9737103	0					
ANR	9737124	Identifier	language2		9737103	1					
ANR	9737125	IdentifierDeclStatement	struct lconv * loc ;	41:2:1218:1236	9737103	4	True				
ANR	9737126	IdentifierDecl	* loc		9737103	0					
ANR	9737127	IdentifierDeclType	struct lconv *		9737103	0					
ANR	9737128	Identifier	loc		9737103	1					
ANR	9737129	IdentifierDeclStatement	char buffer [ 1024 ] ;	42:2:1259:1278	9737103	5	True				
ANR	9737130	IdentifierDecl	buffer [ 1024 ]		9737103	0					
ANR	9737131	IdentifierDeclType	char [ 1024 ]		9737103	0					
ANR	9737132	Identifier	buffer		9737103	1					
ANR	9737133	PrimaryExpression	1024		9737103	2					
ANR	9737134	IdentifierDeclStatement	double number ;	43:2:1302:1316	9737103	6	True				
ANR	9737135	IdentifierDecl	number		9737103	0					
ANR	9737136	IdentifierDeclType	double		9737103	0					
ANR	9737137	Identifier	number		9737103	1					
ANR	9737138	Statement	static	44:2:1334:1339	9737103	7	True				
ANR	9737139	Statement	const	44:9:1341:1345	9737103	8	True				
ANR	9737140	Statement	char	44:15:1347:1350	9737103	9	True				
ANR	9737141	Statement	*	44:20:1352:1352	9737103	10	True				
ANR	9737142	Statement	const	44:22:1354:1358	9737103	11	True				
ANR	9737143	Statement	tests	44:28:1360:1364	9737103	12	True				
ANR	9737144	Statement	[	44:33:1365:1365	9737103	13	True				
ANR	9737145	Statement	]	44:34:1366:1366	9737103	14	True				
ANR	9737146	Statement	=	44:36:1368:1368	9737103	15	True				
ANR	9737147	CompoundStatement		10:2:346:346	9737103	16					
ANR	9737148	Statement	"""1"""	46:4:1397:1399	9737103	0	True				
ANR	9737149	Statement	","	46:7:1400:1400	9737103	1	True				
ANR	9737150	Statement	"""-1"""	47:4:1406:1409	9737103	2	True				
ANR	9737151	Statement	","	47:8:1410:1410	9737103	3	True				
ANR	9737152	Statement	"""3"""	48:4:1416:1418	9737103	4	True				
ANR	9737153	Statement	","	48:7:1419:1419	9737103	5	True				
ANR	9737154	Statement	"""5.125"""	49:4:1425:1431	9737103	6	True				
ANR	9737155	ExpressionStatement		50:3:1436:1436	9737103	17	True				
ANR	9737156	ExpressionStatement	_cupsSetLocale ( argv )	53:2:1442:1462	9737103	18	True				
ANR	9737157	CallExpression	_cupsSetLocale ( argv )		9737103	0					
ANR	9737158	Callee	_cupsSetLocale		9737103	0					
ANR	9737159	Identifier	_cupsSetLocale		9737103	0					
ANR	9737160	ArgumentList	argv		9737103	1					
ANR	9737161	Argument	argv		9737103	0					
ANR	9737162	Identifier	argv		9737103	0					
ANR	9737163	IfStatement	if ( argc == 1 )		9737103	19					
ANR	9737164	Condition	argc == 1	55:6:1471:1479	9737103	0	True				
ANR	9737165	EqualityExpression	argc == 1		9737103	0		==			
ANR	9737166	Identifier	argc		9737103	0					
ANR	9737167	PrimaryExpression	1		9737103	1					
ANR	9737168	CompoundStatement		21:2:439:439	9737103	1					
ANR	9737169	ExpressionStatement	language = cupsLangDefault ( )	57:4:1490:1519	9737103	0	True				
ANR	9737170	AssignmentExpression	language = cupsLangDefault ( )		9737103	0		=			
ANR	9737171	Identifier	language		9737103	0					
ANR	9737172	CallExpression	cupsLangDefault ( )		9737103	1					
ANR	9737173	Callee	cupsLangDefault		9737103	0					
ANR	9737174	Identifier	cupsLangDefault		9737103	0					
ANR	9737175	ArgumentList			9737103	1					
ANR	9737176	ExpressionStatement	language2 = cupsLangDefault ( )	58:4:1525:1554	9737103	1	True				
ANR	9737177	AssignmentExpression	language2 = cupsLangDefault ( )		9737103	0		=			
ANR	9737178	Identifier	language2		9737103	0					
ANR	9737179	CallExpression	cupsLangDefault ( )		9737103	1					
ANR	9737180	Callee	cupsLangDefault		9737103	0					
ANR	9737181	Identifier	cupsLangDefault		9737103	0					
ANR	9737182	ArgumentList			9737103	1					
ANR	9737183	ElseStatement	else		9737103	0					
ANR	9737184	CompoundStatement		26:2:524:524	9737103	0					
ANR	9737185	ExpressionStatement	language = cupsLangGet ( argv [ 1 ] )	62:4:1575:1607	9737103	0	True				
ANR	9737186	AssignmentExpression	language = cupsLangGet ( argv [ 1 ] )		9737103	0		=			
ANR	9737187	Identifier	language		9737103	0					
ANR	9737188	CallExpression	cupsLangGet ( argv [ 1 ] )		9737103	1					
ANR	9737189	Callee	cupsLangGet		9737103	0					
ANR	9737190	Identifier	cupsLangGet		9737103	0					
ANR	9737191	ArgumentList	argv [ 1 ]		9737103	1					
ANR	9737192	Argument	argv [ 1 ]		9737103	0					
ANR	9737193	ArrayIndexing	argv [ 1 ]		9737103	0					
ANR	9737194	Identifier	argv		9737103	0					
ANR	9737195	PrimaryExpression	1		9737103	1					
ANR	9737196	ExpressionStatement	language2 = cupsLangGet ( argv [ 1 ] )	63:4:1613:1645	9737103	1	True				
ANR	9737197	AssignmentExpression	language2 = cupsLangGet ( argv [ 1 ] )		9737103	0		=			
ANR	9737198	Identifier	language2		9737103	0					
ANR	9737199	CallExpression	cupsLangGet ( argv [ 1 ] )		9737103	1					
ANR	9737200	Callee	cupsLangGet		9737103	0					
ANR	9737201	Identifier	cupsLangGet		9737103	0					
ANR	9737202	ArgumentList	argv [ 1 ]		9737103	1					
ANR	9737203	Argument	argv [ 1 ]		9737103	0					
ANR	9737204	ArrayIndexing	argv [ 1 ]		9737103	0					
ANR	9737205	Identifier	argv		9737103	0					
ANR	9737206	PrimaryExpression	1		9737103	1					
ANR	9737207	IfStatement	if ( language != language2 )		9737103	20					
ANR	9737208	Condition	language != language2	66:6:1658:1678	9737103	0	True				
ANR	9737209	EqualityExpression	language != language2		9737103	0		!=			
ANR	9737210	Identifier	language		9737103	0					
ANR	9737211	Identifier	language2		9737103	1					
ANR	9737212	CompoundStatement		32:2:638:638	9737103	1					
ANR	9737213	ExpressionStatement	errors ++	68:4:1689:1698	9737103	0	True				
ANR	9737214	PostIncDecOperationExpression	errors ++		9737103	0					
ANR	9737215	Identifier	errors		9737103	0					
ANR	9737216	IncDec	++		9737103	1					
ANR	9737217	ExpressionStatement	"puts ( ""**** ERROR: Language cache did not work! ****"" )"	70:4:1705:1758	9737103	1	True				
ANR	9737218	CallExpression	"puts ( ""**** ERROR: Language cache did not work! ****"" )"		9737103	0					
ANR	9737219	Callee	puts		9737103	0					
ANR	9737220	Identifier	puts		9737103	0					
ANR	9737221	ArgumentList	"""**** ERROR: Language cache did not work! ****"""		9737103	1					
ANR	9737222	Argument	"""**** ERROR: Language cache did not work! ****"""		9737103	0					
ANR	9737223	PrimaryExpression	"""**** ERROR: Language cache did not work! ****"""		9737103	0					
ANR	9737224	ExpressionStatement	"puts ( ""First result from cupsLangGet:"" )"	71:4:1764:1802	9737103	2	True				
ANR	9737225	CallExpression	"puts ( ""First result from cupsLangGet:"" )"		9737103	0					
ANR	9737226	Callee	puts		9737103	0					
ANR	9737227	Identifier	puts		9737103	0					
ANR	9737228	ArgumentList	"""First result from cupsLangGet:"""		9737103	1					
ANR	9737229	Argument	"""First result from cupsLangGet:"""		9737103	0					
ANR	9737230	PrimaryExpression	"""First result from cupsLangGet:"""		9737103	0					
ANR	9737231	ExpressionStatement	"printf ( ""Language = \\""%s\\""\\n"" , language -> language )"	74:2:1811:1860	9737103	21	True				
ANR	9737232	CallExpression	"printf ( ""Language = \\""%s\\""\\n"" , language -> language )"		9737103	0					
ANR	9737233	Callee	printf		9737103	0					
ANR	9737234	Identifier	printf		9737103	0					
ANR	9737235	ArgumentList	"""Language = \\""%s\\""\\n"""		9737103	1					
ANR	9737236	Argument	"""Language = \\""%s\\""\\n"""		9737103	0					
ANR	9737237	PrimaryExpression	"""Language = \\""%s\\""\\n"""		9737103	0					
ANR	9737238	Argument	language -> language		9737103	1					
ANR	9737239	PtrMemberAccess	language -> language		9737103	0					
ANR	9737240	Identifier	language		9737103	0					
ANR	9737241	Identifier	language		9737103	1					
ANR	9737242	ExpressionStatement	"printf ( ""Encoding = \\""%s\\""\\n"" , _cupsEncodingName ( language -> encoding ) )"	75:2:1864:1932	9737103	22	True				
ANR	9737243	CallExpression	"printf ( ""Encoding = \\""%s\\""\\n"" , _cupsEncodingName ( language -> encoding ) )"		9737103	0					
ANR	9737244	Callee	printf		9737103	0					
ANR	9737245	Identifier	printf		9737103	0					
ANR	9737246	ArgumentList	"""Encoding = \\""%s\\""\\n"""		9737103	1					
ANR	9737247	Argument	"""Encoding = \\""%s\\""\\n"""		9737103	0					
ANR	9737248	PrimaryExpression	"""Encoding = \\""%s\\""\\n"""		9737103	0					
ANR	9737249	Argument	_cupsEncodingName ( language -> encoding )		9737103	1					
ANR	9737250	CallExpression	_cupsEncodingName ( language -> encoding )		9737103	0					
ANR	9737251	Callee	_cupsEncodingName		9737103	0					
ANR	9737252	Identifier	_cupsEncodingName		9737103	0					
ANR	9737253	ArgumentList	language -> encoding		9737103	1					
ANR	9737254	Argument	language -> encoding		9737103	0					
ANR	9737255	PtrMemberAccess	language -> encoding		9737103	0					
ANR	9737256	Identifier	language		9737103	0					
ANR	9737257	Identifier	encoding		9737103	1					
ANR	9737258	ExpressionStatement	"printf ( ""No       = \\""%s\\""\\n"" , _cupsLangString ( language , ""No"" ) )"	76:2:1936:1998	9737103	23	True				
ANR	9737259	CallExpression	"printf ( ""No       = \\""%s\\""\\n"" , _cupsLangString ( language , ""No"" ) )"		9737103	0					
ANR	9737260	Callee	printf		9737103	0					
ANR	9737261	Identifier	printf		9737103	0					
ANR	9737262	ArgumentList	"""No       = \\""%s\\""\\n"""		9737103	1					
ANR	9737263	Argument	"""No       = \\""%s\\""\\n"""		9737103	0					
ANR	9737264	PrimaryExpression	"""No       = \\""%s\\""\\n"""		9737103	0					
ANR	9737265	Argument	"_cupsLangString ( language , ""No"" )"		9737103	1					
ANR	9737266	CallExpression	"_cupsLangString ( language , ""No"" )"		9737103	0					
ANR	9737267	Callee	_cupsLangString		9737103	0					
ANR	9737268	Identifier	_cupsLangString		9737103	0					
ANR	9737269	ArgumentList	language		9737103	1					
ANR	9737270	Argument	language		9737103	0					
ANR	9737271	Identifier	language		9737103	0					
ANR	9737272	Argument	"""No"""		9737103	1					
ANR	9737273	PrimaryExpression	"""No"""		9737103	0					
ANR	9737274	ExpressionStatement	"printf ( ""Yes      = \\""%s\\""\\n"" , _cupsLangString ( language , ""Yes"" ) )"	77:2:2002:2065	9737103	24	True				
ANR	9737275	CallExpression	"printf ( ""Yes      = \\""%s\\""\\n"" , _cupsLangString ( language , ""Yes"" ) )"		9737103	0					
ANR	9737276	Callee	printf		9737103	0					
ANR	9737277	Identifier	printf		9737103	0					
ANR	9737278	ArgumentList	"""Yes      = \\""%s\\""\\n"""		9737103	1					
ANR	9737279	Argument	"""Yes      = \\""%s\\""\\n"""		9737103	0					
ANR	9737280	PrimaryExpression	"""Yes      = \\""%s\\""\\n"""		9737103	0					
ANR	9737281	Argument	"_cupsLangString ( language , ""Yes"" )"		9737103	1					
ANR	9737282	CallExpression	"_cupsLangString ( language , ""Yes"" )"		9737103	0					
ANR	9737283	Callee	_cupsLangString		9737103	0					
ANR	9737284	Identifier	_cupsLangString		9737103	0					
ANR	9737285	ArgumentList	language		9737103	1					
ANR	9737286	Argument	language		9737103	0					
ANR	9737287	Identifier	language		9737103	0					
ANR	9737288	Argument	"""Yes"""		9737103	1					
ANR	9737289	PrimaryExpression	"""Yes"""		9737103	0					
ANR	9737290	IfStatement	if ( language != language2 )		9737103	25					
ANR	9737291	Condition	language != language2	79:6:2074:2094	9737103	0	True				
ANR	9737292	EqualityExpression	language != language2		9737103	0		!=			
ANR	9737293	Identifier	language		9737103	0					
ANR	9737294	Identifier	language2		9737103	1					
ANR	9737295	CompoundStatement		45:2:1054:1054	9737103	1					
ANR	9737296	ExpressionStatement	"puts ( ""Second result from cupsLangGet:"" )"	81:4:2105:2144	9737103	0	True				
ANR	9737297	CallExpression	"puts ( ""Second result from cupsLangGet:"" )"		9737103	0					
ANR	9737298	Callee	puts		9737103	0					
ANR	9737299	Identifier	puts		9737103	0					
ANR	9737300	ArgumentList	"""Second result from cupsLangGet:"""		9737103	1					
ANR	9737301	Argument	"""Second result from cupsLangGet:"""		9737103	0					
ANR	9737302	PrimaryExpression	"""Second result from cupsLangGet:"""		9737103	0					
ANR	9737303	ExpressionStatement	"printf ( ""Language = \\""%s\\""\\n"" , language2 -> language )"	83:4:2151:2201	9737103	1	True				
ANR	9737304	CallExpression	"printf ( ""Language = \\""%s\\""\\n"" , language2 -> language )"		9737103	0					
ANR	9737305	Callee	printf		9737103	0					
ANR	9737306	Identifier	printf		9737103	0					
ANR	9737307	ArgumentList	"""Language = \\""%s\\""\\n"""		9737103	1					
ANR	9737308	Argument	"""Language = \\""%s\\""\\n"""		9737103	0					
ANR	9737309	PrimaryExpression	"""Language = \\""%s\\""\\n"""		9737103	0					
ANR	9737310	Argument	language2 -> language		9737103	1					
ANR	9737311	PtrMemberAccess	language2 -> language		9737103	0					
ANR	9737312	Identifier	language2		9737103	0					
ANR	9737313	Identifier	language		9737103	1					
ANR	9737314	ExpressionStatement	"printf ( ""Encoding = \\""%s\\""\\n"" , _cupsEncodingName ( language2 -> encoding ) )"	84:4:2207:2276	9737103	2	True				
ANR	9737315	CallExpression	"printf ( ""Encoding = \\""%s\\""\\n"" , _cupsEncodingName ( language2 -> encoding ) )"		9737103	0					
ANR	9737316	Callee	printf		9737103	0					
ANR	9737317	Identifier	printf		9737103	0					
ANR	9737318	ArgumentList	"""Encoding = \\""%s\\""\\n"""		9737103	1					
ANR	9737319	Argument	"""Encoding = \\""%s\\""\\n"""		9737103	0					
ANR	9737320	PrimaryExpression	"""Encoding = \\""%s\\""\\n"""		9737103	0					
ANR	9737321	Argument	_cupsEncodingName ( language2 -> encoding )		9737103	1					
ANR	9737322	CallExpression	_cupsEncodingName ( language2 -> encoding )		9737103	0					
ANR	9737323	Callee	_cupsEncodingName		9737103	0					
ANR	9737324	Identifier	_cupsEncodingName		9737103	0					
ANR	9737325	ArgumentList	language2 -> encoding		9737103	1					
ANR	9737326	Argument	language2 -> encoding		9737103	0					
ANR	9737327	PtrMemberAccess	language2 -> encoding		9737103	0					
ANR	9737328	Identifier	language2		9737103	0					
ANR	9737329	Identifier	encoding		9737103	1					
ANR	9737330	ExpressionStatement	"printf ( ""No       = \\""%s\\""\\n"" , _cupsLangString ( language2 , ""No"" ) )"	85:4:2282:2345	9737103	3	True				
ANR	9737331	CallExpression	"printf ( ""No       = \\""%s\\""\\n"" , _cupsLangString ( language2 , ""No"" ) )"		9737103	0					
ANR	9737332	Callee	printf		9737103	0					
ANR	9737333	Identifier	printf		9737103	0					
ANR	9737334	ArgumentList	"""No       = \\""%s\\""\\n"""		9737103	1					
ANR	9737335	Argument	"""No       = \\""%s\\""\\n"""		9737103	0					
ANR	9737336	PrimaryExpression	"""No       = \\""%s\\""\\n"""		9737103	0					
ANR	9737337	Argument	"_cupsLangString ( language2 , ""No"" )"		9737103	1					
ANR	9737338	CallExpression	"_cupsLangString ( language2 , ""No"" )"		9737103	0					
ANR	9737339	Callee	_cupsLangString		9737103	0					
ANR	9737340	Identifier	_cupsLangString		9737103	0					
ANR	9737341	ArgumentList	language2		9737103	1					
ANR	9737342	Argument	language2		9737103	0					
ANR	9737343	Identifier	language2		9737103	0					
ANR	9737344	Argument	"""No"""		9737103	1					
ANR	9737345	PrimaryExpression	"""No"""		9737103	0					
ANR	9737346	ExpressionStatement	"printf ( ""Yes      = \\""%s\\""\\n"" , _cupsLangString ( language2 , ""Yes"" ) )"	86:4:2351:2415	9737103	4	True				
ANR	9737347	CallExpression	"printf ( ""Yes      = \\""%s\\""\\n"" , _cupsLangString ( language2 , ""Yes"" ) )"		9737103	0					
ANR	9737348	Callee	printf		9737103	0					
ANR	9737349	Identifier	printf		9737103	0					
ANR	9737350	ArgumentList	"""Yes      = \\""%s\\""\\n"""		9737103	1					
ANR	9737351	Argument	"""Yes      = \\""%s\\""\\n"""		9737103	0					
ANR	9737352	PrimaryExpression	"""Yes      = \\""%s\\""\\n"""		9737103	0					
ANR	9737353	Argument	"_cupsLangString ( language2 , ""Yes"" )"		9737103	1					
ANR	9737354	CallExpression	"_cupsLangString ( language2 , ""Yes"" )"		9737103	0					
ANR	9737355	Callee	_cupsLangString		9737103	0					
ANR	9737356	Identifier	_cupsLangString		9737103	0					
ANR	9737357	ArgumentList	language2		9737103	1					
ANR	9737358	Argument	language2		9737103	0					
ANR	9737359	Identifier	language2		9737103	0					
ANR	9737360	Argument	"""Yes"""		9737103	1					
ANR	9737361	PrimaryExpression	"""Yes"""		9737103	0					
ANR	9737362	ExpressionStatement	loc = localeconv ( )	89:2:2424:2442	9737103	26	True				
ANR	9737363	AssignmentExpression	loc = localeconv ( )		9737103	0		=			
ANR	9737364	Identifier	loc		9737103	0					
ANR	9737365	CallExpression	localeconv ( )		9737103	1					
ANR	9737366	Callee	localeconv		9737103	0					
ANR	9737367	Identifier	localeconv		9737103	0					
ANR	9737368	ArgumentList			9737103	1					
ANR	9737369	ForStatement	for ( i = 0 ; i < ( int ) ( sizeof ( tests ) / sizeof ( tests [ 0 ] ) ) ; i ++ )		9737103	27					
ANR	9737370	ForInit	i = 0 ;	91:7:2452:2457	9737103	0	True				
ANR	9737371	AssignmentExpression	i = 0		9737103	0		=			
ANR	9737372	Identifier	i		9737103	0					
ANR	9737373	PrimaryExpression	0		9737103	1					
ANR	9737374	Condition	i < ( int ) ( sizeof ( tests ) / sizeof ( tests [ 0 ] ) )	91:14:2459:2501	9737103	1	True				
ANR	9737375	RelationalExpression	i < ( int ) ( sizeof ( tests ) / sizeof ( tests [ 0 ] ) )		9737103	0		<			
ANR	9737376	Identifier	i		9737103	0					
ANR	9737377	CastExpression	( int ) ( sizeof ( tests ) / sizeof ( tests [ 0 ] ) )		9737103	1					
ANR	9737378	CastTarget	int		9737103	0					
ANR	9737379	MultiplicativeExpression	sizeof ( tests ) / sizeof ( tests [ 0 ] )		9737103	1		/			
ANR	9737380	SizeofExpression	sizeof ( tests )		9737103	0					
ANR	9737381	Sizeof	sizeof		9737103	0					
ANR	9737382	SizeofOperand	tests		9737103	1					
ANR	9737383	SizeofExpression	sizeof ( tests [ 0 ] )		9737103	1					
ANR	9737384	Sizeof	sizeof		9737103	0					
ANR	9737385	ArrayIndexing	tests [ 0 ]		9737103	1					
ANR	9737386	Identifier	tests		9737103	0					
ANR	9737387	PrimaryExpression	0		9737103	1					
ANR	9737388	PostIncDecOperationExpression	i ++	91:59:2504:2507	9737103	2	True				
ANR	9737389	Identifier	i		9737103	0					
ANR	9737390	IncDec	++		9737103	1					
ANR	9737391	CompoundStatement		57:2:1467:1467	9737103	3					
ANR	9737392	ExpressionStatement	"number = _cupsStrScand ( tests [ i ] , NULL , loc )"	93:4:2518:2561	9737103	0	True				
ANR	9737393	AssignmentExpression	"number = _cupsStrScand ( tests [ i ] , NULL , loc )"		9737103	0		=			
ANR	9737394	Identifier	number		9737103	0					
ANR	9737395	CallExpression	"_cupsStrScand ( tests [ i ] , NULL , loc )"		9737103	1					
ANR	9737396	Callee	_cupsStrScand		9737103	0					
ANR	9737397	Identifier	_cupsStrScand		9737103	0					
ANR	9737398	ArgumentList	tests [ i ]		9737103	1					
ANR	9737399	Argument	tests [ i ]		9737103	0					
ANR	9737400	ArrayIndexing	tests [ i ]		9737103	0					
ANR	9737401	Identifier	tests		9737103	0					
ANR	9737402	Identifier	i		9737103	1					
ANR	9737403	Argument	NULL		9737103	1					
ANR	9737404	Identifier	NULL		9737103	0					
ANR	9737405	Argument	loc		9737103	2					
ANR	9737406	Identifier	loc		9737103	0					
ANR	9737407	ExpressionStatement	"printf ( ""_cupsStrScand(\\""%s\\"") number=%f\\n"" , tests [ i ] , number )"	95:4:2568:2629	9737103	1	True				
ANR	9737408	CallExpression	"printf ( ""_cupsStrScand(\\""%s\\"") number=%f\\n"" , tests [ i ] , number )"		9737103	0					
ANR	9737409	Callee	printf		9737103	0					
ANR	9737410	Identifier	printf		9737103	0					
ANR	9737411	ArgumentList	"""_cupsStrScand(\\""%s\\"") number=%f\\n"""		9737103	1					
ANR	9737412	Argument	"""_cupsStrScand(\\""%s\\"") number=%f\\n"""		9737103	0					
ANR	9737413	PrimaryExpression	"""_cupsStrScand(\\""%s\\"") number=%f\\n"""		9737103	0					
ANR	9737414	Argument	tests [ i ]		9737103	1					
ANR	9737415	ArrayIndexing	tests [ i ]		9737103	0					
ANR	9737416	Identifier	tests		9737103	0					
ANR	9737417	Identifier	i		9737103	1					
ANR	9737418	Argument	number		9737103	2					
ANR	9737419	Identifier	number		9737103	0					
ANR	9737420	ExpressionStatement	"_cupsStrFormatd ( buffer , buffer + sizeof ( buffer ) , number , loc )"	97:4:2636:2697	9737103	2	True				
ANR	9737421	CallExpression	"_cupsStrFormatd ( buffer , buffer + sizeof ( buffer ) , number , loc )"		9737103	0					
ANR	9737422	Callee	_cupsStrFormatd		9737103	0					
ANR	9737423	Identifier	_cupsStrFormatd		9737103	0					
ANR	9737424	ArgumentList	buffer		9737103	1					
ANR	9737425	Argument	buffer		9737103	0					
ANR	9737426	Identifier	buffer		9737103	0					
ANR	9737427	Argument	buffer + sizeof ( buffer )		9737103	1					
ANR	9737428	AdditiveExpression	buffer + sizeof ( buffer )		9737103	0		+			
ANR	9737429	Identifier	buffer		9737103	0					
ANR	9737430	SizeofExpression	sizeof ( buffer )		9737103	1					
ANR	9737431	Sizeof	sizeof		9737103	0					
ANR	9737432	SizeofOperand	buffer		9737103	1					
ANR	9737433	Argument	number		9737103	2					
ANR	9737434	Identifier	number		9737103	0					
ANR	9737435	Argument	loc		9737103	3					
ANR	9737436	Identifier	loc		9737103	0					
ANR	9737437	ExpressionStatement	"printf ( ""_cupsStrFormatd(%f) buffer=\\""%s\\""\\n"" , number , buffer )"	99:4:2704:2765	9737103	3	True				
ANR	9737438	CallExpression	"printf ( ""_cupsStrFormatd(%f) buffer=\\""%s\\""\\n"" , number , buffer )"		9737103	0					
ANR	9737439	Callee	printf		9737103	0					
ANR	9737440	Identifier	printf		9737103	0					
ANR	9737441	ArgumentList	"""_cupsStrFormatd(%f) buffer=\\""%s\\""\\n"""		9737103	1					
ANR	9737442	Argument	"""_cupsStrFormatd(%f) buffer=\\""%s\\""\\n"""		9737103	0					
ANR	9737443	PrimaryExpression	"""_cupsStrFormatd(%f) buffer=\\""%s\\""\\n"""		9737103	0					
ANR	9737444	Argument	number		9737103	1					
ANR	9737445	Identifier	number		9737103	0					
ANR	9737446	Argument	buffer		9737103	2					
ANR	9737447	Identifier	buffer		9737103	0					
ANR	9737448	IfStatement	"if ( strcmp ( buffer , tests [ i ] ) )"		9737103	4					
ANR	9737449	Condition	"strcmp ( buffer , tests [ i ] )"	101:8:2776:2799	9737103	0	True				
ANR	9737450	CallExpression	"strcmp ( buffer , tests [ i ] )"		9737103	0					
ANR	9737451	Callee	strcmp		9737103	0					
ANR	9737452	Identifier	strcmp		9737103	0					
ANR	9737453	ArgumentList	buffer		9737103	1					
ANR	9737454	Argument	buffer		9737103	0					
ANR	9737455	Identifier	buffer		9737103	0					
ANR	9737456	Argument	tests [ i ]		9737103	1					
ANR	9737457	ArrayIndexing	tests [ i ]		9737103	0					
ANR	9737458	Identifier	tests		9737103	0					
ANR	9737459	Identifier	i		9737103	1					
ANR	9737460	CompoundStatement		67:4:1761:1761	9737103	1					
ANR	9737461	ExpressionStatement	errors ++	103:6:2814:2823	9737103	0	True				
ANR	9737462	PostIncDecOperationExpression	errors ++		9737103	0					
ANR	9737463	Identifier	errors		9737103	0					
ANR	9737464	IncDec	++		9737103	1					
ANR	9737465	ExpressionStatement	"puts ( ""**** ERROR: Bad formatted number! ****"" )"	104:6:2831:2877	9737103	1	True				
ANR	9737466	CallExpression	"puts ( ""**** ERROR: Bad formatted number! ****"" )"		9737103	0					
ANR	9737467	Callee	puts		9737103	0					
ANR	9737468	Identifier	puts		9737103	0					
ANR	9737469	ArgumentList	"""**** ERROR: Bad formatted number! ****"""		9737103	1					
ANR	9737470	Argument	"""**** ERROR: Bad formatted number! ****"""		9737103	0					
ANR	9737471	PrimaryExpression	"""**** ERROR: Bad formatted number! ****"""		9737103	0					
ANR	9737472	ReturnStatement	return ( errors > 0 ) ;	108:2:2892:2911	9737103	28	True				
ANR	9737473	RelationalExpression	errors > 0		9737103	0		>			
ANR	9737474	Identifier	errors		9737103	0					
ANR	9737475	PrimaryExpression	0		9737103	1					
ANR	9737476	ReturnType	int		9737103	1					
ANR	9737477	Identifier	main		9737103	2					
ANR	9737478	ParameterList	"int argc , char * argv [ ]"		9737103	3					
ANR	9737479	Parameter	int argc	34:5:933:941	9737103	0	True				
ANR	9737480	ParameterType	int		9737103	0					
ANR	9737481	Identifier	argc		9737103	1					
ANR	9737482	Parameter	char * argv [ ]	35:5:995:1006	9737103	1	True				
ANR	9737483	ParameterType	char * [ ]		9737103	0					
ANR	9737484	Identifier	argv		9737103	1					
ANR	9737485	CFGEntryNode	ENTRY		9737103		True				
ANR	9737486	CFGExitNode	EXIT		9737103		True				
ANR	9737487	Symbol	loc		9737103						
ANR	9737488	Symbol	language		9737103						
ANR	9737489	Symbol	* argv		9737103						
ANR	9737490	Symbol	language -> encoding		9737103						
ANR	9737491	Symbol	localeconv		9737103						
ANR	9737492	Symbol	argv		9737103						
ANR	9737493	Symbol	number		9737103						
ANR	9737494	Symbol	* language2		9737103						
ANR	9737495	Symbol	* tests		9737103						
ANR	9737496	Symbol	buffer		9737103						
ANR	9737497	Symbol	language2 -> encoding		9737103						
ANR	9737498	Symbol	_cupsStrScand		9737103						
ANR	9737499	Symbol	argc		9737103						
ANR	9737500	Symbol	strcmp		9737103						
ANR	9737501	Symbol	cupsLangDefault		9737103						
ANR	9737502	Symbol	* language		9737103						
ANR	9737503	Symbol	NULL		9737103						
ANR	9737504	Symbol	cupsLangGet		9737103						
ANR	9737505	Symbol	language2		9737103						
ANR	9737506	Symbol	i		9737103						
ANR	9737507	Symbol	_cupsEncodingName		9737103						
ANR	9737508	Symbol	_cupsLangString		9737103						
ANR	9737509	Symbol	tests		9737103						
ANR	9737510	Symbol	* i		9737103						
ANR	9737511	Symbol	language -> language		9737103						
ANR	9737512	Symbol	language2 -> language		9737103						
ANR	9737513	Symbol	errors		9737103						
