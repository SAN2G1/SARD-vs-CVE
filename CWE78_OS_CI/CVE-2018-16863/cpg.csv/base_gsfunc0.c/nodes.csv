command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	553600	File	data/converged/CVE-2018-16863_ghostpdl/base_gsfunc0.c								
ANR	553601	ClassDef	gs_function_Sd_s	37:8:1373:1482							
ANR	553602	DeclStmt									
ANR	553603	Decl							gs_function_head_t	gs_function_head_t	head
ANR	553604	DeclStmt									
ANR	553605	Decl							gs_function_Sd_params_t	gs_function_Sd_params_t	params
ANR	553606	DeclStmt									
ANR	553607	Decl							gs_function_Sd_s	gs_function_Sd_s	gs_function_Sd_t
ANR	553608	DeclStmt									
ANR	553609	Decl							int	int	n
ANR	553610	DeclStmt									
ANR	553611	Decl							byte	byte [ max_Sd_n * ( ( bps + 7 ) >> 3 ) ]	buf
ANR	553612	DeclStmt									
ANR	553613	Decl							const byte	const byte *	p
ANR	553614	DeclStmt									
ANR	553615	Decl							int	int	i
ANR	553616	Function	fn_gets_1	87:0:3126:3404							
ANR	553617	FunctionDef	"fn_gets_1 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		553616	0					
ANR	553618	CompoundStatement		89:0:3207:3404	553616	0					
ANR	553619	ExpressionStatement	"SETUP_SAMPLES ( 1 , ( ( offset & 7 ) + n + 7 ) >> 3 )"	90:4:3213:3258	553616	0	True				
ANR	553620	CallExpression	"SETUP_SAMPLES ( 1 , ( ( offset & 7 ) + n + 7 ) >> 3 )"		553616	0					
ANR	553621	Callee	SETUP_SAMPLES		553616	0					
ANR	553622	Identifier	SETUP_SAMPLES		553616	0					
ANR	553623	ArgumentList	1		553616	1					
ANR	553624	Argument	1		553616	0					
ANR	553625	PrimaryExpression	1		553616	0					
ANR	553626	Argument	( ( offset & 7 ) + n + 7 ) >> 3		553616	1					
ANR	553627	ShiftExpression	( ( offset & 7 ) + n + 7 ) >> 3		553616	0		>>			
ANR	553628	AdditiveExpression	( offset & 7 ) + n + 7		553616	0		+			
ANR	553629	BitAndExpression	offset & 7		553616	0		&			
ANR	553630	Identifier	offset		553616	0					
ANR	553631	PrimaryExpression	7		553616	1					
ANR	553632	AdditiveExpression	n + 7		553616	1		+			
ANR	553633	Identifier	n		553616	0					
ANR	553634	PrimaryExpression	7		553616	1					
ANR	553635	PrimaryExpression	3		553616	1					
ANR	553636	ForStatement	for ( i = 0 ; i < n ; ++ i )		553616	1					
ANR	553637	ForInit	i = 0 ;	91:9:3269:3274	553616	0	True				
ANR	553638	AssignmentExpression	i = 0		553616	0		=			
ANR	553639	Identifier	i		553616	0					
ANR	553640	PrimaryExpression	0		553616	1					
ANR	553641	Condition	i < n	91:16:3276:3280	553616	1	True				
ANR	553642	RelationalExpression	i < n		553616	0		<			
ANR	553643	Identifier	i		553616	0					
ANR	553644	Identifier	n		553616	1					
ANR	553645	UnaryExpression	++ i	91:23:3283:3285	553616	2	True				
ANR	553646	IncDec	++		553616	0					
ANR	553647	Identifier	i		553616	1					
ANR	553648	CompoundStatement		3:28:80:80	553616	3					
ANR	553649	ExpressionStatement	samples [ i ] = ( * p >> ( ~offset & 7 ) ) & 1	92:8:3298:3336	553616	0	True				
ANR	553650	AssignmentExpression	samples [ i ] = ( * p >> ( ~offset & 7 ) ) & 1		553616	0		=			
ANR	553651	ArrayIndexing	samples [ i ]		553616	0					
ANR	553652	Identifier	samples		553616	0					
ANR	553653	Identifier	i		553616	1					
ANR	553654	BitAndExpression	( * p >> ( ~offset & 7 ) ) & 1		553616	1		&			
ANR	553655	ShiftExpression	* p >> ( ~offset & 7 )		553616	0		>>			
ANR	553656	UnaryOperationExpression	* p		553616	0					
ANR	553657	UnaryOperator	*		553616	0					
ANR	553658	Identifier	p		553616	1					
ANR	553659	BitAndExpression	~offset & 7		553616	1		&			
ANR	553660	Identifier	~offset		553616	0					
ANR	553661	PrimaryExpression	7		553616	1					
ANR	553662	PrimaryExpression	1		553616	1					
ANR	553663	IfStatement	if ( ! ( ++ offset & 7 ) )		553616	1					
ANR	553664	Condition	! ( ++ offset & 7 )	93:12:3350:3364	553616	0	True				
ANR	553665	UnaryOperationExpression	! ( ++ offset & 7 )		553616	0					
ANR	553666	UnaryOperator	!		553616	0					
ANR	553667	BitAndExpression	++ offset & 7		553616	1		&			
ANR	553668	UnaryExpression	++ offset		553616	0					
ANR	553669	IncDec	++		553616	0					
ANR	553670	Identifier	offset		553616	1					
ANR	553671	PrimaryExpression	7		553616	1					
ANR	553672	ExpressionStatement	p ++	94:12:3379:3382	553616	1	True				
ANR	553673	PostIncDecOperationExpression	p ++		553616	0					
ANR	553674	Identifier	p		553616	0					
ANR	553675	IncDec	++		553616	1					
ANR	553676	ReturnStatement	return 0 ;	96:4:3394:3402	553616	2	True				
ANR	553677	PrimaryExpression	0		553616	0					
ANR	553678	ReturnType	static int		553616	1					
ANR	553679	Identifier	fn_gets_1		553616	2					
ANR	553680	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		553616	3					
ANR	553681	Parameter	const gs_function_Sd_t * pfn	88:10:3147:3174	553616	0	True				
ANR	553682	ParameterType	const gs_function_Sd_t *		553616	0					
ANR	553683	Identifier	pfn		553616	1					
ANR	553684	Parameter	ulong offset	88:40:3177:3188	553616	1	True				
ANR	553685	ParameterType	ulong		553616	0					
ANR	553686	Identifier	offset		553616	1					
ANR	553687	Parameter	uint * samples	88:54:3191:3204	553616	2	True				
ANR	553688	ParameterType	uint *		553616	0					
ANR	553689	Identifier	samples		553616	1					
ANR	553690	CFGEntryNode	ENTRY		553616		True				
ANR	553691	CFGExitNode	EXIT		553616		True				
ANR	553692	Symbol	p		553616						
ANR	553693	Symbol	* i		553616						
ANR	553694	Symbol	offset		553616						
ANR	553695	Symbol	* samples		553616						
ANR	553696	Symbol	pfn		553616						
ANR	553697	Symbol	i		553616						
ANR	553698	Symbol	~offset		553616						
ANR	553699	Symbol	* p		553616						
ANR	553700	Symbol	samples		553616						
ANR	553701	Symbol	n		553616						
ANR	553702	Function	fn_gets_2	98:0:3406:3701							
ANR	553703	FunctionDef	"fn_gets_2 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		553702	0					
ANR	553704	CompoundStatement		100:0:3487:3701	553702	0					
ANR	553705	ExpressionStatement	"SETUP_SAMPLES ( 2 , ( ( ( offset & 7 ) >> 1 ) + n + 3 ) >> 2 )"	101:4:3493:3545	553702	0	True				
ANR	553706	CallExpression	"SETUP_SAMPLES ( 2 , ( ( ( offset & 7 ) >> 1 ) + n + 3 ) >> 2 )"		553702	0					
ANR	553707	Callee	SETUP_SAMPLES		553702	0					
ANR	553708	Identifier	SETUP_SAMPLES		553702	0					
ANR	553709	ArgumentList	2		553702	1					
ANR	553710	Argument	2		553702	0					
ANR	553711	PrimaryExpression	2		553702	0					
ANR	553712	Argument	( ( ( offset & 7 ) >> 1 ) + n + 3 ) >> 2		553702	1					
ANR	553713	ShiftExpression	( ( ( offset & 7 ) >> 1 ) + n + 3 ) >> 2		553702	0		>>			
ANR	553714	AdditiveExpression	( ( offset & 7 ) >> 1 ) + n + 3		553702	0		+			
ANR	553715	ShiftExpression	( offset & 7 ) >> 1		553702	0		>>			
ANR	553716	BitAndExpression	offset & 7		553702	0		&			
ANR	553717	Identifier	offset		553702	0					
ANR	553718	PrimaryExpression	7		553702	1					
ANR	553719	PrimaryExpression	1		553702	1					
ANR	553720	AdditiveExpression	n + 3		553702	1		+			
ANR	553721	Identifier	n		553702	0					
ANR	553722	PrimaryExpression	3		553702	1					
ANR	553723	PrimaryExpression	2		553702	1					
ANR	553724	ForStatement	for ( i = 0 ; i < n ; ++ i )		553702	1					
ANR	553725	ForInit	i = 0 ;	102:9:3556:3561	553702	0	True				
ANR	553726	AssignmentExpression	i = 0		553702	0		=			
ANR	553727	Identifier	i		553702	0					
ANR	553728	PrimaryExpression	0		553702	1					
ANR	553729	Condition	i < n	102:16:3563:3567	553702	1	True				
ANR	553730	RelationalExpression	i < n		553702	0		<			
ANR	553731	Identifier	i		553702	0					
ANR	553732	Identifier	n		553702	1					
ANR	553733	UnaryExpression	++ i	102:23:3570:3572	553702	2	True				
ANR	553734	IncDec	++		553702	0					
ANR	553735	Identifier	i		553702	1					
ANR	553736	CompoundStatement		3:28:87:87	553702	3					
ANR	553737	ExpressionStatement	samples [ i ] = ( * p >> ( 6 - ( offset & 7 ) ) ) & 3	103:8:3585:3628	553702	0	True				
ANR	553738	AssignmentExpression	samples [ i ] = ( * p >> ( 6 - ( offset & 7 ) ) ) & 3		553702	0		=			
ANR	553739	ArrayIndexing	samples [ i ]		553702	0					
ANR	553740	Identifier	samples		553702	0					
ANR	553741	Identifier	i		553702	1					
ANR	553742	BitAndExpression	( * p >> ( 6 - ( offset & 7 ) ) ) & 3		553702	1		&			
ANR	553743	ShiftExpression	* p >> ( 6 - ( offset & 7 ) )		553702	0		>>			
ANR	553744	UnaryOperationExpression	* p		553702	0					
ANR	553745	UnaryOperator	*		553702	0					
ANR	553746	Identifier	p		553702	1					
ANR	553747	AdditiveExpression	6 - ( offset & 7 )		553702	1		-			
ANR	553748	PrimaryExpression	6		553702	0					
ANR	553749	BitAndExpression	offset & 7		553702	1		&			
ANR	553750	Identifier	offset		553702	0					
ANR	553751	PrimaryExpression	7		553702	1					
ANR	553752	PrimaryExpression	3		553702	1					
ANR	553753	IfStatement	if ( ! ( ( offset += 2 ) & 7 ) )		553702	1					
ANR	553754	Condition	! ( ( offset += 2 ) & 7 )	104:12:3642:3661	553702	0	True				
ANR	553755	UnaryOperationExpression	! ( ( offset += 2 ) & 7 )		553702	0					
ANR	553756	UnaryOperator	!		553702	0					
ANR	553757	BitAndExpression	( offset += 2 ) & 7		553702	1		&			
ANR	553758	AssignmentExpression	offset += 2		553702	0		+=			
ANR	553759	Identifier	offset		553702	0					
ANR	553760	PrimaryExpression	2		553702	1					
ANR	553761	PrimaryExpression	7		553702	1					
ANR	553762	ExpressionStatement	p ++	105:12:3676:3679	553702	1	True				
ANR	553763	PostIncDecOperationExpression	p ++		553702	0					
ANR	553764	Identifier	p		553702	0					
ANR	553765	IncDec	++		553702	1					
ANR	553766	ReturnStatement	return 0 ;	107:4:3691:3699	553702	2	True				
ANR	553767	PrimaryExpression	0		553702	0					
ANR	553768	ReturnType	static int		553702	1					
ANR	553769	Identifier	fn_gets_2		553702	2					
ANR	553770	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		553702	3					
ANR	553771	Parameter	const gs_function_Sd_t * pfn	99:10:3427:3454	553702	0	True				
ANR	553772	ParameterType	const gs_function_Sd_t *		553702	0					
ANR	553773	Identifier	pfn		553702	1					
ANR	553774	Parameter	ulong offset	99:40:3457:3468	553702	1	True				
ANR	553775	ParameterType	ulong		553702	0					
ANR	553776	Identifier	offset		553702	1					
ANR	553777	Parameter	uint * samples	99:54:3471:3484	553702	2	True				
ANR	553778	ParameterType	uint *		553702	0					
ANR	553779	Identifier	samples		553702	1					
ANR	553780	CFGEntryNode	ENTRY		553702		True				
ANR	553781	CFGExitNode	EXIT		553702		True				
ANR	553782	Symbol	p		553702						
ANR	553783	Symbol	* i		553702						
ANR	553784	Symbol	offset		553702						
ANR	553785	Symbol	* samples		553702						
ANR	553786	Symbol	pfn		553702						
ANR	553787	Symbol	i		553702						
ANR	553788	Symbol	* p		553702						
ANR	553789	Symbol	samples		553702						
ANR	553790	Symbol	n		553702						
ANR	553791	Function	fn_gets_4	109:0:3703:3959							
ANR	553792	FunctionDef	"fn_gets_4 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		553791	0					
ANR	553793	CompoundStatement		111:0:3784:3959	553791	0					
ANR	553794	ExpressionStatement	"SETUP_SAMPLES ( 4 , ( ( ( offset & 7 ) >> 2 ) + n + 1 ) >> 1 )"	112:4:3790:3842	553791	0	True				
ANR	553795	CallExpression	"SETUP_SAMPLES ( 4 , ( ( ( offset & 7 ) >> 2 ) + n + 1 ) >> 1 )"		553791	0					
ANR	553796	Callee	SETUP_SAMPLES		553791	0					
ANR	553797	Identifier	SETUP_SAMPLES		553791	0					
ANR	553798	ArgumentList	4		553791	1					
ANR	553799	Argument	4		553791	0					
ANR	553800	PrimaryExpression	4		553791	0					
ANR	553801	Argument	( ( ( offset & 7 ) >> 2 ) + n + 1 ) >> 1		553791	1					
ANR	553802	ShiftExpression	( ( ( offset & 7 ) >> 2 ) + n + 1 ) >> 1		553791	0		>>			
ANR	553803	AdditiveExpression	( ( offset & 7 ) >> 2 ) + n + 1		553791	0		+			
ANR	553804	ShiftExpression	( offset & 7 ) >> 2		553791	0		>>			
ANR	553805	BitAndExpression	offset & 7		553791	0		&			
ANR	553806	Identifier	offset		553791	0					
ANR	553807	PrimaryExpression	7		553791	1					
ANR	553808	PrimaryExpression	2		553791	1					
ANR	553809	AdditiveExpression	n + 1		553791	1		+			
ANR	553810	Identifier	n		553791	0					
ANR	553811	PrimaryExpression	1		553791	1					
ANR	553812	PrimaryExpression	1		553791	1					
ANR	553813	ForStatement	for ( i = 0 ; i < n ; ++ i )		553791	1					
ANR	553814	ForInit	i = 0 ;	113:9:3853:3858	553791	0	True				
ANR	553815	AssignmentExpression	i = 0		553791	0		=			
ANR	553816	Identifier	i		553791	0					
ANR	553817	PrimaryExpression	0		553791	1					
ANR	553818	Condition	i < n	113:16:3860:3864	553791	1	True				
ANR	553819	RelationalExpression	i < n		553791	0		<			
ANR	553820	Identifier	i		553791	0					
ANR	553821	Identifier	n		553791	1					
ANR	553822	UnaryExpression	++ i	113:23:3867:3869	553791	2	True				
ANR	553823	IncDec	++		553791	0					
ANR	553824	Identifier	i		553791	1					
ANR	553825	CompoundStatement		3:28:87:87	553791	3					
ANR	553826	ExpressionStatement	samples [ i ] = ( ( offset ^= 4 ) & 4 ? * p >> 4 : * p ++ & 0xf )	114:8:3882:3937	553791	0	True				
ANR	553827	AssignmentExpression	samples [ i ] = ( ( offset ^= 4 ) & 4 ? * p >> 4 : * p ++ & 0xf )		553791	0		=			
ANR	553828	ArrayIndexing	samples [ i ]		553791	0					
ANR	553829	Identifier	samples		553791	0					
ANR	553830	Identifier	i		553791	1					
ANR	553831	ConditionalExpression	( offset ^= 4 ) & 4 ? * p >> 4 : * p ++ & 0xf		553791	1					
ANR	553832	Condition	( offset ^= 4 ) & 4		553791	0					
ANR	553833	BitAndExpression	( offset ^= 4 ) & 4		553791	0		&			
ANR	553834	AssignmentExpression	offset ^= 4		553791	0		^=			
ANR	553835	Identifier	offset		553791	0					
ANR	553836	PrimaryExpression	4		553791	1					
ANR	553837	PrimaryExpression	4		553791	1					
ANR	553838	ShiftExpression	* p >> 4		553791	1		>>			
ANR	553839	UnaryOperationExpression	* p		553791	0					
ANR	553840	UnaryOperator	*		553791	0					
ANR	553841	Identifier	p		553791	1					
ANR	553842	PrimaryExpression	4		553791	1					
ANR	553843	BitAndExpression	* p ++ & 0xf		553791	2		&			
ANR	553844	UnaryOperationExpression	* p ++		553791	0					
ANR	553845	UnaryOperator	*		553791	0					
ANR	553846	PostIncDecOperationExpression	p ++		553791	1					
ANR	553847	Identifier	p		553791	0					
ANR	553848	IncDec	++		553791	1					
ANR	553849	PrimaryExpression	0xf		553791	1					
ANR	553850	ReturnStatement	return 0 ;	116:4:3949:3957	553791	2	True				
ANR	553851	PrimaryExpression	0		553791	0					
ANR	553852	ReturnType	static int		553791	1					
ANR	553853	Identifier	fn_gets_4		553791	2					
ANR	553854	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		553791	3					
ANR	553855	Parameter	const gs_function_Sd_t * pfn	110:10:3724:3751	553791	0	True				
ANR	553856	ParameterType	const gs_function_Sd_t *		553791	0					
ANR	553857	Identifier	pfn		553791	1					
ANR	553858	Parameter	ulong offset	110:40:3754:3765	553791	1	True				
ANR	553859	ParameterType	ulong		553791	0					
ANR	553860	Identifier	offset		553791	1					
ANR	553861	Parameter	uint * samples	110:54:3768:3781	553791	2	True				
ANR	553862	ParameterType	uint *		553791	0					
ANR	553863	Identifier	samples		553791	1					
ANR	553864	CFGEntryNode	ENTRY		553791		True				
ANR	553865	CFGExitNode	EXIT		553791		True				
ANR	553866	Symbol	p		553791						
ANR	553867	Symbol	* i		553791						
ANR	553868	Symbol	offset		553791						
ANR	553869	Symbol	* samples		553791						
ANR	553870	Symbol	* p ++		553791						
ANR	553871	Symbol	pfn		553791						
ANR	553872	Symbol	i		553791						
ANR	553873	Symbol	* p		553791						
ANR	553874	Symbol	samples		553791						
ANR	553875	Symbol	n		553791						
ANR	553876	Function	fn_gets_8	118:0:3961:4146							
ANR	553877	FunctionDef	"fn_gets_8 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		553876	0					
ANR	553878	CompoundStatement		120:0:4042:4146	553876	0					
ANR	553879	ExpressionStatement	"SETUP_SAMPLES ( 8 , n )"	121:4:4048:4067	553876	0	True				
ANR	553880	CallExpression	"SETUP_SAMPLES ( 8 , n )"		553876	0					
ANR	553881	Callee	SETUP_SAMPLES		553876	0					
ANR	553882	Identifier	SETUP_SAMPLES		553876	0					
ANR	553883	ArgumentList	8		553876	1					
ANR	553884	Argument	8		553876	0					
ANR	553885	PrimaryExpression	8		553876	0					
ANR	553886	Argument	n		553876	1					
ANR	553887	Identifier	n		553876	0					
ANR	553888	ForStatement	for ( i = 0 ; i < n ; ++ i )		553876	1					
ANR	553889	ForInit	i = 0 ;	122:9:4078:4083	553876	0	True				
ANR	553890	AssignmentExpression	i = 0		553876	0		=			
ANR	553891	Identifier	i		553876	0					
ANR	553892	PrimaryExpression	0		553876	1					
ANR	553893	Condition	i < n	122:16:4085:4089	553876	1	True				
ANR	553894	RelationalExpression	i < n		553876	0		<			
ANR	553895	Identifier	i		553876	0					
ANR	553896	Identifier	n		553876	1					
ANR	553897	UnaryExpression	++ i	122:23:4092:4094	553876	2	True				
ANR	553898	IncDec	++		553876	0					
ANR	553899	Identifier	i		553876	1					
ANR	553900	CompoundStatement		3:28:54:54	553876	3					
ANR	553901	ExpressionStatement	samples [ i ] = * p ++	123:8:4107:4124	553876	0	True				
ANR	553902	AssignmentExpression	samples [ i ] = * p ++		553876	0		=			
ANR	553903	ArrayIndexing	samples [ i ]		553876	0					
ANR	553904	Identifier	samples		553876	0					
ANR	553905	Identifier	i		553876	1					
ANR	553906	UnaryOperationExpression	* p ++		553876	1					
ANR	553907	UnaryOperator	*		553876	0					
ANR	553908	PostIncDecOperationExpression	p ++		553876	1					
ANR	553909	Identifier	p		553876	0					
ANR	553910	IncDec	++		553876	1					
ANR	553911	ReturnStatement	return 0 ;	125:4:4136:4144	553876	2	True				
ANR	553912	PrimaryExpression	0		553876	0					
ANR	553913	ReturnType	static int		553876	1					
ANR	553914	Identifier	fn_gets_8		553876	2					
ANR	553915	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		553876	3					
ANR	553916	Parameter	const gs_function_Sd_t * pfn	119:10:3982:4009	553876	0	True				
ANR	553917	ParameterType	const gs_function_Sd_t *		553876	0					
ANR	553918	Identifier	pfn		553876	1					
ANR	553919	Parameter	ulong offset	119:40:4012:4023	553876	1	True				
ANR	553920	ParameterType	ulong		553876	0					
ANR	553921	Identifier	offset		553876	1					
ANR	553922	Parameter	uint * samples	119:54:4026:4039	553876	2	True				
ANR	553923	ParameterType	uint *		553876	0					
ANR	553924	Identifier	samples		553876	1					
ANR	553925	CFGEntryNode	ENTRY		553876		True				
ANR	553926	CFGExitNode	EXIT		553876		True				
ANR	553927	Symbol	p		553876						
ANR	553928	Symbol	* i		553876						
ANR	553929	Symbol	offset		553876						
ANR	553930	Symbol	* samples		553876						
ANR	553931	Symbol	* p ++		553876						
ANR	553932	Symbol	pfn		553876						
ANR	553933	Symbol	i		553876						
ANR	553934	Symbol	samples		553876						
ANR	553935	Symbol	n		553876						
ANR	553936	Function	fn_gets_12	127:0:4148:4517							
ANR	553937	FunctionDef	"fn_gets_12 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		553936	0					
ANR	553938	CompoundStatement		129:0:4230:4517	553936	0					
ANR	553939	ExpressionStatement	"SETUP_SAMPLES ( 12 , ( ( ( offset & 7 ) >> 2 ) + 3 * n + 1 ) >> 1 )"	130:4:4236:4293	553936	0	True				
ANR	553940	CallExpression	"SETUP_SAMPLES ( 12 , ( ( ( offset & 7 ) >> 2 ) + 3 * n + 1 ) >> 1 )"		553936	0					
ANR	553941	Callee	SETUP_SAMPLES		553936	0					
ANR	553942	Identifier	SETUP_SAMPLES		553936	0					
ANR	553943	ArgumentList	12		553936	1					
ANR	553944	Argument	12		553936	0					
ANR	553945	PrimaryExpression	12		553936	0					
ANR	553946	Argument	( ( ( offset & 7 ) >> 2 ) + 3 * n + 1 ) >> 1		553936	1					
ANR	553947	ShiftExpression	( ( ( offset & 7 ) >> 2 ) + 3 * n + 1 ) >> 1		553936	0		>>			
ANR	553948	AdditiveExpression	( ( offset & 7 ) >> 2 ) + 3 * n + 1		553936	0		+			
ANR	553949	ShiftExpression	( offset & 7 ) >> 2		553936	0		>>			
ANR	553950	BitAndExpression	offset & 7		553936	0		&			
ANR	553951	Identifier	offset		553936	0					
ANR	553952	PrimaryExpression	7		553936	1					
ANR	553953	PrimaryExpression	2		553936	1					
ANR	553954	AdditiveExpression	3 * n + 1		553936	1		+			
ANR	553955	MultiplicativeExpression	3 * n		553936	0		*			
ANR	553956	PrimaryExpression	3		553936	0					
ANR	553957	Identifier	n		553936	1					
ANR	553958	PrimaryExpression	1		553936	1					
ANR	553959	PrimaryExpression	1		553936	1					
ANR	553960	ForStatement	for ( i = 0 ; i < n ; ++ i )		553936	1					
ANR	553961	ForInit	i = 0 ;	131:9:4304:4309	553936	0	True				
ANR	553962	AssignmentExpression	i = 0		553936	0		=			
ANR	553963	Identifier	i		553936	0					
ANR	553964	PrimaryExpression	0		553936	1					
ANR	553965	Condition	i < n	131:16:4311:4315	553936	1	True				
ANR	553966	RelationalExpression	i < n		553936	0		<			
ANR	553967	Identifier	i		553936	0					
ANR	553968	Identifier	n		553936	1					
ANR	553969	UnaryExpression	++ i	131:23:4318:4320	553936	2	True				
ANR	553970	IncDec	++		553936	0					
ANR	553971	Identifier	i		553936	1					
ANR	553972	CompoundStatement		3:28:92:92	553936	3					
ANR	553973	IfStatement	if ( offset & 4 )		553936	0					
ANR	553974	Condition	offset & 4	132:12:4337:4346	553936	0	True				
ANR	553975	BitAndExpression	offset & 4		553936	0		&			
ANR	553976	Identifier	offset		553936	0					
ANR	553977	PrimaryExpression	4		553936	1					
ANR	553978	ExpressionStatement	"samples [ i ] = ( ( * p & 0xf ) << 8 ) + p [ 1 ] , p += 2"	133:12:4361:4406	553936	1	True				
ANR	553979	Expression	"samples [ i ] = ( ( * p & 0xf ) << 8 ) + p [ 1 ] , p += 2"		553936	0					
ANR	553980	AssignmentExpression	samples [ i ] = ( ( * p & 0xf ) << 8 ) + p [ 1 ]		553936	0		=			
ANR	553981	ArrayIndexing	samples [ i ]		553936	0					
ANR	553982	Identifier	samples		553936	0					
ANR	553983	Identifier	i		553936	1					
ANR	553984	AdditiveExpression	( ( * p & 0xf ) << 8 ) + p [ 1 ]		553936	1		+			
ANR	553985	ShiftExpression	( * p & 0xf ) << 8		553936	0		<<			
ANR	553986	BitAndExpression	* p & 0xf		553936	0		&			
ANR	553987	UnaryOperationExpression	* p		553936	0					
ANR	553988	UnaryOperator	*		553936	0					
ANR	553989	Identifier	p		553936	1					
ANR	553990	PrimaryExpression	0xf		553936	1					
ANR	553991	PrimaryExpression	8		553936	1					
ANR	553992	ArrayIndexing	p [ 1 ]		553936	1					
ANR	553993	Identifier	p		553936	0					
ANR	553994	PrimaryExpression	1		553936	1					
ANR	553995	AssignmentExpression	p += 2		553936	1		+=			
ANR	553996	Identifier	p		553936	0					
ANR	553997	PrimaryExpression	2		553936	1					
ANR	553998	ElseStatement	else		553936	0					
ANR	553999	ExpressionStatement	"samples [ i ] = ( * p << 4 ) + ( p [ 1 ] >> 4 ) , p ++"	135:12:4433:4474	553936	0	True				
ANR	554000	Expression	"samples [ i ] = ( * p << 4 ) + ( p [ 1 ] >> 4 ) , p ++"		553936	0					
ANR	554001	AssignmentExpression	samples [ i ] = ( * p << 4 ) + ( p [ 1 ] >> 4 )		553936	0		=			
ANR	554002	ArrayIndexing	samples [ i ]		553936	0					
ANR	554003	Identifier	samples		553936	0					
ANR	554004	Identifier	i		553936	1					
ANR	554005	AdditiveExpression	( * p << 4 ) + ( p [ 1 ] >> 4 )		553936	1		+			
ANR	554006	ShiftExpression	* p << 4		553936	0		<<			
ANR	554007	UnaryOperationExpression	* p		553936	0					
ANR	554008	UnaryOperator	*		553936	0					
ANR	554009	Identifier	p		553936	1					
ANR	554010	PrimaryExpression	4		553936	1					
ANR	554011	ShiftExpression	p [ 1 ] >> 4		553936	1		>>			
ANR	554012	ArrayIndexing	p [ 1 ]		553936	0					
ANR	554013	Identifier	p		553936	0					
ANR	554014	PrimaryExpression	1		553936	1					
ANR	554015	PrimaryExpression	4		553936	1					
ANR	554016	PostIncDecOperationExpression	p ++		553936	1					
ANR	554017	Identifier	p		553936	0					
ANR	554018	IncDec	++		553936	1					
ANR	554019	ExpressionStatement	offset ^= 4	136:8:4484:4495	553936	1	True				
ANR	554020	AssignmentExpression	offset ^= 4		553936	0		^=			
ANR	554021	Identifier	offset		553936	0					
ANR	554022	PrimaryExpression	4		553936	1					
ANR	554023	ReturnStatement	return 0 ;	138:4:4507:4515	553936	2	True				
ANR	554024	PrimaryExpression	0		553936	0					
ANR	554025	ReturnType	static int		553936	1					
ANR	554026	Identifier	fn_gets_12		553936	2					
ANR	554027	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		553936	3					
ANR	554028	Parameter	const gs_function_Sd_t * pfn	128:11:4170:4197	553936	0	True				
ANR	554029	ParameterType	const gs_function_Sd_t *		553936	0					
ANR	554030	Identifier	pfn		553936	1					
ANR	554031	Parameter	ulong offset	128:41:4200:4211	553936	1	True				
ANR	554032	ParameterType	ulong		553936	0					
ANR	554033	Identifier	offset		553936	1					
ANR	554034	Parameter	uint * samples	128:55:4214:4227	553936	2	True				
ANR	554035	ParameterType	uint *		553936	0					
ANR	554036	Identifier	samples		553936	1					
ANR	554037	CFGEntryNode	ENTRY		553936		True				
ANR	554038	CFGExitNode	EXIT		553936		True				
ANR	554039	Symbol	p		553936						
ANR	554040	Symbol	* i		553936						
ANR	554041	Symbol	offset		553936						
ANR	554042	Symbol	* samples		553936						
ANR	554043	Symbol	pfn		553936						
ANR	554044	Symbol	i		553936						
ANR	554045	Symbol	* p		553936						
ANR	554046	Symbol	samples		553936						
ANR	554047	Symbol	n		553936						
ANR	554048	Function	fn_gets_16	140:0:4519:4738							
ANR	554049	FunctionDef	"fn_gets_16 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		554048	0					
ANR	554050	CompoundStatement		142:0:4601:4738	554048	0					
ANR	554051	ExpressionStatement	"SETUP_SAMPLES ( 16 , n * 2 )"	143:4:4607:4631	554048	0	True				
ANR	554052	CallExpression	"SETUP_SAMPLES ( 16 , n * 2 )"		554048	0					
ANR	554053	Callee	SETUP_SAMPLES		554048	0					
ANR	554054	Identifier	SETUP_SAMPLES		554048	0					
ANR	554055	ArgumentList	16		554048	1					
ANR	554056	Argument	16		554048	0					
ANR	554057	PrimaryExpression	16		554048	0					
ANR	554058	Argument	n * 2		554048	1					
ANR	554059	MultiplicativeExpression	n * 2		554048	0		*			
ANR	554060	Identifier	n		554048	0					
ANR	554061	PrimaryExpression	2		554048	1					
ANR	554062	ForStatement	for ( i = 0 ; i < n ; ++ i )		554048	1					
ANR	554063	ForInit	i = 0 ;	144:9:4642:4647	554048	0	True				
ANR	554064	AssignmentExpression	i = 0		554048	0		=			
ANR	554065	Identifier	i		554048	0					
ANR	554066	PrimaryExpression	0		554048	1					
ANR	554067	Condition	i < n	144:16:4649:4653	554048	1	True				
ANR	554068	RelationalExpression	i < n		554048	0		<			
ANR	554069	Identifier	i		554048	0					
ANR	554070	Identifier	n		554048	1					
ANR	554071	UnaryExpression	++ i	144:23:4656:4658	554048	2	True				
ANR	554072	IncDec	++		554048	0					
ANR	554073	Identifier	i		554048	1					
ANR	554074	CompoundStatement		3:28:59:59	554048	3					
ANR	554075	ExpressionStatement	samples [ i ] = ( * p << 8 ) + p [ 1 ]	145:8:4671:4700	554048	0	True				
ANR	554076	AssignmentExpression	samples [ i ] = ( * p << 8 ) + p [ 1 ]		554048	0		=			
ANR	554077	ArrayIndexing	samples [ i ]		554048	0					
ANR	554078	Identifier	samples		554048	0					
ANR	554079	Identifier	i		554048	1					
ANR	554080	AdditiveExpression	( * p << 8 ) + p [ 1 ]		554048	1		+			
ANR	554081	ShiftExpression	* p << 8		554048	0		<<			
ANR	554082	UnaryOperationExpression	* p		554048	0					
ANR	554083	UnaryOperator	*		554048	0					
ANR	554084	Identifier	p		554048	1					
ANR	554085	PrimaryExpression	8		554048	1					
ANR	554086	ArrayIndexing	p [ 1 ]		554048	1					
ANR	554087	Identifier	p		554048	0					
ANR	554088	PrimaryExpression	1		554048	1					
ANR	554089	ExpressionStatement	p += 2	146:8:4710:4716	554048	1	True				
ANR	554090	AssignmentExpression	p += 2		554048	0		+=			
ANR	554091	Identifier	p		554048	0					
ANR	554092	PrimaryExpression	2		554048	1					
ANR	554093	ReturnStatement	return 0 ;	148:4:4728:4736	554048	2	True				
ANR	554094	PrimaryExpression	0		554048	0					
ANR	554095	ReturnType	static int		554048	1					
ANR	554096	Identifier	fn_gets_16		554048	2					
ANR	554097	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		554048	3					
ANR	554098	Parameter	const gs_function_Sd_t * pfn	141:11:4541:4568	554048	0	True				
ANR	554099	ParameterType	const gs_function_Sd_t *		554048	0					
ANR	554100	Identifier	pfn		554048	1					
ANR	554101	Parameter	ulong offset	141:41:4571:4582	554048	1	True				
ANR	554102	ParameterType	ulong		554048	0					
ANR	554103	Identifier	offset		554048	1					
ANR	554104	Parameter	uint * samples	141:55:4585:4598	554048	2	True				
ANR	554105	ParameterType	uint *		554048	0					
ANR	554106	Identifier	samples		554048	1					
ANR	554107	CFGEntryNode	ENTRY		554048		True				
ANR	554108	CFGExitNode	EXIT		554048		True				
ANR	554109	Symbol	p		554048						
ANR	554110	Symbol	* i		554048						
ANR	554111	Symbol	offset		554048						
ANR	554112	Symbol	* samples		554048						
ANR	554113	Symbol	pfn		554048						
ANR	554114	Symbol	i		554048						
ANR	554115	Symbol	* p		554048						
ANR	554116	Symbol	samples		554048						
ANR	554117	Symbol	n		554048						
ANR	554118	Function	fn_gets_24	150:0:4740:4974							
ANR	554119	FunctionDef	"fn_gets_24 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		554118	0					
ANR	554120	CompoundStatement		152:0:4822:4974	554118	0					
ANR	554121	ExpressionStatement	"SETUP_SAMPLES ( 24 , n * 3 )"	153:4:4828:4852	554118	0	True				
ANR	554122	CallExpression	"SETUP_SAMPLES ( 24 , n * 3 )"		554118	0					
ANR	554123	Callee	SETUP_SAMPLES		554118	0					
ANR	554124	Identifier	SETUP_SAMPLES		554118	0					
ANR	554125	ArgumentList	24		554118	1					
ANR	554126	Argument	24		554118	0					
ANR	554127	PrimaryExpression	24		554118	0					
ANR	554128	Argument	n * 3		554118	1					
ANR	554129	MultiplicativeExpression	n * 3		554118	0		*			
ANR	554130	Identifier	n		554118	0					
ANR	554131	PrimaryExpression	3		554118	1					
ANR	554132	ForStatement	for ( i = 0 ; i < n ; ++ i )		554118	1					
ANR	554133	ForInit	i = 0 ;	154:9:4863:4868	554118	0	True				
ANR	554134	AssignmentExpression	i = 0		554118	0		=			
ANR	554135	Identifier	i		554118	0					
ANR	554136	PrimaryExpression	0		554118	1					
ANR	554137	Condition	i < n	154:16:4870:4874	554118	1	True				
ANR	554138	RelationalExpression	i < n		554118	0		<			
ANR	554139	Identifier	i		554118	0					
ANR	554140	Identifier	n		554118	1					
ANR	554141	UnaryExpression	++ i	154:23:4877:4879	554118	2	True				
ANR	554142	IncDec	++		554118	0					
ANR	554143	Identifier	i		554118	1					
ANR	554144	CompoundStatement		3:28:59:59	554118	3					
ANR	554145	ExpressionStatement	samples [ i ] = ( * p << 16 ) + ( p [ 1 ] << 8 ) + p [ 2 ]	155:8:4892:4936	554118	0	True				
ANR	554146	AssignmentExpression	samples [ i ] = ( * p << 16 ) + ( p [ 1 ] << 8 ) + p [ 2 ]		554118	0		=			
ANR	554147	ArrayIndexing	samples [ i ]		554118	0					
ANR	554148	Identifier	samples		554118	0					
ANR	554149	Identifier	i		554118	1					
ANR	554150	AdditiveExpression	( * p << 16 ) + ( p [ 1 ] << 8 ) + p [ 2 ]		554118	1		+			
ANR	554151	ShiftExpression	* p << 16		554118	0		<<			
ANR	554152	UnaryOperationExpression	* p		554118	0					
ANR	554153	UnaryOperator	*		554118	0					
ANR	554154	Identifier	p		554118	1					
ANR	554155	PrimaryExpression	16		554118	1					
ANR	554156	AdditiveExpression	( p [ 1 ] << 8 ) + p [ 2 ]		554118	1		+			
ANR	554157	ShiftExpression	p [ 1 ] << 8		554118	0		<<			
ANR	554158	ArrayIndexing	p [ 1 ]		554118	0					
ANR	554159	Identifier	p		554118	0					
ANR	554160	PrimaryExpression	1		554118	1					
ANR	554161	PrimaryExpression	8		554118	1					
ANR	554162	ArrayIndexing	p [ 2 ]		554118	1					
ANR	554163	Identifier	p		554118	0					
ANR	554164	PrimaryExpression	2		554118	1					
ANR	554165	ExpressionStatement	p += 3	156:8:4946:4952	554118	1	True				
ANR	554166	AssignmentExpression	p += 3		554118	0		+=			
ANR	554167	Identifier	p		554118	0					
ANR	554168	PrimaryExpression	3		554118	1					
ANR	554169	ReturnStatement	return 0 ;	158:4:4964:4972	554118	2	True				
ANR	554170	PrimaryExpression	0		554118	0					
ANR	554171	ReturnType	static int		554118	1					
ANR	554172	Identifier	fn_gets_24		554118	2					
ANR	554173	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		554118	3					
ANR	554174	Parameter	const gs_function_Sd_t * pfn	151:11:4762:4789	554118	0	True				
ANR	554175	ParameterType	const gs_function_Sd_t *		554118	0					
ANR	554176	Identifier	pfn		554118	1					
ANR	554177	Parameter	ulong offset	151:41:4792:4803	554118	1	True				
ANR	554178	ParameterType	ulong		554118	0					
ANR	554179	Identifier	offset		554118	1					
ANR	554180	Parameter	uint * samples	151:55:4806:4819	554118	2	True				
ANR	554181	ParameterType	uint *		554118	0					
ANR	554182	Identifier	samples		554118	1					
ANR	554183	CFGEntryNode	ENTRY		554118		True				
ANR	554184	CFGExitNode	EXIT		554118		True				
ANR	554185	Symbol	p		554118						
ANR	554186	Symbol	* i		554118						
ANR	554187	Symbol	offset		554118						
ANR	554188	Symbol	* samples		554118						
ANR	554189	Symbol	pfn		554118						
ANR	554190	Symbol	i		554118						
ANR	554191	Symbol	* p		554118						
ANR	554192	Symbol	samples		554118						
ANR	554193	Symbol	n		554118						
ANR	554194	Function	fn_gets_32	160:0:4976:5225							
ANR	554195	FunctionDef	"fn_gets_32 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		554194	0					
ANR	554196	CompoundStatement		162:0:5058:5225	554194	0					
ANR	554197	ExpressionStatement	"SETUP_SAMPLES ( 32 , n * 4 )"	163:4:5064:5088	554194	0	True				
ANR	554198	CallExpression	"SETUP_SAMPLES ( 32 , n * 4 )"		554194	0					
ANR	554199	Callee	SETUP_SAMPLES		554194	0					
ANR	554200	Identifier	SETUP_SAMPLES		554194	0					
ANR	554201	ArgumentList	32		554194	1					
ANR	554202	Argument	32		554194	0					
ANR	554203	PrimaryExpression	32		554194	0					
ANR	554204	Argument	n * 4		554194	1					
ANR	554205	MultiplicativeExpression	n * 4		554194	0		*			
ANR	554206	Identifier	n		554194	0					
ANR	554207	PrimaryExpression	4		554194	1					
ANR	554208	ForStatement	for ( i = 0 ; i < n ; ++ i )		554194	1					
ANR	554209	ForInit	i = 0 ;	164:9:5099:5104	554194	0	True				
ANR	554210	AssignmentExpression	i = 0		554194	0		=			
ANR	554211	Identifier	i		554194	0					
ANR	554212	PrimaryExpression	0		554194	1					
ANR	554213	Condition	i < n	164:16:5106:5110	554194	1	True				
ANR	554214	RelationalExpression	i < n		554194	0		<			
ANR	554215	Identifier	i		554194	0					
ANR	554216	Identifier	n		554194	1					
ANR	554217	UnaryExpression	++ i	164:23:5113:5115	554194	2	True				
ANR	554218	IncDec	++		554194	0					
ANR	554219	Identifier	i		554194	1					
ANR	554220	CompoundStatement		3:28:59:59	554194	3					
ANR	554221	ExpressionStatement	samples [ i ] = ( * p << 24 ) + ( p [ 1 ] << 16 ) + ( p [ 2 ] << 8 ) + p [ 3 ]	165:8:5128:5187	554194	0	True				
ANR	554222	AssignmentExpression	samples [ i ] = ( * p << 24 ) + ( p [ 1 ] << 16 ) + ( p [ 2 ] << 8 ) + p [ 3 ]		554194	0		=			
ANR	554223	ArrayIndexing	samples [ i ]		554194	0					
ANR	554224	Identifier	samples		554194	0					
ANR	554225	Identifier	i		554194	1					
ANR	554226	AdditiveExpression	( * p << 24 ) + ( p [ 1 ] << 16 ) + ( p [ 2 ] << 8 ) + p [ 3 ]		554194	1		+			
ANR	554227	ShiftExpression	* p << 24		554194	0		<<			
ANR	554228	UnaryOperationExpression	* p		554194	0					
ANR	554229	UnaryOperator	*		554194	0					
ANR	554230	Identifier	p		554194	1					
ANR	554231	PrimaryExpression	24		554194	1					
ANR	554232	AdditiveExpression	( p [ 1 ] << 16 ) + ( p [ 2 ] << 8 ) + p [ 3 ]		554194	1		+			
ANR	554233	ShiftExpression	p [ 1 ] << 16		554194	0		<<			
ANR	554234	ArrayIndexing	p [ 1 ]		554194	0					
ANR	554235	Identifier	p		554194	0					
ANR	554236	PrimaryExpression	1		554194	1					
ANR	554237	PrimaryExpression	16		554194	1					
ANR	554238	AdditiveExpression	( p [ 2 ] << 8 ) + p [ 3 ]		554194	1		+			
ANR	554239	ShiftExpression	p [ 2 ] << 8		554194	0		<<			
ANR	554240	ArrayIndexing	p [ 2 ]		554194	0					
ANR	554241	Identifier	p		554194	0					
ANR	554242	PrimaryExpression	2		554194	1					
ANR	554243	PrimaryExpression	8		554194	1					
ANR	554244	ArrayIndexing	p [ 3 ]		554194	1					
ANR	554245	Identifier	p		554194	0					
ANR	554246	PrimaryExpression	3		554194	1					
ANR	554247	ExpressionStatement	p += 4	166:8:5197:5203	554194	1	True				
ANR	554248	AssignmentExpression	p += 4		554194	0		+=			
ANR	554249	Identifier	p		554194	0					
ANR	554250	PrimaryExpression	4		554194	1					
ANR	554251	ReturnStatement	return 0 ;	168:4:5215:5223	554194	2	True				
ANR	554252	PrimaryExpression	0		554194	0					
ANR	554253	ReturnType	static int		554194	1					
ANR	554254	Identifier	fn_gets_32		554194	2					
ANR	554255	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		554194	3					
ANR	554256	Parameter	const gs_function_Sd_t * pfn	161:11:4998:5025	554194	0	True				
ANR	554257	ParameterType	const gs_function_Sd_t *		554194	0					
ANR	554258	Identifier	pfn		554194	1					
ANR	554259	Parameter	ulong offset	161:41:5028:5039	554194	1	True				
ANR	554260	ParameterType	ulong		554194	0					
ANR	554261	Identifier	offset		554194	1					
ANR	554262	Parameter	uint * samples	161:55:5042:5055	554194	2	True				
ANR	554263	ParameterType	uint *		554194	0					
ANR	554264	Identifier	samples		554194	1					
ANR	554265	CFGEntryNode	ENTRY		554194		True				
ANR	554266	CFGExitNode	EXIT		554194		True				
ANR	554267	Symbol	p		554194						
ANR	554268	Symbol	* i		554194						
ANR	554269	Symbol	offset		554194						
ANR	554270	Symbol	* samples		554194						
ANR	554271	Symbol	pfn		554194						
ANR	554272	Symbol	i		554194						
ANR	554273	Symbol	* p		554194						
ANR	554274	Symbol	samples		554194						
ANR	554275	Symbol	n		554194						
ANR	554276	Function	interpolate_cubic	188:0:5845:6637							
ANR	554277	FunctionDef	"interpolate_cubic (double x , double f0 , double f1 , double f2 , double f3)"		554276	0					
ANR	554278	CompoundStatement		190:0:5931:6637	554276	0					
ANR	554279	Statement	define	195:1:6086:6091	554276	0	True				
ANR	554280	Statement	a	195:8:6093:6093	554276	1	True				
ANR	554281	Statement	(	195:10:6095:6095	554276	2	True				
ANR	554282	Statement	-	195:11:6096:6096	554276	3	True				
ANR	554283	Statement	0.5	195:12:6097:6099	554276	4	True				
ANR	554284	Statement	)	195:15:6100:6100	554276	5	True				
ANR	554285	Statement	define	196:1:6103:6108	554276	6	True				
ANR	554286	Statement	SQR	196:8:6110:6112	554276	7	True				
ANR	554287	Statement	(	196:11:6113:6113	554276	8	True				
ANR	554288	Statement	v	196:12:6114:6114	554276	9	True				
ANR	554289	Statement	)	196:13:6115:6115	554276	10	True				
ANR	554290	Statement	(	196:15:6117:6117	554276	11	True				
ANR	554291	Statement	(	196:16:6118:6118	554276	12	True				
ANR	554292	Statement	v	196:17:6119:6119	554276	13	True				
ANR	554293	Statement	)	196:18:6120:6120	554276	14	True				
ANR	554294	Statement	*	196:20:6122:6122	554276	15	True				
ANR	554295	Statement	(	196:22:6124:6124	554276	16	True				
ANR	554296	Statement	v	196:23:6125:6125	554276	17	True				
ANR	554297	Statement	)	196:24:6126:6126	554276	18	True				
ANR	554298	Statement	)	196:25:6127:6127	554276	19	True				
ANR	554299	Statement	define	197:1:6130:6135	554276	20	True				
ANR	554300	Statement	CUBE	197:8:6137:6140	554276	21	True				
ANR	554301	Statement	(	197:12:6141:6141	554276	22	True				
ANR	554302	Statement	v	197:13:6142:6142	554276	23	True				
ANR	554303	Statement	)	197:14:6143:6143	554276	24	True				
ANR	554304	Statement	(	197:16:6145:6145	554276	25	True				
ANR	554305	Statement	(	197:17:6146:6146	554276	26	True				
ANR	554306	Statement	v	197:18:6147:6147	554276	27	True				
ANR	554307	Statement	)	197:19:6148:6148	554276	28	True				
ANR	554308	Statement	*	197:21:6150:6150	554276	29	True				
ANR	554309	Statement	(	197:23:6152:6152	554276	30	True				
ANR	554310	Statement	v	197:24:6153:6153	554276	31	True				
ANR	554311	Statement	)	197:25:6154:6154	554276	32	True				
ANR	554312	Statement	*	197:27:6156:6156	554276	33	True				
ANR	554313	Statement	(	197:29:6158:6158	554276	34	True				
ANR	554314	Statement	v	197:30:6159:6159	554276	35	True				
ANR	554315	Statement	)	197:31:6160:6160	554276	36	True				
ANR	554316	Statement	)	197:32:6161:6161	554276	37	True				
ANR	554317	IdentifierDeclStatement	"const double xm1 = x - 1 , m2x = 2 - x , m3x = 3 - x ;"	198:4:6167:6217	554276	38	True				
ANR	554318	IdentifierDecl	xm1 = x - 1		554276	0					
ANR	554319	IdentifierDeclType	const double		554276	0					
ANR	554320	Identifier	xm1		554276	1					
ANR	554321	AssignmentExpression	xm1 = x - 1		554276	2		=			
ANR	554322	Identifier	xm1		554276	0					
ANR	554323	AdditiveExpression	x - 1		554276	1		-			
ANR	554324	Identifier	x		554276	0					
ANR	554325	PrimaryExpression	1		554276	1					
ANR	554326	IdentifierDecl	m2x = 2 - x		554276	1					
ANR	554327	IdentifierDeclType	const double		554276	0					
ANR	554328	Identifier	m2x		554276	1					
ANR	554329	AssignmentExpression	m2x = 2 - x		554276	2		=			
ANR	554330	Identifier	m2x		554276	0					
ANR	554331	AdditiveExpression	2 - x		554276	1		-			
ANR	554332	PrimaryExpression	2		554276	0					
ANR	554333	Identifier	x		554276	1					
ANR	554334	IdentifierDecl	m3x = 3 - x		554276	2					
ANR	554335	IdentifierDeclType	const double		554276	0					
ANR	554336	Identifier	m3x		554276	1					
ANR	554337	AssignmentExpression	m3x = 3 - x		554276	2		=			
ANR	554338	Identifier	m3x		554276	0					
ANR	554339	AdditiveExpression	3 - x		554276	1		-			
ANR	554340	PrimaryExpression	3		554276	0					
ANR	554341	Identifier	x		554276	1					
ANR	554342	IdentifierDeclStatement	const double c = ( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0 + ( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3 ;	199:4:6223:6491	554276	39	True				
ANR	554343	IdentifierDecl	c = ( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0 + ( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		554276	0					
ANR	554344	IdentifierDeclType	const double		554276	0					
ANR	554345	Identifier	c		554276	1					
ANR	554346	AssignmentExpression	c = ( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0 + ( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		554276	2		=			
ANR	554347	Identifier	c		554276	0					
ANR	554348	AdditiveExpression	( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0 + ( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		554276	1		+			
ANR	554349	MultiplicativeExpression	( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0		554276	0		*			
ANR	554350	AdditiveExpression	a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a		554276	0		-			
ANR	554351	MultiplicativeExpression	a * CUBE ( x )		554276	0		*			
ANR	554352	Identifier	a		554276	0					
ANR	554353	CallExpression	CUBE ( x )		554276	1					
ANR	554354	Callee	CUBE		554276	0					
ANR	554355	Identifier	CUBE		554276	0					
ANR	554356	ArgumentList	x		554276	1					
ANR	554357	Argument	x		554276	0					
ANR	554358	Identifier	x		554276	0					
ANR	554359	AdditiveExpression	5 * a * SQR ( x ) + 8 * a * x - 4 * a		554276	1		+			
ANR	554360	MultiplicativeExpression	5 * a * SQR ( x )		554276	0		*			
ANR	554361	PrimaryExpression	5		554276	0					
ANR	554362	MultiplicativeExpression	a * SQR ( x )		554276	1		*			
ANR	554363	Identifier	a		554276	0					
ANR	554364	CallExpression	SQR ( x )		554276	1					
ANR	554365	Callee	SQR		554276	0					
ANR	554366	Identifier	SQR		554276	0					
ANR	554367	ArgumentList	x		554276	1					
ANR	554368	Argument	x		554276	0					
ANR	554369	Identifier	x		554276	0					
ANR	554370	AdditiveExpression	8 * a * x - 4 * a		554276	1		-			
ANR	554371	MultiplicativeExpression	8 * a * x		554276	0		*			
ANR	554372	PrimaryExpression	8		554276	0					
ANR	554373	MultiplicativeExpression	a * x		554276	1		*			
ANR	554374	Identifier	a		554276	0					
ANR	554375	Identifier	x		554276	1					
ANR	554376	MultiplicativeExpression	4 * a		554276	1		*			
ANR	554377	PrimaryExpression	4		554276	0					
ANR	554378	Identifier	a		554276	1					
ANR	554379	Identifier	f0		554276	1					
ANR	554380	AdditiveExpression	( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		554276	1		+			
ANR	554381	MultiplicativeExpression	( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1		554276	0		*			
ANR	554382	AdditiveExpression	( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1		554276	0		-			
ANR	554383	MultiplicativeExpression	( a + 2 ) * CUBE ( xm1 )		554276	0		*			
ANR	554384	AdditiveExpression	a + 2		554276	0		+			
ANR	554385	Identifier	a		554276	0					
ANR	554386	PrimaryExpression	2		554276	1					
ANR	554387	CallExpression	CUBE ( xm1 )		554276	1					
ANR	554388	Callee	CUBE		554276	0					
ANR	554389	Identifier	CUBE		554276	0					
ANR	554390	ArgumentList	xm1		554276	1					
ANR	554391	Argument	xm1		554276	0					
ANR	554392	Identifier	xm1		554276	0					
ANR	554393	AdditiveExpression	( a + 3 ) * SQR ( xm1 ) + 1		554276	1		+			
ANR	554394	MultiplicativeExpression	( a + 3 ) * SQR ( xm1 )		554276	0		*			
ANR	554395	AdditiveExpression	a + 3		554276	0		+			
ANR	554396	Identifier	a		554276	0					
ANR	554397	PrimaryExpression	3		554276	1					
ANR	554398	CallExpression	SQR ( xm1 )		554276	1					
ANR	554399	Callee	SQR		554276	0					
ANR	554400	Identifier	SQR		554276	0					
ANR	554401	ArgumentList	xm1		554276	1					
ANR	554402	Argument	xm1		554276	0					
ANR	554403	Identifier	xm1		554276	0					
ANR	554404	PrimaryExpression	1		554276	1					
ANR	554405	Identifier	f1		554276	1					
ANR	554406	AdditiveExpression	( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		554276	1		+			
ANR	554407	MultiplicativeExpression	( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2		554276	0		*			
ANR	554408	AdditiveExpression	( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1		554276	0		-			
ANR	554409	MultiplicativeExpression	( a + 2 ) * CUBE ( m2x )		554276	0		*			
ANR	554410	AdditiveExpression	a + 2		554276	0		+			
ANR	554411	Identifier	a		554276	0					
ANR	554412	PrimaryExpression	2		554276	1					
ANR	554413	CallExpression	CUBE ( m2x )		554276	1					
ANR	554414	Callee	CUBE		554276	0					
ANR	554415	Identifier	CUBE		554276	0					
ANR	554416	ArgumentList	m2x		554276	1					
ANR	554417	Argument	m2x		554276	0					
ANR	554418	Identifier	m2x		554276	0					
ANR	554419	AdditiveExpression	( a + 3 ) * SQR ( m2x ) + 1		554276	1		+			
ANR	554420	MultiplicativeExpression	( a + 3 ) * SQR ( m2x )		554276	0		*			
ANR	554421	AdditiveExpression	a + 3		554276	0		+			
ANR	554422	Identifier	a		554276	0					
ANR	554423	PrimaryExpression	3		554276	1					
ANR	554424	CallExpression	SQR ( m2x )		554276	1					
ANR	554425	Callee	SQR		554276	0					
ANR	554426	Identifier	SQR		554276	0					
ANR	554427	ArgumentList	m2x		554276	1					
ANR	554428	Argument	m2x		554276	0					
ANR	554429	Identifier	m2x		554276	0					
ANR	554430	PrimaryExpression	1		554276	1					
ANR	554431	Identifier	f2		554276	1					
ANR	554432	MultiplicativeExpression	( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		554276	1		*			
ANR	554433	AdditiveExpression	a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a		554276	0		-			
ANR	554434	MultiplicativeExpression	a * CUBE ( m3x )		554276	0		*			
ANR	554435	Identifier	a		554276	0					
ANR	554436	CallExpression	CUBE ( m3x )		554276	1					
ANR	554437	Callee	CUBE		554276	0					
ANR	554438	Identifier	CUBE		554276	0					
ANR	554439	ArgumentList	m3x		554276	1					
ANR	554440	Argument	m3x		554276	0					
ANR	554441	Identifier	m3x		554276	0					
ANR	554442	AdditiveExpression	5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a		554276	1		+			
ANR	554443	MultiplicativeExpression	5 * a * SQR ( m3x )		554276	0		*			
ANR	554444	PrimaryExpression	5		554276	0					
ANR	554445	MultiplicativeExpression	a * SQR ( m3x )		554276	1		*			
ANR	554446	Identifier	a		554276	0					
ANR	554447	CallExpression	SQR ( m3x )		554276	1					
ANR	554448	Callee	SQR		554276	0					
ANR	554449	Identifier	SQR		554276	0					
ANR	554450	ArgumentList	m3x		554276	1					
ANR	554451	Argument	m3x		554276	0					
ANR	554452	Identifier	m3x		554276	0					
ANR	554453	AdditiveExpression	8 * a * m3x - 4 * a		554276	1		-			
ANR	554454	MultiplicativeExpression	8 * a * m3x		554276	0		*			
ANR	554455	PrimaryExpression	8		554276	0					
ANR	554456	MultiplicativeExpression	a * m3x		554276	1		*			
ANR	554457	Identifier	a		554276	0					
ANR	554458	Identifier	m3x		554276	1					
ANR	554459	MultiplicativeExpression	4 * a		554276	1		*			
ANR	554460	PrimaryExpression	4		554276	0					
ANR	554461	Identifier	a		554276	1					
ANR	554462	Identifier	f3		554276	1					
ANR	554463	ExpressionStatement	"if_debug6 ( '~' , ""[~](%g, %g, %g, %g)order3(%g) => %g\\n"" , f0 , f1 , f2 , f3 , x , c )"	205:4:6498:6589	554276	40	True				
ANR	554464	CallExpression	"if_debug6 ( '~' , ""[~](%g, %g, %g, %g)order3(%g) => %g\\n"" , f0 , f1 , f2 , f3 , x , c )"		554276	0					
ANR	554465	Callee	if_debug6		554276	0					
ANR	554466	Identifier	if_debug6		554276	0					
ANR	554467	ArgumentList	'~'		554276	1					
ANR	554468	Argument	'~'		554276	0					
ANR	554469	PrimaryExpression	'~'		554276	0					
ANR	554470	Argument	"""[~](%g, %g, %g, %g)order3(%g) => %g\\n"""		554276	1					
ANR	554471	PrimaryExpression	"""[~](%g, %g, %g, %g)order3(%g) => %g\\n"""		554276	0					
ANR	554472	Argument	f0		554276	2					
ANR	554473	Identifier	f0		554276	0					
ANR	554474	Argument	f1		554276	3					
ANR	554475	Identifier	f1		554276	0					
ANR	554476	Argument	f2		554276	4					
ANR	554477	Identifier	f2		554276	0					
ANR	554478	Argument	f3		554276	5					
ANR	554479	Identifier	f3		554276	0					
ANR	554480	Argument	x		554276	6					
ANR	554481	Identifier	x		554276	0					
ANR	554482	Argument	c		554276	7					
ANR	554483	Identifier	c		554276	0					
ANR	554484	ReturnStatement	return c ;	207:4:6595:6603	554276	41	True				
ANR	554485	Identifier	c		554276	0					
ANR	554486	Statement	undef	208:1:6606:6610	554276	42	True				
ANR	554487	Statement	a	208:7:6612:6612	554276	43	True				
ANR	554488	Statement	undef	209:1:6615:6619	554276	44	True				
ANR	554489	Statement	SQR	209:7:6621:6623	554276	45	True				
ANR	554490	Statement	undef	210:1:6626:6630	554276	46	True				
ANR	554491	Statement	CUBE	210:7:6632:6635	554276	47	True				
ANR	554492	ReturnType	static double		554276	1					
ANR	554493	Identifier	interpolate_cubic		554276	2					
ANR	554494	ParameterList	"double x , double f0 , double f1 , double f2 , double f3"		554276	3					
ANR	554495	Parameter	double x	189:18:5877:5884	554276	0	True				
ANR	554496	ParameterType	double		554276	0					
ANR	554497	Identifier	x		554276	1					
ANR	554498	Parameter	double f0	189:28:5887:5895	554276	1	True				
ANR	554499	ParameterType	double		554276	0					
ANR	554500	Identifier	f0		554276	1					
ANR	554501	Parameter	double f1	189:39:5898:5906	554276	2	True				
ANR	554502	ParameterType	double		554276	0					
ANR	554503	Identifier	f1		554276	1					
ANR	554504	Parameter	double f2	189:50:5909:5917	554276	3	True				
ANR	554505	ParameterType	double		554276	0					
ANR	554506	Identifier	f2		554276	1					
ANR	554507	Parameter	double f3	189:61:5920:5928	554276	4	True				
ANR	554508	ParameterType	double		554276	0					
ANR	554509	Identifier	f3		554276	1					
ANR	554510	CFGEntryNode	ENTRY		554276		True				
ANR	554511	CFGExitNode	EXIT		554276		True				
ANR	554512	Symbol	a		554276						
ANR	554513	Symbol	m2x		554276						
ANR	554514	Symbol	m3x		554276						
ANR	554515	Symbol	c		554276						
ANR	554516	Symbol	SQR		554276						
ANR	554517	Symbol	x		554276						
ANR	554518	Symbol	f0		554276						
ANR	554519	Symbol	CUBE		554276						
ANR	554520	Symbol	f1		554276						
ANR	554521	Symbol	f2		554276						
ANR	554522	Symbol	f3		554276						
ANR	554523	Symbol	xm1		554276						
ANR	554524	Function	interpolate_quadratic	221:0:6910:7051							
ANR	554525	FunctionDef	"interpolate_quadratic (double x , double f0 , double f1 , double f2)"		554524	0					
ANR	554526	CompoundStatement		223:0:6996:7051	554524	0					
ANR	554527	ReturnStatement	"return interpolate_cubic ( x + 1 , f0 , f0 , f1 , f2 ) ;"	224:4:7002:7049	554524	0	True				
ANR	554528	CallExpression	"interpolate_cubic ( x + 1 , f0 , f0 , f1 , f2 )"		554524	0					
ANR	554529	Callee	interpolate_cubic		554524	0					
ANR	554530	Identifier	interpolate_cubic		554524	0					
ANR	554531	ArgumentList	x + 1		554524	1					
ANR	554532	Argument	x + 1		554524	0					
ANR	554533	AdditiveExpression	x + 1		554524	0		+			
ANR	554534	Identifier	x		554524	0					
ANR	554535	PrimaryExpression	1		554524	1					
ANR	554536	Argument	f0		554524	1					
ANR	554537	Identifier	f0		554524	0					
ANR	554538	Argument	f0		554524	2					
ANR	554539	Identifier	f0		554524	0					
ANR	554540	Argument	f1		554524	3					
ANR	554541	Identifier	f1		554524	0					
ANR	554542	Argument	f2		554524	4					
ANR	554543	Identifier	f2		554524	0					
ANR	554544	ReturnType	static inline double		554524	1					
ANR	554545	Identifier	interpolate_quadratic		554524	2					
ANR	554546	ParameterList	"double x , double f0 , double f1 , double f2"		554524	3					
ANR	554547	Parameter	double x	222:22:6953:6960	554524	0	True				
ANR	554548	ParameterType	double		554524	0					
ANR	554549	Identifier	x		554524	1					
ANR	554550	Parameter	double f0	222:32:6963:6971	554524	1	True				
ANR	554551	ParameterType	double		554524	0					
ANR	554552	Identifier	f0		554524	1					
ANR	554553	Parameter	double f1	222:43:6974:6982	554524	2	True				
ANR	554554	ParameterType	double		554524	0					
ANR	554555	Identifier	f1		554524	1					
ANR	554556	Parameter	double f2	222:54:6985:6993	554524	3	True				
ANR	554557	ParameterType	double		554524	0					
ANR	554558	Identifier	f2		554524	1					
ANR	554559	CFGEntryNode	ENTRY		554524		True				
ANR	554560	CFGExitNode	EXIT		554524		True				
ANR	554561	Symbol	interpolate_cubic		554524						
ANR	554562	Symbol	x		554524						
ANR	554563	Symbol	f0		554524						
ANR	554564	Symbol	f1		554524						
ANR	554565	Symbol	f2		554524						
ANR	554566	Function	fn_interpolate_cubic	228:0:7108:9857							
ANR	554567	FunctionDef	"fn_interpolate_cubic (const gs_function_Sd_t * pfn , const float * fparts , const int * iparts , const ulong * factors , float * samples , ulong offset , int m)"		554566	0					
ANR	554568	CompoundStatement		232:0:7311:9857	554566	0					
ANR	554569	IdentifierDeclStatement	int j ;	233:4:7317:7322	554566	0	True				
ANR	554570	IdentifierDecl	j		554566	0					
ANR	554571	IdentifierDeclType	int		554566	0					
ANR	554572	Identifier	j		554566	1					
ANR	554573	Label	top :	235:0:7325:7328	554566	1	True				
ANR	554574	Identifier	top		554566	0					
ANR	554575	IfStatement	if ( m == 0 )		554566	2					
ANR	554576	Condition	m == 0	236:8:7338:7343	554566	0	True				
ANR	554577	EqualityExpression	m == 0		554566	0		==			
ANR	554578	Identifier	m		554566	0					
ANR	554579	PrimaryExpression	0		554566	1					
ANR	554580	CompoundStatement		6:8:44:64	554566	1					
ANR	554581	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	237:8:7356:7376	554566	0	True				
ANR	554582	IdentifierDecl	sdata [ max_Sd_n ]		554566	0					
ANR	554583	IdentifierDeclType	uint [ max_Sd_n ]		554566	0					
ANR	554584	Identifier	sdata		554566	1					
ANR	554585	Identifier	max_Sd_n		554566	2					
ANR	554586	ExpressionStatement	"( * fn_get_samples [ pfn -> params . BitsPerSample ] ) ( pfn , offset , sdata )"	239:8:7387:7451	554566	1	True				
ANR	554587	CallExpression	"( * fn_get_samples [ pfn -> params . BitsPerSample ] ) ( pfn , offset , sdata )"		554566	0					
ANR	554588	Callee	* fn_get_samples [ pfn -> params . BitsPerSample ]		554566	0					
ANR	554589	UnaryOperationExpression	* fn_get_samples [ pfn -> params . BitsPerSample ]		554566	0					
ANR	554590	UnaryOperator	*		554566	0					
ANR	554591	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		554566	1					
ANR	554592	Identifier	fn_get_samples		554566	0					
ANR	554593	MemberAccess	pfn -> params . BitsPerSample		554566	1					
ANR	554594	PtrMemberAccess	pfn -> params		554566	0					
ANR	554595	Identifier	pfn		554566	0					
ANR	554596	Identifier	params		554566	1					
ANR	554597	Identifier	BitsPerSample		554566	1					
ANR	554598	ArgumentList	pfn		554566	1					
ANR	554599	Argument	pfn		554566	0					
ANR	554600	Identifier	pfn		554566	0					
ANR	554601	Argument	offset		554566	1					
ANR	554602	Identifier	offset		554566	0					
ANR	554603	Argument	sdata		554566	2					
ANR	554604	Identifier	sdata		554566	0					
ANR	554605	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		554566	2					
ANR	554606	ForInit	j = pfn -> params . n - 1 ;	240:13:7466:7487	554566	0	True				
ANR	554607	AssignmentExpression	j = pfn -> params . n - 1		554566	0		=			
ANR	554608	Identifier	j		554566	0					
ANR	554609	AdditiveExpression	pfn -> params . n - 1		554566	1		-			
ANR	554610	MemberAccess	pfn -> params . n		554566	0					
ANR	554611	PtrMemberAccess	pfn -> params		554566	0					
ANR	554612	Identifier	pfn		554566	0					
ANR	554613	Identifier	params		554566	1					
ANR	554614	Identifier	n		554566	1					
ANR	554615	PrimaryExpression	1		554566	1					
ANR	554616	Condition	j >= 0	240:36:7489:7494	554566	1	True				
ANR	554617	RelationalExpression	j >= 0		554566	0		>=			
ANR	554618	Identifier	j		554566	0					
ANR	554619	PrimaryExpression	0		554566	1					
ANR	554620	UnaryExpression	-- j	240:44:7497:7499	554566	2	True				
ANR	554621	IncDec	--		554566	0					
ANR	554622	Identifier	j		554566	1					
ANR	554623	ExpressionStatement	samples [ j ] = ( float ) sdata [ j ]	241:12:7514:7542	554566	3	True				
ANR	554624	AssignmentExpression	samples [ j ] = ( float ) sdata [ j ]		554566	0		=			
ANR	554625	ArrayIndexing	samples [ j ]		554566	0					
ANR	554626	Identifier	samples		554566	0					
ANR	554627	Identifier	j		554566	1					
ANR	554628	CastExpression	( float ) sdata [ j ]		554566	1					
ANR	554629	CastTarget	float		554566	0					
ANR	554630	ArrayIndexing	sdata [ j ]		554566	1					
ANR	554631	Identifier	sdata		554566	0					
ANR	554632	Identifier	j		554566	1					
ANR	554633	ElseStatement	else		554566	0					
ANR	554634	CompoundStatement		16:8:407:472	554566	0					
ANR	554635	IdentifierDeclStatement	float fpart = * fparts ++ ;	243:8:7565:7588	554566	0	True				
ANR	554636	IdentifierDecl	fpart = * fparts ++		554566	0					
ANR	554637	IdentifierDeclType	float		554566	0					
ANR	554638	Identifier	fpart		554566	1					
ANR	554639	AssignmentExpression	fpart = * fparts ++		554566	2		=			
ANR	554640	Identifier	fpart		554566	0					
ANR	554641	UnaryOperationExpression	* fparts ++		554566	1					
ANR	554642	UnaryOperator	*		554566	0					
ANR	554643	PostIncDecOperationExpression	fparts ++		554566	1					
ANR	554644	Identifier	fparts		554566	0					
ANR	554645	IncDec	++		554566	1					
ANR	554646	IdentifierDeclStatement	int ipart = * iparts ++ ;	244:8:7598:7619	554566	1	True				
ANR	554647	IdentifierDecl	ipart = * iparts ++		554566	0					
ANR	554648	IdentifierDeclType	int		554566	0					
ANR	554649	Identifier	ipart		554566	1					
ANR	554650	AssignmentExpression	ipart = * iparts ++		554566	2		=			
ANR	554651	Identifier	ipart		554566	0					
ANR	554652	UnaryOperationExpression	* iparts ++		554566	1					
ANR	554653	UnaryOperator	*		554566	0					
ANR	554654	PostIncDecOperationExpression	iparts ++		554566	1					
ANR	554655	Identifier	iparts		554566	0					
ANR	554656	IncDec	++		554566	1					
ANR	554657	IdentifierDeclStatement	ulong delta = * factors ++ ;	245:8:7629:7653	554566	2	True				
ANR	554658	IdentifierDecl	delta = * factors ++		554566	0					
ANR	554659	IdentifierDeclType	ulong		554566	0					
ANR	554660	Identifier	delta		554566	1					
ANR	554661	AssignmentExpression	delta = * factors ++		554566	2		=			
ANR	554662	Identifier	delta		554566	0					
ANR	554663	UnaryOperationExpression	* factors ++		554566	1					
ANR	554664	UnaryOperator	*		554566	0					
ANR	554665	PostIncDecOperationExpression	factors ++		554566	1					
ANR	554666	Identifier	factors		554566	0					
ANR	554667	IncDec	++		554566	1					
ANR	554668	IdentifierDeclStatement	int size = pfn -> params . Size [ pfn -> params . m - m ] ;	246:8:7663:7709	554566	3	True				
ANR	554669	IdentifierDecl	size = pfn -> params . Size [ pfn -> params . m - m ]		554566	0					
ANR	554670	IdentifierDeclType	int		554566	0					
ANR	554671	Identifier	size		554566	1					
ANR	554672	AssignmentExpression	size = pfn -> params . Size [ pfn -> params . m - m ]		554566	2		=			
ANR	554673	Identifier	size		554566	0					
ANR	554674	ArrayIndexing	pfn -> params . Size [ pfn -> params . m - m ]		554566	1					
ANR	554675	MemberAccess	pfn -> params . Size		554566	0					
ANR	554676	PtrMemberAccess	pfn -> params		554566	0					
ANR	554677	Identifier	pfn		554566	0					
ANR	554678	Identifier	params		554566	1					
ANR	554679	Identifier	Size		554566	1					
ANR	554680	AdditiveExpression	pfn -> params . m - m		554566	1		-			
ANR	554681	MemberAccess	pfn -> params . m		554566	0					
ANR	554682	PtrMemberAccess	pfn -> params		554566	0					
ANR	554683	Identifier	pfn		554566	0					
ANR	554684	Identifier	params		554566	1					
ANR	554685	Identifier	m		554566	1					
ANR	554686	Identifier	m		554566	1					
ANR	554687	IdentifierDeclStatement	"float samples1 [ max_Sd_n ] , samplesm1 [ max_Sd_n ] , samples2 [ max_Sd_n ] ;"	247:8:7719:7784	554566	4	True				
ANR	554688	IdentifierDecl	samples1 [ max_Sd_n ]		554566	0					
ANR	554689	IdentifierDeclType	float [ max_Sd_n ]		554566	0					
ANR	554690	Identifier	samples1		554566	1					
ANR	554691	Identifier	max_Sd_n		554566	2					
ANR	554692	IdentifierDecl	samplesm1 [ max_Sd_n ]		554566	1					
ANR	554693	IdentifierDeclType	float [ max_Sd_n ]		554566	0					
ANR	554694	Identifier	samplesm1		554566	1					
ANR	554695	Identifier	max_Sd_n		554566	2					
ANR	554696	IdentifierDecl	samples2 [ max_Sd_n ]		554566	2					
ANR	554697	IdentifierDeclType	float [ max_Sd_n ]		554566	0					
ANR	554698	Identifier	samples2		554566	1					
ANR	554699	Identifier	max_Sd_n		554566	2					
ANR	554700	ExpressionStatement	-- m	249:8:7795:7798	554566	5	True				
ANR	554701	UnaryExpression	-- m		554566	0					
ANR	554702	IncDec	--		554566	0					
ANR	554703	Identifier	m		554566	1					
ANR	554704	IfStatement	if ( is_fzero ( fpart ) )		554566	6					
ANR	554705	Condition	is_fzero ( fpart )	250:12:7812:7826	554566	0	True				
ANR	554706	CallExpression	is_fzero ( fpart )		554566	0					
ANR	554707	Callee	is_fzero		554566	0					
ANR	554708	Identifier	is_fzero		554566	0					
ANR	554709	ArgumentList	fpart		554566	1					
ANR	554710	Argument	fpart		554566	0					
ANR	554711	Identifier	fpart		554566	0					
ANR	554712	GotoStatement	goto top ;	251:12:7841:7849	554566	1	True				
ANR	554713	Identifier	top		554566	0					
ANR	554714	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples , offset , m )"	252:8:7859:7958	554566	7	True				
ANR	554715	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples , offset , m )"		554566	0					
ANR	554716	Callee	fn_interpolate_cubic		554566	0					
ANR	554717	Identifier	fn_interpolate_cubic		554566	0					
ANR	554718	ArgumentList	pfn		554566	1					
ANR	554719	Argument	pfn		554566	0					
ANR	554720	Identifier	pfn		554566	0					
ANR	554721	Argument	fparts		554566	1					
ANR	554722	Identifier	fparts		554566	0					
ANR	554723	Argument	iparts		554566	2					
ANR	554724	Identifier	iparts		554566	0					
ANR	554725	Argument	factors		554566	3					
ANR	554726	Identifier	factors		554566	0					
ANR	554727	Argument	samples		554566	4					
ANR	554728	Identifier	samples		554566	0					
ANR	554729	Argument	offset		554566	5					
ANR	554730	Identifier	offset		554566	0					
ANR	554731	Argument	m		554566	6					
ANR	554732	Identifier	m		554566	0					
ANR	554733	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples1 , offset + delta , m )"	254:8:7968:8076	554566	8	True				
ANR	554734	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples1 , offset + delta , m )"		554566	0					
ANR	554735	Callee	fn_interpolate_cubic		554566	0					
ANR	554736	Identifier	fn_interpolate_cubic		554566	0					
ANR	554737	ArgumentList	pfn		554566	1					
ANR	554738	Argument	pfn		554566	0					
ANR	554739	Identifier	pfn		554566	0					
ANR	554740	Argument	fparts		554566	1					
ANR	554741	Identifier	fparts		554566	0					
ANR	554742	Argument	iparts		554566	2					
ANR	554743	Identifier	iparts		554566	0					
ANR	554744	Argument	factors		554566	3					
ANR	554745	Identifier	factors		554566	0					
ANR	554746	Argument	samples1		554566	4					
ANR	554747	Identifier	samples1		554566	0					
ANR	554748	Argument	offset + delta		554566	5					
ANR	554749	AdditiveExpression	offset + delta		554566	0		+			
ANR	554750	Identifier	offset		554566	0					
ANR	554751	Identifier	delta		554566	1					
ANR	554752	Argument	m		554566	6					
ANR	554753	Identifier	m		554566	0					
ANR	554754	IfStatement	if ( size == 2 )		554566	9					
ANR	554755	Condition	size == 2	261:12:8294:8302	554566	0	True				
ANR	554756	EqualityExpression	size == 2		554566	0		==			
ANR	554757	Identifier	size		554566	0					
ANR	554758	PrimaryExpression	2		554566	1					
ANR	554759	CompoundStatement		30:23:993:993	554566	1					
ANR	554760	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		554566	0					
ANR	554761	ForInit	j = pfn -> params . n - 1 ;	263:17:8384:8405	554566	0	True				
ANR	554762	AssignmentExpression	j = pfn -> params . n - 1		554566	0		=			
ANR	554763	Identifier	j		554566	0					
ANR	554764	AdditiveExpression	pfn -> params . n - 1		554566	1		-			
ANR	554765	MemberAccess	pfn -> params . n		554566	0					
ANR	554766	PtrMemberAccess	pfn -> params		554566	0					
ANR	554767	Identifier	pfn		554566	0					
ANR	554768	Identifier	params		554566	1					
ANR	554769	Identifier	n		554566	1					
ANR	554770	PrimaryExpression	1		554566	1					
ANR	554771	Condition	j >= 0	263:40:8407:8412	554566	1	True				
ANR	554772	RelationalExpression	j >= 0		554566	0		>=			
ANR	554773	Identifier	j		554566	0					
ANR	554774	PrimaryExpression	0		554566	1					
ANR	554775	UnaryExpression	-- j	263:48:8415:8417	554566	2	True				
ANR	554776	IncDec	--		554566	0					
ANR	554777	Identifier	j		554566	1					
ANR	554778	ExpressionStatement	samples [ j ] += ( samples1 [ j ] - samples [ j ] ) * fpart	264:16:8436:8484	554566	3	True				
ANR	554779	AssignmentExpression	samples [ j ] += ( samples1 [ j ] - samples [ j ] ) * fpart		554566	0		+=			
ANR	554780	ArrayIndexing	samples [ j ]		554566	0					
ANR	554781	Identifier	samples		554566	0					
ANR	554782	Identifier	j		554566	1					
ANR	554783	MultiplicativeExpression	( samples1 [ j ] - samples [ j ] ) * fpart		554566	1		*			
ANR	554784	AdditiveExpression	samples1 [ j ] - samples [ j ]		554566	0		-			
ANR	554785	ArrayIndexing	samples1 [ j ]		554566	0					
ANR	554786	Identifier	samples1		554566	0					
ANR	554787	Identifier	j		554566	1					
ANR	554788	ArrayIndexing	samples [ j ]		554566	1					
ANR	554789	Identifier	samples		554566	0					
ANR	554790	Identifier	j		554566	1					
ANR	554791	Identifier	fpart		554566	1					
ANR	554792	ReturnStatement	return ;	265:12:8498:8504	554566	1	True				
ANR	554793	IfStatement	if ( ipart == 0 )		554566	10					
ANR	554794	Condition	ipart == 0	267:12:8528:8537	554566	0	True				
ANR	554795	EqualityExpression	ipart == 0		554566	0		==			
ANR	554796	Identifier	ipart		554566	0					
ANR	554797	PrimaryExpression	0		554566	1					
ANR	554798	CompoundStatement		36:24:1228:1228	554566	1					
ANR	554799	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples2 , offset + delta * 2 , m )"	269:12:8601:8717	554566	0	True				
ANR	554800	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples2 , offset + delta * 2 , m )"		554566	0					
ANR	554801	Callee	fn_interpolate_cubic		554566	0					
ANR	554802	Identifier	fn_interpolate_cubic		554566	0					
ANR	554803	ArgumentList	pfn		554566	1					
ANR	554804	Argument	pfn		554566	0					
ANR	554805	Identifier	pfn		554566	0					
ANR	554806	Argument	fparts		554566	1					
ANR	554807	Identifier	fparts		554566	0					
ANR	554808	Argument	iparts		554566	2					
ANR	554809	Identifier	iparts		554566	0					
ANR	554810	Argument	factors		554566	3					
ANR	554811	Identifier	factors		554566	0					
ANR	554812	Argument	samples2		554566	4					
ANR	554813	Identifier	samples2		554566	0					
ANR	554814	Argument	offset + delta * 2		554566	5					
ANR	554815	AdditiveExpression	offset + delta * 2		554566	0		+			
ANR	554816	Identifier	offset		554566	0					
ANR	554817	MultiplicativeExpression	delta * 2		554566	1		*			
ANR	554818	Identifier	delta		554566	0					
ANR	554819	PrimaryExpression	2		554566	1					
ANR	554820	Argument	m		554566	6					
ANR	554821	Identifier	m		554566	0					
ANR	554822	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		554566	1					
ANR	554823	ForInit	j = pfn -> params . n - 1 ;	271:17:8736:8757	554566	0	True				
ANR	554824	AssignmentExpression	j = pfn -> params . n - 1		554566	0		=			
ANR	554825	Identifier	j		554566	0					
ANR	554826	AdditiveExpression	pfn -> params . n - 1		554566	1		-			
ANR	554827	MemberAccess	pfn -> params . n		554566	0					
ANR	554828	PtrMemberAccess	pfn -> params		554566	0					
ANR	554829	Identifier	pfn		554566	0					
ANR	554830	Identifier	params		554566	1					
ANR	554831	Identifier	n		554566	1					
ANR	554832	PrimaryExpression	1		554566	1					
ANR	554833	Condition	j >= 0	271:40:8759:8764	554566	1	True				
ANR	554834	RelationalExpression	j >= 0		554566	0		>=			
ANR	554835	Identifier	j		554566	0					
ANR	554836	PrimaryExpression	0		554566	1					
ANR	554837	UnaryExpression	-- j	271:48:8767:8769	554566	2	True				
ANR	554838	IncDec	--		554566	0					
ANR	554839	Identifier	j		554566	1					
ANR	554840	ExpressionStatement	"samples [ j ] = interpolate_quadratic ( fpart , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"	272:16:8788:8929	554566	3	True				
ANR	554841	AssignmentExpression	"samples [ j ] = interpolate_quadratic ( fpart , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"		554566	0		=			
ANR	554842	ArrayIndexing	samples [ j ]		554566	0					
ANR	554843	Identifier	samples		554566	0					
ANR	554844	Identifier	j		554566	1					
ANR	554845	CallExpression	"interpolate_quadratic ( fpart , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"		554566	1					
ANR	554846	Callee	interpolate_quadratic		554566	0					
ANR	554847	Identifier	interpolate_quadratic		554566	0					
ANR	554848	ArgumentList	fpart		554566	1					
ANR	554849	Argument	fpart		554566	0					
ANR	554850	Identifier	fpart		554566	0					
ANR	554851	Argument	samples [ j ]		554566	1					
ANR	554852	ArrayIndexing	samples [ j ]		554566	0					
ANR	554853	Identifier	samples		554566	0					
ANR	554854	Identifier	j		554566	1					
ANR	554855	Argument	samples1 [ j ]		554566	2					
ANR	554856	ArrayIndexing	samples1 [ j ]		554566	0					
ANR	554857	Identifier	samples1		554566	0					
ANR	554858	Identifier	j		554566	1					
ANR	554859	Argument	samples2 [ j ]		554566	3					
ANR	554860	ArrayIndexing	samples2 [ j ]		554566	0					
ANR	554861	Identifier	samples2		554566	0					
ANR	554862	Identifier	j		554566	1					
ANR	554863	ReturnStatement	return ;	275:12:8943:8949	554566	2	True				
ANR	554864	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samplesm1 , offset - delta , m )"	278:8:9027:9136	554566	11	True				
ANR	554865	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samplesm1 , offset - delta , m )"		554566	0					
ANR	554866	Callee	fn_interpolate_cubic		554566	0					
ANR	554867	Identifier	fn_interpolate_cubic		554566	0					
ANR	554868	ArgumentList	pfn		554566	1					
ANR	554869	Argument	pfn		554566	0					
ANR	554870	Identifier	pfn		554566	0					
ANR	554871	Argument	fparts		554566	1					
ANR	554872	Identifier	fparts		554566	0					
ANR	554873	Argument	iparts		554566	2					
ANR	554874	Identifier	iparts		554566	0					
ANR	554875	Argument	factors		554566	3					
ANR	554876	Identifier	factors		554566	0					
ANR	554877	Argument	samplesm1		554566	4					
ANR	554878	Identifier	samplesm1		554566	0					
ANR	554879	Argument	offset - delta		554566	5					
ANR	554880	AdditiveExpression	offset - delta		554566	0		-			
ANR	554881	Identifier	offset		554566	0					
ANR	554882	Identifier	delta		554566	1					
ANR	554883	Argument	m		554566	6					
ANR	554884	Identifier	m		554566	0					
ANR	554885	IfStatement	if ( ipart == size - 2 )		554566	12					
ANR	554886	Condition	ipart == size - 2	280:12:9150:9166	554566	0	True				
ANR	554887	EqualityExpression	ipart == size - 2		554566	0		==			
ANR	554888	Identifier	ipart		554566	0					
ANR	554889	AdditiveExpression	size - 2		554566	1		-			
ANR	554890	Identifier	size		554566	0					
ANR	554891	PrimaryExpression	2		554566	1					
ANR	554892	CompoundStatement		49:31:1857:1857	554566	1					
ANR	554893	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		554566	0					
ANR	554894	ForInit	j = pfn -> params . n - 1 ;	282:17:9235:9256	554566	0	True				
ANR	554895	AssignmentExpression	j = pfn -> params . n - 1		554566	0		=			
ANR	554896	Identifier	j		554566	0					
ANR	554897	AdditiveExpression	pfn -> params . n - 1		554566	1		-			
ANR	554898	MemberAccess	pfn -> params . n		554566	0					
ANR	554899	PtrMemberAccess	pfn -> params		554566	0					
ANR	554900	Identifier	pfn		554566	0					
ANR	554901	Identifier	params		554566	1					
ANR	554902	Identifier	n		554566	1					
ANR	554903	PrimaryExpression	1		554566	1					
ANR	554904	Condition	j >= 0	282:40:9258:9263	554566	1	True				
ANR	554905	RelationalExpression	j >= 0		554566	0		>=			
ANR	554906	Identifier	j		554566	0					
ANR	554907	PrimaryExpression	0		554566	1					
ANR	554908	UnaryExpression	-- j	282:48:9266:9268	554566	2	True				
ANR	554909	IncDec	--		554566	0					
ANR	554910	Identifier	j		554566	1					
ANR	554911	ExpressionStatement	"samples [ j ] = interpolate_quadratic ( 1 - fpart , samples1 [ j ] , samples [ j ] , samplesm1 [ j ] )"	283:16:9287:9433	554566	3	True				
ANR	554912	AssignmentExpression	"samples [ j ] = interpolate_quadratic ( 1 - fpart , samples1 [ j ] , samples [ j ] , samplesm1 [ j ] )"		554566	0		=			
ANR	554913	ArrayIndexing	samples [ j ]		554566	0					
ANR	554914	Identifier	samples		554566	0					
ANR	554915	Identifier	j		554566	1					
ANR	554916	CallExpression	"interpolate_quadratic ( 1 - fpart , samples1 [ j ] , samples [ j ] , samplesm1 [ j ] )"		554566	1					
ANR	554917	Callee	interpolate_quadratic		554566	0					
ANR	554918	Identifier	interpolate_quadratic		554566	0					
ANR	554919	ArgumentList	1 - fpart		554566	1					
ANR	554920	Argument	1 - fpart		554566	0					
ANR	554921	AdditiveExpression	1 - fpart		554566	0		-			
ANR	554922	PrimaryExpression	1		554566	0					
ANR	554923	Identifier	fpart		554566	1					
ANR	554924	Argument	samples1 [ j ]		554566	1					
ANR	554925	ArrayIndexing	samples1 [ j ]		554566	0					
ANR	554926	Identifier	samples1		554566	0					
ANR	554927	Identifier	j		554566	1					
ANR	554928	Argument	samples [ j ]		554566	2					
ANR	554929	ArrayIndexing	samples [ j ]		554566	0					
ANR	554930	Identifier	samples		554566	0					
ANR	554931	Identifier	j		554566	1					
ANR	554932	Argument	samplesm1 [ j ]		554566	3					
ANR	554933	ArrayIndexing	samplesm1 [ j ]		554566	0					
ANR	554934	Identifier	samplesm1		554566	0					
ANR	554935	Identifier	j		554566	1					
ANR	554936	ReturnStatement	return ;	286:12:9447:9453	554566	1	True				
ANR	554937	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples2 , offset + delta * 2 , m )"	289:8:9531:9643	554566	13	True				
ANR	554938	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples2 , offset + delta * 2 , m )"		554566	0					
ANR	554939	Callee	fn_interpolate_cubic		554566	0					
ANR	554940	Identifier	fn_interpolate_cubic		554566	0					
ANR	554941	ArgumentList	pfn		554566	1					
ANR	554942	Argument	pfn		554566	0					
ANR	554943	Identifier	pfn		554566	0					
ANR	554944	Argument	fparts		554566	1					
ANR	554945	Identifier	fparts		554566	0					
ANR	554946	Argument	iparts		554566	2					
ANR	554947	Identifier	iparts		554566	0					
ANR	554948	Argument	factors		554566	3					
ANR	554949	Identifier	factors		554566	0					
ANR	554950	Argument	samples2		554566	4					
ANR	554951	Identifier	samples2		554566	0					
ANR	554952	Argument	offset + delta * 2		554566	5					
ANR	554953	AdditiveExpression	offset + delta * 2		554566	0		+			
ANR	554954	Identifier	offset		554566	0					
ANR	554955	MultiplicativeExpression	delta * 2		554566	1		*			
ANR	554956	Identifier	delta		554566	0					
ANR	554957	PrimaryExpression	2		554566	1					
ANR	554958	Argument	m		554566	6					
ANR	554959	Identifier	m		554566	0					
ANR	554960	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		554566	14					
ANR	554961	ForInit	j = pfn -> params . n - 1 ;	291:13:9658:9679	554566	0	True				
ANR	554962	AssignmentExpression	j = pfn -> params . n - 1		554566	0		=			
ANR	554963	Identifier	j		554566	0					
ANR	554964	AdditiveExpression	pfn -> params . n - 1		554566	1		-			
ANR	554965	MemberAccess	pfn -> params . n		554566	0					
ANR	554966	PtrMemberAccess	pfn -> params		554566	0					
ANR	554967	Identifier	pfn		554566	0					
ANR	554968	Identifier	params		554566	1					
ANR	554969	Identifier	n		554566	1					
ANR	554970	PrimaryExpression	1		554566	1					
ANR	554971	Condition	j >= 0	291:36:9681:9686	554566	1	True				
ANR	554972	RelationalExpression	j >= 0		554566	0		>=			
ANR	554973	Identifier	j		554566	0					
ANR	554974	PrimaryExpression	0		554566	1					
ANR	554975	UnaryExpression	-- j	291:44:9689:9691	554566	2	True				
ANR	554976	IncDec	--		554566	0					
ANR	554977	Identifier	j		554566	1					
ANR	554978	ExpressionStatement	"samples [ j ] = interpolate_cubic ( fpart + 1 , samplesm1 [ j ] , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"	292:12:9706:9849	554566	3	True				
ANR	554979	AssignmentExpression	"samples [ j ] = interpolate_cubic ( fpart + 1 , samplesm1 [ j ] , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"		554566	0		=			
ANR	554980	ArrayIndexing	samples [ j ]		554566	0					
ANR	554981	Identifier	samples		554566	0					
ANR	554982	Identifier	j		554566	1					
ANR	554983	CallExpression	"interpolate_cubic ( fpart + 1 , samplesm1 [ j ] , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"		554566	1					
ANR	554984	Callee	interpolate_cubic		554566	0					
ANR	554985	Identifier	interpolate_cubic		554566	0					
ANR	554986	ArgumentList	fpart + 1		554566	1					
ANR	554987	Argument	fpart + 1		554566	0					
ANR	554988	AdditiveExpression	fpart + 1		554566	0		+			
ANR	554989	Identifier	fpart		554566	0					
ANR	554990	PrimaryExpression	1		554566	1					
ANR	554991	Argument	samplesm1 [ j ]		554566	1					
ANR	554992	ArrayIndexing	samplesm1 [ j ]		554566	0					
ANR	554993	Identifier	samplesm1		554566	0					
ANR	554994	Identifier	j		554566	1					
ANR	554995	Argument	samples [ j ]		554566	2					
ANR	554996	ArrayIndexing	samples [ j ]		554566	0					
ANR	554997	Identifier	samples		554566	0					
ANR	554998	Identifier	j		554566	1					
ANR	554999	Argument	samples1 [ j ]		554566	3					
ANR	555000	ArrayIndexing	samples1 [ j ]		554566	0					
ANR	555001	Identifier	samples1		554566	0					
ANR	555002	Identifier	j		554566	1					
ANR	555003	Argument	samples2 [ j ]		554566	4					
ANR	555004	ArrayIndexing	samples2 [ j ]		554566	0					
ANR	555005	Identifier	samples2		554566	0					
ANR	555006	Identifier	j		554566	1					
ANR	555007	ReturnType	static void		554566	1					
ANR	555008	Identifier	fn_interpolate_cubic		554566	2					
ANR	555009	ParameterList	"const gs_function_Sd_t * pfn , const float * fparts , const int * iparts , const ulong * factors , float * samples , ulong offset , int m"		554566	3					
ANR	555010	Parameter	const gs_function_Sd_t * pfn	229:21:7141:7167	554566	0	True				
ANR	555011	ParameterType	const gs_function_Sd_t *		554566	0					
ANR	555012	Identifier	pfn		554566	1					
ANR	555013	Parameter	const float * fparts	229:50:7170:7188	554566	1	True				
ANR	555014	ParameterType	const float *		554566	0					
ANR	555015	Identifier	fparts		554566	1					
ANR	555016	Parameter	const int * iparts	230:21:7212:7228	554566	2	True				
ANR	555017	ParameterType	const int *		554566	0					
ANR	555018	Identifier	iparts		554566	1					
ANR	555019	Parameter	const ulong * factors	230:40:7231:7250	554566	3	True				
ANR	555020	ParameterType	const ulong *		554566	0					
ANR	555021	Identifier	factors		554566	1					
ANR	555022	Parameter	float * samples	231:21:7274:7287	554566	4	True				
ANR	555023	ParameterType	float *		554566	0					
ANR	555024	Identifier	samples		554566	1					
ANR	555025	Parameter	ulong offset	231:37:7290:7301	554566	5	True				
ANR	555026	ParameterType	ulong		554566	0					
ANR	555027	Identifier	offset		554566	1					
ANR	555028	Parameter	int m	231:51:7304:7308	554566	6	True				
ANR	555029	ParameterType	int		554566	0					
ANR	555030	Identifier	m		554566	1					
ANR	555031	CFGEntryNode	ENTRY		554566		True				
ANR	555032	CFGExitNode	EXIT		554566		True				
ANR	555033	Symbol	pfn -> params . m		554566						
ANR	555034	Symbol	interpolate_cubic		554566						
ANR	555035	Symbol	pfn -> params . n		554566						
ANR	555036	Symbol	* sdata		554566						
ANR	555037	Symbol	pfn -> params . Size		554566						
ANR	555038	Symbol	is_fzero		554566						
ANR	555039	Symbol	* fparts ++		554566						
ANR	555040	Symbol	fpart		554566						
ANR	555041	Symbol	delta		554566						
ANR	555042	Symbol	samples1		554566						
ANR	555043	Symbol	samples2		554566						
ANR	555044	Symbol	* factors ++		554566						
ANR	555045	Symbol	* * pfn		554566						
ANR	555046	Symbol	iparts		554566						
ANR	555047	Symbol	* samples		554566						
ANR	555048	Symbol	fparts		554566						
ANR	555049	Symbol	interpolate_quadratic		554566						
ANR	555050	Symbol	sdata		554566						
ANR	555051	Symbol	pfn -> params . BitsPerSample		554566						
ANR	555052	Symbol	ipart		554566						
ANR	555053	Symbol	* pfn		554566						
ANR	555054	Symbol	offset		554566						
ANR	555055	Symbol	* samples2		554566						
ANR	555056	Symbol	* samples1		554566						
ANR	555057	Symbol	fn_get_samples		554566						
ANR	555058	Symbol	* pfn -> params . Size		554566						
ANR	555059	Symbol	* pfn -> params . m		554566						
ANR	555060	Symbol	j		554566						
ANR	555061	Symbol	m		554566						
ANR	555062	Symbol	samples		554566						
ANR	555063	Symbol	* pfn -> params . BitsPerSample		554566						
ANR	555064	Symbol	factors		554566						
ANR	555065	Symbol	* j		554566						
ANR	555066	Symbol	size		554566						
ANR	555067	Symbol	* fn_get_samples		554566						
ANR	555068	Symbol	* iparts ++		554566						
ANR	555069	Symbol	* m		554566						
ANR	555070	Symbol	pfn		554566						
ANR	555071	Symbol	samplesm1		554566						
ANR	555072	Symbol	pfn -> params		554566						
ANR	555073	Symbol	* samplesm1		554566						
ANR	555074	Symbol	* pfn -> params		554566						
ANR	555075	Function	fn_interpolate_linear	299:0:9915:10843							
ANR	555076	FunctionDef	"fn_interpolate_linear (const gs_function_Sd_t * pfn , const float * fparts , const ulong * factors , float * samples , ulong offset , int m)"		555075	0					
ANR	555077	CompoundStatement		302:0:10075:10843	555075	0					
ANR	555078	IdentifierDeclStatement	int j ;	303:4:10081:10086	555075	0	True				
ANR	555079	IdentifierDecl	j		555075	0					
ANR	555080	IdentifierDeclType	int		555075	0					
ANR	555081	Identifier	j		555075	1					
ANR	555082	Label	top :	305:0:10089:10092	555075	1	True				
ANR	555083	Identifier	top		555075	0					
ANR	555084	IfStatement	if ( m == 0 )		555075	2					
ANR	555085	Condition	m == 0	306:8:10102:10107	555075	0	True				
ANR	555086	EqualityExpression	m == 0		555075	0		==			
ANR	555087	Identifier	m		555075	0					
ANR	555088	PrimaryExpression	0		555075	1					
ANR	555089	CompoundStatement		6:8:44:64	555075	1					
ANR	555090	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	307:8:10120:10140	555075	0	True				
ANR	555091	IdentifierDecl	sdata [ max_Sd_n ]		555075	0					
ANR	555092	IdentifierDeclType	uint [ max_Sd_n ]		555075	0					
ANR	555093	Identifier	sdata		555075	1					
ANR	555094	Identifier	max_Sd_n		555075	2					
ANR	555095	ExpressionStatement	"( * fn_get_samples [ pfn -> params . BitsPerSample ] ) ( pfn , offset , sdata )"	309:8:10151:10215	555075	1	True				
ANR	555096	CallExpression	"( * fn_get_samples [ pfn -> params . BitsPerSample ] ) ( pfn , offset , sdata )"		555075	0					
ANR	555097	Callee	* fn_get_samples [ pfn -> params . BitsPerSample ]		555075	0					
ANR	555098	UnaryOperationExpression	* fn_get_samples [ pfn -> params . BitsPerSample ]		555075	0					
ANR	555099	UnaryOperator	*		555075	0					
ANR	555100	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		555075	1					
ANR	555101	Identifier	fn_get_samples		555075	0					
ANR	555102	MemberAccess	pfn -> params . BitsPerSample		555075	1					
ANR	555103	PtrMemberAccess	pfn -> params		555075	0					
ANR	555104	Identifier	pfn		555075	0					
ANR	555105	Identifier	params		555075	1					
ANR	555106	Identifier	BitsPerSample		555075	1					
ANR	555107	ArgumentList	pfn		555075	1					
ANR	555108	Argument	pfn		555075	0					
ANR	555109	Identifier	pfn		555075	0					
ANR	555110	Argument	offset		555075	1					
ANR	555111	Identifier	offset		555075	0					
ANR	555112	Argument	sdata		555075	2					
ANR	555113	Identifier	sdata		555075	0					
ANR	555114	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		555075	2					
ANR	555115	ForInit	j = pfn -> params . n - 1 ;	310:13:10230:10251	555075	0	True				
ANR	555116	AssignmentExpression	j = pfn -> params . n - 1		555075	0		=			
ANR	555117	Identifier	j		555075	0					
ANR	555118	AdditiveExpression	pfn -> params . n - 1		555075	1		-			
ANR	555119	MemberAccess	pfn -> params . n		555075	0					
ANR	555120	PtrMemberAccess	pfn -> params		555075	0					
ANR	555121	Identifier	pfn		555075	0					
ANR	555122	Identifier	params		555075	1					
ANR	555123	Identifier	n		555075	1					
ANR	555124	PrimaryExpression	1		555075	1					
ANR	555125	Condition	j >= 0	310:36:10253:10258	555075	1	True				
ANR	555126	RelationalExpression	j >= 0		555075	0		>=			
ANR	555127	Identifier	j		555075	0					
ANR	555128	PrimaryExpression	0		555075	1					
ANR	555129	UnaryExpression	-- j	310:44:10261:10263	555075	2	True				
ANR	555130	IncDec	--		555075	0					
ANR	555131	Identifier	j		555075	1					
ANR	555132	ExpressionStatement	samples [ j ] = ( float ) sdata [ j ]	311:12:10278:10306	555075	3	True				
ANR	555133	AssignmentExpression	samples [ j ] = ( float ) sdata [ j ]		555075	0		=			
ANR	555134	ArrayIndexing	samples [ j ]		555075	0					
ANR	555135	Identifier	samples		555075	0					
ANR	555136	Identifier	j		555075	1					
ANR	555137	CastExpression	( float ) sdata [ j ]		555075	1					
ANR	555138	CastTarget	float		555075	0					
ANR	555139	ArrayIndexing	sdata [ j ]		555075	1					
ANR	555140	Identifier	sdata		555075	0					
ANR	555141	Identifier	j		555075	1					
ANR	555142	ElseStatement	else		555075	0					
ANR	555143	CompoundStatement		13:8:286:310	555075	0					
ANR	555144	IdentifierDeclStatement	float fpart = * fparts ++ ;	313:8:10329:10352	555075	0	True				
ANR	555145	IdentifierDecl	fpart = * fparts ++		555075	0					
ANR	555146	IdentifierDeclType	float		555075	0					
ANR	555147	Identifier	fpart		555075	1					
ANR	555148	AssignmentExpression	fpart = * fparts ++		555075	2		=			
ANR	555149	Identifier	fpart		555075	0					
ANR	555150	UnaryOperationExpression	* fparts ++		555075	1					
ANR	555151	UnaryOperator	*		555075	0					
ANR	555152	PostIncDecOperationExpression	fparts ++		555075	1					
ANR	555153	Identifier	fparts		555075	0					
ANR	555154	IncDec	++		555075	1					
ANR	555155	IdentifierDeclStatement	float samples1 [ max_Sd_n ] ;	314:8:10362:10386	555075	1	True				
ANR	555156	IdentifierDecl	samples1 [ max_Sd_n ]		555075	0					
ANR	555157	IdentifierDeclType	float [ max_Sd_n ]		555075	0					
ANR	555158	Identifier	samples1		555075	1					
ANR	555159	Identifier	max_Sd_n		555075	2					
ANR	555160	IfStatement	if ( is_fzero ( fpart ) )		555075	2					
ANR	555161	Condition	is_fzero ( fpart )	316:12:10401:10415	555075	0	True				
ANR	555162	CallExpression	is_fzero ( fpart )		555075	0					
ANR	555163	Callee	is_fzero		555075	0					
ANR	555164	Identifier	is_fzero		555075	0					
ANR	555165	ArgumentList	fpart		555075	1					
ANR	555166	Argument	fpart		555075	0					
ANR	555167	Identifier	fpart		555075	0					
ANR	555168	CompoundStatement		15:29:342:342	555075	1					
ANR	555169	ExpressionStatement	++ factors	317:12:10432:10441	555075	0	True				
ANR	555170	UnaryExpression	++ factors		555075	0					
ANR	555171	IncDec	++		555075	0					
ANR	555172	Identifier	factors		555075	1					
ANR	555173	ExpressionStatement	-- m	318:12:10455:10458	555075	1	True				
ANR	555174	UnaryExpression	-- m		555075	0					
ANR	555175	IncDec	--		555075	0					
ANR	555176	Identifier	m		555075	1					
ANR	555177	GotoStatement	goto top ;	319:12:10472:10480	555075	2	True				
ANR	555178	Identifier	top		555075	0					
ANR	555179	ExpressionStatement	"fn_interpolate_linear ( pfn , fparts , factors + 1 , samples , offset , m - 1 )"	321:8:10500:10601	555075	3	True				
ANR	555180	CallExpression	"fn_interpolate_linear ( pfn , fparts , factors + 1 , samples , offset , m - 1 )"		555075	0					
ANR	555181	Callee	fn_interpolate_linear		555075	0					
ANR	555182	Identifier	fn_interpolate_linear		555075	0					
ANR	555183	ArgumentList	pfn		555075	1					
ANR	555184	Argument	pfn		555075	0					
ANR	555185	Identifier	pfn		555075	0					
ANR	555186	Argument	fparts		555075	1					
ANR	555187	Identifier	fparts		555075	0					
ANR	555188	Argument	factors + 1		555075	2					
ANR	555189	AdditiveExpression	factors + 1		555075	0		+			
ANR	555190	Identifier	factors		555075	0					
ANR	555191	PrimaryExpression	1		555075	1					
ANR	555192	Argument	samples		555075	3					
ANR	555193	Identifier	samples		555075	0					
ANR	555194	Argument	offset		555075	4					
ANR	555195	Identifier	offset		555075	0					
ANR	555196	Argument	m - 1		555075	5					
ANR	555197	AdditiveExpression	m - 1		555075	0		-			
ANR	555198	Identifier	m		555075	0					
ANR	555199	PrimaryExpression	1		555075	1					
ANR	555200	ExpressionStatement	"fn_interpolate_linear ( pfn , fparts , factors + 1 , samples1 , offset + * factors , m - 1 )"	323:8:10611:10724	555075	4	True				
ANR	555201	CallExpression	"fn_interpolate_linear ( pfn , fparts , factors + 1 , samples1 , offset + * factors , m - 1 )"		555075	0					
ANR	555202	Callee	fn_interpolate_linear		555075	0					
ANR	555203	Identifier	fn_interpolate_linear		555075	0					
ANR	555204	ArgumentList	pfn		555075	1					
ANR	555205	Argument	pfn		555075	0					
ANR	555206	Identifier	pfn		555075	0					
ANR	555207	Argument	fparts		555075	1					
ANR	555208	Identifier	fparts		555075	0					
ANR	555209	Argument	factors + 1		555075	2					
ANR	555210	AdditiveExpression	factors + 1		555075	0		+			
ANR	555211	Identifier	factors		555075	0					
ANR	555212	PrimaryExpression	1		555075	1					
ANR	555213	Argument	samples1		555075	3					
ANR	555214	Identifier	samples1		555075	0					
ANR	555215	Argument	offset + * factors		555075	4					
ANR	555216	AdditiveExpression	offset + * factors		555075	0		+			
ANR	555217	Identifier	offset		555075	0					
ANR	555218	UnaryOperationExpression	* factors		555075	1					
ANR	555219	UnaryOperator	*		555075	0					
ANR	555220	Identifier	factors		555075	1					
ANR	555221	Argument	m - 1		555075	5					
ANR	555222	AdditiveExpression	m - 1		555075	0		-			
ANR	555223	Identifier	m		555075	0					
ANR	555224	PrimaryExpression	1		555075	1					
ANR	555225	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		555075	5					
ANR	555226	ForInit	j = pfn -> params . n - 1 ;	325:13:10739:10760	555075	0	True				
ANR	555227	AssignmentExpression	j = pfn -> params . n - 1		555075	0		=			
ANR	555228	Identifier	j		555075	0					
ANR	555229	AdditiveExpression	pfn -> params . n - 1		555075	1		-			
ANR	555230	MemberAccess	pfn -> params . n		555075	0					
ANR	555231	PtrMemberAccess	pfn -> params		555075	0					
ANR	555232	Identifier	pfn		555075	0					
ANR	555233	Identifier	params		555075	1					
ANR	555234	Identifier	n		555075	1					
ANR	555235	PrimaryExpression	1		555075	1					
ANR	555236	Condition	j >= 0	325:36:10762:10767	555075	1	True				
ANR	555237	RelationalExpression	j >= 0		555075	0		>=			
ANR	555238	Identifier	j		555075	0					
ANR	555239	PrimaryExpression	0		555075	1					
ANR	555240	UnaryExpression	-- j	325:44:10770:10772	555075	2	True				
ANR	555241	IncDec	--		555075	0					
ANR	555242	Identifier	j		555075	1					
ANR	555243	ExpressionStatement	samples [ j ] += ( samples1 [ j ] - samples [ j ] ) * fpart	326:12:10787:10835	555075	3	True				
ANR	555244	AssignmentExpression	samples [ j ] += ( samples1 [ j ] - samples [ j ] ) * fpart		555075	0		+=			
ANR	555245	ArrayIndexing	samples [ j ]		555075	0					
ANR	555246	Identifier	samples		555075	0					
ANR	555247	Identifier	j		555075	1					
ANR	555248	MultiplicativeExpression	( samples1 [ j ] - samples [ j ] ) * fpart		555075	1		*			
ANR	555249	AdditiveExpression	samples1 [ j ] - samples [ j ]		555075	0		-			
ANR	555250	ArrayIndexing	samples1 [ j ]		555075	0					
ANR	555251	Identifier	samples1		555075	0					
ANR	555252	Identifier	j		555075	1					
ANR	555253	ArrayIndexing	samples [ j ]		555075	1					
ANR	555254	Identifier	samples		555075	0					
ANR	555255	Identifier	j		555075	1					
ANR	555256	Identifier	fpart		555075	1					
ANR	555257	ReturnType	static void		555075	1					
ANR	555258	Identifier	fn_interpolate_linear		555075	2					
ANR	555259	ParameterList	"const gs_function_Sd_t * pfn , const float * fparts , const ulong * factors , float * samples , ulong offset , int m"		555075	3					
ANR	555260	Parameter	const gs_function_Sd_t * pfn	300:22:9949:9975	555075	0	True				
ANR	555261	ParameterType	const gs_function_Sd_t *		555075	0					
ANR	555262	Identifier	pfn		555075	1					
ANR	555263	Parameter	const float * fparts	300:51:9978:9996	555075	1	True				
ANR	555264	ParameterType	const float *		555075	0					
ANR	555265	Identifier	fparts		555075	1					
ANR	555266	Parameter	const ulong * factors	301:17:10016:10035	555075	2	True				
ANR	555267	ParameterType	const ulong *		555075	0					
ANR	555268	Identifier	factors		555075	1					
ANR	555269	Parameter	float * samples	301:39:10038:10051	555075	3	True				
ANR	555270	ParameterType	float *		555075	0					
ANR	555271	Identifier	samples		555075	1					
ANR	555272	Parameter	ulong offset	301:55:10054:10065	555075	4	True				
ANR	555273	ParameterType	ulong		555075	0					
ANR	555274	Identifier	offset		555075	1					
ANR	555275	Parameter	int m	301:69:10068:10072	555075	5	True				
ANR	555276	ParameterType	int		555075	0					
ANR	555277	Identifier	m		555075	1					
ANR	555278	CFGEntryNode	ENTRY		555075		True				
ANR	555279	CFGExitNode	EXIT		555075		True				
ANR	555280	Symbol	pfn -> params . n		555075						
ANR	555281	Symbol	* sdata		555075						
ANR	555282	Symbol	is_fzero		555075						
ANR	555283	Symbol	* factors		555075						
ANR	555284	Symbol	* fparts ++		555075						
ANR	555285	Symbol	fpart		555075						
ANR	555286	Symbol	samples1		555075						
ANR	555287	Symbol	* * pfn		555075						
ANR	555288	Symbol	* samples		555075						
ANR	555289	Symbol	fparts		555075						
ANR	555290	Symbol	sdata		555075						
ANR	555291	Symbol	pfn -> params . BitsPerSample		555075						
ANR	555292	Symbol	* pfn		555075						
ANR	555293	Symbol	offset		555075						
ANR	555294	Symbol	* samples1		555075						
ANR	555295	Symbol	fn_get_samples		555075						
ANR	555296	Symbol	j		555075						
ANR	555297	Symbol	m		555075						
ANR	555298	Symbol	samples		555075						
ANR	555299	Symbol	* pfn -> params . BitsPerSample		555075						
ANR	555300	Symbol	factors		555075						
ANR	555301	Symbol	* j		555075						
ANR	555302	Symbol	* fn_get_samples		555075						
ANR	555303	Symbol	pfn		555075						
ANR	555304	Symbol	pfn -> params		555075						
ANR	555305	Symbol	* pfn -> params		555075						
ANR	555306	Function	fn_Sd_encode	330:0:10846:11598							
ANR	555307	FunctionDef	"fn_Sd_encode (const gs_function_Sd_t * pfn , int i , double sample)"		555306	0					
ANR	555308	CompoundStatement		332:0:10931:11598	555306	0					
ANR	555309	IdentifierDeclStatement	"float d0 , d1 , r0 , r1 ;"	333:4:10937:10957	555306	0	True				
ANR	555310	IdentifierDecl	d0		555306	0					
ANR	555311	IdentifierDeclType	float		555306	0					
ANR	555312	Identifier	d0		555306	1					
ANR	555313	IdentifierDecl	d1		555306	1					
ANR	555314	IdentifierDeclType	float		555306	0					
ANR	555315	Identifier	d1		555306	1					
ANR	555316	IdentifierDecl	r0		555306	2					
ANR	555317	IdentifierDeclType	float		555306	0					
ANR	555318	Identifier	r0		555306	1					
ANR	555319	IdentifierDecl	r1		555306	3					
ANR	555320	IdentifierDeclType	float		555306	0					
ANR	555321	Identifier	r1		555306	1					
ANR	555322	IdentifierDeclStatement	double value ;	334:4:10963:10975	555306	1	True				
ANR	555323	IdentifierDecl	value		555306	0					
ANR	555324	IdentifierDeclType	double		555306	0					
ANR	555325	Identifier	value		555306	1					
ANR	555326	IdentifierDeclStatement	int bps = pfn -> params . BitsPerSample ;	335:4:10981:11016	555306	2	True				
ANR	555327	IdentifierDecl	bps = pfn -> params . BitsPerSample		555306	0					
ANR	555328	IdentifierDeclType	int		555306	0					
ANR	555329	Identifier	bps		555306	1					
ANR	555330	AssignmentExpression	bps = pfn -> params . BitsPerSample		555306	2		=			
ANR	555331	Identifier	bps		555306	0					
ANR	555332	MemberAccess	pfn -> params . BitsPerSample		555306	1					
ANR	555333	PtrMemberAccess	pfn -> params		555306	0					
ANR	555334	Identifier	pfn		555306	0					
ANR	555335	Identifier	params		555306	1					
ANR	555336	Identifier	BitsPerSample		555306	1					
ANR	555337	IdentifierDeclStatement	uint max_samp = ( bps < ( sizeof ( uint ) * 8 ) ) ? ( ( 1 << bps ) - 1 ) : max_uint ;	337:4:11084:11156	555306	3	True				
ANR	555338	IdentifierDecl	max_samp = ( bps < ( sizeof ( uint ) * 8 ) ) ? ( ( 1 << bps ) - 1 ) : max_uint		555306	0					
ANR	555339	IdentifierDeclType	uint		555306	0					
ANR	555340	Identifier	max_samp		555306	1					
ANR	555341	AssignmentExpression	max_samp = ( bps < ( sizeof ( uint ) * 8 ) ) ? ( ( 1 << bps ) - 1 ) : max_uint		555306	2		=			
ANR	555342	Identifier	max_samp		555306	0					
ANR	555343	ConditionalExpression	( bps < ( sizeof ( uint ) * 8 ) ) ? ( ( 1 << bps ) - 1 ) : max_uint		555306	1					
ANR	555344	Condition	bps < ( sizeof ( uint ) * 8 )		555306	0					
ANR	555345	RelationalExpression	bps < ( sizeof ( uint ) * 8 )		555306	0		<			
ANR	555346	Identifier	bps		555306	0					
ANR	555347	MultiplicativeExpression	sizeof ( uint ) * 8		555306	1		*			
ANR	555348	SizeofExpression	sizeof ( uint )		555306	0					
ANR	555349	Sizeof	sizeof		555306	0					
ANR	555350	SizeofOperand	uint		555306	1					
ANR	555351	PrimaryExpression	8		555306	1					
ANR	555352	AdditiveExpression	( 1 << bps ) - 1		555306	1		-			
ANR	555353	ShiftExpression	1 << bps		555306	0		<<			
ANR	555354	PrimaryExpression	1		555306	0					
ANR	555355	Identifier	bps		555306	1					
ANR	555356	PrimaryExpression	1		555306	1					
ANR	555357	Identifier	max_uint		555306	2					
ANR	555358	IfStatement	if ( pfn -> params . Range )		555306	4					
ANR	555359	Condition	pfn -> params . Range	339:8:11167:11183	555306	0	True				
ANR	555360	MemberAccess	pfn -> params . Range		555306	0					
ANR	555361	PtrMemberAccess	pfn -> params		555306	0					
ANR	555362	Identifier	pfn		555306	0					
ANR	555363	Identifier	params		555306	1					
ANR	555364	Identifier	Range		555306	1					
ANR	555365	ExpressionStatement	"r0 = pfn -> params . Range [ 2 * i ] , r1 = pfn -> params . Range [ 2 * i + 1 ]"	340:8:11194:11258	555306	1	True				
ANR	555366	Expression	"r0 = pfn -> params . Range [ 2 * i ] , r1 = pfn -> params . Range [ 2 * i + 1 ]"		555306	0					
ANR	555367	AssignmentExpression	r0 = pfn -> params . Range [ 2 * i ]		555306	0		=			
ANR	555368	Identifier	r0		555306	0					
ANR	555369	ArrayIndexing	pfn -> params . Range [ 2 * i ]		555306	1					
ANR	555370	MemberAccess	pfn -> params . Range		555306	0					
ANR	555371	PtrMemberAccess	pfn -> params		555306	0					
ANR	555372	Identifier	pfn		555306	0					
ANR	555373	Identifier	params		555306	1					
ANR	555374	Identifier	Range		555306	1					
ANR	555375	MultiplicativeExpression	2 * i		555306	1		*			
ANR	555376	PrimaryExpression	2		555306	0					
ANR	555377	Identifier	i		555306	1					
ANR	555378	AssignmentExpression	r1 = pfn -> params . Range [ 2 * i + 1 ]		555306	1		=			
ANR	555379	Identifier	r1		555306	0					
ANR	555380	ArrayIndexing	pfn -> params . Range [ 2 * i + 1 ]		555306	1					
ANR	555381	MemberAccess	pfn -> params . Range		555306	0					
ANR	555382	PtrMemberAccess	pfn -> params		555306	0					
ANR	555383	Identifier	pfn		555306	0					
ANR	555384	Identifier	params		555306	1					
ANR	555385	Identifier	Range		555306	1					
ANR	555386	AdditiveExpression	2 * i + 1		555306	1		+			
ANR	555387	MultiplicativeExpression	2 * i		555306	0		*			
ANR	555388	PrimaryExpression	2		555306	0					
ANR	555389	Identifier	i		555306	1					
ANR	555390	PrimaryExpression	1		555306	1					
ANR	555391	ElseStatement	else		555306	0					
ANR	555392	ExpressionStatement	"r0 = 0 , r1 = ( float ) max_samp"	342:8:11277:11305	555306	0	True				
ANR	555393	Expression	"r0 = 0 , r1 = ( float ) max_samp"		555306	0					
ANR	555394	AssignmentExpression	r0 = 0		555306	0		=			
ANR	555395	Identifier	r0		555306	0					
ANR	555396	PrimaryExpression	0		555306	1					
ANR	555397	AssignmentExpression	r1 = ( float ) max_samp		555306	1		=			
ANR	555398	Identifier	r1		555306	0					
ANR	555399	CastExpression	( float ) max_samp		555306	1					
ANR	555400	CastTarget	float		555306	0					
ANR	555401	Identifier	max_samp		555306	1					
ANR	555402	IfStatement	if ( pfn -> params . Decode )		555306	5					
ANR	555403	Condition	pfn -> params . Decode	343:8:11315:11332	555306	0	True				
ANR	555404	MemberAccess	pfn -> params . Decode		555306	0					
ANR	555405	PtrMemberAccess	pfn -> params		555306	0					
ANR	555406	Identifier	pfn		555306	0					
ANR	555407	Identifier	params		555306	1					
ANR	555408	Identifier	Decode		555306	1					
ANR	555409	ExpressionStatement	"d0 = pfn -> params . Decode [ 2 * i ] , d1 = pfn -> params . Decode [ 2 * i + 1 ]"	344:8:11343:11409	555306	1	True				
ANR	555410	Expression	"d0 = pfn -> params . Decode [ 2 * i ] , d1 = pfn -> params . Decode [ 2 * i + 1 ]"		555306	0					
ANR	555411	AssignmentExpression	d0 = pfn -> params . Decode [ 2 * i ]		555306	0		=			
ANR	555412	Identifier	d0		555306	0					
ANR	555413	ArrayIndexing	pfn -> params . Decode [ 2 * i ]		555306	1					
ANR	555414	MemberAccess	pfn -> params . Decode		555306	0					
ANR	555415	PtrMemberAccess	pfn -> params		555306	0					
ANR	555416	Identifier	pfn		555306	0					
ANR	555417	Identifier	params		555306	1					
ANR	555418	Identifier	Decode		555306	1					
ANR	555419	MultiplicativeExpression	2 * i		555306	1		*			
ANR	555420	PrimaryExpression	2		555306	0					
ANR	555421	Identifier	i		555306	1					
ANR	555422	AssignmentExpression	d1 = pfn -> params . Decode [ 2 * i + 1 ]		555306	1		=			
ANR	555423	Identifier	d1		555306	0					
ANR	555424	ArrayIndexing	pfn -> params . Decode [ 2 * i + 1 ]		555306	1					
ANR	555425	MemberAccess	pfn -> params . Decode		555306	0					
ANR	555426	PtrMemberAccess	pfn -> params		555306	0					
ANR	555427	Identifier	pfn		555306	0					
ANR	555428	Identifier	params		555306	1					
ANR	555429	Identifier	Decode		555306	1					
ANR	555430	AdditiveExpression	2 * i + 1		555306	1		+			
ANR	555431	MultiplicativeExpression	2 * i		555306	0		*			
ANR	555432	PrimaryExpression	2		555306	0					
ANR	555433	Identifier	i		555306	1					
ANR	555434	PrimaryExpression	1		555306	1					
ANR	555435	ElseStatement	else		555306	0					
ANR	555436	ExpressionStatement	"d0 = r0 , d1 = r1"	346:8:11428:11444	555306	0	True				
ANR	555437	Expression	"d0 = r0 , d1 = r1"		555306	0					
ANR	555438	AssignmentExpression	d0 = r0		555306	0		=			
ANR	555439	Identifier	d0		555306	0					
ANR	555440	Identifier	r0		555306	1					
ANR	555441	AssignmentExpression	d1 = r1		555306	1		=			
ANR	555442	Identifier	d1		555306	0					
ANR	555443	Identifier	r1		555306	1					
ANR	555444	ExpressionStatement	value = sample * ( d1 - d0 ) / max_samp + d0	348:4:11451:11493	555306	6	True				
ANR	555445	AssignmentExpression	value = sample * ( d1 - d0 ) / max_samp + d0		555306	0		=			
ANR	555446	Identifier	value		555306	0					
ANR	555447	AdditiveExpression	sample * ( d1 - d0 ) / max_samp + d0		555306	1		+			
ANR	555448	MultiplicativeExpression	sample * ( d1 - d0 ) / max_samp		555306	0		*			
ANR	555449	Identifier	sample		555306	0					
ANR	555450	MultiplicativeExpression	( d1 - d0 ) / max_samp		555306	1		/			
ANR	555451	AdditiveExpression	d1 - d0		555306	0		-			
ANR	555452	Identifier	d1		555306	0					
ANR	555453	Identifier	d0		555306	1					
ANR	555454	Identifier	max_samp		555306	1					
ANR	555455	Identifier	d0		555306	1					
ANR	555456	IfStatement	if ( value < r0 )		555306	7					
ANR	555457	Condition	value < r0	349:8:11503:11512	555306	0	True				
ANR	555458	RelationalExpression	value < r0		555306	0		<			
ANR	555459	Identifier	value		555306	0					
ANR	555460	Identifier	r0		555306	1					
ANR	555461	ExpressionStatement	value = r0	350:8:11523:11533	555306	1	True				
ANR	555462	AssignmentExpression	value = r0		555306	0		=			
ANR	555463	Identifier	value		555306	0					
ANR	555464	Identifier	r0		555306	1					
ANR	555465	ElseStatement	else		555306	0					
ANR	555466	IfStatement	if ( value > r1 )		555306	0					
ANR	555467	Condition	value > r1	351:13:11548:11557	555306	0	True				
ANR	555468	RelationalExpression	value > r1		555306	0		>			
ANR	555469	Identifier	value		555306	0					
ANR	555470	Identifier	r1		555306	1					
ANR	555471	ExpressionStatement	value = r1	352:8:11568:11578	555306	1	True				
ANR	555472	AssignmentExpression	value = r1		555306	0		=			
ANR	555473	Identifier	value		555306	0					
ANR	555474	Identifier	r1		555306	1					
ANR	555475	ReturnStatement	return value ;	353:4:11584:11596	555306	8	True				
ANR	555476	Identifier	value		555306	0					
ANR	555477	ReturnType	static inline double		555306	1					
ANR	555478	Identifier	fn_Sd_encode		555306	2					
ANR	555479	ParameterList	"const gs_function_Sd_t * pfn , int i , double sample"		555306	3					
ANR	555480	Parameter	const gs_function_Sd_t * pfn	331:13:10880:10906	555306	0	True				
ANR	555481	ParameterType	const gs_function_Sd_t *		555306	0					
ANR	555482	Identifier	pfn		555306	1					
ANR	555483	Parameter	int i	331:42:10909:10913	555306	1	True				
ANR	555484	ParameterType	int		555306	0					
ANR	555485	Identifier	i		555306	1					
ANR	555486	Parameter	double sample	331:49:10916:10928	555306	2	True				
ANR	555487	ParameterType	double		555306	0					
ANR	555488	Identifier	sample		555306	1					
ANR	555489	CFGEntryNode	ENTRY		555306		True				
ANR	555490	CFGExitNode	EXIT		555306		True				
ANR	555491	Symbol	* pfn		555306						
ANR	555492	Symbol	pfn -> params . Range		555306						
ANR	555493	Symbol	bps		555306						
ANR	555494	Symbol	max_uint		555306						
ANR	555495	Symbol	i		555306						
ANR	555496	Symbol	* pfn -> params . Decode		555306						
ANR	555497	Symbol	d0		555306						
ANR	555498	Symbol	* * pfn		555306						
ANR	555499	Symbol	sample		555306						
ANR	555500	Symbol	d1		555306						
ANR	555501	Symbol	* i		555306						
ANR	555502	Symbol	* pfn -> params . Range		555306						
ANR	555503	Symbol	pfn		555306						
ANR	555504	Symbol	pfn -> params . Decode		555306						
ANR	555505	Symbol	value		555306						
ANR	555506	Symbol	pfn -> params		555306						
ANR	555507	Symbol	r0		555306						
ANR	555508	Symbol	pfn -> params . BitsPerSample		555306						
ANR	555509	Symbol	max_samp		555306						
ANR	555510	Symbol	* pfn -> params		555306						
ANR	555511	Symbol	r1		555306						
ANR	555512	Function	fn_Sd_evaluate_general	358:0:11694:13897							
ANR	555513	FunctionDef	"fn_Sd_evaluate_general (const gs_function_t * pfn_common , const float * in , float * out)"		555512	0					
ANR	555514	CompoundStatement		360:0:11791:13897	555512	0					
ANR	555515	IdentifierDeclStatement	const gs_function_Sd_t * pfn = ( const gs_function_Sd_t * ) pfn_common ;	361:4:11797:11863	555512	0	True				
ANR	555516	IdentifierDecl	* pfn = ( const gs_function_Sd_t * ) pfn_common		555512	0					
ANR	555517	IdentifierDeclType	const gs_function_Sd_t *		555512	0					
ANR	555518	Identifier	pfn		555512	1					
ANR	555519	AssignmentExpression	* pfn = ( const gs_function_Sd_t * ) pfn_common		555512	2		=			
ANR	555520	Identifier	pfn		555512	0					
ANR	555521	CastExpression	( const gs_function_Sd_t * ) pfn_common		555512	1					
ANR	555522	CastTarget	const gs_function_Sd_t *		555512	0					
ANR	555523	Identifier	pfn_common		555512	1					
ANR	555524	IdentifierDeclStatement	int bps = pfn -> params . BitsPerSample ;	362:4:11869:11904	555512	1	True				
ANR	555525	IdentifierDecl	bps = pfn -> params . BitsPerSample		555512	0					
ANR	555526	IdentifierDeclType	int		555512	0					
ANR	555527	Identifier	bps		555512	1					
ANR	555528	AssignmentExpression	bps = pfn -> params . BitsPerSample		555512	2		=			
ANR	555529	Identifier	bps		555512	0					
ANR	555530	MemberAccess	pfn -> params . BitsPerSample		555512	1					
ANR	555531	PtrMemberAccess	pfn -> params		555512	0					
ANR	555532	Identifier	pfn		555512	0					
ANR	555533	Identifier	params		555512	1					
ANR	555534	Identifier	BitsPerSample		555512	1					
ANR	555535	IdentifierDeclStatement	ulong offset = 0 ;	363:4:11910:11926	555512	2	True				
ANR	555536	IdentifierDecl	offset = 0		555512	0					
ANR	555537	IdentifierDeclType	ulong		555512	0					
ANR	555538	Identifier	offset		555512	1					
ANR	555539	AssignmentExpression	offset = 0		555512	2		=			
ANR	555540	Identifier	offset		555512	0					
ANR	555541	PrimaryExpression	0		555512	1					
ANR	555542	IdentifierDeclStatement	int i ;	364:4:11932:11937	555512	3	True				
ANR	555543	IdentifierDecl	i		555512	0					
ANR	555544	IdentifierDeclType	int		555512	0					
ANR	555545	Identifier	i		555512	1					
ANR	555546	IdentifierDeclStatement	float encoded [ max_Sd_m ] ;	365:4:11943:11966	555512	4	True				
ANR	555547	IdentifierDecl	encoded [ max_Sd_m ]		555512	0					
ANR	555548	IdentifierDeclType	float [ max_Sd_m ]		555512	0					
ANR	555549	Identifier	encoded		555512	1					
ANR	555550	Identifier	max_Sd_m		555512	2					
ANR	555551	IdentifierDeclStatement	int iparts [ max_Sd_m ] ;	366:4:11972:11992	555512	5	True				
ANR	555552	IdentifierDecl	iparts [ max_Sd_m ]		555512	0					
ANR	555553	IdentifierDeclType	int [ max_Sd_m ]		555512	0					
ANR	555554	Identifier	iparts		555512	1					
ANR	555555	Identifier	max_Sd_m		555512	2					
ANR	555556	IdentifierDeclStatement	ulong factors [ max_Sd_m ] ;	367:4:12040:12063	555512	6	True				
ANR	555557	IdentifierDecl	factors [ max_Sd_m ]		555512	0					
ANR	555558	IdentifierDeclType	ulong [ max_Sd_m ]		555512	0					
ANR	555559	Identifier	factors		555512	1					
ANR	555560	Identifier	max_Sd_m		555512	2					
ANR	555561	IdentifierDeclStatement	float samples [ max_Sd_n ] ;	368:4:12069:12092	555512	7	True				
ANR	555562	IdentifierDecl	samples [ max_Sd_n ]		555512	0					
ANR	555563	IdentifierDeclType	float [ max_Sd_n ]		555512	0					
ANR	555564	Identifier	samples		555512	1					
ANR	555565	Identifier	max_Sd_n		555512	2					
ANR	555566	ForStatement	for ( i = 0 ; i < pfn -> params . m ; ++ i )		555512	8					
ANR	555567	ForInit	i = 0 ;	372:9:12140:12145	555512	0	True				
ANR	555568	AssignmentExpression	i = 0		555512	0		=			
ANR	555569	Identifier	i		555512	0					
ANR	555570	PrimaryExpression	0		555512	1					
ANR	555571	Condition	i < pfn -> params . m	372:16:12147:12163	555512	1	True				
ANR	555572	RelationalExpression	i < pfn -> params . m		555512	0		<			
ANR	555573	Identifier	i		555512	0					
ANR	555574	MemberAccess	pfn -> params . m		555512	1					
ANR	555575	PtrMemberAccess	pfn -> params		555512	0					
ANR	555576	Identifier	pfn		555512	0					
ANR	555577	Identifier	params		555512	1					
ANR	555578	Identifier	m		555512	1					
ANR	555579	UnaryExpression	++ i	372:35:12166:12168	555512	2	True				
ANR	555580	IncDec	++		555512	0					
ANR	555581	Identifier	i		555512	1					
ANR	555582	CompoundStatement		16:8:483:505	555512	3					
ANR	555583	IdentifierDeclStatement	"float d0 = pfn -> params . Domain [ 2 * i ] , d1 = pfn -> params . Domain [ 2 * i + 1 ] ;"	373:8:12181:12265	555512	0	True				
ANR	555584	IdentifierDecl	d0 = pfn -> params . Domain [ 2 * i ]		555512	0					
ANR	555585	IdentifierDeclType	float		555512	0					
ANR	555586	Identifier	d0		555512	1					
ANR	555587	AssignmentExpression	d0 = pfn -> params . Domain [ 2 * i ]		555512	2		=			
ANR	555588	Identifier	d0		555512	0					
ANR	555589	ArrayIndexing	pfn -> params . Domain [ 2 * i ]		555512	1					
ANR	555590	MemberAccess	pfn -> params . Domain		555512	0					
ANR	555591	PtrMemberAccess	pfn -> params		555512	0					
ANR	555592	Identifier	pfn		555512	0					
ANR	555593	Identifier	params		555512	1					
ANR	555594	Identifier	Domain		555512	1					
ANR	555595	MultiplicativeExpression	2 * i		555512	1		*			
ANR	555596	PrimaryExpression	2		555512	0					
ANR	555597	Identifier	i		555512	1					
ANR	555598	IdentifierDecl	d1 = pfn -> params . Domain [ 2 * i + 1 ]		555512	1					
ANR	555599	IdentifierDeclType	float		555512	0					
ANR	555600	Identifier	d1		555512	1					
ANR	555601	AssignmentExpression	d1 = pfn -> params . Domain [ 2 * i + 1 ]		555512	2		=			
ANR	555602	Identifier	d1		555512	0					
ANR	555603	ArrayIndexing	pfn -> params . Domain [ 2 * i + 1 ]		555512	1					
ANR	555604	MemberAccess	pfn -> params . Domain		555512	0					
ANR	555605	PtrMemberAccess	pfn -> params		555512	0					
ANR	555606	Identifier	pfn		555512	0					
ANR	555607	Identifier	params		555512	1					
ANR	555608	Identifier	Domain		555512	1					
ANR	555609	AdditiveExpression	2 * i + 1		555512	1		+			
ANR	555610	MultiplicativeExpression	2 * i		555512	0		*			
ANR	555611	PrimaryExpression	2		555512	0					
ANR	555612	Identifier	i		555512	1					
ANR	555613	PrimaryExpression	1		555512	1					
ANR	555614	IdentifierDeclStatement	"float arg = in [ i ] , enc ;"	375:8:12275:12297	555512	1	True				
ANR	555615	IdentifierDecl	arg = in [ i ]		555512	0					
ANR	555616	IdentifierDeclType	float		555512	0					
ANR	555617	Identifier	arg		555512	1					
ANR	555618	AssignmentExpression	arg = in [ i ]		555512	2		=			
ANR	555619	Identifier	arg		555512	0					
ANR	555620	ArrayIndexing	in [ i ]		555512	1					
ANR	555621	Identifier	in		555512	0					
ANR	555622	Identifier	i		555512	1					
ANR	555623	IdentifierDecl	enc		555512	1					
ANR	555624	IdentifierDeclType	float		555512	0					
ANR	555625	Identifier	enc		555512	1					
ANR	555626	IfStatement	if ( arg < d0 )		555512	2					
ANR	555627	Condition	arg < d0	377:12:12312:12319	555512	0	True				
ANR	555628	RelationalExpression	arg < d0		555512	0		<			
ANR	555629	Identifier	arg		555512	0					
ANR	555630	Identifier	d0		555512	1					
ANR	555631	ExpressionStatement	arg = d0	378:12:12334:12342	555512	1	True				
ANR	555632	AssignmentExpression	arg = d0		555512	0		=			
ANR	555633	Identifier	arg		555512	0					
ANR	555634	Identifier	d0		555512	1					
ANR	555635	ElseStatement	else		555512	0					
ANR	555636	IfStatement	if ( arg > d1 )		555512	0					
ANR	555637	Condition	arg > d1	379:17:12361:12368	555512	0	True				
ANR	555638	RelationalExpression	arg > d1		555512	0		>			
ANR	555639	Identifier	arg		555512	0					
ANR	555640	Identifier	d1		555512	1					
ANR	555641	ExpressionStatement	arg = d1	380:12:12383:12391	555512	1	True				
ANR	555642	AssignmentExpression	arg = d1		555512	0		=			
ANR	555643	Identifier	arg		555512	0					
ANR	555644	Identifier	d1		555512	1					
ANR	555645	IfStatement	if ( pfn -> params . Encode )		555512	3					
ANR	555646	Condition	pfn -> params . Encode	381:12:12405:12422	555512	0	True				
ANR	555647	MemberAccess	pfn -> params . Encode		555512	0					
ANR	555648	PtrMemberAccess	pfn -> params		555512	0					
ANR	555649	Identifier	pfn		555512	0					
ANR	555650	Identifier	params		555512	1					
ANR	555651	Identifier	Encode		555512	1					
ANR	555652	CompoundStatement		24:12:697:737	555512	1					
ANR	555653	IdentifierDeclStatement	float e0 = pfn -> params . Encode [ 2 * i ] ;	382:12:12439:12475	555512	0	True				
ANR	555654	IdentifierDecl	e0 = pfn -> params . Encode [ 2 * i ]		555512	0					
ANR	555655	IdentifierDeclType	float		555512	0					
ANR	555656	Identifier	e0		555512	1					
ANR	555657	AssignmentExpression	e0 = pfn -> params . Encode [ 2 * i ]		555512	2		=			
ANR	555658	Identifier	e0		555512	0					
ANR	555659	ArrayIndexing	pfn -> params . Encode [ 2 * i ]		555512	1					
ANR	555660	MemberAccess	pfn -> params . Encode		555512	0					
ANR	555661	PtrMemberAccess	pfn -> params		555512	0					
ANR	555662	Identifier	pfn		555512	0					
ANR	555663	Identifier	params		555512	1					
ANR	555664	Identifier	Encode		555512	1					
ANR	555665	MultiplicativeExpression	2 * i		555512	1		*			
ANR	555666	PrimaryExpression	2		555512	0					
ANR	555667	Identifier	i		555512	1					
ANR	555668	IdentifierDeclStatement	float e1 = pfn -> params . Encode [ 2 * i + 1 ] ;	383:12:12489:12529	555512	1	True				
ANR	555669	IdentifierDecl	e1 = pfn -> params . Encode [ 2 * i + 1 ]		555512	0					
ANR	555670	IdentifierDeclType	float		555512	0					
ANR	555671	Identifier	e1		555512	1					
ANR	555672	AssignmentExpression	e1 = pfn -> params . Encode [ 2 * i + 1 ]		555512	2		=			
ANR	555673	Identifier	e1		555512	0					
ANR	555674	ArrayIndexing	pfn -> params . Encode [ 2 * i + 1 ]		555512	1					
ANR	555675	MemberAccess	pfn -> params . Encode		555512	0					
ANR	555676	PtrMemberAccess	pfn -> params		555512	0					
ANR	555677	Identifier	pfn		555512	0					
ANR	555678	Identifier	params		555512	1					
ANR	555679	Identifier	Encode		555512	1					
ANR	555680	AdditiveExpression	2 * i + 1		555512	1		+			
ANR	555681	MultiplicativeExpression	2 * i		555512	0		*			
ANR	555682	PrimaryExpression	2		555512	0					
ANR	555683	Identifier	i		555512	1					
ANR	555684	PrimaryExpression	1		555512	1					
ANR	555685	ExpressionStatement	enc = ( arg - d0 ) * ( e1 - e0 ) / ( d1 - d0 ) + e0	385:12:12544:12589	555512	2	True				
ANR	555686	AssignmentExpression	enc = ( arg - d0 ) * ( e1 - e0 ) / ( d1 - d0 ) + e0		555512	0		=			
ANR	555687	Identifier	enc		555512	0					
ANR	555688	AdditiveExpression	( arg - d0 ) * ( e1 - e0 ) / ( d1 - d0 ) + e0		555512	1		+			
ANR	555689	MultiplicativeExpression	( arg - d0 ) * ( e1 - e0 ) / ( d1 - d0 )		555512	0		*			
ANR	555690	AdditiveExpression	arg - d0		555512	0		-			
ANR	555691	Identifier	arg		555512	0					
ANR	555692	Identifier	d0		555512	1					
ANR	555693	MultiplicativeExpression	( e1 - e0 ) / ( d1 - d0 )		555512	1		/			
ANR	555694	AdditiveExpression	e1 - e0		555512	0		-			
ANR	555695	Identifier	e1		555512	0					
ANR	555696	Identifier	e0		555512	1					
ANR	555697	AdditiveExpression	d1 - d0		555512	1		-			
ANR	555698	Identifier	d1		555512	0					
ANR	555699	Identifier	d0		555512	1					
ANR	555700	Identifier	e0		555512	1					
ANR	555701	IfStatement	if ( enc < 0 )		555512	3					
ANR	555702	Condition	enc < 0	386:16:12607:12613	555512	0	True				
ANR	555703	RelationalExpression	enc < 0		555512	0		<			
ANR	555704	Identifier	enc		555512	0					
ANR	555705	PrimaryExpression	0		555512	1					
ANR	555706	ExpressionStatement	encoded [ i ] = 0	387:16:12632:12646	555512	1	True				
ANR	555707	AssignmentExpression	encoded [ i ] = 0		555512	0		=			
ANR	555708	ArrayIndexing	encoded [ i ]		555512	0					
ANR	555709	Identifier	encoded		555512	0					
ANR	555710	Identifier	i		555512	1					
ANR	555711	PrimaryExpression	0		555512	1					
ANR	555712	ElseStatement	else		555512	0					
ANR	555713	IfStatement	if ( enc >= pfn -> params . Size [ i ] - 1 )		555512	0					
ANR	555714	Condition	enc >= pfn -> params . Size [ i ] - 1	388:21:12669:12698	555512	0	True				
ANR	555715	RelationalExpression	enc >= pfn -> params . Size [ i ] - 1		555512	0		>=			
ANR	555716	Identifier	enc		555512	0					
ANR	555717	AdditiveExpression	pfn -> params . Size [ i ] - 1		555512	1		-			
ANR	555718	ArrayIndexing	pfn -> params . Size [ i ]		555512	0					
ANR	555719	MemberAccess	pfn -> params . Size		555512	0					
ANR	555720	PtrMemberAccess	pfn -> params		555512	0					
ANR	555721	Identifier	pfn		555512	0					
ANR	555722	Identifier	params		555512	1					
ANR	555723	Identifier	Size		555512	1					
ANR	555724	Identifier	i		555512	1					
ANR	555725	PrimaryExpression	1		555512	1					
ANR	555726	ExpressionStatement	encoded [ i ] = ( float ) pfn -> params . Size [ i ] - 1	389:16:12717:12760	555512	1	True				
ANR	555727	AssignmentExpression	encoded [ i ] = ( float ) pfn -> params . Size [ i ] - 1		555512	0		=			
ANR	555728	ArrayIndexing	encoded [ i ]		555512	0					
ANR	555729	Identifier	encoded		555512	0					
ANR	555730	Identifier	i		555512	1					
ANR	555731	AdditiveExpression	( float ) pfn -> params . Size [ i ] - 1		555512	1		-			
ANR	555732	CastExpression	( float ) pfn -> params . Size [ i ]		555512	0					
ANR	555733	CastTarget	float		555512	0					
ANR	555734	ArrayIndexing	pfn -> params . Size [ i ]		555512	1					
ANR	555735	MemberAccess	pfn -> params . Size		555512	0					
ANR	555736	PtrMemberAccess	pfn -> params		555512	0					
ANR	555737	Identifier	pfn		555512	0					
ANR	555738	Identifier	params		555512	1					
ANR	555739	Identifier	Size		555512	1					
ANR	555740	Identifier	i		555512	1					
ANR	555741	PrimaryExpression	1		555512	1					
ANR	555742	ElseStatement	else		555512	0					
ANR	555743	ExpressionStatement	encoded [ i ] = enc	391:16:12795:12811	555512	0	True				
ANR	555744	AssignmentExpression	encoded [ i ] = enc		555512	0		=			
ANR	555745	ArrayIndexing	encoded [ i ]		555512	0					
ANR	555746	Identifier	encoded		555512	0					
ANR	555747	Identifier	i		555512	1					
ANR	555748	Identifier	enc		555512	1					
ANR	555749	ElseStatement	else		555512	0					
ANR	555750	CompoundStatement		33:15:1036:1036	555512	0					
ANR	555751	ExpressionStatement	encoded [ i ] = ( arg - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )	395:12:12989:13052	555512	0	True				
ANR	555752	AssignmentExpression	encoded [ i ] = ( arg - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		555512	0		=			
ANR	555753	ArrayIndexing	encoded [ i ]		555512	0					
ANR	555754	Identifier	encoded		555512	0					
ANR	555755	Identifier	i		555512	1					
ANR	555756	MultiplicativeExpression	( arg - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		555512	1		*			
ANR	555757	AdditiveExpression	arg - d0		555512	0		-			
ANR	555758	Identifier	arg		555512	0					
ANR	555759	Identifier	d0		555512	1					
ANR	555760	MultiplicativeExpression	( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		555512	1		/			
ANR	555761	AdditiveExpression	pfn -> params . Size [ i ] - 1		555512	0		-			
ANR	555762	ArrayIndexing	pfn -> params . Size [ i ]		555512	0					
ANR	555763	MemberAccess	pfn -> params . Size		555512	0					
ANR	555764	PtrMemberAccess	pfn -> params		555512	0					
ANR	555765	Identifier	pfn		555512	0					
ANR	555766	Identifier	params		555512	1					
ANR	555767	Identifier	Size		555512	1					
ANR	555768	Identifier	i		555512	1					
ANR	555769	PrimaryExpression	1		555512	1					
ANR	555770	AdditiveExpression	d1 - d0		555512	1		-			
ANR	555771	Identifier	d1		555512	0					
ANR	555772	Identifier	d0		555512	1					
ANR	555773	CompoundStatement		43:8:1347:1381	555512	9					
ANR	555774	IdentifierDeclStatement	ulong factor = bps * pfn -> params . n ;	402:8:13139:13173	555512	0	True				
ANR	555775	IdentifierDecl	factor = bps * pfn -> params . n		555512	0					
ANR	555776	IdentifierDeclType	ulong		555512	0					
ANR	555777	Identifier	factor		555512	1					
ANR	555778	AssignmentExpression	factor = bps * pfn -> params . n		555512	2		=			
ANR	555779	Identifier	factor		555512	0					
ANR	555780	MultiplicativeExpression	bps * pfn -> params . n		555512	1		*			
ANR	555781	Identifier	bps		555512	0					
ANR	555782	MemberAccess	pfn -> params . n		555512	1					
ANR	555783	PtrMemberAccess	pfn -> params		555512	0					
ANR	555784	Identifier	pfn		555512	0					
ANR	555785	Identifier	params		555512	1					
ANR	555786	Identifier	n		555512	1					
ANR	555787	ForStatement	for ( i = 0 ; i < pfn -> params . m ; factor *= pfn -> params . Size [ i ++ ] )		555512	1					
ANR	555788	ForInit	i = 0 ;	404:13:13189:13194	555512	0	True				
ANR	555789	AssignmentExpression	i = 0		555512	0		=			
ANR	555790	Identifier	i		555512	0					
ANR	555791	PrimaryExpression	0		555512	1					
ANR	555792	Condition	i < pfn -> params . m	404:20:13196:13212	555512	1	True				
ANR	555793	RelationalExpression	i < pfn -> params . m		555512	0		<			
ANR	555794	Identifier	i		555512	0					
ANR	555795	MemberAccess	pfn -> params . m		555512	1					
ANR	555796	PtrMemberAccess	pfn -> params		555512	0					
ANR	555797	Identifier	pfn		555512	0					
ANR	555798	Identifier	params		555512	1					
ANR	555799	Identifier	m		555512	1					
ANR	555800	AssignmentExpression	factor *= pfn -> params . Size [ i ++ ]	404:39:13215:13245	555512	2	True	*=			
ANR	555801	Identifier	factor		555512	0					
ANR	555802	ArrayIndexing	pfn -> params . Size [ i ++ ]		555512	1					
ANR	555803	MemberAccess	pfn -> params . Size		555512	0					
ANR	555804	PtrMemberAccess	pfn -> params		555512	0					
ANR	555805	Identifier	pfn		555512	0					
ANR	555806	Identifier	params		555512	1					
ANR	555807	Identifier	Size		555512	1					
ANR	555808	PostIncDecOperationExpression	i ++		555512	1					
ANR	555809	Identifier	i		555512	0					
ANR	555810	IncDec	++		555512	1					
ANR	555811	CompoundStatement		46:12:1470:1497	555512	3					
ANR	555812	IdentifierDeclStatement	int ipart = ( int ) encoded [ i ] ;	405:12:13262:13289	555512	0	True				
ANR	555813	IdentifierDecl	ipart = ( int ) encoded [ i ]		555512	0					
ANR	555814	IdentifierDeclType	int		555512	0					
ANR	555815	Identifier	ipart		555512	1					
ANR	555816	AssignmentExpression	ipart = ( int ) encoded [ i ]		555512	2		=			
ANR	555817	Identifier	ipart		555512	0					
ANR	555818	CastExpression	( int ) encoded [ i ]		555512	1					
ANR	555819	CastTarget	int		555512	0					
ANR	555820	ArrayIndexing	encoded [ i ]		555512	1					
ANR	555821	Identifier	encoded		555512	0					
ANR	555822	Identifier	i		555512	1					
ANR	555823	ExpressionStatement	offset += ( factors [ i ] = factor ) * ipart	407:12:13304:13343	555512	1	True				
ANR	555824	AssignmentExpression	offset += ( factors [ i ] = factor ) * ipart		555512	0		+=			
ANR	555825	Identifier	offset		555512	0					
ANR	555826	MultiplicativeExpression	( factors [ i ] = factor ) * ipart		555512	1		*			
ANR	555827	AssignmentExpression	factors [ i ] = factor		555512	0		=			
ANR	555828	ArrayIndexing	factors [ i ]		555512	0					
ANR	555829	Identifier	factors		555512	0					
ANR	555830	Identifier	i		555512	1					
ANR	555831	Identifier	factor		555512	1					
ANR	555832	Identifier	ipart		555512	1					
ANR	555833	ExpressionStatement	iparts [ i ] = ipart	408:12:13357:13374	555512	2	True				
ANR	555834	AssignmentExpression	iparts [ i ] = ipart		555512	0		=			
ANR	555835	ArrayIndexing	iparts [ i ]		555512	0					
ANR	555836	Identifier	iparts		555512	0					
ANR	555837	Identifier	i		555512	1					
ANR	555838	Identifier	ipart		555512	1					
ANR	555839	ExpressionStatement	encoded [ i ] -= ipart	409:12:13430:13449	555512	3	True				
ANR	555840	AssignmentExpression	encoded [ i ] -= ipart		555512	0		-=			
ANR	555841	ArrayIndexing	encoded [ i ]		555512	0					
ANR	555842	Identifier	encoded		555512	0					
ANR	555843	Identifier	i		555512	1					
ANR	555844	Identifier	ipart		555512	1					
ANR	555845	IfStatement	if ( pfn -> params . Order == 3 )		555512	10					
ANR	555846	Condition	pfn -> params . Order == 3	412:8:13475:13496	555512	0	True				
ANR	555847	EqualityExpression	pfn -> params . Order == 3		555512	0		==			
ANR	555848	MemberAccess	pfn -> params . Order		555512	0					
ANR	555849	PtrMemberAccess	pfn -> params		555512	0					
ANR	555850	Identifier	pfn		555512	0					
ANR	555851	Identifier	params		555512	1					
ANR	555852	Identifier	Order		555512	1					
ANR	555853	PrimaryExpression	3		555512	1					
ANR	555854	ExpressionStatement	"fn_interpolate_cubic ( pfn , encoded , iparts , factors , samples , offset , pfn -> params . m )"	413:8:13507:13619	555512	1	True				
ANR	555855	CallExpression	"fn_interpolate_cubic ( pfn , encoded , iparts , factors , samples , offset , pfn -> params . m )"		555512	0					
ANR	555856	Callee	fn_interpolate_cubic		555512	0					
ANR	555857	Identifier	fn_interpolate_cubic		555512	0					
ANR	555858	ArgumentList	pfn		555512	1					
ANR	555859	Argument	pfn		555512	0					
ANR	555860	Identifier	pfn		555512	0					
ANR	555861	Argument	encoded		555512	1					
ANR	555862	Identifier	encoded		555512	0					
ANR	555863	Argument	iparts		555512	2					
ANR	555864	Identifier	iparts		555512	0					
ANR	555865	Argument	factors		555512	3					
ANR	555866	Identifier	factors		555512	0					
ANR	555867	Argument	samples		555512	4					
ANR	555868	Identifier	samples		555512	0					
ANR	555869	Argument	offset		555512	5					
ANR	555870	Identifier	offset		555512	0					
ANR	555871	Argument	pfn -> params . m		555512	6					
ANR	555872	MemberAccess	pfn -> params . m		555512	0					
ANR	555873	PtrMemberAccess	pfn -> params		555512	0					
ANR	555874	Identifier	pfn		555512	0					
ANR	555875	Identifier	params		555512	1					
ANR	555876	Identifier	m		555512	1					
ANR	555877	ElseStatement	else		555512	0					
ANR	555878	ExpressionStatement	"fn_interpolate_linear ( pfn , encoded , factors , samples , offset , pfn -> params . m )"	416:8:13638:13744	555512	0	True				
ANR	555879	CallExpression	"fn_interpolate_linear ( pfn , encoded , factors , samples , offset , pfn -> params . m )"		555512	0					
ANR	555880	Callee	fn_interpolate_linear		555512	0					
ANR	555881	Identifier	fn_interpolate_linear		555512	0					
ANR	555882	ArgumentList	pfn		555512	1					
ANR	555883	Argument	pfn		555512	0					
ANR	555884	Identifier	pfn		555512	0					
ANR	555885	Argument	encoded		555512	1					
ANR	555886	Identifier	encoded		555512	0					
ANR	555887	Argument	factors		555512	2					
ANR	555888	Identifier	factors		555512	0					
ANR	555889	Argument	samples		555512	3					
ANR	555890	Identifier	samples		555512	0					
ANR	555891	Argument	offset		555512	4					
ANR	555892	Identifier	offset		555512	0					
ANR	555893	Argument	pfn -> params . m		555512	5					
ANR	555894	MemberAccess	pfn -> params . m		555512	0					
ANR	555895	PtrMemberAccess	pfn -> params		555512	0					
ANR	555896	Identifier	pfn		555512	0					
ANR	555897	Identifier	params		555512	1					
ANR	555898	Identifier	m		555512	1					
ANR	555899	ForStatement	for ( i = 0 ; i < pfn -> params . n ; ++ i )		555512	11					
ANR	555900	ForInit	i = 0 ;	421:9:13793:13798	555512	0	True				
ANR	555901	AssignmentExpression	i = 0		555512	0		=			
ANR	555902	Identifier	i		555512	0					
ANR	555903	PrimaryExpression	0		555512	1					
ANR	555904	Condition	i < pfn -> params . n	421:16:13800:13816	555512	1	True				
ANR	555905	RelationalExpression	i < pfn -> params . n		555512	0		<			
ANR	555906	Identifier	i		555512	0					
ANR	555907	MemberAccess	pfn -> params . n		555512	1					
ANR	555908	PtrMemberAccess	pfn -> params		555512	0					
ANR	555909	Identifier	pfn		555512	0					
ANR	555910	Identifier	params		555512	1					
ANR	555911	Identifier	n		555512	1					
ANR	555912	UnaryExpression	++ i	421:35:13819:13821	555512	2	True				
ANR	555913	IncDec	++		555512	0					
ANR	555914	Identifier	i		555512	1					
ANR	555915	ExpressionStatement	"out [ i ] = ( float ) fn_Sd_encode ( pfn , i , samples [ i ] )"	422:8:13832:13880	555512	3	True				
ANR	555916	AssignmentExpression	"out [ i ] = ( float ) fn_Sd_encode ( pfn , i , samples [ i ] )"		555512	0		=			
ANR	555917	ArrayIndexing	out [ i ]		555512	0					
ANR	555918	Identifier	out		555512	0					
ANR	555919	Identifier	i		555512	1					
ANR	555920	CastExpression	"( float ) fn_Sd_encode ( pfn , i , samples [ i ] )"		555512	1					
ANR	555921	CastTarget	float		555512	0					
ANR	555922	CallExpression	"fn_Sd_encode ( pfn , i , samples [ i ] )"		555512	1					
ANR	555923	Callee	fn_Sd_encode		555512	0					
ANR	555924	Identifier	fn_Sd_encode		555512	0					
ANR	555925	ArgumentList	pfn		555512	1					
ANR	555926	Argument	pfn		555512	0					
ANR	555927	Identifier	pfn		555512	0					
ANR	555928	Argument	i		555512	1					
ANR	555929	Identifier	i		555512	0					
ANR	555930	Argument	samples [ i ]		555512	2					
ANR	555931	ArrayIndexing	samples [ i ]		555512	0					
ANR	555932	Identifier	samples		555512	0					
ANR	555933	Identifier	i		555512	1					
ANR	555934	ReturnStatement	return 0 ;	424:4:13887:13895	555512	12	True				
ANR	555935	PrimaryExpression	0		555512	0					
ANR	555936	ReturnType	static int		555512	1					
ANR	555937	Identifier	fn_Sd_evaluate_general		555512	2					
ANR	555938	ParameterList	"const gs_function_t * pfn_common , const float * in , float * out"		555512	3					
ANR	555939	Parameter	const gs_function_t * pfn_common	359:23:11728:11759	555512	0	True				
ANR	555940	ParameterType	const gs_function_t *		555512	0					
ANR	555941	Identifier	pfn_common		555512	1					
ANR	555942	Parameter	const float * in	359:57:11762:11776	555512	1	True				
ANR	555943	ParameterType	const float *		555512	0					
ANR	555944	Identifier	in		555512	1					
ANR	555945	Parameter	float * out	359:74:11779:11788	555512	2	True				
ANR	555946	ParameterType	float *		555512	0					
ANR	555947	Identifier	out		555512	1					
ANR	555948	CFGEntryNode	ENTRY		555512		True				
ANR	555949	CFGExitNode	EXIT		555512		True				
ANR	555950	Symbol	pfn -> params . m		555512						
ANR	555951	Symbol	pfn -> params . Size		555512						
ANR	555952	Symbol	pfn -> params . n		555512						
ANR	555953	Symbol	pfn_common		555512						
ANR	555954	Symbol	* factors		555512						
ANR	555955	Symbol	* in		555512						
ANR	555956	Symbol	* encoded		555512						
ANR	555957	Symbol	d0		555512						
ANR	555958	Symbol	* * pfn		555512						
ANR	555959	Symbol	d1		555512						
ANR	555960	Symbol	out		555512						
ANR	555961	Symbol	pfn -> params . Order		555512						
ANR	555962	Symbol	iparts		555512						
ANR	555963	Symbol	* samples		555512						
ANR	555964	Symbol	fn_Sd_encode		555512						
ANR	555965	Symbol	arg		555512						
ANR	555966	Symbol	pfn -> params . Encode		555512						
ANR	555967	Symbol	enc		555512						
ANR	555968	Symbol	factor		555512						
ANR	555969	Symbol	pfn -> params . BitsPerSample		555512						
ANR	555970	Symbol	ipart		555512						
ANR	555971	Symbol	* pfn		555512						
ANR	555972	Symbol	bps		555512						
ANR	555973	Symbol	offset		555512						
ANR	555974	Symbol	in		555512						
ANR	555975	Symbol	* pfn -> params . Encode		555512						
ANR	555976	Symbol	* pfn -> params . Size		555512						
ANR	555977	Symbol	i		555512						
ANR	555978	Symbol	pfn -> params . Domain		555512						
ANR	555979	Symbol	* pfn -> params . Domain		555512						
ANR	555980	Symbol	e0		555512						
ANR	555981	Symbol	e1		555512						
ANR	555982	Symbol	samples		555512						
ANR	555983	Symbol	factors		555512						
ANR	555984	Symbol	* iparts		555512						
ANR	555985	Symbol	* i		555512						
ANR	555986	Symbol	* out		555512						
ANR	555987	Symbol	pfn		555512						
ANR	555988	Symbol	pfn -> params		555512						
ANR	555989	Symbol	* pfn -> params		555512						
ANR	555990	Symbol	encoded		555512						
ANR	555991	DeclStmt									
ANR	555992	Decl							const double	const double	double_stub
ANR	555993	Function	fn_make_cubic_poles	429:0:13941:14317							
ANR	555994	FunctionDef	"fn_make_cubic_poles (double * p , double f0 , double f1 , double f2 , double f3 , const int pole_step_minor)"		555993	0					
ANR	555995	CompoundStatement		432:0:14074:14317	555993	0					
ANR	555996	IdentifierDeclStatement	const double a = - 0.5 ;	434:4:14182:14203	555993	0	True				
ANR	555997	IdentifierDecl	a = - 0.5		555993	0					
ANR	555998	IdentifierDeclType	const double		555993	0					
ANR	555999	Identifier	a		555993	1					
ANR	556000	AssignmentExpression	a = - 0.5		555993	2		=			
ANR	556001	Identifier	a		555993	0					
ANR	556002	UnaryOperationExpression	- 0.5		555993	1					
ANR	556003	UnaryOperator	-		555993	0					
ANR	556004	PrimaryExpression	0.5		555993	1					
ANR	556005	ExpressionStatement	p [ pole_step_minor * 1 ] = ( a * f0 + 3 * f1 - a * f2 ) / 3.0	436:4:14210:14259	555993	1	True				
ANR	556006	AssignmentExpression	p [ pole_step_minor * 1 ] = ( a * f0 + 3 * f1 - a * f2 ) / 3.0		555993	0		=			
ANR	556007	ArrayIndexing	p [ pole_step_minor * 1 ]		555993	0					
ANR	556008	Identifier	p		555993	0					
ANR	556009	MultiplicativeExpression	pole_step_minor * 1		555993	1		*			
ANR	556010	Identifier	pole_step_minor		555993	0					
ANR	556011	PrimaryExpression	1		555993	1					
ANR	556012	MultiplicativeExpression	( a * f0 + 3 * f1 - a * f2 ) / 3.0		555993	1		/			
ANR	556013	AdditiveExpression	a * f0 + 3 * f1 - a * f2		555993	0		+			
ANR	556014	MultiplicativeExpression	a * f0		555993	0		*			
ANR	556015	Identifier	a		555993	0					
ANR	556016	Identifier	f0		555993	1					
ANR	556017	AdditiveExpression	3 * f1 - a * f2		555993	1		-			
ANR	556018	MultiplicativeExpression	3 * f1		555993	0		*			
ANR	556019	PrimaryExpression	3		555993	0					
ANR	556020	Identifier	f1		555993	1					
ANR	556021	MultiplicativeExpression	a * f2		555993	1		*			
ANR	556022	Identifier	a		555993	0					
ANR	556023	Identifier	f2		555993	1					
ANR	556024	PrimaryExpression	3.0		555993	1					
ANR	556025	ExpressionStatement	p [ pole_step_minor * 2 ] = ( - a * f1 + 3 * f2 + a * f3 ) / 3.0	437:4:14265:14315	555993	2	True				
ANR	556026	AssignmentExpression	p [ pole_step_minor * 2 ] = ( - a * f1 + 3 * f2 + a * f3 ) / 3.0		555993	0		=			
ANR	556027	ArrayIndexing	p [ pole_step_minor * 2 ]		555993	0					
ANR	556028	Identifier	p		555993	0					
ANR	556029	MultiplicativeExpression	pole_step_minor * 2		555993	1		*			
ANR	556030	Identifier	pole_step_minor		555993	0					
ANR	556031	PrimaryExpression	2		555993	1					
ANR	556032	MultiplicativeExpression	( - a * f1 + 3 * f2 + a * f3 ) / 3.0		555993	1		/			
ANR	556033	AdditiveExpression	- a * f1 + 3 * f2 + a * f3		555993	0		+			
ANR	556034	MultiplicativeExpression	- a * f1		555993	0		*			
ANR	556035	UnaryOperationExpression	- a		555993	0					
ANR	556036	UnaryOperator	-		555993	0					
ANR	556037	Identifier	a		555993	1					
ANR	556038	Identifier	f1		555993	1					
ANR	556039	AdditiveExpression	3 * f2 + a * f3		555993	1		+			
ANR	556040	MultiplicativeExpression	3 * f2		555993	0		*			
ANR	556041	PrimaryExpression	3		555993	0					
ANR	556042	Identifier	f2		555993	1					
ANR	556043	MultiplicativeExpression	a * f3		555993	1		*			
ANR	556044	Identifier	a		555993	0					
ANR	556045	Identifier	f3		555993	1					
ANR	556046	PrimaryExpression	3.0		555993	1					
ANR	556047	ReturnType	static inline void		555993	1					
ANR	556048	Identifier	fn_make_cubic_poles		555993	2					
ANR	556049	ParameterList	"double * p , double f0 , double f1 , double f2 , double f3 , const int pole_step_minor"		555993	3					
ANR	556050	Parameter	double * p	430:20:13980:13988	555993	0	True				
ANR	556051	ParameterType	double *		555993	0					
ANR	556052	Identifier	p		555993	1					
ANR	556053	Parameter	double f0	430:31:13991:13999	555993	1	True				
ANR	556054	ParameterType	double		555993	0					
ANR	556055	Identifier	f0		555993	1					
ANR	556056	Parameter	double f1	430:42:14002:14010	555993	2	True				
ANR	556057	ParameterType	double		555993	0					
ANR	556058	Identifier	f1		555993	1					
ANR	556059	Parameter	double f2	430:53:14013:14021	555993	3	True				
ANR	556060	ParameterType	double		555993	0					
ANR	556061	Identifier	f2		555993	1					
ANR	556062	Parameter	double f3	430:64:14024:14032	555993	4	True				
ANR	556063	ParameterType	double		555993	0					
ANR	556064	Identifier	f3		555993	1					
ANR	556065	Parameter	const int pole_step_minor	431:12:14047:14071	555993	5	True				
ANR	556066	ParameterType	const int		555993	0					
ANR	556067	Identifier	pole_step_minor		555993	1					
ANR	556068	CFGEntryNode	ENTRY		555993		True				
ANR	556069	CFGExitNode	EXIT		555993		True				
ANR	556070	Symbol	p		555993						
ANR	556071	Symbol	a		555993						
ANR	556072	Symbol	f0		555993						
ANR	556073	Symbol	* p		555993						
ANR	556074	Symbol	f1		555993						
ANR	556075	Symbol	pole_step_minor		555993						
ANR	556076	Symbol	f2		555993						
ANR	556077	Symbol	f3		555993						
ANR	556078	Symbol	* pole_step_minor		555993						
ANR	556079	Function	fn_make_poles	440:0:14320:15446							
ANR	556080	FunctionDef	"fn_make_poles (double * p , const int pole_step , int power , int bias)"		556079	0					
ANR	556081	CompoundStatement		442:0:14399:15446	556079	0					
ANR	556082	IdentifierDeclStatement	const int pole_step_minor = pole_step / 3 ;	443:4:14405:14446	556079	0	True				
ANR	556083	IdentifierDecl	pole_step_minor = pole_step / 3		556079	0					
ANR	556084	IdentifierDeclType	const int		556079	0					
ANR	556085	Identifier	pole_step_minor		556079	1					
ANR	556086	AssignmentExpression	pole_step_minor = pole_step / 3		556079	2		=			
ANR	556087	Identifier	pole_step_minor		556079	0					
ANR	556088	MultiplicativeExpression	pole_step / 3		556079	1		/			
ANR	556089	Identifier	pole_step		556079	0					
ANR	556090	PrimaryExpression	3		556079	1					
ANR	556091	SwitchStatement	switch ( power )		556079	1					
ANR	556092	Condition	power	444:11:14459:14463	556079	0	True				
ANR	556093	Identifier	power		556079	0					
ANR	556094	CompoundStatement		3:18:66:66	556079	1					
ANR	556095	Label	case 1 :	445:8:14476:14482	556079	0	True				
ANR	556096	ExpressionStatement	p [ pole_step_minor * 1 ] = ( 2 * p [ pole_step * 0 ] + 1 * p [ pole_step * 1 ] ) / 3	447:12:14561:14635	556079	1	True				
ANR	556097	AssignmentExpression	p [ pole_step_minor * 1 ] = ( 2 * p [ pole_step * 0 ] + 1 * p [ pole_step * 1 ] ) / 3		556079	0		=			
ANR	556098	ArrayIndexing	p [ pole_step_minor * 1 ]		556079	0					
ANR	556099	Identifier	p		556079	0					
ANR	556100	MultiplicativeExpression	pole_step_minor * 1		556079	1		*			
ANR	556101	Identifier	pole_step_minor		556079	0					
ANR	556102	PrimaryExpression	1		556079	1					
ANR	556103	MultiplicativeExpression	( 2 * p [ pole_step * 0 ] + 1 * p [ pole_step * 1 ] ) / 3		556079	1		/			
ANR	556104	AdditiveExpression	2 * p [ pole_step * 0 ] + 1 * p [ pole_step * 1 ]		556079	0		+			
ANR	556105	MultiplicativeExpression	2 * p [ pole_step * 0 ]		556079	0		*			
ANR	556106	PrimaryExpression	2		556079	0					
ANR	556107	ArrayIndexing	p [ pole_step * 0 ]		556079	1					
ANR	556108	Identifier	p		556079	0					
ANR	556109	MultiplicativeExpression	pole_step * 0		556079	1		*			
ANR	556110	Identifier	pole_step		556079	0					
ANR	556111	PrimaryExpression	0		556079	1					
ANR	556112	MultiplicativeExpression	1 * p [ pole_step * 1 ]		556079	1		*			
ANR	556113	PrimaryExpression	1		556079	0					
ANR	556114	ArrayIndexing	p [ pole_step * 1 ]		556079	1					
ANR	556115	Identifier	p		556079	0					
ANR	556116	MultiplicativeExpression	pole_step * 1		556079	1		*			
ANR	556117	Identifier	pole_step		556079	0					
ANR	556118	PrimaryExpression	1		556079	1					
ANR	556119	PrimaryExpression	3		556079	1					
ANR	556120	ExpressionStatement	p [ pole_step_minor * 2 ] = ( 1 * p [ pole_step * 0 ] + 2 * p [ pole_step * 1 ] ) / 3	448:12:14649:14723	556079	2	True				
ANR	556121	AssignmentExpression	p [ pole_step_minor * 2 ] = ( 1 * p [ pole_step * 0 ] + 2 * p [ pole_step * 1 ] ) / 3		556079	0		=			
ANR	556122	ArrayIndexing	p [ pole_step_minor * 2 ]		556079	0					
ANR	556123	Identifier	p		556079	0					
ANR	556124	MultiplicativeExpression	pole_step_minor * 2		556079	1		*			
ANR	556125	Identifier	pole_step_minor		556079	0					
ANR	556126	PrimaryExpression	2		556079	1					
ANR	556127	MultiplicativeExpression	( 1 * p [ pole_step * 0 ] + 2 * p [ pole_step * 1 ] ) / 3		556079	1		/			
ANR	556128	AdditiveExpression	1 * p [ pole_step * 0 ] + 2 * p [ pole_step * 1 ]		556079	0		+			
ANR	556129	MultiplicativeExpression	1 * p [ pole_step * 0 ]		556079	0		*			
ANR	556130	PrimaryExpression	1		556079	0					
ANR	556131	ArrayIndexing	p [ pole_step * 0 ]		556079	1					
ANR	556132	Identifier	p		556079	0					
ANR	556133	MultiplicativeExpression	pole_step * 0		556079	1		*			
ANR	556134	Identifier	pole_step		556079	0					
ANR	556135	PrimaryExpression	0		556079	1					
ANR	556136	MultiplicativeExpression	2 * p [ pole_step * 1 ]		556079	1		*			
ANR	556137	PrimaryExpression	2		556079	0					
ANR	556138	ArrayIndexing	p [ pole_step * 1 ]		556079	1					
ANR	556139	Identifier	p		556079	0					
ANR	556140	MultiplicativeExpression	pole_step * 1		556079	1		*			
ANR	556141	Identifier	pole_step		556079	0					
ANR	556142	PrimaryExpression	1		556079	1					
ANR	556143	PrimaryExpression	3		556079	1					
ANR	556144	BreakStatement	break ;	449:12:14737:14742	556079	3	True				
ANR	556145	Label	case 2 :	450:8:14752:14758	556079	4	True				
ANR	556146	ExpressionStatement	"fn_make_cubic_poles ( p + pole_step * bias , p [ pole_step * 0 ] , p [ pole_step * bias ] , p [ pole_step * ( 1 + bias ) ] , p [ pole_step * 2 ] , pole_step_minor )"	453:12:14901:15103	556079	5	True				
ANR	556147	CallExpression	"fn_make_cubic_poles ( p + pole_step * bias , p [ pole_step * 0 ] , p [ pole_step * bias ] , p [ pole_step * ( 1 + bias ) ] , p [ pole_step * 2 ] , pole_step_minor )"		556079	0					
ANR	556148	Callee	fn_make_cubic_poles		556079	0					
ANR	556149	Identifier	fn_make_cubic_poles		556079	0					
ANR	556150	ArgumentList	p + pole_step * bias		556079	1					
ANR	556151	Argument	p + pole_step * bias		556079	0					
ANR	556152	AdditiveExpression	p + pole_step * bias		556079	0		+			
ANR	556153	Identifier	p		556079	0					
ANR	556154	MultiplicativeExpression	pole_step * bias		556079	1		*			
ANR	556155	Identifier	pole_step		556079	0					
ANR	556156	Identifier	bias		556079	1					
ANR	556157	Argument	p [ pole_step * 0 ]		556079	1					
ANR	556158	ArrayIndexing	p [ pole_step * 0 ]		556079	0					
ANR	556159	Identifier	p		556079	0					
ANR	556160	MultiplicativeExpression	pole_step * 0		556079	1		*			
ANR	556161	Identifier	pole_step		556079	0					
ANR	556162	PrimaryExpression	0		556079	1					
ANR	556163	Argument	p [ pole_step * bias ]		556079	2					
ANR	556164	ArrayIndexing	p [ pole_step * bias ]		556079	0					
ANR	556165	Identifier	p		556079	0					
ANR	556166	MultiplicativeExpression	pole_step * bias		556079	1		*			
ANR	556167	Identifier	pole_step		556079	0					
ANR	556168	Identifier	bias		556079	1					
ANR	556169	Argument	p [ pole_step * ( 1 + bias ) ]		556079	3					
ANR	556170	ArrayIndexing	p [ pole_step * ( 1 + bias ) ]		556079	0					
ANR	556171	Identifier	p		556079	0					
ANR	556172	MultiplicativeExpression	pole_step * ( 1 + bias )		556079	1		*			
ANR	556173	Identifier	pole_step		556079	0					
ANR	556174	AdditiveExpression	1 + bias		556079	1		+			
ANR	556175	PrimaryExpression	1		556079	0					
ANR	556176	Identifier	bias		556079	1					
ANR	556177	Argument	p [ pole_step * 2 ]		556079	4					
ANR	556178	ArrayIndexing	p [ pole_step * 2 ]		556079	0					
ANR	556179	Identifier	p		556079	0					
ANR	556180	MultiplicativeExpression	pole_step * 2		556079	1		*			
ANR	556181	Identifier	pole_step		556079	0					
ANR	556182	PrimaryExpression	2		556079	1					
ANR	556183	Argument	pole_step_minor		556079	5					
ANR	556184	Identifier	pole_step_minor		556079	0					
ANR	556185	BreakStatement	break ;	457:12:15117:15122	556079	6	True				
ANR	556186	Label	case 3 :	458:8:15132:15138	556079	7	True				
ANR	556187	ExpressionStatement	"fn_make_cubic_poles ( p + pole_step * bias , p [ pole_step * 0 ] , p [ pole_step * 1 ] , p [ pole_step * 2 ] , p [ pole_step * 3 ] , pole_step_minor )"	460:12:15186:15356	556079	8	True				
ANR	556188	CallExpression	"fn_make_cubic_poles ( p + pole_step * bias , p [ pole_step * 0 ] , p [ pole_step * 1 ] , p [ pole_step * 2 ] , p [ pole_step * 3 ] , pole_step_minor )"		556079	0					
ANR	556189	Callee	fn_make_cubic_poles		556079	0					
ANR	556190	Identifier	fn_make_cubic_poles		556079	0					
ANR	556191	ArgumentList	p + pole_step * bias		556079	1					
ANR	556192	Argument	p + pole_step * bias		556079	0					
ANR	556193	AdditiveExpression	p + pole_step * bias		556079	0		+			
ANR	556194	Identifier	p		556079	0					
ANR	556195	MultiplicativeExpression	pole_step * bias		556079	1		*			
ANR	556196	Identifier	pole_step		556079	0					
ANR	556197	Identifier	bias		556079	1					
ANR	556198	Argument	p [ pole_step * 0 ]		556079	1					
ANR	556199	ArrayIndexing	p [ pole_step * 0 ]		556079	0					
ANR	556200	Identifier	p		556079	0					
ANR	556201	MultiplicativeExpression	pole_step * 0		556079	1		*			
ANR	556202	Identifier	pole_step		556079	0					
ANR	556203	PrimaryExpression	0		556079	1					
ANR	556204	Argument	p [ pole_step * 1 ]		556079	2					
ANR	556205	ArrayIndexing	p [ pole_step * 1 ]		556079	0					
ANR	556206	Identifier	p		556079	0					
ANR	556207	MultiplicativeExpression	pole_step * 1		556079	1		*			
ANR	556208	Identifier	pole_step		556079	0					
ANR	556209	PrimaryExpression	1		556079	1					
ANR	556210	Argument	p [ pole_step * 2 ]		556079	3					
ANR	556211	ArrayIndexing	p [ pole_step * 2 ]		556079	0					
ANR	556212	Identifier	p		556079	0					
ANR	556213	MultiplicativeExpression	pole_step * 2		556079	1		*			
ANR	556214	Identifier	pole_step		556079	0					
ANR	556215	PrimaryExpression	2		556079	1					
ANR	556216	Argument	p [ pole_step * 3 ]		556079	4					
ANR	556217	ArrayIndexing	p [ pole_step * 3 ]		556079	0					
ANR	556218	Identifier	p		556079	0					
ANR	556219	MultiplicativeExpression	pole_step * 3		556079	1		*			
ANR	556220	Identifier	pole_step		556079	0					
ANR	556221	PrimaryExpression	3		556079	1					
ANR	556222	Argument	pole_step_minor		556079	5					
ANR	556223	Identifier	pole_step_minor		556079	0					
ANR	556224	BreakStatement	break ;	463:12:15370:15375	556079	9	True				
ANR	556225	Label	default :	464:8:15385:15392	556079	10	True				
ANR	556226	Identifier	default		556079	0					
ANR	556227	ExpressionStatement	DO_NOTHING	465:11:15428:15438	556079	11	True				
ANR	556228	Identifier	DO_NOTHING		556079	0					
ANR	556229	ReturnType	static void		556079	1					
ANR	556230	Identifier	fn_make_poles		556079	2					
ANR	556231	ParameterList	"double * p , const int pole_step , int power , int bias"		556079	3					
ANR	556232	Parameter	double * p	441:14:14346:14354	556079	0	True				
ANR	556233	ParameterType	double *		556079	0					
ANR	556234	Identifier	p		556079	1					
ANR	556235	Parameter	const int pole_step	441:25:14357:14375	556079	1	True				
ANR	556236	ParameterType	const int		556079	0					
ANR	556237	Identifier	pole_step		556079	1					
ANR	556238	Parameter	int power	441:46:14378:14386	556079	2	True				
ANR	556239	ParameterType	int		556079	0					
ANR	556240	Identifier	power		556079	1					
ANR	556241	Parameter	int bias	441:57:14389:14396	556079	3	True				
ANR	556242	ParameterType	int		556079	0					
ANR	556243	Identifier	bias		556079	1					
ANR	556244	CFGEntryNode	ENTRY		556079		True				
ANR	556245	CFGExitNode	EXIT		556079		True				
ANR	556246	Symbol	p		556079						
ANR	556247	Symbol	* bias		556079						
ANR	556248	Symbol	bias		556079						
ANR	556249	Symbol	* p		556079						
ANR	556250	Symbol	power		556079						
ANR	556251	Symbol	pole_step_minor		556079						
ANR	556252	Symbol	* pole_step		556079						
ANR	556253	Symbol	pole_step		556079						
ANR	556254	Symbol	* pole_step_minor		556079						
ANR	556255	Function	fn_Sd_evaluate_cubic_cached_1d	475:0:15724:17654							
ANR	556256	FunctionDef	"fn_Sd_evaluate_cubic_cached_1d (const gs_function_Sd_t * pfn , const float * in , float * out)"		556255	0					
ANR	556257	CompoundStatement		477:0:15824:17654	556255	0					
ANR	556258	IdentifierDeclStatement	float d0 = pfn -> params . Domain [ 2 * 0 ] ;	478:4:15830:15866	556255	0	True				
ANR	556259	IdentifierDecl	d0 = pfn -> params . Domain [ 2 * 0 ]		556255	0					
ANR	556260	IdentifierDeclType	float		556255	0					
ANR	556261	Identifier	d0		556255	1					
ANR	556262	AssignmentExpression	d0 = pfn -> params . Domain [ 2 * 0 ]		556255	2		=			
ANR	556263	Identifier	d0		556255	0					
ANR	556264	ArrayIndexing	pfn -> params . Domain [ 2 * 0 ]		556255	1					
ANR	556265	MemberAccess	pfn -> params . Domain		556255	0					
ANR	556266	PtrMemberAccess	pfn -> params		556255	0					
ANR	556267	Identifier	pfn		556255	0					
ANR	556268	Identifier	params		556255	1					
ANR	556269	Identifier	Domain		556255	1					
ANR	556270	MultiplicativeExpression	2 * 0		556255	1		*			
ANR	556271	PrimaryExpression	2		556255	0					
ANR	556272	PrimaryExpression	0		556255	1					
ANR	556273	IdentifierDeclStatement	float d1 = pfn -> params . Domain [ 2 * 0 + 1 ] ;	479:4:15872:15912	556255	1	True				
ANR	556274	IdentifierDecl	d1 = pfn -> params . Domain [ 2 * 0 + 1 ]		556255	0					
ANR	556275	IdentifierDeclType	float		556255	0					
ANR	556276	Identifier	d1		556255	1					
ANR	556277	AssignmentExpression	d1 = pfn -> params . Domain [ 2 * 0 + 1 ]		556255	2		=			
ANR	556278	Identifier	d1		556255	0					
ANR	556279	ArrayIndexing	pfn -> params . Domain [ 2 * 0 + 1 ]		556255	1					
ANR	556280	MemberAccess	pfn -> params . Domain		556255	0					
ANR	556281	PtrMemberAccess	pfn -> params		556255	0					
ANR	556282	Identifier	pfn		556255	0					
ANR	556283	Identifier	params		556255	1					
ANR	556284	Identifier	Domain		556255	1					
ANR	556285	AdditiveExpression	2 * 0 + 1		556255	1		+			
ANR	556286	MultiplicativeExpression	2 * 0		556255	0		*			
ANR	556287	PrimaryExpression	2		556255	0					
ANR	556288	PrimaryExpression	0		556255	1					
ANR	556289	PrimaryExpression	1		556255	1					
ANR	556290	IdentifierDeclStatement	const int pole_step_minor = pfn -> params . n ;	480:4:15918:15959	556255	2	True				
ANR	556291	IdentifierDecl	pole_step_minor = pfn -> params . n		556255	0					
ANR	556292	IdentifierDeclType	const int		556255	0					
ANR	556293	Identifier	pole_step_minor		556255	1					
ANR	556294	AssignmentExpression	pole_step_minor = pfn -> params . n		556255	2		=			
ANR	556295	Identifier	pole_step_minor		556255	0					
ANR	556296	MemberAccess	pfn -> params . n		556255	1					
ANR	556297	PtrMemberAccess	pfn -> params		556255	0					
ANR	556298	Identifier	pfn		556255	0					
ANR	556299	Identifier	params		556255	1					
ANR	556300	Identifier	n		556255	1					
ANR	556301	IdentifierDeclStatement	const int pole_step = 3 * pole_step_minor ;	481:4:15965:16006	556255	3	True				
ANR	556302	IdentifierDecl	pole_step = 3 * pole_step_minor		556255	0					
ANR	556303	IdentifierDeclType	const int		556255	0					
ANR	556304	Identifier	pole_step		556255	1					
ANR	556305	AssignmentExpression	pole_step = 3 * pole_step_minor		556255	2		=			
ANR	556306	Identifier	pole_step		556255	0					
ANR	556307	MultiplicativeExpression	3 * pole_step_minor		556255	1		*			
ANR	556308	PrimaryExpression	3		556255	0					
ANR	556309	Identifier	pole_step_minor		556255	1					
ANR	556310	IdentifierDeclStatement	int i0 ;	482:4:16012:16018	556255	4	True				
ANR	556311	IdentifierDecl	i0		556255	0					
ANR	556312	IdentifierDeclType	int		556255	0					
ANR	556313	Identifier	i0		556255	1					
ANR	556314	IdentifierDeclStatement	"int ib , ie , i , k ;"	483:4:16044:16060	556255	5	True				
ANR	556315	IdentifierDecl	ib		556255	0					
ANR	556316	IdentifierDeclType	int		556255	0					
ANR	556317	Identifier	ib		556255	1					
ANR	556318	IdentifierDecl	ie		556255	1					
ANR	556319	IdentifierDeclType	int		556255	0					
ANR	556320	Identifier	ie		556255	1					
ANR	556321	IdentifierDecl	i		556255	2					
ANR	556322	IdentifierDeclType	int		556255	0					
ANR	556323	Identifier	i		556255	1					
ANR	556324	IdentifierDecl	k		556255	3					
ANR	556325	IdentifierDeclType	int		556255	0					
ANR	556326	Identifier	k		556255	1					
ANR	556327	IdentifierDeclStatement	"double * p , t0 , t1 , tt ;"	484:4:16066:16087	556255	6	True				
ANR	556328	IdentifierDecl	* p		556255	0					
ANR	556329	IdentifierDeclType	double *		556255	0					
ANR	556330	Identifier	p		556255	1					
ANR	556331	IdentifierDecl	t0		556255	1					
ANR	556332	IdentifierDeclType	double		556255	0					
ANR	556333	Identifier	t0		556255	1					
ANR	556334	IdentifierDecl	t1		556255	2					
ANR	556335	IdentifierDeclType	double		556255	0					
ANR	556336	Identifier	t1		556255	1					
ANR	556337	IdentifierDecl	tt		556255	3					
ANR	556338	IdentifierDeclType	double		556255	0					
ANR	556339	Identifier	tt		556255	1					
ANR	556340	ExpressionStatement	tt = ( in [ 0 ] - d0 ) * ( pfn -> params . Size [ 0 ] - 1 ) / ( d1 - d0 )	486:4:16094:16151	556255	7	True				
ANR	556341	AssignmentExpression	tt = ( in [ 0 ] - d0 ) * ( pfn -> params . Size [ 0 ] - 1 ) / ( d1 - d0 )		556255	0		=			
ANR	556342	Identifier	tt		556255	0					
ANR	556343	MultiplicativeExpression	( in [ 0 ] - d0 ) * ( pfn -> params . Size [ 0 ] - 1 ) / ( d1 - d0 )		556255	1		*			
ANR	556344	AdditiveExpression	in [ 0 ] - d0		556255	0		-			
ANR	556345	ArrayIndexing	in [ 0 ]		556255	0					
ANR	556346	Identifier	in		556255	0					
ANR	556347	PrimaryExpression	0		556255	1					
ANR	556348	Identifier	d0		556255	1					
ANR	556349	MultiplicativeExpression	( pfn -> params . Size [ 0 ] - 1 ) / ( d1 - d0 )		556255	1		/			
ANR	556350	AdditiveExpression	pfn -> params . Size [ 0 ] - 1		556255	0		-			
ANR	556351	ArrayIndexing	pfn -> params . Size [ 0 ]		556255	0					
ANR	556352	MemberAccess	pfn -> params . Size		556255	0					
ANR	556353	PtrMemberAccess	pfn -> params		556255	0					
ANR	556354	Identifier	pfn		556255	0					
ANR	556355	Identifier	params		556255	1					
ANR	556356	Identifier	Size		556255	1					
ANR	556357	PrimaryExpression	0		556255	1					
ANR	556358	PrimaryExpression	1		556255	1					
ANR	556359	AdditiveExpression	d1 - d0		556255	1		-			
ANR	556360	Identifier	d1		556255	0					
ANR	556361	Identifier	d0		556255	1					
ANR	556362	ExpressionStatement	i0 = ( int ) floor ( tt )	487:4:16157:16176	556255	8	True				
ANR	556363	AssignmentExpression	i0 = ( int ) floor ( tt )		556255	0		=			
ANR	556364	Identifier	i0		556255	0					
ANR	556365	CastExpression	( int ) floor ( tt )		556255	1					
ANR	556366	CastTarget	int		556255	0					
ANR	556367	CallExpression	floor ( tt )		556255	1					
ANR	556368	Callee	floor		556255	0					
ANR	556369	Identifier	floor		556255	0					
ANR	556370	ArgumentList	tt		556255	1					
ANR	556371	Argument	tt		556255	0					
ANR	556372	Identifier	tt		556255	0					
ANR	556373	ExpressionStatement	"ib = max ( i0 - 1 , 0 )"	488:4:16182:16201	556255	9	True				
ANR	556374	AssignmentExpression	"ib = max ( i0 - 1 , 0 )"		556255	0		=			
ANR	556375	Identifier	ib		556255	0					
ANR	556376	CallExpression	"max ( i0 - 1 , 0 )"		556255	1					
ANR	556377	Callee	max		556255	0					
ANR	556378	Identifier	max		556255	0					
ANR	556379	ArgumentList	i0 - 1		556255	1					
ANR	556380	Argument	i0 - 1		556255	0					
ANR	556381	AdditiveExpression	i0 - 1		556255	0		-			
ANR	556382	Identifier	i0		556255	0					
ANR	556383	PrimaryExpression	1		556255	1					
ANR	556384	Argument	0		556255	1					
ANR	556385	PrimaryExpression	0		556255	0					
ANR	556386	ExpressionStatement	"ie = min ( pfn -> params . Size [ 0 ] , i0 + 3 )"	489:4:16207:16244	556255	10	True				
ANR	556387	AssignmentExpression	"ie = min ( pfn -> params . Size [ 0 ] , i0 + 3 )"		556255	0		=			
ANR	556388	Identifier	ie		556255	0					
ANR	556389	CallExpression	"min ( pfn -> params . Size [ 0 ] , i0 + 3 )"		556255	1					
ANR	556390	Callee	min		556255	0					
ANR	556391	Identifier	min		556255	0					
ANR	556392	ArgumentList	pfn -> params . Size [ 0 ]		556255	1					
ANR	556393	Argument	pfn -> params . Size [ 0 ]		556255	0					
ANR	556394	ArrayIndexing	pfn -> params . Size [ 0 ]		556255	0					
ANR	556395	MemberAccess	pfn -> params . Size		556255	0					
ANR	556396	PtrMemberAccess	pfn -> params		556255	0					
ANR	556397	Identifier	pfn		556255	0					
ANR	556398	Identifier	params		556255	1					
ANR	556399	Identifier	Size		556255	1					
ANR	556400	PrimaryExpression	0		556255	1					
ANR	556401	Argument	i0 + 3		556255	1					
ANR	556402	AdditiveExpression	i0 + 3		556255	0		+			
ANR	556403	Identifier	i0		556255	0					
ANR	556404	PrimaryExpression	3		556255	1					
ANR	556405	ForStatement	for ( i = ib ; i < ie ; i ++ )		556255	11					
ANR	556406	ForInit	i = ib ;	490:9:16255:16261	556255	0	True				
ANR	556407	AssignmentExpression	i = ib		556255	0		=			
ANR	556408	Identifier	i		556255	0					
ANR	556409	Identifier	ib		556255	1					
ANR	556410	Condition	i < ie	490:17:16263:16268	556255	1	True				
ANR	556411	RelationalExpression	i < ie		556255	0		<			
ANR	556412	Identifier	i		556255	0					
ANR	556413	Identifier	ie		556255	1					
ANR	556414	PostIncDecOperationExpression	i ++	490:25:16271:16273	556255	2	True				
ANR	556415	Identifier	i		556255	0					
ANR	556416	IncDec	++		556255	1					
ANR	556417	CompoundStatement		14:30:451:451	556255	3					
ANR	556418	IfStatement	if ( pfn -> params . pole [ i * pole_step ] == double_stub )		556255	0					
ANR	556419	Condition	pfn -> params . pole [ i * pole_step ] == double_stub	491:12:16290:16335	556255	0	True				
ANR	556420	EqualityExpression	pfn -> params . pole [ i * pole_step ] == double_stub		556255	0		==			
ANR	556421	ArrayIndexing	pfn -> params . pole [ i * pole_step ]		556255	0					
ANR	556422	MemberAccess	pfn -> params . pole		556255	0					
ANR	556423	PtrMemberAccess	pfn -> params		556255	0					
ANR	556424	Identifier	pfn		556255	0					
ANR	556425	Identifier	params		556255	1					
ANR	556426	Identifier	pole		556255	1					
ANR	556427	MultiplicativeExpression	i * pole_step		556255	1		*			
ANR	556428	Identifier	i		556255	0					
ANR	556429	Identifier	pole_step		556255	1					
ANR	556430	Identifier	double_stub		556255	1					
ANR	556431	CompoundStatement		17:12:561:596	556255	1					
ANR	556432	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	492:12:16352:16372	556255	0	True				
ANR	556433	IdentifierDecl	sdata [ max_Sd_n ]		556255	0					
ANR	556434	IdentifierDeclType	uint [ max_Sd_n ]		556255	0					
ANR	556435	Identifier	sdata		556255	1					
ANR	556436	Identifier	max_Sd_n		556255	2					
ANR	556437	IdentifierDeclStatement	int bps = pfn -> params . BitsPerSample ;	493:12:16386:16421	556255	1	True				
ANR	556438	IdentifierDecl	bps = pfn -> params . BitsPerSample		556255	0					
ANR	556439	IdentifierDeclType	int		556255	0					
ANR	556440	Identifier	bps		556255	1					
ANR	556441	AssignmentExpression	bps = pfn -> params . BitsPerSample		556255	2		=			
ANR	556442	Identifier	bps		556255	0					
ANR	556443	MemberAccess	pfn -> params . BitsPerSample		556255	1					
ANR	556444	PtrMemberAccess	pfn -> params		556255	0					
ANR	556445	Identifier	pfn		556255	0					
ANR	556446	Identifier	params		556255	1					
ANR	556447	Identifier	BitsPerSample		556255	1					
ANR	556448	ExpressionStatement	p = & pfn -> params . pole [ i * pole_step ]	495:12:16436:16472	556255	2	True				
ANR	556449	AssignmentExpression	p = & pfn -> params . pole [ i * pole_step ]		556255	0		=			
ANR	556450	Identifier	p		556255	0					
ANR	556451	UnaryOperationExpression	& pfn -> params . pole [ i * pole_step ]		556255	1					
ANR	556452	UnaryOperator	&		556255	0					
ANR	556453	ArrayIndexing	pfn -> params . pole [ i * pole_step ]		556255	1					
ANR	556454	MemberAccess	pfn -> params . pole		556255	0					
ANR	556455	PtrMemberAccess	pfn -> params		556255	0					
ANR	556456	Identifier	pfn		556255	0					
ANR	556457	Identifier	params		556255	1					
ANR	556458	Identifier	pole		556255	1					
ANR	556459	MultiplicativeExpression	i * pole_step		556255	1		*			
ANR	556460	Identifier	i		556255	0					
ANR	556461	Identifier	pole_step		556255	1					
ANR	556462	ExpressionStatement	"fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , i * bps * pfn -> params . n , sdata )"	496:12:16486:16564	556255	3	True				
ANR	556463	CallExpression	"fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , i * bps * pfn -> params . n , sdata )"		556255	0					
ANR	556464	Callee	fn_get_samples [ pfn -> params . BitsPerSample ]		556255	0					
ANR	556465	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		556255	0					
ANR	556466	Identifier	fn_get_samples		556255	0					
ANR	556467	MemberAccess	pfn -> params . BitsPerSample		556255	1					
ANR	556468	PtrMemberAccess	pfn -> params		556255	0					
ANR	556469	Identifier	pfn		556255	0					
ANR	556470	Identifier	params		556255	1					
ANR	556471	Identifier	BitsPerSample		556255	1					
ANR	556472	ArgumentList	pfn		556255	1					
ANR	556473	Argument	pfn		556255	0					
ANR	556474	Identifier	pfn		556255	0					
ANR	556475	Argument	i * bps * pfn -> params . n		556255	1					
ANR	556476	MultiplicativeExpression	i * bps * pfn -> params . n		556255	0		*			
ANR	556477	Identifier	i		556255	0					
ANR	556478	MultiplicativeExpression	bps * pfn -> params . n		556255	1		*			
ANR	556479	Identifier	bps		556255	0					
ANR	556480	MemberAccess	pfn -> params . n		556255	1					
ANR	556481	PtrMemberAccess	pfn -> params		556255	0					
ANR	556482	Identifier	pfn		556255	0					
ANR	556483	Identifier	params		556255	1					
ANR	556484	Identifier	n		556255	1					
ANR	556485	Argument	sdata		556255	2					
ANR	556486	Identifier	sdata		556255	0					
ANR	556487	ForStatement	"for ( k = 0 ; k < pfn -> params . n ; k ++ , p ++ )"		556255	4					
ANR	556488	ForInit	k = 0 ;	497:17:16583:16588	556255	0	True				
ANR	556489	AssignmentExpression	k = 0		556255	0		=			
ANR	556490	Identifier	k		556255	0					
ANR	556491	PrimaryExpression	0		556255	1					
ANR	556492	Condition	k < pfn -> params . n	497:24:16590:16606	556255	1	True				
ANR	556493	RelationalExpression	k < pfn -> params . n		556255	0		<			
ANR	556494	Identifier	k		556255	0					
ANR	556495	MemberAccess	pfn -> params . n		556255	1					
ANR	556496	PtrMemberAccess	pfn -> params		556255	0					
ANR	556497	Identifier	pfn		556255	0					
ANR	556498	Identifier	params		556255	1					
ANR	556499	Identifier	n		556255	1					
ANR	556500	Expression	"k ++ , p ++"	497:43:16609:16616	556255	2	True				
ANR	556501	PostIncDecOperationExpression	k ++		556255	0					
ANR	556502	Identifier	k		556255	0					
ANR	556503	IncDec	++		556255	1					
ANR	556504	PostIncDecOperationExpression	p ++		556255	1					
ANR	556505	Identifier	p		556255	0					
ANR	556506	IncDec	++		556255	1					
ANR	556507	ExpressionStatement	"* p = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"	498:16:16635:16678	556255	3	True				
ANR	556508	AssignmentExpression	"* p = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		556255	0		=			
ANR	556509	UnaryOperationExpression	* p		556255	0					
ANR	556510	UnaryOperator	*		556255	0					
ANR	556511	Identifier	p		556255	1					
ANR	556512	CallExpression	"fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		556255	1					
ANR	556513	Callee	fn_Sd_encode		556255	0					
ANR	556514	Identifier	fn_Sd_encode		556255	0					
ANR	556515	ArgumentList	pfn		556255	1					
ANR	556516	Argument	pfn		556255	0					
ANR	556517	Identifier	pfn		556255	0					
ANR	556518	Argument	k		556255	1					
ANR	556519	Identifier	k		556255	0					
ANR	556520	Argument	( double ) sdata [ k ]		556255	2					
ANR	556521	CastExpression	( double ) sdata [ k ]		556255	0					
ANR	556522	CastTarget	double		556255	0					
ANR	556523	ArrayIndexing	sdata [ k ]		556255	1					
ANR	556524	Identifier	sdata		556255	0					
ANR	556525	Identifier	k		556255	1					
ANR	556526	ExpressionStatement	p = & pfn -> params . pole [ i0 * pole_step ]	501:4:16700:16737	556255	12	True				
ANR	556527	AssignmentExpression	p = & pfn -> params . pole [ i0 * pole_step ]		556255	0		=			
ANR	556528	Identifier	p		556255	0					
ANR	556529	UnaryOperationExpression	& pfn -> params . pole [ i0 * pole_step ]		556255	1					
ANR	556530	UnaryOperator	&		556255	0					
ANR	556531	ArrayIndexing	pfn -> params . pole [ i0 * pole_step ]		556255	1					
ANR	556532	MemberAccess	pfn -> params . pole		556255	0					
ANR	556533	PtrMemberAccess	pfn -> params		556255	0					
ANR	556534	Identifier	pfn		556255	0					
ANR	556535	Identifier	params		556255	1					
ANR	556536	Identifier	pole		556255	1					
ANR	556537	MultiplicativeExpression	i0 * pole_step		556255	1		*			
ANR	556538	Identifier	i0		556255	0					
ANR	556539	Identifier	pole_step		556255	1					
ANR	556540	ExpressionStatement	t0 = tt - i0	502:4:16743:16755	556255	13	True				
ANR	556541	AssignmentExpression	t0 = tt - i0		556255	0		=			
ANR	556542	Identifier	t0		556255	0					
ANR	556543	AdditiveExpression	tt - i0		556255	1		-			
ANR	556544	Identifier	tt		556255	0					
ANR	556545	Identifier	i0		556255	1					
ANR	556546	IfStatement	if ( t0 == 0 )		556255	14					
ANR	556547	Condition	t0 == 0	503:8:16765:16771	556255	0	True				
ANR	556548	EqualityExpression	t0 == 0		556255	0		==			
ANR	556549	Identifier	t0		556255	0					
ANR	556550	PrimaryExpression	0		556255	1					
ANR	556551	CompoundStatement		27:17:949:949	556255	1					
ANR	556552	ForStatement	"for ( k = 0 ; k < pfn -> params . n ; k ++ , p ++ )"		556255	0					
ANR	556553	ForInit	k = 0 ;	504:13:16789:16794	556255	0	True				
ANR	556554	AssignmentExpression	k = 0		556255	0		=			
ANR	556555	Identifier	k		556255	0					
ANR	556556	PrimaryExpression	0		556255	1					
ANR	556557	Condition	k < pfn -> params . n	504:20:16796:16812	556255	1	True				
ANR	556558	RelationalExpression	k < pfn -> params . n		556255	0		<			
ANR	556559	Identifier	k		556255	0					
ANR	556560	MemberAccess	pfn -> params . n		556255	1					
ANR	556561	PtrMemberAccess	pfn -> params		556255	0					
ANR	556562	Identifier	pfn		556255	0					
ANR	556563	Identifier	params		556255	1					
ANR	556564	Identifier	n		556255	1					
ANR	556565	Expression	"k ++ , p ++"	504:39:16815:16822	556255	2	True				
ANR	556566	PostIncDecOperationExpression	k ++		556255	0					
ANR	556567	Identifier	k		556255	0					
ANR	556568	IncDec	++		556255	1					
ANR	556569	PostIncDecOperationExpression	p ++		556255	1					
ANR	556570	Identifier	p		556255	0					
ANR	556571	IncDec	++		556255	1					
ANR	556572	ExpressionStatement	out [ k ] = * p	505:12:16837:16848	556255	3	True				
ANR	556573	AssignmentExpression	out [ k ] = * p		556255	0		=			
ANR	556574	ArrayIndexing	out [ k ]		556255	0					
ANR	556575	Identifier	out		556255	0					
ANR	556576	Identifier	k		556255	1					
ANR	556577	UnaryOperationExpression	* p		556255	1					
ANR	556578	UnaryOperator	*		556255	0					
ANR	556579	Identifier	p		556255	1					
ANR	556580	ElseStatement	else		556255	0					
ANR	556581	CompoundStatement		30:11:1036:1036	556255	0					
ANR	556582	IfStatement	if ( p [ 1 * pole_step_minor ] == double_stub )		556255	0					
ANR	556583	Condition	p [ 1 * pole_step_minor ] == double_stub	507:12:16875:16911	556255	0	True				
ANR	556584	EqualityExpression	p [ 1 * pole_step_minor ] == double_stub		556255	0		==			
ANR	556585	ArrayIndexing	p [ 1 * pole_step_minor ]		556255	0					
ANR	556586	Identifier	p		556255	0					
ANR	556587	MultiplicativeExpression	1 * pole_step_minor		556255	1		*			
ANR	556588	PrimaryExpression	1		556255	0					
ANR	556589	Identifier	pole_step_minor		556255	1					
ANR	556590	Identifier	double_stub		556255	1					
ANR	556591	CompoundStatement		31:51:1089:1089	556255	1					
ANR	556592	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		556255	0					
ANR	556593	ForInit	k = 0 ;	508:17:16933:16938	556255	0	True				
ANR	556594	AssignmentExpression	k = 0		556255	0		=			
ANR	556595	Identifier	k		556255	0					
ANR	556596	PrimaryExpression	0		556255	1					
ANR	556597	Condition	k < pfn -> params . n	508:24:16940:16956	556255	1	True				
ANR	556598	RelationalExpression	k < pfn -> params . n		556255	0		<			
ANR	556599	Identifier	k		556255	0					
ANR	556600	MemberAccess	pfn -> params . n		556255	1					
ANR	556601	PtrMemberAccess	pfn -> params		556255	0					
ANR	556602	Identifier	pfn		556255	0					
ANR	556603	Identifier	params		556255	1					
ANR	556604	Identifier	n		556255	1					
ANR	556605	PostIncDecOperationExpression	k ++	508:43:16959:16961	556255	2	True				
ANR	556606	Identifier	k		556255	0					
ANR	556607	IncDec	++		556255	1					
ANR	556608	ExpressionStatement	"fn_make_poles ( & pfn -> params . pole [ ib * pole_step + k ] , pole_step , ie - ib - 1 , i0 - ib )"	509:16:16980:17089	556255	3	True				
ANR	556609	CallExpression	"fn_make_poles ( & pfn -> params . pole [ ib * pole_step + k ] , pole_step , ie - ib - 1 , i0 - ib )"		556255	0					
ANR	556610	Callee	fn_make_poles		556255	0					
ANR	556611	Identifier	fn_make_poles		556255	0					
ANR	556612	ArgumentList	& pfn -> params . pole [ ib * pole_step + k ]		556255	1					
ANR	556613	Argument	& pfn -> params . pole [ ib * pole_step + k ]		556255	0					
ANR	556614	UnaryOperationExpression	& pfn -> params . pole [ ib * pole_step + k ]		556255	0					
ANR	556615	UnaryOperator	&		556255	0					
ANR	556616	ArrayIndexing	pfn -> params . pole [ ib * pole_step + k ]		556255	1					
ANR	556617	MemberAccess	pfn -> params . pole		556255	0					
ANR	556618	PtrMemberAccess	pfn -> params		556255	0					
ANR	556619	Identifier	pfn		556255	0					
ANR	556620	Identifier	params		556255	1					
ANR	556621	Identifier	pole		556255	1					
ANR	556622	AdditiveExpression	ib * pole_step + k		556255	1		+			
ANR	556623	MultiplicativeExpression	ib * pole_step		556255	0		*			
ANR	556624	Identifier	ib		556255	0					
ANR	556625	Identifier	pole_step		556255	1					
ANR	556626	Identifier	k		556255	1					
ANR	556627	Argument	pole_step		556255	1					
ANR	556628	Identifier	pole_step		556255	0					
ANR	556629	Argument	ie - ib - 1		556255	2					
ANR	556630	AdditiveExpression	ie - ib - 1		556255	0		-			
ANR	556631	Identifier	ie		556255	0					
ANR	556632	AdditiveExpression	ib - 1		556255	1		-			
ANR	556633	Identifier	ib		556255	0					
ANR	556634	PrimaryExpression	1		556255	1					
ANR	556635	Argument	i0 - ib		556255	3					
ANR	556636	AdditiveExpression	i0 - ib		556255	0		-			
ANR	556637	Identifier	i0		556255	0					
ANR	556638	Identifier	ib		556255	1					
ANR	556639	ExpressionStatement	t1 = 1 - t0	512:8:17109:17120	556255	1	True				
ANR	556640	AssignmentExpression	t1 = 1 - t0		556255	0		=			
ANR	556641	Identifier	t1		556255	0					
ANR	556642	AdditiveExpression	1 - t0		556255	1		-			
ANR	556643	PrimaryExpression	1		556255	0					
ANR	556644	Identifier	t0		556255	1					
ANR	556645	ForStatement	"for ( k = 0 ; k < pfn -> params . n ; k ++ , p ++ )"		556255	2					
ANR	556646	ForInit	k = 0 ;	513:13:17135:17140	556255	0	True				
ANR	556647	AssignmentExpression	k = 0		556255	0		=			
ANR	556648	Identifier	k		556255	0					
ANR	556649	PrimaryExpression	0		556255	1					
ANR	556650	Condition	k < pfn -> params . n	513:20:17142:17158	556255	1	True				
ANR	556651	RelationalExpression	k < pfn -> params . n		556255	0		<			
ANR	556652	Identifier	k		556255	0					
ANR	556653	MemberAccess	pfn -> params . n		556255	1					
ANR	556654	PtrMemberAccess	pfn -> params		556255	0					
ANR	556655	Identifier	pfn		556255	0					
ANR	556656	Identifier	params		556255	1					
ANR	556657	Identifier	n		556255	1					
ANR	556658	Expression	"k ++ , p ++"	513:39:17161:17168	556255	2	True				
ANR	556659	PostIncDecOperationExpression	k ++		556255	0					
ANR	556660	Identifier	k		556255	0					
ANR	556661	IncDec	++		556255	1					
ANR	556662	PostIncDecOperationExpression	p ++		556255	1					
ANR	556663	Identifier	p		556255	0					
ANR	556664	IncDec	++		556255	1					
ANR	556665	CompoundStatement		38:12:1360:1605	556255	3					
ANR	556666	IdentifierDeclStatement	double y = p [ 0 * pole_step_minor ] * t1 * t1 * t1 + p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0 ;	514:12:17185:17430	556255	0	True				
ANR	556667	IdentifierDecl	y = p [ 0 * pole_step_minor ] * t1 * t1 * t1 + p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		556255	0					
ANR	556668	IdentifierDeclType	double		556255	0					
ANR	556669	Identifier	y		556255	1					
ANR	556670	AssignmentExpression	y = p [ 0 * pole_step_minor ] * t1 * t1 * t1 + p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		556255	2		=			
ANR	556671	Identifier	y		556255	0					
ANR	556672	AdditiveExpression	p [ 0 * pole_step_minor ] * t1 * t1 * t1 + p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		556255	1		+			
ANR	556673	MultiplicativeExpression	p [ 0 * pole_step_minor ] * t1 * t1 * t1		556255	0		*			
ANR	556674	ArrayIndexing	p [ 0 * pole_step_minor ]		556255	0					
ANR	556675	Identifier	p		556255	0					
ANR	556676	MultiplicativeExpression	0 * pole_step_minor		556255	1		*			
ANR	556677	PrimaryExpression	0		556255	0					
ANR	556678	Identifier	pole_step_minor		556255	1					
ANR	556679	MultiplicativeExpression	t1 * t1 * t1		556255	1		*			
ANR	556680	Identifier	t1		556255	0					
ANR	556681	MultiplicativeExpression	t1 * t1		556255	1		*			
ANR	556682	Identifier	t1		556255	0					
ANR	556683	Identifier	t1		556255	1					
ANR	556684	AdditiveExpression	p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		556255	1		+			
ANR	556685	MultiplicativeExpression	p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3		556255	0		*			
ANR	556686	ArrayIndexing	p [ 1 * pole_step_minor ]		556255	0					
ANR	556687	Identifier	p		556255	0					
ANR	556688	MultiplicativeExpression	1 * pole_step_minor		556255	1		*			
ANR	556689	PrimaryExpression	1		556255	0					
ANR	556690	Identifier	pole_step_minor		556255	1					
ANR	556691	MultiplicativeExpression	t1 * t1 * t0 * 3		556255	1		*			
ANR	556692	Identifier	t1		556255	0					
ANR	556693	MultiplicativeExpression	t1 * t0 * 3		556255	1		*			
ANR	556694	Identifier	t1		556255	0					
ANR	556695	MultiplicativeExpression	t0 * 3		556255	1		*			
ANR	556696	Identifier	t0		556255	0					
ANR	556697	PrimaryExpression	3		556255	1					
ANR	556698	AdditiveExpression	p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		556255	1		+			
ANR	556699	MultiplicativeExpression	p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3		556255	0		*			
ANR	556700	ArrayIndexing	p [ 2 * pole_step_minor ]		556255	0					
ANR	556701	Identifier	p		556255	0					
ANR	556702	MultiplicativeExpression	2 * pole_step_minor		556255	1		*			
ANR	556703	PrimaryExpression	2		556255	0					
ANR	556704	Identifier	pole_step_minor		556255	1					
ANR	556705	MultiplicativeExpression	t1 * t0 * t0 * 3		556255	1		*			
ANR	556706	Identifier	t1		556255	0					
ANR	556707	MultiplicativeExpression	t0 * t0 * 3		556255	1		*			
ANR	556708	Identifier	t0		556255	0					
ANR	556709	MultiplicativeExpression	t0 * 3		556255	1		*			
ANR	556710	Identifier	t0		556255	0					
ANR	556711	PrimaryExpression	3		556255	1					
ANR	556712	MultiplicativeExpression	p [ 3 * pole_step_minor ] * t0 * t0 * t0		556255	1		*			
ANR	556713	ArrayIndexing	p [ 3 * pole_step_minor ]		556255	0					
ANR	556714	Identifier	p		556255	0					
ANR	556715	MultiplicativeExpression	3 * pole_step_minor		556255	1		*			
ANR	556716	PrimaryExpression	3		556255	0					
ANR	556717	Identifier	pole_step_minor		556255	1					
ANR	556718	MultiplicativeExpression	t0 * t0 * t0		556255	1		*			
ANR	556719	Identifier	t0		556255	0					
ANR	556720	MultiplicativeExpression	t0 * t0		556255	1		*			
ANR	556721	Identifier	t0		556255	0					
ANR	556722	Identifier	t0		556255	1					
ANR	556723	IfStatement	if ( y < pfn -> params . Range [ 0 ] )		556255	1					
ANR	556724	Condition	y < pfn -> params . Range [ 0 ]	518:16:17448:17471	556255	0	True				
ANR	556725	RelationalExpression	y < pfn -> params . Range [ 0 ]		556255	0		<			
ANR	556726	Identifier	y		556255	0					
ANR	556727	ArrayIndexing	pfn -> params . Range [ 0 ]		556255	1					
ANR	556728	MemberAccess	pfn -> params . Range		556255	0					
ANR	556729	PtrMemberAccess	pfn -> params		556255	0					
ANR	556730	Identifier	pfn		556255	0					
ANR	556731	Identifier	params		556255	1					
ANR	556732	Identifier	Range		556255	1					
ANR	556733	PrimaryExpression	0		556255	1					
ANR	556734	ExpressionStatement	y = pfn -> params . Range [ 0 ]	519:16:17490:17514	556255	1	True				
ANR	556735	AssignmentExpression	y = pfn -> params . Range [ 0 ]		556255	0		=			
ANR	556736	Identifier	y		556255	0					
ANR	556737	ArrayIndexing	pfn -> params . Range [ 0 ]		556255	1					
ANR	556738	MemberAccess	pfn -> params . Range		556255	0					
ANR	556739	PtrMemberAccess	pfn -> params		556255	0					
ANR	556740	Identifier	pfn		556255	0					
ANR	556741	Identifier	params		556255	1					
ANR	556742	Identifier	Range		556255	1					
ANR	556743	PrimaryExpression	0		556255	1					
ANR	556744	IfStatement	if ( y > pfn -> params . Range [ 1 ] )		556255	2					
ANR	556745	Condition	y > pfn -> params . Range [ 1 ]	520:16:17532:17555	556255	0	True				
ANR	556746	RelationalExpression	y > pfn -> params . Range [ 1 ]		556255	0		>			
ANR	556747	Identifier	y		556255	0					
ANR	556748	ArrayIndexing	pfn -> params . Range [ 1 ]		556255	1					
ANR	556749	MemberAccess	pfn -> params . Range		556255	0					
ANR	556750	PtrMemberAccess	pfn -> params		556255	0					
ANR	556751	Identifier	pfn		556255	0					
ANR	556752	Identifier	params		556255	1					
ANR	556753	Identifier	Range		556255	1					
ANR	556754	PrimaryExpression	1		556255	1					
ANR	556755	ExpressionStatement	y = pfn -> params . Range [ 1 ]	521:16:17574:17598	556255	1	True				
ANR	556756	AssignmentExpression	y = pfn -> params . Range [ 1 ]		556255	0		=			
ANR	556757	Identifier	y		556255	0					
ANR	556758	ArrayIndexing	pfn -> params . Range [ 1 ]		556255	1					
ANR	556759	MemberAccess	pfn -> params . Range		556255	0					
ANR	556760	PtrMemberAccess	pfn -> params		556255	0					
ANR	556761	Identifier	pfn		556255	0					
ANR	556762	Identifier	params		556255	1					
ANR	556763	Identifier	Range		556255	1					
ANR	556764	PrimaryExpression	1		556255	1					
ANR	556765	ExpressionStatement	out [ k ] = y	522:12:17612:17622	556255	3	True				
ANR	556766	AssignmentExpression	out [ k ] = y		556255	0		=			
ANR	556767	ArrayIndexing	out [ k ]		556255	0					
ANR	556768	Identifier	out		556255	0					
ANR	556769	Identifier	k		556255	1					
ANR	556770	Identifier	y		556255	1					
ANR	556771	ReturnStatement	return 0 ;	525:4:17644:17652	556255	15	True				
ANR	556772	PrimaryExpression	0		556255	0					
ANR	556773	ReturnType	static int		556255	1					
ANR	556774	Identifier	fn_Sd_evaluate_cubic_cached_1d		556255	2					
ANR	556775	ParameterList	"const gs_function_Sd_t * pfn , const float * in , float * out"		556255	3					
ANR	556776	Parameter	const gs_function_Sd_t * pfn	476:31:15766:15792	556255	0	True				
ANR	556777	ParameterType	const gs_function_Sd_t *		556255	0					
ANR	556778	Identifier	pfn		556255	1					
ANR	556779	Parameter	const float * in	476:60:15795:15809	556255	1	True				
ANR	556780	ParameterType	const float *		556255	0					
ANR	556781	Identifier	in		556255	1					
ANR	556782	Parameter	float * out	476:77:15812:15821	556255	2	True				
ANR	556783	ParameterType	float *		556255	0					
ANR	556784	Identifier	out		556255	1					
ANR	556785	CFGEntryNode	ENTRY		556255		True				
ANR	556786	CFGExitNode	EXIT		556255		True				
ANR	556787	Symbol	tt		556255						
ANR	556788	Symbol	pfn -> params . Range		556255						
ANR	556789	Symbol	pfn -> params . n		556255						
ANR	556790	Symbol	pfn -> params . Size		556255						
ANR	556791	Symbol	* sdata		556255						
ANR	556792	Symbol	* in		556255						
ANR	556793	Symbol	* * pfn		556255						
ANR	556794	Symbol	d0		556255						
ANR	556795	Symbol	* pole_step		556255						
ANR	556796	Symbol	d1		556255						
ANR	556797	Symbol	pole_step		556255						
ANR	556798	Symbol	out		556255						
ANR	556799	Symbol	double_stub		556255						
ANR	556800	Symbol	pfn -> params . pole		556255						
ANR	556801	Symbol	min		556255						
ANR	556802	Symbol	fn_Sd_encode		556255						
ANR	556803	Symbol	* pfn -> params . Range		556255						
ANR	556804	Symbol	ib		556255						
ANR	556805	Symbol	ie		556255						
ANR	556806	Symbol	floor		556255						
ANR	556807	Symbol	sdata		556255						
ANR	556808	Symbol	pfn -> params . BitsPerSample		556255						
ANR	556809	Symbol	* pfn		556255						
ANR	556810	Symbol	bps		556255						
ANR	556811	Symbol	in		556255						
ANR	556812	Symbol	max		556255						
ANR	556813	Symbol	i0		556255						
ANR	556814	Symbol	fn_get_samples		556255						
ANR	556815	Symbol	* pfn -> params . Size		556255						
ANR	556816	Symbol	pfn -> params . Domain		556255						
ANR	556817	Symbol	i		556255						
ANR	556818	Symbol	* pfn -> params . Domain		556255						
ANR	556819	Symbol	pole_step_minor		556255						
ANR	556820	Symbol	k		556255						
ANR	556821	Symbol	* pole_step_minor		556255						
ANR	556822	Symbol	p		556255						
ANR	556823	Symbol	* pfn -> params . pole		556255						
ANR	556824	Symbol	* i		556255						
ANR	556825	Symbol	* k		556255						
ANR	556826	Symbol	* out		556255						
ANR	556827	Symbol	pfn		556255						
ANR	556828	Symbol	y		556255						
ANR	556829	Symbol	* p		556255						
ANR	556830	Symbol	t0		556255						
ANR	556831	Symbol	pfn -> params		556255						
ANR	556832	Symbol	t1		556255						
ANR	556833	Symbol	* pfn -> params		556255						
ANR	556834	Function	decode_argument	528:0:17657:18184							
ANR	556835	FunctionDef	"decode_argument (const gs_function_Sd_t * pfn , const float * in , double T [ max_Sd_m ] , int I [ max_Sd_m ])"		556834	0					
ANR	556836	CompoundStatement		530:0:17775:18184	556834	0					
ANR	556837	IdentifierDeclStatement	int i ;	531:4:17781:17786	556834	0	True				
ANR	556838	IdentifierDecl	i		556834	0					
ANR	556839	IdentifierDeclType	int		556834	0					
ANR	556840	Identifier	i		556834	1					
ANR	556841	ForStatement	for ( i = 0 ; i < pfn -> params . m ; i ++ )		556834	1					
ANR	556842	ForInit	i = 0 ;	533:9:17798:17803	556834	0	True				
ANR	556843	AssignmentExpression	i = 0		556834	0		=			
ANR	556844	Identifier	i		556834	0					
ANR	556845	PrimaryExpression	0		556834	1					
ANR	556846	Condition	i < pfn -> params . m	533:16:17805:17821	556834	1	True				
ANR	556847	RelationalExpression	i < pfn -> params . m		556834	0		<			
ANR	556848	Identifier	i		556834	0					
ANR	556849	MemberAccess	pfn -> params . m		556834	1					
ANR	556850	PtrMemberAccess	pfn -> params		556834	0					
ANR	556851	Identifier	pfn		556834	0					
ANR	556852	Identifier	params		556834	1					
ANR	556853	Identifier	m		556834	1					
ANR	556854	PostIncDecOperationExpression	i ++	533:35:17824:17826	556834	2	True				
ANR	556855	Identifier	i		556834	0					
ANR	556856	IncDec	++		556834	1					
ANR	556857	CompoundStatement		8:8:189:197	556834	3					
ANR	556858	IdentifierDeclStatement	float xi = in [ i ] ;	534:8:17839:17855	556834	0	True				
ANR	556859	IdentifierDecl	xi = in [ i ]		556834	0					
ANR	556860	IdentifierDeclType	float		556834	0					
ANR	556861	Identifier	xi		556834	1					
ANR	556862	AssignmentExpression	xi = in [ i ]		556834	2		=			
ANR	556863	Identifier	xi		556834	0					
ANR	556864	ArrayIndexing	in [ i ]		556834	1					
ANR	556865	Identifier	in		556834	0					
ANR	556866	Identifier	i		556834	1					
ANR	556867	IdentifierDeclStatement	float d0 = pfn -> params . Domain [ 2 * i + 0 ] ;	535:8:17865:17905	556834	1	True				
ANR	556868	IdentifierDecl	d0 = pfn -> params . Domain [ 2 * i + 0 ]		556834	0					
ANR	556869	IdentifierDeclType	float		556834	0					
ANR	556870	Identifier	d0		556834	1					
ANR	556871	AssignmentExpression	d0 = pfn -> params . Domain [ 2 * i + 0 ]		556834	2		=			
ANR	556872	Identifier	d0		556834	0					
ANR	556873	ArrayIndexing	pfn -> params . Domain [ 2 * i + 0 ]		556834	1					
ANR	556874	MemberAccess	pfn -> params . Domain		556834	0					
ANR	556875	PtrMemberAccess	pfn -> params		556834	0					
ANR	556876	Identifier	pfn		556834	0					
ANR	556877	Identifier	params		556834	1					
ANR	556878	Identifier	Domain		556834	1					
ANR	556879	AdditiveExpression	2 * i + 0		556834	1		+			
ANR	556880	MultiplicativeExpression	2 * i		556834	0		*			
ANR	556881	PrimaryExpression	2		556834	0					
ANR	556882	Identifier	i		556834	1					
ANR	556883	PrimaryExpression	0		556834	1					
ANR	556884	IdentifierDeclStatement	float d1 = pfn -> params . Domain [ 2 * i + 1 ] ;	536:8:17915:17955	556834	2	True				
ANR	556885	IdentifierDecl	d1 = pfn -> params . Domain [ 2 * i + 1 ]		556834	0					
ANR	556886	IdentifierDeclType	float		556834	0					
ANR	556887	Identifier	d1		556834	1					
ANR	556888	AssignmentExpression	d1 = pfn -> params . Domain [ 2 * i + 1 ]		556834	2		=			
ANR	556889	Identifier	d1		556834	0					
ANR	556890	ArrayIndexing	pfn -> params . Domain [ 2 * i + 1 ]		556834	1					
ANR	556891	MemberAccess	pfn -> params . Domain		556834	0					
ANR	556892	PtrMemberAccess	pfn -> params		556834	0					
ANR	556893	Identifier	pfn		556834	0					
ANR	556894	Identifier	params		556834	1					
ANR	556895	Identifier	Domain		556834	1					
ANR	556896	AdditiveExpression	2 * i + 1		556834	1		+			
ANR	556897	MultiplicativeExpression	2 * i		556834	0		*			
ANR	556898	PrimaryExpression	2		556834	0					
ANR	556899	Identifier	i		556834	1					
ANR	556900	PrimaryExpression	1		556834	1					
ANR	556901	IdentifierDeclStatement	double t ;	537:8:17965:17973	556834	3	True				
ANR	556902	IdentifierDecl	t		556834	0					
ANR	556903	IdentifierDeclType	double		556834	0					
ANR	556904	Identifier	t		556834	1					
ANR	556905	IfStatement	if ( xi < d0 )		556834	4					
ANR	556906	Condition	xi < d0	539:12:17988:17994	556834	0	True				
ANR	556907	RelationalExpression	xi < d0		556834	0		<			
ANR	556908	Identifier	xi		556834	0					
ANR	556909	Identifier	d0		556834	1					
ANR	556910	ExpressionStatement	xi = d0	540:12:18009:18016	556834	1	True				
ANR	556911	AssignmentExpression	xi = d0		556834	0		=			
ANR	556912	Identifier	xi		556834	0					
ANR	556913	Identifier	d0		556834	1					
ANR	556914	IfStatement	if ( xi > d1 )		556834	5					
ANR	556915	Condition	xi > d1	541:12:18030:18036	556834	0	True				
ANR	556916	RelationalExpression	xi > d1		556834	0		>			
ANR	556917	Identifier	xi		556834	0					
ANR	556918	Identifier	d1		556834	1					
ANR	556919	ExpressionStatement	xi = d1	542:12:18051:18058	556834	1	True				
ANR	556920	AssignmentExpression	xi = d1		556834	0		=			
ANR	556921	Identifier	xi		556834	0					
ANR	556922	Identifier	d1		556834	1					
ANR	556923	ExpressionStatement	t = ( xi - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )	543:8:18068:18121	556834	6	True				
ANR	556924	AssignmentExpression	t = ( xi - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		556834	0		=			
ANR	556925	Identifier	t		556834	0					
ANR	556926	MultiplicativeExpression	( xi - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		556834	1		*			
ANR	556927	AdditiveExpression	xi - d0		556834	0		-			
ANR	556928	Identifier	xi		556834	0					
ANR	556929	Identifier	d0		556834	1					
ANR	556930	MultiplicativeExpression	( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		556834	1		/			
ANR	556931	AdditiveExpression	pfn -> params . Size [ i ] - 1		556834	0		-			
ANR	556932	ArrayIndexing	pfn -> params . Size [ i ]		556834	0					
ANR	556933	MemberAccess	pfn -> params . Size		556834	0					
ANR	556934	PtrMemberAccess	pfn -> params		556834	0					
ANR	556935	Identifier	pfn		556834	0					
ANR	556936	Identifier	params		556834	1					
ANR	556937	Identifier	Size		556834	1					
ANR	556938	Identifier	i		556834	1					
ANR	556939	PrimaryExpression	1		556834	1					
ANR	556940	AdditiveExpression	d1 - d0		556834	1		-			
ANR	556941	Identifier	d1		556834	0					
ANR	556942	Identifier	d0		556834	1					
ANR	556943	ExpressionStatement	I [ i ] = ( int ) floor ( t )	544:8:18131:18151	556834	7	True				
ANR	556944	AssignmentExpression	I [ i ] = ( int ) floor ( t )		556834	0		=			
ANR	556945	ArrayIndexing	I [ i ]		556834	0					
ANR	556946	Identifier	I		556834	0					
ANR	556947	Identifier	i		556834	1					
ANR	556948	CastExpression	( int ) floor ( t )		556834	1					
ANR	556949	CastTarget	int		556834	0					
ANR	556950	CallExpression	floor ( t )		556834	1					
ANR	556951	Callee	floor		556834	0					
ANR	556952	Identifier	floor		556834	0					
ANR	556953	ArgumentList	t		556834	1					
ANR	556954	Argument	t		556834	0					
ANR	556955	Identifier	t		556834	0					
ANR	556956	ExpressionStatement	T [ i ] = t - I [ i ]	545:8:18161:18176	556834	8	True				
ANR	556957	AssignmentExpression	T [ i ] = t - I [ i ]		556834	0		=			
ANR	556958	ArrayIndexing	T [ i ]		556834	0					
ANR	556959	Identifier	T		556834	0					
ANR	556960	Identifier	i		556834	1					
ANR	556961	AdditiveExpression	t - I [ i ]		556834	1		-			
ANR	556962	Identifier	t		556834	0					
ANR	556963	ArrayIndexing	I [ i ]		556834	1					
ANR	556964	Identifier	I		556834	0					
ANR	556965	Identifier	i		556834	1					
ANR	556966	ReturnType	static inline void		556834	1					
ANR	556967	Identifier	decode_argument		556834	2					
ANR	556968	ParameterList	"const gs_function_Sd_t * pfn , const float * in , double T [ max_Sd_m ] , int I [ max_Sd_m ]"		556834	3					
ANR	556969	Parameter	const gs_function_Sd_t * pfn	529:16:17692:17718	556834	0	True				
ANR	556970	ParameterType	const gs_function_Sd_t *		556834	0					
ANR	556971	Identifier	pfn		556834	1					
ANR	556972	Parameter	const float * in	529:45:17721:17735	556834	1	True				
ANR	556973	ParameterType	const float *		556834	0					
ANR	556974	Identifier	in		556834	1					
ANR	556975	Parameter	double T [ max_Sd_m ]	529:62:17738:17755	556834	2	True				
ANR	556976	ParameterType	double [ max_Sd_m ]		556834	0					
ANR	556977	Identifier	T		556834	1					
ANR	556978	Parameter	int I [ max_Sd_m ]	529:82:17758:17772	556834	3	True				
ANR	556979	ParameterType	int [ max_Sd_m ]		556834	0					
ANR	556980	Identifier	I		556834	1					
ANR	556981	CFGEntryNode	ENTRY		556834		True				
ANR	556982	CFGExitNode	EXIT		556834		True				
ANR	556983	Symbol	* pfn		556834						
ANR	556984	Symbol	pfn -> params . m		556834						
ANR	556985	Symbol	pfn -> params . Size		556834						
ANR	556986	Symbol	in		556834						
ANR	556987	Symbol	* in		556834						
ANR	556988	Symbol	* pfn -> params . Size		556834						
ANR	556989	Symbol	I		556834						
ANR	556990	Symbol	i		556834						
ANR	556991	Symbol	pfn -> params . Domain		556834						
ANR	556992	Symbol	* pfn -> params . Domain		556834						
ANR	556993	Symbol	d0		556834						
ANR	556994	Symbol	* * pfn		556834						
ANR	556995	Symbol	d1		556834						
ANR	556996	Symbol	xi		556834						
ANR	556997	Symbol	* i		556834						
ANR	556998	Symbol	* I		556834						
ANR	556999	Symbol	T		556834						
ANR	557000	Symbol	t		556834						
ANR	557001	Symbol	pfn		556834						
ANR	557002	Symbol	floor		556834						
ANR	557003	Symbol	pfn -> params		556834						
ANR	557004	Symbol	* pfn -> params		556834						
ANR	557005	Symbol	* T		556834						
ANR	557006	Function	index_span	549:0:18187:18483							
ANR	557007	FunctionDef	"index_span (const gs_function_Sd_t * pfn , int * I , double * T , int ii , int * Ii , int * ib , int * ie)"		557006	0					
ANR	557008	CompoundStatement		551:0:18300:18483	557006	0					
ANR	557009	ExpressionStatement	* Ii = I [ ii ]	552:4:18306:18317	557006	0	True				
ANR	557010	AssignmentExpression	* Ii = I [ ii ]		557006	0		=			
ANR	557011	UnaryOperationExpression	* Ii		557006	0					
ANR	557012	UnaryOperator	*		557006	0					
ANR	557013	Identifier	Ii		557006	1					
ANR	557014	ArrayIndexing	I [ ii ]		557006	1					
ANR	557015	Identifier	I		557006	0					
ANR	557016	Identifier	ii		557006	1					
ANR	557017	IfStatement	if ( T [ ii ] != 0 )		557006	1					
ANR	557018	Condition	T [ ii ] != 0	553:8:18327:18336	557006	0	True				
ANR	557019	EqualityExpression	T [ ii ] != 0		557006	0		!=			
ANR	557020	ArrayIndexing	T [ ii ]		557006	0					
ANR	557021	Identifier	T		557006	0					
ANR	557022	Identifier	ii		557006	1					
ANR	557023	PrimaryExpression	0		557006	1					
ANR	557024	CompoundStatement		3:20:38:38	557006	1					
ANR	557025	ExpressionStatement	"* ib = max ( * Ii - 1 , 0 )"	554:8:18349:18370	557006	0	True				
ANR	557026	AssignmentExpression	"* ib = max ( * Ii - 1 , 0 )"		557006	0		=			
ANR	557027	UnaryOperationExpression	* ib		557006	0					
ANR	557028	UnaryOperator	*		557006	0					
ANR	557029	Identifier	ib		557006	1					
ANR	557030	CallExpression	"max ( * Ii - 1 , 0 )"		557006	1					
ANR	557031	Callee	max		557006	0					
ANR	557032	Identifier	max		557006	0					
ANR	557033	ArgumentList	* Ii - 1		557006	1					
ANR	557034	Argument	* Ii - 1		557006	0					
ANR	557035	AdditiveExpression	* Ii - 1		557006	0		-			
ANR	557036	UnaryOperationExpression	* Ii		557006	0					
ANR	557037	UnaryOperator	*		557006	0					
ANR	557038	Identifier	Ii		557006	1					
ANR	557039	PrimaryExpression	1		557006	1					
ANR	557040	Argument	0		557006	1					
ANR	557041	PrimaryExpression	0		557006	0					
ANR	557042	ExpressionStatement	"* ie = min ( pfn -> params . Size [ ii ] , * Ii + 3 )"	555:8:18380:18420	557006	1	True				
ANR	557043	AssignmentExpression	"* ie = min ( pfn -> params . Size [ ii ] , * Ii + 3 )"		557006	0		=			
ANR	557044	UnaryOperationExpression	* ie		557006	0					
ANR	557045	UnaryOperator	*		557006	0					
ANR	557046	Identifier	ie		557006	1					
ANR	557047	CallExpression	"min ( pfn -> params . Size [ ii ] , * Ii + 3 )"		557006	1					
ANR	557048	Callee	min		557006	0					
ANR	557049	Identifier	min		557006	0					
ANR	557050	ArgumentList	pfn -> params . Size [ ii ]		557006	1					
ANR	557051	Argument	pfn -> params . Size [ ii ]		557006	0					
ANR	557052	ArrayIndexing	pfn -> params . Size [ ii ]		557006	0					
ANR	557053	MemberAccess	pfn -> params . Size		557006	0					
ANR	557054	PtrMemberAccess	pfn -> params		557006	0					
ANR	557055	Identifier	pfn		557006	0					
ANR	557056	Identifier	params		557006	1					
ANR	557057	Identifier	Size		557006	1					
ANR	557058	Identifier	ii		557006	1					
ANR	557059	Argument	* Ii + 3		557006	1					
ANR	557060	AdditiveExpression	* Ii + 3		557006	0		+			
ANR	557061	UnaryOperationExpression	* Ii		557006	0					
ANR	557062	UnaryOperator	*		557006	0					
ANR	557063	Identifier	Ii		557006	1					
ANR	557064	PrimaryExpression	3		557006	1					
ANR	557065	ElseStatement	else		557006	0					
ANR	557066	CompoundStatement		6:11:132:132	557006	0					
ANR	557067	ExpressionStatement	* ib = * Ii	557:8:18443:18452	557006	0	True				
ANR	557068	AssignmentExpression	* ib = * Ii		557006	0		=			
ANR	557069	UnaryOperationExpression	* ib		557006	0					
ANR	557070	UnaryOperator	*		557006	0					
ANR	557071	Identifier	ib		557006	1					
ANR	557072	UnaryOperationExpression	* Ii		557006	1					
ANR	557073	UnaryOperator	*		557006	0					
ANR	557074	Identifier	Ii		557006	1					
ANR	557075	ExpressionStatement	* ie = * Ii + 1	558:8:18462:18475	557006	1	True				
ANR	557076	AssignmentExpression	* ie = * Ii + 1		557006	0		=			
ANR	557077	UnaryOperationExpression	* ie		557006	0					
ANR	557078	UnaryOperator	*		557006	0					
ANR	557079	Identifier	ie		557006	1					
ANR	557080	AdditiveExpression	* Ii + 1		557006	1		+			
ANR	557081	UnaryOperationExpression	* Ii		557006	0					
ANR	557082	UnaryOperator	*		557006	0					
ANR	557083	Identifier	Ii		557006	1					
ANR	557084	PrimaryExpression	1		557006	1					
ANR	557085	ReturnType	static inline void		557006	1					
ANR	557086	Identifier	index_span		557006	2					
ANR	557087	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int ii , int * Ii , int * ib , int * ie"		557006	3					
ANR	557088	Parameter	const gs_function_Sd_t * pfn	550:11:18217:18243	557006	0	True				
ANR	557089	ParameterType	const gs_function_Sd_t *		557006	0					
ANR	557090	Identifier	pfn		557006	1					
ANR	557091	Parameter	int * I	550:40:18246:18251	557006	1	True				
ANR	557092	ParameterType	int *		557006	0					
ANR	557093	Identifier	I		557006	1					
ANR	557094	Parameter	double * T	550:48:18254:18262	557006	2	True				
ANR	557095	ParameterType	double *		557006	0					
ANR	557096	Identifier	T		557006	1					
ANR	557097	Parameter	int ii	550:59:18265:18270	557006	3	True				
ANR	557098	ParameterType	int		557006	0					
ANR	557099	Identifier	ii		557006	1					
ANR	557100	Parameter	int * Ii	550:67:18273:18279	557006	4	True				
ANR	557101	ParameterType	int *		557006	0					
ANR	557102	Identifier	Ii		557006	1					
ANR	557103	Parameter	int * ib	550:76:18282:18288	557006	5	True				
ANR	557104	ParameterType	int *		557006	0					
ANR	557105	Identifier	ib		557006	1					
ANR	557106	Parameter	int * ie	550:85:18291:18297	557006	6	True				
ANR	557107	ParameterType	int *		557006	0					
ANR	557108	Identifier	ie		557006	1					
ANR	557109	CFGEntryNode	ENTRY		557006		True				
ANR	557110	CFGExitNode	EXIT		557006		True				
ANR	557111	Symbol	ii		557006						
ANR	557112	Symbol	Ii		557006						
ANR	557113	Symbol	* ie		557006						
ANR	557114	Symbol	* pfn		557006						
ANR	557115	Symbol	pfn -> params . Size		557006						
ANR	557116	Symbol	* ii		557006						
ANR	557117	Symbol	* Ii		557006						
ANR	557118	Symbol	max		557006						
ANR	557119	Symbol	* pfn -> params . Size		557006						
ANR	557120	Symbol	I		557006						
ANR	557121	Symbol	* * pfn		557006						
ANR	557122	Symbol	* I		557006						
ANR	557123	Symbol	min		557006						
ANR	557124	Symbol	T		557006						
ANR	557125	Symbol	pfn		557006						
ANR	557126	Symbol	ib		557006						
ANR	557127	Symbol	ie		557006						
ANR	557128	Symbol	* ib		557006						
ANR	557129	Symbol	pfn -> params		557006						
ANR	557130	Symbol	* T		557006						
ANR	557131	Symbol	* pfn -> params		557006						
ANR	557132	Function	load_vector_to	562:0:18486:18843							
ANR	557133	FunctionDef	"load_vector_to (const gs_function_Sd_t * pfn , int s_offset , double * V)"		557132	0					
ANR	557134	CompoundStatement		564:0:18573:18843	557132	0					
ANR	557135	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	565:4:18579:18599	557132	0	True				
ANR	557136	IdentifierDecl	sdata [ max_Sd_n ]		557132	0					
ANR	557137	IdentifierDeclType	uint [ max_Sd_n ]		557132	0					
ANR	557138	Identifier	sdata		557132	1					
ANR	557139	Identifier	max_Sd_n		557132	2					
ANR	557140	IdentifierDeclStatement	"int k , code ;"	566:4:18605:18616	557132	1	True				
ANR	557141	IdentifierDecl	k		557132	0					
ANR	557142	IdentifierDeclType	int		557132	0					
ANR	557143	Identifier	k		557132	1					
ANR	557144	IdentifierDecl	code		557132	1					
ANR	557145	IdentifierDeclType	int		557132	0					
ANR	557146	Identifier	code		557132	1					
ANR	557147	ExpressionStatement	"code = fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"	568:4:18623:18693	557132	2	True				
ANR	557148	AssignmentExpression	"code = fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"		557132	0		=			
ANR	557149	Identifier	code		557132	0					
ANR	557150	CallExpression	"fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"		557132	1					
ANR	557151	Callee	fn_get_samples [ pfn -> params . BitsPerSample ]		557132	0					
ANR	557152	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		557132	0					
ANR	557153	Identifier	fn_get_samples		557132	0					
ANR	557154	MemberAccess	pfn -> params . BitsPerSample		557132	1					
ANR	557155	PtrMemberAccess	pfn -> params		557132	0					
ANR	557156	Identifier	pfn		557132	0					
ANR	557157	Identifier	params		557132	1					
ANR	557158	Identifier	BitsPerSample		557132	1					
ANR	557159	ArgumentList	pfn		557132	1					
ANR	557160	Argument	pfn		557132	0					
ANR	557161	Identifier	pfn		557132	0					
ANR	557162	Argument	s_offset		557132	1					
ANR	557163	Identifier	s_offset		557132	0					
ANR	557164	Argument	sdata		557132	2					
ANR	557165	Identifier	sdata		557132	0					
ANR	557166	IfStatement	if ( code < 0 )		557132	3					
ANR	557167	Condition	code < 0	569:8:18703:18710	557132	0	True				
ANR	557168	RelationalExpression	code < 0		557132	0		<			
ANR	557169	Identifier	code		557132	0					
ANR	557170	PrimaryExpression	0		557132	1					
ANR	557171	ReturnStatement	return code ;	570:8:18721:18732	557132	1	True				
ANR	557172	Identifier	code		557132	0					
ANR	557173	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		557132	4					
ANR	557174	ForInit	k = 0 ;	571:9:18743:18748	557132	0	True				
ANR	557175	AssignmentExpression	k = 0		557132	0		=			
ANR	557176	Identifier	k		557132	0					
ANR	557177	PrimaryExpression	0		557132	1					
ANR	557178	Condition	k < pfn -> params . n	571:16:18750:18766	557132	1	True				
ANR	557179	RelationalExpression	k < pfn -> params . n		557132	0		<			
ANR	557180	Identifier	k		557132	0					
ANR	557181	MemberAccess	pfn -> params . n		557132	1					
ANR	557182	PtrMemberAccess	pfn -> params		557132	0					
ANR	557183	Identifier	pfn		557132	0					
ANR	557184	Identifier	params		557132	1					
ANR	557185	Identifier	n		557132	1					
ANR	557186	PostIncDecOperationExpression	k ++	571:35:18769:18771	557132	2	True				
ANR	557187	Identifier	k		557132	0					
ANR	557188	IncDec	++		557132	1					
ANR	557189	ExpressionStatement	"V [ k ] = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"	572:8:18782:18827	557132	3	True				
ANR	557190	AssignmentExpression	"V [ k ] = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		557132	0		=			
ANR	557191	ArrayIndexing	V [ k ]		557132	0					
ANR	557192	Identifier	V		557132	0					
ANR	557193	Identifier	k		557132	1					
ANR	557194	CallExpression	"fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		557132	1					
ANR	557195	Callee	fn_Sd_encode		557132	0					
ANR	557196	Identifier	fn_Sd_encode		557132	0					
ANR	557197	ArgumentList	pfn		557132	1					
ANR	557198	Argument	pfn		557132	0					
ANR	557199	Identifier	pfn		557132	0					
ANR	557200	Argument	k		557132	1					
ANR	557201	Identifier	k		557132	0					
ANR	557202	Argument	( double ) sdata [ k ]		557132	2					
ANR	557203	CastExpression	( double ) sdata [ k ]		557132	0					
ANR	557204	CastTarget	double		557132	0					
ANR	557205	ArrayIndexing	sdata [ k ]		557132	1					
ANR	557206	Identifier	sdata		557132	0					
ANR	557207	Identifier	k		557132	1					
ANR	557208	ReturnStatement	return 0 ;	573:4:18833:18841	557132	5	True				
ANR	557209	PrimaryExpression	0		557132	0					
ANR	557210	ReturnType	static inline int		557132	1					
ANR	557211	Identifier	load_vector_to		557132	2					
ANR	557212	ParameterList	"const gs_function_Sd_t * pfn , int s_offset , double * V"		557132	3					
ANR	557213	Parameter	const gs_function_Sd_t * pfn	563:15:18519:18545	557132	0	True				
ANR	557214	ParameterType	const gs_function_Sd_t *		557132	0					
ANR	557215	Identifier	pfn		557132	1					
ANR	557216	Parameter	int s_offset	563:44:18548:18559	557132	1	True				
ANR	557217	ParameterType	int		557132	0					
ANR	557218	Identifier	s_offset		557132	1					
ANR	557219	Parameter	double * V	563:58:18562:18570	557132	2	True				
ANR	557220	ParameterType	double *		557132	0					
ANR	557221	Identifier	V		557132	1					
ANR	557222	CFGEntryNode	ENTRY		557132		True				
ANR	557223	CFGExitNode	EXIT		557132		True				
ANR	557224	Symbol	* V		557132						
ANR	557225	Symbol	* pfn		557132						
ANR	557226	Symbol	code		557132						
ANR	557227	Symbol	pfn -> params . n		557132						
ANR	557228	Symbol	* sdata		557132						
ANR	557229	Symbol	fn_get_samples		557132						
ANR	557230	Symbol	k		557132						
ANR	557231	Symbol	* * pfn		557132						
ANR	557232	Symbol	* pfn -> params . BitsPerSample		557132						
ANR	557233	Symbol	s_offset		557132						
ANR	557234	Symbol	fn_Sd_encode		557132						
ANR	557235	Symbol	* k		557132						
ANR	557236	Symbol	V		557132						
ANR	557237	Symbol	* fn_get_samples		557132						
ANR	557238	Symbol	pfn		557132						
ANR	557239	Symbol	pfn -> params		557132						
ANR	557240	Symbol	sdata		557132						
ANR	557241	Symbol	* pfn -> params		557132						
ANR	557242	Symbol	pfn -> params . BitsPerSample		557132						
ANR	557243	Function	load_vector	576:0:18846:19324							
ANR	557244	FunctionDef	"load_vector (const gs_function_Sd_t * pfn , int a_offset , int s_offset)"		557243	0					
ANR	557245	CompoundStatement		578:0:18933:19324	557243	0					
ANR	557246	IfStatement	if ( * ( pfn -> params . pole + a_offset ) == double_stub )		557243	0					
ANR	557247	Condition	* ( pfn -> params . pole + a_offset ) == double_stub	579:8:18943:18987	557243	0	True				
ANR	557248	EqualityExpression	* ( pfn -> params . pole + a_offset ) == double_stub		557243	0		==			
ANR	557249	UnaryOperationExpression	* ( pfn -> params . pole + a_offset )		557243	0					
ANR	557250	UnaryOperator	*		557243	0					
ANR	557251	AdditiveExpression	pfn -> params . pole + a_offset		557243	1		+			
ANR	557252	MemberAccess	pfn -> params . pole		557243	0					
ANR	557253	PtrMemberAccess	pfn -> params		557243	0					
ANR	557254	Identifier	pfn		557243	0					
ANR	557255	Identifier	params		557243	1					
ANR	557256	Identifier	pole		557243	1					
ANR	557257	Identifier	a_offset		557243	1					
ANR	557258	Identifier	double_stub		557243	1					
ANR	557259	CompoundStatement		4:8:96:107	557243	1					
ANR	557260	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	580:8:19000:19020	557243	0	True				
ANR	557261	IdentifierDecl	sdata [ max_Sd_n ]		557243	0					
ANR	557262	IdentifierDeclType	uint [ max_Sd_n ]		557243	0					
ANR	557263	Identifier	sdata		557243	1					
ANR	557264	Identifier	max_Sd_n		557243	2					
ANR	557265	IdentifierDeclStatement	"int k , code ;"	581:8:19030:19041	557243	1	True				
ANR	557266	IdentifierDecl	k		557243	0					
ANR	557267	IdentifierDeclType	int		557243	0					
ANR	557268	Identifier	k		557243	1					
ANR	557269	IdentifierDecl	code		557243	1					
ANR	557270	IdentifierDeclType	int		557243	0					
ANR	557271	Identifier	code		557243	1					
ANR	557272	ExpressionStatement	"code = fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"	583:8:19052:19122	557243	2	True				
ANR	557273	AssignmentExpression	"code = fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"		557243	0		=			
ANR	557274	Identifier	code		557243	0					
ANR	557275	CallExpression	"fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"		557243	1					
ANR	557276	Callee	fn_get_samples [ pfn -> params . BitsPerSample ]		557243	0					
ANR	557277	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		557243	0					
ANR	557278	Identifier	fn_get_samples		557243	0					
ANR	557279	MemberAccess	pfn -> params . BitsPerSample		557243	1					
ANR	557280	PtrMemberAccess	pfn -> params		557243	0					
ANR	557281	Identifier	pfn		557243	0					
ANR	557282	Identifier	params		557243	1					
ANR	557283	Identifier	BitsPerSample		557243	1					
ANR	557284	ArgumentList	pfn		557243	1					
ANR	557285	Argument	pfn		557243	0					
ANR	557286	Identifier	pfn		557243	0					
ANR	557287	Argument	s_offset		557243	1					
ANR	557288	Identifier	s_offset		557243	0					
ANR	557289	Argument	sdata		557243	2					
ANR	557290	Identifier	sdata		557243	0					
ANR	557291	IfStatement	if ( code < 0 )		557243	3					
ANR	557292	Condition	code < 0	584:12:19136:19143	557243	0	True				
ANR	557293	RelationalExpression	code < 0		557243	0		<			
ANR	557294	Identifier	code		557243	0					
ANR	557295	PrimaryExpression	0		557243	1					
ANR	557296	ReturnStatement	return code ;	585:12:19158:19169	557243	1	True				
ANR	557297	Identifier	code		557243	0					
ANR	557298	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		557243	4					
ANR	557299	ForInit	k = 0 ;	586:13:19184:19189	557243	0	True				
ANR	557300	AssignmentExpression	k = 0		557243	0		=			
ANR	557301	Identifier	k		557243	0					
ANR	557302	PrimaryExpression	0		557243	1					
ANR	557303	Condition	k < pfn -> params . n	586:20:19191:19207	557243	1	True				
ANR	557304	RelationalExpression	k < pfn -> params . n		557243	0		<			
ANR	557305	Identifier	k		557243	0					
ANR	557306	MemberAccess	pfn -> params . n		557243	1					
ANR	557307	PtrMemberAccess	pfn -> params		557243	0					
ANR	557308	Identifier	pfn		557243	0					
ANR	557309	Identifier	params		557243	1					
ANR	557310	Identifier	n		557243	1					
ANR	557311	PostIncDecOperationExpression	k ++	586:39:19210:19212	557243	2	True				
ANR	557312	Identifier	k		557243	0					
ANR	557313	IncDec	++		557243	1					
ANR	557314	ExpressionStatement	"* ( pfn -> params . pole + a_offset + k ) = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"	587:12:19227:19302	557243	3	True				
ANR	557315	AssignmentExpression	"* ( pfn -> params . pole + a_offset + k ) = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		557243	0		=			
ANR	557316	UnaryOperationExpression	* ( pfn -> params . pole + a_offset + k )		557243	0					
ANR	557317	UnaryOperator	*		557243	0					
ANR	557318	AdditiveExpression	pfn -> params . pole + a_offset + k		557243	1		+			
ANR	557319	MemberAccess	pfn -> params . pole		557243	0					
ANR	557320	PtrMemberAccess	pfn -> params		557243	0					
ANR	557321	Identifier	pfn		557243	0					
ANR	557322	Identifier	params		557243	1					
ANR	557323	Identifier	pole		557243	1					
ANR	557324	AdditiveExpression	a_offset + k		557243	1		+			
ANR	557325	Identifier	a_offset		557243	0					
ANR	557326	Identifier	k		557243	1					
ANR	557327	CallExpression	"fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		557243	1					
ANR	557328	Callee	fn_Sd_encode		557243	0					
ANR	557329	Identifier	fn_Sd_encode		557243	0					
ANR	557330	ArgumentList	pfn		557243	1					
ANR	557331	Argument	pfn		557243	0					
ANR	557332	Identifier	pfn		557243	0					
ANR	557333	Argument	k		557243	1					
ANR	557334	Identifier	k		557243	0					
ANR	557335	Argument	( double ) sdata [ k ]		557243	2					
ANR	557336	CastExpression	( double ) sdata [ k ]		557243	0					
ANR	557337	CastTarget	double		557243	0					
ANR	557338	ArrayIndexing	sdata [ k ]		557243	1					
ANR	557339	Identifier	sdata		557243	0					
ANR	557340	Identifier	k		557243	1					
ANR	557341	ReturnStatement	return 0 ;	589:4:19314:19322	557243	1	True				
ANR	557342	PrimaryExpression	0		557243	0					
ANR	557343	ReturnType	static inline int		557243	1					
ANR	557344	Identifier	load_vector		557243	2					
ANR	557345	ParameterList	"const gs_function_Sd_t * pfn , int a_offset , int s_offset"		557243	3					
ANR	557346	Parameter	const gs_function_Sd_t * pfn	577:12:18876:18902	557243	0	True				
ANR	557347	ParameterType	const gs_function_Sd_t *		557243	0					
ANR	557348	Identifier	pfn		557243	1					
ANR	557349	Parameter	int a_offset	577:41:18905:18916	557243	1	True				
ANR	557350	ParameterType	int		557243	0					
ANR	557351	Identifier	a_offset		557243	1					
ANR	557352	Parameter	int s_offset	577:55:18919:18930	557243	2	True				
ANR	557353	ParameterType	int		557243	0					
ANR	557354	Identifier	s_offset		557243	1					
ANR	557355	CFGEntryNode	ENTRY		557243		True				
ANR	557356	CFGExitNode	EXIT		557243		True				
ANR	557357	Symbol	* pfn		557243						
ANR	557358	Symbol	code		557243						
ANR	557359	Symbol	pfn -> params . n		557243						
ANR	557360	Symbol	* sdata		557243						
ANR	557361	Symbol	fn_get_samples		557243						
ANR	557362	Symbol	a_offset		557243						
ANR	557363	Symbol	k		557243						
ANR	557364	Symbol	* * pfn		557243						
ANR	557365	Symbol	* pfn -> params . BitsPerSample		557243						
ANR	557366	Symbol	pfn -> params . pole		557243						
ANR	557367	Symbol	double_stub		557243						
ANR	557368	Symbol	s_offset		557243						
ANR	557369	Symbol	* pfn -> params . pole		557243						
ANR	557370	Symbol	* ( pfn -> params . pole + a_offset + k )		557243						
ANR	557371	Symbol	* a_offset		557243						
ANR	557372	Symbol	fn_Sd_encode		557243						
ANR	557373	Symbol	* k		557243						
ANR	557374	Symbol	* fn_get_samples		557243						
ANR	557375	Symbol	pfn		557243						
ANR	557376	Symbol	* ( pfn -> params . pole + a_offset )		557243						
ANR	557377	Symbol	pfn -> params		557243						
ANR	557378	Symbol	* pfn -> params		557243						
ANR	557379	Symbol	sdata		557243						
ANR	557380	Symbol	pfn -> params . BitsPerSample		557243						
ANR	557381	Function	interpolate_vector	592:0:19327:19574							
ANR	557382	FunctionDef	"interpolate_vector (const gs_function_Sd_t * pfn , int offset , int pole_step , int power , int bias)"		557381	0					
ANR	557383	CompoundStatement		594:0:19442:19574	557381	0					
ANR	557384	IdentifierDeclStatement	int k ;	595:4:19448:19453	557381	0	True				
ANR	557385	IdentifierDecl	k		557381	0					
ANR	557386	IdentifierDeclType	int		557381	0					
ANR	557387	Identifier	k		557381	1					
ANR	557388	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		557381	1					
ANR	557389	ForInit	k = 0 ;	597:9:19465:19470	557381	0	True				
ANR	557390	AssignmentExpression	k = 0		557381	0		=			
ANR	557391	Identifier	k		557381	0					
ANR	557392	PrimaryExpression	0		557381	1					
ANR	557393	Condition	k < pfn -> params . n	597:16:19472:19488	557381	1	True				
ANR	557394	RelationalExpression	k < pfn -> params . n		557381	0		<			
ANR	557395	Identifier	k		557381	0					
ANR	557396	MemberAccess	pfn -> params . n		557381	1					
ANR	557397	PtrMemberAccess	pfn -> params		557381	0					
ANR	557398	Identifier	pfn		557381	0					
ANR	557399	Identifier	params		557381	1					
ANR	557400	Identifier	n		557381	1					
ANR	557401	PostIncDecOperationExpression	k ++	597:35:19491:19493	557381	2	True				
ANR	557402	Identifier	k		557381	0					
ANR	557403	IncDec	++		557381	1					
ANR	557404	ExpressionStatement	"fn_make_poles ( pfn -> params . pole + offset + k , pole_step , power , bias )"	598:8:19504:19572	557381	3	True				
ANR	557405	CallExpression	"fn_make_poles ( pfn -> params . pole + offset + k , pole_step , power , bias )"		557381	0					
ANR	557406	Callee	fn_make_poles		557381	0					
ANR	557407	Identifier	fn_make_poles		557381	0					
ANR	557408	ArgumentList	pfn -> params . pole + offset + k		557381	1					
ANR	557409	Argument	pfn -> params . pole + offset + k		557381	0					
ANR	557410	AdditiveExpression	pfn -> params . pole + offset + k		557381	0		+			
ANR	557411	MemberAccess	pfn -> params . pole		557381	0					
ANR	557412	PtrMemberAccess	pfn -> params		557381	0					
ANR	557413	Identifier	pfn		557381	0					
ANR	557414	Identifier	params		557381	1					
ANR	557415	Identifier	pole		557381	1					
ANR	557416	AdditiveExpression	offset + k		557381	1		+			
ANR	557417	Identifier	offset		557381	0					
ANR	557418	Identifier	k		557381	1					
ANR	557419	Argument	pole_step		557381	1					
ANR	557420	Identifier	pole_step		557381	0					
ANR	557421	Argument	power		557381	2					
ANR	557422	Identifier	power		557381	0					
ANR	557423	Argument	bias		557381	3					
ANR	557424	Identifier	bias		557381	0					
ANR	557425	ReturnType	static inline void		557381	1					
ANR	557426	Identifier	interpolate_vector		557381	2					
ANR	557427	ParameterList	"const gs_function_Sd_t * pfn , int offset , int pole_step , int power , int bias"		557381	3					
ANR	557428	Parameter	const gs_function_Sd_t * pfn	593:19:19365:19391	557381	0	True				
ANR	557429	ParameterType	const gs_function_Sd_t *		557381	0					
ANR	557430	Identifier	pfn		557381	1					
ANR	557431	Parameter	int offset	593:48:19394:19403	557381	1	True				
ANR	557432	ParameterType	int		557381	0					
ANR	557433	Identifier	offset		557381	1					
ANR	557434	Parameter	int pole_step	593:60:19406:19418	557381	2	True				
ANR	557435	ParameterType	int		557381	0					
ANR	557436	Identifier	pole_step		557381	1					
ANR	557437	Parameter	int power	593:75:19421:19429	557381	3	True				
ANR	557438	ParameterType	int		557381	0					
ANR	557439	Identifier	power		557381	1					
ANR	557440	Parameter	int bias	593:86:19432:19439	557381	4	True				
ANR	557441	ParameterType	int		557381	0					
ANR	557442	Identifier	bias		557381	1					
ANR	557443	CFGEntryNode	ENTRY		557381		True				
ANR	557444	CFGExitNode	EXIT		557381		True				
ANR	557445	Symbol	* pfn		557381						
ANR	557446	Symbol	pfn -> params . n		557381						
ANR	557447	Symbol	offset		557381						
ANR	557448	Symbol	bias		557381						
ANR	557449	Symbol	pfn		557381						
ANR	557450	Symbol	power		557381						
ANR	557451	Symbol	k		557381						
ANR	557452	Symbol	pole_step		557381						
ANR	557453	Symbol	pfn -> params		557381						
ANR	557454	Symbol	pfn -> params . pole		557381						
ANR	557455	Function	interpolate_tensors	601:0:19577:20208							
ANR	557456	FunctionDef	"interpolate_tensors (const gs_function_Sd_t * pfn , int * I , double * T , int offset , int pole_step , int power , int bias , int ii)"		557455	0					
ANR	557457	CompoundStatement		604:0:19728:20208	557455	0					
ANR	557458	IfStatement	if ( ii < 0 )		557455	0					
ANR	557459	Condition	ii < 0	605:8:19738:19743	557455	0	True				
ANR	557460	RelationalExpression	ii < 0		557455	0		<			
ANR	557461	Identifier	ii		557455	0					
ANR	557462	PrimaryExpression	0		557455	1					
ANR	557463	ExpressionStatement	"interpolate_vector ( pfn , offset , pole_step , power , bias )"	606:8:19754:19809	557455	1	True				
ANR	557464	CallExpression	"interpolate_vector ( pfn , offset , pole_step , power , bias )"		557455	0					
ANR	557465	Callee	interpolate_vector		557455	0					
ANR	557466	Identifier	interpolate_vector		557455	0					
ANR	557467	ArgumentList	pfn		557455	1					
ANR	557468	Argument	pfn		557455	0					
ANR	557469	Identifier	pfn		557455	0					
ANR	557470	Argument	offset		557455	1					
ANR	557471	Identifier	offset		557455	0					
ANR	557472	Argument	pole_step		557455	2					
ANR	557473	Identifier	pole_step		557455	0					
ANR	557474	Argument	power		557455	3					
ANR	557475	Identifier	power		557455	0					
ANR	557476	Argument	bias		557455	4					
ANR	557477	Identifier	bias		557455	0					
ANR	557478	ElseStatement	else		557455	0					
ANR	557479	CompoundStatement		6:8:145:159	557455	0					
ANR	557480	IdentifierDeclStatement	int s = pfn -> params . array_step [ ii ] ;	608:8:19830:19864	557455	0	True				
ANR	557481	IdentifierDecl	s = pfn -> params . array_step [ ii ]		557455	0					
ANR	557482	IdentifierDeclType	int		557455	0					
ANR	557483	Identifier	s		557455	1					
ANR	557484	AssignmentExpression	s = pfn -> params . array_step [ ii ]		557455	2		=			
ANR	557485	Identifier	s		557455	0					
ANR	557486	ArrayIndexing	pfn -> params . array_step [ ii ]		557455	1					
ANR	557487	MemberAccess	pfn -> params . array_step		557455	0					
ANR	557488	PtrMemberAccess	pfn -> params		557455	0					
ANR	557489	Identifier	pfn		557455	0					
ANR	557490	Identifier	params		557455	1					
ANR	557491	Identifier	array_step		557455	1					
ANR	557492	Identifier	ii		557455	1					
ANR	557493	IdentifierDeclStatement	int Ii = I [ ii ] ;	609:8:19874:19888	557455	1	True				
ANR	557494	IdentifierDecl	Ii = I [ ii ]		557455	0					
ANR	557495	IdentifierDeclType	int		557455	0					
ANR	557496	Identifier	Ii		557455	1					
ANR	557497	AssignmentExpression	Ii = I [ ii ]		557455	2		=			
ANR	557498	Identifier	Ii		557455	0					
ANR	557499	ArrayIndexing	I [ ii ]		557455	1					
ANR	557500	Identifier	I		557455	0					
ANR	557501	Identifier	ii		557455	1					
ANR	557502	IfStatement	if ( T [ ii ] == 0 )		557455	2					
ANR	557503	Condition	T [ ii ] == 0	611:12:19903:19912	557455	0	True				
ANR	557504	EqualityExpression	T [ ii ] == 0		557455	0		==			
ANR	557505	ArrayIndexing	T [ ii ]		557455	0					
ANR	557506	Identifier	T		557455	0					
ANR	557507	Identifier	ii		557455	1					
ANR	557508	PrimaryExpression	0		557455	1					
ANR	557509	CompoundStatement		8:24:186:186	557455	1					
ANR	557510	ExpressionStatement	"interpolate_tensors ( pfn , I , T , offset + Ii * s , pole_step , power , bias , ii - 1 )"	612:12:19929:20008	557455	0	True				
ANR	557511	CallExpression	"interpolate_tensors ( pfn , I , T , offset + Ii * s , pole_step , power , bias , ii - 1 )"		557455	0					
ANR	557512	Callee	interpolate_tensors		557455	0					
ANR	557513	Identifier	interpolate_tensors		557455	0					
ANR	557514	ArgumentList	pfn		557455	1					
ANR	557515	Argument	pfn		557455	0					
ANR	557516	Identifier	pfn		557455	0					
ANR	557517	Argument	I		557455	1					
ANR	557518	Identifier	I		557455	0					
ANR	557519	Argument	T		557455	2					
ANR	557520	Identifier	T		557455	0					
ANR	557521	Argument	offset + Ii * s		557455	3					
ANR	557522	AdditiveExpression	offset + Ii * s		557455	0		+			
ANR	557523	Identifier	offset		557455	0					
ANR	557524	MultiplicativeExpression	Ii * s		557455	1		*			
ANR	557525	Identifier	Ii		557455	0					
ANR	557526	Identifier	s		557455	1					
ANR	557527	Argument	pole_step		557455	4					
ANR	557528	Identifier	pole_step		557455	0					
ANR	557529	Argument	power		557455	5					
ANR	557530	Identifier	power		557455	0					
ANR	557531	Argument	bias		557455	6					
ANR	557532	Identifier	bias		557455	0					
ANR	557533	Argument	ii - 1		557455	7					
ANR	557534	AdditiveExpression	ii - 1		557455	0		-			
ANR	557535	Identifier	ii		557455	0					
ANR	557536	PrimaryExpression	1		557455	1					
ANR	557537	ElseStatement	else		557455	0					
ANR	557538	CompoundStatement		11:12:310:315	557455	0					
ANR	557539	IdentifierDeclStatement	int l ;	614:12:20039:20044	557455	0	True				
ANR	557540	IdentifierDecl	l		557455	0					
ANR	557541	IdentifierDeclType	int		557455	0					
ANR	557542	Identifier	l		557455	1					
ANR	557543	ForStatement	for ( l = 0 ; l < 4 ; l ++ )		557455	1					
ANR	557544	ForInit	l = 0 ;	616:17:20064:20069	557455	0	True				
ANR	557545	AssignmentExpression	l = 0		557455	0		=			
ANR	557546	Identifier	l		557455	0					
ANR	557547	PrimaryExpression	0		557455	1					
ANR	557548	Condition	l < 4	616:24:20071:20075	557455	1	True				
ANR	557549	RelationalExpression	l < 4		557455	0		<			
ANR	557550	Identifier	l		557455	0					
ANR	557551	PrimaryExpression	4		557455	1					
ANR	557552	PostIncDecOperationExpression	l ++	616:31:20078:20080	557455	2	True				
ANR	557553	Identifier	l		557455	0					
ANR	557554	IncDec	++		557455	1					
ANR	557555	ExpressionStatement	"interpolate_tensors ( pfn , I , T , offset + Ii * s + l * s / 3 , pole_step , power , bias , ii - 1 )"	617:16:20099:20190	557455	3	True				
ANR	557556	CallExpression	"interpolate_tensors ( pfn , I , T , offset + Ii * s + l * s / 3 , pole_step , power , bias , ii - 1 )"		557455	0					
ANR	557557	Callee	interpolate_tensors		557455	0					
ANR	557558	Identifier	interpolate_tensors		557455	0					
ANR	557559	ArgumentList	pfn		557455	1					
ANR	557560	Argument	pfn		557455	0					
ANR	557561	Identifier	pfn		557455	0					
ANR	557562	Argument	I		557455	1					
ANR	557563	Identifier	I		557455	0					
ANR	557564	Argument	T		557455	2					
ANR	557565	Identifier	T		557455	0					
ANR	557566	Argument	offset + Ii * s + l * s / 3		557455	3					
ANR	557567	AdditiveExpression	offset + Ii * s + l * s / 3		557455	0		+			
ANR	557568	Identifier	offset		557455	0					
ANR	557569	AdditiveExpression	Ii * s + l * s / 3		557455	1		+			
ANR	557570	MultiplicativeExpression	Ii * s		557455	0		*			
ANR	557571	Identifier	Ii		557455	0					
ANR	557572	Identifier	s		557455	1					
ANR	557573	MultiplicativeExpression	l * s / 3		557455	1		*			
ANR	557574	Identifier	l		557455	0					
ANR	557575	MultiplicativeExpression	s / 3		557455	1		/			
ANR	557576	Identifier	s		557455	0					
ANR	557577	PrimaryExpression	3		557455	1					
ANR	557578	Argument	pole_step		557455	4					
ANR	557579	Identifier	pole_step		557455	0					
ANR	557580	Argument	power		557455	5					
ANR	557581	Identifier	power		557455	0					
ANR	557582	Argument	bias		557455	6					
ANR	557583	Identifier	bias		557455	0					
ANR	557584	Argument	ii - 1		557455	7					
ANR	557585	AdditiveExpression	ii - 1		557455	0		-			
ANR	557586	Identifier	ii		557455	0					
ANR	557587	PrimaryExpression	1		557455	1					
ANR	557588	ReturnType	static inline void		557455	1					
ANR	557589	Identifier	interpolate_tensors		557455	2					
ANR	557590	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int offset , int pole_step , int power , int bias , int ii"		557455	3					
ANR	557591	Parameter	const gs_function_Sd_t * pfn	602:20:19616:19642	557455	0	True				
ANR	557592	ParameterType	const gs_function_Sd_t *		557455	0					
ANR	557593	Identifier	pfn		557455	1					
ANR	557594	Parameter	int * I	602:49:19645:19650	557455	1	True				
ANR	557595	ParameterType	int *		557455	0					
ANR	557596	Identifier	I		557455	1					
ANR	557597	Parameter	double * T	602:57:19653:19661	557455	2	True				
ANR	557598	ParameterType	double *		557455	0					
ANR	557599	Identifier	T		557455	1					
ANR	557600	Parameter	int offset	603:8:19672:19681	557455	3	True				
ANR	557601	ParameterType	int		557455	0					
ANR	557602	Identifier	offset		557455	1					
ANR	557603	Parameter	int pole_step	603:20:19684:19696	557455	4	True				
ANR	557604	ParameterType	int		557455	0					
ANR	557605	Identifier	pole_step		557455	1					
ANR	557606	Parameter	int power	603:35:19699:19707	557455	5	True				
ANR	557607	ParameterType	int		557455	0					
ANR	557608	Identifier	power		557455	1					
ANR	557609	Parameter	int bias	603:46:19710:19717	557455	6	True				
ANR	557610	ParameterType	int		557455	0					
ANR	557611	Identifier	bias		557455	1					
ANR	557612	Parameter	int ii	603:56:19720:19725	557455	7	True				
ANR	557613	ParameterType	int		557455	0					
ANR	557614	Identifier	ii		557455	1					
ANR	557615	CFGEntryNode	ENTRY		557455		True				
ANR	557616	CFGExitNode	EXIT		557455		True				
ANR	557617	Symbol	ii		557455						
ANR	557618	Symbol	* pfn -> params . array_step		557455						
ANR	557619	Symbol	Ii		557455						
ANR	557620	Symbol	* pfn		557455						
ANR	557621	Symbol	offset		557455						
ANR	557622	Symbol	* ii		557455						
ANR	557623	Symbol	I		557455						
ANR	557624	Symbol	* * pfn		557455						
ANR	557625	Symbol	l		557455						
ANR	557626	Symbol	pole_step		557455						
ANR	557627	Symbol	s		557455						
ANR	557628	Symbol	* I		557455						
ANR	557629	Symbol	T		557455						
ANR	557630	Symbol	bias		557455						
ANR	557631	Symbol	pfn -> params . array_step		557455						
ANR	557632	Symbol	pfn		557455						
ANR	557633	Symbol	power		557455						
ANR	557634	Symbol	pfn -> params		557455						
ANR	557635	Symbol	* pfn -> params		557455						
ANR	557636	Symbol	* T		557455						
ANR	557637	Function	is_tensor_done	622:0:20211:20633							
ANR	557638	FunctionDef	"is_tensor_done (const gs_function_Sd_t * pfn , int * I , double * T , int a_offset , int ii)"		557637	0					
ANR	557639	CompoundStatement		624:0:20315:20633	557637	0					
ANR	557640	IdentifierDeclStatement	"int i , o = 0 ;"	626:4:20364:20376	557637	0	True				
ANR	557641	IdentifierDecl	i		557637	0					
ANR	557642	IdentifierDeclType	int		557637	0					
ANR	557643	Identifier	i		557637	1					
ANR	557644	IdentifierDecl	o = 0		557637	1					
ANR	557645	IdentifierDeclType	int		557637	0					
ANR	557646	Identifier	o		557637	1					
ANR	557647	AssignmentExpression	o = 0		557637	2		=			
ANR	557648	Identifier	o		557637	0					
ANR	557649	PrimaryExpression	0		557637	1					
ANR	557650	ForStatement	for ( i = ii ; i >= 0 ; i -- )		557637	1					
ANR	557651	ForInit	i = ii ;	628:9:20388:20394	557637	0	True				
ANR	557652	AssignmentExpression	i = ii		557637	0		=			
ANR	557653	Identifier	i		557637	0					
ANR	557654	Identifier	ii		557637	1					
ANR	557655	Condition	i >= 0	628:17:20396:20401	557637	1	True				
ANR	557656	RelationalExpression	i >= 0		557637	0		>=			
ANR	557657	Identifier	i		557637	0					
ANR	557658	PrimaryExpression	0		557637	1					
ANR	557659	PostIncDecOperationExpression	i --	628:25:20404:20406	557637	2	True				
ANR	557660	Identifier	i		557637	0					
ANR	557661	IncDec	--		557637	1					
ANR	557662	CompoundStatement		5:30:93:93	557637	3					
ANR	557663	ExpressionStatement	o += I [ i ] * pfn -> params . array_step [ i ]	629:8:20419:20456	557637	0	True				
ANR	557664	AssignmentExpression	o += I [ i ] * pfn -> params . array_step [ i ]		557637	0		+=			
ANR	557665	Identifier	o		557637	0					
ANR	557666	MultiplicativeExpression	I [ i ] * pfn -> params . array_step [ i ]		557637	1		*			
ANR	557667	ArrayIndexing	I [ i ]		557637	0					
ANR	557668	Identifier	I		557637	0					
ANR	557669	Identifier	i		557637	1					
ANR	557670	ArrayIndexing	pfn -> params . array_step [ i ]		557637	1					
ANR	557671	MemberAccess	pfn -> params . array_step		557637	0					
ANR	557672	PtrMemberAccess	pfn -> params		557637	0					
ANR	557673	Identifier	pfn		557637	0					
ANR	557674	Identifier	params		557637	1					
ANR	557675	Identifier	array_step		557637	1					
ANR	557676	Identifier	i		557637	1					
ANR	557677	IfStatement	if ( T [ i ] != 0 )		557637	1					
ANR	557678	Condition	T [ i ] != 0	630:12:20470:20478	557637	0	True				
ANR	557679	EqualityExpression	T [ i ] != 0		557637	0		!=			
ANR	557680	ArrayIndexing	T [ i ]		557637	0					
ANR	557681	Identifier	T		557637	0					
ANR	557682	Identifier	i		557637	1					
ANR	557683	PrimaryExpression	0		557637	1					
ANR	557684	ExpressionStatement	o += pfn -> params . array_step [ i ] / 3	631:12:20493:20527	557637	1	True				
ANR	557685	AssignmentExpression	o += pfn -> params . array_step [ i ] / 3		557637	0		+=			
ANR	557686	Identifier	o		557637	0					
ANR	557687	MultiplicativeExpression	pfn -> params . array_step [ i ] / 3		557637	1		/			
ANR	557688	ArrayIndexing	pfn -> params . array_step [ i ]		557637	0					
ANR	557689	MemberAccess	pfn -> params . array_step		557637	0					
ANR	557690	PtrMemberAccess	pfn -> params		557637	0					
ANR	557691	Identifier	pfn		557637	0					
ANR	557692	Identifier	params		557637	1					
ANR	557693	Identifier	array_step		557637	1					
ANR	557694	Identifier	i		557637	1					
ANR	557695	PrimaryExpression	3		557637	1					
ANR	557696	IfStatement	if ( * ( pfn -> params . pole + a_offset + o ) != double_stub )		557637	2					
ANR	557697	Condition	* ( pfn -> params . pole + a_offset + o ) != double_stub	633:8:20543:20591	557637	0	True				
ANR	557698	EqualityExpression	* ( pfn -> params . pole + a_offset + o ) != double_stub		557637	0		!=			
ANR	557699	UnaryOperationExpression	* ( pfn -> params . pole + a_offset + o )		557637	0					
ANR	557700	UnaryOperator	*		557637	0					
ANR	557701	AdditiveExpression	pfn -> params . pole + a_offset + o		557637	1		+			
ANR	557702	MemberAccess	pfn -> params . pole		557637	0					
ANR	557703	PtrMemberAccess	pfn -> params		557637	0					
ANR	557704	Identifier	pfn		557637	0					
ANR	557705	Identifier	params		557637	1					
ANR	557706	Identifier	pole		557637	1					
ANR	557707	AdditiveExpression	a_offset + o		557637	1		+			
ANR	557708	Identifier	a_offset		557637	0					
ANR	557709	Identifier	o		557637	1					
ANR	557710	Identifier	double_stub		557637	1					
ANR	557711	ReturnStatement	return true ;	634:8:20602:20613	557637	1	True				
ANR	557712	Identifier	true		557637	0					
ANR	557713	ReturnStatement	return false ;	635:4:20619:20631	557637	3	True				
ANR	557714	Identifier	false		557637	0					
ANR	557715	ReturnType	static inline bool		557637	1					
ANR	557716	Identifier	is_tensor_done		557637	2					
ANR	557717	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int a_offset , int ii"		557637	3					
ANR	557718	Parameter	const gs_function_Sd_t * pfn	623:15:20245:20271	557637	0	True				
ANR	557719	ParameterType	const gs_function_Sd_t *		557637	0					
ANR	557720	Identifier	pfn		557637	1					
ANR	557721	Parameter	int * I	623:44:20274:20279	557637	1	True				
ANR	557722	ParameterType	int *		557637	0					
ANR	557723	Identifier	I		557637	1					
ANR	557724	Parameter	double * T	623:52:20282:20290	557637	2	True				
ANR	557725	ParameterType	double *		557637	0					
ANR	557726	Identifier	T		557637	1					
ANR	557727	Parameter	int a_offset	623:63:20293:20304	557637	3	True				
ANR	557728	ParameterType	int		557637	0					
ANR	557729	Identifier	a_offset		557637	1					
ANR	557730	Parameter	int ii	623:77:20307:20312	557637	4	True				
ANR	557731	ParameterType	int		557637	0					
ANR	557732	Identifier	ii		557637	1					
ANR	557733	CFGEntryNode	ENTRY		557637		True				
ANR	557734	CFGExitNode	EXIT		557637		True				
ANR	557735	Symbol	ii		557637						
ANR	557736	Symbol	* pfn -> params . array_step		557637						
ANR	557737	Symbol	* pfn		557637						
ANR	557738	Symbol	a_offset		557637						
ANR	557739	Symbol	false		557637						
ANR	557740	Symbol	I		557637						
ANR	557741	Symbol	i		557637						
ANR	557742	Symbol	* * pfn		557637						
ANR	557743	Symbol	o		557637						
ANR	557744	Symbol	double_stub		557637						
ANR	557745	Symbol	pfn -> params . pole		557637						
ANR	557746	Symbol	* pfn -> params . pole		557637						
ANR	557747	Symbol	* I		557637						
ANR	557748	Symbol	* i		557637						
ANR	557749	Symbol	T		557637						
ANR	557750	Symbol	* a_offset		557637						
ANR	557751	Symbol	pfn -> params . array_step		557637						
ANR	557752	Symbol	* ( pfn -> params . pole + a_offset + o )		557637						
ANR	557753	Symbol	true		557637						
ANR	557754	Symbol	pfn		557637						
ANR	557755	Symbol	* o		557637						
ANR	557756	Symbol	pfn -> params		557637						
ANR	557757	Symbol	* pfn -> params		557637						
ANR	557758	Symbol	* T		557637						
ANR	557759	Function	make_interpolation_tensor	639:0:20705:24283							
ANR	557760	FunctionDef	"make_interpolation_tensor (const gs_function_Sd_t * pfn , int * I , double * T , int a_offset , int s_offset , int ii)"		557759	0					
ANR	557761	CompoundStatement		642:0:20861:24283	557759	0					
ANR	557762	IdentifierDeclStatement	int code ;	693:4:23343:23351	557759	0	True				
ANR	557763	IdentifierDecl	code		557759	0					
ANR	557764	IdentifierDeclType	int		557759	0					
ANR	557765	Identifier	code		557759	1					
ANR	557766	IfStatement	if ( ii < 0 )		557759	1					
ANR	557767	Condition	ii < 0	695:8:23362:23367	557759	0	True				
ANR	557768	RelationalExpression	ii < 0		557759	0		<			
ANR	557769	Identifier	ii		557759	0					
ANR	557770	PrimaryExpression	0		557759	1					
ANR	557771	CompoundStatement		54:16:2508:2508	557759	1					
ANR	557772	IfStatement	if ( POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub )		557759	0					
ANR	557773	Condition	POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub	696:12:23384:23449	557759	0	True				
ANR	557774	OrExpression	POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub		557759	0		||			
ANR	557775	Identifier	POLE_CACHE_IGNORE		557759	0					
ANR	557776	EqualityExpression	* ( pfn -> params . pole + a_offset ) == double_stub		557759	1		==			
ANR	557777	UnaryOperationExpression	* ( pfn -> params . pole + a_offset )		557759	0					
ANR	557778	UnaryOperator	*		557759	0					
ANR	557779	AdditiveExpression	pfn -> params . pole + a_offset		557759	1		+			
ANR	557780	MemberAccess	pfn -> params . pole		557759	0					
ANR	557781	PtrMemberAccess	pfn -> params		557759	0					
ANR	557782	Identifier	pfn		557759	0					
ANR	557783	Identifier	params		557759	1					
ANR	557784	Identifier	pole		557759	1					
ANR	557785	Identifier	a_offset		557759	1					
ANR	557786	Identifier	double_stub		557759	1					
ANR	557787	CompoundStatement		55:80:2590:2590	557759	1					
ANR	557788	ExpressionStatement	"code = load_vector ( pfn , a_offset , s_offset )"	697:12:23466:23509	557759	0	True				
ANR	557789	AssignmentExpression	"code = load_vector ( pfn , a_offset , s_offset )"		557759	0		=			
ANR	557790	Identifier	code		557759	0					
ANR	557791	CallExpression	"load_vector ( pfn , a_offset , s_offset )"		557759	1					
ANR	557792	Callee	load_vector		557759	0					
ANR	557793	Identifier	load_vector		557759	0					
ANR	557794	ArgumentList	pfn		557759	1					
ANR	557795	Argument	pfn		557759	0					
ANR	557796	Identifier	pfn		557759	0					
ANR	557797	Argument	a_offset		557759	1					
ANR	557798	Identifier	a_offset		557759	0					
ANR	557799	Argument	s_offset		557759	2					
ANR	557800	Identifier	s_offset		557759	0					
ANR	557801	IfStatement	if ( code < 0 )		557759	1					
ANR	557802	Condition	code < 0	698:16:23527:23534	557759	0	True				
ANR	557803	RelationalExpression	code < 0		557759	0		<			
ANR	557804	Identifier	code		557759	0					
ANR	557805	PrimaryExpression	0		557759	1					
ANR	557806	ReturnStatement	return code ;	699:16:23553:23564	557759	1	True				
ANR	557807	Identifier	code		557759	0					
ANR	557808	ElseStatement	else		557759	0					
ANR	557809	CompoundStatement		63:8:2807:2843	557759	0					
ANR	557810	IdentifierDeclStatement	"int Ii , ib , ie , i ;"	702:8:23597:23614	557759	0	True				
ANR	557811	IdentifierDecl	Ii		557759	0					
ANR	557812	IdentifierDeclType	int		557759	0					
ANR	557813	Identifier	Ii		557759	1					
ANR	557814	IdentifierDecl	ib		557759	1					
ANR	557815	IdentifierDeclType	int		557759	0					
ANR	557816	Identifier	ib		557759	1					
ANR	557817	IdentifierDecl	ie		557759	2					
ANR	557818	IdentifierDeclType	int		557759	0					
ANR	557819	Identifier	ie		557759	1					
ANR	557820	IdentifierDecl	i		557759	3					
ANR	557821	IdentifierDeclType	int		557759	0					
ANR	557822	Identifier	i		557759	1					
ANR	557823	IdentifierDeclStatement	int sa = pfn -> params . array_step [ ii ] ;	703:8:23624:23659	557759	1	True				
ANR	557824	IdentifierDecl	sa = pfn -> params . array_step [ ii ]		557759	0					
ANR	557825	IdentifierDeclType	int		557759	0					
ANR	557826	Identifier	sa		557759	1					
ANR	557827	AssignmentExpression	sa = pfn -> params . array_step [ ii ]		557759	2		=			
ANR	557828	Identifier	sa		557759	0					
ANR	557829	ArrayIndexing	pfn -> params . array_step [ ii ]		557759	1					
ANR	557830	MemberAccess	pfn -> params . array_step		557759	0					
ANR	557831	PtrMemberAccess	pfn -> params		557759	0					
ANR	557832	Identifier	pfn		557759	0					
ANR	557833	Identifier	params		557759	1					
ANR	557834	Identifier	array_step		557759	1					
ANR	557835	Identifier	ii		557759	1					
ANR	557836	IdentifierDeclStatement	int ss = pfn -> params . stream_step [ ii ] ;	704:8:23669:23705	557759	2	True				
ANR	557837	IdentifierDecl	ss = pfn -> params . stream_step [ ii ]		557759	0					
ANR	557838	IdentifierDeclType	int		557759	0					
ANR	557839	Identifier	ss		557759	1					
ANR	557840	AssignmentExpression	ss = pfn -> params . stream_step [ ii ]		557759	2		=			
ANR	557841	Identifier	ss		557759	0					
ANR	557842	ArrayIndexing	pfn -> params . stream_step [ ii ]		557759	1					
ANR	557843	MemberAccess	pfn -> params . stream_step		557759	0					
ANR	557844	PtrMemberAccess	pfn -> params		557759	0					
ANR	557845	Identifier	pfn		557759	0					
ANR	557846	Identifier	params		557759	1					
ANR	557847	Identifier	stream_step		557759	1					
ANR	557848	Identifier	ii		557759	1					
ANR	557849	ExpressionStatement	"index_span ( pfn , I , T , ii , & Ii , & ib , & ie )"	706:8:23716:23756	557759	3	True				
ANR	557850	CallExpression	"index_span ( pfn , I , T , ii , & Ii , & ib , & ie )"		557759	0					
ANR	557851	Callee	index_span		557759	0					
ANR	557852	Identifier	index_span		557759	0					
ANR	557853	ArgumentList	pfn		557759	1					
ANR	557854	Argument	pfn		557759	0					
ANR	557855	Identifier	pfn		557759	0					
ANR	557856	Argument	I		557759	1					
ANR	557857	Identifier	I		557759	0					
ANR	557858	Argument	T		557759	2					
ANR	557859	Identifier	T		557759	0					
ANR	557860	Argument	ii		557759	3					
ANR	557861	Identifier	ii		557759	0					
ANR	557862	Argument	& Ii		557759	4					
ANR	557863	UnaryOperationExpression	& Ii		557759	0					
ANR	557864	UnaryOperator	&		557759	0					
ANR	557865	Identifier	Ii		557759	1					
ANR	557866	Argument	& ib		557759	5					
ANR	557867	UnaryOperationExpression	& ib		557759	0					
ANR	557868	UnaryOperator	&		557759	0					
ANR	557869	Identifier	ib		557759	1					
ANR	557870	Argument	& ie		557759	6					
ANR	557871	UnaryOperationExpression	& ie		557759	0					
ANR	557872	UnaryOperator	&		557759	0					
ANR	557873	Identifier	ie		557759	1					
ANR	557874	IfStatement	"if ( POLE_CACHE_IGNORE || ! is_tensor_done ( pfn , I , T , a_offset , ii ) )"		557759	4					
ANR	557875	Condition	"POLE_CACHE_IGNORE || ! is_tensor_done ( pfn , I , T , a_offset , ii )"	707:12:23770:23830	557759	0	True				
ANR	557876	OrExpression	"POLE_CACHE_IGNORE || ! is_tensor_done ( pfn , I , T , a_offset , ii )"		557759	0		||			
ANR	557877	Identifier	POLE_CACHE_IGNORE		557759	0					
ANR	557878	UnaryOperationExpression	"! is_tensor_done ( pfn , I , T , a_offset , ii )"		557759	1					
ANR	557879	UnaryOperator	!		557759	0					
ANR	557880	CallExpression	"is_tensor_done ( pfn , I , T , a_offset , ii )"		557759	1					
ANR	557881	Callee	is_tensor_done		557759	0					
ANR	557882	Identifier	is_tensor_done		557759	0					
ANR	557883	ArgumentList	pfn		557759	1					
ANR	557884	Argument	pfn		557759	0					
ANR	557885	Identifier	pfn		557759	0					
ANR	557886	Argument	I		557759	1					
ANR	557887	Identifier	I		557759	0					
ANR	557888	Argument	T		557759	2					
ANR	557889	Identifier	T		557759	0					
ANR	557890	Argument	a_offset		557759	3					
ANR	557891	Identifier	a_offset		557759	0					
ANR	557892	Argument	ii		557759	4					
ANR	557893	Identifier	ii		557759	0					
ANR	557894	CompoundStatement		66:75:2971:2971	557759	1					
ANR	557895	ForStatement	for ( i = ib ; i < ie ; i ++ )		557759	0					
ANR	557896	ForInit	i = ib ;	708:17:23852:23858	557759	0	True				
ANR	557897	AssignmentExpression	i = ib		557759	0		=			
ANR	557898	Identifier	i		557759	0					
ANR	557899	Identifier	ib		557759	1					
ANR	557900	Condition	i < ie	708:25:23860:23865	557759	1	True				
ANR	557901	RelationalExpression	i < ie		557759	0		<			
ANR	557902	Identifier	i		557759	0					
ANR	557903	Identifier	ie		557759	1					
ANR	557904	PostIncDecOperationExpression	i ++	708:33:23868:23870	557759	2	True				
ANR	557905	Identifier	i		557759	0					
ANR	557906	IncDec	++		557759	1					
ANR	557907	CompoundStatement		67:38:3011:3011	557759	3					
ANR	557908	ExpressionStatement	"code = make_interpolation_tensor ( pfn , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"	709:16:23891:24012	557759	0	True				
ANR	557909	AssignmentExpression	"code = make_interpolation_tensor ( pfn , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"		557759	0		=			
ANR	557910	Identifier	code		557759	0					
ANR	557911	CallExpression	"make_interpolation_tensor ( pfn , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"		557759	1					
ANR	557912	Callee	make_interpolation_tensor		557759	0					
ANR	557913	Identifier	make_interpolation_tensor		557759	0					
ANR	557914	ArgumentList	pfn		557759	1					
ANR	557915	Argument	pfn		557759	0					
ANR	557916	Identifier	pfn		557759	0					
ANR	557917	Argument	I		557759	1					
ANR	557918	Identifier	I		557759	0					
ANR	557919	Argument	T		557759	2					
ANR	557920	Identifier	T		557759	0					
ANR	557921	Argument	a_offset + i * sa		557759	3					
ANR	557922	AdditiveExpression	a_offset + i * sa		557759	0		+			
ANR	557923	Identifier	a_offset		557759	0					
ANR	557924	MultiplicativeExpression	i * sa		557759	1		*			
ANR	557925	Identifier	i		557759	0					
ANR	557926	Identifier	sa		557759	1					
ANR	557927	Argument	s_offset + i * ss		557759	4					
ANR	557928	AdditiveExpression	s_offset + i * ss		557759	0		+			
ANR	557929	Identifier	s_offset		557759	0					
ANR	557930	MultiplicativeExpression	i * ss		557759	1		*			
ANR	557931	Identifier	i		557759	0					
ANR	557932	Identifier	ss		557759	1					
ANR	557933	Argument	ii - 1		557759	5					
ANR	557934	AdditiveExpression	ii - 1		557759	0		-			
ANR	557935	Identifier	ii		557759	0					
ANR	557936	PrimaryExpression	1		557759	1					
ANR	557937	IfStatement	if ( code < 0 )		557759	1					
ANR	557938	Condition	code < 0	711:20:24034:24041	557759	0	True				
ANR	557939	RelationalExpression	code < 0		557759	0		<			
ANR	557940	Identifier	code		557759	0					
ANR	557941	PrimaryExpression	0		557759	1					
ANR	557942	ReturnStatement	return code ;	712:20:24064:24075	557759	1	True				
ANR	557943	Identifier	code		557759	0					
ANR	557944	IfStatement	if ( T [ ii ] != 0 )		557759	1					
ANR	557945	Condition	T [ ii ] != 0	714:16:24107:24116	557759	0	True				
ANR	557946	EqualityExpression	T [ ii ] != 0		557759	0		!=			
ANR	557947	ArrayIndexing	T [ ii ]		557759	0					
ANR	557948	Identifier	T		557759	0					
ANR	557949	Identifier	ii		557759	1					
ANR	557950	PrimaryExpression	0		557759	1					
ANR	557951	ExpressionStatement	"interpolate_tensors ( pfn , I , T , a_offset + ib * sa , sa , ie - ib - 1 , Ii - ib , ii - 1 )"	715:16:24135:24251	557759	1	True				
ANR	557952	CallExpression	"interpolate_tensors ( pfn , I , T , a_offset + ib * sa , sa , ie - ib - 1 , Ii - ib , ii - 1 )"		557759	0					
ANR	557953	Callee	interpolate_tensors		557759	0					
ANR	557954	Identifier	interpolate_tensors		557759	0					
ANR	557955	ArgumentList	pfn		557759	1					
ANR	557956	Argument	pfn		557759	0					
ANR	557957	Identifier	pfn		557759	0					
ANR	557958	Argument	I		557759	1					
ANR	557959	Identifier	I		557759	0					
ANR	557960	Argument	T		557759	2					
ANR	557961	Identifier	T		557759	0					
ANR	557962	Argument	a_offset + ib * sa		557759	3					
ANR	557963	AdditiveExpression	a_offset + ib * sa		557759	0		+			
ANR	557964	Identifier	a_offset		557759	0					
ANR	557965	MultiplicativeExpression	ib * sa		557759	1		*			
ANR	557966	Identifier	ib		557759	0					
ANR	557967	Identifier	sa		557759	1					
ANR	557968	Argument	sa		557759	4					
ANR	557969	Identifier	sa		557759	0					
ANR	557970	Argument	ie - ib - 1		557759	5					
ANR	557971	AdditiveExpression	ie - ib - 1		557759	0		-			
ANR	557972	Identifier	ie		557759	0					
ANR	557973	AdditiveExpression	ib - 1		557759	1		-			
ANR	557974	Identifier	ib		557759	0					
ANR	557975	PrimaryExpression	1		557759	1					
ANR	557976	Argument	Ii - ib		557759	6					
ANR	557977	AdditiveExpression	Ii - ib		557759	0		-			
ANR	557978	Identifier	Ii		557759	0					
ANR	557979	Identifier	ib		557759	1					
ANR	557980	Argument	ii - 1		557759	7					
ANR	557981	AdditiveExpression	ii - 1		557759	0		-			
ANR	557982	Identifier	ii		557759	0					
ANR	557983	PrimaryExpression	1		557759	1					
ANR	557984	ReturnStatement	return 0 ;	719:4:24273:24281	557759	2	True				
ANR	557985	PrimaryExpression	0		557759	0					
ANR	557986	ReturnType	static inline int		557759	1					
ANR	557987	Identifier	make_interpolation_tensor		557759	2					
ANR	557988	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int a_offset , int s_offset , int ii"		557759	3					
ANR	557989	Parameter	const gs_function_Sd_t * pfn	640:26:20749:20775	557759	0	True				
ANR	557990	ParameterType	const gs_function_Sd_t *		557759	0					
ANR	557991	Identifier	pfn		557759	1					
ANR	557992	Parameter	int * I	640:55:20778:20783	557759	1	True				
ANR	557993	ParameterType	int *		557759	0					
ANR	557994	Identifier	I		557759	1					
ANR	557995	Parameter	double * T	640:63:20786:20794	557759	2	True				
ANR	557996	ParameterType	double *		557759	0					
ANR	557997	Identifier	T		557759	1					
ANR	557998	Parameter	int a_offset	641:28:20825:20836	557759	3	True				
ANR	557999	ParameterType	int		557759	0					
ANR	558000	Identifier	a_offset		557759	1					
ANR	558001	Parameter	int s_offset	641:42:20839:20850	557759	4	True				
ANR	558002	ParameterType	int		557759	0					
ANR	558003	Identifier	s_offset		557759	1					
ANR	558004	Parameter	int ii	641:56:20853:20858	557759	5	True				
ANR	558005	ParameterType	int		557759	0					
ANR	558006	Identifier	ii		557759	1					
ANR	558007	CFGEntryNode	ENTRY		557759		True				
ANR	558008	CFGExitNode	EXIT		557759		True				
ANR	558009	Symbol	Ii		557759						
ANR	558010	Symbol	& ib		557759						
ANR	558011	Symbol	code		557759						
ANR	558012	Symbol	* ii		557759						
ANR	558013	Symbol	& ie		557759						
ANR	558014	Symbol	a_offset		557759						
ANR	558015	Symbol	I		557759						
ANR	558016	Symbol	* * pfn		557759						
ANR	558017	Symbol	sa		557759						
ANR	558018	Symbol	pfn -> params . pole		557759						
ANR	558019	Symbol	double_stub		557759						
ANR	558020	Symbol	s_offset		557759						
ANR	558021	Symbol	T		557759						
ANR	558022	Symbol	pfn -> params . stream_step		557759						
ANR	558023	Symbol	pfn -> params . array_step		557759						
ANR	558024	Symbol	* ( pfn -> params . pole + a_offset )		557759						
ANR	558025	Symbol	ib		557759						
ANR	558026	Symbol	POLE_CACHE_IGNORE		557759						
ANR	558027	Symbol	ie		557759						
ANR	558028	Symbol	* pfn -> params . stream_step		557759						
ANR	558029	Symbol	* T		557759						
ANR	558030	Symbol	ii		557759						
ANR	558031	Symbol	* pfn -> params . array_step		557759						
ANR	558032	Symbol	ss		557759						
ANR	558033	Symbol	make_interpolation_tensor		557759						
ANR	558034	Symbol	* pfn		557759						
ANR	558035	Symbol	i		557759						
ANR	558036	Symbol	& Ii		557759						
ANR	558037	Symbol	* pfn -> params . pole		557759						
ANR	558038	Symbol	* a_offset		557759						
ANR	558039	Symbol	pfn		557759						
ANR	558040	Symbol	load_vector		557759						
ANR	558041	Symbol	is_tensor_done		557759						
ANR	558042	Symbol	pfn -> params		557759						
ANR	558043	Symbol	* pfn -> params		557759						
ANR	558044	Function	make_interpolation_nodes	723:0:24323:25706							
ANR	558045	FunctionDef	"make_interpolation_nodes (const gs_function_Sd_t * pfn , double * T0 , double * T1 , int * I , double * T , int a_offset , int s_offset , int ii)"		558044	0					
ANR	558046	CompoundStatement		727:0:24530:25706	558044	0					
ANR	558047	IdentifierDeclStatement	int code ;	728:4:24536:24544	558044	0	True				
ANR	558048	IdentifierDecl	code		558044	0					
ANR	558049	IdentifierDeclType	int		558044	0					
ANR	558050	Identifier	code		558044	1					
ANR	558051	IfStatement	if ( ii < 0 )		558044	1					
ANR	558052	Condition	ii < 0	730:8:24555:24560	558044	0	True				
ANR	558053	RelationalExpression	ii < 0		558044	0		<			
ANR	558054	Identifier	ii		558044	0					
ANR	558055	PrimaryExpression	0		558044	1					
ANR	558056	CompoundStatement		4:16:32:32	558044	1					
ANR	558057	IfStatement	if ( POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub )		558044	0					
ANR	558058	Condition	POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub	731:12:24577:24642	558044	0	True				
ANR	558059	OrExpression	POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub		558044	0		||			
ANR	558060	Identifier	POLE_CACHE_IGNORE		558044	0					
ANR	558061	EqualityExpression	* ( pfn -> params . pole + a_offset ) == double_stub		558044	1		==			
ANR	558062	UnaryOperationExpression	* ( pfn -> params . pole + a_offset )		558044	0					
ANR	558063	UnaryOperator	*		558044	0					
ANR	558064	AdditiveExpression	pfn -> params . pole + a_offset		558044	1		+			
ANR	558065	MemberAccess	pfn -> params . pole		558044	0					
ANR	558066	PtrMemberAccess	pfn -> params		558044	0					
ANR	558067	Identifier	pfn		558044	0					
ANR	558068	Identifier	params		558044	1					
ANR	558069	Identifier	pole		558044	1					
ANR	558070	Identifier	a_offset		558044	1					
ANR	558071	Identifier	double_stub		558044	1					
ANR	558072	CompoundStatement		5:80:114:114	558044	1					
ANR	558073	ExpressionStatement	"code = load_vector ( pfn , a_offset , s_offset )"	732:12:24659:24702	558044	0	True				
ANR	558074	AssignmentExpression	"code = load_vector ( pfn , a_offset , s_offset )"		558044	0		=			
ANR	558075	Identifier	code		558044	0					
ANR	558076	CallExpression	"load_vector ( pfn , a_offset , s_offset )"		558044	1					
ANR	558077	Callee	load_vector		558044	0					
ANR	558078	Identifier	load_vector		558044	0					
ANR	558079	ArgumentList	pfn		558044	1					
ANR	558080	Argument	pfn		558044	0					
ANR	558081	Identifier	pfn		558044	0					
ANR	558082	Argument	a_offset		558044	1					
ANR	558083	Identifier	a_offset		558044	0					
ANR	558084	Argument	s_offset		558044	2					
ANR	558085	Identifier	s_offset		558044	0					
ANR	558086	IfStatement	if ( code < 0 )		558044	1					
ANR	558087	Condition	code < 0	733:16:24720:24727	558044	0	True				
ANR	558088	RelationalExpression	code < 0		558044	0		<			
ANR	558089	Identifier	code		558044	0					
ANR	558090	PrimaryExpression	0		558044	1					
ANR	558091	ReturnStatement	return code ;	734:16:24746:24757	558044	1	True				
ANR	558092	Identifier	code		558044	0					
ANR	558093	IfStatement	if ( pfn -> params . Order == 3 )		558044	1					
ANR	558094	Condition	pfn -> params . Order == 3	736:12:24781:24802	558044	0	True				
ANR	558095	EqualityExpression	pfn -> params . Order == 3		558044	0		==			
ANR	558096	MemberAccess	pfn -> params . Order		558044	0					
ANR	558097	PtrMemberAccess	pfn -> params		558044	0					
ANR	558098	Identifier	pfn		558044	0					
ANR	558099	Identifier	params		558044	1					
ANR	558100	Identifier	Order		558044	1					
ANR	558101	PrimaryExpression	3		558044	1					
ANR	558102	CompoundStatement		10:36:274:274	558044	1					
ANR	558103	ExpressionStatement	"code = make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"	737:12:24819:24887	558044	0	True				
ANR	558104	AssignmentExpression	"code = make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"		558044	0		=			
ANR	558105	Identifier	code		558044	0					
ANR	558106	CallExpression	"make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"		558044	1					
ANR	558107	Callee	make_interpolation_tensor		558044	0					
ANR	558108	Identifier	make_interpolation_tensor		558044	0					
ANR	558109	ArgumentList	pfn		558044	1					
ANR	558110	Argument	pfn		558044	0					
ANR	558111	Identifier	pfn		558044	0					
ANR	558112	Argument	I		558044	1					
ANR	558113	Identifier	I		558044	0					
ANR	558114	Argument	T		558044	2					
ANR	558115	Identifier	T		558044	0					
ANR	558116	Argument	0		558044	3					
ANR	558117	PrimaryExpression	0		558044	0					
ANR	558118	Argument	0		558044	4					
ANR	558119	PrimaryExpression	0		558044	0					
ANR	558120	Argument	pfn -> params . m - 1		558044	5					
ANR	558121	AdditiveExpression	pfn -> params . m - 1		558044	0		-			
ANR	558122	MemberAccess	pfn -> params . m		558044	0					
ANR	558123	PtrMemberAccess	pfn -> params		558044	0					
ANR	558124	Identifier	pfn		558044	0					
ANR	558125	Identifier	params		558044	1					
ANR	558126	Identifier	m		558044	1					
ANR	558127	PrimaryExpression	1		558044	1					
ANR	558128	IfStatement	if ( code < 0 )		558044	1					
ANR	558129	Condition	code < 0	738:16:24905:24912	558044	0	True				
ANR	558130	RelationalExpression	code < 0		558044	0		<			
ANR	558131	Identifier	code		558044	0					
ANR	558132	PrimaryExpression	0		558044	1					
ANR	558133	ReturnStatement	return code ;	739:16:24931:24942	558044	1	True				
ANR	558134	Identifier	code		558044	0					
ANR	558135	ElseStatement	else		558044	0					
ANR	558136	CompoundStatement		20:8:577:613	558044	0					
ANR	558137	IdentifierDeclStatement	int i ;	742:8:24975:24980	558044	0	True				
ANR	558138	IdentifierDecl	i		558044	0					
ANR	558139	IdentifierDeclType	int		558044	0					
ANR	558140	Identifier	i		558044	1					
ANR	558141	IdentifierDeclStatement	int i0 = ( int ) floor ( T0 [ ii ] ) ;	743:8:24990:25017	558044	1	True				
ANR	558142	IdentifierDecl	i0 = ( int ) floor ( T0 [ ii ] )		558044	0					
ANR	558143	IdentifierDeclType	int		558044	0					
ANR	558144	Identifier	i0		558044	1					
ANR	558145	AssignmentExpression	i0 = ( int ) floor ( T0 [ ii ] )		558044	2		=			
ANR	558146	Identifier	i0		558044	0					
ANR	558147	CastExpression	( int ) floor ( T0 [ ii ] )		558044	1					
ANR	558148	CastTarget	int		558044	0					
ANR	558149	CallExpression	floor ( T0 [ ii ] )		558044	1					
ANR	558150	Callee	floor		558044	0					
ANR	558151	Identifier	floor		558044	0					
ANR	558152	ArgumentList	T0 [ ii ]		558044	1					
ANR	558153	Argument	T0 [ ii ]		558044	0					
ANR	558154	ArrayIndexing	T0 [ ii ]		558044	0					
ANR	558155	Identifier	T0		558044	0					
ANR	558156	Identifier	ii		558044	1					
ANR	558157	IdentifierDeclStatement	int i1 = ( int ) ceil ( T1 [ ii ] ) ;	744:8:25027:25053	558044	2	True				
ANR	558158	IdentifierDecl	i1 = ( int ) ceil ( T1 [ ii ] )		558044	0					
ANR	558159	IdentifierDeclType	int		558044	0					
ANR	558160	Identifier	i1		558044	1					
ANR	558161	AssignmentExpression	i1 = ( int ) ceil ( T1 [ ii ] )		558044	2		=			
ANR	558162	Identifier	i1		558044	0					
ANR	558163	CastExpression	( int ) ceil ( T1 [ ii ] )		558044	1					
ANR	558164	CastTarget	int		558044	0					
ANR	558165	CallExpression	ceil ( T1 [ ii ] )		558044	1					
ANR	558166	Callee	ceil		558044	0					
ANR	558167	Identifier	ceil		558044	0					
ANR	558168	ArgumentList	T1 [ ii ]		558044	1					
ANR	558169	Argument	T1 [ ii ]		558044	0					
ANR	558170	ArrayIndexing	T1 [ ii ]		558044	0					
ANR	558171	Identifier	T1		558044	0					
ANR	558172	Identifier	ii		558044	1					
ANR	558173	IdentifierDeclStatement	int sa = pfn -> params . array_step [ ii ] ;	745:8:25063:25098	558044	3	True				
ANR	558174	IdentifierDecl	sa = pfn -> params . array_step [ ii ]		558044	0					
ANR	558175	IdentifierDeclType	int		558044	0					
ANR	558176	Identifier	sa		558044	1					
ANR	558177	AssignmentExpression	sa = pfn -> params . array_step [ ii ]		558044	2		=			
ANR	558178	Identifier	sa		558044	0					
ANR	558179	ArrayIndexing	pfn -> params . array_step [ ii ]		558044	1					
ANR	558180	MemberAccess	pfn -> params . array_step		558044	0					
ANR	558181	PtrMemberAccess	pfn -> params		558044	0					
ANR	558182	Identifier	pfn		558044	0					
ANR	558183	Identifier	params		558044	1					
ANR	558184	Identifier	array_step		558044	1					
ANR	558185	Identifier	ii		558044	1					
ANR	558186	IdentifierDeclStatement	int ss = pfn -> params . stream_step [ ii ] ;	746:8:25108:25144	558044	4	True				
ANR	558187	IdentifierDecl	ss = pfn -> params . stream_step [ ii ]		558044	0					
ANR	558188	IdentifierDeclType	int		558044	0					
ANR	558189	Identifier	ss		558044	1					
ANR	558190	AssignmentExpression	ss = pfn -> params . stream_step [ ii ]		558044	2		=			
ANR	558191	Identifier	ss		558044	0					
ANR	558192	ArrayIndexing	pfn -> params . stream_step [ ii ]		558044	1					
ANR	558193	MemberAccess	pfn -> params . stream_step		558044	0					
ANR	558194	PtrMemberAccess	pfn -> params		558044	0					
ANR	558195	Identifier	pfn		558044	0					
ANR	558196	Identifier	params		558044	1					
ANR	558197	Identifier	stream_step		558044	1					
ANR	558198	Identifier	ii		558044	1					
ANR	558199	IfStatement	if ( i0 < 0 || i0 >= pfn -> params . Size [ ii ] )		558044	5					
ANR	558200	Condition	i0 < 0 || i0 >= pfn -> params . Size [ ii ]	748:12:25159:25194	558044	0	True				
ANR	558201	OrExpression	i0 < 0 || i0 >= pfn -> params . Size [ ii ]		558044	0		||			
ANR	558202	RelationalExpression	i0 < 0		558044	0		<			
ANR	558203	Identifier	i0		558044	0					
ANR	558204	PrimaryExpression	0		558044	1					
ANR	558205	RelationalExpression	i0 >= pfn -> params . Size [ ii ]		558044	1		>=			
ANR	558206	Identifier	i0		558044	0					
ANR	558207	ArrayIndexing	pfn -> params . Size [ ii ]		558044	1					
ANR	558208	MemberAccess	pfn -> params . Size		558044	0					
ANR	558209	PtrMemberAccess	pfn -> params		558044	0					
ANR	558210	Identifier	pfn		558044	0					
ANR	558211	Identifier	params		558044	1					
ANR	558212	Identifier	Size		558044	1					
ANR	558213	Identifier	ii		558044	1					
ANR	558214	ExpressionStatement	return_error ( gs_error_unregistered )	749:12:25209:25244	558044	1	True				
ANR	558215	CallExpression	return_error ( gs_error_unregistered )		558044	0					
ANR	558216	Callee	return_error		558044	0					
ANR	558217	Identifier	return_error		558044	0					
ANR	558218	ArgumentList	gs_error_unregistered		558044	1					
ANR	558219	Argument	gs_error_unregistered		558044	0					
ANR	558220	Identifier	gs_error_unregistered		558044	0					
ANR	558221	IfStatement	if ( i1 < 0 || i1 >= pfn -> params . Size [ ii ] )		558044	6					
ANR	558222	Condition	i1 < 0 || i1 >= pfn -> params . Size [ ii ]	750:12:25281:25316	558044	0	True				
ANR	558223	OrExpression	i1 < 0 || i1 >= pfn -> params . Size [ ii ]		558044	0		||			
ANR	558224	RelationalExpression	i1 < 0		558044	0		<			
ANR	558225	Identifier	i1		558044	0					
ANR	558226	PrimaryExpression	0		558044	1					
ANR	558227	RelationalExpression	i1 >= pfn -> params . Size [ ii ]		558044	1		>=			
ANR	558228	Identifier	i1		558044	0					
ANR	558229	ArrayIndexing	pfn -> params . Size [ ii ]		558044	1					
ANR	558230	MemberAccess	pfn -> params . Size		558044	0					
ANR	558231	PtrMemberAccess	pfn -> params		558044	0					
ANR	558232	Identifier	pfn		558044	0					
ANR	558233	Identifier	params		558044	1					
ANR	558234	Identifier	Size		558044	1					
ANR	558235	Identifier	ii		558044	1					
ANR	558236	ExpressionStatement	return_error ( gs_error_unregistered )	751:12:25331:25366	558044	1	True				
ANR	558237	CallExpression	return_error ( gs_error_unregistered )		558044	0					
ANR	558238	Callee	return_error		558044	0					
ANR	558239	Identifier	return_error		558044	0					
ANR	558240	ArgumentList	gs_error_unregistered		558044	1					
ANR	558241	Argument	gs_error_unregistered		558044	0					
ANR	558242	Identifier	gs_error_unregistered		558044	0					
ANR	558243	ExpressionStatement	I [ ii ] = i0	752:8:25399:25409	558044	7	True				
ANR	558244	AssignmentExpression	I [ ii ] = i0		558044	0		=			
ANR	558245	ArrayIndexing	I [ ii ]		558044	0					
ANR	558246	Identifier	I		558044	0					
ANR	558247	Identifier	ii		558044	1					
ANR	558248	Identifier	i0		558044	1					
ANR	558249	ExpressionStatement	T [ ii ] = ( i1 > i0 ? 1 : 0 )	753:8:25419:25444	558044	8	True				
ANR	558250	AssignmentExpression	T [ ii ] = ( i1 > i0 ? 1 : 0 )		558044	0		=			
ANR	558251	ArrayIndexing	T [ ii ]		558044	0					
ANR	558252	Identifier	T		558044	0					
ANR	558253	Identifier	ii		558044	1					
ANR	558254	ConditionalExpression	i1 > i0 ? 1 : 0		558044	1					
ANR	558255	Condition	i1 > i0		558044	0					
ANR	558256	RelationalExpression	i1 > i0		558044	0		>			
ANR	558257	Identifier	i1		558044	0					
ANR	558258	Identifier	i0		558044	1					
ANR	558259	PrimaryExpression	1		558044	1					
ANR	558260	PrimaryExpression	0		558044	2					
ANR	558261	ForStatement	for ( i = i0 ; i <= i1 ; i ++ )		558044	9					
ANR	558262	ForInit	i = i0 ;	754:13:25459:25465	558044	0	True				
ANR	558263	AssignmentExpression	i = i0		558044	0		=			
ANR	558264	Identifier	i		558044	0					
ANR	558265	Identifier	i0		558044	1					
ANR	558266	Condition	i <= i1	754:21:25467:25473	558044	1	True				
ANR	558267	RelationalExpression	i <= i1		558044	0		<=			
ANR	558268	Identifier	i		558044	0					
ANR	558269	Identifier	i1		558044	1					
ANR	558270	PostIncDecOperationExpression	i ++	754:30:25476:25478	558044	2	True				
ANR	558271	Identifier	i		558044	0					
ANR	558272	IncDec	++		558044	1					
ANR	558273	CompoundStatement		28:35:950:950	558044	3					
ANR	558274	ExpressionStatement	"code = make_interpolation_nodes ( pfn , T0 , T1 , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"	755:12:25495:25619	558044	0	True				
ANR	558275	AssignmentExpression	"code = make_interpolation_nodes ( pfn , T0 , T1 , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"		558044	0		=			
ANR	558276	Identifier	code		558044	0					
ANR	558277	CallExpression	"make_interpolation_nodes ( pfn , T0 , T1 , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"		558044	1					
ANR	558278	Callee	make_interpolation_nodes		558044	0					
ANR	558279	Identifier	make_interpolation_nodes		558044	0					
ANR	558280	ArgumentList	pfn		558044	1					
ANR	558281	Argument	pfn		558044	0					
ANR	558282	Identifier	pfn		558044	0					
ANR	558283	Argument	T0		558044	1					
ANR	558284	Identifier	T0		558044	0					
ANR	558285	Argument	T1		558044	2					
ANR	558286	Identifier	T1		558044	0					
ANR	558287	Argument	I		558044	3					
ANR	558288	Identifier	I		558044	0					
ANR	558289	Argument	T		558044	4					
ANR	558290	Identifier	T		558044	0					
ANR	558291	Argument	a_offset + i * sa		558044	5					
ANR	558292	AdditiveExpression	a_offset + i * sa		558044	0		+			
ANR	558293	Identifier	a_offset		558044	0					
ANR	558294	MultiplicativeExpression	i * sa		558044	1		*			
ANR	558295	Identifier	i		558044	0					
ANR	558296	Identifier	sa		558044	1					
ANR	558297	Argument	s_offset + i * ss		558044	6					
ANR	558298	AdditiveExpression	s_offset + i * ss		558044	0		+			
ANR	558299	Identifier	s_offset		558044	0					
ANR	558300	MultiplicativeExpression	i * ss		558044	1		*			
ANR	558301	Identifier	i		558044	0					
ANR	558302	Identifier	ss		558044	1					
ANR	558303	Argument	ii - 1		558044	7					
ANR	558304	AdditiveExpression	ii - 1		558044	0		-			
ANR	558305	Identifier	ii		558044	0					
ANR	558306	PrimaryExpression	1		558044	1					
ANR	558307	IfStatement	if ( code < 0 )		558044	1					
ANR	558308	Condition	code < 0	757:16:25637:25644	558044	0	True				
ANR	558309	RelationalExpression	code < 0		558044	0		<			
ANR	558310	Identifier	code		558044	0					
ANR	558311	PrimaryExpression	0		558044	1					
ANR	558312	ReturnStatement	return code ;	758:16:25663:25674	558044	1	True				
ANR	558313	Identifier	code		558044	0					
ANR	558314	ReturnStatement	return 0 ;	761:4:25696:25704	558044	2	True				
ANR	558315	PrimaryExpression	0		558044	0					
ANR	558316	ReturnType	static inline int		558044	1					
ANR	558317	Identifier	make_interpolation_nodes		558044	2					
ANR	558318	ParameterList	"const gs_function_Sd_t * pfn , double * T0 , double * T1 , int * I , double * T , int a_offset , int s_offset , int ii"		558044	3					
ANR	558319	Parameter	const gs_function_Sd_t * pfn	724:25:24366:24392	558044	0	True				
ANR	558320	ParameterType	const gs_function_Sd_t *		558044	0					
ANR	558321	Identifier	pfn		558044	1					
ANR	558322	Parameter	double * T0	724:54:24395:24404	558044	1	True				
ANR	558323	ParameterType	double *		558044	0					
ANR	558324	Identifier	T0		558044	1					
ANR	558325	Parameter	double * T1	724:66:24407:24416	558044	2	True				
ANR	558326	ParameterType	double *		558044	0					
ANR	558327	Identifier	T1		558044	1					
ANR	558328	Parameter	int * I	725:28:24447:24452	558044	3	True				
ANR	558329	ParameterType	int *		558044	0					
ANR	558330	Identifier	I		558044	1					
ANR	558331	Parameter	double * T	725:36:24455:24463	558044	4	True				
ANR	558332	ParameterType	double *		558044	0					
ANR	558333	Identifier	T		558044	1					
ANR	558334	Parameter	int a_offset	726:28:24494:24505	558044	5	True				
ANR	558335	ParameterType	int		558044	0					
ANR	558336	Identifier	a_offset		558044	1					
ANR	558337	Parameter	int s_offset	726:42:24508:24519	558044	6	True				
ANR	558338	ParameterType	int		558044	0					
ANR	558339	Identifier	s_offset		558044	1					
ANR	558340	Parameter	int ii	726:56:24522:24527	558044	7	True				
ANR	558341	ParameterType	int		558044	0					
ANR	558342	Identifier	ii		558044	1					
ANR	558343	CFGEntryNode	ENTRY		558044		True				
ANR	558344	CFGExitNode	EXIT		558044		True				
ANR	558345	Symbol	* T1		558044						
ANR	558346	Symbol	make_interpolation_nodes		558044						
ANR	558347	Symbol	* T0		558044						
ANR	558348	Symbol	pfn -> params . m		558044						
ANR	558349	Symbol	gs_error_unregistered		558044						
ANR	558350	Symbol	code		558044						
ANR	558351	Symbol	pfn -> params . Size		558044						
ANR	558352	Symbol	* ii		558044						
ANR	558353	Symbol	a_offset		558044						
ANR	558354	Symbol	I		558044						
ANR	558355	Symbol	* * pfn		558044						
ANR	558356	Symbol	sa		558044						
ANR	558357	Symbol	double_stub		558044						
ANR	558358	Symbol	pfn -> params . pole		558044						
ANR	558359	Symbol	s_offset		558044						
ANR	558360	Symbol	pfn -> params . Order		558044						
ANR	558361	Symbol	* I		558044						
ANR	558362	Symbol	T		558044						
ANR	558363	Symbol	pfn -> params . stream_step		558044						
ANR	558364	Symbol	pfn -> params . array_step		558044						
ANR	558365	Symbol	* ( pfn -> params . pole + a_offset )		558044						
ANR	558366	Symbol	T0		558044						
ANR	558367	Symbol	POLE_CACHE_IGNORE		558044						
ANR	558368	Symbol	floor		558044						
ANR	558369	Symbol	T1		558044						
ANR	558370	Symbol	* pfn -> params . stream_step		558044						
ANR	558371	Symbol	* T		558044						
ANR	558372	Symbol	ii		558044						
ANR	558373	Symbol	make_interpolation_tensor		558044						
ANR	558374	Symbol	* pfn -> params . array_step		558044						
ANR	558375	Symbol	ss		558044						
ANR	558376	Symbol	* pfn		558044						
ANR	558377	Symbol	i0		558044						
ANR	558378	Symbol	i1		558044						
ANR	558379	Symbol	* pfn -> params . Size		558044						
ANR	558380	Symbol	i		558044						
ANR	558381	Symbol	ceil		558044						
ANR	558382	Symbol	* pfn -> params . pole		558044						
ANR	558383	Symbol	* a_offset		558044						
ANR	558384	Symbol	pfn		558044						
ANR	558385	Symbol	load_vector		558044						
ANR	558386	Symbol	pfn -> params		558044						
ANR	558387	Symbol	* pfn -> params		558044						
ANR	558388	Function	evaluate_from_tenzor	764:0:25709:26628							
ANR	558389	FunctionDef	"evaluate_from_tenzor (const gs_function_Sd_t * pfn , int * I , double * T , int offset , int ii , double * y)"		558388	0					
ANR	558390	CompoundStatement		766:0:25827:26628	558388	0					
ANR	558391	IdentifierDeclStatement	"int s = pfn -> params . array_step [ ii ] , k , l , code ;"	767:4:25833:25879	558388	0	True				
ANR	558392	IdentifierDecl	s = pfn -> params . array_step [ ii ]		558388	0					
ANR	558393	IdentifierDeclType	int		558388	0					
ANR	558394	Identifier	s		558388	1					
ANR	558395	AssignmentExpression	s = pfn -> params . array_step [ ii ]		558388	2		=			
ANR	558396	Identifier	s		558388	0					
ANR	558397	ArrayIndexing	pfn -> params . array_step [ ii ]		558388	1					
ANR	558398	MemberAccess	pfn -> params . array_step		558388	0					
ANR	558399	PtrMemberAccess	pfn -> params		558388	0					
ANR	558400	Identifier	pfn		558388	0					
ANR	558401	Identifier	params		558388	1					
ANR	558402	Identifier	array_step		558388	1					
ANR	558403	Identifier	ii		558388	1					
ANR	558404	IdentifierDecl	k		558388	1					
ANR	558405	IdentifierDeclType	int		558388	0					
ANR	558406	Identifier	k		558388	1					
ANR	558407	IdentifierDecl	l		558388	2					
ANR	558408	IdentifierDeclType	int		558388	0					
ANR	558409	Identifier	l		558388	1					
ANR	558410	IdentifierDecl	code		558388	3					
ANR	558411	IdentifierDeclType	int		558388	0					
ANR	558412	Identifier	code		558388	1					
ANR	558413	IfStatement	if ( ii < 0 )		558388	1					
ANR	558414	Condition	ii < 0	769:8:25890:25895	558388	0	True				
ANR	558415	RelationalExpression	ii < 0		558388	0		<			
ANR	558416	Identifier	ii		558388	0					
ANR	558417	PrimaryExpression	0		558388	1					
ANR	558418	CompoundStatement		4:16:70:70	558388	1					
ANR	558419	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		558388	0					
ANR	558420	ForInit	k = 0 ;	770:13:25913:25918	558388	0	True				
ANR	558421	AssignmentExpression	k = 0		558388	0		=			
ANR	558422	Identifier	k		558388	0					
ANR	558423	PrimaryExpression	0		558388	1					
ANR	558424	Condition	k < pfn -> params . n	770:20:25920:25936	558388	1	True				
ANR	558425	RelationalExpression	k < pfn -> params . n		558388	0		<			
ANR	558426	Identifier	k		558388	0					
ANR	558427	MemberAccess	pfn -> params . n		558388	1					
ANR	558428	PtrMemberAccess	pfn -> params		558388	0					
ANR	558429	Identifier	pfn		558388	0					
ANR	558430	Identifier	params		558388	1					
ANR	558431	Identifier	n		558388	1					
ANR	558432	PostIncDecOperationExpression	k ++	770:39:25939:25941	558388	2	True				
ANR	558433	Identifier	k		558388	0					
ANR	558434	IncDec	++		558388	1					
ANR	558435	ExpressionStatement	y [ k ] = * ( pfn -> params . pole + offset + k )	771:12:25956:25995	558388	3	True				
ANR	558436	AssignmentExpression	y [ k ] = * ( pfn -> params . pole + offset + k )		558388	0		=			
ANR	558437	ArrayIndexing	y [ k ]		558388	0					
ANR	558438	Identifier	y		558388	0					
ANR	558439	Identifier	k		558388	1					
ANR	558440	UnaryOperationExpression	* ( pfn -> params . pole + offset + k )		558388	1					
ANR	558441	UnaryOperator	*		558388	0					
ANR	558442	AdditiveExpression	pfn -> params . pole + offset + k		558388	1		+			
ANR	558443	MemberAccess	pfn -> params . pole		558388	0					
ANR	558444	PtrMemberAccess	pfn -> params		558388	0					
ANR	558445	Identifier	pfn		558388	0					
ANR	558446	Identifier	params		558388	1					
ANR	558447	Identifier	pole		558388	1					
ANR	558448	AdditiveExpression	offset + k		558388	1		+			
ANR	558449	Identifier	offset		558388	0					
ANR	558450	Identifier	k		558388	1					
ANR	558451	ElseStatement	else		558388	0					
ANR	558452	IfStatement	if ( T [ ii ] == 0 )		558388	0					
ANR	558453	Condition	T [ ii ] == 0	772:15:26012:26021	558388	0	True				
ANR	558454	EqualityExpression	T [ ii ] == 0		558388	0		==			
ANR	558455	ArrayIndexing	T [ ii ]		558388	0					
ANR	558456	Identifier	T		558388	0					
ANR	558457	Identifier	ii		558388	1					
ANR	558458	PrimaryExpression	0		558388	1					
ANR	558459	CompoundStatement		7:27:196:196	558388	1					
ANR	558460	ReturnStatement	"return evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] , ii - 1 , y ) ;"	773:8:26034:26103	558388	0	True				
ANR	558461	CallExpression	"evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] , ii - 1 , y )"		558388	0					
ANR	558462	Callee	evaluate_from_tenzor		558388	0					
ANR	558463	Identifier	evaluate_from_tenzor		558388	0					
ANR	558464	ArgumentList	pfn		558388	1					
ANR	558465	Argument	pfn		558388	0					
ANR	558466	Identifier	pfn		558388	0					
ANR	558467	Argument	I		558388	1					
ANR	558468	Identifier	I		558388	0					
ANR	558469	Argument	T		558388	2					
ANR	558470	Identifier	T		558388	0					
ANR	558471	Argument	offset + s * I [ ii ]		558388	3					
ANR	558472	AdditiveExpression	offset + s * I [ ii ]		558388	0		+			
ANR	558473	Identifier	offset		558388	0					
ANR	558474	MultiplicativeExpression	s * I [ ii ]		558388	1		*			
ANR	558475	Identifier	s		558388	0					
ANR	558476	ArrayIndexing	I [ ii ]		558388	1					
ANR	558477	Identifier	I		558388	0					
ANR	558478	Identifier	ii		558388	1					
ANR	558479	Argument	ii - 1		558388	4					
ANR	558480	AdditiveExpression	ii - 1		558388	0		-			
ANR	558481	Identifier	ii		558388	0					
ANR	558482	PrimaryExpression	1		558388	1					
ANR	558483	Argument	y		558388	5					
ANR	558484	Identifier	y		558388	0					
ANR	558485	ElseStatement	else		558388	0					
ANR	558486	CompoundStatement		10:8:298:328	558388	0					
ANR	558487	IdentifierDeclStatement	"double t0 = T [ ii ] , t1 = 1 - t0 ;"	775:8:26126:26156	558388	0	True				
ANR	558488	IdentifierDecl	t0 = T [ ii ]		558388	0					
ANR	558489	IdentifierDeclType	double		558388	0					
ANR	558490	Identifier	t0		558388	1					
ANR	558491	AssignmentExpression	t0 = T [ ii ]		558388	2		=			
ANR	558492	Identifier	t0		558388	0					
ANR	558493	ArrayIndexing	T [ ii ]		558388	1					
ANR	558494	Identifier	T		558388	0					
ANR	558495	Identifier	ii		558388	1					
ANR	558496	IdentifierDecl	t1 = 1 - t0		558388	1					
ANR	558497	IdentifierDeclType	double		558388	0					
ANR	558498	Identifier	t1		558388	1					
ANR	558499	AssignmentExpression	t1 = 1 - t0		558388	2		=			
ANR	558500	Identifier	t1		558388	0					
ANR	558501	AdditiveExpression	1 - t0		558388	1		-			
ANR	558502	PrimaryExpression	1		558388	0					
ANR	558503	Identifier	t0		558388	1					
ANR	558504	Statement	double	776:8:26166:26171	558388	1	True				
ANR	558505	ExpressionStatement	p [ 4 ] [ max_Sd_n ]	776:15:26173:26187	558388	2	True				
ANR	558506	ArrayIndexing	p [ 4 ] [ max_Sd_n ]		558388	0					
ANR	558507	ArrayIndexing	p [ 4 ]		558388	0					
ANR	558508	Identifier	p		558388	0					
ANR	558509	PrimaryExpression	4		558388	1					
ANR	558510	Identifier	max_Sd_n		558388	1					
ANR	558511	ForStatement	for ( l = 0 ; l < 4 ; l ++ )		558388	3					
ANR	558512	ForInit	l = 0 ;	778:13:26203:26208	558388	0	True				
ANR	558513	AssignmentExpression	l = 0		558388	0		=			
ANR	558514	Identifier	l		558388	0					
ANR	558515	PrimaryExpression	0		558388	1					
ANR	558516	Condition	l < 4	778:20:26210:26214	558388	1	True				
ANR	558517	RelationalExpression	l < 4		558388	0		<			
ANR	558518	Identifier	l		558388	0					
ANR	558519	PrimaryExpression	4		558388	1					
ANR	558520	PostIncDecOperationExpression	l ++	778:27:26217:26219	558388	2	True				
ANR	558521	Identifier	l		558388	0					
ANR	558522	IncDec	++		558388	1					
ANR	558523	CompoundStatement		13:32:394:394	558388	3					
ANR	558524	ExpressionStatement	"code = evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] + l * ( s / 3 ) , ii - 1 , p [ l ] )"	779:12:26236:26322	558388	0	True				
ANR	558525	AssignmentExpression	"code = evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] + l * ( s / 3 ) , ii - 1 , p [ l ] )"		558388	0		=			
ANR	558526	Identifier	code		558388	0					
ANR	558527	CallExpression	"evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] + l * ( s / 3 ) , ii - 1 , p [ l ] )"		558388	1					
ANR	558528	Callee	evaluate_from_tenzor		558388	0					
ANR	558529	Identifier	evaluate_from_tenzor		558388	0					
ANR	558530	ArgumentList	pfn		558388	1					
ANR	558531	Argument	pfn		558388	0					
ANR	558532	Identifier	pfn		558388	0					
ANR	558533	Argument	I		558388	1					
ANR	558534	Identifier	I		558388	0					
ANR	558535	Argument	T		558388	2					
ANR	558536	Identifier	T		558388	0					
ANR	558537	Argument	offset + s * I [ ii ] + l * ( s / 3 )		558388	3					
ANR	558538	AdditiveExpression	offset + s * I [ ii ] + l * ( s / 3 )		558388	0		+			
ANR	558539	Identifier	offset		558388	0					
ANR	558540	AdditiveExpression	s * I [ ii ] + l * ( s / 3 )		558388	1		+			
ANR	558541	MultiplicativeExpression	s * I [ ii ]		558388	0		*			
ANR	558542	Identifier	s		558388	0					
ANR	558543	ArrayIndexing	I [ ii ]		558388	1					
ANR	558544	Identifier	I		558388	0					
ANR	558545	Identifier	ii		558388	1					
ANR	558546	MultiplicativeExpression	l * ( s / 3 )		558388	1		*			
ANR	558547	Identifier	l		558388	0					
ANR	558548	MultiplicativeExpression	s / 3		558388	1		/			
ANR	558549	Identifier	s		558388	0					
ANR	558550	PrimaryExpression	3		558388	1					
ANR	558551	Argument	ii - 1		558388	4					
ANR	558552	AdditiveExpression	ii - 1		558388	0		-			
ANR	558553	Identifier	ii		558388	0					
ANR	558554	PrimaryExpression	1		558388	1					
ANR	558555	Argument	p [ l ]		558388	5					
ANR	558556	ArrayIndexing	p [ l ]		558388	0					
ANR	558557	Identifier	p		558388	0					
ANR	558558	Identifier	l		558388	1					
ANR	558559	IfStatement	if ( code < 0 )		558388	1					
ANR	558560	Condition	code < 0	780:16:26340:26347	558388	0	True				
ANR	558561	RelationalExpression	code < 0		558388	0		<			
ANR	558562	Identifier	code		558388	0					
ANR	558563	PrimaryExpression	0		558388	1					
ANR	558564	ReturnStatement	return code ;	781:16:26366:26377	558388	1	True				
ANR	558565	Identifier	code		558388	0					
ANR	558566	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		558388	4					
ANR	558567	ForInit	k = 0 ;	783:13:26402:26407	558388	0	True				
ANR	558568	AssignmentExpression	k = 0		558388	0		=			
ANR	558569	Identifier	k		558388	0					
ANR	558570	PrimaryExpression	0		558388	1					
ANR	558571	Condition	k < pfn -> params . n	783:20:26409:26425	558388	1	True				
ANR	558572	RelationalExpression	k < pfn -> params . n		558388	0		<			
ANR	558573	Identifier	k		558388	0					
ANR	558574	MemberAccess	pfn -> params . n		558388	1					
ANR	558575	PtrMemberAccess	pfn -> params		558388	0					
ANR	558576	Identifier	pfn		558388	0					
ANR	558577	Identifier	params		558388	1					
ANR	558578	Identifier	n		558388	1					
ANR	558579	PostIncDecOperationExpression	k ++	783:39:26428:26430	558388	2	True				
ANR	558580	Identifier	k		558388	0					
ANR	558581	IncDec	++		558388	1					
ANR	558582	ExpressionStatement	y [ k ] = p [ 0 ] [ k ] * t1 * t1 * t1 + p [ 1 ] [ k ] * t1 * t1 * t0 * 3 + p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0	784:12:26445:26606	558388	3	True				
ANR	558583	AssignmentExpression	y [ k ] = p [ 0 ] [ k ] * t1 * t1 * t1 + p [ 1 ] [ k ] * t1 * t1 * t0 * 3 + p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0		558388	0		=			
ANR	558584	ArrayIndexing	y [ k ]		558388	0					
ANR	558585	Identifier	y		558388	0					
ANR	558586	Identifier	k		558388	1					
ANR	558587	AdditiveExpression	p [ 0 ] [ k ] * t1 * t1 * t1 + p [ 1 ] [ k ] * t1 * t1 * t0 * 3 + p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0		558388	1		+			
ANR	558588	MultiplicativeExpression	p [ 0 ] [ k ] * t1 * t1 * t1		558388	0		*			
ANR	558589	ArrayIndexing	p [ 0 ] [ k ]		558388	0					
ANR	558590	ArrayIndexing	p [ 0 ]		558388	0					
ANR	558591	Identifier	p		558388	0					
ANR	558592	PrimaryExpression	0		558388	1					
ANR	558593	Identifier	k		558388	1					
ANR	558594	MultiplicativeExpression	t1 * t1 * t1		558388	1		*			
ANR	558595	Identifier	t1		558388	0					
ANR	558596	MultiplicativeExpression	t1 * t1		558388	1		*			
ANR	558597	Identifier	t1		558388	0					
ANR	558598	Identifier	t1		558388	1					
ANR	558599	AdditiveExpression	p [ 1 ] [ k ] * t1 * t1 * t0 * 3 + p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0		558388	1		+			
ANR	558600	MultiplicativeExpression	p [ 1 ] [ k ] * t1 * t1 * t0 * 3		558388	0		*			
ANR	558601	ArrayIndexing	p [ 1 ] [ k ]		558388	0					
ANR	558602	ArrayIndexing	p [ 1 ]		558388	0					
ANR	558603	Identifier	p		558388	0					
ANR	558604	PrimaryExpression	1		558388	1					
ANR	558605	Identifier	k		558388	1					
ANR	558606	MultiplicativeExpression	t1 * t1 * t0 * 3		558388	1		*			
ANR	558607	Identifier	t1		558388	0					
ANR	558608	MultiplicativeExpression	t1 * t0 * 3		558388	1		*			
ANR	558609	Identifier	t1		558388	0					
ANR	558610	MultiplicativeExpression	t0 * 3		558388	1		*			
ANR	558611	Identifier	t0		558388	0					
ANR	558612	PrimaryExpression	3		558388	1					
ANR	558613	AdditiveExpression	p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0		558388	1		+			
ANR	558614	MultiplicativeExpression	p [ 2 ] [ k ] * t1 * t0 * t0 * 3		558388	0		*			
ANR	558615	ArrayIndexing	p [ 2 ] [ k ]		558388	0					
ANR	558616	ArrayIndexing	p [ 2 ]		558388	0					
ANR	558617	Identifier	p		558388	0					
ANR	558618	PrimaryExpression	2		558388	1					
ANR	558619	Identifier	k		558388	1					
ANR	558620	MultiplicativeExpression	t1 * t0 * t0 * 3		558388	1		*			
ANR	558621	Identifier	t1		558388	0					
ANR	558622	MultiplicativeExpression	t0 * t0 * 3		558388	1		*			
ANR	558623	Identifier	t0		558388	0					
ANR	558624	MultiplicativeExpression	t0 * 3		558388	1		*			
ANR	558625	Identifier	t0		558388	0					
ANR	558626	PrimaryExpression	3		558388	1					
ANR	558627	MultiplicativeExpression	p [ 3 ] [ k ] * t0 * t0 * t0		558388	1		*			
ANR	558628	ArrayIndexing	p [ 3 ] [ k ]		558388	0					
ANR	558629	ArrayIndexing	p [ 3 ]		558388	0					
ANR	558630	Identifier	p		558388	0					
ANR	558631	PrimaryExpression	3		558388	1					
ANR	558632	Identifier	k		558388	1					
ANR	558633	MultiplicativeExpression	t0 * t0 * t0		558388	1		*			
ANR	558634	Identifier	t0		558388	0					
ANR	558635	MultiplicativeExpression	t0 * t0		558388	1		*			
ANR	558636	Identifier	t0		558388	0					
ANR	558637	Identifier	t0		558388	1					
ANR	558638	ReturnStatement	return 0 ;	789:4:26618:26626	558388	2	True				
ANR	558639	PrimaryExpression	0		558388	0					
ANR	558640	ReturnType	static inline int		558388	1					
ANR	558641	Identifier	evaluate_from_tenzor		558388	2					
ANR	558642	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int offset , int ii , double * y"		558388	3					
ANR	558643	Parameter	const gs_function_Sd_t * pfn	765:21:25748:25774	558388	0	True				
ANR	558644	ParameterType	const gs_function_Sd_t *		558388	0					
ANR	558645	Identifier	pfn		558388	1					
ANR	558646	Parameter	int * I	765:50:25777:25782	558388	1	True				
ANR	558647	ParameterType	int *		558388	0					
ANR	558648	Identifier	I		558388	1					
ANR	558649	Parameter	double * T	765:58:25785:25793	558388	2	True				
ANR	558650	ParameterType	double *		558388	0					
ANR	558651	Identifier	T		558388	1					
ANR	558652	Parameter	int offset	765:69:25796:25805	558388	3	True				
ANR	558653	ParameterType	int		558388	0					
ANR	558654	Identifier	offset		558388	1					
ANR	558655	Parameter	int ii	765:81:25808:25813	558388	4	True				
ANR	558656	ParameterType	int		558388	0					
ANR	558657	Identifier	ii		558388	1					
ANR	558658	Parameter	double * y	765:89:25816:25824	558388	5	True				
ANR	558659	ParameterType	double *		558388	0					
ANR	558660	Identifier	y		558388	1					
ANR	558661	CFGEntryNode	ENTRY		558388		True				
ANR	558662	CFGExitNode	EXIT		558388		True				
ANR	558663	Symbol	code		558388						
ANR	558664	Symbol	pfn -> params . n		558388						
ANR	558665	Symbol	* y		558388						
ANR	558666	Symbol	* ii		558388						
ANR	558667	Symbol	I		558388						
ANR	558668	Symbol	* ( pfn -> params . pole + offset + k )		558388						
ANR	558669	Symbol	* * pfn		558388						
ANR	558670	Symbol	pfn -> params . pole		558388						
ANR	558671	Symbol	* I		558388						
ANR	558672	Symbol	T		558388						
ANR	558673	Symbol	pfn -> params . array_step		558388						
ANR	558674	Symbol	* * p		558388						
ANR	558675	Symbol	* T		558388						
ANR	558676	Symbol	max_Sd_n		558388						
ANR	558677	Symbol	ii		558388						
ANR	558678	Symbol	* pfn -> params . array_step		558388						
ANR	558679	Symbol	* pfn		558388						
ANR	558680	Symbol	offset		558388						
ANR	558681	Symbol	k		558388						
ANR	558682	Symbol	l		558388						
ANR	558683	Symbol	evaluate_from_tenzor		558388						
ANR	558684	Symbol	p		558388						
ANR	558685	Symbol	* pfn -> params . pole		558388						
ANR	558686	Symbol	s		558388						
ANR	558687	Symbol	* k		558388						
ANR	558688	Symbol	* l		558388						
ANR	558689	Symbol	pfn		558388						
ANR	558690	Symbol	y		558388						
ANR	558691	Symbol	* offset		558388						
ANR	558692	Symbol	* p		558388						
ANR	558693	Symbol	t0		558388						
ANR	558694	Symbol	pfn -> params		558388						
ANR	558695	Symbol	t1		558388						
ANR	558696	Symbol	* pfn -> params		558388						
ANR	558697	Function	fn_Sd_evaluate_multicubic_cached	795:0:26786:27467							
ANR	558698	FunctionDef	"fn_Sd_evaluate_multicubic_cached (const gs_function_Sd_t * pfn , const float * in , float * out)"		558697	0					
ANR	558699	CompoundStatement		797:0:26888:27467	558697	0					
ANR	558700	IdentifierDeclStatement	"double T [ max_Sd_m ] , y [ max_Sd_n ] ;"	798:4:26894:26925	558697	0	True				
ANR	558701	IdentifierDecl	T [ max_Sd_m ]		558697	0					
ANR	558702	IdentifierDeclType	double [ max_Sd_m ]		558697	0					
ANR	558703	Identifier	T		558697	1					
ANR	558704	Identifier	max_Sd_m		558697	2					
ANR	558705	IdentifierDecl	y [ max_Sd_n ]		558697	1					
ANR	558706	IdentifierDeclType	double [ max_Sd_n ]		558697	0					
ANR	558707	Identifier	y		558697	1					
ANR	558708	Identifier	max_Sd_n		558697	2					
ANR	558709	IdentifierDeclStatement	"int I [ max_Sd_m ] , k , code ;"	799:4:26931:26955	558697	1	True				
ANR	558710	IdentifierDecl	I [ max_Sd_m ]		558697	0					
ANR	558711	IdentifierDeclType	int [ max_Sd_m ]		558697	0					
ANR	558712	Identifier	I		558697	1					
ANR	558713	Identifier	max_Sd_m		558697	2					
ANR	558714	IdentifierDecl	k		558697	1					
ANR	558715	IdentifierDeclType	int		558697	0					
ANR	558716	Identifier	k		558697	1					
ANR	558717	IdentifierDecl	code		558697	2					
ANR	558718	IdentifierDeclType	int		558697	0					
ANR	558719	Identifier	code		558697	1					
ANR	558720	ExpressionStatement	"decode_argument ( pfn , in , T , I )"	801:4:26962:26992	558697	2	True				
ANR	558721	CallExpression	"decode_argument ( pfn , in , T , I )"		558697	0					
ANR	558722	Callee	decode_argument		558697	0					
ANR	558723	Identifier	decode_argument		558697	0					
ANR	558724	ArgumentList	pfn		558697	1					
ANR	558725	Argument	pfn		558697	0					
ANR	558726	Identifier	pfn		558697	0					
ANR	558727	Argument	in		558697	1					
ANR	558728	Identifier	in		558697	0					
ANR	558729	Argument	T		558697	2					
ANR	558730	Identifier	T		558697	0					
ANR	558731	Argument	I		558697	3					
ANR	558732	Identifier	I		558697	0					
ANR	558733	ExpressionStatement	"code = make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"	802:4:26998:27066	558697	3	True				
ANR	558734	AssignmentExpression	"code = make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"		558697	0		=			
ANR	558735	Identifier	code		558697	0					
ANR	558736	CallExpression	"make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"		558697	1					
ANR	558737	Callee	make_interpolation_tensor		558697	0					
ANR	558738	Identifier	make_interpolation_tensor		558697	0					
ANR	558739	ArgumentList	pfn		558697	1					
ANR	558740	Argument	pfn		558697	0					
ANR	558741	Identifier	pfn		558697	0					
ANR	558742	Argument	I		558697	1					
ANR	558743	Identifier	I		558697	0					
ANR	558744	Argument	T		558697	2					
ANR	558745	Identifier	T		558697	0					
ANR	558746	Argument	0		558697	3					
ANR	558747	PrimaryExpression	0		558697	0					
ANR	558748	Argument	0		558697	4					
ANR	558749	PrimaryExpression	0		558697	0					
ANR	558750	Argument	pfn -> params . m - 1		558697	5					
ANR	558751	AdditiveExpression	pfn -> params . m - 1		558697	0		-			
ANR	558752	MemberAccess	pfn -> params . m		558697	0					
ANR	558753	PtrMemberAccess	pfn -> params		558697	0					
ANR	558754	Identifier	pfn		558697	0					
ANR	558755	Identifier	params		558697	1					
ANR	558756	Identifier	m		558697	1					
ANR	558757	PrimaryExpression	1		558697	1					
ANR	558758	IfStatement	if ( code < 0 )		558697	4					
ANR	558759	Condition	code < 0	803:8:27076:27083	558697	0	True				
ANR	558760	RelationalExpression	code < 0		558697	0		<			
ANR	558761	Identifier	code		558697	0					
ANR	558762	PrimaryExpression	0		558697	1					
ANR	558763	ReturnStatement	return code ;	804:8:27094:27105	558697	1	True				
ANR	558764	Identifier	code		558697	0					
ANR	558765	ExpressionStatement	"evaluate_from_tenzor ( pfn , I , T , 0 , pfn -> params . m - 1 , y )"	805:4:27111:27167	558697	5	True				
ANR	558766	CallExpression	"evaluate_from_tenzor ( pfn , I , T , 0 , pfn -> params . m - 1 , y )"		558697	0					
ANR	558767	Callee	evaluate_from_tenzor		558697	0					
ANR	558768	Identifier	evaluate_from_tenzor		558697	0					
ANR	558769	ArgumentList	pfn		558697	1					
ANR	558770	Argument	pfn		558697	0					
ANR	558771	Identifier	pfn		558697	0					
ANR	558772	Argument	I		558697	1					
ANR	558773	Identifier	I		558697	0					
ANR	558774	Argument	T		558697	2					
ANR	558775	Identifier	T		558697	0					
ANR	558776	Argument	0		558697	3					
ANR	558777	PrimaryExpression	0		558697	0					
ANR	558778	Argument	pfn -> params . m - 1		558697	4					
ANR	558779	AdditiveExpression	pfn -> params . m - 1		558697	0		-			
ANR	558780	MemberAccess	pfn -> params . m		558697	0					
ANR	558781	PtrMemberAccess	pfn -> params		558697	0					
ANR	558782	Identifier	pfn		558697	0					
ANR	558783	Identifier	params		558697	1					
ANR	558784	Identifier	m		558697	1					
ANR	558785	PrimaryExpression	1		558697	1					
ANR	558786	Argument	y		558697	5					
ANR	558787	Identifier	y		558697	0					
ANR	558788	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		558697	6					
ANR	558789	ForInit	k = 0 ;	806:9:27178:27183	558697	0	True				
ANR	558790	AssignmentExpression	k = 0		558697	0		=			
ANR	558791	Identifier	k		558697	0					
ANR	558792	PrimaryExpression	0		558697	1					
ANR	558793	Condition	k < pfn -> params . n	806:16:27185:27201	558697	1	True				
ANR	558794	RelationalExpression	k < pfn -> params . n		558697	0		<			
ANR	558795	Identifier	k		558697	0					
ANR	558796	MemberAccess	pfn -> params . n		558697	1					
ANR	558797	PtrMemberAccess	pfn -> params		558697	0					
ANR	558798	Identifier	pfn		558697	0					
ANR	558799	Identifier	params		558697	1					
ANR	558800	Identifier	n		558697	1					
ANR	558801	PostIncDecOperationExpression	k ++	806:35:27204:27206	558697	2	True				
ANR	558802	Identifier	k		558697	0					
ANR	558803	IncDec	++		558697	1					
ANR	558804	CompoundStatement		11:8:330:346	558697	3					
ANR	558805	IdentifierDeclStatement	double yk = y [ k ] ;	807:8:27219:27235	558697	0	True				
ANR	558806	IdentifierDecl	yk = y [ k ]		558697	0					
ANR	558807	IdentifierDeclType	double		558697	0					
ANR	558808	Identifier	yk		558697	1					
ANR	558809	AssignmentExpression	yk = y [ k ]		558697	2		=			
ANR	558810	Identifier	yk		558697	0					
ANR	558811	ArrayIndexing	y [ k ]		558697	1					
ANR	558812	Identifier	y		558697	0					
ANR	558813	Identifier	k		558697	1					
ANR	558814	IfStatement	if ( yk < pfn -> params . Range [ k * 2 + 0 ] )		558697	1					
ANR	558815	Condition	yk < pfn -> params . Range [ k * 2 + 0 ]	809:12:27250:27282	558697	0	True				
ANR	558816	RelationalExpression	yk < pfn -> params . Range [ k * 2 + 0 ]		558697	0		<			
ANR	558817	Identifier	yk		558697	0					
ANR	558818	ArrayIndexing	pfn -> params . Range [ k * 2 + 0 ]		558697	1					
ANR	558819	MemberAccess	pfn -> params . Range		558697	0					
ANR	558820	PtrMemberAccess	pfn -> params		558697	0					
ANR	558821	Identifier	pfn		558697	0					
ANR	558822	Identifier	params		558697	1					
ANR	558823	Identifier	Range		558697	1					
ANR	558824	AdditiveExpression	k * 2 + 0		558697	1		+			
ANR	558825	MultiplicativeExpression	k * 2		558697	0		*			
ANR	558826	Identifier	k		558697	0					
ANR	558827	PrimaryExpression	2		558697	1					
ANR	558828	PrimaryExpression	0		558697	1					
ANR	558829	ExpressionStatement	yk = pfn -> params . Range [ k * 2 + 0 ]	810:12:27297:27330	558697	1	True				
ANR	558830	AssignmentExpression	yk = pfn -> params . Range [ k * 2 + 0 ]		558697	0		=			
ANR	558831	Identifier	yk		558697	0					
ANR	558832	ArrayIndexing	pfn -> params . Range [ k * 2 + 0 ]		558697	1					
ANR	558833	MemberAccess	pfn -> params . Range		558697	0					
ANR	558834	PtrMemberAccess	pfn -> params		558697	0					
ANR	558835	Identifier	pfn		558697	0					
ANR	558836	Identifier	params		558697	1					
ANR	558837	Identifier	Range		558697	1					
ANR	558838	AdditiveExpression	k * 2 + 0		558697	1		+			
ANR	558839	MultiplicativeExpression	k * 2		558697	0		*			
ANR	558840	Identifier	k		558697	0					
ANR	558841	PrimaryExpression	2		558697	1					
ANR	558842	PrimaryExpression	0		558697	1					
ANR	558843	IfStatement	if ( yk > pfn -> params . Range [ k * 2 + 1 ] )		558697	2					
ANR	558844	Condition	yk > pfn -> params . Range [ k * 2 + 1 ]	811:12:27344:27376	558697	0	True				
ANR	558845	RelationalExpression	yk > pfn -> params . Range [ k * 2 + 1 ]		558697	0		>			
ANR	558846	Identifier	yk		558697	0					
ANR	558847	ArrayIndexing	pfn -> params . Range [ k * 2 + 1 ]		558697	1					
ANR	558848	MemberAccess	pfn -> params . Range		558697	0					
ANR	558849	PtrMemberAccess	pfn -> params		558697	0					
ANR	558850	Identifier	pfn		558697	0					
ANR	558851	Identifier	params		558697	1					
ANR	558852	Identifier	Range		558697	1					
ANR	558853	AdditiveExpression	k * 2 + 1		558697	1		+			
ANR	558854	MultiplicativeExpression	k * 2		558697	0		*			
ANR	558855	Identifier	k		558697	0					
ANR	558856	PrimaryExpression	2		558697	1					
ANR	558857	PrimaryExpression	1		558697	1					
ANR	558858	ExpressionStatement	yk = pfn -> params . Range [ k * 2 + 1 ]	812:12:27391:27424	558697	1	True				
ANR	558859	AssignmentExpression	yk = pfn -> params . Range [ k * 2 + 1 ]		558697	0		=			
ANR	558860	Identifier	yk		558697	0					
ANR	558861	ArrayIndexing	pfn -> params . Range [ k * 2 + 1 ]		558697	1					
ANR	558862	MemberAccess	pfn -> params . Range		558697	0					
ANR	558863	PtrMemberAccess	pfn -> params		558697	0					
ANR	558864	Identifier	pfn		558697	0					
ANR	558865	Identifier	params		558697	1					
ANR	558866	Identifier	Range		558697	1					
ANR	558867	AdditiveExpression	k * 2 + 1		558697	1		+			
ANR	558868	MultiplicativeExpression	k * 2		558697	0		*			
ANR	558869	Identifier	k		558697	0					
ANR	558870	PrimaryExpression	2		558697	1					
ANR	558871	PrimaryExpression	1		558697	1					
ANR	558872	ExpressionStatement	out [ k ] = yk	813:8:27434:27445	558697	3	True				
ANR	558873	AssignmentExpression	out [ k ] = yk		558697	0		=			
ANR	558874	ArrayIndexing	out [ k ]		558697	0					
ANR	558875	Identifier	out		558697	0					
ANR	558876	Identifier	k		558697	1					
ANR	558877	Identifier	yk		558697	1					
ANR	558878	ReturnStatement	return 0 ;	815:4:27457:27465	558697	7	True				
ANR	558879	PrimaryExpression	0		558697	0					
ANR	558880	ReturnType	static int		558697	1					
ANR	558881	Identifier	fn_Sd_evaluate_multicubic_cached		558697	2					
ANR	558882	ParameterList	"const gs_function_Sd_t * pfn , const float * in , float * out"		558697	3					
ANR	558883	Parameter	const gs_function_Sd_t * pfn	796:33:26830:26856	558697	0	True				
ANR	558884	ParameterType	const gs_function_Sd_t *		558697	0					
ANR	558885	Identifier	pfn		558697	1					
ANR	558886	Parameter	const float * in	796:62:26859:26873	558697	1	True				
ANR	558887	ParameterType	const float *		558697	0					
ANR	558888	Identifier	in		558697	1					
ANR	558889	Parameter	float * out	796:79:26876:26885	558697	2	True				
ANR	558890	ParameterType	float *		558697	0					
ANR	558891	Identifier	out		558697	1					
ANR	558892	CFGEntryNode	ENTRY		558697		True				
ANR	558893	CFGExitNode	EXIT		558697		True				
ANR	558894	Symbol	make_interpolation_tensor		558697						
ANR	558895	Symbol	* pfn		558697						
ANR	558896	Symbol	pfn -> params . m		558697						
ANR	558897	Symbol	pfn -> params . Range		558697						
ANR	558898	Symbol	code		558697						
ANR	558899	Symbol	pfn -> params . n		558697						
ANR	558900	Symbol	* y		558697						
ANR	558901	Symbol	in		558697						
ANR	558902	Symbol	I		558697						
ANR	558903	Symbol	k		558697						
ANR	558904	Symbol	* * pfn		558697						
ANR	558905	Symbol	out		558697						
ANR	558906	Symbol	yk		558697						
ANR	558907	Symbol	T		558697						
ANR	558908	Symbol	* k		558697						
ANR	558909	Symbol	* pfn -> params . Range		558697						
ANR	558910	Symbol	* out		558697						
ANR	558911	Symbol	pfn		558697						
ANR	558912	Symbol	y		558697						
ANR	558913	Symbol	pfn -> params		558697						
ANR	558914	Symbol	* pfn -> params		558697						
ANR	558915	Function	fn_Sd_evaluate	819:0:27505:28533							
ANR	558916	FunctionDef	"fn_Sd_evaluate (const gs_function_t * pfn_common , const float * in , float * out)"		558915	0					
ANR	558917	CompoundStatement		821:0:27594:28533	558915	0					
ANR	558918	IdentifierDeclStatement	const gs_function_Sd_t * pfn = ( const gs_function_Sd_t * ) pfn_common ;	822:4:27600:27666	558915	0	True				
ANR	558919	IdentifierDecl	* pfn = ( const gs_function_Sd_t * ) pfn_common		558915	0					
ANR	558920	IdentifierDeclType	const gs_function_Sd_t *		558915	0					
ANR	558921	Identifier	pfn		558915	1					
ANR	558922	AssignmentExpression	* pfn = ( const gs_function_Sd_t * ) pfn_common		558915	2		=			
ANR	558923	Identifier	pfn		558915	0					
ANR	558924	CastExpression	( const gs_function_Sd_t * ) pfn_common		558915	1					
ANR	558925	CastTarget	const gs_function_Sd_t *		558915	0					
ANR	558926	Identifier	pfn_common		558915	1					
ANR	558927	IdentifierDeclStatement	int code ;	823:4:27672:27680	558915	1	True				
ANR	558928	IdentifierDecl	code		558915	0					
ANR	558929	IdentifierDeclType	int		558915	0					
ANR	558930	Identifier	code		558915	1					
ANR	558931	IfStatement	if ( pfn -> params . Order == 3 )		558915	2					
ANR	558932	Condition	pfn -> params . Order == 3	825:8:27691:27712	558915	0	True				
ANR	558933	EqualityExpression	pfn -> params . Order == 3		558915	0		==			
ANR	558934	MemberAccess	pfn -> params . Order		558915	0					
ANR	558935	PtrMemberAccess	pfn -> params		558915	0					
ANR	558936	Identifier	pfn		558915	0					
ANR	558937	Identifier	params		558915	1					
ANR	558938	Identifier	Order		558915	1					
ANR	558939	PrimaryExpression	3		558915	1					
ANR	558940	CompoundStatement		5:32:120:120	558915	1					
ANR	558941	IfStatement	if ( POLE_CACHE_GENERIC_1D || pfn -> params . m > 1 )		558915	0					
ANR	558942	Condition	POLE_CACHE_GENERIC_1D || pfn -> params . m > 1	826:12:27729:27770	558915	0	True				
ANR	558943	OrExpression	POLE_CACHE_GENERIC_1D || pfn -> params . m > 1		558915	0		||			
ANR	558944	Identifier	POLE_CACHE_GENERIC_1D		558915	0					
ANR	558945	RelationalExpression	pfn -> params . m > 1		558915	1		>			
ANR	558946	MemberAccess	pfn -> params . m		558915	0					
ANR	558947	PtrMemberAccess	pfn -> params		558915	0					
ANR	558948	Identifier	pfn		558915	0					
ANR	558949	Identifier	params		558915	1					
ANR	558950	Identifier	m		558915	1					
ANR	558951	PrimaryExpression	1		558915	1					
ANR	558952	ExpressionStatement	"code = fn_Sd_evaluate_multicubic_cached ( pfn , in , out )"	827:12:27785:27838	558915	1	True				
ANR	558953	AssignmentExpression	"code = fn_Sd_evaluate_multicubic_cached ( pfn , in , out )"		558915	0		=			
ANR	558954	Identifier	code		558915	0					
ANR	558955	CallExpression	"fn_Sd_evaluate_multicubic_cached ( pfn , in , out )"		558915	1					
ANR	558956	Callee	fn_Sd_evaluate_multicubic_cached		558915	0					
ANR	558957	Identifier	fn_Sd_evaluate_multicubic_cached		558915	0					
ANR	558958	ArgumentList	pfn		558915	1					
ANR	558959	Argument	pfn		558915	0					
ANR	558960	Identifier	pfn		558915	0					
ANR	558961	Argument	in		558915	1					
ANR	558962	Identifier	in		558915	0					
ANR	558963	Argument	out		558915	2					
ANR	558964	Identifier	out		558915	0					
ANR	558965	ElseStatement	else		558915	0					
ANR	558966	ExpressionStatement	"code = fn_Sd_evaluate_cubic_cached_1d ( pfn , in , out )"	829:12:27865:27916	558915	0	True				
ANR	558967	AssignmentExpression	"code = fn_Sd_evaluate_cubic_cached_1d ( pfn , in , out )"		558915	0		=			
ANR	558968	Identifier	code		558915	0					
ANR	558969	CallExpression	"fn_Sd_evaluate_cubic_cached_1d ( pfn , in , out )"		558915	1					
ANR	558970	Callee	fn_Sd_evaluate_cubic_cached_1d		558915	0					
ANR	558971	Identifier	fn_Sd_evaluate_cubic_cached_1d		558915	0					
ANR	558972	ArgumentList	pfn		558915	1					
ANR	558973	Argument	pfn		558915	0					
ANR	558974	Identifier	pfn		558915	0					
ANR	558975	Argument	in		558915	1					
ANR	558976	Identifier	in		558915	0					
ANR	558977	Argument	out		558915	2					
ANR	558978	Identifier	out		558915	0					
ANR	558979	Statement	if	830:2:27920:27921	558915	1	True				
ANR	558980	Statement	POLE_CACHE_DEBUG	830:5:27923:27938	558915	2	True				
ANR	558981	CompoundStatement		12:12:388:400	558915	3					
ANR	558982	IdentifierDeclStatement	float y [ max_Sd_n ] ;	831:12:27952:27969	558915	0	True				
ANR	558983	IdentifierDecl	y [ max_Sd_n ]		558915	0					
ANR	558984	IdentifierDeclType	float [ max_Sd_n ]		558915	0					
ANR	558985	Identifier	y		558915	1					
ANR	558986	Identifier	max_Sd_n		558915	2					
ANR	558987	IdentifierDeclStatement	"int k , code1 ;"	832:12:27983:27995	558915	1	True				
ANR	558988	IdentifierDecl	k		558915	0					
ANR	558989	IdentifierDeclType	int		558915	0					
ANR	558990	Identifier	k		558915	1					
ANR	558991	IdentifierDecl	code1		558915	1					
ANR	558992	IdentifierDeclType	int		558915	0					
ANR	558993	Identifier	code1		558915	1					
ANR	558994	ExpressionStatement	"code1 = fn_Sd_evaluate_general ( pfn_common , in , y )"	834:12:28010:28059	558915	2	True				
ANR	558995	AssignmentExpression	"code1 = fn_Sd_evaluate_general ( pfn_common , in , y )"		558915	0		=			
ANR	558996	Identifier	code1		558915	0					
ANR	558997	CallExpression	"fn_Sd_evaluate_general ( pfn_common , in , y )"		558915	1					
ANR	558998	Callee	fn_Sd_evaluate_general		558915	0					
ANR	558999	Identifier	fn_Sd_evaluate_general		558915	0					
ANR	559000	ArgumentList	pfn_common		558915	1					
ANR	559001	Argument	pfn_common		558915	0					
ANR	559002	Identifier	pfn_common		558915	0					
ANR	559003	Argument	in		558915	1					
ANR	559004	Identifier	in		558915	0					
ANR	559005	Argument	y		558915	2					
ANR	559006	Identifier	y		558915	0					
ANR	559007	IfStatement	if ( code != code1 )		558915	3					
ANR	559008	Condition	code != code1	835:16:28077:28089	558915	0	True				
ANR	559009	EqualityExpression	code != code1		558915	0		!=			
ANR	559010	Identifier	code		558915	0					
ANR	559011	Identifier	code1		558915	1					
ANR	559012	ExpressionStatement	return_error ( gs_error_unregistered )	836:16:28108:28143	558915	1	True				
ANR	559013	CallExpression	return_error ( gs_error_unregistered )		558915	0					
ANR	559014	Callee	return_error		558915	0					
ANR	559015	Identifier	return_error		558915	0					
ANR	559016	ArgumentList	gs_error_unregistered		558915	1					
ANR	559017	Argument	gs_error_unregistered		558915	0					
ANR	559018	Identifier	gs_error_unregistered		558915	0					
ANR	559019	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		558915	4					
ANR	559020	ForInit	k = 0 ;	837:17:28185:28190	558915	0	True				
ANR	559021	AssignmentExpression	k = 0		558915	0		=			
ANR	559022	Identifier	k		558915	0					
ANR	559023	PrimaryExpression	0		558915	1					
ANR	559024	Condition	k < pfn -> params . n	837:24:28192:28208	558915	1	True				
ANR	559025	RelationalExpression	k < pfn -> params . n		558915	0		<			
ANR	559026	Identifier	k		558915	0					
ANR	559027	MemberAccess	pfn -> params . n		558915	1					
ANR	559028	PtrMemberAccess	pfn -> params		558915	0					
ANR	559029	Identifier	pfn		558915	0					
ANR	559030	Identifier	params		558915	1					
ANR	559031	Identifier	n		558915	1					
ANR	559032	PostIncDecOperationExpression	k ++	837:43:28211:28213	558915	2	True				
ANR	559033	Identifier	k		558915	0					
ANR	559034	IncDec	++		558915	1					
ANR	559035	CompoundStatement		17:48:621:621	558915	3					
ANR	559036	IfStatement	if ( any_abs ( y [ k ] - out [ k ] ) > 1e-6 * ( pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ] ) )		558915	0					
ANR	559037	Condition	any_abs ( y [ k ] - out [ k ] ) > 1e-6 * ( pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ] )	838:20:28238:28330	558915	0	True				
ANR	559038	RelationalExpression	any_abs ( y [ k ] - out [ k ] ) > 1e-6 * ( pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ] )		558915	0		>			
ANR	559039	CallExpression	any_abs ( y [ k ] - out [ k ] )		558915	0					
ANR	559040	Callee	any_abs		558915	0					
ANR	559041	Identifier	any_abs		558915	0					
ANR	559042	ArgumentList	y [ k ] - out [ k ]		558915	1					
ANR	559043	Argument	y [ k ] - out [ k ]		558915	0					
ANR	559044	AdditiveExpression	y [ k ] - out [ k ]		558915	0		-			
ANR	559045	ArrayIndexing	y [ k ]		558915	0					
ANR	559046	Identifier	y		558915	0					
ANR	559047	Identifier	k		558915	1					
ANR	559048	ArrayIndexing	out [ k ]		558915	1					
ANR	559049	Identifier	out		558915	0					
ANR	559050	Identifier	k		558915	1					
ANR	559051	MultiplicativeExpression	1e-6 * ( pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ] )		558915	1		*			
ANR	559052	PrimaryExpression	1e-6		558915	0					
ANR	559053	AdditiveExpression	pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ]		558915	1		-			
ANR	559054	ArrayIndexing	pfn -> params . Range [ k * 2 + 1 ]		558915	0					
ANR	559055	MemberAccess	pfn -> params . Range		558915	0					
ANR	559056	PtrMemberAccess	pfn -> params		558915	0					
ANR	559057	Identifier	pfn		558915	0					
ANR	559058	Identifier	params		558915	1					
ANR	559059	Identifier	Range		558915	1					
ANR	559060	AdditiveExpression	k * 2 + 1		558915	1		+			
ANR	559061	MultiplicativeExpression	k * 2		558915	0		*			
ANR	559062	Identifier	k		558915	0					
ANR	559063	PrimaryExpression	2		558915	1					
ANR	559064	PrimaryExpression	1		558915	1					
ANR	559065	ArrayIndexing	pfn -> params . Range [ k * 2 + 0 ]		558915	1					
ANR	559066	MemberAccess	pfn -> params . Range		558915	0					
ANR	559067	PtrMemberAccess	pfn -> params		558915	0					
ANR	559068	Identifier	pfn		558915	0					
ANR	559069	Identifier	params		558915	1					
ANR	559070	Identifier	Range		558915	1					
ANR	559071	AdditiveExpression	k * 2 + 0		558915	1		+			
ANR	559072	MultiplicativeExpression	k * 2		558915	0		*			
ANR	559073	Identifier	k		558915	0					
ANR	559074	PrimaryExpression	2		558915	1					
ANR	559075	PrimaryExpression	0		558915	1					
ANR	559076	ExpressionStatement	return_error ( gs_error_unregistered )	839:20:28353:28388	558915	1	True				
ANR	559077	CallExpression	return_error ( gs_error_unregistered )		558915	0					
ANR	559078	Callee	return_error		558915	0					
ANR	559079	Identifier	return_error		558915	0					
ANR	559080	ArgumentList	gs_error_unregistered		558915	1					
ANR	559081	Argument	gs_error_unregistered		558915	0					
ANR	559082	Identifier	gs_error_unregistered		558915	0					
ANR	559083	Statement	endif	842:2:28439:28443	558915	4	True				
ANR	559084	ElseStatement	else		558915	0					
ANR	559085	ExpressionStatement	"code = fn_Sd_evaluate_general ( pfn_common , in , out )"	844:8:28464:28514	558915	0	True				
ANR	559086	AssignmentExpression	"code = fn_Sd_evaluate_general ( pfn_common , in , out )"		558915	0		=			
ANR	559087	Identifier	code		558915	0					
ANR	559088	CallExpression	"fn_Sd_evaluate_general ( pfn_common , in , out )"		558915	1					
ANR	559089	Callee	fn_Sd_evaluate_general		558915	0					
ANR	559090	Identifier	fn_Sd_evaluate_general		558915	0					
ANR	559091	ArgumentList	pfn_common		558915	1					
ANR	559092	Argument	pfn_common		558915	0					
ANR	559093	Identifier	pfn_common		558915	0					
ANR	559094	Argument	in		558915	1					
ANR	559095	Identifier	in		558915	0					
ANR	559096	Argument	out		558915	2					
ANR	559097	Identifier	out		558915	0					
ANR	559098	ReturnStatement	return code ;	845:4:28520:28531	558915	3	True				
ANR	559099	Identifier	code		558915	0					
ANR	559100	ReturnType	static int		558915	1					
ANR	559101	Identifier	fn_Sd_evaluate		558915	2					
ANR	559102	ParameterList	"const gs_function_t * pfn_common , const float * in , float * out"		558915	3					
ANR	559103	Parameter	const gs_function_t * pfn_common	820:15:27531:27562	558915	0	True				
ANR	559104	ParameterType	const gs_function_t *		558915	0					
ANR	559105	Identifier	pfn_common		558915	1					
ANR	559106	Parameter	const float * in	820:49:27565:27579	558915	1	True				
ANR	559107	ParameterType	const float *		558915	0					
ANR	559108	Identifier	in		558915	1					
ANR	559109	Parameter	float * out	820:66:27582:27591	558915	2	True				
ANR	559110	ParameterType	float *		558915	0					
ANR	559111	Identifier	out		558915	1					
ANR	559112	CFGEntryNode	ENTRY		558915		True				
ANR	559113	CFGExitNode	EXIT		558915		True				
ANR	559114	Symbol	pfn -> params . m		558915						
ANR	559115	Symbol	gs_error_unregistered		558915						
ANR	559116	Symbol	pfn -> params . Range		558915						
ANR	559117	Symbol	code		558915						
ANR	559118	Symbol	code1		558915						
ANR	559119	Symbol	pfn -> params . n		558915						
ANR	559120	Symbol	* y		558915						
ANR	559121	Symbol	pfn_common		558915						
ANR	559122	Symbol	* * pfn		558915						
ANR	559123	Symbol	fn_Sd_evaluate_multicubic_cached		558915						
ANR	559124	Symbol	out		558915						
ANR	559125	Symbol	pfn -> params . Order		558915						
ANR	559126	Symbol	* pfn -> params . Range		558915						
ANR	559127	Symbol	any_abs		558915						
ANR	559128	Symbol	POLE_CACHE_GENERIC_1D		558915						
ANR	559129	Symbol	* pfn		558915						
ANR	559130	Symbol	fn_Sd_evaluate_general		558915						
ANR	559131	Symbol	in		558915						
ANR	559132	Symbol	k		558915						
ANR	559133	Symbol	* k		558915						
ANR	559134	Symbol	* out		558915						
ANR	559135	Symbol	pfn		558915						
ANR	559136	Symbol	y		558915						
ANR	559137	Symbol	fn_Sd_evaluate_cubic_cached_1d		558915						
ANR	559138	Symbol	pfn -> params		558915						
ANR	559139	Symbol	* pfn -> params		558915						
ANR	559140	DeclStmt									
ANR	559141	Decl							float	float	d0
ANR	559142	Decl							float	float	d1
ANR	559143	DeclStmt									
ANR	559144	Decl							float	float	v0
ANR	559145	Decl							float	float	v1
ANR	559146	DeclStmt									
ANR	559147	Decl							float	float	e0
ANR	559148	Decl							float	float	e1
ANR	559149	Decl							float	float	w0
ANR	559150	Decl							float	float	w1
ANR	559151	Decl							float	float	w
ANR	559152	DeclStmt									
ANR	559153	Decl							const float	const float	small_noise
ANR	559154	Function	copy_poles	890:0:29923:30813							
ANR	559155	FunctionDef	"copy_poles (const gs_function_Sd_t * pfn , int * I , double * T0 , double * T1 , int a_offset , int ii , double * pole , int p_offset , int pole_step)"		559154	0					
ANR	559156	CompoundStatement		893:0:30087:30813	559154	0					
ANR	559157	IdentifierDeclStatement	"int i , ei , sa , code ;"	894:4:30093:30112	559154	0	True				
ANR	559158	IdentifierDecl	i		559154	0					
ANR	559159	IdentifierDeclType	int		559154	0					
ANR	559160	Identifier	i		559154	1					
ANR	559161	IdentifierDecl	ei		559154	1					
ANR	559162	IdentifierDeclType	int		559154	0					
ANR	559163	Identifier	ei		559154	1					
ANR	559164	IdentifierDecl	sa		559154	2					
ANR	559165	IdentifierDeclType	int		559154	0					
ANR	559166	Identifier	sa		559154	1					
ANR	559167	IdentifierDecl	code		559154	3					
ANR	559168	IdentifierDeclType	int		559154	0					
ANR	559169	Identifier	code		559154	1					
ANR	559170	IdentifierDeclStatement	int order = pfn -> params . Order ;	895:4:30118:30147	559154	1	True				
ANR	559171	IdentifierDecl	order = pfn -> params . Order		559154	0					
ANR	559172	IdentifierDeclType	int		559154	0					
ANR	559173	Identifier	order		559154	1					
ANR	559174	AssignmentExpression	order = pfn -> params . Order		559154	2		=			
ANR	559175	Identifier	order		559154	0					
ANR	559176	MemberAccess	pfn -> params . Order		559154	1					
ANR	559177	PtrMemberAccess	pfn -> params		559154	0					
ANR	559178	Identifier	pfn		559154	0					
ANR	559179	Identifier	params		559154	1					
ANR	559180	Identifier	Order		559154	1					
ANR	559181	IfStatement	if ( pole_step <= 0 )		559154	2					
ANR	559182	Condition	pole_step <= 0	897:8:30158:30171	559154	0	True				
ANR	559183	RelationalExpression	pole_step <= 0		559154	0		<=			
ANR	559184	Identifier	pole_step		559154	0					
ANR	559185	PrimaryExpression	0		559154	1					
ANR	559186	ExpressionStatement	return_error ( gs_error_limitcheck )	898:8:30182:30215	559154	1	True				
ANR	559187	CallExpression	return_error ( gs_error_limitcheck )		559154	0					
ANR	559188	Callee	return_error		559154	0					
ANR	559189	Identifier	return_error		559154	0					
ANR	559190	ArgumentList	gs_error_limitcheck		559154	1					
ANR	559191	Argument	gs_error_limitcheck		559154	0					
ANR	559192	Identifier	gs_error_limitcheck		559154	0					
ANR	559193	ExpressionStatement	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )	899:4:30245:30284	559154	3	True				
ANR	559194	AssignmentExpression	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		559154	0		=			
ANR	559195	Identifier	ei		559154	0					
ANR	559196	ConditionalExpression	T0 [ ii ] == T1 [ ii ] ? 1 : order + 1		559154	1					
ANR	559197	Condition	T0 [ ii ] == T1 [ ii ]		559154	0					
ANR	559198	EqualityExpression	T0 [ ii ] == T1 [ ii ]		559154	0		==			
ANR	559199	ArrayIndexing	T0 [ ii ]		559154	0					
ANR	559200	Identifier	T0		559154	0					
ANR	559201	Identifier	ii		559154	1					
ANR	559202	ArrayIndexing	T1 [ ii ]		559154	1					
ANR	559203	Identifier	T1		559154	0					
ANR	559204	Identifier	ii		559154	1					
ANR	559205	PrimaryExpression	1		559154	1					
ANR	559206	AdditiveExpression	order + 1		559154	2		+			
ANR	559207	Identifier	order		559154	0					
ANR	559208	PrimaryExpression	1		559154	1					
ANR	559209	ExpressionStatement	sa = pfn -> params . array_step [ ii ]	900:4:30290:30321	559154	4	True				
ANR	559210	AssignmentExpression	sa = pfn -> params . array_step [ ii ]		559154	0		=			
ANR	559211	Identifier	sa		559154	0					
ANR	559212	ArrayIndexing	pfn -> params . array_step [ ii ]		559154	1					
ANR	559213	MemberAccess	pfn -> params . array_step		559154	0					
ANR	559214	PtrMemberAccess	pfn -> params		559154	0					
ANR	559215	Identifier	pfn		559154	0					
ANR	559216	Identifier	params		559154	1					
ANR	559217	Identifier	array_step		559154	1					
ANR	559218	Identifier	ii		559154	1					
ANR	559219	IfStatement	if ( ii == 0 )		559154	5					
ANR	559220	Condition	ii == 0	901:8:30331:30337	559154	0	True				
ANR	559221	EqualityExpression	ii == 0		559154	0		==			
ANR	559222	Identifier	ii		559154	0					
ANR	559223	PrimaryExpression	0		559154	1					
ANR	559224	CompoundStatement		9:17:252:252	559154	1					
ANR	559225	ForStatement	for ( i = 0 ; i < ei ; i ++ )		559154	0					
ANR	559226	ForInit	i = 0 ;	902:13:30355:30360	559154	0	True				
ANR	559227	AssignmentExpression	i = 0		559154	0		=			
ANR	559228	Identifier	i		559154	0					
ANR	559229	PrimaryExpression	0		559154	1					
ANR	559230	Condition	i < ei	902:20:30362:30367	559154	1	True				
ANR	559231	RelationalExpression	i < ei		559154	0		<			
ANR	559232	Identifier	i		559154	0					
ANR	559233	Identifier	ei		559154	1					
ANR	559234	PostIncDecOperationExpression	i ++	902:28:30370:30372	559154	2	True				
ANR	559235	Identifier	i		559154	0					
ANR	559236	IncDec	++		559154	1					
ANR	559237	ExpressionStatement	* ( pole + p_offset + i * pole_step ) = * ( pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order ) )	903:12:30387:30506	559154	3	True				
ANR	559238	AssignmentExpression	* ( pole + p_offset + i * pole_step ) = * ( pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order ) )		559154	0		=			
ANR	559239	UnaryOperationExpression	* ( pole + p_offset + i * pole_step )		559154	0					
ANR	559240	UnaryOperator	*		559154	0					
ANR	559241	AdditiveExpression	pole + p_offset + i * pole_step		559154	1		+			
ANR	559242	Identifier	pole		559154	0					
ANR	559243	AdditiveExpression	p_offset + i * pole_step		559154	1		+			
ANR	559244	Identifier	p_offset		559154	0					
ANR	559245	MultiplicativeExpression	i * pole_step		559154	1		*			
ANR	559246	Identifier	i		559154	0					
ANR	559247	Identifier	pole_step		559154	1					
ANR	559248	UnaryOperationExpression	* ( pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order ) )		559154	1					
ANR	559249	UnaryOperator	*		559154	0					
ANR	559250	AdditiveExpression	pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order )		559154	1		+			
ANR	559251	MemberAccess	pfn -> params . pole		559154	0					
ANR	559252	PtrMemberAccess	pfn -> params		559154	0					
ANR	559253	Identifier	pfn		559154	0					
ANR	559254	Identifier	params		559154	1					
ANR	559255	Identifier	pole		559154	1					
ANR	559256	AdditiveExpression	a_offset + I [ ii ] * sa + i * ( sa / order )		559154	1		+			
ANR	559257	Identifier	a_offset		559154	0					
ANR	559258	AdditiveExpression	I [ ii ] * sa + i * ( sa / order )		559154	1		+			
ANR	559259	MultiplicativeExpression	I [ ii ] * sa		559154	0		*			
ANR	559260	ArrayIndexing	I [ ii ]		559154	0					
ANR	559261	Identifier	I		559154	0					
ANR	559262	Identifier	ii		559154	1					
ANR	559263	Identifier	sa		559154	1					
ANR	559264	MultiplicativeExpression	i * ( sa / order )		559154	1		*			
ANR	559265	Identifier	i		559154	0					
ANR	559266	MultiplicativeExpression	sa / order		559154	1		/			
ANR	559267	Identifier	sa		559154	0					
ANR	559268	Identifier	order		559154	1					
ANR	559269	ElseStatement	else		559154	0					
ANR	559270	CompoundStatement		13:11:431:431	559154	0					
ANR	559271	ForStatement	for ( i = 0 ; i < ei ; i ++ )		559154	0					
ANR	559272	ForInit	i = 0 ;	906:13:30534:30539	559154	0	True				
ANR	559273	AssignmentExpression	i = 0		559154	0		=			
ANR	559274	Identifier	i		559154	0					
ANR	559275	PrimaryExpression	0		559154	1					
ANR	559276	Condition	i < ei	906:20:30541:30546	559154	1	True				
ANR	559277	RelationalExpression	i < ei		559154	0		<			
ANR	559278	Identifier	i		559154	0					
ANR	559279	Identifier	ei		559154	1					
ANR	559280	PostIncDecOperationExpression	i ++	906:28:30549:30551	559154	2	True				
ANR	559281	Identifier	i		559154	0					
ANR	559282	IncDec	++		559154	1					
ANR	559283	CompoundStatement		14:33:466:466	559154	3					
ANR	559284	ExpressionStatement	"code = copy_poles ( pfn , I , T0 , T1 , a_offset + I [ ii ] * sa + i * ( sa / order ) , ii - 1 , pole , p_offset + i * pole_step , pole_step / 4 )"	907:12:30568:30726	559154	0	True				
ANR	559285	AssignmentExpression	"code = copy_poles ( pfn , I , T0 , T1 , a_offset + I [ ii ] * sa + i * ( sa / order ) , ii - 1 , pole , p_offset + i * pole_step , pole_step / 4 )"		559154	0		=			
ANR	559286	Identifier	code		559154	0					
ANR	559287	CallExpression	"copy_poles ( pfn , I , T0 , T1 , a_offset + I [ ii ] * sa + i * ( sa / order ) , ii - 1 , pole , p_offset + i * pole_step , pole_step / 4 )"		559154	1					
ANR	559288	Callee	copy_poles		559154	0					
ANR	559289	Identifier	copy_poles		559154	0					
ANR	559290	ArgumentList	pfn		559154	1					
ANR	559291	Argument	pfn		559154	0					
ANR	559292	Identifier	pfn		559154	0					
ANR	559293	Argument	I		559154	1					
ANR	559294	Identifier	I		559154	0					
ANR	559295	Argument	T0		559154	2					
ANR	559296	Identifier	T0		559154	0					
ANR	559297	Argument	T1		559154	3					
ANR	559298	Identifier	T1		559154	0					
ANR	559299	Argument	a_offset + I [ ii ] * sa + i * ( sa / order )		559154	4					
ANR	559300	AdditiveExpression	a_offset + I [ ii ] * sa + i * ( sa / order )		559154	0		+			
ANR	559301	Identifier	a_offset		559154	0					
ANR	559302	AdditiveExpression	I [ ii ] * sa + i * ( sa / order )		559154	1		+			
ANR	559303	MultiplicativeExpression	I [ ii ] * sa		559154	0		*			
ANR	559304	ArrayIndexing	I [ ii ]		559154	0					
ANR	559305	Identifier	I		559154	0					
ANR	559306	Identifier	ii		559154	1					
ANR	559307	Identifier	sa		559154	1					
ANR	559308	MultiplicativeExpression	i * ( sa / order )		559154	1		*			
ANR	559309	Identifier	i		559154	0					
ANR	559310	MultiplicativeExpression	sa / order		559154	1		/			
ANR	559311	Identifier	sa		559154	0					
ANR	559312	Identifier	order		559154	1					
ANR	559313	Argument	ii - 1		559154	5					
ANR	559314	AdditiveExpression	ii - 1		559154	0		-			
ANR	559315	Identifier	ii		559154	0					
ANR	559316	PrimaryExpression	1		559154	1					
ANR	559317	Argument	pole		559154	6					
ANR	559318	Identifier	pole		559154	0					
ANR	559319	Argument	p_offset + i * pole_step		559154	7					
ANR	559320	AdditiveExpression	p_offset + i * pole_step		559154	0		+			
ANR	559321	Identifier	p_offset		559154	0					
ANR	559322	MultiplicativeExpression	i * pole_step		559154	1		*			
ANR	559323	Identifier	i		559154	0					
ANR	559324	Identifier	pole_step		559154	1					
ANR	559325	Argument	pole_step / 4		559154	8					
ANR	559326	MultiplicativeExpression	pole_step / 4		559154	0		/			
ANR	559327	Identifier	pole_step		559154	0					
ANR	559328	PrimaryExpression	4		559154	1					
ANR	559329	IfStatement	if ( code < 0 )		559154	1					
ANR	559330	Condition	code < 0	909:16:30744:30751	559154	0	True				
ANR	559331	RelationalExpression	code < 0		559154	0		<			
ANR	559332	Identifier	code		559154	0					
ANR	559333	PrimaryExpression	0		559154	1					
ANR	559334	ReturnStatement	return code ;	910:16:30770:30781	559154	1	True				
ANR	559335	Identifier	code		559154	0					
ANR	559336	ReturnStatement	return 0 ;	913:4:30803:30811	559154	6	True				
ANR	559337	PrimaryExpression	0		559154	0					
ANR	559338	ReturnType	static int		559154	1					
ANR	559339	Identifier	copy_poles		559154	2					
ANR	559340	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T0 , double * T1 , int a_offset , int ii , double * pole , int p_offset , int pole_step"		559154	3					
ANR	559341	Parameter	const gs_function_Sd_t * pfn	891:11:29945:29971	559154	0	True				
ANR	559342	ParameterType	const gs_function_Sd_t *		559154	0					
ANR	559343	Identifier	pfn		559154	1					
ANR	559344	Parameter	int * I	891:40:29974:29979	559154	1	True				
ANR	559345	ParameterType	int *		559154	0					
ANR	559346	Identifier	I		559154	1					
ANR	559347	Parameter	double * T0	891:48:29982:29991	559154	2	True				
ANR	559348	ParameterType	double *		559154	0					
ANR	559349	Identifier	T0		559154	1					
ANR	559350	Parameter	double * T1	891:60:29994:30003	559154	3	True				
ANR	559351	ParameterType	double *		559154	0					
ANR	559352	Identifier	T1		559154	1					
ANR	559353	Parameter	int a_offset	891:72:30006:30017	559154	4	True				
ANR	559354	ParameterType	int		559154	0					
ANR	559355	Identifier	a_offset		559154	1					
ANR	559356	Parameter	int ii	892:16:30036:30041	559154	5	True				
ANR	559357	ParameterType	int		559154	0					
ANR	559358	Identifier	ii		559154	1					
ANR	559359	Parameter	double * pole	892:24:30044:30055	559154	6	True				
ANR	559360	ParameterType	double *		559154	0					
ANR	559361	Identifier	pole		559154	1					
ANR	559362	Parameter	int p_offset	892:38:30058:30069	559154	7	True				
ANR	559363	ParameterType	int		559154	0					
ANR	559364	Identifier	p_offset		559154	1					
ANR	559365	Parameter	int pole_step	892:52:30072:30084	559154	8	True				
ANR	559366	ParameterType	int		559154	0					
ANR	559367	Identifier	pole_step		559154	1					
ANR	559368	CFGEntryNode	ENTRY		559154		True				
ANR	559369	CFGExitNode	EXIT		559154		True				
ANR	559370	Symbol	* T1		559154						
ANR	559371	Symbol	* T0		559154						
ANR	559372	Symbol	* * I		559154						
ANR	559373	Symbol	code		559154						
ANR	559374	Symbol	* ii		559154						
ANR	559375	Symbol	a_offset		559154						
ANR	559376	Symbol	I		559154						
ANR	559377	Symbol	pole		559154						
ANR	559378	Symbol	* * pfn		559154						
ANR	559379	Symbol	* pole_step		559154						
ANR	559380	Symbol	pole_step		559154						
ANR	559381	Symbol	* pole		559154						
ANR	559382	Symbol	sa		559154						
ANR	559383	Symbol	* * ii		559154						
ANR	559384	Symbol	pfn -> params . pole		559154						
ANR	559385	Symbol	pfn -> params . Order		559154						
ANR	559386	Symbol	copy_poles		559154						
ANR	559387	Symbol	* I		559154						
ANR	559388	Symbol	gs_error_limitcheck		559154						
ANR	559389	Symbol	pfn -> params . array_step		559154						
ANR	559390	Symbol	* sa		559154						
ANR	559391	Symbol	T0		559154						
ANR	559392	Symbol	T1		559154						
ANR	559393	Symbol	order		559154						
ANR	559394	Symbol	ii		559154						
ANR	559395	Symbol	* pfn -> params . array_step		559154						
ANR	559396	Symbol	* pfn		559154						
ANR	559397	Symbol	ei		559154						
ANR	559398	Symbol	* ( pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order ) )		559154						
ANR	559399	Symbol	p_offset		559154						
ANR	559400	Symbol	i		559154						
ANR	559401	Symbol	* order		559154						
ANR	559402	Symbol	* ( pole + p_offset + i * pole_step )		559154						
ANR	559403	Symbol	* pfn -> params . pole		559154						
ANR	559404	Symbol	* i		559154						
ANR	559405	Symbol	* a_offset		559154						
ANR	559406	Symbol	pfn		559154						
ANR	559407	Symbol	pfn -> params		559154						
ANR	559408	Symbol	* p_offset		559154						
ANR	559409	Symbol	* pfn -> params		559154						
ANR	559410	Function	subcurve	916:0:30816:32019							
ANR	559411	FunctionDef	"subcurve (double * pole , int pole_step , double t0 , double t1)"		559410	0					
ANR	559412	CompoundStatement		918:0:30895:32019	559410	0					
ANR	559413	IdentifierDeclStatement	double q0 = pole [ pole_step * 0 ] ;	920:4:30961:30992	559410	0	True				
ANR	559414	IdentifierDecl	q0 = pole [ pole_step * 0 ]		559410	0					
ANR	559415	IdentifierDeclType	double		559410	0					
ANR	559416	Identifier	q0		559410	1					
ANR	559417	AssignmentExpression	q0 = pole [ pole_step * 0 ]		559410	2		=			
ANR	559418	Identifier	q0		559410	0					
ANR	559419	ArrayIndexing	pole [ pole_step * 0 ]		559410	1					
ANR	559420	Identifier	pole		559410	0					
ANR	559421	MultiplicativeExpression	pole_step * 0		559410	1		*			
ANR	559422	Identifier	pole_step		559410	0					
ANR	559423	PrimaryExpression	0		559410	1					
ANR	559424	IdentifierDeclStatement	double q1 = pole [ pole_step * 1 ] ;	921:4:30998:31029	559410	1	True				
ANR	559425	IdentifierDecl	q1 = pole [ pole_step * 1 ]		559410	0					
ANR	559426	IdentifierDeclType	double		559410	0					
ANR	559427	Identifier	q1		559410	1					
ANR	559428	AssignmentExpression	q1 = pole [ pole_step * 1 ]		559410	2		=			
ANR	559429	Identifier	q1		559410	0					
ANR	559430	ArrayIndexing	pole [ pole_step * 1 ]		559410	1					
ANR	559431	Identifier	pole		559410	0					
ANR	559432	MultiplicativeExpression	pole_step * 1		559410	1		*			
ANR	559433	Identifier	pole_step		559410	0					
ANR	559434	PrimaryExpression	1		559410	1					
ANR	559435	IdentifierDeclStatement	double q2 = pole [ pole_step * 2 ] ;	922:4:31035:31066	559410	2	True				
ANR	559436	IdentifierDecl	q2 = pole [ pole_step * 2 ]		559410	0					
ANR	559437	IdentifierDeclType	double		559410	0					
ANR	559438	Identifier	q2		559410	1					
ANR	559439	AssignmentExpression	q2 = pole [ pole_step * 2 ]		559410	2		=			
ANR	559440	Identifier	q2		559410	0					
ANR	559441	ArrayIndexing	pole [ pole_step * 2 ]		559410	1					
ANR	559442	Identifier	pole		559410	0					
ANR	559443	MultiplicativeExpression	pole_step * 2		559410	1		*			
ANR	559444	Identifier	pole_step		559410	0					
ANR	559445	PrimaryExpression	2		559410	1					
ANR	559446	IdentifierDeclStatement	double q3 = pole [ pole_step * 3 ] ;	923:4:31072:31103	559410	3	True				
ANR	559447	IdentifierDecl	q3 = pole [ pole_step * 3 ]		559410	0					
ANR	559448	IdentifierDeclType	double		559410	0					
ANR	559449	Identifier	q3		559410	1					
ANR	559450	AssignmentExpression	q3 = pole [ pole_step * 3 ]		559410	2		=			
ANR	559451	Identifier	q3		559410	0					
ANR	559452	ArrayIndexing	pole [ pole_step * 3 ]		559410	1					
ANR	559453	Identifier	pole		559410	0					
ANR	559454	MultiplicativeExpression	pole_step * 3		559410	1		*			
ANR	559455	Identifier	pole_step		559410	0					
ANR	559456	PrimaryExpression	3		559410	1					
ANR	559457	IdentifierDeclStatement	"double t01 = t0 - 1 , t11 = t1 - 1 ;"	924:4:31109:31142	559410	4	True				
ANR	559458	IdentifierDecl	t01 = t0 - 1		559410	0					
ANR	559459	IdentifierDeclType	double		559410	0					
ANR	559460	Identifier	t01		559410	1					
ANR	559461	AssignmentExpression	t01 = t0 - 1		559410	2		=			
ANR	559462	Identifier	t01		559410	0					
ANR	559463	AdditiveExpression	t0 - 1		559410	1		-			
ANR	559464	Identifier	t0		559410	0					
ANR	559465	PrimaryExpression	1		559410	1					
ANR	559466	IdentifierDecl	t11 = t1 - 1		559410	1					
ANR	559467	IdentifierDeclType	double		559410	0					
ANR	559468	Identifier	t11		559410	1					
ANR	559469	AssignmentExpression	t11 = t1 - 1		559410	2		=			
ANR	559470	Identifier	t11		559410	0					
ANR	559471	AdditiveExpression	t1 - 1		559410	1		-			
ANR	559472	Identifier	t1		559410	0					
ANR	559473	PrimaryExpression	1		559410	1					
ANR	559474	IdentifierDeclStatement	double small = 1e-13 ;	925:4:31148:31168	559410	5	True				
ANR	559475	IdentifierDecl	small = 1e-13		559410	0					
ANR	559476	IdentifierDeclType	double		559410	0					
ANR	559477	Identifier	small		559410	1					
ANR	559478	AssignmentExpression	small = 1e-13		559410	2		=			
ANR	559479	Identifier	small		559410	0					
ANR	559480	PrimaryExpression	1e-13		559410	1					
ANR	559481	Statement	define	927:1:31172:31177	559410	6	True				
ANR	559482	Statement	Power2	927:8:31179:31184	559410	7	True				
ANR	559483	Statement	(	927:14:31185:31185	559410	8	True				
ANR	559484	Statement	a	927:15:31186:31186	559410	9	True				
ANR	559485	Statement	)	927:16:31187:31187	559410	10	True				
ANR	559486	Statement	(	927:18:31189:31189	559410	11	True				
ANR	559487	Statement	a	927:19:31190:31190	559410	12	True				
ANR	559488	Statement	)	927:20:31191:31191	559410	13	True				
ANR	559489	Statement	*	927:22:31193:31193	559410	14	True				
ANR	559490	Statement	(	927:24:31195:31195	559410	15	True				
ANR	559491	Statement	a	927:25:31196:31196	559410	16	True				
ANR	559492	Statement	)	927:26:31197:31197	559410	17	True				
ANR	559493	Statement	define	928:1:31200:31205	559410	18	True				
ANR	559494	ExpressionStatement	Power3 ( a ) ( a ) * ( a ) * ( a ) pole [ pole_step * 0 ] = t0 * ( t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 ) ) - q0 * Power3 ( t01 )	928:8:31207:31321	559410	19	True				
ANR	559495	AssignmentExpression	Power3 ( a ) ( a ) * ( a ) * ( a ) pole [ pole_step * 0 ] = t0 * ( t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 ) ) - q0 * Power3 ( t01 )		559410	0		=			
ANR	559496	MultiplicativeExpression	Power3 ( a ) ( a ) * ( a ) * ( a ) pole [ pole_step * 0 ]		559410	0		*			
ANR	559497	CallExpression	Power3 ( a ) ( a )		559410	0					
ANR	559498	Callee	Power3 ( a )		559410	0					
ANR	559499	CallExpression	Power3 ( a )		559410	0					
ANR	559500	Callee	Power3		559410	0					
ANR	559501	Identifier	Power3		559410	0					
ANR	559502	ArgumentList	a		559410	1					
ANR	559503	Argument	a		559410	0					
ANR	559504	Identifier	a		559410	0					
ANR	559505	ArgumentList	a		559410	1					
ANR	559506	Argument	a		559410	0					
ANR	559507	Identifier	a		559410	0					
ANR	559508	CastExpression	( a ) * ( a ) pole [ pole_step * 0 ]		559410	1					
ANR	559509	CastTarget	a		559410	0					
ANR	559510	UnaryOperationExpression	* ( a ) pole [ pole_step * 0 ]		559410	1					
ANR	559511	UnaryOperator	*		559410	0					
ANR	559512	CastExpression	( a ) pole [ pole_step * 0 ]		559410	1					
ANR	559513	CastTarget	a		559410	0					
ANR	559514	ArrayIndexing	pole [ pole_step * 0 ]		559410	1					
ANR	559515	Identifier	pole		559410	0					
ANR	559516	MultiplicativeExpression	pole_step * 0		559410	1		*			
ANR	559517	Identifier	pole_step		559410	0					
ANR	559518	PrimaryExpression	0		559410	1					
ANR	559519	AdditiveExpression	t0 * ( t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 ) ) - q0 * Power3 ( t01 )		559410	1		-			
ANR	559520	MultiplicativeExpression	t0 * ( t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 ) )		559410	0		*			
ANR	559521	Identifier	t0		559410	0					
ANR	559522	AdditiveExpression	t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 )		559410	1		+			
ANR	559523	MultiplicativeExpression	t0 * ( q3 * t0 - 3 * q2 * t01 )		559410	0		*			
ANR	559524	Identifier	t0		559410	0					
ANR	559525	AdditiveExpression	q3 * t0 - 3 * q2 * t01		559410	1		-			
ANR	559526	MultiplicativeExpression	q3 * t0		559410	0		*			
ANR	559527	Identifier	q3		559410	0					
ANR	559528	Identifier	t0		559410	1					
ANR	559529	MultiplicativeExpression	3 * q2 * t01		559410	1		*			
ANR	559530	PrimaryExpression	3		559410	0					
ANR	559531	MultiplicativeExpression	q2 * t01		559410	1		*			
ANR	559532	Identifier	q2		559410	0					
ANR	559533	Identifier	t01		559410	1					
ANR	559534	MultiplicativeExpression	3 * q1 * Power2 ( t01 )		559410	1		*			
ANR	559535	PrimaryExpression	3		559410	0					
ANR	559536	MultiplicativeExpression	q1 * Power2 ( t01 )		559410	1		*			
ANR	559537	Identifier	q1		559410	0					
ANR	559538	CallExpression	Power2 ( t01 )		559410	1					
ANR	559539	Callee	Power2		559410	0					
ANR	559540	Identifier	Power2		559410	0					
ANR	559541	ArgumentList	t01		559410	1					
ANR	559542	Argument	t01		559410	0					
ANR	559543	Identifier	t01		559410	0					
ANR	559544	MultiplicativeExpression	q0 * Power3 ( t01 )		559410	1		*			
ANR	559545	Identifier	q0		559410	0					
ANR	559546	CallExpression	Power3 ( t01 )		559410	1					
ANR	559547	Callee	Power3		559410	0					
ANR	559548	Identifier	Power3		559410	0					
ANR	559549	ArgumentList	t01		559410	1					
ANR	559550	Argument	t01		559410	0					
ANR	559551	Identifier	t01		559410	0					
ANR	559552	ExpressionStatement	pole [ pole_step * 1 ] = q1 * t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 ) + t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) - q0 * t11 * Power2 ( t01 )	930:4:31327:31474	559410	20	True				
ANR	559553	AssignmentExpression	pole [ pole_step * 1 ] = q1 * t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 ) + t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) - q0 * t11 * Power2 ( t01 )		559410	0		=			
ANR	559554	ArrayIndexing	pole [ pole_step * 1 ]		559410	0					
ANR	559555	Identifier	pole		559410	0					
ANR	559556	MultiplicativeExpression	pole_step * 1		559410	1		*			
ANR	559557	Identifier	pole_step		559410	0					
ANR	559558	PrimaryExpression	1		559410	1					
ANR	559559	AdditiveExpression	q1 * t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 ) + t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) - q0 * t11 * Power2 ( t01 )		559410	1		+			
ANR	559560	MultiplicativeExpression	q1 * t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 )		559410	0		*			
ANR	559561	Identifier	q1		559410	0					
ANR	559562	MultiplicativeExpression	t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 )		559410	1		*			
ANR	559563	Identifier	t01		559410	0					
ANR	559564	AdditiveExpression	- 2 * t0 - t1 + 3 * t0 * t1		559410	1		-			
ANR	559565	MultiplicativeExpression	- 2 * t0		559410	0		*			
ANR	559566	UnaryOperationExpression	- 2		559410	0					
ANR	559567	UnaryOperator	-		559410	0					
ANR	559568	PrimaryExpression	2		559410	1					
ANR	559569	Identifier	t0		559410	1					
ANR	559570	AdditiveExpression	t1 + 3 * t0 * t1		559410	1		+			
ANR	559571	Identifier	t1		559410	0					
ANR	559572	MultiplicativeExpression	3 * t0 * t1		559410	1		*			
ANR	559573	PrimaryExpression	3		559410	0					
ANR	559574	MultiplicativeExpression	t0 * t1		559410	1		*			
ANR	559575	Identifier	t0		559410	0					
ANR	559576	Identifier	t1		559410	1					
ANR	559577	AdditiveExpression	t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) - q0 * t11 * Power2 ( t01 )		559410	1		-			
ANR	559578	MultiplicativeExpression	t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 )		559410	0		*			
ANR	559579	Identifier	t0		559410	0					
ANR	559580	AdditiveExpression	q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1		559410	1		+			
ANR	559581	MultiplicativeExpression	q2 * t0		559410	0		*			
ANR	559582	Identifier	q2		559410	0					
ANR	559583	Identifier	t0		559410	1					
ANR	559584	AdditiveExpression	2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1		559410	1		-			
ANR	559585	MultiplicativeExpression	2 * q2 * t1		559410	0		*			
ANR	559586	PrimaryExpression	2		559410	0					
ANR	559587	MultiplicativeExpression	q2 * t1		559410	1		*			
ANR	559588	Identifier	q2		559410	0					
ANR	559589	Identifier	t1		559410	1					
ANR	559590	AdditiveExpression	3 * q2 * t0 * t1 + q3 * t0 * t1		559410	1		+			
ANR	559591	MultiplicativeExpression	3 * q2 * t0 * t1		559410	0		*			
ANR	559592	PrimaryExpression	3		559410	0					
ANR	559593	MultiplicativeExpression	q2 * t0 * t1		559410	1		*			
ANR	559594	Identifier	q2		559410	0					
ANR	559595	MultiplicativeExpression	t0 * t1		559410	1		*			
ANR	559596	Identifier	t0		559410	0					
ANR	559597	Identifier	t1		559410	1					
ANR	559598	MultiplicativeExpression	q3 * t0 * t1		559410	1		*			
ANR	559599	Identifier	q3		559410	0					
ANR	559600	MultiplicativeExpression	t0 * t1		559410	1		*			
ANR	559601	Identifier	t0		559410	0					
ANR	559602	Identifier	t1		559410	1					
ANR	559603	MultiplicativeExpression	q0 * t11 * Power2 ( t01 )		559410	1		*			
ANR	559604	Identifier	q0		559410	0					
ANR	559605	MultiplicativeExpression	t11 * Power2 ( t01 )		559410	1		*			
ANR	559606	Identifier	t11		559410	0					
ANR	559607	CallExpression	Power2 ( t01 )		559410	1					
ANR	559608	Callee	Power2		559410	0					
ANR	559609	Identifier	Power2		559410	0					
ANR	559610	ArgumentList	t01		559410	1					
ANR	559611	Argument	t01		559410	0					
ANR	559612	Identifier	t01		559410	0					
ANR	559613	ExpressionStatement	pole [ pole_step * 2 ] = t1 * ( 2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) + q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11 - q0 * t01 * Power2 ( t11 )	932:4:31480:31627	559410	21	True				
ANR	559614	AssignmentExpression	pole [ pole_step * 2 ] = t1 * ( 2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) + q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11 - q0 * t01 * Power2 ( t11 )		559410	0		=			
ANR	559615	ArrayIndexing	pole [ pole_step * 2 ]		559410	0					
ANR	559616	Identifier	pole		559410	0					
ANR	559617	MultiplicativeExpression	pole_step * 2		559410	1		*			
ANR	559618	Identifier	pole_step		559410	0					
ANR	559619	PrimaryExpression	2		559410	1					
ANR	559620	AdditiveExpression	t1 * ( 2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) + q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11 - q0 * t01 * Power2 ( t11 )		559410	1		+			
ANR	559621	MultiplicativeExpression	t1 * ( 2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 )		559410	0		*			
ANR	559622	Identifier	t1		559410	0					
ANR	559623	AdditiveExpression	2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1		559410	1		+			
ANR	559624	MultiplicativeExpression	2 * q2 * t0		559410	0		*			
ANR	559625	PrimaryExpression	2		559410	0					
ANR	559626	MultiplicativeExpression	q2 * t0		559410	1		*			
ANR	559627	Identifier	q2		559410	0					
ANR	559628	Identifier	t0		559410	1					
ANR	559629	AdditiveExpression	q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1		559410	1		-			
ANR	559630	MultiplicativeExpression	q2 * t1		559410	0		*			
ANR	559631	Identifier	q2		559410	0					
ANR	559632	Identifier	t1		559410	1					
ANR	559633	AdditiveExpression	3 * q2 * t0 * t1 + q3 * t0 * t1		559410	1		+			
ANR	559634	MultiplicativeExpression	3 * q2 * t0 * t1		559410	0		*			
ANR	559635	PrimaryExpression	3		559410	0					
ANR	559636	MultiplicativeExpression	q2 * t0 * t1		559410	1		*			
ANR	559637	Identifier	q2		559410	0					
ANR	559638	MultiplicativeExpression	t0 * t1		559410	1		*			
ANR	559639	Identifier	t0		559410	0					
ANR	559640	Identifier	t1		559410	1					
ANR	559641	MultiplicativeExpression	q3 * t0 * t1		559410	1		*			
ANR	559642	Identifier	q3		559410	0					
ANR	559643	MultiplicativeExpression	t0 * t1		559410	1		*			
ANR	559644	Identifier	t0		559410	0					
ANR	559645	Identifier	t1		559410	1					
ANR	559646	AdditiveExpression	q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11 - q0 * t01 * Power2 ( t11 )		559410	1		-			
ANR	559647	MultiplicativeExpression	q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11		559410	0		*			
ANR	559648	Identifier	q1		559410	0					
ANR	559649	MultiplicativeExpression	( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11		559410	1		*			
ANR	559650	AdditiveExpression	- t0 - 2 * t1 + 3 * t0 * t1		559410	0		-			
ANR	559651	UnaryOperationExpression	- t0		559410	0					
ANR	559652	UnaryOperator	-		559410	0					
ANR	559653	Identifier	t0		559410	1					
ANR	559654	AdditiveExpression	2 * t1 + 3 * t0 * t1		559410	1		+			
ANR	559655	MultiplicativeExpression	2 * t1		559410	0		*			
ANR	559656	PrimaryExpression	2		559410	0					
ANR	559657	Identifier	t1		559410	1					
ANR	559658	MultiplicativeExpression	3 * t0 * t1		559410	1		*			
ANR	559659	PrimaryExpression	3		559410	0					
ANR	559660	MultiplicativeExpression	t0 * t1		559410	1		*			
ANR	559661	Identifier	t0		559410	0					
ANR	559662	Identifier	t1		559410	1					
ANR	559663	Identifier	t11		559410	1					
ANR	559664	MultiplicativeExpression	q0 * t01 * Power2 ( t11 )		559410	1		*			
ANR	559665	Identifier	q0		559410	0					
ANR	559666	MultiplicativeExpression	t01 * Power2 ( t11 )		559410	1		*			
ANR	559667	Identifier	t01		559410	0					
ANR	559668	CallExpression	Power2 ( t11 )		559410	1					
ANR	559669	Callee	Power2		559410	0					
ANR	559670	Identifier	Power2		559410	0					
ANR	559671	ArgumentList	t11		559410	1					
ANR	559672	Argument	t11		559410	0					
ANR	559673	Identifier	t11		559410	0					
ANR	559674	ExpressionStatement	pole [ pole_step * 3 ] = t1 * ( t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 ) ) - q0 * Power3 ( t11 )	934:4:31633:31751	559410	22	True				
ANR	559675	AssignmentExpression	pole [ pole_step * 3 ] = t1 * ( t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 ) ) - q0 * Power3 ( t11 )		559410	0		=			
ANR	559676	ArrayIndexing	pole [ pole_step * 3 ]		559410	0					
ANR	559677	Identifier	pole		559410	0					
ANR	559678	MultiplicativeExpression	pole_step * 3		559410	1		*			
ANR	559679	Identifier	pole_step		559410	0					
ANR	559680	PrimaryExpression	3		559410	1					
ANR	559681	AdditiveExpression	t1 * ( t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 ) ) - q0 * Power3 ( t11 )		559410	1		-			
ANR	559682	MultiplicativeExpression	t1 * ( t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 ) )		559410	0		*			
ANR	559683	Identifier	t1		559410	0					
ANR	559684	AdditiveExpression	t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 )		559410	1		+			
ANR	559685	MultiplicativeExpression	t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 )		559410	0		*			
ANR	559686	Identifier	t1		559410	0					
ANR	559687	AdditiveExpression	3 * q2 - 3 * q2 * t1 + q3 * t1		559410	1		-			
ANR	559688	MultiplicativeExpression	3 * q2		559410	0		*			
ANR	559689	PrimaryExpression	3		559410	0					
ANR	559690	Identifier	q2		559410	1					
ANR	559691	AdditiveExpression	3 * q2 * t1 + q3 * t1		559410	1		+			
ANR	559692	MultiplicativeExpression	3 * q2 * t1		559410	0		*			
ANR	559693	PrimaryExpression	3		559410	0					
ANR	559694	MultiplicativeExpression	q2 * t1		559410	1		*			
ANR	559695	Identifier	q2		559410	0					
ANR	559696	Identifier	t1		559410	1					
ANR	559697	MultiplicativeExpression	q3 * t1		559410	1		*			
ANR	559698	Identifier	q3		559410	0					
ANR	559699	Identifier	t1		559410	1					
ANR	559700	MultiplicativeExpression	3 * q1 * Power2 ( t11 )		559410	1		*			
ANR	559701	PrimaryExpression	3		559410	0					
ANR	559702	MultiplicativeExpression	q1 * Power2 ( t11 )		559410	1		*			
ANR	559703	Identifier	q1		559410	0					
ANR	559704	CallExpression	Power2 ( t11 )		559410	1					
ANR	559705	Callee	Power2		559410	0					
ANR	559706	Identifier	Power2		559410	0					
ANR	559707	ArgumentList	t11		559410	1					
ANR	559708	Argument	t11		559410	0					
ANR	559709	Identifier	t11		559410	0					
ANR	559710	MultiplicativeExpression	q0 * Power3 ( t11 )		559410	1		*			
ANR	559711	Identifier	q0		559410	0					
ANR	559712	CallExpression	Power3 ( t11 )		559410	1					
ANR	559713	Callee	Power3		559410	0					
ANR	559714	Identifier	Power3		559410	0					
ANR	559715	ArgumentList	t11		559410	1					
ANR	559716	Argument	t11		559410	0					
ANR	559717	Identifier	t11		559410	0					
ANR	559718	Statement	undef	936:1:31754:31758	559410	23	True				
ANR	559719	Statement	Power2	936:7:31760:31765	559410	24	True				
ANR	559720	Statement	undef	937:1:31768:31772	559410	25	True				
ANR	559721	Statement	Power3	937:7:31774:31779	559410	26	True				
ANR	559722	IfStatement	if ( any_abs ( pole [ pole_step * 1 ] - pole [ pole_step * 0 ] ) < small )		559410	27					
ANR	559723	Condition	any_abs ( pole [ pole_step * 1 ] - pole [ pole_step * 0 ] ) < small	938:8:31789:31846	559410	0	True				
ANR	559724	RelationalExpression	any_abs ( pole [ pole_step * 1 ] - pole [ pole_step * 0 ] ) < small		559410	0		<			
ANR	559725	CallExpression	any_abs ( pole [ pole_step * 1 ] - pole [ pole_step * 0 ] )		559410	0					
ANR	559726	Callee	any_abs		559410	0					
ANR	559727	Identifier	any_abs		559410	0					
ANR	559728	ArgumentList	pole [ pole_step * 1 ] - pole [ pole_step * 0 ]		559410	1					
ANR	559729	Argument	pole [ pole_step * 1 ] - pole [ pole_step * 0 ]		559410	0					
ANR	559730	AdditiveExpression	pole [ pole_step * 1 ] - pole [ pole_step * 0 ]		559410	0		-			
ANR	559731	ArrayIndexing	pole [ pole_step * 1 ]		559410	0					
ANR	559732	Identifier	pole		559410	0					
ANR	559733	MultiplicativeExpression	pole_step * 1		559410	1		*			
ANR	559734	Identifier	pole_step		559410	0					
ANR	559735	PrimaryExpression	1		559410	1					
ANR	559736	ArrayIndexing	pole [ pole_step * 0 ]		559410	1					
ANR	559737	Identifier	pole		559410	0					
ANR	559738	MultiplicativeExpression	pole_step * 0		559410	1		*			
ANR	559739	Identifier	pole_step		559410	0					
ANR	559740	PrimaryExpression	0		559410	1					
ANR	559741	Identifier	small		559410	1					
ANR	559742	ExpressionStatement	pole [ pole_step * 1 ] = pole [ pole_step * 0 ]	939:8:31857:31898	559410	1	True				
ANR	559743	AssignmentExpression	pole [ pole_step * 1 ] = pole [ pole_step * 0 ]		559410	0		=			
ANR	559744	ArrayIndexing	pole [ pole_step * 1 ]		559410	0					
ANR	559745	Identifier	pole		559410	0					
ANR	559746	MultiplicativeExpression	pole_step * 1		559410	1		*			
ANR	559747	Identifier	pole_step		559410	0					
ANR	559748	PrimaryExpression	1		559410	1					
ANR	559749	ArrayIndexing	pole [ pole_step * 0 ]		559410	1					
ANR	559750	Identifier	pole		559410	0					
ANR	559751	MultiplicativeExpression	pole_step * 0		559410	1		*			
ANR	559752	Identifier	pole_step		559410	0					
ANR	559753	PrimaryExpression	0		559410	1					
ANR	559754	IfStatement	if ( any_abs ( pole [ pole_step * 2 ] - pole [ pole_step * 3 ] ) < small )		559410	28					
ANR	559755	Condition	any_abs ( pole [ pole_step * 2 ] - pole [ pole_step * 3 ] ) < small	940:8:31908:31965	559410	0	True				
ANR	559756	RelationalExpression	any_abs ( pole [ pole_step * 2 ] - pole [ pole_step * 3 ] ) < small		559410	0		<			
ANR	559757	CallExpression	any_abs ( pole [ pole_step * 2 ] - pole [ pole_step * 3 ] )		559410	0					
ANR	559758	Callee	any_abs		559410	0					
ANR	559759	Identifier	any_abs		559410	0					
ANR	559760	ArgumentList	pole [ pole_step * 2 ] - pole [ pole_step * 3 ]		559410	1					
ANR	559761	Argument	pole [ pole_step * 2 ] - pole [ pole_step * 3 ]		559410	0					
ANR	559762	AdditiveExpression	pole [ pole_step * 2 ] - pole [ pole_step * 3 ]		559410	0		-			
ANR	559763	ArrayIndexing	pole [ pole_step * 2 ]		559410	0					
ANR	559764	Identifier	pole		559410	0					
ANR	559765	MultiplicativeExpression	pole_step * 2		559410	1		*			
ANR	559766	Identifier	pole_step		559410	0					
ANR	559767	PrimaryExpression	2		559410	1					
ANR	559768	ArrayIndexing	pole [ pole_step * 3 ]		559410	1					
ANR	559769	Identifier	pole		559410	0					
ANR	559770	MultiplicativeExpression	pole_step * 3		559410	1		*			
ANR	559771	Identifier	pole_step		559410	0					
ANR	559772	PrimaryExpression	3		559410	1					
ANR	559773	Identifier	small		559410	1					
ANR	559774	ExpressionStatement	pole [ pole_step * 2 ] = pole [ pole_step * 3 ]	941:8:31976:32017	559410	1	True				
ANR	559775	AssignmentExpression	pole [ pole_step * 2 ] = pole [ pole_step * 3 ]		559410	0		=			
ANR	559776	ArrayIndexing	pole [ pole_step * 2 ]		559410	0					
ANR	559777	Identifier	pole		559410	0					
ANR	559778	MultiplicativeExpression	pole_step * 2		559410	1		*			
ANR	559779	Identifier	pole_step		559410	0					
ANR	559780	PrimaryExpression	2		559410	1					
ANR	559781	ArrayIndexing	pole [ pole_step * 3 ]		559410	1					
ANR	559782	Identifier	pole		559410	0					
ANR	559783	MultiplicativeExpression	pole_step * 3		559410	1		*			
ANR	559784	Identifier	pole_step		559410	0					
ANR	559785	PrimaryExpression	3		559410	1					
ANR	559786	ReturnType	static inline void		559410	1					
ANR	559787	Identifier	subcurve		559410	2					
ANR	559788	ParameterList	"double * pole , int pole_step , double t0 , double t1"		559410	3					
ANR	559789	Parameter	double * pole	917:9:30844:30855	559410	0	True				
ANR	559790	ParameterType	double *		559410	0					
ANR	559791	Identifier	pole		559410	1					
ANR	559792	Parameter	int pole_step	917:23:30858:30870	559410	1	True				
ANR	559793	ParameterType	int		559410	0					
ANR	559794	Identifier	pole_step		559410	1					
ANR	559795	Parameter	double t0	917:38:30873:30881	559410	2	True				
ANR	559796	ParameterType	double		559410	0					
ANR	559797	Identifier	t0		559410	1					
ANR	559798	Parameter	double t1	917:49:30884:30892	559410	3	True				
ANR	559799	ParameterType	double		559410	0					
ANR	559800	Identifier	t1		559410	1					
ANR	559801	CFGEntryNode	ENTRY		559410		True				
ANR	559802	CFGExitNode	EXIT		559410		True				
ANR	559803	Symbol	q1		559410						
ANR	559804	Symbol	small		559410						
ANR	559805	Symbol	q2		559410						
ANR	559806	Symbol	a		559410						
ANR	559807	Symbol	q3		559410						
ANR	559808	Symbol	* * pole_step		559410						
ANR	559809	Symbol	pole		559410						
ANR	559810	Symbol	* pole_step		559410						
ANR	559811	Symbol	* ( a ) pole [ pole_step * 0 ]		559410						
ANR	559812	Symbol	pole_step		559410						
ANR	559813	Symbol	* pole		559410						
ANR	559814	Symbol	t01		559410						
ANR	559815	Symbol	t11		559410						
ANR	559816	Symbol	any_abs		559410						
ANR	559817	Symbol	Power3		559410						
ANR	559818	Symbol	Power2		559410						
ANR	559819	Symbol	t0		559410						
ANR	559820	Symbol	t1		559410						
ANR	559821	Symbol	q0		559410						
ANR	559822	Symbol	* * pole		559410						
ANR	559823	Function	subline	944:0:32022:32279							
ANR	559824	FunctionDef	"subline (double * pole , int pole_step , double t0 , double t1)"		559823	0					
ANR	559825	CompoundStatement		946:0:32100:32279	559823	0					
ANR	559826	IdentifierDeclStatement	double q0 = pole [ pole_step * 0 ] ;	947:4:32106:32137	559823	0	True				
ANR	559827	IdentifierDecl	q0 = pole [ pole_step * 0 ]		559823	0					
ANR	559828	IdentifierDeclType	double		559823	0					
ANR	559829	Identifier	q0		559823	1					
ANR	559830	AssignmentExpression	q0 = pole [ pole_step * 0 ]		559823	2		=			
ANR	559831	Identifier	q0		559823	0					
ANR	559832	ArrayIndexing	pole [ pole_step * 0 ]		559823	1					
ANR	559833	Identifier	pole		559823	0					
ANR	559834	MultiplicativeExpression	pole_step * 0		559823	1		*			
ANR	559835	Identifier	pole_step		559823	0					
ANR	559836	PrimaryExpression	0		559823	1					
ANR	559837	IdentifierDeclStatement	double q1 = pole [ pole_step * 1 ] ;	948:4:32143:32174	559823	1	True				
ANR	559838	IdentifierDecl	q1 = pole [ pole_step * 1 ]		559823	0					
ANR	559839	IdentifierDeclType	double		559823	0					
ANR	559840	Identifier	q1		559823	1					
ANR	559841	AssignmentExpression	q1 = pole [ pole_step * 1 ]		559823	2		=			
ANR	559842	Identifier	q1		559823	0					
ANR	559843	ArrayIndexing	pole [ pole_step * 1 ]		559823	1					
ANR	559844	Identifier	pole		559823	0					
ANR	559845	MultiplicativeExpression	pole_step * 1		559823	1		*			
ANR	559846	Identifier	pole_step		559823	0					
ANR	559847	PrimaryExpression	1		559823	1					
ANR	559848	ExpressionStatement	pole [ pole_step * 0 ] = ( 1 - t0 ) * q0 + t0 * q1	950:4:32181:32226	559823	2	True				
ANR	559849	AssignmentExpression	pole [ pole_step * 0 ] = ( 1 - t0 ) * q0 + t0 * q1		559823	0		=			
ANR	559850	ArrayIndexing	pole [ pole_step * 0 ]		559823	0					
ANR	559851	Identifier	pole		559823	0					
ANR	559852	MultiplicativeExpression	pole_step * 0		559823	1		*			
ANR	559853	Identifier	pole_step		559823	0					
ANR	559854	PrimaryExpression	0		559823	1					
ANR	559855	AdditiveExpression	( 1 - t0 ) * q0 + t0 * q1		559823	1		+			
ANR	559856	MultiplicativeExpression	( 1 - t0 ) * q0		559823	0		*			
ANR	559857	AdditiveExpression	1 - t0		559823	0		-			
ANR	559858	PrimaryExpression	1		559823	0					
ANR	559859	Identifier	t0		559823	1					
ANR	559860	Identifier	q0		559823	1					
ANR	559861	MultiplicativeExpression	t0 * q1		559823	1		*			
ANR	559862	Identifier	t0		559823	0					
ANR	559863	Identifier	q1		559823	1					
ANR	559864	ExpressionStatement	pole [ pole_step * 1 ] = ( 1 - t1 ) * q0 + t1 * q1	951:4:32232:32277	559823	3	True				
ANR	559865	AssignmentExpression	pole [ pole_step * 1 ] = ( 1 - t1 ) * q0 + t1 * q1		559823	0		=			
ANR	559866	ArrayIndexing	pole [ pole_step * 1 ]		559823	0					
ANR	559867	Identifier	pole		559823	0					
ANR	559868	MultiplicativeExpression	pole_step * 1		559823	1		*			
ANR	559869	Identifier	pole_step		559823	0					
ANR	559870	PrimaryExpression	1		559823	1					
ANR	559871	AdditiveExpression	( 1 - t1 ) * q0 + t1 * q1		559823	1		+			
ANR	559872	MultiplicativeExpression	( 1 - t1 ) * q0		559823	0		*			
ANR	559873	AdditiveExpression	1 - t1		559823	0		-			
ANR	559874	PrimaryExpression	1		559823	0					
ANR	559875	Identifier	t1		559823	1					
ANR	559876	Identifier	q0		559823	1					
ANR	559877	MultiplicativeExpression	t1 * q1		559823	1		*			
ANR	559878	Identifier	t1		559823	0					
ANR	559879	Identifier	q1		559823	1					
ANR	559880	ReturnType	static inline void		559823	1					
ANR	559881	Identifier	subline		559823	2					
ANR	559882	ParameterList	"double * pole , int pole_step , double t0 , double t1"		559823	3					
ANR	559883	Parameter	double * pole	945:8:32049:32060	559823	0	True				
ANR	559884	ParameterType	double *		559823	0					
ANR	559885	Identifier	pole		559823	1					
ANR	559886	Parameter	int pole_step	945:22:32063:32075	559823	1	True				
ANR	559887	ParameterType	int		559823	0					
ANR	559888	Identifier	pole_step		559823	1					
ANR	559889	Parameter	double t0	945:37:32078:32086	559823	2	True				
ANR	559890	ParameterType	double		559823	0					
ANR	559891	Identifier	t0		559823	1					
ANR	559892	Parameter	double t1	945:48:32089:32097	559823	3	True				
ANR	559893	ParameterType	double		559823	0					
ANR	559894	Identifier	t1		559823	1					
ANR	559895	CFGEntryNode	ENTRY		559823		True				
ANR	559896	CFGExitNode	EXIT		559823		True				
ANR	559897	Symbol	q1		559823						
ANR	559898	Symbol	pole		559823						
ANR	559899	Symbol	t0		559823						
ANR	559900	Symbol	* pole_step		559823						
ANR	559901	Symbol	pole_step		559823						
ANR	559902	Symbol	t1		559823						
ANR	559903	Symbol	* pole		559823						
ANR	559904	Symbol	q0		559823						
ANR	559905	Function	clamp_poles	954:0:32282:32984							
ANR	559906	FunctionDef	"clamp_poles (double * T0 , double * T1 , int ii , int i , double * pole , int p_offset , int pole_step , int pole_step_i , int order)"		559905	0					
ANR	559907	CompoundStatement		957:0:32433:32984	559905	0					
ANR	559908	IfStatement	if ( ii < 0 )		559905	0					
ANR	559909	Condition	ii < 0	958:8:32443:32448	559905	0	True				
ANR	559910	RelationalExpression	ii < 0		559905	0		<			
ANR	559911	Identifier	ii		559905	0					
ANR	559912	PrimaryExpression	0		559905	1					
ANR	559913	CompoundStatement		2:16:17:17	559905	1					
ANR	559914	IfStatement	if ( order == 3 )		559905	0					
ANR	559915	Condition	order == 3	959:12:32465:32474	559905	0	True				
ANR	559916	EqualityExpression	order == 3		559905	0		==			
ANR	559917	Identifier	order		559905	0					
ANR	559918	PrimaryExpression	3		559905	1					
ANR	559919	ExpressionStatement	"subcurve ( pole + p_offset , pole_step_i , T0 [ i ] , T1 [ i ] )"	960:12:32489:32541	559905	1	True				
ANR	559920	CallExpression	"subcurve ( pole + p_offset , pole_step_i , T0 [ i ] , T1 [ i ] )"		559905	0					
ANR	559921	Callee	subcurve		559905	0					
ANR	559922	Identifier	subcurve		559905	0					
ANR	559923	ArgumentList	pole + p_offset		559905	1					
ANR	559924	Argument	pole + p_offset		559905	0					
ANR	559925	AdditiveExpression	pole + p_offset		559905	0		+			
ANR	559926	Identifier	pole		559905	0					
ANR	559927	Identifier	p_offset		559905	1					
ANR	559928	Argument	pole_step_i		559905	1					
ANR	559929	Identifier	pole_step_i		559905	0					
ANR	559930	Argument	T0 [ i ]		559905	2					
ANR	559931	ArrayIndexing	T0 [ i ]		559905	0					
ANR	559932	Identifier	T0		559905	0					
ANR	559933	Identifier	i		559905	1					
ANR	559934	Argument	T1 [ i ]		559905	3					
ANR	559935	ArrayIndexing	T1 [ i ]		559905	0					
ANR	559936	Identifier	T1		559905	0					
ANR	559937	Identifier	i		559905	1					
ANR	559938	ElseStatement	else		559905	0					
ANR	559939	ExpressionStatement	"subline ( pole + p_offset , pole_step_i , T0 [ i ] , T1 [ i ] )"	962:12:32568:32619	559905	0	True				
ANR	559940	CallExpression	"subline ( pole + p_offset , pole_step_i , T0 [ i ] , T1 [ i ] )"		559905	0					
ANR	559941	Callee	subline		559905	0					
ANR	559942	Identifier	subline		559905	0					
ANR	559943	ArgumentList	pole + p_offset		559905	1					
ANR	559944	Argument	pole + p_offset		559905	0					
ANR	559945	AdditiveExpression	pole + p_offset		559905	0		+			
ANR	559946	Identifier	pole		559905	0					
ANR	559947	Identifier	p_offset		559905	1					
ANR	559948	Argument	pole_step_i		559905	1					
ANR	559949	Identifier	pole_step_i		559905	0					
ANR	559950	Argument	T0 [ i ]		559905	2					
ANR	559951	ArrayIndexing	T0 [ i ]		559905	0					
ANR	559952	Identifier	T0		559905	0					
ANR	559953	Identifier	i		559905	1					
ANR	559954	Argument	T1 [ i ]		559905	3					
ANR	559955	ArrayIndexing	T1 [ i ]		559905	0					
ANR	559956	Identifier	T1		559905	0					
ANR	559957	Identifier	i		559905	1					
ANR	559958	ElseStatement	else		559905	0					
ANR	559959	IfStatement	if ( i == ii )		559905	0					
ANR	559960	Condition	i == ii	963:15:32636:32642	559905	0	True				
ANR	559961	EqualityExpression	i == ii		559905	0		==			
ANR	559962	Identifier	i		559905	0					
ANR	559963	Identifier	ii		559905	1					
ANR	559964	CompoundStatement		7:24:211:211	559905	1					
ANR	559965	ExpressionStatement	"clamp_poles ( T0 , T1 , ii - 1 , i , pole , p_offset , pole_step / 4 , pole_step , order )"	964:8:32655:32734	559905	0	True				
ANR	559966	CallExpression	"clamp_poles ( T0 , T1 , ii - 1 , i , pole , p_offset , pole_step / 4 , pole_step , order )"		559905	0					
ANR	559967	Callee	clamp_poles		559905	0					
ANR	559968	Identifier	clamp_poles		559905	0					
ANR	559969	ArgumentList	T0		559905	1					
ANR	559970	Argument	T0		559905	0					
ANR	559971	Identifier	T0		559905	0					
ANR	559972	Argument	T1		559905	1					
ANR	559973	Identifier	T1		559905	0					
ANR	559974	Argument	ii - 1		559905	2					
ANR	559975	AdditiveExpression	ii - 1		559905	0		-			
ANR	559976	Identifier	ii		559905	0					
ANR	559977	PrimaryExpression	1		559905	1					
ANR	559978	Argument	i		559905	3					
ANR	559979	Identifier	i		559905	0					
ANR	559980	Argument	pole		559905	4					
ANR	559981	Identifier	pole		559905	0					
ANR	559982	Argument	p_offset		559905	5					
ANR	559983	Identifier	p_offset		559905	0					
ANR	559984	Argument	pole_step / 4		559905	6					
ANR	559985	MultiplicativeExpression	pole_step / 4		559905	0		/			
ANR	559986	Identifier	pole_step		559905	0					
ANR	559987	PrimaryExpression	4		559905	1					
ANR	559988	Argument	pole_step		559905	7					
ANR	559989	Identifier	pole_step		559905	0					
ANR	559990	Argument	order		559905	8					
ANR	559991	Identifier	order		559905	0					
ANR	559992	ElseStatement	else		559905	0					
ANR	559993	CompoundStatement		10:8:323:369	559905	0					
ANR	559994	IdentifierDeclStatement	"int j , ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 ) ;"	966:8:32757:32803	559905	0	True				
ANR	559995	IdentifierDecl	j		559905	0					
ANR	559996	IdentifierDeclType	int		559905	0					
ANR	559997	Identifier	j		559905	1					
ANR	559998	IdentifierDecl	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		559905	1					
ANR	559999	IdentifierDeclType	int		559905	0					
ANR	560000	Identifier	ei		559905	1					
ANR	560001	AssignmentExpression	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		559905	2		=			
ANR	560002	Identifier	ei		559905	0					
ANR	560003	ConditionalExpression	T0 [ ii ] == T1 [ ii ] ? 1 : order + 1		559905	1					
ANR	560004	Condition	T0 [ ii ] == T1 [ ii ]		559905	0					
ANR	560005	EqualityExpression	T0 [ ii ] == T1 [ ii ]		559905	0		==			
ANR	560006	ArrayIndexing	T0 [ ii ]		559905	0					
ANR	560007	Identifier	T0		559905	0					
ANR	560008	Identifier	ii		559905	1					
ANR	560009	ArrayIndexing	T1 [ ii ]		559905	1					
ANR	560010	Identifier	T1		559905	0					
ANR	560011	Identifier	ii		559905	1					
ANR	560012	PrimaryExpression	1		559905	1					
ANR	560013	AdditiveExpression	order + 1		559905	2		+			
ANR	560014	Identifier	order		559905	0					
ANR	560015	PrimaryExpression	1		559905	1					
ANR	560016	ForStatement	for ( j = 0 ; j < ei ; j ++ )		559905	1					
ANR	560017	ForInit	j = 0 ;	968:13:32819:32824	559905	0	True				
ANR	560018	AssignmentExpression	j = 0		559905	0		=			
ANR	560019	Identifier	j		559905	0					
ANR	560020	PrimaryExpression	0		559905	1					
ANR	560021	Condition	j < ei	968:20:32826:32831	559905	1	True				
ANR	560022	RelationalExpression	j < ei		559905	0		<			
ANR	560023	Identifier	j		559905	0					
ANR	560024	Identifier	ei		559905	1					
ANR	560025	PostIncDecOperationExpression	j ++	968:28:32834:32836	559905	2	True				
ANR	560026	Identifier	j		559905	0					
ANR	560027	IncDec	++		559905	1					
ANR	560028	ExpressionStatement	"clamp_poles ( T0 , T1 , ii - 1 , i , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"	969:12:32851:32976	559905	3	True				
ANR	560029	CallExpression	"clamp_poles ( T0 , T1 , ii - 1 , i , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"		559905	0					
ANR	560030	Callee	clamp_poles		559905	0					
ANR	560031	Identifier	clamp_poles		559905	0					
ANR	560032	ArgumentList	T0		559905	1					
ANR	560033	Argument	T0		559905	0					
ANR	560034	Identifier	T0		559905	0					
ANR	560035	Argument	T1		559905	1					
ANR	560036	Identifier	T1		559905	0					
ANR	560037	Argument	ii - 1		559905	2					
ANR	560038	AdditiveExpression	ii - 1		559905	0		-			
ANR	560039	Identifier	ii		559905	0					
ANR	560040	PrimaryExpression	1		559905	1					
ANR	560041	Argument	i		559905	3					
ANR	560042	Identifier	i		559905	0					
ANR	560043	Argument	pole		559905	4					
ANR	560044	Identifier	pole		559905	0					
ANR	560045	Argument	p_offset + j * pole_step		559905	5					
ANR	560046	AdditiveExpression	p_offset + j * pole_step		559905	0		+			
ANR	560047	Identifier	p_offset		559905	0					
ANR	560048	MultiplicativeExpression	j * pole_step		559905	1		*			
ANR	560049	Identifier	j		559905	0					
ANR	560050	Identifier	pole_step		559905	1					
ANR	560051	Argument	pole_step / 4		559905	6					
ANR	560052	MultiplicativeExpression	pole_step / 4		559905	0		/			
ANR	560053	Identifier	pole_step		559905	0					
ANR	560054	PrimaryExpression	4		559905	1					
ANR	560055	Argument	pole_step_i		559905	7					
ANR	560056	Identifier	pole_step_i		559905	0					
ANR	560057	Argument	order		559905	8					
ANR	560058	Identifier	order		559905	0					
ANR	560059	ReturnType	static void		559905	1					
ANR	560060	Identifier	clamp_poles		559905	2					
ANR	560061	ParameterList	"double * T0 , double * T1 , int ii , int i , double * pole , int p_offset , int pole_step , int pole_step_i , int order"		559905	3					
ANR	560062	Parameter	double * T0	955:12:32306:32315	559905	0	True				
ANR	560063	ParameterType	double *		559905	0					
ANR	560064	Identifier	T0		559905	1					
ANR	560065	Parameter	double * T1	955:24:32318:32327	559905	1	True				
ANR	560066	ParameterType	double *		559905	0					
ANR	560067	Identifier	T1		559905	1					
ANR	560068	Parameter	int ii	955:36:32330:32335	559905	2	True				
ANR	560069	ParameterType	int		559905	0					
ANR	560070	Identifier	ii		559905	1					
ANR	560071	Parameter	int i	955:44:32338:32342	559905	3	True				
ANR	560072	ParameterType	int		559905	0					
ANR	560073	Identifier	i		559905	1					
ANR	560074	Parameter	double * pole	955:51:32345:32357	559905	4	True				
ANR	560075	ParameterType	double *		559905	0					
ANR	560076	Identifier	pole		559905	1					
ANR	560077	Parameter	int p_offset	956:16:32376:32387	559905	5	True				
ANR	560078	ParameterType	int		559905	0					
ANR	560079	Identifier	p_offset		559905	1					
ANR	560080	Parameter	int pole_step	956:30:32390:32402	559905	6	True				
ANR	560081	ParameterType	int		559905	0					
ANR	560082	Identifier	pole_step		559905	1					
ANR	560083	Parameter	int pole_step_i	956:45:32405:32419	559905	7	True				
ANR	560084	ParameterType	int		559905	0					
ANR	560085	Identifier	pole_step_i		559905	1					
ANR	560086	Parameter	int order	956:62:32422:32430	559905	8	True				
ANR	560087	ParameterType	int		559905	0					
ANR	560088	Identifier	order		559905	1					
ANR	560089	CFGEntryNode	ENTRY		559905		True				
ANR	560090	CFGExitNode	EXIT		559905		True				
ANR	560091	Symbol	ii		559905						
ANR	560092	Symbol	* T1		559905						
ANR	560093	Symbol	* T0		559905						
ANR	560094	Symbol	ei		559905						
ANR	560095	Symbol	* ii		559905						
ANR	560096	Symbol	pole_step_i		559905						
ANR	560097	Symbol	i		559905						
ANR	560098	Symbol	p_offset		559905						
ANR	560099	Symbol	j		559905						
ANR	560100	Symbol	pole		559905						
ANR	560101	Symbol	pole_step		559905						
ANR	560102	Symbol	* i		559905						
ANR	560103	Symbol	T0		559905						
ANR	560104	Symbol	T1		559905						
ANR	560105	Symbol	order		559905						
ANR	560106	Function	curve_monotonity	974:0:32987:33621							
ANR	560107	FunctionDef	"curve_monotonity (double * pole , int pole_step)"		560106	0					
ANR	560108	CompoundStatement		976:0:33119:33621	560106	0					
ANR	560109	IdentifierDeclStatement	double p0 = pole [ pole_step * 0 ] ;	977:4:33125:33156	560106	0	True				
ANR	560110	IdentifierDecl	p0 = pole [ pole_step * 0 ]		560106	0					
ANR	560111	IdentifierDeclType	double		560106	0					
ANR	560112	Identifier	p0		560106	1					
ANR	560113	AssignmentExpression	p0 = pole [ pole_step * 0 ]		560106	2		=			
ANR	560114	Identifier	p0		560106	0					
ANR	560115	ArrayIndexing	pole [ pole_step * 0 ]		560106	1					
ANR	560116	Identifier	pole		560106	0					
ANR	560117	MultiplicativeExpression	pole_step * 0		560106	1		*			
ANR	560118	Identifier	pole_step		560106	0					
ANR	560119	PrimaryExpression	0		560106	1					
ANR	560120	IdentifierDeclStatement	double p1 = pole [ pole_step * 1 ] ;	978:4:33162:33193	560106	1	True				
ANR	560121	IdentifierDecl	p1 = pole [ pole_step * 1 ]		560106	0					
ANR	560122	IdentifierDeclType	double		560106	0					
ANR	560123	Identifier	p1		560106	1					
ANR	560124	AssignmentExpression	p1 = pole [ pole_step * 1 ]		560106	2		=			
ANR	560125	Identifier	p1		560106	0					
ANR	560126	ArrayIndexing	pole [ pole_step * 1 ]		560106	1					
ANR	560127	Identifier	pole		560106	0					
ANR	560128	MultiplicativeExpression	pole_step * 1		560106	1		*			
ANR	560129	Identifier	pole_step		560106	0					
ANR	560130	PrimaryExpression	1		560106	1					
ANR	560131	IdentifierDeclStatement	double p2 = pole [ pole_step * 2 ] ;	979:4:33199:33230	560106	2	True				
ANR	560132	IdentifierDecl	p2 = pole [ pole_step * 2 ]		560106	0					
ANR	560133	IdentifierDeclType	double		560106	0					
ANR	560134	Identifier	p2		560106	1					
ANR	560135	AssignmentExpression	p2 = pole [ pole_step * 2 ]		560106	2		=			
ANR	560136	Identifier	p2		560106	0					
ANR	560137	ArrayIndexing	pole [ pole_step * 2 ]		560106	1					
ANR	560138	Identifier	pole		560106	0					
ANR	560139	MultiplicativeExpression	pole_step * 2		560106	1		*			
ANR	560140	Identifier	pole_step		560106	0					
ANR	560141	PrimaryExpression	2		560106	1					
ANR	560142	IdentifierDeclStatement	double p3 = pole [ pole_step * 3 ] ;	980:4:33236:33267	560106	3	True				
ANR	560143	IdentifierDecl	p3 = pole [ pole_step * 3 ]		560106	0					
ANR	560144	IdentifierDeclType	double		560106	0					
ANR	560145	Identifier	p3		560106	1					
ANR	560146	AssignmentExpression	p3 = pole [ pole_step * 3 ]		560106	2		=			
ANR	560147	Identifier	p3		560106	0					
ANR	560148	ArrayIndexing	pole [ pole_step * 3 ]		560106	1					
ANR	560149	Identifier	pole		560106	0					
ANR	560150	MultiplicativeExpression	pole_step * 3		560106	1		*			
ANR	560151	Identifier	pole_step		560106	0					
ANR	560152	PrimaryExpression	3		560106	1					
ANR	560153	IfStatement	if ( p0 == p1 && any_abs ( p1 - p2 ) < 1e-13 && p2 == p3 )		560106	4					
ANR	560154	Condition	p0 == p1 && any_abs ( p1 - p2 ) < 1e-13 && p2 == p3	982:8:33278:33325	560106	0	True				
ANR	560155	AndExpression	p0 == p1 && any_abs ( p1 - p2 ) < 1e-13 && p2 == p3		560106	0		&&			
ANR	560156	EqualityExpression	p0 == p1		560106	0		==			
ANR	560157	Identifier	p0		560106	0					
ANR	560158	Identifier	p1		560106	1					
ANR	560159	AndExpression	any_abs ( p1 - p2 ) < 1e-13 && p2 == p3		560106	1		&&			
ANR	560160	RelationalExpression	any_abs ( p1 - p2 ) < 1e-13		560106	0		<			
ANR	560161	CallExpression	any_abs ( p1 - p2 )		560106	0					
ANR	560162	Callee	any_abs		560106	0					
ANR	560163	Identifier	any_abs		560106	0					
ANR	560164	ArgumentList	p1 - p2		560106	1					
ANR	560165	Argument	p1 - p2		560106	0					
ANR	560166	AdditiveExpression	p1 - p2		560106	0		-			
ANR	560167	Identifier	p1		560106	0					
ANR	560168	Identifier	p2		560106	1					
ANR	560169	PrimaryExpression	1e-13		560106	1					
ANR	560170	EqualityExpression	p2 == p3		560106	1		==			
ANR	560171	Identifier	p2		560106	0					
ANR	560172	Identifier	p3		560106	1					
ANR	560173	ReturnStatement	return 0 ;	983:8:33336:33344	560106	1	True				
ANR	560174	PrimaryExpression	0		560106	0					
ANR	560175	IfStatement	if ( p0 <= p1 && p1 <= p2 && p2 <= p3 )		560106	5					
ANR	560176	Condition	p0 <= p1 && p1 <= p2 && p2 <= p3	984:8:33354:33385	560106	0	True				
ANR	560177	AndExpression	p0 <= p1 && p1 <= p2 && p2 <= p3		560106	0		&&			
ANR	560178	RelationalExpression	p0 <= p1		560106	0		<=			
ANR	560179	Identifier	p0		560106	0					
ANR	560180	Identifier	p1		560106	1					
ANR	560181	AndExpression	p1 <= p2 && p2 <= p3		560106	1		&&			
ANR	560182	RelationalExpression	p1 <= p2		560106	0		<=			
ANR	560183	Identifier	p1		560106	0					
ANR	560184	Identifier	p2		560106	1					
ANR	560185	RelationalExpression	p2 <= p3		560106	1		<=			
ANR	560186	Identifier	p2		560106	0					
ANR	560187	Identifier	p3		560106	1					
ANR	560188	ReturnStatement	return 1 ;	985:8:33396:33404	560106	1	True				
ANR	560189	PrimaryExpression	1		560106	0					
ANR	560190	IfStatement	if ( p0 >= p1 && p1 >= p2 && p2 >= p3 )		560106	6					
ANR	560191	Condition	p0 >= p1 && p1 >= p2 && p2 >= p3	986:8:33414:33445	560106	0	True				
ANR	560192	AndExpression	p0 >= p1 && p1 >= p2 && p2 >= p3		560106	0		&&			
ANR	560193	RelationalExpression	p0 >= p1		560106	0		>=			
ANR	560194	Identifier	p0		560106	0					
ANR	560195	Identifier	p1		560106	1					
ANR	560196	AndExpression	p1 >= p2 && p2 >= p3		560106	1		&&			
ANR	560197	RelationalExpression	p1 >= p2		560106	0		>=			
ANR	560198	Identifier	p1		560106	0					
ANR	560199	Identifier	p2		560106	1					
ANR	560200	RelationalExpression	p2 >= p3		560106	1		>=			
ANR	560201	Identifier	p2		560106	0					
ANR	560202	Identifier	p3		560106	1					
ANR	560203	ReturnStatement	return 2 ;	987:8:33456:33464	560106	1	True				
ANR	560204	PrimaryExpression	2		560106	0					
ANR	560205	ReturnStatement	return 3 ;	992:4:33611:33619	560106	7	True				
ANR	560206	PrimaryExpression	3		560106	0					
ANR	560207	ReturnType	static inline int		560106	1					
ANR	560208	Identifier	curve_monotonity		560106	2					
ANR	560209	ParameterList	"double * pole , int pole_step"		560106	3					
ANR	560210	Parameter	double * pole	975:17:33090:33101	560106	0	True				
ANR	560211	ParameterType	double *		560106	0					
ANR	560212	Identifier	pole		560106	1					
ANR	560213	Parameter	int pole_step	975:31:33104:33116	560106	1	True				
ANR	560214	ParameterType	int		560106	0					
ANR	560215	Identifier	pole_step		560106	1					
ANR	560216	CFGEntryNode	ENTRY		560106		True				
ANR	560217	CFGExitNode	EXIT		560106		True				
ANR	560218	Symbol	p0		560106						
ANR	560219	Symbol	p1		560106						
ANR	560220	Symbol	p2		560106						
ANR	560221	Symbol	p3		560106						
ANR	560222	Symbol	any_abs		560106						
ANR	560223	Symbol	pole		560106						
ANR	560224	Symbol	* pole_step		560106						
ANR	560225	Symbol	pole_step		560106						
ANR	560226	Symbol	* pole		560106						
ANR	560227	Function	line_monotonity	995:0:33624:33916							
ANR	560228	FunctionDef	"line_monotonity (double * pole , int pole_step)"		560227	0					
ANR	560229	CompoundStatement		997:0:33739:33916	560227	0					
ANR	560230	IdentifierDeclStatement	double p0 = pole [ pole_step * 0 ] ;	998:4:33745:33776	560227	0	True				
ANR	560231	IdentifierDecl	p0 = pole [ pole_step * 0 ]		560227	0					
ANR	560232	IdentifierDeclType	double		560227	0					
ANR	560233	Identifier	p0		560227	1					
ANR	560234	AssignmentExpression	p0 = pole [ pole_step * 0 ]		560227	2		=			
ANR	560235	Identifier	p0		560227	0					
ANR	560236	ArrayIndexing	pole [ pole_step * 0 ]		560227	1					
ANR	560237	Identifier	pole		560227	0					
ANR	560238	MultiplicativeExpression	pole_step * 0		560227	1		*			
ANR	560239	Identifier	pole_step		560227	0					
ANR	560240	PrimaryExpression	0		560227	1					
ANR	560241	IdentifierDeclStatement	double p1 = pole [ pole_step * 1 ] ;	999:4:33782:33813	560227	1	True				
ANR	560242	IdentifierDecl	p1 = pole [ pole_step * 1 ]		560227	0					
ANR	560243	IdentifierDeclType	double		560227	0					
ANR	560244	Identifier	p1		560227	1					
ANR	560245	AssignmentExpression	p1 = pole [ pole_step * 1 ]		560227	2		=			
ANR	560246	Identifier	p1		560227	0					
ANR	560247	ArrayIndexing	pole [ pole_step * 1 ]		560227	1					
ANR	560248	Identifier	pole		560227	0					
ANR	560249	MultiplicativeExpression	pole_step * 1		560227	1		*			
ANR	560250	Identifier	pole_step		560227	0					
ANR	560251	PrimaryExpression	1		560227	1					
ANR	560252	IfStatement	if ( p1 - p0 > 1e-13 )		560227	2					
ANR	560253	Condition	p1 - p0 > 1e-13	1001:8:33824:33838	560227	0	True				
ANR	560254	RelationalExpression	p1 - p0 > 1e-13		560227	0		>			
ANR	560255	AdditiveExpression	p1 - p0		560227	0		-			
ANR	560256	Identifier	p1		560227	0					
ANR	560257	Identifier	p0		560227	1					
ANR	560258	PrimaryExpression	1e-13		560227	1					
ANR	560259	ReturnStatement	return 1 ;	1002:8:33849:33857	560227	1	True				
ANR	560260	PrimaryExpression	1		560227	0					
ANR	560261	IfStatement	if ( p0 - p1 > 1e-13 )		560227	3					
ANR	560262	Condition	p0 - p1 > 1e-13	1003:8:33867:33881	560227	0	True				
ANR	560263	RelationalExpression	p0 - p1 > 1e-13		560227	0		>			
ANR	560264	AdditiveExpression	p0 - p1		560227	0		-			
ANR	560265	Identifier	p0		560227	0					
ANR	560266	Identifier	p1		560227	1					
ANR	560267	PrimaryExpression	1e-13		560227	1					
ANR	560268	ReturnStatement	return 2 ;	1004:8:33892:33900	560227	1	True				
ANR	560269	PrimaryExpression	2		560227	0					
ANR	560270	ReturnStatement	return 0 ;	1005:4:33906:33914	560227	4	True				
ANR	560271	PrimaryExpression	0		560227	0					
ANR	560272	ReturnType	static inline int		560227	1					
ANR	560273	Identifier	line_monotonity		560227	2					
ANR	560274	ParameterList	"double * pole , int pole_step"		560227	3					
ANR	560275	Parameter	double * pole	996:16:33710:33721	560227	0	True				
ANR	560276	ParameterType	double *		560227	0					
ANR	560277	Identifier	pole		560227	1					
ANR	560278	Parameter	int pole_step	996:30:33724:33736	560227	1	True				
ANR	560279	ParameterType	int		560227	0					
ANR	560280	Identifier	pole_step		560227	1					
ANR	560281	CFGEntryNode	ENTRY		560227		True				
ANR	560282	CFGExitNode	EXIT		560227		True				
ANR	560283	Symbol	p0		560227						
ANR	560284	Symbol	p1		560227						
ANR	560285	Symbol	pole		560227						
ANR	560286	Symbol	* pole_step		560227						
ANR	560287	Symbol	pole_step		560227						
ANR	560288	Symbol	* pole		560227						
ANR	560289	Function	tensor_dimension_monotonity	1008:0:33919:35230							
ANR	560290	FunctionDef	"tensor_dimension_monotonity (const double * T0 , const double * T1 , int ii , int i0 , double * pole , int p_offset , int pole_step , int pole_step_i , int order)"		560289	0					
ANR	560291	CompoundStatement		1013:0:34274:35230	560289	0					
ANR	560292	IfStatement	if ( ii < 0 )		560289	0					
ANR	560293	Condition	ii < 0	1014:8:34284:34289	560289	0	True				
ANR	560294	RelationalExpression	ii < 0		560289	0		<			
ANR	560295	Identifier	ii		560289	0					
ANR	560296	PrimaryExpression	0		560289	1					
ANR	560297	CompoundStatement		2:16:17:17	560289	1					
ANR	560298	IfStatement	if ( order == 3 )		560289	0					
ANR	560299	Condition	order == 3	1015:12:34306:34315	560289	0	True				
ANR	560300	EqualityExpression	order == 3		560289	0		==			
ANR	560301	Identifier	order		560289	0					
ANR	560302	PrimaryExpression	3		560289	1					
ANR	560303	ReturnStatement	"return curve_monotonity ( pole + p_offset , pole_step_i ) ;"	1016:12:34330:34383	560289	1	True				
ANR	560304	CallExpression	"curve_monotonity ( pole + p_offset , pole_step_i )"		560289	0					
ANR	560305	Callee	curve_monotonity		560289	0					
ANR	560306	Identifier	curve_monotonity		560289	0					
ANR	560307	ArgumentList	pole + p_offset		560289	1					
ANR	560308	Argument	pole + p_offset		560289	0					
ANR	560309	AdditiveExpression	pole + p_offset		560289	0		+			
ANR	560310	Identifier	pole		560289	0					
ANR	560311	Identifier	p_offset		560289	1					
ANR	560312	Argument	pole_step_i		560289	1					
ANR	560313	Identifier	pole_step_i		560289	0					
ANR	560314	ElseStatement	else		560289	0					
ANR	560315	ReturnStatement	"return line_monotonity ( pole + p_offset , pole_step_i ) ;"	1018:12:34410:34462	560289	0	True				
ANR	560316	CallExpression	"line_monotonity ( pole + p_offset , pole_step_i )"		560289	0					
ANR	560317	Callee	line_monotonity		560289	0					
ANR	560318	Identifier	line_monotonity		560289	0					
ANR	560319	ArgumentList	pole + p_offset		560289	1					
ANR	560320	Argument	pole + p_offset		560289	0					
ANR	560321	AdditiveExpression	pole + p_offset		560289	0		+			
ANR	560322	Identifier	pole		560289	0					
ANR	560323	Identifier	p_offset		560289	1					
ANR	560324	Argument	pole_step_i		560289	1					
ANR	560325	Identifier	pole_step_i		560289	0					
ANR	560326	ElseStatement	else		560289	0					
ANR	560327	IfStatement	if ( i0 == ii )		560289	0					
ANR	560328	Condition	i0 == ii	1019:15:34479:34486	560289	0	True				
ANR	560329	EqualityExpression	i0 == ii		560289	0		==			
ANR	560330	Identifier	i0		560289	0					
ANR	560331	Identifier	ii		560289	1					
ANR	560332	CompoundStatement		7:25:214:214	560289	1					
ANR	560333	ReturnStatement	"return tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset , pole_step / 4 , pole_step , order ) ;"	1021:8:34569:34700	560289	0	True				
ANR	560334	CallExpression	"tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset , pole_step / 4 , pole_step , order )"		560289	0					
ANR	560335	Callee	tensor_dimension_monotonity		560289	0					
ANR	560336	Identifier	tensor_dimension_monotonity		560289	0					
ANR	560337	ArgumentList	T0		560289	1					
ANR	560338	Argument	T0		560289	0					
ANR	560339	Identifier	T0		560289	0					
ANR	560340	Argument	T1		560289	1					
ANR	560341	Identifier	T1		560289	0					
ANR	560342	Argument	ii - 1		560289	2					
ANR	560343	AdditiveExpression	ii - 1		560289	0		-			
ANR	560344	Identifier	ii		560289	0					
ANR	560345	PrimaryExpression	1		560289	1					
ANR	560346	Argument	i0		560289	3					
ANR	560347	Identifier	i0		560289	0					
ANR	560348	Argument	pole		560289	4					
ANR	560349	Identifier	pole		560289	0					
ANR	560350	Argument	p_offset		560289	5					
ANR	560351	Identifier	p_offset		560289	0					
ANR	560352	Argument	pole_step / 4		560289	6					
ANR	560353	MultiplicativeExpression	pole_step / 4		560289	0		/			
ANR	560354	Identifier	pole_step		560289	0					
ANR	560355	PrimaryExpression	4		560289	1					
ANR	560356	Argument	pole_step		560289	7					
ANR	560357	Identifier	pole_step		560289	0					
ANR	560358	Argument	order		560289	8					
ANR	560359	Identifier	order		560289	0					
ANR	560360	ElseStatement	else		560289	0					
ANR	560361	CompoundStatement		12:8:448:505	560289	0					
ANR	560362	IdentifierDeclStatement	"int j , ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 ) , m = 0 , mm ;"	1024:8:34723:34780	560289	0	True				
ANR	560363	IdentifierDecl	j		560289	0					
ANR	560364	IdentifierDeclType	int		560289	0					
ANR	560365	Identifier	j		560289	1					
ANR	560366	IdentifierDecl	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		560289	1					
ANR	560367	IdentifierDeclType	int		560289	0					
ANR	560368	Identifier	ei		560289	1					
ANR	560369	AssignmentExpression	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		560289	2		=			
ANR	560370	Identifier	ei		560289	0					
ANR	560371	ConditionalExpression	T0 [ ii ] == T1 [ ii ] ? 1 : order + 1		560289	1					
ANR	560372	Condition	T0 [ ii ] == T1 [ ii ]		560289	0					
ANR	560373	EqualityExpression	T0 [ ii ] == T1 [ ii ]		560289	0		==			
ANR	560374	ArrayIndexing	T0 [ ii ]		560289	0					
ANR	560375	Identifier	T0		560289	0					
ANR	560376	Identifier	ii		560289	1					
ANR	560377	ArrayIndexing	T1 [ ii ]		560289	1					
ANR	560378	Identifier	T1		560289	0					
ANR	560379	Identifier	ii		560289	1					
ANR	560380	PrimaryExpression	1		560289	1					
ANR	560381	AdditiveExpression	order + 1		560289	2		+			
ANR	560382	Identifier	order		560289	0					
ANR	560383	PrimaryExpression	1		560289	1					
ANR	560384	IdentifierDecl	m = 0		560289	2					
ANR	560385	IdentifierDeclType	int		560289	0					
ANR	560386	Identifier	m		560289	1					
ANR	560387	AssignmentExpression	m = 0		560289	2		=			
ANR	560388	Identifier	m		560289	0					
ANR	560389	PrimaryExpression	0		560289	1					
ANR	560390	IdentifierDecl	mm		560289	3					
ANR	560391	IdentifierDeclType	int		560289	0					
ANR	560392	Identifier	mm		560289	1					
ANR	560393	ForStatement	for ( j = 0 ; j < ei ; j ++ )		560289	1					
ANR	560394	ForInit	j = 0 ;	1026:13:34796:34801	560289	0	True				
ANR	560395	AssignmentExpression	j = 0		560289	0		=			
ANR	560396	Identifier	j		560289	0					
ANR	560397	PrimaryExpression	0		560289	1					
ANR	560398	Condition	j < ei	1026:20:34803:34808	560289	1	True				
ANR	560399	RelationalExpression	j < ei		560289	0		<			
ANR	560400	Identifier	j		560289	0					
ANR	560401	Identifier	ei		560289	1					
ANR	560402	PostIncDecOperationExpression	j ++	1026:28:34811:34813	560289	2	True				
ANR	560403	Identifier	j		560289	0					
ANR	560404	IncDec	++		560289	1					
ANR	560405	CompoundStatement		14:33:541:541	560289	3					
ANR	560406	ExpressionStatement	"mm = tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"	1027:12:34830:34976	560289	0	True				
ANR	560407	AssignmentExpression	"mm = tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"		560289	0		=			
ANR	560408	Identifier	mm		560289	0					
ANR	560409	CallExpression	"tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"		560289	1					
ANR	560410	Callee	tensor_dimension_monotonity		560289	0					
ANR	560411	Identifier	tensor_dimension_monotonity		560289	0					
ANR	560412	ArgumentList	T0		560289	1					
ANR	560413	Argument	T0		560289	0					
ANR	560414	Identifier	T0		560289	0					
ANR	560415	Argument	T1		560289	1					
ANR	560416	Identifier	T1		560289	0					
ANR	560417	Argument	ii - 1		560289	2					
ANR	560418	AdditiveExpression	ii - 1		560289	0		-			
ANR	560419	Identifier	ii		560289	0					
ANR	560420	PrimaryExpression	1		560289	1					
ANR	560421	Argument	i0		560289	3					
ANR	560422	Identifier	i0		560289	0					
ANR	560423	Argument	pole		560289	4					
ANR	560424	Identifier	pole		560289	0					
ANR	560425	Argument	p_offset + j * pole_step		560289	5					
ANR	560426	AdditiveExpression	p_offset + j * pole_step		560289	0		+			
ANR	560427	Identifier	p_offset		560289	0					
ANR	560428	MultiplicativeExpression	j * pole_step		560289	1		*			
ANR	560429	Identifier	j		560289	0					
ANR	560430	Identifier	pole_step		560289	1					
ANR	560431	Argument	pole_step / 4		560289	6					
ANR	560432	MultiplicativeExpression	pole_step / 4		560289	0		/			
ANR	560433	Identifier	pole_step		560289	0					
ANR	560434	PrimaryExpression	4		560289	1					
ANR	560435	Argument	pole_step_i		560289	7					
ANR	560436	Identifier	pole_step_i		560289	0					
ANR	560437	Argument	order		560289	8					
ANR	560438	Identifier	order		560289	0					
ANR	560439	ExpressionStatement	m |= mm << ( j * 3 )	1029:12:34990:35008	560289	1	True				
ANR	560440	AssignmentExpression	m |= mm << ( j * 3 )		560289	0		|=			
ANR	560441	Identifier	m		560289	0					
ANR	560442	ShiftExpression	mm << ( j * 3 )		560289	1		<<			
ANR	560443	Identifier	mm		560289	0					
ANR	560444	MultiplicativeExpression	j * 3		560289	1		*			
ANR	560445	Identifier	j		560289	0					
ANR	560446	PrimaryExpression	3		560289	1					
ANR	560447	IfStatement	if ( mm == 3 )		560289	2					
ANR	560448	Condition	mm == 3	1030:16:35026:35032	560289	0	True				
ANR	560449	EqualityExpression	mm == 3		560289	0		==			
ANR	560450	Identifier	mm		560289	0					
ANR	560451	PrimaryExpression	3		560289	1					
ANR	560452	CompoundStatement		18:25:760:760	560289	1					
ANR	560453	BreakStatement	break ;	1033:16:35175:35180	560289	0	True				
ANR	560454	ReturnStatement	return m ;	1036:8:35214:35222	560289	2	True				
ANR	560455	Identifier	m		560289	0					
ANR	560456	ReturnType	static int		560289	1					
ANR	560457	Identifier	tensor_dimension_monotonity		560289	2					
ANR	560458	ParameterList	"const double * T0 , const double * T1 , int ii , int i0 , double * pole , int p_offset , int pole_step , int pole_step_i , int order"		560289	3					
ANR	560459	Parameter	const double * T0	1011:28:34135:34150	560289	0	True				
ANR	560460	ParameterType	const double *		560289	0					
ANR	560461	Identifier	T0		560289	1					
ANR	560462	Parameter	const double * T1	1011:46:34153:34168	560289	1	True				
ANR	560463	ParameterType	const double *		560289	0					
ANR	560464	Identifier	T1		560289	1					
ANR	560465	Parameter	int ii	1011:64:34171:34176	560289	2	True				
ANR	560466	ParameterType	int		560289	0					
ANR	560467	Identifier	ii		560289	1					
ANR	560468	Parameter	int i0	1011:72:34179:34184	560289	3	True				
ANR	560469	ParameterType	int		560289	0					
ANR	560470	Identifier	i0		560289	1					
ANR	560471	Parameter	double * pole	1011:80:34187:34198	560289	4	True				
ANR	560472	ParameterType	double *		560289	0					
ANR	560473	Identifier	pole		560289	1					
ANR	560474	Parameter	int p_offset	1012:16:34217:34228	560289	5	True				
ANR	560475	ParameterType	int		560289	0					
ANR	560476	Identifier	p_offset		560289	1					
ANR	560477	Parameter	int pole_step	1012:30:34231:34243	560289	6	True				
ANR	560478	ParameterType	int		560289	0					
ANR	560479	Identifier	pole_step		560289	1					
ANR	560480	Parameter	int pole_step_i	1012:45:34246:34260	560289	7	True				
ANR	560481	ParameterType	int		560289	0					
ANR	560482	Identifier	pole_step_i		560289	1					
ANR	560483	Parameter	int order	1012:62:34263:34271	560289	8	True				
ANR	560484	ParameterType	int		560289	0					
ANR	560485	Identifier	order		560289	1					
ANR	560486	CFGEntryNode	ENTRY		560289		True				
ANR	560487	CFGExitNode	EXIT		560289		True				
ANR	560488	Symbol	ii		560289						
ANR	560489	Symbol	* T1		560289						
ANR	560490	Symbol	mm		560289						
ANR	560491	Symbol	tensor_dimension_monotonity		560289						
ANR	560492	Symbol	* T0		560289						
ANR	560493	Symbol	ei		560289						
ANR	560494	Symbol	* ii		560289						
ANR	560495	Symbol	pole_step_i		560289						
ANR	560496	Symbol	i0		560289						
ANR	560497	Symbol	p_offset		560289						
ANR	560498	Symbol	j		560289						
ANR	560499	Symbol	pole		560289						
ANR	560500	Symbol	pole_step		560289						
ANR	560501	Symbol	m		560289						
ANR	560502	Symbol	curve_monotonity		560289						
ANR	560503	Symbol	line_monotonity		560289						
ANR	560504	Symbol	T0		560289						
ANR	560505	Symbol	T1		560289						
ANR	560506	Symbol	order		560289						
ANR	560507	Function	is_tensor_monotonic_by_dimension	1040:0:35233:36578							
ANR	560508	FunctionDef	"is_tensor_monotonic_by_dimension (const gs_function_Sd_t * pfn , int * I , double * T0 , double * T1 , int i0 , int k , uint * mask)"		560507	0					
ANR	560509	CompoundStatement		1045:0:35569:36578	560507	0					
ANR	560510	IdentifierDeclStatement	double pole [ 4 * 4 * 4 ] ;	1046:4:35575:35593	560507	0	True				
ANR	560511	IdentifierDecl	pole [ 4 * 4 * 4 ]		560507	0					
ANR	560512	IdentifierDeclType	double [ 4 * 4 * 4 ]		560507	0					
ANR	560513	Identifier	pole		560507	1					
ANR	560514	MultiplicativeExpression	4 * 4 * 4		560507	2		*			
ANR	560515	PrimaryExpression	4		560507	0					
ANR	560516	MultiplicativeExpression	4 * 4		560507	1		*			
ANR	560517	PrimaryExpression	4		560507	0					
ANR	560518	PrimaryExpression	4		560507	1					
ANR	560519	IdentifierDeclStatement	"int i , code , ii = pfn -> params . m - 1 ;"	1048:4:35740:35775	560507	1	True				
ANR	560520	IdentifierDecl	i		560507	0					
ANR	560521	IdentifierDeclType	int		560507	0					
ANR	560522	Identifier	i		560507	1					
ANR	560523	IdentifierDecl	code		560507	1					
ANR	560524	IdentifierDeclType	int		560507	0					
ANR	560525	Identifier	code		560507	1					
ANR	560526	IdentifierDecl	ii = pfn -> params . m - 1		560507	2					
ANR	560527	IdentifierDeclType	int		560507	0					
ANR	560528	Identifier	ii		560507	1					
ANR	560529	AssignmentExpression	ii = pfn -> params . m - 1		560507	2		=			
ANR	560530	Identifier	ii		560507	0					
ANR	560531	AdditiveExpression	pfn -> params . m - 1		560507	1		-			
ANR	560532	MemberAccess	pfn -> params . m		560507	0					
ANR	560533	PtrMemberAccess	pfn -> params		560507	0					
ANR	560534	Identifier	pfn		560507	0					
ANR	560535	Identifier	params		560507	1					
ANR	560536	Identifier	m		560507	1					
ANR	560537	PrimaryExpression	1		560507	1					
ANR	560538	IdentifierDeclStatement	"double TT0 [ 3 ] , TT1 [ 3 ] ;"	1049:4:35781:35802	560507	2	True				
ANR	560539	IdentifierDecl	TT0 [ 3 ]		560507	0					
ANR	560540	IdentifierDeclType	double [ 3 ]		560507	0					
ANR	560541	Identifier	TT0		560507	1					
ANR	560542	PrimaryExpression	3		560507	2					
ANR	560543	IdentifierDecl	TT1 [ 3 ]		560507	1					
ANR	560544	IdentifierDeclType	double [ 3 ]		560507	0					
ANR	560545	Identifier	TT1		560507	1					
ANR	560546	PrimaryExpression	3		560507	2					
ANR	560547	ExpressionStatement	* mask = 0	1051:4:35809:35818	560507	3	True				
ANR	560548	AssignmentExpression	* mask = 0		560507	0		=			
ANR	560549	UnaryOperationExpression	* mask		560507	0					
ANR	560550	UnaryOperator	*		560507	0					
ANR	560551	Identifier	mask		560507	1					
ANR	560552	PrimaryExpression	0		560507	1					
ANR	560553	IfStatement	if ( ii >= 3 )		560507	4					
ANR	560554	Condition	ii >= 3	1052:8:35828:35834	560507	0	True				
ANR	560555	RelationalExpression	ii >= 3		560507	0		>=			
ANR	560556	Identifier	ii		560507	0					
ANR	560557	PrimaryExpression	3		560507	1					
ANR	560558	CompoundStatement		8:17:267:267	560507	1					
ANR	560559	ExpressionStatement	return_error ( gs_error_limitcheck )	1055:8:35986:36019	560507	0	True				
ANR	560560	CallExpression	return_error ( gs_error_limitcheck )		560507	0					
ANR	560561	Callee	return_error		560507	0					
ANR	560562	Identifier	return_error		560507	0					
ANR	560563	ArgumentList	gs_error_limitcheck		560507	1					
ANR	560564	Argument	gs_error_limitcheck		560507	0					
ANR	560565	Identifier	gs_error_limitcheck		560507	0					
ANR	560566	ExpressionStatement	"code = copy_poles ( pfn , I , T0 , T1 , k , ii , pole , 0 , count_of ( pole ) / 4 )"	1057:4:36031:36100	560507	5	True				
ANR	560567	AssignmentExpression	"code = copy_poles ( pfn , I , T0 , T1 , k , ii , pole , 0 , count_of ( pole ) / 4 )"		560507	0		=			
ANR	560568	Identifier	code		560507	0					
ANR	560569	CallExpression	"copy_poles ( pfn , I , T0 , T1 , k , ii , pole , 0 , count_of ( pole ) / 4 )"		560507	1					
ANR	560570	Callee	copy_poles		560507	0					
ANR	560571	Identifier	copy_poles		560507	0					
ANR	560572	ArgumentList	pfn		560507	1					
ANR	560573	Argument	pfn		560507	0					
ANR	560574	Identifier	pfn		560507	0					
ANR	560575	Argument	I		560507	1					
ANR	560576	Identifier	I		560507	0					
ANR	560577	Argument	T0		560507	2					
ANR	560578	Identifier	T0		560507	0					
ANR	560579	Argument	T1		560507	3					
ANR	560580	Identifier	T1		560507	0					
ANR	560581	Argument	k		560507	4					
ANR	560582	Identifier	k		560507	0					
ANR	560583	Argument	ii		560507	5					
ANR	560584	Identifier	ii		560507	0					
ANR	560585	Argument	pole		560507	6					
ANR	560586	Identifier	pole		560507	0					
ANR	560587	Argument	0		560507	7					
ANR	560588	PrimaryExpression	0		560507	0					
ANR	560589	Argument	count_of ( pole ) / 4		560507	8					
ANR	560590	MultiplicativeExpression	count_of ( pole ) / 4		560507	0		/			
ANR	560591	CallExpression	count_of ( pole )		560507	0					
ANR	560592	Callee	count_of		560507	0					
ANR	560593	Identifier	count_of		560507	0					
ANR	560594	ArgumentList	pole		560507	1					
ANR	560595	Argument	pole		560507	0					
ANR	560596	Identifier	pole		560507	0					
ANR	560597	PrimaryExpression	4		560507	1					
ANR	560598	IfStatement	if ( code < 0 )		560507	6					
ANR	560599	Condition	code < 0	1058:8:36110:36117	560507	0	True				
ANR	560600	RelationalExpression	code < 0		560507	0		<			
ANR	560601	Identifier	code		560507	0					
ANR	560602	PrimaryExpression	0		560507	1					
ANR	560603	ReturnStatement	return code ;	1059:8:36128:36139	560507	1	True				
ANR	560604	Identifier	code		560507	0					
ANR	560605	ForStatement	for ( i = ii ; i >= 0 ; i -- )		560507	7					
ANR	560606	ForInit	i = ii ;	1060:9:36150:36156	560507	0	True				
ANR	560607	AssignmentExpression	i = ii		560507	0		=			
ANR	560608	Identifier	i		560507	0					
ANR	560609	Identifier	ii		560507	1					
ANR	560610	Condition	i >= 0	1060:17:36158:36163	560507	1	True				
ANR	560611	RelationalExpression	i >= 0		560507	0		>=			
ANR	560612	Identifier	i		560507	0					
ANR	560613	PrimaryExpression	0		560507	1					
ANR	560614	PostIncDecOperationExpression	i --	1060:25:36166:36168	560507	2	True				
ANR	560615	Identifier	i		560507	0					
ANR	560616	IncDec	--		560507	1					
ANR	560617	CompoundStatement		16:30:601:601	560507	3					
ANR	560618	ExpressionStatement	TT0 [ i ] = 0	1061:8:36181:36191	560507	0	True				
ANR	560619	AssignmentExpression	TT0 [ i ] = 0		560507	0		=			
ANR	560620	ArrayIndexing	TT0 [ i ]		560507	0					
ANR	560621	Identifier	TT0		560507	0					
ANR	560622	Identifier	i		560507	1					
ANR	560623	PrimaryExpression	0		560507	1					
ANR	560624	IfStatement	if ( T0 [ i ] != T1 [ i ] )		560507	1					
ANR	560625	Condition	T0 [ i ] != T1 [ i ]	1062:12:36205:36218	560507	0	True				
ANR	560626	EqualityExpression	T0 [ i ] != T1 [ i ]		560507	0		!=			
ANR	560627	ArrayIndexing	T0 [ i ]		560507	0					
ANR	560628	Identifier	T0		560507	0					
ANR	560629	Identifier	i		560507	1					
ANR	560630	ArrayIndexing	T1 [ i ]		560507	1					
ANR	560631	Identifier	T1		560507	0					
ANR	560632	Identifier	i		560507	1					
ANR	560633	CompoundStatement		18:28:651:651	560507	1					
ANR	560634	IfStatement	if ( T0 [ i ] != 0 || T1 [ i ] != 1 )		560507	0					
ANR	560635	Condition	T0 [ i ] != 0 || T1 [ i ] != 1	1063:16:36239:36262	560507	0	True				
ANR	560636	OrExpression	T0 [ i ] != 0 || T1 [ i ] != 1		560507	0		||			
ANR	560637	EqualityExpression	T0 [ i ] != 0		560507	0		!=			
ANR	560638	ArrayIndexing	T0 [ i ]		560507	0					
ANR	560639	Identifier	T0		560507	0					
ANR	560640	Identifier	i		560507	1					
ANR	560641	PrimaryExpression	0		560507	1					
ANR	560642	EqualityExpression	T1 [ i ] != 1		560507	1		!=			
ANR	560643	ArrayIndexing	T1 [ i ]		560507	0					
ANR	560644	Identifier	T1		560507	0					
ANR	560645	Identifier	i		560507	1					
ANR	560646	PrimaryExpression	1		560507	1					
ANR	560647	ExpressionStatement	"clamp_poles ( T0 , T1 , ii , i , pole , 0 , count_of ( pole ) / 4 , - 1 , pfn -> params . Order )"	1064:16:36281:36359	560507	1	True				
ANR	560648	CallExpression	"clamp_poles ( T0 , T1 , ii , i , pole , 0 , count_of ( pole ) / 4 , - 1 , pfn -> params . Order )"		560507	0					
ANR	560649	Callee	clamp_poles		560507	0					
ANR	560650	Identifier	clamp_poles		560507	0					
ANR	560651	ArgumentList	T0		560507	1					
ANR	560652	Argument	T0		560507	0					
ANR	560653	Identifier	T0		560507	0					
ANR	560654	Argument	T1		560507	1					
ANR	560655	Identifier	T1		560507	0					
ANR	560656	Argument	ii		560507	2					
ANR	560657	Identifier	ii		560507	0					
ANR	560658	Argument	i		560507	3					
ANR	560659	Identifier	i		560507	0					
ANR	560660	Argument	pole		560507	4					
ANR	560661	Identifier	pole		560507	0					
ANR	560662	Argument	0		560507	5					
ANR	560663	PrimaryExpression	0		560507	0					
ANR	560664	Argument	count_of ( pole ) / 4		560507	6					
ANR	560665	MultiplicativeExpression	count_of ( pole ) / 4		560507	0		/			
ANR	560666	CallExpression	count_of ( pole )		560507	0					
ANR	560667	Callee	count_of		560507	0					
ANR	560668	Identifier	count_of		560507	0					
ANR	560669	ArgumentList	pole		560507	1					
ANR	560670	Argument	pole		560507	0					
ANR	560671	Identifier	pole		560507	0					
ANR	560672	PrimaryExpression	4		560507	1					
ANR	560673	Argument	- 1		560507	7					
ANR	560674	UnaryOperationExpression	- 1		560507	0					
ANR	560675	UnaryOperator	-		560507	0					
ANR	560676	PrimaryExpression	1		560507	1					
ANR	560677	Argument	pfn -> params . Order		560507	8					
ANR	560678	MemberAccess	pfn -> params . Order		560507	0					
ANR	560679	PtrMemberAccess	pfn -> params		560507	0					
ANR	560680	Identifier	pfn		560507	0					
ANR	560681	Identifier	params		560507	1					
ANR	560682	Identifier	Order		560507	1					
ANR	560683	ExpressionStatement	TT1 [ i ] = 1	1065:12:36373:36383	560507	1	True				
ANR	560684	AssignmentExpression	TT1 [ i ] = 1		560507	0		=			
ANR	560685	ArrayIndexing	TT1 [ i ]		560507	0					
ANR	560686	Identifier	TT1		560507	0					
ANR	560687	Identifier	i		560507	1					
ANR	560688	PrimaryExpression	1		560507	1					
ANR	560689	ElseStatement	else		560507	0					
ANR	560690	ExpressionStatement	TT1 [ i ] = 0	1067:12:36412:36422	560507	0	True				
ANR	560691	AssignmentExpression	TT1 [ i ] = 0		560507	0		=			
ANR	560692	ArrayIndexing	TT1 [ i ]		560507	0					
ANR	560693	Identifier	TT1		560507	0					
ANR	560694	Identifier	i		560507	1					
ANR	560695	PrimaryExpression	0		560507	1					
ANR	560696	ExpressionStatement	"* mask = tensor_dimension_monotonity ( TT0 , TT1 , ii , i0 , pole , 0 , count_of ( pole ) / 4 , 1 , pfn -> params . Order )"	1069:4:36434:36562	560507	8	True				
ANR	560697	AssignmentExpression	"* mask = tensor_dimension_monotonity ( TT0 , TT1 , ii , i0 , pole , 0 , count_of ( pole ) / 4 , 1 , pfn -> params . Order )"		560507	0		=			
ANR	560698	UnaryOperationExpression	* mask		560507	0					
ANR	560699	UnaryOperator	*		560507	0					
ANR	560700	Identifier	mask		560507	1					
ANR	560701	CallExpression	"tensor_dimension_monotonity ( TT0 , TT1 , ii , i0 , pole , 0 , count_of ( pole ) / 4 , 1 , pfn -> params . Order )"		560507	1					
ANR	560702	Callee	tensor_dimension_monotonity		560507	0					
ANR	560703	Identifier	tensor_dimension_monotonity		560507	0					
ANR	560704	ArgumentList	TT0		560507	1					
ANR	560705	Argument	TT0		560507	0					
ANR	560706	Identifier	TT0		560507	0					
ANR	560707	Argument	TT1		560507	1					
ANR	560708	Identifier	TT1		560507	0					
ANR	560709	Argument	ii		560507	2					
ANR	560710	Identifier	ii		560507	0					
ANR	560711	Argument	i0		560507	3					
ANR	560712	Identifier	i0		560507	0					
ANR	560713	Argument	pole		560507	4					
ANR	560714	Identifier	pole		560507	0					
ANR	560715	Argument	0		560507	5					
ANR	560716	PrimaryExpression	0		560507	0					
ANR	560717	Argument	count_of ( pole ) / 4		560507	6					
ANR	560718	MultiplicativeExpression	count_of ( pole ) / 4		560507	0		/			
ANR	560719	CallExpression	count_of ( pole )		560507	0					
ANR	560720	Callee	count_of		560507	0					
ANR	560721	Identifier	count_of		560507	0					
ANR	560722	ArgumentList	pole		560507	1					
ANR	560723	Argument	pole		560507	0					
ANR	560724	Identifier	pole		560507	0					
ANR	560725	PrimaryExpression	4		560507	1					
ANR	560726	Argument	1		560507	7					
ANR	560727	PrimaryExpression	1		560507	0					
ANR	560728	Argument	pfn -> params . Order		560507	8					
ANR	560729	MemberAccess	pfn -> params . Order		560507	0					
ANR	560730	PtrMemberAccess	pfn -> params		560507	0					
ANR	560731	Identifier	pfn		560507	0					
ANR	560732	Identifier	params		560507	1					
ANR	560733	Identifier	Order		560507	1					
ANR	560734	ReturnStatement	return 0 ;	1071:4:36568:36576	560507	9	True				
ANR	560735	PrimaryExpression	0		560507	0					
ANR	560736	ReturnType	static inline int		560507	1					
ANR	560737	Identifier	is_tensor_monotonic_by_dimension		560507	2					
ANR	560738	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T0 , double * T1 , int i0 , int k , uint * mask"		560507	3					
ANR	560739	Parameter	const gs_function_Sd_t * pfn	1041:33:35284:35310	560507	0	True				
ANR	560740	ParameterType	const gs_function_Sd_t *		560507	0					
ANR	560741	Identifier	pfn		560507	1					
ANR	560742	Parameter	int * I	1041:62:35313:35318	560507	1	True				
ANR	560743	ParameterType	int *		560507	0					
ANR	560744	Identifier	I		560507	1					
ANR	560745	Parameter	double * T0	1041:70:35321:35330	560507	2	True				
ANR	560746	ParameterType	double *		560507	0					
ANR	560747	Identifier	T0		560507	1					
ANR	560748	Parameter	double * T1	1041:82:35333:35342	560507	3	True				
ANR	560749	ParameterType	double *		560507	0					
ANR	560750	Identifier	T1		560507	1					
ANR	560751	Parameter	int i0	1041:94:35345:35350	560507	4	True				
ANR	560752	ParameterType	int		560507	0					
ANR	560753	Identifier	i0		560507	1					
ANR	560754	Parameter	int k	1041:102:35353:35357	560507	5	True				
ANR	560755	ParameterType	int		560507	0					
ANR	560756	Identifier	k		560507	1					
ANR	560757	Parameter	uint * mask	1042:20:35380:35389	560507	6	True				
ANR	560758	ParameterType	uint *		560507	0					
ANR	560759	Identifier	mask		560507	1					
ANR	560760	CFGEntryNode	ENTRY		560507		True				
ANR	560761	CFGExitNode	EXIT		560507		True				
ANR	560762	Symbol	* T1		560507						
ANR	560763	Symbol	* T0		560507						
ANR	560764	Symbol	tensor_dimension_monotonity		560507						
ANR	560765	Symbol	pfn -> params . m		560507						
ANR	560766	Symbol	code		560507						
ANR	560767	Symbol	* mask		560507						
ANR	560768	Symbol	I		560507						
ANR	560769	Symbol	pole		560507						
ANR	560770	Symbol	pfn -> params . Order		560507						
ANR	560771	Symbol	copy_poles		560507						
ANR	560772	Symbol	count_of		560507						
ANR	560773	Symbol	gs_error_limitcheck		560507						
ANR	560774	Symbol	T0		560507						
ANR	560775	Symbol	T1		560507						
ANR	560776	Symbol	mask		560507						
ANR	560777	Symbol	ii		560507						
ANR	560778	Symbol	* pfn		560507						
ANR	560779	Symbol	* TT1		560507						
ANR	560780	Symbol	* TT0		560507						
ANR	560781	Symbol	i0		560507						
ANR	560782	Symbol	i		560507						
ANR	560783	Symbol	k		560507						
ANR	560784	Symbol	TT1		560507						
ANR	560785	Symbol	TT0		560507						
ANR	560786	Symbol	* i		560507						
ANR	560787	Symbol	pfn		560507						
ANR	560788	Symbol	pfn -> params		560507						
ANR	560789	Function	is_lattice_monotonic_by_dimension	1074:0:36581:38184							
ANR	560790	FunctionDef	"is_lattice_monotonic_by_dimension (const gs_function_Sd_t * pfn , const double * T0 , const double * T1 , int * I , double * S0 , double * S1 , int ii , int i0 , int k , uint * mask)"		560789	0					
ANR	560791	CompoundStatement		1079:0:36919:38184	560789	0					
ANR	560792	IfStatement	if ( ii == - 1 )		560789	0					
ANR	560793	Condition	ii == - 1	1080:8:36929:36936	560789	0	True				
ANR	560794	EqualityExpression	ii == - 1		560789	0		==			
ANR	560795	Identifier	ii		560789	0					
ANR	560796	UnaryOperationExpression	- 1		560789	1					
ANR	560797	UnaryOperator	-		560789	0					
ANR	560798	PrimaryExpression	1		560789	1					
ANR	560799	CompoundStatement		2:18:19:19	560789	1					
ANR	560800	ReturnStatement	"return is_tensor_monotonic_by_dimension ( pfn , I , S0 , S1 , i0 , k , mask ) ;"	1082:8:37033:37101	560789	0	True				
ANR	560801	CallExpression	"is_tensor_monotonic_by_dimension ( pfn , I , S0 , S1 , i0 , k , mask )"		560789	0					
ANR	560802	Callee	is_tensor_monotonic_by_dimension		560789	0					
ANR	560803	Identifier	is_tensor_monotonic_by_dimension		560789	0					
ANR	560804	ArgumentList	pfn		560789	1					
ANR	560805	Argument	pfn		560789	0					
ANR	560806	Identifier	pfn		560789	0					
ANR	560807	Argument	I		560789	1					
ANR	560808	Identifier	I		560789	0					
ANR	560809	Argument	S0		560789	2					
ANR	560810	Identifier	S0		560789	0					
ANR	560811	Argument	S1		560789	3					
ANR	560812	Identifier	S1		560789	0					
ANR	560813	Argument	i0		560789	4					
ANR	560814	Identifier	i0		560789	0					
ANR	560815	Argument	k		560789	5					
ANR	560816	Identifier	k		560789	0					
ANR	560817	Argument	mask		560789	6					
ANR	560818	Identifier	mask		560789	0					
ANR	560819	ElseStatement	else		560789	0					
ANR	560820	CompoundStatement		10:8:412:484	560789	0					
ANR	560821	IdentifierDeclStatement	int i1 = ( ii > i0 ? ii : ii == 0 ? i0 : ii - 1 ) ;	1084:8:37124:37171	560789	0	True				
ANR	560822	IdentifierDecl	i1 = ( ii > i0 ? ii : ii == 0 ? i0 : ii - 1 )		560789	0					
ANR	560823	IdentifierDeclType	int		560789	0					
ANR	560824	Identifier	i1		560789	1					
ANR	560825	AssignmentExpression	i1 = ( ii > i0 ? ii : ii == 0 ? i0 : ii - 1 )		560789	2		=			
ANR	560826	Identifier	i1		560789	0					
ANR	560827	ConditionalExpression	ii > i0 ? ii : ii == 0 ? i0 : ii - 1		560789	1					
ANR	560828	Condition	ii > i0		560789	0					
ANR	560829	RelationalExpression	ii > i0		560789	0		>			
ANR	560830	Identifier	ii		560789	0					
ANR	560831	Identifier	i0		560789	1					
ANR	560832	Identifier	ii		560789	1					
ANR	560833	ConditionalExpression	ii == 0 ? i0 : ii - 1		560789	2					
ANR	560834	Condition	ii == 0		560789	0					
ANR	560835	EqualityExpression	ii == 0		560789	0		==			
ANR	560836	Identifier	ii		560789	0					
ANR	560837	PrimaryExpression	0		560789	1					
ANR	560838	Identifier	i0		560789	1					
ANR	560839	AdditiveExpression	ii - 1		560789	2		-			
ANR	560840	Identifier	ii		560789	0					
ANR	560841	PrimaryExpression	1		560789	1					
ANR	560842	IdentifierDeclStatement	"int j , code ;"	1085:8:37237:37248	560789	1	True				
ANR	560843	IdentifierDecl	j		560789	0					
ANR	560844	IdentifierDeclType	int		560789	0					
ANR	560845	Identifier	j		560789	1					
ANR	560846	IdentifierDecl	code		560789	1					
ANR	560847	IdentifierDeclType	int		560789	0					
ANR	560848	Identifier	code		560789	1					
ANR	560849	IdentifierDeclStatement	int bi = ( int ) floor ( T0 [ i1 ] ) ;	1086:8:37258:37285	560789	2	True				
ANR	560850	IdentifierDecl	bi = ( int ) floor ( T0 [ i1 ] )		560789	0					
ANR	560851	IdentifierDeclType	int		560789	0					
ANR	560852	Identifier	bi		560789	1					
ANR	560853	AssignmentExpression	bi = ( int ) floor ( T0 [ i1 ] )		560789	2		=			
ANR	560854	Identifier	bi		560789	0					
ANR	560855	CastExpression	( int ) floor ( T0 [ i1 ] )		560789	1					
ANR	560856	CastTarget	int		560789	0					
ANR	560857	CallExpression	floor ( T0 [ i1 ] )		560789	1					
ANR	560858	Callee	floor		560789	0					
ANR	560859	Identifier	floor		560789	0					
ANR	560860	ArgumentList	T0 [ i1 ]		560789	1					
ANR	560861	Argument	T0 [ i1 ]		560789	0					
ANR	560862	ArrayIndexing	T0 [ i1 ]		560789	0					
ANR	560863	Identifier	T0		560789	0					
ANR	560864	Identifier	i1		560789	1					
ANR	560865	IdentifierDeclStatement	int ei = ( int ) floor ( T1 [ i1 ] ) ;	1087:8:37295:37322	560789	3	True				
ANR	560866	IdentifierDecl	ei = ( int ) floor ( T1 [ i1 ] )		560789	0					
ANR	560867	IdentifierDeclType	int		560789	0					
ANR	560868	Identifier	ei		560789	1					
ANR	560869	AssignmentExpression	ei = ( int ) floor ( T1 [ i1 ] )		560789	2		=			
ANR	560870	Identifier	ei		560789	0					
ANR	560871	CastExpression	( int ) floor ( T1 [ i1 ] )		560789	1					
ANR	560872	CastTarget	int		560789	0					
ANR	560873	CallExpression	floor ( T1 [ i1 ] )		560789	1					
ANR	560874	Callee	floor		560789	0					
ANR	560875	Identifier	floor		560789	0					
ANR	560876	ArgumentList	T1 [ i1 ]		560789	1					
ANR	560877	Argument	T1 [ i1 ]		560789	0					
ANR	560878	ArrayIndexing	T1 [ i1 ]		560789	0					
ANR	560879	Identifier	T1		560789	0					
ANR	560880	Identifier	i1		560789	1					
ANR	560881	IdentifierDeclStatement	"uint m , mm , m1 = 0x49249249 & ( ( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1 ) ;"	1088:8:37332:37404	560789	4	True				
ANR	560882	IdentifierDecl	m		560789	0					
ANR	560883	IdentifierDeclType	uint		560789	0					
ANR	560884	Identifier	m		560789	1					
ANR	560885	IdentifierDecl	mm		560789	1					
ANR	560886	IdentifierDeclType	uint		560789	0					
ANR	560887	Identifier	mm		560789	1					
ANR	560888	IdentifierDecl	m1 = 0x49249249 & ( ( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1 )		560789	2					
ANR	560889	IdentifierDeclType	uint		560789	0					
ANR	560890	Identifier	m1		560789	1					
ANR	560891	AssignmentExpression	m1 = 0x49249249 & ( ( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1 )		560789	2		=			
ANR	560892	Identifier	m1		560789	0					
ANR	560893	BitAndExpression	0x49249249 & ( ( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1 )		560789	1		&			
ANR	560894	PrimaryExpression	0x49249249		560789	0					
ANR	560895	AdditiveExpression	( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1		560789	1		-			
ANR	560896	ShiftExpression	1 << ( ( pfn -> params . Order + 1 ) * 3 )		560789	0		<<			
ANR	560897	PrimaryExpression	1		560789	0					
ANR	560898	MultiplicativeExpression	( pfn -> params . Order + 1 ) * 3		560789	1		*			
ANR	560899	AdditiveExpression	pfn -> params . Order + 1		560789	0		+			
ANR	560900	MemberAccess	pfn -> params . Order		560789	0					
ANR	560901	PtrMemberAccess	pfn -> params		560789	0					
ANR	560902	Identifier	pfn		560789	0					
ANR	560903	Identifier	params		560789	1					
ANR	560904	Identifier	Order		560789	1					
ANR	560905	PrimaryExpression	1		560789	1					
ANR	560906	PrimaryExpression	3		560789	1					
ANR	560907	PrimaryExpression	1		560789	1					
ANR	560908	IfStatement	if ( floor ( T1 [ i1 ] ) == T1 [ i1 ] )		560789	5					
ANR	560909	Condition	floor ( T1 [ i1 ] ) == T1 [ i1 ]	1090:12:37419:37441	560789	0	True				
ANR	560910	EqualityExpression	floor ( T1 [ i1 ] ) == T1 [ i1 ]		560789	0		==			
ANR	560911	CallExpression	floor ( T1 [ i1 ] )		560789	0					
ANR	560912	Callee	floor		560789	0					
ANR	560913	Identifier	floor		560789	0					
ANR	560914	ArgumentList	T1 [ i1 ]		560789	1					
ANR	560915	Argument	T1 [ i1 ]		560789	0					
ANR	560916	ArrayIndexing	T1 [ i1 ]		560789	0					
ANR	560917	Identifier	T1		560789	0					
ANR	560918	Identifier	i1		560789	1					
ANR	560919	ArrayIndexing	T1 [ i1 ]		560789	1					
ANR	560920	Identifier	T1		560789	0					
ANR	560921	Identifier	i1		560789	1					
ANR	560922	ExpressionStatement	ei --	1091:12:37456:37461	560789	1	True				
ANR	560923	PostIncDecOperationExpression	ei --		560789	0					
ANR	560924	Identifier	ei		560789	0					
ANR	560925	IncDec	--		560789	1					
ANR	560926	ExpressionStatement	m = 0	1092:8:37471:37476	560789	6	True				
ANR	560927	AssignmentExpression	m = 0		560789	0		=			
ANR	560928	Identifier	m		560789	0					
ANR	560929	PrimaryExpression	0		560789	1					
ANR	560930	ForStatement	for ( j = bi ; j <= ei ; j ++ )		560789	7					
ANR	560931	ForInit	j = bi ;	1093:13:37491:37497	560789	0	True				
ANR	560932	AssignmentExpression	j = bi		560789	0		=			
ANR	560933	Identifier	j		560789	0					
ANR	560934	Identifier	bi		560789	1					
ANR	560935	Condition	j <= ei	1093:21:37499:37505	560789	1	True				
ANR	560936	RelationalExpression	j <= ei		560789	0		<=			
ANR	560937	Identifier	j		560789	0					
ANR	560938	Identifier	ei		560789	1					
ANR	560939	PostIncDecOperationExpression	j ++	1093:30:37508:37510	560789	2	True				
ANR	560940	Identifier	j		560789	0					
ANR	560941	IncDec	++		560789	1					
ANR	560942	CompoundStatement		15:35:593:593	560789	3					
ANR	560943	ExpressionStatement	I [ i1 ] = j	1095:12:37635:37644	560789	0	True				
ANR	560944	AssignmentExpression	I [ i1 ] = j		560789	0		=			
ANR	560945	ArrayIndexing	I [ i1 ]		560789	0					
ANR	560946	Identifier	I		560789	0					
ANR	560947	Identifier	i1		560789	1					
ANR	560948	Identifier	j		560789	1					
ANR	560949	ExpressionStatement	"S0 [ i1 ] = max ( T0 [ i1 ] - j , 0 )"	1096:12:37658:37685	560789	1	True				
ANR	560950	AssignmentExpression	"S0 [ i1 ] = max ( T0 [ i1 ] - j , 0 )"		560789	0		=			
ANR	560951	ArrayIndexing	S0 [ i1 ]		560789	0					
ANR	560952	Identifier	S0		560789	0					
ANR	560953	Identifier	i1		560789	1					
ANR	560954	CallExpression	"max ( T0 [ i1 ] - j , 0 )"		560789	1					
ANR	560955	Callee	max		560789	0					
ANR	560956	Identifier	max		560789	0					
ANR	560957	ArgumentList	T0 [ i1 ] - j		560789	1					
ANR	560958	Argument	T0 [ i1 ] - j		560789	0					
ANR	560959	AdditiveExpression	T0 [ i1 ] - j		560789	0		-			
ANR	560960	ArrayIndexing	T0 [ i1 ]		560789	0					
ANR	560961	Identifier	T0		560789	0					
ANR	560962	Identifier	i1		560789	1					
ANR	560963	Identifier	j		560789	1					
ANR	560964	Argument	0		560789	1					
ANR	560965	PrimaryExpression	0		560789	0					
ANR	560966	ExpressionStatement	"S1 [ i1 ] = min ( T1 [ i1 ] - j , 1 )"	1097:12:37699:37726	560789	2	True				
ANR	560967	AssignmentExpression	"S1 [ i1 ] = min ( T1 [ i1 ] - j , 1 )"		560789	0		=			
ANR	560968	ArrayIndexing	S1 [ i1 ]		560789	0					
ANR	560969	Identifier	S1		560789	0					
ANR	560970	Identifier	i1		560789	1					
ANR	560971	CallExpression	"min ( T1 [ i1 ] - j , 1 )"		560789	1					
ANR	560972	Callee	min		560789	0					
ANR	560973	Identifier	min		560789	0					
ANR	560974	ArgumentList	T1 [ i1 ] - j		560789	1					
ANR	560975	Argument	T1 [ i1 ] - j		560789	0					
ANR	560976	AdditiveExpression	T1 [ i1 ] - j		560789	0		-			
ANR	560977	ArrayIndexing	T1 [ i1 ]		560789	0					
ANR	560978	Identifier	T1		560789	0					
ANR	560979	Identifier	i1		560789	1					
ANR	560980	Identifier	j		560789	1					
ANR	560981	Argument	1		560789	1					
ANR	560982	PrimaryExpression	1		560789	0					
ANR	560983	ExpressionStatement	"code = is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , ii - 1 , i0 , k , & mm )"	1098:12:37740:37824	560789	3	True				
ANR	560984	AssignmentExpression	"code = is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , ii - 1 , i0 , k , & mm )"		560789	0		=			
ANR	560985	Identifier	code		560789	0					
ANR	560986	CallExpression	"is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , ii - 1 , i0 , k , & mm )"		560789	1					
ANR	560987	Callee	is_lattice_monotonic_by_dimension		560789	0					
ANR	560988	Identifier	is_lattice_monotonic_by_dimension		560789	0					
ANR	560989	ArgumentList	pfn		560789	1					
ANR	560990	Argument	pfn		560789	0					
ANR	560991	Identifier	pfn		560789	0					
ANR	560992	Argument	T0		560789	1					
ANR	560993	Identifier	T0		560789	0					
ANR	560994	Argument	T1		560789	2					
ANR	560995	Identifier	T1		560789	0					
ANR	560996	Argument	I		560789	3					
ANR	560997	Identifier	I		560789	0					
ANR	560998	Argument	S0		560789	4					
ANR	560999	Identifier	S0		560789	0					
ANR	561000	Argument	S1		560789	5					
ANR	561001	Identifier	S1		560789	0					
ANR	561002	Argument	ii - 1		560789	6					
ANR	561003	AdditiveExpression	ii - 1		560789	0		-			
ANR	561004	Identifier	ii		560789	0					
ANR	561005	PrimaryExpression	1		560789	1					
ANR	561006	Argument	i0		560789	7					
ANR	561007	Identifier	i0		560789	0					
ANR	561008	Argument	k		560789	8					
ANR	561009	Identifier	k		560789	0					
ANR	561010	Argument	& mm		560789	9					
ANR	561011	UnaryOperationExpression	& mm		560789	0					
ANR	561012	UnaryOperator	&		560789	0					
ANR	561013	Identifier	mm		560789	1					
ANR	561014	IfStatement	if ( code < 0 )		560789	4					
ANR	561015	Condition	code < 0	1099:16:37842:37849	560789	0	True				
ANR	561016	RelationalExpression	code < 0		560789	0		<			
ANR	561017	Identifier	code		560789	0					
ANR	561018	PrimaryExpression	0		560789	1					
ANR	561019	ReturnStatement	return code ;	1100:16:37868:37879	560789	1	True				
ANR	561020	Identifier	code		560789	0					
ANR	561021	ExpressionStatement	m |= mm	1101:12:37893:37900	560789	5	True				
ANR	561022	AssignmentExpression	m |= mm		560789	0		|=			
ANR	561023	Identifier	m		560789	0					
ANR	561024	Identifier	mm		560789	1					
ANR	561025	IfStatement	if ( m == m1 )		560789	6					
ANR	561026	Condition	m == m1	1102:16:37918:37924	560789	0	True				
ANR	561027	EqualityExpression	m == m1		560789	0		==			
ANR	561028	Identifier	m		560789	0					
ANR	561029	Identifier	m1		560789	1					
ANR	561030	BreakStatement	break ;	1103:16:38014:38019	560789	1	True				
ANR	561031	IfStatement	if ( ii == 0 )		560789	8					
ANR	561032	Condition	ii == 0	1105:12:38043:38049	560789	0	True				
ANR	561033	EqualityExpression	ii == 0		560789	0		==			
ANR	561034	Identifier	ii		560789	0					
ANR	561035	PrimaryExpression	0		560789	1					
ANR	561036	CompoundStatement		27:21:1132:1132	560789	1					
ANR	561037	ExpressionStatement	m = m & ( m >> 1 )	1107:12:38113:38129	560789	0	True				
ANR	561038	AssignmentExpression	m = m & ( m >> 1 )		560789	0		=			
ANR	561039	Identifier	m		560789	0					
ANR	561040	BitAndExpression	m & ( m >> 1 )		560789	1		&			
ANR	561041	Identifier	m		560789	0					
ANR	561042	ShiftExpression	m >> 1		560789	1		>>			
ANR	561043	Identifier	m		560789	0					
ANR	561044	PrimaryExpression	1		560789	1					
ANR	561045	ExpressionStatement	* mask = m	1109:8:38149:38158	560789	9	True				
ANR	561046	AssignmentExpression	* mask = m		560789	0		=			
ANR	561047	UnaryOperationExpression	* mask		560789	0					
ANR	561048	UnaryOperator	*		560789	0					
ANR	561049	Identifier	mask		560789	1					
ANR	561050	Identifier	m		560789	1					
ANR	561051	ReturnStatement	return 0 ;	1110:8:38168:38176	560789	10	True				
ANR	561052	PrimaryExpression	0		560789	0					
ANR	561053	ReturnType	static int		560789	1					
ANR	561054	Identifier	is_lattice_monotonic_by_dimension		560789	2					
ANR	561055	ParameterList	"const gs_function_Sd_t * pfn , const double * T0 , const double * T1 , int * I , double * S0 , double * S1 , int ii , int i0 , int k , uint * mask"		560789	3					
ANR	561056	Parameter	const gs_function_Sd_t * pfn	1075:34:36643:36669	560789	0	True				
ANR	561057	ParameterType	const gs_function_Sd_t *		560789	0					
ANR	561058	Identifier	pfn		560789	1					
ANR	561059	Parameter	const double * T0	1075:63:36672:36687	560789	1	True				
ANR	561060	ParameterType	const double *		560789	0					
ANR	561061	Identifier	T0		560789	1					
ANR	561062	Parameter	const double * T1	1075:81:36690:36705	560789	2	True				
ANR	561063	ParameterType	const double *		560789	0					
ANR	561064	Identifier	T1		560789	1					
ANR	561065	Parameter	int * I	1076:8:36716:36721	560789	3	True				
ANR	561066	ParameterType	int *		560789	0					
ANR	561067	Identifier	I		560789	1					
ANR	561068	Parameter	double * S0	1076:16:36724:36733	560789	4	True				
ANR	561069	ParameterType	double *		560789	0					
ANR	561070	Identifier	S0		560789	1					
ANR	561071	Parameter	double * S1	1076:28:36736:36745	560789	5	True				
ANR	561072	ParameterType	double *		560789	0					
ANR	561073	Identifier	S1		560789	1					
ANR	561074	Parameter	int ii	1076:40:36748:36753	560789	6	True				
ANR	561075	ParameterType	int		560789	0					
ANR	561076	Identifier	ii		560789	1					
ANR	561077	Parameter	int i0	1076:48:36756:36761	560789	7	True				
ANR	561078	ParameterType	int		560789	0					
ANR	561079	Identifier	i0		560789	1					
ANR	561080	Parameter	int k	1076:56:36764:36768	560789	8	True				
ANR	561081	ParameterType	int		560789	0					
ANR	561082	Identifier	k		560789	1					
ANR	561083	Parameter	uint * mask	1077:8:36779:36788	560789	9	True				
ANR	561084	ParameterType	uint *		560789	0					
ANR	561085	Identifier	mask		560789	1					
ANR	561086	CFGEntryNode	ENTRY		560789		True				
ANR	561087	CFGExitNode	EXIT		560789		True				
ANR	561088	Symbol	* T1		560789						
ANR	561089	Symbol	* T0		560789						
ANR	561090	Symbol	code		560789						
ANR	561091	Symbol	* mask		560789						
ANR	561092	Symbol	bi		560789						
ANR	561093	Symbol	I		560789						
ANR	561094	Symbol	& mm		560789						
ANR	561095	Symbol	* i1		560789						
ANR	561096	Symbol	pfn -> params . Order		560789						
ANR	561097	Symbol	* I		560789						
ANR	561098	Symbol	min		560789						
ANR	561099	Symbol	is_lattice_monotonic_by_dimension		560789						
ANR	561100	Symbol	T0		560789						
ANR	561101	Symbol	floor		560789						
ANR	561102	Symbol	T1		560789						
ANR	561103	Symbol	mask		560789						
ANR	561104	Symbol	ii		560789						
ANR	561105	Symbol	mm		560789						
ANR	561106	Symbol	* S0		560789						
ANR	561107	Symbol	* pfn		560789						
ANR	561108	Symbol	ei		560789						
ANR	561109	Symbol	m1		560789						
ANR	561110	Symbol	max		560789						
ANR	561111	Symbol	i0		560789						
ANR	561112	Symbol	* S1		560789						
ANR	561113	Symbol	i1		560789						
ANR	561114	Symbol	j		560789						
ANR	561115	Symbol	k		560789						
ANR	561116	Symbol	m		560789						
ANR	561117	Symbol	is_tensor_monotonic_by_dimension		560789						
ANR	561118	Symbol	pfn		560789						
ANR	561119	Symbol	S0		560789						
ANR	561120	Symbol	pfn -> params		560789						
ANR	561121	Symbol	S1		560789						
ANR	561122	Function	is_lattice_monotonic	1114:0:38187:38844							
ANR	561123	FunctionDef	"is_lattice_monotonic (const gs_function_Sd_t * pfn , const double * T0 , const double * T1 , int * I , double * S0 , double * S1 , int k , uint * mask)"		561122	0					
ANR	561124	CompoundStatement		1119:0:38475:38844	561122	0					
ANR	561125	IdentifierDeclStatement	"uint m , mm = 0 ;"	1120:4:38481:38495	561122	0	True				
ANR	561126	IdentifierDecl	m		561122	0					
ANR	561127	IdentifierDeclType	uint		561122	0					
ANR	561128	Identifier	m		561122	1					
ANR	561129	IdentifierDecl	mm = 0		561122	1					
ANR	561130	IdentifierDeclType	uint		561122	0					
ANR	561131	Identifier	mm		561122	1					
ANR	561132	AssignmentExpression	mm = 0		561122	2		=			
ANR	561133	Identifier	mm		561122	0					
ANR	561134	PrimaryExpression	0		561122	1					
ANR	561135	IdentifierDeclStatement	"int i , code ;"	1121:4:38501:38512	561122	1	True				
ANR	561136	IdentifierDecl	i		561122	0					
ANR	561137	IdentifierDeclType	int		561122	0					
ANR	561138	Identifier	i		561122	1					
ANR	561139	IdentifierDecl	code		561122	1					
ANR	561140	IdentifierDeclType	int		561122	0					
ANR	561141	Identifier	code		561122	1					
ANR	561142	ForStatement	for ( i = 0 ; i < pfn -> params . m ; i ++ )		561122	2					
ANR	561143	ForInit	i = 0 ;	1123:9:38524:38529	561122	0	True				
ANR	561144	AssignmentExpression	i = 0		561122	0		=			
ANR	561145	Identifier	i		561122	0					
ANR	561146	PrimaryExpression	0		561122	1					
ANR	561147	Condition	i < pfn -> params . m	1123:16:38531:38547	561122	1	True				
ANR	561148	RelationalExpression	i < pfn -> params . m		561122	0		<			
ANR	561149	Identifier	i		561122	0					
ANR	561150	MemberAccess	pfn -> params . m		561122	1					
ANR	561151	PtrMemberAccess	pfn -> params		561122	0					
ANR	561152	Identifier	pfn		561122	0					
ANR	561153	Identifier	params		561122	1					
ANR	561154	Identifier	m		561122	1					
ANR	561155	PostIncDecOperationExpression	i ++	1123:35:38550:38552	561122	2	True				
ANR	561156	Identifier	i		561122	0					
ANR	561157	IncDec	++		561122	1					
ANR	561158	CompoundStatement		5:40:79:79	561122	3					
ANR	561159	IfStatement	if ( T0 [ i ] != T1 [ i ] )		561122	0					
ANR	561160	Condition	T0 [ i ] != T1 [ i ]	1124:12:38569:38582	561122	0	True				
ANR	561161	EqualityExpression	T0 [ i ] != T1 [ i ]		561122	0		!=			
ANR	561162	ArrayIndexing	T0 [ i ]		561122	0					
ANR	561163	Identifier	T0		561122	0					
ANR	561164	Identifier	i		561122	1					
ANR	561165	ArrayIndexing	T1 [ i ]		561122	1					
ANR	561166	Identifier	T1		561122	0					
ANR	561167	Identifier	i		561122	1					
ANR	561168	CompoundStatement		6:28:109:109	561122	1					
ANR	561169	ExpressionStatement	"code = is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , pfn -> params . m - 1 , i , k , & m )"	1125:12:38599:38692	561122	0	True				
ANR	561170	AssignmentExpression	"code = is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , pfn -> params . m - 1 , i , k , & m )"		561122	0		=			
ANR	561171	Identifier	code		561122	0					
ANR	561172	CallExpression	"is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , pfn -> params . m - 1 , i , k , & m )"		561122	1					
ANR	561173	Callee	is_lattice_monotonic_by_dimension		561122	0					
ANR	561174	Identifier	is_lattice_monotonic_by_dimension		561122	0					
ANR	561175	ArgumentList	pfn		561122	1					
ANR	561176	Argument	pfn		561122	0					
ANR	561177	Identifier	pfn		561122	0					
ANR	561178	Argument	T0		561122	1					
ANR	561179	Identifier	T0		561122	0					
ANR	561180	Argument	T1		561122	2					
ANR	561181	Identifier	T1		561122	0					
ANR	561182	Argument	I		561122	3					
ANR	561183	Identifier	I		561122	0					
ANR	561184	Argument	S0		561122	4					
ANR	561185	Identifier	S0		561122	0					
ANR	561186	Argument	S1		561122	5					
ANR	561187	Identifier	S1		561122	0					
ANR	561188	Argument	pfn -> params . m - 1		561122	6					
ANR	561189	AdditiveExpression	pfn -> params . m - 1		561122	0		-			
ANR	561190	MemberAccess	pfn -> params . m		561122	0					
ANR	561191	PtrMemberAccess	pfn -> params		561122	0					
ANR	561192	Identifier	pfn		561122	0					
ANR	561193	Identifier	params		561122	1					
ANR	561194	Identifier	m		561122	1					
ANR	561195	PrimaryExpression	1		561122	1					
ANR	561196	Argument	i		561122	7					
ANR	561197	Identifier	i		561122	0					
ANR	561198	Argument	k		561122	8					
ANR	561199	Identifier	k		561122	0					
ANR	561200	Argument	& m		561122	9					
ANR	561201	UnaryOperationExpression	& m		561122	0					
ANR	561202	UnaryOperator	&		561122	0					
ANR	561203	Identifier	m		561122	1					
ANR	561204	IfStatement	if ( code < 0 )		561122	1					
ANR	561205	Condition	code < 0	1126:16:38710:38717	561122	0	True				
ANR	561206	RelationalExpression	code < 0		561122	0		<			
ANR	561207	Identifier	code		561122	0					
ANR	561208	PrimaryExpression	0		561122	1					
ANR	561209	ReturnStatement	return code ;	1127:16:38736:38747	561122	1	True				
ANR	561210	Identifier	code		561122	0					
ANR	561211	IfStatement	if ( m )		561122	2					
ANR	561212	Condition	m	1128:16:38765:38765	561122	0	True				
ANR	561213	Identifier	m		561122	0					
ANR	561214	ExpressionStatement	mm |= 1 << i	1129:16:38784:38796	561122	1	True				
ANR	561215	AssignmentExpression	mm |= 1 << i		561122	0		|=			
ANR	561216	Identifier	mm		561122	0					
ANR	561217	ShiftExpression	1 << i		561122	1		<<			
ANR	561218	PrimaryExpression	1		561122	0					
ANR	561219	Identifier	i		561122	1					
ANR	561220	ExpressionStatement	* mask = mm	1132:4:38818:38828	561122	3	True				
ANR	561221	AssignmentExpression	* mask = mm		561122	0		=			
ANR	561222	UnaryOperationExpression	* mask		561122	0					
ANR	561223	UnaryOperator	*		561122	0					
ANR	561224	Identifier	mask		561122	1					
ANR	561225	Identifier	mm		561122	1					
ANR	561226	ReturnStatement	return 0 ;	1133:4:38834:38842	561122	4	True				
ANR	561227	PrimaryExpression	0		561122	0					
ANR	561228	ReturnType	static inline int		561122	1					
ANR	561229	Identifier	is_lattice_monotonic		561122	2					
ANR	561230	ParameterList	"const gs_function_Sd_t * pfn , const double * T0 , const double * T1 , int * I , double * S0 , double * S1 , int k , uint * mask"		561122	3					
ANR	561231	Parameter	const gs_function_Sd_t * pfn	1115:21:38243:38269	561122	0	True				
ANR	561232	ParameterType	const gs_function_Sd_t *		561122	0					
ANR	561233	Identifier	pfn		561122	1					
ANR	561234	Parameter	const double * T0	1115:50:38272:38287	561122	1	True				
ANR	561235	ParameterType	const double *		561122	0					
ANR	561236	Identifier	T0		561122	1					
ANR	561237	Parameter	const double * T1	1115:68:38290:38305	561122	2	True				
ANR	561238	ParameterType	const double *		561122	0					
ANR	561239	Identifier	T1		561122	1					
ANR	561240	Parameter	int * I	1116:9:38317:38322	561122	3	True				
ANR	561241	ParameterType	int *		561122	0					
ANR	561242	Identifier	I		561122	1					
ANR	561243	Parameter	double * S0	1116:17:38325:38334	561122	4	True				
ANR	561244	ParameterType	double *		561122	0					
ANR	561245	Identifier	S0		561122	1					
ANR	561246	Parameter	double * S1	1116:29:38337:38346	561122	5	True				
ANR	561247	ParameterType	double *		561122	0					
ANR	561248	Identifier	S1		561122	1					
ANR	561249	Parameter	int k	1117:9:38358:38362	561122	6	True				
ANR	561250	ParameterType	int		561122	0					
ANR	561251	Identifier	k		561122	1					
ANR	561252	Parameter	uint * mask	1117:16:38365:38374	561122	7	True				
ANR	561253	ParameterType	uint *		561122	0					
ANR	561254	Identifier	mask		561122	1					
ANR	561255	CFGEntryNode	ENTRY		561122		True				
ANR	561256	CFGExitNode	EXIT		561122		True				
ANR	561257	Symbol	mm		561122						
ANR	561258	Symbol	* T1		561122						
ANR	561259	Symbol	* T0		561122						
ANR	561260	Symbol	pfn -> params . m		561122						
ANR	561261	Symbol	* pfn		561122						
ANR	561262	Symbol	code		561122						
ANR	561263	Symbol	* mask		561122						
ANR	561264	Symbol	I		561122						
ANR	561265	Symbol	i		561122						
ANR	561266	Symbol	k		561122						
ANR	561267	Symbol	m		561122						
ANR	561268	Symbol	* i		561122						
ANR	561269	Symbol	& m		561122						
ANR	561270	Symbol	is_lattice_monotonic_by_dimension		561122						
ANR	561271	Symbol	pfn		561122						
ANR	561272	Symbol	T0		561122						
ANR	561273	Symbol	T1		561122						
ANR	561274	Symbol	S0		561122						
ANR	561275	Symbol	pfn -> params		561122						
ANR	561276	Symbol	S1		561122						
ANR	561277	Symbol	mask		561122						
ANR	561278	DeclStmt									
ANR	561279	Decl							int	int	code
ANR	561280	Decl							int	int	i
ANR	561281	DeclStmt									
ANR	561282	Decl							double	double [ MAX_FAST_COMPS ]	VV
ANR	561283	DeclStmt									
ANR	561284	Decl							int	int	ii
ANR	561285	Decl							int	int	code
ANR	561286	Decl							int	int	cod1
ANR	561287	DeclStmt									
ANR	561288	Decl							int	int	i0
ANR	561289	DeclStmt									
ANR	561290	Decl							int	int	i1
ANR	561291	Decl							int	int	code
ANR	561292	DeclStmt									
ANR	561293	Decl							double	double [ MAX_FAST_COMPS ]	V0
ANR	561294	Decl							double	double [ MAX_FAST_COMPS ]	V1
ANR	561295	DeclStmt									
ANR	561296	Decl							int	int	i
ANR	561297	Decl							int	int	code
ANR	561298	Decl							int	int	ii
ANR	561299	DeclStmt									
ANR	561300	Decl							int	int [ 4 ]	I
ANR	561301	DeclStmt									
ANR	561302	Decl							double	double [ count_of ( I ) ]	T0
ANR	561303	Decl							double	double [ count_of ( I ) ]	T1
ANR	561304	DeclStmt									
ANR	561305	Decl							double	double [ count_of ( I ) ]	S0
ANR	561306	Decl							double	double [ count_of ( I ) ]	S1
ANR	561307	DeclStmt									
ANR	561308	Decl							uint	uint	m
ANR	561309	Decl							uint	uint	mm
ANR	561310	Decl							uint	uint	m1
ANR	561311	DeclStmt									
ANR	561312	Decl							DEBUG_Sd_1arg int	DEBUG_Sd_1arg int	code1
ANR	561313	Decl							DEBUG_Sd_1arg int	DEBUG_Sd_1arg int	mask1
ANR	561314	DeclStmt									
ANR	561315	Decl							float	float	w0
ANR	561316	Decl							float	float	w1
ANR	561317	DeclStmt									
ANR	561318	Decl							endif	endif *	mask
ANR	561319	Function	fn_Sd_is_monotonic	1264:0:42960:43244							
ANR	561320	FunctionDef	"fn_Sd_is_monotonic (const gs_function_t * pfn_common , const float * lower , const float * upper , uint * mask)"		561319	0					
ANR	561321	CompoundStatement		1267:0:43095:43244	561319	0					
ANR	561322	Statement	const	1268:4:43101:43105	561319	0	True				
ANR	561323	Statement	gs_function_Sd_t	1268:10:43107:43122	561319	1	True				
ANR	561324	Statement	*	1268:27:43124:43124	561319	2	True				
ANR	561325	Statement	const	1268:28:43125:43129	561319	3	True				
ANR	561326	ExpressionStatement	pfn = ( const gs_function_Sd_t * ) pfn_common	1268:34:43131:43181	561319	4	True				
ANR	561327	AssignmentExpression	pfn = ( const gs_function_Sd_t * ) pfn_common		561319	0		=			
ANR	561328	Identifier	pfn		561319	0					
ANR	561329	CastExpression	( const gs_function_Sd_t * ) pfn_common		561319	1					
ANR	561330	CastTarget	const gs_function_Sd_t *		561319	0					
ANR	561331	Identifier	pfn_common		561319	1					
ANR	561332	ReturnStatement	"return fn_Sd_is_monotonic_aux ( pfn , lower , upper , mask ) ;"	1271:4:43188:43242	561319	5	True				
ANR	561333	CallExpression	"fn_Sd_is_monotonic_aux ( pfn , lower , upper , mask )"		561319	0					
ANR	561334	Callee	fn_Sd_is_monotonic_aux		561319	0					
ANR	561335	Identifier	fn_Sd_is_monotonic_aux		561319	0					
ANR	561336	ArgumentList	pfn		561319	1					
ANR	561337	Argument	pfn		561319	0					
ANR	561338	Identifier	pfn		561319	0					
ANR	561339	Argument	lower		561319	1					
ANR	561340	Identifier	lower		561319	0					
ANR	561341	Argument	upper		561319	2					
ANR	561342	Identifier	upper		561319	0					
ANR	561343	Argument	mask		561319	3					
ANR	561344	Identifier	mask		561319	0					
ANR	561345	ReturnType	static int		561319	1					
ANR	561346	Identifier	fn_Sd_is_monotonic		561319	2					
ANR	561347	ParameterList	"const gs_function_t * pfn_common , const float * lower , const float * upper , uint * mask"		561319	3					
ANR	561348	Parameter	const gs_function_t * pfn_common	1265:19:42990:43021	561319	0	True				
ANR	561349	ParameterType	const gs_function_t *		561319	0					
ANR	561350	Identifier	pfn_common		561319	1					
ANR	561351	Parameter	const float * lower	1266:19:43043:43060	561319	1	True				
ANR	561352	ParameterType	const float *		561319	0					
ANR	561353	Identifier	lower		561319	1					
ANR	561354	Parameter	const float * upper	1266:39:43063:43080	561319	2	True				
ANR	561355	ParameterType	const float *		561319	0					
ANR	561356	Identifier	upper		561319	1					
ANR	561357	Parameter	uint * mask	1266:59:43083:43092	561319	3	True				
ANR	561358	ParameterType	uint *		561319	0					
ANR	561359	Identifier	mask		561319	1					
ANR	561360	CFGEntryNode	ENTRY		561319		True				
ANR	561361	CFGExitNode	EXIT		561319		True				
ANR	561362	Symbol	fn_Sd_is_monotonic_aux		561319						
ANR	561363	Symbol	pfn_common		561319						
ANR	561364	Symbol	lower		561319						
ANR	561365	Symbol	upper		561319						
ANR	561366	Symbol	pfn		561319						
ANR	561367	Symbol	mask		561319						
ANR	561368	Function	fn_Sd_get_info	1275:0:43290:43765							
ANR	561369	FunctionDef	"fn_Sd_get_info (const gs_function_t * pfn_common , gs_function_info_t * pfi)"		561368	0					
ANR	561370	CompoundStatement		1277:0:43375:43765	561368	0					
ANR	561371	Statement	const	1278:4:43381:43385	561368	0	True				
ANR	561372	Statement	gs_function_Sd_t	1278:10:43387:43402	561368	1	True				
ANR	561373	Statement	*	1278:27:43404:43404	561368	2	True				
ANR	561374	Statement	const	1278:28:43405:43409	561368	3	True				
ANR	561375	ExpressionStatement	pfn = ( const gs_function_Sd_t * ) pfn_common	1278:34:43411:43461	561368	4	True				
ANR	561376	AssignmentExpression	pfn = ( const gs_function_Sd_t * ) pfn_common		561368	0		=			
ANR	561377	Identifier	pfn		561368	0					
ANR	561378	CastExpression	( const gs_function_Sd_t * ) pfn_common		561368	1					
ANR	561379	CastTarget	const gs_function_Sd_t *		561368	0					
ANR	561380	Identifier	pfn_common		561368	1					
ANR	561381	IdentifierDeclStatement	long size ;	1280:4:43467:43476	561368	5	True				
ANR	561382	IdentifierDecl	size		561368	0					
ANR	561383	IdentifierDeclType	long		561368	0					
ANR	561384	Identifier	size		561368	1					
ANR	561385	IdentifierDeclStatement	int i ;	1281:4:43482:43487	561368	6	True				
ANR	561386	IdentifierDecl	i		561368	0					
ANR	561387	IdentifierDeclType	int		561368	0					
ANR	561388	Identifier	i		561368	1					
ANR	561389	ExpressionStatement	"gs_function_get_info_default ( pfn_common , pfi )"	1283:4:43494:43539	561368	7	True				
ANR	561390	CallExpression	"gs_function_get_info_default ( pfn_common , pfi )"		561368	0					
ANR	561391	Callee	gs_function_get_info_default		561368	0					
ANR	561392	Identifier	gs_function_get_info_default		561368	0					
ANR	561393	ArgumentList	pfn_common		561368	1					
ANR	561394	Argument	pfn_common		561368	0					
ANR	561395	Identifier	pfn_common		561368	0					
ANR	561396	Argument	pfi		561368	1					
ANR	561397	Identifier	pfi		561368	0					
ANR	561398	ExpressionStatement	pfi -> DataSource = & pfn -> params . DataSource	1284:4:43545:43586	561368	8	True				
ANR	561399	AssignmentExpression	pfi -> DataSource = & pfn -> params . DataSource		561368	0		=			
ANR	561400	PtrMemberAccess	pfi -> DataSource		561368	0					
ANR	561401	Identifier	pfi		561368	0					
ANR	561402	Identifier	DataSource		561368	1					
ANR	561403	UnaryOperationExpression	& pfn -> params . DataSource		561368	1					
ANR	561404	UnaryOperator	&		561368	0					
ANR	561405	MemberAccess	pfn -> params . DataSource		561368	1					
ANR	561406	PtrMemberAccess	pfn -> params		561368	0					
ANR	561407	Identifier	pfn		561368	0					
ANR	561408	Identifier	params		561368	1					
ANR	561409	Identifier	DataSource		561368	1					
ANR	561410	ForStatement	"for ( i = 0 , size = 1 ; i < pfn -> params . m ; ++ i )"		561368	9					
ANR	561411	ForInit	"i = 0 , size = 1 ;"	1285:9:43597:43612	561368	0	True				
ANR	561412	Expression	"i = 0 , size = 1"		561368	0					
ANR	561413	AssignmentExpression	i = 0		561368	0		=			
ANR	561414	Identifier	i		561368	0					
ANR	561415	PrimaryExpression	0		561368	1					
ANR	561416	AssignmentExpression	size = 1		561368	1		=			
ANR	561417	Identifier	size		561368	0					
ANR	561418	PrimaryExpression	1		561368	1					
ANR	561419	Condition	i < pfn -> params . m	1285:26:43614:43630	561368	1	True				
ANR	561420	RelationalExpression	i < pfn -> params . m		561368	0		<			
ANR	561421	Identifier	i		561368	0					
ANR	561422	MemberAccess	pfn -> params . m		561368	1					
ANR	561423	PtrMemberAccess	pfn -> params		561368	0					
ANR	561424	Identifier	pfn		561368	0					
ANR	561425	Identifier	params		561368	1					
ANR	561426	Identifier	m		561368	1					
ANR	561427	UnaryExpression	++ i	1285:45:43633:43635	561368	2	True				
ANR	561428	IncDec	++		561368	0					
ANR	561429	Identifier	i		561368	1					
ANR	561430	ExpressionStatement	size *= pfn -> params . Size [ i ]	1286:8:43646:43673	561368	3	True				
ANR	561431	AssignmentExpression	size *= pfn -> params . Size [ i ]		561368	0		*=			
ANR	561432	Identifier	size		561368	0					
ANR	561433	ArrayIndexing	pfn -> params . Size [ i ]		561368	1					
ANR	561434	MemberAccess	pfn -> params . Size		561368	0					
ANR	561435	PtrMemberAccess	pfn -> params		561368	0					
ANR	561436	Identifier	pfn		561368	0					
ANR	561437	Identifier	params		561368	1					
ANR	561438	Identifier	Size		561368	1					
ANR	561439	Identifier	i		561368	1					
ANR	561440	ExpressionStatement	pfi -> data_size = ( size * pfn -> params . n * pfn -> params . BitsPerSample + 7 ) >> 3	1287:4:43679:43763	561368	10	True				
ANR	561441	AssignmentExpression	pfi -> data_size = ( size * pfn -> params . n * pfn -> params . BitsPerSample + 7 ) >> 3		561368	0		=			
ANR	561442	PtrMemberAccess	pfi -> data_size		561368	0					
ANR	561443	Identifier	pfi		561368	0					
ANR	561444	Identifier	data_size		561368	1					
ANR	561445	ShiftExpression	( size * pfn -> params . n * pfn -> params . BitsPerSample + 7 ) >> 3		561368	1		>>			
ANR	561446	AdditiveExpression	size * pfn -> params . n * pfn -> params . BitsPerSample + 7		561368	0		+			
ANR	561447	MultiplicativeExpression	size * pfn -> params . n * pfn -> params . BitsPerSample		561368	0		*			
ANR	561448	Identifier	size		561368	0					
ANR	561449	MultiplicativeExpression	pfn -> params . n * pfn -> params . BitsPerSample		561368	1		*			
ANR	561450	MemberAccess	pfn -> params . n		561368	0					
ANR	561451	PtrMemberAccess	pfn -> params		561368	0					
ANR	561452	Identifier	pfn		561368	0					
ANR	561453	Identifier	params		561368	1					
ANR	561454	Identifier	n		561368	1					
ANR	561455	MemberAccess	pfn -> params . BitsPerSample		561368	1					
ANR	561456	PtrMemberAccess	pfn -> params		561368	0					
ANR	561457	Identifier	pfn		561368	0					
ANR	561458	Identifier	params		561368	1					
ANR	561459	Identifier	BitsPerSample		561368	1					
ANR	561460	PrimaryExpression	7		561368	1					
ANR	561461	PrimaryExpression	3		561368	1					
ANR	561462	ReturnType	static void		561368	1					
ANR	561463	Identifier	fn_Sd_get_info		561368	2					
ANR	561464	ParameterList	"const gs_function_t * pfn_common , gs_function_info_t * pfi"		561368	3					
ANR	561465	Parameter	const gs_function_t * pfn_common	1276:15:43317:43347	561368	0	True				
ANR	561466	ParameterType	const gs_function_t *		561368	0					
ANR	561467	Identifier	pfn_common		561368	1					
ANR	561468	Parameter	gs_function_info_t * pfi	1276:48:43350:43372	561368	1	True				
ANR	561469	ParameterType	gs_function_info_t *		561368	0					
ANR	561470	Identifier	pfi		561368	1					
ANR	561471	CFGEntryNode	ENTRY		561368		True				
ANR	561472	CFGExitNode	EXIT		561368		True				
ANR	561473	Symbol	* pfn		561368						
ANR	561474	Symbol	pfn -> params . m		561368						
ANR	561475	Symbol	pfn -> params . Size		561368						
ANR	561476	Symbol	pfn -> params . n		561368						
ANR	561477	Symbol	pfn_common		561368						
ANR	561478	Symbol	& pfn -> params		561368						
ANR	561479	Symbol	* pfn -> params . Size		561368						
ANR	561480	Symbol	i		561368						
ANR	561481	Symbol	* * pfn		561368						
ANR	561482	Symbol	pfi -> data_size		561368						
ANR	561483	Symbol	pfi -> DataSource		561368						
ANR	561484	Symbol	pfi		561368						
ANR	561485	Symbol	* i		561368						
ANR	561486	Symbol	size		561368						
ANR	561487	Symbol	pfn		561368						
ANR	561488	Symbol	& pfn -> params . DataSource		561368						
ANR	561489	Symbol	pfn -> params		561368						
ANR	561490	Symbol	* pfi		561368						
ANR	561491	Symbol	* pfn -> params		561368						
ANR	561492	Symbol	pfn -> params . BitsPerSample		561368						
ANR	561493	Function	fn_Sd_get_params	1292:0:43829:45117							
ANR	561494	FunctionDef	"fn_Sd_get_params (const gs_function_t * pfn_common , gs_param_list * plist)"		561493	0					
ANR	561495	CompoundStatement		1294:0:43912:45117	561493	0					
ANR	561496	Statement	const	1295:4:43918:43922	561493	0	True				
ANR	561497	Statement	gs_function_Sd_t	1295:10:43924:43939	561493	1	True				
ANR	561498	Statement	*	1295:27:43941:43941	561493	2	True				
ANR	561499	Statement	const	1295:28:43942:43946	561493	3	True				
ANR	561500	ExpressionStatement	pfn = ( const gs_function_Sd_t * ) pfn_common	1295:34:43948:43998	561493	4	True				
ANR	561501	AssignmentExpression	pfn = ( const gs_function_Sd_t * ) pfn_common		561493	0		=			
ANR	561502	Identifier	pfn		561493	0					
ANR	561503	CastExpression	( const gs_function_Sd_t * ) pfn_common		561493	1					
ANR	561504	CastTarget	const gs_function_Sd_t *		561493	0					
ANR	561505	Identifier	pfn_common		561493	1					
ANR	561506	IdentifierDeclStatement	"int ecode = fn_common_get_params ( pfn_common , plist ) ;"	1297:4:44004:44055	561493	5	True				
ANR	561507	IdentifierDecl	"ecode = fn_common_get_params ( pfn_common , plist )"		561493	0					
ANR	561508	IdentifierDeclType	int		561493	0					
ANR	561509	Identifier	ecode		561493	1					
ANR	561510	AssignmentExpression	"ecode = fn_common_get_params ( pfn_common , plist )"		561493	2		=			
ANR	561511	Identifier	ecode		561493	0					
ANR	561512	CallExpression	"fn_common_get_params ( pfn_common , plist )"		561493	1					
ANR	561513	Callee	fn_common_get_params		561493	0					
ANR	561514	Identifier	fn_common_get_params		561493	0					
ANR	561515	ArgumentList	pfn_common		561493	1					
ANR	561516	Argument	pfn_common		561493	0					
ANR	561517	Identifier	pfn_common		561493	0					
ANR	561518	Argument	plist		561493	1					
ANR	561519	Identifier	plist		561493	0					
ANR	561520	IdentifierDeclStatement	int code ;	1298:4:44061:44069	561493	6	True				
ANR	561521	IdentifierDecl	code		561493	0					
ANR	561522	IdentifierDeclType	int		561493	0					
ANR	561523	Identifier	code		561493	1					
ANR	561524	IfStatement	if ( pfn -> params . Order != 1 )		561493	7					
ANR	561525	Condition	pfn -> params . Order != 1	1300:8:44080:44101	561493	0	True				
ANR	561526	EqualityExpression	pfn -> params . Order != 1		561493	0		!=			
ANR	561527	MemberAccess	pfn -> params . Order		561493	0					
ANR	561528	PtrMemberAccess	pfn -> params		561493	0					
ANR	561529	Identifier	pfn		561493	0					
ANR	561530	Identifier	params		561493	1					
ANR	561531	Identifier	Order		561493	1					
ANR	561532	PrimaryExpression	1		561493	1					
ANR	561533	CompoundStatement		7:32:191:191	561493	1					
ANR	561534	IfStatement	"if ( ( code = param_write_int ( plist , ""Order"" , & pfn -> params . Order ) ) < 0 )"		561493	0					
ANR	561535	Condition	"( code = param_write_int ( plist , ""Order"" , & pfn -> params . Order ) ) < 0"	1301:12:44118:44181	561493	0	True				
ANR	561536	RelationalExpression	"( code = param_write_int ( plist , ""Order"" , & pfn -> params . Order ) ) < 0"		561493	0		<			
ANR	561537	AssignmentExpression	"code = param_write_int ( plist , ""Order"" , & pfn -> params . Order )"		561493	0		=			
ANR	561538	Identifier	code		561493	0					
ANR	561539	CallExpression	"param_write_int ( plist , ""Order"" , & pfn -> params . Order )"		561493	1					
ANR	561540	Callee	param_write_int		561493	0					
ANR	561541	Identifier	param_write_int		561493	0					
ANR	561542	ArgumentList	plist		561493	1					
ANR	561543	Argument	plist		561493	0					
ANR	561544	Identifier	plist		561493	0					
ANR	561545	Argument	"""Order"""		561493	1					
ANR	561546	PrimaryExpression	"""Order"""		561493	0					
ANR	561547	Argument	& pfn -> params . Order		561493	2					
ANR	561548	UnaryOperationExpression	& pfn -> params . Order		561493	0					
ANR	561549	UnaryOperator	&		561493	0					
ANR	561550	MemberAccess	pfn -> params . Order		561493	1					
ANR	561551	PtrMemberAccess	pfn -> params		561493	0					
ANR	561552	Identifier	pfn		561493	0					
ANR	561553	Identifier	params		561493	1					
ANR	561554	Identifier	Order		561493	1					
ANR	561555	PrimaryExpression	0		561493	1					
ANR	561556	ExpressionStatement	ecode = code	1302:12:44196:44208	561493	1	True				
ANR	561557	AssignmentExpression	ecode = code		561493	0		=			
ANR	561558	Identifier	ecode		561493	0					
ANR	561559	Identifier	code		561493	1					
ANR	561560	IfStatement	"if ( ( code = param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample ) ) < 0 )"		561493	8					
ANR	561561	Condition	"( code = param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample ) ) < 0"	1304:8:44224:44335	561493	0	True				
ANR	561562	RelationalExpression	"( code = param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample ) ) < 0"		561493	0		<			
ANR	561563	AssignmentExpression	"code = param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample )"		561493	0		=			
ANR	561564	Identifier	code		561493	0					
ANR	561565	CallExpression	"param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample )"		561493	1					
ANR	561566	Callee	param_write_int		561493	0					
ANR	561567	Identifier	param_write_int		561493	0					
ANR	561568	ArgumentList	plist		561493	1					
ANR	561569	Argument	plist		561493	0					
ANR	561570	Identifier	plist		561493	0					
ANR	561571	Argument	"""BitsPerSample"""		561493	1					
ANR	561572	PrimaryExpression	"""BitsPerSample"""		561493	0					
ANR	561573	Argument	& pfn -> params . BitsPerSample		561493	2					
ANR	561574	UnaryOperationExpression	& pfn -> params . BitsPerSample		561493	0					
ANR	561575	UnaryOperator	&		561493	0					
ANR	561576	MemberAccess	pfn -> params . BitsPerSample		561493	1					
ANR	561577	PtrMemberAccess	pfn -> params		561493	0					
ANR	561578	Identifier	pfn		561493	0					
ANR	561579	Identifier	params		561493	1					
ANR	561580	Identifier	BitsPerSample		561493	1					
ANR	561581	PrimaryExpression	0		561493	1					
ANR	561582	ExpressionStatement	ecode = code	1306:8:44346:44358	561493	1	True				
ANR	561583	AssignmentExpression	ecode = code		561493	0		=			
ANR	561584	Identifier	ecode		561493	0					
ANR	561585	Identifier	code		561493	1					
ANR	561586	IfStatement	if ( pfn -> params . Encode )		561493	9					
ANR	561587	Condition	pfn -> params . Encode	1307:8:44368:44385	561493	0	True				
ANR	561588	MemberAccess	pfn -> params . Encode		561493	0					
ANR	561589	PtrMemberAccess	pfn -> params		561493	0					
ANR	561590	Identifier	pfn		561493	0					
ANR	561591	Identifier	params		561493	1					
ANR	561592	Identifier	Encode		561493	1					
ANR	561593	CompoundStatement		14:28:475:475	561493	1					
ANR	561594	IfStatement	"if ( ( code = param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false ) ) < 0 )"		561493	0					
ANR	561595	Condition	"( code = param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false ) ) < 0"	1308:12:44402:44591	561493	0	True				
ANR	561596	RelationalExpression	"( code = param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false ) ) < 0"		561493	0		<			
ANR	561597	AssignmentExpression	"code = param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false )"		561493	0		=			
ANR	561598	Identifier	code		561493	0					
ANR	561599	CallExpression	"param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false )"		561493	1					
ANR	561600	Callee	param_write_float_values		561493	0					
ANR	561601	Identifier	param_write_float_values		561493	0					
ANR	561602	ArgumentList	plist		561493	1					
ANR	561603	Argument	plist		561493	0					
ANR	561604	Identifier	plist		561493	0					
ANR	561605	Argument	"""Encode"""		561493	1					
ANR	561606	PrimaryExpression	"""Encode"""		561493	0					
ANR	561607	Argument	pfn -> params . Encode		561493	2					
ANR	561608	MemberAccess	pfn -> params . Encode		561493	0					
ANR	561609	PtrMemberAccess	pfn -> params		561493	0					
ANR	561610	Identifier	pfn		561493	0					
ANR	561611	Identifier	params		561493	1					
ANR	561612	Identifier	Encode		561493	1					
ANR	561613	Argument	2 * pfn -> params . m		561493	3					
ANR	561614	MultiplicativeExpression	2 * pfn -> params . m		561493	0		*			
ANR	561615	PrimaryExpression	2		561493	0					
ANR	561616	MemberAccess	pfn -> params . m		561493	1					
ANR	561617	PtrMemberAccess	pfn -> params		561493	0					
ANR	561618	Identifier	pfn		561493	0					
ANR	561619	Identifier	params		561493	1					
ANR	561620	Identifier	m		561493	1					
ANR	561621	Argument	false		561493	4					
ANR	561622	Identifier	false		561493	0					
ANR	561623	PrimaryExpression	0		561493	1					
ANR	561624	ExpressionStatement	ecode = code	1311:12:44606:44618	561493	1	True				
ANR	561625	AssignmentExpression	ecode = code		561493	0		=			
ANR	561626	Identifier	ecode		561493	0					
ANR	561627	Identifier	code		561493	1					
ANR	561628	IfStatement	if ( pfn -> params . Decode )		561493	10					
ANR	561629	Condition	pfn -> params . Decode	1313:8:44634:44651	561493	0	True				
ANR	561630	MemberAccess	pfn -> params . Decode		561493	0					
ANR	561631	PtrMemberAccess	pfn -> params		561493	0					
ANR	561632	Identifier	pfn		561493	0					
ANR	561633	Identifier	params		561493	1					
ANR	561634	Identifier	Decode		561493	1					
ANR	561635	CompoundStatement		20:28:741:741	561493	1					
ANR	561636	IfStatement	"if ( ( code = param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false ) ) < 0 )"		561493	0					
ANR	561637	Condition	"( code = param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false ) ) < 0"	1314:12:44668:44857	561493	0	True				
ANR	561638	RelationalExpression	"( code = param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false ) ) < 0"		561493	0		<			
ANR	561639	AssignmentExpression	"code = param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false )"		561493	0		=			
ANR	561640	Identifier	code		561493	0					
ANR	561641	CallExpression	"param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false )"		561493	1					
ANR	561642	Callee	param_write_float_values		561493	0					
ANR	561643	Identifier	param_write_float_values		561493	0					
ANR	561644	ArgumentList	plist		561493	1					
ANR	561645	Argument	plist		561493	0					
ANR	561646	Identifier	plist		561493	0					
ANR	561647	Argument	"""Decode"""		561493	1					
ANR	561648	PrimaryExpression	"""Decode"""		561493	0					
ANR	561649	Argument	pfn -> params . Decode		561493	2					
ANR	561650	MemberAccess	pfn -> params . Decode		561493	0					
ANR	561651	PtrMemberAccess	pfn -> params		561493	0					
ANR	561652	Identifier	pfn		561493	0					
ANR	561653	Identifier	params		561493	1					
ANR	561654	Identifier	Decode		561493	1					
ANR	561655	Argument	2 * pfn -> params . n		561493	3					
ANR	561656	MultiplicativeExpression	2 * pfn -> params . n		561493	0		*			
ANR	561657	PrimaryExpression	2		561493	0					
ANR	561658	MemberAccess	pfn -> params . n		561493	1					
ANR	561659	PtrMemberAccess	pfn -> params		561493	0					
ANR	561660	Identifier	pfn		561493	0					
ANR	561661	Identifier	params		561493	1					
ANR	561662	Identifier	n		561493	1					
ANR	561663	Argument	false		561493	4					
ANR	561664	Identifier	false		561493	0					
ANR	561665	PrimaryExpression	0		561493	1					
ANR	561666	ExpressionStatement	ecode = code	1317:12:44872:44884	561493	1	True				
ANR	561667	AssignmentExpression	ecode = code		561493	0		=			
ANR	561668	Identifier	ecode		561493	0					
ANR	561669	Identifier	code		561493	1					
ANR	561670	IfStatement	if ( pfn -> params . Size )		561493	11					
ANR	561671	Condition	pfn -> params . Size	1319:8:44900:44915	561493	0	True				
ANR	561672	MemberAccess	pfn -> params . Size		561493	0					
ANR	561673	PtrMemberAccess	pfn -> params		561493	0					
ANR	561674	Identifier	pfn		561493	0					
ANR	561675	Identifier	params		561493	1					
ANR	561676	Identifier	Size		561493	1					
ANR	561677	CompoundStatement		26:26:1005:1005	561493	1					
ANR	561678	IfStatement	"if ( ( code = param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false ) ) < 0 )"		561493	0					
ANR	561679	Condition	"( code = param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false ) ) < 0"	1320:12:44932:45064	561493	0	True				
ANR	561680	RelationalExpression	"( code = param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false ) ) < 0"		561493	0		<			
ANR	561681	AssignmentExpression	"code = param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false )"		561493	0		=			
ANR	561682	Identifier	code		561493	0					
ANR	561683	CallExpression	"param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false )"		561493	1					
ANR	561684	Callee	param_write_int_values		561493	0					
ANR	561685	Identifier	param_write_int_values		561493	0					
ANR	561686	ArgumentList	plist		561493	1					
ANR	561687	Argument	plist		561493	0					
ANR	561688	Identifier	plist		561493	0					
ANR	561689	Argument	"""Size"""		561493	1					
ANR	561690	PrimaryExpression	"""Size"""		561493	0					
ANR	561691	Argument	pfn -> params . Size		561493	2					
ANR	561692	MemberAccess	pfn -> params . Size		561493	0					
ANR	561693	PtrMemberAccess	pfn -> params		561493	0					
ANR	561694	Identifier	pfn		561493	0					
ANR	561695	Identifier	params		561493	1					
ANR	561696	Identifier	Size		561493	1					
ANR	561697	Argument	pfn -> params . m		561493	3					
ANR	561698	MemberAccess	pfn -> params . m		561493	0					
ANR	561699	PtrMemberAccess	pfn -> params		561493	0					
ANR	561700	Identifier	pfn		561493	0					
ANR	561701	Identifier	params		561493	1					
ANR	561702	Identifier	m		561493	1					
ANR	561703	Argument	false		561493	4					
ANR	561704	Identifier	false		561493	0					
ANR	561705	PrimaryExpression	0		561493	1					
ANR	561706	ExpressionStatement	ecode = code	1322:12:45079:45091	561493	1	True				
ANR	561707	AssignmentExpression	ecode = code		561493	0		=			
ANR	561708	Identifier	ecode		561493	0					
ANR	561709	Identifier	code		561493	1					
ANR	561710	ReturnStatement	return ecode ;	1324:4:45103:45115	561493	12	True				
ANR	561711	Identifier	ecode		561493	0					
ANR	561712	ReturnType	static int		561493	1					
ANR	561713	Identifier	fn_Sd_get_params		561493	2					
ANR	561714	ParameterList	"const gs_function_t * pfn_common , gs_param_list * plist"		561493	3					
ANR	561715	Parameter	const gs_function_t * pfn_common	1293:17:43857:43887	561493	0	True				
ANR	561716	ParameterType	const gs_function_t *		561493	0					
ANR	561717	Identifier	pfn_common		561493	1					
ANR	561718	Parameter	gs_param_list * plist	1293:50:43890:43909	561493	1	True				
ANR	561719	ParameterType	gs_param_list *		561493	0					
ANR	561720	Identifier	plist		561493	1					
ANR	561721	CFGEntryNode	ENTRY		561493		True				
ANR	561722	CFGExitNode	EXIT		561493		True				
ANR	561723	Symbol	* pfn		561493						
ANR	561724	Symbol	pfn -> params . m		561493						
ANR	561725	Symbol	code		561493						
ANR	561726	Symbol	& pfn -> params . Order		561493						
ANR	561727	Symbol	pfn -> params . n		561493						
ANR	561728	Symbol	pfn -> params . Size		561493						
ANR	561729	Symbol	pfn_common		561493						
ANR	561730	Symbol	& pfn -> params . BitsPerSample		561493						
ANR	561731	Symbol	& pfn -> params		561493						
ANR	561732	Symbol	false		561493						
ANR	561733	Symbol	param_write_float_values		561493						
ANR	561734	Symbol	ecode		561493						
ANR	561735	Symbol	pfn -> params . Order		561493						
ANR	561736	Symbol	plist		561493						
ANR	561737	Symbol	param_write_int_values		561493						
ANR	561738	Symbol	pfn		561493						
ANR	561739	Symbol	pfn -> params . Encode		561493						
ANR	561740	Symbol	pfn -> params . Decode		561493						
ANR	561741	Symbol	pfn -> params		561493						
ANR	561742	Symbol	fn_common_get_params		561493						
ANR	561743	Symbol	param_write_int		561493						
ANR	561744	Function	fn_Sd_make_scaled	1328:0:45168:46408							
ANR	561745	FunctionDef	"fn_Sd_make_scaled (const gs_function_Sd_t * pfn , gs_function_Sd_t * * ppsfn , const gs_range_t * pranges , gs_memory_t * mem)"		561744	0					
ANR	561746	CompoundStatement		1331:0:45315:46408	561744	0					
ANR	561747	IdentifierDeclStatement	"gs_function_Sd_t * psfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""fn_Sd_make_scaled"" ) ;"	1332:4:45321:45454	561744	0	True				
ANR	561748	IdentifierDecl	"* psfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""fn_Sd_make_scaled"" )"		561744	0					
ANR	561749	IdentifierDeclType	gs_function_Sd_t *		561744	0					
ANR	561750	Identifier	psfn		561744	1					
ANR	561751	AssignmentExpression	"* psfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""fn_Sd_make_scaled"" )"		561744	2		=			
ANR	561752	Identifier	psfn		561744	0					
ANR	561753	CallExpression	"gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""fn_Sd_make_scaled"" )"		561744	1					
ANR	561754	Callee	gs_alloc_struct		561744	0					
ANR	561755	Identifier	gs_alloc_struct		561744	0					
ANR	561756	ArgumentList	mem		561744	1					
ANR	561757	Argument	mem		561744	0					
ANR	561758	Identifier	mem		561744	0					
ANR	561759	Argument	gs_function_Sd_t		561744	1					
ANR	561760	Identifier	gs_function_Sd_t		561744	0					
ANR	561761	Argument	& st_function_Sd		561744	2					
ANR	561762	UnaryOperationExpression	& st_function_Sd		561744	0					
ANR	561763	UnaryOperator	&		561744	0					
ANR	561764	Identifier	st_function_Sd		561744	1					
ANR	561765	Argument	"""fn_Sd_make_scaled"""		561744	3					
ANR	561766	PrimaryExpression	"""fn_Sd_make_scaled"""		561744	0					
ANR	561767	IdentifierDeclStatement	int code ;	1335:4:45460:45468	561744	1	True				
ANR	561768	IdentifierDecl	code		561744	0					
ANR	561769	IdentifierDeclType	int		561744	0					
ANR	561770	Identifier	code		561744	1					
ANR	561771	IfStatement	if ( psfn == 0 )		561744	2					
ANR	561772	Condition	psfn == 0	1337:8:45479:45487	561744	0	True				
ANR	561773	EqualityExpression	psfn == 0		561744	0		==			
ANR	561774	Identifier	psfn		561744	0					
ANR	561775	PrimaryExpression	0		561744	1					
ANR	561776	ExpressionStatement	return_error ( gs_error_VMerror )	1338:8:45498:45528	561744	1	True				
ANR	561777	CallExpression	return_error ( gs_error_VMerror )		561744	0					
ANR	561778	Callee	return_error		561744	0					
ANR	561779	Identifier	return_error		561744	0					
ANR	561780	ArgumentList	gs_error_VMerror		561744	1					
ANR	561781	Argument	gs_error_VMerror		561744	0					
ANR	561782	Identifier	gs_error_VMerror		561744	0					
ANR	561783	ExpressionStatement	psfn -> params = pfn -> params	1339:4:45534:45560	561744	3	True				
ANR	561784	AssignmentExpression	psfn -> params = pfn -> params		561744	0		=			
ANR	561785	PtrMemberAccess	psfn -> params		561744	0					
ANR	561786	Identifier	psfn		561744	0					
ANR	561787	Identifier	params		561744	1					
ANR	561788	PtrMemberAccess	pfn -> params		561744	1					
ANR	561789	Identifier	pfn		561744	0					
ANR	561790	Identifier	params		561744	1					
ANR	561791	ExpressionStatement	psfn -> params . Encode = 0	1340:4:45566:45589	561744	4	True				
ANR	561792	AssignmentExpression	psfn -> params . Encode = 0		561744	0		=			
ANR	561793	MemberAccess	psfn -> params . Encode		561744	0					
ANR	561794	PtrMemberAccess	psfn -> params		561744	0					
ANR	561795	Identifier	psfn		561744	0					
ANR	561796	Identifier	params		561744	1					
ANR	561797	Identifier	Encode		561744	1					
ANR	561798	PrimaryExpression	0		561744	1					
ANR	561799	ExpressionStatement	psfn -> params . Decode = 0	1341:4:45621:45644	561744	5	True				
ANR	561800	AssignmentExpression	psfn -> params . Decode = 0		561744	0		=			
ANR	561801	MemberAccess	psfn -> params . Decode		561744	0					
ANR	561802	PtrMemberAccess	psfn -> params		561744	0					
ANR	561803	Identifier	psfn		561744	0					
ANR	561804	Identifier	params		561744	1					
ANR	561805	Identifier	Decode		561744	1					
ANR	561806	PrimaryExpression	0		561744	1					
ANR	561807	ExpressionStatement	"psfn -> params . Size = fn_copy_values ( pfn -> params . Size , pfn -> params . m , sizeof ( int ) , mem )"	1342:4:45650:45743	561744	6	True				
ANR	561808	AssignmentExpression	"psfn -> params . Size = fn_copy_values ( pfn -> params . Size , pfn -> params . m , sizeof ( int ) , mem )"		561744	0		=			
ANR	561809	MemberAccess	psfn -> params . Size		561744	0					
ANR	561810	PtrMemberAccess	psfn -> params		561744	0					
ANR	561811	Identifier	psfn		561744	0					
ANR	561812	Identifier	params		561744	1					
ANR	561813	Identifier	Size		561744	1					
ANR	561814	CallExpression	"fn_copy_values ( pfn -> params . Size , pfn -> params . m , sizeof ( int ) , mem )"		561744	1					
ANR	561815	Callee	fn_copy_values		561744	0					
ANR	561816	Identifier	fn_copy_values		561744	0					
ANR	561817	ArgumentList	pfn -> params . Size		561744	1					
ANR	561818	Argument	pfn -> params . Size		561744	0					
ANR	561819	MemberAccess	pfn -> params . Size		561744	0					
ANR	561820	PtrMemberAccess	pfn -> params		561744	0					
ANR	561821	Identifier	pfn		561744	0					
ANR	561822	Identifier	params		561744	1					
ANR	561823	Identifier	Size		561744	1					
ANR	561824	Argument	pfn -> params . m		561744	1					
ANR	561825	MemberAccess	pfn -> params . m		561744	0					
ANR	561826	PtrMemberAccess	pfn -> params		561744	0					
ANR	561827	Identifier	pfn		561744	0					
ANR	561828	Identifier	params		561744	1					
ANR	561829	Identifier	m		561744	1					
ANR	561830	Argument	sizeof ( int )		561744	2					
ANR	561831	SizeofExpression	sizeof ( int )		561744	0					
ANR	561832	Sizeof	sizeof		561744	0					
ANR	561833	SizeofOperand	int		561744	1					
ANR	561834	Argument	mem		561744	3					
ANR	561835	Identifier	mem		561744	0					
ANR	561836	IfStatement	"if ( ( code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 ) ) < 0 || ( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0 )"		561744	7					
ANR	561837	Condition	"( code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 ) ) < 0 || ( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"	1344:8:45753:46292	561744	0	True				
ANR	561838	OrExpression	"( code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 ) ) < 0 || ( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"		561744	0		||			
ANR	561839	RelationalExpression	( code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 ) ) < 0		561744	0		<			
ANR	561840	AssignmentExpression	code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 )		561744	0		=			
ANR	561841	Identifier	code		561744	0					
ANR	561842	ConditionalExpression	psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0		561744	1					
ANR	561843	Condition	psfn -> params . Size == 0		561744	0					
ANR	561844	EqualityExpression	psfn -> params . Size == 0		561744	0		==			
ANR	561845	MemberAccess	psfn -> params . Size		561744	0					
ANR	561846	PtrMemberAccess	psfn -> params		561744	0					
ANR	561847	Identifier	psfn		561744	0					
ANR	561848	Identifier	params		561744	1					
ANR	561849	Identifier	Size		561744	1					
ANR	561850	PrimaryExpression	0		561744	1					
ANR	561851	CallExpression	gs_note_error ( gs_error_VMerror )		561744	1					
ANR	561852	Callee	gs_note_error		561744	0					
ANR	561853	Identifier	gs_note_error		561744	0					
ANR	561854	ArgumentList	gs_error_VMerror		561744	1					
ANR	561855	Argument	gs_error_VMerror		561744	0					
ANR	561856	Identifier	gs_error_VMerror		561744	0					
ANR	561857	PrimaryExpression	0		561744	2					
ANR	561858	PrimaryExpression	0		561744	1					
ANR	561859	OrExpression	"( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"		561744	1		||			
ANR	561860	RelationalExpression	"( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0"		561744	0		<			
ANR	561861	AssignmentExpression	"code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem )"		561744	0		=			
ANR	561862	Identifier	code		561744	0					
ANR	561863	CallExpression	"fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem )"		561744	1					
ANR	561864	Callee	fn_common_scale		561744	0					
ANR	561865	Identifier	fn_common_scale		561744	0					
ANR	561866	ArgumentList	( gs_function_t * ) psfn		561744	1					
ANR	561867	Argument	( gs_function_t * ) psfn		561744	0					
ANR	561868	CastExpression	( gs_function_t * ) psfn		561744	0					
ANR	561869	CastTarget	gs_function_t *		561744	0					
ANR	561870	Identifier	psfn		561744	1					
ANR	561871	Argument	( const gs_function_t * ) pfn		561744	1					
ANR	561872	CastExpression	( const gs_function_t * ) pfn		561744	0					
ANR	561873	CastTarget	const gs_function_t *		561744	0					
ANR	561874	Identifier	pfn		561744	1					
ANR	561875	Argument	pranges		561744	2					
ANR	561876	Identifier	pranges		561744	0					
ANR	561877	Argument	mem		561744	3					
ANR	561878	Identifier	mem		561744	0					
ANR	561879	PrimaryExpression	0		561744	1					
ANR	561880	OrExpression	"( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"		561744	1		||			
ANR	561881	RelationalExpression	"( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0"		561744	0		<			
ANR	561882	AssignmentExpression	"code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem )"		561744	0		=			
ANR	561883	Identifier	code		561744	0					
ANR	561884	CallExpression	"fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem )"		561744	1					
ANR	561885	Callee	fn_scale_pairs		561744	0					
ANR	561886	Identifier	fn_scale_pairs		561744	0					
ANR	561887	ArgumentList	& psfn -> params . Encode		561744	1					
ANR	561888	Argument	& psfn -> params . Encode		561744	0					
ANR	561889	UnaryOperationExpression	& psfn -> params . Encode		561744	0					
ANR	561890	UnaryOperator	&		561744	0					
ANR	561891	MemberAccess	psfn -> params . Encode		561744	1					
ANR	561892	PtrMemberAccess	psfn -> params		561744	0					
ANR	561893	Identifier	psfn		561744	0					
ANR	561894	Identifier	params		561744	1					
ANR	561895	Identifier	Encode		561744	1					
ANR	561896	Argument	pfn -> params . Encode		561744	1					
ANR	561897	MemberAccess	pfn -> params . Encode		561744	0					
ANR	561898	PtrMemberAccess	pfn -> params		561744	0					
ANR	561899	Identifier	pfn		561744	0					
ANR	561900	Identifier	params		561744	1					
ANR	561901	Identifier	Encode		561744	1					
ANR	561902	Argument	pfn -> params . m		561744	2					
ANR	561903	MemberAccess	pfn -> params . m		561744	0					
ANR	561904	PtrMemberAccess	pfn -> params		561744	0					
ANR	561905	Identifier	pfn		561744	0					
ANR	561906	Identifier	params		561744	1					
ANR	561907	Identifier	m		561744	1					
ANR	561908	Argument	NULL		561744	3					
ANR	561909	Identifier	NULL		561744	0					
ANR	561910	Argument	mem		561744	4					
ANR	561911	Identifier	mem		561744	0					
ANR	561912	PrimaryExpression	0		561744	1					
ANR	561913	RelationalExpression	"( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"		561744	1		<			
ANR	561914	AssignmentExpression	"code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem )"		561744	0		=			
ANR	561915	Identifier	code		561744	0					
ANR	561916	CallExpression	"fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem )"		561744	1					
ANR	561917	Callee	fn_scale_pairs		561744	0					
ANR	561918	Identifier	fn_scale_pairs		561744	0					
ANR	561919	ArgumentList	& psfn -> params . Decode		561744	1					
ANR	561920	Argument	& psfn -> params . Decode		561744	0					
ANR	561921	UnaryOperationExpression	& psfn -> params . Decode		561744	0					
ANR	561922	UnaryOperator	&		561744	0					
ANR	561923	MemberAccess	psfn -> params . Decode		561744	1					
ANR	561924	PtrMemberAccess	psfn -> params		561744	0					
ANR	561925	Identifier	psfn		561744	0					
ANR	561926	Identifier	params		561744	1					
ANR	561927	Identifier	Decode		561744	1					
ANR	561928	Argument	pfn -> params . Decode		561744	1					
ANR	561929	MemberAccess	pfn -> params . Decode		561744	0					
ANR	561930	PtrMemberAccess	pfn -> params		561744	0					
ANR	561931	Identifier	pfn		561744	0					
ANR	561932	Identifier	params		561744	1					
ANR	561933	Identifier	Decode		561744	1					
ANR	561934	Argument	pfn -> params . n		561744	2					
ANR	561935	MemberAccess	pfn -> params . n		561744	0					
ANR	561936	PtrMemberAccess	pfn -> params		561744	0					
ANR	561937	Identifier	pfn		561744	0					
ANR	561938	Identifier	params		561744	1					
ANR	561939	Identifier	n		561744	1					
ANR	561940	Argument	pranges		561744	3					
ANR	561941	Identifier	pranges		561744	0					
ANR	561942	Argument	mem		561744	4					
ANR	561943	Identifier	mem		561744	0					
ANR	561944	PrimaryExpression	0		561744	1					
ANR	561945	CompoundStatement		22:66:979:979	561744	1					
ANR	561946	ExpressionStatement	"gs_function_free ( ( gs_function_t * ) psfn , true , mem )"	1353:8:46305:46355	561744	0	True				
ANR	561947	CallExpression	"gs_function_free ( ( gs_function_t * ) psfn , true , mem )"		561744	0					
ANR	561948	Callee	gs_function_free		561744	0					
ANR	561949	Identifier	gs_function_free		561744	0					
ANR	561950	ArgumentList	( gs_function_t * ) psfn		561744	1					
ANR	561951	Argument	( gs_function_t * ) psfn		561744	0					
ANR	561952	CastExpression	( gs_function_t * ) psfn		561744	0					
ANR	561953	CastTarget	gs_function_t *		561744	0					
ANR	561954	Identifier	psfn		561744	1					
ANR	561955	Argument	true		561744	1					
ANR	561956	Identifier	true		561744	0					
ANR	561957	Argument	mem		561744	2					
ANR	561958	Identifier	mem		561744	0					
ANR	561959	ElseStatement	else		561744	0					
ANR	561960	ExpressionStatement	* ppsfn = psfn	1355:8:46376:46389	561744	0	True				
ANR	561961	AssignmentExpression	* ppsfn = psfn		561744	0		=			
ANR	561962	UnaryOperationExpression	* ppsfn		561744	0					
ANR	561963	UnaryOperator	*		561744	0					
ANR	561964	Identifier	ppsfn		561744	1					
ANR	561965	Identifier	psfn		561744	1					
ANR	561966	ReturnStatement	return code ;	1356:4:46395:46406	561744	8	True				
ANR	561967	Identifier	code		561744	0					
ANR	561968	ReturnType	static int		561744	1					
ANR	561969	Identifier	fn_Sd_make_scaled		561744	2					
ANR	561970	ParameterList	"const gs_function_Sd_t * pfn , gs_function_Sd_t * * ppsfn , const gs_range_t * pranges , gs_memory_t * mem"		561744	3					
ANR	561971	Parameter	const gs_function_Sd_t * pfn	1329:18:45197:45223	561744	0	True				
ANR	561972	ParameterType	const gs_function_Sd_t *		561744	0					
ANR	561973	Identifier	pfn		561744	1					
ANR	561974	Parameter	gs_function_Sd_t * * ppsfn	1329:47:45226:45249	561744	1	True				
ANR	561975	ParameterType	gs_function_Sd_t * *		561744	0					
ANR	561976	Identifier	ppsfn		561744	1					
ANR	561977	Parameter	const gs_range_t * pranges	1330:18:45270:45294	561744	2	True				
ANR	561978	ParameterType	const gs_range_t *		561744	0					
ANR	561979	Identifier	pranges		561744	1					
ANR	561980	Parameter	gs_memory_t * mem	1330:45:45297:45312	561744	3	True				
ANR	561981	ParameterType	gs_memory_t *		561744	0					
ANR	561982	Identifier	mem		561744	1					
ANR	561983	CFGEntryNode	ENTRY		561744		True				
ANR	561984	CFGExitNode	EXIT		561744		True				
ANR	561985	Symbol	fn_common_scale		561744						
ANR	561986	Symbol	pfn -> params . m		561744						
ANR	561987	Symbol	code		561744						
ANR	561988	Symbol	pfn -> params . Size		561744						
ANR	561989	Symbol	pfn -> params . n		561744						
ANR	561990	Symbol	psfn -> params . Size		561744						
ANR	561991	Symbol	gs_alloc_struct		561744						
ANR	561992	Symbol	pranges		561744						
ANR	561993	Symbol	& psfn -> params . Encode		561744						
ANR	561994	Symbol	& psfn -> params		561744						
ANR	561995	Symbol	psfn -> params . Decode		561744						
ANR	561996	Symbol	mem		561744						
ANR	561997	Symbol	pfn -> params . Encode		561744						
ANR	561998	Symbol	fn_scale_pairs		561744						
ANR	561999	Symbol	fn_copy_values		561744						
ANR	562000	Symbol	psfn -> params		561744						
ANR	562001	Symbol	* psfn		561744						
ANR	562002	Symbol	* pfn		561744						
ANR	562003	Symbol	NULL		561744						
ANR	562004	Symbol	ppsfn		561744						
ANR	562005	Symbol	& st_function_Sd		561744						
ANR	562006	Symbol	psfn -> params . Encode		561744						
ANR	562007	Symbol	gs_error_VMerror		561744						
ANR	562008	Symbol	gs_note_error		561744						
ANR	562009	Symbol	& psfn -> params . Decode		561744						
ANR	562010	Symbol	true		561744						
ANR	562011	Symbol	pfn		561744						
ANR	562012	Symbol	* ppsfn		561744						
ANR	562013	Symbol	pfn -> params . Decode		561744						
ANR	562014	Symbol	gs_function_Sd_t		561744						
ANR	562015	Symbol	pfn -> params		561744						
ANR	562016	Symbol	psfn		561744						
ANR	562017	Function	gs_function_Sd_free_params	1360:0:46460:46999							
ANR	562018	FunctionDef	"gs_function_Sd_free_params (gs_function_Sd_params_t * params , gs_memory_t * mem)"		562017	0					
ANR	562019	CompoundStatement		1362:0:46545:46999	562017	0					
ANR	562020	ExpressionStatement	"gs_free_const_object ( mem , params -> Size , ""Size"" )"	1363:4:46551:46598	562017	0	True				
ANR	562021	CallExpression	"gs_free_const_object ( mem , params -> Size , ""Size"" )"		562017	0					
ANR	562022	Callee	gs_free_const_object		562017	0					
ANR	562023	Identifier	gs_free_const_object		562017	0					
ANR	562024	ArgumentList	mem		562017	1					
ANR	562025	Argument	mem		562017	0					
ANR	562026	Identifier	mem		562017	0					
ANR	562027	Argument	params -> Size		562017	1					
ANR	562028	PtrMemberAccess	params -> Size		562017	0					
ANR	562029	Identifier	params		562017	0					
ANR	562030	Identifier	Size		562017	1					
ANR	562031	Argument	"""Size"""		562017	2					
ANR	562032	PrimaryExpression	"""Size"""		562017	0					
ANR	562033	ExpressionStatement	"gs_free_const_object ( mem , params -> Decode , ""Decode"" )"	1364:4:46604:46655	562017	1	True				
ANR	562034	CallExpression	"gs_free_const_object ( mem , params -> Decode , ""Decode"" )"		562017	0					
ANR	562035	Callee	gs_free_const_object		562017	0					
ANR	562036	Identifier	gs_free_const_object		562017	0					
ANR	562037	ArgumentList	mem		562017	1					
ANR	562038	Argument	mem		562017	0					
ANR	562039	Identifier	mem		562017	0					
ANR	562040	Argument	params -> Decode		562017	1					
ANR	562041	PtrMemberAccess	params -> Decode		562017	0					
ANR	562042	Identifier	params		562017	0					
ANR	562043	Identifier	Decode		562017	1					
ANR	562044	Argument	"""Decode"""		562017	2					
ANR	562045	PrimaryExpression	"""Decode"""		562017	0					
ANR	562046	ExpressionStatement	"gs_free_const_object ( mem , params -> Encode , ""Encode"" )"	1365:4:46661:46712	562017	2	True				
ANR	562047	CallExpression	"gs_free_const_object ( mem , params -> Encode , ""Encode"" )"		562017	0					
ANR	562048	Callee	gs_free_const_object		562017	0					
ANR	562049	Identifier	gs_free_const_object		562017	0					
ANR	562050	ArgumentList	mem		562017	1					
ANR	562051	Argument	mem		562017	0					
ANR	562052	Identifier	mem		562017	0					
ANR	562053	Argument	params -> Encode		562017	1					
ANR	562054	PtrMemberAccess	params -> Encode		562017	0					
ANR	562055	Identifier	params		562017	0					
ANR	562056	Identifier	Encode		562017	1					
ANR	562057	Argument	"""Encode"""		562017	2					
ANR	562058	PrimaryExpression	"""Encode"""		562017	0					
ANR	562059	ExpressionStatement	"fn_common_free_params ( ( gs_function_params_t * ) params , mem )"	1366:4:46718:46777	562017	3	True				
ANR	562060	CallExpression	"fn_common_free_params ( ( gs_function_params_t * ) params , mem )"		562017	0					
ANR	562061	Callee	fn_common_free_params		562017	0					
ANR	562062	Identifier	fn_common_free_params		562017	0					
ANR	562063	ArgumentList	( gs_function_params_t * ) params		562017	1					
ANR	562064	Argument	( gs_function_params_t * ) params		562017	0					
ANR	562065	CastExpression	( gs_function_params_t * ) params		562017	0					
ANR	562066	CastTarget	gs_function_params_t *		562017	0					
ANR	562067	Identifier	params		562017	1					
ANR	562068	Argument	mem		562017	1					
ANR	562069	Identifier	mem		562017	0					
ANR	562070	ExpressionStatement	"gs_free_object ( mem , params -> pole , ""gs_function_Sd_free_params"" )"	1367:4:46783:46846	562017	4	True				
ANR	562071	CallExpression	"gs_free_object ( mem , params -> pole , ""gs_function_Sd_free_params"" )"		562017	0					
ANR	562072	Callee	gs_free_object		562017	0					
ANR	562073	Identifier	gs_free_object		562017	0					
ANR	562074	ArgumentList	mem		562017	1					
ANR	562075	Argument	mem		562017	0					
ANR	562076	Identifier	mem		562017	0					
ANR	562077	Argument	params -> pole		562017	1					
ANR	562078	PtrMemberAccess	params -> pole		562017	0					
ANR	562079	Identifier	params		562017	0					
ANR	562080	Identifier	pole		562017	1					
ANR	562081	Argument	"""gs_function_Sd_free_params"""		562017	2					
ANR	562082	PrimaryExpression	"""gs_function_Sd_free_params"""		562017	0					
ANR	562083	ExpressionStatement	"gs_free_object ( mem , params -> array_step , ""gs_function_Sd_free_params"" )"	1368:4:46852:46921	562017	5	True				
ANR	562084	CallExpression	"gs_free_object ( mem , params -> array_step , ""gs_function_Sd_free_params"" )"		562017	0					
ANR	562085	Callee	gs_free_object		562017	0					
ANR	562086	Identifier	gs_free_object		562017	0					
ANR	562087	ArgumentList	mem		562017	1					
ANR	562088	Argument	mem		562017	0					
ANR	562089	Identifier	mem		562017	0					
ANR	562090	Argument	params -> array_step		562017	1					
ANR	562091	PtrMemberAccess	params -> array_step		562017	0					
ANR	562092	Identifier	params		562017	0					
ANR	562093	Identifier	array_step		562017	1					
ANR	562094	Argument	"""gs_function_Sd_free_params"""		562017	2					
ANR	562095	PrimaryExpression	"""gs_function_Sd_free_params"""		562017	0					
ANR	562096	ExpressionStatement	"gs_free_object ( mem , params -> stream_step , ""gs_function_Sd_free_params"" )"	1369:4:46927:46997	562017	6	True				
ANR	562097	CallExpression	"gs_free_object ( mem , params -> stream_step , ""gs_function_Sd_free_params"" )"		562017	0					
ANR	562098	Callee	gs_free_object		562017	0					
ANR	562099	Identifier	gs_free_object		562017	0					
ANR	562100	ArgumentList	mem		562017	1					
ANR	562101	Argument	mem		562017	0					
ANR	562102	Identifier	mem		562017	0					
ANR	562103	Argument	params -> stream_step		562017	1					
ANR	562104	PtrMemberAccess	params -> stream_step		562017	0					
ANR	562105	Identifier	params		562017	0					
ANR	562106	Identifier	stream_step		562017	1					
ANR	562107	Argument	"""gs_function_Sd_free_params"""		562017	2					
ANR	562108	PrimaryExpression	"""gs_function_Sd_free_params"""		562017	0					
ANR	562109	ReturnType	void		562017	1					
ANR	562110	Identifier	gs_function_Sd_free_params		562017	2					
ANR	562111	ParameterList	"gs_function_Sd_params_t * params , gs_memory_t * mem"		562017	3					
ANR	562112	Parameter	gs_function_Sd_params_t * params	1361:27:46492:46523	562017	0	True				
ANR	562113	ParameterType	gs_function_Sd_params_t *		562017	0					
ANR	562114	Identifier	params		562017	1					
ANR	562115	Parameter	gs_memory_t * mem	1361:61:46526:46542	562017	1	True				
ANR	562116	ParameterType	gs_memory_t *		562017	0					
ANR	562117	Identifier	mem		562017	1					
ANR	562118	CFGEntryNode	ENTRY		562017		True				
ANR	562119	CFGExitNode	EXIT		562017		True				
ANR	562120	Symbol	params -> array_step		562017						
ANR	562121	Symbol	mem		562017						
ANR	562122	Symbol	params -> Encode		562017						
ANR	562123	Symbol	params -> Decode		562017						
ANR	562124	Symbol	params -> pole		562017						
ANR	562125	Symbol	params		562017						
ANR	562126	Symbol	params -> Size		562017						
ANR	562127	Symbol	* params		562017						
ANR	562128	Symbol	params -> stream_step		562017						
ANR	562129	Function	serialize_array	1373:0:47048:47449							
ANR	562130	FunctionDef	"serialize_array (const float * a , int half_size , stream * s)"		562129	0					
ANR	562131	CompoundStatement		1374:0:47117:47449	562129	0					
ANR	562132	IdentifierDeclStatement	uint n ;	1375:4:47123:47129	562129	0	True				
ANR	562133	IdentifierDecl	n		562129	0					
ANR	562134	IdentifierDeclType	uint		562129	0					
ANR	562135	Identifier	n		562129	1					
ANR	562136	IdentifierDeclStatement	"const float dummy [ 2 ] = { 0 , 0 } ;"	1376:4:47135:47164	562129	1	True				
ANR	562137	IdentifierDecl	"dummy [ 2 ] = { 0 , 0 }"		562129	0					
ANR	562138	IdentifierDeclType	const float [ 2 ]		562129	0					
ANR	562139	Identifier	dummy		562129	1					
ANR	562140	PrimaryExpression	2		562129	2					
ANR	562141	AssignmentExpression	"dummy [ 2 ] = { 0 , 0 }"		562129	3		=			
ANR	562142	Identifier	dummy		562129	0					
ANR	562143	InitializerList	0		562129	1					
ANR	562144	PrimaryExpression	0		562129	0					
ANR	562145	PrimaryExpression	0		562129	1					
ANR	562146	IdentifierDeclStatement	"int i , code ;"	1377:4:47170:47181	562129	2	True				
ANR	562147	IdentifierDecl	i		562129	0					
ANR	562148	IdentifierDeclType	int		562129	0					
ANR	562149	Identifier	i		562129	1					
ANR	562150	IdentifierDecl	code		562129	1					
ANR	562151	IdentifierDeclType	int		562129	0					
ANR	562152	Identifier	code		562129	1					
ANR	562153	IfStatement	if ( a != NULL )		562129	3					
ANR	562154	Condition	a != NULL	1379:8:47192:47200	562129	0	True				
ANR	562155	EqualityExpression	a != NULL		562129	0		!=			
ANR	562156	Identifier	a		562129	0					
ANR	562157	Identifier	NULL		562129	1					
ANR	562158	ReturnStatement	"return sputs ( s , ( const byte * ) a , sizeof ( a [ 0 ] ) * half_size * 2 , & n ) ;"	1380:8:47211:47277	562129	1	True				
ANR	562159	CallExpression	"sputs ( s , ( const byte * ) a , sizeof ( a [ 0 ] ) * half_size * 2 , & n )"		562129	0					
ANR	562160	Callee	sputs		562129	0					
ANR	562161	Identifier	sputs		562129	0					
ANR	562162	ArgumentList	s		562129	1					
ANR	562163	Argument	s		562129	0					
ANR	562164	Identifier	s		562129	0					
ANR	562165	Argument	( const byte * ) a		562129	1					
ANR	562166	CastExpression	( const byte * ) a		562129	0					
ANR	562167	CastTarget	const byte *		562129	0					
ANR	562168	Identifier	a		562129	1					
ANR	562169	Argument	sizeof ( a [ 0 ] ) * half_size * 2		562129	2					
ANR	562170	MultiplicativeExpression	sizeof ( a [ 0 ] ) * half_size * 2		562129	0		*			
ANR	562171	SizeofExpression	sizeof ( a [ 0 ] )		562129	0					
ANR	562172	Sizeof	sizeof		562129	0					
ANR	562173	ArrayIndexing	a [ 0 ]		562129	1					
ANR	562174	Identifier	a		562129	0					
ANR	562175	PrimaryExpression	0		562129	1					
ANR	562176	MultiplicativeExpression	half_size * 2		562129	1		*			
ANR	562177	Identifier	half_size		562129	0					
ANR	562178	PrimaryExpression	2		562129	1					
ANR	562179	Argument	& n		562129	3					
ANR	562180	UnaryOperationExpression	& n		562129	0					
ANR	562181	UnaryOperator	&		562129	0					
ANR	562182	Identifier	n		562129	1					
ANR	562183	ForStatement	for ( i = 0 ; i < half_size ; i ++ )		562129	4					
ANR	562184	ForInit	i = 0 ;	1381:9:47288:47293	562129	0	True				
ANR	562185	AssignmentExpression	i = 0		562129	0		=			
ANR	562186	Identifier	i		562129	0					
ANR	562187	PrimaryExpression	0		562129	1					
ANR	562188	Condition	i < half_size	1381:16:47295:47307	562129	1	True				
ANR	562189	RelationalExpression	i < half_size		562129	0		<			
ANR	562190	Identifier	i		562129	0					
ANR	562191	Identifier	half_size		562129	1					
ANR	562192	PostIncDecOperationExpression	i ++	1381:31:47310:47312	562129	2	True				
ANR	562193	Identifier	i		562129	0					
ANR	562194	IncDec	++		562129	1					
ANR	562195	CompoundStatement		8:36:197:197	562129	3					
ANR	562196	ExpressionStatement	"code = sputs ( s , ( const byte * ) dummy , sizeof ( dummy ) , & n )"	1382:8:47325:47380	562129	0	True				
ANR	562197	AssignmentExpression	"code = sputs ( s , ( const byte * ) dummy , sizeof ( dummy ) , & n )"		562129	0		=			
ANR	562198	Identifier	code		562129	0					
ANR	562199	CallExpression	"sputs ( s , ( const byte * ) dummy , sizeof ( dummy ) , & n )"		562129	1					
ANR	562200	Callee	sputs		562129	0					
ANR	562201	Identifier	sputs		562129	0					
ANR	562202	ArgumentList	s		562129	1					
ANR	562203	Argument	s		562129	0					
ANR	562204	Identifier	s		562129	0					
ANR	562205	Argument	( const byte * ) dummy		562129	1					
ANR	562206	CastExpression	( const byte * ) dummy		562129	0					
ANR	562207	CastTarget	const byte *		562129	0					
ANR	562208	Identifier	dummy		562129	1					
ANR	562209	Argument	sizeof ( dummy )		562129	2					
ANR	562210	SizeofExpression	sizeof ( dummy )		562129	0					
ANR	562211	Sizeof	sizeof		562129	0					
ANR	562212	SizeofOperand	dummy		562129	1					
ANR	562213	Argument	& n		562129	3					
ANR	562214	UnaryOperationExpression	& n		562129	0					
ANR	562215	UnaryOperator	&		562129	0					
ANR	562216	Identifier	n		562129	1					
ANR	562217	IfStatement	if ( code < 0 )		562129	1					
ANR	562218	Condition	code < 0	1383:12:47394:47401	562129	0	True				
ANR	562219	RelationalExpression	code < 0		562129	0		<			
ANR	562220	Identifier	code		562129	0					
ANR	562221	PrimaryExpression	0		562129	1					
ANR	562222	ReturnStatement	return code ;	1384:12:47416:47427	562129	1	True				
ANR	562223	Identifier	code		562129	0					
ANR	562224	ReturnStatement	return 0 ;	1386:4:47439:47447	562129	5	True				
ANR	562225	PrimaryExpression	0		562129	0					
ANR	562226	ReturnType	static int		562129	1					
ANR	562227	Identifier	serialize_array		562129	2					
ANR	562228	ParameterList	"const float * a , int half_size , stream * s"		562129	3					
ANR	562229	Parameter	const float * a	1373:27:47075:47088	562129	0	True				
ANR	562230	ParameterType	const float *		562129	0					
ANR	562231	Identifier	a		562129	1					
ANR	562232	Parameter	int half_size	1373:43:47091:47103	562129	1	True				
ANR	562233	ParameterType	int		562129	0					
ANR	562234	Identifier	half_size		562129	1					
ANR	562235	Parameter	stream * s	1373:58:47106:47114	562129	2	True				
ANR	562236	ParameterType	stream *		562129	0					
ANR	562237	Identifier	s		562129	1					
ANR	562238	CFGEntryNode	ENTRY		562129		True				
ANR	562239	CFGExitNode	EXIT		562129		True				
ANR	562240	Symbol	dummy		562129						
ANR	562241	Symbol	a		562129						
ANR	562242	Symbol	half_size		562129						
ANR	562243	Symbol	s		562129						
ANR	562244	Symbol	code		562129						
ANR	562245	Symbol	NULL		562129						
ANR	562246	Symbol	& n		562129						
ANR	562247	Symbol	i		562129						
ANR	562248	Symbol	* a		562129						
ANR	562249	Symbol	n		562129						
ANR	562250	Symbol	sputs		562129						
ANR	562251	Function	gs_function_Sd_serialize	1390:0:47469:48682							
ANR	562252	FunctionDef	"gs_function_Sd_serialize (const gs_function_t * pfn , stream * s)"		562251	0					
ANR	562253	CompoundStatement		1392:0:47543:48682	562251	0					
ANR	562254	IdentifierDeclStatement	uint n ;	1393:4:47549:47555	562251	0	True				
ANR	562255	IdentifierDecl	n		562251	0					
ANR	562256	IdentifierDeclType	uint		562251	0					
ANR	562257	Identifier	n		562251	1					
ANR	562258	IdentifierDeclStatement	const gs_function_Sd_params_t * p = ( const gs_function_Sd_params_t * ) & pfn -> params ;	1394:4:47561:47642	562251	1	True				
ANR	562259	IdentifierDecl	* p = ( const gs_function_Sd_params_t * ) & pfn -> params		562251	0					
ANR	562260	IdentifierDeclType	const gs_function_Sd_params_t *		562251	0					
ANR	562261	Identifier	p		562251	1					
ANR	562262	AssignmentExpression	* p = ( const gs_function_Sd_params_t * ) & pfn -> params		562251	2		=			
ANR	562263	Identifier	p		562251	0					
ANR	562264	CastExpression	( const gs_function_Sd_params_t * ) & pfn -> params		562251	1					
ANR	562265	CastTarget	const gs_function_Sd_params_t *		562251	0					
ANR	562266	UnaryOperationExpression	& pfn -> params		562251	1					
ANR	562267	UnaryOperator	&		562251	0					
ANR	562268	PtrMemberAccess	pfn -> params		562251	1					
ANR	562269	Identifier	pfn		562251	0					
ANR	562270	Identifier	params		562251	1					
ANR	562271	IdentifierDeclStatement	gs_function_info_t info ;	1395:4:47648:47671	562251	2	True				
ANR	562272	IdentifierDecl	info		562251	0					
ANR	562273	IdentifierDeclType	gs_function_info_t		562251	0					
ANR	562274	Identifier	info		562251	1					
ANR	562275	IdentifierDeclStatement	"int code = fn_common_serialize ( pfn , s ) ;"	1396:4:47677:47715	562251	3	True				
ANR	562276	IdentifierDecl	"code = fn_common_serialize ( pfn , s )"		562251	0					
ANR	562277	IdentifierDeclType	int		562251	0					
ANR	562278	Identifier	code		562251	1					
ANR	562279	AssignmentExpression	"code = fn_common_serialize ( pfn , s )"		562251	2		=			
ANR	562280	Identifier	code		562251	0					
ANR	562281	CallExpression	"fn_common_serialize ( pfn , s )"		562251	1					
ANR	562282	Callee	fn_common_serialize		562251	0					
ANR	562283	Identifier	fn_common_serialize		562251	0					
ANR	562284	ArgumentList	pfn		562251	1					
ANR	562285	Argument	pfn		562251	0					
ANR	562286	Identifier	pfn		562251	0					
ANR	562287	Argument	s		562251	1					
ANR	562288	Identifier	s		562251	0					
ANR	562289	IdentifierDeclStatement	ulong pos ;	1397:4:47721:47730	562251	4	True				
ANR	562290	IdentifierDecl	pos		562251	0					
ANR	562291	IdentifierDeclType	ulong		562251	0					
ANR	562292	Identifier	pos		562251	1					
ANR	562293	IdentifierDeclStatement	uint count ;	1398:4:47736:47746	562251	5	True				
ANR	562294	IdentifierDecl	count		562251	0					
ANR	562295	IdentifierDeclType	uint		562251	0					
ANR	562296	Identifier	count		562251	1					
ANR	562297	IdentifierDeclStatement	byte buf [ 100 ] ;	1399:4:47752:47765	562251	6	True				
ANR	562298	IdentifierDecl	buf [ 100 ]		562251	0					
ANR	562299	IdentifierDeclType	byte [ 100 ]		562251	0					
ANR	562300	Identifier	buf		562251	1					
ANR	562301	PrimaryExpression	100		562251	2					
ANR	562302	IdentifierDeclStatement	const byte * ptr ;	1400:4:47771:47786	562251	7	True				
ANR	562303	IdentifierDecl	* ptr		562251	0					
ANR	562304	IdentifierDeclType	const byte *		562251	0					
ANR	562305	Identifier	ptr		562251	1					
ANR	562306	IfStatement	if ( code < 0 )		562251	8					
ANR	562307	Condition	code < 0	1402:8:47797:47804	562251	0	True				
ANR	562308	RelationalExpression	code < 0		562251	0		<			
ANR	562309	Identifier	code		562251	0					
ANR	562310	PrimaryExpression	0		562251	1					
ANR	562311	ReturnStatement	return code ;	1403:8:47815:47826	562251	1	True				
ANR	562312	Identifier	code		562251	0					
ANR	562313	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> Order , sizeof ( p -> Order ) , & n )"	1404:4:47832:47894	562251	9	True				
ANR	562314	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> Order , sizeof ( p -> Order ) , & n )"		562251	0		=			
ANR	562315	Identifier	code		562251	0					
ANR	562316	CallExpression	"sputs ( s , ( const byte * ) & p -> Order , sizeof ( p -> Order ) , & n )"		562251	1					
ANR	562317	Callee	sputs		562251	0					
ANR	562318	Identifier	sputs		562251	0					
ANR	562319	ArgumentList	s		562251	1					
ANR	562320	Argument	s		562251	0					
ANR	562321	Identifier	s		562251	0					
ANR	562322	Argument	( const byte * ) & p -> Order		562251	1					
ANR	562323	CastExpression	( const byte * ) & p -> Order		562251	0					
ANR	562324	CastTarget	const byte *		562251	0					
ANR	562325	UnaryOperationExpression	& p -> Order		562251	1					
ANR	562326	UnaryOperator	&		562251	0					
ANR	562327	PtrMemberAccess	p -> Order		562251	1					
ANR	562328	Identifier	p		562251	0					
ANR	562329	Identifier	Order		562251	1					
ANR	562330	Argument	sizeof ( p -> Order )		562251	2					
ANR	562331	SizeofExpression	sizeof ( p -> Order )		562251	0					
ANR	562332	Sizeof	sizeof		562251	0					
ANR	562333	PtrMemberAccess	p -> Order		562251	1					
ANR	562334	Identifier	p		562251	0					
ANR	562335	Identifier	Order		562251	1					
ANR	562336	Argument	& n		562251	3					
ANR	562337	UnaryOperationExpression	& n		562251	0					
ANR	562338	UnaryOperator	&		562251	0					
ANR	562339	Identifier	n		562251	1					
ANR	562340	IfStatement	if ( code < 0 )		562251	10					
ANR	562341	Condition	code < 0	1405:8:47904:47911	562251	0	True				
ANR	562342	RelationalExpression	code < 0		562251	0		<			
ANR	562343	Identifier	code		562251	0					
ANR	562344	PrimaryExpression	0		562251	1					
ANR	562345	ReturnStatement	return code ;	1406:8:47922:47933	562251	1	True				
ANR	562346	Identifier	code		562251	0					
ANR	562347	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> BitsPerSample , sizeof ( p -> BitsPerSample ) , & n )"	1407:4:47939:48017	562251	11	True				
ANR	562348	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> BitsPerSample , sizeof ( p -> BitsPerSample ) , & n )"		562251	0		=			
ANR	562349	Identifier	code		562251	0					
ANR	562350	CallExpression	"sputs ( s , ( const byte * ) & p -> BitsPerSample , sizeof ( p -> BitsPerSample ) , & n )"		562251	1					
ANR	562351	Callee	sputs		562251	0					
ANR	562352	Identifier	sputs		562251	0					
ANR	562353	ArgumentList	s		562251	1					
ANR	562354	Argument	s		562251	0					
ANR	562355	Identifier	s		562251	0					
ANR	562356	Argument	( const byte * ) & p -> BitsPerSample		562251	1					
ANR	562357	CastExpression	( const byte * ) & p -> BitsPerSample		562251	0					
ANR	562358	CastTarget	const byte *		562251	0					
ANR	562359	UnaryOperationExpression	& p -> BitsPerSample		562251	1					
ANR	562360	UnaryOperator	&		562251	0					
ANR	562361	PtrMemberAccess	p -> BitsPerSample		562251	1					
ANR	562362	Identifier	p		562251	0					
ANR	562363	Identifier	BitsPerSample		562251	1					
ANR	562364	Argument	sizeof ( p -> BitsPerSample )		562251	2					
ANR	562365	SizeofExpression	sizeof ( p -> BitsPerSample )		562251	0					
ANR	562366	Sizeof	sizeof		562251	0					
ANR	562367	PtrMemberAccess	p -> BitsPerSample		562251	1					
ANR	562368	Identifier	p		562251	0					
ANR	562369	Identifier	BitsPerSample		562251	1					
ANR	562370	Argument	& n		562251	3					
ANR	562371	UnaryOperationExpression	& n		562251	0					
ANR	562372	UnaryOperator	&		562251	0					
ANR	562373	Identifier	n		562251	1					
ANR	562374	IfStatement	if ( code < 0 )		562251	12					
ANR	562375	Condition	code < 0	1408:8:48027:48034	562251	0	True				
ANR	562376	RelationalExpression	code < 0		562251	0		<			
ANR	562377	Identifier	code		562251	0					
ANR	562378	PrimaryExpression	0		562251	1					
ANR	562379	ReturnStatement	return code ;	1409:8:48045:48056	562251	1	True				
ANR	562380	Identifier	code		562251	0					
ANR	562381	ExpressionStatement	"code = serialize_array ( p -> Encode , p -> m , s )"	1410:4:48062:48104	562251	13	True				
ANR	562382	AssignmentExpression	"code = serialize_array ( p -> Encode , p -> m , s )"		562251	0		=			
ANR	562383	Identifier	code		562251	0					
ANR	562384	CallExpression	"serialize_array ( p -> Encode , p -> m , s )"		562251	1					
ANR	562385	Callee	serialize_array		562251	0					
ANR	562386	Identifier	serialize_array		562251	0					
ANR	562387	ArgumentList	p -> Encode		562251	1					
ANR	562388	Argument	p -> Encode		562251	0					
ANR	562389	PtrMemberAccess	p -> Encode		562251	0					
ANR	562390	Identifier	p		562251	0					
ANR	562391	Identifier	Encode		562251	1					
ANR	562392	Argument	p -> m		562251	1					
ANR	562393	PtrMemberAccess	p -> m		562251	0					
ANR	562394	Identifier	p		562251	0					
ANR	562395	Identifier	m		562251	1					
ANR	562396	Argument	s		562251	2					
ANR	562397	Identifier	s		562251	0					
ANR	562398	IfStatement	if ( code < 0 )		562251	14					
ANR	562399	Condition	code < 0	1411:8:48114:48121	562251	0	True				
ANR	562400	RelationalExpression	code < 0		562251	0		<			
ANR	562401	Identifier	code		562251	0					
ANR	562402	PrimaryExpression	0		562251	1					
ANR	562403	ReturnStatement	return code ;	1412:8:48132:48143	562251	1	True				
ANR	562404	Identifier	code		562251	0					
ANR	562405	ExpressionStatement	"code = serialize_array ( p -> Decode , p -> n , s )"	1413:4:48149:48191	562251	15	True				
ANR	562406	AssignmentExpression	"code = serialize_array ( p -> Decode , p -> n , s )"		562251	0		=			
ANR	562407	Identifier	code		562251	0					
ANR	562408	CallExpression	"serialize_array ( p -> Decode , p -> n , s )"		562251	1					
ANR	562409	Callee	serialize_array		562251	0					
ANR	562410	Identifier	serialize_array		562251	0					
ANR	562411	ArgumentList	p -> Decode		562251	1					
ANR	562412	Argument	p -> Decode		562251	0					
ANR	562413	PtrMemberAccess	p -> Decode		562251	0					
ANR	562414	Identifier	p		562251	0					
ANR	562415	Identifier	Decode		562251	1					
ANR	562416	Argument	p -> n		562251	1					
ANR	562417	PtrMemberAccess	p -> n		562251	0					
ANR	562418	Identifier	p		562251	0					
ANR	562419	Identifier	n		562251	1					
ANR	562420	Argument	s		562251	2					
ANR	562421	Identifier	s		562251	0					
ANR	562422	IfStatement	if ( code < 0 )		562251	16					
ANR	562423	Condition	code < 0	1414:8:48201:48208	562251	0	True				
ANR	562424	RelationalExpression	code < 0		562251	0		<			
ANR	562425	Identifier	code		562251	0					
ANR	562426	PrimaryExpression	0		562251	1					
ANR	562427	ReturnStatement	return code ;	1415:8:48219:48230	562251	1	True				
ANR	562428	Identifier	code		562251	0					
ANR	562429	ExpressionStatement	"gs_function_get_info ( pfn , & info )"	1416:4:48236:48268	562251	17	True				
ANR	562430	CallExpression	"gs_function_get_info ( pfn , & info )"		562251	0					
ANR	562431	Callee	gs_function_get_info		562251	0					
ANR	562432	Identifier	gs_function_get_info		562251	0					
ANR	562433	ArgumentList	pfn		562251	1					
ANR	562434	Argument	pfn		562251	0					
ANR	562435	Identifier	pfn		562251	0					
ANR	562436	Argument	& info		562251	1					
ANR	562437	UnaryOperationExpression	& info		562251	0					
ANR	562438	UnaryOperator	&		562251	0					
ANR	562439	Identifier	info		562251	1					
ANR	562440	ExpressionStatement	"code = sputs ( s , ( const byte * ) & info . data_size , sizeof ( info . data_size ) , & n )"	1417:4:48274:48348	562251	18	True				
ANR	562441	AssignmentExpression	"code = sputs ( s , ( const byte * ) & info . data_size , sizeof ( info . data_size ) , & n )"		562251	0		=			
ANR	562442	Identifier	code		562251	0					
ANR	562443	CallExpression	"sputs ( s , ( const byte * ) & info . data_size , sizeof ( info . data_size ) , & n )"		562251	1					
ANR	562444	Callee	sputs		562251	0					
ANR	562445	Identifier	sputs		562251	0					
ANR	562446	ArgumentList	s		562251	1					
ANR	562447	Argument	s		562251	0					
ANR	562448	Identifier	s		562251	0					
ANR	562449	Argument	( const byte * ) & info . data_size		562251	1					
ANR	562450	CastExpression	( const byte * ) & info . data_size		562251	0					
ANR	562451	CastTarget	const byte *		562251	0					
ANR	562452	UnaryOperationExpression	& info . data_size		562251	1					
ANR	562453	UnaryOperator	&		562251	0					
ANR	562454	MemberAccess	info . data_size		562251	1					
ANR	562455	Identifier	info		562251	0					
ANR	562456	Identifier	data_size		562251	1					
ANR	562457	Argument	sizeof ( info . data_size )		562251	2					
ANR	562458	SizeofExpression	sizeof ( info . data_size )		562251	0					
ANR	562459	Sizeof	sizeof		562251	0					
ANR	562460	MemberAccess	info . data_size		562251	1					
ANR	562461	Identifier	info		562251	0					
ANR	562462	Identifier	data_size		562251	1					
ANR	562463	Argument	& n		562251	3					
ANR	562464	UnaryOperationExpression	& n		562251	0					
ANR	562465	UnaryOperator	&		562251	0					
ANR	562466	Identifier	n		562251	1					
ANR	562467	IfStatement	if ( code < 0 )		562251	19					
ANR	562468	Condition	code < 0	1418:8:48358:48365	562251	0	True				
ANR	562469	RelationalExpression	code < 0		562251	0		<			
ANR	562470	Identifier	code		562251	0					
ANR	562471	PrimaryExpression	0		562251	1					
ANR	562472	ReturnStatement	return code ;	1419:8:48376:48387	562251	1	True				
ANR	562473	Identifier	code		562251	0					
ANR	562474	ForStatement	for ( pos = 0 ; pos < info . data_size ; pos += count )		562251	20					
ANR	562475	ForInit	pos = 0 ;	1420:9:48398:48405	562251	0	True				
ANR	562476	AssignmentExpression	pos = 0		562251	0		=			
ANR	562477	Identifier	pos		562251	0					
ANR	562478	PrimaryExpression	0		562251	1					
ANR	562479	Condition	pos < info . data_size	1420:18:48407:48426	562251	1	True				
ANR	562480	RelationalExpression	pos < info . data_size		562251	0		<			
ANR	562481	Identifier	pos		562251	0					
ANR	562482	MemberAccess	info . data_size		562251	1					
ANR	562483	Identifier	info		562251	0					
ANR	562484	Identifier	data_size		562251	1					
ANR	562485	AssignmentExpression	pos += count	1420:40:48429:48440	562251	2	True	+=			
ANR	562486	Identifier	pos		562251	0					
ANR	562487	Identifier	count		562251	1					
ANR	562488	CompoundStatement		29:54:899:899	562251	3					
ANR	562489	ExpressionStatement	"count = min ( sizeof ( buf ) , info . data_size - pos )"	1421:8:48453:48499	562251	0	True				
ANR	562490	AssignmentExpression	"count = min ( sizeof ( buf ) , info . data_size - pos )"		562251	0		=			
ANR	562491	Identifier	count		562251	0					
ANR	562492	CallExpression	"min ( sizeof ( buf ) , info . data_size - pos )"		562251	1					
ANR	562493	Callee	min		562251	0					
ANR	562494	Identifier	min		562251	0					
ANR	562495	ArgumentList	sizeof ( buf )		562251	1					
ANR	562496	Argument	sizeof ( buf )		562251	0					
ANR	562497	SizeofExpression	sizeof ( buf )		562251	0					
ANR	562498	Sizeof	sizeof		562251	0					
ANR	562499	SizeofOperand	buf		562251	1					
ANR	562500	Argument	info . data_size - pos		562251	1					
ANR	562501	AdditiveExpression	info . data_size - pos		562251	0		-			
ANR	562502	MemberAccess	info . data_size		562251	0					
ANR	562503	Identifier	info		562251	0					
ANR	562504	Identifier	data_size		562251	1					
ANR	562505	Identifier	pos		562251	1					
ANR	562506	ExpressionStatement	"data_source_access_only ( info . DataSource , pos , count , buf , & ptr )"	1422:8:48509:48572	562251	1	True				
ANR	562507	CallExpression	"data_source_access_only ( info . DataSource , pos , count , buf , & ptr )"		562251	0					
ANR	562508	Callee	data_source_access_only		562251	0					
ANR	562509	Identifier	data_source_access_only		562251	0					
ANR	562510	ArgumentList	info . DataSource		562251	1					
ANR	562511	Argument	info . DataSource		562251	0					
ANR	562512	MemberAccess	info . DataSource		562251	0					
ANR	562513	Identifier	info		562251	0					
ANR	562514	Identifier	DataSource		562251	1					
ANR	562515	Argument	pos		562251	1					
ANR	562516	Identifier	pos		562251	0					
ANR	562517	Argument	count		562251	2					
ANR	562518	Identifier	count		562251	0					
ANR	562519	Argument	buf		562251	3					
ANR	562520	Identifier	buf		562251	0					
ANR	562521	Argument	& ptr		562251	4					
ANR	562522	UnaryOperationExpression	& ptr		562251	0					
ANR	562523	UnaryOperator	&		562251	0					
ANR	562524	Identifier	ptr		562251	1					
ANR	562525	ExpressionStatement	"code = sputs ( s , ptr , count , & n )"	1423:8:48582:48613	562251	2	True				
ANR	562526	AssignmentExpression	"code = sputs ( s , ptr , count , & n )"		562251	0		=			
ANR	562527	Identifier	code		562251	0					
ANR	562528	CallExpression	"sputs ( s , ptr , count , & n )"		562251	1					
ANR	562529	Callee	sputs		562251	0					
ANR	562530	Identifier	sputs		562251	0					
ANR	562531	ArgumentList	s		562251	1					
ANR	562532	Argument	s		562251	0					
ANR	562533	Identifier	s		562251	0					
ANR	562534	Argument	ptr		562251	1					
ANR	562535	Identifier	ptr		562251	0					
ANR	562536	Argument	count		562251	2					
ANR	562537	Identifier	count		562251	0					
ANR	562538	Argument	& n		562251	3					
ANR	562539	UnaryOperationExpression	& n		562251	0					
ANR	562540	UnaryOperator	&		562251	0					
ANR	562541	Identifier	n		562251	1					
ANR	562542	IfStatement	if ( code < 0 )		562251	3					
ANR	562543	Condition	code < 0	1424:12:48627:48634	562251	0	True				
ANR	562544	RelationalExpression	code < 0		562251	0		<			
ANR	562545	Identifier	code		562251	0					
ANR	562546	PrimaryExpression	0		562251	1					
ANR	562547	ReturnStatement	return code ;	1425:12:48649:48660	562251	1	True				
ANR	562548	Identifier	code		562251	0					
ANR	562549	ReturnStatement	return 0 ;	1427:4:48672:48680	562251	21	True				
ANR	562550	PrimaryExpression	0		562251	0					
ANR	562551	ReturnType	static int		562251	1					
ANR	562552	Identifier	gs_function_Sd_serialize		562251	2					
ANR	562553	ParameterList	"const gs_function_t * pfn , stream * s"		562251	3					
ANR	562554	Parameter	const gs_function_t * pfn	1391:25:47505:47529	562251	0	True				
ANR	562555	ParameterType	const gs_function_t *		562251	0					
ANR	562556	Identifier	pfn		562251	1					
ANR	562557	Parameter	stream * s	1391:52:47532:47540	562251	1	True				
ANR	562558	ParameterType	stream *		562251	0					
ANR	562559	Identifier	s		562251	1					
ANR	562560	CFGEntryNode	ENTRY		562251		True				
ANR	562561	CFGExitNode	EXIT		562251		True				
ANR	562562	Symbol	code		562251						
ANR	562563	Symbol	info . data_size		562251						
ANR	562564	Symbol	& p -> Order		562251						
ANR	562565	Symbol	& p -> BitsPerSample		562251						
ANR	562566	Symbol	min		562251						
ANR	562567	Symbol	& ptr		562251						
ANR	562568	Symbol	info . DataSource		562251						
ANR	562569	Symbol	pos		562251						
ANR	562570	Symbol	p -> n		562251						
ANR	562571	Symbol	p -> m		562251						
ANR	562572	Symbol	p -> Encode		562251						
ANR	562573	Symbol	p -> BitsPerSample		562251						
ANR	562574	Symbol	fn_common_serialize		562251						
ANR	562575	Symbol	info		562251						
ANR	562576	Symbol	p -> Order		562251						
ANR	562577	Symbol	& info		562251						
ANR	562578	Symbol	& pfn -> params		562251						
ANR	562579	Symbol	count		562251						
ANR	562580	Symbol	n		562251						
ANR	562581	Symbol	ptr		562251						
ANR	562582	Symbol	p		562251						
ANR	562583	Symbol	buf		562251						
ANR	562584	Symbol	& info . data_size		562251						
ANR	562585	Symbol	s		562251						
ANR	562586	Symbol	serialize_array		562251						
ANR	562587	Symbol	& n		562251						
ANR	562588	Symbol	p -> Decode		562251						
ANR	562589	Symbol	pfn		562251						
ANR	562590	Symbol	* p		562251						
ANR	562591	Symbol	sputs		562251						
ANR	562592	Function	gs_function_Sd_init	1431:0:48735:52321							
ANR	562593	FunctionDef	"gs_function_Sd_init (gs_function_t * * ppfn , const gs_function_Sd_params_t * params , gs_memory_t * mem)"		562592	0					
ANR	562594	CompoundStatement		1434:0:48859:52321	562592	0					
ANR	562595	Statement	static	1435:4:48865:48870	562592	0	True				
ANR	562596	Statement	const	1435:11:48872:48876	562592	1	True				
ANR	562597	Statement	gs_function_head_t	1435:17:48878:48895	562592	2	True				
ANR	562598	Statement	function_Sd_head	1435:36:48897:48912	562592	3	True				
ANR	562599	Statement	=	1435:53:48914:48914	562592	4	True				
ANR	562600	CompoundStatement		2:55:56:56	562592	5					
ANR	562601	Statement	function_type_Sampled	1436:8:48926:48946	562592	0	True				
ANR	562602	Statement	","	1436:29:48947:48947	562592	1	True				
ANR	562603	CompoundStatement		4:8:97:97	562592	2					
ANR	562604	Statement	(	1438:12:48971:48971	562592	0	True				
ANR	562605	Statement	fn_evaluate_proc_t	1438:13:48972:48989	562592	1	True				
ANR	562606	Statement	)	1438:31:48990:48990	562592	2	True				
ANR	562607	Statement	fn_Sd_evaluate	1438:33:48992:49005	562592	3	True				
ANR	562608	Statement	","	1438:47:49006:49006	562592	4	True				
ANR	562609	Statement	(	1439:12:49020:49020	562592	5	True				
ANR	562610	Statement	fn_is_monotonic_proc_t	1439:13:49021:49042	562592	6	True				
ANR	562611	Statement	)	1439:35:49043:49043	562592	7	True				
ANR	562612	Statement	fn_Sd_is_monotonic	1439:37:49045:49062	562592	8	True				
ANR	562613	Statement	","	1439:55:49063:49063	562592	9	True				
ANR	562614	Statement	(	1440:12:49077:49077	562592	10	True				
ANR	562615	Statement	fn_get_info_proc_t	1440:13:49078:49095	562592	11	True				
ANR	562616	Statement	)	1440:31:49096:49096	562592	12	True				
ANR	562617	Statement	fn_Sd_get_info	1440:33:49098:49111	562592	13	True				
ANR	562618	Statement	","	1440:47:49112:49112	562592	14	True				
ANR	562619	Statement	(	1441:12:49126:49126	562592	15	True				
ANR	562620	Statement	fn_get_params_proc_t	1441:13:49127:49146	562592	16	True				
ANR	562621	Statement	)	1441:33:49147:49147	562592	17	True				
ANR	562622	Statement	fn_Sd_get_params	1441:35:49149:49164	562592	18	True				
ANR	562623	Statement	","	1441:51:49165:49165	562592	19	True				
ANR	562624	Statement	(	1442:12:49179:49179	562592	20	True				
ANR	562625	Statement	fn_make_scaled_proc_t	1442:13:49180:49200	562592	21	True				
ANR	562626	Statement	)	1442:34:49201:49201	562592	22	True				
ANR	562627	Statement	fn_Sd_make_scaled	1442:36:49203:49219	562592	23	True				
ANR	562628	Statement	","	1442:53:49220:49220	562592	24	True				
ANR	562629	Statement	(	1443:12:49234:49234	562592	25	True				
ANR	562630	Statement	fn_free_params_proc_t	1443:13:49235:49255	562592	26	True				
ANR	562631	Statement	)	1443:34:49256:49256	562592	27	True				
ANR	562632	Statement	gs_function_Sd_free_params	1443:36:49258:49283	562592	28	True				
ANR	562633	Statement	","	1443:62:49284:49284	562592	29	True				
ANR	562634	Statement	fn_common_free	1444:12:49298:49311	562592	30	True				
ANR	562635	Statement	","	1444:26:49312:49312	562592	31	True				
ANR	562636	Statement	(	1445:12:49326:49326	562592	32	True				
ANR	562637	Statement	fn_serialize_proc_t	1445:13:49327:49345	562592	33	True				
ANR	562638	Statement	)	1445:32:49346:49346	562592	34	True				
ANR	562639	Statement	gs_function_Sd_serialize	1445:34:49348:49371	562592	35	True				
ANR	562640	Statement	","	1445:58:49372:49372	562592	36	True				
ANR	562641	ExpressionStatement		1447:5:49389:49389	562592	6	True				
ANR	562642	IdentifierDeclStatement	int code ;	1448:4:49395:49403	562592	7	True				
ANR	562643	IdentifierDecl	code		562592	0					
ANR	562644	IdentifierDeclType	int		562592	0					
ANR	562645	Identifier	code		562592	1					
ANR	562646	IdentifierDeclStatement	int i ;	1449:4:49409:49414	562592	8	True				
ANR	562647	IdentifierDecl	i		562592	0					
ANR	562648	IdentifierDeclType	int		562592	0					
ANR	562649	Identifier	i		562592	1					
ANR	562650	ExpressionStatement	* ppfn = 0	1451:4:49421:49430	562592	9	True				
ANR	562651	AssignmentExpression	* ppfn = 0		562592	0		=			
ANR	562652	UnaryOperationExpression	* ppfn		562592	0					
ANR	562653	UnaryOperator	*		562592	0					
ANR	562654	Identifier	ppfn		562592	1					
ANR	562655	PrimaryExpression	0		562592	1					
ANR	562656	ExpressionStatement	"code = fn_check_mnDR ( ( const gs_function_params_t * ) params , params -> m , params -> n )"	1452:4:49461:49566	562592	10	True				
ANR	562657	AssignmentExpression	"code = fn_check_mnDR ( ( const gs_function_params_t * ) params , params -> m , params -> n )"		562592	0		=			
ANR	562658	Identifier	code		562592	0					
ANR	562659	CallExpression	"fn_check_mnDR ( ( const gs_function_params_t * ) params , params -> m , params -> n )"		562592	1					
ANR	562660	Callee	fn_check_mnDR		562592	0					
ANR	562661	Identifier	fn_check_mnDR		562592	0					
ANR	562662	ArgumentList	( const gs_function_params_t * ) params		562592	1					
ANR	562663	Argument	( const gs_function_params_t * ) params		562592	0					
ANR	562664	CastExpression	( const gs_function_params_t * ) params		562592	0					
ANR	562665	CastTarget	const gs_function_params_t *		562592	0					
ANR	562666	Identifier	params		562592	1					
ANR	562667	Argument	params -> m		562592	1					
ANR	562668	PtrMemberAccess	params -> m		562592	0					
ANR	562669	Identifier	params		562592	0					
ANR	562670	Identifier	m		562592	1					
ANR	562671	Argument	params -> n		562592	2					
ANR	562672	PtrMemberAccess	params -> n		562592	0					
ANR	562673	Identifier	params		562592	0					
ANR	562674	Identifier	n		562592	1					
ANR	562675	IfStatement	if ( code < 0 )		562592	11					
ANR	562676	Condition	code < 0	1454:8:49576:49583	562592	0	True				
ANR	562677	RelationalExpression	code < 0		562592	0		<			
ANR	562678	Identifier	code		562592	0					
ANR	562679	PrimaryExpression	0		562592	1					
ANR	562680	ReturnStatement	return code ;	1455:8:49594:49605	562592	1	True				
ANR	562681	Identifier	code		562592	0					
ANR	562682	IfStatement	if ( params -> m > max_Sd_m )		562592	12					
ANR	562683	Condition	params -> m > max_Sd_m	1456:8:49615:49634	562592	0	True				
ANR	562684	RelationalExpression	params -> m > max_Sd_m		562592	0		>			
ANR	562685	PtrMemberAccess	params -> m		562592	0					
ANR	562686	Identifier	params		562592	0					
ANR	562687	Identifier	m		562592	1					
ANR	562688	Identifier	max_Sd_m		562592	1					
ANR	562689	ExpressionStatement	return_error ( gs_error_limitcheck )	1457:8:49645:49678	562592	1	True				
ANR	562690	CallExpression	return_error ( gs_error_limitcheck )		562592	0					
ANR	562691	Callee	return_error		562592	0					
ANR	562692	Identifier	return_error		562592	0					
ANR	562693	ArgumentList	gs_error_limitcheck		562592	1					
ANR	562694	Argument	gs_error_limitcheck		562592	0					
ANR	562695	Identifier	gs_error_limitcheck		562592	0					
ANR	562696	SwitchStatement	switch ( params -> Order )		562592	13					
ANR	562697	Condition	params -> Order	1458:12:49692:49704	562592	0	True				
ANR	562698	PtrMemberAccess	params -> Order		562592	0					
ANR	562699	Identifier	params		562592	0					
ANR	562700	Identifier	Order		562592	1					
ANR	562701	CompoundStatement		25:27:847:847	562592	1					
ANR	562702	Label	case 0 :	1459:8:49717:49723	562592	0	True				
ANR	562703	Label	case 1 :	1460:8:49752:49758	562592	1	True				
ANR	562704	Label	case 3 :	1461:8:49768:49774	562592	2	True				
ANR	562705	BreakStatement	break ;	1462:12:49788:49793	562592	3	True				
ANR	562706	Label	default :	1463:8:49803:49810	562592	4	True				
ANR	562707	Identifier	default		562592	0					
ANR	562708	ExpressionStatement	return_error ( gs_error_rangecheck )	1464:12:49824:49857	562592	5	True				
ANR	562709	CallExpression	return_error ( gs_error_rangecheck )		562592	0					
ANR	562710	Callee	return_error		562592	0					
ANR	562711	Identifier	return_error		562592	0					
ANR	562712	ArgumentList	gs_error_rangecheck		562592	1					
ANR	562713	Argument	gs_error_rangecheck		562592	0					
ANR	562714	Identifier	gs_error_rangecheck		562592	0					
ANR	562715	SwitchStatement	switch ( params -> BitsPerSample )		562592	14					
ANR	562716	Condition	params -> BitsPerSample	1466:12:49877:49897	562592	0	True				
ANR	562717	PtrMemberAccess	params -> BitsPerSample		562592	0					
ANR	562718	Identifier	params		562592	0					
ANR	562719	Identifier	BitsPerSample		562592	1					
ANR	562720	CompoundStatement		33:35:1040:1040	562592	1					
ANR	562721	Label	case 1 :	1467:8:49910:49916	562592	0	True				
ANR	562722	Label	case 2 :	1468:8:49926:49932	562592	1	True				
ANR	562723	Label	case 4 :	1469:8:49942:49948	562592	2	True				
ANR	562724	Label	case 8 :	1470:8:49958:49964	562592	3	True				
ANR	562725	Label	case 12 :	1471:8:49974:49981	562592	4	True				
ANR	562726	Label	case 16 :	1472:8:49991:49998	562592	5	True				
ANR	562727	Label	case 24 :	1473:8:50008:50015	562592	6	True				
ANR	562728	Label	case 32 :	1474:8:50025:50032	562592	7	True				
ANR	562729	BreakStatement	break ;	1475:12:50046:50051	562592	8	True				
ANR	562730	Label	default :	1476:8:50061:50068	562592	9	True				
ANR	562731	Identifier	default		562592	0					
ANR	562732	ExpressionStatement	return_error ( gs_error_rangecheck )	1477:12:50082:50115	562592	10	True				
ANR	562733	CallExpression	return_error ( gs_error_rangecheck )		562592	0					
ANR	562734	Callee	return_error		562592	0					
ANR	562735	Identifier	return_error		562592	0					
ANR	562736	ArgumentList	gs_error_rangecheck		562592	1					
ANR	562737	Argument	gs_error_rangecheck		562592	0					
ANR	562738	Identifier	gs_error_rangecheck		562592	0					
ANR	562739	ForStatement	for ( i = 0 ; i < params -> m ; ++ i )		562592	15					
ANR	562740	ForInit	i = 0 ;	1479:9:50132:50137	562592	0	True				
ANR	562741	AssignmentExpression	i = 0		562592	0		=			
ANR	562742	Identifier	i		562592	0					
ANR	562743	PrimaryExpression	0		562592	1					
ANR	562744	Condition	i < params -> m	1479:16:50139:50151	562592	1	True				
ANR	562745	RelationalExpression	i < params -> m		562592	0		<			
ANR	562746	Identifier	i		562592	0					
ANR	562747	PtrMemberAccess	params -> m		562592	1					
ANR	562748	Identifier	params		562592	0					
ANR	562749	Identifier	m		562592	1					
ANR	562750	UnaryExpression	++ i	1479:31:50154:50156	562592	2	True				
ANR	562751	IncDec	++		562592	0					
ANR	562752	Identifier	i		562592	1					
ANR	562753	IfStatement	if ( params -> Size [ i ] <= 0 )		562592	3					
ANR	562754	Condition	params -> Size [ i ] <= 0	1480:12:50171:50190	562592	0	True				
ANR	562755	RelationalExpression	params -> Size [ i ] <= 0		562592	0		<=			
ANR	562756	ArrayIndexing	params -> Size [ i ]		562592	0					
ANR	562757	PtrMemberAccess	params -> Size		562592	0					
ANR	562758	Identifier	params		562592	0					
ANR	562759	Identifier	Size		562592	1					
ANR	562760	Identifier	i		562592	1					
ANR	562761	PrimaryExpression	0		562592	1					
ANR	562762	ExpressionStatement	return_error ( gs_error_rangecheck )	1481:12:50205:50238	562592	1	True				
ANR	562763	CallExpression	return_error ( gs_error_rangecheck )		562592	0					
ANR	562764	Callee	return_error		562592	0					
ANR	562765	Identifier	return_error		562592	0					
ANR	562766	ArgumentList	gs_error_rangecheck		562592	1					
ANR	562767	Argument	gs_error_rangecheck		562592	0					
ANR	562768	Identifier	gs_error_rangecheck		562592	0					
ANR	562769	CompoundStatement		53:8:1546:1571	562592	16					
ANR	562770	IdentifierDeclStatement	"gs_function_Sd_t * pfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""gs_function_Sd_init"" ) ;"	1483:8:50254:50396	562592	0	True				
ANR	562771	IdentifierDecl	"* pfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""gs_function_Sd_init"" )"		562592	0					
ANR	562772	IdentifierDeclType	gs_function_Sd_t *		562592	0					
ANR	562773	Identifier	pfn		562592	1					
ANR	562774	AssignmentExpression	"* pfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""gs_function_Sd_init"" )"		562592	2		=			
ANR	562775	Identifier	pfn		562592	0					
ANR	562776	CallExpression	"gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""gs_function_Sd_init"" )"		562592	1					
ANR	562777	Callee	gs_alloc_struct		562592	0					
ANR	562778	Identifier	gs_alloc_struct		562592	0					
ANR	562779	ArgumentList	mem		562592	1					
ANR	562780	Argument	mem		562592	0					
ANR	562781	Identifier	mem		562592	0					
ANR	562782	Argument	gs_function_Sd_t		562592	1					
ANR	562783	Identifier	gs_function_Sd_t		562592	0					
ANR	562784	Argument	& st_function_Sd		562592	2					
ANR	562785	UnaryOperationExpression	& st_function_Sd		562592	0					
ANR	562786	UnaryOperator	&		562592	0					
ANR	562787	Identifier	st_function_Sd		562592	1					
ANR	562788	Argument	"""gs_function_Sd_init"""		562592	3					
ANR	562789	PrimaryExpression	"""gs_function_Sd_init"""		562592	0					
ANR	562790	IdentifierDeclStatement	"int bps , sa , ss , i , order ;"	1486:8:50406:50431	562592	1	True				
ANR	562791	IdentifierDecl	bps		562592	0					
ANR	562792	IdentifierDeclType	int		562592	0					
ANR	562793	Identifier	bps		562592	1					
ANR	562794	IdentifierDecl	sa		562592	1					
ANR	562795	IdentifierDeclType	int		562592	0					
ANR	562796	Identifier	sa		562592	1					
ANR	562797	IdentifierDecl	ss		562592	2					
ANR	562798	IdentifierDeclType	int		562592	0					
ANR	562799	Identifier	ss		562592	1					
ANR	562800	IdentifierDecl	i		562592	3					
ANR	562801	IdentifierDeclType	int		562592	0					
ANR	562802	Identifier	i		562592	1					
ANR	562803	IdentifierDecl	order		562592	4					
ANR	562804	IdentifierDeclType	int		562592	0					
ANR	562805	Identifier	order		562592	1					
ANR	562806	IfStatement	if ( pfn == 0 )		562592	2					
ANR	562807	Condition	pfn == 0	1488:12:50446:50453	562592	0	True				
ANR	562808	EqualityExpression	pfn == 0		562592	0		==			
ANR	562809	Identifier	pfn		562592	0					
ANR	562810	PrimaryExpression	0		562592	1					
ANR	562811	ExpressionStatement	return_error ( gs_error_VMerror )	1489:12:50468:50498	562592	1	True				
ANR	562812	CallExpression	return_error ( gs_error_VMerror )		562592	0					
ANR	562813	Callee	return_error		562592	0					
ANR	562814	Identifier	return_error		562592	0					
ANR	562815	ArgumentList	gs_error_VMerror		562592	1					
ANR	562816	Argument	gs_error_VMerror		562592	0					
ANR	562817	Identifier	gs_error_VMerror		562592	0					
ANR	562818	ExpressionStatement	pfn -> params = * params	1490:8:50508:50529	562592	3	True				
ANR	562819	AssignmentExpression	pfn -> params = * params		562592	0		=			
ANR	562820	PtrMemberAccess	pfn -> params		562592	0					
ANR	562821	Identifier	pfn		562592	0					
ANR	562822	Identifier	params		562592	1					
ANR	562823	UnaryOperationExpression	* params		562592	1					
ANR	562824	UnaryOperator	*		562592	0					
ANR	562825	Identifier	params		562592	1					
ANR	562826	IfStatement	if ( params -> Order == 0 )		562592	4					
ANR	562827	Condition	params -> Order == 0	1491:12:50543:50560	562592	0	True				
ANR	562828	EqualityExpression	params -> Order == 0		562592	0		==			
ANR	562829	PtrMemberAccess	params -> Order		562592	0					
ANR	562830	Identifier	params		562592	0					
ANR	562831	Identifier	Order		562592	1					
ANR	562832	PrimaryExpression	0		562592	1					
ANR	562833	ExpressionStatement	pfn -> params . Order = 1	1492:12:50575:50596	562592	1	True				
ANR	562834	AssignmentExpression	pfn -> params . Order = 1		562592	0		=			
ANR	562835	MemberAccess	pfn -> params . Order		562592	0					
ANR	562836	PtrMemberAccess	pfn -> params		562592	0					
ANR	562837	Identifier	pfn		562592	0					
ANR	562838	Identifier	params		562592	1					
ANR	562839	Identifier	Order		562592	1					
ANR	562840	PrimaryExpression	1		562592	1					
ANR	562841	ExpressionStatement	pfn -> params . pole = NULL	1493:8:50620:50643	562592	5	True				
ANR	562842	AssignmentExpression	pfn -> params . pole = NULL		562592	0		=			
ANR	562843	MemberAccess	pfn -> params . pole		562592	0					
ANR	562844	PtrMemberAccess	pfn -> params		562592	0					
ANR	562845	Identifier	pfn		562592	0					
ANR	562846	Identifier	params		562592	1					
ANR	562847	Identifier	pole		562592	1					
ANR	562848	Identifier	NULL		562592	1					
ANR	562849	ExpressionStatement	pfn -> params . array_step = NULL	1494:8:50653:50682	562592	6	True				
ANR	562850	AssignmentExpression	pfn -> params . array_step = NULL		562592	0		=			
ANR	562851	MemberAccess	pfn -> params . array_step		562592	0					
ANR	562852	PtrMemberAccess	pfn -> params		562592	0					
ANR	562853	Identifier	pfn		562592	0					
ANR	562854	Identifier	params		562592	1					
ANR	562855	Identifier	array_step		562592	1					
ANR	562856	Identifier	NULL		562592	1					
ANR	562857	ExpressionStatement	pfn -> params . stream_step = NULL	1495:8:50692:50722	562592	7	True				
ANR	562858	AssignmentExpression	pfn -> params . stream_step = NULL		562592	0		=			
ANR	562859	MemberAccess	pfn -> params . stream_step		562592	0					
ANR	562860	PtrMemberAccess	pfn -> params		562592	0					
ANR	562861	Identifier	pfn		562592	0					
ANR	562862	Identifier	params		562592	1					
ANR	562863	Identifier	stream_step		562592	1					
ANR	562864	Identifier	NULL		562592	1					
ANR	562865	ExpressionStatement	pfn -> head = function_Sd_head	1496:8:50732:50760	562592	8	True				
ANR	562866	AssignmentExpression	pfn -> head = function_Sd_head		562592	0		=			
ANR	562867	PtrMemberAccess	pfn -> head		562592	0					
ANR	562868	Identifier	pfn		562592	0					
ANR	562869	Identifier	head		562592	1					
ANR	562870	Identifier	function_Sd_head		562592	1					
ANR	562871	ExpressionStatement	pfn -> params . array_size = 0	1497:8:50770:50796	562592	9	True				
ANR	562872	AssignmentExpression	pfn -> params . array_size = 0		562592	0		=			
ANR	562873	MemberAccess	pfn -> params . array_size		562592	0					
ANR	562874	PtrMemberAccess	pfn -> params		562592	0					
ANR	562875	Identifier	pfn		562592	0					
ANR	562876	Identifier	params		562592	1					
ANR	562877	Identifier	array_size		562592	1					
ANR	562878	PrimaryExpression	0		562592	1					
ANR	562879	IfStatement	if ( pfn -> params . m == 1 && pfn -> params . Order == 1 && pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg )		562592	10					
ANR	562880	Condition	pfn -> params . m == 1 && pfn -> params . Order == 1 && pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg	1498:12:50810:50906	562592	0	True				
ANR	562881	AndExpression	pfn -> params . m == 1 && pfn -> params . Order == 1 && pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg		562592	0		&&			
ANR	562882	EqualityExpression	pfn -> params . m == 1		562592	0		==			
ANR	562883	MemberAccess	pfn -> params . m		562592	0					
ANR	562884	PtrMemberAccess	pfn -> params		562592	0					
ANR	562885	Identifier	pfn		562592	0					
ANR	562886	Identifier	params		562592	1					
ANR	562887	Identifier	m		562592	1					
ANR	562888	PrimaryExpression	1		562592	1					
ANR	562889	AndExpression	pfn -> params . Order == 1 && pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg		562592	1		&&			
ANR	562890	EqualityExpression	pfn -> params . Order == 1		562592	0		==			
ANR	562891	MemberAccess	pfn -> params . Order		562592	0					
ANR	562892	PtrMemberAccess	pfn -> params		562592	0					
ANR	562893	Identifier	pfn		562592	0					
ANR	562894	Identifier	params		562592	1					
ANR	562895	Identifier	Order		562592	1					
ANR	562896	PrimaryExpression	1		562592	1					
ANR	562897	AndExpression	pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg		562592	1		&&			
ANR	562898	RelationalExpression	pfn -> params . n <= MAX_FAST_COMPS		562592	0		<=			
ANR	562899	MemberAccess	pfn -> params . n		562592	0					
ANR	562900	PtrMemberAccess	pfn -> params		562592	0					
ANR	562901	Identifier	pfn		562592	0					
ANR	562902	Identifier	params		562592	1					
ANR	562903	Identifier	n		562592	1					
ANR	562904	Identifier	MAX_FAST_COMPS		562592	1					
ANR	562905	UnaryOperationExpression	! DEBUG_Sd_1arg		562592	1					
ANR	562906	UnaryOperator	!		562592	0					
ANR	562907	Identifier	DEBUG_Sd_1arg		562592	1					
ANR	562908	CompoundStatement		65:111:2049:2049	562592	1					
ANR	562909	ElseStatement	else		562592	0					
ANR	562910	CompoundStatement		67:15:2148:2148	562592	0					
ANR	562911	ExpressionStatement	"pfn -> params . array_step = ( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"	1501:12:51022:51160	562592	0	True				
ANR	562912	AssignmentExpression	"pfn -> params . array_step = ( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		562592	0		=			
ANR	562913	MemberAccess	pfn -> params . array_step		562592	0					
ANR	562914	PtrMemberAccess	pfn -> params		562592	0					
ANR	562915	Identifier	pfn		562592	0					
ANR	562916	Identifier	params		562592	1					
ANR	562917	Identifier	array_step		562592	1					
ANR	562918	CastExpression	"( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		562592	1					
ANR	562919	CastTarget	int *		562592	0					
ANR	562920	CallExpression	"gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		562592	1					
ANR	562921	Callee	gs_alloc_byte_array		562592	0					
ANR	562922	Identifier	gs_alloc_byte_array		562592	0					
ANR	562923	ArgumentList	mem		562592	1					
ANR	562924	Argument	mem		562592	0					
ANR	562925	Identifier	mem		562592	0					
ANR	562926	Argument	max_Sd_m		562592	1					
ANR	562927	Identifier	max_Sd_m		562592	0					
ANR	562928	Argument	sizeof ( int )		562592	2					
ANR	562929	SizeofExpression	sizeof ( int )		562592	0					
ANR	562930	Sizeof	sizeof		562592	0					
ANR	562931	SizeofOperand	int		562592	1					
ANR	562932	Argument	"""gs_function_Sd_init"""		562592	3					
ANR	562933	PrimaryExpression	"""gs_function_Sd_init"""		562592	0					
ANR	562934	ExpressionStatement	"pfn -> params . stream_step = ( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"	1503:12:51174:51313	562592	1	True				
ANR	562935	AssignmentExpression	"pfn -> params . stream_step = ( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		562592	0		=			
ANR	562936	MemberAccess	pfn -> params . stream_step		562592	0					
ANR	562937	PtrMemberAccess	pfn -> params		562592	0					
ANR	562938	Identifier	pfn		562592	0					
ANR	562939	Identifier	params		562592	1					
ANR	562940	Identifier	stream_step		562592	1					
ANR	562941	CastExpression	"( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		562592	1					
ANR	562942	CastTarget	int *		562592	0					
ANR	562943	CallExpression	"gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		562592	1					
ANR	562944	Callee	gs_alloc_byte_array		562592	0					
ANR	562945	Identifier	gs_alloc_byte_array		562592	0					
ANR	562946	ArgumentList	mem		562592	1					
ANR	562947	Argument	mem		562592	0					
ANR	562948	Identifier	mem		562592	0					
ANR	562949	Argument	max_Sd_m		562592	1					
ANR	562950	Identifier	max_Sd_m		562592	0					
ANR	562951	Argument	sizeof ( int )		562592	2					
ANR	562952	SizeofExpression	sizeof ( int )		562592	0					
ANR	562953	Sizeof	sizeof		562592	0					
ANR	562954	SizeofOperand	int		562592	1					
ANR	562955	Argument	"""gs_function_Sd_init"""		562592	3					
ANR	562956	PrimaryExpression	"""gs_function_Sd_init"""		562592	0					
ANR	562957	IfStatement	if ( pfn -> params . array_step == NULL || pfn -> params . stream_step == NULL )		562592	2					
ANR	562958	Condition	pfn -> params . array_step == NULL || pfn -> params . stream_step == NULL	1505:16:51331:51395	562592	0	True				
ANR	562959	OrExpression	pfn -> params . array_step == NULL || pfn -> params . stream_step == NULL		562592	0		||			
ANR	562960	EqualityExpression	pfn -> params . array_step == NULL		562592	0		==			
ANR	562961	MemberAccess	pfn -> params . array_step		562592	0					
ANR	562962	PtrMemberAccess	pfn -> params		562592	0					
ANR	562963	Identifier	pfn		562592	0					
ANR	562964	Identifier	params		562592	1					
ANR	562965	Identifier	array_step		562592	1					
ANR	562966	Identifier	NULL		562592	1					
ANR	562967	EqualityExpression	pfn -> params . stream_step == NULL		562592	1		==			
ANR	562968	MemberAccess	pfn -> params . stream_step		562592	0					
ANR	562969	PtrMemberAccess	pfn -> params		562592	0					
ANR	562970	Identifier	pfn		562592	0					
ANR	562971	Identifier	params		562592	1					
ANR	562972	Identifier	stream_step		562592	1					
ANR	562973	Identifier	NULL		562592	1					
ANR	562974	ExpressionStatement	return_error ( gs_error_VMerror )	1506:16:51414:51444	562592	1	True				
ANR	562975	CallExpression	return_error ( gs_error_VMerror )		562592	0					
ANR	562976	Callee	return_error		562592	0					
ANR	562977	Identifier	return_error		562592	0					
ANR	562978	ArgumentList	gs_error_VMerror		562592	1					
ANR	562979	Argument	gs_error_VMerror		562592	0					
ANR	562980	Identifier	gs_error_VMerror		562592	0					
ANR	562981	ExpressionStatement	bps = pfn -> params . BitsPerSample	1507:12:51458:51489	562592	3	True				
ANR	562982	AssignmentExpression	bps = pfn -> params . BitsPerSample		562592	0		=			
ANR	562983	Identifier	bps		562592	0					
ANR	562984	MemberAccess	pfn -> params . BitsPerSample		562592	1					
ANR	562985	PtrMemberAccess	pfn -> params		562592	0					
ANR	562986	Identifier	pfn		562592	0					
ANR	562987	Identifier	params		562592	1					
ANR	562988	Identifier	BitsPerSample		562592	1					
ANR	562989	ExpressionStatement	sa = pfn -> params . n	1508:12:51503:51521	562592	4	True				
ANR	562990	AssignmentExpression	sa = pfn -> params . n		562592	0		=			
ANR	562991	Identifier	sa		562592	0					
ANR	562992	MemberAccess	pfn -> params . n		562592	1					
ANR	562993	PtrMemberAccess	pfn -> params		562592	0					
ANR	562994	Identifier	pfn		562592	0					
ANR	562995	Identifier	params		562592	1					
ANR	562996	Identifier	n		562592	1					
ANR	562997	ExpressionStatement	ss = pfn -> params . n * bps	1509:12:51535:51559	562592	5	True				
ANR	562998	AssignmentExpression	ss = pfn -> params . n * bps		562592	0		=			
ANR	562999	Identifier	ss		562592	0					
ANR	563000	MultiplicativeExpression	pfn -> params . n * bps		562592	1		*			
ANR	563001	MemberAccess	pfn -> params . n		562592	0					
ANR	563002	PtrMemberAccess	pfn -> params		562592	0					
ANR	563003	Identifier	pfn		562592	0					
ANR	563004	Identifier	params		562592	1					
ANR	563005	Identifier	n		562592	1					
ANR	563006	Identifier	bps		562592	1					
ANR	563007	ExpressionStatement	order = pfn -> params . Order	1510:12:51573:51598	562592	6	True				
ANR	563008	AssignmentExpression	order = pfn -> params . Order		562592	0		=			
ANR	563009	Identifier	order		562592	0					
ANR	563010	MemberAccess	pfn -> params . Order		562592	1					
ANR	563011	PtrMemberAccess	pfn -> params		562592	0					
ANR	563012	Identifier	pfn		562592	0					
ANR	563013	Identifier	params		562592	1					
ANR	563014	Identifier	Order		562592	1					
ANR	563015	ForStatement	for ( i = 0 ; i < pfn -> params . m ; i ++ )		562592	7					
ANR	563016	ForInit	i = 0 ;	1511:17:51617:51622	562592	0	True				
ANR	563017	AssignmentExpression	i = 0		562592	0		=			
ANR	563018	Identifier	i		562592	0					
ANR	563019	PrimaryExpression	0		562592	1					
ANR	563020	Condition	i < pfn -> params . m	1511:24:51624:51640	562592	1	True				
ANR	563021	RelationalExpression	i < pfn -> params . m		562592	0		<			
ANR	563022	Identifier	i		562592	0					
ANR	563023	MemberAccess	pfn -> params . m		562592	1					
ANR	563024	PtrMemberAccess	pfn -> params		562592	0					
ANR	563025	Identifier	pfn		562592	0					
ANR	563026	Identifier	params		562592	1					
ANR	563027	Identifier	m		562592	1					
ANR	563028	PostIncDecOperationExpression	i ++	1511:43:51643:51645	562592	2	True				
ANR	563029	Identifier	i		562592	0					
ANR	563030	IncDec	++		562592	1					
ANR	563031	CompoundStatement		78:48:2788:2788	562592	3					
ANR	563032	ExpressionStatement	pfn -> params . array_step [ i ] = sa * order	1512:16:51666:51704	562592	0	True				
ANR	563033	AssignmentExpression	pfn -> params . array_step [ i ] = sa * order		562592	0		=			
ANR	563034	ArrayIndexing	pfn -> params . array_step [ i ]		562592	0					
ANR	563035	MemberAccess	pfn -> params . array_step		562592	0					
ANR	563036	PtrMemberAccess	pfn -> params		562592	0					
ANR	563037	Identifier	pfn		562592	0					
ANR	563038	Identifier	params		562592	1					
ANR	563039	Identifier	array_step		562592	1					
ANR	563040	Identifier	i		562592	1					
ANR	563041	MultiplicativeExpression	sa * order		562592	1		*			
ANR	563042	Identifier	sa		562592	0					
ANR	563043	Identifier	order		562592	1					
ANR	563044	ExpressionStatement	sa = ( pfn -> params . Size [ i ] * order - ( order - 1 ) ) * sa	1513:16:51722:51775	562592	1	True				
ANR	563045	AssignmentExpression	sa = ( pfn -> params . Size [ i ] * order - ( order - 1 ) ) * sa		562592	0		=			
ANR	563046	Identifier	sa		562592	0					
ANR	563047	MultiplicativeExpression	( pfn -> params . Size [ i ] * order - ( order - 1 ) ) * sa		562592	1		*			
ANR	563048	AdditiveExpression	pfn -> params . Size [ i ] * order - ( order - 1 )		562592	0		-			
ANR	563049	MultiplicativeExpression	pfn -> params . Size [ i ] * order		562592	0		*			
ANR	563050	ArrayIndexing	pfn -> params . Size [ i ]		562592	0					
ANR	563051	MemberAccess	pfn -> params . Size		562592	0					
ANR	563052	PtrMemberAccess	pfn -> params		562592	0					
ANR	563053	Identifier	pfn		562592	0					
ANR	563054	Identifier	params		562592	1					
ANR	563055	Identifier	Size		562592	1					
ANR	563056	Identifier	i		562592	1					
ANR	563057	Identifier	order		562592	1					
ANR	563058	AdditiveExpression	order - 1		562592	1		-			
ANR	563059	Identifier	order		562592	0					
ANR	563060	PrimaryExpression	1		562592	1					
ANR	563061	Identifier	sa		562592	1					
ANR	563062	ExpressionStatement	pfn -> params . stream_step [ i ] = ss	1514:16:51793:51824	562592	2	True				
ANR	563063	AssignmentExpression	pfn -> params . stream_step [ i ] = ss		562592	0		=			
ANR	563064	ArrayIndexing	pfn -> params . stream_step [ i ]		562592	0					
ANR	563065	MemberAccess	pfn -> params . stream_step		562592	0					
ANR	563066	PtrMemberAccess	pfn -> params		562592	0					
ANR	563067	Identifier	pfn		562592	0					
ANR	563068	Identifier	params		562592	1					
ANR	563069	Identifier	stream_step		562592	1					
ANR	563070	Identifier	i		562592	1					
ANR	563071	Identifier	ss		562592	1					
ANR	563072	ExpressionStatement	ss = pfn -> params . Size [ i ] * ss	1515:16:51842:51871	562592	3	True				
ANR	563073	AssignmentExpression	ss = pfn -> params . Size [ i ] * ss		562592	0		=			
ANR	563074	Identifier	ss		562592	0					
ANR	563075	MultiplicativeExpression	pfn -> params . Size [ i ] * ss		562592	1		*			
ANR	563076	ArrayIndexing	pfn -> params . Size [ i ]		562592	0					
ANR	563077	MemberAccess	pfn -> params . Size		562592	0					
ANR	563078	PtrMemberAccess	pfn -> params		562592	0					
ANR	563079	Identifier	pfn		562592	0					
ANR	563080	Identifier	params		562592	1					
ANR	563081	Identifier	Size		562592	1					
ANR	563082	Identifier	i		562592	1					
ANR	563083	Identifier	ss		562592	1					
ANR	563084	ExpressionStatement	"pfn -> params . pole = ( double * ) gs_alloc_byte_array ( mem , sa , sizeof ( double ) , ""gs_function_Sd_init"" )"	1517:12:51899:52031	562592	8	True				
ANR	563085	AssignmentExpression	"pfn -> params . pole = ( double * ) gs_alloc_byte_array ( mem , sa , sizeof ( double ) , ""gs_function_Sd_init"" )"		562592	0		=			
ANR	563086	MemberAccess	pfn -> params . pole		562592	0					
ANR	563087	PtrMemberAccess	pfn -> params		562592	0					
ANR	563088	Identifier	pfn		562592	0					
ANR	563089	Identifier	params		562592	1					
ANR	563090	Identifier	pole		562592	1					
ANR	563091	CastExpression	"( double * ) gs_alloc_byte_array ( mem , sa , sizeof ( double ) , ""gs_function_Sd_init"" )"		562592	1					
ANR	563092	CastTarget	double *		562592	0					
ANR	563093	CallExpression	"gs_alloc_byte_array ( mem , sa , sizeof ( double ) , ""gs_function_Sd_init"" )"		562592	1					
ANR	563094	Callee	gs_alloc_byte_array		562592	0					
ANR	563095	Identifier	gs_alloc_byte_array		562592	0					
ANR	563096	ArgumentList	mem		562592	1					
ANR	563097	Argument	mem		562592	0					
ANR	563098	Identifier	mem		562592	0					
ANR	563099	Argument	sa		562592	1					
ANR	563100	Identifier	sa		562592	0					
ANR	563101	Argument	sizeof ( double )		562592	2					
ANR	563102	SizeofExpression	sizeof ( double )		562592	0					
ANR	563103	Sizeof	sizeof		562592	0					
ANR	563104	SizeofOperand	double		562592	1					
ANR	563105	Argument	"""gs_function_Sd_init"""		562592	3					
ANR	563106	PrimaryExpression	"""gs_function_Sd_init"""		562592	0					
ANR	563107	IfStatement	if ( pfn -> params . pole == NULL )		562592	9					
ANR	563108	Condition	pfn -> params . pole == NULL	1519:16:52049:52072	562592	0	True				
ANR	563109	EqualityExpression	pfn -> params . pole == NULL		562592	0		==			
ANR	563110	MemberAccess	pfn -> params . pole		562592	0					
ANR	563111	PtrMemberAccess	pfn -> params		562592	0					
ANR	563112	Identifier	pfn		562592	0					
ANR	563113	Identifier	params		562592	1					
ANR	563114	Identifier	pole		562592	1					
ANR	563115	Identifier	NULL		562592	1					
ANR	563116	ExpressionStatement	return_error ( gs_error_VMerror )	1520:16:52091:52121	562592	1	True				
ANR	563117	CallExpression	return_error ( gs_error_VMerror )		562592	0					
ANR	563118	Callee	return_error		562592	0					
ANR	563119	Identifier	return_error		562592	0					
ANR	563120	ArgumentList	gs_error_VMerror		562592	1					
ANR	563121	Argument	gs_error_VMerror		562592	0					
ANR	563122	Identifier	gs_error_VMerror		562592	0					
ANR	563123	ForStatement	for ( i = 0 ; i < sa ; i ++ )		562592	10					
ANR	563124	ForInit	i = 0 ;	1521:17:52140:52145	562592	0	True				
ANR	563125	AssignmentExpression	i = 0		562592	0		=			
ANR	563126	Identifier	i		562592	0					
ANR	563127	PrimaryExpression	0		562592	1					
ANR	563128	Condition	i < sa	1521:24:52147:52152	562592	1	True				
ANR	563129	RelationalExpression	i < sa		562592	0		<			
ANR	563130	Identifier	i		562592	0					
ANR	563131	Identifier	sa		562592	1					
ANR	563132	PostIncDecOperationExpression	i ++	1521:32:52155:52157	562592	2	True				
ANR	563133	Identifier	i		562592	0					
ANR	563134	IncDec	++		562592	1					
ANR	563135	ExpressionStatement	pfn -> params . pole [ i ] = double_stub	1522:16:52176:52209	562592	3	True				
ANR	563136	AssignmentExpression	pfn -> params . pole [ i ] = double_stub		562592	0		=			
ANR	563137	ArrayIndexing	pfn -> params . pole [ i ]		562592	0					
ANR	563138	MemberAccess	pfn -> params . pole		562592	0					
ANR	563139	PtrMemberAccess	pfn -> params		562592	0					
ANR	563140	Identifier	pfn		562592	0					
ANR	563141	Identifier	params		562592	1					
ANR	563142	Identifier	pole		562592	1					
ANR	563143	Identifier	i		562592	1					
ANR	563144	Identifier	double_stub		562592	1					
ANR	563145	ExpressionStatement	pfn -> params . array_size = sa	1523:12:52223:52250	562592	11	True				
ANR	563146	AssignmentExpression	pfn -> params . array_size = sa		562592	0		=			
ANR	563147	MemberAccess	pfn -> params . array_size		562592	0					
ANR	563148	PtrMemberAccess	pfn -> params		562592	0					
ANR	563149	Identifier	pfn		562592	0					
ANR	563150	Identifier	params		562592	1					
ANR	563151	Identifier	array_size		562592	1					
ANR	563152	Identifier	sa		562592	1					
ANR	563153	ExpressionStatement	* ppfn = ( gs_function_t * ) pfn	1525:8:52270:52299	562592	11	True				
ANR	563154	AssignmentExpression	* ppfn = ( gs_function_t * ) pfn		562592	0		=			
ANR	563155	UnaryOperationExpression	* ppfn		562592	0					
ANR	563156	UnaryOperator	*		562592	0					
ANR	563157	Identifier	ppfn		562592	1					
ANR	563158	CastExpression	( gs_function_t * ) pfn		562592	1					
ANR	563159	CastTarget	gs_function_t *		562592	0					
ANR	563160	Identifier	pfn		562592	1					
ANR	563161	ReturnStatement	return 0 ;	1527:4:52311:52319	562592	17	True				
ANR	563162	PrimaryExpression	0		562592	0					
ANR	563163	ReturnType	int		562592	1					
ANR	563164	Identifier	gs_function_Sd_init		562592	2					
ANR	563165	ParameterList	"gs_function_t * * ppfn , const gs_function_Sd_params_t * params , gs_memory_t * mem"		562592	3					
ANR	563166	Parameter	gs_function_t * * ppfn	1432:20:48759:48779	562592	0	True				
ANR	563167	ParameterType	gs_function_t * *		562592	0					
ANR	563168	Identifier	ppfn		562592	1					
ANR	563169	Parameter	const gs_function_Sd_params_t * params	1433:18:48800:48837	562592	1	True				
ANR	563170	ParameterType	const gs_function_Sd_params_t *		562592	0					
ANR	563171	Identifier	params		562592	1					
ANR	563172	Parameter	gs_memory_t * mem	1433:58:48840:48856	562592	2	True				
ANR	563173	ParameterType	gs_memory_t *		562592	0					
ANR	563174	Identifier	mem		562592	1					
ANR	563175	CFGEntryNode	ENTRY		562592		True				
ANR	563176	CFGExitNode	EXIT		562592		True				
ANR	563177	Symbol	MAX_FAST_COMPS		562592						
ANR	563178	Symbol	params -> BitsPerSample		562592						
ANR	563179	Symbol	pfn -> params . Size		562592						
ANR	563180	Symbol	gs_error_rangecheck		562592						
ANR	563181	Symbol	* * params		562592						
ANR	563182	Symbol	* * pfn		562592						
ANR	563183	Symbol	pfn -> params . pole		562592						
ANR	563184	Symbol	pfn -> head		562592						
ANR	563185	Symbol	pfn -> params . Order		562592						
ANR	563186	Symbol	pfn -> params . array_step		562592						
ANR	563187	Symbol	pfn -> params . BitsPerSample		562592						
ANR	563188	Symbol	* pfn -> params . stream_step		562592						
ANR	563189	Symbol	order		562592						
ANR	563190	Symbol	* pfn		562592						
ANR	563191	Symbol	NULL		562592						
ANR	563192	Symbol	function_Sd_head		562592						
ANR	563193	Symbol	DEBUG_Sd_1arg		562592						
ANR	563194	Symbol	params		562592						
ANR	563195	Symbol	* pfn -> params . pole		562592						
ANR	563196	Symbol	pfn		562592						
ANR	563197	Symbol	* pfn -> params		562592						
ANR	563198	Symbol	pfn -> params . m		562592						
ANR	563199	Symbol	code		562592						
ANR	563200	Symbol	pfn -> params . n		562592						
ANR	563201	Symbol	params -> Order		562592						
ANR	563202	Symbol	gs_alloc_struct		562592						
ANR	563203	Symbol	pfn -> params . array_size		562592						
ANR	563204	Symbol	sa		562592						
ANR	563205	Symbol	double_stub		562592						
ANR	563206	Symbol	params -> m		562592						
ANR	563207	Symbol	params -> n		562592						
ANR	563208	Symbol	mem		562592						
ANR	563209	Symbol	pfn -> params . stream_step		562592						
ANR	563210	Symbol	gs_error_limitcheck		562592						
ANR	563211	Symbol	* ppfn		562592						
ANR	563212	Symbol	max_Sd_m		562592						
ANR	563213	Symbol	params -> Size		562592						
ANR	563214	Symbol	* params		562592						
ANR	563215	Symbol	ss		562592						
ANR	563216	Symbol	* pfn -> params . array_step		562592						
ANR	563217	Symbol	fn_check_mnDR		562592						
ANR	563218	Symbol	bps		562592						
ANR	563219	Symbol	* params -> Size		562592						
ANR	563220	Symbol	& st_function_Sd		562592						
ANR	563221	Symbol	* pfn -> params . Size		562592						
ANR	563222	Symbol	i		562592						
ANR	563223	Symbol	gs_error_VMerror		562592						
ANR	563224	Symbol	* i		562592						
ANR	563225	Symbol	ppfn		562592						
ANR	563226	Symbol	gs_alloc_byte_array		562592						
ANR	563227	Symbol	gs_function_Sd_t		562592						
ANR	563228	Symbol	pfn -> params		562592						
