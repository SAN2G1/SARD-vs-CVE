command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4987735	File	data/converged/CVE-2018-16863_ghostpdl/gschar0.c								
ANR	4987736	Function	gs_stack_modal_fonts	32:0:953:1720							
ANR	4987737	FunctionDef	gs_stack_modal_fonts (gs_text_enum_t * pte)		4987736	0					
ANR	4987738	CompoundStatement		34:0:1006:1720	4987736	0					
ANR	4987739	IdentifierDeclStatement	int fdepth = pte -> fstack . depth ;	35:4:1012:1042	4987736	0	True				
ANR	4987740	IdentifierDecl	fdepth = pte -> fstack . depth		4987736	0					
ANR	4987741	IdentifierDeclType	int		4987736	0					
ANR	4987742	Identifier	fdepth		4987736	1					
ANR	4987743	AssignmentExpression	fdepth = pte -> fstack . depth		4987736	2		=			
ANR	4987744	Identifier	fdepth		4987736	0					
ANR	4987745	MemberAccess	pte -> fstack . depth		4987736	1					
ANR	4987746	PtrMemberAccess	pte -> fstack		4987736	0					
ANR	4987747	Identifier	pte		4987736	0					
ANR	4987748	Identifier	fstack		4987736	1					
ANR	4987749	Identifier	depth		4987736	1					
ANR	4987750	IdentifierDeclStatement	gs_font * cfont = pte -> fstack . items [ fdepth ] . font ;	36:4:1048:1095	4987736	1	True				
ANR	4987751	IdentifierDecl	* cfont = pte -> fstack . items [ fdepth ] . font		4987736	0					
ANR	4987752	IdentifierDeclType	gs_font *		4987736	0					
ANR	4987753	Identifier	cfont		4987736	1					
ANR	4987754	AssignmentExpression	* cfont = pte -> fstack . items [ fdepth ] . font		4987736	2		=			
ANR	4987755	Identifier	cfont		4987736	0					
ANR	4987756	MemberAccess	pte -> fstack . items [ fdepth ] . font		4987736	1					
ANR	4987757	ArrayIndexing	pte -> fstack . items [ fdepth ]		4987736	0					
ANR	4987758	MemberAccess	pte -> fstack . items		4987736	0					
ANR	4987759	PtrMemberAccess	pte -> fstack		4987736	0					
ANR	4987760	Identifier	pte		4987736	0					
ANR	4987761	Identifier	fstack		4987736	1					
ANR	4987762	Identifier	items		4987736	1					
ANR	4987763	Identifier	fdepth		4987736	1					
ANR	4987764	Identifier	font		4987736	1					
ANR	4987765	WhileStatement	while ( cfont -> FontType == ft_composite )		4987736	2					
ANR	4987766	Condition	cfont -> FontType == ft_composite	38:11:1109:1139	4987736	0	True				
ANR	4987767	EqualityExpression	cfont -> FontType == ft_composite		4987736	0		==			
ANR	4987768	PtrMemberAccess	cfont -> FontType		4987736	0					
ANR	4987769	Identifier	cfont		4987736	0					
ANR	4987770	Identifier	FontType		4987736	1					
ANR	4987771	Identifier	ft_composite		4987736	1					
ANR	4987772	CompoundStatement		5:44:135:135	4987736	1					
ANR	4987773	Statement	gs_font_type0	39:8:1152:1164	4987736	0	True				
ANR	4987774	Statement	*	39:22:1166:1166	4987736	1	True				
ANR	4987775	Statement	const	39:23:1167:1171	4987736	2	True				
ANR	4987776	ExpressionStatement	cmfont = ( gs_font_type0 * ) cfont	39:29:1173:1205	4987736	3	True				
ANR	4987777	AssignmentExpression	cmfont = ( gs_font_type0 * ) cfont		4987736	0		=			
ANR	4987778	Identifier	cmfont		4987736	0					
ANR	4987779	CastExpression	( gs_font_type0 * ) cfont		4987736	1					
ANR	4987780	CastTarget	gs_font_type0 *		4987736	0					
ANR	4987781	Identifier	cfont		4987736	1					
ANR	4987782	IfStatement	if ( ! fmap_type_is_modal ( cmfont -> data . FMapType ) )		4987736	4					
ANR	4987783	Condition	! fmap_type_is_modal ( cmfont -> data . FMapType )	41:12:1220:1261	4987736	0	True				
ANR	4987784	UnaryOperationExpression	! fmap_type_is_modal ( cmfont -> data . FMapType )		4987736	0					
ANR	4987785	UnaryOperator	!		4987736	0					
ANR	4987786	CallExpression	fmap_type_is_modal ( cmfont -> data . FMapType )		4987736	1					
ANR	4987787	Callee	fmap_type_is_modal		4987736	0					
ANR	4987788	Identifier	fmap_type_is_modal		4987736	0					
ANR	4987789	ArgumentList	cmfont -> data . FMapType		4987736	1					
ANR	4987790	Argument	cmfont -> data . FMapType		4987736	0					
ANR	4987791	MemberAccess	cmfont -> data . FMapType		4987736	0					
ANR	4987792	PtrMemberAccess	cmfont -> data		4987736	0					
ANR	4987793	Identifier	cmfont		4987736	0					
ANR	4987794	Identifier	data		4987736	1					
ANR	4987795	Identifier	FMapType		4987736	1					
ANR	4987796	BreakStatement	break ;	42:12:1276:1281	4987736	1	True				
ANR	4987797	IfStatement	if ( fdepth == MAX_FONT_STACK )		4987736	5					
ANR	4987798	Condition	fdepth == MAX_FONT_STACK	43:12:1295:1318	4987736	0	True				
ANR	4987799	EqualityExpression	fdepth == MAX_FONT_STACK		4987736	0		==			
ANR	4987800	Identifier	fdepth		4987736	0					
ANR	4987801	Identifier	MAX_FONT_STACK		4987736	1					
ANR	4987802	ExpressionStatement	return_error ( gs_error_invalidfont )	44:12:1333:1367	4987736	1	True				
ANR	4987803	CallExpression	return_error ( gs_error_invalidfont )		4987736	0					
ANR	4987804	Callee	return_error		4987736	0					
ANR	4987805	Identifier	return_error		4987736	0					
ANR	4987806	ArgumentList	gs_error_invalidfont		4987736	1					
ANR	4987807	Argument	gs_error_invalidfont		4987736	0					
ANR	4987808	Identifier	gs_error_invalidfont		4987736	0					
ANR	4987809	ExpressionStatement	fdepth ++	45:8:1377:1385	4987736	6	True				
ANR	4987810	PostIncDecOperationExpression	fdepth ++		4987736	0					
ANR	4987811	Identifier	fdepth		4987736	0					
ANR	4987812	IncDec	++		4987736	1					
ANR	4987813	ExpressionStatement	cfont = cmfont -> data . FDepVector [ cmfont -> data . Encoding [ 0 ] ]	46:8:1395:1452	4987736	7	True				
ANR	4987814	AssignmentExpression	cfont = cmfont -> data . FDepVector [ cmfont -> data . Encoding [ 0 ] ]		4987736	0		=			
ANR	4987815	Identifier	cfont		4987736	0					
ANR	4987816	ArrayIndexing	cmfont -> data . FDepVector [ cmfont -> data . Encoding [ 0 ] ]		4987736	1					
ANR	4987817	MemberAccess	cmfont -> data . FDepVector		4987736	0					
ANR	4987818	PtrMemberAccess	cmfont -> data		4987736	0					
ANR	4987819	Identifier	cmfont		4987736	0					
ANR	4987820	Identifier	data		4987736	1					
ANR	4987821	Identifier	FDepVector		4987736	1					
ANR	4987822	ArrayIndexing	cmfont -> data . Encoding [ 0 ]		4987736	1					
ANR	4987823	MemberAccess	cmfont -> data . Encoding		4987736	0					
ANR	4987824	PtrMemberAccess	cmfont -> data		4987736	0					
ANR	4987825	Identifier	cmfont		4987736	0					
ANR	4987826	Identifier	data		4987736	1					
ANR	4987827	Identifier	Encoding		4987736	1					
ANR	4987828	PrimaryExpression	0		4987736	1					
ANR	4987829	ExpressionStatement	pte -> fstack . items [ fdepth ] . font = cfont	47:8:1462:1500	4987736	8	True				
ANR	4987830	AssignmentExpression	pte -> fstack . items [ fdepth ] . font = cfont		4987736	0		=			
ANR	4987831	MemberAccess	pte -> fstack . items [ fdepth ] . font		4987736	0					
ANR	4987832	ArrayIndexing	pte -> fstack . items [ fdepth ]		4987736	0					
ANR	4987833	MemberAccess	pte -> fstack . items		4987736	0					
ANR	4987834	PtrMemberAccess	pte -> fstack		4987736	0					
ANR	4987835	Identifier	pte		4987736	0					
ANR	4987836	Identifier	fstack		4987736	1					
ANR	4987837	Identifier	items		4987736	1					
ANR	4987838	Identifier	fdepth		4987736	1					
ANR	4987839	Identifier	font		4987736	1					
ANR	4987840	Identifier	cfont		4987736	1					
ANR	4987841	ExpressionStatement	pte -> fstack . items [ fdepth - 1 ] . index = 0	48:8:1510:1549	4987736	9	True				
ANR	4987842	AssignmentExpression	pte -> fstack . items [ fdepth - 1 ] . index = 0		4987736	0		=			
ANR	4987843	MemberAccess	pte -> fstack . items [ fdepth - 1 ] . index		4987736	0					
ANR	4987844	ArrayIndexing	pte -> fstack . items [ fdepth - 1 ]		4987736	0					
ANR	4987845	MemberAccess	pte -> fstack . items		4987736	0					
ANR	4987846	PtrMemberAccess	pte -> fstack		4987736	0					
ANR	4987847	Identifier	pte		4987736	0					
ANR	4987848	Identifier	fstack		4987736	1					
ANR	4987849	Identifier	items		4987736	1					
ANR	4987850	AdditiveExpression	fdepth - 1		4987736	1		-			
ANR	4987851	Identifier	fdepth		4987736	0					
ANR	4987852	PrimaryExpression	1		4987736	1					
ANR	4987853	Identifier	index		4987736	1					
ANR	4987854	PrimaryExpression	0		4987736	1					
ANR	4987855	ExpressionStatement	"if_debug2m ( 'j' , pte -> memory , ""[j]stacking depth=%d font=0x%lx\\n"" , fdepth , ( ulong ) cfont )"	49:8:1559:1666	4987736	10	True				
ANR	4987856	CallExpression	"if_debug2m ( 'j' , pte -> memory , ""[j]stacking depth=%d font=0x%lx\\n"" , fdepth , ( ulong ) cfont )"		4987736	0					
ANR	4987857	Callee	if_debug2m		4987736	0					
ANR	4987858	Identifier	if_debug2m		4987736	0					
ANR	4987859	ArgumentList	'j'		4987736	1					
ANR	4987860	Argument	'j'		4987736	0					
ANR	4987861	PrimaryExpression	'j'		4987736	0					
ANR	4987862	Argument	pte -> memory		4987736	1					
ANR	4987863	PtrMemberAccess	pte -> memory		4987736	0					
ANR	4987864	Identifier	pte		4987736	0					
ANR	4987865	Identifier	memory		4987736	1					
ANR	4987866	Argument	"""[j]stacking depth=%d font=0x%lx\\n"""		4987736	2					
ANR	4987867	PrimaryExpression	"""[j]stacking depth=%d font=0x%lx\\n"""		4987736	0					
ANR	4987868	Argument	fdepth		4987736	3					
ANR	4987869	Identifier	fdepth		4987736	0					
ANR	4987870	Argument	( ulong ) cfont		4987736	4					
ANR	4987871	CastExpression	( ulong ) cfont		4987736	0					
ANR	4987872	CastTarget	ulong		4987736	0					
ANR	4987873	Identifier	cfont		4987736	1					
ANR	4987874	ExpressionStatement	pte -> fstack . depth = fdepth	52:4:1678:1704	4987736	3	True				
ANR	4987875	AssignmentExpression	pte -> fstack . depth = fdepth		4987736	0		=			
ANR	4987876	MemberAccess	pte -> fstack . depth		4987736	0					
ANR	4987877	PtrMemberAccess	pte -> fstack		4987736	0					
ANR	4987878	Identifier	pte		4987736	0					
ANR	4987879	Identifier	fstack		4987736	1					
ANR	4987880	Identifier	depth		4987736	1					
ANR	4987881	Identifier	fdepth		4987736	1					
ANR	4987882	ReturnStatement	return 0 ;	53:4:1710:1718	4987736	4	True				
ANR	4987883	PrimaryExpression	0		4987736	0					
ANR	4987884	ReturnType	static int		4987736	1					
ANR	4987885	Identifier	gs_stack_modal_fonts		4987736	2					
ANR	4987886	ParameterList	gs_text_enum_t * pte		4987736	3					
ANR	4987887	Parameter	gs_text_enum_t * pte	33:21:985:1003	4987736	0	True				
ANR	4987888	ParameterType	gs_text_enum_t *		4987736	0					
ANR	4987889	Identifier	pte		4987736	1					
ANR	4987890	CFGEntryNode	ENTRY		4987736		True				
ANR	4987891	CFGExitNode	EXIT		4987736		True				
ANR	4987892	Symbol	* * cmfont -> data . Encoding		4987736						
ANR	4987893	Symbol	* cmfont -> data		4987736						
ANR	4987894	Symbol	pte -> memory		4987736						
ANR	4987895	Symbol	* pte -> fstack . items		4987736						
ANR	4987896	Symbol	* pte		4987736						
ANR	4987897	Symbol	MAX_FONT_STACK		4987736						
ANR	4987898	Symbol	* * cmfont -> data		4987736						
ANR	4987899	Symbol	cfont		4987736						
ANR	4987900	Symbol	fmap_type_is_modal		4987736						
ANR	4987901	Symbol	* * cmfont		4987736						
ANR	4987902	Symbol	pte -> fstack		4987736						
ANR	4987903	Symbol	* cmfont -> data . FDepVector		4987736						
ANR	4987904	Symbol	gs_error_invalidfont		4987736						
ANR	4987905	Symbol	cmfont -> data . FDepVector		4987736						
ANR	4987906	Symbol	* pte -> fstack		4987736						
ANR	4987907	Symbol	pte		4987736						
ANR	4987908	Symbol	cmfont -> data . Encoding		4987736						
ANR	4987909	Symbol	fdepth		4987736						
ANR	4987910	Symbol	* fdepth		4987736						
ANR	4987911	Symbol	cmfont		4987736						
ANR	4987912	Symbol	pte -> fstack . depth		4987736						
ANR	4987913	Symbol	pte -> fstack . items [ fdepth ] . font		4987736						
ANR	4987914	Symbol	cfont -> FontType		4987736						
ANR	4987915	Symbol	ft_composite		4987736						
ANR	4987916	Symbol	pte -> fstack . items		4987736						
ANR	4987917	Symbol	pte -> fstack . items [ fdepth - 1 ] . index		4987736						
ANR	4987918	Symbol	cmfont -> data . FMapType		4987736						
ANR	4987919	Symbol	* * pte		4987736						
ANR	4987920	Symbol	* * * cmfont		4987736						
ANR	4987921	Symbol	* cmfont		4987736						
ANR	4987922	Symbol	* cmfont -> data . Encoding		4987736						
ANR	4987923	Symbol	* cfont		4987736						
ANR	4987924	Symbol	cmfont -> data		4987736						
ANR	4987925	Function	gs_type0_init_fstack	57:0:1843:2263							
ANR	4987926	FunctionDef	"gs_type0_init_fstack (gs_text_enum_t * pte , gs_font * pfont)"		4987925	0					
ANR	4987927	CompoundStatement		59:0:1906:2263	4987925	0					
ANR	4987928	IfStatement	if ( ! ( pte -> text . operation & ( TEXT_FROM_STRING | TEXT_FROM_BYTES ) ) )		4987925	0					
ANR	4987929	Condition	! ( pte -> text . operation & ( TEXT_FROM_STRING | TEXT_FROM_BYTES ) )	60:8:1916:1976	4987925	0	True				
ANR	4987930	UnaryOperationExpression	! ( pte -> text . operation & ( TEXT_FROM_STRING | TEXT_FROM_BYTES ) )		4987925	0					
ANR	4987931	UnaryOperator	!		4987925	0					
ANR	4987932	BitAndExpression	pte -> text . operation & ( TEXT_FROM_STRING | TEXT_FROM_BYTES )		4987925	1		&			
ANR	4987933	MemberAccess	pte -> text . operation		4987925	0					
ANR	4987934	PtrMemberAccess	pte -> text		4987925	0					
ANR	4987935	Identifier	pte		4987925	0					
ANR	4987936	Identifier	text		4987925	1					
ANR	4987937	Identifier	operation		4987925	1					
ANR	4987938	InclusiveOrExpression	TEXT_FROM_STRING | TEXT_FROM_BYTES		4987925	1		|			
ANR	4987939	Identifier	TEXT_FROM_STRING		4987925	0					
ANR	4987940	Identifier	TEXT_FROM_BYTES		4987925	1					
ANR	4987941	ExpressionStatement	return_error ( gs_error_invalidfont )	61:8:1987:2021	4987925	1	True				
ANR	4987942	CallExpression	return_error ( gs_error_invalidfont )		4987925	0					
ANR	4987943	Callee	return_error		4987925	0					
ANR	4987944	Identifier	return_error		4987925	0					
ANR	4987945	ArgumentList	gs_error_invalidfont		4987925	1					
ANR	4987946	Argument	gs_error_invalidfont		4987925	0					
ANR	4987947	Identifier	gs_error_invalidfont		4987925	0					
ANR	4987948	ExpressionStatement	"if_debug1m ( 'j' , pte -> memory , ""[j]stacking depth=0 font=0x%lx\\n"" , ( ulong ) pfont )"	62:4:2027:2121	4987925	1	True				
ANR	4987949	CallExpression	"if_debug1m ( 'j' , pte -> memory , ""[j]stacking depth=0 font=0x%lx\\n"" , ( ulong ) pfont )"		4987925	0					
ANR	4987950	Callee	if_debug1m		4987925	0					
ANR	4987951	Identifier	if_debug1m		4987925	0					
ANR	4987952	ArgumentList	'j'		4987925	1					
ANR	4987953	Argument	'j'		4987925	0					
ANR	4987954	PrimaryExpression	'j'		4987925	0					
ANR	4987955	Argument	pte -> memory		4987925	1					
ANR	4987956	PtrMemberAccess	pte -> memory		4987925	0					
ANR	4987957	Identifier	pte		4987925	0					
ANR	4987958	Identifier	memory		4987925	1					
ANR	4987959	Argument	"""[j]stacking depth=0 font=0x%lx\\n"""		4987925	2					
ANR	4987960	PrimaryExpression	"""[j]stacking depth=0 font=0x%lx\\n"""		4987925	0					
ANR	4987961	Argument	( ulong ) pfont		4987925	3					
ANR	4987962	CastExpression	( ulong ) pfont		4987925	0					
ANR	4987963	CastTarget	ulong		4987925	0					
ANR	4987964	Identifier	pfont		4987925	1					
ANR	4987965	ExpressionStatement	pte -> fstack . depth = 0	64:4:2127:2148	4987925	2	True				
ANR	4987966	AssignmentExpression	pte -> fstack . depth = 0		4987925	0		=			
ANR	4987967	MemberAccess	pte -> fstack . depth		4987925	0					
ANR	4987968	PtrMemberAccess	pte -> fstack		4987925	0					
ANR	4987969	Identifier	pte		4987925	0					
ANR	4987970	Identifier	fstack		4987925	1					
ANR	4987971	Identifier	depth		4987925	1					
ANR	4987972	PrimaryExpression	0		4987925	1					
ANR	4987973	ExpressionStatement	pte -> fstack . items [ 0 ] . font = pfont	65:4:2154:2187	4987925	3	True				
ANR	4987974	AssignmentExpression	pte -> fstack . items [ 0 ] . font = pfont		4987925	0		=			
ANR	4987975	MemberAccess	pte -> fstack . items [ 0 ] . font		4987925	0					
ANR	4987976	ArrayIndexing	pte -> fstack . items [ 0 ]		4987925	0					
ANR	4987977	MemberAccess	pte -> fstack . items		4987925	0					
ANR	4987978	PtrMemberAccess	pte -> fstack		4987925	0					
ANR	4987979	Identifier	pte		4987925	0					
ANR	4987980	Identifier	fstack		4987925	1					
ANR	4987981	Identifier	items		4987925	1					
ANR	4987982	PrimaryExpression	0		4987925	1					
ANR	4987983	Identifier	font		4987925	1					
ANR	4987984	Identifier	pfont		4987925	1					
ANR	4987985	ExpressionStatement	pte -> fstack . items [ 0 ] . index = 0	66:4:2193:2223	4987925	4	True				
ANR	4987986	AssignmentExpression	pte -> fstack . items [ 0 ] . index = 0		4987925	0		=			
ANR	4987987	MemberAccess	pte -> fstack . items [ 0 ] . index		4987925	0					
ANR	4987988	ArrayIndexing	pte -> fstack . items [ 0 ]		4987925	0					
ANR	4987989	MemberAccess	pte -> fstack . items		4987925	0					
ANR	4987990	PtrMemberAccess	pte -> fstack		4987925	0					
ANR	4987991	Identifier	pte		4987925	0					
ANR	4987992	Identifier	fstack		4987925	1					
ANR	4987993	Identifier	items		4987925	1					
ANR	4987994	PrimaryExpression	0		4987925	1					
ANR	4987995	Identifier	index		4987925	1					
ANR	4987996	PrimaryExpression	0		4987925	1					
ANR	4987997	ReturnStatement	return gs_stack_modal_fonts ( pte ) ;	67:4:2229:2261	4987925	5	True				
ANR	4987998	CallExpression	gs_stack_modal_fonts ( pte )		4987925	0					
ANR	4987999	Callee	gs_stack_modal_fonts		4987925	0					
ANR	4988000	Identifier	gs_stack_modal_fonts		4987925	0					
ANR	4988001	ArgumentList	pte		4987925	1					
ANR	4988002	Argument	pte		4987925	0					
ANR	4988003	Identifier	pte		4987925	0					
ANR	4988004	ReturnType	int		4987925	1					
ANR	4988005	Identifier	gs_type0_init_fstack		4987925	2					
ANR	4988006	ParameterList	"gs_text_enum_t * pte , gs_font * pfont"		4987925	3					
ANR	4988007	Parameter	gs_text_enum_t * pte	58:21:1868:1886	4987925	0	True				
ANR	4988008	ParameterType	gs_text_enum_t *		4987925	0					
ANR	4988009	Identifier	pte		4987925	1					
ANR	4988010	Parameter	gs_font * pfont	58:42:1889:1903	4987925	1	True				
ANR	4988011	ParameterType	gs_font *		4987925	0					
ANR	4988012	Identifier	pfont		4987925	1					
ANR	4988013	CFGEntryNode	ENTRY		4987925		True				
ANR	4988014	CFGExitNode	EXIT		4987925		True				
ANR	4988015	Symbol	pte		4987925						
ANR	4988016	Symbol	pte -> fstack . items [ 0 ] . index		4987925						
ANR	4988017	Symbol	pfont		4987925						
ANR	4988018	Symbol	pte -> text		4987925						
ANR	4988019	Symbol	pte -> text . operation		4987925						
ANR	4988020	Symbol	pte -> memory		4987925						
ANR	4988021	Symbol	* pte -> fstack . items		4987925						
ANR	4988022	Symbol	pte -> fstack . depth		4987925						
ANR	4988023	Symbol	* pte		4987925						
ANR	4988024	Symbol	pte -> fstack . items [ 0 ] . font		4987925						
ANR	4988025	Symbol	pte -> fstack . items		4987925						
ANR	4988026	Symbol	* * pte		4987925						
ANR	4988027	Symbol	TEXT_FROM_BYTES		4987925						
ANR	4988028	Symbol	gs_stack_modal_fonts		4987925						
ANR	4988029	Symbol	pte -> fstack		4987925						
ANR	4988030	Symbol	TEXT_FROM_STRING		4987925						
ANR	4988031	Symbol	gs_error_invalidfont		4987925						
ANR	4988032	Symbol	* pte -> fstack		4987925						
ANR	4988033	Function	root_esc_char	89:0:3004:3133							
ANR	4988034	FunctionDef	root_esc_char (const gs_text_enum_t * pte)		4988033	0					
ANR	4988035	CompoundStatement		91:0:3057:3133	4988033	0					
ANR	4988036	ReturnStatement	return ( ( gs_font_type0 * ) ( pte -> fstack . items [ 0 ] . font ) ) -> data . EscChar ;	92:4:3063:3131	4988033	0	True				
ANR	4988037	MemberAccess	( ( gs_font_type0 * ) ( pte -> fstack . items [ 0 ] . font ) ) -> data . EscChar		4988033	0					
ANR	4988038	PtrMemberAccess	( ( gs_font_type0 * ) ( pte -> fstack . items [ 0 ] . font ) ) -> data		4988033	0					
ANR	4988039	CastExpression	( gs_font_type0 * ) ( pte -> fstack . items [ 0 ] . font )		4988033	0					
ANR	4988040	CastTarget	gs_font_type0 *		4988033	0					
ANR	4988041	MemberAccess	pte -> fstack . items [ 0 ] . font		4988033	1					
ANR	4988042	ArrayIndexing	pte -> fstack . items [ 0 ]		4988033	0					
ANR	4988043	MemberAccess	pte -> fstack . items		4988033	0					
ANR	4988044	PtrMemberAccess	pte -> fstack		4988033	0					
ANR	4988045	Identifier	pte		4988033	0					
ANR	4988046	Identifier	fstack		4988033	1					
ANR	4988047	Identifier	items		4988033	1					
ANR	4988048	PrimaryExpression	0		4988033	1					
ANR	4988049	Identifier	font		4988033	1					
ANR	4988050	Identifier	data		4988033	1					
ANR	4988051	Identifier	EscChar		4988033	1					
ANR	4988052	ReturnType	static uint		4988033	1					
ANR	4988053	Identifier	root_esc_char		4988033	2					
ANR	4988054	ParameterList	const gs_text_enum_t * pte		4988033	3					
ANR	4988055	Parameter	const gs_text_enum_t * pte	90:14:3030:3054	4988033	0	True				
ANR	4988056	ParameterType	const gs_text_enum_t *		4988033	0					
ANR	4988057	Identifier	pte		4988033	1					
ANR	4988058	CFGEntryNode	ENTRY		4988033		True				
ANR	4988059	CFGExitNode	EXIT		4988033		True				
ANR	4988060	Symbol	pte		4988033						
ANR	4988061	Symbol	* pte -> fstack . items [ 0 ] . font		4988033						
ANR	4988062	Symbol	* pte -> fstack . items		4988033						
ANR	4988063	Symbol	* pte		4988033						
ANR	4988064	Symbol	( ( gs_font_type0 * ) ( pte -> fstack . items [ 0 ] . font ) ) -> data . EscChar		4988033						
ANR	4988065	Symbol	pte -> fstack . items [ 0 ] . font		4988033						
ANR	4988066	Symbol	pte -> fstack . items		4988033						
ANR	4988067	Symbol	( ( gs_font_type0 * ) ( pte -> fstack . items [ 0 ] . font ) ) -> data		4988033						
ANR	4988068	Symbol	* * pte		4988033						
ANR	4988069	Symbol	* * pte -> fstack		4988033						
ANR	4988070	Symbol	pte -> fstack		4988033						
ANR	4988071	Symbol	* * pte -> fstack . items		4988033						
ANR	4988072	Symbol	* pte -> fstack		4988033						
ANR	4988073	Symbol	* * * pte		4988033						
ANR	4988074	Function	gs_type0_next_char_glyph	100:0:3429:17828							
ANR	4988075	FunctionDef	"gs_type0_next_char_glyph (gs_text_enum_t * pte , gs_char * pchr , gs_glyph * pglyph)"		4988074	0					
ANR	4988076	CompoundStatement		102:0:3512:17828	4988074	0					
ANR	4988077	IdentifierDeclStatement	const byte * str = pte -> text . data . bytes ;	103:4:3518:3556	4988074	0	True				
ANR	4988078	IdentifierDecl	* str = pte -> text . data . bytes		4988074	0					
ANR	4988079	IdentifierDeclType	const byte *		4988074	0					
ANR	4988080	Identifier	str		4988074	1					
ANR	4988081	AssignmentExpression	* str = pte -> text . data . bytes		4988074	2		=			
ANR	4988082	Identifier	str		4988074	0					
ANR	4988083	MemberAccess	pte -> text . data . bytes		4988074	1					
ANR	4988084	MemberAccess	pte -> text . data		4988074	0					
ANR	4988085	PtrMemberAccess	pte -> text		4988074	0					
ANR	4988086	Identifier	pte		4988074	0					
ANR	4988087	Identifier	text		4988074	1					
ANR	4988088	Identifier	data		4988074	1					
ANR	4988089	Identifier	bytes		4988074	1					
ANR	4988090	IdentifierDeclStatement	const byte * p = str + pte -> index ;	104:4:3562:3594	4988074	1	True				
ANR	4988091	IdentifierDecl	* p = str + pte -> index		4988074	0					
ANR	4988092	IdentifierDeclType	const byte *		4988074	0					
ANR	4988093	Identifier	p		4988074	1					
ANR	4988094	AssignmentExpression	* p = str + pte -> index		4988074	2		=			
ANR	4988095	Identifier	p		4988074	0					
ANR	4988096	AdditiveExpression	str + pte -> index		4988074	1		+			
ANR	4988097	Identifier	str		4988074	0					
ANR	4988098	PtrMemberAccess	pte -> index		4988074	1					
ANR	4988099	Identifier	pte		4988074	0					
ANR	4988100	Identifier	index		4988074	1					
ANR	4988101	IdentifierDeclStatement	const byte * end = str + pte -> text . size ;	105:4:3600:3638	4988074	2	True				
ANR	4988102	IdentifierDecl	* end = str + pte -> text . size		4988074	0					
ANR	4988103	IdentifierDeclType	const byte *		4988074	0					
ANR	4988104	Identifier	end		4988074	1					
ANR	4988105	AssignmentExpression	* end = str + pte -> text . size		4988074	2		=			
ANR	4988106	Identifier	end		4988074	0					
ANR	4988107	AdditiveExpression	str + pte -> text . size		4988074	1		+			
ANR	4988108	Identifier	str		4988074	0					
ANR	4988109	MemberAccess	pte -> text . size		4988074	1					
ANR	4988110	PtrMemberAccess	pte -> text		4988074	0					
ANR	4988111	Identifier	pte		4988074	0					
ANR	4988112	Identifier	text		4988074	1					
ANR	4988113	Identifier	size		4988074	1					
ANR	4988114	IdentifierDeclStatement	int fdepth = pte -> fstack . depth ;	106:4:3644:3674	4988074	3	True				
ANR	4988115	IdentifierDecl	fdepth = pte -> fstack . depth		4988074	0					
ANR	4988116	IdentifierDeclType	int		4988074	0					
ANR	4988117	Identifier	fdepth		4988074	1					
ANR	4988118	AssignmentExpression	fdepth = pte -> fstack . depth		4988074	2		=			
ANR	4988119	Identifier	fdepth		4988074	0					
ANR	4988120	MemberAccess	pte -> fstack . depth		4988074	1					
ANR	4988121	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4988122	Identifier	pte		4988074	0					
ANR	4988123	Identifier	fstack		4988074	1					
ANR	4988124	Identifier	depth		4988074	1					
ANR	4988125	IdentifierDeclStatement	int orig_depth = fdepth ;	107:4:3680:3703	4988074	4	True				
ANR	4988126	IdentifierDecl	orig_depth = fdepth		4988074	0					
ANR	4988127	IdentifierDeclType	int		4988074	0					
ANR	4988128	Identifier	orig_depth		4988074	1					
ANR	4988129	AssignmentExpression	orig_depth = fdepth		4988074	2		=			
ANR	4988130	Identifier	fdepth		4988074	0					
ANR	4988131	Identifier	fdepth		4988074	1					
ANR	4988132	IdentifierDeclStatement	gs_font * pfont ;	108:4:3709:3723	4988074	5	True				
ANR	4988133	IdentifierDecl	* pfont		4988074	0					
ANR	4988134	IdentifierDeclType	gs_font *		4988074	0					
ANR	4988135	Identifier	pfont		4988074	1					
ANR	4988136	Statement	define	110:1:3727:3732	4988074	6	True				
ANR	4988137	Statement	pfont0	110:8:3734:3739	4988074	7	True				
ANR	4988138	Statement	(	110:15:3741:3741	4988074	8	True				
ANR	4988139	Statement	(	110:16:3742:3742	4988074	9	True				
ANR	4988140	Statement	gs_font_type0	110:17:3743:3755	4988074	10	True				
ANR	4988141	Statement	*	110:31:3757:3757	4988074	11	True				
ANR	4988142	Statement	)	110:32:3758:3758	4988074	12	True				
ANR	4988143	Statement	pfont	110:33:3759:3763	4988074	13	True				
ANR	4988144	Statement	)	110:38:3764:3764	4988074	14	True				
ANR	4988145	IdentifierDeclStatement	gs_type0_data * pdata ;	111:4:3770:3790	4988074	15	True				
ANR	4988146	IdentifierDecl	* pdata		4988074	0					
ANR	4988147	IdentifierDeclType	gs_type0_data *		4988074	0					
ANR	4988148	Identifier	pdata		4988074	1					
ANR	4988149	IdentifierDeclStatement	uint fidx ;	112:4:3796:3805	4988074	16	True				
ANR	4988150	IdentifierDecl	fidx		4988074	0					
ANR	4988151	IdentifierDeclType	uint		4988074	0					
ANR	4988152	Identifier	fidx		4988074	1					
ANR	4988153	IdentifierDeclStatement	gs_char chr ;	113:4:3811:3822	4988074	17	True				
ANR	4988154	IdentifierDecl	chr		4988074	0					
ANR	4988155	IdentifierDeclType	gs_char		4988074	0					
ANR	4988156	Identifier	chr		4988074	1					
ANR	4988157	IdentifierDeclStatement	gs_glyph glyph = GS_NO_GLYPH ;	114:4:3828:3856	4988074	18	True				
ANR	4988158	IdentifierDecl	glyph = GS_NO_GLYPH		4988074	0					
ANR	4988159	IdentifierDeclType	gs_glyph		4988074	0					
ANR	4988160	Identifier	glyph		4988074	1					
ANR	4988161	AssignmentExpression	glyph = GS_NO_GLYPH		4988074	2		=			
ANR	4988162	Identifier	GS_NO_GLYPH		4988074	0					
ANR	4988163	Identifier	GS_NO_GLYPH		4988074	1					
ANR	4988164	IdentifierDeclStatement	int changed = 0 ;	115:4:3862:3877	4988074	19	True				
ANR	4988165	IdentifierDecl	changed = 0		4988074	0					
ANR	4988166	IdentifierDeclType	int		4988074	0					
ANR	4988167	Identifier	changed		4988074	1					
ANR	4988168	AssignmentExpression	changed = 0		4988074	2		=			
ANR	4988169	Identifier	changed		4988074	0					
ANR	4988170	PrimaryExpression	0		4988074	1					
ANR	4988171	ExpressionStatement	pte -> FontBBox_as_Metrics2 . x = pte -> FontBBox_as_Metrics2 . y = 0	117:4:3884:3945	4988074	20	True				
ANR	4988172	AssignmentExpression	pte -> FontBBox_as_Metrics2 . x = pte -> FontBBox_as_Metrics2 . y = 0		4988074	0		=			
ANR	4988173	MemberAccess	pte -> FontBBox_as_Metrics2 . x		4988074	0					
ANR	4988174	PtrMemberAccess	pte -> FontBBox_as_Metrics2		4988074	0					
ANR	4988175	Identifier	pte		4988074	0					
ANR	4988176	Identifier	FontBBox_as_Metrics2		4988074	1					
ANR	4988177	Identifier	x		4988074	1					
ANR	4988178	AssignmentExpression	pte -> FontBBox_as_Metrics2 . y = 0		4988074	1		=			
ANR	4988179	MemberAccess	pte -> FontBBox_as_Metrics2 . y		4988074	0					
ANR	4988180	PtrMemberAccess	pte -> FontBBox_as_Metrics2		4988074	0					
ANR	4988181	Identifier	pte		4988074	0					
ANR	4988182	Identifier	FontBBox_as_Metrics2		4988074	1					
ANR	4988183	Identifier	y		4988074	1					
ANR	4988184	PrimaryExpression	0		4988074	1					
ANR	4988185	Statement	define	119:1:3949:3954	4988074	21	True				
ANR	4988186	Statement	need_left	119:8:3956:3964	4988074	22	True				
ANR	4988187	Statement	(	119:17:3965:3965	4988074	23	True				
ANR	4988188	Statement	n	119:18:3966:3966	4988074	24	True				
ANR	4988189	Statement	)	119:19:3967:3967	4988074	25	True				
ANR	4988190	IfStatement	if ( end - p < n )		4988074	26					
ANR	4988191	Condition	end - p < n	120:7:3977:3987	4988074	0	True				
ANR	4988192	RelationalExpression	end - p < n		4988074	0		<			
ANR	4988193	AdditiveExpression	end - p		4988074	0		-			
ANR	4988194	Identifier	end		4988074	0					
ANR	4988195	Identifier	p		4988074	1					
ANR	4988196	Identifier	n		4988074	1					
ANR	4988197	Statement	return_error	120:21:3991:4002	4988074	1	True				
ANR	4988198	Statement	(	120:33:4003:4003	4988074	27	True				
ANR	4988199	Statement	gs_error_rangecheck	120:34:4004:4022	4988074	28	True				
ANR	4988200	Statement	)	120:53:4023:4023	4988074	29	True				
ANR	4988201	IfStatement	if ( pte -> index == 0 )		4988074	30					
ANR	4988202	Condition	pte -> index == 0	131:8:4469:4483	4988074	0	True				
ANR	4988203	EqualityExpression	pte -> index == 0		4988074	0		==			
ANR	4988204	PtrMemberAccess	pte -> index		4988074	0					
ANR	4988205	Identifier	pte		4988074	0					
ANR	4988206	Identifier	index		4988074	1					
ANR	4988207	PrimaryExpression	0		4988074	1					
ANR	4988208	CompoundStatement		31:8:983:997	4988074	1					
ANR	4988209	IdentifierDeclStatement	int idepth = 0 ;	132:8:4496:4510	4988074	0	True				
ANR	4988210	IdentifierDecl	idepth = 0		4988074	0					
ANR	4988211	IdentifierDeclType	int		4988074	0					
ANR	4988212	Identifier	idepth		4988074	1					
ANR	4988213	AssignmentExpression	idepth = 0		4988074	2		=			
ANR	4988214	Identifier	idepth		4988074	0					
ANR	4988215	PrimaryExpression	0		4988074	1					
ANR	4988216	ExpressionStatement	pfont = pte -> fstack . items [ 0 ] . font	134:8:4521:4554	4988074	1	True				
ANR	4988217	AssignmentExpression	pfont = pte -> fstack . items [ 0 ] . font		4988074	0		=			
ANR	4988218	Identifier	pfont		4988074	0					
ANR	4988219	MemberAccess	pte -> fstack . items [ 0 ] . font		4988074	1					
ANR	4988220	ArrayIndexing	pte -> fstack . items [ 0 ]		4988074	0					
ANR	4988221	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4988222	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4988223	Identifier	pte		4988074	0					
ANR	4988224	Identifier	fstack		4988074	1					
ANR	4988225	Identifier	items		4988074	1					
ANR	4988226	PrimaryExpression	0		4988074	1					
ANR	4988227	Identifier	font		4988074	1					
ANR	4988228	ForStatement	for ( ; pfont -> FontType == ft_composite ; )		4988074	2					
ANR	4988229	Condition	pfont -> FontType == ft_composite	135:15:4571:4601	4988074	0	True				
ANR	4988230	EqualityExpression	pfont -> FontType == ft_composite		4988074	0		==			
ANR	4988231	PtrMemberAccess	pfont -> FontType		4988074	0					
ANR	4988232	Identifier	pfont		4988074	0					
ANR	4988233	Identifier	FontType		4988074	1					
ANR	4988234	Identifier	ft_composite		4988074	1					
ANR	4988235	CompoundStatement		35:12:1106:1155	4988074	1					
ANR	4988236	IdentifierDeclStatement	fmap_type fmt = ( pdata = & pfont0 -> data ) -> FMapType ;	136:12:4619:4668	4988074	0	True				
ANR	4988237	IdentifierDecl	fmt = ( pdata = & pfont0 -> data ) -> FMapType		4988074	0					
ANR	4988238	IdentifierDeclType	fmap_type		4988074	0					
ANR	4988239	Identifier	fmt		4988074	1					
ANR	4988240	AssignmentExpression	fmt = ( pdata = & pfont0 -> data ) -> FMapType		4988074	2		=			
ANR	4988241	Identifier	fmt		4988074	0					
ANR	4988242	PtrMemberAccess	( pdata = & pfont0 -> data ) -> FMapType		4988074	1					
ANR	4988243	AssignmentExpression	pdata = & pfont0 -> data		4988074	0		=			
ANR	4988244	Identifier	pdata		4988074	0					
ANR	4988245	UnaryOperationExpression	& pfont0 -> data		4988074	1					
ANR	4988246	UnaryOperator	&		4988074	0					
ANR	4988247	PtrMemberAccess	pfont0 -> data		4988074	1					
ANR	4988248	Identifier	pfont0		4988074	0					
ANR	4988249	Identifier	data		4988074	1					
ANR	4988250	Identifier	FMapType		4988074	1					
ANR	4988251	IfStatement	if ( p == end )		4988074	1					
ANR	4988252	Condition	p == end	138:16:4687:4694	4988074	0	True				
ANR	4988253	EqualityExpression	p == end		4988074	0		==			
ANR	4988254	Identifier	p		4988074	0					
ANR	4988255	Identifier	end		4988074	1					
ANR	4988256	ReturnStatement	return 2 ;	139:16:4713:4721	4988074	1	True				
ANR	4988257	PrimaryExpression	2		4988074	0					
ANR	4988258	ExpressionStatement	chr = * p	140:12:4735:4743	4988074	2	True				
ANR	4988259	AssignmentExpression	chr = * p		4988074	0		=			
ANR	4988260	Identifier	chr		4988074	0					
ANR	4988261	UnaryOperationExpression	* p		4988074	1					
ANR	4988262	UnaryOperator	*		4988074	0					
ANR	4988263	Identifier	p		4988074	1					
ANR	4988264	SwitchStatement	switch ( fmt )		4988074	3					
ANR	4988265	Condition	fmt	141:20:4765:4767	4988074	0	True				
ANR	4988266	Identifier	fmt		4988074	0					
ANR	4988267	CompoundStatement		40:25:1257:1257	4988074	1					
ANR	4988268	Label	case fmap_escape :	142:16:4788:4804	4988074	0	True				
ANR	4988269	Identifier	fmap_escape		4988074	0					
ANR	4988270	IfStatement	if ( chr != root_esc_char ( pte ) )		4988074	1					
ANR	4988271	Condition	chr != root_esc_char ( pte )	143:24:4830:4854	4988074	0	True				
ANR	4988272	EqualityExpression	chr != root_esc_char ( pte )		4988074	0		!=			
ANR	4988273	Identifier	chr		4988074	0					
ANR	4988274	CallExpression	root_esc_char ( pte )		4988074	1					
ANR	4988275	Callee	root_esc_char		4988074	0					
ANR	4988276	Identifier	root_esc_char		4988074	0					
ANR	4988277	ArgumentList	pte		4988074	1					
ANR	4988278	Argument	pte		4988074	0					
ANR	4988279	Identifier	pte		4988074	0					
ANR	4988280	BreakStatement	break ;	144:24:4881:4886	4988074	1	True				
ANR	4988281	ExpressionStatement	need_left ( 2 )	145:20:4908:4920	4988074	2	True				
ANR	4988282	CallExpression	need_left ( 2 )		4988074	0					
ANR	4988283	Callee	need_left		4988074	0					
ANR	4988284	Identifier	need_left		4988074	0					
ANR	4988285	ArgumentList	2		4988074	1					
ANR	4988286	Argument	2		4988074	0					
ANR	4988287	PrimaryExpression	2		4988074	0					
ANR	4988288	ExpressionStatement	fidx = p [ 1 ]	146:20:4942:4953	4988074	3	True				
ANR	4988289	AssignmentExpression	fidx = p [ 1 ]		4988074	0		=			
ANR	4988290	Identifier	fidx		4988074	0					
ANR	4988291	ArrayIndexing	p [ 1 ]		4988074	1					
ANR	4988292	Identifier	p		4988074	0					
ANR	4988293	PrimaryExpression	1		4988074	1					
ANR	4988294	ExpressionStatement	p += 2	147:20:4975:4981	4988074	4	True				
ANR	4988295	AssignmentExpression	p += 2		4988074	0		+=			
ANR	4988296	Identifier	p		4988074	0					
ANR	4988297	PrimaryExpression	2		4988074	1					
ANR	4988298	ExpressionStatement	"if_debug1m ( 'j' , pte -> memory , ""[j]from root: escape %d\\n"" , fidx )"	148:20:5003:5066	4988074	5	True				
ANR	4988299	CallExpression	"if_debug1m ( 'j' , pte -> memory , ""[j]from root: escape %d\\n"" , fidx )"		4988074	0					
ANR	4988300	Callee	if_debug1m		4988074	0					
ANR	4988301	Identifier	if_debug1m		4988074	0					
ANR	4988302	ArgumentList	'j'		4988074	1					
ANR	4988303	Argument	'j'		4988074	0					
ANR	4988304	PrimaryExpression	'j'		4988074	0					
ANR	4988305	Argument	pte -> memory		4988074	1					
ANR	4988306	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988307	Identifier	pte		4988074	0					
ANR	4988308	Identifier	memory		4988074	1					
ANR	4988309	Argument	"""[j]from root: escape %d\\n"""		4988074	2					
ANR	4988310	PrimaryExpression	"""[j]from root: escape %d\\n"""		4988074	0					
ANR	4988311	Argument	fidx		4988074	3					
ANR	4988312	Identifier	fidx		4988074	0					
ANR	4988313	Label	rdown :	149:18:5086:5091	4988074	6	True				
ANR	4988314	Identifier	rdown		4988074	0					
ANR	4988315	ExpressionStatement	"select_descendant ( pfont , pdata , fidx , idepth )"	149:24:5092:5137	4988074	7	True				
ANR	4988316	CallExpression	"select_descendant ( pfont , pdata , fidx , idepth )"		4988074	0					
ANR	4988317	Callee	select_descendant		4988074	0					
ANR	4988318	Identifier	select_descendant		4988074	0					
ANR	4988319	ArgumentList	pfont		4988074	1					
ANR	4988320	Argument	pfont		4988074	0					
ANR	4988321	Identifier	pfont		4988074	0					
ANR	4988322	Argument	pdata		4988074	1					
ANR	4988323	Identifier	pdata		4988074	0					
ANR	4988324	Argument	fidx		4988074	2					
ANR	4988325	Identifier	fidx		4988074	0					
ANR	4988326	Argument	idepth		4988074	3					
ANR	4988327	Identifier	idepth		4988074	0					
ANR	4988328	ExpressionStatement	"if_debug2m ( 'j' , pte -> memory , ""[j]... new depth=%d, new font=0x%lx\\n"" , idepth , ( ulong ) pfont )"	150:20:5159:5282	4988074	8	True				
ANR	4988329	CallExpression	"if_debug2m ( 'j' , pte -> memory , ""[j]... new depth=%d, new font=0x%lx\\n"" , idepth , ( ulong ) pfont )"		4988074	0					
ANR	4988330	Callee	if_debug2m		4988074	0					
ANR	4988331	Identifier	if_debug2m		4988074	0					
ANR	4988332	ArgumentList	'j'		4988074	1					
ANR	4988333	Argument	'j'		4988074	0					
ANR	4988334	PrimaryExpression	'j'		4988074	0					
ANR	4988335	Argument	pte -> memory		4988074	1					
ANR	4988336	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988337	Identifier	pte		4988074	0					
ANR	4988338	Identifier	memory		4988074	1					
ANR	4988339	Argument	"""[j]... new depth=%d, new font=0x%lx\\n"""		4988074	2					
ANR	4988340	PrimaryExpression	"""[j]... new depth=%d, new font=0x%lx\\n"""		4988074	0					
ANR	4988341	Argument	idepth		4988074	3					
ANR	4988342	Identifier	idepth		4988074	0					
ANR	4988343	Argument	( ulong ) pfont		4988074	4					
ANR	4988344	CastExpression	( ulong ) pfont		4988074	0					
ANR	4988345	CastTarget	ulong		4988074	0					
ANR	4988346	Identifier	pfont		4988074	1					
ANR	4988347	ContinueStatement	continue ;	152:20:5304:5312	4988074	9	True				
ANR	4988348	Label	case fmap_double_escape :	153:16:5330:5353	4988074	10	True				
ANR	4988349	Identifier	fmap_double_escape		4988074	0					
ANR	4988350	IfStatement	if ( chr != root_esc_char ( pte ) )		4988074	11					
ANR	4988351	Condition	chr != root_esc_char ( pte )	154:24:5379:5403	4988074	0	True				
ANR	4988352	EqualityExpression	chr != root_esc_char ( pte )		4988074	0		!=			
ANR	4988353	Identifier	chr		4988074	0					
ANR	4988354	CallExpression	root_esc_char ( pte )		4988074	1					
ANR	4988355	Callee	root_esc_char		4988074	0					
ANR	4988356	Identifier	root_esc_char		4988074	0					
ANR	4988357	ArgumentList	pte		4988074	1					
ANR	4988358	Argument	pte		4988074	0					
ANR	4988359	Identifier	pte		4988074	0					
ANR	4988360	BreakStatement	break ;	155:24:5430:5435	4988074	1	True				
ANR	4988361	ExpressionStatement	need_left ( 2 )	156:20:5457:5469	4988074	12	True				
ANR	4988362	CallExpression	need_left ( 2 )		4988074	0					
ANR	4988363	Callee	need_left		4988074	0					
ANR	4988364	Identifier	need_left		4988074	0					
ANR	4988365	ArgumentList	2		4988074	1					
ANR	4988366	Argument	2		4988074	0					
ANR	4988367	PrimaryExpression	2		4988074	0					
ANR	4988368	ExpressionStatement	fidx = p [ 1 ]	157:20:5491:5502	4988074	13	True				
ANR	4988369	AssignmentExpression	fidx = p [ 1 ]		4988074	0		=			
ANR	4988370	Identifier	fidx		4988074	0					
ANR	4988371	ArrayIndexing	p [ 1 ]		4988074	1					
ANR	4988372	Identifier	p		4988074	0					
ANR	4988373	PrimaryExpression	1		4988074	1					
ANR	4988374	ExpressionStatement	p += 2	158:20:5524:5530	4988074	14	True				
ANR	4988375	AssignmentExpression	p += 2		4988074	0		+=			
ANR	4988376	Identifier	p		4988074	0					
ANR	4988377	PrimaryExpression	2		4988074	1					
ANR	4988378	IfStatement	if ( fidx == chr )		4988074	15					
ANR	4988379	Condition	fidx == chr	159:24:5556:5566	4988074	0	True				
ANR	4988380	EqualityExpression	fidx == chr		4988074	0		==			
ANR	4988381	Identifier	fidx		4988074	0					
ANR	4988382	Identifier	chr		4988074	1					
ANR	4988383	CompoundStatement		58:37:2056:2056	4988074	1					
ANR	4988384	ExpressionStatement	need_left ( 1 )	160:24:5595:5607	4988074	0	True				
ANR	4988385	CallExpression	need_left ( 1 )		4988074	0					
ANR	4988386	Callee	need_left		4988074	0					
ANR	4988387	Identifier	need_left		4988074	0					
ANR	4988388	ArgumentList	1		4988074	1					
ANR	4988389	Argument	1		4988074	0					
ANR	4988390	PrimaryExpression	1		4988074	0					
ANR	4988391	ExpressionStatement	fidx = * p ++ + 256	161:24:5633:5650	4988074	1	True				
ANR	4988392	AssignmentExpression	fidx = * p ++ + 256		4988074	0		=			
ANR	4988393	Identifier	fidx		4988074	0					
ANR	4988394	AdditiveExpression	* p ++ + 256		4988074	1		+			
ANR	4988395	UnaryOperationExpression	* p ++		4988074	0					
ANR	4988396	UnaryOperator	*		4988074	0					
ANR	4988397	PostIncDecOperationExpression	p ++		4988074	1					
ANR	4988398	Identifier	p		4988074	0					
ANR	4988399	IncDec	++		4988074	1					
ANR	4988400	PrimaryExpression	256		4988074	1					
ANR	4988401	ExpressionStatement	"if_debug1m ( 'j' , pte -> memory , ""[j]from root: double escape %d\\n"" , fidx )"	163:20:5694:5764	4988074	16	True				
ANR	4988402	CallExpression	"if_debug1m ( 'j' , pte -> memory , ""[j]from root: double escape %d\\n"" , fidx )"		4988074	0					
ANR	4988403	Callee	if_debug1m		4988074	0					
ANR	4988404	Identifier	if_debug1m		4988074	0					
ANR	4988405	ArgumentList	'j'		4988074	1					
ANR	4988406	Argument	'j'		4988074	0					
ANR	4988407	PrimaryExpression	'j'		4988074	0					
ANR	4988408	Argument	pte -> memory		4988074	1					
ANR	4988409	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988410	Identifier	pte		4988074	0					
ANR	4988411	Identifier	memory		4988074	1					
ANR	4988412	Argument	"""[j]from root: double escape %d\\n"""		4988074	2					
ANR	4988413	PrimaryExpression	"""[j]from root: double escape %d\\n"""		4988074	0					
ANR	4988414	Argument	fidx		4988074	3					
ANR	4988415	Identifier	fidx		4988074	0					
ANR	4988416	GotoStatement	goto rdown ;	164:20:5786:5796	4988074	17	True				
ANR	4988417	Identifier	rdown		4988074	0					
ANR	4988418	Label	case fmap_shift :	165:16:5814:5829	4988074	18	True				
ANR	4988419	Identifier	fmap_shift		4988074	0					
ANR	4988420	IfStatement	if ( chr == pdata -> ShiftIn )		4988074	19					
ANR	4988421	Condition	chr == pdata -> ShiftIn	166:24:5855:5875	4988074	0	True				
ANR	4988422	EqualityExpression	chr == pdata -> ShiftIn		4988074	0		==			
ANR	4988423	Identifier	chr		4988074	0					
ANR	4988424	PtrMemberAccess	pdata -> ShiftIn		4988074	1					
ANR	4988425	Identifier	pdata		4988074	0					
ANR	4988426	Identifier	ShiftIn		4988074	1					
ANR	4988427	ExpressionStatement	fidx = 0	167:24:5902:5910	4988074	1	True				
ANR	4988428	AssignmentExpression	fidx = 0		4988074	0		=			
ANR	4988429	Identifier	fidx		4988074	0					
ANR	4988430	PrimaryExpression	0		4988074	1					
ANR	4988431	ElseStatement	else		4988074	0					
ANR	4988432	IfStatement	if ( chr == pdata -> ShiftOut )		4988074	0					
ANR	4988433	Condition	chr == pdata -> ShiftOut	168:29:5941:5962	4988074	0	True				
ANR	4988434	EqualityExpression	chr == pdata -> ShiftOut		4988074	0		==			
ANR	4988435	Identifier	chr		4988074	0					
ANR	4988436	PtrMemberAccess	pdata -> ShiftOut		4988074	1					
ANR	4988437	Identifier	pdata		4988074	0					
ANR	4988438	Identifier	ShiftOut		4988074	1					
ANR	4988439	ExpressionStatement	fidx = 1	169:24:5989:5997	4988074	1	True				
ANR	4988440	AssignmentExpression	fidx = 1		4988074	0		=			
ANR	4988441	Identifier	fidx		4988074	0					
ANR	4988442	PrimaryExpression	1		4988074	1					
ANR	4988443	ElseStatement	else		4988074	0					
ANR	4988444	BreakStatement	break ;	171:24:6048:6053	4988074	0	True				
ANR	4988445	ExpressionStatement	p ++	172:20:6075:6078	4988074	20	True				
ANR	4988446	PostIncDecOperationExpression	p ++		4988074	0					
ANR	4988447	Identifier	p		4988074	0					
ANR	4988448	IncDec	++		4988074	1					
ANR	4988449	ExpressionStatement	"if_debug1m ( 'j' , pte -> memory , ""[j]from root: shift %d\\n"" , fidx )"	173:20:6100:6162	4988074	21	True				
ANR	4988450	CallExpression	"if_debug1m ( 'j' , pte -> memory , ""[j]from root: shift %d\\n"" , fidx )"		4988074	0					
ANR	4988451	Callee	if_debug1m		4988074	0					
ANR	4988452	Identifier	if_debug1m		4988074	0					
ANR	4988453	ArgumentList	'j'		4988074	1					
ANR	4988454	Argument	'j'		4988074	0					
ANR	4988455	PrimaryExpression	'j'		4988074	0					
ANR	4988456	Argument	pte -> memory		4988074	1					
ANR	4988457	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988458	Identifier	pte		4988074	0					
ANR	4988459	Identifier	memory		4988074	1					
ANR	4988460	Argument	"""[j]from root: shift %d\\n"""		4988074	2					
ANR	4988461	PrimaryExpression	"""[j]from root: shift %d\\n"""		4988074	0					
ANR	4988462	Argument	fidx		4988074	3					
ANR	4988463	Identifier	fidx		4988074	0					
ANR	4988464	GotoStatement	goto rdown ;	174:20:6184:6194	4988074	22	True				
ANR	4988465	Identifier	rdown		4988074	0					
ANR	4988466	Label	default :	175:16:6212:6219	4988074	23	True				
ANR	4988467	Identifier	default		4988074	0					
ANR	4988468	BreakStatement	break ;	176:20:6241:6246	4988074	24	True				
ANR	4988469	BreakStatement	break ;	178:12:6274:6279	4988074	4	True				
ANR	4988470	IfStatement	if ( idepth != 0 )		4988074	3					
ANR	4988471	Condition	idepth != 0	182:12:6405:6415	4988074	0	True				
ANR	4988472	EqualityExpression	idepth != 0		4988074	0		!=			
ANR	4988473	Identifier	idepth		4988074	0					
ANR	4988474	PrimaryExpression	0		4988074	1					
ANR	4988475	CompoundStatement		82:12:2919:2927	4988074	1					
ANR	4988476	IdentifierDeclStatement	int code ;	183:12:6432:6440	4988074	0	True				
ANR	4988477	IdentifierDecl	code		4988074	0					
ANR	4988478	IdentifierDeclType	int		4988074	0					
ANR	4988479	Identifier	code		4988074	1					
ANR	4988480	ExpressionStatement	pte -> fstack . depth = idepth	185:12:6455:6481	4988074	1	True				
ANR	4988481	AssignmentExpression	pte -> fstack . depth = idepth		4988074	0		=			
ANR	4988482	MemberAccess	pte -> fstack . depth		4988074	0					
ANR	4988483	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4988484	Identifier	pte		4988074	0					
ANR	4988485	Identifier	fstack		4988074	1					
ANR	4988486	Identifier	depth		4988074	1					
ANR	4988487	Identifier	idepth		4988074	1					
ANR	4988488	ExpressionStatement	code = gs_stack_modal_fonts ( pte )	186:12:6495:6527	4988074	2	True				
ANR	4988489	AssignmentExpression	code = gs_stack_modal_fonts ( pte )		4988074	0		=			
ANR	4988490	Identifier	code		4988074	0					
ANR	4988491	CallExpression	gs_stack_modal_fonts ( pte )		4988074	1					
ANR	4988492	Callee	gs_stack_modal_fonts		4988074	0					
ANR	4988493	Identifier	gs_stack_modal_fonts		4988074	0					
ANR	4988494	ArgumentList	pte		4988074	1					
ANR	4988495	Argument	pte		4988074	0					
ANR	4988496	Identifier	pte		4988074	0					
ANR	4988497	IfStatement	if ( code < 0 )		4988074	3					
ANR	4988498	Condition	code < 0	187:16:6545:6552	4988074	0	True				
ANR	4988499	RelationalExpression	code < 0		4988074	0		<			
ANR	4988500	Identifier	code		4988074	0					
ANR	4988501	PrimaryExpression	0		4988074	1					
ANR	4988502	ReturnStatement	return code ;	188:16:6571:6582	4988074	1	True				
ANR	4988503	Identifier	code		4988074	0					
ANR	4988504	IfStatement	if ( pte -> fstack . depth > idepth )		4988074	4					
ANR	4988505	Condition	pte -> fstack . depth > idepth	189:16:6600:6625	4988074	0	True				
ANR	4988506	RelationalExpression	pte -> fstack . depth > idepth		4988074	0		>			
ANR	4988507	MemberAccess	pte -> fstack . depth		4988074	0					
ANR	4988508	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4988509	Identifier	pte		4988074	0					
ANR	4988510	Identifier	fstack		4988074	1					
ANR	4988511	Identifier	depth		4988074	1					
ANR	4988512	Identifier	idepth		4988074	1					
ANR	4988513	ExpressionStatement	changed = 1	190:16:6644:6655	4988074	1	True				
ANR	4988514	AssignmentExpression	changed = 1		4988074	0		=			
ANR	4988515	Identifier	changed		4988074	0					
ANR	4988516	PrimaryExpression	1		4988074	1					
ANR	4988517	ExpressionStatement	orig_depth = fdepth = pte -> fstack . depth	191:12:6669:6708	4988074	5	True				
ANR	4988518	AssignmentExpression	orig_depth = fdepth = pte -> fstack . depth		4988074	0		=			
ANR	4988519	Identifier	orig_depth		4988074	0					
ANR	4988520	AssignmentExpression	fdepth = pte -> fstack . depth		4988074	1		=			
ANR	4988521	Identifier	fdepth		4988074	0					
ANR	4988522	MemberAccess	pte -> fstack . depth		4988074	1					
ANR	4988523	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4988524	Identifier	pte		4988074	0					
ANR	4988525	Identifier	fstack		4988074	1					
ANR	4988526	Identifier	depth		4988074	1					
ANR	4988527	Label	up :	196:2:6773:6775	4988074	31	True				
ANR	4988528	Identifier	up		4988074	0					
ANR	4988529	IfStatement	if ( p == end )		4988074	32					
ANR	4988530	Condition	p == end	196:9:6780:6787	4988074	0	True				
ANR	4988531	EqualityExpression	p == end		4988074	0		==			
ANR	4988532	Identifier	p		4988074	0					
ANR	4988533	Identifier	end		4988074	1					
ANR	4988534	ReturnStatement	return 2 ;	197:8:6798:6806	4988074	1	True				
ANR	4988535	PrimaryExpression	2		4988074	0					
ANR	4988536	ExpressionStatement	chr = * p	198:4:6812:6820	4988074	33	True				
ANR	4988537	AssignmentExpression	chr = * p		4988074	0		=			
ANR	4988538	Identifier	chr		4988074	0					
ANR	4988539	UnaryOperationExpression	* p		4988074	1					
ANR	4988540	UnaryOperator	*		4988074	0					
ANR	4988541	Identifier	p		4988074	1					
ANR	4988542	WhileStatement	while ( fdepth > 0 )		4988074	34					
ANR	4988543	Condition	fdepth > 0	199:11:6833:6842	4988074	0	True				
ANR	4988544	RelationalExpression	fdepth > 0		4988074	0		>			
ANR	4988545	Identifier	fdepth		4988074	0					
ANR	4988546	PrimaryExpression	0		4988074	1					
ANR	4988547	CompoundStatement		98:23:3332:3332	4988074	1					
ANR	4988548	ExpressionStatement	pfont = pte -> fstack . items [ fdepth - 1 ] . font	200:8:6855:6897	4988074	0	True				
ANR	4988549	AssignmentExpression	pfont = pte -> fstack . items [ fdepth - 1 ] . font		4988074	0		=			
ANR	4988550	Identifier	pfont		4988074	0					
ANR	4988551	MemberAccess	pte -> fstack . items [ fdepth - 1 ] . font		4988074	1					
ANR	4988552	ArrayIndexing	pte -> fstack . items [ fdepth - 1 ]		4988074	0					
ANR	4988553	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4988554	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4988555	Identifier	pte		4988074	0					
ANR	4988556	Identifier	fstack		4988074	1					
ANR	4988557	Identifier	items		4988074	1					
ANR	4988558	AdditiveExpression	fdepth - 1		4988074	1		-			
ANR	4988559	Identifier	fdepth		4988074	0					
ANR	4988560	PrimaryExpression	1		4988074	1					
ANR	4988561	Identifier	font		4988074	1					
ANR	4988562	ExpressionStatement	pdata = & pfont0 -> data	201:8:6907:6928	4988074	1	True				
ANR	4988563	AssignmentExpression	pdata = & pfont0 -> data		4988074	0		=			
ANR	4988564	Identifier	pdata		4988074	0					
ANR	4988565	UnaryOperationExpression	& pfont0 -> data		4988074	1					
ANR	4988566	UnaryOperator	&		4988074	0					
ANR	4988567	PtrMemberAccess	pfont0 -> data		4988074	1					
ANR	4988568	Identifier	pfont0		4988074	0					
ANR	4988569	Identifier	data		4988074	1					
ANR	4988570	SwitchStatement	switch ( pdata -> FMapType )		4988074	2					
ANR	4988571	Condition	pdata -> FMapType	202:16:6946:6960	4988074	0	True				
ANR	4988572	PtrMemberAccess	pdata -> FMapType		4988074	0					
ANR	4988573	Identifier	pdata		4988074	0					
ANR	4988574	Identifier	FMapType		4988074	1					
ANR	4988575	CompoundStatement		101:33:3450:3450	4988074	1					
ANR	4988576	Label	default :	203:12:6977:6984	4988074	0	True				
ANR	4988577	Identifier	default		4988074	0					
ANR	4988578	ExpressionStatement	fdepth --	204:16:7019:7027	4988074	1	True				
ANR	4988579	PostIncDecOperationExpression	fdepth --		4988074	0					
ANR	4988580	Identifier	fdepth		4988074	0					
ANR	4988581	IncDec	--		4988074	1					
ANR	4988582	ContinueStatement	continue ;	205:16:7045:7053	4988074	2	True				
ANR	4988583	Label	case fmap_escape :	207:12:7068:7084	4988074	3	True				
ANR	4988584	Identifier	fmap_escape		4988074	0					
ANR	4988585	IfStatement	if ( chr != root_esc_char ( pte ) )		4988074	4					
ANR	4988586	Condition	chr != root_esc_char ( pte )	208:20:7106:7130	4988074	0	True				
ANR	4988587	EqualityExpression	chr != root_esc_char ( pte )		4988074	0		!=			
ANR	4988588	Identifier	chr		4988074	0					
ANR	4988589	CallExpression	root_esc_char ( pte )		4988074	1					
ANR	4988590	Callee	root_esc_char		4988074	0					
ANR	4988591	Identifier	root_esc_char		4988074	0					
ANR	4988592	ArgumentList	pte		4988074	1					
ANR	4988593	Argument	pte		4988074	0					
ANR	4988594	Identifier	pte		4988074	0					
ANR	4988595	BreakStatement	break ;	209:20:7153:7158	4988074	1	True				
ANR	4988596	ExpressionStatement	need_left ( 2 )	210:16:7176:7188	4988074	5	True				
ANR	4988597	CallExpression	need_left ( 2 )		4988074	0					
ANR	4988598	Callee	need_left		4988074	0					
ANR	4988599	Identifier	need_left		4988074	0					
ANR	4988600	ArgumentList	2		4988074	1					
ANR	4988601	Argument	2		4988074	0					
ANR	4988602	PrimaryExpression	2		4988074	0					
ANR	4988603	ExpressionStatement	fidx = * ++ p	211:16:7206:7217	4988074	6	True				
ANR	4988604	AssignmentExpression	fidx = * ++ p		4988074	0		=			
ANR	4988605	Identifier	fidx		4988074	0					
ANR	4988606	UnaryOperationExpression	* ++ p		4988074	1					
ANR	4988607	UnaryOperator	*		4988074	0					
ANR	4988608	UnaryExpression	++ p		4988074	1					
ANR	4988609	IncDec	++		4988074	0					
ANR	4988610	Identifier	p		4988074	1					
ANR	4988611	ExpressionStatement	"if_debug1m ( 'j' , pte -> memory , ""[j]next: escape %d\\n"" , fidx )"	212:16:7235:7293	4988074	7	True				
ANR	4988612	CallExpression	"if_debug1m ( 'j' , pte -> memory , ""[j]next: escape %d\\n"" , fidx )"		4988074	0					
ANR	4988613	Callee	if_debug1m		4988074	0					
ANR	4988614	Identifier	if_debug1m		4988074	0					
ANR	4988615	ArgumentList	'j'		4988074	1					
ANR	4988616	Argument	'j'		4988074	0					
ANR	4988617	PrimaryExpression	'j'		4988074	0					
ANR	4988618	Argument	pte -> memory		4988074	1					
ANR	4988619	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988620	Identifier	pte		4988074	0					
ANR	4988621	Identifier	memory		4988074	1					
ANR	4988622	Argument	"""[j]next: escape %d\\n"""		4988074	2					
ANR	4988623	PrimaryExpression	"""[j]next: escape %d\\n"""		4988074	0					
ANR	4988624	Argument	fidx		4988074	3					
ANR	4988625	Identifier	fidx		4988074	0					
ANR	4988626	IfStatement	if ( fidx == chr && fdepth > 1 )		4988074	8					
ANR	4988627	Condition	fidx == chr && fdepth > 1	215:20:7451:7475	4988074	0	True				
ANR	4988628	AndExpression	fidx == chr && fdepth > 1		4988074	0		&&			
ANR	4988629	EqualityExpression	fidx == chr		4988074	0		==			
ANR	4988630	Identifier	fidx		4988074	0					
ANR	4988631	Identifier	chr		4988074	1					
ANR	4988632	RelationalExpression	fdepth > 1		4988074	1		>			
ANR	4988633	Identifier	fdepth		4988074	0					
ANR	4988634	PrimaryExpression	1		4988074	1					
ANR	4988635	CompoundStatement		114:47:3965:3965	4988074	1					
ANR	4988636	ExpressionStatement	fdepth --	216:20:7500:7508	4988074	0	True				
ANR	4988637	PostIncDecOperationExpression	fdepth --		4988074	0					
ANR	4988638	Identifier	fdepth		4988074	0					
ANR	4988639	IncDec	--		4988074	1					
ANR	4988640	GotoStatement	goto up ;	217:20:7530:7537	4988074	1	True				
ANR	4988641	Identifier	up		4988074	0					
ANR	4988642	Label	down :	219:14:7571:7575	4988074	9	True				
ANR	4988643	Identifier	down		4988074	0					
ANR	4988644	IfStatement	if ( ++ p == end )		4988074	10					
ANR	4988645	Condition	++ p == end	219:23:7580:7589	4988074	0	True				
ANR	4988646	EqualityExpression	++ p == end		4988074	0		==			
ANR	4988647	UnaryExpression	++ p		4988074	0					
ANR	4988648	IncDec	++		4988074	0					
ANR	4988649	Identifier	p		4988074	1					
ANR	4988650	Identifier	end		4988074	1					
ANR	4988651	ReturnStatement	return 2 ;	220:20:7612:7620	4988074	1	True				
ANR	4988652	PrimaryExpression	2		4988074	0					
ANR	4988653	ExpressionStatement	chr = * p	221:16:7638:7646	4988074	11	True				
ANR	4988654	AssignmentExpression	chr = * p		4988074	0		=			
ANR	4988655	Identifier	chr		4988074	0					
ANR	4988656	UnaryOperationExpression	* p		4988074	1					
ANR	4988657	UnaryOperator	*		4988074	0					
ANR	4988658	Identifier	p		4988074	1					
ANR	4988659	ExpressionStatement	fdepth --	222:16:7664:7672	4988074	12	True				
ANR	4988660	PostIncDecOperationExpression	fdepth --		4988074	0					
ANR	4988661	Identifier	fdepth		4988074	0					
ANR	4988662	IncDec	--		4988074	1					
ANR	4988663	DoStatement	do		4988074	13					
ANR	4988664	CompoundStatement		122:19:4180:4180	4988074	0					
ANR	4988665	ExpressionStatement	"select_descendant ( pfont , pdata , fidx , fdepth )"	224:20:7715:7760	4988074	0	True				
ANR	4988666	CallExpression	"select_descendant ( pfont , pdata , fidx , fdepth )"		4988074	0					
ANR	4988667	Callee	select_descendant		4988074	0					
ANR	4988668	Identifier	select_descendant		4988074	0					
ANR	4988669	ArgumentList	pfont		4988074	1					
ANR	4988670	Argument	pfont		4988074	0					
ANR	4988671	Identifier	pfont		4988074	0					
ANR	4988672	Argument	pdata		4988074	1					
ANR	4988673	Identifier	pdata		4988074	0					
ANR	4988674	Argument	fidx		4988074	2					
ANR	4988675	Identifier	fidx		4988074	0					
ANR	4988676	Argument	fdepth		4988074	3					
ANR	4988677	Identifier	fdepth		4988074	0					
ANR	4988678	ExpressionStatement	"if_debug3m ( 'j' , pte -> memory , ""[j]down from modal: new depth=%d, index=%d, new font=0x%lx\\n"" , fdepth , fidx , ( ulong ) pfont )"	225:20:7782:7934	4988074	1	True				
ANR	4988679	CallExpression	"if_debug3m ( 'j' , pte -> memory , ""[j]down from modal: new depth=%d, index=%d, new font=0x%lx\\n"" , fdepth , fidx , ( ulong ) pfont )"		4988074	0					
ANR	4988680	Callee	if_debug3m		4988074	0					
ANR	4988681	Identifier	if_debug3m		4988074	0					
ANR	4988682	ArgumentList	'j'		4988074	1					
ANR	4988683	Argument	'j'		4988074	0					
ANR	4988684	PrimaryExpression	'j'		4988074	0					
ANR	4988685	Argument	pte -> memory		4988074	1					
ANR	4988686	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988687	Identifier	pte		4988074	0					
ANR	4988688	Identifier	memory		4988074	1					
ANR	4988689	Argument	"""[j]down from modal: new depth=%d, index=%d, new font=0x%lx\\n"""		4988074	2					
ANR	4988690	PrimaryExpression	"""[j]down from modal: new depth=%d, index=%d, new font=0x%lx\\n"""		4988074	0					
ANR	4988691	Argument	fdepth		4988074	3					
ANR	4988692	Identifier	fdepth		4988074	0					
ANR	4988693	Argument	fidx		4988074	4					
ANR	4988694	Identifier	fidx		4988074	0					
ANR	4988695	Argument	( ulong ) pfont		4988074	5					
ANR	4988696	CastExpression	( ulong ) pfont		4988074	0					
ANR	4988697	CastTarget	ulong		4988074	0					
ANR	4988698	Identifier	pfont		4988074	1					
ANR	4988699	IfStatement	if ( pfont -> FontType != ft_composite )		4988074	2					
ANR	4988700	Condition	pfont -> FontType != ft_composite	227:24:7960:7990	4988074	0	True				
ANR	4988701	EqualityExpression	pfont -> FontType != ft_composite		4988074	0		!=			
ANR	4988702	PtrMemberAccess	pfont -> FontType		4988074	0					
ANR	4988703	Identifier	pfont		4988074	0					
ANR	4988704	Identifier	FontType		4988074	1					
ANR	4988705	Identifier	ft_composite		4988074	1					
ANR	4988706	BreakStatement	break ;	228:24:8017:8022	4988074	1	True				
ANR	4988707	ExpressionStatement	pdata = & pfont0 -> data	229:20:8044:8065	4988074	3	True				
ANR	4988708	AssignmentExpression	pdata = & pfont0 -> data		4988074	0		=			
ANR	4988709	Identifier	pdata		4988074	0					
ANR	4988710	UnaryOperationExpression	& pfont0 -> data		4988074	1					
ANR	4988711	UnaryOperator	&		4988074	0					
ANR	4988712	PtrMemberAccess	pfont0 -> data		4988074	1					
ANR	4988713	Identifier	pfont0		4988074	0					
ANR	4988714	Identifier	data		4988074	1					
ANR	4988715	ExpressionStatement	fidx = 0	230:20:8087:8095	4988074	4	True				
ANR	4988716	AssignmentExpression	fidx = 0		4988074	0		=			
ANR	4988717	Identifier	fidx		4988074	0					
ANR	4988718	PrimaryExpression	0		4988074	1					
ANR	4988719	Condition	pdata -> FMapType == fmap_escape	232:23:8138:8167	4988074	1	True				
ANR	4988720	EqualityExpression	pdata -> FMapType == fmap_escape		4988074	0		==			
ANR	4988721	PtrMemberAccess	pdata -> FMapType		4988074	0					
ANR	4988722	Identifier	pdata		4988074	0					
ANR	4988723	Identifier	FMapType		4988074	1					
ANR	4988724	Identifier	fmap_escape		4988074	1					
ANR	4988725	ContinueStatement	continue ;	233:16:8187:8195	4988074	14	True				
ANR	4988726	Label	case fmap_double_escape :	235:12:8210:8233	4988074	15	True				
ANR	4988727	Identifier	fmap_double_escape		4988074	0					
ANR	4988728	IfStatement	if ( chr != root_esc_char ( pte ) )		4988074	16					
ANR	4988729	Condition	chr != root_esc_char ( pte )	236:20:8255:8279	4988074	0	True				
ANR	4988730	EqualityExpression	chr != root_esc_char ( pte )		4988074	0		!=			
ANR	4988731	Identifier	chr		4988074	0					
ANR	4988732	CallExpression	root_esc_char ( pte )		4988074	1					
ANR	4988733	Callee	root_esc_char		4988074	0					
ANR	4988734	Identifier	root_esc_char		4988074	0					
ANR	4988735	ArgumentList	pte		4988074	1					
ANR	4988736	Argument	pte		4988074	0					
ANR	4988737	Identifier	pte		4988074	0					
ANR	4988738	BreakStatement	break ;	237:20:8302:8307	4988074	1	True				
ANR	4988739	ExpressionStatement	need_left ( 2 )	238:16:8325:8337	4988074	17	True				
ANR	4988740	CallExpression	need_left ( 2 )		4988074	0					
ANR	4988741	Callee	need_left		4988074	0					
ANR	4988742	Identifier	need_left		4988074	0					
ANR	4988743	ArgumentList	2		4988074	1					
ANR	4988744	Argument	2		4988074	0					
ANR	4988745	PrimaryExpression	2		4988074	0					
ANR	4988746	ExpressionStatement	fidx = * ++ p	239:16:8355:8366	4988074	18	True				
ANR	4988747	AssignmentExpression	fidx = * ++ p		4988074	0		=			
ANR	4988748	Identifier	fidx		4988074	0					
ANR	4988749	UnaryOperationExpression	* ++ p		4988074	1					
ANR	4988750	UnaryOperator	*		4988074	0					
ANR	4988751	UnaryExpression	++ p		4988074	1					
ANR	4988752	IncDec	++		4988074	0					
ANR	4988753	Identifier	p		4988074	1					
ANR	4988754	IfStatement	if ( fidx == chr )		4988074	19					
ANR	4988755	Condition	fidx == chr	240:20:8388:8398	4988074	0	True				
ANR	4988756	EqualityExpression	fidx == chr		4988074	0		==			
ANR	4988757	Identifier	fidx		4988074	0					
ANR	4988758	Identifier	chr		4988074	1					
ANR	4988759	CompoundStatement		139:33:4888:4888	4988074	1					
ANR	4988760	ExpressionStatement	need_left ( 2 )	241:20:8423:8435	4988074	0	True				
ANR	4988761	CallExpression	need_left ( 2 )		4988074	0					
ANR	4988762	Callee	need_left		4988074	0					
ANR	4988763	Identifier	need_left		4988074	0					
ANR	4988764	ArgumentList	2		4988074	1					
ANR	4988765	Argument	2		4988074	0					
ANR	4988766	PrimaryExpression	2		4988074	0					
ANR	4988767	ExpressionStatement	fidx = * ++ p + 256	242:20:8457:8474	4988074	1	True				
ANR	4988768	AssignmentExpression	fidx = * ++ p + 256		4988074	0		=			
ANR	4988769	Identifier	fidx		4988074	0					
ANR	4988770	AdditiveExpression	* ++ p + 256		4988074	1		+			
ANR	4988771	UnaryOperationExpression	* ++ p		4988074	0					
ANR	4988772	UnaryOperator	*		4988074	0					
ANR	4988773	UnaryExpression	++ p		4988074	1					
ANR	4988774	IncDec	++		4988074	0					
ANR	4988775	Identifier	p		4988074	1					
ANR	4988776	PrimaryExpression	256		4988074	1					
ANR	4988777	ExpressionStatement	"if_debug1m ( 'j' , pte -> memory , ""[j]next: double escape %d\\n"" , fidx )"	244:16:8510:8575	4988074	20	True				
ANR	4988778	CallExpression	"if_debug1m ( 'j' , pte -> memory , ""[j]next: double escape %d\\n"" , fidx )"		4988074	0					
ANR	4988779	Callee	if_debug1m		4988074	0					
ANR	4988780	Identifier	if_debug1m		4988074	0					
ANR	4988781	ArgumentList	'j'		4988074	1					
ANR	4988782	Argument	'j'		4988074	0					
ANR	4988783	PrimaryExpression	'j'		4988074	0					
ANR	4988784	Argument	pte -> memory		4988074	1					
ANR	4988785	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988786	Identifier	pte		4988074	0					
ANR	4988787	Identifier	memory		4988074	1					
ANR	4988788	Argument	"""[j]next: double escape %d\\n"""		4988074	2					
ANR	4988789	PrimaryExpression	"""[j]next: double escape %d\\n"""		4988074	0					
ANR	4988790	Argument	fidx		4988074	3					
ANR	4988791	Identifier	fidx		4988074	0					
ANR	4988792	GotoStatement	goto down ;	245:16:8593:8602	4988074	21	True				
ANR	4988793	Identifier	down		4988074	0					
ANR	4988794	Label	case fmap_shift :	247:12:8617:8632	4988074	22	True				
ANR	4988795	Identifier	fmap_shift		4988074	0					
ANR	4988796	IfStatement	if ( chr == pdata -> ShiftIn )		4988074	23					
ANR	4988797	Condition	chr == pdata -> ShiftIn	248:20:8654:8674	4988074	0	True				
ANR	4988798	EqualityExpression	chr == pdata -> ShiftIn		4988074	0		==			
ANR	4988799	Identifier	chr		4988074	0					
ANR	4988800	PtrMemberAccess	pdata -> ShiftIn		4988074	1					
ANR	4988801	Identifier	pdata		4988074	0					
ANR	4988802	Identifier	ShiftIn		4988074	1					
ANR	4988803	ExpressionStatement	fidx = 0	249:20:8697:8705	4988074	1	True				
ANR	4988804	AssignmentExpression	fidx = 0		4988074	0		=			
ANR	4988805	Identifier	fidx		4988074	0					
ANR	4988806	PrimaryExpression	0		4988074	1					
ANR	4988807	ElseStatement	else		4988074	0					
ANR	4988808	IfStatement	if ( chr == pdata -> ShiftOut )		4988074	0					
ANR	4988809	Condition	chr == pdata -> ShiftOut	250:25:8732:8753	4988074	0	True				
ANR	4988810	EqualityExpression	chr == pdata -> ShiftOut		4988074	0		==			
ANR	4988811	Identifier	chr		4988074	0					
ANR	4988812	PtrMemberAccess	pdata -> ShiftOut		4988074	1					
ANR	4988813	Identifier	pdata		4988074	0					
ANR	4988814	Identifier	ShiftOut		4988074	1					
ANR	4988815	ExpressionStatement	fidx = 1	251:20:8776:8784	4988074	1	True				
ANR	4988816	AssignmentExpression	fidx = 1		4988074	0		=			
ANR	4988817	Identifier	fidx		4988074	0					
ANR	4988818	PrimaryExpression	1		4988074	1					
ANR	4988819	ElseStatement	else		4988074	0					
ANR	4988820	BreakStatement	break ;	253:20:8827:8832	4988074	0	True				
ANR	4988821	ExpressionStatement	"if_debug1m ( 'j' , pte -> memory , ""[j]next: shift %d\\n"" , fidx )"	254:16:8850:8907	4988074	24	True				
ANR	4988822	CallExpression	"if_debug1m ( 'j' , pte -> memory , ""[j]next: shift %d\\n"" , fidx )"		4988074	0					
ANR	4988823	Callee	if_debug1m		4988074	0					
ANR	4988824	Identifier	if_debug1m		4988074	0					
ANR	4988825	ArgumentList	'j'		4988074	1					
ANR	4988826	Argument	'j'		4988074	0					
ANR	4988827	PrimaryExpression	'j'		4988074	0					
ANR	4988828	Argument	pte -> memory		4988074	1					
ANR	4988829	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988830	Identifier	pte		4988074	0					
ANR	4988831	Identifier	memory		4988074	1					
ANR	4988832	Argument	"""[j]next: shift %d\\n"""		4988074	2					
ANR	4988833	PrimaryExpression	"""[j]next: shift %d\\n"""		4988074	0					
ANR	4988834	Argument	fidx		4988074	3					
ANR	4988835	Identifier	fidx		4988074	0					
ANR	4988836	GotoStatement	goto down ;	255:16:8925:8934	4988074	25	True				
ANR	4988837	Identifier	down		4988074	0					
ANR	4988838	BreakStatement	break ;	257:8:8954:8959	4988074	3	True				
ANR	4988839	ExpressionStatement	p ++	261:4:9064:9067	4988074	35	True				
ANR	4988840	PostIncDecOperationExpression	p ++		4988074	0					
ANR	4988841	Identifier	p		4988074	0					
ANR	4988842	IncDec	++		4988074	1					
ANR	4988843	WhileStatement	while ( ( pfont = pte -> fstack . items [ fdepth ] . font ) -> FontType == ft_composite )		4988074	36					
ANR	4988844	Condition	( pfont = pte -> fstack . items [ fdepth ] . font ) -> FontType == ft_composite	272:11:9413:9478	4988074	0	True				
ANR	4988845	EqualityExpression	( pfont = pte -> fstack . items [ fdepth ] . font ) -> FontType == ft_composite		4988074	0		==			
ANR	4988846	PtrMemberAccess	( pfont = pte -> fstack . items [ fdepth ] . font ) -> FontType		4988074	0					
ANR	4988847	AssignmentExpression	pfont = pte -> fstack . items [ fdepth ] . font		4988074	0		=			
ANR	4988848	Identifier	pfont		4988074	0					
ANR	4988849	MemberAccess	pte -> fstack . items [ fdepth ] . font		4988074	1					
ANR	4988850	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4988851	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4988852	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4988853	Identifier	pte		4988074	0					
ANR	4988854	Identifier	fstack		4988074	1					
ANR	4988855	Identifier	items		4988074	1					
ANR	4988856	Identifier	fdepth		4988074	1					
ANR	4988857	Identifier	font		4988074	1					
ANR	4988858	Identifier	FontType		4988074	1					
ANR	4988859	Identifier	ft_composite		4988074	1					
ANR	4988860	CompoundStatement		171:79:5968:5968	4988074	1					
ANR	4988861	ExpressionStatement	pdata = & pfont0 -> data	273:8:9491:9512	4988074	0	True				
ANR	4988862	AssignmentExpression	pdata = & pfont0 -> data		4988074	0		=			
ANR	4988863	Identifier	pdata		4988074	0					
ANR	4988864	UnaryOperationExpression	& pfont0 -> data		4988074	1					
ANR	4988865	UnaryOperator	&		4988074	0					
ANR	4988866	PtrMemberAccess	pfont0 -> data		4988074	1					
ANR	4988867	Identifier	pfont0		4988074	0					
ANR	4988868	Identifier	data		4988074	1					
ANR	4988869	SwitchStatement	switch ( pdata -> FMapType )		4988074	1					
ANR	4988870	Condition	pdata -> FMapType	274:16:9530:9544	4988074	0	True				
ANR	4988871	PtrMemberAccess	pdata -> FMapType		4988074	0					
ANR	4988872	Identifier	pdata		4988074	0					
ANR	4988873	Identifier	FMapType		4988074	1					
ANR	4988874	CompoundStatement		173:33:6034:6034	4988074	1					
ANR	4988875	Label	default :	275:12:9561:9568	4988074	0	True				
ANR	4988876	Identifier	default		4988074	0					
ANR	4988877	ExpressionStatement	return_error ( gs_error_invalidfont )	276:16:9606:9640	4988074	1	True				
ANR	4988878	CallExpression	return_error ( gs_error_invalidfont )		4988074	0					
ANR	4988879	Callee	return_error		4988074	0					
ANR	4988880	Identifier	return_error		4988074	0					
ANR	4988881	ArgumentList	gs_error_invalidfont		4988074	1					
ANR	4988882	Argument	gs_error_invalidfont		4988074	0					
ANR	4988883	Identifier	gs_error_invalidfont		4988074	0					
ANR	4988884	Label	case fmap_8_8 :	278:12:9655:9668	4988074	2	True				
ANR	4988885	Identifier	fmap_8_8		4988074	0					
ANR	4988886	ExpressionStatement	need_left ( 1 )	279:16:9686:9698	4988074	3	True				
ANR	4988887	CallExpression	need_left ( 1 )		4988074	0					
ANR	4988888	Callee	need_left		4988074	0					
ANR	4988889	Identifier	need_left		4988074	0					
ANR	4988890	ArgumentList	1		4988074	1					
ANR	4988891	Argument	1		4988074	0					
ANR	4988892	PrimaryExpression	1		4988074	0					
ANR	4988893	ExpressionStatement	fidx = chr	280:16:9716:9726	4988074	4	True				
ANR	4988894	AssignmentExpression	fidx = chr		4988074	0		=			
ANR	4988895	Identifier	fidx		4988074	0					
ANR	4988896	Identifier	chr		4988074	1					
ANR	4988897	ExpressionStatement	chr = * p ++	281:16:9744:9754	4988074	5	True				
ANR	4988898	AssignmentExpression	chr = * p ++		4988074	0		=			
ANR	4988899	Identifier	chr		4988074	0					
ANR	4988900	UnaryOperationExpression	* p ++		4988074	1					
ANR	4988901	UnaryOperator	*		4988074	0					
ANR	4988902	PostIncDecOperationExpression	p ++		4988074	1					
ANR	4988903	Identifier	p		4988074	0					
ANR	4988904	IncDec	++		4988074	1					
ANR	4988905	ExpressionStatement	"if_debug2m ( 'J' , pte -> memory , ""[J]8/8 index=%d, char=%ld\\n"" , fidx , chr )"	282:16:9772:9869	4988074	6	True				
ANR	4988906	CallExpression	"if_debug2m ( 'J' , pte -> memory , ""[J]8/8 index=%d, char=%ld\\n"" , fidx , chr )"		4988074	0					
ANR	4988907	Callee	if_debug2m		4988074	0					
ANR	4988908	Identifier	if_debug2m		4988074	0					
ANR	4988909	ArgumentList	'J'		4988074	1					
ANR	4988910	Argument	'J'		4988074	0					
ANR	4988911	PrimaryExpression	'J'		4988074	0					
ANR	4988912	Argument	pte -> memory		4988074	1					
ANR	4988913	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988914	Identifier	pte		4988074	0					
ANR	4988915	Identifier	memory		4988074	1					
ANR	4988916	Argument	"""[J]8/8 index=%d, char=%ld\\n"""		4988074	2					
ANR	4988917	PrimaryExpression	"""[J]8/8 index=%d, char=%ld\\n"""		4988074	0					
ANR	4988918	Argument	fidx		4988074	3					
ANR	4988919	Identifier	fidx		4988074	0					
ANR	4988920	Argument	chr		4988074	4					
ANR	4988921	Identifier	chr		4988074	0					
ANR	4988922	BreakStatement	break ;	284:16:9887:9892	4988074	7	True				
ANR	4988923	Label	case fmap_1_7 :	286:12:9907:9920	4988074	8	True				
ANR	4988924	Identifier	fmap_1_7		4988074	0					
ANR	4988925	ExpressionStatement	fidx = chr >> 7	287:16:9938:9953	4988074	9	True				
ANR	4988926	AssignmentExpression	fidx = chr >> 7		4988074	0		=			
ANR	4988927	Identifier	fidx		4988074	0					
ANR	4988928	ShiftExpression	chr >> 7		4988074	1		>>			
ANR	4988929	Identifier	chr		4988074	0					
ANR	4988930	PrimaryExpression	7		4988074	1					
ANR	4988931	ExpressionStatement	chr &= 0x7f	288:16:9971:9982	4988074	10	True				
ANR	4988932	AssignmentExpression	chr &= 0x7f		4988074	0		&=			
ANR	4988933	Identifier	chr		4988074	0					
ANR	4988934	PrimaryExpression	0x7f		4988074	1					
ANR	4988935	ExpressionStatement	"if_debug2m ( 'J' , pte -> memory , ""[J]1/7 index=%d, char=%ld\\n"" , fidx , chr )"	289:16:10000:10097	4988074	11	True				
ANR	4988936	CallExpression	"if_debug2m ( 'J' , pte -> memory , ""[J]1/7 index=%d, char=%ld\\n"" , fidx , chr )"		4988074	0					
ANR	4988937	Callee	if_debug2m		4988074	0					
ANR	4988938	Identifier	if_debug2m		4988074	0					
ANR	4988939	ArgumentList	'J'		4988074	1					
ANR	4988940	Argument	'J'		4988074	0					
ANR	4988941	PrimaryExpression	'J'		4988074	0					
ANR	4988942	Argument	pte -> memory		4988074	1					
ANR	4988943	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988944	Identifier	pte		4988074	0					
ANR	4988945	Identifier	memory		4988074	1					
ANR	4988946	Argument	"""[J]1/7 index=%d, char=%ld\\n"""		4988074	2					
ANR	4988947	PrimaryExpression	"""[J]1/7 index=%d, char=%ld\\n"""		4988074	0					
ANR	4988948	Argument	fidx		4988074	3					
ANR	4988949	Identifier	fidx		4988074	0					
ANR	4988950	Argument	chr		4988074	4					
ANR	4988951	Identifier	chr		4988074	0					
ANR	4988952	BreakStatement	break ;	291:16:10115:10120	4988074	12	True				
ANR	4988953	Label	case fmap_9_7 :	293:12:10135:10148	4988074	13	True				
ANR	4988954	Identifier	fmap_9_7		4988074	0					
ANR	4988955	ExpressionStatement	need_left ( 1 )	294:16:10166:10178	4988074	14	True				
ANR	4988956	CallExpression	need_left ( 1 )		4988074	0					
ANR	4988957	Callee	need_left		4988074	0					
ANR	4988958	Identifier	need_left		4988074	0					
ANR	4988959	ArgumentList	1		4988074	1					
ANR	4988960	Argument	1		4988074	0					
ANR	4988961	PrimaryExpression	1		4988074	0					
ANR	4988962	ExpressionStatement	fidx = ( ( uint ) chr << 1 ) + ( * p >> 7 )	295:16:10196:10232	4988074	15	True				
ANR	4988963	AssignmentExpression	fidx = ( ( uint ) chr << 1 ) + ( * p >> 7 )		4988074	0		=			
ANR	4988964	Identifier	fidx		4988074	0					
ANR	4988965	AdditiveExpression	( ( uint ) chr << 1 ) + ( * p >> 7 )		4988074	1		+			
ANR	4988966	ShiftExpression	( uint ) chr << 1		4988074	0		<<			
ANR	4988967	CastExpression	( uint ) chr		4988074	0					
ANR	4988968	CastTarget	uint		4988074	0					
ANR	4988969	Identifier	chr		4988074	1					
ANR	4988970	PrimaryExpression	1		4988074	1					
ANR	4988971	ShiftExpression	* p >> 7		4988074	1		>>			
ANR	4988972	UnaryOperationExpression	* p		4988074	0					
ANR	4988973	UnaryOperator	*		4988074	0					
ANR	4988974	Identifier	p		4988074	1					
ANR	4988975	PrimaryExpression	7		4988074	1					
ANR	4988976	ExpressionStatement	chr = * p & 0x7f	296:16:10250:10265	4988074	16	True				
ANR	4988977	AssignmentExpression	chr = * p & 0x7f		4988074	0		=			
ANR	4988978	Identifier	chr		4988074	0					
ANR	4988979	BitAndExpression	* p & 0x7f		4988074	1		&			
ANR	4988980	UnaryOperationExpression	* p		4988074	0					
ANR	4988981	UnaryOperator	*		4988074	0					
ANR	4988982	Identifier	p		4988074	1					
ANR	4988983	PrimaryExpression	0x7f		4988074	1					
ANR	4988984	ExpressionStatement	"if_debug2m ( 'J' , pte -> memory , ""[J]9/7 index=%d, char=%ld\\n"" , fidx , chr )"	297:16:10283:10380	4988074	17	True				
ANR	4988985	CallExpression	"if_debug2m ( 'J' , pte -> memory , ""[J]9/7 index=%d, char=%ld\\n"" , fidx , chr )"		4988074	0					
ANR	4988986	Callee	if_debug2m		4988074	0					
ANR	4988987	Identifier	if_debug2m		4988074	0					
ANR	4988988	ArgumentList	'J'		4988074	1					
ANR	4988989	Argument	'J'		4988074	0					
ANR	4988990	PrimaryExpression	'J'		4988074	0					
ANR	4988991	Argument	pte -> memory		4988074	1					
ANR	4988992	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4988993	Identifier	pte		4988074	0					
ANR	4988994	Identifier	memory		4988074	1					
ANR	4988995	Argument	"""[J]9/7 index=%d, char=%ld\\n"""		4988074	2					
ANR	4988996	PrimaryExpression	"""[J]9/7 index=%d, char=%ld\\n"""		4988074	0					
ANR	4988997	Argument	fidx		4988074	3					
ANR	4988998	Identifier	fidx		4988074	0					
ANR	4988999	Argument	chr		4988074	4					
ANR	4989000	Identifier	chr		4988074	0					
ANR	4989001	ExpressionStatement	p ++	299:16:10398:10401	4988074	18	True				
ANR	4989002	PostIncDecOperationExpression	p ++		4988074	0					
ANR	4989003	Identifier	p		4988074	0					
ANR	4989004	IncDec	++		4988074	1					
ANR	4989005	BreakStatement	break ;	300:16:10419:10424	4988074	19	True				
ANR	4989006	Label	case fmap_SubsVector :	302:12:10439:10459	4988074	20	True				
ANR	4989007	Identifier	fmap_SubsVector		4988074	0					
ANR	4989008	CompoundStatement		205:20:7093:7133	4988074	21					
ANR	4989009	IdentifierDeclStatement	int width = pdata -> subs_width ;	304:20:10499:10528	4988074	0	True				
ANR	4989010	IdentifierDecl	width = pdata -> subs_width		4988074	0					
ANR	4989011	IdentifierDeclType	int		4988074	0					
ANR	4989012	Identifier	width		4988074	1					
ANR	4989013	AssignmentExpression	width = pdata -> subs_width		4988074	2		=			
ANR	4989014	Identifier	width		4988074	0					
ANR	4989015	PtrMemberAccess	pdata -> subs_width		4988074	1					
ANR	4989016	Identifier	pdata		4988074	0					
ANR	4989017	Identifier	subs_width		4988074	1					
ANR	4989018	IdentifierDeclStatement	uint subs_count = pdata -> subs_size ;	305:20:10550:10584	4988074	1	True				
ANR	4989019	IdentifierDecl	subs_count = pdata -> subs_size		4988074	0					
ANR	4989020	IdentifierDeclType	uint		4988074	0					
ANR	4989021	Identifier	subs_count		4988074	1					
ANR	4989022	AssignmentExpression	subs_count = pdata -> subs_size		4988074	2		=			
ANR	4989023	Identifier	subs_count		4988074	0					
ANR	4989024	PtrMemberAccess	pdata -> subs_size		4988074	1					
ANR	4989025	Identifier	pdata		4988074	0					
ANR	4989026	Identifier	subs_size		4988074	1					
ANR	4989027	IdentifierDeclStatement	const byte * psv = pdata -> SubsVector . data ;	306:20:10606:10646	4988074	2	True				
ANR	4989028	IdentifierDecl	* psv = pdata -> SubsVector . data		4988074	0					
ANR	4989029	IdentifierDeclType	const byte *		4988074	0					
ANR	4989030	Identifier	psv		4988074	1					
ANR	4989031	AssignmentExpression	* psv = pdata -> SubsVector . data		4988074	2		=			
ANR	4989032	Identifier	psv		4988074	0					
ANR	4989033	MemberAccess	pdata -> SubsVector . data		4988074	1					
ANR	4989034	PtrMemberAccess	pdata -> SubsVector		4988074	0					
ANR	4989035	Identifier	pdata		4988074	0					
ANR	4989036	Identifier	SubsVector		4988074	1					
ANR	4989037	Identifier	data		4988074	1					
ANR	4989038	Statement	define	308:1:10650:10655	4988074	3	True				
ANR	4989039	Statement	subs_loop	308:8:10657:10665	4988074	4	True				
ANR	4989040	Statement	(	308:17:10666:10666	4988074	5	True				
ANR	4989041	Statement	subs_elt	308:18:10667:10674	4988074	6	True				
ANR	4989042	Statement	","	308:26:10675:10675	4988074	7	True				
ANR	4989043	Statement	width	308:28:10677:10681	4988074	8	True				
ANR	4989044	Statement	)	308:33:10682:10682	4988074	9	True				
ANR	4989045	WhileStatement	while ( subs_count != 0 && tchr >= ( schr = subs_elt ) )		4988074	10					
ANR	4989046	Condition	subs_count != 0 && tchr >= ( schr = subs_elt )	309:10:10695:10738	4988074	0	True				
ANR	4989047	AndExpression	subs_count != 0 && tchr >= ( schr = subs_elt )		4988074	0		&&			
ANR	4989048	EqualityExpression	subs_count != 0		4988074	0		!=			
ANR	4989049	Identifier	subs_count		4988074	0					
ANR	4989050	PrimaryExpression	0		4988074	1					
ANR	4989051	RelationalExpression	tchr >= ( schr = subs_elt )		4988074	1		>=			
ANR	4989052	Identifier	tchr		4988074	0					
ANR	4989053	AssignmentExpression	schr = subs_elt		4988074	1		=			
ANR	4989054	Identifier	schr		4988074	0					
ANR	4989055	Identifier	subs_elt		4988074	1					
ANR	4989056	ExpressionStatement	"subs_count -- , tchr -= schr , psv += width"	310:4:10747:10787	4988074	1	True				
ANR	4989057	Expression	"subs_count -- , tchr -= schr , psv += width"		4988074	0					
ANR	4989058	PostIncDecOperationExpression	subs_count --		4988074	0					
ANR	4989059	Identifier	subs_count		4988074	0					
ANR	4989060	IncDec	--		4988074	1					
ANR	4989061	Expression	"tchr -= schr , psv += width"		4988074	1					
ANR	4989062	AssignmentExpression	tchr -= schr		4988074	0		-=			
ANR	4989063	Identifier	tchr		4988074	0					
ANR	4989064	Identifier	schr		4988074	1					
ANR	4989065	AssignmentExpression	psv += width		4988074	1		+=			
ANR	4989066	Identifier	psv		4988074	0					
ANR	4989067	Identifier	width		4988074	1					
ANR	4989068	ExpressionStatement	chr = tchr	311:2:10792:10802	4988074	11	True				
ANR	4989069	AssignmentExpression	chr = tchr		4988074	0		=			
ANR	4989070	Identifier	chr		4988074	0					
ANR	4989071	Identifier	tchr		4988074	1					
ANR	4989072	ExpressionStatement	p += width - 1	311:14:10804:10818	4988074	12	True				
ANR	4989073	AssignmentExpression	p += width - 1		4988074	0		+=			
ANR	4989074	Identifier	p		4988074	0					
ANR	4989075	AdditiveExpression	width - 1		4988074	1		-			
ANR	4989076	Identifier	width		4988074	0					
ANR	4989077	PrimaryExpression	1		4988074	1					
ANR	4989078	Statement	break	311:30:10820:10824	4988074	13	True				
ANR	4989079	SwitchStatement	switch ( width )		4988074	14					
ANR	4989080	Condition	width	313:28:10855:10859	4988074	0	True				
ANR	4989081	Identifier	width		4988074	0					
ANR	4989082	CompoundStatement		212:35:7349:7349	4988074	1					
ANR	4989083	Label	default :	314:24:10888:10895	4988074	0	True				
ANR	4989084	Identifier	default		4988074	0					
ANR	4989085	ExpressionStatement	return_error ( gs_error_invalidfont )	315:28:10944:10978	4988074	1	True				
ANR	4989086	CallExpression	return_error ( gs_error_invalidfont )		4988074	0					
ANR	4989087	Callee	return_error		4988074	0					
ANR	4989088	Identifier	return_error		4988074	0					
ANR	4989089	ArgumentList	gs_error_invalidfont		4988074	1					
ANR	4989090	Argument	gs_error_invalidfont		4988074	0					
ANR	4989091	Identifier	gs_error_invalidfont		4988074	0					
ANR	4989092	Label	case 1 :	316:24:11004:11010	4988074	2	True				
ANR	4989093	CompoundStatement		217:32:7561:7589	4988074	3					
ANR	4989094	IdentifierDeclStatement	"byte tchr = ( byte ) chr , schr ;"	318:32:11074:11102	4988074	0	True				
ANR	4989095	IdentifierDecl	tchr = ( byte ) chr		4988074	0					
ANR	4989096	IdentifierDeclType	byte		4988074	0					
ANR	4989097	Identifier	tchr		4988074	1					
ANR	4989098	AssignmentExpression	tchr = ( byte ) chr		4988074	2		=			
ANR	4989099	Identifier	tchr		4988074	0					
ANR	4989100	CastExpression	( byte ) chr		4988074	1					
ANR	4989101	CastTarget	byte		4988074	0					
ANR	4989102	Identifier	chr		4988074	1					
ANR	4989103	IdentifierDecl	schr		4988074	1					
ANR	4989104	IdentifierDeclType	byte		4988074	0					
ANR	4989105	Identifier	schr		4988074	1					
ANR	4989106	ExpressionStatement	"subs_loop ( * psv , 1 )"	320:32:11137:11155	4988074	1	True				
ANR	4989107	CallExpression	"subs_loop ( * psv , 1 )"		4988074	0					
ANR	4989108	Callee	subs_loop		4988074	0					
ANR	4989109	Identifier	subs_loop		4988074	0					
ANR	4989110	ArgumentList	* psv		4988074	1					
ANR	4989111	Argument	* psv		4988074	0					
ANR	4989112	UnaryOperationExpression	* psv		4988074	0					
ANR	4989113	UnaryOperator	*		4988074	0					
ANR	4989114	Identifier	psv		4988074	1					
ANR	4989115	Argument	1		4988074	1					
ANR	4989116	PrimaryExpression	1		4988074	0					
ANR	4989117	Label	case 2 :	322:24:11211:11217	4988074	4	True				
ANR	4989118	ExpressionStatement	need_left ( 1 )	323:28:11247:11259	4988074	5	True				
ANR	4989119	CallExpression	need_left ( 1 )		4988074	0					
ANR	4989120	Callee	need_left		4988074	0					
ANR	4989121	Identifier	need_left		4988074	0					
ANR	4989122	ArgumentList	1		4988074	1					
ANR	4989123	Argument	1		4988074	0					
ANR	4989124	PrimaryExpression	1		4988074	0					
ANR	4989125	Statement	define	324:1:11262:11267	4988074	6	True				
ANR	4989126	Statement	w2	324:8:11269:11270	4988074	7	True				
ANR	4989127	Statement	(	324:10:11271:11271	4988074	8	True				
ANR	4989128	Statement	p	324:11:11272:11272	4988074	9	True				
ANR	4989129	Statement	)	324:12:11273:11273	4988074	10	True				
ANR	4989130	Statement	(	324:14:11275:11275	4988074	11	True				
ANR	4989131	Statement	(	324:15:11276:11276	4988074	12	True				
ANR	4989132	Statement	(	324:16:11277:11277	4988074	13	True				
ANR	4989133	Statement	ushort	324:17:11278:11283	4988074	14	True				
ANR	4989134	Statement	)	324:23:11284:11284	4988074	15	True				
ANR	4989135	Statement	*	324:24:11285:11285	4988074	16	True				
ANR	4989136	Statement	p	324:25:11286:11286	4988074	17	True				
ANR	4989137	Statement	<<	324:27:11288:11289	4988074	18	True				
ANR	4989138	Statement	8	324:30:11291:11291	4988074	19	True				
ANR	4989139	Statement	)	324:31:11292:11292	4988074	20	True				
ANR	4989140	Statement	+	324:33:11294:11294	4988074	21	True				
ANR	4989141	Statement	p	324:35:11296:11296	4988074	22	True				
ANR	4989142	Statement	[	324:36:11297:11297	4988074	23	True				
ANR	4989143	Statement	1	324:37:11298:11298	4988074	24	True				
ANR	4989144	Statement	]	324:38:11299:11299	4988074	25	True				
ANR	4989145	Statement	)	324:39:11300:11300	4988074	26	True				
ANR	4989146	CompoundStatement		225:32:7851:7934	4988074	27					
ANR	4989147	IdentifierDeclStatement	"ushort tchr = ( ( ushort ) chr << 8 ) + * p , schr ;"	326:32:11364:11447	4988074	0	True				
ANR	4989148	IdentifierDecl	tchr = ( ( ushort ) chr << 8 ) + * p		4988074	0					
ANR	4989149	IdentifierDeclType	ushort		4988074	0					
ANR	4989150	Identifier	tchr		4988074	1					
ANR	4989151	AssignmentExpression	tchr = ( ( ushort ) chr << 8 ) + * p		4988074	2		=			
ANR	4989152	Identifier	tchr		4988074	0					
ANR	4989153	AdditiveExpression	( ( ushort ) chr << 8 ) + * p		4988074	1		+			
ANR	4989154	ShiftExpression	( ushort ) chr << 8		4988074	0		<<			
ANR	4989155	CastExpression	( ushort ) chr		4988074	0					
ANR	4989156	CastTarget	ushort		4988074	0					
ANR	4989157	Identifier	chr		4988074	1					
ANR	4989158	PrimaryExpression	8		4988074	1					
ANR	4989159	UnaryOperationExpression	* p		4988074	1					
ANR	4989160	UnaryOperator	*		4988074	0					
ANR	4989161	Identifier	p		4988074	1					
ANR	4989162	IdentifierDecl	schr		4988074	1					
ANR	4989163	IdentifierDeclType	ushort		4988074	0					
ANR	4989164	Identifier	schr		4988074	1					
ANR	4989165	ExpressionStatement	"subs_loop ( w2 ( psv ) , 2 )"	329:32:11482:11503	4988074	1	True				
ANR	4989166	CallExpression	"subs_loop ( w2 ( psv ) , 2 )"		4988074	0					
ANR	4989167	Callee	subs_loop		4988074	0					
ANR	4989168	Identifier	subs_loop		4988074	0					
ANR	4989169	ArgumentList	w2 ( psv )		4988074	1					
ANR	4989170	Argument	w2 ( psv )		4988074	0					
ANR	4989171	CallExpression	w2 ( psv )		4988074	0					
ANR	4989172	Callee	w2		4988074	0					
ANR	4989173	Identifier	w2		4988074	0					
ANR	4989174	ArgumentList	psv		4988074	1					
ANR	4989175	Argument	psv		4988074	0					
ANR	4989176	Identifier	psv		4988074	0					
ANR	4989177	Argument	2		4988074	1					
ANR	4989178	PrimaryExpression	2		4988074	0					
ANR	4989179	Label	case 3 :	331:24:11559:11565	4988074	28	True				
ANR	4989180	ExpressionStatement	need_left ( 2 )	332:28:11595:11607	4988074	29	True				
ANR	4989181	CallExpression	need_left ( 2 )		4988074	0					
ANR	4989182	Callee	need_left		4988074	0					
ANR	4989183	Identifier	need_left		4988074	0					
ANR	4989184	ArgumentList	2		4988074	1					
ANR	4989185	Argument	2		4988074	0					
ANR	4989186	PrimaryExpression	2		4988074	0					
ANR	4989187	Statement	define	333:1:11610:11615	4988074	30	True				
ANR	4989188	Statement	w3	333:8:11617:11618	4988074	31	True				
ANR	4989189	Statement	(	333:10:11619:11619	4988074	32	True				
ANR	4989190	Statement	p	333:11:11620:11620	4988074	33	True				
ANR	4989191	Statement	)	333:12:11621:11621	4988074	34	True				
ANR	4989192	Statement	(	333:14:11623:11623	4988074	35	True				
ANR	4989193	Statement	(	333:15:11624:11624	4988074	36	True				
ANR	4989194	Statement	(	333:16:11625:11625	4988074	37	True				
ANR	4989195	Statement	ulong	333:17:11626:11630	4988074	38	True				
ANR	4989196	Statement	)	333:22:11631:11631	4988074	39	True				
ANR	4989197	Statement	*	333:23:11632:11632	4988074	40	True				
ANR	4989198	Statement	p	333:24:11633:11633	4988074	41	True				
ANR	4989199	Statement	<<	333:26:11635:11636	4988074	42	True				
ANR	4989200	Statement	16	333:29:11638:11639	4988074	43	True				
ANR	4989201	Statement	)	333:31:11640:11640	4988074	44	True				
ANR	4989202	Statement	+	333:33:11642:11642	4988074	45	True				
ANR	4989203	Statement	(	333:35:11644:11644	4988074	46	True				
ANR	4989204	Statement	(	333:36:11645:11645	4988074	47	True				
ANR	4989205	Statement	uint	333:37:11646:11649	4988074	48	True				
ANR	4989206	Statement	)	333:41:11650:11650	4988074	49	True				
ANR	4989207	Statement	p	333:42:11651:11651	4988074	50	True				
ANR	4989208	Statement	[	333:43:11652:11652	4988074	51	True				
ANR	4989209	Statement	1	333:44:11653:11653	4988074	52	True				
ANR	4989210	Statement	]	333:45:11654:11654	4988074	53	True				
ANR	4989211	Statement	<<	333:47:11656:11657	4988074	54	True				
ANR	4989212	Statement	8	333:50:11659:11659	4988074	55	True				
ANR	4989213	Statement	)	333:51:11660:11660	4988074	56	True				
ANR	4989214	Statement	+	333:53:11662:11662	4988074	57	True				
ANR	4989215	Statement	p	333:55:11664:11664	4988074	58	True				
ANR	4989216	Statement	[	333:56:11665:11665	4988074	59	True				
ANR	4989217	Statement	2	333:57:11666:11666	4988074	60	True				
ANR	4989218	Statement	]	333:58:11667:11667	4988074	61	True				
ANR	4989219	Statement	)	333:59:11668:11668	4988074	62	True				
ANR	4989220	CompoundStatement		234:32:8219:8303	4988074	63					
ANR	4989221	IdentifierDeclStatement	"ulong tchr = ( ( ulong ) chr << 16 ) + w2 ( p ) , schr ;"	335:32:11732:11816	4988074	0	True				
ANR	4989222	IdentifierDecl	tchr = ( ( ulong ) chr << 16 ) + w2 ( p )		4988074	0					
ANR	4989223	IdentifierDeclType	ulong		4988074	0					
ANR	4989224	Identifier	tchr		4988074	1					
ANR	4989225	AssignmentExpression	tchr = ( ( ulong ) chr << 16 ) + w2 ( p )		4988074	2		=			
ANR	4989226	Identifier	tchr		4988074	0					
ANR	4989227	AdditiveExpression	( ( ulong ) chr << 16 ) + w2 ( p )		4988074	1		+			
ANR	4989228	ShiftExpression	( ulong ) chr << 16		4988074	0		<<			
ANR	4989229	CastExpression	( ulong ) chr		4988074	0					
ANR	4989230	CastTarget	ulong		4988074	0					
ANR	4989231	Identifier	chr		4988074	1					
ANR	4989232	PrimaryExpression	16		4988074	1					
ANR	4989233	CallExpression	w2 ( p )		4988074	1					
ANR	4989234	Callee	w2		4988074	0					
ANR	4989235	Identifier	w2		4988074	0					
ANR	4989236	ArgumentList	p		4988074	1					
ANR	4989237	Argument	p		4988074	0					
ANR	4989238	Identifier	p		4988074	0					
ANR	4989239	IdentifierDecl	schr		4988074	1					
ANR	4989240	IdentifierDeclType	ulong		4988074	0					
ANR	4989241	Identifier	schr		4988074	1					
ANR	4989242	ExpressionStatement	"subs_loop ( w3 ( psv ) , 3 )"	338:32:11851:11872	4988074	1	True				
ANR	4989243	CallExpression	"subs_loop ( w3 ( psv ) , 3 )"		4988074	0					
ANR	4989244	Callee	subs_loop		4988074	0					
ANR	4989245	Identifier	subs_loop		4988074	0					
ANR	4989246	ArgumentList	w3 ( psv )		4988074	1					
ANR	4989247	Argument	w3 ( psv )		4988074	0					
ANR	4989248	CallExpression	w3 ( psv )		4988074	0					
ANR	4989249	Callee	w3		4988074	0					
ANR	4989250	Identifier	w3		4988074	0					
ANR	4989251	ArgumentList	psv		4988074	1					
ANR	4989252	Argument	psv		4988074	0					
ANR	4989253	Identifier	psv		4988074	0					
ANR	4989254	Argument	3		4988074	1					
ANR	4989255	PrimaryExpression	3		4988074	0					
ANR	4989256	Label	case 4 :	340:24:11928:11934	4988074	64	True				
ANR	4989257	ExpressionStatement	need_left ( 3 )	341:28:11964:11976	4988074	65	True				
ANR	4989258	CallExpression	need_left ( 3 )		4988074	0					
ANR	4989259	Callee	need_left		4988074	0					
ANR	4989260	Identifier	need_left		4988074	0					
ANR	4989261	ArgumentList	3		4988074	1					
ANR	4989262	Argument	3		4988074	0					
ANR	4989263	PrimaryExpression	3		4988074	0					
ANR	4989264	Statement	define	342:1:11979:11984	4988074	66	True				
ANR	4989265	Statement	w4	342:8:11986:11987	4988074	67	True				
ANR	4989266	Statement	(	342:10:11988:11988	4988074	68	True				
ANR	4989267	Statement	p	342:11:11989:11989	4988074	69	True				
ANR	4989268	Statement	)	342:12:11990:11990	4988074	70	True				
ANR	4989269	Statement	(	342:14:11992:11992	4988074	71	True				
ANR	4989270	Statement	(	342:15:11993:11993	4988074	72	True				
ANR	4989271	Statement	(	342:16:11994:11994	4988074	73	True				
ANR	4989272	Statement	ulong	342:17:11995:11999	4988074	74	True				
ANR	4989273	Statement	)	342:22:12000:12000	4988074	75	True				
ANR	4989274	Statement	*	342:23:12001:12001	4988074	76	True				
ANR	4989275	Statement	p	342:24:12002:12002	4988074	77	True				
ANR	4989276	Statement	<<	342:26:12004:12005	4988074	78	True				
ANR	4989277	Statement	24	342:29:12007:12008	4988074	79	True				
ANR	4989278	Statement	)	342:31:12009:12009	4988074	80	True				
ANR	4989279	Statement	+	342:33:12011:12011	4988074	81	True				
ANR	4989280	Statement	(	342:35:12013:12013	4988074	82	True				
ANR	4989281	Statement	(	342:36:12014:12014	4988074	83	True				
ANR	4989282	Statement	ulong	342:37:12015:12019	4988074	84	True				
ANR	4989283	Statement	)	342:42:12020:12020	4988074	85	True				
ANR	4989284	Statement	p	342:43:12021:12021	4988074	86	True				
ANR	4989285	Statement	[	342:44:12022:12022	4988074	87	True				
ANR	4989286	Statement	1	342:45:12023:12023	4988074	88	True				
ANR	4989287	Statement	]	342:46:12024:12024	4988074	89	True				
ANR	4989288	Statement	<<	342:48:12026:12027	4988074	90	True				
ANR	4989289	Statement	16	342:51:12029:12030	4988074	91	True				
ANR	4989290	Statement	)	342:53:12031:12031	4988074	92	True				
ANR	4989291	Statement	+	342:55:12033:12033	4988074	93	True				
ANR	4989292	Statement	(	342:57:12035:12035	4988074	94	True				
ANR	4989293	Statement	(	342:58:12036:12036	4988074	95	True				
ANR	4989294	Statement	uint	342:59:12037:12040	4988074	96	True				
ANR	4989295	Statement	)	342:63:12041:12041	4988074	97	True				
ANR	4989296	Statement	p	342:64:12042:12042	4988074	98	True				
ANR	4989297	Statement	[	342:65:12043:12043	4988074	99	True				
ANR	4989298	Statement	2	342:66:12044:12044	4988074	100	True				
ANR	4989299	Statement	]	342:67:12045:12045	4988074	101	True				
ANR	4989300	Statement	<<	342:69:12047:12048	4988074	102	True				
ANR	4989301	Statement	8	342:72:12050:12050	4988074	103	True				
ANR	4989302	Statement	)	342:73:12051:12051	4988074	104	True				
ANR	4989303	Statement	+	342:75:12053:12053	4988074	105	True				
ANR	4989304	Statement	p	342:77:12055:12055	4988074	106	True				
ANR	4989305	Statement	[	342:78:12056:12056	4988074	107	True				
ANR	4989306	Statement	3	342:79:12057:12057	4988074	108	True				
ANR	4989307	Statement	]	342:80:12058:12058	4988074	109	True				
ANR	4989308	Statement	)	342:81:12059:12059	4988074	110	True				
ANR	4989309	CompoundStatement		243:32:8610:8694	4988074	111					
ANR	4989310	IdentifierDeclStatement	"ulong tchr = ( ( ulong ) chr << 24 ) + w3 ( p ) , schr ;"	344:32:12123:12207	4988074	0	True				
ANR	4989311	IdentifierDecl	tchr = ( ( ulong ) chr << 24 ) + w3 ( p )		4988074	0					
ANR	4989312	IdentifierDeclType	ulong		4988074	0					
ANR	4989313	Identifier	tchr		4988074	1					
ANR	4989314	AssignmentExpression	tchr = ( ( ulong ) chr << 24 ) + w3 ( p )		4988074	2		=			
ANR	4989315	Identifier	tchr		4988074	0					
ANR	4989316	AdditiveExpression	( ( ulong ) chr << 24 ) + w3 ( p )		4988074	1		+			
ANR	4989317	ShiftExpression	( ulong ) chr << 24		4988074	0		<<			
ANR	4989318	CastExpression	( ulong ) chr		4988074	0					
ANR	4989319	CastTarget	ulong		4988074	0					
ANR	4989320	Identifier	chr		4988074	1					
ANR	4989321	PrimaryExpression	24		4988074	1					
ANR	4989322	CallExpression	w3 ( p )		4988074	1					
ANR	4989323	Callee	w3		4988074	0					
ANR	4989324	Identifier	w3		4988074	0					
ANR	4989325	ArgumentList	p		4988074	1					
ANR	4989326	Argument	p		4988074	0					
ANR	4989327	Identifier	p		4988074	0					
ANR	4989328	IdentifierDecl	schr		4988074	1					
ANR	4989329	IdentifierDeclType	ulong		4988074	0					
ANR	4989330	Identifier	schr		4988074	1					
ANR	4989331	ExpressionStatement	"subs_loop ( w4 ( psv ) , 4 )"	347:32:12242:12263	4988074	1	True				
ANR	4989332	CallExpression	"subs_loop ( w4 ( psv ) , 4 )"		4988074	0					
ANR	4989333	Callee	subs_loop		4988074	0					
ANR	4989334	Identifier	subs_loop		4988074	0					
ANR	4989335	ArgumentList	w4 ( psv )		4988074	1					
ANR	4989336	Argument	w4 ( psv )		4988074	0					
ANR	4989337	CallExpression	w4 ( psv )		4988074	0					
ANR	4989338	Callee	w4		4988074	0					
ANR	4989339	Identifier	w4		4988074	0					
ANR	4989340	ArgumentList	psv		4988074	1					
ANR	4989341	Argument	psv		4988074	0					
ANR	4989342	Identifier	psv		4988074	0					
ANR	4989343	Argument	4		4988074	1					
ANR	4989344	PrimaryExpression	4		4988074	0					
ANR	4989345	Statement	undef	349:1:12296:12300	4988074	112	True				
ANR	4989346	Statement	w2	349:7:12302:12303	4988074	113	True				
ANR	4989347	Statement	undef	350:1:12306:12310	4988074	114	True				
ANR	4989348	Statement	w3	350:7:12312:12313	4988074	115	True				
ANR	4989349	Statement	undef	351:1:12316:12320	4988074	116	True				
ANR	4989350	Statement	w4	351:7:12322:12323	4988074	117	True				
ANR	4989351	Statement	undef	352:1:12326:12330	4988074	118	True				
ANR	4989352	Statement	subs_loop	352:7:12332:12340	4988074	119	True				
ANR	4989353	ExpressionStatement	fidx = pdata -> subs_size - subs_count	354:20:12384:12420	4988074	15	True				
ANR	4989354	AssignmentExpression	fidx = pdata -> subs_size - subs_count		4988074	0		=			
ANR	4989355	Identifier	fidx		4988074	0					
ANR	4989356	AdditiveExpression	pdata -> subs_size - subs_count		4988074	1		-			
ANR	4989357	PtrMemberAccess	pdata -> subs_size		4988074	0					
ANR	4989358	Identifier	pdata		4988074	0					
ANR	4989359	Identifier	subs_size		4988074	1					
ANR	4989360	Identifier	subs_count		4988074	1					
ANR	4989361	ExpressionStatement	"if_debug2m ( 'J' , pte -> memory , ""[J]SubsVector index=%d, char=%ld\\n"" , fidx , chr )"	355:20:12442:12550	4988074	16	True				
ANR	4989362	CallExpression	"if_debug2m ( 'J' , pte -> memory , ""[J]SubsVector index=%d, char=%ld\\n"" , fidx , chr )"		4988074	0					
ANR	4989363	Callee	if_debug2m		4988074	0					
ANR	4989364	Identifier	if_debug2m		4988074	0					
ANR	4989365	ArgumentList	'J'		4988074	1					
ANR	4989366	Argument	'J'		4988074	0					
ANR	4989367	PrimaryExpression	'J'		4988074	0					
ANR	4989368	Argument	pte -> memory		4988074	1					
ANR	4989369	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4989370	Identifier	pte		4988074	0					
ANR	4989371	Identifier	memory		4988074	1					
ANR	4989372	Argument	"""[J]SubsVector index=%d, char=%ld\\n"""		4988074	2					
ANR	4989373	PrimaryExpression	"""[J]SubsVector index=%d, char=%ld\\n"""		4988074	0					
ANR	4989374	Argument	fidx		4988074	3					
ANR	4989375	Identifier	fidx		4988074	0					
ANR	4989376	Argument	chr		4988074	4					
ANR	4989377	Identifier	chr		4988074	0					
ANR	4989378	BreakStatement	break ;	357:20:12572:12577	4988074	17	True				
ANR	4989379	Label	case fmap_CMap :	360:12:12610:12624	4988074	22	True				
ANR	4989380	Identifier	fmap_CMap		4988074	0					
ANR	4989381	CompoundStatement		263:20:9264:9272	4988074	23					
ANR	4989382	IdentifierDeclStatement	gs_const_string cstr ;	362:20:12664:12684	4988074	0	True				
ANR	4989383	IdentifierDecl	cstr		4988074	0					
ANR	4989384	IdentifierDeclType	gs_const_string		4988074	0					
ANR	4989385	Identifier	cstr		4988074	1					
ANR	4989386	IdentifierDeclStatement	uint mindex = p - str - 1 ;	363:20:12706:12731	4988074	1	True				
ANR	4989387	IdentifierDecl	mindex = p - str - 1		4988074	0					
ANR	4989388	IdentifierDeclType	uint		4988074	0					
ANR	4989389	Identifier	mindex		4988074	1					
ANR	4989390	AssignmentExpression	mindex = p - str - 1		4988074	2		=			
ANR	4989391	Identifier	mindex		4988074	0					
ANR	4989392	AdditiveExpression	p - str - 1		4988074	1		-			
ANR	4989393	Identifier	p		4988074	0					
ANR	4989394	AdditiveExpression	str - 1		4988074	1		-			
ANR	4989395	Identifier	str		4988074	0					
ANR	4989396	PrimaryExpression	1		4988074	1					
ANR	4989397	IdentifierDeclStatement	int code ;	364:20:12777:12785	4988074	2	True				
ANR	4989398	IdentifierDecl	code		4988074	0					
ANR	4989399	IdentifierDeclType	int		4988074	0					
ANR	4989400	Identifier	code		4988074	1					
ANR	4989401	IfStatement	if ( * ( p - 1 ) != chr )		4988074	3					
ANR	4989402	Condition	* ( p - 1 ) != chr	374:24:13266:13280	4988074	0	True				
ANR	4989403	EqualityExpression	* ( p - 1 ) != chr		4988074	0		!=			
ANR	4989404	UnaryOperationExpression	* ( p - 1 )		4988074	0					
ANR	4989405	UnaryOperator	*		4988074	0					
ANR	4989406	AdditiveExpression	p - 1		4988074	1		-			
ANR	4989407	Identifier	p		4988074	0					
ANR	4989408	PrimaryExpression	1		4988074	1					
ANR	4989409	Identifier	chr		4988074	1					
ANR	4989410	CompoundStatement		275:24:9853:9870	4988074	1					
ANR	4989411	IdentifierDeclStatement	byte substr [ MAX_CMAP_CODE_SIZE ] ;	375:24:13309:13340	4988074	0	True				
ANR	4989412	IdentifierDecl	substr [ MAX_CMAP_CODE_SIZE ]		4988074	0					
ANR	4989413	IdentifierDeclType	byte [ MAX_CMAP_CODE_SIZE ]		4988074	0					
ANR	4989414	Identifier	substr		4988074	1					
ANR	4989415	Identifier	MAX_CMAP_CODE_SIZE		4988074	2					
ANR	4989416	IdentifierDeclStatement	int submindex = 0 ;	376:24:13366:13383	4988074	1	True				
ANR	4989417	IdentifierDecl	submindex = 0		4988074	0					
ANR	4989418	IdentifierDeclType	int		4988074	0					
ANR	4989419	Identifier	submindex		4988074	1					
ANR	4989420	AssignmentExpression	submindex = 0		4988074	2		=			
ANR	4989421	Identifier	submindex		4988074	0					
ANR	4989422	PrimaryExpression	0		4988074	1					
ANR	4989423	ExpressionStatement	"if_debug2m ( 'j' , pte -> memory , ""[j] *(p-1) 0x%02x != chr 0x%02x, modified str should be passed\\n"" , * ( p - 1 ) , ( byte ) chr )"	377:24:13409:13594	4988074	2	True				
ANR	4989424	CallExpression	"if_debug2m ( 'j' , pte -> memory , ""[j] *(p-1) 0x%02x != chr 0x%02x, modified str should be passed\\n"" , * ( p - 1 ) , ( byte ) chr )"		4988074	0					
ANR	4989425	Callee	if_debug2m		4988074	0					
ANR	4989426	Identifier	if_debug2m		4988074	0					
ANR	4989427	ArgumentList	'j'		4988074	1					
ANR	4989428	Argument	'j'		4988074	0					
ANR	4989429	PrimaryExpression	'j'		4988074	0					
ANR	4989430	Argument	pte -> memory		4988074	1					
ANR	4989431	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4989432	Identifier	pte		4988074	0					
ANR	4989433	Identifier	memory		4988074	1					
ANR	4989434	Argument	"""[j] *(p-1) 0x%02x != chr 0x%02x, modified str should be passed\\n"""		4988074	2					
ANR	4989435	PrimaryExpression	"""[j] *(p-1) 0x%02x != chr 0x%02x, modified str should be passed\\n"""		4988074	0					
ANR	4989436	Argument	* ( p - 1 )		4988074	3					
ANR	4989437	UnaryOperationExpression	* ( p - 1 )		4988074	0					
ANR	4989438	UnaryOperator	*		4988074	0					
ANR	4989439	AdditiveExpression	p - 1		4988074	1		-			
ANR	4989440	Identifier	p		4988074	0					
ANR	4989441	PrimaryExpression	1		4988074	1					
ANR	4989442	Argument	( byte ) chr		4988074	4					
ANR	4989443	CastExpression	( byte ) chr		4988074	0					
ANR	4989444	CastTarget	byte		4988074	0					
ANR	4989445	Identifier	chr		4988074	1					
ANR	4989446	ExpressionStatement	"memcpy ( substr , p - 1 , min ( MAX_CMAP_CODE_SIZE , end - p + 1 ) )"	380:24:13620:13711	4988074	3	True				
ANR	4989447	CallExpression	"memcpy ( substr , p - 1 , min ( MAX_CMAP_CODE_SIZE , end - p + 1 ) )"		4988074	0					
ANR	4989448	Callee	memcpy		4988074	0					
ANR	4989449	Identifier	memcpy		4988074	0					
ANR	4989450	ArgumentList	substr		4988074	1					
ANR	4989451	Argument	substr		4988074	0					
ANR	4989452	Identifier	substr		4988074	0					
ANR	4989453	Argument	p - 1		4988074	1					
ANR	4989454	AdditiveExpression	p - 1		4988074	0		-			
ANR	4989455	Identifier	p		4988074	0					
ANR	4989456	PrimaryExpression	1		4988074	1					
ANR	4989457	Argument	"min ( MAX_CMAP_CODE_SIZE , end - p + 1 )"		4988074	2					
ANR	4989458	CallExpression	"min ( MAX_CMAP_CODE_SIZE , end - p + 1 )"		4988074	0					
ANR	4989459	Callee	min		4988074	0					
ANR	4989460	Identifier	min		4988074	0					
ANR	4989461	ArgumentList	MAX_CMAP_CODE_SIZE		4988074	1					
ANR	4989462	Argument	MAX_CMAP_CODE_SIZE		4988074	0					
ANR	4989463	Identifier	MAX_CMAP_CODE_SIZE		4988074	0					
ANR	4989464	Argument	end - p + 1		4988074	1					
ANR	4989465	AdditiveExpression	end - p + 1		4988074	0		-			
ANR	4989466	Identifier	end		4988074	0					
ANR	4989467	AdditiveExpression	p + 1		4988074	1		+			
ANR	4989468	Identifier	p		4988074	0					
ANR	4989469	PrimaryExpression	1		4988074	1					
ANR	4989470	ExpressionStatement	substr [ 0 ] = chr	382:24:13737:13752	4988074	4	True				
ANR	4989471	AssignmentExpression	substr [ 0 ] = chr		4988074	0		=			
ANR	4989472	ArrayIndexing	substr [ 0 ]		4988074	0					
ANR	4989473	Identifier	substr		4988074	0					
ANR	4989474	PrimaryExpression	0		4988074	1					
ANR	4989475	Identifier	chr		4988074	1					
ANR	4989476	ExpressionStatement	cstr . data = substr	383:24:13778:13796	4988074	5	True				
ANR	4989477	AssignmentExpression	cstr . data = substr		4988074	0		=			
ANR	4989478	MemberAccess	cstr . data		4988074	0					
ANR	4989479	Identifier	cstr		4988074	0					
ANR	4989480	Identifier	data		4988074	1					
ANR	4989481	Identifier	substr		4988074	1					
ANR	4989482	ExpressionStatement	"cstr . size = min ( MAX_CMAP_CODE_SIZE , end - p + 1 )"	384:24:13822:13870	4988074	6	True				
ANR	4989483	AssignmentExpression	"cstr . size = min ( MAX_CMAP_CODE_SIZE , end - p + 1 )"		4988074	0		=			
ANR	4989484	MemberAccess	cstr . size		4988074	0					
ANR	4989485	Identifier	cstr		4988074	0					
ANR	4989486	Identifier	size		4988074	1					
ANR	4989487	CallExpression	"min ( MAX_CMAP_CODE_SIZE , end - p + 1 )"		4988074	1					
ANR	4989488	Callee	min		4988074	0					
ANR	4989489	Identifier	min		4988074	0					
ANR	4989490	ArgumentList	MAX_CMAP_CODE_SIZE		4988074	1					
ANR	4989491	Argument	MAX_CMAP_CODE_SIZE		4988074	0					
ANR	4989492	Identifier	MAX_CMAP_CODE_SIZE		4988074	0					
ANR	4989493	Argument	end - p + 1		4988074	1					
ANR	4989494	AdditiveExpression	end - p + 1		4988074	0		-			
ANR	4989495	Identifier	end		4988074	0					
ANR	4989496	AdditiveExpression	p + 1		4988074	1		+			
ANR	4989497	Identifier	p		4988074	0					
ANR	4989498	PrimaryExpression	1		4988074	1					
ANR	4989499	IfStatement	if ( gs_debug_c ( 'j' ) )		4988074	7					
ANR	4989500	Condition	gs_debug_c ( 'j' )	385:28:13900:13914	4988074	0	True				
ANR	4989501	CallExpression	gs_debug_c ( 'j' )		4988074	0					
ANR	4989502	Callee	gs_debug_c		4988074	0					
ANR	4989503	Identifier	gs_debug_c		4988074	0					
ANR	4989504	ArgumentList	'j'		4988074	1					
ANR	4989505	Argument	'j'		4988074	0					
ANR	4989506	PrimaryExpression	'j'		4988074	0					
ANR	4989507	CompoundStatement		284:45:10404:10404	4988074	1					
ANR	4989508	ExpressionStatement	"dmlprintf ( pfont -> memory , ""[j] original str("" )"	386:28:13947:13992	4988074	0	True				
ANR	4989509	CallExpression	"dmlprintf ( pfont -> memory , ""[j] original str("" )"		4988074	0					
ANR	4989510	Callee	dmlprintf		4988074	0					
ANR	4989511	Identifier	dmlprintf		4988074	0					
ANR	4989512	ArgumentList	pfont -> memory		4988074	1					
ANR	4989513	Argument	pfont -> memory		4988074	0					
ANR	4989514	PtrMemberAccess	pfont -> memory		4988074	0					
ANR	4989515	Identifier	pfont		4988074	0					
ANR	4989516	Identifier	memory		4988074	1					
ANR	4989517	Argument	"""[j] original str("""		4988074	1					
ANR	4989518	PrimaryExpression	"""[j] original str("""		4988074	0					
ANR	4989519	ExpressionStatement	"debug_print_string_hex ( pfont -> memory , str , end - str )"	387:28:14022:14075	4988074	1	True				
ANR	4989520	CallExpression	"debug_print_string_hex ( pfont -> memory , str , end - str )"		4988074	0					
ANR	4989521	Callee	debug_print_string_hex		4988074	0					
ANR	4989522	Identifier	debug_print_string_hex		4988074	0					
ANR	4989523	ArgumentList	pfont -> memory		4988074	1					
ANR	4989524	Argument	pfont -> memory		4988074	0					
ANR	4989525	PtrMemberAccess	pfont -> memory		4988074	0					
ANR	4989526	Identifier	pfont		4988074	0					
ANR	4989527	Identifier	memory		4988074	1					
ANR	4989528	Argument	str		4988074	1					
ANR	4989529	Identifier	str		4988074	0					
ANR	4989530	Argument	end - str		4988074	2					
ANR	4989531	AdditiveExpression	end - str		4988074	0		-			
ANR	4989532	Identifier	end		4988074	0					
ANR	4989533	Identifier	str		4988074	1					
ANR	4989534	ExpressionStatement	"dmlprintf ( pfont -> memory , "") -> modified substr("" )"	388:28:14105:14154	4988074	2	True				
ANR	4989535	CallExpression	"dmlprintf ( pfont -> memory , "") -> modified substr("" )"		4988074	0					
ANR	4989536	Callee	dmlprintf		4988074	0					
ANR	4989537	Identifier	dmlprintf		4988074	0					
ANR	4989538	ArgumentList	pfont -> memory		4988074	1					
ANR	4989539	Argument	pfont -> memory		4988074	0					
ANR	4989540	PtrMemberAccess	pfont -> memory		4988074	0					
ANR	4989541	Identifier	pfont		4988074	0					
ANR	4989542	Identifier	memory		4988074	1					
ANR	4989543	Argument	""") -> modified substr("""		4988074	1					
ANR	4989544	PrimaryExpression	""") -> modified substr("""		4988074	0					
ANR	4989545	ExpressionStatement	"debug_print_string_hex ( pfont -> memory , cstr . data , cstr . size )"	389:28:14184:14243	4988074	3	True				
ANR	4989546	CallExpression	"debug_print_string_hex ( pfont -> memory , cstr . data , cstr . size )"		4988074	0					
ANR	4989547	Callee	debug_print_string_hex		4988074	0					
ANR	4989548	Identifier	debug_print_string_hex		4988074	0					
ANR	4989549	ArgumentList	pfont -> memory		4988074	1					
ANR	4989550	Argument	pfont -> memory		4988074	0					
ANR	4989551	PtrMemberAccess	pfont -> memory		4988074	0					
ANR	4989552	Identifier	pfont		4988074	0					
ANR	4989553	Identifier	memory		4988074	1					
ANR	4989554	Argument	cstr . data		4988074	1					
ANR	4989555	MemberAccess	cstr . data		4988074	0					
ANR	4989556	Identifier	cstr		4988074	0					
ANR	4989557	Identifier	data		4988074	1					
ANR	4989558	Argument	cstr . size		4988074	2					
ANR	4989559	MemberAccess	cstr . size		4988074	0					
ANR	4989560	Identifier	cstr		4988074	0					
ANR	4989561	Identifier	size		4988074	1					
ANR	4989562	ExpressionStatement	"dmlprintf ( pfont -> memory , "")\\n"" )"	390:28:14273:14304	4988074	4	True				
ANR	4989563	CallExpression	"dmlprintf ( pfont -> memory , "")\\n"" )"		4988074	0					
ANR	4989564	Callee	dmlprintf		4988074	0					
ANR	4989565	Identifier	dmlprintf		4988074	0					
ANR	4989566	ArgumentList	pfont -> memory		4988074	1					
ANR	4989567	Argument	pfont -> memory		4988074	0					
ANR	4989568	PtrMemberAccess	pfont -> memory		4988074	0					
ANR	4989569	Identifier	pfont		4988074	0					
ANR	4989570	Identifier	memory		4988074	1					
ANR	4989571	Argument	""")\\n"""		4988074	1					
ANR	4989572	PrimaryExpression	""")\\n"""		4988074	0					
ANR	4989573	ExpressionStatement	"code = gs_cmap_decode_next ( pdata -> CMap , & cstr , ( uint * ) & submindex , & fidx , & chr , & glyph )"	392:24:14356:14483	4988074	8	True				
ANR	4989574	AssignmentExpression	"code = gs_cmap_decode_next ( pdata -> CMap , & cstr , ( uint * ) & submindex , & fidx , & chr , & glyph )"		4988074	0		=			
ANR	4989575	Identifier	code		4988074	0					
ANR	4989576	CallExpression	"gs_cmap_decode_next ( pdata -> CMap , & cstr , ( uint * ) & submindex , & fidx , & chr , & glyph )"		4988074	1					
ANR	4989577	Callee	gs_cmap_decode_next		4988074	0					
ANR	4989578	Identifier	gs_cmap_decode_next		4988074	0					
ANR	4989579	ArgumentList	pdata -> CMap		4988074	1					
ANR	4989580	Argument	pdata -> CMap		4988074	0					
ANR	4989581	PtrMemberAccess	pdata -> CMap		4988074	0					
ANR	4989582	Identifier	pdata		4988074	0					
ANR	4989583	Identifier	CMap		4988074	1					
ANR	4989584	Argument	& cstr		4988074	1					
ANR	4989585	UnaryOperationExpression	& cstr		4988074	0					
ANR	4989586	UnaryOperator	&		4988074	0					
ANR	4989587	Identifier	cstr		4988074	1					
ANR	4989588	Argument	( uint * ) & submindex		4988074	2					
ANR	4989589	CastExpression	( uint * ) & submindex		4988074	0					
ANR	4989590	CastTarget	uint *		4988074	0					
ANR	4989591	UnaryOperationExpression	& submindex		4988074	1					
ANR	4989592	UnaryOperator	&		4988074	0					
ANR	4989593	Identifier	submindex		4988074	1					
ANR	4989594	Argument	& fidx		4988074	3					
ANR	4989595	UnaryOperationExpression	& fidx		4988074	0					
ANR	4989596	UnaryOperator	&		4988074	0					
ANR	4989597	Identifier	fidx		4988074	1					
ANR	4989598	Argument	& chr		4988074	4					
ANR	4989599	UnaryOperationExpression	& chr		4988074	0					
ANR	4989600	UnaryOperator	&		4988074	0					
ANR	4989601	Identifier	chr		4988074	1					
ANR	4989602	Argument	& glyph		4988074	5					
ANR	4989603	UnaryOperationExpression	& glyph		4988074	0					
ANR	4989604	UnaryOperator	&		4988074	0					
ANR	4989605	Identifier	glyph		4988074	1					
ANR	4989606	ExpressionStatement	mindex += submindex	394:24:14509:14528	4988074	9	True				
ANR	4989607	AssignmentExpression	mindex += submindex		4988074	0		+=			
ANR	4989608	Identifier	mindex		4988074	0					
ANR	4989609	Identifier	submindex		4988074	1					
ANR	4989610	ElseStatement	else		4988074	0					
ANR	4989611	CompoundStatement		294:27:11044:11044	4988074	0					
ANR	4989612	ExpressionStatement	cstr . data = str	396:24:14583:14598	4988074	0	True				
ANR	4989613	AssignmentExpression	cstr . data = str		4988074	0		=			
ANR	4989614	MemberAccess	cstr . data		4988074	0					
ANR	4989615	Identifier	cstr		4988074	0					
ANR	4989616	Identifier	data		4988074	1					
ANR	4989617	Identifier	str		4988074	1					
ANR	4989618	ExpressionStatement	cstr . size = end - str	397:24:14624:14645	4988074	1	True				
ANR	4989619	AssignmentExpression	cstr . size = end - str		4988074	0		=			
ANR	4989620	MemberAccess	cstr . size		4988074	0					
ANR	4989621	Identifier	cstr		4988074	0					
ANR	4989622	Identifier	size		4988074	1					
ANR	4989623	AdditiveExpression	end - str		4988074	1		-			
ANR	4989624	Identifier	end		4988074	0					
ANR	4989625	Identifier	str		4988074	1					
ANR	4989626	ExpressionStatement	"code = gs_cmap_decode_next ( pdata -> CMap , & cstr , & mindex , & fidx , & chr , & glyph )"	398:24:14671:14794	4988074	2	True				
ANR	4989627	AssignmentExpression	"code = gs_cmap_decode_next ( pdata -> CMap , & cstr , & mindex , & fidx , & chr , & glyph )"		4988074	0		=			
ANR	4989628	Identifier	code		4988074	0					
ANR	4989629	CallExpression	"gs_cmap_decode_next ( pdata -> CMap , & cstr , & mindex , & fidx , & chr , & glyph )"		4988074	1					
ANR	4989630	Callee	gs_cmap_decode_next		4988074	0					
ANR	4989631	Identifier	gs_cmap_decode_next		4988074	0					
ANR	4989632	ArgumentList	pdata -> CMap		4988074	1					
ANR	4989633	Argument	pdata -> CMap		4988074	0					
ANR	4989634	PtrMemberAccess	pdata -> CMap		4988074	0					
ANR	4989635	Identifier	pdata		4988074	0					
ANR	4989636	Identifier	CMap		4988074	1					
ANR	4989637	Argument	& cstr		4988074	1					
ANR	4989638	UnaryOperationExpression	& cstr		4988074	0					
ANR	4989639	UnaryOperator	&		4988074	0					
ANR	4989640	Identifier	cstr		4988074	1					
ANR	4989641	Argument	& mindex		4988074	2					
ANR	4989642	UnaryOperationExpression	& mindex		4988074	0					
ANR	4989643	UnaryOperator	&		4988074	0					
ANR	4989644	Identifier	mindex		4988074	1					
ANR	4989645	Argument	& fidx		4988074	3					
ANR	4989646	UnaryOperationExpression	& fidx		4988074	0					
ANR	4989647	UnaryOperator	&		4988074	0					
ANR	4989648	Identifier	fidx		4988074	1					
ANR	4989649	Argument	& chr		4988074	4					
ANR	4989650	UnaryOperationExpression	& chr		4988074	0					
ANR	4989651	UnaryOperator	&		4988074	0					
ANR	4989652	Identifier	chr		4988074	1					
ANR	4989653	Argument	& glyph		4988074	5					
ANR	4989654	UnaryOperationExpression	& glyph		4988074	0					
ANR	4989655	UnaryOperator	&		4988074	0					
ANR	4989656	Identifier	glyph		4988074	1					
ANR	4989657	IfStatement	if ( code < 0 )		4988074	4					
ANR	4989658	Condition	code < 0	401:24:14842:14849	4988074	0	True				
ANR	4989659	RelationalExpression	code < 0		4988074	0		<			
ANR	4989660	Identifier	code		4988074	0					
ANR	4989661	PrimaryExpression	0		4988074	1					
ANR	4989662	ReturnStatement	return code ;	402:24:14876:14887	4988074	1	True				
ANR	4989663	Identifier	code		4988074	0					
ANR	4989664	ExpressionStatement	pte -> cmap_code = code	403:20:14909:14930	4988074	5	True				
ANR	4989665	AssignmentExpression	pte -> cmap_code = code		4988074	0		=			
ANR	4989666	PtrMemberAccess	pte -> cmap_code		4988074	0					
ANR	4989667	Identifier	pte		4988074	0					
ANR	4989668	Identifier	cmap_code		4988074	1					
ANR	4989669	Identifier	code		4988074	1					
ANR	4989670	ExpressionStatement	p = str + mindex	404:20:14977:14993	4988074	6	True				
ANR	4989671	AssignmentExpression	p = str + mindex		4988074	0		=			
ANR	4989672	Identifier	p		4988074	0					
ANR	4989673	AdditiveExpression	str + mindex		4988074	1		+			
ANR	4989674	Identifier	str		4988074	0					
ANR	4989675	Identifier	mindex		4988074	1					
ANR	4989676	ExpressionStatement	"if_debug3m ( 'J' , pte -> memory , ""[J]CMap returns %d, chr=0x%lx, glyph=0x%lx\\n"" , code , ( ulong ) chr , ( ulong ) glyph )"	405:20:15015:15155	4988074	7	True				
ANR	4989677	CallExpression	"if_debug3m ( 'J' , pte -> memory , ""[J]CMap returns %d, chr=0x%lx, glyph=0x%lx\\n"" , code , ( ulong ) chr , ( ulong ) glyph )"		4988074	0					
ANR	4989678	Callee	if_debug3m		4988074	0					
ANR	4989679	Identifier	if_debug3m		4988074	0					
ANR	4989680	ArgumentList	'J'		4988074	1					
ANR	4989681	Argument	'J'		4988074	0					
ANR	4989682	PrimaryExpression	'J'		4988074	0					
ANR	4989683	Argument	pte -> memory		4988074	1					
ANR	4989684	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4989685	Identifier	pte		4988074	0					
ANR	4989686	Identifier	memory		4988074	1					
ANR	4989687	Argument	"""[J]CMap returns %d, chr=0x%lx, glyph=0x%lx\\n"""		4988074	2					
ANR	4989688	PrimaryExpression	"""[J]CMap returns %d, chr=0x%lx, glyph=0x%lx\\n"""		4988074	0					
ANR	4989689	Argument	code		4988074	3					
ANR	4989690	Identifier	code		4988074	0					
ANR	4989691	Argument	( ulong ) chr		4988074	4					
ANR	4989692	CastExpression	( ulong ) chr		4988074	0					
ANR	4989693	CastTarget	ulong		4988074	0					
ANR	4989694	Identifier	chr		4988074	1					
ANR	4989695	Argument	( ulong ) glyph		4988074	5					
ANR	4989696	CastExpression	( ulong ) glyph		4988074	0					
ANR	4989697	CastTarget	ulong		4988074	0					
ANR	4989698	Identifier	glyph		4988074	1					
ANR	4989699	IfStatement	if ( code == 0 )		4988074	8					
ANR	4989700	Condition	code == 0	407:24:15181:15189	4988074	0	True				
ANR	4989701	EqualityExpression	code == 0		4988074	0		==			
ANR	4989702	Identifier	code		4988074	0					
ANR	4989703	PrimaryExpression	0		4988074	1					
ANR	4989704	CompoundStatement		306:35:11679:11679	4988074	1					
ANR	4989705	IfStatement	if ( glyph == GS_NO_GLYPH )		4988074	0					
ANR	4989706	Condition	glyph == GS_NO_GLYPH	408:28:15222:15241	4988074	0	True				
ANR	4989707	EqualityExpression	glyph == GS_NO_GLYPH		4988074	0		==			
ANR	4989708	Identifier	glyph		4988074	0					
ANR	4989709	Identifier	GS_NO_GLYPH		4988074	1					
ANR	4989710	CompoundStatement		307:50:11731:11731	4988074	1					
ANR	4989711	ExpressionStatement	glyph = GS_MIN_CID_GLYPH	409:28:15274:15298	4988074	0	True				
ANR	4989712	AssignmentExpression	glyph = GS_MIN_CID_GLYPH		4988074	0		=			
ANR	4989713	Identifier	glyph		4988074	0					
ANR	4989714	Identifier	GS_MIN_CID_GLYPH		4988074	1					
ANR	4989715	ExpressionStatement	"if_debug0m ( 'J' , pte -> memory , ""... undefined\\n"" )"	410:28:15328:15375	4988074	1	True				
ANR	4989716	CallExpression	"if_debug0m ( 'J' , pte -> memory , ""... undefined\\n"" )"		4988074	0					
ANR	4989717	Callee	if_debug0m		4988074	0					
ANR	4989718	Identifier	if_debug0m		4988074	0					
ANR	4989719	ArgumentList	'J'		4988074	1					
ANR	4989720	Argument	'J'		4988074	0					
ANR	4989721	PrimaryExpression	'J'		4988074	0					
ANR	4989722	Argument	pte -> memory		4988074	1					
ANR	4989723	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4989724	Identifier	pte		4988074	0					
ANR	4989725	Identifier	memory		4988074	1					
ANR	4989726	Argument	"""... undefined\\n"""		4988074	2					
ANR	4989727	PrimaryExpression	"""... undefined\\n"""		4988074	0					
ANR	4989728	ExpressionStatement	"select_descendant ( pfont , pdata , fidx , fdepth )"	414:28:15586:15631	4988074	2	True				
ANR	4989729	CallExpression	"select_descendant ( pfont , pdata , fidx , fdepth )"		4988074	0					
ANR	4989730	Callee	select_descendant		4988074	0					
ANR	4989731	Identifier	select_descendant		4988074	0					
ANR	4989732	ArgumentList	pfont		4988074	1					
ANR	4989733	Argument	pfont		4988074	0					
ANR	4989734	Identifier	pfont		4988074	0					
ANR	4989735	Argument	pdata		4988074	1					
ANR	4989736	Identifier	pdata		4988074	0					
ANR	4989737	Argument	fidx		4988074	2					
ANR	4989738	Identifier	fidx		4988074	0					
ANR	4989739	Argument	fdepth		4988074	3					
ANR	4989740	Identifier	fdepth		4988074	0					
ANR	4989741	GotoStatement	goto done ;	415:28:15661:15670	4988074	3	True				
ANR	4989742	Identifier	done		4988074	0					
ANR	4989743	ElseStatement	else		4988074	0					
ANR	4989744	ExpressionStatement	"chr = ( gs_char ) glyph , glyph = GS_NO_GLYPH"	418:24:15749:15791	4988074	0	True				
ANR	4989745	Expression	"chr = ( gs_char ) glyph , glyph = GS_NO_GLYPH"		4988074	0					
ANR	4989746	AssignmentExpression	chr = ( gs_char ) glyph		4988074	0		=			
ANR	4989747	Identifier	chr		4988074	0					
ANR	4989748	CastExpression	( gs_char ) glyph		4988074	1					
ANR	4989749	CastTarget	gs_char		4988074	0					
ANR	4989750	Identifier	glyph		4988074	1					
ANR	4989751	AssignmentExpression	glyph = GS_NO_GLYPH		4988074	1		=			
ANR	4989752	Identifier	glyph		4988074	0					
ANR	4989753	Identifier	GS_NO_GLYPH		4988074	1					
ANR	4989754	BreakStatement	break ;	420:20:15885:15890	4988074	9	True				
ANR	4989755	ExpressionStatement	"select_descendant ( pfont , pdata , fidx , fdepth )"	424:8:15929:15974	4988074	2	True				
ANR	4989756	CallExpression	"select_descendant ( pfont , pdata , fidx , fdepth )"		4988074	0					
ANR	4989757	Callee	select_descendant		4988074	0					
ANR	4989758	Identifier	select_descendant		4988074	0					
ANR	4989759	ArgumentList	pfont		4988074	1					
ANR	4989760	Argument	pfont		4988074	0					
ANR	4989761	Identifier	pfont		4988074	0					
ANR	4989762	Argument	pdata		4988074	1					
ANR	4989763	Identifier	pdata		4988074	0					
ANR	4989764	Argument	fidx		4988074	2					
ANR	4989765	Identifier	fidx		4988074	0					
ANR	4989766	Argument	fdepth		4988074	3					
ANR	4989767	Identifier	fdepth		4988074	0					
ANR	4989768	ExpressionStatement	"if_debug2m ( 'J' , pte -> memory , ""... new depth=%d, new font=0x%lx\\n"" , fdepth , ( ulong ) pfont )"	425:8:15984:16091	4988074	3	True				
ANR	4989769	CallExpression	"if_debug2m ( 'J' , pte -> memory , ""... new depth=%d, new font=0x%lx\\n"" , fdepth , ( ulong ) pfont )"		4988074	0					
ANR	4989770	Callee	if_debug2m		4988074	0					
ANR	4989771	Identifier	if_debug2m		4988074	0					
ANR	4989772	ArgumentList	'J'		4988074	1					
ANR	4989773	Argument	'J'		4988074	0					
ANR	4989774	PrimaryExpression	'J'		4988074	0					
ANR	4989775	Argument	pte -> memory		4988074	1					
ANR	4989776	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4989777	Identifier	pte		4988074	0					
ANR	4989778	Identifier	memory		4988074	1					
ANR	4989779	Argument	"""... new depth=%d, new font=0x%lx\\n"""		4988074	2					
ANR	4989780	PrimaryExpression	"""... new depth=%d, new font=0x%lx\\n"""		4988074	0					
ANR	4989781	Argument	fdepth		4988074	3					
ANR	4989782	Identifier	fdepth		4988074	0					
ANR	4989783	Argument	( ulong ) pfont		4988074	4					
ANR	4989784	CastExpression	( ulong ) pfont		4988074	0					
ANR	4989785	CastTarget	ulong		4988074	0					
ANR	4989786	Identifier	pfont		4988074	1					
ANR	4989787	Label	done :	428:0:16099:16103	4988074	37	True				
ANR	4989788	Identifier	done		4988074	0					
ANR	4989789	IfStatement	if ( pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_encrypted || pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_TrueType )		4988074	38					
ANR	4989790	Condition	pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_encrypted || pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_TrueType	431:8:16175:16305	4988074	0	True				
ANR	4989791	OrExpression	pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_encrypted || pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_TrueType		4988074	0		||			
ANR	4989792	EqualityExpression	pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_encrypted		4988074	0		==			
ANR	4989793	PtrMemberAccess	pte -> fstack . items [ fdepth ] . font -> FontType		4988074	0					
ANR	4989794	MemberAccess	pte -> fstack . items [ fdepth ] . font		4988074	0					
ANR	4989795	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4989796	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4989797	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4989798	Identifier	pte		4988074	0					
ANR	4989799	Identifier	fstack		4988074	1					
ANR	4989800	Identifier	items		4988074	1					
ANR	4989801	Identifier	fdepth		4988074	1					
ANR	4989802	Identifier	font		4988074	1					
ANR	4989803	Identifier	FontType		4988074	1					
ANR	4989804	Identifier	ft_CID_encrypted		4988074	1					
ANR	4989805	EqualityExpression	pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_TrueType		4988074	1		==			
ANR	4989806	PtrMemberAccess	pte -> fstack . items [ fdepth ] . font -> FontType		4988074	0					
ANR	4989807	MemberAccess	pte -> fstack . items [ fdepth ] . font		4988074	0					
ANR	4989808	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4989809	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4989810	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4989811	Identifier	pte		4988074	0					
ANR	4989812	Identifier	fstack		4988074	1					
ANR	4989813	Identifier	items		4988074	1					
ANR	4989814	Identifier	fdepth		4988074	1					
ANR	4989815	Identifier	font		4988074	1					
ANR	4989816	Identifier	FontType		4988074	1					
ANR	4989817	Identifier	ft_CID_TrueType		4988074	1					
ANR	4989818	CompoundStatement		333:8:12814:12880	4988074	1					
ANR	4989819	IdentifierDeclStatement	gs_font_base * pfb = ( gs_font_base * ) pte -> fstack . items [ fdepth ] . font ;	434:8:16327:16393	4988074	0	True				
ANR	4989820	IdentifierDecl	* pfb = ( gs_font_base * ) pte -> fstack . items [ fdepth ] . font		4988074	0					
ANR	4989821	IdentifierDeclType	gs_font_base *		4988074	0					
ANR	4989822	Identifier	pfb		4988074	1					
ANR	4989823	AssignmentExpression	* pfb = ( gs_font_base * ) pte -> fstack . items [ fdepth ] . font		4988074	2		=			
ANR	4989824	Identifier	pfb		4988074	0					
ANR	4989825	CastExpression	( gs_font_base * ) pte -> fstack . items [ fdepth ] . font		4988074	1					
ANR	4989826	CastTarget	gs_font_base *		4988074	0					
ANR	4989827	MemberAccess	pte -> fstack . items [ fdepth ] . font		4988074	1					
ANR	4989828	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4989829	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4989830	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4989831	Identifier	pte		4988074	0					
ANR	4989832	Identifier	fstack		4988074	1					
ANR	4989833	Identifier	items		4988074	1					
ANR	4989834	Identifier	fdepth		4988074	1					
ANR	4989835	Identifier	font		4988074	1					
ANR	4989836	ExpressionStatement	pte -> FontBBox_as_Metrics2 = pfb -> FontBBox . q	436:8:16404:16447	4988074	1	True				
ANR	4989837	AssignmentExpression	pte -> FontBBox_as_Metrics2 = pfb -> FontBBox . q		4988074	0		=			
ANR	4989838	PtrMemberAccess	pte -> FontBBox_as_Metrics2		4988074	0					
ANR	4989839	Identifier	pte		4988074	0					
ANR	4989840	Identifier	FontBBox_as_Metrics2		4988074	1					
ANR	4989841	MemberAccess	pfb -> FontBBox . q		4988074	1					
ANR	4989842	PtrMemberAccess	pfb -> FontBBox		4988074	0					
ANR	4989843	Identifier	pfb		4988074	0					
ANR	4989844	Identifier	FontBBox		4988074	1					
ANR	4989845	Identifier	q		4988074	1					
ANR	4989846	ExpressionStatement	fidx = 0	440:4:16541:16549	4988074	39	True				
ANR	4989847	AssignmentExpression	fidx = 0		4988074	0		=			
ANR	4989848	Identifier	fidx		4988074	0					
ANR	4989849	PrimaryExpression	0		4988074	1					
ANR	4989850	IfStatement	if ( pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_encrypted )		4988074	40					
ANR	4989851	Condition	pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_encrypted	441:8:16559:16618	4988074	0	True				
ANR	4989852	EqualityExpression	pte -> fstack . items [ fdepth ] . font -> FontType == ft_CID_encrypted		4988074	0		==			
ANR	4989853	PtrMemberAccess	pte -> fstack . items [ fdepth ] . font -> FontType		4988074	0					
ANR	4989854	MemberAccess	pte -> fstack . items [ fdepth ] . font		4988074	0					
ANR	4989855	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4989856	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4989857	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4989858	Identifier	pte		4988074	0					
ANR	4989859	Identifier	fstack		4988074	1					
ANR	4989860	Identifier	items		4988074	1					
ANR	4989861	Identifier	fdepth		4988074	1					
ANR	4989862	Identifier	font		4988074	1					
ANR	4989863	Identifier	FontType		4988074	1					
ANR	4989864	Identifier	ft_CID_encrypted		4988074	1					
ANR	4989865	CompoundStatement		341:8:13118:13138	4988074	1					
ANR	4989866	IdentifierDeclStatement	"int code , font_index ;"	442:8:16631:16651	4988074	0	True				
ANR	4989867	IdentifierDecl	code		4988074	0					
ANR	4989868	IdentifierDeclType	int		4988074	0					
ANR	4989869	Identifier	code		4988074	1					
ANR	4989870	IdentifierDecl	font_index		4988074	1					
ANR	4989871	IdentifierDeclType	int		4988074	0					
ANR	4989872	Identifier	font_index		4988074	1					
ANR	4989873	ExpressionStatement	pfont = pte -> fstack . items [ fdepth ] . font	443:8:16661:16699	4988074	1	True				
ANR	4989874	AssignmentExpression	pfont = pte -> fstack . items [ fdepth ] . font		4988074	0		=			
ANR	4989875	Identifier	pfont		4988074	0					
ANR	4989876	MemberAccess	pte -> fstack . items [ fdepth ] . font		4988074	1					
ANR	4989877	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4989878	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4989879	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4989880	Identifier	pte		4988074	0					
ANR	4989881	Identifier	fstack		4988074	1					
ANR	4989882	Identifier	items		4988074	1					
ANR	4989883	Identifier	fdepth		4988074	1					
ANR	4989884	Identifier	font		4988074	1					
ANR	4989885	ExpressionStatement	"code = ( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data ( ( gs_font_base * ) pfont , glyph , NULL , & font_index )"	444:8:16709:16835	4988074	2	True				
ANR	4989886	AssignmentExpression	"code = ( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data ( ( gs_font_base * ) pfont , glyph , NULL , & font_index )"		4988074	0		=			
ANR	4989887	Identifier	code		4988074	0					
ANR	4989888	CallExpression	"( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data ( ( gs_font_base * ) pfont , glyph , NULL , & font_index )"		4988074	1					
ANR	4989889	Callee	( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data		4988074	0					
ANR	4989890	MemberAccess	( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data		4988074	0					
ANR	4989891	PtrMemberAccess	( ( gs_font_cid0 * ) pfont ) -> cidata		4988074	0					
ANR	4989892	CastExpression	( gs_font_cid0 * ) pfont		4988074	0					
ANR	4989893	CastTarget	gs_font_cid0 *		4988074	0					
ANR	4989894	Identifier	pfont		4988074	1					
ANR	4989895	Identifier	cidata		4988074	1					
ANR	4989896	Identifier	glyph_data		4988074	1					
ANR	4989897	ArgumentList	( gs_font_base * ) pfont		4988074	1					
ANR	4989898	Argument	( gs_font_base * ) pfont		4988074	0					
ANR	4989899	CastExpression	( gs_font_base * ) pfont		4988074	0					
ANR	4989900	CastTarget	gs_font_base *		4988074	0					
ANR	4989901	Identifier	pfont		4988074	1					
ANR	4989902	Argument	glyph		4988074	1					
ANR	4989903	Identifier	glyph		4988074	0					
ANR	4989904	Argument	NULL		4988074	2					
ANR	4989905	Identifier	NULL		4988074	0					
ANR	4989906	Argument	& font_index		4988074	3					
ANR	4989907	UnaryOperationExpression	& font_index		4988074	0					
ANR	4989908	UnaryOperator	&		4988074	0					
ANR	4989909	Identifier	font_index		4988074	1					
ANR	4989910	IfStatement	if ( code < 0 )		4988074	3					
ANR	4989911	Condition	code < 0	446:12:16849:16856	4988074	0	True				
ANR	4989912	RelationalExpression	code < 0		4988074	0		<			
ANR	4989913	Identifier	code		4988074	0					
ANR	4989914	PrimaryExpression	0		4988074	1					
ANR	4989915	CompoundStatement		345:22:13346:13346	4988074	1					
ANR	4989916	ExpressionStatement	"code = ( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data ( ( gs_font_base * ) pfont , ( gs_glyph ) ( GS_MIN_CID_GLYPH + 0 ) , NULL , & font_index )"	447:11:16928:17077	4988074	0	True				
ANR	4989917	AssignmentExpression	"code = ( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data ( ( gs_font_base * ) pfont , ( gs_glyph ) ( GS_MIN_CID_GLYPH + 0 ) , NULL , & font_index )"		4988074	0		=			
ANR	4989918	Identifier	code		4988074	0					
ANR	4989919	CallExpression	"( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data ( ( gs_font_base * ) pfont , ( gs_glyph ) ( GS_MIN_CID_GLYPH + 0 ) , NULL , & font_index )"		4988074	1					
ANR	4989920	Callee	( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data		4988074	0					
ANR	4989921	MemberAccess	( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data		4988074	0					
ANR	4989922	PtrMemberAccess	( ( gs_font_cid0 * ) pfont ) -> cidata		4988074	0					
ANR	4989923	CastExpression	( gs_font_cid0 * ) pfont		4988074	0					
ANR	4989924	CastTarget	gs_font_cid0 *		4988074	0					
ANR	4989925	Identifier	pfont		4988074	1					
ANR	4989926	Identifier	cidata		4988074	1					
ANR	4989927	Identifier	glyph_data		4988074	1					
ANR	4989928	ArgumentList	( gs_font_base * ) pfont		4988074	1					
ANR	4989929	Argument	( gs_font_base * ) pfont		4988074	0					
ANR	4989930	CastExpression	( gs_font_base * ) pfont		4988074	0					
ANR	4989931	CastTarget	gs_font_base *		4988074	0					
ANR	4989932	Identifier	pfont		4988074	1					
ANR	4989933	Argument	( gs_glyph ) ( GS_MIN_CID_GLYPH + 0 )		4988074	1					
ANR	4989934	CastExpression	( gs_glyph ) ( GS_MIN_CID_GLYPH + 0 )		4988074	0					
ANR	4989935	CastTarget	gs_glyph		4988074	0					
ANR	4989936	AdditiveExpression	GS_MIN_CID_GLYPH + 0		4988074	1		+			
ANR	4989937	Identifier	GS_MIN_CID_GLYPH		4988074	0					
ANR	4989938	PrimaryExpression	0		4988074	1					
ANR	4989939	Argument	NULL		4988074	2					
ANR	4989940	Identifier	NULL		4988074	0					
ANR	4989941	Argument	& font_index		4988074	3					
ANR	4989942	UnaryOperationExpression	& font_index		4988074	0					
ANR	4989943	UnaryOperator	&		4988074	0					
ANR	4989944	Identifier	font_index		4988074	1					
ANR	4989945	IfStatement	if ( code < 0 )		4988074	1					
ANR	4989946	Condition	code < 0	449:15:17094:17101	4988074	0	True				
ANR	4989947	RelationalExpression	code < 0		4988074	0		<			
ANR	4989948	Identifier	code		4988074	0					
ANR	4989949	PrimaryExpression	0		4988074	1					
ANR	4989950	ExpressionStatement	return_error ( gs_error_invalidfont )	450:15:17119:17153	4988074	1	True				
ANR	4989951	CallExpression	return_error ( gs_error_invalidfont )		4988074	0					
ANR	4989952	Callee	return_error		4988074	0					
ANR	4989953	Identifier	return_error		4988074	0					
ANR	4989954	ArgumentList	gs_error_invalidfont		4988074	1					
ANR	4989955	Argument	gs_error_invalidfont		4988074	0					
ANR	4989956	Identifier	gs_error_invalidfont		4988074	0					
ANR	4989957	ExpressionStatement	fidx = ( uint ) font_index	452:8:17173:17196	4988074	4	True				
ANR	4989958	AssignmentExpression	fidx = ( uint ) font_index		4988074	0		=			
ANR	4989959	Identifier	fidx		4988074	0					
ANR	4989960	CastExpression	( uint ) font_index		4988074	1					
ANR	4989961	CastTarget	uint		4988074	0					
ANR	4989962	Identifier	font_index		4988074	1					
ANR	4989963	IfStatement	if ( ! changed && pte -> fstack . items [ fdepth ] . index != fidx )		4988074	5					
ANR	4989964	Condition	! changed && pte -> fstack . items [ fdepth ] . index != fidx	453:12:17210:17260	4988074	0	True				
ANR	4989965	AndExpression	! changed && pte -> fstack . items [ fdepth ] . index != fidx		4988074	0		&&			
ANR	4989966	UnaryOperationExpression	! changed		4988074	0					
ANR	4989967	UnaryOperator	!		4988074	0					
ANR	4989968	Identifier	changed		4988074	1					
ANR	4989969	EqualityExpression	pte -> fstack . items [ fdepth ] . index != fidx		4988074	1		!=			
ANR	4989970	MemberAccess	pte -> fstack . items [ fdepth ] . index		4988074	0					
ANR	4989971	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4989972	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4989973	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4989974	Identifier	pte		4988074	0					
ANR	4989975	Identifier	fstack		4988074	1					
ANR	4989976	Identifier	items		4988074	1					
ANR	4989977	Identifier	fdepth		4988074	1					
ANR	4989978	Identifier	index		4988074	1					
ANR	4989979	Identifier	fidx		4988074	1					
ANR	4989980	ExpressionStatement	changed = 1	454:12:17275:17286	4988074	1	True				
ANR	4989981	AssignmentExpression	changed = 1		4988074	0		=			
ANR	4989982	Identifier	changed		4988074	0					
ANR	4989983	PrimaryExpression	1		4988074	1					
ANR	4989984	ExpressionStatement	pte -> fstack . items [ fdepth ] . index = fidx	456:4:17298:17336	4988074	41	True				
ANR	4989985	AssignmentExpression	pte -> fstack . items [ fdepth ] . index = fidx		4988074	0		=			
ANR	4989986	MemberAccess	pte -> fstack . items [ fdepth ] . index		4988074	0					
ANR	4989987	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4989988	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4989989	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4989990	Identifier	pte		4988074	0					
ANR	4989991	Identifier	fstack		4988074	1					
ANR	4989992	Identifier	items		4988074	1					
ANR	4989993	Identifier	fdepth		4988074	1					
ANR	4989994	Identifier	index		4988074	1					
ANR	4989995	Identifier	fidx		4988074	1					
ANR	4989996	ExpressionStatement	* pchr = chr	458:4:17343:17354	4988074	42	True				
ANR	4989997	AssignmentExpression	* pchr = chr		4988074	0		=			
ANR	4989998	UnaryOperationExpression	* pchr		4988074	0					
ANR	4989999	UnaryOperator	*		4988074	0					
ANR	4990000	Identifier	pchr		4988074	1					
ANR	4990001	Identifier	chr		4988074	1					
ANR	4990002	ExpressionStatement	* pglyph = glyph	459:4:17360:17375	4988074	43	True				
ANR	4990003	AssignmentExpression	* pglyph = glyph		4988074	0		=			
ANR	4990004	UnaryOperationExpression	* pglyph		4988074	0					
ANR	4990005	UnaryOperator	*		4988074	0					
ANR	4990006	Identifier	pglyph		4988074	1					
ANR	4990007	Identifier	glyph		4988074	1					
ANR	4990008	IfStatement	if ( str == pte -> text . data . bytes )		4988074	44					
ANR	4990009	Condition	str == pte -> text . data . bytes	462:8:17515:17541	4988074	0	True				
ANR	4990010	EqualityExpression	str == pte -> text . data . bytes		4988074	0		==			
ANR	4990011	Identifier	str		4988074	0					
ANR	4990012	MemberAccess	pte -> text . data . bytes		4988074	1					
ANR	4990013	MemberAccess	pte -> text . data		4988074	0					
ANR	4990014	PtrMemberAccess	pte -> text		4988074	0					
ANR	4990015	Identifier	pte		4988074	0					
ANR	4990016	Identifier	text		4988074	1					
ANR	4990017	Identifier	data		4988074	1					
ANR	4990018	Identifier	bytes		4988074	1					
ANR	4990019	ExpressionStatement	pte -> index = p - str	463:8:17552:17572	4988074	1	True				
ANR	4990020	AssignmentExpression	pte -> index = p - str		4988074	0		=			
ANR	4990021	PtrMemberAccess	pte -> index		4988074	0					
ANR	4990022	Identifier	pte		4988074	0					
ANR	4990023	Identifier	index		4988074	1					
ANR	4990024	AdditiveExpression	p - str		4988074	1		-			
ANR	4990025	Identifier	p		4988074	0					
ANR	4990026	Identifier	str		4988074	1					
ANR	4990027	ExpressionStatement	pte -> fstack . depth = fdepth	464:4:17578:17604	4988074	45	True				
ANR	4990028	AssignmentExpression	pte -> fstack . depth = fdepth		4988074	0		=			
ANR	4990029	MemberAccess	pte -> fstack . depth		4988074	0					
ANR	4990030	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4990031	Identifier	pte		4988074	0					
ANR	4990032	Identifier	fstack		4988074	1					
ANR	4990033	Identifier	depth		4988074	1					
ANR	4990034	Identifier	fdepth		4988074	1					
ANR	4990035	ExpressionStatement	"if_debug4m ( 'J' , pte -> memory , ""[J]depth=%d font=0x%lx index=%d changed=%d\\n"" , fdepth , ( ulong ) pte -> fstack . items [ fdepth ] . font , pte -> fstack . items [ fdepth ] . index , changed )"	465:4:17610:17806	4988074	46	True				
ANR	4990036	CallExpression	"if_debug4m ( 'J' , pte -> memory , ""[J]depth=%d font=0x%lx index=%d changed=%d\\n"" , fdepth , ( ulong ) pte -> fstack . items [ fdepth ] . font , pte -> fstack . items [ fdepth ] . index , changed )"		4988074	0					
ANR	4990037	Callee	if_debug4m		4988074	0					
ANR	4990038	Identifier	if_debug4m		4988074	0					
ANR	4990039	ArgumentList	'J'		4988074	1					
ANR	4990040	Argument	'J'		4988074	0					
ANR	4990041	PrimaryExpression	'J'		4988074	0					
ANR	4990042	Argument	pte -> memory		4988074	1					
ANR	4990043	PtrMemberAccess	pte -> memory		4988074	0					
ANR	4990044	Identifier	pte		4988074	0					
ANR	4990045	Identifier	memory		4988074	1					
ANR	4990046	Argument	"""[J]depth=%d font=0x%lx index=%d changed=%d\\n"""		4988074	2					
ANR	4990047	PrimaryExpression	"""[J]depth=%d font=0x%lx index=%d changed=%d\\n"""		4988074	0					
ANR	4990048	Argument	fdepth		4988074	3					
ANR	4990049	Identifier	fdepth		4988074	0					
ANR	4990050	Argument	( ulong ) pte -> fstack . items [ fdepth ] . font		4988074	4					
ANR	4990051	CastExpression	( ulong ) pte -> fstack . items [ fdepth ] . font		4988074	0					
ANR	4990052	CastTarget	ulong		4988074	0					
ANR	4990053	MemberAccess	pte -> fstack . items [ fdepth ] . font		4988074	1					
ANR	4990054	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4990055	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4990056	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4990057	Identifier	pte		4988074	0					
ANR	4990058	Identifier	fstack		4988074	1					
ANR	4990059	Identifier	items		4988074	1					
ANR	4990060	Identifier	fdepth		4988074	1					
ANR	4990061	Identifier	font		4988074	1					
ANR	4990062	Argument	pte -> fstack . items [ fdepth ] . index		4988074	5					
ANR	4990063	MemberAccess	pte -> fstack . items [ fdepth ] . index		4988074	0					
ANR	4990064	ArrayIndexing	pte -> fstack . items [ fdepth ]		4988074	0					
ANR	4990065	MemberAccess	pte -> fstack . items		4988074	0					
ANR	4990066	PtrMemberAccess	pte -> fstack		4988074	0					
ANR	4990067	Identifier	pte		4988074	0					
ANR	4990068	Identifier	fstack		4988074	1					
ANR	4990069	Identifier	items		4988074	1					
ANR	4990070	Identifier	fdepth		4988074	1					
ANR	4990071	Identifier	index		4988074	1					
ANR	4990072	Argument	changed		4988074	6					
ANR	4990073	Identifier	changed		4988074	0					
ANR	4990074	ReturnStatement	return changed ;	468:4:17812:17826	4988074	47	True				
ANR	4990075	Identifier	changed		4988074	0					
ANR	4990076	ReturnType	int		4988074	1					
ANR	4990077	Identifier	gs_type0_next_char_glyph		4988074	2					
ANR	4990078	ParameterList	"gs_text_enum_t * pte , gs_char * pchr , gs_glyph * pglyph"		4988074	3					
ANR	4990079	Parameter	gs_text_enum_t * pte	101:25:3458:3476	4988074	0	True				
ANR	4990080	ParameterType	gs_text_enum_t *		4988074	0					
ANR	4990081	Identifier	pte		4988074	1					
ANR	4990082	Parameter	gs_char * pchr	101:46:3479:3491	4988074	1	True				
ANR	4990083	ParameterType	gs_char *		4988074	0					
ANR	4990084	Identifier	pchr		4988074	1					
ANR	4990085	Parameter	gs_glyph * pglyph	101:61:3494:3509	4988074	2	True				
ANR	4990086	ParameterType	gs_glyph *		4988074	0					
ANR	4990087	Identifier	pglyph		4988074	1					
ANR	4990088	CFGEntryNode	ENTRY		4988074		True				
ANR	4990089	CFGExitNode	EXIT		4988074		True				
ANR	4990090	Symbol	submindex		4988074						
ANR	4990091	Symbol	* ( p - 1 )		4988074						
ANR	4990092	Symbol	pchr		4988074						
ANR	4990093	Symbol	pte -> text . data . bytes		4988074						
ANR	4990094	Symbol	pdata -> SubsVector		4988074						
ANR	4990095	Symbol	( ( gs_font_cid0 * ) pfont ) -> cidata . glyph_data		4988074						
ANR	4990096	Symbol	& font_index		4988074						
ANR	4990097	Symbol	& glyph		4988074						
ANR	4990098	Symbol	* * fdepth		4988074						
ANR	4990099	Symbol	* pdata		4988074						
ANR	4990100	Symbol	GS_MIN_CID_GLYPH		4988074						
ANR	4990101	Symbol	cstr . data		4988074						
ANR	4990102	Symbol	idepth		4988074						
ANR	4990103	Symbol	pte -> fstack . items [ fdepth ] . font		4988074						
ANR	4990104	Symbol	* pte -> fstack . items [ fdepth ] . font		4988074						
ANR	4990105	Symbol	substr		4988074						
ANR	4990106	Symbol	gs_cmap_decode_next		4988074						
ANR	4990107	Symbol	pfb		4988074						
ANR	4990108	Symbol	str		4988074						
ANR	4990109	Symbol	& pfont0 -> data		4988074						
ANR	4990110	Symbol	pte -> fstack . items		4988074						
ANR	4990111	Symbol	* substr		4988074						
ANR	4990112	Symbol	gs_stack_modal_fonts		4988074						
ANR	4990113	Symbol	( ( gs_font_cid0 * ) pfont ) -> cidata		4988074						
ANR	4990114	Symbol	pdata -> subs_width		4988074						
ANR	4990115	Symbol	pte -> fstack . items [ fdepth ] . index		4988074						
ANR	4990116	Symbol	pglyph		4988074						
ANR	4990117	Symbol	( pdata = & pfont0 -> data ) -> FMapType		4988074						
ANR	4990118	Symbol	MAX_CMAP_CODE_SIZE		4988074						
ANR	4990119	Symbol	pdata		4988074						
ANR	4990120	Symbol	pfont -> memory		4988074						
ANR	4990121	Symbol	pte -> text		4988074						
ANR	4990122	Symbol	ft_CID_encrypted		4988074						
ANR	4990123	Symbol	root_esc_char		4988074						
ANR	4990124	Symbol	pte -> fstack . items [ 0 ] . font		4988074						
ANR	4990125	Symbol	pfb -> FontBBox		4988074						
ANR	4990126	Symbol	min		4988074						
ANR	4990127	Symbol	pfont -> FontType		4988074						
ANR	4990128	Symbol	* pfb		4988074						
ANR	4990129	Symbol	gs_error_invalidfont		4988074						
ANR	4990130	Symbol	orig_depth		4988074						
ANR	4990131	Symbol	* * * pte		4988074						
ANR	4990132	Symbol	& cstr		4988074						
ANR	4990133	Symbol	pte -> FontBBox_as_Metrics2		4988074						
ANR	4990134	Symbol	* ++ p		4988074						
ANR	4990135	Symbol	pte -> fstack . depth		4988074						
ANR	4990136	Symbol	ft_composite		4988074						
ANR	4990137	Symbol	n		4988074						
ANR	4990138	Symbol	schr		4988074						
ANR	4990139	Symbol	p		4988074						
ANR	4990140	Symbol	GS_NO_GLYPH		4988074						
ANR	4990141	Symbol	pfb -> FontBBox . q		4988074						
ANR	4990142	Symbol	width		4988074						
ANR	4990143	Symbol	pte -> text . data		4988074						
ANR	4990144	Symbol	mindex		4988074						
ANR	4990145	Symbol	( pfont = pte -> fstack . items [ fdepth ] . font ) -> FontType		4988074						
ANR	4990146	Symbol	pte -> memory		4988074						
ANR	4990147	Symbol	pte -> cmap_code		4988074						
ANR	4990148	Symbol	fmap_escape		4988074						
ANR	4990149	Symbol	* pte		4988074						
ANR	4990150	Symbol	fmt		4988074						
ANR	4990151	Symbol	tchr		4988074						
ANR	4990152	Symbol	& mindex		4988074						
ANR	4990153	Symbol	& chr		4988074						
ANR	4990154	Symbol	pte -> fstack		4988074						
ANR	4990155	Symbol	gs_debug_c		4988074						
ANR	4990156	Symbol	& fidx		4988074						
ANR	4990157	Symbol	w2		4988074						
ANR	4990158	Symbol	w3		4988074						
ANR	4990159	Symbol	w4		4988074						
ANR	4990160	Symbol	pte -> text . size		4988074						
ANR	4990161	Symbol	pfont0		4988074						
ANR	4990162	Symbol	fdepth		4988074						
ANR	4990163	Symbol	NULL		4988074						
ANR	4990164	Symbol	* fdepth		4988074						
ANR	4990165	Symbol	pte -> FontBBox_as_Metrics2 . x		4988074						
ANR	4990166	Symbol	pdata -> subs_size		4988074						
ANR	4990167	Symbol	subs_count		4988074						
ANR	4990168	Symbol	chr		4988074						
ANR	4990169	Symbol	& submindex		4988074						
ANR	4990170	Symbol	pte -> FontBBox_as_Metrics2 . y		4988074						
ANR	4990171	Symbol	* * pte		4988074						
ANR	4990172	Symbol	ft_CID_TrueType		4988074						
ANR	4990173	Symbol	fidx		4988074						
ANR	4990174	Symbol	* * pte -> fstack		4988074						
ANR	4990175	Symbol	subs_elt		4988074						
ANR	4990176	Symbol	* psv		4988074						
ANR	4990177	Symbol	* * pte -> fstack . items		4988074						
ANR	4990178	Symbol	changed		4988074						
ANR	4990179	Symbol	cstr		4988074						
ANR	4990180	Symbol	pte -> fstack . items [ fdepth - 1 ] . font		4988074						
ANR	4990181	Symbol	pte -> fstack . items [ fdepth ] . font -> FontType		4988074						
ANR	4990182	Symbol	code		4988074						
ANR	4990183	Symbol	pdata -> CMap		4988074						
ANR	4990184	Symbol	* pte -> fstack . items		4988074						
ANR	4990185	Symbol	pdata -> SubsVector . data		4988074						
ANR	4990186	Symbol	* pglyph		4988074						
ANR	4990187	Symbol	pdata -> ShiftOut		4988074						
ANR	4990188	Symbol	pte -> index		4988074						
ANR	4990189	Symbol	* pchr		4988074						
ANR	4990190	Symbol	psv		4988074						
ANR	4990191	Symbol	cstr . size		4988074						
ANR	4990192	Symbol	end		4988074						
ANR	4990193	Symbol	* pte -> fstack		4988074						
ANR	4990194	Symbol	pte		4988074						
ANR	4990195	Symbol	pdata -> FMapType		4988074						
ANR	4990196	Symbol	pfont		4988074						
ANR	4990197	Symbol	* p ++		4988074						
ANR	4990198	Symbol	glyph		4988074						
ANR	4990199	Symbol	* pfont		4988074						
ANR	4990200	Symbol	pdata -> ShiftIn		4988074						
ANR	4990201	Symbol	font_index		4988074						
ANR	4990202	Symbol	* p		4988074						
