command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3183694	File	data/converged/CVE-2018-16863_ghostpdl/expat_xmlwf_ct.c								
ANR	3183695	Function	getTok	35:0:1608:2815							
ANR	3183696	FunctionDef	getTok (const char * * pp)		3183695	0					
ANR	3183697	CompoundStatement		37:0:1652:2815	3183695	0					
ANR	3183698	ClassDefStatement	"enum { inAtom , inString , init , inComment }"	38:2:1656:1697	3183695	0	True				
ANR	3183699	ExpressionStatement		38:44:1698:1698	3183695	1	True				
ANR	3183700	IdentifierDeclStatement	int state = init ;	39:2:1702:1718	3183695	2	True				
ANR	3183701	IdentifierDecl	state = init		3183695	0					
ANR	3183702	IdentifierDeclType	int		3183695	0					
ANR	3183703	Identifier	state		3183695	1					
ANR	3183704	AssignmentExpression	state = init		3183695	2		=			
ANR	3183705	Identifier	init		3183695	0					
ANR	3183706	Identifier	init		3183695	1					
ANR	3183707	IdentifierDeclStatement	const char * tokStart = 0 ;	40:2:1722:1746	3183695	3	True				
ANR	3183708	IdentifierDecl	* tokStart = 0		3183695	0					
ANR	3183709	IdentifierDeclType	const char *		3183695	0					
ANR	3183710	Identifier	tokStart		3183695	1					
ANR	3183711	AssignmentExpression	* tokStart = 0		3183695	2		=			
ANR	3183712	Identifier	tokStart		3183695	0					
ANR	3183713	PrimaryExpression	0		3183695	1					
ANR	3183714	ForStatement	for ( ; ; )		3183695	4					
ANR	3183715	CompoundStatement		5:11:106:106	3183695	0					
ANR	3183716	SwitchStatement	switch ( * * pp )		3183695	0					
ANR	3183717	Condition	* * pp	42:12:1773:1776	3183695	0	True				
ANR	3183718	UnaryOperationExpression	* * pp		3183695	0					
ANR	3183719	UnaryOperator	*		3183695	0					
ANR	3183720	UnaryOperationExpression	* pp		3183695	1					
ANR	3183721	UnaryOperator	*		3183695	0					
ANR	3183722	Identifier	pp		3183695	1					
ANR	3183723	CompoundStatement		6:18:126:126	3183695	1					
ANR	3183724	Label	case '\\0' :	43:4:1785:1794	3183695	0	True				
ANR	3183725	ReturnStatement	return 0 ;	44:6:1802:1810	3183695	1	True				
ANR	3183726	PrimaryExpression	0		3183695	0					
ANR	3183727	Label	case ' ' :	45:4:1816:1824	3183695	2	True				
ANR	3183728	Label	case '\\r' :	46:4:1830:1839	3183695	3	True				
ANR	3183729	Label	case '\\t' :	47:4:1845:1854	3183695	4	True				
ANR	3183730	Label	case '\\n' :	48:4:1860:1869	3183695	5	True				
ANR	3183731	IfStatement	if ( state == inAtom )		3183695	6					
ANR	3183732	Condition	state == inAtom	49:10:1881:1895	3183695	0	True				
ANR	3183733	EqualityExpression	state == inAtom		3183695	0		==			
ANR	3183734	Identifier	state		3183695	0					
ANR	3183735	Identifier	inAtom		3183695	1					
ANR	3183736	ReturnStatement	return tokStart ;	50:8:1906:1921	3183695	1	True				
ANR	3183737	Identifier	tokStart		3183695	0					
ANR	3183738	BreakStatement	break ;	51:6:1929:1934	3183695	7	True				
ANR	3183739	Label	case '(' :	52:4:1940:1948	3183695	8	True				
ANR	3183740	IfStatement	if ( state == inAtom )		3183695	9					
ANR	3183741	Condition	state == inAtom	53:10:1960:1974	3183695	0	True				
ANR	3183742	EqualityExpression	state == inAtom		3183695	0		==			
ANR	3183743	Identifier	state		3183695	0					
ANR	3183744	Identifier	inAtom		3183695	1					
ANR	3183745	ReturnStatement	return tokStart ;	54:8:1985:2000	3183695	1	True				
ANR	3183746	Identifier	tokStart		3183695	0					
ANR	3183747	IfStatement	if ( state != inString )		3183695	10					
ANR	3183748	Condition	state != inString	55:10:2012:2028	3183695	0	True				
ANR	3183749	EqualityExpression	state != inString		3183695	0		!=			
ANR	3183750	Identifier	state		3183695	0					
ANR	3183751	Identifier	inString		3183695	1					
ANR	3183752	ExpressionStatement	state ++	56:8:2039:2046	3183695	1	True				
ANR	3183753	PostIncDecOperationExpression	state ++		3183695	0					
ANR	3183754	Identifier	state		3183695	0					
ANR	3183755	IncDec	++		3183695	1					
ANR	3183756	BreakStatement	break ;	57:6:2054:2059	3183695	11	True				
ANR	3183757	Label	case ')' :	58:4:2065:2073	3183695	12	True				
ANR	3183758	IfStatement	if ( state > init )		3183695	13					
ANR	3183759	Condition	state > init	59:10:2085:2096	3183695	0	True				
ANR	3183760	RelationalExpression	state > init		3183695	0		>			
ANR	3183761	Identifier	state		3183695	0					
ANR	3183762	Identifier	init		3183695	1					
ANR	3183763	ExpressionStatement	-- state	60:8:2107:2114	3183695	1	True				
ANR	3183764	UnaryExpression	-- state		3183695	0					
ANR	3183765	IncDec	--		3183695	0					
ANR	3183766	Identifier	state		3183695	1					
ANR	3183767	ElseStatement	else		3183695	0					
ANR	3183768	IfStatement	if ( state != inString )		3183695	0					
ANR	3183769	Condition	state != inString	61:15:2131:2147	3183695	0	True				
ANR	3183770	EqualityExpression	state != inString		3183695	0		!=			
ANR	3183771	Identifier	state		3183695	0					
ANR	3183772	Identifier	inString		3183695	1					
ANR	3183773	ReturnStatement	return 0 ;	62:8:2158:2166	3183695	1	True				
ANR	3183774	PrimaryExpression	0		3183695	0					
ANR	3183775	BreakStatement	break ;	63:6:2174:2179	3183695	14	True				
ANR	3183776	Label	case ';' :	64:4:2185:2193	3183695	15	True				
ANR	3183777	Label	case '/' :	65:4:2199:2207	3183695	16	True				
ANR	3183778	Label	case '=' :	66:4:2213:2221	3183695	17	True				
ANR	3183779	IfStatement	if ( state == inAtom )		3183695	18					
ANR	3183780	Condition	state == inAtom	67:10:2233:2247	3183695	0	True				
ANR	3183781	EqualityExpression	state == inAtom		3183695	0		==			
ANR	3183782	Identifier	state		3183695	0					
ANR	3183783	Identifier	inAtom		3183695	1					
ANR	3183784	ReturnStatement	return tokStart ;	68:8:2258:2273	3183695	1	True				
ANR	3183785	Identifier	tokStart		3183695	0					
ANR	3183786	IfStatement	if ( state == init )		3183695	19					
ANR	3183787	Condition	state == init	69:10:2285:2297	3183695	0	True				
ANR	3183788	EqualityExpression	state == init		3183695	0		==			
ANR	3183789	Identifier	state		3183695	0					
ANR	3183790	Identifier	init		3183695	1					
ANR	3183791	ReturnStatement	return ( * pp ) ++ ;	70:8:2308:2322	3183695	1	True				
ANR	3183792	PostIncDecOperationExpression	( * pp ) ++		3183695	0					
ANR	3183793	UnaryOperationExpression	* pp		3183695	0					
ANR	3183794	UnaryOperator	*		3183695	0					
ANR	3183795	Identifier	pp		3183695	1					
ANR	3183796	IncDec	++		3183695	1					
ANR	3183797	BreakStatement	break ;	71:6:2330:2335	3183695	20	True				
ANR	3183798	Label	case '\\\\' :	72:4:2341:2350	3183695	21	True				
ANR	3183799	ExpressionStatement	++ * pp	73:6:2358:2363	3183695	22	True				
ANR	3183800	UnaryExpression	++ * pp		3183695	0					
ANR	3183801	IncDec	++		3183695	0					
ANR	3183802	UnaryOperationExpression	* pp		3183695	1					
ANR	3183803	UnaryOperator	*		3183695	0					
ANR	3183804	Identifier	pp		3183695	1					
ANR	3183805	IfStatement	if ( * * pp == '\\0' )		3183695	23					
ANR	3183806	Condition	* * pp == '\\0'	74:10:2375:2386	3183695	0	True				
ANR	3183807	EqualityExpression	* * pp == '\\0'		3183695	0		==			
ANR	3183808	UnaryOperationExpression	* * pp		3183695	0					
ANR	3183809	UnaryOperator	*		3183695	0					
ANR	3183810	UnaryOperationExpression	* pp		3183695	1					
ANR	3183811	UnaryOperator	*		3183695	0					
ANR	3183812	Identifier	pp		3183695	1					
ANR	3183813	PrimaryExpression	'\\0'		3183695	1					
ANR	3183814	ReturnStatement	return 0 ;	75:8:2397:2405	3183695	1	True				
ANR	3183815	PrimaryExpression	0		3183695	0					
ANR	3183816	BreakStatement	break ;	76:6:2413:2418	3183695	24	True				
ANR	3183817	Label	"case '""' :"	77:4:2424:2432	3183695	25	True				
ANR	3183818	SwitchStatement	switch ( state )		3183695	26					
ANR	3183819	Condition	state	78:14:2448:2452	3183695	0	True				
ANR	3183820	Identifier	state		3183695	0					
ANR	3183821	CompoundStatement		42:21:802:802	3183695	1					
ANR	3183822	Label	case inString :	79:6:2463:2476	3183695	0	True				
ANR	3183823	Identifier	inString		3183695	0					
ANR	3183824	ExpressionStatement	++ * pp	80:8:2486:2491	3183695	1	True				
ANR	3183825	UnaryExpression	++ * pp		3183695	0					
ANR	3183826	IncDec	++		3183695	0					
ANR	3183827	UnaryOperationExpression	* pp		3183695	1					
ANR	3183828	UnaryOperator	*		3183695	0					
ANR	3183829	Identifier	pp		3183695	1					
ANR	3183830	ReturnStatement	return tokStart ;	81:8:2501:2516	3183695	2	True				
ANR	3183831	Identifier	tokStart		3183695	0					
ANR	3183832	Label	case inAtom :	82:6:2524:2535	3183695	3	True				
ANR	3183833	Identifier	inAtom		3183695	0					
ANR	3183834	ReturnStatement	return tokStart ;	83:8:2545:2560	3183695	4	True				
ANR	3183835	Identifier	tokStart		3183695	0					
ANR	3183836	Label	case init :	84:6:2568:2577	3183695	5	True				
ANR	3183837	Identifier	init		3183695	0					
ANR	3183838	ExpressionStatement	tokStart = * pp	85:8:2587:2601	3183695	6	True				
ANR	3183839	AssignmentExpression	tokStart = * pp		3183695	0		=			
ANR	3183840	Identifier	tokStart		3183695	0					
ANR	3183841	UnaryOperationExpression	* pp		3183695	1					
ANR	3183842	UnaryOperator	*		3183695	0					
ANR	3183843	Identifier	pp		3183695	1					
ANR	3183844	ExpressionStatement	state = inString	86:8:2611:2627	3183695	7	True				
ANR	3183845	AssignmentExpression	state = inString		3183695	0		=			
ANR	3183846	Identifier	state		3183695	0					
ANR	3183847	Identifier	inString		3183695	1					
ANR	3183848	BreakStatement	break ;	87:8:2637:2642	3183695	8	True				
ANR	3183849	BreakStatement	break ;	89:6:2658:2663	3183695	27	True				
ANR	3183850	Label	default :	90:4:2669:2676	3183695	28	True				
ANR	3183851	Identifier	default		3183695	0					
ANR	3183852	IfStatement	if ( state == init )		3183695	29					
ANR	3183853	Condition	state == init	91:10:2688:2700	3183695	0	True				
ANR	3183854	EqualityExpression	state == init		3183695	0		==			
ANR	3183855	Identifier	state		3183695	0					
ANR	3183856	Identifier	init		3183695	1					
ANR	3183857	CompoundStatement		55:25:1050:1050	3183695	1					
ANR	3183858	ExpressionStatement	tokStart = * pp	92:8:2713:2727	3183695	0	True				
ANR	3183859	AssignmentExpression	tokStart = * pp		3183695	0		=			
ANR	3183860	Identifier	tokStart		3183695	0					
ANR	3183861	UnaryOperationExpression	* pp		3183695	1					
ANR	3183862	UnaryOperator	*		3183695	0					
ANR	3183863	Identifier	pp		3183695	1					
ANR	3183864	ExpressionStatement	state = inAtom	93:8:2737:2751	3183695	1	True				
ANR	3183865	AssignmentExpression	state = inAtom		3183695	0		=			
ANR	3183866	Identifier	state		3183695	0					
ANR	3183867	Identifier	inAtom		3183695	1					
ANR	3183868	BreakStatement	break ;	95:6:2767:2772	3183695	30	True				
ANR	3183869	ExpressionStatement	++ * pp	97:4:2784:2789	3183695	1	True				
ANR	3183870	UnaryExpression	++ * pp		3183695	0					
ANR	3183871	IncDec	++		3183695	0					
ANR	3183872	UnaryOperationExpression	* pp		3183695	1					
ANR	3183873	UnaryOperator	*		3183695	0					
ANR	3183874	Identifier	pp		3183695	1					
ANR	3183875	ReturnType	static const char *		3183695	1					
ANR	3183876	Identifier	getTok		3183695	2					
ANR	3183877	ParameterList	const char * * pp		3183695	3					
ANR	3183878	Parameter	const char * * pp	36:7:1635:1649	3183695	0	True				
ANR	3183879	ParameterType	const char * *		3183695	0					
ANR	3183880	Identifier	pp		3183695	1					
ANR	3183881	CFGEntryNode	ENTRY		3183695		True				
ANR	3183882	CFGExitNode	EXIT		3183695		True				
ANR	3183883	InfiniteForNode	true		3183695		True				
ANR	3183884	Symbol	pp		3183695						
ANR	3183885	Symbol	init		3183695						
ANR	3183886	Symbol	* pp		3183695						
ANR	3183887	Symbol	inString		3183695						
ANR	3183888	Symbol	tokStart		3183695						
ANR	3183889	Symbol	state		3183695						
ANR	3183890	Symbol	inAtom		3183695						
ANR	3183891	Symbol	* * pp		3183695						
ANR	3183892	Function	matchkey	104:0:2853:3090							
ANR	3183893	FunctionDef	"matchkey (const char * start , const char * end , const char * key)"		3183892	0					
ANR	3183894	CompoundStatement		106:0:2926:3090	3183892	0					
ANR	3183895	IfStatement	if ( ! start )		3183892	0					
ANR	3183896	Condition	! start	107:6:2934:2939	3183892	0	True				
ANR	3183897	UnaryOperationExpression	! start		3183892	0					
ANR	3183898	UnaryOperator	!		3183892	0					
ANR	3183899	Identifier	start		3183892	1					
ANR	3183900	ReturnStatement	return 0 ;	108:4:2946:2954	3183892	1	True				
ANR	3183901	PrimaryExpression	0		3183892	0					
ANR	3183902	ForStatement	"for ( ; start != end ; start ++ , key ++ )"		3183892	1					
ANR	3183903	Condition	start != end	109:9:2965:2976	3183892	0	True				
ANR	3183904	EqualityExpression	start != end		3183892	0		!=			
ANR	3183905	Identifier	start		3183892	0					
ANR	3183906	Identifier	end		3183892	1					
ANR	3183907	Expression	"start ++ , key ++"	109:23:2979:2992	3183892	1	True				
ANR	3183908	PostIncDecOperationExpression	start ++		3183892	0					
ANR	3183909	Identifier	start		3183892	0					
ANR	3183910	IncDec	++		3183892	1					
ANR	3183911	PostIncDecOperationExpression	key ++		3183892	1					
ANR	3183912	Identifier	key		3183892	0					
ANR	3183913	IncDec	++		3183892	1					
ANR	3183914	IfStatement	if ( * start != * key && * start != 'A' + ( * key - 'a' ) )		3183892	2					
ANR	3183915	Condition	* start != * key && * start != 'A' + ( * key - 'a' )	110:8:3003:3048	3183892	0	True				
ANR	3183916	AndExpression	* start != * key && * start != 'A' + ( * key - 'a' )		3183892	0		&&			
ANR	3183917	EqualityExpression	* start != * key		3183892	0		!=			
ANR	3183918	UnaryOperationExpression	* start		3183892	0					
ANR	3183919	UnaryOperator	*		3183892	0					
ANR	3183920	Identifier	start		3183892	1					
ANR	3183921	UnaryOperationExpression	* key		3183892	1					
ANR	3183922	UnaryOperator	*		3183892	0					
ANR	3183923	Identifier	key		3183892	1					
ANR	3183924	EqualityExpression	* start != 'A' + ( * key - 'a' )		3183892	1		!=			
ANR	3183925	UnaryOperationExpression	* start		3183892	0					
ANR	3183926	UnaryOperator	*		3183892	0					
ANR	3183927	Identifier	start		3183892	1					
ANR	3183928	AdditiveExpression	'A' + ( * key - 'a' )		3183892	1		+			
ANR	3183929	PrimaryExpression	'A'		3183892	0					
ANR	3183930	AdditiveExpression	* key - 'a'		3183892	1		-			
ANR	3183931	UnaryOperationExpression	* key		3183892	0					
ANR	3183932	UnaryOperator	*		3183892	0					
ANR	3183933	Identifier	key		3183892	1					
ANR	3183934	PrimaryExpression	'a'		3183892	1					
ANR	3183935	ReturnStatement	return 0 ;	111:6:3057:3065	3183892	1	True				
ANR	3183936	PrimaryExpression	0		3183892	0					
ANR	3183937	ReturnStatement	return * key == '\\0' ;	112:2:3069:3088	3183892	2	True				
ANR	3183938	EqualityExpression	* key == '\\0'		3183892	0		==			
ANR	3183939	UnaryOperationExpression	* key		3183892	0					
ANR	3183940	UnaryOperator	*		3183892	0					
ANR	3183941	Identifier	key		3183892	1					
ANR	3183942	PrimaryExpression	'\\0'		3183892	1					
ANR	3183943	ReturnType	static int		3183892	1					
ANR	3183944	Identifier	matchkey		3183892	2					
ANR	3183945	ParameterList	"const char * start , const char * end , const char * key"		3183892	3					
ANR	3183946	Parameter	const char * start	105:9:2873:2889	3183892	0	True				
ANR	3183947	ParameterType	const char *		3183892	0					
ANR	3183948	Identifier	start		3183892	1					
ANR	3183949	Parameter	const char * end	105:28:2892:2906	3183892	1	True				
ANR	3183950	ParameterType	const char *		3183892	0					
ANR	3183951	Identifier	end		3183892	1					
ANR	3183952	Parameter	const char * key	105:45:2909:2923	3183892	2	True				
ANR	3183953	ParameterType	const char *		3183892	0					
ANR	3183954	Identifier	key		3183892	1					
ANR	3183955	CFGEntryNode	ENTRY		3183892		True				
ANR	3183956	CFGExitNode	EXIT		3183892		True				
ANR	3183957	Symbol	* start		3183892						
ANR	3183958	Symbol	start		3183892						
ANR	3183959	Symbol	* key		3183892						
ANR	3183960	Symbol	end		3183892						
ANR	3183961	Symbol	key		3183892						
ANR	3183962	Function	getXMLCharset	115:0:3093:4352							
ANR	3183963	FunctionDef	"getXMLCharset (const char * buf , char * charset)"		3183962	0					
ANR	3183964	CompoundStatement		117:0:3144:4352	3183962	0					
ANR	3183965	IdentifierDeclStatement	"const char * next , * p ;"	118:2:3148:3168	3183962	0	True				
ANR	3183966	IdentifierDecl	* next		3183962	0					
ANR	3183967	IdentifierDeclType	const char *		3183962	0					
ANR	3183968	Identifier	next		3183962	1					
ANR	3183969	IdentifierDecl	* p		3183962	1					
ANR	3183970	IdentifierDeclType	const char *		3183962	0					
ANR	3183971	Identifier	p		3183962	1					
ANR	3183972	ExpressionStatement	charset [ 0 ] = '\\0'	120:2:3173:3190	3183962	1	True				
ANR	3183973	AssignmentExpression	charset [ 0 ] = '\\0'		3183962	0		=			
ANR	3183974	ArrayIndexing	charset [ 0 ]		3183962	0					
ANR	3183975	Identifier	charset		3183962	0					
ANR	3183976	PrimaryExpression	0		3183962	1					
ANR	3183977	PrimaryExpression	'\\0'		3183962	1					
ANR	3183978	ExpressionStatement	next = buf	121:2:3194:3204	3183962	2	True				
ANR	3183979	AssignmentExpression	next = buf		3183962	0		=			
ANR	3183980	Identifier	next		3183962	0					
ANR	3183981	Identifier	buf		3183962	1					
ANR	3183982	ExpressionStatement	p = getTok ( & next )	122:2:3208:3225	3183962	3	True				
ANR	3183983	AssignmentExpression	p = getTok ( & next )		3183962	0		=			
ANR	3183984	Identifier	p		3183962	0					
ANR	3183985	CallExpression	getTok ( & next )		3183962	1					
ANR	3183986	Callee	getTok		3183962	0					
ANR	3183987	Identifier	getTok		3183962	0					
ANR	3183988	ArgumentList	& next		3183962	1					
ANR	3183989	Argument	& next		3183962	0					
ANR	3183990	UnaryOperationExpression	& next		3183962	0					
ANR	3183991	UnaryOperator	&		3183962	0					
ANR	3183992	Identifier	next		3183962	1					
ANR	3183993	IfStatement	"if ( matchkey ( p , next , ""text"" ) )"		3183962	4					
ANR	3183994	Condition	"matchkey ( p , next , ""text"" )"	123:6:3233:3257	3183962	0	True				
ANR	3183995	CallExpression	"matchkey ( p , next , ""text"" )"		3183962	0					
ANR	3183996	Callee	matchkey		3183962	0					
ANR	3183997	Identifier	matchkey		3183962	0					
ANR	3183998	ArgumentList	p		3183962	1					
ANR	3183999	Argument	p		3183962	0					
ANR	3184000	Identifier	p		3183962	0					
ANR	3184001	Argument	next		3183962	1					
ANR	3184002	Identifier	next		3183962	0					
ANR	3184003	Argument	"""text"""		3183962	2					
ANR	3184004	PrimaryExpression	"""text"""		3183962	0					
ANR	3184005	ExpressionStatement	"strcpy ( charset , ""us-ascii"" )"	124:4:3264:3291	3183962	1	True				
ANR	3184006	CallExpression	"strcpy ( charset , ""us-ascii"" )"		3183962	0					
ANR	3184007	Callee	strcpy		3183962	0					
ANR	3184008	Identifier	strcpy		3183962	0					
ANR	3184009	ArgumentList	charset		3183962	1					
ANR	3184010	Argument	charset		3183962	0					
ANR	3184011	Identifier	charset		3183962	0					
ANR	3184012	Argument	"""us-ascii"""		3183962	1					
ANR	3184013	PrimaryExpression	"""us-ascii"""		3183962	0					
ANR	3184014	ElseStatement	else		3183962	0					
ANR	3184015	IfStatement	"if ( ! matchkey ( p , next , ""application"" ) )"		3183962	0					
ANR	3184016	Condition	"! matchkey ( p , next , ""application"" )"	125:11:3304:3336	3183962	0	True				
ANR	3184017	UnaryOperationExpression	"! matchkey ( p , next , ""application"" )"		3183962	0					
ANR	3184018	UnaryOperator	!		3183962	0					
ANR	3184019	CallExpression	"matchkey ( p , next , ""application"" )"		3183962	1					
ANR	3184020	Callee	matchkey		3183962	0					
ANR	3184021	Identifier	matchkey		3183962	0					
ANR	3184022	ArgumentList	p		3183962	1					
ANR	3184023	Argument	p		3183962	0					
ANR	3184024	Identifier	p		3183962	0					
ANR	3184025	Argument	next		3183962	1					
ANR	3184026	Identifier	next		3183962	0					
ANR	3184027	Argument	"""application"""		3183962	2					
ANR	3184028	PrimaryExpression	"""application"""		3183962	0					
ANR	3184029	ReturnStatement	return ;	126:4:3343:3349	3183962	1	True				
ANR	3184030	ExpressionStatement	p = getTok ( & next )	127:2:3353:3370	3183962	5	True				
ANR	3184031	AssignmentExpression	p = getTok ( & next )		3183962	0		=			
ANR	3184032	Identifier	p		3183962	0					
ANR	3184033	CallExpression	getTok ( & next )		3183962	1					
ANR	3184034	Callee	getTok		3183962	0					
ANR	3184035	Identifier	getTok		3183962	0					
ANR	3184036	ArgumentList	& next		3183962	1					
ANR	3184037	Argument	& next		3183962	0					
ANR	3184038	UnaryOperationExpression	& next		3183962	0					
ANR	3184039	UnaryOperator	&		3183962	0					
ANR	3184040	Identifier	next		3183962	1					
ANR	3184041	IfStatement	if ( ! p || * p != '/' )		3183962	6					
ANR	3184042	Condition	! p || * p != '/'	128:6:3378:3392	3183962	0	True				
ANR	3184043	OrExpression	! p || * p != '/'		3183962	0		||			
ANR	3184044	UnaryOperationExpression	! p		3183962	0					
ANR	3184045	UnaryOperator	!		3183962	0					
ANR	3184046	Identifier	p		3183962	1					
ANR	3184047	EqualityExpression	* p != '/'		3183962	1		!=			
ANR	3184048	UnaryOperationExpression	* p		3183962	0					
ANR	3184049	UnaryOperator	*		3183962	0					
ANR	3184050	Identifier	p		3183962	1					
ANR	3184051	PrimaryExpression	'/'		3183962	1					
ANR	3184052	ReturnStatement	return ;	129:4:3399:3405	3183962	1	True				
ANR	3184053	ExpressionStatement	p = getTok ( & next )	130:2:3409:3426	3183962	7	True				
ANR	3184054	AssignmentExpression	p = getTok ( & next )		3183962	0		=			
ANR	3184055	Identifier	p		3183962	0					
ANR	3184056	CallExpression	getTok ( & next )		3183962	1					
ANR	3184057	Callee	getTok		3183962	0					
ANR	3184058	Identifier	getTok		3183962	0					
ANR	3184059	ArgumentList	& next		3183962	1					
ANR	3184060	Argument	& next		3183962	0					
ANR	3184061	UnaryOperationExpression	& next		3183962	0					
ANR	3184062	UnaryOperator	&		3183962	0					
ANR	3184063	Identifier	next		3183962	1					
ANR	3184064	IfStatement	"if ( matchkey ( p , next , ""xml"" ) )"		3183962	8					
ANR	3184065	Condition	"matchkey ( p , next , ""xml"" )"	131:6:3434:3457	3183962	0	True				
ANR	3184066	CallExpression	"matchkey ( p , next , ""xml"" )"		3183962	0					
ANR	3184067	Callee	matchkey		3183962	0					
ANR	3184068	Identifier	matchkey		3183962	0					
ANR	3184069	ArgumentList	p		3183962	1					
ANR	3184070	Argument	p		3183962	0					
ANR	3184071	Identifier	p		3183962	0					
ANR	3184072	Argument	next		3183962	1					
ANR	3184073	Identifier	next		3183962	0					
ANR	3184074	Argument	"""xml"""		3183962	2					
ANR	3184075	PrimaryExpression	"""xml"""		3183962	0					
ANR	3184076	ExpressionStatement	isXml = 1	132:4:3464:3473	3183962	1	True				
ANR	3184077	AssignmentExpression	isXml = 1		3183962	0		=			
ANR	3184078	Identifier	isXml		3183962	0					
ANR	3184079	PrimaryExpression	1		3183962	1					
ANR	3184080	ExpressionStatement	p = getTok ( & next )	133:2:3477:3494	3183962	9	True				
ANR	3184081	AssignmentExpression	p = getTok ( & next )		3183962	0		=			
ANR	3184082	Identifier	p		3183962	0					
ANR	3184083	CallExpression	getTok ( & next )		3183962	1					
ANR	3184084	Callee	getTok		3183962	0					
ANR	3184085	Identifier	getTok		3183962	0					
ANR	3184086	ArgumentList	& next		3183962	1					
ANR	3184087	Argument	& next		3183962	0					
ANR	3184088	UnaryOperationExpression	& next		3183962	0					
ANR	3184089	UnaryOperator	&		3183962	0					
ANR	3184090	Identifier	next		3183962	1					
ANR	3184091	WhileStatement	while ( p )		3183962	10					
ANR	3184092	Condition	p	134:9:3505:3505	3183962	0	True				
ANR	3184093	Identifier	p		3183962	0					
ANR	3184094	CompoundStatement		18:12:363:363	3183962	1					
ANR	3184095	IfStatement	if ( * p == ';' )		3183962	0					
ANR	3184096	Condition	* p == ';'	135:8:3518:3526	3183962	0	True				
ANR	3184097	EqualityExpression	* p == ';'		3183962	0		==			
ANR	3184098	UnaryOperationExpression	* p		3183962	0					
ANR	3184099	UnaryOperator	*		3183962	0					
ANR	3184100	Identifier	p		3183962	1					
ANR	3184101	PrimaryExpression	';'		3183962	1					
ANR	3184102	CompoundStatement		19:19:384:384	3183962	1					
ANR	3184103	ExpressionStatement	p = getTok ( & next )	136:6:3537:3554	3183962	0	True				
ANR	3184104	AssignmentExpression	p = getTok ( & next )		3183962	0		=			
ANR	3184105	Identifier	p		3183962	0					
ANR	3184106	CallExpression	getTok ( & next )		3183962	1					
ANR	3184107	Callee	getTok		3183962	0					
ANR	3184108	Identifier	getTok		3183962	0					
ANR	3184109	ArgumentList	& next		3183962	1					
ANR	3184110	Argument	& next		3183962	0					
ANR	3184111	UnaryOperationExpression	& next		3183962	0					
ANR	3184112	UnaryOperator	&		3183962	0					
ANR	3184113	Identifier	next		3183962	1					
ANR	3184114	IfStatement	"if ( matchkey ( p , next , ""charset"" ) )"		3183962	1					
ANR	3184115	Condition	"matchkey ( p , next , ""charset"" )"	137:10:3566:3593	3183962	0	True				
ANR	3184116	CallExpression	"matchkey ( p , next , ""charset"" )"		3183962	0					
ANR	3184117	Callee	matchkey		3183962	0					
ANR	3184118	Identifier	matchkey		3183962	0					
ANR	3184119	ArgumentList	p		3183962	1					
ANR	3184120	Argument	p		3183962	0					
ANR	3184121	Identifier	p		3183962	0					
ANR	3184122	Argument	next		3183962	1					
ANR	3184123	Identifier	next		3183962	0					
ANR	3184124	Argument	"""charset"""		3183962	2					
ANR	3184125	PrimaryExpression	"""charset"""		3183962	0					
ANR	3184126	CompoundStatement		21:40:451:451	3183962	1					
ANR	3184127	ExpressionStatement	p = getTok ( & next )	138:8:3606:3623	3183962	0	True				
ANR	3184128	AssignmentExpression	p = getTok ( & next )		3183962	0		=			
ANR	3184129	Identifier	p		3183962	0					
ANR	3184130	CallExpression	getTok ( & next )		3183962	1					
ANR	3184131	Callee	getTok		3183962	0					
ANR	3184132	Identifier	getTok		3183962	0					
ANR	3184133	ArgumentList	& next		3183962	1					
ANR	3184134	Argument	& next		3183962	0					
ANR	3184135	UnaryOperationExpression	& next		3183962	0					
ANR	3184136	UnaryOperator	&		3183962	0					
ANR	3184137	Identifier	next		3183962	1					
ANR	3184138	IfStatement	if ( p && * p == '=' )		3183962	1					
ANR	3184139	Condition	p && * p == '='	139:12:3637:3650	3183962	0	True				
ANR	3184140	AndExpression	p && * p == '='		3183962	0		&&			
ANR	3184141	Identifier	p		3183962	0					
ANR	3184142	EqualityExpression	* p == '='		3183962	1		==			
ANR	3184143	UnaryOperationExpression	* p		3183962	0					
ANR	3184144	UnaryOperator	*		3183962	0					
ANR	3184145	Identifier	p		3183962	1					
ANR	3184146	PrimaryExpression	'='		3183962	1					
ANR	3184147	CompoundStatement		23:28:508:508	3183962	1					
ANR	3184148	ExpressionStatement	p = getTok ( & next )	140:10:3665:3682	3183962	0	True				
ANR	3184149	AssignmentExpression	p = getTok ( & next )		3183962	0		=			
ANR	3184150	Identifier	p		3183962	0					
ANR	3184151	CallExpression	getTok ( & next )		3183962	1					
ANR	3184152	Callee	getTok		3183962	0					
ANR	3184153	Identifier	getTok		3183962	0					
ANR	3184154	ArgumentList	& next		3183962	1					
ANR	3184155	Argument	& next		3183962	0					
ANR	3184156	UnaryOperationExpression	& next		3183962	0					
ANR	3184157	UnaryOperator	&		3183962	0					
ANR	3184158	Identifier	next		3183962	1					
ANR	3184159	IfStatement	if ( p )		3183962	1					
ANR	3184160	Condition	p	141:14:3698:3698	3183962	0	True				
ANR	3184161	Identifier	p		3183962	0					
ANR	3184162	CompoundStatement		26:12:570:587	3183962	1					
ANR	3184163	IdentifierDeclStatement	char * s = charset ;	142:12:3715:3732	3183962	0	True				
ANR	3184164	IdentifierDecl	* s = charset		3183962	0					
ANR	3184165	IdentifierDeclType	char *		3183962	0					
ANR	3184166	Identifier	s		3183962	1					
ANR	3184167	AssignmentExpression	* s = charset		3183962	2		=			
ANR	3184168	Identifier	charset		3183962	0					
ANR	3184169	Identifier	charset		3183962	1					
ANR	3184170	IfStatement	"if ( * p == '""' )"		3183962	1					
ANR	3184171	Condition	"* p == '""'"	143:16:3750:3758	3183962	0	True				
ANR	3184172	EqualityExpression	"* p == '""'"		3183962	0		==			
ANR	3184173	UnaryOperationExpression	* p		3183962	0					
ANR	3184174	UnaryOperator	*		3183962	0					
ANR	3184175	Identifier	p		3183962	1					
ANR	3184176	PrimaryExpression	"'""'"		3183962	1					
ANR	3184177	CompoundStatement		27:27:616:616	3183962	1					
ANR	3184178	WhileStatement	while ( ++ p != next - 1 )		3183962	0					
ANR	3184179	Condition	++ p != next - 1	144:21:3784:3798	3183962	0	True				
ANR	3184180	EqualityExpression	++ p != next - 1		3183962	0		!=			
ANR	3184181	UnaryExpression	++ p		3183962	0					
ANR	3184182	IncDec	++		3183962	0					
ANR	3184183	Identifier	p		3183962	1					
ANR	3184184	AdditiveExpression	next - 1		3183962	1		-			
ANR	3184185	Identifier	next		3183962	0					
ANR	3184186	PrimaryExpression	1		3183962	1					
ANR	3184187	CompoundStatement		28:38:656:656	3183962	1					
ANR	3184188	IfStatement	if ( * p == '\\\\' )		3183962	0					
ANR	3184189	Condition	* p == '\\\\'	145:20:3823:3832	3183962	0	True				
ANR	3184190	EqualityExpression	* p == '\\\\'		3183962	0		==			
ANR	3184191	UnaryOperationExpression	* p		3183962	0					
ANR	3184192	UnaryOperator	*		3183962	0					
ANR	3184193	Identifier	p		3183962	1					
ANR	3184194	PrimaryExpression	'\\\\'		3183962	1					
ANR	3184195	ExpressionStatement	++ p	146:18:3853:3856	3183962	1	True				
ANR	3184196	UnaryExpression	++ p		3183962	0					
ANR	3184197	IncDec	++		3183962	0					
ANR	3184198	Identifier	p		3183962	1					
ANR	3184199	IfStatement	if ( s == charset + CHARSET_MAX - 1 )		3183962	1					
ANR	3184200	Condition	s == charset + CHARSET_MAX - 1	147:20:3878:3907	3183962	0	True				
ANR	3184201	EqualityExpression	s == charset + CHARSET_MAX - 1		3183962	0		==			
ANR	3184202	Identifier	s		3183962	0					
ANR	3184203	AdditiveExpression	charset + CHARSET_MAX - 1		3183962	1		+			
ANR	3184204	Identifier	charset		3183962	0					
ANR	3184205	AdditiveExpression	CHARSET_MAX - 1		3183962	1		-			
ANR	3184206	Identifier	CHARSET_MAX		3183962	0					
ANR	3184207	PrimaryExpression	1		3183962	1					
ANR	3184208	CompoundStatement		31:52:765:765	3183962	1					
ANR	3184209	ExpressionStatement	charset [ 0 ] = '\\0'	148:18:3930:3947	3183962	0	True				
ANR	3184210	AssignmentExpression	charset [ 0 ] = '\\0'		3183962	0		=			
ANR	3184211	ArrayIndexing	charset [ 0 ]		3183962	0					
ANR	3184212	Identifier	charset		3183962	0					
ANR	3184213	PrimaryExpression	0		3183962	1					
ANR	3184214	PrimaryExpression	'\\0'		3183962	1					
ANR	3184215	BreakStatement	break ;	149:18:3967:3972	3183962	1	True				
ANR	3184216	ExpressionStatement	* s ++ = * p	151:16:4008:4017	3183962	2	True				
ANR	3184217	AssignmentExpression	* s ++ = * p		3183962	0		=			
ANR	3184218	UnaryOperationExpression	* s ++		3183962	0					
ANR	3184219	UnaryOperator	*		3183962	0					
ANR	3184220	PostIncDecOperationExpression	s ++		3183962	1					
ANR	3184221	Identifier	s		3183962	0					
ANR	3184222	IncDec	++		3183962	1					
ANR	3184223	UnaryOperationExpression	* p		3183962	1					
ANR	3184224	UnaryOperator	*		3183962	0					
ANR	3184225	Identifier	p		3183962	1					
ANR	3184226	ExpressionStatement	* s ++ = '\\0'	153:14:4049:4060	3183962	1	True				
ANR	3184227	AssignmentExpression	* s ++ = '\\0'		3183962	0		=			
ANR	3184228	UnaryOperationExpression	* s ++		3183962	0					
ANR	3184229	UnaryOperator	*		3183962	0					
ANR	3184230	PostIncDecOperationExpression	s ++		3183962	1					
ANR	3184231	Identifier	s		3183962	0					
ANR	3184232	IncDec	++		3183962	1					
ANR	3184233	PrimaryExpression	'\\0'		3183962	1					
ANR	3184234	ElseStatement	else		3183962	0					
ANR	3184235	CompoundStatement		39:17:948:948	3183962	0					
ANR	3184236	IfStatement	if ( next - p > CHARSET_MAX - 1 )		3183962	0					
ANR	3184237	Condition	next - p > CHARSET_MAX - 1	156:18:4113:4138	3183962	0	True				
ANR	3184238	RelationalExpression	next - p > CHARSET_MAX - 1		3183962	0		>			
ANR	3184239	AdditiveExpression	next - p		3183962	0		-			
ANR	3184240	Identifier	next		3183962	0					
ANR	3184241	Identifier	p		3183962	1					
ANR	3184242	AdditiveExpression	CHARSET_MAX - 1		3183962	1		-			
ANR	3184243	Identifier	CHARSET_MAX		3183962	0					
ANR	3184244	PrimaryExpression	1		3183962	1					
ANR	3184245	BreakStatement	break ;	157:16:4157:4162	3183962	1	True				
ANR	3184246	WhileStatement	while ( p != next )		3183962	1					
ANR	3184247	Condition	p != next	158:21:4185:4193	3183962	0	True				
ANR	3184248	EqualityExpression	p != next		3183962	0		!=			
ANR	3184249	Identifier	p		3183962	0					
ANR	3184250	Identifier	next		3183962	1					
ANR	3184251	ExpressionStatement	* s ++ = * p ++	159:16:4212:4223	3183962	1	True				
ANR	3184252	AssignmentExpression	* s ++ = * p ++		3183962	0		=			
ANR	3184253	UnaryOperationExpression	* s ++		3183962	0					
ANR	3184254	UnaryOperator	*		3183962	0					
ANR	3184255	PostIncDecOperationExpression	s ++		3183962	1					
ANR	3184256	Identifier	s		3183962	0					
ANR	3184257	IncDec	++		3183962	1					
ANR	3184258	UnaryOperationExpression	* p ++		3183962	1					
ANR	3184259	UnaryOperator	*		3183962	0					
ANR	3184260	PostIncDecOperationExpression	p ++		3183962	1					
ANR	3184261	Identifier	p		3183962	0					
ANR	3184262	IncDec	++		3183962	1					
ANR	3184263	ExpressionStatement	* s = 0	160:14:4239:4245	3183962	2	True				
ANR	3184264	AssignmentExpression	* s = 0		3183962	0		=			
ANR	3184265	UnaryOperationExpression	* s		3183962	0					
ANR	3184266	UnaryOperator	*		3183962	0					
ANR	3184267	Identifier	s		3183962	1					
ANR	3184268	PrimaryExpression	0		3183962	1					
ANR	3184269	BreakStatement	break ;	161:14:4261:4266	3183962	3	True				
ANR	3184270	ElseStatement	else		3183962	0					
ANR	3184271	ExpressionStatement	p = getTok ( & next )	168:4:4329:4346	3183962	0	True				
ANR	3184272	AssignmentExpression	p = getTok ( & next )		3183962	0		=			
ANR	3184273	Identifier	p		3183962	0					
ANR	3184274	CallExpression	getTok ( & next )		3183962	1					
ANR	3184275	Callee	getTok		3183962	0					
ANR	3184276	Identifier	getTok		3183962	0					
ANR	3184277	ArgumentList	& next		3183962	1					
ANR	3184278	Argument	& next		3183962	0					
ANR	3184279	UnaryOperationExpression	& next		3183962	0					
ANR	3184280	UnaryOperator	&		3183962	0					
ANR	3184281	Identifier	next		3183962	1					
ANR	3184282	ReturnType	void		3183962	1					
ANR	3184283	Identifier	getXMLCharset		3183962	2					
ANR	3184284	ParameterList	"const char * buf , char * charset"		3183962	3					
ANR	3184285	Parameter	const char * buf	116:14:3112:3126	3183962	0	True				
ANR	3184286	ParameterType	const char *		3183962	0					
ANR	3184287	Identifier	buf		3183962	1					
ANR	3184288	Parameter	char * charset	116:31:3129:3141	3183962	1	True				
ANR	3184289	ParameterType	char *		3183962	0					
ANR	3184290	Identifier	charset		3183962	1					
ANR	3184291	CFGEntryNode	ENTRY		3183962		True				
ANR	3184292	CFGExitNode	EXIT		3183962		True				
ANR	3184293	Symbol	next		3183962						
ANR	3184294	Symbol	* s ++		3183962						
ANR	3184295	Symbol	charset		3183962						
ANR	3184296	Symbol	& next		3183962						
ANR	3184297	Symbol	CHARSET_MAX		3183962						
ANR	3184298	Symbol	* p ++		3183962						
ANR	3184299	Symbol	matchkey		3183962						
ANR	3184300	Symbol	p		3183962						
ANR	3184301	Symbol	isXml		3183962						
ANR	3184302	Symbol	buf		3183962						
ANR	3184303	Symbol	getTok		3183962						
ANR	3184304	Symbol	s		3183962						
ANR	3184305	Symbol	* p		3183962						
ANR	3184306	Symbol	* charset		3183962						
ANR	3184307	Symbol	* s		3183962						
ANR	3184308	Function	main	172:0:4355:4494							
ANR	3184309	FunctionDef	"main (int argc , char * * argv)"		3184308	0					
ANR	3184310	CompoundStatement		174:0:4387:4494	3184308	0					
ANR	3184311	IdentifierDeclStatement	char buf [ CHARSET_MAX ] ;	175:2:4391:4412	3184308	0	True				
ANR	3184312	IdentifierDecl	buf [ CHARSET_MAX ]		3184308	0					
ANR	3184313	IdentifierDeclType	char [ CHARSET_MAX ]		3184308	0					
ANR	3184314	Identifier	buf		3184308	1					
ANR	3184315	Identifier	CHARSET_MAX		3184308	2					
ANR	3184316	ExpressionStatement	"getXMLCharset ( argv [ 1 ] , buf )"	176:2:4416:4443	3184308	1	True				
ANR	3184317	CallExpression	"getXMLCharset ( argv [ 1 ] , buf )"		3184308	0					
ANR	3184318	Callee	getXMLCharset		3184308	0					
ANR	3184319	Identifier	getXMLCharset		3184308	0					
ANR	3184320	ArgumentList	argv [ 1 ]		3184308	1					
ANR	3184321	Argument	argv [ 1 ]		3184308	0					
ANR	3184322	ArrayIndexing	argv [ 1 ]		3184308	0					
ANR	3184323	Identifier	argv		3184308	0					
ANR	3184324	PrimaryExpression	1		3184308	1					
ANR	3184325	Argument	buf		3184308	1					
ANR	3184326	Identifier	buf		3184308	0					
ANR	3184327	ExpressionStatement	"printf ( ""charset = \\""%s\\""\\n"" , buf )"	177:2:4447:4480	3184308	2	True				
ANR	3184328	CallExpression	"printf ( ""charset = \\""%s\\""\\n"" , buf )"		3184308	0					
ANR	3184329	Callee	printf		3184308	0					
ANR	3184330	Identifier	printf		3184308	0					
ANR	3184331	ArgumentList	"""charset = \\""%s\\""\\n"""		3184308	1					
ANR	3184332	Argument	"""charset = \\""%s\\""\\n"""		3184308	0					
ANR	3184333	PrimaryExpression	"""charset = \\""%s\\""\\n"""		3184308	0					
ANR	3184334	Argument	buf		3184308	1					
ANR	3184335	Identifier	buf		3184308	0					
ANR	3184336	ReturnStatement	return 0 ;	178:2:4484:4492	3184308	3	True				
ANR	3184337	PrimaryExpression	0		3184308	0					
ANR	3184338	ReturnType	int		3184308	1					
ANR	3184339	Identifier	main		3184308	2					
ANR	3184340	ParameterList	"int argc , char * * argv"		3184308	3					
ANR	3184341	Parameter	int argc	173:5:4364:4371	3184308	0	True				
ANR	3184342	ParameterType	int		3184308	0					
ANR	3184343	Identifier	argc		3184308	1					
ANR	3184344	Parameter	char * * argv	173:15:4374:4384	3184308	1	True				
ANR	3184345	ParameterType	char * *		3184308	0					
ANR	3184346	Identifier	argv		3184308	1					
ANR	3184347	CFGEntryNode	ENTRY		3184308		True				
ANR	3184348	CFGExitNode	EXIT		3184308		True				
ANR	3184349	Symbol	argc		3184308						
ANR	3184350	Symbol	buf		3184308						
ANR	3184351	Symbol	* argv		3184308						
ANR	3184352	Symbol	argv		3184308						
