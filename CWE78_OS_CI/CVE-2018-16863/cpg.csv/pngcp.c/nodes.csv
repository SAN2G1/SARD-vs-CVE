command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	8506959	File	data/converged/CVE-2018-16863_ghostpdl/pngcp.c								
ANR	8506960	ClassDef	<unnamed>	117:8:3695:4245							
ANR	8506961	DeclStmt									
ANR	8506962	Decl									error_level
ANR	8506963	DeclStmt									
ANR	8506964	Decl							const char	const char [ ]	range_lo
ANR	8506965	DeclStmt									
ANR	8506966	Decl							const char	const char [ ]	range_hi
ANR	8506967	DeclStmt									
ANR	8506968	Decl							const char	const char [ ]	all
ANR	8506969	ClassDef	value_list	162:8:5692:5840							
ANR	8506970	DeclStmt									
ANR	8506971	Decl							const char	const char *	name
ANR	8506972	DeclStmt									
ANR	8506973	Decl							int	int	value
ANR	8506974	DeclStmt									
ANR	8506975	Decl							value_list	value_list	value_list
ANR	8506976	DeclStmt									
ANR	8506977	Decl							value_list	value_list [ ]	vl_windowBits_IDAT
ANR	8506978	ClassDef	option	279:8:9046:9399							
ANR	8506979	DeclStmt									
ANR	8506980	Decl							const char	const char *	name
ANR	8506981	DeclStmt									
ANR	8506982	Decl							png_uint_32	png_uint_32	opt
ANR	8506983	DeclStmt									
ANR	8506984	Decl							png_byte	png_byte	search
ANR	8506985	DeclStmt									
ANR	8506986	Decl							png_byte	png_byte	value_count
ANR	8506987	DeclStmt									
ANR	8506988	Decl							const value_list	const value_list *	values
ANR	8506989	DeclStmt									
ANR	8506990	Decl							option	option	option
ANR	8506991	DeclStmt									
ANR	8506992	Decl							const option	const option [ ]	options
ANR	8506993	DeclStmt									
ANR	8506994	Decl							const size_t	const size_t	option_count
ANR	8506995	Function	cts	377:0:12147:12524							
ANR	8506996	FunctionDef	cts (int ct)		8506995	0					
ANR	8506997	CompoundStatement		379:0:12179:12524	8506995	0					
ANR	8506998	SwitchStatement	switch ( ct )		8506995	0					
ANR	8506999	Condition	ct	380:11:12192:12193	8506995	0	True				
ANR	8507000	Identifier	ct		8506995	0					
ANR	8507001	CompoundStatement		3:3:19:19	8506995	1					
ANR	8507002	Label	case PNG_COLOR_TYPE_PALETTE :	382:6:12207:12234	8506995	0	True				
ANR	8507003	Identifier	PNG_COLOR_TYPE_PALETTE		8506995	0					
ANR	8507004	ReturnStatement	"return ""P"" ;"	382:39:12240:12250	8506995	1	True				
ANR	8507005	PrimaryExpression	"""P"""		8506995	0					
ANR	8507006	Label	case PNG_COLOR_TYPE_GRAY :	383:6:12258:12282	8506995	2	True				
ANR	8507007	Identifier	PNG_COLOR_TYPE_GRAY		8506995	0					
ANR	8507008	ReturnStatement	"return ""G"" ;"	383:39:12291:12301	8506995	3	True				
ANR	8507009	PrimaryExpression	"""G"""		8506995	0					
ANR	8507010	Label	case PNG_COLOR_TYPE_GRAY_ALPHA :	384:6:12309:12339	8506995	4	True				
ANR	8507011	Identifier	PNG_COLOR_TYPE_GRAY_ALPHA		8506995	0					
ANR	8507012	ReturnStatement	"return ""GA"" ;"	384:39:12342:12353	8506995	5	True				
ANR	8507013	PrimaryExpression	"""GA"""		8506995	0					
ANR	8507014	Label	case PNG_COLOR_TYPE_RGB :	385:6:12361:12384	8506995	6	True				
ANR	8507015	Identifier	PNG_COLOR_TYPE_RGB		8506995	0					
ANR	8507016	ReturnStatement	"return ""RGB"" ;"	385:39:12394:12406	8506995	7	True				
ANR	8507017	PrimaryExpression	"""RGB"""		8506995	0					
ANR	8507018	Label	case PNG_COLOR_TYPE_RGB_ALPHA :	386:6:12414:12443	8506995	8	True				
ANR	8507019	Identifier	PNG_COLOR_TYPE_RGB_ALPHA		8506995	0					
ANR	8507020	ReturnStatement	"return ""RGBA"" ;"	386:39:12447:12460	8506995	9	True				
ANR	8507021	PrimaryExpression	"""RGBA"""		8506995	0					
ANR	8507022	Label	default :	387:6:12468:12475	8506995	10	True				
ANR	8507023	Identifier	default		8506995	0					
ANR	8507024	ReturnStatement	"return ""INVALID"" ;"	387:39:12501:12517	8506995	11	True				
ANR	8507025	PrimaryExpression	"""INVALID"""		8506995	0					
ANR	8507026	ReturnType	static const char *		8506995	1					
ANR	8507027	Identifier	cts		8506995	2					
ANR	8507028	ParameterList	int ct		8506995	3					
ANR	8507029	Parameter	int ct	378:4:12171:12176	8506995	0	True				
ANR	8507030	ParameterType	int		8506995	0					
ANR	8507031	Identifier	ct		8506995	1					
ANR	8507032	CFGEntryNode	ENTRY		8506995		True				
ANR	8507033	CFGExitNode	EXIT		8506995		True				
ANR	8507034	Symbol	ct		8506995						
ANR	8507035	ClassDef	display	391:0:12527:16346							
ANR	8507036	DeclStmt									
ANR	8507037	Decl							jmp_buf	jmp_buf	error_return
ANR	8507038	DeclStmt									
ANR	8507039	Decl							unsigned int	unsigned int	errset
ANR	8507040	DeclStmt									
ANR	8507041	Decl							const char	const char *	operation
ANR	8507042	DeclStmt									
ANR	8507043	Decl							const char	const char *	filename
ANR	8507044	DeclStmt									
ANR	8507045	Decl							const char	const char *	output_file
ANR	8507046	DeclStmt									
ANR	8507047	Decl							FILE	FILE *	fp
ANR	8507048	DeclStmt									
ANR	8507049	Decl							png_alloc_size_t	png_alloc_size_t	read_size
ANR	8507050	DeclStmt									
ANR	8507051	Decl							png_structp	png_structp	read_pp
ANR	8507052	DeclStmt									
ANR	8507053	Decl							png_infop	png_infop	ip
ANR	8507054	DeclStmt									
ANR	8507055	Decl							defined PNG_TEXT_SUPPORTED png_textp	defined PNG_TEXT_SUPPORTED png_textp	text_ptr
ANR	8507056	DeclStmt									
ANR	8507057	Decl							int	int	num_text
ANR	8507058	DeclStmt									
ANR	8507059	Decl							int	int	text_stashed
ANR	8507060	DeclStmt									
ANR	8507061	Decl							struct timespec	struct timespec	read_time
ANR	8507062	DeclStmt									
ANR	8507063	Decl							struct timespec	struct timespec	read_time_total
ANR	8507064	DeclStmt									
ANR	8507065	Decl							struct timespec	struct timespec	write_time
ANR	8507066	DeclStmt									
ANR	8507067	Decl							struct timespec	struct timespec	write_time_total
ANR	8507068	DeclStmt									
ANR	8507069	Decl							png_alloc_size_t	png_alloc_size_t	write_size
ANR	8507070	DeclStmt									
ANR	8507071	Decl							png_alloc_size_t	png_alloc_size_t	best_size
ANR	8507072	DeclStmt									
ANR	8507073	Decl							png_structp	png_structp	write_pp
ANR	8507074	DeclStmt									
ANR	8507075	Decl							png_alloc_size_t	png_alloc_size_t	size
ANR	8507076	DeclStmt									
ANR	8507077	Decl							png_uint_32	png_uint_32	w
ANR	8507078	DeclStmt									
ANR	8507079	Decl							png_uint_32	png_uint_32	h
ANR	8507080	DeclStmt									
ANR	8507081	Decl							int	int	bpp
ANR	8507082	DeclStmt									
ANR	8507083	Decl							png_byte	png_byte	ct
ANR	8507084	DeclStmt									
ANR	8507085	Decl							int	int	no_warnings
ANR	8507086	DeclStmt									
ANR	8507087	Decl							int	int	min_windowBits
ANR	8507088	DeclStmt									
ANR	8507089	Decl							png_uint_32	png_uint_32	results
ANR	8507090	DeclStmt									
ANR	8507091	Decl							png_uint_32	png_uint_32	options
ANR	8507092	DeclStmt									
ANR	8507093	Decl							png_byte	png_byte [ option_count ]	entry
ANR	8507094	DeclStmt									
ANR	8507095	Decl							int	int [ option_count ]	value
ANR	8507096	DeclStmt									
ANR	8507097	Decl							unsigned int	unsigned int	csp
ANR	8507098	DeclStmt									
ANR	8507099	Decl							unsigned int	unsigned int	nsp
ANR	8507100	DeclStmt									
ANR	8507101	Decl							unsigned int	unsigned int	tsp
ANR	8507102	DeclStmt									
ANR	8507103	Decl							int	int	opt_string_start
ANR	8507104	ClassDef	stack	463:3:15480:16101							
ANR	8507105	DeclStmt									
ANR	8507106	Decl							png_alloc_size_t	png_alloc_size_t	best_size
ANR	8507107	DeclStmt									
ANR	8507108	Decl							png_alloc_size_t	png_alloc_size_t	lo_size
ANR	8507109	DeclStmt									
ANR	8507110	Decl							png_alloc_size_t	png_alloc_size_t	hi_size
ANR	8507111	DeclStmt									
ANR	8507112	Decl							int	int	lo
ANR	8507113	Decl							int	int	hi
ANR	8507114	DeclStmt									
ANR	8507115	Decl							int	int	best_val
ANR	8507116	DeclStmt									
ANR	8507117	Decl							int	int	opt_string_end
ANR	8507118	DeclStmt									
ANR	8507119	Decl							png_byte	png_byte	opt
ANR	8507120	DeclStmt									
ANR	8507121	Decl							png_byte	png_byte	entry
ANR	8507122	DeclStmt									
ANR	8507123	Decl							png_byte	png_byte	end
ANR	8507124	DeclStmt									
ANR	8507125	Decl							stack	stack [ SL ]	stack
ANR	8507126	DeclStmt									
ANR	8507127	Decl							char	char [ 32 * SL ]	curr
ANR	8507128	DeclStmt									
ANR	8507129	Decl							char	char [ 32 * SL ]	best
ANR	8507130	DeclStmt									
ANR	8507131	Decl							char	char [ FILENAME_MAX ]	namebuf
ANR	8507132	Function	display_init	481:0:16350:17104							
ANR	8507133	FunctionDef	display_init (struct display * dp)		8507132	0					
ANR	8507134	CompoundStatement		487:0:16577:17104	8507132	0					
ANR	8507135	ExpressionStatement	"memset ( dp , 0 , sizeof * dp )"	488:3:16582:16607	8507132	0	True				
ANR	8507136	CallExpression	"memset ( dp , 0 , sizeof * dp )"		8507132	0					
ANR	8507137	Callee	memset		8507132	0					
ANR	8507138	Identifier	memset		8507132	0					
ANR	8507139	ArgumentList	dp		8507132	1					
ANR	8507140	Argument	dp		8507132	0					
ANR	8507141	Identifier	dp		8507132	0					
ANR	8507142	Argument	0		8507132	1					
ANR	8507143	PrimaryExpression	0		8507132	0					
ANR	8507144	Argument	sizeof * dp		8507132	2					
ANR	8507145	SizeofExpression	sizeof * dp		8507132	0					
ANR	8507146	Sizeof	sizeof		8507132	0					
ANR	8507147	UnaryOperationExpression	* dp		8507132	1					
ANR	8507148	UnaryOperator	*		8507132	0					
ANR	8507149	Identifier	dp		8507132	1					
ANR	8507150	ExpressionStatement	"dp -> operation = ""internal error"""	489:3:16612:16644	8507132	1	True				
ANR	8507151	AssignmentExpression	"dp -> operation = ""internal error"""		8507132	0		=			
ANR	8507152	PtrMemberAccess	dp -> operation		8507132	0					
ANR	8507153	Identifier	dp		8507132	0					
ANR	8507154	Identifier	operation		8507132	1					
ANR	8507155	PrimaryExpression	"""internal error"""		8507132	1					
ANR	8507156	ExpressionStatement	"dp -> filename = ""command line"""	490:3:16649:16678	8507132	2	True				
ANR	8507157	AssignmentExpression	"dp -> filename = ""command line"""		8507132	0		=			
ANR	8507158	PtrMemberAccess	dp -> filename		8507132	0					
ANR	8507159	Identifier	dp		8507132	0					
ANR	8507160	Identifier	filename		8507132	1					
ANR	8507161	PrimaryExpression	"""command line"""		8507132	1					
ANR	8507162	ExpressionStatement	"dp -> output_file = ""no output file"""	491:3:16683:16717	8507132	3	True				
ANR	8507163	AssignmentExpression	"dp -> output_file = ""no output file"""		8507132	0		=			
ANR	8507164	PtrMemberAccess	dp -> output_file		8507132	0					
ANR	8507165	Identifier	dp		8507132	0					
ANR	8507166	Identifier	output_file		8507132	1					
ANR	8507167	PrimaryExpression	"""no output file"""		8507132	1					
ANR	8507168	ExpressionStatement	dp -> options = WARNINGS	492:3:16722:16744	8507132	4	True				
ANR	8507169	AssignmentExpression	dp -> options = WARNINGS		8507132	0		=			
ANR	8507170	PtrMemberAccess	dp -> options		8507132	0					
ANR	8507171	Identifier	dp		8507132	0					
ANR	8507172	Identifier	options		8507132	1					
ANR	8507173	Identifier	WARNINGS		8507132	1					
ANR	8507174	ExpressionStatement	dp -> fp = NULL	493:3:16783:16796	8507132	5	True				
ANR	8507175	AssignmentExpression	dp -> fp = NULL		8507132	0		=			
ANR	8507176	PtrMemberAccess	dp -> fp		8507132	0					
ANR	8507177	Identifier	dp		8507132	0					
ANR	8507178	Identifier	fp		8507132	1					
ANR	8507179	Identifier	NULL		8507132	1					
ANR	8507180	ExpressionStatement	dp -> read_pp = NULL	494:3:16801:16819	8507132	6	True				
ANR	8507181	AssignmentExpression	dp -> read_pp = NULL		8507132	0		=			
ANR	8507182	PtrMemberAccess	dp -> read_pp		8507132	0					
ANR	8507183	Identifier	dp		8507132	0					
ANR	8507184	Identifier	read_pp		8507132	1					
ANR	8507185	Identifier	NULL		8507132	1					
ANR	8507186	ExpressionStatement	dp -> ip = NULL	495:3:16824:16837	8507132	7	True				
ANR	8507187	AssignmentExpression	dp -> ip = NULL		8507132	0		=			
ANR	8507188	PtrMemberAccess	dp -> ip		8507132	0					
ANR	8507189	Identifier	dp		8507132	0					
ANR	8507190	Identifier	ip		8507132	1					
ANR	8507191	Identifier	NULL		8507132	1					
ANR	8507192	ExpressionStatement	dp -> write_pp = NULL	496:3:16842:16861	8507132	8	True				
ANR	8507193	AssignmentExpression	dp -> write_pp = NULL		8507132	0		=			
ANR	8507194	PtrMemberAccess	dp -> write_pp		8507132	0					
ANR	8507195	Identifier	dp		8507132	0					
ANR	8507196	Identifier	write_pp		8507132	1					
ANR	8507197	Identifier	NULL		8507132	1					
ANR	8507198	ExpressionStatement	dp -> min_windowBits = - 1	497:3:16866:16889	8507132	9	True				
ANR	8507199	AssignmentExpression	dp -> min_windowBits = - 1		8507132	0		=			
ANR	8507200	PtrMemberAccess	dp -> min_windowBits		8507132	0					
ANR	8507201	Identifier	dp		8507132	0					
ANR	8507202	Identifier	min_windowBits		8507132	1					
ANR	8507203	UnaryOperationExpression	- 1		8507132	1					
ANR	8507204	UnaryOperator	-		8507132	0					
ANR	8507205	PrimaryExpression	1		8507132	1					
ANR	8507206	Statement	if	498:3:16946:16947	8507132	10	True				
ANR	8507207	Statement	PNG_LIBPNG_VER	498:6:16949:16962	8507132	11	True				
ANR	8507208	Statement	<	498:21:16964:16964	8507132	12	True				
ANR	8507209	Statement	10700	498:23:16966:16970	8507132	13	True				
ANR	8507210	Statement	&&	498:29:16972:16973	8507132	14	True				
ANR	8507211	Statement	defined	498:32:16975:16981	8507132	15	True				
ANR	8507212	Statement	PNG_TEXT_SUPPORTED	498:40:16983:17000	8507132	16	True				
ANR	8507213	ExpressionStatement	dp -> text_ptr = NULL	499:6:17008:17027	8507132	17	True				
ANR	8507214	AssignmentExpression	dp -> text_ptr = NULL		8507132	0		=			
ANR	8507215	PtrMemberAccess	dp -> text_ptr		8507132	0					
ANR	8507216	Identifier	dp		8507132	0					
ANR	8507217	Identifier	text_ptr		8507132	1					
ANR	8507218	Identifier	NULL		8507132	1					
ANR	8507219	ExpressionStatement	dp -> num_text = 0	500:6:17035:17051	8507132	18	True				
ANR	8507220	AssignmentExpression	dp -> num_text = 0		8507132	0		=			
ANR	8507221	PtrMemberAccess	dp -> num_text		8507132	0					
ANR	8507222	Identifier	dp		8507132	0					
ANR	8507223	Identifier	num_text		8507132	1					
ANR	8507224	PrimaryExpression	0		8507132	1					
ANR	8507225	ExpressionStatement	dp -> text_stashed = 0	501:6:17059:17079	8507132	19	True				
ANR	8507226	AssignmentExpression	dp -> text_stashed = 0		8507132	0		=			
ANR	8507227	PtrMemberAccess	dp -> text_stashed		8507132	0					
ANR	8507228	Identifier	dp		8507132	0					
ANR	8507229	Identifier	text_stashed		8507132	1					
ANR	8507230	PrimaryExpression	0		8507132	1					
ANR	8507231	Statement	endif	502:3:17084:17088	8507132	20	True				
ANR	8507232	ReturnType	static void		8507132	1					
ANR	8507233	Identifier	display_init		8507132	2					
ANR	8507234	ParameterList	struct display * dp		8507132	3					
ANR	8507235	Parameter	struct display * dp	482:13:16375:16392	8507132	0	True				
ANR	8507236	ParameterType	struct display *		8507132	0					
ANR	8507237	Identifier	dp		8507132	1					
ANR	8507238	CFGEntryNode	ENTRY		8507132		True				
ANR	8507239	CFGExitNode	EXIT		8507132		True				
ANR	8507240	Symbol	WARNINGS		8507132						
ANR	8507241	Symbol	dp -> num_text		8507132						
ANR	8507242	Symbol	NULL		8507132						
ANR	8507243	Symbol	dp -> ip		8507132						
ANR	8507244	Symbol	dp -> output_file		8507132						
ANR	8507245	Symbol	dp -> fp		8507132						
ANR	8507246	Symbol	dp -> options		8507132						
ANR	8507247	Symbol	dp -> operation		8507132						
ANR	8507248	Symbol	dp -> min_windowBits		8507132						
ANR	8507249	Symbol	dp -> read_pp		8507132						
ANR	8507250	Symbol	dp -> filename		8507132						
ANR	8507251	Symbol	dp -> text_stashed		8507132						
ANR	8507252	Symbol	dp		8507132						
ANR	8507253	Symbol	dp -> text_ptr		8507132						
ANR	8507254	Symbol	* dp		8507132						
ANR	8507255	Symbol	dp -> write_pp		8507132						
ANR	8507256	Function	display_clean_read	505:0:17107:17349							
ANR	8507257	FunctionDef	display_clean_read (struct display * dp)		8507256	0					
ANR	8507258	CompoundStatement		507:0:17158:17349	8507256	0					
ANR	8507259	IfStatement	if ( dp -> read_pp != NULL )		8507256	0					
ANR	8507260	Condition	dp -> read_pp != NULL	508:7:17167:17185	8507256	0	True				
ANR	8507261	EqualityExpression	dp -> read_pp != NULL		8507256	0		!=			
ANR	8507262	PtrMemberAccess	dp -> read_pp		8507256	0					
ANR	8507263	Identifier	dp		8507256	0					
ANR	8507264	Identifier	read_pp		8507256	1					
ANR	8507265	Identifier	NULL		8507256	1					
ANR	8507266	ExpressionStatement	"png_destroy_read_struct ( & dp -> read_pp , NULL , NULL )"	509:6:17194:17243	8507256	1	True				
ANR	8507267	CallExpression	"png_destroy_read_struct ( & dp -> read_pp , NULL , NULL )"		8507256	0					
ANR	8507268	Callee	png_destroy_read_struct		8507256	0					
ANR	8507269	Identifier	png_destroy_read_struct		8507256	0					
ANR	8507270	ArgumentList	& dp -> read_pp		8507256	1					
ANR	8507271	Argument	& dp -> read_pp		8507256	0					
ANR	8507272	UnaryOperationExpression	& dp -> read_pp		8507256	0					
ANR	8507273	UnaryOperator	&		8507256	0					
ANR	8507274	PtrMemberAccess	dp -> read_pp		8507256	1					
ANR	8507275	Identifier	dp		8507256	0					
ANR	8507276	Identifier	read_pp		8507256	1					
ANR	8507277	Argument	NULL		8507256	1					
ANR	8507278	Identifier	NULL		8507256	0					
ANR	8507279	Argument	NULL		8507256	2					
ANR	8507280	Identifier	NULL		8507256	0					
ANR	8507281	IfStatement	if ( dp -> fp != NULL )		8507256	1					
ANR	8507282	Condition	dp -> fp != NULL	511:7:17253:17266	8507256	0	True				
ANR	8507283	EqualityExpression	dp -> fp != NULL		8507256	0		!=			
ANR	8507284	PtrMemberAccess	dp -> fp		8507256	0					
ANR	8507285	Identifier	dp		8507256	0					
ANR	8507286	Identifier	fp		8507256	1					
ANR	8507287	Identifier	NULL		8507256	1					
ANR	8507288	CompoundStatement		7:6:121:138	8507256	1					
ANR	8507289	IdentifierDeclStatement	FILE * fp = dp -> fp ;	513:6:17280:17297	8507256	0	True				
ANR	8507290	IdentifierDecl	* fp = dp -> fp		8507256	0					
ANR	8507291	IdentifierDeclType	FILE *		8507256	0					
ANR	8507292	Identifier	fp		8507256	1					
ANR	8507293	AssignmentExpression	* fp = dp -> fp		8507256	2		=			
ANR	8507294	Identifier	fp		8507256	0					
ANR	8507295	PtrMemberAccess	dp -> fp		8507256	1					
ANR	8507296	Identifier	dp		8507256	0					
ANR	8507297	Identifier	fp		8507256	1					
ANR	8507298	ExpressionStatement	dp -> fp = NULL	514:6:17305:17318	8507256	1	True				
ANR	8507299	AssignmentExpression	dp -> fp = NULL		8507256	0		=			
ANR	8507300	PtrMemberAccess	dp -> fp		8507256	0					
ANR	8507301	Identifier	dp		8507256	0					
ANR	8507302	Identifier	fp		8507256	1					
ANR	8507303	Identifier	NULL		8507256	1					
ANR	8507304	ExpressionStatement	( void ) fclose ( fp )	515:6:17326:17342	8507256	2	True				
ANR	8507305	CastExpression	( void ) fclose ( fp )		8507256	0					
ANR	8507306	CastTarget	void		8507256	0					
ANR	8507307	CallExpression	fclose ( fp )		8507256	1					
ANR	8507308	Callee	fclose		8507256	0					
ANR	8507309	Identifier	fclose		8507256	0					
ANR	8507310	ArgumentList	fp		8507256	1					
ANR	8507311	Argument	fp		8507256	0					
ANR	8507312	Identifier	fp		8507256	0					
ANR	8507313	ReturnType	static void		8507256	1					
ANR	8507314	Identifier	display_clean_read		8507256	2					
ANR	8507315	ParameterList	struct display * dp		8507256	3					
ANR	8507316	Parameter	struct display * dp	506:19:17138:17155	8507256	0	True				
ANR	8507317	ParameterType	struct display *		8507256	0					
ANR	8507318	Identifier	dp		8507256	1					
ANR	8507319	CFGEntryNode	ENTRY		8507256		True				
ANR	8507320	CFGExitNode	EXIT		8507256		True				
ANR	8507321	Symbol	* dp		8507256						
ANR	8507322	Symbol	NULL		8507256						
ANR	8507323	Symbol	dp -> fp		8507256						
ANR	8507324	Symbol	dp -> read_pp		8507256						
ANR	8507325	Symbol	fp		8507256						
ANR	8507326	Symbol	& dp -> read_pp		8507256						
ANR	8507327	Symbol	dp		8507256						
ANR	8507328	Function	display_clean_write	519:0:17352:17616							
ANR	8507329	FunctionDef	display_clean_write (struct display * dp)		8507328	0					
ANR	8507330	CompoundStatement		521:0:17404:17616	8507328	0					
ANR	8507331	IfStatement	if ( dp -> fp != NULL )		8507328	0					
ANR	8507332	Condition	dp -> fp != NULL	522:7:17413:17426	8507328	0	True				
ANR	8507333	EqualityExpression	dp -> fp != NULL		8507328	0		!=			
ANR	8507334	PtrMemberAccess	dp -> fp		8507328	0					
ANR	8507335	Identifier	dp		8507328	0					
ANR	8507336	Identifier	fp		8507328	1					
ANR	8507337	Identifier	NULL		8507328	1					
ANR	8507338	CompoundStatement		4:6:35:52	8507328	1					
ANR	8507339	IdentifierDeclStatement	FILE * fp = dp -> fp ;	524:6:17440:17457	8507328	0	True				
ANR	8507340	IdentifierDecl	* fp = dp -> fp		8507328	0					
ANR	8507341	IdentifierDeclType	FILE *		8507328	0					
ANR	8507342	Identifier	fp		8507328	1					
ANR	8507343	AssignmentExpression	* fp = dp -> fp		8507328	2		=			
ANR	8507344	Identifier	fp		8507328	0					
ANR	8507345	PtrMemberAccess	dp -> fp		8507328	1					
ANR	8507346	Identifier	dp		8507328	0					
ANR	8507347	Identifier	fp		8507328	1					
ANR	8507348	ExpressionStatement	dp -> fp = NULL	525:6:17465:17478	8507328	1	True				
ANR	8507349	AssignmentExpression	dp -> fp = NULL		8507328	0		=			
ANR	8507350	PtrMemberAccess	dp -> fp		8507328	0					
ANR	8507351	Identifier	dp		8507328	0					
ANR	8507352	Identifier	fp		8507328	1					
ANR	8507353	Identifier	NULL		8507328	1					
ANR	8507354	ExpressionStatement	( void ) fclose ( fp )	526:6:17486:17502	8507328	2	True				
ANR	8507355	CastExpression	( void ) fclose ( fp )		8507328	0					
ANR	8507356	CastTarget	void		8507328	0					
ANR	8507357	CallExpression	fclose ( fp )		8507328	1					
ANR	8507358	Callee	fclose		8507328	0					
ANR	8507359	Identifier	fclose		8507328	0					
ANR	8507360	ArgumentList	fp		8507328	1					
ANR	8507361	Argument	fp		8507328	0					
ANR	8507362	Identifier	fp		8507328	0					
ANR	8507363	IfStatement	if ( dp -> write_pp != NULL )		8507328	1					
ANR	8507364	Condition	dp -> write_pp != NULL	529:7:17517:17536	8507328	0	True				
ANR	8507365	EqualityExpression	dp -> write_pp != NULL		8507328	0		!=			
ANR	8507366	PtrMemberAccess	dp -> write_pp		8507328	0					
ANR	8507367	Identifier	dp		8507328	0					
ANR	8507368	Identifier	write_pp		8507328	1					
ANR	8507369	Identifier	NULL		8507328	1					
ANR	8507370	ExpressionStatement	"png_destroy_write_struct ( & dp -> write_pp , dp -> tsp > 0 ? NULL : & dp -> ip )"	530:6:17545:17614	8507328	1	True				
ANR	8507371	CallExpression	"png_destroy_write_struct ( & dp -> write_pp , dp -> tsp > 0 ? NULL : & dp -> ip )"		8507328	0					
ANR	8507372	Callee	png_destroy_write_struct		8507328	0					
ANR	8507373	Identifier	png_destroy_write_struct		8507328	0					
ANR	8507374	ArgumentList	& dp -> write_pp		8507328	1					
ANR	8507375	Argument	& dp -> write_pp		8507328	0					
ANR	8507376	UnaryOperationExpression	& dp -> write_pp		8507328	0					
ANR	8507377	UnaryOperator	&		8507328	0					
ANR	8507378	PtrMemberAccess	dp -> write_pp		8507328	1					
ANR	8507379	Identifier	dp		8507328	0					
ANR	8507380	Identifier	write_pp		8507328	1					
ANR	8507381	Argument	dp -> tsp > 0 ? NULL : & dp -> ip		8507328	1					
ANR	8507382	ConditionalExpression	dp -> tsp > 0 ? NULL : & dp -> ip		8507328	0					
ANR	8507383	Condition	dp -> tsp > 0		8507328	0					
ANR	8507384	RelationalExpression	dp -> tsp > 0		8507328	0		>			
ANR	8507385	PtrMemberAccess	dp -> tsp		8507328	0					
ANR	8507386	Identifier	dp		8507328	0					
ANR	8507387	Identifier	tsp		8507328	1					
ANR	8507388	PrimaryExpression	0		8507328	1					
ANR	8507389	Identifier	NULL		8507328	1					
ANR	8507390	UnaryOperationExpression	& dp -> ip		8507328	2					
ANR	8507391	UnaryOperator	&		8507328	0					
ANR	8507392	PtrMemberAccess	dp -> ip		8507328	1					
ANR	8507393	Identifier	dp		8507328	0					
ANR	8507394	Identifier	ip		8507328	1					
ANR	8507395	ReturnType	static void		8507328	1					
ANR	8507396	Identifier	display_clean_write		8507328	2					
ANR	8507397	ParameterList	struct display * dp		8507328	3					
ANR	8507398	Parameter	struct display * dp	520:20:17384:17401	8507328	0	True				
ANR	8507399	ParameterType	struct display *		8507328	0					
ANR	8507400	Identifier	dp		8507328	1					
ANR	8507401	CFGEntryNode	ENTRY		8507328		True				
ANR	8507402	CFGExitNode	EXIT		8507328		True				
ANR	8507403	Symbol	* dp		8507328						
ANR	8507404	Symbol	NULL		8507328						
ANR	8507405	Symbol	dp -> fp		8507328						
ANR	8507406	Symbol	fp		8507328						
ANR	8507407	Symbol	& dp -> ip		8507328						
ANR	8507408	Symbol	dp		8507328						
ANR	8507409	Symbol	dp -> tsp		8507328						
ANR	8507410	Symbol	dp -> write_pp		8507328						
ANR	8507411	Symbol	& dp -> write_pp		8507328						
ANR	8507412	Function	display_clean	533:0:17619:18246							
ANR	8507413	FunctionDef	display_clean (struct display * dp)		8507412	0					
ANR	8507414	CompoundStatement		535:0:17665:18246	8507412	0					
ANR	8507415	ExpressionStatement	display_clean_read ( dp )	536:3:17670:17692	8507412	0	True				
ANR	8507416	CallExpression	display_clean_read ( dp )		8507412	0					
ANR	8507417	Callee	display_clean_read		8507412	0					
ANR	8507418	Identifier	display_clean_read		8507412	0					
ANR	8507419	ArgumentList	dp		8507412	1					
ANR	8507420	Argument	dp		8507412	0					
ANR	8507421	Identifier	dp		8507412	0					
ANR	8507422	ExpressionStatement	display_clean_write ( dp )	537:3:17697:17720	8507412	1	True				
ANR	8507423	CallExpression	display_clean_write ( dp )		8507412	0					
ANR	8507424	Callee	display_clean_write		8507412	0					
ANR	8507425	Identifier	display_clean_write		8507412	0					
ANR	8507426	ArgumentList	dp		8507412	1					
ANR	8507427	Argument	dp		8507412	0					
ANR	8507428	Identifier	dp		8507412	0					
ANR	8507429	ExpressionStatement	dp -> output_file = NULL	538:3:17725:17747	8507412	2	True				
ANR	8507430	AssignmentExpression	dp -> output_file = NULL		8507412	0		=			
ANR	8507431	PtrMemberAccess	dp -> output_file		8507412	0					
ANR	8507432	Identifier	dp		8507412	0					
ANR	8507433	Identifier	output_file		8507412	1					
ANR	8507434	Identifier	NULL		8507412	1					
ANR	8507435	Statement	if	540:3:17753:17754	8507412	3	True				
ANR	8507436	Statement	PNG_LIBPNG_VER	540:6:17756:17769	8507412	4	True				
ANR	8507437	Statement	<	540:21:17771:17771	8507412	5	True				
ANR	8507438	Statement	10700	540:23:17773:17777	8507412	6	True				
ANR	8507439	Statement	&&	540:29:17779:17780	8507412	7	True				
ANR	8507440	Statement	defined	540:32:17782:17788	8507412	8	True				
ANR	8507441	Statement	PNG_TEXT_SUPPORTED	540:40:17790:17807	8507412	9	True				
ANR	8507442	IfStatement	if ( dp -> text_stashed )		8507412	10					
ANR	8507443	Condition	dp -> text_stashed	544:10:17977:17992	8507412	0	True				
ANR	8507444	PtrMemberAccess	dp -> text_stashed		8507412	0					
ANR	8507445	Identifier	dp		8507412	0					
ANR	8507446	Identifier	text_stashed		8507412	1					
ANR	8507447	CompoundStatement		11:6:335:335	8507412	1					
ANR	8507448	ExpressionStatement	dp -> text_stashed = 0	546:9:18012:18032	8507412	0	True				
ANR	8507449	AssignmentExpression	dp -> text_stashed = 0		8507412	0		=			
ANR	8507450	PtrMemberAccess	dp -> text_stashed		8507412	0					
ANR	8507451	Identifier	dp		8507412	0					
ANR	8507452	Identifier	text_stashed		8507412	1					
ANR	8507453	PrimaryExpression	0		8507412	1					
ANR	8507454	ExpressionStatement	dp -> num_text = 0	547:9:18043:18059	8507412	1	True				
ANR	8507455	AssignmentExpression	dp -> num_text = 0		8507412	0		=			
ANR	8507456	PtrMemberAccess	dp -> num_text		8507412	0					
ANR	8507457	Identifier	dp		8507412	0					
ANR	8507458	Identifier	num_text		8507412	1					
ANR	8507459	PrimaryExpression	0		8507412	1					
ANR	8507460	ExpressionStatement	free ( dp -> text_ptr )	548:9:18070:18088	8507412	2	True				
ANR	8507461	CallExpression	free ( dp -> text_ptr )		8507412	0					
ANR	8507462	Callee	free		8507412	0					
ANR	8507463	Identifier	free		8507412	0					
ANR	8507464	ArgumentList	dp -> text_ptr		8507412	1					
ANR	8507465	Argument	dp -> text_ptr		8507412	0					
ANR	8507466	PtrMemberAccess	dp -> text_ptr		8507412	0					
ANR	8507467	Identifier	dp		8507412	0					
ANR	8507468	Identifier	text_ptr		8507412	1					
ANR	8507469	ExpressionStatement	dp -> text_ptr = NULL	549:9:18099:18118	8507412	3	True				
ANR	8507470	AssignmentExpression	dp -> text_ptr = NULL		8507412	0		=			
ANR	8507471	PtrMemberAccess	dp -> text_ptr		8507412	0					
ANR	8507472	Identifier	dp		8507412	0					
ANR	8507473	Identifier	text_ptr		8507412	1					
ANR	8507474	Identifier	NULL		8507412	1					
ANR	8507475	Statement	endif	551:3:18131:18135	8507412	11	True				
ANR	8507476	ExpressionStatement	dp -> results = 0	554:3:18203:18218	8507412	12	True				
ANR	8507477	AssignmentExpression	dp -> results = 0		8507412	0		=			
ANR	8507478	PtrMemberAccess	dp -> results		8507412	0					
ANR	8507479	Identifier	dp		8507412	0					
ANR	8507480	Identifier	results		8507412	1					
ANR	8507481	PrimaryExpression	0		8507412	1					
ANR	8507482	ReturnType	static void		8507412	1					
ANR	8507483	Identifier	display_clean		8507412	2					
ANR	8507484	ParameterList	struct display * dp		8507412	3					
ANR	8507485	Parameter	struct display * dp	534:14:17645:17662	8507412	0	True				
ANR	8507486	ParameterType	struct display *		8507412	0					
ANR	8507487	Identifier	dp		8507412	1					
ANR	8507488	CFGEntryNode	ENTRY		8507412		True				
ANR	8507489	CFGExitNode	EXIT		8507412		True				
ANR	8507490	Symbol	dp -> text_ptr		8507412						
ANR	8507491	Symbol	* dp		8507412						
ANR	8507492	Symbol	dp -> num_text		8507412						
ANR	8507493	Symbol	dp -> results		8507412						
ANR	8507494	Symbol	NULL		8507412						
ANR	8507495	Symbol	dp -> output_file		8507412						
ANR	8507496	Symbol	dp -> text_stashed		8507412						
ANR	8507497	Symbol	dp		8507412						
ANR	8507498	Function	display_destroy	557:0:18249:18370							
ANR	8507499	FunctionDef	display_destroy (struct display * dp)		8507498	0					
ANR	8507500	CompoundStatement		559:0:18297:18370	8507498	0					
ANR	8507501	ExpressionStatement	display_clean ( dp )	561:3:18351:18368	8507498	0	True				
ANR	8507502	CallExpression	display_clean ( dp )		8507498	0					
ANR	8507503	Callee	display_clean		8507498	0					
ANR	8507504	Identifier	display_clean		8507498	0					
ANR	8507505	ArgumentList	dp		8507498	1					
ANR	8507506	Argument	dp		8507498	0					
ANR	8507507	Identifier	dp		8507498	0					
ANR	8507508	ReturnType	static void		8507498	1					
ANR	8507509	Identifier	display_destroy		8507498	2					
ANR	8507510	ParameterList	struct display * dp		8507498	3					
ANR	8507511	Parameter	struct display * dp	558:16:18277:18294	8507498	0	True				
ANR	8507512	ParameterType	struct display *		8507498	0					
ANR	8507513	Identifier	dp		8507498	1					
ANR	8507514	CFGEntryNode	ENTRY		8507498		True				
ANR	8507515	CFGExitNode	EXIT		8507498		True				
ANR	8507516	Symbol	dp		8507498						
ANR	8507517	Function	get_dp	564:0:18373:18711							
ANR	8507518	FunctionDef	get_dp (png_structp pp)		8507517	0					
ANR	8507519	CompoundStatement		567:0:18498:18711	8507517	0					
ANR	8507520	IdentifierDeclStatement	struct display * dp = ( struct display * ) png_get_error_ptr ( pp ) ;	568:3:18503:18562	8507517	0	True				
ANR	8507521	IdentifierDecl	* dp = ( struct display * ) png_get_error_ptr ( pp )		8507517	0					
ANR	8507522	IdentifierDeclType	struct display *		8507517	0					
ANR	8507523	Identifier	dp		8507517	1					
ANR	8507524	AssignmentExpression	* dp = ( struct display * ) png_get_error_ptr ( pp )		8507517	2		=			
ANR	8507525	Identifier	dp		8507517	0					
ANR	8507526	CastExpression	( struct display * ) png_get_error_ptr ( pp )		8507517	1					
ANR	8507527	CastTarget	struct display *		8507517	0					
ANR	8507528	CallExpression	png_get_error_ptr ( pp )		8507517	1					
ANR	8507529	Callee	png_get_error_ptr		8507517	0					
ANR	8507530	Identifier	png_get_error_ptr		8507517	0					
ANR	8507531	ArgumentList	pp		8507517	1					
ANR	8507532	Argument	pp		8507517	0					
ANR	8507533	Identifier	pp		8507517	0					
ANR	8507534	IfStatement	if ( dp == NULL )		8507517	1					
ANR	8507535	Condition	dp == NULL	570:7:18572:18581	8507517	0	True				
ANR	8507536	EqualityExpression	dp == NULL		8507517	0		==			
ANR	8507537	Identifier	dp		8507517	0					
ANR	8507538	Identifier	NULL		8507517	1					
ANR	8507539	CompoundStatement		5:3:88:88	8507517	1					
ANR	8507540	ExpressionStatement	"fprintf ( stderr , ""pngcp: internal error (no display)\\n"" )"	572:6:18595:18650	8507517	0	True				
ANR	8507541	CallExpression	"fprintf ( stderr , ""pngcp: internal error (no display)\\n"" )"		8507517	0					
ANR	8507542	Callee	fprintf		8507517	0					
ANR	8507543	Identifier	fprintf		8507517	0					
ANR	8507544	ArgumentList	stderr		8507517	1					
ANR	8507545	Argument	stderr		8507517	0					
ANR	8507546	Identifier	stderr		8507517	0					
ANR	8507547	Argument	"""pngcp: internal error (no display)\\n"""		8507517	1					
ANR	8507548	PrimaryExpression	"""pngcp: internal error (no display)\\n"""		8507517	0					
ANR	8507549	ExpressionStatement	exit ( 99 )	573:6:18658:18666	8507517	1	True				
ANR	8507550	CallExpression	exit ( 99 )		8507517	0					
ANR	8507551	Callee	exit		8507517	0					
ANR	8507552	Identifier	exit		8507517	0					
ANR	8507553	ArgumentList	99		8507517	1					
ANR	8507554	Argument	99		8507517	0					
ANR	8507555	PrimaryExpression	99		8507517	0					
ANR	8507556	ReturnStatement	return dp ;	576:3:18700:18709	8507517	2	True				
ANR	8507557	Identifier	dp		8507517	0					
ANR	8507558	ReturnType	static struct display *		8507517	1					
ANR	8507559	Identifier	get_dp		8507517	2					
ANR	8507560	ParameterList	png_structp pp		8507517	3					
ANR	8507561	Parameter	png_structp pp	565:7:18404:18417	8507517	0	True				
ANR	8507562	ParameterType	png_structp		8507517	0					
ANR	8507563	Identifier	pp		8507517	1					
ANR	8507564	CFGEntryNode	ENTRY		8507517		True				
ANR	8507565	CFGExitNode	EXIT		8507517		True				
ANR	8507566	Symbol	pp		8507517						
ANR	8507567	Symbol	NULL		8507517						
ANR	8507568	Symbol	png_get_error_ptr		8507517						
ANR	8507569	Symbol	dp		8507517						
ANR	8507570	Symbol	stderr		8507517						
ANR	8507571	Function	display_log	588:0:18971:20582							
ANR	8507572	FunctionDef	"display_log (struct display * dp , error_level level , const char * fmt)"		8507571	0					
ANR	8507573	CompoundStatement		593:0:19202:20582	8507571	0					
ANR	8507574	ExpressionStatement	dp -> results |= 1U << level	594:3:19207:19233	8507571	0	True				
ANR	8507575	AssignmentExpression	dp -> results |= 1U << level		8507571	0		|=			
ANR	8507576	PtrMemberAccess	dp -> results		8507571	0					
ANR	8507577	Identifier	dp		8507571	0					
ANR	8507578	Identifier	results		8507571	1					
ANR	8507579	ShiftExpression	1U << level		8507571	1		<<			
ANR	8507580	PrimaryExpression	1U		8507571	0					
ANR	8507581	Identifier	level		8507571	1					
ANR	8507582	IfStatement	if ( level > ( error_level ) ( dp -> options & LEVEL_MASK ) )		8507571	1					
ANR	8507583	Condition	level > ( error_level ) ( dp -> options & LEVEL_MASK )	596:7:19243:19289	8507571	0	True				
ANR	8507584	RelationalExpression	level > ( error_level ) ( dp -> options & LEVEL_MASK )		8507571	0		>			
ANR	8507585	Identifier	level		8507571	0					
ANR	8507586	CastExpression	( error_level ) ( dp -> options & LEVEL_MASK )		8507571	1					
ANR	8507587	CastTarget	error_level		8507571	0					
ANR	8507588	BitAndExpression	dp -> options & LEVEL_MASK		8507571	1		&			
ANR	8507589	PtrMemberAccess	dp -> options		8507571	0					
ANR	8507590	Identifier	dp		8507571	0					
ANR	8507591	Identifier	options		8507571	1					
ANR	8507592	Identifier	LEVEL_MASK		8507571	1					
ANR	8507593	CompoundStatement		7:6:122:132	8507571	1					
ANR	8507594	IdentifierDeclStatement	const char * lp ;	598:6:19303:19317	8507571	0	True				
ANR	8507595	IdentifierDecl	* lp		8507571	0					
ANR	8507596	IdentifierDeclType	const char *		8507571	0					
ANR	8507597	Identifier	lp		8507571	1					
ANR	8507598	IdentifierDeclStatement	va_list ap ;	599:6:19325:19335	8507571	1	True				
ANR	8507599	IdentifierDecl	ap		8507571	0					
ANR	8507600	IdentifierDeclType	va_list		8507571	0					
ANR	8507601	Identifier	ap		8507571	1					
ANR	8507602	SwitchStatement	switch ( level )		8507571	2					
ANR	8507603	Condition	level	601:14:19352:19356	8507571	0	True				
ANR	8507604	Identifier	level		8507571	0					
ANR	8507605	CompoundStatement		10:6:162:162	8507571	1					
ANR	8507606	Label	case INFORMATION :	603:9:19376:19392	8507571	0	True				
ANR	8507607	Identifier	INFORMATION		8507571	0					
ANR	8507608	ExpressionStatement	"lp = ""information"""	603:30:19397:19415	8507571	1	True				
ANR	8507609	AssignmentExpression	"lp = ""information"""		8507571	0		=			
ANR	8507610	Identifier	lp		8507571	0					
ANR	8507611	PrimaryExpression	"""information"""		8507571	1					
ANR	8507612	BreakStatement	break ;	603:50:19417:19422	8507571	2	True				
ANR	8507613	Label	case LIBPNG_WARNING :	604:9:19433:19452	8507571	3	True				
ANR	8507614	Identifier	LIBPNG_WARNING		8507571	0					
ANR	8507615	ExpressionStatement	"lp = ""warning(libpng)"""	604:30:19454:19476	8507571	4	True				
ANR	8507616	AssignmentExpression	"lp = ""warning(libpng)"""		8507571	0		=			
ANR	8507617	Identifier	lp		8507571	0					
ANR	8507618	PrimaryExpression	"""warning(libpng)"""		8507571	1					
ANR	8507619	BreakStatement	break ;	604:54:19478:19483	8507571	5	True				
ANR	8507620	Label	case APP_WARNING :	605:9:19494:19510	8507571	6	True				
ANR	8507621	Identifier	APP_WARNING		8507571	0					
ANR	8507622	ExpressionStatement	"lp = ""warning(pngcp)"""	605:30:19515:19536	8507571	7	True				
ANR	8507623	AssignmentExpression	"lp = ""warning(pngcp)"""		8507571	0		=			
ANR	8507624	Identifier	lp		8507571	0					
ANR	8507625	PrimaryExpression	"""warning(pngcp)"""		8507571	1					
ANR	8507626	BreakStatement	break ;	605:53:19538:19543	8507571	8	True				
ANR	8507627	Label	case APP_FAIL :	606:9:19554:19567	8507571	9	True				
ANR	8507628	Identifier	APP_FAIL		8507571	0					
ANR	8507629	ExpressionStatement	"lp = ""error(continuable)"""	606:30:19575:19600	8507571	10	True				
ANR	8507630	AssignmentExpression	"lp = ""error(continuable)"""		8507571	0		=			
ANR	8507631	Identifier	lp		8507571	0					
ANR	8507632	PrimaryExpression	"""error(continuable)"""		8507571	1					
ANR	8507633	BreakStatement	break ;	606:57:19602:19607	8507571	11	True				
ANR	8507634	Label	case LIBPNG_ERROR :	607:9:19618:19635	8507571	12	True				
ANR	8507635	Identifier	LIBPNG_ERROR		8507571	0					
ANR	8507636	ExpressionStatement	"lp = ""error(libpng)"""	607:30:19639:19659	8507571	13	True				
ANR	8507637	AssignmentExpression	"lp = ""error(libpng)"""		8507571	0		=			
ANR	8507638	Identifier	lp		8507571	0					
ANR	8507639	PrimaryExpression	"""error(libpng)"""		8507571	1					
ANR	8507640	BreakStatement	break ;	607:52:19661:19666	8507571	14	True				
ANR	8507641	Label	case LIBPNG_BUG :	608:9:19677:19692	8507571	15	True				
ANR	8507642	Identifier	LIBPNG_BUG		8507571	0					
ANR	8507643	ExpressionStatement	"lp = ""bug(libpng)"""	608:30:19698:19716	8507571	16	True				
ANR	8507644	AssignmentExpression	"lp = ""bug(libpng)"""		8507571	0		=			
ANR	8507645	Identifier	lp		8507571	0					
ANR	8507646	PrimaryExpression	"""bug(libpng)"""		8507571	1					
ANR	8507647	BreakStatement	break ;	608:50:19718:19723	8507571	17	True				
ANR	8507648	Label	case APP_ERROR :	609:9:19734:19748	8507571	18	True				
ANR	8507649	Identifier	APP_ERROR		8507571	0					
ANR	8507650	ExpressionStatement	"lp = ""error(pngcp)"""	609:30:19755:19774	8507571	19	True				
ANR	8507651	AssignmentExpression	"lp = ""error(pngcp)"""		8507571	0		=			
ANR	8507652	Identifier	lp		8507571	0					
ANR	8507653	PrimaryExpression	"""error(pngcp)"""		8507571	1					
ANR	8507654	BreakStatement	break ;	609:51:19776:19781	8507571	20	True				
ANR	8507655	Label	case USER_ERROR :	610:9:19792:19807	8507571	21	True				
ANR	8507656	Identifier	USER_ERROR		8507571	0					
ANR	8507657	ExpressionStatement	"lp = ""error(user)"""	610:30:19813:19831	8507571	22	True				
ANR	8507658	AssignmentExpression	"lp = ""error(user)"""		8507571	0		=			
ANR	8507659	Identifier	lp		8507571	0					
ANR	8507660	PrimaryExpression	"""error(user)"""		8507571	1					
ANR	8507661	BreakStatement	break ;	610:50:19833:19838	8507571	23	True				
ANR	8507662	Label	case INTERNAL_ERROR :	612:9:19850:19869	8507571	24	True				
ANR	8507663	Identifier	INTERNAL_ERROR		8507571	0					
ANR	8507664	Label	case VERBOSE :	613:9:19928:19940	8507571	25	True				
ANR	8507665	Identifier	VERBOSE		8507571	0					
ANR	8507666	Label	case WARNINGS :	613:23:19942:19955	8507571	26	True				
ANR	8507667	Identifier	WARNINGS		8507571	0					
ANR	8507668	Label	case ERRORS :	613:38:19957:19968	8507571	27	True				
ANR	8507669	Identifier	ERRORS		8507571	0					
ANR	8507670	Label	case QUIET :	613:51:19970:19980	8507571	28	True				
ANR	8507671	Identifier	QUIET		8507571	0					
ANR	8507672	Label	default :	614:9:19991:19998	8507571	29	True				
ANR	8507673	Identifier	default		8507571	0					
ANR	8507674	ExpressionStatement	"lp = ""bug(pngcp)"""	614:30:20012:20029	8507571	30	True				
ANR	8507675	AssignmentExpression	"lp = ""bug(pngcp)"""		8507571	0		=			
ANR	8507676	Identifier	lp		8507571	0					
ANR	8507677	PrimaryExpression	"""bug(pngcp)"""		8507571	1					
ANR	8507678	BreakStatement	break ;	614:49:20031:20036	8507571	31	True				
ANR	8507679	ExpressionStatement	"fprintf ( stderr , ""%s: %s: %s"" , dp -> filename != NULL ? dp -> filename : ""<stdin>"" , lp , dp -> operation )"	617:6:20053:20159	8507571	3	True				
ANR	8507680	CallExpression	"fprintf ( stderr , ""%s: %s: %s"" , dp -> filename != NULL ? dp -> filename : ""<stdin>"" , lp , dp -> operation )"		8507571	0					
ANR	8507681	Callee	fprintf		8507571	0					
ANR	8507682	Identifier	fprintf		8507571	0					
ANR	8507683	ArgumentList	stderr		8507571	1					
ANR	8507684	Argument	stderr		8507571	0					
ANR	8507685	Identifier	stderr		8507571	0					
ANR	8507686	Argument	"""%s: %s: %s"""		8507571	1					
ANR	8507687	PrimaryExpression	"""%s: %s: %s"""		8507571	0					
ANR	8507688	Argument	"dp -> filename != NULL ? dp -> filename : ""<stdin>"""		8507571	2					
ANR	8507689	ConditionalExpression	"dp -> filename != NULL ? dp -> filename : ""<stdin>"""		8507571	0					
ANR	8507690	Condition	dp -> filename != NULL		8507571	0					
ANR	8507691	EqualityExpression	dp -> filename != NULL		8507571	0		!=			
ANR	8507692	PtrMemberAccess	dp -> filename		8507571	0					
ANR	8507693	Identifier	dp		8507571	0					
ANR	8507694	Identifier	filename		8507571	1					
ANR	8507695	Identifier	NULL		8507571	1					
ANR	8507696	PtrMemberAccess	dp -> filename		8507571	1					
ANR	8507697	Identifier	dp		8507571	0					
ANR	8507698	Identifier	filename		8507571	1					
ANR	8507699	PrimaryExpression	"""<stdin>"""		8507571	2					
ANR	8507700	Argument	lp		8507571	3					
ANR	8507701	Identifier	lp		8507571	0					
ANR	8507702	Argument	dp -> operation		8507571	4					
ANR	8507703	PtrMemberAccess	dp -> operation		8507571	0					
ANR	8507704	Identifier	dp		8507571	0					
ANR	8507705	Identifier	operation		8507571	1					
ANR	8507706	ExpressionStatement	"fprintf ( stderr , "": "" )"	620:6:20168:20189	8507571	4	True				
ANR	8507707	CallExpression	"fprintf ( stderr , "": "" )"		8507571	0					
ANR	8507708	Callee	fprintf		8507571	0					
ANR	8507709	Identifier	fprintf		8507571	0					
ANR	8507710	ArgumentList	stderr		8507571	1					
ANR	8507711	Argument	stderr		8507571	0					
ANR	8507712	Identifier	stderr		8507571	0					
ANR	8507713	Argument	""": """		8507571	1					
ANR	8507714	PrimaryExpression	""": """		8507571	0					
ANR	8507715	ExpressionStatement	"va_start ( ap , fmt )"	622:6:20198:20215	8507571	5	True				
ANR	8507716	CallExpression	"va_start ( ap , fmt )"		8507571	0					
ANR	8507717	Callee	va_start		8507571	0					
ANR	8507718	Identifier	va_start		8507571	0					
ANR	8507719	ArgumentList	ap		8507571	1					
ANR	8507720	Argument	ap		8507571	0					
ANR	8507721	Identifier	ap		8507571	0					
ANR	8507722	Argument	fmt		8507571	1					
ANR	8507723	Identifier	fmt		8507571	0					
ANR	8507724	ExpressionStatement	"vfprintf ( stderr , fmt , ap )"	623:6:20223:20248	8507571	6	True				
ANR	8507725	CallExpression	"vfprintf ( stderr , fmt , ap )"		8507571	0					
ANR	8507726	Callee	vfprintf		8507571	0					
ANR	8507727	Identifier	vfprintf		8507571	0					
ANR	8507728	ArgumentList	stderr		8507571	1					
ANR	8507729	Argument	stderr		8507571	0					
ANR	8507730	Identifier	stderr		8507571	0					
ANR	8507731	Argument	fmt		8507571	1					
ANR	8507732	Identifier	fmt		8507571	0					
ANR	8507733	Argument	ap		8507571	2					
ANR	8507734	Identifier	ap		8507571	0					
ANR	8507735	ExpressionStatement	va_end ( ap )	624:6:20256:20266	8507571	7	True				
ANR	8507736	CallExpression	va_end ( ap )		8507571	0					
ANR	8507737	Callee	va_end		8507571	0					
ANR	8507738	Identifier	va_end		8507571	0					
ANR	8507739	ArgumentList	ap		8507571	1					
ANR	8507740	Argument	ap		8507571	0					
ANR	8507741	Identifier	ap		8507571	0					
ANR	8507742	ExpressionStatement	"fputc ( '\\n' , stderr )"	626:6:20275:20294	8507571	8	True				
ANR	8507743	CallExpression	"fputc ( '\\n' , stderr )"		8507571	0					
ANR	8507744	Callee	fputc		8507571	0					
ANR	8507745	Identifier	fputc		8507571	0					
ANR	8507746	ArgumentList	'\\n'		8507571	1					
ANR	8507747	Argument	'\\n'		8507571	0					
ANR	8507748	PrimaryExpression	'\\n'		8507571	0					
ANR	8507749	Argument	stderr		8507571	1					
ANR	8507750	Identifier	stderr		8507571	0					
ANR	8507751	IfStatement	if ( level > APP_FAIL || ( level > ERRORS && ! ( dp -> options & CONTINUE ) ) )		8507571	2					
ANR	8507752	Condition	level > APP_FAIL || ( level > ERRORS && ! ( dp -> options & CONTINUE ) )	631:7:20409:20473	8507571	0	True				
ANR	8507753	OrExpression	level > APP_FAIL || ( level > ERRORS && ! ( dp -> options & CONTINUE ) )		8507571	0		||			
ANR	8507754	RelationalExpression	level > APP_FAIL		8507571	0		>			
ANR	8507755	Identifier	level		8507571	0					
ANR	8507756	Identifier	APP_FAIL		8507571	1					
ANR	8507757	AndExpression	level > ERRORS && ! ( dp -> options & CONTINUE )		8507571	1		&&			
ANR	8507758	RelationalExpression	level > ERRORS		8507571	0		>			
ANR	8507759	Identifier	level		8507571	0					
ANR	8507760	Identifier	ERRORS		8507571	1					
ANR	8507761	UnaryOperationExpression	! ( dp -> options & CONTINUE )		8507571	1					
ANR	8507762	UnaryOperator	!		8507571	0					
ANR	8507763	BitAndExpression	dp -> options & CONTINUE		8507571	1		&			
ANR	8507764	PtrMemberAccess	dp -> options		8507571	0					
ANR	8507765	Identifier	dp		8507571	0					
ANR	8507766	Identifier	options		8507571	1					
ANR	8507767	Identifier	CONTINUE		8507571	1					
ANR	8507768	CompoundStatement		40:3:1276:1276	8507571	1					
ANR	8507769	IfStatement	if ( dp -> errset )		8507571	0					
ANR	8507770	Condition	dp -> errset	633:10:20491:20500	8507571	0	True				
ANR	8507771	PtrMemberAccess	dp -> errset		8507571	0					
ANR	8507772	Identifier	dp		8507571	0					
ANR	8507773	Identifier	errset		8507571	1					
ANR	8507774	ExpressionStatement	"longjmp ( dp -> error_return , level )"	634:9:20512:20544	8507571	1	True				
ANR	8507775	CallExpression	"longjmp ( dp -> error_return , level )"		8507571	0					
ANR	8507776	Callee	longjmp		8507571	0					
ANR	8507777	Identifier	longjmp		8507571	0					
ANR	8507778	ArgumentList	dp -> error_return		8507571	1					
ANR	8507779	Argument	dp -> error_return		8507571	0					
ANR	8507780	PtrMemberAccess	dp -> error_return		8507571	0					
ANR	8507781	Identifier	dp		8507571	0					
ANR	8507782	Identifier	error_return		8507571	1					
ANR	8507783	Argument	level		8507571	1					
ANR	8507784	Identifier	level		8507571	0					
ANR	8507785	ElseStatement	else		8507571	0					
ANR	8507786	ExpressionStatement	exit ( 99 )	637:9:20567:20575	8507571	0	True				
ANR	8507787	CallExpression	exit ( 99 )		8507571	0					
ANR	8507788	Callee	exit		8507571	0					
ANR	8507789	Identifier	exit		8507571	0					
ANR	8507790	ArgumentList	99		8507571	1					
ANR	8507791	Argument	99		8507571	0					
ANR	8507792	PrimaryExpression	99		8507571	0					
ANR	8507793	ReturnType	static void VGATTR		8507571	1					
ANR	8507794	Identifier	display_log		8507571	2					
ANR	8507795	ParameterList	"struct display * dp , error_level level , const char * fmt"		8507571	3					
ANR	8507796	Parameter	struct display * dp	589:12:19002:19019	8507571	0	True				
ANR	8507797	ParameterType	struct display *		8507571	0					
ANR	8507798	Identifier	dp		8507571	1					
ANR	8507799	Parameter	error_level level	589:32:19022:19038	8507571	1	True				
ANR	8507800	ParameterType	error_level		8507571	0					
ANR	8507801	Identifier	level		8507571	1					
ANR	8507802	Parameter	const char * fmt	589:51:19041:19055	8507571	2	True				
ANR	8507803	ParameterType	const char *		8507571	0					
ANR	8507804	Identifier	fmt		8507571	1					
ANR	8507805	CFGEntryNode	ENTRY		8507571		True				
ANR	8507806	CFGExitNode	EXIT		8507571		True				
ANR	8507807	Symbol	APP_FAIL		8507571						
ANR	8507808	Symbol	NULL		8507571						
ANR	8507809	Symbol	ERRORS		8507571						
ANR	8507810	Symbol	lp		8507571						
ANR	8507811	Symbol	level		8507571						
ANR	8507812	Symbol	LEVEL_MASK		8507571						
ANR	8507813	Symbol	dp -> options		8507571						
ANR	8507814	Symbol	dp -> error_return		8507571						
ANR	8507815	Symbol	dp -> operation		8507571						
ANR	8507816	Symbol	dp -> filename		8507571						
ANR	8507817	Symbol	dp		8507571						
ANR	8507818	Symbol	fmt		8507571						
ANR	8507819	Symbol	stderr		8507571						
ANR	8507820	Symbol	ap		8507571						
ANR	8507821	Symbol	CONTINUE		8507571						
ANR	8507822	Symbol	* dp		8507571						
ANR	8507823	Symbol	dp -> results		8507571						
ANR	8507824	Symbol	dp -> errset		8507571						
ANR	8507825	Function	text_stash	642:0:20642:22209							
ANR	8507826	FunctionDef	text_stash (struct display * dp)		8507825	0					
ANR	8507827	CompoundStatement		644:0:20685:22209	8507825	0					
ANR	8507828	IdentifierDeclStatement	png_textp chunks = NULL ;	663:3:21731:21754	8507825	0	True				
ANR	8507829	IdentifierDecl	chunks = NULL		8507825	0					
ANR	8507830	IdentifierDeclType	png_textp		8507825	0					
ANR	8507831	Identifier	chunks		8507825	1					
ANR	8507832	AssignmentExpression	chunks = NULL		8507825	2		=			
ANR	8507833	Identifier	NULL		8507825	0					
ANR	8507834	Identifier	NULL		8507825	1					
ANR	8507835	ExpressionStatement	"dp -> num_text = png_get_text ( dp -> write_pp , dp -> ip , & chunks , NULL )"	665:3:21760:21824	8507825	1	True				
ANR	8507836	AssignmentExpression	"dp -> num_text = png_get_text ( dp -> write_pp , dp -> ip , & chunks , NULL )"		8507825	0		=			
ANR	8507837	PtrMemberAccess	dp -> num_text		8507825	0					
ANR	8507838	Identifier	dp		8507825	0					
ANR	8507839	Identifier	num_text		8507825	1					
ANR	8507840	CallExpression	"png_get_text ( dp -> write_pp , dp -> ip , & chunks , NULL )"		8507825	1					
ANR	8507841	Callee	png_get_text		8507825	0					
ANR	8507842	Identifier	png_get_text		8507825	0					
ANR	8507843	ArgumentList	dp -> write_pp		8507825	1					
ANR	8507844	Argument	dp -> write_pp		8507825	0					
ANR	8507845	PtrMemberAccess	dp -> write_pp		8507825	0					
ANR	8507846	Identifier	dp		8507825	0					
ANR	8507847	Identifier	write_pp		8507825	1					
ANR	8507848	Argument	dp -> ip		8507825	1					
ANR	8507849	PtrMemberAccess	dp -> ip		8507825	0					
ANR	8507850	Identifier	dp		8507825	0					
ANR	8507851	Identifier	ip		8507825	1					
ANR	8507852	Argument	& chunks		8507825	2					
ANR	8507853	UnaryOperationExpression	& chunks		8507825	0					
ANR	8507854	UnaryOperator	&		8507825	0					
ANR	8507855	Identifier	chunks		8507825	1					
ANR	8507856	Argument	NULL		8507825	3					
ANR	8507857	Identifier	NULL		8507825	0					
ANR	8507858	IfStatement	if ( dp -> num_text > 0 )		8507825	2					
ANR	8507859	Condition	dp -> num_text > 0	667:7:21834:21849	8507825	0	True				
ANR	8507860	RelationalExpression	dp -> num_text > 0		8507825	0		>			
ANR	8507861	PtrMemberAccess	dp -> num_text		8507825	0					
ANR	8507862	Identifier	dp		8507825	0					
ANR	8507863	Identifier	num_text		8507825	1					
ANR	8507864	PrimaryExpression	0		8507825	1					
ANR	8507865	CompoundStatement		25:3:1169:1169	8507825	1					
ANR	8507866	ExpressionStatement	"dp -> text_ptr = voidcast ( png_textp , malloc ( dp -> num_text * sizeof * chunks ) )"	669:6:21863:21936	8507825	0	True				
ANR	8507867	AssignmentExpression	"dp -> text_ptr = voidcast ( png_textp , malloc ( dp -> num_text * sizeof * chunks ) )"		8507825	0		=			
ANR	8507868	PtrMemberAccess	dp -> text_ptr		8507825	0					
ANR	8507869	Identifier	dp		8507825	0					
ANR	8507870	Identifier	text_ptr		8507825	1					
ANR	8507871	CallExpression	"voidcast ( png_textp , malloc ( dp -> num_text * sizeof * chunks ) )"		8507825	1					
ANR	8507872	Callee	voidcast		8507825	0					
ANR	8507873	Identifier	voidcast		8507825	0					
ANR	8507874	ArgumentList	png_textp		8507825	1					
ANR	8507875	Argument	png_textp		8507825	0					
ANR	8507876	Identifier	png_textp		8507825	0					
ANR	8507877	Argument	malloc ( dp -> num_text * sizeof * chunks )		8507825	1					
ANR	8507878	CallExpression	malloc ( dp -> num_text * sizeof * chunks )		8507825	0					
ANR	8507879	Callee	malloc		8507825	0					
ANR	8507880	Identifier	malloc		8507825	0					
ANR	8507881	ArgumentList	dp -> num_text * sizeof * chunks		8507825	1					
ANR	8507882	Argument	dp -> num_text * sizeof * chunks		8507825	0					
ANR	8507883	MultiplicativeExpression	dp -> num_text * sizeof * chunks		8507825	0		*			
ANR	8507884	PtrMemberAccess	dp -> num_text		8507825	0					
ANR	8507885	Identifier	dp		8507825	0					
ANR	8507886	Identifier	num_text		8507825	1					
ANR	8507887	SizeofExpression	sizeof * chunks		8507825	1					
ANR	8507888	Sizeof	sizeof		8507825	0					
ANR	8507889	UnaryOperationExpression	* chunks		8507825	1					
ANR	8507890	UnaryOperator	*		8507825	0					
ANR	8507891	Identifier	chunks		8507825	1					
ANR	8507892	IfStatement	if ( dp -> text_ptr == NULL )		8507825	1					
ANR	8507893	Condition	dp -> text_ptr == NULL	671:10:21949:21968	8507825	0	True				
ANR	8507894	EqualityExpression	dp -> text_ptr == NULL		8507825	0		==			
ANR	8507895	PtrMemberAccess	dp -> text_ptr		8507825	0					
ANR	8507896	Identifier	dp		8507825	0					
ANR	8507897	Identifier	text_ptr		8507825	1					
ANR	8507898	Identifier	NULL		8507825	1					
ANR	8507899	ExpressionStatement	"display_log ( dp , APP_ERROR , ""text chunks: stash malloc failed"" )"	672:9:21980:22042	8507825	1	True				
ANR	8507900	CallExpression	"display_log ( dp , APP_ERROR , ""text chunks: stash malloc failed"" )"		8507825	0					
ANR	8507901	Callee	display_log		8507825	0					
ANR	8507902	Identifier	display_log		8507825	0					
ANR	8507903	ArgumentList	dp		8507825	1					
ANR	8507904	Argument	dp		8507825	0					
ANR	8507905	Identifier	dp		8507825	0					
ANR	8507906	Argument	APP_ERROR		8507825	1					
ANR	8507907	Identifier	APP_ERROR		8507825	0					
ANR	8507908	Argument	"""text chunks: stash malloc failed"""		8507825	2					
ANR	8507909	PrimaryExpression	"""text chunks: stash malloc failed"""		8507825	0					
ANR	8507910	ElseStatement	else		8507825	0					
ANR	8507911	ExpressionStatement	"memcpy ( dp -> text_ptr , chunks , dp -> num_text * sizeof * chunks )"	675:9:22065:22124	8507825	0	True				
ANR	8507912	CallExpression	"memcpy ( dp -> text_ptr , chunks , dp -> num_text * sizeof * chunks )"		8507825	0					
ANR	8507913	Callee	memcpy		8507825	0					
ANR	8507914	Identifier	memcpy		8507825	0					
ANR	8507915	ArgumentList	dp -> text_ptr		8507825	1					
ANR	8507916	Argument	dp -> text_ptr		8507825	0					
ANR	8507917	PtrMemberAccess	dp -> text_ptr		8507825	0					
ANR	8507918	Identifier	dp		8507825	0					
ANR	8507919	Identifier	text_ptr		8507825	1					
ANR	8507920	Argument	chunks		8507825	1					
ANR	8507921	Identifier	chunks		8507825	0					
ANR	8507922	Argument	dp -> num_text * sizeof * chunks		8507825	2					
ANR	8507923	MultiplicativeExpression	dp -> num_text * sizeof * chunks		8507825	0		*			
ANR	8507924	PtrMemberAccess	dp -> num_text		8507825	0					
ANR	8507925	Identifier	dp		8507825	0					
ANR	8507926	Identifier	num_text		8507825	1					
ANR	8507927	SizeofExpression	sizeof * chunks		8507825	1					
ANR	8507928	Sizeof	sizeof		8507825	0					
ANR	8507929	UnaryOperationExpression	* chunks		8507825	1					
ANR	8507930	UnaryOperator	*		8507825	0					
ANR	8507931	Identifier	chunks		8507825	1					
ANR	8507932	ExpressionStatement	dp -> text_stashed = 1	678:3:22135:22155	8507825	3	True				
ANR	8507933	AssignmentExpression	dp -> text_stashed = 1		8507825	0		=			
ANR	8507934	PtrMemberAccess	dp -> text_stashed		8507825	0					
ANR	8507935	Identifier	dp		8507825	0					
ANR	8507936	Identifier	text_stashed		8507825	1					
ANR	8507937	PrimaryExpression	1		8507825	1					
ANR	8507938	ReturnType	static void		8507825	1					
ANR	8507939	Identifier	text_stash		8507825	2					
ANR	8507940	ParameterList	struct display * dp		8507825	3					
ANR	8507941	Parameter	struct display * dp	643:11:20665:20682	8507825	0	True				
ANR	8507942	ParameterType	struct display *		8507825	0					
ANR	8507943	Identifier	dp		8507825	1					
ANR	8507944	CFGEntryNode	ENTRY		8507825		True				
ANR	8507945	CFGExitNode	EXIT		8507825		True				
ANR	8507946	Symbol	dp -> num_text		8507825						
ANR	8507947	Symbol	malloc		8507825						
ANR	8507948	Symbol	NULL		8507825						
ANR	8507949	Symbol	dp -> ip		8507825						
ANR	8507950	Symbol	* chunks		8507825						
ANR	8507951	Symbol	chunks		8507825						
ANR	8507952	Symbol	voidcast		8507825						
ANR	8507953	Symbol	dp -> text_stashed		8507825						
ANR	8507954	Symbol	dp		8507825						
ANR	8507955	Symbol	png_get_text		8507825						
ANR	8507956	Symbol	png_textp		8507825						
ANR	8507957	Symbol	dp -> text_ptr		8507825						
ANR	8507958	Symbol	* dp		8507825						
ANR	8507959	Symbol	& chunks		8507825						
ANR	8507960	Symbol	APP_ERROR		8507825						
ANR	8507961	Symbol	dp -> write_pp		8507825						
ANR	8507962	Function	text_restore	683:0:22274:22467							
ANR	8507963	FunctionDef	text_restore (struct display * dp)		8507962	0					
ANR	8507964	CompoundStatement		685:0:22319:22467	8507962	0					
ANR	8507965	IfStatement	if ( dp -> text_ptr != NULL )		8507962	0					
ANR	8507966	Condition	dp -> text_ptr != NULL	687:7:22375:22394	8507962	0	True				
ANR	8507967	EqualityExpression	dp -> text_ptr != NULL		8507962	0		!=			
ANR	8507968	PtrMemberAccess	dp -> text_ptr		8507962	0					
ANR	8507969	Identifier	dp		8507962	0					
ANR	8507970	Identifier	text_ptr		8507962	1					
ANR	8507971	Identifier	NULL		8507962	1					
ANR	8507972	ExpressionStatement	"png_set_text ( dp -> write_pp , dp -> ip , dp -> text_ptr , dp -> num_text )"	688:6:22403:22465	8507962	1	True				
ANR	8507973	CallExpression	"png_set_text ( dp -> write_pp , dp -> ip , dp -> text_ptr , dp -> num_text )"		8507962	0					
ANR	8507974	Callee	png_set_text		8507962	0					
ANR	8507975	Identifier	png_set_text		8507962	0					
ANR	8507976	ArgumentList	dp -> write_pp		8507962	1					
ANR	8507977	Argument	dp -> write_pp		8507962	0					
ANR	8507978	PtrMemberAccess	dp -> write_pp		8507962	0					
ANR	8507979	Identifier	dp		8507962	0					
ANR	8507980	Identifier	write_pp		8507962	1					
ANR	8507981	Argument	dp -> ip		8507962	1					
ANR	8507982	PtrMemberAccess	dp -> ip		8507962	0					
ANR	8507983	Identifier	dp		8507962	0					
ANR	8507984	Identifier	ip		8507962	1					
ANR	8507985	Argument	dp -> text_ptr		8507962	2					
ANR	8507986	PtrMemberAccess	dp -> text_ptr		8507962	0					
ANR	8507987	Identifier	dp		8507962	0					
ANR	8507988	Identifier	text_ptr		8507962	1					
ANR	8507989	Argument	dp -> num_text		8507962	3					
ANR	8507990	PtrMemberAccess	dp -> num_text		8507962	0					
ANR	8507991	Identifier	dp		8507962	0					
ANR	8507992	Identifier	num_text		8507962	1					
ANR	8507993	ReturnType	static void		8507962	1					
ANR	8507994	Identifier	text_restore		8507962	2					
ANR	8507995	ParameterList	struct display * dp		8507962	3					
ANR	8507996	Parameter	struct display * dp	684:13:22299:22316	8507962	0	True				
ANR	8507997	ParameterType	struct display *		8507962	0					
ANR	8507998	Identifier	dp		8507962	1					
ANR	8507999	CFGEntryNode	ENTRY		8507962		True				
ANR	8508000	CFGExitNode	EXIT		8507962		True				
ANR	8508001	Symbol	dp -> text_ptr		8507962						
ANR	8508002	Symbol	* dp		8507962						
ANR	8508003	Symbol	dp -> num_text		8507962						
ANR	8508004	Symbol	NULL		8507962						
ANR	8508005	Symbol	dp -> ip		8507962						
ANR	8508006	Symbol	dp		8507962						
ANR	8508007	Symbol	dp -> write_pp		8507962						
ANR	8508008	Function	option_index	711:0:22968:23694							
ANR	8508009	FunctionDef	"option_index (struct display * dp , const char * opt , size_t len)"		8508008	0					
ANR	8508010	CompoundStatement		717:0:23242:23694	8508008	0					
ANR	8508011	IdentifierDeclStatement	png_byte j ;	718:3:23247:23257	8508008	0	True				
ANR	8508012	IdentifierDecl	j		8508008	0					
ANR	8508013	IdentifierDeclType	png_byte		8508008	0					
ANR	8508014	Identifier	j		8508008	1					
ANR	8508015	ForStatement	for ( j = 0 ; j < option_count ; ++ j )		8508008	1					
ANR	8508016	ForInit	j = 0 ;	720:8:23268:23271	8508008	0	True				
ANR	8508017	AssignmentExpression	j = 0		8508008	0		=			
ANR	8508018	Identifier	j		8508008	0					
ANR	8508019	PrimaryExpression	0		8508008	1					
ANR	8508020	Condition	j < option_count	720:13:23273:23286	8508008	1	True				
ANR	8508021	RelationalExpression	j < option_count		8508008	0		<			
ANR	8508022	Identifier	j		8508008	0					
ANR	8508023	Identifier	option_count		8508008	1					
ANR	8508024	UnaryExpression	++ j	720:29:23289:23291	8508008	2	True				
ANR	8508025	IncDec	++		8508008	0					
ANR	8508026	Identifier	j		8508008	1					
ANR	8508027	IfStatement	"if ( strncmp ( options [ j ] . name , opt , len ) == 0 && options [ j ] . name [ len ] == 0 )"		8508008	3					
ANR	8508028	Condition	"strncmp ( options [ j ] . name , opt , len ) == 0 && options [ j ] . name [ len ] == 0"	721:10:23304:23371	8508008	0	True				
ANR	8508029	AndExpression	"strncmp ( options [ j ] . name , opt , len ) == 0 && options [ j ] . name [ len ] == 0"		8508008	0		&&			
ANR	8508030	EqualityExpression	"strncmp ( options [ j ] . name , opt , len ) == 0"		8508008	0		==			
ANR	8508031	CallExpression	"strncmp ( options [ j ] . name , opt , len )"		8508008	0					
ANR	8508032	Callee	strncmp		8508008	0					
ANR	8508033	Identifier	strncmp		8508008	0					
ANR	8508034	ArgumentList	options [ j ] . name		8508008	1					
ANR	8508035	Argument	options [ j ] . name		8508008	0					
ANR	8508036	MemberAccess	options [ j ] . name		8508008	0					
ANR	8508037	ArrayIndexing	options [ j ]		8508008	0					
ANR	8508038	Identifier	options		8508008	0					
ANR	8508039	Identifier	j		8508008	1					
ANR	8508040	Identifier	name		8508008	1					
ANR	8508041	Argument	opt		8508008	1					
ANR	8508042	Identifier	opt		8508008	0					
ANR	8508043	Argument	len		8508008	2					
ANR	8508044	Identifier	len		8508008	0					
ANR	8508045	PrimaryExpression	0		8508008	1					
ANR	8508046	EqualityExpression	options [ j ] . name [ len ] == 0		8508008	1		==			
ANR	8508047	ArrayIndexing	options [ j ] . name [ len ]		8508008	0					
ANR	8508048	MemberAccess	options [ j ] . name		8508008	0					
ANR	8508049	ArrayIndexing	options [ j ]		8508008	0					
ANR	8508050	Identifier	options		8508008	0					
ANR	8508051	Identifier	j		8508008	1					
ANR	8508052	Identifier	name		8508008	1					
ANR	8508053	Identifier	len		8508008	1					
ANR	8508054	PrimaryExpression	0		8508008	1					
ANR	8508055	ReturnStatement	return j ;	722:9:23383:23391	8508008	1	True				
ANR	8508056	Identifier	j		8508008	0					
ANR	8508057	ExpressionStatement	"display_log ( dp , dp -> errset ? INTERNAL_ERROR : USER_ERROR , ""%.*s: unknown option"" , ( int ) len , opt )"	727:3:23549:23662	8508008	2	True				
ANR	8508058	CallExpression	"display_log ( dp , dp -> errset ? INTERNAL_ERROR : USER_ERROR , ""%.*s: unknown option"" , ( int ) len , opt )"		8508008	0					
ANR	8508059	Callee	display_log		8508008	0					
ANR	8508060	Identifier	display_log		8508008	0					
ANR	8508061	ArgumentList	dp		8508008	1					
ANR	8508062	Argument	dp		8508008	0					
ANR	8508063	Identifier	dp		8508008	0					
ANR	8508064	Argument	dp -> errset ? INTERNAL_ERROR : USER_ERROR		8508008	1					
ANR	8508065	ConditionalExpression	dp -> errset ? INTERNAL_ERROR : USER_ERROR		8508008	0					
ANR	8508066	Condition	dp -> errset		8508008	0					
ANR	8508067	PtrMemberAccess	dp -> errset		8508008	0					
ANR	8508068	Identifier	dp		8508008	0					
ANR	8508069	Identifier	errset		8508008	1					
ANR	8508070	Identifier	INTERNAL_ERROR		8508008	1					
ANR	8508071	Identifier	USER_ERROR		8508008	2					
ANR	8508072	Argument	"""%.*s: unknown option"""		8508008	2					
ANR	8508073	PrimaryExpression	"""%.*s: unknown option"""		8508008	0					
ANR	8508074	Argument	( int ) len		8508008	3					
ANR	8508075	CastExpression	( int ) len		8508008	0					
ANR	8508076	CastTarget	int		8508008	0					
ANR	8508077	Identifier	len		8508008	1					
ANR	8508078	Argument	opt		8508008	4					
ANR	8508079	Identifier	opt		8508008	0					
ANR	8508080	ExpressionStatement	abort ( )	729:3:23667:23674	8508008	3	True				
ANR	8508081	CallExpression	abort ( )		8508008	0					
ANR	8508082	Callee	abort		8508008	0					
ANR	8508083	Identifier	abort		8508008	0					
ANR	8508084	ArgumentList			8508008	1					
ANR	8508085	ReturnType	static png_byte		8508008	1					
ANR	8508086	Identifier	option_index		8508008	2					
ANR	8508087	ParameterList	"struct display * dp , const char * opt , size_t len"		8508008	3					
ANR	8508088	Parameter	struct display * dp	712:13:22997:23014	8508008	0	True				
ANR	8508089	ParameterType	struct display *		8508008	0					
ANR	8508090	Identifier	dp		8508008	1					
ANR	8508091	Parameter	const char * opt	712:33:23017:23031	8508008	1	True				
ANR	8508092	ParameterType	const char *		8508008	0					
ANR	8508093	Identifier	opt		8508008	1					
ANR	8508094	Parameter	size_t len	712:50:23034:23043	8508008	2	True				
ANR	8508095	ParameterType	size_t		8508008	0					
ANR	8508096	Identifier	len		8508008	1					
ANR	8508097	CFGEntryNode	ENTRY		8508008		True				
ANR	8508098	CFGExitNode	EXIT		8508008		True				
ANR	8508099	Symbol	* options [ j ] . name		8508008						
ANR	8508100	Symbol	* * j		8508008						
ANR	8508101	Symbol	option_count		8508008						
ANR	8508102	Symbol	USER_ERROR		8508008						
ANR	8508103	Symbol	INTERNAL_ERROR		8508008						
ANR	8508104	Symbol	j		8508008						
ANR	8508105	Symbol	* * options		8508008						
ANR	8508106	Symbol	dp		8508008						
ANR	8508107	Symbol	* options		8508008						
ANR	8508108	Symbol	strncmp		8508008						
ANR	8508109	Symbol	* dp		8508008						
ANR	8508110	Symbol	opt		8508008						
ANR	8508111	Symbol	len		8508008						
ANR	8508112	Symbol	* j		8508008						
ANR	8508113	Symbol	dp -> errset		8508008						
ANR	8508114	Symbol	options		8508008						
ANR	8508115	Symbol	options [ j ] . name		8508008						
ANR	8508116	Symbol	* len		8508008						
ANR	8508117	Function	get_option	735:0:23814:24084							
ANR	8508118	FunctionDef	"get_option (struct display * dp , const char * opt , int * value)"		8508117	0					
ANR	8508119	CompoundStatement		737:0:23885:24084	8508117	0					
ANR	8508120	IdentifierDeclStatement	"const png_byte i = option_index ( dp , opt , strlen ( opt ) ) ;"	738:3:23890:23943	8508117	0	True				
ANR	8508121	IdentifierDecl	"i = option_index ( dp , opt , strlen ( opt ) )"		8508117	0					
ANR	8508122	IdentifierDeclType	const png_byte		8508117	0					
ANR	8508123	Identifier	i		8508117	1					
ANR	8508124	AssignmentExpression	"i = option_index ( dp , opt , strlen ( opt ) )"		8508117	2		=			
ANR	8508125	Identifier	i		8508117	0					
ANR	8508126	CallExpression	"option_index ( dp , opt , strlen ( opt ) )"		8508117	1					
ANR	8508127	Callee	option_index		8508117	0					
ANR	8508128	Identifier	option_index		8508117	0					
ANR	8508129	ArgumentList	dp		8508117	1					
ANR	8508130	Argument	dp		8508117	0					
ANR	8508131	Identifier	dp		8508117	0					
ANR	8508132	Argument	opt		8508117	1					
ANR	8508133	Identifier	opt		8508117	0					
ANR	8508134	Argument	strlen ( opt )		8508117	2					
ANR	8508135	CallExpression	strlen ( opt )		8508117	0					
ANR	8508136	Callee	strlen		8508117	0					
ANR	8508137	Identifier	strlen		8508117	0					
ANR	8508138	ArgumentList	opt		8508117	1					
ANR	8508139	Argument	opt		8508117	0					
ANR	8508140	Identifier	opt		8508117	0					
ANR	8508141	IfStatement	if ( dp -> entry [ i ] )		8508117	1					
ANR	8508142	Condition	dp -> entry [ i ]	740:7:23953:23964	8508117	0	True				
ANR	8508143	ArrayIndexing	dp -> entry [ i ]		8508117	0					
ANR	8508144	PtrMemberAccess	dp -> entry		8508117	0					
ANR	8508145	Identifier	dp		8508117	0					
ANR	8508146	Identifier	entry		8508117	1					
ANR	8508147	Identifier	i		8508117	1					
ANR	8508148	CompoundStatement		5:3:121:121	8508117	1					
ANR	8508149	ExpressionStatement	* value = dp -> value [ i ]	742:6:24015:24036	8508117	0	True				
ANR	8508150	AssignmentExpression	* value = dp -> value [ i ]		8508117	0		=			
ANR	8508151	UnaryOperationExpression	* value		8508117	0					
ANR	8508152	UnaryOperator	*		8508117	0					
ANR	8508153	Identifier	value		8508117	1					
ANR	8508154	ArrayIndexing	dp -> value [ i ]		8508117	1					
ANR	8508155	PtrMemberAccess	dp -> value		8508117	0					
ANR	8508156	Identifier	dp		8508117	0					
ANR	8508157	Identifier	value		8508117	1					
ANR	8508158	Identifier	i		8508117	1					
ANR	8508159	ReturnStatement	return 1 ;	743:6:24044:24052	8508117	1	True				
ANR	8508160	PrimaryExpression	1		8508117	0					
ANR	8508161	ElseStatement	else		8508117	0					
ANR	8508162	ReturnStatement	return 0 ;	747:6:24074:24082	8508117	0	True				
ANR	8508163	PrimaryExpression	0		8508117	0					
ANR	8508164	ReturnType	static int		8508117	1					
ANR	8508165	Identifier	get_option		8508117	2					
ANR	8508166	ParameterList	"struct display * dp , const char * opt , int * value"		8508117	3					
ANR	8508167	Parameter	struct display * dp	736:11:23836:23853	8508117	0	True				
ANR	8508168	ParameterType	struct display *		8508117	0					
ANR	8508169	Identifier	dp		8508117	1					
ANR	8508170	Parameter	const char * opt	736:31:23856:23870	8508117	1	True				
ANR	8508171	ParameterType	const char *		8508117	0					
ANR	8508172	Identifier	opt		8508117	1					
ANR	8508173	Parameter	int * value	736:48:23873:23882	8508117	2	True				
ANR	8508174	ParameterType	int *		8508117	0					
ANR	8508175	Identifier	value		8508117	1					
ANR	8508176	CFGEntryNode	ENTRY		8508117		True				
ANR	8508177	CFGExitNode	EXIT		8508117		True				
ANR	8508178	Symbol	i		8508117						
ANR	8508179	Symbol	dp		8508117						
ANR	8508180	Symbol	dp -> entry		8508117						
ANR	8508181	Symbol	* dp -> entry		8508117						
ANR	8508182	Symbol	strlen		8508117						
ANR	8508183	Symbol	* dp		8508117						
ANR	8508184	Symbol	opt		8508117						
ANR	8508185	Symbol	dp -> value		8508117						
ANR	8508186	Symbol	* i		8508117						
ANR	8508187	Symbol	* value		8508117						
ANR	8508188	Symbol	* dp -> value		8508117						
ANR	8508189	Symbol	* * dp		8508117						
ANR	8508190	Symbol	value		8508117						
ANR	8508191	Symbol	option_index		8508117						
ANR	8508192	Function	set_opt_string_	750:0:24087:24752							
ANR	8508193	FunctionDef	"set_opt_string_ (struct display * dp , unsigned int sp , png_byte opt , const char * entry_name)"		8508192	0					
ANR	8508194	CompoundStatement		754:0:24251:24752	8508192	0					
ANR	8508195	IdentifierDeclStatement	"int offset , add ;"	755:3:24256:24271	8508192	0	True				
ANR	8508196	IdentifierDecl	offset		8508192	0					
ANR	8508197	IdentifierDeclType	int		8508192	0					
ANR	8508198	Identifier	offset		8508192	1					
ANR	8508199	IdentifierDecl	add		8508192	1					
ANR	8508200	IdentifierDeclType	int		8508192	0					
ANR	8508201	Identifier	add		8508192	1					
ANR	8508202	IfStatement	if ( sp > 0 )		8508192	1					
ANR	8508203	Condition	sp > 0	757:7:24281:24286	8508192	0	True				
ANR	8508204	RelationalExpression	sp > 0		8508192	0		>			
ANR	8508205	Identifier	sp		8508192	0					
ANR	8508206	PrimaryExpression	0		8508192	1					
ANR	8508207	ExpressionStatement	offset = dp -> stack [ sp - 1 ] . opt_string_end	758:6:24295:24334	8508192	1	True				
ANR	8508208	AssignmentExpression	offset = dp -> stack [ sp - 1 ] . opt_string_end		8508192	0		=			
ANR	8508209	Identifier	offset		8508192	0					
ANR	8508210	MemberAccess	dp -> stack [ sp - 1 ] . opt_string_end		8508192	1					
ANR	8508211	ArrayIndexing	dp -> stack [ sp - 1 ]		8508192	0					
ANR	8508212	PtrMemberAccess	dp -> stack		8508192	0					
ANR	8508213	Identifier	dp		8508192	0					
ANR	8508214	Identifier	stack		8508192	1					
ANR	8508215	AdditiveExpression	sp - 1		8508192	1		-			
ANR	8508216	Identifier	sp		8508192	0					
ANR	8508217	PrimaryExpression	1		8508192	1					
ANR	8508218	Identifier	opt_string_end		8508192	1					
ANR	8508219	ElseStatement	else		8508192	0					
ANR	8508220	ExpressionStatement	offset = dp -> opt_string_start	761:6:24351:24380	8508192	0	True				
ANR	8508221	AssignmentExpression	offset = dp -> opt_string_start		8508192	0		=			
ANR	8508222	Identifier	offset		8508192	0					
ANR	8508223	PtrMemberAccess	dp -> opt_string_start		8508192	1					
ANR	8508224	Identifier	dp		8508192	0					
ANR	8508225	Identifier	opt_string_start		8508192	1					
ANR	8508226	IfStatement	if ( entry_name == range_lo )		8508192	2					
ANR	8508227	Condition	entry_name == range_lo	763:7:24390:24411	8508192	0	True				
ANR	8508228	EqualityExpression	entry_name == range_lo		8508192	0		==			
ANR	8508229	Identifier	entry_name		8508192	0					
ANR	8508230	Identifier	range_lo		8508192	1					
ANR	8508231	ExpressionStatement	"add = sprintf ( dp -> curr + offset , "" --%s=%d"" , options [ opt ] . name , dp -> value [ opt ] )"	764:6:24420:24509	8508192	1	True				
ANR	8508232	AssignmentExpression	"add = sprintf ( dp -> curr + offset , "" --%s=%d"" , options [ opt ] . name , dp -> value [ opt ] )"		8508192	0		=			
ANR	8508233	Identifier	add		8508192	0					
ANR	8508234	CallExpression	"sprintf ( dp -> curr + offset , "" --%s=%d"" , options [ opt ] . name , dp -> value [ opt ] )"		8508192	1					
ANR	8508235	Callee	sprintf		8508192	0					
ANR	8508236	Identifier	sprintf		8508192	0					
ANR	8508237	ArgumentList	dp -> curr + offset		8508192	1					
ANR	8508238	Argument	dp -> curr + offset		8508192	0					
ANR	8508239	AdditiveExpression	dp -> curr + offset		8508192	0		+			
ANR	8508240	PtrMemberAccess	dp -> curr		8508192	0					
ANR	8508241	Identifier	dp		8508192	0					
ANR	8508242	Identifier	curr		8508192	1					
ANR	8508243	Identifier	offset		8508192	1					
ANR	8508244	Argument	""" --%s=%d"""		8508192	1					
ANR	8508245	PrimaryExpression	""" --%s=%d"""		8508192	0					
ANR	8508246	Argument	options [ opt ] . name		8508192	2					
ANR	8508247	MemberAccess	options [ opt ] . name		8508192	0					
ANR	8508248	ArrayIndexing	options [ opt ]		8508192	0					
ANR	8508249	Identifier	options		8508192	0					
ANR	8508250	Identifier	opt		8508192	1					
ANR	8508251	Identifier	name		8508192	1					
ANR	8508252	Argument	dp -> value [ opt ]		8508192	3					
ANR	8508253	ArrayIndexing	dp -> value [ opt ]		8508192	0					
ANR	8508254	PtrMemberAccess	dp -> value		8508192	0					
ANR	8508255	Identifier	dp		8508192	0					
ANR	8508256	Identifier	value		8508192	1					
ANR	8508257	Identifier	opt		8508192	1					
ANR	8508258	ElseStatement	else		8508192	0					
ANR	8508259	ExpressionStatement	"add = sprintf ( dp -> curr + offset , "" --%s=%s"" , options [ opt ] . name , entry_name )"	768:6:24526:24599	8508192	0	True				
ANR	8508260	AssignmentExpression	"add = sprintf ( dp -> curr + offset , "" --%s=%s"" , options [ opt ] . name , entry_name )"		8508192	0		=			
ANR	8508261	Identifier	add		8508192	0					
ANR	8508262	CallExpression	"sprintf ( dp -> curr + offset , "" --%s=%s"" , options [ opt ] . name , entry_name )"		8508192	1					
ANR	8508263	Callee	sprintf		8508192	0					
ANR	8508264	Identifier	sprintf		8508192	0					
ANR	8508265	ArgumentList	dp -> curr + offset		8508192	1					
ANR	8508266	Argument	dp -> curr + offset		8508192	0					
ANR	8508267	AdditiveExpression	dp -> curr + offset		8508192	0		+			
ANR	8508268	PtrMemberAccess	dp -> curr		8508192	0					
ANR	8508269	Identifier	dp		8508192	0					
ANR	8508270	Identifier	curr		8508192	1					
ANR	8508271	Identifier	offset		8508192	1					
ANR	8508272	Argument	""" --%s=%s"""		8508192	1					
ANR	8508273	PrimaryExpression	""" --%s=%s"""		8508192	0					
ANR	8508274	Argument	options [ opt ] . name		8508192	2					
ANR	8508275	MemberAccess	options [ opt ] . name		8508192	0					
ANR	8508276	ArrayIndexing	options [ opt ]		8508192	0					
ANR	8508277	Identifier	options		8508192	0					
ANR	8508278	Identifier	opt		8508192	1					
ANR	8508279	Identifier	name		8508192	1					
ANR	8508280	Argument	entry_name		8508192	3					
ANR	8508281	Identifier	entry_name		8508192	0					
ANR	8508282	IfStatement	if ( add < 0 )		8508192	3					
ANR	8508283	Condition	add < 0	770:7:24609:24615	8508192	0	True				
ANR	8508284	RelationalExpression	add < 0		8508192	0		<			
ANR	8508285	Identifier	add		8508192	0					
ANR	8508286	PrimaryExpression	0		8508192	1					
ANR	8508287	ExpressionStatement	"display_log ( dp , INTERNAL_ERROR , ""sprintf failed"" )"	771:6:24624:24673	8508192	1	True				
ANR	8508288	CallExpression	"display_log ( dp , INTERNAL_ERROR , ""sprintf failed"" )"		8508192	0					
ANR	8508289	Callee	display_log		8508192	0					
ANR	8508290	Identifier	display_log		8508192	0					
ANR	8508291	ArgumentList	dp		8508192	1					
ANR	8508292	Argument	dp		8508192	0					
ANR	8508293	Identifier	dp		8508192	0					
ANR	8508294	Argument	INTERNAL_ERROR		8508192	1					
ANR	8508295	Identifier	INTERNAL_ERROR		8508192	0					
ANR	8508296	Argument	"""sprintf failed"""		8508192	2					
ANR	8508297	PrimaryExpression	"""sprintf failed"""		8508192	0					
ANR	8508298	ExpressionStatement	assert ( offset + add < ( int ) sizeof dp -> curr )	773:3:24679:24728	8508192	4	True				
ANR	8508299	CallExpression	assert ( offset + add < ( int ) sizeof dp -> curr )		8508192	0					
ANR	8508300	Callee	assert		8508192	0					
ANR	8508301	Identifier	assert		8508192	0					
ANR	8508302	ArgumentList	offset + add < ( int ) sizeof dp -> curr		8508192	1					
ANR	8508303	Argument	offset + add < ( int ) sizeof dp -> curr		8508192	0					
ANR	8508304	RelationalExpression	offset + add < ( int ) sizeof dp -> curr		8508192	0		<			
ANR	8508305	AdditiveExpression	offset + add		8508192	0		+			
ANR	8508306	Identifier	offset		8508192	0					
ANR	8508307	Identifier	add		8508192	1					
ANR	8508308	CastExpression	( int ) sizeof dp -> curr		8508192	1					
ANR	8508309	CastTarget	int		8508192	0					
ANR	8508310	SizeofExpression	sizeof dp -> curr		8508192	1					
ANR	8508311	Sizeof	sizeof		8508192	0					
ANR	8508312	PtrMemberAccess	dp -> curr		8508192	1					
ANR	8508313	Identifier	dp		8508192	0					
ANR	8508314	Identifier	curr		8508192	1					
ANR	8508315	ReturnStatement	return offset + add ;	774:3:24733:24750	8508192	5	True				
ANR	8508316	AdditiveExpression	offset + add		8508192	0		+			
ANR	8508317	Identifier	offset		8508192	0					
ANR	8508318	Identifier	add		8508192	1					
ANR	8508319	ReturnType	static int		8508192	1					
ANR	8508320	Identifier	set_opt_string_		8508192	2					
ANR	8508321	ParameterList	"struct display * dp , unsigned int sp , png_byte opt , const char * entry_name"		8508192	3					
ANR	8508322	Parameter	struct display * dp	751:16:24114:24131	8508192	0	True				
ANR	8508323	ParameterType	struct display *		8508192	0					
ANR	8508324	Identifier	dp		8508192	1					
ANR	8508325	Parameter	unsigned int sp	751:36:24134:24148	8508192	1	True				
ANR	8508326	ParameterType	unsigned int		8508192	0					
ANR	8508327	Identifier	sp		8508192	1					
ANR	8508328	Parameter	png_byte opt	751:53:24151:24162	8508192	2	True				
ANR	8508329	ParameterType	png_byte		8508192	0					
ANR	8508330	Identifier	opt		8508192	1					
ANR	8508331	Parameter	const char * entry_name	752:6:24171:24192	8508192	3	True				
ANR	8508332	ParameterType	const char *		8508192	0					
ANR	8508333	Identifier	entry_name		8508192	1					
ANR	8508334	CFGEntryNode	ENTRY		8508192		True				
ANR	8508335	CFGExitNode	EXIT		8508192		True				
ANR	8508336	Symbol	entry_name		8508192						
ANR	8508337	Symbol	add		8508192						
ANR	8508338	Symbol	* sp		8508192						
ANR	8508339	Symbol	* dp -> stack		8508192						
ANR	8508340	Symbol	offset		8508192						
ANR	8508341	Symbol	options [ opt ] . name		8508192						
ANR	8508342	Symbol	INTERNAL_ERROR		8508192						
ANR	8508343	Symbol	dp		8508192						
ANR	8508344	Symbol	* options		8508192						
ANR	8508345	Symbol	dp -> stack		8508192						
ANR	8508346	Symbol	sprintf		8508192						
ANR	8508347	Symbol	dp -> stack [ sp - 1 ] . opt_string_end		8508192						
ANR	8508348	Symbol	* dp		8508192						
ANR	8508349	Symbol	dp -> curr		8508192						
ANR	8508350	Symbol	opt		8508192						
ANR	8508351	Symbol	dp -> value		8508192						
ANR	8508352	Symbol	range_lo		8508192						
ANR	8508353	Symbol	* dp -> value		8508192						
ANR	8508354	Symbol	options		8508192						
ANR	8508355	Symbol	* * dp		8508192						
ANR	8508356	Symbol	dp -> opt_string_start		8508192						
ANR	8508357	Symbol	sp		8508192						
ANR	8508358	Symbol	* opt		8508192						
ANR	8508359	Function	set_opt_string	777:0:24755:25023							
ANR	8508360	FunctionDef	"set_opt_string (struct display * dp , unsigned int sp)"		8508359	0					
ANR	8508361	CompoundStatement		780:0:24875:25023	8508359	0					
ANR	8508362	ExpressionStatement	"dp -> stack [ sp ] . opt_string_end = set_opt_string_ ( dp , sp , dp -> stack [ sp ] . opt , options [ dp -> stack [ sp ] . opt ] . values [ dp -> stack [ sp ] . entry ] . name )"	781:3:24880:25021	8508359	0	True				
ANR	8508363	AssignmentExpression	"dp -> stack [ sp ] . opt_string_end = set_opt_string_ ( dp , sp , dp -> stack [ sp ] . opt , options [ dp -> stack [ sp ] . opt ] . values [ dp -> stack [ sp ] . entry ] . name )"		8508359	0		=			
ANR	8508364	MemberAccess	dp -> stack [ sp ] . opt_string_end		8508359	0					
ANR	8508365	ArrayIndexing	dp -> stack [ sp ]		8508359	0					
ANR	8508366	PtrMemberAccess	dp -> stack		8508359	0					
ANR	8508367	Identifier	dp		8508359	0					
ANR	8508368	Identifier	stack		8508359	1					
ANR	8508369	Identifier	sp		8508359	1					
ANR	8508370	Identifier	opt_string_end		8508359	1					
ANR	8508371	CallExpression	"set_opt_string_ ( dp , sp , dp -> stack [ sp ] . opt , options [ dp -> stack [ sp ] . opt ] . values [ dp -> stack [ sp ] . entry ] . name )"		8508359	1					
ANR	8508372	Callee	set_opt_string_		8508359	0					
ANR	8508373	Identifier	set_opt_string_		8508359	0					
ANR	8508374	ArgumentList	dp		8508359	1					
ANR	8508375	Argument	dp		8508359	0					
ANR	8508376	Identifier	dp		8508359	0					
ANR	8508377	Argument	sp		8508359	1					
ANR	8508378	Identifier	sp		8508359	0					
ANR	8508379	Argument	dp -> stack [ sp ] . opt		8508359	2					
ANR	8508380	MemberAccess	dp -> stack [ sp ] . opt		8508359	0					
ANR	8508381	ArrayIndexing	dp -> stack [ sp ]		8508359	0					
ANR	8508382	PtrMemberAccess	dp -> stack		8508359	0					
ANR	8508383	Identifier	dp		8508359	0					
ANR	8508384	Identifier	stack		8508359	1					
ANR	8508385	Identifier	sp		8508359	1					
ANR	8508386	Identifier	opt		8508359	1					
ANR	8508387	Argument	options [ dp -> stack [ sp ] . opt ] . values [ dp -> stack [ sp ] . entry ] . name		8508359	3					
ANR	8508388	MemberAccess	options [ dp -> stack [ sp ] . opt ] . values [ dp -> stack [ sp ] . entry ] . name		8508359	0					
ANR	8508389	ArrayIndexing	options [ dp -> stack [ sp ] . opt ] . values [ dp -> stack [ sp ] . entry ]		8508359	0					
ANR	8508390	MemberAccess	options [ dp -> stack [ sp ] . opt ] . values		8508359	0					
ANR	8508391	ArrayIndexing	options [ dp -> stack [ sp ] . opt ]		8508359	0					
ANR	8508392	Identifier	options		8508359	0					
ANR	8508393	MemberAccess	dp -> stack [ sp ] . opt		8508359	1					
ANR	8508394	ArrayIndexing	dp -> stack [ sp ]		8508359	0					
ANR	8508395	PtrMemberAccess	dp -> stack		8508359	0					
ANR	8508396	Identifier	dp		8508359	0					
ANR	8508397	Identifier	stack		8508359	1					
ANR	8508398	Identifier	sp		8508359	1					
ANR	8508399	Identifier	opt		8508359	1					
ANR	8508400	Identifier	values		8508359	1					
ANR	8508401	MemberAccess	dp -> stack [ sp ] . entry		8508359	1					
ANR	8508402	ArrayIndexing	dp -> stack [ sp ]		8508359	0					
ANR	8508403	PtrMemberAccess	dp -> stack		8508359	0					
ANR	8508404	Identifier	dp		8508359	0					
ANR	8508405	Identifier	stack		8508359	1					
ANR	8508406	Identifier	sp		8508359	1					
ANR	8508407	Identifier	entry		8508359	1					
ANR	8508408	Identifier	name		8508359	1					
ANR	8508409	ReturnType	static void		8508359	1					
ANR	8508410	Identifier	set_opt_string		8508359	2					
ANR	8508411	ParameterList	"struct display * dp , unsigned int sp"		8508359	3					
ANR	8508412	Parameter	struct display * dp	778:15:24782:24799	8508359	0	True				
ANR	8508413	ParameterType	struct display *		8508359	0					
ANR	8508414	Identifier	dp		8508359	1					
ANR	8508415	Parameter	unsigned int sp	778:35:24802:24816	8508359	1	True				
ANR	8508416	ParameterType	unsigned int		8508359	0					
ANR	8508417	Identifier	sp		8508359	1					
ANR	8508418	CFGEntryNode	ENTRY		8508359		True				
ANR	8508419	CFGExitNode	EXIT		8508359		True				
ANR	8508420	Symbol	* sp		8508359						
ANR	8508421	Symbol	* dp -> stack		8508359						
ANR	8508422	Symbol	* * * dp -> stack		8508359						
ANR	8508423	Symbol	* * * sp		8508359						
ANR	8508424	Symbol	dp -> stack [ sp ] . entry		8508359						
ANR	8508425	Symbol	* * sp		8508359						
ANR	8508426	Symbol	* dp -> stack [ sp ] . entry		8508359						
ANR	8508427	Symbol	dp		8508359						
ANR	8508428	Symbol	* options		8508359						
ANR	8508429	Symbol	* dp		8508359						
ANR	8508430	Symbol	options [ dp -> stack [ sp ] . opt ] . values [ dp -> stack [ sp ] . entry ] . name		8508359						
ANR	8508431	Symbol	* * * dp		8508359						
ANR	8508432	Symbol	set_opt_string_		8508359						
ANR	8508433	Symbol	options		8508359						
ANR	8508434	Symbol	* options [ dp -> stack [ sp ] . opt ] . values		8508359						
ANR	8508435	Symbol	sp		8508359						
ANR	8508436	Symbol	* dp -> stack [ sp ] . opt		8508359						
ANR	8508437	Symbol	options [ dp -> stack [ sp ] . opt ] . values		8508359						
ANR	8508438	Symbol	dp -> stack [ sp ] . opt_string_end		8508359						
ANR	8508439	Symbol	* * options		8508359						
ANR	8508440	Symbol	dp -> stack		8508359						
ANR	8508441	Symbol	* * dp -> stack		8508359						
ANR	8508442	Symbol	dp -> stack [ sp ] . opt		8508359						
ANR	8508443	Symbol	* * * * dp		8508359						
ANR	8508444	Symbol	* * dp		8508359						
ANR	8508445	Symbol	* * dp -> stack [ sp ] . opt		8508359						
ANR	8508446	Function	record_opt	785:0:25026:25844							
ANR	8508447	FunctionDef	"record_opt (struct display * dp , png_byte opt , const char * entry_name)"		8508446	0					
ANR	8508448	CompoundStatement		791:0:25289:25844	8508446	0					
ANR	8508449	IdentifierDeclStatement	const unsigned int sp = dp -> csp ;	792:3:25294:25325	8508446	0	True				
ANR	8508450	IdentifierDecl	sp = dp -> csp		8508446	0					
ANR	8508451	IdentifierDeclType	const unsigned int		8508446	0					
ANR	8508452	Identifier	sp		8508446	1					
ANR	8508453	AssignmentExpression	sp = dp -> csp		8508446	2		=			
ANR	8508454	Identifier	sp		8508446	0					
ANR	8508455	PtrMemberAccess	dp -> csp		8508446	1					
ANR	8508456	Identifier	dp		8508446	0					
ANR	8508457	Identifier	csp		8508446	1					
ANR	8508458	IfStatement	if ( sp >= dp -> tsp )		8508446	1					
ANR	8508459	Condition	sp >= dp -> tsp	794:7:25377:25389	8508446	0	True				
ANR	8508460	RelationalExpression	sp >= dp -> tsp		8508446	0		>=			
ANR	8508461	Identifier	sp		8508446	0					
ANR	8508462	PtrMemberAccess	dp -> tsp		8508446	1					
ANR	8508463	Identifier	dp		8508446	0					
ANR	8508464	Identifier	tsp		8508446	1					
ANR	8508465	CompoundStatement		10:6:316:375	8508446	1					
ANR	8508466	IdentifierDeclStatement	"const int offset = set_opt_string_ ( dp , sp , opt , entry_name ) ;"	800:6:25606:25665	8508446	0	True				
ANR	8508467	IdentifierDecl	"offset = set_opt_string_ ( dp , sp , opt , entry_name )"		8508446	0					
ANR	8508468	IdentifierDeclType	const int		8508446	0					
ANR	8508469	Identifier	offset		8508446	1					
ANR	8508470	AssignmentExpression	"offset = set_opt_string_ ( dp , sp , opt , entry_name )"		8508446	2		=			
ANR	8508471	Identifier	offset		8508446	0					
ANR	8508472	CallExpression	"set_opt_string_ ( dp , sp , opt , entry_name )"		8508446	1					
ANR	8508473	Callee	set_opt_string_		8508446	0					
ANR	8508474	Identifier	set_opt_string_		8508446	0					
ANR	8508475	ArgumentList	dp		8508446	1					
ANR	8508476	Argument	dp		8508446	0					
ANR	8508477	Identifier	dp		8508446	0					
ANR	8508478	Argument	sp		8508446	1					
ANR	8508479	Identifier	sp		8508446	0					
ANR	8508480	Argument	opt		8508446	2					
ANR	8508481	Identifier	opt		8508446	0					
ANR	8508482	Argument	entry_name		8508446	3					
ANR	8508483	Identifier	entry_name		8508446	0					
ANR	8508484	IfStatement	if ( sp > 0 )		8508446	1					
ANR	8508485	Condition	sp > 0	802:10:25678:25683	8508446	0	True				
ANR	8508486	RelationalExpression	sp > 0		8508446	0		>			
ANR	8508487	Identifier	sp		8508446	0					
ANR	8508488	PrimaryExpression	0		8508446	1					
ANR	8508489	ExpressionStatement	dp -> stack [ sp - 1 ] . opt_string_end = offset	803:9:25695:25734	8508446	1	True				
ANR	8508490	AssignmentExpression	dp -> stack [ sp - 1 ] . opt_string_end = offset		8508446	0		=			
ANR	8508491	MemberAccess	dp -> stack [ sp - 1 ] . opt_string_end		8508446	0					
ANR	8508492	ArrayIndexing	dp -> stack [ sp - 1 ]		8508446	0					
ANR	8508493	PtrMemberAccess	dp -> stack		8508446	0					
ANR	8508494	Identifier	dp		8508446	0					
ANR	8508495	Identifier	stack		8508446	1					
ANR	8508496	AdditiveExpression	sp - 1		8508446	1		-			
ANR	8508497	Identifier	sp		8508446	0					
ANR	8508498	PrimaryExpression	1		8508446	1					
ANR	8508499	Identifier	opt_string_end		8508446	1					
ANR	8508500	Identifier	offset		8508446	1					
ANR	8508501	ElseStatement	else		8508446	0					
ANR	8508502	ExpressionStatement	dp -> opt_string_start = offset	806:9:25757:25786	8508446	0	True				
ANR	8508503	AssignmentExpression	dp -> opt_string_start = offset		8508446	0		=			
ANR	8508504	PtrMemberAccess	dp -> opt_string_start		8508446	0					
ANR	8508505	Identifier	dp		8508446	0					
ANR	8508506	Identifier	opt_string_start		8508446	1					
ANR	8508507	Identifier	offset		8508446	1					
ANR	8508508	ReturnType	static void		8508446	1					
ANR	8508509	Identifier	record_opt		8508446	2					
ANR	8508510	ParameterList	"struct display * dp , png_byte opt , const char * entry_name"		8508446	3					
ANR	8508511	Parameter	struct display * dp	786:11:25049:25066	8508446	0	True				
ANR	8508512	ParameterType	struct display *		8508446	0					
ANR	8508513	Identifier	dp		8508446	1					
ANR	8508514	Parameter	png_byte opt	786:31:25069:25080	8508446	1	True				
ANR	8508515	ParameterType	png_byte		8508446	0					
ANR	8508516	Identifier	opt		8508446	1					
ANR	8508517	Parameter	const char * entry_name	786:45:25083:25104	8508446	2	True				
ANR	8508518	ParameterType	const char *		8508446	0					
ANR	8508519	Identifier	entry_name		8508446	1					
ANR	8508520	CFGEntryNode	ENTRY		8508446		True				
ANR	8508521	CFGExitNode	EXIT		8508446		True				
ANR	8508522	Symbol	entry_name		8508446						
ANR	8508523	Symbol	* sp		8508446						
ANR	8508524	Symbol	* dp -> stack		8508446						
ANR	8508525	Symbol	offset		8508446						
ANR	8508526	Symbol	dp		8508446						
ANR	8508527	Symbol	dp -> csp		8508446						
ANR	8508528	Symbol	dp -> stack		8508446						
ANR	8508529	Symbol	* dp		8508446						
ANR	8508530	Symbol	dp -> stack [ sp - 1 ] . opt_string_end		8508446						
ANR	8508531	Symbol	opt		8508446						
ANR	8508532	Symbol	set_opt_string_		8508446						
ANR	8508533	Symbol	* * dp		8508446						
ANR	8508534	Symbol	dp -> opt_string_start		8508446						
ANR	8508535	Symbol	dp -> tsp		8508446						
ANR	8508536	Symbol	sp		8508446						
ANR	8508537	Function	opt_list_end	812:0:25847:26356							
ANR	8508538	FunctionDef	"opt_list_end (struct display * dp , png_byte opt , png_byte entry)"		8508537	0					
ANR	8508539	CompoundStatement		814:0:25921:26356	8508537	0					
ANR	8508540	IfStatement	if ( options [ opt ] . values [ entry ] . name == range_lo )		8508537	0					
ANR	8508541	Condition	options [ opt ] . values [ entry ] . name == range_lo	815:7:25930:25972	8508537	0	True				
ANR	8508542	EqualityExpression	options [ opt ] . values [ entry ] . name == range_lo		8508537	0		==			
ANR	8508543	MemberAccess	options [ opt ] . values [ entry ] . name		8508537	0					
ANR	8508544	ArrayIndexing	options [ opt ] . values [ entry ]		8508537	0					
ANR	8508545	MemberAccess	options [ opt ] . values		8508537	0					
ANR	8508546	ArrayIndexing	options [ opt ]		8508537	0					
ANR	8508547	Identifier	options		8508537	0					
ANR	8508548	Identifier	opt		8508537	1					
ANR	8508549	Identifier	values		8508537	1					
ANR	8508550	Identifier	entry		8508537	1					
ANR	8508551	Identifier	name		8508537	1					
ANR	8508552	Identifier	range_lo		8508537	1					
ANR	8508553	ReturnStatement	return entry + 1U >= options [ opt ] . value_count || options [ opt ] . values [ entry + 1U ] . name != range_hi || options [ opt ] . values [ entry + 1U ] . value <= dp -> value [ opt ] ;	816:6:25981:26203	8508537	1	True				
ANR	8508554	OrExpression	entry + 1U >= options [ opt ] . value_count || options [ opt ] . values [ entry + 1U ] . name != range_hi || options [ opt ] . values [ entry + 1U ] . value <= dp -> value [ opt ]		8508537	0		||			
ANR	8508555	RelationalExpression	entry + 1U >= options [ opt ] . value_count		8508537	0		>=			
ANR	8508556	AdditiveExpression	entry + 1U		8508537	0		+			
ANR	8508557	Identifier	entry		8508537	0					
ANR	8508558	PrimaryExpression	1U		8508537	1					
ANR	8508559	MemberAccess	options [ opt ] . value_count		8508537	1					
ANR	8508560	ArrayIndexing	options [ opt ]		8508537	0					
ANR	8508561	Identifier	options		8508537	0					
ANR	8508562	Identifier	opt		8508537	1					
ANR	8508563	Identifier	value_count		8508537	1					
ANR	8508564	OrExpression	options [ opt ] . values [ entry + 1U ] . name != range_hi || options [ opt ] . values [ entry + 1U ] . value <= dp -> value [ opt ]		8508537	1		||			
ANR	8508565	EqualityExpression	options [ opt ] . values [ entry + 1U ] . name != range_hi		8508537	0		!=			
ANR	8508566	MemberAccess	options [ opt ] . values [ entry + 1U ] . name		8508537	0					
ANR	8508567	ArrayIndexing	options [ opt ] . values [ entry + 1U ]		8508537	0					
ANR	8508568	MemberAccess	options [ opt ] . values		8508537	0					
ANR	8508569	ArrayIndexing	options [ opt ]		8508537	0					
ANR	8508570	Identifier	options		8508537	0					
ANR	8508571	Identifier	opt		8508537	1					
ANR	8508572	Identifier	values		8508537	1					
ANR	8508573	AdditiveExpression	entry + 1U		8508537	1		+			
ANR	8508574	Identifier	entry		8508537	0					
ANR	8508575	PrimaryExpression	1U		8508537	1					
ANR	8508576	Identifier	name		8508537	1					
ANR	8508577	Identifier	range_hi		8508537	1					
ANR	8508578	RelationalExpression	options [ opt ] . values [ entry + 1U ] . value <= dp -> value [ opt ]		8508537	1		<=			
ANR	8508579	MemberAccess	options [ opt ] . values [ entry + 1U ] . value		8508537	0					
ANR	8508580	ArrayIndexing	options [ opt ] . values [ entry + 1U ]		8508537	0					
ANR	8508581	MemberAccess	options [ opt ] . values		8508537	0					
ANR	8508582	ArrayIndexing	options [ opt ]		8508537	0					
ANR	8508583	Identifier	options		8508537	0					
ANR	8508584	Identifier	opt		8508537	1					
ANR	8508585	Identifier	values		8508537	1					
ANR	8508586	AdditiveExpression	entry + 1U		8508537	1		+			
ANR	8508587	Identifier	entry		8508537	0					
ANR	8508588	PrimaryExpression	1U		8508537	1					
ANR	8508589	Identifier	value		8508537	1					
ANR	8508590	ArrayIndexing	dp -> value [ opt ]		8508537	1					
ANR	8508591	PtrMemberAccess	dp -> value		8508537	0					
ANR	8508592	Identifier	dp		8508537	0					
ANR	8508593	Identifier	value		8508537	1					
ANR	8508594	Identifier	opt		8508537	1					
ANR	8508595	ElseStatement	else		8508537	0					
ANR	8508596	ReturnStatement	return entry + 1U >= options [ opt ] . value_count || options [ opt ] . values [ entry + 1U ] . name == all ;	821:6:26220:26354	8508537	0	True				
ANR	8508597	OrExpression	entry + 1U >= options [ opt ] . value_count || options [ opt ] . values [ entry + 1U ] . name == all		8508537	0		||			
ANR	8508598	RelationalExpression	entry + 1U >= options [ opt ] . value_count		8508537	0		>=			
ANR	8508599	AdditiveExpression	entry + 1U		8508537	0		+			
ANR	8508600	Identifier	entry		8508537	0					
ANR	8508601	PrimaryExpression	1U		8508537	1					
ANR	8508602	MemberAccess	options [ opt ] . value_count		8508537	1					
ANR	8508603	ArrayIndexing	options [ opt ]		8508537	0					
ANR	8508604	Identifier	options		8508537	0					
ANR	8508605	Identifier	opt		8508537	1					
ANR	8508606	Identifier	value_count		8508537	1					
ANR	8508607	EqualityExpression	options [ opt ] . values [ entry + 1U ] . name == all		8508537	1		==			
ANR	8508608	MemberAccess	options [ opt ] . values [ entry + 1U ] . name		8508537	0					
ANR	8508609	ArrayIndexing	options [ opt ] . values [ entry + 1U ]		8508537	0					
ANR	8508610	MemberAccess	options [ opt ] . values		8508537	0					
ANR	8508611	ArrayIndexing	options [ opt ]		8508537	0					
ANR	8508612	Identifier	options		8508537	0					
ANR	8508613	Identifier	opt		8508537	1					
ANR	8508614	Identifier	values		8508537	1					
ANR	8508615	AdditiveExpression	entry + 1U		8508537	1		+			
ANR	8508616	Identifier	entry		8508537	0					
ANR	8508617	PrimaryExpression	1U		8508537	1					
ANR	8508618	Identifier	name		8508537	1					
ANR	8508619	Identifier	all		8508537	1					
ANR	8508620	ReturnType	static int		8508537	1					
ANR	8508621	Identifier	opt_list_end		8508537	2					
ANR	8508622	ParameterList	"struct display * dp , png_byte opt , png_byte entry"		8508537	3					
ANR	8508623	Parameter	struct display * dp	813:13:25871:25888	8508537	0	True				
ANR	8508624	ParameterType	struct display *		8508537	0					
ANR	8508625	Identifier	dp		8508537	1					
ANR	8508626	Parameter	png_byte opt	813:33:25891:25902	8508537	1	True				
ANR	8508627	ParameterType	png_byte		8508537	0					
ANR	8508628	Identifier	opt		8508537	1					
ANR	8508629	Parameter	png_byte entry	813:47:25905:25918	8508537	2	True				
ANR	8508630	ParameterType	png_byte		8508537	0					
ANR	8508631	Identifier	entry		8508537	1					
ANR	8508632	CFGEntryNode	ENTRY		8508537		True				
ANR	8508633	CFGExitNode	EXIT		8508537		True				
ANR	8508634	Symbol	all		8508537						
ANR	8508635	Symbol	* options [ opt ] . values		8508537						
ANR	8508636	Symbol	* * opt		8508537						
ANR	8508637	Symbol	options [ opt ] . values [ entry + 1U ] . value		8508537						
ANR	8508638	Symbol	* * options		8508537						
ANR	8508639	Symbol	dp		8508537						
ANR	8508640	Symbol	options [ opt ] . values [ entry ] . name		8508537						
ANR	8508641	Symbol	* options		8508537						
ANR	8508642	Symbol	entry		8508537						
ANR	8508643	Symbol	* dp		8508537						
ANR	8508644	Symbol	range_hi		8508537						
ANR	8508645	Symbol	opt		8508537						
ANR	8508646	Symbol	dp -> value		8508537						
ANR	8508647	Symbol	range_lo		8508537						
ANR	8508648	Symbol	* dp -> value		8508537						
ANR	8508649	Symbol	options		8508537						
ANR	8508650	Symbol	options [ opt ] . value_count		8508537						
ANR	8508651	Symbol	* * dp		8508537						
ANR	8508652	Symbol	* opt		8508537						
ANR	8508653	Symbol	options [ opt ] . values [ entry + 1U ] . name		8508537						
ANR	8508654	Symbol	options [ opt ] . values		8508537						
ANR	8508655	Symbol	* entry		8508537						
ANR	8508656	Function	push_opt	825:0:26359:28594							
ANR	8508657	FunctionDef	"push_opt (struct display * dp , unsigned int sp , png_byte opt , int search)"		8508656	0					
ANR	8508658	CompoundStatement		831:0:26636:28594	8508656	0					
ANR	8508659	IdentifierDeclStatement	png_byte entry ;	832:3:26641:26655	8508656	0	True				
ANR	8508660	IdentifierDecl	entry		8508656	0					
ANR	8508661	IdentifierDeclType	png_byte		8508656	0					
ANR	8508662	Identifier	entry		8508656	1					
ANR	8508663	IdentifierDeclStatement	const char * entry_name ;	833:3:26660:26682	8508656	1	True				
ANR	8508664	IdentifierDecl	* entry_name		8508656	0					
ANR	8508665	IdentifierDeclType	const char *		8508656	0					
ANR	8508666	Identifier	entry_name		8508656	1					
ANR	8508667	ExpressionStatement	assert ( sp == dp -> tsp && sp < SL )	835:3:26688:26720	8508656	2	True				
ANR	8508668	CallExpression	assert ( sp == dp -> tsp && sp < SL )		8508656	0					
ANR	8508669	Callee	assert		8508656	0					
ANR	8508670	Identifier	assert		8508656	0					
ANR	8508671	ArgumentList	sp == dp -> tsp && sp < SL		8508656	1					
ANR	8508672	Argument	sp == dp -> tsp && sp < SL		8508656	0					
ANR	8508673	AndExpression	sp == dp -> tsp && sp < SL		8508656	0		&&			
ANR	8508674	EqualityExpression	sp == dp -> tsp		8508656	0		==			
ANR	8508675	Identifier	sp		8508656	0					
ANR	8508676	PtrMemberAccess	dp -> tsp		8508656	1					
ANR	8508677	Identifier	dp		8508656	0					
ANR	8508678	Identifier	tsp		8508656	1					
ANR	8508679	RelationalExpression	sp < SL		8508656	1		<			
ANR	8508680	Identifier	sp		8508656	0					
ANR	8508681	Identifier	SL		8508656	1					
ANR	8508682	ExpressionStatement	entry = options [ opt ] . value_count	840:3:26856:26888	8508656	3	True				
ANR	8508683	AssignmentExpression	entry = options [ opt ] . value_count		8508656	0		=			
ANR	8508684	Identifier	entry		8508656	0					
ANR	8508685	MemberAccess	options [ opt ] . value_count		8508656	1					
ANR	8508686	ArrayIndexing	options [ opt ]		8508656	0					
ANR	8508687	Identifier	options		8508656	0					
ANR	8508688	Identifier	opt		8508656	1					
ANR	8508689	Identifier	value_count		8508656	1					
ANR	8508690	ExpressionStatement	assert ( entry > 0U )	841:3:26893:26911	8508656	4	True				
ANR	8508691	CallExpression	assert ( entry > 0U )		8508656	0					
ANR	8508692	Callee	assert		8508656	0					
ANR	8508693	Identifier	assert		8508656	0					
ANR	8508694	ArgumentList	entry > 0U		8508656	1					
ANR	8508695	Argument	entry > 0U		8508656	0					
ANR	8508696	RelationalExpression	entry > 0U		8508656	0		>			
ANR	8508697	Identifier	entry		8508656	0					
ANR	8508698	PrimaryExpression	0U		8508656	1					
ANR	8508699	DoStatement	do		8508656	5					
ANR	8508700	CompoundStatement		14:3:286:286	8508656	0					
ANR	8508701	ExpressionStatement	entry_name = options [ opt ] . values [ -- entry ] . name	845:6:26931:26977	8508656	0	True				
ANR	8508702	AssignmentExpression	entry_name = options [ opt ] . values [ -- entry ] . name		8508656	0		=			
ANR	8508703	Identifier	entry_name		8508656	0					
ANR	8508704	MemberAccess	options [ opt ] . values [ -- entry ] . name		8508656	1					
ANR	8508705	ArrayIndexing	options [ opt ] . values [ -- entry ]		8508656	0					
ANR	8508706	MemberAccess	options [ opt ] . values		8508656	0					
ANR	8508707	ArrayIndexing	options [ opt ]		8508656	0					
ANR	8508708	Identifier	options		8508656	0					
ANR	8508709	Identifier	opt		8508656	1					
ANR	8508710	Identifier	values		8508656	1					
ANR	8508711	UnaryExpression	-- entry		8508656	1					
ANR	8508712	IncDec	--		8508656	0					
ANR	8508713	Identifier	entry		8508656	1					
ANR	8508714	Identifier	name		8508656	1					
ANR	8508715	IfStatement	if ( entry_name == range_lo )		8508656	1					
ANR	8508716	Condition	entry_name == range_lo	846:10:26989:27010	8508656	0	True				
ANR	8508717	EqualityExpression	entry_name == range_lo		8508656	0		==			
ANR	8508718	Identifier	entry_name		8508656	0					
ANR	8508719	Identifier	range_lo		8508656	1					
ANR	8508720	BreakStatement	break ;	847:9:27022:27027	8508656	1	True				
ANR	8508721	Condition	entry > 0U	849:10:27044:27053	8508656	1	True				
ANR	8508722	RelationalExpression	entry > 0U		8508656	0		>			
ANR	8508723	Identifier	entry		8508656	0					
ANR	8508724	PrimaryExpression	0U		8508656	1					
ANR	8508725	ExpressionStatement	dp -> tsp = sp + 1U	851:3:27061:27076	8508656	6	True				
ANR	8508726	AssignmentExpression	dp -> tsp = sp + 1U		8508656	0		=			
ANR	8508727	PtrMemberAccess	dp -> tsp		8508656	0					
ANR	8508728	Identifier	dp		8508656	0					
ANR	8508729	Identifier	tsp		8508656	1					
ANR	8508730	AdditiveExpression	sp + 1U		8508656	1		+			
ANR	8508731	Identifier	sp		8508656	0					
ANR	8508732	PrimaryExpression	1U		8508656	1					
ANR	8508733	ExpressionStatement	dp -> stack [ sp ] . best_size = dp -> stack [ sp ] . lo_size = dp -> stack [ sp ] . hi_size = MAX_SIZE	852:3:27081:27175	8508656	7	True				
ANR	8508734	AssignmentExpression	dp -> stack [ sp ] . best_size = dp -> stack [ sp ] . lo_size = dp -> stack [ sp ] . hi_size = MAX_SIZE		8508656	0		=			
ANR	8508735	MemberAccess	dp -> stack [ sp ] . best_size		8508656	0					
ANR	8508736	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508737	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508738	Identifier	dp		8508656	0					
ANR	8508739	Identifier	stack		8508656	1					
ANR	8508740	Identifier	sp		8508656	1					
ANR	8508741	Identifier	best_size		8508656	1					
ANR	8508742	AssignmentExpression	dp -> stack [ sp ] . lo_size = dp -> stack [ sp ] . hi_size = MAX_SIZE		8508656	1		=			
ANR	8508743	MemberAccess	dp -> stack [ sp ] . lo_size		8508656	0					
ANR	8508744	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508745	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508746	Identifier	dp		8508656	0					
ANR	8508747	Identifier	stack		8508656	1					
ANR	8508748	Identifier	sp		8508656	1					
ANR	8508749	Identifier	lo_size		8508656	1					
ANR	8508750	AssignmentExpression	dp -> stack [ sp ] . hi_size = MAX_SIZE		8508656	1		=			
ANR	8508751	MemberAccess	dp -> stack [ sp ] . hi_size		8508656	0					
ANR	8508752	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508753	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508754	Identifier	dp		8508656	0					
ANR	8508755	Identifier	stack		8508656	1					
ANR	8508756	Identifier	sp		8508656	1					
ANR	8508757	Identifier	hi_size		8508656	1					
ANR	8508758	Identifier	MAX_SIZE		8508656	1					
ANR	8508759	IfStatement	if ( search && entry_name == range_lo )		8508656	8					
ANR	8508760	Condition	search && entry_name == range_lo	856:7:27185:27216	8508656	0	True				
ANR	8508761	AndExpression	search && entry_name == range_lo		8508656	0		&&			
ANR	8508762	Identifier	search		8508656	0					
ANR	8508763	EqualityExpression	entry_name == range_lo		8508656	1		==			
ANR	8508764	Identifier	entry_name		8508656	0					
ANR	8508765	Identifier	range_lo		8508656	1					
ANR	8508766	CompoundStatement		27:3:609:609	8508656	1					
ANR	8508767	ExpressionStatement	dp -> stack [ sp ] . lo = options [ opt ] . values [ entry ] . value	858:6:27254:27305	8508656	0	True				
ANR	8508768	AssignmentExpression	dp -> stack [ sp ] . lo = options [ opt ] . values [ entry ] . value		8508656	0		=			
ANR	8508769	MemberAccess	dp -> stack [ sp ] . lo		8508656	0					
ANR	8508770	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508771	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508772	Identifier	dp		8508656	0					
ANR	8508773	Identifier	stack		8508656	1					
ANR	8508774	Identifier	sp		8508656	1					
ANR	8508775	Identifier	lo		8508656	1					
ANR	8508776	MemberAccess	options [ opt ] . values [ entry ] . value		8508656	1					
ANR	8508777	ArrayIndexing	options [ opt ] . values [ entry ]		8508656	0					
ANR	8508778	MemberAccess	options [ opt ] . values		8508656	0					
ANR	8508779	ArrayIndexing	options [ opt ]		8508656	0					
ANR	8508780	Identifier	options		8508656	0					
ANR	8508781	Identifier	opt		8508656	1					
ANR	8508782	Identifier	values		8508656	1					
ANR	8508783	Identifier	entry		8508656	1					
ANR	8508784	Identifier	value		8508656	1					
ANR	8508785	ExpressionStatement	assert ( entry + 1 < options [ opt ] . value_count && options [ opt ] . values [ entry + 1 ] . name == range_hi )	860:6:27361:27465	8508656	1	True				
ANR	8508786	CallExpression	assert ( entry + 1 < options [ opt ] . value_count && options [ opt ] . values [ entry + 1 ] . name == range_hi )		8508656	0					
ANR	8508787	Callee	assert		8508656	0					
ANR	8508788	Identifier	assert		8508656	0					
ANR	8508789	ArgumentList	entry + 1 < options [ opt ] . value_count && options [ opt ] . values [ entry + 1 ] . name == range_hi		8508656	1					
ANR	8508790	Argument	entry + 1 < options [ opt ] . value_count && options [ opt ] . values [ entry + 1 ] . name == range_hi		8508656	0					
ANR	8508791	AndExpression	entry + 1 < options [ opt ] . value_count && options [ opt ] . values [ entry + 1 ] . name == range_hi		8508656	0		&&			
ANR	8508792	RelationalExpression	entry + 1 < options [ opt ] . value_count		8508656	0		<			
ANR	8508793	AdditiveExpression	entry + 1		8508656	0		+			
ANR	8508794	Identifier	entry		8508656	0					
ANR	8508795	PrimaryExpression	1		8508656	1					
ANR	8508796	MemberAccess	options [ opt ] . value_count		8508656	1					
ANR	8508797	ArrayIndexing	options [ opt ]		8508656	0					
ANR	8508798	Identifier	options		8508656	0					
ANR	8508799	Identifier	opt		8508656	1					
ANR	8508800	Identifier	value_count		8508656	1					
ANR	8508801	EqualityExpression	options [ opt ] . values [ entry + 1 ] . name == range_hi		8508656	1		==			
ANR	8508802	MemberAccess	options [ opt ] . values [ entry + 1 ] . name		8508656	0					
ANR	8508803	ArrayIndexing	options [ opt ] . values [ entry + 1 ]		8508656	0					
ANR	8508804	MemberAccess	options [ opt ] . values		8508656	0					
ANR	8508805	ArrayIndexing	options [ opt ]		8508656	0					
ANR	8508806	Identifier	options		8508656	0					
ANR	8508807	Identifier	opt		8508656	1					
ANR	8508808	Identifier	values		8508656	1					
ANR	8508809	AdditiveExpression	entry + 1		8508656	1		+			
ANR	8508810	Identifier	entry		8508656	0					
ANR	8508811	PrimaryExpression	1		8508656	1					
ANR	8508812	Identifier	name		8508656	1					
ANR	8508813	Identifier	range_hi		8508656	1					
ANR	8508814	ExpressionStatement	dp -> stack [ sp ] . hi = options [ opt ] . values [ entry + 1 ] . value	862:6:27473:27526	8508656	2	True				
ANR	8508815	AssignmentExpression	dp -> stack [ sp ] . hi = options [ opt ] . values [ entry + 1 ] . value		8508656	0		=			
ANR	8508816	MemberAccess	dp -> stack [ sp ] . hi		8508656	0					
ANR	8508817	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508818	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508819	Identifier	dp		8508656	0					
ANR	8508820	Identifier	stack		8508656	1					
ANR	8508821	Identifier	sp		8508656	1					
ANR	8508822	Identifier	hi		8508656	1					
ANR	8508823	MemberAccess	options [ opt ] . values [ entry + 1 ] . value		8508656	1					
ANR	8508824	ArrayIndexing	options [ opt ] . values [ entry + 1 ]		8508656	0					
ANR	8508825	MemberAccess	options [ opt ] . values		8508656	0					
ANR	8508826	ArrayIndexing	options [ opt ]		8508656	0					
ANR	8508827	Identifier	options		8508656	0					
ANR	8508828	Identifier	opt		8508656	1					
ANR	8508829	Identifier	values		8508656	1					
ANR	8508830	AdditiveExpression	entry + 1		8508656	1		+			
ANR	8508831	Identifier	entry		8508656	0					
ANR	8508832	PrimaryExpression	1		8508656	1					
ANR	8508833	Identifier	value		8508656	1					
ANR	8508834	ElseStatement	else		8508656	0					
ANR	8508835	CompoundStatement		36:3:908:908	8508656	0					
ANR	8508836	ExpressionStatement	dp -> stack [ sp ] . lo = INT_MAX	868:6:27608:27634	8508656	0	True				
ANR	8508837	AssignmentExpression	dp -> stack [ sp ] . lo = INT_MAX		8508656	0		=			
ANR	8508838	MemberAccess	dp -> stack [ sp ] . lo		8508656	0					
ANR	8508839	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508840	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508841	Identifier	dp		8508656	0					
ANR	8508842	Identifier	stack		8508656	1					
ANR	8508843	Identifier	sp		8508656	1					
ANR	8508844	Identifier	lo		8508656	1					
ANR	8508845	Identifier	INT_MAX		8508656	1					
ANR	8508846	ExpressionStatement	dp -> stack [ sp ] . hi = INT_MIN	869:6:27642:27668	8508656	1	True				
ANR	8508847	AssignmentExpression	dp -> stack [ sp ] . hi = INT_MIN		8508656	0		=			
ANR	8508848	MemberAccess	dp -> stack [ sp ] . hi		8508656	0					
ANR	8508849	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508850	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508851	Identifier	dp		8508656	0					
ANR	8508852	Identifier	stack		8508656	1					
ANR	8508853	Identifier	sp		8508656	1					
ANR	8508854	Identifier	hi		8508656	1					
ANR	8508855	Identifier	INT_MIN		8508656	1					
ANR	8508856	ExpressionStatement	dp -> stack [ sp ] . opt = opt	872:3:27704:27727	8508656	9	True				
ANR	8508857	AssignmentExpression	dp -> stack [ sp ] . opt = opt		8508656	0		=			
ANR	8508858	MemberAccess	dp -> stack [ sp ] . opt		8508656	0					
ANR	8508859	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508860	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508861	Identifier	dp		8508656	0					
ANR	8508862	Identifier	stack		8508656	1					
ANR	8508863	Identifier	sp		8508656	1					
ANR	8508864	Identifier	opt		8508656	1					
ANR	8508865	Identifier	opt		8508656	1					
ANR	8508866	ExpressionStatement	dp -> stack [ sp ] . entry = entry	873:3:27732:27759	8508656	10	True				
ANR	8508867	AssignmentExpression	dp -> stack [ sp ] . entry = entry		8508656	0		=			
ANR	8508868	MemberAccess	dp -> stack [ sp ] . entry		8508656	0					
ANR	8508869	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508870	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508871	Identifier	dp		8508656	0					
ANR	8508872	Identifier	stack		8508656	1					
ANR	8508873	Identifier	sp		8508656	1					
ANR	8508874	Identifier	entry		8508656	1					
ANR	8508875	Identifier	entry		8508656	1					
ANR	8508876	ExpressionStatement	dp -> stack [ sp ] . best_val = dp -> value [ opt ] = options [ opt ] . values [ entry ] . value	874:3:27764:27838	8508656	11	True				
ANR	8508877	AssignmentExpression	dp -> stack [ sp ] . best_val = dp -> value [ opt ] = options [ opt ] . values [ entry ] . value		8508656	0		=			
ANR	8508878	MemberAccess	dp -> stack [ sp ] . best_val		8508656	0					
ANR	8508879	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508880	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508881	Identifier	dp		8508656	0					
ANR	8508882	Identifier	stack		8508656	1					
ANR	8508883	Identifier	sp		8508656	1					
ANR	8508884	Identifier	best_val		8508656	1					
ANR	8508885	AssignmentExpression	dp -> value [ opt ] = options [ opt ] . values [ entry ] . value		8508656	1		=			
ANR	8508886	ArrayIndexing	dp -> value [ opt ]		8508656	0					
ANR	8508887	PtrMemberAccess	dp -> value		8508656	0					
ANR	8508888	Identifier	dp		8508656	0					
ANR	8508889	Identifier	value		8508656	1					
ANR	8508890	Identifier	opt		8508656	1					
ANR	8508891	MemberAccess	options [ opt ] . values [ entry ] . value		8508656	1					
ANR	8508892	ArrayIndexing	options [ opt ] . values [ entry ]		8508656	0					
ANR	8508893	MemberAccess	options [ opt ] . values		8508656	0					
ANR	8508894	ArrayIndexing	options [ opt ]		8508656	0					
ANR	8508895	Identifier	options		8508656	0					
ANR	8508896	Identifier	opt		8508656	1					
ANR	8508897	Identifier	values		8508656	1					
ANR	8508898	Identifier	entry		8508656	1					
ANR	8508899	Identifier	value		8508656	1					
ANR	8508900	ExpressionStatement	"set_opt_string ( dp , sp )"	876:3:27844:27866	8508656	12	True				
ANR	8508901	CallExpression	"set_opt_string ( dp , sp )"		8508656	0					
ANR	8508902	Callee	set_opt_string		8508656	0					
ANR	8508903	Identifier	set_opt_string		8508656	0					
ANR	8508904	ArgumentList	dp		8508656	1					
ANR	8508905	Argument	dp		8508656	0					
ANR	8508906	Identifier	dp		8508656	0					
ANR	8508907	Argument	sp		8508656	1					
ANR	8508908	Identifier	sp		8508656	0					
ANR	8508909	IfStatement	"if ( opt_list_end ( dp , opt , entry ) )"		8508656	13					
ANR	8508910	Condition	"opt_list_end ( dp , opt , entry )"	881:7:27990:28017	8508656	0	True				
ANR	8508911	CallExpression	"opt_list_end ( dp , opt , entry )"		8508656	0					
ANR	8508912	Callee	opt_list_end		8508656	0					
ANR	8508913	Identifier	opt_list_end		8508656	0					
ANR	8508914	ArgumentList	dp		8508656	1					
ANR	8508915	Argument	dp		8508656	0					
ANR	8508916	Identifier	dp		8508656	0					
ANR	8508917	Argument	opt		8508656	1					
ANR	8508918	Identifier	opt		8508656	0					
ANR	8508919	Argument	entry		8508656	2					
ANR	8508920	Identifier	entry		8508656	0					
ANR	8508921	CompoundStatement		52:3:1386:1386	8508656	1					
ANR	8508922	ExpressionStatement	dp -> stack [ sp ] . end = 1	883:6:28031:28052	8508656	0	True				
ANR	8508923	AssignmentExpression	dp -> stack [ sp ] . end = 1		8508656	0		=			
ANR	8508924	MemberAccess	dp -> stack [ sp ] . end		8508656	0					
ANR	8508925	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508926	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508927	Identifier	dp		8508656	0					
ANR	8508928	Identifier	stack		8508656	1					
ANR	8508929	Identifier	sp		8508656	1					
ANR	8508930	Identifier	end		8508656	1					
ANR	8508931	PrimaryExpression	1		8508656	1					
ANR	8508932	IfStatement	if ( opt != dp -> min_windowBits )		8508656	1					
ANR	8508933	Condition	opt != dp -> min_windowBits	887:10:28171:28195	8508656	0	True				
ANR	8508934	EqualityExpression	opt != dp -> min_windowBits		8508656	0		!=			
ANR	8508935	Identifier	opt		8508656	0					
ANR	8508936	PtrMemberAccess	dp -> min_windowBits		8508656	1					
ANR	8508937	Identifier	dp		8508656	0					
ANR	8508938	Identifier	min_windowBits		8508656	1					
ANR	8508939	ExpressionStatement	"display_log ( dp , APP_WARNING , ""%s: only testing one value"" , options [ opt ] . name )"	888:9:28207:28299	8508656	1	True				
ANR	8508940	CallExpression	"display_log ( dp , APP_WARNING , ""%s: only testing one value"" , options [ opt ] . name )"		8508656	0					
ANR	8508941	Callee	display_log		8508656	0					
ANR	8508942	Identifier	display_log		8508656	0					
ANR	8508943	ArgumentList	dp		8508656	1					
ANR	8508944	Argument	dp		8508656	0					
ANR	8508945	Identifier	dp		8508656	0					
ANR	8508946	Argument	APP_WARNING		8508656	1					
ANR	8508947	Identifier	APP_WARNING		8508656	0					
ANR	8508948	Argument	"""%s: only testing one value"""		8508656	2					
ANR	8508949	PrimaryExpression	"""%s: only testing one value"""		8508656	0					
ANR	8508950	Argument	options [ opt ] . name		8508656	3					
ANR	8508951	MemberAccess	options [ opt ] . name		8508656	0					
ANR	8508952	ArrayIndexing	options [ opt ]		8508656	0					
ANR	8508953	Identifier	options		8508656	0					
ANR	8508954	Identifier	opt		8508656	1					
ANR	8508955	Identifier	name		8508656	1					
ANR	8508956	ElseStatement	else		8508656	0					
ANR	8508957	CompoundStatement		63:3:1681:1681	8508656	0					
ANR	8508958	ExpressionStatement	dp -> stack [ sp ] . end = 0	894:6:28326:28347	8508656	0	True				
ANR	8508959	AssignmentExpression	dp -> stack [ sp ] . end = 0		8508656	0		=			
ANR	8508960	MemberAccess	dp -> stack [ sp ] . end		8508656	0					
ANR	8508961	ArrayIndexing	dp -> stack [ sp ]		8508656	0					
ANR	8508962	PtrMemberAccess	dp -> stack		8508656	0					
ANR	8508963	Identifier	dp		8508656	0					
ANR	8508964	Identifier	stack		8508656	1					
ANR	8508965	Identifier	sp		8508656	1					
ANR	8508966	Identifier	end		8508656	1					
ANR	8508967	PrimaryExpression	0		8508656	1					
ANR	8508968	ExpressionStatement	dp -> nsp = dp -> tsp	895:6:28355:28372	8508656	1	True				
ANR	8508969	AssignmentExpression	dp -> nsp = dp -> tsp		8508656	0		=			
ANR	8508970	PtrMemberAccess	dp -> nsp		8508656	0					
ANR	8508971	Identifier	dp		8508656	0					
ANR	8508972	Identifier	nsp		8508656	1					
ANR	8508973	PtrMemberAccess	dp -> tsp		8508656	1					
ANR	8508974	Identifier	dp		8508656	0					
ANR	8508975	Identifier	tsp		8508656	1					
ANR	8508976	ExpressionStatement	text_stash ( dp )	902:3:28578:28592	8508656	14	True				
ANR	8508977	CallExpression	text_stash ( dp )		8508656	0					
ANR	8508978	Callee	text_stash		8508656	0					
ANR	8508979	Identifier	text_stash		8508656	0					
ANR	8508980	ArgumentList	dp		8508656	1					
ANR	8508981	Argument	dp		8508656	0					
ANR	8508982	Identifier	dp		8508656	0					
ANR	8508983	ReturnType	static void		8508656	1					
ANR	8508984	Identifier	push_opt		8508656	2					
ANR	8508985	ParameterList	"struct display * dp , unsigned int sp , png_byte opt , int search"		8508656	3					
ANR	8508986	Parameter	struct display * dp	826:9:26380:26397	8508656	0	True				
ANR	8508987	ParameterType	struct display *		8508656	0					
ANR	8508988	Identifier	dp		8508656	1					
ANR	8508989	Parameter	unsigned int sp	826:29:26400:26414	8508656	1	True				
ANR	8508990	ParameterType	unsigned int		8508656	0					
ANR	8508991	Identifier	sp		8508656	1					
ANR	8508992	Parameter	png_byte opt	826:46:26417:26428	8508656	2	True				
ANR	8508993	ParameterType	png_byte		8508656	0					
ANR	8508994	Identifier	opt		8508656	1					
ANR	8508995	Parameter	int search	826:60:26431:26440	8508656	3	True				
ANR	8508996	ParameterType	int		8508656	0					
ANR	8508997	Identifier	search		8508656	1					
ANR	8508998	CFGEntryNode	ENTRY		8508656		True				
ANR	8508999	CFGExitNode	EXIT		8508656		True				
ANR	8509000	Symbol	* sp		8508656						
ANR	8509001	Symbol	* dp -> stack		8508656						
ANR	8509002	Symbol	* * opt		8508656						
ANR	8509003	Symbol	dp -> stack [ sp ] . entry		8508656						
ANR	8509004	Symbol	dp -> stack [ sp ] . hi		8508656						
ANR	8509005	Symbol	dp -> stack [ sp ] . lo		8508656						
ANR	8509006	Symbol	dp -> stack [ sp ] . best_val		8508656						
ANR	8509007	Symbol	dp		8508656						
ANR	8509008	Symbol	* options		8508656						
ANR	8509009	Symbol	dp -> stack [ sp ] . hi_size		8508656						
ANR	8509010	Symbol	options [ opt ] . values [ entry ] . value		8508656						
ANR	8509011	Symbol	INT_MIN		8508656						
ANR	8509012	Symbol	* dp		8508656						
ANR	8509013	Symbol	range_hi		8508656						
ANR	8509014	Symbol	search		8508656						
ANR	8509015	Symbol	options [ opt ] . values [ entry + 1 ] . name		8508656						
ANR	8509016	Symbol	range_lo		8508656						
ANR	8509017	Symbol	options		8508656						
ANR	8509018	Symbol	INT_MAX		8508656						
ANR	8509019	Symbol	SL		8508656						
ANR	8509020	Symbol	dp -> stack [ sp ] . end		8508656						
ANR	8509021	Symbol	dp -> stack [ sp ] . best_size		8508656						
ANR	8509022	Symbol	sp		8508656						
ANR	8509023	Symbol	* opt		8508656						
ANR	8509024	Symbol	* entry		8508656						
ANR	8509025	Symbol	entry_name		8508656						
ANR	8509026	Symbol	* options [ opt ] . values		8508656						
ANR	8509027	Symbol	options [ opt ] . values [ -- entry ] . name		8508656						
ANR	8509028	Symbol	MAX_SIZE		8508656						
ANR	8509029	Symbol	options [ opt ] . name		8508656						
ANR	8509030	Symbol	dp -> min_windowBits		8508656						
ANR	8509031	Symbol	* * options		8508656						
ANR	8509032	Symbol	options [ opt ] . values [ entry + 1 ] . value		8508656						
ANR	8509033	Symbol	dp -> stack		8508656						
ANR	8509034	Symbol	dp -> stack [ sp ] . opt		8508656						
ANR	8509035	Symbol	entry		8508656						
ANR	8509036	Symbol	opt		8508656						
ANR	8509037	Symbol	dp -> value		8508656						
ANR	8509038	Symbol	APP_WARNING		8508656						
ANR	8509039	Symbol	* dp -> value		8508656						
ANR	8509040	Symbol	options [ opt ] . value_count		8508656						
ANR	8509041	Symbol	* * dp		8508656						
ANR	8509042	Symbol	dp -> stack [ sp ] . lo_size		8508656						
ANR	8509043	Symbol	dp -> nsp		8508656						
ANR	8509044	Symbol	dp -> tsp		8508656						
ANR	8509045	Symbol	opt_list_end		8508656						
ANR	8509046	Symbol	options [ opt ] . values		8508656						
ANR	8509047	Function	next_opt	905:0:28597:36435							
ANR	8509048	FunctionDef	"next_opt (struct display * dp , unsigned int sp)"		8509047	0					
ANR	8509049	CompoundStatement		913:0:29017:36435	8509047	0					
ANR	8509050	IdentifierDeclStatement	int search = 0 ;	914:3:29022:29036	8509047	0	True				
ANR	8509051	IdentifierDecl	search = 0		8509047	0					
ANR	8509052	IdentifierDeclType	int		8509047	0					
ANR	8509053	Identifier	search		8509047	1					
ANR	8509054	AssignmentExpression	search = 0		8509047	2		=			
ANR	8509055	Identifier	search		8509047	0					
ANR	8509056	PrimaryExpression	0		8509047	1					
ANR	8509057	IdentifierDeclStatement	"png_byte entry , opt ;"	915:3:29041:29060	8509047	1	True				
ANR	8509058	IdentifierDecl	entry		8509047	0					
ANR	8509059	IdentifierDeclType	png_byte		8509047	0					
ANR	8509060	Identifier	entry		8509047	1					
ANR	8509061	IdentifierDecl	opt		8509047	1					
ANR	8509062	IdentifierDeclType	png_byte		8509047	0					
ANR	8509063	Identifier	opt		8509047	1					
ANR	8509064	IdentifierDeclStatement	const char * entry_name ;	916:3:29065:29087	8509047	2	True				
ANR	8509065	IdentifierDecl	* entry_name		8509047	0					
ANR	8509066	IdentifierDeclType	const char *		8509047	0					
ANR	8509067	Identifier	entry_name		8509047	1					
ANR	8509068	ExpressionStatement	assert ( sp + 1U == dp -> tsp && ! dp -> stack [ sp ] . end )	919:3:29167:29213	8509047	3	True				
ANR	8509069	CallExpression	assert ( sp + 1U == dp -> tsp && ! dp -> stack [ sp ] . end )		8509047	0					
ANR	8509070	Callee	assert		8509047	0					
ANR	8509071	Identifier	assert		8509047	0					
ANR	8509072	ArgumentList	sp + 1U == dp -> tsp && ! dp -> stack [ sp ] . end		8509047	1					
ANR	8509073	Argument	sp + 1U == dp -> tsp && ! dp -> stack [ sp ] . end		8509047	0					
ANR	8509074	AndExpression	sp + 1U == dp -> tsp && ! dp -> stack [ sp ] . end		8509047	0		&&			
ANR	8509075	EqualityExpression	sp + 1U == dp -> tsp		8509047	0		==			
ANR	8509076	AdditiveExpression	sp + 1U		8509047	0		+			
ANR	8509077	Identifier	sp		8509047	0					
ANR	8509078	PrimaryExpression	1U		8509047	1					
ANR	8509079	PtrMemberAccess	dp -> tsp		8509047	1					
ANR	8509080	Identifier	dp		8509047	0					
ANR	8509081	Identifier	tsp		8509047	1					
ANR	8509082	UnaryOperationExpression	! dp -> stack [ sp ] . end		8509047	1					
ANR	8509083	UnaryOperator	!		8509047	0					
ANR	8509084	MemberAccess	dp -> stack [ sp ] . end		8509047	1					
ANR	8509085	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509086	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509087	Identifier	dp		8509047	0					
ANR	8509088	Identifier	stack		8509047	1					
ANR	8509089	Identifier	sp		8509047	1					
ANR	8509090	Identifier	end		8509047	1					
ANR	8509091	ExpressionStatement	opt = dp -> stack [ sp ] . opt	921:3:29219:29242	8509047	4	True				
ANR	8509092	AssignmentExpression	opt = dp -> stack [ sp ] . opt		8509047	0		=			
ANR	8509093	Identifier	opt		8509047	0					
ANR	8509094	MemberAccess	dp -> stack [ sp ] . opt		8509047	1					
ANR	8509095	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509096	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509097	Identifier	dp		8509047	0					
ANR	8509098	Identifier	stack		8509047	1					
ANR	8509099	Identifier	sp		8509047	1					
ANR	8509100	Identifier	opt		8509047	1					
ANR	8509101	ExpressionStatement	entry = dp -> stack [ sp ] . entry	922:3:29247:29274	8509047	5	True				
ANR	8509102	AssignmentExpression	entry = dp -> stack [ sp ] . entry		8509047	0		=			
ANR	8509103	Identifier	entry		8509047	0					
ANR	8509104	MemberAccess	dp -> stack [ sp ] . entry		8509047	1					
ANR	8509105	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509106	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509107	Identifier	dp		8509047	0					
ANR	8509108	Identifier	stack		8509047	1					
ANR	8509109	Identifier	sp		8509047	1					
ANR	8509110	Identifier	entry		8509047	1					
ANR	8509111	ExpressionStatement	assert ( entry + 1U < options [ opt ] . value_count )	923:3:29279:29322	8509047	6	True				
ANR	8509112	CallExpression	assert ( entry + 1U < options [ opt ] . value_count )		8509047	0					
ANR	8509113	Callee	assert		8509047	0					
ANR	8509114	Identifier	assert		8509047	0					
ANR	8509115	ArgumentList	entry + 1U < options [ opt ] . value_count		8509047	1					
ANR	8509116	Argument	entry + 1U < options [ opt ] . value_count		8509047	0					
ANR	8509117	RelationalExpression	entry + 1U < options [ opt ] . value_count		8509047	0		<			
ANR	8509118	AdditiveExpression	entry + 1U		8509047	0		+			
ANR	8509119	Identifier	entry		8509047	0					
ANR	8509120	PrimaryExpression	1U		8509047	1					
ANR	8509121	MemberAccess	options [ opt ] . value_count		8509047	1					
ANR	8509122	ArrayIndexing	options [ opt ]		8509047	0					
ANR	8509123	Identifier	options		8509047	0					
ANR	8509124	Identifier	opt		8509047	1					
ANR	8509125	Identifier	value_count		8509047	1					
ANR	8509126	ExpressionStatement	entry_name = options [ opt ] . values [ entry ] . name	924:3:29327:29371	8509047	7	True				
ANR	8509127	AssignmentExpression	entry_name = options [ opt ] . values [ entry ] . name		8509047	0		=			
ANR	8509128	Identifier	entry_name		8509047	0					
ANR	8509129	MemberAccess	options [ opt ] . values [ entry ] . name		8509047	1					
ANR	8509130	ArrayIndexing	options [ opt ] . values [ entry ]		8509047	0					
ANR	8509131	MemberAccess	options [ opt ] . values		8509047	0					
ANR	8509132	ArrayIndexing	options [ opt ]		8509047	0					
ANR	8509133	Identifier	options		8509047	0					
ANR	8509134	Identifier	opt		8509047	1					
ANR	8509135	Identifier	values		8509047	1					
ANR	8509136	Identifier	entry		8509047	1					
ANR	8509137	Identifier	name		8509047	1					
ANR	8509138	ExpressionStatement	assert ( entry_name != NULL )	925:3:29376:29402	8509047	8	True				
ANR	8509139	CallExpression	assert ( entry_name != NULL )		8509047	0					
ANR	8509140	Callee	assert		8509047	0					
ANR	8509141	Identifier	assert		8509047	0					
ANR	8509142	ArgumentList	entry_name != NULL		8509047	1					
ANR	8509143	Argument	entry_name != NULL		8509047	0					
ANR	8509144	EqualityExpression	entry_name != NULL		8509047	0		!=			
ANR	8509145	Identifier	entry_name		8509047	0					
ANR	8509146	Identifier	NULL		8509047	1					
ANR	8509147	IfStatement	if ( entry_name == range_lo )		8509047	9					
ANR	8509148	Condition	entry_name == range_lo	930:7:29553:29574	8509047	0	True				
ANR	8509149	EqualityExpression	entry_name == range_lo		8509047	0		==			
ANR	8509150	Identifier	entry_name		8509047	0					
ANR	8509151	Identifier	range_lo		8509047	1					
ANR	8509152	CompoundStatement		19:3:576:576	8509047	1					
ANR	8509153	IfStatement	if ( dp -> stack [ sp ] . lo > dp -> stack [ sp ] . hi )		8509047	0					
ANR	8509154	Condition	dp -> stack [ sp ] . lo > dp -> stack [ sp ] . hi	936:10:29811:29845	8509047	0	True				
ANR	8509155	RelationalExpression	dp -> stack [ sp ] . lo > dp -> stack [ sp ] . hi		8509047	0		>			
ANR	8509156	MemberAccess	dp -> stack [ sp ] . lo		8509047	0					
ANR	8509157	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509158	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509159	Identifier	dp		8509047	0					
ANR	8509160	Identifier	stack		8509047	1					
ANR	8509161	Identifier	sp		8509047	1					
ANR	8509162	Identifier	lo		8509047	1					
ANR	8509163	MemberAccess	dp -> stack [ sp ] . hi		8509047	1					
ANR	8509164	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509165	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509166	Identifier	dp		8509047	0					
ANR	8509167	Identifier	stack		8509047	1					
ANR	8509168	Identifier	sp		8509047	1					
ANR	8509169	Identifier	hi		8509047	1					
ANR	8509170	ExpressionStatement	dp -> value [ opt ] ++	937:9:29857:29873	8509047	1	True				
ANR	8509171	PostIncDecOperationExpression	dp -> value [ opt ] ++		8509047	0					
ANR	8509172	ArrayIndexing	dp -> value [ opt ]		8509047	0					
ANR	8509173	PtrMemberAccess	dp -> value		8509047	0					
ANR	8509174	Identifier	dp		8509047	0					
ANR	8509175	Identifier	value		8509047	1					
ANR	8509176	Identifier	opt		8509047	1					
ANR	8509177	IncDec	++		8509047	1					
ANR	8509178	ElseStatement	else		8509047	0					
ANR	8509179	CompoundStatement		33:9:1087:1111	8509047	0					
ANR	8509180	IdentifierDeclStatement	png_alloc_size_t best_size = dp -> stack [ sp ] . best_size ;	942:9:29970:30022	8509047	0	True				
ANR	8509181	IdentifierDecl	best_size = dp -> stack [ sp ] . best_size		8509047	0					
ANR	8509182	IdentifierDeclType	png_alloc_size_t		8509047	0					
ANR	8509183	Identifier	best_size		8509047	1					
ANR	8509184	AssignmentExpression	best_size = dp -> stack [ sp ] . best_size		8509047	2		=			
ANR	8509185	Identifier	best_size		8509047	0					
ANR	8509186	MemberAccess	dp -> stack [ sp ] . best_size		8509047	1					
ANR	8509187	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509188	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509189	Identifier	dp		8509047	0					
ANR	8509190	Identifier	stack		8509047	1					
ANR	8509191	Identifier	sp		8509047	1					
ANR	8509192	Identifier	best_size		8509047	1					
ANR	8509193	IdentifierDeclStatement	int lo = dp -> stack [ sp ] . lo ;	943:9:30033:30058	8509047	1	True				
ANR	8509194	IdentifierDecl	lo = dp -> stack [ sp ] . lo		8509047	0					
ANR	8509195	IdentifierDeclType	int		8509047	0					
ANR	8509196	Identifier	lo		8509047	1					
ANR	8509197	AssignmentExpression	lo = dp -> stack [ sp ] . lo		8509047	2		=			
ANR	8509198	Identifier	lo		8509047	0					
ANR	8509199	MemberAccess	dp -> stack [ sp ] . lo		8509047	1					
ANR	8509200	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509201	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509202	Identifier	dp		8509047	0					
ANR	8509203	Identifier	stack		8509047	1					
ANR	8509204	Identifier	sp		8509047	1					
ANR	8509205	Identifier	lo		8509047	1					
ANR	8509206	IdentifierDeclStatement	int hi = dp -> stack [ sp ] . hi ;	944:9:30069:30094	8509047	2	True				
ANR	8509207	IdentifierDecl	hi = dp -> stack [ sp ] . hi		8509047	0					
ANR	8509208	IdentifierDeclType	int		8509047	0					
ANR	8509209	Identifier	hi		8509047	1					
ANR	8509210	AssignmentExpression	hi = dp -> stack [ sp ] . hi		8509047	2		=			
ANR	8509211	Identifier	hi		8509047	0					
ANR	8509212	MemberAccess	dp -> stack [ sp ] . hi		8509047	1					
ANR	8509213	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509214	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509215	Identifier	dp		8509047	0					
ANR	8509216	Identifier	stack		8509047	1					
ANR	8509217	Identifier	sp		8509047	1					
ANR	8509218	Identifier	hi		8509047	1					
ANR	8509219	IdentifierDeclStatement	int val = dp -> value [ opt ] ;	945:9:30105:30129	8509047	3	True				
ANR	8509220	IdentifierDecl	val = dp -> value [ opt ]		8509047	0					
ANR	8509221	IdentifierDeclType	int		8509047	0					
ANR	8509222	Identifier	val		8509047	1					
ANR	8509223	AssignmentExpression	val = dp -> value [ opt ]		8509047	2		=			
ANR	8509224	Identifier	val		8509047	0					
ANR	8509225	ArrayIndexing	dp -> value [ opt ]		8509047	1					
ANR	8509226	PtrMemberAccess	dp -> value		8509047	0					
ANR	8509227	Identifier	dp		8509047	0					
ANR	8509228	Identifier	value		8509047	1					
ANR	8509229	Identifier	opt		8509047	1					
ANR	8509230	ExpressionStatement	search = 1	947:9:30141:30151	8509047	4	True				
ANR	8509231	AssignmentExpression	search = 1		8509047	0		=			
ANR	8509232	Identifier	search		8509047	0					
ANR	8509233	PrimaryExpression	1		8509047	1					
ANR	8509234	ExpressionStatement	assert ( best_size < MAX_SIZE )	948:9:30191:30219	8509047	5	True				
ANR	8509235	CallExpression	assert ( best_size < MAX_SIZE )		8509047	0					
ANR	8509236	Callee	assert		8509047	0					
ANR	8509237	Identifier	assert		8509047	0					
ANR	8509238	ArgumentList	best_size < MAX_SIZE		8509047	1					
ANR	8509239	Argument	best_size < MAX_SIZE		8509047	0					
ANR	8509240	RelationalExpression	best_size < MAX_SIZE		8509047	0		<			
ANR	8509241	Identifier	best_size		8509047	0					
ANR	8509242	Identifier	MAX_SIZE		8509047	1					
ANR	8509243	IfStatement	if ( val == lo )		8509047	6					
ANR	8509244	Condition	val == lo	950:13:30235:30243	8509047	0	True				
ANR	8509245	EqualityExpression	val == lo		8509047	0		==			
ANR	8509246	Identifier	val		8509047	0					
ANR	8509247	Identifier	lo		8509047	1					
ANR	8509248	CompoundStatement		39:9:1237:1237	8509047	1					
ANR	8509249	ExpressionStatement	dp -> stack [ sp ] . lo_size = best_size	953:12:30334:30367	8509047	0	True				
ANR	8509250	AssignmentExpression	dp -> stack [ sp ] . lo_size = best_size		8509047	0		=			
ANR	8509251	MemberAccess	dp -> stack [ sp ] . lo_size		8509047	0					
ANR	8509252	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509253	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509254	Identifier	dp		8509047	0					
ANR	8509255	Identifier	stack		8509047	1					
ANR	8509256	Identifier	sp		8509047	1					
ANR	8509257	Identifier	lo_size		8509047	1					
ANR	8509258	Identifier	best_size		8509047	1					
ANR	8509259	ExpressionStatement	assert ( hi > val )	954:12:30381:30397	8509047	1	True				
ANR	8509260	CallExpression	assert ( hi > val )		8509047	0					
ANR	8509261	Callee	assert		8509047	0					
ANR	8509262	Identifier	assert		8509047	0					
ANR	8509263	ArgumentList	hi > val		8509047	1					
ANR	8509264	Argument	hi > val		8509047	0					
ANR	8509265	RelationalExpression	hi > val		8509047	0		>			
ANR	8509266	Identifier	hi		8509047	0					
ANR	8509267	Identifier	val		8509047	1					
ANR	8509268	IfStatement	if ( hi == val + 1 )		8509047	2					
ANR	8509269	Condition	hi == val + 1	956:16:30416:30426	8509047	0	True				
ANR	8509270	EqualityExpression	hi == val + 1		8509047	0		==			
ANR	8509271	Identifier	hi		8509047	0					
ANR	8509272	AdditiveExpression	val + 1		8509047	1		+			
ANR	8509273	Identifier	val		8509047	0					
ANR	8509274	PrimaryExpression	1		8509047	1					
ANR	8509275	ExpressionStatement	dp -> stack [ sp ] . end = 1	957:15:30465:30486	8509047	1	True				
ANR	8509276	AssignmentExpression	dp -> stack [ sp ] . end = 1		8509047	0		=			
ANR	8509277	MemberAccess	dp -> stack [ sp ] . end		8509047	0					
ANR	8509278	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509279	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509280	Identifier	dp		8509047	0					
ANR	8509281	Identifier	stack		8509047	1					
ANR	8509282	Identifier	sp		8509047	1					
ANR	8509283	Identifier	end		8509047	1					
ANR	8509284	PrimaryExpression	1		8509047	1					
ANR	8509285	ExpressionStatement	val = hi	959:12:30501:30509	8509047	3	True				
ANR	8509286	AssignmentExpression	val = hi		8509047	0		=			
ANR	8509287	Identifier	val		8509047	0					
ANR	8509288	Identifier	hi		8509047	1					
ANR	8509289	ElseStatement	else		8509047	0					
ANR	8509290	IfStatement	if ( val == hi )		8509047	0					
ANR	8509291	Condition	val == hi	962:18:30541:30549	8509047	0	True				
ANR	8509292	EqualityExpression	val == hi		8509047	0		==			
ANR	8509293	Identifier	val		8509047	0					
ANR	8509294	Identifier	hi		8509047	1					
ANR	8509295	CompoundStatement		51:9:1543:1543	8509047	1					
ANR	8509296	ExpressionStatement	dp -> stack [ sp ] . hi_size = best_size	964:12:30575:30608	8509047	0	True				
ANR	8509297	AssignmentExpression	dp -> stack [ sp ] . hi_size = best_size		8509047	0		=			
ANR	8509298	MemberAccess	dp -> stack [ sp ] . hi_size		8509047	0					
ANR	8509299	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509300	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509301	Identifier	dp		8509047	0					
ANR	8509302	Identifier	stack		8509047	1					
ANR	8509303	Identifier	sp		8509047	1					
ANR	8509304	Identifier	hi_size		8509047	1					
ANR	8509305	Identifier	best_size		8509047	1					
ANR	8509306	ExpressionStatement	assert ( val > lo + 1 )	965:12:30622:30640	8509047	1	True				
ANR	8509307	CallExpression	assert ( val > lo + 1 )		8509047	0					
ANR	8509308	Callee	assert		8509047	0					
ANR	8509309	Identifier	assert		8509047	0					
ANR	8509310	ArgumentList	val > lo + 1		8509047	1					
ANR	8509311	Argument	val > lo + 1		8509047	0					
ANR	8509312	RelationalExpression	val > lo + 1		8509047	0		>			
ANR	8509313	Identifier	val		8509047	0					
ANR	8509314	AdditiveExpression	lo + 1		8509047	1		+			
ANR	8509315	Identifier	lo		8509047	0					
ANR	8509316	PrimaryExpression	1		8509047	1					
ANR	8509317	IfStatement	if ( val == lo + 2 )		8509047	2					
ANR	8509318	Condition	val == lo + 2	967:16:30686:30696	8509047	0	True				
ANR	8509319	EqualityExpression	val == lo + 2		8509047	0		==			
ANR	8509320	Identifier	val		8509047	0					
ANR	8509321	AdditiveExpression	lo + 2		8509047	1		+			
ANR	8509322	Identifier	lo		8509047	0					
ANR	8509323	PrimaryExpression	2		8509047	1					
ANR	8509324	ExpressionStatement	dp -> stack [ sp ] . end = 1	968:15:30747:30768	8509047	1	True				
ANR	8509325	AssignmentExpression	dp -> stack [ sp ] . end = 1		8509047	0		=			
ANR	8509326	MemberAccess	dp -> stack [ sp ] . end		8509047	0					
ANR	8509327	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509328	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509329	Identifier	dp		8509047	0					
ANR	8509330	Identifier	stack		8509047	1					
ANR	8509331	Identifier	sp		8509047	1					
ANR	8509332	Identifier	end		8509047	1					
ANR	8509333	PrimaryExpression	1		8509047	1					
ANR	8509334	ExpressionStatement	val = ( lo + val ) / 2	970:12:30783:30801	8509047	3	True				
ANR	8509335	AssignmentExpression	val = ( lo + val ) / 2		8509047	0		=			
ANR	8509336	Identifier	val		8509047	0					
ANR	8509337	MultiplicativeExpression	( lo + val ) / 2		8509047	1		/			
ANR	8509338	AdditiveExpression	lo + val		8509047	0		+			
ANR	8509339	Identifier	lo		8509047	0					
ANR	8509340	Identifier	val		8509047	1					
ANR	8509341	PrimaryExpression	2		8509047	1					
ANR	8509342	ElseStatement	else		8509047	0					
ANR	8509343	CompoundStatement		64:12:1896:1944	8509047	0					
ANR	8509344	IdentifierDeclStatement	png_alloc_size_t lo_size = dp -> stack [ sp ] . lo_size ;	975:12:30852:30900	8509047	0	True				
ANR	8509345	IdentifierDecl	lo_size = dp -> stack [ sp ] . lo_size		8509047	0					
ANR	8509346	IdentifierDeclType	png_alloc_size_t		8509047	0					
ANR	8509347	Identifier	lo_size		8509047	1					
ANR	8509348	AssignmentExpression	lo_size = dp -> stack [ sp ] . lo_size		8509047	2		=			
ANR	8509349	Identifier	lo_size		8509047	0					
ANR	8509350	MemberAccess	dp -> stack [ sp ] . lo_size		8509047	1					
ANR	8509351	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509352	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509353	Identifier	dp		8509047	0					
ANR	8509354	Identifier	stack		8509047	1					
ANR	8509355	Identifier	sp		8509047	1					
ANR	8509356	Identifier	lo_size		8509047	1					
ANR	8509357	IdentifierDeclStatement	png_alloc_size_t hi_size = dp -> stack [ sp ] . hi_size ;	976:12:30914:30962	8509047	1	True				
ANR	8509358	IdentifierDecl	hi_size = dp -> stack [ sp ] . hi_size		8509047	0					
ANR	8509359	IdentifierDeclType	png_alloc_size_t		8509047	0					
ANR	8509360	Identifier	hi_size		8509047	1					
ANR	8509361	AssignmentExpression	hi_size = dp -> stack [ sp ] . hi_size		8509047	2		=			
ANR	8509362	Identifier	hi_size		8509047	0					
ANR	8509363	MemberAccess	dp -> stack [ sp ] . hi_size		8509047	1					
ANR	8509364	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509365	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509366	Identifier	dp		8509047	0					
ANR	8509367	Identifier	stack		8509047	1					
ANR	8509368	Identifier	sp		8509047	1					
ANR	8509369	Identifier	hi_size		8509047	1					
ANR	8509370	ExpressionStatement	assert ( lo_size < MAX_SIZE && hi_size < MAX_SIZE )	979:12:31030:31078	8509047	2	True				
ANR	8509371	CallExpression	assert ( lo_size < MAX_SIZE && hi_size < MAX_SIZE )		8509047	0					
ANR	8509372	Callee	assert		8509047	0					
ANR	8509373	Identifier	assert		8509047	0					
ANR	8509374	ArgumentList	lo_size < MAX_SIZE && hi_size < MAX_SIZE		8509047	1					
ANR	8509375	Argument	lo_size < MAX_SIZE && hi_size < MAX_SIZE		8509047	0					
ANR	8509376	AndExpression	lo_size < MAX_SIZE && hi_size < MAX_SIZE		8509047	0		&&			
ANR	8509377	RelationalExpression	lo_size < MAX_SIZE		8509047	0		<			
ANR	8509378	Identifier	lo_size		8509047	0					
ANR	8509379	Identifier	MAX_SIZE		8509047	1					
ANR	8509380	RelationalExpression	hi_size < MAX_SIZE		8509047	1		<			
ANR	8509381	Identifier	hi_size		8509047	0					
ANR	8509382	Identifier	MAX_SIZE		8509047	1					
ANR	8509383	IfStatement	if ( val < lo )		8509047	3					
ANR	8509384	Condition	val < lo	984:16:31240:31247	8509047	0	True				
ANR	8509385	RelationalExpression	val < lo		8509047	0		<			
ANR	8509386	Identifier	val		8509047	0					
ANR	8509387	Identifier	lo		8509047	1					
ANR	8509388	CompoundStatement		73:12:2267:2267	8509047	1					
ANR	8509389	ExpressionStatement	dp -> stack [ sp ] . lo = val	987:15:31340:31362	8509047	0	True				
ANR	8509390	AssignmentExpression	dp -> stack [ sp ] . lo = val		8509047	0		=			
ANR	8509391	MemberAccess	dp -> stack [ sp ] . lo		8509047	0					
ANR	8509392	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509393	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509394	Identifier	dp		8509047	0					
ANR	8509395	Identifier	stack		8509047	1					
ANR	8509396	Identifier	sp		8509047	1					
ANR	8509397	Identifier	lo		8509047	1					
ANR	8509398	Identifier	val		8509047	1					
ANR	8509399	ExpressionStatement	dp -> stack [ sp ] . lo_size = best_size	988:15:31379:31412	8509047	1	True				
ANR	8509400	AssignmentExpression	dp -> stack [ sp ] . lo_size = best_size		8509047	0		=			
ANR	8509401	MemberAccess	dp -> stack [ sp ] . lo_size		8509047	0					
ANR	8509402	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509403	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509404	Identifier	dp		8509047	0					
ANR	8509405	Identifier	stack		8509047	1					
ANR	8509406	Identifier	sp		8509047	1					
ANR	8509407	Identifier	lo_size		8509047	1					
ANR	8509408	Identifier	best_size		8509047	1					
ANR	8509409	ExpressionStatement	val = lo	989:15:31429:31437	8509047	2	True				
ANR	8509410	AssignmentExpression	val = lo		8509047	0		=			
ANR	8509411	Identifier	val		8509047	0					
ANR	8509412	Identifier	lo		8509047	1					
ANR	8509413	ExpressionStatement	best_size = lo_size	990:15:31454:31473	8509047	3	True				
ANR	8509414	AssignmentExpression	best_size = lo_size		8509047	0		=			
ANR	8509415	Identifier	best_size		8509047	0					
ANR	8509416	Identifier	lo_size		8509047	1					
ANR	8509417	ExpressionStatement	lo = dp -> stack [ sp ] . lo	991:15:31490:31511	8509047	4	True				
ANR	8509418	AssignmentExpression	lo = dp -> stack [ sp ] . lo		8509047	0		=			
ANR	8509419	Identifier	lo		8509047	0					
ANR	8509420	MemberAccess	dp -> stack [ sp ] . lo		8509047	1					
ANR	8509421	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509422	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509423	Identifier	dp		8509047	0					
ANR	8509424	Identifier	stack		8509047	1					
ANR	8509425	Identifier	sp		8509047	1					
ANR	8509426	Identifier	lo		8509047	1					
ANR	8509427	ExpressionStatement	lo_size = dp -> stack [ sp ] . lo_size	992:15:31528:31559	8509047	5	True				
ANR	8509428	AssignmentExpression	lo_size = dp -> stack [ sp ] . lo_size		8509047	0		=			
ANR	8509429	Identifier	lo_size		8509047	0					
ANR	8509430	MemberAccess	dp -> stack [ sp ] . lo_size		8509047	1					
ANR	8509431	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509432	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509433	Identifier	dp		8509047	0					
ANR	8509434	Identifier	stack		8509047	1					
ANR	8509435	Identifier	sp		8509047	1					
ANR	8509436	Identifier	lo_size		8509047	1					
ANR	8509437	ElseStatement	else		8509047	0					
ANR	8509438	IfStatement	if ( val > hi )		8509047	0					
ANR	8509439	Condition	val > hi	995:21:31597:31604	8509047	0	True				
ANR	8509440	RelationalExpression	val > hi		8509047	0		>			
ANR	8509441	Identifier	val		8509047	0					
ANR	8509442	Identifier	hi		8509047	1					
ANR	8509443	CompoundStatement		84:12:2624:2624	8509047	1					
ANR	8509444	ExpressionStatement	dp -> stack [ sp ] . hi = val	998:15:31697:31719	8509047	0	True				
ANR	8509445	AssignmentExpression	dp -> stack [ sp ] . hi = val		8509047	0		=			
ANR	8509446	MemberAccess	dp -> stack [ sp ] . hi		8509047	0					
ANR	8509447	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509448	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509449	Identifier	dp		8509047	0					
ANR	8509450	Identifier	stack		8509047	1					
ANR	8509451	Identifier	sp		8509047	1					
ANR	8509452	Identifier	hi		8509047	1					
ANR	8509453	Identifier	val		8509047	1					
ANR	8509454	ExpressionStatement	dp -> stack [ sp ] . hi_size = best_size	999:15:31736:31769	8509047	1	True				
ANR	8509455	AssignmentExpression	dp -> stack [ sp ] . hi_size = best_size		8509047	0		=			
ANR	8509456	MemberAccess	dp -> stack [ sp ] . hi_size		8509047	0					
ANR	8509457	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509458	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509459	Identifier	dp		8509047	0					
ANR	8509460	Identifier	stack		8509047	1					
ANR	8509461	Identifier	sp		8509047	1					
ANR	8509462	Identifier	hi_size		8509047	1					
ANR	8509463	Identifier	best_size		8509047	1					
ANR	8509464	ExpressionStatement	val = hi	1000:15:31786:31794	8509047	2	True				
ANR	8509465	AssignmentExpression	val = hi		8509047	0		=			
ANR	8509466	Identifier	val		8509047	0					
ANR	8509467	Identifier	hi		8509047	1					
ANR	8509468	ExpressionStatement	best_size = hi_size	1001:15:31811:31830	8509047	3	True				
ANR	8509469	AssignmentExpression	best_size = hi_size		8509047	0		=			
ANR	8509470	Identifier	best_size		8509047	0					
ANR	8509471	Identifier	hi_size		8509047	1					
ANR	8509472	ExpressionStatement	hi = dp -> stack [ sp ] . hi	1002:15:31847:31868	8509047	4	True				
ANR	8509473	AssignmentExpression	hi = dp -> stack [ sp ] . hi		8509047	0		=			
ANR	8509474	Identifier	hi		8509047	0					
ANR	8509475	MemberAccess	dp -> stack [ sp ] . hi		8509047	1					
ANR	8509476	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509477	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509478	Identifier	dp		8509047	0					
ANR	8509479	Identifier	stack		8509047	1					
ANR	8509480	Identifier	sp		8509047	1					
ANR	8509481	Identifier	hi		8509047	1					
ANR	8509482	ExpressionStatement	hi_size = dp -> stack [ sp ] . hi_size	1003:15:31885:31916	8509047	5	True				
ANR	8509483	AssignmentExpression	hi_size = dp -> stack [ sp ] . hi_size		8509047	0		=			
ANR	8509484	Identifier	hi_size		8509047	0					
ANR	8509485	MemberAccess	dp -> stack [ sp ] . hi_size		8509047	1					
ANR	8509486	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509487	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509488	Identifier	dp		8509047	0					
ANR	8509489	Identifier	stack		8509047	1					
ANR	8509490	Identifier	sp		8509047	1					
ANR	8509491	Identifier	hi_size		8509047	1					
ANR	8509492	ExpressionStatement	assert ( lo < val && val < hi )	1007:12:32026:32054	8509047	4	True				
ANR	8509493	CallExpression	assert ( lo < val && val < hi )		8509047	0					
ANR	8509494	Callee	assert		8509047	0					
ANR	8509495	Identifier	assert		8509047	0					
ANR	8509496	ArgumentList	lo < val && val < hi		8509047	1					
ANR	8509497	Argument	lo < val && val < hi		8509047	0					
ANR	8509498	AndExpression	lo < val && val < hi		8509047	0		&&			
ANR	8509499	RelationalExpression	lo < val		8509047	0		<			
ANR	8509500	Identifier	lo		8509047	0					
ANR	8509501	Identifier	val		8509047	1					
ANR	8509502	RelationalExpression	val < hi		8509047	1		<			
ANR	8509503	Identifier	val		8509047	0					
ANR	8509504	Identifier	hi		8509047	1					
ANR	8509505	IfStatement	if ( hi == lo + 3 )		8509047	5					
ANR	8509506	Condition	hi == lo + 3	1012:16:32209:32218	8509047	0	True				
ANR	8509507	EqualityExpression	hi == lo + 3		8509047	0		==			
ANR	8509508	Identifier	hi		8509047	0					
ANR	8509509	AdditiveExpression	lo + 3		8509047	1		+			
ANR	8509510	Identifier	lo		8509047	0					
ANR	8509511	PrimaryExpression	3		8509047	1					
ANR	8509512	CompoundStatement		101:12:3215:3215	8509047	1					
ANR	8509513	ExpressionStatement	val = lo + ( ( val == lo + 1 ) ? 2 : 1 )	1017:15:32392:32426	8509047	0	True				
ANR	8509514	AssignmentExpression	val = lo + ( ( val == lo + 1 ) ? 2 : 1 )		8509047	0		=			
ANR	8509515	Identifier	val		8509047	0					
ANR	8509516	AdditiveExpression	lo + ( ( val == lo + 1 ) ? 2 : 1 )		8509047	1		+			
ANR	8509517	Identifier	lo		8509047	0					
ANR	8509518	ConditionalExpression	( val == lo + 1 ) ? 2 : 1		8509047	1					
ANR	8509519	Condition	val == lo + 1		8509047	0					
ANR	8509520	EqualityExpression	val == lo + 1		8509047	0		==			
ANR	8509521	Identifier	val		8509047	0					
ANR	8509522	AdditiveExpression	lo + 1		8509047	1		+			
ANR	8509523	Identifier	lo		8509047	0					
ANR	8509524	PrimaryExpression	1		8509047	1					
ANR	8509525	PrimaryExpression	2		8509047	1					
ANR	8509526	PrimaryExpression	1		8509047	2					
ANR	8509527	ExpressionStatement	assert ( lo < val && val < hi )	1018:15:32443:32471	8509047	1	True				
ANR	8509528	CallExpression	assert ( lo < val && val < hi )		8509047	0					
ANR	8509529	Callee	assert		8509047	0					
ANR	8509530	Identifier	assert		8509047	0					
ANR	8509531	ArgumentList	lo < val && val < hi		8509047	1					
ANR	8509532	Argument	lo < val && val < hi		8509047	0					
ANR	8509533	AndExpression	lo < val && val < hi		8509047	0		&&			
ANR	8509534	RelationalExpression	lo < val		8509047	0		<			
ANR	8509535	Identifier	lo		8509047	0					
ANR	8509536	Identifier	val		8509047	1					
ANR	8509537	RelationalExpression	val < hi		8509047	1		<			
ANR	8509538	Identifier	val		8509047	0					
ANR	8509539	Identifier	hi		8509047	1					
ANR	8509540	ExpressionStatement	dp -> stack [ sp ] . end = 1	1019:15:32488:32509	8509047	2	True				
ANR	8509541	AssignmentExpression	dp -> stack [ sp ] . end = 1		8509047	0		=			
ANR	8509542	MemberAccess	dp -> stack [ sp ] . end		8509047	0					
ANR	8509543	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509544	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509545	Identifier	dp		8509047	0					
ANR	8509546	Identifier	stack		8509047	1					
ANR	8509547	Identifier	sp		8509047	1					
ANR	8509548	Identifier	end		8509047	1					
ANR	8509549	PrimaryExpression	1		8509047	1					
ANR	8509550	ElseStatement	else		8509047	0					
ANR	8509551	CompoundStatement		111:12:3537:3537	8509047	0					
ANR	8509552	ExpressionStatement	assert ( hi > lo + 3 )	1030:15:32898:32915	8509047	0	True				
ANR	8509553	CallExpression	assert ( hi > lo + 3 )		8509047	0					
ANR	8509554	Callee	assert		8509047	0					
ANR	8509555	Identifier	assert		8509047	0					
ANR	8509556	ArgumentList	hi > lo + 3		8509047	1					
ANR	8509557	Argument	hi > lo + 3		8509047	0					
ANR	8509558	RelationalExpression	hi > lo + 3		8509047	0		>			
ANR	8509559	Identifier	hi		8509047	0					
ANR	8509560	AdditiveExpression	lo + 3		8509047	1		+			
ANR	8509561	Identifier	lo		8509047	0					
ANR	8509562	PrimaryExpression	3		8509047	1					
ANR	8509563	IfStatement	if ( lo_size <= best_size && best_size <= hi_size )		8509047	1					
ANR	8509564	Condition	lo_size <= best_size && best_size <= hi_size	1032:19:32937:32980	8509047	0	True				
ANR	8509565	AndExpression	lo_size <= best_size && best_size <= hi_size		8509047	0		&&			
ANR	8509566	RelationalExpression	lo_size <= best_size		8509047	0		<=			
ANR	8509567	Identifier	lo_size		8509047	0					
ANR	8509568	Identifier	best_size		8509047	1					
ANR	8509569	RelationalExpression	best_size <= hi_size		8509047	1		<=			
ANR	8509570	Identifier	best_size		8509047	0					
ANR	8509571	Identifier	hi_size		8509047	1					
ANR	8509572	CompoundStatement		121:15:3980:3980	8509047	1					
ANR	8509573	IfStatement	if ( val == lo + 1 )		8509047	0					
ANR	8509574	Condition	val == lo + 1	1039:22:33338:33348	8509047	0	True				
ANR	8509575	EqualityExpression	val == lo + 1		8509047	0		==			
ANR	8509576	Identifier	val		8509047	0					
ANR	8509577	AdditiveExpression	lo + 1		8509047	1		+			
ANR	8509578	Identifier	lo		8509047	0					
ANR	8509579	PrimaryExpression	1		8509047	1					
ANR	8509580	CompoundStatement		128:18:4351:4351	8509047	1					
ANR	8509581	ExpressionStatement	++ val	1041:21:33392:33397	8509047	0	True				
ANR	8509582	UnaryExpression	++ val		8509047	0					
ANR	8509583	IncDec	++		8509047	0					
ANR	8509584	Identifier	val		8509047	1					
ANR	8509585	ExpressionStatement	dp -> stack [ sp ] . end = 1	1042:21:33420:33441	8509047	1	True				
ANR	8509586	AssignmentExpression	dp -> stack [ sp ] . end = 1		8509047	0		=			
ANR	8509587	MemberAccess	dp -> stack [ sp ] . end		8509047	0					
ANR	8509588	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509589	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509590	Identifier	dp		8509047	0					
ANR	8509591	Identifier	stack		8509047	1					
ANR	8509592	Identifier	sp		8509047	1					
ANR	8509593	Identifier	end		8509047	1					
ANR	8509594	PrimaryExpression	1		8509047	1					
ANR	8509595	ElseStatement	else		8509047	0					
ANR	8509596	CompoundStatement		134:18:4487:4487	8509047	0					
ANR	8509597	ExpressionStatement	dp -> stack [ sp ] . hi = hi = val	1047:21:33528:33555	8509047	0	True				
ANR	8509598	AssignmentExpression	dp -> stack [ sp ] . hi = hi = val		8509047	0		=			
ANR	8509599	MemberAccess	dp -> stack [ sp ] . hi		8509047	0					
ANR	8509600	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509601	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509602	Identifier	dp		8509047	0					
ANR	8509603	Identifier	stack		8509047	1					
ANR	8509604	Identifier	sp		8509047	1					
ANR	8509605	Identifier	hi		8509047	1					
ANR	8509606	AssignmentExpression	hi = val		8509047	1		=			
ANR	8509607	Identifier	hi		8509047	0					
ANR	8509608	Identifier	val		8509047	1					
ANR	8509609	ExpressionStatement	dp -> stack [ sp ] . hi_size = best_size	1048:21:33578:33611	8509047	1	True				
ANR	8509610	AssignmentExpression	dp -> stack [ sp ] . hi_size = best_size		8509047	0		=			
ANR	8509611	MemberAccess	dp -> stack [ sp ] . hi_size		8509047	0					
ANR	8509612	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509613	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509614	Identifier	dp		8509047	0					
ANR	8509615	Identifier	stack		8509047	1					
ANR	8509616	Identifier	sp		8509047	1					
ANR	8509617	Identifier	hi_size		8509047	1					
ANR	8509618	Identifier	best_size		8509047	1					
ANR	8509619	ExpressionStatement	val = ( lo + val ) / 2	1049:21:33634:33654	8509047	2	True				
ANR	8509620	AssignmentExpression	val = ( lo + val ) / 2		8509047	0		=			
ANR	8509621	Identifier	val		8509047	0					
ANR	8509622	MultiplicativeExpression	( lo + val ) / 2		8509047	1		/			
ANR	8509623	AdditiveExpression	lo + val		8509047	0		+			
ANR	8509624	Identifier	lo		8509047	0					
ANR	8509625	Identifier	val		8509047	1					
ANR	8509626	PrimaryExpression	2		8509047	1					
ANR	8509627	ElseStatement	else		8509047	0					
ANR	8509628	IfStatement	if ( lo_size >= best_size && best_size >= hi_size )		8509047	0					
ANR	8509629	Condition	lo_size >= best_size && best_size >= hi_size	1053:24:33718:33761	8509047	0	True				
ANR	8509630	AndExpression	lo_size >= best_size && best_size >= hi_size		8509047	0		&&			
ANR	8509631	RelationalExpression	lo_size >= best_size		8509047	0		>=			
ANR	8509632	Identifier	lo_size		8509047	0					
ANR	8509633	Identifier	best_size		8509047	1					
ANR	8509634	RelationalExpression	best_size >= hi_size		8509047	1		>=			
ANR	8509635	Identifier	best_size		8509047	0					
ANR	8509636	Identifier	hi_size		8509047	1					
ANR	8509637	CompoundStatement		142:15:4761:4761	8509047	1					
ANR	8509638	IfStatement	if ( val == hi - 1 )		8509047	0					
ANR	8509639	Condition	val == hi - 1	1059:22:34008:34018	8509047	0	True				
ANR	8509640	EqualityExpression	val == hi - 1		8509047	0		==			
ANR	8509641	Identifier	val		8509047	0					
ANR	8509642	AdditiveExpression	hi - 1		8509047	1		-			
ANR	8509643	Identifier	hi		8509047	0					
ANR	8509644	PrimaryExpression	1		8509047	1					
ANR	8509645	CompoundStatement		148:18:5021:5021	8509047	1					
ANR	8509646	ExpressionStatement	-- val	1061:21:34062:34067	8509047	0	True				
ANR	8509647	UnaryExpression	-- val		8509047	0					
ANR	8509648	IncDec	--		8509047	0					
ANR	8509649	Identifier	val		8509047	1					
ANR	8509650	ExpressionStatement	dp -> stack [ sp ] . end = 1	1062:21:34090:34111	8509047	1	True				
ANR	8509651	AssignmentExpression	dp -> stack [ sp ] . end = 1		8509047	0		=			
ANR	8509652	MemberAccess	dp -> stack [ sp ] . end		8509047	0					
ANR	8509653	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509654	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509655	Identifier	dp		8509047	0					
ANR	8509656	Identifier	stack		8509047	1					
ANR	8509657	Identifier	sp		8509047	1					
ANR	8509658	Identifier	end		8509047	1					
ANR	8509659	PrimaryExpression	1		8509047	1					
ANR	8509660	ElseStatement	else		8509047	0					
ANR	8509661	CompoundStatement		154:18:5157:5157	8509047	0					
ANR	8509662	ExpressionStatement	dp -> stack [ sp ] . lo = lo = val	1067:21:34198:34225	8509047	0	True				
ANR	8509663	AssignmentExpression	dp -> stack [ sp ] . lo = lo = val		8509047	0		=			
ANR	8509664	MemberAccess	dp -> stack [ sp ] . lo		8509047	0					
ANR	8509665	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509666	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509667	Identifier	dp		8509047	0					
ANR	8509668	Identifier	stack		8509047	1					
ANR	8509669	Identifier	sp		8509047	1					
ANR	8509670	Identifier	lo		8509047	1					
ANR	8509671	AssignmentExpression	lo = val		8509047	1		=			
ANR	8509672	Identifier	lo		8509047	0					
ANR	8509673	Identifier	val		8509047	1					
ANR	8509674	ExpressionStatement	dp -> stack [ sp ] . lo_size = best_size	1068:21:34248:34281	8509047	1	True				
ANR	8509675	AssignmentExpression	dp -> stack [ sp ] . lo_size = best_size		8509047	0		=			
ANR	8509676	MemberAccess	dp -> stack [ sp ] . lo_size		8509047	0					
ANR	8509677	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509678	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509679	Identifier	dp		8509047	0					
ANR	8509680	Identifier	stack		8509047	1					
ANR	8509681	Identifier	sp		8509047	1					
ANR	8509682	Identifier	lo_size		8509047	1					
ANR	8509683	Identifier	best_size		8509047	1					
ANR	8509684	ExpressionStatement	val = ( val + hi ) / 2	1069:21:34304:34324	8509047	2	True				
ANR	8509685	AssignmentExpression	val = ( val + hi ) / 2		8509047	0		=			
ANR	8509686	Identifier	val		8509047	0					
ANR	8509687	MultiplicativeExpression	( val + hi ) / 2		8509047	1		/			
ANR	8509688	AdditiveExpression	val + hi		8509047	0		+			
ANR	8509689	Identifier	val		8509047	0					
ANR	8509690	Identifier	hi		8509047	1					
ANR	8509691	PrimaryExpression	2		8509047	1					
ANR	8509692	ElseStatement	else		8509047	0					
ANR	8509693	IfStatement	if ( lo_size <= hi_size )		8509047	0					
ANR	8509694	Condition	lo_size <= hi_size	1088:24:35248:35265	8509047	0	True				
ANR	8509695	RelationalExpression	lo_size <= hi_size		8509047	0		<=			
ANR	8509696	Identifier	lo_size		8509047	0					
ANR	8509697	Identifier	hi_size		8509047	1					
ANR	8509698	CompoundStatement		177:15:6284:6284	8509047	1					
ANR	8509699	ExpressionStatement	dp -> stack [ sp ] . hi = val	1090:18:35322:35344	8509047	0	True				
ANR	8509700	AssignmentExpression	dp -> stack [ sp ] . hi = val		8509047	0		=			
ANR	8509701	MemberAccess	dp -> stack [ sp ] . hi		8509047	0					
ANR	8509702	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509703	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509704	Identifier	dp		8509047	0					
ANR	8509705	Identifier	stack		8509047	1					
ANR	8509706	Identifier	sp		8509047	1					
ANR	8509707	Identifier	hi		8509047	1					
ANR	8509708	Identifier	val		8509047	1					
ANR	8509709	ExpressionStatement	dp -> stack [ sp ] . hi_size = best_size	1091:18:35364:35397	8509047	1	True				
ANR	8509710	AssignmentExpression	dp -> stack [ sp ] . hi_size = best_size		8509047	0		=			
ANR	8509711	MemberAccess	dp -> stack [ sp ] . hi_size		8509047	0					
ANR	8509712	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509713	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509714	Identifier	dp		8509047	0					
ANR	8509715	Identifier	stack		8509047	1					
ANR	8509716	Identifier	sp		8509047	1					
ANR	8509717	Identifier	hi_size		8509047	1					
ANR	8509718	Identifier	best_size		8509047	1					
ANR	8509719	ExpressionStatement	val = -- hi	1092:18:35417:35427	8509047	2	True				
ANR	8509720	AssignmentExpression	val = -- hi		8509047	0		=			
ANR	8509721	Identifier	val		8509047	0					
ANR	8509722	UnaryExpression	-- hi		8509047	1					
ANR	8509723	IncDec	--		8509047	0					
ANR	8509724	Identifier	hi		8509047	1					
ANR	8509725	ElseStatement	else		8509047	0					
ANR	8509726	CompoundStatement		184:15:6482:6482	8509047	0					
ANR	8509727	ExpressionStatement	dp -> stack [ sp ] . lo = val	1097:18:35520:35542	8509047	0	True				
ANR	8509728	AssignmentExpression	dp -> stack [ sp ] . lo = val		8509047	0		=			
ANR	8509729	MemberAccess	dp -> stack [ sp ] . lo		8509047	0					
ANR	8509730	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509731	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509732	Identifier	dp		8509047	0					
ANR	8509733	Identifier	stack		8509047	1					
ANR	8509734	Identifier	sp		8509047	1					
ANR	8509735	Identifier	lo		8509047	1					
ANR	8509736	Identifier	val		8509047	1					
ANR	8509737	ExpressionStatement	dp -> stack [ sp ] . lo_size = best_size	1098:18:35562:35595	8509047	1	True				
ANR	8509738	AssignmentExpression	dp -> stack [ sp ] . lo_size = best_size		8509047	0		=			
ANR	8509739	MemberAccess	dp -> stack [ sp ] . lo_size		8509047	0					
ANR	8509740	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509741	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509742	Identifier	dp		8509047	0					
ANR	8509743	Identifier	stack		8509047	1					
ANR	8509744	Identifier	sp		8509047	1					
ANR	8509745	Identifier	lo_size		8509047	1					
ANR	8509746	Identifier	best_size		8509047	1					
ANR	8509747	ExpressionStatement	val = ++ lo	1099:18:35615:35625	8509047	2	True				
ANR	8509748	AssignmentExpression	val = ++ lo		8509047	0		=			
ANR	8509749	Identifier	val		8509047	0					
ANR	8509750	UnaryExpression	++ lo		8509047	1					
ANR	8509751	IncDec	++		8509047	0					
ANR	8509752	Identifier	lo		8509047	1					
ANR	8509753	ExpressionStatement	assert ( hi > lo + 1 )	1105:15:35787:35804	8509047	2	True				
ANR	8509754	CallExpression	assert ( hi > lo + 1 )		8509047	0					
ANR	8509755	Callee	assert		8509047	0					
ANR	8509756	Identifier	assert		8509047	0					
ANR	8509757	ArgumentList	hi > lo + 1		8509047	1					
ANR	8509758	Argument	hi > lo + 1		8509047	0					
ANR	8509759	RelationalExpression	hi > lo + 1		8509047	0		>			
ANR	8509760	Identifier	hi		8509047	0					
ANR	8509761	AdditiveExpression	lo + 1		8509047	1		+			
ANR	8509762	Identifier	lo		8509047	0					
ANR	8509763	PrimaryExpression	1		8509047	1					
ANR	8509764	IfStatement	if ( hi <= lo + 2 )		8509047	3					
ANR	8509765	Condition	hi <= lo + 2	1106:19:35825:35834	8509047	0	True				
ANR	8509766	RelationalExpression	hi <= lo + 2		8509047	0		<=			
ANR	8509767	Identifier	hi		8509047	0					
ANR	8509768	AdditiveExpression	lo + 2		8509047	1		+			
ANR	8509769	Identifier	lo		8509047	0					
ANR	8509770	PrimaryExpression	2		8509047	1					
ANR	8509771	ExpressionStatement	dp -> stack [ sp ] . end = 1	1107:18:35855:35876	8509047	1	True				
ANR	8509772	AssignmentExpression	dp -> stack [ sp ] . end = 1		8509047	0		=			
ANR	8509773	MemberAccess	dp -> stack [ sp ] . end		8509047	0					
ANR	8509774	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509775	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509776	Identifier	dp		8509047	0					
ANR	8509777	Identifier	stack		8509047	1					
ANR	8509778	Identifier	sp		8509047	1					
ANR	8509779	Identifier	end		8509047	1					
ANR	8509780	PrimaryExpression	1		8509047	1					
ANR	8509781	ExpressionStatement	assert ( val != dp -> stack [ sp ] . best_val )	1111:9:35913:35950	8509047	7	True				
ANR	8509782	CallExpression	assert ( val != dp -> stack [ sp ] . best_val )		8509047	0					
ANR	8509783	Callee	assert		8509047	0					
ANR	8509784	Identifier	assert		8509047	0					
ANR	8509785	ArgumentList	val != dp -> stack [ sp ] . best_val		8509047	1					
ANR	8509786	Argument	val != dp -> stack [ sp ] . best_val		8509047	0					
ANR	8509787	EqualityExpression	val != dp -> stack [ sp ] . best_val		8509047	0		!=			
ANR	8509788	Identifier	val		8509047	0					
ANR	8509789	MemberAccess	dp -> stack [ sp ] . best_val		8509047	1					
ANR	8509790	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509791	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509792	Identifier	dp		8509047	0					
ANR	8509793	Identifier	stack		8509047	1					
ANR	8509794	Identifier	sp		8509047	1					
ANR	8509795	Identifier	best_val		8509047	1					
ANR	8509796	ExpressionStatement	dp -> value [ opt ] = val	1112:9:35989:36009	8509047	8	True				
ANR	8509797	AssignmentExpression	dp -> value [ opt ] = val		8509047	0		=			
ANR	8509798	ArrayIndexing	dp -> value [ opt ]		8509047	0					
ANR	8509799	PtrMemberAccess	dp -> value		8509047	0					
ANR	8509800	Identifier	dp		8509047	0					
ANR	8509801	Identifier	value		8509047	1					
ANR	8509802	Identifier	opt		8509047	1					
ANR	8509803	Identifier	val		8509047	1					
ANR	8509804	ExpressionStatement	dp -> stack [ sp ] . best_size = MAX_SIZE	1113:9:36020:36054	8509047	9	True				
ANR	8509805	AssignmentExpression	dp -> stack [ sp ] . best_size = MAX_SIZE		8509047	0		=			
ANR	8509806	MemberAccess	dp -> stack [ sp ] . best_size		8509047	0					
ANR	8509807	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509808	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509809	Identifier	dp		8509047	0					
ANR	8509810	Identifier	stack		8509047	1					
ANR	8509811	Identifier	sp		8509047	1					
ANR	8509812	Identifier	best_size		8509047	1					
ANR	8509813	Identifier	MAX_SIZE		8509047	1					
ANR	8509814	ElseStatement	else		8509047	0					
ANR	8509815	CompoundStatement		206:3:7063:7063	8509047	0					
ANR	8509816	ExpressionStatement	dp -> value [ opt ] = options [ opt ] . values [ ++ entry ] . value	1120:6:36119:36170	8509047	0	True				
ANR	8509817	AssignmentExpression	dp -> value [ opt ] = options [ opt ] . values [ ++ entry ] . value		8509047	0		=			
ANR	8509818	ArrayIndexing	dp -> value [ opt ]		8509047	0					
ANR	8509819	PtrMemberAccess	dp -> value		8509047	0					
ANR	8509820	Identifier	dp		8509047	0					
ANR	8509821	Identifier	value		8509047	1					
ANR	8509822	Identifier	opt		8509047	1					
ANR	8509823	MemberAccess	options [ opt ] . values [ ++ entry ] . value		8509047	1					
ANR	8509824	ArrayIndexing	options [ opt ] . values [ ++ entry ]		8509047	0					
ANR	8509825	MemberAccess	options [ opt ] . values		8509047	0					
ANR	8509826	ArrayIndexing	options [ opt ]		8509047	0					
ANR	8509827	Identifier	options		8509047	0					
ANR	8509828	Identifier	opt		8509047	1					
ANR	8509829	Identifier	values		8509047	1					
ANR	8509830	UnaryExpression	++ entry		8509047	1					
ANR	8509831	IncDec	++		8509047	0					
ANR	8509832	Identifier	entry		8509047	1					
ANR	8509833	Identifier	value		8509047	1					
ANR	8509834	ExpressionStatement	dp -> stack [ sp ] . entry = entry	1121:6:36178:36205	8509047	1	True				
ANR	8509835	AssignmentExpression	dp -> stack [ sp ] . entry = entry		8509047	0		=			
ANR	8509836	MemberAccess	dp -> stack [ sp ] . entry		8509047	0					
ANR	8509837	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509838	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509839	Identifier	dp		8509047	0					
ANR	8509840	Identifier	stack		8509047	1					
ANR	8509841	Identifier	sp		8509047	1					
ANR	8509842	Identifier	entry		8509047	1					
ANR	8509843	Identifier	entry		8509047	1					
ANR	8509844	ExpressionStatement	"set_opt_string ( dp , sp )"	1124:3:36216:36238	8509047	10	True				
ANR	8509845	CallExpression	"set_opt_string ( dp , sp )"		8509047	0					
ANR	8509846	Callee	set_opt_string		8509047	0					
ANR	8509847	Identifier	set_opt_string		8509047	0					
ANR	8509848	ArgumentList	dp		8509047	1					
ANR	8509849	Argument	dp		8509047	0					
ANR	8509850	Identifier	dp		8509047	0					
ANR	8509851	Argument	sp		8509047	1					
ANR	8509852	Identifier	sp		8509047	0					
ANR	8509853	IfStatement	"if ( ! search && opt_list_end ( dp , opt , entry ) )"		8509047	11					
ANR	8509854	Condition	"! search && opt_list_end ( dp , opt , entry )"	1126:7:36248:36286	8509047	0	True				
ANR	8509855	AndExpression	"! search && opt_list_end ( dp , opt , entry )"		8509047	0		&&			
ANR	8509856	UnaryOperationExpression	! search		8509047	0					
ANR	8509857	UnaryOperator	!		8509047	0					
ANR	8509858	Identifier	search		8509047	1					
ANR	8509859	CallExpression	"opt_list_end ( dp , opt , entry )"		8509047	1					
ANR	8509860	Callee	opt_list_end		8509047	0					
ANR	8509861	Identifier	opt_list_end		8509047	0					
ANR	8509862	ArgumentList	dp		8509047	1					
ANR	8509863	Argument	dp		8509047	0					
ANR	8509864	Identifier	dp		8509047	0					
ANR	8509865	Argument	opt		8509047	1					
ANR	8509866	Identifier	opt		8509047	0					
ANR	8509867	Argument	entry		8509047	2					
ANR	8509868	Identifier	entry		8509047	0					
ANR	8509869	ExpressionStatement	dp -> stack [ sp ] . end = 1	1127:6:36313:36334	8509047	1	True				
ANR	8509870	AssignmentExpression	dp -> stack [ sp ] . end = 1		8509047	0		=			
ANR	8509871	MemberAccess	dp -> stack [ sp ] . end		8509047	0					
ANR	8509872	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509873	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509874	Identifier	dp		8509047	0					
ANR	8509875	Identifier	stack		8509047	1					
ANR	8509876	Identifier	sp		8509047	1					
ANR	8509877	Identifier	end		8509047	1					
ANR	8509878	PrimaryExpression	1		8509047	1					
ANR	8509879	ElseStatement	else		8509047	0					
ANR	8509880	IfStatement	if ( ! dp -> stack [ sp ] . end )		8509047	0					
ANR	8509881	Condition	! dp -> stack [ sp ] . end	1129:12:36349:36366	8509047	0	True				
ANR	8509882	UnaryOperationExpression	! dp -> stack [ sp ] . end		8509047	0					
ANR	8509883	UnaryOperator	!		8509047	0					
ANR	8509884	MemberAccess	dp -> stack [ sp ] . end		8509047	1					
ANR	8509885	ArrayIndexing	dp -> stack [ sp ]		8509047	0					
ANR	8509886	PtrMemberAccess	dp -> stack		8509047	0					
ANR	8509887	Identifier	dp		8509047	0					
ANR	8509888	Identifier	stack		8509047	1					
ANR	8509889	Identifier	sp		8509047	1					
ANR	8509890	Identifier	end		8509047	1					
ANR	8509891	ExpressionStatement	dp -> nsp = dp -> tsp	1130:6:36416:36433	8509047	1	True				
ANR	8509892	AssignmentExpression	dp -> nsp = dp -> tsp		8509047	0		=			
ANR	8509893	PtrMemberAccess	dp -> nsp		8509047	0					
ANR	8509894	Identifier	dp		8509047	0					
ANR	8509895	Identifier	nsp		8509047	1					
ANR	8509896	PtrMemberAccess	dp -> tsp		8509047	1					
ANR	8509897	Identifier	dp		8509047	0					
ANR	8509898	Identifier	tsp		8509047	1					
ANR	8509899	ReturnType	static void		8509047	1					
ANR	8509900	Identifier	next_opt		8509047	2					
ANR	8509901	ParameterList	"struct display * dp , unsigned int sp"		8509047	3					
ANR	8509902	Parameter	struct display * dp	906:9:28618:28635	8509047	0	True				
ANR	8509903	ParameterType	struct display *		8509047	0					
ANR	8509904	Identifier	dp		8509047	1					
ANR	8509905	Parameter	unsigned int sp	906:29:28638:28652	8509047	1	True				
ANR	8509906	ParameterType	unsigned int		8509047	0					
ANR	8509907	Identifier	sp		8509047	1					
ANR	8509908	CFGEntryNode	ENTRY		8509047		True				
ANR	8509909	CFGExitNode	EXIT		8509047		True				
ANR	8509910	Symbol	* sp		8509047						
ANR	8509911	Symbol	* dp -> stack		8509047						
ANR	8509912	Symbol	hi		8509047						
ANR	8509913	Symbol	lo		8509047						
ANR	8509914	Symbol	lo_size		8509047						
ANR	8509915	Symbol	dp -> stack [ sp ] . entry		8509047						
ANR	8509916	Symbol	* * opt		8509047						
ANR	8509917	Symbol	dp -> stack [ sp ] . hi		8509047						
ANR	8509918	Symbol	dp -> stack [ sp ] . lo		8509047						
ANR	8509919	Symbol	dp -> stack [ sp ] . best_val		8509047						
ANR	8509920	Symbol	dp		8509047						
ANR	8509921	Symbol	* options		8509047						
ANR	8509922	Symbol	dp -> stack [ sp ] . hi_size		8509047						
ANR	8509923	Symbol	* dp		8509047						
ANR	8509924	Symbol	search		8509047						
ANR	8509925	Symbol	range_lo		8509047						
ANR	8509926	Symbol	options		8509047						
ANR	8509927	Symbol	dp -> stack [ sp ] . end		8509047						
ANR	8509928	Symbol	dp -> stack [ sp ] . best_size		8509047						
ANR	8509929	Symbol	hi_size		8509047						
ANR	8509930	Symbol	sp		8509047						
ANR	8509931	Symbol	* opt		8509047						
ANR	8509932	Symbol	* entry		8509047						
ANR	8509933	Symbol	entry_name		8509047						
ANR	8509934	Symbol	val		8509047						
ANR	8509935	Symbol	options [ opt ] . values [ ++ entry ] . value		8509047						
ANR	8509936	Symbol	NULL		8509047						
ANR	8509937	Symbol	* options [ opt ] . values		8509047						
ANR	8509938	Symbol	best_size		8509047						
ANR	8509939	Symbol	MAX_SIZE		8509047						
ANR	8509940	Symbol	* * options		8509047						
ANR	8509941	Symbol	options [ opt ] . values [ entry ] . name		8509047						
ANR	8509942	Symbol	dp -> stack		8509047						
ANR	8509943	Symbol	dp -> stack [ sp ] . opt		8509047						
ANR	8509944	Symbol	entry		8509047						
ANR	8509945	Symbol	opt		8509047						
ANR	8509946	Symbol	dp -> value		8509047						
ANR	8509947	Symbol	* dp -> value		8509047						
ANR	8509948	Symbol	options [ opt ] . value_count		8509047						
ANR	8509949	Symbol	* * dp		8509047						
ANR	8509950	Symbol	dp -> stack [ sp ] . lo_size		8509047						
ANR	8509951	Symbol	dp -> nsp		8509047						
ANR	8509952	Symbol	dp -> tsp		8509047						
ANR	8509953	Symbol	opt_list_end		8509047						
ANR	8509954	Symbol	options [ opt ] . values		8509047						
ANR	8509955	Function	compare_option	1133:0:36438:37135							
ANR	8509956	FunctionDef	"compare_option (const struct display * dp , unsigned int sp)"		8509955	0					
ANR	8509957	CompoundStatement		1135:0:36507:37135	8509955	0					
ANR	8509958	IdentifierDeclStatement	int opt = dp -> stack [ sp ] . opt ;	1136:3:36512:36539	8509955	0	True				
ANR	8509959	IdentifierDecl	opt = dp -> stack [ sp ] . opt		8509955	0					
ANR	8509960	IdentifierDeclType	int		8509955	0					
ANR	8509961	Identifier	opt		8509955	1					
ANR	8509962	AssignmentExpression	opt = dp -> stack [ sp ] . opt		8509955	2		=			
ANR	8509963	Identifier	opt		8509955	0					
ANR	8509964	MemberAccess	dp -> stack [ sp ] . opt		8509955	1					
ANR	8509965	ArrayIndexing	dp -> stack [ sp ]		8509955	0					
ANR	8509966	PtrMemberAccess	dp -> stack		8509955	0					
ANR	8509967	Identifier	dp		8509955	0					
ANR	8509968	Identifier	stack		8509955	1					
ANR	8509969	Identifier	sp		8509955	1					
ANR	8509970	Identifier	opt		8509955	1					
ANR	8509971	IfStatement	if ( dp -> stack [ sp ] . best_val < dp -> value [ opt ] )		8509955	1					
ANR	8509972	Condition	dp -> stack [ sp ] . best_val < dp -> value [ opt ]	1141:7:36678:36716	8509955	0	True				
ANR	8509973	RelationalExpression	dp -> stack [ sp ] . best_val < dp -> value [ opt ]		8509955	0		<			
ANR	8509974	MemberAccess	dp -> stack [ sp ] . best_val		8509955	0					
ANR	8509975	ArrayIndexing	dp -> stack [ sp ]		8509955	0					
ANR	8509976	PtrMemberAccess	dp -> stack		8509955	0					
ANR	8509977	Identifier	dp		8509955	0					
ANR	8509978	Identifier	stack		8509955	1					
ANR	8509979	Identifier	sp		8509955	1					
ANR	8509980	Identifier	best_val		8509955	1					
ANR	8509981	ArrayIndexing	dp -> value [ opt ]		8509955	1					
ANR	8509982	PtrMemberAccess	dp -> value		8509955	0					
ANR	8509983	Identifier	dp		8509955	0					
ANR	8509984	Identifier	value		8509955	1					
ANR	8509985	Identifier	opt		8509955	1					
ANR	8509986	ReturnStatement	return - 1 ;	1142:6:36725:36734	8509955	1	True				
ANR	8509987	UnaryOperationExpression	- 1		8509955	0					
ANR	8509988	UnaryOperator	-		8509955	0					
ANR	8509989	PrimaryExpression	1		8509955	1					
ANR	8509990	ElseStatement	else		8509955	0					
ANR	8509991	IfStatement	if ( dp -> stack [ sp ] . best_val > dp -> value [ opt ] )		8509955	0					
ANR	8509992	Condition	dp -> stack [ sp ] . best_val > dp -> value [ opt ]	1147:12:36903:36941	8509955	0	True				
ANR	8509993	RelationalExpression	dp -> stack [ sp ] . best_val > dp -> value [ opt ]		8509955	0		>			
ANR	8509994	MemberAccess	dp -> stack [ sp ] . best_val		8509955	0					
ANR	8509995	ArrayIndexing	dp -> stack [ sp ]		8509955	0					
ANR	8509996	PtrMemberAccess	dp -> stack		8509955	0					
ANR	8509997	Identifier	dp		8509955	0					
ANR	8509998	Identifier	stack		8509955	1					
ANR	8509999	Identifier	sp		8509955	1					
ANR	8510000	Identifier	best_val		8509955	1					
ANR	8510001	ArrayIndexing	dp -> value [ opt ]		8509955	1					
ANR	8510002	PtrMemberAccess	dp -> value		8509955	0					
ANR	8510003	Identifier	dp		8509955	0					
ANR	8510004	Identifier	value		8509955	1					
ANR	8510005	Identifier	opt		8509955	1					
ANR	8510006	CompoundStatement		14:3:439:439	8509955	1					
ANR	8510007	IfStatement	if ( dp -> stack [ sp ] . lo <= dp -> stack [ sp ] . hi )		8509955	0					
ANR	8510008	Condition	dp -> stack [ sp ] . lo <= dp -> stack [ sp ] . hi	1149:10:36959:36994	8509955	0	True				
ANR	8510009	RelationalExpression	dp -> stack [ sp ] . lo <= dp -> stack [ sp ] . hi		8509955	0		<=			
ANR	8510010	MemberAccess	dp -> stack [ sp ] . lo		8509955	0					
ANR	8510011	ArrayIndexing	dp -> stack [ sp ]		8509955	0					
ANR	8510012	PtrMemberAccess	dp -> stack		8509955	0					
ANR	8510013	Identifier	dp		8509955	0					
ANR	8510014	Identifier	stack		8509955	1					
ANR	8510015	Identifier	sp		8509955	1					
ANR	8510016	Identifier	lo		8509955	1					
ANR	8510017	MemberAccess	dp -> stack [ sp ] . hi		8509955	1					
ANR	8510018	ArrayIndexing	dp -> stack [ sp ]		8509955	0					
ANR	8510019	PtrMemberAccess	dp -> stack		8509955	0					
ANR	8510020	Identifier	dp		8509955	0					
ANR	8510021	Identifier	stack		8509955	1					
ANR	8510022	Identifier	sp		8509955	1					
ANR	8510023	Identifier	hi		8509955	1					
ANR	8510024	ReturnStatement	return 1 ;	1150:9:37020:37028	8509955	1	True				
ANR	8510025	PrimaryExpression	1		8509955	0					
ANR	8510026	ElseStatement	else		8509955	0					
ANR	8510027	ReturnStatement	return - 1 ;	1153:9:37051:37060	8509955	0	True				
ANR	8510028	UnaryOperationExpression	- 1		8509955	0					
ANR	8510029	UnaryOperator	-		8509955	0					
ANR	8510030	PrimaryExpression	1		8509955	1					
ANR	8510031	ElseStatement	else		8509955	0					
ANR	8510032	ReturnStatement	return 0 ;	1157:6:37082:37090	8509955	0	True				
ANR	8510033	PrimaryExpression	0		8509955	0					
ANR	8510034	ReturnType	static int		8509955	1					
ANR	8510035	Identifier	compare_option		8509955	2					
ANR	8510036	ParameterList	"const struct display * dp , unsigned int sp"		8509955	3					
ANR	8510037	Parameter	const struct display * dp	1134:15:36464:36487	8509955	0	True				
ANR	8510038	ParameterType	const struct display *		8509955	0					
ANR	8510039	Identifier	dp		8509955	1					
ANR	8510040	Parameter	unsigned int sp	1134:41:36490:36504	8509955	1	True				
ANR	8510041	ParameterType	unsigned int		8509955	0					
ANR	8510042	Identifier	sp		8509955	1					
ANR	8510043	CFGEntryNode	ENTRY		8509955		True				
ANR	8510044	CFGExitNode	EXIT		8509955		True				
ANR	8510045	Symbol	* sp		8509955						
ANR	8510046	Symbol	* dp -> stack		8509955						
ANR	8510047	Symbol	dp -> stack [ sp ] . hi		8509955						
ANR	8510048	Symbol	dp -> stack [ sp ] . best_val		8509955						
ANR	8510049	Symbol	dp -> stack [ sp ] . lo		8509955						
ANR	8510050	Symbol	dp		8509955						
ANR	8510051	Symbol	dp -> stack		8509955						
ANR	8510052	Symbol	dp -> stack [ sp ] . opt		8509955						
ANR	8510053	Symbol	* dp		8509955						
ANR	8510054	Symbol	opt		8509955						
ANR	8510055	Symbol	dp -> value		8509955						
ANR	8510056	Symbol	* dp -> value		8509955						
ANR	8510057	Symbol	* * dp		8509955						
ANR	8510058	Symbol	sp		8509955						
ANR	8510059	Symbol	* opt		8509955						
ANR	8510060	Function	advance_opt	1160:0:37138:39199							
ANR	8510061	FunctionDef	"advance_opt (struct display * dp , png_byte opt , int search)"		8510060	0					
ANR	8510062	CompoundStatement		1162:0:37207:39199	8510060	0					
ANR	8510063	IdentifierDeclStatement	unsigned int sp = dp -> csp ++ ;	1163:3:37212:37239	8510060	0	True				
ANR	8510064	IdentifierDecl	sp = dp -> csp ++		8510060	0					
ANR	8510065	IdentifierDeclType	unsigned int		8510060	0					
ANR	8510066	Identifier	sp		8510060	1					
ANR	8510067	AssignmentExpression	sp = dp -> csp ++		8510060	2		=			
ANR	8510068	Identifier	sp		8510060	0					
ANR	8510069	PostIncDecOperationExpression	dp -> csp ++		8510060	1					
ANR	8510070	PtrMemberAccess	dp -> csp		8510060	0					
ANR	8510071	Identifier	dp		8510060	0					
ANR	8510072	Identifier	csp		8510060	1					
ANR	8510073	IncDec	++		8510060	1					
ANR	8510074	ExpressionStatement	assert ( sp >= dp -> nsp )	1165:3:37266:37287	8510060	1	True				
ANR	8510075	CallExpression	assert ( sp >= dp -> nsp )		8510060	0					
ANR	8510076	Callee	assert		8510060	0					
ANR	8510077	Identifier	assert		8510060	0					
ANR	8510078	ArgumentList	sp >= dp -> nsp		8510060	1					
ANR	8510079	Argument	sp >= dp -> nsp		8510060	0					
ANR	8510080	RelationalExpression	sp >= dp -> nsp		8510060	0		>=			
ANR	8510081	Identifier	sp		8510060	0					
ANR	8510082	PtrMemberAccess	dp -> nsp		8510060	1					
ANR	8510083	Identifier	dp		8510060	0					
ANR	8510084	Identifier	nsp		8510060	1					
ANR	8510085	IfStatement	if ( sp >= dp -> tsp )		8510060	2					
ANR	8510086	Condition	sp >= dp -> tsp	1186:7:38174:38186	8510060	0	True				
ANR	8510087	RelationalExpression	sp >= dp -> tsp		8510060	0		>=			
ANR	8510088	Identifier	sp		8510060	0					
ANR	8510089	PtrMemberAccess	dp -> tsp		8510060	1					
ANR	8510090	Identifier	dp		8510060	0					
ANR	8510091	Identifier	tsp		8510060	1					
ANR	8510092	CompoundStatement		26:3:984:984	8510060	1					
ANR	8510093	ExpressionStatement	"push_opt ( dp , sp , opt , search )"	1188:6:38200:38229	8510060	0	True				
ANR	8510094	CallExpression	"push_opt ( dp , sp , opt , search )"		8510060	0					
ANR	8510095	Callee	push_opt		8510060	0					
ANR	8510096	Identifier	push_opt		8510060	0					
ANR	8510097	ArgumentList	dp		8510060	1					
ANR	8510098	Argument	dp		8510060	0					
ANR	8510099	Identifier	dp		8510060	0					
ANR	8510100	Argument	sp		8510060	1					
ANR	8510101	Identifier	sp		8510060	0					
ANR	8510102	Argument	opt		8510060	2					
ANR	8510103	Identifier	opt		8510060	0					
ANR	8510104	Argument	search		8510060	3					
ANR	8510105	Identifier	search		8510060	0					
ANR	8510106	ReturnStatement	return 1 ;	1189:6:38265:38273	8510060	1	True				
ANR	8510107	PrimaryExpression	1		8510060	0					
ANR	8510108	ElseStatement	else		8510060	0					
ANR	8510109	CompoundStatement		33:6:1110:1121	8510060	0					
ANR	8510110	IdentifierDeclStatement	int ret = 0 ;	1194:6:38318:38329	8510060	0	True				
ANR	8510111	IdentifierDecl	ret = 0		8510060	0					
ANR	8510112	IdentifierDeclType	int		8510060	0					
ANR	8510113	Identifier	ret		8510060	1					
ANR	8510114	AssignmentExpression	ret = 0		8510060	2		=			
ANR	8510115	Identifier	ret		8510060	0					
ANR	8510116	PrimaryExpression	0		8510060	1					
ANR	8510117	ExpressionStatement	assert ( dp -> write_size > 0U && dp -> write_size < MAX_SIZE )	1201:6:38620:38676	8510060	1	True				
ANR	8510118	CallExpression	assert ( dp -> write_size > 0U && dp -> write_size < MAX_SIZE )		8510060	0					
ANR	8510119	Callee	assert		8510060	0					
ANR	8510120	Identifier	assert		8510060	0					
ANR	8510121	ArgumentList	dp -> write_size > 0U && dp -> write_size < MAX_SIZE		8510060	1					
ANR	8510122	Argument	dp -> write_size > 0U && dp -> write_size < MAX_SIZE		8510060	0					
ANR	8510123	AndExpression	dp -> write_size > 0U && dp -> write_size < MAX_SIZE		8510060	0		&&			
ANR	8510124	RelationalExpression	dp -> write_size > 0U		8510060	0		>			
ANR	8510125	PtrMemberAccess	dp -> write_size		8510060	0					
ANR	8510126	Identifier	dp		8510060	0					
ANR	8510127	Identifier	write_size		8510060	1					
ANR	8510128	PrimaryExpression	0U		8510060	1					
ANR	8510129	RelationalExpression	dp -> write_size < MAX_SIZE		8510060	1		<			
ANR	8510130	PtrMemberAccess	dp -> write_size		8510060	0					
ANR	8510131	Identifier	dp		8510060	0					
ANR	8510132	Identifier	write_size		8510060	1					
ANR	8510133	Identifier	MAX_SIZE		8510060	1					
ANR	8510134	IfStatement	"if ( dp -> stack [ sp ] . best_size > dp -> write_size || ( dp -> stack [ sp ] . best_size == dp -> write_size && compare_option ( dp , sp ) > 0 ) )"		8510060	2					
ANR	8510135	Condition	"dp -> stack [ sp ] . best_size > dp -> write_size || ( dp -> stack [ sp ] . best_size == dp -> write_size && compare_option ( dp , sp ) > 0 )"	1203:10:38689:38826	8510060	0	True				
ANR	8510136	OrExpression	"dp -> stack [ sp ] . best_size > dp -> write_size || ( dp -> stack [ sp ] . best_size == dp -> write_size && compare_option ( dp , sp ) > 0 )"		8510060	0		||			
ANR	8510137	RelationalExpression	dp -> stack [ sp ] . best_size > dp -> write_size		8510060	0		>			
ANR	8510138	MemberAccess	dp -> stack [ sp ] . best_size		8510060	0					
ANR	8510139	ArrayIndexing	dp -> stack [ sp ]		8510060	0					
ANR	8510140	PtrMemberAccess	dp -> stack		8510060	0					
ANR	8510141	Identifier	dp		8510060	0					
ANR	8510142	Identifier	stack		8510060	1					
ANR	8510143	Identifier	sp		8510060	1					
ANR	8510144	Identifier	best_size		8510060	1					
ANR	8510145	PtrMemberAccess	dp -> write_size		8510060	1					
ANR	8510146	Identifier	dp		8510060	0					
ANR	8510147	Identifier	write_size		8510060	1					
ANR	8510148	AndExpression	"dp -> stack [ sp ] . best_size == dp -> write_size && compare_option ( dp , sp ) > 0"		8510060	1		&&			
ANR	8510149	EqualityExpression	dp -> stack [ sp ] . best_size == dp -> write_size		8510060	0		==			
ANR	8510150	MemberAccess	dp -> stack [ sp ] . best_size		8510060	0					
ANR	8510151	ArrayIndexing	dp -> stack [ sp ]		8510060	0					
ANR	8510152	PtrMemberAccess	dp -> stack		8510060	0					
ANR	8510153	Identifier	dp		8510060	0					
ANR	8510154	Identifier	stack		8510060	1					
ANR	8510155	Identifier	sp		8510060	1					
ANR	8510156	Identifier	best_size		8510060	1					
ANR	8510157	PtrMemberAccess	dp -> write_size		8510060	1					
ANR	8510158	Identifier	dp		8510060	0					
ANR	8510159	Identifier	write_size		8510060	1					
ANR	8510160	RelationalExpression	"compare_option ( dp , sp ) > 0"		8510060	1		>			
ANR	8510161	CallExpression	"compare_option ( dp , sp )"		8510060	0					
ANR	8510162	Callee	compare_option		8510060	0					
ANR	8510163	Identifier	compare_option		8510060	0					
ANR	8510164	ArgumentList	dp		8510060	1					
ANR	8510165	Argument	dp		8510060	0					
ANR	8510166	Identifier	dp		8510060	0					
ANR	8510167	Argument	sp		8510060	1					
ANR	8510168	Identifier	sp		8510060	0					
ANR	8510169	PrimaryExpression	0		8510060	1					
ANR	8510170	CompoundStatement		45:6:1627:1627	8510060	1					
ANR	8510171	ExpressionStatement	dp -> stack [ sp ] . best_size = dp -> write_size	1207:9:38846:38886	8510060	0	True				
ANR	8510172	AssignmentExpression	dp -> stack [ sp ] . best_size = dp -> write_size		8510060	0		=			
ANR	8510173	MemberAccess	dp -> stack [ sp ] . best_size		8510060	0					
ANR	8510174	ArrayIndexing	dp -> stack [ sp ]		8510060	0					
ANR	8510175	PtrMemberAccess	dp -> stack		8510060	0					
ANR	8510176	Identifier	dp		8510060	0					
ANR	8510177	Identifier	stack		8510060	1					
ANR	8510178	Identifier	sp		8510060	1					
ANR	8510179	Identifier	best_size		8510060	1					
ANR	8510180	PtrMemberAccess	dp -> write_size		8510060	1					
ANR	8510181	Identifier	dp		8510060	0					
ANR	8510182	Identifier	write_size		8510060	1					
ANR	8510183	ExpressionStatement	dp -> stack [ sp ] . best_val = dp -> value [ opt ]	1208:9:38897:38936	8510060	1	True				
ANR	8510184	AssignmentExpression	dp -> stack [ sp ] . best_val = dp -> value [ opt ]		8510060	0		=			
ANR	8510185	MemberAccess	dp -> stack [ sp ] . best_val		8510060	0					
ANR	8510186	ArrayIndexing	dp -> stack [ sp ]		8510060	0					
ANR	8510187	PtrMemberAccess	dp -> stack		8510060	0					
ANR	8510188	Identifier	dp		8510060	0					
ANR	8510189	Identifier	stack		8510060	1					
ANR	8510190	Identifier	sp		8510060	1					
ANR	8510191	Identifier	best_val		8510060	1					
ANR	8510192	ArrayIndexing	dp -> value [ opt ]		8510060	1					
ANR	8510193	PtrMemberAccess	dp -> value		8510060	0					
ANR	8510194	Identifier	dp		8510060	0					
ANR	8510195	Identifier	value		8510060	1					
ANR	8510196	Identifier	opt		8510060	1					
ANR	8510197	IfStatement	if ( sp + 1U >= dp -> tsp )		8510060	3					
ANR	8510198	Condition	sp + 1U >= dp -> tsp	1211:10:38957:38972	8510060	0	True				
ANR	8510199	RelationalExpression	sp + 1U >= dp -> tsp		8510060	0		>=			
ANR	8510200	AdditiveExpression	sp + 1U		8510060	0		+			
ANR	8510201	Identifier	sp		8510060	0					
ANR	8510202	PrimaryExpression	1U		8510060	1					
ANR	8510203	PtrMemberAccess	dp -> tsp		8510060	1					
ANR	8510204	Identifier	dp		8510060	0					
ANR	8510205	Identifier	tsp		8510060	1					
ANR	8510206	CompoundStatement		51:6:1773:1773	8510060	1					
ANR	8510207	ExpressionStatement	"next_opt ( dp , sp )"	1213:9:38992:39008	8510060	0	True				
ANR	8510208	CallExpression	"next_opt ( dp , sp )"		8510060	0					
ANR	8510209	Callee	next_opt		8510060	0					
ANR	8510210	Identifier	next_opt		8510060	0					
ANR	8510211	ArgumentList	dp		8510060	1					
ANR	8510212	Argument	dp		8510060	0					
ANR	8510213	Identifier	dp		8510060	0					
ANR	8510214	Argument	sp		8510060	1					
ANR	8510215	Identifier	sp		8510060	0					
ANR	8510216	ExpressionStatement	ret = 1	1214:9:39019:39026	8510060	1	True				
ANR	8510217	AssignmentExpression	ret = 1		8510060	0		=			
ANR	8510218	Identifier	ret		8510060	0					
ANR	8510219	PrimaryExpression	1		8510060	1					
ANR	8510220	ElseStatement	else		8510060	0					
ANR	8510221	IfStatement	if ( ! dp -> stack [ sp ] . end )		8510060	0					
ANR	8510222	Condition	! dp -> stack [ sp ] . end	1217:15:39067:39084	8510060	0	True				
ANR	8510223	UnaryOperationExpression	! dp -> stack [ sp ] . end		8510060	0					
ANR	8510224	UnaryOperator	!		8510060	0					
ANR	8510225	MemberAccess	dp -> stack [ sp ] . end		8510060	1					
ANR	8510226	ArrayIndexing	dp -> stack [ sp ]		8510060	0					
ANR	8510227	PtrMemberAccess	dp -> stack		8510060	0					
ANR	8510228	Identifier	dp		8510060	0					
ANR	8510229	Identifier	stack		8510060	1					
ANR	8510230	Identifier	sp		8510060	1					
ANR	8510231	Identifier	end		8510060	1					
ANR	8510232	ExpressionStatement	dp -> nsp = sp + 1U	1218:9:39130:39145	8510060	1	True				
ANR	8510233	AssignmentExpression	dp -> nsp = sp + 1U		8510060	0		=			
ANR	8510234	PtrMemberAccess	dp -> nsp		8510060	0					
ANR	8510235	Identifier	dp		8510060	0					
ANR	8510236	Identifier	nsp		8510060	1					
ANR	8510237	AdditiveExpression	sp + 1U		8510060	1		+			
ANR	8510238	Identifier	sp		8510060	0					
ANR	8510239	PrimaryExpression	1U		8510060	1					
ANR	8510240	ReturnStatement	return ret ;	1220:6:39154:39164	8510060	4	True				
ANR	8510241	Identifier	ret		8510060	0					
ANR	8510242	ReturnType	static int		8510060	1					
ANR	8510243	Identifier	advance_opt		8510060	2					
ANR	8510244	ParameterList	"struct display * dp , png_byte opt , int search"		8510060	3					
ANR	8510245	Parameter	struct display * dp	1161:12:37161:37178	8510060	0	True				
ANR	8510246	ParameterType	struct display *		8510060	0					
ANR	8510247	Identifier	dp		8510060	1					
ANR	8510248	Parameter	png_byte opt	1161:32:37181:37192	8510060	1	True				
ANR	8510249	ParameterType	png_byte		8510060	0					
ANR	8510250	Identifier	opt		8510060	1					
ANR	8510251	Parameter	int search	1161:46:37195:37204	8510060	2	True				
ANR	8510252	ParameterType	int		8510060	0					
ANR	8510253	Identifier	search		8510060	1					
ANR	8510254	CFGEntryNode	ENTRY		8510060		True				
ANR	8510255	CFGExitNode	EXIT		8510060		True				
ANR	8510256	Symbol	ret		8510060						
ANR	8510257	Symbol	* sp		8510060						
ANR	8510258	Symbol	* dp -> stack		8510060						
ANR	8510259	Symbol	MAX_SIZE		8510060						
ANR	8510260	Symbol	compare_option		8510060						
ANR	8510261	Symbol	dp -> stack [ sp ] . best_val		8510060						
ANR	8510262	Symbol	dp		8510060						
ANR	8510263	Symbol	dp -> csp		8510060						
ANR	8510264	Symbol	dp -> stack		8510060						
ANR	8510265	Symbol	dp -> write_size		8510060						
ANR	8510266	Symbol	* dp		8510060						
ANR	8510267	Symbol	opt		8510060						
ANR	8510268	Symbol	search		8510060						
ANR	8510269	Symbol	dp -> value		8510060						
ANR	8510270	Symbol	* dp -> value		8510060						
ANR	8510271	Symbol	dp -> stack [ sp ] . end		8510060						
ANR	8510272	Symbol	dp -> nsp		8510060						
ANR	8510273	Symbol	* * dp		8510060						
ANR	8510274	Symbol	dp -> stack [ sp ] . best_size		8510060						
ANR	8510275	Symbol	dp -> tsp		8510060						
ANR	8510276	Symbol	sp		8510060						
ANR	8510277	Symbol	* opt		8510060						
ANR	8510278	Function	getallopts_	1224:0:39202:40018							
ANR	8510279	FunctionDef	"getallopts_ (struct display * dp , const png_byte opt , int * value , int record)"		8510278	0					
ANR	8510280	CompoundStatement		1228:0:39377:40018	8510278	0					
ANR	8510281	IfStatement	if ( dp -> entry [ opt ] )		8510278	0					
ANR	8510282	Condition	dp -> entry [ opt ]	1229:7:39386:39399	8510278	0	True				
ANR	8510283	ArrayIndexing	dp -> entry [ opt ]		8510278	0					
ANR	8510284	PtrMemberAccess	dp -> entry		8510278	0					
ANR	8510285	Identifier	dp		8510278	0					
ANR	8510286	Identifier	entry		8510278	1					
ANR	8510287	Identifier	opt		8510278	1					
ANR	8510288	CompoundStatement		8:6:307:374	8510278	1					
ANR	8510289	IdentifierDeclStatement	const char * entry_name = options [ opt ] . values [ dp -> entry [ opt ] - 1 ] . name ;	1235:6:39685:39752	8510278	0	True				
ANR	8510290	IdentifierDecl	* entry_name = options [ opt ] . values [ dp -> entry [ opt ] - 1 ] . name		8510278	0					
ANR	8510291	IdentifierDeclType	const char *		8510278	0					
ANR	8510292	Identifier	entry_name		8510278	1					
ANR	8510293	AssignmentExpression	* entry_name = options [ opt ] . values [ dp -> entry [ opt ] - 1 ] . name		8510278	2		=			
ANR	8510294	Identifier	entry_name		8510278	0					
ANR	8510295	MemberAccess	options [ opt ] . values [ dp -> entry [ opt ] - 1 ] . name		8510278	1					
ANR	8510296	ArrayIndexing	options [ opt ] . values [ dp -> entry [ opt ] - 1 ]		8510278	0					
ANR	8510297	MemberAccess	options [ opt ] . values		8510278	0					
ANR	8510298	ArrayIndexing	options [ opt ]		8510278	0					
ANR	8510299	Identifier	options		8510278	0					
ANR	8510300	Identifier	opt		8510278	1					
ANR	8510301	Identifier	values		8510278	1					
ANR	8510302	AdditiveExpression	dp -> entry [ opt ] - 1		8510278	1		-			
ANR	8510303	ArrayIndexing	dp -> entry [ opt ]		8510278	0					
ANR	8510304	PtrMemberAccess	dp -> entry		8510278	0					
ANR	8510305	Identifier	dp		8510278	0					
ANR	8510306	Identifier	entry		8510278	1					
ANR	8510307	Identifier	opt		8510278	1					
ANR	8510308	PrimaryExpression	1		8510278	1					
ANR	8510309	Identifier	name		8510278	1					
ANR	8510310	IfStatement	if ( entry_name == all )		8510278	1					
ANR	8510311	Condition	entry_name == all	1237:10:39765:39781	8510278	0	True				
ANR	8510312	EqualityExpression	entry_name == all		8510278	0		==			
ANR	8510313	Identifier	entry_name		8510278	0					
ANR	8510314	Identifier	all		8510278	1					
ANR	8510315	ExpressionStatement	"( void ) advance_opt ( dp , opt , 0 )"	1238:9:39793:39848	8510278	1	True				
ANR	8510316	CastExpression	"( void ) advance_opt ( dp , opt , 0 )"		8510278	0					
ANR	8510317	CastTarget	void		8510278	0					
ANR	8510318	CallExpression	"advance_opt ( dp , opt , 0 )"		8510278	1					
ANR	8510319	Callee	advance_opt		8510278	0					
ANR	8510320	Identifier	advance_opt		8510278	0					
ANR	8510321	ArgumentList	dp		8510278	1					
ANR	8510322	Argument	dp		8510278	0					
ANR	8510323	Identifier	dp		8510278	0					
ANR	8510324	Argument	opt		8510278	1					
ANR	8510325	Identifier	opt		8510278	0					
ANR	8510326	Argument	0		8510278	2					
ANR	8510327	PrimaryExpression	0		8510278	0					
ANR	8510328	ElseStatement	else		8510278	0					
ANR	8510329	IfStatement	if ( record )		8510278	0					
ANR	8510330	Condition	record	1240:15:39866:39871	8510278	0	True				
ANR	8510331	Identifier	record		8510278	0					
ANR	8510332	ExpressionStatement	"record_opt ( dp , opt , entry_name )"	1241:9:39883:39914	8510278	1	True				
ANR	8510333	CallExpression	"record_opt ( dp , opt , entry_name )"		8510278	0					
ANR	8510334	Callee	record_opt		8510278	0					
ANR	8510335	Identifier	record_opt		8510278	0					
ANR	8510336	ArgumentList	dp		8510278	1					
ANR	8510337	Argument	dp		8510278	0					
ANR	8510338	Identifier	dp		8510278	0					
ANR	8510339	Argument	opt		8510278	1					
ANR	8510340	Identifier	opt		8510278	0					
ANR	8510341	Argument	entry_name		8510278	2					
ANR	8510342	Identifier	entry_name		8510278	0					
ANR	8510343	ExpressionStatement	* value = dp -> value [ opt ]	1243:6:39923:39946	8510278	2	True				
ANR	8510344	AssignmentExpression	* value = dp -> value [ opt ]		8510278	0		=			
ANR	8510345	UnaryOperationExpression	* value		8510278	0					
ANR	8510346	UnaryOperator	*		8510278	0					
ANR	8510347	Identifier	value		8510278	1					
ANR	8510348	ArrayIndexing	dp -> value [ opt ]		8510278	1					
ANR	8510349	PtrMemberAccess	dp -> value		8510278	0					
ANR	8510350	Identifier	dp		8510278	0					
ANR	8510351	Identifier	value		8510278	1					
ANR	8510352	Identifier	opt		8510278	1					
ANR	8510353	ReturnStatement	return 1 ;	1244:6:39954:39962	8510278	3	True				
ANR	8510354	PrimaryExpression	1		8510278	0					
ANR	8510355	ElseStatement	else		8510278	0					
ANR	8510356	ReturnStatement	return 0 ;	1248:6:39994:40002	8510278	0	True				
ANR	8510357	PrimaryExpression	0		8510278	0					
ANR	8510358	ReturnType	static int		8510278	1					
ANR	8510359	Identifier	getallopts_		8510278	2					
ANR	8510360	ParameterList	"struct display * dp , const png_byte opt , int * value , int record"		8510278	3					
ANR	8510361	Parameter	struct display * dp	1225:12:39225:39242	8510278	0	True				
ANR	8510362	ParameterType	struct display *		8510278	0					
ANR	8510363	Identifier	dp		8510278	1					
ANR	8510364	Parameter	const png_byte opt	1225:32:39245:39262	8510278	1	True				
ANR	8510365	ParameterType	const png_byte		8510278	0					
ANR	8510366	Identifier	opt		8510278	1					
ANR	8510367	Parameter	int * value	1225:52:39265:39274	8510278	2	True				
ANR	8510368	ParameterType	int *		8510278	0					
ANR	8510369	Identifier	value		8510278	1					
ANR	8510370	Parameter	int record	1225:64:39277:39286	8510278	3	True				
ANR	8510371	ParameterType	int		8510278	0					
ANR	8510372	Identifier	record		8510278	1					
ANR	8510373	CFGEntryNode	ENTRY		8510278		True				
ANR	8510374	CFGExitNode	EXIT		8510278		True				
ANR	8510375	Symbol	entry_name		8510278						
ANR	8510376	Symbol	all		8510278						
ANR	8510377	Symbol	* options [ opt ] . values		8510278						
ANR	8510378	Symbol	* * opt		8510278						
ANR	8510379	Symbol	* * options		8510278						
ANR	8510380	Symbol	dp		8510278						
ANR	8510381	Symbol	dp -> entry		8510278						
ANR	8510382	Symbol	* * dp -> entry		8510278						
ANR	8510383	Symbol	* options		8510278						
ANR	8510384	Symbol	* dp -> entry		8510278						
ANR	8510385	Symbol	* dp		8510278						
ANR	8510386	Symbol	opt		8510278						
ANR	8510387	Symbol	dp -> value		8510278						
ANR	8510388	Symbol	* * * dp		8510278						
ANR	8510389	Symbol	options [ opt ] . values [ dp -> entry [ opt ] - 1 ] . name		8510278						
ANR	8510390	Symbol	* value		8510278						
ANR	8510391	Symbol	record		8510278						
ANR	8510392	Symbol	* dp -> value		8510278						
ANR	8510393	Symbol	options		8510278						
ANR	8510394	Symbol	* * dp		8510278						
ANR	8510395	Symbol	value		8510278						
ANR	8510396	Symbol	* opt		8510278						
ANR	8510397	Symbol	options [ opt ] . values		8510278						
ANR	8510398	Function	getallopts	1251:0:40021:40179							
ANR	8510399	FunctionDef	"getallopts (struct display * dp , const char * opt_str , int * value)"		8510398	0					
ANR	8510400	CompoundStatement		1253:0:40096:40179	8510398	0					
ANR	8510401	ReturnStatement	"return getallopts_ ( dp , option_index ( dp , opt_str , strlen ( opt_str ) ) , value , 0 ) ;"	1254:3:40101:40177	8510398	0	True				
ANR	8510402	CallExpression	"getallopts_ ( dp , option_index ( dp , opt_str , strlen ( opt_str ) ) , value , 0 )"		8510398	0					
ANR	8510403	Callee	getallopts_		8510398	0					
ANR	8510404	Identifier	getallopts_		8510398	0					
ANR	8510405	ArgumentList	dp		8510398	1					
ANR	8510406	Argument	dp		8510398	0					
ANR	8510407	Identifier	dp		8510398	0					
ANR	8510408	Argument	"option_index ( dp , opt_str , strlen ( opt_str ) )"		8510398	1					
ANR	8510409	CallExpression	"option_index ( dp , opt_str , strlen ( opt_str ) )"		8510398	0					
ANR	8510410	Callee	option_index		8510398	0					
ANR	8510411	Identifier	option_index		8510398	0					
ANR	8510412	ArgumentList	dp		8510398	1					
ANR	8510413	Argument	dp		8510398	0					
ANR	8510414	Identifier	dp		8510398	0					
ANR	8510415	Argument	opt_str		8510398	1					
ANR	8510416	Identifier	opt_str		8510398	0					
ANR	8510417	Argument	strlen ( opt_str )		8510398	2					
ANR	8510418	CallExpression	strlen ( opt_str )		8510398	0					
ANR	8510419	Callee	strlen		8510398	0					
ANR	8510420	Identifier	strlen		8510398	0					
ANR	8510421	ArgumentList	opt_str		8510398	1					
ANR	8510422	Argument	opt_str		8510398	0					
ANR	8510423	Identifier	opt_str		8510398	0					
ANR	8510424	Argument	value		8510398	2					
ANR	8510425	Identifier	value		8510398	0					
ANR	8510426	Argument	0		8510398	3					
ANR	8510427	PrimaryExpression	0		8510398	0					
ANR	8510428	ReturnType	static int		8510398	1					
ANR	8510429	Identifier	getallopts		8510398	2					
ANR	8510430	ParameterList	"struct display * dp , const char * opt_str , int * value"		8510398	3					
ANR	8510431	Parameter	struct display * dp	1252:11:40043:40060	8510398	0	True				
ANR	8510432	ParameterType	struct display *		8510398	0					
ANR	8510433	Identifier	dp		8510398	1					
ANR	8510434	Parameter	const char * opt_str	1252:31:40063:40081	8510398	1	True				
ANR	8510435	ParameterType	const char *		8510398	0					
ANR	8510436	Identifier	opt_str		8510398	1					
ANR	8510437	Parameter	int * value	1252:52:40084:40093	8510398	2	True				
ANR	8510438	ParameterType	int *		8510398	0					
ANR	8510439	Identifier	value		8510398	1					
ANR	8510440	CFGEntryNode	ENTRY		8510398		True				
ANR	8510441	CFGExitNode	EXIT		8510398		True				
ANR	8510442	Symbol	strlen		8510398						
ANR	8510443	Symbol	opt_str		8510398						
ANR	8510444	Symbol	getallopts_		8510398						
ANR	8510445	Symbol	dp		8510398						
ANR	8510446	Symbol	value		8510398						
ANR	8510447	Symbol	option_index		8510398						
ANR	8510448	Function	getsearchopts	1257:0:40182:42318							
ANR	8510449	FunctionDef	"getsearchopts (struct display * dp , const char * opt_str , int * value)"		8510448	0					
ANR	8510450	CompoundStatement		1260:0:40329:42318	8510448	0					
ANR	8510451	IdentifierDeclStatement	png_byte istrat ;	1261:3:40334:40349	8510448	0	True				
ANR	8510452	IdentifierDecl	istrat		8510448	0					
ANR	8510453	IdentifierDeclType	png_byte		8510448	0					
ANR	8510454	Identifier	istrat		8510448	1					
ANR	8510455	IdentifierDeclStatement	"const png_byte opt = option_index ( dp , opt_str , strlen ( opt_str ) ) ;"	1262:3:40354:40417	8510448	1	True				
ANR	8510456	IdentifierDecl	"opt = option_index ( dp , opt_str , strlen ( opt_str ) )"		8510448	0					
ANR	8510457	IdentifierDeclType	const png_byte		8510448	0					
ANR	8510458	Identifier	opt		8510448	1					
ANR	8510459	AssignmentExpression	"opt = option_index ( dp , opt_str , strlen ( opt_str ) )"		8510448	2		=			
ANR	8510460	Identifier	opt		8510448	0					
ANR	8510461	CallExpression	"option_index ( dp , opt_str , strlen ( opt_str ) )"		8510448	1					
ANR	8510462	Callee	option_index		8510448	0					
ANR	8510463	Identifier	option_index		8510448	0					
ANR	8510464	ArgumentList	dp		8510448	1					
ANR	8510465	Argument	dp		8510448	0					
ANR	8510466	Identifier	dp		8510448	0					
ANR	8510467	Argument	opt_str		8510448	1					
ANR	8510468	Identifier	opt_str		8510448	0					
ANR	8510469	Argument	strlen ( opt_str )		8510448	2					
ANR	8510470	CallExpression	strlen ( opt_str )		8510448	0					
ANR	8510471	Callee	strlen		8510448	0					
ANR	8510472	Identifier	strlen		8510448	0					
ANR	8510473	ArgumentList	opt_str		8510448	1					
ANR	8510474	Argument	opt_str		8510448	0					
ANR	8510475	Identifier	opt_str		8510448	0					
ANR	8510476	IdentifierDeclStatement	int record = options [ opt ] . search ;	1263:3:40422:40454	8510448	2	True				
ANR	8510477	IdentifierDecl	record = options [ opt ] . search		8510448	0					
ANR	8510478	IdentifierDeclType	int		8510448	0					
ANR	8510479	Identifier	record		8510448	1					
ANR	8510480	AssignmentExpression	record = options [ opt ] . search		8510448	2		=			
ANR	8510481	Identifier	record		8510448	0					
ANR	8510482	MemberAccess	options [ opt ] . search		8510448	1					
ANR	8510483	ArrayIndexing	options [ opt ]		8510448	0					
ANR	8510484	Identifier	options		8510448	0					
ANR	8510485	Identifier	opt		8510448	1					
ANR	8510486	Identifier	search		8510448	1					
ANR	8510487	IdentifierDeclStatement	const char * entry_name ;	1264:3:40459:40481	8510448	3	True				
ANR	8510488	IdentifierDecl	* entry_name		8510448	0					
ANR	8510489	IdentifierDeclType	const char *		8510448	0					
ANR	8510490	Identifier	entry_name		8510448	1					
ANR	8510491	IfStatement	"if ( getallopts_ ( dp , opt , value , record ) )"		8510448	4					
ANR	8510492	Condition	"getallopts_ ( dp , opt , value , record )"	1269:7:40621:40655	8510448	0	True				
ANR	8510493	CallExpression	"getallopts_ ( dp , opt , value , record )"		8510448	0					
ANR	8510494	Callee	getallopts_		8510448	0					
ANR	8510495	Identifier	getallopts_		8510448	0					
ANR	8510496	ArgumentList	dp		8510448	1					
ANR	8510497	Argument	dp		8510448	0					
ANR	8510498	Identifier	dp		8510448	0					
ANR	8510499	Argument	opt		8510448	1					
ANR	8510500	Identifier	opt		8510448	0					
ANR	8510501	Argument	value		8510448	2					
ANR	8510502	Identifier	value		8510448	0					
ANR	8510503	Argument	record		8510448	3					
ANR	8510504	Identifier	record		8510448	0					
ANR	8510505	ReturnStatement	return 1 ;	1270:6:40664:40672	8510448	1	True				
ANR	8510506	PrimaryExpression	1		8510448	0					
ANR	8510507	ElseStatement	else		8510448	0					
ANR	8510508	IfStatement	if ( ! record )		8510448	0					
ANR	8510509	Condition	! record	1272:12:40687:40693	8510448	0	True				
ANR	8510510	UnaryOperationExpression	! record		8510448	0					
ANR	8510511	UnaryOperator	!		8510448	0					
ANR	8510512	Identifier	record		8510448	1					
ANR	8510513	ReturnStatement	return 0 ;	1273:6:40728:40736	8510448	1	True				
ANR	8510514	PrimaryExpression	0		8510448	0					
ANR	8510515	ElseStatement	else		8510448	0					
ANR	8510516	IfStatement	"if ( opt == OPTIND ( dp , memLevel ) )"		8510448	0					
ANR	8510517	Condition	"opt == OPTIND ( dp , memLevel )"	1309:12:41948:41974	8510448	0	True				
ANR	8510518	EqualityExpression	"opt == OPTIND ( dp , memLevel )"		8510448	0		==			
ANR	8510519	Identifier	opt		8510448	0					
ANR	8510520	CallExpression	"OPTIND ( dp , memLevel )"		8510448	1					
ANR	8510521	Callee	OPTIND		8510448	0					
ANR	8510522	Identifier	OPTIND		8510448	0					
ANR	8510523	ArgumentList	dp		8510448	1					
ANR	8510524	Argument	dp		8510448	0					
ANR	8510525	Identifier	dp		8510448	0					
ANR	8510526	Argument	memLevel		8510448	1					
ANR	8510527	Identifier	memLevel		8510448	0					
ANR	8510528	CompoundStatement		51:3:1650:1650	8510448	1					
ANR	8510529	Statement	if	1311:6:41988:41989	8510448	0	True				
ANR	8510530	Statement	0	1311:9:41991:41991	8510448	1	True				
ANR	8510531	ExpressionStatement	"( void ) advance_opt ( dp , opt , 0 ) , record = 0"	1312:9:42002:42048	8510448	2	True				
ANR	8510532	Expression	"( void ) advance_opt ( dp , opt , 0 ) , record = 0"		8510448	0					
ANR	8510533	CastExpression	"( void ) advance_opt ( dp , opt , 0 )"		8510448	0					
ANR	8510534	CastTarget	void		8510448	0					
ANR	8510535	CallExpression	"advance_opt ( dp , opt , 0 )"		8510448	1					
ANR	8510536	Callee	advance_opt		8510448	0					
ANR	8510537	Identifier	advance_opt		8510448	0					
ANR	8510538	ArgumentList	dp		8510448	1					
ANR	8510539	Argument	dp		8510448	0					
ANR	8510540	Identifier	dp		8510448	0					
ANR	8510541	Argument	opt		8510448	1					
ANR	8510542	Identifier	opt		8510448	0					
ANR	8510543	Argument	0		8510448	2					
ANR	8510544	PrimaryExpression	0		8510448	0					
ANR	8510545	AssignmentExpression	record = 0		8510448	1		=			
ANR	8510546	Identifier	record		8510448	0					
ANR	8510547	PrimaryExpression	0		8510448	1					
ANR	8510548	Statement	endif	1315:6:42108:42112	8510448	3	True				
ANR	8510549	ElseStatement	else		8510448	0					
ANR	8510550	ExpressionStatement	dp -> value [ opt ] = MAX_MEM_LEVEL	1314:9:42070:42100	8510448	0	True				
ANR	8510551	AssignmentExpression	dp -> value [ opt ] = MAX_MEM_LEVEL		8510448	0		=			
ANR	8510552	ArrayIndexing	dp -> value [ opt ]		8510448	0					
ANR	8510553	PtrMemberAccess	dp -> value		8510448	0					
ANR	8510554	Identifier	dp		8510448	0					
ANR	8510555	Identifier	value		8510448	1					
ANR	8510556	Identifier	opt		8510448	1					
ANR	8510557	Identifier	MAX_MEM_LEVEL		8510448	1					
ANR	8510558	ExpressionStatement	"istrat = OPTIND ( dp , strategy )"	1276:3:40814:40843	8510448	5	True				
ANR	8510559	AssignmentExpression	"istrat = OPTIND ( dp , strategy )"		8510448	0		=			
ANR	8510560	Identifier	istrat		8510448	0					
ANR	8510561	CallExpression	"OPTIND ( dp , strategy )"		8510448	1					
ANR	8510562	Callee	OPTIND		8510448	0					
ANR	8510563	Identifier	OPTIND		8510448	0					
ANR	8510564	ArgumentList	dp		8510448	1					
ANR	8510565	Argument	dp		8510448	0					
ANR	8510566	Identifier	dp		8510448	0					
ANR	8510567	Argument	strategy		8510448	1					
ANR	8510568	Identifier	strategy		8510448	0					
ANR	8510569	ExpressionStatement	entry_name = range_lo	1277:3:40848:40869	8510448	6	True				
ANR	8510570	AssignmentExpression	entry_name = range_lo		8510448	0		=			
ANR	8510571	Identifier	entry_name		8510448	0					
ANR	8510572	Identifier	range_lo		8510448	1					
ANR	8510573	IfStatement	if ( opt == istrat )		8510448	7					
ANR	8510574	Condition	opt == istrat	1279:7:40916:40928	8510448	0	True				
ANR	8510575	EqualityExpression	opt == istrat		8510448	0		==			
ANR	8510576	Identifier	opt		8510448	0					
ANR	8510577	Identifier	istrat		8510448	1					
ANR	8510578	ExpressionStatement	"( void ) advance_opt ( dp , opt , 0 ) , record = 0"	1280:6:40965:41015	8510448	1	True				
ANR	8510579	Expression	"( void ) advance_opt ( dp , opt , 0 ) , record = 0"		8510448	0					
ANR	8510580	CastExpression	"( void ) advance_opt ( dp , opt , 0 )"		8510448	0					
ANR	8510581	CastTarget	void		8510448	0					
ANR	8510582	CallExpression	"advance_opt ( dp , opt , 0 )"		8510448	1					
ANR	8510583	Callee	advance_opt		8510448	0					
ANR	8510584	Identifier	advance_opt		8510448	0					
ANR	8510585	ArgumentList	dp		8510448	1					
ANR	8510586	Argument	dp		8510448	0					
ANR	8510587	Identifier	dp		8510448	0					
ANR	8510588	Argument	opt		8510448	1					
ANR	8510589	Identifier	opt		8510448	0					
ANR	8510590	Argument	0		8510448	2					
ANR	8510591	PrimaryExpression	0		8510448	0					
ANR	8510592	AssignmentExpression	record = 0		8510448	1		=			
ANR	8510593	Identifier	record		8510448	0					
ANR	8510594	PrimaryExpression	0		8510448	1					
ANR	8510595	ElseStatement	else		8510448	0					
ANR	8510596	IfStatement	"if ( opt == OPTIND ( dp , level ) )"		8510448	0					
ANR	8510597	Condition	"opt == OPTIND ( dp , level )"	1282:12:41030:41053	8510448	0	True				
ANR	8510598	EqualityExpression	"opt == OPTIND ( dp , level )"		8510448	0		==			
ANR	8510599	Identifier	opt		8510448	0					
ANR	8510600	CallExpression	"OPTIND ( dp , level )"		8510448	1					
ANR	8510601	Callee	OPTIND		8510448	0					
ANR	8510602	Identifier	OPTIND		8510448	0					
ANR	8510603	ArgumentList	dp		8510448	1					
ANR	8510604	Argument	dp		8510448	0					
ANR	8510605	Identifier	dp		8510448	0					
ANR	8510606	Argument	level		8510448	1					
ANR	8510607	Identifier	level		8510448	0					
ANR	8510608	CompoundStatement		24:3:729:729	8510448	1					
ANR	8510609	IfStatement	if ( dp -> value [ istrat ] == Z_RLE || dp -> value [ istrat ] == Z_HUFFMAN_ONLY )		8510448	0					
ANR	8510610	Condition	dp -> value [ istrat ] == Z_RLE || dp -> value [ istrat ] == Z_HUFFMAN_ONLY	1285:10:41139:41203	8510448	0	True				
ANR	8510611	OrExpression	dp -> value [ istrat ] == Z_RLE || dp -> value [ istrat ] == Z_HUFFMAN_ONLY		8510448	0		||			
ANR	8510612	EqualityExpression	dp -> value [ istrat ] == Z_RLE		8510448	0		==			
ANR	8510613	ArrayIndexing	dp -> value [ istrat ]		8510448	0					
ANR	8510614	PtrMemberAccess	dp -> value		8510448	0					
ANR	8510615	Identifier	dp		8510448	0					
ANR	8510616	Identifier	value		8510448	1					
ANR	8510617	Identifier	istrat		8510448	1					
ANR	8510618	Identifier	Z_RLE		8510448	1					
ANR	8510619	EqualityExpression	dp -> value [ istrat ] == Z_HUFFMAN_ONLY		8510448	1		==			
ANR	8510620	ArrayIndexing	dp -> value [ istrat ]		8510448	0					
ANR	8510621	PtrMemberAccess	dp -> value		8510448	0					
ANR	8510622	Identifier	dp		8510448	0					
ANR	8510623	Identifier	value		8510448	1					
ANR	8510624	Identifier	istrat		8510448	1					
ANR	8510625	Identifier	Z_HUFFMAN_ONLY		8510448	1					
ANR	8510626	ExpressionStatement	dp -> value [ opt ] = 1	1286:9:41215:41233	8510448	1	True				
ANR	8510627	AssignmentExpression	dp -> value [ opt ] = 1		8510448	0		=			
ANR	8510628	ArrayIndexing	dp -> value [ opt ]		8510448	0					
ANR	8510629	PtrMemberAccess	dp -> value		8510448	0					
ANR	8510630	Identifier	dp		8510448	0					
ANR	8510631	Identifier	value		8510448	1					
ANR	8510632	Identifier	opt		8510448	1					
ANR	8510633	PrimaryExpression	1		8510448	1					
ANR	8510634	ElseStatement	else		8510448	0					
ANR	8510635	ExpressionStatement	"( void ) advance_opt ( dp , opt , 1 ) , record = 0"	1289:9:41289:41338	8510448	0	True				
ANR	8510636	Expression	"( void ) advance_opt ( dp , opt , 1 ) , record = 0"		8510448	0					
ANR	8510637	CastExpression	"( void ) advance_opt ( dp , opt , 1 )"		8510448	0					
ANR	8510638	CastTarget	void		8510448	0					
ANR	8510639	CallExpression	"advance_opt ( dp , opt , 1 )"		8510448	1					
ANR	8510640	Callee	advance_opt		8510448	0					
ANR	8510641	Identifier	advance_opt		8510448	0					
ANR	8510642	ArgumentList	dp		8510448	1					
ANR	8510643	Argument	dp		8510448	0					
ANR	8510644	Identifier	dp		8510448	0					
ANR	8510645	Argument	opt		8510448	1					
ANR	8510646	Identifier	opt		8510448	0					
ANR	8510647	Argument	1		8510448	2					
ANR	8510648	PrimaryExpression	1		8510448	0					
ANR	8510649	AssignmentExpression	record = 0		8510448	1		=			
ANR	8510650	Identifier	record		8510448	0					
ANR	8510651	PrimaryExpression	0		8510448	1					
ANR	8510652	ElseStatement	else		8510448	0					
ANR	8510653	IfStatement	"if ( opt == OPTIND ( dp , windowBits ) )"		8510448	0					
ANR	8510654	Condition	"opt == OPTIND ( dp , windowBits )"	1292:12:41358:41386	8510448	0	True				
ANR	8510655	EqualityExpression	"opt == OPTIND ( dp , windowBits )"		8510448	0		==			
ANR	8510656	Identifier	opt		8510448	0					
ANR	8510657	CallExpression	"OPTIND ( dp , windowBits )"		8510448	1					
ANR	8510658	Callee	OPTIND		8510448	0					
ANR	8510659	Identifier	OPTIND		8510448	0					
ANR	8510660	ArgumentList	dp		8510448	1					
ANR	8510661	Argument	dp		8510448	0					
ANR	8510662	Identifier	dp		8510448	0					
ANR	8510663	Argument	windowBits		8510448	1					
ANR	8510664	Identifier	windowBits		8510448	0					
ANR	8510665	CompoundStatement		34:3:1062:1062	8510448	1					
ANR	8510666	IfStatement	if ( dp -> value [ istrat ] == Z_HUFFMAN_ONLY )		8510448	0					
ANR	8510667	Condition	dp -> value [ istrat ] == Z_HUFFMAN_ONLY	1299:10:41686:41720	8510448	0	True				
ANR	8510668	EqualityExpression	dp -> value [ istrat ] == Z_HUFFMAN_ONLY		8510448	0		==			
ANR	8510669	ArrayIndexing	dp -> value [ istrat ]		8510448	0					
ANR	8510670	PtrMemberAccess	dp -> value		8510448	0					
ANR	8510671	Identifier	dp		8510448	0					
ANR	8510672	Identifier	value		8510448	1					
ANR	8510673	Identifier	istrat		8510448	1					
ANR	8510674	Identifier	Z_HUFFMAN_ONLY		8510448	1					
ANR	8510675	ExpressionStatement	dp -> value [ opt ] = 8	1300:9:41732:41750	8510448	1	True				
ANR	8510676	AssignmentExpression	dp -> value [ opt ] = 8		8510448	0		=			
ANR	8510677	ArrayIndexing	dp -> value [ opt ]		8510448	0					
ANR	8510678	PtrMemberAccess	dp -> value		8510448	0					
ANR	8510679	Identifier	dp		8510448	0					
ANR	8510680	Identifier	value		8510448	1					
ANR	8510681	Identifier	opt		8510448	1					
ANR	8510682	PrimaryExpression	8		8510448	1					
ANR	8510683	ElseStatement	else		8510448	0					
ANR	8510684	IfStatement	if ( dp -> value [ istrat ] == Z_RLE )		8510448	0					
ANR	8510685	Condition	dp -> value [ istrat ] == Z_RLE	1302:15:41768:41793	8510448	0	True				
ANR	8510686	EqualityExpression	dp -> value [ istrat ] == Z_RLE		8510448	0		==			
ANR	8510687	ArrayIndexing	dp -> value [ istrat ]		8510448	0					
ANR	8510688	PtrMemberAccess	dp -> value		8510448	0					
ANR	8510689	Identifier	dp		8510448	0					
ANR	8510690	Identifier	value		8510448	1					
ANR	8510691	Identifier	istrat		8510448	1					
ANR	8510692	Identifier	Z_RLE		8510448	1					
ANR	8510693	ExpressionStatement	dp -> value [ opt ] = 9	1303:9:41805:41823	8510448	1	True				
ANR	8510694	AssignmentExpression	dp -> value [ opt ] = 9		8510448	0		=			
ANR	8510695	ArrayIndexing	dp -> value [ opt ]		8510448	0					
ANR	8510696	PtrMemberAccess	dp -> value		8510448	0					
ANR	8510697	Identifier	dp		8510448	0					
ANR	8510698	Identifier	value		8510448	1					
ANR	8510699	Identifier	opt		8510448	1					
ANR	8510700	PrimaryExpression	9		8510448	1					
ANR	8510701	ElseStatement	else		8510448	0					
ANR	8510702	ExpressionStatement	"( void ) advance_opt ( dp , opt , 1 ) , record = 0"	1306:9:41879:41928	8510448	0	True				
ANR	8510703	Expression	"( void ) advance_opt ( dp , opt , 1 ) , record = 0"		8510448	0					
ANR	8510704	CastExpression	"( void ) advance_opt ( dp , opt , 1 )"		8510448	0					
ANR	8510705	CastTarget	void		8510448	0					
ANR	8510706	CallExpression	"advance_opt ( dp , opt , 1 )"		8510448	1					
ANR	8510707	Callee	advance_opt		8510448	0					
ANR	8510708	Identifier	advance_opt		8510448	0					
ANR	8510709	ArgumentList	dp		8510448	1					
ANR	8510710	Argument	dp		8510448	0					
ANR	8510711	Identifier	dp		8510448	0					
ANR	8510712	Argument	opt		8510448	1					
ANR	8510713	Identifier	opt		8510448	0					
ANR	8510714	Argument	1		8510448	2					
ANR	8510715	PrimaryExpression	1		8510448	0					
ANR	8510716	AssignmentExpression	record = 0		8510448	1		=			
ANR	8510717	Identifier	record		8510448	0					
ANR	8510718	PrimaryExpression	0		8510448	1					
ANR	8510719	ElseStatement	else		8510448	0					
ANR	8510720	ExpressionStatement	"assert ( 0 == ""reached"" )"	1319:6:42155:42175	8510448	0	True				
ANR	8510721	CallExpression	"assert ( 0 == ""reached"" )"		8510448	0					
ANR	8510722	Callee	assert		8510448	0					
ANR	8510723	Identifier	assert		8510448	0					
ANR	8510724	ArgumentList	"0 == ""reached"""		8510448	1					
ANR	8510725	Argument	"0 == ""reached"""		8510448	0					
ANR	8510726	EqualityExpression	"0 == ""reached"""		8510448	0		==			
ANR	8510727	PrimaryExpression	0		8510448	0					
ANR	8510728	PrimaryExpression	"""reached"""		8510448	1					
ANR	8510729	IfStatement	if ( record )		8510448	8					
ANR	8510730	Condition	record	1321:7:42185:42190	8510448	0	True				
ANR	8510731	Identifier	record		8510448	0					
ANR	8510732	ExpressionStatement	"record_opt ( dp , opt , entry_name )"	1322:6:42199:42230	8510448	1	True				
ANR	8510733	CallExpression	"record_opt ( dp , opt , entry_name )"		8510448	0					
ANR	8510734	Callee	record_opt		8510448	0					
ANR	8510735	Identifier	record_opt		8510448	0					
ANR	8510736	ArgumentList	dp		8510448	1					
ANR	8510737	Argument	dp		8510448	0					
ANR	8510738	Identifier	dp		8510448	0					
ANR	8510739	Argument	opt		8510448	1					
ANR	8510740	Identifier	opt		8510448	0					
ANR	8510741	Argument	entry_name		8510448	2					
ANR	8510742	Identifier	entry_name		8510448	0					
ANR	8510743	ExpressionStatement	* value = dp -> value [ opt ]	1325:3:42280:42303	8510448	9	True				
ANR	8510744	AssignmentExpression	* value = dp -> value [ opt ]		8510448	0		=			
ANR	8510745	UnaryOperationExpression	* value		8510448	0					
ANR	8510746	UnaryOperator	*		8510448	0					
ANR	8510747	Identifier	value		8510448	1					
ANR	8510748	ArrayIndexing	dp -> value [ opt ]		8510448	1					
ANR	8510749	PtrMemberAccess	dp -> value		8510448	0					
ANR	8510750	Identifier	dp		8510448	0					
ANR	8510751	Identifier	value		8510448	1					
ANR	8510752	Identifier	opt		8510448	1					
ANR	8510753	ReturnStatement	return 1 ;	1326:3:42308:42316	8510448	10	True				
ANR	8510754	PrimaryExpression	1		8510448	0					
ANR	8510755	ReturnType	static int		8510448	1					
ANR	8510756	Identifier	getsearchopts		8510448	2					
ANR	8510757	ParameterList	"struct display * dp , const char * opt_str , int * value"		8510448	3					
ANR	8510758	Parameter	struct display * dp	1258:14:40207:40224	8510448	0	True				
ANR	8510759	ParameterType	struct display *		8510448	0					
ANR	8510760	Identifier	dp		8510448	1					
ANR	8510761	Parameter	const char * opt_str	1258:34:40227:40245	8510448	1	True				
ANR	8510762	ParameterType	const char *		8510448	0					
ANR	8510763	Identifier	opt_str		8510448	1					
ANR	8510764	Parameter	int * value	1258:55:40248:40257	8510448	2	True				
ANR	8510765	ParameterType	int *		8510448	0					
ANR	8510766	Identifier	value		8510448	1					
ANR	8510767	CFGEntryNode	ENTRY		8510448		True				
ANR	8510768	CFGExitNode	EXIT		8510448		True				
ANR	8510769	Symbol	Z_RLE		8510448						
ANR	8510770	Symbol	MAX_MEM_LEVEL		8510448						
ANR	8510771	Symbol	dp		8510448						
ANR	8510772	Symbol	* options		8510448						
ANR	8510773	Symbol	strlen		8510448						
ANR	8510774	Symbol	OPTIND		8510448						
ANR	8510775	Symbol	* dp		8510448						
ANR	8510776	Symbol	Z_HUFFMAN_ONLY		8510448						
ANR	8510777	Symbol	record		8510448						
ANR	8510778	Symbol	range_lo		8510448						
ANR	8510779	Symbol	options [ opt ] . search		8510448						
ANR	8510780	Symbol	options		8510448						
ANR	8510781	Symbol	getallopts_		8510448						
ANR	8510782	Symbol	value		8510448						
ANR	8510783	Symbol	option_index		8510448						
ANR	8510784	Symbol	* opt		8510448						
ANR	8510785	Symbol	entry_name		8510448						
ANR	8510786	Symbol	* istrat		8510448						
ANR	8510787	Symbol	level		8510448						
ANR	8510788	Symbol	opt_str		8510448						
ANR	8510789	Symbol	istrat		8510448						
ANR	8510790	Symbol	windowBits		8510448						
ANR	8510791	Symbol	opt		8510448						
ANR	8510792	Symbol	dp -> value		8510448						
ANR	8510793	Symbol	* value		8510448						
ANR	8510794	Symbol	* dp -> value		8510448						
ANR	8510795	Symbol	* * dp		8510448						
ANR	8510796	Symbol	memLevel		8510448						
ANR	8510797	Symbol	strategy		8510448						
ANR	8510798	Function	find_val	1329:0:42321:43628							
ANR	8510799	FunctionDef	"find_val (struct display * dp , png_byte opt , const char * str , size_t len)"		8510798	0					
ANR	8510800	CompoundStatement		1335:0:42581:43628	8510798	0					
ANR	8510801	IdentifierDeclStatement	"int rlo = INT_MAX , rhi = INT_MIN ;"	1336:3:42586:42618	8510798	0	True				
ANR	8510802	IdentifierDecl	rlo = INT_MAX		8510798	0					
ANR	8510803	IdentifierDeclType	int		8510798	0					
ANR	8510804	Identifier	rlo		8510798	1					
ANR	8510805	AssignmentExpression	rlo = INT_MAX		8510798	2		=			
ANR	8510806	Identifier	INT_MAX		8510798	0					
ANR	8510807	Identifier	INT_MAX		8510798	1					
ANR	8510808	IdentifierDecl	rhi = INT_MIN		8510798	1					
ANR	8510809	IdentifierDeclType	int		8510798	0					
ANR	8510810	Identifier	rhi		8510798	1					
ANR	8510811	AssignmentExpression	rhi = INT_MIN		8510798	2		=			
ANR	8510812	Identifier	INT_MIN		8510798	0					
ANR	8510813	Identifier	INT_MIN		8510798	1					
ANR	8510814	IdentifierDeclStatement	"png_byte j , irange = 0 ;"	1337:3:42623:42645	8510798	1	True				
ANR	8510815	IdentifierDecl	j		8510798	0					
ANR	8510816	IdentifierDeclType	png_byte		8510798	0					
ANR	8510817	Identifier	j		8510798	1					
ANR	8510818	IdentifierDecl	irange = 0		8510798	1					
ANR	8510819	IdentifierDeclType	png_byte		8510798	0					
ANR	8510820	Identifier	irange		8510798	1					
ANR	8510821	AssignmentExpression	irange = 0		8510798	2		=			
ANR	8510822	Identifier	irange		8510798	0					
ANR	8510823	PrimaryExpression	0		8510798	1					
ANR	8510824	ForStatement	for ( j = 1U ; j <= options [ opt ] . value_count ; ++ j )		8510798	2					
ANR	8510825	ForInit	j = 1U ;	1339:8:42656:42660	8510798	0	True				
ANR	8510826	AssignmentExpression	j = 1U		8510798	0		=			
ANR	8510827	Identifier	j		8510798	0					
ANR	8510828	PrimaryExpression	1U		8510798	1					
ANR	8510829	Condition	j <= options [ opt ] . value_count	1339:14:42662:42688	8510798	1	True				
ANR	8510830	RelationalExpression	j <= options [ opt ] . value_count		8510798	0		<=			
ANR	8510831	Identifier	j		8510798	0					
ANR	8510832	MemberAccess	options [ opt ] . value_count		8510798	1					
ANR	8510833	ArrayIndexing	options [ opt ]		8510798	0					
ANR	8510834	Identifier	options		8510798	0					
ANR	8510835	Identifier	opt		8510798	1					
ANR	8510836	Identifier	value_count		8510798	1					
ANR	8510837	UnaryExpression	++ j	1339:43:42691:42693	8510798	2	True				
ANR	8510838	IncDec	++		8510798	0					
ANR	8510839	Identifier	j		8510798	1					
ANR	8510840	CompoundStatement		6:3:117:117	8510798	3					
ANR	8510841	IfStatement	"if ( strncmp ( options [ opt ] . values [ j - 1U ] . name , str , len ) == 0 && options [ opt ] . values [ j - 1U ] . name [ len ] == 0 )"		8510798	0					
ANR	8510842	Condition	"strncmp ( options [ opt ] . values [ j - 1U ] . name , str , len ) == 0 && options [ opt ] . values [ j - 1U ] . name [ len ] == 0"	1341:10:42711:42818	8510798	0	True				
ANR	8510843	AndExpression	"strncmp ( options [ opt ] . values [ j - 1U ] . name , str , len ) == 0 && options [ opt ] . values [ j - 1U ] . name [ len ] == 0"		8510798	0		&&			
ANR	8510844	EqualityExpression	"strncmp ( options [ opt ] . values [ j - 1U ] . name , str , len ) == 0"		8510798	0		==			
ANR	8510845	CallExpression	"strncmp ( options [ opt ] . values [ j - 1U ] . name , str , len )"		8510798	0					
ANR	8510846	Callee	strncmp		8510798	0					
ANR	8510847	Identifier	strncmp		8510798	0					
ANR	8510848	ArgumentList	options [ opt ] . values [ j - 1U ] . name		8510798	1					
ANR	8510849	Argument	options [ opt ] . values [ j - 1U ] . name		8510798	0					
ANR	8510850	MemberAccess	options [ opt ] . values [ j - 1U ] . name		8510798	0					
ANR	8510851	ArrayIndexing	options [ opt ] . values [ j - 1U ]		8510798	0					
ANR	8510852	MemberAccess	options [ opt ] . values		8510798	0					
ANR	8510853	ArrayIndexing	options [ opt ]		8510798	0					
ANR	8510854	Identifier	options		8510798	0					
ANR	8510855	Identifier	opt		8510798	1					
ANR	8510856	Identifier	values		8510798	1					
ANR	8510857	AdditiveExpression	j - 1U		8510798	1		-			
ANR	8510858	Identifier	j		8510798	0					
ANR	8510859	PrimaryExpression	1U		8510798	1					
ANR	8510860	Identifier	name		8510798	1					
ANR	8510861	Argument	str		8510798	1					
ANR	8510862	Identifier	str		8510798	0					
ANR	8510863	Argument	len		8510798	2					
ANR	8510864	Identifier	len		8510798	0					
ANR	8510865	PrimaryExpression	0		8510798	1					
ANR	8510866	EqualityExpression	options [ opt ] . values [ j - 1U ] . name [ len ] == 0		8510798	1		==			
ANR	8510867	ArrayIndexing	options [ opt ] . values [ j - 1U ] . name [ len ]		8510798	0					
ANR	8510868	MemberAccess	options [ opt ] . values [ j - 1U ] . name		8510798	0					
ANR	8510869	ArrayIndexing	options [ opt ] . values [ j - 1U ]		8510798	0					
ANR	8510870	MemberAccess	options [ opt ] . values		8510798	0					
ANR	8510871	ArrayIndexing	options [ opt ]		8510798	0					
ANR	8510872	Identifier	options		8510798	0					
ANR	8510873	Identifier	opt		8510798	1					
ANR	8510874	Identifier	values		8510798	1					
ANR	8510875	AdditiveExpression	j - 1U		8510798	1		-			
ANR	8510876	Identifier	j		8510798	0					
ANR	8510877	PrimaryExpression	1U		8510798	1					
ANR	8510878	Identifier	name		8510798	1					
ANR	8510879	Identifier	len		8510798	1					
ANR	8510880	PrimaryExpression	0		8510798	1					
ANR	8510881	CompoundStatement		9:6:245:245	8510798	1					
ANR	8510882	ExpressionStatement	dp -> entry [ opt ] = j	1344:9:42838:42856	8510798	0	True				
ANR	8510883	AssignmentExpression	dp -> entry [ opt ] = j		8510798	0		=			
ANR	8510884	ArrayIndexing	dp -> entry [ opt ]		8510798	0					
ANR	8510885	PtrMemberAccess	dp -> entry		8510798	0					
ANR	8510886	Identifier	dp		8510798	0					
ANR	8510887	Identifier	entry		8510798	1					
ANR	8510888	Identifier	opt		8510798	1					
ANR	8510889	Identifier	j		8510798	1					
ANR	8510890	ReturnStatement	return options [ opt ] . values [ j - 1U ] . value ;	1345:9:42867:42905	8510798	1	True				
ANR	8510891	MemberAccess	options [ opt ] . values [ j - 1U ] . value		8510798	0					
ANR	8510892	ArrayIndexing	options [ opt ] . values [ j - 1U ]		8510798	0					
ANR	8510893	MemberAccess	options [ opt ] . values		8510798	0					
ANR	8510894	ArrayIndexing	options [ opt ]		8510798	0					
ANR	8510895	Identifier	options		8510798	0					
ANR	8510896	Identifier	opt		8510798	1					
ANR	8510897	Identifier	values		8510798	1					
ANR	8510898	AdditiveExpression	j - 1U		8510798	1		-			
ANR	8510899	Identifier	j		8510798	0					
ANR	8510900	PrimaryExpression	1U		8510798	1					
ANR	8510901	Identifier	value		8510798	1					
ANR	8510902	ElseStatement	else		8510798	0					
ANR	8510903	IfStatement	if ( options [ opt ] . values [ j - 1U ] . name == range_lo )		8510798	0					
ANR	8510904	Condition	options [ opt ] . values [ j - 1U ] . name == range_lo	1347:15:42930:42971	8510798	0	True				
ANR	8510905	EqualityExpression	options [ opt ] . values [ j - 1U ] . name == range_lo		8510798	0		==			
ANR	8510906	MemberAccess	options [ opt ] . values [ j - 1U ] . name		8510798	0					
ANR	8510907	ArrayIndexing	options [ opt ] . values [ j - 1U ]		8510798	0					
ANR	8510908	MemberAccess	options [ opt ] . values		8510798	0					
ANR	8510909	ArrayIndexing	options [ opt ]		8510798	0					
ANR	8510910	Identifier	options		8510798	0					
ANR	8510911	Identifier	opt		8510798	1					
ANR	8510912	Identifier	values		8510798	1					
ANR	8510913	AdditiveExpression	j - 1U		8510798	1		-			
ANR	8510914	Identifier	j		8510798	0					
ANR	8510915	PrimaryExpression	1U		8510798	1					
ANR	8510916	Identifier	name		8510798	1					
ANR	8510917	Identifier	range_lo		8510798	1					
ANR	8510918	ExpressionStatement	"rlo = options [ opt ] . values [ j - 1U ] . value , irange = j"	1348:9:42983:43032	8510798	1	True				
ANR	8510919	Expression	"rlo = options [ opt ] . values [ j - 1U ] . value , irange = j"		8510798	0					
ANR	8510920	AssignmentExpression	rlo = options [ opt ] . values [ j - 1U ] . value		8510798	0		=			
ANR	8510921	Identifier	rlo		8510798	0					
ANR	8510922	MemberAccess	options [ opt ] . values [ j - 1U ] . value		8510798	1					
ANR	8510923	ArrayIndexing	options [ opt ] . values [ j - 1U ]		8510798	0					
ANR	8510924	MemberAccess	options [ opt ] . values		8510798	0					
ANR	8510925	ArrayIndexing	options [ opt ]		8510798	0					
ANR	8510926	Identifier	options		8510798	0					
ANR	8510927	Identifier	opt		8510798	1					
ANR	8510928	Identifier	values		8510798	1					
ANR	8510929	AdditiveExpression	j - 1U		8510798	1		-			
ANR	8510930	Identifier	j		8510798	0					
ANR	8510931	PrimaryExpression	1U		8510798	1					
ANR	8510932	Identifier	value		8510798	1					
ANR	8510933	AssignmentExpression	irange = j		8510798	1		=			
ANR	8510934	Identifier	irange		8510798	0					
ANR	8510935	Identifier	j		8510798	1					
ANR	8510936	ElseStatement	else		8510798	0					
ANR	8510937	IfStatement	if ( options [ opt ] . values [ j - 1U ] . name == range_hi )		8510798	0					
ANR	8510938	Condition	options [ opt ] . values [ j - 1U ] . name == range_hi	1349:15:43049:43090	8510798	0	True				
ANR	8510939	EqualityExpression	options [ opt ] . values [ j - 1U ] . name == range_hi		8510798	0		==			
ANR	8510940	MemberAccess	options [ opt ] . values [ j - 1U ] . name		8510798	0					
ANR	8510941	ArrayIndexing	options [ opt ] . values [ j - 1U ]		8510798	0					
ANR	8510942	MemberAccess	options [ opt ] . values		8510798	0					
ANR	8510943	ArrayIndexing	options [ opt ]		8510798	0					
ANR	8510944	Identifier	options		8510798	0					
ANR	8510945	Identifier	opt		8510798	1					
ANR	8510946	Identifier	values		8510798	1					
ANR	8510947	AdditiveExpression	j - 1U		8510798	1		-			
ANR	8510948	Identifier	j		8510798	0					
ANR	8510949	PrimaryExpression	1U		8510798	1					
ANR	8510950	Identifier	name		8510798	1					
ANR	8510951	Identifier	range_hi		8510798	1					
ANR	8510952	ExpressionStatement	rhi = options [ opt ] . values [ j - 1U ] . value	1350:9:43102:43139	8510798	1	True				
ANR	8510953	AssignmentExpression	rhi = options [ opt ] . values [ j - 1U ] . value		8510798	0		=			
ANR	8510954	Identifier	rhi		8510798	0					
ANR	8510955	MemberAccess	options [ opt ] . values [ j - 1U ] . value		8510798	1					
ANR	8510956	ArrayIndexing	options [ opt ] . values [ j - 1U ]		8510798	0					
ANR	8510957	MemberAccess	options [ opt ] . values		8510798	0					
ANR	8510958	ArrayIndexing	options [ opt ]		8510798	0					
ANR	8510959	Identifier	options		8510798	0					
ANR	8510960	Identifier	opt		8510798	1					
ANR	8510961	Identifier	values		8510798	1					
ANR	8510962	AdditiveExpression	j - 1U		8510798	1		-			
ANR	8510963	Identifier	j		8510798	0					
ANR	8510964	PrimaryExpression	1U		8510798	1					
ANR	8510965	Identifier	value		8510798	1					
ANR	8510966	IfStatement	if ( irange > 0 )		8510798	3					
ANR	8510967	Condition	irange > 0	1354:7:43211:43220	8510798	0	True				
ANR	8510968	RelationalExpression	irange > 0		8510798	0		>			
ANR	8510969	Identifier	irange		8510798	0					
ANR	8510970	PrimaryExpression	0		8510798	1					
ANR	8510971	CompoundStatement		23:6:675:703	8510798	1					
ANR	8510972	IdentifierDeclStatement	char * ep = NULL ;	1356:6:43234:43249	8510798	0	True				
ANR	8510973	IdentifierDecl	* ep = NULL		8510798	0					
ANR	8510974	IdentifierDeclType	char *		8510798	0					
ANR	8510975	Identifier	ep		8510798	1					
ANR	8510976	AssignmentExpression	* ep = NULL		8510798	2		=			
ANR	8510977	Identifier	NULL		8510798	0					
ANR	8510978	Identifier	NULL		8510798	1					
ANR	8510979	IdentifierDeclStatement	"long l = strtol ( str , & ep , 0 ) ;"	1357:6:43257:43285	8510798	1	True				
ANR	8510980	IdentifierDecl	"l = strtol ( str , & ep , 0 )"		8510798	0					
ANR	8510981	IdentifierDeclType	long		8510798	0					
ANR	8510982	Identifier	l		8510798	1					
ANR	8510983	AssignmentExpression	"l = strtol ( str , & ep , 0 )"		8510798	2		=			
ANR	8510984	Identifier	l		8510798	0					
ANR	8510985	CallExpression	"strtol ( str , & ep , 0 )"		8510798	1					
ANR	8510986	Callee	strtol		8510798	0					
ANR	8510987	Identifier	strtol		8510798	0					
ANR	8510988	ArgumentList	str		8510798	1					
ANR	8510989	Argument	str		8510798	0					
ANR	8510990	Identifier	str		8510798	0					
ANR	8510991	Argument	& ep		8510798	1					
ANR	8510992	UnaryOperationExpression	& ep		8510798	0					
ANR	8510993	UnaryOperator	&		8510798	0					
ANR	8510994	Identifier	ep		8510798	1					
ANR	8510995	Argument	0		8510798	2					
ANR	8510996	PrimaryExpression	0		8510798	0					
ANR	8510997	IfStatement	if ( ep == str + len && l >= rlo && l <= rhi )		8510798	2					
ANR	8510998	Condition	ep == str + len && l >= rlo && l <= rhi	1359:10:43298:43334	8510798	0	True				
ANR	8510999	AndExpression	ep == str + len && l >= rlo && l <= rhi		8510798	0		&&			
ANR	8511000	EqualityExpression	ep == str + len		8510798	0		==			
ANR	8511001	Identifier	ep		8510798	0					
ANR	8511002	AdditiveExpression	str + len		8510798	1		+			
ANR	8511003	Identifier	str		8510798	0					
ANR	8511004	Identifier	len		8510798	1					
ANR	8511005	AndExpression	l >= rlo && l <= rhi		8510798	1		&&			
ANR	8511006	RelationalExpression	l >= rlo		8510798	0		>=			
ANR	8511007	Identifier	l		8510798	0					
ANR	8511008	Identifier	rlo		8510798	1					
ANR	8511009	RelationalExpression	l <= rhi		8510798	1		<=			
ANR	8511010	Identifier	l		8510798	0					
ANR	8511011	Identifier	rhi		8510798	1					
ANR	8511012	CompoundStatement		26:6:761:761	8510798	1					
ANR	8511013	ExpressionStatement	dp -> entry [ opt ] = irange	1361:9:43354:43377	8510798	0	True				
ANR	8511014	AssignmentExpression	dp -> entry [ opt ] = irange		8510798	0		=			
ANR	8511015	ArrayIndexing	dp -> entry [ opt ]		8510798	0					
ANR	8511016	PtrMemberAccess	dp -> entry		8510798	0					
ANR	8511017	Identifier	dp		8510798	0					
ANR	8511018	Identifier	entry		8510798	1					
ANR	8511019	Identifier	opt		8510798	1					
ANR	8511020	Identifier	irange		8510798	1					
ANR	8511021	ReturnStatement	return ( int ) l ;	1362:9:43403:43424	8510798	1	True				
ANR	8511022	CastExpression	( int ) l		8510798	0					
ANR	8511023	CastTarget	int		8510798	0					
ANR	8511024	Identifier	l		8510798	1					
ANR	8511025	ExpressionStatement	"display_log ( dp , dp -> errset ? INTERNAL_ERROR : USER_ERROR , ""%s: unknown value setting '%.*s'"" , options [ opt ] . name , ( int ) len , str )"	1366:3:43443:43596	8510798	4	True				
ANR	8511026	CallExpression	"display_log ( dp , dp -> errset ? INTERNAL_ERROR : USER_ERROR , ""%s: unknown value setting '%.*s'"" , options [ opt ] . name , ( int ) len , str )"		8510798	0					
ANR	8511027	Callee	display_log		8510798	0					
ANR	8511028	Identifier	display_log		8510798	0					
ANR	8511029	ArgumentList	dp		8510798	1					
ANR	8511030	Argument	dp		8510798	0					
ANR	8511031	Identifier	dp		8510798	0					
ANR	8511032	Argument	dp -> errset ? INTERNAL_ERROR : USER_ERROR		8510798	1					
ANR	8511033	ConditionalExpression	dp -> errset ? INTERNAL_ERROR : USER_ERROR		8510798	0					
ANR	8511034	Condition	dp -> errset		8510798	0					
ANR	8511035	PtrMemberAccess	dp -> errset		8510798	0					
ANR	8511036	Identifier	dp		8510798	0					
ANR	8511037	Identifier	errset		8510798	1					
ANR	8511038	Identifier	INTERNAL_ERROR		8510798	1					
ANR	8511039	Identifier	USER_ERROR		8510798	2					
ANR	8511040	Argument	"""%s: unknown value setting '%.*s'"""		8510798	2					
ANR	8511041	PrimaryExpression	"""%s: unknown value setting '%.*s'"""		8510798	0					
ANR	8511042	Argument	options [ opt ] . name		8510798	3					
ANR	8511043	MemberAccess	options [ opt ] . name		8510798	0					
ANR	8511044	ArrayIndexing	options [ opt ]		8510798	0					
ANR	8511045	Identifier	options		8510798	0					
ANR	8511046	Identifier	opt		8510798	1					
ANR	8511047	Identifier	name		8510798	1					
ANR	8511048	Argument	( int ) len		8510798	4					
ANR	8511049	CastExpression	( int ) len		8510798	0					
ANR	8511050	CastTarget	int		8510798	0					
ANR	8511051	Identifier	len		8510798	1					
ANR	8511052	Argument	str		8510798	5					
ANR	8511053	Identifier	str		8510798	0					
ANR	8511054	ExpressionStatement	abort ( )	1369:3:43601:43608	8510798	5	True				
ANR	8511055	CallExpression	abort ( )		8510798	0					
ANR	8511056	Callee	abort		8510798	0					
ANR	8511057	Identifier	abort		8510798	0					
ANR	8511058	ArgumentList			8510798	1					
ANR	8511059	ReturnType	static int		8510798	1					
ANR	8511060	Identifier	find_val		8510798	2					
ANR	8511061	ParameterList	"struct display * dp , png_byte opt , const char * str , size_t len"		8510798	3					
ANR	8511062	Parameter	struct display * dp	1330:9:42341:42358	8510798	0	True				
ANR	8511063	ParameterType	struct display *		8510798	0					
ANR	8511064	Identifier	dp		8510798	1					
ANR	8511065	Parameter	png_byte opt	1330:29:42361:42372	8510798	1	True				
ANR	8511066	ParameterType	png_byte		8510798	0					
ANR	8511067	Identifier	opt		8510798	1					
ANR	8511068	Parameter	const char * str	1330:43:42375:42389	8510798	2	True				
ANR	8511069	ParameterType	const char *		8510798	0					
ANR	8511070	Identifier	str		8510798	1					
ANR	8511071	Parameter	size_t len	1330:60:42392:42401	8510798	3	True				
ANR	8511072	ParameterType	size_t		8510798	0					
ANR	8511073	Identifier	len		8510798	1					
ANR	8511074	CFGEntryNode	ENTRY		8510798		True				
ANR	8511075	CFGExitNode	EXIT		8510798		True				
ANR	8511076	Symbol	options [ opt ] . values [ j - 1U ] . value		8510798						
ANR	8511077	Symbol	* * opt		8510798						
ANR	8511078	Symbol	dp		8510798						
ANR	8511079	Symbol	INT_MIN		8510798						
ANR	8511080	Symbol	* options		8510798						
ANR	8511081	Symbol	* dp -> entry		8510798						
ANR	8511082	Symbol	strncmp		8510798						
ANR	8511083	Symbol	* dp		8510798						
ANR	8511084	Symbol	range_hi		8510798						
ANR	8511085	Symbol	len		8510798						
ANR	8511086	Symbol	* options [ opt ] . values [ j - 1U ] . name		8510798						
ANR	8511087	Symbol	irange		8510798						
ANR	8511088	Symbol	strtol		8510798						
ANR	8511089	Symbol	dp -> errset		8510798						
ANR	8511090	Symbol	range_lo		8510798						
ANR	8511091	Symbol	INT_MAX		8510798						
ANR	8511092	Symbol	options		8510798						
ANR	8511093	Symbol	* opt		8510798						
ANR	8511094	Symbol	* * j		8510798						
ANR	8511095	Symbol	NULL		8510798						
ANR	8511096	Symbol	* options [ opt ] . values		8510798						
ANR	8511097	Symbol	* * options [ opt ] . values		8510798						
ANR	8511098	Symbol	USER_ERROR		8510798						
ANR	8511099	Symbol	options [ opt ] . name		8510798						
ANR	8511100	Symbol	INTERNAL_ERROR		8510798						
ANR	8511101	Symbol	j		8510798						
ANR	8511102	Symbol	* * options		8510798						
ANR	8511103	Symbol	ep		8510798						
ANR	8511104	Symbol	l		8510798						
ANR	8511105	Symbol	dp -> entry		8510798						
ANR	8511106	Symbol	str		8510798						
ANR	8511107	Symbol	* * * opt		8510798						
ANR	8511108	Symbol	* * * options		8510798						
ANR	8511109	Symbol	opt		8510798						
ANR	8511110	Symbol	rhi		8510798						
ANR	8511111	Symbol	rlo		8510798						
ANR	8511112	Symbol	* j		8510798						
ANR	8511113	Symbol	& ep		8510798						
ANR	8511114	Symbol	options [ opt ] . value_count		8510798						
ANR	8511115	Symbol	* * dp		8510798						
ANR	8511116	Symbol	options [ opt ] . values [ j - 1U ] . name		8510798						
ANR	8511117	Symbol	options [ opt ] . values		8510798						
ANR	8511118	Symbol	* len		8510798						
ANR	8511119	Function	opt_check	1372:0:43631:47043							
ANR	8511120	FunctionDef	"opt_check (struct display * dp , const char * arg)"		8511119	0					
ANR	8511121	CompoundStatement		1374:0:43689:47043	8511119	0					
ANR	8511122	ExpressionStatement	assert ( dp -> errset == 0 )	1375:3:43694:43717	8511119	0	True				
ANR	8511123	CallExpression	assert ( dp -> errset == 0 )		8511119	0					
ANR	8511124	Callee	assert		8511119	0					
ANR	8511125	Identifier	assert		8511119	0					
ANR	8511126	ArgumentList	dp -> errset == 0		8511119	1					
ANR	8511127	Argument	dp -> errset == 0		8511119	0					
ANR	8511128	EqualityExpression	dp -> errset == 0		8511119	0		==			
ANR	8511129	PtrMemberAccess	dp -> errset		8511119	0					
ANR	8511130	Identifier	dp		8511119	0					
ANR	8511131	Identifier	errset		8511119	1					
ANR	8511132	PrimaryExpression	0		8511119	1					
ANR	8511133	IfStatement	if ( arg != NULL && arg [ 0 ] == '-' && arg [ 1 ] == '-' )		8511119	1					
ANR	8511134	Condition	arg != NULL && arg [ 0 ] == '-' && arg [ 1 ] == '-'	1377:7:43727:43771	8511119	0	True				
ANR	8511135	AndExpression	arg != NULL && arg [ 0 ] == '-' && arg [ 1 ] == '-'		8511119	0		&&			
ANR	8511136	EqualityExpression	arg != NULL		8511119	0		!=			
ANR	8511137	Identifier	arg		8511119	0					
ANR	8511138	Identifier	NULL		8511119	1					
ANR	8511139	AndExpression	arg [ 0 ] == '-' && arg [ 1 ] == '-'		8511119	1		&&			
ANR	8511140	EqualityExpression	arg [ 0 ] == '-'		8511119	0		==			
ANR	8511141	ArrayIndexing	arg [ 0 ]		8511119	0					
ANR	8511142	Identifier	arg		8511119	0					
ANR	8511143	PrimaryExpression	0		8511119	1					
ANR	8511144	PrimaryExpression	'-'		8511119	1					
ANR	8511145	EqualityExpression	arg [ 1 ] == '-'		8511119	1		==			
ANR	8511146	ArrayIndexing	arg [ 1 ]		8511119	0					
ANR	8511147	Identifier	arg		8511119	0					
ANR	8511148	PrimaryExpression	1		8511119	1					
ANR	8511149	PrimaryExpression	'-'		8511119	1					
ANR	8511150	CompoundStatement		7:6:159:169	8511119	1					
ANR	8511151	IdentifierDeclStatement	"int i = 0 , negate = ( strncmp ( arg + 2 , ""no-"" , 3 ) == 0 ) , val ;"	1379:6:43785:43841	8511119	0	True				
ANR	8511152	IdentifierDecl	i = 0		8511119	0					
ANR	8511153	IdentifierDeclType	int		8511119	0					
ANR	8511154	Identifier	i		8511119	1					
ANR	8511155	AssignmentExpression	i = 0		8511119	2		=			
ANR	8511156	Identifier	i		8511119	0					
ANR	8511157	PrimaryExpression	0		8511119	1					
ANR	8511158	IdentifierDecl	"negate = ( strncmp ( arg + 2 , ""no-"" , 3 ) == 0 )"		8511119	1					
ANR	8511159	IdentifierDeclType	int		8511119	0					
ANR	8511160	Identifier	negate		8511119	1					
ANR	8511161	AssignmentExpression	"negate = ( strncmp ( arg + 2 , ""no-"" , 3 ) == 0 )"		8511119	2		=			
ANR	8511162	Identifier	negate		8511119	0					
ANR	8511163	EqualityExpression	"strncmp ( arg + 2 , ""no-"" , 3 ) == 0"		8511119	1		==			
ANR	8511164	CallExpression	"strncmp ( arg + 2 , ""no-"" , 3 )"		8511119	0					
ANR	8511165	Callee	strncmp		8511119	0					
ANR	8511166	Identifier	strncmp		8511119	0					
ANR	8511167	ArgumentList	arg + 2		8511119	1					
ANR	8511168	Argument	arg + 2		8511119	0					
ANR	8511169	AdditiveExpression	arg + 2		8511119	0		+			
ANR	8511170	Identifier	arg		8511119	0					
ANR	8511171	PrimaryExpression	2		8511119	1					
ANR	8511172	Argument	"""no-"""		8511119	1					
ANR	8511173	PrimaryExpression	"""no-"""		8511119	0					
ANR	8511174	Argument	3		8511119	2					
ANR	8511175	PrimaryExpression	3		8511119	0					
ANR	8511176	PrimaryExpression	0		8511119	1					
ANR	8511177	IdentifierDecl	val		8511119	2					
ANR	8511178	IdentifierDeclType	int		8511119	0					
ANR	8511179	Identifier	val		8511119	1					
ANR	8511180	IdentifierDeclStatement	png_byte j ;	1380:6:43849:43859	8511119	1	True				
ANR	8511181	IdentifierDecl	j		8511119	0					
ANR	8511182	IdentifierDeclType	png_byte		8511119	0					
ANR	8511183	Identifier	j		8511119	1					
ANR	8511184	IfStatement	if ( negate )		8511119	2					
ANR	8511185	Condition	negate	1382:10:43872:43877	8511119	0	True				
ANR	8511186	Identifier	negate		8511119	0					
ANR	8511187	ExpressionStatement	arg += 5	1383:9:43889:43897	8511119	1	True				
ANR	8511188	AssignmentExpression	arg += 5		8511119	0		+=			
ANR	8511189	Identifier	arg		8511119	0					
ANR	8511190	PrimaryExpression	5		8511119	1					
ANR	8511191	ElseStatement	else		8511119	0					
ANR	8511192	ExpressionStatement	arg += 2	1386:9:43932:43940	8511119	0	True				
ANR	8511193	AssignmentExpression	arg += 2		8511119	0		+=			
ANR	8511194	Identifier	arg		8511119	0					
ANR	8511195	PrimaryExpression	2		8511119	1					
ANR	8511196	WhileStatement	while ( arg [ i ] != 0 && arg [ i ] != '=' )		8511119	3					
ANR	8511197	Condition	arg [ i ] != 0 && arg [ i ] != '='	1389:13:44016:44043	8511119	0	True				
ANR	8511198	AndExpression	arg [ i ] != 0 && arg [ i ] != '='		8511119	0		&&			
ANR	8511199	EqualityExpression	arg [ i ] != 0		8511119	0		!=			
ANR	8511200	ArrayIndexing	arg [ i ]		8511119	0					
ANR	8511201	Identifier	arg		8511119	0					
ANR	8511202	Identifier	i		8511119	1					
ANR	8511203	PrimaryExpression	0		8511119	1					
ANR	8511204	EqualityExpression	arg [ i ] != '='		8511119	1		!=			
ANR	8511205	ArrayIndexing	arg [ i ]		8511119	0					
ANR	8511206	Identifier	arg		8511119	0					
ANR	8511207	Identifier	i		8511119	1					
ANR	8511208	PrimaryExpression	'='		8511119	1					
ANR	8511209	ExpressionStatement	++ i	1389:43:44046:44049	8511119	1	True				
ANR	8511210	UnaryExpression	++ i		8511119	0					
ANR	8511211	IncDec	++		8511119	0					
ANR	8511212	Identifier	i		8511119	1					
ANR	8511213	ExpressionStatement	"j = option_index ( dp , arg , i )"	1394:6:44179:44207	8511119	4	True				
ANR	8511214	AssignmentExpression	"j = option_index ( dp , arg , i )"		8511119	0		=			
ANR	8511215	Identifier	j		8511119	0					
ANR	8511216	CallExpression	"option_index ( dp , arg , i )"		8511119	1					
ANR	8511217	Callee	option_index		8511119	0					
ANR	8511218	Identifier	option_index		8511119	0					
ANR	8511219	ArgumentList	dp		8511119	1					
ANR	8511220	Argument	dp		8511119	0					
ANR	8511221	Identifier	dp		8511119	0					
ANR	8511222	Argument	arg		8511119	1					
ANR	8511223	Identifier	arg		8511119	0					
ANR	8511224	Argument	i		8511119	2					
ANR	8511225	Identifier	i		8511119	0					
ANR	8511226	IfStatement	if ( arg [ i ] == 0 )		8511119	5					
ANR	8511227	Condition	arg [ i ] == 0	1397:10:44276:44286	8511119	0	True				
ANR	8511228	EqualityExpression	arg [ i ] == 0		8511119	0		==			
ANR	8511229	ArrayIndexing	arg [ i ]		8511119	0					
ANR	8511230	Identifier	arg		8511119	0					
ANR	8511231	Identifier	i		8511119	1					
ANR	8511232	PrimaryExpression	0		8511119	1					
ANR	8511233	CompoundStatement		25:6:647:647	8511119	1					
ANR	8511234	ExpressionStatement	val = options [ j ] . values [ negate ] . value	1399:9:44348:44385	8511119	0	True				
ANR	8511235	AssignmentExpression	val = options [ j ] . values [ negate ] . value		8511119	0		=			
ANR	8511236	Identifier	val		8511119	0					
ANR	8511237	MemberAccess	options [ j ] . values [ negate ] . value		8511119	1					
ANR	8511238	ArrayIndexing	options [ j ] . values [ negate ]		8511119	0					
ANR	8511239	MemberAccess	options [ j ] . values		8511119	0					
ANR	8511240	ArrayIndexing	options [ j ]		8511119	0					
ANR	8511241	Identifier	options		8511119	0					
ANR	8511242	Identifier	j		8511119	1					
ANR	8511243	Identifier	values		8511119	1					
ANR	8511244	Identifier	negate		8511119	1					
ANR	8511245	Identifier	value		8511119	1					
ANR	8511246	ExpressionStatement	dp -> entry [ j ] = ( png_byte ) ( negate + 1U )	1400:9:44396:44442	8511119	1	True				
ANR	8511247	AssignmentExpression	dp -> entry [ j ] = ( png_byte ) ( negate + 1U )		8511119	0		=			
ANR	8511248	ArrayIndexing	dp -> entry [ j ]		8511119	0					
ANR	8511249	PtrMemberAccess	dp -> entry		8511119	0					
ANR	8511250	Identifier	dp		8511119	0					
ANR	8511251	Identifier	entry		8511119	1					
ANR	8511252	Identifier	j		8511119	1					
ANR	8511253	CastExpression	( png_byte ) ( negate + 1U )		8511119	1					
ANR	8511254	CastTarget	png_byte		8511119	0					
ANR	8511255	AdditiveExpression	negate + 1U		8511119	1		+			
ANR	8511256	Identifier	negate		8511119	0					
ANR	8511257	PrimaryExpression	1U		8511119	1					
ANR	8511258	ElseStatement	else		8511119	0					
ANR	8511259	CompoundStatement		32:9:791:821	8511119	0					
ANR	8511260	IdentifierDeclStatement	const char * list = arg + ( i + 1 ) ;	1405:9:44481:44511	8511119	0	True				
ANR	8511261	IdentifierDecl	* list = arg + ( i + 1 )		8511119	0					
ANR	8511262	IdentifierDeclType	const char *		8511119	0					
ANR	8511263	Identifier	list		8511119	1					
ANR	8511264	AssignmentExpression	* list = arg + ( i + 1 )		8511119	2		=			
ANR	8511265	Identifier	list		8511119	0					
ANR	8511266	AdditiveExpression	arg + ( i + 1 )		8511119	1		+			
ANR	8511267	Identifier	arg		8511119	0					
ANR	8511268	AdditiveExpression	i + 1		8511119	1		+			
ANR	8511269	Identifier	i		8511119	0					
ANR	8511270	PrimaryExpression	1		8511119	1					
ANR	8511271	IfStatement	if ( options [ j ] . opt != LIST )		8511119	1					
ANR	8511272	Condition	options [ j ] . opt != LIST	1410:13:44658:44679	8511119	0	True				
ANR	8511273	EqualityExpression	options [ j ] . opt != LIST		8511119	0		!=			
ANR	8511274	MemberAccess	options [ j ] . opt		8511119	0					
ANR	8511275	ArrayIndexing	options [ j ]		8511119	0					
ANR	8511276	Identifier	options		8511119	0					
ANR	8511277	Identifier	j		8511119	1					
ANR	8511278	Identifier	opt		8511119	1					
ANR	8511279	Identifier	LIST		8511119	1					
ANR	8511280	CompoundStatement		38:9:1001:1001	8511119	1					
ANR	8511281	ExpressionStatement	"val = find_val ( dp , j , list , strlen ( list ) )"	1413:12:44773:44814	8511119	0	True				
ANR	8511282	AssignmentExpression	"val = find_val ( dp , j , list , strlen ( list ) )"		8511119	0		=			
ANR	8511283	Identifier	val		8511119	0					
ANR	8511284	CallExpression	"find_val ( dp , j , list , strlen ( list ) )"		8511119	1					
ANR	8511285	Callee	find_val		8511119	0					
ANR	8511286	Identifier	find_val		8511119	0					
ANR	8511287	ArgumentList	dp		8511119	1					
ANR	8511288	Argument	dp		8511119	0					
ANR	8511289	Identifier	dp		8511119	0					
ANR	8511290	Argument	j		8511119	1					
ANR	8511291	Identifier	j		8511119	0					
ANR	8511292	Argument	list		8511119	2					
ANR	8511293	Identifier	list		8511119	0					
ANR	8511294	Argument	strlen ( list )		8511119	3					
ANR	8511295	CallExpression	strlen ( list )		8511119	0					
ANR	8511296	Callee	strlen		8511119	0					
ANR	8511297	Identifier	strlen		8511119	0					
ANR	8511298	ArgumentList	list		8511119	1					
ANR	8511299	Argument	list		8511119	0					
ANR	8511300	Identifier	list		8511119	0					
ANR	8511301	IfStatement	if ( negate )		8511119	1					
ANR	8511302	Condition	negate	1415:16:44833:44838	8511119	0	True				
ANR	8511303	Identifier	negate		8511119	0					
ANR	8511304	CompoundStatement		43:12:1163:1163	8511119	1					
ANR	8511305	IfStatement	if ( options [ j ] . opt < OPTION )		8511119	0					
ANR	8511306	Condition	options [ j ] . opt < OPTION	1417:19:44874:44896	8511119	0	True				
ANR	8511307	RelationalExpression	options [ j ] . opt < OPTION		8511119	0		<			
ANR	8511308	MemberAccess	options [ j ] . opt		8511119	0					
ANR	8511309	ArrayIndexing	options [ j ]		8511119	0					
ANR	8511310	Identifier	options		8511119	0					
ANR	8511311	Identifier	j		8511119	1					
ANR	8511312	Identifier	opt		8511119	1					
ANR	8511313	Identifier	OPTION		8511119	1					
ANR	8511314	ExpressionStatement	val = ! val	1418:18:44917:44927	8511119	1	True				
ANR	8511315	AssignmentExpression	val = ! val		8511119	0		=			
ANR	8511316	Identifier	val		8511119	0					
ANR	8511317	UnaryOperationExpression	! val		8511119	1					
ANR	8511318	UnaryOperator	!		8511119	0					
ANR	8511319	Identifier	val		8511119	1					
ANR	8511320	ElseStatement	else		8511119	0					
ANR	8511321	CompoundStatement		48:15:1275:1275	8511119	0					
ANR	8511322	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%.*s: option=arg cannot be negated"" , i , arg )"	1422:18:44985:45082	8511119	0	True				
ANR	8511323	CallExpression	"display_log ( dp , USER_ERROR , ""%.*s: option=arg cannot be negated"" , i , arg )"		8511119	0					
ANR	8511324	Callee	display_log		8511119	0					
ANR	8511325	Identifier	display_log		8511119	0					
ANR	8511326	ArgumentList	dp		8511119	1					
ANR	8511327	Argument	dp		8511119	0					
ANR	8511328	Identifier	dp		8511119	0					
ANR	8511329	Argument	USER_ERROR		8511119	1					
ANR	8511330	Identifier	USER_ERROR		8511119	0					
ANR	8511331	Argument	"""%.*s: option=arg cannot be negated"""		8511119	2					
ANR	8511332	PrimaryExpression	"""%.*s: option=arg cannot be negated"""		8511119	0					
ANR	8511333	Argument	i		8511119	3					
ANR	8511334	Identifier	i		8511119	0					
ANR	8511335	Argument	arg		8511119	4					
ANR	8511336	Identifier	arg		8511119	0					
ANR	8511337	ExpressionStatement	abort ( )	1424:18:45102:45109	8511119	1	True				
ANR	8511338	CallExpression	abort ( )		8511119	0					
ANR	8511339	Callee	abort		8511119	0					
ANR	8511340	Identifier	abort		8511119	0					
ANR	8511341	ArgumentList			8511119	1					
ANR	8511342	ElseStatement	else		8511119	0					
ANR	8511343	CompoundStatement		57:9:1556:1556	8511119	0					
ANR	8511344	IfStatement	if ( negate )		8511119	0					
ANR	8511345	Condition	negate	1436:16:45553:45558	8511119	0	True				
ANR	8511346	Identifier	negate		8511119	0					
ANR	8511347	ExpressionStatement	val = options [ j ] . values [ 0 ] . value	1437:15:45576:45608	8511119	1	True				
ANR	8511348	AssignmentExpression	val = options [ j ] . values [ 0 ] . value		8511119	0		=			
ANR	8511349	Identifier	val		8511119	0					
ANR	8511350	MemberAccess	options [ j ] . values [ 0 ] . value		8511119	1					
ANR	8511351	ArrayIndexing	options [ j ] . values [ 0 ]		8511119	0					
ANR	8511352	MemberAccess	options [ j ] . values		8511119	0					
ANR	8511353	ArrayIndexing	options [ j ]		8511119	0					
ANR	8511354	Identifier	options		8511119	0					
ANR	8511355	Identifier	j		8511119	1					
ANR	8511356	Identifier	values		8511119	1					
ANR	8511357	PrimaryExpression	0		8511119	1					
ANR	8511358	Identifier	value		8511119	1					
ANR	8511359	ElseStatement	else		8511119	0					
ANR	8511360	ExpressionStatement	val = 0	1440:15:45643:45650	8511119	0	True				
ANR	8511361	AssignmentExpression	val = 0		8511119	0		=			
ANR	8511362	Identifier	val		8511119	0					
ANR	8511363	PrimaryExpression	0		8511119	1					
ANR	8511364	WhileStatement	while ( * list != 0 )		8511119	1					
ANR	8511365	Condition	* list != 0	1442:19:45672:45681	8511119	0	True				
ANR	8511366	EqualityExpression	* list != 0		8511119	0		!=			
ANR	8511367	UnaryOperationExpression	* list		8511119	0					
ANR	8511368	UnaryOperator	*		8511119	0					
ANR	8511369	Identifier	list		8511119	1					
ANR	8511370	PrimaryExpression	0		8511119	1					
ANR	8511371	CompoundStatement		74:15:2177:2186	8511119	1					
ANR	8511372	IdentifierDeclStatement	"int v , iv ;"	1447:15:45867:45876	8511119	0	True				
ANR	8511373	IdentifierDecl	v		8511119	0					
ANR	8511374	IdentifierDeclType	int		8511119	0					
ANR	8511375	Identifier	v		8511119	1					
ANR	8511376	IdentifierDecl	iv		8511119	1					
ANR	8511377	IdentifierDeclType	int		8511119	0					
ANR	8511378	Identifier	iv		8511119	1					
ANR	8511379	ExpressionStatement	iv = 0	1449:15:45894:45900	8511119	1	True				
ANR	8511380	AssignmentExpression	iv = 0		8511119	0		=			
ANR	8511381	Identifier	iv		8511119	0					
ANR	8511382	PrimaryExpression	0		8511119	1					
ANR	8511383	WhileStatement	"while ( list [ ++ iv ] != 0 && list [ iv ] != ',' )"		8511119	2					
ANR	8511384	Condition	"list [ ++ iv ] != 0 && list [ iv ] != ','"	1450:22:45951:45984	8511119	0	True				
ANR	8511385	AndExpression	"list [ ++ iv ] != 0 && list [ iv ] != ','"		8511119	0		&&			
ANR	8511386	EqualityExpression	list [ ++ iv ] != 0		8511119	0		!=			
ANR	8511387	ArrayIndexing	list [ ++ iv ]		8511119	0					
ANR	8511388	Identifier	list		8511119	0					
ANR	8511389	UnaryExpression	++ iv		8511119	1					
ANR	8511390	IncDec	++		8511119	0					
ANR	8511391	Identifier	iv		8511119	1					
ANR	8511392	PrimaryExpression	0		8511119	1					
ANR	8511393	EqualityExpression	"list [ iv ] != ','"		8511119	1		!=			
ANR	8511394	ArrayIndexing	list [ iv ]		8511119	0					
ANR	8511395	Identifier	list		8511119	0					
ANR	8511396	Identifier	iv		8511119	1					
ANR	8511397	PrimaryExpression	"','"		8511119	1					
ANR	8511398	CompoundStatement		77:58:2297:2297	8511119	1					
ANR	8511399	ExpressionStatement	"v = find_val ( dp , j , list , iv )"	1452:15:46006:46035	8511119	3	True				
ANR	8511400	AssignmentExpression	"v = find_val ( dp , j , list , iv )"		8511119	0		=			
ANR	8511401	Identifier	v		8511119	0					
ANR	8511402	CallExpression	"find_val ( dp , j , list , iv )"		8511119	1					
ANR	8511403	Callee	find_val		8511119	0					
ANR	8511404	Identifier	find_val		8511119	0					
ANR	8511405	ArgumentList	dp		8511119	1					
ANR	8511406	Argument	dp		8511119	0					
ANR	8511407	Identifier	dp		8511119	0					
ANR	8511408	Argument	j		8511119	1					
ANR	8511409	Identifier	j		8511119	0					
ANR	8511410	Argument	list		8511119	2					
ANR	8511411	Identifier	list		8511119	0					
ANR	8511412	Argument	iv		8511119	3					
ANR	8511413	Identifier	iv		8511119	0					
ANR	8511414	IfStatement	if ( negate )		8511119	4					
ANR	8511415	Condition	negate	1454:19:46057:46062	8511119	0	True				
ANR	8511416	Identifier	negate		8511119	0					
ANR	8511417	ExpressionStatement	val &= ~v	1455:18:46083:46092	8511119	1	True				
ANR	8511418	AssignmentExpression	val &= ~v		8511119	0		&=			
ANR	8511419	Identifier	val		8511119	0					
ANR	8511420	Identifier	~v		8511119	1					
ANR	8511421	ElseStatement	else		8511119	0					
ANR	8511422	ExpressionStatement	val |= v	1458:18:46133:46141	8511119	0	True				
ANR	8511423	AssignmentExpression	val |= v		8511119	0		|=			
ANR	8511424	Identifier	val		8511119	0					
ANR	8511425	Identifier	v		8511119	1					
ANR	8511426	ExpressionStatement	list += iv	1460:15:46159:46169	8511119	5	True				
ANR	8511427	AssignmentExpression	list += iv		8511119	0		+=			
ANR	8511428	Identifier	list		8511119	0					
ANR	8511429	Identifier	iv		8511119	1					
ANR	8511430	IfStatement	if ( * list != 0 )		8511119	6					
ANR	8511431	Condition	* list != 0	1461:19:46190:46199	8511119	0	True				
ANR	8511432	EqualityExpression	* list != 0		8511119	0		!=			
ANR	8511433	UnaryOperationExpression	* list		8511119	0					
ANR	8511434	UnaryOperator	*		8511119	0					
ANR	8511435	Identifier	list		8511119	1					
ANR	8511436	PrimaryExpression	0		8511119	1					
ANR	8511437	ExpressionStatement	++ list	1462:18:46220:46226	8511119	1	True				
ANR	8511438	UnaryExpression	++ list		8511119	0					
ANR	8511439	IncDec	++		8511119	0					
ANR	8511440	Identifier	list		8511119	1					
ANR	8511441	ExpressionStatement	dp -> value [ j ] = val	1468:6:46361:46379	8511119	6	True				
ANR	8511442	AssignmentExpression	dp -> value [ j ] = val		8511119	0		=			
ANR	8511443	ArrayIndexing	dp -> value [ j ]		8511119	0					
ANR	8511444	PtrMemberAccess	dp -> value		8511119	0					
ANR	8511445	Identifier	dp		8511119	0					
ANR	8511446	Identifier	value		8511119	1					
ANR	8511447	Identifier	j		8511119	1					
ANR	8511448	Identifier	val		8511119	1					
ANR	8511449	IfStatement	if ( options [ j ] . opt < LEVEL_MASK )		8511119	7					
ANR	8511450	Condition	options [ j ] . opt < LEVEL_MASK	1470:10:46392:46418	8511119	0	True				
ANR	8511451	RelationalExpression	options [ j ] . opt < LEVEL_MASK		8511119	0		<			
ANR	8511452	MemberAccess	options [ j ] . opt		8511119	0					
ANR	8511453	ArrayIndexing	options [ j ]		8511119	0					
ANR	8511454	Identifier	options		8511119	0					
ANR	8511455	Identifier	j		8511119	1					
ANR	8511456	Identifier	opt		8511119	1					
ANR	8511457	Identifier	LEVEL_MASK		8511119	1					
ANR	8511458	CompoundStatement		98:6:2737:2737	8511119	1					
ANR	8511459	IfStatement	if ( val )		8511119	0					
ANR	8511460	Condition	val	1473:13:46508:46510	8511119	0	True				
ANR	8511461	Identifier	val		8511119	0					
ANR	8511462	ExpressionStatement	dp -> options = ( dp -> options & ~LEVEL_MASK ) | options [ j ] . opt	1474:12:46546:46604	8511119	1	True				
ANR	8511463	AssignmentExpression	dp -> options = ( dp -> options & ~LEVEL_MASK ) | options [ j ] . opt		8511119	0		=			
ANR	8511464	PtrMemberAccess	dp -> options		8511119	0					
ANR	8511465	Identifier	dp		8511119	0					
ANR	8511466	Identifier	options		8511119	1					
ANR	8511467	InclusiveOrExpression	( dp -> options & ~LEVEL_MASK ) | options [ j ] . opt		8511119	1		|			
ANR	8511468	BitAndExpression	dp -> options & ~LEVEL_MASK		8511119	0		&			
ANR	8511469	PtrMemberAccess	dp -> options		8511119	0					
ANR	8511470	Identifier	dp		8511119	0					
ANR	8511471	Identifier	options		8511119	1					
ANR	8511472	Identifier	~LEVEL_MASK		8511119	1					
ANR	8511473	MemberAccess	options [ j ] . opt		8511119	1					
ANR	8511474	ArrayIndexing	options [ j ]		8511119	0					
ANR	8511475	Identifier	options		8511119	0					
ANR	8511476	Identifier	j		8511119	1					
ANR	8511477	Identifier	opt		8511119	1					
ANR	8511478	ElseStatement	else		8511119	0					
ANR	8511479	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%.*s: messages cannot be turned off individually; set a message level"" , i , arg )"	1477:12:46633:46765	8511119	0	True				
ANR	8511480	CallExpression	"display_log ( dp , USER_ERROR , ""%.*s: messages cannot be turned off individually; set a message level"" , i , arg )"		8511119	0					
ANR	8511481	Callee	display_log		8511119	0					
ANR	8511482	Identifier	display_log		8511119	0					
ANR	8511483	ArgumentList	dp		8511119	1					
ANR	8511484	Argument	dp		8511119	0					
ANR	8511485	Identifier	dp		8511119	0					
ANR	8511486	Argument	USER_ERROR		8511119	1					
ANR	8511487	Identifier	USER_ERROR		8511119	0					
ANR	8511488	Argument	"""%.*s: messages cannot be turned off individually; set a message level"""		8511119	2					
ANR	8511489	PrimaryExpression	"""%.*s: messages cannot be turned off individually; set a message level"""		8511119	0					
ANR	8511490	Argument	i		8511119	3					
ANR	8511491	Identifier	i		8511119	0					
ANR	8511492	Argument	arg		8511119	4					
ANR	8511493	Identifier	arg		8511119	0					
ANR	8511494	ElseStatement	else		8511119	0					
ANR	8511495	IfStatement	if ( options [ j ] . opt < OPTION )		8511119	0					
ANR	8511496	Condition	options [ j ] . opt < OPTION	1482:15:46791:46813	8511119	0	True				
ANR	8511497	RelationalExpression	options [ j ] . opt < OPTION		8511119	0		<			
ANR	8511498	MemberAccess	options [ j ] . opt		8511119	0					
ANR	8511499	ArrayIndexing	options [ j ]		8511119	0					
ANR	8511500	Identifier	options		8511119	0					
ANR	8511501	Identifier	j		8511119	1					
ANR	8511502	Identifier	opt		8511119	1					
ANR	8511503	Identifier	OPTION		8511119	1					
ANR	8511504	CompoundStatement		110:6:3132:3132	8511119	1					
ANR	8511505	IfStatement	if ( val )		8511119	0					
ANR	8511506	Condition	val	1484:13:46837:46839	8511119	0	True				
ANR	8511507	Identifier	val		8511119	0					
ANR	8511508	ExpressionStatement	dp -> options |= options [ j ] . opt	1485:12:46854:46883	8511119	1	True				
ANR	8511509	AssignmentExpression	dp -> options |= options [ j ] . opt		8511119	0		|=			
ANR	8511510	PtrMemberAccess	dp -> options		8511119	0					
ANR	8511511	Identifier	dp		8511119	0					
ANR	8511512	Identifier	options		8511119	1					
ANR	8511513	MemberAccess	options [ j ] . opt		8511119	1					
ANR	8511514	ArrayIndexing	options [ j ]		8511119	0					
ANR	8511515	Identifier	options		8511119	0					
ANR	8511516	Identifier	j		8511119	1					
ANR	8511517	Identifier	opt		8511119	1					
ANR	8511518	ElseStatement	else		8511119	0					
ANR	8511519	ExpressionStatement	dp -> options &= ~options [ j ] . opt	1488:12:46912:46942	8511119	0	True				
ANR	8511520	AssignmentExpression	dp -> options &= ~options [ j ] . opt		8511119	0		&=			
ANR	8511521	PtrMemberAccess	dp -> options		8511119	0					
ANR	8511522	Identifier	dp		8511119	0					
ANR	8511523	Identifier	options		8511119	1					
ANR	8511524	MemberAccess	~options [ j ] . opt		8511119	1					
ANR	8511525	ArrayIndexing	~options [ j ]		8511119	0					
ANR	8511526	Identifier	~options		8511119	0					
ANR	8511527	Identifier	j		8511119	1					
ANR	8511528	Identifier	opt		8511119	1					
ANR	8511529	ReturnStatement	return 1 ;	1491:6:46959:46967	8511119	8	True				
ANR	8511530	PrimaryExpression	1		8511119	0					
ANR	8511531	ElseStatement	else		8511119	0					
ANR	8511532	ReturnStatement	return 0 ;	1495:6:47013:47021	8511119	0	True				
ANR	8511533	PrimaryExpression	0		8511119	0					
ANR	8511534	ReturnType	static int		8511119	1					
ANR	8511535	Identifier	opt_check		8511119	2					
ANR	8511536	ParameterList	"struct display * dp , const char * arg"		8511119	3					
ANR	8511537	Parameter	struct display * dp	1373:10:43652:43669	8511119	0	True				
ANR	8511538	ParameterType	struct display *		8511119	0					
ANR	8511539	Identifier	dp		8511119	1					
ANR	8511540	Parameter	const char * arg	1373:30:43672:43686	8511119	1	True				
ANR	8511541	ParameterType	const char *		8511119	0					
ANR	8511542	Identifier	arg		8511119	1					
ANR	8511543	CFGEntryNode	ENTRY		8511119		True				
ANR	8511544	CFGExitNode	EXIT		8511119		True				
ANR	8511545	Symbol	* options [ j ] . values		8511119						
ANR	8511546	Symbol	dp		8511119						
ANR	8511547	Symbol	options [ j ] . opt		8511119						
ANR	8511548	Symbol	* options		8511119						
ANR	8511549	Symbol	* dp -> entry		8511119						
ANR	8511550	Symbol	* dp		8511119						
ANR	8511551	Symbol	strncmp		8511119						
ANR	8511552	Symbol	strlen		8511119						
ANR	8511553	Symbol	find_val		8511119						
ANR	8511554	Symbol	options [ j ] . values [ 0 ] . value		8511119						
ANR	8511555	Symbol	* negate		8511119						
ANR	8511556	Symbol	dp -> errset		8511119						
ANR	8511557	Symbol	arg		8511119						
ANR	8511558	Symbol	options		8511119						
ANR	8511559	Symbol	options [ j ] . values		8511119						
ANR	8511560	Symbol	option_index		8511119						
ANR	8511561	Symbol	val		8511119						
ANR	8511562	Symbol	* * j		8511119						
ANR	8511563	Symbol	NULL		8511119						
ANR	8511564	Symbol	* ~options		8511119						
ANR	8511565	Symbol	USER_ERROR		8511119						
ANR	8511566	Symbol	LEVEL_MASK		8511119						
ANR	8511567	Symbol	dp -> options		8511119						
ANR	8511568	Symbol	OPTION		8511119						
ANR	8511569	Symbol	i		8511119						
ANR	8511570	Symbol	j		8511119						
ANR	8511571	Symbol	* * options		8511119						
ANR	8511572	Symbol	list		8511119						
ANR	8511573	Symbol	dp -> entry		8511119						
ANR	8511574	Symbol	iv		8511119						
ANR	8511575	Symbol	* iv		8511119						
ANR	8511576	Symbol	dp -> value		8511119						
ANR	8511577	Symbol	* i		8511119						
ANR	8511578	Symbol	options [ j ] . values [ negate ] . value		8511119						
ANR	8511579	Symbol	* j		8511119						
ANR	8511580	Symbol	~LEVEL_MASK		8511119						
ANR	8511581	Symbol	* list		8511119						
ANR	8511582	Symbol	negate		8511119						
ANR	8511583	Symbol	v		8511119						
ANR	8511584	Symbol	* dp -> value		8511119						
ANR	8511585	Symbol	~options [ j ] . opt		8511119						
ANR	8511586	Symbol	~v		8511119						
ANR	8511587	Symbol	* * dp		8511119						
ANR	8511588	Symbol	~options		8511119						
ANR	8511589	Symbol	LIST		8511119						
ANR	8511590	Symbol	* arg		8511119						
ANR	8511591	Function	set_timer	1499:0:47080:47450							
ANR	8511592	FunctionDef	"set_timer (struct display * dp , struct timespec * timer)"		8511591	0					
ANR	8511593	CompoundStatement		1501:0:47146:47450	8511591	0					
ANR	8511594	IfStatement	"if ( clock_gettime ( CLOCK_PROCESS_CPUTIME_ID , timer ) )"		8511591	0					
ANR	8511595	Condition	"clock_gettime ( CLOCK_PROCESS_CPUTIME_ID , timer )"	1503:7:47225:47270	8511591	0	True				
ANR	8511596	CallExpression	"clock_gettime ( CLOCK_PROCESS_CPUTIME_ID , timer )"		8511591	0					
ANR	8511597	Callee	clock_gettime		8511591	0					
ANR	8511598	Identifier	clock_gettime		8511591	0					
ANR	8511599	ArgumentList	CLOCK_PROCESS_CPUTIME_ID		8511591	1					
ANR	8511600	Argument	CLOCK_PROCESS_CPUTIME_ID		8511591	0					
ANR	8511601	Identifier	CLOCK_PROCESS_CPUTIME_ID		8511591	0					
ANR	8511602	Argument	timer		8511591	1					
ANR	8511603	Identifier	timer		8511591	0					
ANR	8511604	CompoundStatement		4:3:129:129	8511591	1					
ANR	8511605	ExpressionStatement	"display_log ( dp , APP_ERROR , ""CLOCK_PROCESS_CPUTIME_ID: %s: timing disabled\\n"" , strerror ( errno ) )"	1505:6:47284:47390	8511591	0	True				
ANR	8511606	CallExpression	"display_log ( dp , APP_ERROR , ""CLOCK_PROCESS_CPUTIME_ID: %s: timing disabled\\n"" , strerror ( errno ) )"		8511591	0					
ANR	8511607	Callee	display_log		8511591	0					
ANR	8511608	Identifier	display_log		8511591	0					
ANR	8511609	ArgumentList	dp		8511591	1					
ANR	8511610	Argument	dp		8511591	0					
ANR	8511611	Identifier	dp		8511591	0					
ANR	8511612	Argument	APP_ERROR		8511591	1					
ANR	8511613	Identifier	APP_ERROR		8511591	0					
ANR	8511614	Argument	"""CLOCK_PROCESS_CPUTIME_ID: %s: timing disabled\\n"""		8511591	2					
ANR	8511615	PrimaryExpression	"""CLOCK_PROCESS_CPUTIME_ID: %s: timing disabled\\n"""		8511591	0					
ANR	8511616	Argument	strerror ( errno )		8511591	3					
ANR	8511617	CallExpression	strerror ( errno )		8511591	0					
ANR	8511618	Callee	strerror		8511591	0					
ANR	8511619	Identifier	strerror		8511591	0					
ANR	8511620	ArgumentList	errno		8511591	1					
ANR	8511621	Argument	errno		8511591	0					
ANR	8511622	Identifier	errno		8511591	0					
ANR	8511623	ExpressionStatement	"dp -> value [ OPTIND ( dp , time ) ] = 0"	1507:6:47398:47428	8511591	1	True				
ANR	8511624	AssignmentExpression	"dp -> value [ OPTIND ( dp , time ) ] = 0"		8511591	0		=			
ANR	8511625	ArrayIndexing	"dp -> value [ OPTIND ( dp , time ) ]"		8511591	0					
ANR	8511626	PtrMemberAccess	dp -> value		8511591	0					
ANR	8511627	Identifier	dp		8511591	0					
ANR	8511628	Identifier	value		8511591	1					
ANR	8511629	CallExpression	"OPTIND ( dp , time )"		8511591	1					
ANR	8511630	Callee	OPTIND		8511591	0					
ANR	8511631	Identifier	OPTIND		8511591	0					
ANR	8511632	ArgumentList	dp		8511591	1					
ANR	8511633	Argument	dp		8511591	0					
ANR	8511634	Identifier	dp		8511591	0					
ANR	8511635	Argument	time		8511591	1					
ANR	8511636	Identifier	time		8511591	0					
ANR	8511637	PrimaryExpression	0		8511591	1					
ANR	8511638	ReturnType	static void		8511591	1					
ANR	8511639	Identifier	set_timer		8511591	2					
ANR	8511640	ParameterList	"struct display * dp , struct timespec * timer"		8511591	3					
ANR	8511641	Parameter	struct display * dp	1500:10:47102:47119	8511591	0	True				
ANR	8511642	ParameterType	struct display *		8511591	0					
ANR	8511643	Identifier	dp		8511591	1					
ANR	8511644	Parameter	struct timespec * timer	1500:30:47122:47143	8511591	1	True				
ANR	8511645	ParameterType	struct timespec *		8511591	0					
ANR	8511646	Identifier	timer		8511591	1					
ANR	8511647	CFGEntryNode	ENTRY		8511591		True				
ANR	8511648	CFGExitNode	EXIT		8511591		True				
ANR	8511649	Symbol	errno		8511591						
ANR	8511650	Symbol	dp		8511591						
ANR	8511651	Symbol	CLOCK_PROCESS_CPUTIME_ID		8511591						
ANR	8511652	Symbol	strerror		8511591						
ANR	8511653	Symbol	timer		8511591						
ANR	8511654	Symbol	OPTIND		8511591						
ANR	8511655	Symbol	* dp		8511591						
ANR	8511656	Symbol	dp -> value		8511591						
ANR	8511657	Symbol	* OPTIND		8511591						
ANR	8511658	Symbol	APP_ERROR		8511591						
ANR	8511659	Symbol	* dp -> value		8511591						
ANR	8511660	Symbol	clock_gettime		8511591						
ANR	8511661	Symbol	* * dp		8511591						
ANR	8511662	Symbol	time		8511591						
ANR	8511663	Function	start_timer	1511:0:47453:47639							
ANR	8511664	FunctionDef	"start_timer (struct display * dp , int what)"		8511663	0					
ANR	8511665	CompoundStatement		1513:0:47507:47639	8511663	0					
ANR	8511666	IfStatement	"if ( ( dp -> value [ OPTIND ( dp , time ) ] & what ) != 0 )"		8511663	0					
ANR	8511667	Condition	"( dp -> value [ OPTIND ( dp , time ) ] & what ) != 0"	1514:7:47516:47555	8511663	0	True				
ANR	8511668	EqualityExpression	"( dp -> value [ OPTIND ( dp , time ) ] & what ) != 0"		8511663	0		!=			
ANR	8511669	BitAndExpression	"dp -> value [ OPTIND ( dp , time ) ] & what"		8511663	0		&			
ANR	8511670	ArrayIndexing	"dp -> value [ OPTIND ( dp , time ) ]"		8511663	0					
ANR	8511671	PtrMemberAccess	dp -> value		8511663	0					
ANR	8511672	Identifier	dp		8511663	0					
ANR	8511673	Identifier	value		8511663	1					
ANR	8511674	CallExpression	"OPTIND ( dp , time )"		8511663	1					
ANR	8511675	Callee	OPTIND		8511663	0					
ANR	8511676	Identifier	OPTIND		8511663	0					
ANR	8511677	ArgumentList	dp		8511663	1					
ANR	8511678	Argument	dp		8511663	0					
ANR	8511679	Identifier	dp		8511663	0					
ANR	8511680	Argument	time		8511663	1					
ANR	8511681	Identifier	time		8511663	0					
ANR	8511682	Identifier	what		8511663	1					
ANR	8511683	PrimaryExpression	0		8511663	1					
ANR	8511684	ExpressionStatement	"set_timer ( dp , what == PNGCP_TIME_READ ? & dp -> read_time : & dp -> write_time )"	1515:6:47564:47637	8511663	1	True				
ANR	8511685	CallExpression	"set_timer ( dp , what == PNGCP_TIME_READ ? & dp -> read_time : & dp -> write_time )"		8511663	0					
ANR	8511686	Callee	set_timer		8511663	0					
ANR	8511687	Identifier	set_timer		8511663	0					
ANR	8511688	ArgumentList	dp		8511663	1					
ANR	8511689	Argument	dp		8511663	0					
ANR	8511690	Identifier	dp		8511663	0					
ANR	8511691	Argument	what == PNGCP_TIME_READ ? & dp -> read_time : & dp -> write_time		8511663	1					
ANR	8511692	ConditionalExpression	what == PNGCP_TIME_READ ? & dp -> read_time : & dp -> write_time		8511663	0					
ANR	8511693	Condition	what == PNGCP_TIME_READ		8511663	0					
ANR	8511694	EqualityExpression	what == PNGCP_TIME_READ		8511663	0		==			
ANR	8511695	Identifier	what		8511663	0					
ANR	8511696	Identifier	PNGCP_TIME_READ		8511663	1					
ANR	8511697	UnaryOperationExpression	& dp -> read_time		8511663	1					
ANR	8511698	UnaryOperator	&		8511663	0					
ANR	8511699	PtrMemberAccess	dp -> read_time		8511663	1					
ANR	8511700	Identifier	dp		8511663	0					
ANR	8511701	Identifier	read_time		8511663	1					
ANR	8511702	UnaryOperationExpression	& dp -> write_time		8511663	2					
ANR	8511703	UnaryOperator	&		8511663	0					
ANR	8511704	PtrMemberAccess	dp -> write_time		8511663	1					
ANR	8511705	Identifier	dp		8511663	0					
ANR	8511706	Identifier	write_time		8511663	1					
ANR	8511707	ReturnType	static void		8511663	1					
ANR	8511708	Identifier	start_timer		8511663	2					
ANR	8511709	ParameterList	"struct display * dp , int what"		8511663	3					
ANR	8511710	Parameter	struct display * dp	1512:12:47477:47494	8511663	0	True				
ANR	8511711	ParameterType	struct display *		8511663	0					
ANR	8511712	Identifier	dp		8511663	1					
ANR	8511713	Parameter	int what	1512:32:47497:47504	8511663	1	True				
ANR	8511714	ParameterType	int		8511663	0					
ANR	8511715	Identifier	what		8511663	1					
ANR	8511716	CFGEntryNode	ENTRY		8511663		True				
ANR	8511717	CFGExitNode	EXIT		8511663		True				
ANR	8511718	Symbol	* dp		8511663						
ANR	8511719	Symbol	OPTIND		8511663						
ANR	8511720	Symbol	dp -> value		8511663						
ANR	8511721	Symbol	what		8511663						
ANR	8511722	Symbol	PNGCP_TIME_READ		8511663						
ANR	8511723	Symbol	* OPTIND		8511663						
ANR	8511724	Symbol	* dp -> value		8511663						
ANR	8511725	Symbol	* * dp		8511663						
ANR	8511726	Symbol	time		8511663						
ANR	8511727	Symbol	dp		8511663						
ANR	8511728	Symbol	& dp -> write_time		8511663						
ANR	8511729	Symbol	& dp -> read_time		8511663						
ANR	8511730	Function	end_timer	1518:0:47642:48544							
ANR	8511731	FunctionDef	"end_timer (struct display * dp , int what)"		8511730	0					
ANR	8511732	CompoundStatement		1520:0:47694:48544	8511730	0					
ANR	8511733	IfStatement	"if ( ( dp -> value [ OPTIND ( dp , time ) ] & what ) != 0 )"		8511730	0					
ANR	8511734	Condition	"( dp -> value [ OPTIND ( dp , time ) ] & what ) != 0"	1521:7:47703:47742	8511730	0	True				
ANR	8511735	EqualityExpression	"( dp -> value [ OPTIND ( dp , time ) ] & what ) != 0"		8511730	0		!=			
ANR	8511736	BitAndExpression	"dp -> value [ OPTIND ( dp , time ) ] & what"		8511730	0		&			
ANR	8511737	ArrayIndexing	"dp -> value [ OPTIND ( dp , time ) ]"		8511730	0					
ANR	8511738	PtrMemberAccess	dp -> value		8511730	0					
ANR	8511739	Identifier	dp		8511730	0					
ANR	8511740	Identifier	value		8511730	1					
ANR	8511741	CallExpression	"OPTIND ( dp , time )"		8511730	1					
ANR	8511742	Callee	OPTIND		8511730	0					
ANR	8511743	Identifier	OPTIND		8511730	0					
ANR	8511744	ArgumentList	dp		8511730	1					
ANR	8511745	Argument	dp		8511730	0					
ANR	8511746	Identifier	dp		8511730	0					
ANR	8511747	Argument	time		8511730	1					
ANR	8511748	Identifier	time		8511730	0					
ANR	8511749	Identifier	what		8511730	1					
ANR	8511750	PrimaryExpression	0		8511730	1					
ANR	8511751	CompoundStatement		4:6:61:83	8511730	1					
ANR	8511752	IdentifierDeclStatement	"struct timespec t , tmp ;"	1523:6:47756:47778	8511730	0	True				
ANR	8511753	IdentifierDecl	t		8511730	0					
ANR	8511754	IdentifierDeclType	struct timespec		8511730	0					
ANR	8511755	Identifier	t		8511730	1					
ANR	8511756	IdentifierDecl	tmp		8511730	1					
ANR	8511757	IdentifierDeclType	struct timespec		8511730	0					
ANR	8511758	Identifier	tmp		8511730	1					
ANR	8511759	ExpressionStatement	"set_timer ( dp , & t )"	1525:6:47787:47804	8511730	1	True				
ANR	8511760	CallExpression	"set_timer ( dp , & t )"		8511730	0					
ANR	8511761	Callee	set_timer		8511730	0					
ANR	8511762	Identifier	set_timer		8511730	0					
ANR	8511763	ArgumentList	dp		8511730	1					
ANR	8511764	Argument	dp		8511730	0					
ANR	8511765	Identifier	dp		8511730	0					
ANR	8511766	Argument	& t		8511730	1					
ANR	8511767	UnaryOperationExpression	& t		8511730	0					
ANR	8511768	UnaryOperator	&		8511730	0					
ANR	8511769	Identifier	t		8511730	1					
ANR	8511770	IfStatement	if ( what == PNGCP_TIME_READ )		8511730	2					
ANR	8511771	Condition	what == PNGCP_TIME_READ	1527:10:47817:47839	8511730	0	True				
ANR	8511772	EqualityExpression	what == PNGCP_TIME_READ		8511730	0		==			
ANR	8511773	Identifier	what		8511730	0					
ANR	8511774	Identifier	PNGCP_TIME_READ		8511730	1					
ANR	8511775	ExpressionStatement	tmp = dp -> read_time	1528:9:47851:47870	8511730	1	True				
ANR	8511776	AssignmentExpression	tmp = dp -> read_time		8511730	0		=			
ANR	8511777	Identifier	tmp		8511730	0					
ANR	8511778	PtrMemberAccess	dp -> read_time		8511730	1					
ANR	8511779	Identifier	dp		8511730	0					
ANR	8511780	Identifier	read_time		8511730	1					
ANR	8511781	ElseStatement	else		8511730	0					
ANR	8511782	ExpressionStatement	tmp = dp -> write_time	1531:9:47893:47913	8511730	0	True				
ANR	8511783	AssignmentExpression	tmp = dp -> write_time		8511730	0		=			
ANR	8511784	Identifier	tmp		8511730	0					
ANR	8511785	PtrMemberAccess	dp -> write_time		8511730	1					
ANR	8511786	Identifier	dp		8511730	0					
ANR	8511787	Identifier	write_time		8511730	1					
ANR	8511788	ExpressionStatement	t . tv_sec -= tmp . tv_sec	1533:6:47922:47944	8511730	3	True				
ANR	8511789	AssignmentExpression	t . tv_sec -= tmp . tv_sec		8511730	0		-=			
ANR	8511790	MemberAccess	t . tv_sec		8511730	0					
ANR	8511791	Identifier	t		8511730	0					
ANR	8511792	Identifier	tv_sec		8511730	1					
ANR	8511793	MemberAccess	tmp . tv_sec		8511730	1					
ANR	8511794	Identifier	tmp		8511730	0					
ANR	8511795	Identifier	tv_sec		8511730	1					
ANR	8511796	ExpressionStatement	t . tv_nsec -= tmp . tv_nsec	1534:6:47952:47976	8511730	4	True				
ANR	8511797	AssignmentExpression	t . tv_nsec -= tmp . tv_nsec		8511730	0		-=			
ANR	8511798	MemberAccess	t . tv_nsec		8511730	0					
ANR	8511799	Identifier	t		8511730	0					
ANR	8511800	Identifier	tv_nsec		8511730	1					
ANR	8511801	MemberAccess	tmp . tv_nsec		8511730	1					
ANR	8511802	Identifier	tmp		8511730	0					
ANR	8511803	Identifier	tv_nsec		8511730	1					
ANR	8511804	IfStatement	if ( t . tv_nsec < 0 )		8511730	5					
ANR	8511805	Condition	t . tv_nsec < 0	1536:10:47989:48001	8511730	0	True				
ANR	8511806	RelationalExpression	t . tv_nsec < 0		8511730	0		<			
ANR	8511807	MemberAccess	t . tv_nsec		8511730	0					
ANR	8511808	Identifier	t		8511730	0					
ANR	8511809	Identifier	tv_nsec		8511730	1					
ANR	8511810	PrimaryExpression	0		8511730	1					
ANR	8511811	CompoundStatement		18:6:315:315	8511730	1					
ANR	8511812	ExpressionStatement	-- ( t . tv_sec )	1538:9:48021:48033	8511730	0	True				
ANR	8511813	UnaryExpression	-- ( t . tv_sec )		8511730	0					
ANR	8511814	IncDec	--		8511730	0					
ANR	8511815	MemberAccess	t . tv_sec		8511730	1					
ANR	8511816	Identifier	t		8511730	0					
ANR	8511817	Identifier	tv_sec		8511730	1					
ANR	8511818	ExpressionStatement	t . tv_nsec += 1000000000L	1539:9:48044:48068	8511730	1	True				
ANR	8511819	AssignmentExpression	t . tv_nsec += 1000000000L		8511730	0		+=			
ANR	8511820	MemberAccess	t . tv_nsec		8511730	0					
ANR	8511821	Identifier	t		8511730	0					
ANR	8511822	Identifier	tv_nsec		8511730	1					
ANR	8511823	PrimaryExpression	1000000000L		8511730	1					
ANR	8511824	IfStatement	if ( what == PNGCP_TIME_READ )		8511730	6					
ANR	8511825	Condition	what == PNGCP_TIME_READ	1542:10:48089:48111	8511730	0	True				
ANR	8511826	EqualityExpression	what == PNGCP_TIME_READ		8511730	0		==			
ANR	8511827	Identifier	what		8511730	0					
ANR	8511828	Identifier	PNGCP_TIME_READ		8511730	1					
ANR	8511829	ExpressionStatement	"dp -> read_time = t , tmp = dp -> read_time_total"	1543:9:48123:48167	8511730	1	True				
ANR	8511830	Expression	"dp -> read_time = t , tmp = dp -> read_time_total"		8511730	0					
ANR	8511831	AssignmentExpression	dp -> read_time = t		8511730	0		=			
ANR	8511832	PtrMemberAccess	dp -> read_time		8511730	0					
ANR	8511833	Identifier	dp		8511730	0					
ANR	8511834	Identifier	read_time		8511730	1					
ANR	8511835	Identifier	t		8511730	1					
ANR	8511836	AssignmentExpression	tmp = dp -> read_time_total		8511730	1		=			
ANR	8511837	Identifier	tmp		8511730	0					
ANR	8511838	PtrMemberAccess	dp -> read_time_total		8511730	1					
ANR	8511839	Identifier	dp		8511730	0					
ANR	8511840	Identifier	read_time_total		8511730	1					
ANR	8511841	ElseStatement	else		8511730	0					
ANR	8511842	ExpressionStatement	"dp -> write_time = t , tmp = dp -> write_time_total"	1546:9:48190:48236	8511730	0	True				
ANR	8511843	Expression	"dp -> write_time = t , tmp = dp -> write_time_total"		8511730	0					
ANR	8511844	AssignmentExpression	dp -> write_time = t		8511730	0		=			
ANR	8511845	PtrMemberAccess	dp -> write_time		8511730	0					
ANR	8511846	Identifier	dp		8511730	0					
ANR	8511847	Identifier	write_time		8511730	1					
ANR	8511848	Identifier	t		8511730	1					
ANR	8511849	AssignmentExpression	tmp = dp -> write_time_total		8511730	1		=			
ANR	8511850	Identifier	tmp		8511730	0					
ANR	8511851	PtrMemberAccess	dp -> write_time_total		8511730	1					
ANR	8511852	Identifier	dp		8511730	0					
ANR	8511853	Identifier	write_time_total		8511730	1					
ANR	8511854	ExpressionStatement	tmp . tv_sec += t . tv_sec	1548:6:48245:48267	8511730	7	True				
ANR	8511855	AssignmentExpression	tmp . tv_sec += t . tv_sec		8511730	0		+=			
ANR	8511856	MemberAccess	tmp . tv_sec		8511730	0					
ANR	8511857	Identifier	tmp		8511730	0					
ANR	8511858	Identifier	tv_sec		8511730	1					
ANR	8511859	MemberAccess	t . tv_sec		8511730	1					
ANR	8511860	Identifier	t		8511730	0					
ANR	8511861	Identifier	tv_sec		8511730	1					
ANR	8511862	ExpressionStatement	tmp . tv_nsec += t . tv_nsec	1549:6:48275:48299	8511730	8	True				
ANR	8511863	AssignmentExpression	tmp . tv_nsec += t . tv_nsec		8511730	0		+=			
ANR	8511864	MemberAccess	tmp . tv_nsec		8511730	0					
ANR	8511865	Identifier	tmp		8511730	0					
ANR	8511866	Identifier	tv_nsec		8511730	1					
ANR	8511867	MemberAccess	t . tv_nsec		8511730	1					
ANR	8511868	Identifier	t		8511730	0					
ANR	8511869	Identifier	tv_nsec		8511730	1					
ANR	8511870	IfStatement	if ( tmp . tv_nsec >= 1000000000L )		8511730	9					
ANR	8511871	Condition	tmp . tv_nsec >= 1000000000L	1551:10:48312:48337	8511730	0	True				
ANR	8511872	RelationalExpression	tmp . tv_nsec >= 1000000000L		8511730	0		>=			
ANR	8511873	MemberAccess	tmp . tv_nsec		8511730	0					
ANR	8511874	Identifier	tmp		8511730	0					
ANR	8511875	Identifier	tv_nsec		8511730	1					
ANR	8511876	PrimaryExpression	1000000000L		8511730	1					
ANR	8511877	CompoundStatement		33:6:651:651	8511730	1					
ANR	8511878	ExpressionStatement	++ ( tmp . tv_sec )	1553:9:48357:48371	8511730	0	True				
ANR	8511879	UnaryExpression	++ ( tmp . tv_sec )		8511730	0					
ANR	8511880	IncDec	++		8511730	0					
ANR	8511881	MemberAccess	tmp . tv_sec		8511730	1					
ANR	8511882	Identifier	tmp		8511730	0					
ANR	8511883	Identifier	tv_sec		8511730	1					
ANR	8511884	ExpressionStatement	tmp . tv_nsec -= 1000000000L	1554:9:48382:48408	8511730	1	True				
ANR	8511885	AssignmentExpression	tmp . tv_nsec -= 1000000000L		8511730	0		-=			
ANR	8511886	MemberAccess	tmp . tv_nsec		8511730	0					
ANR	8511887	Identifier	tmp		8511730	0					
ANR	8511888	Identifier	tv_nsec		8511730	1					
ANR	8511889	PrimaryExpression	1000000000L		8511730	1					
ANR	8511890	IfStatement	if ( what == PNGCP_TIME_READ )		8511730	10					
ANR	8511891	Condition	what == PNGCP_TIME_READ	1557:10:48429:48451	8511730	0	True				
ANR	8511892	EqualityExpression	what == PNGCP_TIME_READ		8511730	0		==			
ANR	8511893	Identifier	what		8511730	0					
ANR	8511894	Identifier	PNGCP_TIME_READ		8511730	1					
ANR	8511895	ExpressionStatement	dp -> read_time_total = tmp	1558:9:48463:48488	8511730	1	True				
ANR	8511896	AssignmentExpression	dp -> read_time_total = tmp		8511730	0		=			
ANR	8511897	PtrMemberAccess	dp -> read_time_total		8511730	0					
ANR	8511898	Identifier	dp		8511730	0					
ANR	8511899	Identifier	read_time_total		8511730	1					
ANR	8511900	Identifier	tmp		8511730	1					
ANR	8511901	ElseStatement	else		8511730	0					
ANR	8511902	ExpressionStatement	dp -> write_time_total = tmp	1561:9:48511:48537	8511730	0	True				
ANR	8511903	AssignmentExpression	dp -> write_time_total = tmp		8511730	0		=			
ANR	8511904	PtrMemberAccess	dp -> write_time_total		8511730	0					
ANR	8511905	Identifier	dp		8511730	0					
ANR	8511906	Identifier	write_time_total		8511730	1					
ANR	8511907	Identifier	tmp		8511730	1					
ANR	8511908	ReturnType	static void		8511730	1					
ANR	8511909	Identifier	end_timer		8511730	2					
ANR	8511910	ParameterList	"struct display * dp , int what"		8511730	3					
ANR	8511911	Parameter	struct display * dp	1519:10:47664:47681	8511730	0	True				
ANR	8511912	ParameterType	struct display *		8511730	0					
ANR	8511913	Identifier	dp		8511730	1					
ANR	8511914	Parameter	int what	1519:30:47684:47691	8511730	1	True				
ANR	8511915	ParameterType	int		8511730	0					
ANR	8511916	Identifier	what		8511730	1					
ANR	8511917	CFGEntryNode	ENTRY		8511730		True				
ANR	8511918	CFGExitNode	EXIT		8511730		True				
ANR	8511919	Symbol	t . tv_sec		8511730						
ANR	8511920	Symbol	PNGCP_TIME_READ		8511730						
ANR	8511921	Symbol	dp -> write_time		8511730						
ANR	8511922	Symbol	tmp . tv_sec		8511730						
ANR	8511923	Symbol	tmp . tv_nsec		8511730						
ANR	8511924	Symbol	dp		8511730						
ANR	8511925	Symbol	* dp		8511730						
ANR	8511926	Symbol	OPTIND		8511730						
ANR	8511927	Symbol	dp -> value		8511730						
ANR	8511928	Symbol	what		8511730						
ANR	8511929	Symbol	* OPTIND		8511730						
ANR	8511930	Symbol	t		8511730						
ANR	8511931	Symbol	tmp		8511730						
ANR	8511932	Symbol	* dp -> value		8511730						
ANR	8511933	Symbol	dp -> read_time		8511730						
ANR	8511934	Symbol	* * dp		8511730						
ANR	8511935	Symbol	& t		8511730						
ANR	8511936	Symbol	time		8511730						
ANR	8511937	Symbol	dp -> write_time_total		8511730						
ANR	8511938	Symbol	dp -> read_time_total		8511730						
ANR	8511939	Symbol	t . tv_nsec		8511730						
ANR	8511940	Function	print_time	1565:0:48547:48680							
ANR	8511941	FunctionDef	"print_time (const char * what , struct timespec t)"		8511940	0					
ANR	8511942	CompoundStatement		1567:0:48607:48680	8511940	0					
ANR	8511943	ExpressionStatement	"printf ( ""%s %.2lu.%.9ld"" , what , ( unsigned long ) t . tv_sec , t . tv_nsec )"	1568:3:48612:48678	8511940	0	True				
ANR	8511944	CallExpression	"printf ( ""%s %.2lu.%.9ld"" , what , ( unsigned long ) t . tv_sec , t . tv_nsec )"		8511940	0					
ANR	8511945	Callee	printf		8511940	0					
ANR	8511946	Identifier	printf		8511940	0					
ANR	8511947	ArgumentList	"""%s %.2lu.%.9ld"""		8511940	1					
ANR	8511948	Argument	"""%s %.2lu.%.9ld"""		8511940	0					
ANR	8511949	PrimaryExpression	"""%s %.2lu.%.9ld"""		8511940	0					
ANR	8511950	Argument	what		8511940	1					
ANR	8511951	Identifier	what		8511940	0					
ANR	8511952	Argument	( unsigned long ) t . tv_sec		8511940	2					
ANR	8511953	CastExpression	( unsigned long ) t . tv_sec		8511940	0					
ANR	8511954	CastTarget	unsigned long		8511940	0					
ANR	8511955	MemberAccess	t . tv_sec		8511940	1					
ANR	8511956	Identifier	t		8511940	0					
ANR	8511957	Identifier	tv_sec		8511940	1					
ANR	8511958	Argument	t . tv_nsec		8511940	3					
ANR	8511959	MemberAccess	t . tv_nsec		8511940	0					
ANR	8511960	Identifier	t		8511940	0					
ANR	8511961	Identifier	tv_nsec		8511940	1					
ANR	8511962	ReturnType	static void		8511940	1					
ANR	8511963	Identifier	print_time		8511940	2					
ANR	8511964	ParameterList	"const char * what , struct timespec t"		8511940	3					
ANR	8511965	Parameter	const char * what	1566:11:48570:48585	8511940	0	True				
ANR	8511966	ParameterType	const char *		8511940	0					
ANR	8511967	Identifier	what		8511940	1					
ANR	8511968	Parameter	struct timespec t	1566:29:48588:48604	8511940	1	True				
ANR	8511969	ParameterType	struct timespec		8511940	0					
ANR	8511970	Identifier	t		8511940	1					
ANR	8511971	CFGEntryNode	ENTRY		8511940		True				
ANR	8511972	CFGExitNode	EXIT		8511940		True				
ANR	8511973	Symbol	t . tv_sec		8511940						
ANR	8511974	Symbol	what		8511940						
ANR	8511975	Symbol	t		8511940						
ANR	8511976	Symbol	t . tv_nsec		8511940						
ANR	8511977	Function	checkdir	1578:0:48904:49029							
ANR	8511978	FunctionDef	checkdir (const char * pathname)		8511977	0					
ANR	8511979	CompoundStatement		1580:0:48946:49029	8511977	0					
ANR	8511980	IdentifierDeclStatement	struct stat buf ;	1581:3:48951:48966	8511977	0	True				
ANR	8511981	IdentifierDecl	buf		8511977	0					
ANR	8511982	IdentifierDeclType	struct stat		8511977	0					
ANR	8511983	Identifier	buf		8511977	1					
ANR	8511984	ReturnStatement	"return stat ( pathname , & buf ) == 0 && S_ISDIR ( buf . st_mode ) ;"	1582:3:48971:49027	8511977	1	True				
ANR	8511985	AndExpression	"stat ( pathname , & buf ) == 0 && S_ISDIR ( buf . st_mode )"		8511977	0		&&			
ANR	8511986	EqualityExpression	"stat ( pathname , & buf ) == 0"		8511977	0		==			
ANR	8511987	CallExpression	"stat ( pathname , & buf )"		8511977	0					
ANR	8511988	Callee	stat		8511977	0					
ANR	8511989	Identifier	stat		8511977	0					
ANR	8511990	ArgumentList	pathname		8511977	1					
ANR	8511991	Argument	pathname		8511977	0					
ANR	8511992	Identifier	pathname		8511977	0					
ANR	8511993	Argument	& buf		8511977	1					
ANR	8511994	UnaryOperationExpression	& buf		8511977	0					
ANR	8511995	UnaryOperator	&		8511977	0					
ANR	8511996	Identifier	buf		8511977	1					
ANR	8511997	PrimaryExpression	0		8511977	1					
ANR	8511998	CallExpression	S_ISDIR ( buf . st_mode )		8511977	1					
ANR	8511999	Callee	S_ISDIR		8511977	0					
ANR	8512000	Identifier	S_ISDIR		8511977	0					
ANR	8512001	ArgumentList	buf . st_mode		8511977	1					
ANR	8512002	Argument	buf . st_mode		8511977	0					
ANR	8512003	MemberAccess	buf . st_mode		8511977	0					
ANR	8512004	Identifier	buf		8511977	0					
ANR	8512005	Identifier	st_mode		8511977	1					
ANR	8512006	ReturnType	static int		8511977	1					
ANR	8512007	Identifier	checkdir		8511977	2					
ANR	8512008	ParameterList	const char * pathname		8511977	3					
ANR	8512009	Parameter	const char * pathname	1579:9:48924:48943	8511977	0	True				
ANR	8512010	ParameterType	const char *		8511977	0					
ANR	8512011	Identifier	pathname		8511977	1					
ANR	8512012	CFGEntryNode	ENTRY		8511977		True				
ANR	8512013	CFGExitNode	EXIT		8511977		True				
ANR	8512014	Symbol	buf		8511977						
ANR	8512015	Symbol	stat		8511977						
ANR	8512016	Symbol	buf . st_mode		8511977						
ANR	8512017	Symbol	S_ISDIR		8511977						
ANR	8512018	Symbol	& buf		8511977						
ANR	8512019	Symbol	pathname		8511977						
ANR	8512020	Function	isdir	1590:0:49208:50169							
ANR	8512021	FunctionDef	"isdir (struct display * dp , const char * pathname)"		8512020	0					
ANR	8512022	CompoundStatement		1592:0:49267:50169	8512020	0					
ANR	8512023	IfStatement	if ( pathname == NULL )		8512020	0					
ANR	8512024	Condition	pathname == NULL	1593:7:49276:49291	8512020	0	True				
ANR	8512025	EqualityExpression	pathname == NULL		8512020	0		==			
ANR	8512026	Identifier	pathname		8512020	0					
ANR	8512027	Identifier	NULL		8512020	1					
ANR	8512028	ReturnStatement	return 0 ;	1594:6:49300:49308	8512020	1	True				
ANR	8512029	PrimaryExpression	0		8512020	0					
ANR	8512030	ElseStatement	else		8512020	0					
ANR	8512031	IfStatement	if ( pathname [ 0 ] == 0 )		8512020	0					
ANR	8512032	Condition	pathname [ 0 ] == 0	1596:12:49336:49351	8512020	0	True				
ANR	8512033	EqualityExpression	pathname [ 0 ] == 0		8512020	0		==			
ANR	8512034	ArrayIndexing	pathname [ 0 ]		8512020	0					
ANR	8512035	Identifier	pathname		8512020	0					
ANR	8512036	PrimaryExpression	0		8512020	1					
ANR	8512037	PrimaryExpression	0		8512020	1					
ANR	8512038	ReturnStatement	return 1 ;	1597:6:49360:49368	8512020	1	True				
ANR	8512039	PrimaryExpression	1		8512020	0					
ANR	8512040	ElseStatement	else		8512020	0					
ANR	8512041	CompoundStatement		11:6:164:194	8512020	0					
ANR	8512042	IdentifierDeclStatement	struct stat buf ;	1601:6:49409:49424	8512020	0	True				
ANR	8512043	IdentifierDecl	buf		8512020	0					
ANR	8512044	IdentifierDeclType	struct stat		8512020	0					
ANR	8512045	Identifier	buf		8512020	1					
ANR	8512046	IdentifierDeclStatement	"int ret = stat ( pathname , & buf ) ;"	1602:6:49432:49462	8512020	1	True				
ANR	8512047	IdentifierDecl	"ret = stat ( pathname , & buf )"		8512020	0					
ANR	8512048	IdentifierDeclType	int		8512020	0					
ANR	8512049	Identifier	ret		8512020	1					
ANR	8512050	AssignmentExpression	"ret = stat ( pathname , & buf )"		8512020	2		=			
ANR	8512051	Identifier	ret		8512020	0					
ANR	8512052	CallExpression	"stat ( pathname , & buf )"		8512020	1					
ANR	8512053	Callee	stat		8512020	0					
ANR	8512054	Identifier	stat		8512020	0					
ANR	8512055	ArgumentList	pathname		8512020	1					
ANR	8512056	Argument	pathname		8512020	0					
ANR	8512057	Identifier	pathname		8512020	0					
ANR	8512058	Argument	& buf		8512020	1					
ANR	8512059	UnaryOperationExpression	& buf		8512020	0					
ANR	8512060	UnaryOperator	&		8512020	0					
ANR	8512061	Identifier	buf		8512020	1					
ANR	8512062	IfStatement	if ( ret == 0 )		8512020	2					
ANR	8512063	Condition	ret == 0	1604:10:49475:49482	8512020	0	True				
ANR	8512064	EqualityExpression	ret == 0		8512020	0		==			
ANR	8512065	Identifier	ret		8512020	0					
ANR	8512066	PrimaryExpression	0		8512020	1					
ANR	8512067	CompoundStatement		14:6:246:246	8512020	1					
ANR	8512068	IfStatement	if ( S_ISDIR ( buf . st_mode ) )		8512020	0					
ANR	8512069	Condition	S_ISDIR ( buf . st_mode )	1606:13:49529:49548	8512020	0	True				
ANR	8512070	CallExpression	S_ISDIR ( buf . st_mode )		8512020	0					
ANR	8512071	Callee	S_ISDIR		8512020	0					
ANR	8512072	Identifier	S_ISDIR		8512020	0					
ANR	8512073	ArgumentList	buf . st_mode		8512020	1					
ANR	8512074	Argument	buf . st_mode		8512020	0					
ANR	8512075	MemberAccess	buf . st_mode		8512020	0					
ANR	8512076	Identifier	buf		8512020	0					
ANR	8512077	Identifier	st_mode		8512020	1					
ANR	8512078	ReturnStatement	return 1 ;	1607:12:49563:49571	8512020	1	True				
ANR	8512079	PrimaryExpression	1		8512020	0					
ANR	8512080	IfStatement	"if ( access ( pathname , W_OK ) != 0 )"		8512020	1					
ANR	8512081	Condition	"access ( pathname , W_OK ) != 0"	1610:13:49656:49682	8512020	0	True				
ANR	8512082	EqualityExpression	"access ( pathname , W_OK ) != 0"		8512020	0		!=			
ANR	8512083	CallExpression	"access ( pathname , W_OK )"		8512020	0					
ANR	8512084	Callee	access		8512020	0					
ANR	8512085	Identifier	access		8512020	0					
ANR	8512086	ArgumentList	pathname		8512020	1					
ANR	8512087	Argument	pathname		8512020	0					
ANR	8512088	Identifier	pathname		8512020	0					
ANR	8512089	Argument	W_OK		8512020	1					
ANR	8512090	Identifier	W_OK		8512020	0					
ANR	8512091	PrimaryExpression	0		8512020	1					
ANR	8512092	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%s: cannot be written (%s)"" , pathname , strerror ( errno ) )"	1611:12:49697:49799	8512020	1	True				
ANR	8512093	CallExpression	"display_log ( dp , USER_ERROR , ""%s: cannot be written (%s)"" , pathname , strerror ( errno ) )"		8512020	0					
ANR	8512094	Callee	display_log		8512020	0					
ANR	8512095	Identifier	display_log		8512020	0					
ANR	8512096	ArgumentList	dp		8512020	1					
ANR	8512097	Argument	dp		8512020	0					
ANR	8512098	Identifier	dp		8512020	0					
ANR	8512099	Argument	USER_ERROR		8512020	1					
ANR	8512100	Identifier	USER_ERROR		8512020	0					
ANR	8512101	Argument	"""%s: cannot be written (%s)"""		8512020	2					
ANR	8512102	PrimaryExpression	"""%s: cannot be written (%s)"""		8512020	0					
ANR	8512103	Argument	pathname		8512020	3					
ANR	8512104	Identifier	pathname		8512020	0					
ANR	8512105	Argument	strerror ( errno )		8512020	4					
ANR	8512106	CallExpression	strerror ( errno )		8512020	0					
ANR	8512107	Callee	strerror		8512020	0					
ANR	8512108	Identifier	strerror		8512020	0					
ANR	8512109	ArgumentList	errno		8512020	1					
ANR	8512110	Argument	errno		8512020	0					
ANR	8512111	Identifier	errno		8512020	0					
ANR	8512112	ReturnStatement	return 0 ;	1614:9:49811:49819	8512020	2	True				
ANR	8512113	PrimaryExpression	0		8512020	0					
ANR	8512114	ElseStatement	else		8512020	0					
ANR	8512115	CompoundStatement		27:6:630:630	8512020	0					
ANR	8512116	IfStatement	if ( errno != ENOENT )		8512020	0					
ANR	8512117	Condition	errno != ENOENT	1620:13:49973:49987	8512020	0	True				
ANR	8512118	EqualityExpression	errno != ENOENT		8512020	0		!=			
ANR	8512119	Identifier	errno		8512020	0					
ANR	8512120	Identifier	ENOENT		8512020	1					
ANR	8512121	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%s: invalid output name (%s)"" , pathname , strerror ( errno ) )"	1621:12:50002:50106	8512020	1	True				
ANR	8512122	CallExpression	"display_log ( dp , USER_ERROR , ""%s: invalid output name (%s)"" , pathname , strerror ( errno ) )"		8512020	0					
ANR	8512123	Callee	display_log		8512020	0					
ANR	8512124	Identifier	display_log		8512020	0					
ANR	8512125	ArgumentList	dp		8512020	1					
ANR	8512126	Argument	dp		8512020	0					
ANR	8512127	Identifier	dp		8512020	0					
ANR	8512128	Argument	USER_ERROR		8512020	1					
ANR	8512129	Identifier	USER_ERROR		8512020	0					
ANR	8512130	Argument	"""%s: invalid output name (%s)"""		8512020	2					
ANR	8512131	PrimaryExpression	"""%s: invalid output name (%s)"""		8512020	0					
ANR	8512132	Argument	pathname		8512020	3					
ANR	8512133	Identifier	pathname		8512020	0					
ANR	8512134	Argument	strerror ( errno )		8512020	4					
ANR	8512135	CallExpression	strerror ( errno )		8512020	0					
ANR	8512136	Callee	strerror		8512020	0					
ANR	8512137	Identifier	strerror		8512020	0					
ANR	8512138	ArgumentList	errno		8512020	1					
ANR	8512139	Argument	errno		8512020	0					
ANR	8512140	Identifier	errno		8512020	0					
ANR	8512141	ReturnStatement	return 0 ;	1624:9:50118:50126	8512020	1	True				
ANR	8512142	PrimaryExpression	0		8512020	0					
ANR	8512143	ReturnType	static int		8512020	1					
ANR	8512144	Identifier	isdir		8512020	2					
ANR	8512145	ParameterList	"struct display * dp , const char * pathname"		8512020	3					
ANR	8512146	Parameter	struct display * dp	1591:6:49225:49242	8512020	0	True				
ANR	8512147	ParameterType	struct display *		8512020	0					
ANR	8512148	Identifier	dp		8512020	1					
ANR	8512149	Parameter	const char * pathname	1591:26:49245:49264	8512020	1	True				
ANR	8512150	ParameterType	const char *		8512020	0					
ANR	8512151	Identifier	pathname		8512020	1					
ANR	8512152	CFGEntryNode	ENTRY		8512020		True				
ANR	8512153	CFGExitNode	EXIT		8512020		True				
ANR	8512154	Symbol	ret		8512020						
ANR	8512155	Symbol	stat		8512020						
ANR	8512156	Symbol	errno		8512020						
ANR	8512157	Symbol	NULL		8512020						
ANR	8512158	Symbol	access		8512020						
ANR	8512159	Symbol	USER_ERROR		8512020						
ANR	8512160	Symbol	buf . st_mode		8512020						
ANR	8512161	Symbol	ENOENT		8512020						
ANR	8512162	Symbol	dp		8512020						
ANR	8512163	Symbol	W_OK		8512020						
ANR	8512164	Symbol	pathname		8512020						
ANR	8512165	Symbol	strerror		8512020						
ANR	8512166	Symbol	buf		8512020						
ANR	8512167	Symbol	S_ISDIR		8512020						
ANR	8512168	Symbol	& buf		8512020						
ANR	8512169	Symbol	* pathname		8512020						
ANR	8512170	Function	makename	1629:0:50172:51750							
ANR	8512171	FunctionDef	"makename (struct display * dp , const char * dir , const char * infile)"		8512170	0					
ANR	8512172	CompoundStatement		1631:0:50250:51750	8512170	0					
ANR	8512173	ExpressionStatement	dp -> namebuf [ 0 ] = 0	1633:3:50311:50329	8512170	0	True				
ANR	8512174	AssignmentExpression	dp -> namebuf [ 0 ] = 0		8512170	0		=			
ANR	8512175	ArrayIndexing	dp -> namebuf [ 0 ]		8512170	0					
ANR	8512176	PtrMemberAccess	dp -> namebuf		8512170	0					
ANR	8512177	Identifier	dp		8512170	0					
ANR	8512178	Identifier	namebuf		8512170	1					
ANR	8512179	PrimaryExpression	0		8512170	1					
ANR	8512180	PrimaryExpression	0		8512170	1					
ANR	8512181	IfStatement	if ( dir == NULL || infile == NULL )		8512170	1					
ANR	8512182	Condition	dir == NULL || infile == NULL	1635:7:50339:50367	8512170	0	True				
ANR	8512183	OrExpression	dir == NULL || infile == NULL		8512170	0		||			
ANR	8512184	EqualityExpression	dir == NULL		8512170	0		==			
ANR	8512185	Identifier	dir		8512170	0					
ANR	8512186	Identifier	NULL		8512170	1					
ANR	8512187	EqualityExpression	infile == NULL		8512170	1		==			
ANR	8512188	Identifier	infile		8512170	0					
ANR	8512189	Identifier	NULL		8512170	1					
ANR	8512190	ExpressionStatement	"display_log ( dp , INTERNAL_ERROR , ""NULL name to makename"" )"	1636:6:50376:50432	8512170	1	True				
ANR	8512191	CallExpression	"display_log ( dp , INTERNAL_ERROR , ""NULL name to makename"" )"		8512170	0					
ANR	8512192	Callee	display_log		8512170	0					
ANR	8512193	Identifier	display_log		8512170	0					
ANR	8512194	ArgumentList	dp		8512170	1					
ANR	8512195	Argument	dp		8512170	0					
ANR	8512196	Identifier	dp		8512170	0					
ANR	8512197	Argument	INTERNAL_ERROR		8512170	1					
ANR	8512198	Identifier	INTERNAL_ERROR		8512170	0					
ANR	8512199	Argument	"""NULL name to makename"""		8512170	2					
ANR	8512200	PrimaryExpression	"""NULL name to makename"""		8512170	0					
ANR	8512201	ElseStatement	else		8512170	0					
ANR	8512202	CompoundStatement		10:6:203:229	8512170	0					
ANR	8512203	IdentifierDeclStatement	size_t dsize = strlen ( dir ) ;	1640:6:50454:50480	8512170	0	True				
ANR	8512204	IdentifierDecl	dsize = strlen ( dir )		8512170	0					
ANR	8512205	IdentifierDeclType	size_t		8512170	0					
ANR	8512206	Identifier	dsize		8512170	1					
ANR	8512207	AssignmentExpression	dsize = strlen ( dir )		8512170	2		=			
ANR	8512208	Identifier	dsize		8512170	0					
ANR	8512209	CallExpression	strlen ( dir )		8512170	1					
ANR	8512210	Callee	strlen		8512170	0					
ANR	8512211	Identifier	strlen		8512170	0					
ANR	8512212	ArgumentList	dir		8512170	1					
ANR	8512213	Argument	dir		8512170	0					
ANR	8512214	Identifier	dir		8512170	0					
ANR	8512215	IfStatement	if ( dsize <= ( sizeof dp -> namebuf ) - 2 )		8512170	1					
ANR	8512216	Condition	dsize <= ( sizeof dp -> namebuf ) - 2	1642:10:50493:50523	8512170	0	True				
ANR	8512217	RelationalExpression	dsize <= ( sizeof dp -> namebuf ) - 2		8512170	0		<=			
ANR	8512218	Identifier	dsize		8512170	0					
ANR	8512219	AdditiveExpression	( sizeof dp -> namebuf ) - 2		8512170	1		-			
ANR	8512220	SizeofExpression	sizeof dp -> namebuf		8512170	0					
ANR	8512221	Sizeof	sizeof		8512170	0					
ANR	8512222	PtrMemberAccess	dp -> namebuf		8512170	1					
ANR	8512223	Identifier	dp		8512170	0					
ANR	8512224	Identifier	namebuf		8512170	1					
ANR	8512225	PrimaryExpression	2		8512170	1					
ANR	8512226	CompoundStatement		15:9:366:389	8512170	1					
ANR	8512227	IdentifierDeclStatement	size_t isize = strlen ( infile ) ;	1644:9:50577:50606	8512170	0	True				
ANR	8512228	IdentifierDecl	isize = strlen ( infile )		8512170	0					
ANR	8512229	IdentifierDeclType	size_t		8512170	0					
ANR	8512230	Identifier	isize		8512170	1					
ANR	8512231	AssignmentExpression	isize = strlen ( infile )		8512170	2		=			
ANR	8512232	Identifier	isize		8512170	0					
ANR	8512233	CallExpression	strlen ( infile )		8512170	1					
ANR	8512234	Callee	strlen		8512170	0					
ANR	8512235	Identifier	strlen		8512170	0					
ANR	8512236	ArgumentList	infile		8512170	1					
ANR	8512237	Argument	infile		8512170	0					
ANR	8512238	Identifier	infile		8512170	0					
ANR	8512239	IdentifierDeclStatement	size_t istart = isize - 1 ;	1645:9:50617:50640	8512170	1	True				
ANR	8512240	IdentifierDecl	istart = isize - 1		8512170	0					
ANR	8512241	IdentifierDeclType	size_t		8512170	0					
ANR	8512242	Identifier	istart		8512170	1					
ANR	8512243	AssignmentExpression	istart = isize - 1		8512170	2		=			
ANR	8512244	Identifier	istart		8512170	0					
ANR	8512245	AdditiveExpression	isize - 1		8512170	1		-			
ANR	8512246	Identifier	isize		8512170	0					
ANR	8512247	PrimaryExpression	1		8512170	1					
ANR	8512248	IfStatement	if ( infile [ istart ] == '/' )		8512170	2					
ANR	8512249	Condition	infile [ istart ] == '/'	1648:13:50701:50721	8512170	0	True				
ANR	8512250	EqualityExpression	infile [ istart ] == '/'		8512170	0		==			
ANR	8512251	ArrayIndexing	infile [ istart ]		8512170	0					
ANR	8512252	Identifier	infile		8512170	0					
ANR	8512253	Identifier	istart		8512170	1					
ANR	8512254	PrimaryExpression	'/'		8512170	1					
ANR	8512255	ExpressionStatement	"display_log ( dp , INTERNAL_ERROR , ""infile with trailing /"" )"	1649:12:50736:50793	8512170	1	True				
ANR	8512256	CallExpression	"display_log ( dp , INTERNAL_ERROR , ""infile with trailing /"" )"		8512170	0					
ANR	8512257	Callee	display_log		8512170	0					
ANR	8512258	Identifier	display_log		8512170	0					
ANR	8512259	ArgumentList	dp		8512170	1					
ANR	8512260	Argument	dp		8512170	0					
ANR	8512261	Identifier	dp		8512170	0					
ANR	8512262	Argument	INTERNAL_ERROR		8512170	1					
ANR	8512263	Identifier	INTERNAL_ERROR		8512170	0					
ANR	8512264	Argument	"""infile with trailing /"""		8512170	2					
ANR	8512265	PrimaryExpression	"""infile with trailing /"""		8512170	0					
ANR	8512266	ExpressionStatement	"memcpy ( dp -> namebuf , dir , dsize )"	1651:9:50805:50836	8512170	3	True				
ANR	8512267	CallExpression	"memcpy ( dp -> namebuf , dir , dsize )"		8512170	0					
ANR	8512268	Callee	memcpy		8512170	0					
ANR	8512269	Identifier	memcpy		8512170	0					
ANR	8512270	ArgumentList	dp -> namebuf		8512170	1					
ANR	8512271	Argument	dp -> namebuf		8512170	0					
ANR	8512272	PtrMemberAccess	dp -> namebuf		8512170	0					
ANR	8512273	Identifier	dp		8512170	0					
ANR	8512274	Identifier	namebuf		8512170	1					
ANR	8512275	Argument	dir		8512170	1					
ANR	8512276	Identifier	dir		8512170	0					
ANR	8512277	Argument	dsize		8512170	2					
ANR	8512278	Identifier	dsize		8512170	0					
ANR	8512279	IfStatement	if ( dsize > 0 && dp -> namebuf [ dsize - 1 ] != '/' )		8512170	4					
ANR	8512280	Condition	dsize > 0 && dp -> namebuf [ dsize - 1 ] != '/'	1652:13:50851:50890	8512170	0	True				
ANR	8512281	AndExpression	dsize > 0 && dp -> namebuf [ dsize - 1 ] != '/'		8512170	0		&&			
ANR	8512282	RelationalExpression	dsize > 0		8512170	0		>			
ANR	8512283	Identifier	dsize		8512170	0					
ANR	8512284	PrimaryExpression	0		8512170	1					
ANR	8512285	EqualityExpression	dp -> namebuf [ dsize - 1 ] != '/'		8512170	1		!=			
ANR	8512286	ArrayIndexing	dp -> namebuf [ dsize - 1 ]		8512170	0					
ANR	8512287	PtrMemberAccess	dp -> namebuf		8512170	0					
ANR	8512288	Identifier	dp		8512170	0					
ANR	8512289	Identifier	namebuf		8512170	1					
ANR	8512290	AdditiveExpression	dsize - 1		8512170	1		-			
ANR	8512291	Identifier	dsize		8512170	0					
ANR	8512292	PrimaryExpression	1		8512170	1					
ANR	8512293	PrimaryExpression	'/'		8512170	1					
ANR	8512294	ExpressionStatement	dp -> namebuf [ dsize ++ ] = '/'	1653:12:50905:50931	8512170	1	True				
ANR	8512295	AssignmentExpression	dp -> namebuf [ dsize ++ ] = '/'		8512170	0		=			
ANR	8512296	ArrayIndexing	dp -> namebuf [ dsize ++ ]		8512170	0					
ANR	8512297	PtrMemberAccess	dp -> namebuf		8512170	0					
ANR	8512298	Identifier	dp		8512170	0					
ANR	8512299	Identifier	namebuf		8512170	1					
ANR	8512300	PostIncDecOperationExpression	dsize ++		8512170	1					
ANR	8512301	Identifier	dsize		8512170	0					
ANR	8512302	IncDec	++		8512170	1					
ANR	8512303	PrimaryExpression	'/'		8512170	1					
ANR	8512304	WhileStatement	while ( istart > 0 && infile [ istart - 1 ] != '/' )		8512170	5					
ANR	8512305	Condition	istart > 0 && infile [ istart - 1 ] != '/'	1656:16:51001:51037	8512170	0	True				
ANR	8512306	AndExpression	istart > 0 && infile [ istart - 1 ] != '/'		8512170	0		&&			
ANR	8512307	RelationalExpression	istart > 0		8512170	0		>			
ANR	8512308	Identifier	istart		8512170	0					
ANR	8512309	PrimaryExpression	0		8512170	1					
ANR	8512310	EqualityExpression	infile [ istart - 1 ] != '/'		8512170	1		!=			
ANR	8512311	ArrayIndexing	infile [ istart - 1 ]		8512170	0					
ANR	8512312	Identifier	infile		8512170	0					
ANR	8512313	AdditiveExpression	istart - 1		8512170	1		-			
ANR	8512314	Identifier	istart		8512170	0					
ANR	8512315	PrimaryExpression	1		8512170	1					
ANR	8512316	PrimaryExpression	'/'		8512170	1					
ANR	8512317	ExpressionStatement	-- istart	1657:12:51052:51060	8512170	1	True				
ANR	8512318	UnaryExpression	-- istart		8512170	0					
ANR	8512319	IncDec	--		8512170	0					
ANR	8512320	Identifier	istart		8512170	1					
ANR	8512321	ExpressionStatement	isize -= istart	1659:9:51072:51087	8512170	6	True				
ANR	8512322	AssignmentExpression	isize -= istart		8512170	0		-=			
ANR	8512323	Identifier	isize		8512170	0					
ANR	8512324	Identifier	istart		8512170	1					
ANR	8512325	ExpressionStatement	infile += istart	1660:9:51098:51114	8512170	7	True				
ANR	8512326	AssignmentExpression	infile += istart		8512170	0		+=			
ANR	8512327	Identifier	infile		8512170	0					
ANR	8512328	Identifier	istart		8512170	1					
ANR	8512329	IfStatement	if ( dsize + isize < ( sizeof dp -> namebuf ) )		8512170	8					
ANR	8512330	Condition	dsize + isize < ( sizeof dp -> namebuf )	1662:13:51130:51163	8512170	0	True				
ANR	8512331	RelationalExpression	dsize + isize < ( sizeof dp -> namebuf )		8512170	0		<			
ANR	8512332	AdditiveExpression	dsize + isize		8512170	0		+			
ANR	8512333	Identifier	dsize		8512170	0					
ANR	8512334	Identifier	isize		8512170	1					
ANR	8512335	SizeofExpression	sizeof dp -> namebuf		8512170	1					
ANR	8512336	Sizeof	sizeof		8512170	0					
ANR	8512337	PtrMemberAccess	dp -> namebuf		8512170	1					
ANR	8512338	Identifier	dp		8512170	0					
ANR	8512339	Identifier	namebuf		8512170	1					
ANR	8512340	CompoundStatement		33:9:952:952	8512170	1					
ANR	8512341	ExpressionStatement	"memcpy ( dp -> namebuf + dsize , infile , isize + 1 )"	1664:12:51217:51259	8512170	0	True				
ANR	8512342	CallExpression	"memcpy ( dp -> namebuf + dsize , infile , isize + 1 )"		8512170	0					
ANR	8512343	Callee	memcpy		8512170	0					
ANR	8512344	Identifier	memcpy		8512170	0					
ANR	8512345	ArgumentList	dp -> namebuf + dsize		8512170	1					
ANR	8512346	Argument	dp -> namebuf + dsize		8512170	0					
ANR	8512347	AdditiveExpression	dp -> namebuf + dsize		8512170	0		+			
ANR	8512348	PtrMemberAccess	dp -> namebuf		8512170	0					
ANR	8512349	Identifier	dp		8512170	0					
ANR	8512350	Identifier	namebuf		8512170	1					
ANR	8512351	Identifier	dsize		8512170	1					
ANR	8512352	Argument	infile		8512170	1					
ANR	8512353	Identifier	infile		8512170	0					
ANR	8512354	Argument	isize + 1		8512170	2					
ANR	8512355	AdditiveExpression	isize + 1		8512170	0		+			
ANR	8512356	Identifier	isize		8512170	0					
ANR	8512357	PrimaryExpression	1		8512170	1					
ANR	8512358	IfStatement	"if ( isdir ( dp , dp -> namebuf ) )"		8512170	1					
ANR	8512359	Condition	"isdir ( dp , dp -> namebuf )"	1666:16:51278:51299	8512170	0	True				
ANR	8512360	CallExpression	"isdir ( dp , dp -> namebuf )"		8512170	0					
ANR	8512361	Callee	isdir		8512170	0					
ANR	8512362	Identifier	isdir		8512170	0					
ANR	8512363	ArgumentList	dp		8512170	1					
ANR	8512364	Argument	dp		8512170	0					
ANR	8512365	Identifier	dp		8512170	0					
ANR	8512366	Argument	dp -> namebuf		8512170	1					
ANR	8512367	PtrMemberAccess	dp -> namebuf		8512170	0					
ANR	8512368	Identifier	dp		8512170	0					
ANR	8512369	Identifier	namebuf		8512170	1					
ANR	8512370	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%s: output file is a directory"" , dp -> namebuf )"	1667:15:51317:51412	8512170	1	True				
ANR	8512371	CallExpression	"display_log ( dp , USER_ERROR , ""%s: output file is a directory"" , dp -> namebuf )"		8512170	0					
ANR	8512372	Callee	display_log		8512170	0					
ANR	8512373	Identifier	display_log		8512170	0					
ANR	8512374	ArgumentList	dp		8512170	1					
ANR	8512375	Argument	dp		8512170	0					
ANR	8512376	Identifier	dp		8512170	0					
ANR	8512377	Argument	USER_ERROR		8512170	1					
ANR	8512378	Identifier	USER_ERROR		8512170	0					
ANR	8512379	Argument	"""%s: output file is a directory"""		8512170	2					
ANR	8512380	PrimaryExpression	"""%s: output file is a directory"""		8512170	0					
ANR	8512381	Argument	dp -> namebuf		8512170	3					
ANR	8512382	PtrMemberAccess	dp -> namebuf		8512170	0					
ANR	8512383	Identifier	dp		8512170	0					
ANR	8512384	Identifier	namebuf		8512170	1					
ANR	8512385	ElseStatement	else		8512170	0					
ANR	8512386	CompoundStatement		42:9:1198:1198	8512170	0					
ANR	8512387	ExpressionStatement	dp -> namebuf [ dsize ] = 0	1673:12:51463:51485	8512170	0	True				
ANR	8512388	AssignmentExpression	dp -> namebuf [ dsize ] = 0		8512170	0		=			
ANR	8512389	ArrayIndexing	dp -> namebuf [ dsize ]		8512170	0					
ANR	8512390	PtrMemberAccess	dp -> namebuf		8512170	0					
ANR	8512391	Identifier	dp		8512170	0					
ANR	8512392	Identifier	namebuf		8512170	1					
ANR	8512393	Identifier	dsize		8512170	1					
ANR	8512394	PrimaryExpression	0		8512170	1					
ANR	8512395	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%s%s: output file name too long"" , dp -> namebuf , infile )"	1674:12:51530:51631	8512170	1	True				
ANR	8512396	CallExpression	"display_log ( dp , USER_ERROR , ""%s%s: output file name too long"" , dp -> namebuf , infile )"		8512170	0					
ANR	8512397	Callee	display_log		8512170	0					
ANR	8512398	Identifier	display_log		8512170	0					
ANR	8512399	ArgumentList	dp		8512170	1					
ANR	8512400	Argument	dp		8512170	0					
ANR	8512401	Identifier	dp		8512170	0					
ANR	8512402	Argument	USER_ERROR		8512170	1					
ANR	8512403	Identifier	USER_ERROR		8512170	0					
ANR	8512404	Argument	"""%s%s: output file name too long"""		8512170	2					
ANR	8512405	PrimaryExpression	"""%s%s: output file name too long"""		8512170	0					
ANR	8512406	Argument	dp -> namebuf		8512170	3					
ANR	8512407	PtrMemberAccess	dp -> namebuf		8512170	0					
ANR	8512408	Identifier	dp		8512170	0					
ANR	8512409	Identifier	namebuf		8512170	1					
ANR	8512410	Argument	infile		8512170	4					
ANR	8512411	Identifier	infile		8512170	0					
ANR	8512412	ElseStatement	else		8512170	0					
ANR	8512413	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%s: output directory name too long"" , dir )"	1680:9:51673:51743	8512170	0	True				
ANR	8512414	CallExpression	"display_log ( dp , USER_ERROR , ""%s: output directory name too long"" , dir )"		8512170	0					
ANR	8512415	Callee	display_log		8512170	0					
ANR	8512416	Identifier	display_log		8512170	0					
ANR	8512417	ArgumentList	dp		8512170	1					
ANR	8512418	Argument	dp		8512170	0					
ANR	8512419	Identifier	dp		8512170	0					
ANR	8512420	Argument	USER_ERROR		8512170	1					
ANR	8512421	Identifier	USER_ERROR		8512170	0					
ANR	8512422	Argument	"""%s: output directory name too long"""		8512170	2					
ANR	8512423	PrimaryExpression	"""%s: output directory name too long"""		8512170	0					
ANR	8512424	Argument	dir		8512170	3					
ANR	8512425	Identifier	dir		8512170	0					
ANR	8512426	ReturnType	static void		8512170	1					
ANR	8512427	Identifier	makename		8512170	2					
ANR	8512428	ParameterList	"struct display * dp , const char * dir , const char * infile"		8512170	3					
ANR	8512429	Parameter	struct display * dp	1630:9:50193:50210	8512170	0	True				
ANR	8512430	ParameterType	struct display *		8512170	0					
ANR	8512431	Identifier	dp		8512170	1					
ANR	8512432	Parameter	const char * dir	1630:29:50213:50227	8512170	1	True				
ANR	8512433	ParameterType	const char *		8512170	0					
ANR	8512434	Identifier	dir		8512170	1					
ANR	8512435	Parameter	const char * infile	1630:46:50230:50247	8512170	2	True				
ANR	8512436	ParameterType	const char *		8512170	0					
ANR	8512437	Identifier	infile		8512170	1					
ANR	8512438	CFGEntryNode	ENTRY		8512170		True				
ANR	8512439	CFGExitNode	EXIT		8512170		True				
ANR	8512440	Symbol	NULL		8512170						
ANR	8512441	Symbol	USER_ERROR		8512170						
ANR	8512442	Symbol	INTERNAL_ERROR		8512170						
ANR	8512443	Symbol	infile		8512170						
ANR	8512444	Symbol	dp		8512170						
ANR	8512445	Symbol	dir		8512170						
ANR	8512446	Symbol	dp -> namebuf		8512170						
ANR	8512447	Symbol	* dp -> namebuf		8512170						
ANR	8512448	Symbol	istart		8512170						
ANR	8512449	Symbol	* dp		8512170						
ANR	8512450	Symbol	strlen		8512170						
ANR	8512451	Symbol	dsize		8512170						
ANR	8512452	Symbol	* infile		8512170						
ANR	8512453	Symbol	isize		8512170						
ANR	8512454	Symbol	* dsize		8512170						
ANR	8512455	Symbol	* * dp		8512170						
ANR	8512456	Symbol	isdir		8512170						
ANR	8512457	Symbol	* istart		8512170						
ANR	8512458	Function	display_warning	1685:0:51794:52065							
ANR	8512459	FunctionDef	"display_warning (png_structp pp , png_const_charp warning)"		8512458	0					
ANR	8512460	CompoundStatement		1687:0:51872:52065	8512458	0					
ANR	8512461	IdentifierDeclStatement	struct display * dp = get_dp ( pp ) ;	1688:3:51877:51908	8512458	0	True				
ANR	8512462	IdentifierDecl	* dp = get_dp ( pp )		8512458	0					
ANR	8512463	IdentifierDeclType	struct display *		8512458	0					
ANR	8512464	Identifier	dp		8512458	1					
ANR	8512465	AssignmentExpression	* dp = get_dp ( pp )		8512458	2		=			
ANR	8512466	Identifier	dp		8512458	0					
ANR	8512467	CallExpression	get_dp ( pp )		8512458	1					
ANR	8512468	Callee	get_dp		8512458	0					
ANR	8512469	Identifier	get_dp		8512458	0					
ANR	8512470	ArgumentList	pp		8512458	1					
ANR	8512471	Argument	pp		8512458	0					
ANR	8512472	Identifier	pp		8512458	0					
ANR	8512473	IfStatement	if ( ! dp -> no_warnings )		8512458	1					
ANR	8512474	Condition	! dp -> no_warnings	1691:7:51985:52000	8512458	0	True				
ANR	8512475	UnaryOperationExpression	! dp -> no_warnings		8512458	0					
ANR	8512476	UnaryOperator	!		8512458	0					
ANR	8512477	PtrMemberAccess	dp -> no_warnings		8512458	1					
ANR	8512478	Identifier	dp		8512458	0					
ANR	8512479	Identifier	no_warnings		8512458	1					
ANR	8512480	ExpressionStatement	"display_log ( get_dp ( pp ) , LIBPNG_WARNING , ""%s"" , warning )"	1692:6:52009:52063	8512458	1	True				
ANR	8512481	CallExpression	"display_log ( get_dp ( pp ) , LIBPNG_WARNING , ""%s"" , warning )"		8512458	0					
ANR	8512482	Callee	display_log		8512458	0					
ANR	8512483	Identifier	display_log		8512458	0					
ANR	8512484	ArgumentList	get_dp ( pp )		8512458	1					
ANR	8512485	Argument	get_dp ( pp )		8512458	0					
ANR	8512486	CallExpression	get_dp ( pp )		8512458	0					
ANR	8512487	Callee	get_dp		8512458	0					
ANR	8512488	Identifier	get_dp		8512458	0					
ANR	8512489	ArgumentList	pp		8512458	1					
ANR	8512490	Argument	pp		8512458	0					
ANR	8512491	Identifier	pp		8512458	0					
ANR	8512492	Argument	LIBPNG_WARNING		8512458	1					
ANR	8512493	Identifier	LIBPNG_WARNING		8512458	0					
ANR	8512494	Argument	"""%s"""		8512458	2					
ANR	8512495	PrimaryExpression	"""%s"""		8512458	0					
ANR	8512496	Argument	warning		8512458	3					
ANR	8512497	Identifier	warning		8512458	0					
ANR	8512498	ReturnType	static void PNGCBAPI		8512458	1					
ANR	8512499	Identifier	display_warning		8512458	2					
ANR	8512500	ParameterList	"png_structp pp , png_const_charp warning"		8512458	3					
ANR	8512501	Parameter	png_structp pp	1686:16:51831:51844	8512458	0	True				
ANR	8512502	ParameterType	png_structp		8512458	0					
ANR	8512503	Identifier	pp		8512458	1					
ANR	8512504	Parameter	png_const_charp warning	1686:32:51847:51869	8512458	1	True				
ANR	8512505	ParameterType	png_const_charp		8512458	0					
ANR	8512506	Identifier	warning		8512458	1					
ANR	8512507	CFGEntryNode	ENTRY		8512458		True				
ANR	8512508	CFGExitNode	EXIT		8512458		True				
ANR	8512509	Symbol	pp		8512458						
ANR	8512510	Symbol	* dp		8512458						
ANR	8512511	Symbol	dp -> no_warnings		8512458						
ANR	8512512	Symbol	LIBPNG_WARNING		8512458						
ANR	8512513	Symbol	warning		8512458						
ANR	8512514	Symbol	dp		8512458						
ANR	8512515	Symbol	get_dp		8512458						
ANR	8512516	Function	display_error	1695:0:52068:52228							
ANR	8512517	FunctionDef	"display_error (png_structp pp , png_const_charp error)"		8512516	0					
ANR	8512518	CompoundStatement		1697:0:52142:52228	8512516	0					
ANR	8512519	IdentifierDeclStatement	struct display * dp = get_dp ( pp ) ;	1698:3:52147:52178	8512516	0	True				
ANR	8512520	IdentifierDecl	* dp = get_dp ( pp )		8512516	0					
ANR	8512521	IdentifierDeclType	struct display *		8512516	0					
ANR	8512522	Identifier	dp		8512516	1					
ANR	8512523	AssignmentExpression	* dp = get_dp ( pp )		8512516	2		=			
ANR	8512524	Identifier	dp		8512516	0					
ANR	8512525	CallExpression	get_dp ( pp )		8512516	1					
ANR	8512526	Callee	get_dp		8512516	0					
ANR	8512527	Identifier	get_dp		8512516	0					
ANR	8512528	ArgumentList	pp		8512516	1					
ANR	8512529	Argument	pp		8512516	0					
ANR	8512530	Identifier	pp		8512516	0					
ANR	8512531	ExpressionStatement	"display_log ( dp , LIBPNG_ERROR , ""%s"" , error )"	1700:3:52184:52226	8512516	1	True				
ANR	8512532	CallExpression	"display_log ( dp , LIBPNG_ERROR , ""%s"" , error )"		8512516	0					
ANR	8512533	Callee	display_log		8512516	0					
ANR	8512534	Identifier	display_log		8512516	0					
ANR	8512535	ArgumentList	dp		8512516	1					
ANR	8512536	Argument	dp		8512516	0					
ANR	8512537	Identifier	dp		8512516	0					
ANR	8512538	Argument	LIBPNG_ERROR		8512516	1					
ANR	8512539	Identifier	LIBPNG_ERROR		8512516	0					
ANR	8512540	Argument	"""%s"""		8512516	2					
ANR	8512541	PrimaryExpression	"""%s"""		8512516	0					
ANR	8512542	Argument	error		8512516	3					
ANR	8512543	Identifier	error		8512516	0					
ANR	8512544	ReturnType	static void PNGCBAPI		8512516	1					
ANR	8512545	Identifier	display_error		8512516	2					
ANR	8512546	ParameterList	"png_structp pp , png_const_charp error"		8512516	3					
ANR	8512547	Parameter	png_structp pp	1696:14:52103:52116	8512516	0	True				
ANR	8512548	ParameterType	png_structp		8512516	0					
ANR	8512549	Identifier	pp		8512516	1					
ANR	8512550	Parameter	png_const_charp error	1696:30:52119:52139	8512516	1	True				
ANR	8512551	ParameterType	png_const_charp		8512516	0					
ANR	8512552	Identifier	error		8512516	1					
ANR	8512553	CFGEntryNode	ENTRY		8512516		True				
ANR	8512554	CFGExitNode	EXIT		8512516		True				
ANR	8512555	Symbol	pp		8512516						
ANR	8512556	Symbol	LIBPNG_ERROR		8512516						
ANR	8512557	Symbol	error		8512516						
ANR	8512558	Symbol	dp		8512516						
ANR	8512559	Symbol	get_dp		8512516						
ANR	8512560	Function	display_start_read	1703:0:52231:52666							
ANR	8512561	FunctionDef	"display_start_read (struct display * dp , const char * filename)"		8512560	0					
ANR	8512562	CompoundStatement		1705:0:52304:52666	8512560	0					
ANR	8512563	IfStatement	if ( filename != NULL )		8512560	0					
ANR	8512564	Condition	filename != NULL	1706:7:52313:52328	8512560	0	True				
ANR	8512565	EqualityExpression	filename != NULL		8512560	0		!=			
ANR	8512566	Identifier	filename		8512560	0					
ANR	8512567	Identifier	NULL		8512560	1					
ANR	8512568	CompoundStatement		3:3:29:29	8512560	1					
ANR	8512569	ExpressionStatement	dp -> filename = filename	1708:6:52342:52365	8512560	0	True				
ANR	8512570	AssignmentExpression	dp -> filename = filename		8512560	0		=			
ANR	8512571	PtrMemberAccess	dp -> filename		8512560	0					
ANR	8512572	Identifier	dp		8512560	0					
ANR	8512573	Identifier	filename		8512560	1					
ANR	8512574	Identifier	filename		8512560	1					
ANR	8512575	ExpressionStatement	"dp -> fp = fopen ( filename , ""rb"" )"	1709:6:52373:52403	8512560	1	True				
ANR	8512576	AssignmentExpression	"dp -> fp = fopen ( filename , ""rb"" )"		8512560	0		=			
ANR	8512577	PtrMemberAccess	dp -> fp		8512560	0					
ANR	8512578	Identifier	dp		8512560	0					
ANR	8512579	Identifier	fp		8512560	1					
ANR	8512580	CallExpression	"fopen ( filename , ""rb"" )"		8512560	1					
ANR	8512581	Callee	fopen		8512560	0					
ANR	8512582	Identifier	fopen		8512560	0					
ANR	8512583	ArgumentList	filename		8512560	1					
ANR	8512584	Argument	filename		8512560	0					
ANR	8512585	Identifier	filename		8512560	0					
ANR	8512586	Argument	"""rb"""		8512560	1					
ANR	8512587	PrimaryExpression	"""rb"""		8512560	0					
ANR	8512588	ElseStatement	else		8512560	0					
ANR	8512589	CompoundStatement		9:3:117:117	8512560	0					
ANR	8512590	ExpressionStatement	"dp -> filename = ""<stdin>"""	1714:6:52430:52454	8512560	0	True				
ANR	8512591	AssignmentExpression	"dp -> filename = ""<stdin>"""		8512560	0		=			
ANR	8512592	PtrMemberAccess	dp -> filename		8512560	0					
ANR	8512593	Identifier	dp		8512560	0					
ANR	8512594	Identifier	filename		8512560	1					
ANR	8512595	PrimaryExpression	"""<stdin>"""		8512560	1					
ANR	8512596	ExpressionStatement	dp -> fp = stdin	1715:6:52462:52476	8512560	1	True				
ANR	8512597	AssignmentExpression	dp -> fp = stdin		8512560	0		=			
ANR	8512598	PtrMemberAccess	dp -> fp		8512560	0					
ANR	8512599	Identifier	dp		8512560	0					
ANR	8512600	Identifier	fp		8512560	1					
ANR	8512601	Identifier	stdin		8512560	1					
ANR	8512602	ExpressionStatement	dp -> w = dp -> h = 0U	1718:3:52487:52505	8512560	1	True				
ANR	8512603	AssignmentExpression	dp -> w = dp -> h = 0U		8512560	0		=			
ANR	8512604	PtrMemberAccess	dp -> w		8512560	0					
ANR	8512605	Identifier	dp		8512560	0					
ANR	8512606	Identifier	w		8512560	1					
ANR	8512607	AssignmentExpression	dp -> h = 0U		8512560	1		=			
ANR	8512608	PtrMemberAccess	dp -> h		8512560	0					
ANR	8512609	Identifier	dp		8512560	0					
ANR	8512610	Identifier	h		8512560	1					
ANR	8512611	PrimaryExpression	0U		8512560	1					
ANR	8512612	ExpressionStatement	dp -> bpp = 0U	1719:3:52510:52522	8512560	2	True				
ANR	8512613	AssignmentExpression	dp -> bpp = 0U		8512560	0		=			
ANR	8512614	PtrMemberAccess	dp -> bpp		8512560	0					
ANR	8512615	Identifier	dp		8512560	0					
ANR	8512616	Identifier	bpp		8512560	1					
ANR	8512617	PrimaryExpression	0U		8512560	1					
ANR	8512618	ExpressionStatement	dp -> size = 0U	1720:3:52527:52540	8512560	3	True				
ANR	8512619	AssignmentExpression	dp -> size = 0U		8512560	0		=			
ANR	8512620	PtrMemberAccess	dp -> size		8512560	0					
ANR	8512621	Identifier	dp		8512560	0					
ANR	8512622	Identifier	size		8512560	1					
ANR	8512623	PrimaryExpression	0U		8512560	1					
ANR	8512624	ExpressionStatement	dp -> read_size = 0U	1721:3:52545:52563	8512560	4	True				
ANR	8512625	AssignmentExpression	dp -> read_size = 0U		8512560	0		=			
ANR	8512626	PtrMemberAccess	dp -> read_size		8512560	0					
ANR	8512627	Identifier	dp		8512560	0					
ANR	8512628	Identifier	read_size		8512560	1					
ANR	8512629	PrimaryExpression	0U		8512560	1					
ANR	8512630	IfStatement	if ( dp -> fp == NULL )		8512560	5					
ANR	8512631	Condition	dp -> fp == NULL	1723:7:52573:52586	8512560	0	True				
ANR	8512632	EqualityExpression	dp -> fp == NULL		8512560	0		==			
ANR	8512633	PtrMemberAccess	dp -> fp		8512560	0					
ANR	8512634	Identifier	dp		8512560	0					
ANR	8512635	Identifier	fp		8512560	1					
ANR	8512636	Identifier	NULL		8512560	1					
ANR	8512637	ExpressionStatement	"display_log ( dp , USER_ERROR , ""file open failed (%s)"" , strerror ( errno ) )"	1724:6:52595:52664	8512560	1	True				
ANR	8512638	CallExpression	"display_log ( dp , USER_ERROR , ""file open failed (%s)"" , strerror ( errno ) )"		8512560	0					
ANR	8512639	Callee	display_log		8512560	0					
ANR	8512640	Identifier	display_log		8512560	0					
ANR	8512641	ArgumentList	dp		8512560	1					
ANR	8512642	Argument	dp		8512560	0					
ANR	8512643	Identifier	dp		8512560	0					
ANR	8512644	Argument	USER_ERROR		8512560	1					
ANR	8512645	Identifier	USER_ERROR		8512560	0					
ANR	8512646	Argument	"""file open failed (%s)"""		8512560	2					
ANR	8512647	PrimaryExpression	"""file open failed (%s)"""		8512560	0					
ANR	8512648	Argument	strerror ( errno )		8512560	3					
ANR	8512649	CallExpression	strerror ( errno )		8512560	0					
ANR	8512650	Callee	strerror		8512560	0					
ANR	8512651	Identifier	strerror		8512560	0					
ANR	8512652	ArgumentList	errno		8512560	1					
ANR	8512653	Argument	errno		8512560	0					
ANR	8512654	Identifier	errno		8512560	0					
ANR	8512655	ReturnType	static void		8512560	1					
ANR	8512656	Identifier	display_start_read		8512560	2					
ANR	8512657	ParameterList	"struct display * dp , const char * filename"		8512560	3					
ANR	8512658	Parameter	struct display * dp	1704:19:52262:52279	8512560	0	True				
ANR	8512659	ParameterType	struct display *		8512560	0					
ANR	8512660	Identifier	dp		8512560	1					
ANR	8512661	Parameter	const char * filename	1704:39:52282:52301	8512560	1	True				
ANR	8512662	ParameterType	const char *		8512560	0					
ANR	8512663	Identifier	filename		8512560	1					
ANR	8512664	CFGEntryNode	ENTRY		8512560		True				
ANR	8512665	CFGExitNode	EXIT		8512560		True				
ANR	8512666	Symbol	fopen		8512560						
ANR	8512667	Symbol	stdin		8512560						
ANR	8512668	Symbol	errno		8512560						
ANR	8512669	Symbol	NULL		8512560						
ANR	8512670	Symbol	dp -> fp		8512560						
ANR	8512671	Symbol	dp -> read_size		8512560						
ANR	8512672	Symbol	USER_ERROR		8512560						
ANR	8512673	Symbol	dp -> filename		8512560						
ANR	8512674	Symbol	dp -> h		8512560						
ANR	8512675	Symbol	dp		8512560						
ANR	8512676	Symbol	dp -> bpp		8512560						
ANR	8512677	Symbol	strerror		8512560						
ANR	8512678	Symbol	* dp		8512560						
ANR	8512679	Symbol	filename		8512560						
ANR	8512680	Symbol	dp -> size		8512560						
ANR	8512681	Symbol	dp -> w		8512560						
ANR	8512682	Function	read_function	1727:0:52669:53096							
ANR	8512683	FunctionDef	"read_function (png_structp pp , png_bytep data , png_size_t size)"		8512682	0					
ANR	8512684	CompoundStatement		1729:0:52753:53096	8512682	0					
ANR	8512685	IdentifierDeclStatement	struct display * dp = get_dp ( pp ) ;	1730:3:52758:52789	8512682	0	True				
ANR	8512686	IdentifierDecl	* dp = get_dp ( pp )		8512682	0					
ANR	8512687	IdentifierDeclType	struct display *		8512682	0					
ANR	8512688	Identifier	dp		8512682	1					
ANR	8512689	AssignmentExpression	* dp = get_dp ( pp )		8512682	2		=			
ANR	8512690	Identifier	dp		8512682	0					
ANR	8512691	CallExpression	get_dp ( pp )		8512682	1					
ANR	8512692	Callee	get_dp		8512682	0					
ANR	8512693	Identifier	get_dp		8512682	0					
ANR	8512694	ArgumentList	pp		8512682	1					
ANR	8512695	Argument	pp		8512682	0					
ANR	8512696	Identifier	pp		8512682	0					
ANR	8512697	IfStatement	"if ( size == 0U || fread ( data , size , 1U , dp -> fp ) == 1U )"		8512682	1					
ANR	8512698	Condition	"size == 0U || fread ( data , size , 1U , dp -> fp ) == 1U"	1732:7:52799:52847	8512682	0	True				
ANR	8512699	OrExpression	"size == 0U || fread ( data , size , 1U , dp -> fp ) == 1U"		8512682	0		||			
ANR	8512700	EqualityExpression	size == 0U		8512682	0		==			
ANR	8512701	Identifier	size		8512682	0					
ANR	8512702	PrimaryExpression	0U		8512682	1					
ANR	8512703	EqualityExpression	"fread ( data , size , 1U , dp -> fp ) == 1U"		8512682	1		==			
ANR	8512704	CallExpression	"fread ( data , size , 1U , dp -> fp )"		8512682	0					
ANR	8512705	Callee	fread		8512682	0					
ANR	8512706	Identifier	fread		8512682	0					
ANR	8512707	ArgumentList	data		8512682	1					
ANR	8512708	Argument	data		8512682	0					
ANR	8512709	Identifier	data		8512682	0					
ANR	8512710	Argument	size		8512682	1					
ANR	8512711	Identifier	size		8512682	0					
ANR	8512712	Argument	1U		8512682	2					
ANR	8512713	PrimaryExpression	1U		8512682	0					
ANR	8512714	Argument	dp -> fp		8512682	3					
ANR	8512715	PtrMemberAccess	dp -> fp		8512682	0					
ANR	8512716	Identifier	dp		8512682	0					
ANR	8512717	Identifier	fp		8512682	1					
ANR	8512718	PrimaryExpression	1U		8512682	1					
ANR	8512719	ExpressionStatement	dp -> read_size += size	1733:6:52856:52877	8512682	1	True				
ANR	8512720	AssignmentExpression	dp -> read_size += size		8512682	0		+=			
ANR	8512721	PtrMemberAccess	dp -> read_size		8512682	0					
ANR	8512722	Identifier	dp		8512682	0					
ANR	8512723	Identifier	read_size		8512682	1					
ANR	8512724	Identifier	size		8512682	1					
ANR	8512725	ElseStatement	else		8512682	0					
ANR	8512726	CompoundStatement		8:3:137:137	8512682	0					
ANR	8512727	IfStatement	if ( feof ( dp -> fp ) )		8512682	0					
ANR	8512728	Condition	feof ( dp -> fp )	1737:10:52903:52914	8512682	0	True				
ANR	8512729	CallExpression	feof ( dp -> fp )		8512682	0					
ANR	8512730	Callee	feof		8512682	0					
ANR	8512731	Identifier	feof		8512682	0					
ANR	8512732	ArgumentList	dp -> fp		8512682	1					
ANR	8512733	Argument	dp -> fp		8512682	0					
ANR	8512734	PtrMemberAccess	dp -> fp		8512682	0					
ANR	8512735	Identifier	dp		8512682	0					
ANR	8512736	Identifier	fp		8512682	1					
ANR	8512737	ExpressionStatement	"display_log ( dp , LIBPNG_ERROR , ""PNG file truncated"" )"	1738:9:52926:52977	8512682	1	True				
ANR	8512738	CallExpression	"display_log ( dp , LIBPNG_ERROR , ""PNG file truncated"" )"		8512682	0					
ANR	8512739	Callee	display_log		8512682	0					
ANR	8512740	Identifier	display_log		8512682	0					
ANR	8512741	ArgumentList	dp		8512682	1					
ANR	8512742	Argument	dp		8512682	0					
ANR	8512743	Identifier	dp		8512682	0					
ANR	8512744	Argument	LIBPNG_ERROR		8512682	1					
ANR	8512745	Identifier	LIBPNG_ERROR		8512682	0					
ANR	8512746	Argument	"""PNG file truncated"""		8512682	2					
ANR	8512747	PrimaryExpression	"""PNG file truncated"""		8512682	0					
ANR	8512748	ElseStatement	else		8512682	0					
ANR	8512749	ExpressionStatement	"display_log ( dp , LIBPNG_ERROR , ""PNG file read failed (%s)"" , strerror ( errno ) )"	1740:9:52999:53089	8512682	0	True				
ANR	8512750	CallExpression	"display_log ( dp , LIBPNG_ERROR , ""PNG file read failed (%s)"" , strerror ( errno ) )"		8512682	0					
ANR	8512751	Callee	display_log		8512682	0					
ANR	8512752	Identifier	display_log		8512682	0					
ANR	8512753	ArgumentList	dp		8512682	1					
ANR	8512754	Argument	dp		8512682	0					
ANR	8512755	Identifier	dp		8512682	0					
ANR	8512756	Argument	LIBPNG_ERROR		8512682	1					
ANR	8512757	Identifier	LIBPNG_ERROR		8512682	0					
ANR	8512758	Argument	"""PNG file read failed (%s)"""		8512682	2					
ANR	8512759	PrimaryExpression	"""PNG file read failed (%s)"""		8512682	0					
ANR	8512760	Argument	strerror ( errno )		8512682	3					
ANR	8512761	CallExpression	strerror ( errno )		8512682	0					
ANR	8512762	Callee	strerror		8512682	0					
ANR	8512763	Identifier	strerror		8512682	0					
ANR	8512764	ArgumentList	errno		8512682	1					
ANR	8512765	Argument	errno		8512682	0					
ANR	8512766	Identifier	errno		8512682	0					
ANR	8512767	ReturnType	static void PNGCBAPI		8512682	1					
ANR	8512768	Identifier	read_function		8512682	2					
ANR	8512769	ParameterList	"png_structp pp , png_bytep data , png_size_t size"		8512682	3					
ANR	8512770	Parameter	png_structp pp	1728:14:52704:52717	8512682	0	True				
ANR	8512771	ParameterType	png_structp		8512682	0					
ANR	8512772	Identifier	pp		8512682	1					
ANR	8512773	Parameter	png_bytep data	1728:30:52720:52733	8512682	1	True				
ANR	8512774	ParameterType	png_bytep		8512682	0					
ANR	8512775	Identifier	data		8512682	1					
ANR	8512776	Parameter	png_size_t size	1728:46:52736:52750	8512682	2	True				
ANR	8512777	ParameterType	png_size_t		8512682	0					
ANR	8512778	Identifier	size		8512682	1					
ANR	8512779	CFGEntryNode	ENTRY		8512682		True				
ANR	8512780	CFGExitNode	EXIT		8512682		True				
ANR	8512781	Symbol	pp		8512682						
ANR	8512782	Symbol	errno		8512682						
ANR	8512783	Symbol	data		8512682						
ANR	8512784	Symbol	dp -> fp		8512682						
ANR	8512785	Symbol	dp -> read_size		8512682						
ANR	8512786	Symbol	LIBPNG_ERROR		8512682						
ANR	8512787	Symbol	dp		8512682						
ANR	8512788	Symbol	fread		8512682						
ANR	8512789	Symbol	strerror		8512682						
ANR	8512790	Symbol	* dp		8512682						
ANR	8512791	Symbol	size		8512682						
ANR	8512792	Symbol	feof		8512682						
ANR	8512793	Symbol	get_dp		8512682						
ANR	8512794	Function	read_png	1745:0:53099:56604							
ANR	8512795	FunctionDef	"read_png (struct display * dp , const char * filename)"		8512794	0					
ANR	8512796	CompoundStatement		1747:0:53162:56604	8512794	0					
ANR	8512797	ExpressionStatement	display_clean_read ( dp )	1748:3:53167:53189	8512794	0	True				
ANR	8512798	CallExpression	display_clean_read ( dp )		8512794	0					
ANR	8512799	Callee	display_clean_read		8512794	0					
ANR	8512800	Identifier	display_clean_read		8512794	0					
ANR	8512801	ArgumentList	dp		8512794	1					
ANR	8512802	Argument	dp		8512794	0					
ANR	8512803	Identifier	dp		8512794	0					
ANR	8512804	ExpressionStatement	"display_start_read ( dp , filename )"	1749:3:53207:53239	8512794	1	True				
ANR	8512805	CallExpression	"display_start_read ( dp , filename )"		8512794	0					
ANR	8512806	Callee	display_start_read		8512794	0					
ANR	8512807	Identifier	display_start_read		8512794	0					
ANR	8512808	ArgumentList	dp		8512794	1					
ANR	8512809	Argument	dp		8512794	0					
ANR	8512810	Identifier	dp		8512794	0					
ANR	8512811	Argument	filename		8512794	1					
ANR	8512812	Identifier	filename		8512794	0					
ANR	8512813	ExpressionStatement	"dp -> read_pp = png_create_read_struct ( PNG_LIBPNG_VER_STRING , dp , display_error , display_warning )"	1751:3:53245:53346	8512794	2	True				
ANR	8512814	AssignmentExpression	"dp -> read_pp = png_create_read_struct ( PNG_LIBPNG_VER_STRING , dp , display_error , display_warning )"		8512794	0		=			
ANR	8512815	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512816	Identifier	dp		8512794	0					
ANR	8512817	Identifier	read_pp		8512794	1					
ANR	8512818	CallExpression	"png_create_read_struct ( PNG_LIBPNG_VER_STRING , dp , display_error , display_warning )"		8512794	1					
ANR	8512819	Callee	png_create_read_struct		8512794	0					
ANR	8512820	Identifier	png_create_read_struct		8512794	0					
ANR	8512821	ArgumentList	PNG_LIBPNG_VER_STRING		8512794	1					
ANR	8512822	Argument	PNG_LIBPNG_VER_STRING		8512794	0					
ANR	8512823	Identifier	PNG_LIBPNG_VER_STRING		8512794	0					
ANR	8512824	Argument	dp		8512794	1					
ANR	8512825	Identifier	dp		8512794	0					
ANR	8512826	Argument	display_error		8512794	2					
ANR	8512827	Identifier	display_error		8512794	0					
ANR	8512828	Argument	display_warning		8512794	3					
ANR	8512829	Identifier	display_warning		8512794	0					
ANR	8512830	IfStatement	if ( dp -> read_pp == NULL )		8512794	3					
ANR	8512831	Condition	dp -> read_pp == NULL	1753:7:53355:53373	8512794	0	True				
ANR	8512832	EqualityExpression	dp -> read_pp == NULL		8512794	0		==			
ANR	8512833	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512834	Identifier	dp		8512794	0					
ANR	8512835	Identifier	read_pp		8512794	1					
ANR	8512836	Identifier	NULL		8512794	1					
ANR	8512837	ExpressionStatement	"display_log ( dp , LIBPNG_ERROR , ""failed to create read struct"" )"	1754:6:53382:53443	8512794	1	True				
ANR	8512838	CallExpression	"display_log ( dp , LIBPNG_ERROR , ""failed to create read struct"" )"		8512794	0					
ANR	8512839	Callee	display_log		8512794	0					
ANR	8512840	Identifier	display_log		8512794	0					
ANR	8512841	ArgumentList	dp		8512794	1					
ANR	8512842	Argument	dp		8512794	0					
ANR	8512843	Identifier	dp		8512794	0					
ANR	8512844	Argument	LIBPNG_ERROR		8512794	1					
ANR	8512845	Identifier	LIBPNG_ERROR		8512794	0					
ANR	8512846	Argument	"""failed to create read struct"""		8512794	2					
ANR	8512847	PrimaryExpression	"""failed to create read struct"""		8512794	0					
ANR	8512848	IdentifierDeclStatement	"ifdef PNG_BENIGN_ERRORS_SUPPORTED png_set_benign_errors ( dp -> read_pp , 1 ) ;"	1756:3:53449:53537	8512794	4	True				
ANR	8512849	IdentifierDecl	"png_set_benign_errors ( dp -> read_pp , 1 )"		8512794	0					
ANR	8512850	IdentifierDeclType	ifdef PNG_BENIGN_ERRORS_SUPPORTED		8512794	0					
ANR	8512851	Identifier	png_set_benign_errors		8512794	1					
ANR	8512852	Expression	"dp -> read_pp , 1"		8512794	2					
ANR	8512853	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512854	Identifier	dp		8512794	0					
ANR	8512855	Identifier	read_pp		8512794	1					
ANR	8512856	PrimaryExpression	1		8512794	1					
ANR	8512857	Statement	endif	1758:3:53542:53546	8512794	5	True				
ANR	8512858	Statement	ifdef	1760:3:53572:53576	8512794	6	True				
ANR	8512859	Statement	FIX_INDEX	1760:9:53578:53586	8512794	7	True				
ANR	8512860	IfStatement	if ( ( dp -> options & FIX_INDEX ) != 0 )		8512794	8					
ANR	8512861	Condition	( dp -> options & FIX_INDEX ) != 0	1761:10:53598:53627	8512794	0	True				
ANR	8512862	EqualityExpression	( dp -> options & FIX_INDEX ) != 0		8512794	0		!=			
ANR	8512863	BitAndExpression	dp -> options & FIX_INDEX		8512794	0		&			
ANR	8512864	PtrMemberAccess	dp -> options		8512794	0					
ANR	8512865	Identifier	dp		8512794	0					
ANR	8512866	Identifier	options		8512794	1					
ANR	8512867	Identifier	FIX_INDEX		8512794	1					
ANR	8512868	PrimaryExpression	0		8512794	1					
ANR	8512869	ExpressionStatement	"png_set_check_for_invalid_index ( dp -> read_pp , 1 )"	1762:9:53639:53704	8512794	1	True				
ANR	8512870	CallExpression	"png_set_check_for_invalid_index ( dp -> read_pp , 1 )"		8512794	0					
ANR	8512871	Callee	png_set_check_for_invalid_index		8512794	0					
ANR	8512872	Identifier	png_set_check_for_invalid_index		8512794	0					
ANR	8512873	ArgumentList	dp -> read_pp		8512794	1					
ANR	8512874	Argument	dp -> read_pp		8512794	0					
ANR	8512875	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512876	Identifier	dp		8512794	0					
ANR	8512877	Identifier	read_pp		8512794	1					
ANR	8512878	Argument	1		8512794	1					
ANR	8512879	PrimaryExpression	1		8512794	0					
ANR	8512880	ElseStatement	else		8512794	0					
ANR	8512881	Statement	endif	1765:6:53751:53755	8512794	0	True				
ANR	8512882	Statement	ifdef	1763:6:53712:53716	8512794	9	True				
ANR	8512883	Statement	IGNORE_INDEX	1763:12:53718:53729	8512794	10	True				
ANR	8512884	Statement	endif	1766:3:53779:53783	8512794	11	True				
ANR	8512885	Statement	ifdef	1767:3:53804:53808	8512794	12	True				
ANR	8512886	Statement	IGNORE_INDEX	1767:9:53810:53821	8512794	13	True				
ANR	8512887	IfStatement	if ( ( dp -> options & IGNORE_INDEX ) != 0 )		8512794	14					
ANR	8512888	Condition	( dp -> options & IGNORE_INDEX ) != 0	1768:10:53833:53865	8512794	0	True				
ANR	8512889	EqualityExpression	( dp -> options & IGNORE_INDEX ) != 0		8512794	0		!=			
ANR	8512890	BitAndExpression	dp -> options & IGNORE_INDEX		8512794	0		&			
ANR	8512891	PtrMemberAccess	dp -> options		8512794	0					
ANR	8512892	Identifier	dp		8512794	0					
ANR	8512893	Identifier	options		8512794	1					
ANR	8512894	Identifier	IGNORE_INDEX		8512794	1					
ANR	8512895	PrimaryExpression	0		8512794	1					
ANR	8512896	ExpressionStatement	"png_set_check_for_invalid_index ( dp -> read_pp , - 1 )"	1769:9:53893:53959	8512794	1	True				
ANR	8512897	CallExpression	"png_set_check_for_invalid_index ( dp -> read_pp , - 1 )"		8512794	0					
ANR	8512898	Callee	png_set_check_for_invalid_index		8512794	0					
ANR	8512899	Identifier	png_set_check_for_invalid_index		8512794	0					
ANR	8512900	ArgumentList	dp -> read_pp		8512794	1					
ANR	8512901	Argument	dp -> read_pp		8512794	0					
ANR	8512902	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512903	Identifier	dp		8512794	0					
ANR	8512904	Identifier	read_pp		8512794	1					
ANR	8512905	Argument	- 1		8512794	1					
ANR	8512906	UnaryOperationExpression	- 1		8512794	0					
ANR	8512907	UnaryOperator	-		8512794	0					
ANR	8512908	PrimaryExpression	1		8512794	1					
ANR	8512909	Statement	endif	1770:3:53964:53968	8512794	15	True				
ANR	8512910	ExpressionStatement	dp -> ip = png_create_info_struct ( dp -> read_pp )	1775:3:54109:54153	8512794	16	True				
ANR	8512911	AssignmentExpression	dp -> ip = png_create_info_struct ( dp -> read_pp )		8512794	0		=			
ANR	8512912	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8512913	Identifier	dp		8512794	0					
ANR	8512914	Identifier	ip		8512794	1					
ANR	8512915	CallExpression	png_create_info_struct ( dp -> read_pp )		8512794	1					
ANR	8512916	Callee	png_create_info_struct		8512794	0					
ANR	8512917	Identifier	png_create_info_struct		8512794	0					
ANR	8512918	ArgumentList	dp -> read_pp		8512794	1					
ANR	8512919	Argument	dp -> read_pp		8512794	0					
ANR	8512920	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512921	Identifier	dp		8512794	0					
ANR	8512922	Identifier	read_pp		8512794	1					
ANR	8512923	IfStatement	if ( dp -> ip == NULL )		8512794	17					
ANR	8512924	Condition	dp -> ip == NULL	1776:7:54162:54175	8512794	0	True				
ANR	8512925	EqualityExpression	dp -> ip == NULL		8512794	0		==			
ANR	8512926	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8512927	Identifier	dp		8512794	0					
ANR	8512928	Identifier	ip		8512794	1					
ANR	8512929	Identifier	NULL		8512794	1					
ANR	8512930	ExpressionStatement	"png_error ( dp -> read_pp , ""failed to create info struct"" )"	1777:6:54184:54238	8512794	1	True				
ANR	8512931	CallExpression	"png_error ( dp -> read_pp , ""failed to create info struct"" )"		8512794	0					
ANR	8512932	Callee	png_error		8512794	0					
ANR	8512933	Identifier	png_error		8512794	0					
ANR	8512934	ArgumentList	dp -> read_pp		8512794	1					
ANR	8512935	Argument	dp -> read_pp		8512794	0					
ANR	8512936	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512937	Identifier	dp		8512794	0					
ANR	8512938	Identifier	read_pp		8512794	1					
ANR	8512939	Argument	"""failed to create info struct"""		8512794	1					
ANR	8512940	PrimaryExpression	"""failed to create info struct"""		8512794	0					
ANR	8512941	ExpressionStatement	"png_set_read_fn ( dp -> read_pp , dp , read_function )"	1780:3:54273:54320	8512794	18	True				
ANR	8512942	CallExpression	"png_set_read_fn ( dp -> read_pp , dp , read_function )"		8512794	0					
ANR	8512943	Callee	png_set_read_fn		8512794	0					
ANR	8512944	Identifier	png_set_read_fn		8512794	0					
ANR	8512945	ArgumentList	dp -> read_pp		8512794	1					
ANR	8512946	Argument	dp -> read_pp		8512794	0					
ANR	8512947	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512948	Identifier	dp		8512794	0					
ANR	8512949	Identifier	read_pp		8512794	1					
ANR	8512950	Argument	dp		8512794	1					
ANR	8512951	Identifier	dp		8512794	0					
ANR	8512952	Argument	read_function		8512794	2					
ANR	8512953	Identifier	read_function		8512794	0					
ANR	8512954	IdentifierDeclStatement	"ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED png_set_keep_unknown_chunks ( dp -> read_pp , PNG_HANDLE_CHUNK_ALWAYS , NULL , 0 ) ;"	1782:3:54326:54456	8512794	19	True				
ANR	8512955	IdentifierDecl	"png_set_keep_unknown_chunks ( dp -> read_pp , PNG_HANDLE_CHUNK_ALWAYS , NULL , 0 )"		8512794	0					
ANR	8512956	IdentifierDeclType	ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED		8512794	0					
ANR	8512957	Identifier	png_set_keep_unknown_chunks		8512794	1					
ANR	8512958	Expression	"dp -> read_pp , PNG_HANDLE_CHUNK_ALWAYS , NULL , 0"		8512794	2					
ANR	8512959	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512960	Identifier	dp		8512794	0					
ANR	8512961	Identifier	read_pp		8512794	1					
ANR	8512962	Expression	"PNG_HANDLE_CHUNK_ALWAYS , NULL , 0"		8512794	1					
ANR	8512963	Identifier	PNG_HANDLE_CHUNK_ALWAYS		8512794	0					
ANR	8512964	Expression	"NULL , 0"		8512794	1					
ANR	8512965	Identifier	NULL		8512794	0					
ANR	8512966	PrimaryExpression	0		8512794	1					
ANR	8512967	IdentifierDeclStatement	"endif ifdef PNG_SET_USER_LIMITS_SUPPORTED png_set_user_limits ( dp -> read_pp , 0x7fffffff , 0x7fffffff ) ;"	1785:3:54461:54636	8512794	20	True				
ANR	8512968	IdentifierDecl	"png_set_user_limits ( dp -> read_pp , 0x7fffffff , 0x7fffffff )"		8512794	0					
ANR	8512969	IdentifierDeclType	endif ifdef PNG_SET_USER_LIMITS_SUPPORTED		8512794	0					
ANR	8512970	Identifier	png_set_user_limits		8512794	1					
ANR	8512971	Expression	"dp -> read_pp , 0x7fffffff , 0x7fffffff"		8512794	2					
ANR	8512972	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512973	Identifier	dp		8512794	0					
ANR	8512974	Identifier	read_pp		8512794	1					
ANR	8512975	Expression	"0x7fffffff , 0x7fffffff"		8512794	1					
ANR	8512976	PrimaryExpression	0x7fffffff		8512794	0					
ANR	8512977	PrimaryExpression	0x7fffffff		8512794	1					
ANR	8512978	IdentifierDeclStatement	"endif start_timer ( dp , PNGCP_TIME_READ ) ;"	1790:3:54641:54732	8512794	21	True				
ANR	8512979	IdentifierDecl	"start_timer ( dp , PNGCP_TIME_READ )"		8512794	0					
ANR	8512980	IdentifierDeclType	endif		8512794	0					
ANR	8512981	Identifier	start_timer		8512794	1					
ANR	8512982	Expression	"dp , PNGCP_TIME_READ"		8512794	2					
ANR	8512983	Identifier	dp		8512794	0					
ANR	8512984	Identifier	PNGCP_TIME_READ		8512794	1					
ANR	8512985	ExpressionStatement	"png_read_png ( dp -> read_pp , dp -> ip , 0U , NULL )"	1794:3:54737:54804	8512794	22	True				
ANR	8512986	CallExpression	"png_read_png ( dp -> read_pp , dp -> ip , 0U , NULL )"		8512794	0					
ANR	8512987	Callee	png_read_png		8512794	0					
ANR	8512988	Identifier	png_read_png		8512794	0					
ANR	8512989	ArgumentList	dp -> read_pp		8512794	1					
ANR	8512990	Argument	dp -> read_pp		8512794	0					
ANR	8512991	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8512992	Identifier	dp		8512794	0					
ANR	8512993	Identifier	read_pp		8512794	1					
ANR	8512994	Argument	dp -> ip		8512794	1					
ANR	8512995	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8512996	Identifier	dp		8512794	0					
ANR	8512997	Identifier	ip		8512794	1					
ANR	8512998	Argument	0U		8512794	2					
ANR	8512999	PrimaryExpression	0U		8512794	0					
ANR	8513000	Argument	NULL		8512794	3					
ANR	8513001	Identifier	NULL		8512794	0					
ANR	8513002	ExpressionStatement	"end_timer ( dp , PNGCP_TIME_READ )"	1795:3:54809:54839	8512794	23	True				
ANR	8513003	CallExpression	"end_timer ( dp , PNGCP_TIME_READ )"		8512794	0					
ANR	8513004	Callee	end_timer		8512794	0					
ANR	8513005	Identifier	end_timer		8512794	0					
ANR	8513006	ArgumentList	dp		8512794	1					
ANR	8513007	Argument	dp		8512794	0					
ANR	8513008	Identifier	dp		8512794	0					
ANR	8513009	Argument	PNGCP_TIME_READ		8512794	1					
ANR	8513010	Identifier	PNGCP_TIME_READ		8512794	0					
ANR	8513011	ExpressionStatement	"dp -> w = png_get_image_width ( dp -> read_pp , dp -> ip )"	1796:3:54844:54892	8512794	24	True				
ANR	8513012	AssignmentExpression	"dp -> w = png_get_image_width ( dp -> read_pp , dp -> ip )"		8512794	0		=			
ANR	8513013	PtrMemberAccess	dp -> w		8512794	0					
ANR	8513014	Identifier	dp		8512794	0					
ANR	8513015	Identifier	w		8512794	1					
ANR	8513016	CallExpression	"png_get_image_width ( dp -> read_pp , dp -> ip )"		8512794	1					
ANR	8513017	Callee	png_get_image_width		8512794	0					
ANR	8513018	Identifier	png_get_image_width		8512794	0					
ANR	8513019	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513020	Argument	dp -> read_pp		8512794	0					
ANR	8513021	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513022	Identifier	dp		8512794	0					
ANR	8513023	Identifier	read_pp		8512794	1					
ANR	8513024	Argument	dp -> ip		8512794	1					
ANR	8513025	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8513026	Identifier	dp		8512794	0					
ANR	8513027	Identifier	ip		8512794	1					
ANR	8513028	ExpressionStatement	"dp -> h = png_get_image_height ( dp -> read_pp , dp -> ip )"	1797:3:54897:54946	8512794	25	True				
ANR	8513029	AssignmentExpression	"dp -> h = png_get_image_height ( dp -> read_pp , dp -> ip )"		8512794	0		=			
ANR	8513030	PtrMemberAccess	dp -> h		8512794	0					
ANR	8513031	Identifier	dp		8512794	0					
ANR	8513032	Identifier	h		8512794	1					
ANR	8513033	CallExpression	"png_get_image_height ( dp -> read_pp , dp -> ip )"		8512794	1					
ANR	8513034	Callee	png_get_image_height		8512794	0					
ANR	8513035	Identifier	png_get_image_height		8512794	0					
ANR	8513036	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513037	Argument	dp -> read_pp		8512794	0					
ANR	8513038	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513039	Identifier	dp		8512794	0					
ANR	8513040	Identifier	read_pp		8512794	1					
ANR	8513041	Argument	dp -> ip		8512794	1					
ANR	8513042	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8513043	Identifier	dp		8512794	0					
ANR	8513044	Identifier	ip		8512794	1					
ANR	8513045	ExpressionStatement	"dp -> ct = png_get_color_type ( dp -> read_pp , dp -> ip )"	1798:3:54951:54999	8512794	26	True				
ANR	8513046	AssignmentExpression	"dp -> ct = png_get_color_type ( dp -> read_pp , dp -> ip )"		8512794	0		=			
ANR	8513047	PtrMemberAccess	dp -> ct		8512794	0					
ANR	8513048	Identifier	dp		8512794	0					
ANR	8513049	Identifier	ct		8512794	1					
ANR	8513050	CallExpression	"png_get_color_type ( dp -> read_pp , dp -> ip )"		8512794	1					
ANR	8513051	Callee	png_get_color_type		8512794	0					
ANR	8513052	Identifier	png_get_color_type		8512794	0					
ANR	8513053	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513054	Argument	dp -> read_pp		8512794	0					
ANR	8513055	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513056	Identifier	dp		8512794	0					
ANR	8513057	Identifier	read_pp		8512794	1					
ANR	8513058	Argument	dp -> ip		8512794	1					
ANR	8513059	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8513060	Identifier	dp		8512794	0					
ANR	8513061	Identifier	ip		8512794	1					
ANR	8513062	ExpressionStatement	"dp -> bpp = png_get_bit_depth ( dp -> read_pp , dp -> ip ) * png_get_channels ( dp -> read_pp , dp -> ip )"	1799:3:55004:55105	8512794	27	True				
ANR	8513063	AssignmentExpression	"dp -> bpp = png_get_bit_depth ( dp -> read_pp , dp -> ip ) * png_get_channels ( dp -> read_pp , dp -> ip )"		8512794	0		=			
ANR	8513064	PtrMemberAccess	dp -> bpp		8512794	0					
ANR	8513065	Identifier	dp		8512794	0					
ANR	8513066	Identifier	bpp		8512794	1					
ANR	8513067	MultiplicativeExpression	"png_get_bit_depth ( dp -> read_pp , dp -> ip ) * png_get_channels ( dp -> read_pp , dp -> ip )"		8512794	1		*			
ANR	8513068	CallExpression	"png_get_bit_depth ( dp -> read_pp , dp -> ip )"		8512794	0					
ANR	8513069	Callee	png_get_bit_depth		8512794	0					
ANR	8513070	Identifier	png_get_bit_depth		8512794	0					
ANR	8513071	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513072	Argument	dp -> read_pp		8512794	0					
ANR	8513073	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513074	Identifier	dp		8512794	0					
ANR	8513075	Identifier	read_pp		8512794	1					
ANR	8513076	Argument	dp -> ip		8512794	1					
ANR	8513077	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8513078	Identifier	dp		8512794	0					
ANR	8513079	Identifier	ip		8512794	1					
ANR	8513080	CallExpression	"png_get_channels ( dp -> read_pp , dp -> ip )"		8512794	1					
ANR	8513081	Callee	png_get_channels		8512794	0					
ANR	8513082	Identifier	png_get_channels		8512794	0					
ANR	8513083	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513084	Argument	dp -> read_pp		8512794	0					
ANR	8513085	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513086	Identifier	dp		8512794	0					
ANR	8513087	Identifier	read_pp		8512794	1					
ANR	8513088	Argument	dp -> ip		8512794	1					
ANR	8513089	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8513090	Identifier	dp		8512794	0					
ANR	8513091	Identifier	ip		8512794	1					
ANR	8513092	CompoundStatement		60:6:2144:2203	8512794	28					
ANR	8513093	IdentifierDeclStatement	"png_alloc_size_t rb = png_get_rowbytes ( dp -> read_pp , dp -> ip ) ;"	1806:6:55307:55366	8512794	0	True				
ANR	8513094	IdentifierDecl	"rb = png_get_rowbytes ( dp -> read_pp , dp -> ip )"		8512794	0					
ANR	8513095	IdentifierDeclType	png_alloc_size_t		8512794	0					
ANR	8513096	Identifier	rb		8512794	1					
ANR	8513097	AssignmentExpression	"rb = png_get_rowbytes ( dp -> read_pp , dp -> ip )"		8512794	2		=			
ANR	8513098	Identifier	rb		8512794	0					
ANR	8513099	CallExpression	"png_get_rowbytes ( dp -> read_pp , dp -> ip )"		8512794	1					
ANR	8513100	Callee	png_get_rowbytes		8512794	0					
ANR	8513101	Identifier	png_get_rowbytes		8512794	0					
ANR	8513102	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513103	Argument	dp -> read_pp		8512794	0					
ANR	8513104	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513105	Identifier	dp		8512794	0					
ANR	8513106	Identifier	read_pp		8512794	1					
ANR	8513107	Argument	dp -> ip		8512794	1					
ANR	8513108	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8513109	Identifier	dp		8512794	0					
ANR	8513110	Identifier	ip		8512794	1					
ANR	8513111	IfStatement	if ( rb == 0 )		8512794	1					
ANR	8513112	Condition	rb == 0	1808:10:55379:55385	8512794	0	True				
ANR	8513113	EqualityExpression	rb == 0		8512794	0		==			
ANR	8513114	Identifier	rb		8512794	0					
ANR	8513115	PrimaryExpression	0		8512794	1					
ANR	8513116	ExpressionStatement	"png_error ( dp -> read_pp , ""invalid row byte count from libpng"" )"	1809:9:55397:55457	8512794	1	True				
ANR	8513117	CallExpression	"png_error ( dp -> read_pp , ""invalid row byte count from libpng"" )"		8512794	0					
ANR	8513118	Callee	png_error		8512794	0					
ANR	8513119	Identifier	png_error		8512794	0					
ANR	8513120	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513121	Argument	dp -> read_pp		8512794	0					
ANR	8513122	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513123	Identifier	dp		8512794	0					
ANR	8513124	Identifier	read_pp		8512794	1					
ANR	8513125	Argument	"""invalid row byte count from libpng"""		8512794	1					
ANR	8513126	PrimaryExpression	"""invalid row byte count from libpng"""		8512794	0					
ANR	8513127	IfStatement	if ( ( MAX_SIZE - dp -> h ) / rb < dp -> h )		8512794	2					
ANR	8513128	Condition	( MAX_SIZE - dp -> h ) / rb < dp -> h	1812:10:55510:55536	8512794	0	True				
ANR	8513129	RelationalExpression	( MAX_SIZE - dp -> h ) / rb < dp -> h		8512794	0		<			
ANR	8513130	MultiplicativeExpression	( MAX_SIZE - dp -> h ) / rb		8512794	0		/			
ANR	8513131	AdditiveExpression	MAX_SIZE - dp -> h		8512794	0		-			
ANR	8513132	Identifier	MAX_SIZE		8512794	0					
ANR	8513133	PtrMemberAccess	dp -> h		8512794	1					
ANR	8513134	Identifier	dp		8512794	0					
ANR	8513135	Identifier	h		8512794	1					
ANR	8513136	Identifier	rb		8512794	1					
ANR	8513137	PtrMemberAccess	dp -> h		8512794	1					
ANR	8513138	Identifier	dp		8512794	0					
ANR	8513139	Identifier	h		8512794	1					
ANR	8513140	ExpressionStatement	"png_error ( dp -> read_pp , ""image too large"" )"	1813:9:55548:55589	8512794	1	True				
ANR	8513141	CallExpression	"png_error ( dp -> read_pp , ""image too large"" )"		8512794	0					
ANR	8513142	Callee	png_error		8512794	0					
ANR	8513143	Identifier	png_error		8512794	0					
ANR	8513144	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513145	Argument	dp -> read_pp		8512794	0					
ANR	8513146	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513147	Identifier	dp		8512794	0					
ANR	8513148	Identifier	read_pp		8512794	1					
ANR	8513149	Argument	"""image too large"""		8512794	1					
ANR	8513150	PrimaryExpression	"""image too large"""		8512794	0					
ANR	8513151	ExpressionStatement	dp -> size = rb * dp -> h + dp -> h	1815:6:55598:55642	8512794	3	True				
ANR	8513152	AssignmentExpression	dp -> size = rb * dp -> h + dp -> h		8512794	0		=			
ANR	8513153	PtrMemberAccess	dp -> size		8512794	0					
ANR	8513154	Identifier	dp		8512794	0					
ANR	8513155	Identifier	size		8512794	1					
ANR	8513156	AdditiveExpression	rb * dp -> h + dp -> h		8512794	1		+			
ANR	8513157	MultiplicativeExpression	rb * dp -> h		8512794	0		*			
ANR	8513158	Identifier	rb		8512794	0					
ANR	8513159	PtrMemberAccess	dp -> h		8512794	1					
ANR	8513160	Identifier	dp		8512794	0					
ANR	8513161	Identifier	h		8512794	1					
ANR	8513162	PtrMemberAccess	dp -> h		8512794	1					
ANR	8513163	Identifier	dp		8512794	0					
ANR	8513164	Identifier	h		8512794	1					
ANR	8513165	IfStatement	if ( dp -> ct == PNG_COLOR_TYPE_PALETTE && ( dp -> options & FIX_INDEX ) != 0 )		8512794	29					
ANR	8513166	Condition	dp -> ct == PNG_COLOR_TYPE_PALETTE && ( dp -> options & FIX_INDEX ) != 0	1819:7:55674:55739	8512794	0	True				
ANR	8513167	AndExpression	dp -> ct == PNG_COLOR_TYPE_PALETTE && ( dp -> options & FIX_INDEX ) != 0		8512794	0		&&			
ANR	8513168	EqualityExpression	dp -> ct == PNG_COLOR_TYPE_PALETTE		8512794	0		==			
ANR	8513169	PtrMemberAccess	dp -> ct		8512794	0					
ANR	8513170	Identifier	dp		8512794	0					
ANR	8513171	Identifier	ct		8512794	1					
ANR	8513172	Identifier	PNG_COLOR_TYPE_PALETTE		8512794	1					
ANR	8513173	EqualityExpression	( dp -> options & FIX_INDEX ) != 0		8512794	1		!=			
ANR	8513174	BitAndExpression	dp -> options & FIX_INDEX		8512794	0		&			
ANR	8513175	PtrMemberAccess	dp -> options		8512794	0					
ANR	8513176	Identifier	dp		8512794	0					
ANR	8513177	Identifier	options		8512794	1					
ANR	8513178	Identifier	FIX_INDEX		8512794	1					
ANR	8513179	PrimaryExpression	0		8512794	1					
ANR	8513180	CompoundStatement		77:6:2681:2693	8512794	1					
ANR	8513181	IdentifierDeclStatement	"int max = png_get_palette_max ( dp -> read_pp , dp -> ip ) ;"	1821:6:55753:55803	8512794	0	True				
ANR	8513182	IdentifierDecl	"max = png_get_palette_max ( dp -> read_pp , dp -> ip )"		8512794	0					
ANR	8513183	IdentifierDeclType	int		8512794	0					
ANR	8513184	Identifier	max		8512794	1					
ANR	8513185	AssignmentExpression	"max = png_get_palette_max ( dp -> read_pp , dp -> ip )"		8512794	2		=			
ANR	8513186	Identifier	max		8512794	0					
ANR	8513187	CallExpression	"png_get_palette_max ( dp -> read_pp , dp -> ip )"		8512794	1					
ANR	8513188	Callee	png_get_palette_max		8512794	0					
ANR	8513189	Identifier	png_get_palette_max		8512794	0					
ANR	8513190	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513191	Argument	dp -> read_pp		8512794	0					
ANR	8513192	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513193	Identifier	dp		8512794	0					
ANR	8513194	Identifier	read_pp		8512794	1					
ANR	8513195	Argument	dp -> ip		8512794	1					
ANR	8513196	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8513197	Identifier	dp		8512794	0					
ANR	8513198	Identifier	ip		8512794	1					
ANR	8513199	IdentifierDeclStatement	png_colorp palette = NULL ;	1822:6:55811:55836	8512794	1	True				
ANR	8513200	IdentifierDecl	palette = NULL		8512794	0					
ANR	8513201	IdentifierDeclType	png_colorp		8512794	0					
ANR	8513202	Identifier	palette		8512794	1					
ANR	8513203	AssignmentExpression	palette = NULL		8512794	2		=			
ANR	8513204	Identifier	NULL		8512794	0					
ANR	8513205	Identifier	NULL		8512794	1					
ANR	8513206	IdentifierDeclStatement	int num = - 1 ;	1823:6:55844:55856	8512794	2	True				
ANR	8513207	IdentifierDecl	num = - 1		8512794	0					
ANR	8513208	IdentifierDeclType	int		8512794	0					
ANR	8513209	Identifier	num		8512794	1					
ANR	8513210	AssignmentExpression	num = - 1		8512794	2		=			
ANR	8513211	Identifier	num		8512794	0					
ANR	8513212	UnaryOperationExpression	- 1		8512794	1					
ANR	8513213	UnaryOperator	-		8512794	0					
ANR	8513214	PrimaryExpression	1		8512794	1					
ANR	8513215	IfStatement	"if ( png_get_PLTE ( dp -> read_pp , dp -> ip , & palette , & num ) != PNG_INFO_PLTE || max < 0 || num <= 0 || palette == NULL )"		8512794	3					
ANR	8513216	Condition	"png_get_PLTE ( dp -> read_pp , dp -> ip , & palette , & num ) != PNG_INFO_PLTE || max < 0 || num <= 0 || palette == NULL"	1825:10:55869:55986	8512794	0	True				
ANR	8513217	OrExpression	"png_get_PLTE ( dp -> read_pp , dp -> ip , & palette , & num ) != PNG_INFO_PLTE || max < 0 || num <= 0 || palette == NULL"		8512794	0		||			
ANR	8513218	EqualityExpression	"png_get_PLTE ( dp -> read_pp , dp -> ip , & palette , & num ) != PNG_INFO_PLTE"		8512794	0		!=			
ANR	8513219	CallExpression	"png_get_PLTE ( dp -> read_pp , dp -> ip , & palette , & num )"		8512794	0					
ANR	8513220	Callee	png_get_PLTE		8512794	0					
ANR	8513221	Identifier	png_get_PLTE		8512794	0					
ANR	8513222	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513223	Argument	dp -> read_pp		8512794	0					
ANR	8513224	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513225	Identifier	dp		8512794	0					
ANR	8513226	Identifier	read_pp		8512794	1					
ANR	8513227	Argument	dp -> ip		8512794	1					
ANR	8513228	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8513229	Identifier	dp		8512794	0					
ANR	8513230	Identifier	ip		8512794	1					
ANR	8513231	Argument	& palette		8512794	2					
ANR	8513232	UnaryOperationExpression	& palette		8512794	0					
ANR	8513233	UnaryOperator	&		8512794	0					
ANR	8513234	Identifier	palette		8512794	1					
ANR	8513235	Argument	& num		8512794	3					
ANR	8513236	UnaryOperationExpression	& num		8512794	0					
ANR	8513237	UnaryOperator	&		8512794	0					
ANR	8513238	Identifier	num		8512794	1					
ANR	8513239	Identifier	PNG_INFO_PLTE		8512794	1					
ANR	8513240	OrExpression	max < 0 || num <= 0 || palette == NULL		8512794	1		||			
ANR	8513241	RelationalExpression	max < 0		8512794	0		<			
ANR	8513242	Identifier	max		8512794	0					
ANR	8513243	PrimaryExpression	0		8512794	1					
ANR	8513244	OrExpression	num <= 0 || palette == NULL		8512794	1		||			
ANR	8513245	RelationalExpression	num <= 0		8512794	0		<=			
ANR	8513246	Identifier	num		8512794	0					
ANR	8513247	PrimaryExpression	0		8512794	1					
ANR	8513248	EqualityExpression	palette == NULL		8512794	1		==			
ANR	8513249	Identifier	palette		8512794	0					
ANR	8513250	Identifier	NULL		8512794	1					
ANR	8513251	ExpressionStatement	"display_log ( dp , LIBPNG_ERROR , ""invalid png_get_PLTE result"" )"	1827:9:55998:56058	8512794	1	True				
ANR	8513252	CallExpression	"display_log ( dp , LIBPNG_ERROR , ""invalid png_get_PLTE result"" )"		8512794	0					
ANR	8513253	Callee	display_log		8512794	0					
ANR	8513254	Identifier	display_log		8512794	0					
ANR	8513255	ArgumentList	dp		8512794	1					
ANR	8513256	Argument	dp		8512794	0					
ANR	8513257	Identifier	dp		8512794	0					
ANR	8513258	Argument	LIBPNG_ERROR		8512794	1					
ANR	8513259	Identifier	LIBPNG_ERROR		8512794	0					
ANR	8513260	Argument	"""invalid png_get_PLTE result"""		8512794	2					
ANR	8513261	PrimaryExpression	"""invalid png_get_PLTE result"""		8512794	0					
ANR	8513262	IfStatement	if ( max >= num )		8512794	4					
ANR	8513263	Condition	max >= num	1829:10:56071:56080	8512794	0	True				
ANR	8513264	RelationalExpression	max >= num		8512794	0		>=			
ANR	8513265	Identifier	max		8512794	0					
ANR	8513266	Identifier	num		8512794	1					
ANR	8513267	CompoundStatement		87:9:2987:3008	8512794	1					
ANR	8513268	IdentifierDeclStatement	int i ;	1832:9:56134:56139	8512794	0	True				
ANR	8513269	IdentifierDecl	i		8512794	0					
ANR	8513270	IdentifierDeclType	int		8512794	0					
ANR	8513271	Identifier	i		8512794	1					
ANR	8513272	IdentifierDeclStatement	png_color newpal [ 256 ] ;	1833:9:56150:56171	8512794	1	True				
ANR	8513273	IdentifierDecl	newpal [ 256 ]		8512794	0					
ANR	8513274	IdentifierDeclType	png_color [ 256 ]		8512794	0					
ANR	8513275	Identifier	newpal		8512794	1					
ANR	8513276	PrimaryExpression	256		8512794	2					
ANR	8513277	ForStatement	for ( i = 0 ; i < num ; ++ i )		8512794	2					
ANR	8513278	ForInit	i = 0 ;	1835:14:56188:56191	8512794	0	True				
ANR	8513279	AssignmentExpression	i = 0		8512794	0		=			
ANR	8513280	Identifier	i		8512794	0					
ANR	8513281	PrimaryExpression	0		8512794	1					
ANR	8513282	Condition	i < num	1835:19:56193:56197	8512794	1	True				
ANR	8513283	RelationalExpression	i < num		8512794	0		<			
ANR	8513284	Identifier	i		8512794	0					
ANR	8513285	Identifier	num		8512794	1					
ANR	8513286	UnaryExpression	++ i	1835:26:56200:56202	8512794	2	True				
ANR	8513287	IncDec	++		8512794	0					
ANR	8513288	Identifier	i		8512794	1					
ANR	8513289	ExpressionStatement	newpal [ i ] = palette [ i ]	1836:12:56217:56239	8512794	3	True				
ANR	8513290	AssignmentExpression	newpal [ i ] = palette [ i ]		8512794	0		=			
ANR	8513291	ArrayIndexing	newpal [ i ]		8512794	0					
ANR	8513292	Identifier	newpal		8512794	0					
ANR	8513293	Identifier	i		8512794	1					
ANR	8513294	ArrayIndexing	palette [ i ]		8512794	1					
ANR	8513295	Identifier	palette		8512794	0					
ANR	8513296	Identifier	i		8512794	1					
ANR	8513297	ForStatement	for ( ; i <= max ; ++ i )		8512794	3					
ANR	8513298	Condition	i <= max	1839:16:56317:56322	8512794	0	True				
ANR	8513299	RelationalExpression	i <= max		8512794	0		<=			
ANR	8513300	Identifier	i		8512794	0					
ANR	8513301	Identifier	max		8512794	1					
ANR	8513302	UnaryExpression	++ i	1839:24:56325:56327	8512794	1	True				
ANR	8513303	IncDec	++		8512794	0					
ANR	8513304	Identifier	i		8512794	1					
ANR	8513305	CompoundStatement		94:9:3176:3176	8512794	2					
ANR	8513306	ExpressionStatement	newpal [ i ] . red = 0xbe	1841:12:56353:56373	8512794	0	True				
ANR	8513307	AssignmentExpression	newpal [ i ] . red = 0xbe		8512794	0		=			
ANR	8513308	MemberAccess	newpal [ i ] . red		8512794	0					
ANR	8513309	ArrayIndexing	newpal [ i ]		8512794	0					
ANR	8513310	Identifier	newpal		8512794	0					
ANR	8513311	Identifier	i		8512794	1					
ANR	8513312	Identifier	red		8512794	1					
ANR	8513313	PrimaryExpression	0xbe		8512794	1					
ANR	8513314	ExpressionStatement	newpal [ i ] . green = 0xad	1842:12:56387:56409	8512794	1	True				
ANR	8513315	AssignmentExpression	newpal [ i ] . green = 0xad		8512794	0		=			
ANR	8513316	MemberAccess	newpal [ i ] . green		8512794	0					
ANR	8513317	ArrayIndexing	newpal [ i ]		8512794	0					
ANR	8513318	Identifier	newpal		8512794	0					
ANR	8513319	Identifier	i		8512794	1					
ANR	8513320	Identifier	green		8512794	1					
ANR	8513321	PrimaryExpression	0xad		8512794	1					
ANR	8513322	ExpressionStatement	newpal [ i ] . blue = 0xed	1843:12:56423:56444	8512794	2	True				
ANR	8513323	AssignmentExpression	newpal [ i ] . blue = 0xed		8512794	0		=			
ANR	8513324	MemberAccess	newpal [ i ] . blue		8512794	0					
ANR	8513325	ArrayIndexing	newpal [ i ]		8512794	0					
ANR	8513326	Identifier	newpal		8512794	0					
ANR	8513327	Identifier	i		8512794	1					
ANR	8513328	Identifier	blue		8512794	1					
ANR	8513329	PrimaryExpression	0xed		8512794	1					
ANR	8513330	ExpressionStatement	"png_set_PLTE ( dp -> read_pp , dp -> ip , newpal , i )"	1846:9:56467:56511	8512794	4	True				
ANR	8513331	CallExpression	"png_set_PLTE ( dp -> read_pp , dp -> ip , newpal , i )"		8512794	0					
ANR	8513332	Callee	png_set_PLTE		8512794	0					
ANR	8513333	Identifier	png_set_PLTE		8512794	0					
ANR	8513334	ArgumentList	dp -> read_pp		8512794	1					
ANR	8513335	Argument	dp -> read_pp		8512794	0					
ANR	8513336	PtrMemberAccess	dp -> read_pp		8512794	0					
ANR	8513337	Identifier	dp		8512794	0					
ANR	8513338	Identifier	read_pp		8512794	1					
ANR	8513339	Argument	dp -> ip		8512794	1					
ANR	8513340	PtrMemberAccess	dp -> ip		8512794	0					
ANR	8513341	Identifier	dp		8512794	0					
ANR	8513342	Identifier	ip		8512794	1					
ANR	8513343	Argument	newpal		8512794	2					
ANR	8513344	Identifier	newpal		8512794	0					
ANR	8513345	Argument	i		8512794	3					
ANR	8513346	Identifier	i		8512794	0					
ANR	8513347	ExpressionStatement	display_clean_read ( dp )	1851:3:56553:56575	8512794	30	True				
ANR	8513348	CallExpression	display_clean_read ( dp )		8512794	0					
ANR	8513349	Callee	display_clean_read		8512794	0					
ANR	8513350	Identifier	display_clean_read		8512794	0					
ANR	8513351	ArgumentList	dp		8512794	1					
ANR	8513352	Argument	dp		8512794	0					
ANR	8513353	Identifier	dp		8512794	0					
ANR	8513354	ExpressionStatement	"dp -> operation = ""none"""	1852:3:56580:56602	8512794	31	True				
ANR	8513355	AssignmentExpression	"dp -> operation = ""none"""		8512794	0		=			
ANR	8513356	PtrMemberAccess	dp -> operation		8512794	0					
ANR	8513357	Identifier	dp		8512794	0					
ANR	8513358	Identifier	operation		8512794	1					
ANR	8513359	PrimaryExpression	"""none"""		8512794	1					
ANR	8513360	ReturnType	static void		8512794	1					
ANR	8513361	Identifier	read_png		8512794	2					
ANR	8513362	ParameterList	"struct display * dp , const char * filename"		8512794	3					
ANR	8513363	Parameter	struct display * dp	1746:9:53120:53137	8512794	0	True				
ANR	8513364	ParameterType	struct display *		8512794	0					
ANR	8513365	Identifier	dp		8512794	1					
ANR	8513366	Parameter	const char * filename	1746:29:53140:53159	8512794	1	True				
ANR	8513367	ParameterType	const char *		8512794	0					
ANR	8513368	Identifier	filename		8512794	1					
ANR	8513369	CFGEntryNode	ENTRY		8512794		True				
ANR	8513370	CFGExitNode	EXIT		8512794		True				
ANR	8513371	Symbol	dp -> ip		8512794						
ANR	8513372	Symbol	* newpal		8512794						
ANR	8513373	Symbol	display_error		8512794						
ANR	8513374	Symbol	num		8512794						
ANR	8513375	Symbol	newpal		8512794						
ANR	8513376	Symbol	dp		8512794						
ANR	8513377	Symbol	IGNORE_INDEX		8512794						
ANR	8513378	Symbol	start_timer		8512794						
ANR	8513379	Symbol	png_set_user_limits		8512794						
ANR	8513380	Symbol	read_function		8512794						
ANR	8513381	Symbol	palette		8512794						
ANR	8513382	Symbol	png_get_image_height		8512794						
ANR	8513383	Symbol	NULL		8512794						
ANR	8513384	Symbol	png_get_bit_depth		8512794						
ANR	8513385	Symbol	png_get_PLTE		8512794						
ANR	8513386	Symbol	LIBPNG_ERROR		8512794						
ANR	8513387	Symbol	MAX_SIZE		8512794						
ANR	8513388	Symbol	dp -> h		8512794						
ANR	8513389	Symbol	PNG_INFO_PLTE		8512794						
ANR	8513390	Symbol	& num		8512794						
ANR	8513391	Symbol	& palette		8512794						
ANR	8513392	Symbol	rb		8512794						
ANR	8513393	Symbol	filename		8512794						
ANR	8513394	Symbol	newpal [ i ] . red		8512794						
ANR	8513395	Symbol	dp -> w		8512794						
ANR	8513396	Symbol	PNG_LIBPNG_VER_STRING		8512794						
ANR	8513397	Symbol	FIX_INDEX		8512794						
ANR	8513398	Symbol	newpal [ i ] . green		8512794						
ANR	8513399	Symbol	PNGCP_TIME_READ		8512794						
ANR	8513400	Symbol	* palette		8512794						
ANR	8513401	Symbol	dp -> operation		8512794						
ANR	8513402	Symbol	dp -> ct		8512794						
ANR	8513403	Symbol	dp -> bpp		8512794						
ANR	8513404	Symbol	* dp		8512794						
ANR	8513405	Symbol	png_get_channels		8512794						
ANR	8513406	Symbol	png_create_read_struct		8512794						
ANR	8513407	Symbol	display_warning		8512794						
ANR	8513408	Symbol	png_get_color_type		8512794						
ANR	8513409	Symbol	max		8512794						
ANR	8513410	Symbol	dp -> options		8512794						
ANR	8513411	Symbol	i		8512794						
ANR	8513412	Symbol	dp -> read_pp		8512794						
ANR	8513413	Symbol	png_get_rowbytes		8512794						
ANR	8513414	Symbol	png_create_info_struct		8512794						
ANR	8513415	Symbol	png_set_keep_unknown_chunks		8512794						
ANR	8513416	Symbol	png_get_image_width		8512794						
ANR	8513417	Symbol	* i		8512794						
ANR	8513418	Symbol	dp -> size		8512794						
ANR	8513419	Symbol	png_get_palette_max		8512794						
ANR	8513420	Symbol	newpal [ i ] . blue		8512794						
ANR	8513421	Symbol	png_set_benign_errors		8512794						
ANR	8513422	Symbol	PNG_COLOR_TYPE_PALETTE		8512794						
ANR	8513423	Function	display_start_write	1855:0:56607:57163							
ANR	8513424	FunctionDef	"display_start_write (struct display * dp , const char * filename)"		8513423	0					
ANR	8513425	CompoundStatement		1857:0:56681:57163	8513423	0					
ANR	8513426	ExpressionStatement	assert ( dp -> fp == NULL )	1858:3:56686:56708	8513423	0	True				
ANR	8513427	CallExpression	assert ( dp -> fp == NULL )		8513423	0					
ANR	8513428	Callee	assert		8513423	0					
ANR	8513429	Identifier	assert		8513423	0					
ANR	8513430	ArgumentList	dp -> fp == NULL		8513423	1					
ANR	8513431	Argument	dp -> fp == NULL		8513423	0					
ANR	8513432	EqualityExpression	dp -> fp == NULL		8513423	0		==			
ANR	8513433	PtrMemberAccess	dp -> fp		8513423	0					
ANR	8513434	Identifier	dp		8513423	0					
ANR	8513435	Identifier	fp		8513423	1					
ANR	8513436	Identifier	NULL		8513423	1					
ANR	8513437	IfStatement	if ( ( dp -> options & NOWRITE ) != 0 )		8513423	1					
ANR	8513438	Condition	( dp -> options & NOWRITE ) != 0	1860:7:56718:56745	8513423	0	True				
ANR	8513439	EqualityExpression	( dp -> options & NOWRITE ) != 0		8513423	0		!=			
ANR	8513440	BitAndExpression	dp -> options & NOWRITE		8513423	0		&			
ANR	8513441	PtrMemberAccess	dp -> options		8513423	0					
ANR	8513442	Identifier	dp		8513423	0					
ANR	8513443	Identifier	options		8513423	1					
ANR	8513444	Identifier	NOWRITE		8513423	1					
ANR	8513445	PrimaryExpression	0		8513423	1					
ANR	8513446	ExpressionStatement	"dp -> output_file = ""<no write>"""	1861:6:56754:56784	8513423	1	True				
ANR	8513447	AssignmentExpression	"dp -> output_file = ""<no write>"""		8513423	0		=			
ANR	8513448	PtrMemberAccess	dp -> output_file		8513423	0					
ANR	8513449	Identifier	dp		8513423	0					
ANR	8513450	Identifier	output_file		8513423	1					
ANR	8513451	PrimaryExpression	"""<no write>"""		8513423	1					
ANR	8513452	ElseStatement	else		8513423	0					
ANR	8513453	CompoundStatement		8:3:116:116	8513423	0					
ANR	8513454	IfStatement	if ( filename != NULL )		8513423	0					
ANR	8513455	Condition	filename != NULL	1865:10:56810:56825	8513423	0	True				
ANR	8513456	EqualityExpression	filename != NULL		8513423	0		!=			
ANR	8513457	Identifier	filename		8513423	0					
ANR	8513458	Identifier	NULL		8513423	1					
ANR	8513459	CompoundStatement		10:6:152:152	8513423	1					
ANR	8513460	ExpressionStatement	dp -> output_file = filename	1867:9:56845:56871	8513423	0	True				
ANR	8513461	AssignmentExpression	dp -> output_file = filename		8513423	0		=			
ANR	8513462	PtrMemberAccess	dp -> output_file		8513423	0					
ANR	8513463	Identifier	dp		8513423	0					
ANR	8513464	Identifier	output_file		8513423	1					
ANR	8513465	Identifier	filename		8513423	1					
ANR	8513466	ExpressionStatement	"dp -> fp = fopen ( filename , ""wb"" )"	1868:9:56882:56912	8513423	1	True				
ANR	8513467	AssignmentExpression	"dp -> fp = fopen ( filename , ""wb"" )"		8513423	0		=			
ANR	8513468	PtrMemberAccess	dp -> fp		8513423	0					
ANR	8513469	Identifier	dp		8513423	0					
ANR	8513470	Identifier	fp		8513423	1					
ANR	8513471	CallExpression	"fopen ( filename , ""wb"" )"		8513423	1					
ANR	8513472	Callee	fopen		8513423	0					
ANR	8513473	Identifier	fopen		8513423	0					
ANR	8513474	ArgumentList	filename		8513423	1					
ANR	8513475	Argument	filename		8513423	0					
ANR	8513476	Identifier	filename		8513423	0					
ANR	8513477	Argument	"""wb"""		8513423	1					
ANR	8513478	PrimaryExpression	"""wb"""		8513423	0					
ANR	8513479	ElseStatement	else		8513423	0					
ANR	8513480	CompoundStatement		16:6:258:258	8513423	0					
ANR	8513481	ExpressionStatement	"dp -> output_file = ""<stdout>"""	1873:9:56951:56979	8513423	0	True				
ANR	8513482	AssignmentExpression	"dp -> output_file = ""<stdout>"""		8513423	0		=			
ANR	8513483	PtrMemberAccess	dp -> output_file		8513423	0					
ANR	8513484	Identifier	dp		8513423	0					
ANR	8513485	Identifier	output_file		8513423	1					
ANR	8513486	PrimaryExpression	"""<stdout>"""		8513423	1					
ANR	8513487	ExpressionStatement	dp -> fp = stdout	1874:9:56990:57005	8513423	1	True				
ANR	8513488	AssignmentExpression	dp -> fp = stdout		8513423	0		=			
ANR	8513489	PtrMemberAccess	dp -> fp		8513423	0					
ANR	8513490	Identifier	dp		8513423	0					
ANR	8513491	Identifier	fp		8513423	1					
ANR	8513492	Identifier	stdout		8513423	1					
ANR	8513493	IfStatement	if ( dp -> fp == NULL )		8513423	1					
ANR	8513494	Condition	dp -> fp == NULL	1877:10:57026:57039	8513423	0	True				
ANR	8513495	EqualityExpression	dp -> fp == NULL		8513423	0		==			
ANR	8513496	PtrMemberAccess	dp -> fp		8513423	0					
ANR	8513497	Identifier	dp		8513423	0					
ANR	8513498	Identifier	fp		8513423	1					
ANR	8513499	Identifier	NULL		8513423	1					
ANR	8513500	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%s: file open failed (%s)"" , dp -> output_file , strerror ( errno ) )"	1878:9:57051:57156	8513423	1	True				
ANR	8513501	CallExpression	"display_log ( dp , USER_ERROR , ""%s: file open failed (%s)"" , dp -> output_file , strerror ( errno ) )"		8513423	0					
ANR	8513502	Callee	display_log		8513423	0					
ANR	8513503	Identifier	display_log		8513423	0					
ANR	8513504	ArgumentList	dp		8513423	1					
ANR	8513505	Argument	dp		8513423	0					
ANR	8513506	Identifier	dp		8513423	0					
ANR	8513507	Argument	USER_ERROR		8513423	1					
ANR	8513508	Identifier	USER_ERROR		8513423	0					
ANR	8513509	Argument	"""%s: file open failed (%s)"""		8513423	2					
ANR	8513510	PrimaryExpression	"""%s: file open failed (%s)"""		8513423	0					
ANR	8513511	Argument	dp -> output_file		8513423	3					
ANR	8513512	PtrMemberAccess	dp -> output_file		8513423	0					
ANR	8513513	Identifier	dp		8513423	0					
ANR	8513514	Identifier	output_file		8513423	1					
ANR	8513515	Argument	strerror ( errno )		8513423	4					
ANR	8513516	CallExpression	strerror ( errno )		8513423	0					
ANR	8513517	Callee	strerror		8513423	0					
ANR	8513518	Identifier	strerror		8513423	0					
ANR	8513519	ArgumentList	errno		8513423	1					
ANR	8513520	Argument	errno		8513423	0					
ANR	8513521	Identifier	errno		8513423	0					
ANR	8513522	ReturnType	static void		8513423	1					
ANR	8513523	Identifier	display_start_write		8513423	2					
ANR	8513524	ParameterList	"struct display * dp , const char * filename"		8513423	3					
ANR	8513525	Parameter	struct display * dp	1856:20:56639:56656	8513423	0	True				
ANR	8513526	ParameterType	struct display *		8513423	0					
ANR	8513527	Identifier	dp		8513423	1					
ANR	8513528	Parameter	const char * filename	1856:40:56659:56678	8513423	1	True				
ANR	8513529	ParameterType	const char *		8513423	0					
ANR	8513530	Identifier	filename		8513423	1					
ANR	8513531	CFGEntryNode	ENTRY		8513423		True				
ANR	8513532	CFGExitNode	EXIT		8513423		True				
ANR	8513533	Symbol	fopen		8513423						
ANR	8513534	Symbol	errno		8513423						
ANR	8513535	Symbol	NULL		8513423						
ANR	8513536	Symbol	dp -> fp		8513423						
ANR	8513537	Symbol	dp -> output_file		8513423						
ANR	8513538	Symbol	stdout		8513423						
ANR	8513539	Symbol	USER_ERROR		8513423						
ANR	8513540	Symbol	dp -> options		8513423						
ANR	8513541	Symbol	dp		8513423						
ANR	8513542	Symbol	strerror		8513423						
ANR	8513543	Symbol	* dp		8513423						
ANR	8513544	Symbol	filename		8513423						
ANR	8513545	Symbol	NOWRITE		8513423						
ANR	8513546	Function	write_function	1883:0:57166:57759							
ANR	8513547	FunctionDef	"write_function (png_structp pp , png_bytep data , png_size_t size)"		8513546	0					
ANR	8513548	CompoundStatement		1885:0:57251:57759	8513546	0					
ANR	8513549	IdentifierDeclStatement	struct display * dp = get_dp ( pp ) ;	1886:3:57256:57287	8513546	0	True				
ANR	8513550	IdentifierDecl	* dp = get_dp ( pp )		8513546	0					
ANR	8513551	IdentifierDeclType	struct display *		8513546	0					
ANR	8513552	Identifier	dp		8513546	1					
ANR	8513553	AssignmentExpression	* dp = get_dp ( pp )		8513546	2		=			
ANR	8513554	Identifier	dp		8513546	0					
ANR	8513555	CallExpression	get_dp ( pp )		8513546	1					
ANR	8513556	Callee	get_dp		8513546	0					
ANR	8513557	Identifier	get_dp		8513546	0					
ANR	8513558	ArgumentList	pp		8513546	1					
ANR	8513559	Argument	pp		8513546	0					
ANR	8513560	Identifier	pp		8513546	0					
ANR	8513561	IfStatement	"if ( dp -> fp == NULL || fwrite ( data , size , 1U , dp -> fp ) == 1U )"		8513546	1					
ANR	8513562	Condition	"dp -> fp == NULL || fwrite ( data , size , 1U , dp -> fp ) == 1U"	1891:7:57430:57483	8513546	0	True				
ANR	8513563	OrExpression	"dp -> fp == NULL || fwrite ( data , size , 1U , dp -> fp ) == 1U"		8513546	0		||			
ANR	8513564	EqualityExpression	dp -> fp == NULL		8513546	0		==			
ANR	8513565	PtrMemberAccess	dp -> fp		8513546	0					
ANR	8513566	Identifier	dp		8513546	0					
ANR	8513567	Identifier	fp		8513546	1					
ANR	8513568	Identifier	NULL		8513546	1					
ANR	8513569	EqualityExpression	"fwrite ( data , size , 1U , dp -> fp ) == 1U"		8513546	1		==			
ANR	8513570	CallExpression	"fwrite ( data , size , 1U , dp -> fp )"		8513546	0					
ANR	8513571	Callee	fwrite		8513546	0					
ANR	8513572	Identifier	fwrite		8513546	0					
ANR	8513573	ArgumentList	data		8513546	1					
ANR	8513574	Argument	data		8513546	0					
ANR	8513575	Identifier	data		8513546	0					
ANR	8513576	Argument	size		8513546	1					
ANR	8513577	Identifier	size		8513546	0					
ANR	8513578	Argument	1U		8513546	2					
ANR	8513579	PrimaryExpression	1U		8513546	0					
ANR	8513580	Argument	dp -> fp		8513546	3					
ANR	8513581	PtrMemberAccess	dp -> fp		8513546	0					
ANR	8513582	Identifier	dp		8513546	0					
ANR	8513583	Identifier	fp		8513546	1					
ANR	8513584	PrimaryExpression	1U		8513546	1					
ANR	8513585	CompoundStatement		8:3:237:237	8513546	1					
ANR	8513586	ExpressionStatement	dp -> write_size += size	1893:6:57497:57519	8513546	0	True				
ANR	8513587	AssignmentExpression	dp -> write_size += size		8513546	0		+=			
ANR	8513588	PtrMemberAccess	dp -> write_size		8513546	0					
ANR	8513589	Identifier	dp		8513546	0					
ANR	8513590	Identifier	write_size		8513546	1					
ANR	8513591	Identifier	size		8513546	1					
ANR	8513592	IfStatement	if ( dp -> write_size < size || dp -> write_size == MAX_SIZE )		8513546	1					
ANR	8513593	Condition	dp -> write_size < size || dp -> write_size == MAX_SIZE	1894:10:57531:57581	8513546	0	True				
ANR	8513594	OrExpression	dp -> write_size < size || dp -> write_size == MAX_SIZE		8513546	0		||			
ANR	8513595	RelationalExpression	dp -> write_size < size		8513546	0		<			
ANR	8513596	PtrMemberAccess	dp -> write_size		8513546	0					
ANR	8513597	Identifier	dp		8513546	0					
ANR	8513598	Identifier	write_size		8513546	1					
ANR	8513599	Identifier	size		8513546	1					
ANR	8513600	EqualityExpression	dp -> write_size == MAX_SIZE		8513546	1		==			
ANR	8513601	PtrMemberAccess	dp -> write_size		8513546	0					
ANR	8513602	Identifier	dp		8513546	0					
ANR	8513603	Identifier	write_size		8513546	1					
ANR	8513604	Identifier	MAX_SIZE		8513546	1					
ANR	8513605	ExpressionStatement	"png_error ( pp , ""IDAT size overflow"" )"	1895:9:57593:57628	8513546	1	True				
ANR	8513606	CallExpression	"png_error ( pp , ""IDAT size overflow"" )"		8513546	0					
ANR	8513607	Callee	png_error		8513546	0					
ANR	8513608	Identifier	png_error		8513546	0					
ANR	8513609	ArgumentList	pp		8513546	1					
ANR	8513610	Argument	pp		8513546	0					
ANR	8513611	Identifier	pp		8513546	0					
ANR	8513612	Argument	"""IDAT size overflow"""		8513546	1					
ANR	8513613	PrimaryExpression	"""IDAT size overflow"""		8513546	0					
ANR	8513614	ElseStatement	else		8513546	0					
ANR	8513615	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%s: PNG file write failed (%s)"" , dp -> output_file , strerror ( errno ) )"	1899:6:57650:57757	8513546	0	True				
ANR	8513616	CallExpression	"display_log ( dp , USER_ERROR , ""%s: PNG file write failed (%s)"" , dp -> output_file , strerror ( errno ) )"		8513546	0					
ANR	8513617	Callee	display_log		8513546	0					
ANR	8513618	Identifier	display_log		8513546	0					
ANR	8513619	ArgumentList	dp		8513546	1					
ANR	8513620	Argument	dp		8513546	0					
ANR	8513621	Identifier	dp		8513546	0					
ANR	8513622	Argument	USER_ERROR		8513546	1					
ANR	8513623	Identifier	USER_ERROR		8513546	0					
ANR	8513624	Argument	"""%s: PNG file write failed (%s)"""		8513546	2					
ANR	8513625	PrimaryExpression	"""%s: PNG file write failed (%s)"""		8513546	0					
ANR	8513626	Argument	dp -> output_file		8513546	3					
ANR	8513627	PtrMemberAccess	dp -> output_file		8513546	0					
ANR	8513628	Identifier	dp		8513546	0					
ANR	8513629	Identifier	output_file		8513546	1					
ANR	8513630	Argument	strerror ( errno )		8513546	4					
ANR	8513631	CallExpression	strerror ( errno )		8513546	0					
ANR	8513632	Callee	strerror		8513546	0					
ANR	8513633	Identifier	strerror		8513546	0					
ANR	8513634	ArgumentList	errno		8513546	1					
ANR	8513635	Argument	errno		8513546	0					
ANR	8513636	Identifier	errno		8513546	0					
ANR	8513637	ReturnType	static void PNGCBAPI		8513546	1					
ANR	8513638	Identifier	write_function		8513546	2					
ANR	8513639	ParameterList	"png_structp pp , png_bytep data , png_size_t size"		8513546	3					
ANR	8513640	Parameter	png_structp pp	1884:15:57202:57215	8513546	0	True				
ANR	8513641	ParameterType	png_structp		8513546	0					
ANR	8513642	Identifier	pp		8513546	1					
ANR	8513643	Parameter	png_bytep data	1884:31:57218:57231	8513546	1	True				
ANR	8513644	ParameterType	png_bytep		8513546	0					
ANR	8513645	Identifier	data		8513546	1					
ANR	8513646	Parameter	png_size_t size	1884:47:57234:57248	8513546	2	True				
ANR	8513647	ParameterType	png_size_t		8513546	0					
ANR	8513648	Identifier	size		8513546	1					
ANR	8513649	CFGEntryNode	ENTRY		8513546		True				
ANR	8513650	CFGExitNode	EXIT		8513546		True				
ANR	8513651	Symbol	pp		8513546						
ANR	8513652	Symbol	errno		8513546						
ANR	8513653	Symbol	NULL		8513546						
ANR	8513654	Symbol	data		8513546						
ANR	8513655	Symbol	dp -> fp		8513546						
ANR	8513656	Symbol	dp -> output_file		8513546						
ANR	8513657	Symbol	USER_ERROR		8513546						
ANR	8513658	Symbol	MAX_SIZE		8513546						
ANR	8513659	Symbol	fwrite		8513546						
ANR	8513660	Symbol	dp		8513546						
ANR	8513661	Symbol	dp -> write_size		8513546						
ANR	8513662	Symbol	strerror		8513546						
ANR	8513663	Symbol	* dp		8513546						
ANR	8513664	Symbol	size		8513546						
ANR	8513665	Symbol	get_dp		8513546						
ANR	8513666	DeclStmt									
ANR	8513667	Decl							define SET_COMPRESSION	"define SET_COMPRESSION ( strategy , strategy )"	SET
ANR	8513668	Function	search_compression	1917:0:58337:58633							
ANR	8513669	FunctionDef	search_compression (struct display * dp)		8513668	0					
ANR	8513670	CompoundStatement		1919:0:58388:58633	8513668	0					
ANR	8513671	IdentifierDeclStatement	int val ;	1921:3:58473:58480	8513668	0	True				
ANR	8513672	IdentifierDecl	val		8513668	0					
ANR	8513673	IdentifierDeclType	int		8513668	0					
ANR	8513674	Identifier	val		8513668	1					
ANR	8513675	Statement	define	1923:3:58486:58491	8513668	1	True				
ANR	8513676	Statement	SET	1923:10:58493:58495	8513668	2	True				
ANR	8513677	Statement	(	1923:13:58496:58496	8513668	3	True				
ANR	8513678	Statement	name	1923:14:58497:58500	8513668	4	True				
ANR	8513679	Statement	","	1923:18:58501:58501	8513668	5	True				
ANR	8513680	Statement	func	1923:20:58503:58506	8513668	6	True				
ANR	8513681	Statement	)	1923:24:58507:58507	8513668	7	True				
ANR	8513682	IfStatement	"if ( getsearchopts ( dp , name , & val ) )"		8513668	8					
ANR	8513683	Condition	"getsearchopts ( dp , name , & val )"	1923:30:58513:58542	8513668	0	True				
ANR	8513684	CallExpression	"getsearchopts ( dp , name , & val )"		8513668	0					
ANR	8513685	Callee	getsearchopts		8513668	0					
ANR	8513686	Identifier	getsearchopts		8513668	0					
ANR	8513687	ArgumentList	dp		8513668	1					
ANR	8513688	Argument	dp		8513668	0					
ANR	8513689	Identifier	dp		8513668	0					
ANR	8513690	Argument	name		8513668	1					
ANR	8513691	Identifier	name		8513668	0					
ANR	8513692	Argument	& val		8513668	2					
ANR	8513693	UnaryOperationExpression	& val		8513668	0					
ANR	8513694	UnaryOperator	&		8513668	0					
ANR	8513695	Identifier	val		8513668	1					
ANR	8513696	IdentifierDeclStatement	"png_set_compression_ func ( dp -> write_pp , val ) ;"	1924:6:58552:58599	8513668	1	True				
ANR	8513697	IdentifierDecl	"func ( dp -> write_pp , val )"		8513668	0					
ANR	8513698	IdentifierDeclType	png_set_compression_		8513668	0					
ANR	8513699	Identifier	func		8513668	1					
ANR	8513700	Expression	"dp -> write_pp , val"		8513668	2					
ANR	8513701	PtrMemberAccess	dp -> write_pp		8513668	0					
ANR	8513702	Identifier	dp		8513668	0					
ANR	8513703	Identifier	write_pp		8513668	1					
ANR	8513704	Identifier	val		8513668	1					
ANR	8513705	Statement	SET_COMPRESSION	1925:3:58604:58618	8513668	9	True				
ANR	8513706	Statement	undef	1926:3:58623:58627	8513668	10	True				
ANR	8513707	Statement	SET	1926:9:58629:58631	8513668	11	True				
ANR	8513708	ReturnType	static void		8513668	1					
ANR	8513709	Identifier	search_compression		8513668	2					
ANR	8513710	ParameterList	struct display * dp		8513668	3					
ANR	8513711	Parameter	struct display * dp	1918:19:58368:58385	8513668	0	True				
ANR	8513712	ParameterType	struct display *		8513668	0					
ANR	8513713	Identifier	dp		8513668	1					
ANR	8513714	CFGEntryNode	ENTRY		8513668		True				
ANR	8513715	CFGExitNode	EXIT		8513668		True				
ANR	8513716	Symbol	val		8513668						
ANR	8513717	Symbol	& val		8513668						
ANR	8513718	Symbol	func		8513668						
ANR	8513719	Symbol	name		8513668						
ANR	8513720	Symbol	dp		8513668						
ANR	8513721	Symbol	getsearchopts		8513668						
ANR	8513722	Function	set_compression	1929:0:58636:58846							
ANR	8513723	FunctionDef	set_compression (struct display * dp)		8513722	0					
ANR	8513724	CompoundStatement		1931:0:58684:58846	8513722	0					
ANR	8513725	IdentifierDeclStatement	int val ;	1932:3:58689:58696	8513722	0	True				
ANR	8513726	IdentifierDecl	val		8513722	0					
ANR	8513727	IdentifierDeclType	int		8513722	0					
ANR	8513728	Identifier	val		8513722	1					
ANR	8513729	Statement	define	1934:3:58702:58707	8513722	1	True				
ANR	8513730	Statement	SET	1934:10:58709:58711	8513722	2	True				
ANR	8513731	Statement	(	1934:13:58712:58712	8513722	3	True				
ANR	8513732	Statement	name	1934:14:58713:58716	8513722	4	True				
ANR	8513733	Statement	","	1934:18:58717:58717	8513722	5	True				
ANR	8513734	Statement	func	1934:20:58719:58722	8513722	6	True				
ANR	8513735	Statement	)	1934:24:58723:58723	8513722	7	True				
ANR	8513736	IfStatement	"if ( getallopts ( dp , name , & val ) )"		8513722	8					
ANR	8513737	Condition	"getallopts ( dp , name , & val )"	1934:30:58729:58755	8513722	0	True				
ANR	8513738	CallExpression	"getallopts ( dp , name , & val )"		8513722	0					
ANR	8513739	Callee	getallopts		8513722	0					
ANR	8513740	Identifier	getallopts		8513722	0					
ANR	8513741	ArgumentList	dp		8513722	1					
ANR	8513742	Argument	dp		8513722	0					
ANR	8513743	Identifier	dp		8513722	0					
ANR	8513744	Argument	name		8513722	1					
ANR	8513745	Identifier	name		8513722	0					
ANR	8513746	Argument	& val		8513722	2					
ANR	8513747	UnaryOperationExpression	& val		8513722	0					
ANR	8513748	UnaryOperator	&		8513722	0					
ANR	8513749	Identifier	val		8513722	1					
ANR	8513750	IdentifierDeclStatement	"png_set_compression_ func ( dp -> write_pp , val ) ;"	1935:6:58765:58812	8513722	1	True				
ANR	8513751	IdentifierDecl	"func ( dp -> write_pp , val )"		8513722	0					
ANR	8513752	IdentifierDeclType	png_set_compression_		8513722	0					
ANR	8513753	Identifier	func		8513722	1					
ANR	8513754	Expression	"dp -> write_pp , val"		8513722	2					
ANR	8513755	PtrMemberAccess	dp -> write_pp		8513722	0					
ANR	8513756	Identifier	dp		8513722	0					
ANR	8513757	Identifier	write_pp		8513722	1					
ANR	8513758	Identifier	val		8513722	1					
ANR	8513759	Statement	SET_COMPRESSION	1936:3:58817:58831	8513722	9	True				
ANR	8513760	Statement	undef	1937:3:58836:58840	8513722	10	True				
ANR	8513761	Statement	SET	1937:9:58842:58844	8513722	11	True				
ANR	8513762	ReturnType	static void		8513722	1					
ANR	8513763	Identifier	set_compression		8513722	2					
ANR	8513764	ParameterList	struct display * dp		8513722	3					
ANR	8513765	Parameter	struct display * dp	1930:16:58664:58681	8513722	0	True				
ANR	8513766	ParameterType	struct display *		8513722	0					
ANR	8513767	Identifier	dp		8513722	1					
ANR	8513768	CFGEntryNode	ENTRY		8513722		True				
ANR	8513769	CFGExitNode	EXIT		8513722		True				
ANR	8513770	Symbol	val		8513722						
ANR	8513771	Symbol	& val		8513722						
ANR	8513772	Symbol	func		8513722						
ANR	8513773	Symbol	name		8513722						
ANR	8513774	Symbol	getallopts		8513722						
ANR	8513775	Symbol	dp		8513722						
ANR	8513776	Function	set_ICC_profile_compression	1941:0:58891:59140							
ANR	8513777	FunctionDef	set_ICC_profile_compression (struct display * dp)		8513776	0					
ANR	8513778	CompoundStatement		1943:0:58951:59140	8513776	0					
ANR	8513779	IdentifierDeclStatement	int val ;	1944:3:58956:58963	8513776	0	True				
ANR	8513780	IdentifierDecl	val		8513776	0					
ANR	8513781	IdentifierDeclType	int		8513776	0					
ANR	8513782	Identifier	val		8513776	1					
ANR	8513783	Statement	define	1946:3:58969:58974	8513776	1	True				
ANR	8513784	Statement	SET	1946:10:58976:58978	8513776	2	True				
ANR	8513785	Statement	(	1946:13:58979:58979	8513776	3	True				
ANR	8513786	Statement	name	1946:14:58980:58983	8513776	4	True				
ANR	8513787	Statement	","	1946:18:58984:58984	8513776	5	True				
ANR	8513788	Statement	func	1946:20:58986:58989	8513776	6	True				
ANR	8513789	Statement	)	1946:24:58990:58990	8513776	7	True				
ANR	8513790	Statement	if	1946:26:58992:58993	8513776	8	True				
ANR	8513791	Statement	(	1946:29:58995:58995	8513776	9	True				
ANR	8513792	Statement	getallopts	1946:30:58996:59005	8513776	10	True				
ANR	8513793	Statement	(	1946:40:59006:59006	8513776	11	True				
ANR	8513794	Statement	dp	1946:41:59007:59008	8513776	12	True				
ANR	8513795	Statement	","	1946:43:59009:59009	8513776	13	True				
ANR	8513796	Statement	"""ICC-profile-"""	1946:45:59011:59024	8513776	14	True				
ANR	8513797	Statement	name	1946:61:59027:59030	8513776	15	True				
ANR	8513798	Statement	","	1946:65:59031:59031	8513776	16	True				
ANR	8513799	Statement	&	1946:67:59033:59033	8513776	17	True				
ANR	8513800	Statement	val	1946:68:59034:59036	8513776	18	True				
ANR	8513801	Statement	)	1946:71:59037:59037	8513776	19	True				
ANR	8513802	Statement	)	1946:72:59038:59038	8513776	20	True				
ANR	8513803	IdentifierDeclStatement	"png_set_ICC_profile_compression_ func ( dp -> write_pp , val ) ;"	1947:6:59047:59106	8513776	21	True				
ANR	8513804	IdentifierDecl	"func ( dp -> write_pp , val )"		8513776	0					
ANR	8513805	IdentifierDeclType	png_set_ICC_profile_compression_		8513776	0					
ANR	8513806	Identifier	func		8513776	1					
ANR	8513807	Expression	"dp -> write_pp , val"		8513776	2					
ANR	8513808	PtrMemberAccess	dp -> write_pp		8513776	0					
ANR	8513809	Identifier	dp		8513776	0					
ANR	8513810	Identifier	write_pp		8513776	1					
ANR	8513811	Identifier	val		8513776	1					
ANR	8513812	Statement	SET_COMPRESSION	1948:3:59111:59125	8513776	22	True				
ANR	8513813	Statement	undef	1949:3:59130:59134	8513776	23	True				
ANR	8513814	Statement	SET	1949:9:59136:59138	8513776	24	True				
ANR	8513815	ReturnType	static void		8513776	1					
ANR	8513816	Identifier	set_ICC_profile_compression		8513776	2					
ANR	8513817	ParameterList	struct display * dp		8513776	3					
ANR	8513818	Parameter	struct display * dp	1942:28:58931:58948	8513776	0	True				
ANR	8513819	ParameterType	struct display *		8513776	0					
ANR	8513820	Identifier	dp		8513776	1					
ANR	8513821	CFGEntryNode	ENTRY		8513776		True				
ANR	8513822	CFGExitNode	EXIT		8513776		True				
ANR	8513823	Symbol	val		8513776						
ANR	8513824	Symbol	func		8513776						
ANR	8513825	Symbol	dp		8513776						
ANR	8513826	Function	set_text_compression	1961:0:59444:59672							
ANR	8513827	FunctionDef	set_text_compression (struct display * dp)		8513826	0					
ANR	8513828	CompoundStatement		1963:0:59497:59672	8513826	0					
ANR	8513829	IdentifierDeclStatement	int val ;	1964:3:59502:59509	8513826	0	True				
ANR	8513830	IdentifierDecl	val		8513826	0					
ANR	8513831	IdentifierDeclType	int		8513826	0					
ANR	8513832	Identifier	val		8513826	1					
ANR	8513833	Statement	define	1966:3:59515:59520	8513826	1	True				
ANR	8513834	Statement	SET	1966:10:59522:59524	8513826	2	True				
ANR	8513835	Statement	(	1966:13:59525:59525	8513826	3	True				
ANR	8513836	Statement	name	1966:14:59526:59529	8513826	4	True				
ANR	8513837	Statement	","	1966:18:59530:59530	8513826	5	True				
ANR	8513838	Statement	func	1966:20:59532:59535	8513826	6	True				
ANR	8513839	Statement	)	1966:24:59536:59536	8513826	7	True				
ANR	8513840	Statement	if	1966:26:59538:59539	8513826	8	True				
ANR	8513841	Statement	(	1966:29:59541:59541	8513826	9	True				
ANR	8513842	Statement	getallopts	1966:30:59542:59551	8513826	10	True				
ANR	8513843	Statement	(	1966:40:59552:59552	8513826	11	True				
ANR	8513844	Statement	dp	1966:41:59553:59554	8513826	12	True				
ANR	8513845	Statement	","	1966:43:59555:59555	8513826	13	True				
ANR	8513846	Statement	"""text-"""	1966:45:59557:59563	8513826	14	True				
ANR	8513847	Statement	name	1966:54:59566:59569	8513826	15	True				
ANR	8513848	Statement	","	1966:58:59570:59570	8513826	16	True				
ANR	8513849	Statement	&	1966:60:59572:59572	8513826	17	True				
ANR	8513850	Statement	val	1966:61:59573:59575	8513826	18	True				
ANR	8513851	Statement	)	1966:64:59576:59576	8513826	19	True				
ANR	8513852	Statement	)	1966:65:59577:59577	8513826	20	True				
ANR	8513853	IdentifierDeclStatement	"png_set_text_compression_ func ( dp -> write_pp , val ) ;"	1967:6:59586:59638	8513826	21	True				
ANR	8513854	IdentifierDecl	"func ( dp -> write_pp , val )"		8513826	0					
ANR	8513855	IdentifierDeclType	png_set_text_compression_		8513826	0					
ANR	8513856	Identifier	func		8513826	1					
ANR	8513857	Expression	"dp -> write_pp , val"		8513826	2					
ANR	8513858	PtrMemberAccess	dp -> write_pp		8513826	0					
ANR	8513859	Identifier	dp		8513826	0					
ANR	8513860	Identifier	write_pp		8513826	1					
ANR	8513861	Identifier	val		8513826	1					
ANR	8513862	Statement	SET_COMPRESSION	1968:3:59643:59657	8513826	22	True				
ANR	8513863	Statement	undef	1969:3:59662:59666	8513826	23	True				
ANR	8513864	Statement	SET	1969:9:59668:59670	8513826	24	True				
ANR	8513865	ReturnType	static void		8513826	1					
ANR	8513866	Identifier	set_text_compression		8513826	2					
ANR	8513867	ParameterList	struct display * dp		8513826	3					
ANR	8513868	Parameter	struct display * dp	1962:21:59477:59494	8513826	0	True				
ANR	8513869	ParameterType	struct display *		8513826	0					
ANR	8513870	Identifier	dp		8513826	1					
ANR	8513871	CFGEntryNode	ENTRY		8513826		True				
ANR	8513872	CFGExitNode	EXIT		8513826		True				
ANR	8513873	Symbol	val		8513826						
ANR	8513874	Symbol	func		8513826						
ANR	8513875	Symbol	dp		8513826						
ANR	8513876	Function	write_png	1975:0:59772:63108							
ANR	8513877	FunctionDef	"write_png (struct display * dp , const char * destname)"		8513876	0					
ANR	8513878	CompoundStatement		1977:0:59836:63108	8513876	0					
ANR	8513879	ExpressionStatement	display_clean_write ( dp )	1978:3:59841:59864	8513876	0	True				
ANR	8513880	CallExpression	display_clean_write ( dp )		8513876	0					
ANR	8513881	Callee	display_clean_write		8513876	0					
ANR	8513882	Identifier	display_clean_write		8513876	0					
ANR	8513883	ArgumentList	dp		8513876	1					
ANR	8513884	Argument	dp		8513876	0					
ANR	8513885	Identifier	dp		8513876	0					
ANR	8513886	ExpressionStatement	"display_start_write ( dp , destname )"	1979:3:59882:59915	8513876	1	True				
ANR	8513887	CallExpression	"display_start_write ( dp , destname )"		8513876	0					
ANR	8513888	Callee	display_start_write		8513876	0					
ANR	8513889	Identifier	display_start_write		8513876	0					
ANR	8513890	ArgumentList	dp		8513876	1					
ANR	8513891	Argument	dp		8513876	0					
ANR	8513892	Identifier	dp		8513876	0					
ANR	8513893	Argument	destname		8513876	1					
ANR	8513894	Identifier	destname		8513876	0					
ANR	8513895	ExpressionStatement	"dp -> write_pp = png_create_write_struct ( PNG_LIBPNG_VER_STRING , dp , display_error , display_warning )"	1981:3:59921:60024	8513876	2	True				
ANR	8513896	AssignmentExpression	"dp -> write_pp = png_create_write_struct ( PNG_LIBPNG_VER_STRING , dp , display_error , display_warning )"		8513876	0		=			
ANR	8513897	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8513898	Identifier	dp		8513876	0					
ANR	8513899	Identifier	write_pp		8513876	1					
ANR	8513900	CallExpression	"png_create_write_struct ( PNG_LIBPNG_VER_STRING , dp , display_error , display_warning )"		8513876	1					
ANR	8513901	Callee	png_create_write_struct		8513876	0					
ANR	8513902	Identifier	png_create_write_struct		8513876	0					
ANR	8513903	ArgumentList	PNG_LIBPNG_VER_STRING		8513876	1					
ANR	8513904	Argument	PNG_LIBPNG_VER_STRING		8513876	0					
ANR	8513905	Identifier	PNG_LIBPNG_VER_STRING		8513876	0					
ANR	8513906	Argument	dp		8513876	1					
ANR	8513907	Identifier	dp		8513876	0					
ANR	8513908	Argument	display_error		8513876	2					
ANR	8513909	Identifier	display_error		8513876	0					
ANR	8513910	Argument	display_warning		8513876	3					
ANR	8513911	Identifier	display_warning		8513876	0					
ANR	8513912	IfStatement	if ( dp -> write_pp == NULL )		8513876	3					
ANR	8513913	Condition	dp -> write_pp == NULL	1984:7:60034:60053	8513876	0	True				
ANR	8513914	EqualityExpression	dp -> write_pp == NULL		8513876	0		==			
ANR	8513915	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8513916	Identifier	dp		8513876	0					
ANR	8513917	Identifier	write_pp		8513876	1					
ANR	8513918	Identifier	NULL		8513876	1					
ANR	8513919	ExpressionStatement	"display_log ( dp , LIBPNG_ERROR , ""failed to create write png_struct"" )"	1985:6:60062:60128	8513876	1	True				
ANR	8513920	CallExpression	"display_log ( dp , LIBPNG_ERROR , ""failed to create write png_struct"" )"		8513876	0					
ANR	8513921	Callee	display_log		8513876	0					
ANR	8513922	Identifier	display_log		8513876	0					
ANR	8513923	ArgumentList	dp		8513876	1					
ANR	8513924	Argument	dp		8513876	0					
ANR	8513925	Identifier	dp		8513876	0					
ANR	8513926	Argument	LIBPNG_ERROR		8513876	1					
ANR	8513927	Identifier	LIBPNG_ERROR		8513876	0					
ANR	8513928	Argument	"""failed to create write png_struct"""		8513876	2					
ANR	8513929	PrimaryExpression	"""failed to create write png_struct"""		8513876	0					
ANR	8513930	IdentifierDeclStatement	"ifdef PNG_BENIGN_ERRORS_SUPPORTED png_set_benign_errors ( dp -> write_pp , 1 ) ;"	1987:3:60134:60223	8513876	4	True				
ANR	8513931	IdentifierDecl	"png_set_benign_errors ( dp -> write_pp , 1 )"		8513876	0					
ANR	8513932	IdentifierDeclType	ifdef PNG_BENIGN_ERRORS_SUPPORTED		8513876	0					
ANR	8513933	Identifier	png_set_benign_errors		8513876	1					
ANR	8513934	Expression	"dp -> write_pp , 1"		8513876	2					
ANR	8513935	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8513936	Identifier	dp		8513876	0					
ANR	8513937	Identifier	write_pp		8513876	1					
ANR	8513938	PrimaryExpression	1		8513876	1					
ANR	8513939	IdentifierDeclStatement	"endif png_set_write_fn ( dp -> write_pp , dp , write_function , NULL ) ;"	1989:3:60228:60323	8513876	5	True				
ANR	8513940	IdentifierDecl	"png_set_write_fn ( dp -> write_pp , dp , write_function , NULL )"		8513876	0					
ANR	8513941	IdentifierDeclType	endif		8513876	0					
ANR	8513942	Identifier	png_set_write_fn		8513876	1					
ANR	8513943	Expression	"dp -> write_pp , dp , write_function , NULL"		8513876	2					
ANR	8513944	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8513945	Identifier	dp		8513876	0					
ANR	8513946	Identifier	write_pp		8513876	1					
ANR	8513947	Expression	"dp , write_function , NULL"		8513876	1					
ANR	8513948	Identifier	dp		8513876	0					
ANR	8513949	Expression	"write_function , NULL"		8513876	1					
ANR	8513950	Identifier	write_function		8513876	0					
ANR	8513951	Identifier	NULL		8513876	1					
ANR	8513952	IfStatement	if ( ( dp -> options & IGNORE_INDEX ) != 0 )		8513876	6					
ANR	8513953	Condition	( dp -> options & IGNORE_INDEX ) != 0	1994:7:60353:60385	8513876	0	True				
ANR	8513954	EqualityExpression	( dp -> options & IGNORE_INDEX ) != 0		8513876	0		!=			
ANR	8513955	BitAndExpression	dp -> options & IGNORE_INDEX		8513876	0		&			
ANR	8513956	PtrMemberAccess	dp -> options		8513876	0					
ANR	8513957	Identifier	dp		8513876	0					
ANR	8513958	Identifier	options		8513876	1					
ANR	8513959	Identifier	IGNORE_INDEX		8513876	1					
ANR	8513960	PrimaryExpression	0		8513876	1					
ANR	8513961	ExpressionStatement	"png_set_check_for_invalid_index ( dp -> write_pp , - 1 )"	1995:6:60410:60477	8513876	1	True				
ANR	8513962	CallExpression	"png_set_check_for_invalid_index ( dp -> write_pp , - 1 )"		8513876	0					
ANR	8513963	Callee	png_set_check_for_invalid_index		8513876	0					
ANR	8513964	Identifier	png_set_check_for_invalid_index		8513876	0					
ANR	8513965	ArgumentList	dp -> write_pp		8513876	1					
ANR	8513966	Argument	dp -> write_pp		8513876	0					
ANR	8513967	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8513968	Identifier	dp		8513876	0					
ANR	8513969	Identifier	write_pp		8513876	1					
ANR	8513970	Argument	- 1		8513876	1					
ANR	8513971	UnaryOperationExpression	- 1		8513876	0					
ANR	8513972	UnaryOperator	-		8513876	0					
ANR	8513973	PrimaryExpression	1		8513876	1					
ANR	8513974	ExpressionStatement	text_restore ( dp )	2002:3:60737:60753	8513876	7	True				
ANR	8513975	CallExpression	text_restore ( dp )		8513876	0					
ANR	8513976	Callee	text_restore		8513876	0					
ANR	8513977	Identifier	text_restore		8513876	0					
ANR	8513978	ArgumentList	dp		8513876	1					
ANR	8513979	Argument	dp		8513876	0					
ANR	8513980	Identifier	dp		8513876	0					
ANR	8513981	IdentifierDeclStatement	"ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED png_set_keep_unknown_chunks ( dp -> write_pp , PNG_HANDLE_CHUNK_ALWAYS , NULL , 0 ) ;"	2004:3:60759:60890	8513876	8	True				
ANR	8513982	IdentifierDecl	"png_set_keep_unknown_chunks ( dp -> write_pp , PNG_HANDLE_CHUNK_ALWAYS , NULL , 0 )"		8513876	0					
ANR	8513983	IdentifierDeclType	ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED		8513876	0					
ANR	8513984	Identifier	png_set_keep_unknown_chunks		8513876	1					
ANR	8513985	Expression	"dp -> write_pp , PNG_HANDLE_CHUNK_ALWAYS , NULL , 0"		8513876	2					
ANR	8513986	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8513987	Identifier	dp		8513876	0					
ANR	8513988	Identifier	write_pp		8513876	1					
ANR	8513989	Expression	"PNG_HANDLE_CHUNK_ALWAYS , NULL , 0"		8513876	1					
ANR	8513990	Identifier	PNG_HANDLE_CHUNK_ALWAYS		8513876	0					
ANR	8513991	Expression	"NULL , 0"		8513876	1					
ANR	8513992	Identifier	NULL		8513876	0					
ANR	8513993	PrimaryExpression	0		8513876	1					
ANR	8513994	IdentifierDeclStatement	"endif ifdef PNG_SET_USER_LIMITS_SUPPORTED png_set_user_limits ( dp -> write_pp , 0x7fffffff , 0x7fffffff ) ;"	2007:3:60895:61071	8513876	9	True				
ANR	8513995	IdentifierDecl	"png_set_user_limits ( dp -> write_pp , 0x7fffffff , 0x7fffffff )"		8513876	0					
ANR	8513996	IdentifierDeclType	endif ifdef PNG_SET_USER_LIMITS_SUPPORTED		8513876	0					
ANR	8513997	Identifier	png_set_user_limits		8513876	1					
ANR	8513998	Expression	"dp -> write_pp , 0x7fffffff , 0x7fffffff"		8513876	2					
ANR	8513999	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8514000	Identifier	dp		8513876	0					
ANR	8514001	Identifier	write_pp		8513876	1					
ANR	8514002	Expression	"0x7fffffff , 0x7fffffff"		8513876	1					
ANR	8514003	PrimaryExpression	0x7fffffff		8513876	0					
ANR	8514004	PrimaryExpression	0x7fffffff		8513876	1					
ANR	8514005	Statement	endif	2012:3:61076:61080	8513876	10	True				
ANR	8514006	ExpressionStatement	dp -> tsp = dp -> nsp	2016:3:61161:61178	8513876	11	True				
ANR	8514007	AssignmentExpression	dp -> tsp = dp -> nsp		8513876	0		=			
ANR	8514008	PtrMemberAccess	dp -> tsp		8513876	0					
ANR	8514009	Identifier	dp		8513876	0					
ANR	8514010	Identifier	tsp		8513876	1					
ANR	8514011	PtrMemberAccess	dp -> nsp		8513876	1					
ANR	8514012	Identifier	dp		8513876	0					
ANR	8514013	Identifier	nsp		8513876	1					
ANR	8514014	ExpressionStatement	dp -> nsp = dp -> csp = 0	2017:3:61183:61204	8513876	12	True				
ANR	8514015	AssignmentExpression	dp -> nsp = dp -> csp = 0		8513876	0		=			
ANR	8514016	PtrMemberAccess	dp -> nsp		8513876	0					
ANR	8514017	Identifier	dp		8513876	0					
ANR	8514018	Identifier	nsp		8513876	1					
ANR	8514019	AssignmentExpression	dp -> csp = 0		8513876	1		=			
ANR	8514020	PtrMemberAccess	dp -> csp		8513876	0					
ANR	8514021	Identifier	dp		8513876	0					
ANR	8514022	Identifier	csp		8513876	1					
ANR	8514023	PrimaryExpression	0		8513876	1					
ANR	8514024	Statement	ifdef	2018:3:61209:61213	8513876	13	True				
ANR	8514025	Statement	PNG_SW_COMPRESS_png_level	2018:9:61215:61239	8513876	14	True				
ANR	8514026	CompoundStatement		44:9:1421:1428	8513876	15					
ANR	8514027	IdentifierDeclStatement	int val ;	2020:9:61258:61265	8513876	0	True				
ANR	8514028	IdentifierDecl	val		8513876	0					
ANR	8514029	IdentifierDeclType	int		8513876	0					
ANR	8514030	Identifier	val		8513876	1					
ANR	8514031	IfStatement	"if ( getallopts ( dp , ""compression"" , & val ) )"		8513876	1					
ANR	8514032	Condition	"getallopts ( dp , ""compression"" , & val )"	2025:13:61434:61468	8513876	0	True				
ANR	8514033	CallExpression	"getallopts ( dp , ""compression"" , & val )"		8513876	0					
ANR	8514034	Callee	getallopts		8513876	0					
ANR	8514035	Identifier	getallopts		8513876	0					
ANR	8514036	ArgumentList	dp		8513876	1					
ANR	8514037	Argument	dp		8513876	0					
ANR	8514038	Identifier	dp		8513876	0					
ANR	8514039	Argument	"""compression"""		8513876	1					
ANR	8514040	PrimaryExpression	"""compression"""		8513876	0					
ANR	8514041	Argument	& val		8513876	2					
ANR	8514042	UnaryOperationExpression	& val		8513876	0					
ANR	8514043	UnaryOperator	&		8513876	0					
ANR	8514044	Identifier	val		8513876	1					
ANR	8514045	ExpressionStatement	"png_set_compression ( dp -> write_pp , val )"	2026:12:61483:61521	8513876	1	True				
ANR	8514046	CallExpression	"png_set_compression ( dp -> write_pp , val )"		8513876	0					
ANR	8514047	Callee	png_set_compression		8513876	0					
ANR	8514048	Identifier	png_set_compression		8513876	0					
ANR	8514049	ArgumentList	dp -> write_pp		8513876	1					
ANR	8514050	Argument	dp -> write_pp		8513876	0					
ANR	8514051	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8514052	Identifier	dp		8513876	0					
ANR	8514053	Identifier	write_pp		8513876	1					
ANR	8514054	Argument	val		8513876	1					
ANR	8514055	Identifier	val		8513876	0					
ANR	8514056	IfStatement	"if ( getallopts ( dp , ""ICC-profile-compression"" , & val ) )"		8513876	2					
ANR	8514057	Condition	"getallopts ( dp , ""ICC-profile-compression"" , & val )"	2028:13:61537:61583	8513876	0	True				
ANR	8514058	CallExpression	"getallopts ( dp , ""ICC-profile-compression"" , & val )"		8513876	0					
ANR	8514059	Callee	getallopts		8513876	0					
ANR	8514060	Identifier	getallopts		8513876	0					
ANR	8514061	ArgumentList	dp		8513876	1					
ANR	8514062	Argument	dp		8513876	0					
ANR	8514063	Identifier	dp		8513876	0					
ANR	8514064	Argument	"""ICC-profile-compression"""		8513876	1					
ANR	8514065	PrimaryExpression	"""ICC-profile-compression"""		8513876	0					
ANR	8514066	Argument	& val		8513876	2					
ANR	8514067	UnaryOperationExpression	& val		8513876	0					
ANR	8514068	UnaryOperator	&		8513876	0					
ANR	8514069	Identifier	val		8513876	1					
ANR	8514070	ExpressionStatement	"png_set_ICC_profile_compression ( dp -> write_pp , val )"	2029:12:61598:61648	8513876	1	True				
ANR	8514071	CallExpression	"png_set_ICC_profile_compression ( dp -> write_pp , val )"		8513876	0					
ANR	8514072	Callee	png_set_ICC_profile_compression		8513876	0					
ANR	8514073	Identifier	png_set_ICC_profile_compression		8513876	0					
ANR	8514074	ArgumentList	dp -> write_pp		8513876	1					
ANR	8514075	Argument	dp -> write_pp		8513876	0					
ANR	8514076	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8514077	Identifier	dp		8513876	0					
ANR	8514078	Identifier	write_pp		8513876	1					
ANR	8514079	Argument	val		8513876	1					
ANR	8514080	Identifier	val		8513876	0					
ANR	8514081	IfStatement	"if ( getallopts ( dp , ""text-compression"" , & val ) )"		8513876	3					
ANR	8514082	Condition	"getallopts ( dp , ""text-compression"" , & val )"	2031:13:61664:61703	8513876	0	True				
ANR	8514083	CallExpression	"getallopts ( dp , ""text-compression"" , & val )"		8513876	0					
ANR	8514084	Callee	getallopts		8513876	0					
ANR	8514085	Identifier	getallopts		8513876	0					
ANR	8514086	ArgumentList	dp		8513876	1					
ANR	8514087	Argument	dp		8513876	0					
ANR	8514088	Identifier	dp		8513876	0					
ANR	8514089	Argument	"""text-compression"""		8513876	1					
ANR	8514090	PrimaryExpression	"""text-compression"""		8513876	0					
ANR	8514091	Argument	& val		8513876	2					
ANR	8514092	UnaryOperationExpression	& val		8513876	0					
ANR	8514093	UnaryOperator	&		8513876	0					
ANR	8514094	Identifier	val		8513876	1					
ANR	8514095	ExpressionStatement	"png_set_text_compression ( dp -> write_pp , val )"	2032:12:61718:61761	8513876	1	True				
ANR	8514096	CallExpression	"png_set_text_compression ( dp -> write_pp , val )"		8513876	0					
ANR	8514097	Callee	png_set_text_compression		8513876	0					
ANR	8514098	Identifier	png_set_text_compression		8513876	0					
ANR	8514099	ArgumentList	dp -> write_pp		8513876	1					
ANR	8514100	Argument	dp -> write_pp		8513876	0					
ANR	8514101	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8514102	Identifier	dp		8513876	0					
ANR	8514103	Identifier	write_pp		8513876	1					
ANR	8514104	Argument	val		8513876	1					
ANR	8514105	Identifier	val		8513876	0					
ANR	8514106	Statement	endif	2034:3:61774:61778	8513876	16	True				
ANR	8514107	IfStatement	if ( dp -> options & SEARCH )		8513876	17					
ANR	8514108	Condition	dp -> options & SEARCH	2035:7:61811:61830	8513876	0	True				
ANR	8514109	BitAndExpression	dp -> options & SEARCH		8513876	0		&			
ANR	8514110	PtrMemberAccess	dp -> options		8513876	0					
ANR	8514111	Identifier	dp		8513876	0					
ANR	8514112	Identifier	options		8513876	1					
ANR	8514113	Identifier	SEARCH		8513876	1					
ANR	8514114	ExpressionStatement	search_compression ( dp )	2036:6:61839:61861	8513876	1	True				
ANR	8514115	CallExpression	search_compression ( dp )		8513876	0					
ANR	8514116	Callee	search_compression		8513876	0					
ANR	8514117	Identifier	search_compression		8513876	0					
ANR	8514118	ArgumentList	dp		8513876	1					
ANR	8514119	Argument	dp		8513876	0					
ANR	8514120	Identifier	dp		8513876	0					
ANR	8514121	ElseStatement	else		8513876	0					
ANR	8514122	ExpressionStatement	set_compression ( dp )	2038:6:61877:61896	8513876	0	True				
ANR	8514123	CallExpression	set_compression ( dp )		8513876	0					
ANR	8514124	Callee	set_compression		8513876	0					
ANR	8514125	Identifier	set_compression		8513876	0					
ANR	8514126	ArgumentList	dp		8513876	1					
ANR	8514127	Argument	dp		8513876	0					
ANR	8514128	Identifier	dp		8513876	0					
ANR	8514129	ExpressionStatement	set_ICC_profile_compression ( dp )	2039:3:61901:61932	8513876	18	True				
ANR	8514130	CallExpression	set_ICC_profile_compression ( dp )		8513876	0					
ANR	8514131	Callee	set_ICC_profile_compression		8513876	0					
ANR	8514132	Identifier	set_ICC_profile_compression		8513876	0					
ANR	8514133	ArgumentList	dp		8513876	1					
ANR	8514134	Argument	dp		8513876	0					
ANR	8514135	Identifier	dp		8513876	0					
ANR	8514136	ExpressionStatement	set_text_compression ( dp )	2040:3:61937:61961	8513876	19	True				
ANR	8514137	CallExpression	set_text_compression ( dp )		8513876	0					
ANR	8514138	Callee	set_text_compression		8513876	0					
ANR	8514139	Identifier	set_text_compression		8513876	0					
ANR	8514140	ArgumentList	dp		8513876	1					
ANR	8514141	Argument	dp		8513876	0					
ANR	8514142	Identifier	dp		8513876	0					
ANR	8514143	CompoundStatement		67:6:2138:2145	8513876	20					
ANR	8514144	IdentifierDeclStatement	int val ;	2043:6:61975:61982	8513876	0	True				
ANR	8514145	IdentifierDecl	val		8513876	0					
ANR	8514146	IdentifierDeclType	int		8513876	0					
ANR	8514147	Identifier	val		8513876	1					
ANR	8514148	IfStatement	"if ( get_option ( dp , ""IDAT-size"" , & val ) )"		8513876	1					
ANR	8514149	Condition	"get_option ( dp , ""IDAT-size"" , & val )"	2046:10:62065:62097	8513876	0	True				
ANR	8514150	CallExpression	"get_option ( dp , ""IDAT-size"" , & val )"		8513876	0					
ANR	8514151	Callee	get_option		8513876	0					
ANR	8514152	Identifier	get_option		8513876	0					
ANR	8514153	ArgumentList	dp		8513876	1					
ANR	8514154	Argument	dp		8513876	0					
ANR	8514155	Identifier	dp		8513876	0					
ANR	8514156	Argument	"""IDAT-size"""		8513876	1					
ANR	8514157	PrimaryExpression	"""IDAT-size"""		8513876	0					
ANR	8514158	Argument	& val		8513876	2					
ANR	8514159	UnaryOperationExpression	& val		8513876	0					
ANR	8514160	UnaryOperator	&		8513876	0					
ANR	8514161	Identifier	val		8513876	1					
ANR	8514162	ExpressionStatement	"png_set_IDAT_size ( dp -> write_pp , val )"	2047:9:62109:62145	8513876	1	True				
ANR	8514163	CallExpression	"png_set_IDAT_size ( dp -> write_pp , val )"		8513876	0					
ANR	8514164	Callee	png_set_IDAT_size		8513876	0					
ANR	8514165	Identifier	png_set_IDAT_size		8513876	0					
ANR	8514166	ArgumentList	dp -> write_pp		8513876	1					
ANR	8514167	Argument	dp -> write_pp		8513876	0					
ANR	8514168	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8514169	Identifier	dp		8513876	0					
ANR	8514170	Identifier	write_pp		8513876	1					
ANR	8514171	Argument	val		8513876	1					
ANR	8514172	Identifier	val		8513876	0					
ANR	8514173	Statement	ifdef	2051:3:62181:62185	8513876	21	True				
ANR	8514174	Statement	PNG_WRITE_FILTER_SUPPORTED	2051:9:62187:62212	8513876	22	True				
ANR	8514175	CompoundStatement		77:9:2394:2401	8513876	23					
ANR	8514176	IdentifierDeclStatement	int val ;	2053:9:62231:62238	8513876	0	True				
ANR	8514177	IdentifierDecl	val		8513876	0					
ANR	8514178	IdentifierDeclType	int		8513876	0					
ANR	8514179	Identifier	val		8513876	1					
ANR	8514180	IfStatement	"if ( get_option ( dp , ""filter"" , & val ) )"		8513876	1					
ANR	8514181	Condition	"get_option ( dp , ""filter"" , & val )"	2055:13:62254:62283	8513876	0	True				
ANR	8514182	CallExpression	"get_option ( dp , ""filter"" , & val )"		8513876	0					
ANR	8514183	Callee	get_option		8513876	0					
ANR	8514184	Identifier	get_option		8513876	0					
ANR	8514185	ArgumentList	dp		8513876	1					
ANR	8514186	Argument	dp		8513876	0					
ANR	8514187	Identifier	dp		8513876	0					
ANR	8514188	Argument	"""filter"""		8513876	1					
ANR	8514189	PrimaryExpression	"""filter"""		8513876	0					
ANR	8514190	Argument	& val		8513876	2					
ANR	8514191	UnaryOperationExpression	& val		8513876	0					
ANR	8514192	UnaryOperator	&		8513876	0					
ANR	8514193	Identifier	val		8513876	1					
ANR	8514194	ExpressionStatement	"png_set_filter ( dp -> write_pp , PNG_FILTER_TYPE_BASE , val )"	2056:12:62298:62353	8513876	1	True				
ANR	8514195	CallExpression	"png_set_filter ( dp -> write_pp , PNG_FILTER_TYPE_BASE , val )"		8513876	0					
ANR	8514196	Callee	png_set_filter		8513876	0					
ANR	8514197	Identifier	png_set_filter		8513876	0					
ANR	8514198	ArgumentList	dp -> write_pp		8513876	1					
ANR	8514199	Argument	dp -> write_pp		8513876	0					
ANR	8514200	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8514201	Identifier	dp		8513876	0					
ANR	8514202	Identifier	write_pp		8513876	1					
ANR	8514203	Argument	PNG_FILTER_TYPE_BASE		8513876	1					
ANR	8514204	Identifier	PNG_FILTER_TYPE_BASE		8513876	0					
ANR	8514205	Argument	val		8513876	2					
ANR	8514206	Identifier	val		8513876	0					
ANR	8514207	Statement	endif	2058:3:62366:62370	8513876	24	True				
ANR	8514208	ExpressionStatement	dp -> write_size = 0U	2061:3:62475:62494	8513876	25	True				
ANR	8514209	AssignmentExpression	dp -> write_size = 0U		8513876	0		=			
ANR	8514210	PtrMemberAccess	dp -> write_size		8513876	0					
ANR	8514211	Identifier	dp		8513876	0					
ANR	8514212	Identifier	write_size		8513876	1					
ANR	8514213	PrimaryExpression	0U		8513876	1					
ANR	8514214	ExpressionStatement	"start_timer ( dp , PNGCP_TIME_WRITE )"	2062:3:62499:62532	8513876	26	True				
ANR	8514215	CallExpression	"start_timer ( dp , PNGCP_TIME_WRITE )"		8513876	0					
ANR	8514216	Callee	start_timer		8513876	0					
ANR	8514217	Identifier	start_timer		8513876	0					
ANR	8514218	ArgumentList	dp		8513876	1					
ANR	8514219	Argument	dp		8513876	0					
ANR	8514220	Identifier	dp		8513876	0					
ANR	8514221	Argument	PNGCP_TIME_WRITE		8513876	1					
ANR	8514222	Identifier	PNGCP_TIME_WRITE		8513876	0					
ANR	8514223	ExpressionStatement	"png_write_png ( dp -> write_pp , dp -> ip , 0U , NULL )"	2063:3:62537:62606	8513876	27	True				
ANR	8514224	CallExpression	"png_write_png ( dp -> write_pp , dp -> ip , 0U , NULL )"		8513876	0					
ANR	8514225	Callee	png_write_png		8513876	0					
ANR	8514226	Identifier	png_write_png		8513876	0					
ANR	8514227	ArgumentList	dp -> write_pp		8513876	1					
ANR	8514228	Argument	dp -> write_pp		8513876	0					
ANR	8514229	PtrMemberAccess	dp -> write_pp		8513876	0					
ANR	8514230	Identifier	dp		8513876	0					
ANR	8514231	Identifier	write_pp		8513876	1					
ANR	8514232	Argument	dp -> ip		8513876	1					
ANR	8514233	PtrMemberAccess	dp -> ip		8513876	0					
ANR	8514234	Identifier	dp		8513876	0					
ANR	8514235	Identifier	ip		8513876	1					
ANR	8514236	Argument	0U		8513876	2					
ANR	8514237	PrimaryExpression	0U		8513876	0					
ANR	8514238	Argument	NULL		8513876	3					
ANR	8514239	Identifier	NULL		8513876	0					
ANR	8514240	ExpressionStatement	"end_timer ( dp , PNGCP_TIME_WRITE )"	2064:3:62611:62642	8513876	28	True				
ANR	8514241	CallExpression	"end_timer ( dp , PNGCP_TIME_WRITE )"		8513876	0					
ANR	8514242	Callee	end_timer		8513876	0					
ANR	8514243	Identifier	end_timer		8513876	0					
ANR	8514244	ArgumentList	dp		8513876	1					
ANR	8514245	Argument	dp		8513876	0					
ANR	8514246	Identifier	dp		8513876	0					
ANR	8514247	Argument	PNGCP_TIME_WRITE		8513876	1					
ANR	8514248	Identifier	PNGCP_TIME_WRITE		8513876	0					
ANR	8514249	IfStatement	if ( dp -> fp != NULL )		8513876	29					
ANR	8514250	Condition	dp -> fp != NULL	2067:7:62696:62709	8513876	0	True				
ANR	8514251	EqualityExpression	dp -> fp != NULL		8513876	0		!=			
ANR	8514252	PtrMemberAccess	dp -> fp		8513876	0					
ANR	8514253	Identifier	dp		8513876	0					
ANR	8514254	Identifier	fp		8513876	1					
ANR	8514255	Identifier	NULL		8513876	1					
ANR	8514256	CompoundStatement		93:6:2886:2903	8513876	1					
ANR	8514257	IdentifierDeclStatement	FILE * fp = dp -> fp ;	2069:6:62723:62740	8513876	0	True				
ANR	8514258	IdentifierDecl	* fp = dp -> fp		8513876	0					
ANR	8514259	IdentifierDeclType	FILE *		8513876	0					
ANR	8514260	Identifier	fp		8513876	1					
ANR	8514261	AssignmentExpression	* fp = dp -> fp		8513876	2		=			
ANR	8514262	Identifier	fp		8513876	0					
ANR	8514263	PtrMemberAccess	dp -> fp		8513876	1					
ANR	8514264	Identifier	dp		8513876	0					
ANR	8514265	Identifier	fp		8513876	1					
ANR	8514266	ExpressionStatement	dp -> fp = NULL	2070:6:62748:62761	8513876	1	True				
ANR	8514267	AssignmentExpression	dp -> fp = NULL		8513876	0		=			
ANR	8514268	PtrMemberAccess	dp -> fp		8513876	0					
ANR	8514269	Identifier	dp		8513876	0					
ANR	8514270	Identifier	fp		8513876	1					
ANR	8514271	Identifier	NULL		8513876	1					
ANR	8514272	IfStatement	if ( fclose ( fp ) )		8513876	2					
ANR	8514273	Condition	fclose ( fp )	2071:10:62773:62782	8513876	0	True				
ANR	8514274	CallExpression	fclose ( fp )		8513876	0					
ANR	8514275	Callee	fclose		8513876	0					
ANR	8514276	Identifier	fclose		8513876	0					
ANR	8514277	ArgumentList	fp		8513876	1					
ANR	8514278	Argument	fp		8513876	0					
ANR	8514279	Identifier	fp		8513876	0					
ANR	8514280	ExpressionStatement	"display_log ( dp , APP_ERROR , ""%s: write failed (%s)"" , destname == NULL ? ""stdout"" : destname , strerror ( errno ) )"	2072:9:62794:62917	8513876	1	True				
ANR	8514281	CallExpression	"display_log ( dp , APP_ERROR , ""%s: write failed (%s)"" , destname == NULL ? ""stdout"" : destname , strerror ( errno ) )"		8513876	0					
ANR	8514282	Callee	display_log		8513876	0					
ANR	8514283	Identifier	display_log		8513876	0					
ANR	8514284	ArgumentList	dp		8513876	1					
ANR	8514285	Argument	dp		8513876	0					
ANR	8514286	Identifier	dp		8513876	0					
ANR	8514287	Argument	APP_ERROR		8513876	1					
ANR	8514288	Identifier	APP_ERROR		8513876	0					
ANR	8514289	Argument	"""%s: write failed (%s)"""		8513876	2					
ANR	8514290	PrimaryExpression	"""%s: write failed (%s)"""		8513876	0					
ANR	8514291	Argument	"destname == NULL ? ""stdout"" : destname"		8513876	3					
ANR	8514292	ConditionalExpression	"destname == NULL ? ""stdout"" : destname"		8513876	0					
ANR	8514293	Condition	destname == NULL		8513876	0					
ANR	8514294	EqualityExpression	destname == NULL		8513876	0		==			
ANR	8514295	Identifier	destname		8513876	0					
ANR	8514296	Identifier	NULL		8513876	1					
ANR	8514297	PrimaryExpression	"""stdout"""		8513876	1					
ANR	8514298	Identifier	destname		8513876	2					
ANR	8514299	Argument	strerror ( errno )		8513876	4					
ANR	8514300	CallExpression	strerror ( errno )		8513876	0					
ANR	8514301	Callee	strerror		8513876	0					
ANR	8514302	Identifier	strerror		8513876	0					
ANR	8514303	ArgumentList	errno		8513876	1					
ANR	8514304	Argument	errno		8513876	0					
ANR	8514305	Identifier	errno		8513876	0					
ANR	8514306	ExpressionStatement	display_clean_write ( dp )	2079:3:63056:63079	8513876	30	True				
ANR	8514307	CallExpression	display_clean_write ( dp )		8513876	0					
ANR	8514308	Callee	display_clean_write		8513876	0					
ANR	8514309	Identifier	display_clean_write		8513876	0					
ANR	8514310	ArgumentList	dp		8513876	1					
ANR	8514311	Argument	dp		8513876	0					
ANR	8514312	Identifier	dp		8513876	0					
ANR	8514313	ExpressionStatement	"dp -> operation = ""none"""	2080:3:63084:63106	8513876	31	True				
ANR	8514314	AssignmentExpression	"dp -> operation = ""none"""		8513876	0		=			
ANR	8514315	PtrMemberAccess	dp -> operation		8513876	0					
ANR	8514316	Identifier	dp		8513876	0					
ANR	8514317	Identifier	operation		8513876	1					
ANR	8514318	PrimaryExpression	"""none"""		8513876	1					
ANR	8514319	ReturnType	static void		8513876	1					
ANR	8514320	Identifier	write_png		8513876	2					
ANR	8514321	ParameterList	"struct display * dp , const char * destname"		8513876	3					
ANR	8514322	Parameter	struct display * dp	1976:10:59794:59811	8513876	0	True				
ANR	8514323	ParameterType	struct display *		8513876	0					
ANR	8514324	Identifier	dp		8513876	1					
ANR	8514325	Parameter	const char * destname	1976:30:59814:59833	8513876	1	True				
ANR	8514326	ParameterType	const char *		8513876	0					
ANR	8514327	Identifier	destname		8513876	1					
ANR	8514328	CFGEntryNode	ENTRY		8513876		True				
ANR	8514329	CFGExitNode	EXIT		8513876		True				
ANR	8514330	Symbol	& val		8513876						
ANR	8514331	Symbol	dp -> ip		8513876						
ANR	8514332	Symbol	display_error		8513876						
ANR	8514333	Symbol	dp -> operation		8513876						
ANR	8514334	Symbol	fp		8513876						
ANR	8514335	Symbol	dp		8513876						
ANR	8514336	Symbol	IGNORE_INDEX		8513876						
ANR	8514337	Symbol	* dp		8513876						
ANR	8514338	Symbol	PNG_FILTER_TYPE_BASE		8513876						
ANR	8514339	Symbol	APP_ERROR		8513876						
ANR	8514340	Symbol	png_set_user_limits		8513876						
ANR	8514341	Symbol	png_create_write_struct		8513876						
ANR	8514342	Symbol	val		8513876						
ANR	8514343	Symbol	display_warning		8513876						
ANR	8514344	Symbol	png_set_write_fn		8513876						
ANR	8514345	Symbol	errno		8513876						
ANR	8514346	Symbol	NULL		8513876						
ANR	8514347	Symbol	dp -> fp		8513876						
ANR	8514348	Symbol	SEARCH		8513876						
ANR	8514349	Symbol	LIBPNG_ERROR		8513876						
ANR	8514350	Symbol	dp -> options		8513876						
ANR	8514351	Symbol	fclose		8513876						
ANR	8514352	Symbol	PNGCP_TIME_WRITE		8513876						
ANR	8514353	Symbol	getallopts		8513876						
ANR	8514354	Symbol	dp -> csp		8513876						
ANR	8514355	Symbol	dp -> write_size		8513876						
ANR	8514356	Symbol	strerror		8513876						
ANR	8514357	Symbol	png_set_keep_unknown_chunks		8513876						
ANR	8514358	Symbol	get_option		8513876						
ANR	8514359	Symbol	destname		8513876						
ANR	8514360	Symbol	dp -> nsp		8513876						
ANR	8514361	Symbol	dp -> tsp		8513876						
ANR	8514362	Symbol	dp -> write_pp		8513876						
ANR	8514363	Symbol	PNG_LIBPNG_VER_STRING		8513876						
ANR	8514364	Symbol	png_set_benign_errors		8513876						
ANR	8514365	Function	set_windowBits_hi	2083:0:63111:63977							
ANR	8514366	FunctionDef	set_windowBits_hi (struct display * dp)		8514365	0					
ANR	8514367	CompoundStatement		2085:0:63161:63977	8514365	0					
ANR	8514368	IdentifierDeclStatement	int wb = MAX_WBITS ;	2089:3:63307:63325	8514365	0	True				
ANR	8514369	IdentifierDecl	wb = MAX_WBITS		8514365	0					
ANR	8514370	IdentifierDeclType	int		8514365	0					
ANR	8514371	Identifier	wb		8514365	1					
ANR	8514372	AssignmentExpression	wb = MAX_WBITS		8514365	2		=			
ANR	8514373	Identifier	MAX_WBITS		8514365	0					
ANR	8514374	Identifier	MAX_WBITS		8514365	1					
ANR	8514375	IdentifierDeclStatement	int i = VLSIZE ( windowBits_IDAT ) ;	2090:3:63353:63384	8514365	1	True				
ANR	8514376	IdentifierDecl	i = VLSIZE ( windowBits_IDAT )		8514365	0					
ANR	8514377	IdentifierDeclType	int		8514365	0					
ANR	8514378	Identifier	i		8514365	1					
ANR	8514379	AssignmentExpression	i = VLSIZE ( windowBits_IDAT )		8514365	2		=			
ANR	8514380	Identifier	i		8514365	0					
ANR	8514381	CallExpression	VLSIZE ( windowBits_IDAT )		8514365	1					
ANR	8514382	Callee	VLSIZE		8514365	0					
ANR	8514383	Identifier	VLSIZE		8514365	0					
ANR	8514384	ArgumentList	windowBits_IDAT		8514365	1					
ANR	8514385	Argument	windowBits_IDAT		8514365	0					
ANR	8514386	Identifier	windowBits_IDAT		8514365	0					
ANR	8514387	WhileStatement	while ( wb > 8 && dp -> size <= 1U << ( wb - 1 ) )		8514365	2					
ANR	8514388	Condition	wb > 8 && dp -> size <= 1U << ( wb - 1 )	2092:10:63397:63428	8514365	0	True				
ANR	8514389	AndExpression	wb > 8 && dp -> size <= 1U << ( wb - 1 )		8514365	0		&&			
ANR	8514390	RelationalExpression	wb > 8		8514365	0		>			
ANR	8514391	Identifier	wb		8514365	0					
ANR	8514392	PrimaryExpression	8		8514365	1					
ANR	8514393	RelationalExpression	dp -> size <= 1U << ( wb - 1 )		8514365	1		<=			
ANR	8514394	PtrMemberAccess	dp -> size		8514365	0					
ANR	8514395	Identifier	dp		8514365	0					
ANR	8514396	Identifier	size		8514365	1					
ANR	8514397	ShiftExpression	1U << ( wb - 1 )		8514365	1		<<			
ANR	8514398	PrimaryExpression	1U		8514365	0					
ANR	8514399	AdditiveExpression	wb - 1		8514365	1		-			
ANR	8514400	Identifier	wb		8514365	0					
ANR	8514401	PrimaryExpression	1		8514365	1					
ANR	8514402	ExpressionStatement	-- wb	2092:44:63431:63435	8514365	1	True				
ANR	8514403	UnaryExpression	-- wb		8514365	0					
ANR	8514404	IncDec	--		8514365	0					
ANR	8514405	Identifier	wb		8514365	1					
ANR	8514406	WhileStatement	while ( -- i >= 0 )		8514365	3					
ANR	8514407	Condition	-- i >= 0	2094:10:63448:63455	8514365	0	True				
ANR	8514408	RelationalExpression	-- i >= 0		8514365	0		>=			
ANR	8514409	UnaryExpression	-- i		8514365	0					
ANR	8514410	IncDec	--		8514365	0					
ANR	8514411	Identifier	i		8514365	1					
ANR	8514412	PrimaryExpression	0		8514365	1					
ANR	8514413	IfStatement	if ( VLNAME ( windowBits_IDAT ) [ i ] . name == range_hi )		8514365	1					
ANR	8514414	Condition	VLNAME ( windowBits_IDAT ) [ i ] . name == range_hi	2094:24:63462:63504	8514365	0	True				
ANR	8514415	EqualityExpression	VLNAME ( windowBits_IDAT ) [ i ] . name == range_hi		8514365	0		==			
ANR	8514416	MemberAccess	VLNAME ( windowBits_IDAT ) [ i ] . name		8514365	0					
ANR	8514417	ArrayIndexing	VLNAME ( windowBits_IDAT ) [ i ]		8514365	0					
ANR	8514418	CallExpression	VLNAME ( windowBits_IDAT )		8514365	0					
ANR	8514419	Callee	VLNAME		8514365	0					
ANR	8514420	Identifier	VLNAME		8514365	0					
ANR	8514421	ArgumentList	windowBits_IDAT		8514365	1					
ANR	8514422	Argument	windowBits_IDAT		8514365	0					
ANR	8514423	Identifier	windowBits_IDAT		8514365	0					
ANR	8514424	Identifier	i		8514365	1					
ANR	8514425	Identifier	name		8514365	1					
ANR	8514426	Identifier	range_hi		8514365	1					
ANR	8514427	BreakStatement	break ;	2094:69:63507:63512	8514365	1	True				
ANR	8514428	ExpressionStatement	assert ( i > 1 )	2096:3:63518:63531	8514365	4	True				
ANR	8514429	CallExpression	assert ( i > 1 )		8514365	0					
ANR	8514430	Callee	assert		8514365	0					
ANR	8514431	Identifier	assert		8514365	0					
ANR	8514432	ArgumentList	i > 1		8514365	1					
ANR	8514433	Argument	i > 1		8514365	0					
ANR	8514434	RelationalExpression	i > 1		8514365	0		>			
ANR	8514435	Identifier	i		8514365	0					
ANR	8514436	PrimaryExpression	1		8514365	1					
ANR	8514437	ExpressionStatement	VLNAME ( windowBits_IDAT ) [ i ] . value = wb	2097:3:63582:63619	8514365	5	True				
ANR	8514438	AssignmentExpression	VLNAME ( windowBits_IDAT ) [ i ] . value = wb		8514365	0		=			
ANR	8514439	MemberAccess	VLNAME ( windowBits_IDAT ) [ i ] . value		8514365	0					
ANR	8514440	ArrayIndexing	VLNAME ( windowBits_IDAT ) [ i ]		8514365	0					
ANR	8514441	CallExpression	VLNAME ( windowBits_IDAT )		8514365	0					
ANR	8514442	Callee	VLNAME		8514365	0					
ANR	8514443	Identifier	VLNAME		8514365	0					
ANR	8514444	ArgumentList	windowBits_IDAT		8514365	1					
ANR	8514445	Argument	windowBits_IDAT		8514365	0					
ANR	8514446	Identifier	windowBits_IDAT		8514365	0					
ANR	8514447	Identifier	i		8514365	1					
ANR	8514448	Identifier	value		8514365	1					
ANR	8514449	Identifier	wb		8514365	1					
ANR	8514450	ExpressionStatement	assert ( VLNAME ( windowBits_IDAT ) [ -- i ] . name == range_lo )	2099:3:63625:63678	8514365	6	True				
ANR	8514451	CallExpression	assert ( VLNAME ( windowBits_IDAT ) [ -- i ] . name == range_lo )		8514365	0					
ANR	8514452	Callee	assert		8514365	0					
ANR	8514453	Identifier	assert		8514365	0					
ANR	8514454	ArgumentList	VLNAME ( windowBits_IDAT ) [ -- i ] . name == range_lo		8514365	1					
ANR	8514455	Argument	VLNAME ( windowBits_IDAT ) [ -- i ] . name == range_lo		8514365	0					
ANR	8514456	EqualityExpression	VLNAME ( windowBits_IDAT ) [ -- i ] . name == range_lo		8514365	0		==			
ANR	8514457	MemberAccess	VLNAME ( windowBits_IDAT ) [ -- i ] . name		8514365	0					
ANR	8514458	ArrayIndexing	VLNAME ( windowBits_IDAT ) [ -- i ]		8514365	0					
ANR	8514459	CallExpression	VLNAME ( windowBits_IDAT )		8514365	0					
ANR	8514460	Callee	VLNAME		8514365	0					
ANR	8514461	Identifier	VLNAME		8514365	0					
ANR	8514462	ArgumentList	windowBits_IDAT		8514365	1					
ANR	8514463	Argument	windowBits_IDAT		8514365	0					
ANR	8514464	Identifier	windowBits_IDAT		8514365	0					
ANR	8514465	UnaryExpression	-- i		8514365	1					
ANR	8514466	IncDec	--		8514365	0					
ANR	8514467	Identifier	i		8514365	1					
ANR	8514468	Identifier	name		8514365	1					
ANR	8514469	Identifier	range_lo		8514365	1					
ANR	8514470	ExpressionStatement	VLNAME ( windowBits_IDAT ) [ i ] . value = wb > 8 ? 9 : 8	2100:3:63683:63732	8514365	7	True				
ANR	8514471	AssignmentExpression	VLNAME ( windowBits_IDAT ) [ i ] . value = wb > 8 ? 9 : 8		8514365	0		=			
ANR	8514472	MemberAccess	VLNAME ( windowBits_IDAT ) [ i ] . value		8514365	0					
ANR	8514473	ArrayIndexing	VLNAME ( windowBits_IDAT ) [ i ]		8514365	0					
ANR	8514474	CallExpression	VLNAME ( windowBits_IDAT )		8514365	0					
ANR	8514475	Callee	VLNAME		8514365	0					
ANR	8514476	Identifier	VLNAME		8514365	0					
ANR	8514477	ArgumentList	windowBits_IDAT		8514365	1					
ANR	8514478	Argument	windowBits_IDAT		8514365	0					
ANR	8514479	Identifier	windowBits_IDAT		8514365	0					
ANR	8514480	Identifier	i		8514365	1					
ANR	8514481	Identifier	value		8514365	1					
ANR	8514482	ConditionalExpression	wb > 8 ? 9 : 8		8514365	1					
ANR	8514483	Condition	wb > 8		8514365	0					
ANR	8514484	RelationalExpression	wb > 8		8514365	0		>			
ANR	8514485	Identifier	wb		8514365	0					
ANR	8514486	PrimaryExpression	8		8514365	1					
ANR	8514487	PrimaryExpression	9		8514365	1					
ANR	8514488	PrimaryExpression	8		8514365	2					
ANR	8514489	IfStatement	if ( wb == 8 )		8514365	8					
ANR	8514490	Condition	wb == 8	2106:7:63917:63923	8514365	0	True				
ANR	8514491	EqualityExpression	wb == 8		8514365	0		==			
ANR	8514492	Identifier	wb		8514365	0					
ANR	8514493	PrimaryExpression	8		8514365	1					
ANR	8514494	ExpressionStatement	"dp -> min_windowBits = OPTIND ( dp , windowBits )"	2107:6:63932:63975	8514365	1	True				
ANR	8514495	AssignmentExpression	"dp -> min_windowBits = OPTIND ( dp , windowBits )"		8514365	0		=			
ANR	8514496	PtrMemberAccess	dp -> min_windowBits		8514365	0					
ANR	8514497	Identifier	dp		8514365	0					
ANR	8514498	Identifier	min_windowBits		8514365	1					
ANR	8514499	CallExpression	"OPTIND ( dp , windowBits )"		8514365	1					
ANR	8514500	Callee	OPTIND		8514365	0					
ANR	8514501	Identifier	OPTIND		8514365	0					
ANR	8514502	ArgumentList	dp		8514365	1					
ANR	8514503	Argument	dp		8514365	0					
ANR	8514504	Identifier	dp		8514365	0					
ANR	8514505	Argument	windowBits		8514365	1					
ANR	8514506	Identifier	windowBits		8514365	0					
ANR	8514507	ReturnType	static void		8514365	1					
ANR	8514508	Identifier	set_windowBits_hi		8514365	2					
ANR	8514509	ParameterList	struct display * dp		8514365	3					
ANR	8514510	Parameter	struct display * dp	2084:18:63141:63158	8514365	0	True				
ANR	8514511	ParameterType	struct display *		8514365	0					
ANR	8514512	Identifier	dp		8514365	1					
ANR	8514513	CFGEntryNode	ENTRY		8514365		True				
ANR	8514514	CFGExitNode	EXIT		8514365		True				
ANR	8514515	Symbol	VLSIZE		8514365						
ANR	8514516	Symbol	VLNAME ( windowBits_IDAT ) [ i ] . value		8514365						
ANR	8514517	Symbol	MAX_WBITS		8514365						
ANR	8514518	Symbol	i		8514365						
ANR	8514519	Symbol	dp -> min_windowBits		8514365						
ANR	8514520	Symbol	wb		8514365						
ANR	8514521	Symbol	dp		8514365						
ANR	8514522	Symbol	VLNAME ( windowBits_IDAT ) [ -- i ] . name		8514365						
ANR	8514523	Symbol	windowBits		8514365						
ANR	8514524	Symbol	* dp		8514365						
ANR	8514525	Symbol	range_hi		8514365						
ANR	8514526	Symbol	OPTIND		8514365						
ANR	8514527	Symbol	* i		8514365						
ANR	8514528	Symbol	VLNAME		8514365						
ANR	8514529	Symbol	windowBits_IDAT		8514365						
ANR	8514530	Symbol	range_lo		8514365						
ANR	8514531	Symbol	dp -> size		8514365						
ANR	8514532	Symbol	* VLNAME		8514365						
ANR	8514533	Symbol	VLNAME ( windowBits_IDAT ) [ i ] . name		8514365						
ANR	8514534	Function	better_options	2110:0:63980:65004							
ANR	8514535	FunctionDef	better_options (const struct display * dp)		8514534	0					
ANR	8514536	CompoundStatement		2112:0:64032:65004	8514534	0					
ANR	8514537	IdentifierDeclStatement	unsigned int sp ;	2127:3:64772:64787	8514534	0	True				
ANR	8514538	IdentifierDecl	sp		8514534	0					
ANR	8514539	IdentifierDeclType	unsigned int		8514534	0					
ANR	8514540	Identifier	sp		8514534	1					
ANR	8514541	ForStatement	for ( sp = 0 ; sp < dp -> csp ; ++ sp )		8514534	1					
ANR	8514542	ForInit	sp = 0 ;	2129:8:64798:64802	8514534	0	True				
ANR	8514543	AssignmentExpression	sp = 0		8514534	0		=			
ANR	8514544	Identifier	sp		8514534	0					
ANR	8514545	PrimaryExpression	0		8514534	1					
ANR	8514546	Condition	sp < dp -> csp	2129:14:64804:64813	8514534	1	True				
ANR	8514547	RelationalExpression	sp < dp -> csp		8514534	0		<			
ANR	8514548	Identifier	sp		8514534	0					
ANR	8514549	PtrMemberAccess	dp -> csp		8514534	1					
ANR	8514550	Identifier	dp		8514534	0					
ANR	8514551	Identifier	csp		8514534	1					
ANR	8514552	UnaryExpression	++ sp	2129:26:64816:64819	8514534	2	True				
ANR	8514553	IncDec	++		8514534	0					
ANR	8514554	Identifier	sp		8514534	1					
ANR	8514555	CompoundStatement		20:6:800:830	8514534	3					
ANR	8514556	IdentifierDeclStatement	"int c = compare_option ( dp , sp ) ;"	2131:6:64833:64863	8514534	0	True				
ANR	8514557	IdentifierDecl	"c = compare_option ( dp , sp )"		8514534	0					
ANR	8514558	IdentifierDeclType	int		8514534	0					
ANR	8514559	Identifier	c		8514534	1					
ANR	8514560	AssignmentExpression	"c = compare_option ( dp , sp )"		8514534	2		=			
ANR	8514561	Identifier	c		8514534	0					
ANR	8514562	CallExpression	"compare_option ( dp , sp )"		8514534	1					
ANR	8514563	Callee	compare_option		8514534	0					
ANR	8514564	Identifier	compare_option		8514534	0					
ANR	8514565	ArgumentList	dp		8514534	1					
ANR	8514566	Argument	dp		8514534	0					
ANR	8514567	Identifier	dp		8514534	0					
ANR	8514568	Argument	sp		8514534	1					
ANR	8514569	Identifier	sp		8514534	0					
ANR	8514570	IfStatement	if ( c < 0 )		8514534	1					
ANR	8514571	Condition	c < 0	2133:10:64876:64880	8514534	0	True				
ANR	8514572	RelationalExpression	c < 0		8514534	0		<			
ANR	8514573	Identifier	c		8514534	0					
ANR	8514574	PrimaryExpression	0		8514534	1					
ANR	8514575	ReturnStatement	return 0 ;	2134:9:64892:64900	8514534	1	True				
ANR	8514576	PrimaryExpression	0		8514534	0					
ANR	8514577	ElseStatement	else		8514534	0					
ANR	8514578	IfStatement	if ( c > 0 )		8514534	0					
ANR	8514579	Condition	c > 0	2136:15:64930:64934	8514534	0	True				
ANR	8514580	RelationalExpression	c > 0		8514534	0		>			
ANR	8514581	Identifier	c		8514534	0					
ANR	8514582	PrimaryExpression	0		8514534	1					
ANR	8514583	ReturnStatement	return 1 ;	2137:9:64946:64954	8514534	1	True				
ANR	8514584	PrimaryExpression	1		8514534	0					
ANR	8514585	ExpressionStatement	"assert ( 0 && ""unreached"" )"	2140:3:64978:65002	8514534	2	True				
ANR	8514586	CallExpression	"assert ( 0 && ""unreached"" )"		8514534	0					
ANR	8514587	Callee	assert		8514534	0					
ANR	8514588	Identifier	assert		8514534	0					
ANR	8514589	ArgumentList	"0 && ""unreached"""		8514534	1					
ANR	8514590	Argument	"0 && ""unreached"""		8514534	0					
ANR	8514591	AndExpression	"0 && ""unreached"""		8514534	0		&&			
ANR	8514592	PrimaryExpression	0		8514534	0					
ANR	8514593	PrimaryExpression	"""unreached"""		8514534	1					
ANR	8514594	ReturnType	static int		8514534	1					
ANR	8514595	Identifier	better_options		8514534	2					
ANR	8514596	ParameterList	const struct display * dp		8514534	3					
ANR	8514597	Parameter	const struct display * dp	2111:15:64006:64029	8514534	0	True				
ANR	8514598	ParameterType	const struct display *		8514534	0					
ANR	8514599	Identifier	dp		8514534	1					
ANR	8514600	CFGEntryNode	ENTRY		8514534		True				
ANR	8514601	CFGExitNode	EXIT		8514534		True				
ANR	8514602	Symbol	* dp		8514534						
ANR	8514603	Symbol	c		8514534						
ANR	8514604	Symbol	compare_option		8514534						
ANR	8514605	Symbol	dp		8514534						
ANR	8514606	Symbol	sp		8514534						
ANR	8514607	Symbol	dp -> csp		8514534						
ANR	8514608	Function	print_search_results	2143:0:65007:65380							
ANR	8514609	FunctionDef	print_search_results (struct display * dp)		8514608	0					
ANR	8514610	CompoundStatement		2145:0:65060:65380	8514608	0					
ANR	8514611	ExpressionStatement	assert ( dp -> filename != NULL )	2146:3:65065:65093	8514608	0	True				
ANR	8514612	CallExpression	assert ( dp -> filename != NULL )		8514608	0					
ANR	8514613	Callee	assert		8514608	0					
ANR	8514614	Identifier	assert		8514608	0					
ANR	8514615	ArgumentList	dp -> filename != NULL		8514608	1					
ANR	8514616	Argument	dp -> filename != NULL		8514608	0					
ANR	8514617	EqualityExpression	dp -> filename != NULL		8514608	0		!=			
ANR	8514618	PtrMemberAccess	dp -> filename		8514608	0					
ANR	8514619	Identifier	dp		8514608	0					
ANR	8514620	Identifier	filename		8514608	1					
ANR	8514621	Identifier	NULL		8514608	1					
ANR	8514622	ExpressionStatement	"printf ( ""%s [%ld x %ld %d bpp %s, %lu bytes] %lu -> %lu with '%s'\\n"" , dp -> filename , ( unsigned long ) dp -> w , ( unsigned long ) dp -> h , dp -> bpp , cts ( dp -> ct ) , ( unsigned long ) dp -> size , ( unsigned long ) dp -> read_size , ( unsigned long ) dp -> best_size , dp -> best )"	2147:3:65098:65359	8514608	1	True				
ANR	8514623	CallExpression	"printf ( ""%s [%ld x %ld %d bpp %s, %lu bytes] %lu -> %lu with '%s'\\n"" , dp -> filename , ( unsigned long ) dp -> w , ( unsigned long ) dp -> h , dp -> bpp , cts ( dp -> ct ) , ( unsigned long ) dp -> size , ( unsigned long ) dp -> read_size , ( unsigned long ) dp -> best_size , dp -> best )"		8514608	0					
ANR	8514624	Callee	printf		8514608	0					
ANR	8514625	Identifier	printf		8514608	0					
ANR	8514626	ArgumentList	"""%s [%ld x %ld %d bpp %s, %lu bytes] %lu -> %lu with '%s'\\n"""		8514608	1					
ANR	8514627	Argument	"""%s [%ld x %ld %d bpp %s, %lu bytes] %lu -> %lu with '%s'\\n"""		8514608	0					
ANR	8514628	PrimaryExpression	"""%s [%ld x %ld %d bpp %s, %lu bytes] %lu -> %lu with '%s'\\n"""		8514608	0					
ANR	8514629	Argument	dp -> filename		8514608	1					
ANR	8514630	PtrMemberAccess	dp -> filename		8514608	0					
ANR	8514631	Identifier	dp		8514608	0					
ANR	8514632	Identifier	filename		8514608	1					
ANR	8514633	Argument	( unsigned long ) dp -> w		8514608	2					
ANR	8514634	CastExpression	( unsigned long ) dp -> w		8514608	0					
ANR	8514635	CastTarget	unsigned long		8514608	0					
ANR	8514636	PtrMemberAccess	dp -> w		8514608	1					
ANR	8514637	Identifier	dp		8514608	0					
ANR	8514638	Identifier	w		8514608	1					
ANR	8514639	Argument	( unsigned long ) dp -> h		8514608	3					
ANR	8514640	CastExpression	( unsigned long ) dp -> h		8514608	0					
ANR	8514641	CastTarget	unsigned long		8514608	0					
ANR	8514642	PtrMemberAccess	dp -> h		8514608	1					
ANR	8514643	Identifier	dp		8514608	0					
ANR	8514644	Identifier	h		8514608	1					
ANR	8514645	Argument	dp -> bpp		8514608	4					
ANR	8514646	PtrMemberAccess	dp -> bpp		8514608	0					
ANR	8514647	Identifier	dp		8514608	0					
ANR	8514648	Identifier	bpp		8514608	1					
ANR	8514649	Argument	cts ( dp -> ct )		8514608	5					
ANR	8514650	CallExpression	cts ( dp -> ct )		8514608	0					
ANR	8514651	Callee	cts		8514608	0					
ANR	8514652	Identifier	cts		8514608	0					
ANR	8514653	ArgumentList	dp -> ct		8514608	1					
ANR	8514654	Argument	dp -> ct		8514608	0					
ANR	8514655	PtrMemberAccess	dp -> ct		8514608	0					
ANR	8514656	Identifier	dp		8514608	0					
ANR	8514657	Identifier	ct		8514608	1					
ANR	8514658	Argument	( unsigned long ) dp -> size		8514608	6					
ANR	8514659	CastExpression	( unsigned long ) dp -> size		8514608	0					
ANR	8514660	CastTarget	unsigned long		8514608	0					
ANR	8514661	PtrMemberAccess	dp -> size		8514608	1					
ANR	8514662	Identifier	dp		8514608	0					
ANR	8514663	Identifier	size		8514608	1					
ANR	8514664	Argument	( unsigned long ) dp -> read_size		8514608	7					
ANR	8514665	CastExpression	( unsigned long ) dp -> read_size		8514608	0					
ANR	8514666	CastTarget	unsigned long		8514608	0					
ANR	8514667	PtrMemberAccess	dp -> read_size		8514608	1					
ANR	8514668	Identifier	dp		8514608	0					
ANR	8514669	Identifier	read_size		8514608	1					
ANR	8514670	Argument	( unsigned long ) dp -> best_size		8514608	8					
ANR	8514671	CastExpression	( unsigned long ) dp -> best_size		8514608	0					
ANR	8514672	CastTarget	unsigned long		8514608	0					
ANR	8514673	PtrMemberAccess	dp -> best_size		8514608	1					
ANR	8514674	Identifier	dp		8514608	0					
ANR	8514675	Identifier	best_size		8514608	1					
ANR	8514676	Argument	dp -> best		8514608	9					
ANR	8514677	PtrMemberAccess	dp -> best		8514608	0					
ANR	8514678	Identifier	dp		8514608	0					
ANR	8514679	Identifier	best		8514608	1					
ANR	8514680	ExpressionStatement	fflush ( stdout )	2151:3:65364:65378	8514608	2	True				
ANR	8514681	CallExpression	fflush ( stdout )		8514608	0					
ANR	8514682	Callee	fflush		8514608	0					
ANR	8514683	Identifier	fflush		8514608	0					
ANR	8514684	ArgumentList	stdout		8514608	1					
ANR	8514685	Argument	stdout		8514608	0					
ANR	8514686	Identifier	stdout		8514608	0					
ANR	8514687	ReturnType	static void		8514608	1					
ANR	8514688	Identifier	print_search_results		8514608	2					
ANR	8514689	ParameterList	struct display * dp		8514608	3					
ANR	8514690	Parameter	struct display * dp	2144:21:65040:65057	8514608	0	True				
ANR	8514691	ParameterType	struct display *		8514608	0					
ANR	8514692	Identifier	dp		8514608	1					
ANR	8514693	CFGEntryNode	ENTRY		8514608		True				
ANR	8514694	CFGExitNode	EXIT		8514608		True				
ANR	8514695	Symbol	NULL		8514608						
ANR	8514696	Symbol	dp -> best		8514608						
ANR	8514697	Symbol	cts		8514608						
ANR	8514698	Symbol	dp -> best_size		8514608						
ANR	8514699	Symbol	dp -> read_size		8514608						
ANR	8514700	Symbol	stdout		8514608						
ANR	8514701	Symbol	dp -> filename		8514608						
ANR	8514702	Symbol	dp -> h		8514608						
ANR	8514703	Symbol	dp		8514608						
ANR	8514704	Symbol	dp -> bpp		8514608						
ANR	8514705	Symbol	dp -> ct		8514608						
ANR	8514706	Symbol	* dp		8514608						
ANR	8514707	Symbol	dp -> size		8514608						
ANR	8514708	Symbol	dp -> w		8514608						
ANR	8514709	Function	log_search	2154:0:65383:65664							
ANR	8514710	FunctionDef	"log_search (struct display * dp , unsigned int log_depth)"		8514709	0					
ANR	8514711	CompoundStatement		2156:0:65450:65664	8514709	0					
ANR	8514712	IfStatement	if ( dp -> nsp <= log_depth )		8514709	0					
ANR	8514713	Condition	dp -> nsp <= log_depth	2158:7:65503:65546	8514709	0	True				
ANR	8514714	RelationalExpression	dp -> nsp <= log_depth		8514709	0		<=			
ANR	8514715	PtrMemberAccess	dp -> nsp		8514709	0					
ANR	8514716	Identifier	dp		8514709	0					
ANR	8514717	Identifier	nsp		8514709	1					
ANR	8514718	Identifier	log_depth		8514709	1					
ANR	8514719	CompoundStatement		4:3:101:101	8514709	1					
ANR	8514720	ExpressionStatement	print_search_results ( dp )	2160:6:65560:65584	8514709	0	True				
ANR	8514721	CallExpression	print_search_results ( dp )		8514709	0					
ANR	8514722	Callee	print_search_results		8514709	0					
ANR	8514723	Identifier	print_search_results		8514709	0					
ANR	8514724	ArgumentList	dp		8514709	1					
ANR	8514725	Argument	dp		8514709	0					
ANR	8514726	Identifier	dp		8514709	0					
ANR	8514727	ExpressionStatement	dp -> best_size = MAX_SIZE	2162:6:65633:65657	8514709	1	True				
ANR	8514728	AssignmentExpression	dp -> best_size = MAX_SIZE		8514709	0		=			
ANR	8514729	PtrMemberAccess	dp -> best_size		8514709	0					
ANR	8514730	Identifier	dp		8514709	0					
ANR	8514731	Identifier	best_size		8514709	1					
ANR	8514732	Identifier	MAX_SIZE		8514709	1					
ANR	8514733	ReturnType	static void		8514709	1					
ANR	8514734	Identifier	log_search		8514709	2					
ANR	8514735	ParameterList	"struct display * dp , unsigned int log_depth"		8514709	3					
ANR	8514736	Parameter	struct display * dp	2155:11:65406:65423	8514709	0	True				
ANR	8514737	ParameterType	struct display *		8514709	0					
ANR	8514738	Identifier	dp		8514709	1					
ANR	8514739	Parameter	unsigned int log_depth	2155:31:65426:65447	8514709	1	True				
ANR	8514740	ParameterType	unsigned int		8514709	0					
ANR	8514741	Identifier	log_depth		8514709	1					
ANR	8514742	CFGEntryNode	ENTRY		8514709		True				
ANR	8514743	CFGExitNode	EXIT		8514709		True				
ANR	8514744	Symbol	* dp		8514709						
ANR	8514745	Symbol	dp -> best_size		8514709						
ANR	8514746	Symbol	MAX_SIZE		8514709						
ANR	8514747	Symbol	log_depth		8514709						
ANR	8514748	Symbol	dp -> nsp		8514709						
ANR	8514749	Symbol	dp		8514709						
ANR	8514750	Function	cp_one_file	2166:0:65667:68695							
ANR	8514751	FunctionDef	"cp_one_file (struct display * dp , const char * filename , const char * destname)"		8514750	0					
ANR	8514752	CompoundStatement		2168:0:65755:68695	8514750	0					
ANR	8514753	IdentifierDeclStatement	unsigned int log_depth ;	2169:3:65760:65782	8514750	0	True				
ANR	8514754	IdentifierDecl	log_depth		8514750	0					
ANR	8514755	IdentifierDeclType	unsigned int		8514750	0					
ANR	8514756	Identifier	log_depth		8514750	1					
ANR	8514757	ExpressionStatement	dp -> filename = filename	2171:3:65788:65811	8514750	1	True				
ANR	8514758	AssignmentExpression	dp -> filename = filename		8514750	0		=			
ANR	8514759	PtrMemberAccess	dp -> filename		8514750	0					
ANR	8514760	Identifier	dp		8514750	0					
ANR	8514761	Identifier	filename		8514750	1					
ANR	8514762	Identifier	filename		8514750	1					
ANR	8514763	ExpressionStatement	"dp -> operation = ""read"""	2172:3:65816:65838	8514750	2	True				
ANR	8514764	AssignmentExpression	"dp -> operation = ""read"""		8514750	0		=			
ANR	8514765	PtrMemberAccess	dp -> operation		8514750	0					
ANR	8514766	Identifier	dp		8514750	0					
ANR	8514767	Identifier	operation		8514750	1					
ANR	8514768	PrimaryExpression	"""read"""		8514750	1					
ANR	8514769	ExpressionStatement	dp -> no_warnings = 0	2173:3:65843:65862	8514750	3	True				
ANR	8514770	AssignmentExpression	dp -> no_warnings = 0		8514750	0		=			
ANR	8514771	PtrMemberAccess	dp -> no_warnings		8514750	0					
ANR	8514772	Identifier	dp		8514750	0					
ANR	8514773	Identifier	no_warnings		8514750	1					
ANR	8514774	PrimaryExpression	0		8514750	1					
ANR	8514775	IfStatement	"if ( filename != NULL && access ( filename , R_OK ) != 0 )"		8514750	4					
ANR	8514776	Condition	"filename != NULL && access ( filename , R_OK ) != 0"	2176:7:65904:65950	8514750	0	True				
ANR	8514777	AndExpression	"filename != NULL && access ( filename , R_OK ) != 0"		8514750	0		&&			
ANR	8514778	EqualityExpression	filename != NULL		8514750	0		!=			
ANR	8514779	Identifier	filename		8514750	0					
ANR	8514780	Identifier	NULL		8514750	1					
ANR	8514781	EqualityExpression	"access ( filename , R_OK ) != 0"		8514750	1		!=			
ANR	8514782	CallExpression	"access ( filename , R_OK )"		8514750	0					
ANR	8514783	Callee	access		8514750	0					
ANR	8514784	Identifier	access		8514750	0					
ANR	8514785	ArgumentList	filename		8514750	1					
ANR	8514786	Argument	filename		8514750	0					
ANR	8514787	Identifier	filename		8514750	0					
ANR	8514788	Argument	R_OK		8514750	1					
ANR	8514789	Identifier	R_OK		8514750	0					
ANR	8514790	PrimaryExpression	0		8514750	1					
ANR	8514791	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%s: invalid file name (%s)"" , filename , strerror ( errno ) )"	2177:6:65959:66055	8514750	1	True				
ANR	8514792	CallExpression	"display_log ( dp , USER_ERROR , ""%s: invalid file name (%s)"" , filename , strerror ( errno ) )"		8514750	0					
ANR	8514793	Callee	display_log		8514750	0					
ANR	8514794	Identifier	display_log		8514750	0					
ANR	8514795	ArgumentList	dp		8514750	1					
ANR	8514796	Argument	dp		8514750	0					
ANR	8514797	Identifier	dp		8514750	0					
ANR	8514798	Argument	USER_ERROR		8514750	1					
ANR	8514799	Identifier	USER_ERROR		8514750	0					
ANR	8514800	Argument	"""%s: invalid file name (%s)"""		8514750	2					
ANR	8514801	PrimaryExpression	"""%s: invalid file name (%s)"""		8514750	0					
ANR	8514802	Argument	filename		8514750	3					
ANR	8514803	Identifier	filename		8514750	0					
ANR	8514804	Argument	strerror ( errno )		8514750	4					
ANR	8514805	CallExpression	strerror ( errno )		8514750	0					
ANR	8514806	Callee	strerror		8514750	0					
ANR	8514807	Identifier	strerror		8514750	0					
ANR	8514808	ArgumentList	errno		8514750	1					
ANR	8514809	Argument	errno		8514750	0					
ANR	8514810	Identifier	errno		8514750	0					
ANR	8514811	ExpressionStatement	"read_png ( dp , filename )"	2180:3:66061:66083	8514750	5	True				
ANR	8514812	CallExpression	"read_png ( dp , filename )"		8514750	0					
ANR	8514813	Callee	read_png		8514750	0					
ANR	8514814	Identifier	read_png		8514750	0					
ANR	8514815	ArgumentList	dp		8514750	1					
ANR	8514816	Argument	dp		8514750	0					
ANR	8514817	Identifier	dp		8514750	0					
ANR	8514818	Argument	filename		8514750	1					
ANR	8514819	Identifier	filename		8514750	0					
ANR	8514820	ExpressionStatement	"dp -> operation = ""write"""	2183:3:66133:66156	8514750	6	True				
ANR	8514821	AssignmentExpression	"dp -> operation = ""write"""		8514750	0		=			
ANR	8514822	PtrMemberAccess	dp -> operation		8514750	0					
ANR	8514823	Identifier	dp		8514750	0					
ANR	8514824	Identifier	operation		8514750	1					
ANR	8514825	PrimaryExpression	"""write"""		8514750	1					
ANR	8514826	ExpressionStatement	set_windowBits_hi ( dp )	2186:3:66229:66250	8514750	7	True				
ANR	8514827	CallExpression	set_windowBits_hi ( dp )		8514750	0					
ANR	8514828	Callee	set_windowBits_hi		8514750	0					
ANR	8514829	Identifier	set_windowBits_hi		8514750	0					
ANR	8514830	ArgumentList	dp		8514750	1					
ANR	8514831	Argument	dp		8514750	0					
ANR	8514832	Identifier	dp		8514750	0					
ANR	8514833	CompoundStatement		23:6:544:551	8514750	8					
ANR	8514834	IdentifierDeclStatement	int val ;	2190:6:66300:66307	8514750	0	True				
ANR	8514835	IdentifierDecl	val		8514750	0					
ANR	8514836	IdentifierDeclType	int		8514750	0					
ANR	8514837	Identifier	val		8514750	1					
ANR	8514838	IfStatement	"if ( get_option ( dp , ""log-depth"" , & val ) && val >= 0 )"		8514750	1					
ANR	8514839	Condition	"get_option ( dp , ""log-depth"" , & val ) && val >= 0"	2192:10:66320:66364	8514750	0	True				
ANR	8514840	AndExpression	"get_option ( dp , ""log-depth"" , & val ) && val >= 0"		8514750	0		&&			
ANR	8514841	CallExpression	"get_option ( dp , ""log-depth"" , & val )"		8514750	0					
ANR	8514842	Callee	get_option		8514750	0					
ANR	8514843	Identifier	get_option		8514750	0					
ANR	8514844	ArgumentList	dp		8514750	1					
ANR	8514845	Argument	dp		8514750	0					
ANR	8514846	Identifier	dp		8514750	0					
ANR	8514847	Argument	"""log-depth"""		8514750	1					
ANR	8514848	PrimaryExpression	"""log-depth"""		8514750	0					
ANR	8514849	Argument	& val		8514750	2					
ANR	8514850	UnaryOperationExpression	& val		8514750	0					
ANR	8514851	UnaryOperator	&		8514750	0					
ANR	8514852	Identifier	val		8514750	1					
ANR	8514853	RelationalExpression	val >= 0		8514750	1		>=			
ANR	8514854	Identifier	val		8514750	0					
ANR	8514855	PrimaryExpression	0		8514750	1					
ANR	8514856	ExpressionStatement	log_depth = ( unsigned int ) val	2193:9:66376:66413	8514750	1	True				
ANR	8514857	AssignmentExpression	log_depth = ( unsigned int ) val		8514750	0		=			
ANR	8514858	Identifier	log_depth		8514750	0					
ANR	8514859	CastExpression	( unsigned int ) val		8514750	1					
ANR	8514860	CastTarget	unsigned int		8514750	0					
ANR	8514861	Identifier	val		8514750	1					
ANR	8514862	ElseStatement	else		8514750	0					
ANR	8514863	ExpressionStatement	log_depth = 0U	2196:9:66436:66450	8514750	0	True				
ANR	8514864	AssignmentExpression	log_depth = 0U		8514750	0		=			
ANR	8514865	Identifier	log_depth		8514750	0					
ANR	8514866	PrimaryExpression	0U		8514750	1					
ANR	8514867	IfStatement	if ( destname != NULL )		8514750	9					
ANR	8514868	Condition	destname != NULL	2199:7:66465:66480	8514750	0	True				
ANR	8514869	EqualityExpression	destname != NULL		8514750	0		!=			
ANR	8514870	Identifier	destname		8514750	0					
ANR	8514871	Identifier	NULL		8514750	1					
ANR	8514872	CompoundStatement		33:3:748:748	8514750	1					
ANR	8514873	IfStatement	"if ( isdir ( dp , destname ) )"		8514750	0					
ANR	8514874	Condition	"isdir ( dp , destname )"	2201:10:66516:66534	8514750	0	True				
ANR	8514875	CallExpression	"isdir ( dp , destname )"		8514750	0					
ANR	8514876	Callee	isdir		8514750	0					
ANR	8514877	Identifier	isdir		8514750	0					
ANR	8514878	ArgumentList	dp		8514750	1					
ANR	8514879	Argument	dp		8514750	0					
ANR	8514880	Identifier	dp		8514750	0					
ANR	8514881	Argument	destname		8514750	1					
ANR	8514882	Identifier	destname		8514750	0					
ANR	8514883	CompoundStatement		35:6:787:787	8514750	1					
ANR	8514884	ExpressionStatement	"makename ( dp , destname , filename )"	2203:9:66554:66586	8514750	0	True				
ANR	8514885	CallExpression	"makename ( dp , destname , filename )"		8514750	0					
ANR	8514886	Callee	makename		8514750	0					
ANR	8514887	Identifier	makename		8514750	0					
ANR	8514888	ArgumentList	dp		8514750	1					
ANR	8514889	Argument	dp		8514750	0					
ANR	8514890	Identifier	dp		8514750	0					
ANR	8514891	Argument	destname		8514750	1					
ANR	8514892	Identifier	destname		8514750	0					
ANR	8514893	Argument	filename		8514750	2					
ANR	8514894	Identifier	filename		8514750	0					
ANR	8514895	ExpressionStatement	destname = dp -> namebuf	2204:9:66597:66619	8514750	1	True				
ANR	8514896	AssignmentExpression	destname = dp -> namebuf		8514750	0		=			
ANR	8514897	Identifier	destname		8514750	0					
ANR	8514898	PtrMemberAccess	dp -> namebuf		8514750	1					
ANR	8514899	Identifier	dp		8514750	0					
ANR	8514900	Identifier	namebuf		8514750	1					
ANR	8514901	ElseStatement	else		8514750	0					
ANR	8514902	IfStatement	"if ( access ( destname , W_OK ) != 0 && errno != ENOENT )"		8514750	0					
ANR	8514903	Condition	"access ( destname , W_OK ) != 0 && errno != ENOENT"	2207:15:66645:66690	8514750	0	True				
ANR	8514904	AndExpression	"access ( destname , W_OK ) != 0 && errno != ENOENT"		8514750	0		&&			
ANR	8514905	EqualityExpression	"access ( destname , W_OK ) != 0"		8514750	0		!=			
ANR	8514906	CallExpression	"access ( destname , W_OK )"		8514750	0					
ANR	8514907	Callee	access		8514750	0					
ANR	8514908	Identifier	access		8514750	0					
ANR	8514909	ArgumentList	destname		8514750	1					
ANR	8514910	Argument	destname		8514750	0					
ANR	8514911	Identifier	destname		8514750	0					
ANR	8514912	Argument	W_OK		8514750	1					
ANR	8514913	Identifier	W_OK		8514750	0					
ANR	8514914	PrimaryExpression	0		8514750	1					
ANR	8514915	EqualityExpression	errno != ENOENT		8514750	1		!=			
ANR	8514916	Identifier	errno		8514750	0					
ANR	8514917	Identifier	ENOENT		8514750	1					
ANR	8514918	ExpressionStatement	"display_log ( dp , USER_ERROR , ""%s: invalid output name (%s)"" , destname , strerror ( errno ) )"	2208:9:66702:66803	8514750	1	True				
ANR	8514919	CallExpression	"display_log ( dp , USER_ERROR , ""%s: invalid output name (%s)"" , destname , strerror ( errno ) )"		8514750	0					
ANR	8514920	Callee	display_log		8514750	0					
ANR	8514921	Identifier	display_log		8514750	0					
ANR	8514922	ArgumentList	dp		8514750	1					
ANR	8514923	Argument	dp		8514750	0					
ANR	8514924	Identifier	dp		8514750	0					
ANR	8514925	Argument	USER_ERROR		8514750	1					
ANR	8514926	Identifier	USER_ERROR		8514750	0					
ANR	8514927	Argument	"""%s: invalid output name (%s)"""		8514750	2					
ANR	8514928	PrimaryExpression	"""%s: invalid output name (%s)"""		8514750	0					
ANR	8514929	Argument	destname		8514750	3					
ANR	8514930	Identifier	destname		8514750	0					
ANR	8514931	Argument	strerror ( errno )		8514750	4					
ANR	8514932	CallExpression	strerror ( errno )		8514750	0					
ANR	8514933	Callee	strerror		8514750	0					
ANR	8514934	Identifier	strerror		8514750	0					
ANR	8514935	ArgumentList	errno		8514750	1					
ANR	8514936	Argument	errno		8514750	0					
ANR	8514937	Identifier	errno		8514750	0					
ANR	8514938	ExpressionStatement	dp -> nsp = 0	2212:3:66814:66825	8514750	10	True				
ANR	8514939	AssignmentExpression	dp -> nsp = 0		8514750	0		=			
ANR	8514940	PtrMemberAccess	dp -> nsp		8514750	0					
ANR	8514941	Identifier	dp		8514750	0					
ANR	8514942	Identifier	nsp		8514750	1					
ANR	8514943	PrimaryExpression	0		8514750	1					
ANR	8514944	ExpressionStatement	dp -> curr [ 0 ] = 0	2213:3:66830:66845	8514750	11	True				
ANR	8514945	AssignmentExpression	dp -> curr [ 0 ] = 0		8514750	0		=			
ANR	8514946	ArrayIndexing	dp -> curr [ 0 ]		8514750	0					
ANR	8514947	PtrMemberAccess	dp -> curr		8514750	0					
ANR	8514948	Identifier	dp		8514750	0					
ANR	8514949	Identifier	curr		8514750	1					
ANR	8514950	PrimaryExpression	0		8514750	1					
ANR	8514951	PrimaryExpression	0		8514750	1					
ANR	8514952	ExpressionStatement	dp -> opt_string_start = 0	2214:3:66886:66910	8514750	12	True				
ANR	8514953	AssignmentExpression	dp -> opt_string_start = 0		8514750	0		=			
ANR	8514954	PtrMemberAccess	dp -> opt_string_start		8514750	0					
ANR	8514955	Identifier	dp		8514750	0					
ANR	8514956	Identifier	opt_string_start		8514750	1					
ANR	8514957	PrimaryExpression	0		8514750	1					
ANR	8514958	ExpressionStatement	dp -> best [ 0 ] = 0	2215:3:66915:66930	8514750	13	True				
ANR	8514959	AssignmentExpression	dp -> best [ 0 ] = 0		8514750	0		=			
ANR	8514960	ArrayIndexing	dp -> best [ 0 ]		8514750	0					
ANR	8514961	PtrMemberAccess	dp -> best		8514750	0					
ANR	8514962	Identifier	dp		8514750	0					
ANR	8514963	Identifier	best		8514750	1					
ANR	8514964	PrimaryExpression	0		8514750	1					
ANR	8514965	PrimaryExpression	0		8514750	1					
ANR	8514966	ExpressionStatement	dp -> best_size = MAX_SIZE	2216:3:66948:66972	8514750	14	True				
ANR	8514967	AssignmentExpression	dp -> best_size = MAX_SIZE		8514750	0		=			
ANR	8514968	PtrMemberAccess	dp -> best_size		8514750	0					
ANR	8514969	Identifier	dp		8514750	0					
ANR	8514970	Identifier	best_size		8514750	1					
ANR	8514971	Identifier	MAX_SIZE		8514750	1					
ANR	8514972	ExpressionStatement	"write_png ( dp , destname )"	2217:3:66977:67000	8514750	15	True				
ANR	8514973	CallExpression	"write_png ( dp , destname )"		8514750	0					
ANR	8514974	Callee	write_png		8514750	0					
ANR	8514975	Identifier	write_png		8514750	0					
ANR	8514976	ArgumentList	dp		8514750	1					
ANR	8514977	Argument	dp		8514750	0					
ANR	8514978	Identifier	dp		8514750	0					
ANR	8514979	Argument	destname		8514750	1					
ANR	8514980	Identifier	destname		8514750	0					
ANR	8514981	ExpressionStatement	"strcpy ( dp -> best , dp -> curr )"	2220:3:67045:67071	8514750	16	True				
ANR	8514982	CallExpression	"strcpy ( dp -> best , dp -> curr )"		8514750	0					
ANR	8514983	Callee	strcpy		8514750	0					
ANR	8514984	Identifier	strcpy		8514750	0					
ANR	8514985	ArgumentList	dp -> best		8514750	1					
ANR	8514986	Argument	dp -> best		8514750	0					
ANR	8514987	PtrMemberAccess	dp -> best		8514750	0					
ANR	8514988	Identifier	dp		8514750	0					
ANR	8514989	Identifier	best		8514750	1					
ANR	8514990	Argument	dp -> curr		8514750	1					
ANR	8514991	PtrMemberAccess	dp -> curr		8514750	0					
ANR	8514992	Identifier	dp		8514750	0					
ANR	8514993	Identifier	curr		8514750	1					
ANR	8514994	ExpressionStatement	dp -> best_size = dp -> write_size	2221:3:67076:67106	8514750	17	True				
ANR	8514995	AssignmentExpression	dp -> best_size = dp -> write_size		8514750	0		=			
ANR	8514996	PtrMemberAccess	dp -> best_size		8514750	0					
ANR	8514997	Identifier	dp		8514750	0					
ANR	8514998	Identifier	best_size		8514750	1					
ANR	8514999	PtrMemberAccess	dp -> write_size		8514750	1					
ANR	8515000	Identifier	dp		8514750	0					
ANR	8515001	Identifier	write_size		8514750	1					
ANR	8515002	IfStatement	if ( dp -> nsp > 0 )		8514750	18					
ANR	8515003	Condition	dp -> nsp > 0	2223:7:67116:67126	8514750	0	True				
ANR	8515004	RelationalExpression	dp -> nsp > 0		8514750	0		>			
ANR	8515005	PtrMemberAccess	dp -> nsp		8514750	0					
ANR	8515006	Identifier	dp		8514750	0					
ANR	8515007	Identifier	nsp		8514750	1					
ANR	8515008	PrimaryExpression	0		8514750	1					
ANR	8515009	CompoundStatement		58:6:1412:1459	8514750	1					
ANR	8515010	IdentifierDeclStatement	"char * tmpname , tmpbuf [ ( sizeof dp -> namebuf ) + 4 ] ;"	2225:6:67168:67215	8514750	0	True				
ANR	8515011	IdentifierDecl	* tmpname		8514750	0					
ANR	8515012	IdentifierDeclType	char *		8514750	0					
ANR	8515013	Identifier	tmpname		8514750	1					
ANR	8515014	IdentifierDecl	tmpbuf [ ( sizeof dp -> namebuf ) + 4 ]		8514750	1					
ANR	8515015	IdentifierDeclType	char [ ( sizeof dp -> namebuf ) + 4 ]		8514750	0					
ANR	8515016	Identifier	tmpbuf		8514750	1					
ANR	8515017	AdditiveExpression	( sizeof dp -> namebuf ) + 4		8514750	2		+			
ANR	8515018	SizeofExpression	sizeof dp -> namebuf		8514750	0					
ANR	8515019	Sizeof	sizeof		8514750	0					
ANR	8515020	PtrMemberAccess	dp -> namebuf		8514750	1					
ANR	8515021	Identifier	dp		8514750	0					
ANR	8515022	Identifier	namebuf		8514750	1					
ANR	8515023	PrimaryExpression	4		8514750	1					
ANR	8515024	ExpressionStatement	assert ( dp -> curr [ 0 ] == ' ' && dp -> tsp > 0 )	2226:6:67223:67264	8514750	1	True				
ANR	8515025	CallExpression	assert ( dp -> curr [ 0 ] == ' ' && dp -> tsp > 0 )		8514750	0					
ANR	8515026	Callee	assert		8514750	0					
ANR	8515027	Identifier	assert		8514750	0					
ANR	8515028	ArgumentList	dp -> curr [ 0 ] == ' ' && dp -> tsp > 0		8514750	1					
ANR	8515029	Argument	dp -> curr [ 0 ] == ' ' && dp -> tsp > 0		8514750	0					
ANR	8515030	AndExpression	dp -> curr [ 0 ] == ' ' && dp -> tsp > 0		8514750	0		&&			
ANR	8515031	EqualityExpression	dp -> curr [ 0 ] == ' '		8514750	0		==			
ANR	8515032	ArrayIndexing	dp -> curr [ 0 ]		8514750	0					
ANR	8515033	PtrMemberAccess	dp -> curr		8514750	0					
ANR	8515034	Identifier	dp		8514750	0					
ANR	8515035	Identifier	curr		8514750	1					
ANR	8515036	PrimaryExpression	0		8514750	1					
ANR	8515037	PrimaryExpression	' '		8514750	1					
ANR	8515038	RelationalExpression	dp -> tsp > 0		8514750	1		>			
ANR	8515039	PtrMemberAccess	dp -> tsp		8514750	0					
ANR	8515040	Identifier	dp		8514750	0					
ANR	8515041	Identifier	tsp		8514750	1					
ANR	8515042	PrimaryExpression	0		8514750	1					
ANR	8515043	ExpressionStatement	"log_search ( dp , log_depth )"	2229:6:67322:67347	8514750	2	True				
ANR	8515044	CallExpression	"log_search ( dp , log_depth )"		8514750	0					
ANR	8515045	Callee	log_search		8514750	0					
ANR	8515046	Identifier	log_search		8514750	0					
ANR	8515047	ArgumentList	dp		8514750	1					
ANR	8515048	Argument	dp		8514750	0					
ANR	8515049	Identifier	dp		8514750	0					
ANR	8515050	Argument	log_depth		8514750	1					
ANR	8515051	Identifier	log_depth		8514750	0					
ANR	8515052	ExpressionStatement	dp -> no_warnings = 1	2230:6:67355:67374	8514750	3	True				
ANR	8515053	AssignmentExpression	dp -> no_warnings = 1		8514750	0		=			
ANR	8515054	PtrMemberAccess	dp -> no_warnings		8514750	0					
ANR	8515055	Identifier	dp		8514750	0					
ANR	8515056	Identifier	no_warnings		8514750	1					
ANR	8515057	PrimaryExpression	1		8514750	1					
ANR	8515058	IfStatement	if ( destname != NULL )		8514750	4					
ANR	8515059	Condition	destname != NULL	2233:10:67447:67462	8514750	0	True				
ANR	8515060	EqualityExpression	destname != NULL		8514750	0		!=			
ANR	8515061	Identifier	destname		8514750	0					
ANR	8515062	Identifier	NULL		8514750	1					
ANR	8515063	CompoundStatement		67:6:1715:1715	8514750	1					
ANR	8515064	ExpressionStatement	"strcpy ( tmpbuf , destname )"	2235:9:67482:67506	8514750	0	True				
ANR	8515065	CallExpression	"strcpy ( tmpbuf , destname )"		8514750	0					
ANR	8515066	Callee	strcpy		8514750	0					
ANR	8515067	Identifier	strcpy		8514750	0					
ANR	8515068	ArgumentList	tmpbuf		8514750	1					
ANR	8515069	Argument	tmpbuf		8514750	0					
ANR	8515070	Identifier	tmpbuf		8514750	0					
ANR	8515071	Argument	destname		8514750	1					
ANR	8515072	Identifier	destname		8514750	0					
ANR	8515073	ExpressionStatement	"strcat ( tmpbuf , "".tmp"" )"	2236:9:67517:67539	8514750	1	True				
ANR	8515074	CallExpression	"strcat ( tmpbuf , "".tmp"" )"		8514750	0					
ANR	8515075	Callee	strcat		8514750	0					
ANR	8515076	Identifier	strcat		8514750	0					
ANR	8515077	ArgumentList	tmpbuf		8514750	1					
ANR	8515078	Argument	tmpbuf		8514750	0					
ANR	8515079	Identifier	tmpbuf		8514750	0					
ANR	8515080	Argument	""".tmp"""		8514750	1					
ANR	8515081	PrimaryExpression	""".tmp"""		8514750	0					
ANR	8515082	ExpressionStatement	tmpname = tmpbuf	2237:9:67587:67603	8514750	2	True				
ANR	8515083	AssignmentExpression	tmpname = tmpbuf		8514750	0		=			
ANR	8515084	Identifier	tmpname		8514750	0					
ANR	8515085	Identifier	tmpbuf		8514750	1					
ANR	8515086	ElseStatement	else		8514750	0					
ANR	8515087	ExpressionStatement	tmpname = NULL	2241:9:67634:67648	8514750	0	True				
ANR	8515088	AssignmentExpression	tmpname = NULL		8514750	0		=			
ANR	8515089	Identifier	tmpname		8514750	0					
ANR	8515090	Identifier	NULL		8514750	1					
ANR	8515091	DoStatement	do		8514750	5					
ANR	8515092	CompoundStatement		78:6:1965:1965	8514750	0					
ANR	8515093	ExpressionStatement	"write_png ( dp , tmpname )"	2246:9:67732:67754	8514750	0	True				
ANR	8515094	CallExpression	"write_png ( dp , tmpname )"		8514750	0					
ANR	8515095	Callee	write_png		8514750	0					
ANR	8515096	Identifier	write_png		8514750	0					
ANR	8515097	ArgumentList	dp		8514750	1					
ANR	8515098	Argument	dp		8514750	0					
ANR	8515099	Identifier	dp		8514750	0					
ANR	8515100	Argument	tmpname		8514750	1					
ANR	8515101	Identifier	tmpname		8514750	0					
ANR	8515102	ExpressionStatement	assert ( dp -> csp > 0 )	2251:9:67886:67905	8514750	1	True				
ANR	8515103	CallExpression	assert ( dp -> csp > 0 )		8514750	0					
ANR	8515104	Callee	assert		8514750	0					
ANR	8515105	Identifier	assert		8514750	0					
ANR	8515106	ArgumentList	dp -> csp > 0		8514750	1					
ANR	8515107	Argument	dp -> csp > 0		8514750	0					
ANR	8515108	RelationalExpression	dp -> csp > 0		8514750	0		>			
ANR	8515109	PtrMemberAccess	dp -> csp		8514750	0					
ANR	8515110	Identifier	dp		8514750	0					
ANR	8515111	Identifier	csp		8514750	1					
ANR	8515112	PrimaryExpression	0		8514750	1					
ANR	8515113	IfStatement	if ( dp -> write_size < dp -> best_size || ( dp -> write_size == dp -> best_size && better_options ( dp ) ) )		8514750	2					
ANR	8515114	Condition	dp -> write_size < dp -> best_size || ( dp -> write_size == dp -> best_size && better_options ( dp ) )	2253:13:67921:68022	8514750	0	True				
ANR	8515115	OrExpression	dp -> write_size < dp -> best_size || ( dp -> write_size == dp -> best_size && better_options ( dp ) )		8514750	0		||			
ANR	8515116	RelationalExpression	dp -> write_size < dp -> best_size		8514750	0		<			
ANR	8515117	PtrMemberAccess	dp -> write_size		8514750	0					
ANR	8515118	Identifier	dp		8514750	0					
ANR	8515119	Identifier	write_size		8514750	1					
ANR	8515120	PtrMemberAccess	dp -> best_size		8514750	1					
ANR	8515121	Identifier	dp		8514750	0					
ANR	8515122	Identifier	best_size		8514750	1					
ANR	8515123	AndExpression	dp -> write_size == dp -> best_size && better_options ( dp )		8514750	1		&&			
ANR	8515124	EqualityExpression	dp -> write_size == dp -> best_size		8514750	0		==			
ANR	8515125	PtrMemberAccess	dp -> write_size		8514750	0					
ANR	8515126	Identifier	dp		8514750	0					
ANR	8515127	Identifier	write_size		8514750	1					
ANR	8515128	PtrMemberAccess	dp -> best_size		8514750	1					
ANR	8515129	Identifier	dp		8514750	0					
ANR	8515130	Identifier	best_size		8514750	1					
ANR	8515131	CallExpression	better_options ( dp )		8514750	1					
ANR	8515132	Callee	better_options		8514750	0					
ANR	8515133	Identifier	better_options		8514750	0					
ANR	8515134	ArgumentList	dp		8514750	1					
ANR	8515135	Argument	dp		8514750	0					
ANR	8515136	Identifier	dp		8514750	0					
ANR	8515137	CompoundStatement		88:9:2278:2278	8514750	1					
ANR	8515138	IfStatement	"if ( destname != NULL && rename ( tmpname , destname ) != 0 )"		8514750	0					
ANR	8515139	Condition	"destname != NULL && rename ( tmpname , destname ) != 0"	2256:16:68052:68101	8514750	0	True				
ANR	8515140	AndExpression	"destname != NULL && rename ( tmpname , destname ) != 0"		8514750	0		&&			
ANR	8515141	EqualityExpression	destname != NULL		8514750	0		!=			
ANR	8515142	Identifier	destname		8514750	0					
ANR	8515143	Identifier	NULL		8514750	1					
ANR	8515144	EqualityExpression	"rename ( tmpname , destname ) != 0"		8514750	1		!=			
ANR	8515145	CallExpression	"rename ( tmpname , destname )"		8514750	0					
ANR	8515146	Callee	rename		8514750	0					
ANR	8515147	Identifier	rename		8514750	0					
ANR	8515148	ArgumentList	tmpname		8514750	1					
ANR	8515149	Argument	tmpname		8514750	0					
ANR	8515150	Identifier	tmpname		8514750	0					
ANR	8515151	Argument	destname		8514750	1					
ANR	8515152	Identifier	destname		8514750	0					
ANR	8515153	PrimaryExpression	0		8514750	1					
ANR	8515154	ExpressionStatement	"display_log ( dp , APP_ERROR , ""rename %s %s failed (%s)"" , tmpname , destname , strerror ( errno ) )"	2257:15:68119:68230	8514750	1	True				
ANR	8515155	CallExpression	"display_log ( dp , APP_ERROR , ""rename %s %s failed (%s)"" , tmpname , destname , strerror ( errno ) )"		8514750	0					
ANR	8515156	Callee	display_log		8514750	0					
ANR	8515157	Identifier	display_log		8514750	0					
ANR	8515158	ArgumentList	dp		8514750	1					
ANR	8515159	Argument	dp		8514750	0					
ANR	8515160	Identifier	dp		8514750	0					
ANR	8515161	Argument	APP_ERROR		8514750	1					
ANR	8515162	Identifier	APP_ERROR		8514750	0					
ANR	8515163	Argument	"""rename %s %s failed (%s)"""		8514750	2					
ANR	8515164	PrimaryExpression	"""rename %s %s failed (%s)"""		8514750	0					
ANR	8515165	Argument	tmpname		8514750	3					
ANR	8515166	Identifier	tmpname		8514750	0					
ANR	8515167	Argument	destname		8514750	4					
ANR	8515168	Identifier	destname		8514750	0					
ANR	8515169	Argument	strerror ( errno )		8514750	5					
ANR	8515170	CallExpression	strerror ( errno )		8514750	0					
ANR	8515171	Callee	strerror		8514750	0					
ANR	8515172	Identifier	strerror		8514750	0					
ANR	8515173	ArgumentList	errno		8514750	1					
ANR	8515174	Argument	errno		8514750	0					
ANR	8515175	Identifier	errno		8514750	0					
ANR	8515176	ExpressionStatement	"strcpy ( dp -> best , dp -> curr )"	2260:12:68245:68271	8514750	1	True				
ANR	8515177	CallExpression	"strcpy ( dp -> best , dp -> curr )"		8514750	0					
ANR	8515178	Callee	strcpy		8514750	0					
ANR	8515179	Identifier	strcpy		8514750	0					
ANR	8515180	ArgumentList	dp -> best		8514750	1					
ANR	8515181	Argument	dp -> best		8514750	0					
ANR	8515182	PtrMemberAccess	dp -> best		8514750	0					
ANR	8515183	Identifier	dp		8514750	0					
ANR	8515184	Identifier	best		8514750	1					
ANR	8515185	Argument	dp -> curr		8514750	1					
ANR	8515186	PtrMemberAccess	dp -> curr		8514750	0					
ANR	8515187	Identifier	dp		8514750	0					
ANR	8515188	Identifier	curr		8514750	1					
ANR	8515189	ExpressionStatement	dp -> best_size = dp -> write_size	2261:12:68285:68315	8514750	2	True				
ANR	8515190	AssignmentExpression	dp -> best_size = dp -> write_size		8514750	0		=			
ANR	8515191	PtrMemberAccess	dp -> best_size		8514750	0					
ANR	8515192	Identifier	dp		8514750	0					
ANR	8515193	Identifier	best_size		8514750	1					
ANR	8515194	PtrMemberAccess	dp -> write_size		8514750	1					
ANR	8515195	Identifier	dp		8514750	0					
ANR	8515196	Identifier	write_size		8514750	1					
ANR	8515197	ElseStatement	else		8514750	0					
ANR	8515198	IfStatement	if ( tmpname != NULL && unlink ( tmpname ) != 0 )		8514750	0					
ANR	8515199	Condition	tmpname != NULL && unlink ( tmpname ) != 0	2264:18:68347:68385	8514750	0	True				
ANR	8515200	AndExpression	tmpname != NULL && unlink ( tmpname ) != 0		8514750	0		&&			
ANR	8515201	EqualityExpression	tmpname != NULL		8514750	0		!=			
ANR	8515202	Identifier	tmpname		8514750	0					
ANR	8515203	Identifier	NULL		8514750	1					
ANR	8515204	EqualityExpression	unlink ( tmpname ) != 0		8514750	1		!=			
ANR	8515205	CallExpression	unlink ( tmpname )		8514750	0					
ANR	8515206	Callee	unlink		8514750	0					
ANR	8515207	Identifier	unlink		8514750	0					
ANR	8515208	ArgumentList	tmpname		8514750	1					
ANR	8515209	Argument	tmpname		8514750	0					
ANR	8515210	Identifier	tmpname		8514750	0					
ANR	8515211	PrimaryExpression	0		8514750	1					
ANR	8515212	ExpressionStatement	"display_log ( dp , APP_WARNING , ""unlink %s failed (%s)"" , tmpname , strerror ( errno ) )"	2265:12:68400:68497	8514750	1	True				
ANR	8515213	CallExpression	"display_log ( dp , APP_WARNING , ""unlink %s failed (%s)"" , tmpname , strerror ( errno ) )"		8514750	0					
ANR	8515214	Callee	display_log		8514750	0					
ANR	8515215	Identifier	display_log		8514750	0					
ANR	8515216	ArgumentList	dp		8514750	1					
ANR	8515217	Argument	dp		8514750	0					
ANR	8515218	Identifier	dp		8514750	0					
ANR	8515219	Argument	APP_WARNING		8514750	1					
ANR	8515220	Identifier	APP_WARNING		8514750	0					
ANR	8515221	Argument	"""unlink %s failed (%s)"""		8514750	2					
ANR	8515222	PrimaryExpression	"""unlink %s failed (%s)"""		8514750	0					
ANR	8515223	Argument	tmpname		8514750	3					
ANR	8515224	Identifier	tmpname		8514750	0					
ANR	8515225	Argument	strerror ( errno )		8514750	4					
ANR	8515226	CallExpression	strerror ( errno )		8514750	0					
ANR	8515227	Callee	strerror		8514750	0					
ANR	8515228	Identifier	strerror		8514750	0					
ANR	8515229	ArgumentList	errno		8514750	1					
ANR	8515230	Argument	errno		8514750	0					
ANR	8515231	Identifier	errno		8514750	0					
ANR	8515232	ExpressionStatement	"log_search ( dp , log_depth )"	2268:9:68509:68534	8514750	3	True				
ANR	8515233	CallExpression	"log_search ( dp , log_depth )"		8514750	0					
ANR	8515234	Callee	log_search		8514750	0					
ANR	8515235	Identifier	log_search		8514750	0					
ANR	8515236	ArgumentList	dp		8514750	1					
ANR	8515237	Argument	dp		8514750	0					
ANR	8515238	Identifier	dp		8514750	0					
ANR	8515239	Argument	log_depth		8514750	1					
ANR	8515240	Identifier	log_depth		8514750	0					
ANR	8515241	Condition	dp -> nsp > 0	2270:13:68557:68567	8514750	1	True				
ANR	8515242	RelationalExpression	dp -> nsp > 0		8514750	0		>			
ANR	8515243	PtrMemberAccess	dp -> nsp		8514750	0					
ANR	8515244	Identifier	dp		8514750	0					
ANR	8515245	Identifier	nsp		8514750	1					
ANR	8515246	PrimaryExpression	0		8514750	1					
ANR	8515247	ExpressionStatement	dp -> write_size = dp -> best_size	2273:6:68658:68688	8514750	6	True				
ANR	8515248	AssignmentExpression	dp -> write_size = dp -> best_size		8514750	0		=			
ANR	8515249	PtrMemberAccess	dp -> write_size		8514750	0					
ANR	8515250	Identifier	dp		8514750	0					
ANR	8515251	Identifier	write_size		8514750	1					
ANR	8515252	PtrMemberAccess	dp -> best_size		8514750	1					
ANR	8515253	Identifier	dp		8514750	0					
ANR	8515254	Identifier	best_size		8514750	1					
ANR	8515255	ReturnType	static void		8514750	1					
ANR	8515256	Identifier	cp_one_file		8514750	2					
ANR	8515257	ParameterList	"struct display * dp , const char * filename , const char * destname"		8514750	3					
ANR	8515258	Parameter	struct display * dp	2167:12:65691:65708	8514750	0	True				
ANR	8515259	ParameterType	struct display *		8514750	0					
ANR	8515260	Identifier	dp		8514750	1					
ANR	8515261	Parameter	const char * filename	2167:32:65711:65730	8514750	1	True				
ANR	8515262	ParameterType	const char *		8514750	0					
ANR	8515263	Identifier	filename		8514750	1					
ANR	8515264	Parameter	const char * destname	2167:54:65733:65752	8514750	2	True				
ANR	8515265	ParameterType	const char *		8514750	0					
ANR	8515266	Identifier	destname		8514750	1					
ANR	8515267	CFGEntryNode	ENTRY		8514750		True				
ANR	8515268	CFGExitNode	EXIT		8514750		True				
ANR	8515269	Symbol	& val		8514750						
ANR	8515270	Symbol	dp -> no_warnings		8514750						
ANR	8515271	Symbol	access		8514750						
ANR	8515272	Symbol	dp -> operation		8514750						
ANR	8515273	Symbol	dp		8514750						
ANR	8515274	Symbol	better_options		8514750						
ANR	8515275	Symbol	R_OK		8514750						
ANR	8515276	Symbol	* dp		8514750						
ANR	8515277	Symbol	dp -> curr		8514750						
ANR	8515278	Symbol	tmpname		8514750						
ANR	8515279	Symbol	APP_ERROR		8514750						
ANR	8515280	Symbol	tmpbuf		8514750						
ANR	8515281	Symbol	* dp -> curr		8514750						
ANR	8515282	Symbol	isdir		8514750						
ANR	8515283	Symbol	val		8514750						
ANR	8515284	Symbol	errno		8514750						
ANR	8515285	Symbol	* dp -> best		8514750						
ANR	8515286	Symbol	NULL		8514750						
ANR	8515287	Symbol	dp -> best		8514750						
ANR	8515288	Symbol	dp -> best_size		8514750						
ANR	8515289	Symbol	USER_ERROR		8514750						
ANR	8515290	Symbol	MAX_SIZE		8514750						
ANR	8515291	Symbol	dp -> filename		8514750						
ANR	8515292	Symbol	ENOENT		8514750						
ANR	8515293	Symbol	dp -> namebuf		8514750						
ANR	8515294	Symbol	W_OK		8514750						
ANR	8515295	Symbol	dp -> csp		8514750						
ANR	8515296	Symbol	strerror		8514750						
ANR	8515297	Symbol	dp -> write_size		8514750						
ANR	8515298	Symbol	get_option		8514750						
ANR	8515299	Symbol	filename		8514750						
ANR	8515300	Symbol	destname		8514750						
ANR	8515301	Symbol	unlink		8514750						
ANR	8515302	Symbol	rename		8514750						
ANR	8515303	Symbol	APP_WARNING		8514750						
ANR	8515304	Symbol	log_depth		8514750						
ANR	8515305	Symbol	dp -> nsp		8514750						
ANR	8515306	Symbol	* * dp		8514750						
ANR	8515307	Symbol	dp -> opt_string_start		8514750						
ANR	8515308	Symbol	dp -> tsp		8514750						
ANR	8515309	DeclStmt									
ANR	8515310	Decl							int	int	ret
ANR	8515311	DeclStmt									
ANR	8515312	Decl							int	int	option_end
ANR	8515313	DeclStmt									
ANR	8515314	Decl							struct display	struct display	d
ANR	8515315	DeclStmt									
ANR	8515316	Decl							int	int	errors
ANR	8515317	DeclStmt									
ANR	8515318	Decl							int	int	i
ANR	8515319	DeclStmt									
ANR	8515320	Decl							const char	const char *	infile
ANR	8515321	DeclStmt									
ANR	8515322	Decl							const char	const char *	outfile
ANR	8515323	DeclStmt									
ANR	8515324	Decl							int	int	ret
ANR	8515325	DeclStmt									
ANR	8515326	Decl							const int	const int	pass
ANR	8515327	DeclStmt									
ANR	8515328	Decl							int	int	j
ANR	8515329	DeclStmt									
ANR	8515330	Decl							endif	endif	printf
ANR	8515331	DeclStmt									
ANR	8515332	Decl							int	int	output
ANR	8515333	Function	main	2447:0:73358:73457							
ANR	8515334	FunctionDef	main ()		8515333	0					
ANR	8515335	CompoundStatement		2449:0:73373:73457	8515333	0					
ANR	8515336	ExpressionStatement	"fprintf ( stderr , ""pngcp: no support for png_read/write_image\\n"" )"	2450:3:73378:73441	8515333	0	True				
ANR	8515337	CallExpression	"fprintf ( stderr , ""pngcp: no support for png_read/write_image\\n"" )"		8515333	0					
ANR	8515338	Callee	fprintf		8515333	0					
ANR	8515339	Identifier	fprintf		8515333	0					
ANR	8515340	ArgumentList	stderr		8515333	1					
ANR	8515341	Argument	stderr		8515333	0					
ANR	8515342	Identifier	stderr		8515333	0					
ANR	8515343	Argument	"""pngcp: no support for png_read/write_image\\n"""		8515333	1					
ANR	8515344	PrimaryExpression	"""pngcp: no support for png_read/write_image\\n"""		8515333	0					
ANR	8515345	ReturnStatement	return 77 ;	2451:3:73446:73455	8515333	1	True				
ANR	8515346	PrimaryExpression	77		8515333	0					
ANR	8515347	ReturnType	int		8515333	1					
ANR	8515348	Identifier	main		8515333	2					
ANR	8515349	ParameterList			8515333	3					
ANR	8515350	CFGEntryNode	ENTRY		8515333		True				
ANR	8515351	CFGExitNode	EXIT		8515333		True				
ANR	8515352	Symbol	stderr		8515333						
