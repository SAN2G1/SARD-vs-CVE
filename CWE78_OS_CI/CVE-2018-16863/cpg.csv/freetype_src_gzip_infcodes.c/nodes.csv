command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3495535	File	data/converged/CVE-2018-16863_ghostpdl/freetype_src_gzip_infcodes.c								
ANR	3495536	ClassDef	<unnamed>	16:8:415:1029							
ANR	3495537	DeclStmt									
ANR	3495538	Decl									inflate_codes_mode
ANR	3495539	ClassDef	inflate_codes_state	30:0:1066:1971							
ANR	3495540	DeclStmt									
ANR	3495541	Decl							inflate_codes_mode	inflate_codes_mode	mode
ANR	3495542	DeclStmt									
ANR	3495543	Decl							uInt	uInt	len
ANR	3495544	ClassDef	<unnamed>	37:2:1224:1667							
ANR	3495545	ClassDef	<unnamed>	38:4:1236:1361							
ANR	3495546	DeclStmt									
ANR	3495547	Decl							inflate_huft	inflate_huft *	tree
ANR	3495548	DeclStmt									
ANR	3495549	Decl							uInt	uInt	need
ANR	3495550	DeclStmt									
ANR	3495551	Decl									code
ANR	3495552	DeclStmt									
ANR	3495553	Decl							uInt	uInt	lit
ANR	3495554	ClassDef	<unnamed>	43:4:1461:1605							
ANR	3495555	DeclStmt									
ANR	3495556	Decl							uInt	uInt	get
ANR	3495557	DeclStmt									
ANR	3495558	Decl							uInt	uInt	dist
ANR	3495559	DeclStmt									
ANR	3495560	Decl									copy
ANR	3495561	DeclStmt									
ANR	3495562	Decl									sub
ANR	3495563	DeclStmt									
ANR	3495564	Decl							Byte	Byte	lbits
ANR	3495565	DeclStmt									
ANR	3495566	Decl							Byte	Byte	dbits
ANR	3495567	DeclStmt									
ANR	3495568	Decl							inflate_huft	inflate_huft *	ltree
ANR	3495569	DeclStmt									
ANR	3495570	Decl							inflate_huft	inflate_huft *	dtree
ANR	3495571	Function	inflate_codes_new	58:0:1976:2477							
ANR	3495572	FunctionDef	"inflate_codes_new (uInt bl , uInt bd , inflate_huft * tl , inflate_huft * td , z_streamp z)"		3495571	0					
ANR	3495573	CompoundStatement		63:0:2164:2477	3495571	0					
ANR	3495574	IdentifierDeclStatement	inflate_codes_statef * c ;	64:2:2168:2191	3495571	0	True				
ANR	3495575	IdentifierDecl	* c		3495571	0					
ANR	3495576	IdentifierDeclType	inflate_codes_statef *		3495571	0					
ANR	3495577	Identifier	c		3495571	1					
ANR	3495578	IfStatement	"if ( ( c = ( inflate_codes_statef * ) ZALLOC ( z , 1 , sizeof ( struct inflate_codes_state ) ) ) != Z_NULL )"		3495571	1					
ANR	3495579	Condition	"( c = ( inflate_codes_statef * ) ZALLOC ( z , 1 , sizeof ( struct inflate_codes_state ) ) ) != Z_NULL"	66:6:2200:2293	3495571	0	True				
ANR	3495580	EqualityExpression	"( c = ( inflate_codes_statef * ) ZALLOC ( z , 1 , sizeof ( struct inflate_codes_state ) ) ) != Z_NULL"		3495571	0		!=			
ANR	3495581	AssignmentExpression	"c = ( inflate_codes_statef * ) ZALLOC ( z , 1 , sizeof ( struct inflate_codes_state ) )"		3495571	0		=			
ANR	3495582	Identifier	c		3495571	0					
ANR	3495583	CastExpression	"( inflate_codes_statef * ) ZALLOC ( z , 1 , sizeof ( struct inflate_codes_state ) )"		3495571	1					
ANR	3495584	CastTarget	inflate_codes_statef *		3495571	0					
ANR	3495585	CallExpression	"ZALLOC ( z , 1 , sizeof ( struct inflate_codes_state ) )"		3495571	1					
ANR	3495586	Callee	ZALLOC		3495571	0					
ANR	3495587	Identifier	ZALLOC		3495571	0					
ANR	3495588	ArgumentList	z		3495571	1					
ANR	3495589	Argument	z		3495571	0					
ANR	3495590	Identifier	z		3495571	0					
ANR	3495591	Argument	1		3495571	1					
ANR	3495592	PrimaryExpression	1		3495571	0					
ANR	3495593	Argument	sizeof ( struct inflate_codes_state )		3495571	2					
ANR	3495594	SizeofExpression	sizeof ( struct inflate_codes_state )		3495571	0					
ANR	3495595	Sizeof	sizeof		3495571	0					
ANR	3495596	SizeofOperand	struct inflate_codes_state		3495571	1					
ANR	3495597	Identifier	Z_NULL		3495571	1					
ANR	3495598	CompoundStatement		6:2:133:133	3495571	1					
ANR	3495599	ExpressionStatement	c -> mode = START	69:4:2304:2319	3495571	0	True				
ANR	3495600	AssignmentExpression	c -> mode = START		3495571	0		=			
ANR	3495601	PtrMemberAccess	c -> mode		3495571	0					
ANR	3495602	Identifier	c		3495571	0					
ANR	3495603	Identifier	mode		3495571	1					
ANR	3495604	Identifier	START		3495571	1					
ANR	3495605	ExpressionStatement	c -> lbits = ( Byte ) bl	70:4:2325:2344	3495571	1	True				
ANR	3495606	AssignmentExpression	c -> lbits = ( Byte ) bl		3495571	0		=			
ANR	3495607	PtrMemberAccess	c -> lbits		3495571	0					
ANR	3495608	Identifier	c		3495571	0					
ANR	3495609	Identifier	lbits		3495571	1					
ANR	3495610	CastExpression	( Byte ) bl		3495571	1					
ANR	3495611	CastTarget	Byte		3495571	0					
ANR	3495612	Identifier	bl		3495571	1					
ANR	3495613	ExpressionStatement	c -> dbits = ( Byte ) bd	71:4:2350:2369	3495571	2	True				
ANR	3495614	AssignmentExpression	c -> dbits = ( Byte ) bd		3495571	0		=			
ANR	3495615	PtrMemberAccess	c -> dbits		3495571	0					
ANR	3495616	Identifier	c		3495571	0					
ANR	3495617	Identifier	dbits		3495571	1					
ANR	3495618	CastExpression	( Byte ) bd		3495571	1					
ANR	3495619	CastTarget	Byte		3495571	0					
ANR	3495620	Identifier	bd		3495571	1					
ANR	3495621	ExpressionStatement	c -> ltree = tl	72:4:2375:2388	3495571	3	True				
ANR	3495622	AssignmentExpression	c -> ltree = tl		3495571	0		=			
ANR	3495623	PtrMemberAccess	c -> ltree		3495571	0					
ANR	3495624	Identifier	c		3495571	0					
ANR	3495625	Identifier	ltree		3495571	1					
ANR	3495626	Identifier	tl		3495571	1					
ANR	3495627	ExpressionStatement	c -> dtree = td	73:4:2394:2407	3495571	4	True				
ANR	3495628	AssignmentExpression	c -> dtree = td		3495571	0		=			
ANR	3495629	PtrMemberAccess	c -> dtree		3495571	0					
ANR	3495630	Identifier	c		3495571	0					
ANR	3495631	Identifier	dtree		3495571	1					
ANR	3495632	Identifier	td		3495571	1					
ANR	3495633	ExpressionStatement	"Tracev ( ( stderr , ""inflate:       codes new\\n"" ) )"	74:4:2413:2459	3495571	5	True				
ANR	3495634	CallExpression	"Tracev ( ( stderr , ""inflate:       codes new\\n"" ) )"		3495571	0					
ANR	3495635	Callee	Tracev		3495571	0					
ANR	3495636	Identifier	Tracev		3495571	0					
ANR	3495637	ArgumentList	"stderr , ""inflate:       codes new\\n"""		3495571	1					
ANR	3495638	Argument	"stderr , ""inflate:       codes new\\n"""		3495571	0					
ANR	3495639	Expression	"stderr , ""inflate:       codes new\\n"""		3495571	0					
ANR	3495640	Identifier	stderr		3495571	0					
ANR	3495641	PrimaryExpression	"""inflate:       codes new\\n"""		3495571	1					
ANR	3495642	ReturnStatement	return c ;	76:2:2467:2475	3495571	2	True				
ANR	3495643	Identifier	c		3495571	0					
ANR	3495644	ReturnType	local inflate_codes_statef *		3495571	1					
ANR	3495645	Identifier	inflate_codes_new		3495571	2					
ANR	3495646	ParameterList	"uInt bl , uInt bd , inflate_huft * tl , inflate_huft * td , z_streamp z"		3495571	3					
ANR	3495647	Parameter	uInt bl	59:0:2048:2054	3495571	0	True				
ANR	3495648	ParameterType	uInt		3495571	0					
ANR	3495649	Identifier	bl		3495571	1					
ANR	3495650	Parameter	uInt bd	59:9:2057:2063	3495571	1	True				
ANR	3495651	ParameterType	uInt		3495571	0					
ANR	3495652	Identifier	bd		3495571	1					
ANR	3495653	Parameter	inflate_huft * tl	60:0:2066:2081	3495571	2	True				
ANR	3495654	ParameterType	inflate_huft *		3495571	0					
ANR	3495655	Identifier	tl		3495571	1					
ANR	3495656	Parameter	inflate_huft * td	61:0:2084:2099	3495571	3	True				
ANR	3495657	ParameterType	inflate_huft *		3495571	0					
ANR	3495658	Identifier	td		3495571	1					
ANR	3495659	Parameter	z_streamp z	62:0:2150:2160	3495571	4	True				
ANR	3495660	ParameterType	z_streamp		3495571	0					
ANR	3495661	Identifier	z		3495571	1					
ANR	3495662	CFGEntryNode	ENTRY		3495571		True				
ANR	3495663	CFGExitNode	EXIT		3495571		True				
ANR	3495664	Symbol	bd		3495571						
ANR	3495665	Symbol	c -> mode		3495571						
ANR	3495666	Symbol	c		3495571						
ANR	3495667	Symbol	c -> lbits		3495571						
ANR	3495668	Symbol	bl		3495571						
ANR	3495669	Symbol	stderr		3495571						
ANR	3495670	Symbol	* c		3495571						
ANR	3495671	Symbol	c -> dbits		3495571						
ANR	3495672	Symbol	c -> dtree		3495571						
ANR	3495673	Symbol	td		3495571						
ANR	3495674	Symbol	ZALLOC		3495571						
ANR	3495675	Symbol	c -> ltree		3495571						
ANR	3495676	Symbol	tl		3495571						
ANR	3495677	Symbol	z		3495571						
ANR	3495678	Symbol	START		3495571						
ANR	3495679	Symbol	Z_NULL		3495571						
ANR	3495680	Function	inflate_codes	80:0:2481:7490							
ANR	3495681	FunctionDef	"inflate_codes (inflate_blocks_statef * s , z_streamp z , int r)"		3495680	0					
ANR	3495682	CompoundStatement		84:0:2568:7490	3495680	0					
ANR	3495683	IdentifierDeclStatement	uInt j ;	85:2:2572:2578	3495680	0	True				
ANR	3495684	IdentifierDecl	j		3495680	0					
ANR	3495685	IdentifierDeclType	uInt		3495680	0					
ANR	3495686	Identifier	j		3495680	1					
ANR	3495687	IdentifierDeclStatement	inflate_huft * t ;	86:2:2620:2635	3495680	1	True				
ANR	3495688	IdentifierDecl	* t		3495680	0					
ANR	3495689	IdentifierDeclType	inflate_huft *		3495680	0					
ANR	3495690	Identifier	t		3495680	1					
ANR	3495691	IdentifierDeclStatement	uInt e ;	87:2:2668:2674	3495680	2	True				
ANR	3495692	IdentifierDecl	e		3495680	0					
ANR	3495693	IdentifierDeclType	uInt		3495680	0					
ANR	3495694	Identifier	e		3495680	1					
ANR	3495695	IdentifierDeclStatement	uLong b ;	88:2:2722:2729	3495680	3	True				
ANR	3495696	IdentifierDecl	b		3495680	0					
ANR	3495697	IdentifierDeclType	uLong		3495680	0					
ANR	3495698	Identifier	b		3495680	1					
ANR	3495699	IdentifierDeclStatement	uInt k ;	89:2:2763:2769	3495680	4	True				
ANR	3495700	IdentifierDecl	k		3495680	0					
ANR	3495701	IdentifierDeclType	uInt		3495680	0					
ANR	3495702	Identifier	k		3495680	1					
ANR	3495703	IdentifierDeclStatement	Bytef * p ;	90:2:2812:2820	3495680	5	True				
ANR	3495704	IdentifierDecl	* p		3495680	0					
ANR	3495705	IdentifierDeclType	Bytef *		3495680	0					
ANR	3495706	Identifier	p		3495680	1					
ANR	3495707	IdentifierDeclStatement	uInt n ;	91:2:2861:2867	3495680	6	True				
ANR	3495708	IdentifierDecl	n		3495680	0					
ANR	3495709	IdentifierDeclType	uInt		3495680	0					
ANR	3495710	Identifier	n		3495680	1					
ANR	3495711	IdentifierDeclStatement	Bytef * q ;	92:2:2913:2921	3495680	7	True				
ANR	3495712	IdentifierDecl	* q		3495680	0					
ANR	3495713	IdentifierDeclType	Bytef *		3495680	0					
ANR	3495714	Identifier	q		3495680	1					
ANR	3495715	IdentifierDeclStatement	uInt m ;	93:2:2971:2977	3495680	8	True				
ANR	3495716	IdentifierDecl	m		3495680	0					
ANR	3495717	IdentifierDeclType	uInt		3495680	0					
ANR	3495718	Identifier	m		3495680	1					
ANR	3495719	IdentifierDeclStatement	Bytef * f ;	94:2:3040:3048	3495680	9	True				
ANR	3495720	IdentifierDecl	* f		3495680	0					
ANR	3495721	IdentifierDeclType	Bytef *		3495680	0					
ANR	3495722	Identifier	f		3495680	1					
ANR	3495723	IdentifierDeclStatement	inflate_codes_statef * c = s -> sub . decode . codes ;	95:2:3099:3144	3495680	10	True				
ANR	3495724	IdentifierDecl	* c = s -> sub . decode . codes		3495680	0					
ANR	3495725	IdentifierDeclType	inflate_codes_statef *		3495680	0					
ANR	3495726	Identifier	c		3495680	1					
ANR	3495727	AssignmentExpression	* c = s -> sub . decode . codes		3495680	2		=			
ANR	3495728	Identifier	c		3495680	0					
ANR	3495729	MemberAccess	s -> sub . decode . codes		3495680	1					
ANR	3495730	MemberAccess	s -> sub . decode		3495680	0					
ANR	3495731	PtrMemberAccess	s -> sub		3495680	0					
ANR	3495732	Identifier	s		3495680	0					
ANR	3495733	Identifier	sub		3495680	1					
ANR	3495734	Identifier	decode		3495680	1					
ANR	3495735	Identifier	codes		3495680	1					
ANR	3495736	Statement	LOAD	98:2:3240:3243	3495680	11	True				
ANR	3495737	WhileStatement	while ( 1 )		3495680	12					
ANR	3495738	Condition	1	101:9:3311:3311	3495680	0	True				
ANR	3495739	PrimaryExpression	1		3495680	0					
ANR	3495740	SwitchStatement	switch ( c -> mode )		3495680	1					
ANR	3495741	Condition	c -> mode	101:20:3322:3328	3495680	0	True				
ANR	3495742	PtrMemberAccess	c -> mode		3495680	0					
ANR	3495743	Identifier	c		3495680	0					
ANR	3495744	Identifier	mode		3495680	1					
ANR	3495745	CompoundStatement		19:2:764:764	3495680	1					
ANR	3495746	Label	case START :	103:4:3407:3417	3495680	0	True				
ANR	3495747	Identifier	START		3495680	0					
ANR	3495748	IfStatement	if ( m >= 258 && n >= 10 )		3495680	1					
ANR	3495749	Condition	m >= 258 && n >= 10	105:10:3474:3492	3495680	0	True				
ANR	3495750	AndExpression	m >= 258 && n >= 10		3495680	0		&&			
ANR	3495751	RelationalExpression	m >= 258		3495680	0		>=			
ANR	3495752	Identifier	m		3495680	0					
ANR	3495753	PrimaryExpression	258		3495680	1					
ANR	3495754	RelationalExpression	n >= 10		3495680	1		>=			
ANR	3495755	Identifier	n		3495680	0					
ANR	3495756	PrimaryExpression	10		3495680	1					
ANR	3495757	CompoundStatement		24:8:942:1019	3495680	1					
ANR	3495758	IdentifierDeclStatement	"UPDATE r = inflate_fast ( c -> lbits , c -> dbits , c -> ltree , c -> dtree , s , z ) ;"	107:8:3511:3588	3495680	0	True				
ANR	3495759	IdentifierDecl	"r = inflate_fast ( c -> lbits , c -> dbits , c -> ltree , c -> dtree , s , z )"		3495680	0					
ANR	3495760	IdentifierDeclType	UPDATE		3495680	0					
ANR	3495761	Identifier	r		3495680	1					
ANR	3495762	AssignmentExpression	"r = inflate_fast ( c -> lbits , c -> dbits , c -> ltree , c -> dtree , s , z )"		3495680	2		=			
ANR	3495763	Identifier	r		3495680	0					
ANR	3495764	CallExpression	"inflate_fast ( c -> lbits , c -> dbits , c -> ltree , c -> dtree , s , z )"		3495680	1					
ANR	3495765	Callee	inflate_fast		3495680	0					
ANR	3495766	Identifier	inflate_fast		3495680	0					
ANR	3495767	ArgumentList	c -> lbits		3495680	1					
ANR	3495768	Argument	c -> lbits		3495680	0					
ANR	3495769	PtrMemberAccess	c -> lbits		3495680	0					
ANR	3495770	Identifier	c		3495680	0					
ANR	3495771	Identifier	lbits		3495680	1					
ANR	3495772	Argument	c -> dbits		3495680	1					
ANR	3495773	PtrMemberAccess	c -> dbits		3495680	0					
ANR	3495774	Identifier	c		3495680	0					
ANR	3495775	Identifier	dbits		3495680	1					
ANR	3495776	Argument	c -> ltree		3495680	2					
ANR	3495777	PtrMemberAccess	c -> ltree		3495680	0					
ANR	3495778	Identifier	c		3495680	0					
ANR	3495779	Identifier	ltree		3495680	1					
ANR	3495780	Argument	c -> dtree		3495680	3					
ANR	3495781	PtrMemberAccess	c -> dtree		3495680	0					
ANR	3495782	Identifier	c		3495680	0					
ANR	3495783	Identifier	dtree		3495680	1					
ANR	3495784	Argument	s		3495680	4					
ANR	3495785	Identifier	s		3495680	0					
ANR	3495786	Argument	z		3495680	5					
ANR	3495787	Identifier	z		3495680	0					
ANR	3495788	Statement	LOAD	109:8:3598:3601	3495680	1	True				
ANR	3495789	IfStatement	if ( r != Z_OK )		3495680	2					
ANR	3495790	Condition	r != Z_OK	110:12:3615:3623	3495680	0	True				
ANR	3495791	EqualityExpression	r != Z_OK		3495680	0		!=			
ANR	3495792	Identifier	r		3495680	0					
ANR	3495793	Identifier	Z_OK		3495680	1					
ANR	3495794	CompoundStatement		28:8:1065:1065	3495680	1					
ANR	3495795	ExpressionStatement	c -> mode = r == Z_STREAM_END ? WASH : BADCODE	112:10:3646:3690	3495680	0	True				
ANR	3495796	AssignmentExpression	c -> mode = r == Z_STREAM_END ? WASH : BADCODE		3495680	0		=			
ANR	3495797	PtrMemberAccess	c -> mode		3495680	0					
ANR	3495798	Identifier	c		3495680	0					
ANR	3495799	Identifier	mode		3495680	1					
ANR	3495800	ConditionalExpression	r == Z_STREAM_END ? WASH : BADCODE		3495680	1					
ANR	3495801	Condition	r == Z_STREAM_END		3495680	0					
ANR	3495802	EqualityExpression	r == Z_STREAM_END		3495680	0		==			
ANR	3495803	Identifier	r		3495680	0					
ANR	3495804	Identifier	Z_STREAM_END		3495680	1					
ANR	3495805	Identifier	WASH		3495680	1					
ANR	3495806	Identifier	BADCODE		3495680	2					
ANR	3495807	BreakStatement	break ;	113:10:3702:3707	3495680	1	True				
ANR	3495808	ExpressionStatement	c -> sub . code . need = c -> lbits	117:6:3752:3779	3495680	2	True				
ANR	3495809	AssignmentExpression	c -> sub . code . need = c -> lbits		3495680	0		=			
ANR	3495810	MemberAccess	c -> sub . code . need		3495680	0					
ANR	3495811	MemberAccess	c -> sub . code		3495680	0					
ANR	3495812	PtrMemberAccess	c -> sub		3495680	0					
ANR	3495813	Identifier	c		3495680	0					
ANR	3495814	Identifier	sub		3495680	1					
ANR	3495815	Identifier	code		3495680	1					
ANR	3495816	Identifier	need		3495680	1					
ANR	3495817	PtrMemberAccess	c -> lbits		3495680	1					
ANR	3495818	Identifier	c		3495680	0					
ANR	3495819	Identifier	lbits		3495680	1					
ANR	3495820	ExpressionStatement	c -> sub . code . tree = c -> ltree	118:6:3787:3814	3495680	3	True				
ANR	3495821	AssignmentExpression	c -> sub . code . tree = c -> ltree		3495680	0		=			
ANR	3495822	MemberAccess	c -> sub . code . tree		3495680	0					
ANR	3495823	MemberAccess	c -> sub . code		3495680	0					
ANR	3495824	PtrMemberAccess	c -> sub		3495680	0					
ANR	3495825	Identifier	c		3495680	0					
ANR	3495826	Identifier	sub		3495680	1					
ANR	3495827	Identifier	code		3495680	1					
ANR	3495828	Identifier	tree		3495680	1					
ANR	3495829	PtrMemberAccess	c -> ltree		3495680	1					
ANR	3495830	Identifier	c		3495680	0					
ANR	3495831	Identifier	ltree		3495680	1					
ANR	3495832	ExpressionStatement	c -> mode = LEN	119:6:3822:3835	3495680	4	True				
ANR	3495833	AssignmentExpression	c -> mode = LEN		3495680	0		=			
ANR	3495834	PtrMemberAccess	c -> mode		3495680	0					
ANR	3495835	Identifier	c		3495680	0					
ANR	3495836	Identifier	mode		3495680	1					
ANR	3495837	Identifier	LEN		3495680	1					
ANR	3495838	Label	case LEN :	120:4:3841:3849	3495680	5	True				
ANR	3495839	Identifier	LEN		3495680	0					
ANR	3495840	ExpressionStatement	j = c -> sub . code . need	121:6:3904:3924	3495680	6	True				
ANR	3495841	AssignmentExpression	j = c -> sub . code . need		3495680	0		=			
ANR	3495842	Identifier	j		3495680	0					
ANR	3495843	MemberAccess	c -> sub . code . need		3495680	1					
ANR	3495844	MemberAccess	c -> sub . code		3495680	0					
ANR	3495845	PtrMemberAccess	c -> sub		3495680	0					
ANR	3495846	Identifier	c		3495680	0					
ANR	3495847	Identifier	sub		3495680	1					
ANR	3495848	Identifier	code		3495680	1					
ANR	3495849	Identifier	need		3495680	1					
ANR	3495850	Statement	NEEDBITS	122:6:3932:3939	3495680	7	True				
ANR	3495851	ExpressionStatement	( j ) t = c -> sub . code . tree + ( ( uInt ) b & inflate_mask [ j ] )	122:14:3940:4000	3495680	8	True				
ANR	3495852	AssignmentExpression	( j ) t = c -> sub . code . tree + ( ( uInt ) b & inflate_mask [ j ] )		3495680	0		=			
ANR	3495853	CastExpression	( j ) t		3495680	0					
ANR	3495854	CastTarget	j		3495680	0					
ANR	3495855	Identifier	t		3495680	1					
ANR	3495856	AdditiveExpression	c -> sub . code . tree + ( ( uInt ) b & inflate_mask [ j ] )		3495680	1		+			
ANR	3495857	MemberAccess	c -> sub . code . tree		3495680	0					
ANR	3495858	MemberAccess	c -> sub . code		3495680	0					
ANR	3495859	PtrMemberAccess	c -> sub		3495680	0					
ANR	3495860	Identifier	c		3495680	0					
ANR	3495861	Identifier	sub		3495680	1					
ANR	3495862	Identifier	code		3495680	1					
ANR	3495863	Identifier	tree		3495680	1					
ANR	3495864	BitAndExpression	( uInt ) b & inflate_mask [ j ]		3495680	1		&			
ANR	3495865	CastExpression	( uInt ) b		3495680	0					
ANR	3495866	CastTarget	uInt		3495680	0					
ANR	3495867	Identifier	b		3495680	1					
ANR	3495868	ArrayIndexing	inflate_mask [ j ]		3495680	1					
ANR	3495869	Identifier	inflate_mask		3495680	0					
ANR	3495870	Identifier	j		3495680	1					
ANR	3495871	Statement	DUMPBITS	124:6:4008:4015	3495680	9	True				
ANR	3495872	Statement	(	124:14:4016:4016	3495680	10	True				
ANR	3495873	Statement	t	124:15:4017:4017	3495680	11	True				
ANR	3495874	Statement	->	124:16:4018:4019	3495680	12	True				
ANR	3495875	Statement	bits	124:18:4020:4023	3495680	13	True				
ANR	3495876	Statement	)	124:22:4024:4024	3495680	14	True				
ANR	3495877	ExpressionStatement	e = ( uInt ) ( t -> exop )	125:6:4032:4051	3495680	15	True				
ANR	3495878	AssignmentExpression	e = ( uInt ) ( t -> exop )		3495680	0		=			
ANR	3495879	Identifier	e		3495680	0					
ANR	3495880	CastExpression	( uInt ) ( t -> exop )		3495680	1					
ANR	3495881	CastTarget	uInt		3495680	0					
ANR	3495882	PtrMemberAccess	t -> exop		3495680	1					
ANR	3495883	Identifier	t		3495680	0					
ANR	3495884	Identifier	exop		3495680	1					
ANR	3495885	IfStatement	if ( e == 0 )		3495680	16					
ANR	3495886	Condition	e == 0	126:10:4063:4068	3495680	0	True				
ANR	3495887	EqualityExpression	e == 0		3495680	0		==			
ANR	3495888	Identifier	e		3495680	0					
ANR	3495889	PrimaryExpression	0		3495680	1					
ANR	3495890	CompoundStatement		44:6:1536:1536	3495680	1					
ANR	3495891	ExpressionStatement	c -> sub . lit = t -> base	128:8:4115:4135	3495680	0	True				
ANR	3495892	AssignmentExpression	c -> sub . lit = t -> base		3495680	0		=			
ANR	3495893	MemberAccess	c -> sub . lit		3495680	0					
ANR	3495894	PtrMemberAccess	c -> sub		3495680	0					
ANR	3495895	Identifier	c		3495680	0					
ANR	3495896	Identifier	sub		3495680	1					
ANR	3495897	Identifier	lit		3495680	1					
ANR	3495898	PtrMemberAccess	t -> base		3495680	1					
ANR	3495899	Identifier	t		3495680	0					
ANR	3495900	Identifier	base		3495680	1					
ANR	3495901	ExpressionStatement	"Tracevv ( ( stderr , t -> base >= 0x20 && t -> base < 0x7f ? ""inflate:         literal '%c'\\n"" : ""inflate:         literal 0x%02x\\n"" , t -> base ) )"	129:8:4145:4314	3495680	1	True				
ANR	3495902	CallExpression	"Tracevv ( ( stderr , t -> base >= 0x20 && t -> base < 0x7f ? ""inflate:         literal '%c'\\n"" : ""inflate:         literal 0x%02x\\n"" , t -> base ) )"		3495680	0					
ANR	3495903	Callee	Tracevv		3495680	0					
ANR	3495904	Identifier	Tracevv		3495680	0					
ANR	3495905	ArgumentList	"stderr , t -> base >= 0x20 && t -> base < 0x7f ? ""inflate:         literal '%c'\\n"" : ""inflate:         literal 0x%02x\\n"" , t -> base"		3495680	1					
ANR	3495906	Argument	"stderr , t -> base >= 0x20 && t -> base < 0x7f ? ""inflate:         literal '%c'\\n"" : ""inflate:         literal 0x%02x\\n"" , t -> base"		3495680	0					
ANR	3495907	Expression	"stderr , t -> base >= 0x20 && t -> base < 0x7f ? ""inflate:         literal '%c'\\n"" : ""inflate:         literal 0x%02x\\n"" , t -> base"		3495680	0					
ANR	3495908	Identifier	stderr		3495680	0					
ANR	3495909	Expression	"t -> base >= 0x20 && t -> base < 0x7f ? ""inflate:         literal '%c'\\n"" : ""inflate:         literal 0x%02x\\n"" , t -> base"		3495680	1					
ANR	3495910	ConditionalExpression	"t -> base >= 0x20 && t -> base < 0x7f ? ""inflate:         literal '%c'\\n"" : ""inflate:         literal 0x%02x\\n"""		3495680	0					
ANR	3495911	Condition	t -> base >= 0x20 && t -> base < 0x7f		3495680	0					
ANR	3495912	AndExpression	t -> base >= 0x20 && t -> base < 0x7f		3495680	0		&&			
ANR	3495913	RelationalExpression	t -> base >= 0x20		3495680	0		>=			
ANR	3495914	PtrMemberAccess	t -> base		3495680	0					
ANR	3495915	Identifier	t		3495680	0					
ANR	3495916	Identifier	base		3495680	1					
ANR	3495917	PrimaryExpression	0x20		3495680	1					
ANR	3495918	RelationalExpression	t -> base < 0x7f		3495680	1		<			
ANR	3495919	PtrMemberAccess	t -> base		3495680	0					
ANR	3495920	Identifier	t		3495680	0					
ANR	3495921	Identifier	base		3495680	1					
ANR	3495922	PrimaryExpression	0x7f		3495680	1					
ANR	3495923	PrimaryExpression	"""inflate:         literal '%c'\\n"""		3495680	1					
ANR	3495924	PrimaryExpression	"""inflate:         literal 0x%02x\\n"""		3495680	2					
ANR	3495925	PtrMemberAccess	t -> base		3495680	1					
ANR	3495926	Identifier	t		3495680	0					
ANR	3495927	Identifier	base		3495680	1					
ANR	3495928	ExpressionStatement	c -> mode = LIT	132:8:4324:4337	3495680	2	True				
ANR	3495929	AssignmentExpression	c -> mode = LIT		3495680	0		=			
ANR	3495930	PtrMemberAccess	c -> mode		3495680	0					
ANR	3495931	Identifier	c		3495680	0					
ANR	3495932	Identifier	mode		3495680	1					
ANR	3495933	Identifier	LIT		3495680	1					
ANR	3495934	BreakStatement	break ;	133:8:4347:4352	3495680	3	True				
ANR	3495935	IfStatement	if ( e & 16 )		3495680	17					
ANR	3495936	Condition	e & 16	135:10:4372:4377	3495680	0	True				
ANR	3495937	BitAndExpression	e & 16		3495680	0		&			
ANR	3495938	Identifier	e		3495680	0					
ANR	3495939	PrimaryExpression	16		3495680	1					
ANR	3495940	CompoundStatement		53:6:1844:1844	3495680	1					
ANR	3495941	ExpressionStatement	c -> sub . copy . get = e & 15	137:8:4423:4447	3495680	0	True				
ANR	3495942	AssignmentExpression	c -> sub . copy . get = e & 15		3495680	0		=			
ANR	3495943	MemberAccess	c -> sub . copy . get		3495680	0					
ANR	3495944	MemberAccess	c -> sub . copy		3495680	0					
ANR	3495945	PtrMemberAccess	c -> sub		3495680	0					
ANR	3495946	Identifier	c		3495680	0					
ANR	3495947	Identifier	sub		3495680	1					
ANR	3495948	Identifier	copy		3495680	1					
ANR	3495949	Identifier	get		3495680	1					
ANR	3495950	BitAndExpression	e & 15		3495680	1		&			
ANR	3495951	Identifier	e		3495680	0					
ANR	3495952	PrimaryExpression	15		3495680	1					
ANR	3495953	ExpressionStatement	c -> len = t -> base	138:8:4457:4473	3495680	1	True				
ANR	3495954	AssignmentExpression	c -> len = t -> base		3495680	0		=			
ANR	3495955	PtrMemberAccess	c -> len		3495680	0					
ANR	3495956	Identifier	c		3495680	0					
ANR	3495957	Identifier	len		3495680	1					
ANR	3495958	PtrMemberAccess	t -> base		3495680	1					
ANR	3495959	Identifier	t		3495680	0					
ANR	3495960	Identifier	base		3495680	1					
ANR	3495961	ExpressionStatement	c -> mode = LENEXT	139:8:4483:4499	3495680	2	True				
ANR	3495962	AssignmentExpression	c -> mode = LENEXT		3495680	0		=			
ANR	3495963	PtrMemberAccess	c -> mode		3495680	0					
ANR	3495964	Identifier	c		3495680	0					
ANR	3495965	Identifier	mode		3495680	1					
ANR	3495966	Identifier	LENEXT		3495680	1					
ANR	3495967	BreakStatement	break ;	140:8:4509:4514	3495680	3	True				
ANR	3495968	IfStatement	if ( ( e & 64 ) == 0 )		3495680	18					
ANR	3495969	Condition	( e & 64 ) == 0	142:10:4534:4546	3495680	0	True				
ANR	3495970	EqualityExpression	( e & 64 ) == 0		3495680	0		==			
ANR	3495971	BitAndExpression	e & 64		3495680	0		&			
ANR	3495972	Identifier	e		3495680	0					
ANR	3495973	PrimaryExpression	64		3495680	1					
ANR	3495974	PrimaryExpression	0		3495680	1					
ANR	3495975	CompoundStatement		60:6:2010:2010	3495680	1					
ANR	3495976	ExpressionStatement	c -> sub . code . need = e	144:8:4589:4609	3495680	0	True				
ANR	3495977	AssignmentExpression	c -> sub . code . need = e		3495680	0		=			
ANR	3495978	MemberAccess	c -> sub . code . need		3495680	0					
ANR	3495979	MemberAccess	c -> sub . code		3495680	0					
ANR	3495980	PtrMemberAccess	c -> sub		3495680	0					
ANR	3495981	Identifier	c		3495680	0					
ANR	3495982	Identifier	sub		3495680	1					
ANR	3495983	Identifier	code		3495680	1					
ANR	3495984	Identifier	need		3495680	1					
ANR	3495985	Identifier	e		3495680	1					
ANR	3495986	ExpressionStatement	c -> sub . code . tree = t + t -> base	145:8:4619:4649	3495680	1	True				
ANR	3495987	AssignmentExpression	c -> sub . code . tree = t + t -> base		3495680	0		=			
ANR	3495988	MemberAccess	c -> sub . code . tree		3495680	0					
ANR	3495989	MemberAccess	c -> sub . code		3495680	0					
ANR	3495990	PtrMemberAccess	c -> sub		3495680	0					
ANR	3495991	Identifier	c		3495680	0					
ANR	3495992	Identifier	sub		3495680	1					
ANR	3495993	Identifier	code		3495680	1					
ANR	3495994	Identifier	tree		3495680	1					
ANR	3495995	AdditiveExpression	t + t -> base		3495680	1		+			
ANR	3495996	Identifier	t		3495680	0					
ANR	3495997	PtrMemberAccess	t -> base		3495680	1					
ANR	3495998	Identifier	t		3495680	0					
ANR	3495999	Identifier	base		3495680	1					
ANR	3496000	BreakStatement	break ;	146:8:4659:4664	3495680	2	True				
ANR	3496001	IfStatement	if ( e & 32 )		3495680	19					
ANR	3496002	Condition	e & 32	148:10:4684:4689	3495680	0	True				
ANR	3496003	BitAndExpression	e & 32		3495680	0		&			
ANR	3496004	Identifier	e		3495680	0					
ANR	3496005	PrimaryExpression	32		3495680	1					
ANR	3496006	CompoundStatement		66:6:2162:2162	3495680	1					
ANR	3496007	ExpressionStatement	"Tracevv ( ( stderr , ""inflate:         end of block\\n"" ) )"	150:8:4741:4793	3495680	0	True				
ANR	3496008	CallExpression	"Tracevv ( ( stderr , ""inflate:         end of block\\n"" ) )"		3495680	0					
ANR	3496009	Callee	Tracevv		3495680	0					
ANR	3496010	Identifier	Tracevv		3495680	0					
ANR	3496011	ArgumentList	"stderr , ""inflate:         end of block\\n"""		3495680	1					
ANR	3496012	Argument	"stderr , ""inflate:         end of block\\n"""		3495680	0					
ANR	3496013	Expression	"stderr , ""inflate:         end of block\\n"""		3495680	0					
ANR	3496014	Identifier	stderr		3495680	0					
ANR	3496015	PrimaryExpression	"""inflate:         end of block\\n"""		3495680	1					
ANR	3496016	ExpressionStatement	c -> mode = WASH	151:8:4803:4817	3495680	1	True				
ANR	3496017	AssignmentExpression	c -> mode = WASH		3495680	0		=			
ANR	3496018	PtrMemberAccess	c -> mode		3495680	0					
ANR	3496019	Identifier	c		3495680	0					
ANR	3496020	Identifier	mode		3495680	1					
ANR	3496021	Identifier	WASH		3495680	1					
ANR	3496022	BreakStatement	break ;	152:8:4827:4832	3495680	2	True				
ANR	3496023	ExpressionStatement	c -> mode = BADCODE	154:6:4848:4865	3495680	20	True				
ANR	3496024	AssignmentExpression	c -> mode = BADCODE		3495680	0		=			
ANR	3496025	PtrMemberAccess	c -> mode		3495680	0					
ANR	3496026	Identifier	c		3495680	0					
ANR	3496027	Identifier	mode		3495680	1					
ANR	3496028	Identifier	BADCODE		3495680	1					
ANR	3496029	ExpressionStatement	"z -> msg = ( char * ) ""invalid literal/length code"""	155:6:4899:4944	3495680	21	True				
ANR	3496030	AssignmentExpression	"z -> msg = ( char * ) ""invalid literal/length code"""		3495680	0		=			
ANR	3496031	PtrMemberAccess	z -> msg		3495680	0					
ANR	3496032	Identifier	z		3495680	0					
ANR	3496033	Identifier	msg		3495680	1					
ANR	3496034	CastExpression	"( char * ) ""invalid literal/length code"""		3495680	1					
ANR	3496035	CastTarget	char *		3495680	0					
ANR	3496036	PrimaryExpression	"""invalid literal/length code"""		3495680	1					
ANR	3496037	ExpressionStatement	r = Z_DATA_ERROR	156:6:4952:4968	3495680	22	True				
ANR	3496038	AssignmentExpression	r = Z_DATA_ERROR		3495680	0		=			
ANR	3496039	Identifier	r		3495680	0					
ANR	3496040	Identifier	Z_DATA_ERROR		3495680	1					
ANR	3496041	Statement	LEAVE	157:6:4976:4980	3495680	23	True				
ANR	3496042	Label	case LENEXT :	158:4:4986:4997	3495680	24	True				
ANR	3496043	Identifier	LENEXT		3495680	0					
ANR	3496044	ExpressionStatement	j = c -> sub . copy . get	159:6:5054:5073	3495680	25	True				
ANR	3496045	AssignmentExpression	j = c -> sub . copy . get		3495680	0		=			
ANR	3496046	Identifier	j		3495680	0					
ANR	3496047	MemberAccess	c -> sub . copy . get		3495680	1					
ANR	3496048	MemberAccess	c -> sub . copy		3495680	0					
ANR	3496049	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496050	Identifier	c		3495680	0					
ANR	3496051	Identifier	sub		3495680	1					
ANR	3496052	Identifier	copy		3495680	1					
ANR	3496053	Identifier	get		3495680	1					
ANR	3496054	Statement	NEEDBITS	160:6:5081:5088	3495680	26	True				
ANR	3496055	ExpressionStatement	( j ) c -> len += ( uInt ) b & inflate_mask [ j ]	160:14:5089:5134	3495680	27	True				
ANR	3496056	AssignmentExpression	( j ) c -> len += ( uInt ) b & inflate_mask [ j ]		3495680	0		+=			
ANR	3496057	CastExpression	( j ) c -> len		3495680	0					
ANR	3496058	CastTarget	j		3495680	0					
ANR	3496059	PtrMemberAccess	c -> len		3495680	1					
ANR	3496060	Identifier	c		3495680	0					
ANR	3496061	Identifier	len		3495680	1					
ANR	3496062	BitAndExpression	( uInt ) b & inflate_mask [ j ]		3495680	1		&			
ANR	3496063	CastExpression	( uInt ) b		3495680	0					
ANR	3496064	CastTarget	uInt		3495680	0					
ANR	3496065	Identifier	b		3495680	1					
ANR	3496066	ArrayIndexing	inflate_mask [ j ]		3495680	1					
ANR	3496067	Identifier	inflate_mask		3495680	0					
ANR	3496068	Identifier	j		3495680	1					
ANR	3496069	Statement	DUMPBITS	162:6:5142:5149	3495680	28	True				
ANR	3496070	ExpressionStatement	( j ) c -> sub . code . need = c -> dbits	162:14:5150:5187	3495680	29	True				
ANR	3496071	AssignmentExpression	( j ) c -> sub . code . need = c -> dbits		3495680	0		=			
ANR	3496072	CastExpression	( j ) c -> sub . code . need		3495680	0					
ANR	3496073	CastTarget	j		3495680	0					
ANR	3496074	MemberAccess	c -> sub . code . need		3495680	1					
ANR	3496075	MemberAccess	c -> sub . code		3495680	0					
ANR	3496076	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496077	Identifier	c		3495680	0					
ANR	3496078	Identifier	sub		3495680	1					
ANR	3496079	Identifier	code		3495680	1					
ANR	3496080	Identifier	need		3495680	1					
ANR	3496081	PtrMemberAccess	c -> dbits		3495680	1					
ANR	3496082	Identifier	c		3495680	0					
ANR	3496083	Identifier	dbits		3495680	1					
ANR	3496084	ExpressionStatement	c -> sub . code . tree = c -> dtree	164:6:5195:5222	3495680	30	True				
ANR	3496085	AssignmentExpression	c -> sub . code . tree = c -> dtree		3495680	0		=			
ANR	3496086	MemberAccess	c -> sub . code . tree		3495680	0					
ANR	3496087	MemberAccess	c -> sub . code		3495680	0					
ANR	3496088	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496089	Identifier	c		3495680	0					
ANR	3496090	Identifier	sub		3495680	1					
ANR	3496091	Identifier	code		3495680	1					
ANR	3496092	Identifier	tree		3495680	1					
ANR	3496093	PtrMemberAccess	c -> dtree		3495680	1					
ANR	3496094	Identifier	c		3495680	0					
ANR	3496095	Identifier	dtree		3495680	1					
ANR	3496096	ExpressionStatement	"Tracevv ( ( stderr , ""inflate:         length %u\\n"" , c -> len ) )"	165:6:5230:5287	3495680	31	True				
ANR	3496097	CallExpression	"Tracevv ( ( stderr , ""inflate:         length %u\\n"" , c -> len ) )"		3495680	0					
ANR	3496098	Callee	Tracevv		3495680	0					
ANR	3496099	Identifier	Tracevv		3495680	0					
ANR	3496100	ArgumentList	"stderr , ""inflate:         length %u\\n"" , c -> len"		3495680	1					
ANR	3496101	Argument	"stderr , ""inflate:         length %u\\n"" , c -> len"		3495680	0					
ANR	3496102	Expression	"stderr , ""inflate:         length %u\\n"" , c -> len"		3495680	0					
ANR	3496103	Identifier	stderr		3495680	0					
ANR	3496104	Expression	"""inflate:         length %u\\n"" , c -> len"		3495680	1					
ANR	3496105	PrimaryExpression	"""inflate:         length %u\\n"""		3495680	0					
ANR	3496106	PtrMemberAccess	c -> len		3495680	1					
ANR	3496107	Identifier	c		3495680	0					
ANR	3496108	Identifier	len		3495680	1					
ANR	3496109	ExpressionStatement	c -> mode = DIST	166:6:5295:5309	3495680	32	True				
ANR	3496110	AssignmentExpression	c -> mode = DIST		3495680	0		=			
ANR	3496111	PtrMemberAccess	c -> mode		3495680	0					
ANR	3496112	Identifier	c		3495680	0					
ANR	3496113	Identifier	mode		3495680	1					
ANR	3496114	Identifier	DIST		3495680	1					
ANR	3496115	Label	case DIST :	167:4:5315:5324	3495680	33	True				
ANR	3496116	Identifier	DIST		3495680	0					
ANR	3496117	ExpressionStatement	j = c -> sub . code . need	168:6:5368:5388	3495680	34	True				
ANR	3496118	AssignmentExpression	j = c -> sub . code . need		3495680	0		=			
ANR	3496119	Identifier	j		3495680	0					
ANR	3496120	MemberAccess	c -> sub . code . need		3495680	1					
ANR	3496121	MemberAccess	c -> sub . code		3495680	0					
ANR	3496122	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496123	Identifier	c		3495680	0					
ANR	3496124	Identifier	sub		3495680	1					
ANR	3496125	Identifier	code		3495680	1					
ANR	3496126	Identifier	need		3495680	1					
ANR	3496127	Statement	NEEDBITS	169:6:5396:5403	3495680	35	True				
ANR	3496128	ExpressionStatement	( j ) t = c -> sub . code . tree + ( ( uInt ) b & inflate_mask [ j ] )	169:14:5404:5464	3495680	36	True				
ANR	3496129	AssignmentExpression	( j ) t = c -> sub . code . tree + ( ( uInt ) b & inflate_mask [ j ] )		3495680	0		=			
ANR	3496130	CastExpression	( j ) t		3495680	0					
ANR	3496131	CastTarget	j		3495680	0					
ANR	3496132	Identifier	t		3495680	1					
ANR	3496133	AdditiveExpression	c -> sub . code . tree + ( ( uInt ) b & inflate_mask [ j ] )		3495680	1		+			
ANR	3496134	MemberAccess	c -> sub . code . tree		3495680	0					
ANR	3496135	MemberAccess	c -> sub . code		3495680	0					
ANR	3496136	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496137	Identifier	c		3495680	0					
ANR	3496138	Identifier	sub		3495680	1					
ANR	3496139	Identifier	code		3495680	1					
ANR	3496140	Identifier	tree		3495680	1					
ANR	3496141	BitAndExpression	( uInt ) b & inflate_mask [ j ]		3495680	1		&			
ANR	3496142	CastExpression	( uInt ) b		3495680	0					
ANR	3496143	CastTarget	uInt		3495680	0					
ANR	3496144	Identifier	b		3495680	1					
ANR	3496145	ArrayIndexing	inflate_mask [ j ]		3495680	1					
ANR	3496146	Identifier	inflate_mask		3495680	0					
ANR	3496147	Identifier	j		3495680	1					
ANR	3496148	Statement	DUMPBITS	171:6:5472:5479	3495680	37	True				
ANR	3496149	Statement	(	171:14:5480:5480	3495680	38	True				
ANR	3496150	Statement	t	171:15:5481:5481	3495680	39	True				
ANR	3496151	Statement	->	171:16:5482:5483	3495680	40	True				
ANR	3496152	Statement	bits	171:18:5484:5487	3495680	41	True				
ANR	3496153	Statement	)	171:22:5488:5488	3495680	42	True				
ANR	3496154	ExpressionStatement	e = ( uInt ) ( t -> exop )	172:6:5496:5515	3495680	43	True				
ANR	3496155	AssignmentExpression	e = ( uInt ) ( t -> exop )		3495680	0		=			
ANR	3496156	Identifier	e		3495680	0					
ANR	3496157	CastExpression	( uInt ) ( t -> exop )		3495680	1					
ANR	3496158	CastTarget	uInt		3495680	0					
ANR	3496159	PtrMemberAccess	t -> exop		3495680	1					
ANR	3496160	Identifier	t		3495680	0					
ANR	3496161	Identifier	exop		3495680	1					
ANR	3496162	IfStatement	if ( e & 16 )		3495680	44					
ANR	3496163	Condition	e & 16	173:10:5527:5532	3495680	0	True				
ANR	3496164	BitAndExpression	e & 16		3495680	0		&			
ANR	3496165	Identifier	e		3495680	0					
ANR	3496166	PrimaryExpression	16		3495680	1					
ANR	3496167	CompoundStatement		91:6:3001:3001	3495680	1					
ANR	3496168	ExpressionStatement	c -> sub . copy . get = e & 15	175:8:5580:5604	3495680	0	True				
ANR	3496169	AssignmentExpression	c -> sub . copy . get = e & 15		3495680	0		=			
ANR	3496170	MemberAccess	c -> sub . copy . get		3495680	0					
ANR	3496171	MemberAccess	c -> sub . copy		3495680	0					
ANR	3496172	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496173	Identifier	c		3495680	0					
ANR	3496174	Identifier	sub		3495680	1					
ANR	3496175	Identifier	copy		3495680	1					
ANR	3496176	Identifier	get		3495680	1					
ANR	3496177	BitAndExpression	e & 15		3495680	1		&			
ANR	3496178	Identifier	e		3495680	0					
ANR	3496179	PrimaryExpression	15		3495680	1					
ANR	3496180	ExpressionStatement	c -> sub . copy . dist = t -> base	176:8:5614:5640	3495680	1	True				
ANR	3496181	AssignmentExpression	c -> sub . copy . dist = t -> base		3495680	0		=			
ANR	3496182	MemberAccess	c -> sub . copy . dist		3495680	0					
ANR	3496183	MemberAccess	c -> sub . copy		3495680	0					
ANR	3496184	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496185	Identifier	c		3495680	0					
ANR	3496186	Identifier	sub		3495680	1					
ANR	3496187	Identifier	copy		3495680	1					
ANR	3496188	Identifier	dist		3495680	1					
ANR	3496189	PtrMemberAccess	t -> base		3495680	1					
ANR	3496190	Identifier	t		3495680	0					
ANR	3496191	Identifier	base		3495680	1					
ANR	3496192	ExpressionStatement	c -> mode = DISTEXT	177:8:5650:5667	3495680	2	True				
ANR	3496193	AssignmentExpression	c -> mode = DISTEXT		3495680	0		=			
ANR	3496194	PtrMemberAccess	c -> mode		3495680	0					
ANR	3496195	Identifier	c		3495680	0					
ANR	3496196	Identifier	mode		3495680	1					
ANR	3496197	Identifier	DISTEXT		3495680	1					
ANR	3496198	BreakStatement	break ;	178:8:5677:5682	3495680	3	True				
ANR	3496199	IfStatement	if ( ( e & 64 ) == 0 )		3495680	45					
ANR	3496200	Condition	( e & 64 ) == 0	180:10:5702:5714	3495680	0	True				
ANR	3496201	EqualityExpression	( e & 64 ) == 0		3495680	0		==			
ANR	3496202	BitAndExpression	e & 64		3495680	0		&			
ANR	3496203	Identifier	e		3495680	0					
ANR	3496204	PrimaryExpression	64		3495680	1					
ANR	3496205	PrimaryExpression	0		3495680	1					
ANR	3496206	CompoundStatement		98:6:3178:3178	3495680	1					
ANR	3496207	ExpressionStatement	c -> sub . code . need = e	182:8:5757:5777	3495680	0	True				
ANR	3496208	AssignmentExpression	c -> sub . code . need = e		3495680	0		=			
ANR	3496209	MemberAccess	c -> sub . code . need		3495680	0					
ANR	3496210	MemberAccess	c -> sub . code		3495680	0					
ANR	3496211	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496212	Identifier	c		3495680	0					
ANR	3496213	Identifier	sub		3495680	1					
ANR	3496214	Identifier	code		3495680	1					
ANR	3496215	Identifier	need		3495680	1					
ANR	3496216	Identifier	e		3495680	1					
ANR	3496217	ExpressionStatement	c -> sub . code . tree = t + t -> base	183:8:5787:5817	3495680	1	True				
ANR	3496218	AssignmentExpression	c -> sub . code . tree = t + t -> base		3495680	0		=			
ANR	3496219	MemberAccess	c -> sub . code . tree		3495680	0					
ANR	3496220	MemberAccess	c -> sub . code		3495680	0					
ANR	3496221	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496222	Identifier	c		3495680	0					
ANR	3496223	Identifier	sub		3495680	1					
ANR	3496224	Identifier	code		3495680	1					
ANR	3496225	Identifier	tree		3495680	1					
ANR	3496226	AdditiveExpression	t + t -> base		3495680	1		+			
ANR	3496227	Identifier	t		3495680	0					
ANR	3496228	PtrMemberAccess	t -> base		3495680	1					
ANR	3496229	Identifier	t		3495680	0					
ANR	3496230	Identifier	base		3495680	1					
ANR	3496231	BreakStatement	break ;	184:8:5827:5832	3495680	2	True				
ANR	3496232	ExpressionStatement	c -> mode = BADCODE	186:6:5848:5865	3495680	46	True				
ANR	3496233	AssignmentExpression	c -> mode = BADCODE		3495680	0		=			
ANR	3496234	PtrMemberAccess	c -> mode		3495680	0					
ANR	3496235	Identifier	c		3495680	0					
ANR	3496236	Identifier	mode		3495680	1					
ANR	3496237	Identifier	BADCODE		3495680	1					
ANR	3496238	ExpressionStatement	"z -> msg = ( char * ) ""invalid distance code"""	187:6:5899:5938	3495680	47	True				
ANR	3496239	AssignmentExpression	"z -> msg = ( char * ) ""invalid distance code"""		3495680	0		=			
ANR	3496240	PtrMemberAccess	z -> msg		3495680	0					
ANR	3496241	Identifier	z		3495680	0					
ANR	3496242	Identifier	msg		3495680	1					
ANR	3496243	CastExpression	"( char * ) ""invalid distance code"""		3495680	1					
ANR	3496244	CastTarget	char *		3495680	0					
ANR	3496245	PrimaryExpression	"""invalid distance code"""		3495680	1					
ANR	3496246	ExpressionStatement	r = Z_DATA_ERROR	188:6:5946:5962	3495680	48	True				
ANR	3496247	AssignmentExpression	r = Z_DATA_ERROR		3495680	0		=			
ANR	3496248	Identifier	r		3495680	0					
ANR	3496249	Identifier	Z_DATA_ERROR		3495680	1					
ANR	3496250	Statement	LEAVE	189:6:5970:5974	3495680	49	True				
ANR	3496251	Label	case DISTEXT :	190:4:5980:5992	3495680	50	True				
ANR	3496252	Identifier	DISTEXT		3495680	0					
ANR	3496253	ExpressionStatement	j = c -> sub . copy . get	191:6:6038:6057	3495680	51	True				
ANR	3496254	AssignmentExpression	j = c -> sub . copy . get		3495680	0		=			
ANR	3496255	Identifier	j		3495680	0					
ANR	3496256	MemberAccess	c -> sub . copy . get		3495680	1					
ANR	3496257	MemberAccess	c -> sub . copy		3495680	0					
ANR	3496258	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496259	Identifier	c		3495680	0					
ANR	3496260	Identifier	sub		3495680	1					
ANR	3496261	Identifier	copy		3495680	1					
ANR	3496262	Identifier	get		3495680	1					
ANR	3496263	Statement	NEEDBITS	192:6:6065:6072	3495680	52	True				
ANR	3496264	ExpressionStatement	( j ) c -> sub . copy . dist += ( uInt ) b & inflate_mask [ j ]	192:14:6073:6128	3495680	53	True				
ANR	3496265	AssignmentExpression	( j ) c -> sub . copy . dist += ( uInt ) b & inflate_mask [ j ]		3495680	0		+=			
ANR	3496266	CastExpression	( j ) c -> sub . copy . dist		3495680	0					
ANR	3496267	CastTarget	j		3495680	0					
ANR	3496268	MemberAccess	c -> sub . copy . dist		3495680	1					
ANR	3496269	MemberAccess	c -> sub . copy		3495680	0					
ANR	3496270	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496271	Identifier	c		3495680	0					
ANR	3496272	Identifier	sub		3495680	1					
ANR	3496273	Identifier	copy		3495680	1					
ANR	3496274	Identifier	dist		3495680	1					
ANR	3496275	BitAndExpression	( uInt ) b & inflate_mask [ j ]		3495680	1		&			
ANR	3496276	CastExpression	( uInt ) b		3495680	0					
ANR	3496277	CastTarget	uInt		3495680	0					
ANR	3496278	Identifier	b		3495680	1					
ANR	3496279	ArrayIndexing	inflate_mask [ j ]		3495680	1					
ANR	3496280	Identifier	inflate_mask		3495680	0					
ANR	3496281	Identifier	j		3495680	1					
ANR	3496282	Statement	DUMPBITS	194:6:6136:6143	3495680	54	True				
ANR	3496283	ExpressionStatement	"( j ) Tracevv ( ( stderr , ""inflate:         distance %u\\n"" , c -> sub . copy . dist ) )"	194:14:6144:6223	3495680	55	True				
ANR	3496284	CastExpression	"( j ) Tracevv ( ( stderr , ""inflate:         distance %u\\n"" , c -> sub . copy . dist ) )"		3495680	0					
ANR	3496285	CastTarget	j		3495680	0					
ANR	3496286	CallExpression	"Tracevv ( ( stderr , ""inflate:         distance %u\\n"" , c -> sub . copy . dist ) )"		3495680	1					
ANR	3496287	Callee	Tracevv		3495680	0					
ANR	3496288	Identifier	Tracevv		3495680	0					
ANR	3496289	ArgumentList	"stderr , ""inflate:         distance %u\\n"" , c -> sub . copy . dist"		3495680	1					
ANR	3496290	Argument	"stderr , ""inflate:         distance %u\\n"" , c -> sub . copy . dist"		3495680	0					
ANR	3496291	Expression	"stderr , ""inflate:         distance %u\\n"" , c -> sub . copy . dist"		3495680	0					
ANR	3496292	Identifier	stderr		3495680	0					
ANR	3496293	Expression	"""inflate:         distance %u\\n"" , c -> sub . copy . dist"		3495680	1					
ANR	3496294	PrimaryExpression	"""inflate:         distance %u\\n"""		3495680	0					
ANR	3496295	MemberAccess	c -> sub . copy . dist		3495680	1					
ANR	3496296	MemberAccess	c -> sub . copy		3495680	0					
ANR	3496297	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496298	Identifier	c		3495680	0					
ANR	3496299	Identifier	sub		3495680	1					
ANR	3496300	Identifier	copy		3495680	1					
ANR	3496301	Identifier	dist		3495680	1					
ANR	3496302	ExpressionStatement	c -> mode = COPY	196:6:6231:6245	3495680	56	True				
ANR	3496303	AssignmentExpression	c -> mode = COPY		3495680	0		=			
ANR	3496304	PtrMemberAccess	c -> mode		3495680	0					
ANR	3496305	Identifier	c		3495680	0					
ANR	3496306	Identifier	mode		3495680	1					
ANR	3496307	Identifier	COPY		3495680	1					
ANR	3496308	Label	case COPY :	197:4:6251:6260	3495680	57	True				
ANR	3496309	Identifier	COPY		3495680	0					
ANR	3496310	ExpressionStatement	f = q - c -> sub . copy . dist	198:6:6329:6353	3495680	58	True				
ANR	3496311	AssignmentExpression	f = q - c -> sub . copy . dist		3495680	0		=			
ANR	3496312	Identifier	f		3495680	0					
ANR	3496313	AdditiveExpression	q - c -> sub . copy . dist		3495680	1		-			
ANR	3496314	Identifier	q		3495680	0					
ANR	3496315	MemberAccess	c -> sub . copy . dist		3495680	1					
ANR	3496316	MemberAccess	c -> sub . copy		3495680	0					
ANR	3496317	PtrMemberAccess	c -> sub		3495680	0					
ANR	3496318	Identifier	c		3495680	0					
ANR	3496319	Identifier	sub		3495680	1					
ANR	3496320	Identifier	copy		3495680	1					
ANR	3496321	Identifier	dist		3495680	1					
ANR	3496322	WhileStatement	while ( f < s -> window )		3495680	59					
ANR	3496323	Condition	f < s -> window	199:13:6368:6380	3495680	0	True				
ANR	3496324	RelationalExpression	f < s -> window		3495680	0		<			
ANR	3496325	Identifier	f		3495680	0					
ANR	3496326	PtrMemberAccess	s -> window		3495680	1					
ANR	3496327	Identifier	s		3495680	0					
ANR	3496328	Identifier	window		3495680	1					
ANR	3496329	ExpressionStatement	f += s -> end - s -> window	200:8:6444:6467	3495680	1	True				
ANR	3496330	AssignmentExpression	f += s -> end - s -> window		3495680	0		+=			
ANR	3496331	Identifier	f		3495680	0					
ANR	3496332	AdditiveExpression	s -> end - s -> window		3495680	1		-			
ANR	3496333	PtrMemberAccess	s -> end		3495680	0					
ANR	3496334	Identifier	s		3495680	0					
ANR	3496335	Identifier	end		3495680	1					
ANR	3496336	PtrMemberAccess	s -> window		3495680	1					
ANR	3496337	Identifier	s		3495680	0					
ANR	3496338	Identifier	window		3495680	1					
ANR	3496339	WhileStatement	while ( c -> len )		3495680	60					
ANR	3496340	Condition	c -> len	201:13:6529:6534	3495680	0	True				
ANR	3496341	PtrMemberAccess	c -> len		3495680	0					
ANR	3496342	Identifier	c		3495680	0					
ANR	3496343	Identifier	len		3495680	1					
ANR	3496344	CompoundStatement		119:6:3974:3974	3495680	1					
ANR	3496345	Statement	NEEDOUT	203:8:6553:6559	3495680	0	True				
ANR	3496346	Statement	OUTBYTE	204:8:6569:6575	3495680	1	True				
ANR	3496347	Statement	(	204:15:6576:6576	3495680	2	True				
ANR	3496348	Statement	*	204:16:6577:6577	3495680	3	True				
ANR	3496349	Statement	f	204:17:6578:6578	3495680	4	True				
ANR	3496350	Statement	++	204:18:6579:6580	3495680	5	True				
ANR	3496351	Statement	)	204:20:6581:6581	3495680	6	True				
ANR	3496352	IfStatement	if ( f == s -> end )		3495680	7					
ANR	3496353	Condition	f == s -> end	205:12:6595:6605	3495680	0	True				
ANR	3496354	EqualityExpression	f == s -> end		3495680	0		==			
ANR	3496355	Identifier	f		3495680	0					
ANR	3496356	PtrMemberAccess	s -> end		3495680	1					
ANR	3496357	Identifier	s		3495680	0					
ANR	3496358	Identifier	end		3495680	1					
ANR	3496359	ExpressionStatement	f = s -> window	206:10:6618:6631	3495680	1	True				
ANR	3496360	AssignmentExpression	f = s -> window		3495680	0		=			
ANR	3496361	Identifier	f		3495680	0					
ANR	3496362	PtrMemberAccess	s -> window		3495680	1					
ANR	3496363	Identifier	s		3495680	0					
ANR	3496364	Identifier	window		3495680	1					
ANR	3496365	ExpressionStatement	c -> len --	207:8:6641:6649	3495680	8	True				
ANR	3496366	PostIncDecOperationExpression	c -> len --		3495680	0					
ANR	3496367	PtrMemberAccess	c -> len		3495680	0					
ANR	3496368	Identifier	c		3495680	0					
ANR	3496369	Identifier	len		3495680	1					
ANR	3496370	IncDec	--		3495680	1					
ANR	3496371	ExpressionStatement	c -> mode = START	209:6:6665:6680	3495680	61	True				
ANR	3496372	AssignmentExpression	c -> mode = START		3495680	0		=			
ANR	3496373	PtrMemberAccess	c -> mode		3495680	0					
ANR	3496374	Identifier	c		3495680	0					
ANR	3496375	Identifier	mode		3495680	1					
ANR	3496376	Identifier	START		3495680	1					
ANR	3496377	BreakStatement	break ;	210:6:6688:6693	3495680	62	True				
ANR	3496378	Label	case LIT :	211:4:6699:6707	3495680	63	True				
ANR	3496379	Identifier	LIT		3495680	0					
ANR	3496380	Statement	NEEDOUT	212:6:6772:6778	3495680	64	True				
ANR	3496381	Statement	OUTBYTE	213:6:6786:6792	3495680	65	True				
ANR	3496382	Statement	(	213:13:6793:6793	3495680	66	True				
ANR	3496383	Statement	c	213:14:6794:6794	3495680	67	True				
ANR	3496384	Statement	->	213:15:6795:6796	3495680	68	True				
ANR	3496385	Statement	sub	213:17:6797:6799	3495680	69	True				
ANR	3496386	Statement	.	213:20:6800:6800	3495680	70	True				
ANR	3496387	Statement	lit	213:21:6801:6803	3495680	71	True				
ANR	3496388	Statement	)	213:24:6804:6804	3495680	72	True				
ANR	3496389	ExpressionStatement	c -> mode = START	214:6:6812:6827	3495680	73	True				
ANR	3496390	AssignmentExpression	c -> mode = START		3495680	0		=			
ANR	3496391	PtrMemberAccess	c -> mode		3495680	0					
ANR	3496392	Identifier	c		3495680	0					
ANR	3496393	Identifier	mode		3495680	1					
ANR	3496394	Identifier	START		3495680	1					
ANR	3496395	BreakStatement	break ;	215:6:6835:6840	3495680	74	True				
ANR	3496396	Label	case WASH :	216:4:6846:6855	3495680	75	True				
ANR	3496397	Identifier	WASH		3495680	0					
ANR	3496398	IfStatement	if ( k > 7 )		3495680	76					
ANR	3496399	Condition	k > 7	217:10:6915:6919	3495680	0	True				
ANR	3496400	RelationalExpression	k > 7		3495680	0		>			
ANR	3496401	Identifier	k		3495680	0					
ANR	3496402	PrimaryExpression	7		3495680	1					
ANR	3496403	CompoundStatement		135:6:4399:4399	3495680	1					
ANR	3496404	Statement	Assert	219:8:6978:6983	3495680	0	True				
ANR	3496405	Statement	(	219:14:6984:6984	3495680	1	True				
ANR	3496406	Statement	k	219:15:6985:6985	3495680	2	True				
ANR	3496407	Statement	<	219:17:6987:6987	3495680	3	True				
ANR	3496408	Statement	16	219:19:6989:6990	3495680	4	True				
ANR	3496409	Statement	","	219:21:6991:6991	3495680	5	True				
ANR	3496410	Statement	"""inflate_codes grabbed too many bytes"""	219:23:6993:7030	3495680	6	True				
ANR	3496411	Statement	)	219:61:7031:7031	3495680	7	True				
ANR	3496412	ExpressionStatement	k -= 8	220:8:7041:7047	3495680	8	True				
ANR	3496413	AssignmentExpression	k -= 8		3495680	0		-=			
ANR	3496414	Identifier	k		3495680	0					
ANR	3496415	PrimaryExpression	8		3495680	1					
ANR	3496416	ExpressionStatement	n ++	221:8:7057:7060	3495680	9	True				
ANR	3496417	PostIncDecOperationExpression	n ++		3495680	0					
ANR	3496418	Identifier	n		3495680	0					
ANR	3496419	IncDec	++		3495680	1					
ANR	3496420	ExpressionStatement	p --	222:8:7070:7073	3495680	10	True				
ANR	3496421	PostIncDecOperationExpression	p --		3495680	0					
ANR	3496422	Identifier	p		3495680	0					
ANR	3496423	IncDec	--		3495680	1					
ANR	3496424	Statement	FLUSH	224:6:7128:7132	3495680	77	True				
ANR	3496425	IfStatement	if ( s -> read != s -> write )		3495680	78					
ANR	3496426	Condition	s -> read != s -> write	225:10:7144:7162	3495680	0	True				
ANR	3496427	EqualityExpression	s -> read != s -> write		3495680	0		!=			
ANR	3496428	PtrMemberAccess	s -> read		3495680	0					
ANR	3496429	Identifier	s		3495680	0					
ANR	3496430	Identifier	read		3495680	1					
ANR	3496431	PtrMemberAccess	s -> write		3495680	1					
ANR	3496432	Identifier	s		3495680	0					
ANR	3496433	Identifier	write		3495680	1					
ANR	3496434	Statement	LEAVE	226:8:7173:7177	3495680	1	True				
ANR	3496435	ExpressionStatement	c -> mode = END	227:6:7185:7198	3495680	79	True				
ANR	3496436	AssignmentExpression	c -> mode = END		3495680	0		=			
ANR	3496437	PtrMemberAccess	c -> mode		3495680	0					
ANR	3496438	Identifier	c		3495680	0					
ANR	3496439	Identifier	mode		3495680	1					
ANR	3496440	Identifier	END		3495680	1					
ANR	3496441	Label	case END :	228:4:7204:7212	3495680	80	True				
ANR	3496442	Identifier	END		3495680	0					
ANR	3496443	ExpressionStatement	r = Z_STREAM_END	229:6:7220:7236	3495680	81	True				
ANR	3496444	AssignmentExpression	r = Z_STREAM_END		3495680	0		=			
ANR	3496445	Identifier	r		3495680	0					
ANR	3496446	Identifier	Z_STREAM_END		3495680	1					
ANR	3496447	Statement	LEAVE	230:6:7244:7248	3495680	82	True				
ANR	3496448	Label	case BADCODE :	231:4:7254:7266	3495680	83	True				
ANR	3496449	Identifier	BADCODE		3495680	0					
ANR	3496450	ExpressionStatement	r = Z_DATA_ERROR	232:6:7299:7315	3495680	84	True				
ANR	3496451	AssignmentExpression	r = Z_DATA_ERROR		3495680	0		=			
ANR	3496452	Identifier	r		3495680	0					
ANR	3496453	Identifier	Z_DATA_ERROR		3495680	1					
ANR	3496454	Statement	LEAVE	233:6:7323:7327	3495680	85	True				
ANR	3496455	Label	default :	234:4:7333:7340	3495680	86	True				
ANR	3496456	Identifier	default		3495680	0					
ANR	3496457	ExpressionStatement	r = Z_STREAM_ERROR	235:6:7348:7366	3495680	87	True				
ANR	3496458	AssignmentExpression	r = Z_STREAM_ERROR		3495680	0		=			
ANR	3496459	Identifier	r		3495680	0					
ANR	3496460	Identifier	Z_STREAM_ERROR		3495680	1					
ANR	3496461	Statement	LEAVE	236:6:7374:7378	3495680	88	True				
ANR	3496462	ReturnStatement	return Z_STREAM_ERROR ;	239:2:7411:7432	3495680	13	True				
ANR	3496463	Identifier	Z_STREAM_ERROR		3495680	0					
ANR	3496464	ReturnType	local int		3495680	1					
ANR	3496465	Identifier	inflate_codes		3495680	2					
ANR	3496466	ParameterList	"inflate_blocks_statef * s , z_streamp z , int r"		3495680	3					
ANR	3496467	Parameter	inflate_blocks_statef * s	81:0:2521:2544	3495680	0	True				
ANR	3496468	ParameterType	inflate_blocks_statef *		3495680	0					
ANR	3496469	Identifier	s		3495680	1					
ANR	3496470	Parameter	z_streamp z	82:0:2547:2557	3495680	1	True				
ANR	3496471	ParameterType	z_streamp		3495680	0					
ANR	3496472	Identifier	z		3495680	1					
ANR	3496473	Parameter	int r	83:0:2560:2564	3495680	2	True				
ANR	3496474	ParameterType	int		3495680	0					
ANR	3496475	Identifier	r		3495680	1					
ANR	3496476	CFGEntryNode	ENTRY		3495680		True				
ANR	3496477	CFGExitNode	EXIT		3495680		True				
ANR	3496478	Symbol	Z_STREAM_ERROR		3495680						
ANR	3496479	Symbol	Z_DATA_ERROR		3495680						
ANR	3496480	Symbol	* z		3495680						
ANR	3496481	Symbol	DIST		3495680						
ANR	3496482	Symbol	inflate_mask		3495680						
ANR	3496483	Symbol	s -> end		3495680						
ANR	3496484	Symbol	Z_STREAM_END		3495680						
ANR	3496485	Symbol	c -> len		3495680						
ANR	3496486	Symbol	s -> window		3495680						
ANR	3496487	Symbol	c -> mode		3495680						
ANR	3496488	Symbol	z -> msg		3495680						
ANR	3496489	Symbol	c -> sub . code . need		3495680						
ANR	3496490	Symbol	* inflate_mask		3495680						
ANR	3496491	Symbol	c -> sub . code . tree		3495680						
ANR	3496492	Symbol	s -> sub		3495680						
ANR	3496493	Symbol	stderr		3495680						
ANR	3496494	Symbol	c -> sub		3495680						
ANR	3496495	Symbol	s -> sub . decode		3495680						
ANR	3496496	Symbol	c -> sub . code		3495680						
ANR	3496497	Symbol	WASH		3495680						
ANR	3496498	Symbol	inflate_fast		3495680						
ANR	3496499	Symbol	END		3495680						
ANR	3496500	Symbol	c -> sub . copy		3495680						
ANR	3496501	Symbol	c -> sub . copy . get		3495680						
ANR	3496502	Symbol	Z_OK		3495680						
ANR	3496503	Symbol	LENEXT		3495680						
ANR	3496504	Symbol	c -> dbits		3495680						
ANR	3496505	Symbol	s -> read		3495680						
ANR	3496506	Symbol	c -> sub . lit		3495680						
ANR	3496507	Symbol	b		3495680						
ANR	3496508	Symbol	c		3495680						
ANR	3496509	Symbol	e		3495680						
ANR	3496510	Symbol	f		3495680						
ANR	3496511	Symbol	c -> lbits		3495680						
ANR	3496512	Symbol	c -> sub . copy . dist		3495680						
ANR	3496513	Symbol	t -> exop		3495680						
ANR	3496514	Symbol	t -> base		3495680						
ANR	3496515	Symbol	DISTEXT		3495680						
ANR	3496516	Symbol	j		3495680						
ANR	3496517	Symbol	COPY		3495680						
ANR	3496518	Symbol	k		3495680						
ANR	3496519	Symbol	m		3495680						
ANR	3496520	Symbol	* c		3495680						
ANR	3496521	Symbol	n		3495680						
ANR	3496522	Symbol	c -> dtree		3495680						
ANR	3496523	Symbol	p		3495680						
ANR	3496524	Symbol	q		3495680						
ANR	3496525	Symbol	r		3495680						
ANR	3496526	Symbol	s		3495680						
ANR	3496527	Symbol	t		3495680						
ANR	3496528	Symbol	LEN		3495680						
ANR	3496529	Symbol	* j		3495680						
ANR	3496530	Symbol	BADCODE		3495680						
ANR	3496531	Symbol	LIT		3495680						
ANR	3496532	Symbol	c -> ltree		3495680						
ANR	3496533	Symbol	s -> sub . decode . codes		3495680						
ANR	3496534	Symbol	z		3495680						
ANR	3496535	Symbol	START		3495680						
ANR	3496536	Symbol	* s		3495680						
ANR	3496537	Symbol	s -> write		3495680						
ANR	3496538	Symbol	* t		3495680						
ANR	3496539	Function	inflate_codes_free	244:0:7494:7644							
ANR	3496540	FunctionDef	"inflate_codes_free (inflate_codes_statef * c , z_streamp z)"		3496539	0					
ANR	3496541	CompoundStatement		247:0:7576:7644	3496539	0					
ANR	3496542	ExpressionStatement	"ZFREE ( z , c )"	248:2:7580:7591	3496539	0	True				
ANR	3496543	CallExpression	"ZFREE ( z , c )"		3496539	0					
ANR	3496544	Callee	ZFREE		3496539	0					
ANR	3496545	Identifier	ZFREE		3496539	0					
ANR	3496546	ArgumentList	z		3496539	1					
ANR	3496547	Argument	z		3496539	0					
ANR	3496548	Identifier	z		3496539	0					
ANR	3496549	Argument	c		3496539	1					
ANR	3496550	Identifier	c		3496539	0					
ANR	3496551	ExpressionStatement	"Tracev ( ( stderr , ""inflate:       codes free\\n"" ) )"	249:2:7595:7642	3496539	1	True				
ANR	3496552	CallExpression	"Tracev ( ( stderr , ""inflate:       codes free\\n"" ) )"		3496539	0					
ANR	3496553	Callee	Tracev		3496539	0					
ANR	3496554	Identifier	Tracev		3496539	0					
ANR	3496555	ArgumentList	"stderr , ""inflate:       codes free\\n"""		3496539	1					
ANR	3496556	Argument	"stderr , ""inflate:       codes free\\n"""		3496539	0					
ANR	3496557	Expression	"stderr , ""inflate:       codes free\\n"""		3496539	0					
ANR	3496558	Identifier	stderr		3496539	0					
ANR	3496559	PrimaryExpression	"""inflate:       codes free\\n"""		3496539	1					
ANR	3496560	ReturnType	local void		3496539	1					
ANR	3496561	Identifier	inflate_codes_free		3496539	2					
ANR	3496562	ParameterList	"inflate_codes_statef * c , z_streamp z"		3496539	3					
ANR	3496563	Parameter	inflate_codes_statef * c	245:0:7537:7559	3496539	0	True				
ANR	3496564	ParameterType	inflate_codes_statef *		3496539	0					
ANR	3496565	Identifier	c		3496539	1					
ANR	3496566	Parameter	z_streamp z	246:0:7562:7572	3496539	1	True				
ANR	3496567	ParameterType	z_streamp		3496539	0					
ANR	3496568	Identifier	z		3496539	1					
ANR	3496569	CFGEntryNode	ENTRY		3496539		True				
ANR	3496570	CFGExitNode	EXIT		3496539		True				
ANR	3496571	Symbol	c		3496539						
ANR	3496572	Symbol	z		3496539						
ANR	3496573	Symbol	stderr		3496539						
