command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5090175	File	data/converged/CVE-2018-16863_ghostpdl/gsfunc.c								
ANR	5090176	Function	alloc_function_array	34:0:1172:1639							
ANR	5090177	FunctionDef	"alloc_function_array (uint count , gs_function_t * * * pFunctions , gs_memory_t * mem)"		5090176	0					
ANR	5090178	CompoundStatement		37:0:1278:1639	5090176	0					
ANR	5090179	IdentifierDeclStatement	gs_function_t * * ptr ;	38:4:1284:1303	5090176	0	True				
ANR	5090180	IdentifierDecl	* * ptr		5090176	0					
ANR	5090181	IdentifierDeclType	gs_function_t * *		5090176	0					
ANR	5090182	Identifier	ptr		5090176	1					
ANR	5090183	IfStatement	if ( count == 0 )		5090176	1					
ANR	5090184	Condition	count == 0	40:8:1314:1323	5090176	0	True				
ANR	5090185	EqualityExpression	count == 0		5090176	0		==			
ANR	5090186	Identifier	count		5090176	0					
ANR	5090187	PrimaryExpression	0		5090176	1					
ANR	5090188	ExpressionStatement	return_error ( gs_error_rangecheck )	41:8:1334:1367	5090176	1	True				
ANR	5090189	CallExpression	return_error ( gs_error_rangecheck )		5090176	0					
ANR	5090190	Callee	return_error		5090176	0					
ANR	5090191	Identifier	return_error		5090176	0					
ANR	5090192	ArgumentList	gs_error_rangecheck		5090176	1					
ANR	5090193	Argument	gs_error_rangecheck		5090176	0					
ANR	5090194	Identifier	gs_error_rangecheck		5090176	0					
ANR	5090195	Statement	ptr	42:4:1373:1375	5090176	2	True				
ANR	5090196	Statement	=	42:8:1377:1377	5090176	3	True				
ANR	5090197	Statement	gs_alloc_struct_array	42:10:1379:1399	5090176	4	True				
ANR	5090198	Statement	(	42:31:1400:1400	5090176	5	True				
ANR	5090199	Statement	mem	42:32:1401:1403	5090176	6	True				
ANR	5090200	Statement	","	42:35:1404:1404	5090176	7	True				
ANR	5090201	Statement	count	42:37:1406:1410	5090176	8	True				
ANR	5090202	Statement	","	42:42:1411:1411	5090176	9	True				
ANR	5090203	Statement	gs_function_t	42:44:1413:1425	5090176	10	True				
ANR	5090204	Statement	*	42:58:1427:1427	5090176	11	True				
ANR	5090205	Statement	","	42:59:1428:1428	5090176	12	True				
ANR	5090206	Statement	&	43:32:1462:1462	5090176	13	True				
ANR	5090207	Statement	st_function_ptr_element	43:33:1463:1485	5090176	14	True				
ANR	5090208	Statement	","	43:56:1486:1486	5090176	15	True				
ANR	5090209	Statement	"""Functions"""	43:58:1488:1498	5090176	16	True				
ANR	5090210	Statement	)	43:69:1499:1499	5090176	17	True				
ANR	5090211	ExpressionStatement		43:70:1500:1500	5090176	18	True				
ANR	5090212	IfStatement	if ( ptr == 0 )		5090176	19					
ANR	5090213	Condition	ptr == 0	44:8:1510:1517	5090176	0	True				
ANR	5090214	EqualityExpression	ptr == 0		5090176	0		==			
ANR	5090215	Identifier	ptr		5090176	0					
ANR	5090216	PrimaryExpression	0		5090176	1					
ANR	5090217	ExpressionStatement	return_error ( gs_error_VMerror )	45:8:1528:1558	5090176	1	True				
ANR	5090218	CallExpression	return_error ( gs_error_VMerror )		5090176	0					
ANR	5090219	Callee	return_error		5090176	0					
ANR	5090220	Identifier	return_error		5090176	0					
ANR	5090221	ArgumentList	gs_error_VMerror		5090176	1					
ANR	5090222	Argument	gs_error_VMerror		5090176	0					
ANR	5090223	Identifier	gs_error_VMerror		5090176	0					
ANR	5090224	ExpressionStatement	"memset ( ptr , 0 , sizeof ( * ptr ) * count )"	46:4:1564:1600	5090176	20	True				
ANR	5090225	CallExpression	"memset ( ptr , 0 , sizeof ( * ptr ) * count )"		5090176	0					
ANR	5090226	Callee	memset		5090176	0					
ANR	5090227	Identifier	memset		5090176	0					
ANR	5090228	ArgumentList	ptr		5090176	1					
ANR	5090229	Argument	ptr		5090176	0					
ANR	5090230	Identifier	ptr		5090176	0					
ANR	5090231	Argument	0		5090176	1					
ANR	5090232	PrimaryExpression	0		5090176	0					
ANR	5090233	Argument	sizeof ( * ptr ) * count		5090176	2					
ANR	5090234	MultiplicativeExpression	sizeof ( * ptr ) * count		5090176	0		*			
ANR	5090235	SizeofExpression	sizeof ( * ptr )		5090176	0					
ANR	5090236	Sizeof	sizeof		5090176	0					
ANR	5090237	UnaryOperationExpression	* ptr		5090176	1					
ANR	5090238	UnaryOperator	*		5090176	0					
ANR	5090239	Identifier	ptr		5090176	1					
ANR	5090240	Identifier	count		5090176	1					
ANR	5090241	ExpressionStatement	* pFunctions = ptr	47:4:1606:1623	5090176	21	True				
ANR	5090242	AssignmentExpression	* pFunctions = ptr		5090176	0		=			
ANR	5090243	UnaryOperationExpression	* pFunctions		5090176	0					
ANR	5090244	UnaryOperator	*		5090176	0					
ANR	5090245	Identifier	pFunctions		5090176	1					
ANR	5090246	Identifier	ptr		5090176	1					
ANR	5090247	ReturnStatement	return 0 ;	48:4:1629:1637	5090176	22	True				
ANR	5090248	PrimaryExpression	0		5090176	0					
ANR	5090249	ReturnType	int		5090176	1					
ANR	5090250	Identifier	alloc_function_array		5090176	2					
ANR	5090251	ParameterList	"uint count , gs_function_t * * * pFunctions , gs_memory_t * mem"		5090176	3					
ANR	5090252	Parameter	uint count	35:21:1197:1206	5090176	0	True				
ANR	5090253	ParameterType	uint		5090176	0					
ANR	5090254	Identifier	count		5090176	1					
ANR	5090255	Parameter	gs_function_t * * * pFunctions	35:33:1209:1236	5090176	1	True				
ANR	5090256	ParameterType	gs_function_t * * *		5090176	0					
ANR	5090257	Identifier	pFunctions		5090176	1					
ANR	5090258	Parameter	gs_memory_t * mem	36:21:1260:1275	5090176	2	True				
ANR	5090259	ParameterType	gs_memory_t *		5090176	0					
ANR	5090260	Identifier	mem		5090176	1					
ANR	5090261	CFGEntryNode	ENTRY		5090176		True				
ANR	5090262	CFGExitNode	EXIT		5090176		True				
ANR	5090263	Symbol	gs_error_VMerror		5090176						
ANR	5090264	Symbol	mem		5090176						
ANR	5090265	Symbol	gs_error_rangecheck		5090176						
ANR	5090266	Symbol	count		5090176						
ANR	5090267	Symbol	* ptr		5090176						
ANR	5090268	Symbol	pFunctions		5090176						
ANR	5090269	Symbol	ptr		5090176						
ANR	5090270	Symbol	* pFunctions		5090176						
ANR	5090271	Function	fn_common_free_params	52:0:1684:1875							
ANR	5090272	FunctionDef	"fn_common_free_params (gs_function_params_t * params , gs_memory_t * mem)"		5090271	0					
ANR	5090273	CompoundStatement		54:0:1761:1875	5090271	0					
ANR	5090274	ExpressionStatement	"gs_free_const_object ( mem , params -> Range , ""Range"" )"	55:4:1767:1816	5090271	0	True				
ANR	5090275	CallExpression	"gs_free_const_object ( mem , params -> Range , ""Range"" )"		5090271	0					
ANR	5090276	Callee	gs_free_const_object		5090271	0					
ANR	5090277	Identifier	gs_free_const_object		5090271	0					
ANR	5090278	ArgumentList	mem		5090271	1					
ANR	5090279	Argument	mem		5090271	0					
ANR	5090280	Identifier	mem		5090271	0					
ANR	5090281	Argument	params -> Range		5090271	1					
ANR	5090282	PtrMemberAccess	params -> Range		5090271	0					
ANR	5090283	Identifier	params		5090271	0					
ANR	5090284	Identifier	Range		5090271	1					
ANR	5090285	Argument	"""Range"""		5090271	2					
ANR	5090286	PrimaryExpression	"""Range"""		5090271	0					
ANR	5090287	ExpressionStatement	"gs_free_const_object ( mem , params -> Domain , ""Domain"" )"	56:4:1822:1873	5090271	1	True				
ANR	5090288	CallExpression	"gs_free_const_object ( mem , params -> Domain , ""Domain"" )"		5090271	0					
ANR	5090289	Callee	gs_free_const_object		5090271	0					
ANR	5090290	Identifier	gs_free_const_object		5090271	0					
ANR	5090291	ArgumentList	mem		5090271	1					
ANR	5090292	Argument	mem		5090271	0					
ANR	5090293	Identifier	mem		5090271	0					
ANR	5090294	Argument	params -> Domain		5090271	1					
ANR	5090295	PtrMemberAccess	params -> Domain		5090271	0					
ANR	5090296	Identifier	params		5090271	0					
ANR	5090297	Identifier	Domain		5090271	1					
ANR	5090298	Argument	"""Domain"""		5090271	2					
ANR	5090299	PrimaryExpression	"""Domain"""		5090271	0					
ANR	5090300	ReturnType	void		5090271	1					
ANR	5090301	Identifier	fn_common_free_params		5090271	2					
ANR	5090302	ParameterList	"gs_function_params_t * params , gs_memory_t * mem"		5090271	3					
ANR	5090303	Parameter	gs_function_params_t * params	53:22:1711:1739	5090271	0	True				
ANR	5090304	ParameterType	gs_function_params_t *		5090271	0					
ANR	5090305	Identifier	params		5090271	1					
ANR	5090306	Parameter	gs_memory_t * mem	53:53:1742:1758	5090271	1	True				
ANR	5090307	ParameterType	gs_memory_t *		5090271	0					
ANR	5090308	Identifier	mem		5090271	1					
ANR	5090309	CFGEntryNode	ENTRY		5090271		True				
ANR	5090310	CFGExitNode	EXIT		5090271		True				
ANR	5090311	Symbol	params -> Domain		5090271						
ANR	5090312	Symbol	mem		5090271						
ANR	5090313	Symbol	params -> Range		5090271						
ANR	5090314	Symbol	params		5090271						
ANR	5090315	Symbol	* params		5090271						
ANR	5090316	Function	fn_common_free	60:0:1913:2105							
ANR	5090317	FunctionDef	"fn_common_free (gs_function_t * pfn , bool free_params , gs_memory_t * mem)"		5090316	0					
ANR	5090318	CompoundStatement		62:0:1991:2105	5090316	0					
ANR	5090319	IfStatement	if ( free_params )		5090316	0					
ANR	5090320	Condition	free_params	63:8:2001:2011	5090316	0	True				
ANR	5090321	Identifier	free_params		5090316	0					
ANR	5090322	ExpressionStatement	"gs_function_free_params ( pfn , mem )"	64:8:2022:2055	5090316	1	True				
ANR	5090323	CallExpression	"gs_function_free_params ( pfn , mem )"		5090316	0					
ANR	5090324	Callee	gs_function_free_params		5090316	0					
ANR	5090325	Identifier	gs_function_free_params		5090316	0					
ANR	5090326	ArgumentList	pfn		5090316	1					
ANR	5090327	Argument	pfn		5090316	0					
ANR	5090328	Identifier	pfn		5090316	0					
ANR	5090329	Argument	mem		5090316	1					
ANR	5090330	Identifier	mem		5090316	0					
ANR	5090331	ExpressionStatement	"gs_free_object ( mem , pfn , ""fn_common_free"" )"	65:4:2061:2103	5090316	1	True				
ANR	5090332	CallExpression	"gs_free_object ( mem , pfn , ""fn_common_free"" )"		5090316	0					
ANR	5090333	Callee	gs_free_object		5090316	0					
ANR	5090334	Identifier	gs_free_object		5090316	0					
ANR	5090335	ArgumentList	mem		5090316	1					
ANR	5090336	Argument	mem		5090316	0					
ANR	5090337	Identifier	mem		5090316	0					
ANR	5090338	Argument	pfn		5090316	1					
ANR	5090339	Identifier	pfn		5090316	0					
ANR	5090340	Argument	"""fn_common_free"""		5090316	2					
ANR	5090341	PrimaryExpression	"""fn_common_free"""		5090316	0					
ANR	5090342	ReturnType	void		5090316	1					
ANR	5090343	Identifier	fn_common_free		5090316	2					
ANR	5090344	ParameterList	"gs_function_t * pfn , bool free_params , gs_memory_t * mem"		5090316	3					
ANR	5090345	Parameter	gs_function_t * pfn	61:15:1933:1951	5090316	0	True				
ANR	5090346	ParameterType	gs_function_t *		5090316	0					
ANR	5090347	Identifier	pfn		5090316	1					
ANR	5090348	Parameter	bool free_params	61:36:1954:1969	5090316	1	True				
ANR	5090349	ParameterType	bool		5090316	0					
ANR	5090350	Identifier	free_params		5090316	1					
ANR	5090351	Parameter	gs_memory_t * mem	61:54:1972:1988	5090316	2	True				
ANR	5090352	ParameterType	gs_memory_t *		5090316	0					
ANR	5090353	Identifier	mem		5090316	1					
ANR	5090354	CFGEntryNode	ENTRY		5090316		True				
ANR	5090355	CFGExitNode	EXIT		5090316		True				
ANR	5090356	Symbol	mem		5090316						
ANR	5090357	Symbol	pfn		5090316						
ANR	5090358	Symbol	free_params		5090316						
ANR	5090359	Function	fn_check_mnDR	69:0:2173:2653							
ANR	5090360	FunctionDef	"fn_check_mnDR (const gs_function_params_t * params , int m , int n)"		5090359	0					
ANR	5090361	CompoundStatement		71:0:2242:2653	5090359	0					
ANR	5090362	IdentifierDeclStatement	int i ;	72:4:2248:2253	5090359	0	True				
ANR	5090363	IdentifierDecl	i		5090359	0					
ANR	5090364	IdentifierDeclType	int		5090359	0					
ANR	5090365	Identifier	i		5090359	1					
ANR	5090366	IfStatement	if ( m <= 0 || n <= 0 )		5090359	1					
ANR	5090367	Condition	m <= 0 || n <= 0	74:8:2264:2279	5090359	0	True				
ANR	5090368	OrExpression	m <= 0 || n <= 0		5090359	0		||			
ANR	5090369	RelationalExpression	m <= 0		5090359	0		<=			
ANR	5090370	Identifier	m		5090359	0					
ANR	5090371	PrimaryExpression	0		5090359	1					
ANR	5090372	RelationalExpression	n <= 0		5090359	1		<=			
ANR	5090373	Identifier	n		5090359	0					
ANR	5090374	PrimaryExpression	0		5090359	1					
ANR	5090375	ExpressionStatement	return_error ( gs_error_rangecheck )	75:8:2290:2323	5090359	1	True				
ANR	5090376	CallExpression	return_error ( gs_error_rangecheck )		5090359	0					
ANR	5090377	Callee	return_error		5090359	0					
ANR	5090378	Identifier	return_error		5090359	0					
ANR	5090379	ArgumentList	gs_error_rangecheck		5090359	1					
ANR	5090380	Argument	gs_error_rangecheck		5090359	0					
ANR	5090381	Identifier	gs_error_rangecheck		5090359	0					
ANR	5090382	ForStatement	for ( i = 0 ; i < m ; ++ i )		5090359	2					
ANR	5090383	ForInit	i = 0 ;	76:9:2334:2339	5090359	0	True				
ANR	5090384	AssignmentExpression	i = 0		5090359	0		=			
ANR	5090385	Identifier	i		5090359	0					
ANR	5090386	PrimaryExpression	0		5090359	1					
ANR	5090387	Condition	i < m	76:16:2341:2345	5090359	1	True				
ANR	5090388	RelationalExpression	i < m		5090359	0		<			
ANR	5090389	Identifier	i		5090359	0					
ANR	5090390	Identifier	m		5090359	1					
ANR	5090391	UnaryExpression	++ i	76:23:2348:2350	5090359	2	True				
ANR	5090392	IncDec	++		5090359	0					
ANR	5090393	Identifier	i		5090359	1					
ANR	5090394	IfStatement	if ( params -> Domain [ 2 * i ] > params -> Domain [ 2 * i + 1 ] )		5090359	3					
ANR	5090395	Condition	params -> Domain [ 2 * i ] > params -> Domain [ 2 * i + 1 ]	77:12:2365:2413	5090359	0	True				
ANR	5090396	RelationalExpression	params -> Domain [ 2 * i ] > params -> Domain [ 2 * i + 1 ]		5090359	0		>			
ANR	5090397	ArrayIndexing	params -> Domain [ 2 * i ]		5090359	0					
ANR	5090398	PtrMemberAccess	params -> Domain		5090359	0					
ANR	5090399	Identifier	params		5090359	0					
ANR	5090400	Identifier	Domain		5090359	1					
ANR	5090401	MultiplicativeExpression	2 * i		5090359	1		*			
ANR	5090402	PrimaryExpression	2		5090359	0					
ANR	5090403	Identifier	i		5090359	1					
ANR	5090404	ArrayIndexing	params -> Domain [ 2 * i + 1 ]		5090359	1					
ANR	5090405	PtrMemberAccess	params -> Domain		5090359	0					
ANR	5090406	Identifier	params		5090359	0					
ANR	5090407	Identifier	Domain		5090359	1					
ANR	5090408	AdditiveExpression	2 * i + 1		5090359	1		+			
ANR	5090409	MultiplicativeExpression	2 * i		5090359	0		*			
ANR	5090410	PrimaryExpression	2		5090359	0					
ANR	5090411	Identifier	i		5090359	1					
ANR	5090412	PrimaryExpression	1		5090359	1					
ANR	5090413	ExpressionStatement	return_error ( gs_error_rangecheck )	78:12:2428:2461	5090359	1	True				
ANR	5090414	CallExpression	return_error ( gs_error_rangecheck )		5090359	0					
ANR	5090415	Callee	return_error		5090359	0					
ANR	5090416	Identifier	return_error		5090359	0					
ANR	5090417	ArgumentList	gs_error_rangecheck		5090359	1					
ANR	5090418	Argument	gs_error_rangecheck		5090359	0					
ANR	5090419	Identifier	gs_error_rangecheck		5090359	0					
ANR	5090420	IfStatement	if ( params -> Range != 0 )		5090359	3					
ANR	5090421	Condition	params -> Range != 0	79:8:2471:2488	5090359	0	True				
ANR	5090422	EqualityExpression	params -> Range != 0		5090359	0		!=			
ANR	5090423	PtrMemberAccess	params -> Range		5090359	0					
ANR	5090424	Identifier	params		5090359	0					
ANR	5090425	Identifier	Range		5090359	1					
ANR	5090426	PrimaryExpression	0		5090359	1					
ANR	5090427	ForStatement	for ( i = 0 ; i < n ; ++ i )		5090359	1					
ANR	5090428	ForInit	i = 0 ;	80:13:2504:2509	5090359	0	True				
ANR	5090429	AssignmentExpression	i = 0		5090359	0		=			
ANR	5090430	Identifier	i		5090359	0					
ANR	5090431	PrimaryExpression	0		5090359	1					
ANR	5090432	Condition	i < n	80:20:2511:2515	5090359	1	True				
ANR	5090433	RelationalExpression	i < n		5090359	0		<			
ANR	5090434	Identifier	i		5090359	0					
ANR	5090435	Identifier	n		5090359	1					
ANR	5090436	UnaryExpression	++ i	80:27:2518:2520	5090359	2	True				
ANR	5090437	IncDec	++		5090359	0					
ANR	5090438	Identifier	i		5090359	1					
ANR	5090439	IfStatement	if ( params -> Range [ 2 * i ] > params -> Range [ 2 * i + 1 ] )		5090359	3					
ANR	5090440	Condition	params -> Range [ 2 * i ] > params -> Range [ 2 * i + 1 ]	81:16:2539:2585	5090359	0	True				
ANR	5090441	RelationalExpression	params -> Range [ 2 * i ] > params -> Range [ 2 * i + 1 ]		5090359	0		>			
ANR	5090442	ArrayIndexing	params -> Range [ 2 * i ]		5090359	0					
ANR	5090443	PtrMemberAccess	params -> Range		5090359	0					
ANR	5090444	Identifier	params		5090359	0					
ANR	5090445	Identifier	Range		5090359	1					
ANR	5090446	MultiplicativeExpression	2 * i		5090359	1		*			
ANR	5090447	PrimaryExpression	2		5090359	0					
ANR	5090448	Identifier	i		5090359	1					
ANR	5090449	ArrayIndexing	params -> Range [ 2 * i + 1 ]		5090359	1					
ANR	5090450	PtrMemberAccess	params -> Range		5090359	0					
ANR	5090451	Identifier	params		5090359	0					
ANR	5090452	Identifier	Range		5090359	1					
ANR	5090453	AdditiveExpression	2 * i + 1		5090359	1		+			
ANR	5090454	MultiplicativeExpression	2 * i		5090359	0		*			
ANR	5090455	PrimaryExpression	2		5090359	0					
ANR	5090456	Identifier	i		5090359	1					
ANR	5090457	PrimaryExpression	1		5090359	1					
ANR	5090458	ExpressionStatement	return_error ( gs_error_rangecheck )	82:16:2604:2637	5090359	1	True				
ANR	5090459	CallExpression	return_error ( gs_error_rangecheck )		5090359	0					
ANR	5090460	Callee	return_error		5090359	0					
ANR	5090461	Identifier	return_error		5090359	0					
ANR	5090462	ArgumentList	gs_error_rangecheck		5090359	1					
ANR	5090463	Argument	gs_error_rangecheck		5090359	0					
ANR	5090464	Identifier	gs_error_rangecheck		5090359	0					
ANR	5090465	ReturnStatement	return 0 ;	83:4:2643:2651	5090359	4	True				
ANR	5090466	PrimaryExpression	0		5090359	0					
ANR	5090467	ReturnType	int		5090359	1					
ANR	5090468	Identifier	fn_check_mnDR		5090359	2					
ANR	5090469	ParameterList	"const gs_function_params_t * params , int m , int n"		5090359	3					
ANR	5090470	Parameter	const gs_function_params_t * params	70:14:2191:2225	5090359	0	True				
ANR	5090471	ParameterType	const gs_function_params_t *		5090359	0					
ANR	5090472	Identifier	params		5090359	1					
ANR	5090473	Parameter	int m	70:51:2228:2232	5090359	1	True				
ANR	5090474	ParameterType	int		5090359	0					
ANR	5090475	Identifier	m		5090359	1					
ANR	5090476	Parameter	int n	70:58:2235:2239	5090359	2	True				
ANR	5090477	ParameterType	int		5090359	0					
ANR	5090478	Identifier	n		5090359	1					
ANR	5090479	CFGEntryNode	ENTRY		5090359		True				
ANR	5090480	CFGExitNode	EXIT		5090359		True				
ANR	5090481	Symbol	params -> Domain		5090359						
ANR	5090482	Symbol	* i		5090359						
ANR	5090483	Symbol	gs_error_rangecheck		5090359						
ANR	5090484	Symbol	params -> Range		5090359						
ANR	5090485	Symbol	i		5090359						
ANR	5090486	Symbol	* params -> Domain		5090359						
ANR	5090487	Symbol	* params -> Range		5090359						
ANR	5090488	Symbol	params		5090359						
ANR	5090489	Symbol	* * params		5090359						
ANR	5090490	Symbol	m		5090359						
ANR	5090491	Symbol	n		5090359						
ANR	5090492	Symbol	* params		5090359						
ANR	5090493	Function	gs_function_get_info_default	87:0:2699:2835							
ANR	5090494	FunctionDef	"gs_function_get_info_default (const gs_function_t * pfn , gs_function_info_t * pfi)"		5090493	0					
ANR	5090495	CompoundStatement		89:0:2784:2835	5090493	0					
ANR	5090496	ExpressionStatement	pfi -> DataSource = 0	90:4:2790:2809	5090493	0	True				
ANR	5090497	AssignmentExpression	pfi -> DataSource = 0		5090493	0		=			
ANR	5090498	PtrMemberAccess	pfi -> DataSource		5090493	0					
ANR	5090499	Identifier	pfi		5090493	0					
ANR	5090500	Identifier	DataSource		5090493	1					
ANR	5090501	PrimaryExpression	0		5090493	1					
ANR	5090502	ExpressionStatement	pfi -> Functions = 0	91:4:2815:2833	5090493	1	True				
ANR	5090503	AssignmentExpression	pfi -> Functions = 0		5090493	0		=			
ANR	5090504	PtrMemberAccess	pfi -> Functions		5090493	0					
ANR	5090505	Identifier	pfi		5090493	0					
ANR	5090506	Identifier	Functions		5090493	1					
ANR	5090507	PrimaryExpression	0		5090493	1					
ANR	5090508	ReturnType	void		5090493	1					
ANR	5090509	Identifier	gs_function_get_info_default		5090493	2					
ANR	5090510	ParameterList	"const gs_function_t * pfn , gs_function_info_t * pfi"		5090493	3					
ANR	5090511	Parameter	const gs_function_t * pfn	88:29:2733:2756	5090493	0	True				
ANR	5090512	ParameterType	const gs_function_t *		5090493	0					
ANR	5090513	Identifier	pfn		5090493	1					
ANR	5090514	Parameter	gs_function_info_t * pfi	88:55:2759:2781	5090493	1	True				
ANR	5090515	ParameterType	gs_function_info_t *		5090493	0					
ANR	5090516	Identifier	pfi		5090493	1					
ANR	5090517	CFGEntryNode	ENTRY		5090493		True				
ANR	5090518	CFGExitNode	EXIT		5090493		True				
ANR	5090519	Symbol	pfi -> DataSource		5090493						
ANR	5090520	Symbol	pfi		5090493						
ANR	5090521	Symbol	pfn		5090493						
ANR	5090522	Symbol	pfi -> Functions		5090493						
ANR	5090523	Symbol	* pfi		5090493						
ANR	5090524	Function	fn_common_get_params	97:0:2924:3561							
ANR	5090525	FunctionDef	"fn_common_get_params (const gs_function_t * pfn , gs_param_list * plist)"		5090524	0					
ANR	5090526	CompoundStatement		99:0:2997:3561	5090524	0					
ANR	5090527	IdentifierDeclStatement	"int ecode = param_write_int ( plist , ""FunctionType"" , & FunctionType ( pfn ) ) ;"	100:4:3003:3073	5090524	0	True				
ANR	5090528	IdentifierDecl	"ecode = param_write_int ( plist , ""FunctionType"" , & FunctionType ( pfn ) )"		5090524	0					
ANR	5090529	IdentifierDeclType	int		5090524	0					
ANR	5090530	Identifier	ecode		5090524	1					
ANR	5090531	AssignmentExpression	"ecode = param_write_int ( plist , ""FunctionType"" , & FunctionType ( pfn ) )"		5090524	2		=			
ANR	5090532	Identifier	ecode		5090524	0					
ANR	5090533	CallExpression	"param_write_int ( plist , ""FunctionType"" , & FunctionType ( pfn ) )"		5090524	1					
ANR	5090534	Callee	param_write_int		5090524	0					
ANR	5090535	Identifier	param_write_int		5090524	0					
ANR	5090536	ArgumentList	plist		5090524	1					
ANR	5090537	Argument	plist		5090524	0					
ANR	5090538	Identifier	plist		5090524	0					
ANR	5090539	Argument	"""FunctionType"""		5090524	1					
ANR	5090540	PrimaryExpression	"""FunctionType"""		5090524	0					
ANR	5090541	Argument	& FunctionType ( pfn )		5090524	2					
ANR	5090542	UnaryOperationExpression	& FunctionType ( pfn )		5090524	0					
ANR	5090543	UnaryOperator	&		5090524	0					
ANR	5090544	CallExpression	FunctionType ( pfn )		5090524	1					
ANR	5090545	Callee	FunctionType		5090524	0					
ANR	5090546	Identifier	FunctionType		5090524	0					
ANR	5090547	ArgumentList	pfn		5090524	1					
ANR	5090548	Argument	pfn		5090524	0					
ANR	5090549	Identifier	pfn		5090524	0					
ANR	5090550	IdentifierDeclStatement	int code ;	101:4:3079:3087	5090524	1	True				
ANR	5090551	IdentifierDecl	code		5090524	0					
ANR	5090552	IdentifierDeclType	int		5090524	0					
ANR	5090553	Identifier	code		5090524	1					
ANR	5090554	IfStatement	if ( pfn -> params . Domain )		5090524	2					
ANR	5090555	Condition	pfn -> params . Domain	103:8:3098:3115	5090524	0	True				
ANR	5090556	MemberAccess	pfn -> params . Domain		5090524	0					
ANR	5090557	PtrMemberAccess	pfn -> params		5090524	0					
ANR	5090558	Identifier	pfn		5090524	0					
ANR	5090559	Identifier	params		5090524	1					
ANR	5090560	Identifier	Domain		5090524	1					
ANR	5090561	CompoundStatement		5:28:120:120	5090524	1					
ANR	5090562	ExpressionStatement	"code = param_write_float_values ( plist , ""Domain"" , pfn -> params . Domain , 2 * pfn -> params . m , false )"	104:8:3128:3262	5090524	0	True				
ANR	5090563	AssignmentExpression	"code = param_write_float_values ( plist , ""Domain"" , pfn -> params . Domain , 2 * pfn -> params . m , false )"		5090524	0		=			
ANR	5090564	Identifier	code		5090524	0					
ANR	5090565	CallExpression	"param_write_float_values ( plist , ""Domain"" , pfn -> params . Domain , 2 * pfn -> params . m , false )"		5090524	1					
ANR	5090566	Callee	param_write_float_values		5090524	0					
ANR	5090567	Identifier	param_write_float_values		5090524	0					
ANR	5090568	ArgumentList	plist		5090524	1					
ANR	5090569	Argument	plist		5090524	0					
ANR	5090570	Identifier	plist		5090524	0					
ANR	5090571	Argument	"""Domain"""		5090524	1					
ANR	5090572	PrimaryExpression	"""Domain"""		5090524	0					
ANR	5090573	Argument	pfn -> params . Domain		5090524	2					
ANR	5090574	MemberAccess	pfn -> params . Domain		5090524	0					
ANR	5090575	PtrMemberAccess	pfn -> params		5090524	0					
ANR	5090576	Identifier	pfn		5090524	0					
ANR	5090577	Identifier	params		5090524	1					
ANR	5090578	Identifier	Domain		5090524	1					
ANR	5090579	Argument	2 * pfn -> params . m		5090524	3					
ANR	5090580	MultiplicativeExpression	2 * pfn -> params . m		5090524	0		*			
ANR	5090581	PrimaryExpression	2		5090524	0					
ANR	5090582	MemberAccess	pfn -> params . m		5090524	1					
ANR	5090583	PtrMemberAccess	pfn -> params		5090524	0					
ANR	5090584	Identifier	pfn		5090524	0					
ANR	5090585	Identifier	params		5090524	1					
ANR	5090586	Identifier	m		5090524	1					
ANR	5090587	Argument	false		5090524	4					
ANR	5090588	Identifier	false		5090524	0					
ANR	5090589	IfStatement	if ( code < 0 )		5090524	1					
ANR	5090590	Condition	code < 0	106:12:3276:3283	5090524	0	True				
ANR	5090591	RelationalExpression	code < 0		5090524	0		<			
ANR	5090592	Identifier	code		5090524	0					
ANR	5090593	PrimaryExpression	0		5090524	1					
ANR	5090594	ExpressionStatement	ecode = code	107:12:3298:3310	5090524	1	True				
ANR	5090595	AssignmentExpression	ecode = code		5090524	0		=			
ANR	5090596	Identifier	ecode		5090524	0					
ANR	5090597	Identifier	code		5090524	1					
ANR	5090598	IfStatement	if ( pfn -> params . Range )		5090524	3					
ANR	5090599	Condition	pfn -> params . Range	109:8:3326:3342	5090524	0	True				
ANR	5090600	MemberAccess	pfn -> params . Range		5090524	0					
ANR	5090601	PtrMemberAccess	pfn -> params		5090524	0					
ANR	5090602	Identifier	pfn		5090524	0					
ANR	5090603	Identifier	params		5090524	1					
ANR	5090604	Identifier	Range		5090524	1					
ANR	5090605	CompoundStatement		11:27:347:347	5090524	1					
ANR	5090606	ExpressionStatement	"code = param_write_float_values ( plist , ""Range"" , pfn -> params . Range , 2 * pfn -> params . n , false )"	110:8:3355:3487	5090524	0	True				
ANR	5090607	AssignmentExpression	"code = param_write_float_values ( plist , ""Range"" , pfn -> params . Range , 2 * pfn -> params . n , false )"		5090524	0		=			
ANR	5090608	Identifier	code		5090524	0					
ANR	5090609	CallExpression	"param_write_float_values ( plist , ""Range"" , pfn -> params . Range , 2 * pfn -> params . n , false )"		5090524	1					
ANR	5090610	Callee	param_write_float_values		5090524	0					
ANR	5090611	Identifier	param_write_float_values		5090524	0					
ANR	5090612	ArgumentList	plist		5090524	1					
ANR	5090613	Argument	plist		5090524	0					
ANR	5090614	Identifier	plist		5090524	0					
ANR	5090615	Argument	"""Range"""		5090524	1					
ANR	5090616	PrimaryExpression	"""Range"""		5090524	0					
ANR	5090617	Argument	pfn -> params . Range		5090524	2					
ANR	5090618	MemberAccess	pfn -> params . Range		5090524	0					
ANR	5090619	PtrMemberAccess	pfn -> params		5090524	0					
ANR	5090620	Identifier	pfn		5090524	0					
ANR	5090621	Identifier	params		5090524	1					
ANR	5090622	Identifier	Range		5090524	1					
ANR	5090623	Argument	2 * pfn -> params . n		5090524	3					
ANR	5090624	MultiplicativeExpression	2 * pfn -> params . n		5090524	0		*			
ANR	5090625	PrimaryExpression	2		5090524	0					
ANR	5090626	MemberAccess	pfn -> params . n		5090524	1					
ANR	5090627	PtrMemberAccess	pfn -> params		5090524	0					
ANR	5090628	Identifier	pfn		5090524	0					
ANR	5090629	Identifier	params		5090524	1					
ANR	5090630	Identifier	n		5090524	1					
ANR	5090631	Argument	false		5090524	4					
ANR	5090632	Identifier	false		5090524	0					
ANR	5090633	IfStatement	if ( code < 0 )		5090524	1					
ANR	5090634	Condition	code < 0	112:12:3501:3508	5090524	0	True				
ANR	5090635	RelationalExpression	code < 0		5090524	0		<			
ANR	5090636	Identifier	code		5090524	0					
ANR	5090637	PrimaryExpression	0		5090524	1					
ANR	5090638	ExpressionStatement	ecode = code	113:12:3523:3535	5090524	1	True				
ANR	5090639	AssignmentExpression	ecode = code		5090524	0		=			
ANR	5090640	Identifier	ecode		5090524	0					
ANR	5090641	Identifier	code		5090524	1					
ANR	5090642	ReturnStatement	return ecode ;	115:4:3547:3559	5090524	4	True				
ANR	5090643	Identifier	ecode		5090524	0					
ANR	5090644	ReturnType	int		5090524	1					
ANR	5090645	Identifier	fn_common_get_params		5090524	2					
ANR	5090646	ParameterList	"const gs_function_t * pfn , gs_param_list * plist"		5090524	3					
ANR	5090647	Parameter	const gs_function_t * pfn	98:21:2949:2972	5090524	0	True				
ANR	5090648	ParameterType	const gs_function_t *		5090524	0					
ANR	5090649	Identifier	pfn		5090524	1					
ANR	5090650	Parameter	gs_param_list * plist	98:47:2975:2994	5090524	1	True				
ANR	5090651	ParameterType	gs_param_list *		5090524	0					
ANR	5090652	Identifier	plist		5090524	1					
ANR	5090653	CFGEntryNode	ENTRY		5090524		True				
ANR	5090654	CFGExitNode	EXIT		5090524		True				
ANR	5090655	Symbol	* pfn		5090524						
ANR	5090656	Symbol	pfn -> params . m		5090524						
ANR	5090657	Symbol	pfn -> params . Range		5090524						
ANR	5090658	Symbol	code		5090524						
ANR	5090659	Symbol	pfn -> params . n		5090524						
ANR	5090660	Symbol	false		5090524						
ANR	5090661	Symbol	pfn -> params . Domain		5090524						
ANR	5090662	Symbol	& FunctionType		5090524						
ANR	5090663	Symbol	param_write_float_values		5090524						
ANR	5090664	Symbol	ecode		5090524						
ANR	5090665	Symbol	plist		5090524						
ANR	5090666	Symbol	pfn		5090524						
ANR	5090667	Symbol	pfn -> params		5090524						
ANR	5090668	Symbol	param_write_int		5090524						
ANR	5090669	Function	fn_copy_values	121:0:3631:3963							
ANR	5090670	FunctionDef	"fn_copy_values (const void * pvalues , int count , int size , gs_memory_t * mem)"		5090669	0					
ANR	5090671	CompoundStatement		123:0:3713:3963	5090669	0					
ANR	5090672	IfStatement	if ( pvalues )		5090669	0					
ANR	5090673	Condition	pvalues	124:8:3723:3729	5090669	0	True				
ANR	5090674	Identifier	pvalues		5090669	0					
ANR	5090675	CompoundStatement		3:8:28:98	5090669	1					
ANR	5090676	IdentifierDeclStatement	"void * values = gs_alloc_byte_array ( mem , count , size , ""fn_copy_values"" ) ;"	125:8:3742:3812	5090669	0	True				
ANR	5090677	IdentifierDecl	"* values = gs_alloc_byte_array ( mem , count , size , ""fn_copy_values"" )"		5090669	0					
ANR	5090678	IdentifierDeclType	void *		5090669	0					
ANR	5090679	Identifier	values		5090669	1					
ANR	5090680	AssignmentExpression	"* values = gs_alloc_byte_array ( mem , count , size , ""fn_copy_values"" )"		5090669	2		=			
ANR	5090681	Identifier	values		5090669	0					
ANR	5090682	CallExpression	"gs_alloc_byte_array ( mem , count , size , ""fn_copy_values"" )"		5090669	1					
ANR	5090683	Callee	gs_alloc_byte_array		5090669	0					
ANR	5090684	Identifier	gs_alloc_byte_array		5090669	0					
ANR	5090685	ArgumentList	mem		5090669	1					
ANR	5090686	Argument	mem		5090669	0					
ANR	5090687	Identifier	mem		5090669	0					
ANR	5090688	Argument	count		5090669	1					
ANR	5090689	Identifier	count		5090669	0					
ANR	5090690	Argument	size		5090669	2					
ANR	5090691	Identifier	size		5090669	0					
ANR	5090692	Argument	"""fn_copy_values"""		5090669	3					
ANR	5090693	PrimaryExpression	"""fn_copy_values"""		5090669	0					
ANR	5090694	IfStatement	if ( values )		5090669	1					
ANR	5090695	Condition	values	127:12:3827:3832	5090669	0	True				
ANR	5090696	Identifier	values		5090669	0					
ANR	5090697	ExpressionStatement	"memcpy ( values , pvalues , count * size )"	128:12:3847:3884	5090669	1	True				
ANR	5090698	CallExpression	"memcpy ( values , pvalues , count * size )"		5090669	0					
ANR	5090699	Callee	memcpy		5090669	0					
ANR	5090700	Identifier	memcpy		5090669	0					
ANR	5090701	ArgumentList	values		5090669	1					
ANR	5090702	Argument	values		5090669	0					
ANR	5090703	Identifier	values		5090669	0					
ANR	5090704	Argument	pvalues		5090669	1					
ANR	5090705	Identifier	pvalues		5090669	0					
ANR	5090706	Argument	count * size		5090669	2					
ANR	5090707	MultiplicativeExpression	count * size		5090669	0		*			
ANR	5090708	Identifier	count		5090669	0					
ANR	5090709	Identifier	size		5090669	1					
ANR	5090710	ReturnStatement	return values ;	129:8:3894:3907	5090669	2	True				
ANR	5090711	Identifier	values		5090669	0					
ANR	5090712	ElseStatement	else		5090669	0					
ANR	5090713	ReturnStatement	return 0 ;	131:8:3928:3936	5090669	0	True				
ANR	5090714	PrimaryExpression	0		5090669	0					
ANR	5090715	ReturnType	void *		5090669	1					
ANR	5090716	Identifier	fn_copy_values		5090669	2					
ANR	5090717	ParameterList	"const void * pvalues , int count , int size , gs_memory_t * mem"		5090669	3					
ANR	5090718	Parameter	const void * pvalues	122:15:3653:3671	5090669	0	True				
ANR	5090719	ParameterType	const void *		5090669	0					
ANR	5090720	Identifier	pvalues		5090669	1					
ANR	5090721	Parameter	int count	122:36:3674:3682	5090669	1	True				
ANR	5090722	ParameterType	int		5090669	0					
ANR	5090723	Identifier	count		5090669	1					
ANR	5090724	Parameter	int size	122:47:3685:3692	5090669	2	True				
ANR	5090725	ParameterType	int		5090669	0					
ANR	5090726	Identifier	size		5090669	1					
ANR	5090727	Parameter	gs_memory_t * mem	122:57:3695:3710	5090669	3	True				
ANR	5090728	ParameterType	gs_memory_t *		5090669	0					
ANR	5090729	Identifier	mem		5090669	1					
ANR	5090730	CFGEntryNode	ENTRY		5090669		True				
ANR	5090731	CFGExitNode	EXIT		5090669		True				
ANR	5090732	Symbol	size		5090669						
ANR	5090733	Symbol	mem		5090669						
ANR	5090734	Symbol	values		5090669						
ANR	5090735	Symbol	count		5090669						
ANR	5090736	Symbol	gs_alloc_byte_array		5090669						
ANR	5090737	Symbol	pvalues		5090669						
ANR	5090738	Function	fn_scale_pairs	138:0:4092:4992							
ANR	5090739	FunctionDef	"fn_scale_pairs (const float * * ppvalues , const float * pvalues , int npairs , const gs_range_t * pranges , gs_memory_t * mem)"		5090738	0					
ANR	5090740	CompoundStatement		141:0:4229:4992	5090738	0					
ANR	5090741	IfStatement	if ( pvalues == 0 )		5090738	0					
ANR	5090742	Condition	pvalues == 0	142:8:4239:4250	5090738	0	True				
ANR	5090743	EqualityExpression	pvalues == 0		5090738	0		==			
ANR	5090744	Identifier	pvalues		5090738	0					
ANR	5090745	PrimaryExpression	0		5090738	1					
ANR	5090746	ExpressionStatement	* ppvalues = 0	143:8:4261:4274	5090738	1	True				
ANR	5090747	AssignmentExpression	* ppvalues = 0		5090738	0		=			
ANR	5090748	UnaryOperationExpression	* ppvalues		5090738	0					
ANR	5090749	UnaryOperator	*		5090738	0					
ANR	5090750	Identifier	ppvalues		5090738	1					
ANR	5090751	PrimaryExpression	0		5090738	1					
ANR	5090752	ElseStatement	else		5090738	0					
ANR	5090753	CompoundStatement		5:8:65:204	5090738	0					
ANR	5090754	IdentifierDeclStatement	"float * out = ( float * ) gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" ) ;"	145:8:4295:4434	5090738	0	True				
ANR	5090755	IdentifierDecl	"* out = ( float * ) gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" )"		5090738	0					
ANR	5090756	IdentifierDeclType	float *		5090738	0					
ANR	5090757	Identifier	out		5090738	1					
ANR	5090758	AssignmentExpression	"* out = ( float * ) gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" )"		5090738	2		=			
ANR	5090759	Identifier	out		5090738	0					
ANR	5090760	CastExpression	"( float * ) gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" )"		5090738	1					
ANR	5090761	CastTarget	float *		5090738	0					
ANR	5090762	CallExpression	"gs_alloc_byte_array ( mem , 2 * npairs , sizeof ( * pvalues ) , ""fn_scale_pairs"" )"		5090738	1					
ANR	5090763	Callee	gs_alloc_byte_array		5090738	0					
ANR	5090764	Identifier	gs_alloc_byte_array		5090738	0					
ANR	5090765	ArgumentList	mem		5090738	1					
ANR	5090766	Argument	mem		5090738	0					
ANR	5090767	Identifier	mem		5090738	0					
ANR	5090768	Argument	2 * npairs		5090738	1					
ANR	5090769	MultiplicativeExpression	2 * npairs		5090738	0		*			
ANR	5090770	PrimaryExpression	2		5090738	0					
ANR	5090771	Identifier	npairs		5090738	1					
ANR	5090772	Argument	sizeof ( * pvalues )		5090738	2					
ANR	5090773	SizeofExpression	sizeof ( * pvalues )		5090738	0					
ANR	5090774	Sizeof	sizeof		5090738	0					
ANR	5090775	UnaryOperationExpression	* pvalues		5090738	1					
ANR	5090776	UnaryOperator	*		5090738	0					
ANR	5090777	Identifier	pvalues		5090738	1					
ANR	5090778	Argument	"""fn_scale_pairs"""		5090738	3					
ANR	5090779	PrimaryExpression	"""fn_scale_pairs"""		5090738	0					
ANR	5090780	ExpressionStatement	* ppvalues = out	149:8:4445:4460	5090738	1	True				
ANR	5090781	AssignmentExpression	* ppvalues = out		5090738	0		=			
ANR	5090782	UnaryOperationExpression	* ppvalues		5090738	0					
ANR	5090783	UnaryOperator	*		5090738	0					
ANR	5090784	Identifier	ppvalues		5090738	1					
ANR	5090785	Identifier	out		5090738	1					
ANR	5090786	IfStatement	if ( out == 0 )		5090738	2					
ANR	5090787	Condition	out == 0	150:12:4474:4481	5090738	0	True				
ANR	5090788	EqualityExpression	out == 0		5090738	0		==			
ANR	5090789	Identifier	out		5090738	0					
ANR	5090790	PrimaryExpression	0		5090738	1					
ANR	5090791	ExpressionStatement	return_error ( gs_error_VMerror )	151:12:4496:4526	5090738	1	True				
ANR	5090792	CallExpression	return_error ( gs_error_VMerror )		5090738	0					
ANR	5090793	Callee	return_error		5090738	0					
ANR	5090794	Identifier	return_error		5090738	0					
ANR	5090795	ArgumentList	gs_error_VMerror		5090738	1					
ANR	5090796	Argument	gs_error_VMerror		5090738	0					
ANR	5090797	Identifier	gs_error_VMerror		5090738	0					
ANR	5090798	IfStatement	if ( pranges )		5090738	3					
ANR	5090799	Condition	pranges	152:12:4540:4546	5090738	0	True				
ANR	5090800	Identifier	pranges		5090738	0					
ANR	5090801	CompoundStatement		14:12:387:392	5090738	1					
ANR	5090802	IdentifierDeclStatement	int i ;	154:12:4617:4622	5090738	0	True				
ANR	5090803	IdentifierDecl	i		5090738	0					
ANR	5090804	IdentifierDeclType	int		5090738	0					
ANR	5090805	Identifier	i		5090738	1					
ANR	5090806	ForStatement	for ( i = 0 ; i < npairs ; ++ i )		5090738	1					
ANR	5090807	ForInit	i = 0 ;	155:17:4641:4646	5090738	0	True				
ANR	5090808	AssignmentExpression	i = 0		5090738	0		=			
ANR	5090809	Identifier	i		5090738	0					
ANR	5090810	PrimaryExpression	0		5090738	1					
ANR	5090811	Condition	i < npairs	155:24:4648:4657	5090738	1	True				
ANR	5090812	RelationalExpression	i < npairs		5090738	0		<			
ANR	5090813	Identifier	i		5090738	0					
ANR	5090814	Identifier	npairs		5090738	1					
ANR	5090815	UnaryExpression	++ i	155:36:4660:4662	5090738	2	True				
ANR	5090816	IncDec	++		5090738	0					
ANR	5090817	Identifier	i		5090738	1					
ANR	5090818	CompoundStatement		16:16:453:515	5090738	3					
ANR	5090819	IdentifierDeclStatement	"double base = pranges [ i ] . rmin , factor = pranges [ i ] . rmax - base ;"	156:16:4683:4745	5090738	0	True				
ANR	5090820	IdentifierDecl	base = pranges [ i ] . rmin		5090738	0					
ANR	5090821	IdentifierDeclType	double		5090738	0					
ANR	5090822	Identifier	base		5090738	1					
ANR	5090823	AssignmentExpression	base = pranges [ i ] . rmin		5090738	2		=			
ANR	5090824	Identifier	base		5090738	0					
ANR	5090825	MemberAccess	pranges [ i ] . rmin		5090738	1					
ANR	5090826	ArrayIndexing	pranges [ i ]		5090738	0					
ANR	5090827	Identifier	pranges		5090738	0					
ANR	5090828	Identifier	i		5090738	1					
ANR	5090829	Identifier	rmin		5090738	1					
ANR	5090830	IdentifierDecl	factor = pranges [ i ] . rmax - base		5090738	1					
ANR	5090831	IdentifierDeclType	double		5090738	0					
ANR	5090832	Identifier	factor		5090738	1					
ANR	5090833	AssignmentExpression	factor = pranges [ i ] . rmax - base		5090738	2		=			
ANR	5090834	Identifier	factor		5090738	0					
ANR	5090835	AdditiveExpression	pranges [ i ] . rmax - base		5090738	1		-			
ANR	5090836	MemberAccess	pranges [ i ] . rmax		5090738	0					
ANR	5090837	ArrayIndexing	pranges [ i ]		5090738	0					
ANR	5090838	Identifier	pranges		5090738	0					
ANR	5090839	Identifier	i		5090738	1					
ANR	5090840	Identifier	rmax		5090738	1					
ANR	5090841	Identifier	base		5090738	1					
ANR	5090842	ExpressionStatement	out [ 2 * i ] = pvalues [ 2 * i ] * factor + base	158:16:4764:4807	5090738	1	True				
ANR	5090843	AssignmentExpression	out [ 2 * i ] = pvalues [ 2 * i ] * factor + base		5090738	0		=			
ANR	5090844	ArrayIndexing	out [ 2 * i ]		5090738	0					
ANR	5090845	Identifier	out		5090738	0					
ANR	5090846	MultiplicativeExpression	2 * i		5090738	1		*			
ANR	5090847	PrimaryExpression	2		5090738	0					
ANR	5090848	Identifier	i		5090738	1					
ANR	5090849	AdditiveExpression	pvalues [ 2 * i ] * factor + base		5090738	1		+			
ANR	5090850	MultiplicativeExpression	pvalues [ 2 * i ] * factor		5090738	0		*			
ANR	5090851	ArrayIndexing	pvalues [ 2 * i ]		5090738	0					
ANR	5090852	Identifier	pvalues		5090738	0					
ANR	5090853	MultiplicativeExpression	2 * i		5090738	1		*			
ANR	5090854	PrimaryExpression	2		5090738	0					
ANR	5090855	Identifier	i		5090738	1					
ANR	5090856	Identifier	factor		5090738	1					
ANR	5090857	Identifier	base		5090738	1					
ANR	5090858	ExpressionStatement	out [ 2 * i + 1 ] = pvalues [ 2 * i + 1 ] * factor + base	159:16:4825:4876	5090738	2	True				
ANR	5090859	AssignmentExpression	out [ 2 * i + 1 ] = pvalues [ 2 * i + 1 ] * factor + base		5090738	0		=			
ANR	5090860	ArrayIndexing	out [ 2 * i + 1 ]		5090738	0					
ANR	5090861	Identifier	out		5090738	0					
ANR	5090862	AdditiveExpression	2 * i + 1		5090738	1		+			
ANR	5090863	MultiplicativeExpression	2 * i		5090738	0		*			
ANR	5090864	PrimaryExpression	2		5090738	0					
ANR	5090865	Identifier	i		5090738	1					
ANR	5090866	PrimaryExpression	1		5090738	1					
ANR	5090867	AdditiveExpression	pvalues [ 2 * i + 1 ] * factor + base		5090738	1		+			
ANR	5090868	MultiplicativeExpression	pvalues [ 2 * i + 1 ] * factor		5090738	0		*			
ANR	5090869	ArrayIndexing	pvalues [ 2 * i + 1 ]		5090738	0					
ANR	5090870	Identifier	pvalues		5090738	0					
ANR	5090871	AdditiveExpression	2 * i + 1		5090738	1		+			
ANR	5090872	MultiplicativeExpression	2 * i		5090738	0		*			
ANR	5090873	PrimaryExpression	2		5090738	0					
ANR	5090874	Identifier	i		5090738	1					
ANR	5090875	PrimaryExpression	1		5090738	1					
ANR	5090876	Identifier	factor		5090738	1					
ANR	5090877	Identifier	base		5090738	1					
ANR	5090878	ElseStatement	else		5090738	0					
ANR	5090879	ExpressionStatement	"memcpy ( out , pvalues , 2 * sizeof ( * pvalues ) * npairs )"	162:12:4919:4970	5090738	0	True				
ANR	5090880	CallExpression	"memcpy ( out , pvalues , 2 * sizeof ( * pvalues ) * npairs )"		5090738	0					
ANR	5090881	Callee	memcpy		5090738	0					
ANR	5090882	Identifier	memcpy		5090738	0					
ANR	5090883	ArgumentList	out		5090738	1					
ANR	5090884	Argument	out		5090738	0					
ANR	5090885	Identifier	out		5090738	0					
ANR	5090886	Argument	pvalues		5090738	1					
ANR	5090887	Identifier	pvalues		5090738	0					
ANR	5090888	Argument	2 * sizeof ( * pvalues ) * npairs		5090738	2					
ANR	5090889	MultiplicativeExpression	2 * sizeof ( * pvalues ) * npairs		5090738	0		*			
ANR	5090890	PrimaryExpression	2		5090738	0					
ANR	5090891	MultiplicativeExpression	sizeof ( * pvalues ) * npairs		5090738	1		*			
ANR	5090892	SizeofExpression	sizeof ( * pvalues )		5090738	0					
ANR	5090893	Sizeof	sizeof		5090738	0					
ANR	5090894	UnaryOperationExpression	* pvalues		5090738	1					
ANR	5090895	UnaryOperator	*		5090738	0					
ANR	5090896	Identifier	pvalues		5090738	1					
ANR	5090897	Identifier	npairs		5090738	1					
ANR	5090898	ReturnStatement	return 0 ;	164:4:4982:4990	5090738	1	True				
ANR	5090899	PrimaryExpression	0		5090738	0					
ANR	5090900	ReturnType	int		5090738	1					
ANR	5090901	Identifier	fn_scale_pairs		5090738	2					
ANR	5090902	ParameterList	"const float * * ppvalues , const float * pvalues , int npairs , const gs_range_t * pranges , gs_memory_t * mem"		5090738	3					
ANR	5090903	Parameter	const float * * ppvalues	139:15:4111:4132	5090738	0	True				
ANR	5090904	ParameterType	const float * *		5090738	0					
ANR	5090905	Identifier	ppvalues		5090738	1					
ANR	5090906	Parameter	const float * pvalues	139:39:4135:4154	5090738	1	True				
ANR	5090907	ParameterType	const float *		5090738	0					
ANR	5090908	Identifier	pvalues		5090738	1					
ANR	5090909	Parameter	int npairs	139:61:4157:4166	5090738	2	True				
ANR	5090910	ParameterType	int		5090738	0					
ANR	5090911	Identifier	npairs		5090738	1					
ANR	5090912	Parameter	const gs_range_t * pranges	140:15:4184:4208	5090738	3	True				
ANR	5090913	ParameterType	const gs_range_t *		5090738	0					
ANR	5090914	Identifier	pranges		5090738	1					
ANR	5090915	Parameter	gs_memory_t * mem	140:42:4211:4226	5090738	4	True				
ANR	5090916	ParameterType	gs_memory_t *		5090738	0					
ANR	5090917	Identifier	mem		5090738	1					
ANR	5090918	CFGEntryNode	ENTRY		5090738		True				
ANR	5090919	CFGExitNode	EXIT		5090738		True				
ANR	5090920	Symbol	ppvalues		5090738						
ANR	5090921	Symbol	pranges [ i ] . rmin		5090738						
ANR	5090922	Symbol	* pvalues		5090738						
ANR	5090923	Symbol	* ppvalues		5090738						
ANR	5090924	Symbol	npairs		5090738						
ANR	5090925	Symbol	i		5090738						
ANR	5090926	Symbol	pranges		5090738						
ANR	5090927	Symbol	pvalues		5090738						
ANR	5090928	Symbol	out		5090738						
ANR	5090929	Symbol	gs_error_VMerror		5090738						
ANR	5090930	Symbol	* i		5090738						
ANR	5090931	Symbol	mem		5090738						
ANR	5090932	Symbol	pranges [ i ] . rmax		5090738						
ANR	5090933	Symbol	* out		5090738						
ANR	5090934	Symbol	gs_alloc_byte_array		5090738						
ANR	5090935	Symbol	* pranges		5090738						
ANR	5090936	Symbol	factor		5090738						
ANR	5090937	Symbol	base		5090738						
ANR	5090938	Function	fn_common_scale	171:0:5117:5683							
ANR	5090939	FunctionDef	"fn_common_scale (gs_function_t * psfn , const gs_function_t * pfn , const gs_range_t * pranges , gs_memory_t * mem)"		5090938	0					
ANR	5090940	CompoundStatement		174:0:5245:5683	5090938	0					
ANR	5090941	IdentifierDeclStatement	int code ;	175:4:5251:5259	5090938	0	True				
ANR	5090942	IdentifierDecl	code		5090938	0					
ANR	5090943	IdentifierDeclType	int		5090938	0					
ANR	5090944	Identifier	code		5090938	1					
ANR	5090945	ExpressionStatement	psfn -> head = pfn -> head	177:4:5266:5288	5090938	1	True				
ANR	5090946	AssignmentExpression	psfn -> head = pfn -> head		5090938	0		=			
ANR	5090947	PtrMemberAccess	psfn -> head		5090938	0					
ANR	5090948	Identifier	psfn		5090938	0					
ANR	5090949	Identifier	head		5090938	1					
ANR	5090950	PtrMemberAccess	pfn -> head		5090938	1					
ANR	5090951	Identifier	pfn		5090938	0					
ANR	5090952	Identifier	head		5090938	1					
ANR	5090953	ExpressionStatement	psfn -> params . Domain = 0	178:4:5294:5317	5090938	2	True				
ANR	5090954	AssignmentExpression	psfn -> params . Domain = 0		5090938	0		=			
ANR	5090955	MemberAccess	psfn -> params . Domain		5090938	0					
ANR	5090956	PtrMemberAccess	psfn -> params		5090938	0					
ANR	5090957	Identifier	psfn		5090938	0					
ANR	5090958	Identifier	params		5090938	1					
ANR	5090959	Identifier	Domain		5090938	1					
ANR	5090960	PrimaryExpression	0		5090938	1					
ANR	5090961	ExpressionStatement	psfn -> params . Range = 0	179:4:5349:5371	5090938	3	True				
ANR	5090962	AssignmentExpression	psfn -> params . Range = 0		5090938	0		=			
ANR	5090963	MemberAccess	psfn -> params . Range		5090938	0					
ANR	5090964	PtrMemberAccess	psfn -> params		5090938	0					
ANR	5090965	Identifier	psfn		5090938	0					
ANR	5090966	Identifier	params		5090938	1					
ANR	5090967	Identifier	Range		5090938	1					
ANR	5090968	PrimaryExpression	0		5090938	1					
ANR	5090969	IfStatement	"if ( ( code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem ) ) < 0 )"		5090938	4					
ANR	5090970	Condition	"( code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem ) ) < 0"	180:8:5381:5645	5090938	0	True				
ANR	5090971	OrExpression	"( code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem ) ) < 0"		5090938	0		||			
ANR	5090972	RelationalExpression	"( code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem ) ) < 0"		5090938	0		<			
ANR	5090973	AssignmentExpression	"code = fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem )"		5090938	0		=			
ANR	5090974	Identifier	code		5090938	0					
ANR	5090975	CallExpression	"fn_scale_pairs ( & psfn -> params . Domain , pfn -> params . Domain , pfn -> params . m , NULL , mem )"		5090938	1					
ANR	5090976	Callee	fn_scale_pairs		5090938	0					
ANR	5090977	Identifier	fn_scale_pairs		5090938	0					
ANR	5090978	ArgumentList	& psfn -> params . Domain		5090938	1					
ANR	5090979	Argument	& psfn -> params . Domain		5090938	0					
ANR	5090980	UnaryOperationExpression	& psfn -> params . Domain		5090938	0					
ANR	5090981	UnaryOperator	&		5090938	0					
ANR	5090982	MemberAccess	psfn -> params . Domain		5090938	1					
ANR	5090983	PtrMemberAccess	psfn -> params		5090938	0					
ANR	5090984	Identifier	psfn		5090938	0					
ANR	5090985	Identifier	params		5090938	1					
ANR	5090986	Identifier	Domain		5090938	1					
ANR	5090987	Argument	pfn -> params . Domain		5090938	1					
ANR	5090988	MemberAccess	pfn -> params . Domain		5090938	0					
ANR	5090989	PtrMemberAccess	pfn -> params		5090938	0					
ANR	5090990	Identifier	pfn		5090938	0					
ANR	5090991	Identifier	params		5090938	1					
ANR	5090992	Identifier	Domain		5090938	1					
ANR	5090993	Argument	pfn -> params . m		5090938	2					
ANR	5090994	MemberAccess	pfn -> params . m		5090938	0					
ANR	5090995	PtrMemberAccess	pfn -> params		5090938	0					
ANR	5090996	Identifier	pfn		5090938	0					
ANR	5090997	Identifier	params		5090938	1					
ANR	5090998	Identifier	m		5090938	1					
ANR	5090999	Argument	NULL		5090938	3					
ANR	5091000	Identifier	NULL		5090938	0					
ANR	5091001	Argument	mem		5090938	4					
ANR	5091002	Identifier	mem		5090938	0					
ANR	5091003	PrimaryExpression	0		5090938	1					
ANR	5091004	RelationalExpression	"( code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem ) ) < 0"		5090938	1		<			
ANR	5091005	AssignmentExpression	"code = fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem )"		5090938	0		=			
ANR	5091006	Identifier	code		5090938	0					
ANR	5091007	CallExpression	"fn_scale_pairs ( & psfn -> params . Range , pfn -> params . Range , pfn -> params . n , pranges , mem )"		5090938	1					
ANR	5091008	Callee	fn_scale_pairs		5090938	0					
ANR	5091009	Identifier	fn_scale_pairs		5090938	0					
ANR	5091010	ArgumentList	& psfn -> params . Range		5090938	1					
ANR	5091011	Argument	& psfn -> params . Range		5090938	0					
ANR	5091012	UnaryOperationExpression	& psfn -> params . Range		5090938	0					
ANR	5091013	UnaryOperator	&		5090938	0					
ANR	5091014	MemberAccess	psfn -> params . Range		5090938	1					
ANR	5091015	PtrMemberAccess	psfn -> params		5090938	0					
ANR	5091016	Identifier	psfn		5090938	0					
ANR	5091017	Identifier	params		5090938	1					
ANR	5091018	Identifier	Range		5090938	1					
ANR	5091019	Argument	pfn -> params . Range		5090938	1					
ANR	5091020	MemberAccess	pfn -> params . Range		5090938	0					
ANR	5091021	PtrMemberAccess	pfn -> params		5090938	0					
ANR	5091022	Identifier	pfn		5090938	0					
ANR	5091023	Identifier	params		5090938	1					
ANR	5091024	Identifier	Range		5090938	1					
ANR	5091025	Argument	pfn -> params . n		5090938	2					
ANR	5091026	MemberAccess	pfn -> params . n		5090938	0					
ANR	5091027	PtrMemberAccess	pfn -> params		5090938	0					
ANR	5091028	Identifier	pfn		5090938	0					
ANR	5091029	Identifier	params		5090938	1					
ANR	5091030	Identifier	n		5090938	1					
ANR	5091031	Argument	pranges		5090938	3					
ANR	5091032	Identifier	pranges		5090938	0					
ANR	5091033	Argument	mem		5090938	4					
ANR	5091034	Identifier	mem		5090938	0					
ANR	5091035	PrimaryExpression	0		5090938	1					
ANR	5091036	ReturnStatement	return code ;	184:8:5656:5667	5090938	1	True				
ANR	5091037	Identifier	code		5090938	0					
ANR	5091038	ReturnStatement	return 0 ;	185:4:5673:5681	5090938	5	True				
ANR	5091039	PrimaryExpression	0		5090938	0					
ANR	5091040	ReturnType	int		5090938	1					
ANR	5091041	Identifier	fn_common_scale		5090938	2					
ANR	5091042	ParameterList	"gs_function_t * psfn , const gs_function_t * pfn , const gs_range_t * pranges , gs_memory_t * mem"		5090938	3					
ANR	5091043	Parameter	gs_function_t * psfn	172:16:5137:5155	5090938	0	True				
ANR	5091044	ParameterType	gs_function_t *		5090938	0					
ANR	5091045	Identifier	psfn		5090938	1					
ANR	5091046	Parameter	const gs_function_t * pfn	172:37:5158:5181	5090938	1	True				
ANR	5091047	ParameterType	const gs_function_t *		5090938	0					
ANR	5091048	Identifier	pfn		5090938	1					
ANR	5091049	Parameter	const gs_range_t * pranges	173:16:5200:5224	5090938	2	True				
ANR	5091050	ParameterType	const gs_range_t *		5090938	0					
ANR	5091051	Identifier	pranges		5090938	1					
ANR	5091052	Parameter	gs_memory_t * mem	173:43:5227:5242	5090938	3	True				
ANR	5091053	ParameterType	gs_memory_t *		5090938	0					
ANR	5091054	Identifier	mem		5090938	1					
ANR	5091055	CFGEntryNode	ENTRY		5090938		True				
ANR	5091056	CFGExitNode	EXIT		5090938		True				
ANR	5091057	Symbol	psfn -> params		5090938						
ANR	5091058	Symbol	* pfn		5090938						
ANR	5091059	Symbol	* psfn		5090938						
ANR	5091060	Symbol	pfn -> params . m		5090938						
ANR	5091061	Symbol	pfn -> params . Range		5090938						
ANR	5091062	Symbol	code		5090938						
ANR	5091063	Symbol	pfn -> params . n		5090938						
ANR	5091064	Symbol	NULL		5090938						
ANR	5091065	Symbol	psfn -> head		5090938						
ANR	5091066	Symbol	pfn -> params . Domain		5090938						
ANR	5091067	Symbol	pranges		5090938						
ANR	5091068	Symbol	psfn -> params . Range		5090938						
ANR	5091069	Symbol	& psfn -> params		5090938						
ANR	5091070	Symbol	pfn -> head		5090938						
ANR	5091071	Symbol	& psfn -> params . Range		5090938						
ANR	5091072	Symbol	psfn -> params . Domain		5090938						
ANR	5091073	Symbol	mem		5090938						
ANR	5091074	Symbol	pfn		5090938						
ANR	5091075	Symbol	fn_scale_pairs		5090938						
ANR	5091076	Symbol	pfn -> params		5090938						
ANR	5091077	Symbol	& psfn -> params . Domain		5090938						
ANR	5091078	Symbol	psfn		5090938						
ANR	5091079	Function	fn_common_serialize	189:0:5703:6580							
ANR	5091080	FunctionDef	"fn_common_serialize (const gs_function_t * pfn , stream * s)"		5091079	0					
ANR	5091081	CompoundStatement		191:0:5765:6580	5091079	0					
ANR	5091082	IdentifierDeclStatement	uint n ;	192:4:5771:5777	5091079	0	True				
ANR	5091083	IdentifierDecl	n		5091079	0					
ANR	5091084	IdentifierDeclType	uint		5091079	0					
ANR	5091085	Identifier	n		5091079	1					
ANR	5091086	IdentifierDeclStatement	const gs_function_params_t * p = & pfn -> params ;	193:4:5783:5828	5091079	1	True				
ANR	5091087	IdentifierDecl	* p = & pfn -> params		5091079	0					
ANR	5091088	IdentifierDeclType	const gs_function_params_t *		5091079	0					
ANR	5091089	Identifier	p		5091079	1					
ANR	5091090	AssignmentExpression	* p = & pfn -> params		5091079	2		=			
ANR	5091091	Identifier	p		5091079	0					
ANR	5091092	UnaryOperationExpression	& pfn -> params		5091079	1					
ANR	5091093	UnaryOperator	&		5091079	0					
ANR	5091094	PtrMemberAccess	pfn -> params		5091079	1					
ANR	5091095	Identifier	pfn		5091079	0					
ANR	5091096	Identifier	params		5091079	1					
ANR	5091097	IdentifierDeclStatement	"int code = sputs ( s , ( const byte * ) & pfn -> head . type , sizeof ( pfn -> head . type ) , & n ) ;"	194:4:5834:5912	5091079	2	True				
ANR	5091098	IdentifierDecl	"code = sputs ( s , ( const byte * ) & pfn -> head . type , sizeof ( pfn -> head . type ) , & n )"		5091079	0					
ANR	5091099	IdentifierDeclType	int		5091079	0					
ANR	5091100	Identifier	code		5091079	1					
ANR	5091101	AssignmentExpression	"code = sputs ( s , ( const byte * ) & pfn -> head . type , sizeof ( pfn -> head . type ) , & n )"		5091079	2		=			
ANR	5091102	Identifier	code		5091079	0					
ANR	5091103	CallExpression	"sputs ( s , ( const byte * ) & pfn -> head . type , sizeof ( pfn -> head . type ) , & n )"		5091079	1					
ANR	5091104	Callee	sputs		5091079	0					
ANR	5091105	Identifier	sputs		5091079	0					
ANR	5091106	ArgumentList	s		5091079	1					
ANR	5091107	Argument	s		5091079	0					
ANR	5091108	Identifier	s		5091079	0					
ANR	5091109	Argument	( const byte * ) & pfn -> head . type		5091079	1					
ANR	5091110	CastExpression	( const byte * ) & pfn -> head . type		5091079	0					
ANR	5091111	CastTarget	const byte *		5091079	0					
ANR	5091112	UnaryOperationExpression	& pfn -> head . type		5091079	1					
ANR	5091113	UnaryOperator	&		5091079	0					
ANR	5091114	MemberAccess	pfn -> head . type		5091079	1					
ANR	5091115	PtrMemberAccess	pfn -> head		5091079	0					
ANR	5091116	Identifier	pfn		5091079	0					
ANR	5091117	Identifier	head		5091079	1					
ANR	5091118	Identifier	type		5091079	1					
ANR	5091119	Argument	sizeof ( pfn -> head . type )		5091079	2					
ANR	5091120	SizeofExpression	sizeof ( pfn -> head . type )		5091079	0					
ANR	5091121	Sizeof	sizeof		5091079	0					
ANR	5091122	MemberAccess	pfn -> head . type		5091079	1					
ANR	5091123	PtrMemberAccess	pfn -> head		5091079	0					
ANR	5091124	Identifier	pfn		5091079	0					
ANR	5091125	Identifier	head		5091079	1					
ANR	5091126	Identifier	type		5091079	1					
ANR	5091127	Argument	& n		5091079	3					
ANR	5091128	UnaryOperationExpression	& n		5091079	0					
ANR	5091129	UnaryOperator	&		5091079	0					
ANR	5091130	Identifier	n		5091079	1					
ANR	5091131	IdentifierDeclStatement	"const float dummy [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ;"	195:4:5918:5966	5091079	3	True				
ANR	5091132	IdentifierDecl	"dummy [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }"		5091079	0					
ANR	5091133	IdentifierDeclType	const float [ 8 ]		5091079	0					
ANR	5091134	Identifier	dummy		5091079	1					
ANR	5091135	PrimaryExpression	8		5091079	2					
ANR	5091136	AssignmentExpression	"dummy [ 8 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 }"		5091079	3		=			
ANR	5091137	Identifier	dummy		5091079	0					
ANR	5091138	InitializerList	0		5091079	1					
ANR	5091139	PrimaryExpression	0		5091079	0					
ANR	5091140	PrimaryExpression	0		5091079	1					
ANR	5091141	PrimaryExpression	0		5091079	2					
ANR	5091142	PrimaryExpression	0		5091079	3					
ANR	5091143	PrimaryExpression	0		5091079	4					
ANR	5091144	PrimaryExpression	0		5091079	5					
ANR	5091145	PrimaryExpression	0		5091079	6					
ANR	5091146	PrimaryExpression	0		5091079	7					
ANR	5091147	IfStatement	if ( code < 0 )		5091079	4					
ANR	5091148	Condition	code < 0	197:8:5977:5984	5091079	0	True				
ANR	5091149	RelationalExpression	code < 0		5091079	0		<			
ANR	5091150	Identifier	code		5091079	0					
ANR	5091151	PrimaryExpression	0		5091079	1					
ANR	5091152	ReturnStatement	return code ;	198:8:5995:6006	5091079	1	True				
ANR	5091153	Identifier	code		5091079	0					
ANR	5091154	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> m , sizeof ( p -> m ) , & n )"	199:4:6012:6066	5091079	5	True				
ANR	5091155	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> m , sizeof ( p -> m ) , & n )"		5091079	0		=			
ANR	5091156	Identifier	code		5091079	0					
ANR	5091157	CallExpression	"sputs ( s , ( const byte * ) & p -> m , sizeof ( p -> m ) , & n )"		5091079	1					
ANR	5091158	Callee	sputs		5091079	0					
ANR	5091159	Identifier	sputs		5091079	0					
ANR	5091160	ArgumentList	s		5091079	1					
ANR	5091161	Argument	s		5091079	0					
ANR	5091162	Identifier	s		5091079	0					
ANR	5091163	Argument	( const byte * ) & p -> m		5091079	1					
ANR	5091164	CastExpression	( const byte * ) & p -> m		5091079	0					
ANR	5091165	CastTarget	const byte *		5091079	0					
ANR	5091166	UnaryOperationExpression	& p -> m		5091079	1					
ANR	5091167	UnaryOperator	&		5091079	0					
ANR	5091168	PtrMemberAccess	p -> m		5091079	1					
ANR	5091169	Identifier	p		5091079	0					
ANR	5091170	Identifier	m		5091079	1					
ANR	5091171	Argument	sizeof ( p -> m )		5091079	2					
ANR	5091172	SizeofExpression	sizeof ( p -> m )		5091079	0					
ANR	5091173	Sizeof	sizeof		5091079	0					
ANR	5091174	PtrMemberAccess	p -> m		5091079	1					
ANR	5091175	Identifier	p		5091079	0					
ANR	5091176	Identifier	m		5091079	1					
ANR	5091177	Argument	& n		5091079	3					
ANR	5091178	UnaryOperationExpression	& n		5091079	0					
ANR	5091179	UnaryOperator	&		5091079	0					
ANR	5091180	Identifier	n		5091079	1					
ANR	5091181	IfStatement	if ( code < 0 )		5091079	6					
ANR	5091182	Condition	code < 0	200:8:6076:6083	5091079	0	True				
ANR	5091183	RelationalExpression	code < 0		5091079	0		<			
ANR	5091184	Identifier	code		5091079	0					
ANR	5091185	PrimaryExpression	0		5091079	1					
ANR	5091186	ReturnStatement	return code ;	201:8:6094:6105	5091079	1	True				
ANR	5091187	Identifier	code		5091079	0					
ANR	5091188	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> Domain [ 0 ] , sizeof ( p -> Domain [ 0 ] ) * p -> m * 2 , & n )"	202:4:6111:6192	5091079	7	True				
ANR	5091189	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> Domain [ 0 ] , sizeof ( p -> Domain [ 0 ] ) * p -> m * 2 , & n )"		5091079	0		=			
ANR	5091190	Identifier	code		5091079	0					
ANR	5091191	CallExpression	"sputs ( s , ( const byte * ) & p -> Domain [ 0 ] , sizeof ( p -> Domain [ 0 ] ) * p -> m * 2 , & n )"		5091079	1					
ANR	5091192	Callee	sputs		5091079	0					
ANR	5091193	Identifier	sputs		5091079	0					
ANR	5091194	ArgumentList	s		5091079	1					
ANR	5091195	Argument	s		5091079	0					
ANR	5091196	Identifier	s		5091079	0					
ANR	5091197	Argument	( const byte * ) & p -> Domain [ 0 ]		5091079	1					
ANR	5091198	CastExpression	( const byte * ) & p -> Domain [ 0 ]		5091079	0					
ANR	5091199	CastTarget	const byte *		5091079	0					
ANR	5091200	UnaryOperationExpression	& p -> Domain [ 0 ]		5091079	1					
ANR	5091201	UnaryOperator	&		5091079	0					
ANR	5091202	ArrayIndexing	p -> Domain [ 0 ]		5091079	1					
ANR	5091203	PtrMemberAccess	p -> Domain		5091079	0					
ANR	5091204	Identifier	p		5091079	0					
ANR	5091205	Identifier	Domain		5091079	1					
ANR	5091206	PrimaryExpression	0		5091079	1					
ANR	5091207	Argument	sizeof ( p -> Domain [ 0 ] ) * p -> m * 2		5091079	2					
ANR	5091208	MultiplicativeExpression	sizeof ( p -> Domain [ 0 ] ) * p -> m * 2		5091079	0		*			
ANR	5091209	SizeofExpression	sizeof ( p -> Domain [ 0 ] )		5091079	0					
ANR	5091210	Sizeof	sizeof		5091079	0					
ANR	5091211	ArrayIndexing	p -> Domain [ 0 ]		5091079	1					
ANR	5091212	PtrMemberAccess	p -> Domain		5091079	0					
ANR	5091213	Identifier	p		5091079	0					
ANR	5091214	Identifier	Domain		5091079	1					
ANR	5091215	PrimaryExpression	0		5091079	1					
ANR	5091216	MultiplicativeExpression	p -> m * 2		5091079	1		*			
ANR	5091217	PtrMemberAccess	p -> m		5091079	0					
ANR	5091218	Identifier	p		5091079	0					
ANR	5091219	Identifier	m		5091079	1					
ANR	5091220	PrimaryExpression	2		5091079	1					
ANR	5091221	Argument	& n		5091079	3					
ANR	5091222	UnaryOperationExpression	& n		5091079	0					
ANR	5091223	UnaryOperator	&		5091079	0					
ANR	5091224	Identifier	n		5091079	1					
ANR	5091225	IfStatement	if ( code < 0 )		5091079	8					
ANR	5091226	Condition	code < 0	203:8:6202:6209	5091079	0	True				
ANR	5091227	RelationalExpression	code < 0		5091079	0		<			
ANR	5091228	Identifier	code		5091079	0					
ANR	5091229	PrimaryExpression	0		5091079	1					
ANR	5091230	ReturnStatement	return code ;	204:8:6220:6231	5091079	1	True				
ANR	5091231	Identifier	code		5091079	0					
ANR	5091232	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> n , sizeof ( p -> n ) , & n )"	205:4:6237:6291	5091079	9	True				
ANR	5091233	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> n , sizeof ( p -> n ) , & n )"		5091079	0		=			
ANR	5091234	Identifier	code		5091079	0					
ANR	5091235	CallExpression	"sputs ( s , ( const byte * ) & p -> n , sizeof ( p -> n ) , & n )"		5091079	1					
ANR	5091236	Callee	sputs		5091079	0					
ANR	5091237	Identifier	sputs		5091079	0					
ANR	5091238	ArgumentList	s		5091079	1					
ANR	5091239	Argument	s		5091079	0					
ANR	5091240	Identifier	s		5091079	0					
ANR	5091241	Argument	( const byte * ) & p -> n		5091079	1					
ANR	5091242	CastExpression	( const byte * ) & p -> n		5091079	0					
ANR	5091243	CastTarget	const byte *		5091079	0					
ANR	5091244	UnaryOperationExpression	& p -> n		5091079	1					
ANR	5091245	UnaryOperator	&		5091079	0					
ANR	5091246	PtrMemberAccess	p -> n		5091079	1					
ANR	5091247	Identifier	p		5091079	0					
ANR	5091248	Identifier	n		5091079	1					
ANR	5091249	Argument	sizeof ( p -> n )		5091079	2					
ANR	5091250	SizeofExpression	sizeof ( p -> n )		5091079	0					
ANR	5091251	Sizeof	sizeof		5091079	0					
ANR	5091252	PtrMemberAccess	p -> n		5091079	1					
ANR	5091253	Identifier	p		5091079	0					
ANR	5091254	Identifier	n		5091079	1					
ANR	5091255	Argument	& n		5091079	3					
ANR	5091256	UnaryOperationExpression	& n		5091079	0					
ANR	5091257	UnaryOperator	&		5091079	0					
ANR	5091258	Identifier	n		5091079	1					
ANR	5091259	IfStatement	if ( code < 0 )		5091079	10					
ANR	5091260	Condition	code < 0	206:8:6301:6308	5091079	0	True				
ANR	5091261	RelationalExpression	code < 0		5091079	0		<			
ANR	5091262	Identifier	code		5091079	0					
ANR	5091263	PrimaryExpression	0		5091079	1					
ANR	5091264	ReturnStatement	return code ;	207:8:6319:6330	5091079	1	True				
ANR	5091265	Identifier	code		5091079	0					
ANR	5091266	IfStatement	if ( p -> Range == NULL && p -> n * 2 > count_of ( dummy ) )		5091079	11					
ANR	5091267	Condition	p -> Range == NULL && p -> n * 2 > count_of ( dummy )	208:8:6340:6385	5091079	0	True				
ANR	5091268	AndExpression	p -> Range == NULL && p -> n * 2 > count_of ( dummy )		5091079	0		&&			
ANR	5091269	EqualityExpression	p -> Range == NULL		5091079	0		==			
ANR	5091270	PtrMemberAccess	p -> Range		5091079	0					
ANR	5091271	Identifier	p		5091079	0					
ANR	5091272	Identifier	Range		5091079	1					
ANR	5091273	Identifier	NULL		5091079	1					
ANR	5091274	RelationalExpression	p -> n * 2 > count_of ( dummy )		5091079	1		>			
ANR	5091275	MultiplicativeExpression	p -> n * 2		5091079	0		*			
ANR	5091276	PtrMemberAccess	p -> n		5091079	0					
ANR	5091277	Identifier	p		5091079	0					
ANR	5091278	Identifier	n		5091079	1					
ANR	5091279	PrimaryExpression	2		5091079	1					
ANR	5091280	CallExpression	count_of ( dummy )		5091079	1					
ANR	5091281	Callee	count_of		5091079	0					
ANR	5091282	Identifier	count_of		5091079	0					
ANR	5091283	ArgumentList	dummy		5091079	1					
ANR	5091284	Argument	dummy		5091079	0					
ANR	5091285	Identifier	dummy		5091079	0					
ANR	5091286	ExpressionStatement	return_error ( gs_error_unregistered )	209:8:6396:6431	5091079	1	True				
ANR	5091287	CallExpression	return_error ( gs_error_unregistered )		5091079	0					
ANR	5091288	Callee	return_error		5091079	0					
ANR	5091289	Identifier	return_error		5091079	0					
ANR	5091290	ArgumentList	gs_error_unregistered		5091079	1					
ANR	5091291	Argument	gs_error_unregistered		5091079	0					
ANR	5091292	Identifier	gs_error_unregistered		5091079	0					
ANR	5091293	ReturnStatement	"return sputs ( s , ( const byte * ) ( p -> Range != NULL ? & p -> Range [ 0 ] : dummy ) , sizeof ( p -> Range [ 0 ] ) * p -> n * 2 , & n ) ;"	210:4:6458:6578	5091079	12	True				
ANR	5091294	CallExpression	"sputs ( s , ( const byte * ) ( p -> Range != NULL ? & p -> Range [ 0 ] : dummy ) , sizeof ( p -> Range [ 0 ] ) * p -> n * 2 , & n )"		5091079	0					
ANR	5091295	Callee	sputs		5091079	0					
ANR	5091296	Identifier	sputs		5091079	0					
ANR	5091297	ArgumentList	s		5091079	1					
ANR	5091298	Argument	s		5091079	0					
ANR	5091299	Identifier	s		5091079	0					
ANR	5091300	Argument	( const byte * ) ( p -> Range != NULL ? & p -> Range [ 0 ] : dummy )		5091079	1					
ANR	5091301	CastExpression	( const byte * ) ( p -> Range != NULL ? & p -> Range [ 0 ] : dummy )		5091079	0					
ANR	5091302	CastTarget	const byte *		5091079	0					
ANR	5091303	ConditionalExpression	p -> Range != NULL ? & p -> Range [ 0 ] : dummy		5091079	1					
ANR	5091304	Condition	p -> Range != NULL		5091079	0					
ANR	5091305	EqualityExpression	p -> Range != NULL		5091079	0		!=			
ANR	5091306	PtrMemberAccess	p -> Range		5091079	0					
ANR	5091307	Identifier	p		5091079	0					
ANR	5091308	Identifier	Range		5091079	1					
ANR	5091309	Identifier	NULL		5091079	1					
ANR	5091310	UnaryOperationExpression	& p -> Range [ 0 ]		5091079	1					
ANR	5091311	UnaryOperator	&		5091079	0					
ANR	5091312	ArrayIndexing	p -> Range [ 0 ]		5091079	1					
ANR	5091313	PtrMemberAccess	p -> Range		5091079	0					
ANR	5091314	Identifier	p		5091079	0					
ANR	5091315	Identifier	Range		5091079	1					
ANR	5091316	PrimaryExpression	0		5091079	1					
ANR	5091317	Identifier	dummy		5091079	2					
ANR	5091318	Argument	sizeof ( p -> Range [ 0 ] ) * p -> n * 2		5091079	2					
ANR	5091319	MultiplicativeExpression	sizeof ( p -> Range [ 0 ] ) * p -> n * 2		5091079	0		*			
ANR	5091320	SizeofExpression	sizeof ( p -> Range [ 0 ] )		5091079	0					
ANR	5091321	Sizeof	sizeof		5091079	0					
ANR	5091322	ArrayIndexing	p -> Range [ 0 ]		5091079	1					
ANR	5091323	PtrMemberAccess	p -> Range		5091079	0					
ANR	5091324	Identifier	p		5091079	0					
ANR	5091325	Identifier	Range		5091079	1					
ANR	5091326	PrimaryExpression	0		5091079	1					
ANR	5091327	MultiplicativeExpression	p -> n * 2		5091079	1		*			
ANR	5091328	PtrMemberAccess	p -> n		5091079	0					
ANR	5091329	Identifier	p		5091079	0					
ANR	5091330	Identifier	n		5091079	1					
ANR	5091331	PrimaryExpression	2		5091079	1					
ANR	5091332	Argument	& n		5091079	3					
ANR	5091333	UnaryOperationExpression	& n		5091079	0					
ANR	5091334	UnaryOperator	&		5091079	0					
ANR	5091335	Identifier	n		5091079	1					
ANR	5091336	ReturnType	int		5091079	1					
ANR	5091337	Identifier	fn_common_serialize		5091079	2					
ANR	5091338	ParameterList	"const gs_function_t * pfn , stream * s"		5091079	3					
ANR	5091339	Parameter	const gs_function_t * pfn	190:20:5727:5751	5091079	0	True				
ANR	5091340	ParameterType	const gs_function_t *		5091079	0					
ANR	5091341	Identifier	pfn		5091079	1					
ANR	5091342	Parameter	stream * s	190:47:5754:5762	5091079	1	True				
ANR	5091343	ParameterType	stream *		5091079	0					
ANR	5091344	Identifier	s		5091079	1					
ANR	5091345	CFGEntryNode	ENTRY		5091079		True				
ANR	5091346	CFGExitNode	EXIT		5091079		True				
ANR	5091347	Symbol	& p -> n		5091079						
ANR	5091348	Symbol	gs_error_unregistered		5091079						
ANR	5091349	Symbol	code		5091079						
ANR	5091350	Symbol	& p -> m		5091079						
ANR	5091351	Symbol	p -> Range		5091079						
ANR	5091352	Symbol	pfn -> head		5091079						
ANR	5091353	Symbol	dummy		5091079						
ANR	5091354	Symbol	count_of		5091079						
ANR	5091355	Symbol	p -> n		5091079						
ANR	5091356	Symbol	p -> m		5091079						
ANR	5091357	Symbol	* p -> Range		5091079						
ANR	5091358	Symbol	* * p		5091079						
ANR	5091359	Symbol	* pfn		5091079						
ANR	5091360	Symbol	NULL		5091079						
ANR	5091361	Symbol	& pfn -> params		5091079						
ANR	5091362	Symbol	pfn -> head . type		5091079						
ANR	5091363	Symbol	* p -> Domain		5091079						
ANR	5091364	Symbol	n		5091079						
ANR	5091365	Symbol	p -> Domain		5091079						
ANR	5091366	Symbol	p		5091079						
ANR	5091367	Symbol	s		5091079						
ANR	5091368	Symbol	& pfn -> head		5091079						
ANR	5091369	Symbol	& n		5091079						
ANR	5091370	Symbol	pfn		5091079						
ANR	5091371	Symbol	* p		5091079						
ANR	5091372	Symbol	sputs		5091079						
ANR	5091373	Symbol	& pfn -> head . type		5091079						
