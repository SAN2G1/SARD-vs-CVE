command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	118105	File	data/converged/CVE-2018-16863_ghostpdl/apinames.c								
ANR	118106	ClassDef	OutputFormat_	29:8:724:1247							
ANR	118107	DeclStmt									
ANR	118108	Decl							OutputFormat_	OutputFormat_	OutputFormat
ANR	118109	Function	panic	41:0:1251:1351							
ANR	118110	FunctionDef	panic (const char * message)		118109	0					
ANR	118111	CompoundStatement		43:0:1293:1351	118109	0					
ANR	118112	ExpressionStatement	"fprintf ( stderr , ""PANIC: %s\\n"" , message )"	44:2:1297:1338	118109	0	True				
ANR	118113	CallExpression	"fprintf ( stderr , ""PANIC: %s\\n"" , message )"		118109	0					
ANR	118114	Callee	fprintf		118109	0					
ANR	118115	Identifier	fprintf		118109	0					
ANR	118116	ArgumentList	stderr		118109	1					
ANR	118117	Argument	stderr		118109	0					
ANR	118118	Identifier	stderr		118109	0					
ANR	118119	Argument	"""PANIC: %s\\n"""		118109	1					
ANR	118120	PrimaryExpression	"""PANIC: %s\\n"""		118109	0					
ANR	118121	Argument	message		118109	2					
ANR	118122	Identifier	message		118109	0					
ANR	118123	ExpressionStatement	exit ( 2 )	45:2:1342:1349	118109	1	True				
ANR	118124	CallExpression	exit ( 2 )		118109	0					
ANR	118125	Callee	exit		118109	0					
ANR	118126	Identifier	exit		118109	0					
ANR	118127	ArgumentList	2		118109	1					
ANR	118128	Argument	2		118109	0					
ANR	118129	PrimaryExpression	2		118109	0					
ANR	118130	ReturnType	static void		118109	1					
ANR	118131	Identifier	panic		118109	2					
ANR	118132	ParameterList	const char * message		118109	3					
ANR	118133	Parameter	const char * message	42:7:1270:1289	118109	0	True				
ANR	118134	ParameterType	const char *		118109	0					
ANR	118135	Identifier	message		118109	1					
ANR	118136	CFGEntryNode	ENTRY		118109		True				
ANR	118137	CFGExitNode	EXIT		118109		True				
ANR	118138	Symbol	message		118109						
ANR	118139	Symbol	stderr		118109						
ANR	118140	ClassDef	NameRec_	49:8:1363:1443							
ANR	118141	DeclStmt									
ANR	118142	Decl							char	char *	name
ANR	118143	DeclStmt									
ANR	118144	Decl							unsigned int	unsigned int	hash
ANR	118145	DeclStmt									
ANR	118146	Decl							NameRec_	NameRec_	NameRec
ANR	118147	Decl							NameRec_	NameRec_ *	Name
ANR	118148	DeclStmt									
ANR	118149	Decl							Name	Name	the_names
ANR	118150	DeclStmt									
ANR	118151	Decl							int	int	num_names
ANR	118152	DeclStmt									
ANR	118153	Decl							int	int	max_names
ANR	118154	Function	names_add	60:0:1519:2557							
ANR	118155	FunctionDef	"names_add (const char * name , const char * end)"		118154	0					
ANR	118156	CompoundStatement		63:0:1591:2557	118154	0					
ANR	118157	IdentifierDeclStatement	unsigned int h ;	64:2:1595:1610	118154	0	True				
ANR	118158	IdentifierDecl	h		118154	0					
ANR	118159	IdentifierDeclType	unsigned int		118154	0					
ANR	118160	Identifier	h		118154	1					
ANR	118161	IdentifierDeclStatement	"int nn , len ;"	65:2:1614:1635	118154	1	True				
ANR	118162	IdentifierDecl	nn		118154	0					
ANR	118163	IdentifierDeclType	int		118154	0					
ANR	118164	Identifier	nn		118154	1					
ANR	118165	IdentifierDecl	len		118154	1					
ANR	118166	IdentifierDeclType	int		118154	0					
ANR	118167	Identifier	len		118154	1					
ANR	118168	IdentifierDeclStatement	Name nm ;	66:2:1639:1655	118154	2	True				
ANR	118169	IdentifierDecl	nm		118154	0					
ANR	118170	IdentifierDeclType	Name		118154	0					
ANR	118171	Identifier	nm		118154	1					
ANR	118172	IfStatement	if ( end <= name )		118154	3					
ANR	118173	Condition	end <= name	68:7:1665:1675	118154	0	True				
ANR	118174	RelationalExpression	end <= name		118154	0		<=			
ANR	118175	Identifier	end		118154	0					
ANR	118176	Identifier	name		118154	1					
ANR	118177	ReturnStatement	return ;	69:4:1683:1689	118154	1	True				
ANR	118178	ExpressionStatement	len = ( int ) ( end - name )	72:2:1721:1744	118154	4	True				
ANR	118179	AssignmentExpression	len = ( int ) ( end - name )		118154	0		=			
ANR	118180	Identifier	len		118154	0					
ANR	118181	CastExpression	( int ) ( end - name )		118154	1					
ANR	118182	CastTarget	int		118154	0					
ANR	118183	AdditiveExpression	end - name		118154	1		-			
ANR	118184	Identifier	end		118154	0					
ANR	118185	Identifier	name		118154	1					
ANR	118186	ExpressionStatement	h = 0	73:2:1748:1755	118154	5	True				
ANR	118187	AssignmentExpression	h = 0		118154	0		=			
ANR	118188	Identifier	h		118154	0					
ANR	118189	PrimaryExpression	0		118154	1					
ANR	118190	ForStatement	for ( nn = 0 ; nn < len ; nn ++ )		118154	6					
ANR	118191	ForInit	nn = 0 ;	74:8:1765:1771	118154	0	True				
ANR	118192	AssignmentExpression	nn = 0		118154	0		=			
ANR	118193	Identifier	nn		118154	0					
ANR	118194	PrimaryExpression	0		118154	1					
ANR	118195	Condition	nn < len	74:16:1773:1780	118154	1	True				
ANR	118196	RelationalExpression	nn < len		118154	0		<			
ANR	118197	Identifier	nn		118154	0					
ANR	118198	Identifier	len		118154	1					
ANR	118199	PostIncDecOperationExpression	nn ++	74:26:1783:1786	118154	2	True				
ANR	118200	Identifier	nn		118154	0					
ANR	118201	IncDec	++		118154	1					
ANR	118202	ExpressionStatement	h = h * 33 + name [ nn ]	75:4:1794:1813	118154	3	True				
ANR	118203	AssignmentExpression	h = h * 33 + name [ nn ]		118154	0		=			
ANR	118204	Identifier	h		118154	0					
ANR	118205	AdditiveExpression	h * 33 + name [ nn ]		118154	1		+			
ANR	118206	MultiplicativeExpression	h * 33		118154	0		*			
ANR	118207	Identifier	h		118154	0					
ANR	118208	PrimaryExpression	33		118154	1					
ANR	118209	ArrayIndexing	name [ nn ]		118154	1					
ANR	118210	Identifier	name		118154	0					
ANR	118211	Identifier	nn		118154	1					
ANR	118212	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		118154	7					
ANR	118213	ForInit	nn = 0 ;	78:8:1863:1869	118154	0	True				
ANR	118214	AssignmentExpression	nn = 0		118154	0		=			
ANR	118215	Identifier	nn		118154	0					
ANR	118216	PrimaryExpression	0		118154	1					
ANR	118217	Condition	nn < num_names	78:16:1871:1884	118154	1	True				
ANR	118218	RelationalExpression	nn < num_names		118154	0		<			
ANR	118219	Identifier	nn		118154	0					
ANR	118220	Identifier	num_names		118154	1					
ANR	118221	PostIncDecOperationExpression	nn ++	78:32:1887:1890	118154	2	True				
ANR	118222	Identifier	nn		118154	0					
ANR	118223	IncDec	++		118154	1					
ANR	118224	CompoundStatement		17:2:304:304	118154	3					
ANR	118225	ExpressionStatement	nm = the_names + nn	80:4:1902:1921	118154	0	True				
ANR	118226	AssignmentExpression	nm = the_names + nn		118154	0		=			
ANR	118227	Identifier	nm		118154	0					
ANR	118228	AdditiveExpression	the_names + nn		118154	1		+			
ANR	118229	Identifier	the_names		118154	0					
ANR	118230	Identifier	nn		118154	1					
ANR	118231	IfStatement	"if ( ( int ) nm -> hash == h && memcmp ( name , nm -> name , len ) == 0 && nm -> name [ len ] == 0 )"		118154	1					
ANR	118232	Condition	"( int ) nm -> hash == h && memcmp ( name , nm -> name , len ) == 0 && nm -> name [ len ] == 0"	82:9:1933:2060	118154	0	True				
ANR	118233	AndExpression	"( int ) nm -> hash == h && memcmp ( name , nm -> name , len ) == 0 && nm -> name [ len ] == 0"		118154	0		&&			
ANR	118234	EqualityExpression	( int ) nm -> hash == h		118154	0		==			
ANR	118235	CastExpression	( int ) nm -> hash		118154	0					
ANR	118236	CastTarget	int		118154	0					
ANR	118237	PtrMemberAccess	nm -> hash		118154	1					
ANR	118238	Identifier	nm		118154	0					
ANR	118239	Identifier	hash		118154	1					
ANR	118240	Identifier	h		118154	1					
ANR	118241	AndExpression	"memcmp ( name , nm -> name , len ) == 0 && nm -> name [ len ] == 0"		118154	1		&&			
ANR	118242	EqualityExpression	"memcmp ( name , nm -> name , len ) == 0"		118154	0		==			
ANR	118243	CallExpression	"memcmp ( name , nm -> name , len )"		118154	0					
ANR	118244	Callee	memcmp		118154	0					
ANR	118245	Identifier	memcmp		118154	0					
ANR	118246	ArgumentList	name		118154	1					
ANR	118247	Argument	name		118154	0					
ANR	118248	Identifier	name		118154	0					
ANR	118249	Argument	nm -> name		118154	1					
ANR	118250	PtrMemberAccess	nm -> name		118154	0					
ANR	118251	Identifier	nm		118154	0					
ANR	118252	Identifier	name		118154	1					
ANR	118253	Argument	len		118154	2					
ANR	118254	Identifier	len		118154	0					
ANR	118255	PrimaryExpression	0		118154	1					
ANR	118256	EqualityExpression	nm -> name [ len ] == 0		118154	1		==			
ANR	118257	ArrayIndexing	nm -> name [ len ]		118154	0					
ANR	118258	PtrMemberAccess	nm -> name		118154	0					
ANR	118259	Identifier	nm		118154	0					
ANR	118260	Identifier	name		118154	1					
ANR	118261	Identifier	len		118154	1					
ANR	118262	PrimaryExpression	0		118154	1					
ANR	118263	ReturnStatement	return ;	85:6:2070:2076	118154	1	True				
ANR	118264	IfStatement	if ( num_names >= max_names )		118154	8					
ANR	118265	Condition	num_names >= max_names	89:7:2111:2132	118154	0	True				
ANR	118266	RelationalExpression	num_names >= max_names		118154	0		>=			
ANR	118267	Identifier	num_names		118154	0					
ANR	118268	Identifier	max_names		118154	1					
ANR	118269	CompoundStatement		28:2:546:546	118154	1					
ANR	118270	ExpressionStatement	max_names += ( max_names >> 1 ) + 4	91:4:2144:2177	118154	0	True				
ANR	118271	AssignmentExpression	max_names += ( max_names >> 1 ) + 4		118154	0		+=			
ANR	118272	Identifier	max_names		118154	0					
ANR	118273	AdditiveExpression	( max_names >> 1 ) + 4		118154	1		+			
ANR	118274	ShiftExpression	max_names >> 1		118154	0		>>			
ANR	118275	Identifier	max_names		118154	0					
ANR	118276	PrimaryExpression	1		118154	1					
ANR	118277	PrimaryExpression	4		118154	1					
ANR	118278	ExpressionStatement	"the_names = ( NameRec * ) realloc ( the_names , sizeof ( the_names [ 0 ] ) * max_names )"	92:4:2183:2299	118154	1	True				
ANR	118279	AssignmentExpression	"the_names = ( NameRec * ) realloc ( the_names , sizeof ( the_names [ 0 ] ) * max_names )"		118154	0		=			
ANR	118280	Identifier	the_names		118154	0					
ANR	118281	CastExpression	"( NameRec * ) realloc ( the_names , sizeof ( the_names [ 0 ] ) * max_names )"		118154	1					
ANR	118282	CastTarget	NameRec *		118154	0					
ANR	118283	CallExpression	"realloc ( the_names , sizeof ( the_names [ 0 ] ) * max_names )"		118154	1					
ANR	118284	Callee	realloc		118154	0					
ANR	118285	Identifier	realloc		118154	0					
ANR	118286	ArgumentList	the_names		118154	1					
ANR	118287	Argument	the_names		118154	0					
ANR	118288	Identifier	the_names		118154	0					
ANR	118289	Argument	sizeof ( the_names [ 0 ] ) * max_names		118154	1					
ANR	118290	MultiplicativeExpression	sizeof ( the_names [ 0 ] ) * max_names		118154	0		*			
ANR	118291	SizeofExpression	sizeof ( the_names [ 0 ] )		118154	0					
ANR	118292	Sizeof	sizeof		118154	0					
ANR	118293	ArrayIndexing	the_names [ 0 ]		118154	1					
ANR	118294	Identifier	the_names		118154	0					
ANR	118295	PrimaryExpression	0		118154	1					
ANR	118296	Identifier	max_names		118154	1					
ANR	118297	IfStatement	if ( ! the_names )		118154	2					
ANR	118298	Condition	! the_names	94:9:2310:2319	118154	0	True				
ANR	118299	UnaryOperationExpression	! the_names		118154	0					
ANR	118300	UnaryOperator	!		118154	0					
ANR	118301	Identifier	the_names		118154	1					
ANR	118302	ExpressionStatement	"panic ( ""not enough memory"" )"	95:6:2329:2357	118154	1	True				
ANR	118303	CallExpression	"panic ( ""not enough memory"" )"		118154	0					
ANR	118304	Callee	panic		118154	0					
ANR	118305	Identifier	panic		118154	0					
ANR	118306	ArgumentList	"""not enough memory"""		118154	1					
ANR	118307	Argument	"""not enough memory"""		118154	0					
ANR	118308	PrimaryExpression	"""not enough memory"""		118154	0					
ANR	118309	ExpressionStatement	nm = & the_names [ num_names ++ ]	97:2:2365:2393	118154	9	True				
ANR	118310	AssignmentExpression	nm = & the_names [ num_names ++ ]		118154	0		=			
ANR	118311	Identifier	nm		118154	0					
ANR	118312	UnaryOperationExpression	& the_names [ num_names ++ ]		118154	1					
ANR	118313	UnaryOperator	&		118154	0					
ANR	118314	ArrayIndexing	the_names [ num_names ++ ]		118154	1					
ANR	118315	Identifier	the_names		118154	0					
ANR	118316	PostIncDecOperationExpression	num_names ++		118154	1					
ANR	118317	Identifier	num_names		118154	0					
ANR	118318	IncDec	++		118154	1					
ANR	118319	ExpressionStatement	nm -> hash = h	99:2:2398:2410	118154	10	True				
ANR	118320	AssignmentExpression	nm -> hash = h		118154	0		=			
ANR	118321	PtrMemberAccess	nm -> hash		118154	0					
ANR	118322	Identifier	nm		118154	0					
ANR	118323	Identifier	hash		118154	1					
ANR	118324	Identifier	h		118154	1					
ANR	118325	ExpressionStatement	nm -> name = ( char * ) malloc ( len + 1 )	100:2:2414:2447	118154	11	True				
ANR	118326	AssignmentExpression	nm -> name = ( char * ) malloc ( len + 1 )		118154	0		=			
ANR	118327	PtrMemberAccess	nm -> name		118154	0					
ANR	118328	Identifier	nm		118154	0					
ANR	118329	Identifier	name		118154	1					
ANR	118330	CastExpression	( char * ) malloc ( len + 1 )		118154	1					
ANR	118331	CastTarget	char *		118154	0					
ANR	118332	CallExpression	malloc ( len + 1 )		118154	1					
ANR	118333	Callee	malloc		118154	0					
ANR	118334	Identifier	malloc		118154	0					
ANR	118335	ArgumentList	len + 1		118154	1					
ANR	118336	Argument	len + 1		118154	0					
ANR	118337	AdditiveExpression	len + 1		118154	0		+			
ANR	118338	Identifier	len		118154	0					
ANR	118339	PrimaryExpression	1		118154	1					
ANR	118340	IfStatement	if ( ! nm -> name )		118154	12					
ANR	118341	Condition	! nm -> name	101:7:2456:2464	118154	0	True				
ANR	118342	UnaryOperationExpression	! nm -> name		118154	0					
ANR	118343	UnaryOperator	!		118154	0					
ANR	118344	PtrMemberAccess	nm -> name		118154	1					
ANR	118345	Identifier	nm		118154	0					
ANR	118346	Identifier	name		118154	1					
ANR	118347	ExpressionStatement	"panic ( ""not enough memory"" )"	102:4:2472:2500	118154	1	True				
ANR	118348	CallExpression	"panic ( ""not enough memory"" )"		118154	0					
ANR	118349	Callee	panic		118154	0					
ANR	118350	Identifier	panic		118154	0					
ANR	118351	ArgumentList	"""not enough memory"""		118154	1					
ANR	118352	Argument	"""not enough memory"""		118154	0					
ANR	118353	PrimaryExpression	"""not enough memory"""		118154	0					
ANR	118354	ExpressionStatement	"memcpy ( nm -> name , name , len )"	104:2:2505:2534	118154	13	True				
ANR	118355	CallExpression	"memcpy ( nm -> name , name , len )"		118154	0					
ANR	118356	Callee	memcpy		118154	0					
ANR	118357	Identifier	memcpy		118154	0					
ANR	118358	ArgumentList	nm -> name		118154	1					
ANR	118359	Argument	nm -> name		118154	0					
ANR	118360	PtrMemberAccess	nm -> name		118154	0					
ANR	118361	Identifier	nm		118154	0					
ANR	118362	Identifier	name		118154	1					
ANR	118363	Argument	name		118154	1					
ANR	118364	Identifier	name		118154	0					
ANR	118365	Argument	len		118154	2					
ANR	118366	Identifier	len		118154	0					
ANR	118367	ExpressionStatement	nm -> name [ len ] = 0	105:2:2538:2555	118154	14	True				
ANR	118368	AssignmentExpression	nm -> name [ len ] = 0		118154	0		=			
ANR	118369	ArrayIndexing	nm -> name [ len ]		118154	0					
ANR	118370	PtrMemberAccess	nm -> name		118154	0					
ANR	118371	Identifier	nm		118154	0					
ANR	118372	Identifier	name		118154	1					
ANR	118373	Identifier	len		118154	1					
ANR	118374	PrimaryExpression	0		118154	1					
ANR	118375	ReturnType	static void		118154	1					
ANR	118376	Identifier	names_add		118154	2					
ANR	118377	ParameterList	"const char * name , const char * end"		118154	3					
ANR	118378	Parameter	const char * name	61:11:1542:1558	118154	0	True				
ANR	118379	ParameterType	const char *		118154	0					
ANR	118380	Identifier	name		118154	1					
ANR	118381	Parameter	const char * end	62:11:1572:1587	118154	1	True				
ANR	118382	ParameterType	const char *		118154	0					
ANR	118383	Identifier	end		118154	1					
ANR	118384	CFGEntryNode	ENTRY		118154		True				
ANR	118385	CFGExitNode	EXIT		118154		True				
ANR	118386	Symbol	nn		118154						
ANR	118387	Symbol	* name		118154						
ANR	118388	Symbol	* nm -> name		118154						
ANR	118389	Symbol	malloc		118154						
ANR	118390	Symbol	* nn		118154						
ANR	118391	Symbol	* nm		118154						
ANR	118392	Symbol	h		118154						
ANR	118393	Symbol	* * nm		118154						
ANR	118394	Symbol	nm -> name		118154						
ANR	118395	Symbol	realloc		118154						
ANR	118396	Symbol	nm -> hash		118154						
ANR	118397	Symbol	the_names		118154						
ANR	118398	Symbol	memcmp		118154						
ANR	118399	Symbol	len		118154						
ANR	118400	Symbol	max_names		118154						
ANR	118401	Symbol	name		118154						
ANR	118402	Symbol	* the_names		118154						
ANR	118403	Symbol	end		118154						
ANR	118404	Symbol	nm		118154						
ANR	118405	Symbol	num_names		118154						
ANR	118406	Symbol	* len		118154						
ANR	118407	Function	name_compare	109:0:2561:2735							
ANR	118408	FunctionDef	"name_compare (const void * name1 , const void * name2)"		118407	0					
ANR	118409	CompoundStatement		112:0:2641:2735	118407	0					
ANR	118410	IdentifierDeclStatement	Name n1 = ( Name ) name1 ;	113:2:2645:2667	118407	0	True				
ANR	118411	IdentifierDecl	n1 = ( Name ) name1		118407	0					
ANR	118412	IdentifierDeclType	Name		118407	0					
ANR	118413	Identifier	n1		118407	1					
ANR	118414	AssignmentExpression	n1 = ( Name ) name1		118407	2		=			
ANR	118415	Identifier	n1		118407	0					
ANR	118416	CastExpression	( Name ) name1		118407	1					
ANR	118417	CastTarget	Name		118407	0					
ANR	118418	Identifier	name1		118407	1					
ANR	118419	IdentifierDeclStatement	Name n2 = ( Name ) name2 ;	114:2:2671:2693	118407	1	True				
ANR	118420	IdentifierDecl	n2 = ( Name ) name2		118407	0					
ANR	118421	IdentifierDeclType	Name		118407	0					
ANR	118422	Identifier	n2		118407	1					
ANR	118423	AssignmentExpression	n2 = ( Name ) name2		118407	2		=			
ANR	118424	Identifier	n2		118407	0					
ANR	118425	CastExpression	( Name ) name2		118407	1					
ANR	118426	CastTarget	Name		118407	0					
ANR	118427	Identifier	name2		118407	1					
ANR	118428	ReturnStatement	"return strcmp ( n1 -> name , n2 -> name ) ;"	116:2:2698:2733	118407	2	True				
ANR	118429	CallExpression	"strcmp ( n1 -> name , n2 -> name )"		118407	0					
ANR	118430	Callee	strcmp		118407	0					
ANR	118431	Identifier	strcmp		118407	0					
ANR	118432	ArgumentList	n1 -> name		118407	1					
ANR	118433	Argument	n1 -> name		118407	0					
ANR	118434	PtrMemberAccess	n1 -> name		118407	0					
ANR	118435	Identifier	n1		118407	0					
ANR	118436	Identifier	name		118407	1					
ANR	118437	Argument	n2 -> name		118407	1					
ANR	118438	PtrMemberAccess	n2 -> name		118407	0					
ANR	118439	Identifier	n2		118407	0					
ANR	118440	Identifier	name		118407	1					
ANR	118441	ReturnType	static int		118407	1					
ANR	118442	Identifier	name_compare		118407	2					
ANR	118443	ParameterList	"const void * name1 , const void * name2"		118407	3					
ANR	118444	Parameter	const void * name1	110:14:2586:2603	118407	0	True				
ANR	118445	ParameterType	const void *		118407	0					
ANR	118446	Identifier	name1		118407	1					
ANR	118447	Parameter	const void * name2	111:14:2620:2637	118407	1	True				
ANR	118448	ParameterType	const void *		118407	0					
ANR	118449	Identifier	name2		118407	1					
ANR	118450	CFGEntryNode	ENTRY		118407		True				
ANR	118451	CFGExitNode	EXIT		118407		True				
ANR	118452	Symbol	strcmp		118407						
ANR	118453	Symbol	n1		118407						
ANR	118454	Symbol	n2 -> name		118407						
ANR	118455	Symbol	n2		118407						
ANR	118456	Symbol	n1 -> name		118407						
ANR	118457	Symbol	* n2		118407						
ANR	118458	Symbol	* n1		118407						
ANR	118459	Symbol	name2		118407						
ANR	118460	Symbol	name1		118407						
ANR	118461	Function	names_sort	119:0:2738:2860							
ANR	118462	FunctionDef	names_sort ()		118461	0					
ANR	118463	CompoundStatement		121:0:2769:2860	118461	0					
ANR	118464	ExpressionStatement	"qsort ( the_names , ( size_t ) num_names , sizeof ( the_names [ 0 ] ) , name_compare )"	122:2:2773:2858	118461	0	True				
ANR	118465	CallExpression	"qsort ( the_names , ( size_t ) num_names , sizeof ( the_names [ 0 ] ) , name_compare )"		118461	0					
ANR	118466	Callee	qsort		118461	0					
ANR	118467	Identifier	qsort		118461	0					
ANR	118468	ArgumentList	the_names		118461	1					
ANR	118469	Argument	the_names		118461	0					
ANR	118470	Identifier	the_names		118461	0					
ANR	118471	Argument	( size_t ) num_names		118461	1					
ANR	118472	CastExpression	( size_t ) num_names		118461	0					
ANR	118473	CastTarget	size_t		118461	0					
ANR	118474	Identifier	num_names		118461	1					
ANR	118475	Argument	sizeof ( the_names [ 0 ] )		118461	2					
ANR	118476	SizeofExpression	sizeof ( the_names [ 0 ] )		118461	0					
ANR	118477	Sizeof	sizeof		118461	0					
ANR	118478	ArrayIndexing	the_names [ 0 ]		118461	1					
ANR	118479	Identifier	the_names		118461	0					
ANR	118480	PrimaryExpression	0		118461	1					
ANR	118481	Argument	name_compare		118461	3					
ANR	118482	Identifier	name_compare		118461	0					
ANR	118483	ReturnType	static void		118461	1					
ANR	118484	Identifier	names_sort		118461	2					
ANR	118485	ParameterList			118461	3					
ANR	118486	CFGEntryNode	ENTRY		118461		True				
ANR	118487	CFGExitNode	EXIT		118461		True				
ANR	118488	Symbol	the_names		118461						
ANR	118489	Symbol	* the_names		118461						
ANR	118490	Symbol	name_compare		118461						
ANR	118491	Symbol	num_names		118461						
ANR	118492	Function	names_dump	127:0:2864:5134							
ANR	118493	FunctionDef	"names_dump (FILE * out , OutputFormat format , const char * dll_name)"		118492	0					
ANR	118494	CompoundStatement		131:0:2978:5134	118492	0					
ANR	118495	IdentifierDeclStatement	int nn ;	132:2:2982:2989	118492	0	True				
ANR	118496	IdentifierDecl	nn		118492	0					
ANR	118497	IdentifierDeclType	int		118492	0					
ANR	118498	Identifier	nn		118492	1					
ANR	118499	SwitchStatement	switch ( format )		118492	1					
ANR	118500	Condition	format	135:11:3004:3009	118492	0	True				
ANR	118501	Identifier	format		118492	0					
ANR	118502	CompoundStatement		6:2:36:36	118492	1					
ANR	118503	Label	case OUTPUT_WINDOWS_DEF :	137:4:3021:3044	118492	0	True				
ANR	118504	Identifier	OUTPUT_WINDOWS_DEF		118492	0					
ANR	118505	IfStatement	if ( dll_name )		118492	1					
ANR	118506	Condition	dll_name	138:11:3057:3064	118492	0	True				
ANR	118507	Identifier	dll_name		118492	0					
ANR	118508	ExpressionStatement	"fprintf ( out , ""LIBRARY %s\\n"" , dll_name )"	139:8:3076:3116	118492	1	True				
ANR	118509	CallExpression	"fprintf ( out , ""LIBRARY %s\\n"" , dll_name )"		118492	0					
ANR	118510	Callee	fprintf		118492	0					
ANR	118511	Identifier	fprintf		118492	0					
ANR	118512	ArgumentList	out		118492	1					
ANR	118513	Argument	out		118492	0					
ANR	118514	Identifier	out		118492	0					
ANR	118515	Argument	"""LIBRARY %s\\n"""		118492	1					
ANR	118516	PrimaryExpression	"""LIBRARY %s\\n"""		118492	0					
ANR	118517	Argument	dll_name		118492	2					
ANR	118518	Identifier	dll_name		118492	0					
ANR	118519	ExpressionStatement	"fprintf ( out , ""DESCRIPTION  FreeType 2 DLL\\n"" )"	141:6:3125:3172	118492	2	True				
ANR	118520	CallExpression	"fprintf ( out , ""DESCRIPTION  FreeType 2 DLL\\n"" )"		118492	0					
ANR	118521	Callee	fprintf		118492	0					
ANR	118522	Identifier	fprintf		118492	0					
ANR	118523	ArgumentList	out		118492	1					
ANR	118524	Argument	out		118492	0					
ANR	118525	Identifier	out		118492	0					
ANR	118526	Argument	"""DESCRIPTION  FreeType 2 DLL\\n"""		118492	1					
ANR	118527	PrimaryExpression	"""DESCRIPTION  FreeType 2 DLL\\n"""		118492	0					
ANR	118528	ExpressionStatement	"fprintf ( out , ""EXPORTS\\n"" )"	142:6:3180:3207	118492	3	True				
ANR	118529	CallExpression	"fprintf ( out , ""EXPORTS\\n"" )"		118492	0					
ANR	118530	Callee	fprintf		118492	0					
ANR	118531	Identifier	fprintf		118492	0					
ANR	118532	ArgumentList	out		118492	1					
ANR	118533	Argument	out		118492	0					
ANR	118534	Identifier	out		118492	0					
ANR	118535	Argument	"""EXPORTS\\n"""		118492	1					
ANR	118536	PrimaryExpression	"""EXPORTS\\n"""		118492	0					
ANR	118537	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		118492	4					
ANR	118538	ForInit	nn = 0 ;	143:12:3221:3227	118492	0	True				
ANR	118539	AssignmentExpression	nn = 0		118492	0		=			
ANR	118540	Identifier	nn		118492	0					
ANR	118541	PrimaryExpression	0		118492	1					
ANR	118542	Condition	nn < num_names	143:20:3229:3242	118492	1	True				
ANR	118543	RelationalExpression	nn < num_names		118492	0		<			
ANR	118544	Identifier	nn		118492	0					
ANR	118545	Identifier	num_names		118492	1					
ANR	118546	PostIncDecOperationExpression	nn ++	143:36:3245:3248	118492	2	True				
ANR	118547	Identifier	nn		118492	0					
ANR	118548	IncDec	++		118492	1					
ANR	118549	ExpressionStatement	"fprintf ( out , ""  %s\\n"" , the_names [ nn ] . name )"	144:8:3260:3304	118492	3	True				
ANR	118550	CallExpression	"fprintf ( out , ""  %s\\n"" , the_names [ nn ] . name )"		118492	0					
ANR	118551	Callee	fprintf		118492	0					
ANR	118552	Identifier	fprintf		118492	0					
ANR	118553	ArgumentList	out		118492	1					
ANR	118554	Argument	out		118492	0					
ANR	118555	Identifier	out		118492	0					
ANR	118556	Argument	"""  %s\\n"""		118492	1					
ANR	118557	PrimaryExpression	"""  %s\\n"""		118492	0					
ANR	118558	Argument	the_names [ nn ] . name		118492	2					
ANR	118559	MemberAccess	the_names [ nn ] . name		118492	0					
ANR	118560	ArrayIndexing	the_names [ nn ]		118492	0					
ANR	118561	Identifier	the_names		118492	0					
ANR	118562	Identifier	nn		118492	1					
ANR	118563	Identifier	name		118492	1					
ANR	118564	BreakStatement	break ;	145:6:3312:3317	118492	5	True				
ANR	118565	Label	case OUTPUT_BORLAND_DEF :	147:4:3324:3347	118492	6	True				
ANR	118566	Identifier	OUTPUT_BORLAND_DEF		118492	0					
ANR	118567	IfStatement	if ( dll_name )		118492	7					
ANR	118568	Condition	dll_name	148:11:3360:3367	118492	0	True				
ANR	118569	Identifier	dll_name		118492	0					
ANR	118570	ExpressionStatement	"fprintf ( out , ""LIBRARY %s\\n"" , dll_name )"	149:8:3379:3419	118492	1	True				
ANR	118571	CallExpression	"fprintf ( out , ""LIBRARY %s\\n"" , dll_name )"		118492	0					
ANR	118572	Callee	fprintf		118492	0					
ANR	118573	Identifier	fprintf		118492	0					
ANR	118574	ArgumentList	out		118492	1					
ANR	118575	Argument	out		118492	0					
ANR	118576	Identifier	out		118492	0					
ANR	118577	Argument	"""LIBRARY %s\\n"""		118492	1					
ANR	118578	PrimaryExpression	"""LIBRARY %s\\n"""		118492	0					
ANR	118579	Argument	dll_name		118492	2					
ANR	118580	Identifier	dll_name		118492	0					
ANR	118581	ExpressionStatement	"fprintf ( out , ""DESCRIPTION  FreeType 2 DLL\\n"" )"	151:6:3428:3475	118492	8	True				
ANR	118582	CallExpression	"fprintf ( out , ""DESCRIPTION  FreeType 2 DLL\\n"" )"		118492	0					
ANR	118583	Callee	fprintf		118492	0					
ANR	118584	Identifier	fprintf		118492	0					
ANR	118585	ArgumentList	out		118492	1					
ANR	118586	Argument	out		118492	0					
ANR	118587	Identifier	out		118492	0					
ANR	118588	Argument	"""DESCRIPTION  FreeType 2 DLL\\n"""		118492	1					
ANR	118589	PrimaryExpression	"""DESCRIPTION  FreeType 2 DLL\\n"""		118492	0					
ANR	118590	ExpressionStatement	"fprintf ( out , ""EXPORTS\\n"" )"	152:6:3483:3510	118492	9	True				
ANR	118591	CallExpression	"fprintf ( out , ""EXPORTS\\n"" )"		118492	0					
ANR	118592	Callee	fprintf		118492	0					
ANR	118593	Identifier	fprintf		118492	0					
ANR	118594	ArgumentList	out		118492	1					
ANR	118595	Argument	out		118492	0					
ANR	118596	Identifier	out		118492	0					
ANR	118597	Argument	"""EXPORTS\\n"""		118492	1					
ANR	118598	PrimaryExpression	"""EXPORTS\\n"""		118492	0					
ANR	118599	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		118492	10					
ANR	118600	ForInit	nn = 0 ;	153:12:3524:3530	118492	0	True				
ANR	118601	AssignmentExpression	nn = 0		118492	0		=			
ANR	118602	Identifier	nn		118492	0					
ANR	118603	PrimaryExpression	0		118492	1					
ANR	118604	Condition	nn < num_names	153:20:3532:3545	118492	1	True				
ANR	118605	RelationalExpression	nn < num_names		118492	0		<			
ANR	118606	Identifier	nn		118492	0					
ANR	118607	Identifier	num_names		118492	1					
ANR	118608	PostIncDecOperationExpression	nn ++	153:36:3548:3551	118492	2	True				
ANR	118609	Identifier	nn		118492	0					
ANR	118610	IncDec	++		118492	1					
ANR	118611	ExpressionStatement	"fprintf ( out , ""  _%s\\n"" , the_names [ nn ] . name )"	154:8:3563:3608	118492	3	True				
ANR	118612	CallExpression	"fprintf ( out , ""  _%s\\n"" , the_names [ nn ] . name )"		118492	0					
ANR	118613	Callee	fprintf		118492	0					
ANR	118614	Identifier	fprintf		118492	0					
ANR	118615	ArgumentList	out		118492	1					
ANR	118616	Argument	out		118492	0					
ANR	118617	Identifier	out		118492	0					
ANR	118618	Argument	"""  _%s\\n"""		118492	1					
ANR	118619	PrimaryExpression	"""  _%s\\n"""		118492	0					
ANR	118620	Argument	the_names [ nn ] . name		118492	2					
ANR	118621	MemberAccess	the_names [ nn ] . name		118492	0					
ANR	118622	ArrayIndexing	the_names [ nn ]		118492	0					
ANR	118623	Identifier	the_names		118492	0					
ANR	118624	Identifier	nn		118492	1					
ANR	118625	Identifier	name		118492	1					
ANR	118626	BreakStatement	break ;	155:6:3616:3621	118492	11	True				
ANR	118627	Label	case OUTPUT_WATCOM_LBC :	157:4:3628:3650	118492	12	True				
ANR	118628	Identifier	OUTPUT_WATCOM_LBC		118492	0					
ANR	118629	CompoundStatement		30:8:715:737	118492	13					
ANR	118630	IdentifierDeclStatement	const char * dot ;	159:8:3668:3684	118492	0	True				
ANR	118631	IdentifierDecl	* dot		118492	0					
ANR	118632	IdentifierDeclType	const char *		118492	0					
ANR	118633	Identifier	dot		118492	1					
ANR	118634	IdentifierDeclStatement	char temp [ 512 ] ;	160:8:3694:3716	118492	1	True				
ANR	118635	IdentifierDecl	temp [ 512 ]		118492	0					
ANR	118636	IdentifierDeclType	char [ 512 ]		118492	0					
ANR	118637	Identifier	temp		118492	1					
ANR	118638	PrimaryExpression	512		118492	2					
ANR	118639	IfStatement	if ( ! dll_name )		118492	2					
ANR	118640	Condition	! dll_name	163:13:3733:3741	118492	0	True				
ANR	118641	UnaryOperationExpression	! dll_name		118492	0					
ANR	118642	UnaryOperator	!		118492	0					
ANR	118643	Identifier	dll_name		118492	1					
ANR	118644	CompoundStatement		34:8:774:774	118492	1					
ANR	118645	ExpressionStatement	"fprintf ( stderr , ""you must provide a DLL name with the -d option!\\n"" )"	165:10:3765:3854	118492	0	True				
ANR	118646	CallExpression	"fprintf ( stderr , ""you must provide a DLL name with the -d option!\\n"" )"		118492	0					
ANR	118647	Callee	fprintf		118492	0					
ANR	118648	Identifier	fprintf		118492	0					
ANR	118649	ArgumentList	stderr		118492	1					
ANR	118650	Argument	stderr		118492	0					
ANR	118651	Identifier	stderr		118492	0					
ANR	118652	Argument	"""you must provide a DLL name with the -d option!\\n"""		118492	1					
ANR	118653	PrimaryExpression	"""you must provide a DLL name with the -d option!\\n"""		118492	0					
ANR	118654	ExpressionStatement	exit ( 4 )	167:10:3866:3875	118492	1	True				
ANR	118655	CallExpression	exit ( 4 )		118492	0					
ANR	118656	Callee	exit		118492	0					
ANR	118657	Identifier	exit		118492	0					
ANR	118658	ArgumentList	4		118492	1					
ANR	118659	Argument	4		118492	0					
ANR	118660	PrimaryExpression	4		118492	0					
ANR	118661	ExpressionStatement	"dot = strchr ( dll_name , '.' )"	171:8:3961:3990	118492	3	True				
ANR	118662	AssignmentExpression	"dot = strchr ( dll_name , '.' )"		118492	0		=			
ANR	118663	Identifier	dot		118492	0					
ANR	118664	CallExpression	"strchr ( dll_name , '.' )"		118492	1					
ANR	118665	Callee	strchr		118492	0					
ANR	118666	Identifier	strchr		118492	0					
ANR	118667	ArgumentList	dll_name		118492	1					
ANR	118668	Argument	dll_name		118492	0					
ANR	118669	Identifier	dll_name		118492	0					
ANR	118670	Argument	'.'		118492	1					
ANR	118671	PrimaryExpression	'.'		118492	0					
ANR	118672	IfStatement	if ( dot )		118492	4					
ANR	118673	Condition	dot	172:13:4005:4007	118492	0	True				
ANR	118674	Identifier	dot		118492	0					
ANR	118675	CompoundStatement		44:10:1052:1077	118492	1					
ANR	118676	IdentifierDeclStatement	int len = dot - dll_name ;	174:10:4031:4056	118492	0	True				
ANR	118677	IdentifierDecl	len = dot - dll_name		118492	0					
ANR	118678	IdentifierDeclType	int		118492	0					
ANR	118679	Identifier	len		118492	1					
ANR	118680	AssignmentExpression	len = dot - dll_name		118492	2		=			
ANR	118681	Identifier	len		118492	0					
ANR	118682	AdditiveExpression	dot - dll_name		118492	1		-			
ANR	118683	Identifier	dot		118492	0					
ANR	118684	Identifier	dll_name		118492	1					
ANR	118685	IfStatement	if ( len > ( int ) ( sizeof ( temp ) - 1 ) )		118492	1					
ANR	118686	Condition	len > ( int ) ( sizeof ( temp ) - 1 )	177:15:4075:4108	118492	0	True				
ANR	118687	RelationalExpression	len > ( int ) ( sizeof ( temp ) - 1 )		118492	0		>			
ANR	118688	Identifier	len		118492	0					
ANR	118689	CastExpression	( int ) ( sizeof ( temp ) - 1 )		118492	1					
ANR	118690	CastTarget	int		118492	0					
ANR	118691	AdditiveExpression	sizeof ( temp ) - 1		118492	1		-			
ANR	118692	SizeofExpression	sizeof ( temp )		118492	0					
ANR	118693	Sizeof	sizeof		118492	0					
ANR	118694	SizeofOperand	temp		118492	1					
ANR	118695	PrimaryExpression	1		118492	1					
ANR	118696	ExpressionStatement	len = sizeof ( temp ) - 1	178:12:4124:4149	118492	1	True				
ANR	118697	AssignmentExpression	len = sizeof ( temp ) - 1		118492	0		=			
ANR	118698	Identifier	len		118492	0					
ANR	118699	AdditiveExpression	sizeof ( temp ) - 1		118492	1		-			
ANR	118700	SizeofExpression	sizeof ( temp )		118492	0					
ANR	118701	Sizeof	sizeof		118492	0					
ANR	118702	SizeofOperand	temp		118492	1					
ANR	118703	PrimaryExpression	1		118492	1					
ANR	118704	ExpressionStatement	"memcpy ( temp , dll_name , len )"	180:10:4162:4191	118492	2	True				
ANR	118705	CallExpression	"memcpy ( temp , dll_name , len )"		118492	0					
ANR	118706	Callee	memcpy		118492	0					
ANR	118707	Identifier	memcpy		118492	0					
ANR	118708	ArgumentList	temp		118492	1					
ANR	118709	Argument	temp		118492	0					
ANR	118710	Identifier	temp		118492	0					
ANR	118711	Argument	dll_name		118492	1					
ANR	118712	Identifier	dll_name		118492	0					
ANR	118713	Argument	len		118492	2					
ANR	118714	Identifier	len		118492	0					
ANR	118715	ExpressionStatement	temp [ len ] = 0	181:10:4203:4216	118492	3	True				
ANR	118716	AssignmentExpression	temp [ len ] = 0		118492	0		=			
ANR	118717	ArrayIndexing	temp [ len ]		118492	0					
ANR	118718	Identifier	temp		118492	0					
ANR	118719	Identifier	len		118492	1					
ANR	118720	PrimaryExpression	0		118492	1					
ANR	118721	ExpressionStatement	dll_name = ( const char * ) temp	183:10:4229:4257	118492	4	True				
ANR	118722	AssignmentExpression	dll_name = ( const char * ) temp		118492	0		=			
ANR	118723	Identifier	dll_name		118492	0					
ANR	118724	CastExpression	( const char * ) temp		118492	1					
ANR	118725	CastTarget	const char *		118492	0					
ANR	118726	Identifier	temp		118492	1					
ANR	118727	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		118492	5					
ANR	118728	ForInit	nn = 0 ;	186:14:4284:4290	118492	0	True				
ANR	118729	AssignmentExpression	nn = 0		118492	0		=			
ANR	118730	Identifier	nn		118492	0					
ANR	118731	PrimaryExpression	0		118492	1					
ANR	118732	Condition	nn < num_names	186:22:4292:4305	118492	1	True				
ANR	118733	RelationalExpression	nn < num_names		118492	0		<			
ANR	118734	Identifier	nn		118492	0					
ANR	118735	Identifier	num_names		118492	1					
ANR	118736	PostIncDecOperationExpression	nn ++	186:38:4308:4311	118492	2	True				
ANR	118737	Identifier	nn		118492	0					
ANR	118738	IncDec	++		118492	1					
ANR	118739	ExpressionStatement	"fprintf ( out , ""++_%s.%s.%s\\n"" , the_names [ nn ] . name , dll_name , the_names [ nn ] . name )"	187:10:4325:4430	118492	3	True				
ANR	118740	CallExpression	"fprintf ( out , ""++_%s.%s.%s\\n"" , the_names [ nn ] . name , dll_name , the_names [ nn ] . name )"		118492	0					
ANR	118741	Callee	fprintf		118492	0					
ANR	118742	Identifier	fprintf		118492	0					
ANR	118743	ArgumentList	out		118492	1					
ANR	118744	Argument	out		118492	0					
ANR	118745	Identifier	out		118492	0					
ANR	118746	Argument	"""++_%s.%s.%s\\n"""		118492	1					
ANR	118747	PrimaryExpression	"""++_%s.%s.%s\\n"""		118492	0					
ANR	118748	Argument	the_names [ nn ] . name		118492	2					
ANR	118749	MemberAccess	the_names [ nn ] . name		118492	0					
ANR	118750	ArrayIndexing	the_names [ nn ]		118492	0					
ANR	118751	Identifier	the_names		118492	0					
ANR	118752	Identifier	nn		118492	1					
ANR	118753	Identifier	name		118492	1					
ANR	118754	Argument	dll_name		118492	3					
ANR	118755	Identifier	dll_name		118492	0					
ANR	118756	Argument	the_names [ nn ] . name		118492	4					
ANR	118757	MemberAccess	the_names [ nn ] . name		118492	0					
ANR	118758	ArrayIndexing	the_names [ nn ]		118492	0					
ANR	118759	Identifier	the_names		118492	0					
ANR	118760	Identifier	nn		118492	1					
ANR	118761	Identifier	name		118492	1					
ANR	118762	BreakStatement	break ;	190:6:4446:4451	118492	14	True				
ANR	118763	Label	case OUTPUT_NETWARE_IMP :	192:4:4458:4481	118492	15	True				
ANR	118764	Identifier	OUTPUT_NETWARE_IMP		118492	0					
ANR	118765	CompoundStatement		63:6:1510:1510	118492	16					
ANR	118766	IfStatement	if ( dll_name )		118492	0					
ANR	118767	Condition	dll_name	194:13:4504:4511	118492	0	True				
ANR	118768	Identifier	dll_name		118492	0					
ANR	118769	ExpressionStatement	"fprintf ( out , ""  (%s)\\n"" , dll_name )"	195:10:4525:4561	118492	1	True				
ANR	118770	CallExpression	"fprintf ( out , ""  (%s)\\n"" , dll_name )"		118492	0					
ANR	118771	Callee	fprintf		118492	0					
ANR	118772	Identifier	fprintf		118492	0					
ANR	118773	ArgumentList	out		118492	1					
ANR	118774	Argument	out		118492	0					
ANR	118775	Identifier	out		118492	0					
ANR	118776	Argument	"""  (%s)\\n"""		118492	1					
ANR	118777	PrimaryExpression	"""  (%s)\\n"""		118492	0					
ANR	118778	Argument	dll_name		118492	2					
ANR	118779	Identifier	dll_name		118492	0					
ANR	118780	ForStatement	for ( nn = 0 ; nn < num_names - 1 ; nn ++ )		118492	1					
ANR	118781	ForInit	nn = 0 ;	196:14:4577:4583	118492	0	True				
ANR	118782	AssignmentExpression	nn = 0		118492	0		=			
ANR	118783	Identifier	nn		118492	0					
ANR	118784	PrimaryExpression	0		118492	1					
ANR	118785	Condition	nn < num_names - 1	196:22:4585:4602	118492	1	True				
ANR	118786	RelationalExpression	nn < num_names - 1		118492	0		<			
ANR	118787	Identifier	nn		118492	0					
ANR	118788	AdditiveExpression	num_names - 1		118492	1		-			
ANR	118789	Identifier	num_names		118492	0					
ANR	118790	PrimaryExpression	1		118492	1					
ANR	118791	PostIncDecOperationExpression	nn ++	196:42:4605:4608	118492	2	True				
ANR	118792	Identifier	nn		118492	0					
ANR	118793	IncDec	++		118492	1					
ANR	118794	ExpressionStatement	"fprintf ( out , ""  %s,\\n"" , the_names [ nn ] . name )"	197:10:4622:4667	118492	3	True				
ANR	118795	CallExpression	"fprintf ( out , ""  %s,\\n"" , the_names [ nn ] . name )"		118492	0					
ANR	118796	Callee	fprintf		118492	0					
ANR	118797	Identifier	fprintf		118492	0					
ANR	118798	ArgumentList	out		118492	1					
ANR	118799	Argument	out		118492	0					
ANR	118800	Identifier	out		118492	0					
ANR	118801	Argument	"""  %s,\\n"""		118492	1					
ANR	118802	PrimaryExpression	"""  %s,\\n"""		118492	0					
ANR	118803	Argument	the_names [ nn ] . name		118492	2					
ANR	118804	MemberAccess	the_names [ nn ] . name		118492	0					
ANR	118805	ArrayIndexing	the_names [ nn ]		118492	0					
ANR	118806	Identifier	the_names		118492	0					
ANR	118807	Identifier	nn		118492	1					
ANR	118808	Identifier	name		118492	1					
ANR	118809	ExpressionStatement	"fprintf ( out , ""  %s\\n"" , the_names [ num_names - 1 ] . name )"	198:8:4677:4732	118492	2	True				
ANR	118810	CallExpression	"fprintf ( out , ""  %s\\n"" , the_names [ num_names - 1 ] . name )"		118492	0					
ANR	118811	Callee	fprintf		118492	0					
ANR	118812	Identifier	fprintf		118492	0					
ANR	118813	ArgumentList	out		118492	1					
ANR	118814	Argument	out		118492	0					
ANR	118815	Identifier	out		118492	0					
ANR	118816	Argument	"""  %s\\n"""		118492	1					
ANR	118817	PrimaryExpression	"""  %s\\n"""		118492	0					
ANR	118818	Argument	the_names [ num_names - 1 ] . name		118492	2					
ANR	118819	MemberAccess	the_names [ num_names - 1 ] . name		118492	0					
ANR	118820	ArrayIndexing	the_names [ num_names - 1 ]		118492	0					
ANR	118821	Identifier	the_names		118492	0					
ANR	118822	AdditiveExpression	num_names - 1		118492	1		-			
ANR	118823	Identifier	num_names		118492	0					
ANR	118824	PrimaryExpression	1		118492	1					
ANR	118825	Identifier	name		118492	1					
ANR	118826	BreakStatement	break ;	200:6:4748:4753	118492	17	True				
ANR	118827	Label	case OUTPUT_GNU_VERMAP :	202:4:4760:4782	118492	18	True				
ANR	118828	Identifier	OUTPUT_GNU_VERMAP		118492	0					
ANR	118829	CompoundStatement		73:6:1811:1811	118492	19					
ANR	118830	ExpressionStatement	"fprintf ( out , ""{\\n\\tglobal:\\n"" )"	204:8:4800:4832	118492	0	True				
ANR	118831	CallExpression	"fprintf ( out , ""{\\n\\tglobal:\\n"" )"		118492	0					
ANR	118832	Callee	fprintf		118492	0					
ANR	118833	Identifier	fprintf		118492	0					
ANR	118834	ArgumentList	out		118492	1					
ANR	118835	Argument	out		118492	0					
ANR	118836	Identifier	out		118492	0					
ANR	118837	Argument	"""{\\n\\tglobal:\\n"""		118492	1					
ANR	118838	PrimaryExpression	"""{\\n\\tglobal:\\n"""		118492	0					
ANR	118839	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		118492	1					
ANR	118840	ForInit	nn = 0 ;	205:14:4848:4854	118492	0	True				
ANR	118841	AssignmentExpression	nn = 0		118492	0		=			
ANR	118842	Identifier	nn		118492	0					
ANR	118843	PrimaryExpression	0		118492	1					
ANR	118844	Condition	nn < num_names	205:22:4856:4869	118492	1	True				
ANR	118845	RelationalExpression	nn < num_names		118492	0		<			
ANR	118846	Identifier	nn		118492	0					
ANR	118847	Identifier	num_names		118492	1					
ANR	118848	PostIncDecOperationExpression	nn ++	205:38:4872:4875	118492	2	True				
ANR	118849	Identifier	nn		118492	0					
ANR	118850	IncDec	++		118492	1					
ANR	118851	ExpressionStatement	"fprintf ( out , ""\\t\\t%s;\\n"" , the_names [ nn ] . name )"	206:10:4889:4936	118492	3	True				
ANR	118852	CallExpression	"fprintf ( out , ""\\t\\t%s;\\n"" , the_names [ nn ] . name )"		118492	0					
ANR	118853	Callee	fprintf		118492	0					
ANR	118854	Identifier	fprintf		118492	0					
ANR	118855	ArgumentList	out		118492	1					
ANR	118856	Argument	out		118492	0					
ANR	118857	Identifier	out		118492	0					
ANR	118858	Argument	"""\\t\\t%s;\\n"""		118492	1					
ANR	118859	PrimaryExpression	"""\\t\\t%s;\\n"""		118492	0					
ANR	118860	Argument	the_names [ nn ] . name		118492	2					
ANR	118861	MemberAccess	the_names [ nn ] . name		118492	0					
ANR	118862	ArrayIndexing	the_names [ nn ]		118492	0					
ANR	118863	Identifier	the_names		118492	0					
ANR	118864	Identifier	nn		118492	1					
ANR	118865	Identifier	name		118492	1					
ANR	118866	ExpressionStatement	"fprintf ( out , ""\\tlocal:\\n\\t\\t*;\\n};\\n"" )"	207:8:4946:4986	118492	2	True				
ANR	118867	CallExpression	"fprintf ( out , ""\\tlocal:\\n\\t\\t*;\\n};\\n"" )"		118492	0					
ANR	118868	Callee	fprintf		118492	0					
ANR	118869	Identifier	fprintf		118492	0					
ANR	118870	ArgumentList	out		118492	1					
ANR	118871	Argument	out		118492	0					
ANR	118872	Identifier	out		118492	0					
ANR	118873	Argument	"""\\tlocal:\\n\\t\\t*;\\n};\\n"""		118492	1					
ANR	118874	PrimaryExpression	"""\\tlocal:\\n\\t\\t*;\\n};\\n"""		118492	0					
ANR	118875	BreakStatement	break ;	209:6:5002:5007	118492	20	True				
ANR	118876	Label	default :	211:4:5014:5021	118492	21	True				
ANR	118877	Identifier	default		118492	0					
ANR	118878	ForStatement	for ( nn = 0 ; nn < num_names ; nn ++ )		118492	22					
ANR	118879	ForInit	nn = 0 ;	212:12:5047:5053	118492	0	True				
ANR	118880	AssignmentExpression	nn = 0		118492	0		=			
ANR	118881	Identifier	nn		118492	0					
ANR	118882	PrimaryExpression	0		118492	1					
ANR	118883	Condition	nn < num_names	212:20:5055:5068	118492	1	True				
ANR	118884	RelationalExpression	nn < num_names		118492	0		<			
ANR	118885	Identifier	nn		118492	0					
ANR	118886	Identifier	num_names		118492	1					
ANR	118887	PostIncDecOperationExpression	nn ++	212:36:5071:5074	118492	2	True				
ANR	118888	Identifier	nn		118492	0					
ANR	118889	IncDec	++		118492	1					
ANR	118890	ExpressionStatement	"fprintf ( out , ""%s\\n"" , the_names [ nn ] . name )"	213:8:5086:5128	118492	3	True				
ANR	118891	CallExpression	"fprintf ( out , ""%s\\n"" , the_names [ nn ] . name )"		118492	0					
ANR	118892	Callee	fprintf		118492	0					
ANR	118893	Identifier	fprintf		118492	0					
ANR	118894	ArgumentList	out		118492	1					
ANR	118895	Argument	out		118492	0					
ANR	118896	Identifier	out		118492	0					
ANR	118897	Argument	"""%s\\n"""		118492	1					
ANR	118898	PrimaryExpression	"""%s\\n"""		118492	0					
ANR	118899	Argument	the_names [ nn ] . name		118492	2					
ANR	118900	MemberAccess	the_names [ nn ] . name		118492	0					
ANR	118901	ArrayIndexing	the_names [ nn ]		118492	0					
ANR	118902	Identifier	the_names		118492	0					
ANR	118903	Identifier	nn		118492	1					
ANR	118904	Identifier	name		118492	1					
ANR	118905	ReturnType	static void		118492	1					
ANR	118906	Identifier	names_dump		118492	2					
ANR	118907	ParameterList	"FILE * out , OutputFormat format , const char * dll_name"		118492	3					
ANR	118908	Parameter	FILE * out	128:12:2888:2904	118492	0	True				
ANR	118909	ParameterType	FILE *		118492	0					
ANR	118910	Identifier	out		118492	1					
ANR	118911	Parameter	OutputFormat format	129:12:2919:2938	118492	1	True				
ANR	118912	ParameterType	OutputFormat		118492	0					
ANR	118913	Identifier	format		118492	1					
ANR	118914	Parameter	const char * dll_name	130:12:2953:2974	118492	2	True				
ANR	118915	ParameterType	const char *		118492	0					
ANR	118916	Identifier	dll_name		118492	1					
ANR	118917	CFGEntryNode	ENTRY		118492		True				
ANR	118918	CFGExitNode	EXIT		118492		True				
ANR	118919	Symbol	nn		118492						
ANR	118920	Symbol	temp		118492						
ANR	118921	Symbol	* nn		118492						
ANR	118922	Symbol	format		118492						
ANR	118923	Symbol	dot		118492						
ANR	118924	Symbol	strchr		118492						
ANR	118925	Symbol	stderr		118492						
ANR	118926	Symbol	* temp		118492						
ANR	118927	Symbol	out		118492						
ANR	118928	Symbol	the_names		118492						
ANR	118929	Symbol	len		118492						
ANR	118930	Symbol	dll_name		118492						
ANR	118931	Symbol	* the_names		118492						
ANR	118932	Symbol	the_names [ nn ] . name		118492						
ANR	118933	Symbol	the_names [ num_names - 1 ] . name		118492						
ANR	118934	Symbol	* num_names		118492						
ANR	118935	Symbol	num_names		118492						
ANR	118936	Symbol	* len		118492						
ANR	118937	ClassDef	State_	222:8:5181:5348							
ANR	118938	DeclStmt									
ANR	118939	Decl							State_	State_	State
ANR	118940	Function	read_header_file	229:0:5351:6959							
ANR	118941	FunctionDef	"read_header_file (FILE * file , int verbose)"		118940	0					
ANR	118942	CompoundStatement		231:0:5408:6959	118940	0					
ANR	118943	Statement	static	232:2:5412:5417	118940	0	True				
ANR	118944	IdentifierDeclStatement	char buff [ LINEBUFF_SIZE + 1 ] ;	232:9:5419:5448	118940	1	True				
ANR	118945	IdentifierDecl	buff [ LINEBUFF_SIZE + 1 ]		118940	0					
ANR	118946	IdentifierDeclType	char [ LINEBUFF_SIZE + 1 ]		118940	0					
ANR	118947	Identifier	buff		118940	1					
ANR	118948	AdditiveExpression	LINEBUFF_SIZE + 1		118940	2		+			
ANR	118949	Identifier	LINEBUFF_SIZE		118940	0					
ANR	118950	PrimaryExpression	1		118940	1					
ANR	118951	IdentifierDeclStatement	State state = STATE_START ;	233:2:5452:5484	118940	2	True				
ANR	118952	IdentifierDecl	state = STATE_START		118940	0					
ANR	118953	IdentifierDeclType	State		118940	0					
ANR	118954	Identifier	state		118940	1					
ANR	118955	AssignmentExpression	state = STATE_START		118940	2		=			
ANR	118956	Identifier	STATE_START		118940	0					
ANR	118957	Identifier	STATE_START		118940	1					
ANR	118958	WhileStatement	while ( ! feof ( file ) )		118940	3					
ANR	118959	Condition	! feof ( file )	235:10:5497:5509	118940	0	True				
ANR	118960	UnaryOperationExpression	! feof ( file )		118940	0					
ANR	118961	UnaryOperator	!		118940	0					
ANR	118962	CallExpression	feof ( file )		118940	1					
ANR	118963	Callee	feof		118940	0					
ANR	118964	Identifier	feof		118940	0					
ANR	118965	ArgumentList	file		118940	1					
ANR	118966	Argument	file		118940	0					
ANR	118967	Identifier	file		118940	0					
ANR	118968	CompoundStatement		7:4:112:120	118940	1					
ANR	118969	IdentifierDeclStatement	char * p ;	237:4:5521:5529	118940	0	True				
ANR	118970	IdentifierDecl	* p		118940	0					
ANR	118971	IdentifierDeclType	char *		118940	0					
ANR	118972	Identifier	p		118940	1					
ANR	118973	IfStatement	"if ( ! fgets ( buff , LINEBUFF_SIZE , file ) )"		118940	1					
ANR	118974	Condition	"! fgets ( buff , LINEBUFF_SIZE , file )"	239:9:5541:5575	118940	0	True				
ANR	118975	UnaryOperationExpression	"! fgets ( buff , LINEBUFF_SIZE , file )"		118940	0					
ANR	118976	UnaryOperator	!		118940	0					
ANR	118977	CallExpression	"fgets ( buff , LINEBUFF_SIZE , file )"		118940	1					
ANR	118978	Callee	fgets		118940	0					
ANR	118979	Identifier	fgets		118940	0					
ANR	118980	ArgumentList	buff		118940	1					
ANR	118981	Argument	buff		118940	0					
ANR	118982	Identifier	buff		118940	0					
ANR	118983	Argument	LINEBUFF_SIZE		118940	1					
ANR	118984	Identifier	LINEBUFF_SIZE		118940	0					
ANR	118985	Argument	file		118940	2					
ANR	118986	Identifier	file		118940	0					
ANR	118987	BreakStatement	break ;	240:6:5585:5590	118940	1	True				
ANR	118988	ExpressionStatement	p = buff	242:4:5597:5605	118940	2	True				
ANR	118989	AssignmentExpression	p = buff		118940	0		=			
ANR	118990	Identifier	p		118940	0					
ANR	118991	Identifier	buff		118940	1					
ANR	118992	WhileStatement	while ( * p && ( * p == ' ' || * p == '\\\\' ) )		118940	3					
ANR	118993	Condition	* p && ( * p == ' ' || * p == '\\\\' )	244:12:5620:5650	118940	0	True				
ANR	118994	AndExpression	* p && ( * p == ' ' || * p == '\\\\' )		118940	0		&&			
ANR	118995	UnaryOperationExpression	* p		118940	0					
ANR	118996	UnaryOperator	*		118940	0					
ANR	118997	Identifier	p		118940	1					
ANR	118998	OrExpression	* p == ' ' || * p == '\\\\'		118940	1		||			
ANR	118999	EqualityExpression	* p == ' '		118940	0		==			
ANR	119000	UnaryOperationExpression	* p		118940	0					
ANR	119001	UnaryOperator	*		118940	0					
ANR	119002	Identifier	p		118940	1					
ANR	119003	PrimaryExpression	' '		118940	1					
ANR	119004	EqualityExpression	* p == '\\\\'		118940	1		==			
ANR	119005	UnaryOperationExpression	* p		118940	0					
ANR	119006	UnaryOperator	*		118940	0					
ANR	119007	Identifier	p		118940	1					
ANR	119008	PrimaryExpression	'\\\\'		118940	1					
ANR	119009	ExpressionStatement	p ++	245:6:5691:5694	118940	1	True				
ANR	119010	PostIncDecOperationExpression	p ++		118940	0					
ANR	119011	Identifier	p		118940	0					
ANR	119012	IncDec	++		118940	1					
ANR	119013	IfStatement	if ( * p == '\\n' || * p == '\\r' )		118940	4					
ANR	119014	Condition	* p == '\\n' || * p == '\\r'	247:9:5706:5729	118940	0	True				
ANR	119015	OrExpression	* p == '\\n' || * p == '\\r'		118940	0		||			
ANR	119016	EqualityExpression	* p == '\\n'		118940	0		==			
ANR	119017	UnaryOperationExpression	* p		118940	0					
ANR	119018	UnaryOperator	*		118940	0					
ANR	119019	Identifier	p		118940	1					
ANR	119020	PrimaryExpression	'\\n'		118940	1					
ANR	119021	EqualityExpression	* p == '\\r'		118940	1		==			
ANR	119022	UnaryOperationExpression	* p		118940	0					
ANR	119023	UnaryOperator	*		118940	0					
ANR	119024	Identifier	p		118940	1					
ANR	119025	PrimaryExpression	'\\r'		118940	1					
ANR	119026	ContinueStatement	continue ;	248:6:5763:5771	118940	1	True				
ANR	119027	SwitchStatement	switch ( state )		118940	5					
ANR	119028	Condition	state	250:13:5787:5791	118940	0	True				
ANR	119029	Identifier	state		118940	0					
ANR	119030	CompoundStatement		21:4:390:390	118940	1					
ANR	119031	Label	case STATE_START :	252:6:5807:5823	118940	0	True				
ANR	119032	Identifier	STATE_START		118940	0					
ANR	119033	CompoundStatement		23:8:424:424	118940	1					
ANR	119034	IfStatement	"if ( memcmp ( p , ""FT_EXPORT("" , 10 ) != 0 )"		118940	0					
ANR	119035	Condition	"memcmp ( p , ""FT_EXPORT("" , 10 ) != 0"	254:15:5850:5883	118940	0	True				
ANR	119036	EqualityExpression	"memcmp ( p , ""FT_EXPORT("" , 10 ) != 0"		118940	0		!=			
ANR	119037	CallExpression	"memcmp ( p , ""FT_EXPORT("" , 10 )"		118940	0					
ANR	119038	Callee	memcmp		118940	0					
ANR	119039	Identifier	memcmp		118940	0					
ANR	119040	ArgumentList	p		118940	1					
ANR	119041	Argument	p		118940	0					
ANR	119042	Identifier	p		118940	0					
ANR	119043	Argument	"""FT_EXPORT("""		118940	1					
ANR	119044	PrimaryExpression	"""FT_EXPORT("""		118940	0					
ANR	119045	Argument	10		118940	2					
ANR	119046	PrimaryExpression	10		118940	0					
ANR	119047	PrimaryExpression	0		118940	1					
ANR	119048	BreakStatement	break ;	255:12:5899:5904	118940	1	True				
ANR	119049	ExpressionStatement	p += 10	257:10:5917:5924	118940	1	True				
ANR	119050	AssignmentExpression	p += 10		118940	0		+=			
ANR	119051	Identifier	p		118940	0					
ANR	119052	PrimaryExpression	10		118940	1					
ANR	119053	ForStatement	for ( ; ; )		118940	2					
ANR	119054	CompoundStatement		29:10:546:546	118940	0					
ANR	119055	IfStatement	if ( * p == 0 || * p == '\\n' || * p == '\\r' )		118940	0					
ANR	119056	Condition	* p == 0 || * p == '\\n' || * p == '\\r'	260:17:5974:6008	118940	0	True				
ANR	119057	OrExpression	* p == 0 || * p == '\\n' || * p == '\\r'		118940	0		||			
ANR	119058	EqualityExpression	* p == 0		118940	0		==			
ANR	119059	UnaryOperationExpression	* p		118940	0					
ANR	119060	UnaryOperator	*		118940	0					
ANR	119061	Identifier	p		118940	1					
ANR	119062	PrimaryExpression	0		118940	1					
ANR	119063	OrExpression	* p == '\\n' || * p == '\\r'		118940	1		||			
ANR	119064	EqualityExpression	* p == '\\n'		118940	0		==			
ANR	119065	UnaryOperationExpression	* p		118940	0					
ANR	119066	UnaryOperator	*		118940	0					
ANR	119067	Identifier	p		118940	1					
ANR	119068	PrimaryExpression	'\\n'		118940	1					
ANR	119069	EqualityExpression	* p == '\\r'		118940	1		==			
ANR	119070	UnaryOperationExpression	* p		118940	0					
ANR	119071	UnaryOperator	*		118940	0					
ANR	119072	Identifier	p		118940	1					
ANR	119073	PrimaryExpression	'\\r'		118940	1					
ANR	119074	GotoStatement	goto NextLine ;	261:14:6026:6039	118940	1	True				
ANR	119075	Identifier	NextLine		118940	0					
ANR	119076	IfStatement	if ( * p == ')' )		118940	1					
ANR	119077	Condition	* p == ')'	263:17:6059:6067	118940	0	True				
ANR	119078	EqualityExpression	* p == ')'		118940	0		==			
ANR	119079	UnaryOperationExpression	* p		118940	0					
ANR	119080	UnaryOperator	*		118940	0					
ANR	119081	Identifier	p		118940	1					
ANR	119082	PrimaryExpression	')'		118940	1					
ANR	119083	CompoundStatement		34:12:674:674	118940	1					
ANR	119084	ExpressionStatement	p ++	265:14:6099:6102	118940	0	True				
ANR	119085	PostIncDecOperationExpression	p ++		118940	0					
ANR	119086	Identifier	p		118940	0					
ANR	119087	IncDec	++		118940	1					
ANR	119088	BreakStatement	break ;	266:14:6118:6123	118940	1	True				
ANR	119089	ExpressionStatement	p ++	269:12:6152:6155	118940	2	True				
ANR	119090	PostIncDecOperationExpression	p ++		118940	0					
ANR	119091	Identifier	p		118940	0					
ANR	119092	IncDec	++		118940	1					
ANR	119093	ExpressionStatement	state = STATE_TYPE	272:10:6180:6198	118940	3	True				
ANR	119094	AssignmentExpression	state = STATE_TYPE		118940	0		=			
ANR	119095	Identifier	state		118940	0					
ANR	119096	Identifier	STATE_TYPE		118940	1					
ANR	119097	WhileStatement	while ( * p == ' ' || * p == '\\t' )		118940	4					
ANR	119098	Condition	* p == ' ' || * p == '\\t'	278:18:6396:6418	118940	0	True				
ANR	119099	OrExpression	* p == ' ' || * p == '\\t'		118940	0		||			
ANR	119100	EqualityExpression	* p == ' '		118940	0		==			
ANR	119101	UnaryOperationExpression	* p		118940	0					
ANR	119102	UnaryOperator	*		118940	0					
ANR	119103	Identifier	p		118940	1					
ANR	119104	PrimaryExpression	' '		118940	1					
ANR	119105	EqualityExpression	* p == '\\t'		118940	1		==			
ANR	119106	UnaryOperationExpression	* p		118940	0					
ANR	119107	UnaryOperator	*		118940	0					
ANR	119108	Identifier	p		118940	1					
ANR	119109	PrimaryExpression	'\\t'		118940	1					
ANR	119110	ExpressionStatement	p ++	279:12:6434:6437	118940	1	True				
ANR	119111	PostIncDecOperationExpression	p ++		118940	0					
ANR	119112	Identifier	p		118940	0					
ANR	119113	IncDec	++		118940	1					
ANR	119114	IfStatement	if ( ! isalpha ( * p ) )		118940	5					
ANR	119115	Condition	! isalpha ( * p )	281:15:6455:6466	118940	0	True				
ANR	119116	UnaryOperationExpression	! isalpha ( * p )		118940	0					
ANR	119117	UnaryOperator	!		118940	0					
ANR	119118	CallExpression	isalpha ( * p )		118940	1					
ANR	119119	Callee	isalpha		118940	0					
ANR	119120	Identifier	isalpha		118940	0					
ANR	119121	ArgumentList	* p		118940	1					
ANR	119122	Argument	* p		118940	0					
ANR	119123	UnaryOperationExpression	* p		118940	0					
ANR	119124	UnaryOperator	*		118940	0					
ANR	119125	Identifier	p		118940	1					
ANR	119126	BreakStatement	break ;	282:12:6482:6487	118940	1	True				
ANR	119127	Label	case STATE_TYPE :	286:6:6533:6548	118940	2	True				
ANR	119128	Identifier	STATE_TYPE		118940	0					
ANR	119129	CompoundStatement		58:10:1161:1177	118940	3					
ANR	119130	IdentifierDeclStatement	char * name = p ;	288:10:6570:6586	118940	0	True				
ANR	119131	IdentifierDecl	* name = p		118940	0					
ANR	119132	IdentifierDeclType	char *		118940	0					
ANR	119133	Identifier	name		118940	1					
ANR	119134	AssignmentExpression	* name = p		118940	2		=			
ANR	119135	Identifier	p		118940	0					
ANR	119136	Identifier	p		118940	1					
ANR	119137	WhileStatement	while ( isalnum ( * p ) || * p == '_' )		118940	1					
ANR	119138	Condition	isalnum ( * p ) || * p == '_'	290:18:6607:6630	118940	0	True				
ANR	119139	OrExpression	isalnum ( * p ) || * p == '_'		118940	0		||			
ANR	119140	CallExpression	isalnum ( * p )		118940	0					
ANR	119141	Callee	isalnum		118940	0					
ANR	119142	Identifier	isalnum		118940	0					
ANR	119143	ArgumentList	* p		118940	1					
ANR	119144	Argument	* p		118940	0					
ANR	119145	UnaryOperationExpression	* p		118940	0					
ANR	119146	UnaryOperator	*		118940	0					
ANR	119147	Identifier	p		118940	1					
ANR	119148	EqualityExpression	* p == '_'		118940	1		==			
ANR	119149	UnaryOperationExpression	* p		118940	0					
ANR	119150	UnaryOperator	*		118940	0					
ANR	119151	Identifier	p		118940	1					
ANR	119152	PrimaryExpression	'_'		118940	1					
ANR	119153	ExpressionStatement	p ++	291:12:6646:6649	118940	1	True				
ANR	119154	PostIncDecOperationExpression	p ++		118940	0					
ANR	119155	Identifier	p		118940	0					
ANR	119156	IncDec	++		118940	1					
ANR	119157	IfStatement	if ( p > name )		118940	2					
ANR	119158	Condition	p > name	293:15:6667:6674	118940	0	True				
ANR	119159	RelationalExpression	p > name		118940	0		>			
ANR	119160	Identifier	p		118940	0					
ANR	119161	Identifier	name		118940	1					
ANR	119162	CompoundStatement		64:10:1279:1279	118940	1					
ANR	119163	IfStatement	if ( verbose )		118940	0					
ANR	119164	Condition	verbose	295:17:6707:6713	118940	0	True				
ANR	119165	Identifier	verbose		118940	0					
ANR	119166	ExpressionStatement	"fprintf ( stderr , "">>> %.*s\\n"" , ( int ) ( p - name ) , name )"	296:14:6731:6785	118940	1	True				
ANR	119167	CallExpression	"fprintf ( stderr , "">>> %.*s\\n"" , ( int ) ( p - name ) , name )"		118940	0					
ANR	119168	Callee	fprintf		118940	0					
ANR	119169	Identifier	fprintf		118940	0					
ANR	119170	ArgumentList	stderr		118940	1					
ANR	119171	Argument	stderr		118940	0					
ANR	119172	Identifier	stderr		118940	0					
ANR	119173	Argument	""">>> %.*s\\n"""		118940	1					
ANR	119174	PrimaryExpression	""">>> %.*s\\n"""		118940	0					
ANR	119175	Argument	( int ) ( p - name )		118940	2					
ANR	119176	CastExpression	( int ) ( p - name )		118940	0					
ANR	119177	CastTarget	int		118940	0					
ANR	119178	AdditiveExpression	p - name		118940	1		-			
ANR	119179	Identifier	p		118940	0					
ANR	119180	Identifier	name		118940	1					
ANR	119181	Argument	name		118940	3					
ANR	119182	Identifier	name		118940	0					
ANR	119183	ExpressionStatement	"names_add ( name , p )"	298:12:6800:6820	118940	1	True				
ANR	119184	CallExpression	"names_add ( name , p )"		118940	0					
ANR	119185	Callee	names_add		118940	0					
ANR	119186	Identifier	names_add		118940	0					
ANR	119187	ArgumentList	name		118940	1					
ANR	119188	Argument	name		118940	0					
ANR	119189	Identifier	name		118940	0					
ANR	119190	Argument	p		118940	1					
ANR	119191	Identifier	p		118940	0					
ANR	119192	ExpressionStatement	state = STATE_START	301:10:6845:6864	118940	3	True				
ANR	119193	AssignmentExpression	state = STATE_START		118940	0		=			
ANR	119194	Identifier	state		118940	0					
ANR	119195	Identifier	STATE_START		118940	1					
ANR	119196	BreakStatement	break ;	303:8:6884:6889	118940	4	True				
ANR	119197	Label	default :	305:6:6898:6905	118940	5	True				
ANR	119198	Identifier	default		118940	0					
ANR	119199	ExpressionStatement		306:8:6915:6915	118940	6	True				
ANR	119200	Label	NextLine :	309:2:6926:6934	118940	6	True				
ANR	119201	Identifier	NextLine		118940	0					
ANR	119202	ExpressionStatement		310:4:6940:6940	118940	7	True				
ANR	119203	ReturnStatement	return 0 ;	313:2:6949:6957	118940	4	True				
ANR	119204	PrimaryExpression	0		118940	0					
ANR	119205	ReturnType	static int		118940	1					
ANR	119206	Identifier	read_header_file		118940	2					
ANR	119207	ParameterList	"FILE * file , int verbose"		118940	3					
ANR	119208	Parameter	FILE * file	230:18:5380:5390	118940	0	True				
ANR	119209	ParameterType	FILE *		118940	0					
ANR	119210	Identifier	file		118940	1					
ANR	119211	Parameter	int verbose	230:31:5393:5404	118940	1	True				
ANR	119212	ParameterType	int		118940	0					
ANR	119213	Identifier	verbose		118940	1					
ANR	119214	CFGEntryNode	ENTRY		118940		True				
ANR	119215	CFGExitNode	EXIT		118940		True				
ANR	119216	InfiniteForNode	true		118940		True				
ANR	119217	Symbol	LINEBUFF_SIZE		118940						
ANR	119218	Symbol	isalpha		118940						
ANR	119219	Symbol	isalnum		118940						
ANR	119220	Symbol	stderr		118940						
ANR	119221	Symbol	fgets		118940						
ANR	119222	Symbol	verbose		118940						
ANR	119223	Symbol	p		118940						
ANR	119224	Symbol	STATE_START		118940						
ANR	119225	Symbol	file		118940						
ANR	119226	Symbol	memcmp		118940						
ANR	119227	Symbol	STATE_TYPE		118940						
ANR	119228	Symbol	name		118940						
ANR	119229	Symbol	feof		118940						
ANR	119230	Symbol	* p		118940						
ANR	119231	Symbol	state		118940						
ANR	119232	Symbol	buff		118940						
ANR	119233	Function	usage	317:0:6963:8101							
ANR	119234	FunctionDef	usage ()		119233	0					
ANR	119235	CompoundStatement		319:0:6989:8101	119233	0					
ANR	119236	Statement	static	320:2:6993:6998	119233	0	True				
ANR	119237	Statement	const	320:9:7000:7004	119233	1	True				
ANR	119238	Statement	char	320:15:7006:7009	119233	2	True				
ANR	119239	Statement	*	320:19:7010:7010	119233	3	True				
ANR	119240	Statement	const	320:21:7012:7016	119233	4	True				
ANR	119241	Statement	format	320:28:7019:7024	119233	5	True				
ANR	119242	Statement	=	320:35:7026:7026	119233	6	True				
ANR	119243	Statement	"""%s %s: extract FreeType API names from header files\\n\\n"""	321:3:7031:7087	119233	7	True				
ANR	119244	Statement	"""this program is used to extract the list of public FreeType API\\n"""	322:3:7092:7158	119233	8	True				
ANR	119245	Statement	"""functions. It receives the list of header files as argument and\\n"""	323:3:7163:7229	119233	9	True				
ANR	119246	Statement	"""generates a sorted list of unique identifiers\\n\\n"""	324:3:7234:7284	119233	10	True				
ANR	119247	Statement	"""usage: %s header1 [options] [header2 ...]\\n\\n"""	326:3:7290:7336	119233	11	True				
ANR	119248	Statement	"""options:   -      : parse the content of stdin, ignore arguments\\n"""	328:3:7342:7409	119233	12	True				
ANR	119249	Statement	"""           -v     : verbose mode, output sent to standard error\\n"""	329:3:7414:7480	119233	13	True				
ANR	119250	Statement	"""           -oFILE : write output to FILE instead of standard output\\n"""	330:3:7485:7555	119233	14	True				
ANR	119251	Statement	"""           -dNAME : indicate DLL file name, 'freetype.dll' by default\\n"""	331:3:7560:7632	119233	15	True				
ANR	119252	Statement	"""           -w     : output .DEF file for Visual C++ and Mingw\\n"""	332:3:7637:7701	119233	16	True				
ANR	119253	Statement	"""           -wB    : output .DEF file for Borland C++\\n"""	333:3:7706:7761	119233	17	True				
ANR	119254	Statement	"""           -wW    : output Watcom Linker Response File\\n"""	334:3:7766:7823	119233	18	True				
ANR	119255	Statement	"""           -wN    : output NetWare Import File\\n"""	335:3:7828:7877	119233	19	True				
ANR	119256	Statement	"""           -wL    : output version map for GNU or Solaris linker\\n"""	336:3:7882:7949	119233	20	True				
ANR	119257	ExpressionStatement	"""\\n"""	337:3:7954:7958	119233	21	True				
ANR	119258	PrimaryExpression	"""\\n"""		119233	0					
ANR	119259	ExpressionStatement	"fprintf ( stderr , format , PROGRAM_NAME , PROGRAM_VERSION , PROGRAM_NAME )"	339:2:7963:8088	119233	22	True				
ANR	119260	CallExpression	"fprintf ( stderr , format , PROGRAM_NAME , PROGRAM_VERSION , PROGRAM_NAME )"		119233	0					
ANR	119261	Callee	fprintf		119233	0					
ANR	119262	Identifier	fprintf		119233	0					
ANR	119263	ArgumentList	stderr		119233	1					
ANR	119264	Argument	stderr		119233	0					
ANR	119265	Identifier	stderr		119233	0					
ANR	119266	Argument	format		119233	1					
ANR	119267	Identifier	format		119233	0					
ANR	119268	Argument	PROGRAM_NAME		119233	2					
ANR	119269	Identifier	PROGRAM_NAME		119233	0					
ANR	119270	Argument	PROGRAM_VERSION		119233	3					
ANR	119271	Identifier	PROGRAM_VERSION		119233	0					
ANR	119272	Argument	PROGRAM_NAME		119233	4					
ANR	119273	Identifier	PROGRAM_NAME		119233	0					
ANR	119274	ExpressionStatement	exit ( 1 )	345:2:8092:8099	119233	23	True				
ANR	119275	CallExpression	exit ( 1 )		119233	0					
ANR	119276	Callee	exit		119233	0					
ANR	119277	Identifier	exit		119233	0					
ANR	119278	ArgumentList	1		119233	1					
ANR	119279	Argument	1		119233	0					
ANR	119280	PrimaryExpression	1		119233	0					
ANR	119281	ReturnType	static void		119233	1					
ANR	119282	Identifier	usage		119233	2					
ANR	119283	ParameterList			119233	3					
ANR	119284	CFGEntryNode	ENTRY		119233		True				
ANR	119285	CFGExitNode	EXIT		119233		True				
ANR	119286	Symbol	PROGRAM_VERSION		119233						
ANR	119287	Symbol	PROGRAM_NAME		119233						
ANR	119288	Symbol	format		119233						
ANR	119289	Symbol	stderr		119233						
ANR	119290	DeclStmt									
ANR	119291	Decl							int	int	from_stdin
ANR	119292	DeclStmt									
ANR	119293	Decl							int	int	verbose
ANR	119294	DeclStmt									
ANR	119295	Decl							OutputFormat	OutputFormat	format
ANR	119296	DeclStmt									
ANR	119297	Decl							FILE	FILE *	out
ANR	119298	DeclStmt									
ANR	119299	Decl							const char	const char *	library_name
ANR	119300	DeclStmt									
ANR	119301	Decl							const char	const char *	arg
ANR	119302	DeclStmt									
ANR	119303	Decl							FILE	FILE *	file
