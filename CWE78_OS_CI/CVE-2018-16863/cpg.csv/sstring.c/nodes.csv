command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	9560247	File	data/converged/CVE-2018-16863_ghostpdl/sstring.c								
ANR	9560248	Function	s_AXE_init	30:0:861:997							
ANR	9560249	FunctionDef	s_AXE_init (stream_state * st)		9560248	0					
ANR	9560250	CompoundStatement		32:0:902:997	9560248	0					
ANR	9560251	Statement	stream_AXE_state	33:4:908:923	9560248	0	True				
ANR	9560252	Statement	*	33:21:925:925	9560248	1	True				
ANR	9560253	Statement	const	33:22:926:930	9560248	2	True				
ANR	9560254	ExpressionStatement	ss = ( stream_AXE_state * ) st	33:28:932:960	9560248	3	True				
ANR	9560255	AssignmentExpression	ss = ( stream_AXE_state * ) st		9560248	0		=			
ANR	9560256	Identifier	ss		9560248	0					
ANR	9560257	CastExpression	( stream_AXE_state * ) st		9560248	1					
ANR	9560258	CastTarget	stream_AXE_state *		9560248	0					
ANR	9560259	Identifier	st		9560248	1					
ANR	9560260	ReturnStatement	return s_AXE_init_inline ( ss ) ;	35:4:967:995	9560248	4	True				
ANR	9560261	CallExpression	s_AXE_init_inline ( ss )		9560248	0					
ANR	9560262	Callee	s_AXE_init_inline		9560248	0					
ANR	9560263	Identifier	s_AXE_init_inline		9560248	0					
ANR	9560264	ArgumentList	ss		9560248	1					
ANR	9560265	Argument	ss		9560248	0					
ANR	9560266	Identifier	ss		9560248	0					
ANR	9560267	ReturnType	static int		9560248	1					
ANR	9560268	Identifier	s_AXE_init		9560248	2					
ANR	9560269	ParameterList	stream_state * st		9560248	3					
ANR	9560270	Parameter	stream_state * st	31:11:883:899	9560248	0	True				
ANR	9560271	ParameterType	stream_state *		9560248	0					
ANR	9560272	Identifier	st		9560248	1					
ANR	9560273	CFGEntryNode	ENTRY		9560248		True				
ANR	9560274	CFGExitNode	EXIT		9560248		True				
ANR	9560275	Symbol	ss		9560248						
ANR	9560276	Symbol	st		9560248						
ANR	9560277	Symbol	s_AXE_init_inline		9560248						
ANR	9560278	Function	s_AXE_process	39:0:1023:2008							
ANR	9560279	FunctionDef	"s_AXE_process (stream_state * st , stream_cursor_read * pr , stream_cursor_write * pw , bool last)"		9560278	0					
ANR	9560280	CompoundStatement		42:0:1143:2008	9560278	0					
ANR	9560281	Statement	stream_AXE_state	43:4:1149:1164	9560278	0	True				
ANR	9560282	Statement	*	43:21:1166:1166	9560278	1	True				
ANR	9560283	Statement	const	43:22:1167:1171	9560278	2	True				
ANR	9560284	ExpressionStatement	ss = ( stream_AXE_state * ) st	43:28:1173:1201	9560278	3	True				
ANR	9560285	AssignmentExpression	ss = ( stream_AXE_state * ) st		9560278	0		=			
ANR	9560286	Identifier	ss		9560278	0					
ANR	9560287	CastExpression	( stream_AXE_state * ) st		9560278	1					
ANR	9560288	CastTarget	stream_AXE_state *		9560278	0					
ANR	9560289	Identifier	st		9560278	1					
ANR	9560290	IdentifierDeclStatement	const byte * p = pr -> ptr ;	44:4:1207:1230	9560278	4	True				
ANR	9560291	IdentifierDecl	* p = pr -> ptr		9560278	0					
ANR	9560292	IdentifierDeclType	const byte *		9560278	0					
ANR	9560293	Identifier	p		9560278	1					
ANR	9560294	AssignmentExpression	* p = pr -> ptr		9560278	2		=			
ANR	9560295	Identifier	p		9560278	0					
ANR	9560296	PtrMemberAccess	pr -> ptr		9560278	1					
ANR	9560297	Identifier	pr		9560278	0					
ANR	9560298	Identifier	ptr		9560278	1					
ANR	9560299	IdentifierDeclStatement	byte * q = pw -> ptr ;	45:4:1236:1253	9560278	5	True				
ANR	9560300	IdentifierDecl	* q = pw -> ptr		9560278	0					
ANR	9560301	IdentifierDeclType	byte *		9560278	0					
ANR	9560302	Identifier	q		9560278	1					
ANR	9560303	AssignmentExpression	* q = pw -> ptr		9560278	2		=			
ANR	9560304	Identifier	q		9560278	0					
ANR	9560305	PtrMemberAccess	pw -> ptr		9560278	1					
ANR	9560306	Identifier	pw		9560278	0					
ANR	9560307	Identifier	ptr		9560278	1					
ANR	9560308	IdentifierDeclStatement	int rcount = pr -> limit - p ;	46:4:1259:1285	9560278	6	True				
ANR	9560309	IdentifierDecl	rcount = pr -> limit - p		9560278	0					
ANR	9560310	IdentifierDeclType	int		9560278	0					
ANR	9560311	Identifier	rcount		9560278	1					
ANR	9560312	AssignmentExpression	rcount = pr -> limit - p		9560278	2		=			
ANR	9560313	Identifier	rcount		9560278	0					
ANR	9560314	AdditiveExpression	pr -> limit - p		9560278	1		-			
ANR	9560315	PtrMemberAccess	pr -> limit		9560278	0					
ANR	9560316	Identifier	pr		9560278	0					
ANR	9560317	Identifier	limit		9560278	1					
ANR	9560318	Identifier	p		9560278	1					
ANR	9560319	IdentifierDeclStatement	int wcount = pw -> limit - q ;	47:4:1291:1317	9560278	7	True				
ANR	9560320	IdentifierDecl	wcount = pw -> limit - q		9560278	0					
ANR	9560321	IdentifierDeclType	int		9560278	0					
ANR	9560322	Identifier	wcount		9560278	1					
ANR	9560323	AssignmentExpression	wcount = pw -> limit - q		9560278	2		=			
ANR	9560324	Identifier	wcount		9560278	0					
ANR	9560325	AdditiveExpression	pw -> limit - q		9560278	1		-			
ANR	9560326	PtrMemberAccess	pw -> limit		9560278	0					
ANR	9560327	Identifier	pw		9560278	0					
ANR	9560328	Identifier	limit		9560278	1					
ANR	9560329	Identifier	q		9560278	1					
ANR	9560330	IdentifierDeclStatement	int count ;	48:4:1323:1332	9560278	8	True				
ANR	9560331	IdentifierDecl	count		9560278	0					
ANR	9560332	IdentifierDeclType	int		9560278	0					
ANR	9560333	Identifier	count		9560278	1					
ANR	9560334	IdentifierDeclStatement	int pos = ss -> count ;	49:4:1338:1357	9560278	9	True				
ANR	9560335	IdentifierDecl	pos = ss -> count		9560278	0					
ANR	9560336	IdentifierDeclType	int		9560278	0					
ANR	9560337	Identifier	pos		9560278	1					
ANR	9560338	AssignmentExpression	pos = ss -> count		9560278	2		=			
ANR	9560339	Identifier	pos		9560278	0					
ANR	9560340	PtrMemberAccess	ss -> count		9560278	1					
ANR	9560341	Identifier	ss		9560278	0					
ANR	9560342	Identifier	count		9560278	1					
ANR	9560343	IdentifierDeclStatement	"const char * hex_digits = ""0123456789ABCDEF"" ;"	50:4:1363:1406	9560278	10	True				
ANR	9560344	IdentifierDecl	"* hex_digits = ""0123456789ABCDEF"""		9560278	0					
ANR	9560345	IdentifierDeclType	const char *		9560278	0					
ANR	9560346	Identifier	hex_digits		9560278	1					
ANR	9560347	AssignmentExpression	"* hex_digits = ""0123456789ABCDEF"""		9560278	2		=			
ANR	9560348	Identifier	hex_digits		9560278	0					
ANR	9560349	PrimaryExpression	"""0123456789ABCDEF"""		9560278	1					
ANR	9560350	IdentifierDeclStatement	int status = 0 ;	51:4:1412:1426	9560278	11	True				
ANR	9560351	IdentifierDecl	status = 0		9560278	0					
ANR	9560352	IdentifierDeclType	int		9560278	0					
ANR	9560353	Identifier	status		9560278	1					
ANR	9560354	AssignmentExpression	status = 0		9560278	2		=			
ANR	9560355	Identifier	status		9560278	0					
ANR	9560356	PrimaryExpression	0		9560278	1					
ANR	9560357	IfStatement	if ( last && ss -> EndOfData )		9560278	12					
ANR	9560358	Condition	last && ss -> EndOfData	53:8:1437:1457	9560278	0	True				
ANR	9560359	AndExpression	last && ss -> EndOfData		9560278	0		&&			
ANR	9560360	Identifier	last		9560278	0					
ANR	9560361	PtrMemberAccess	ss -> EndOfData		9560278	1					
ANR	9560362	Identifier	ss		9560278	0					
ANR	9560363	Identifier	EndOfData		9560278	1					
ANR	9560364	ExpressionStatement	wcount --	54:8:1468:1476	9560278	1	True				
ANR	9560365	PostIncDecOperationExpression	wcount --		9560278	0					
ANR	9560366	Identifier	wcount		9560278	0					
ANR	9560367	IncDec	--		9560278	1					
ANR	9560368	ExpressionStatement	wcount -= ( wcount + pos * 2 ) / 65	55:4:1508:1541	9560278	13	True				
ANR	9560369	AssignmentExpression	wcount -= ( wcount + pos * 2 ) / 65		9560278	0		-=			
ANR	9560370	Identifier	wcount		9560278	0					
ANR	9560371	MultiplicativeExpression	( wcount + pos * 2 ) / 65		9560278	1		/			
ANR	9560372	AdditiveExpression	wcount + pos * 2		9560278	0		+			
ANR	9560373	Identifier	wcount		9560278	0					
ANR	9560374	MultiplicativeExpression	pos * 2		9560278	1		*			
ANR	9560375	Identifier	pos		9560278	0					
ANR	9560376	PrimaryExpression	2		9560278	1					
ANR	9560377	PrimaryExpression	65		9560278	1					
ANR	9560378	ExpressionStatement	wcount >>= 1	56:4:1571:1583	9560278	14	True				
ANR	9560379	AssignmentExpression	wcount >>= 1		9560278	0		>>=			
ANR	9560380	Identifier	wcount		9560278	0					
ANR	9560381	PrimaryExpression	1		9560278	1					
ANR	9560382	ExpressionStatement	"count = ( wcount < rcount ? ( status = 1 , wcount ) : rcount )"	57:4:1619:1676	9560278	15	True				
ANR	9560383	AssignmentExpression	"count = ( wcount < rcount ? ( status = 1 , wcount ) : rcount )"		9560278	0		=			
ANR	9560384	Identifier	count		9560278	0					
ANR	9560385	ConditionalExpression	"wcount < rcount ? ( status = 1 , wcount ) : rcount"		9560278	1					
ANR	9560386	Condition	wcount < rcount		9560278	0					
ANR	9560387	RelationalExpression	wcount < rcount		9560278	0		<			
ANR	9560388	Identifier	wcount		9560278	0					
ANR	9560389	Identifier	rcount		9560278	1					
ANR	9560390	Expression	"status = 1 , wcount"		9560278	1					
ANR	9560391	AssignmentExpression	status = 1		9560278	0		=			
ANR	9560392	Identifier	status		9560278	0					
ANR	9560393	PrimaryExpression	1		9560278	1					
ANR	9560394	Identifier	wcount		9560278	1					
ANR	9560395	Identifier	rcount		9560278	2					
ANR	9560396	WhileStatement	while ( -- count >= 0 )		9560278	16					
ANR	9560397	Condition	-- count >= 0	58:11:1689:1700	9560278	0	True				
ANR	9560398	RelationalExpression	-- count >= 0		9560278	0		>=			
ANR	9560399	UnaryExpression	-- count		9560278	0					
ANR	9560400	IncDec	--		9560278	0					
ANR	9560401	Identifier	count		9560278	1					
ANR	9560402	PrimaryExpression	0		9560278	1					
ANR	9560403	CompoundStatement		17:25:559:559	9560278	1					
ANR	9560404	ExpressionStatement	* ++ q = hex_digits [ * ++ p >> 4 ]	59:8:1713:1741	9560278	0	True				
ANR	9560405	AssignmentExpression	* ++ q = hex_digits [ * ++ p >> 4 ]		9560278	0		=			
ANR	9560406	UnaryOperationExpression	* ++ q		9560278	0					
ANR	9560407	UnaryOperator	*		9560278	0					
ANR	9560408	UnaryExpression	++ q		9560278	1					
ANR	9560409	IncDec	++		9560278	0					
ANR	9560410	Identifier	q		9560278	1					
ANR	9560411	ArrayIndexing	hex_digits [ * ++ p >> 4 ]		9560278	1					
ANR	9560412	Identifier	hex_digits		9560278	0					
ANR	9560413	ShiftExpression	* ++ p >> 4		9560278	1		>>			
ANR	9560414	UnaryOperationExpression	* ++ p		9560278	0					
ANR	9560415	UnaryOperator	*		9560278	0					
ANR	9560416	UnaryExpression	++ p		9560278	1					
ANR	9560417	IncDec	++		9560278	0					
ANR	9560418	Identifier	p		9560278	1					
ANR	9560419	PrimaryExpression	4		9560278	1					
ANR	9560420	ExpressionStatement	* ++ q = hex_digits [ * p & 0xf ]	60:8:1751:1778	9560278	1	True				
ANR	9560421	AssignmentExpression	* ++ q = hex_digits [ * p & 0xf ]		9560278	0		=			
ANR	9560422	UnaryOperationExpression	* ++ q		9560278	0					
ANR	9560423	UnaryOperator	*		9560278	0					
ANR	9560424	UnaryExpression	++ q		9560278	1					
ANR	9560425	IncDec	++		9560278	0					
ANR	9560426	Identifier	q		9560278	1					
ANR	9560427	ArrayIndexing	hex_digits [ * p & 0xf ]		9560278	1					
ANR	9560428	Identifier	hex_digits		9560278	0					
ANR	9560429	BitAndExpression	* p & 0xf		9560278	1		&			
ANR	9560430	UnaryOperationExpression	* p		9560278	0					
ANR	9560431	UnaryOperator	*		9560278	0					
ANR	9560432	Identifier	p		9560278	1					
ANR	9560433	PrimaryExpression	0xf		9560278	1					
ANR	9560434	IfStatement	if ( ! ( ++ pos & 31 ) && ( count != 0 || ! last ) )		9560278	2					
ANR	9560435	Condition	! ( ++ pos & 31 ) && ( count != 0 || ! last )	61:12:1792:1829	9560278	0	True				
ANR	9560436	AndExpression	! ( ++ pos & 31 ) && ( count != 0 || ! last )		9560278	0		&&			
ANR	9560437	UnaryOperationExpression	! ( ++ pos & 31 )		9560278	0					
ANR	9560438	UnaryOperator	!		9560278	0					
ANR	9560439	BitAndExpression	++ pos & 31		9560278	1		&			
ANR	9560440	UnaryExpression	++ pos		9560278	0					
ANR	9560441	IncDec	++		9560278	0					
ANR	9560442	Identifier	pos		9560278	1					
ANR	9560443	PrimaryExpression	31		9560278	1					
ANR	9560444	OrExpression	count != 0 || ! last		9560278	1		||			
ANR	9560445	EqualityExpression	count != 0		9560278	0		!=			
ANR	9560446	Identifier	count		9560278	0					
ANR	9560447	PrimaryExpression	0		9560278	1					
ANR	9560448	UnaryOperationExpression	! last		9560278	1					
ANR	9560449	UnaryOperator	!		9560278	0					
ANR	9560450	Identifier	last		9560278	1					
ANR	9560451	ExpressionStatement	* ++ q = '\\n'	62:12:1844:1855	9560278	1	True				
ANR	9560452	AssignmentExpression	* ++ q = '\\n'		9560278	0		=			
ANR	9560453	UnaryOperationExpression	* ++ q		9560278	0					
ANR	9560454	UnaryOperator	*		9560278	0					
ANR	9560455	UnaryExpression	++ q		9560278	1					
ANR	9560456	IncDec	++		9560278	0					
ANR	9560457	Identifier	q		9560278	1					
ANR	9560458	PrimaryExpression	'\\n'		9560278	1					
ANR	9560459	IfStatement	if ( last && status == 0 && ss -> EndOfData )		9560278	17					
ANR	9560460	Condition	last && status == 0 && ss -> EndOfData	64:8:1871:1906	9560278	0	True				
ANR	9560461	AndExpression	last && status == 0 && ss -> EndOfData		9560278	0		&&			
ANR	9560462	Identifier	last		9560278	0					
ANR	9560463	AndExpression	status == 0 && ss -> EndOfData		9560278	1		&&			
ANR	9560464	EqualityExpression	status == 0		9560278	0		==			
ANR	9560465	Identifier	status		9560278	0					
ANR	9560466	PrimaryExpression	0		9560278	1					
ANR	9560467	PtrMemberAccess	ss -> EndOfData		9560278	1					
ANR	9560468	Identifier	ss		9560278	0					
ANR	9560469	Identifier	EndOfData		9560278	1					
ANR	9560470	ExpressionStatement	* ++ q = '>'	65:8:1917:1927	9560278	1	True				
ANR	9560471	AssignmentExpression	* ++ q = '>'		9560278	0		=			
ANR	9560472	UnaryOperationExpression	* ++ q		9560278	0					
ANR	9560473	UnaryOperator	*		9560278	0					
ANR	9560474	UnaryExpression	++ q		9560278	1					
ANR	9560475	IncDec	++		9560278	0					
ANR	9560476	Identifier	q		9560278	1					
ANR	9560477	PrimaryExpression	'>'		9560278	1					
ANR	9560478	ExpressionStatement	pr -> ptr = p	66:4:1933:1944	9560278	18	True				
ANR	9560479	AssignmentExpression	pr -> ptr = p		9560278	0		=			
ANR	9560480	PtrMemberAccess	pr -> ptr		9560278	0					
ANR	9560481	Identifier	pr		9560278	0					
ANR	9560482	Identifier	ptr		9560278	1					
ANR	9560483	Identifier	p		9560278	1					
ANR	9560484	ExpressionStatement	pw -> ptr = q	67:4:1950:1961	9560278	19	True				
ANR	9560485	AssignmentExpression	pw -> ptr = q		9560278	0		=			
ANR	9560486	PtrMemberAccess	pw -> ptr		9560278	0					
ANR	9560487	Identifier	pw		9560278	0					
ANR	9560488	Identifier	ptr		9560278	1					
ANR	9560489	Identifier	q		9560278	1					
ANR	9560490	ExpressionStatement	ss -> count = pos & 31	68:4:1967:1987	9560278	20	True				
ANR	9560491	AssignmentExpression	ss -> count = pos & 31		9560278	0		=			
ANR	9560492	PtrMemberAccess	ss -> count		9560278	0					
ANR	9560493	Identifier	ss		9560278	0					
ANR	9560494	Identifier	count		9560278	1					
ANR	9560495	BitAndExpression	pos & 31		9560278	1		&			
ANR	9560496	Identifier	pos		9560278	0					
ANR	9560497	PrimaryExpression	31		9560278	1					
ANR	9560498	ReturnStatement	return status ;	69:4:1993:2006	9560278	21	True				
ANR	9560499	Identifier	status		9560278	0					
ANR	9560500	ReturnType	static int		9560278	1					
ANR	9560501	Identifier	s_AXE_process		9560278	2					
ANR	9560502	ParameterList	"stream_state * st , stream_cursor_read * pr , stream_cursor_write * pw , bool last"		9560278	3					
ANR	9560503	Parameter	stream_state * st	40:14:1048:1064	9560278	0	True				
ANR	9560504	ParameterType	stream_state *		9560278	0					
ANR	9560505	Identifier	st		9560278	1					
ANR	9560506	Parameter	stream_cursor_read * pr	40:33:1067:1089	9560278	1	True				
ANR	9560507	ParameterType	stream_cursor_read *		9560278	0					
ANR	9560508	Identifier	pr		9560278	1					
ANR	9560509	Parameter	stream_cursor_write * pw	41:14:1106:1129	9560278	2	True				
ANR	9560510	ParameterType	stream_cursor_write *		9560278	0					
ANR	9560511	Identifier	pw		9560278	1					
ANR	9560512	Parameter	bool last	41:40:1132:1140	9560278	3	True				
ANR	9560513	ParameterType	bool		9560278	0					
ANR	9560514	Identifier	last		9560278	1					
ANR	9560515	CFGEntryNode	ENTRY		9560278		True				
ANR	9560516	CFGExitNode	EXIT		9560278		True				
ANR	9560517	Symbol	wcount		9560278						
ANR	9560518	Symbol	ss -> EndOfData		9560278						
ANR	9560519	Symbol	ss -> count		9560278						
ANR	9560520	Symbol	pr		9560278						
ANR	9560521	Symbol	* ss		9560278						
ANR	9560522	Symbol	pw		9560278						
ANR	9560523	Symbol	pr -> limit		9560278						
ANR	9560524	Symbol	pw -> limit		9560278						
ANR	9560525	Symbol	pos		9560278						
ANR	9560526	Symbol	* * p		9560278						
ANR	9560527	Symbol	pr -> ptr		9560278						
ANR	9560528	Symbol	pw -> ptr		9560278						
ANR	9560529	Symbol	ss		9560278						
ANR	9560530	Symbol	st		9560278						
ANR	9560531	Symbol	last		9560278						
ANR	9560532	Symbol	* ++ p		9560278						
ANR	9560533	Symbol	hex_digits		9560278						
ANR	9560534	Symbol	* ++ q		9560278						
ANR	9560535	Symbol	* * ++ p		9560278						
ANR	9560536	Symbol	count		9560278						
ANR	9560537	Symbol	* hex_digits		9560278						
ANR	9560538	Symbol	* pr		9560278						
ANR	9560539	Symbol	* pw		9560278						
ANR	9560540	Symbol	p		9560278						
ANR	9560541	Symbol	q		9560278						
ANR	9560542	Symbol	rcount		9560278						
ANR	9560543	Symbol	* p		9560278						
ANR	9560544	Symbol	* q		9560278						
ANR	9560545	Symbol	status		9560278						
ANR	9560546	DeclStmt									
ANR	9560547	Decl							const stream_template	const stream_template	s_AXE_template
ANR	9560548	Function	s_AXD_init	82:0:2212:2348							
ANR	9560549	FunctionDef	s_AXD_init (stream_state * st)		9560548	0					
ANR	9560550	CompoundStatement		84:0:2253:2348	9560548	0					
ANR	9560551	Statement	stream_AXD_state	85:4:2259:2274	9560548	0	True				
ANR	9560552	Statement	*	85:21:2276:2276	9560548	1	True				
ANR	9560553	Statement	const	85:22:2277:2281	9560548	2	True				
ANR	9560554	ExpressionStatement	ss = ( stream_AXD_state * ) st	85:28:2283:2311	9560548	3	True				
ANR	9560555	AssignmentExpression	ss = ( stream_AXD_state * ) st		9560548	0		=			
ANR	9560556	Identifier	ss		9560548	0					
ANR	9560557	CastExpression	( stream_AXD_state * ) st		9560548	1					
ANR	9560558	CastTarget	stream_AXD_state *		9560548	0					
ANR	9560559	Identifier	st		9560548	1					
ANR	9560560	ReturnStatement	return s_AXD_init_inline ( ss ) ;	87:4:2318:2346	9560548	4	True				
ANR	9560561	CallExpression	s_AXD_init_inline ( ss )		9560548	0					
ANR	9560562	Callee	s_AXD_init_inline		9560548	0					
ANR	9560563	Identifier	s_AXD_init_inline		9560548	0					
ANR	9560564	ArgumentList	ss		9560548	1					
ANR	9560565	Argument	ss		9560548	0					
ANR	9560566	Identifier	ss		9560548	0					
ANR	9560567	ReturnType	static int		9560548	1					
ANR	9560568	Identifier	s_AXD_init		9560548	2					
ANR	9560569	ParameterList	stream_state * st		9560548	3					
ANR	9560570	Parameter	stream_state * st	83:11:2234:2250	9560548	0	True				
ANR	9560571	ParameterType	stream_state *		9560548	0					
ANR	9560572	Identifier	st		9560548	1					
ANR	9560573	CFGEntryNode	ENTRY		9560548		True				
ANR	9560574	CFGExitNode	EXIT		9560548		True				
ANR	9560575	Symbol	ss		9560548						
ANR	9560576	Symbol	st		9560548						
ANR	9560577	Symbol	s_AXD_init_inline		9560548						
ANR	9560578	Function	s_AXD_process	91:0:2374:3886							
ANR	9560579	FunctionDef	"s_AXD_process (stream_state * st , stream_cursor_read * pr , stream_cursor_write * pw , bool last)"		9560578	0					
ANR	9560580	CompoundStatement		94:0:2494:3886	9560578	0					
ANR	9560581	Statement	stream_AXD_state	95:4:2500:2515	9560578	0	True				
ANR	9560582	Statement	*	95:21:2517:2517	9560578	1	True				
ANR	9560583	Statement	const	95:22:2518:2522	9560578	2	True				
ANR	9560584	ExpressionStatement	ss = ( stream_AXD_state * ) st	95:28:2524:2552	9560578	3	True				
ANR	9560585	AssignmentExpression	ss = ( stream_AXD_state * ) st		9560578	0		=			
ANR	9560586	Identifier	ss		9560578	0					
ANR	9560587	CastExpression	( stream_AXD_state * ) st		9560578	1					
ANR	9560588	CastTarget	stream_AXD_state *		9560578	0					
ANR	9560589	Identifier	st		9560578	1					
ANR	9560590	IdentifierDeclStatement	"int code = s_hex_process ( pr , pw , & ss -> odd , hex_ignore_whitespace ) ;"	96:4:2558:2623	9560578	4	True				
ANR	9560591	IdentifierDecl	"code = s_hex_process ( pr , pw , & ss -> odd , hex_ignore_whitespace )"		9560578	0					
ANR	9560592	IdentifierDeclType	int		9560578	0					
ANR	9560593	Identifier	code		9560578	1					
ANR	9560594	AssignmentExpression	"code = s_hex_process ( pr , pw , & ss -> odd , hex_ignore_whitespace )"		9560578	2		=			
ANR	9560595	Identifier	code		9560578	0					
ANR	9560596	CallExpression	"s_hex_process ( pr , pw , & ss -> odd , hex_ignore_whitespace )"		9560578	1					
ANR	9560597	Callee	s_hex_process		9560578	0					
ANR	9560598	Identifier	s_hex_process		9560578	0					
ANR	9560599	ArgumentList	pr		9560578	1					
ANR	9560600	Argument	pr		9560578	0					
ANR	9560601	Identifier	pr		9560578	0					
ANR	9560602	Argument	pw		9560578	1					
ANR	9560603	Identifier	pw		9560578	0					
ANR	9560604	Argument	& ss -> odd		9560578	2					
ANR	9560605	UnaryOperationExpression	& ss -> odd		9560578	0					
ANR	9560606	UnaryOperator	&		9560578	0					
ANR	9560607	PtrMemberAccess	ss -> odd		9560578	1					
ANR	9560608	Identifier	ss		9560578	0					
ANR	9560609	Identifier	odd		9560578	1					
ANR	9560610	Argument	hex_ignore_whitespace		9560578	3					
ANR	9560611	Identifier	hex_ignore_whitespace		9560578	0					
ANR	9560612	SwitchStatement	switch ( code )		9560578	5					
ANR	9560613	Condition	code	98:12:2638:2641	9560578	0	True				
ANR	9560614	Identifier	code		9560578	0					
ANR	9560615	CompoundStatement		5:18:149:149	9560578	1					
ANR	9560616	Label	case 0 :	99:8:2654:2660	9560578	0	True				
ANR	9560617	IfStatement	if ( ss -> odd >= 0 && last )		9560578	1					
ANR	9560618	Condition	ss -> odd >= 0 && last	100:16:2678:2697	9560578	0	True				
ANR	9560619	AndExpression	ss -> odd >= 0 && last		9560578	0		&&			
ANR	9560620	RelationalExpression	ss -> odd >= 0		9560578	0		>=			
ANR	9560621	PtrMemberAccess	ss -> odd		9560578	0					
ANR	9560622	Identifier	ss		9560578	0					
ANR	9560623	Identifier	odd		9560578	1					
ANR	9560624	PrimaryExpression	0		9560578	1					
ANR	9560625	Identifier	last		9560578	1					
ANR	9560626	CompoundStatement		7:38:205:205	9560578	1					
ANR	9560627	IfStatement	if ( pw -> ptr == pw -> limit )		9560578	0					
ANR	9560628	Condition	pw -> ptr == pw -> limit	101:20:2722:2741	9560578	0	True				
ANR	9560629	EqualityExpression	pw -> ptr == pw -> limit		9560578	0		==			
ANR	9560630	PtrMemberAccess	pw -> ptr		9560578	0					
ANR	9560631	Identifier	pw		9560578	0					
ANR	9560632	Identifier	ptr		9560578	1					
ANR	9560633	PtrMemberAccess	pw -> limit		9560578	1					
ANR	9560634	Identifier	pw		9560578	0					
ANR	9560635	Identifier	limit		9560578	1					
ANR	9560636	ReturnStatement	return 1 ;	102:20:2764:2772	9560578	1	True				
ANR	9560637	PrimaryExpression	1		9560578	0					
ANR	9560638	ExpressionStatement	* ++ ( pw -> ptr ) = ss -> odd << 4	103:16:2790:2817	9560578	1	True				
ANR	9560639	AssignmentExpression	* ++ ( pw -> ptr ) = ss -> odd << 4		9560578	0		=			
ANR	9560640	UnaryOperationExpression	* ++ ( pw -> ptr )		9560578	0					
ANR	9560641	UnaryOperator	*		9560578	0					
ANR	9560642	UnaryExpression	++ ( pw -> ptr )		9560578	1					
ANR	9560643	IncDec	++		9560578	0					
ANR	9560644	PtrMemberAccess	pw -> ptr		9560578	1					
ANR	9560645	Identifier	pw		9560578	0					
ANR	9560646	Identifier	ptr		9560578	1					
ANR	9560647	ShiftExpression	ss -> odd << 4		9560578	1		<<			
ANR	9560648	PtrMemberAccess	ss -> odd		9560578	0					
ANR	9560649	Identifier	ss		9560578	0					
ANR	9560650	Identifier	odd		9560578	1					
ANR	9560651	PrimaryExpression	4		9560578	1					
ANR	9560652	Label	case 1 :	106:8:2873:2879	9560578	2	True				
ANR	9560653	ForStatement	for ( ; pr -> ptr < pr -> limit ; pr -> ptr ++ )		9560578	3					
ANR	9560654	Condition	pr -> ptr < pr -> limit	108:19:2965:2983	9560578	0	True				
ANR	9560655	RelationalExpression	pr -> ptr < pr -> limit		9560578	0		<			
ANR	9560656	PtrMemberAccess	pr -> ptr		9560578	0					
ANR	9560657	Identifier	pr		9560578	0					
ANR	9560658	Identifier	ptr		9560578	1					
ANR	9560659	PtrMemberAccess	pr -> limit		9560578	1					
ANR	9560660	Identifier	pr		9560578	0					
ANR	9560661	Identifier	limit		9560578	1					
ANR	9560662	PostIncDecOperationExpression	pr -> ptr ++	108:40:2986:2994	9560578	1	True				
ANR	9560663	PtrMemberAccess	pr -> ptr		9560578	0					
ANR	9560664	Identifier	pr		9560578	0					
ANR	9560665	Identifier	ptr		9560578	1					
ANR	9560666	IncDec	++		9560578	1					
ANR	9560667	IfStatement	if ( scan_char_decoder [ pr -> ptr [ 1 ] ] != ctype_space )		9560578	2					
ANR	9560668	Condition	scan_char_decoder [ pr -> ptr [ 1 ] ] != ctype_space	109:20:3017:3060	9560578	0	True				
ANR	9560669	EqualityExpression	scan_char_decoder [ pr -> ptr [ 1 ] ] != ctype_space		9560578	0		!=			
ANR	9560670	ArrayIndexing	scan_char_decoder [ pr -> ptr [ 1 ] ]		9560578	0					
ANR	9560671	Identifier	scan_char_decoder		9560578	0					
ANR	9560672	ArrayIndexing	pr -> ptr [ 1 ]		9560578	1					
ANR	9560673	PtrMemberAccess	pr -> ptr		9560578	0					
ANR	9560674	Identifier	pr		9560578	0					
ANR	9560675	Identifier	ptr		9560578	1					
ANR	9560676	PrimaryExpression	1		9560578	1					
ANR	9560677	Identifier	ctype_space		9560578	1					
ANR	9560678	CompoundStatement		16:66:568:568	9560578	1					
ANR	9560679	IfStatement	if ( pr -> ptr [ 1 ] == '>' )		9560578	0					
ANR	9560680	Condition	pr -> ptr [ 1 ] == '>'	110:24:3089:3105	9560578	0	True				
ANR	9560681	EqualityExpression	pr -> ptr [ 1 ] == '>'		9560578	0		==			
ANR	9560682	ArrayIndexing	pr -> ptr [ 1 ]		9560578	0					
ANR	9560683	PtrMemberAccess	pr -> ptr		9560578	0					
ANR	9560684	Identifier	pr		9560578	0					
ANR	9560685	Identifier	ptr		9560578	1					
ANR	9560686	PrimaryExpression	1		9560578	1					
ANR	9560687	PrimaryExpression	'>'		9560578	1					
ANR	9560688	CompoundStatement		17:43:613:613	9560578	1					
ANR	9560689	ExpressionStatement	pr -> ptr ++	111:24:3134:3143	9560578	0	True				
ANR	9560690	PostIncDecOperationExpression	pr -> ptr ++		9560578	0					
ANR	9560691	PtrMemberAccess	pr -> ptr		9560578	0					
ANR	9560692	Identifier	pr		9560578	0					
ANR	9560693	Identifier	ptr		9560578	1					
ANR	9560694	IncDec	++		9560578	1					
ANR	9560695	GotoStatement	goto eod ;	112:24:3169:3177	9560578	1	True				
ANR	9560696	Identifier	eod		9560578	0					
ANR	9560697	ReturnStatement	return 1 ;	114:20:3221:3229	9560578	1	True				
ANR	9560698	PrimaryExpression	1		9560578	0					
ANR	9560699	ReturnStatement	return 0 ;	116:12:3261:3269	9560578	4	True				
ANR	9560700	PrimaryExpression	0		9560578	0					
ANR	9560701	Label	default :	117:8:3311:3318	9560578	5	True				
ANR	9560702	Identifier	default		9560578	0					
ANR	9560703	ReturnStatement	return code ;	118:12:3332:3343	9560578	6	True				
ANR	9560704	Identifier	code		9560578	0					
ANR	9560705	Label	case ERRC :	119:8:3353:3362	9560578	7	True				
ANR	9560706	Identifier	ERRC		9560578	0					
ANR	9560707	ExpressionStatement		120:12:3376:3376	9560578	8	True				
ANR	9560708	IfStatement	if ( * pr -> ptr != '>' )		9560578	6					
ANR	9560709	Condition	* pr -> ptr != '>'	128:8:3667:3681	9560578	0	True				
ANR	9560710	EqualityExpression	* pr -> ptr != '>'		9560578	0		!=			
ANR	9560711	UnaryOperationExpression	* pr -> ptr		9560578	0					
ANR	9560712	UnaryOperator	*		9560578	0					
ANR	9560713	PtrMemberAccess	pr -> ptr		9560578	1					
ANR	9560714	Identifier	pr		9560578	0					
ANR	9560715	Identifier	ptr		9560578	1					
ANR	9560716	PrimaryExpression	'>'		9560578	1					
ANR	9560717	CompoundStatement		35:25:1189:1189	9560578	1					
ANR	9560718	ExpressionStatement	-- ( pr -> ptr )	129:8:3704:3715	9560578	0	True				
ANR	9560719	UnaryExpression	-- ( pr -> ptr )		9560578	0					
ANR	9560720	IncDec	--		9560578	0					
ANR	9560721	PtrMemberAccess	pr -> ptr		9560578	1					
ANR	9560722	Identifier	pr		9560578	0					
ANR	9560723	Identifier	ptr		9560578	1					
ANR	9560724	ReturnStatement	return ERRC ;	130:8:3725:3736	9560578	1	True				
ANR	9560725	Identifier	ERRC		9560578	0					
ANR	9560726	Label	eod :	132:2:3746:3749	9560578	7	True				
ANR	9560727	Identifier	eod		9560578	0					
ANR	9560728	IfStatement	if ( ss -> odd >= 0 )		9560578	8					
ANR	9560729	Condition	ss -> odd >= 0	132:10:3754:3765	9560578	0	True				
ANR	9560730	RelationalExpression	ss -> odd >= 0		9560578	0		>=			
ANR	9560731	PtrMemberAccess	ss -> odd		9560578	0					
ANR	9560732	Identifier	ss		9560578	0					
ANR	9560733	Identifier	odd		9560578	1					
ANR	9560734	PrimaryExpression	0		9560578	1					
ANR	9560735	CompoundStatement		39:24:1273:1273	9560578	1					
ANR	9560736	IfStatement	if ( pw -> ptr == pw -> limit )		9560578	0					
ANR	9560737	Condition	pw -> ptr == pw -> limit	133:12:3782:3801	9560578	0	True				
ANR	9560738	EqualityExpression	pw -> ptr == pw -> limit		9560578	0		==			
ANR	9560739	PtrMemberAccess	pw -> ptr		9560578	0					
ANR	9560740	Identifier	pw		9560578	0					
ANR	9560741	Identifier	ptr		9560578	1					
ANR	9560742	PtrMemberAccess	pw -> limit		9560578	1					
ANR	9560743	Identifier	pw		9560578	0					
ANR	9560744	Identifier	limit		9560578	1					
ANR	9560745	ReturnStatement	return 1 ;	134:12:3816:3824	9560578	1	True				
ANR	9560746	PrimaryExpression	1		9560578	0					
ANR	9560747	ExpressionStatement	* ++ ( pw -> ptr ) = ss -> odd << 4	135:8:3834:3861	9560578	1	True				
ANR	9560748	AssignmentExpression	* ++ ( pw -> ptr ) = ss -> odd << 4		9560578	0		=			
ANR	9560749	UnaryOperationExpression	* ++ ( pw -> ptr )		9560578	0					
ANR	9560750	UnaryOperator	*		9560578	0					
ANR	9560751	UnaryExpression	++ ( pw -> ptr )		9560578	1					
ANR	9560752	IncDec	++		9560578	0					
ANR	9560753	PtrMemberAccess	pw -> ptr		9560578	1					
ANR	9560754	Identifier	pw		9560578	0					
ANR	9560755	Identifier	ptr		9560578	1					
ANR	9560756	ShiftExpression	ss -> odd << 4		9560578	1		<<			
ANR	9560757	PtrMemberAccess	ss -> odd		9560578	0					
ANR	9560758	Identifier	ss		9560578	0					
ANR	9560759	Identifier	odd		9560578	1					
ANR	9560760	PrimaryExpression	4		9560578	1					
ANR	9560761	ReturnStatement	return EOFC ;	137:4:3873:3884	9560578	9	True				
ANR	9560762	Identifier	EOFC		9560578	0					
ANR	9560763	ReturnType	static int		9560578	1					
ANR	9560764	Identifier	s_AXD_process		9560578	2					
ANR	9560765	ParameterList	"stream_state * st , stream_cursor_read * pr , stream_cursor_write * pw , bool last"		9560578	3					
ANR	9560766	Parameter	stream_state * st	92:14:2399:2415	9560578	0	True				
ANR	9560767	ParameterType	stream_state *		9560578	0					
ANR	9560768	Identifier	st		9560578	1					
ANR	9560769	Parameter	stream_cursor_read * pr	92:33:2418:2440	9560578	1	True				
ANR	9560770	ParameterType	stream_cursor_read *		9560578	0					
ANR	9560771	Identifier	pr		9560578	1					
ANR	9560772	Parameter	stream_cursor_write * pw	93:14:2457:2480	9560578	2	True				
ANR	9560773	ParameterType	stream_cursor_write *		9560578	0					
ANR	9560774	Identifier	pw		9560578	1					
ANR	9560775	Parameter	bool last	93:40:2483:2491	9560578	3	True				
ANR	9560776	ParameterType	bool		9560578	0					
ANR	9560777	Identifier	last		9560578	1					
ANR	9560778	CFGEntryNode	ENTRY		9560578		True				
ANR	9560779	CFGExitNode	EXIT		9560578		True				
ANR	9560780	Symbol	* ++ ( pw -> ptr )		9560578						
ANR	9560781	Symbol	pr		9560578						
ANR	9560782	Symbol	code		9560578						
ANR	9560783	Symbol	* ss		9560578						
ANR	9560784	Symbol	pw		9560578						
ANR	9560785	Symbol	EOFC		9560578						
ANR	9560786	Symbol	pr -> limit		9560578						
ANR	9560787	Symbol	pw -> limit		9560578						
ANR	9560788	Symbol	* pr -> ptr		9560578						
ANR	9560789	Symbol	& ss -> odd		9560578						
ANR	9560790	Symbol	* * pr -> ptr		9560578						
ANR	9560791	Symbol	* pw -> ptr		9560578						
ANR	9560792	Symbol	pr -> ptr		9560578						
ANR	9560793	Symbol	* * * pr		9560578						
ANR	9560794	Symbol	pw -> ptr		9560578						
ANR	9560795	Symbol	ss		9560578						
ANR	9560796	Symbol	st		9560578						
ANR	9560797	Symbol	last		9560578						
ANR	9560798	Symbol	s_hex_process		9560578						
ANR	9560799	Symbol	* pr		9560578						
ANR	9560800	Symbol	ctype_space		9560578						
ANR	9560801	Symbol	* * pr		9560578						
ANR	9560802	Symbol	* pw		9560578						
ANR	9560803	Symbol	ss -> odd		9560578						
ANR	9560804	Symbol	* * pw		9560578						
ANR	9560805	Symbol	scan_char_decoder		9560578						
ANR	9560806	Symbol	* scan_char_decoder		9560578						
ANR	9560807	Symbol	hex_ignore_whitespace		9560578						
ANR	9560808	Symbol	ERRC		9560578						
ANR	9560809	DeclStmt									
ANR	9560810	Decl							const stream_template	const stream_template	s_AXD_template
ANR	9560811	Function	s_PSSE_process	148:0:4061:5700							
ANR	9560812	FunctionDef	"s_PSSE_process (stream_state * st , stream_cursor_read * pr , stream_cursor_write * pw , bool last)"		9560811	0					
ANR	9560813	CompoundStatement		151:0:4183:5700	9560811	0					
ANR	9560814	IdentifierDeclStatement	const byte * p = pr -> ptr ;	152:4:4189:4212	9560811	0	True				
ANR	9560815	IdentifierDecl	* p = pr -> ptr		9560811	0					
ANR	9560816	IdentifierDeclType	const byte *		9560811	0					
ANR	9560817	Identifier	p		9560811	1					
ANR	9560818	AssignmentExpression	* p = pr -> ptr		9560811	2		=			
ANR	9560819	Identifier	p		9560811	0					
ANR	9560820	PtrMemberAccess	pr -> ptr		9560811	1					
ANR	9560821	Identifier	pr		9560811	0					
ANR	9560822	Identifier	ptr		9560811	1					
ANR	9560823	IdentifierDeclStatement	const byte * rlimit = pr -> limit ;	153:4:4218:4248	9560811	1	True				
ANR	9560824	IdentifierDecl	* rlimit = pr -> limit		9560811	0					
ANR	9560825	IdentifierDeclType	const byte *		9560811	0					
ANR	9560826	Identifier	rlimit		9560811	1					
ANR	9560827	AssignmentExpression	* rlimit = pr -> limit		9560811	2		=			
ANR	9560828	Identifier	rlimit		9560811	0					
ANR	9560829	PtrMemberAccess	pr -> limit		9560811	1					
ANR	9560830	Identifier	pr		9560811	0					
ANR	9560831	Identifier	limit		9560811	1					
ANR	9560832	IdentifierDeclStatement	byte * q = pw -> ptr ;	154:4:4254:4271	9560811	2	True				
ANR	9560833	IdentifierDecl	* q = pw -> ptr		9560811	0					
ANR	9560834	IdentifierDeclType	byte *		9560811	0					
ANR	9560835	Identifier	q		9560811	1					
ANR	9560836	AssignmentExpression	* q = pw -> ptr		9560811	2		=			
ANR	9560837	Identifier	q		9560811	0					
ANR	9560838	PtrMemberAccess	pw -> ptr		9560811	1					
ANR	9560839	Identifier	pw		9560811	0					
ANR	9560840	Identifier	ptr		9560811	1					
ANR	9560841	IdentifierDeclStatement	byte * wlimit = pw -> limit ;	155:4:4277:4301	9560811	3	True				
ANR	9560842	IdentifierDecl	* wlimit = pw -> limit		9560811	0					
ANR	9560843	IdentifierDeclType	byte *		9560811	0					
ANR	9560844	Identifier	wlimit		9560811	1					
ANR	9560845	AssignmentExpression	* wlimit = pw -> limit		9560811	2		=			
ANR	9560846	Identifier	wlimit		9560811	0					
ANR	9560847	PtrMemberAccess	pw -> limit		9560811	1					
ANR	9560848	Identifier	pw		9560811	0					
ANR	9560849	Identifier	limit		9560811	1					
ANR	9560850	IdentifierDeclStatement	int status = 0 ;	156:4:4307:4321	9560811	4	True				
ANR	9560851	IdentifierDecl	status = 0		9560811	0					
ANR	9560852	IdentifierDeclType	int		9560811	0					
ANR	9560853	Identifier	status		9560811	1					
ANR	9560854	AssignmentExpression	status = 0		9560811	2		=			
ANR	9560855	Identifier	status		9560811	0					
ANR	9560856	PrimaryExpression	0		9560811	1					
ANR	9560857	WhileStatement	while ( p < rlimit )		9560811	5					
ANR	9560858	Condition	p < rlimit	159:11:4385:4394	9560811	0	True				
ANR	9560859	RelationalExpression	p < rlimit		9560811	0		<			
ANR	9560860	Identifier	p		9560811	0					
ANR	9560861	Identifier	rlimit		9560811	1					
ANR	9560862	CompoundStatement		10:8:223:235	9560811	1					
ANR	9560863	IdentifierDeclStatement	int c = * ++ p ;	160:8:4407:4419	9560811	0	True				
ANR	9560864	IdentifierDecl	c = * ++ p		9560811	0					
ANR	9560865	IdentifierDeclType	int		9560811	0					
ANR	9560866	Identifier	c		9560811	1					
ANR	9560867	AssignmentExpression	c = * ++ p		9560811	2		=			
ANR	9560868	Identifier	c		9560811	0					
ANR	9560869	UnaryOperationExpression	* ++ p		9560811	1					
ANR	9560870	UnaryOperator	*		9560811	0					
ANR	9560871	UnaryExpression	++ p		9560811	1					
ANR	9560872	IncDec	++		9560811	0					
ANR	9560873	Identifier	p		9560811	1					
ANR	9560874	IfStatement	if ( c < 32 || c >= 127 )		9560811	1					
ANR	9560875	Condition	c < 32 || c >= 127	162:12:4434:4451	9560811	0	True				
ANR	9560876	OrExpression	c < 32 || c >= 127		9560811	0		||			
ANR	9560877	RelationalExpression	c < 32		9560811	0		<			
ANR	9560878	Identifier	c		9560811	0					
ANR	9560879	PrimaryExpression	32		9560811	1					
ANR	9560880	RelationalExpression	c >= 127		9560811	1		>=			
ANR	9560881	Identifier	c		9560811	0					
ANR	9560882	PrimaryExpression	127		9560811	1					
ANR	9560883	CompoundStatement		13:12:284:300	9560811	1					
ANR	9560884	IdentifierDeclStatement	const char * pesc ;	163:12:4468:4484	9560811	0	True				
ANR	9560885	IdentifierDecl	* pesc		9560811	0					
ANR	9560886	IdentifierDeclType	const char *		9560811	0					
ANR	9560887	Identifier	pesc		9560811	1					
ANR	9560888	Statement	const	164:12:4498:4502	9560811	1	True				
ANR	9560889	Statement	char	164:18:4504:4507	9560811	2	True				
ANR	9560890	Statement	*	164:23:4509:4509	9560811	3	True				
ANR	9560891	Statement	const	164:24:4510:4514	9560811	4	True				
ANR	9560892	ExpressionStatement	"esc = ""\\n\\r\\t\\b\\f"""	164:30:4516:4534	9560811	5	True				
ANR	9560893	AssignmentExpression	"esc = ""\\n\\r\\t\\b\\f"""		9560811	0		=			
ANR	9560894	Identifier	esc		9560811	0					
ANR	9560895	PrimaryExpression	"""\\n\\r\\t\\b\\f"""		9560811	1					
ANR	9560896	IfStatement	"if ( c < 32 && c != 0 && ( pesc = strchr ( esc , c ) ) != 0 )"		9560811	6					
ANR	9560897	Condition	"c < 32 && c != 0 && ( pesc = strchr ( esc , c ) ) != 0"	166:16:4553:4600	9560811	0	True				
ANR	9560898	AndExpression	"c < 32 && c != 0 && ( pesc = strchr ( esc , c ) ) != 0"		9560811	0		&&			
ANR	9560899	RelationalExpression	c < 32		9560811	0		<			
ANR	9560900	Identifier	c		9560811	0					
ANR	9560901	PrimaryExpression	32		9560811	1					
ANR	9560902	AndExpression	"c != 0 && ( pesc = strchr ( esc , c ) ) != 0"		9560811	1		&&			
ANR	9560903	EqualityExpression	c != 0		9560811	0		!=			
ANR	9560904	Identifier	c		9560811	0					
ANR	9560905	PrimaryExpression	0		9560811	1					
ANR	9560906	EqualityExpression	"( pesc = strchr ( esc , c ) ) != 0"		9560811	1		!=			
ANR	9560907	AssignmentExpression	"pesc = strchr ( esc , c )"		9560811	0		=			
ANR	9560908	Identifier	pesc		9560811	0					
ANR	9560909	CallExpression	"strchr ( esc , c )"		9560811	1					
ANR	9560910	Callee	strchr		9560811	0					
ANR	9560911	Identifier	strchr		9560811	0					
ANR	9560912	ArgumentList	esc		9560811	1					
ANR	9560913	Argument	esc		9560811	0					
ANR	9560914	Identifier	esc		9560811	0					
ANR	9560915	Argument	c		9560811	1					
ANR	9560916	Identifier	c		9560811	0					
ANR	9560917	PrimaryExpression	0		9560811	1					
ANR	9560918	CompoundStatement		16:66:419:419	9560811	1					
ANR	9560919	IfStatement	if ( wlimit - q < 2 )		9560811	0					
ANR	9560920	Condition	wlimit - q < 2	167:20:4625:4638	9560811	0	True				
ANR	9560921	RelationalExpression	wlimit - q < 2		9560811	0		<			
ANR	9560922	AdditiveExpression	wlimit - q		9560811	0		-			
ANR	9560923	Identifier	wlimit		9560811	0					
ANR	9560924	Identifier	q		9560811	1					
ANR	9560925	PrimaryExpression	2		9560811	1					
ANR	9560926	CompoundStatement		17:36:457:457	9560811	1					
ANR	9560927	ExpressionStatement	-- p	168:20:4663:4666	9560811	0	True				
ANR	9560928	UnaryExpression	-- p		9560811	0					
ANR	9560929	IncDec	--		9560811	0					
ANR	9560930	Identifier	p		9560811	1					
ANR	9560931	ExpressionStatement	status = 1	169:20:4688:4698	9560811	1	True				
ANR	9560932	AssignmentExpression	status = 1		9560811	0		=			
ANR	9560933	Identifier	status		9560811	0					
ANR	9560934	PrimaryExpression	1		9560811	1					
ANR	9560935	BreakStatement	break ;	170:20:4720:4725	9560811	2	True				
ANR	9560936	ExpressionStatement	* ++ q = '\\\\'	172:16:4761:4772	9560811	1	True				
ANR	9560937	AssignmentExpression	* ++ q = '\\\\'		9560811	0		=			
ANR	9560938	UnaryOperationExpression	* ++ q		9560811	0					
ANR	9560939	UnaryOperator	*		9560811	0					
ANR	9560940	UnaryExpression	++ q		9560811	1					
ANR	9560941	IncDec	++		9560811	0					
ANR	9560942	Identifier	q		9560811	1					
ANR	9560943	PrimaryExpression	'\\\\'		9560811	1					
ANR	9560944	ExpressionStatement	"* ++ q = ""nrtbf"" [ pesc - esc ]"	173:16:4790:4816	9560811	2	True				
ANR	9560945	AssignmentExpression	"* ++ q = ""nrtbf"" [ pesc - esc ]"		9560811	0		=			
ANR	9560946	UnaryOperationExpression	* ++ q		9560811	0					
ANR	9560947	UnaryOperator	*		9560811	0					
ANR	9560948	UnaryExpression	++ q		9560811	1					
ANR	9560949	IncDec	++		9560811	0					
ANR	9560950	Identifier	q		9560811	1					
ANR	9560951	ArrayIndexing	"""nrtbf"" [ pesc - esc ]"		9560811	1					
ANR	9560952	PrimaryExpression	"""nrtbf"""		9560811	0					
ANR	9560953	AdditiveExpression	pesc - esc		9560811	1		-			
ANR	9560954	Identifier	pesc		9560811	0					
ANR	9560955	Identifier	esc		9560811	1					
ANR	9560956	ContinueStatement	continue ;	174:16:4834:4842	9560811	3	True				
ANR	9560957	IfStatement	if ( wlimit - q < 4 )		9560811	7					
ANR	9560958	Condition	wlimit - q < 4	176:16:4874:4887	9560811	0	True				
ANR	9560959	RelationalExpression	wlimit - q < 4		9560811	0		<			
ANR	9560960	AdditiveExpression	wlimit - q		9560811	0		-			
ANR	9560961	Identifier	wlimit		9560811	0					
ANR	9560962	Identifier	q		9560811	1					
ANR	9560963	PrimaryExpression	4		9560811	1					
ANR	9560964	CompoundStatement		26:32:706:706	9560811	1					
ANR	9560965	ExpressionStatement	-- p	177:16:4908:4911	9560811	0	True				
ANR	9560966	UnaryExpression	-- p		9560811	0					
ANR	9560967	IncDec	--		9560811	0					
ANR	9560968	Identifier	p		9560811	1					
ANR	9560969	ExpressionStatement	status = 1	178:16:4929:4939	9560811	1	True				
ANR	9560970	AssignmentExpression	status = 1		9560811	0		=			
ANR	9560971	Identifier	status		9560811	0					
ANR	9560972	PrimaryExpression	1		9560811	1					
ANR	9560973	BreakStatement	break ;	179:16:4957:4962	9560811	2	True				
ANR	9560974	ExpressionStatement	q [ 1 ] = '\\\\'	181:12:4990:5001	9560811	8	True				
ANR	9560975	AssignmentExpression	q [ 1 ] = '\\\\'		9560811	0		=			
ANR	9560976	ArrayIndexing	q [ 1 ]		9560811	0					
ANR	9560977	Identifier	q		9560811	0					
ANR	9560978	PrimaryExpression	1		9560811	1					
ANR	9560979	PrimaryExpression	'\\\\'		9560811	1					
ANR	9560980	ExpressionStatement	q [ 2 ] = ( c >> 6 ) + '0'	182:12:5015:5036	9560811	9	True				
ANR	9560981	AssignmentExpression	q [ 2 ] = ( c >> 6 ) + '0'		9560811	0		=			
ANR	9560982	ArrayIndexing	q [ 2 ]		9560811	0					
ANR	9560983	Identifier	q		9560811	0					
ANR	9560984	PrimaryExpression	2		9560811	1					
ANR	9560985	AdditiveExpression	( c >> 6 ) + '0'		9560811	1		+			
ANR	9560986	ShiftExpression	c >> 6		9560811	0		>>			
ANR	9560987	Identifier	c		9560811	0					
ANR	9560988	PrimaryExpression	6		9560811	1					
ANR	9560989	PrimaryExpression	'0'		9560811	1					
ANR	9560990	ExpressionStatement	q [ 3 ] = ( ( c >> 3 ) & 7 ) + '0'	183:12:5050:5077	9560811	10	True				
ANR	9560991	AssignmentExpression	q [ 3 ] = ( ( c >> 3 ) & 7 ) + '0'		9560811	0		=			
ANR	9560992	ArrayIndexing	q [ 3 ]		9560811	0					
ANR	9560993	Identifier	q		9560811	0					
ANR	9560994	PrimaryExpression	3		9560811	1					
ANR	9560995	AdditiveExpression	( ( c >> 3 ) & 7 ) + '0'		9560811	1		+			
ANR	9560996	BitAndExpression	( c >> 3 ) & 7		9560811	0		&			
ANR	9560997	ShiftExpression	c >> 3		9560811	0		>>			
ANR	9560998	Identifier	c		9560811	0					
ANR	9560999	PrimaryExpression	3		9560811	1					
ANR	9561000	PrimaryExpression	7		9560811	1					
ANR	9561001	PrimaryExpression	'0'		9560811	1					
ANR	9561002	ExpressionStatement	q [ 4 ] = ( c & 7 ) + '0'	184:12:5091:5111	9560811	11	True				
ANR	9561003	AssignmentExpression	q [ 4 ] = ( c & 7 ) + '0'		9560811	0		=			
ANR	9561004	ArrayIndexing	q [ 4 ]		9560811	0					
ANR	9561005	Identifier	q		9560811	0					
ANR	9561006	PrimaryExpression	4		9560811	1					
ANR	9561007	AdditiveExpression	( c & 7 ) + '0'		9560811	1		+			
ANR	9561008	BitAndExpression	c & 7		9560811	0		&			
ANR	9561009	Identifier	c		9560811	0					
ANR	9561010	PrimaryExpression	7		9560811	1					
ANR	9561011	PrimaryExpression	'0'		9560811	1					
ANR	9561012	ExpressionStatement	q += 4	185:12:5125:5131	9560811	12	True				
ANR	9561013	AssignmentExpression	q += 4		9560811	0		+=			
ANR	9561014	Identifier	q		9560811	0					
ANR	9561015	PrimaryExpression	4		9560811	1					
ANR	9561016	ContinueStatement	continue ;	186:12:5145:5153	9560811	13	True				
ANR	9561017	ElseStatement	else		9560811	0					
ANR	9561018	IfStatement	if ( c == '(' || c == ')' || c == '\\\\' )		9560811	0					
ANR	9561019	Condition	c == '(' || c == ')' || c == '\\\\'	187:19:5174:5206	9560811	0	True				
ANR	9561020	OrExpression	c == '(' || c == ')' || c == '\\\\'		9560811	0		||			
ANR	9561021	EqualityExpression	c == '('		9560811	0		==			
ANR	9561022	Identifier	c		9560811	0					
ANR	9561023	PrimaryExpression	'('		9560811	1					
ANR	9561024	OrExpression	c == ')' || c == '\\\\'		9560811	1		||			
ANR	9561025	EqualityExpression	c == ')'		9560811	0		==			
ANR	9561026	Identifier	c		9560811	0					
ANR	9561027	PrimaryExpression	')'		9560811	1					
ANR	9561028	EqualityExpression	c == '\\\\'		9560811	1		==			
ANR	9561029	Identifier	c		9560811	0					
ANR	9561030	PrimaryExpression	'\\\\'		9560811	1					
ANR	9561031	CompoundStatement		37:54:1025:1025	9560811	1					
ANR	9561032	IfStatement	if ( wlimit - q < 2 )		9560811	0					
ANR	9561033	Condition	wlimit - q < 2	188:16:5227:5240	9560811	0	True				
ANR	9561034	RelationalExpression	wlimit - q < 2		9560811	0		<			
ANR	9561035	AdditiveExpression	wlimit - q		9560811	0		-			
ANR	9561036	Identifier	wlimit		9560811	0					
ANR	9561037	Identifier	q		9560811	1					
ANR	9561038	PrimaryExpression	2		9560811	1					
ANR	9561039	CompoundStatement		38:32:1059:1059	9560811	1					
ANR	9561040	ExpressionStatement	-- p	189:16:5261:5264	9560811	0	True				
ANR	9561041	UnaryExpression	-- p		9560811	0					
ANR	9561042	IncDec	--		9560811	0					
ANR	9561043	Identifier	p		9560811	1					
ANR	9561044	ExpressionStatement	status = 1	190:16:5282:5292	9560811	1	True				
ANR	9561045	AssignmentExpression	status = 1		9560811	0		=			
ANR	9561046	Identifier	status		9560811	0					
ANR	9561047	PrimaryExpression	1		9560811	1					
ANR	9561048	BreakStatement	break ;	191:16:5310:5315	9560811	2	True				
ANR	9561049	ExpressionStatement	* ++ q = '\\\\'	193:12:5343:5354	9560811	1	True				
ANR	9561050	AssignmentExpression	* ++ q = '\\\\'		9560811	0		=			
ANR	9561051	UnaryOperationExpression	* ++ q		9560811	0					
ANR	9561052	UnaryOperator	*		9560811	0					
ANR	9561053	UnaryExpression	++ q		9560811	1					
ANR	9561054	IncDec	++		9560811	0					
ANR	9561055	Identifier	q		9560811	1					
ANR	9561056	PrimaryExpression	'\\\\'		9560811	1					
ANR	9561057	ElseStatement	else		9560811	0					
ANR	9561058	CompoundStatement		44:15:1187:1187	9560811	0					
ANR	9561059	IfStatement	if ( q == wlimit )		9560811	0					
ANR	9561060	Condition	q == wlimit	195:16:5389:5399	9560811	0	True				
ANR	9561061	EqualityExpression	q == wlimit		9560811	0		==			
ANR	9561062	Identifier	q		9560811	0					
ANR	9561063	Identifier	wlimit		9560811	1					
ANR	9561064	CompoundStatement		45:29:1218:1218	9560811	1					
ANR	9561065	ExpressionStatement	-- p	196:16:5420:5423	9560811	0	True				
ANR	9561066	UnaryExpression	-- p		9560811	0					
ANR	9561067	IncDec	--		9560811	0					
ANR	9561068	Identifier	p		9560811	1					
ANR	9561069	ExpressionStatement	status = 1	197:16:5441:5451	9560811	1	True				
ANR	9561070	AssignmentExpression	status = 1		9560811	0		=			
ANR	9561071	Identifier	status		9560811	0					
ANR	9561072	PrimaryExpression	1		9560811	1					
ANR	9561073	BreakStatement	break ;	198:16:5469:5474	9560811	2	True				
ANR	9561074	ExpressionStatement	* ++ q = c	201:8:5508:5516	9560811	2	True				
ANR	9561075	AssignmentExpression	* ++ q = c		9560811	0		=			
ANR	9561076	UnaryOperationExpression	* ++ q		9560811	0					
ANR	9561077	UnaryOperator	*		9560811	0					
ANR	9561078	UnaryExpression	++ q		9560811	1					
ANR	9561079	IncDec	++		9560811	0					
ANR	9561080	Identifier	q		9560811	1					
ANR	9561081	Identifier	c		9560811	1					
ANR	9561082	IfStatement	if ( last && status == 0 )		9560811	6					
ANR	9561083	Condition	last && status == 0	203:8:5532:5550	9560811	0	True				
ANR	9561084	AndExpression	last && status == 0		9560811	0		&&			
ANR	9561085	Identifier	last		9560811	0					
ANR	9561086	EqualityExpression	status == 0		9560811	1		==			
ANR	9561087	Identifier	status		9560811	0					
ANR	9561088	PrimaryExpression	0		9560811	1					
ANR	9561089	CompoundStatement		53:29:1369:1369	9560811	1					
ANR	9561090	IfStatement	if ( q == wlimit )		9560811	0					
ANR	9561091	Condition	q == wlimit	204:12:5567:5577	9560811	0	True				
ANR	9561092	EqualityExpression	q == wlimit		9560811	0		==			
ANR	9561093	Identifier	q		9560811	0					
ANR	9561094	Identifier	wlimit		9560811	1					
ANR	9561095	ExpressionStatement	status = 1	205:12:5592:5602	9560811	1	True				
ANR	9561096	AssignmentExpression	status = 1		9560811	0		=			
ANR	9561097	Identifier	status		9560811	0					
ANR	9561098	PrimaryExpression	1		9560811	1					
ANR	9561099	ElseStatement	else		9560811	0					
ANR	9561100	ExpressionStatement	* ++ q = ')'	207:12:5629:5639	9560811	0	True				
ANR	9561101	AssignmentExpression	* ++ q = ')'		9560811	0		=			
ANR	9561102	UnaryOperationExpression	* ++ q		9560811	0					
ANR	9561103	UnaryOperator	*		9560811	0					
ANR	9561104	UnaryExpression	++ q		9560811	1					
ANR	9561105	IncDec	++		9560811	0					
ANR	9561106	Identifier	q		9560811	1					
ANR	9561107	PrimaryExpression	')'		9560811	1					
ANR	9561108	ExpressionStatement	pr -> ptr = p	209:4:5651:5662	9560811	7	True				
ANR	9561109	AssignmentExpression	pr -> ptr = p		9560811	0		=			
ANR	9561110	PtrMemberAccess	pr -> ptr		9560811	0					
ANR	9561111	Identifier	pr		9560811	0					
ANR	9561112	Identifier	ptr		9560811	1					
ANR	9561113	Identifier	p		9560811	1					
ANR	9561114	ExpressionStatement	pw -> ptr = q	210:4:5668:5679	9560811	8	True				
ANR	9561115	AssignmentExpression	pw -> ptr = q		9560811	0		=			
ANR	9561116	PtrMemberAccess	pw -> ptr		9560811	0					
ANR	9561117	Identifier	pw		9560811	0					
ANR	9561118	Identifier	ptr		9560811	1					
ANR	9561119	Identifier	q		9560811	1					
ANR	9561120	ReturnStatement	return status ;	211:4:5685:5698	9560811	9	True				
ANR	9561121	Identifier	status		9560811	0					
ANR	9561122	ReturnType	static int		9560811	1					
ANR	9561123	Identifier	s_PSSE_process		9560811	2					
ANR	9561124	ParameterList	"stream_state * st , stream_cursor_read * pr , stream_cursor_write * pw , bool last"		9560811	3					
ANR	9561125	Parameter	stream_state * st	149:15:4087:4103	9560811	0	True				
ANR	9561126	ParameterType	stream_state *		9560811	0					
ANR	9561127	Identifier	st		9560811	1					
ANR	9561128	Parameter	stream_cursor_read * pr	149:34:4106:4128	9560811	1	True				
ANR	9561129	ParameterType	stream_cursor_read *		9560811	0					
ANR	9561130	Identifier	pr		9560811	1					
ANR	9561131	Parameter	stream_cursor_write * pw	150:15:4146:4169	9560811	2	True				
ANR	9561132	ParameterType	stream_cursor_write *		9560811	0					
ANR	9561133	Identifier	pw		9560811	1					
ANR	9561134	Parameter	bool last	150:41:4172:4180	9560811	3	True				
ANR	9561135	ParameterType	bool		9560811	0					
ANR	9561136	Identifier	last		9560811	1					
ANR	9561137	CFGEntryNode	ENTRY		9560811		True				
ANR	9561138	CFGExitNode	EXIT		9560811		True				
ANR	9561139	Symbol	pr		9560811						
ANR	9561140	Symbol	pw		9560811						
ANR	9561141	Symbol	strchr		9560811						
ANR	9561142	Symbol	pr -> limit		9560811						
ANR	9561143	Symbol	pw -> limit		9560811						
ANR	9561144	Symbol	wlimit		9560811						
ANR	9561145	Symbol	* pesc		9560811						
ANR	9561146	Symbol	pr -> ptr		9560811						
ANR	9561147	Symbol	pw -> ptr		9560811						
ANR	9561148	Symbol	* esc		9560811						
ANR	9561149	Symbol	st		9560811						
ANR	9561150	Symbol	rlimit		9560811						
ANR	9561151	Symbol	c		9560811						
ANR	9561152	Symbol	last		9560811						
ANR	9561153	Symbol	* ++ p		9560811						
ANR	9561154	Symbol	* ++ q		9560811						
ANR	9561155	Symbol	* pr		9560811						
ANR	9561156	Symbol	* pw		9560811						
ANR	9561157	Symbol	p		9560811						
ANR	9561158	Symbol	q		9560811						
ANR	9561159	Symbol	pesc		9560811						
ANR	9561160	Symbol	esc		9560811						
ANR	9561161	Symbol	* p		9560811						
ANR	9561162	Symbol	* q		9560811						
ANR	9561163	Symbol	status		9560811						
ANR	9561164	DeclStmt									
ANR	9561165	Decl							const stream_template	const stream_template	s_PSSE_template
ANR	9561166	Function	s_PSSD_init	224:0:5904:6076							
ANR	9561167	FunctionDef	s_PSSD_init (stream_state * st)		9561166	0					
ANR	9561168	CompoundStatement		226:0:5939:6076	9561166	0					
ANR	9561169	Statement	stream_PSSD_state	227:4:5945:5961	9561166	0	True				
ANR	9561170	Statement	*	227:22:5963:5963	9561166	1	True				
ANR	9561171	Statement	const	227:23:5964:5968	9561166	2	True				
ANR	9561172	ExpressionStatement	ss = ( stream_PSSD_state * ) st	227:29:5970:5999	9561166	3	True				
ANR	9561173	AssignmentExpression	ss = ( stream_PSSD_state * ) st		9561166	0		=			
ANR	9561174	Identifier	ss		9561166	0					
ANR	9561175	CastExpression	( stream_PSSD_state * ) st		9561166	1					
ANR	9561176	CastTarget	stream_PSSD_state *		9561166	0					
ANR	9561177	Identifier	st		9561166	1					
ANR	9561178	ExpressionStatement	ss -> from_string = false	229:4:6006:6029	9561166	4	True				
ANR	9561179	AssignmentExpression	ss -> from_string = false		9561166	0		=			
ANR	9561180	PtrMemberAccess	ss -> from_string		9561166	0					
ANR	9561181	Identifier	ss		9561166	0					
ANR	9561182	Identifier	from_string		9561166	1					
ANR	9561183	Identifier	false		9561166	1					
ANR	9561184	ReturnStatement	return s_PSSD_partially_init_inline ( ss ) ;	230:4:6035:6074	9561166	5	True				
ANR	9561185	CallExpression	s_PSSD_partially_init_inline ( ss )		9561166	0					
ANR	9561186	Callee	s_PSSD_partially_init_inline		9561166	0					
ANR	9561187	Identifier	s_PSSD_partially_init_inline		9561166	0					
ANR	9561188	ArgumentList	ss		9561166	1					
ANR	9561189	Argument	ss		9561166	0					
ANR	9561190	Identifier	ss		9561166	0					
ANR	9561191	ReturnType	int		9561166	1					
ANR	9561192	Identifier	s_PSSD_init		9561166	2					
ANR	9561193	ParameterList	stream_state * st		9561166	3					
ANR	9561194	Parameter	stream_state * st	225:12:5920:5936	9561166	0	True				
ANR	9561195	ParameterType	stream_state *		9561166	0					
ANR	9561196	Identifier	st		9561166	1					
ANR	9561197	CFGEntryNode	ENTRY		9561166		True				
ANR	9561198	CFGExitNode	EXIT		9561166		True				
ANR	9561199	Symbol	ss		9561166						
ANR	9561200	Symbol	st		9561166						
ANR	9561201	Symbol	ss -> from_string		9561166						
ANR	9561202	Symbol	* ss		9561166						
ANR	9561203	Symbol	false		9561166						
ANR	9561204	Symbol	s_PSSD_partially_init_inline		9561166						
ANR	9561205	Function	s_PSSD_process	234:0:6102:9707							
ANR	9561206	FunctionDef	"s_PSSD_process (stream_state * st , stream_cursor_read * pr , stream_cursor_write * pw , bool last)"		9561205	0					
ANR	9561207	CompoundStatement		237:0:6224:9707	9561205	0					
ANR	9561208	Statement	stream_PSSD_state	238:4:6230:6246	9561205	0	True				
ANR	9561209	Statement	*	238:22:6248:6248	9561205	1	True				
ANR	9561210	Statement	const	238:23:6249:6253	9561205	2	True				
ANR	9561211	ExpressionStatement	ss = ( stream_PSSD_state * ) st	238:29:6255:6284	9561205	3	True				
ANR	9561212	AssignmentExpression	ss = ( stream_PSSD_state * ) st		9561205	0		=			
ANR	9561213	Identifier	ss		9561205	0					
ANR	9561214	CastExpression	( stream_PSSD_state * ) st		9561205	1					
ANR	9561215	CastTarget	stream_PSSD_state *		9561205	0					
ANR	9561216	Identifier	st		9561205	1					
ANR	9561217	IdentifierDeclStatement	const byte * p = pr -> ptr ;	239:4:6290:6313	9561205	4	True				
ANR	9561218	IdentifierDecl	* p = pr -> ptr		9561205	0					
ANR	9561219	IdentifierDeclType	const byte *		9561205	0					
ANR	9561220	Identifier	p		9561205	1					
ANR	9561221	AssignmentExpression	* p = pr -> ptr		9561205	2		=			
ANR	9561222	Identifier	p		9561205	0					
ANR	9561223	PtrMemberAccess	pr -> ptr		9561205	1					
ANR	9561224	Identifier	pr		9561205	0					
ANR	9561225	Identifier	ptr		9561205	1					
ANR	9561226	IdentifierDeclStatement	const byte * rlimit = pr -> limit ;	240:4:6319:6349	9561205	5	True				
ANR	9561227	IdentifierDecl	* rlimit = pr -> limit		9561205	0					
ANR	9561228	IdentifierDeclType	const byte *		9561205	0					
ANR	9561229	Identifier	rlimit		9561205	1					
ANR	9561230	AssignmentExpression	* rlimit = pr -> limit		9561205	2		=			
ANR	9561231	Identifier	rlimit		9561205	0					
ANR	9561232	PtrMemberAccess	pr -> limit		9561205	1					
ANR	9561233	Identifier	pr		9561205	0					
ANR	9561234	Identifier	limit		9561205	1					
ANR	9561235	IdentifierDeclStatement	byte * q = pw -> ptr ;	241:4:6355:6372	9561205	6	True				
ANR	9561236	IdentifierDecl	* q = pw -> ptr		9561205	0					
ANR	9561237	IdentifierDeclType	byte *		9561205	0					
ANR	9561238	Identifier	q		9561205	1					
ANR	9561239	AssignmentExpression	* q = pw -> ptr		9561205	2		=			
ANR	9561240	Identifier	q		9561205	0					
ANR	9561241	PtrMemberAccess	pw -> ptr		9561205	1					
ANR	9561242	Identifier	pw		9561205	0					
ANR	9561243	Identifier	ptr		9561205	1					
ANR	9561244	IdentifierDeclStatement	byte * wlimit = pw -> limit ;	242:4:6378:6402	9561205	7	True				
ANR	9561245	IdentifierDecl	* wlimit = pw -> limit		9561205	0					
ANR	9561246	IdentifierDeclType	byte *		9561205	0					
ANR	9561247	Identifier	wlimit		9561205	1					
ANR	9561248	AssignmentExpression	* wlimit = pw -> limit		9561205	2		=			
ANR	9561249	Identifier	wlimit		9561205	0					
ANR	9561250	PtrMemberAccess	pw -> limit		9561205	1					
ANR	9561251	Identifier	pw		9561205	0					
ANR	9561252	Identifier	limit		9561205	1					
ANR	9561253	IdentifierDeclStatement	int status = 0 ;	243:4:6408:6422	9561205	8	True				
ANR	9561254	IdentifierDecl	status = 0		9561205	0					
ANR	9561255	IdentifierDeclType	int		9561205	0					
ANR	9561256	Identifier	status		9561205	1					
ANR	9561257	AssignmentExpression	status = 0		9561205	2		=			
ANR	9561258	Identifier	status		9561205	0					
ANR	9561259	PrimaryExpression	0		9561205	1					
ANR	9561260	IdentifierDeclStatement	int c ;	244:4:6428:6433	9561205	9	True				
ANR	9561261	IdentifierDecl	c		9561205	0					
ANR	9561262	IdentifierDeclType	int		9561205	0					
ANR	9561263	Identifier	c		9561205	1					
ANR	9561264	Statement	define	246:1:6437:6442	9561205	10	True				
ANR	9561265	Statement	check_p	246:8:6444:6450	9561205	11	True				
ANR	9561266	Statement	(	246:15:6451:6451	9561205	12	True				
ANR	9561267	Statement	n	246:16:6452:6452	9561205	13	True				
ANR	9561268	Statement	)	246:17:6453:6453	9561205	14	True				
ANR	9561269	IfStatement	if ( p == rlimit )		9561205	15					
ANR	9561270	Condition	p == rlimit	247:7:6463:6473	9561205	0	True				
ANR	9561271	EqualityExpression	p == rlimit		9561205	0		==			
ANR	9561272	Identifier	p		9561205	0					
ANR	9561273	Identifier	rlimit		9561205	1					
ANR	9561274	CompoundStatement		11:21:252:252	9561205	1					
ANR	9561275	ExpressionStatement	p -= n	247:23:6479:6485	9561205	0	True				
ANR	9561276	AssignmentExpression	p -= n		9561205	0		-=			
ANR	9561277	Identifier	p		9561205	0					
ANR	9561278	Identifier	n		9561205	1					
ANR	9561279	GotoStatement	goto out ;	247:31:6487:6495	9561205	1	True				
ANR	9561280	Identifier	out		9561205	0					
ANR	9561281	Statement	define	248:1:6500:6505	9561205	16	True				
ANR	9561282	Statement	check_q	248:8:6507:6513	9561205	17	True				
ANR	9561283	Statement	(	248:15:6514:6514	9561205	18	True				
ANR	9561284	Statement	n	248:16:6515:6515	9561205	19	True				
ANR	9561285	Statement	)	248:17:6516:6516	9561205	20	True				
ANR	9561286	IfStatement	if ( q == wlimit )		9561205	21					
ANR	9561287	Condition	q == wlimit	249:7:6526:6536	9561205	0	True				
ANR	9561288	EqualityExpression	q == wlimit		9561205	0		==			
ANR	9561289	Identifier	q		9561205	0					
ANR	9561290	Identifier	wlimit		9561205	1					
ANR	9561291	CompoundStatement		13:21:315:315	9561205	1					
ANR	9561292	ExpressionStatement	p -= n	249:23:6542:6548	9561205	0	True				
ANR	9561293	AssignmentExpression	p -= n		9561205	0		-=			
ANR	9561294	Identifier	p		9561205	0					
ANR	9561295	Identifier	n		9561205	1					
ANR	9561296	ExpressionStatement	status = 1	249:31:6550:6560	9561205	1	True				
ANR	9561297	AssignmentExpression	status = 1		9561205	0		=			
ANR	9561298	Identifier	status		9561205	0					
ANR	9561299	PrimaryExpression	1		9561205	1					
ANR	9561300	GotoStatement	goto out ;	249:43:6562:6570	9561205	2	True				
ANR	9561301	Identifier	out		9561205	0					
ANR	9561302	WhileStatement	while ( p < rlimit )		9561205	22					
ANR	9561303	Condition	p < rlimit	250:11:6585:6594	9561205	0	True				
ANR	9561304	RelationalExpression	p < rlimit		9561205	0		<			
ANR	9561305	Identifier	p		9561205	0					
ANR	9561306	Identifier	rlimit		9561205	1					
ANR	9561307	CompoundStatement		14:23:372:372	9561205	1					
ANR	9561308	ExpressionStatement	c = * ++ p	251:8:6607:6615	9561205	0	True				
ANR	9561309	AssignmentExpression	c = * ++ p		9561205	0		=			
ANR	9561310	Identifier	c		9561205	0					
ANR	9561311	UnaryOperationExpression	* ++ p		9561205	1					
ANR	9561312	UnaryOperator	*		9561205	0					
ANR	9561313	UnaryExpression	++ p		9561205	1					
ANR	9561314	IncDec	++		9561205	0					
ANR	9561315	Identifier	p		9561205	1					
ANR	9561316	IfStatement	if ( c == '\\\\' && ! ss -> from_string )		9561205	1					
ANR	9561317	Condition	c == '\\\\' && ! ss -> from_string	252:12:6629:6657	9561205	0	True				
ANR	9561318	AndExpression	c == '\\\\' && ! ss -> from_string		9561205	0		&&			
ANR	9561319	EqualityExpression	c == '\\\\'		9561205	0		==			
ANR	9561320	Identifier	c		9561205	0					
ANR	9561321	PrimaryExpression	'\\\\'		9561205	1					
ANR	9561322	UnaryOperationExpression	! ss -> from_string		9561205	1					
ANR	9561323	UnaryOperator	!		9561205	0					
ANR	9561324	PtrMemberAccess	ss -> from_string		9561205	1					
ANR	9561325	Identifier	ss		9561205	0					
ANR	9561326	Identifier	from_string		9561205	1					
ANR	9561327	CompoundStatement		16:43:435:435	9561205	1					
ANR	9561328	ExpressionStatement	check_p ( 1 )	253:12:6674:6684	9561205	0	True				
ANR	9561329	CallExpression	check_p ( 1 )		9561205	0					
ANR	9561330	Callee	check_p		9561205	0					
ANR	9561331	Identifier	check_p		9561205	0					
ANR	9561332	ArgumentList	1		9561205	1					
ANR	9561333	Argument	1		9561205	0					
ANR	9561334	PrimaryExpression	1		9561205	0					
ANR	9561335	SwitchStatement	switch ( ( c = * ++ p ) )		9561205	1					
ANR	9561336	Condition	c = * ++ p	254:20:6706:6715	9561205	0	True				
ANR	9561337	AssignmentExpression	c = * ++ p		9561205	0		=			
ANR	9561338	Identifier	c		9561205	0					
ANR	9561339	UnaryOperationExpression	* ++ p		9561205	1					
ANR	9561340	UnaryOperator	*		9561205	0					
ANR	9561341	UnaryExpression	++ p		9561205	1					
ANR	9561342	IncDec	++		9561205	0					
ANR	9561343	Identifier	p		9561205	1					
ANR	9561344	CompoundStatement		18:32:493:493	9561205	1					
ANR	9561345	Label	case 'n' :	255:16:6736:6744	9561205	0	True				
ANR	9561346	ExpressionStatement	c = '\\n'	256:20:6766:6774	9561205	1	True				
ANR	9561347	AssignmentExpression	c = '\\n'		9561205	0		=			
ANR	9561348	Identifier	c		9561205	0					
ANR	9561349	PrimaryExpression	'\\n'		9561205	1					
ANR	9561350	GotoStatement	goto put ;	257:20:6796:6804	9561205	2	True				
ANR	9561351	Identifier	put		9561205	0					
ANR	9561352	Label	case 'r' :	258:16:6822:6830	9561205	3	True				
ANR	9561353	ExpressionStatement	c = '\\r'	259:20:6852:6860	9561205	4	True				
ANR	9561354	AssignmentExpression	c = '\\r'		9561205	0		=			
ANR	9561355	Identifier	c		9561205	0					
ANR	9561356	PrimaryExpression	'\\r'		9561205	1					
ANR	9561357	GotoStatement	goto put ;	260:20:6882:6890	9561205	5	True				
ANR	9561358	Identifier	put		9561205	0					
ANR	9561359	Label	case 't' :	261:16:6908:6916	9561205	6	True				
ANR	9561360	ExpressionStatement	c = '\\t'	262:20:6938:6946	9561205	7	True				
ANR	9561361	AssignmentExpression	c = '\\t'		9561205	0		=			
ANR	9561362	Identifier	c		9561205	0					
ANR	9561363	PrimaryExpression	'\\t'		9561205	1					
ANR	9561364	GotoStatement	goto put ;	263:20:6968:6976	9561205	8	True				
ANR	9561365	Identifier	put		9561205	0					
ANR	9561366	Label	case 'b' :	264:16:6994:7002	9561205	9	True				
ANR	9561367	ExpressionStatement	c = '\\b'	265:20:7024:7032	9561205	10	True				
ANR	9561368	AssignmentExpression	c = '\\b'		9561205	0		=			
ANR	9561369	Identifier	c		9561205	0					
ANR	9561370	PrimaryExpression	'\\b'		9561205	1					
ANR	9561371	GotoStatement	goto put ;	266:20:7054:7062	9561205	11	True				
ANR	9561372	Identifier	put		9561205	0					
ANR	9561373	Label	case 'f' :	267:16:7080:7088	9561205	12	True				
ANR	9561374	ExpressionStatement	c = '\\f'	268:20:7110:7118	9561205	13	True				
ANR	9561375	AssignmentExpression	c = '\\f'		9561205	0		=			
ANR	9561376	Identifier	c		9561205	0					
ANR	9561377	PrimaryExpression	'\\f'		9561205	1					
ANR	9561378	GotoStatement	goto put ;	269:20:7140:7148	9561205	14	True				
ANR	9561379	Identifier	put		9561205	0					
ANR	9561380	Label	default :	270:16:7166:7173	9561205	15	True				
ANR	9561381	Identifier	default		9561205	0					
ANR	9561382	Label	put :	271:18:7212:7215	9561205	16	True				
ANR	9561383	Identifier	put		9561205	0					
ANR	9561384	ExpressionStatement	check_q ( 2 )	271:22:7216:7226	9561205	17	True				
ANR	9561385	CallExpression	check_q ( 2 )		9561205	0					
ANR	9561386	Callee	check_q		9561205	0					
ANR	9561387	Identifier	check_q		9561205	0					
ANR	9561388	ArgumentList	2		9561205	1					
ANR	9561389	Argument	2		9561205	0					
ANR	9561390	PrimaryExpression	2		9561205	0					
ANR	9561391	ExpressionStatement	* ++ q = c	272:20:7248:7256	9561205	18	True				
ANR	9561392	AssignmentExpression	* ++ q = c		9561205	0		=			
ANR	9561393	UnaryOperationExpression	* ++ q		9561205	0					
ANR	9561394	UnaryOperator	*		9561205	0					
ANR	9561395	UnaryExpression	++ q		9561205	1					
ANR	9561396	IncDec	++		9561205	0					
ANR	9561397	Identifier	q		9561205	1					
ANR	9561398	Identifier	c		9561205	1					
ANR	9561399	ContinueStatement	continue ;	273:20:7278:7286	9561205	19	True				
ANR	9561400	Label	case char_CR :	274:16:7304:7316	9561205	20	True				
ANR	9561401	Identifier	char_CR		9561205	0					
ANR	9561402	ExpressionStatement	check_p ( 2 )	275:20:7375:7385	9561205	21	True				
ANR	9561403	CallExpression	check_p ( 2 )		9561205	0					
ANR	9561404	Callee	check_p		9561205	0					
ANR	9561405	Identifier	check_p		9561205	0					
ANR	9561406	ArgumentList	2		9561205	1					
ANR	9561407	Argument	2		9561205	0					
ANR	9561408	PrimaryExpression	2		9561205	0					
ANR	9561409	IfStatement	if ( p [ 1 ] == char_EOL )		9561205	22					
ANR	9561410	Condition	p [ 1 ] == char_EOL	276:24:7411:7426	9561205	0	True				
ANR	9561411	EqualityExpression	p [ 1 ] == char_EOL		9561205	0		==			
ANR	9561412	ArrayIndexing	p [ 1 ]		9561205	0					
ANR	9561413	Identifier	p		9561205	0					
ANR	9561414	PrimaryExpression	1		9561205	1					
ANR	9561415	Identifier	char_EOL		9561205	1					
ANR	9561416	ExpressionStatement	p ++	277:24:7453:7456	9561205	1	True				
ANR	9561417	PostIncDecOperationExpression	p ++		9561205	0					
ANR	9561418	Identifier	p		9561205	0					
ANR	9561419	IncDec	++		9561205	1					
ANR	9561420	ContinueStatement	continue ;	278:20:7478:7486	9561205	23	True				
ANR	9561421	Label	case char_EOL :	279:16:7504:7517	9561205	24	True				
ANR	9561422	Identifier	char_EOL		9561205	0					
ANR	9561423	ContinueStatement	continue ;	280:20:7552:7560	9561205	25	True				
ANR	9561424	Label	case '0' :	281:16:7578:7586	9561205	26	True				
ANR	9561425	Label	case '1' :	282:16:7604:7612	9561205	27	True				
ANR	9561426	Label	case '2' :	283:16:7630:7638	9561205	28	True				
ANR	9561427	Label	case '3' :	284:16:7656:7664	9561205	29	True				
ANR	9561428	Label	case '4' :	285:16:7682:7690	9561205	30	True				
ANR	9561429	Label	case '5' :	286:16:7708:7716	9561205	31	True				
ANR	9561430	Label	case '6' :	287:16:7734:7742	9561205	32	True				
ANR	9561431	Label	case '7' :	288:16:7760:7768	9561205	33	True				
ANR	9561432	CompoundStatement		54:24:1591:1596	9561205	34					
ANR	9561433	IdentifierDeclStatement	int d ;	290:24:7816:7821	9561205	0	True				
ANR	9561434	IdentifierDecl	d		9561205	0					
ANR	9561435	IdentifierDeclType	int		9561205	0					
ANR	9561436	Identifier	d		9561205	1					
ANR	9561437	ExpressionStatement	check_p ( 2 )	292:24:7848:7858	9561205	1	True				
ANR	9561438	CallExpression	check_p ( 2 )		9561205	0					
ANR	9561439	Callee	check_p		9561205	0					
ANR	9561440	Identifier	check_p		9561205	0					
ANR	9561441	ArgumentList	2		9561205	1					
ANR	9561442	Argument	2		9561205	0					
ANR	9561443	PrimaryExpression	2		9561205	0					
ANR	9561444	ExpressionStatement	d = p [ 1 ]	293:24:7884:7892	9561205	2	True				
ANR	9561445	AssignmentExpression	d = p [ 1 ]		9561205	0		=			
ANR	9561446	Identifier	d		9561205	0					
ANR	9561447	ArrayIndexing	p [ 1 ]		9561205	1					
ANR	9561448	Identifier	p		9561205	0					
ANR	9561449	PrimaryExpression	1		9561205	1					
ANR	9561450	ExpressionStatement	c -= '0'	294:24:7918:7926	9561205	3	True				
ANR	9561451	AssignmentExpression	c -= '0'		9561205	0		-=			
ANR	9561452	Identifier	c		9561205	0					
ANR	9561453	PrimaryExpression	'0'		9561205	1					
ANR	9561454	IfStatement	if ( d >= '0' && d <= '7' )		9561205	4					
ANR	9561455	Condition	d >= '0' && d <= '7'	295:28:7956:7975	9561205	0	True				
ANR	9561456	AndExpression	d >= '0' && d <= '7'		9561205	0		&&			
ANR	9561457	RelationalExpression	d >= '0'		9561205	0		>=			
ANR	9561458	Identifier	d		9561205	0					
ANR	9561459	PrimaryExpression	'0'		9561205	1					
ANR	9561460	RelationalExpression	d <= '7'		9561205	1		<=			
ANR	9561461	Identifier	d		9561205	0					
ANR	9561462	PrimaryExpression	'7'		9561205	1					
ANR	9561463	CompoundStatement		59:50:1753:1753	9561205	1					
ANR	9561464	IfStatement	if ( p + 1 == rlimit )		9561205	0					
ANR	9561465	Condition	p + 1 == rlimit	296:32:8012:8026	9561205	0	True				
ANR	9561466	EqualityExpression	p + 1 == rlimit		9561205	0		==			
ANR	9561467	AdditiveExpression	p + 1		9561205	0		+			
ANR	9561468	Identifier	p		9561205	0					
ANR	9561469	PrimaryExpression	1		9561205	1					
ANR	9561470	Identifier	rlimit		9561205	1					
ANR	9561471	CompoundStatement		60:49:1804:1804	9561205	1					
ANR	9561472	ExpressionStatement	p -= 2	297:32:8063:8069	9561205	0	True				
ANR	9561473	AssignmentExpression	p -= 2		9561205	0		-=			
ANR	9561474	Identifier	p		9561205	0					
ANR	9561475	PrimaryExpression	2		9561205	1					
ANR	9561476	GotoStatement	goto out ;	298:32:8103:8111	9561205	1	True				
ANR	9561477	Identifier	out		9561205	0					
ANR	9561478	ExpressionStatement	check_q ( 2 )	300:28:8171:8181	9561205	1	True				
ANR	9561479	CallExpression	check_q ( 2 )		9561205	0					
ANR	9561480	Callee	check_q		9561205	0					
ANR	9561481	Identifier	check_q		9561205	0					
ANR	9561482	ArgumentList	2		9561205	1					
ANR	9561483	Argument	2		9561205	0					
ANR	9561484	PrimaryExpression	2		9561205	0					
ANR	9561485	ExpressionStatement	c = ( c << 3 ) + d - '0'	301:28:8211:8233	9561205	2	True				
ANR	9561486	AssignmentExpression	c = ( c << 3 ) + d - '0'		9561205	0		=			
ANR	9561487	Identifier	c		9561205	0					
ANR	9561488	AdditiveExpression	( c << 3 ) + d - '0'		9561205	1		+			
ANR	9561489	ShiftExpression	c << 3		9561205	0		<<			
ANR	9561490	Identifier	c		9561205	0					
ANR	9561491	PrimaryExpression	3		9561205	1					
ANR	9561492	AdditiveExpression	d - '0'		9561205	1		-			
ANR	9561493	Identifier	d		9561205	0					
ANR	9561494	PrimaryExpression	'0'		9561205	1					
ANR	9561495	ExpressionStatement	d = p [ 2 ]	302:28:8263:8271	9561205	3	True				
ANR	9561496	AssignmentExpression	d = p [ 2 ]		9561205	0		=			
ANR	9561497	Identifier	d		9561205	0					
ANR	9561498	ArrayIndexing	p [ 2 ]		9561205	1					
ANR	9561499	Identifier	p		9561205	0					
ANR	9561500	PrimaryExpression	2		9561205	1					
ANR	9561501	IfStatement	if ( d >= '0' && d <= '7' )		9561205	4					
ANR	9561502	Condition	d >= '0' && d <= '7'	303:32:8305:8324	9561205	0	True				
ANR	9561503	AndExpression	d >= '0' && d <= '7'		9561205	0		&&			
ANR	9561504	RelationalExpression	d >= '0'		9561205	0		>=			
ANR	9561505	Identifier	d		9561205	0					
ANR	9561506	PrimaryExpression	'0'		9561205	1					
ANR	9561507	RelationalExpression	d <= '7'		9561205	1		<=			
ANR	9561508	Identifier	d		9561205	0					
ANR	9561509	PrimaryExpression	'7'		9561205	1					
ANR	9561510	CompoundStatement		67:54:2102:2102	9561205	1					
ANR	9561511	ExpressionStatement	c = ( c << 3 ) + d - '0'	304:32:8361:8383	9561205	0	True				
ANR	9561512	AssignmentExpression	c = ( c << 3 ) + d - '0'		9561205	0		=			
ANR	9561513	Identifier	c		9561205	0					
ANR	9561514	AdditiveExpression	( c << 3 ) + d - '0'		9561205	1		+			
ANR	9561515	ShiftExpression	c << 3		9561205	0		<<			
ANR	9561516	Identifier	c		9561205	0					
ANR	9561517	PrimaryExpression	3		9561205	1					
ANR	9561518	AdditiveExpression	d - '0'		9561205	1		-			
ANR	9561519	Identifier	d		9561205	0					
ANR	9561520	PrimaryExpression	'0'		9561205	1					
ANR	9561521	ExpressionStatement	p += 2	305:32:8417:8423	9561205	1	True				
ANR	9561522	AssignmentExpression	p += 2		9561205	0		+=			
ANR	9561523	Identifier	p		9561205	0					
ANR	9561524	PrimaryExpression	2		9561205	1					
ANR	9561525	ElseStatement	else		9561205	0					
ANR	9561526	ExpressionStatement	p ++	307:32:8492:8495	9561205	0	True				
ANR	9561527	PostIncDecOperationExpression	p ++		9561205	0					
ANR	9561528	Identifier	p		9561205	0					
ANR	9561529	IncDec	++		9561205	1					
ANR	9561530	ElseStatement	else		9561205	0					
ANR	9561531	ExpressionStatement	check_q ( 2 )	309:28:8556:8566	9561205	0	True				
ANR	9561532	CallExpression	check_q ( 2 )		9561205	0					
ANR	9561533	Callee	check_q		9561205	0					
ANR	9561534	Identifier	check_q		9561205	0					
ANR	9561535	ArgumentList	2		9561205	1					
ANR	9561536	Argument	2		9561205	0					
ANR	9561537	PrimaryExpression	2		9561205	0					
ANR	9561538	ExpressionStatement	* ++ q = c	310:24:8592:8600	9561205	5	True				
ANR	9561539	AssignmentExpression	* ++ q = c		9561205	0		=			
ANR	9561540	UnaryOperationExpression	* ++ q		9561205	0					
ANR	9561541	UnaryOperator	*		9561205	0					
ANR	9561542	UnaryExpression	++ q		9561205	1					
ANR	9561543	IncDec	++		9561205	0					
ANR	9561544	Identifier	q		9561205	1					
ANR	9561545	Identifier	c		9561205	1					
ANR	9561546	ContinueStatement	continue ;	311:24:8626:8634	9561205	6	True				
ANR	9561547	ElseStatement	else		9561205	0					
ANR	9561548	SwitchStatement	switch ( c )		9561205	0					
ANR	9561549	Condition	c	315:20:8707:8707	9561205	0	True				
ANR	9561550	Identifier	c		9561205	0					
ANR	9561551	CompoundStatement		79:23:2485:2485	9561205	1					
ANR	9561552	Label	case '(' :	316:16:8728:8736	9561205	0	True				
ANR	9561553	ExpressionStatement	check_q ( 1 )	317:20:8758:8768	9561205	1	True				
ANR	9561554	CallExpression	check_q ( 1 )		9561205	0					
ANR	9561555	Callee	check_q		9561205	0					
ANR	9561556	Identifier	check_q		9561205	0					
ANR	9561557	ArgumentList	1		9561205	1					
ANR	9561558	Argument	1		9561205	0					
ANR	9561559	PrimaryExpression	1		9561205	0					
ANR	9561560	ExpressionStatement	ss -> depth ++	318:20:8790:8801	9561205	2	True				
ANR	9561561	PostIncDecOperationExpression	ss -> depth ++		9561205	0					
ANR	9561562	PtrMemberAccess	ss -> depth		9561205	0					
ANR	9561563	Identifier	ss		9561205	0					
ANR	9561564	Identifier	depth		9561205	1					
ANR	9561565	IncDec	++		9561205	1					
ANR	9561566	BreakStatement	break ;	319:20:8823:8828	9561205	3	True				
ANR	9561567	Label	case ')' :	320:16:8846:8854	9561205	4	True				
ANR	9561568	IfStatement	if ( ss -> depth == 0 )		9561205	5					
ANR	9561569	Condition	ss -> depth == 0	321:24:8880:8893	9561205	0	True				
ANR	9561570	EqualityExpression	ss -> depth == 0		9561205	0		==			
ANR	9561571	PtrMemberAccess	ss -> depth		9561205	0					
ANR	9561572	Identifier	ss		9561205	0					
ANR	9561573	Identifier	depth		9561205	1					
ANR	9561574	PrimaryExpression	0		9561205	1					
ANR	9561575	CompoundStatement		85:40:2671:2671	9561205	1					
ANR	9561576	ExpressionStatement	status = EOFC	322:24:8922:8935	9561205	0	True				
ANR	9561577	AssignmentExpression	status = EOFC		9561205	0		=			
ANR	9561578	Identifier	status		9561205	0					
ANR	9561579	Identifier	EOFC		9561205	1					
ANR	9561580	GotoStatement	goto out ;	323:24:8961:8969	9561205	1	True				
ANR	9561581	Identifier	out		9561205	0					
ANR	9561582	ExpressionStatement	check_q ( 1 )	325:20:9013:9023	9561205	6	True				
ANR	9561583	CallExpression	check_q ( 1 )		9561205	0					
ANR	9561584	Callee	check_q		9561205	0					
ANR	9561585	Identifier	check_q		9561205	0					
ANR	9561586	ArgumentList	1		9561205	1					
ANR	9561587	Argument	1		9561205	0					
ANR	9561588	PrimaryExpression	1		9561205	0					
ANR	9561589	ExpressionStatement	ss -> depth --	326:20:9045:9056	9561205	7	True				
ANR	9561590	PostIncDecOperationExpression	ss -> depth --		9561205	0					
ANR	9561591	PtrMemberAccess	ss -> depth		9561205	0					
ANR	9561592	Identifier	ss		9561205	0					
ANR	9561593	Identifier	depth		9561205	1					
ANR	9561594	IncDec	--		9561205	1					
ANR	9561595	BreakStatement	break ;	327:20:9078:9083	9561205	8	True				
ANR	9561596	Label	case char_CR :	328:16:9101:9113	9561205	9	True				
ANR	9561597	Identifier	char_CR		9561205	0					
ANR	9561598	ExpressionStatement	check_p ( 1 )	329:20:9155:9165	9561205	10	True				
ANR	9561599	CallExpression	check_p ( 1 )		9561205	0					
ANR	9561600	Callee	check_p		9561205	0					
ANR	9561601	Identifier	check_p		9561205	0					
ANR	9561602	ArgumentList	1		9561205	1					
ANR	9561603	Argument	1		9561205	0					
ANR	9561604	PrimaryExpression	1		9561205	0					
ANR	9561605	ExpressionStatement	check_q ( 1 )	330:20:9187:9197	9561205	11	True				
ANR	9561606	CallExpression	check_q ( 1 )		9561205	0					
ANR	9561607	Callee	check_q		9561205	0					
ANR	9561608	Identifier	check_q		9561205	0					
ANR	9561609	ArgumentList	1		9561205	1					
ANR	9561610	Argument	1		9561205	0					
ANR	9561611	PrimaryExpression	1		9561205	0					
ANR	9561612	IfStatement	if ( p [ 1 ] == char_EOL )		9561205	12					
ANR	9561613	Condition	p [ 1 ] == char_EOL	331:24:9223:9238	9561205	0	True				
ANR	9561614	EqualityExpression	p [ 1 ] == char_EOL		9561205	0		==			
ANR	9561615	ArrayIndexing	p [ 1 ]		9561205	0					
ANR	9561616	Identifier	p		9561205	0					
ANR	9561617	PrimaryExpression	1		9561205	1					
ANR	9561618	Identifier	char_EOL		9561205	1					
ANR	9561619	ExpressionStatement	p ++	332:24:9265:9268	9561205	1	True				
ANR	9561620	PostIncDecOperationExpression	p ++		9561205	0					
ANR	9561621	Identifier	p		9561205	0					
ANR	9561622	IncDec	++		9561205	1					
ANR	9561623	ExpressionStatement	* ++ q = '\\n'	333:20:9290:9301	9561205	13	True				
ANR	9561624	AssignmentExpression	* ++ q = '\\n'		9561205	0		=			
ANR	9561625	UnaryOperationExpression	* ++ q		9561205	0					
ANR	9561626	UnaryOperator	*		9561205	0					
ANR	9561627	UnaryExpression	++ q		9561205	1					
ANR	9561628	IncDec	++		9561205	0					
ANR	9561629	Identifier	q		9561205	1					
ANR	9561630	PrimaryExpression	'\\n'		9561205	1					
ANR	9561631	ContinueStatement	continue ;	334:20:9323:9331	9561205	14	True				
ANR	9561632	Label	case char_EOL :	335:16:9349:9362	9561205	15	True				
ANR	9561633	Identifier	char_EOL		9561205	0					
ANR	9561634	ExpressionStatement	c = '\\n'	336:20:9384:9392	9561205	16	True				
ANR	9561635	AssignmentExpression	c = '\\n'		9561205	0		=			
ANR	9561636	Identifier	c		9561205	0					
ANR	9561637	PrimaryExpression	'\\n'		9561205	1					
ANR	9561638	Label	default :	338:16:9449:9456	9561205	17	True				
ANR	9561639	Identifier	default		9561205	0					
ANR	9561640	ExpressionStatement	check_q ( 1 )	339:20:9478:9488	9561205	18	True				
ANR	9561641	CallExpression	check_q ( 1 )		9561205	0					
ANR	9561642	Callee	check_q		9561205	0					
ANR	9561643	Identifier	check_q		9561205	0					
ANR	9561644	ArgumentList	1		9561205	1					
ANR	9561645	Argument	1		9561205	0					
ANR	9561646	PrimaryExpression	1		9561205	0					
ANR	9561647	BreakStatement	break ;	340:20:9510:9515	9561205	19	True				
ANR	9561648	ExpressionStatement	* ++ q = c	342:8:9539:9547	9561205	2	True				
ANR	9561649	AssignmentExpression	* ++ q = c		9561205	0		=			
ANR	9561650	UnaryOperationExpression	* ++ q		9561205	0					
ANR	9561651	UnaryOperator	*		9561205	0					
ANR	9561652	UnaryExpression	++ q		9561205	1					
ANR	9561653	IncDec	++		9561205	0					
ANR	9561654	Identifier	q		9561205	1					
ANR	9561655	Identifier	c		9561205	1					
ANR	9561656	Statement	undef	344:1:9556:9560	9561205	23	True				
ANR	9561657	Statement	check_p	344:7:9562:9568	9561205	24	True				
ANR	9561658	Statement	undef	345:1:9571:9575	9561205	25	True				
ANR	9561659	Statement	check_q	345:7:9577:9583	9561205	26	True				
ANR	9561660	Label	out :	346:2:9587:9590	9561205	27	True				
ANR	9561661	Identifier	out		9561205	0					
ANR	9561662	ExpressionStatement	pr -> ptr = p	346:6:9591:9602	9561205	28	True				
ANR	9561663	AssignmentExpression	pr -> ptr = p		9561205	0		=			
ANR	9561664	PtrMemberAccess	pr -> ptr		9561205	0					
ANR	9561665	Identifier	pr		9561205	0					
ANR	9561666	Identifier	ptr		9561205	1					
ANR	9561667	Identifier	p		9561205	1					
ANR	9561668	ExpressionStatement	pw -> ptr = q	347:4:9608:9619	9561205	29	True				
ANR	9561669	AssignmentExpression	pw -> ptr = q		9561205	0		=			
ANR	9561670	PtrMemberAccess	pw -> ptr		9561205	0					
ANR	9561671	Identifier	pw		9561205	0					
ANR	9561672	Identifier	ptr		9561205	1					
ANR	9561673	Identifier	q		9561205	1					
ANR	9561674	IfStatement	if ( last && status == 0 && p != rlimit )		9561205	30					
ANR	9561675	Condition	last && status == 0 && p != rlimit	348:8:9629:9662	9561205	0	True				
ANR	9561676	AndExpression	last && status == 0 && p != rlimit		9561205	0		&&			
ANR	9561677	Identifier	last		9561205	0					
ANR	9561678	AndExpression	status == 0 && p != rlimit		9561205	1		&&			
ANR	9561679	EqualityExpression	status == 0		9561205	0		==			
ANR	9561680	Identifier	status		9561205	0					
ANR	9561681	PrimaryExpression	0		9561205	1					
ANR	9561682	EqualityExpression	p != rlimit		9561205	1		!=			
ANR	9561683	Identifier	p		9561205	0					
ANR	9561684	Identifier	rlimit		9561205	1					
ANR	9561685	ExpressionStatement	status = ERRC	349:8:9673:9686	9561205	1	True				
ANR	9561686	AssignmentExpression	status = ERRC		9561205	0		=			
ANR	9561687	Identifier	status		9561205	0					
ANR	9561688	Identifier	ERRC		9561205	1					
ANR	9561689	ReturnStatement	return status ;	350:4:9692:9705	9561205	31	True				
ANR	9561690	Identifier	status		9561205	0					
ANR	9561691	ReturnType	static int		9561205	1					
ANR	9561692	Identifier	s_PSSD_process		9561205	2					
ANR	9561693	ParameterList	"stream_state * st , stream_cursor_read * pr , stream_cursor_write * pw , bool last"		9561205	3					
ANR	9561694	Parameter	stream_state * st	235:15:6128:6144	9561205	0	True				
ANR	9561695	ParameterType	stream_state *		9561205	0					
ANR	9561696	Identifier	st		9561205	1					
ANR	9561697	Parameter	stream_cursor_read * pr	235:34:6147:6169	9561205	1	True				
ANR	9561698	ParameterType	stream_cursor_read *		9561205	0					
ANR	9561699	Identifier	pr		9561205	1					
ANR	9561700	Parameter	stream_cursor_write * pw	236:15:6187:6210	9561205	2	True				
ANR	9561701	ParameterType	stream_cursor_write *		9561205	0					
ANR	9561702	Identifier	pw		9561205	1					
ANR	9561703	Parameter	bool last	236:41:6213:6221	9561205	3	True				
ANR	9561704	ParameterType	bool		9561205	0					
ANR	9561705	Identifier	last		9561205	1					
ANR	9561706	CFGEntryNode	ENTRY		9561205		True				
ANR	9561707	CFGExitNode	EXIT		9561205		True				
ANR	9561708	Symbol	pr		9561205						
ANR	9561709	Symbol	ss -> from_string		9561205						
ANR	9561710	Symbol	* ss		9561205						
ANR	9561711	Symbol	pw		9561205						
ANR	9561712	Symbol	EOFC		9561205						
ANR	9561713	Symbol	pr -> limit		9561205						
ANR	9561714	Symbol	pw -> limit		9561205						
ANR	9561715	Symbol	wlimit		9561205						
ANR	9561716	Symbol	pr -> ptr		9561205						
ANR	9561717	Symbol	pw -> ptr		9561205						
ANR	9561718	Symbol	ss		9561205						
ANR	9561719	Symbol	st		9561205						
ANR	9561720	Symbol	rlimit		9561205						
ANR	9561721	Symbol	c		9561205						
ANR	9561722	Symbol	last		9561205						
ANR	9561723	Symbol	* ++ p		9561205						
ANR	9561724	Symbol	d		9561205						
ANR	9561725	Symbol	* ++ q		9561205						
ANR	9561726	Symbol	* pr		9561205						
ANR	9561727	Symbol	char_EOL		9561205						
ANR	9561728	Symbol	* pw		9561205						
ANR	9561729	Symbol	n		9561205						
ANR	9561730	Symbol	p		9561205						
ANR	9561731	Symbol	q		9561205						
ANR	9561732	Symbol	* p		9561205						
ANR	9561733	Symbol	* q		9561205						
ANR	9561734	Symbol	ERRC		9561205						
ANR	9561735	Symbol	status		9561205						
ANR	9561736	Symbol	ss -> depth		9561205						
ANR	9561737	DeclStmt									
ANR	9561738	Decl							const stream_template	const stream_template	s_PSSD_template
ANR	9561739	Function	s_hex_process	372:0:10365:12970							
ANR	9561740	FunctionDef	"s_hex_process (stream_cursor_read * pr , stream_cursor_write * pw , int * odd_digit , hex_syntax syntax)"		9561739	0					
ANR	9561741	CompoundStatement		375:0:10483:12970	9561739	0					
ANR	9561742	IdentifierDeclStatement	const byte * p = pr -> ptr ;	376:4:10489:10512	9561739	0	True				
ANR	9561743	IdentifierDecl	* p = pr -> ptr		9561739	0					
ANR	9561744	IdentifierDeclType	const byte *		9561739	0					
ANR	9561745	Identifier	p		9561739	1					
ANR	9561746	AssignmentExpression	* p = pr -> ptr		9561739	2		=			
ANR	9561747	Identifier	p		9561739	0					
ANR	9561748	PtrMemberAccess	pr -> ptr		9561739	1					
ANR	9561749	Identifier	pr		9561739	0					
ANR	9561750	Identifier	ptr		9561739	1					
ANR	9561751	IdentifierDeclStatement	const byte * rlimit = pr -> limit ;	377:4:10518:10548	9561739	1	True				
ANR	9561752	IdentifierDecl	* rlimit = pr -> limit		9561739	0					
ANR	9561753	IdentifierDeclType	const byte *		9561739	0					
ANR	9561754	Identifier	rlimit		9561739	1					
ANR	9561755	AssignmentExpression	* rlimit = pr -> limit		9561739	2		=			
ANR	9561756	Identifier	rlimit		9561739	0					
ANR	9561757	PtrMemberAccess	pr -> limit		9561739	1					
ANR	9561758	Identifier	pr		9561739	0					
ANR	9561759	Identifier	limit		9561739	1					
ANR	9561760	IdentifierDeclStatement	byte * q = pw -> ptr ;	378:4:10554:10571	9561739	2	True				
ANR	9561761	IdentifierDecl	* q = pw -> ptr		9561739	0					
ANR	9561762	IdentifierDeclType	byte *		9561739	0					
ANR	9561763	Identifier	q		9561739	1					
ANR	9561764	AssignmentExpression	* q = pw -> ptr		9561739	2		=			
ANR	9561765	Identifier	q		9561739	0					
ANR	9561766	PtrMemberAccess	pw -> ptr		9561739	1					
ANR	9561767	Identifier	pw		9561739	0					
ANR	9561768	Identifier	ptr		9561739	1					
ANR	9561769	IdentifierDeclStatement	byte * wlimit = pw -> limit ;	379:4:10577:10601	9561739	3	True				
ANR	9561770	IdentifierDecl	* wlimit = pw -> limit		9561739	0					
ANR	9561771	IdentifierDeclType	byte *		9561739	0					
ANR	9561772	Identifier	wlimit		9561739	1					
ANR	9561773	AssignmentExpression	* wlimit = pw -> limit		9561739	2		=			
ANR	9561774	Identifier	wlimit		9561739	0					
ANR	9561775	PtrMemberAccess	pw -> limit		9561739	1					
ANR	9561776	Identifier	pw		9561739	0					
ANR	9561777	Identifier	limit		9561739	1					
ANR	9561778	IdentifierDeclStatement	byte * q0 = q ;	380:4:10607:10619	9561739	4	True				
ANR	9561779	IdentifierDecl	* q0 = q		9561739	0					
ANR	9561780	IdentifierDeclType	byte *		9561739	0					
ANR	9561781	Identifier	q0		9561739	1					
ANR	9561782	AssignmentExpression	* q0 = q		9561739	2		=			
ANR	9561783	Identifier	q		9561739	0					
ANR	9561784	Identifier	q		9561739	1					
ANR	9561785	IdentifierDeclStatement	byte val1 = ( byte ) * odd_digit ;	381:4:10625:10655	9561739	5	True				
ANR	9561786	IdentifierDecl	val1 = ( byte ) * odd_digit		9561739	0					
ANR	9561787	IdentifierDeclType	byte		9561739	0					
ANR	9561788	Identifier	val1		9561739	1					
ANR	9561789	AssignmentExpression	val1 = ( byte ) * odd_digit		9561739	2		=			
ANR	9561790	Identifier	val1		9561739	0					
ANR	9561791	CastExpression	( byte ) * odd_digit		9561739	1					
ANR	9561792	CastTarget	byte		9561739	0					
ANR	9561793	UnaryOperationExpression	* odd_digit		9561739	1					
ANR	9561794	UnaryOperator	*		9561739	0					
ANR	9561795	Identifier	odd_digit		9561739	1					
ANR	9561796	IdentifierDeclStatement	byte val2 ;	382:4:10661:10670	9561739	6	True				
ANR	9561797	IdentifierDecl	val2		9561739	0					
ANR	9561798	IdentifierDeclType	byte		9561739	0					
ANR	9561799	Identifier	val2		9561739	1					
ANR	9561800	IdentifierDeclStatement	uint rcount ;	383:4:10676:10687	9561739	7	True				
ANR	9561801	IdentifierDecl	rcount		9561739	0					
ANR	9561802	IdentifierDeclType	uint		9561739	0					
ANR	9561803	Identifier	rcount		9561739	1					
ANR	9561804	IdentifierDeclStatement	byte * flimit ;	384:4:10693:10705	9561739	8	True				
ANR	9561805	IdentifierDecl	* flimit		9561739	0					
ANR	9561806	IdentifierDeclType	byte *		9561739	0					
ANR	9561807	Identifier	flimit		9561739	1					
ANR	9561808	Statement	const	385:4:10711:10715	9561739	9	True				
ANR	9561809	Statement	byte	385:10:10717:10720	9561739	10	True				
ANR	9561810	Statement	*	385:15:10722:10722	9561739	11	True				
ANR	9561811	Statement	const	385:16:10723:10727	9561739	12	True				
ANR	9561812	ExpressionStatement	decoder = scan_char_decoder	385:22:10729:10756	9561739	13	True				
ANR	9561813	AssignmentExpression	decoder = scan_char_decoder		9561739	0		=			
ANR	9561814	Identifier	decoder		9561739	0					
ANR	9561815	Identifier	scan_char_decoder		9561739	1					
ANR	9561816	IdentifierDeclStatement	int code = 0 ;	386:4:10762:10774	9561739	14	True				
ANR	9561817	IdentifierDecl	code = 0		9561739	0					
ANR	9561818	IdentifierDeclType	int		9561739	0					
ANR	9561819	Identifier	code		9561739	1					
ANR	9561820	AssignmentExpression	code = 0		9561739	2		=			
ANR	9561821	Identifier	code		9561739	0					
ANR	9561822	PrimaryExpression	0		9561739	1					
ANR	9561823	IfStatement	if ( q >= wlimit )		9561739	15					
ANR	9561824	Condition	q >= wlimit	388:8:10785:10795	9561739	0	True				
ANR	9561825	RelationalExpression	q >= wlimit		9561739	0		>=			
ANR	9561826	Identifier	q		9561739	0					
ANR	9561827	Identifier	wlimit		9561739	1					
ANR	9561828	ReturnStatement	return 1 ;	389:8:10806:10814	9561739	1	True				
ANR	9561829	PrimaryExpression	1		9561739	0					
ANR	9561830	IfStatement	if ( val1 <= 0xf )		9561739	16					
ANR	9561831	Condition	val1 <= 0xf	390:8:10824:10834	9561739	0	True				
ANR	9561832	RelationalExpression	val1 <= 0xf		9561739	0		<=			
ANR	9561833	Identifier	val1		9561739	0					
ANR	9561834	PrimaryExpression	0xf		9561739	1					
ANR	9561835	GotoStatement	goto d2 ;	391:8:10845:10852	9561739	1	True				
ANR	9561836	Identifier	d2		9561739	0					
ANR	9561837	Label	d1 :	392:2:10856:10858	9561739	17	True				
ANR	9561838	Identifier	d1		9561739	0					
ANR	9561839	IfStatement	if ( ( rcount = ( rlimit - p ) >> 1 ) == 0 )		9561739	18					
ANR	9561840	Condition	( rcount = ( rlimit - p ) >> 1 ) == 0	392:9:10863:10895	9561739	0	True				
ANR	9561841	EqualityExpression	( rcount = ( rlimit - p ) >> 1 ) == 0		9561739	0		==			
ANR	9561842	AssignmentExpression	rcount = ( rlimit - p ) >> 1		9561739	0		=			
ANR	9561843	Identifier	rcount		9561739	0					
ANR	9561844	ShiftExpression	( rlimit - p ) >> 1		9561739	1		>>			
ANR	9561845	AdditiveExpression	rlimit - p		9561739	0		-			
ANR	9561846	Identifier	rlimit		9561739	0					
ANR	9561847	Identifier	p		9561739	1					
ANR	9561848	PrimaryExpression	1		9561739	1					
ANR	9561849	PrimaryExpression	0		9561739	1					
ANR	9561850	GotoStatement	goto x1 ;	393:8:10906:10913	9561739	1	True				
ANR	9561851	Identifier	x1		9561739	0					
ANR	9561852	ExpressionStatement	flimit = ( rcount < wlimit - q ? q + rcount : wlimit )	396:4:11043:11095	9561739	19	True				
ANR	9561853	AssignmentExpression	flimit = ( rcount < wlimit - q ? q + rcount : wlimit )		9561739	0		=			
ANR	9561854	Identifier	flimit		9561739	0					
ANR	9561855	ConditionalExpression	rcount < wlimit - q ? q + rcount : wlimit		9561739	1					
ANR	9561856	Condition	rcount < wlimit - q		9561739	0					
ANR	9561857	RelationalExpression	rcount < wlimit - q		9561739	0		<			
ANR	9561858	Identifier	rcount		9561739	0					
ANR	9561859	AdditiveExpression	wlimit - q		9561739	1		-			
ANR	9561860	Identifier	wlimit		9561739	0					
ANR	9561861	Identifier	q		9561739	1					
ANR	9561862	AdditiveExpression	q + rcount		9561739	1		+			
ANR	9561863	Identifier	q		9561739	0					
ANR	9561864	Identifier	rcount		9561739	1					
ANR	9561865	Identifier	wlimit		9561739	2					
ANR	9561866	Label	f1 :	397:2:11099:11101	9561739	20	True				
ANR	9561867	Identifier	f1		9561739	0					
ANR	9561868	IfStatement	if ( ( val1 = decoder [ p [ 1 ] ] ) <= 0xf && ( val2 = decoder [ p [ 2 ] ] ) <= 0xf )		9561739	21					
ANR	9561869	Condition	( val1 = decoder [ p [ 1 ] ] ) <= 0xf && ( val2 = decoder [ p [ 2 ] ] ) <= 0xf	397:9:11106:11175	9561739	0	True				
ANR	9561870	AndExpression	( val1 = decoder [ p [ 1 ] ] ) <= 0xf && ( val2 = decoder [ p [ 2 ] ] ) <= 0xf		9561739	0		&&			
ANR	9561871	RelationalExpression	( val1 = decoder [ p [ 1 ] ] ) <= 0xf		9561739	0		<=			
ANR	9561872	AssignmentExpression	val1 = decoder [ p [ 1 ] ]		9561739	0		=			
ANR	9561873	Identifier	val1		9561739	0					
ANR	9561874	ArrayIndexing	decoder [ p [ 1 ] ]		9561739	1					
ANR	9561875	Identifier	decoder		9561739	0					
ANR	9561876	ArrayIndexing	p [ 1 ]		9561739	1					
ANR	9561877	Identifier	p		9561739	0					
ANR	9561878	PrimaryExpression	1		9561739	1					
ANR	9561879	PrimaryExpression	0xf		9561739	1					
ANR	9561880	RelationalExpression	( val2 = decoder [ p [ 2 ] ] ) <= 0xf		9561739	1		<=			
ANR	9561881	AssignmentExpression	val2 = decoder [ p [ 2 ] ]		9561739	0		=			
ANR	9561882	Identifier	val2		9561739	0					
ANR	9561883	ArrayIndexing	decoder [ p [ 2 ] ]		9561739	1					
ANR	9561884	Identifier	decoder		9561739	0					
ANR	9561885	ArrayIndexing	p [ 2 ]		9561739	1					
ANR	9561886	Identifier	p		9561739	0					
ANR	9561887	PrimaryExpression	2		9561739	1					
ANR	9561888	PrimaryExpression	0xf		9561739	1					
ANR	9561889	CompoundStatement		25:10:703:703	9561739	1					
ANR	9561890	ExpressionStatement	p += 2	400:8:11197:11203	9561739	0	True				
ANR	9561891	AssignmentExpression	p += 2		9561739	0		+=			
ANR	9561892	Identifier	p		9561739	0					
ANR	9561893	PrimaryExpression	2		9561739	1					
ANR	9561894	ExpressionStatement	* ++ q = ( val1 << 4 ) + val2	401:8:11213:11238	9561739	1	True				
ANR	9561895	AssignmentExpression	* ++ q = ( val1 << 4 ) + val2		9561739	0		=			
ANR	9561896	UnaryOperationExpression	* ++ q		9561739	0					
ANR	9561897	UnaryOperator	*		9561739	0					
ANR	9561898	UnaryExpression	++ q		9561739	1					
ANR	9561899	IncDec	++		9561739	0					
ANR	9561900	Identifier	q		9561739	1					
ANR	9561901	AdditiveExpression	( val1 << 4 ) + val2		9561739	1		+			
ANR	9561902	ShiftExpression	val1 << 4		9561739	0		<<			
ANR	9561903	Identifier	val1		9561739	0					
ANR	9561904	PrimaryExpression	4		9561739	1					
ANR	9561905	Identifier	val2		9561739	1					
ANR	9561906	IfStatement	if ( q < flimit )		9561739	2					
ANR	9561907	Condition	q < flimit	402:12:11252:11261	9561739	0	True				
ANR	9561908	RelationalExpression	q < flimit		9561739	0		<			
ANR	9561909	Identifier	q		9561739	0					
ANR	9561910	Identifier	flimit		9561739	1					
ANR	9561911	GotoStatement	goto f1 ;	403:12:11276:11283	9561739	1	True				
ANR	9561912	Identifier	f1		9561739	0					
ANR	9561913	IfStatement	if ( q >= wlimit )		9561739	3					
ANR	9561914	Condition	q >= wlimit	404:12:11297:11307	9561739	0	True				
ANR	9561915	RelationalExpression	q >= wlimit		9561739	0		>=			
ANR	9561916	Identifier	q		9561739	0					
ANR	9561917	Identifier	wlimit		9561739	1					
ANR	9561918	GotoStatement	goto px ;	405:12:11322:11329	9561739	1	True				
ANR	9561919	Identifier	px		9561739	0					
ANR	9561920	Label	x1 :	407:2:11339:11341	9561739	22	True				
ANR	9561921	Identifier	x1		9561739	0					
ANR	9561922	IfStatement	if ( p >= rlimit )		9561739	23					
ANR	9561923	Condition	p >= rlimit	407:9:11346:11356	9561739	0	True				
ANR	9561924	RelationalExpression	p >= rlimit		9561739	0		>=			
ANR	9561925	Identifier	p		9561739	0					
ANR	9561926	Identifier	rlimit		9561739	1					
ANR	9561927	GotoStatement	goto end1 ;	408:8:11367:11376	9561739	1	True				
ANR	9561928	Identifier	end1		9561739	0					
ANR	9561929	IfStatement	if ( ( val1 = decoder [ * ++ p ] ) > 0xf )		9561739	24					
ANR	9561930	Condition	( val1 = decoder [ * ++ p ] ) > 0xf	409:8:11386:11413	9561739	0	True				
ANR	9561931	RelationalExpression	( val1 = decoder [ * ++ p ] ) > 0xf		9561739	0		>			
ANR	9561932	AssignmentExpression	val1 = decoder [ * ++ p ]		9561739	0		=			
ANR	9561933	Identifier	val1		9561739	0					
ANR	9561934	ArrayIndexing	decoder [ * ++ p ]		9561739	1					
ANR	9561935	Identifier	decoder		9561739	0					
ANR	9561936	UnaryOperationExpression	* ++ p		9561739	1					
ANR	9561937	UnaryOperator	*		9561739	0					
ANR	9561938	UnaryExpression	++ p		9561739	1					
ANR	9561939	IncDec	++		9561739	0					
ANR	9561940	Identifier	p		9561739	1					
ANR	9561941	PrimaryExpression	0xf		9561739	1					
ANR	9561942	CompoundStatement		35:38:932:932	9561739	1					
ANR	9561943	IfStatement	if ( val1 == ctype_space )		9561739	0					
ANR	9561944	Condition	val1 == ctype_space	410:12:11430:11448	9561739	0	True				
ANR	9561945	EqualityExpression	val1 == ctype_space		9561739	0		==			
ANR	9561946	Identifier	val1		9561739	0					
ANR	9561947	Identifier	ctype_space		9561739	1					
ANR	9561948	CompoundStatement		36:33:967:967	9561739	1					
ANR	9561949	SwitchStatement	switch ( syntax )		9561739	0					
ANR	9561950	Condition	syntax	411:20:11473:11478	9561739	0	True				
ANR	9561951	Identifier	syntax		9561739	0					
ANR	9561952	CompoundStatement		37:28:997:997	9561739	1					
ANR	9561953	Label	case hex_ignore_garbage :	412:16:11499:11522	9561739	0	True				
ANR	9561954	Identifier	hex_ignore_garbage		9561739	0					
ANR	9561955	Label	case hex_ignore_whitespace :	413:16:11540:11566	9561739	1	True				
ANR	9561956	Identifier	hex_ignore_whitespace		9561739	0					
ANR	9561957	GotoStatement	goto x1 ;	414:20:11588:11595	9561739	2	True				
ANR	9561958	Identifier	x1		9561739	0					
ANR	9561959	Label	case hex_ignore_leading_whitespace :	415:16:11613:11647	9561739	3	True				
ANR	9561960	Identifier	hex_ignore_leading_whitespace		9561739	0					
ANR	9561961	IfStatement	if ( q == q0 && * odd_digit < 0 )		9561739	4					
ANR	9561962	Condition	q == q0 && * odd_digit < 0	416:24:11673:11697	9561739	0	True				
ANR	9561963	AndExpression	q == q0 && * odd_digit < 0		9561739	0		&&			
ANR	9561964	EqualityExpression	q == q0		9561739	0		==			
ANR	9561965	Identifier	q		9561739	0					
ANR	9561966	Identifier	q0		9561739	1					
ANR	9561967	RelationalExpression	* odd_digit < 0		9561739	1		<			
ANR	9561968	UnaryOperationExpression	* odd_digit		9561739	0					
ANR	9561969	UnaryOperator	*		9561739	0					
ANR	9561970	Identifier	odd_digit		9561739	1					
ANR	9561971	PrimaryExpression	0		9561739	1					
ANR	9561972	GotoStatement	goto x1 ;	417:24:11724:11731	9561739	1	True				
ANR	9561973	Identifier	x1		9561739	0					
ANR	9561974	Label	case hex_break_on_whitespace :	419:16:11788:11816	9561739	5	True				
ANR	9561975	Identifier	hex_break_on_whitespace		9561739	0					
ANR	9561976	ExpressionStatement	-- p	420:20:11838:11841	9561739	6	True				
ANR	9561977	UnaryExpression	-- p		9561739	0					
ANR	9561978	IncDec	--		9561739	0					
ANR	9561979	Identifier	p		9561739	1					
ANR	9561980	ExpressionStatement	code = 2	421:20:11863:11871	9561739	7	True				
ANR	9561981	AssignmentExpression	code = 2		9561739	0		=			
ANR	9561982	Identifier	code		9561739	0					
ANR	9561983	PrimaryExpression	2		9561739	1					
ANR	9561984	GotoStatement	goto end1 ;	422:20:11893:11902	9561739	8	True				
ANR	9561985	Identifier	end1		9561739	0					
ANR	9561986	ElseStatement	else		9561739	0					
ANR	9561987	IfStatement	if ( syntax == hex_ignore_garbage )		9561739	0					
ANR	9561988	Condition	syntax == hex_ignore_garbage	424:19:11937:11964	9561739	0	True				
ANR	9561989	EqualityExpression	syntax == hex_ignore_garbage		9561739	0		==			
ANR	9561990	Identifier	syntax		9561739	0					
ANR	9561991	Identifier	hex_ignore_garbage		9561739	1					
ANR	9561992	GotoStatement	goto x1 ;	425:12:11979:11986	9561739	1	True				
ANR	9561993	Identifier	x1		9561739	0					
ANR	9561994	ExpressionStatement	code = ERRC	426:8:11996:12007	9561739	1	True				
ANR	9561995	AssignmentExpression	code = ERRC		9561739	0		=			
ANR	9561996	Identifier	code		9561739	0					
ANR	9561997	Identifier	ERRC		9561739	1					
ANR	9561998	GotoStatement	goto end1 ;	427:8:12017:12026	9561739	2	True				
ANR	9561999	Identifier	end1		9561739	0					
ANR	9562000	Label	d2 :	429:2:12036:12038	9561739	25	True				
ANR	9562001	Identifier	d2		9561739	0					
ANR	9562002	IfStatement	if ( p >= rlimit )		9561739	26					
ANR	9562003	Condition	p >= rlimit	429:9:12043:12053	9561739	0	True				
ANR	9562004	RelationalExpression	p >= rlimit		9561739	0		>=			
ANR	9562005	Identifier	p		9561739	0					
ANR	9562006	Identifier	rlimit		9561739	1					
ANR	9562007	CompoundStatement		55:22:1572:1572	9561739	1					
ANR	9562008	ExpressionStatement	* odd_digit = val1	430:8:12066:12083	9561739	0	True				
ANR	9562009	AssignmentExpression	* odd_digit = val1		9561739	0		=			
ANR	9562010	UnaryOperationExpression	* odd_digit		9561739	0					
ANR	9562011	UnaryOperator	*		9561739	0					
ANR	9562012	Identifier	odd_digit		9561739	1					
ANR	9562013	Identifier	val1		9561739	1					
ANR	9562014	GotoStatement	goto ended ;	431:8:12093:12103	9561739	1	True				
ANR	9562015	Identifier	ended		9561739	0					
ANR	9562016	IfStatement	if ( ( val2 = decoder [ * ++ p ] ) > 0xf )		9561739	27					
ANR	9562017	Condition	( val2 = decoder [ * ++ p ] ) > 0xf	433:8:12119:12146	9561739	0	True				
ANR	9562018	RelationalExpression	( val2 = decoder [ * ++ p ] ) > 0xf		9561739	0		>			
ANR	9562019	AssignmentExpression	val2 = decoder [ * ++ p ]		9561739	0		=			
ANR	9562020	Identifier	val2		9561739	0					
ANR	9562021	ArrayIndexing	decoder [ * ++ p ]		9561739	1					
ANR	9562022	Identifier	decoder		9561739	0					
ANR	9562023	UnaryOperationExpression	* ++ p		9561739	1					
ANR	9562024	UnaryOperator	*		9561739	0					
ANR	9562025	UnaryExpression	++ p		9561739	1					
ANR	9562026	IncDec	++		9561739	0					
ANR	9562027	Identifier	p		9561739	1					
ANR	9562028	PrimaryExpression	0xf		9561739	1					
ANR	9562029	CompoundStatement		59:38:1665:1665	9561739	1					
ANR	9562030	IfStatement	if ( val2 == ctype_space )		9561739	0					
ANR	9562031	Condition	val2 == ctype_space	434:12:12163:12181	9561739	0	True				
ANR	9562032	EqualityExpression	val2 == ctype_space		9561739	0		==			
ANR	9562033	Identifier	val2		9561739	0					
ANR	9562034	Identifier	ctype_space		9561739	1					
ANR	9562035	SwitchStatement	switch ( syntax )		9561739	1					
ANR	9562036	Condition	syntax	435:20:12204:12209	9561739	0	True				
ANR	9562037	Identifier	syntax		9561739	0					
ANR	9562038	CompoundStatement		61:28:1728:1728	9561739	1					
ANR	9562039	Label	case hex_ignore_garbage :	436:16:12230:12253	9561739	0	True				
ANR	9562040	Identifier	hex_ignore_garbage		9561739	0					
ANR	9562041	Label	case hex_ignore_whitespace :	437:16:12271:12297	9561739	1	True				
ANR	9562042	Identifier	hex_ignore_whitespace		9561739	0					
ANR	9562043	GotoStatement	goto d2 ;	438:20:12319:12326	9561739	2	True				
ANR	9562044	Identifier	d2		9561739	0					
ANR	9562045	Label	case hex_ignore_leading_whitespace :	439:16:12344:12378	9561739	3	True				
ANR	9562046	Identifier	hex_ignore_leading_whitespace		9561739	0					
ANR	9562047	IfStatement	if ( q == q0 )		9561739	4					
ANR	9562048	Condition	q == q0	440:24:12404:12410	9561739	0	True				
ANR	9562049	EqualityExpression	q == q0		9561739	0		==			
ANR	9562050	Identifier	q		9561739	0					
ANR	9562051	Identifier	q0		9561739	1					
ANR	9562052	GotoStatement	goto d2 ;	441:24:12437:12444	9561739	1	True				
ANR	9562053	Identifier	d2		9561739	0					
ANR	9562054	Label	case hex_break_on_whitespace :	443:16:12501:12529	9561739	5	True				
ANR	9562055	Identifier	hex_break_on_whitespace		9561739	0					
ANR	9562056	ExpressionStatement	-- p	444:20:12551:12554	9561739	6	True				
ANR	9562057	UnaryExpression	-- p		9561739	0					
ANR	9562058	IncDec	--		9561739	0					
ANR	9562059	Identifier	p		9561739	1					
ANR	9562060	ExpressionStatement	* odd_digit = val1	445:20:12576:12593	9561739	7	True				
ANR	9562061	AssignmentExpression	* odd_digit = val1		9561739	0		=			
ANR	9562062	UnaryOperationExpression	* odd_digit		9561739	0					
ANR	9562063	UnaryOperator	*		9561739	0					
ANR	9562064	Identifier	odd_digit		9561739	1					
ANR	9562065	Identifier	val1		9561739	1					
ANR	9562066	ExpressionStatement	code = 2	446:20:12615:12623	9561739	8	True				
ANR	9562067	AssignmentExpression	code = 2		9561739	0		=			
ANR	9562068	Identifier	code		9561739	0					
ANR	9562069	PrimaryExpression	2		9561739	1					
ANR	9562070	GotoStatement	goto ended ;	447:20:12645:12655	9561739	9	True				
ANR	9562071	Identifier	ended		9561739	0					
ANR	9562072	IfStatement	if ( syntax == hex_ignore_garbage )		9561739	1					
ANR	9562073	Condition	syntax == hex_ignore_garbage	449:12:12683:12710	9561739	0	True				
ANR	9562074	EqualityExpression	syntax == hex_ignore_garbage		9561739	0		==			
ANR	9562075	Identifier	syntax		9561739	0					
ANR	9562076	Identifier	hex_ignore_garbage		9561739	1					
ANR	9562077	GotoStatement	goto d2 ;	450:12:12725:12732	9561739	1	True				
ANR	9562078	Identifier	d2		9561739	0					
ANR	9562079	ExpressionStatement	* odd_digit = val1	451:8:12742:12759	9561739	2	True				
ANR	9562080	AssignmentExpression	* odd_digit = val1		9561739	0		=			
ANR	9562081	UnaryOperationExpression	* odd_digit		9561739	0					
ANR	9562082	UnaryOperator	*		9561739	0					
ANR	9562083	Identifier	odd_digit		9561739	1					
ANR	9562084	Identifier	val1		9561739	1					
ANR	9562085	ExpressionStatement	code = ERRC	452:8:12769:12780	9561739	3	True				
ANR	9562086	AssignmentExpression	code = ERRC		9561739	0		=			
ANR	9562087	Identifier	code		9561739	0					
ANR	9562088	Identifier	ERRC		9561739	1					
ANR	9562089	GotoStatement	goto ended ;	453:8:12790:12800	9561739	4	True				
ANR	9562090	Identifier	ended		9561739	0					
ANR	9562091	ExpressionStatement	* ++ q = ( val1 << 4 ) + val2	455:4:12812:12837	9561739	28	True				
ANR	9562092	AssignmentExpression	* ++ q = ( val1 << 4 ) + val2		9561739	0		=			
ANR	9562093	UnaryOperationExpression	* ++ q		9561739	0					
ANR	9562094	UnaryOperator	*		9561739	0					
ANR	9562095	UnaryExpression	++ q		9561739	1					
ANR	9562096	IncDec	++		9561739	0					
ANR	9562097	Identifier	q		9561739	1					
ANR	9562098	AdditiveExpression	( val1 << 4 ) + val2		9561739	1		+			
ANR	9562099	ShiftExpression	val1 << 4		9561739	0		<<			
ANR	9562100	Identifier	val1		9561739	0					
ANR	9562101	PrimaryExpression	4		9561739	1					
ANR	9562102	Identifier	val2		9561739	1					
ANR	9562103	IfStatement	if ( q < wlimit )		9561739	29					
ANR	9562104	Condition	q < wlimit	456:8:12847:12856	9561739	0	True				
ANR	9562105	RelationalExpression	q < wlimit		9561739	0		<			
ANR	9562106	Identifier	q		9561739	0					
ANR	9562107	Identifier	wlimit		9561739	1					
ANR	9562108	GotoStatement	goto d1 ;	457:8:12867:12874	9561739	1	True				
ANR	9562109	Identifier	d1		9561739	0					
ANR	9562110	Label	px :	458:2:12878:12880	9561739	30	True				
ANR	9562111	Identifier	px		9561739	0					
ANR	9562112	ExpressionStatement	code = 1	458:5:12881:12889	9561739	31	True				
ANR	9562113	AssignmentExpression	code = 1		9561739	0		=			
ANR	9562114	Identifier	code		9561739	0					
ANR	9562115	PrimaryExpression	1		9561739	1					
ANR	9562116	Label	end1 :	459:2:12893:12897	9561739	32	True				
ANR	9562117	Identifier	end1		9561739	0					
ANR	9562118	ExpressionStatement	* odd_digit = - 1	459:7:12898:12913	9561739	33	True				
ANR	9562119	AssignmentExpression	* odd_digit = - 1		9561739	0		=			
ANR	9562120	UnaryOperationExpression	* odd_digit		9561739	0					
ANR	9562121	UnaryOperator	*		9561739	0					
ANR	9562122	Identifier	odd_digit		9561739	1					
ANR	9562123	UnaryOperationExpression	- 1		9561739	1					
ANR	9562124	UnaryOperator	-		9561739	0					
ANR	9562125	PrimaryExpression	1		9561739	1					
ANR	9562126	Label	ended :	460:2:12917:12922	9561739	34	True				
ANR	9562127	Identifier	ended		9561739	0					
ANR	9562128	ExpressionStatement	pr -> ptr = p	460:8:12923:12934	9561739	35	True				
ANR	9562129	AssignmentExpression	pr -> ptr = p		9561739	0		=			
ANR	9562130	PtrMemberAccess	pr -> ptr		9561739	0					
ANR	9562131	Identifier	pr		9561739	0					
ANR	9562132	Identifier	ptr		9561739	1					
ANR	9562133	Identifier	p		9561739	1					
ANR	9562134	ExpressionStatement	pw -> ptr = q	461:4:12940:12951	9561739	36	True				
ANR	9562135	AssignmentExpression	pw -> ptr = q		9561739	0		=			
ANR	9562136	PtrMemberAccess	pw -> ptr		9561739	0					
ANR	9562137	Identifier	pw		9561739	0					
ANR	9562138	Identifier	ptr		9561739	1					
ANR	9562139	Identifier	q		9561739	1					
ANR	9562140	ReturnStatement	return code ;	462:4:12957:12968	9561739	37	True				
ANR	9562141	Identifier	code		9561739	0					
ANR	9562142	ReturnType	int		9561739	1					
ANR	9562143	Identifier	s_hex_process		9561739	2					
ANR	9562144	ParameterList	"stream_cursor_read * pr , stream_cursor_write * pw , int * odd_digit , hex_syntax syntax"		9561739	3					
ANR	9562145	Parameter	stream_cursor_read * pr	373:14:10383:10405	9561739	0	True				
ANR	9562146	ParameterType	stream_cursor_read *		9561739	0					
ANR	9562147	Identifier	pr		9561739	1					
ANR	9562148	Parameter	stream_cursor_write * pw	373:39:10408:10431	9561739	1	True				
ANR	9562149	ParameterType	stream_cursor_write *		9561739	0					
ANR	9562150	Identifier	pw		9561739	1					
ANR	9562151	Parameter	int * odd_digit	374:14:10448:10461	9561739	2	True				
ANR	9562152	ParameterType	int *		9561739	0					
ANR	9562153	Identifier	odd_digit		9561739	1					
ANR	9562154	Parameter	hex_syntax syntax	374:30:10464:10480	9561739	3	True				
ANR	9562155	ParameterType	hex_syntax		9561739	0					
ANR	9562156	Identifier	syntax		9561739	1					
ANR	9562157	CFGEntryNode	ENTRY		9561739		True				
ANR	9562158	CFGExitNode	EXIT		9561739		True				
ANR	9562159	Symbol	* decoder		9561739						
ANR	9562160	Symbol	pr		9561739						
ANR	9562161	Symbol	odd_digit		9561739						
ANR	9562162	Symbol	code		9561739						
ANR	9562163	Symbol	val2		9561739						
ANR	9562164	Symbol	pw		9561739						
ANR	9562165	Symbol	val1		9561739						
ANR	9562166	Symbol	pr -> limit		9561739						
ANR	9562167	Symbol	hex_ignore_garbage		9561739						
ANR	9562168	Symbol	pw -> limit		9561739						
ANR	9562169	Symbol	wlimit		9561739						
ANR	9562170	Symbol	* * p		9561739						
ANR	9562171	Symbol	pr -> ptr		9561739						
ANR	9562172	Symbol	pw -> ptr		9561739						
ANR	9562173	Symbol	q0		9561739						
ANR	9562174	Symbol	rlimit		9561739						
ANR	9562175	Symbol	flimit		9561739						
ANR	9562176	Symbol	* ++ p		9561739						
ANR	9562177	Symbol	* ++ q		9561739						
ANR	9562178	Symbol	* * ++ p		9561739						
ANR	9562179	Symbol	* pr		9561739						
ANR	9562180	Symbol	decoder		9561739						
ANR	9562181	Symbol	ctype_space		9561739						
ANR	9562182	Symbol	* pw		9561739						
ANR	9562183	Symbol	p		9561739						
ANR	9562184	Symbol	q		9561739						
ANR	9562185	Symbol	rcount		9561739						
ANR	9562186	Symbol	scan_char_decoder		9561739						
ANR	9562187	Symbol	* odd_digit		9561739						
ANR	9562188	Symbol	syntax		9561739						
ANR	9562189	Symbol	* p		9561739						
ANR	9562190	Symbol	* q		9561739						
ANR	9562191	Symbol	ERRC		9561739						
