command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	10491357	File	data/converged/CVE-2018-16863_ghostpdl/toolbin_halftone_gen_ordered_gen_ordered_main.c								
ANR	10491358	DeclStmt									
ANR	10491359	Decl							unsigned char	unsigned char	byte
ANR	10491360	DeclStmt									
ANR	10491361	Decl							int	int	bool
ANR	10491362	DeclStmt									
ANR	10491363	Decl							int	int ( htsc_dig_grid_t * final_mask )	htsc_save_tos
ANR	10491364	DeclStmt									
ANR	10491365	Decl							int	"int ( htsc_dig_grid_t * final_mask , bool use_holladay_grid , int S , htsc_param_t params )"	htsc_save_screen
ANR	10491366	Function	snprintf	49:6:1508:1892							
ANR	10491367	FunctionDef	"snprintf (char * buffer , size_t count , const char * format)"		10491366	0					
ANR	10491368	CompoundStatement		50:6:1580:1892	10491366	0					
ANR	10491369	IfStatement	if ( count > 0 )		10491366	0					
ANR	10491370	Condition	count > 0	51:14:1596:1604	10491366	0	True				
ANR	10491371	RelationalExpression	count > 0		10491366	0		>			
ANR	10491372	Identifier	count		10491366	0					
ANR	10491373	PrimaryExpression	0		10491366	1					
ANR	10491374	CompoundStatement		4:14:70:75	10491366	1					
ANR	10491375	IdentifierDeclStatement	va_list args ;	52:14:1623:1635	10491366	0	True				
ANR	10491376	IdentifierDecl	args		10491366	0					
ANR	10491377	IdentifierDeclType	va_list		10491366	0					
ANR	10491378	Identifier	args		10491366	1					
ANR	10491379	IdentifierDeclStatement	int n ;	53:14:1651:1656	10491366	1	True				
ANR	10491380	IdentifierDecl	n		10491366	0					
ANR	10491381	IdentifierDeclType	int		10491366	0					
ANR	10491382	Identifier	n		10491366	1					
ANR	10491383	ExpressionStatement	"va_start ( args , format )"	55:14:1673:1695	10491366	2	True				
ANR	10491384	CallExpression	"va_start ( args , format )"		10491366	0					
ANR	10491385	Callee	va_start		10491366	0					
ANR	10491386	Identifier	va_start		10491366	0					
ANR	10491387	ArgumentList	args		10491366	1					
ANR	10491388	Argument	args		10491366	0					
ANR	10491389	Identifier	args		10491366	0					
ANR	10491390	Argument	format		10491366	1					
ANR	10491391	Identifier	format		10491366	0					
ANR	10491392	ExpressionStatement	"n = _vsnprintf ( buffer , count , format , args )"	56:14:1711:1754	10491366	3	True				
ANR	10491393	AssignmentExpression	"n = _vsnprintf ( buffer , count , format , args )"		10491366	0		=			
ANR	10491394	Identifier	n		10491366	0					
ANR	10491395	CallExpression	"_vsnprintf ( buffer , count , format , args )"		10491366	1					
ANR	10491396	Callee	_vsnprintf		10491366	0					
ANR	10491397	Identifier	_vsnprintf		10491366	0					
ANR	10491398	ArgumentList	buffer		10491366	1					
ANR	10491399	Argument	buffer		10491366	0					
ANR	10491400	Identifier	buffer		10491366	0					
ANR	10491401	Argument	count		10491366	1					
ANR	10491402	Identifier	count		10491366	0					
ANR	10491403	Argument	format		10491366	2					
ANR	10491404	Identifier	format		10491366	0					
ANR	10491405	Argument	args		10491366	3					
ANR	10491406	Identifier	args		10491366	0					
ANR	10491407	ExpressionStatement	buffer [ count - 1 ] = 0	57:14:1770:1791	10491366	4	True				
ANR	10491408	AssignmentExpression	buffer [ count - 1 ] = 0		10491366	0		=			
ANR	10491409	ArrayIndexing	buffer [ count - 1 ]		10491366	0					
ANR	10491410	Identifier	buffer		10491366	0					
ANR	10491411	AdditiveExpression	count - 1		10491366	1		-			
ANR	10491412	Identifier	count		10491366	0					
ANR	10491413	PrimaryExpression	1		10491366	1					
ANR	10491414	PrimaryExpression	0		10491366	1					
ANR	10491415	ExpressionStatement	va_end ( args )	58:14:1807:1819	10491366	5	True				
ANR	10491416	CallExpression	va_end ( args )		10491366	0					
ANR	10491417	Callee	va_end		10491366	0					
ANR	10491418	Identifier	va_end		10491366	0					
ANR	10491419	ArgumentList	args		10491366	1					
ANR	10491420	Argument	args		10491366	0					
ANR	10491421	Identifier	args		10491366	0					
ANR	10491422	ReturnStatement	return n ;	59:14:1835:1843	10491366	6	True				
ANR	10491423	Identifier	n		10491366	0					
ANR	10491424	ElseStatement	else		10491366	0					
ANR	10491425	ReturnStatement	return 0 ;	61:14:1876:1884	10491366	0	True				
ANR	10491426	PrimaryExpression	0		10491366	0					
ANR	10491427	ReturnType	int		10491366	1					
ANR	10491428	Identifier	snprintf		10491366	2					
ANR	10491429	ParameterList	"char * buffer , size_t count , const char * format"		10491366	3					
ANR	10491430	Parameter	char * buffer	49:19:1521:1532	10491366	0	True				
ANR	10491431	ParameterType	char *		10491366	0					
ANR	10491432	Identifier	buffer		10491366	1					
ANR	10491433	Parameter	size_t count	49:33:1535:1546	10491366	1	True				
ANR	10491434	ParameterType	size_t		10491366	0					
ANR	10491435	Identifier	count		10491366	1					
ANR	10491436	Parameter	const char * format	49:47:1549:1566	10491366	2	True				
ANR	10491437	ParameterType	const char *		10491366	0					
ANR	10491438	Identifier	format		10491366	1					
ANR	10491439	CFGEntryNode	ENTRY		10491366		True				
ANR	10491440	CFGExitNode	EXIT		10491366		True				
ANR	10491441	Symbol	args		10491366						
ANR	10491442	Symbol	* count		10491366						
ANR	10491443	Symbol	* buffer		10491366						
ANR	10491444	Symbol	count		10491366						
ANR	10491445	Symbol	format		10491366						
ANR	10491446	Symbol	buffer		10491366						
ANR	10491447	Symbol	_vsnprintf		10491366						
ANR	10491448	Symbol	n		10491366						
ANR	10491449	Function	usage	66:0:1957:3724							
ANR	10491450	FunctionDef	usage ()		10491449	0					
ANR	10491451	CompoundStatement		68:0:1981:3724	10491449	0					
ANR	10491452	ExpressionStatement	"printf ( ""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"" )"	69:4:1987:2085	10491449	0	True				
ANR	10491453	CallExpression	"printf ( ""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"" )"		10491449	0					
ANR	10491454	Callee	printf		10491449	0					
ANR	10491455	Identifier	printf		10491449	0					
ANR	10491456	ArgumentList	"""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"""		10491449	1					
ANR	10491457	Argument	"""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"""		10491449	0					
ANR	10491458	PrimaryExpression	"""Usage: gen_ordered [-a target_angle] [-l target_lpi] [-q target_quantization_levels] \\n"""		10491449	0					
ANR	10491459	ExpressionStatement	"printf ( ""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"" )"	70:4:2091:2185	10491449	1	True				
ANR	10491460	CallExpression	"printf ( ""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"" )"		10491449	0					
ANR	10491461	Callee	printf		10491449	0					
ANR	10491462	Identifier	printf		10491449	0					
ANR	10491463	ArgumentList	"""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"""		10491449	1					
ANR	10491464	Argument	"""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"""		10491449	0					
ANR	10491465	PrimaryExpression	"""                 [-r WxH] [-s size_of_supercell] [-d dot_shape_code] -v verbosity\\n"""		10491449	0					
ANR	10491466	ExpressionStatement	"printf ( ""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"" )"	71:4:2191:2258	10491449	2	True				
ANR	10491467	CallExpression	"printf ( ""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"" )"		10491449	0					
ANR	10491468	Callee	printf		10491449	0					
ANR	10491469	Identifier	printf		10491449	0					
ANR	10491470	ArgumentList	"""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"""		10491449	1					
ANR	10491471	Argument	"""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"""		10491449	0					
ANR	10491472	PrimaryExpression	"""                 [ -f [ps | ppm | raw | raw16 | tos] ]\\n"""		10491449	0					
ANR	10491473	ExpressionStatement	"printf ( ""a is the desired angle in degrees for the screen\\n"" )"	72:4:2264:2325	10491449	3	True				
ANR	10491474	CallExpression	"printf ( ""a is the desired angle in degrees for the screen\\n"" )"		10491449	0					
ANR	10491475	Callee	printf		10491449	0					
ANR	10491476	Identifier	printf		10491449	0					
ANR	10491477	ArgumentList	"""a is the desired angle in degrees for the screen\\n"""		10491449	1					
ANR	10491478	Argument	"""a is the desired angle in degrees for the screen\\n"""		10491449	0					
ANR	10491479	PrimaryExpression	"""a is the desired angle in degrees for the screen\\n"""		10491449	0					
ANR	10491480	ExpressionStatement	"printf ( ""b is the desired bit depth of the output threshold\\n"" )"	73:4:2331:2394	10491449	4	True				
ANR	10491481	CallExpression	"printf ( ""b is the desired bit depth of the output threshold\\n"" )"		10491449	0					
ANR	10491482	Callee	printf		10491449	0					
ANR	10491483	Identifier	printf		10491449	0					
ANR	10491484	ArgumentList	"""b is the desired bit depth of the output threshold\\n"""		10491449	1					
ANR	10491485	Argument	"""b is the desired bit depth of the output threshold\\n"""		10491449	0					
ANR	10491486	PrimaryExpression	"""b is the desired bit depth of the output threshold\\n"""		10491449	0					
ANR	10491487	ExpressionStatement	"printf ( ""  valid only with -ps or the default raw output\\n"" )"	74:4:2400:2460	10491449	5	True				
ANR	10491488	CallExpression	"printf ( ""  valid only with -ps or the default raw output\\n"" )"		10491449	0					
ANR	10491489	Callee	printf		10491449	0					
ANR	10491490	Identifier	printf		10491449	0					
ANR	10491491	ArgumentList	"""  valid only with -ps or the default raw output\\n"""		10491449	1					
ANR	10491492	Argument	"""  valid only with -ps or the default raw output\\n"""		10491449	0					
ANR	10491493	PrimaryExpression	"""  valid only with -ps or the default raw output\\n"""		10491449	0					
ANR	10491494	ExpressionStatement	"printf ( ""dot shape codes are as follows: \\n"" )"	75:4:2466:2511	10491449	6	True				
ANR	10491495	CallExpression	"printf ( ""dot shape codes are as follows: \\n"" )"		10491449	0					
ANR	10491496	Callee	printf		10491449	0					
ANR	10491497	Identifier	printf		10491449	0					
ANR	10491498	ArgumentList	"""dot shape codes are as follows: \\n"""		10491449	1					
ANR	10491499	Argument	"""dot shape codes are as follows: \\n"""		10491449	0					
ANR	10491500	PrimaryExpression	"""dot shape codes are as follows: \\n"""		10491449	0					
ANR	10491501	ExpressionStatement	"printf ( ""0  CIRCLE \\n"" )"	76:4:2517:2540	10491449	7	True				
ANR	10491502	CallExpression	"printf ( ""0  CIRCLE \\n"" )"		10491449	0					
ANR	10491503	Callee	printf		10491449	0					
ANR	10491504	Identifier	printf		10491449	0					
ANR	10491505	ArgumentList	"""0  CIRCLE \\n"""		10491449	1					
ANR	10491506	Argument	"""0  CIRCLE \\n"""		10491449	0					
ANR	10491507	PrimaryExpression	"""0  CIRCLE \\n"""		10491449	0					
ANR	10491508	ExpressionStatement	"printf ( ""1  REDBOOK CIRCLE \\n"" )"	77:4:2546:2577	10491449	8	True				
ANR	10491509	CallExpression	"printf ( ""1  REDBOOK CIRCLE \\n"" )"		10491449	0					
ANR	10491510	Callee	printf		10491449	0					
ANR	10491511	Identifier	printf		10491449	0					
ANR	10491512	ArgumentList	"""1  REDBOOK CIRCLE \\n"""		10491449	1					
ANR	10491513	Argument	"""1  REDBOOK CIRCLE \\n"""		10491449	0					
ANR	10491514	PrimaryExpression	"""1  REDBOOK CIRCLE \\n"""		10491449	0					
ANR	10491515	ExpressionStatement	"printf ( ""2  INVERTED \\n"" )"	78:4:2583:2608	10491449	9	True				
ANR	10491516	CallExpression	"printf ( ""2  INVERTED \\n"" )"		10491449	0					
ANR	10491517	Callee	printf		10491449	0					
ANR	10491518	Identifier	printf		10491449	0					
ANR	10491519	ArgumentList	"""2  INVERTED \\n"""		10491449	1					
ANR	10491520	Argument	"""2  INVERTED \\n"""		10491449	0					
ANR	10491521	PrimaryExpression	"""2  INVERTED \\n"""		10491449	0					
ANR	10491522	ExpressionStatement	"printf ( ""3  RHOMBOID \\n"" )"	79:4:2614:2639	10491449	10	True				
ANR	10491523	CallExpression	"printf ( ""3  RHOMBOID \\n"" )"		10491449	0					
ANR	10491524	Callee	printf		10491449	0					
ANR	10491525	Identifier	printf		10491449	0					
ANR	10491526	ArgumentList	"""3  RHOMBOID \\n"""		10491449	1					
ANR	10491527	Argument	"""3  RHOMBOID \\n"""		10491449	0					
ANR	10491528	PrimaryExpression	"""3  RHOMBOID \\n"""		10491449	0					
ANR	10491529	ExpressionStatement	"printf ( ""4  LINE_X \\n"" )"	80:4:2645:2668	10491449	11	True				
ANR	10491530	CallExpression	"printf ( ""4  LINE_X \\n"" )"		10491449	0					
ANR	10491531	Callee	printf		10491449	0					
ANR	10491532	Identifier	printf		10491449	0					
ANR	10491533	ArgumentList	"""4  LINE_X \\n"""		10491449	1					
ANR	10491534	Argument	"""4  LINE_X \\n"""		10491449	0					
ANR	10491535	PrimaryExpression	"""4  LINE_X \\n"""		10491449	0					
ANR	10491536	ExpressionStatement	"printf ( ""5  LINE_Y \\n"" )"	81:4:2674:2697	10491449	12	True				
ANR	10491537	CallExpression	"printf ( ""5  LINE_Y \\n"" )"		10491449	0					
ANR	10491538	Callee	printf		10491449	0					
ANR	10491539	Identifier	printf		10491449	0					
ANR	10491540	ArgumentList	"""5  LINE_Y \\n"""		10491449	1					
ANR	10491541	Argument	"""5  LINE_Y \\n"""		10491449	0					
ANR	10491542	PrimaryExpression	"""5  LINE_Y \\n"""		10491449	0					
ANR	10491543	ExpressionStatement	"printf ( ""6  DIAMOND1 \\n"" )"	82:4:2703:2728	10491449	13	True				
ANR	10491544	CallExpression	"printf ( ""6  DIAMOND1 \\n"" )"		10491449	0					
ANR	10491545	Callee	printf		10491449	0					
ANR	10491546	Identifier	printf		10491449	0					
ANR	10491547	ArgumentList	"""6  DIAMOND1 \\n"""		10491449	1					
ANR	10491548	Argument	"""6  DIAMOND1 \\n"""		10491449	0					
ANR	10491549	PrimaryExpression	"""6  DIAMOND1 \\n"""		10491449	0					
ANR	10491550	ExpressionStatement	"printf ( ""7  DIAMOND2 \\n"" )"	83:4:2734:2759	10491449	14	True				
ANR	10491551	CallExpression	"printf ( ""7  DIAMOND2 \\n"" )"		10491449	0					
ANR	10491552	Callee	printf		10491449	0					
ANR	10491553	Identifier	printf		10491449	0					
ANR	10491554	ArgumentList	"""7  DIAMOND2 \\n"""		10491449	1					
ANR	10491555	Argument	"""7  DIAMOND2 \\n"""		10491449	0					
ANR	10491556	PrimaryExpression	"""7  DIAMOND2 \\n"""		10491449	0					
ANR	10491557	ExpressionStatement	"printf ( ""8  ROUNDSPOT \\n"" )"	84:4:2765:2791	10491449	15	True				
ANR	10491558	CallExpression	"printf ( ""8  ROUNDSPOT \\n"" )"		10491449	0					
ANR	10491559	Callee	printf		10491449	0					
ANR	10491560	Identifier	printf		10491449	0					
ANR	10491561	ArgumentList	"""8  ROUNDSPOT \\n"""		10491449	1					
ANR	10491562	Argument	"""8  ROUNDSPOT \\n"""		10491449	0					
ANR	10491563	PrimaryExpression	"""8  ROUNDSPOT \\n"""		10491449	0					
ANR	10491564	ExpressionStatement	"printf ( ""f [tos | ppm | ps | raw] is the output format\\n"" )"	85:4:2797:2855	10491449	16	True				
ANR	10491565	CallExpression	"printf ( ""f [tos | ppm | ps | raw] is the output format\\n"" )"		10491449	0					
ANR	10491566	Callee	printf		10491449	0					
ANR	10491567	Identifier	printf		10491449	0					
ANR	10491568	ArgumentList	"""f [tos | ppm | ps | raw] is the output format\\n"""		10491449	1					
ANR	10491569	Argument	"""f [tos | ppm | ps | raw] is the output format\\n"""		10491449	0					
ANR	10491570	PrimaryExpression	"""f [tos | ppm | ps | raw] is the output format\\n"""		10491449	0					
ANR	10491571	ExpressionStatement	"printf ( ""     If no output format is indicate a turn on sequence output will be created\\n"" )"	86:4:2861:2952	10491449	17	True				
ANR	10491572	CallExpression	"printf ( ""     If no output format is indicate a turn on sequence output will be created\\n"" )"		10491449	0					
ANR	10491573	Callee	printf		10491449	0					
ANR	10491574	Identifier	printf		10491449	0					
ANR	10491575	ArgumentList	"""     If no output format is indicate a turn on sequence output will be created\\n"""		10491449	1					
ANR	10491576	Argument	"""     If no output format is indicate a turn on sequence output will be created\\n"""		10491449	0					
ANR	10491577	PrimaryExpression	"""     If no output format is indicate a turn on sequence output will be created\\n"""		10491449	0					
ANR	10491578	ExpressionStatement	"printf ( ""   ppm is an Portable Pixmap image file\\n"" )"	87:4:2958:3010	10491449	18	True				
ANR	10491579	CallExpression	"printf ( ""   ppm is an Portable Pixmap image file\\n"" )"		10491449	0					
ANR	10491580	Callee	printf		10491449	0					
ANR	10491581	Identifier	printf		10491449	0					
ANR	10491582	ArgumentList	"""   ppm is an Portable Pixmap image file\\n"""		10491449	1					
ANR	10491583	Argument	"""   ppm is an Portable Pixmap image file\\n"""		10491449	0					
ANR	10491584	PrimaryExpression	"""   ppm is an Portable Pixmap image file\\n"""		10491449	0					
ANR	10491585	ExpressionStatement	"printf ( ""   ps indicates postscript style output file\\n"" )"	88:4:3016:3073	10491449	19	True				
ANR	10491586	CallExpression	"printf ( ""   ps indicates postscript style output file\\n"" )"		10491449	0					
ANR	10491587	Callee	printf		10491449	0					
ANR	10491588	Identifier	printf		10491449	0					
ANR	10491589	ArgumentList	"""   ps indicates postscript style output file\\n"""		10491449	1					
ANR	10491590	Argument	"""   ps indicates postscript style output file\\n"""		10491449	0					
ANR	10491591	PrimaryExpression	"""   ps indicates postscript style output file\\n"""		10491449	0					
ANR	10491592	ExpressionStatement	"printf ( ""   raw is a raw 8-bit binary, row major file\\n"" )"	89:4:3079:3136	10491449	20	True				
ANR	10491593	CallExpression	"printf ( ""   raw is a raw 8-bit binary, row major file\\n"" )"		10491449	0					
ANR	10491594	Callee	printf		10491449	0					
ANR	10491595	Identifier	printf		10491449	0					
ANR	10491596	ArgumentList	"""   raw is a raw 8-bit binary, row major file\\n"""		10491449	1					
ANR	10491597	Argument	"""   raw is a raw 8-bit binary, row major file\\n"""		10491449	0					
ANR	10491598	PrimaryExpression	"""   raw is a raw 8-bit binary, row major file\\n"""		10491449	0					
ANR	10491599	ExpressionStatement	"printf ( ""   tos indicates to output a turn on sequence which can\\n"" )"	90:4:3142:3210	10491449	21	True				
ANR	10491600	CallExpression	"printf ( ""   tos indicates to output a turn on sequence which can\\n"" )"		10491449	0					
ANR	10491601	Callee	printf		10491449	0					
ANR	10491602	Identifier	printf		10491449	0					
ANR	10491603	ArgumentList	"""   tos indicates to output a turn on sequence which can\\n"""		10491449	1					
ANR	10491604	Argument	"""   tos indicates to output a turn on sequence which can\\n"""		10491449	0					
ANR	10491605	PrimaryExpression	"""   tos indicates to output a turn on sequence which can\\n"""		10491449	0					
ANR	10491606	ExpressionStatement	"printf ( ""     be fed into thresh_remap to apply a linearization curve.\\n"" )"	91:4:3216:3290	10491449	22	True				
ANR	10491607	CallExpression	"printf ( ""     be fed into thresh_remap to apply a linearization curve.\\n"" )"		10491449	0					
ANR	10491608	Callee	printf		10491449	0					
ANR	10491609	Identifier	printf		10491449	0					
ANR	10491610	ArgumentList	"""     be fed into thresh_remap to apply a linearization curve.\\n"""		10491449	1					
ANR	10491611	Argument	"""     be fed into thresh_remap to apply a linearization curve.\\n"""		10491449	0					
ANR	10491612	PrimaryExpression	"""     be fed into thresh_remap to apply a linearization curve.\\n"""		10491449	0					
ANR	10491613	ExpressionStatement	"printf ( ""l is the desired lines per inch (lpi)\\n"" )"	92:4:3296:3346	10491449	23	True				
ANR	10491614	CallExpression	"printf ( ""l is the desired lines per inch (lpi)\\n"" )"		10491449	0					
ANR	10491615	Callee	printf		10491449	0					
ANR	10491616	Identifier	printf		10491449	0					
ANR	10491617	ArgumentList	"""l is the desired lines per inch (lpi)\\n"""		10491449	1					
ANR	10491618	Argument	"""l is the desired lines per inch (lpi)\\n"""		10491449	0					
ANR	10491619	PrimaryExpression	"""l is the desired lines per inch (lpi)\\n"""		10491449	0					
ANR	10491620	ExpressionStatement	"printf ( ""q is the desired number of quantization (gray) levels\\n"" )"	93:4:3352:3418	10491449	24	True				
ANR	10491621	CallExpression	"printf ( ""q is the desired number of quantization (gray) levels\\n"" )"		10491449	0					
ANR	10491622	Callee	printf		10491449	0					
ANR	10491623	Identifier	printf		10491449	0					
ANR	10491624	ArgumentList	"""q is the desired number of quantization (gray) levels\\n"""		10491449	1					
ANR	10491625	Argument	"""q is the desired number of quantization (gray) levels\\n"""		10491449	0					
ANR	10491626	PrimaryExpression	"""q is the desired number of quantization (gray) levels\\n"""		10491449	0					
ANR	10491627	ExpressionStatement	"printf ( ""r is the device resolution in dots per inch (dpi)\\n"" )"	94:4:3424:3486	10491449	25	True				
ANR	10491628	CallExpression	"printf ( ""r is the device resolution in dots per inch (dpi)\\n"" )"		10491449	0					
ANR	10491629	Callee	printf		10491449	0					
ANR	10491630	Identifier	printf		10491449	0					
ANR	10491631	ArgumentList	"""r is the device resolution in dots per inch (dpi)\\n"""		10491449	1					
ANR	10491632	Argument	"""r is the device resolution in dots per inch (dpi)\\n"""		10491449	0					
ANR	10491633	PrimaryExpression	"""r is the device resolution in dots per inch (dpi)\\n"""		10491449	0					
ANR	10491634	ExpressionStatement	"printf ( ""  use a single number for r if the resolution is symmetric\\n"" )"	95:4:3492:3563	10491449	26	True				
ANR	10491635	CallExpression	"printf ( ""  use a single number for r if the resolution is symmetric\\n"" )"		10491449	0					
ANR	10491636	Callee	printf		10491449	0					
ANR	10491637	Identifier	printf		10491449	0					
ANR	10491638	ArgumentList	"""  use a single number for r if the resolution is symmetric\\n"""		10491449	1					
ANR	10491639	Argument	"""  use a single number for r if the resolution is symmetric\\n"""		10491449	0					
ANR	10491640	PrimaryExpression	"""  use a single number for r if the resolution is symmetric\\n"""		10491449	0					
ANR	10491641	ExpressionStatement	"printf ( ""s is the desired size of the super cell\\n"" )"	96:4:3569:3621	10491449	27	True				
ANR	10491642	CallExpression	"printf ( ""s is the desired size of the super cell\\n"" )"		10491449	0					
ANR	10491643	Callee	printf		10491449	0					
ANR	10491644	Identifier	printf		10491449	0					
ANR	10491645	ArgumentList	"""s is the desired size of the super cell\\n"""		10491449	1					
ANR	10491646	Argument	"""s is the desired size of the super cell\\n"""		10491449	0					
ANR	10491647	PrimaryExpression	"""s is the desired size of the super cell\\n"""		10491449	0					
ANR	10491648	ExpressionStatement	"printf ( ""v is the verbosity level. Default is 0 which is error messages only.\\n"" )"	97:4:3627:3708	10491449	28	True				
ANR	10491649	CallExpression	"printf ( ""v is the verbosity level. Default is 0 which is error messages only.\\n"" )"		10491449	0					
ANR	10491650	Callee	printf		10491449	0					
ANR	10491651	Identifier	printf		10491449	0					
ANR	10491652	ArgumentList	"""v is the verbosity level. Default is 0 which is error messages only.\\n"""		10491449	1					
ANR	10491653	Argument	"""v is the verbosity level. Default is 0 which is error messages only.\\n"""		10491449	0					
ANR	10491654	PrimaryExpression	"""v is the verbosity level. Default is 0 which is error messages only.\\n"""		10491449	0					
ANR	10491655	ReturnStatement	return 1 ;	98:4:3714:3722	10491449	29	True				
ANR	10491656	PrimaryExpression	1		10491449	0					
ANR	10491657	ReturnType	static int		10491449	1					
ANR	10491658	Identifier	usage		10491449	2					
ANR	10491659	ParameterList			10491449	3					
ANR	10491660	CFGEntryNode	ENTRY		10491449		True				
ANR	10491661	CFGExitNode	EXIT		10491449		True				
ANR	10491662	Function	get_arg	104:0:3940:4192							
ANR	10491663	FunctionDef	"get_arg (int argc , char * * argv , int * pi , const char * arg)"		10491662	0					
ANR	10491664	CompoundStatement		106:0:4018:4192	10491662	0					
ANR	10491665	IfStatement	if ( arg [ 0 ] != 0 )		10491662	0					
ANR	10491666	Condition	arg [ 0 ] != 0	107:8:4028:4038	10491662	0	True				
ANR	10491667	EqualityExpression	arg [ 0 ] != 0		10491662	0		!=			
ANR	10491668	ArrayIndexing	arg [ 0 ]		10491662	0					
ANR	10491669	Identifier	arg		10491662	0					
ANR	10491670	PrimaryExpression	0		10491662	1					
ANR	10491671	PrimaryExpression	0		10491662	1					
ANR	10491672	CompoundStatement		2:21:22:22	10491662	1					
ANR	10491673	ReturnStatement	return arg ;	108:8:4051:4061	10491662	0	True				
ANR	10491674	Identifier	arg		10491662	0					
ANR	10491675	ElseStatement	else		10491662	0					
ANR	10491676	CompoundStatement		4:11:55:55	10491662	0					
ANR	10491677	ExpressionStatement	( * pi ) ++	110:6:4082:4089	10491662	0	True				
ANR	10491678	PostIncDecOperationExpression	( * pi ) ++		10491662	0					
ANR	10491679	UnaryOperationExpression	* pi		10491662	0					
ANR	10491680	UnaryOperator	*		10491662	0					
ANR	10491681	Identifier	pi		10491662	1					
ANR	10491682	IncDec	++		10491662	1					
ANR	10491683	IfStatement	if ( * pi == argc )		10491662	1					
ANR	10491684	Condition	* pi == argc	111:10:4101:4111	10491662	0	True				
ANR	10491685	EqualityExpression	* pi == argc		10491662	0		==			
ANR	10491686	UnaryOperationExpression	* pi		10491662	0					
ANR	10491687	UnaryOperator	*		10491662	0					
ANR	10491688	Identifier	pi		10491662	1					
ANR	10491689	Identifier	argc		10491662	1					
ANR	10491690	CompoundStatement		6:23:95:95	10491662	1					
ANR	10491691	ReturnStatement	return NULL ;	112:8:4124:4135	10491662	0	True				
ANR	10491692	Identifier	NULL		10491662	0					
ANR	10491693	ElseStatement	else		10491662	0					
ANR	10491694	CompoundStatement		8:13:131:131	10491662	0					
ANR	10491695	ReturnStatement	return argv [ * pi ] ;	114:8:4160:4176	10491662	0	True				
ANR	10491696	ArrayIndexing	argv [ * pi ]		10491662	0					
ANR	10491697	Identifier	argv		10491662	0					
ANR	10491698	UnaryOperationExpression	* pi		10491662	1					
ANR	10491699	UnaryOperator	*		10491662	0					
ANR	10491700	Identifier	pi		10491662	1					
ANR	10491701	ReturnType	static const char *		10491662	1					
ANR	10491702	Identifier	get_arg		10491662	2					
ANR	10491703	ParameterList	"int argc , char * * argv , int * pi , const char * arg"		10491662	3					
ANR	10491704	Parameter	int argc	105:9:3969:3976	10491662	0	True				
ANR	10491705	ParameterType	int		10491662	0					
ANR	10491706	Identifier	argc		10491662	1					
ANR	10491707	Parameter	char * * argv	105:19:3979:3989	10491662	1	True				
ANR	10491708	ParameterType	char * *		10491662	0					
ANR	10491709	Identifier	argv		10491662	1					
ANR	10491710	Parameter	int * pi	105:32:3992:3998	10491662	2	True				
ANR	10491711	ParameterType	int *		10491662	0					
ANR	10491712	Identifier	pi		10491662	1					
ANR	10491713	Parameter	const char * arg	105:41:4001:4015	10491662	3	True				
ANR	10491714	ParameterType	const char *		10491662	0					
ANR	10491715	Identifier	arg		10491662	1					
ANR	10491716	CFGEntryNode	ENTRY		10491662		True				
ANR	10491717	CFGExitNode	EXIT		10491662		True				
ANR	10491718	Symbol	argc		10491662						
ANR	10491719	Symbol	NULL		10491662						
ANR	10491720	Symbol	arg		10491662						
ANR	10491721	Symbol	* * pi		10491662						
ANR	10491722	Symbol	pi		10491662						
ANR	10491723	Symbol	* argv		10491662						
ANR	10491724	Symbol	* pi		10491662						
ANR	10491725	Symbol	argv		10491662						
ANR	10491726	Symbol	* arg		10491662						
ANR	10491727	Function	main	119:0:4195:7617							
ANR	10491728	FunctionDef	"main (int argc , char * * argv)"		10491727	0					
ANR	10491729	CompoundStatement		121:0:4228:7617	10491727	0					
ANR	10491730	IdentifierDeclStatement	"int code , i , j , k , m , S ;"	122:4:4234:4257	10491727	0	True				
ANR	10491731	IdentifierDecl	code		10491727	0					
ANR	10491732	IdentifierDeclType	int		10491727	0					
ANR	10491733	Identifier	code		10491727	1					
ANR	10491734	IdentifierDecl	i		10491727	1					
ANR	10491735	IdentifierDeclType	int		10491727	0					
ANR	10491736	Identifier	i		10491727	1					
ANR	10491737	IdentifierDecl	j		10491727	2					
ANR	10491738	IdentifierDeclType	int		10491727	0					
ANR	10491739	Identifier	j		10491727	1					
ANR	10491740	IdentifierDecl	k		10491727	3					
ANR	10491741	IdentifierDeclType	int		10491727	0					
ANR	10491742	Identifier	k		10491727	1					
ANR	10491743	IdentifierDecl	m		10491727	4					
ANR	10491744	IdentifierDeclType	int		10491727	0					
ANR	10491745	Identifier	m		10491727	1					
ANR	10491746	IdentifierDecl	S		10491727	5					
ANR	10491747	IdentifierDeclType	int		10491727	0					
ANR	10491748	Identifier	S		10491727	1					
ANR	10491749	IdentifierDeclStatement	htsc_param_t params ;	123:4:4263:4282	10491727	1	True				
ANR	10491750	IdentifierDecl	params		10491727	0					
ANR	10491751	IdentifierDeclType	htsc_param_t		10491727	0					
ANR	10491752	Identifier	params		10491727	1					
ANR	10491753	IdentifierDeclStatement	htsc_dig_grid_t final_mask ;	124:4:4288:4314	10491727	2	True				
ANR	10491754	IdentifierDecl	final_mask		10491727	0					
ANR	10491755	IdentifierDeclType	htsc_dig_grid_t		10491727	0					
ANR	10491756	Identifier	final_mask		10491727	1					
ANR	10491757	ExpressionStatement	htsc_set_default_params ( & params )	126:4:4321:4353	10491727	3	True				
ANR	10491758	CallExpression	htsc_set_default_params ( & params )		10491727	0					
ANR	10491759	Callee	htsc_set_default_params		10491727	0					
ANR	10491760	Identifier	htsc_set_default_params		10491727	0					
ANR	10491761	ArgumentList	& params		10491727	1					
ANR	10491762	Argument	& params		10491727	0					
ANR	10491763	UnaryOperationExpression	& params		10491727	0					
ANR	10491764	UnaryOperator	&		10491727	0					
ANR	10491765	Identifier	params		10491727	1					
ANR	10491766	ForStatement	for ( i = 1 ; i < argc ; i ++ )		10491727	4					
ANR	10491767	ForInit	i = 1 ;	128:9:4365:4370	10491727	0	True				
ANR	10491768	AssignmentExpression	i = 1		10491727	0		=			
ANR	10491769	Identifier	i		10491727	0					
ANR	10491770	PrimaryExpression	1		10491727	1					
ANR	10491771	Condition	i < argc	128:16:4372:4379	10491727	1	True				
ANR	10491772	RelationalExpression	i < argc		10491727	0		<			
ANR	10491773	Identifier	i		10491727	0					
ANR	10491774	Identifier	argc		10491727	1					
ANR	10491775	PostIncDecOperationExpression	i ++	128:26:4382:4384	10491727	2	True				
ANR	10491776	Identifier	i		10491727	0					
ANR	10491777	IncDec	++		10491727	1					
ANR	10491778	CompoundStatement		10:6:199:220	10491727	3					
ANR	10491779	IdentifierDeclStatement	const char * arg = argv [ i ] ;	129:6:4395:4420	10491727	0	True				
ANR	10491780	IdentifierDecl	* arg = argv [ i ]		10491727	0					
ANR	10491781	IdentifierDeclType	const char *		10491727	0					
ANR	10491782	Identifier	arg		10491727	1					
ANR	10491783	AssignmentExpression	* arg = argv [ i ]		10491727	2		=			
ANR	10491784	Identifier	arg		10491727	0					
ANR	10491785	ArrayIndexing	argv [ i ]		10491727	1					
ANR	10491786	Identifier	argv		10491727	0					
ANR	10491787	Identifier	i		10491727	1					
ANR	10491788	IdentifierDeclStatement	const char * arg_value ;	130:6:4428:4449	10491727	1	True				
ANR	10491789	IdentifierDecl	* arg_value		10491727	0					
ANR	10491790	IdentifierDeclType	const char *		10491727	0					
ANR	10491791	Identifier	arg_value		10491727	1					
ANR	10491792	IfStatement	if ( arg [ 0 ] == '-' )		10491727	2					
ANR	10491793	Condition	arg [ 0 ] == '-'	132:10:4462:4474	10491727	0	True				
ANR	10491794	EqualityExpression	arg [ 0 ] == '-'		10491727	0		==			
ANR	10491795	ArrayIndexing	arg [ 0 ]		10491727	0					
ANR	10491796	Identifier	arg		10491727	0					
ANR	10491797	PrimaryExpression	0		10491727	1					
ANR	10491798	PrimaryExpression	'-'		10491727	1					
ANR	10491799	CompoundStatement		12:25:248:248	10491727	1					
ANR	10491800	SwitchStatement	switch ( arg [ 1 ] )		10491727	0					
ANR	10491801	Condition	arg [ 1 ]	133:18:4497:4502	10491727	0	True				
ANR	10491802	ArrayIndexing	arg [ 1 ]		10491727	0					
ANR	10491803	Identifier	arg		10491727	0					
ANR	10491804	PrimaryExpression	1		10491727	1					
ANR	10491805	CompoundStatement		13:26:276:276	10491727	1					
ANR	10491806	Label	case 'a' :	134:12:4519:4527	10491727	0	True				
ANR	10491807	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		10491727	1					
ANR	10491808	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	135:18:4547:4600	10491727	0	True				
ANR	10491809	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		10491727	0		==			
ANR	10491810	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		10491727	0		=			
ANR	10491811	Identifier	arg_value		10491727	0					
ANR	10491812	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		10491727	1					
ANR	10491813	Callee	get_arg		10491727	0					
ANR	10491814	Identifier	get_arg		10491727	0					
ANR	10491815	ArgumentList	argc		10491727	1					
ANR	10491816	Argument	argc		10491727	0					
ANR	10491817	Identifier	argc		10491727	0					
ANR	10491818	Argument	argv		10491727	1					
ANR	10491819	Identifier	argv		10491727	0					
ANR	10491820	Argument	& i		10491727	2					
ANR	10491821	UnaryOperationExpression	& i		10491727	0					
ANR	10491822	UnaryOperator	&		10491727	0					
ANR	10491823	Identifier	i		10491727	1					
ANR	10491824	Argument	arg + 2		10491727	3					
ANR	10491825	AdditiveExpression	arg + 2		10491727	0		+			
ANR	10491826	Identifier	arg		10491727	0					
ANR	10491827	PrimaryExpression	2		10491727	1					
ANR	10491828	Identifier	NULL		10491727	1					
ANR	10491829	GotoStatement	goto usage_exit ;	136:18:4621:4636	10491727	1	True				
ANR	10491830	Identifier	usage_exit		10491727	0					
ANR	10491831	ExpressionStatement	params . targ_scr_ang = atoi ( arg_value )	137:14:4652:4689	10491727	2	True				
ANR	10491832	AssignmentExpression	params . targ_scr_ang = atoi ( arg_value )		10491727	0		=			
ANR	10491833	MemberAccess	params . targ_scr_ang		10491727	0					
ANR	10491834	Identifier	params		10491727	0					
ANR	10491835	Identifier	targ_scr_ang		10491727	1					
ANR	10491836	CallExpression	atoi ( arg_value )		10491727	1					
ANR	10491837	Callee	atoi		10491727	0					
ANR	10491838	Identifier	atoi		10491727	0					
ANR	10491839	ArgumentList	arg_value		10491727	1					
ANR	10491840	Argument	arg_value		10491727	0					
ANR	10491841	Identifier	arg_value		10491727	0					
ANR	10491842	BreakStatement	break ;	138:14:4705:4710	10491727	3	True				
ANR	10491843	Label	case 'f' :	139:12:4724:4732	10491727	4	True				
ANR	10491844	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		10491727	5					
ANR	10491845	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	140:18:4752:4805	10491727	0	True				
ANR	10491846	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		10491727	0		==			
ANR	10491847	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		10491727	0		=			
ANR	10491848	Identifier	arg_value		10491727	0					
ANR	10491849	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		10491727	1					
ANR	10491850	Callee	get_arg		10491727	0					
ANR	10491851	Identifier	get_arg		10491727	0					
ANR	10491852	ArgumentList	argc		10491727	1					
ANR	10491853	Argument	argc		10491727	0					
ANR	10491854	Identifier	argc		10491727	0					
ANR	10491855	Argument	argv		10491727	1					
ANR	10491856	Identifier	argv		10491727	0					
ANR	10491857	Argument	& i		10491727	2					
ANR	10491858	UnaryOperationExpression	& i		10491727	0					
ANR	10491859	UnaryOperator	&		10491727	0					
ANR	10491860	Identifier	i		10491727	1					
ANR	10491861	Argument	arg + 2		10491727	3					
ANR	10491862	AdditiveExpression	arg + 2		10491727	0		+			
ANR	10491863	Identifier	arg		10491727	0					
ANR	10491864	PrimaryExpression	2		10491727	1					
ANR	10491865	Identifier	NULL		10491727	1					
ANR	10491866	GotoStatement	goto usage_exit ;	141:18:4826:4841	10491727	1	True				
ANR	10491867	Identifier	usage_exit		10491727	0					
ANR	10491868	SwitchStatement	switch ( arg_value [ 0 ] )		10491727	6					
ANR	10491869	Condition	arg_value [ 0 ]	142:22:4865:4876	10491727	0	True				
ANR	10491870	ArrayIndexing	arg_value [ 0 ]		10491727	0					
ANR	10491871	Identifier	arg_value		10491727	0					
ANR	10491872	PrimaryExpression	0		10491727	1					
ANR	10491873	CompoundStatement		22:36:650:650	10491727	1					
ANR	10491874	Label	case 'p' :	143:18:4899:4907	10491727	0	True				
ANR	10491875	ExpressionStatement	params . output_format = ( arg_value [ 1 ] == 's' ) ? OUTPUT_PS : OUTPUT_PPM	144:20:4929:5042	10491727	1	True				
ANR	10491876	AssignmentExpression	params . output_format = ( arg_value [ 1 ] == 's' ) ? OUTPUT_PS : OUTPUT_PPM		10491727	0		=			
ANR	10491877	MemberAccess	params . output_format		10491727	0					
ANR	10491878	Identifier	params		10491727	0					
ANR	10491879	Identifier	output_format		10491727	1					
ANR	10491880	ConditionalExpression	( arg_value [ 1 ] == 's' ) ? OUTPUT_PS : OUTPUT_PPM		10491727	1					
ANR	10491881	Condition	arg_value [ 1 ] == 's'		10491727	0					
ANR	10491882	EqualityExpression	arg_value [ 1 ] == 's'		10491727	0		==			
ANR	10491883	ArrayIndexing	arg_value [ 1 ]		10491727	0					
ANR	10491884	Identifier	arg_value		10491727	0					
ANR	10491885	PrimaryExpression	1		10491727	1					
ANR	10491886	PrimaryExpression	's'		10491727	1					
ANR	10491887	Identifier	OUTPUT_PS		10491727	1					
ANR	10491888	Identifier	OUTPUT_PPM		10491727	2					
ANR	10491889	BreakStatement	break ;	146:20:5064:5069	10491727	2	True				
ANR	10491890	Label	case 'r' :	147:18:5089:5097	10491727	3	True				
ANR	10491891	ExpressionStatement	"j = sscanf ( arg_value , ""raw%d"" , & k )"	148:20:5119:5153	10491727	4	True				
ANR	10491892	AssignmentExpression	"j = sscanf ( arg_value , ""raw%d"" , & k )"		10491727	0		=			
ANR	10491893	Identifier	j		10491727	0					
ANR	10491894	CallExpression	"sscanf ( arg_value , ""raw%d"" , & k )"		10491727	1					
ANR	10491895	Callee	sscanf		10491727	0					
ANR	10491896	Identifier	sscanf		10491727	0					
ANR	10491897	ArgumentList	arg_value		10491727	1					
ANR	10491898	Argument	arg_value		10491727	0					
ANR	10491899	Identifier	arg_value		10491727	0					
ANR	10491900	Argument	"""raw%d"""		10491727	1					
ANR	10491901	PrimaryExpression	"""raw%d"""		10491727	0					
ANR	10491902	Argument	& k		10491727	2					
ANR	10491903	UnaryOperationExpression	& k		10491727	0					
ANR	10491904	UnaryOperator	&		10491727	0					
ANR	10491905	Identifier	k		10491727	1					
ANR	10491906	IfStatement	if ( j == 0 || k == 8 )		10491727	5					
ANR	10491907	Condition	j == 0 || k == 8	149:24:5179:5194	10491727	0	True				
ANR	10491908	OrExpression	j == 0 || k == 8		10491727	0		||			
ANR	10491909	EqualityExpression	j == 0		10491727	0		==			
ANR	10491910	Identifier	j		10491727	0					
ANR	10491911	PrimaryExpression	0		10491727	1					
ANR	10491912	EqualityExpression	k == 8		10491727	1		==			
ANR	10491913	Identifier	k		10491727	0					
ANR	10491914	PrimaryExpression	8		10491727	1					
ANR	10491915	ExpressionStatement	params . output_format = OUTPUT_RAW	150:24:5221:5254	10491727	1	True				
ANR	10491916	AssignmentExpression	params . output_format = OUTPUT_RAW		10491727	0		=			
ANR	10491917	MemberAccess	params . output_format		10491727	0					
ANR	10491918	Identifier	params		10491727	0					
ANR	10491919	Identifier	output_format		10491727	1					
ANR	10491920	Identifier	OUTPUT_RAW		10491727	1					
ANR	10491921	ElseStatement	else		10491727	0					
ANR	10491922	ExpressionStatement	params . output_format = OUTPUT_RAW16	152:24:5305:5340	10491727	0	True				
ANR	10491923	AssignmentExpression	params . output_format = OUTPUT_RAW16		10491727	0		=			
ANR	10491924	MemberAccess	params . output_format		10491727	0					
ANR	10491925	Identifier	params		10491727	0					
ANR	10491926	Identifier	output_format		10491727	1					
ANR	10491927	Identifier	OUTPUT_RAW16		10491727	1					
ANR	10491928	BreakStatement	break ;	153:20:5362:5367	10491727	6	True				
ANR	10491929	Label	case 't' :	154:18:5387:5395	10491727	7	True				
ANR	10491930	ExpressionStatement	params . output_format = OUTPUT_TOS	155:20:5417:5450	10491727	8	True				
ANR	10491931	AssignmentExpression	params . output_format = OUTPUT_TOS		10491727	0		=			
ANR	10491932	MemberAccess	params . output_format		10491727	0					
ANR	10491933	Identifier	params		10491727	0					
ANR	10491934	Identifier	output_format		10491727	1					
ANR	10491935	Identifier	OUTPUT_TOS		10491727	1					
ANR	10491936	BreakStatement	break ;	156:20:5472:5477	10491727	9	True				
ANR	10491937	Label	default :	157:18:5497:5504	10491727	10	True				
ANR	10491938	Identifier	default		10491727	0					
ANR	10491939	GotoStatement	goto usage_exit ;	158:20:5526:5541	10491727	11	True				
ANR	10491940	Identifier	usage_exit		10491727	0					
ANR	10491941	BreakStatement	break ;	160:14:5573:5578	10491727	7	True				
ANR	10491942	Label	case 'd' :	161:12:5592:5600	10491727	8	True				
ANR	10491943	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		10491727	9					
ANR	10491944	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	162:18:5620:5673	10491727	0	True				
ANR	10491945	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		10491727	0		==			
ANR	10491946	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		10491727	0		=			
ANR	10491947	Identifier	arg_value		10491727	0					
ANR	10491948	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		10491727	1					
ANR	10491949	Callee	get_arg		10491727	0					
ANR	10491950	Identifier	get_arg		10491727	0					
ANR	10491951	ArgumentList	argc		10491727	1					
ANR	10491952	Argument	argc		10491727	0					
ANR	10491953	Identifier	argc		10491727	0					
ANR	10491954	Argument	argv		10491727	1					
ANR	10491955	Identifier	argv		10491727	0					
ANR	10491956	Argument	& i		10491727	2					
ANR	10491957	UnaryOperationExpression	& i		10491727	0					
ANR	10491958	UnaryOperator	&		10491727	0					
ANR	10491959	Identifier	i		10491727	1					
ANR	10491960	Argument	arg + 2		10491727	3					
ANR	10491961	AdditiveExpression	arg + 2		10491727	0		+			
ANR	10491962	Identifier	arg		10491727	0					
ANR	10491963	PrimaryExpression	2		10491727	1					
ANR	10491964	Identifier	NULL		10491727	1					
ANR	10491965	GotoStatement	goto usage_exit ;	163:18:5694:5709	10491727	1	True				
ANR	10491966	Identifier	usage_exit		10491727	0					
ANR	10491967	ExpressionStatement	j = atoi ( arg_value )	164:14:5725:5744	10491727	10	True				
ANR	10491968	AssignmentExpression	j = atoi ( arg_value )		10491727	0		=			
ANR	10491969	Identifier	j		10491727	0					
ANR	10491970	CallExpression	atoi ( arg_value )		10491727	1					
ANR	10491971	Callee	atoi		10491727	0					
ANR	10491972	Identifier	atoi		10491727	0					
ANR	10491973	ArgumentList	arg_value		10491727	1					
ANR	10491974	Argument	arg_value		10491727	0					
ANR	10491975	Identifier	arg_value		10491727	0					
ANR	10491976	IfStatement	if ( j < 0 || j > CUSTOM )		10491727	11					
ANR	10491977	Condition	j < 0 || j > CUSTOM	165:18:5764:5782	10491727	0	True				
ANR	10491978	OrExpression	j < 0 || j > CUSTOM		10491727	0		||			
ANR	10491979	RelationalExpression	j < 0		10491727	0		<			
ANR	10491980	Identifier	j		10491727	0					
ANR	10491981	PrimaryExpression	0		10491727	1					
ANR	10491982	RelationalExpression	j > CUSTOM		10491727	1		>			
ANR	10491983	Identifier	j		10491727	0					
ANR	10491984	Identifier	CUSTOM		10491727	1					
ANR	10491985	ExpressionStatement	params . spot_type = CIRCLE	166:18:5803:5828	10491727	1	True				
ANR	10491986	AssignmentExpression	params . spot_type = CIRCLE		10491727	0		=			
ANR	10491987	MemberAccess	params . spot_type		10491727	0					
ANR	10491988	Identifier	params		10491727	0					
ANR	10491989	Identifier	spot_type		10491727	1					
ANR	10491990	Identifier	CIRCLE		10491727	1					
ANR	10491991	ElseStatement	else		10491727	0					
ANR	10491992	ExpressionStatement	params . spot_type = j	168:18:5867:5887	10491727	0	True				
ANR	10491993	AssignmentExpression	params . spot_type = j		10491727	0		=			
ANR	10491994	MemberAccess	params . spot_type		10491727	0					
ANR	10491995	Identifier	params		10491727	0					
ANR	10491996	Identifier	spot_type		10491727	1					
ANR	10491997	Identifier	j		10491727	1					
ANR	10491998	BreakStatement	break ;	169:14:5903:5908	10491727	12	True				
ANR	10491999	Label	case 'l' :	170:12:5922:5930	10491727	13	True				
ANR	10492000	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		10491727	14					
ANR	10492001	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	171:18:5950:6003	10491727	0	True				
ANR	10492002	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		10491727	0		==			
ANR	10492003	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		10491727	0		=			
ANR	10492004	Identifier	arg_value		10491727	0					
ANR	10492005	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		10491727	1					
ANR	10492006	Callee	get_arg		10491727	0					
ANR	10492007	Identifier	get_arg		10491727	0					
ANR	10492008	ArgumentList	argc		10491727	1					
ANR	10492009	Argument	argc		10491727	0					
ANR	10492010	Identifier	argc		10491727	0					
ANR	10492011	Argument	argv		10491727	1					
ANR	10492012	Identifier	argv		10491727	0					
ANR	10492013	Argument	& i		10491727	2					
ANR	10492014	UnaryOperationExpression	& i		10491727	0					
ANR	10492015	UnaryOperator	&		10491727	0					
ANR	10492016	Identifier	i		10491727	1					
ANR	10492017	Argument	arg + 2		10491727	3					
ANR	10492018	AdditiveExpression	arg + 2		10491727	0		+			
ANR	10492019	Identifier	arg		10491727	0					
ANR	10492020	PrimaryExpression	2		10491727	1					
ANR	10492021	Identifier	NULL		10491727	1					
ANR	10492022	GotoStatement	goto usage_exit ;	172:18:6024:6039	10491727	1	True				
ANR	10492023	Identifier	usage_exit		10491727	0					
ANR	10492024	ExpressionStatement	params . targ_lpi = atoi ( arg_value )	173:14:6055:6088	10491727	15	True				
ANR	10492025	AssignmentExpression	params . targ_lpi = atoi ( arg_value )		10491727	0		=			
ANR	10492026	MemberAccess	params . targ_lpi		10491727	0					
ANR	10492027	Identifier	params		10491727	0					
ANR	10492028	Identifier	targ_lpi		10491727	1					
ANR	10492029	CallExpression	atoi ( arg_value )		10491727	1					
ANR	10492030	Callee	atoi		10491727	0					
ANR	10492031	Identifier	atoi		10491727	0					
ANR	10492032	ArgumentList	arg_value		10491727	1					
ANR	10492033	Argument	arg_value		10491727	0					
ANR	10492034	Identifier	arg_value		10491727	0					
ANR	10492035	BreakStatement	break ;	174:14:6104:6109	10491727	16	True				
ANR	10492036	Label	case 'q' :	175:12:6123:6131	10491727	17	True				
ANR	10492037	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		10491727	18					
ANR	10492038	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	176:18:6151:6204	10491727	0	True				
ANR	10492039	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		10491727	0		==			
ANR	10492040	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		10491727	0		=			
ANR	10492041	Identifier	arg_value		10491727	0					
ANR	10492042	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		10491727	1					
ANR	10492043	Callee	get_arg		10491727	0					
ANR	10492044	Identifier	get_arg		10491727	0					
ANR	10492045	ArgumentList	argc		10491727	1					
ANR	10492046	Argument	argc		10491727	0					
ANR	10492047	Identifier	argc		10491727	0					
ANR	10492048	Argument	argv		10491727	1					
ANR	10492049	Identifier	argv		10491727	0					
ANR	10492050	Argument	& i		10491727	2					
ANR	10492051	UnaryOperationExpression	& i		10491727	0					
ANR	10492052	UnaryOperator	&		10491727	0					
ANR	10492053	Identifier	i		10491727	1					
ANR	10492054	Argument	arg + 2		10491727	3					
ANR	10492055	AdditiveExpression	arg + 2		10491727	0		+			
ANR	10492056	Identifier	arg		10491727	0					
ANR	10492057	PrimaryExpression	2		10491727	1					
ANR	10492058	Identifier	NULL		10491727	1					
ANR	10492059	GotoStatement	goto usage_exit ;	177:18:6225:6240	10491727	1	True				
ANR	10492060	Identifier	usage_exit		10491727	0					
ANR	10492061	ExpressionStatement	params . targ_quant = atoi ( arg_value )	178:14:6256:6291	10491727	19	True				
ANR	10492062	AssignmentExpression	params . targ_quant = atoi ( arg_value )		10491727	0		=			
ANR	10492063	MemberAccess	params . targ_quant		10491727	0					
ANR	10492064	Identifier	params		10491727	0					
ANR	10492065	Identifier	targ_quant		10491727	1					
ANR	10492066	CallExpression	atoi ( arg_value )		10491727	1					
ANR	10492067	Callee	atoi		10491727	0					
ANR	10492068	Identifier	atoi		10491727	0					
ANR	10492069	ArgumentList	arg_value		10491727	1					
ANR	10492070	Argument	arg_value		10491727	0					
ANR	10492071	Identifier	arg_value		10491727	0					
ANR	10492072	ExpressionStatement	params . targ_quant_spec = true	179:14:6307:6336	10491727	20	True				
ANR	10492073	AssignmentExpression	params . targ_quant_spec = true		10491727	0		=			
ANR	10492074	MemberAccess	params . targ_quant_spec		10491727	0					
ANR	10492075	Identifier	params		10491727	0					
ANR	10492076	Identifier	targ_quant_spec		10491727	1					
ANR	10492077	Identifier	true		10491727	1					
ANR	10492078	BreakStatement	break ;	180:14:6352:6357	10491727	21	True				
ANR	10492079	Label	case 'r' :	181:12:6371:6379	10491727	22	True				
ANR	10492080	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		10491727	23					
ANR	10492081	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	182:18:6399:6452	10491727	0	True				
ANR	10492082	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		10491727	0		==			
ANR	10492083	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		10491727	0		=			
ANR	10492084	Identifier	arg_value		10491727	0					
ANR	10492085	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		10491727	1					
ANR	10492086	Callee	get_arg		10491727	0					
ANR	10492087	Identifier	get_arg		10491727	0					
ANR	10492088	ArgumentList	argc		10491727	1					
ANR	10492089	Argument	argc		10491727	0					
ANR	10492090	Identifier	argc		10491727	0					
ANR	10492091	Argument	argv		10491727	1					
ANR	10492092	Identifier	argv		10491727	0					
ANR	10492093	Argument	& i		10491727	2					
ANR	10492094	UnaryOperationExpression	& i		10491727	0					
ANR	10492095	UnaryOperator	&		10491727	0					
ANR	10492096	Identifier	i		10491727	1					
ANR	10492097	Argument	arg + 2		10491727	3					
ANR	10492098	AdditiveExpression	arg + 2		10491727	0		+			
ANR	10492099	Identifier	arg		10491727	0					
ANR	10492100	PrimaryExpression	2		10491727	1					
ANR	10492101	Identifier	NULL		10491727	1					
ANR	10492102	GotoStatement	goto usage_exit ;	183:18:6473:6488	10491727	1	True				
ANR	10492103	Identifier	usage_exit		10491727	0					
ANR	10492104	ExpressionStatement	"j = sscanf ( arg_value , ""%dx%d"" , & k , & m )"	184:14:6504:6542	10491727	24	True				
ANR	10492105	AssignmentExpression	"j = sscanf ( arg_value , ""%dx%d"" , & k , & m )"		10491727	0		=			
ANR	10492106	Identifier	j		10491727	0					
ANR	10492107	CallExpression	"sscanf ( arg_value , ""%dx%d"" , & k , & m )"		10491727	1					
ANR	10492108	Callee	sscanf		10491727	0					
ANR	10492109	Identifier	sscanf		10491727	0					
ANR	10492110	ArgumentList	arg_value		10491727	1					
ANR	10492111	Argument	arg_value		10491727	0					
ANR	10492112	Identifier	arg_value		10491727	0					
ANR	10492113	Argument	"""%dx%d"""		10491727	1					
ANR	10492114	PrimaryExpression	"""%dx%d"""		10491727	0					
ANR	10492115	Argument	& k		10491727	2					
ANR	10492116	UnaryOperationExpression	& k		10491727	0					
ANR	10492117	UnaryOperator	&		10491727	0					
ANR	10492118	Identifier	k		10491727	1					
ANR	10492119	Argument	& m		10491727	3					
ANR	10492120	UnaryOperationExpression	& m		10491727	0					
ANR	10492121	UnaryOperator	&		10491727	0					
ANR	10492122	Identifier	m		10491727	1					
ANR	10492123	IfStatement	if ( j < 1 )		10491727	25					
ANR	10492124	Condition	j < 1	185:18:6562:6566	10491727	0	True				
ANR	10492125	RelationalExpression	j < 1		10491727	0		<			
ANR	10492126	Identifier	j		10491727	0					
ANR	10492127	PrimaryExpression	1		10491727	1					
ANR	10492128	GotoStatement	goto usage_exit ;	186:18:6587:6602	10491727	1	True				
ANR	10492129	Identifier	usage_exit		10491727	0					
ANR	10492130	ExpressionStatement	params . horiz_dpi = k	187:14:6618:6638	10491727	26	True				
ANR	10492131	AssignmentExpression	params . horiz_dpi = k		10491727	0		=			
ANR	10492132	MemberAccess	params . horiz_dpi		10491727	0					
ANR	10492133	Identifier	params		10491727	0					
ANR	10492134	Identifier	horiz_dpi		10491727	1					
ANR	10492135	Identifier	k		10491727	1					
ANR	10492136	IfStatement	if ( j > 1 )		10491727	27					
ANR	10492137	Condition	j > 1	188:18:6658:6662	10491727	0	True				
ANR	10492138	RelationalExpression	j > 1		10491727	0		>			
ANR	10492139	Identifier	j		10491727	0					
ANR	10492140	PrimaryExpression	1		10491727	1					
ANR	10492141	CompoundStatement		68:25:2436:2436	10491727	1					
ANR	10492142	ExpressionStatement	params . vert_dpi = m	189:18:6685:6704	10491727	0	True				
ANR	10492143	AssignmentExpression	params . vert_dpi = m		10491727	0		=			
ANR	10492144	MemberAccess	params . vert_dpi		10491727	0					
ANR	10492145	Identifier	params		10491727	0					
ANR	10492146	Identifier	vert_dpi		10491727	1					
ANR	10492147	Identifier	m		10491727	1					
ANR	10492148	ElseStatement	else		10491727	0					
ANR	10492149	CompoundStatement		70:21:2498:2498	10491727	0					
ANR	10492150	ExpressionStatement	params . vert_dpi = k	191:18:6747:6766	10491727	0	True				
ANR	10492151	AssignmentExpression	params . vert_dpi = k		10491727	0		=			
ANR	10492152	MemberAccess	params . vert_dpi		10491727	0					
ANR	10492153	Identifier	params		10491727	0					
ANR	10492154	Identifier	vert_dpi		10491727	1					
ANR	10492155	Identifier	k		10491727	1					
ANR	10492156	BreakStatement	break ;	193:14:6798:6803	10491727	28	True				
ANR	10492157	Label	case 's' :	194:12:6817:6825	10491727	29	True				
ANR	10492158	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		10491727	30					
ANR	10492159	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	195:18:6845:6898	10491727	0	True				
ANR	10492160	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		10491727	0		==			
ANR	10492161	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		10491727	0		=			
ANR	10492162	Identifier	arg_value		10491727	0					
ANR	10492163	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		10491727	1					
ANR	10492164	Callee	get_arg		10491727	0					
ANR	10492165	Identifier	get_arg		10491727	0					
ANR	10492166	ArgumentList	argc		10491727	1					
ANR	10492167	Argument	argc		10491727	0					
ANR	10492168	Identifier	argc		10491727	0					
ANR	10492169	Argument	argv		10491727	1					
ANR	10492170	Identifier	argv		10491727	0					
ANR	10492171	Argument	& i		10491727	2					
ANR	10492172	UnaryOperationExpression	& i		10491727	0					
ANR	10492173	UnaryOperator	&		10491727	0					
ANR	10492174	Identifier	i		10491727	1					
ANR	10492175	Argument	arg + 2		10491727	3					
ANR	10492176	AdditiveExpression	arg + 2		10491727	0		+			
ANR	10492177	Identifier	arg		10491727	0					
ANR	10492178	PrimaryExpression	2		10491727	1					
ANR	10492179	Identifier	NULL		10491727	1					
ANR	10492180	GotoStatement	goto usage_exit ;	196:18:6919:6934	10491727	1	True				
ANR	10492181	Identifier	usage_exit		10491727	0					
ANR	10492182	ExpressionStatement	params . targ_size = atoi ( arg_value )	197:14:6950:6984	10491727	31	True				
ANR	10492183	AssignmentExpression	params . targ_size = atoi ( arg_value )		10491727	0		=			
ANR	10492184	MemberAccess	params . targ_size		10491727	0					
ANR	10492185	Identifier	params		10491727	0					
ANR	10492186	Identifier	targ_size		10491727	1					
ANR	10492187	CallExpression	atoi ( arg_value )		10491727	1					
ANR	10492188	Callee	atoi		10491727	0					
ANR	10492189	Identifier	atoi		10491727	0					
ANR	10492190	ArgumentList	arg_value		10491727	1					
ANR	10492191	Argument	arg_value		10491727	0					
ANR	10492192	Identifier	arg_value		10491727	0					
ANR	10492193	ExpressionStatement	params . targ_size_spec = true	198:14:7000:7028	10491727	32	True				
ANR	10492194	AssignmentExpression	params . targ_size_spec = true		10491727	0		=			
ANR	10492195	MemberAccess	params . targ_size_spec		10491727	0					
ANR	10492196	Identifier	params		10491727	0					
ANR	10492197	Identifier	targ_size_spec		10491727	1					
ANR	10492198	Identifier	true		10491727	1					
ANR	10492199	BreakStatement	break ;	199:14:7044:7049	10491727	33	True				
ANR	10492200	Label	case 'v' :	200:12:7063:7071	10491727	34	True				
ANR	10492201	IfStatement	"if ( ( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL )"		10491727	35					
ANR	10492202	Condition	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"	201:18:7091:7144	10491727	0	True				
ANR	10492203	EqualityExpression	"( arg_value = get_arg ( argc , argv , & i , arg + 2 ) ) == NULL"		10491727	0		==			
ANR	10492204	AssignmentExpression	"arg_value = get_arg ( argc , argv , & i , arg + 2 )"		10491727	0		=			
ANR	10492205	Identifier	arg_value		10491727	0					
ANR	10492206	CallExpression	"get_arg ( argc , argv , & i , arg + 2 )"		10491727	1					
ANR	10492207	Callee	get_arg		10491727	0					
ANR	10492208	Identifier	get_arg		10491727	0					
ANR	10492209	ArgumentList	argc		10491727	1					
ANR	10492210	Argument	argc		10491727	0					
ANR	10492211	Identifier	argc		10491727	0					
ANR	10492212	Argument	argv		10491727	1					
ANR	10492213	Identifier	argv		10491727	0					
ANR	10492214	Argument	& i		10491727	2					
ANR	10492215	UnaryOperationExpression	& i		10491727	0					
ANR	10492216	UnaryOperator	&		10491727	0					
ANR	10492217	Identifier	i		10491727	1					
ANR	10492218	Argument	arg + 2		10491727	3					
ANR	10492219	AdditiveExpression	arg + 2		10491727	0		+			
ANR	10492220	Identifier	arg		10491727	0					
ANR	10492221	PrimaryExpression	2		10491727	1					
ANR	10492222	Identifier	NULL		10491727	1					
ANR	10492223	GotoStatement	goto usage_exit ;	202:18:7165:7180	10491727	1	True				
ANR	10492224	Identifier	usage_exit		10491727	0					
ANR	10492225	ExpressionStatement	params . verbose = atoi ( arg_value )	203:14:7196:7228	10491727	36	True				
ANR	10492226	AssignmentExpression	params . verbose = atoi ( arg_value )		10491727	0		=			
ANR	10492227	MemberAccess	params . verbose		10491727	0					
ANR	10492228	Identifier	params		10491727	0					
ANR	10492229	Identifier	verbose		10491727	1					
ANR	10492230	CallExpression	atoi ( arg_value )		10491727	1					
ANR	10492231	Callee	atoi		10491727	0					
ANR	10492232	Identifier	atoi		10491727	0					
ANR	10492233	ArgumentList	arg_value		10491727	1					
ANR	10492234	Argument	arg_value		10491727	0					
ANR	10492235	Identifier	arg_value		10491727	0					
ANR	10492236	BreakStatement	break ;	204:14:7244:7249	10491727	37	True				
ANR	10492237	Label	default :	205:12:7263:7270	10491727	38	True				
ANR	10492238	Identifier	default		10491727	0					
ANR	10492239	Label	usage_exit :	206:0:7272:7282	10491727	39	True				
ANR	10492240	Identifier	usage_exit		10491727	0					
ANR	10492241	ReturnStatement	return usage ( ) ;	206:14:7286:7300	10491727	40	True				
ANR	10492242	CallExpression	usage ( )		10491727	0					
ANR	10492243	Callee	usage		10491727	0					
ANR	10492244	Identifier	usage		10491727	0					
ANR	10492245	ArgumentList			10491727	1					
ANR	10492246	ExpressionStatement	final_mask . memory = NULL	210:4:7336:7360	10491727	5	True				
ANR	10492247	AssignmentExpression	final_mask . memory = NULL		10491727	0		=			
ANR	10492248	MemberAccess	final_mask . memory		10491727	0					
ANR	10492249	Identifier	final_mask		10491727	0					
ANR	10492250	Identifier	memory		10491727	1					
ANR	10492251	Identifier	NULL		10491727	1					
ANR	10492252	ExpressionStatement	"code = htsc_gen_ordered ( params , & S , & final_mask )"	211:4:7390:7438	10491727	6	True				
ANR	10492253	AssignmentExpression	"code = htsc_gen_ordered ( params , & S , & final_mask )"		10491727	0		=			
ANR	10492254	Identifier	code		10491727	0					
ANR	10492255	CallExpression	"htsc_gen_ordered ( params , & S , & final_mask )"		10491727	1					
ANR	10492256	Callee	htsc_gen_ordered		10491727	0					
ANR	10492257	Identifier	htsc_gen_ordered		10491727	0					
ANR	10492258	ArgumentList	params		10491727	1					
ANR	10492259	Argument	params		10491727	0					
ANR	10492260	Identifier	params		10491727	0					
ANR	10492261	Argument	& S		10491727	1					
ANR	10492262	UnaryOperationExpression	& S		10491727	0					
ANR	10492263	UnaryOperator	&		10491727	0					
ANR	10492264	Identifier	S		10491727	1					
ANR	10492265	Argument	& final_mask		10491727	2					
ANR	10492266	UnaryOperationExpression	& final_mask		10491727	0					
ANR	10492267	UnaryOperator	&		10491727	0					
ANR	10492268	Identifier	final_mask		10491727	1					
ANR	10492269	IfStatement	if ( code >= 0 )		10491727	7					
ANR	10492270	Condition	code >= 0	213:8:7449:7457	10491727	0	True				
ANR	10492271	RelationalExpression	code >= 0		10491727	0		>=			
ANR	10492272	Identifier	code		10491727	0					
ANR	10492273	PrimaryExpression	0		10491727	1					
ANR	10492274	ExpressionStatement	"code = htsc_save_screen ( & final_mask , params . holladay , S , params )"	214:8:7468:7532	10491727	1	True				
ANR	10492275	AssignmentExpression	"code = htsc_save_screen ( & final_mask , params . holladay , S , params )"		10491727	0		=			
ANR	10492276	Identifier	code		10491727	0					
ANR	10492277	CallExpression	"htsc_save_screen ( & final_mask , params . holladay , S , params )"		10491727	1					
ANR	10492278	Callee	htsc_save_screen		10491727	0					
ANR	10492279	Identifier	htsc_save_screen		10491727	0					
ANR	10492280	ArgumentList	& final_mask		10491727	1					
ANR	10492281	Argument	& final_mask		10491727	0					
ANR	10492282	UnaryOperationExpression	& final_mask		10491727	0					
ANR	10492283	UnaryOperator	&		10491727	0					
ANR	10492284	Identifier	final_mask		10491727	1					
ANR	10492285	Argument	params . holladay		10491727	1					
ANR	10492286	MemberAccess	params . holladay		10491727	0					
ANR	10492287	Identifier	params		10491727	0					
ANR	10492288	Identifier	holladay		10491727	1					
ANR	10492289	Argument	S		10491727	2					
ANR	10492290	Identifier	S		10491727	0					
ANR	10492291	Argument	params		10491727	3					
ANR	10492292	Identifier	params		10491727	0					
ANR	10492293	IfStatement	if ( final_mask . data != NULL )		10491727	8					
ANR	10492294	Condition	final_mask . data != NULL	216:8:7543:7565	10491727	0	True				
ANR	10492295	EqualityExpression	final_mask . data != NULL		10491727	0		!=			
ANR	10492296	MemberAccess	final_mask . data		10491727	0					
ANR	10492297	Identifier	final_mask		10491727	0					
ANR	10492298	Identifier	data		10491727	1					
ANR	10492299	Identifier	NULL		10491727	1					
ANR	10492300	ExpressionStatement	free ( final_mask . data )	217:8:7576:7597	10491727	1	True				
ANR	10492301	CallExpression	free ( final_mask . data )		10491727	0					
ANR	10492302	Callee	free		10491727	0					
ANR	10492303	Identifier	free		10491727	0					
ANR	10492304	ArgumentList	final_mask . data		10491727	1					
ANR	10492305	Argument	final_mask . data		10491727	0					
ANR	10492306	MemberAccess	final_mask . data		10491727	0					
ANR	10492307	Identifier	final_mask		10491727	0					
ANR	10492308	Identifier	data		10491727	1					
ANR	10492309	ReturnStatement	return code ;	219:4:7604:7615	10491727	9	True				
ANR	10492310	Identifier	code		10491727	0					
ANR	10492311	ReturnType	int		10491727	1					
ANR	10492312	Identifier	main		10491727	2					
ANR	10492313	ParameterList	"int argc , char * * argv"		10491727	3					
ANR	10492314	Parameter	int argc	120:6:4205:4212	10491727	0	True				
ANR	10492315	ParameterType	int		10491727	0					
ANR	10492316	Identifier	argc		10491727	1					
ANR	10492317	Parameter	char * * argv	120:16:4215:4225	10491727	1	True				
ANR	10492318	ParameterType	char * *		10491727	0					
ANR	10492319	Identifier	argv		10491727	1					
ANR	10492320	CFGEntryNode	ENTRY		10491727		True				
ANR	10492321	CFGExitNode	EXIT		10491727		True				
ANR	10492322	Symbol	* arg_value		10491727						
ANR	10492323	Symbol	usage		10491727						
ANR	10492324	Symbol	final_mask . data		10491727						
ANR	10492325	Symbol	* argv		10491727						
ANR	10492326	Symbol	params . holladay		10491727						
ANR	10492327	Symbol	final_mask		10491727						
ANR	10492328	Symbol	& params		10491727						
ANR	10492329	Symbol	OUTPUT_PPM		10491727						
ANR	10492330	Symbol	params . vert_dpi		10491727						
ANR	10492331	Symbol	NULL		10491727						
ANR	10492332	Symbol	OUTPUT_RAW16		10491727						
ANR	10492333	Symbol	htsc_save_screen		10491727						
ANR	10492334	Symbol	params		10491727						
ANR	10492335	Symbol	params . output_format		10491727						
ANR	10492336	Symbol	params . targ_size		10491727						
ANR	10492337	Symbol	CIRCLE		10491727						
ANR	10492338	Symbol	final_mask . memory		10491727						
ANR	10492339	Symbol	sscanf		10491727						
ANR	10492340	Symbol	true		10491727						
ANR	10492341	Symbol	params . verbose		10491727						
ANR	10492342	Symbol	* arg		10491727						
ANR	10492343	Symbol	code		10491727						
ANR	10492344	Symbol	params . targ_scr_ang		10491727						
ANR	10492345	Symbol	OUTPUT_PS		10491727						
ANR	10492346	Symbol	params . targ_size_spec		10491727						
ANR	10492347	Symbol	argv		10491727						
ANR	10492348	Symbol	params . spot_type		10491727						
ANR	10492349	Symbol	params . targ_quant_spec		10491727						
ANR	10492350	Symbol	& final_mask		10491727						
ANR	10492351	Symbol	S		10491727						
ANR	10492352	Symbol	arg_value		10491727						
ANR	10492353	Symbol	arg		10491727						
ANR	10492354	Symbol	CUSTOM		10491727						
ANR	10492355	Symbol	& S		10491727						
ANR	10492356	Symbol	OUTPUT_RAW		10491727						
ANR	10492357	Symbol	params . horiz_dpi		10491727						
ANR	10492358	Symbol	argc		10491727						
ANR	10492359	Symbol	atoi		10491727						
ANR	10492360	Symbol	params . targ_quant		10491727						
ANR	10492361	Symbol	get_arg		10491727						
ANR	10492362	Symbol	i		10491727						
ANR	10492363	Symbol	j		10491727						
ANR	10492364	Symbol	OUTPUT_TOS		10491727						
ANR	10492365	Symbol	k		10491727						
ANR	10492366	Symbol	m		10491727						
ANR	10492367	Symbol	& i		10491727						
ANR	10492368	Symbol	& k		10491727						
ANR	10492369	Symbol	htsc_gen_ordered		10491727						
ANR	10492370	Symbol	* i		10491727						
ANR	10492371	Symbol	& m		10491727						
ANR	10492372	Symbol	params . targ_lpi		10491727						
ANR	10492373	Function	htsc_save_tos	223:0:7709:8202							
ANR	10492374	FunctionDef	htsc_save_tos (htsc_dig_grid_t * final_mask)		10492373	0					
ANR	10492375	CompoundStatement		225:0:7763:8202	10492373	0					
ANR	10492376	IdentifierDeclStatement	int width = final_mask -> width ;	226:4:7769:7798	10492373	0	True				
ANR	10492377	IdentifierDecl	width = final_mask -> width		10492373	0					
ANR	10492378	IdentifierDeclType	int		10492373	0					
ANR	10492379	Identifier	width		10492373	1					
ANR	10492380	AssignmentExpression	width = final_mask -> width		10492373	2		=			
ANR	10492381	Identifier	width		10492373	0					
ANR	10492382	PtrMemberAccess	final_mask -> width		10492373	1					
ANR	10492383	Identifier	final_mask		10492373	0					
ANR	10492384	Identifier	width		10492373	1					
ANR	10492385	IdentifierDeclStatement	int height = final_mask -> height ;	227:4:7804:7835	10492373	1	True				
ANR	10492386	IdentifierDecl	height = final_mask -> height		10492373	0					
ANR	10492387	IdentifierDeclType	int		10492373	0					
ANR	10492388	Identifier	height		10492373	1					
ANR	10492389	AssignmentExpression	height = final_mask -> height		10492373	2		=			
ANR	10492390	Identifier	height		10492373	0					
ANR	10492391	PtrMemberAccess	final_mask -> height		10492373	1					
ANR	10492392	Identifier	final_mask		10492373	0					
ANR	10492393	Identifier	height		10492373	1					
ANR	10492394	IdentifierDeclStatement	int * buff_ptr ;	228:4:7841:7854	10492373	2	True				
ANR	10492395	IdentifierDecl	* buff_ptr		10492373	0					
ANR	10492396	IdentifierDeclType	int *		10492373	0					
ANR	10492397	Identifier	buff_ptr		10492373	1					
ANR	10492398	IdentifierDeclStatement	FILE * fid ;	229:4:7860:7869	10492373	3	True				
ANR	10492399	IdentifierDecl	* fid		10492373	0					
ANR	10492400	IdentifierDeclType	FILE *		10492373	0					
ANR	10492401	Identifier	fid		10492373	1					
ANR	10492402	IdentifierDeclStatement	"int code , x , y , k = 0 ;"	230:4:7875:7896	10492373	4	True				
ANR	10492403	IdentifierDecl	code		10492373	0					
ANR	10492404	IdentifierDeclType	int		10492373	0					
ANR	10492405	Identifier	code		10492373	1					
ANR	10492406	IdentifierDecl	x		10492373	1					
ANR	10492407	IdentifierDeclType	int		10492373	0					
ANR	10492408	Identifier	x		10492373	1					
ANR	10492409	IdentifierDecl	y		10492373	2					
ANR	10492410	IdentifierDeclType	int		10492373	0					
ANR	10492411	Identifier	y		10492373	1					
ANR	10492412	IdentifierDecl	k = 0		10492373	3					
ANR	10492413	IdentifierDeclType	int		10492373	0					
ANR	10492414	Identifier	k		10492373	1					
ANR	10492415	AssignmentExpression	k = 0		10492373	2		=			
ANR	10492416	Identifier	k		10492373	0					
ANR	10492417	PrimaryExpression	0		10492373	1					
ANR	10492418	IdentifierDeclStatement	int count = height * width ;	231:4:7902:7927	10492373	5	True				
ANR	10492419	IdentifierDecl	count = height * width		10492373	0					
ANR	10492420	IdentifierDeclType	int		10492373	0					
ANR	10492421	Identifier	count		10492373	1					
ANR	10492422	AssignmentExpression	count = height * width		10492373	2		=			
ANR	10492423	Identifier	count		10492373	0					
ANR	10492424	MultiplicativeExpression	height * width		10492373	1		*			
ANR	10492425	Identifier	height		10492373	0					
ANR	10492426	Identifier	width		10492373	1					
ANR	10492427	ExpressionStatement	"fid = fopen ( ""turn_on_seq.out"" , ""w"" )"	233:4:7934:7968	10492373	6	True				
ANR	10492428	AssignmentExpression	"fid = fopen ( ""turn_on_seq.out"" , ""w"" )"		10492373	0		=			
ANR	10492429	Identifier	fid		10492373	0					
ANR	10492430	CallExpression	"fopen ( ""turn_on_seq.out"" , ""w"" )"		10492373	1					
ANR	10492431	Callee	fopen		10492373	0					
ANR	10492432	Identifier	fopen		10492373	0					
ANR	10492433	ArgumentList	"""turn_on_seq.out"""		10492373	1					
ANR	10492434	Argument	"""turn_on_seq.out"""		10492373	0					
ANR	10492435	PrimaryExpression	"""turn_on_seq.out"""		10492373	0					
ANR	10492436	Argument	"""w"""		10492373	1					
ANR	10492437	PrimaryExpression	"""w"""		10492373	0					
ANR	10492438	ExpressionStatement	"fprintf ( fid , ""# W=%d H=%d\\n"" , width , height )"	234:4:7974:8016	10492373	7	True				
ANR	10492439	CallExpression	"fprintf ( fid , ""# W=%d H=%d\\n"" , width , height )"		10492373	0					
ANR	10492440	Callee	fprintf		10492373	0					
ANR	10492441	Identifier	fprintf		10492373	0					
ANR	10492442	ArgumentList	fid		10492373	1					
ANR	10492443	Argument	fid		10492373	0					
ANR	10492444	Identifier	fid		10492373	0					
ANR	10492445	Argument	"""# W=%d H=%d\\n"""		10492373	1					
ANR	10492446	PrimaryExpression	"""# W=%d H=%d\\n"""		10492373	0					
ANR	10492447	Argument	width		10492373	2					
ANR	10492448	Identifier	width		10492373	0					
ANR	10492449	Argument	height		10492373	3					
ANR	10492450	Identifier	height		10492373	0					
ANR	10492451	ExpressionStatement	buff_ptr = final_mask -> data	237:4:8043:8070	10492373	8	True				
ANR	10492452	AssignmentExpression	buff_ptr = final_mask -> data		10492373	0		=			
ANR	10492453	Identifier	buff_ptr		10492373	0					
ANR	10492454	PtrMemberAccess	final_mask -> data		10492373	1					
ANR	10492455	Identifier	final_mask		10492373	0					
ANR	10492456	Identifier	data		10492373	1					
ANR	10492457	ForStatement	for ( k = 0 ; k < count ; k ++ )		10492373	9					
ANR	10492458	ForInit	k = 0 ;	238:9:8081:8086	10492373	0	True				
ANR	10492459	AssignmentExpression	k = 0		10492373	0		=			
ANR	10492460	Identifier	k		10492373	0					
ANR	10492461	PrimaryExpression	0		10492373	1					
ANR	10492462	Condition	k < count	238:16:8088:8096	10492373	1	True				
ANR	10492463	RelationalExpression	k < count		10492373	0		<			
ANR	10492464	Identifier	k		10492373	0					
ANR	10492465	Identifier	count		10492373	1					
ANR	10492466	PostIncDecOperationExpression	k ++	238:27:8099:8101	10492373	2	True				
ANR	10492467	Identifier	k		10492373	0					
ANR	10492468	IncDec	++		10492373	1					
ANR	10492469	CompoundStatement		14:32:340:340	10492373	3					
ANR	10492470	ExpressionStatement	"fprintf ( fid , ""%d\\t%d\\n"" , * buff_ptr ++ , * buff_ptr ++ )"	239:8:8114:8163	10492373	0	True				
ANR	10492471	CallExpression	"fprintf ( fid , ""%d\\t%d\\n"" , * buff_ptr ++ , * buff_ptr ++ )"		10492373	0					
ANR	10492472	Callee	fprintf		10492373	0					
ANR	10492473	Identifier	fprintf		10492373	0					
ANR	10492474	ArgumentList	fid		10492373	1					
ANR	10492475	Argument	fid		10492373	0					
ANR	10492476	Identifier	fid		10492373	0					
ANR	10492477	Argument	"""%d\\t%d\\n"""		10492373	1					
ANR	10492478	PrimaryExpression	"""%d\\t%d\\n"""		10492373	0					
ANR	10492479	Argument	* buff_ptr ++		10492373	2					
ANR	10492480	UnaryOperationExpression	* buff_ptr ++		10492373	0					
ANR	10492481	UnaryOperator	*		10492373	0					
ANR	10492482	PostIncDecOperationExpression	buff_ptr ++		10492373	1					
ANR	10492483	Identifier	buff_ptr		10492373	0					
ANR	10492484	IncDec	++		10492373	1					
ANR	10492485	Argument	* buff_ptr ++		10492373	3					
ANR	10492486	UnaryOperationExpression	* buff_ptr ++		10492373	0					
ANR	10492487	UnaryOperator	*		10492373	0					
ANR	10492488	PostIncDecOperationExpression	buff_ptr ++		10492373	1					
ANR	10492489	Identifier	buff_ptr		10492373	0					
ANR	10492490	IncDec	++		10492373	1					
ANR	10492491	ExpressionStatement	fclose ( fid )	241:4:8175:8186	10492373	10	True				
ANR	10492492	CallExpression	fclose ( fid )		10492373	0					
ANR	10492493	Callee	fclose		10492373	0					
ANR	10492494	Identifier	fclose		10492373	0					
ANR	10492495	ArgumentList	fid		10492373	1					
ANR	10492496	Argument	fid		10492373	0					
ANR	10492497	Identifier	fid		10492373	0					
ANR	10492498	ReturnStatement	return 0 ;	242:4:8192:8200	10492373	11	True				
ANR	10492499	PrimaryExpression	0		10492373	0					
ANR	10492500	ReturnType	static int		10492373	1					
ANR	10492501	Identifier	htsc_save_tos		10492373	2					
ANR	10492502	ParameterList	htsc_dig_grid_t * final_mask		10492373	3					
ANR	10492503	Parameter	htsc_dig_grid_t * final_mask	224:14:7734:7760	10492373	0	True				
ANR	10492504	ParameterType	htsc_dig_grid_t *		10492373	0					
ANR	10492505	Identifier	final_mask		10492373	1					
ANR	10492506	CFGEntryNode	ENTRY		10492373		True				
ANR	10492507	CFGExitNode	EXIT		10492373		True				
ANR	10492508	Symbol	fid		10492373						
ANR	10492509	Symbol	fopen		10492373						
ANR	10492510	Symbol	final_mask -> width		10492373						
ANR	10492511	Symbol	final_mask -> data		10492373						
ANR	10492512	Symbol	code		10492373						
ANR	10492513	Symbol	buff_ptr		10492373						
ANR	10492514	Symbol	count		10492373						
ANR	10492515	Symbol	k		10492373						
ANR	10492516	Symbol	* final_mask		10492373						
ANR	10492517	Symbol	width		10492373						
ANR	10492518	Symbol	x		10492373						
ANR	10492519	Symbol	y		10492373						
ANR	10492520	Symbol	* buff_ptr ++		10492373						
ANR	10492521	Symbol	final_mask -> height		10492373						
ANR	10492522	Symbol	final_mask		10492373						
ANR	10492523	Symbol	height		10492373						
ANR	10492524	Function	htsc_save_screen	245:0:8205:13422							
ANR	10492525	FunctionDef	"htsc_save_screen (htsc_dig_grid_t * final_mask , bool use_holladay_grid , int S , htsc_param_t params)"		10492524	0					
ANR	10492526	CompoundStatement		248:0:8330:13422	10492524	0					
ANR	10492527	IdentifierDeclStatement	char full_file_name [ FULL_FILE_NAME_LENGTH ] ;	249:4:8336:8378	10492524	0	True				
ANR	10492528	IdentifierDecl	full_file_name [ FULL_FILE_NAME_LENGTH ]		10492524	0					
ANR	10492529	IdentifierDeclType	char [ FULL_FILE_NAME_LENGTH ]		10492524	0					
ANR	10492530	Identifier	full_file_name		10492524	1					
ANR	10492531	Identifier	FULL_FILE_NAME_LENGTH		10492524	2					
ANR	10492532	IdentifierDeclStatement	FILE * fid ;	250:4:8384:8393	10492524	1	True				
ANR	10492533	IdentifierDecl	* fid		10492524	0					
ANR	10492534	IdentifierDeclType	FILE *		10492524	0					
ANR	10492535	Identifier	fid		10492524	1					
ANR	10492536	IdentifierDeclStatement	"int x , y , code = 0 ;"	251:4:8399:8416	10492524	2	True				
ANR	10492537	IdentifierDecl	x		10492524	0					
ANR	10492538	IdentifierDeclType	int		10492524	0					
ANR	10492539	Identifier	x		10492524	1					
ANR	10492540	IdentifierDecl	y		10492524	1					
ANR	10492541	IdentifierDeclType	int		10492524	0					
ANR	10492542	Identifier	y		10492524	1					
ANR	10492543	IdentifierDecl	code = 0		10492524	2					
ANR	10492544	IdentifierDeclType	int		10492524	0					
ANR	10492545	Identifier	code		10492524	1					
ANR	10492546	AssignmentExpression	code = 0		10492524	2		=			
ANR	10492547	Identifier	code		10492524	0					
ANR	10492548	PrimaryExpression	0		10492524	1					
ANR	10492549	IdentifierDeclStatement	int * buff_ptr = final_mask -> data ;	252:4:8422:8454	10492524	3	True				
ANR	10492550	IdentifierDecl	* buff_ptr = final_mask -> data		10492524	0					
ANR	10492551	IdentifierDeclType	int *		10492524	0					
ANR	10492552	Identifier	buff_ptr		10492524	1					
ANR	10492553	AssignmentExpression	* buff_ptr = final_mask -> data		10492524	2		=			
ANR	10492554	Identifier	buff_ptr		10492524	0					
ANR	10492555	PtrMemberAccess	final_mask -> data		10492524	1					
ANR	10492556	Identifier	final_mask		10492524	0					
ANR	10492557	Identifier	data		10492524	1					
ANR	10492558	IdentifierDeclStatement	int width = final_mask -> width ;	253:4:8460:8489	10492524	4	True				
ANR	10492559	IdentifierDecl	width = final_mask -> width		10492524	0					
ANR	10492560	IdentifierDeclType	int		10492524	0					
ANR	10492561	Identifier	width		10492524	1					
ANR	10492562	AssignmentExpression	width = final_mask -> width		10492524	2		=			
ANR	10492563	Identifier	width		10492524	0					
ANR	10492564	PtrMemberAccess	final_mask -> width		10492524	1					
ANR	10492565	Identifier	final_mask		10492524	0					
ANR	10492566	Identifier	width		10492524	1					
ANR	10492567	IdentifierDeclStatement	int height = final_mask -> height ;	254:4:8495:8526	10492524	5	True				
ANR	10492568	IdentifierDecl	height = final_mask -> height		10492524	0					
ANR	10492569	IdentifierDeclType	int		10492524	0					
ANR	10492570	Identifier	height		10492524	1					
ANR	10492571	AssignmentExpression	height = final_mask -> height		10492524	2		=			
ANR	10492572	Identifier	height		10492524	0					
ANR	10492573	PtrMemberAccess	final_mask -> height		10492524	1					
ANR	10492574	Identifier	final_mask		10492524	0					
ANR	10492575	Identifier	height		10492524	1					
ANR	10492576	IdentifierDeclStatement	byte data ;	255:4:8532:8541	10492524	6	True				
ANR	10492577	IdentifierDecl	data		10492524	0					
ANR	10492578	IdentifierDeclType	byte		10492524	0					
ANR	10492579	Identifier	data		10492524	1					
ANR	10492580	IdentifierDeclStatement	unsigned short data_short ;	256:4:8547:8572	10492524	7	True				
ANR	10492581	IdentifierDecl	data_short		10492524	0					
ANR	10492582	IdentifierDeclType	unsigned short		10492524	0					
ANR	10492583	Identifier	data_short		10492524	1					
ANR	10492584	IdentifierDeclStatement	output_format_type output_format = params . output_format ;	257:4:8578:8633	10492524	8	True				
ANR	10492585	IdentifierDecl	output_format = params . output_format		10492524	0					
ANR	10492586	IdentifierDeclType	output_format_type		10492524	0					
ANR	10492587	Identifier	output_format		10492524	1					
ANR	10492588	AssignmentExpression	output_format = params . output_format		10492524	2		=			
ANR	10492589	Identifier	output_format		10492524	0					
ANR	10492590	MemberAccess	params . output_format		10492524	1					
ANR	10492591	Identifier	params		10492524	0					
ANR	10492592	Identifier	output_format		10492524	1					
ANR	10492593	IdentifierDeclStatement	"char * output_extension = ( output_format == OUTPUT_PS ) ? ""ps"" : ( ( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) ) ) ;"	258:4:8639:8844	10492524	9	True				
ANR	10492594	IdentifierDecl	"* output_extension = ( output_format == OUTPUT_PS ) ? ""ps"" : ( ( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) ) )"		10492524	0					
ANR	10492595	IdentifierDeclType	char *		10492524	0					
ANR	10492596	Identifier	output_extension		10492524	1					
ANR	10492597	AssignmentExpression	"* output_extension = ( output_format == OUTPUT_PS ) ? ""ps"" : ( ( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) ) )"		10492524	2		=			
ANR	10492598	Identifier	output_extension		10492524	0					
ANR	10492599	ConditionalExpression	"( output_format == OUTPUT_PS ) ? ""ps"" : ( ( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) ) )"		10492524	1					
ANR	10492600	Condition	output_format == OUTPUT_PS		10492524	0					
ANR	10492601	EqualityExpression	output_format == OUTPUT_PS		10492524	0		==			
ANR	10492602	Identifier	output_format		10492524	0					
ANR	10492603	Identifier	OUTPUT_PS		10492524	1					
ANR	10492604	PrimaryExpression	"""ps"""		10492524	1					
ANR	10492605	ConditionalExpression	"( output_format == OUTPUT_PPM ) ? ""ppm"" : ( ( output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"" ) )"		10492524	2					
ANR	10492606	Condition	output_format == OUTPUT_PPM		10492524	0					
ANR	10492607	EqualityExpression	output_format == OUTPUT_PPM		10492524	0		==			
ANR	10492608	Identifier	output_format		10492524	0					
ANR	10492609	Identifier	OUTPUT_PPM		10492524	1					
ANR	10492610	PrimaryExpression	"""ppm"""		10492524	1					
ANR	10492611	ConditionalExpression	"output_format == OUTPUT_RAW16 ? ""16.raw"" : ""raw"""		10492524	2					
ANR	10492612	Condition	output_format == OUTPUT_RAW16		10492524	0					
ANR	10492613	EqualityExpression	output_format == OUTPUT_RAW16		10492524	0		==			
ANR	10492614	Identifier	output_format		10492524	0					
ANR	10492615	Identifier	OUTPUT_RAW16		10492524	1					
ANR	10492616	PrimaryExpression	"""16.raw"""		10492524	1					
ANR	10492617	PrimaryExpression	"""raw"""		10492524	2					
ANR	10492618	IfStatement	if ( output_format == OUTPUT_TOS )		10492524	10					
ANR	10492619	Condition	output_format == OUTPUT_TOS	262:8:8855:8881	10492524	0	True				
ANR	10492620	EqualityExpression	output_format == OUTPUT_TOS		10492524	0		==			
ANR	10492621	Identifier	output_format		10492524	0					
ANR	10492622	Identifier	OUTPUT_TOS		10492524	1					
ANR	10492623	CompoundStatement		15:37:553:553	10492524	1					
ANR	10492624	ExpressionStatement	code = htsc_save_tos ( final_mask )	265:8:8987:9019	10492524	0	True				
ANR	10492625	AssignmentExpression	code = htsc_save_tos ( final_mask )		10492524	0		=			
ANR	10492626	Identifier	code		10492524	0					
ANR	10492627	CallExpression	htsc_save_tos ( final_mask )		10492524	1					
ANR	10492628	Callee	htsc_save_tos		10492524	0					
ANR	10492629	Identifier	htsc_save_tos		10492524	0					
ANR	10492630	ArgumentList	final_mask		10492524	1					
ANR	10492631	Argument	final_mask		10492524	0					
ANR	10492632	Identifier	final_mask		10492524	0					
ANR	10492633	ElseStatement	else		10492524	0					
ANR	10492634	CompoundStatement		19:11:701:701	10492524	0					
ANR	10492635	IfStatement	if ( use_holladay_grid )		10492524	0					
ANR	10492636	Condition	use_holladay_grid	267:12:9046:9062	10492524	0	True				
ANR	10492637	Identifier	use_holladay_grid		10492524	0					
ANR	10492638	CompoundStatement		20:31:734:734	10492524	1					
ANR	10492639	ExpressionStatement	"snprintf ( full_file_name , FULL_FILE_NAME_LENGTH , ""Screen_Holladay_Shift%d_%dx%d.%s"" , S , width , height , output_extension )"	268:12:9079:9218	10492524	0	True				
ANR	10492640	CallExpression	"snprintf ( full_file_name , FULL_FILE_NAME_LENGTH , ""Screen_Holladay_Shift%d_%dx%d.%s"" , S , width , height , output_extension )"		10492524	0					
ANR	10492641	Callee	snprintf		10492524	0					
ANR	10492642	Identifier	snprintf		10492524	0					
ANR	10492643	ArgumentList	full_file_name		10492524	1					
ANR	10492644	Argument	full_file_name		10492524	0					
ANR	10492645	Identifier	full_file_name		10492524	0					
ANR	10492646	Argument	FULL_FILE_NAME_LENGTH		10492524	1					
ANR	10492647	Identifier	FULL_FILE_NAME_LENGTH		10492524	0					
ANR	10492648	Argument	"""Screen_Holladay_Shift%d_%dx%d.%s"""		10492524	2					
ANR	10492649	PrimaryExpression	"""Screen_Holladay_Shift%d_%dx%d.%s"""		10492524	0					
ANR	10492650	Argument	S		10492524	3					
ANR	10492651	Identifier	S		10492524	0					
ANR	10492652	Argument	width		10492524	4					
ANR	10492653	Identifier	width		10492524	0					
ANR	10492654	Argument	height		10492524	5					
ANR	10492655	Identifier	height		10492524	0					
ANR	10492656	Argument	output_extension		10492524	6					
ANR	10492657	Identifier	output_extension		10492524	0					
ANR	10492658	ElseStatement	else		10492524	0					
ANR	10492659	CompoundStatement		23:15:904:904	10492524	0					
ANR	10492660	ExpressionStatement	"snprintf ( full_file_name , FULL_FILE_NAME_LENGTH , ""Screen_Dithered_%dx%d.%s"" , width , height , output_extension )"	271:12:9249:9375	10492524	0	True				
ANR	10492661	CallExpression	"snprintf ( full_file_name , FULL_FILE_NAME_LENGTH , ""Screen_Dithered_%dx%d.%s"" , width , height , output_extension )"		10492524	0					
ANR	10492662	Callee	snprintf		10492524	0					
ANR	10492663	Identifier	snprintf		10492524	0					
ANR	10492664	ArgumentList	full_file_name		10492524	1					
ANR	10492665	Argument	full_file_name		10492524	0					
ANR	10492666	Identifier	full_file_name		10492524	0					
ANR	10492667	Argument	FULL_FILE_NAME_LENGTH		10492524	1					
ANR	10492668	Identifier	FULL_FILE_NAME_LENGTH		10492524	0					
ANR	10492669	Argument	"""Screen_Dithered_%dx%d.%s"""		10492524	2					
ANR	10492670	PrimaryExpression	"""Screen_Dithered_%dx%d.%s"""		10492524	0					
ANR	10492671	Argument	width		10492524	3					
ANR	10492672	Identifier	width		10492524	0					
ANR	10492673	Argument	height		10492524	4					
ANR	10492674	Identifier	height		10492524	0					
ANR	10492675	Argument	output_extension		10492524	5					
ANR	10492676	Identifier	output_extension		10492524	0					
ANR	10492677	ExpressionStatement	"fid = fopen ( full_file_name , ""wb"" )"	274:8:9395:9427	10492524	1	True				
ANR	10492678	AssignmentExpression	"fid = fopen ( full_file_name , ""wb"" )"		10492524	0		=			
ANR	10492679	Identifier	fid		10492524	0					
ANR	10492680	CallExpression	"fopen ( full_file_name , ""wb"" )"		10492524	1					
ANR	10492681	Callee	fopen		10492524	0					
ANR	10492682	Identifier	fopen		10492524	0					
ANR	10492683	ArgumentList	full_file_name		10492524	1					
ANR	10492684	Argument	full_file_name		10492524	0					
ANR	10492685	Identifier	full_file_name		10492524	0					
ANR	10492686	Argument	"""wb"""		10492524	1					
ANR	10492687	PrimaryExpression	"""wb"""		10492524	0					
ANR	10492688	IfStatement	if ( output_format == OUTPUT_PPM )		10492524	2					
ANR	10492689	Condition	output_format == OUTPUT_PPM	276:12:9442:9468	10492524	0	True				
ANR	10492690	EqualityExpression	output_format == OUTPUT_PPM		10492524	0		==			
ANR	10492691	Identifier	output_format		10492524	0					
ANR	10492692	Identifier	OUTPUT_PPM		10492524	1					
ANR	10492693	Statement	fprintf	277:12:9483:9489	10492524	1	True				
ANR	10492694	Statement	(	277:19:9490:9490	10492524	3	True				
ANR	10492695	Statement	fid	277:20:9491:9493	10492524	4	True				
ANR	10492696	Statement	","	277:23:9494:9494	10492524	5	True				
ANR	10492697	Statement	"""P5\\n"""	277:25:9496:9501	10492524	6	True				
ANR	10492698	Statement	"""# Halftone threshold array, %s, [%d, %d], S=%d\\n"""	278:20:9523:9572	10492524	7	True				
ANR	10492699	Statement	"""%d %d\\n"""	279:20:9594:9602	10492524	8	True				
ANR	10492700	Statement	"""255\\n"""	280:20:9624:9630	10492524	9	True				
ANR	10492701	Statement	","	280:27:9631:9631	10492524	10	True				
ANR	10492702	Statement	use_holladay_grid	281:20:9653:9669	10492524	11	True				
ANR	10492703	Statement	?	281:38:9671:9671	10492524	12	True				
ANR	10492704	Statement	"""Holladay_Shift"""	281:40:9673:9688	10492524	13	True				
ANR	10492705	Statement	:	281:57:9690:9690	10492524	14	True				
ANR	10492706	Statement	"""Dithered"""	281:59:9692:9701	10492524	15	True				
ANR	10492707	Statement	","	281:69:9702:9702	10492524	16	True				
ANR	10492708	Statement	width	281:71:9704:9708	10492524	17	True				
ANR	10492709	Statement	","	281:76:9709:9709	10492524	18	True				
ANR	10492710	Statement	height	281:78:9711:9716	10492524	19	True				
ANR	10492711	Statement	","	281:84:9717:9717	10492524	20	True				
ANR	10492712	Statement	S	282:20:9739:9739	10492524	21	True				
ANR	10492713	Statement	","	282:21:9740:9740	10492524	22	True				
ANR	10492714	Statement	width	282:23:9742:9746	10492524	23	True				
ANR	10492715	Statement	","	282:28:9747:9747	10492524	24	True				
ANR	10492716	Statement	height	282:30:9749:9754	10492524	25	True				
ANR	10492717	Statement	)	282:36:9755:9755	10492524	26	True				
ANR	10492718	ExpressionStatement		282:37:9756:9756	10492524	27	True				
ANR	10492719	IfStatement	if ( output_format != OUTPUT_PS )		10492524	28					
ANR	10492720	Condition	output_format != OUTPUT_PS	283:12:9770:9795	10492524	0	True				
ANR	10492721	EqualityExpression	output_format != OUTPUT_PS		10492524	0		!=			
ANR	10492722	Identifier	output_format		10492524	0					
ANR	10492723	Identifier	OUTPUT_PS		10492524	1					
ANR	10492724	CompoundStatement		36:40:1467:1467	10492524	1					
ANR	10492725	IfStatement	if ( output_format == OUTPUT_RAW || output_format == OUTPUT_PPM )		10492524	0					
ANR	10492726	Condition	output_format == OUTPUT_RAW || output_format == OUTPUT_PPM	285:16:9885:9942	10492524	0	True				
ANR	10492727	OrExpression	output_format == OUTPUT_RAW || output_format == OUTPUT_PPM		10492524	0		||			
ANR	10492728	EqualityExpression	output_format == OUTPUT_RAW		10492524	0		==			
ANR	10492729	Identifier	output_format		10492524	0					
ANR	10492730	Identifier	OUTPUT_RAW		10492524	1					
ANR	10492731	EqualityExpression	output_format == OUTPUT_PPM		10492524	1		==			
ANR	10492732	Identifier	output_format		10492524	0					
ANR	10492733	Identifier	OUTPUT_PPM		10492524	1					
ANR	10492734	CompoundStatement		38:76:1614:1614	10492524	1					
ANR	10492735	ForStatement	for ( y = 0 ; y < height ; y ++ )		10492524	0					
ANR	10492736	ForInit	y = 0 ;	286:21:9968:9973	10492524	0	True				
ANR	10492737	AssignmentExpression	y = 0		10492524	0		=			
ANR	10492738	Identifier	y		10492524	0					
ANR	10492739	PrimaryExpression	0		10492524	1					
ANR	10492740	Condition	y < height	286:28:9975:9984	10492524	1	True				
ANR	10492741	RelationalExpression	y < height		10492524	0		<			
ANR	10492742	Identifier	y		10492524	0					
ANR	10492743	Identifier	height		10492524	1					
ANR	10492744	PostIncDecOperationExpression	y ++	286:40:9987:9989	10492524	2	True				
ANR	10492745	Identifier	y		10492524	0					
ANR	10492746	IncDec	++		10492524	1					
ANR	10492747	CompoundStatement		39:45:1661:1661	10492524	3					
ANR	10492748	ForStatement	for ( x = 0 ; x < width ; x ++ )		10492524	0					
ANR	10492749	ForInit	x = 0 ;	287:26:10020:10025	10492524	0	True				
ANR	10492750	AssignmentExpression	x = 0		10492524	0		=			
ANR	10492751	Identifier	x		10492524	0					
ANR	10492752	PrimaryExpression	0		10492524	1					
ANR	10492753	Condition	x < width	287:33:10027:10035	10492524	1	True				
ANR	10492754	RelationalExpression	x < width		10492524	0		<			
ANR	10492755	Identifier	x		10492524	0					
ANR	10492756	Identifier	width		10492524	1					
ANR	10492757	PostIncDecOperationExpression	x ++	287:44:10038:10040	10492524	2	True				
ANR	10492758	Identifier	x		10492524	0					
ANR	10492759	IncDec	++		10492524	1					
ANR	10492760	CompoundStatement		40:50:1713:1713	10492524	3					
ANR	10492761	ExpressionStatement	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )	288:24:10070:10120	10492524	0	True				
ANR	10492762	AssignmentExpression	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )		10492524	0		=			
ANR	10492763	Identifier	data_short		10492524	0					
ANR	10492764	CastExpression	( unsigned short ) ( * buff_ptr & 0xffff )		10492524	1					
ANR	10492765	CastTarget	unsigned short		10492524	0					
ANR	10492766	BitAndExpression	* buff_ptr & 0xffff		10492524	1		&			
ANR	10492767	UnaryOperationExpression	* buff_ptr		10492524	0					
ANR	10492768	UnaryOperator	*		10492524	0					
ANR	10492769	Identifier	buff_ptr		10492524	1					
ANR	10492770	PrimaryExpression	0xffff		10492524	1					
ANR	10492771	ExpressionStatement	data_short = ROUND ( ( double ) data_short * 255.0 / MAXVAL )	289:24:10146:10202	10492524	1	True				
ANR	10492772	AssignmentExpression	data_short = ROUND ( ( double ) data_short * 255.0 / MAXVAL )		10492524	0		=			
ANR	10492773	Identifier	data_short		10492524	0					
ANR	10492774	CallExpression	ROUND ( ( double ) data_short * 255.0 / MAXVAL )		10492524	1					
ANR	10492775	Callee	ROUND		10492524	0					
ANR	10492776	Identifier	ROUND		10492524	0					
ANR	10492777	ArgumentList	( double ) data_short * 255.0 / MAXVAL		10492524	1					
ANR	10492778	Argument	( double ) data_short * 255.0 / MAXVAL		10492524	0					
ANR	10492779	MultiplicativeExpression	( double ) data_short * 255.0 / MAXVAL		10492524	0		*			
ANR	10492780	CastExpression	( double ) data_short		10492524	0					
ANR	10492781	CastTarget	double		10492524	0					
ANR	10492782	Identifier	data_short		10492524	1					
ANR	10492783	MultiplicativeExpression	255.0 / MAXVAL		10492524	1		/			
ANR	10492784	PrimaryExpression	255.0		10492524	0					
ANR	10492785	Identifier	MAXVAL		10492524	1					
ANR	10492786	IfStatement	if ( data_short > 255 )		10492524	2					
ANR	10492787	Condition	data_short > 255	290:28:10232:10247	10492524	0	True				
ANR	10492788	RelationalExpression	data_short > 255		10492524	0		>			
ANR	10492789	Identifier	data_short		10492524	0					
ANR	10492790	PrimaryExpression	255		10492524	1					
ANR	10492791	ExpressionStatement	data_short = 255	290:46:10250:10266	10492524	1	True				
ANR	10492792	AssignmentExpression	data_short = 255		10492524	0		=			
ANR	10492793	Identifier	data_short		10492524	0					
ANR	10492794	PrimaryExpression	255		10492524	1					
ANR	10492795	ExpressionStatement	data = ( byte ) ( data_short & 0xff )	291:24:10292:10325	10492524	3	True				
ANR	10492796	AssignmentExpression	data = ( byte ) ( data_short & 0xff )		10492524	0		=			
ANR	10492797	Identifier	data		10492524	0					
ANR	10492798	CastExpression	( byte ) ( data_short & 0xff )		10492524	1					
ANR	10492799	CastTarget	byte		10492524	0					
ANR	10492800	BitAndExpression	data_short & 0xff		10492524	1		&			
ANR	10492801	Identifier	data_short		10492524	0					
ANR	10492802	PrimaryExpression	0xff		10492524	1					
ANR	10492803	ExpressionStatement	"fwrite ( & data , sizeof ( byte ) , 1 , fid )"	292:24:10351:10386	10492524	4	True				
ANR	10492804	CallExpression	"fwrite ( & data , sizeof ( byte ) , 1 , fid )"		10492524	0					
ANR	10492805	Callee	fwrite		10492524	0					
ANR	10492806	Identifier	fwrite		10492524	0					
ANR	10492807	ArgumentList	& data		10492524	1					
ANR	10492808	Argument	& data		10492524	0					
ANR	10492809	UnaryOperationExpression	& data		10492524	0					
ANR	10492810	UnaryOperator	&		10492524	0					
ANR	10492811	Identifier	data		10492524	1					
ANR	10492812	Argument	sizeof ( byte )		10492524	1					
ANR	10492813	SizeofExpression	sizeof ( byte )		10492524	0					
ANR	10492814	Sizeof	sizeof		10492524	0					
ANR	10492815	SizeofOperand	byte		10492524	1					
ANR	10492816	Argument	1		10492524	2					
ANR	10492817	PrimaryExpression	1		10492524	0					
ANR	10492818	Argument	fid		10492524	3					
ANR	10492819	Identifier	fid		10492524	0					
ANR	10492820	ExpressionStatement	buff_ptr ++	293:24:10412:10422	10492524	5	True				
ANR	10492821	PostIncDecOperationExpression	buff_ptr ++		10492524	0					
ANR	10492822	Identifier	buff_ptr		10492524	0					
ANR	10492823	IncDec	++		10492524	1					
ANR	10492824	ElseStatement	else		10492524	0					
ANR	10492825	CompoundStatement		49:19:2152:2152	10492524	0					
ANR	10492826	ForStatement	for ( y = 0 ; y < height ; y ++ )		10492524	0					
ANR	10492827	ForInit	y = 0 ;	297:21:10523:10528	10492524	0	True				
ANR	10492828	AssignmentExpression	y = 0		10492524	0		=			
ANR	10492829	Identifier	y		10492524	0					
ANR	10492830	PrimaryExpression	0		10492524	1					
ANR	10492831	Condition	y < height	297:28:10530:10539	10492524	1	True				
ANR	10492832	RelationalExpression	y < height		10492524	0		<			
ANR	10492833	Identifier	y		10492524	0					
ANR	10492834	Identifier	height		10492524	1					
ANR	10492835	PostIncDecOperationExpression	y ++	297:40:10542:10544	10492524	2	True				
ANR	10492836	Identifier	y		10492524	0					
ANR	10492837	IncDec	++		10492524	1					
ANR	10492838	CompoundStatement		50:45:2216:2216	10492524	3					
ANR	10492839	ForStatement	for ( x = 0 ; x < width ; x ++ )		10492524	0					
ANR	10492840	ForInit	x = 0 ;	298:26:10575:10580	10492524	0	True				
ANR	10492841	AssignmentExpression	x = 0		10492524	0		=			
ANR	10492842	Identifier	x		10492524	0					
ANR	10492843	PrimaryExpression	0		10492524	1					
ANR	10492844	Condition	x < width	298:33:10582:10590	10492524	1	True				
ANR	10492845	RelationalExpression	x < width		10492524	0		<			
ANR	10492846	Identifier	x		10492524	0					
ANR	10492847	Identifier	width		10492524	1					
ANR	10492848	PostIncDecOperationExpression	x ++	298:44:10593:10595	10492524	2	True				
ANR	10492849	Identifier	x		10492524	0					
ANR	10492850	IncDec	++		10492524	1					
ANR	10492851	CompoundStatement		51:50:2268:2268	10492524	3					
ANR	10492852	ExpressionStatement	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )	299:24:10625:10675	10492524	0	True				
ANR	10492853	AssignmentExpression	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )		10492524	0		=			
ANR	10492854	Identifier	data_short		10492524	0					
ANR	10492855	CastExpression	( unsigned short ) ( * buff_ptr & 0xffff )		10492524	1					
ANR	10492856	CastTarget	unsigned short		10492524	0					
ANR	10492857	BitAndExpression	* buff_ptr & 0xffff		10492524	1		&			
ANR	10492858	UnaryOperationExpression	* buff_ptr		10492524	0					
ANR	10492859	UnaryOperator	*		10492524	0					
ANR	10492860	Identifier	buff_ptr		10492524	1					
ANR	10492861	PrimaryExpression	0xffff		10492524	1					
ANR	10492862	ExpressionStatement	"fwrite ( & data_short , sizeof ( short ) , 1 , fid )"	300:24:10701:10743	10492524	1	True				
ANR	10492863	CallExpression	"fwrite ( & data_short , sizeof ( short ) , 1 , fid )"		10492524	0					
ANR	10492864	Callee	fwrite		10492524	0					
ANR	10492865	Identifier	fwrite		10492524	0					
ANR	10492866	ArgumentList	& data_short		10492524	1					
ANR	10492867	Argument	& data_short		10492524	0					
ANR	10492868	UnaryOperationExpression	& data_short		10492524	0					
ANR	10492869	UnaryOperator	&		10492524	0					
ANR	10492870	Identifier	data_short		10492524	1					
ANR	10492871	Argument	sizeof ( short )		10492524	1					
ANR	10492872	SizeofExpression	sizeof ( short )		10492524	0					
ANR	10492873	Sizeof	sizeof		10492524	0					
ANR	10492874	SizeofOperand	short		10492524	1					
ANR	10492875	Argument	1		10492524	2					
ANR	10492876	PrimaryExpression	1		10492524	0					
ANR	10492877	Argument	fid		10492524	3					
ANR	10492878	Identifier	fid		10492524	0					
ANR	10492879	ExpressionStatement	buff_ptr ++	301:24:10769:10779	10492524	2	True				
ANR	10492880	PostIncDecOperationExpression	buff_ptr ++		10492524	0					
ANR	10492881	Identifier	buff_ptr		10492524	0					
ANR	10492882	IncDec	++		10492524	1					
ANR	10492883	ElseStatement	else		10492524	0					
ANR	10492884	CompoundStatement		58:15:2519:2519	10492524	0					
ANR	10492885	IfStatement	if ( params . targ_quant <= 256 )		10492524	0					
ANR	10492886	Condition	params . targ_quant <= 256	306:16:10891:10914	10492524	0	True				
ANR	10492887	RelationalExpression	params . targ_quant <= 256		10492524	0		<=			
ANR	10492888	MemberAccess	params . targ_quant		10492524	0					
ANR	10492889	Identifier	params		10492524	0					
ANR	10492890	Identifier	targ_quant		10492524	1					
ANR	10492891	PrimaryExpression	256		10492524	1					
ANR	10492892	CompoundStatement		59:42:2586:2586	10492524	1					
ANR	10492893	Statement	fprintf	308:16:10993:10999	10492524	0	True				
ANR	10492894	Statement	(	308:23:11000:11000	10492524	1	True				
ANR	10492895	Statement	fid	308:24:11001:11003	10492524	2	True				
ANR	10492896	Statement	","	308:27:11004:11004	10492524	3	True				
ANR	10492897	Statement	"""%%!PS\\n"""	308:29:11006:11014	10492524	4	True				
ANR	10492898	Statement	"""<< /HalftoneType 3\\n"""	309:24:11040:11061	10492524	5	True				
ANR	10492899	Statement	"""   /Width  %d\\n"""	310:24:11087:11103	10492524	6	True				
ANR	10492900	Statement	"""   /Height %d\\n"""	311:24:11129:11145	10492524	7	True				
ANR	10492901	Statement	"""   /Thresholds <\\n"""	312:24:11171:11190	10492524	8	True				
ANR	10492902	Statement	","	312:44:11191:11191	10492524	9	True				
ANR	10492903	Statement	width	313:24:11217:11221	10492524	10	True				
ANR	10492904	Statement	","	313:29:11222:11222	10492524	11	True				
ANR	10492905	Statement	height	313:31:11224:11229	10492524	12	True				
ANR	10492906	Statement	)	313:37:11230:11230	10492524	13	True				
ANR	10492907	ExpressionStatement		313:38:11231:11231	10492524	14	True				
ANR	10492908	ForStatement	for ( y = 0 ; y < height ; y ++ )		10492524	15					
ANR	10492909	ForInit	y = 0 ;	315:21:11255:11260	10492524	0	True				
ANR	10492910	AssignmentExpression	y = 0		10492524	0		=			
ANR	10492911	Identifier	y		10492524	0					
ANR	10492912	PrimaryExpression	0		10492524	1					
ANR	10492913	Condition	y < height	315:28:11262:11271	10492524	1	True				
ANR	10492914	RelationalExpression	y < height		10492524	0		<			
ANR	10492915	Identifier	y		10492524	0					
ANR	10492916	Identifier	height		10492524	1					
ANR	10492917	PostIncDecOperationExpression	y ++	315:40:11274:11276	10492524	2	True				
ANR	10492918	Identifier	y		10492524	0					
ANR	10492919	IncDec	++		10492524	1					
ANR	10492920	CompoundStatement		68:45:2948:2948	10492524	3					
ANR	10492921	ForStatement	for ( x = 0 ; x < width ; x ++ )		10492524	0					
ANR	10492922	ForInit	x = 0 ;	316:26:11307:11312	10492524	0	True				
ANR	10492923	AssignmentExpression	x = 0		10492524	0		=			
ANR	10492924	Identifier	x		10492524	0					
ANR	10492925	PrimaryExpression	0		10492524	1					
ANR	10492926	Condition	x < width	316:33:11314:11322	10492524	1	True				
ANR	10492927	RelationalExpression	x < width		10492524	0		<			
ANR	10492928	Identifier	x		10492524	0					
ANR	10492929	Identifier	width		10492524	1					
ANR	10492930	PostIncDecOperationExpression	x ++	316:44:11325:11327	10492524	2	True				
ANR	10492931	Identifier	x		10492524	0					
ANR	10492932	IncDec	++		10492524	1					
ANR	10492933	CompoundStatement		69:50:3000:3000	10492524	3					
ANR	10492934	ExpressionStatement	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )	317:24:11357:11407	10492524	0	True				
ANR	10492935	AssignmentExpression	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )		10492524	0		=			
ANR	10492936	Identifier	data_short		10492524	0					
ANR	10492937	CastExpression	( unsigned short ) ( * buff_ptr & 0xffff )		10492524	1					
ANR	10492938	CastTarget	unsigned short		10492524	0					
ANR	10492939	BitAndExpression	* buff_ptr & 0xffff		10492524	1		&			
ANR	10492940	UnaryOperationExpression	* buff_ptr		10492524	0					
ANR	10492941	UnaryOperator	*		10492524	0					
ANR	10492942	Identifier	buff_ptr		10492524	1					
ANR	10492943	PrimaryExpression	0xffff		10492524	1					
ANR	10492944	ExpressionStatement	data_short = ROUND ( ( double ) data_short * 255.0 / MAXVAL )	318:24:11433:11489	10492524	1	True				
ANR	10492945	AssignmentExpression	data_short = ROUND ( ( double ) data_short * 255.0 / MAXVAL )		10492524	0		=			
ANR	10492946	Identifier	data_short		10492524	0					
ANR	10492947	CallExpression	ROUND ( ( double ) data_short * 255.0 / MAXVAL )		10492524	1					
ANR	10492948	Callee	ROUND		10492524	0					
ANR	10492949	Identifier	ROUND		10492524	0					
ANR	10492950	ArgumentList	( double ) data_short * 255.0 / MAXVAL		10492524	1					
ANR	10492951	Argument	( double ) data_short * 255.0 / MAXVAL		10492524	0					
ANR	10492952	MultiplicativeExpression	( double ) data_short * 255.0 / MAXVAL		10492524	0		*			
ANR	10492953	CastExpression	( double ) data_short		10492524	0					
ANR	10492954	CastTarget	double		10492524	0					
ANR	10492955	Identifier	data_short		10492524	1					
ANR	10492956	MultiplicativeExpression	255.0 / MAXVAL		10492524	1		/			
ANR	10492957	PrimaryExpression	255.0		10492524	0					
ANR	10492958	Identifier	MAXVAL		10492524	1					
ANR	10492959	IfStatement	if ( data_short > 255 )		10492524	2					
ANR	10492960	Condition	data_short > 255	319:28:11519:11534	10492524	0	True				
ANR	10492961	RelationalExpression	data_short > 255		10492524	0		>			
ANR	10492962	Identifier	data_short		10492524	0					
ANR	10492963	PrimaryExpression	255		10492524	1					
ANR	10492964	ExpressionStatement	data_short = 255	319:46:11537:11553	10492524	1	True				
ANR	10492965	AssignmentExpression	data_short = 255		10492524	0		=			
ANR	10492966	Identifier	data_short		10492524	0					
ANR	10492967	PrimaryExpression	255		10492524	1					
ANR	10492968	ExpressionStatement	data = ( byte ) ( data_short & 0xff )	320:24:11579:11612	10492524	3	True				
ANR	10492969	AssignmentExpression	data = ( byte ) ( data_short & 0xff )		10492524	0		=			
ANR	10492970	Identifier	data		10492524	0					
ANR	10492971	CastExpression	( byte ) ( data_short & 0xff )		10492524	1					
ANR	10492972	CastTarget	byte		10492524	0					
ANR	10492973	BitAndExpression	data_short & 0xff		10492524	1		&			
ANR	10492974	Identifier	data_short		10492524	0					
ANR	10492975	PrimaryExpression	0xff		10492524	1					
ANR	10492976	ExpressionStatement	"fprintf ( fid , ""%02x"" , data )"	321:24:11638:11664	10492524	4	True				
ANR	10492977	CallExpression	"fprintf ( fid , ""%02x"" , data )"		10492524	0					
ANR	10492978	Callee	fprintf		10492524	0					
ANR	10492979	Identifier	fprintf		10492524	0					
ANR	10492980	ArgumentList	fid		10492524	1					
ANR	10492981	Argument	fid		10492524	0					
ANR	10492982	Identifier	fid		10492524	0					
ANR	10492983	Argument	"""%02x"""		10492524	1					
ANR	10492984	PrimaryExpression	"""%02x"""		10492524	0					
ANR	10492985	Argument	data		10492524	2					
ANR	10492986	Identifier	data		10492524	0					
ANR	10492987	ExpressionStatement	buff_ptr ++	322:24:11690:11700	10492524	5	True				
ANR	10492988	PostIncDecOperationExpression	buff_ptr ++		10492524	0					
ANR	10492989	Identifier	buff_ptr		10492524	0					
ANR	10492990	IncDec	++		10492524	1					
ANR	10492991	IfStatement	if ( ( x & 0x1f ) == 0x1f && ( x != ( width - 1 ) ) )		10492524	6					
ANR	10492992	Condition	( x & 0x1f ) == 0x1f && ( x != ( width - 1 ) )	323:28:11730:11769	10492524	0	True				
ANR	10492993	AndExpression	( x & 0x1f ) == 0x1f && ( x != ( width - 1 ) )		10492524	0		&&			
ANR	10492994	EqualityExpression	( x & 0x1f ) == 0x1f		10492524	0		==			
ANR	10492995	BitAndExpression	x & 0x1f		10492524	0		&			
ANR	10492996	Identifier	x		10492524	0					
ANR	10492997	PrimaryExpression	0x1f		10492524	1					
ANR	10492998	PrimaryExpression	0x1f		10492524	1					
ANR	10492999	EqualityExpression	x != ( width - 1 )		10492524	1		!=			
ANR	10493000	Identifier	x		10492524	0					
ANR	10493001	AdditiveExpression	width - 1		10492524	1		-			
ANR	10493002	Identifier	width		10492524	0					
ANR	10493003	PrimaryExpression	1		10492524	1					
ANR	10493004	ExpressionStatement	"fprintf ( fid , ""\\n"" )"	324:28:11800:11818	10492524	1	True				
ANR	10493005	CallExpression	"fprintf ( fid , ""\\n"" )"		10492524	0					
ANR	10493006	Callee	fprintf		10492524	0					
ANR	10493007	Identifier	fprintf		10492524	0					
ANR	10493008	ArgumentList	fid		10492524	1					
ANR	10493009	Argument	fid		10492524	0					
ANR	10493010	Identifier	fid		10492524	0					
ANR	10493011	Argument	"""\\n"""		10492524	1					
ANR	10493012	PrimaryExpression	"""\\n"""		10492524	0					
ANR	10493013	ExpressionStatement	"fprintf ( fid , ""\\n"" )"	326:20:11862:11880	10492524	1	True				
ANR	10493014	CallExpression	"fprintf ( fid , ""\\n"" )"		10492524	0					
ANR	10493015	Callee	fprintf		10492524	0					
ANR	10493016	Identifier	fprintf		10492524	0					
ANR	10493017	ArgumentList	fid		10492524	1					
ANR	10493018	Argument	fid		10492524	0					
ANR	10493019	Identifier	fid		10492524	0					
ANR	10493020	Argument	"""\\n"""		10492524	1					
ANR	10493021	PrimaryExpression	"""\\n"""		10492524	0					
ANR	10493022	Statement	fprintf	328:16:11916:11922	10492524	16	True				
ANR	10493023	Statement	(	328:23:11923:11923	10492524	17	True				
ANR	10493024	Statement	fid	328:24:11924:11926	10492524	18	True				
ANR	10493025	Statement	","	328:27:11927:11927	10492524	19	True				
ANR	10493026	Statement	"""   >\\n"""	328:29:11929:11936	10492524	20	True				
ANR	10493027	Statement	""">>\\n"""	329:24:11962:11967	10492524	21	True				
ANR	10493028	Statement	)	330:24:11993:11993	10492524	22	True				
ANR	10493029	ExpressionStatement		330:25:11994:11994	10492524	23	True				
ANR	10493030	ElseStatement	else		10492524	0					
ANR	10493031	CompoundStatement		84:19:3684:3684	10492524	0					
ANR	10493032	Statement	fprintf	333:16:12107:12113	10492524	0	True				
ANR	10493033	Statement	(	333:23:12114:12114	10492524	1	True				
ANR	10493034	Statement	fid	333:24:12115:12117	10492524	2	True				
ANR	10493035	Statement	","	333:27:12118:12118	10492524	3	True				
ANR	10493036	Statement	"""%%!PS\\n"""	333:29:12120:12128	10492524	4	True				
ANR	10493037	Statement	"""%% Create a 'filter' from local hex data\\n"""	334:24:12154:12197	10492524	5	True				
ANR	10493038	Statement	"""{ currentfile /ASCIIHexDecode filter /ReusableStreamDecode filter } exec\\n"""	335:24:12223:12298	10492524	6	True				
ANR	10493039	Statement	)	335:100:12299:12299	10492524	7	True				
ANR	10493040	ExpressionStatement		335:101:12300:12300	10492524	8	True				
ANR	10493041	ForStatement	for ( y = 0 ; y < height ; y ++ )		10492524	9					
ANR	10493042	ForInit	y = 0 ;	337:21:12399:12404	10492524	0	True				
ANR	10493043	AssignmentExpression	y = 0		10492524	0		=			
ANR	10493044	Identifier	y		10492524	0					
ANR	10493045	PrimaryExpression	0		10492524	1					
ANR	10493046	Condition	y < height	337:28:12406:12415	10492524	1	True				
ANR	10493047	RelationalExpression	y < height		10492524	0		<			
ANR	10493048	Identifier	y		10492524	0					
ANR	10493049	Identifier	height		10492524	1					
ANR	10493050	PostIncDecOperationExpression	y ++	337:40:12418:12420	10492524	2	True				
ANR	10493051	Identifier	y		10492524	0					
ANR	10493052	IncDec	++		10492524	1					
ANR	10493053	CompoundStatement		90:45:4092:4092	10492524	3					
ANR	10493054	ForStatement	for ( x = 0 ; x < width ; x ++ )		10492524	0					
ANR	10493055	ForInit	x = 0 ;	338:26:12451:12456	10492524	0	True				
ANR	10493056	AssignmentExpression	x = 0		10492524	0		=			
ANR	10493057	Identifier	x		10492524	0					
ANR	10493058	PrimaryExpression	0		10492524	1					
ANR	10493059	Condition	x < width	338:33:12458:12466	10492524	1	True				
ANR	10493060	RelationalExpression	x < width		10492524	0		<			
ANR	10493061	Identifier	x		10492524	0					
ANR	10493062	Identifier	width		10492524	1					
ANR	10493063	PostIncDecOperationExpression	x ++	338:44:12469:12471	10492524	2	True				
ANR	10493064	Identifier	x		10492524	0					
ANR	10493065	IncDec	++		10492524	1					
ANR	10493066	CompoundStatement		91:50:4144:4144	10492524	3					
ANR	10493067	ExpressionStatement	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )	339:24:12501:12551	10492524	0	True				
ANR	10493068	AssignmentExpression	data_short = ( unsigned short ) ( * buff_ptr & 0xffff )		10492524	0		=			
ANR	10493069	Identifier	data_short		10492524	0					
ANR	10493070	CastExpression	( unsigned short ) ( * buff_ptr & 0xffff )		10492524	1					
ANR	10493071	CastTarget	unsigned short		10492524	0					
ANR	10493072	BitAndExpression	* buff_ptr & 0xffff		10492524	1		&			
ANR	10493073	UnaryOperationExpression	* buff_ptr		10492524	0					
ANR	10493074	UnaryOperator	*		10492524	0					
ANR	10493075	Identifier	buff_ptr		10492524	1					
ANR	10493076	PrimaryExpression	0xffff		10492524	1					
ANR	10493077	ExpressionStatement	"fprintf ( fid , ""%04x"" , data_short )"	340:24:12577:12609	10492524	1	True				
ANR	10493078	CallExpression	"fprintf ( fid , ""%04x"" , data_short )"		10492524	0					
ANR	10493079	Callee	fprintf		10492524	0					
ANR	10493080	Identifier	fprintf		10492524	0					
ANR	10493081	ArgumentList	fid		10492524	1					
ANR	10493082	Argument	fid		10492524	0					
ANR	10493083	Identifier	fid		10492524	0					
ANR	10493084	Argument	"""%04x"""		10492524	1					
ANR	10493085	PrimaryExpression	"""%04x"""		10492524	0					
ANR	10493086	Argument	data_short		10492524	2					
ANR	10493087	Identifier	data_short		10492524	0					
ANR	10493088	ExpressionStatement	buff_ptr ++	341:24:12635:12645	10492524	2	True				
ANR	10493089	PostIncDecOperationExpression	buff_ptr ++		10492524	0					
ANR	10493090	Identifier	buff_ptr		10492524	0					
ANR	10493091	IncDec	++		10492524	1					
ANR	10493092	IfStatement	if ( ( x & 0xf ) == 0x1f && ( x != ( width - 1 ) ) )		10492524	3					
ANR	10493093	Condition	( x & 0xf ) == 0x1f && ( x != ( width - 1 ) )	342:28:12675:12713	10492524	0	True				
ANR	10493094	AndExpression	( x & 0xf ) == 0x1f && ( x != ( width - 1 ) )		10492524	0		&&			
ANR	10493095	EqualityExpression	( x & 0xf ) == 0x1f		10492524	0		==			
ANR	10493096	BitAndExpression	x & 0xf		10492524	0		&			
ANR	10493097	Identifier	x		10492524	0					
ANR	10493098	PrimaryExpression	0xf		10492524	1					
ANR	10493099	PrimaryExpression	0x1f		10492524	1					
ANR	10493100	EqualityExpression	x != ( width - 1 )		10492524	1		!=			
ANR	10493101	Identifier	x		10492524	0					
ANR	10493102	AdditiveExpression	width - 1		10492524	1		-			
ANR	10493103	Identifier	width		10492524	0					
ANR	10493104	PrimaryExpression	1		10492524	1					
ANR	10493105	ExpressionStatement	"fprintf ( fid , ""\\n"" )"	343:28:12744:12762	10492524	1	True				
ANR	10493106	CallExpression	"fprintf ( fid , ""\\n"" )"		10492524	0					
ANR	10493107	Callee	fprintf		10492524	0					
ANR	10493108	Identifier	fprintf		10492524	0					
ANR	10493109	ArgumentList	fid		10492524	1					
ANR	10493110	Argument	fid		10492524	0					
ANR	10493111	Identifier	fid		10492524	0					
ANR	10493112	Argument	"""\\n"""		10492524	1					
ANR	10493113	PrimaryExpression	"""\\n"""		10492524	0					
ANR	10493114	ExpressionStatement	"fprintf ( fid , ""\\n"" )"	345:20:12806:12824	10492524	1	True				
ANR	10493115	CallExpression	"fprintf ( fid , ""\\n"" )"		10492524	0					
ANR	10493116	Callee	fprintf		10492524	0					
ANR	10493117	Identifier	fprintf		10492524	0					
ANR	10493118	ArgumentList	fid		10492524	1					
ANR	10493119	Argument	fid		10492524	0					
ANR	10493120	Identifier	fid		10492524	0					
ANR	10493121	Argument	"""\\n"""		10492524	1					
ANR	10493122	PrimaryExpression	"""\\n"""		10492524	0					
ANR	10493123	ExpressionStatement	"fprintf ( fid , "">\\n"" )"	347:16:12881:12900	10492524	10	True				
ANR	10493124	CallExpression	"fprintf ( fid , "">\\n"" )"		10492524	0					
ANR	10493125	Callee	fprintf		10492524	0					
ANR	10493126	Identifier	fprintf		10492524	0					
ANR	10493127	ArgumentList	fid		10492524	1					
ANR	10493128	Argument	fid		10492524	0					
ANR	10493129	Identifier	fid		10492524	0					
ANR	10493130	Argument	""">\\n"""		10492524	1					
ANR	10493131	PrimaryExpression	""">\\n"""		10492524	0					
ANR	10493132	Statement	fprintf	348:16:12943:12949	10492524	11	True				
ANR	10493133	Statement	(	348:23:12950:12950	10492524	12	True				
ANR	10493134	Statement	fid	348:24:12951:12953	10492524	13	True				
ANR	10493135	Statement	","	348:27:12954:12954	10492524	14	True				
ANR	10493136	Statement	"""<< /Thresholds 2 index    %% file object for the 16-bit data\\n"""	349:24:12980:13043	10492524	15	True				
ANR	10493137	Statement	"""   /HalftoneType 16\\n"""	350:24:13069:13091	10492524	16	True				
ANR	10493138	Statement	"""   /Width  %d\\n"""	351:24:13117:13133	10492524	17	True				
ANR	10493139	Statement	"""   /Height %d\\n"""	352:24:13159:13175	10492524	18	True				
ANR	10493140	Statement	""">>\\n"""	353:24:13201:13206	10492524	19	True				
ANR	10493141	Statement	"""exch pop     %% discard ResuableStreamDecode file leaving the Halftone dict.\\n"""	354:24:13232:13311	10492524	20	True				
ANR	10493142	Statement	","	354:104:13312:13312	10492524	21	True				
ANR	10493143	Statement	width	355:24:13338:13342	10492524	22	True				
ANR	10493144	Statement	","	355:29:13343:13343	10492524	23	True				
ANR	10493145	Statement	height	355:31:13345:13350	10492524	24	True				
ANR	10493146	Statement	)	355:37:13351:13351	10492524	25	True				
ANR	10493147	ExpressionStatement		355:38:13352:13352	10492524	26	True				
ANR	10493148	ExpressionStatement	fclose ( fid )	358:8:13386:13397	10492524	29	True				
ANR	10493149	CallExpression	fclose ( fid )		10492524	0					
ANR	10493150	Callee	fclose		10492524	0					
ANR	10493151	Identifier	fclose		10492524	0					
ANR	10493152	ArgumentList	fid		10492524	1					
ANR	10493153	Argument	fid		10492524	0					
ANR	10493154	Identifier	fid		10492524	0					
ANR	10493155	ReturnStatement	return code ;	360:4:13409:13420	10492524	11	True				
ANR	10493156	Identifier	code		10492524	0					
ANR	10493157	ReturnType	static int		10492524	1					
ANR	10493158	Identifier	htsc_save_screen		10492524	2					
ANR	10493159	ParameterList	"htsc_dig_grid_t * final_mask , bool use_holladay_grid , int S , htsc_param_t params"		10492524	3					
ANR	10493160	Parameter	htsc_dig_grid_t * final_mask	246:17:8233:8259	10492524	0	True				
ANR	10493161	ParameterType	htsc_dig_grid_t *		10492524	0					
ANR	10493162	Identifier	final_mask		10492524	1					
ANR	10493163	Parameter	bool use_holladay_grid	246:46:8262:8283	10492524	1	True				
ANR	10493164	ParameterType	bool		10492524	0					
ANR	10493165	Identifier	use_holladay_grid		10492524	1					
ANR	10493166	Parameter	int S	246:70:8286:8290	10492524	2	True				
ANR	10493167	ParameterType	int		10492524	0					
ANR	10493168	Identifier	S		10492524	1					
ANR	10493169	Parameter	htsc_param_t params	247:16:8309:8327	10492524	3	True				
ANR	10493170	ParameterType	htsc_param_t		10492524	0					
ANR	10493171	Identifier	params		10492524	1					
ANR	10493172	CFGEntryNode	ENTRY		10492524		True				
ANR	10493173	CFGExitNode	EXIT		10492524		True				
ANR	10493174	Symbol	fid		10492524						
ANR	10493175	Symbol	code		10492524						
ANR	10493176	Symbol	data		10492524						
ANR	10493177	Symbol	buff_ptr		10492524						
ANR	10493178	Symbol	ROUND		10492524						
ANR	10493179	Symbol	OUTPUT_PS		10492524						
ANR	10493180	Symbol	full_file_name		10492524						
ANR	10493181	Symbol	use_holladay_grid		10492524						
ANR	10493182	Symbol	* final_mask		10492524						
ANR	10493183	Symbol	S		10492524						
ANR	10493184	Symbol	output_format		10492524						
ANR	10493185	Symbol	& data_short		10492524						
ANR	10493186	Symbol	OUTPUT_RAW		10492524						
ANR	10493187	Symbol	final_mask		10492524						
ANR	10493188	Symbol	height		10492524						
ANR	10493189	Symbol	OUTPUT_PPM		10492524						
ANR	10493190	Symbol	MAXVAL		10492524						
ANR	10493191	Symbol	fopen		10492524						
ANR	10493192	Symbol	final_mask -> data		10492524						
ANR	10493193	Symbol	final_mask -> width		10492524						
ANR	10493194	Symbol	data_short		10492524						
ANR	10493195	Symbol	OUTPUT_RAW16		10492524						
ANR	10493196	Symbol	htsc_save_tos		10492524						
ANR	10493197	Symbol	params . targ_quant		10492524						
ANR	10493198	Symbol	* buff_ptr		10492524						
ANR	10493199	Symbol	output_extension		10492524						
ANR	10493200	Symbol	OUTPUT_TOS		10492524						
ANR	10493201	Symbol	params		10492524						
ANR	10493202	Symbol	params . output_format		10492524						
ANR	10493203	Symbol	& data		10492524						
ANR	10493204	Symbol	FULL_FILE_NAME_LENGTH		10492524						
ANR	10493205	Symbol	x		10492524						
ANR	10493206	Symbol	width		10492524						
ANR	10493207	Symbol	y		10492524						
ANR	10493208	Symbol	final_mask -> height		10492524						
