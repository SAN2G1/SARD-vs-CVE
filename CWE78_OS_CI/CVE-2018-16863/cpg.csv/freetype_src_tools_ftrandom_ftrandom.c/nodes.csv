command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3669015	File	data/converged/CVE-2018-16863_ghostpdl/freetype_src_tools_ftrandom_ftrandom.c								
ANR	3669016	DeclStmt									
ANR	3669017	Decl							int	int	check_outlines
ANR	3669018	DeclStmt									
ANR	3669019	Decl							int	int	nohints
ANR	3669020	DeclStmt									
ANR	3669021	Decl							int	int	rasterize
ANR	3669022	DeclStmt									
ANR	3669023	Decl							char	char *	results_dir
ANR	3669024	DeclStmt									
ANR	3669025	Decl							char	char * [ ]	default_dir_list
ANR	3669026	DeclStmt									
ANR	3669027	Decl							char	char * [ ]	default_ext_list
ANR	3669028	DeclStmt									
ANR	3669029	Decl							unsigned int	unsigned int	error_count
ANR	3669030	DeclStmt									
ANR	3669031	Decl							double	double	error_fraction
ANR	3669032	DeclStmt									
ANR	3669033	Decl							FT_F26Dot6	FT_F26Dot6	font_size
ANR	3669034	ClassDef	fontlist	91:9:2612:2782							
ANR	3669035	DeclStmt									
ANR	3669036	Decl							char	char *	name
ANR	3669037	DeclStmt									
ANR	3669038	Decl							long	long	len
ANR	3669039	DeclStmt									
ANR	3669040	Decl							fontlist	fontlist *	fontlist
ANR	3669041	DeclStmt									
ANR	3669042	Decl							unsigned int	unsigned int	fcnt
ANR	3669043	Function	FT_MoveTo	104:2:2818:2967							
ANR	3669044	FunctionDef	"FT_MoveTo (const FT_Vector * to , void * user)"		3669043	0					
ANR	3669045	CompoundStatement		107:2:2904:2967	3669043	0					
ANR	3669046	ExpressionStatement	FT_UNUSED ( to )	108:4:2910:2925	3669043	0	True				
ANR	3669047	CallExpression	FT_UNUSED ( to )		3669043	0					
ANR	3669048	Callee	FT_UNUSED		3669043	0					
ANR	3669049	Identifier	FT_UNUSED		3669043	0					
ANR	3669050	ArgumentList	to		3669043	1					
ANR	3669051	Argument	to		3669043	0					
ANR	3669052	Identifier	to		3669043	0					
ANR	3669053	ExpressionStatement	FT_UNUSED ( user )	109:4:2931:2948	3669043	1	True				
ANR	3669054	CallExpression	FT_UNUSED ( user )		3669043	0					
ANR	3669055	Callee	FT_UNUSED		3669043	0					
ANR	3669056	Identifier	FT_UNUSED		3669043	0					
ANR	3669057	ArgumentList	user		3669043	1					
ANR	3669058	Argument	user		3669043	0					
ANR	3669059	Identifier	user		3669043	0					
ANR	3669060	ReturnStatement	return 0 ;	111:4:2955:2963	3669043	2	True				
ANR	3669061	PrimaryExpression	0		3669043	0					
ANR	3669062	ReturnType	static int		3669043	1					
ANR	3669063	Identifier	FT_MoveTo		3669043	2					
ANR	3669064	ParameterList	"const FT_Vector * to , void * user"		3669043	3					
ANR	3669065	Parameter	const FT_Vector * to	105:13:2842:2861	3669043	0	True				
ANR	3669066	ParameterType	const FT_Vector *		3669043	0					
ANR	3669067	Identifier	to		3669043	1					
ANR	3669068	Parameter	void * user	106:13:2877:2898	3669043	1	True				
ANR	3669069	ParameterType	void *		3669043	0					
ANR	3669070	Identifier	user		3669043	1					
ANR	3669071	CFGEntryNode	ENTRY		3669043		True				
ANR	3669072	CFGExitNode	EXIT		3669043		True				
ANR	3669073	Symbol	to		3669043						
ANR	3669074	Symbol	user		3669043						
ANR	3669075	Function	FT_LineTo	115:2:2973:3122							
ANR	3669076	FunctionDef	"FT_LineTo (const FT_Vector * to , void * user)"		3669075	0					
ANR	3669077	CompoundStatement		118:2:3059:3122	3669075	0					
ANR	3669078	ExpressionStatement	FT_UNUSED ( to )	119:4:3065:3080	3669075	0	True				
ANR	3669079	CallExpression	FT_UNUSED ( to )		3669075	0					
ANR	3669080	Callee	FT_UNUSED		3669075	0					
ANR	3669081	Identifier	FT_UNUSED		3669075	0					
ANR	3669082	ArgumentList	to		3669075	1					
ANR	3669083	Argument	to		3669075	0					
ANR	3669084	Identifier	to		3669075	0					
ANR	3669085	ExpressionStatement	FT_UNUSED ( user )	120:4:3086:3103	3669075	1	True				
ANR	3669086	CallExpression	FT_UNUSED ( user )		3669075	0					
ANR	3669087	Callee	FT_UNUSED		3669075	0					
ANR	3669088	Identifier	FT_UNUSED		3669075	0					
ANR	3669089	ArgumentList	user		3669075	1					
ANR	3669090	Argument	user		3669075	0					
ANR	3669091	Identifier	user		3669075	0					
ANR	3669092	ReturnStatement	return 0 ;	122:4:3110:3118	3669075	2	True				
ANR	3669093	PrimaryExpression	0		3669075	0					
ANR	3669094	ReturnType	static int		3669075	1					
ANR	3669095	Identifier	FT_LineTo		3669075	2					
ANR	3669096	ParameterList	"const FT_Vector * to , void * user"		3669075	3					
ANR	3669097	Parameter	const FT_Vector * to	116:13:2997:3016	3669075	0	True				
ANR	3669098	ParameterType	const FT_Vector *		3669075	0					
ANR	3669099	Identifier	to		3669075	1					
ANR	3669100	Parameter	void * user	117:13:3032:3053	3669075	1	True				
ANR	3669101	ParameterType	void *		3669075	0					
ANR	3669102	Identifier	user		3669075	1					
ANR	3669103	CFGEntryNode	ENTRY		3669075		True				
ANR	3669104	CFGExitNode	EXIT		3669075		True				
ANR	3669105	Symbol	to		3669075						
ANR	3669106	Symbol	user		3669075						
ANR	3669107	Function	FT_ConicTo	126:2:3128:3338							
ANR	3669108	FunctionDef	"FT_ConicTo (const FT_Vector * _cp , const FT_Vector * to , void * user)"		3669107	0					
ANR	3669109	CompoundStatement		130:2:3253:3338	3669107	0					
ANR	3669110	ExpressionStatement	FT_UNUSED ( _cp )	131:4:3259:3275	3669107	0	True				
ANR	3669111	CallExpression	FT_UNUSED ( _cp )		3669107	0					
ANR	3669112	Callee	FT_UNUSED		3669107	0					
ANR	3669113	Identifier	FT_UNUSED		3669107	0					
ANR	3669114	ArgumentList	_cp		3669107	1					
ANR	3669115	Argument	_cp		3669107	0					
ANR	3669116	Identifier	_cp		3669107	0					
ANR	3669117	ExpressionStatement	FT_UNUSED ( to )	132:4:3281:3296	3669107	1	True				
ANR	3669118	CallExpression	FT_UNUSED ( to )		3669107	0					
ANR	3669119	Callee	FT_UNUSED		3669107	0					
ANR	3669120	Identifier	FT_UNUSED		3669107	0					
ANR	3669121	ArgumentList	to		3669107	1					
ANR	3669122	Argument	to		3669107	0					
ANR	3669123	Identifier	to		3669107	0					
ANR	3669124	ExpressionStatement	FT_UNUSED ( user )	133:4:3302:3319	3669107	2	True				
ANR	3669125	CallExpression	FT_UNUSED ( user )		3669107	0					
ANR	3669126	Callee	FT_UNUSED		3669107	0					
ANR	3669127	Identifier	FT_UNUSED		3669107	0					
ANR	3669128	ArgumentList	user		3669107	1					
ANR	3669129	Argument	user		3669107	0					
ANR	3669130	Identifier	user		3669107	0					
ANR	3669131	ReturnStatement	return 0 ;	135:4:3326:3334	3669107	3	True				
ANR	3669132	PrimaryExpression	0		3669107	0					
ANR	3669133	ReturnType	static int		3669107	1					
ANR	3669134	Identifier	FT_ConicTo		3669107	2					
ANR	3669135	ParameterList	"const FT_Vector * _cp , const FT_Vector * to , void * user"		3669107	3					
ANR	3669136	Parameter	const FT_Vector * _cp	127:14:3153:3173	3669107	0	True				
ANR	3669137	ParameterType	const FT_Vector *		3669107	0					
ANR	3669138	Identifier	_cp		3669107	1					
ANR	3669139	Parameter	const FT_Vector * to	128:14:3190:3209	3669107	1	True				
ANR	3669140	ParameterType	const FT_Vector *		3669107	0					
ANR	3669141	Identifier	to		3669107	1					
ANR	3669142	Parameter	void * user	129:14:3226:3247	3669107	2	True				
ANR	3669143	ParameterType	void *		3669107	0					
ANR	3669144	Identifier	user		3669107	1					
ANR	3669145	CFGEntryNode	ENTRY		3669107		True				
ANR	3669146	CFGExitNode	EXIT		3669107		True				
ANR	3669147	Symbol	to		3669107						
ANR	3669148	Symbol	_cp		3669107						
ANR	3669149	Symbol	user		3669107						
ANR	3669150	Function	FT_CubicTo	139:2:3344:3613							
ANR	3669151	FunctionDef	"FT_CubicTo (const FT_Vector * cp1 , const FT_Vector * cp2 , const FT_Vector * to , void * user)"		3669150	0					
ANR	3669152	CompoundStatement		144:2:3506:3613	3669150	0					
ANR	3669153	ExpressionStatement	FT_UNUSED ( cp1 )	145:4:3512:3528	3669150	0	True				
ANR	3669154	CallExpression	FT_UNUSED ( cp1 )		3669150	0					
ANR	3669155	Callee	FT_UNUSED		3669150	0					
ANR	3669156	Identifier	FT_UNUSED		3669150	0					
ANR	3669157	ArgumentList	cp1		3669150	1					
ANR	3669158	Argument	cp1		3669150	0					
ANR	3669159	Identifier	cp1		3669150	0					
ANR	3669160	ExpressionStatement	FT_UNUSED ( cp2 )	146:4:3534:3550	3669150	1	True				
ANR	3669161	CallExpression	FT_UNUSED ( cp2 )		3669150	0					
ANR	3669162	Callee	FT_UNUSED		3669150	0					
ANR	3669163	Identifier	FT_UNUSED		3669150	0					
ANR	3669164	ArgumentList	cp2		3669150	1					
ANR	3669165	Argument	cp2		3669150	0					
ANR	3669166	Identifier	cp2		3669150	0					
ANR	3669167	ExpressionStatement	FT_UNUSED ( to )	147:4:3556:3571	3669150	2	True				
ANR	3669168	CallExpression	FT_UNUSED ( to )		3669150	0					
ANR	3669169	Callee	FT_UNUSED		3669150	0					
ANR	3669170	Identifier	FT_UNUSED		3669150	0					
ANR	3669171	ArgumentList	to		3669150	1					
ANR	3669172	Argument	to		3669150	0					
ANR	3669173	Identifier	to		3669150	0					
ANR	3669174	ExpressionStatement	FT_UNUSED ( user )	148:4:3577:3594	3669150	3	True				
ANR	3669175	CallExpression	FT_UNUSED ( user )		3669150	0					
ANR	3669176	Callee	FT_UNUSED		3669150	0					
ANR	3669177	Identifier	FT_UNUSED		3669150	0					
ANR	3669178	ArgumentList	user		3669150	1					
ANR	3669179	Argument	user		3669150	0					
ANR	3669180	Identifier	user		3669150	0					
ANR	3669181	ReturnStatement	return 0 ;	150:4:3601:3609	3669150	4	True				
ANR	3669182	PrimaryExpression	0		3669150	0					
ANR	3669183	ReturnType	static int		3669150	1					
ANR	3669184	Identifier	FT_CubicTo		3669150	2					
ANR	3669185	ParameterList	"const FT_Vector * cp1 , const FT_Vector * cp2 , const FT_Vector * to , void * user"		3669150	3					
ANR	3669186	Parameter	const FT_Vector * cp1	140:14:3369:3389	3669150	0	True				
ANR	3669187	ParameterType	const FT_Vector *		3669150	0					
ANR	3669188	Identifier	cp1		3669150	1					
ANR	3669189	Parameter	const FT_Vector * cp2	141:14:3406:3426	3669150	1	True				
ANR	3669190	ParameterType	const FT_Vector *		3669150	0					
ANR	3669191	Identifier	cp2		3669150	1					
ANR	3669192	Parameter	const FT_Vector * to	142:14:3443:3462	3669150	2	True				
ANR	3669193	ParameterType	const FT_Vector *		3669150	0					
ANR	3669194	Identifier	to		3669150	1					
ANR	3669195	Parameter	void * user	143:14:3479:3500	3669150	3	True				
ANR	3669196	ParameterType	void *		3669150	0					
ANR	3669197	Identifier	user		3669150	1					
ANR	3669198	CFGEntryNode	ENTRY		3669150		True				
ANR	3669199	CFGExitNode	EXIT		3669150		True				
ANR	3669200	Symbol	cp2		3669150						
ANR	3669201	Symbol	cp1		3669150						
ANR	3669202	Symbol	to		3669150						
ANR	3669203	Symbol	user		3669150						
ANR	3669204	DeclStmt									
ANR	3669205	Decl							FT_Outline_Funcs	FT_Outline_Funcs	outlinefuncs
ANR	3669206	Function	TestFace	164:2:3776:4574							
ANR	3669207	FunctionDef	TestFace (FT_Face face)		3669206	0					
ANR	3669208	CompoundStatement		166:2:3818:4574	3669206	0					
ANR	3669209	IdentifierDeclStatement	unsigned int gid ;	167:4:3824:3841	3669206	0	True				
ANR	3669210	IdentifierDecl	gid		3669206	0					
ANR	3669211	IdentifierDeclType	unsigned int		3669206	0					
ANR	3669212	Identifier	gid		3669206	1					
ANR	3669213	IdentifierDeclStatement	int load_flags = FT_LOAD_DEFAULT ;	168:4:3847:3889	3669206	1	True				
ANR	3669214	IdentifierDecl	load_flags = FT_LOAD_DEFAULT		3669206	0					
ANR	3669215	IdentifierDeclType	int		3669206	0					
ANR	3669216	Identifier	load_flags		3669206	1					
ANR	3669217	AssignmentExpression	load_flags = FT_LOAD_DEFAULT		3669206	2		=			
ANR	3669218	Identifier	FT_LOAD_DEFAULT		3669206	0					
ANR	3669219	Identifier	FT_LOAD_DEFAULT		3669206	1					
ANR	3669220	IfStatement	if ( check_outlines && FT_IS_SCALABLE ( face ) )		3669206	2					
ANR	3669221	Condition	check_outlines && FT_IS_SCALABLE ( face )	171:9:3902:3958	3669206	0	True				
ANR	3669222	AndExpression	check_outlines && FT_IS_SCALABLE ( face )		3669206	0		&&			
ANR	3669223	Identifier	check_outlines		3669206	0					
ANR	3669224	CallExpression	FT_IS_SCALABLE ( face )		3669206	1					
ANR	3669225	Callee	FT_IS_SCALABLE		3669206	0					
ANR	3669226	Identifier	FT_IS_SCALABLE		3669206	0					
ANR	3669227	ArgumentList	face		3669206	1					
ANR	3669228	Argument	face		3669206	0					
ANR	3669229	Identifier	face		3669206	0					
ANR	3669230	ExpressionStatement	load_flags = FT_LOAD_NO_BITMAP	173:6:3968:3998	3669206	1	True				
ANR	3669231	AssignmentExpression	load_flags = FT_LOAD_NO_BITMAP		3669206	0		=			
ANR	3669232	Identifier	load_flags		3669206	0					
ANR	3669233	Identifier	FT_LOAD_NO_BITMAP		3669206	1					
ANR	3669234	IfStatement	if ( nohints )		3669206	3					
ANR	3669235	Condition	nohints	175:9:4010:4016	3669206	0	True				
ANR	3669236	Identifier	nohints		3669206	0					
ANR	3669237	ExpressionStatement	load_flags |= FT_LOAD_NO_HINTING	176:6:4026:4058	3669206	1	True				
ANR	3669238	AssignmentExpression	load_flags |= FT_LOAD_NO_HINTING		3669206	0		|=			
ANR	3669239	Identifier	load_flags		3669206	0					
ANR	3669240	Identifier	FT_LOAD_NO_HINTING		3669206	1					
ANR	3669241	ExpressionStatement	"FT_Set_Char_Size ( face , 0 , font_size , 72 , 72 )"	178:4:4065:4111	3669206	4	True				
ANR	3669242	CallExpression	"FT_Set_Char_Size ( face , 0 , font_size , 72 , 72 )"		3669206	0					
ANR	3669243	Callee	FT_Set_Char_Size		3669206	0					
ANR	3669244	Identifier	FT_Set_Char_Size		3669206	0					
ANR	3669245	ArgumentList	face		3669206	1					
ANR	3669246	Argument	face		3669206	0					
ANR	3669247	Identifier	face		3669206	0					
ANR	3669248	Argument	0		3669206	1					
ANR	3669249	PrimaryExpression	0		3669206	0					
ANR	3669250	Argument	font_size		3669206	2					
ANR	3669251	Identifier	font_size		3669206	0					
ANR	3669252	Argument	72		3669206	3					
ANR	3669253	PrimaryExpression	72		3669206	0					
ANR	3669254	Argument	72		3669206	4					
ANR	3669255	PrimaryExpression	72		3669206	0					
ANR	3669256	ForStatement	for ( gid = 0 ; gid < face -> num_glyphs ; gid ++ )		3669206	5					
ANR	3669257	ForInit	gid = 0 ;	180:10:4124:4131	3669206	0	True				
ANR	3669258	AssignmentExpression	gid = 0		3669206	0		=			
ANR	3669259	Identifier	gid		3669206	0					
ANR	3669260	PrimaryExpression	0		3669206	1					
ANR	3669261	Condition	gid < face -> num_glyphs	180:19:4133:4154	3669206	1	True				
ANR	3669262	RelationalExpression	gid < face -> num_glyphs		3669206	0		<			
ANR	3669263	Identifier	gid		3669206	0					
ANR	3669264	PtrMemberAccess	face -> num_glyphs		3669206	1					
ANR	3669265	Identifier	face		3669206	0					
ANR	3669266	Identifier	num_glyphs		3669206	1					
ANR	3669267	PostIncDecOperationExpression	gid ++	180:43:4157:4161	3669206	2	True				
ANR	3669268	Identifier	gid		3669206	0					
ANR	3669269	IncDec	++		3669206	1					
ANR	3669270	CompoundStatement		16:4:350:350	3669206	3					
ANR	3669271	IfStatement	if ( check_outlines && FT_IS_SCALABLE ( face ) )		3669206	0					
ANR	3669272	Condition	check_outlines && FT_IS_SCALABLE ( face )	182:11:4182:4240	3669206	0	True				
ANR	3669273	AndExpression	check_outlines && FT_IS_SCALABLE ( face )		3669206	0		&&			
ANR	3669274	Identifier	check_outlines		3669206	0					
ANR	3669275	CallExpression	FT_IS_SCALABLE ( face )		3669206	1					
ANR	3669276	Callee	FT_IS_SCALABLE		3669206	0					
ANR	3669277	Identifier	FT_IS_SCALABLE		3669206	0					
ANR	3669278	ArgumentList	face		3669206	1					
ANR	3669279	Argument	face		3669206	0					
ANR	3669280	Identifier	face		3669206	0					
ANR	3669281	CompoundStatement		19:6:431:431	3669206	1					
ANR	3669282	IfStatement	"if ( ! FT_Load_Glyph ( face , gid , load_flags ) )"		3669206	0					
ANR	3669283	Condition	"! FT_Load_Glyph ( face , gid , load_flags )"	185:13:4265:4303	3669206	0	True				
ANR	3669284	UnaryOperationExpression	"! FT_Load_Glyph ( face , gid , load_flags )"		3669206	0					
ANR	3669285	UnaryOperator	!		3669206	0					
ANR	3669286	CallExpression	"FT_Load_Glyph ( face , gid , load_flags )"		3669206	1					
ANR	3669287	Callee	FT_Load_Glyph		3669206	0					
ANR	3669288	Identifier	FT_Load_Glyph		3669206	0					
ANR	3669289	ArgumentList	face		3669206	1					
ANR	3669290	Argument	face		3669206	0					
ANR	3669291	Identifier	face		3669206	0					
ANR	3669292	Argument	gid		3669206	1					
ANR	3669293	Identifier	gid		3669206	0					
ANR	3669294	Argument	load_flags		3669206	2					
ANR	3669295	Identifier	load_flags		3669206	0					
ANR	3669296	ExpressionStatement	"FT_Outline_Decompose ( & face -> glyph -> outline , & outlinefuncs , NULL )"	186:10:4317:4383	3669206	1	True				
ANR	3669297	CallExpression	"FT_Outline_Decompose ( & face -> glyph -> outline , & outlinefuncs , NULL )"		3669206	0					
ANR	3669298	Callee	FT_Outline_Decompose		3669206	0					
ANR	3669299	Identifier	FT_Outline_Decompose		3669206	0					
ANR	3669300	ArgumentList	& face -> glyph -> outline		3669206	1					
ANR	3669301	Argument	& face -> glyph -> outline		3669206	0					
ANR	3669302	UnaryOperationExpression	& face -> glyph -> outline		3669206	0					
ANR	3669303	UnaryOperator	&		3669206	0					
ANR	3669304	PtrMemberAccess	face -> glyph -> outline		3669206	1					
ANR	3669305	PtrMemberAccess	face -> glyph		3669206	0					
ANR	3669306	Identifier	face		3669206	0					
ANR	3669307	Identifier	glyph		3669206	1					
ANR	3669308	Identifier	outline		3669206	1					
ANR	3669309	Argument	& outlinefuncs		3669206	1					
ANR	3669310	UnaryOperationExpression	& outlinefuncs		3669206	0					
ANR	3669311	UnaryOperator	&		3669206	0					
ANR	3669312	Identifier	outlinefuncs		3669206	1					
ANR	3669313	Argument	NULL		3669206	2					
ANR	3669314	Identifier	NULL		3669206	0					
ANR	3669315	ElseStatement	else		3669206	0					
ANR	3669316	ExpressionStatement	"FT_Load_Glyph ( face , gid , load_flags )"	189:8:4412:4450	3669206	0	True				
ANR	3669317	CallExpression	"FT_Load_Glyph ( face , gid , load_flags )"		3669206	0					
ANR	3669318	Callee	FT_Load_Glyph		3669206	0					
ANR	3669319	Identifier	FT_Load_Glyph		3669206	0					
ANR	3669320	ArgumentList	face		3669206	1					
ANR	3669321	Argument	face		3669206	0					
ANR	3669322	Identifier	face		3669206	0					
ANR	3669323	Argument	gid		3669206	1					
ANR	3669324	Identifier	gid		3669206	0					
ANR	3669325	Argument	load_flags		3669206	2					
ANR	3669326	Identifier	load_flags		3669206	0					
ANR	3669327	IfStatement	if ( rasterize )		3669206	1					
ANR	3669328	Condition	rasterize	191:11:4464:4472	3669206	0	True				
ANR	3669329	Identifier	rasterize		3669206	0					
ANR	3669330	ExpressionStatement	"FT_Render_Glyph ( face -> glyph , ft_render_mode_normal )"	192:8:4484:4537	3669206	1	True				
ANR	3669331	CallExpression	"FT_Render_Glyph ( face -> glyph , ft_render_mode_normal )"		3669206	0					
ANR	3669332	Callee	FT_Render_Glyph		3669206	0					
ANR	3669333	Identifier	FT_Render_Glyph		3669206	0					
ANR	3669334	ArgumentList	face -> glyph		3669206	1					
ANR	3669335	Argument	face -> glyph		3669206	0					
ANR	3669336	PtrMemberAccess	face -> glyph		3669206	0					
ANR	3669337	Identifier	face		3669206	0					
ANR	3669338	Identifier	glyph		3669206	1					
ANR	3669339	Argument	ft_render_mode_normal		3669206	1					
ANR	3669340	Identifier	ft_render_mode_normal		3669206	0					
ANR	3669341	ExpressionStatement	FT_Done_Face ( face )	195:4:4550:4570	3669206	6	True				
ANR	3669342	CallExpression	FT_Done_Face ( face )		3669206	0					
ANR	3669343	Callee	FT_Done_Face		3669206	0					
ANR	3669344	Identifier	FT_Done_Face		3669206	0					
ANR	3669345	ArgumentList	face		3669206	1					
ANR	3669346	Argument	face		3669206	0					
ANR	3669347	Identifier	face		3669206	0					
ANR	3669348	ReturnType	static void		3669206	1					
ANR	3669349	Identifier	TestFace		3669206	2					
ANR	3669350	ParameterList	FT_Face face		3669206	3					
ANR	3669351	Parameter	FT_Face face	165:12:3800:3812	3669206	0	True				
ANR	3669352	ParameterType	FT_Face		3669206	0					
ANR	3669353	Identifier	face		3669206	1					
ANR	3669354	CFGEntryNode	ENTRY		3669206		True				
ANR	3669355	CFGExitNode	EXIT		3669206		True				
ANR	3669356	Symbol	gid		3669206						
ANR	3669357	Symbol	NULL		3669206						
ANR	3669358	Symbol	check_outlines		3669206						
ANR	3669359	Symbol	font_size		3669206						
ANR	3669360	Symbol	nohints		3669206						
ANR	3669361	Symbol	face -> num_glyphs		3669206						
ANR	3669362	Symbol	FT_Load_Glyph		3669206						
ANR	3669363	Symbol	* face		3669206						
ANR	3669364	Symbol	face -> glyph		3669206						
ANR	3669365	Symbol	ft_render_mode_normal		3669206						
ANR	3669366	Symbol	FT_LOAD_DEFAULT		3669206						
ANR	3669367	Symbol	FT_IS_SCALABLE		3669206						
ANR	3669368	Symbol	face		3669206						
ANR	3669369	Symbol	& outlinefuncs		3669206						
ANR	3669370	Symbol	& face -> glyph -> outline		3669206						
ANR	3669371	Symbol	FT_LOAD_NO_BITMAP		3669206						
ANR	3669372	Symbol	FT_LOAD_NO_HINTING		3669206						
ANR	3669373	Symbol	rasterize		3669206						
ANR	3669374	Symbol	load_flags		3669206						
ANR	3669375	Function	ExecuteTest	199:2:4580:5298							
ANR	3669376	FunctionDef	ExecuteTest (char * testfont)		3669375	0					
ANR	3669377	CompoundStatement		201:2:4627:5298	3669375	0					
ANR	3669378	IdentifierDeclStatement	FT_Library context ;	202:4:4633:4652	3669375	0	True				
ANR	3669379	IdentifierDecl	context		3669375	0					
ANR	3669380	IdentifierDeclType	FT_Library		3669375	0					
ANR	3669381	Identifier	context		3669375	1					
ANR	3669382	IdentifierDeclStatement	FT_Face face ;	203:4:4658:4674	3669375	1	True				
ANR	3669383	IdentifierDecl	face		3669375	0					
ANR	3669384	IdentifierDeclType	FT_Face		3669375	0					
ANR	3669385	Identifier	face		3669375	1					
ANR	3669386	IfStatement	if ( FT_Init_FreeType ( & context ) )		3669375	2					
ANR	3669387	Condition	FT_Init_FreeType ( & context )	206:9:4687:4714	3669375	0	True				
ANR	3669388	CallExpression	FT_Init_FreeType ( & context )		3669375	0					
ANR	3669389	Callee	FT_Init_FreeType		3669375	0					
ANR	3669390	Identifier	FT_Init_FreeType		3669375	0					
ANR	3669391	ArgumentList	& context		3669375	1					
ANR	3669392	Argument	& context		3669375	0					
ANR	3669393	UnaryOperationExpression	& context		3669375	0					
ANR	3669394	UnaryOperator	&		3669375	0					
ANR	3669395	Identifier	context		3669375	1					
ANR	3669396	CompoundStatement		7:4:94:94	3669375	1					
ANR	3669397	ExpressionStatement	"fprintf ( stderr , ""Can't initialize FreeType.\\n"" )"	208:6:4730:4779	3669375	0	True				
ANR	3669398	CallExpression	"fprintf ( stderr , ""Can't initialize FreeType.\\n"" )"		3669375	0					
ANR	3669399	Callee	fprintf		3669375	0					
ANR	3669400	Identifier	fprintf		3669375	0					
ANR	3669401	ArgumentList	stderr		3669375	1					
ANR	3669402	Argument	stderr		3669375	0					
ANR	3669403	Identifier	stderr		3669375	0					
ANR	3669404	Argument	"""Can't initialize FreeType.\\n"""		3669375	1					
ANR	3669405	PrimaryExpression	"""Can't initialize FreeType.\\n"""		3669375	0					
ANR	3669406	ExpressionStatement	exit ( 1 )	209:6:4787:4796	3669375	1	True				
ANR	3669407	CallExpression	exit ( 1 )		3669375	0					
ANR	3669408	Callee	exit		3669375	0					
ANR	3669409	Identifier	exit		3669375	0					
ANR	3669410	ArgumentList	1		3669375	1					
ANR	3669411	Argument	1		3669375	0					
ANR	3669412	PrimaryExpression	1		3669375	0					
ANR	3669413	IfStatement	"if ( FT_New_Face ( context , testfont , 0 , & face ) )"		3669375	3					
ANR	3669414	Condition	"FT_New_Face ( context , testfont , 0 , & face )"	212:9:4814:4855	3669375	0	True				
ANR	3669415	CallExpression	"FT_New_Face ( context , testfont , 0 , & face )"		3669375	0					
ANR	3669416	Callee	FT_New_Face		3669375	0					
ANR	3669417	Identifier	FT_New_Face		3669375	0					
ANR	3669418	ArgumentList	context		3669375	1					
ANR	3669419	Argument	context		3669375	0					
ANR	3669420	Identifier	context		3669375	0					
ANR	3669421	Argument	testfont		3669375	1					
ANR	3669422	Identifier	testfont		3669375	0					
ANR	3669423	Argument	0		3669375	2					
ANR	3669424	PrimaryExpression	0		3669375	0					
ANR	3669425	Argument	& face		3669375	3					
ANR	3669426	UnaryOperationExpression	& face		3669375	0					
ANR	3669427	UnaryOperator	&		3669375	0					
ANR	3669428	Identifier	face		3669375	1					
ANR	3669429	CompoundStatement		13:4:235:235	3669375	1					
ANR	3669430	ExpressionStatement	exit ( 0 )	215:6:4934:4943	3669375	0	True				
ANR	3669431	CallExpression	exit ( 0 )		3669375	0					
ANR	3669432	Callee	exit		3669375	0					
ANR	3669433	Identifier	exit		3669375	0					
ANR	3669434	ArgumentList	0		3669375	1					
ANR	3669435	Argument	0		3669375	0					
ANR	3669436	PrimaryExpression	0		3669375	0					
ANR	3669437	IfStatement	if ( face -> num_faces == 1 )		3669375	4					
ANR	3669438	Condition	face -> num_faces == 1	218:9:4961:4980	3669375	0	True				
ANR	3669439	EqualityExpression	face -> num_faces == 1		3669375	0		==			
ANR	3669440	PtrMemberAccess	face -> num_faces		3669375	0					
ANR	3669441	Identifier	face		3669375	0					
ANR	3669442	Identifier	num_faces		3669375	1					
ANR	3669443	PrimaryExpression	1		3669375	1					
ANR	3669444	ExpressionStatement	TestFace ( face )	219:6:4990:5006	3669375	1	True				
ANR	3669445	CallExpression	TestFace ( face )		3669375	0					
ANR	3669446	Callee	TestFace		3669375	0					
ANR	3669447	Identifier	TestFace		3669375	0					
ANR	3669448	ArgumentList	face		3669375	1					
ANR	3669449	Argument	face		3669375	0					
ANR	3669450	Identifier	face		3669375	0					
ANR	3669451	ElseStatement	else		3669375	0					
ANR	3669452	CompoundStatement		22:6:401:413	3669375	0					
ANR	3669453	IdentifierDeclStatement	"long i , num ;"	222:6:5029:5041	3669375	0	True				
ANR	3669454	IdentifierDecl	i		3669375	0					
ANR	3669455	IdentifierDeclType	long		3669375	0					
ANR	3669456	Identifier	i		3669375	1					
ANR	3669457	IdentifierDecl	num		3669375	1					
ANR	3669458	IdentifierDeclType	long		3669375	0					
ANR	3669459	Identifier	num		3669375	1					
ANR	3669460	ExpressionStatement	num = face -> num_faces	225:6:5051:5072	3669375	1	True				
ANR	3669461	AssignmentExpression	num = face -> num_faces		3669375	0		=			
ANR	3669462	Identifier	num		3669375	0					
ANR	3669463	PtrMemberAccess	face -> num_faces		3669375	1					
ANR	3669464	Identifier	face		3669375	0					
ANR	3669465	Identifier	num_faces		3669375	1					
ANR	3669466	ExpressionStatement	FT_Done_Face ( face )	226:6:5080:5100	3669375	2	True				
ANR	3669467	CallExpression	FT_Done_Face ( face )		3669375	0					
ANR	3669468	Callee	FT_Done_Face		3669375	0					
ANR	3669469	Identifier	FT_Done_Face		3669375	0					
ANR	3669470	ArgumentList	face		3669375	1					
ANR	3669471	Argument	face		3669375	0					
ANR	3669472	Identifier	face		3669375	0					
ANR	3669473	ForStatement	for ( i = 0 ; i < num ; i ++ )		3669375	3					
ANR	3669474	ForInit	i = 0 ;	228:12:5115:5120	3669375	0	True				
ANR	3669475	AssignmentExpression	i = 0		3669375	0		=			
ANR	3669476	Identifier	i		3669375	0					
ANR	3669477	PrimaryExpression	0		3669375	1					
ANR	3669478	Condition	i < num	228:19:5122:5128	3669375	1	True				
ANR	3669479	RelationalExpression	i < num		3669375	0		<			
ANR	3669480	Identifier	i		3669375	0					
ANR	3669481	Identifier	num		3669375	1					
ANR	3669482	PostIncDecOperationExpression	i ++	228:28:5131:5133	3669375	2	True				
ANR	3669483	Identifier	i		3669375	0					
ANR	3669484	IncDec	++		3669375	1					
ANR	3669485	CompoundStatement		29:6:515:515	3669375	3					
ANR	3669486	IfStatement	"if ( ! FT_New_Face ( context , testfont , i , & face ) )"		3669375	0					
ANR	3669487	Condition	"! FT_New_Face ( context , testfont , i , & face )"	230:13:5158:5200	3669375	0	True				
ANR	3669488	UnaryOperationExpression	"! FT_New_Face ( context , testfont , i , & face )"		3669375	0					
ANR	3669489	UnaryOperator	!		3669375	0					
ANR	3669490	CallExpression	"FT_New_Face ( context , testfont , i , & face )"		3669375	1					
ANR	3669491	Callee	FT_New_Face		3669375	0					
ANR	3669492	Identifier	FT_New_Face		3669375	0					
ANR	3669493	ArgumentList	context		3669375	1					
ANR	3669494	Argument	context		3669375	0					
ANR	3669495	Identifier	context		3669375	0					
ANR	3669496	Argument	testfont		3669375	1					
ANR	3669497	Identifier	testfont		3669375	0					
ANR	3669498	Argument	i		3669375	2					
ANR	3669499	Identifier	i		3669375	0					
ANR	3669500	Argument	& face		3669375	3					
ANR	3669501	UnaryOperationExpression	& face		3669375	0					
ANR	3669502	UnaryOperator	&		3669375	0					
ANR	3669503	Identifier	face		3669375	1					
ANR	3669504	ExpressionStatement	TestFace ( face )	231:10:5214:5230	3669375	1	True				
ANR	3669505	CallExpression	TestFace ( face )		3669375	0					
ANR	3669506	Callee	TestFace		3669375	0					
ANR	3669507	Identifier	TestFace		3669375	0					
ANR	3669508	ArgumentList	face		3669375	1					
ANR	3669509	Argument	face		3669375	0					
ANR	3669510	Identifier	face		3669375	0					
ANR	3669511	ExpressionStatement	FT_Done_FreeType ( context )	235:4:5251:5278	3669375	5	True				
ANR	3669512	CallExpression	FT_Done_FreeType ( context )		3669375	0					
ANR	3669513	Callee	FT_Done_FreeType		3669375	0					
ANR	3669514	Identifier	FT_Done_FreeType		3669375	0					
ANR	3669515	ArgumentList	context		3669375	1					
ANR	3669516	Argument	context		3669375	0					
ANR	3669517	Identifier	context		3669375	0					
ANR	3669518	ExpressionStatement	exit ( 0 )	237:4:5285:5294	3669375	6	True				
ANR	3669519	CallExpression	exit ( 0 )		3669375	0					
ANR	3669520	Callee	exit		3669375	0					
ANR	3669521	Identifier	exit		3669375	0					
ANR	3669522	ArgumentList	0		3669375	1					
ANR	3669523	Argument	0		3669375	0					
ANR	3669524	PrimaryExpression	0		3669375	0					
ANR	3669525	ReturnType	static void		3669375	1					
ANR	3669526	Identifier	ExecuteTest		3669375	2					
ANR	3669527	ParameterList	char * testfont		3669375	3					
ANR	3669528	Parameter	char * testfont	200:15:4607:4621	3669375	0	True				
ANR	3669529	ParameterType	char *		3669375	0					
ANR	3669530	Identifier	testfont		3669375	1					
ANR	3669531	CFGEntryNode	ENTRY		3669375		True				
ANR	3669532	CFGExitNode	EXIT		3669375		True				
ANR	3669533	Symbol	FT_Init_FreeType		3669375						
ANR	3669534	Symbol	& context		3669375						
ANR	3669535	Symbol	face		3669375						
ANR	3669536	Symbol	num		3669375						
ANR	3669537	Symbol	context		3669375						
ANR	3669538	Symbol	FT_New_Face		3669375						
ANR	3669539	Symbol	i		3669375						
ANR	3669540	Symbol	face -> num_faces		3669375						
ANR	3669541	Symbol	testfont		3669375						
ANR	3669542	Symbol	stderr		3669375						
ANR	3669543	Symbol	& face		3669375						
ANR	3669544	Symbol	* face		3669375						
ANR	3669545	Function	extmatch	241:2:5304:5785							
ANR	3669546	FunctionDef	"extmatch (char * filename , char * * extensions)"		3669545	0					
ANR	3669547	CompoundStatement		244:2:5380:5785	3669545	0					
ANR	3669548	IdentifierDeclStatement	int i ;	245:4:5386:5394	3669545	0	True				
ANR	3669549	IdentifierDecl	i		3669545	0					
ANR	3669550	IdentifierDeclType	int		3669545	0					
ANR	3669551	Identifier	i		3669545	1					
ANR	3669552	IdentifierDeclStatement	char * pt ;	246:4:5400:5409	3669545	1	True				
ANR	3669553	IdentifierDecl	* pt		3669545	0					
ANR	3669554	IdentifierDeclType	char *		3669545	0					
ANR	3669555	Identifier	pt		3669545	1					
ANR	3669556	IfStatement	if ( ! extensions )		3669545	2					
ANR	3669557	Condition	! extensions	249:9:5422:5432	3669545	0	True				
ANR	3669558	UnaryOperationExpression	! extensions		3669545	0					
ANR	3669559	UnaryOperator	!		3669545	0					
ANR	3669560	Identifier	extensions		3669545	1					
ANR	3669561	ReturnStatement	return true ;	250:6:5442:5453	3669545	1	True				
ANR	3669562	Identifier	true		3669545	0					
ANR	3669563	ExpressionStatement	"pt = strrchr ( filename , '.' )"	252:4:5460:5489	3669545	3	True				
ANR	3669564	AssignmentExpression	"pt = strrchr ( filename , '.' )"		3669545	0		=			
ANR	3669565	Identifier	pt		3669545	0					
ANR	3669566	CallExpression	"strrchr ( filename , '.' )"		3669545	1					
ANR	3669567	Callee	strrchr		3669545	0					
ANR	3669568	Identifier	strrchr		3669545	0					
ANR	3669569	ArgumentList	filename		3669545	1					
ANR	3669570	Argument	filename		3669545	0					
ANR	3669571	Identifier	filename		3669545	0					
ANR	3669572	Argument	'.'		3669545	1					
ANR	3669573	PrimaryExpression	'.'		3669545	0					
ANR	3669574	IfStatement	if ( ! pt )		3669545	4					
ANR	3669575	Condition	! pt	253:9:5500:5502	3669545	0	True				
ANR	3669576	UnaryOperationExpression	! pt		3669545	0					
ANR	3669577	UnaryOperator	!		3669545	0					
ANR	3669578	Identifier	pt		3669545	1					
ANR	3669579	ReturnStatement	return false ;	254:6:5512:5524	3669545	1	True				
ANR	3669580	Identifier	false		3669545	0					
ANR	3669581	IfStatement	"if ( pt < strrchr ( filename , '/' ) )"		3669545	5					
ANR	3669582	Condition	"pt < strrchr ( filename , '/' )"	255:9:5535:5563	3669545	0	True				
ANR	3669583	RelationalExpression	"pt < strrchr ( filename , '/' )"		3669545	0		<			
ANR	3669584	Identifier	pt		3669545	0					
ANR	3669585	CallExpression	"strrchr ( filename , '/' )"		3669545	1					
ANR	3669586	Callee	strrchr		3669545	0					
ANR	3669587	Identifier	strrchr		3669545	0					
ANR	3669588	ArgumentList	filename		3669545	1					
ANR	3669589	Argument	filename		3669545	0					
ANR	3669590	Identifier	filename		3669545	0					
ANR	3669591	Argument	'/'		3669545	1					
ANR	3669592	PrimaryExpression	'/'		3669545	0					
ANR	3669593	ReturnStatement	return false ;	256:6:5573:5585	3669545	1	True				
ANR	3669594	Identifier	false		3669545	0					
ANR	3669595	ForStatement	for ( i = 0 ; extensions [ i ] != NULL ; i ++ )		3669545	6					
ANR	3669596	ForInit	i = 0 ;	258:10:5598:5603	3669545	0	True				
ANR	3669597	AssignmentExpression	i = 0		3669545	0		=			
ANR	3669598	Identifier	i		3669545	0					
ANR	3669599	PrimaryExpression	0		3669545	1					
ANR	3669600	Condition	extensions [ i ] != NULL	258:17:5605:5625	3669545	1	True				
ANR	3669601	EqualityExpression	extensions [ i ] != NULL		3669545	0		!=			
ANR	3669602	ArrayIndexing	extensions [ i ]		3669545	0					
ANR	3669603	Identifier	extensions		3669545	0					
ANR	3669604	Identifier	i		3669545	1					
ANR	3669605	Identifier	NULL		3669545	1					
ANR	3669606	PostIncDecOperationExpression	i ++	258:40:5628:5630	3669545	2	True				
ANR	3669607	Identifier	i		3669545	0					
ANR	3669608	IncDec	++		3669545	1					
ANR	3669609	IfStatement	"if ( strcasecmp ( pt + 1 , extensions [ i ] ) == 0 || strcasecmp ( pt , extensions [ i ] ) == 0 )"		3669545	3					
ANR	3669610	Condition	"strcasecmp ( pt + 1 , extensions [ i ] ) == 0 || strcasecmp ( pt , extensions [ i ] ) == 0"	259:11:5645:5739	3669545	0	True				
ANR	3669611	OrExpression	"strcasecmp ( pt + 1 , extensions [ i ] ) == 0 || strcasecmp ( pt , extensions [ i ] ) == 0"		3669545	0		||			
ANR	3669612	EqualityExpression	"strcasecmp ( pt + 1 , extensions [ i ] ) == 0"		3669545	0		==			
ANR	3669613	CallExpression	"strcasecmp ( pt + 1 , extensions [ i ] )"		3669545	0					
ANR	3669614	Callee	strcasecmp		3669545	0					
ANR	3669615	Identifier	strcasecmp		3669545	0					
ANR	3669616	ArgumentList	pt + 1		3669545	1					
ANR	3669617	Argument	pt + 1		3669545	0					
ANR	3669618	AdditiveExpression	pt + 1		3669545	0		+			
ANR	3669619	Identifier	pt		3669545	0					
ANR	3669620	PrimaryExpression	1		3669545	1					
ANR	3669621	Argument	extensions [ i ]		3669545	1					
ANR	3669622	ArrayIndexing	extensions [ i ]		3669545	0					
ANR	3669623	Identifier	extensions		3669545	0					
ANR	3669624	Identifier	i		3669545	1					
ANR	3669625	PrimaryExpression	0		3669545	1					
ANR	3669626	EqualityExpression	"strcasecmp ( pt , extensions [ i ] ) == 0"		3669545	1		==			
ANR	3669627	CallExpression	"strcasecmp ( pt , extensions [ i ] )"		3669545	0					
ANR	3669628	Callee	strcasecmp		3669545	0					
ANR	3669629	Identifier	strcasecmp		3669545	0					
ANR	3669630	ArgumentList	pt		3669545	1					
ANR	3669631	Argument	pt		3669545	0					
ANR	3669632	Identifier	pt		3669545	0					
ANR	3669633	Argument	extensions [ i ]		3669545	1					
ANR	3669634	ArrayIndexing	extensions [ i ]		3669545	0					
ANR	3669635	Identifier	extensions		3669545	0					
ANR	3669636	Identifier	i		3669545	1					
ANR	3669637	PrimaryExpression	0		3669545	1					
ANR	3669638	ReturnStatement	return true ;	261:8:5751:5762	3669545	1	True				
ANR	3669639	Identifier	true		3669545	0					
ANR	3669640	ReturnStatement	return false ;	263:4:5769:5781	3669545	7	True				
ANR	3669641	Identifier	false		3669545	0					
ANR	3669642	ReturnType	static int		3669545	1					
ANR	3669643	Identifier	extmatch		3669545	2					
ANR	3669644	ParameterList	"char * filename , char * * extensions"		3669545	3					
ANR	3669645	Parameter	char * filename	242:12:5327:5342	3669545	0	True				
ANR	3669646	ParameterType	char *		3669545	0					
ANR	3669647	Identifier	filename		3669545	1					
ANR	3669648	Parameter	char * * extensions	243:12:5357:5374	3669545	1	True				
ANR	3669649	ParameterType	char * *		3669545	0					
ANR	3669650	Identifier	extensions		3669545	1					
ANR	3669651	CFGEntryNode	ENTRY		3669545		True				
ANR	3669652	CFGExitNode	EXIT		3669545		True				
ANR	3669653	Symbol	extensions		3669545						
ANR	3669654	Symbol	filename		3669545						
ANR	3669655	Symbol	* i		3669545						
ANR	3669656	Symbol	NULL		3669545						
ANR	3669657	Symbol	pt		3669545						
ANR	3669658	Symbol	strrchr		3669545						
ANR	3669659	Symbol	true		3669545						
ANR	3669660	Symbol	false		3669545						
ANR	3669661	Symbol	i		3669545						
ANR	3669662	Symbol	* extensions		3669545						
ANR	3669663	Symbol	strcasecmp		3669545						
ANR	3669664	Function	figurefiletype	267:2:5791:7893							
ANR	3669665	FunctionDef	figurefiletype (struct fontlist * item)		3669664	0					
ANR	3669666	CompoundStatement		269:2:5848:7893	3669664	0					
ANR	3669667	IdentifierDeclStatement	FILE * foo ;	270:4:5854:5864	3669664	0	True				
ANR	3669668	IdentifierDecl	* foo		3669664	0					
ANR	3669669	IdentifierDeclType	FILE *		3669664	0					
ANR	3669670	Identifier	foo		3669664	1					
ANR	3669671	ExpressionStatement	item -> isbinary = item -> isascii = item -> ishex = false	273:4:5872:5924	3669664	1	True				
ANR	3669672	AssignmentExpression	item -> isbinary = item -> isascii = item -> ishex = false		3669664	0		=			
ANR	3669673	PtrMemberAccess	item -> isbinary		3669664	0					
ANR	3669674	Identifier	item		3669664	0					
ANR	3669675	Identifier	isbinary		3669664	1					
ANR	3669676	AssignmentExpression	item -> isascii = item -> ishex = false		3669664	1		=			
ANR	3669677	PtrMemberAccess	item -> isascii		3669664	0					
ANR	3669678	Identifier	item		3669664	0					
ANR	3669679	Identifier	isascii		3669664	1					
ANR	3669680	AssignmentExpression	item -> ishex = false		3669664	1		=			
ANR	3669681	PtrMemberAccess	item -> ishex		3669664	0					
ANR	3669682	Identifier	item		3669664	0					
ANR	3669683	Identifier	ishex		3669664	1					
ANR	3669684	Identifier	false		3669664	1					
ANR	3669685	ExpressionStatement	"foo = fopen ( item -> name , ""rb"" )"	275:4:5931:5962	3669664	2	True				
ANR	3669686	AssignmentExpression	"foo = fopen ( item -> name , ""rb"" )"		3669664	0		=			
ANR	3669687	Identifier	foo		3669664	0					
ANR	3669688	CallExpression	"fopen ( item -> name , ""rb"" )"		3669664	1					
ANR	3669689	Callee	fopen		3669664	0					
ANR	3669690	Identifier	fopen		3669664	0					
ANR	3669691	ArgumentList	item -> name		3669664	1					
ANR	3669692	Argument	item -> name		3669664	0					
ANR	3669693	PtrMemberAccess	item -> name		3669664	0					
ANR	3669694	Identifier	item		3669664	0					
ANR	3669695	Identifier	name		3669664	1					
ANR	3669696	Argument	"""rb"""		3669664	1					
ANR	3669697	PrimaryExpression	"""rb"""		3669664	0					
ANR	3669698	IfStatement	if ( foo )		3669664	3					
ANR	3669699	Condition	foo	276:9:5973:5975	3669664	0	True				
ANR	3669700	Identifier	foo		3669664	0					
ANR	3669701	CompoundStatement		14:6:304:326	3669664	1					
ANR	3669702	IdentifierDeclStatement	int ch1 = getc ( foo ) ;	279:6:6063:6085	3669664	0	True				
ANR	3669703	IdentifierDecl	ch1 = getc ( foo )		3669664	0					
ANR	3669704	IdentifierDeclType	int		3669664	0					
ANR	3669705	Identifier	ch1		3669664	1					
ANR	3669706	AssignmentExpression	ch1 = getc ( foo )		3669664	2		=			
ANR	3669707	Identifier	ch1		3669664	0					
ANR	3669708	CallExpression	getc ( foo )		3669664	1					
ANR	3669709	Callee	getc		3669664	0					
ANR	3669710	Identifier	getc		3669664	0					
ANR	3669711	ArgumentList	foo		3669664	1					
ANR	3669712	Argument	foo		3669664	0					
ANR	3669713	Identifier	foo		3669664	0					
ANR	3669714	IdentifierDeclStatement	int ch2 = getc ( foo ) ;	280:6:6093:6115	3669664	1	True				
ANR	3669715	IdentifierDecl	ch2 = getc ( foo )		3669664	0					
ANR	3669716	IdentifierDeclType	int		3669664	0					
ANR	3669717	Identifier	ch2		3669664	1					
ANR	3669718	AssignmentExpression	ch2 = getc ( foo )		3669664	2		=			
ANR	3669719	Identifier	ch2		3669664	0					
ANR	3669720	CallExpression	getc ( foo )		3669664	1					
ANR	3669721	Callee	getc		3669664	0					
ANR	3669722	Identifier	getc		3669664	0					
ANR	3669723	ArgumentList	foo		3669664	1					
ANR	3669724	Argument	foo		3669664	0					
ANR	3669725	Identifier	foo		3669664	0					
ANR	3669726	IdentifierDeclStatement	int ch3 = getc ( foo ) ;	281:6:6123:6145	3669664	2	True				
ANR	3669727	IdentifierDecl	ch3 = getc ( foo )		3669664	0					
ANR	3669728	IdentifierDeclType	int		3669664	0					
ANR	3669729	Identifier	ch3		3669664	1					
ANR	3669730	AssignmentExpression	ch3 = getc ( foo )		3669664	2		=			
ANR	3669731	Identifier	ch3		3669664	0					
ANR	3669732	CallExpression	getc ( foo )		3669664	1					
ANR	3669733	Callee	getc		3669664	0					
ANR	3669734	Identifier	getc		3669664	0					
ANR	3669735	ArgumentList	foo		3669664	1					
ANR	3669736	Argument	foo		3669664	0					
ANR	3669737	Identifier	foo		3669664	0					
ANR	3669738	IdentifierDeclStatement	int ch4 = getc ( foo ) ;	282:6:6153:6175	3669664	3	True				
ANR	3669739	IdentifierDecl	ch4 = getc ( foo )		3669664	0					
ANR	3669740	IdentifierDeclType	int		3669664	0					
ANR	3669741	Identifier	ch4		3669664	1					
ANR	3669742	AssignmentExpression	ch4 = getc ( foo )		3669664	2		=			
ANR	3669743	Identifier	ch4		3669664	0					
ANR	3669744	CallExpression	getc ( foo )		3669664	1					
ANR	3669745	Callee	getc		3669664	0					
ANR	3669746	Identifier	getc		3669664	0					
ANR	3669747	ArgumentList	foo		3669664	1					
ANR	3669748	Argument	foo		3669664	0					
ANR	3669749	Identifier	foo		3669664	0					
ANR	3669750	ExpressionStatement	fclose ( foo )	285:6:6185:6198	3669664	4	True				
ANR	3669751	CallExpression	fclose ( foo )		3669664	0					
ANR	3669752	Callee	fclose		3669664	0					
ANR	3669753	Identifier	fclose		3669664	0					
ANR	3669754	ArgumentList	foo		3669664	1					
ANR	3669755	Argument	foo		3669664	0					
ANR	3669756	Identifier	foo		3669664	0					
ANR	3669757	IfStatement	if ( ( ch1 == 0 && ch2 == 1 && ch3 == 0 && ch4 == 0 ) || ( ch1 == 'O' && ch2 == 'T' && ch3 == 'T' && ch4 == 'O' ) || ( ch1 == 't' && ch2 == 'r' && ch3 == 'u' && ch4 == 'e' ) || ( ch1 == 't' && ch2 == 't' && ch3 == 'c' && ch4 == 'f' ) )		3669664	5					
ANR	3669758	Condition	( ch1 == 0 && ch2 == 1 && ch3 == 0 && ch4 == 0 ) || ( ch1 == 'O' && ch2 == 'T' && ch3 == 'T' && ch4 == 'O' ) || ( ch1 == 't' && ch2 == 'r' && ch3 == 'u' && ch4 == 'e' ) || ( ch1 == 't' && ch2 == 't' && ch3 == 'c' && ch4 == 'f' )	287:11:6212:6480	3669664	0	True				
ANR	3669759	OrExpression	( ch1 == 0 && ch2 == 1 && ch3 == 0 && ch4 == 0 ) || ( ch1 == 'O' && ch2 == 'T' && ch3 == 'T' && ch4 == 'O' ) || ( ch1 == 't' && ch2 == 'r' && ch3 == 'u' && ch4 == 'e' ) || ( ch1 == 't' && ch2 == 't' && ch3 == 'c' && ch4 == 'f' )		3669664	0		||			
ANR	3669760	AndExpression	ch1 == 0 && ch2 == 1 && ch3 == 0 && ch4 == 0		3669664	0		&&			
ANR	3669761	EqualityExpression	ch1 == 0		3669664	0		==			
ANR	3669762	Identifier	ch1		3669664	0					
ANR	3669763	PrimaryExpression	0		3669664	1					
ANR	3669764	AndExpression	ch2 == 1 && ch3 == 0 && ch4 == 0		3669664	1		&&			
ANR	3669765	EqualityExpression	ch2 == 1		3669664	0		==			
ANR	3669766	Identifier	ch2		3669664	0					
ANR	3669767	PrimaryExpression	1		3669664	1					
ANR	3669768	AndExpression	ch3 == 0 && ch4 == 0		3669664	1		&&			
ANR	3669769	EqualityExpression	ch3 == 0		3669664	0		==			
ANR	3669770	Identifier	ch3		3669664	0					
ANR	3669771	PrimaryExpression	0		3669664	1					
ANR	3669772	EqualityExpression	ch4 == 0		3669664	1		==			
ANR	3669773	Identifier	ch4		3669664	0					
ANR	3669774	PrimaryExpression	0		3669664	1					
ANR	3669775	OrExpression	( ch1 == 'O' && ch2 == 'T' && ch3 == 'T' && ch4 == 'O' ) || ( ch1 == 't' && ch2 == 'r' && ch3 == 'u' && ch4 == 'e' ) || ( ch1 == 't' && ch2 == 't' && ch3 == 'c' && ch4 == 'f' )		3669664	1		||			
ANR	3669776	AndExpression	ch1 == 'O' && ch2 == 'T' && ch3 == 'T' && ch4 == 'O'		3669664	0		&&			
ANR	3669777	EqualityExpression	ch1 == 'O'		3669664	0		==			
ANR	3669778	Identifier	ch1		3669664	0					
ANR	3669779	PrimaryExpression	'O'		3669664	1					
ANR	3669780	AndExpression	ch2 == 'T' && ch3 == 'T' && ch4 == 'O'		3669664	1		&&			
ANR	3669781	EqualityExpression	ch2 == 'T'		3669664	0		==			
ANR	3669782	Identifier	ch2		3669664	0					
ANR	3669783	PrimaryExpression	'T'		3669664	1					
ANR	3669784	AndExpression	ch3 == 'T' && ch4 == 'O'		3669664	1		&&			
ANR	3669785	EqualityExpression	ch3 == 'T'		3669664	0		==			
ANR	3669786	Identifier	ch3		3669664	0					
ANR	3669787	PrimaryExpression	'T'		3669664	1					
ANR	3669788	EqualityExpression	ch4 == 'O'		3669664	1		==			
ANR	3669789	Identifier	ch4		3669664	0					
ANR	3669790	PrimaryExpression	'O'		3669664	1					
ANR	3669791	OrExpression	( ch1 == 't' && ch2 == 'r' && ch3 == 'u' && ch4 == 'e' ) || ( ch1 == 't' && ch2 == 't' && ch3 == 'c' && ch4 == 'f' )		3669664	1		||			
ANR	3669792	AndExpression	ch1 == 't' && ch2 == 'r' && ch3 == 'u' && ch4 == 'e'		3669664	0		&&			
ANR	3669793	EqualityExpression	ch1 == 't'		3669664	0		==			
ANR	3669794	Identifier	ch1		3669664	0					
ANR	3669795	PrimaryExpression	't'		3669664	1					
ANR	3669796	AndExpression	ch2 == 'r' && ch3 == 'u' && ch4 == 'e'		3669664	1		&&			
ANR	3669797	EqualityExpression	ch2 == 'r'		3669664	0		==			
ANR	3669798	Identifier	ch2		3669664	0					
ANR	3669799	PrimaryExpression	'r'		3669664	1					
ANR	3669800	AndExpression	ch3 == 'u' && ch4 == 'e'		3669664	1		&&			
ANR	3669801	EqualityExpression	ch3 == 'u'		3669664	0		==			
ANR	3669802	Identifier	ch3		3669664	0					
ANR	3669803	PrimaryExpression	'u'		3669664	1					
ANR	3669804	EqualityExpression	ch4 == 'e'		3669664	1		==			
ANR	3669805	Identifier	ch4		3669664	0					
ANR	3669806	PrimaryExpression	'e'		3669664	1					
ANR	3669807	AndExpression	ch1 == 't' && ch2 == 't' && ch3 == 'c' && ch4 == 'f'		3669664	1		&&			
ANR	3669808	EqualityExpression	ch1 == 't'		3669664	0		==			
ANR	3669809	Identifier	ch1		3669664	0					
ANR	3669810	PrimaryExpression	't'		3669664	1					
ANR	3669811	AndExpression	ch2 == 't' && ch3 == 'c' && ch4 == 'f'		3669664	1		&&			
ANR	3669812	EqualityExpression	ch2 == 't'		3669664	0		==			
ANR	3669813	Identifier	ch2		3669664	0					
ANR	3669814	PrimaryExpression	't'		3669664	1					
ANR	3669815	AndExpression	ch3 == 'c' && ch4 == 'f'		3669664	1		&&			
ANR	3669816	EqualityExpression	ch3 == 'c'		3669664	0		==			
ANR	3669817	Identifier	ch3		3669664	0					
ANR	3669818	PrimaryExpression	'c'		3669664	1					
ANR	3669819	EqualityExpression	ch4 == 'f'		3669664	1		==			
ANR	3669820	Identifier	ch4		3669664	0					
ANR	3669821	PrimaryExpression	'f'		3669664	1					
ANR	3669822	CompoundStatement		23:6:641:641	3669664	1					
ANR	3669823	ExpressionStatement	item -> isbinary = true	293:8:6534:6555	3669664	0	True				
ANR	3669824	AssignmentExpression	item -> isbinary = true		3669664	0		=			
ANR	3669825	PtrMemberAccess	item -> isbinary		3669664	0					
ANR	3669826	Identifier	item		3669664	0					
ANR	3669827	Identifier	isbinary		3669664	1					
ANR	3669828	Identifier	true		3669664	1					
ANR	3669829	ElseStatement	else		3669664	0					
ANR	3669830	IfStatement	if ( ch1 == 0x80 && ch2 == '\\01' )		3669664	0					
ANR	3669831	Condition	ch1 == 0x80 && ch2 == '\\01'	295:16:6581:6607	3669664	0	True				
ANR	3669832	AndExpression	ch1 == 0x80 && ch2 == '\\01'		3669664	0		&&			
ANR	3669833	EqualityExpression	ch1 == 0x80		3669664	0		==			
ANR	3669834	Identifier	ch1		3669664	0					
ANR	3669835	PrimaryExpression	0x80		3669664	1					
ANR	3669836	EqualityExpression	ch2 == '\\01'		3669664	1		==			
ANR	3669837	Identifier	ch2		3669664	0					
ANR	3669838	PrimaryExpression	'\\01'		3669664	1					
ANR	3669839	CompoundStatement		28:6:768:768	3669664	1					
ANR	3669840	ExpressionStatement	item -> isbinary = true	298:8:6652:6673	3669664	0	True				
ANR	3669841	AssignmentExpression	item -> isbinary = true		3669664	0		=			
ANR	3669842	PtrMemberAccess	item -> isbinary		3669664	0					
ANR	3669843	Identifier	item		3669664	0					
ANR	3669844	Identifier	isbinary		3669664	1					
ANR	3669845	Identifier	true		3669664	1					
ANR	3669846	ElseStatement	else		3669664	0					
ANR	3669847	IfStatement	if ( ch1 == '%' && ch2 == '!' )		3669664	0					
ANR	3669848	Condition	ch1 == '%' && ch2 == '!'	300:16:6699:6722	3669664	0	True				
ANR	3669849	AndExpression	ch1 == '%' && ch2 == '!'		3669664	0		&&			
ANR	3669850	EqualityExpression	ch1 == '%'		3669664	0		==			
ANR	3669851	Identifier	ch1		3669664	0					
ANR	3669852	PrimaryExpression	'%'		3669664	1					
ANR	3669853	EqualityExpression	ch2 == '!'		3669664	1		==			
ANR	3669854	Identifier	ch2		3669664	0					
ANR	3669855	PrimaryExpression	'!'		3669664	1					
ANR	3669856	CompoundStatement		33:6:883:883	3669664	1					
ANR	3669857	IfStatement	"if ( strstr ( item -> name , "".pfa"" ) || strstr ( item -> name , "".PFA"" ) )"		3669664	0					
ANR	3669858	Condition	"strstr ( item -> name , "".pfa"" ) || strstr ( item -> name , "".PFA"" )"	303:13:6779:6851	3669664	0	True				
ANR	3669859	OrExpression	"strstr ( item -> name , "".pfa"" ) || strstr ( item -> name , "".PFA"" )"		3669664	0		||			
ANR	3669860	CallExpression	"strstr ( item -> name , "".pfa"" )"		3669664	0					
ANR	3669861	Callee	strstr		3669664	0					
ANR	3669862	Identifier	strstr		3669664	0					
ANR	3669863	ArgumentList	item -> name		3669664	1					
ANR	3669864	Argument	item -> name		3669664	0					
ANR	3669865	PtrMemberAccess	item -> name		3669664	0					
ANR	3669866	Identifier	item		3669664	0					
ANR	3669867	Identifier	name		3669664	1					
ANR	3669868	Argument	""".pfa"""		3669664	1					
ANR	3669869	PrimaryExpression	""".pfa"""		3669664	0					
ANR	3669870	CallExpression	"strstr ( item -> name , "".PFA"" )"		3669664	1					
ANR	3669871	Callee	strstr		3669664	0					
ANR	3669872	Identifier	strstr		3669664	0					
ANR	3669873	ArgumentList	item -> name		3669664	1					
ANR	3669874	Argument	item -> name		3669664	0					
ANR	3669875	PtrMemberAccess	item -> name		3669664	0					
ANR	3669876	Identifier	item		3669664	0					
ANR	3669877	Identifier	name		3669664	1					
ANR	3669878	Argument	""".PFA"""		3669664	1					
ANR	3669879	PrimaryExpression	""".PFA"""		3669664	0					
ANR	3669880	ExpressionStatement	item -> ishex = true	305:10:6865:6883	3669664	1	True				
ANR	3669881	AssignmentExpression	item -> ishex = true		3669664	0		=			
ANR	3669882	PtrMemberAccess	item -> ishex		3669664	0					
ANR	3669883	Identifier	item		3669664	0					
ANR	3669884	Identifier	ishex		3669664	1					
ANR	3669885	Identifier	true		3669664	1					
ANR	3669886	ElseStatement	else		3669664	0					
ANR	3669887	ExpressionStatement	item -> isascii = true	307:10:6908:6928	3669664	0	True				
ANR	3669888	AssignmentExpression	item -> isascii = true		3669664	0		=			
ANR	3669889	PtrMemberAccess	item -> isascii		3669664	0					
ANR	3669890	Identifier	item		3669664	0					
ANR	3669891	Identifier	isascii		3669664	1					
ANR	3669892	Identifier	true		3669664	1					
ANR	3669893	ElseStatement	else		3669664	0					
ANR	3669894	IfStatement	if ( ch1 == 1 && ch2 == 0 && ch3 == 4 )		3669664	0					
ANR	3669895	Condition	ch1 == 1 && ch2 == 0 && ch3 == 4	309:16:6954:6985	3669664	0	True				
ANR	3669896	AndExpression	ch1 == 1 && ch2 == 0 && ch3 == 4		3669664	0		&&			
ANR	3669897	EqualityExpression	ch1 == 1		3669664	0		==			
ANR	3669898	Identifier	ch1		3669664	0					
ANR	3669899	PrimaryExpression	1		3669664	1					
ANR	3669900	AndExpression	ch2 == 0 && ch3 == 4		3669664	1		&&			
ANR	3669901	EqualityExpression	ch2 == 0		3669664	0		==			
ANR	3669902	Identifier	ch2		3669664	0					
ANR	3669903	PrimaryExpression	0		3669664	1					
ANR	3669904	EqualityExpression	ch3 == 4		3669664	1		==			
ANR	3669905	Identifier	ch3		3669664	0					
ANR	3669906	PrimaryExpression	4		3669664	1					
ANR	3669907	CompoundStatement		42:6:1146:1146	3669664	1					
ANR	3669908	ExpressionStatement	item -> isbinary = true	312:8:7028:7049	3669664	0	True				
ANR	3669909	AssignmentExpression	item -> isbinary = true		3669664	0		=			
ANR	3669910	PtrMemberAccess	item -> isbinary		3669664	0					
ANR	3669911	Identifier	item		3669664	0					
ANR	3669912	Identifier	isbinary		3669664	1					
ANR	3669913	Identifier	true		3669664	1					
ANR	3669914	ElseStatement	else		3669664	0					
ANR	3669915	IfStatement	if ( ch1 == 'S' && ch2 == 'T' && ch3 == 'A' && ch4 == 'R' )		3669664	0					
ANR	3669916	Condition	ch1 == 'S' && ch2 == 'T' && ch3 == 'A' && ch4 == 'R'	314:16:7075:7126	3669664	0	True				
ANR	3669917	AndExpression	ch1 == 'S' && ch2 == 'T' && ch3 == 'A' && ch4 == 'R'		3669664	0		&&			
ANR	3669918	EqualityExpression	ch1 == 'S'		3669664	0		==			
ANR	3669919	Identifier	ch1		3669664	0					
ANR	3669920	PrimaryExpression	'S'		3669664	1					
ANR	3669921	AndExpression	ch2 == 'T' && ch3 == 'A' && ch4 == 'R'		3669664	1		&&			
ANR	3669922	EqualityExpression	ch2 == 'T'		3669664	0		==			
ANR	3669923	Identifier	ch2		3669664	0					
ANR	3669924	PrimaryExpression	'T'		3669664	1					
ANR	3669925	AndExpression	ch3 == 'A' && ch4 == 'R'		3669664	1		&&			
ANR	3669926	EqualityExpression	ch3 == 'A'		3669664	0		==			
ANR	3669927	Identifier	ch3		3669664	0					
ANR	3669928	PrimaryExpression	'A'		3669664	1					
ANR	3669929	EqualityExpression	ch4 == 'R'		3669664	1		==			
ANR	3669930	Identifier	ch4		3669664	0					
ANR	3669931	PrimaryExpression	'R'		3669664	1					
ANR	3669932	CompoundStatement		47:6:1287:1287	3669664	1					
ANR	3669933	ExpressionStatement	item -> ishex = true	317:8:7164:7182	3669664	0	True				
ANR	3669934	AssignmentExpression	item -> ishex = true		3669664	0		=			
ANR	3669935	PtrMemberAccess	item -> ishex		3669664	0					
ANR	3669936	Identifier	item		3669664	0					
ANR	3669937	Identifier	ishex		3669664	1					
ANR	3669938	Identifier	true		3669664	1					
ANR	3669939	ElseStatement	else		3669664	0					
ANR	3669940	IfStatement	if ( ch1 == 'P' && ch2 == 'F' && ch3 == 'R' && ch4 == '0' )		3669664	0					
ANR	3669941	Condition	ch1 == 'P' && ch2 == 'F' && ch3 == 'R' && ch4 == '0'	319:16:7208:7259	3669664	0	True				
ANR	3669942	AndExpression	ch1 == 'P' && ch2 == 'F' && ch3 == 'R' && ch4 == '0'		3669664	0		&&			
ANR	3669943	EqualityExpression	ch1 == 'P'		3669664	0		==			
ANR	3669944	Identifier	ch1		3669664	0					
ANR	3669945	PrimaryExpression	'P'		3669664	1					
ANR	3669946	AndExpression	ch2 == 'F' && ch3 == 'R' && ch4 == '0'		3669664	1		&&			
ANR	3669947	EqualityExpression	ch2 == 'F'		3669664	0		==			
ANR	3669948	Identifier	ch2		3669664	0					
ANR	3669949	PrimaryExpression	'F'		3669664	1					
ANR	3669950	AndExpression	ch3 == 'R' && ch4 == '0'		3669664	1		&&			
ANR	3669951	EqualityExpression	ch3 == 'R'		3669664	0		==			
ANR	3669952	Identifier	ch3		3669664	0					
ANR	3669953	PrimaryExpression	'R'		3669664	1					
ANR	3669954	EqualityExpression	ch4 == '0'		3669664	1		==			
ANR	3669955	Identifier	ch4		3669664	0					
ANR	3669956	PrimaryExpression	'0'		3669664	1					
ANR	3669957	CompoundStatement		52:6:1420:1420	3669664	1					
ANR	3669958	ExpressionStatement	item -> isbinary = true	322:8:7297:7318	3669664	0	True				
ANR	3669959	AssignmentExpression	item -> isbinary = true		3669664	0		=			
ANR	3669960	PtrMemberAccess	item -> isbinary		3669664	0					
ANR	3669961	Identifier	item		3669664	0					
ANR	3669962	Identifier	isbinary		3669664	1					
ANR	3669963	Identifier	true		3669664	1					
ANR	3669964	ElseStatement	else		3669664	0					
ANR	3669965	IfStatement	if ( ( ch1 == '\\1' && ch2 == 'f' && ch3 == 'c' && ch4 == 'p' ) || ( ch1 == 'M' && ch2 == 'Z' ) )		3669664	0					
ANR	3669966	Condition	( ch1 == '\\1' && ch2 == 'f' && ch3 == 'c' && ch4 == 'p' ) || ( ch1 == 'M' && ch2 == 'Z' )	324:16:7344:7449	3669664	0	True				
ANR	3669967	OrExpression	( ch1 == '\\1' && ch2 == 'f' && ch3 == 'c' && ch4 == 'p' ) || ( ch1 == 'M' && ch2 == 'Z' )		3669664	0		||			
ANR	3669968	AndExpression	ch1 == '\\1' && ch2 == 'f' && ch3 == 'c' && ch4 == 'p'		3669664	0		&&			
ANR	3669969	EqualityExpression	ch1 == '\\1'		3669664	0		==			
ANR	3669970	Identifier	ch1		3669664	0					
ANR	3669971	PrimaryExpression	'\\1'		3669664	1					
ANR	3669972	AndExpression	ch2 == 'f' && ch3 == 'c' && ch4 == 'p'		3669664	1		&&			
ANR	3669973	EqualityExpression	ch2 == 'f'		3669664	0		==			
ANR	3669974	Identifier	ch2		3669664	0					
ANR	3669975	PrimaryExpression	'f'		3669664	1					
ANR	3669976	AndExpression	ch3 == 'c' && ch4 == 'p'		3669664	1		&&			
ANR	3669977	EqualityExpression	ch3 == 'c'		3669664	0		==			
ANR	3669978	Identifier	ch3		3669664	0					
ANR	3669979	PrimaryExpression	'c'		3669664	1					
ANR	3669980	EqualityExpression	ch4 == 'p'		3669664	1		==			
ANR	3669981	Identifier	ch4		3669664	0					
ANR	3669982	PrimaryExpression	'p'		3669664	1					
ANR	3669983	AndExpression	ch1 == 'M' && ch2 == 'Z'		3669664	1		&&			
ANR	3669984	EqualityExpression	ch1 == 'M'		3669664	0		==			
ANR	3669985	Identifier	ch1		3669664	0					
ANR	3669986	PrimaryExpression	'M'		3669664	1					
ANR	3669987	EqualityExpression	ch2 == 'Z'		3669664	1		==			
ANR	3669988	Identifier	ch2		3669664	0					
ANR	3669989	PrimaryExpression	'Z'		3669664	1					
ANR	3669990	CompoundStatement		58:6:1638:1638	3669664	1					
ANR	3669991	ExpressionStatement	item -> isbinary = true	328:8:7523:7544	3669664	0	True				
ANR	3669992	AssignmentExpression	item -> isbinary = true		3669664	0		=			
ANR	3669993	PtrMemberAccess	item -> isbinary		3669664	0					
ANR	3669994	Identifier	item		3669664	0					
ANR	3669995	Identifier	isbinary		3669664	1					
ANR	3669996	Identifier	true		3669664	1					
ANR	3669997	ElseStatement	else		3669664	0					
ANR	3669998	CompoundStatement		63:6:1722:1722	3669664	0					
ANR	3669999	ExpressionStatement	"fprintf ( stderr , ""Can't recognize file type of `%s', assuming binary\\n"" , item -> name )"	332:8:7581:7700	3669664	0	True				
ANR	3670000	CallExpression	"fprintf ( stderr , ""Can't recognize file type of `%s', assuming binary\\n"" , item -> name )"		3669664	0					
ANR	3670001	Callee	fprintf		3669664	0					
ANR	3670002	Identifier	fprintf		3669664	0					
ANR	3670003	ArgumentList	stderr		3669664	1					
ANR	3670004	Argument	stderr		3669664	0					
ANR	3670005	Identifier	stderr		3669664	0					
ANR	3670006	Argument	"""Can't recognize file type of `%s', assuming binary\\n"""		3669664	1					
ANR	3670007	PrimaryExpression	"""Can't recognize file type of `%s', assuming binary\\n"""		3669664	0					
ANR	3670008	Argument	item -> name		3669664	2					
ANR	3670009	PtrMemberAccess	item -> name		3669664	0					
ANR	3670010	Identifier	item		3669664	0					
ANR	3670011	Identifier	name		3669664	1					
ANR	3670012	ExpressionStatement	item -> isbinary = true	335:8:7710:7731	3669664	1	True				
ANR	3670013	AssignmentExpression	item -> isbinary = true		3669664	0		=			
ANR	3670014	PtrMemberAccess	item -> isbinary		3669664	0					
ANR	3670015	Identifier	item		3669664	0					
ANR	3670016	Identifier	isbinary		3669664	1					
ANR	3670017	Identifier	true		3669664	1					
ANR	3670018	ElseStatement	else		3669664	0					
ANR	3670019	CompoundStatement		71:4:1911:1911	3669664	0					
ANR	3670020	ExpressionStatement	"fprintf ( stderr , ""Can't open `%s' for typing the file.\\n"" , item -> name )"	340:6:7768:7854	3669664	0	True				
ANR	3670021	CallExpression	"fprintf ( stderr , ""Can't open `%s' for typing the file.\\n"" , item -> name )"		3669664	0					
ANR	3670022	Callee	fprintf		3669664	0					
ANR	3670023	Identifier	fprintf		3669664	0					
ANR	3670024	ArgumentList	stderr		3669664	1					
ANR	3670025	Argument	stderr		3669664	0					
ANR	3670026	Identifier	stderr		3669664	0					
ANR	3670027	Argument	"""Can't open `%s' for typing the file.\\n"""		3669664	1					
ANR	3670028	PrimaryExpression	"""Can't open `%s' for typing the file.\\n"""		3669664	0					
ANR	3670029	Argument	item -> name		3669664	2					
ANR	3670030	PtrMemberAccess	item -> name		3669664	0					
ANR	3670031	Identifier	item		3669664	0					
ANR	3670032	Identifier	name		3669664	1					
ANR	3670033	ExpressionStatement	item -> isbinary = true	342:6:7862:7883	3669664	1	True				
ANR	3670034	AssignmentExpression	item -> isbinary = true		3669664	0		=			
ANR	3670035	PtrMemberAccess	item -> isbinary		3669664	0					
ANR	3670036	Identifier	item		3669664	0					
ANR	3670037	Identifier	isbinary		3669664	1					
ANR	3670038	Identifier	true		3669664	1					
ANR	3670039	ReturnType	static void		3669664	1					
ANR	3670040	Identifier	figurefiletype		3669664	2					
ANR	3670041	ParameterList	struct fontlist * item		3669664	3					
ANR	3670042	Parameter	struct fontlist * item	268:18:5821:5842	3669664	0	True				
ANR	3670043	ParameterType	struct fontlist *		3669664	0					
ANR	3670044	Identifier	item		3669664	1					
ANR	3670045	CFGEntryNode	ENTRY		3669664		True				
ANR	3670046	CFGExitNode	EXIT		3669664		True				
ANR	3670047	Symbol	fopen		3669664						
ANR	3670048	Symbol	item		3669664						
ANR	3670049	Symbol	foo		3669664						
ANR	3670050	Symbol	item -> isascii		3669664						
ANR	3670051	Symbol	false		3669664						
ANR	3670052	Symbol	item -> isbinary		3669664						
ANR	3670053	Symbol	ch2		3669664						
ANR	3670054	Symbol	stderr		3669664						
ANR	3670055	Symbol	ch1		3669664						
ANR	3670056	Symbol	ch4		3669664						
ANR	3670057	Symbol	ch3		3669664						
ANR	3670058	Symbol	strstr		3669664						
ANR	3670059	Symbol	* item		3669664						
ANR	3670060	Symbol	item -> ishex		3669664						
ANR	3670061	Symbol	item -> name		3669664						
ANR	3670062	Symbol	true		3669664						
ANR	3670063	Symbol	getc		3669664						
ANR	3670064	Function	FindFonts	347:2:7899:9426							
ANR	3670065	FunctionDef	"FindFonts (char * * fontdirs , char * * extensions)"		3670064	0					
ANR	3670066	CompoundStatement		350:2:7978:9426	3670064	0					
ANR	3670067	IdentifierDeclStatement	int i ;	351:4:7984:7999	3670064	0	True				
ANR	3670068	IdentifierDecl	i		3670064	0					
ANR	3670069	IdentifierDeclType	int		3670064	0					
ANR	3670070	Identifier	i		3670064	1					
ANR	3670071	IdentifierDeclStatement	unsigned int max ;	352:4:8005:8022	3670064	1	True				
ANR	3670072	IdentifierDecl	max		3670064	0					
ANR	3670073	IdentifierDeclType	unsigned int		3670064	0					
ANR	3670074	Identifier	max		3670064	1					
ANR	3670075	IdentifierDeclStatement	char buffer [ 1025 ] ;	353:4:8028:8054	3670064	2	True				
ANR	3670076	IdentifierDecl	buffer [ 1025 ]		3670064	0					
ANR	3670077	IdentifierDeclType	char [ 1025 ]		3670064	0					
ANR	3670078	Identifier	buffer		3670064	1					
ANR	3670079	PrimaryExpression	1025		3670064	2					
ANR	3670080	IdentifierDeclStatement	struct stat statb ;	354:4:8060:8079	3670064	3	True				
ANR	3670081	IdentifierDecl	statb		3670064	0					
ANR	3670082	IdentifierDeclType	struct stat		3670064	0					
ANR	3670083	Identifier	statb		3670064	1					
ANR	3670084	ExpressionStatement	max = 0	357:4:8087:8095	3670064	4	True				
ANR	3670085	AssignmentExpression	max = 0		3670064	0		=			
ANR	3670086	Identifier	max		3670064	0					
ANR	3670087	PrimaryExpression	0		3670064	1					
ANR	3670088	ExpressionStatement	fcnt = 0	358:4:8101:8109	3670064	5	True				
ANR	3670089	AssignmentExpression	fcnt = 0		3670064	0		=			
ANR	3670090	Identifier	fcnt		3670064	0					
ANR	3670091	PrimaryExpression	0		3670064	1					
ANR	3670092	ForStatement	for ( i = 0 ; fontdirs [ i ] != NULL ; i ++ )		3670064	6					
ANR	3670093	ForInit	i = 0 ;	360:10:8122:8127	3670064	0	True				
ANR	3670094	AssignmentExpression	i = 0		3670064	0		=			
ANR	3670095	Identifier	i		3670064	0					
ANR	3670096	PrimaryExpression	0		3670064	1					
ANR	3670097	Condition	fontdirs [ i ] != NULL	360:17:8129:8147	3670064	1	True				
ANR	3670098	EqualityExpression	fontdirs [ i ] != NULL		3670064	0		!=			
ANR	3670099	ArrayIndexing	fontdirs [ i ]		3670064	0					
ANR	3670100	Identifier	fontdirs		3670064	0					
ANR	3670101	Identifier	i		3670064	1					
ANR	3670102	Identifier	NULL		3670064	1					
ANR	3670103	PostIncDecOperationExpression	i ++	360:38:8150:8152	3670064	2	True				
ANR	3670104	Identifier	i		3670064	0					
ANR	3670105	IncDec	++		3670064	1					
ANR	3670106	CompoundStatement		14:6:221:240	3670064	3					
ANR	3670107	IdentifierDeclStatement	DIR * examples ;	362:6:8168:8192	3670064	0	True				
ANR	3670108	IdentifierDecl	* examples		3670064	0					
ANR	3670109	IdentifierDeclType	DIR *		3670064	0					
ANR	3670110	Identifier	examples		3670064	1					
ANR	3670111	IdentifierDeclStatement	struct dirent * ent ;	363:6:8200:8219	3670064	1	True				
ANR	3670112	IdentifierDecl	* ent		3670064	0					
ANR	3670113	IdentifierDeclType	struct dirent *		3670064	0					
ANR	3670114	Identifier	ent		3670064	1					
ANR	3670115	ExpressionStatement	examples = opendir ( fontdirs [ i ] )	366:6:8229:8262	3670064	2	True				
ANR	3670116	AssignmentExpression	examples = opendir ( fontdirs [ i ] )		3670064	0		=			
ANR	3670117	Identifier	examples		3670064	0					
ANR	3670118	CallExpression	opendir ( fontdirs [ i ] )		3670064	1					
ANR	3670119	Callee	opendir		3670064	0					
ANR	3670120	Identifier	opendir		3670064	0					
ANR	3670121	ArgumentList	fontdirs [ i ]		3670064	1					
ANR	3670122	Argument	fontdirs [ i ]		3670064	0					
ANR	3670123	ArrayIndexing	fontdirs [ i ]		3670064	0					
ANR	3670124	Identifier	fontdirs		3670064	0					
ANR	3670125	Identifier	i		3670064	1					
ANR	3670126	IfStatement	if ( ! examples )		3670064	3					
ANR	3670127	Condition	! examples	367:11:8275:8283	3670064	0	True				
ANR	3670128	UnaryOperationExpression	! examples		3670064	0					
ANR	3670129	UnaryOperator	!		3670064	0					
ANR	3670130	Identifier	examples		3670064	1					
ANR	3670131	CompoundStatement		19:6:314:314	3670064	1					
ANR	3670132	ExpressionStatement	"fprintf ( stderr , ""Can't open example font directory `%s'\\n"" , fontdirs [ i ] )"	369:8:8303:8411	3670064	0	True				
ANR	3670133	CallExpression	"fprintf ( stderr , ""Can't open example font directory `%s'\\n"" , fontdirs [ i ] )"		3670064	0					
ANR	3670134	Callee	fprintf		3670064	0					
ANR	3670135	Identifier	fprintf		3670064	0					
ANR	3670136	ArgumentList	stderr		3670064	1					
ANR	3670137	Argument	stderr		3670064	0					
ANR	3670138	Identifier	stderr		3670064	0					
ANR	3670139	Argument	"""Can't open example font directory `%s'\\n"""		3670064	1					
ANR	3670140	PrimaryExpression	"""Can't open example font directory `%s'\\n"""		3670064	0					
ANR	3670141	Argument	fontdirs [ i ]		3670064	2					
ANR	3670142	ArrayIndexing	fontdirs [ i ]		3670064	0					
ANR	3670143	Identifier	fontdirs		3670064	0					
ANR	3670144	Identifier	i		3670064	1					
ANR	3670145	ExpressionStatement	exit ( 1 )	372:8:8421:8430	3670064	1	True				
ANR	3670146	CallExpression	exit ( 1 )		3670064	0					
ANR	3670147	Callee	exit		3670064	0					
ANR	3670148	Identifier	exit		3670064	0					
ANR	3670149	ArgumentList	1		3670064	1					
ANR	3670150	Argument	1		3670064	0					
ANR	3670151	PrimaryExpression	1		3670064	0					
ANR	3670152	WhileStatement	while ( ( ent = readdir ( examples ) ) != NULL )		3670064	4					
ANR	3670153	Condition	( ent = readdir ( examples ) ) != NULL	375:14:8455:8491	3670064	0	True				
ANR	3670154	EqualityExpression	( ent = readdir ( examples ) ) != NULL		3670064	0		!=			
ANR	3670155	AssignmentExpression	ent = readdir ( examples )		3670064	0		=			
ANR	3670156	Identifier	ent		3670064	0					
ANR	3670157	CallExpression	readdir ( examples )		3670064	1					
ANR	3670158	Callee	readdir		3670064	0					
ANR	3670159	Identifier	readdir		3670064	0					
ANR	3670160	ArgumentList	examples		3670064	1					
ANR	3670161	Argument	examples		3670064	0					
ANR	3670162	Identifier	examples		3670064	0					
ANR	3670163	Identifier	NULL		3670064	1					
ANR	3670164	CompoundStatement		27:6:522:522	3670064	1					
ANR	3670165	ExpressionStatement	"snprintf ( buffer , sizeof ( buffer ) , ""%s/%s"" , fontdirs [ i ] , ent -> d_name )"	377:8:8511:8601	3670064	0	True				
ANR	3670166	CallExpression	"snprintf ( buffer , sizeof ( buffer ) , ""%s/%s"" , fontdirs [ i ] , ent -> d_name )"		3670064	0					
ANR	3670167	Callee	snprintf		3670064	0					
ANR	3670168	Identifier	snprintf		3670064	0					
ANR	3670169	ArgumentList	buffer		3670064	1					
ANR	3670170	Argument	buffer		3670064	0					
ANR	3670171	Identifier	buffer		3670064	0					
ANR	3670172	Argument	sizeof ( buffer )		3670064	1					
ANR	3670173	SizeofExpression	sizeof ( buffer )		3670064	0					
ANR	3670174	Sizeof	sizeof		3670064	0					
ANR	3670175	SizeofOperand	buffer		3670064	1					
ANR	3670176	Argument	"""%s/%s"""		3670064	2					
ANR	3670177	PrimaryExpression	"""%s/%s"""		3670064	0					
ANR	3670178	Argument	fontdirs [ i ]		3670064	3					
ANR	3670179	ArrayIndexing	fontdirs [ i ]		3670064	0					
ANR	3670180	Identifier	fontdirs		3670064	0					
ANR	3670181	Identifier	i		3670064	1					
ANR	3670182	Argument	ent -> d_name		3670064	4					
ANR	3670183	PtrMemberAccess	ent -> d_name		3670064	0					
ANR	3670184	Identifier	ent		3670064	0					
ANR	3670185	Identifier	d_name		3670064	1					
ANR	3670186	IfStatement	"if ( stat ( buffer , & statb ) == - 1 || S_ISDIR ( statb . st_mode ) )"		3670064	1					
ANR	3670187	Condition	"stat ( buffer , & statb ) == - 1 || S_ISDIR ( statb . st_mode )"	379:13:8616:8671	3670064	0	True				
ANR	3670188	OrExpression	"stat ( buffer , & statb ) == - 1 || S_ISDIR ( statb . st_mode )"		3670064	0		||			
ANR	3670189	EqualityExpression	"stat ( buffer , & statb ) == - 1"		3670064	0		==			
ANR	3670190	CallExpression	"stat ( buffer , & statb )"		3670064	0					
ANR	3670191	Callee	stat		3670064	0					
ANR	3670192	Identifier	stat		3670064	0					
ANR	3670193	ArgumentList	buffer		3670064	1					
ANR	3670194	Argument	buffer		3670064	0					
ANR	3670195	Identifier	buffer		3670064	0					
ANR	3670196	Argument	& statb		3670064	1					
ANR	3670197	UnaryOperationExpression	& statb		3670064	0					
ANR	3670198	UnaryOperator	&		3670064	0					
ANR	3670199	Identifier	statb		3670064	1					
ANR	3670200	UnaryOperationExpression	- 1		3670064	1					
ANR	3670201	UnaryOperator	-		3670064	0					
ANR	3670202	PrimaryExpression	1		3670064	1					
ANR	3670203	CallExpression	S_ISDIR ( statb . st_mode )		3670064	1					
ANR	3670204	Callee	S_ISDIR		3670064	0					
ANR	3670205	Identifier	S_ISDIR		3670064	0					
ANR	3670206	ArgumentList	statb . st_mode		3670064	1					
ANR	3670207	Argument	statb . st_mode		3670064	0					
ANR	3670208	MemberAccess	statb . st_mode		3670064	0					
ANR	3670209	Identifier	statb		3670064	0					
ANR	3670210	Identifier	st_mode		3670064	1					
ANR	3670211	ContinueStatement	continue ;	380:10:8685:8693	3670064	1	True				
ANR	3670212	IfStatement	"if ( ! extensions || extmatch ( buffer , extensions ) )"		3670064	2					
ANR	3670213	Condition	"! extensions || extmatch ( buffer , extensions )"	381:13:8708:8752	3670064	0	True				
ANR	3670214	OrExpression	"! extensions || extmatch ( buffer , extensions )"		3670064	0		||			
ANR	3670215	UnaryOperationExpression	! extensions		3670064	0					
ANR	3670216	UnaryOperator	!		3670064	0					
ANR	3670217	Identifier	extensions		3670064	1					
ANR	3670218	CallExpression	"extmatch ( buffer , extensions )"		3670064	1					
ANR	3670219	Callee	extmatch		3670064	0					
ANR	3670220	Identifier	extmatch		3670064	0					
ANR	3670221	ArgumentList	buffer		3670064	1					
ANR	3670222	Argument	buffer		3670064	0					
ANR	3670223	Identifier	buffer		3670064	0					
ANR	3670224	Argument	extensions		3670064	1					
ANR	3670225	Identifier	extensions		3670064	0					
ANR	3670226	CompoundStatement		33:8:785:785	3670064	1					
ANR	3670227	IfStatement	if ( fcnt >= max )		3670064	0					
ANR	3670228	Condition	fcnt >= max	383:15:8781:8791	3670064	0	True				
ANR	3670229	RelationalExpression	fcnt >= max		3670064	0		>=			
ANR	3670230	Identifier	fcnt		3670064	0					
ANR	3670231	Identifier	max		3670064	1					
ANR	3670232	CompoundStatement		35:10:826:826	3670064	1					
ANR	3670233	ExpressionStatement	max += 100	385:12:8819:8829	3670064	0	True				
ANR	3670234	AssignmentExpression	max += 100		3670064	0		+=			
ANR	3670235	Identifier	max		3670064	0					
ANR	3670236	PrimaryExpression	100		3670064	1					
ANR	3670237	ExpressionStatement	"fontlist = realloc ( fontlist , max * sizeof ( struct fontlist ) )"	386:12:8843:8907	3670064	1	True				
ANR	3670238	AssignmentExpression	"fontlist = realloc ( fontlist , max * sizeof ( struct fontlist ) )"		3670064	0		=			
ANR	3670239	Identifier	fontlist		3670064	0					
ANR	3670240	CallExpression	"realloc ( fontlist , max * sizeof ( struct fontlist ) )"		3670064	1					
ANR	3670241	Callee	realloc		3670064	0					
ANR	3670242	Identifier	realloc		3670064	0					
ANR	3670243	ArgumentList	fontlist		3670064	1					
ANR	3670244	Argument	fontlist		3670064	0					
ANR	3670245	Identifier	fontlist		3670064	0					
ANR	3670246	Argument	max * sizeof ( struct fontlist )		3670064	1					
ANR	3670247	MultiplicativeExpression	max * sizeof ( struct fontlist )		3670064	0		*			
ANR	3670248	Identifier	max		3670064	0					
ANR	3670249	SizeofExpression	sizeof ( struct fontlist )		3670064	1					
ANR	3670250	Sizeof	sizeof		3670064	0					
ANR	3670251	SizeofOperand	struct fontlist		3670064	1					
ANR	3670252	IfStatement	if ( ! fontlist )		3670064	2					
ANR	3670253	Condition	! fontlist	387:17:8926:8934	3670064	0	True				
ANR	3670254	UnaryOperationExpression	! fontlist		3670064	0					
ANR	3670255	UnaryOperator	!		3670064	0					
ANR	3670256	Identifier	fontlist		3670064	1					
ANR	3670257	CompoundStatement		39:12:971:971	3670064	1					
ANR	3670258	ExpressionStatement	"fprintf ( stderr , ""Can't allocate memory\\n"" )"	389:14:8966:9010	3670064	0	True				
ANR	3670259	CallExpression	"fprintf ( stderr , ""Can't allocate memory\\n"" )"		3670064	0					
ANR	3670260	Callee	fprintf		3670064	0					
ANR	3670261	Identifier	fprintf		3670064	0					
ANR	3670262	ArgumentList	stderr		3670064	1					
ANR	3670263	Argument	stderr		3670064	0					
ANR	3670264	Identifier	stderr		3670064	0					
ANR	3670265	Argument	"""Can't allocate memory\\n"""		3670064	1					
ANR	3670266	PrimaryExpression	"""Can't allocate memory\\n"""		3670064	0					
ANR	3670267	ExpressionStatement	exit ( 1 )	390:14:9026:9035	3670064	1	True				
ANR	3670268	CallExpression	exit ( 1 )		3670064	0					
ANR	3670269	Callee	exit		3670064	0					
ANR	3670270	Identifier	exit		3670064	0					
ANR	3670271	ArgumentList	1		3670064	1					
ANR	3670272	Argument	1		3670064	0					
ANR	3670273	PrimaryExpression	1		3670064	0					
ANR	3670274	ExpressionStatement	fontlist [ fcnt ] . name = strdup ( buffer )	394:10:9074:9112	3670064	1	True				
ANR	3670275	AssignmentExpression	fontlist [ fcnt ] . name = strdup ( buffer )		3670064	0		=			
ANR	3670276	MemberAccess	fontlist [ fcnt ] . name		3670064	0					
ANR	3670277	ArrayIndexing	fontlist [ fcnt ]		3670064	0					
ANR	3670278	Identifier	fontlist		3670064	0					
ANR	3670279	Identifier	fcnt		3670064	1					
ANR	3670280	Identifier	name		3670064	1					
ANR	3670281	CallExpression	strdup ( buffer )		3670064	1					
ANR	3670282	Callee	strdup		3670064	0					
ANR	3670283	Identifier	strdup		3670064	0					
ANR	3670284	ArgumentList	buffer		3670064	1					
ANR	3670285	Argument	buffer		3670064	0					
ANR	3670286	Identifier	buffer		3670064	0					
ANR	3670287	ExpressionStatement	fontlist [ fcnt ] . len = statb . st_size	395:10:9124:9159	3670064	2	True				
ANR	3670288	AssignmentExpression	fontlist [ fcnt ] . len = statb . st_size		3670064	0		=			
ANR	3670289	MemberAccess	fontlist [ fcnt ] . len		3670064	0					
ANR	3670290	ArrayIndexing	fontlist [ fcnt ]		3670064	0					
ANR	3670291	Identifier	fontlist		3670064	0					
ANR	3670292	Identifier	fcnt		3670064	1					
ANR	3670293	Identifier	len		3670064	1					
ANR	3670294	MemberAccess	statb . st_size		3670064	1					
ANR	3670295	Identifier	statb		3670064	0					
ANR	3670296	Identifier	st_size		3670064	1					
ANR	3670297	ExpressionStatement	figurefiletype ( & fontlist [ fcnt ] )	397:10:9172:9205	3670064	3	True				
ANR	3670298	CallExpression	figurefiletype ( & fontlist [ fcnt ] )		3670064	0					
ANR	3670299	Callee	figurefiletype		3670064	0					
ANR	3670300	Identifier	figurefiletype		3670064	0					
ANR	3670301	ArgumentList	& fontlist [ fcnt ]		3670064	1					
ANR	3670302	Argument	& fontlist [ fcnt ]		3670064	0					
ANR	3670303	UnaryOperationExpression	& fontlist [ fcnt ]		3670064	0					
ANR	3670304	UnaryOperator	&		3670064	0					
ANR	3670305	ArrayIndexing	fontlist [ fcnt ]		3670064	1					
ANR	3670306	Identifier	fontlist		3670064	0					
ANR	3670307	Identifier	fcnt		3670064	1					
ANR	3670308	ExpressionStatement	fcnt ++	398:10:9217:9223	3670064	4	True				
ANR	3670309	PostIncDecOperationExpression	fcnt ++		3670064	0					
ANR	3670310	Identifier	fcnt		3670064	0					
ANR	3670311	IncDec	++		3670064	1					
ANR	3670312	ExpressionStatement	closedir ( examples )	402:6:9250:9270	3670064	5	True				
ANR	3670313	CallExpression	closedir ( examples )		3670064	0					
ANR	3670314	Callee	closedir		3670064	0					
ANR	3670315	Identifier	closedir		3670064	0					
ANR	3670316	ArgumentList	examples		3670064	1					
ANR	3670317	Argument	examples		3670064	0					
ANR	3670318	Identifier	examples		3670064	0					
ANR	3670319	IfStatement	if ( fcnt == 0 )		3670064	7					
ANR	3670320	Condition	fcnt == 0	405:9:9288:9296	3670064	0	True				
ANR	3670321	EqualityExpression	fcnt == 0		3670064	0		==			
ANR	3670322	Identifier	fcnt		3670064	0					
ANR	3670323	PrimaryExpression	0		3670064	1					
ANR	3670324	CompoundStatement		57:4:1325:1325	3670064	1					
ANR	3670325	ExpressionStatement	"fprintf ( stderr , ""Can't find matching font files.\\n"" )"	407:6:9312:9366	3670064	0	True				
ANR	3670326	CallExpression	"fprintf ( stderr , ""Can't find matching font files.\\n"" )"		3670064	0					
ANR	3670327	Callee	fprintf		3670064	0					
ANR	3670328	Identifier	fprintf		3670064	0					
ANR	3670329	ArgumentList	stderr		3670064	1					
ANR	3670330	Argument	stderr		3670064	0					
ANR	3670331	Identifier	stderr		3670064	0					
ANR	3670332	Argument	"""Can't find matching font files.\\n"""		3670064	1					
ANR	3670333	PrimaryExpression	"""Can't find matching font files.\\n"""		3670064	0					
ANR	3670334	ExpressionStatement	exit ( 1 )	408:6:9374:9383	3670064	1	True				
ANR	3670335	CallExpression	exit ( 1 )		3670064	0					
ANR	3670336	Callee	exit		3670064	0					
ANR	3670337	Identifier	exit		3670064	0					
ANR	3670338	ArgumentList	1		3670064	1					
ANR	3670339	Argument	1		3670064	0					
ANR	3670340	PrimaryExpression	1		3670064	0					
ANR	3670341	ExpressionStatement	fontlist [ fcnt ] . name = NULL	411:4:9396:9422	3670064	8	True				
ANR	3670342	AssignmentExpression	fontlist [ fcnt ] . name = NULL		3670064	0		=			
ANR	3670343	MemberAccess	fontlist [ fcnt ] . name		3670064	0					
ANR	3670344	ArrayIndexing	fontlist [ fcnt ]		3670064	0					
ANR	3670345	Identifier	fontlist		3670064	0					
ANR	3670346	Identifier	fcnt		3670064	1					
ANR	3670347	Identifier	name		3670064	1					
ANR	3670348	Identifier	NULL		3670064	1					
ANR	3670349	ReturnType	static void		3670064	1					
ANR	3670350	Identifier	FindFonts		3670064	2					
ANR	3670351	ParameterList	"char * * fontdirs , char * * extensions"		3670064	3					
ANR	3670352	Parameter	char * * fontdirs	348:13:7924:7939	3670064	0	True				
ANR	3670353	ParameterType	char * *		3670064	0					
ANR	3670354	Identifier	fontdirs		3670064	1					
ANR	3670355	Parameter	char * * extensions	349:13:7955:7972	3670064	1	True				
ANR	3670356	ParameterType	char * *		3670064	0					
ANR	3670357	Identifier	extensions		3670064	1					
ANR	3670358	CFGEntryNode	ENTRY		3670064		True				
ANR	3670359	CFGExitNode	EXIT		3670064		True				
ANR	3670360	Symbol	statb		3670064						
ANR	3670361	Symbol	& statb		3670064						
ANR	3670362	Symbol	fontdirs		3670064						
ANR	3670363	Symbol	realloc		3670064						
ANR	3670364	Symbol	statb . st_mode		3670064						
ANR	3670365	Symbol	readdir		3670064						
ANR	3670366	Symbol	* fontlist		3670064						
ANR	3670367	Symbol	buffer		3670064						
ANR	3670368	Symbol	ent -> d_name		3670064						
ANR	3670369	Symbol	stat		3670064						
ANR	3670370	Symbol	NULL		3670064						
ANR	3670371	Symbol	max		3670064						
ANR	3670372	Symbol	extmatch		3670064						
ANR	3670373	Symbol	* fontdirs		3670064						
ANR	3670374	Symbol	* fcnt		3670064						
ANR	3670375	Symbol	i		3670064						
ANR	3670376	Symbol	ent		3670064						
ANR	3670377	Symbol	* ent		3670064						
ANR	3670378	Symbol	fontlist [ fcnt ] . name		3670064						
ANR	3670379	Symbol	fcnt		3670064						
ANR	3670380	Symbol	stderr		3670064						
ANR	3670381	Symbol	fontlist [ fcnt ] . len		3670064						
ANR	3670382	Symbol	extensions		3670064						
ANR	3670383	Symbol	* i		3670064						
ANR	3670384	Symbol	examples		3670064						
ANR	3670385	Symbol	statb . st_size		3670064						
ANR	3670386	Symbol	opendir		3670064						
ANR	3670387	Symbol	fontlist		3670064						
ANR	3670388	Symbol	S_ISDIR		3670064						
ANR	3670389	Symbol	strdup		3670064						
ANR	3670390	Function	getErrorCnt	415:2:9432:9639							
ANR	3670391	FunctionDef	getErrorCnt (struct fontlist * item)		3670390	0					
ANR	3670392	CompoundStatement		417:2:9494:9639	3670390	0					
ANR	3670393	IfStatement	if ( error_count == 0 && error_fraction == 0.0 )		3670390	0					
ANR	3670394	Condition	error_count == 0 && error_fraction == 0.0	418:9:9505:9545	3670390	0	True				
ANR	3670395	AndExpression	error_count == 0 && error_fraction == 0.0		3670390	0		&&			
ANR	3670396	EqualityExpression	error_count == 0		3670390	0		==			
ANR	3670397	Identifier	error_count		3670390	0					
ANR	3670398	PrimaryExpression	0		3670390	1					
ANR	3670399	EqualityExpression	error_fraction == 0.0		3670390	1		==			
ANR	3670400	Identifier	error_fraction		3670390	0					
ANR	3670401	PrimaryExpression	0.0		3670390	1					
ANR	3670402	ReturnStatement	return 0 ;	419:6:9555:9563	3670390	1	True				
ANR	3670403	PrimaryExpression	0		3670390	0					
ANR	3670404	ReturnStatement	return error_count + ( unsigned int ) ( error_fraction * item -> len ) ;	421:4:9570:9635	3670390	1	True				
ANR	3670405	AdditiveExpression	error_count + ( unsigned int ) ( error_fraction * item -> len )		3670390	0		+			
ANR	3670406	Identifier	error_count		3670390	0					
ANR	3670407	CastExpression	( unsigned int ) ( error_fraction * item -> len )		3670390	1					
ANR	3670408	CastTarget	unsigned int		3670390	0					
ANR	3670409	MultiplicativeExpression	error_fraction * item -> len		3670390	1		*			
ANR	3670410	Identifier	error_fraction		3670390	0					
ANR	3670411	PtrMemberAccess	item -> len		3670390	1					
ANR	3670412	Identifier	item		3670390	0					
ANR	3670413	Identifier	len		3670390	1					
ANR	3670414	ReturnType	static unsigned int		3670390	1					
ANR	3670415	Identifier	getErrorCnt		3670390	2					
ANR	3670416	ParameterList	struct fontlist * item		3670390	3					
ANR	3670417	Parameter	struct fontlist * item	416:15:9467:9488	3670390	0	True				
ANR	3670418	ParameterType	struct fontlist *		3670390	0					
ANR	3670419	Identifier	item		3670390	1					
ANR	3670420	CFGEntryNode	ENTRY		3670390		True				
ANR	3670421	CFGExitNode	EXIT		3670390		True				
ANR	3670422	Symbol	item		3670390						
ANR	3670423	Symbol	* item		3670390						
ANR	3670424	Symbol	error_count		3670390						
ANR	3670425	Symbol	error_fraction		3670390						
ANR	3670426	Symbol	item -> len		3670390						
ANR	3670427	Function	getRandom	425:2:9645:9859							
ANR	3670428	FunctionDef	"getRandom (int low , int high)"		3670427	0					
ANR	3670429	CompoundStatement		428:2:9706:9859	3670427	0					
ANR	3670430	IfStatement	if ( low - high < 0x10000L )		3670427	0					
ANR	3670431	Condition	low - high < 0x10000L	429:9:9717:9737	3670427	0	True				
ANR	3670432	RelationalExpression	low - high < 0x10000L		3670427	0		<			
ANR	3670433	AdditiveExpression	low - high		3670427	0		-			
ANR	3670434	Identifier	low		3670427	0					
ANR	3670435	Identifier	high		3670427	1					
ANR	3670436	PrimaryExpression	0x10000L		3670427	1					
ANR	3670437	ReturnStatement	return low + ( ( random ( ) >> 8 ) % ( high + 1 - low ) ) ;	430:6:9747:9802	3670427	1	True				
ANR	3670438	AdditiveExpression	low + ( ( random ( ) >> 8 ) % ( high + 1 - low ) )		3670427	0		+			
ANR	3670439	Identifier	low		3670427	0					
ANR	3670440	MultiplicativeExpression	( random ( ) >> 8 ) % ( high + 1 - low )		3670427	1		%			
ANR	3670441	ShiftExpression	random ( ) >> 8		3670427	0		>>			
ANR	3670442	CallExpression	random ( )		3670427	0					
ANR	3670443	Callee	random		3670427	0					
ANR	3670444	Identifier	random		3670427	0					
ANR	3670445	ArgumentList			3670427	1					
ANR	3670446	PrimaryExpression	8		3670427	1					
ANR	3670447	AdditiveExpression	high + 1 - low		3670427	1		+			
ANR	3670448	Identifier	high		3670427	0					
ANR	3670449	AdditiveExpression	1 - low		3670427	1		-			
ANR	3670450	PrimaryExpression	1		3670427	0					
ANR	3670451	Identifier	low		3670427	1					
ANR	3670452	ReturnStatement	return low + ( random ( ) % ( high + 1 - low ) ) ;	432:4:9809:9855	3670427	1	True				
ANR	3670453	AdditiveExpression	low + ( random ( ) % ( high + 1 - low ) )		3670427	0		+			
ANR	3670454	Identifier	low		3670427	0					
ANR	3670455	MultiplicativeExpression	random ( ) % ( high + 1 - low )		3670427	1		%			
ANR	3670456	CallExpression	random ( )		3670427	0					
ANR	3670457	Callee	random		3670427	0					
ANR	3670458	Identifier	random		3670427	0					
ANR	3670459	ArgumentList			3670427	1					
ANR	3670460	AdditiveExpression	high + 1 - low		3670427	1		+			
ANR	3670461	Identifier	high		3670427	0					
ANR	3670462	AdditiveExpression	1 - low		3670427	1		-			
ANR	3670463	PrimaryExpression	1		3670427	0					
ANR	3670464	Identifier	low		3670427	1					
ANR	3670465	ReturnType	static int		3670427	1					
ANR	3670466	Identifier	getRandom		3670427	2					
ANR	3670467	ParameterList	"int low , int high"		3670427	3					
ANR	3670468	Parameter	int low	426:13:9669:9676	3670427	0	True				
ANR	3670469	ParameterType	int		3670427	0					
ANR	3670470	Identifier	low		3670427	1					
ANR	3670471	Parameter	int high	427:13:9692:9700	3670427	1	True				
ANR	3670472	ParameterType	int		3670427	0					
ANR	3670473	Identifier	high		3670427	1					
ANR	3670474	CFGEntryNode	ENTRY		3670427		True				
ANR	3670475	CFGExitNode	EXIT		3670427		True				
ANR	3670476	Symbol	random		3670427						
ANR	3670477	Symbol	high		3670427						
ANR	3670478	Symbol	low		3670427						
ANR	3670479	Function	copyfont	436:2:9865:11163							
ANR	3670480	FunctionDef	"copyfont (struct fontlist * item , char * newfont)"		3670479	0					
ANR	3670481	CompoundStatement		439:2:9954:11163	3670479	0					
ANR	3670482	Statement	static	440:4:9960:9965	3670479	0	True				
ANR	3670483	IdentifierDeclStatement	char buffer [ 8096 ] ;	440:11:9967:9986	3670479	1	True				
ANR	3670484	IdentifierDecl	buffer [ 8096 ]		3670479	0					
ANR	3670485	IdentifierDeclType	char [ 8096 ]		3670479	0					
ANR	3670486	Identifier	buffer		3670479	1					
ANR	3670487	PrimaryExpression	8096		3670479	2					
ANR	3670488	IdentifierDeclStatement	"FILE * good , * newf ;"	441:4:9992:10018	3670479	2	True				
ANR	3670489	IdentifierDecl	* good		3670479	0					
ANR	3670490	IdentifierDeclType	FILE *		3670479	0					
ANR	3670491	Identifier	good		3670479	1					
ANR	3670492	IdentifierDecl	* newf		3670479	1					
ANR	3670493	IdentifierDeclType	FILE *		3670479	0					
ANR	3670494	Identifier	newf		3670479	1					
ANR	3670495	IdentifierDeclStatement	size_t len ;	442:4:10024:10041	3670479	3	True				
ANR	3670496	IdentifierDecl	len		3670479	0					
ANR	3670497	IdentifierDeclType	size_t		3670479	0					
ANR	3670498	Identifier	len		3670479	1					
ANR	3670499	IdentifierDeclStatement	"unsigned int i , err_cnt ;"	443:4:10047:10071	3670479	4	True				
ANR	3670500	IdentifierDecl	i		3670479	0					
ANR	3670501	IdentifierDeclType	unsigned int		3670479	0					
ANR	3670502	Identifier	i		3670479	1					
ANR	3670503	IdentifierDecl	err_cnt		3670479	1					
ANR	3670504	IdentifierDeclType	unsigned int		3670479	0					
ANR	3670505	Identifier	err_cnt		3670479	1					
ANR	3670506	ExpressionStatement	"good = fopen ( item -> name , ""r"" )"	446:4:10079:10110	3670479	5	True				
ANR	3670507	AssignmentExpression	"good = fopen ( item -> name , ""r"" )"		3670479	0		=			
ANR	3670508	Identifier	good		3670479	0					
ANR	3670509	CallExpression	"fopen ( item -> name , ""r"" )"		3670479	1					
ANR	3670510	Callee	fopen		3670479	0					
ANR	3670511	Identifier	fopen		3670479	0					
ANR	3670512	ArgumentList	item -> name		3670479	1					
ANR	3670513	Argument	item -> name		3670479	0					
ANR	3670514	PtrMemberAccess	item -> name		3670479	0					
ANR	3670515	Identifier	item		3670479	0					
ANR	3670516	Identifier	name		3670479	1					
ANR	3670517	Argument	"""r"""		3670479	1					
ANR	3670518	PrimaryExpression	"""r"""		3670479	0					
ANR	3670519	IfStatement	if ( ! good )		3670479	6					
ANR	3670520	Condition	! good	447:9:10121:10125	3670479	0	True				
ANR	3670521	UnaryOperationExpression	! good		3670479	0					
ANR	3670522	UnaryOperator	!		3670479	0					
ANR	3670523	Identifier	good		3670479	1					
ANR	3670524	CompoundStatement		10:4:178:178	3670479	1					
ANR	3670525	ExpressionStatement	"fprintf ( stderr , ""Can't open `%s'\\n"" , item -> name )"	449:6:10141:10191	3670479	0	True				
ANR	3670526	CallExpression	"fprintf ( stderr , ""Can't open `%s'\\n"" , item -> name )"		3670479	0					
ANR	3670527	Callee	fprintf		3670479	0					
ANR	3670528	Identifier	fprintf		3670479	0					
ANR	3670529	ArgumentList	stderr		3670479	1					
ANR	3670530	Argument	stderr		3670479	0					
ANR	3670531	Identifier	stderr		3670479	0					
ANR	3670532	Argument	"""Can't open `%s'\\n"""		3670479	1					
ANR	3670533	PrimaryExpression	"""Can't open `%s'\\n"""		3670479	0					
ANR	3670534	Argument	item -> name		3670479	2					
ANR	3670535	PtrMemberAccess	item -> name		3670479	0					
ANR	3670536	Identifier	item		3670479	0					
ANR	3670537	Identifier	name		3670479	1					
ANR	3670538	ReturnStatement	return false ;	450:6:10199:10211	3670479	1	True				
ANR	3670539	Identifier	false		3670479	0					
ANR	3670540	ExpressionStatement	"newf = fopen ( newfont , ""w+"" )"	453:4:10224:10253	3670479	7	True				
ANR	3670541	AssignmentExpression	"newf = fopen ( newfont , ""w+"" )"		3670479	0		=			
ANR	3670542	Identifier	newf		3670479	0					
ANR	3670543	CallExpression	"fopen ( newfont , ""w+"" )"		3670479	1					
ANR	3670544	Callee	fopen		3670479	0					
ANR	3670545	Identifier	fopen		3670479	0					
ANR	3670546	ArgumentList	newfont		3670479	1					
ANR	3670547	Argument	newfont		3670479	0					
ANR	3670548	Identifier	newfont		3670479	0					
ANR	3670549	Argument	"""w+"""		3670479	1					
ANR	3670550	PrimaryExpression	"""w+"""		3670479	0					
ANR	3670551	IfStatement	if ( ! newf )		3670479	8					
ANR	3670552	Condition	! newf	454:9:10264:10268	3670479	0	True				
ANR	3670553	UnaryOperationExpression	! newf		3670479	0					
ANR	3670554	UnaryOperator	!		3670479	0					
ANR	3670555	Identifier	newf		3670479	1					
ANR	3670556	CompoundStatement		17:4:321:321	3670479	1					
ANR	3670557	ExpressionStatement	"fprintf ( stderr , ""Can't create temporary output file `%s'\\n"" , newfont )"	456:6:10284:10370	3670479	0	True				
ANR	3670558	CallExpression	"fprintf ( stderr , ""Can't create temporary output file `%s'\\n"" , newfont )"		3670479	0					
ANR	3670559	Callee	fprintf		3670479	0					
ANR	3670560	Identifier	fprintf		3670479	0					
ANR	3670561	ArgumentList	stderr		3670479	1					
ANR	3670562	Argument	stderr		3670479	0					
ANR	3670563	Identifier	stderr		3670479	0					
ANR	3670564	Argument	"""Can't create temporary output file `%s'\\n"""		3670479	1					
ANR	3670565	PrimaryExpression	"""Can't create temporary output file `%s'\\n"""		3670479	0					
ANR	3670566	Argument	newfont		3670479	2					
ANR	3670567	Identifier	newfont		3670479	0					
ANR	3670568	ExpressionStatement	exit ( 1 )	458:6:10378:10387	3670479	1	True				
ANR	3670569	CallExpression	exit ( 1 )		3670479	0					
ANR	3670570	Callee	exit		3670479	0					
ANR	3670571	Identifier	exit		3670479	0					
ANR	3670572	ArgumentList	1		3670479	1					
ANR	3670573	Argument	1		3670479	0					
ANR	3670574	PrimaryExpression	1		3670479	0					
ANR	3670575	WhileStatement	"while ( ( len = fread ( buffer , 1 , sizeof ( buffer ) , good ) ) > 0 )"		3670479	9					
ANR	3670576	Condition	"( len = fread ( buffer , 1 , sizeof ( buffer ) , good ) ) > 0"	461:12:10408:10464	3670479	0	True				
ANR	3670577	RelationalExpression	"( len = fread ( buffer , 1 , sizeof ( buffer ) , good ) ) > 0"		3670479	0		>			
ANR	3670578	AssignmentExpression	"len = fread ( buffer , 1 , sizeof ( buffer ) , good )"		3670479	0		=			
ANR	3670579	Identifier	len		3670479	0					
ANR	3670580	CallExpression	"fread ( buffer , 1 , sizeof ( buffer ) , good )"		3670479	1					
ANR	3670581	Callee	fread		3670479	0					
ANR	3670582	Identifier	fread		3670479	0					
ANR	3670583	ArgumentList	buffer		3670479	1					
ANR	3670584	Argument	buffer		3670479	0					
ANR	3670585	Identifier	buffer		3670479	0					
ANR	3670586	Argument	1		3670479	1					
ANR	3670587	PrimaryExpression	1		3670479	0					
ANR	3670588	Argument	sizeof ( buffer )		3670479	2					
ANR	3670589	SizeofExpression	sizeof ( buffer )		3670479	0					
ANR	3670590	Sizeof	sizeof		3670479	0					
ANR	3670591	SizeofOperand	buffer		3670479	1					
ANR	3670592	Argument	good		3670479	3					
ANR	3670593	Identifier	good		3670479	0					
ANR	3670594	PrimaryExpression	0		3670479	1					
ANR	3670595	ExpressionStatement	"fwrite ( buffer , 1 , len , newf )"	462:6:10474:10504	3670479	1	True				
ANR	3670596	CallExpression	"fwrite ( buffer , 1 , len , newf )"		3670479	0					
ANR	3670597	Callee	fwrite		3670479	0					
ANR	3670598	Identifier	fwrite		3670479	0					
ANR	3670599	ArgumentList	buffer		3670479	1					
ANR	3670600	Argument	buffer		3670479	0					
ANR	3670601	Identifier	buffer		3670479	0					
ANR	3670602	Argument	1		3670479	1					
ANR	3670603	PrimaryExpression	1		3670479	0					
ANR	3670604	Argument	len		3670479	2					
ANR	3670605	Identifier	len		3670479	0					
ANR	3670606	Argument	newf		3670479	3					
ANR	3670607	Identifier	newf		3670479	0					
ANR	3670608	ExpressionStatement	fclose ( good )	464:4:10511:10525	3670479	10	True				
ANR	3670609	CallExpression	fclose ( good )		3670479	0					
ANR	3670610	Callee	fclose		3670479	0					
ANR	3670611	Identifier	fclose		3670479	0					
ANR	3670612	ArgumentList	good		3670479	1					
ANR	3670613	Argument	good		3670479	0					
ANR	3670614	Identifier	good		3670479	0					
ANR	3670615	ExpressionStatement	err_cnt = getErrorCnt ( item )	466:4:10532:10561	3670479	11	True				
ANR	3670616	AssignmentExpression	err_cnt = getErrorCnt ( item )		3670479	0		=			
ANR	3670617	Identifier	err_cnt		3670479	0					
ANR	3670618	CallExpression	getErrorCnt ( item )		3670479	1					
ANR	3670619	Callee	getErrorCnt		3670479	0					
ANR	3670620	Identifier	getErrorCnt		3670479	0					
ANR	3670621	ArgumentList	item		3670479	1					
ANR	3670622	Argument	item		3670479	0					
ANR	3670623	Identifier	item		3670479	0					
ANR	3670624	ForStatement	for ( i = 0 ; i < err_cnt ; i ++ )		3670479	12					
ANR	3670625	ForInit	i = 0 ;	467:10:10573:10578	3670479	0	True				
ANR	3670626	AssignmentExpression	i = 0		3670479	0		=			
ANR	3670627	Identifier	i		3670479	0					
ANR	3670628	PrimaryExpression	0		3670479	1					
ANR	3670629	Condition	i < err_cnt	467:17:10580:10590	3670479	1	True				
ANR	3670630	RelationalExpression	i < err_cnt		3670479	0		<			
ANR	3670631	Identifier	i		3670479	0					
ANR	3670632	Identifier	err_cnt		3670479	1					
ANR	3670633	PostIncDecOperationExpression	i ++	467:30:10593:10595	3670479	2	True				
ANR	3670634	Identifier	i		3670479	0					
ANR	3670635	IncDec	++		3670479	1					
ANR	3670636	CompoundStatement		30:4:648:648	3670479	3					
ANR	3670637	ExpressionStatement	"fseek ( newf , getRandom ( 0 , ( int ) ( item -> len - 1 ) ) , SEEK_SET )"	469:6:10611:10674	3670479	0	True				
ANR	3670638	CallExpression	"fseek ( newf , getRandom ( 0 , ( int ) ( item -> len - 1 ) ) , SEEK_SET )"		3670479	0					
ANR	3670639	Callee	fseek		3670479	0					
ANR	3670640	Identifier	fseek		3670479	0					
ANR	3670641	ArgumentList	newf		3670479	1					
ANR	3670642	Argument	newf		3670479	0					
ANR	3670643	Identifier	newf		3670479	0					
ANR	3670644	Argument	"getRandom ( 0 , ( int ) ( item -> len - 1 ) )"		3670479	1					
ANR	3670645	CallExpression	"getRandom ( 0 , ( int ) ( item -> len - 1 ) )"		3670479	0					
ANR	3670646	Callee	getRandom		3670479	0					
ANR	3670647	Identifier	getRandom		3670479	0					
ANR	3670648	ArgumentList	0		3670479	1					
ANR	3670649	Argument	0		3670479	0					
ANR	3670650	PrimaryExpression	0		3670479	0					
ANR	3670651	Argument	( int ) ( item -> len - 1 )		3670479	1					
ANR	3670652	CastExpression	( int ) ( item -> len - 1 )		3670479	0					
ANR	3670653	CastTarget	int		3670479	0					
ANR	3670654	AdditiveExpression	item -> len - 1		3670479	1		-			
ANR	3670655	PtrMemberAccess	item -> len		3670479	0					
ANR	3670656	Identifier	item		3670479	0					
ANR	3670657	Identifier	len		3670479	1					
ANR	3670658	PrimaryExpression	1		3670479	1					
ANR	3670659	Argument	SEEK_SET		3670479	2					
ANR	3670660	Identifier	SEEK_SET		3670479	0					
ANR	3670661	IfStatement	if ( item -> isbinary )		3670479	1					
ANR	3670662	Condition	item -> isbinary	471:11:10688:10701	3670479	0	True				
ANR	3670663	PtrMemberAccess	item -> isbinary		3670479	0					
ANR	3670664	Identifier	item		3670479	0					
ANR	3670665	Identifier	isbinary		3670479	1					
ANR	3670666	ExpressionStatement	"putc ( getRandom ( 0 , 0xFF ) , newf )"	472:8:10713:10747	3670479	1	True				
ANR	3670667	CallExpression	"putc ( getRandom ( 0 , 0xFF ) , newf )"		3670479	0					
ANR	3670668	Callee	putc		3670479	0					
ANR	3670669	Identifier	putc		3670479	0					
ANR	3670670	ArgumentList	"getRandom ( 0 , 0xFF )"		3670479	1					
ANR	3670671	Argument	"getRandom ( 0 , 0xFF )"		3670479	0					
ANR	3670672	CallExpression	"getRandom ( 0 , 0xFF )"		3670479	0					
ANR	3670673	Callee	getRandom		3670479	0					
ANR	3670674	Identifier	getRandom		3670479	0					
ANR	3670675	ArgumentList	0		3670479	1					
ANR	3670676	Argument	0		3670479	0					
ANR	3670677	PrimaryExpression	0		3670479	0					
ANR	3670678	Argument	0xFF		3670479	1					
ANR	3670679	PrimaryExpression	0xFF		3670479	0					
ANR	3670680	Argument	newf		3670479	1					
ANR	3670681	Identifier	newf		3670479	0					
ANR	3670682	ElseStatement	else		3670479	0					
ANR	3670683	IfStatement	if ( item -> isascii )		3670479	0					
ANR	3670684	Condition	item -> isascii	473:16:10765:10777	3670479	0	True				
ANR	3670685	PtrMemberAccess	item -> isascii		3670479	0					
ANR	3670686	Identifier	item		3670479	0					
ANR	3670687	Identifier	isascii		3670479	1					
ANR	3670688	ExpressionStatement	"putc ( getRandom ( 0x20 , 0x7E ) , newf )"	474:8:10789:10826	3670479	1	True				
ANR	3670689	CallExpression	"putc ( getRandom ( 0x20 , 0x7E ) , newf )"		3670479	0					
ANR	3670690	Callee	putc		3670479	0					
ANR	3670691	Identifier	putc		3670479	0					
ANR	3670692	ArgumentList	"getRandom ( 0x20 , 0x7E )"		3670479	1					
ANR	3670693	Argument	"getRandom ( 0x20 , 0x7E )"		3670479	0					
ANR	3670694	CallExpression	"getRandom ( 0x20 , 0x7E )"		3670479	0					
ANR	3670695	Callee	getRandom		3670479	0					
ANR	3670696	Identifier	getRandom		3670479	0					
ANR	3670697	ArgumentList	0x20		3670479	1					
ANR	3670698	Argument	0x20		3670479	0					
ANR	3670699	PrimaryExpression	0x20		3670479	0					
ANR	3670700	Argument	0x7E		3670479	1					
ANR	3670701	PrimaryExpression	0x7E		3670479	0					
ANR	3670702	Argument	newf		3670479	1					
ANR	3670703	Identifier	newf		3670479	0					
ANR	3670704	ElseStatement	else		3670479	0					
ANR	3670705	CompoundStatement		39:8:900:929	3670479	0					
ANR	3670706	IdentifierDeclStatement	"int hex = getRandom ( 0 , 15 ) ;"	477:8:10855:10884	3670479	0	True				
ANR	3670707	IdentifierDecl	"hex = getRandom ( 0 , 15 )"		3670479	0					
ANR	3670708	IdentifierDeclType	int		3670479	0					
ANR	3670709	Identifier	hex		3670479	1					
ANR	3670710	AssignmentExpression	"hex = getRandom ( 0 , 15 )"		3670479	2		=			
ANR	3670711	Identifier	hex		3670479	0					
ANR	3670712	CallExpression	"getRandom ( 0 , 15 )"		3670479	1					
ANR	3670713	Callee	getRandom		3670479	0					
ANR	3670714	Identifier	getRandom		3670479	0					
ANR	3670715	ArgumentList	0		3670479	1					
ANR	3670716	Argument	0		3670479	0					
ANR	3670717	PrimaryExpression	0		3670479	0					
ANR	3670718	Argument	15		3670479	1					
ANR	3670719	PrimaryExpression	15		3670479	0					
ANR	3670720	IfStatement	if ( hex < 10 )		3670479	1					
ANR	3670721	Condition	hex < 10	480:13:10901:10908	3670479	0	True				
ANR	3670722	RelationalExpression	hex < 10		3670479	0		<			
ANR	3670723	Identifier	hex		3670479	0					
ANR	3670724	PrimaryExpression	10		3670479	1					
ANR	3670725	ExpressionStatement	hex += '0'	481:10:10922:10932	3670479	1	True				
ANR	3670726	AssignmentExpression	hex += '0'		3670479	0		+=			
ANR	3670727	Identifier	hex		3670479	0					
ANR	3670728	PrimaryExpression	'0'		3670479	1					
ANR	3670729	ElseStatement	else		3670479	0					
ANR	3670730	ExpressionStatement	hex += 'A' - 10	483:10:10957:10972	3670479	0	True				
ANR	3670731	AssignmentExpression	hex += 'A' - 10		3670479	0		+=			
ANR	3670732	Identifier	hex		3670479	0					
ANR	3670733	AdditiveExpression	'A' - 10		3670479	1		-			
ANR	3670734	PrimaryExpression	'A'		3670479	0					
ANR	3670735	PrimaryExpression	10		3670479	1					
ANR	3670736	ExpressionStatement	"putc ( hex , newf )"	485:8:10983:11000	3670479	2	True				
ANR	3670737	CallExpression	"putc ( hex , newf )"		3670479	0					
ANR	3670738	Callee	putc		3670479	0					
ANR	3670739	Identifier	putc		3670479	0					
ANR	3670740	ArgumentList	hex		3670479	1					
ANR	3670741	Argument	hex		3670479	0					
ANR	3670742	Identifier	hex		3670479	0					
ANR	3670743	Argument	newf		3670479	1					
ANR	3670744	Identifier	newf		3670479	0					
ANR	3670745	IfStatement	if ( ferror ( newf ) )		3670479	13					
ANR	3670746	Condition	ferror ( newf )	489:9:11026:11039	3670479	0	True				
ANR	3670747	CallExpression	ferror ( newf )		3670479	0					
ANR	3670748	Callee	ferror		3670479	0					
ANR	3670749	Identifier	ferror		3670479	0					
ANR	3670750	ArgumentList	newf		3670479	1					
ANR	3670751	Argument	newf		3670479	0					
ANR	3670752	Identifier	newf		3670479	0					
ANR	3670753	CompoundStatement		52:4:1092:1092	3670479	1					
ANR	3670754	ExpressionStatement	fclose ( newf )	491:6:11055:11069	3670479	0	True				
ANR	3670755	CallExpression	fclose ( newf )		3670479	0					
ANR	3670756	Callee	fclose		3670479	0					
ANR	3670757	Identifier	fclose		3670479	0					
ANR	3670758	ArgumentList	newf		3670479	1					
ANR	3670759	Argument	newf		3670479	0					
ANR	3670760	Identifier	newf		3670479	0					
ANR	3670761	ExpressionStatement	unlink ( newfont )	492:6:11077:11094	3670479	1	True				
ANR	3670762	CallExpression	unlink ( newfont )		3670479	0					
ANR	3670763	Callee	unlink		3670479	0					
ANR	3670764	Identifier	unlink		3670479	0					
ANR	3670765	ArgumentList	newfont		3670479	1					
ANR	3670766	Argument	newfont		3670479	0					
ANR	3670767	Identifier	newfont		3670479	0					
ANR	3670768	ReturnStatement	return false ;	493:6:11102:11114	3670479	2	True				
ANR	3670769	Identifier	false		3670479	0					
ANR	3670770	ExpressionStatement	fclose ( newf )	496:4:11127:11141	3670479	14	True				
ANR	3670771	CallExpression	fclose ( newf )		3670479	0					
ANR	3670772	Callee	fclose		3670479	0					
ANR	3670773	Identifier	fclose		3670479	0					
ANR	3670774	ArgumentList	newf		3670479	1					
ANR	3670775	Argument	newf		3670479	0					
ANR	3670776	Identifier	newf		3670479	0					
ANR	3670777	ReturnStatement	return true ;	498:4:11148:11159	3670479	15	True				
ANR	3670778	Identifier	true		3670479	0					
ANR	3670779	ReturnType	static int		3670479	1					
ANR	3670780	Identifier	copyfont		3670479	2					
ANR	3670781	ParameterList	"struct fontlist * item , char * newfont"		3670479	3					
ANR	3670782	Parameter	struct fontlist * item	437:12:9888:9909	3670479	0	True				
ANR	3670783	ParameterType	struct fontlist *		3670479	0					
ANR	3670784	Identifier	item		3670479	1					
ANR	3670785	Parameter	char * newfont	438:12:9924:9948	3670479	1	True				
ANR	3670786	ParameterType	char *		3670479	0					
ANR	3670787	Identifier	newfont		3670479	1					
ANR	3670788	CFGEntryNode	ENTRY		3670479		True				
ANR	3670789	CFGExitNode	EXIT		3670479		True				
ANR	3670790	Symbol	SEEK_SET		3670479						
ANR	3670791	Symbol	fopen		3670479						
ANR	3670792	Symbol	item		3670479						
ANR	3670793	Symbol	getErrorCnt		3670479						
ANR	3670794	Symbol	item -> isascii		3670479						
ANR	3670795	Symbol	false		3670479						
ANR	3670796	Symbol	i		3670479						
ANR	3670797	Symbol	item -> isbinary		3670479						
ANR	3670798	Symbol	newfont		3670479						
ANR	3670799	Symbol	stderr		3670479						
ANR	3670800	Symbol	item -> len		3670479						
ANR	3670801	Symbol	good		3670479						
ANR	3670802	Symbol	fread		3670479						
ANR	3670803	Symbol	ferror		3670479						
ANR	3670804	Symbol	getRandom		3670479						
ANR	3670805	Symbol	len		3670479						
ANR	3670806	Symbol	newf		3670479						
ANR	3670807	Symbol	* item		3670479						
ANR	3670808	Symbol	item -> name		3670479						
ANR	3670809	Symbol	true		3670479						
ANR	3670810	Symbol	hex		3670479						
ANR	3670811	Symbol	buffer		3670479						
ANR	3670812	Symbol	err_cnt		3670479						
ANR	3670813	DeclStmt									
ANR	3670814	Decl							int	int	child_pid
ANR	3670815	Function	abort_test	504:2:11195:11380							
ANR	3670816	FunctionDef	abort_test (int sig)		3670815	0					
ANR	3670817	CompoundStatement		506:2:11234:11380	3670815	0					
ANR	3670818	ExpressionStatement	FT_UNUSED ( sig )	507:4:11240:11256	3670815	0	True				
ANR	3670819	CallExpression	FT_UNUSED ( sig )		3670815	0					
ANR	3670820	Callee	FT_UNUSED		3670815	0					
ANR	3670821	Identifier	FT_UNUSED		3670815	0					
ANR	3670822	ArgumentList	sig		3670815	1					
ANR	3670823	Argument	sig		3670815	0					
ANR	3670824	Identifier	sig		3670815	0					
ANR	3670825	ExpressionStatement	"kill ( child_pid , SIGFPE )"	510:4:11316:11341	3670815	1	True				
ANR	3670826	CallExpression	"kill ( child_pid , SIGFPE )"		3670815	0					
ANR	3670827	Callee	kill		3670815	0					
ANR	3670828	Identifier	kill		3670815	0					
ANR	3670829	ArgumentList	child_pid		3670815	1					
ANR	3670830	Argument	child_pid		3670815	0					
ANR	3670831	Identifier	child_pid		3670815	0					
ANR	3670832	Argument	SIGFPE		3670815	1					
ANR	3670833	Identifier	SIGFPE		3670815	0					
ANR	3670834	ExpressionStatement	"write ( 2 , ""Timeout... "" , 11 )"	511:4:11347:11376	3670815	2	True				
ANR	3670835	CallExpression	"write ( 2 , ""Timeout... "" , 11 )"		3670815	0					
ANR	3670836	Callee	write		3670815	0					
ANR	3670837	Identifier	write		3670815	0					
ANR	3670838	ArgumentList	2		3670815	1					
ANR	3670839	Argument	2		3670815	0					
ANR	3670840	PrimaryExpression	2		3670815	0					
ANR	3670841	Argument	"""Timeout... """		3670815	1					
ANR	3670842	PrimaryExpression	"""Timeout... """		3670815	0					
ANR	3670843	Argument	11		3670815	2					
ANR	3670844	PrimaryExpression	11		3670815	0					
ANR	3670845	ReturnType	static void		3670815	1					
ANR	3670846	Identifier	abort_test		3670815	2					
ANR	3670847	ParameterList	int sig		3670815	3					
ANR	3670848	Parameter	int sig	505:14:11221:11228	3670815	0	True				
ANR	3670849	ParameterType	int		3670815	0					
ANR	3670850	Identifier	sig		3670815	1					
ANR	3670851	CFGEntryNode	ENTRY		3670815		True				
ANR	3670852	CFGExitNode	EXIT		3670815		True				
ANR	3670853	Symbol	sig		3670815						
ANR	3670854	Symbol	child_pid		3670815						
ANR	3670855	Symbol	SIGFPE		3670815						
ANR	3670856	Function	do_test	515:2:11386:12289							
ANR	3670857	FunctionDef	do_test ()		3670856	0					
ANR	3670858	CompoundStatement		517:2:11418:12289	3670856	0					
ANR	3670859	IdentifierDeclStatement	"int i = getRandom ( 0 , ( int ) ( fcnt - 1 ) ) ;"	518:4:11424:11480	3670856	0	True				
ANR	3670860	IdentifierDecl	"i = getRandom ( 0 , ( int ) ( fcnt - 1 ) )"		3670856	0					
ANR	3670861	IdentifierDeclType	int		3670856	0					
ANR	3670862	Identifier	i		3670856	1					
ANR	3670863	AssignmentExpression	"i = getRandom ( 0 , ( int ) ( fcnt - 1 ) )"		3670856	2		=			
ANR	3670864	Identifier	i		3670856	0					
ANR	3670865	CallExpression	"getRandom ( 0 , ( int ) ( fcnt - 1 ) )"		3670856	1					
ANR	3670866	Callee	getRandom		3670856	0					
ANR	3670867	Identifier	getRandom		3670856	0					
ANR	3670868	ArgumentList	0		3670856	1					
ANR	3670869	Argument	0		3670856	0					
ANR	3670870	PrimaryExpression	0		3670856	0					
ANR	3670871	Argument	( int ) ( fcnt - 1 )		3670856	1					
ANR	3670872	CastExpression	( int ) ( fcnt - 1 )		3670856	0					
ANR	3670873	CastTarget	int		3670856	0					
ANR	3670874	AdditiveExpression	fcnt - 1		3670856	1		-			
ANR	3670875	Identifier	fcnt		3670856	0					
ANR	3670876	PrimaryExpression	1		3670856	1					
ANR	3670877	Statement	static	519:4:11486:11491	3670856	1	True				
ANR	3670878	IdentifierDeclStatement	int test_num = 0 ;	519:11:11493:11510	3670856	2	True				
ANR	3670879	IdentifierDecl	test_num = 0		3670856	0					
ANR	3670880	IdentifierDeclType	int		3670856	0					
ANR	3670881	Identifier	test_num		3670856	1					
ANR	3670882	AssignmentExpression	test_num = 0		3670856	2		=			
ANR	3670883	Identifier	test_num		3670856	0					
ANR	3670884	PrimaryExpression	0		3670856	1					
ANR	3670885	IdentifierDeclStatement	char buffer [ 1024 ] ;	520:4:11516:11540	3670856	3	True				
ANR	3670886	IdentifierDecl	buffer [ 1024 ]		3670856	0					
ANR	3670887	IdentifierDeclType	char [ 1024 ]		3670856	0					
ANR	3670888	Identifier	buffer		3670856	1					
ANR	3670889	PrimaryExpression	1024		3670856	2					
ANR	3670890	ExpressionStatement	"sprintf ( buffer , ""%s/test%d"" , results_dir , test_num ++ )"	523:4:11548:11603	3670856	4	True				
ANR	3670891	CallExpression	"sprintf ( buffer , ""%s/test%d"" , results_dir , test_num ++ )"		3670856	0					
ANR	3670892	Callee	sprintf		3670856	0					
ANR	3670893	Identifier	sprintf		3670856	0					
ANR	3670894	ArgumentList	buffer		3670856	1					
ANR	3670895	Argument	buffer		3670856	0					
ANR	3670896	Identifier	buffer		3670856	0					
ANR	3670897	Argument	"""%s/test%d"""		3670856	1					
ANR	3670898	PrimaryExpression	"""%s/test%d"""		3670856	0					
ANR	3670899	Argument	results_dir		3670856	2					
ANR	3670900	Identifier	results_dir		3670856	0					
ANR	3670901	Argument	test_num ++		3670856	3					
ANR	3670902	PostIncDecOperationExpression	test_num ++		3670856	0					
ANR	3670903	Identifier	test_num		3670856	0					
ANR	3670904	IncDec	++		3670856	1					
ANR	3670905	IfStatement	"if ( copyfont ( & fontlist [ i ] , buffer ) )"		3670856	5					
ANR	3670906	Condition	"copyfont ( & fontlist [ i ] , buffer )"	525:9:11615:11647	3670856	0	True				
ANR	3670907	CallExpression	"copyfont ( & fontlist [ i ] , buffer )"		3670856	0					
ANR	3670908	Callee	copyfont		3670856	0					
ANR	3670909	Identifier	copyfont		3670856	0					
ANR	3670910	ArgumentList	& fontlist [ i ]		3670856	1					
ANR	3670911	Argument	& fontlist [ i ]		3670856	0					
ANR	3670912	UnaryOperationExpression	& fontlist [ i ]		3670856	0					
ANR	3670913	UnaryOperator	&		3670856	0					
ANR	3670914	ArrayIndexing	fontlist [ i ]		3670856	1					
ANR	3670915	Identifier	fontlist		3670856	0					
ANR	3670916	Identifier	i		3670856	1					
ANR	3670917	Argument	buffer		3670856	1					
ANR	3670918	Identifier	buffer		3670856	0					
ANR	3670919	CompoundStatement		10:4:236:236	3670856	1					
ANR	3670920	ExpressionStatement	"signal ( SIGALRM , abort_test )"	527:6:11663:11692	3670856	0	True				
ANR	3670921	CallExpression	"signal ( SIGALRM , abort_test )"		3670856	0					
ANR	3670922	Callee	signal		3670856	0					
ANR	3670923	Identifier	signal		3670856	0					
ANR	3670924	ArgumentList	SIGALRM		3670856	1					
ANR	3670925	Argument	SIGALRM		3670856	0					
ANR	3670926	Identifier	SIGALRM		3670856	0					
ANR	3670927	Argument	abort_test		3670856	1					
ANR	3670928	Identifier	abort_test		3670856	0					
ANR	3670929	ExpressionStatement	alarm ( 20 )	530:6:11806:11817	3670856	1	True				
ANR	3670930	CallExpression	alarm ( 20 )		3670856	0					
ANR	3670931	Callee	alarm		3670856	0					
ANR	3670932	Identifier	alarm		3670856	0					
ANR	3670933	ArgumentList	20		3670856	1					
ANR	3670934	Argument	20		3670856	0					
ANR	3670935	PrimaryExpression	20		3670856	0					
ANR	3670936	IfStatement	if ( ( child_pid = fork ( ) ) == 0 )		3670856	2					
ANR	3670937	Condition	( child_pid = fork ( ) ) == 0	531:11:11830:11856	3670856	0	True				
ANR	3670938	EqualityExpression	( child_pid = fork ( ) ) == 0		3670856	0		==			
ANR	3670939	AssignmentExpression	child_pid = fork ( )		3670856	0		=			
ANR	3670940	Identifier	child_pid		3670856	0					
ANR	3670941	CallExpression	fork ( )		3670856	1					
ANR	3670942	Callee	fork		3670856	0					
ANR	3670943	Identifier	fork		3670856	0					
ANR	3670944	ArgumentList			3670856	1					
ANR	3670945	PrimaryExpression	0		3670856	1					
ANR	3670946	ExpressionStatement	ExecuteTest ( buffer )	532:8:11868:11889	3670856	1	True				
ANR	3670947	CallExpression	ExecuteTest ( buffer )		3670856	0					
ANR	3670948	Callee	ExecuteTest		3670856	0					
ANR	3670949	Identifier	ExecuteTest		3670856	0					
ANR	3670950	ArgumentList	buffer		3670856	1					
ANR	3670951	Argument	buffer		3670856	0					
ANR	3670952	Identifier	buffer		3670856	0					
ANR	3670953	ElseStatement	else		3670856	0					
ANR	3670954	IfStatement	if ( child_pid != - 1 )		3670856	0					
ANR	3670955	Condition	child_pid != - 1	533:16:11907:11921	3670856	0	True				
ANR	3670956	EqualityExpression	child_pid != - 1		3670856	0		!=			
ANR	3670957	Identifier	child_pid		3670856	0					
ANR	3670958	UnaryOperationExpression	- 1		3670856	1					
ANR	3670959	UnaryOperator	-		3670856	0					
ANR	3670960	PrimaryExpression	1		3670856	1					
ANR	3670961	CompoundStatement		19:8:522:533	3670856	1					
ANR	3670962	IdentifierDeclStatement	int status ;	535:8:11941:11952	3670856	0	True				
ANR	3670963	IdentifierDecl	status		3670856	0					
ANR	3670964	IdentifierDeclType	int		3670856	0					
ANR	3670965	Identifier	status		3670856	1					
ANR	3670966	ExpressionStatement	"waitpid ( child_pid , & status , 0 )"	538:8:11964:11996	3670856	1	True				
ANR	3670967	CallExpression	"waitpid ( child_pid , & status , 0 )"		3670856	0					
ANR	3670968	Callee	waitpid		3670856	0					
ANR	3670969	Identifier	waitpid		3670856	0					
ANR	3670970	ArgumentList	child_pid		3670856	1					
ANR	3670971	Argument	child_pid		3670856	0					
ANR	3670972	Identifier	child_pid		3670856	0					
ANR	3670973	Argument	& status		3670856	1					
ANR	3670974	UnaryOperationExpression	& status		3670856	0					
ANR	3670975	UnaryOperator	&		3670856	0					
ANR	3670976	Identifier	status		3670856	1					
ANR	3670977	Argument	0		3670856	2					
ANR	3670978	PrimaryExpression	0		3670856	0					
ANR	3670979	ExpressionStatement	alarm ( 0 )	539:8:12006:12016	3670856	2	True				
ANR	3670980	CallExpression	alarm ( 0 )		3670856	0					
ANR	3670981	Callee	alarm		3670856	0					
ANR	3670982	Identifier	alarm		3670856	0					
ANR	3670983	ArgumentList	0		3670856	1					
ANR	3670984	Argument	0		3670856	0					
ANR	3670985	PrimaryExpression	0		3670856	0					
ANR	3670986	IfStatement	if ( WIFSIGNALED ( status ) )		3670856	3					
ANR	3670987	Condition	WIFSIGNALED ( status )	540:13:12031:12052	3670856	0	True				
ANR	3670988	CallExpression	WIFSIGNALED ( status )		3670856	0					
ANR	3670989	Callee	WIFSIGNALED		3670856	0					
ANR	3670990	Identifier	WIFSIGNALED		3670856	0					
ANR	3670991	ArgumentList	status		3670856	1					
ANR	3670992	Argument	status		3670856	0					
ANR	3670993	Identifier	status		3670856	0					
ANR	3670994	ExpressionStatement	"printf ( ""Error found in file `%s'\\n"" , buffer )"	541:10:12066:12112	3670856	1	True				
ANR	3670995	CallExpression	"printf ( ""Error found in file `%s'\\n"" , buffer )"		3670856	0					
ANR	3670996	Callee	printf		3670856	0					
ANR	3670997	Identifier	printf		3670856	0					
ANR	3670998	ArgumentList	"""Error found in file `%s'\\n"""		3670856	1					
ANR	3670999	Argument	"""Error found in file `%s'\\n"""		3670856	0					
ANR	3671000	PrimaryExpression	"""Error found in file `%s'\\n"""		3670856	0					
ANR	3671001	Argument	buffer		3670856	1					
ANR	3671002	Identifier	buffer		3670856	0					
ANR	3671003	ElseStatement	else		3670856	0					
ANR	3671004	ExpressionStatement	unlink ( buffer )	543:10:12137:12153	3670856	0	True				
ANR	3671005	CallExpression	unlink ( buffer )		3670856	0					
ANR	3671006	Callee	unlink		3670856	0					
ANR	3671007	Identifier	unlink		3670856	0					
ANR	3671008	ArgumentList	buffer		3670856	1					
ANR	3671009	Argument	buffer		3670856	0					
ANR	3671010	Identifier	buffer		3670856	0					
ANR	3671011	ElseStatement	else		3670856	0					
ANR	3671012	CompoundStatement		30:6:761:761	3670856	0					
ANR	3671013	ExpressionStatement	"fprintf ( stderr , ""Can't fork test case.\\n"" )"	547:8:12190:12234	3670856	0	True				
ANR	3671014	CallExpression	"fprintf ( stderr , ""Can't fork test case.\\n"" )"		3670856	0					
ANR	3671015	Callee	fprintf		3670856	0					
ANR	3671016	Identifier	fprintf		3670856	0					
ANR	3671017	ArgumentList	stderr		3670856	1					
ANR	3671018	Argument	stderr		3670856	0					
ANR	3671019	Identifier	stderr		3670856	0					
ANR	3671020	Argument	"""Can't fork test case.\\n"""		3670856	1					
ANR	3671021	PrimaryExpression	"""Can't fork test case.\\n"""		3670856	0					
ANR	3671022	ExpressionStatement	exit ( 1 )	548:8:12244:12253	3670856	1	True				
ANR	3671023	CallExpression	exit ( 1 )		3670856	0					
ANR	3671024	Callee	exit		3670856	0					
ANR	3671025	Identifier	exit		3670856	0					
ANR	3671026	ArgumentList	1		3670856	1					
ANR	3671027	Argument	1		3670856	0					
ANR	3671028	PrimaryExpression	1		3670856	0					
ANR	3671029	ExpressionStatement	alarm ( 0 )	550:6:12269:12279	3670856	3	True				
ANR	3671030	CallExpression	alarm ( 0 )		3670856	0					
ANR	3671031	Callee	alarm		3670856	0					
ANR	3671032	Identifier	alarm		3670856	0					
ANR	3671033	ArgumentList	0		3670856	1					
ANR	3671034	Argument	0		3670856	0					
ANR	3671035	PrimaryExpression	0		3670856	0					
ANR	3671036	ReturnType	static void		3670856	1					
ANR	3671037	Identifier	do_test		3670856	2					
ANR	3671038	ParameterList			3670856	3					
ANR	3671039	CFGEntryNode	ENTRY		3670856		True				
ANR	3671040	CFGExitNode	EXIT		3670856		True				
ANR	3671041	Symbol	WIFSIGNALED		3670856						
ANR	3671042	Symbol	i		3670856						
ANR	3671043	Symbol	results_dir		3670856						
ANR	3671044	Symbol	SIGALRM		3670856						
ANR	3671045	Symbol	fcnt		3670856						
ANR	3671046	Symbol	stderr		3670856						
ANR	3671047	Symbol	& status		3670856						
ANR	3671048	Symbol	child_pid		3670856						
ANR	3671049	Symbol	fork		3670856						
ANR	3671050	Symbol	getRandom		3670856						
ANR	3671051	Symbol	test_num		3670856						
ANR	3671052	Symbol	abort_test		3670856						
ANR	3671053	Symbol	fontlist		3670856						
ANR	3671054	Symbol	buffer		3670856						
ANR	3671055	Symbol	copyfont		3670856						
ANR	3671056	Symbol	status		3670856						
ANR	3671057	Function	usage	555:2:12295:14302							
ANR	3671058	FunctionDef	"usage (FILE * out , char * name)"		3671057	0					
ANR	3671059	CompoundStatement		558:2:12353:14302	3671057	0					
ANR	3671060	IdentifierDeclStatement	char * * d = default_dir_list ;	559:4:12359:12387	3671057	0	True				
ANR	3671061	IdentifierDecl	* * d = default_dir_list		3671057	0					
ANR	3671062	IdentifierDeclType	char * *		3671057	0					
ANR	3671063	Identifier	d		3671057	1					
ANR	3671064	AssignmentExpression	* * d = default_dir_list		3671057	2		=			
ANR	3671065	Identifier	default_dir_list		3671057	0					
ANR	3671066	Identifier	default_dir_list		3671057	1					
ANR	3671067	IdentifierDeclStatement	char * * e = default_ext_list ;	560:4:12393:12421	3671057	1	True				
ANR	3671068	IdentifierDecl	* * e = default_ext_list		3671057	0					
ANR	3671069	IdentifierDeclType	char * *		3671057	0					
ANR	3671070	Identifier	e		3671057	1					
ANR	3671071	AssignmentExpression	* * e = default_ext_list		3671057	2		=			
ANR	3671072	Identifier	default_ext_list		3671057	0					
ANR	3671073	Identifier	default_ext_list		3671057	1					
ANR	3671074	Statement	fprintf	563:4:12429:12435	3671057	2	True				
ANR	3671075	Statement	(	563:11:12436:12436	3671057	3	True				
ANR	3671076	Statement	out	563:13:12438:12440	3671057	4	True				
ANR	3671077	Statement	","	563:16:12441:12441	3671057	5	True				
ANR	3671078	Statement	"""%s [options] -- Generate random erroneous fonts\\n"""	563:18:12443:12493	3671057	6	True				
ANR	3671079	Statement	"""  and attempt to parse them with FreeType.\\n\\n"""	564:18:12513:12560	3671057	7	True				
ANR	3671080	Statement	","	564:66:12561:12561	3671057	8	True				
ANR	3671081	Statement	name	564:68:12563:12566	3671057	9	True				
ANR	3671082	Statement	)	564:73:12568:12568	3671057	10	True				
ANR	3671083	ExpressionStatement		564:74:12569:12569	3671057	11	True				
ANR	3671084	ExpressionStatement	"fprintf ( out , ""  --all                    All non-directory files are assumed to be fonts.\\n"" )"	566:4:12576:12671	3671057	12	True				
ANR	3671085	CallExpression	"fprintf ( out , ""  --all                    All non-directory files are assumed to be fonts.\\n"" )"		3671057	0					
ANR	3671086	Callee	fprintf		3671057	0					
ANR	3671087	Identifier	fprintf		3671057	0					
ANR	3671088	ArgumentList	out		3671057	1					
ANR	3671089	Argument	out		3671057	0					
ANR	3671090	Identifier	out		3671057	0					
ANR	3671091	Argument	"""  --all                    All non-directory files are assumed to be fonts.\\n"""		3671057	1					
ANR	3671092	PrimaryExpression	"""  --all                    All non-directory files are assumed to be fonts.\\n"""		3671057	0					
ANR	3671093	ExpressionStatement	"fprintf ( out , ""  --check-outlines         Make sure we can parse the outlines of each glyph.\\n"" )"	567:4:12677:12774	3671057	13	True				
ANR	3671094	CallExpression	"fprintf ( out , ""  --check-outlines         Make sure we can parse the outlines of each glyph.\\n"" )"		3671057	0					
ANR	3671095	Callee	fprintf		3671057	0					
ANR	3671096	Identifier	fprintf		3671057	0					
ANR	3671097	ArgumentList	out		3671057	1					
ANR	3671098	Argument	out		3671057	0					
ANR	3671099	Identifier	out		3671057	0					
ANR	3671100	Argument	"""  --check-outlines         Make sure we can parse the outlines of each glyph.\\n"""		3671057	1					
ANR	3671101	PrimaryExpression	"""  --check-outlines         Make sure we can parse the outlines of each glyph.\\n"""		3671057	0					
ANR	3671102	Statement	fprintf	568:4:12780:12786	3671057	14	True				
ANR	3671103	Statement	(	568:11:12787:12787	3671057	15	True				
ANR	3671104	Statement	out	568:13:12789:12791	3671057	16	True				
ANR	3671105	Statement	","	568:16:12792:12792	3671057	17	True				
ANR	3671106	Statement	"""  --dir <path>             Append <path> to list of font search directories\\n"""	568:18:12794:12872	3671057	18	True				
ANR	3671107	Statement	"""                           (no recursive search).\\n"""	569:18:12892:12944	3671057	19	True				
ANR	3671108	Statement	)	569:72:12946:12946	3671057	20	True				
ANR	3671109	ExpressionStatement		569:73:12947:12947	3671057	21	True				
ANR	3671110	Statement	fprintf	570:4:12953:12959	3671057	22	True				
ANR	3671111	Statement	(	570:11:12960:12960	3671057	23	True				
ANR	3671112	Statement	out	570:13:12962:12964	3671057	24	True				
ANR	3671113	Statement	","	570:16:12965:12965	3671057	25	True				
ANR	3671114	Statement	"""  --error-count <cnt>      Introduce <cnt> single byte errors into each font\\n"""	570:18:12967:13046	3671057	26	True				
ANR	3671115	Statement	"""                           (default: 1)\\n"""	571:18:13066:13108	3671057	27	True				
ANR	3671116	Statement	)	571:62:13110:13110	3671057	28	True				
ANR	3671117	ExpressionStatement		571:63:13111:13111	3671057	29	True				
ANR	3671118	Statement	fprintf	572:4:13117:13123	3671057	30	True				
ANR	3671119	Statement	(	572:11:13124:13124	3671057	31	True				
ANR	3671120	Statement	out	572:13:13126:13128	3671057	32	True				
ANR	3671121	Statement	","	572:16:13129:13129	3671057	33	True				
ANR	3671122	Statement	"""  --error-fraction <frac>  Introduce <frac>*filesize single byte errors\\n"""	572:18:13131:13205	3671057	34	True				
ANR	3671123	Statement	"""                           into each font (default: 0.0).\\n"""	573:18:13225:13285	3671057	35	True				
ANR	3671124	Statement	)	573:80:13287:13287	3671057	36	True				
ANR	3671125	ExpressionStatement		573:81:13288:13288	3671057	37	True				
ANR	3671126	ExpressionStatement	"fprintf ( out , ""  --ext <ext>              Add <ext> to list of extensions indicating fonts.\\n"" )"	574:4:13294:13390	3671057	38	True				
ANR	3671127	CallExpression	"fprintf ( out , ""  --ext <ext>              Add <ext> to list of extensions indicating fonts.\\n"" )"		3671057	0					
ANR	3671128	Callee	fprintf		3671057	0					
ANR	3671129	Identifier	fprintf		3671057	0					
ANR	3671130	ArgumentList	out		3671057	1					
ANR	3671131	Argument	out		3671057	0					
ANR	3671132	Identifier	out		3671057	0					
ANR	3671133	Argument	"""  --ext <ext>              Add <ext> to list of extensions indicating fonts.\\n"""		3671057	1					
ANR	3671134	PrimaryExpression	"""  --ext <ext>              Add <ext> to list of extensions indicating fonts.\\n"""		3671057	0					
ANR	3671135	ExpressionStatement	"fprintf ( out , ""  --help                   Print this.\\n"" )"	575:4:13396:13454	3671057	39	True				
ANR	3671136	CallExpression	"fprintf ( out , ""  --help                   Print this.\\n"" )"		3671057	0					
ANR	3671137	Callee	fprintf		3671057	0					
ANR	3671138	Identifier	fprintf		3671057	0					
ANR	3671139	ArgumentList	out		3671057	1					
ANR	3671140	Argument	out		3671057	0					
ANR	3671141	Identifier	out		3671057	0					
ANR	3671142	Argument	"""  --help                   Print this.\\n"""		3671057	1					
ANR	3671143	PrimaryExpression	"""  --help                   Print this.\\n"""		3671057	0					
ANR	3671144	ExpressionStatement	"fprintf ( out , ""  --nohints                Turn off hinting.\\n"" )"	576:4:13460:13524	3671057	40	True				
ANR	3671145	CallExpression	"fprintf ( out , ""  --nohints                Turn off hinting.\\n"" )"		3671057	0					
ANR	3671146	Callee	fprintf		3671057	0					
ANR	3671147	Identifier	fprintf		3671057	0					
ANR	3671148	ArgumentList	out		3671057	1					
ANR	3671149	Argument	out		3671057	0					
ANR	3671150	Identifier	out		3671057	0					
ANR	3671151	Argument	"""  --nohints                Turn off hinting.\\n"""		3671057	1					
ANR	3671152	PrimaryExpression	"""  --nohints                Turn off hinting.\\n"""		3671057	0					
ANR	3671153	ExpressionStatement	"fprintf ( out , ""  --rasterize              Attempt to rasterize each glyph.\\n"" )"	577:4:13530:13609	3671057	41	True				
ANR	3671154	CallExpression	"fprintf ( out , ""  --rasterize              Attempt to rasterize each glyph.\\n"" )"		3671057	0					
ANR	3671155	Callee	fprintf		3671057	0					
ANR	3671156	Identifier	fprintf		3671057	0					
ANR	3671157	ArgumentList	out		3671057	1					
ANR	3671158	Argument	out		3671057	0					
ANR	3671159	Identifier	out		3671057	0					
ANR	3671160	Argument	"""  --rasterize              Attempt to rasterize each glyph.\\n"""		3671057	1					
ANR	3671161	PrimaryExpression	"""  --rasterize              Attempt to rasterize each glyph.\\n"""		3671057	0					
ANR	3671162	Statement	fprintf	578:4:13615:13621	3671057	42	True				
ANR	3671163	Statement	(	578:11:13622:13622	3671057	43	True				
ANR	3671164	Statement	out	578:13:13624:13626	3671057	44	True				
ANR	3671165	Statement	","	578:16:13627:13627	3671057	45	True				
ANR	3671166	Statement	"""  --results <path>         Place the created test fonts into <path>\\n"""	578:18:13629:13699	3671057	46	True				
ANR	3671167	Statement	"""                           (default: `results')\\n"""	579:18:13719:13769	3671057	47	True				
ANR	3671168	Statement	)	579:70:13771:13771	3671057	48	True				
ANR	3671169	ExpressionStatement		579:71:13772:13772	3671057	49	True				
ANR	3671170	ExpressionStatement	"fprintf ( out , ""  --size <float>           Use the given font size for the tests.\\n"" )"	580:4:13778:13863	3671057	50	True				
ANR	3671171	CallExpression	"fprintf ( out , ""  --size <float>           Use the given font size for the tests.\\n"" )"		3671057	0					
ANR	3671172	Callee	fprintf		3671057	0					
ANR	3671173	Identifier	fprintf		3671057	0					
ANR	3671174	ArgumentList	out		3671057	1					
ANR	3671175	Argument	out		3671057	0					
ANR	3671176	Identifier	out		3671057	0					
ANR	3671177	Argument	"""  --size <float>           Use the given font size for the tests.\\n"""		3671057	1					
ANR	3671178	PrimaryExpression	"""  --size <float>           Use the given font size for the tests.\\n"""		3671057	0					
ANR	3671179	ExpressionStatement	"fprintf ( out , ""  --test <file>            Run a single test on an already existing file.\\n"" )"	581:4:13869:13962	3671057	51	True				
ANR	3671180	CallExpression	"fprintf ( out , ""  --test <file>            Run a single test on an already existing file.\\n"" )"		3671057	0					
ANR	3671181	Callee	fprintf		3671057	0					
ANR	3671182	Identifier	fprintf		3671057	0					
ANR	3671183	ArgumentList	out		3671057	1					
ANR	3671184	Argument	out		3671057	0					
ANR	3671185	Identifier	out		3671057	0					
ANR	3671186	Argument	"""  --test <file>            Run a single test on an already existing file.\\n"""		3671057	1					
ANR	3671187	PrimaryExpression	"""  --test <file>            Run a single test on an already existing file.\\n"""		3671057	0					
ANR	3671188	ExpressionStatement	"fprintf ( out , ""\\n"" )"	582:4:13968:13988	3671057	52	True				
ANR	3671189	CallExpression	"fprintf ( out , ""\\n"" )"		3671057	0					
ANR	3671190	Callee	fprintf		3671057	0					
ANR	3671191	Identifier	fprintf		3671057	0					
ANR	3671192	ArgumentList	out		3671057	1					
ANR	3671193	Argument	out		3671057	0					
ANR	3671194	Identifier	out		3671057	0					
ANR	3671195	Argument	"""\\n"""		3671057	1					
ANR	3671196	PrimaryExpression	"""\\n"""		3671057	0					
ANR	3671197	ExpressionStatement	"fprintf ( out , ""Default font extensions:\\n"" )"	584:4:13995:14039	3671057	53	True				
ANR	3671198	CallExpression	"fprintf ( out , ""Default font extensions:\\n"" )"		3671057	0					
ANR	3671199	Callee	fprintf		3671057	0					
ANR	3671200	Identifier	fprintf		3671057	0					
ANR	3671201	ArgumentList	out		3671057	1					
ANR	3671202	Argument	out		3671057	0					
ANR	3671203	Identifier	out		3671057	0					
ANR	3671204	Argument	"""Default font extensions:\\n"""		3671057	1					
ANR	3671205	PrimaryExpression	"""Default font extensions:\\n"""		3671057	0					
ANR	3671206	ExpressionStatement	"fprintf ( out , "" "" )"	585:4:14045:14064	3671057	54	True				
ANR	3671207	CallExpression	"fprintf ( out , "" "" )"		3671057	0					
ANR	3671208	Callee	fprintf		3671057	0					
ANR	3671209	Identifier	fprintf		3671057	0					
ANR	3671210	ArgumentList	out		3671057	1					
ANR	3671211	Argument	out		3671057	0					
ANR	3671212	Identifier	out		3671057	0					
ANR	3671213	Argument	""" """		3671057	1					
ANR	3671214	PrimaryExpression	""" """		3671057	0					
ANR	3671215	WhileStatement	while ( * e )		3671057	55					
ANR	3671216	Condition	* e	586:12:14078:14079	3671057	0	True				
ANR	3671217	UnaryOperationExpression	* e		3671057	0					
ANR	3671218	UnaryOperator	*		3671057	0					
ANR	3671219	Identifier	e		3671057	1					
ANR	3671220	ExpressionStatement	"fprintf ( out , "" .%s"" , * e ++ )"	587:6:14089:14117	3671057	1	True				
ANR	3671221	CallExpression	"fprintf ( out , "" .%s"" , * e ++ )"		3671057	0					
ANR	3671222	Callee	fprintf		3671057	0					
ANR	3671223	Identifier	fprintf		3671057	0					
ANR	3671224	ArgumentList	out		3671057	1					
ANR	3671225	Argument	out		3671057	0					
ANR	3671226	Identifier	out		3671057	0					
ANR	3671227	Argument	""" .%s"""		3671057	1					
ANR	3671228	PrimaryExpression	""" .%s"""		3671057	0					
ANR	3671229	Argument	* e ++		3671057	2					
ANR	3671230	UnaryOperationExpression	* e ++		3671057	0					
ANR	3671231	UnaryOperator	*		3671057	0					
ANR	3671232	PostIncDecOperationExpression	e ++		3671057	1					
ANR	3671233	Identifier	e		3671057	0					
ANR	3671234	IncDec	++		3671057	1					
ANR	3671235	ExpressionStatement	"fprintf ( out , ""\\n"" )"	588:4:14123:14143	3671057	56	True				
ANR	3671236	CallExpression	"fprintf ( out , ""\\n"" )"		3671057	0					
ANR	3671237	Callee	fprintf		3671057	0					
ANR	3671238	Identifier	fprintf		3671057	0					
ANR	3671239	ArgumentList	out		3671057	1					
ANR	3671240	Argument	out		3671057	0					
ANR	3671241	Identifier	out		3671057	0					
ANR	3671242	Argument	"""\\n"""		3671057	1					
ANR	3671243	PrimaryExpression	"""\\n"""		3671057	0					
ANR	3671244	ExpressionStatement	"fprintf ( out , ""Default font directories:\\n"" )"	590:4:14150:14195	3671057	57	True				
ANR	3671245	CallExpression	"fprintf ( out , ""Default font directories:\\n"" )"		3671057	0					
ANR	3671246	Callee	fprintf		3671057	0					
ANR	3671247	Identifier	fprintf		3671057	0					
ANR	3671248	ArgumentList	out		3671057	1					
ANR	3671249	Argument	out		3671057	0					
ANR	3671250	Identifier	out		3671057	0					
ANR	3671251	Argument	"""Default font directories:\\n"""		3671057	1					
ANR	3671252	PrimaryExpression	"""Default font directories:\\n"""		3671057	0					
ANR	3671253	ExpressionStatement	"fprintf ( out , "" "" )"	591:4:14201:14220	3671057	58	True				
ANR	3671254	CallExpression	"fprintf ( out , "" "" )"		3671057	0					
ANR	3671255	Callee	fprintf		3671057	0					
ANR	3671256	Identifier	fprintf		3671057	0					
ANR	3671257	ArgumentList	out		3671057	1					
ANR	3671258	Argument	out		3671057	0					
ANR	3671259	Identifier	out		3671057	0					
ANR	3671260	Argument	""" """		3671057	1					
ANR	3671261	PrimaryExpression	""" """		3671057	0					
ANR	3671262	WhileStatement	while ( * d )		3671057	59					
ANR	3671263	Condition	* d	592:12:14234:14235	3671057	0	True				
ANR	3671264	UnaryOperationExpression	* d		3671057	0					
ANR	3671265	UnaryOperator	*		3671057	0					
ANR	3671266	Identifier	d		3671057	1					
ANR	3671267	ExpressionStatement	"fprintf ( out , "" %s"" , * d ++ )"	593:6:14245:14272	3671057	1	True				
ANR	3671268	CallExpression	"fprintf ( out , "" %s"" , * d ++ )"		3671057	0					
ANR	3671269	Callee	fprintf		3671057	0					
ANR	3671270	Identifier	fprintf		3671057	0					
ANR	3671271	ArgumentList	out		3671057	1					
ANR	3671272	Argument	out		3671057	0					
ANR	3671273	Identifier	out		3671057	0					
ANR	3671274	Argument	""" %s"""		3671057	1					
ANR	3671275	PrimaryExpression	""" %s"""		3671057	0					
ANR	3671276	Argument	* d ++		3671057	2					
ANR	3671277	UnaryOperationExpression	* d ++		3671057	0					
ANR	3671278	UnaryOperator	*		3671057	0					
ANR	3671279	PostIncDecOperationExpression	d ++		3671057	1					
ANR	3671280	Identifier	d		3671057	0					
ANR	3671281	IncDec	++		3671057	1					
ANR	3671282	ExpressionStatement	"fprintf ( out , ""\\n"" )"	594:4:14278:14298	3671057	60	True				
ANR	3671283	CallExpression	"fprintf ( out , ""\\n"" )"		3671057	0					
ANR	3671284	Callee	fprintf		3671057	0					
ANR	3671285	Identifier	fprintf		3671057	0					
ANR	3671286	ArgumentList	out		3671057	1					
ANR	3671287	Argument	out		3671057	0					
ANR	3671288	Identifier	out		3671057	0					
ANR	3671289	Argument	"""\\n"""		3671057	1					
ANR	3671290	PrimaryExpression	"""\\n"""		3671057	0					
ANR	3671291	ReturnType	static void		3671057	1					
ANR	3671292	Identifier	usage		3671057	2					
ANR	3671293	ParameterList	"FILE * out , char * name"		3671057	3					
ANR	3671294	Parameter	FILE * out	556:9:12316:12325	3671057	0	True				
ANR	3671295	ParameterType	FILE *		3671057	0					
ANR	3671296	Identifier	out		3671057	1					
ANR	3671297	Parameter	char * name	557:9:12337:12347	3671057	1	True				
ANR	3671298	ParameterType	char *		3671057	0					
ANR	3671299	Identifier	name		3671057	1					
ANR	3671300	CFGEntryNode	ENTRY		3671057		True				
ANR	3671301	CFGExitNode	EXIT		3671057		True				
ANR	3671302	Symbol	default_ext_list		3671057						
ANR	3671303	Symbol	d		3671057						
ANR	3671304	Symbol	e		3671057						
ANR	3671305	Symbol	name		3671057						
ANR	3671306	Symbol	* e ++		3671057						
ANR	3671307	Symbol	* d		3671057						
ANR	3671308	Symbol	* d ++		3671057						
ANR	3671309	Symbol	out		3671057						
ANR	3671310	Symbol	default_dir_list		3671057						
ANR	3671311	Symbol	* e		3671057						
ANR	3671312	Function	main	598:2:14308:17240							
ANR	3671313	FunctionDef	"main (int argc , char * * argv)"		3671312	0					
ANR	3671314	CompoundStatement		601:2:14359:17240	3671312	0					
ANR	3671315	IdentifierDeclStatement	"char * * dirs , * * exts ;"	602:4:14365:14387	3671312	0	True				
ANR	3671316	IdentifierDecl	* * dirs		3671312	0					
ANR	3671317	IdentifierDeclType	char * *		3671312	0					
ANR	3671318	Identifier	dirs		3671312	1					
ANR	3671319	IdentifierDecl	* * exts		3671312	1					
ANR	3671320	IdentifierDeclType	char * *		3671312	0					
ANR	3671321	Identifier	exts		3671312	1					
ANR	3671322	IdentifierDeclStatement	"int dcnt = 0 , ecnt = 0 , rset = false , allexts = false ;"	603:4:14393:14450	3671312	1	True				
ANR	3671323	IdentifierDecl	dcnt = 0		3671312	0					
ANR	3671324	IdentifierDeclType	int		3671312	0					
ANR	3671325	Identifier	dcnt		3671312	1					
ANR	3671326	AssignmentExpression	dcnt = 0		3671312	2		=			
ANR	3671327	Identifier	dcnt		3671312	0					
ANR	3671328	PrimaryExpression	0		3671312	1					
ANR	3671329	IdentifierDecl	ecnt = 0		3671312	1					
ANR	3671330	IdentifierDeclType	int		3671312	0					
ANR	3671331	Identifier	ecnt		3671312	1					
ANR	3671332	AssignmentExpression	ecnt = 0		3671312	2		=			
ANR	3671333	Identifier	ecnt		3671312	0					
ANR	3671334	PrimaryExpression	0		3671312	1					
ANR	3671335	IdentifierDecl	rset = false		3671312	2					
ANR	3671336	IdentifierDeclType	int		3671312	0					
ANR	3671337	Identifier	rset		3671312	1					
ANR	3671338	AssignmentExpression	rset = false		3671312	2		=			
ANR	3671339	Identifier	false		3671312	0					
ANR	3671340	Identifier	false		3671312	1					
ANR	3671341	IdentifierDecl	allexts = false		3671312	3					
ANR	3671342	IdentifierDeclType	int		3671312	0					
ANR	3671343	Identifier	allexts		3671312	1					
ANR	3671344	AssignmentExpression	allexts = false		3671312	2		=			
ANR	3671345	Identifier	false		3671312	0					
ANR	3671346	Identifier	false		3671312	1					
ANR	3671347	IdentifierDeclStatement	int i ;	604:4:14456:14465	3671312	2	True				
ANR	3671348	IdentifierDecl	i		3671312	0					
ANR	3671349	IdentifierDeclType	int		3671312	0					
ANR	3671350	Identifier	i		3671312	1					
ANR	3671351	IdentifierDeclStatement	time_t now ;	605:4:14471:14482	3671312	3	True				
ANR	3671352	IdentifierDecl	now		3671312	0					
ANR	3671353	IdentifierDeclType	time_t		3671312	0					
ANR	3671354	Identifier	now		3671312	1					
ANR	3671355	IdentifierDeclStatement	char * testfile = NULL ;	606:4:14488:14511	3671312	4	True				
ANR	3671356	IdentifierDecl	* testfile = NULL		3671312	0					
ANR	3671357	IdentifierDeclType	char *		3671312	0					
ANR	3671358	Identifier	testfile		3671312	1					
ANR	3671359	AssignmentExpression	* testfile = NULL		3671312	2		=			
ANR	3671360	Identifier	NULL		3671312	0					
ANR	3671361	Identifier	NULL		3671312	1					
ANR	3671362	ExpressionStatement	"dirs = calloc ( ( size_t ) ( argc + 1 ) , sizeof ( char * * ) )"	609:4:14519:14576	3671312	5	True				
ANR	3671363	AssignmentExpression	"dirs = calloc ( ( size_t ) ( argc + 1 ) , sizeof ( char * * ) )"		3671312	0		=			
ANR	3671364	Identifier	dirs		3671312	0					
ANR	3671365	CallExpression	"calloc ( ( size_t ) ( argc + 1 ) , sizeof ( char * * ) )"		3671312	1					
ANR	3671366	Callee	calloc		3671312	0					
ANR	3671367	Identifier	calloc		3671312	0					
ANR	3671368	ArgumentList	( size_t ) ( argc + 1 )		3671312	1					
ANR	3671369	Argument	( size_t ) ( argc + 1 )		3671312	0					
ANR	3671370	CastExpression	( size_t ) ( argc + 1 )		3671312	0					
ANR	3671371	CastTarget	size_t		3671312	0					
ANR	3671372	AdditiveExpression	argc + 1		3671312	1		+			
ANR	3671373	Identifier	argc		3671312	0					
ANR	3671374	PrimaryExpression	1		3671312	1					
ANR	3671375	Argument	sizeof ( char * * )		3671312	1					
ANR	3671376	SizeofExpression	sizeof ( char * * )		3671312	0					
ANR	3671377	Sizeof	sizeof		3671312	0					
ANR	3671378	SizeofOperand	char * *		3671312	1					
ANR	3671379	ExpressionStatement	"exts = calloc ( ( size_t ) ( argc + 1 ) , sizeof ( char * * ) )"	610:4:14582:14639	3671312	6	True				
ANR	3671380	AssignmentExpression	"exts = calloc ( ( size_t ) ( argc + 1 ) , sizeof ( char * * ) )"		3671312	0		=			
ANR	3671381	Identifier	exts		3671312	0					
ANR	3671382	CallExpression	"calloc ( ( size_t ) ( argc + 1 ) , sizeof ( char * * ) )"		3671312	1					
ANR	3671383	Callee	calloc		3671312	0					
ANR	3671384	Identifier	calloc		3671312	0					
ANR	3671385	ArgumentList	( size_t ) ( argc + 1 )		3671312	1					
ANR	3671386	Argument	( size_t ) ( argc + 1 )		3671312	0					
ANR	3671387	CastExpression	( size_t ) ( argc + 1 )		3671312	0					
ANR	3671388	CastTarget	size_t		3671312	0					
ANR	3671389	AdditiveExpression	argc + 1		3671312	1		+			
ANR	3671390	Identifier	argc		3671312	0					
ANR	3671391	PrimaryExpression	1		3671312	1					
ANR	3671392	Argument	sizeof ( char * * )		3671312	1					
ANR	3671393	SizeofExpression	sizeof ( char * * )		3671312	0					
ANR	3671394	Sizeof	sizeof		3671312	0					
ANR	3671395	SizeofOperand	char * *		3671312	1					
ANR	3671396	ForStatement	for ( i = 1 ; i < argc ; i ++ )		3671312	7					
ANR	3671397	ForInit	i = 1 ;	612:10:14652:14657	3671312	0	True				
ANR	3671398	AssignmentExpression	i = 1		3671312	0		=			
ANR	3671399	Identifier	i		3671312	0					
ANR	3671400	PrimaryExpression	1		3671312	1					
ANR	3671401	Condition	i < argc	612:17:14659:14666	3671312	1	True				
ANR	3671402	RelationalExpression	i < argc		3671312	0		<			
ANR	3671403	Identifier	i		3671312	0					
ANR	3671404	Identifier	argc		3671312	1					
ANR	3671405	PostIncDecOperationExpression	i ++	612:27:14669:14671	3671312	2	True				
ANR	3671406	Identifier	i		3671312	0					
ANR	3671407	IncDec	++		3671312	1					
ANR	3671408	CompoundStatement		15:6:354:364	3671312	3					
ANR	3671409	IdentifierDeclStatement	char * pt = argv [ i ] ;	614:6:14687:14706	3671312	0	True				
ANR	3671410	IdentifierDecl	* pt = argv [ i ]		3671312	0					
ANR	3671411	IdentifierDeclType	char *		3671312	0					
ANR	3671412	Identifier	pt		3671312	1					
ANR	3671413	AssignmentExpression	* pt = argv [ i ]		3671312	2		=			
ANR	3671414	Identifier	pt		3671312	0					
ANR	3671415	ArrayIndexing	argv [ i ]		3671312	1					
ANR	3671416	Identifier	argv		3671312	0					
ANR	3671417	Identifier	i		3671312	1					
ANR	3671418	IdentifierDeclStatement	char * end ;	615:6:14714:14724	3671312	1	True				
ANR	3671419	IdentifierDecl	* end		3671312	0					
ANR	3671420	IdentifierDeclType	char *		3671312	0					
ANR	3671421	Identifier	end		3671312	1					
ANR	3671422	IfStatement	if ( pt [ 0 ] == '-' && pt [ 1 ] == '-' )		3671312	2					
ANR	3671423	Condition	pt [ 0 ] == '-' && pt [ 1 ] == '-'	618:11:14739:14766	3671312	0	True				
ANR	3671424	AndExpression	pt [ 0 ] == '-' && pt [ 1 ] == '-'		3671312	0		&&			
ANR	3671425	EqualityExpression	pt [ 0 ] == '-'		3671312	0		==			
ANR	3671426	ArrayIndexing	pt [ 0 ]		3671312	0					
ANR	3671427	Identifier	pt		3671312	0					
ANR	3671428	PrimaryExpression	0		3671312	1					
ANR	3671429	PrimaryExpression	'-'		3671312	1					
ANR	3671430	EqualityExpression	pt [ 1 ] == '-'		3671312	1		==			
ANR	3671431	ArrayIndexing	pt [ 1 ]		3671312	0					
ANR	3671432	Identifier	pt		3671312	0					
ANR	3671433	PrimaryExpression	1		3671312	1					
ANR	3671434	PrimaryExpression	'-'		3671312	1					
ANR	3671435	ExpressionStatement	pt ++	619:8:14778:14782	3671312	1	True				
ANR	3671436	PostIncDecOperationExpression	pt ++		3671312	0					
ANR	3671437	Identifier	pt		3671312	0					
ANR	3671438	IncDec	++		3671312	1					
ANR	3671439	IfStatement	"if ( strcmp ( pt , ""-all"" ) == 0 )"		3671312	3					
ANR	3671440	Condition	"strcmp ( pt , ""-all"" ) == 0"	621:11:14796:14820	3671312	0	True				
ANR	3671441	EqualityExpression	"strcmp ( pt , ""-all"" ) == 0"		3671312	0		==			
ANR	3671442	CallExpression	"strcmp ( pt , ""-all"" )"		3671312	0					
ANR	3671443	Callee	strcmp		3671312	0					
ANR	3671444	Identifier	strcmp		3671312	0					
ANR	3671445	ArgumentList	pt		3671312	1					
ANR	3671446	Argument	pt		3671312	0					
ANR	3671447	Identifier	pt		3671312	0					
ANR	3671448	Argument	"""-all"""		3671312	1					
ANR	3671449	PrimaryExpression	"""-all"""		3671312	0					
ANR	3671450	PrimaryExpression	0		3671312	1					
ANR	3671451	ExpressionStatement	allexts = true	622:8:14832:14846	3671312	1	True				
ANR	3671452	AssignmentExpression	allexts = true		3671312	0		=			
ANR	3671453	Identifier	allexts		3671312	0					
ANR	3671454	Identifier	true		3671312	1					
ANR	3671455	ElseStatement	else		3671312	0					
ANR	3671456	IfStatement	"if ( strcmp ( pt , ""-check-outlines"" ) == 0 )"		3671312	0					
ANR	3671457	Condition	"strcmp ( pt , ""-check-outlines"" ) == 0"	623:16:14864:14899	3671312	0	True				
ANR	3671458	EqualityExpression	"strcmp ( pt , ""-check-outlines"" ) == 0"		3671312	0		==			
ANR	3671459	CallExpression	"strcmp ( pt , ""-check-outlines"" )"		3671312	0					
ANR	3671460	Callee	strcmp		3671312	0					
ANR	3671461	Identifier	strcmp		3671312	0					
ANR	3671462	ArgumentList	pt		3671312	1					
ANR	3671463	Argument	pt		3671312	0					
ANR	3671464	Identifier	pt		3671312	0					
ANR	3671465	Argument	"""-check-outlines"""		3671312	1					
ANR	3671466	PrimaryExpression	"""-check-outlines"""		3671312	0					
ANR	3671467	PrimaryExpression	0		3671312	1					
ANR	3671468	ExpressionStatement	check_outlines = true	624:8:14911:14932	3671312	1	True				
ANR	3671469	AssignmentExpression	check_outlines = true		3671312	0		=			
ANR	3671470	Identifier	check_outlines		3671312	0					
ANR	3671471	Identifier	true		3671312	1					
ANR	3671472	ElseStatement	else		3671312	0					
ANR	3671473	IfStatement	"if ( strcmp ( pt , ""-dir"" ) == 0 )"		3671312	0					
ANR	3671474	Condition	"strcmp ( pt , ""-dir"" ) == 0"	625:16:14950:14974	3671312	0	True				
ANR	3671475	EqualityExpression	"strcmp ( pt , ""-dir"" ) == 0"		3671312	0		==			
ANR	3671476	CallExpression	"strcmp ( pt , ""-dir"" )"		3671312	0					
ANR	3671477	Callee	strcmp		3671312	0					
ANR	3671478	Identifier	strcmp		3671312	0					
ANR	3671479	ArgumentList	pt		3671312	1					
ANR	3671480	Argument	pt		3671312	0					
ANR	3671481	Identifier	pt		3671312	0					
ANR	3671482	Argument	"""-dir"""		3671312	1					
ANR	3671483	PrimaryExpression	"""-dir"""		3671312	0					
ANR	3671484	PrimaryExpression	0		3671312	1					
ANR	3671485	ExpressionStatement	dirs [ dcnt ++ ] = argv [ ++ i ]	626:8:14986:15010	3671312	1	True				
ANR	3671486	AssignmentExpression	dirs [ dcnt ++ ] = argv [ ++ i ]		3671312	0		=			
ANR	3671487	ArrayIndexing	dirs [ dcnt ++ ]		3671312	0					
ANR	3671488	Identifier	dirs		3671312	0					
ANR	3671489	PostIncDecOperationExpression	dcnt ++		3671312	1					
ANR	3671490	Identifier	dcnt		3671312	0					
ANR	3671491	IncDec	++		3671312	1					
ANR	3671492	ArrayIndexing	argv [ ++ i ]		3671312	1					
ANR	3671493	Identifier	argv		3671312	0					
ANR	3671494	UnaryExpression	++ i		3671312	1					
ANR	3671495	IncDec	++		3671312	0					
ANR	3671496	Identifier	i		3671312	1					
ANR	3671497	ElseStatement	else		3671312	0					
ANR	3671498	IfStatement	"if ( strcmp ( pt , ""-error-count"" ) == 0 )"		3671312	0					
ANR	3671499	Condition	"strcmp ( pt , ""-error-count"" ) == 0"	627:16:15028:15060	3671312	0	True				
ANR	3671500	EqualityExpression	"strcmp ( pt , ""-error-count"" ) == 0"		3671312	0		==			
ANR	3671501	CallExpression	"strcmp ( pt , ""-error-count"" )"		3671312	0					
ANR	3671502	Callee	strcmp		3671312	0					
ANR	3671503	Identifier	strcmp		3671312	0					
ANR	3671504	ArgumentList	pt		3671312	1					
ANR	3671505	Argument	pt		3671312	0					
ANR	3671506	Identifier	pt		3671312	0					
ANR	3671507	Argument	"""-error-count"""		3671312	1					
ANR	3671508	PrimaryExpression	"""-error-count"""		3671312	0					
ANR	3671509	PrimaryExpression	0		3671312	1					
ANR	3671510	CompoundStatement		28:6:710:710	3671312	1					
ANR	3671511	IfStatement	if ( ! rset )		3671312	0					
ANR	3671512	Condition	! rset	629:13:15085:15089	3671312	0	True				
ANR	3671513	UnaryOperationExpression	! rset		3671312	0					
ANR	3671514	UnaryOperator	!		3671312	0					
ANR	3671515	Identifier	rset		3671312	1					
ANR	3671516	ExpressionStatement	error_fraction = 0.0	630:10:15103:15123	3671312	1	True				
ANR	3671517	AssignmentExpression	error_fraction = 0.0		3671312	0		=			
ANR	3671518	Identifier	error_fraction		3671312	0					
ANR	3671519	PrimaryExpression	0.0		3671312	1					
ANR	3671520	ExpressionStatement	rset = true	631:8:15133:15144	3671312	1	True				
ANR	3671521	AssignmentExpression	rset = true		3671312	0		=			
ANR	3671522	Identifier	rset		3671312	0					
ANR	3671523	Identifier	true		3671312	1					
ANR	3671524	ExpressionStatement	"error_count = ( unsigned int ) strtoul ( argv [ ++ i ] , & end , 10 )"	632:8:15154:15212	3671312	2	True				
ANR	3671525	AssignmentExpression	"error_count = ( unsigned int ) strtoul ( argv [ ++ i ] , & end , 10 )"		3671312	0		=			
ANR	3671526	Identifier	error_count		3671312	0					
ANR	3671527	CastExpression	"( unsigned int ) strtoul ( argv [ ++ i ] , & end , 10 )"		3671312	1					
ANR	3671528	CastTarget	unsigned int		3671312	0					
ANR	3671529	CallExpression	"strtoul ( argv [ ++ i ] , & end , 10 )"		3671312	1					
ANR	3671530	Callee	strtoul		3671312	0					
ANR	3671531	Identifier	strtoul		3671312	0					
ANR	3671532	ArgumentList	argv [ ++ i ]		3671312	1					
ANR	3671533	Argument	argv [ ++ i ]		3671312	0					
ANR	3671534	ArrayIndexing	argv [ ++ i ]		3671312	0					
ANR	3671535	Identifier	argv		3671312	0					
ANR	3671536	UnaryExpression	++ i		3671312	1					
ANR	3671537	IncDec	++		3671312	0					
ANR	3671538	Identifier	i		3671312	1					
ANR	3671539	Argument	& end		3671312	1					
ANR	3671540	UnaryOperationExpression	& end		3671312	0					
ANR	3671541	UnaryOperator	&		3671312	0					
ANR	3671542	Identifier	end		3671312	1					
ANR	3671543	Argument	10		3671312	2					
ANR	3671544	PrimaryExpression	10		3671312	0					
ANR	3671545	IfStatement	if ( * end != '\\0' )		3671312	3					
ANR	3671546	Condition	* end != '\\0'	633:13:15227:15238	3671312	0	True				
ANR	3671547	EqualityExpression	* end != '\\0'		3671312	0		!=			
ANR	3671548	UnaryOperationExpression	* end		3671312	0					
ANR	3671549	UnaryOperator	*		3671312	0					
ANR	3671550	Identifier	end		3671312	1					
ANR	3671551	PrimaryExpression	'\\0'		3671312	1					
ANR	3671552	CompoundStatement		34:8:890:890	3671312	1					
ANR	3671553	ExpressionStatement	"fprintf ( stderr , ""Bad value for error-count: %s\\n"" , argv [ i ] )"	635:10:15262:15323	3671312	0	True				
ANR	3671554	CallExpression	"fprintf ( stderr , ""Bad value for error-count: %s\\n"" , argv [ i ] )"		3671312	0					
ANR	3671555	Callee	fprintf		3671312	0					
ANR	3671556	Identifier	fprintf		3671312	0					
ANR	3671557	ArgumentList	stderr		3671312	1					
ANR	3671558	Argument	stderr		3671312	0					
ANR	3671559	Identifier	stderr		3671312	0					
ANR	3671560	Argument	"""Bad value for error-count: %s\\n"""		3671312	1					
ANR	3671561	PrimaryExpression	"""Bad value for error-count: %s\\n"""		3671312	0					
ANR	3671562	Argument	argv [ i ]		3671312	2					
ANR	3671563	ArrayIndexing	argv [ i ]		3671312	0					
ANR	3671564	Identifier	argv		3671312	0					
ANR	3671565	Identifier	i		3671312	1					
ANR	3671566	ExpressionStatement	exit ( 1 )	636:10:15335:15344	3671312	1	True				
ANR	3671567	CallExpression	exit ( 1 )		3671312	0					
ANR	3671568	Callee	exit		3671312	0					
ANR	3671569	Identifier	exit		3671312	0					
ANR	3671570	ArgumentList	1		3671312	1					
ANR	3671571	Argument	1		3671312	0					
ANR	3671572	PrimaryExpression	1		3671312	0					
ANR	3671573	ElseStatement	else		3671312	0					
ANR	3671574	IfStatement	"if ( strcmp ( pt , ""-error-fraction"" ) == 0 )"		3671312	0					
ANR	3671575	Condition	"strcmp ( pt , ""-error-fraction"" ) == 0"	639:16:15380:15415	3671312	0	True				
ANR	3671576	EqualityExpression	"strcmp ( pt , ""-error-fraction"" ) == 0"		3671312	0		==			
ANR	3671577	CallExpression	"strcmp ( pt , ""-error-fraction"" )"		3671312	0					
ANR	3671578	Callee	strcmp		3671312	0					
ANR	3671579	Identifier	strcmp		3671312	0					
ANR	3671580	ArgumentList	pt		3671312	1					
ANR	3671581	Argument	pt		3671312	0					
ANR	3671582	Identifier	pt		3671312	0					
ANR	3671583	Argument	"""-error-fraction"""		3671312	1					
ANR	3671584	PrimaryExpression	"""-error-fraction"""		3671312	0					
ANR	3671585	PrimaryExpression	0		3671312	1					
ANR	3671586	CompoundStatement		40:6:1065:1065	3671312	1					
ANR	3671587	IfStatement	if ( ! rset )		3671312	0					
ANR	3671588	Condition	! rset	641:13:15440:15444	3671312	0	True				
ANR	3671589	UnaryOperationExpression	! rset		3671312	0					
ANR	3671590	UnaryOperator	!		3671312	0					
ANR	3671591	Identifier	rset		3671312	1					
ANR	3671592	ExpressionStatement	error_count = 0	642:10:15458:15473	3671312	1	True				
ANR	3671593	AssignmentExpression	error_count = 0		3671312	0		=			
ANR	3671594	Identifier	error_count		3671312	0					
ANR	3671595	PrimaryExpression	0		3671312	1					
ANR	3671596	ExpressionStatement	rset = true	643:8:15483:15494	3671312	1	True				
ANR	3671597	AssignmentExpression	rset = true		3671312	0		=			
ANR	3671598	Identifier	rset		3671312	0					
ANR	3671599	Identifier	true		3671312	1					
ANR	3671600	ExpressionStatement	"error_fraction = strtod ( argv [ ++ i ] , & end )"	644:8:15504:15546	3671312	2	True				
ANR	3671601	AssignmentExpression	"error_fraction = strtod ( argv [ ++ i ] , & end )"		3671312	0		=			
ANR	3671602	Identifier	error_fraction		3671312	0					
ANR	3671603	CallExpression	"strtod ( argv [ ++ i ] , & end )"		3671312	1					
ANR	3671604	Callee	strtod		3671312	0					
ANR	3671605	Identifier	strtod		3671312	0					
ANR	3671606	ArgumentList	argv [ ++ i ]		3671312	1					
ANR	3671607	Argument	argv [ ++ i ]		3671312	0					
ANR	3671608	ArrayIndexing	argv [ ++ i ]		3671312	0					
ANR	3671609	Identifier	argv		3671312	0					
ANR	3671610	UnaryExpression	++ i		3671312	1					
ANR	3671611	IncDec	++		3671312	0					
ANR	3671612	Identifier	i		3671312	1					
ANR	3671613	Argument	& end		3671312	1					
ANR	3671614	UnaryOperationExpression	& end		3671312	0					
ANR	3671615	UnaryOperator	&		3671312	0					
ANR	3671616	Identifier	end		3671312	1					
ANR	3671617	IfStatement	if ( * end != '\\0' )		3671312	3					
ANR	3671618	Condition	* end != '\\0'	645:13:15561:15572	3671312	0	True				
ANR	3671619	EqualityExpression	* end != '\\0'		3671312	0		!=			
ANR	3671620	UnaryOperationExpression	* end		3671312	0					
ANR	3671621	UnaryOperator	*		3671312	0					
ANR	3671622	Identifier	end		3671312	1					
ANR	3671623	PrimaryExpression	'\\0'		3671312	1					
ANR	3671624	CompoundStatement		46:8:1224:1224	3671312	1					
ANR	3671625	ExpressionStatement	"fprintf ( stderr , ""Bad value for error-fraction: %s\\n"" , argv [ i ] )"	647:10:15596:15660	3671312	0	True				
ANR	3671626	CallExpression	"fprintf ( stderr , ""Bad value for error-fraction: %s\\n"" , argv [ i ] )"		3671312	0					
ANR	3671627	Callee	fprintf		3671312	0					
ANR	3671628	Identifier	fprintf		3671312	0					
ANR	3671629	ArgumentList	stderr		3671312	1					
ANR	3671630	Argument	stderr		3671312	0					
ANR	3671631	Identifier	stderr		3671312	0					
ANR	3671632	Argument	"""Bad value for error-fraction: %s\\n"""		3671312	1					
ANR	3671633	PrimaryExpression	"""Bad value for error-fraction: %s\\n"""		3671312	0					
ANR	3671634	Argument	argv [ i ]		3671312	2					
ANR	3671635	ArrayIndexing	argv [ i ]		3671312	0					
ANR	3671636	Identifier	argv		3671312	0					
ANR	3671637	Identifier	i		3671312	1					
ANR	3671638	ExpressionStatement	exit ( 1 )	648:10:15672:15681	3671312	1	True				
ANR	3671639	CallExpression	exit ( 1 )		3671312	0					
ANR	3671640	Callee	exit		3671312	0					
ANR	3671641	Identifier	exit		3671312	0					
ANR	3671642	ArgumentList	1		3671312	1					
ANR	3671643	Argument	1		3671312	0					
ANR	3671644	PrimaryExpression	1		3671312	0					
ANR	3671645	IfStatement	if ( error_fraction < 0.0 || error_fraction > 1.0 )		3671312	4					
ANR	3671646	Condition	error_fraction < 0.0 || error_fraction > 1.0	650:13:15706:15749	3671312	0	True				
ANR	3671647	OrExpression	error_fraction < 0.0 || error_fraction > 1.0		3671312	0		||			
ANR	3671648	RelationalExpression	error_fraction < 0.0		3671312	0		<			
ANR	3671649	Identifier	error_fraction		3671312	0					
ANR	3671650	PrimaryExpression	0.0		3671312	1					
ANR	3671651	RelationalExpression	error_fraction > 1.0		3671312	1		>			
ANR	3671652	Identifier	error_fraction		3671312	0					
ANR	3671653	PrimaryExpression	1.0		3671312	1					
ANR	3671654	CompoundStatement		51:8:1401:1401	3671312	1					
ANR	3671655	ExpressionStatement	"fprintf ( stderr , ""error-fraction must be in the range [0;1]\\n"" )"	652:10:15773:15837	3671312	0	True				
ANR	3671656	CallExpression	"fprintf ( stderr , ""error-fraction must be in the range [0;1]\\n"" )"		3671312	0					
ANR	3671657	Callee	fprintf		3671312	0					
ANR	3671658	Identifier	fprintf		3671312	0					
ANR	3671659	ArgumentList	stderr		3671312	1					
ANR	3671660	Argument	stderr		3671312	0					
ANR	3671661	Identifier	stderr		3671312	0					
ANR	3671662	Argument	"""error-fraction must be in the range [0;1]\\n"""		3671312	1					
ANR	3671663	PrimaryExpression	"""error-fraction must be in the range [0;1]\\n"""		3671312	0					
ANR	3671664	ExpressionStatement	exit ( 1 )	653:10:15849:15858	3671312	1	True				
ANR	3671665	CallExpression	exit ( 1 )		3671312	0					
ANR	3671666	Callee	exit		3671312	0					
ANR	3671667	Identifier	exit		3671312	0					
ANR	3671668	ArgumentList	1		3671312	1					
ANR	3671669	Argument	1		3671312	0					
ANR	3671670	PrimaryExpression	1		3671312	0					
ANR	3671671	ElseStatement	else		3671312	0					
ANR	3671672	IfStatement	"if ( strcmp ( pt , ""-ext"" ) == 0 )"		3671312	0					
ANR	3671673	Condition	"strcmp ( pt , ""-ext"" ) == 0"	656:16:15894:15918	3671312	0	True				
ANR	3671674	EqualityExpression	"strcmp ( pt , ""-ext"" ) == 0"		3671312	0		==			
ANR	3671675	CallExpression	"strcmp ( pt , ""-ext"" )"		3671312	0					
ANR	3671676	Callee	strcmp		3671312	0					
ANR	3671677	Identifier	strcmp		3671312	0					
ANR	3671678	ArgumentList	pt		3671312	1					
ANR	3671679	Argument	pt		3671312	0					
ANR	3671680	Identifier	pt		3671312	0					
ANR	3671681	Argument	"""-ext"""		3671312	1					
ANR	3671682	PrimaryExpression	"""-ext"""		3671312	0					
ANR	3671683	PrimaryExpression	0		3671312	1					
ANR	3671684	ExpressionStatement	exts [ ecnt ++ ] = argv [ ++ i ]	657:8:15930:15954	3671312	1	True				
ANR	3671685	AssignmentExpression	exts [ ecnt ++ ] = argv [ ++ i ]		3671312	0		=			
ANR	3671686	ArrayIndexing	exts [ ecnt ++ ]		3671312	0					
ANR	3671687	Identifier	exts		3671312	0					
ANR	3671688	PostIncDecOperationExpression	ecnt ++		3671312	1					
ANR	3671689	Identifier	ecnt		3671312	0					
ANR	3671690	IncDec	++		3671312	1					
ANR	3671691	ArrayIndexing	argv [ ++ i ]		3671312	1					
ANR	3671692	Identifier	argv		3671312	0					
ANR	3671693	UnaryExpression	++ i		3671312	1					
ANR	3671694	IncDec	++		3671312	0					
ANR	3671695	Identifier	i		3671312	1					
ANR	3671696	ElseStatement	else		3671312	0					
ANR	3671697	IfStatement	"if ( strcmp ( pt , ""-help"" ) == 0 )"		3671312	0					
ANR	3671698	Condition	"strcmp ( pt , ""-help"" ) == 0"	658:16:15972:15997	3671312	0	True				
ANR	3671699	EqualityExpression	"strcmp ( pt , ""-help"" ) == 0"		3671312	0		==			
ANR	3671700	CallExpression	"strcmp ( pt , ""-help"" )"		3671312	0					
ANR	3671701	Callee	strcmp		3671312	0					
ANR	3671702	Identifier	strcmp		3671312	0					
ANR	3671703	ArgumentList	pt		3671312	1					
ANR	3671704	Argument	pt		3671312	0					
ANR	3671705	Identifier	pt		3671312	0					
ANR	3671706	Argument	"""-help"""		3671312	1					
ANR	3671707	PrimaryExpression	"""-help"""		3671312	0					
ANR	3671708	PrimaryExpression	0		3671312	1					
ANR	3671709	CompoundStatement		59:6:1647:1647	3671312	1					
ANR	3671710	ExpressionStatement	"usage ( stdout , argv [ 0 ] )"	660:8:16017:16041	3671312	0	True				
ANR	3671711	CallExpression	"usage ( stdout , argv [ 0 ] )"		3671312	0					
ANR	3671712	Callee	usage		3671312	0					
ANR	3671713	Identifier	usage		3671312	0					
ANR	3671714	ArgumentList	stdout		3671312	1					
ANR	3671715	Argument	stdout		3671312	0					
ANR	3671716	Identifier	stdout		3671312	0					
ANR	3671717	Argument	argv [ 0 ]		3671312	1					
ANR	3671718	ArrayIndexing	argv [ 0 ]		3671312	0					
ANR	3671719	Identifier	argv		3671312	0					
ANR	3671720	PrimaryExpression	0		3671312	1					
ANR	3671721	ExpressionStatement	exit ( 0 )	661:8:16051:16060	3671312	1	True				
ANR	3671722	CallExpression	exit ( 0 )		3671312	0					
ANR	3671723	Callee	exit		3671312	0					
ANR	3671724	Identifier	exit		3671312	0					
ANR	3671725	ArgumentList	0		3671312	1					
ANR	3671726	Argument	0		3671312	0					
ANR	3671727	PrimaryExpression	0		3671312	0					
ANR	3671728	ElseStatement	else		3671312	0					
ANR	3671729	IfStatement	"if ( strcmp ( pt , ""-nohints"" ) == 0 )"		3671312	0					
ANR	3671730	Condition	"strcmp ( pt , ""-nohints"" ) == 0"	663:16:16086:16114	3671312	0	True				
ANR	3671731	EqualityExpression	"strcmp ( pt , ""-nohints"" ) == 0"		3671312	0		==			
ANR	3671732	CallExpression	"strcmp ( pt , ""-nohints"" )"		3671312	0					
ANR	3671733	Callee	strcmp		3671312	0					
ANR	3671734	Identifier	strcmp		3671312	0					
ANR	3671735	ArgumentList	pt		3671312	1					
ANR	3671736	Argument	pt		3671312	0					
ANR	3671737	Identifier	pt		3671312	0					
ANR	3671738	Argument	"""-nohints"""		3671312	1					
ANR	3671739	PrimaryExpression	"""-nohints"""		3671312	0					
ANR	3671740	PrimaryExpression	0		3671312	1					
ANR	3671741	ExpressionStatement	nohints = true	664:8:16126:16140	3671312	1	True				
ANR	3671742	AssignmentExpression	nohints = true		3671312	0		=			
ANR	3671743	Identifier	nohints		3671312	0					
ANR	3671744	Identifier	true		3671312	1					
ANR	3671745	ElseStatement	else		3671312	0					
ANR	3671746	IfStatement	"if ( strcmp ( pt , ""-rasterize"" ) == 0 )"		3671312	0					
ANR	3671747	Condition	"strcmp ( pt , ""-rasterize"" ) == 0"	665:16:16158:16188	3671312	0	True				
ANR	3671748	EqualityExpression	"strcmp ( pt , ""-rasterize"" ) == 0"		3671312	0		==			
ANR	3671749	CallExpression	"strcmp ( pt , ""-rasterize"" )"		3671312	0					
ANR	3671750	Callee	strcmp		3671312	0					
ANR	3671751	Identifier	strcmp		3671312	0					
ANR	3671752	ArgumentList	pt		3671312	1					
ANR	3671753	Argument	pt		3671312	0					
ANR	3671754	Identifier	pt		3671312	0					
ANR	3671755	Argument	"""-rasterize"""		3671312	1					
ANR	3671756	PrimaryExpression	"""-rasterize"""		3671312	0					
ANR	3671757	PrimaryExpression	0		3671312	1					
ANR	3671758	ExpressionStatement	rasterize = true	666:8:16200:16216	3671312	1	True				
ANR	3671759	AssignmentExpression	rasterize = true		3671312	0		=			
ANR	3671760	Identifier	rasterize		3671312	0					
ANR	3671761	Identifier	true		3671312	1					
ANR	3671762	ElseStatement	else		3671312	0					
ANR	3671763	IfStatement	"if ( strcmp ( pt , ""-results"" ) == 0 )"		3671312	0					
ANR	3671764	Condition	"strcmp ( pt , ""-results"" ) == 0"	667:16:16234:16262	3671312	0	True				
ANR	3671765	EqualityExpression	"strcmp ( pt , ""-results"" ) == 0"		3671312	0		==			
ANR	3671766	CallExpression	"strcmp ( pt , ""-results"" )"		3671312	0					
ANR	3671767	Callee	strcmp		3671312	0					
ANR	3671768	Identifier	strcmp		3671312	0					
ANR	3671769	ArgumentList	pt		3671312	1					
ANR	3671770	Argument	pt		3671312	0					
ANR	3671771	Identifier	pt		3671312	0					
ANR	3671772	Argument	"""-results"""		3671312	1					
ANR	3671773	PrimaryExpression	"""-results"""		3671312	0					
ANR	3671774	PrimaryExpression	0		3671312	1					
ANR	3671775	ExpressionStatement	results_dir = argv [ ++ i ]	668:8:16274:16297	3671312	1	True				
ANR	3671776	AssignmentExpression	results_dir = argv [ ++ i ]		3671312	0		=			
ANR	3671777	Identifier	results_dir		3671312	0					
ANR	3671778	ArrayIndexing	argv [ ++ i ]		3671312	1					
ANR	3671779	Identifier	argv		3671312	0					
ANR	3671780	UnaryExpression	++ i		3671312	1					
ANR	3671781	IncDec	++		3671312	0					
ANR	3671782	Identifier	i		3671312	1					
ANR	3671783	ElseStatement	else		3671312	0					
ANR	3671784	IfStatement	"if ( strcmp ( pt , ""-size"" ) == 0 )"		3671312	0					
ANR	3671785	Condition	"strcmp ( pt , ""-size"" ) == 0"	669:16:16315:16340	3671312	0	True				
ANR	3671786	EqualityExpression	"strcmp ( pt , ""-size"" ) == 0"		3671312	0		==			
ANR	3671787	CallExpression	"strcmp ( pt , ""-size"" )"		3671312	0					
ANR	3671788	Callee	strcmp		3671312	0					
ANR	3671789	Identifier	strcmp		3671312	0					
ANR	3671790	ArgumentList	pt		3671312	1					
ANR	3671791	Argument	pt		3671312	0					
ANR	3671792	Identifier	pt		3671312	0					
ANR	3671793	Argument	"""-size"""		3671312	1					
ANR	3671794	PrimaryExpression	"""-size"""		3671312	0					
ANR	3671795	PrimaryExpression	0		3671312	1					
ANR	3671796	CompoundStatement		70:6:1990:1990	3671312	1					
ANR	3671797	ExpressionStatement	"font_size = ( FT_F26Dot6 ) ( strtod ( argv [ ++ i ] , & end ) * 64 )"	671:8:16360:16418	3671312	0	True				
ANR	3671798	AssignmentExpression	"font_size = ( FT_F26Dot6 ) ( strtod ( argv [ ++ i ] , & end ) * 64 )"		3671312	0		=			
ANR	3671799	Identifier	font_size		3671312	0					
ANR	3671800	CastExpression	"( FT_F26Dot6 ) ( strtod ( argv [ ++ i ] , & end ) * 64 )"		3671312	1					
ANR	3671801	CastTarget	FT_F26Dot6		3671312	0					
ANR	3671802	MultiplicativeExpression	"strtod ( argv [ ++ i ] , & end ) * 64"		3671312	1		*			
ANR	3671803	CallExpression	"strtod ( argv [ ++ i ] , & end )"		3671312	0					
ANR	3671804	Callee	strtod		3671312	0					
ANR	3671805	Identifier	strtod		3671312	0					
ANR	3671806	ArgumentList	argv [ ++ i ]		3671312	1					
ANR	3671807	Argument	argv [ ++ i ]		3671312	0					
ANR	3671808	ArrayIndexing	argv [ ++ i ]		3671312	0					
ANR	3671809	Identifier	argv		3671312	0					
ANR	3671810	UnaryExpression	++ i		3671312	1					
ANR	3671811	IncDec	++		3671312	0					
ANR	3671812	Identifier	i		3671312	1					
ANR	3671813	Argument	& end		3671312	1					
ANR	3671814	UnaryOperationExpression	& end		3671312	0					
ANR	3671815	UnaryOperator	&		3671312	0					
ANR	3671816	Identifier	end		3671312	1					
ANR	3671817	PrimaryExpression	64		3671312	1					
ANR	3671818	IfStatement	if ( * end != '\\0' || font_size < 64 )		3671312	1					
ANR	3671819	Condition	* end != '\\0' || font_size < 64	672:13:16433:16462	3671312	0	True				
ANR	3671820	OrExpression	* end != '\\0' || font_size < 64		3671312	0		||			
ANR	3671821	EqualityExpression	* end != '\\0'		3671312	0		!=			
ANR	3671822	UnaryOperationExpression	* end		3671312	0					
ANR	3671823	UnaryOperator	*		3671312	0					
ANR	3671824	Identifier	end		3671312	1					
ANR	3671825	PrimaryExpression	'\\0'		3671312	1					
ANR	3671826	RelationalExpression	font_size < 64		3671312	1		<			
ANR	3671827	Identifier	font_size		3671312	0					
ANR	3671828	PrimaryExpression	64		3671312	1					
ANR	3671829	CompoundStatement		73:8:2114:2114	3671312	1					
ANR	3671830	ExpressionStatement	"fprintf ( stderr , ""Bad value for size: %s\\n"" , argv [ i ] )"	674:10:16486:16540	3671312	0	True				
ANR	3671831	CallExpression	"fprintf ( stderr , ""Bad value for size: %s\\n"" , argv [ i ] )"		3671312	0					
ANR	3671832	Callee	fprintf		3671312	0					
ANR	3671833	Identifier	fprintf		3671312	0					
ANR	3671834	ArgumentList	stderr		3671312	1					
ANR	3671835	Argument	stderr		3671312	0					
ANR	3671836	Identifier	stderr		3671312	0					
ANR	3671837	Argument	"""Bad value for size: %s\\n"""		3671312	1					
ANR	3671838	PrimaryExpression	"""Bad value for size: %s\\n"""		3671312	0					
ANR	3671839	Argument	argv [ i ]		3671312	2					
ANR	3671840	ArrayIndexing	argv [ i ]		3671312	0					
ANR	3671841	Identifier	argv		3671312	0					
ANR	3671842	Identifier	i		3671312	1					
ANR	3671843	ExpressionStatement	exit ( 1 )	675:10:16552:16561	3671312	1	True				
ANR	3671844	CallExpression	exit ( 1 )		3671312	0					
ANR	3671845	Callee	exit		3671312	0					
ANR	3671846	Identifier	exit		3671312	0					
ANR	3671847	ArgumentList	1		3671312	1					
ANR	3671848	Argument	1		3671312	0					
ANR	3671849	PrimaryExpression	1		3671312	0					
ANR	3671850	ElseStatement	else		3671312	0					
ANR	3671851	IfStatement	"if ( strcmp ( pt , ""-test"" ) == 0 )"		3671312	0					
ANR	3671852	Condition	"strcmp ( pt , ""-test"" ) == 0"	678:16:16597:16622	3671312	0	True				
ANR	3671853	EqualityExpression	"strcmp ( pt , ""-test"" ) == 0"		3671312	0		==			
ANR	3671854	CallExpression	"strcmp ( pt , ""-test"" )"		3671312	0					
ANR	3671855	Callee	strcmp		3671312	0					
ANR	3671856	Identifier	strcmp		3671312	0					
ANR	3671857	ArgumentList	pt		3671312	1					
ANR	3671858	Argument	pt		3671312	0					
ANR	3671859	Identifier	pt		3671312	0					
ANR	3671860	Argument	"""-test"""		3671312	1					
ANR	3671861	PrimaryExpression	"""-test"""		3671312	0					
ANR	3671862	PrimaryExpression	0		3671312	1					
ANR	3671863	ExpressionStatement	testfile = argv [ ++ i ]	679:8:16634:16654	3671312	1	True				
ANR	3671864	AssignmentExpression	testfile = argv [ ++ i ]		3671312	0		=			
ANR	3671865	Identifier	testfile		3671312	0					
ANR	3671866	ArrayIndexing	argv [ ++ i ]		3671312	1					
ANR	3671867	Identifier	argv		3671312	0					
ANR	3671868	UnaryExpression	++ i		3671312	1					
ANR	3671869	IncDec	++		3671312	0					
ANR	3671870	Identifier	i		3671312	1					
ANR	3671871	ElseStatement	else		3671312	0					
ANR	3671872	CompoundStatement		81:6:2313:2313	3671312	0					
ANR	3671873	ExpressionStatement	"usage ( stderr , argv [ 0 ] )"	682:8:16683:16707	3671312	0	True				
ANR	3671874	CallExpression	"usage ( stderr , argv [ 0 ] )"		3671312	0					
ANR	3671875	Callee	usage		3671312	0					
ANR	3671876	Identifier	usage		3671312	0					
ANR	3671877	ArgumentList	stderr		3671312	1					
ANR	3671878	Argument	stderr		3671312	0					
ANR	3671879	Identifier	stderr		3671312	0					
ANR	3671880	Argument	argv [ 0 ]		3671312	1					
ANR	3671881	ArrayIndexing	argv [ 0 ]		3671312	0					
ANR	3671882	Identifier	argv		3671312	0					
ANR	3671883	PrimaryExpression	0		3671312	1					
ANR	3671884	ExpressionStatement	exit ( 1 )	683:8:16717:16726	3671312	1	True				
ANR	3671885	CallExpression	exit ( 1 )		3671312	0					
ANR	3671886	Callee	exit		3671312	0					
ANR	3671887	Identifier	exit		3671312	0					
ANR	3671888	ArgumentList	1		3671312	1					
ANR	3671889	Argument	1		3671312	0					
ANR	3671890	PrimaryExpression	1		3671312	0					
ANR	3671891	IfStatement	if ( allexts )		3671312	8					
ANR	3671892	Condition	allexts	687:9:16752:16758	3671312	0	True				
ANR	3671893	Identifier	allexts		3671312	0					
ANR	3671894	CompoundStatement		88:4:2406:2406	3671312	1					
ANR	3671895	ExpressionStatement	free ( exts )	689:6:16774:16786	3671312	0	True				
ANR	3671896	CallExpression	free ( exts )		3671312	0					
ANR	3671897	Callee	free		3671312	0					
ANR	3671898	Identifier	free		3671312	0					
ANR	3671899	ArgumentList	exts		3671312	1					
ANR	3671900	Argument	exts		3671312	0					
ANR	3671901	Identifier	exts		3671312	0					
ANR	3671902	ExpressionStatement	exts = NULL	690:6:16794:16805	3671312	1	True				
ANR	3671903	AssignmentExpression	exts = NULL		3671312	0		=			
ANR	3671904	Identifier	exts		3671312	0					
ANR	3671905	Identifier	NULL		3671312	1					
ANR	3671906	ElseStatement	else		3671312	0					
ANR	3671907	IfStatement	if ( ecnt == 0 )		3671312	0					
ANR	3671908	Condition	ecnt == 0	692:14:16827:16835	3671312	0	True				
ANR	3671909	EqualityExpression	ecnt == 0		3671312	0		==			
ANR	3671910	Identifier	ecnt		3671312	0					
ANR	3671911	PrimaryExpression	0		3671312	1					
ANR	3671912	CompoundStatement		93:4:2483:2483	3671312	1					
ANR	3671913	ExpressionStatement	free ( exts )	694:6:16851:16863	3671312	0	True				
ANR	3671914	CallExpression	free ( exts )		3671312	0					
ANR	3671915	Callee	free		3671312	0					
ANR	3671916	Identifier	free		3671312	0					
ANR	3671917	ArgumentList	exts		3671312	1					
ANR	3671918	Argument	exts		3671312	0					
ANR	3671919	Identifier	exts		3671312	0					
ANR	3671920	ExpressionStatement	exts = default_ext_list	695:6:16871:16894	3671312	1	True				
ANR	3671921	AssignmentExpression	exts = default_ext_list		3671312	0		=			
ANR	3671922	Identifier	exts		3671312	0					
ANR	3671923	Identifier	default_ext_list		3671312	1					
ANR	3671924	IfStatement	if ( dcnt == 0 )		3671312	9					
ANR	3671925	Condition	dcnt == 0	698:9:16912:16920	3671312	0	True				
ANR	3671926	EqualityExpression	dcnt == 0		3671312	0		==			
ANR	3671927	Identifier	dcnt		3671312	0					
ANR	3671928	PrimaryExpression	0		3671312	1					
ANR	3671929	CompoundStatement		99:4:2568:2568	3671312	1					
ANR	3671930	ExpressionStatement	free ( dirs )	700:6:16936:16948	3671312	0	True				
ANR	3671931	CallExpression	free ( dirs )		3671312	0					
ANR	3671932	Callee	free		3671312	0					
ANR	3671933	Identifier	free		3671312	0					
ANR	3671934	ArgumentList	dirs		3671312	1					
ANR	3671935	Argument	dirs		3671312	0					
ANR	3671936	Identifier	dirs		3671312	0					
ANR	3671937	ExpressionStatement	dirs = default_dir_list	701:6:16956:16979	3671312	1	True				
ANR	3671938	AssignmentExpression	dirs = default_dir_list		3671312	0		=			
ANR	3671939	Identifier	dirs		3671312	0					
ANR	3671940	Identifier	default_dir_list		3671312	1					
ANR	3671941	IfStatement	if ( testfile )		3671312	10					
ANR	3671942	Condition	testfile	704:9:16997:17004	3671312	0	True				
ANR	3671943	Identifier	testfile		3671312	0					
ANR	3671944	ExpressionStatement	ExecuteTest ( testfile )	705:6:17014:17037	3671312	1	True				
ANR	3671945	CallExpression	ExecuteTest ( testfile )		3671312	0					
ANR	3671946	Callee	ExecuteTest		3671312	0					
ANR	3671947	Identifier	ExecuteTest		3671312	0					
ANR	3671948	ArgumentList	testfile		3671312	1					
ANR	3671949	Argument	testfile		3671312	0					
ANR	3671950	Identifier	testfile		3671312	0					
ANR	3671951	ExpressionStatement	time ( & now )	707:4:17083:17095	3671312	11	True				
ANR	3671952	CallExpression	time ( & now )		3671312	0					
ANR	3671953	Callee	time		3671312	0					
ANR	3671954	Identifier	time		3671312	0					
ANR	3671955	ArgumentList	& now		3671312	1					
ANR	3671956	Argument	& now		3671312	0					
ANR	3671957	UnaryOperationExpression	& now		3671312	0					
ANR	3671958	UnaryOperator	&		3671312	0					
ANR	3671959	Identifier	now		3671312	1					
ANR	3671960	ExpressionStatement	srandom ( ( unsigned int ) now )	708:4:17101:17129	3671312	12	True				
ANR	3671961	CallExpression	srandom ( ( unsigned int ) now )		3671312	0					
ANR	3671962	Callee	srandom		3671312	0					
ANR	3671963	Identifier	srandom		3671312	0					
ANR	3671964	ArgumentList	( unsigned int ) now		3671312	1					
ANR	3671965	Argument	( unsigned int ) now		3671312	0					
ANR	3671966	CastExpression	( unsigned int ) now		3671312	0					
ANR	3671967	CastTarget	unsigned int		3671312	0					
ANR	3671968	Identifier	now		3671312	1					
ANR	3671969	ExpressionStatement	"FindFonts ( dirs , exts )"	710:4:17136:17159	3671312	13	True				
ANR	3671970	CallExpression	"FindFonts ( dirs , exts )"		3671312	0					
ANR	3671971	Callee	FindFonts		3671312	0					
ANR	3671972	Identifier	FindFonts		3671312	0					
ANR	3671973	ArgumentList	dirs		3671312	1					
ANR	3671974	Argument	dirs		3671312	0					
ANR	3671975	Identifier	dirs		3671312	0					
ANR	3671976	Argument	exts		3671312	1					
ANR	3671977	Identifier	exts		3671312	0					
ANR	3671978	ExpressionStatement	"mkdir ( results_dir , 0755 )"	711:4:17165:17191	3671312	14	True				
ANR	3671979	CallExpression	"mkdir ( results_dir , 0755 )"		3671312	0					
ANR	3671980	Callee	mkdir		3671312	0					
ANR	3671981	Identifier	mkdir		3671312	0					
ANR	3671982	ArgumentList	results_dir		3671312	1					
ANR	3671983	Argument	results_dir		3671312	0					
ANR	3671984	Identifier	results_dir		3671312	0					
ANR	3671985	Argument	0755		3671312	1					
ANR	3671986	PrimaryExpression	0755		3671312	0					
ANR	3671987	IdentifierDeclStatement	forever do_test ( ) ;	713:4:17198:17221	3671312	15	True				
ANR	3671988	IdentifierDecl	do_test ( )		3671312	0					
ANR	3671989	IdentifierDeclType	forever		3671312	0					
ANR	3671990	Identifier	do_test		3671312	1					
ANR	3671991	ReturnStatement	return 0 ;	716:4:17228:17236	3671312	16	True				
ANR	3671992	PrimaryExpression	0		3671312	0					
ANR	3671993	ReturnType	int		3671312	1					
ANR	3671994	Identifier	main		3671312	2					
ANR	3671995	ParameterList	"int argc , char * * argv"		3671312	3					
ANR	3671996	Parameter	int argc	599:8:14320:14331	3671312	0	True				
ANR	3671997	ParameterType	int		3671312	0					
ANR	3671998	Identifier	argc		3671312	1					
ANR	3671999	Parameter	char * * argv	600:8:14342:14353	3671312	1	True				
ANR	3672000	ParameterType	char * *		3671312	0					
ANR	3672001	Identifier	argv		3671312	1					
ANR	3672002	CFGEntryNode	ENTRY		3671312		True				
ANR	3672003	CFGExitNode	EXIT		3671312		True				
ANR	3672004	Symbol	pt		3671312						
ANR	3672005	Symbol	stdout		3671312						
ANR	3672006	Symbol	rset		3671312						
ANR	3672007	Symbol	& end		3671312						
ANR	3672008	Symbol	check_outlines		3671312						
ANR	3672009	Symbol	font_size		3671312						
ANR	3672010	Symbol	results_dir		3671312						
ANR	3672011	Symbol	* argv		3671312						
ANR	3672012	Symbol	ecnt		3671312						
ANR	3672013	Symbol	calloc		3671312						
ANR	3672014	Symbol	error_count		3671312						
ANR	3672015	Symbol	do_test		3671312						
ANR	3672016	Symbol	argv		3671312						
ANR	3672017	Symbol	default_dir_list		3671312						
ANR	3672018	Symbol	now		3671312						
ANR	3672019	Symbol	strtoul		3671312						
ANR	3672020	Symbol	rasterize		3671312						
ANR	3672021	Symbol	end		3671312						
ANR	3672022	Symbol	exts		3671312						
ANR	3672023	Symbol	argc		3671312						
ANR	3672024	Symbol	strcmp		3671312						
ANR	3672025	Symbol	* dirs		3671312						
ANR	3672026	Symbol	NULL		3671312						
ANR	3672027	Symbol	testfile		3671312						
ANR	3672028	Symbol	false		3671312						
ANR	3672029	Symbol	dirs		3671312						
ANR	3672030	Symbol	i		3671312						
ANR	3672031	Symbol	* pt		3671312						
ANR	3672032	Symbol	nohints		3671312						
ANR	3672033	Symbol	dcnt		3671312						
ANR	3672034	Symbol	stderr		3671312						
ANR	3672035	Symbol	strtod		3671312						
ANR	3672036	Symbol	* i		3671312						
ANR	3672037	Symbol	default_ext_list		3671312						
ANR	3672038	Symbol	* exts		3671312						
ANR	3672039	Symbol	true		3671312						
ANR	3672040	Symbol	allexts		3671312						
ANR	3672041	Symbol	* end		3671312						
ANR	3672042	Symbol	& now		3671312						
ANR	3672043	Symbol	error_fraction		3671312						
