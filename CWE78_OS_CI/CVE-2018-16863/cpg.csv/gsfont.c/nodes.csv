command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5083955	File	data/converged/CVE-2018-16863_ghostpdl/gsfont.c								
ANR	5083956	DeclStmt									
ANR	5083957	Decl							const gs_font_procs	const gs_font_procs	gs_font_procs_default
ANR	5083958	DeclStmt									
ANR	5083959	Decl							uint	uint	cci
ANR	5083960	DeclStmt									
ANR	5083961	Decl							uint	uint	offset
ANR	5083962	Decl							uint	uint	count
ANR	5083963	DeclStmt									
ANR	5083964	Decl							uint	uint	tmask
ANR	5083965	DeclStmt									
ANR	5083966	Decl							cached_char	cached_char *	cc
ANR	5083967	DeclStmt									
ANR	5083968	Decl							int	int	chi
ANR	5083969	DeclStmt									
ANR	5083970	Decl							cached_char	cached_char *	cc
ANR	5083971	Function	gs_font_finalize	145:1:5131:6710							
ANR	5083972	FunctionDef	"gs_font_finalize (const gs_memory_t * cmem , void * vptr)"		5083971	0					
ANR	5083973	CompoundStatement		156:0:5426:6710	5083971	0					
ANR	5083974	Statement	gs_font	157:4:5432:5438	5083971	0	True				
ANR	5083975	Statement	*	157:12:5440:5440	5083971	1	True				
ANR	5083976	Statement	const	157:13:5441:5445	5083971	2	True				
ANR	5083977	ExpressionStatement	pfont = vptr	157:19:5447:5459	5083971	3	True				
ANR	5083978	AssignmentExpression	pfont = vptr		5083971	0		=			
ANR	5083979	Identifier	pfont		5083971	0					
ANR	5083980	Identifier	vptr		5083971	1					
ANR	5083981	IdentifierDeclStatement	gs_font * * ppfirst ;	158:4:5465:5482	5083971	4	True				
ANR	5083982	IdentifierDecl	* * ppfirst		5083971	0					
ANR	5083983	IdentifierDeclType	gs_font * *		5083971	0					
ANR	5083984	Identifier	ppfirst		5083971	1					
ANR	5083985	IdentifierDeclStatement	gs_font * next = pfont -> next ;	159:4:5488:5515	5083971	5	True				
ANR	5083986	IdentifierDecl	* next = pfont -> next		5083971	0					
ANR	5083987	IdentifierDeclType	gs_font *		5083971	0					
ANR	5083988	Identifier	next		5083971	1					
ANR	5083989	AssignmentExpression	* next = pfont -> next		5083971	2		=			
ANR	5083990	Identifier	next		5083971	0					
ANR	5083991	PtrMemberAccess	pfont -> next		5083971	1					
ANR	5083992	Identifier	pfont		5083971	0					
ANR	5083993	Identifier	next		5083971	1					
ANR	5083994	IdentifierDeclStatement	gs_font * prev = pfont -> prev ;	160:4:5521:5548	5083971	6	True				
ANR	5083995	IdentifierDecl	* prev = pfont -> prev		5083971	0					
ANR	5083996	IdentifierDeclType	gs_font *		5083971	0					
ANR	5083997	Identifier	prev		5083971	1					
ANR	5083998	AssignmentExpression	* prev = pfont -> prev		5083971	2		=			
ANR	5083999	Identifier	prev		5083971	0					
ANR	5084000	PtrMemberAccess	pfont -> prev		5083971	1					
ANR	5084001	Identifier	pfont		5083971	0					
ANR	5084002	Identifier	prev		5083971	1					
ANR	5084003	ExpressionStatement	( void ) cmem	161:4:5554:5564	5083971	7	True				
ANR	5084004	CastExpression	( void ) cmem		5083971	0					
ANR	5084005	CastTarget	void		5083971	0					
ANR	5084006	Identifier	cmem		5083971	1					
ANR	5084007	ExpressionStatement	"if_debug4m ( 'u' , cmem , ""[u]unlinking font 0x%lx, base=0x%lx, prev=0x%lx, next=0x%lx\\n"" , ( ulong ) pfont , ( ulong ) pfont -> base , ( ulong ) prev , ( ulong ) next )"	163:4:5584:5749	5083971	8	True				
ANR	5084008	CallExpression	"if_debug4m ( 'u' , cmem , ""[u]unlinking font 0x%lx, base=0x%lx, prev=0x%lx, next=0x%lx\\n"" , ( ulong ) pfont , ( ulong ) pfont -> base , ( ulong ) prev , ( ulong ) next )"		5083971	0					
ANR	5084009	Callee	if_debug4m		5083971	0					
ANR	5084010	Identifier	if_debug4m		5083971	0					
ANR	5084011	ArgumentList	'u'		5083971	1					
ANR	5084012	Argument	'u'		5083971	0					
ANR	5084013	PrimaryExpression	'u'		5083971	0					
ANR	5084014	Argument	cmem		5083971	1					
ANR	5084015	Identifier	cmem		5083971	0					
ANR	5084016	Argument	"""[u]unlinking font 0x%lx, base=0x%lx, prev=0x%lx, next=0x%lx\\n"""		5083971	2					
ANR	5084017	PrimaryExpression	"""[u]unlinking font 0x%lx, base=0x%lx, prev=0x%lx, next=0x%lx\\n"""		5083971	0					
ANR	5084018	Argument	( ulong ) pfont		5083971	3					
ANR	5084019	CastExpression	( ulong ) pfont		5083971	0					
ANR	5084020	CastTarget	ulong		5083971	0					
ANR	5084021	Identifier	pfont		5083971	1					
ANR	5084022	Argument	( ulong ) pfont -> base		5083971	4					
ANR	5084023	CastExpression	( ulong ) pfont -> base		5083971	0					
ANR	5084024	CastTarget	ulong		5083971	0					
ANR	5084025	PtrMemberAccess	pfont -> base		5083971	1					
ANR	5084026	Identifier	pfont		5083971	0					
ANR	5084027	Identifier	base		5083971	1					
ANR	5084028	Argument	( ulong ) prev		5083971	5					
ANR	5084029	CastExpression	( ulong ) prev		5083971	0					
ANR	5084030	CastTarget	ulong		5083971	0					
ANR	5084031	Identifier	prev		5083971	1					
ANR	5084032	Argument	( ulong ) next		5083971	6					
ANR	5084033	CastExpression	( ulong ) next		5083971	0					
ANR	5084034	CastTarget	ulong		5083971	0					
ANR	5084035	Identifier	next		5083971	1					
ANR	5084036	ExpressionStatement	"gs_notify_all ( & pfont -> notify_list , NULL )"	166:4:5810:5850	5083971	9	True				
ANR	5084037	CallExpression	"gs_notify_all ( & pfont -> notify_list , NULL )"		5083971	0					
ANR	5084038	Callee	gs_notify_all		5083971	0					
ANR	5084039	Identifier	gs_notify_all		5083971	0					
ANR	5084040	ArgumentList	& pfont -> notify_list		5083971	1					
ANR	5084041	Argument	& pfont -> notify_list		5083971	0					
ANR	5084042	UnaryOperationExpression	& pfont -> notify_list		5083971	0					
ANR	5084043	UnaryOperator	&		5083971	0					
ANR	5084044	PtrMemberAccess	pfont -> notify_list		5083971	1					
ANR	5084045	Identifier	pfont		5083971	0					
ANR	5084046	Identifier	notify_list		5083971	1					
ANR	5084047	Argument	NULL		5083971	1					
ANR	5084048	Identifier	NULL		5083971	0					
ANR	5084049	ExpressionStatement	gs_purge_font_from_char_caches ( pfont )	167:4:5856:5893	5083971	10	True				
ANR	5084050	CallExpression	gs_purge_font_from_char_caches ( pfont )		5083971	0					
ANR	5084051	Callee	gs_purge_font_from_char_caches		5083971	0					
ANR	5084052	Identifier	gs_purge_font_from_char_caches		5083971	0					
ANR	5084053	ArgumentList	pfont		5083971	1					
ANR	5084054	Argument	pfont		5083971	0					
ANR	5084055	Identifier	pfont		5083971	0					
ANR	5084056	IfStatement	if ( pfont -> dir == 0 )		5083971	11					
ANR	5084057	Condition	pfont -> dir == 0	168:8:5903:5917	5083971	0	True				
ANR	5084058	EqualityExpression	pfont -> dir == 0		5083971	0		==			
ANR	5084059	PtrMemberAccess	pfont -> dir		5083971	0					
ANR	5084060	Identifier	pfont		5083971	0					
ANR	5084061	Identifier	dir		5083971	1					
ANR	5084062	PrimaryExpression	0		5083971	1					
ANR	5084063	ExpressionStatement	ppfirst = 0	169:8:5928:5939	5083971	1	True				
ANR	5084064	AssignmentExpression	ppfirst = 0		5083971	0		=			
ANR	5084065	Identifier	ppfirst		5083971	0					
ANR	5084066	PrimaryExpression	0		5083971	1					
ANR	5084067	ElseStatement	else		5083971	0					
ANR	5084068	IfStatement	if ( pfont -> base == pfont )		5083971	0					
ANR	5084069	Condition	pfont -> base == pfont	170:13:5954:5973	5083971	0	True				
ANR	5084070	EqualityExpression	pfont -> base == pfont		5083971	0		==			
ANR	5084071	PtrMemberAccess	pfont -> base		5083971	0					
ANR	5084072	Identifier	pfont		5083971	0					
ANR	5084073	Identifier	base		5083971	1					
ANR	5084074	Identifier	pfont		5083971	1					
ANR	5084075	ExpressionStatement	ppfirst = & pfont -> dir -> orig_fonts	171:8:5984:6017	5083971	1	True				
ANR	5084076	AssignmentExpression	ppfirst = & pfont -> dir -> orig_fonts		5083971	0		=			
ANR	5084077	Identifier	ppfirst		5083971	0					
ANR	5084078	UnaryOperationExpression	& pfont -> dir -> orig_fonts		5083971	1					
ANR	5084079	UnaryOperator	&		5083971	0					
ANR	5084080	PtrMemberAccess	pfont -> dir -> orig_fonts		5083971	1					
ANR	5084081	PtrMemberAccess	pfont -> dir		5083971	0					
ANR	5084082	Identifier	pfont		5083971	0					
ANR	5084083	Identifier	dir		5083971	1					
ANR	5084084	Identifier	orig_fonts		5083971	1					
ANR	5084085	ElseStatement	else		5083971	0					
ANR	5084086	CompoundStatement		17:9:601:601	5083971	0					
ANR	5084087	IfStatement	if ( next || prev || pfont -> dir -> scaled_fonts == pfont )		5083971	0					
ANR	5084088	Condition	next || prev || pfont -> dir -> scaled_fonts == pfont	177:12:6199:6247	5083971	0	True				
ANR	5084089	OrExpression	next || prev || pfont -> dir -> scaled_fonts == pfont		5083971	0		||			
ANR	5084090	Identifier	next		5083971	0					
ANR	5084091	OrExpression	prev || pfont -> dir -> scaled_fonts == pfont		5083971	1		||			
ANR	5084092	Identifier	prev		5083971	0					
ANR	5084093	EqualityExpression	pfont -> dir -> scaled_fonts == pfont		5083971	1		==			
ANR	5084094	PtrMemberAccess	pfont -> dir -> scaled_fonts		5083971	0					
ANR	5084095	PtrMemberAccess	pfont -> dir		5083971	0					
ANR	5084096	Identifier	pfont		5083971	0					
ANR	5084097	Identifier	dir		5083971	1					
ANR	5084098	Identifier	scaled_fonts		5083971	1					
ANR	5084099	Identifier	pfont		5083971	1					
ANR	5084100	ExpressionStatement	pfont -> dir -> ssize --	178:12:6262:6281	5083971	1	True				
ANR	5084101	PostIncDecOperationExpression	pfont -> dir -> ssize --		5083971	0					
ANR	5084102	PtrMemberAccess	pfont -> dir -> ssize		5083971	0					
ANR	5084103	PtrMemberAccess	pfont -> dir		5083971	0					
ANR	5084104	Identifier	pfont		5083971	0					
ANR	5084105	Identifier	dir		5083971	1					
ANR	5084106	Identifier	ssize		5083971	1					
ANR	5084107	IncDec	--		5083971	1					
ANR	5084108	ExpressionStatement	ppfirst = & pfont -> dir -> scaled_fonts	179:8:6291:6326	5083971	1	True				
ANR	5084109	AssignmentExpression	ppfirst = & pfont -> dir -> scaled_fonts		5083971	0		=			
ANR	5084110	Identifier	ppfirst		5083971	0					
ANR	5084111	UnaryOperationExpression	& pfont -> dir -> scaled_fonts		5083971	1					
ANR	5084112	UnaryOperator	&		5083971	0					
ANR	5084113	PtrMemberAccess	pfont -> dir -> scaled_fonts		5083971	1					
ANR	5084114	PtrMemberAccess	pfont -> dir		5083971	0					
ANR	5084115	Identifier	pfont		5083971	0					
ANR	5084116	Identifier	dir		5083971	1					
ANR	5084117	Identifier	scaled_fonts		5083971	1					
ANR	5084118	IfStatement	if ( next != 0 && next -> prev == pfont )		5083971	12					
ANR	5084119	Condition	next != 0 && next -> prev == pfont	185:8:6445:6476	5083971	0	True				
ANR	5084120	AndExpression	next != 0 && next -> prev == pfont		5083971	0		&&			
ANR	5084121	EqualityExpression	next != 0		5083971	0		!=			
ANR	5084122	Identifier	next		5083971	0					
ANR	5084123	PrimaryExpression	0		5083971	1					
ANR	5084124	EqualityExpression	next -> prev == pfont		5083971	1		==			
ANR	5084125	PtrMemberAccess	next -> prev		5083971	0					
ANR	5084126	Identifier	next		5083971	0					
ANR	5084127	Identifier	prev		5083971	1					
ANR	5084128	Identifier	pfont		5083971	1					
ANR	5084129	ExpressionStatement	next -> prev = prev	186:8:6487:6504	5083971	1	True				
ANR	5084130	AssignmentExpression	next -> prev = prev		5083971	0		=			
ANR	5084131	PtrMemberAccess	next -> prev		5083971	0					
ANR	5084132	Identifier	next		5083971	0					
ANR	5084133	Identifier	prev		5083971	1					
ANR	5084134	Identifier	prev		5083971	1					
ANR	5084135	IfStatement	if ( prev != 0 )		5083971	13					
ANR	5084136	Condition	prev != 0	187:8:6514:6522	5083971	0	True				
ANR	5084137	EqualityExpression	prev != 0		5083971	0		!=			
ANR	5084138	Identifier	prev		5083971	0					
ANR	5084139	PrimaryExpression	0		5083971	1					
ANR	5084140	CompoundStatement		32:19:1098:1098	5083971	1					
ANR	5084141	IfStatement	if ( prev -> next == pfont )		5083971	0					
ANR	5084142	Condition	prev -> next == pfont	188:12:6539:6557	5083971	0	True				
ANR	5084143	EqualityExpression	prev -> next == pfont		5083971	0		==			
ANR	5084144	PtrMemberAccess	prev -> next		5083971	0					
ANR	5084145	Identifier	prev		5083971	0					
ANR	5084146	Identifier	next		5083971	1					
ANR	5084147	Identifier	pfont		5083971	1					
ANR	5084148	ExpressionStatement	prev -> next = next	189:12:6572:6589	5083971	1	True				
ANR	5084149	AssignmentExpression	prev -> next = next		5083971	0		=			
ANR	5084150	PtrMemberAccess	prev -> next		5083971	0					
ANR	5084151	Identifier	prev		5083971	0					
ANR	5084152	Identifier	next		5083971	1					
ANR	5084153	Identifier	next		5083971	1					
ANR	5084154	ElseStatement	else		5083971	0					
ANR	5084155	IfStatement	if ( ppfirst != 0 && * ppfirst == pfont )		5083971	0					
ANR	5084156	Condition	ppfirst != 0 && * ppfirst == pfont	190:15:6606:6638	5083971	0	True				
ANR	5084157	AndExpression	ppfirst != 0 && * ppfirst == pfont		5083971	0		&&			
ANR	5084158	EqualityExpression	ppfirst != 0		5083971	0		!=			
ANR	5084159	Identifier	ppfirst		5083971	0					
ANR	5084160	PrimaryExpression	0		5083971	1					
ANR	5084161	EqualityExpression	* ppfirst == pfont		5083971	1		==			
ANR	5084162	UnaryOperationExpression	* ppfirst		5083971	0					
ANR	5084163	UnaryOperator	*		5083971	0					
ANR	5084164	Identifier	ppfirst		5083971	1					
ANR	5084165	Identifier	pfont		5083971	1					
ANR	5084166	ExpressionStatement	* ppfirst = next	191:8:6649:6664	5083971	1	True				
ANR	5084167	AssignmentExpression	* ppfirst = next		5083971	0		=			
ANR	5084168	UnaryOperationExpression	* ppfirst		5083971	0					
ANR	5084169	UnaryOperator	*		5083971	0					
ANR	5084170	Identifier	ppfirst		5083971	1					
ANR	5084171	Identifier	next		5083971	1					
ANR	5084172	ExpressionStatement	gs_notify_release ( & pfont -> notify_list )	192:4:6670:6708	5083971	14	True				
ANR	5084173	CallExpression	gs_notify_release ( & pfont -> notify_list )		5083971	0					
ANR	5084174	Callee	gs_notify_release		5083971	0					
ANR	5084175	Identifier	gs_notify_release		5083971	0					
ANR	5084176	ArgumentList	& pfont -> notify_list		5083971	1					
ANR	5084177	Argument	& pfont -> notify_list		5083971	0					
ANR	5084178	UnaryOperationExpression	& pfont -> notify_list		5083971	0					
ANR	5084179	UnaryOperator	&		5083971	0					
ANR	5084180	PtrMemberAccess	pfont -> notify_list		5083971	1					
ANR	5084181	Identifier	pfont		5083971	0					
ANR	5084182	Identifier	notify_list		5083971	1					
ANR	5084183	ReturnType	undef r1 RELOC_PTRS_END void		5083971	1					
ANR	5084184	Identifier	gs_font_finalize		5083971	2					
ANR	5084185	ParameterList	"const gs_memory_t * cmem , void * vptr"		5083971	3					
ANR	5084186	Parameter	const gs_memory_t * cmem	155:17:5389:5411	5083971	0	True				
ANR	5084187	ParameterType	const gs_memory_t *		5083971	0					
ANR	5084188	Identifier	cmem		5083971	1					
ANR	5084189	Parameter	void * vptr	155:42:5414:5423	5083971	1	True				
ANR	5084190	ParameterType	void *		5083971	0					
ANR	5084191	Identifier	vptr		5083971	1					
ANR	5084192	CFGEntryNode	ENTRY		5083971		True				
ANR	5084193	CFGExitNode	EXIT		5083971		True				
ANR	5084194	Symbol	next		5083971						
ANR	5084195	Symbol	prev -> next		5083971						
ANR	5084196	Symbol	pfont -> dir -> ssize		5083971						
ANR	5084197	Symbol	NULL		5083971						
ANR	5084198	Symbol	pfont		5083971						
ANR	5084199	Symbol	prev		5083971						
ANR	5084200	Symbol	* * pfont		5083971						
ANR	5084201	Symbol	* prev		5083971						
ANR	5084202	Symbol	* next		5083971						
ANR	5084203	Symbol	vptr		5083971						
ANR	5084204	Symbol	pfont -> base		5083971						
ANR	5084205	Symbol	& pfont -> dir -> orig_fonts		5083971						
ANR	5084206	Symbol	* pfont		5083971						
ANR	5084207	Symbol	pfont -> dir -> scaled_fonts		5083971						
ANR	5084208	Symbol	pfont -> dir		5083971						
ANR	5084209	Symbol	next -> prev		5083971						
ANR	5084210	Symbol	pfont -> prev		5083971						
ANR	5084211	Symbol	ppfirst		5083971						
ANR	5084212	Symbol	pfont -> next		5083971						
ANR	5084213	Symbol	& pfont -> notify_list		5083971						
ANR	5084214	Symbol	* pfont -> dir		5083971						
ANR	5084215	Symbol	& pfont -> dir -> scaled_fonts		5083971						
ANR	5084216	Symbol	cmem		5083971						
ANR	5084217	Symbol	* ppfirst		5083971						
ANR	5084218	Function	cc_no_mark_glyph	212:0:7525:7633							
ANR	5084219	FunctionDef	"cc_no_mark_glyph (const gs_memory_t * mem , gs_glyph glyph , void * ignore_data)"		5084218	0					
ANR	5084220	CompoundStatement		214:0:7613:7633	5084218	0					
ANR	5084221	ReturnStatement	return false ;	215:4:7619:7631	5084218	0	True				
ANR	5084222	Identifier	false		5084218	0					
ANR	5084223	ReturnType	static bool		5084218	1					
ANR	5084224	Identifier	cc_no_mark_glyph		5084218	2					
ANR	5084225	ParameterList	"const gs_memory_t * mem , gs_glyph glyph , void * ignore_data"		5084218	3					
ANR	5084226	Parameter	const gs_memory_t * mem	213:17:7554:7575	5084218	0	True				
ANR	5084227	ParameterType	const gs_memory_t *		5084218	0					
ANR	5084228	Identifier	mem		5084218	1					
ANR	5084229	Parameter	gs_glyph glyph	213:41:7578:7591	5084218	1	True				
ANR	5084230	ParameterType	gs_glyph		5084218	0					
ANR	5084231	Identifier	glyph		5084218	1					
ANR	5084232	Parameter	void * ignore_data	213:57:7594:7610	5084218	2	True				
ANR	5084233	ParameterType	void *		5084218	0					
ANR	5084234	Identifier	ignore_data		5084218	1					
ANR	5084235	CFGEntryNode	ENTRY		5084218		True				
ANR	5084236	CFGExitNode	EXIT		5084218		True				
ANR	5084237	Symbol	glyph		5084218						
ANR	5084238	Symbol	mem		5084218						
ANR	5084239	Symbol	false		5084218						
ANR	5084240	Symbol	ignore_data		5084218						
ANR	5084241	Function	gs_font_dir_alloc2	217:0:7635:8510							
ANR	5084242	FunctionDef	"gs_font_dir_alloc2 (gs_memory_t * struct_mem , gs_memory_t * bits_mem)"		5084241	0					
ANR	5084243	CompoundStatement		219:0:7718:8510	5084241	0					
ANR	5084244	IdentifierDeclStatement	gs_font_dir * pdir = 0 ;	220:4:7724:7745	5084241	0	True				
ANR	5084245	IdentifierDecl	* pdir = 0		5084241	0					
ANR	5084246	IdentifierDeclType	gs_font_dir *		5084241	0					
ANR	5084247	Identifier	pdir		5084241	1					
ANR	5084248	AssignmentExpression	* pdir = 0		5084241	2		=			
ANR	5084249	Identifier	pdir		5084241	0					
ANR	5084250	PrimaryExpression	0		5084241	1					
ANR	5084251	Statement	ifdef	223:3:7774:7778	5084241	1	True				
ANR	5084252	Statement	DEBUG	223:9:7780:7784	5084241	2	True				
ANR	5084253	IfStatement	if ( ! gs_debug_c ( '.' ) )		5084241	3					
ANR	5084254	Condition	! gs_debug_c ( '.' )	224:8:7794:7809	5084241	0	True				
ANR	5084255	UnaryOperationExpression	! gs_debug_c ( '.' )		5084241	0					
ANR	5084256	UnaryOperator	!		5084241	0					
ANR	5084257	CallExpression	gs_debug_c ( '.' )		5084241	1					
ANR	5084258	Callee	gs_debug_c		5084241	0					
ANR	5084259	Identifier	gs_debug_c		5084241	0					
ANR	5084260	ArgumentList	'.'		5084241	1					
ANR	5084261	Argument	'.'		5084241	0					
ANR	5084262	PrimaryExpression	'.'		5084241	0					
ANR	5084263	Statement	endif	225:3:7815:7819	5084241	1	True				
ANR	5084264	CompoundStatement		8:4:106:106	5084241	4					
ANR	5084265	ExpressionStatement	"pdir = gs_font_dir_alloc2_limits ( struct_mem , bits_mem , smax_LARGE , bmax_LARGE , mmax_LARGE , cmax_LARGE , blimit_LARGE )"	228:8:7930:8128	5084241	0	True				
ANR	5084266	AssignmentExpression	"pdir = gs_font_dir_alloc2_limits ( struct_mem , bits_mem , smax_LARGE , bmax_LARGE , mmax_LARGE , cmax_LARGE , blimit_LARGE )"		5084241	0		=			
ANR	5084267	Identifier	pdir		5084241	0					
ANR	5084268	CallExpression	"gs_font_dir_alloc2_limits ( struct_mem , bits_mem , smax_LARGE , bmax_LARGE , mmax_LARGE , cmax_LARGE , blimit_LARGE )"		5084241	1					
ANR	5084269	Callee	gs_font_dir_alloc2_limits		5084241	0					
ANR	5084270	Identifier	gs_font_dir_alloc2_limits		5084241	0					
ANR	5084271	ArgumentList	struct_mem		5084241	1					
ANR	5084272	Argument	struct_mem		5084241	0					
ANR	5084273	Identifier	struct_mem		5084241	0					
ANR	5084274	Argument	bits_mem		5084241	1					
ANR	5084275	Identifier	bits_mem		5084241	0					
ANR	5084276	Argument	smax_LARGE		5084241	2					
ANR	5084277	Identifier	smax_LARGE		5084241	0					
ANR	5084278	Argument	bmax_LARGE		5084241	3					
ANR	5084279	Identifier	bmax_LARGE		5084241	0					
ANR	5084280	Argument	mmax_LARGE		5084241	4					
ANR	5084281	Identifier	mmax_LARGE		5084241	0					
ANR	5084282	Argument	cmax_LARGE		5084241	5					
ANR	5084283	Identifier	cmax_LARGE		5084241	0					
ANR	5084284	Argument	blimit_LARGE		5084241	6					
ANR	5084285	Identifier	blimit_LARGE		5084241	0					
ANR	5084286	IfStatement	if ( pdir == 0 )		5084241	5					
ANR	5084287	Condition	pdir == 0	232:8:8144:8152	5084241	0	True				
ANR	5084288	EqualityExpression	pdir == 0		5084241	0		==			
ANR	5084289	Identifier	pdir		5084241	0					
ANR	5084290	PrimaryExpression	0		5084241	1					
ANR	5084291	ExpressionStatement	"pdir = gs_font_dir_alloc2_limits ( struct_mem , bits_mem , smax_SMALL , bmax_SMALL , mmax_SMALL , cmax_SMALL , blimit_SMALL )"	234:8:8170:8368	5084241	1	True				
ANR	5084292	AssignmentExpression	"pdir = gs_font_dir_alloc2_limits ( struct_mem , bits_mem , smax_SMALL , bmax_SMALL , mmax_SMALL , cmax_SMALL , blimit_SMALL )"		5084241	0		=			
ANR	5084293	Identifier	pdir		5084241	0					
ANR	5084294	CallExpression	"gs_font_dir_alloc2_limits ( struct_mem , bits_mem , smax_SMALL , bmax_SMALL , mmax_SMALL , cmax_SMALL , blimit_SMALL )"		5084241	1					
ANR	5084295	Callee	gs_font_dir_alloc2_limits		5084241	0					
ANR	5084296	Identifier	gs_font_dir_alloc2_limits		5084241	0					
ANR	5084297	ArgumentList	struct_mem		5084241	1					
ANR	5084298	Argument	struct_mem		5084241	0					
ANR	5084299	Identifier	struct_mem		5084241	0					
ANR	5084300	Argument	bits_mem		5084241	1					
ANR	5084301	Identifier	bits_mem		5084241	0					
ANR	5084302	Argument	smax_SMALL		5084241	2					
ANR	5084303	Identifier	smax_SMALL		5084241	0					
ANR	5084304	Argument	bmax_SMALL		5084241	3					
ANR	5084305	Identifier	bmax_SMALL		5084241	0					
ANR	5084306	Argument	mmax_SMALL		5084241	4					
ANR	5084307	Identifier	mmax_SMALL		5084241	0					
ANR	5084308	Argument	cmax_SMALL		5084241	5					
ANR	5084309	Identifier	cmax_SMALL		5084241	0					
ANR	5084310	Argument	blimit_SMALL		5084241	6					
ANR	5084311	Identifier	blimit_SMALL		5084241	0					
ANR	5084312	IfStatement	if ( pdir == 0 )		5084241	6					
ANR	5084313	Condition	pdir == 0	237:8:8378:8386	5084241	0	True				
ANR	5084314	EqualityExpression	pdir == 0		5084241	0		==			
ANR	5084315	Identifier	pdir		5084241	0					
ANR	5084316	PrimaryExpression	0		5084241	1					
ANR	5084317	ReturnStatement	return 0 ;	238:8:8397:8405	5084241	1	True				
ANR	5084318	PrimaryExpression	0		5084241	0					
ANR	5084319	ExpressionStatement	pdir -> ccache . mark_glyph = cc_no_mark_glyph	239:4:8411:8453	5084241	7	True				
ANR	5084320	AssignmentExpression	pdir -> ccache . mark_glyph = cc_no_mark_glyph		5084241	0		=			
ANR	5084321	MemberAccess	pdir -> ccache . mark_glyph		5084241	0					
ANR	5084322	PtrMemberAccess	pdir -> ccache		5084241	0					
ANR	5084323	Identifier	pdir		5084241	0					
ANR	5084324	Identifier	ccache		5084241	1					
ANR	5084325	Identifier	mark_glyph		5084241	1					
ANR	5084326	Identifier	cc_no_mark_glyph		5084241	1					
ANR	5084327	ExpressionStatement	pdir -> ccache . mark_glyph_data = 0	240:4:8459:8491	5084241	8	True				
ANR	5084328	AssignmentExpression	pdir -> ccache . mark_glyph_data = 0		5084241	0		=			
ANR	5084329	MemberAccess	pdir -> ccache . mark_glyph_data		5084241	0					
ANR	5084330	PtrMemberAccess	pdir -> ccache		5084241	0					
ANR	5084331	Identifier	pdir		5084241	0					
ANR	5084332	Identifier	ccache		5084241	1					
ANR	5084333	Identifier	mark_glyph_data		5084241	1					
ANR	5084334	PrimaryExpression	0		5084241	1					
ANR	5084335	ReturnStatement	return pdir ;	241:4:8497:8508	5084241	9	True				
ANR	5084336	Identifier	pdir		5084241	0					
ANR	5084337	ReturnType	gs_font_dir *		5084241	1					
ANR	5084338	Identifier	gs_font_dir_alloc2		5084241	2					
ANR	5084339	ParameterList	"gs_memory_t * struct_mem , gs_memory_t * bits_mem"		5084241	3					
ANR	5084340	Parameter	gs_memory_t * struct_mem	218:19:7668:7691	5084241	0	True				
ANR	5084341	ParameterType	gs_memory_t *		5084241	0					
ANR	5084342	Identifier	struct_mem		5084241	1					
ANR	5084343	Parameter	gs_memory_t * bits_mem	218:45:7694:7715	5084241	1	True				
ANR	5084344	ParameterType	gs_memory_t *		5084241	0					
ANR	5084345	Identifier	bits_mem		5084241	1					
ANR	5084346	CFGEntryNode	ENTRY		5084241		True				
ANR	5084347	CFGExitNode	EXIT		5084241		True				
ANR	5084348	Symbol	pdir -> ccache . mark_glyph		5084241						
ANR	5084349	Symbol	gs_font_dir_alloc2_limits		5084241						
ANR	5084350	Symbol	blimit_LARGE		5084241						
ANR	5084351	Symbol	mmax_LARGE		5084241						
ANR	5084352	Symbol	smax_LARGE		5084241						
ANR	5084353	Symbol	mmax_SMALL		5084241						
ANR	5084354	Symbol	pdir -> ccache . mark_glyph_data		5084241						
ANR	5084355	Symbol	cc_no_mark_glyph		5084241						
ANR	5084356	Symbol	bits_mem		5084241						
ANR	5084357	Symbol	pdir		5084241						
ANR	5084358	Symbol	smax_SMALL		5084241						
ANR	5084359	Symbol	pdir -> ccache		5084241						
ANR	5084360	Symbol	cmax_LARGE		5084241						
ANR	5084361	Symbol	cmax_SMALL		5084241						
ANR	5084362	Symbol	* pdir		5084241						
ANR	5084363	Symbol	struct_mem		5084241						
ANR	5084364	Symbol	bmax_LARGE		5084241						
ANR	5084365	Symbol	gs_debug_c		5084241						
ANR	5084366	Symbol	bmax_SMALL		5084241						
ANR	5084367	Symbol	blimit_SMALL		5084241						
ANR	5084368	Function	gs_font_dir_alloc2_limits	243:0:8512:9738							
ANR	5084369	FunctionDef	"gs_font_dir_alloc2_limits (gs_memory_t * struct_mem , gs_memory_t * bits_mem , uint smax , uint bmax , uint mmax , uint cmax , uint upper)"		5084368	0					
ANR	5084370	CompoundStatement		246:0:8679:9738	5084368	0					
ANR	5084371	IdentifierDeclStatement	"gs_font_dir * pdir = gs_alloc_struct ( struct_mem , gs_font_dir , & st_font_dir , ""font_dir_alloc(dir)"" ) ;"	247:4:8685:8814	5084368	0	True				
ANR	5084372	IdentifierDecl	"* pdir = gs_alloc_struct ( struct_mem , gs_font_dir , & st_font_dir , ""font_dir_alloc(dir)"" )"		5084368	0					
ANR	5084373	IdentifierDeclType	gs_font_dir *		5084368	0					
ANR	5084374	Identifier	pdir		5084368	1					
ANR	5084375	AssignmentExpression	"* pdir = gs_alloc_struct ( struct_mem , gs_font_dir , & st_font_dir , ""font_dir_alloc(dir)"" )"		5084368	2		=			
ANR	5084376	Identifier	pdir		5084368	0					
ANR	5084377	CallExpression	"gs_alloc_struct ( struct_mem , gs_font_dir , & st_font_dir , ""font_dir_alloc(dir)"" )"		5084368	1					
ANR	5084378	Callee	gs_alloc_struct		5084368	0					
ANR	5084379	Identifier	gs_alloc_struct		5084368	0					
ANR	5084380	ArgumentList	struct_mem		5084368	1					
ANR	5084381	Argument	struct_mem		5084368	0					
ANR	5084382	Identifier	struct_mem		5084368	0					
ANR	5084383	Argument	gs_font_dir		5084368	1					
ANR	5084384	Identifier	gs_font_dir		5084368	0					
ANR	5084385	Argument	& st_font_dir		5084368	2					
ANR	5084386	UnaryOperationExpression	& st_font_dir		5084368	0					
ANR	5084387	UnaryOperator	&		5084368	0					
ANR	5084388	Identifier	st_font_dir		5084368	1					
ANR	5084389	Argument	"""font_dir_alloc(dir)"""		5084368	3					
ANR	5084390	PrimaryExpression	"""font_dir_alloc(dir)"""		5084368	0					
ANR	5084391	IdentifierDeclStatement	int code ;	250:4:8820:8828	5084368	1	True				
ANR	5084392	IdentifierDecl	code		5084368	0					
ANR	5084393	IdentifierDeclType	int		5084368	0					
ANR	5084394	Identifier	code		5084368	1					
ANR	5084395	IfStatement	if ( pdir == 0 )		5084368	2					
ANR	5084396	Condition	pdir == 0	252:8:8839:8847	5084368	0	True				
ANR	5084397	EqualityExpression	pdir == 0		5084368	0		==			
ANR	5084398	Identifier	pdir		5084368	0					
ANR	5084399	PrimaryExpression	0		5084368	1					
ANR	5084400	ReturnStatement	return 0 ;	253:8:8858:8866	5084368	1	True				
ANR	5084401	PrimaryExpression	0		5084368	0					
ANR	5084402	ExpressionStatement	"memset ( pdir , 0 , sizeof ( * pdir ) )"	254:4:8872:8902	5084368	3	True				
ANR	5084403	CallExpression	"memset ( pdir , 0 , sizeof ( * pdir ) )"		5084368	0					
ANR	5084404	Callee	memset		5084368	0					
ANR	5084405	Identifier	memset		5084368	0					
ANR	5084406	ArgumentList	pdir		5084368	1					
ANR	5084407	Argument	pdir		5084368	0					
ANR	5084408	Identifier	pdir		5084368	0					
ANR	5084409	Argument	0		5084368	1					
ANR	5084410	PrimaryExpression	0		5084368	0					
ANR	5084411	Argument	sizeof ( * pdir )		5084368	2					
ANR	5084412	SizeofExpression	sizeof ( * pdir )		5084368	0					
ANR	5084413	Sizeof	sizeof		5084368	0					
ANR	5084414	UnaryOperationExpression	* pdir		5084368	1					
ANR	5084415	UnaryOperator	*		5084368	0					
ANR	5084416	Identifier	pdir		5084368	1					
ANR	5084417	ExpressionStatement	"code = gx_char_cache_alloc ( struct_mem , bits_mem , pdir , bmax , mmax , cmax , upper )"	255:4:8908:9018	5084368	4	True				
ANR	5084418	AssignmentExpression	"code = gx_char_cache_alloc ( struct_mem , bits_mem , pdir , bmax , mmax , cmax , upper )"		5084368	0		=			
ANR	5084419	Identifier	code		5084368	0					
ANR	5084420	CallExpression	"gx_char_cache_alloc ( struct_mem , bits_mem , pdir , bmax , mmax , cmax , upper )"		5084368	1					
ANR	5084421	Callee	gx_char_cache_alloc		5084368	0					
ANR	5084422	Identifier	gx_char_cache_alloc		5084368	0					
ANR	5084423	ArgumentList	struct_mem		5084368	1					
ANR	5084424	Argument	struct_mem		5084368	0					
ANR	5084425	Identifier	struct_mem		5084368	0					
ANR	5084426	Argument	bits_mem		5084368	1					
ANR	5084427	Identifier	bits_mem		5084368	0					
ANR	5084428	Argument	pdir		5084368	2					
ANR	5084429	Identifier	pdir		5084368	0					
ANR	5084430	Argument	bmax		5084368	3					
ANR	5084431	Identifier	bmax		5084368	0					
ANR	5084432	Argument	mmax		5084368	4					
ANR	5084433	Identifier	mmax		5084368	0					
ANR	5084434	Argument	cmax		5084368	5					
ANR	5084435	Identifier	cmax		5084368	0					
ANR	5084436	Argument	upper		5084368	6					
ANR	5084437	Identifier	upper		5084368	0					
ANR	5084438	IfStatement	if ( code < 0 )		5084368	5					
ANR	5084439	Condition	code < 0	257:8:9028:9035	5084368	0	True				
ANR	5084440	RelationalExpression	code < 0		5084368	0		<			
ANR	5084441	Identifier	code		5084368	0					
ANR	5084442	PrimaryExpression	0		5084368	1					
ANR	5084443	CompoundStatement		12:18:358:358	5084368	1					
ANR	5084444	ExpressionStatement	"gs_free_object ( struct_mem , pdir -> ccache . table , ""font_dir_alloc(chars)"" )"	258:8:9048:9119	5084368	0	True				
ANR	5084445	CallExpression	"gs_free_object ( struct_mem , pdir -> ccache . table , ""font_dir_alloc(chars)"" )"		5084368	0					
ANR	5084446	Callee	gs_free_object		5084368	0					
ANR	5084447	Identifier	gs_free_object		5084368	0					
ANR	5084448	ArgumentList	struct_mem		5084368	1					
ANR	5084449	Argument	struct_mem		5084368	0					
ANR	5084450	Identifier	struct_mem		5084368	0					
ANR	5084451	Argument	pdir -> ccache . table		5084368	1					
ANR	5084452	MemberAccess	pdir -> ccache . table		5084368	0					
ANR	5084453	PtrMemberAccess	pdir -> ccache		5084368	0					
ANR	5084454	Identifier	pdir		5084368	0					
ANR	5084455	Identifier	ccache		5084368	1					
ANR	5084456	Identifier	table		5084368	1					
ANR	5084457	Argument	"""font_dir_alloc(chars)"""		5084368	2					
ANR	5084458	PrimaryExpression	"""font_dir_alloc(chars)"""		5084368	0					
ANR	5084459	ExpressionStatement	"gs_free_object ( struct_mem , pdir -> fmcache . mdata , ""font_dir_alloc(mdata)"" )"	259:8:9129:9201	5084368	1	True				
ANR	5084460	CallExpression	"gs_free_object ( struct_mem , pdir -> fmcache . mdata , ""font_dir_alloc(mdata)"" )"		5084368	0					
ANR	5084461	Callee	gs_free_object		5084368	0					
ANR	5084462	Identifier	gs_free_object		5084368	0					
ANR	5084463	ArgumentList	struct_mem		5084368	1					
ANR	5084464	Argument	struct_mem		5084368	0					
ANR	5084465	Identifier	struct_mem		5084368	0					
ANR	5084466	Argument	pdir -> fmcache . mdata		5084368	1					
ANR	5084467	MemberAccess	pdir -> fmcache . mdata		5084368	0					
ANR	5084468	PtrMemberAccess	pdir -> fmcache		5084368	0					
ANR	5084469	Identifier	pdir		5084368	0					
ANR	5084470	Identifier	fmcache		5084368	1					
ANR	5084471	Identifier	mdata		5084368	1					
ANR	5084472	Argument	"""font_dir_alloc(mdata)"""		5084368	2					
ANR	5084473	PrimaryExpression	"""font_dir_alloc(mdata)"""		5084368	0					
ANR	5084474	ExpressionStatement	"gs_free_object ( struct_mem , pdir , ""font_dir_alloc(dir)"" )"	260:8:9211:9266	5084368	2	True				
ANR	5084475	CallExpression	"gs_free_object ( struct_mem , pdir , ""font_dir_alloc(dir)"" )"		5084368	0					
ANR	5084476	Callee	gs_free_object		5084368	0					
ANR	5084477	Identifier	gs_free_object		5084368	0					
ANR	5084478	ArgumentList	struct_mem		5084368	1					
ANR	5084479	Argument	struct_mem		5084368	0					
ANR	5084480	Identifier	struct_mem		5084368	0					
ANR	5084481	Argument	pdir		5084368	1					
ANR	5084482	Identifier	pdir		5084368	0					
ANR	5084483	Argument	"""font_dir_alloc(dir)"""		5084368	2					
ANR	5084484	PrimaryExpression	"""font_dir_alloc(dir)"""		5084368	0					
ANR	5084485	ReturnStatement	return 0 ;	261:8:9276:9284	5084368	3	True				
ANR	5084486	PrimaryExpression	0		5084368	0					
ANR	5084487	ExpressionStatement	pdir -> orig_fonts = 0	263:4:9296:9316	5084368	6	True				
ANR	5084488	AssignmentExpression	pdir -> orig_fonts = 0		5084368	0		=			
ANR	5084489	PtrMemberAccess	pdir -> orig_fonts		5084368	0					
ANR	5084490	Identifier	pdir		5084368	0					
ANR	5084491	Identifier	orig_fonts		5084368	1					
ANR	5084492	PrimaryExpression	0		5084368	1					
ANR	5084493	ExpressionStatement	pdir -> scaled_fonts = 0	264:4:9322:9344	5084368	7	True				
ANR	5084494	AssignmentExpression	pdir -> scaled_fonts = 0		5084368	0		=			
ANR	5084495	PtrMemberAccess	pdir -> scaled_fonts		5084368	0					
ANR	5084496	Identifier	pdir		5084368	0					
ANR	5084497	Identifier	scaled_fonts		5084368	1					
ANR	5084498	PrimaryExpression	0		5084368	1					
ANR	5084499	ExpressionStatement	pdir -> ssize = 0	265:4:9350:9365	5084368	8	True				
ANR	5084500	AssignmentExpression	pdir -> ssize = 0		5084368	0		=			
ANR	5084501	PtrMemberAccess	pdir -> ssize		5084368	0					
ANR	5084502	Identifier	pdir		5084368	0					
ANR	5084503	Identifier	ssize		5084368	1					
ANR	5084504	PrimaryExpression	0		5084368	1					
ANR	5084505	ExpressionStatement	pdir -> smax = smax	266:4:9371:9388	5084368	9	True				
ANR	5084506	AssignmentExpression	pdir -> smax = smax		5084368	0		=			
ANR	5084507	PtrMemberAccess	pdir -> smax		5084368	0					
ANR	5084508	Identifier	pdir		5084368	0					
ANR	5084509	Identifier	smax		5084368	1					
ANR	5084510	Identifier	smax		5084368	1					
ANR	5084511	ExpressionStatement	pdir -> align_to_pixels = false	267:4:9394:9423	5084368	10	True				
ANR	5084512	AssignmentExpression	pdir -> align_to_pixels = false		5084368	0		=			
ANR	5084513	PtrMemberAccess	pdir -> align_to_pixels		5084368	0					
ANR	5084514	Identifier	pdir		5084368	0					
ANR	5084515	Identifier	align_to_pixels		5084368	1					
ANR	5084516	Identifier	false		5084368	1					
ANR	5084517	ExpressionStatement	pdir -> glyph_to_unicode_table = NULL	268:4:9429:9464	5084368	11	True				
ANR	5084518	AssignmentExpression	pdir -> glyph_to_unicode_table = NULL		5084368	0		=			
ANR	5084519	PtrMemberAccess	pdir -> glyph_to_unicode_table		5084368	0					
ANR	5084520	Identifier	pdir		5084368	0					
ANR	5084521	Identifier	glyph_to_unicode_table		5084368	1					
ANR	5084522	Identifier	NULL		5084368	1					
ANR	5084523	ExpressionStatement	pdir -> grid_fit_tt = 1	269:4:9470:9491	5084368	12	True				
ANR	5084524	AssignmentExpression	pdir -> grid_fit_tt = 1		5084368	0		=			
ANR	5084525	PtrMemberAccess	pdir -> grid_fit_tt		5084368	0					
ANR	5084526	Identifier	pdir		5084368	0					
ANR	5084527	Identifier	grid_fit_tt		5084368	1					
ANR	5084528	PrimaryExpression	1		5084368	1					
ANR	5084529	ExpressionStatement	pdir -> memory = struct_mem	270:4:9497:9522	5084368	13	True				
ANR	5084530	AssignmentExpression	pdir -> memory = struct_mem		5084368	0		=			
ANR	5084531	PtrMemberAccess	pdir -> memory		5084368	0					
ANR	5084532	Identifier	pdir		5084368	0					
ANR	5084533	Identifier	memory		5084368	1					
ANR	5084534	Identifier	struct_mem		5084368	1					
ANR	5084535	ExpressionStatement	pdir -> tti = 0	271:4:9528:9541	5084368	14	True				
ANR	5084536	AssignmentExpression	pdir -> tti = 0		5084368	0		=			
ANR	5084537	PtrMemberAccess	pdir -> tti		5084368	0					
ANR	5084538	Identifier	pdir		5084368	0					
ANR	5084539	Identifier	tti		5084368	1					
ANR	5084540	PrimaryExpression	0		5084368	1					
ANR	5084541	ExpressionStatement	pdir -> ttm = 0	272:4:9547:9560	5084368	15	True				
ANR	5084542	AssignmentExpression	pdir -> ttm = 0		5084368	0		=			
ANR	5084543	PtrMemberAccess	pdir -> ttm		5084368	0					
ANR	5084544	Identifier	pdir		5084368	0					
ANR	5084545	Identifier	ttm		5084368	1					
ANR	5084546	PrimaryExpression	0		5084368	1					
ANR	5084547	ExpressionStatement	pdir -> san = 0	273:4:9566:9579	5084368	16	True				
ANR	5084548	AssignmentExpression	pdir -> san = 0		5084368	0		=			
ANR	5084549	PtrMemberAccess	pdir -> san		5084368	0					
ANR	5084550	Identifier	pdir		5084368	0					
ANR	5084551	Identifier	san		5084368	1					
ANR	5084552	PrimaryExpression	0		5084368	1					
ANR	5084553	ExpressionStatement	pdir -> global_glyph_code = NULL	274:4:9585:9615	5084368	17	True				
ANR	5084554	AssignmentExpression	pdir -> global_glyph_code = NULL		5084368	0		=			
ANR	5084555	PtrMemberAccess	pdir -> global_glyph_code		5084368	0					
ANR	5084556	Identifier	pdir		5084368	0					
ANR	5084557	Identifier	global_glyph_code		5084368	1					
ANR	5084558	Identifier	NULL		5084368	1					
ANR	5084559	ExpressionStatement	pdir -> text_enum_id = 0	275:4:9621:9643	5084368	18	True				
ANR	5084560	AssignmentExpression	pdir -> text_enum_id = 0		5084368	0		=			
ANR	5084561	PtrMemberAccess	pdir -> text_enum_id		5084368	0					
ANR	5084562	Identifier	pdir		5084368	0					
ANR	5084563	Identifier	text_enum_id		5084368	1					
ANR	5084564	PrimaryExpression	0		5084368	1					
ANR	5084565	ExpressionStatement	pdir -> hash = 42	276:4:9649:9664	5084368	19	True				
ANR	5084566	AssignmentExpression	pdir -> hash = 42		5084368	0		=			
ANR	5084567	PtrMemberAccess	pdir -> hash		5084368	0					
ANR	5084568	Identifier	pdir		5084368	0					
ANR	5084569	Identifier	hash		5084368	1					
ANR	5084570	PrimaryExpression	42		5084368	1					
ANR	5084571	ReturnStatement	return pdir ;	277:4:9725:9736	5084368	20	True				
ANR	5084572	Identifier	pdir		5084368	0					
ANR	5084573	ReturnType	gs_font_dir *		5084368	1					
ANR	5084574	Identifier	gs_font_dir_alloc2_limits		5084368	2					
ANR	5084575	ParameterList	"gs_memory_t * struct_mem , gs_memory_t * bits_mem , uint smax , uint bmax , uint mmax , uint cmax , uint upper"		5084368	3					
ANR	5084576	Parameter	gs_memory_t * struct_mem	244:26:8552:8575	5084368	0	True				
ANR	5084577	ParameterType	gs_memory_t *		5084368	0					
ANR	5084578	Identifier	struct_mem		5084368	1					
ANR	5084579	Parameter	gs_memory_t * bits_mem	244:52:8578:8599	5084368	1	True				
ANR	5084580	ParameterType	gs_memory_t *		5084368	0					
ANR	5084581	Identifier	bits_mem		5084368	1					
ANR	5084582	Parameter	uint smax	245:21:8623:8631	5084368	2	True				
ANR	5084583	ParameterType	uint		5084368	0					
ANR	5084584	Identifier	smax		5084368	1					
ANR	5084585	Parameter	uint bmax	245:32:8634:8642	5084368	3	True				
ANR	5084586	ParameterType	uint		5084368	0					
ANR	5084587	Identifier	bmax		5084368	1					
ANR	5084588	Parameter	uint mmax	245:43:8645:8653	5084368	4	True				
ANR	5084589	ParameterType	uint		5084368	0					
ANR	5084590	Identifier	mmax		5084368	1					
ANR	5084591	Parameter	uint cmax	245:54:8656:8664	5084368	5	True				
ANR	5084592	ParameterType	uint		5084368	0					
ANR	5084593	Identifier	cmax		5084368	1					
ANR	5084594	Parameter	uint upper	245:65:8667:8676	5084368	6	True				
ANR	5084595	ParameterType	uint		5084368	0					
ANR	5084596	Identifier	upper		5084368	1					
ANR	5084597	CFGEntryNode	ENTRY		5084368		True				
ANR	5084598	CFGExitNode	EXIT		5084368		True				
ANR	5084599	Symbol	pdir -> ttm		5084368						
ANR	5084600	Symbol	pdir -> fmcache		5084368						
ANR	5084601	Symbol	code		5084368						
ANR	5084602	Symbol	pdir -> orig_fonts		5084368						
ANR	5084603	Symbol	pdir -> grid_fit_tt		5084368						
ANR	5084604	Symbol	upper		5084368						
ANR	5084605	Symbol	gs_alloc_struct		5084368						
ANR	5084606	Symbol	bits_mem		5084368						
ANR	5084607	Symbol	pdir -> ccache		5084368						
ANR	5084608	Symbol	pdir -> scaled_fonts		5084368						
ANR	5084609	Symbol	cmax		5084368						
ANR	5084610	Symbol	struct_mem		5084368						
ANR	5084611	Symbol	pdir -> ccache . table		5084368						
ANR	5084612	Symbol	pdir -> smax		5084368						
ANR	5084613	Symbol	pdir -> align_to_pixels		5084368						
ANR	5084614	Symbol	gx_char_cache_alloc		5084368						
ANR	5084615	Symbol	pdir -> hash		5084368						
ANR	5084616	Symbol	& st_font_dir		5084368						
ANR	5084617	Symbol	NULL		5084368						
ANR	5084618	Symbol	smax		5084368						
ANR	5084619	Symbol	mmax		5084368						
ANR	5084620	Symbol	gs_font_dir		5084368						
ANR	5084621	Symbol	false		5084368						
ANR	5084622	Symbol	pdir		5084368						
ANR	5084623	Symbol	pdir -> ssize		5084368						
ANR	5084624	Symbol	bmax		5084368						
ANR	5084625	Symbol	pdir -> fmcache . mdata		5084368						
ANR	5084626	Symbol	* pdir		5084368						
ANR	5084627	Symbol	pdir -> text_enum_id		5084368						
ANR	5084628	Symbol	pdir -> glyph_to_unicode_table		5084368						
ANR	5084629	Symbol	pdir -> san		5084368						
ANR	5084630	Symbol	pdir -> global_glyph_code		5084368						
ANR	5084631	Symbol	pdir -> tti		5084368						
ANR	5084632	Symbol	pdir -> memory		5084368						
ANR	5084633	Function	gs_font_dir_finalize	279:0:9740:10667							
ANR	5084634	FunctionDef	"gs_font_dir_finalize (const gs_memory_t * cmem , void * vptr)"		5084633	0					
ANR	5084635	CompoundStatement		281:0:9810:10667	5084633	0					
ANR	5084636	IdentifierDeclStatement	gs_font_dir * pdir = vptr ;	282:4:9816:9840	5084633	0	True				
ANR	5084637	IdentifierDecl	* pdir = vptr		5084633	0					
ANR	5084638	IdentifierDeclType	gs_font_dir *		5084633	0					
ANR	5084639	Identifier	pdir		5084633	1					
ANR	5084640	AssignmentExpression	* pdir = vptr		5084633	2		=			
ANR	5084641	Identifier	vptr		5084633	0					
ANR	5084642	Identifier	vptr		5084633	1					
ANR	5084643	IdentifierDeclStatement	gx_bits_cache_chunk * chunk = pdir -> ccache . chunks ;	283:4:9846:9894	5084633	1	True				
ANR	5084644	IdentifierDecl	* chunk = pdir -> ccache . chunks		5084633	0					
ANR	5084645	IdentifierDeclType	gx_bits_cache_chunk *		5084633	0					
ANR	5084646	Identifier	chunk		5084633	1					
ANR	5084647	AssignmentExpression	* chunk = pdir -> ccache . chunks		5084633	2		=			
ANR	5084648	Identifier	chunk		5084633	0					
ANR	5084649	MemberAccess	pdir -> ccache . chunks		5084633	1					
ANR	5084650	PtrMemberAccess	pdir -> ccache		5084633	0					
ANR	5084651	Identifier	pdir		5084633	0					
ANR	5084652	Identifier	ccache		5084633	1					
ANR	5084653	Identifier	chunks		5084633	1					
ANR	5084654	IdentifierDeclStatement	gx_bits_cache_chunk * start_chunk = chunk ;	284:4:9900:9940	5084633	2	True				
ANR	5084655	IdentifierDecl	* start_chunk = chunk		5084633	0					
ANR	5084656	IdentifierDeclType	gx_bits_cache_chunk *		5084633	0					
ANR	5084657	Identifier	start_chunk		5084633	1					
ANR	5084658	AssignmentExpression	* start_chunk = chunk		5084633	2		=			
ANR	5084659	Identifier	chunk		5084633	0					
ANR	5084660	Identifier	chunk		5084633	1					
ANR	5084661	IdentifierDeclStatement	gx_bits_cache_chunk * prev_chunk ;	285:4:9946:9977	5084633	3	True				
ANR	5084662	IdentifierDecl	* prev_chunk		5084633	0					
ANR	5084663	IdentifierDeclType	gx_bits_cache_chunk *		5084633	0					
ANR	5084664	Identifier	prev_chunk		5084633	1					
ANR	5084665	IfStatement	if ( pdir == cmem -> gs_lib_ctx -> font_dir )		5084633	4					
ANR	5084666	Condition	pdir == cmem -> gs_lib_ctx -> font_dir	287:8:9988:10021	5084633	0	True				
ANR	5084667	EqualityExpression	pdir == cmem -> gs_lib_ctx -> font_dir		5084633	0		==			
ANR	5084668	Identifier	pdir		5084633	0					
ANR	5084669	PtrMemberAccess	cmem -> gs_lib_ctx -> font_dir		5084633	1					
ANR	5084670	PtrMemberAccess	cmem -> gs_lib_ctx		5084633	0					
ANR	5084671	Identifier	cmem		5084633	0					
ANR	5084672	Identifier	gs_lib_ctx		5084633	1					
ANR	5084673	Identifier	font_dir		5084633	1					
ANR	5084674	CompoundStatement		7:44:213:213	5084633	1					
ANR	5084675	ExpressionStatement	cmem -> gs_lib_ctx -> font_dir = NULL	288:8:10034:10067	5084633	0	True				
ANR	5084676	AssignmentExpression	cmem -> gs_lib_ctx -> font_dir = NULL		5084633	0		=			
ANR	5084677	PtrMemberAccess	cmem -> gs_lib_ctx -> font_dir		5084633	0					
ANR	5084678	PtrMemberAccess	cmem -> gs_lib_ctx		5084633	0					
ANR	5084679	Identifier	cmem		5084633	0					
ANR	5084680	Identifier	gs_lib_ctx		5084633	1					
ANR	5084681	Identifier	font_dir		5084633	1					
ANR	5084682	Identifier	NULL		5084633	1					
ANR	5084683	WhileStatement	while ( chunk )		5084633	5					
ANR	5084684	Condition	chunk	292:11:10137:10141	5084633	0	True				
ANR	5084685	Identifier	chunk		5084633	0					
ANR	5084686	CompoundStatement		12:18:333:333	5084633	1					
ANR	5084687	IfStatement	if ( start_chunk == chunk -> next )		5084633	0					
ANR	5084688	Condition	start_chunk == chunk -> next	293:12:10158:10183	5084633	0	True				
ANR	5084689	EqualityExpression	start_chunk == chunk -> next		5084633	0		==			
ANR	5084690	Identifier	start_chunk		5084633	0					
ANR	5084691	PtrMemberAccess	chunk -> next		5084633	1					
ANR	5084692	Identifier	chunk		5084633	0					
ANR	5084693	Identifier	next		5084633	1					
ANR	5084694	CompoundStatement		13:40:375:375	5084633	1					
ANR	5084695	ExpressionStatement	"gs_free_object ( pdir -> ccache . bits_memory , chunk -> data , ""gs_font_dir_finalize"" )"	294:12:10200:10277	5084633	0	True				
ANR	5084696	CallExpression	"gs_free_object ( pdir -> ccache . bits_memory , chunk -> data , ""gs_font_dir_finalize"" )"		5084633	0					
ANR	5084697	Callee	gs_free_object		5084633	0					
ANR	5084698	Identifier	gs_free_object		5084633	0					
ANR	5084699	ArgumentList	pdir -> ccache . bits_memory		5084633	1					
ANR	5084700	Argument	pdir -> ccache . bits_memory		5084633	0					
ANR	5084701	MemberAccess	pdir -> ccache . bits_memory		5084633	0					
ANR	5084702	PtrMemberAccess	pdir -> ccache		5084633	0					
ANR	5084703	Identifier	pdir		5084633	0					
ANR	5084704	Identifier	ccache		5084633	1					
ANR	5084705	Identifier	bits_memory		5084633	1					
ANR	5084706	Argument	chunk -> data		5084633	1					
ANR	5084707	PtrMemberAccess	chunk -> data		5084633	0					
ANR	5084708	Identifier	chunk		5084633	0					
ANR	5084709	Identifier	data		5084633	1					
ANR	5084710	Argument	"""gs_font_dir_finalize"""		5084633	2					
ANR	5084711	PrimaryExpression	"""gs_font_dir_finalize"""		5084633	0					
ANR	5084712	ExpressionStatement	"gs_free_object ( pdir -> ccache . bits_memory , chunk , ""gs_font_dir_finalize"" )"	295:12:10291:10362	5084633	1	True				
ANR	5084713	CallExpression	"gs_free_object ( pdir -> ccache . bits_memory , chunk , ""gs_font_dir_finalize"" )"		5084633	0					
ANR	5084714	Callee	gs_free_object		5084633	0					
ANR	5084715	Identifier	gs_free_object		5084633	0					
ANR	5084716	ArgumentList	pdir -> ccache . bits_memory		5084633	1					
ANR	5084717	Argument	pdir -> ccache . bits_memory		5084633	0					
ANR	5084718	MemberAccess	pdir -> ccache . bits_memory		5084633	0					
ANR	5084719	PtrMemberAccess	pdir -> ccache		5084633	0					
ANR	5084720	Identifier	pdir		5084633	0					
ANR	5084721	Identifier	ccache		5084633	1					
ANR	5084722	Identifier	bits_memory		5084633	1					
ANR	5084723	Argument	chunk		5084633	1					
ANR	5084724	Identifier	chunk		5084633	0					
ANR	5084725	Argument	"""gs_font_dir_finalize"""		5084633	2					
ANR	5084726	PrimaryExpression	"""gs_font_dir_finalize"""		5084633	0					
ANR	5084727	BreakStatement	break ;	296:12:10376:10381	5084633	2	True				
ANR	5084728	ExpressionStatement	prev_chunk = chunk	299:8:10402:10420	5084633	1	True				
ANR	5084729	AssignmentExpression	prev_chunk = chunk		5084633	0		=			
ANR	5084730	Identifier	prev_chunk		5084633	0					
ANR	5084731	Identifier	chunk		5084633	1					
ANR	5084732	ExpressionStatement	chunk = chunk -> next	300:8:10430:10449	5084633	2	True				
ANR	5084733	AssignmentExpression	chunk = chunk -> next		5084633	0		=			
ANR	5084734	Identifier	chunk		5084633	0					
ANR	5084735	PtrMemberAccess	chunk -> next		5084633	1					
ANR	5084736	Identifier	chunk		5084633	0					
ANR	5084737	Identifier	next		5084633	1					
ANR	5084738	ExpressionStatement	"gs_free_object ( pdir -> ccache . bits_memory , prev_chunk -> data , ""gs_font_dir_finalize"" )"	301:8:10459:10541	5084633	3	True				
ANR	5084739	CallExpression	"gs_free_object ( pdir -> ccache . bits_memory , prev_chunk -> data , ""gs_font_dir_finalize"" )"		5084633	0					
ANR	5084740	Callee	gs_free_object		5084633	0					
ANR	5084741	Identifier	gs_free_object		5084633	0					
ANR	5084742	ArgumentList	pdir -> ccache . bits_memory		5084633	1					
ANR	5084743	Argument	pdir -> ccache . bits_memory		5084633	0					
ANR	5084744	MemberAccess	pdir -> ccache . bits_memory		5084633	0					
ANR	5084745	PtrMemberAccess	pdir -> ccache		5084633	0					
ANR	5084746	Identifier	pdir		5084633	0					
ANR	5084747	Identifier	ccache		5084633	1					
ANR	5084748	Identifier	bits_memory		5084633	1					
ANR	5084749	Argument	prev_chunk -> data		5084633	1					
ANR	5084750	PtrMemberAccess	prev_chunk -> data		5084633	0					
ANR	5084751	Identifier	prev_chunk		5084633	0					
ANR	5084752	Identifier	data		5084633	1					
ANR	5084753	Argument	"""gs_font_dir_finalize"""		5084633	2					
ANR	5084754	PrimaryExpression	"""gs_font_dir_finalize"""		5084633	0					
ANR	5084755	ExpressionStatement	"gs_free_object ( pdir -> ccache . bits_memory , prev_chunk , ""gs_font_dir_finalize"" )"	302:8:10551:10627	5084633	4	True				
ANR	5084756	CallExpression	"gs_free_object ( pdir -> ccache . bits_memory , prev_chunk , ""gs_font_dir_finalize"" )"		5084633	0					
ANR	5084757	Callee	gs_free_object		5084633	0					
ANR	5084758	Identifier	gs_free_object		5084633	0					
ANR	5084759	ArgumentList	pdir -> ccache . bits_memory		5084633	1					
ANR	5084760	Argument	pdir -> ccache . bits_memory		5084633	0					
ANR	5084761	MemberAccess	pdir -> ccache . bits_memory		5084633	0					
ANR	5084762	PtrMemberAccess	pdir -> ccache		5084633	0					
ANR	5084763	Identifier	pdir		5084633	0					
ANR	5084764	Identifier	ccache		5084633	1					
ANR	5084765	Identifier	bits_memory		5084633	1					
ANR	5084766	Argument	prev_chunk		5084633	1					
ANR	5084767	Identifier	prev_chunk		5084633	0					
ANR	5084768	Argument	"""gs_font_dir_finalize"""		5084633	2					
ANR	5084769	PrimaryExpression	"""gs_font_dir_finalize"""		5084633	0					
ANR	5084770	ExpressionStatement	pdir -> ccache . chunks = NULL	304:4:10639:10665	5084633	6	True				
ANR	5084771	AssignmentExpression	pdir -> ccache . chunks = NULL		5084633	0		=			
ANR	5084772	MemberAccess	pdir -> ccache . chunks		5084633	0					
ANR	5084773	PtrMemberAccess	pdir -> ccache		5084633	0					
ANR	5084774	Identifier	pdir		5084633	0					
ANR	5084775	Identifier	ccache		5084633	1					
ANR	5084776	Identifier	chunks		5084633	1					
ANR	5084777	Identifier	NULL		5084633	1					
ANR	5084778	ReturnType	static void		5084633	1					
ANR	5084779	Identifier	gs_font_dir_finalize		5084633	2					
ANR	5084780	ParameterList	"const gs_memory_t * cmem , void * vptr"		5084633	3					
ANR	5084781	Parameter	const gs_memory_t * cmem	280:21:9773:9795	5084633	0	True				
ANR	5084782	ParameterType	const gs_memory_t *		5084633	0					
ANR	5084783	Identifier	cmem		5084633	1					
ANR	5084784	Parameter	void * vptr	280:46:9798:9807	5084633	1	True				
ANR	5084785	ParameterType	void *		5084633	0					
ANR	5084786	Identifier	vptr		5084633	1					
ANR	5084787	CFGEntryNode	ENTRY		5084633		True				
ANR	5084788	CFGExitNode	EXIT		5084633		True				
ANR	5084789	Symbol	NULL		5084633						
ANR	5084790	Symbol	pdir -> ccache . bits_memory		5084633						
ANR	5084791	Symbol	chunk -> data		5084633						
ANR	5084792	Symbol	pdir		5084633						
ANR	5084793	Symbol	chunk		5084633						
ANR	5084794	Symbol	chunk -> next		5084633						
ANR	5084795	Symbol	pdir -> ccache		5084633						
ANR	5084796	Symbol	* * cmem		5084633						
ANR	5084797	Symbol	prev_chunk -> data		5084633						
ANR	5084798	Symbol	vptr		5084633						
ANR	5084799	Symbol	cmem -> gs_lib_ctx -> font_dir		5084633						
ANR	5084800	Symbol	prev_chunk		5084633						
ANR	5084801	Symbol	* pdir		5084633						
ANR	5084802	Symbol	* chunk		5084633						
ANR	5084803	Symbol	* cmem		5084633						
ANR	5084804	Symbol	cmem -> gs_lib_ctx		5084633						
ANR	5084805	Symbol	* cmem -> gs_lib_ctx		5084633						
ANR	5084806	Symbol	start_chunk		5084633						
ANR	5084807	Symbol	* prev_chunk		5084633						
ANR	5084808	Symbol	cmem		5084633						
ANR	5084809	Symbol	pdir -> ccache . chunks		5084633						
ANR	5084810	Function	gs_font_alloc	309:0:10719:12203							
ANR	5084811	FunctionDef	"gs_font_alloc (gs_memory_t * mem , gs_memory_type_ptr_t pstype , const gs_font_procs * procs , gs_font_dir * dir , client_name_t cname)"		5084810	0					
ANR	5084812	CompoundStatement		313:0:10885:12203	5084810	0					
ANR	5084813	IdentifierDeclStatement	"gs_font * pfont = gs_alloc_struct ( mem , gs_font , pstype , cname ) ;"	314:4:10891:10952	5084810	0	True				
ANR	5084814	IdentifierDecl	"* pfont = gs_alloc_struct ( mem , gs_font , pstype , cname )"		5084810	0					
ANR	5084815	IdentifierDeclType	gs_font *		5084810	0					
ANR	5084816	Identifier	pfont		5084810	1					
ANR	5084817	AssignmentExpression	"* pfont = gs_alloc_struct ( mem , gs_font , pstype , cname )"		5084810	2		=			
ANR	5084818	Identifier	pfont		5084810	0					
ANR	5084819	CallExpression	"gs_alloc_struct ( mem , gs_font , pstype , cname )"		5084810	1					
ANR	5084820	Callee	gs_alloc_struct		5084810	0					
ANR	5084821	Identifier	gs_alloc_struct		5084810	0					
ANR	5084822	ArgumentList	mem		5084810	1					
ANR	5084823	Argument	mem		5084810	0					
ANR	5084824	Identifier	mem		5084810	0					
ANR	5084825	Argument	gs_font		5084810	1					
ANR	5084826	Identifier	gs_font		5084810	0					
ANR	5084827	Argument	pstype		5084810	2					
ANR	5084828	Identifier	pstype		5084810	0					
ANR	5084829	Argument	cname		5084810	3					
ANR	5084830	Identifier	cname		5084810	0					
ANR	5084831	IfStatement	if ( pfont == 0 )		5084810	1					
ANR	5084832	Condition	pfont == 0	316:8:10963:10972	5084810	0	True				
ANR	5084833	EqualityExpression	pfont == 0		5084810	0		==			
ANR	5084834	Identifier	pfont		5084810	0					
ANR	5084835	PrimaryExpression	0		5084810	1					
ANR	5084836	ReturnStatement	return 0 ;	317:8:10983:10991	5084810	1	True				
ANR	5084837	PrimaryExpression	0		5084810	0					
ANR	5084838	Statement	when	319:9:11064:11067	5084810	2	True				
ANR	5084839	Statement	the	319:14:11069:11071	5084810	3	True				
ANR	5084840	Statement	initialization	319:18:11073:11086	5084810	4	True				
ANR	5084841	Statement	exits	319:33:11088:11092	5084810	5	True				
ANR	5084842	Statement	prematurely	319:39:11094:11104	5084810	6	True				
ANR	5084843	Statement	by	319:51:11106:11107	5084810	7	True				
ANR	5084844	Statement	error	319:54:11109:11113	5084810	8	True				
ANR	5084845	Statement	.	319:59:11114:11114	5084810	9	True				
ANR	5084846	Statement	*	319:61:11116:11116	5084810	10	True				
ANR	5084847	Statement	/	319:62:11117:11117	5084810	11	True				
ANR	5084848	ExpressionStatement	"memset ( pfont , 0 , pstype -> ssize )"	320:4:11123:11154	5084810	12	True				
ANR	5084849	CallExpression	"memset ( pfont , 0 , pstype -> ssize )"		5084810	0					
ANR	5084850	Callee	memset		5084810	0					
ANR	5084851	Identifier	memset		5084810	0					
ANR	5084852	ArgumentList	pfont		5084810	1					
ANR	5084853	Argument	pfont		5084810	0					
ANR	5084854	Identifier	pfont		5084810	0					
ANR	5084855	Argument	0		5084810	1					
ANR	5084856	PrimaryExpression	0		5084810	0					
ANR	5084857	Argument	pstype -> ssize		5084810	2					
ANR	5084858	PtrMemberAccess	pstype -> ssize		5084810	0					
ANR	5084859	Identifier	pstype		5084810	0					
ANR	5084860	Identifier	ssize		5084810	1					
ANR	5084861	ExpressionStatement	pfont -> memory = mem	321:4:11160:11179	5084810	13	True				
ANR	5084862	AssignmentExpression	pfont -> memory = mem		5084810	0		=			
ANR	5084863	PtrMemberAccess	pfont -> memory		5084810	0					
ANR	5084864	Identifier	pfont		5084810	0					
ANR	5084865	Identifier	memory		5084810	1					
ANR	5084866	Identifier	mem		5084810	1					
ANR	5084867	ExpressionStatement	pfont -> dir = dir	322:4:11185:11201	5084810	14	True				
ANR	5084868	AssignmentExpression	pfont -> dir = dir		5084810	0		=			
ANR	5084869	PtrMemberAccess	pfont -> dir		5084810	0					
ANR	5084870	Identifier	pfont		5084810	0					
ANR	5084871	Identifier	dir		5084810	1					
ANR	5084872	Identifier	dir		5084810	1					
ANR	5084873	ExpressionStatement	gs_font_notify_init ( pfont )	323:4:11207:11233	5084810	15	True				
ANR	5084874	CallExpression	gs_font_notify_init ( pfont )		5084810	0					
ANR	5084875	Callee	gs_font_notify_init		5084810	0					
ANR	5084876	Identifier	gs_font_notify_init		5084810	0					
ANR	5084877	ArgumentList	pfont		5084810	1					
ANR	5084878	Argument	pfont		5084810	0					
ANR	5084879	Identifier	pfont		5084810	0					
ANR	5084880	ExpressionStatement	"pfont -> id = gs_next_ids ( mem , 1 )"	324:4:11239:11270	5084810	16	True				
ANR	5084881	AssignmentExpression	"pfont -> id = gs_next_ids ( mem , 1 )"		5084810	0		=			
ANR	5084882	PtrMemberAccess	pfont -> id		5084810	0					
ANR	5084883	Identifier	pfont		5084810	0					
ANR	5084884	Identifier	id		5084810	1					
ANR	5084885	CallExpression	"gs_next_ids ( mem , 1 )"		5084810	1					
ANR	5084886	Callee	gs_next_ids		5084810	0					
ANR	5084887	Identifier	gs_next_ids		5084810	0					
ANR	5084888	ArgumentList	mem		5084810	1					
ANR	5084889	Argument	mem		5084810	0					
ANR	5084890	Identifier	mem		5084810	0					
ANR	5084891	Argument	1		5084810	1					
ANR	5084892	PrimaryExpression	1		5084810	0					
ANR	5084893	ExpressionStatement	pfont -> base = pfont	325:4:11276:11295	5084810	17	True				
ANR	5084894	AssignmentExpression	pfont -> base = pfont		5084810	0		=			
ANR	5084895	PtrMemberAccess	pfont -> base		5084810	0					
ANR	5084896	Identifier	pfont		5084810	0					
ANR	5084897	Identifier	base		5084810	1					
ANR	5084898	Identifier	pfont		5084810	1					
ANR	5084899	ExpressionStatement	pfont -> ExactSize = pfont -> InBetweenSize = pfont -> TransformedChar = fbit_use_outlines	326:4:11301:11393	5084810	18	True				
ANR	5084900	AssignmentExpression	pfont -> ExactSize = pfont -> InBetweenSize = pfont -> TransformedChar = fbit_use_outlines		5084810	0		=			
ANR	5084901	PtrMemberAccess	pfont -> ExactSize		5084810	0					
ANR	5084902	Identifier	pfont		5084810	0					
ANR	5084903	Identifier	ExactSize		5084810	1					
ANR	5084904	AssignmentExpression	pfont -> InBetweenSize = pfont -> TransformedChar = fbit_use_outlines		5084810	1		=			
ANR	5084905	PtrMemberAccess	pfont -> InBetweenSize		5084810	0					
ANR	5084906	Identifier	pfont		5084810	0					
ANR	5084907	Identifier	InBetweenSize		5084810	1					
ANR	5084908	AssignmentExpression	pfont -> TransformedChar = fbit_use_outlines		5084810	1		=			
ANR	5084909	PtrMemberAccess	pfont -> TransformedChar		5084810	0					
ANR	5084910	Identifier	pfont		5084810	0					
ANR	5084911	Identifier	TransformedChar		5084810	1					
ANR	5084912	Identifier	fbit_use_outlines		5084810	1					
ANR	5084913	ExpressionStatement	pfont -> procs = * procs	328:4:11399:11420	5084810	19	True				
ANR	5084914	AssignmentExpression	pfont -> procs = * procs		5084810	0		=			
ANR	5084915	PtrMemberAccess	pfont -> procs		5084810	0					
ANR	5084916	Identifier	pfont		5084810	0					
ANR	5084917	Identifier	procs		5084810	1					
ANR	5084918	UnaryOperationExpression	* procs		5084810	1					
ANR	5084919	UnaryOperator	*		5084810	0					
ANR	5084920	Identifier	procs		5084810	1					
ANR	5084921	ReturnStatement	return pfont ;	352:4:12189:12201	5084810	20	True				
ANR	5084922	Identifier	pfont		5084810	0					
ANR	5084923	ReturnType	gs_font *		5084810	1					
ANR	5084924	Identifier	gs_font_alloc		5084810	2					
ANR	5084925	ParameterList	"gs_memory_t * mem , gs_memory_type_ptr_t pstype , const gs_font_procs * procs , gs_font_dir * dir , client_name_t cname"		5084810	3					
ANR	5084926	Parameter	gs_memory_t * mem	310:14:10743:10758	5084810	0	True				
ANR	5084927	ParameterType	gs_memory_t *		5084810	0					
ANR	5084928	Identifier	mem		5084810	1					
ANR	5084929	Parameter	gs_memory_type_ptr_t pstype	310:32:10761:10787	5084810	1	True				
ANR	5084930	ParameterType	gs_memory_type_ptr_t		5084810	0					
ANR	5084931	Identifier	pstype		5084810	1					
ANR	5084932	Parameter	const gs_font_procs * procs	311:14:10804:10829	5084810	2	True				
ANR	5084933	ParameterType	const gs_font_procs *		5084810	0					
ANR	5084934	Identifier	procs		5084810	1					
ANR	5084935	Parameter	gs_font_dir * dir	311:42:10832:10847	5084810	3	True				
ANR	5084936	ParameterType	gs_font_dir *		5084810	0					
ANR	5084937	Identifier	dir		5084810	1					
ANR	5084938	Parameter	client_name_t cname	312:14:10864:10882	5084810	4	True				
ANR	5084939	ParameterType	client_name_t		5084810	0					
ANR	5084940	Identifier	cname		5084810	1					
ANR	5084941	CFGEntryNode	ENTRY		5084810		True				
ANR	5084942	CFGExitNode	EXIT		5084810		True				
ANR	5084943	Symbol	pstype -> ssize		5084810						
ANR	5084944	Symbol	pfont -> procs		5084810						
ANR	5084945	Symbol	procs		5084810						
ANR	5084946	Symbol	pfont -> memory		5084810						
ANR	5084947	Symbol	pfont		5084810						
ANR	5084948	Symbol	gs_alloc_struct		5084810						
ANR	5084949	Symbol	* procs		5084810						
ANR	5084950	Symbol	cname		5084810						
ANR	5084951	Symbol	pfont -> id		5084810						
ANR	5084952	Symbol	gs_font		5084810						
ANR	5084953	Symbol	dir		5084810						
ANR	5084954	Symbol	gs_next_ids		5084810						
ANR	5084955	Symbol	pfont -> TransformedChar		5084810						
ANR	5084956	Symbol	pfont -> base		5084810						
ANR	5084957	Symbol	* pstype		5084810						
ANR	5084958	Symbol	* pfont		5084810						
ANR	5084959	Symbol	mem		5084810						
ANR	5084960	Symbol	pstype		5084810						
ANR	5084961	Symbol	pfont -> dir		5084810						
ANR	5084962	Symbol	pfont -> InBetweenSize		5084810						
ANR	5084963	Symbol	pfont -> ExactSize		5084810						
ANR	5084964	Symbol	fbit_use_outlines		5084810						
ANR	5084965	Function	gs_font_base_alloc	355:0:12258:12801							
ANR	5084966	FunctionDef	"gs_font_base_alloc (gs_memory_t * mem , gs_memory_type_ptr_t pstype , const gs_font_procs * procs , gs_font_dir * dir , client_name_t cname)"		5084965	0					
ANR	5084967	CompoundStatement		359:0:12444:12801	5084965	0					
ANR	5084968	IdentifierDeclStatement	"gs_font_base * pfont = ( gs_font_base * ) gs_font_alloc ( mem , pstype , procs , dir , cname ) ;"	360:4:12450:12541	5084965	0	True				
ANR	5084969	IdentifierDecl	"* pfont = ( gs_font_base * ) gs_font_alloc ( mem , pstype , procs , dir , cname )"		5084965	0					
ANR	5084970	IdentifierDeclType	gs_font_base *		5084965	0					
ANR	5084971	Identifier	pfont		5084965	1					
ANR	5084972	AssignmentExpression	"* pfont = ( gs_font_base * ) gs_font_alloc ( mem , pstype , procs , dir , cname )"		5084965	2		=			
ANR	5084973	Identifier	pfont		5084965	0					
ANR	5084974	CastExpression	"( gs_font_base * ) gs_font_alloc ( mem , pstype , procs , dir , cname )"		5084965	1					
ANR	5084975	CastTarget	gs_font_base *		5084965	0					
ANR	5084976	CallExpression	"gs_font_alloc ( mem , pstype , procs , dir , cname )"		5084965	1					
ANR	5084977	Callee	gs_font_alloc		5084965	0					
ANR	5084978	Identifier	gs_font_alloc		5084965	0					
ANR	5084979	ArgumentList	mem		5084965	1					
ANR	5084980	Argument	mem		5084965	0					
ANR	5084981	Identifier	mem		5084965	0					
ANR	5084982	Argument	pstype		5084965	1					
ANR	5084983	Identifier	pstype		5084965	0					
ANR	5084984	Argument	procs		5084965	2					
ANR	5084985	Identifier	procs		5084965	0					
ANR	5084986	Argument	dir		5084965	3					
ANR	5084987	Identifier	dir		5084965	0					
ANR	5084988	Argument	cname		5084965	4					
ANR	5084989	Identifier	cname		5084965	0					
ANR	5084990	IfStatement	if ( pfont == 0 )		5084965	1					
ANR	5084991	Condition	pfont == 0	363:8:12552:12561	5084965	0	True				
ANR	5084992	EqualityExpression	pfont == 0		5084965	0		==			
ANR	5084993	Identifier	pfont		5084965	0					
ANR	5084994	PrimaryExpression	0		5084965	1					
ANR	5084995	ReturnStatement	return 0 ;	364:8:12572:12580	5084965	1	True				
ANR	5084996	PrimaryExpression	0		5084965	0					
ANR	5084997	ExpressionStatement	pfont -> FontBBox . p . x = pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0	365:4:12586:12683	5084965	2	True				
ANR	5084998	AssignmentExpression	pfont -> FontBBox . p . x = pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		5084965	0		=			
ANR	5084999	MemberAccess	pfont -> FontBBox . p . x		5084965	0					
ANR	5085000	MemberAccess	pfont -> FontBBox . p		5084965	0					
ANR	5085001	PtrMemberAccess	pfont -> FontBBox		5084965	0					
ANR	5085002	Identifier	pfont		5084965	0					
ANR	5085003	Identifier	FontBBox		5084965	1					
ANR	5085004	Identifier	p		5084965	1					
ANR	5085005	Identifier	x		5084965	1					
ANR	5085006	AssignmentExpression	pfont -> FontBBox . p . y = pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		5084965	1		=			
ANR	5085007	MemberAccess	pfont -> FontBBox . p . y		5084965	0					
ANR	5085008	MemberAccess	pfont -> FontBBox . p		5084965	0					
ANR	5085009	PtrMemberAccess	pfont -> FontBBox		5084965	0					
ANR	5085010	Identifier	pfont		5084965	0					
ANR	5085011	Identifier	FontBBox		5084965	1					
ANR	5085012	Identifier	p		5084965	1					
ANR	5085013	Identifier	y		5084965	1					
ANR	5085014	AssignmentExpression	pfont -> FontBBox . q . x = pfont -> FontBBox . q . y = 0		5084965	1		=			
ANR	5085015	MemberAccess	pfont -> FontBBox . q . x		5084965	0					
ANR	5085016	MemberAccess	pfont -> FontBBox . q		5084965	0					
ANR	5085017	PtrMemberAccess	pfont -> FontBBox		5084965	0					
ANR	5085018	Identifier	pfont		5084965	0					
ANR	5085019	Identifier	FontBBox		5084965	1					
ANR	5085020	Identifier	q		5084965	1					
ANR	5085021	Identifier	x		5084965	1					
ANR	5085022	AssignmentExpression	pfont -> FontBBox . q . y = 0		5084965	1		=			
ANR	5085023	MemberAccess	pfont -> FontBBox . q . y		5084965	0					
ANR	5085024	MemberAccess	pfont -> FontBBox . q		5084965	0					
ANR	5085025	PtrMemberAccess	pfont -> FontBBox		5084965	0					
ANR	5085026	Identifier	pfont		5084965	0					
ANR	5085027	Identifier	FontBBox		5084965	1					
ANR	5085028	Identifier	q		5084965	1					
ANR	5085029	Identifier	y		5084965	1					
ANR	5085030	PrimaryExpression	0		5084965	1					
ANR	5085031	ExpressionStatement	uid_set_invalid ( & pfont -> UID )	367:4:12689:12717	5084965	3	True				
ANR	5085032	CallExpression	uid_set_invalid ( & pfont -> UID )		5084965	0					
ANR	5085033	Callee	uid_set_invalid		5084965	0					
ANR	5085034	Identifier	uid_set_invalid		5084965	0					
ANR	5085035	ArgumentList	& pfont -> UID		5084965	1					
ANR	5085036	Argument	& pfont -> UID		5084965	0					
ANR	5085037	UnaryOperationExpression	& pfont -> UID		5084965	0					
ANR	5085038	UnaryOperator	&		5084965	0					
ANR	5085039	PtrMemberAccess	pfont -> UID		5084965	1					
ANR	5085040	Identifier	pfont		5084965	0					
ANR	5085041	Identifier	UID		5084965	1					
ANR	5085042	ExpressionStatement	pfont -> encoding_index = pfont -> nearest_encoding_index = - 1	368:4:12723:12781	5084965	4	True				
ANR	5085043	AssignmentExpression	pfont -> encoding_index = pfont -> nearest_encoding_index = - 1		5084965	0		=			
ANR	5085044	PtrMemberAccess	pfont -> encoding_index		5084965	0					
ANR	5085045	Identifier	pfont		5084965	0					
ANR	5085046	Identifier	encoding_index		5084965	1					
ANR	5085047	AssignmentExpression	pfont -> nearest_encoding_index = - 1		5084965	1		=			
ANR	5085048	PtrMemberAccess	pfont -> nearest_encoding_index		5084965	0					
ANR	5085049	Identifier	pfont		5084965	0					
ANR	5085050	Identifier	nearest_encoding_index		5084965	1					
ANR	5085051	UnaryOperationExpression	- 1		5084965	1					
ANR	5085052	UnaryOperator	-		5084965	0					
ANR	5085053	PrimaryExpression	1		5084965	1					
ANR	5085054	ReturnStatement	return pfont ;	369:4:12787:12799	5084965	5	True				
ANR	5085055	Identifier	pfont		5084965	0					
ANR	5085056	ReturnType	gs_font_base *		5084965	1					
ANR	5085057	Identifier	gs_font_base_alloc		5084965	2					
ANR	5085058	ParameterList	"gs_memory_t * mem , gs_memory_type_ptr_t pstype , const gs_font_procs * procs , gs_font_dir * dir , client_name_t cname"		5084965	3					
ANR	5085059	Parameter	gs_memory_t * mem	356:19:12292:12307	5084965	0	True				
ANR	5085060	ParameterType	gs_memory_t *		5084965	0					
ANR	5085061	Identifier	mem		5084965	1					
ANR	5085062	Parameter	gs_memory_type_ptr_t pstype	356:37:12310:12336	5084965	1	True				
ANR	5085063	ParameterType	gs_memory_type_ptr_t		5084965	0					
ANR	5085064	Identifier	pstype		5084965	1					
ANR	5085065	Parameter	const gs_font_procs * procs	357:19:12358:12383	5084965	2	True				
ANR	5085066	ParameterType	const gs_font_procs *		5084965	0					
ANR	5085067	Identifier	procs		5084965	1					
ANR	5085068	Parameter	gs_font_dir * dir	357:47:12386:12401	5084965	3	True				
ANR	5085069	ParameterType	gs_font_dir *		5084965	0					
ANR	5085070	Identifier	dir		5084965	1					
ANR	5085071	Parameter	client_name_t cname	358:19:12423:12441	5084965	4	True				
ANR	5085072	ParameterType	client_name_t		5084965	0					
ANR	5085073	Identifier	cname		5084965	1					
ANR	5085074	CFGEntryNode	ENTRY		5084965		True				
ANR	5085075	CFGExitNode	EXIT		5084965		True				
ANR	5085076	Symbol	pfont -> FontBBox . q . y		5084965						
ANR	5085077	Symbol	procs		5084965						
ANR	5085078	Symbol	pfont		5084965						
ANR	5085079	Symbol	pfont -> FontBBox . q . x		5084965						
ANR	5085080	Symbol	cname		5084965						
ANR	5085081	Symbol	& pfont -> UID		5084965						
ANR	5085082	Symbol	dir		5084965						
ANR	5085083	Symbol	pfont -> nearest_encoding_index		5084965						
ANR	5085084	Symbol	* pfont		5084965						
ANR	5085085	Symbol	mem		5084965						
ANR	5085086	Symbol	pstype		5084965						
ANR	5085087	Symbol	gs_font_alloc		5084965						
ANR	5085088	Symbol	pfont -> FontBBox . p . x		5084965						
ANR	5085089	Symbol	pfont -> FontBBox . p . y		5084965						
ANR	5085090	Symbol	pfont -> FontBBox . p		5084965						
ANR	5085091	Symbol	pfont -> FontBBox . q		5084965						
ANR	5085092	Symbol	pfont -> FontBBox		5084965						
ANR	5085093	Symbol	pfont -> encoding_index		5084965						
ANR	5085094	Function	gs_font_notify_init	373:0:12855:13677							
ANR	5085095	FunctionDef	gs_font_notify_init (gs_font * font)		5085094	0					
ANR	5085096	CompoundStatement		375:0:12895:13677	5085094	0					
ANR	5085097	ExpressionStatement	"gs_notify_init ( & font -> notify_list , gs_memory_stable ( font -> memory ) )"	392:4:13609:13675	5085094	0	True				
ANR	5085098	CallExpression	"gs_notify_init ( & font -> notify_list , gs_memory_stable ( font -> memory ) )"		5085094	0					
ANR	5085099	Callee	gs_notify_init		5085094	0					
ANR	5085100	Identifier	gs_notify_init		5085094	0					
ANR	5085101	ArgumentList	& font -> notify_list		5085094	1					
ANR	5085102	Argument	& font -> notify_list		5085094	0					
ANR	5085103	UnaryOperationExpression	& font -> notify_list		5085094	0					
ANR	5085104	UnaryOperator	&		5085094	0					
ANR	5085105	PtrMemberAccess	font -> notify_list		5085094	1					
ANR	5085106	Identifier	font		5085094	0					
ANR	5085107	Identifier	notify_list		5085094	1					
ANR	5085108	Argument	gs_memory_stable ( font -> memory )		5085094	1					
ANR	5085109	CallExpression	gs_memory_stable ( font -> memory )		5085094	0					
ANR	5085110	Callee	gs_memory_stable		5085094	0					
ANR	5085111	Identifier	gs_memory_stable		5085094	0					
ANR	5085112	ArgumentList	font -> memory		5085094	1					
ANR	5085113	Argument	font -> memory		5085094	0					
ANR	5085114	PtrMemberAccess	font -> memory		5085094	0					
ANR	5085115	Identifier	font		5085094	0					
ANR	5085116	Identifier	memory		5085094	1					
ANR	5085117	ReturnType	void		5085094	1					
ANR	5085118	Identifier	gs_font_notify_init		5085094	2					
ANR	5085119	ParameterList	gs_font * font		5085094	3					
ANR	5085120	Parameter	gs_font * font	374:20:12880:12892	5085094	0	True				
ANR	5085121	ParameterType	gs_font *		5085094	0					
ANR	5085122	Identifier	font		5085094	1					
ANR	5085123	CFGEntryNode	ENTRY		5085094		True				
ANR	5085124	CFGExitNode	EXIT		5085094		True				
ANR	5085125	Symbol	font -> memory		5085094						
ANR	5085126	Symbol	gs_memory_stable		5085094						
ANR	5085127	Symbol	* font		5085094						
ANR	5085128	Symbol	& font -> notify_list		5085094						
ANR	5085129	Symbol	font		5085094						
ANR	5085130	Function	gs_font_notify_register	400:0:13886:14039							
ANR	5085131	FunctionDef	"gs_font_notify_register (gs_font * font , gs_notify_proc_t proc , void * proc_data)"		5085130	0					
ANR	5085132	CompoundStatement		402:0:13969:14039	5085130	0					
ANR	5085133	ReturnStatement	"return gs_notify_register ( & font -> notify_list , proc , proc_data ) ;"	403:4:13975:14037	5085130	0	True				
ANR	5085134	CallExpression	"gs_notify_register ( & font -> notify_list , proc , proc_data )"		5085130	0					
ANR	5085135	Callee	gs_notify_register		5085130	0					
ANR	5085136	Identifier	gs_notify_register		5085130	0					
ANR	5085137	ArgumentList	& font -> notify_list		5085130	1					
ANR	5085138	Argument	& font -> notify_list		5085130	0					
ANR	5085139	UnaryOperationExpression	& font -> notify_list		5085130	0					
ANR	5085140	UnaryOperator	&		5085130	0					
ANR	5085141	PtrMemberAccess	font -> notify_list		5085130	1					
ANR	5085142	Identifier	font		5085130	0					
ANR	5085143	Identifier	notify_list		5085130	1					
ANR	5085144	Argument	proc		5085130	1					
ANR	5085145	Identifier	proc		5085130	0					
ANR	5085146	Argument	proc_data		5085130	2					
ANR	5085147	Identifier	proc_data		5085130	0					
ANR	5085148	ReturnType	int		5085130	1					
ANR	5085149	Identifier	gs_font_notify_register		5085130	2					
ANR	5085150	ParameterList	"gs_font * font , gs_notify_proc_t proc , void * proc_data"		5085130	3					
ANR	5085151	Parameter	gs_font * font	401:24:13914:13926	5085130	0	True				
ANR	5085152	ParameterType	gs_font *		5085130	0					
ANR	5085153	Identifier	font		5085130	1					
ANR	5085154	Parameter	gs_notify_proc_t proc	401:39:13929:13949	5085130	1	True				
ANR	5085155	ParameterType	gs_notify_proc_t		5085130	0					
ANR	5085156	Identifier	proc		5085130	1					
ANR	5085157	Parameter	void * proc_data	401:62:13952:13966	5085130	2	True				
ANR	5085158	ParameterType	void *		5085130	0					
ANR	5085159	Identifier	proc_data		5085130	1					
ANR	5085160	CFGEntryNode	ENTRY		5085130		True				
ANR	5085161	CFGExitNode	EXIT		5085130		True				
ANR	5085162	Symbol	proc_data		5085130						
ANR	5085163	Symbol	gs_notify_register		5085130						
ANR	5085164	Symbol	proc		5085130						
ANR	5085165	Symbol	& font -> notify_list		5085130						
ANR	5085166	Symbol	font		5085130						
ANR	5085167	Function	gs_font_notify_unregister	405:0:14041:14198							
ANR	5085168	FunctionDef	"gs_font_notify_unregister (gs_font * font , gs_notify_proc_t proc , void * proc_data)"		5085167	0					
ANR	5085169	CompoundStatement		407:0:14126:14198	5085167	0					
ANR	5085170	ReturnStatement	"return gs_notify_unregister ( & font -> notify_list , proc , proc_data ) ;"	408:4:14132:14196	5085167	0	True				
ANR	5085171	CallExpression	"gs_notify_unregister ( & font -> notify_list , proc , proc_data )"		5085167	0					
ANR	5085172	Callee	gs_notify_unregister		5085167	0					
ANR	5085173	Identifier	gs_notify_unregister		5085167	0					
ANR	5085174	ArgumentList	& font -> notify_list		5085167	1					
ANR	5085175	Argument	& font -> notify_list		5085167	0					
ANR	5085176	UnaryOperationExpression	& font -> notify_list		5085167	0					
ANR	5085177	UnaryOperator	&		5085167	0					
ANR	5085178	PtrMemberAccess	font -> notify_list		5085167	1					
ANR	5085179	Identifier	font		5085167	0					
ANR	5085180	Identifier	notify_list		5085167	1					
ANR	5085181	Argument	proc		5085167	1					
ANR	5085182	Identifier	proc		5085167	0					
ANR	5085183	Argument	proc_data		5085167	2					
ANR	5085184	Identifier	proc_data		5085167	0					
ANR	5085185	ReturnType	int		5085167	1					
ANR	5085186	Identifier	gs_font_notify_unregister		5085167	2					
ANR	5085187	ParameterList	"gs_font * font , gs_notify_proc_t proc , void * proc_data"		5085167	3					
ANR	5085188	Parameter	gs_font * font	406:26:14071:14083	5085167	0	True				
ANR	5085189	ParameterType	gs_font *		5085167	0					
ANR	5085190	Identifier	font		5085167	1					
ANR	5085191	Parameter	gs_notify_proc_t proc	406:41:14086:14106	5085167	1	True				
ANR	5085192	ParameterType	gs_notify_proc_t		5085167	0					
ANR	5085193	Identifier	proc		5085167	1					
ANR	5085194	Parameter	void * proc_data	406:64:14109:14123	5085167	2	True				
ANR	5085195	ParameterType	void *		5085167	0					
ANR	5085196	Identifier	proc_data		5085167	1					
ANR	5085197	CFGEntryNode	ENTRY		5085167		True				
ANR	5085198	CFGExitNode	EXIT		5085167		True				
ANR	5085199	Symbol	proc_data		5085167						
ANR	5085200	Symbol	proc		5085167						
ANR	5085201	Symbol	gs_notify_unregister		5085167						
ANR	5085202	Symbol	& font -> notify_list		5085167						
ANR	5085203	Symbol	font		5085167						
ANR	5085204	Function	font_link_first	412:0:14247:14432							
ANR	5085205	FunctionDef	"font_link_first (gs_font * * pfirst , gs_font * elt)"		5085204	0					
ANR	5085206	CompoundStatement		414:0:14307:14432	5085204	0					
ANR	5085207	IdentifierDeclStatement	gs_font * first = elt -> next = * pfirst ;	415:4:14313:14349	5085204	0	True				
ANR	5085208	IdentifierDecl	* first = elt -> next = * pfirst		5085204	0					
ANR	5085209	IdentifierDeclType	gs_font *		5085204	0					
ANR	5085210	Identifier	first		5085204	1					
ANR	5085211	AssignmentExpression	* first = elt -> next = * pfirst		5085204	2		=			
ANR	5085212	Identifier	first		5085204	0					
ANR	5085213	AssignmentExpression	elt -> next = * pfirst		5085204	1		=			
ANR	5085214	PtrMemberAccess	elt -> next		5085204	0					
ANR	5085215	Identifier	elt		5085204	0					
ANR	5085216	Identifier	next		5085204	1					
ANR	5085217	UnaryOperationExpression	* pfirst		5085204	1					
ANR	5085218	UnaryOperator	*		5085204	0					
ANR	5085219	Identifier	pfirst		5085204	1					
ANR	5085220	IfStatement	if ( first )		5085204	1					
ANR	5085221	Condition	first	417:8:14360:14364	5085204	0	True				
ANR	5085222	Identifier	first		5085204	0					
ANR	5085223	ExpressionStatement	first -> prev = elt	418:8:14375:14392	5085204	1	True				
ANR	5085224	AssignmentExpression	first -> prev = elt		5085204	0		=			
ANR	5085225	PtrMemberAccess	first -> prev		5085204	0					
ANR	5085226	Identifier	first		5085204	0					
ANR	5085227	Identifier	prev		5085204	1					
ANR	5085228	Identifier	elt		5085204	1					
ANR	5085229	ExpressionStatement	elt -> prev = 0	419:4:14398:14411	5085204	2	True				
ANR	5085230	AssignmentExpression	elt -> prev = 0		5085204	0		=			
ANR	5085231	PtrMemberAccess	elt -> prev		5085204	0					
ANR	5085232	Identifier	elt		5085204	0					
ANR	5085233	Identifier	prev		5085204	1					
ANR	5085234	PrimaryExpression	0		5085204	1					
ANR	5085235	ExpressionStatement	* pfirst = elt	420:4:14417:14430	5085204	3	True				
ANR	5085236	AssignmentExpression	* pfirst = elt		5085204	0		=			
ANR	5085237	UnaryOperationExpression	* pfirst		5085204	0					
ANR	5085238	UnaryOperator	*		5085204	0					
ANR	5085239	Identifier	pfirst		5085204	1					
ANR	5085240	Identifier	elt		5085204	1					
ANR	5085241	ReturnType	static void		5085204	1					
ANR	5085242	Identifier	font_link_first		5085204	2					
ANR	5085243	ParameterList	"gs_font * * pfirst , gs_font * elt"		5085204	3					
ANR	5085244	Parameter	gs_font * * pfirst	413:16:14275:14290	5085204	0	True				
ANR	5085245	ParameterType	gs_font * *		5085204	0					
ANR	5085246	Identifier	pfirst		5085204	1					
ANR	5085247	Parameter	gs_font * elt	413:34:14293:14304	5085204	1	True				
ANR	5085248	ParameterType	gs_font *		5085204	0					
ANR	5085249	Identifier	elt		5085204	1					
ANR	5085250	CFGEntryNode	ENTRY		5085204		True				
ANR	5085251	CFGExitNode	EXIT		5085204		True				
ANR	5085252	Symbol	* pfirst		5085204						
ANR	5085253	Symbol	* first		5085204						
ANR	5085254	Symbol	elt -> prev		5085204						
ANR	5085255	Symbol	elt -> next		5085204						
ANR	5085256	Symbol	* elt		5085204						
ANR	5085257	Symbol	first -> prev		5085204						
ANR	5085258	Symbol	elt		5085204						
ANR	5085259	Symbol	pfirst		5085204						
ANR	5085260	Symbol	first		5085204						
ANR	5085261	Function	gs_definefont	426:0:14574:15061							
ANR	5085262	FunctionDef	"gs_definefont (gs_font_dir * pdir , gs_font * pfont)"		5085261	0					
ANR	5085263	CompoundStatement		428:0:14629:15061	5085261	0					
ANR	5085264	IdentifierDeclStatement	int code ;	429:4:14635:14643	5085261	0	True				
ANR	5085265	IdentifierDecl	code		5085261	0					
ANR	5085266	IdentifierDeclType	int		5085261	0					
ANR	5085267	Identifier	code		5085261	1					
ANR	5085268	ExpressionStatement	pfont -> dir = pdir	431:4:14650:14667	5085261	1	True				
ANR	5085269	AssignmentExpression	pfont -> dir = pdir		5085261	0		=			
ANR	5085270	PtrMemberAccess	pfont -> dir		5085261	0					
ANR	5085271	Identifier	pfont		5085261	0					
ANR	5085272	Identifier	dir		5085261	1					
ANR	5085273	Identifier	pdir		5085261	1					
ANR	5085274	ExpressionStatement	pfont -> base = pfont	432:4:14673:14692	5085261	2	True				
ANR	5085275	AssignmentExpression	pfont -> base = pfont		5085261	0		=			
ANR	5085276	PtrMemberAccess	pfont -> base		5085261	0					
ANR	5085277	Identifier	pfont		5085261	0					
ANR	5085278	Identifier	base		5085261	1					
ANR	5085279	Identifier	pfont		5085261	1					
ANR	5085280	ExpressionStatement	"code = ( * pfont -> procs . define_font ) ( pdir , pfont )"	433:4:14698:14746	5085261	3	True				
ANR	5085281	AssignmentExpression	"code = ( * pfont -> procs . define_font ) ( pdir , pfont )"		5085261	0		=			
ANR	5085282	Identifier	code		5085261	0					
ANR	5085283	CallExpression	"( * pfont -> procs . define_font ) ( pdir , pfont )"		5085261	1					
ANR	5085284	Callee	* pfont -> procs . define_font		5085261	0					
ANR	5085285	UnaryOperationExpression	* pfont -> procs . define_font		5085261	0					
ANR	5085286	UnaryOperator	*		5085261	0					
ANR	5085287	MemberAccess	pfont -> procs . define_font		5085261	1					
ANR	5085288	PtrMemberAccess	pfont -> procs		5085261	0					
ANR	5085289	Identifier	pfont		5085261	0					
ANR	5085290	Identifier	procs		5085261	1					
ANR	5085291	Identifier	define_font		5085261	1					
ANR	5085292	ArgumentList	pdir		5085261	1					
ANR	5085293	Argument	pdir		5085261	0					
ANR	5085294	Identifier	pdir		5085261	0					
ANR	5085295	Argument	pfont		5085261	1					
ANR	5085296	Identifier	pfont		5085261	0					
ANR	5085297	IfStatement	if ( code < 0 )		5085261	4					
ANR	5085298	Condition	code < 0	434:8:14756:14763	5085261	0	True				
ANR	5085299	RelationalExpression	code < 0		5085261	0		<			
ANR	5085300	Identifier	code		5085261	0					
ANR	5085301	PrimaryExpression	0		5085261	1					
ANR	5085302	CompoundStatement		7:18:136:136	5085261	1					
ANR	5085303	ExpressionStatement	pfont -> base = 0	435:8:14829:14844	5085261	0	True				
ANR	5085304	AssignmentExpression	pfont -> base = 0		5085261	0		=			
ANR	5085305	PtrMemberAccess	pfont -> base		5085261	0					
ANR	5085306	Identifier	pfont		5085261	0					
ANR	5085307	Identifier	base		5085261	1					
ANR	5085308	PrimaryExpression	0		5085261	1					
ANR	5085309	ReturnStatement	return code ;	436:8:14854:14865	5085261	1	True				
ANR	5085310	Identifier	code		5085261	0					
ANR	5085311	ExpressionStatement	"font_link_first ( & pdir -> orig_fonts , pfont )"	438:4:14877:14918	5085261	5	True				
ANR	5085312	CallExpression	"font_link_first ( & pdir -> orig_fonts , pfont )"		5085261	0					
ANR	5085313	Callee	font_link_first		5085261	0					
ANR	5085314	Identifier	font_link_first		5085261	0					
ANR	5085315	ArgumentList	& pdir -> orig_fonts		5085261	1					
ANR	5085316	Argument	& pdir -> orig_fonts		5085261	0					
ANR	5085317	UnaryOperationExpression	& pdir -> orig_fonts		5085261	0					
ANR	5085318	UnaryOperator	&		5085261	0					
ANR	5085319	PtrMemberAccess	pdir -> orig_fonts		5085261	1					
ANR	5085320	Identifier	pdir		5085261	0					
ANR	5085321	Identifier	orig_fonts		5085261	1					
ANR	5085322	Argument	pfont		5085261	1					
ANR	5085323	Identifier	pfont		5085261	0					
ANR	5085324	ExpressionStatement	"if_debug2m ( 'm' , pfont -> memory , ""[m]defining font 0x%lx, next=0x%lx\\n"" , ( ulong ) pfont , ( ulong ) pfont -> next )"	439:4:14924:15045	5085261	6	True				
ANR	5085325	CallExpression	"if_debug2m ( 'm' , pfont -> memory , ""[m]defining font 0x%lx, next=0x%lx\\n"" , ( ulong ) pfont , ( ulong ) pfont -> next )"		5085261	0					
ANR	5085326	Callee	if_debug2m		5085261	0					
ANR	5085327	Identifier	if_debug2m		5085261	0					
ANR	5085328	ArgumentList	'm'		5085261	1					
ANR	5085329	Argument	'm'		5085261	0					
ANR	5085330	PrimaryExpression	'm'		5085261	0					
ANR	5085331	Argument	pfont -> memory		5085261	1					
ANR	5085332	PtrMemberAccess	pfont -> memory		5085261	0					
ANR	5085333	Identifier	pfont		5085261	0					
ANR	5085334	Identifier	memory		5085261	1					
ANR	5085335	Argument	"""[m]defining font 0x%lx, next=0x%lx\\n"""		5085261	2					
ANR	5085336	PrimaryExpression	"""[m]defining font 0x%lx, next=0x%lx\\n"""		5085261	0					
ANR	5085337	Argument	( ulong ) pfont		5085261	3					
ANR	5085338	CastExpression	( ulong ) pfont		5085261	0					
ANR	5085339	CastTarget	ulong		5085261	0					
ANR	5085340	Identifier	pfont		5085261	1					
ANR	5085341	Argument	( ulong ) pfont -> next		5085261	4					
ANR	5085342	CastExpression	( ulong ) pfont -> next		5085261	0					
ANR	5085343	CastTarget	ulong		5085261	0					
ANR	5085344	PtrMemberAccess	pfont -> next		5085261	1					
ANR	5085345	Identifier	pfont		5085261	0					
ANR	5085346	Identifier	next		5085261	1					
ANR	5085347	ReturnStatement	return 0 ;	441:4:15051:15059	5085261	7	True				
ANR	5085348	PrimaryExpression	0		5085261	0					
ANR	5085349	ReturnType	int		5085261	1					
ANR	5085350	Identifier	gs_definefont		5085261	2					
ANR	5085351	ParameterList	"gs_font_dir * pdir , gs_font * pfont"		5085261	3					
ANR	5085352	Parameter	gs_font_dir * pdir	427:14:14592:14609	5085261	0	True				
ANR	5085353	ParameterType	gs_font_dir *		5085261	0					
ANR	5085354	Identifier	pdir		5085261	1					
ANR	5085355	Parameter	gs_font * pfont	427:34:14612:14626	5085261	1	True				
ANR	5085356	ParameterType	gs_font *		5085261	0					
ANR	5085357	Identifier	pfont		5085261	1					
ANR	5085358	CFGEntryNode	ENTRY		5085261		True				
ANR	5085359	CFGExitNode	EXIT		5085261		True				
ANR	5085360	Symbol	pfont -> procs		5085261						
ANR	5085361	Symbol	code		5085261						
ANR	5085362	Symbol	pfont -> memory		5085261						
ANR	5085363	Symbol	pfont		5085261						
ANR	5085364	Symbol	pdir		5085261						
ANR	5085365	Symbol	* * pfont		5085261						
ANR	5085366	Symbol	* pfont -> procs		5085261						
ANR	5085367	Symbol	pfont -> base		5085261						
ANR	5085368	Symbol	& pdir -> orig_fonts		5085261						
ANR	5085369	Symbol	* pfont		5085261						
ANR	5085370	Symbol	pfont -> dir		5085261						
ANR	5085371	Symbol	pfont -> next		5085261						
ANR	5085372	Symbol	pfont -> procs . define_font		5085261						
ANR	5085373	Symbol	* pfont -> procs . define_font		5085261						
ANR	5085374	Function	gs_font_find_similar	445:0:15115:15657							
ANR	5085375	FunctionDef	"gs_font_find_similar (const gs_font_dir * pdir , const gs_font * * ppfont , int ( * similar ) ( const gs_font * , const gs_font * ))"		5085374	0					
ANR	5085376	CompoundStatement		448:0:15263:15657	5085374	0					
ANR	5085377	IdentifierDeclStatement	const gs_font * pfont0 = * ppfont ;	449:4:15269:15300	5085374	0	True				
ANR	5085378	IdentifierDecl	* pfont0 = * ppfont		5085374	0					
ANR	5085379	IdentifierDeclType	const gs_font *		5085374	0					
ANR	5085380	Identifier	pfont0		5085374	1					
ANR	5085381	AssignmentExpression	* pfont0 = * ppfont		5085374	2		=			
ANR	5085382	Identifier	pfont0		5085374	0					
ANR	5085383	UnaryOperationExpression	* ppfont		5085374	1					
ANR	5085384	UnaryOperator	*		5085374	0					
ANR	5085385	Identifier	ppfont		5085374	1					
ANR	5085386	IdentifierDeclStatement	const gs_font * pfont1 = pdir -> orig_fonts ;	450:4:15306:15346	5085374	1	True				
ANR	5085387	IdentifierDecl	* pfont1 = pdir -> orig_fonts		5085374	0					
ANR	5085388	IdentifierDeclType	const gs_font *		5085374	0					
ANR	5085389	Identifier	pfont1		5085374	1					
ANR	5085390	AssignmentExpression	* pfont1 = pdir -> orig_fonts		5085374	2		=			
ANR	5085391	Identifier	pfont1		5085374	0					
ANR	5085392	PtrMemberAccess	pdir -> orig_fonts		5085374	1					
ANR	5085393	Identifier	pdir		5085374	0					
ANR	5085394	Identifier	orig_fonts		5085374	1					
ANR	5085395	ForStatement	for ( ; pfont1 != NULL ; pfont1 = pfont1 -> next )		5085374	2					
ANR	5085396	Condition	pfont1 != NULL	452:11:15360:15373	5085374	0	True				
ANR	5085397	EqualityExpression	pfont1 != NULL		5085374	0		!=			
ANR	5085398	Identifier	pfont1		5085374	0					
ANR	5085399	Identifier	NULL		5085374	1					
ANR	5085400	AssignmentExpression	pfont1 = pfont1 -> next	452:27:15376:15396	5085374	1	True	=			
ANR	5085401	Identifier	pfont1		5085374	0					
ANR	5085402	PtrMemberAccess	pfont1 -> next		5085374	1					
ANR	5085403	Identifier	pfont1		5085374	0					
ANR	5085404	Identifier	next		5085374	1					
ANR	5085405	CompoundStatement		5:50:135:135	5085374	2					
ANR	5085406	IfStatement	if ( pfont1 != pfont0 && pfont1 -> FontType == pfont0 -> FontType )		5085374	0					
ANR	5085407	Condition	pfont1 != pfont0 && pfont1 -> FontType == pfont0 -> FontType	453:12:15413:15468	5085374	0	True				
ANR	5085408	AndExpression	pfont1 != pfont0 && pfont1 -> FontType == pfont0 -> FontType		5085374	0		&&			
ANR	5085409	EqualityExpression	pfont1 != pfont0		5085374	0		!=			
ANR	5085410	Identifier	pfont1		5085374	0					
ANR	5085411	Identifier	pfont0		5085374	1					
ANR	5085412	EqualityExpression	pfont1 -> FontType == pfont0 -> FontType		5085374	1		==			
ANR	5085413	PtrMemberAccess	pfont1 -> FontType		5085374	0					
ANR	5085414	Identifier	pfont1		5085374	0					
ANR	5085415	Identifier	FontType		5085374	1					
ANR	5085416	PtrMemberAccess	pfont0 -> FontType		5085374	1					
ANR	5085417	Identifier	pfont0		5085374	0					
ANR	5085418	Identifier	FontType		5085374	1					
ANR	5085419	CompoundStatement		7:12:221:255	5085374	1					
ANR	5085420	IdentifierDeclStatement	"int code = similar ( pfont0 , pfont1 ) ;"	454:12:15485:15519	5085374	0	True				
ANR	5085421	IdentifierDecl	"code = similar ( pfont0 , pfont1 )"		5085374	0					
ANR	5085422	IdentifierDeclType	int		5085374	0					
ANR	5085423	Identifier	code		5085374	1					
ANR	5085424	AssignmentExpression	"code = similar ( pfont0 , pfont1 )"		5085374	2		=			
ANR	5085425	Identifier	code		5085374	0					
ANR	5085426	CallExpression	"similar ( pfont0 , pfont1 )"		5085374	1					
ANR	5085427	Callee	similar		5085374	0					
ANR	5085428	Identifier	similar		5085374	0					
ANR	5085429	ArgumentList	pfont0		5085374	1					
ANR	5085430	Argument	pfont0		5085374	0					
ANR	5085431	Identifier	pfont0		5085374	0					
ANR	5085432	Argument	pfont1		5085374	1					
ANR	5085433	Identifier	pfont1		5085374	0					
ANR	5085434	IfStatement	if ( code != 0 )		5085374	1					
ANR	5085435	Condition	code != 0	455:16:15537:15545	5085374	0	True				
ANR	5085436	EqualityExpression	code != 0		5085374	0		!=			
ANR	5085437	Identifier	code		5085374	0					
ANR	5085438	PrimaryExpression	0		5085374	1					
ANR	5085439	CompoundStatement		8:27:284:284	5085374	1					
ANR	5085440	ExpressionStatement	* ppfont = pfont1	456:16:15566:15582	5085374	0	True				
ANR	5085441	AssignmentExpression	* ppfont = pfont1		5085374	0		=			
ANR	5085442	UnaryOperationExpression	* ppfont		5085374	0					
ANR	5085443	UnaryOperator	*		5085374	0					
ANR	5085444	Identifier	ppfont		5085374	1					
ANR	5085445	Identifier	pfont1		5085374	1					
ANR	5085446	ReturnStatement	return code ;	457:16:15600:15611	5085374	1	True				
ANR	5085447	Identifier	code		5085374	0					
ANR	5085448	ReturnStatement	return 0 ;	461:4:15647:15655	5085374	3	True				
ANR	5085449	PrimaryExpression	0		5085374	0					
ANR	5085450	ReturnType	int		5085374	1					
ANR	5085451	Identifier	gs_font_find_similar		5085374	2					
ANR	5085452	ParameterList	"const gs_font_dir * pdir , const gs_font * * ppfont , int ( * similar ) ( const gs_font * , const gs_font * )"		5085374	3					
ANR	5085453	Parameter	const gs_font_dir * pdir	446:21:15140:15163	5085374	0	True				
ANR	5085454	ParameterType	const gs_font_dir *		5085374	0					
ANR	5085455	Identifier	pdir		5085374	1					
ANR	5085456	Parameter	const gs_font * * ppfont	446:47:15166:15187	5085374	1	True				
ANR	5085457	ParameterType	const gs_font * *		5085374	0					
ANR	5085458	Identifier	ppfont		5085374	1					
ANR	5085459	Parameter	"int ( * similar ) ( const gs_font * , const gs_font * )"	447:23:15213:15260	5085374	2	True				
ANR	5085460	ParameterType	"(( const gs_font * , const gs_font * ) int) *"		5085374	0					
ANR	5085461	Identifier	similar		5085374	1					
ANR	5085462	CFGEntryNode	ENTRY		5085374		True				
ANR	5085463	CFGExitNode	EXIT		5085374		True				
ANR	5085464	Symbol	similar		5085374						
ANR	5085465	Symbol	pfont0		5085374						
ANR	5085466	Symbol	* pfont1		5085374						
ANR	5085467	Symbol	pfont1		5085374						
ANR	5085468	Symbol	pdir -> orig_fonts		5085374						
ANR	5085469	Symbol	NULL		5085374						
ANR	5085470	Symbol	code		5085374						
ANR	5085471	Symbol	pdir		5085374						
ANR	5085472	Symbol	pfont1 -> FontType		5085374						
ANR	5085473	Symbol	* pfont0		5085374						
ANR	5085474	Symbol	* pdir		5085374						
ANR	5085475	Symbol	* ppfont		5085374						
ANR	5085476	Symbol	pfont0 -> FontType		5085374						
ANR	5085477	Symbol	ppfont		5085374						
ANR	5085478	Symbol	pfont1 -> next		5085374						
ANR	5085479	Function	gs_scalefont	465:0:15676:15896							
ANR	5085480	FunctionDef	"gs_scalefont (gs_font_dir * pdir , const gs_font * pfont , double scale , gs_font * * ppfont)"		5085479	0					
ANR	5085481	CompoundStatement		468:0:15782:15896	5085479	0					
ANR	5085482	IdentifierDeclStatement	gs_matrix mat ;	469:4:15788:15801	5085479	0	True				
ANR	5085483	IdentifierDecl	mat		5085479	0					
ANR	5085484	IdentifierDeclType	gs_matrix		5085479	0					
ANR	5085485	Identifier	mat		5085479	1					
ANR	5085486	ExpressionStatement	"gs_make_scaling ( scale , scale , & mat )"	471:4:15808:15843	5085479	1	True				
ANR	5085487	CallExpression	"gs_make_scaling ( scale , scale , & mat )"		5085479	0					
ANR	5085488	Callee	gs_make_scaling		5085479	0					
ANR	5085489	Identifier	gs_make_scaling		5085479	0					
ANR	5085490	ArgumentList	scale		5085479	1					
ANR	5085491	Argument	scale		5085479	0					
ANR	5085492	Identifier	scale		5085479	0					
ANR	5085493	Argument	scale		5085479	1					
ANR	5085494	Identifier	scale		5085479	0					
ANR	5085495	Argument	& mat		5085479	2					
ANR	5085496	UnaryOperationExpression	& mat		5085479	0					
ANR	5085497	UnaryOperator	&		5085479	0					
ANR	5085498	Identifier	mat		5085479	1					
ANR	5085499	ReturnStatement	"return gs_makefont ( pdir , pfont , & mat , ppfont ) ;"	472:4:15849:15894	5085479	2	True				
ANR	5085500	CallExpression	"gs_makefont ( pdir , pfont , & mat , ppfont )"		5085479	0					
ANR	5085501	Callee	gs_makefont		5085479	0					
ANR	5085502	Identifier	gs_makefont		5085479	0					
ANR	5085503	ArgumentList	pdir		5085479	1					
ANR	5085504	Argument	pdir		5085479	0					
ANR	5085505	Identifier	pdir		5085479	0					
ANR	5085506	Argument	pfont		5085479	1					
ANR	5085507	Identifier	pfont		5085479	0					
ANR	5085508	Argument	& mat		5085479	2					
ANR	5085509	UnaryOperationExpression	& mat		5085479	0					
ANR	5085510	UnaryOperator	&		5085479	0					
ANR	5085511	Identifier	mat		5085479	1					
ANR	5085512	Argument	ppfont		5085479	3					
ANR	5085513	Identifier	ppfont		5085479	0					
ANR	5085514	ReturnType	int		5085479	1					
ANR	5085515	Identifier	gs_scalefont		5085479	2					
ANR	5085516	ParameterList	"gs_font_dir * pdir , const gs_font * pfont , double scale , gs_font * * ppfont"		5085479	3					
ANR	5085517	Parameter	gs_font_dir * pdir	466:13:15693:15710	5085479	0	True				
ANR	5085518	ParameterType	gs_font_dir *		5085479	0					
ANR	5085519	Identifier	pdir		5085479	1					
ANR	5085520	Parameter	const gs_font * pfont	466:33:15713:15733	5085479	1	True				
ANR	5085521	ParameterType	const gs_font *		5085479	0					
ANR	5085522	Identifier	pfont		5085479	1					
ANR	5085523	Parameter	double scale	466:56:15736:15747	5085479	2	True				
ANR	5085524	ParameterType	double		5085479	0					
ANR	5085525	Identifier	scale		5085479	1					
ANR	5085526	Parameter	gs_font * * ppfont	467:13:15763:15779	5085479	3	True				
ANR	5085527	ParameterType	gs_font * *		5085479	0					
ANR	5085528	Identifier	ppfont		5085479	1					
ANR	5085529	CFGEntryNode	ENTRY		5085479		True				
ANR	5085530	CFGExitNode	EXIT		5085479		True				
ANR	5085531	Symbol	mat		5085479						
ANR	5085532	Symbol	& mat		5085479						
ANR	5085533	Symbol	pfont		5085479						
ANR	5085534	Symbol	ppfont		5085479						
ANR	5085535	Symbol	pdir		5085479						
ANR	5085536	Symbol	scale		5085479						
ANR	5085537	Symbol	gs_makefont		5085479						
ANR	5085538	Function	gs_makefont	476:0:15914:22490							
ANR	5085539	FunctionDef	"gs_makefont (gs_font_dir * pdir , const gs_font * pfont , const gs_matrix * pmat , gs_font * * ppfont)"		5085538	0					
ANR	5085540	CompoundStatement		479:0:16028:22490	5085538	0					
ANR	5085541	IdentifierDeclStatement	int code ;	480:4:16034:16042	5085538	0	True				
ANR	5085542	IdentifierDecl	code		5085538	0					
ANR	5085543	IdentifierDeclType	int		5085538	0					
ANR	5085544	Identifier	code		5085538	1					
ANR	5085545	IdentifierDeclStatement	gs_font * prev = 0 ;	481:4:16048:16065	5085538	1	True				
ANR	5085546	IdentifierDecl	* prev = 0		5085538	0					
ANR	5085547	IdentifierDeclType	gs_font *		5085538	0					
ANR	5085548	Identifier	prev		5085538	1					
ANR	5085549	AssignmentExpression	* prev = 0		5085538	2		=			
ANR	5085550	Identifier	prev		5085538	0					
ANR	5085551	PrimaryExpression	0		5085538	1					
ANR	5085552	IdentifierDeclStatement	gs_font * pf_out = pdir -> scaled_fonts ;	482:4:16071:16107	5085538	2	True				
ANR	5085553	IdentifierDecl	* pf_out = pdir -> scaled_fonts		5085538	0					
ANR	5085554	IdentifierDeclType	gs_font *		5085538	0					
ANR	5085555	Identifier	pf_out		5085538	1					
ANR	5085556	AssignmentExpression	* pf_out = pdir -> scaled_fonts		5085538	2		=			
ANR	5085557	Identifier	pf_out		5085538	0					
ANR	5085558	PtrMemberAccess	pdir -> scaled_fonts		5085538	1					
ANR	5085559	Identifier	pdir		5085538	0					
ANR	5085560	Identifier	scaled_fonts		5085538	1					
ANR	5085561	IdentifierDeclStatement	gs_memory_t * mem = pfont -> memory ;	483:4:16113:16145	5085538	3	True				
ANR	5085562	IdentifierDecl	* mem = pfont -> memory		5085538	0					
ANR	5085563	IdentifierDeclType	gs_memory_t *		5085538	0					
ANR	5085564	Identifier	mem		5085538	1					
ANR	5085565	AssignmentExpression	* mem = pfont -> memory		5085538	2		=			
ANR	5085566	Identifier	mem		5085538	0					
ANR	5085567	PtrMemberAccess	pfont -> memory		5085538	1					
ANR	5085568	Identifier	pfont		5085538	0					
ANR	5085569	Identifier	memory		5085538	1					
ANR	5085570	IdentifierDeclStatement	gs_matrix newmat ;	484:4:16151:16167	5085538	4	True				
ANR	5085571	IdentifierDecl	newmat		5085538	0					
ANR	5085572	IdentifierDeclType	gs_matrix		5085538	0					
ANR	5085573	Identifier	newmat		5085538	1					
ANR	5085574	IdentifierDeclStatement	bool can_cache ;	485:4:16173:16187	5085538	5	True				
ANR	5085575	IdentifierDecl	can_cache		5085538	0					
ANR	5085576	IdentifierDeclType	bool		5085538	0					
ANR	5085577	Identifier	can_cache		5085538	1					
ANR	5085578	IfStatement	"if ( ( code = gs_matrix_multiply ( & pfont -> FontMatrix , pmat , & newmat ) ) < 0 )"		5085538	6					
ANR	5085579	Condition	"( code = gs_matrix_multiply ( & pfont -> FontMatrix , pmat , & newmat ) ) < 0"	487:8:16198:16263	5085538	0	True				
ANR	5085580	RelationalExpression	"( code = gs_matrix_multiply ( & pfont -> FontMatrix , pmat , & newmat ) ) < 0"		5085538	0		<			
ANR	5085581	AssignmentExpression	"code = gs_matrix_multiply ( & pfont -> FontMatrix , pmat , & newmat )"		5085538	0		=			
ANR	5085582	Identifier	code		5085538	0					
ANR	5085583	CallExpression	"gs_matrix_multiply ( & pfont -> FontMatrix , pmat , & newmat )"		5085538	1					
ANR	5085584	Callee	gs_matrix_multiply		5085538	0					
ANR	5085585	Identifier	gs_matrix_multiply		5085538	0					
ANR	5085586	ArgumentList	& pfont -> FontMatrix		5085538	1					
ANR	5085587	Argument	& pfont -> FontMatrix		5085538	0					
ANR	5085588	UnaryOperationExpression	& pfont -> FontMatrix		5085538	0					
ANR	5085589	UnaryOperator	&		5085538	0					
ANR	5085590	PtrMemberAccess	pfont -> FontMatrix		5085538	1					
ANR	5085591	Identifier	pfont		5085538	0					
ANR	5085592	Identifier	FontMatrix		5085538	1					
ANR	5085593	Argument	pmat		5085538	1					
ANR	5085594	Identifier	pmat		5085538	0					
ANR	5085595	Argument	& newmat		5085538	2					
ANR	5085596	UnaryOperationExpression	& newmat		5085538	0					
ANR	5085597	UnaryOperator	&		5085538	0					
ANR	5085598	Identifier	newmat		5085538	1					
ANR	5085599	PrimaryExpression	0		5085538	1					
ANR	5085600	ReturnStatement	return code ;	488:8:16274:16285	5085538	1	True				
ANR	5085601	Identifier	code		5085538	0					
ANR	5085602	IfStatement	if ( gs_debug_c ( 'm' ) )		5085538	7					
ANR	5085603	Condition	gs_debug_c ( 'm' )	496:8:16578:16592	5085538	0	True				
ANR	5085604	CallExpression	gs_debug_c ( 'm' )		5085538	0					
ANR	5085605	Callee	gs_debug_c		5085538	0					
ANR	5085606	Identifier	gs_debug_c		5085538	0					
ANR	5085607	ArgumentList	'm'		5085538	1					
ANR	5085608	Argument	'm'		5085538	0					
ANR	5085609	PrimaryExpression	'm'		5085538	0					
ANR	5085610	CompoundStatement		18:25:566:566	5085538	1					
ANR	5085611	Statement	const	497:8:16605:16609	5085538	0	True				
ANR	5085612	Statement	gs_font_base	497:14:16611:16622	5085538	1	True				
ANR	5085613	Statement	*	497:27:16624:16624	5085538	2	True				
ANR	5085614	Statement	const	497:28:16625:16629	5085538	3	True				
ANR	5085615	ExpressionStatement	pbfont = ( const gs_font_base * ) pfont	497:34:16631:16667	5085538	4	True				
ANR	5085616	AssignmentExpression	pbfont = ( const gs_font_base * ) pfont		5085538	0		=			
ANR	5085617	Identifier	pbfont		5085538	0					
ANR	5085618	CastExpression	( const gs_font_base * ) pfont		5085538	1					
ANR	5085619	CastTarget	const gs_font_base *		5085538	0					
ANR	5085620	Identifier	pfont		5085538	1					
ANR	5085621	IfStatement	if ( pfont -> FontType == ft_composite )		5085538	5					
ANR	5085622	Condition	pfont -> FontType == ft_composite	499:12:16682:16712	5085538	0	True				
ANR	5085623	EqualityExpression	pfont -> FontType == ft_composite		5085538	0		==			
ANR	5085624	PtrMemberAccess	pfont -> FontType		5085538	0					
ANR	5085625	Identifier	pfont		5085538	0					
ANR	5085626	Identifier	FontType		5085538	1					
ANR	5085627	Identifier	ft_composite		5085538	1					
ANR	5085628	ExpressionStatement	"dmlprintf ( mem , ""[m]composite"" )"	500:12:16727:16757	5085538	1	True				
ANR	5085629	CallExpression	"dmlprintf ( mem , ""[m]composite"" )"		5085538	0					
ANR	5085630	Callee	dmlprintf		5085538	0					
ANR	5085631	Identifier	dmlprintf		5085538	0					
ANR	5085632	ArgumentList	mem		5085538	1					
ANR	5085633	Argument	mem		5085538	0					
ANR	5085634	Identifier	mem		5085538	0					
ANR	5085635	Argument	"""[m]composite"""		5085538	1					
ANR	5085636	PrimaryExpression	"""[m]composite"""		5085538	0					
ANR	5085637	ElseStatement	else		5085538	0					
ANR	5085638	IfStatement	if ( uid_is_UniqueID ( & pbfont -> UID ) )		5085538	0					
ANR	5085639	Condition	uid_is_UniqueID ( & pbfont -> UID )	501:17:16776:16804	5085538	0	True				
ANR	5085640	CallExpression	uid_is_UniqueID ( & pbfont -> UID )		5085538	0					
ANR	5085641	Callee	uid_is_UniqueID		5085538	0					
ANR	5085642	Identifier	uid_is_UniqueID		5085538	0					
ANR	5085643	ArgumentList	& pbfont -> UID		5085538	1					
ANR	5085644	Argument	& pbfont -> UID		5085538	0					
ANR	5085645	UnaryOperationExpression	& pbfont -> UID		5085538	0					
ANR	5085646	UnaryOperator	&		5085538	0					
ANR	5085647	PtrMemberAccess	pbfont -> UID		5085538	1					
ANR	5085648	Identifier	pbfont		5085538	0					
ANR	5085649	Identifier	UID		5085538	1					
ANR	5085650	ExpressionStatement	"dmlprintf1 ( mem , ""[m]UniqueID=%ld"" , pbfont -> UID . id )"	502:12:16819:16869	5085538	1	True				
ANR	5085651	CallExpression	"dmlprintf1 ( mem , ""[m]UniqueID=%ld"" , pbfont -> UID . id )"		5085538	0					
ANR	5085652	Callee	dmlprintf1		5085538	0					
ANR	5085653	Identifier	dmlprintf1		5085538	0					
ANR	5085654	ArgumentList	mem		5085538	1					
ANR	5085655	Argument	mem		5085538	0					
ANR	5085656	Identifier	mem		5085538	0					
ANR	5085657	Argument	"""[m]UniqueID=%ld"""		5085538	1					
ANR	5085658	PrimaryExpression	"""[m]UniqueID=%ld"""		5085538	0					
ANR	5085659	Argument	pbfont -> UID . id		5085538	2					
ANR	5085660	MemberAccess	pbfont -> UID . id		5085538	0					
ANR	5085661	PtrMemberAccess	pbfont -> UID		5085538	0					
ANR	5085662	Identifier	pbfont		5085538	0					
ANR	5085663	Identifier	UID		5085538	1					
ANR	5085664	Identifier	id		5085538	1					
ANR	5085665	ElseStatement	else		5085538	0					
ANR	5085666	IfStatement	if ( uid_is_XUID ( & pbfont -> UID ) )		5085538	0					
ANR	5085667	Condition	uid_is_XUID ( & pbfont -> UID )	503:17:16888:16912	5085538	0	True				
ANR	5085668	CallExpression	uid_is_XUID ( & pbfont -> UID )		5085538	0					
ANR	5085669	Callee	uid_is_XUID		5085538	0					
ANR	5085670	Identifier	uid_is_XUID		5085538	0					
ANR	5085671	ArgumentList	& pbfont -> UID		5085538	1					
ANR	5085672	Argument	& pbfont -> UID		5085538	0					
ANR	5085673	UnaryOperationExpression	& pbfont -> UID		5085538	0					
ANR	5085674	UnaryOperator	&		5085538	0					
ANR	5085675	PtrMemberAccess	pbfont -> UID		5085538	1					
ANR	5085676	Identifier	pbfont		5085538	0					
ANR	5085677	Identifier	UID		5085538	1					
ANR	5085678	ExpressionStatement	"dmlprintf1 ( mem , ""[m]XUID(%u)"" , ( uint ) ( - pbfont -> UID . id ) )"	504:12:16927:16983	5085538	1	True				
ANR	5085679	CallExpression	"dmlprintf1 ( mem , ""[m]XUID(%u)"" , ( uint ) ( - pbfont -> UID . id ) )"		5085538	0					
ANR	5085680	Callee	dmlprintf1		5085538	0					
ANR	5085681	Identifier	dmlprintf1		5085538	0					
ANR	5085682	ArgumentList	mem		5085538	1					
ANR	5085683	Argument	mem		5085538	0					
ANR	5085684	Identifier	mem		5085538	0					
ANR	5085685	Argument	"""[m]XUID(%u)"""		5085538	1					
ANR	5085686	PrimaryExpression	"""[m]XUID(%u)"""		5085538	0					
ANR	5085687	Argument	( uint ) ( - pbfont -> UID . id )		5085538	2					
ANR	5085688	CastExpression	( uint ) ( - pbfont -> UID . id )		5085538	0					
ANR	5085689	CastTarget	uint		5085538	0					
ANR	5085690	UnaryOperationExpression	- pbfont -> UID . id		5085538	1					
ANR	5085691	UnaryOperator	-		5085538	0					
ANR	5085692	MemberAccess	pbfont -> UID . id		5085538	1					
ANR	5085693	PtrMemberAccess	pbfont -> UID		5085538	0					
ANR	5085694	Identifier	pbfont		5085538	0					
ANR	5085695	Identifier	UID		5085538	1					
ANR	5085696	Identifier	id		5085538	1					
ANR	5085697	ElseStatement	else		5085538	0					
ANR	5085698	ExpressionStatement	"dmlprintf ( mem , ""[m]no UID"" )"	506:12:17010:17037	5085538	0	True				
ANR	5085699	CallExpression	"dmlprintf ( mem , ""[m]no UID"" )"		5085538	0					
ANR	5085700	Callee	dmlprintf		5085538	0					
ANR	5085701	Identifier	dmlprintf		5085538	0					
ANR	5085702	ArgumentList	mem		5085538	1					
ANR	5085703	Argument	mem		5085538	0					
ANR	5085704	Identifier	mem		5085538	0					
ANR	5085705	Argument	"""[m]no UID"""		5085538	1					
ANR	5085706	PrimaryExpression	"""[m]no UID"""		5085538	0					
ANR	5085707	ExpressionStatement	"dmprintf8 ( mem , "", FontType=%d, base=0x%lx,\\n[m]  new FontMatrix=[%g %g %g %g %g %g]\\n"" , pfont -> FontType , ( ulong ) pfont -> base , pmat -> xx , pmat -> xy , pmat -> yx , pmat -> yy , pmat -> tx , pmat -> ty )"	507:8:17047:17282	5085538	6	True				
ANR	5085708	CallExpression	"dmprintf8 ( mem , "", FontType=%d, base=0x%lx,\\n[m]  new FontMatrix=[%g %g %g %g %g %g]\\n"" , pfont -> FontType , ( ulong ) pfont -> base , pmat -> xx , pmat -> xy , pmat -> yx , pmat -> yy , pmat -> tx , pmat -> ty )"		5085538	0					
ANR	5085709	Callee	dmprintf8		5085538	0					
ANR	5085710	Identifier	dmprintf8		5085538	0					
ANR	5085711	ArgumentList	mem		5085538	1					
ANR	5085712	Argument	mem		5085538	0					
ANR	5085713	Identifier	mem		5085538	0					
ANR	5085714	Argument	""", FontType=%d, base=0x%lx,\\n[m]  new FontMatrix=[%g %g %g %g %g %g]\\n"""		5085538	1					
ANR	5085715	PrimaryExpression	""", FontType=%d, base=0x%lx,\\n[m]  new FontMatrix=[%g %g %g %g %g %g]\\n"""		5085538	0					
ANR	5085716	Argument	pfont -> FontType		5085538	2					
ANR	5085717	PtrMemberAccess	pfont -> FontType		5085538	0					
ANR	5085718	Identifier	pfont		5085538	0					
ANR	5085719	Identifier	FontType		5085538	1					
ANR	5085720	Argument	( ulong ) pfont -> base		5085538	3					
ANR	5085721	CastExpression	( ulong ) pfont -> base		5085538	0					
ANR	5085722	CastTarget	ulong		5085538	0					
ANR	5085723	PtrMemberAccess	pfont -> base		5085538	1					
ANR	5085724	Identifier	pfont		5085538	0					
ANR	5085725	Identifier	base		5085538	1					
ANR	5085726	Argument	pmat -> xx		5085538	4					
ANR	5085727	PtrMemberAccess	pmat -> xx		5085538	0					
ANR	5085728	Identifier	pmat		5085538	0					
ANR	5085729	Identifier	xx		5085538	1					
ANR	5085730	Argument	pmat -> xy		5085538	5					
ANR	5085731	PtrMemberAccess	pmat -> xy		5085538	0					
ANR	5085732	Identifier	pmat		5085538	0					
ANR	5085733	Identifier	xy		5085538	1					
ANR	5085734	Argument	pmat -> yx		5085538	6					
ANR	5085735	PtrMemberAccess	pmat -> yx		5085538	0					
ANR	5085736	Identifier	pmat		5085538	0					
ANR	5085737	Identifier	yx		5085538	1					
ANR	5085738	Argument	pmat -> yy		5085538	7					
ANR	5085739	PtrMemberAccess	pmat -> yy		5085538	0					
ANR	5085740	Identifier	pmat		5085538	0					
ANR	5085741	Identifier	yy		5085538	1					
ANR	5085742	Argument	pmat -> tx		5085538	8					
ANR	5085743	PtrMemberAccess	pmat -> tx		5085538	0					
ANR	5085744	Identifier	pmat		5085538	0					
ANR	5085745	Identifier	tx		5085538	1					
ANR	5085746	Argument	pmat -> ty		5085538	9					
ANR	5085747	PtrMemberAccess	pmat -> ty		5085538	0					
ANR	5085748	Identifier	pmat		5085538	0					
ANR	5085749	Identifier	ty		5085538	1					
ANR	5085750	IfStatement	if ( pfont -> FontType != ft_composite )		5085538	8					
ANR	5085751	Condition	pfont -> FontType != ft_composite	517:8:17464:17494	5085538	0	True				
ANR	5085752	EqualityExpression	pfont -> FontType != ft_composite		5085538	0		!=			
ANR	5085753	PtrMemberAccess	pfont -> FontType		5085538	0					
ANR	5085754	Identifier	pfont		5085538	0					
ANR	5085755	Identifier	FontType		5085538	1					
ANR	5085756	Identifier	ft_composite		5085538	1					
ANR	5085757	CompoundStatement		39:41:1468:1468	5085538	1					
ANR	5085758	ForStatement	"for ( ; pf_out != 0 ; prev = pf_out , pf_out = pf_out -> next )"		5085538	0					
ANR	5085759	Condition	pf_out != 0	518:15:17514:17524	5085538	0	True				
ANR	5085760	EqualityExpression	pf_out != 0		5085538	0		!=			
ANR	5085761	Identifier	pf_out		5085538	0					
ANR	5085762	PrimaryExpression	0		5085538	1					
ANR	5085763	Expression	"prev = pf_out , pf_out = pf_out -> next"	518:28:17527:17562	5085538	1	True				
ANR	5085764	AssignmentExpression	prev = pf_out		5085538	0		=			
ANR	5085765	Identifier	prev		5085538	0					
ANR	5085766	Identifier	pf_out		5085538	1					
ANR	5085767	AssignmentExpression	pf_out = pf_out -> next		5085538	1		=			
ANR	5085768	Identifier	pf_out		5085538	0					
ANR	5085769	PtrMemberAccess	pf_out -> next		5085538	1					
ANR	5085770	Identifier	pf_out		5085538	0					
ANR	5085771	Identifier	next		5085538	1					
ANR	5085772	IfStatement	if ( pf_out -> FontType == pfont -> FontType && pf_out -> base == pfont -> base && pf_out -> FontMatrix . xx == newmat . xx && pf_out -> FontMatrix . xy == newmat . xy && pf_out -> FontMatrix . yx == newmat . yx && pf_out -> FontMatrix . yy == newmat . yy && pf_out -> FontMatrix . tx == newmat . tx && pf_out -> FontMatrix . ty == newmat . ty )		5085538	2					
ANR	5085773	Condition	pf_out -> FontType == pfont -> FontType && pf_out -> base == pfont -> base && pf_out -> FontMatrix . xx == newmat . xx && pf_out -> FontMatrix . xy == newmat . xy && pf_out -> FontMatrix . yx == newmat . yx && pf_out -> FontMatrix . yy == newmat . yy && pf_out -> FontMatrix . tx == newmat . tx && pf_out -> FontMatrix . ty == newmat . ty	519:16:17581:17986	5085538	0	True				
ANR	5085774	AndExpression	pf_out -> FontType == pfont -> FontType && pf_out -> base == pfont -> base && pf_out -> FontMatrix . xx == newmat . xx && pf_out -> FontMatrix . xy == newmat . xy && pf_out -> FontMatrix . yx == newmat . yx && pf_out -> FontMatrix . yy == newmat . yy && pf_out -> FontMatrix . tx == newmat . tx && pf_out -> FontMatrix . ty == newmat . ty		5085538	0		&&			
ANR	5085775	EqualityExpression	pf_out -> FontType == pfont -> FontType		5085538	0		==			
ANR	5085776	PtrMemberAccess	pf_out -> FontType		5085538	0					
ANR	5085777	Identifier	pf_out		5085538	0					
ANR	5085778	Identifier	FontType		5085538	1					
ANR	5085779	PtrMemberAccess	pfont -> FontType		5085538	1					
ANR	5085780	Identifier	pfont		5085538	0					
ANR	5085781	Identifier	FontType		5085538	1					
ANR	5085782	AndExpression	pf_out -> base == pfont -> base && pf_out -> FontMatrix . xx == newmat . xx && pf_out -> FontMatrix . xy == newmat . xy && pf_out -> FontMatrix . yx == newmat . yx && pf_out -> FontMatrix . yy == newmat . yy && pf_out -> FontMatrix . tx == newmat . tx && pf_out -> FontMatrix . ty == newmat . ty		5085538	1		&&			
ANR	5085783	EqualityExpression	pf_out -> base == pfont -> base		5085538	0		==			
ANR	5085784	PtrMemberAccess	pf_out -> base		5085538	0					
ANR	5085785	Identifier	pf_out		5085538	0					
ANR	5085786	Identifier	base		5085538	1					
ANR	5085787	PtrMemberAccess	pfont -> base		5085538	1					
ANR	5085788	Identifier	pfont		5085538	0					
ANR	5085789	Identifier	base		5085538	1					
ANR	5085790	AndExpression	pf_out -> FontMatrix . xx == newmat . xx && pf_out -> FontMatrix . xy == newmat . xy && pf_out -> FontMatrix . yx == newmat . yx && pf_out -> FontMatrix . yy == newmat . yy && pf_out -> FontMatrix . tx == newmat . tx && pf_out -> FontMatrix . ty == newmat . ty		5085538	1		&&			
ANR	5085791	EqualityExpression	pf_out -> FontMatrix . xx == newmat . xx		5085538	0		==			
ANR	5085792	MemberAccess	pf_out -> FontMatrix . xx		5085538	0					
ANR	5085793	PtrMemberAccess	pf_out -> FontMatrix		5085538	0					
ANR	5085794	Identifier	pf_out		5085538	0					
ANR	5085795	Identifier	FontMatrix		5085538	1					
ANR	5085796	Identifier	xx		5085538	1					
ANR	5085797	MemberAccess	newmat . xx		5085538	1					
ANR	5085798	Identifier	newmat		5085538	0					
ANR	5085799	Identifier	xx		5085538	1					
ANR	5085800	AndExpression	pf_out -> FontMatrix . xy == newmat . xy && pf_out -> FontMatrix . yx == newmat . yx && pf_out -> FontMatrix . yy == newmat . yy && pf_out -> FontMatrix . tx == newmat . tx && pf_out -> FontMatrix . ty == newmat . ty		5085538	1		&&			
ANR	5085801	EqualityExpression	pf_out -> FontMatrix . xy == newmat . xy		5085538	0		==			
ANR	5085802	MemberAccess	pf_out -> FontMatrix . xy		5085538	0					
ANR	5085803	PtrMemberAccess	pf_out -> FontMatrix		5085538	0					
ANR	5085804	Identifier	pf_out		5085538	0					
ANR	5085805	Identifier	FontMatrix		5085538	1					
ANR	5085806	Identifier	xy		5085538	1					
ANR	5085807	MemberAccess	newmat . xy		5085538	1					
ANR	5085808	Identifier	newmat		5085538	0					
ANR	5085809	Identifier	xy		5085538	1					
ANR	5085810	AndExpression	pf_out -> FontMatrix . yx == newmat . yx && pf_out -> FontMatrix . yy == newmat . yy && pf_out -> FontMatrix . tx == newmat . tx && pf_out -> FontMatrix . ty == newmat . ty		5085538	1		&&			
ANR	5085811	EqualityExpression	pf_out -> FontMatrix . yx == newmat . yx		5085538	0		==			
ANR	5085812	MemberAccess	pf_out -> FontMatrix . yx		5085538	0					
ANR	5085813	PtrMemberAccess	pf_out -> FontMatrix		5085538	0					
ANR	5085814	Identifier	pf_out		5085538	0					
ANR	5085815	Identifier	FontMatrix		5085538	1					
ANR	5085816	Identifier	yx		5085538	1					
ANR	5085817	MemberAccess	newmat . yx		5085538	1					
ANR	5085818	Identifier	newmat		5085538	0					
ANR	5085819	Identifier	yx		5085538	1					
ANR	5085820	AndExpression	pf_out -> FontMatrix . yy == newmat . yy && pf_out -> FontMatrix . tx == newmat . tx && pf_out -> FontMatrix . ty == newmat . ty		5085538	1		&&			
ANR	5085821	EqualityExpression	pf_out -> FontMatrix . yy == newmat . yy		5085538	0		==			
ANR	5085822	MemberAccess	pf_out -> FontMatrix . yy		5085538	0					
ANR	5085823	PtrMemberAccess	pf_out -> FontMatrix		5085538	0					
ANR	5085824	Identifier	pf_out		5085538	0					
ANR	5085825	Identifier	FontMatrix		5085538	1					
ANR	5085826	Identifier	yy		5085538	1					
ANR	5085827	MemberAccess	newmat . yy		5085538	1					
ANR	5085828	Identifier	newmat		5085538	0					
ANR	5085829	Identifier	yy		5085538	1					
ANR	5085830	AndExpression	pf_out -> FontMatrix . tx == newmat . tx && pf_out -> FontMatrix . ty == newmat . ty		5085538	1		&&			
ANR	5085831	EqualityExpression	pf_out -> FontMatrix . tx == newmat . tx		5085538	0		==			
ANR	5085832	MemberAccess	pf_out -> FontMatrix . tx		5085538	0					
ANR	5085833	PtrMemberAccess	pf_out -> FontMatrix		5085538	0					
ANR	5085834	Identifier	pf_out		5085538	0					
ANR	5085835	Identifier	FontMatrix		5085538	1					
ANR	5085836	Identifier	tx		5085538	1					
ANR	5085837	MemberAccess	newmat . tx		5085538	1					
ANR	5085838	Identifier	newmat		5085538	0					
ANR	5085839	Identifier	tx		5085538	1					
ANR	5085840	EqualityExpression	pf_out -> FontMatrix . ty == newmat . ty		5085538	1		==			
ANR	5085841	MemberAccess	pf_out -> FontMatrix . ty		5085538	0					
ANR	5085842	PtrMemberAccess	pf_out -> FontMatrix		5085538	0					
ANR	5085843	Identifier	pf_out		5085538	0					
ANR	5085844	Identifier	FontMatrix		5085538	1					
ANR	5085845	Identifier	ty		5085538	1					
ANR	5085846	MemberAccess	newmat . ty		5085538	1					
ANR	5085847	Identifier	newmat		5085538	0					
ANR	5085848	Identifier	ty		5085538	1					
ANR	5085849	CompoundStatement		49:18:1977:1977	5085538	1					
ANR	5085850	ExpressionStatement	* ppfont = pf_out	528:16:18024:18040	5085538	0	True				
ANR	5085851	AssignmentExpression	* ppfont = pf_out		5085538	0		=			
ANR	5085852	UnaryOperationExpression	* ppfont		5085538	0					
ANR	5085853	UnaryOperator	*		5085538	0					
ANR	5085854	Identifier	ppfont		5085538	1					
ANR	5085855	Identifier	pf_out		5085538	1					
ANR	5085856	ExpressionStatement	"if_debug1m ( 'm' , pfont -> memory , ""[m]found font=0x%lx\\n"" , ( ulong ) pf_out )"	529:16:18058:18129	5085538	1	True				
ANR	5085857	CallExpression	"if_debug1m ( 'm' , pfont -> memory , ""[m]found font=0x%lx\\n"" , ( ulong ) pf_out )"		5085538	0					
ANR	5085858	Callee	if_debug1m		5085538	0					
ANR	5085859	Identifier	if_debug1m		5085538	0					
ANR	5085860	ArgumentList	'm'		5085538	1					
ANR	5085861	Argument	'm'		5085538	0					
ANR	5085862	PrimaryExpression	'm'		5085538	0					
ANR	5085863	Argument	pfont -> memory		5085538	1					
ANR	5085864	PtrMemberAccess	pfont -> memory		5085538	0					
ANR	5085865	Identifier	pfont		5085538	0					
ANR	5085866	Identifier	memory		5085538	1					
ANR	5085867	Argument	"""[m]found font=0x%lx\\n"""		5085538	2					
ANR	5085868	PrimaryExpression	"""[m]found font=0x%lx\\n"""		5085538	0					
ANR	5085869	Argument	( ulong ) pf_out		5085538	3					
ANR	5085870	CastExpression	( ulong ) pf_out		5085538	0					
ANR	5085871	CastTarget	ulong		5085538	0					
ANR	5085872	Identifier	pf_out		5085538	1					
ANR	5085873	ReturnStatement	return 0 ;	530:16:18147:18155	5085538	2	True				
ANR	5085874	PrimaryExpression	0		5085538	0					
ANR	5085875	ExpressionStatement	can_cache = true	532:8:18179:18195	5085538	1	True				
ANR	5085876	AssignmentExpression	can_cache = true		5085538	0		=			
ANR	5085877	Identifier	can_cache		5085538	0					
ANR	5085878	Identifier	true		5085538	1					
ANR	5085879	ElseStatement	else		5085538	0					
ANR	5085880	ExpressionStatement	can_cache = false	534:8:18216:18233	5085538	0	True				
ANR	5085881	AssignmentExpression	can_cache = false		5085538	0		=			
ANR	5085882	Identifier	can_cache		5085538	0					
ANR	5085883	Identifier	false		5085538	1					
ANR	5085884	ExpressionStatement	"pf_out = gs_alloc_struct ( mem , gs_font , gs_object_type ( mem , pfont ) , ""gs_makefont"" )"	535:4:18239:18349	5085538	9	True				
ANR	5085885	AssignmentExpression	"pf_out = gs_alloc_struct ( mem , gs_font , gs_object_type ( mem , pfont ) , ""gs_makefont"" )"		5085538	0		=			
ANR	5085886	Identifier	pf_out		5085538	0					
ANR	5085887	CallExpression	"gs_alloc_struct ( mem , gs_font , gs_object_type ( mem , pfont ) , ""gs_makefont"" )"		5085538	1					
ANR	5085888	Callee	gs_alloc_struct		5085538	0					
ANR	5085889	Identifier	gs_alloc_struct		5085538	0					
ANR	5085890	ArgumentList	mem		5085538	1					
ANR	5085891	Argument	mem		5085538	0					
ANR	5085892	Identifier	mem		5085538	0					
ANR	5085893	Argument	gs_font		5085538	1					
ANR	5085894	Identifier	gs_font		5085538	0					
ANR	5085895	Argument	"gs_object_type ( mem , pfont )"		5085538	2					
ANR	5085896	CallExpression	"gs_object_type ( mem , pfont )"		5085538	0					
ANR	5085897	Callee	gs_object_type		5085538	0					
ANR	5085898	Identifier	gs_object_type		5085538	0					
ANR	5085899	ArgumentList	mem		5085538	1					
ANR	5085900	Argument	mem		5085538	0					
ANR	5085901	Identifier	mem		5085538	0					
ANR	5085902	Argument	pfont		5085538	1					
ANR	5085903	Identifier	pfont		5085538	0					
ANR	5085904	Argument	"""gs_makefont"""		5085538	3					
ANR	5085905	PrimaryExpression	"""gs_makefont"""		5085538	0					
ANR	5085906	IfStatement	if ( ! pf_out )		5085538	10					
ANR	5085907	Condition	! pf_out	537:8:18359:18365	5085538	0	True				
ANR	5085908	UnaryOperationExpression	! pf_out		5085538	0					
ANR	5085909	UnaryOperator	!		5085538	0					
ANR	5085910	Identifier	pf_out		5085538	1					
ANR	5085911	ExpressionStatement	return_error ( gs_error_VMerror )	538:8:18376:18406	5085538	1	True				
ANR	5085912	CallExpression	return_error ( gs_error_VMerror )		5085538	0					
ANR	5085913	Callee	return_error		5085538	0					
ANR	5085914	Identifier	return_error		5085538	0					
ANR	5085915	ArgumentList	gs_error_VMerror		5085538	1					
ANR	5085916	Argument	gs_error_VMerror		5085538	0					
ANR	5085917	Identifier	gs_error_VMerror		5085538	0					
ANR	5085918	ExpressionStatement	"memcpy ( pf_out , pfont , gs_object_size ( mem , pfont ) )"	539:4:18412:18461	5085538	11	True				
ANR	5085919	CallExpression	"memcpy ( pf_out , pfont , gs_object_size ( mem , pfont ) )"		5085538	0					
ANR	5085920	Callee	memcpy		5085538	0					
ANR	5085921	Identifier	memcpy		5085538	0					
ANR	5085922	ArgumentList	pf_out		5085538	1					
ANR	5085923	Argument	pf_out		5085538	0					
ANR	5085924	Identifier	pf_out		5085538	0					
ANR	5085925	Argument	pfont		5085538	1					
ANR	5085926	Identifier	pfont		5085538	0					
ANR	5085927	Argument	"gs_object_size ( mem , pfont )"		5085538	2					
ANR	5085928	CallExpression	"gs_object_size ( mem , pfont )"		5085538	0					
ANR	5085929	Callee	gs_object_size		5085538	0					
ANR	5085930	Identifier	gs_object_size		5085538	0					
ANR	5085931	ArgumentList	mem		5085538	1					
ANR	5085932	Argument	mem		5085538	0					
ANR	5085933	Identifier	mem		5085538	0					
ANR	5085934	Argument	pfont		5085538	1					
ANR	5085935	Identifier	pfont		5085538	0					
ANR	5085936	ExpressionStatement	gs_font_notify_init ( pf_out )	540:4:18467:18494	5085538	12	True				
ANR	5085937	CallExpression	gs_font_notify_init ( pf_out )		5085538	0					
ANR	5085938	Callee	gs_font_notify_init		5085538	0					
ANR	5085939	Identifier	gs_font_notify_init		5085538	0					
ANR	5085940	ArgumentList	pf_out		5085538	1					
ANR	5085941	Argument	pf_out		5085538	0					
ANR	5085942	Identifier	pf_out		5085538	0					
ANR	5085943	ExpressionStatement	pf_out -> FontMatrix = newmat	541:4:18500:18527	5085538	13	True				
ANR	5085944	AssignmentExpression	pf_out -> FontMatrix = newmat		5085538	0		=			
ANR	5085945	PtrMemberAccess	pf_out -> FontMatrix		5085538	0					
ANR	5085946	Identifier	pf_out		5085538	0					
ANR	5085947	Identifier	FontMatrix		5085538	1					
ANR	5085948	Identifier	newmat		5085538	1					
ANR	5085949	ExpressionStatement	pf_out -> client_data = 0	542:4:18533:18556	5085538	14	True				
ANR	5085950	AssignmentExpression	pf_out -> client_data = 0		5085538	0		=			
ANR	5085951	PtrMemberAccess	pf_out -> client_data		5085538	0					
ANR	5085952	Identifier	pf_out		5085538	0					
ANR	5085953	Identifier	client_data		5085538	1					
ANR	5085954	PrimaryExpression	0		5085538	1					
ANR	5085955	ExpressionStatement	pf_out -> dir = pdir	543:4:18562:18580	5085538	15	True				
ANR	5085956	AssignmentExpression	pf_out -> dir = pdir		5085538	0		=			
ANR	5085957	PtrMemberAccess	pf_out -> dir		5085538	0					
ANR	5085958	Identifier	pf_out		5085538	0					
ANR	5085959	Identifier	dir		5085538	1					
ANR	5085960	Identifier	pdir		5085538	1					
ANR	5085961	ExpressionStatement	pf_out -> base = pfont -> base	544:4:18586:18612	5085538	16	True				
ANR	5085962	AssignmentExpression	pf_out -> base = pfont -> base		5085538	0		=			
ANR	5085963	PtrMemberAccess	pf_out -> base		5085538	0					
ANR	5085964	Identifier	pf_out		5085538	0					
ANR	5085965	Identifier	base		5085538	1					
ANR	5085966	PtrMemberAccess	pfont -> base		5085538	1					
ANR	5085967	Identifier	pfont		5085538	0					
ANR	5085968	Identifier	base		5085538	1					
ANR	5085969	ExpressionStatement	* ppfont = pf_out	545:4:18618:18634	5085538	17	True				
ANR	5085970	AssignmentExpression	* ppfont = pf_out		5085538	0		=			
ANR	5085971	UnaryOperationExpression	* ppfont		5085538	0					
ANR	5085972	UnaryOperator	*		5085538	0					
ANR	5085973	Identifier	ppfont		5085538	1					
ANR	5085974	Identifier	pf_out		5085538	1					
ANR	5085975	ExpressionStatement	"code = ( * pf_out -> procs . make_font ) ( pdir , pfont , pmat , ppfont )"	546:4:18640:18701	5085538	18	True				
ANR	5085976	AssignmentExpression	"code = ( * pf_out -> procs . make_font ) ( pdir , pfont , pmat , ppfont )"		5085538	0		=			
ANR	5085977	Identifier	code		5085538	0					
ANR	5085978	CallExpression	"( * pf_out -> procs . make_font ) ( pdir , pfont , pmat , ppfont )"		5085538	1					
ANR	5085979	Callee	* pf_out -> procs . make_font		5085538	0					
ANR	5085980	UnaryOperationExpression	* pf_out -> procs . make_font		5085538	0					
ANR	5085981	UnaryOperator	*		5085538	0					
ANR	5085982	MemberAccess	pf_out -> procs . make_font		5085538	1					
ANR	5085983	PtrMemberAccess	pf_out -> procs		5085538	0					
ANR	5085984	Identifier	pf_out		5085538	0					
ANR	5085985	Identifier	procs		5085538	1					
ANR	5085986	Identifier	make_font		5085538	1					
ANR	5085987	ArgumentList	pdir		5085538	1					
ANR	5085988	Argument	pdir		5085538	0					
ANR	5085989	Identifier	pdir		5085538	0					
ANR	5085990	Argument	pfont		5085538	1					
ANR	5085991	Identifier	pfont		5085538	0					
ANR	5085992	Argument	pmat		5085538	2					
ANR	5085993	Identifier	pmat		5085538	0					
ANR	5085994	Argument	ppfont		5085538	3					
ANR	5085995	Identifier	ppfont		5085538	0					
ANR	5085996	IfStatement	if ( code < 0 )		5085538	19					
ANR	5085997	Condition	code < 0	547:8:18711:18718	5085538	0	True				
ANR	5085998	RelationalExpression	code < 0		5085538	0		<			
ANR	5085999	Identifier	code		5085538	0					
ANR	5086000	PrimaryExpression	0		5085538	1					
ANR	5086001	ReturnStatement	return code ;	548:8:18729:18740	5085538	1	True				
ANR	5086002	Identifier	code		5085538	0					
ANR	5086003	IfStatement	if ( can_cache )		5085538	20					
ANR	5086004	Condition	can_cache	549:8:18750:18758	5085538	0	True				
ANR	5086005	Identifier	can_cache		5085538	0					
ANR	5086006	CompoundStatement		71:19:2732:2732	5085538	1					
ANR	5086007	IfStatement	if ( pdir -> ssize >= pdir -> smax && prev != 0 )		5085538	0					
ANR	5086008	Condition	pdir -> ssize >= pdir -> smax && prev != 0	550:12:18775:18812	5085538	0	True				
ANR	5086009	AndExpression	pdir -> ssize >= pdir -> smax && prev != 0		5085538	0		&&			
ANR	5086010	RelationalExpression	pdir -> ssize >= pdir -> smax		5085538	0		>=			
ANR	5086011	PtrMemberAccess	pdir -> ssize		5085538	0					
ANR	5086012	Identifier	pdir		5085538	0					
ANR	5086013	Identifier	ssize		5085538	1					
ANR	5086014	PtrMemberAccess	pdir -> smax		5085538	1					
ANR	5086015	Identifier	pdir		5085538	0					
ANR	5086016	Identifier	smax		5085538	1					
ANR	5086017	EqualityExpression	prev != 0		5085538	1		!=			
ANR	5086018	Identifier	prev		5085538	0					
ANR	5086019	PrimaryExpression	0		5085538	1					
ANR	5086020	CompoundStatement		72:52:2786:2786	5085538	1					
ANR	5086021	ExpressionStatement	"if_debug1m ( 'm' , pfont -> memory , ""[m]discarding font 0x%lx\\n"" , ( ulong ) prev )"	557:12:19064:19160	5085538	0	True				
ANR	5086022	CallExpression	"if_debug1m ( 'm' , pfont -> memory , ""[m]discarding font 0x%lx\\n"" , ( ulong ) prev )"		5085538	0					
ANR	5086023	Callee	if_debug1m		5085538	0					
ANR	5086024	Identifier	if_debug1m		5085538	0					
ANR	5086025	ArgumentList	'm'		5085538	1					
ANR	5086026	Argument	'm'		5085538	0					
ANR	5086027	PrimaryExpression	'm'		5085538	0					
ANR	5086028	Argument	pfont -> memory		5085538	1					
ANR	5086029	PtrMemberAccess	pfont -> memory		5085538	0					
ANR	5086030	Identifier	pfont		5085538	0					
ANR	5086031	Identifier	memory		5085538	1					
ANR	5086032	Argument	"""[m]discarding font 0x%lx\\n"""		5085538	2					
ANR	5086033	PrimaryExpression	"""[m]discarding font 0x%lx\\n"""		5085538	0					
ANR	5086034	Argument	( ulong ) prev		5085538	3					
ANR	5086035	CastExpression	( ulong ) prev		5085538	0					
ANR	5086036	CastTarget	ulong		5085538	0					
ANR	5086037	Identifier	prev		5085538	1					
ANR	5086038	IfStatement	if ( prev -> prev != 0 )		5085538	1					
ANR	5086039	Condition	prev -> prev != 0	559:16:19178:19192	5085538	0	True				
ANR	5086040	EqualityExpression	prev -> prev != 0		5085538	0		!=			
ANR	5086041	PtrMemberAccess	prev -> prev		5085538	0					
ANR	5086042	Identifier	prev		5085538	0					
ANR	5086043	Identifier	prev		5085538	1					
ANR	5086044	PrimaryExpression	0		5085538	1					
ANR	5086045	ExpressionStatement	prev -> prev -> next = 0	560:16:19211:19231	5085538	1	True				
ANR	5086046	AssignmentExpression	prev -> prev -> next = 0		5085538	0		=			
ANR	5086047	PtrMemberAccess	prev -> prev -> next		5085538	0					
ANR	5086048	PtrMemberAccess	prev -> prev		5085538	0					
ANR	5086049	Identifier	prev		5085538	0					
ANR	5086050	Identifier	prev		5085538	1					
ANR	5086051	Identifier	next		5085538	1					
ANR	5086052	PrimaryExpression	0		5085538	1					
ANR	5086053	ElseStatement	else		5085538	0					
ANR	5086054	ExpressionStatement	pdir -> scaled_fonts = 0	562:16:19266:19288	5085538	0	True				
ANR	5086055	AssignmentExpression	pdir -> scaled_fonts = 0		5085538	0		=			
ANR	5086056	PtrMemberAccess	pdir -> scaled_fonts		5085538	0					
ANR	5086057	Identifier	pdir		5085538	0					
ANR	5086058	Identifier	scaled_fonts		5085538	1					
ANR	5086059	PrimaryExpression	0		5085538	1					
ANR	5086060	ExpressionStatement	pdir -> ssize --	563:12:19302:19315	5085538	2	True				
ANR	5086061	PostIncDecOperationExpression	pdir -> ssize --		5085538	0					
ANR	5086062	PtrMemberAccess	pdir -> ssize		5085538	0					
ANR	5086063	Identifier	pdir		5085538	0					
ANR	5086064	Identifier	ssize		5085538	1					
ANR	5086065	IncDec	--		5085538	1					
ANR	5086066	ExpressionStatement	prev -> prev = 0	564:12:19329:19343	5085538	3	True				
ANR	5086067	AssignmentExpression	prev -> prev = 0		5085538	0		=			
ANR	5086068	PtrMemberAccess	prev -> prev		5085538	0					
ANR	5086069	Identifier	prev		5085538	0					
ANR	5086070	Identifier	prev		5085538	1					
ANR	5086071	PrimaryExpression	0		5085538	1					
ANR	5086072	Statement	The	591:15:21241:21243	5085538	4	True				
ANR	5086073	Statement	problem	591:19:21245:21251	5085538	5	True				
ANR	5086074	Statement	was	591:27:21253:21255	5085538	6	True				
ANR	5086075	Statement	dangling	591:31:21257:21264	5085538	7	True				
ANR	5086076	Statement	pointers	591:40:21266:21273	5085538	8	True				
ANR	5086077	Statement	","	591:48:21274:21274	5085538	9	True				
ANR	5086078	Statement	which	591:50:21276:21280	5085538	10	True				
ANR	5086079	Statement	appear	591:56:21282:21287	5085538	11	True				
ANR	5086080	Statement	in	591:63:21289:21290	5085538	12	True				
ANR	5086081	Statement	fm_pair	591:66:21292:21298	5085538	13	True				
ANR	5086082	Statement	instances	591:74:21300:21308	5085538	14	True				
ANR	5086083	Statement	after	592:15:21325:21329	5085538	15	True				
ANR	5086084	Statement	uid_free	592:21:21331:21338	5085538	16	True				
ANR	5086085	Statement	is	592:30:21340:21341	5085538	17	True				
ANR	5086086	Statement	applied	592:33:21343:21349	5085538	18	True				
ANR	5086087	Statement	to	592:41:21351:21352	5085538	19	True				
ANR	5086088	Statement	a	592:44:21354:21354	5085538	20	True				
ANR	5086089	Statement	font	592:46:21356:21359	5085538	21	True				
ANR	5086090	Statement	s	592:51:21361:21361	5085538	22	True				
ANR	5086091	Statement	UID	592:53:21363:21365	5085538	23	True				
ANR	5086092	Statement	","	592:56:21366:21366	5085538	24	True				
ANR	5086093	Statement	because	593:15:21383:21389	5085538	25	True				
ANR	5086094	Statement	they	593:23:21391:21394	5085538	26	True				
ANR	5086095	Statement	share	593:28:21396:21400	5085538	27	True				
ANR	5086096	Statement	same	593:34:21402:21405	5085538	28	True				
ANR	5086097	Statement	xvalues	593:39:21407:21413	5085538	29	True				
ANR	5086098	Statement	array	593:47:21415:21419	5085538	30	True				
ANR	5086099	Statement	.	593:52:21420:21420	5085538	31	True				
ANR	5086100	Statement	We	593:54:21422:21423	5085538	32	True				
ANR	5086101	Statement	re	593:57:21425:21426	5085538	33	True				
ANR	5086102	Statement	unable	593:60:21428:21433	5085538	34	True				
ANR	5086103	Statement	to	593:67:21435:21436	5085538	35	True				
ANR	5086104	Statement	guess	593:70:21438:21442	5085538	36	True				
ANR	5086105	Statement	for	594:15:21459:21461	5085538	37	True				
ANR	5086106	Statement	which	594:19:21463:21467	5085538	38	True				
ANR	5086107	Statement	reason	594:25:21469:21474	5085538	39	True				
ANR	5086108	Statement	uid_free	594:32:21476:21483	5085538	40	True				
ANR	5086109	Statement	was	594:41:21485:21487	5085538	41	True				
ANR	5086110	Statement	applied	594:45:21489:21495	5085538	42	True				
ANR	5086111	Statement	to	594:53:21497:21498	5085538	43	True				
ANR	5086112	Statement	the	594:56:21500:21502	5085538	44	True				
ANR	5086113	Statement	font	594:60:21504:21507	5085538	45	True				
ANR	5086114	Statement	s	594:65:21509:21509	5085538	46	True				
ANR	5086115	Statement	UID	594:67:21511:21513	5085538	47	True				
ANR	5086116	Statement	here	594:71:21515:21518	5085538	48	True				
ANR	5086117	Statement	5	595:15:21535:21535	5085538	49	True				
ANR	5086118	Statement	+	595:16:21536:21536	5085538	50	True				
ANR	5086119	Statement	years	595:18:21538:21542	5085538	51	True				
ANR	5086120	Statement	ago	595:24:21544:21546	5085538	52	True				
ANR	5086121	Statement	(	595:28:21548:21548	5085538	53	True				
ANR	5086122	Statement	see	595:29:21549:21551	5085538	54	True				
ANR	5086123	Statement	gsfont	595:33:21553:21558	5085538	55	True				
ANR	5086124	Statement	.	595:39:21559:21559	5085538	56	True				
ANR	5086125	Statement	c	595:40:21560:21560	5085538	57	True				
ANR	5086126	Statement	revision	595:42:21562:21569	5085538	58	True				
ANR	5086127	Statement	1.1	595:51:21571:21573	5085538	59	True				
ANR	5086128	Statement	)	595:54:21574:21574	5085538	60	True				
ANR	5086129	Statement	.	595:55:21575:21575	5085538	61	True				
ANR	5086130	Statement	We	596:15:21592:21593	5085538	62	True				
ANR	5086131	DoStatement	do		5085538	63					
ANR	5086132	Statement	not		5085538	0					
ANR	5086133	Statement	remove	596:25:21602:21607	5085538	64	True				
ANR	5086134	Statement	this	596:32:21609:21612	5085538	65	True				
ANR	5086135	Statement	code	596:37:21614:21617	5085538	66	True				
ANR	5086136	Statement	portion	596:42:21619:21625	5085538	67	True				
ANR	5086137	Statement	until	596:50:21627:21631	5085538	68	True				
ANR	5086138	Statement	we	596:56:21633:21634	5085538	69	True				
ANR	5086139	Statement	get	596:59:21636:21638	5085538	70	True				
ANR	5086140	Statement	a	597:15:21655:21655	5085538	71	True				
ANR	5086141	Statement	complete	597:17:21657:21664	5085538	72	True				
ANR	5086142	Statement	understanding	597:26:21666:21678	5085538	73	True				
ANR	5086143	Statement	.	597:39:21679:21679	5085538	74	True				
ANR	5086144	Statement	*	598:13:21694:21694	5085538	75	True				
ANR	5086145	Statement	/	598:14:21695:21695	5085538	76	True				
ANR	5086146	IfStatement	if ( prev -> FontType != ft_composite )		5085538	77					
ANR	5086147	Condition	prev -> FontType != ft_composite	599:16:21713:21742	5085538	0	True				
ANR	5086148	EqualityExpression	prev -> FontType != ft_composite		5085538	0		!=			
ANR	5086149	PtrMemberAccess	prev -> FontType		5085538	0					
ANR	5086150	Identifier	prev		5085538	0					
ANR	5086151	Identifier	FontType		5085538	1					
ANR	5086152	Identifier	ft_composite		5085538	1					
ANR	5086153	CompoundStatement		121:48:5716:5716	5085538	1					
ANR	5086154	ExpressionStatement	"if_debug1m ( 'm' , pfont -> memory , ""[m]discarding UID 0x%lx\\n"" , ( ulong ) ( ( gs_font_base * ) prev ) -> UID . xvalues )"	600:16:21763:21923	5085538	0	True				
ANR	5086155	CallExpression	"if_debug1m ( 'm' , pfont -> memory , ""[m]discarding UID 0x%lx\\n"" , ( ulong ) ( ( gs_font_base * ) prev ) -> UID . xvalues )"		5085538	0					
ANR	5086156	Callee	if_debug1m		5085538	0					
ANR	5086157	Identifier	if_debug1m		5085538	0					
ANR	5086158	ArgumentList	'm'		5085538	1					
ANR	5086159	Argument	'm'		5085538	0					
ANR	5086160	PrimaryExpression	'm'		5085538	0					
ANR	5086161	Argument	pfont -> memory		5085538	1					
ANR	5086162	PtrMemberAccess	pfont -> memory		5085538	0					
ANR	5086163	Identifier	pfont		5085538	0					
ANR	5086164	Identifier	memory		5085538	1					
ANR	5086165	Argument	"""[m]discarding UID 0x%lx\\n"""		5085538	2					
ANR	5086166	PrimaryExpression	"""[m]discarding UID 0x%lx\\n"""		5085538	0					
ANR	5086167	Argument	( ulong ) ( ( gs_font_base * ) prev ) -> UID . xvalues		5085538	3					
ANR	5086168	CastExpression	( ulong ) ( ( gs_font_base * ) prev ) -> UID . xvalues		5085538	0					
ANR	5086169	CastTarget	ulong		5085538	0					
ANR	5086170	MemberAccess	( ( gs_font_base * ) prev ) -> UID . xvalues		5085538	1					
ANR	5086171	PtrMemberAccess	( ( gs_font_base * ) prev ) -> UID		5085538	0					
ANR	5086172	CastExpression	( gs_font_base * ) prev		5085538	0					
ANR	5086173	CastTarget	gs_font_base *		5085538	0					
ANR	5086174	Identifier	prev		5085538	1					
ANR	5086175	Identifier	UID		5085538	1					
ANR	5086176	Identifier	xvalues		5085538	1					
ANR	5086177	ExpressionStatement	"uid_free ( & ( ( gs_font_base * ) prev ) -> UID , prev -> memory , ""gs_makefont(discarding)"" )"	603:16:21941:22071	5085538	1	True				
ANR	5086178	CallExpression	"uid_free ( & ( ( gs_font_base * ) prev ) -> UID , prev -> memory , ""gs_makefont(discarding)"" )"		5085538	0					
ANR	5086179	Callee	uid_free		5085538	0					
ANR	5086180	Identifier	uid_free		5085538	0					
ANR	5086181	ArgumentList	& ( ( gs_font_base * ) prev ) -> UID		5085538	1					
ANR	5086182	Argument	& ( ( gs_font_base * ) prev ) -> UID		5085538	0					
ANR	5086183	UnaryOperationExpression	& ( ( gs_font_base * ) prev ) -> UID		5085538	0					
ANR	5086184	UnaryOperator	&		5085538	0					
ANR	5086185	PtrMemberAccess	( ( gs_font_base * ) prev ) -> UID		5085538	1					
ANR	5086186	CastExpression	( gs_font_base * ) prev		5085538	0					
ANR	5086187	CastTarget	gs_font_base *		5085538	0					
ANR	5086188	Identifier	prev		5085538	1					
ANR	5086189	Identifier	UID		5085538	1					
ANR	5086190	Argument	prev -> memory		5085538	1					
ANR	5086191	PtrMemberAccess	prev -> memory		5085538	0					
ANR	5086192	Identifier	prev		5085538	0					
ANR	5086193	Identifier	memory		5085538	1					
ANR	5086194	Argument	"""gs_makefont(discarding)"""		5085538	2					
ANR	5086195	PrimaryExpression	"""gs_makefont(discarding)"""		5085538	0					
ANR	5086196	ExpressionStatement	uid_set_invalid ( & ( ( gs_font_base * ) prev ) -> UID )	606:16:22089:22135	5085538	2	True				
ANR	5086197	CallExpression	uid_set_invalid ( & ( ( gs_font_base * ) prev ) -> UID )		5085538	0					
ANR	5086198	Callee	uid_set_invalid		5085538	0					
ANR	5086199	Identifier	uid_set_invalid		5085538	0					
ANR	5086200	ArgumentList	& ( ( gs_font_base * ) prev ) -> UID		5085538	1					
ANR	5086201	Argument	& ( ( gs_font_base * ) prev ) -> UID		5085538	0					
ANR	5086202	UnaryOperationExpression	& ( ( gs_font_base * ) prev ) -> UID		5085538	0					
ANR	5086203	UnaryOperator	&		5085538	0					
ANR	5086204	PtrMemberAccess	( ( gs_font_base * ) prev ) -> UID		5085538	1					
ANR	5086205	CastExpression	( gs_font_base * ) prev		5085538	0					
ANR	5086206	CastTarget	gs_font_base *		5085538	0					
ANR	5086207	Identifier	prev		5085538	1					
ANR	5086208	Identifier	UID		5085538	1					
ANR	5086209	ExpressionStatement	pdir -> ssize ++	610:8:22176:22189	5085538	1	True				
ANR	5086210	PostIncDecOperationExpression	pdir -> ssize ++		5085538	0					
ANR	5086211	PtrMemberAccess	pdir -> ssize		5085538	0					
ANR	5086212	Identifier	pdir		5085538	0					
ANR	5086213	Identifier	ssize		5085538	1					
ANR	5086214	IncDec	++		5085538	1					
ANR	5086215	ExpressionStatement	"font_link_first ( & pdir -> scaled_fonts , pf_out )"	611:8:22199:22243	5085538	2	True				
ANR	5086216	CallExpression	"font_link_first ( & pdir -> scaled_fonts , pf_out )"		5085538	0					
ANR	5086217	Callee	font_link_first		5085538	0					
ANR	5086218	Identifier	font_link_first		5085538	0					
ANR	5086219	ArgumentList	& pdir -> scaled_fonts		5085538	1					
ANR	5086220	Argument	& pdir -> scaled_fonts		5085538	0					
ANR	5086221	UnaryOperationExpression	& pdir -> scaled_fonts		5085538	0					
ANR	5086222	UnaryOperator	&		5085538	0					
ANR	5086223	PtrMemberAccess	pdir -> scaled_fonts		5085538	1					
ANR	5086224	Identifier	pdir		5085538	0					
ANR	5086225	Identifier	scaled_fonts		5085538	1					
ANR	5086226	Argument	pf_out		5085538	1					
ANR	5086227	Identifier	pf_out		5085538	0					
ANR	5086228	ElseStatement	else		5085538	0					
ANR	5086229	CompoundStatement		134:11:6227:6227	5085538	0					
ANR	5086230	ExpressionStatement	pf_out -> next = pf_out -> prev = 0	613:8:22300:22331	5085538	0	True				
ANR	5086231	AssignmentExpression	pf_out -> next = pf_out -> prev = 0		5085538	0		=			
ANR	5086232	PtrMemberAccess	pf_out -> next		5085538	0					
ANR	5086233	Identifier	pf_out		5085538	0					
ANR	5086234	Identifier	next		5085538	1					
ANR	5086235	AssignmentExpression	pf_out -> prev = 0		5085538	1		=			
ANR	5086236	PtrMemberAccess	pf_out -> prev		5085538	0					
ANR	5086237	Identifier	pf_out		5085538	0					
ANR	5086238	Identifier	prev		5085538	1					
ANR	5086239	PrimaryExpression	0		5085538	1					
ANR	5086240	ExpressionStatement	"if_debug2m ( 'm' , pfont -> memory , ""[m]new font=0x%lx can_cache=%s\\n"" , ( ulong ) * ppfont , ( can_cache ? ""true"" : ""false"" ) )"	615:4:22343:22474	5085538	21	True				
ANR	5086241	CallExpression	"if_debug2m ( 'm' , pfont -> memory , ""[m]new font=0x%lx can_cache=%s\\n"" , ( ulong ) * ppfont , ( can_cache ? ""true"" : ""false"" ) )"		5085538	0					
ANR	5086242	Callee	if_debug2m		5085538	0					
ANR	5086243	Identifier	if_debug2m		5085538	0					
ANR	5086244	ArgumentList	'm'		5085538	1					
ANR	5086245	Argument	'm'		5085538	0					
ANR	5086246	PrimaryExpression	'm'		5085538	0					
ANR	5086247	Argument	pfont -> memory		5085538	1					
ANR	5086248	PtrMemberAccess	pfont -> memory		5085538	0					
ANR	5086249	Identifier	pfont		5085538	0					
ANR	5086250	Identifier	memory		5085538	1					
ANR	5086251	Argument	"""[m]new font=0x%lx can_cache=%s\\n"""		5085538	2					
ANR	5086252	PrimaryExpression	"""[m]new font=0x%lx can_cache=%s\\n"""		5085538	0					
ANR	5086253	Argument	( ulong ) * ppfont		5085538	3					
ANR	5086254	CastExpression	( ulong ) * ppfont		5085538	0					
ANR	5086255	CastTarget	ulong		5085538	0					
ANR	5086256	UnaryOperationExpression	* ppfont		5085538	1					
ANR	5086257	UnaryOperator	*		5085538	0					
ANR	5086258	Identifier	ppfont		5085538	1					
ANR	5086259	Argument	"can_cache ? ""true"" : ""false"""		5085538	4					
ANR	5086260	ConditionalExpression	"can_cache ? ""true"" : ""false"""		5085538	0					
ANR	5086261	Condition	can_cache		5085538	0					
ANR	5086262	Identifier	can_cache		5085538	0					
ANR	5086263	PrimaryExpression	"""true"""		5085538	1					
ANR	5086264	PrimaryExpression	"""false"""		5085538	2					
ANR	5086265	ReturnStatement	return 1 ;	617:4:22480:22488	5085538	22	True				
ANR	5086266	PrimaryExpression	1		5085538	0					
ANR	5086267	ReturnType	int		5085538	1					
ANR	5086268	Identifier	gs_makefont		5085538	2					
ANR	5086269	ParameterList	"gs_font_dir * pdir , const gs_font * pfont , const gs_matrix * pmat , gs_font * * ppfont"		5085538	3					
ANR	5086270	Parameter	gs_font_dir * pdir	477:12:15930:15947	5085538	0	True				
ANR	5086271	ParameterType	gs_font_dir *		5085538	0					
ANR	5086272	Identifier	pdir		5085538	1					
ANR	5086273	Parameter	const gs_font * pfont	477:32:15950:15970	5085538	1	True				
ANR	5086274	ParameterType	const gs_font *		5085538	0					
ANR	5086275	Identifier	pfont		5085538	1					
ANR	5086276	Parameter	const gs_matrix * pmat	478:12:15985:16006	5085538	2	True				
ANR	5086277	ParameterType	const gs_matrix *		5085538	0					
ANR	5086278	Identifier	pmat		5085538	1					
ANR	5086279	Parameter	gs_font * * ppfont	478:36:16009:16025	5085538	3	True				
ANR	5086280	ParameterType	gs_font * *		5085538	0					
ANR	5086281	Identifier	ppfont		5085538	1					
ANR	5086282	CFGEntryNode	ENTRY		5085538		True				
ANR	5086283	CFGExitNode	EXIT		5085538		True				
ANR	5086284	CFGErrorNode	ERROR		5085538		True				
ANR	5086285	Symbol	gs_object_type		5085538						
ANR	5086286	Symbol	pmat -> xx		5085538						
ANR	5086287	Symbol	pf_out -> base		5085538						
ANR	5086288	Symbol	uid_is_UniqueID		5085538						
ANR	5086289	Symbol	* pmat		5085538						
ANR	5086290	Symbol	prev		5085538						
ANR	5086291	Symbol	prev -> memory		5085538						
ANR	5086292	Symbol	pdir -> scaled_fonts		5085538						
ANR	5086293	Symbol	gs_font		5085538						
ANR	5086294	Symbol	( ( gs_font_base * ) prev ) -> UID . xvalues		5085538						
ANR	5086295	Symbol	& pbfont -> UID		5085538						
ANR	5086296	Symbol	pdir -> smax		5085538						
ANR	5086297	Symbol	gs_debug_c		5085538						
ANR	5086298	Symbol	* pf_out		5085538						
ANR	5086299	Symbol	* pbfont		5085538						
ANR	5086300	Symbol	can_cache		5085538						
ANR	5086301	Symbol	uid_is_XUID		5085538						
ANR	5086302	Symbol	pf_out -> next		5085538						
ANR	5086303	Symbol	& ( ( gs_font_base * ) prev ) -> UID		5085538						
ANR	5086304	Symbol	pf_out -> procs . make_font		5085538						
ANR	5086305	Symbol	prev -> prev		5085538						
ANR	5086306	Symbol	pmat -> yy		5085538						
ANR	5086307	Symbol	gs_matrix_multiply		5085538						
ANR	5086308	Symbol	pmat -> yx		5085538						
ANR	5086309	Symbol	pdir		5085538						
ANR	5086310	Symbol	pdir -> ssize		5085538						
ANR	5086311	Symbol	* prev -> prev		5085538						
ANR	5086312	Symbol	pf_out -> FontMatrix		5085538						
ANR	5086313	Symbol	pf_out -> dir		5085538						
ANR	5086314	Symbol	* ppfont		5085538						
ANR	5086315	Symbol	ppfont		5085538						
ANR	5086316	Symbol	pmat -> tx		5085538						
ANR	5086317	Symbol	true		5085538						
ANR	5086318	Symbol	* pf_out -> procs		5085538						
ANR	5086319	Symbol	pmat -> xy		5085538						
ANR	5086320	Symbol	prev -> FontType		5085538						
ANR	5086321	Symbol	newmat		5085538						
ANR	5086322	Symbol	pbfont -> UID . id		5085538						
ANR	5086323	Symbol	pmat -> ty		5085538						
ANR	5086324	Symbol	pf_out -> client_data		5085538						
ANR	5086325	Symbol	code		5085538						
ANR	5086326	Symbol	pmat		5085538						
ANR	5086327	Symbol	pfont -> memory		5085538						
ANR	5086328	Symbol	& pfont -> FontMatrix		5085538						
ANR	5086329	Symbol	newmat . yx		5085538						
ANR	5086330	Symbol	* * prev		5085538						
ANR	5086331	Symbol	pbfont -> UID		5085538						
ANR	5086332	Symbol	pf_out -> procs		5085538						
ANR	5086333	Symbol	newmat . yy		5085538						
ANR	5086334	Symbol	gs_alloc_struct		5085538						
ANR	5086335	Symbol	& newmat		5085538						
ANR	5086336	Symbol	pf_out -> FontMatrix . ty		5085538						
ANR	5086337	Symbol	* prev		5085538						
ANR	5086338	Symbol	pf_out -> FontMatrix . tx		5085538						
ANR	5086339	Symbol	gs_object_size		5085538						
ANR	5086340	Symbol	* * pf_out		5085538						
ANR	5086341	Symbol	pfont -> base		5085538						
ANR	5086342	Symbol	* pf_out -> procs . make_font		5085538						
ANR	5086343	Symbol	mem		5085538						
ANR	5086344	Symbol	pfont -> FontType		5085538						
ANR	5086345	Symbol	prev -> prev -> next		5085538						
ANR	5086346	Symbol	pf_out -> FontMatrix . xy		5085538						
ANR	5086347	Symbol	pf_out -> FontMatrix . xx		5085538						
ANR	5086348	Symbol	pf_out -> FontType		5085538						
ANR	5086349	Symbol	pf_out -> prev		5085538						
ANR	5086350	Symbol	( ( gs_font_base * ) prev ) -> UID		5085538						
ANR	5086351	Symbol	newmat . ty		5085538						
ANR	5086352	Symbol	newmat . tx		5085538						
ANR	5086353	Symbol	pfont		5085538						
ANR	5086354	Symbol	newmat . xy		5085538						
ANR	5086355	Symbol	newmat . xx		5085538						
ANR	5086356	Symbol	false		5085538						
ANR	5086357	Symbol	pf_out		5085538						
ANR	5086358	Symbol	ft_composite		5085538						
ANR	5086359	Symbol	* pdir		5085538						
ANR	5086360	Symbol	gs_error_VMerror		5085538						
ANR	5086361	Symbol	* pfont		5085538						
ANR	5086362	Symbol	pbfont		5085538						
ANR	5086363	Symbol	pf_out -> FontMatrix . yx		5085538						
ANR	5086364	Symbol	pf_out -> FontMatrix . yy		5085538						
ANR	5086365	Symbol	& pdir -> scaled_fonts		5085538						
ANR	5086366	Function	gs_set_currentfont	622:0:22644:22759							
ANR	5086367	FunctionDef	"gs_set_currentfont (gs_gstate * pgs , gs_font * pfont)"		5086366	0					
ANR	5086368	CompoundStatement		624:0:22702:22759	5086366	0					
ANR	5086369	ExpressionStatement	pgs -> font = pfont	625:4:22708:22725	5086366	0	True				
ANR	5086370	AssignmentExpression	pgs -> font = pfont		5086366	0		=			
ANR	5086371	PtrMemberAccess	pgs -> font		5086366	0					
ANR	5086372	Identifier	pgs		5086366	0					
ANR	5086373	Identifier	font		5086366	1					
ANR	5086374	Identifier	pfont		5086366	1					
ANR	5086375	ExpressionStatement	pgs -> char_tm_valid = false	626:4:22731:22757	5086366	1	True				
ANR	5086376	AssignmentExpression	pgs -> char_tm_valid = false		5086366	0		=			
ANR	5086377	PtrMemberAccess	pgs -> char_tm_valid		5086366	0					
ANR	5086378	Identifier	pgs		5086366	0					
ANR	5086379	Identifier	char_tm_valid		5086366	1					
ANR	5086380	Identifier	false		5086366	1					
ANR	5086381	ReturnType	void		5086366	1					
ANR	5086382	Identifier	gs_set_currentfont		5086366	2					
ANR	5086383	ParameterList	"gs_gstate * pgs , gs_font * pfont"		5086366	3					
ANR	5086384	Parameter	gs_gstate * pgs	623:19:22668:22682	5086366	0	True				
ANR	5086385	ParameterType	gs_gstate *		5086366	0					
ANR	5086386	Identifier	pgs		5086366	1					
ANR	5086387	Parameter	gs_font * pfont	623:36:22685:22699	5086366	1	True				
ANR	5086388	ParameterType	gs_font *		5086366	0					
ANR	5086389	Identifier	pfont		5086366	1					
ANR	5086390	CFGEntryNode	ENTRY		5086366		True				
ANR	5086391	CFGExitNode	EXIT		5086366		True				
ANR	5086392	Symbol	pgs -> char_tm_valid		5086366						
ANR	5086393	Symbol	pfont		5086366						
ANR	5086394	Symbol	* pgs		5086366						
ANR	5086395	Symbol	false		5086366						
ANR	5086396	Symbol	pgs -> font		5086366						
ANR	5086397	Symbol	pgs		5086366						
ANR	5086398	Function	gs_setfont	630:0:22776:22913							
ANR	5086399	FunctionDef	"gs_setfont (gs_gstate * pgs , gs_font * pfont)"		5086398	0					
ANR	5086400	CompoundStatement		632:0:22825:22913	5086398	0					
ANR	5086401	ExpressionStatement	pgs -> font = pgs -> root_font = pfont	633:4:22831:22865	5086398	0	True				
ANR	5086402	AssignmentExpression	pgs -> font = pgs -> root_font = pfont		5086398	0		=			
ANR	5086403	PtrMemberAccess	pgs -> font		5086398	0					
ANR	5086404	Identifier	pgs		5086398	0					
ANR	5086405	Identifier	font		5086398	1					
ANR	5086406	AssignmentExpression	pgs -> root_font = pfont		5086398	1		=			
ANR	5086407	PtrMemberAccess	pgs -> root_font		5086398	0					
ANR	5086408	Identifier	pgs		5086398	0					
ANR	5086409	Identifier	root_font		5086398	1					
ANR	5086410	Identifier	pfont		5086398	1					
ANR	5086411	ExpressionStatement	pgs -> char_tm_valid = false	634:4:22871:22897	5086398	1	True				
ANR	5086412	AssignmentExpression	pgs -> char_tm_valid = false		5086398	0		=			
ANR	5086413	PtrMemberAccess	pgs -> char_tm_valid		5086398	0					
ANR	5086414	Identifier	pgs		5086398	0					
ANR	5086415	Identifier	char_tm_valid		5086398	1					
ANR	5086416	Identifier	false		5086398	1					
ANR	5086417	ReturnStatement	return 0 ;	635:4:22903:22911	5086398	2	True				
ANR	5086418	PrimaryExpression	0		5086398	0					
ANR	5086419	ReturnType	int		5086398	1					
ANR	5086420	Identifier	gs_setfont		5086398	2					
ANR	5086421	ParameterList	"gs_gstate * pgs , gs_font * pfont"		5086398	3					
ANR	5086422	Parameter	gs_gstate * pgs	631:11:22791:22805	5086398	0	True				
ANR	5086423	ParameterType	gs_gstate *		5086398	0					
ANR	5086424	Identifier	pgs		5086398	1					
ANR	5086425	Parameter	gs_font * pfont	631:28:22808:22822	5086398	1	True				
ANR	5086426	ParameterType	gs_font *		5086398	0					
ANR	5086427	Identifier	pfont		5086398	1					
ANR	5086428	CFGEntryNode	ENTRY		5086398		True				
ANR	5086429	CFGExitNode	EXIT		5086398		True				
ANR	5086430	Symbol	pgs -> root_font		5086398						
ANR	5086431	Symbol	pgs -> char_tm_valid		5086398						
ANR	5086432	Symbol	pfont		5086398						
ANR	5086433	Symbol	* pgs		5086398						
ANR	5086434	Symbol	false		5086398						
ANR	5086435	Symbol	pgs -> font		5086398						
ANR	5086436	Symbol	pgs		5086398						
ANR	5086437	Function	gs_currentfont	639:0:22934:23006							
ANR	5086438	FunctionDef	gs_currentfont (const gs_gstate * pgs)		5086437	0					
ANR	5086439	CompoundStatement		641:0:22982:23006	5086437	0					
ANR	5086440	ReturnStatement	return pgs -> font ;	642:4:22988:23004	5086437	0	True				
ANR	5086441	PtrMemberAccess	pgs -> font		5086437	0					
ANR	5086442	Identifier	pgs		5086437	0					
ANR	5086443	Identifier	font		5086437	1					
ANR	5086444	ReturnType	gs_font *		5086437	1					
ANR	5086445	Identifier	gs_currentfont		5086437	2					
ANR	5086446	ParameterList	const gs_gstate * pgs		5086437	3					
ANR	5086447	Parameter	const gs_gstate * pgs	640:15:22959:22979	5086437	0	True				
ANR	5086448	ParameterType	const gs_gstate *		5086437	0					
ANR	5086449	Identifier	pgs		5086437	1					
ANR	5086450	CFGEntryNode	ENTRY		5086437		True				
ANR	5086451	CFGExitNode	EXIT		5086437		True				
ANR	5086452	Symbol	* pgs		5086437						
ANR	5086453	Symbol	pgs -> font		5086437						
ANR	5086454	Symbol	pgs		5086437						
ANR	5086455	Function	gs_rootfont	646:0:23024:23098							
ANR	5086456	FunctionDef	gs_rootfont (const gs_gstate * pgs)		5086455	0					
ANR	5086457	CompoundStatement		648:0:23069:23098	5086455	0					
ANR	5086458	ReturnStatement	return pgs -> root_font ;	649:4:23075:23096	5086455	0	True				
ANR	5086459	PtrMemberAccess	pgs -> root_font		5086455	0					
ANR	5086460	Identifier	pgs		5086455	0					
ANR	5086461	Identifier	root_font		5086455	1					
ANR	5086462	ReturnType	gs_font *		5086455	1					
ANR	5086463	Identifier	gs_rootfont		5086455	2					
ANR	5086464	ParameterList	const gs_gstate * pgs		5086455	3					
ANR	5086465	Parameter	const gs_gstate * pgs	647:12:23046:23066	5086455	0	True				
ANR	5086466	ParameterType	const gs_gstate *		5086455	0					
ANR	5086467	Identifier	pgs		5086455	1					
ANR	5086468	CFGEntryNode	ENTRY		5086455		True				
ANR	5086469	CFGExitNode	EXIT		5086455		True				
ANR	5086470	Symbol	pgs -> root_font		5086455						
ANR	5086471	Symbol	* pgs		5086455						
ANR	5086472	Symbol	pgs		5086455						
ANR	5086473	Function	gs_cachestatus	653:0:23119:23444							
ANR	5086474	FunctionDef	"gs_cachestatus (register const gs_font_dir * pdir , register uint pstat [ 7 ])"		5086473	0					
ANR	5086475	CompoundStatement		655:0:23198:23444	5086473	0					
ANR	5086476	ExpressionStatement	pstat [ 0 ] = pdir -> ccache . bsize	656:4:23204:23233	5086473	0	True				
ANR	5086477	AssignmentExpression	pstat [ 0 ] = pdir -> ccache . bsize		5086473	0		=			
ANR	5086478	ArrayIndexing	pstat [ 0 ]		5086473	0					
ANR	5086479	Identifier	pstat		5086473	0					
ANR	5086480	PrimaryExpression	0		5086473	1					
ANR	5086481	MemberAccess	pdir -> ccache . bsize		5086473	1					
ANR	5086482	PtrMemberAccess	pdir -> ccache		5086473	0					
ANR	5086483	Identifier	pdir		5086473	0					
ANR	5086484	Identifier	ccache		5086473	1					
ANR	5086485	Identifier	bsize		5086473	1					
ANR	5086486	ExpressionStatement	pstat [ 1 ] = pdir -> ccache . bmax	657:4:23239:23267	5086473	1	True				
ANR	5086487	AssignmentExpression	pstat [ 1 ] = pdir -> ccache . bmax		5086473	0		=			
ANR	5086488	ArrayIndexing	pstat [ 1 ]		5086473	0					
ANR	5086489	Identifier	pstat		5086473	0					
ANR	5086490	PrimaryExpression	1		5086473	1					
ANR	5086491	MemberAccess	pdir -> ccache . bmax		5086473	1					
ANR	5086492	PtrMemberAccess	pdir -> ccache		5086473	0					
ANR	5086493	Identifier	pdir		5086473	0					
ANR	5086494	Identifier	ccache		5086473	1					
ANR	5086495	Identifier	bmax		5086473	1					
ANR	5086496	ExpressionStatement	pstat [ 2 ] = pdir -> fmcache . msize	658:4:23273:23303	5086473	2	True				
ANR	5086497	AssignmentExpression	pstat [ 2 ] = pdir -> fmcache . msize		5086473	0		=			
ANR	5086498	ArrayIndexing	pstat [ 2 ]		5086473	0					
ANR	5086499	Identifier	pstat		5086473	0					
ANR	5086500	PrimaryExpression	2		5086473	1					
ANR	5086501	MemberAccess	pdir -> fmcache . msize		5086473	1					
ANR	5086502	PtrMemberAccess	pdir -> fmcache		5086473	0					
ANR	5086503	Identifier	pdir		5086473	0					
ANR	5086504	Identifier	fmcache		5086473	1					
ANR	5086505	Identifier	msize		5086473	1					
ANR	5086506	ExpressionStatement	pstat [ 3 ] = pdir -> fmcache . mmax	659:4:23309:23338	5086473	3	True				
ANR	5086507	AssignmentExpression	pstat [ 3 ] = pdir -> fmcache . mmax		5086473	0		=			
ANR	5086508	ArrayIndexing	pstat [ 3 ]		5086473	0					
ANR	5086509	Identifier	pstat		5086473	0					
ANR	5086510	PrimaryExpression	3		5086473	1					
ANR	5086511	MemberAccess	pdir -> fmcache . mmax		5086473	1					
ANR	5086512	PtrMemberAccess	pdir -> fmcache		5086473	0					
ANR	5086513	Identifier	pdir		5086473	0					
ANR	5086514	Identifier	fmcache		5086473	1					
ANR	5086515	Identifier	mmax		5086473	1					
ANR	5086516	ExpressionStatement	pstat [ 4 ] = pdir -> ccache . csize	660:4:23344:23373	5086473	4	True				
ANR	5086517	AssignmentExpression	pstat [ 4 ] = pdir -> ccache . csize		5086473	0		=			
ANR	5086518	ArrayIndexing	pstat [ 4 ]		5086473	0					
ANR	5086519	Identifier	pstat		5086473	0					
ANR	5086520	PrimaryExpression	4		5086473	1					
ANR	5086521	MemberAccess	pdir -> ccache . csize		5086473	1					
ANR	5086522	PtrMemberAccess	pdir -> ccache		5086473	0					
ANR	5086523	Identifier	pdir		5086473	0					
ANR	5086524	Identifier	ccache		5086473	1					
ANR	5086525	Identifier	csize		5086473	1					
ANR	5086526	ExpressionStatement	pstat [ 5 ] = pdir -> ccache . cmax	661:4:23379:23407	5086473	5	True				
ANR	5086527	AssignmentExpression	pstat [ 5 ] = pdir -> ccache . cmax		5086473	0		=			
ANR	5086528	ArrayIndexing	pstat [ 5 ]		5086473	0					
ANR	5086529	Identifier	pstat		5086473	0					
ANR	5086530	PrimaryExpression	5		5086473	1					
ANR	5086531	MemberAccess	pdir -> ccache . cmax		5086473	1					
ANR	5086532	PtrMemberAccess	pdir -> ccache		5086473	0					
ANR	5086533	Identifier	pdir		5086473	0					
ANR	5086534	Identifier	ccache		5086473	1					
ANR	5086535	Identifier	cmax		5086473	1					
ANR	5086536	ExpressionStatement	pstat [ 6 ] = pdir -> ccache . upper	662:4:23413:23442	5086473	6	True				
ANR	5086537	AssignmentExpression	pstat [ 6 ] = pdir -> ccache . upper		5086473	0		=			
ANR	5086538	ArrayIndexing	pstat [ 6 ]		5086473	0					
ANR	5086539	Identifier	pstat		5086473	0					
ANR	5086540	PrimaryExpression	6		5086473	1					
ANR	5086541	MemberAccess	pdir -> ccache . upper		5086473	1					
ANR	5086542	PtrMemberAccess	pdir -> ccache		5086473	0					
ANR	5086543	Identifier	pdir		5086473	0					
ANR	5086544	Identifier	ccache		5086473	1					
ANR	5086545	Identifier	upper		5086473	1					
ANR	5086546	ReturnType	void		5086473	1					
ANR	5086547	Identifier	gs_cachestatus		5086473	2					
ANR	5086548	ParameterList	"register const gs_font_dir * pdir , register uint pstat [ 7 ]"		5086473	3					
ANR	5086549	Parameter	register const gs_font_dir * pdir	654:15:23139:23171	5086473	0	True				
ANR	5086550	ParameterType	register const gs_font_dir *		5086473	0					
ANR	5086551	Identifier	pdir		5086473	1					
ANR	5086552	Parameter	register uint pstat [ 7 ]	654:50:23174:23195	5086473	1	True				
ANR	5086553	ParameterType	register uint [ 7 ]		5086473	0					
ANR	5086554	Identifier	pstat		5086473	1					
ANR	5086555	CFGEntryNode	ENTRY		5086473		True				
ANR	5086556	CFGExitNode	EXIT		5086473		True				
ANR	5086557	Symbol	pdir -> ccache . bsize		5086473						
ANR	5086558	Symbol	pdir -> fmcache		5086473						
ANR	5086559	Symbol	pstat		5086473						
ANR	5086560	Symbol	pdir		5086473						
ANR	5086561	Symbol	pdir -> ccache . bmax		5086473						
ANR	5086562	Symbol	pdir -> ccache . cmax		5086473						
ANR	5086563	Symbol	pdir -> ccache		5086473						
ANR	5086564	Symbol	pdir -> fmcache . msize		5086473						
ANR	5086565	Symbol	* pstat		5086473						
ANR	5086566	Symbol	* pdir		5086473						
ANR	5086567	Symbol	pdir -> ccache . csize		5086473						
ANR	5086568	Symbol	pdir -> ccache . upper		5086473						
ANR	5086569	Symbol	pdir -> fmcache . mmax		5086473						
ANR	5086570	Function	gs_setcachesize	666:0:23468:24680							
ANR	5086571	FunctionDef	"gs_setcachesize (gs_gstate * pgs , gs_font_dir * pdir , uint size)"		5086570	0					
ANR	5086572	CompoundStatement		668:0:23536:24680	5086570	0					
ANR	5086573	IdentifierDeclStatement	gs_memory_t * stable_mem = pdir -> memory -> stable_memory ;	669:4:23542:23595	5086570	0	True				
ANR	5086574	IdentifierDecl	* stable_mem = pdir -> memory -> stable_memory		5086570	0					
ANR	5086575	IdentifierDeclType	gs_memory_t *		5086570	0					
ANR	5086576	Identifier	stable_mem		5086570	1					
ANR	5086577	AssignmentExpression	* stable_mem = pdir -> memory -> stable_memory		5086570	2		=			
ANR	5086578	Identifier	stable_mem		5086570	0					
ANR	5086579	PtrMemberAccess	pdir -> memory -> stable_memory		5086570	1					
ANR	5086580	PtrMemberAccess	pdir -> memory		5086570	0					
ANR	5086581	Identifier	pdir		5086570	0					
ANR	5086582	Identifier	memory		5086570	1					
ANR	5086583	Identifier	stable_memory		5086570	1					
ANR	5086584	IfStatement	if ( size < 100000 )		5086570	1					
ANR	5086585	Condition	size < 100000	670:8:23605:23617	5086570	0	True				
ANR	5086586	RelationalExpression	size < 100000		5086570	0		<			
ANR	5086587	Identifier	size		5086570	0					
ANR	5086588	PrimaryExpression	100000		5086570	1					
ANR	5086589	ExpressionStatement	size = 100000	671:8:23693:23706	5086570	1	True				
ANR	5086590	AssignmentExpression	size = 100000		5086570	0		=			
ANR	5086591	Identifier	size		5086570	0					
ANR	5086592	PrimaryExpression	100000		5086570	1					
ANR	5086593	ElseStatement	else		5086570	0					
ANR	5086594	IfStatement	if ( size > 100000000 )		5086570	0					
ANR	5086595	Condition	size > 100000000	672:13:23721:23736	5086570	0	True				
ANR	5086596	RelationalExpression	size > 100000000		5086570	0		>			
ANR	5086597	Identifier	size		5086570	0					
ANR	5086598	PrimaryExpression	100000000		5086570	1					
ANR	5086599	ExpressionStatement	size = 100000000	673:8:23747:23763	5086570	1	True				
ANR	5086600	AssignmentExpression	size = 100000000		5086570	0		=			
ANR	5086601	Identifier	size		5086570	0					
ANR	5086602	PrimaryExpression	100000000		5086570	1					
ANR	5086603	CompoundStatement		12:8:406:414	5086570	2					
ANR	5086604	IdentifierDeclStatement	gs_font * pfont ;	678:8:23919:23933	5086570	0	True				
ANR	5086605	IdentifierDecl	* pfont		5086570	0					
ANR	5086606	IdentifierDeclType	gs_font *		5086570	0					
ANR	5086607	Identifier	pfont		5086570	1					
ANR	5086608	IdentifierDeclStatement	int code ;	679:8:23943:23951	5086570	1	True				
ANR	5086609	IdentifierDecl	code		5086570	0					
ANR	5086610	IdentifierDeclType	int		5086570	0					
ANR	5086611	Identifier	code		5086570	1					
ANR	5086612	ForStatement	for ( pfont = pdir -> scaled_fonts ; pfont != 0 ; pfont = pfont -> next )		5086570	2					
ANR	5086613	ForInit	pfont = pdir -> scaled_fonts ;	680:13:23966:23992	5086570	0	True				
ANR	5086614	AssignmentExpression	pfont = pdir -> scaled_fonts		5086570	0		=			
ANR	5086615	Identifier	pfont		5086570	0					
ANR	5086616	PtrMemberAccess	pdir -> scaled_fonts		5086570	1					
ANR	5086617	Identifier	pdir		5086570	0					
ANR	5086618	Identifier	scaled_fonts		5086570	1					
ANR	5086619	Condition	pfont != 0	680:41:23994:24003	5086570	1	True				
ANR	5086620	EqualityExpression	pfont != 0		5086570	0		!=			
ANR	5086621	Identifier	pfont		5086570	0					
ANR	5086622	PrimaryExpression	0		5086570	1					
ANR	5086623	AssignmentExpression	pfont = pfont -> next	680:53:24006:24024	5086570	2	True	=			
ANR	5086624	Identifier	pfont		5086570	0					
ANR	5086625	PtrMemberAccess	pfont -> next		5086570	1					
ANR	5086626	Identifier	pfont		5086570	0					
ANR	5086627	Identifier	next		5086570	1					
ANR	5086628	CompoundStatement		13:74:490:490	5086570	3					
ANR	5086629	ExpressionStatement	code = gs_purge_font_from_char_caches_completely ( pfont )	681:12:24041:24096	5086570	0	True				
ANR	5086630	AssignmentExpression	code = gs_purge_font_from_char_caches_completely ( pfont )		5086570	0		=			
ANR	5086631	Identifier	code		5086570	0					
ANR	5086632	CallExpression	gs_purge_font_from_char_caches_completely ( pfont )		5086570	1					
ANR	5086633	Callee	gs_purge_font_from_char_caches_completely		5086570	0					
ANR	5086634	Identifier	gs_purge_font_from_char_caches_completely		5086570	0					
ANR	5086635	ArgumentList	pfont		5086570	1					
ANR	5086636	Argument	pfont		5086570	0					
ANR	5086637	Identifier	pfont		5086570	0					
ANR	5086638	IfStatement	if ( code != 0 )		5086570	1					
ANR	5086639	Condition	code != 0	682:16:24114:24122	5086570	0	True				
ANR	5086640	EqualityExpression	code != 0		5086570	0		!=			
ANR	5086641	Identifier	code		5086570	0					
ANR	5086642	PrimaryExpression	0		5086570	1					
ANR	5086643	ExpressionStatement	gs_rethrow_code ( code )	683:16:24141:24162	5086570	1	True				
ANR	5086644	CallExpression	gs_rethrow_code ( code )		5086570	0					
ANR	5086645	Callee	gs_rethrow_code		5086570	0					
ANR	5086646	Identifier	gs_rethrow_code		5086570	0					
ANR	5086647	ArgumentList	code		5086570	1					
ANR	5086648	Argument	code		5086570	0					
ANR	5086649	Identifier	code		5086570	0					
ANR	5086650	ExpressionStatement	"gs_free_object ( stable_mem , pdir -> fmcache . mdata , ""gs_setcachesize(mdata)"" )"	690:4:24280:24353	5086570	3	True				
ANR	5086651	CallExpression	"gs_free_object ( stable_mem , pdir -> fmcache . mdata , ""gs_setcachesize(mdata)"" )"		5086570	0					
ANR	5086652	Callee	gs_free_object		5086570	0					
ANR	5086653	Identifier	gs_free_object		5086570	0					
ANR	5086654	ArgumentList	stable_mem		5086570	1					
ANR	5086655	Argument	stable_mem		5086570	0					
ANR	5086656	Identifier	stable_mem		5086570	0					
ANR	5086657	Argument	pdir -> fmcache . mdata		5086570	1					
ANR	5086658	MemberAccess	pdir -> fmcache . mdata		5086570	0					
ANR	5086659	PtrMemberAccess	pdir -> fmcache		5086570	0					
ANR	5086660	Identifier	pdir		5086570	0					
ANR	5086661	Identifier	fmcache		5086570	1					
ANR	5086662	Identifier	mdata		5086570	1					
ANR	5086663	Argument	"""gs_setcachesize(mdata)"""		5086570	2					
ANR	5086664	PrimaryExpression	"""gs_setcachesize(mdata)"""		5086570	0					
ANR	5086665	ExpressionStatement	"gs_free_object ( stable_mem , pdir -> ccache . table , ""gs_setcachesize(table)"" )"	691:4:24359:24431	5086570	4	True				
ANR	5086666	CallExpression	"gs_free_object ( stable_mem , pdir -> ccache . table , ""gs_setcachesize(table)"" )"		5086570	0					
ANR	5086667	Callee	gs_free_object		5086570	0					
ANR	5086668	Identifier	gs_free_object		5086570	0					
ANR	5086669	ArgumentList	stable_mem		5086570	1					
ANR	5086670	Argument	stable_mem		5086570	0					
ANR	5086671	Identifier	stable_mem		5086570	0					
ANR	5086672	Argument	pdir -> ccache . table		5086570	1					
ANR	5086673	MemberAccess	pdir -> ccache . table		5086570	0					
ANR	5086674	PtrMemberAccess	pdir -> ccache		5086570	0					
ANR	5086675	Identifier	pdir		5086570	0					
ANR	5086676	Identifier	ccache		5086570	1					
ANR	5086677	Identifier	table		5086570	1					
ANR	5086678	Argument	"""gs_setcachesize(table)"""		5086570	2					
ANR	5086679	PrimaryExpression	"""gs_setcachesize(table)"""		5086570	0					
ANR	5086680	ExpressionStatement	pdir -> ccache . bmax = size	692:4:24437:24461	5086570	5	True				
ANR	5086681	AssignmentExpression	pdir -> ccache . bmax = size		5086570	0		=			
ANR	5086682	MemberAccess	pdir -> ccache . bmax		5086570	0					
ANR	5086683	PtrMemberAccess	pdir -> ccache		5086570	0					
ANR	5086684	Identifier	pdir		5086570	0					
ANR	5086685	Identifier	ccache		5086570	1					
ANR	5086686	Identifier	bmax		5086570	1					
ANR	5086687	Identifier	size		5086570	1					
ANR	5086688	ReturnStatement	"return gx_char_cache_alloc ( stable_mem , stable_mem -> non_gc_memory , pdir , pdir -> ccache . bmax , pdir -> fmcache . mmax , pdir -> ccache . cmax , pdir -> ccache . upper ) ;"	693:4:24467:24678	5086570	6	True				
ANR	5086689	CallExpression	"gx_char_cache_alloc ( stable_mem , stable_mem -> non_gc_memory , pdir , pdir -> ccache . bmax , pdir -> fmcache . mmax , pdir -> ccache . cmax , pdir -> ccache . upper )"		5086570	0					
ANR	5086690	Callee	gx_char_cache_alloc		5086570	0					
ANR	5086691	Identifier	gx_char_cache_alloc		5086570	0					
ANR	5086692	ArgumentList	stable_mem		5086570	1					
ANR	5086693	Argument	stable_mem		5086570	0					
ANR	5086694	Identifier	stable_mem		5086570	0					
ANR	5086695	Argument	stable_mem -> non_gc_memory		5086570	1					
ANR	5086696	PtrMemberAccess	stable_mem -> non_gc_memory		5086570	0					
ANR	5086697	Identifier	stable_mem		5086570	0					
ANR	5086698	Identifier	non_gc_memory		5086570	1					
ANR	5086699	Argument	pdir		5086570	2					
ANR	5086700	Identifier	pdir		5086570	0					
ANR	5086701	Argument	pdir -> ccache . bmax		5086570	3					
ANR	5086702	MemberAccess	pdir -> ccache . bmax		5086570	0					
ANR	5086703	PtrMemberAccess	pdir -> ccache		5086570	0					
ANR	5086704	Identifier	pdir		5086570	0					
ANR	5086705	Identifier	ccache		5086570	1					
ANR	5086706	Identifier	bmax		5086570	1					
ANR	5086707	Argument	pdir -> fmcache . mmax		5086570	4					
ANR	5086708	MemberAccess	pdir -> fmcache . mmax		5086570	0					
ANR	5086709	PtrMemberAccess	pdir -> fmcache		5086570	0					
ANR	5086710	Identifier	pdir		5086570	0					
ANR	5086711	Identifier	fmcache		5086570	1					
ANR	5086712	Identifier	mmax		5086570	1					
ANR	5086713	Argument	pdir -> ccache . cmax		5086570	5					
ANR	5086714	MemberAccess	pdir -> ccache . cmax		5086570	0					
ANR	5086715	PtrMemberAccess	pdir -> ccache		5086570	0					
ANR	5086716	Identifier	pdir		5086570	0					
ANR	5086717	Identifier	ccache		5086570	1					
ANR	5086718	Identifier	cmax		5086570	1					
ANR	5086719	Argument	pdir -> ccache . upper		5086570	6					
ANR	5086720	MemberAccess	pdir -> ccache . upper		5086570	0					
ANR	5086721	PtrMemberAccess	pdir -> ccache		5086570	0					
ANR	5086722	Identifier	pdir		5086570	0					
ANR	5086723	Identifier	ccache		5086570	1					
ANR	5086724	Identifier	upper		5086570	1					
ANR	5086725	ReturnType	int		5086570	1					
ANR	5086726	Identifier	gs_setcachesize		5086570	2					
ANR	5086727	ParameterList	"gs_gstate * pgs , gs_font_dir * pdir , uint size"		5086570	3					
ANR	5086728	Parameter	gs_gstate * pgs	667:16:23488:23502	5086570	0	True				
ANR	5086729	ParameterType	gs_gstate *		5086570	0					
ANR	5086730	Identifier	pgs		5086570	1					
ANR	5086731	Parameter	gs_font_dir * pdir	667:33:23505:23522	5086570	1	True				
ANR	5086732	ParameterType	gs_font_dir *		5086570	0					
ANR	5086733	Identifier	pdir		5086570	1					
ANR	5086734	Parameter	uint size	667:53:23525:23533	5086570	2	True				
ANR	5086735	ParameterType	uint		5086570	0					
ANR	5086736	Identifier	size		5086570	1					
ANR	5086737	CFGEntryNode	ENTRY		5086570		True				
ANR	5086738	CFGExitNode	EXIT		5086570		True				
ANR	5086739	Symbol	gs_purge_font_from_char_caches_completely		5086570						
ANR	5086740	Symbol	pdir -> fmcache		5086570						
ANR	5086741	Symbol	code		5086570						
ANR	5086742	Symbol	pdir -> ccache . cmax		5086570						
ANR	5086743	Symbol	pdir -> ccache		5086570						
ANR	5086744	Symbol	pdir -> scaled_fonts		5086570						
ANR	5086745	Symbol	* pdir -> memory		5086570						
ANR	5086746	Symbol	* * pdir		5086570						
ANR	5086747	Symbol	pdir -> ccache . table		5086570						
ANR	5086748	Symbol	pfont -> next		5086570						
ANR	5086749	Symbol	gx_char_cache_alloc		5086570						
ANR	5086750	Symbol	pgs		5086570						
ANR	5086751	Symbol	pdir -> fmcache . mmax		5086570						
ANR	5086752	Symbol	pfont		5086570						
ANR	5086753	Symbol	pdir		5086570						
ANR	5086754	Symbol	pdir -> ccache . bmax		5086570						
ANR	5086755	Symbol	pdir -> memory -> stable_memory		5086570						
ANR	5086756	Symbol	stable_mem		5086570						
ANR	5086757	Symbol	pdir -> fmcache . mdata		5086570						
ANR	5086758	Symbol	* stable_mem		5086570						
ANR	5086759	Symbol	* pdir		5086570						
ANR	5086760	Symbol	* pfont		5086570						
ANR	5086761	Symbol	stable_mem -> non_gc_memory		5086570						
ANR	5086762	Symbol	size		5086570						
ANR	5086763	Symbol	pdir -> ccache . upper		5086570						
ANR	5086764	Symbol	pdir -> memory		5086570						
ANR	5086765	Function	gs_setcachelower	698:0:24683:24827							
ANR	5086766	FunctionDef	"gs_setcachelower (gs_font_dir * pdir , uint size)"		5086765	0					
ANR	5086767	CompoundStatement		700:0:24735:24827	5086765	0					
ANR	5086768	ExpressionStatement	pdir -> ccache . lower = ( ( int ) size < 0 ) ? 0 : size	701:4:24741:24788	5086765	0	True				
ANR	5086769	AssignmentExpression	pdir -> ccache . lower = ( ( int ) size < 0 ) ? 0 : size		5086765	0		=			
ANR	5086770	MemberAccess	pdir -> ccache . lower		5086765	0					
ANR	5086771	PtrMemberAccess	pdir -> ccache		5086765	0					
ANR	5086772	Identifier	pdir		5086765	0					
ANR	5086773	Identifier	ccache		5086765	1					
ANR	5086774	Identifier	lower		5086765	1					
ANR	5086775	ConditionalExpression	( ( int ) size < 0 ) ? 0 : size		5086765	1					
ANR	5086776	Condition	( int ) size < 0		5086765	0					
ANR	5086777	RelationalExpression	( int ) size < 0		5086765	0		<			
ANR	5086778	CastExpression	( int ) size		5086765	0					
ANR	5086779	CastTarget	int		5086765	0					
ANR	5086780	Identifier	size		5086765	1					
ANR	5086781	PrimaryExpression	0		5086765	1					
ANR	5086782	PrimaryExpression	0		5086765	1					
ANR	5086783	Identifier	size		5086765	2					
ANR	5086784	ReturnStatement	return 0 ;	702:4:24817:24825	5086765	1	True				
ANR	5086785	PrimaryExpression	0		5086765	0					
ANR	5086786	ReturnType	int		5086765	1					
ANR	5086787	Identifier	gs_setcachelower		5086765	2					
ANR	5086788	ParameterList	"gs_font_dir * pdir , uint size"		5086765	3					
ANR	5086789	Parameter	gs_font_dir * pdir	699:17:24704:24721	5086765	0	True				
ANR	5086790	ParameterType	gs_font_dir *		5086765	0					
ANR	5086791	Identifier	pdir		5086765	1					
ANR	5086792	Parameter	uint size	699:37:24724:24732	5086765	1	True				
ANR	5086793	ParameterType	uint		5086765	0					
ANR	5086794	Identifier	size		5086765	1					
ANR	5086795	CFGEntryNode	ENTRY		5086765		True				
ANR	5086796	CFGExitNode	EXIT		5086765		True				
ANR	5086797	Symbol	* pdir		5086765						
ANR	5086798	Symbol	size		5086765						
ANR	5086799	Symbol	pdir		5086765						
ANR	5086800	Symbol	pdir -> ccache		5086765						
ANR	5086801	Symbol	pdir -> ccache . lower		5086765						
ANR	5086802	Function	gs_setcacheupper	704:0:24829:24973							
ANR	5086803	FunctionDef	"gs_setcacheupper (gs_font_dir * pdir , uint size)"		5086802	0					
ANR	5086804	CompoundStatement		706:0:24881:24973	5086802	0					
ANR	5086805	ExpressionStatement	pdir -> ccache . upper = ( ( int ) size < 0 ) ? 0 : size	707:4:24887:24934	5086802	0	True				
ANR	5086806	AssignmentExpression	pdir -> ccache . upper = ( ( int ) size < 0 ) ? 0 : size		5086802	0		=			
ANR	5086807	MemberAccess	pdir -> ccache . upper		5086802	0					
ANR	5086808	PtrMemberAccess	pdir -> ccache		5086802	0					
ANR	5086809	Identifier	pdir		5086802	0					
ANR	5086810	Identifier	ccache		5086802	1					
ANR	5086811	Identifier	upper		5086802	1					
ANR	5086812	ConditionalExpression	( ( int ) size < 0 ) ? 0 : size		5086802	1					
ANR	5086813	Condition	( int ) size < 0		5086802	0					
ANR	5086814	RelationalExpression	( int ) size < 0		5086802	0		<			
ANR	5086815	CastExpression	( int ) size		5086802	0					
ANR	5086816	CastTarget	int		5086802	0					
ANR	5086817	Identifier	size		5086802	1					
ANR	5086818	PrimaryExpression	0		5086802	1					
ANR	5086819	PrimaryExpression	0		5086802	1					
ANR	5086820	Identifier	size		5086802	2					
ANR	5086821	ReturnStatement	return 0 ;	708:4:24963:24971	5086802	1	True				
ANR	5086822	PrimaryExpression	0		5086802	0					
ANR	5086823	ReturnType	int		5086802	1					
ANR	5086824	Identifier	gs_setcacheupper		5086802	2					
ANR	5086825	ParameterList	"gs_font_dir * pdir , uint size"		5086802	3					
ANR	5086826	Parameter	gs_font_dir * pdir	705:17:24850:24867	5086802	0	True				
ANR	5086827	ParameterType	gs_font_dir *		5086802	0					
ANR	5086828	Identifier	pdir		5086802	1					
ANR	5086829	Parameter	uint size	705:37:24870:24878	5086802	1	True				
ANR	5086830	ParameterType	uint		5086802	0					
ANR	5086831	Identifier	size		5086802	1					
ANR	5086832	CFGEntryNode	ENTRY		5086802		True				
ANR	5086833	CFGExitNode	EXIT		5086802		True				
ANR	5086834	Symbol	* pdir		5086802						
ANR	5086835	Symbol	size		5086802						
ANR	5086836	Symbol	pdir		5086802						
ANR	5086837	Symbol	pdir -> ccache		5086802						
ANR	5086838	Symbol	pdir -> ccache . upper		5086802						
ANR	5086839	Function	gs_setaligntopixels	710:0:24975:25074							
ANR	5086840	FunctionDef	"gs_setaligntopixels (gs_font_dir * pdir , uint v)"		5086839	0					
ANR	5086841	CompoundStatement		712:0:25027:25074	5086839	0					
ANR	5086842	ExpressionStatement	pdir -> align_to_pixels = v	713:4:25033:25058	5086839	0	True				
ANR	5086843	AssignmentExpression	pdir -> align_to_pixels = v		5086839	0		=			
ANR	5086844	PtrMemberAccess	pdir -> align_to_pixels		5086839	0					
ANR	5086845	Identifier	pdir		5086839	0					
ANR	5086846	Identifier	align_to_pixels		5086839	1					
ANR	5086847	Identifier	v		5086839	1					
ANR	5086848	ReturnStatement	return 0 ;	714:4:25064:25072	5086839	1	True				
ANR	5086849	PrimaryExpression	0		5086839	0					
ANR	5086850	ReturnType	int		5086839	1					
ANR	5086851	Identifier	gs_setaligntopixels		5086839	2					
ANR	5086852	ParameterList	"gs_font_dir * pdir , uint v"		5086839	3					
ANR	5086853	Parameter	gs_font_dir * pdir	711:20:24999:25016	5086839	0	True				
ANR	5086854	ParameterType	gs_font_dir *		5086839	0					
ANR	5086855	Identifier	pdir		5086839	1					
ANR	5086856	Parameter	uint v	711:40:25019:25024	5086839	1	True				
ANR	5086857	ParameterType	uint		5086839	0					
ANR	5086858	Identifier	v		5086839	1					
ANR	5086859	CFGEntryNode	ENTRY		5086839		True				
ANR	5086860	CFGExitNode	EXIT		5086839		True				
ANR	5086861	Symbol	* pdir		5086839						
ANR	5086862	Symbol	v		5086839						
ANR	5086863	Symbol	pdir -> align_to_pixels		5086839						
ANR	5086864	Symbol	pdir		5086839						
ANR	5086865	Function	gs_setgridfittt	716:0:25076:25167							
ANR	5086866	FunctionDef	"gs_setgridfittt (gs_font_dir * pdir , uint v)"		5086865	0					
ANR	5086867	CompoundStatement		718:0:25124:25167	5086865	0					
ANR	5086868	ExpressionStatement	pdir -> grid_fit_tt = v	719:4:25130:25151	5086865	0	True				
ANR	5086869	AssignmentExpression	pdir -> grid_fit_tt = v		5086865	0		=			
ANR	5086870	PtrMemberAccess	pdir -> grid_fit_tt		5086865	0					
ANR	5086871	Identifier	pdir		5086865	0					
ANR	5086872	Identifier	grid_fit_tt		5086865	1					
ANR	5086873	Identifier	v		5086865	1					
ANR	5086874	ReturnStatement	return 0 ;	720:4:25157:25165	5086865	1	True				
ANR	5086875	PrimaryExpression	0		5086865	0					
ANR	5086876	ReturnType	int		5086865	1					
ANR	5086877	Identifier	gs_setgridfittt		5086865	2					
ANR	5086878	ParameterList	"gs_font_dir * pdir , uint v"		5086865	3					
ANR	5086879	Parameter	gs_font_dir * pdir	717:16:25096:25113	5086865	0	True				
ANR	5086880	ParameterType	gs_font_dir *		5086865	0					
ANR	5086881	Identifier	pdir		5086865	1					
ANR	5086882	Parameter	uint v	717:36:25116:25121	5086865	1	True				
ANR	5086883	ParameterType	uint		5086865	0					
ANR	5086884	Identifier	v		5086865	1					
ANR	5086885	CFGEntryNode	ENTRY		5086865		True				
ANR	5086886	CFGExitNode	EXIT		5086865		True				
ANR	5086887	Symbol	* pdir		5086865						
ANR	5086888	Symbol	v		5086865						
ANR	5086889	Symbol	pdir -> grid_fit_tt		5086865						
ANR	5086890	Symbol	pdir		5086865						
ANR	5086891	Function	gs_currentcachesize	724:0:25195:25278							
ANR	5086892	FunctionDef	gs_currentcachesize (const gs_font_dir * pdir)		5086891	0					
ANR	5086893	CompoundStatement		726:0:25246:25278	5086891	0					
ANR	5086894	ReturnStatement	return pdir -> ccache . bmax ;	727:4:25252:25276	5086891	0	True				
ANR	5086895	MemberAccess	pdir -> ccache . bmax		5086891	0					
ANR	5086896	PtrMemberAccess	pdir -> ccache		5086891	0					
ANR	5086897	Identifier	pdir		5086891	0					
ANR	5086898	Identifier	ccache		5086891	1					
ANR	5086899	Identifier	bmax		5086891	1					
ANR	5086900	ReturnType	uint		5086891	1					
ANR	5086901	Identifier	gs_currentcachesize		5086891	2					
ANR	5086902	ParameterList	const gs_font_dir * pdir		5086891	3					
ANR	5086903	Parameter	const gs_font_dir * pdir	725:20:25220:25243	5086891	0	True				
ANR	5086904	ParameterType	const gs_font_dir *		5086891	0					
ANR	5086905	Identifier	pdir		5086891	1					
ANR	5086906	CFGEntryNode	ENTRY		5086891		True				
ANR	5086907	CFGExitNode	EXIT		5086891		True				
ANR	5086908	Symbol	* pdir		5086891						
ANR	5086909	Symbol	pdir		5086891						
ANR	5086910	Symbol	pdir -> ccache . bmax		5086891						
ANR	5086911	Symbol	pdir -> ccache		5086891						
ANR	5086912	Function	gs_currentcachelower	729:0:25280:25365							
ANR	5086913	FunctionDef	gs_currentcachelower (const gs_font_dir * pdir)		5086912	0					
ANR	5086914	CompoundStatement		731:0:25332:25365	5086912	0					
ANR	5086915	ReturnStatement	return pdir -> ccache . lower ;	732:4:25338:25363	5086912	0	True				
ANR	5086916	MemberAccess	pdir -> ccache . lower		5086912	0					
ANR	5086917	PtrMemberAccess	pdir -> ccache		5086912	0					
ANR	5086918	Identifier	pdir		5086912	0					
ANR	5086919	Identifier	ccache		5086912	1					
ANR	5086920	Identifier	lower		5086912	1					
ANR	5086921	ReturnType	uint		5086912	1					
ANR	5086922	Identifier	gs_currentcachelower		5086912	2					
ANR	5086923	ParameterList	const gs_font_dir * pdir		5086912	3					
ANR	5086924	Parameter	const gs_font_dir * pdir	730:21:25306:25329	5086912	0	True				
ANR	5086925	ParameterType	const gs_font_dir *		5086912	0					
ANR	5086926	Identifier	pdir		5086912	1					
ANR	5086927	CFGEntryNode	ENTRY		5086912		True				
ANR	5086928	CFGExitNode	EXIT		5086912		True				
ANR	5086929	Symbol	* pdir		5086912						
ANR	5086930	Symbol	pdir		5086912						
ANR	5086931	Symbol	pdir -> ccache		5086912						
ANR	5086932	Symbol	pdir -> ccache . lower		5086912						
ANR	5086933	Function	gs_currentcacheupper	734:0:25367:25452							
ANR	5086934	FunctionDef	gs_currentcacheupper (const gs_font_dir * pdir)		5086933	0					
ANR	5086935	CompoundStatement		736:0:25419:25452	5086933	0					
ANR	5086936	ReturnStatement	return pdir -> ccache . upper ;	737:4:25425:25450	5086933	0	True				
ANR	5086937	MemberAccess	pdir -> ccache . upper		5086933	0					
ANR	5086938	PtrMemberAccess	pdir -> ccache		5086933	0					
ANR	5086939	Identifier	pdir		5086933	0					
ANR	5086940	Identifier	ccache		5086933	1					
ANR	5086941	Identifier	upper		5086933	1					
ANR	5086942	ReturnType	uint		5086933	1					
ANR	5086943	Identifier	gs_currentcacheupper		5086933	2					
ANR	5086944	ParameterList	const gs_font_dir * pdir		5086933	3					
ANR	5086945	Parameter	const gs_font_dir * pdir	735:21:25393:25416	5086933	0	True				
ANR	5086946	ParameterType	const gs_font_dir *		5086933	0					
ANR	5086947	Identifier	pdir		5086933	1					
ANR	5086948	CFGEntryNode	ENTRY		5086933		True				
ANR	5086949	CFGExitNode	EXIT		5086933		True				
ANR	5086950	Symbol	* pdir		5086933						
ANR	5086951	Symbol	pdir		5086933						
ANR	5086952	Symbol	pdir -> ccache		5086933						
ANR	5086953	Symbol	pdir -> ccache . upper		5086933						
ANR	5086954	Function	gs_currentaligntopixels	739:0:25454:25545							
ANR	5086955	FunctionDef	gs_currentaligntopixels (const gs_font_dir * pdir)		5086954	0					
ANR	5086956	CompoundStatement		741:0:25509:25545	5086954	0					
ANR	5086957	ReturnStatement	return pdir -> align_to_pixels ;	742:4:25515:25543	5086954	0	True				
ANR	5086958	PtrMemberAccess	pdir -> align_to_pixels		5086954	0					
ANR	5086959	Identifier	pdir		5086954	0					
ANR	5086960	Identifier	align_to_pixels		5086954	1					
ANR	5086961	ReturnType	uint		5086954	1					
ANR	5086962	Identifier	gs_currentaligntopixels		5086954	2					
ANR	5086963	ParameterList	const gs_font_dir * pdir		5086954	3					
ANR	5086964	Parameter	const gs_font_dir * pdir	740:24:25483:25506	5086954	0	True				
ANR	5086965	ParameterType	const gs_font_dir *		5086954	0					
ANR	5086966	Identifier	pdir		5086954	1					
ANR	5086967	CFGEntryNode	ENTRY		5086954		True				
ANR	5086968	CFGExitNode	EXIT		5086954		True				
ANR	5086969	Symbol	* pdir		5086954						
ANR	5086970	Symbol	pdir -> align_to_pixels		5086954						
ANR	5086971	Symbol	pdir		5086954						
ANR	5086972	Function	gs_currentgridfittt	744:0:25547:25630							
ANR	5086973	FunctionDef	gs_currentgridfittt (const gs_font_dir * pdir)		5086972	0					
ANR	5086974	CompoundStatement		746:0:25598:25630	5086972	0					
ANR	5086975	ReturnStatement	return pdir -> grid_fit_tt ;	747:4:25604:25628	5086972	0	True				
ANR	5086976	PtrMemberAccess	pdir -> grid_fit_tt		5086972	0					
ANR	5086977	Identifier	pdir		5086972	0					
ANR	5086978	Identifier	grid_fit_tt		5086972	1					
ANR	5086979	ReturnType	uint		5086972	1					
ANR	5086980	Identifier	gs_currentgridfittt		5086972	2					
ANR	5086981	ParameterList	const gs_font_dir * pdir		5086972	3					
ANR	5086982	Parameter	const gs_font_dir * pdir	745:20:25572:25595	5086972	0	True				
ANR	5086983	ParameterType	const gs_font_dir *		5086972	0					
ANR	5086984	Identifier	pdir		5086972	1					
ANR	5086985	CFGEntryNode	ENTRY		5086972		True				
ANR	5086986	CFGExitNode	EXIT		5086972		True				
ANR	5086987	Symbol	* pdir		5086972						
ANR	5086988	Symbol	pdir -> grid_fit_tt		5086972						
ANR	5086989	Symbol	pdir		5086972						
ANR	5086990	Function	gs_purge_font	752:0:25756:26878							
ANR	5086991	FunctionDef	gs_purge_font (gs_font * pfont)		5086990	0					
ANR	5086992	CompoundStatement		754:0:25791:26878	5086990	0					
ANR	5086993	IdentifierDeclStatement	gs_font_dir * pdir = pfont -> dir ;	755:4:25797:25827	5086990	0	True				
ANR	5086994	IdentifierDecl	* pdir = pfont -> dir		5086990	0					
ANR	5086995	IdentifierDeclType	gs_font_dir *		5086990	0					
ANR	5086996	Identifier	pdir		5086990	1					
ANR	5086997	AssignmentExpression	* pdir = pfont -> dir		5086990	2		=			
ANR	5086998	Identifier	pdir		5086990	0					
ANR	5086999	PtrMemberAccess	pfont -> dir		5086990	1					
ANR	5087000	Identifier	pfont		5086990	0					
ANR	5087001	Identifier	dir		5086990	1					
ANR	5087002	IdentifierDeclStatement	gs_font * pf ;	756:4:25833:25844	5086990	1	True				
ANR	5087003	IdentifierDecl	* pf		5086990	0					
ANR	5087004	IdentifierDeclType	gs_font *		5086990	0					
ANR	5087005	Identifier	pf		5086990	1					
ANR	5087006	IdentifierDeclStatement	gs_font * prev = pfont -> prev ;	759:4:25921:25948	5086990	2	True				
ANR	5087007	IdentifierDecl	* prev = pfont -> prev		5086990	0					
ANR	5087008	IdentifierDeclType	gs_font *		5086990	0					
ANR	5087009	Identifier	prev		5086990	1					
ANR	5087010	AssignmentExpression	* prev = pfont -> prev		5086990	2		=			
ANR	5087011	Identifier	prev		5086990	0					
ANR	5087012	PtrMemberAccess	pfont -> prev		5086990	1					
ANR	5087013	Identifier	pfont		5086990	0					
ANR	5087014	Identifier	prev		5086990	1					
ANR	5087015	IdentifierDeclStatement	gs_font * next = pfont -> next ;	760:4:25954:25981	5086990	3	True				
ANR	5087016	IdentifierDecl	* next = pfont -> next		5086990	0					
ANR	5087017	IdentifierDeclType	gs_font *		5086990	0					
ANR	5087018	Identifier	next		5086990	1					
ANR	5087019	AssignmentExpression	* next = pfont -> next		5086990	2		=			
ANR	5087020	Identifier	next		5086990	0					
ANR	5087021	PtrMemberAccess	pfont -> next		5086990	1					
ANR	5087022	Identifier	pfont		5086990	0					
ANR	5087023	Identifier	next		5086990	1					
ANR	5087024	IfStatement	if ( next != 0 )		5086990	4					
ANR	5087025	Condition	next != 0	762:8:25992:26000	5086990	0	True				
ANR	5087026	EqualityExpression	next != 0		5086990	0		!=			
ANR	5087027	Identifier	next		5086990	0					
ANR	5087028	PrimaryExpression	0		5086990	1					
ANR	5087029	ExpressionStatement	"next -> prev = prev , pfont -> next = 0"	763:8:26011:26045	5086990	1	True				
ANR	5087030	Expression	"next -> prev = prev , pfont -> next = 0"		5086990	0					
ANR	5087031	AssignmentExpression	next -> prev = prev		5086990	0		=			
ANR	5087032	PtrMemberAccess	next -> prev		5086990	0					
ANR	5087033	Identifier	next		5086990	0					
ANR	5087034	Identifier	prev		5086990	1					
ANR	5087035	Identifier	prev		5086990	1					
ANR	5087036	AssignmentExpression	pfont -> next = 0		5086990	1		=			
ANR	5087037	PtrMemberAccess	pfont -> next		5086990	0					
ANR	5087038	Identifier	pfont		5086990	0					
ANR	5087039	Identifier	next		5086990	1					
ANR	5087040	PrimaryExpression	0		5086990	1					
ANR	5087041	IfStatement	if ( prev != 0 )		5086990	5					
ANR	5087042	Condition	prev != 0	764:8:26055:26063	5086990	0	True				
ANR	5087043	EqualityExpression	prev != 0		5086990	0		!=			
ANR	5087044	Identifier	prev		5086990	0					
ANR	5087045	PrimaryExpression	0		5086990	1					
ANR	5087046	ExpressionStatement	"prev -> next = next , pfont -> prev = 0"	765:8:26074:26108	5086990	1	True				
ANR	5087047	Expression	"prev -> next = next , pfont -> prev = 0"		5086990	0					
ANR	5087048	AssignmentExpression	prev -> next = next		5086990	0		=			
ANR	5087049	PtrMemberAccess	prev -> next		5086990	0					
ANR	5087050	Identifier	prev		5086990	0					
ANR	5087051	Identifier	next		5086990	1					
ANR	5087052	Identifier	next		5086990	1					
ANR	5087053	AssignmentExpression	pfont -> prev = 0		5086990	1		=			
ANR	5087054	PtrMemberAccess	pfont -> prev		5086990	0					
ANR	5087055	Identifier	pfont		5086990	0					
ANR	5087056	Identifier	prev		5086990	1					
ANR	5087057	PrimaryExpression	0		5086990	1					
ANR	5087058	ElseStatement	else		5086990	0					
ANR	5087059	IfStatement	if ( pdir -> orig_fonts == pfont )		5086990	0					
ANR	5087060	Condition	pdir -> orig_fonts == pfont	766:13:26123:26147	5086990	0	True				
ANR	5087061	EqualityExpression	pdir -> orig_fonts == pfont		5086990	0		==			
ANR	5087062	PtrMemberAccess	pdir -> orig_fonts		5086990	0					
ANR	5087063	Identifier	pdir		5086990	0					
ANR	5087064	Identifier	orig_fonts		5086990	1					
ANR	5087065	Identifier	pfont		5086990	1					
ANR	5087066	ExpressionStatement	pdir -> orig_fonts = next	767:8:26158:26181	5086990	1	True				
ANR	5087067	AssignmentExpression	pdir -> orig_fonts = next		5086990	0		=			
ANR	5087068	PtrMemberAccess	pdir -> orig_fonts		5086990	0					
ANR	5087069	Identifier	pdir		5086990	0					
ANR	5087070	Identifier	orig_fonts		5086990	1					
ANR	5087071	Identifier	next		5086990	1					
ANR	5087072	ElseStatement	else		5086990	0					
ANR	5087073	IfStatement	if ( pdir -> scaled_fonts == pfont )		5086990	0					
ANR	5087074	Condition	pdir -> scaled_fonts == pfont	768:13:26196:26222	5086990	0	True				
ANR	5087075	EqualityExpression	pdir -> scaled_fonts == pfont		5086990	0		==			
ANR	5087076	PtrMemberAccess	pdir -> scaled_fonts		5086990	0					
ANR	5087077	Identifier	pdir		5086990	0					
ANR	5087078	Identifier	scaled_fonts		5086990	1					
ANR	5087079	Identifier	pfont		5086990	1					
ANR	5087080	ExpressionStatement	pdir -> scaled_fonts = next	769:8:26233:26258	5086990	1	True				
ANR	5087081	AssignmentExpression	pdir -> scaled_fonts = next		5086990	0		=			
ANR	5087082	PtrMemberAccess	pdir -> scaled_fonts		5086990	0					
ANR	5087083	Identifier	pdir		5086990	0					
ANR	5087084	Identifier	scaled_fonts		5086990	1					
ANR	5087085	Identifier	next		5086990	1					
ANR	5087086	ElseStatement	else		5086990	0					
ANR	5087087	CompoundStatement		17:9:477:477	5086990	0					
ANR	5087088	ExpressionStatement	"lprintf1 ( ""purged font 0x%lx not found\\n"" , ( ulong ) pfont )"	771:8:26305:26361	5086990	0	True				
ANR	5087089	CallExpression	"lprintf1 ( ""purged font 0x%lx not found\\n"" , ( ulong ) pfont )"		5086990	0					
ANR	5087090	Callee	lprintf1		5086990	0					
ANR	5087091	Identifier	lprintf1		5086990	0					
ANR	5087092	ArgumentList	"""purged font 0x%lx not found\\n"""		5086990	1					
ANR	5087093	Argument	"""purged font 0x%lx not found\\n"""		5086990	0					
ANR	5087094	PrimaryExpression	"""purged font 0x%lx not found\\n"""		5086990	0					
ANR	5087095	Argument	( ulong ) pfont		5086990	1					
ANR	5087096	CastExpression	( ulong ) pfont		5086990	0					
ANR	5087097	CastTarget	ulong		5086990	0					
ANR	5087098	Identifier	pfont		5086990	1					
ANR	5087099	ForStatement	for ( pf = pdir -> scaled_fonts ; pf != 0 ; )		5086990	6					
ANR	5087100	ForInit	pf = pdir -> scaled_fonts ;	775:9:26432:26455	5086990	0	True				
ANR	5087101	AssignmentExpression	pf = pdir -> scaled_fonts		5086990	0		=			
ANR	5087102	Identifier	pf		5086990	0					
ANR	5087103	PtrMemberAccess	pdir -> scaled_fonts		5086990	1					
ANR	5087104	Identifier	pdir		5086990	0					
ANR	5087105	Identifier	scaled_fonts		5086990	1					
ANR	5087106	Condition	pf != 0	775:34:26457:26463	5086990	1	True				
ANR	5087107	EqualityExpression	pf != 0		5086990	0		!=			
ANR	5087108	Identifier	pf		5086990	0					
ANR	5087109	PrimaryExpression	0		5086990	1					
ANR	5087110	CompoundStatement		22:44:675:675	5086990	2					
ANR	5087111	IfStatement	if ( pf -> base == pfont )		5086990	0					
ANR	5087112	Condition	pf -> base == pfont	776:12:26481:26497	5086990	0	True				
ANR	5087113	EqualityExpression	pf -> base == pfont		5086990	0		==			
ANR	5087114	PtrMemberAccess	pf -> base		5086990	0					
ANR	5087115	Identifier	pf		5086990	0					
ANR	5087116	Identifier	base		5086990	1					
ANR	5087117	Identifier	pfont		5086990	1					
ANR	5087118	CompoundStatement		24:12:722:750	5086990	1					
ANR	5087119	IdentifierDeclStatement	int code = gs_purge_font ( pf ) ;	777:12:26514:26542	5086990	0	True				
ANR	5087120	IdentifierDecl	code = gs_purge_font ( pf )		5086990	0					
ANR	5087121	IdentifierDeclType	int		5086990	0					
ANR	5087122	Identifier	code		5086990	1					
ANR	5087123	AssignmentExpression	code = gs_purge_font ( pf )		5086990	2		=			
ANR	5087124	Identifier	code		5086990	0					
ANR	5087125	CallExpression	gs_purge_font ( pf )		5086990	1					
ANR	5087126	Callee	gs_purge_font		5086990	0					
ANR	5087127	Identifier	gs_purge_font		5086990	0					
ANR	5087128	ArgumentList	pf		5086990	1					
ANR	5087129	Argument	pf		5086990	0					
ANR	5087130	Identifier	pf		5086990	0					
ANR	5087131	IfStatement	if ( code < 0 )		5086990	1					
ANR	5087132	Condition	code < 0	779:16:26561:26568	5086990	0	True				
ANR	5087133	RelationalExpression	code < 0		5086990	0		<			
ANR	5087134	Identifier	code		5086990	0					
ANR	5087135	PrimaryExpression	0		5086990	1					
ANR	5087136	ReturnStatement	return code ;	780:16:26587:26598	5086990	1	True				
ANR	5087137	Identifier	code		5086990	0					
ANR	5087138	ExpressionStatement	pf = pdir -> scaled_fonts	781:12:26612:26635	5086990	2	True				
ANR	5087139	AssignmentExpression	pf = pdir -> scaled_fonts		5086990	0		=			
ANR	5087140	Identifier	pf		5086990	0					
ANR	5087141	PtrMemberAccess	pdir -> scaled_fonts		5086990	1					
ANR	5087142	Identifier	pdir		5086990	0					
ANR	5087143	Identifier	scaled_fonts		5086990	1					
ANR	5087144	ElseStatement	else		5086990	0					
ANR	5087145	ExpressionStatement	pf = pf -> next	783:12:26681:26694	5086990	0	True				
ANR	5087146	AssignmentExpression	pf = pf -> next		5086990	0		=			
ANR	5087147	Identifier	pf		5086990	0					
ANR	5087148	PtrMemberAccess	pf -> next		5086990	1					
ANR	5087149	Identifier	pf		5086990	0					
ANR	5087150	Identifier	next		5086990	1					
ANR	5087151	ReturnStatement	return gs_purge_font_from_char_caches ( pfont ) ;	788:4:26832:26876	5086990	7	True				
ANR	5087152	CallExpression	gs_purge_font_from_char_caches ( pfont )		5086990	0					
ANR	5087153	Callee	gs_purge_font_from_char_caches		5086990	0					
ANR	5087154	Identifier	gs_purge_font_from_char_caches		5086990	0					
ANR	5087155	ArgumentList	pfont		5086990	1					
ANR	5087156	Argument	pfont		5086990	0					
ANR	5087157	Identifier	pfont		5086990	0					
ANR	5087158	ReturnType	int		5086990	1					
ANR	5087159	Identifier	gs_purge_font		5086990	2					
ANR	5087160	ParameterList	gs_font * pfont		5086990	3					
ANR	5087161	Parameter	gs_font * pfont	753:14:25774:25788	5086990	0	True				
ANR	5087162	ParameterType	gs_font *		5086990	0					
ANR	5087163	Identifier	pfont		5086990	1					
ANR	5087164	CFGEntryNode	ENTRY		5086990		True				
ANR	5087165	CFGExitNode	EXIT		5086990		True				
ANR	5087166	Symbol	next		5086990						
ANR	5087167	Symbol	prev -> next		5086990						
ANR	5087168	Symbol	gs_purge_font		5086990						
ANR	5087169	Symbol	pdir -> orig_fonts		5086990						
ANR	5087170	Symbol	code		5086990						
ANR	5087171	Symbol	pfont		5086990						
ANR	5087172	Symbol	prev		5086990						
ANR	5087173	Symbol	pdir		5086990						
ANR	5087174	Symbol	* prev		5086990						
ANR	5087175	Symbol	* next		5086990						
ANR	5087176	Symbol	pdir -> scaled_fonts		5086990						
ANR	5087177	Symbol	* pdir		5086990						
ANR	5087178	Symbol	* pfont		5086990						
ANR	5087179	Symbol	pfont -> dir		5086990						
ANR	5087180	Symbol	next -> prev		5086990						
ANR	5087181	Symbol	pf		5086990						
ANR	5087182	Symbol	pfont -> prev		5086990						
ANR	5087183	Symbol	pfont -> next		5086990						
ANR	5087184	Symbol	pf -> base		5086990						
ANR	5087185	Symbol	gs_purge_font_from_char_caches		5086990						
ANR	5087186	Symbol	pf -> next		5086990						
ANR	5087187	Symbol	* pf		5086990						
ANR	5087188	Function	gs_find_font_by_id	792:0:26914:27222							
ANR	5087189	FunctionDef	"gs_find_font_by_id (gs_font_dir * pdir , gs_id id , gs_matrix * FontMatrix)"		5087188	0					
ANR	5087190	CompoundStatement		794:1:26996:27222	5087188	0					
ANR	5087191	IdentifierDeclStatement	gs_font * pfont = pdir -> orig_fonts ;	795:4:27002:27035	5087188	0	True				
ANR	5087192	IdentifierDecl	* pfont = pdir -> orig_fonts		5087188	0					
ANR	5087193	IdentifierDeclType	gs_font *		5087188	0					
ANR	5087194	Identifier	pfont		5087188	1					
ANR	5087195	AssignmentExpression	* pfont = pdir -> orig_fonts		5087188	2		=			
ANR	5087196	Identifier	pfont		5087188	0					
ANR	5087197	PtrMemberAccess	pdir -> orig_fonts		5087188	1					
ANR	5087198	Identifier	pdir		5087188	0					
ANR	5087199	Identifier	orig_fonts		5087188	1					
ANR	5087200	ForStatement	for ( ; pfont != NULL ; pfont = pfont -> next )		5087188	1					
ANR	5087201	Condition	pfont != NULL	797:10:27048:27060	5087188	0	True				
ANR	5087202	EqualityExpression	pfont != NULL		5087188	0		!=			
ANR	5087203	Identifier	pfont		5087188	0					
ANR	5087204	Identifier	NULL		5087188	1					
ANR	5087205	AssignmentExpression	pfont = pfont -> next	797:25:27063:27081	5087188	1	True	=			
ANR	5087206	Identifier	pfont		5087188	0					
ANR	5087207	PtrMemberAccess	pfont -> next		5087188	1					
ANR	5087208	Identifier	pfont		5087188	0					
ANR	5087209	Identifier	next		5087188	1					
ANR	5087210	IfStatement	"if ( pfont -> id == id && ! gs_matrix_compare ( & pfont -> FontMatrix , FontMatrix ) )"		5087188	2					
ANR	5087211	Condition	"pfont -> id == id && ! gs_matrix_compare ( & pfont -> FontMatrix , FontMatrix )"	798:11:27095:27175	5087188	0	True				
ANR	5087212	AndExpression	"pfont -> id == id && ! gs_matrix_compare ( & pfont -> FontMatrix , FontMatrix )"		5087188	0		&&			
ANR	5087213	EqualityExpression	pfont -> id == id		5087188	0		==			
ANR	5087214	PtrMemberAccess	pfont -> id		5087188	0					
ANR	5087215	Identifier	pfont		5087188	0					
ANR	5087216	Identifier	id		5087188	1					
ANR	5087217	Identifier	id		5087188	1					
ANR	5087218	UnaryOperationExpression	"! gs_matrix_compare ( & pfont -> FontMatrix , FontMatrix )"		5087188	1					
ANR	5087219	UnaryOperator	!		5087188	0					
ANR	5087220	CallExpression	"gs_matrix_compare ( & pfont -> FontMatrix , FontMatrix )"		5087188	1					
ANR	5087221	Callee	gs_matrix_compare		5087188	0					
ANR	5087222	Identifier	gs_matrix_compare		5087188	0					
ANR	5087223	ArgumentList	& pfont -> FontMatrix		5087188	1					
ANR	5087224	Argument	& pfont -> FontMatrix		5087188	0					
ANR	5087225	UnaryOperationExpression	& pfont -> FontMatrix		5087188	0					
ANR	5087226	UnaryOperator	&		5087188	0					
ANR	5087227	PtrMemberAccess	pfont -> FontMatrix		5087188	1					
ANR	5087228	Identifier	pfont		5087188	0					
ANR	5087229	Identifier	FontMatrix		5087188	1					
ANR	5087230	Argument	FontMatrix		5087188	1					
ANR	5087231	Identifier	FontMatrix		5087188	0					
ANR	5087232	ReturnStatement	return pfont ;	800:12:27190:27202	5087188	1	True				
ANR	5087233	Identifier	pfont		5087188	0					
ANR	5087234	ReturnStatement	return NULL ;	801:4:27208:27219	5087188	2	True				
ANR	5087235	Identifier	NULL		5087188	0					
ANR	5087236	ReturnType	gs_font *		5087188	1					
ANR	5087237	Identifier	gs_find_font_by_id		5087188	2					
ANR	5087238	ParameterList	"gs_font_dir * pdir , gs_id id , gs_matrix * FontMatrix"		5087188	3					
ANR	5087239	Parameter	gs_font_dir * pdir	793:19:26943:26959	5087188	0	True				
ANR	5087240	ParameterType	gs_font_dir *		5087188	0					
ANR	5087241	Identifier	pdir		5087188	1					
ANR	5087242	Parameter	gs_id id	793:38:26962:26969	5087188	1	True				
ANR	5087243	ParameterType	gs_id		5087188	0					
ANR	5087244	Identifier	id		5087188	1					
ANR	5087245	Parameter	gs_matrix * FontMatrix	793:48:26972:26992	5087188	2	True				
ANR	5087246	ParameterType	gs_matrix *		5087188	0					
ANR	5087247	Identifier	FontMatrix		5087188	1					
ANR	5087248	CFGEntryNode	ENTRY		5087188		True				
ANR	5087249	CFGExitNode	EXIT		5087188		True				
ANR	5087250	Symbol	* pdir		5087188						
ANR	5087251	Symbol	* pfont		5087188						
ANR	5087252	Symbol	pdir -> orig_fonts		5087188						
ANR	5087253	Symbol	NULL		5087188						
ANR	5087254	Symbol	& pfont -> FontMatrix		5087188						
ANR	5087255	Symbol	pfont		5087188						
ANR	5087256	Symbol	FontMatrix		5087188						
ANR	5087257	Symbol	pfont -> next		5087188						
ANR	5087258	Symbol	pdir		5087188						
ANR	5087259	Symbol	pfont -> id		5087188						
ANR	5087260	Symbol	gs_matrix_compare		5087188						
ANR	5087261	Symbol	id		5087188						
ANR	5087262	Function	gs_no_define_font	809:0:27377:27452							
ANR	5087263	FunctionDef	"gs_no_define_font (gs_font_dir * pdir , gs_font * pfont)"		5087262	0					
ANR	5087264	CompoundStatement		811:0:27436:27452	5087262	0					
ANR	5087265	ReturnStatement	return 0 ;	812:4:27442:27450	5087262	0	True				
ANR	5087266	PrimaryExpression	0		5087262	0					
ANR	5087267	ReturnType	int		5087262	1					
ANR	5087268	Identifier	gs_no_define_font		5087262	2					
ANR	5087269	ParameterList	"gs_font_dir * pdir , gs_font * pfont"		5087262	3					
ANR	5087270	Parameter	gs_font_dir * pdir	810:18:27399:27416	5087262	0	True				
ANR	5087271	ParameterType	gs_font_dir *		5087262	0					
ANR	5087272	Identifier	pdir		5087262	1					
ANR	5087273	Parameter	gs_font * pfont	810:38:27419:27433	5087262	1	True				
ANR	5087274	ParameterType	gs_font *		5087262	0					
ANR	5087275	Identifier	pfont		5087262	1					
ANR	5087276	CFGEntryNode	ENTRY		5087262		True				
ANR	5087277	CFGExitNode	EXIT		5087262		True				
ANR	5087278	Symbol	pfont		5087262						
ANR	5087279	Symbol	pdir		5087262						
ANR	5087280	Function	gs_no_make_font	816:0:27497:27635							
ANR	5087281	FunctionDef	"gs_no_make_font (gs_font_dir * pdir , const gs_font * pfont , const gs_matrix * pmat , gs_font * * ppfont)"		5087280	0					
ANR	5087282	CompoundStatement		819:0:27619:27635	5087280	0					
ANR	5087283	ReturnStatement	return 0 ;	820:4:27625:27633	5087280	0	True				
ANR	5087284	PrimaryExpression	0		5087280	0					
ANR	5087285	ReturnType	int		5087280	1					
ANR	5087286	Identifier	gs_no_make_font		5087280	2					
ANR	5087287	ParameterList	"gs_font_dir * pdir , const gs_font * pfont , const gs_matrix * pmat , gs_font * * ppfont"		5087280	3					
ANR	5087288	Parameter	gs_font_dir * pdir	817:16:27517:27534	5087280	0	True				
ANR	5087289	ParameterType	gs_font_dir *		5087280	0					
ANR	5087290	Identifier	pdir		5087280	1					
ANR	5087291	Parameter	const gs_font * pfont	817:36:27537:27557	5087280	1	True				
ANR	5087292	ParameterType	const gs_font *		5087280	0					
ANR	5087293	Identifier	pfont		5087280	1					
ANR	5087294	Parameter	const gs_matrix * pmat	818:16:27576:27597	5087280	2	True				
ANR	5087295	ParameterType	const gs_matrix *		5087280	0					
ANR	5087296	Identifier	pmat		5087280	1					
ANR	5087297	Parameter	gs_font * * ppfont	818:40:27600:27616	5087280	3	True				
ANR	5087298	ParameterType	gs_font * *		5087280	0					
ANR	5087299	Identifier	ppfont		5087280	1					
ANR	5087300	CFGEntryNode	ENTRY		5087280		True				
ANR	5087301	CFGExitNode	EXIT		5087280		True				
ANR	5087302	Symbol	pmat		5087280						
ANR	5087303	Symbol	pfont		5087280						
ANR	5087304	Symbol	ppfont		5087280						
ANR	5087305	Symbol	pdir		5087280						
ANR	5087306	Function	gs_base_make_font	823:0:27702:27950							
ANR	5087307	FunctionDef	"gs_base_make_font (gs_font_dir * pdir , const gs_font * pfont , const gs_matrix * pmat , gs_font * * ppfont)"		5087306	0					
ANR	5087308	CompoundStatement		826:0:27828:27950	5087306	0					
ANR	5087309	ReturnStatement	"return uid_copy ( & ( ( gs_font_base * ) * ppfont ) -> UID , ( * ppfont ) -> memory , ""gs_base_make_font(XUID)"" ) ;"	827:4:27834:27948	5087306	0	True				
ANR	5087310	CallExpression	"uid_copy ( & ( ( gs_font_base * ) * ppfont ) -> UID , ( * ppfont ) -> memory , ""gs_base_make_font(XUID)"" )"		5087306	0					
ANR	5087311	Callee	uid_copy		5087306	0					
ANR	5087312	Identifier	uid_copy		5087306	0					
ANR	5087313	ArgumentList	& ( ( gs_font_base * ) * ppfont ) -> UID		5087306	1					
ANR	5087314	Argument	& ( ( gs_font_base * ) * ppfont ) -> UID		5087306	0					
ANR	5087315	UnaryOperationExpression	& ( ( gs_font_base * ) * ppfont ) -> UID		5087306	0					
ANR	5087316	UnaryOperator	&		5087306	0					
ANR	5087317	PtrMemberAccess	( ( gs_font_base * ) * ppfont ) -> UID		5087306	1					
ANR	5087318	CastExpression	( gs_font_base * ) * ppfont		5087306	0					
ANR	5087319	CastTarget	gs_font_base *		5087306	0					
ANR	5087320	UnaryOperationExpression	* ppfont		5087306	1					
ANR	5087321	UnaryOperator	*		5087306	0					
ANR	5087322	Identifier	ppfont		5087306	1					
ANR	5087323	Identifier	UID		5087306	1					
ANR	5087324	Argument	( * ppfont ) -> memory		5087306	1					
ANR	5087325	PtrMemberAccess	( * ppfont ) -> memory		5087306	0					
ANR	5087326	UnaryOperationExpression	* ppfont		5087306	0					
ANR	5087327	UnaryOperator	*		5087306	0					
ANR	5087328	Identifier	ppfont		5087306	1					
ANR	5087329	Identifier	memory		5087306	1					
ANR	5087330	Argument	"""gs_base_make_font(XUID)"""		5087306	2					
ANR	5087331	PrimaryExpression	"""gs_base_make_font(XUID)"""		5087306	0					
ANR	5087332	ReturnType	int		5087306	1					
ANR	5087333	Identifier	gs_base_make_font		5087306	2					
ANR	5087334	ParameterList	"gs_font_dir * pdir , const gs_font * pfont , const gs_matrix * pmat , gs_font * * ppfont"		5087306	3					
ANR	5087335	Parameter	gs_font_dir * pdir	824:18:27724:27741	5087306	0	True				
ANR	5087336	ParameterType	gs_font_dir *		5087306	0					
ANR	5087337	Identifier	pdir		5087306	1					
ANR	5087338	Parameter	const gs_font * pfont	824:38:27744:27764	5087306	1	True				
ANR	5087339	ParameterType	const gs_font *		5087306	0					
ANR	5087340	Identifier	pfont		5087306	1					
ANR	5087341	Parameter	const gs_matrix * pmat	825:18:27785:27806	5087306	2	True				
ANR	5087342	ParameterType	const gs_matrix *		5087306	0					
ANR	5087343	Identifier	pmat		5087306	1					
ANR	5087344	Parameter	gs_font * * ppfont	825:42:27809:27825	5087306	3	True				
ANR	5087345	ParameterType	gs_font * *		5087306	0					
ANR	5087346	Identifier	ppfont		5087306	1					
ANR	5087347	CFGEntryNode	ENTRY		5087306		True				
ANR	5087348	CFGExitNode	EXIT		5087306		True				
ANR	5087349	Symbol	uid_copy		5087306						
ANR	5087350	Symbol	pmat		5087306						
ANR	5087351	Symbol	* ppfont		5087306						
ANR	5087352	Symbol	pfont		5087306						
ANR	5087353	Symbol	ppfont		5087306						
ANR	5087354	Symbol	& ( ( gs_font_base * ) * ppfont ) -> UID		5087306						
ANR	5087355	Symbol	* * ppfont		5087306						
ANR	5087356	Symbol	pdir		5087306						
ANR	5087357	Symbol	( * ppfont ) -> memory		5087306						
ANR	5087358	Function	gs_default_font_info	832:0:27987:31946							
ANR	5087359	FunctionDef	"gs_default_font_info (gs_font * font , const gs_point * pscale , int members , gs_font_info_t * info)"		5087358	0					
ANR	5087360	CompoundStatement		835:0:28107:31946	5087358	0					
ANR	5087361	IdentifierDeclStatement	int wmode = font -> WMode ;	836:4:28113:28136	5087358	0	True				
ANR	5087362	IdentifierDecl	wmode = font -> WMode		5087358	0					
ANR	5087363	IdentifierDeclType	int		5087358	0					
ANR	5087364	Identifier	wmode		5087358	1					
ANR	5087365	AssignmentExpression	wmode = font -> WMode		5087358	2		=			
ANR	5087366	Identifier	wmode		5087358	0					
ANR	5087367	PtrMemberAccess	font -> WMode		5087358	1					
ANR	5087368	Identifier	font		5087358	0					
ANR	5087369	Identifier	WMode		5087358	1					
ANR	5087370	IdentifierDeclStatement	gs_font_base * bfont = ( gs_font_base * ) font ;	837:4:28142:28184	5087358	1	True				
ANR	5087371	IdentifierDecl	* bfont = ( gs_font_base * ) font		5087358	0					
ANR	5087372	IdentifierDeclType	gs_font_base *		5087358	0					
ANR	5087373	Identifier	bfont		5087358	1					
ANR	5087374	AssignmentExpression	* bfont = ( gs_font_base * ) font		5087358	2		=			
ANR	5087375	Identifier	bfont		5087358	0					
ANR	5087376	CastExpression	( gs_font_base * ) font		5087358	1					
ANR	5087377	CastTarget	gs_font_base *		5087358	0					
ANR	5087378	Identifier	font		5087358	1					
ANR	5087379	IdentifierDeclStatement	gs_point scale ;	838:4:28190:28204	5087358	2	True				
ANR	5087380	IdentifierDecl	scale		5087358	0					
ANR	5087381	IdentifierDeclType	gs_point		5087358	0					
ANR	5087382	Identifier	scale		5087358	1					
ANR	5087383	IdentifierDeclStatement	gs_matrix smat ;	839:4:28210:28224	5087358	3	True				
ANR	5087384	IdentifierDecl	smat		5087358	0					
ANR	5087385	IdentifierDeclType	gs_matrix		5087358	0					
ANR	5087386	Identifier	smat		5087358	1					
ANR	5087387	IdentifierDeclStatement	const gs_matrix * pmat ;	840:4:28230:28251	5087358	4	True				
ANR	5087388	IdentifierDecl	* pmat		5087358	0					
ANR	5087389	IdentifierDeclType	const gs_matrix *		5087358	0					
ANR	5087390	Identifier	pmat		5087358	1					
ANR	5087391	IfStatement	if ( pscale == 0 )		5087358	5					
ANR	5087392	Condition	pscale == 0	842:8:28262:28272	5087358	0	True				
ANR	5087393	EqualityExpression	pscale == 0		5087358	0		==			
ANR	5087394	Identifier	pscale		5087358	0					
ANR	5087395	PrimaryExpression	0		5087358	1					
ANR	5087396	CompoundStatement		8:21:167:167	5087358	1					
ANR	5087397	ExpressionStatement	scale . x = scale . y = 0	843:8:28285:28306	5087358	0	True				
ANR	5087398	AssignmentExpression	scale . x = scale . y = 0		5087358	0		=			
ANR	5087399	MemberAccess	scale . x		5087358	0					
ANR	5087400	Identifier	scale		5087358	0					
ANR	5087401	Identifier	x		5087358	1					
ANR	5087402	AssignmentExpression	scale . y = 0		5087358	1		=			
ANR	5087403	MemberAccess	scale . y		5087358	0					
ANR	5087404	Identifier	scale		5087358	0					
ANR	5087405	Identifier	y		5087358	1					
ANR	5087406	PrimaryExpression	0		5087358	1					
ANR	5087407	ExpressionStatement	pmat = 0	844:8:28316:28324	5087358	1	True				
ANR	5087408	AssignmentExpression	pmat = 0		5087358	0		=			
ANR	5087409	Identifier	pmat		5087358	0					
ANR	5087410	PrimaryExpression	0		5087358	1					
ANR	5087411	ElseStatement	else		5087358	0					
ANR	5087412	CompoundStatement		11:11:229:229	5087358	0					
ANR	5087413	ExpressionStatement	scale = * pscale	846:8:28347:28362	5087358	0	True				
ANR	5087414	AssignmentExpression	scale = * pscale		5087358	0		=			
ANR	5087415	Identifier	scale		5087358	0					
ANR	5087416	UnaryOperationExpression	* pscale		5087358	1					
ANR	5087417	UnaryOperator	*		5087358	0					
ANR	5087418	Identifier	pscale		5087358	1					
ANR	5087419	ExpressionStatement	"gs_make_scaling ( scale . x , scale . y , & smat )"	847:8:28372:28412	5087358	1	True				
ANR	5087420	CallExpression	"gs_make_scaling ( scale . x , scale . y , & smat )"		5087358	0					
ANR	5087421	Callee	gs_make_scaling		5087358	0					
ANR	5087422	Identifier	gs_make_scaling		5087358	0					
ANR	5087423	ArgumentList	scale . x		5087358	1					
ANR	5087424	Argument	scale . x		5087358	0					
ANR	5087425	MemberAccess	scale . x		5087358	0					
ANR	5087426	Identifier	scale		5087358	0					
ANR	5087427	Identifier	x		5087358	1					
ANR	5087428	Argument	scale . y		5087358	1					
ANR	5087429	MemberAccess	scale . y		5087358	0					
ANR	5087430	Identifier	scale		5087358	0					
ANR	5087431	Identifier	y		5087358	1					
ANR	5087432	Argument	& smat		5087358	2					
ANR	5087433	UnaryOperationExpression	& smat		5087358	0					
ANR	5087434	UnaryOperator	&		5087358	0					
ANR	5087435	Identifier	smat		5087358	1					
ANR	5087436	ExpressionStatement	pmat = & smat	848:8:28422:28434	5087358	2	True				
ANR	5087437	AssignmentExpression	pmat = & smat		5087358	0		=			
ANR	5087438	Identifier	pmat		5087358	0					
ANR	5087439	UnaryOperationExpression	& smat		5087358	1					
ANR	5087440	UnaryOperator	&		5087358	0					
ANR	5087441	Identifier	smat		5087358	1					
ANR	5087442	ExpressionStatement	info -> members = 0	850:4:28446:28463	5087358	6	True				
ANR	5087443	AssignmentExpression	info -> members = 0		5087358	0		=			
ANR	5087444	PtrMemberAccess	info -> members		5087358	0					
ANR	5087445	Identifier	info		5087358	0					
ANR	5087446	Identifier	members		5087358	1					
ANR	5087447	PrimaryExpression	0		5087358	1					
ANR	5087448	IfStatement	if ( members & FONT_INFO_FLAGS )		5087358	7					
ANR	5087449	Condition	members & FONT_INFO_FLAGS	851:8:28473:28497	5087358	0	True				
ANR	5087450	BitAndExpression	members & FONT_INFO_FLAGS		5087358	0		&			
ANR	5087451	Identifier	members		5087358	0					
ANR	5087452	Identifier	FONT_INFO_FLAGS		5087358	1					
ANR	5087453	ExpressionStatement	info -> Flags_returned = 0	852:8:28508:28532	5087358	1	True				
ANR	5087454	AssignmentExpression	info -> Flags_returned = 0		5087358	0		=			
ANR	5087455	PtrMemberAccess	info -> Flags_returned		5087358	0					
ANR	5087456	Identifier	info		5087358	0					
ANR	5087457	Identifier	Flags_returned		5087358	1					
ANR	5087458	PrimaryExpression	0		5087358	1					
ANR	5087459	IfStatement	if ( font -> FontType == ft_composite )		5087358	8					
ANR	5087460	Condition	font -> FontType == ft_composite	853:8:28542:28571	5087358	0	True				
ANR	5087461	EqualityExpression	font -> FontType == ft_composite		5087358	0		==			
ANR	5087462	PtrMemberAccess	font -> FontType		5087358	0					
ANR	5087463	Identifier	font		5087358	0					
ANR	5087464	Identifier	FontType		5087358	1					
ANR	5087465	Identifier	ft_composite		5087358	1					
ANR	5087466	ReturnStatement	return 0 ;	854:8:28582:28590	5087358	1	True				
ANR	5087467	PrimaryExpression	0		5087358	0					
ANR	5087468	IfStatement	if ( members & FONT_INFO_BBOX )		5087358	9					
ANR	5087469	Condition	members & FONT_INFO_BBOX	855:8:28625:28648	5087358	0	True				
ANR	5087470	BitAndExpression	members & FONT_INFO_BBOX		5087358	0		&			
ANR	5087471	Identifier	members		5087358	0					
ANR	5087472	Identifier	FONT_INFO_BBOX		5087358	1					
ANR	5087473	CompoundStatement		21:34:543:543	5087358	1					
ANR	5087474	ExpressionStatement	info -> BBox . p . x = ( int ) bfont -> FontBBox . p . x	856:8:28661:28702	5087358	0	True				
ANR	5087475	AssignmentExpression	info -> BBox . p . x = ( int ) bfont -> FontBBox . p . x		5087358	0		=			
ANR	5087476	MemberAccess	info -> BBox . p . x		5087358	0					
ANR	5087477	MemberAccess	info -> BBox . p		5087358	0					
ANR	5087478	PtrMemberAccess	info -> BBox		5087358	0					
ANR	5087479	Identifier	info		5087358	0					
ANR	5087480	Identifier	BBox		5087358	1					
ANR	5087481	Identifier	p		5087358	1					
ANR	5087482	Identifier	x		5087358	1					
ANR	5087483	CastExpression	( int ) bfont -> FontBBox . p . x		5087358	1					
ANR	5087484	CastTarget	int		5087358	0					
ANR	5087485	MemberAccess	bfont -> FontBBox . p . x		5087358	1					
ANR	5087486	MemberAccess	bfont -> FontBBox . p		5087358	0					
ANR	5087487	PtrMemberAccess	bfont -> FontBBox		5087358	0					
ANR	5087488	Identifier	bfont		5087358	0					
ANR	5087489	Identifier	FontBBox		5087358	1					
ANR	5087490	Identifier	p		5087358	1					
ANR	5087491	Identifier	x		5087358	1					
ANR	5087492	ExpressionStatement	info -> BBox . p . y = ( int ) bfont -> FontBBox . p . y	857:8:28712:28753	5087358	1	True				
ANR	5087493	AssignmentExpression	info -> BBox . p . y = ( int ) bfont -> FontBBox . p . y		5087358	0		=			
ANR	5087494	MemberAccess	info -> BBox . p . y		5087358	0					
ANR	5087495	MemberAccess	info -> BBox . p		5087358	0					
ANR	5087496	PtrMemberAccess	info -> BBox		5087358	0					
ANR	5087497	Identifier	info		5087358	0					
ANR	5087498	Identifier	BBox		5087358	1					
ANR	5087499	Identifier	p		5087358	1					
ANR	5087500	Identifier	y		5087358	1					
ANR	5087501	CastExpression	( int ) bfont -> FontBBox . p . y		5087358	1					
ANR	5087502	CastTarget	int		5087358	0					
ANR	5087503	MemberAccess	bfont -> FontBBox . p . y		5087358	1					
ANR	5087504	MemberAccess	bfont -> FontBBox . p		5087358	0					
ANR	5087505	PtrMemberAccess	bfont -> FontBBox		5087358	0					
ANR	5087506	Identifier	bfont		5087358	0					
ANR	5087507	Identifier	FontBBox		5087358	1					
ANR	5087508	Identifier	p		5087358	1					
ANR	5087509	Identifier	y		5087358	1					
ANR	5087510	ExpressionStatement	info -> BBox . q . x = ( int ) bfont -> FontBBox . q . x	858:8:28763:28804	5087358	2	True				
ANR	5087511	AssignmentExpression	info -> BBox . q . x = ( int ) bfont -> FontBBox . q . x		5087358	0		=			
ANR	5087512	MemberAccess	info -> BBox . q . x		5087358	0					
ANR	5087513	MemberAccess	info -> BBox . q		5087358	0					
ANR	5087514	PtrMemberAccess	info -> BBox		5087358	0					
ANR	5087515	Identifier	info		5087358	0					
ANR	5087516	Identifier	BBox		5087358	1					
ANR	5087517	Identifier	q		5087358	1					
ANR	5087518	Identifier	x		5087358	1					
ANR	5087519	CastExpression	( int ) bfont -> FontBBox . q . x		5087358	1					
ANR	5087520	CastTarget	int		5087358	0					
ANR	5087521	MemberAccess	bfont -> FontBBox . q . x		5087358	1					
ANR	5087522	MemberAccess	bfont -> FontBBox . q		5087358	0					
ANR	5087523	PtrMemberAccess	bfont -> FontBBox		5087358	0					
ANR	5087524	Identifier	bfont		5087358	0					
ANR	5087525	Identifier	FontBBox		5087358	1					
ANR	5087526	Identifier	q		5087358	1					
ANR	5087527	Identifier	x		5087358	1					
ANR	5087528	ExpressionStatement	info -> BBox . q . y = ( int ) bfont -> FontBBox . q . y	859:8:28814:28855	5087358	3	True				
ANR	5087529	AssignmentExpression	info -> BBox . q . y = ( int ) bfont -> FontBBox . q . y		5087358	0		=			
ANR	5087530	MemberAccess	info -> BBox . q . y		5087358	0					
ANR	5087531	MemberAccess	info -> BBox . q		5087358	0					
ANR	5087532	PtrMemberAccess	info -> BBox		5087358	0					
ANR	5087533	Identifier	info		5087358	0					
ANR	5087534	Identifier	BBox		5087358	1					
ANR	5087535	Identifier	q		5087358	1					
ANR	5087536	Identifier	y		5087358	1					
ANR	5087537	CastExpression	( int ) bfont -> FontBBox . q . y		5087358	1					
ANR	5087538	CastTarget	int		5087358	0					
ANR	5087539	MemberAccess	bfont -> FontBBox . q . y		5087358	1					
ANR	5087540	MemberAccess	bfont -> FontBBox . q		5087358	0					
ANR	5087541	PtrMemberAccess	bfont -> FontBBox		5087358	0					
ANR	5087542	Identifier	bfont		5087358	0					
ANR	5087543	Identifier	FontBBox		5087358	1					
ANR	5087544	Identifier	q		5087358	1					
ANR	5087545	Identifier	y		5087358	1					
ANR	5087546	ExpressionStatement	info -> Flags_returned |= FONT_INFO_BBOX	860:8:28865:28903	5087358	4	True				
ANR	5087547	AssignmentExpression	info -> Flags_returned |= FONT_INFO_BBOX		5087358	0		|=			
ANR	5087548	PtrMemberAccess	info -> Flags_returned		5087358	0					
ANR	5087549	Identifier	info		5087358	0					
ANR	5087550	Identifier	Flags_returned		5087358	1					
ANR	5087551	Identifier	FONT_INFO_BBOX		5087358	1					
ANR	5087552	IfStatement	if ( ( members & FONT_INFO_FLAGS ) && ( info -> Flags_requested & FONT_IS_FIXED_WIDTH ) )		5087358	10					
ANR	5087553	Condition	( members & FONT_INFO_FLAGS ) && ( info -> Flags_requested & FONT_IS_FIXED_WIDTH )	862:8:28919:29002	5087358	0	True				
ANR	5087554	AndExpression	( members & FONT_INFO_FLAGS ) && ( info -> Flags_requested & FONT_IS_FIXED_WIDTH )		5087358	0		&&			
ANR	5087555	BitAndExpression	members & FONT_INFO_FLAGS		5087358	0		&			
ANR	5087556	Identifier	members		5087358	0					
ANR	5087557	Identifier	FONT_INFO_FLAGS		5087358	1					
ANR	5087558	BitAndExpression	info -> Flags_requested & FONT_IS_FIXED_WIDTH		5087358	1		&			
ANR	5087559	PtrMemberAccess	info -> Flags_requested		5087358	0					
ANR	5087560	Identifier	info		5087358	0					
ANR	5087561	Identifier	Flags_requested		5087358	1					
ANR	5087562	Identifier	FONT_IS_FIXED_WIDTH		5087358	1					
ANR	5087563	CompoundStatement		40:8:1184:1207	5087358	1					
ANR	5087564	IdentifierDeclStatement	gs_glyph notdef = GS_NO_GLYPH ;	868:8:29114:29143	5087358	0	True				
ANR	5087565	IdentifierDecl	notdef = GS_NO_GLYPH		5087358	0					
ANR	5087566	IdentifierDeclType	gs_glyph		5087358	0					
ANR	5087567	Identifier	notdef		5087358	1					
ANR	5087568	AssignmentExpression	notdef = GS_NO_GLYPH		5087358	2		=			
ANR	5087569	Identifier	GS_NO_GLYPH		5087358	0					
ANR	5087570	Identifier	GS_NO_GLYPH		5087358	1					
ANR	5087571	IdentifierDeclStatement	gs_glyph glyph ;	869:8:29153:29167	5087358	1	True				
ANR	5087572	IdentifierDecl	glyph		5087358	0					
ANR	5087573	IdentifierDeclType	gs_glyph		5087358	0					
ANR	5087574	Identifier	glyph		5087358	1					
ANR	5087575	IdentifierDeclStatement	int fixed_width = 0 ;	870:8:29177:29196	5087358	2	True				
ANR	5087576	IdentifierDecl	fixed_width = 0		5087358	0					
ANR	5087577	IdentifierDeclType	int		5087358	0					
ANR	5087578	Identifier	fixed_width		5087358	1					
ANR	5087579	AssignmentExpression	fixed_width = 0		5087358	2		=			
ANR	5087580	Identifier	fixed_width		5087358	0					
ANR	5087581	PrimaryExpression	0		5087358	1					
ANR	5087582	IdentifierDeclStatement	int index ;	871:8:29206:29215	5087358	3	True				
ANR	5087583	IdentifierDecl	index		5087358	0					
ANR	5087584	IdentifierDeclType	int		5087358	0					
ANR	5087585	Identifier	index		5087358	1					
ANR	5087586	IdentifierDeclStatement	int code = 0 ;	872:8:29225:29237	5087358	4	True				
ANR	5087587	IdentifierDecl	code = 0		5087358	0					
ANR	5087588	IdentifierDeclType	int		5087358	0					
ANR	5087589	Identifier	code		5087358	1					
ANR	5087590	AssignmentExpression	code = 0		5087358	2		=			
ANR	5087591	Identifier	code		5087358	0					
ANR	5087592	PrimaryExpression	0		5087358	1					
ANR	5087593	IdentifierDeclStatement	int ecode = 0 ;	873:8:29269:29282	5087358	5	True				
ANR	5087594	IdentifierDecl	ecode = 0		5087358	0					
ANR	5087595	IdentifierDeclType	int		5087358	0					
ANR	5087596	Identifier	ecode		5087358	1					
ANR	5087597	AssignmentExpression	ecode = 0		5087358	2		=			
ANR	5087598	Identifier	ecode		5087358	0					
ANR	5087599	PrimaryExpression	0		5087358	1					
ANR	5087600	IdentifierDeclStatement	bool has_glyphs = false ;	874:8:29292:29315	5087358	6	True				
ANR	5087601	IdentifierDecl	has_glyphs = false		5087358	0					
ANR	5087602	IdentifierDeclType	bool		5087358	0					
ANR	5087603	Identifier	has_glyphs		5087358	1					
ANR	5087604	AssignmentExpression	has_glyphs = false		5087358	2		=			
ANR	5087605	Identifier	false		5087358	0					
ANR	5087606	Identifier	false		5087358	1					
ANR	5087607	ForStatement	"for ( index = 0 ; fixed_width >= 0 && ( code = font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph ) ) >= 0 && index != 0 ; )"		5087358	7					
ANR	5087608	ForInit	index = 0 ;	876:13:29331:29340	5087358	0	True				
ANR	5087609	AssignmentExpression	index = 0		5087358	0		=			
ANR	5087610	Identifier	index		5087358	0					
ANR	5087611	PrimaryExpression	0		5087358	1					
ANR	5087612	Condition	"fixed_width >= 0 && ( code = font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph ) ) >= 0 && index != 0"	877:13:29355:29499	5087358	1	True				
ANR	5087613	AndExpression	"fixed_width >= 0 && ( code = font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph ) ) >= 0 && index != 0"		5087358	0		&&			
ANR	5087614	RelationalExpression	fixed_width >= 0		5087358	0		>=			
ANR	5087615	Identifier	fixed_width		5087358	0					
ANR	5087616	PrimaryExpression	0		5087358	1					
ANR	5087617	AndExpression	"( code = font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph ) ) >= 0 && index != 0"		5087358	1		&&			
ANR	5087618	RelationalExpression	"( code = font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph ) ) >= 0"		5087358	0		>=			
ANR	5087619	AssignmentExpression	"code = font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph )"		5087358	0		=			
ANR	5087620	Identifier	code		5087358	0					
ANR	5087621	CallExpression	"font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph )"		5087358	1					
ANR	5087622	Callee	font -> procs . enumerate_glyph		5087358	0					
ANR	5087623	MemberAccess	font -> procs . enumerate_glyph		5087358	0					
ANR	5087624	PtrMemberAccess	font -> procs		5087358	0					
ANR	5087625	Identifier	font		5087358	0					
ANR	5087626	Identifier	procs		5087358	1					
ANR	5087627	Identifier	enumerate_glyph		5087358	1					
ANR	5087628	ArgumentList	font		5087358	1					
ANR	5087629	Argument	font		5087358	0					
ANR	5087630	Identifier	font		5087358	0					
ANR	5087631	Argument	& index		5087358	1					
ANR	5087632	UnaryOperationExpression	& index		5087358	0					
ANR	5087633	UnaryOperator	&		5087358	0					
ANR	5087634	Identifier	index		5087358	1					
ANR	5087635	Argument	GLYPH_SPACE_NAME		5087358	2					
ANR	5087636	Identifier	GLYPH_SPACE_NAME		5087358	0					
ANR	5087637	Argument	& glyph		5087358	3					
ANR	5087638	UnaryOperationExpression	& glyph		5087358	0					
ANR	5087639	UnaryOperator	&		5087358	0					
ANR	5087640	Identifier	glyph		5087358	1					
ANR	5087641	PrimaryExpression	0		5087358	1					
ANR	5087642	EqualityExpression	index != 0		5087358	1		!=			
ANR	5087643	Identifier	index		5087358	0					
ANR	5087644	PrimaryExpression	0		5087358	1					
ANR	5087645	CompoundStatement		47:12:1423:1449	5087358	2					
ANR	5087646	IdentifierDeclStatement	gs_glyph_info_t glyph_info ;	881:12:29531:29557	5087358	0	True				
ANR	5087647	IdentifierDecl	glyph_info		5087358	0					
ANR	5087648	IdentifierDeclType	gs_glyph_info_t		5087358	0					
ANR	5087649	Identifier	glyph_info		5087358	1					
ANR	5087650	ExpressionStatement	"memset ( & glyph_info , 0x00 , sizeof ( gs_glyph_info_t ) )"	883:12:29572:29622	5087358	1	True				
ANR	5087651	CallExpression	"memset ( & glyph_info , 0x00 , sizeof ( gs_glyph_info_t ) )"		5087358	0					
ANR	5087652	Callee	memset		5087358	0					
ANR	5087653	Identifier	memset		5087358	0					
ANR	5087654	ArgumentList	& glyph_info		5087358	1					
ANR	5087655	Argument	& glyph_info		5087358	0					
ANR	5087656	UnaryOperationExpression	& glyph_info		5087358	0					
ANR	5087657	UnaryOperator	&		5087358	0					
ANR	5087658	Identifier	glyph_info		5087358	1					
ANR	5087659	Argument	0x00		5087358	1					
ANR	5087660	PrimaryExpression	0x00		5087358	0					
ANR	5087661	Argument	sizeof ( gs_glyph_info_t )		5087358	2					
ANR	5087662	SizeofExpression	sizeof ( gs_glyph_info_t )		5087358	0					
ANR	5087663	Sizeof	sizeof		5087358	0					
ANR	5087664	SizeofOperand	gs_glyph_info_t		5087358	1					
ANR	5087665	ExpressionStatement	"code = font -> procs . glyph_info ( font , glyph , pmat , ( GLYPH_INFO_WIDTH0 << wmode ) , & glyph_info )"	884:12:29636:29811	5087358	2	True				
ANR	5087666	AssignmentExpression	"code = font -> procs . glyph_info ( font , glyph , pmat , ( GLYPH_INFO_WIDTH0 << wmode ) , & glyph_info )"		5087358	0		=			
ANR	5087667	Identifier	code		5087358	0					
ANR	5087668	CallExpression	"font -> procs . glyph_info ( font , glyph , pmat , ( GLYPH_INFO_WIDTH0 << wmode ) , & glyph_info )"		5087358	1					
ANR	5087669	Callee	font -> procs . glyph_info		5087358	0					
ANR	5087670	MemberAccess	font -> procs . glyph_info		5087358	0					
ANR	5087671	PtrMemberAccess	font -> procs		5087358	0					
ANR	5087672	Identifier	font		5087358	0					
ANR	5087673	Identifier	procs		5087358	1					
ANR	5087674	Identifier	glyph_info		5087358	1					
ANR	5087675	ArgumentList	font		5087358	1					
ANR	5087676	Argument	font		5087358	0					
ANR	5087677	Identifier	font		5087358	0					
ANR	5087678	Argument	glyph		5087358	1					
ANR	5087679	Identifier	glyph		5087358	0					
ANR	5087680	Argument	pmat		5087358	2					
ANR	5087681	Identifier	pmat		5087358	0					
ANR	5087682	Argument	GLYPH_INFO_WIDTH0 << wmode		5087358	3					
ANR	5087683	ShiftExpression	GLYPH_INFO_WIDTH0 << wmode		5087358	0		<<			
ANR	5087684	Identifier	GLYPH_INFO_WIDTH0		5087358	0					
ANR	5087685	Identifier	wmode		5087358	1					
ANR	5087686	Argument	& glyph_info		5087358	4					
ANR	5087687	UnaryOperationExpression	& glyph_info		5087358	0					
ANR	5087688	UnaryOperator	&		5087358	0					
ANR	5087689	Identifier	glyph_info		5087358	1					
ANR	5087690	IfStatement	if ( code < 0 )		5087358	3					
ANR	5087691	Condition	code < 0	887:16:29829:29836	5087358	0	True				
ANR	5087692	RelationalExpression	code < 0		5087358	0		<			
ANR	5087693	Identifier	code		5087358	0					
ANR	5087694	PrimaryExpression	0		5087358	1					
ANR	5087695	CompoundStatement		53:26:1731:1731	5087358	1					
ANR	5087696	ExpressionStatement	ecode = code	888:16:29857:29869	5087358	0	True				
ANR	5087697	AssignmentExpression	ecode = code		5087358	0		=			
ANR	5087698	Identifier	ecode		5087358	0					
ANR	5087699	Identifier	code		5087358	1					
ANR	5087700	ContinueStatement	continue ;	889:16:29887:29895	5087358	1	True				
ANR	5087701	IfStatement	"if ( notdef == GS_NO_GLYPH && gs_font_glyph_is_notdef ( bfont , glyph ) )"		5087358	4					
ANR	5087702	Condition	"notdef == GS_NO_GLYPH && gs_font_glyph_is_notdef ( bfont , glyph )"	891:16:29927:29988	5087358	0	True				
ANR	5087703	AndExpression	"notdef == GS_NO_GLYPH && gs_font_glyph_is_notdef ( bfont , glyph )"		5087358	0		&&			
ANR	5087704	EqualityExpression	notdef == GS_NO_GLYPH		5087358	0		==			
ANR	5087705	Identifier	notdef		5087358	0					
ANR	5087706	Identifier	GS_NO_GLYPH		5087358	1					
ANR	5087707	CallExpression	"gs_font_glyph_is_notdef ( bfont , glyph )"		5087358	1					
ANR	5087708	Callee	gs_font_glyph_is_notdef		5087358	0					
ANR	5087709	Identifier	gs_font_glyph_is_notdef		5087358	0					
ANR	5087710	ArgumentList	bfont		5087358	1					
ANR	5087711	Argument	bfont		5087358	0					
ANR	5087712	Identifier	bfont		5087358	0					
ANR	5087713	Argument	glyph		5087358	1					
ANR	5087714	Identifier	glyph		5087358	0					
ANR	5087715	CompoundStatement		57:80:1883:1883	5087358	1					
ANR	5087716	ExpressionStatement	notdef = glyph	892:16:30009:30023	5087358	0	True				
ANR	5087717	AssignmentExpression	notdef = glyph		5087358	0		=			
ANR	5087718	Identifier	notdef		5087358	0					
ANR	5087719	Identifier	glyph		5087358	1					
ANR	5087720	ExpressionStatement	info -> MissingWidth = ( int ) glyph_info . width [ wmode ] . x	893:16:30041:30092	5087358	1	True				
ANR	5087721	AssignmentExpression	info -> MissingWidth = ( int ) glyph_info . width [ wmode ] . x		5087358	0		=			
ANR	5087722	PtrMemberAccess	info -> MissingWidth		5087358	0					
ANR	5087723	Identifier	info		5087358	0					
ANR	5087724	Identifier	MissingWidth		5087358	1					
ANR	5087725	CastExpression	( int ) glyph_info . width [ wmode ] . x		5087358	1					
ANR	5087726	CastTarget	int		5087358	0					
ANR	5087727	MemberAccess	glyph_info . width [ wmode ] . x		5087358	1					
ANR	5087728	ArrayIndexing	glyph_info . width [ wmode ]		5087358	0					
ANR	5087729	MemberAccess	glyph_info . width		5087358	0					
ANR	5087730	Identifier	glyph_info		5087358	0					
ANR	5087731	Identifier	width		5087358	1					
ANR	5087732	Identifier	wmode		5087358	1					
ANR	5087733	Identifier	x		5087358	1					
ANR	5087734	ExpressionStatement	info -> members |= FONT_INFO_MISSING_WIDTH	894:16:30110:30150	5087358	2	True				
ANR	5087735	AssignmentExpression	info -> members |= FONT_INFO_MISSING_WIDTH		5087358	0		|=			
ANR	5087736	PtrMemberAccess	info -> members		5087358	0					
ANR	5087737	Identifier	info		5087358	0					
ANR	5087738	Identifier	members		5087358	1					
ANR	5087739	Identifier	FONT_INFO_MISSING_WIDTH		5087358	1					
ANR	5087740	IfStatement	if ( glyph_info . width [ wmode ] . y != 0 )		5087358	5					
ANR	5087741	Condition	glyph_info . width [ wmode ] . y != 0	896:16:30182:30211	5087358	0	True				
ANR	5087742	EqualityExpression	glyph_info . width [ wmode ] . y != 0		5087358	0		!=			
ANR	5087743	MemberAccess	glyph_info . width [ wmode ] . y		5087358	0					
ANR	5087744	ArrayIndexing	glyph_info . width [ wmode ]		5087358	0					
ANR	5087745	MemberAccess	glyph_info . width		5087358	0					
ANR	5087746	Identifier	glyph_info		5087358	0					
ANR	5087747	Identifier	width		5087358	1					
ANR	5087748	Identifier	wmode		5087358	1					
ANR	5087749	Identifier	y		5087358	1					
ANR	5087750	PrimaryExpression	0		5087358	1					
ANR	5087751	ExpressionStatement	fixed_width = min_int	897:16:30230:30251	5087358	1	True				
ANR	5087752	AssignmentExpression	fixed_width = min_int		5087358	0		=			
ANR	5087753	Identifier	fixed_width		5087358	0					
ANR	5087754	Identifier	min_int		5087358	1					
ANR	5087755	ElseStatement	else		5087358	0					
ANR	5087756	IfStatement	if ( fixed_width == 0 )		5087358	0					
ANR	5087757	Condition	fixed_width == 0	898:21:30274:30289	5087358	0	True				
ANR	5087758	EqualityExpression	fixed_width == 0		5087358	0		==			
ANR	5087759	Identifier	fixed_width		5087358	0					
ANR	5087760	PrimaryExpression	0		5087358	1					
ANR	5087761	ExpressionStatement	fixed_width = ( int ) glyph_info . width [ wmode ] . x	899:16:30308:30352	5087358	1	True				
ANR	5087762	AssignmentExpression	fixed_width = ( int ) glyph_info . width [ wmode ] . x		5087358	0		=			
ANR	5087763	Identifier	fixed_width		5087358	0					
ANR	5087764	CastExpression	( int ) glyph_info . width [ wmode ] . x		5087358	1					
ANR	5087765	CastTarget	int		5087358	0					
ANR	5087766	MemberAccess	glyph_info . width [ wmode ] . x		5087358	1					
ANR	5087767	ArrayIndexing	glyph_info . width [ wmode ]		5087358	0					
ANR	5087768	MemberAccess	glyph_info . width		5087358	0					
ANR	5087769	Identifier	glyph_info		5087358	0					
ANR	5087770	Identifier	width		5087358	1					
ANR	5087771	Identifier	wmode		5087358	1					
ANR	5087772	Identifier	x		5087358	1					
ANR	5087773	ElseStatement	else		5087358	0					
ANR	5087774	IfStatement	if ( glyph_info . width [ wmode ] . x != fixed_width )		5087358	0					
ANR	5087775	Condition	glyph_info . width [ wmode ] . x != fixed_width	900:21:30375:30414	5087358	0	True				
ANR	5087776	EqualityExpression	glyph_info . width [ wmode ] . x != fixed_width		5087358	0		!=			
ANR	5087777	MemberAccess	glyph_info . width [ wmode ] . x		5087358	0					
ANR	5087778	ArrayIndexing	glyph_info . width [ wmode ]		5087358	0					
ANR	5087779	MemberAccess	glyph_info . width		5087358	0					
ANR	5087780	Identifier	glyph_info		5087358	0					
ANR	5087781	Identifier	width		5087358	1					
ANR	5087782	Identifier	wmode		5087358	1					
ANR	5087783	Identifier	x		5087358	1					
ANR	5087784	Identifier	fixed_width		5087358	1					
ANR	5087785	ExpressionStatement	fixed_width = min_int	901:16:30433:30454	5087358	1	True				
ANR	5087786	AssignmentExpression	fixed_width = min_int		5087358	0		=			
ANR	5087787	Identifier	fixed_width		5087358	0					
ANR	5087788	Identifier	min_int		5087358	1					
ANR	5087789	ExpressionStatement	has_glyphs = true	902:12:30468:30485	5087358	6	True				
ANR	5087790	AssignmentExpression	has_glyphs = true		5087358	0		=			
ANR	5087791	Identifier	has_glyphs		5087358	0					
ANR	5087792	Identifier	true		5087358	1					
ANR	5087793	IfStatement	if ( ecode < 0 && ! has_glyphs )		5087358	8					
ANR	5087794	Condition	ecode < 0 && ! has_glyphs	904:12:30509:30532	5087358	0	True				
ANR	5087795	AndExpression	ecode < 0 && ! has_glyphs		5087358	0		&&			
ANR	5087796	RelationalExpression	ecode < 0		5087358	0		<			
ANR	5087797	Identifier	ecode		5087358	0					
ANR	5087798	PrimaryExpression	0		5087358	1					
ANR	5087799	UnaryOperationExpression	! has_glyphs		5087358	1					
ANR	5087800	UnaryOperator	!		5087358	0					
ANR	5087801	Identifier	has_glyphs		5087358	1					
ANR	5087802	ReturnStatement	return ecode ;	905:12:30547:30559	5087358	1	True				
ANR	5087803	Identifier	ecode		5087358	0					
ANR	5087804	IfStatement	if ( fixed_width > 0 )		5087358	9					
ANR	5087805	Condition	fixed_width > 0	906:12:30573:30587	5087358	0	True				
ANR	5087806	RelationalExpression	fixed_width > 0		5087358	0		>			
ANR	5087807	Identifier	fixed_width		5087358	0					
ANR	5087808	PrimaryExpression	0		5087358	1					
ANR	5087809	CompoundStatement		72:29:2482:2482	5087358	1					
ANR	5087810	ExpressionStatement	info -> Flags |= FONT_IS_FIXED_WIDTH	907:12:30604:30638	5087358	0	True				
ANR	5087811	AssignmentExpression	info -> Flags |= FONT_IS_FIXED_WIDTH		5087358	0		|=			
ANR	5087812	PtrMemberAccess	info -> Flags		5087358	0					
ANR	5087813	Identifier	info		5087358	0					
ANR	5087814	Identifier	Flags		5087358	1					
ANR	5087815	Identifier	FONT_IS_FIXED_WIDTH		5087358	1					
ANR	5087816	ExpressionStatement	info -> members |= FONT_INFO_AVG_WIDTH | FONT_INFO_MAX_WIDTH | FONT_INFO_MISSING_WIDTH	908:12:30652:30752	5087358	1	True				
ANR	5087817	AssignmentExpression	info -> members |= FONT_INFO_AVG_WIDTH | FONT_INFO_MAX_WIDTH | FONT_INFO_MISSING_WIDTH		5087358	0		|=			
ANR	5087818	PtrMemberAccess	info -> members		5087358	0					
ANR	5087819	Identifier	info		5087358	0					
ANR	5087820	Identifier	members		5087358	1					
ANR	5087821	InclusiveOrExpression	FONT_INFO_AVG_WIDTH | FONT_INFO_MAX_WIDTH | FONT_INFO_MISSING_WIDTH		5087358	1		|			
ANR	5087822	Identifier	FONT_INFO_AVG_WIDTH		5087358	0					
ANR	5087823	InclusiveOrExpression	FONT_INFO_MAX_WIDTH | FONT_INFO_MISSING_WIDTH		5087358	1		|			
ANR	5087824	Identifier	FONT_INFO_MAX_WIDTH		5087358	0					
ANR	5087825	Identifier	FONT_INFO_MISSING_WIDTH		5087358	1					
ANR	5087826	ExpressionStatement	info -> AvgWidth = info -> MaxWidth = info -> MissingWidth = fixed_width	910:12:30766:30832	5087358	2	True				
ANR	5087827	AssignmentExpression	info -> AvgWidth = info -> MaxWidth = info -> MissingWidth = fixed_width		5087358	0		=			
ANR	5087828	PtrMemberAccess	info -> AvgWidth		5087358	0					
ANR	5087829	Identifier	info		5087358	0					
ANR	5087830	Identifier	AvgWidth		5087358	1					
ANR	5087831	AssignmentExpression	info -> MaxWidth = info -> MissingWidth = fixed_width		5087358	1		=			
ANR	5087832	PtrMemberAccess	info -> MaxWidth		5087358	0					
ANR	5087833	Identifier	info		5087358	0					
ANR	5087834	Identifier	MaxWidth		5087358	1					
ANR	5087835	AssignmentExpression	info -> MissingWidth = fixed_width		5087358	1		=			
ANR	5087836	PtrMemberAccess	info -> MissingWidth		5087358	0					
ANR	5087837	Identifier	info		5087358	0					
ANR	5087838	Identifier	MissingWidth		5087358	1					
ANR	5087839	Identifier	fixed_width		5087358	1					
ANR	5087840	ExpressionStatement	info -> Flags_returned |= FONT_IS_FIXED_WIDTH	912:8:30852:30895	5087358	10	True				
ANR	5087841	AssignmentExpression	info -> Flags_returned |= FONT_IS_FIXED_WIDTH		5087358	0		|=			
ANR	5087842	PtrMemberAccess	info -> Flags_returned		5087358	0					
ANR	5087843	Identifier	info		5087358	0					
ANR	5087844	Identifier	Flags_returned		5087358	1					
ANR	5087845	Identifier	FONT_IS_FIXED_WIDTH		5087358	1					
ANR	5087846	ElseStatement	else		5087358	0					
ANR	5087847	IfStatement	if ( members & FONT_INFO_MISSING_WIDTH )		5087358	0					
ANR	5087848	Condition	members & FONT_INFO_MISSING_WIDTH	913:15:30912:30944	5087358	0	True				
ANR	5087849	BitAndExpression	members & FONT_INFO_MISSING_WIDTH		5087358	0		&			
ANR	5087850	Identifier	members		5087358	0					
ANR	5087851	Identifier	FONT_INFO_MISSING_WIDTH		5087358	1					
ANR	5087852	CompoundStatement		81:8:2873:2882	5087358	1					
ANR	5087853	IdentifierDeclStatement	gs_glyph glyph ;	914:8:30957:30971	5087358	0	True				
ANR	5087854	IdentifierDecl	glyph		5087358	0					
ANR	5087855	IdentifierDeclType	gs_glyph		5087358	0					
ANR	5087856	Identifier	glyph		5087358	1					
ANR	5087857	IdentifierDeclStatement	int index ;	915:8:30981:30990	5087358	1	True				
ANR	5087858	IdentifierDecl	index		5087358	0					
ANR	5087859	IdentifierDeclType	int		5087358	0					
ANR	5087860	Identifier	index		5087358	1					
ANR	5087861	ForStatement	"for ( index = 0 ; font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph ) >= 0 && index != 0 ; )"		5087358	2					
ANR	5087862	ForInit	index = 0 ;	917:13:31006:31015	5087358	0	True				
ANR	5087863	AssignmentExpression	index = 0		5087358	0		=			
ANR	5087864	Identifier	index		5087358	0					
ANR	5087865	PrimaryExpression	0		5087358	1					
ANR	5087866	Condition	"font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph ) >= 0 && index != 0"	918:13:31030:31132	5087358	1	True				
ANR	5087867	AndExpression	"font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph ) >= 0 && index != 0"		5087358	0		&&			
ANR	5087868	RelationalExpression	"font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph ) >= 0"		5087358	0		>=			
ANR	5087869	CallExpression	"font -> procs . enumerate_glyph ( font , & index , GLYPH_SPACE_NAME , & glyph )"		5087358	0					
ANR	5087870	Callee	font -> procs . enumerate_glyph		5087358	0					
ANR	5087871	MemberAccess	font -> procs . enumerate_glyph		5087358	0					
ANR	5087872	PtrMemberAccess	font -> procs		5087358	0					
ANR	5087873	Identifier	font		5087358	0					
ANR	5087874	Identifier	procs		5087358	1					
ANR	5087875	Identifier	enumerate_glyph		5087358	1					
ANR	5087876	ArgumentList	font		5087358	1					
ANR	5087877	Argument	font		5087358	0					
ANR	5087878	Identifier	font		5087358	0					
ANR	5087879	Argument	& index		5087358	1					
ANR	5087880	UnaryOperationExpression	& index		5087358	0					
ANR	5087881	UnaryOperator	&		5087358	0					
ANR	5087882	Identifier	index		5087358	1					
ANR	5087883	Argument	GLYPH_SPACE_NAME		5087358	2					
ANR	5087884	Identifier	GLYPH_SPACE_NAME		5087358	0					
ANR	5087885	Argument	& glyph		5087358	3					
ANR	5087886	UnaryOperationExpression	& glyph		5087358	0					
ANR	5087887	UnaryOperator	&		5087358	0					
ANR	5087888	Identifier	glyph		5087358	1					
ANR	5087889	PrimaryExpression	0		5087358	1					
ANR	5087890	EqualityExpression	index != 0		5087358	1		!=			
ANR	5087891	Identifier	index		5087358	0					
ANR	5087892	PrimaryExpression	0		5087358	1					
ANR	5087893	CompoundStatement		86:15:3042:3042	5087358	2					
ANR	5087894	IfStatement	"if ( ! gs_font_glyph_is_notdef ( bfont , glyph ) )"		5087358	0					
ANR	5087895	Condition	"! gs_font_glyph_is_notdef ( bfont , glyph )"	925:16:31351:31388	5087358	0	True				
ANR	5087896	UnaryOperationExpression	"! gs_font_glyph_is_notdef ( bfont , glyph )"		5087358	0					
ANR	5087897	UnaryOperator	!		5087358	0					
ANR	5087898	CallExpression	"gs_font_glyph_is_notdef ( bfont , glyph )"		5087358	1					
ANR	5087899	Callee	gs_font_glyph_is_notdef		5087358	0					
ANR	5087900	Identifier	gs_font_glyph_is_notdef		5087358	0					
ANR	5087901	ArgumentList	bfont		5087358	1					
ANR	5087902	Argument	bfont		5087358	0					
ANR	5087903	Identifier	bfont		5087358	0					
ANR	5087904	Argument	glyph		5087358	1					
ANR	5087905	Identifier	glyph		5087358	0					
ANR	5087906	ContinueStatement	continue ;	926:16:31407:31415	5087358	1	True				
ANR	5087907	CompoundStatement		95:16:3383:3578	5087358	1					
ANR	5087908	IdentifierDeclStatement	gs_glyph_info_t glyph_info ;	928:16:31447:31473	5087358	0	True				
ANR	5087909	IdentifierDecl	glyph_info		5087358	0					
ANR	5087910	IdentifierDeclType	gs_glyph_info_t		5087358	0					
ANR	5087911	Identifier	glyph_info		5087358	1					
ANR	5087912	IdentifierDeclStatement	"int code = font -> procs . glyph_info ( font , glyph , pmat , ( GLYPH_INFO_WIDTH0 << wmode ) , & glyph_info ) ;"	929:16:31491:31686	5087358	1	True				
ANR	5087913	IdentifierDecl	"code = font -> procs . glyph_info ( font , glyph , pmat , ( GLYPH_INFO_WIDTH0 << wmode ) , & glyph_info )"		5087358	0					
ANR	5087914	IdentifierDeclType	int		5087358	0					
ANR	5087915	Identifier	code		5087358	1					
ANR	5087916	AssignmentExpression	"code = font -> procs . glyph_info ( font , glyph , pmat , ( GLYPH_INFO_WIDTH0 << wmode ) , & glyph_info )"		5087358	2		=			
ANR	5087917	Identifier	code		5087358	0					
ANR	5087918	CallExpression	"font -> procs . glyph_info ( font , glyph , pmat , ( GLYPH_INFO_WIDTH0 << wmode ) , & glyph_info )"		5087358	1					
ANR	5087919	Callee	font -> procs . glyph_info		5087358	0					
ANR	5087920	MemberAccess	font -> procs . glyph_info		5087358	0					
ANR	5087921	PtrMemberAccess	font -> procs		5087358	0					
ANR	5087922	Identifier	font		5087358	0					
ANR	5087923	Identifier	procs		5087358	1					
ANR	5087924	Identifier	glyph_info		5087358	1					
ANR	5087925	ArgumentList	font		5087358	1					
ANR	5087926	Argument	font		5087358	0					
ANR	5087927	Identifier	font		5087358	0					
ANR	5087928	Argument	glyph		5087358	1					
ANR	5087929	Identifier	glyph		5087358	0					
ANR	5087930	Argument	pmat		5087358	2					
ANR	5087931	Identifier	pmat		5087358	0					
ANR	5087932	Argument	GLYPH_INFO_WIDTH0 << wmode		5087358	3					
ANR	5087933	ShiftExpression	GLYPH_INFO_WIDTH0 << wmode		5087358	0		<<			
ANR	5087934	Identifier	GLYPH_INFO_WIDTH0		5087358	0					
ANR	5087935	Identifier	wmode		5087358	1					
ANR	5087936	Argument	& glyph_info		5087358	4					
ANR	5087937	UnaryOperationExpression	& glyph_info		5087358	0					
ANR	5087938	UnaryOperator	&		5087358	0					
ANR	5087939	Identifier	glyph_info		5087358	1					
ANR	5087940	IfStatement	if ( code < 0 )		5087358	2					
ANR	5087941	Condition	code < 0	933:20:31709:31716	5087358	0	True				
ANR	5087942	RelationalExpression	code < 0		5087358	0		<			
ANR	5087943	Identifier	code		5087358	0					
ANR	5087944	PrimaryExpression	0		5087358	1					
ANR	5087945	ReturnStatement	return code ;	934:20:31739:31750	5087358	1	True				
ANR	5087946	Identifier	code		5087358	0					
ANR	5087947	ExpressionStatement	info -> MissingWidth = ( int ) glyph_info . width [ wmode ] . x	935:16:31768:31819	5087358	3	True				
ANR	5087948	AssignmentExpression	info -> MissingWidth = ( int ) glyph_info . width [ wmode ] . x		5087358	0		=			
ANR	5087949	PtrMemberAccess	info -> MissingWidth		5087358	0					
ANR	5087950	Identifier	info		5087358	0					
ANR	5087951	Identifier	MissingWidth		5087358	1					
ANR	5087952	CastExpression	( int ) glyph_info . width [ wmode ] . x		5087358	1					
ANR	5087953	CastTarget	int		5087358	0					
ANR	5087954	MemberAccess	glyph_info . width [ wmode ] . x		5087358	1					
ANR	5087955	ArrayIndexing	glyph_info . width [ wmode ]		5087358	0					
ANR	5087956	MemberAccess	glyph_info . width		5087358	0					
ANR	5087957	Identifier	glyph_info		5087358	0					
ANR	5087958	Identifier	width		5087358	1					
ANR	5087959	Identifier	wmode		5087358	1					
ANR	5087960	Identifier	x		5087358	1					
ANR	5087961	ExpressionStatement	info -> members |= FONT_INFO_MISSING_WIDTH	936:16:31837:31877	5087358	4	True				
ANR	5087962	AssignmentExpression	info -> members |= FONT_INFO_MISSING_WIDTH		5087358	0		|=			
ANR	5087963	PtrMemberAccess	info -> members		5087358	0					
ANR	5087964	Identifier	info		5087358	0					
ANR	5087965	Identifier	members		5087358	1					
ANR	5087966	Identifier	FONT_INFO_MISSING_WIDTH		5087358	1					
ANR	5087967	BreakStatement	break ;	937:16:31895:31900	5087358	5	True				
ANR	5087968	ReturnStatement	return 0 ;	941:4:31936:31944	5087358	11	True				
ANR	5087969	PrimaryExpression	0		5087358	0					
ANR	5087970	ReturnType	int		5087358	1					
ANR	5087971	Identifier	gs_default_font_info		5087358	2					
ANR	5087972	ParameterList	"gs_font * font , const gs_point * pscale , int members , gs_font_info_t * info"		5087358	3					
ANR	5087973	Parameter	gs_font * font	833:21:28012:28024	5087358	0	True				
ANR	5087974	ParameterType	gs_font *		5087358	0					
ANR	5087975	Identifier	font		5087358	1					
ANR	5087976	Parameter	const gs_point * pscale	833:36:28027:28048	5087358	1	True				
ANR	5087977	ParameterType	const gs_point *		5087358	0					
ANR	5087978	Identifier	pscale		5087358	1					
ANR	5087979	Parameter	int members	833:60:28051:28061	5087358	2	True				
ANR	5087980	ParameterType	int		5087358	0					
ANR	5087981	Identifier	members		5087358	1					
ANR	5087982	Parameter	gs_font_info_t * info	834:21:28085:28104	5087358	3	True				
ANR	5087983	ParameterType	gs_font_info_t *		5087358	0					
ANR	5087984	Identifier	info		5087358	1					
ANR	5087985	CFGEntryNode	ENTRY		5087358		True				
ANR	5087986	CFGExitNode	EXIT		5087358		True				
ANR	5087987	Symbol	FONT_INFO_MISSING_WIDTH		5087358						
ANR	5087988	Symbol	* wmode		5087358						
ANR	5087989	Symbol	* glyph_info . width		5087358						
ANR	5087990	Symbol	FONT_INFO_FLAGS		5087358						
ANR	5087991	Symbol	info -> members		5087358						
ANR	5087992	Symbol	& glyph		5087358						
ANR	5087993	Symbol	bfont -> FontBBox . q . x		5087358						
ANR	5087994	Symbol	& smat		5087358						
ANR	5087995	Symbol	FONT_INFO_BBOX		5087358						
ANR	5087996	Symbol	bfont -> FontBBox . q . y		5087358						
ANR	5087997	Symbol	glyph_info		5087358						
ANR	5087998	Symbol	members		5087358						
ANR	5087999	Symbol	info -> Flags_returned		5087358						
ANR	5088000	Symbol	* font		5087358						
ANR	5088001	Symbol	info -> BBox		5087358						
ANR	5088002	Symbol	& index		5087358						
ANR	5088003	Symbol	info -> Flags_requested		5087358						
ANR	5088004	Symbol	info		5087358						
ANR	5088005	Symbol	info -> BBox . p		5087358						
ANR	5088006	Symbol	info -> BBox . q		5087358						
ANR	5088007	Symbol	bfont		5087358						
ANR	5088008	Symbol	* glyph_info		5087358						
ANR	5088009	Symbol	bfont -> FontBBox . p . x		5087358						
ANR	5088010	Symbol	bfont -> FontBBox . p . y		5087358						
ANR	5088011	Symbol	index		5087358						
ANR	5088012	Symbol	font -> WMode		5087358						
ANR	5088013	Symbol	FONT_INFO_MAX_WIDTH		5087358						
ANR	5088014	Symbol	font -> procs . enumerate_glyph		5087358						
ANR	5088015	Symbol	smat		5087358						
ANR	5088016	Symbol	true		5087358						
ANR	5088017	Symbol	glyph_info . width [ wmode ] . y		5087358						
ANR	5088018	Symbol	glyph_info . width [ wmode ] . x		5087358						
ANR	5088019	Symbol	info -> MaxWidth		5087358						
ANR	5088020	Symbol	info -> BBox . p . x		5087358						
ANR	5088021	Symbol	info -> BBox . p . y		5087358						
ANR	5088022	Symbol	info -> AvgWidth		5087358						
ANR	5088023	Symbol	code		5087358						
ANR	5088024	Symbol	pmat		5087358						
ANR	5088025	Symbol	has_glyphs		5087358						
ANR	5088026	Symbol	scale . x		5087358						
ANR	5088027	Symbol	fixed_width		5087358						
ANR	5088028	Symbol	scale		5087358						
ANR	5088029	Symbol	scale . y		5087358						
ANR	5088030	Symbol	* pscale		5087358						
ANR	5088031	Symbol	* bfont		5087358						
ANR	5088032	Symbol	info -> BBox . q . x		5087358						
ANR	5088033	Symbol	GLYPH_INFO_WIDTH0		5087358						
ANR	5088034	Symbol	font -> FontType		5087358						
ANR	5088035	Symbol	info -> BBox . q . y		5087358						
ANR	5088036	Symbol	notdef		5087358						
ANR	5088037	Symbol	bfont -> FontBBox . q		5087358						
ANR	5088038	Symbol	bfont -> FontBBox . p		5087358						
ANR	5088039	Symbol	FONT_INFO_AVG_WIDTH		5087358						
ANR	5088040	Symbol	wmode		5087358						
ANR	5088041	Symbol	GLYPH_SPACE_NAME		5087358						
ANR	5088042	Symbol	glyph_info . width		5087358						
ANR	5088043	Symbol	font -> procs . glyph_info		5087358						
ANR	5088044	Symbol	bfont -> FontBBox		5087358						
ANR	5088045	Symbol	false		5087358						
ANR	5088046	Symbol	min_int		5087358						
ANR	5088047	Symbol	ft_composite		5087358						
ANR	5088048	Symbol	ecode		5087358						
ANR	5088049	Symbol	GS_NO_GLYPH		5087358						
ANR	5088050	Symbol	glyph		5087358						
ANR	5088051	Symbol	& glyph_info		5087358						
ANR	5088052	Symbol	FONT_IS_FIXED_WIDTH		5087358						
ANR	5088053	Symbol	font -> procs		5087358						
ANR	5088054	Symbol	pscale		5087358						
ANR	5088055	Symbol	* info		5087358						
ANR	5088056	Symbol	info -> Flags		5087358						
ANR	5088057	Symbol	font		5087358						
ANR	5088058	Symbol	gs_font_glyph_is_notdef		5087358						
ANR	5088059	Symbol	info -> MissingWidth		5087358						
ANR	5088060	Function	gs_default_same_font	945:0:31997:32308							
ANR	5088061	FunctionDef	"gs_default_same_font (const gs_font * font , const gs_font * ofont , int mask)"		5088060	0					
ANR	5088062	CompoundStatement		947:0:32075:32308	5088060	0					
ANR	5088063	WhileStatement	while ( font -> base != font )		5088060	0					
ANR	5088064	Condition	font -> base != font	948:11:32088:32105	5088060	0	True				
ANR	5088065	EqualityExpression	font -> base != font		5088060	0		!=			
ANR	5088066	PtrMemberAccess	font -> base		5088060	0					
ANR	5088067	Identifier	font		5088060	0					
ANR	5088068	Identifier	base		5088060	1					
ANR	5088069	Identifier	font		5088060	1					
ANR	5088070	ExpressionStatement	font = font -> base	949:8:32116:32133	5088060	1	True				
ANR	5088071	AssignmentExpression	font = font -> base		5088060	0		=			
ANR	5088072	Identifier	font		5088060	0					
ANR	5088073	PtrMemberAccess	font -> base		5088060	1					
ANR	5088074	Identifier	font		5088060	0					
ANR	5088075	Identifier	base		5088060	1					
ANR	5088076	WhileStatement	while ( ofont -> base != ofont )		5088060	1					
ANR	5088077	Condition	ofont -> base != ofont	950:11:32146:32165	5088060	0	True				
ANR	5088078	EqualityExpression	ofont -> base != ofont		5088060	0		!=			
ANR	5088079	PtrMemberAccess	ofont -> base		5088060	0					
ANR	5088080	Identifier	ofont		5088060	0					
ANR	5088081	Identifier	base		5088060	1					
ANR	5088082	Identifier	ofont		5088060	1					
ANR	5088083	ExpressionStatement	ofont = ofont -> base	951:8:32176:32195	5088060	1	True				
ANR	5088084	AssignmentExpression	ofont = ofont -> base		5088060	0		=			
ANR	5088085	Identifier	ofont		5088060	0					
ANR	5088086	PtrMemberAccess	ofont -> base		5088060	1					
ANR	5088087	Identifier	ofont		5088060	0					
ANR	5088088	Identifier	base		5088060	1					
ANR	5088089	IfStatement	if ( ofont == font )		5088060	2					
ANR	5088090	Condition	ofont == font	952:8:32205:32217	5088060	0	True				
ANR	5088091	EqualityExpression	ofont == font		5088060	0		==			
ANR	5088092	Identifier	ofont		5088060	0					
ANR	5088093	Identifier	font		5088060	1					
ANR	5088094	ReturnStatement	return mask ;	953:8:32228:32239	5088060	1	True				
ANR	5088095	Identifier	mask		5088060	0					
ANR	5088096	ReturnStatement	return 0 ;	955:4:32298:32306	5088060	3	True				
ANR	5088097	PrimaryExpression	0		5088060	0					
ANR	5088098	ReturnType	int		5088060	1					
ANR	5088099	Identifier	gs_default_same_font		5088060	2					
ANR	5088100	ParameterList	"const gs_font * font , const gs_font * ofont , int mask"		5088060	3					
ANR	5088101	Parameter	const gs_font * font	946:21:32022:32040	5088060	0	True				
ANR	5088102	ParameterType	const gs_font *		5088060	0					
ANR	5088103	Identifier	font		5088060	1					
ANR	5088104	Parameter	const gs_font * ofont	946:42:32043:32062	5088060	1	True				
ANR	5088105	ParameterType	const gs_font *		5088060	0					
ANR	5088106	Identifier	ofont		5088060	1					
ANR	5088107	Parameter	int mask	946:64:32065:32072	5088060	2	True				
ANR	5088108	ParameterType	int		5088060	0					
ANR	5088109	Identifier	mask		5088060	1					
ANR	5088110	CFGEntryNode	ENTRY		5088060		True				
ANR	5088111	CFGExitNode	EXIT		5088060		True				
ANR	5088112	Symbol	ofont		5088060						
ANR	5088113	Symbol	font -> base		5088060						
ANR	5088114	Symbol	ofont -> base		5088060						
ANR	5088115	Symbol	* ofont		5088060						
ANR	5088116	Symbol	* font		5088060						
ANR	5088117	Symbol	font		5088060						
ANR	5088118	Symbol	mask		5088060						
ANR	5088119	Function	gs_base_same_font	957:0:32310:32961							
ANR	5088120	FunctionDef	"gs_base_same_font (const gs_font * font , const gs_font * ofont , int mask)"		5088119	0					
ANR	5088121	CompoundStatement		959:0:32385:32961	5088119	0					
ANR	5088122	IdentifierDeclStatement	"int same = gs_default_same_font ( font , ofont , mask ) ;"	960:4:32391:32441	5088119	0	True				
ANR	5088123	IdentifierDecl	"same = gs_default_same_font ( font , ofont , mask )"		5088119	0					
ANR	5088124	IdentifierDeclType	int		5088119	0					
ANR	5088125	Identifier	same		5088119	1					
ANR	5088126	AssignmentExpression	"same = gs_default_same_font ( font , ofont , mask )"		5088119	2		=			
ANR	5088127	Identifier	same		5088119	0					
ANR	5088128	CallExpression	"gs_default_same_font ( font , ofont , mask )"		5088119	1					
ANR	5088129	Callee	gs_default_same_font		5088119	0					
ANR	5088130	Identifier	gs_default_same_font		5088119	0					
ANR	5088131	ArgumentList	font		5088119	1					
ANR	5088132	Argument	font		5088119	0					
ANR	5088133	Identifier	font		5088119	0					
ANR	5088134	Argument	ofont		5088119	1					
ANR	5088135	Identifier	ofont		5088119	0					
ANR	5088136	Argument	mask		5088119	2					
ANR	5088137	Identifier	mask		5088119	0					
ANR	5088138	IfStatement	if ( ! same )		5088119	1					
ANR	5088139	Condition	! same	962:8:32452:32456	5088119	0	True				
ANR	5088140	UnaryOperationExpression	! same		5088119	0					
ANR	5088141	UnaryOperator	!		5088119	0					
ANR	5088142	Identifier	same		5088119	1					
ANR	5088143	CompoundStatement		4:15:73:73	5088119	1					
ANR	5088144	Statement	const	963:8:32469:32473	5088119	0	True				
ANR	5088145	Statement	gs_font_base	963:14:32475:32486	5088119	1	True				
ANR	5088146	Statement	*	963:27:32488:32488	5088119	2	True				
ANR	5088147	Statement	const	963:28:32489:32493	5088119	3	True				
ANR	5088148	ExpressionStatement	bfont = ( const gs_font_base * ) font	963:34:32495:32529	5088119	4	True				
ANR	5088149	AssignmentExpression	bfont = ( const gs_font_base * ) font		5088119	0		=			
ANR	5088150	Identifier	bfont		5088119	0					
ANR	5088151	CastExpression	( const gs_font_base * ) font		5088119	1					
ANR	5088152	CastTarget	const gs_font_base *		5088119	0					
ANR	5088153	Identifier	font		5088119	1					
ANR	5088154	Statement	const	964:8:32539:32543	5088119	5	True				
ANR	5088155	Statement	gs_font_base	964:14:32545:32556	5088119	6	True				
ANR	5088156	Statement	*	964:27:32558:32558	5088119	7	True				
ANR	5088157	Statement	const	964:28:32559:32563	5088119	8	True				
ANR	5088158	ExpressionStatement	obfont = ( const gs_font_base * ) ofont	964:34:32565:32601	5088119	9	True				
ANR	5088159	AssignmentExpression	obfont = ( const gs_font_base * ) ofont		5088119	0		=			
ANR	5088160	Identifier	obfont		5088119	0					
ANR	5088161	CastExpression	( const gs_font_base * ) ofont		5088119	1					
ANR	5088162	CastTarget	const gs_font_base *		5088119	0					
ANR	5088163	Identifier	ofont		5088119	1					
ANR	5088164	IfStatement	if ( mask & FONT_SAME_ENCODING )		5088119	10					
ANR	5088165	Condition	mask & FONT_SAME_ENCODING	966:12:32616:32640	5088119	0	True				
ANR	5088166	BitAndExpression	mask & FONT_SAME_ENCODING		5088119	0		&			
ANR	5088167	Identifier	mask		5088119	0					
ANR	5088168	Identifier	FONT_SAME_ENCODING		5088119	1					
ANR	5088169	CompoundStatement		8:39:257:257	5088119	1					
ANR	5088170	IfStatement	if ( bfont -> encoding_index != ENCODING_INDEX_UNKNOWN || obfont -> encoding_index != ENCODING_INDEX_UNKNOWN )		5088119	0					
ANR	5088171	Condition	bfont -> encoding_index != ENCODING_INDEX_UNKNOWN || obfont -> encoding_index != ENCODING_INDEX_UNKNOWN	967:16:32661:32775	5088119	0	True				
ANR	5088172	OrExpression	bfont -> encoding_index != ENCODING_INDEX_UNKNOWN || obfont -> encoding_index != ENCODING_INDEX_UNKNOWN		5088119	0		||			
ANR	5088173	EqualityExpression	bfont -> encoding_index != ENCODING_INDEX_UNKNOWN		5088119	0		!=			
ANR	5088174	PtrMemberAccess	bfont -> encoding_index		5088119	0					
ANR	5088175	Identifier	bfont		5088119	0					
ANR	5088176	Identifier	encoding_index		5088119	1					
ANR	5088177	Identifier	ENCODING_INDEX_UNKNOWN		5088119	1					
ANR	5088178	EqualityExpression	obfont -> encoding_index != ENCODING_INDEX_UNKNOWN		5088119	1		!=			
ANR	5088179	PtrMemberAccess	obfont -> encoding_index		5088119	0					
ANR	5088180	Identifier	obfont		5088119	0					
ANR	5088181	Identifier	encoding_index		5088119	1					
ANR	5088182	Identifier	ENCODING_INDEX_UNKNOWN		5088119	1					
ANR	5088183	CompoundStatement		11:18:409:409	5088119	1					
ANR	5088184	IfStatement	if ( bfont -> encoding_index == obfont -> encoding_index )		5088119	0					
ANR	5088185	Condition	bfont -> encoding_index == obfont -> encoding_index	970:20:32817:32863	5088119	0	True				
ANR	5088186	EqualityExpression	bfont -> encoding_index == obfont -> encoding_index		5088119	0		==			
ANR	5088187	PtrMemberAccess	bfont -> encoding_index		5088119	0					
ANR	5088188	Identifier	bfont		5088119	0					
ANR	5088189	Identifier	encoding_index		5088119	1					
ANR	5088190	PtrMemberAccess	obfont -> encoding_index		5088119	1					
ANR	5088191	Identifier	obfont		5088119	0					
ANR	5088192	Identifier	encoding_index		5088119	1					
ANR	5088193	ExpressionStatement	same |= FONT_SAME_ENCODING	971:20:32886:32912	5088119	1	True				
ANR	5088194	AssignmentExpression	same |= FONT_SAME_ENCODING		5088119	0		|=			
ANR	5088195	Identifier	same		5088119	0					
ANR	5088196	Identifier	FONT_SAME_ENCODING		5088119	1					
ANR	5088197	ReturnStatement	return same ;	975:4:32948:32959	5088119	2	True				
ANR	5088198	Identifier	same		5088119	0					
ANR	5088199	ReturnType	int		5088119	1					
ANR	5088200	Identifier	gs_base_same_font		5088119	2					
ANR	5088201	ParameterList	"const gs_font * font , const gs_font * ofont , int mask"		5088119	3					
ANR	5088202	Parameter	const gs_font * font	958:18:32332:32350	5088119	0	True				
ANR	5088203	ParameterType	const gs_font *		5088119	0					
ANR	5088204	Identifier	font		5088119	1					
ANR	5088205	Parameter	const gs_font * ofont	958:39:32353:32372	5088119	1	True				
ANR	5088206	ParameterType	const gs_font *		5088119	0					
ANR	5088207	Identifier	ofont		5088119	1					
ANR	5088208	Parameter	int mask	958:61:32375:32382	5088119	2	True				
ANR	5088209	ParameterType	int		5088119	0					
ANR	5088210	Identifier	mask		5088119	1					
ANR	5088211	CFGEntryNode	ENTRY		5088119		True				
ANR	5088212	CFGExitNode	EXIT		5088119		True				
ANR	5088213	Symbol	bfont		5088119						
ANR	5088214	Symbol	* bfont		5088119						
ANR	5088215	Symbol	gs_default_same_font		5088119						
ANR	5088216	Symbol	* obfont		5088119						
ANR	5088217	Symbol	ofont		5088119						
ANR	5088218	Symbol	same		5088119						
ANR	5088219	Symbol	bfont -> encoding_index		5088119						
ANR	5088220	Symbol	obfont -> encoding_index		5088119						
ANR	5088221	Symbol	obfont		5088119						
ANR	5088222	Symbol	font		5088119						
ANR	5088223	Symbol	mask		5088119						
ANR	5088224	Symbol	FONT_SAME_ENCODING		5088119						
ANR	5088225	Symbol	ENCODING_INDEX_UNKNOWN		5088119						
ANR	5088226	Function	gs_font_glyph_is_notdef	984:0:33151:33522							
ANR	5088227	FunctionDef	"gs_font_glyph_is_notdef (gs_font_base * bfont , gs_glyph glyph)"		5088226	0					
ANR	5088228	CompoundStatement		986:0:33217:33522	5088226	0					
ANR	5088229	IdentifierDeclStatement	gs_const_string gnstr ;	987:4:33223:33244	5088226	0	True				
ANR	5088230	IdentifierDecl	gnstr		5088226	0					
ANR	5088231	IdentifierDeclType	gs_const_string		5088226	0					
ANR	5088232	Identifier	gnstr		5088226	1					
ANR	5088233	IfStatement	if ( glyph == GS_NO_GLYPH )		5088226	1					
ANR	5088234	Condition	glyph == GS_NO_GLYPH	989:8:33255:33274	5088226	0	True				
ANR	5088235	EqualityExpression	glyph == GS_NO_GLYPH		5088226	0		==			
ANR	5088236	Identifier	glyph		5088226	0					
ANR	5088237	Identifier	GS_NO_GLYPH		5088226	1					
ANR	5088238	ReturnStatement	return false ;	990:8:33285:33297	5088226	1	True				
ANR	5088239	Identifier	false		5088226	0					
ANR	5088240	IfStatement	if ( glyph >= GS_MIN_CID_GLYPH )		5088226	2					
ANR	5088241	Condition	glyph >= GS_MIN_CID_GLYPH	991:8:33307:33331	5088226	0	True				
ANR	5088242	RelationalExpression	glyph >= GS_MIN_CID_GLYPH		5088226	0		>=			
ANR	5088243	Identifier	glyph		5088226	0					
ANR	5088244	Identifier	GS_MIN_CID_GLYPH		5088226	1					
ANR	5088245	ReturnStatement	return ( glyph == GS_MIN_CID_GLYPH ) ;	992:8:33342:33376	5088226	1	True				
ANR	5088246	EqualityExpression	glyph == GS_MIN_CID_GLYPH		5088226	0		==			
ANR	5088247	Identifier	glyph		5088226	0					
ANR	5088248	Identifier	GS_MIN_CID_GLYPH		5088226	1					
ANR	5088249	ReturnStatement	"return ( bfont -> procs . glyph_name ( ( gs_font * ) bfont , glyph , & gnstr ) >= 0 && gnstr . size == 7 && ! memcmp ( gnstr . data , "".notdef"" , 7 ) ) ;"	993:4:33382:33520	5088226	3	True				
ANR	5088250	AndExpression	"bfont -> procs . glyph_name ( ( gs_font * ) bfont , glyph , & gnstr ) >= 0 && gnstr . size == 7 && ! memcmp ( gnstr . data , "".notdef"" , 7 )"		5088226	0		&&			
ANR	5088251	RelationalExpression	"bfont -> procs . glyph_name ( ( gs_font * ) bfont , glyph , & gnstr ) >= 0"		5088226	0		>=			
ANR	5088252	CallExpression	"bfont -> procs . glyph_name ( ( gs_font * ) bfont , glyph , & gnstr )"		5088226	0					
ANR	5088253	Callee	bfont -> procs . glyph_name		5088226	0					
ANR	5088254	MemberAccess	bfont -> procs . glyph_name		5088226	0					
ANR	5088255	PtrMemberAccess	bfont -> procs		5088226	0					
ANR	5088256	Identifier	bfont		5088226	0					
ANR	5088257	Identifier	procs		5088226	1					
ANR	5088258	Identifier	glyph_name		5088226	1					
ANR	5088259	ArgumentList	( gs_font * ) bfont		5088226	1					
ANR	5088260	Argument	( gs_font * ) bfont		5088226	0					
ANR	5088261	CastExpression	( gs_font * ) bfont		5088226	0					
ANR	5088262	CastTarget	gs_font *		5088226	0					
ANR	5088263	Identifier	bfont		5088226	1					
ANR	5088264	Argument	glyph		5088226	1					
ANR	5088265	Identifier	glyph		5088226	0					
ANR	5088266	Argument	& gnstr		5088226	2					
ANR	5088267	UnaryOperationExpression	& gnstr		5088226	0					
ANR	5088268	UnaryOperator	&		5088226	0					
ANR	5088269	Identifier	gnstr		5088226	1					
ANR	5088270	PrimaryExpression	0		5088226	1					
ANR	5088271	AndExpression	"gnstr . size == 7 && ! memcmp ( gnstr . data , "".notdef"" , 7 )"		5088226	1		&&			
ANR	5088272	EqualityExpression	gnstr . size == 7		5088226	0		==			
ANR	5088273	MemberAccess	gnstr . size		5088226	0					
ANR	5088274	Identifier	gnstr		5088226	0					
ANR	5088275	Identifier	size		5088226	1					
ANR	5088276	PrimaryExpression	7		5088226	1					
ANR	5088277	UnaryOperationExpression	"! memcmp ( gnstr . data , "".notdef"" , 7 )"		5088226	1					
ANR	5088278	UnaryOperator	!		5088226	0					
ANR	5088279	CallExpression	"memcmp ( gnstr . data , "".notdef"" , 7 )"		5088226	1					
ANR	5088280	Callee	memcmp		5088226	0					
ANR	5088281	Identifier	memcmp		5088226	0					
ANR	5088282	ArgumentList	gnstr . data		5088226	1					
ANR	5088283	Argument	gnstr . data		5088226	0					
ANR	5088284	MemberAccess	gnstr . data		5088226	0					
ANR	5088285	Identifier	gnstr		5088226	0					
ANR	5088286	Identifier	data		5088226	1					
ANR	5088287	Argument	""".notdef"""		5088226	1					
ANR	5088288	PrimaryExpression	""".notdef"""		5088226	0					
ANR	5088289	Argument	7		5088226	2					
ANR	5088290	PrimaryExpression	7		5088226	0					
ANR	5088291	ReturnType	bool		5088226	1					
ANR	5088292	Identifier	gs_font_glyph_is_notdef		5088226	2					
ANR	5088293	ParameterList	"gs_font_base * bfont , gs_glyph glyph"		5088226	3					
ANR	5088294	Parameter	gs_font_base * bfont	985:24:33180:33198	5088226	0	True				
ANR	5088295	ParameterType	gs_font_base *		5088226	0					
ANR	5088296	Identifier	bfont		5088226	1					
ANR	5088297	Parameter	gs_glyph glyph	985:45:33201:33214	5088226	1	True				
ANR	5088298	ParameterType	gs_glyph		5088226	0					
ANR	5088299	Identifier	glyph		5088226	1					
ANR	5088300	CFGEntryNode	ENTRY		5088226		True				
ANR	5088301	CFGExitNode	EXIT		5088226		True				
ANR	5088302	Symbol	bfont		5088226						
ANR	5088303	Symbol	false		5088226						
ANR	5088304	Symbol	gnstr . size		5088226						
ANR	5088305	Symbol	gnstr . data		5088226						
ANR	5088306	Symbol	* bfont		5088226						
ANR	5088307	Symbol	bfont -> procs . glyph_name		5088226						
ANR	5088308	Symbol	glyph		5088226						
ANR	5088309	Symbol	GS_NO_GLYPH		5088226						
ANR	5088310	Symbol	bfont -> procs		5088226						
ANR	5088311	Symbol	memcmp		5088226						
ANR	5088312	Symbol	gnstr		5088226						
ANR	5088313	Symbol	& gnstr		5088226						
ANR	5088314	Symbol	GS_MIN_CID_GLYPH		5088226						
ANR	5088315	Function	gs_no_encode_char	998:0:33566:33678							
ANR	5088316	FunctionDef	"gs_no_encode_char (gs_font * pfont , gs_char chr , gs_glyph_space_t glyph_space)"		5088315	0					
ANR	5088317	CompoundStatement		1000:0:33652:33678	5088315	0					
ANR	5088318	ReturnStatement	return GS_NO_GLYPH ;	1001:4:33658:33676	5088315	0	True				
ANR	5088319	Identifier	GS_NO_GLYPH		5088315	0					
ANR	5088320	ReturnType	gs_glyph		5088315	1					
ANR	5088321	Identifier	gs_no_encode_char		5088315	2					
ANR	5088322	ParameterList	"gs_font * pfont , gs_char chr , gs_glyph_space_t glyph_space"		5088315	3					
ANR	5088323	Parameter	gs_font * pfont	999:18:33593:33606	5088315	0	True				
ANR	5088324	ParameterType	gs_font *		5088315	0					
ANR	5088325	Identifier	pfont		5088315	1					
ANR	5088326	Parameter	gs_char chr	999:34:33609:33619	5088315	1	True				
ANR	5088327	ParameterType	gs_char		5088315	0					
ANR	5088328	Identifier	chr		5088315	1					
ANR	5088329	Parameter	gs_glyph_space_t glyph_space	999:47:33622:33649	5088315	2	True				
ANR	5088330	ParameterType	gs_glyph_space_t		5088315	0					
ANR	5088331	Identifier	glyph_space		5088315	1					
ANR	5088332	CFGEntryNode	ENTRY		5088315		True				
ANR	5088333	CFGExitNode	EXIT		5088315		True				
ANR	5088334	Symbol	GS_NO_GLYPH		5088315						
ANR	5088335	Symbol	pfont		5088315						
ANR	5088336	Symbol	glyph_space		5088315						
ANR	5088337	Symbol	chr		5088315						
ANR	5088338	Function	gs_no_decode_glyph	1005:0:33718:33856							
ANR	5088339	FunctionDef	"gs_no_decode_glyph (gs_font * pfont , gs_glyph glyph , int ch , ushort * unicode_return , unsigned int length)"		5088338	0					
ANR	5088340	CompoundStatement		1007:0:33826:33856	5088338	0					
ANR	5088341	ReturnStatement	return ( int ) GS_NO_CHAR ;	1008:4:33832:33854	5088338	0	True				
ANR	5088342	CastExpression	( int ) GS_NO_CHAR		5088338	0					
ANR	5088343	CastTarget	int		5088338	0					
ANR	5088344	Identifier	GS_NO_CHAR		5088338	1					
ANR	5088345	ReturnType	int		5088338	1					
ANR	5088346	Identifier	gs_no_decode_glyph		5088338	2					
ANR	5088347	ParameterList	"gs_font * pfont , gs_glyph glyph , int ch , ushort * unicode_return , unsigned int length"		5088338	3					
ANR	5088348	Parameter	gs_font * pfont	1006:19:33741:33754	5088338	0	True				
ANR	5088349	ParameterType	gs_font *		5088338	0					
ANR	5088350	Identifier	pfont		5088338	1					
ANR	5088351	Parameter	gs_glyph glyph	1006:35:33757:33770	5088338	1	True				
ANR	5088352	ParameterType	gs_glyph		5088338	0					
ANR	5088353	Identifier	glyph		5088338	1					
ANR	5088354	Parameter	int ch	1006:51:33773:33778	5088338	2	True				
ANR	5088355	ParameterType	int		5088338	0					
ANR	5088356	Identifier	ch		5088338	1					
ANR	5088357	Parameter	ushort * unicode_return	1006:59:33781:33802	5088338	3	True				
ANR	5088358	ParameterType	ushort *		5088338	0					
ANR	5088359	Identifier	unicode_return		5088338	1					
ANR	5088360	Parameter	unsigned int length	1006:83:33805:33823	5088338	4	True				
ANR	5088361	ParameterType	unsigned int		5088338	0					
ANR	5088362	Identifier	length		5088338	1					
ANR	5088363	CFGEntryNode	ENTRY		5088338		True				
ANR	5088364	CFGExitNode	EXIT		5088338		True				
ANR	5088365	Symbol	glyph		5088338						
ANR	5088366	Symbol	unicode_return		5088338						
ANR	5088367	Symbol	pfont		5088338						
ANR	5088368	Symbol	ch		5088338						
ANR	5088369	Symbol	length		5088338						
ANR	5088370	Symbol	GS_NO_CHAR		5088338						
ANR	5088371	Function	gs_no_enumerate_glyph	1012:0:33899:34063							
ANR	5088372	FunctionDef	"gs_no_enumerate_glyph (gs_font * font , int * pindex , gs_glyph_space_t glyph_space , gs_glyph * pglyph)"		5088371	0					
ANR	5088373	CompoundStatement		1015:0:34023:34063	5088371	0					
ANR	5088374	ExpressionStatement	return_error ( gs_error_undefined )	1016:4:34029:34061	5088371	0	True				
ANR	5088375	CallExpression	return_error ( gs_error_undefined )		5088371	0					
ANR	5088376	Callee	return_error		5088371	0					
ANR	5088377	Identifier	return_error		5088371	0					
ANR	5088378	ArgumentList	gs_error_undefined		5088371	1					
ANR	5088379	Argument	gs_error_undefined		5088371	0					
ANR	5088380	Identifier	gs_error_undefined		5088371	0					
ANR	5088381	ReturnType	int		5088371	1					
ANR	5088382	Identifier	gs_no_enumerate_glyph		5088371	2					
ANR	5088383	ParameterList	"gs_font * font , int * pindex , gs_glyph_space_t glyph_space , gs_glyph * pglyph"		5088371	3					
ANR	5088384	Parameter	gs_font * font	1013:22:33925:33937	5088371	0	True				
ANR	5088385	ParameterType	gs_font *		5088371	0					
ANR	5088386	Identifier	font		5088371	1					
ANR	5088387	Parameter	int * pindex	1013:37:33940:33950	5088371	1	True				
ANR	5088388	ParameterType	int *		5088371	0					
ANR	5088389	Identifier	pindex		5088371	1					
ANR	5088390	Parameter	gs_glyph_space_t glyph_space	1013:50:33953:33980	5088371	2	True				
ANR	5088391	ParameterType	gs_glyph_space_t		5088371	0					
ANR	5088392	Identifier	glyph_space		5088371	1					
ANR	5088393	Parameter	gs_glyph * pglyph	1014:22:34005:34020	5088371	3	True				
ANR	5088394	ParameterType	gs_glyph *		5088371	0					
ANR	5088395	Identifier	pglyph		5088371	1					
ANR	5088396	CFGEntryNode	ENTRY		5088371		True				
ANR	5088397	CFGExitNode	EXIT		5088371		True				
ANR	5088398	Symbol	pglyph		5088371						
ANR	5088399	Symbol	gs_error_undefined		5088371						
ANR	5088400	Symbol	glyph_space		5088371						
ANR	5088401	Symbol	pindex		5088371						
ANR	5088402	Symbol	font		5088371						
ANR	5088403	Function	gs_default_glyph_info	1020:0:34101:36800							
ANR	5088404	FunctionDef	"gs_default_glyph_info (gs_font * font , gs_glyph glyph , const gs_matrix * pmat , int members , gs_glyph_info_t * info)"		5088403	0					
ANR	5088405	CompoundStatement		1023:0:34239:36800	5088403	0					
ANR	5088406	IdentifierDeclStatement	gx_path path ;	1024:4:34296:34308	5088403	0	True				
ANR	5088407	IdentifierDecl	path		5088403	0					
ANR	5088408	IdentifierDeclType	gx_path		5088403	0					
ANR	5088409	Identifier	path		5088403	1					
ANR	5088410	IdentifierDeclStatement	int returned = 0 ;	1025:4:34314:34330	5088403	1	True				
ANR	5088411	IdentifierDecl	returned = 0		5088403	0					
ANR	5088412	IdentifierDeclType	int		5088403	0					
ANR	5088413	Identifier	returned		5088403	1					
ANR	5088414	AssignmentExpression	returned = 0		5088403	2		=			
ANR	5088415	Identifier	returned		5088403	0					
ANR	5088416	PrimaryExpression	0		5088403	1					
ANR	5088417	IdentifierDeclStatement	int code ;	1026:4:34336:34344	5088403	2	True				
ANR	5088418	IdentifierDecl	code		5088403	0					
ANR	5088419	IdentifierDeclType	int		5088403	0					
ANR	5088420	Identifier	code		5088403	1					
ANR	5088421	IdentifierDeclStatement	int wmode = ( ( members & GLYPH_INFO_WIDTH1 ) != 0 ) ;	1027:4:34350:34398	5088403	3	True				
ANR	5088422	IdentifierDecl	wmode = ( ( members & GLYPH_INFO_WIDTH1 ) != 0 )		5088403	0					
ANR	5088423	IdentifierDeclType	int		5088403	0					
ANR	5088424	Identifier	wmode		5088403	1					
ANR	5088425	AssignmentExpression	wmode = ( ( members & GLYPH_INFO_WIDTH1 ) != 0 )		5088403	2		=			
ANR	5088426	Identifier	wmode		5088403	0					
ANR	5088427	EqualityExpression	( members & GLYPH_INFO_WIDTH1 ) != 0		5088403	1		!=			
ANR	5088428	BitAndExpression	members & GLYPH_INFO_WIDTH1		5088403	0		&			
ANR	5088429	Identifier	members		5088403	0					
ANR	5088430	Identifier	GLYPH_INFO_WIDTH1		5088403	1					
ANR	5088431	PrimaryExpression	0		5088403	1					
ANR	5088432	IdentifierDeclStatement	"double sbw [ 4 ] = { 0 , 0 , 0 , 0 } ;"	1028:4:34404:34432	5088403	4	True				
ANR	5088433	IdentifierDecl	"sbw [ 4 ] = { 0 , 0 , 0 , 0 }"		5088403	0					
ANR	5088434	IdentifierDeclType	double [ 4 ]		5088403	0					
ANR	5088435	Identifier	sbw		5088403	1					
ANR	5088436	PrimaryExpression	4		5088403	2					
ANR	5088437	AssignmentExpression	"sbw [ 4 ] = { 0 , 0 , 0 , 0 }"		5088403	3		=			
ANR	5088438	Identifier	sbw		5088403	0					
ANR	5088439	InitializerList	0		5088403	1					
ANR	5088440	PrimaryExpression	0		5088403	0					
ANR	5088441	PrimaryExpression	0		5088403	1					
ANR	5088442	PrimaryExpression	0		5088403	2					
ANR	5088443	PrimaryExpression	0		5088403	3					
ANR	5088444	IdentifierDeclStatement	bool charstrings_font = ( font -> FontType == ft_encrypted || font -> FontType == ft_encrypted2 || font -> FontType == ft_CID_encrypted ) ;	1030:4:34514:34701	5088403	5	True				
ANR	5088445	IdentifierDecl	charstrings_font = ( font -> FontType == ft_encrypted || font -> FontType == ft_encrypted2 || font -> FontType == ft_CID_encrypted )		5088403	0					
ANR	5088446	IdentifierDeclType	bool		5088403	0					
ANR	5088447	Identifier	charstrings_font		5088403	1					
ANR	5088448	AssignmentExpression	charstrings_font = ( font -> FontType == ft_encrypted || font -> FontType == ft_encrypted2 || font -> FontType == ft_CID_encrypted )		5088403	2		=			
ANR	5088449	Identifier	charstrings_font		5088403	0					
ANR	5088450	OrExpression	font -> FontType == ft_encrypted || font -> FontType == ft_encrypted2 || font -> FontType == ft_CID_encrypted		5088403	1		||			
ANR	5088451	EqualityExpression	font -> FontType == ft_encrypted		5088403	0		==			
ANR	5088452	PtrMemberAccess	font -> FontType		5088403	0					
ANR	5088453	Identifier	font		5088403	0					
ANR	5088454	Identifier	FontType		5088403	1					
ANR	5088455	Identifier	ft_encrypted		5088403	1					
ANR	5088456	OrExpression	font -> FontType == ft_encrypted2 || font -> FontType == ft_CID_encrypted		5088403	1		||			
ANR	5088457	EqualityExpression	font -> FontType == ft_encrypted2		5088403	0		==			
ANR	5088458	PtrMemberAccess	font -> FontType		5088403	0					
ANR	5088459	Identifier	font		5088403	0					
ANR	5088460	Identifier	FontType		5088403	1					
ANR	5088461	Identifier	ft_encrypted2		5088403	1					
ANR	5088462	EqualityExpression	font -> FontType == ft_CID_encrypted		5088403	1		==			
ANR	5088463	PtrMemberAccess	font -> FontType		5088403	0					
ANR	5088464	Identifier	font		5088403	0					
ANR	5088465	Identifier	FontType		5088403	1					
ANR	5088466	Identifier	ft_CID_encrypted		5088403	1					
ANR	5088467	ExpressionStatement	gx_path_init_bbox_accumulator ( & path )	1034:4:34708:34744	5088403	6	True				
ANR	5088468	CallExpression	gx_path_init_bbox_accumulator ( & path )		5088403	0					
ANR	5088469	Callee	gx_path_init_bbox_accumulator		5088403	0					
ANR	5088470	Identifier	gx_path_init_bbox_accumulator		5088403	0					
ANR	5088471	ArgumentList	& path		5088403	1					
ANR	5088472	Argument	& path		5088403	0					
ANR	5088473	UnaryOperationExpression	& path		5088403	0					
ANR	5088474	UnaryOperator	&		5088403	0					
ANR	5088475	Identifier	path		5088403	1					
ANR	5088476	ExpressionStatement	"code = gx_path_add_point ( & path , fixed_0 , fixed_0 )"	1035:4:34750:34799	5088403	7	True				
ANR	5088477	AssignmentExpression	"code = gx_path_add_point ( & path , fixed_0 , fixed_0 )"		5088403	0		=			
ANR	5088478	Identifier	code		5088403	0					
ANR	5088479	CallExpression	"gx_path_add_point ( & path , fixed_0 , fixed_0 )"		5088403	1					
ANR	5088480	Callee	gx_path_add_point		5088403	0					
ANR	5088481	Identifier	gx_path_add_point		5088403	0					
ANR	5088482	ArgumentList	& path		5088403	1					
ANR	5088483	Argument	& path		5088403	0					
ANR	5088484	UnaryOperationExpression	& path		5088403	0					
ANR	5088485	UnaryOperator	&		5088403	0					
ANR	5088486	Identifier	path		5088403	1					
ANR	5088487	Argument	fixed_0		5088403	1					
ANR	5088488	Identifier	fixed_0		5088403	0					
ANR	5088489	Argument	fixed_0		5088403	2					
ANR	5088490	Identifier	fixed_0		5088403	0					
ANR	5088491	IfStatement	if ( code < 0 )		5088403	8					
ANR	5088492	Condition	code < 0	1036:8:34809:34816	5088403	0	True				
ANR	5088493	RelationalExpression	code < 0		5088403	0		<			
ANR	5088494	Identifier	code		5088403	0					
ANR	5088495	PrimaryExpression	0		5088403	1					
ANR	5088496	GotoStatement	goto out ;	1037:8:34827:34835	5088403	1	True				
ANR	5088497	Identifier	out		5088403	0					
ANR	5088498	ExpressionStatement	"code = font -> procs . glyph_outline ( font , wmode , glyph , pmat , & path , sbw )"	1038:4:34841:34911	5088403	9	True				
ANR	5088499	AssignmentExpression	"code = font -> procs . glyph_outline ( font , wmode , glyph , pmat , & path , sbw )"		5088403	0		=			
ANR	5088500	Identifier	code		5088403	0					
ANR	5088501	CallExpression	"font -> procs . glyph_outline ( font , wmode , glyph , pmat , & path , sbw )"		5088403	1					
ANR	5088502	Callee	font -> procs . glyph_outline		5088403	0					
ANR	5088503	MemberAccess	font -> procs . glyph_outline		5088403	0					
ANR	5088504	PtrMemberAccess	font -> procs		5088403	0					
ANR	5088505	Identifier	font		5088403	0					
ANR	5088506	Identifier	procs		5088403	1					
ANR	5088507	Identifier	glyph_outline		5088403	1					
ANR	5088508	ArgumentList	font		5088403	1					
ANR	5088509	Argument	font		5088403	0					
ANR	5088510	Identifier	font		5088403	0					
ANR	5088511	Argument	wmode		5088403	1					
ANR	5088512	Identifier	wmode		5088403	0					
ANR	5088513	Argument	glyph		5088403	2					
ANR	5088514	Identifier	glyph		5088403	0					
ANR	5088515	Argument	pmat		5088403	3					
ANR	5088516	Identifier	pmat		5088403	0					
ANR	5088517	Argument	& path		5088403	4					
ANR	5088518	UnaryOperationExpression	& path		5088403	0					
ANR	5088519	UnaryOperator	&		5088403	0					
ANR	5088520	Identifier	path		5088403	1					
ANR	5088521	Argument	sbw		5088403	5					
ANR	5088522	Identifier	sbw		5088403	0					
ANR	5088523	IfStatement	if ( code < 0 )		5088403	10					
ANR	5088524	Condition	code < 0	1039:8:34921:34928	5088403	0	True				
ANR	5088525	RelationalExpression	code < 0		5088403	0		<			
ANR	5088526	Identifier	code		5088403	0					
ANR	5088527	PrimaryExpression	0		5088403	1					
ANR	5088528	GotoStatement	goto out ;	1040:8:34939:34947	5088403	1	True				
ANR	5088529	Identifier	out		5088403	0					
ANR	5088530	IfStatement	if ( members & GLYPH_INFO_WIDTHS )		5088403	11					
ANR	5088531	Condition	members & GLYPH_INFO_WIDTHS	1041:8:34957:34983	5088403	0	True				
ANR	5088532	BitAndExpression	members & GLYPH_INFO_WIDTHS		5088403	0		&			
ANR	5088533	Identifier	members		5088403	0					
ANR	5088534	Identifier	GLYPH_INFO_WIDTHS		5088403	1					
ANR	5088535	CompoundStatement		21:8:789:827	5088403	1					
ANR	5088536	IdentifierDeclStatement	int wmode = font -> WMode ;	1042:8:34996:35019	5088403	0	True				
ANR	5088537	IdentifierDecl	wmode = font -> WMode		5088403	0					
ANR	5088538	IdentifierDeclType	int		5088403	0					
ANR	5088539	Identifier	wmode		5088403	1					
ANR	5088540	AssignmentExpression	wmode = font -> WMode		5088403	2		=			
ANR	5088541	Identifier	wmode		5088403	0					
ANR	5088542	PtrMemberAccess	font -> WMode		5088403	1					
ANR	5088543	Identifier	font		5088403	0					
ANR	5088544	Identifier	WMode		5088403	1					
ANR	5088545	IdentifierDeclStatement	int wmask = GLYPH_INFO_WIDTH0 << wmode ;	1043:8:35029:35067	5088403	1	True				
ANR	5088546	IdentifierDecl	wmask = GLYPH_INFO_WIDTH0 << wmode		5088403	0					
ANR	5088547	IdentifierDeclType	int		5088403	0					
ANR	5088548	Identifier	wmask		5088403	1					
ANR	5088549	AssignmentExpression	wmask = GLYPH_INFO_WIDTH0 << wmode		5088403	2		=			
ANR	5088550	Identifier	wmask		5088403	0					
ANR	5088551	ShiftExpression	GLYPH_INFO_WIDTH0 << wmode		5088403	1		<<			
ANR	5088552	Identifier	GLYPH_INFO_WIDTH0		5088403	0					
ANR	5088553	Identifier	wmode		5088403	1					
ANR	5088554	IfStatement	if ( members & wmask )		5088403	2					
ANR	5088555	Condition	members & wmask	1045:12:35082:35096	5088403	0	True				
ANR	5088556	BitAndExpression	members & wmask		5088403	0		&			
ANR	5088557	Identifier	members		5088403	0					
ANR	5088558	Identifier	wmask		5088403	1					
ANR	5088559	CompoundStatement		24:12:873:890	5088403	1					
ANR	5088560	IdentifierDeclStatement	gs_fixed_point pt ;	1046:12:35113:35130	5088403	0	True				
ANR	5088561	IdentifierDecl	pt		5088403	0					
ANR	5088562	IdentifierDeclType	gs_fixed_point		5088403	0					
ANR	5088563	Identifier	pt		5088403	1					
ANR	5088564	ExpressionStatement	"code = gx_path_current_point ( & path , & pt )"	1048:12:35145:35185	5088403	1	True				
ANR	5088565	AssignmentExpression	"code = gx_path_current_point ( & path , & pt )"		5088403	0		=			
ANR	5088566	Identifier	code		5088403	0					
ANR	5088567	CallExpression	"gx_path_current_point ( & path , & pt )"		5088403	1					
ANR	5088568	Callee	gx_path_current_point		5088403	0					
ANR	5088569	Identifier	gx_path_current_point		5088403	0					
ANR	5088570	ArgumentList	& path		5088403	1					
ANR	5088571	Argument	& path		5088403	0					
ANR	5088572	UnaryOperationExpression	& path		5088403	0					
ANR	5088573	UnaryOperator	&		5088403	0					
ANR	5088574	Identifier	path		5088403	1					
ANR	5088575	Argument	& pt		5088403	1					
ANR	5088576	UnaryOperationExpression	& pt		5088403	0					
ANR	5088577	UnaryOperator	&		5088403	0					
ANR	5088578	Identifier	pt		5088403	1					
ANR	5088579	IfStatement	if ( code < 0 )		5088403	2					
ANR	5088580	Condition	code < 0	1049:16:35203:35210	5088403	0	True				
ANR	5088581	RelationalExpression	code < 0		5088403	0		<			
ANR	5088582	Identifier	code		5088403	0					
ANR	5088583	PrimaryExpression	0		5088403	1					
ANR	5088584	GotoStatement	goto out ;	1050:16:35229:35237	5088403	1	True				
ANR	5088585	Identifier	out		5088403	0					
ANR	5088586	ExpressionStatement	info -> width [ wmode ] . x = fixed2float ( pt . x )	1051:12:35251:35291	5088403	3	True				
ANR	5088587	AssignmentExpression	info -> width [ wmode ] . x = fixed2float ( pt . x )		5088403	0		=			
ANR	5088588	MemberAccess	info -> width [ wmode ] . x		5088403	0					
ANR	5088589	ArrayIndexing	info -> width [ wmode ]		5088403	0					
ANR	5088590	PtrMemberAccess	info -> width		5088403	0					
ANR	5088591	Identifier	info		5088403	0					
ANR	5088592	Identifier	width		5088403	1					
ANR	5088593	Identifier	wmode		5088403	1					
ANR	5088594	Identifier	x		5088403	1					
ANR	5088595	CallExpression	fixed2float ( pt . x )		5088403	1					
ANR	5088596	Callee	fixed2float		5088403	0					
ANR	5088597	Identifier	fixed2float		5088403	0					
ANR	5088598	ArgumentList	pt . x		5088403	1					
ANR	5088599	Argument	pt . x		5088403	0					
ANR	5088600	MemberAccess	pt . x		5088403	0					
ANR	5088601	Identifier	pt		5088403	0					
ANR	5088602	Identifier	x		5088403	1					
ANR	5088603	ExpressionStatement	info -> width [ wmode ] . y = fixed2float ( pt . y )	1052:12:35305:35345	5088403	4	True				
ANR	5088604	AssignmentExpression	info -> width [ wmode ] . y = fixed2float ( pt . y )		5088403	0		=			
ANR	5088605	MemberAccess	info -> width [ wmode ] . y		5088403	0					
ANR	5088606	ArrayIndexing	info -> width [ wmode ]		5088403	0					
ANR	5088607	PtrMemberAccess	info -> width		5088403	0					
ANR	5088608	Identifier	info		5088403	0					
ANR	5088609	Identifier	width		5088403	1					
ANR	5088610	Identifier	wmode		5088403	1					
ANR	5088611	Identifier	y		5088403	1					
ANR	5088612	CallExpression	fixed2float ( pt . y )		5088403	1					
ANR	5088613	Callee	fixed2float		5088403	0					
ANR	5088614	Identifier	fixed2float		5088403	0					
ANR	5088615	ArgumentList	pt . y		5088403	1					
ANR	5088616	Argument	pt . y		5088403	0					
ANR	5088617	MemberAccess	pt . y		5088403	0					
ANR	5088618	Identifier	pt		5088403	0					
ANR	5088619	Identifier	y		5088403	1					
ANR	5088620	ExpressionStatement	returned |= wmask	1053:12:35359:35376	5088403	5	True				
ANR	5088621	AssignmentExpression	returned |= wmask		5088403	0		|=			
ANR	5088622	Identifier	returned		5088403	0					
ANR	5088623	Identifier	wmask		5088403	1					
ANR	5088624	IfStatement	if ( members & GLYPH_INFO_BBOX )		5088403	12					
ANR	5088625	Condition	members & GLYPH_INFO_BBOX	1056:8:35402:35426	5088403	0	True				
ANR	5088626	BitAndExpression	members & GLYPH_INFO_BBOX		5088403	0		&			
ANR	5088627	Identifier	members		5088403	0					
ANR	5088628	Identifier	GLYPH_INFO_BBOX		5088403	1					
ANR	5088629	CompoundStatement		35:8:1199:1217	5088403	1					
ANR	5088630	IdentifierDeclStatement	gs_fixed_rect bbox ;	1057:8:35439:35457	5088403	0	True				
ANR	5088631	IdentifierDecl	bbox		5088403	0					
ANR	5088632	IdentifierDeclType	gs_fixed_rect		5088403	0					
ANR	5088633	Identifier	bbox		5088403	1					
ANR	5088634	ExpressionStatement	"code = gx_path_bbox ( & path , & bbox )"	1059:8:35468:35501	5088403	1	True				
ANR	5088635	AssignmentExpression	"code = gx_path_bbox ( & path , & bbox )"		5088403	0		=			
ANR	5088636	Identifier	code		5088403	0					
ANR	5088637	CallExpression	"gx_path_bbox ( & path , & bbox )"		5088403	1					
ANR	5088638	Callee	gx_path_bbox		5088403	0					
ANR	5088639	Identifier	gx_path_bbox		5088403	0					
ANR	5088640	ArgumentList	& path		5088403	1					
ANR	5088641	Argument	& path		5088403	0					
ANR	5088642	UnaryOperationExpression	& path		5088403	0					
ANR	5088643	UnaryOperator	&		5088403	0					
ANR	5088644	Identifier	path		5088403	1					
ANR	5088645	Argument	& bbox		5088403	1					
ANR	5088646	UnaryOperationExpression	& bbox		5088403	0					
ANR	5088647	UnaryOperator	&		5088403	0					
ANR	5088648	Identifier	bbox		5088403	1					
ANR	5088649	IfStatement	if ( code < 0 )		5088403	2					
ANR	5088650	Condition	code < 0	1060:12:35515:35522	5088403	0	True				
ANR	5088651	RelationalExpression	code < 0		5088403	0		<			
ANR	5088652	Identifier	code		5088403	0					
ANR	5088653	PrimaryExpression	0		5088403	1					
ANR	5088654	GotoStatement	goto out ;	1061:12:35537:35545	5088403	1	True				
ANR	5088655	Identifier	out		5088403	0					
ANR	5088656	ExpressionStatement	info -> bbox . p . x = fixed2float ( bbox . p . x )	1062:8:35555:35593	5088403	3	True				
ANR	5088657	AssignmentExpression	info -> bbox . p . x = fixed2float ( bbox . p . x )		5088403	0		=			
ANR	5088658	MemberAccess	info -> bbox . p . x		5088403	0					
ANR	5088659	MemberAccess	info -> bbox . p		5088403	0					
ANR	5088660	PtrMemberAccess	info -> bbox		5088403	0					
ANR	5088661	Identifier	info		5088403	0					
ANR	5088662	Identifier	bbox		5088403	1					
ANR	5088663	Identifier	p		5088403	1					
ANR	5088664	Identifier	x		5088403	1					
ANR	5088665	CallExpression	fixed2float ( bbox . p . x )		5088403	1					
ANR	5088666	Callee	fixed2float		5088403	0					
ANR	5088667	Identifier	fixed2float		5088403	0					
ANR	5088668	ArgumentList	bbox . p . x		5088403	1					
ANR	5088669	Argument	bbox . p . x		5088403	0					
ANR	5088670	MemberAccess	bbox . p . x		5088403	0					
ANR	5088671	MemberAccess	bbox . p		5088403	0					
ANR	5088672	Identifier	bbox		5088403	0					
ANR	5088673	Identifier	p		5088403	1					
ANR	5088674	Identifier	x		5088403	1					
ANR	5088675	ExpressionStatement	info -> bbox . p . y = fixed2float ( bbox . p . y )	1063:8:35603:35641	5088403	4	True				
ANR	5088676	AssignmentExpression	info -> bbox . p . y = fixed2float ( bbox . p . y )		5088403	0		=			
ANR	5088677	MemberAccess	info -> bbox . p . y		5088403	0					
ANR	5088678	MemberAccess	info -> bbox . p		5088403	0					
ANR	5088679	PtrMemberAccess	info -> bbox		5088403	0					
ANR	5088680	Identifier	info		5088403	0					
ANR	5088681	Identifier	bbox		5088403	1					
ANR	5088682	Identifier	p		5088403	1					
ANR	5088683	Identifier	y		5088403	1					
ANR	5088684	CallExpression	fixed2float ( bbox . p . y )		5088403	1					
ANR	5088685	Callee	fixed2float		5088403	0					
ANR	5088686	Identifier	fixed2float		5088403	0					
ANR	5088687	ArgumentList	bbox . p . y		5088403	1					
ANR	5088688	Argument	bbox . p . y		5088403	0					
ANR	5088689	MemberAccess	bbox . p . y		5088403	0					
ANR	5088690	MemberAccess	bbox . p		5088403	0					
ANR	5088691	Identifier	bbox		5088403	0					
ANR	5088692	Identifier	p		5088403	1					
ANR	5088693	Identifier	y		5088403	1					
ANR	5088694	ExpressionStatement	info -> bbox . q . x = fixed2float ( bbox . q . x )	1064:8:35651:35689	5088403	5	True				
ANR	5088695	AssignmentExpression	info -> bbox . q . x = fixed2float ( bbox . q . x )		5088403	0		=			
ANR	5088696	MemberAccess	info -> bbox . q . x		5088403	0					
ANR	5088697	MemberAccess	info -> bbox . q		5088403	0					
ANR	5088698	PtrMemberAccess	info -> bbox		5088403	0					
ANR	5088699	Identifier	info		5088403	0					
ANR	5088700	Identifier	bbox		5088403	1					
ANR	5088701	Identifier	q		5088403	1					
ANR	5088702	Identifier	x		5088403	1					
ANR	5088703	CallExpression	fixed2float ( bbox . q . x )		5088403	1					
ANR	5088704	Callee	fixed2float		5088403	0					
ANR	5088705	Identifier	fixed2float		5088403	0					
ANR	5088706	ArgumentList	bbox . q . x		5088403	1					
ANR	5088707	Argument	bbox . q . x		5088403	0					
ANR	5088708	MemberAccess	bbox . q . x		5088403	0					
ANR	5088709	MemberAccess	bbox . q		5088403	0					
ANR	5088710	Identifier	bbox		5088403	0					
ANR	5088711	Identifier	q		5088403	1					
ANR	5088712	Identifier	x		5088403	1					
ANR	5088713	ExpressionStatement	info -> bbox . q . y = fixed2float ( bbox . q . y )	1065:8:35699:35737	5088403	6	True				
ANR	5088714	AssignmentExpression	info -> bbox . q . y = fixed2float ( bbox . q . y )		5088403	0		=			
ANR	5088715	MemberAccess	info -> bbox . q . y		5088403	0					
ANR	5088716	MemberAccess	info -> bbox . q		5088403	0					
ANR	5088717	PtrMemberAccess	info -> bbox		5088403	0					
ANR	5088718	Identifier	info		5088403	0					
ANR	5088719	Identifier	bbox		5088403	1					
ANR	5088720	Identifier	q		5088403	1					
ANR	5088721	Identifier	y		5088403	1					
ANR	5088722	CallExpression	fixed2float ( bbox . q . y )		5088403	1					
ANR	5088723	Callee	fixed2float		5088403	0					
ANR	5088724	Identifier	fixed2float		5088403	0					
ANR	5088725	ArgumentList	bbox . q . y		5088403	1					
ANR	5088726	Argument	bbox . q . y		5088403	0					
ANR	5088727	MemberAccess	bbox . q . y		5088403	0					
ANR	5088728	MemberAccess	bbox . q		5088403	0					
ANR	5088729	Identifier	bbox		5088403	0					
ANR	5088730	Identifier	q		5088403	1					
ANR	5088731	Identifier	y		5088403	1					
ANR	5088732	ExpressionStatement	returned |= GLYPH_INFO_BBOX	1066:8:35747:35774	5088403	7	True				
ANR	5088733	AssignmentExpression	returned |= GLYPH_INFO_BBOX		5088403	0		|=			
ANR	5088734	Identifier	returned		5088403	0					
ANR	5088735	Identifier	GLYPH_INFO_BBOX		5088403	1					
ANR	5088736	IfStatement	if ( members & ( GLYPH_INFO_WIDTH0 << wmode ) && charstrings_font )		5088403	13					
ANR	5088737	Condition	members & ( GLYPH_INFO_WIDTH0 << wmode ) && charstrings_font	1068:8:35790:35847	5088403	0	True				
ANR	5088738	AndExpression	members & ( GLYPH_INFO_WIDTH0 << wmode ) && charstrings_font		5088403	0		&&			
ANR	5088739	BitAndExpression	members & ( GLYPH_INFO_WIDTH0 << wmode )		5088403	0		&			
ANR	5088740	Identifier	members		5088403	0					
ANR	5088741	ShiftExpression	GLYPH_INFO_WIDTH0 << wmode		5088403	1		<<			
ANR	5088742	Identifier	GLYPH_INFO_WIDTH0		5088403	0					
ANR	5088743	Identifier	wmode		5088403	1					
ANR	5088744	Identifier	charstrings_font		5088403	1					
ANR	5088745	CompoundStatement		46:68:1610:1610	5088403	1					
ANR	5088746	IfStatement	if ( pmat == 0 )		5088403	0					
ANR	5088747	Condition	pmat == 0	1069:12:35864:35872	5088403	0	True				
ANR	5088748	EqualityExpression	pmat == 0		5088403	0		==			
ANR	5088749	Identifier	pmat		5088403	0					
ANR	5088750	PrimaryExpression	0		5088403	1					
ANR	5088751	CompoundStatement		47:23:1635:1635	5088403	1					
ANR	5088752	ExpressionStatement	info -> width [ wmode ] . x = sbw [ 2 ]	1070:12:35889:35918	5088403	0	True				
ANR	5088753	AssignmentExpression	info -> width [ wmode ] . x = sbw [ 2 ]		5088403	0		=			
ANR	5088754	MemberAccess	info -> width [ wmode ] . x		5088403	0					
ANR	5088755	ArrayIndexing	info -> width [ wmode ]		5088403	0					
ANR	5088756	PtrMemberAccess	info -> width		5088403	0					
ANR	5088757	Identifier	info		5088403	0					
ANR	5088758	Identifier	width		5088403	1					
ANR	5088759	Identifier	wmode		5088403	1					
ANR	5088760	Identifier	x		5088403	1					
ANR	5088761	ArrayIndexing	sbw [ 2 ]		5088403	1					
ANR	5088762	Identifier	sbw		5088403	0					
ANR	5088763	PrimaryExpression	2		5088403	1					
ANR	5088764	ExpressionStatement	info -> width [ wmode ] . y = sbw [ 3 ]	1071:12:35932:35961	5088403	1	True				
ANR	5088765	AssignmentExpression	info -> width [ wmode ] . y = sbw [ 3 ]		5088403	0		=			
ANR	5088766	MemberAccess	info -> width [ wmode ] . y		5088403	0					
ANR	5088767	ArrayIndexing	info -> width [ wmode ]		5088403	0					
ANR	5088768	PtrMemberAccess	info -> width		5088403	0					
ANR	5088769	Identifier	info		5088403	0					
ANR	5088770	Identifier	width		5088403	1					
ANR	5088771	Identifier	wmode		5088403	1					
ANR	5088772	Identifier	y		5088403	1					
ANR	5088773	ArrayIndexing	sbw [ 3 ]		5088403	1					
ANR	5088774	Identifier	sbw		5088403	0					
ANR	5088775	PrimaryExpression	3		5088403	1					
ANR	5088776	ElseStatement	else		5088403	0					
ANR	5088777	CompoundStatement		50:15:1738:1738	5088403	0					
ANR	5088778	ExpressionStatement	"code = gs_distance_transform ( sbw [ 2 ] , sbw [ 3 ] , pmat , & info -> width [ wmode ] )"	1073:12:35992:36063	5088403	0	True				
ANR	5088779	AssignmentExpression	"code = gs_distance_transform ( sbw [ 2 ] , sbw [ 3 ] , pmat , & info -> width [ wmode ] )"		5088403	0		=			
ANR	5088780	Identifier	code		5088403	0					
ANR	5088781	CallExpression	"gs_distance_transform ( sbw [ 2 ] , sbw [ 3 ] , pmat , & info -> width [ wmode ] )"		5088403	1					
ANR	5088782	Callee	gs_distance_transform		5088403	0					
ANR	5088783	Identifier	gs_distance_transform		5088403	0					
ANR	5088784	ArgumentList	sbw [ 2 ]		5088403	1					
ANR	5088785	Argument	sbw [ 2 ]		5088403	0					
ANR	5088786	ArrayIndexing	sbw [ 2 ]		5088403	0					
ANR	5088787	Identifier	sbw		5088403	0					
ANR	5088788	PrimaryExpression	2		5088403	1					
ANR	5088789	Argument	sbw [ 3 ]		5088403	1					
ANR	5088790	ArrayIndexing	sbw [ 3 ]		5088403	0					
ANR	5088791	Identifier	sbw		5088403	0					
ANR	5088792	PrimaryExpression	3		5088403	1					
ANR	5088793	Argument	pmat		5088403	2					
ANR	5088794	Identifier	pmat		5088403	0					
ANR	5088795	Argument	& info -> width [ wmode ]		5088403	3					
ANR	5088796	UnaryOperationExpression	& info -> width [ wmode ]		5088403	0					
ANR	5088797	UnaryOperator	&		5088403	0					
ANR	5088798	ArrayIndexing	info -> width [ wmode ]		5088403	1					
ANR	5088799	PtrMemberAccess	info -> width		5088403	0					
ANR	5088800	Identifier	info		5088403	0					
ANR	5088801	Identifier	width		5088403	1					
ANR	5088802	Identifier	wmode		5088403	1					
ANR	5088803	IfStatement	if ( code < 0 )		5088403	1					
ANR	5088804	Condition	code < 0	1074:16:36081:36088	5088403	0	True				
ANR	5088805	RelationalExpression	code < 0		5088403	0		<			
ANR	5088806	Identifier	code		5088403	0					
ANR	5088807	PrimaryExpression	0		5088403	1					
ANR	5088808	ReturnStatement	return code ;	1075:16:36107:36118	5088403	1	True				
ANR	5088809	Identifier	code		5088403	0					
ANR	5088810	ExpressionStatement	returned |= GLYPH_INFO_WIDTH0 << wmode	1077:8:36138:36176	5088403	1	True				
ANR	5088811	AssignmentExpression	returned |= GLYPH_INFO_WIDTH0 << wmode		5088403	0		|=			
ANR	5088812	Identifier	returned		5088403	0					
ANR	5088813	ShiftExpression	GLYPH_INFO_WIDTH0 << wmode		5088403	1		<<			
ANR	5088814	Identifier	GLYPH_INFO_WIDTH0		5088403	0					
ANR	5088815	Identifier	wmode		5088403	1					
ANR	5088816	IfStatement	if ( members & ( GLYPH_INFO_VVECTOR0 << wmode ) && charstrings_font )		5088403	14					
ANR	5088817	Condition	members & ( GLYPH_INFO_VVECTOR0 << wmode ) && charstrings_font	1079:8:36192:36251	5088403	0	True				
ANR	5088818	AndExpression	members & ( GLYPH_INFO_VVECTOR0 << wmode ) && charstrings_font		5088403	0		&&			
ANR	5088819	BitAndExpression	members & ( GLYPH_INFO_VVECTOR0 << wmode )		5088403	0		&			
ANR	5088820	Identifier	members		5088403	0					
ANR	5088821	ShiftExpression	GLYPH_INFO_VVECTOR0 << wmode		5088403	1		<<			
ANR	5088822	Identifier	GLYPH_INFO_VVECTOR0		5088403	0					
ANR	5088823	Identifier	wmode		5088403	1					
ANR	5088824	Identifier	charstrings_font		5088403	1					
ANR	5088825	CompoundStatement		57:70:2014:2014	5088403	1					
ANR	5088826	IfStatement	if ( pmat == 0 )		5088403	0					
ANR	5088827	Condition	pmat == 0	1080:12:36268:36276	5088403	0	True				
ANR	5088828	EqualityExpression	pmat == 0		5088403	0		==			
ANR	5088829	Identifier	pmat		5088403	0					
ANR	5088830	PrimaryExpression	0		5088403	1					
ANR	5088831	CompoundStatement		58:23:2039:2039	5088403	1					
ANR	5088832	ExpressionStatement	info -> v . x = sbw [ 0 ]	1081:12:36293:36311	5088403	0	True				
ANR	5088833	AssignmentExpression	info -> v . x = sbw [ 0 ]		5088403	0		=			
ANR	5088834	MemberAccess	info -> v . x		5088403	0					
ANR	5088835	PtrMemberAccess	info -> v		5088403	0					
ANR	5088836	Identifier	info		5088403	0					
ANR	5088837	Identifier	v		5088403	1					
ANR	5088838	Identifier	x		5088403	1					
ANR	5088839	ArrayIndexing	sbw [ 0 ]		5088403	1					
ANR	5088840	Identifier	sbw		5088403	0					
ANR	5088841	PrimaryExpression	0		5088403	1					
ANR	5088842	ExpressionStatement	info -> v . y = sbw [ 1 ]	1082:12:36325:36343	5088403	1	True				
ANR	5088843	AssignmentExpression	info -> v . y = sbw [ 1 ]		5088403	0		=			
ANR	5088844	MemberAccess	info -> v . y		5088403	0					
ANR	5088845	PtrMemberAccess	info -> v		5088403	0					
ANR	5088846	Identifier	info		5088403	0					
ANR	5088847	Identifier	v		5088403	1					
ANR	5088848	Identifier	y		5088403	1					
ANR	5088849	ArrayIndexing	sbw [ 1 ]		5088403	1					
ANR	5088850	Identifier	sbw		5088403	0					
ANR	5088851	PrimaryExpression	1		5088403	1					
ANR	5088852	ElseStatement	else		5088403	0					
ANR	5088853	CompoundStatement		61:15:2120:2120	5088403	0					
ANR	5088854	ExpressionStatement	"code = gs_distance_transform ( sbw [ 0 ] , sbw [ 1 ] , pmat , & info -> v )"	1084:12:36374:36434	5088403	0	True				
ANR	5088855	AssignmentExpression	"code = gs_distance_transform ( sbw [ 0 ] , sbw [ 1 ] , pmat , & info -> v )"		5088403	0		=			
ANR	5088856	Identifier	code		5088403	0					
ANR	5088857	CallExpression	"gs_distance_transform ( sbw [ 0 ] , sbw [ 1 ] , pmat , & info -> v )"		5088403	1					
ANR	5088858	Callee	gs_distance_transform		5088403	0					
ANR	5088859	Identifier	gs_distance_transform		5088403	0					
ANR	5088860	ArgumentList	sbw [ 0 ]		5088403	1					
ANR	5088861	Argument	sbw [ 0 ]		5088403	0					
ANR	5088862	ArrayIndexing	sbw [ 0 ]		5088403	0					
ANR	5088863	Identifier	sbw		5088403	0					
ANR	5088864	PrimaryExpression	0		5088403	1					
ANR	5088865	Argument	sbw [ 1 ]		5088403	1					
ANR	5088866	ArrayIndexing	sbw [ 1 ]		5088403	0					
ANR	5088867	Identifier	sbw		5088403	0					
ANR	5088868	PrimaryExpression	1		5088403	1					
ANR	5088869	Argument	pmat		5088403	2					
ANR	5088870	Identifier	pmat		5088403	0					
ANR	5088871	Argument	& info -> v		5088403	3					
ANR	5088872	UnaryOperationExpression	& info -> v		5088403	0					
ANR	5088873	UnaryOperator	&		5088403	0					
ANR	5088874	PtrMemberAccess	info -> v		5088403	1					
ANR	5088875	Identifier	info		5088403	0					
ANR	5088876	Identifier	v		5088403	1					
ANR	5088877	IfStatement	if ( code < 0 )		5088403	1					
ANR	5088878	Condition	code < 0	1085:16:36452:36459	5088403	0	True				
ANR	5088879	RelationalExpression	code < 0		5088403	0		<			
ANR	5088880	Identifier	code		5088403	0					
ANR	5088881	PrimaryExpression	0		5088403	1					
ANR	5088882	ReturnStatement	return code ;	1086:16:36478:36489	5088403	1	True				
ANR	5088883	Identifier	code		5088403	0					
ANR	5088884	ExpressionStatement	returned |= GLYPH_INFO_VVECTOR0 << wmode	1088:8:36509:36549	5088403	1	True				
ANR	5088885	AssignmentExpression	returned |= GLYPH_INFO_VVECTOR0 << wmode		5088403	0		|=			
ANR	5088886	Identifier	returned		5088403	0					
ANR	5088887	ShiftExpression	GLYPH_INFO_VVECTOR0 << wmode		5088403	1		<<			
ANR	5088888	Identifier	GLYPH_INFO_VVECTOR0		5088403	0					
ANR	5088889	Identifier	wmode		5088403	1					
ANR	5088890	IfStatement	if ( members & GLYPH_INFO_NUM_PIECES )		5088403	15					
ANR	5088891	Condition	members & GLYPH_INFO_NUM_PIECES	1090:8:36565:36595	5088403	0	True				
ANR	5088892	BitAndExpression	members & GLYPH_INFO_NUM_PIECES		5088403	0		&			
ANR	5088893	Identifier	members		5088403	0					
ANR	5088894	Identifier	GLYPH_INFO_NUM_PIECES		5088403	1					
ANR	5088895	CompoundStatement		68:41:2358:2358	5088403	1					
ANR	5088896	ExpressionStatement	info -> num_pieces = 0	1091:8:36608:36628	5088403	0	True				
ANR	5088897	AssignmentExpression	info -> num_pieces = 0		5088403	0		=			
ANR	5088898	PtrMemberAccess	info -> num_pieces		5088403	0					
ANR	5088899	Identifier	info		5088403	0					
ANR	5088900	Identifier	num_pieces		5088403	1					
ANR	5088901	PrimaryExpression	0		5088403	1					
ANR	5088902	ExpressionStatement	returned |= GLYPH_INFO_NUM_PIECES	1092:8:36638:36671	5088403	1	True				
ANR	5088903	AssignmentExpression	returned |= GLYPH_INFO_NUM_PIECES		5088403	0		|=			
ANR	5088904	Identifier	returned		5088403	0					
ANR	5088905	Identifier	GLYPH_INFO_NUM_PIECES		5088403	1					
ANR	5088906	ExpressionStatement	returned |= members & GLYPH_INFO_PIECES	1094:4:36683:36722	5088403	16	True				
ANR	5088907	AssignmentExpression	returned |= members & GLYPH_INFO_PIECES		5088403	0		|=			
ANR	5088908	Identifier	returned		5088403	0					
ANR	5088909	BitAndExpression	members & GLYPH_INFO_PIECES		5088403	1		&			
ANR	5088910	Identifier	members		5088403	0					
ANR	5088911	Identifier	GLYPH_INFO_PIECES		5088403	1					
ANR	5088912	Label	out :	1095:1:36748:36751	5088403	17	True				
ANR	5088913	Identifier	out		5088403	0					
ANR	5088914	ExpressionStatement	info -> members = returned	1096:4:36757:36781	5088403	18	True				
ANR	5088915	AssignmentExpression	info -> members = returned		5088403	0		=			
ANR	5088916	PtrMemberAccess	info -> members		5088403	0					
ANR	5088917	Identifier	info		5088403	0					
ANR	5088918	Identifier	members		5088403	1					
ANR	5088919	Identifier	returned		5088403	1					
ANR	5088920	ReturnStatement	return code ;	1097:4:36787:36798	5088403	19	True				
ANR	5088921	Identifier	code		5088403	0					
ANR	5088922	ReturnType	int		5088403	1					
ANR	5088923	Identifier	gs_default_glyph_info		5088403	2					
ANR	5088924	ParameterList	"gs_font * font , gs_glyph glyph , const gs_matrix * pmat , int members , gs_glyph_info_t * info"		5088403	3					
ANR	5088925	Parameter	gs_font * font	1021:22:34127:34139	5088403	0	True				
ANR	5088926	ParameterType	gs_font *		5088403	0					
ANR	5088927	Identifier	font		5088403	1					
ANR	5088928	Parameter	gs_glyph glyph	1021:37:34142:34155	5088403	1	True				
ANR	5088929	ParameterType	gs_glyph		5088403	0					
ANR	5088930	Identifier	glyph		5088403	1					
ANR	5088931	Parameter	const gs_matrix * pmat	1021:53:34158:34178	5088403	2	True				
ANR	5088932	ParameterType	const gs_matrix *		5088403	0					
ANR	5088933	Identifier	pmat		5088403	1					
ANR	5088934	Parameter	int members	1022:22:34203:34213	5088403	3	True				
ANR	5088935	ParameterType	int		5088403	0					
ANR	5088936	Identifier	members		5088403	1					
ANR	5088937	Parameter	gs_glyph_info_t * info	1022:35:34216:34236	5088403	4	True				
ANR	5088938	ParameterType	gs_glyph_info_t *		5088403	0					
ANR	5088939	Identifier	info		5088403	1					
ANR	5088940	CFGEntryNode	ENTRY		5088403		True				
ANR	5088941	CFGExitNode	EXIT		5088403		True				
ANR	5088942	Symbol	info -> width		5088403						
ANR	5088943	Symbol	gs_distance_transform		5088403						
ANR	5088944	Symbol	pt		5088403						
ANR	5088945	Symbol	* wmode		5088403						
ANR	5088946	Symbol	bbox		5088403						
ANR	5088947	Symbol	sbw		5088403						
ANR	5088948	Symbol	bbox . q . x		5088403						
ANR	5088949	Symbol	& info -> v		5088403						
ANR	5088950	Symbol	bbox . q . y		5088403						
ANR	5088951	Symbol	& path		5088403						
ANR	5088952	Symbol	path		5088403						
ANR	5088953	Symbol	info -> members		5088403						
ANR	5088954	Symbol	members		5088403						
ANR	5088955	Symbol	ft_encrypted2		5088403						
ANR	5088956	Symbol	fixed_0		5088403						
ANR	5088957	Symbol	* font		5088403						
ANR	5088958	Symbol	info -> width [ wmode ] . x		5088403						
ANR	5088959	Symbol	info -> bbox . p . x		5088403						
ANR	5088960	Symbol	info -> bbox . p . y		5088403						
ANR	5088961	Symbol	info		5088403						
ANR	5088962	Symbol	info -> width [ wmode ] . y		5088403						
ANR	5088963	Symbol	info -> bbox . q . y		5088403						
ANR	5088964	Symbol	info -> v		5088403						
ANR	5088965	Symbol	font -> WMode		5088403						
ANR	5088966	Symbol	& bbox		5088403						
ANR	5088967	Symbol	info -> bbox		5088403						
ANR	5088968	Symbol	gx_path_add_point		5088403						
ANR	5088969	Symbol	& pt		5088403						
ANR	5088970	Symbol	info -> bbox . q . x		5088403						
ANR	5088971	Symbol	GLYPH_INFO_BBOX		5088403						
ANR	5088972	Symbol	bbox . p . y		5088403						
ANR	5088973	Symbol	bbox . p . x		5088403						
ANR	5088974	Symbol	* * info		5088403						
ANR	5088975	Symbol	code		5088403						
ANR	5088976	Symbol	pmat		5088403						
ANR	5088977	Symbol	info -> v . x		5088403						
ANR	5088978	Symbol	ft_encrypted		5088403						
ANR	5088979	Symbol	ft_CID_encrypted		5088403						
ANR	5088980	Symbol	gx_path_bbox		5088403						
ANR	5088981	Symbol	* info -> width		5088403						
ANR	5088982	Symbol	GLYPH_INFO_WIDTH0		5088403						
ANR	5088983	Symbol	GLYPH_INFO_WIDTH1		5088403						
ANR	5088984	Symbol	font -> FontType		5088403						
ANR	5088985	Symbol	info -> bbox . q		5088403						
ANR	5088986	Symbol	info -> num_pieces		5088403						
ANR	5088987	Symbol	info -> bbox . p		5088403						
ANR	5088988	Symbol	wmode		5088403						
ANR	5088989	Symbol	wmask		5088403						
ANR	5088990	Symbol	bbox . q		5088403						
ANR	5088991	Symbol	font -> procs . glyph_outline		5088403						
ANR	5088992	Symbol	fixed2float		5088403						
ANR	5088993	Symbol	GLYPH_INFO_PIECES		5088403						
ANR	5088994	Symbol	GLYPH_INFO_VVECTOR0		5088403						
ANR	5088995	Symbol	bbox . p		5088403						
ANR	5088996	Symbol	charstrings_font		5088403						
ANR	5088997	Symbol	gx_path_current_point		5088403						
ANR	5088998	Symbol	glyph		5088403						
ANR	5088999	Symbol	* sbw		5088403						
ANR	5089000	Symbol	GLYPH_INFO_WIDTHS		5088403						
ANR	5089001	Symbol	font -> procs		5088403						
ANR	5089002	Symbol	info -> v . y		5088403						
ANR	5089003	Symbol	pt . x		5088403						
ANR	5089004	Symbol	* info		5088403						
ANR	5089005	Symbol	pt . y		5088403						
ANR	5089006	Symbol	GLYPH_INFO_NUM_PIECES		5088403						
ANR	5089007	Symbol	returned		5088403						
ANR	5089008	Symbol	font		5088403						
ANR	5089009	Function	gs_no_glyph_outline	1101:0:36839:37019							
ANR	5089010	FunctionDef	"gs_no_glyph_outline (gs_font * font , int WMode , gs_glyph glyph , const gs_matrix * pmat , gx_path * ppath , double sbw [ 4 ])"		5089009	0					
ANR	5089011	CompoundStatement		1104:0:36979:37019	5089009	0					
ANR	5089012	ExpressionStatement	return_error ( gs_error_undefined )	1105:4:36985:37017	5089009	0	True				
ANR	5089013	CallExpression	return_error ( gs_error_undefined )		5089009	0					
ANR	5089014	Callee	return_error		5089009	0					
ANR	5089015	Identifier	return_error		5089009	0					
ANR	5089016	ArgumentList	gs_error_undefined		5089009	1					
ANR	5089017	Argument	gs_error_undefined		5089009	0					
ANR	5089018	Identifier	gs_error_undefined		5089009	0					
ANR	5089019	ReturnType	int		5089009	1					
ANR	5089020	Identifier	gs_no_glyph_outline		5089009	2					
ANR	5089021	ParameterList	"gs_font * font , int WMode , gs_glyph glyph , const gs_matrix * pmat , gx_path * ppath , double sbw [ 4 ]"		5089009	3					
ANR	5089022	Parameter	gs_font * font	1102:20:36863:36875	5089009	0	True				
ANR	5089023	ParameterType	gs_font *		5089009	0					
ANR	5089024	Identifier	font		5089009	1					
ANR	5089025	Parameter	int WMode	1102:35:36878:36886	5089009	1	True				
ANR	5089026	ParameterType	int		5089009	0					
ANR	5089027	Identifier	WMode		5089009	1					
ANR	5089028	Parameter	gs_glyph glyph	1102:46:36889:36902	5089009	2	True				
ANR	5089029	ParameterType	gs_glyph		5089009	0					
ANR	5089030	Identifier	glyph		5089009	1					
ANR	5089031	Parameter	const gs_matrix * pmat	1102:62:36905:36925	5089009	3	True				
ANR	5089032	ParameterType	const gs_matrix *		5089009	0					
ANR	5089033	Identifier	pmat		5089009	1					
ANR	5089034	Parameter	gx_path * ppath	1103:20:36948:36961	5089009	4	True				
ANR	5089035	ParameterType	gx_path *		5089009	0					
ANR	5089036	Identifier	ppath		5089009	1					
ANR	5089037	Parameter	double sbw [ 4 ]	1103:36:36964:36976	5089009	5	True				
ANR	5089038	ParameterType	double [ 4 ]		5089009	0					
ANR	5089039	Identifier	sbw		5089009	1					
ANR	5089040	CFGEntryNode	ENTRY		5089009		True				
ANR	5089041	CFGExitNode	EXIT		5089009		True				
ANR	5089042	Symbol	glyph		5089009						
ANR	5089043	Symbol	WMode		5089009						
ANR	5089044	Symbol	pmat		5089009						
ANR	5089045	Symbol	gs_error_undefined		5089009						
ANR	5089046	Symbol	sbw		5089009						
ANR	5089047	Symbol	ppath		5089009						
ANR	5089048	Symbol	font		5089009						
ANR	5089049	Function	gs_no_glyph_name	1109:0:37055:37170							
ANR	5089050	FunctionDef	"gs_no_glyph_name (gs_font * font , gs_glyph glyph , gs_const_string * pstr)"		5089049	0					
ANR	5089051	CompoundStatement		1111:0:37130:37170	5089049	0					
ANR	5089052	ExpressionStatement	return_error ( gs_error_undefined )	1112:4:37136:37168	5089049	0	True				
ANR	5089053	CallExpression	return_error ( gs_error_undefined )		5089049	0					
ANR	5089054	Callee	return_error		5089049	0					
ANR	5089055	Identifier	return_error		5089049	0					
ANR	5089056	ArgumentList	gs_error_undefined		5089049	1					
ANR	5089057	Argument	gs_error_undefined		5089049	0					
ANR	5089058	Identifier	gs_error_undefined		5089049	0					
ANR	5089059	ReturnType	int		5089049	1					
ANR	5089060	Identifier	gs_no_glyph_name		5089049	2					
ANR	5089061	ParameterList	"gs_font * font , gs_glyph glyph , gs_const_string * pstr"		5089049	3					
ANR	5089062	Parameter	gs_font * font	1110:17:37076:37088	5089049	0	True				
ANR	5089063	ParameterType	gs_font *		5089049	0					
ANR	5089064	Identifier	font		5089049	1					
ANR	5089065	Parameter	gs_glyph glyph	1110:32:37091:37104	5089049	1	True				
ANR	5089066	ParameterType	gs_glyph		5089049	0					
ANR	5089067	Identifier	glyph		5089049	1					
ANR	5089068	Parameter	gs_const_string * pstr	1110:48:37107:37127	5089049	2	True				
ANR	5089069	ParameterType	gs_const_string *		5089049	0					
ANR	5089070	Identifier	pstr		5089049	1					
ANR	5089071	CFGEntryNode	ENTRY		5089049		True				
ANR	5089072	CFGExitNode	EXIT		5089049		True				
ANR	5089073	Symbol	glyph		5089049						
ANR	5089074	Symbol	pstr		5089049						
ANR	5089075	Symbol	gs_error_undefined		5089049						
ANR	5089076	Symbol	font		5089049						
ANR	5089077	Function	gs_next_text_enum_id	1117:0:37231:37319							
ANR	5089078	FunctionDef	gs_next_text_enum_id (const gs_font * font)		5089077	0					
ANR	5089079	CompoundStatement		1118:0:37279:37319	5089077	0					
ANR	5089080	ReturnStatement	return ++ font -> dir -> text_enum_id ;	1119:4:37285:37317	5089077	0	True				
ANR	5089081	UnaryExpression	++ font -> dir -> text_enum_id		5089077	0					
ANR	5089082	IncDec	++		5089077	0					
ANR	5089083	PtrMemberAccess	font -> dir -> text_enum_id		5089077	1					
ANR	5089084	PtrMemberAccess	font -> dir		5089077	0					
ANR	5089085	Identifier	font		5089077	0					
ANR	5089086	Identifier	dir		5089077	1					
ANR	5089087	Identifier	text_enum_id		5089077	1					
ANR	5089088	ReturnType	ulong		5089077	1					
ANR	5089089	Identifier	gs_next_text_enum_id		5089077	2					
ANR	5089090	ParameterList	const gs_font * font		5089077	3					
ANR	5089091	Parameter	const gs_font * font	1117:27:37258:37276	5089077	0	True				
ANR	5089092	ParameterType	const gs_font *		5089077	0					
ANR	5089093	Identifier	font		5089077	1					
ANR	5089094	CFGEntryNode	ENTRY		5089077		True				
ANR	5089095	CFGExitNode	EXIT		5089077		True				
ANR	5089096	Symbol	font -> dir -> text_enum_id		5089077						
ANR	5089097	Symbol	* font		5089077						
ANR	5089098	Symbol	* * font		5089077						
ANR	5089099	Symbol	font -> dir		5089077						
ANR	5089100	Symbol	font		5089077						
ANR	5089101	Symbol	* font -> dir		5089077						
