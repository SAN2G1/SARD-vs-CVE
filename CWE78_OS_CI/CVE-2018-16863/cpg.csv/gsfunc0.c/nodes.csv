command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5091436	File	data/converged/CVE-2018-16863_ghostpdl/gsfunc0.c								
ANR	5091437	ClassDef	gs_function_Sd_s	37:8:1373:1482							
ANR	5091438	DeclStmt									
ANR	5091439	Decl							gs_function_head_t	gs_function_head_t	head
ANR	5091440	DeclStmt									
ANR	5091441	Decl							gs_function_Sd_params_t	gs_function_Sd_params_t	params
ANR	5091442	DeclStmt									
ANR	5091443	Decl							gs_function_Sd_s	gs_function_Sd_s	gs_function_Sd_t
ANR	5091444	DeclStmt									
ANR	5091445	Decl							int	int	n
ANR	5091446	DeclStmt									
ANR	5091447	Decl							byte	byte [ max_Sd_n * ( ( bps + 7 ) >> 3 ) ]	buf
ANR	5091448	DeclStmt									
ANR	5091449	Decl							const byte	const byte *	p
ANR	5091450	DeclStmt									
ANR	5091451	Decl							int	int	i
ANR	5091452	Function	fn_gets_1	87:0:3126:3404							
ANR	5091453	FunctionDef	"fn_gets_1 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		5091452	0					
ANR	5091454	CompoundStatement		89:0:3207:3404	5091452	0					
ANR	5091455	ExpressionStatement	"SETUP_SAMPLES ( 1 , ( ( offset & 7 ) + n + 7 ) >> 3 )"	90:4:3213:3258	5091452	0	True				
ANR	5091456	CallExpression	"SETUP_SAMPLES ( 1 , ( ( offset & 7 ) + n + 7 ) >> 3 )"		5091452	0					
ANR	5091457	Callee	SETUP_SAMPLES		5091452	0					
ANR	5091458	Identifier	SETUP_SAMPLES		5091452	0					
ANR	5091459	ArgumentList	1		5091452	1					
ANR	5091460	Argument	1		5091452	0					
ANR	5091461	PrimaryExpression	1		5091452	0					
ANR	5091462	Argument	( ( offset & 7 ) + n + 7 ) >> 3		5091452	1					
ANR	5091463	ShiftExpression	( ( offset & 7 ) + n + 7 ) >> 3		5091452	0		>>			
ANR	5091464	AdditiveExpression	( offset & 7 ) + n + 7		5091452	0		+			
ANR	5091465	BitAndExpression	offset & 7		5091452	0		&			
ANR	5091466	Identifier	offset		5091452	0					
ANR	5091467	PrimaryExpression	7		5091452	1					
ANR	5091468	AdditiveExpression	n + 7		5091452	1		+			
ANR	5091469	Identifier	n		5091452	0					
ANR	5091470	PrimaryExpression	7		5091452	1					
ANR	5091471	PrimaryExpression	3		5091452	1					
ANR	5091472	ForStatement	for ( i = 0 ; i < n ; ++ i )		5091452	1					
ANR	5091473	ForInit	i = 0 ;	91:9:3269:3274	5091452	0	True				
ANR	5091474	AssignmentExpression	i = 0		5091452	0		=			
ANR	5091475	Identifier	i		5091452	0					
ANR	5091476	PrimaryExpression	0		5091452	1					
ANR	5091477	Condition	i < n	91:16:3276:3280	5091452	1	True				
ANR	5091478	RelationalExpression	i < n		5091452	0		<			
ANR	5091479	Identifier	i		5091452	0					
ANR	5091480	Identifier	n		5091452	1					
ANR	5091481	UnaryExpression	++ i	91:23:3283:3285	5091452	2	True				
ANR	5091482	IncDec	++		5091452	0					
ANR	5091483	Identifier	i		5091452	1					
ANR	5091484	CompoundStatement		3:28:80:80	5091452	3					
ANR	5091485	ExpressionStatement	samples [ i ] = ( * p >> ( ~offset & 7 ) ) & 1	92:8:3298:3336	5091452	0	True				
ANR	5091486	AssignmentExpression	samples [ i ] = ( * p >> ( ~offset & 7 ) ) & 1		5091452	0		=			
ANR	5091487	ArrayIndexing	samples [ i ]		5091452	0					
ANR	5091488	Identifier	samples		5091452	0					
ANR	5091489	Identifier	i		5091452	1					
ANR	5091490	BitAndExpression	( * p >> ( ~offset & 7 ) ) & 1		5091452	1		&			
ANR	5091491	ShiftExpression	* p >> ( ~offset & 7 )		5091452	0		>>			
ANR	5091492	UnaryOperationExpression	* p		5091452	0					
ANR	5091493	UnaryOperator	*		5091452	0					
ANR	5091494	Identifier	p		5091452	1					
ANR	5091495	BitAndExpression	~offset & 7		5091452	1		&			
ANR	5091496	Identifier	~offset		5091452	0					
ANR	5091497	PrimaryExpression	7		5091452	1					
ANR	5091498	PrimaryExpression	1		5091452	1					
ANR	5091499	IfStatement	if ( ! ( ++ offset & 7 ) )		5091452	1					
ANR	5091500	Condition	! ( ++ offset & 7 )	93:12:3350:3364	5091452	0	True				
ANR	5091501	UnaryOperationExpression	! ( ++ offset & 7 )		5091452	0					
ANR	5091502	UnaryOperator	!		5091452	0					
ANR	5091503	BitAndExpression	++ offset & 7		5091452	1		&			
ANR	5091504	UnaryExpression	++ offset		5091452	0					
ANR	5091505	IncDec	++		5091452	0					
ANR	5091506	Identifier	offset		5091452	1					
ANR	5091507	PrimaryExpression	7		5091452	1					
ANR	5091508	ExpressionStatement	p ++	94:12:3379:3382	5091452	1	True				
ANR	5091509	PostIncDecOperationExpression	p ++		5091452	0					
ANR	5091510	Identifier	p		5091452	0					
ANR	5091511	IncDec	++		5091452	1					
ANR	5091512	ReturnStatement	return 0 ;	96:4:3394:3402	5091452	2	True				
ANR	5091513	PrimaryExpression	0		5091452	0					
ANR	5091514	ReturnType	static int		5091452	1					
ANR	5091515	Identifier	fn_gets_1		5091452	2					
ANR	5091516	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		5091452	3					
ANR	5091517	Parameter	const gs_function_Sd_t * pfn	88:10:3147:3174	5091452	0	True				
ANR	5091518	ParameterType	const gs_function_Sd_t *		5091452	0					
ANR	5091519	Identifier	pfn		5091452	1					
ANR	5091520	Parameter	ulong offset	88:40:3177:3188	5091452	1	True				
ANR	5091521	ParameterType	ulong		5091452	0					
ANR	5091522	Identifier	offset		5091452	1					
ANR	5091523	Parameter	uint * samples	88:54:3191:3204	5091452	2	True				
ANR	5091524	ParameterType	uint *		5091452	0					
ANR	5091525	Identifier	samples		5091452	1					
ANR	5091526	CFGEntryNode	ENTRY		5091452		True				
ANR	5091527	CFGExitNode	EXIT		5091452		True				
ANR	5091528	Symbol	p		5091452						
ANR	5091529	Symbol	* i		5091452						
ANR	5091530	Symbol	offset		5091452						
ANR	5091531	Symbol	* samples		5091452						
ANR	5091532	Symbol	pfn		5091452						
ANR	5091533	Symbol	i		5091452						
ANR	5091534	Symbol	~offset		5091452						
ANR	5091535	Symbol	* p		5091452						
ANR	5091536	Symbol	samples		5091452						
ANR	5091537	Symbol	n		5091452						
ANR	5091538	Function	fn_gets_2	98:0:3406:3701							
ANR	5091539	FunctionDef	"fn_gets_2 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		5091538	0					
ANR	5091540	CompoundStatement		100:0:3487:3701	5091538	0					
ANR	5091541	ExpressionStatement	"SETUP_SAMPLES ( 2 , ( ( ( offset & 7 ) >> 1 ) + n + 3 ) >> 2 )"	101:4:3493:3545	5091538	0	True				
ANR	5091542	CallExpression	"SETUP_SAMPLES ( 2 , ( ( ( offset & 7 ) >> 1 ) + n + 3 ) >> 2 )"		5091538	0					
ANR	5091543	Callee	SETUP_SAMPLES		5091538	0					
ANR	5091544	Identifier	SETUP_SAMPLES		5091538	0					
ANR	5091545	ArgumentList	2		5091538	1					
ANR	5091546	Argument	2		5091538	0					
ANR	5091547	PrimaryExpression	2		5091538	0					
ANR	5091548	Argument	( ( ( offset & 7 ) >> 1 ) + n + 3 ) >> 2		5091538	1					
ANR	5091549	ShiftExpression	( ( ( offset & 7 ) >> 1 ) + n + 3 ) >> 2		5091538	0		>>			
ANR	5091550	AdditiveExpression	( ( offset & 7 ) >> 1 ) + n + 3		5091538	0		+			
ANR	5091551	ShiftExpression	( offset & 7 ) >> 1		5091538	0		>>			
ANR	5091552	BitAndExpression	offset & 7		5091538	0		&			
ANR	5091553	Identifier	offset		5091538	0					
ANR	5091554	PrimaryExpression	7		5091538	1					
ANR	5091555	PrimaryExpression	1		5091538	1					
ANR	5091556	AdditiveExpression	n + 3		5091538	1		+			
ANR	5091557	Identifier	n		5091538	0					
ANR	5091558	PrimaryExpression	3		5091538	1					
ANR	5091559	PrimaryExpression	2		5091538	1					
ANR	5091560	ForStatement	for ( i = 0 ; i < n ; ++ i )		5091538	1					
ANR	5091561	ForInit	i = 0 ;	102:9:3556:3561	5091538	0	True				
ANR	5091562	AssignmentExpression	i = 0		5091538	0		=			
ANR	5091563	Identifier	i		5091538	0					
ANR	5091564	PrimaryExpression	0		5091538	1					
ANR	5091565	Condition	i < n	102:16:3563:3567	5091538	1	True				
ANR	5091566	RelationalExpression	i < n		5091538	0		<			
ANR	5091567	Identifier	i		5091538	0					
ANR	5091568	Identifier	n		5091538	1					
ANR	5091569	UnaryExpression	++ i	102:23:3570:3572	5091538	2	True				
ANR	5091570	IncDec	++		5091538	0					
ANR	5091571	Identifier	i		5091538	1					
ANR	5091572	CompoundStatement		3:28:87:87	5091538	3					
ANR	5091573	ExpressionStatement	samples [ i ] = ( * p >> ( 6 - ( offset & 7 ) ) ) & 3	103:8:3585:3628	5091538	0	True				
ANR	5091574	AssignmentExpression	samples [ i ] = ( * p >> ( 6 - ( offset & 7 ) ) ) & 3		5091538	0		=			
ANR	5091575	ArrayIndexing	samples [ i ]		5091538	0					
ANR	5091576	Identifier	samples		5091538	0					
ANR	5091577	Identifier	i		5091538	1					
ANR	5091578	BitAndExpression	( * p >> ( 6 - ( offset & 7 ) ) ) & 3		5091538	1		&			
ANR	5091579	ShiftExpression	* p >> ( 6 - ( offset & 7 ) )		5091538	0		>>			
ANR	5091580	UnaryOperationExpression	* p		5091538	0					
ANR	5091581	UnaryOperator	*		5091538	0					
ANR	5091582	Identifier	p		5091538	1					
ANR	5091583	AdditiveExpression	6 - ( offset & 7 )		5091538	1		-			
ANR	5091584	PrimaryExpression	6		5091538	0					
ANR	5091585	BitAndExpression	offset & 7		5091538	1		&			
ANR	5091586	Identifier	offset		5091538	0					
ANR	5091587	PrimaryExpression	7		5091538	1					
ANR	5091588	PrimaryExpression	3		5091538	1					
ANR	5091589	IfStatement	if ( ! ( ( offset += 2 ) & 7 ) )		5091538	1					
ANR	5091590	Condition	! ( ( offset += 2 ) & 7 )	104:12:3642:3661	5091538	0	True				
ANR	5091591	UnaryOperationExpression	! ( ( offset += 2 ) & 7 )		5091538	0					
ANR	5091592	UnaryOperator	!		5091538	0					
ANR	5091593	BitAndExpression	( offset += 2 ) & 7		5091538	1		&			
ANR	5091594	AssignmentExpression	offset += 2		5091538	0		+=			
ANR	5091595	Identifier	offset		5091538	0					
ANR	5091596	PrimaryExpression	2		5091538	1					
ANR	5091597	PrimaryExpression	7		5091538	1					
ANR	5091598	ExpressionStatement	p ++	105:12:3676:3679	5091538	1	True				
ANR	5091599	PostIncDecOperationExpression	p ++		5091538	0					
ANR	5091600	Identifier	p		5091538	0					
ANR	5091601	IncDec	++		5091538	1					
ANR	5091602	ReturnStatement	return 0 ;	107:4:3691:3699	5091538	2	True				
ANR	5091603	PrimaryExpression	0		5091538	0					
ANR	5091604	ReturnType	static int		5091538	1					
ANR	5091605	Identifier	fn_gets_2		5091538	2					
ANR	5091606	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		5091538	3					
ANR	5091607	Parameter	const gs_function_Sd_t * pfn	99:10:3427:3454	5091538	0	True				
ANR	5091608	ParameterType	const gs_function_Sd_t *		5091538	0					
ANR	5091609	Identifier	pfn		5091538	1					
ANR	5091610	Parameter	ulong offset	99:40:3457:3468	5091538	1	True				
ANR	5091611	ParameterType	ulong		5091538	0					
ANR	5091612	Identifier	offset		5091538	1					
ANR	5091613	Parameter	uint * samples	99:54:3471:3484	5091538	2	True				
ANR	5091614	ParameterType	uint *		5091538	0					
ANR	5091615	Identifier	samples		5091538	1					
ANR	5091616	CFGEntryNode	ENTRY		5091538		True				
ANR	5091617	CFGExitNode	EXIT		5091538		True				
ANR	5091618	Symbol	p		5091538						
ANR	5091619	Symbol	* i		5091538						
ANR	5091620	Symbol	offset		5091538						
ANR	5091621	Symbol	* samples		5091538						
ANR	5091622	Symbol	pfn		5091538						
ANR	5091623	Symbol	i		5091538						
ANR	5091624	Symbol	* p		5091538						
ANR	5091625	Symbol	samples		5091538						
ANR	5091626	Symbol	n		5091538						
ANR	5091627	Function	fn_gets_4	109:0:3703:3959							
ANR	5091628	FunctionDef	"fn_gets_4 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		5091627	0					
ANR	5091629	CompoundStatement		111:0:3784:3959	5091627	0					
ANR	5091630	ExpressionStatement	"SETUP_SAMPLES ( 4 , ( ( ( offset & 7 ) >> 2 ) + n + 1 ) >> 1 )"	112:4:3790:3842	5091627	0	True				
ANR	5091631	CallExpression	"SETUP_SAMPLES ( 4 , ( ( ( offset & 7 ) >> 2 ) + n + 1 ) >> 1 )"		5091627	0					
ANR	5091632	Callee	SETUP_SAMPLES		5091627	0					
ANR	5091633	Identifier	SETUP_SAMPLES		5091627	0					
ANR	5091634	ArgumentList	4		5091627	1					
ANR	5091635	Argument	4		5091627	0					
ANR	5091636	PrimaryExpression	4		5091627	0					
ANR	5091637	Argument	( ( ( offset & 7 ) >> 2 ) + n + 1 ) >> 1		5091627	1					
ANR	5091638	ShiftExpression	( ( ( offset & 7 ) >> 2 ) + n + 1 ) >> 1		5091627	0		>>			
ANR	5091639	AdditiveExpression	( ( offset & 7 ) >> 2 ) + n + 1		5091627	0		+			
ANR	5091640	ShiftExpression	( offset & 7 ) >> 2		5091627	0		>>			
ANR	5091641	BitAndExpression	offset & 7		5091627	0		&			
ANR	5091642	Identifier	offset		5091627	0					
ANR	5091643	PrimaryExpression	7		5091627	1					
ANR	5091644	PrimaryExpression	2		5091627	1					
ANR	5091645	AdditiveExpression	n + 1		5091627	1		+			
ANR	5091646	Identifier	n		5091627	0					
ANR	5091647	PrimaryExpression	1		5091627	1					
ANR	5091648	PrimaryExpression	1		5091627	1					
ANR	5091649	ForStatement	for ( i = 0 ; i < n ; ++ i )		5091627	1					
ANR	5091650	ForInit	i = 0 ;	113:9:3853:3858	5091627	0	True				
ANR	5091651	AssignmentExpression	i = 0		5091627	0		=			
ANR	5091652	Identifier	i		5091627	0					
ANR	5091653	PrimaryExpression	0		5091627	1					
ANR	5091654	Condition	i < n	113:16:3860:3864	5091627	1	True				
ANR	5091655	RelationalExpression	i < n		5091627	0		<			
ANR	5091656	Identifier	i		5091627	0					
ANR	5091657	Identifier	n		5091627	1					
ANR	5091658	UnaryExpression	++ i	113:23:3867:3869	5091627	2	True				
ANR	5091659	IncDec	++		5091627	0					
ANR	5091660	Identifier	i		5091627	1					
ANR	5091661	CompoundStatement		3:28:87:87	5091627	3					
ANR	5091662	ExpressionStatement	samples [ i ] = ( ( offset ^= 4 ) & 4 ? * p >> 4 : * p ++ & 0xf )	114:8:3882:3937	5091627	0	True				
ANR	5091663	AssignmentExpression	samples [ i ] = ( ( offset ^= 4 ) & 4 ? * p >> 4 : * p ++ & 0xf )		5091627	0		=			
ANR	5091664	ArrayIndexing	samples [ i ]		5091627	0					
ANR	5091665	Identifier	samples		5091627	0					
ANR	5091666	Identifier	i		5091627	1					
ANR	5091667	ConditionalExpression	( offset ^= 4 ) & 4 ? * p >> 4 : * p ++ & 0xf		5091627	1					
ANR	5091668	Condition	( offset ^= 4 ) & 4		5091627	0					
ANR	5091669	BitAndExpression	( offset ^= 4 ) & 4		5091627	0		&			
ANR	5091670	AssignmentExpression	offset ^= 4		5091627	0		^=			
ANR	5091671	Identifier	offset		5091627	0					
ANR	5091672	PrimaryExpression	4		5091627	1					
ANR	5091673	PrimaryExpression	4		5091627	1					
ANR	5091674	ShiftExpression	* p >> 4		5091627	1		>>			
ANR	5091675	UnaryOperationExpression	* p		5091627	0					
ANR	5091676	UnaryOperator	*		5091627	0					
ANR	5091677	Identifier	p		5091627	1					
ANR	5091678	PrimaryExpression	4		5091627	1					
ANR	5091679	BitAndExpression	* p ++ & 0xf		5091627	2		&			
ANR	5091680	UnaryOperationExpression	* p ++		5091627	0					
ANR	5091681	UnaryOperator	*		5091627	0					
ANR	5091682	PostIncDecOperationExpression	p ++		5091627	1					
ANR	5091683	Identifier	p		5091627	0					
ANR	5091684	IncDec	++		5091627	1					
ANR	5091685	PrimaryExpression	0xf		5091627	1					
ANR	5091686	ReturnStatement	return 0 ;	116:4:3949:3957	5091627	2	True				
ANR	5091687	PrimaryExpression	0		5091627	0					
ANR	5091688	ReturnType	static int		5091627	1					
ANR	5091689	Identifier	fn_gets_4		5091627	2					
ANR	5091690	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		5091627	3					
ANR	5091691	Parameter	const gs_function_Sd_t * pfn	110:10:3724:3751	5091627	0	True				
ANR	5091692	ParameterType	const gs_function_Sd_t *		5091627	0					
ANR	5091693	Identifier	pfn		5091627	1					
ANR	5091694	Parameter	ulong offset	110:40:3754:3765	5091627	1	True				
ANR	5091695	ParameterType	ulong		5091627	0					
ANR	5091696	Identifier	offset		5091627	1					
ANR	5091697	Parameter	uint * samples	110:54:3768:3781	5091627	2	True				
ANR	5091698	ParameterType	uint *		5091627	0					
ANR	5091699	Identifier	samples		5091627	1					
ANR	5091700	CFGEntryNode	ENTRY		5091627		True				
ANR	5091701	CFGExitNode	EXIT		5091627		True				
ANR	5091702	Symbol	p		5091627						
ANR	5091703	Symbol	* i		5091627						
ANR	5091704	Symbol	offset		5091627						
ANR	5091705	Symbol	* samples		5091627						
ANR	5091706	Symbol	* p ++		5091627						
ANR	5091707	Symbol	pfn		5091627						
ANR	5091708	Symbol	i		5091627						
ANR	5091709	Symbol	* p		5091627						
ANR	5091710	Symbol	samples		5091627						
ANR	5091711	Symbol	n		5091627						
ANR	5091712	Function	fn_gets_8	118:0:3961:4146							
ANR	5091713	FunctionDef	"fn_gets_8 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		5091712	0					
ANR	5091714	CompoundStatement		120:0:4042:4146	5091712	0					
ANR	5091715	ExpressionStatement	"SETUP_SAMPLES ( 8 , n )"	121:4:4048:4067	5091712	0	True				
ANR	5091716	CallExpression	"SETUP_SAMPLES ( 8 , n )"		5091712	0					
ANR	5091717	Callee	SETUP_SAMPLES		5091712	0					
ANR	5091718	Identifier	SETUP_SAMPLES		5091712	0					
ANR	5091719	ArgumentList	8		5091712	1					
ANR	5091720	Argument	8		5091712	0					
ANR	5091721	PrimaryExpression	8		5091712	0					
ANR	5091722	Argument	n		5091712	1					
ANR	5091723	Identifier	n		5091712	0					
ANR	5091724	ForStatement	for ( i = 0 ; i < n ; ++ i )		5091712	1					
ANR	5091725	ForInit	i = 0 ;	122:9:4078:4083	5091712	0	True				
ANR	5091726	AssignmentExpression	i = 0		5091712	0		=			
ANR	5091727	Identifier	i		5091712	0					
ANR	5091728	PrimaryExpression	0		5091712	1					
ANR	5091729	Condition	i < n	122:16:4085:4089	5091712	1	True				
ANR	5091730	RelationalExpression	i < n		5091712	0		<			
ANR	5091731	Identifier	i		5091712	0					
ANR	5091732	Identifier	n		5091712	1					
ANR	5091733	UnaryExpression	++ i	122:23:4092:4094	5091712	2	True				
ANR	5091734	IncDec	++		5091712	0					
ANR	5091735	Identifier	i		5091712	1					
ANR	5091736	CompoundStatement		3:28:54:54	5091712	3					
ANR	5091737	ExpressionStatement	samples [ i ] = * p ++	123:8:4107:4124	5091712	0	True				
ANR	5091738	AssignmentExpression	samples [ i ] = * p ++		5091712	0		=			
ANR	5091739	ArrayIndexing	samples [ i ]		5091712	0					
ANR	5091740	Identifier	samples		5091712	0					
ANR	5091741	Identifier	i		5091712	1					
ANR	5091742	UnaryOperationExpression	* p ++		5091712	1					
ANR	5091743	UnaryOperator	*		5091712	0					
ANR	5091744	PostIncDecOperationExpression	p ++		5091712	1					
ANR	5091745	Identifier	p		5091712	0					
ANR	5091746	IncDec	++		5091712	1					
ANR	5091747	ReturnStatement	return 0 ;	125:4:4136:4144	5091712	2	True				
ANR	5091748	PrimaryExpression	0		5091712	0					
ANR	5091749	ReturnType	static int		5091712	1					
ANR	5091750	Identifier	fn_gets_8		5091712	2					
ANR	5091751	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		5091712	3					
ANR	5091752	Parameter	const gs_function_Sd_t * pfn	119:10:3982:4009	5091712	0	True				
ANR	5091753	ParameterType	const gs_function_Sd_t *		5091712	0					
ANR	5091754	Identifier	pfn		5091712	1					
ANR	5091755	Parameter	ulong offset	119:40:4012:4023	5091712	1	True				
ANR	5091756	ParameterType	ulong		5091712	0					
ANR	5091757	Identifier	offset		5091712	1					
ANR	5091758	Parameter	uint * samples	119:54:4026:4039	5091712	2	True				
ANR	5091759	ParameterType	uint *		5091712	0					
ANR	5091760	Identifier	samples		5091712	1					
ANR	5091761	CFGEntryNode	ENTRY		5091712		True				
ANR	5091762	CFGExitNode	EXIT		5091712		True				
ANR	5091763	Symbol	p		5091712						
ANR	5091764	Symbol	* i		5091712						
ANR	5091765	Symbol	offset		5091712						
ANR	5091766	Symbol	* samples		5091712						
ANR	5091767	Symbol	* p ++		5091712						
ANR	5091768	Symbol	pfn		5091712						
ANR	5091769	Symbol	i		5091712						
ANR	5091770	Symbol	samples		5091712						
ANR	5091771	Symbol	n		5091712						
ANR	5091772	Function	fn_gets_12	127:0:4148:4517							
ANR	5091773	FunctionDef	"fn_gets_12 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		5091772	0					
ANR	5091774	CompoundStatement		129:0:4230:4517	5091772	0					
ANR	5091775	ExpressionStatement	"SETUP_SAMPLES ( 12 , ( ( ( offset & 7 ) >> 2 ) + 3 * n + 1 ) >> 1 )"	130:4:4236:4293	5091772	0	True				
ANR	5091776	CallExpression	"SETUP_SAMPLES ( 12 , ( ( ( offset & 7 ) >> 2 ) + 3 * n + 1 ) >> 1 )"		5091772	0					
ANR	5091777	Callee	SETUP_SAMPLES		5091772	0					
ANR	5091778	Identifier	SETUP_SAMPLES		5091772	0					
ANR	5091779	ArgumentList	12		5091772	1					
ANR	5091780	Argument	12		5091772	0					
ANR	5091781	PrimaryExpression	12		5091772	0					
ANR	5091782	Argument	( ( ( offset & 7 ) >> 2 ) + 3 * n + 1 ) >> 1		5091772	1					
ANR	5091783	ShiftExpression	( ( ( offset & 7 ) >> 2 ) + 3 * n + 1 ) >> 1		5091772	0		>>			
ANR	5091784	AdditiveExpression	( ( offset & 7 ) >> 2 ) + 3 * n + 1		5091772	0		+			
ANR	5091785	ShiftExpression	( offset & 7 ) >> 2		5091772	0		>>			
ANR	5091786	BitAndExpression	offset & 7		5091772	0		&			
ANR	5091787	Identifier	offset		5091772	0					
ANR	5091788	PrimaryExpression	7		5091772	1					
ANR	5091789	PrimaryExpression	2		5091772	1					
ANR	5091790	AdditiveExpression	3 * n + 1		5091772	1		+			
ANR	5091791	MultiplicativeExpression	3 * n		5091772	0		*			
ANR	5091792	PrimaryExpression	3		5091772	0					
ANR	5091793	Identifier	n		5091772	1					
ANR	5091794	PrimaryExpression	1		5091772	1					
ANR	5091795	PrimaryExpression	1		5091772	1					
ANR	5091796	ForStatement	for ( i = 0 ; i < n ; ++ i )		5091772	1					
ANR	5091797	ForInit	i = 0 ;	131:9:4304:4309	5091772	0	True				
ANR	5091798	AssignmentExpression	i = 0		5091772	0		=			
ANR	5091799	Identifier	i		5091772	0					
ANR	5091800	PrimaryExpression	0		5091772	1					
ANR	5091801	Condition	i < n	131:16:4311:4315	5091772	1	True				
ANR	5091802	RelationalExpression	i < n		5091772	0		<			
ANR	5091803	Identifier	i		5091772	0					
ANR	5091804	Identifier	n		5091772	1					
ANR	5091805	UnaryExpression	++ i	131:23:4318:4320	5091772	2	True				
ANR	5091806	IncDec	++		5091772	0					
ANR	5091807	Identifier	i		5091772	1					
ANR	5091808	CompoundStatement		3:28:92:92	5091772	3					
ANR	5091809	IfStatement	if ( offset & 4 )		5091772	0					
ANR	5091810	Condition	offset & 4	132:12:4337:4346	5091772	0	True				
ANR	5091811	BitAndExpression	offset & 4		5091772	0		&			
ANR	5091812	Identifier	offset		5091772	0					
ANR	5091813	PrimaryExpression	4		5091772	1					
ANR	5091814	ExpressionStatement	"samples [ i ] = ( ( * p & 0xf ) << 8 ) + p [ 1 ] , p += 2"	133:12:4361:4406	5091772	1	True				
ANR	5091815	Expression	"samples [ i ] = ( ( * p & 0xf ) << 8 ) + p [ 1 ] , p += 2"		5091772	0					
ANR	5091816	AssignmentExpression	samples [ i ] = ( ( * p & 0xf ) << 8 ) + p [ 1 ]		5091772	0		=			
ANR	5091817	ArrayIndexing	samples [ i ]		5091772	0					
ANR	5091818	Identifier	samples		5091772	0					
ANR	5091819	Identifier	i		5091772	1					
ANR	5091820	AdditiveExpression	( ( * p & 0xf ) << 8 ) + p [ 1 ]		5091772	1		+			
ANR	5091821	ShiftExpression	( * p & 0xf ) << 8		5091772	0		<<			
ANR	5091822	BitAndExpression	* p & 0xf		5091772	0		&			
ANR	5091823	UnaryOperationExpression	* p		5091772	0					
ANR	5091824	UnaryOperator	*		5091772	0					
ANR	5091825	Identifier	p		5091772	1					
ANR	5091826	PrimaryExpression	0xf		5091772	1					
ANR	5091827	PrimaryExpression	8		5091772	1					
ANR	5091828	ArrayIndexing	p [ 1 ]		5091772	1					
ANR	5091829	Identifier	p		5091772	0					
ANR	5091830	PrimaryExpression	1		5091772	1					
ANR	5091831	AssignmentExpression	p += 2		5091772	1		+=			
ANR	5091832	Identifier	p		5091772	0					
ANR	5091833	PrimaryExpression	2		5091772	1					
ANR	5091834	ElseStatement	else		5091772	0					
ANR	5091835	ExpressionStatement	"samples [ i ] = ( * p << 4 ) + ( p [ 1 ] >> 4 ) , p ++"	135:12:4433:4474	5091772	0	True				
ANR	5091836	Expression	"samples [ i ] = ( * p << 4 ) + ( p [ 1 ] >> 4 ) , p ++"		5091772	0					
ANR	5091837	AssignmentExpression	samples [ i ] = ( * p << 4 ) + ( p [ 1 ] >> 4 )		5091772	0		=			
ANR	5091838	ArrayIndexing	samples [ i ]		5091772	0					
ANR	5091839	Identifier	samples		5091772	0					
ANR	5091840	Identifier	i		5091772	1					
ANR	5091841	AdditiveExpression	( * p << 4 ) + ( p [ 1 ] >> 4 )		5091772	1		+			
ANR	5091842	ShiftExpression	* p << 4		5091772	0		<<			
ANR	5091843	UnaryOperationExpression	* p		5091772	0					
ANR	5091844	UnaryOperator	*		5091772	0					
ANR	5091845	Identifier	p		5091772	1					
ANR	5091846	PrimaryExpression	4		5091772	1					
ANR	5091847	ShiftExpression	p [ 1 ] >> 4		5091772	1		>>			
ANR	5091848	ArrayIndexing	p [ 1 ]		5091772	0					
ANR	5091849	Identifier	p		5091772	0					
ANR	5091850	PrimaryExpression	1		5091772	1					
ANR	5091851	PrimaryExpression	4		5091772	1					
ANR	5091852	PostIncDecOperationExpression	p ++		5091772	1					
ANR	5091853	Identifier	p		5091772	0					
ANR	5091854	IncDec	++		5091772	1					
ANR	5091855	ExpressionStatement	offset ^= 4	136:8:4484:4495	5091772	1	True				
ANR	5091856	AssignmentExpression	offset ^= 4		5091772	0		^=			
ANR	5091857	Identifier	offset		5091772	0					
ANR	5091858	PrimaryExpression	4		5091772	1					
ANR	5091859	ReturnStatement	return 0 ;	138:4:4507:4515	5091772	2	True				
ANR	5091860	PrimaryExpression	0		5091772	0					
ANR	5091861	ReturnType	static int		5091772	1					
ANR	5091862	Identifier	fn_gets_12		5091772	2					
ANR	5091863	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		5091772	3					
ANR	5091864	Parameter	const gs_function_Sd_t * pfn	128:11:4170:4197	5091772	0	True				
ANR	5091865	ParameterType	const gs_function_Sd_t *		5091772	0					
ANR	5091866	Identifier	pfn		5091772	1					
ANR	5091867	Parameter	ulong offset	128:41:4200:4211	5091772	1	True				
ANR	5091868	ParameterType	ulong		5091772	0					
ANR	5091869	Identifier	offset		5091772	1					
ANR	5091870	Parameter	uint * samples	128:55:4214:4227	5091772	2	True				
ANR	5091871	ParameterType	uint *		5091772	0					
ANR	5091872	Identifier	samples		5091772	1					
ANR	5091873	CFGEntryNode	ENTRY		5091772		True				
ANR	5091874	CFGExitNode	EXIT		5091772		True				
ANR	5091875	Symbol	p		5091772						
ANR	5091876	Symbol	* i		5091772						
ANR	5091877	Symbol	offset		5091772						
ANR	5091878	Symbol	* samples		5091772						
ANR	5091879	Symbol	pfn		5091772						
ANR	5091880	Symbol	i		5091772						
ANR	5091881	Symbol	* p		5091772						
ANR	5091882	Symbol	samples		5091772						
ANR	5091883	Symbol	n		5091772						
ANR	5091884	Function	fn_gets_16	140:0:4519:4738							
ANR	5091885	FunctionDef	"fn_gets_16 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		5091884	0					
ANR	5091886	CompoundStatement		142:0:4601:4738	5091884	0					
ANR	5091887	ExpressionStatement	"SETUP_SAMPLES ( 16 , n * 2 )"	143:4:4607:4631	5091884	0	True				
ANR	5091888	CallExpression	"SETUP_SAMPLES ( 16 , n * 2 )"		5091884	0					
ANR	5091889	Callee	SETUP_SAMPLES		5091884	0					
ANR	5091890	Identifier	SETUP_SAMPLES		5091884	0					
ANR	5091891	ArgumentList	16		5091884	1					
ANR	5091892	Argument	16		5091884	0					
ANR	5091893	PrimaryExpression	16		5091884	0					
ANR	5091894	Argument	n * 2		5091884	1					
ANR	5091895	MultiplicativeExpression	n * 2		5091884	0		*			
ANR	5091896	Identifier	n		5091884	0					
ANR	5091897	PrimaryExpression	2		5091884	1					
ANR	5091898	ForStatement	for ( i = 0 ; i < n ; ++ i )		5091884	1					
ANR	5091899	ForInit	i = 0 ;	144:9:4642:4647	5091884	0	True				
ANR	5091900	AssignmentExpression	i = 0		5091884	0		=			
ANR	5091901	Identifier	i		5091884	0					
ANR	5091902	PrimaryExpression	0		5091884	1					
ANR	5091903	Condition	i < n	144:16:4649:4653	5091884	1	True				
ANR	5091904	RelationalExpression	i < n		5091884	0		<			
ANR	5091905	Identifier	i		5091884	0					
ANR	5091906	Identifier	n		5091884	1					
ANR	5091907	UnaryExpression	++ i	144:23:4656:4658	5091884	2	True				
ANR	5091908	IncDec	++		5091884	0					
ANR	5091909	Identifier	i		5091884	1					
ANR	5091910	CompoundStatement		3:28:59:59	5091884	3					
ANR	5091911	ExpressionStatement	samples [ i ] = ( * p << 8 ) + p [ 1 ]	145:8:4671:4700	5091884	0	True				
ANR	5091912	AssignmentExpression	samples [ i ] = ( * p << 8 ) + p [ 1 ]		5091884	0		=			
ANR	5091913	ArrayIndexing	samples [ i ]		5091884	0					
ANR	5091914	Identifier	samples		5091884	0					
ANR	5091915	Identifier	i		5091884	1					
ANR	5091916	AdditiveExpression	( * p << 8 ) + p [ 1 ]		5091884	1		+			
ANR	5091917	ShiftExpression	* p << 8		5091884	0		<<			
ANR	5091918	UnaryOperationExpression	* p		5091884	0					
ANR	5091919	UnaryOperator	*		5091884	0					
ANR	5091920	Identifier	p		5091884	1					
ANR	5091921	PrimaryExpression	8		5091884	1					
ANR	5091922	ArrayIndexing	p [ 1 ]		5091884	1					
ANR	5091923	Identifier	p		5091884	0					
ANR	5091924	PrimaryExpression	1		5091884	1					
ANR	5091925	ExpressionStatement	p += 2	146:8:4710:4716	5091884	1	True				
ANR	5091926	AssignmentExpression	p += 2		5091884	0		+=			
ANR	5091927	Identifier	p		5091884	0					
ANR	5091928	PrimaryExpression	2		5091884	1					
ANR	5091929	ReturnStatement	return 0 ;	148:4:4728:4736	5091884	2	True				
ANR	5091930	PrimaryExpression	0		5091884	0					
ANR	5091931	ReturnType	static int		5091884	1					
ANR	5091932	Identifier	fn_gets_16		5091884	2					
ANR	5091933	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		5091884	3					
ANR	5091934	Parameter	const gs_function_Sd_t * pfn	141:11:4541:4568	5091884	0	True				
ANR	5091935	ParameterType	const gs_function_Sd_t *		5091884	0					
ANR	5091936	Identifier	pfn		5091884	1					
ANR	5091937	Parameter	ulong offset	141:41:4571:4582	5091884	1	True				
ANR	5091938	ParameterType	ulong		5091884	0					
ANR	5091939	Identifier	offset		5091884	1					
ANR	5091940	Parameter	uint * samples	141:55:4585:4598	5091884	2	True				
ANR	5091941	ParameterType	uint *		5091884	0					
ANR	5091942	Identifier	samples		5091884	1					
ANR	5091943	CFGEntryNode	ENTRY		5091884		True				
ANR	5091944	CFGExitNode	EXIT		5091884		True				
ANR	5091945	Symbol	p		5091884						
ANR	5091946	Symbol	* i		5091884						
ANR	5091947	Symbol	offset		5091884						
ANR	5091948	Symbol	* samples		5091884						
ANR	5091949	Symbol	pfn		5091884						
ANR	5091950	Symbol	i		5091884						
ANR	5091951	Symbol	* p		5091884						
ANR	5091952	Symbol	samples		5091884						
ANR	5091953	Symbol	n		5091884						
ANR	5091954	Function	fn_gets_24	150:0:4740:4974							
ANR	5091955	FunctionDef	"fn_gets_24 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		5091954	0					
ANR	5091956	CompoundStatement		152:0:4822:4974	5091954	0					
ANR	5091957	ExpressionStatement	"SETUP_SAMPLES ( 24 , n * 3 )"	153:4:4828:4852	5091954	0	True				
ANR	5091958	CallExpression	"SETUP_SAMPLES ( 24 , n * 3 )"		5091954	0					
ANR	5091959	Callee	SETUP_SAMPLES		5091954	0					
ANR	5091960	Identifier	SETUP_SAMPLES		5091954	0					
ANR	5091961	ArgumentList	24		5091954	1					
ANR	5091962	Argument	24		5091954	0					
ANR	5091963	PrimaryExpression	24		5091954	0					
ANR	5091964	Argument	n * 3		5091954	1					
ANR	5091965	MultiplicativeExpression	n * 3		5091954	0		*			
ANR	5091966	Identifier	n		5091954	0					
ANR	5091967	PrimaryExpression	3		5091954	1					
ANR	5091968	ForStatement	for ( i = 0 ; i < n ; ++ i )		5091954	1					
ANR	5091969	ForInit	i = 0 ;	154:9:4863:4868	5091954	0	True				
ANR	5091970	AssignmentExpression	i = 0		5091954	0		=			
ANR	5091971	Identifier	i		5091954	0					
ANR	5091972	PrimaryExpression	0		5091954	1					
ANR	5091973	Condition	i < n	154:16:4870:4874	5091954	1	True				
ANR	5091974	RelationalExpression	i < n		5091954	0		<			
ANR	5091975	Identifier	i		5091954	0					
ANR	5091976	Identifier	n		5091954	1					
ANR	5091977	UnaryExpression	++ i	154:23:4877:4879	5091954	2	True				
ANR	5091978	IncDec	++		5091954	0					
ANR	5091979	Identifier	i		5091954	1					
ANR	5091980	CompoundStatement		3:28:59:59	5091954	3					
ANR	5091981	ExpressionStatement	samples [ i ] = ( * p << 16 ) + ( p [ 1 ] << 8 ) + p [ 2 ]	155:8:4892:4936	5091954	0	True				
ANR	5091982	AssignmentExpression	samples [ i ] = ( * p << 16 ) + ( p [ 1 ] << 8 ) + p [ 2 ]		5091954	0		=			
ANR	5091983	ArrayIndexing	samples [ i ]		5091954	0					
ANR	5091984	Identifier	samples		5091954	0					
ANR	5091985	Identifier	i		5091954	1					
ANR	5091986	AdditiveExpression	( * p << 16 ) + ( p [ 1 ] << 8 ) + p [ 2 ]		5091954	1		+			
ANR	5091987	ShiftExpression	* p << 16		5091954	0		<<			
ANR	5091988	UnaryOperationExpression	* p		5091954	0					
ANR	5091989	UnaryOperator	*		5091954	0					
ANR	5091990	Identifier	p		5091954	1					
ANR	5091991	PrimaryExpression	16		5091954	1					
ANR	5091992	AdditiveExpression	( p [ 1 ] << 8 ) + p [ 2 ]		5091954	1		+			
ANR	5091993	ShiftExpression	p [ 1 ] << 8		5091954	0		<<			
ANR	5091994	ArrayIndexing	p [ 1 ]		5091954	0					
ANR	5091995	Identifier	p		5091954	0					
ANR	5091996	PrimaryExpression	1		5091954	1					
ANR	5091997	PrimaryExpression	8		5091954	1					
ANR	5091998	ArrayIndexing	p [ 2 ]		5091954	1					
ANR	5091999	Identifier	p		5091954	0					
ANR	5092000	PrimaryExpression	2		5091954	1					
ANR	5092001	ExpressionStatement	p += 3	156:8:4946:4952	5091954	1	True				
ANR	5092002	AssignmentExpression	p += 3		5091954	0		+=			
ANR	5092003	Identifier	p		5091954	0					
ANR	5092004	PrimaryExpression	3		5091954	1					
ANR	5092005	ReturnStatement	return 0 ;	158:4:4964:4972	5091954	2	True				
ANR	5092006	PrimaryExpression	0		5091954	0					
ANR	5092007	ReturnType	static int		5091954	1					
ANR	5092008	Identifier	fn_gets_24		5091954	2					
ANR	5092009	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		5091954	3					
ANR	5092010	Parameter	const gs_function_Sd_t * pfn	151:11:4762:4789	5091954	0	True				
ANR	5092011	ParameterType	const gs_function_Sd_t *		5091954	0					
ANR	5092012	Identifier	pfn		5091954	1					
ANR	5092013	Parameter	ulong offset	151:41:4792:4803	5091954	1	True				
ANR	5092014	ParameterType	ulong		5091954	0					
ANR	5092015	Identifier	offset		5091954	1					
ANR	5092016	Parameter	uint * samples	151:55:4806:4819	5091954	2	True				
ANR	5092017	ParameterType	uint *		5091954	0					
ANR	5092018	Identifier	samples		5091954	1					
ANR	5092019	CFGEntryNode	ENTRY		5091954		True				
ANR	5092020	CFGExitNode	EXIT		5091954		True				
ANR	5092021	Symbol	p		5091954						
ANR	5092022	Symbol	* i		5091954						
ANR	5092023	Symbol	offset		5091954						
ANR	5092024	Symbol	* samples		5091954						
ANR	5092025	Symbol	pfn		5091954						
ANR	5092026	Symbol	i		5091954						
ANR	5092027	Symbol	* p		5091954						
ANR	5092028	Symbol	samples		5091954						
ANR	5092029	Symbol	n		5091954						
ANR	5092030	Function	fn_gets_32	160:0:4976:5225							
ANR	5092031	FunctionDef	"fn_gets_32 (const gs_function_Sd_t * pfn , ulong offset , uint * samples)"		5092030	0					
ANR	5092032	CompoundStatement		162:0:5058:5225	5092030	0					
ANR	5092033	ExpressionStatement	"SETUP_SAMPLES ( 32 , n * 4 )"	163:4:5064:5088	5092030	0	True				
ANR	5092034	CallExpression	"SETUP_SAMPLES ( 32 , n * 4 )"		5092030	0					
ANR	5092035	Callee	SETUP_SAMPLES		5092030	0					
ANR	5092036	Identifier	SETUP_SAMPLES		5092030	0					
ANR	5092037	ArgumentList	32		5092030	1					
ANR	5092038	Argument	32		5092030	0					
ANR	5092039	PrimaryExpression	32		5092030	0					
ANR	5092040	Argument	n * 4		5092030	1					
ANR	5092041	MultiplicativeExpression	n * 4		5092030	0		*			
ANR	5092042	Identifier	n		5092030	0					
ANR	5092043	PrimaryExpression	4		5092030	1					
ANR	5092044	ForStatement	for ( i = 0 ; i < n ; ++ i )		5092030	1					
ANR	5092045	ForInit	i = 0 ;	164:9:5099:5104	5092030	0	True				
ANR	5092046	AssignmentExpression	i = 0		5092030	0		=			
ANR	5092047	Identifier	i		5092030	0					
ANR	5092048	PrimaryExpression	0		5092030	1					
ANR	5092049	Condition	i < n	164:16:5106:5110	5092030	1	True				
ANR	5092050	RelationalExpression	i < n		5092030	0		<			
ANR	5092051	Identifier	i		5092030	0					
ANR	5092052	Identifier	n		5092030	1					
ANR	5092053	UnaryExpression	++ i	164:23:5113:5115	5092030	2	True				
ANR	5092054	IncDec	++		5092030	0					
ANR	5092055	Identifier	i		5092030	1					
ANR	5092056	CompoundStatement		3:28:59:59	5092030	3					
ANR	5092057	ExpressionStatement	samples [ i ] = ( * p << 24 ) + ( p [ 1 ] << 16 ) + ( p [ 2 ] << 8 ) + p [ 3 ]	165:8:5128:5187	5092030	0	True				
ANR	5092058	AssignmentExpression	samples [ i ] = ( * p << 24 ) + ( p [ 1 ] << 16 ) + ( p [ 2 ] << 8 ) + p [ 3 ]		5092030	0		=			
ANR	5092059	ArrayIndexing	samples [ i ]		5092030	0					
ANR	5092060	Identifier	samples		5092030	0					
ANR	5092061	Identifier	i		5092030	1					
ANR	5092062	AdditiveExpression	( * p << 24 ) + ( p [ 1 ] << 16 ) + ( p [ 2 ] << 8 ) + p [ 3 ]		5092030	1		+			
ANR	5092063	ShiftExpression	* p << 24		5092030	0		<<			
ANR	5092064	UnaryOperationExpression	* p		5092030	0					
ANR	5092065	UnaryOperator	*		5092030	0					
ANR	5092066	Identifier	p		5092030	1					
ANR	5092067	PrimaryExpression	24		5092030	1					
ANR	5092068	AdditiveExpression	( p [ 1 ] << 16 ) + ( p [ 2 ] << 8 ) + p [ 3 ]		5092030	1		+			
ANR	5092069	ShiftExpression	p [ 1 ] << 16		5092030	0		<<			
ANR	5092070	ArrayIndexing	p [ 1 ]		5092030	0					
ANR	5092071	Identifier	p		5092030	0					
ANR	5092072	PrimaryExpression	1		5092030	1					
ANR	5092073	PrimaryExpression	16		5092030	1					
ANR	5092074	AdditiveExpression	( p [ 2 ] << 8 ) + p [ 3 ]		5092030	1		+			
ANR	5092075	ShiftExpression	p [ 2 ] << 8		5092030	0		<<			
ANR	5092076	ArrayIndexing	p [ 2 ]		5092030	0					
ANR	5092077	Identifier	p		5092030	0					
ANR	5092078	PrimaryExpression	2		5092030	1					
ANR	5092079	PrimaryExpression	8		5092030	1					
ANR	5092080	ArrayIndexing	p [ 3 ]		5092030	1					
ANR	5092081	Identifier	p		5092030	0					
ANR	5092082	PrimaryExpression	3		5092030	1					
ANR	5092083	ExpressionStatement	p += 4	166:8:5197:5203	5092030	1	True				
ANR	5092084	AssignmentExpression	p += 4		5092030	0		+=			
ANR	5092085	Identifier	p		5092030	0					
ANR	5092086	PrimaryExpression	4		5092030	1					
ANR	5092087	ReturnStatement	return 0 ;	168:4:5215:5223	5092030	2	True				
ANR	5092088	PrimaryExpression	0		5092030	0					
ANR	5092089	ReturnType	static int		5092030	1					
ANR	5092090	Identifier	fn_gets_32		5092030	2					
ANR	5092091	ParameterList	"const gs_function_Sd_t * pfn , ulong offset , uint * samples"		5092030	3					
ANR	5092092	Parameter	const gs_function_Sd_t * pfn	161:11:4998:5025	5092030	0	True				
ANR	5092093	ParameterType	const gs_function_Sd_t *		5092030	0					
ANR	5092094	Identifier	pfn		5092030	1					
ANR	5092095	Parameter	ulong offset	161:41:5028:5039	5092030	1	True				
ANR	5092096	ParameterType	ulong		5092030	0					
ANR	5092097	Identifier	offset		5092030	1					
ANR	5092098	Parameter	uint * samples	161:55:5042:5055	5092030	2	True				
ANR	5092099	ParameterType	uint *		5092030	0					
ANR	5092100	Identifier	samples		5092030	1					
ANR	5092101	CFGEntryNode	ENTRY		5092030		True				
ANR	5092102	CFGExitNode	EXIT		5092030		True				
ANR	5092103	Symbol	p		5092030						
ANR	5092104	Symbol	* i		5092030						
ANR	5092105	Symbol	offset		5092030						
ANR	5092106	Symbol	* samples		5092030						
ANR	5092107	Symbol	pfn		5092030						
ANR	5092108	Symbol	i		5092030						
ANR	5092109	Symbol	* p		5092030						
ANR	5092110	Symbol	samples		5092030						
ANR	5092111	Symbol	n		5092030						
ANR	5092112	Function	interpolate_cubic	188:0:5845:6637							
ANR	5092113	FunctionDef	"interpolate_cubic (double x , double f0 , double f1 , double f2 , double f3)"		5092112	0					
ANR	5092114	CompoundStatement		190:0:5931:6637	5092112	0					
ANR	5092115	Statement	define	195:1:6086:6091	5092112	0	True				
ANR	5092116	Statement	a	195:8:6093:6093	5092112	1	True				
ANR	5092117	Statement	(	195:10:6095:6095	5092112	2	True				
ANR	5092118	Statement	-	195:11:6096:6096	5092112	3	True				
ANR	5092119	Statement	0.5	195:12:6097:6099	5092112	4	True				
ANR	5092120	Statement	)	195:15:6100:6100	5092112	5	True				
ANR	5092121	Statement	define	196:1:6103:6108	5092112	6	True				
ANR	5092122	Statement	SQR	196:8:6110:6112	5092112	7	True				
ANR	5092123	Statement	(	196:11:6113:6113	5092112	8	True				
ANR	5092124	Statement	v	196:12:6114:6114	5092112	9	True				
ANR	5092125	Statement	)	196:13:6115:6115	5092112	10	True				
ANR	5092126	Statement	(	196:15:6117:6117	5092112	11	True				
ANR	5092127	Statement	(	196:16:6118:6118	5092112	12	True				
ANR	5092128	Statement	v	196:17:6119:6119	5092112	13	True				
ANR	5092129	Statement	)	196:18:6120:6120	5092112	14	True				
ANR	5092130	Statement	*	196:20:6122:6122	5092112	15	True				
ANR	5092131	Statement	(	196:22:6124:6124	5092112	16	True				
ANR	5092132	Statement	v	196:23:6125:6125	5092112	17	True				
ANR	5092133	Statement	)	196:24:6126:6126	5092112	18	True				
ANR	5092134	Statement	)	196:25:6127:6127	5092112	19	True				
ANR	5092135	Statement	define	197:1:6130:6135	5092112	20	True				
ANR	5092136	Statement	CUBE	197:8:6137:6140	5092112	21	True				
ANR	5092137	Statement	(	197:12:6141:6141	5092112	22	True				
ANR	5092138	Statement	v	197:13:6142:6142	5092112	23	True				
ANR	5092139	Statement	)	197:14:6143:6143	5092112	24	True				
ANR	5092140	Statement	(	197:16:6145:6145	5092112	25	True				
ANR	5092141	Statement	(	197:17:6146:6146	5092112	26	True				
ANR	5092142	Statement	v	197:18:6147:6147	5092112	27	True				
ANR	5092143	Statement	)	197:19:6148:6148	5092112	28	True				
ANR	5092144	Statement	*	197:21:6150:6150	5092112	29	True				
ANR	5092145	Statement	(	197:23:6152:6152	5092112	30	True				
ANR	5092146	Statement	v	197:24:6153:6153	5092112	31	True				
ANR	5092147	Statement	)	197:25:6154:6154	5092112	32	True				
ANR	5092148	Statement	*	197:27:6156:6156	5092112	33	True				
ANR	5092149	Statement	(	197:29:6158:6158	5092112	34	True				
ANR	5092150	Statement	v	197:30:6159:6159	5092112	35	True				
ANR	5092151	Statement	)	197:31:6160:6160	5092112	36	True				
ANR	5092152	Statement	)	197:32:6161:6161	5092112	37	True				
ANR	5092153	IdentifierDeclStatement	"const double xm1 = x - 1 , m2x = 2 - x , m3x = 3 - x ;"	198:4:6167:6217	5092112	38	True				
ANR	5092154	IdentifierDecl	xm1 = x - 1		5092112	0					
ANR	5092155	IdentifierDeclType	const double		5092112	0					
ANR	5092156	Identifier	xm1		5092112	1					
ANR	5092157	AssignmentExpression	xm1 = x - 1		5092112	2		=			
ANR	5092158	Identifier	xm1		5092112	0					
ANR	5092159	AdditiveExpression	x - 1		5092112	1		-			
ANR	5092160	Identifier	x		5092112	0					
ANR	5092161	PrimaryExpression	1		5092112	1					
ANR	5092162	IdentifierDecl	m2x = 2 - x		5092112	1					
ANR	5092163	IdentifierDeclType	const double		5092112	0					
ANR	5092164	Identifier	m2x		5092112	1					
ANR	5092165	AssignmentExpression	m2x = 2 - x		5092112	2		=			
ANR	5092166	Identifier	m2x		5092112	0					
ANR	5092167	AdditiveExpression	2 - x		5092112	1		-			
ANR	5092168	PrimaryExpression	2		5092112	0					
ANR	5092169	Identifier	x		5092112	1					
ANR	5092170	IdentifierDecl	m3x = 3 - x		5092112	2					
ANR	5092171	IdentifierDeclType	const double		5092112	0					
ANR	5092172	Identifier	m3x		5092112	1					
ANR	5092173	AssignmentExpression	m3x = 3 - x		5092112	2		=			
ANR	5092174	Identifier	m3x		5092112	0					
ANR	5092175	AdditiveExpression	3 - x		5092112	1		-			
ANR	5092176	PrimaryExpression	3		5092112	0					
ANR	5092177	Identifier	x		5092112	1					
ANR	5092178	IdentifierDeclStatement	const double c = ( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0 + ( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3 ;	199:4:6223:6491	5092112	39	True				
ANR	5092179	IdentifierDecl	c = ( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0 + ( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		5092112	0					
ANR	5092180	IdentifierDeclType	const double		5092112	0					
ANR	5092181	Identifier	c		5092112	1					
ANR	5092182	AssignmentExpression	c = ( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0 + ( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		5092112	2		=			
ANR	5092183	Identifier	c		5092112	0					
ANR	5092184	AdditiveExpression	( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0 + ( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		5092112	1		+			
ANR	5092185	MultiplicativeExpression	( a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a ) * f0		5092112	0		*			
ANR	5092186	AdditiveExpression	a * CUBE ( x ) - 5 * a * SQR ( x ) + 8 * a * x - 4 * a		5092112	0		-			
ANR	5092187	MultiplicativeExpression	a * CUBE ( x )		5092112	0		*			
ANR	5092188	Identifier	a		5092112	0					
ANR	5092189	CallExpression	CUBE ( x )		5092112	1					
ANR	5092190	Callee	CUBE		5092112	0					
ANR	5092191	Identifier	CUBE		5092112	0					
ANR	5092192	ArgumentList	x		5092112	1					
ANR	5092193	Argument	x		5092112	0					
ANR	5092194	Identifier	x		5092112	0					
ANR	5092195	AdditiveExpression	5 * a * SQR ( x ) + 8 * a * x - 4 * a		5092112	1		+			
ANR	5092196	MultiplicativeExpression	5 * a * SQR ( x )		5092112	0		*			
ANR	5092197	PrimaryExpression	5		5092112	0					
ANR	5092198	MultiplicativeExpression	a * SQR ( x )		5092112	1		*			
ANR	5092199	Identifier	a		5092112	0					
ANR	5092200	CallExpression	SQR ( x )		5092112	1					
ANR	5092201	Callee	SQR		5092112	0					
ANR	5092202	Identifier	SQR		5092112	0					
ANR	5092203	ArgumentList	x		5092112	1					
ANR	5092204	Argument	x		5092112	0					
ANR	5092205	Identifier	x		5092112	0					
ANR	5092206	AdditiveExpression	8 * a * x - 4 * a		5092112	1		-			
ANR	5092207	MultiplicativeExpression	8 * a * x		5092112	0		*			
ANR	5092208	PrimaryExpression	8		5092112	0					
ANR	5092209	MultiplicativeExpression	a * x		5092112	1		*			
ANR	5092210	Identifier	a		5092112	0					
ANR	5092211	Identifier	x		5092112	1					
ANR	5092212	MultiplicativeExpression	4 * a		5092112	1		*			
ANR	5092213	PrimaryExpression	4		5092112	0					
ANR	5092214	Identifier	a		5092112	1					
ANR	5092215	Identifier	f0		5092112	1					
ANR	5092216	AdditiveExpression	( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1 + ( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		5092112	1		+			
ANR	5092217	MultiplicativeExpression	( ( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1 ) * f1		5092112	0		*			
ANR	5092218	AdditiveExpression	( a + 2 ) * CUBE ( xm1 ) - ( a + 3 ) * SQR ( xm1 ) + 1		5092112	0		-			
ANR	5092219	MultiplicativeExpression	( a + 2 ) * CUBE ( xm1 )		5092112	0		*			
ANR	5092220	AdditiveExpression	a + 2		5092112	0		+			
ANR	5092221	Identifier	a		5092112	0					
ANR	5092222	PrimaryExpression	2		5092112	1					
ANR	5092223	CallExpression	CUBE ( xm1 )		5092112	1					
ANR	5092224	Callee	CUBE		5092112	0					
ANR	5092225	Identifier	CUBE		5092112	0					
ANR	5092226	ArgumentList	xm1		5092112	1					
ANR	5092227	Argument	xm1		5092112	0					
ANR	5092228	Identifier	xm1		5092112	0					
ANR	5092229	AdditiveExpression	( a + 3 ) * SQR ( xm1 ) + 1		5092112	1		+			
ANR	5092230	MultiplicativeExpression	( a + 3 ) * SQR ( xm1 )		5092112	0		*			
ANR	5092231	AdditiveExpression	a + 3		5092112	0		+			
ANR	5092232	Identifier	a		5092112	0					
ANR	5092233	PrimaryExpression	3		5092112	1					
ANR	5092234	CallExpression	SQR ( xm1 )		5092112	1					
ANR	5092235	Callee	SQR		5092112	0					
ANR	5092236	Identifier	SQR		5092112	0					
ANR	5092237	ArgumentList	xm1		5092112	1					
ANR	5092238	Argument	xm1		5092112	0					
ANR	5092239	Identifier	xm1		5092112	0					
ANR	5092240	PrimaryExpression	1		5092112	1					
ANR	5092241	Identifier	f1		5092112	1					
ANR	5092242	AdditiveExpression	( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2 + ( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		5092112	1		+			
ANR	5092243	MultiplicativeExpression	( ( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1 ) * f2		5092112	0		*			
ANR	5092244	AdditiveExpression	( a + 2 ) * CUBE ( m2x ) - ( a + 3 ) * SQR ( m2x ) + 1		5092112	0		-			
ANR	5092245	MultiplicativeExpression	( a + 2 ) * CUBE ( m2x )		5092112	0		*			
ANR	5092246	AdditiveExpression	a + 2		5092112	0		+			
ANR	5092247	Identifier	a		5092112	0					
ANR	5092248	PrimaryExpression	2		5092112	1					
ANR	5092249	CallExpression	CUBE ( m2x )		5092112	1					
ANR	5092250	Callee	CUBE		5092112	0					
ANR	5092251	Identifier	CUBE		5092112	0					
ANR	5092252	ArgumentList	m2x		5092112	1					
ANR	5092253	Argument	m2x		5092112	0					
ANR	5092254	Identifier	m2x		5092112	0					
ANR	5092255	AdditiveExpression	( a + 3 ) * SQR ( m2x ) + 1		5092112	1		+			
ANR	5092256	MultiplicativeExpression	( a + 3 ) * SQR ( m2x )		5092112	0		*			
ANR	5092257	AdditiveExpression	a + 3		5092112	0		+			
ANR	5092258	Identifier	a		5092112	0					
ANR	5092259	PrimaryExpression	3		5092112	1					
ANR	5092260	CallExpression	SQR ( m2x )		5092112	1					
ANR	5092261	Callee	SQR		5092112	0					
ANR	5092262	Identifier	SQR		5092112	0					
ANR	5092263	ArgumentList	m2x		5092112	1					
ANR	5092264	Argument	m2x		5092112	0					
ANR	5092265	Identifier	m2x		5092112	0					
ANR	5092266	PrimaryExpression	1		5092112	1					
ANR	5092267	Identifier	f2		5092112	1					
ANR	5092268	MultiplicativeExpression	( a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a ) * f3		5092112	1		*			
ANR	5092269	AdditiveExpression	a * CUBE ( m3x ) - 5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a		5092112	0		-			
ANR	5092270	MultiplicativeExpression	a * CUBE ( m3x )		5092112	0		*			
ANR	5092271	Identifier	a		5092112	0					
ANR	5092272	CallExpression	CUBE ( m3x )		5092112	1					
ANR	5092273	Callee	CUBE		5092112	0					
ANR	5092274	Identifier	CUBE		5092112	0					
ANR	5092275	ArgumentList	m3x		5092112	1					
ANR	5092276	Argument	m3x		5092112	0					
ANR	5092277	Identifier	m3x		5092112	0					
ANR	5092278	AdditiveExpression	5 * a * SQR ( m3x ) + 8 * a * m3x - 4 * a		5092112	1		+			
ANR	5092279	MultiplicativeExpression	5 * a * SQR ( m3x )		5092112	0		*			
ANR	5092280	PrimaryExpression	5		5092112	0					
ANR	5092281	MultiplicativeExpression	a * SQR ( m3x )		5092112	1		*			
ANR	5092282	Identifier	a		5092112	0					
ANR	5092283	CallExpression	SQR ( m3x )		5092112	1					
ANR	5092284	Callee	SQR		5092112	0					
ANR	5092285	Identifier	SQR		5092112	0					
ANR	5092286	ArgumentList	m3x		5092112	1					
ANR	5092287	Argument	m3x		5092112	0					
ANR	5092288	Identifier	m3x		5092112	0					
ANR	5092289	AdditiveExpression	8 * a * m3x - 4 * a		5092112	1		-			
ANR	5092290	MultiplicativeExpression	8 * a * m3x		5092112	0		*			
ANR	5092291	PrimaryExpression	8		5092112	0					
ANR	5092292	MultiplicativeExpression	a * m3x		5092112	1		*			
ANR	5092293	Identifier	a		5092112	0					
ANR	5092294	Identifier	m3x		5092112	1					
ANR	5092295	MultiplicativeExpression	4 * a		5092112	1		*			
ANR	5092296	PrimaryExpression	4		5092112	0					
ANR	5092297	Identifier	a		5092112	1					
ANR	5092298	Identifier	f3		5092112	1					
ANR	5092299	ExpressionStatement	"if_debug6 ( '~' , ""[~](%g, %g, %g, %g)order3(%g) => %g\\n"" , f0 , f1 , f2 , f3 , x , c )"	205:4:6498:6589	5092112	40	True				
ANR	5092300	CallExpression	"if_debug6 ( '~' , ""[~](%g, %g, %g, %g)order3(%g) => %g\\n"" , f0 , f1 , f2 , f3 , x , c )"		5092112	0					
ANR	5092301	Callee	if_debug6		5092112	0					
ANR	5092302	Identifier	if_debug6		5092112	0					
ANR	5092303	ArgumentList	'~'		5092112	1					
ANR	5092304	Argument	'~'		5092112	0					
ANR	5092305	PrimaryExpression	'~'		5092112	0					
ANR	5092306	Argument	"""[~](%g, %g, %g, %g)order3(%g) => %g\\n"""		5092112	1					
ANR	5092307	PrimaryExpression	"""[~](%g, %g, %g, %g)order3(%g) => %g\\n"""		5092112	0					
ANR	5092308	Argument	f0		5092112	2					
ANR	5092309	Identifier	f0		5092112	0					
ANR	5092310	Argument	f1		5092112	3					
ANR	5092311	Identifier	f1		5092112	0					
ANR	5092312	Argument	f2		5092112	4					
ANR	5092313	Identifier	f2		5092112	0					
ANR	5092314	Argument	f3		5092112	5					
ANR	5092315	Identifier	f3		5092112	0					
ANR	5092316	Argument	x		5092112	6					
ANR	5092317	Identifier	x		5092112	0					
ANR	5092318	Argument	c		5092112	7					
ANR	5092319	Identifier	c		5092112	0					
ANR	5092320	ReturnStatement	return c ;	207:4:6595:6603	5092112	41	True				
ANR	5092321	Identifier	c		5092112	0					
ANR	5092322	Statement	undef	208:1:6606:6610	5092112	42	True				
ANR	5092323	Statement	a	208:7:6612:6612	5092112	43	True				
ANR	5092324	Statement	undef	209:1:6615:6619	5092112	44	True				
ANR	5092325	Statement	SQR	209:7:6621:6623	5092112	45	True				
ANR	5092326	Statement	undef	210:1:6626:6630	5092112	46	True				
ANR	5092327	Statement	CUBE	210:7:6632:6635	5092112	47	True				
ANR	5092328	ReturnType	static double		5092112	1					
ANR	5092329	Identifier	interpolate_cubic		5092112	2					
ANR	5092330	ParameterList	"double x , double f0 , double f1 , double f2 , double f3"		5092112	3					
ANR	5092331	Parameter	double x	189:18:5877:5884	5092112	0	True				
ANR	5092332	ParameterType	double		5092112	0					
ANR	5092333	Identifier	x		5092112	1					
ANR	5092334	Parameter	double f0	189:28:5887:5895	5092112	1	True				
ANR	5092335	ParameterType	double		5092112	0					
ANR	5092336	Identifier	f0		5092112	1					
ANR	5092337	Parameter	double f1	189:39:5898:5906	5092112	2	True				
ANR	5092338	ParameterType	double		5092112	0					
ANR	5092339	Identifier	f1		5092112	1					
ANR	5092340	Parameter	double f2	189:50:5909:5917	5092112	3	True				
ANR	5092341	ParameterType	double		5092112	0					
ANR	5092342	Identifier	f2		5092112	1					
ANR	5092343	Parameter	double f3	189:61:5920:5928	5092112	4	True				
ANR	5092344	ParameterType	double		5092112	0					
ANR	5092345	Identifier	f3		5092112	1					
ANR	5092346	CFGEntryNode	ENTRY		5092112		True				
ANR	5092347	CFGExitNode	EXIT		5092112		True				
ANR	5092348	Symbol	a		5092112						
ANR	5092349	Symbol	m2x		5092112						
ANR	5092350	Symbol	m3x		5092112						
ANR	5092351	Symbol	c		5092112						
ANR	5092352	Symbol	SQR		5092112						
ANR	5092353	Symbol	x		5092112						
ANR	5092354	Symbol	f0		5092112						
ANR	5092355	Symbol	CUBE		5092112						
ANR	5092356	Symbol	f1		5092112						
ANR	5092357	Symbol	f2		5092112						
ANR	5092358	Symbol	f3		5092112						
ANR	5092359	Symbol	xm1		5092112						
ANR	5092360	Function	interpolate_quadratic	221:0:6910:7051							
ANR	5092361	FunctionDef	"interpolate_quadratic (double x , double f0 , double f1 , double f2)"		5092360	0					
ANR	5092362	CompoundStatement		223:0:6996:7051	5092360	0					
ANR	5092363	ReturnStatement	"return interpolate_cubic ( x + 1 , f0 , f0 , f1 , f2 ) ;"	224:4:7002:7049	5092360	0	True				
ANR	5092364	CallExpression	"interpolate_cubic ( x + 1 , f0 , f0 , f1 , f2 )"		5092360	0					
ANR	5092365	Callee	interpolate_cubic		5092360	0					
ANR	5092366	Identifier	interpolate_cubic		5092360	0					
ANR	5092367	ArgumentList	x + 1		5092360	1					
ANR	5092368	Argument	x + 1		5092360	0					
ANR	5092369	AdditiveExpression	x + 1		5092360	0		+			
ANR	5092370	Identifier	x		5092360	0					
ANR	5092371	PrimaryExpression	1		5092360	1					
ANR	5092372	Argument	f0		5092360	1					
ANR	5092373	Identifier	f0		5092360	0					
ANR	5092374	Argument	f0		5092360	2					
ANR	5092375	Identifier	f0		5092360	0					
ANR	5092376	Argument	f1		5092360	3					
ANR	5092377	Identifier	f1		5092360	0					
ANR	5092378	Argument	f2		5092360	4					
ANR	5092379	Identifier	f2		5092360	0					
ANR	5092380	ReturnType	static inline double		5092360	1					
ANR	5092381	Identifier	interpolate_quadratic		5092360	2					
ANR	5092382	ParameterList	"double x , double f0 , double f1 , double f2"		5092360	3					
ANR	5092383	Parameter	double x	222:22:6953:6960	5092360	0	True				
ANR	5092384	ParameterType	double		5092360	0					
ANR	5092385	Identifier	x		5092360	1					
ANR	5092386	Parameter	double f0	222:32:6963:6971	5092360	1	True				
ANR	5092387	ParameterType	double		5092360	0					
ANR	5092388	Identifier	f0		5092360	1					
ANR	5092389	Parameter	double f1	222:43:6974:6982	5092360	2	True				
ANR	5092390	ParameterType	double		5092360	0					
ANR	5092391	Identifier	f1		5092360	1					
ANR	5092392	Parameter	double f2	222:54:6985:6993	5092360	3	True				
ANR	5092393	ParameterType	double		5092360	0					
ANR	5092394	Identifier	f2		5092360	1					
ANR	5092395	CFGEntryNode	ENTRY		5092360		True				
ANR	5092396	CFGExitNode	EXIT		5092360		True				
ANR	5092397	Symbol	interpolate_cubic		5092360						
ANR	5092398	Symbol	x		5092360						
ANR	5092399	Symbol	f0		5092360						
ANR	5092400	Symbol	f1		5092360						
ANR	5092401	Symbol	f2		5092360						
ANR	5092402	Function	fn_interpolate_cubic	228:0:7108:9857							
ANR	5092403	FunctionDef	"fn_interpolate_cubic (const gs_function_Sd_t * pfn , const float * fparts , const int * iparts , const ulong * factors , float * samples , ulong offset , int m)"		5092402	0					
ANR	5092404	CompoundStatement		232:0:7311:9857	5092402	0					
ANR	5092405	IdentifierDeclStatement	int j ;	233:4:7317:7322	5092402	0	True				
ANR	5092406	IdentifierDecl	j		5092402	0					
ANR	5092407	IdentifierDeclType	int		5092402	0					
ANR	5092408	Identifier	j		5092402	1					
ANR	5092409	Label	top :	235:0:7325:7328	5092402	1	True				
ANR	5092410	Identifier	top		5092402	0					
ANR	5092411	IfStatement	if ( m == 0 )		5092402	2					
ANR	5092412	Condition	m == 0	236:8:7338:7343	5092402	0	True				
ANR	5092413	EqualityExpression	m == 0		5092402	0		==			
ANR	5092414	Identifier	m		5092402	0					
ANR	5092415	PrimaryExpression	0		5092402	1					
ANR	5092416	CompoundStatement		6:8:44:64	5092402	1					
ANR	5092417	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	237:8:7356:7376	5092402	0	True				
ANR	5092418	IdentifierDecl	sdata [ max_Sd_n ]		5092402	0					
ANR	5092419	IdentifierDeclType	uint [ max_Sd_n ]		5092402	0					
ANR	5092420	Identifier	sdata		5092402	1					
ANR	5092421	Identifier	max_Sd_n		5092402	2					
ANR	5092422	ExpressionStatement	"( * fn_get_samples [ pfn -> params . BitsPerSample ] ) ( pfn , offset , sdata )"	239:8:7387:7451	5092402	1	True				
ANR	5092423	CallExpression	"( * fn_get_samples [ pfn -> params . BitsPerSample ] ) ( pfn , offset , sdata )"		5092402	0					
ANR	5092424	Callee	* fn_get_samples [ pfn -> params . BitsPerSample ]		5092402	0					
ANR	5092425	UnaryOperationExpression	* fn_get_samples [ pfn -> params . BitsPerSample ]		5092402	0					
ANR	5092426	UnaryOperator	*		5092402	0					
ANR	5092427	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		5092402	1					
ANR	5092428	Identifier	fn_get_samples		5092402	0					
ANR	5092429	MemberAccess	pfn -> params . BitsPerSample		5092402	1					
ANR	5092430	PtrMemberAccess	pfn -> params		5092402	0					
ANR	5092431	Identifier	pfn		5092402	0					
ANR	5092432	Identifier	params		5092402	1					
ANR	5092433	Identifier	BitsPerSample		5092402	1					
ANR	5092434	ArgumentList	pfn		5092402	1					
ANR	5092435	Argument	pfn		5092402	0					
ANR	5092436	Identifier	pfn		5092402	0					
ANR	5092437	Argument	offset		5092402	1					
ANR	5092438	Identifier	offset		5092402	0					
ANR	5092439	Argument	sdata		5092402	2					
ANR	5092440	Identifier	sdata		5092402	0					
ANR	5092441	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		5092402	2					
ANR	5092442	ForInit	j = pfn -> params . n - 1 ;	240:13:7466:7487	5092402	0	True				
ANR	5092443	AssignmentExpression	j = pfn -> params . n - 1		5092402	0		=			
ANR	5092444	Identifier	j		5092402	0					
ANR	5092445	AdditiveExpression	pfn -> params . n - 1		5092402	1		-			
ANR	5092446	MemberAccess	pfn -> params . n		5092402	0					
ANR	5092447	PtrMemberAccess	pfn -> params		5092402	0					
ANR	5092448	Identifier	pfn		5092402	0					
ANR	5092449	Identifier	params		5092402	1					
ANR	5092450	Identifier	n		5092402	1					
ANR	5092451	PrimaryExpression	1		5092402	1					
ANR	5092452	Condition	j >= 0	240:36:7489:7494	5092402	1	True				
ANR	5092453	RelationalExpression	j >= 0		5092402	0		>=			
ANR	5092454	Identifier	j		5092402	0					
ANR	5092455	PrimaryExpression	0		5092402	1					
ANR	5092456	UnaryExpression	-- j	240:44:7497:7499	5092402	2	True				
ANR	5092457	IncDec	--		5092402	0					
ANR	5092458	Identifier	j		5092402	1					
ANR	5092459	ExpressionStatement	samples [ j ] = ( float ) sdata [ j ]	241:12:7514:7542	5092402	3	True				
ANR	5092460	AssignmentExpression	samples [ j ] = ( float ) sdata [ j ]		5092402	0		=			
ANR	5092461	ArrayIndexing	samples [ j ]		5092402	0					
ANR	5092462	Identifier	samples		5092402	0					
ANR	5092463	Identifier	j		5092402	1					
ANR	5092464	CastExpression	( float ) sdata [ j ]		5092402	1					
ANR	5092465	CastTarget	float		5092402	0					
ANR	5092466	ArrayIndexing	sdata [ j ]		5092402	1					
ANR	5092467	Identifier	sdata		5092402	0					
ANR	5092468	Identifier	j		5092402	1					
ANR	5092469	ElseStatement	else		5092402	0					
ANR	5092470	CompoundStatement		16:8:407:472	5092402	0					
ANR	5092471	IdentifierDeclStatement	float fpart = * fparts ++ ;	243:8:7565:7588	5092402	0	True				
ANR	5092472	IdentifierDecl	fpart = * fparts ++		5092402	0					
ANR	5092473	IdentifierDeclType	float		5092402	0					
ANR	5092474	Identifier	fpart		5092402	1					
ANR	5092475	AssignmentExpression	fpart = * fparts ++		5092402	2		=			
ANR	5092476	Identifier	fpart		5092402	0					
ANR	5092477	UnaryOperationExpression	* fparts ++		5092402	1					
ANR	5092478	UnaryOperator	*		5092402	0					
ANR	5092479	PostIncDecOperationExpression	fparts ++		5092402	1					
ANR	5092480	Identifier	fparts		5092402	0					
ANR	5092481	IncDec	++		5092402	1					
ANR	5092482	IdentifierDeclStatement	int ipart = * iparts ++ ;	244:8:7598:7619	5092402	1	True				
ANR	5092483	IdentifierDecl	ipart = * iparts ++		5092402	0					
ANR	5092484	IdentifierDeclType	int		5092402	0					
ANR	5092485	Identifier	ipart		5092402	1					
ANR	5092486	AssignmentExpression	ipart = * iparts ++		5092402	2		=			
ANR	5092487	Identifier	ipart		5092402	0					
ANR	5092488	UnaryOperationExpression	* iparts ++		5092402	1					
ANR	5092489	UnaryOperator	*		5092402	0					
ANR	5092490	PostIncDecOperationExpression	iparts ++		5092402	1					
ANR	5092491	Identifier	iparts		5092402	0					
ANR	5092492	IncDec	++		5092402	1					
ANR	5092493	IdentifierDeclStatement	ulong delta = * factors ++ ;	245:8:7629:7653	5092402	2	True				
ANR	5092494	IdentifierDecl	delta = * factors ++		5092402	0					
ANR	5092495	IdentifierDeclType	ulong		5092402	0					
ANR	5092496	Identifier	delta		5092402	1					
ANR	5092497	AssignmentExpression	delta = * factors ++		5092402	2		=			
ANR	5092498	Identifier	delta		5092402	0					
ANR	5092499	UnaryOperationExpression	* factors ++		5092402	1					
ANR	5092500	UnaryOperator	*		5092402	0					
ANR	5092501	PostIncDecOperationExpression	factors ++		5092402	1					
ANR	5092502	Identifier	factors		5092402	0					
ANR	5092503	IncDec	++		5092402	1					
ANR	5092504	IdentifierDeclStatement	int size = pfn -> params . Size [ pfn -> params . m - m ] ;	246:8:7663:7709	5092402	3	True				
ANR	5092505	IdentifierDecl	size = pfn -> params . Size [ pfn -> params . m - m ]		5092402	0					
ANR	5092506	IdentifierDeclType	int		5092402	0					
ANR	5092507	Identifier	size		5092402	1					
ANR	5092508	AssignmentExpression	size = pfn -> params . Size [ pfn -> params . m - m ]		5092402	2		=			
ANR	5092509	Identifier	size		5092402	0					
ANR	5092510	ArrayIndexing	pfn -> params . Size [ pfn -> params . m - m ]		5092402	1					
ANR	5092511	MemberAccess	pfn -> params . Size		5092402	0					
ANR	5092512	PtrMemberAccess	pfn -> params		5092402	0					
ANR	5092513	Identifier	pfn		5092402	0					
ANR	5092514	Identifier	params		5092402	1					
ANR	5092515	Identifier	Size		5092402	1					
ANR	5092516	AdditiveExpression	pfn -> params . m - m		5092402	1		-			
ANR	5092517	MemberAccess	pfn -> params . m		5092402	0					
ANR	5092518	PtrMemberAccess	pfn -> params		5092402	0					
ANR	5092519	Identifier	pfn		5092402	0					
ANR	5092520	Identifier	params		5092402	1					
ANR	5092521	Identifier	m		5092402	1					
ANR	5092522	Identifier	m		5092402	1					
ANR	5092523	IdentifierDeclStatement	"float samples1 [ max_Sd_n ] , samplesm1 [ max_Sd_n ] , samples2 [ max_Sd_n ] ;"	247:8:7719:7784	5092402	4	True				
ANR	5092524	IdentifierDecl	samples1 [ max_Sd_n ]		5092402	0					
ANR	5092525	IdentifierDeclType	float [ max_Sd_n ]		5092402	0					
ANR	5092526	Identifier	samples1		5092402	1					
ANR	5092527	Identifier	max_Sd_n		5092402	2					
ANR	5092528	IdentifierDecl	samplesm1 [ max_Sd_n ]		5092402	1					
ANR	5092529	IdentifierDeclType	float [ max_Sd_n ]		5092402	0					
ANR	5092530	Identifier	samplesm1		5092402	1					
ANR	5092531	Identifier	max_Sd_n		5092402	2					
ANR	5092532	IdentifierDecl	samples2 [ max_Sd_n ]		5092402	2					
ANR	5092533	IdentifierDeclType	float [ max_Sd_n ]		5092402	0					
ANR	5092534	Identifier	samples2		5092402	1					
ANR	5092535	Identifier	max_Sd_n		5092402	2					
ANR	5092536	ExpressionStatement	-- m	249:8:7795:7798	5092402	5	True				
ANR	5092537	UnaryExpression	-- m		5092402	0					
ANR	5092538	IncDec	--		5092402	0					
ANR	5092539	Identifier	m		5092402	1					
ANR	5092540	IfStatement	if ( is_fzero ( fpart ) )		5092402	6					
ANR	5092541	Condition	is_fzero ( fpart )	250:12:7812:7826	5092402	0	True				
ANR	5092542	CallExpression	is_fzero ( fpart )		5092402	0					
ANR	5092543	Callee	is_fzero		5092402	0					
ANR	5092544	Identifier	is_fzero		5092402	0					
ANR	5092545	ArgumentList	fpart		5092402	1					
ANR	5092546	Argument	fpart		5092402	0					
ANR	5092547	Identifier	fpart		5092402	0					
ANR	5092548	GotoStatement	goto top ;	251:12:7841:7849	5092402	1	True				
ANR	5092549	Identifier	top		5092402	0					
ANR	5092550	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples , offset , m )"	252:8:7859:7958	5092402	7	True				
ANR	5092551	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples , offset , m )"		5092402	0					
ANR	5092552	Callee	fn_interpolate_cubic		5092402	0					
ANR	5092553	Identifier	fn_interpolate_cubic		5092402	0					
ANR	5092554	ArgumentList	pfn		5092402	1					
ANR	5092555	Argument	pfn		5092402	0					
ANR	5092556	Identifier	pfn		5092402	0					
ANR	5092557	Argument	fparts		5092402	1					
ANR	5092558	Identifier	fparts		5092402	0					
ANR	5092559	Argument	iparts		5092402	2					
ANR	5092560	Identifier	iparts		5092402	0					
ANR	5092561	Argument	factors		5092402	3					
ANR	5092562	Identifier	factors		5092402	0					
ANR	5092563	Argument	samples		5092402	4					
ANR	5092564	Identifier	samples		5092402	0					
ANR	5092565	Argument	offset		5092402	5					
ANR	5092566	Identifier	offset		5092402	0					
ANR	5092567	Argument	m		5092402	6					
ANR	5092568	Identifier	m		5092402	0					
ANR	5092569	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples1 , offset + delta , m )"	254:8:7968:8076	5092402	8	True				
ANR	5092570	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples1 , offset + delta , m )"		5092402	0					
ANR	5092571	Callee	fn_interpolate_cubic		5092402	0					
ANR	5092572	Identifier	fn_interpolate_cubic		5092402	0					
ANR	5092573	ArgumentList	pfn		5092402	1					
ANR	5092574	Argument	pfn		5092402	0					
ANR	5092575	Identifier	pfn		5092402	0					
ANR	5092576	Argument	fparts		5092402	1					
ANR	5092577	Identifier	fparts		5092402	0					
ANR	5092578	Argument	iparts		5092402	2					
ANR	5092579	Identifier	iparts		5092402	0					
ANR	5092580	Argument	factors		5092402	3					
ANR	5092581	Identifier	factors		5092402	0					
ANR	5092582	Argument	samples1		5092402	4					
ANR	5092583	Identifier	samples1		5092402	0					
ANR	5092584	Argument	offset + delta		5092402	5					
ANR	5092585	AdditiveExpression	offset + delta		5092402	0		+			
ANR	5092586	Identifier	offset		5092402	0					
ANR	5092587	Identifier	delta		5092402	1					
ANR	5092588	Argument	m		5092402	6					
ANR	5092589	Identifier	m		5092402	0					
ANR	5092590	IfStatement	if ( size == 2 )		5092402	9					
ANR	5092591	Condition	size == 2	261:12:8294:8302	5092402	0	True				
ANR	5092592	EqualityExpression	size == 2		5092402	0		==			
ANR	5092593	Identifier	size		5092402	0					
ANR	5092594	PrimaryExpression	2		5092402	1					
ANR	5092595	CompoundStatement		30:23:993:993	5092402	1					
ANR	5092596	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		5092402	0					
ANR	5092597	ForInit	j = pfn -> params . n - 1 ;	263:17:8384:8405	5092402	0	True				
ANR	5092598	AssignmentExpression	j = pfn -> params . n - 1		5092402	0		=			
ANR	5092599	Identifier	j		5092402	0					
ANR	5092600	AdditiveExpression	pfn -> params . n - 1		5092402	1		-			
ANR	5092601	MemberAccess	pfn -> params . n		5092402	0					
ANR	5092602	PtrMemberAccess	pfn -> params		5092402	0					
ANR	5092603	Identifier	pfn		5092402	0					
ANR	5092604	Identifier	params		5092402	1					
ANR	5092605	Identifier	n		5092402	1					
ANR	5092606	PrimaryExpression	1		5092402	1					
ANR	5092607	Condition	j >= 0	263:40:8407:8412	5092402	1	True				
ANR	5092608	RelationalExpression	j >= 0		5092402	0		>=			
ANR	5092609	Identifier	j		5092402	0					
ANR	5092610	PrimaryExpression	0		5092402	1					
ANR	5092611	UnaryExpression	-- j	263:48:8415:8417	5092402	2	True				
ANR	5092612	IncDec	--		5092402	0					
ANR	5092613	Identifier	j		5092402	1					
ANR	5092614	ExpressionStatement	samples [ j ] += ( samples1 [ j ] - samples [ j ] ) * fpart	264:16:8436:8484	5092402	3	True				
ANR	5092615	AssignmentExpression	samples [ j ] += ( samples1 [ j ] - samples [ j ] ) * fpart		5092402	0		+=			
ANR	5092616	ArrayIndexing	samples [ j ]		5092402	0					
ANR	5092617	Identifier	samples		5092402	0					
ANR	5092618	Identifier	j		5092402	1					
ANR	5092619	MultiplicativeExpression	( samples1 [ j ] - samples [ j ] ) * fpart		5092402	1		*			
ANR	5092620	AdditiveExpression	samples1 [ j ] - samples [ j ]		5092402	0		-			
ANR	5092621	ArrayIndexing	samples1 [ j ]		5092402	0					
ANR	5092622	Identifier	samples1		5092402	0					
ANR	5092623	Identifier	j		5092402	1					
ANR	5092624	ArrayIndexing	samples [ j ]		5092402	1					
ANR	5092625	Identifier	samples		5092402	0					
ANR	5092626	Identifier	j		5092402	1					
ANR	5092627	Identifier	fpart		5092402	1					
ANR	5092628	ReturnStatement	return ;	265:12:8498:8504	5092402	1	True				
ANR	5092629	IfStatement	if ( ipart == 0 )		5092402	10					
ANR	5092630	Condition	ipart == 0	267:12:8528:8537	5092402	0	True				
ANR	5092631	EqualityExpression	ipart == 0		5092402	0		==			
ANR	5092632	Identifier	ipart		5092402	0					
ANR	5092633	PrimaryExpression	0		5092402	1					
ANR	5092634	CompoundStatement		36:24:1228:1228	5092402	1					
ANR	5092635	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples2 , offset + delta * 2 , m )"	269:12:8601:8717	5092402	0	True				
ANR	5092636	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples2 , offset + delta * 2 , m )"		5092402	0					
ANR	5092637	Callee	fn_interpolate_cubic		5092402	0					
ANR	5092638	Identifier	fn_interpolate_cubic		5092402	0					
ANR	5092639	ArgumentList	pfn		5092402	1					
ANR	5092640	Argument	pfn		5092402	0					
ANR	5092641	Identifier	pfn		5092402	0					
ANR	5092642	Argument	fparts		5092402	1					
ANR	5092643	Identifier	fparts		5092402	0					
ANR	5092644	Argument	iparts		5092402	2					
ANR	5092645	Identifier	iparts		5092402	0					
ANR	5092646	Argument	factors		5092402	3					
ANR	5092647	Identifier	factors		5092402	0					
ANR	5092648	Argument	samples2		5092402	4					
ANR	5092649	Identifier	samples2		5092402	0					
ANR	5092650	Argument	offset + delta * 2		5092402	5					
ANR	5092651	AdditiveExpression	offset + delta * 2		5092402	0		+			
ANR	5092652	Identifier	offset		5092402	0					
ANR	5092653	MultiplicativeExpression	delta * 2		5092402	1		*			
ANR	5092654	Identifier	delta		5092402	0					
ANR	5092655	PrimaryExpression	2		5092402	1					
ANR	5092656	Argument	m		5092402	6					
ANR	5092657	Identifier	m		5092402	0					
ANR	5092658	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		5092402	1					
ANR	5092659	ForInit	j = pfn -> params . n - 1 ;	271:17:8736:8757	5092402	0	True				
ANR	5092660	AssignmentExpression	j = pfn -> params . n - 1		5092402	0		=			
ANR	5092661	Identifier	j		5092402	0					
ANR	5092662	AdditiveExpression	pfn -> params . n - 1		5092402	1		-			
ANR	5092663	MemberAccess	pfn -> params . n		5092402	0					
ANR	5092664	PtrMemberAccess	pfn -> params		5092402	0					
ANR	5092665	Identifier	pfn		5092402	0					
ANR	5092666	Identifier	params		5092402	1					
ANR	5092667	Identifier	n		5092402	1					
ANR	5092668	PrimaryExpression	1		5092402	1					
ANR	5092669	Condition	j >= 0	271:40:8759:8764	5092402	1	True				
ANR	5092670	RelationalExpression	j >= 0		5092402	0		>=			
ANR	5092671	Identifier	j		5092402	0					
ANR	5092672	PrimaryExpression	0		5092402	1					
ANR	5092673	UnaryExpression	-- j	271:48:8767:8769	5092402	2	True				
ANR	5092674	IncDec	--		5092402	0					
ANR	5092675	Identifier	j		5092402	1					
ANR	5092676	ExpressionStatement	"samples [ j ] = interpolate_quadratic ( fpart , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"	272:16:8788:8929	5092402	3	True				
ANR	5092677	AssignmentExpression	"samples [ j ] = interpolate_quadratic ( fpart , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"		5092402	0		=			
ANR	5092678	ArrayIndexing	samples [ j ]		5092402	0					
ANR	5092679	Identifier	samples		5092402	0					
ANR	5092680	Identifier	j		5092402	1					
ANR	5092681	CallExpression	"interpolate_quadratic ( fpart , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"		5092402	1					
ANR	5092682	Callee	interpolate_quadratic		5092402	0					
ANR	5092683	Identifier	interpolate_quadratic		5092402	0					
ANR	5092684	ArgumentList	fpart		5092402	1					
ANR	5092685	Argument	fpart		5092402	0					
ANR	5092686	Identifier	fpart		5092402	0					
ANR	5092687	Argument	samples [ j ]		5092402	1					
ANR	5092688	ArrayIndexing	samples [ j ]		5092402	0					
ANR	5092689	Identifier	samples		5092402	0					
ANR	5092690	Identifier	j		5092402	1					
ANR	5092691	Argument	samples1 [ j ]		5092402	2					
ANR	5092692	ArrayIndexing	samples1 [ j ]		5092402	0					
ANR	5092693	Identifier	samples1		5092402	0					
ANR	5092694	Identifier	j		5092402	1					
ANR	5092695	Argument	samples2 [ j ]		5092402	3					
ANR	5092696	ArrayIndexing	samples2 [ j ]		5092402	0					
ANR	5092697	Identifier	samples2		5092402	0					
ANR	5092698	Identifier	j		5092402	1					
ANR	5092699	ReturnStatement	return ;	275:12:8943:8949	5092402	2	True				
ANR	5092700	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samplesm1 , offset - delta , m )"	278:8:9027:9136	5092402	11	True				
ANR	5092701	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samplesm1 , offset - delta , m )"		5092402	0					
ANR	5092702	Callee	fn_interpolate_cubic		5092402	0					
ANR	5092703	Identifier	fn_interpolate_cubic		5092402	0					
ANR	5092704	ArgumentList	pfn		5092402	1					
ANR	5092705	Argument	pfn		5092402	0					
ANR	5092706	Identifier	pfn		5092402	0					
ANR	5092707	Argument	fparts		5092402	1					
ANR	5092708	Identifier	fparts		5092402	0					
ANR	5092709	Argument	iparts		5092402	2					
ANR	5092710	Identifier	iparts		5092402	0					
ANR	5092711	Argument	factors		5092402	3					
ANR	5092712	Identifier	factors		5092402	0					
ANR	5092713	Argument	samplesm1		5092402	4					
ANR	5092714	Identifier	samplesm1		5092402	0					
ANR	5092715	Argument	offset - delta		5092402	5					
ANR	5092716	AdditiveExpression	offset - delta		5092402	0		-			
ANR	5092717	Identifier	offset		5092402	0					
ANR	5092718	Identifier	delta		5092402	1					
ANR	5092719	Argument	m		5092402	6					
ANR	5092720	Identifier	m		5092402	0					
ANR	5092721	IfStatement	if ( ipart == size - 2 )		5092402	12					
ANR	5092722	Condition	ipart == size - 2	280:12:9150:9166	5092402	0	True				
ANR	5092723	EqualityExpression	ipart == size - 2		5092402	0		==			
ANR	5092724	Identifier	ipart		5092402	0					
ANR	5092725	AdditiveExpression	size - 2		5092402	1		-			
ANR	5092726	Identifier	size		5092402	0					
ANR	5092727	PrimaryExpression	2		5092402	1					
ANR	5092728	CompoundStatement		49:31:1857:1857	5092402	1					
ANR	5092729	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		5092402	0					
ANR	5092730	ForInit	j = pfn -> params . n - 1 ;	282:17:9235:9256	5092402	0	True				
ANR	5092731	AssignmentExpression	j = pfn -> params . n - 1		5092402	0		=			
ANR	5092732	Identifier	j		5092402	0					
ANR	5092733	AdditiveExpression	pfn -> params . n - 1		5092402	1		-			
ANR	5092734	MemberAccess	pfn -> params . n		5092402	0					
ANR	5092735	PtrMemberAccess	pfn -> params		5092402	0					
ANR	5092736	Identifier	pfn		5092402	0					
ANR	5092737	Identifier	params		5092402	1					
ANR	5092738	Identifier	n		5092402	1					
ANR	5092739	PrimaryExpression	1		5092402	1					
ANR	5092740	Condition	j >= 0	282:40:9258:9263	5092402	1	True				
ANR	5092741	RelationalExpression	j >= 0		5092402	0		>=			
ANR	5092742	Identifier	j		5092402	0					
ANR	5092743	PrimaryExpression	0		5092402	1					
ANR	5092744	UnaryExpression	-- j	282:48:9266:9268	5092402	2	True				
ANR	5092745	IncDec	--		5092402	0					
ANR	5092746	Identifier	j		5092402	1					
ANR	5092747	ExpressionStatement	"samples [ j ] = interpolate_quadratic ( 1 - fpart , samples1 [ j ] , samples [ j ] , samplesm1 [ j ] )"	283:16:9287:9433	5092402	3	True				
ANR	5092748	AssignmentExpression	"samples [ j ] = interpolate_quadratic ( 1 - fpart , samples1 [ j ] , samples [ j ] , samplesm1 [ j ] )"		5092402	0		=			
ANR	5092749	ArrayIndexing	samples [ j ]		5092402	0					
ANR	5092750	Identifier	samples		5092402	0					
ANR	5092751	Identifier	j		5092402	1					
ANR	5092752	CallExpression	"interpolate_quadratic ( 1 - fpart , samples1 [ j ] , samples [ j ] , samplesm1 [ j ] )"		5092402	1					
ANR	5092753	Callee	interpolate_quadratic		5092402	0					
ANR	5092754	Identifier	interpolate_quadratic		5092402	0					
ANR	5092755	ArgumentList	1 - fpart		5092402	1					
ANR	5092756	Argument	1 - fpart		5092402	0					
ANR	5092757	AdditiveExpression	1 - fpart		5092402	0		-			
ANR	5092758	PrimaryExpression	1		5092402	0					
ANR	5092759	Identifier	fpart		5092402	1					
ANR	5092760	Argument	samples1 [ j ]		5092402	1					
ANR	5092761	ArrayIndexing	samples1 [ j ]		5092402	0					
ANR	5092762	Identifier	samples1		5092402	0					
ANR	5092763	Identifier	j		5092402	1					
ANR	5092764	Argument	samples [ j ]		5092402	2					
ANR	5092765	ArrayIndexing	samples [ j ]		5092402	0					
ANR	5092766	Identifier	samples		5092402	0					
ANR	5092767	Identifier	j		5092402	1					
ANR	5092768	Argument	samplesm1 [ j ]		5092402	3					
ANR	5092769	ArrayIndexing	samplesm1 [ j ]		5092402	0					
ANR	5092770	Identifier	samplesm1		5092402	0					
ANR	5092771	Identifier	j		5092402	1					
ANR	5092772	ReturnStatement	return ;	286:12:9447:9453	5092402	1	True				
ANR	5092773	ExpressionStatement	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples2 , offset + delta * 2 , m )"	289:8:9531:9643	5092402	13	True				
ANR	5092774	CallExpression	"fn_interpolate_cubic ( pfn , fparts , iparts , factors , samples2 , offset + delta * 2 , m )"		5092402	0					
ANR	5092775	Callee	fn_interpolate_cubic		5092402	0					
ANR	5092776	Identifier	fn_interpolate_cubic		5092402	0					
ANR	5092777	ArgumentList	pfn		5092402	1					
ANR	5092778	Argument	pfn		5092402	0					
ANR	5092779	Identifier	pfn		5092402	0					
ANR	5092780	Argument	fparts		5092402	1					
ANR	5092781	Identifier	fparts		5092402	0					
ANR	5092782	Argument	iparts		5092402	2					
ANR	5092783	Identifier	iparts		5092402	0					
ANR	5092784	Argument	factors		5092402	3					
ANR	5092785	Identifier	factors		5092402	0					
ANR	5092786	Argument	samples2		5092402	4					
ANR	5092787	Identifier	samples2		5092402	0					
ANR	5092788	Argument	offset + delta * 2		5092402	5					
ANR	5092789	AdditiveExpression	offset + delta * 2		5092402	0		+			
ANR	5092790	Identifier	offset		5092402	0					
ANR	5092791	MultiplicativeExpression	delta * 2		5092402	1		*			
ANR	5092792	Identifier	delta		5092402	0					
ANR	5092793	PrimaryExpression	2		5092402	1					
ANR	5092794	Argument	m		5092402	6					
ANR	5092795	Identifier	m		5092402	0					
ANR	5092796	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		5092402	14					
ANR	5092797	ForInit	j = pfn -> params . n - 1 ;	291:13:9658:9679	5092402	0	True				
ANR	5092798	AssignmentExpression	j = pfn -> params . n - 1		5092402	0		=			
ANR	5092799	Identifier	j		5092402	0					
ANR	5092800	AdditiveExpression	pfn -> params . n - 1		5092402	1		-			
ANR	5092801	MemberAccess	pfn -> params . n		5092402	0					
ANR	5092802	PtrMemberAccess	pfn -> params		5092402	0					
ANR	5092803	Identifier	pfn		5092402	0					
ANR	5092804	Identifier	params		5092402	1					
ANR	5092805	Identifier	n		5092402	1					
ANR	5092806	PrimaryExpression	1		5092402	1					
ANR	5092807	Condition	j >= 0	291:36:9681:9686	5092402	1	True				
ANR	5092808	RelationalExpression	j >= 0		5092402	0		>=			
ANR	5092809	Identifier	j		5092402	0					
ANR	5092810	PrimaryExpression	0		5092402	1					
ANR	5092811	UnaryExpression	-- j	291:44:9689:9691	5092402	2	True				
ANR	5092812	IncDec	--		5092402	0					
ANR	5092813	Identifier	j		5092402	1					
ANR	5092814	ExpressionStatement	"samples [ j ] = interpolate_cubic ( fpart + 1 , samplesm1 [ j ] , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"	292:12:9706:9849	5092402	3	True				
ANR	5092815	AssignmentExpression	"samples [ j ] = interpolate_cubic ( fpart + 1 , samplesm1 [ j ] , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"		5092402	0		=			
ANR	5092816	ArrayIndexing	samples [ j ]		5092402	0					
ANR	5092817	Identifier	samples		5092402	0					
ANR	5092818	Identifier	j		5092402	1					
ANR	5092819	CallExpression	"interpolate_cubic ( fpart + 1 , samplesm1 [ j ] , samples [ j ] , samples1 [ j ] , samples2 [ j ] )"		5092402	1					
ANR	5092820	Callee	interpolate_cubic		5092402	0					
ANR	5092821	Identifier	interpolate_cubic		5092402	0					
ANR	5092822	ArgumentList	fpart + 1		5092402	1					
ANR	5092823	Argument	fpart + 1		5092402	0					
ANR	5092824	AdditiveExpression	fpart + 1		5092402	0		+			
ANR	5092825	Identifier	fpart		5092402	0					
ANR	5092826	PrimaryExpression	1		5092402	1					
ANR	5092827	Argument	samplesm1 [ j ]		5092402	1					
ANR	5092828	ArrayIndexing	samplesm1 [ j ]		5092402	0					
ANR	5092829	Identifier	samplesm1		5092402	0					
ANR	5092830	Identifier	j		5092402	1					
ANR	5092831	Argument	samples [ j ]		5092402	2					
ANR	5092832	ArrayIndexing	samples [ j ]		5092402	0					
ANR	5092833	Identifier	samples		5092402	0					
ANR	5092834	Identifier	j		5092402	1					
ANR	5092835	Argument	samples1 [ j ]		5092402	3					
ANR	5092836	ArrayIndexing	samples1 [ j ]		5092402	0					
ANR	5092837	Identifier	samples1		5092402	0					
ANR	5092838	Identifier	j		5092402	1					
ANR	5092839	Argument	samples2 [ j ]		5092402	4					
ANR	5092840	ArrayIndexing	samples2 [ j ]		5092402	0					
ANR	5092841	Identifier	samples2		5092402	0					
ANR	5092842	Identifier	j		5092402	1					
ANR	5092843	ReturnType	static void		5092402	1					
ANR	5092844	Identifier	fn_interpolate_cubic		5092402	2					
ANR	5092845	ParameterList	"const gs_function_Sd_t * pfn , const float * fparts , const int * iparts , const ulong * factors , float * samples , ulong offset , int m"		5092402	3					
ANR	5092846	Parameter	const gs_function_Sd_t * pfn	229:21:7141:7167	5092402	0	True				
ANR	5092847	ParameterType	const gs_function_Sd_t *		5092402	0					
ANR	5092848	Identifier	pfn		5092402	1					
ANR	5092849	Parameter	const float * fparts	229:50:7170:7188	5092402	1	True				
ANR	5092850	ParameterType	const float *		5092402	0					
ANR	5092851	Identifier	fparts		5092402	1					
ANR	5092852	Parameter	const int * iparts	230:21:7212:7228	5092402	2	True				
ANR	5092853	ParameterType	const int *		5092402	0					
ANR	5092854	Identifier	iparts		5092402	1					
ANR	5092855	Parameter	const ulong * factors	230:40:7231:7250	5092402	3	True				
ANR	5092856	ParameterType	const ulong *		5092402	0					
ANR	5092857	Identifier	factors		5092402	1					
ANR	5092858	Parameter	float * samples	231:21:7274:7287	5092402	4	True				
ANR	5092859	ParameterType	float *		5092402	0					
ANR	5092860	Identifier	samples		5092402	1					
ANR	5092861	Parameter	ulong offset	231:37:7290:7301	5092402	5	True				
ANR	5092862	ParameterType	ulong		5092402	0					
ANR	5092863	Identifier	offset		5092402	1					
ANR	5092864	Parameter	int m	231:51:7304:7308	5092402	6	True				
ANR	5092865	ParameterType	int		5092402	0					
ANR	5092866	Identifier	m		5092402	1					
ANR	5092867	CFGEntryNode	ENTRY		5092402		True				
ANR	5092868	CFGExitNode	EXIT		5092402		True				
ANR	5092869	Symbol	pfn -> params . m		5092402						
ANR	5092870	Symbol	interpolate_cubic		5092402						
ANR	5092871	Symbol	pfn -> params . n		5092402						
ANR	5092872	Symbol	* sdata		5092402						
ANR	5092873	Symbol	pfn -> params . Size		5092402						
ANR	5092874	Symbol	is_fzero		5092402						
ANR	5092875	Symbol	* fparts ++		5092402						
ANR	5092876	Symbol	fpart		5092402						
ANR	5092877	Symbol	delta		5092402						
ANR	5092878	Symbol	samples1		5092402						
ANR	5092879	Symbol	samples2		5092402						
ANR	5092880	Symbol	* factors ++		5092402						
ANR	5092881	Symbol	* * pfn		5092402						
ANR	5092882	Symbol	iparts		5092402						
ANR	5092883	Symbol	* samples		5092402						
ANR	5092884	Symbol	fparts		5092402						
ANR	5092885	Symbol	interpolate_quadratic		5092402						
ANR	5092886	Symbol	sdata		5092402						
ANR	5092887	Symbol	pfn -> params . BitsPerSample		5092402						
ANR	5092888	Symbol	ipart		5092402						
ANR	5092889	Symbol	* pfn		5092402						
ANR	5092890	Symbol	offset		5092402						
ANR	5092891	Symbol	* samples2		5092402						
ANR	5092892	Symbol	* samples1		5092402						
ANR	5092893	Symbol	fn_get_samples		5092402						
ANR	5092894	Symbol	* pfn -> params . Size		5092402						
ANR	5092895	Symbol	* pfn -> params . m		5092402						
ANR	5092896	Symbol	j		5092402						
ANR	5092897	Symbol	m		5092402						
ANR	5092898	Symbol	samples		5092402						
ANR	5092899	Symbol	* pfn -> params . BitsPerSample		5092402						
ANR	5092900	Symbol	factors		5092402						
ANR	5092901	Symbol	* j		5092402						
ANR	5092902	Symbol	size		5092402						
ANR	5092903	Symbol	* fn_get_samples		5092402						
ANR	5092904	Symbol	* iparts ++		5092402						
ANR	5092905	Symbol	* m		5092402						
ANR	5092906	Symbol	pfn		5092402						
ANR	5092907	Symbol	samplesm1		5092402						
ANR	5092908	Symbol	pfn -> params		5092402						
ANR	5092909	Symbol	* samplesm1		5092402						
ANR	5092910	Symbol	* pfn -> params		5092402						
ANR	5092911	Function	fn_interpolate_linear	299:0:9915:10843							
ANR	5092912	FunctionDef	"fn_interpolate_linear (const gs_function_Sd_t * pfn , const float * fparts , const ulong * factors , float * samples , ulong offset , int m)"		5092911	0					
ANR	5092913	CompoundStatement		302:0:10075:10843	5092911	0					
ANR	5092914	IdentifierDeclStatement	int j ;	303:4:10081:10086	5092911	0	True				
ANR	5092915	IdentifierDecl	j		5092911	0					
ANR	5092916	IdentifierDeclType	int		5092911	0					
ANR	5092917	Identifier	j		5092911	1					
ANR	5092918	Label	top :	305:0:10089:10092	5092911	1	True				
ANR	5092919	Identifier	top		5092911	0					
ANR	5092920	IfStatement	if ( m == 0 )		5092911	2					
ANR	5092921	Condition	m == 0	306:8:10102:10107	5092911	0	True				
ANR	5092922	EqualityExpression	m == 0		5092911	0		==			
ANR	5092923	Identifier	m		5092911	0					
ANR	5092924	PrimaryExpression	0		5092911	1					
ANR	5092925	CompoundStatement		6:8:44:64	5092911	1					
ANR	5092926	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	307:8:10120:10140	5092911	0	True				
ANR	5092927	IdentifierDecl	sdata [ max_Sd_n ]		5092911	0					
ANR	5092928	IdentifierDeclType	uint [ max_Sd_n ]		5092911	0					
ANR	5092929	Identifier	sdata		5092911	1					
ANR	5092930	Identifier	max_Sd_n		5092911	2					
ANR	5092931	ExpressionStatement	"( * fn_get_samples [ pfn -> params . BitsPerSample ] ) ( pfn , offset , sdata )"	309:8:10151:10215	5092911	1	True				
ANR	5092932	CallExpression	"( * fn_get_samples [ pfn -> params . BitsPerSample ] ) ( pfn , offset , sdata )"		5092911	0					
ANR	5092933	Callee	* fn_get_samples [ pfn -> params . BitsPerSample ]		5092911	0					
ANR	5092934	UnaryOperationExpression	* fn_get_samples [ pfn -> params . BitsPerSample ]		5092911	0					
ANR	5092935	UnaryOperator	*		5092911	0					
ANR	5092936	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		5092911	1					
ANR	5092937	Identifier	fn_get_samples		5092911	0					
ANR	5092938	MemberAccess	pfn -> params . BitsPerSample		5092911	1					
ANR	5092939	PtrMemberAccess	pfn -> params		5092911	0					
ANR	5092940	Identifier	pfn		5092911	0					
ANR	5092941	Identifier	params		5092911	1					
ANR	5092942	Identifier	BitsPerSample		5092911	1					
ANR	5092943	ArgumentList	pfn		5092911	1					
ANR	5092944	Argument	pfn		5092911	0					
ANR	5092945	Identifier	pfn		5092911	0					
ANR	5092946	Argument	offset		5092911	1					
ANR	5092947	Identifier	offset		5092911	0					
ANR	5092948	Argument	sdata		5092911	2					
ANR	5092949	Identifier	sdata		5092911	0					
ANR	5092950	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		5092911	2					
ANR	5092951	ForInit	j = pfn -> params . n - 1 ;	310:13:10230:10251	5092911	0	True				
ANR	5092952	AssignmentExpression	j = pfn -> params . n - 1		5092911	0		=			
ANR	5092953	Identifier	j		5092911	0					
ANR	5092954	AdditiveExpression	pfn -> params . n - 1		5092911	1		-			
ANR	5092955	MemberAccess	pfn -> params . n		5092911	0					
ANR	5092956	PtrMemberAccess	pfn -> params		5092911	0					
ANR	5092957	Identifier	pfn		5092911	0					
ANR	5092958	Identifier	params		5092911	1					
ANR	5092959	Identifier	n		5092911	1					
ANR	5092960	PrimaryExpression	1		5092911	1					
ANR	5092961	Condition	j >= 0	310:36:10253:10258	5092911	1	True				
ANR	5092962	RelationalExpression	j >= 0		5092911	0		>=			
ANR	5092963	Identifier	j		5092911	0					
ANR	5092964	PrimaryExpression	0		5092911	1					
ANR	5092965	UnaryExpression	-- j	310:44:10261:10263	5092911	2	True				
ANR	5092966	IncDec	--		5092911	0					
ANR	5092967	Identifier	j		5092911	1					
ANR	5092968	ExpressionStatement	samples [ j ] = ( float ) sdata [ j ]	311:12:10278:10306	5092911	3	True				
ANR	5092969	AssignmentExpression	samples [ j ] = ( float ) sdata [ j ]		5092911	0		=			
ANR	5092970	ArrayIndexing	samples [ j ]		5092911	0					
ANR	5092971	Identifier	samples		5092911	0					
ANR	5092972	Identifier	j		5092911	1					
ANR	5092973	CastExpression	( float ) sdata [ j ]		5092911	1					
ANR	5092974	CastTarget	float		5092911	0					
ANR	5092975	ArrayIndexing	sdata [ j ]		5092911	1					
ANR	5092976	Identifier	sdata		5092911	0					
ANR	5092977	Identifier	j		5092911	1					
ANR	5092978	ElseStatement	else		5092911	0					
ANR	5092979	CompoundStatement		13:8:286:310	5092911	0					
ANR	5092980	IdentifierDeclStatement	float fpart = * fparts ++ ;	313:8:10329:10352	5092911	0	True				
ANR	5092981	IdentifierDecl	fpart = * fparts ++		5092911	0					
ANR	5092982	IdentifierDeclType	float		5092911	0					
ANR	5092983	Identifier	fpart		5092911	1					
ANR	5092984	AssignmentExpression	fpart = * fparts ++		5092911	2		=			
ANR	5092985	Identifier	fpart		5092911	0					
ANR	5092986	UnaryOperationExpression	* fparts ++		5092911	1					
ANR	5092987	UnaryOperator	*		5092911	0					
ANR	5092988	PostIncDecOperationExpression	fparts ++		5092911	1					
ANR	5092989	Identifier	fparts		5092911	0					
ANR	5092990	IncDec	++		5092911	1					
ANR	5092991	IdentifierDeclStatement	float samples1 [ max_Sd_n ] ;	314:8:10362:10386	5092911	1	True				
ANR	5092992	IdentifierDecl	samples1 [ max_Sd_n ]		5092911	0					
ANR	5092993	IdentifierDeclType	float [ max_Sd_n ]		5092911	0					
ANR	5092994	Identifier	samples1		5092911	1					
ANR	5092995	Identifier	max_Sd_n		5092911	2					
ANR	5092996	IfStatement	if ( is_fzero ( fpart ) )		5092911	2					
ANR	5092997	Condition	is_fzero ( fpart )	316:12:10401:10415	5092911	0	True				
ANR	5092998	CallExpression	is_fzero ( fpart )		5092911	0					
ANR	5092999	Callee	is_fzero		5092911	0					
ANR	5093000	Identifier	is_fzero		5092911	0					
ANR	5093001	ArgumentList	fpart		5092911	1					
ANR	5093002	Argument	fpart		5092911	0					
ANR	5093003	Identifier	fpart		5092911	0					
ANR	5093004	CompoundStatement		15:29:342:342	5092911	1					
ANR	5093005	ExpressionStatement	++ factors	317:12:10432:10441	5092911	0	True				
ANR	5093006	UnaryExpression	++ factors		5092911	0					
ANR	5093007	IncDec	++		5092911	0					
ANR	5093008	Identifier	factors		5092911	1					
ANR	5093009	ExpressionStatement	-- m	318:12:10455:10458	5092911	1	True				
ANR	5093010	UnaryExpression	-- m		5092911	0					
ANR	5093011	IncDec	--		5092911	0					
ANR	5093012	Identifier	m		5092911	1					
ANR	5093013	GotoStatement	goto top ;	319:12:10472:10480	5092911	2	True				
ANR	5093014	Identifier	top		5092911	0					
ANR	5093015	ExpressionStatement	"fn_interpolate_linear ( pfn , fparts , factors + 1 , samples , offset , m - 1 )"	321:8:10500:10601	5092911	3	True				
ANR	5093016	CallExpression	"fn_interpolate_linear ( pfn , fparts , factors + 1 , samples , offset , m - 1 )"		5092911	0					
ANR	5093017	Callee	fn_interpolate_linear		5092911	0					
ANR	5093018	Identifier	fn_interpolate_linear		5092911	0					
ANR	5093019	ArgumentList	pfn		5092911	1					
ANR	5093020	Argument	pfn		5092911	0					
ANR	5093021	Identifier	pfn		5092911	0					
ANR	5093022	Argument	fparts		5092911	1					
ANR	5093023	Identifier	fparts		5092911	0					
ANR	5093024	Argument	factors + 1		5092911	2					
ANR	5093025	AdditiveExpression	factors + 1		5092911	0		+			
ANR	5093026	Identifier	factors		5092911	0					
ANR	5093027	PrimaryExpression	1		5092911	1					
ANR	5093028	Argument	samples		5092911	3					
ANR	5093029	Identifier	samples		5092911	0					
ANR	5093030	Argument	offset		5092911	4					
ANR	5093031	Identifier	offset		5092911	0					
ANR	5093032	Argument	m - 1		5092911	5					
ANR	5093033	AdditiveExpression	m - 1		5092911	0		-			
ANR	5093034	Identifier	m		5092911	0					
ANR	5093035	PrimaryExpression	1		5092911	1					
ANR	5093036	ExpressionStatement	"fn_interpolate_linear ( pfn , fparts , factors + 1 , samples1 , offset + * factors , m - 1 )"	323:8:10611:10724	5092911	4	True				
ANR	5093037	CallExpression	"fn_interpolate_linear ( pfn , fparts , factors + 1 , samples1 , offset + * factors , m - 1 )"		5092911	0					
ANR	5093038	Callee	fn_interpolate_linear		5092911	0					
ANR	5093039	Identifier	fn_interpolate_linear		5092911	0					
ANR	5093040	ArgumentList	pfn		5092911	1					
ANR	5093041	Argument	pfn		5092911	0					
ANR	5093042	Identifier	pfn		5092911	0					
ANR	5093043	Argument	fparts		5092911	1					
ANR	5093044	Identifier	fparts		5092911	0					
ANR	5093045	Argument	factors + 1		5092911	2					
ANR	5093046	AdditiveExpression	factors + 1		5092911	0		+			
ANR	5093047	Identifier	factors		5092911	0					
ANR	5093048	PrimaryExpression	1		5092911	1					
ANR	5093049	Argument	samples1		5092911	3					
ANR	5093050	Identifier	samples1		5092911	0					
ANR	5093051	Argument	offset + * factors		5092911	4					
ANR	5093052	AdditiveExpression	offset + * factors		5092911	0		+			
ANR	5093053	Identifier	offset		5092911	0					
ANR	5093054	UnaryOperationExpression	* factors		5092911	1					
ANR	5093055	UnaryOperator	*		5092911	0					
ANR	5093056	Identifier	factors		5092911	1					
ANR	5093057	Argument	m - 1		5092911	5					
ANR	5093058	AdditiveExpression	m - 1		5092911	0		-			
ANR	5093059	Identifier	m		5092911	0					
ANR	5093060	PrimaryExpression	1		5092911	1					
ANR	5093061	ForStatement	for ( j = pfn -> params . n - 1 ; j >= 0 ; -- j )		5092911	5					
ANR	5093062	ForInit	j = pfn -> params . n - 1 ;	325:13:10739:10760	5092911	0	True				
ANR	5093063	AssignmentExpression	j = pfn -> params . n - 1		5092911	0		=			
ANR	5093064	Identifier	j		5092911	0					
ANR	5093065	AdditiveExpression	pfn -> params . n - 1		5092911	1		-			
ANR	5093066	MemberAccess	pfn -> params . n		5092911	0					
ANR	5093067	PtrMemberAccess	pfn -> params		5092911	0					
ANR	5093068	Identifier	pfn		5092911	0					
ANR	5093069	Identifier	params		5092911	1					
ANR	5093070	Identifier	n		5092911	1					
ANR	5093071	PrimaryExpression	1		5092911	1					
ANR	5093072	Condition	j >= 0	325:36:10762:10767	5092911	1	True				
ANR	5093073	RelationalExpression	j >= 0		5092911	0		>=			
ANR	5093074	Identifier	j		5092911	0					
ANR	5093075	PrimaryExpression	0		5092911	1					
ANR	5093076	UnaryExpression	-- j	325:44:10770:10772	5092911	2	True				
ANR	5093077	IncDec	--		5092911	0					
ANR	5093078	Identifier	j		5092911	1					
ANR	5093079	ExpressionStatement	samples [ j ] += ( samples1 [ j ] - samples [ j ] ) * fpart	326:12:10787:10835	5092911	3	True				
ANR	5093080	AssignmentExpression	samples [ j ] += ( samples1 [ j ] - samples [ j ] ) * fpart		5092911	0		+=			
ANR	5093081	ArrayIndexing	samples [ j ]		5092911	0					
ANR	5093082	Identifier	samples		5092911	0					
ANR	5093083	Identifier	j		5092911	1					
ANR	5093084	MultiplicativeExpression	( samples1 [ j ] - samples [ j ] ) * fpart		5092911	1		*			
ANR	5093085	AdditiveExpression	samples1 [ j ] - samples [ j ]		5092911	0		-			
ANR	5093086	ArrayIndexing	samples1 [ j ]		5092911	0					
ANR	5093087	Identifier	samples1		5092911	0					
ANR	5093088	Identifier	j		5092911	1					
ANR	5093089	ArrayIndexing	samples [ j ]		5092911	1					
ANR	5093090	Identifier	samples		5092911	0					
ANR	5093091	Identifier	j		5092911	1					
ANR	5093092	Identifier	fpart		5092911	1					
ANR	5093093	ReturnType	static void		5092911	1					
ANR	5093094	Identifier	fn_interpolate_linear		5092911	2					
ANR	5093095	ParameterList	"const gs_function_Sd_t * pfn , const float * fparts , const ulong * factors , float * samples , ulong offset , int m"		5092911	3					
ANR	5093096	Parameter	const gs_function_Sd_t * pfn	300:22:9949:9975	5092911	0	True				
ANR	5093097	ParameterType	const gs_function_Sd_t *		5092911	0					
ANR	5093098	Identifier	pfn		5092911	1					
ANR	5093099	Parameter	const float * fparts	300:51:9978:9996	5092911	1	True				
ANR	5093100	ParameterType	const float *		5092911	0					
ANR	5093101	Identifier	fparts		5092911	1					
ANR	5093102	Parameter	const ulong * factors	301:17:10016:10035	5092911	2	True				
ANR	5093103	ParameterType	const ulong *		5092911	0					
ANR	5093104	Identifier	factors		5092911	1					
ANR	5093105	Parameter	float * samples	301:39:10038:10051	5092911	3	True				
ANR	5093106	ParameterType	float *		5092911	0					
ANR	5093107	Identifier	samples		5092911	1					
ANR	5093108	Parameter	ulong offset	301:55:10054:10065	5092911	4	True				
ANR	5093109	ParameterType	ulong		5092911	0					
ANR	5093110	Identifier	offset		5092911	1					
ANR	5093111	Parameter	int m	301:69:10068:10072	5092911	5	True				
ANR	5093112	ParameterType	int		5092911	0					
ANR	5093113	Identifier	m		5092911	1					
ANR	5093114	CFGEntryNode	ENTRY		5092911		True				
ANR	5093115	CFGExitNode	EXIT		5092911		True				
ANR	5093116	Symbol	pfn -> params . n		5092911						
ANR	5093117	Symbol	* sdata		5092911						
ANR	5093118	Symbol	is_fzero		5092911						
ANR	5093119	Symbol	* factors		5092911						
ANR	5093120	Symbol	* fparts ++		5092911						
ANR	5093121	Symbol	fpart		5092911						
ANR	5093122	Symbol	samples1		5092911						
ANR	5093123	Symbol	* * pfn		5092911						
ANR	5093124	Symbol	* samples		5092911						
ANR	5093125	Symbol	fparts		5092911						
ANR	5093126	Symbol	sdata		5092911						
ANR	5093127	Symbol	pfn -> params . BitsPerSample		5092911						
ANR	5093128	Symbol	* pfn		5092911						
ANR	5093129	Symbol	offset		5092911						
ANR	5093130	Symbol	* samples1		5092911						
ANR	5093131	Symbol	fn_get_samples		5092911						
ANR	5093132	Symbol	j		5092911						
ANR	5093133	Symbol	m		5092911						
ANR	5093134	Symbol	samples		5092911						
ANR	5093135	Symbol	* pfn -> params . BitsPerSample		5092911						
ANR	5093136	Symbol	factors		5092911						
ANR	5093137	Symbol	* j		5092911						
ANR	5093138	Symbol	* fn_get_samples		5092911						
ANR	5093139	Symbol	pfn		5092911						
ANR	5093140	Symbol	pfn -> params		5092911						
ANR	5093141	Symbol	* pfn -> params		5092911						
ANR	5093142	Function	fn_Sd_encode	330:0:10846:11598							
ANR	5093143	FunctionDef	"fn_Sd_encode (const gs_function_Sd_t * pfn , int i , double sample)"		5093142	0					
ANR	5093144	CompoundStatement		332:0:10931:11598	5093142	0					
ANR	5093145	IdentifierDeclStatement	"float d0 , d1 , r0 , r1 ;"	333:4:10937:10957	5093142	0	True				
ANR	5093146	IdentifierDecl	d0		5093142	0					
ANR	5093147	IdentifierDeclType	float		5093142	0					
ANR	5093148	Identifier	d0		5093142	1					
ANR	5093149	IdentifierDecl	d1		5093142	1					
ANR	5093150	IdentifierDeclType	float		5093142	0					
ANR	5093151	Identifier	d1		5093142	1					
ANR	5093152	IdentifierDecl	r0		5093142	2					
ANR	5093153	IdentifierDeclType	float		5093142	0					
ANR	5093154	Identifier	r0		5093142	1					
ANR	5093155	IdentifierDecl	r1		5093142	3					
ANR	5093156	IdentifierDeclType	float		5093142	0					
ANR	5093157	Identifier	r1		5093142	1					
ANR	5093158	IdentifierDeclStatement	double value ;	334:4:10963:10975	5093142	1	True				
ANR	5093159	IdentifierDecl	value		5093142	0					
ANR	5093160	IdentifierDeclType	double		5093142	0					
ANR	5093161	Identifier	value		5093142	1					
ANR	5093162	IdentifierDeclStatement	int bps = pfn -> params . BitsPerSample ;	335:4:10981:11016	5093142	2	True				
ANR	5093163	IdentifierDecl	bps = pfn -> params . BitsPerSample		5093142	0					
ANR	5093164	IdentifierDeclType	int		5093142	0					
ANR	5093165	Identifier	bps		5093142	1					
ANR	5093166	AssignmentExpression	bps = pfn -> params . BitsPerSample		5093142	2		=			
ANR	5093167	Identifier	bps		5093142	0					
ANR	5093168	MemberAccess	pfn -> params . BitsPerSample		5093142	1					
ANR	5093169	PtrMemberAccess	pfn -> params		5093142	0					
ANR	5093170	Identifier	pfn		5093142	0					
ANR	5093171	Identifier	params		5093142	1					
ANR	5093172	Identifier	BitsPerSample		5093142	1					
ANR	5093173	IdentifierDeclStatement	uint max_samp = ( bps < ( sizeof ( uint ) * 8 ) ) ? ( ( 1 << bps ) - 1 ) : max_uint ;	337:4:11084:11156	5093142	3	True				
ANR	5093174	IdentifierDecl	max_samp = ( bps < ( sizeof ( uint ) * 8 ) ) ? ( ( 1 << bps ) - 1 ) : max_uint		5093142	0					
ANR	5093175	IdentifierDeclType	uint		5093142	0					
ANR	5093176	Identifier	max_samp		5093142	1					
ANR	5093177	AssignmentExpression	max_samp = ( bps < ( sizeof ( uint ) * 8 ) ) ? ( ( 1 << bps ) - 1 ) : max_uint		5093142	2		=			
ANR	5093178	Identifier	max_samp		5093142	0					
ANR	5093179	ConditionalExpression	( bps < ( sizeof ( uint ) * 8 ) ) ? ( ( 1 << bps ) - 1 ) : max_uint		5093142	1					
ANR	5093180	Condition	bps < ( sizeof ( uint ) * 8 )		5093142	0					
ANR	5093181	RelationalExpression	bps < ( sizeof ( uint ) * 8 )		5093142	0		<			
ANR	5093182	Identifier	bps		5093142	0					
ANR	5093183	MultiplicativeExpression	sizeof ( uint ) * 8		5093142	1		*			
ANR	5093184	SizeofExpression	sizeof ( uint )		5093142	0					
ANR	5093185	Sizeof	sizeof		5093142	0					
ANR	5093186	SizeofOperand	uint		5093142	1					
ANR	5093187	PrimaryExpression	8		5093142	1					
ANR	5093188	AdditiveExpression	( 1 << bps ) - 1		5093142	1		-			
ANR	5093189	ShiftExpression	1 << bps		5093142	0		<<			
ANR	5093190	PrimaryExpression	1		5093142	0					
ANR	5093191	Identifier	bps		5093142	1					
ANR	5093192	PrimaryExpression	1		5093142	1					
ANR	5093193	Identifier	max_uint		5093142	2					
ANR	5093194	IfStatement	if ( pfn -> params . Range )		5093142	4					
ANR	5093195	Condition	pfn -> params . Range	339:8:11167:11183	5093142	0	True				
ANR	5093196	MemberAccess	pfn -> params . Range		5093142	0					
ANR	5093197	PtrMemberAccess	pfn -> params		5093142	0					
ANR	5093198	Identifier	pfn		5093142	0					
ANR	5093199	Identifier	params		5093142	1					
ANR	5093200	Identifier	Range		5093142	1					
ANR	5093201	ExpressionStatement	"r0 = pfn -> params . Range [ 2 * i ] , r1 = pfn -> params . Range [ 2 * i + 1 ]"	340:8:11194:11258	5093142	1	True				
ANR	5093202	Expression	"r0 = pfn -> params . Range [ 2 * i ] , r1 = pfn -> params . Range [ 2 * i + 1 ]"		5093142	0					
ANR	5093203	AssignmentExpression	r0 = pfn -> params . Range [ 2 * i ]		5093142	0		=			
ANR	5093204	Identifier	r0		5093142	0					
ANR	5093205	ArrayIndexing	pfn -> params . Range [ 2 * i ]		5093142	1					
ANR	5093206	MemberAccess	pfn -> params . Range		5093142	0					
ANR	5093207	PtrMemberAccess	pfn -> params		5093142	0					
ANR	5093208	Identifier	pfn		5093142	0					
ANR	5093209	Identifier	params		5093142	1					
ANR	5093210	Identifier	Range		5093142	1					
ANR	5093211	MultiplicativeExpression	2 * i		5093142	1		*			
ANR	5093212	PrimaryExpression	2		5093142	0					
ANR	5093213	Identifier	i		5093142	1					
ANR	5093214	AssignmentExpression	r1 = pfn -> params . Range [ 2 * i + 1 ]		5093142	1		=			
ANR	5093215	Identifier	r1		5093142	0					
ANR	5093216	ArrayIndexing	pfn -> params . Range [ 2 * i + 1 ]		5093142	1					
ANR	5093217	MemberAccess	pfn -> params . Range		5093142	0					
ANR	5093218	PtrMemberAccess	pfn -> params		5093142	0					
ANR	5093219	Identifier	pfn		5093142	0					
ANR	5093220	Identifier	params		5093142	1					
ANR	5093221	Identifier	Range		5093142	1					
ANR	5093222	AdditiveExpression	2 * i + 1		5093142	1		+			
ANR	5093223	MultiplicativeExpression	2 * i		5093142	0		*			
ANR	5093224	PrimaryExpression	2		5093142	0					
ANR	5093225	Identifier	i		5093142	1					
ANR	5093226	PrimaryExpression	1		5093142	1					
ANR	5093227	ElseStatement	else		5093142	0					
ANR	5093228	ExpressionStatement	"r0 = 0 , r1 = ( float ) max_samp"	342:8:11277:11305	5093142	0	True				
ANR	5093229	Expression	"r0 = 0 , r1 = ( float ) max_samp"		5093142	0					
ANR	5093230	AssignmentExpression	r0 = 0		5093142	0		=			
ANR	5093231	Identifier	r0		5093142	0					
ANR	5093232	PrimaryExpression	0		5093142	1					
ANR	5093233	AssignmentExpression	r1 = ( float ) max_samp		5093142	1		=			
ANR	5093234	Identifier	r1		5093142	0					
ANR	5093235	CastExpression	( float ) max_samp		5093142	1					
ANR	5093236	CastTarget	float		5093142	0					
ANR	5093237	Identifier	max_samp		5093142	1					
ANR	5093238	IfStatement	if ( pfn -> params . Decode )		5093142	5					
ANR	5093239	Condition	pfn -> params . Decode	343:8:11315:11332	5093142	0	True				
ANR	5093240	MemberAccess	pfn -> params . Decode		5093142	0					
ANR	5093241	PtrMemberAccess	pfn -> params		5093142	0					
ANR	5093242	Identifier	pfn		5093142	0					
ANR	5093243	Identifier	params		5093142	1					
ANR	5093244	Identifier	Decode		5093142	1					
ANR	5093245	ExpressionStatement	"d0 = pfn -> params . Decode [ 2 * i ] , d1 = pfn -> params . Decode [ 2 * i + 1 ]"	344:8:11343:11409	5093142	1	True				
ANR	5093246	Expression	"d0 = pfn -> params . Decode [ 2 * i ] , d1 = pfn -> params . Decode [ 2 * i + 1 ]"		5093142	0					
ANR	5093247	AssignmentExpression	d0 = pfn -> params . Decode [ 2 * i ]		5093142	0		=			
ANR	5093248	Identifier	d0		5093142	0					
ANR	5093249	ArrayIndexing	pfn -> params . Decode [ 2 * i ]		5093142	1					
ANR	5093250	MemberAccess	pfn -> params . Decode		5093142	0					
ANR	5093251	PtrMemberAccess	pfn -> params		5093142	0					
ANR	5093252	Identifier	pfn		5093142	0					
ANR	5093253	Identifier	params		5093142	1					
ANR	5093254	Identifier	Decode		5093142	1					
ANR	5093255	MultiplicativeExpression	2 * i		5093142	1		*			
ANR	5093256	PrimaryExpression	2		5093142	0					
ANR	5093257	Identifier	i		5093142	1					
ANR	5093258	AssignmentExpression	d1 = pfn -> params . Decode [ 2 * i + 1 ]		5093142	1		=			
ANR	5093259	Identifier	d1		5093142	0					
ANR	5093260	ArrayIndexing	pfn -> params . Decode [ 2 * i + 1 ]		5093142	1					
ANR	5093261	MemberAccess	pfn -> params . Decode		5093142	0					
ANR	5093262	PtrMemberAccess	pfn -> params		5093142	0					
ANR	5093263	Identifier	pfn		5093142	0					
ANR	5093264	Identifier	params		5093142	1					
ANR	5093265	Identifier	Decode		5093142	1					
ANR	5093266	AdditiveExpression	2 * i + 1		5093142	1		+			
ANR	5093267	MultiplicativeExpression	2 * i		5093142	0		*			
ANR	5093268	PrimaryExpression	2		5093142	0					
ANR	5093269	Identifier	i		5093142	1					
ANR	5093270	PrimaryExpression	1		5093142	1					
ANR	5093271	ElseStatement	else		5093142	0					
ANR	5093272	ExpressionStatement	"d0 = r0 , d1 = r1"	346:8:11428:11444	5093142	0	True				
ANR	5093273	Expression	"d0 = r0 , d1 = r1"		5093142	0					
ANR	5093274	AssignmentExpression	d0 = r0		5093142	0		=			
ANR	5093275	Identifier	d0		5093142	0					
ANR	5093276	Identifier	r0		5093142	1					
ANR	5093277	AssignmentExpression	d1 = r1		5093142	1		=			
ANR	5093278	Identifier	d1		5093142	0					
ANR	5093279	Identifier	r1		5093142	1					
ANR	5093280	ExpressionStatement	value = sample * ( d1 - d0 ) / max_samp + d0	348:4:11451:11493	5093142	6	True				
ANR	5093281	AssignmentExpression	value = sample * ( d1 - d0 ) / max_samp + d0		5093142	0		=			
ANR	5093282	Identifier	value		5093142	0					
ANR	5093283	AdditiveExpression	sample * ( d1 - d0 ) / max_samp + d0		5093142	1		+			
ANR	5093284	MultiplicativeExpression	sample * ( d1 - d0 ) / max_samp		5093142	0		*			
ANR	5093285	Identifier	sample		5093142	0					
ANR	5093286	MultiplicativeExpression	( d1 - d0 ) / max_samp		5093142	1		/			
ANR	5093287	AdditiveExpression	d1 - d0		5093142	0		-			
ANR	5093288	Identifier	d1		5093142	0					
ANR	5093289	Identifier	d0		5093142	1					
ANR	5093290	Identifier	max_samp		5093142	1					
ANR	5093291	Identifier	d0		5093142	1					
ANR	5093292	IfStatement	if ( value < r0 )		5093142	7					
ANR	5093293	Condition	value < r0	349:8:11503:11512	5093142	0	True				
ANR	5093294	RelationalExpression	value < r0		5093142	0		<			
ANR	5093295	Identifier	value		5093142	0					
ANR	5093296	Identifier	r0		5093142	1					
ANR	5093297	ExpressionStatement	value = r0	350:8:11523:11533	5093142	1	True				
ANR	5093298	AssignmentExpression	value = r0		5093142	0		=			
ANR	5093299	Identifier	value		5093142	0					
ANR	5093300	Identifier	r0		5093142	1					
ANR	5093301	ElseStatement	else		5093142	0					
ANR	5093302	IfStatement	if ( value > r1 )		5093142	0					
ANR	5093303	Condition	value > r1	351:13:11548:11557	5093142	0	True				
ANR	5093304	RelationalExpression	value > r1		5093142	0		>			
ANR	5093305	Identifier	value		5093142	0					
ANR	5093306	Identifier	r1		5093142	1					
ANR	5093307	ExpressionStatement	value = r1	352:8:11568:11578	5093142	1	True				
ANR	5093308	AssignmentExpression	value = r1		5093142	0		=			
ANR	5093309	Identifier	value		5093142	0					
ANR	5093310	Identifier	r1		5093142	1					
ANR	5093311	ReturnStatement	return value ;	353:4:11584:11596	5093142	8	True				
ANR	5093312	Identifier	value		5093142	0					
ANR	5093313	ReturnType	static inline double		5093142	1					
ANR	5093314	Identifier	fn_Sd_encode		5093142	2					
ANR	5093315	ParameterList	"const gs_function_Sd_t * pfn , int i , double sample"		5093142	3					
ANR	5093316	Parameter	const gs_function_Sd_t * pfn	331:13:10880:10906	5093142	0	True				
ANR	5093317	ParameterType	const gs_function_Sd_t *		5093142	0					
ANR	5093318	Identifier	pfn		5093142	1					
ANR	5093319	Parameter	int i	331:42:10909:10913	5093142	1	True				
ANR	5093320	ParameterType	int		5093142	0					
ANR	5093321	Identifier	i		5093142	1					
ANR	5093322	Parameter	double sample	331:49:10916:10928	5093142	2	True				
ANR	5093323	ParameterType	double		5093142	0					
ANR	5093324	Identifier	sample		5093142	1					
ANR	5093325	CFGEntryNode	ENTRY		5093142		True				
ANR	5093326	CFGExitNode	EXIT		5093142		True				
ANR	5093327	Symbol	* pfn		5093142						
ANR	5093328	Symbol	pfn -> params . Range		5093142						
ANR	5093329	Symbol	bps		5093142						
ANR	5093330	Symbol	max_uint		5093142						
ANR	5093331	Symbol	i		5093142						
ANR	5093332	Symbol	* pfn -> params . Decode		5093142						
ANR	5093333	Symbol	d0		5093142						
ANR	5093334	Symbol	* * pfn		5093142						
ANR	5093335	Symbol	sample		5093142						
ANR	5093336	Symbol	d1		5093142						
ANR	5093337	Symbol	* i		5093142						
ANR	5093338	Symbol	* pfn -> params . Range		5093142						
ANR	5093339	Symbol	pfn		5093142						
ANR	5093340	Symbol	pfn -> params . Decode		5093142						
ANR	5093341	Symbol	value		5093142						
ANR	5093342	Symbol	pfn -> params		5093142						
ANR	5093343	Symbol	r0		5093142						
ANR	5093344	Symbol	pfn -> params . BitsPerSample		5093142						
ANR	5093345	Symbol	max_samp		5093142						
ANR	5093346	Symbol	* pfn -> params		5093142						
ANR	5093347	Symbol	r1		5093142						
ANR	5093348	Function	fn_Sd_evaluate_general	358:0:11694:13897							
ANR	5093349	FunctionDef	"fn_Sd_evaluate_general (const gs_function_t * pfn_common , const float * in , float * out)"		5093348	0					
ANR	5093350	CompoundStatement		360:0:11791:13897	5093348	0					
ANR	5093351	IdentifierDeclStatement	const gs_function_Sd_t * pfn = ( const gs_function_Sd_t * ) pfn_common ;	361:4:11797:11863	5093348	0	True				
ANR	5093352	IdentifierDecl	* pfn = ( const gs_function_Sd_t * ) pfn_common		5093348	0					
ANR	5093353	IdentifierDeclType	const gs_function_Sd_t *		5093348	0					
ANR	5093354	Identifier	pfn		5093348	1					
ANR	5093355	AssignmentExpression	* pfn = ( const gs_function_Sd_t * ) pfn_common		5093348	2		=			
ANR	5093356	Identifier	pfn		5093348	0					
ANR	5093357	CastExpression	( const gs_function_Sd_t * ) pfn_common		5093348	1					
ANR	5093358	CastTarget	const gs_function_Sd_t *		5093348	0					
ANR	5093359	Identifier	pfn_common		5093348	1					
ANR	5093360	IdentifierDeclStatement	int bps = pfn -> params . BitsPerSample ;	362:4:11869:11904	5093348	1	True				
ANR	5093361	IdentifierDecl	bps = pfn -> params . BitsPerSample		5093348	0					
ANR	5093362	IdentifierDeclType	int		5093348	0					
ANR	5093363	Identifier	bps		5093348	1					
ANR	5093364	AssignmentExpression	bps = pfn -> params . BitsPerSample		5093348	2		=			
ANR	5093365	Identifier	bps		5093348	0					
ANR	5093366	MemberAccess	pfn -> params . BitsPerSample		5093348	1					
ANR	5093367	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093368	Identifier	pfn		5093348	0					
ANR	5093369	Identifier	params		5093348	1					
ANR	5093370	Identifier	BitsPerSample		5093348	1					
ANR	5093371	IdentifierDeclStatement	ulong offset = 0 ;	363:4:11910:11926	5093348	2	True				
ANR	5093372	IdentifierDecl	offset = 0		5093348	0					
ANR	5093373	IdentifierDeclType	ulong		5093348	0					
ANR	5093374	Identifier	offset		5093348	1					
ANR	5093375	AssignmentExpression	offset = 0		5093348	2		=			
ANR	5093376	Identifier	offset		5093348	0					
ANR	5093377	PrimaryExpression	0		5093348	1					
ANR	5093378	IdentifierDeclStatement	int i ;	364:4:11932:11937	5093348	3	True				
ANR	5093379	IdentifierDecl	i		5093348	0					
ANR	5093380	IdentifierDeclType	int		5093348	0					
ANR	5093381	Identifier	i		5093348	1					
ANR	5093382	IdentifierDeclStatement	float encoded [ max_Sd_m ] ;	365:4:11943:11966	5093348	4	True				
ANR	5093383	IdentifierDecl	encoded [ max_Sd_m ]		5093348	0					
ANR	5093384	IdentifierDeclType	float [ max_Sd_m ]		5093348	0					
ANR	5093385	Identifier	encoded		5093348	1					
ANR	5093386	Identifier	max_Sd_m		5093348	2					
ANR	5093387	IdentifierDeclStatement	int iparts [ max_Sd_m ] ;	366:4:11972:11992	5093348	5	True				
ANR	5093388	IdentifierDecl	iparts [ max_Sd_m ]		5093348	0					
ANR	5093389	IdentifierDeclType	int [ max_Sd_m ]		5093348	0					
ANR	5093390	Identifier	iparts		5093348	1					
ANR	5093391	Identifier	max_Sd_m		5093348	2					
ANR	5093392	IdentifierDeclStatement	ulong factors [ max_Sd_m ] ;	367:4:12040:12063	5093348	6	True				
ANR	5093393	IdentifierDecl	factors [ max_Sd_m ]		5093348	0					
ANR	5093394	IdentifierDeclType	ulong [ max_Sd_m ]		5093348	0					
ANR	5093395	Identifier	factors		5093348	1					
ANR	5093396	Identifier	max_Sd_m		5093348	2					
ANR	5093397	IdentifierDeclStatement	float samples [ max_Sd_n ] ;	368:4:12069:12092	5093348	7	True				
ANR	5093398	IdentifierDecl	samples [ max_Sd_n ]		5093348	0					
ANR	5093399	IdentifierDeclType	float [ max_Sd_n ]		5093348	0					
ANR	5093400	Identifier	samples		5093348	1					
ANR	5093401	Identifier	max_Sd_n		5093348	2					
ANR	5093402	ForStatement	for ( i = 0 ; i < pfn -> params . m ; ++ i )		5093348	8					
ANR	5093403	ForInit	i = 0 ;	372:9:12140:12145	5093348	0	True				
ANR	5093404	AssignmentExpression	i = 0		5093348	0		=			
ANR	5093405	Identifier	i		5093348	0					
ANR	5093406	PrimaryExpression	0		5093348	1					
ANR	5093407	Condition	i < pfn -> params . m	372:16:12147:12163	5093348	1	True				
ANR	5093408	RelationalExpression	i < pfn -> params . m		5093348	0		<			
ANR	5093409	Identifier	i		5093348	0					
ANR	5093410	MemberAccess	pfn -> params . m		5093348	1					
ANR	5093411	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093412	Identifier	pfn		5093348	0					
ANR	5093413	Identifier	params		5093348	1					
ANR	5093414	Identifier	m		5093348	1					
ANR	5093415	UnaryExpression	++ i	372:35:12166:12168	5093348	2	True				
ANR	5093416	IncDec	++		5093348	0					
ANR	5093417	Identifier	i		5093348	1					
ANR	5093418	CompoundStatement		16:8:483:505	5093348	3					
ANR	5093419	IdentifierDeclStatement	"float d0 = pfn -> params . Domain [ 2 * i ] , d1 = pfn -> params . Domain [ 2 * i + 1 ] ;"	373:8:12181:12265	5093348	0	True				
ANR	5093420	IdentifierDecl	d0 = pfn -> params . Domain [ 2 * i ]		5093348	0					
ANR	5093421	IdentifierDeclType	float		5093348	0					
ANR	5093422	Identifier	d0		5093348	1					
ANR	5093423	AssignmentExpression	d0 = pfn -> params . Domain [ 2 * i ]		5093348	2		=			
ANR	5093424	Identifier	d0		5093348	0					
ANR	5093425	ArrayIndexing	pfn -> params . Domain [ 2 * i ]		5093348	1					
ANR	5093426	MemberAccess	pfn -> params . Domain		5093348	0					
ANR	5093427	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093428	Identifier	pfn		5093348	0					
ANR	5093429	Identifier	params		5093348	1					
ANR	5093430	Identifier	Domain		5093348	1					
ANR	5093431	MultiplicativeExpression	2 * i		5093348	1		*			
ANR	5093432	PrimaryExpression	2		5093348	0					
ANR	5093433	Identifier	i		5093348	1					
ANR	5093434	IdentifierDecl	d1 = pfn -> params . Domain [ 2 * i + 1 ]		5093348	1					
ANR	5093435	IdentifierDeclType	float		5093348	0					
ANR	5093436	Identifier	d1		5093348	1					
ANR	5093437	AssignmentExpression	d1 = pfn -> params . Domain [ 2 * i + 1 ]		5093348	2		=			
ANR	5093438	Identifier	d1		5093348	0					
ANR	5093439	ArrayIndexing	pfn -> params . Domain [ 2 * i + 1 ]		5093348	1					
ANR	5093440	MemberAccess	pfn -> params . Domain		5093348	0					
ANR	5093441	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093442	Identifier	pfn		5093348	0					
ANR	5093443	Identifier	params		5093348	1					
ANR	5093444	Identifier	Domain		5093348	1					
ANR	5093445	AdditiveExpression	2 * i + 1		5093348	1		+			
ANR	5093446	MultiplicativeExpression	2 * i		5093348	0		*			
ANR	5093447	PrimaryExpression	2		5093348	0					
ANR	5093448	Identifier	i		5093348	1					
ANR	5093449	PrimaryExpression	1		5093348	1					
ANR	5093450	IdentifierDeclStatement	"float arg = in [ i ] , enc ;"	375:8:12275:12297	5093348	1	True				
ANR	5093451	IdentifierDecl	arg = in [ i ]		5093348	0					
ANR	5093452	IdentifierDeclType	float		5093348	0					
ANR	5093453	Identifier	arg		5093348	1					
ANR	5093454	AssignmentExpression	arg = in [ i ]		5093348	2		=			
ANR	5093455	Identifier	arg		5093348	0					
ANR	5093456	ArrayIndexing	in [ i ]		5093348	1					
ANR	5093457	Identifier	in		5093348	0					
ANR	5093458	Identifier	i		5093348	1					
ANR	5093459	IdentifierDecl	enc		5093348	1					
ANR	5093460	IdentifierDeclType	float		5093348	0					
ANR	5093461	Identifier	enc		5093348	1					
ANR	5093462	IfStatement	if ( arg < d0 )		5093348	2					
ANR	5093463	Condition	arg < d0	377:12:12312:12319	5093348	0	True				
ANR	5093464	RelationalExpression	arg < d0		5093348	0		<			
ANR	5093465	Identifier	arg		5093348	0					
ANR	5093466	Identifier	d0		5093348	1					
ANR	5093467	ExpressionStatement	arg = d0	378:12:12334:12342	5093348	1	True				
ANR	5093468	AssignmentExpression	arg = d0		5093348	0		=			
ANR	5093469	Identifier	arg		5093348	0					
ANR	5093470	Identifier	d0		5093348	1					
ANR	5093471	ElseStatement	else		5093348	0					
ANR	5093472	IfStatement	if ( arg > d1 )		5093348	0					
ANR	5093473	Condition	arg > d1	379:17:12361:12368	5093348	0	True				
ANR	5093474	RelationalExpression	arg > d1		5093348	0		>			
ANR	5093475	Identifier	arg		5093348	0					
ANR	5093476	Identifier	d1		5093348	1					
ANR	5093477	ExpressionStatement	arg = d1	380:12:12383:12391	5093348	1	True				
ANR	5093478	AssignmentExpression	arg = d1		5093348	0		=			
ANR	5093479	Identifier	arg		5093348	0					
ANR	5093480	Identifier	d1		5093348	1					
ANR	5093481	IfStatement	if ( pfn -> params . Encode )		5093348	3					
ANR	5093482	Condition	pfn -> params . Encode	381:12:12405:12422	5093348	0	True				
ANR	5093483	MemberAccess	pfn -> params . Encode		5093348	0					
ANR	5093484	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093485	Identifier	pfn		5093348	0					
ANR	5093486	Identifier	params		5093348	1					
ANR	5093487	Identifier	Encode		5093348	1					
ANR	5093488	CompoundStatement		24:12:697:737	5093348	1					
ANR	5093489	IdentifierDeclStatement	float e0 = pfn -> params . Encode [ 2 * i ] ;	382:12:12439:12475	5093348	0	True				
ANR	5093490	IdentifierDecl	e0 = pfn -> params . Encode [ 2 * i ]		5093348	0					
ANR	5093491	IdentifierDeclType	float		5093348	0					
ANR	5093492	Identifier	e0		5093348	1					
ANR	5093493	AssignmentExpression	e0 = pfn -> params . Encode [ 2 * i ]		5093348	2		=			
ANR	5093494	Identifier	e0		5093348	0					
ANR	5093495	ArrayIndexing	pfn -> params . Encode [ 2 * i ]		5093348	1					
ANR	5093496	MemberAccess	pfn -> params . Encode		5093348	0					
ANR	5093497	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093498	Identifier	pfn		5093348	0					
ANR	5093499	Identifier	params		5093348	1					
ANR	5093500	Identifier	Encode		5093348	1					
ANR	5093501	MultiplicativeExpression	2 * i		5093348	1		*			
ANR	5093502	PrimaryExpression	2		5093348	0					
ANR	5093503	Identifier	i		5093348	1					
ANR	5093504	IdentifierDeclStatement	float e1 = pfn -> params . Encode [ 2 * i + 1 ] ;	383:12:12489:12529	5093348	1	True				
ANR	5093505	IdentifierDecl	e1 = pfn -> params . Encode [ 2 * i + 1 ]		5093348	0					
ANR	5093506	IdentifierDeclType	float		5093348	0					
ANR	5093507	Identifier	e1		5093348	1					
ANR	5093508	AssignmentExpression	e1 = pfn -> params . Encode [ 2 * i + 1 ]		5093348	2		=			
ANR	5093509	Identifier	e1		5093348	0					
ANR	5093510	ArrayIndexing	pfn -> params . Encode [ 2 * i + 1 ]		5093348	1					
ANR	5093511	MemberAccess	pfn -> params . Encode		5093348	0					
ANR	5093512	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093513	Identifier	pfn		5093348	0					
ANR	5093514	Identifier	params		5093348	1					
ANR	5093515	Identifier	Encode		5093348	1					
ANR	5093516	AdditiveExpression	2 * i + 1		5093348	1		+			
ANR	5093517	MultiplicativeExpression	2 * i		5093348	0		*			
ANR	5093518	PrimaryExpression	2		5093348	0					
ANR	5093519	Identifier	i		5093348	1					
ANR	5093520	PrimaryExpression	1		5093348	1					
ANR	5093521	ExpressionStatement	enc = ( arg - d0 ) * ( e1 - e0 ) / ( d1 - d0 ) + e0	385:12:12544:12589	5093348	2	True				
ANR	5093522	AssignmentExpression	enc = ( arg - d0 ) * ( e1 - e0 ) / ( d1 - d0 ) + e0		5093348	0		=			
ANR	5093523	Identifier	enc		5093348	0					
ANR	5093524	AdditiveExpression	( arg - d0 ) * ( e1 - e0 ) / ( d1 - d0 ) + e0		5093348	1		+			
ANR	5093525	MultiplicativeExpression	( arg - d0 ) * ( e1 - e0 ) / ( d1 - d0 )		5093348	0		*			
ANR	5093526	AdditiveExpression	arg - d0		5093348	0		-			
ANR	5093527	Identifier	arg		5093348	0					
ANR	5093528	Identifier	d0		5093348	1					
ANR	5093529	MultiplicativeExpression	( e1 - e0 ) / ( d1 - d0 )		5093348	1		/			
ANR	5093530	AdditiveExpression	e1 - e0		5093348	0		-			
ANR	5093531	Identifier	e1		5093348	0					
ANR	5093532	Identifier	e0		5093348	1					
ANR	5093533	AdditiveExpression	d1 - d0		5093348	1		-			
ANR	5093534	Identifier	d1		5093348	0					
ANR	5093535	Identifier	d0		5093348	1					
ANR	5093536	Identifier	e0		5093348	1					
ANR	5093537	IfStatement	if ( enc < 0 )		5093348	3					
ANR	5093538	Condition	enc < 0	386:16:12607:12613	5093348	0	True				
ANR	5093539	RelationalExpression	enc < 0		5093348	0		<			
ANR	5093540	Identifier	enc		5093348	0					
ANR	5093541	PrimaryExpression	0		5093348	1					
ANR	5093542	ExpressionStatement	encoded [ i ] = 0	387:16:12632:12646	5093348	1	True				
ANR	5093543	AssignmentExpression	encoded [ i ] = 0		5093348	0		=			
ANR	5093544	ArrayIndexing	encoded [ i ]		5093348	0					
ANR	5093545	Identifier	encoded		5093348	0					
ANR	5093546	Identifier	i		5093348	1					
ANR	5093547	PrimaryExpression	0		5093348	1					
ANR	5093548	ElseStatement	else		5093348	0					
ANR	5093549	IfStatement	if ( enc >= pfn -> params . Size [ i ] - 1 )		5093348	0					
ANR	5093550	Condition	enc >= pfn -> params . Size [ i ] - 1	388:21:12669:12698	5093348	0	True				
ANR	5093551	RelationalExpression	enc >= pfn -> params . Size [ i ] - 1		5093348	0		>=			
ANR	5093552	Identifier	enc		5093348	0					
ANR	5093553	AdditiveExpression	pfn -> params . Size [ i ] - 1		5093348	1		-			
ANR	5093554	ArrayIndexing	pfn -> params . Size [ i ]		5093348	0					
ANR	5093555	MemberAccess	pfn -> params . Size		5093348	0					
ANR	5093556	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093557	Identifier	pfn		5093348	0					
ANR	5093558	Identifier	params		5093348	1					
ANR	5093559	Identifier	Size		5093348	1					
ANR	5093560	Identifier	i		5093348	1					
ANR	5093561	PrimaryExpression	1		5093348	1					
ANR	5093562	ExpressionStatement	encoded [ i ] = ( float ) pfn -> params . Size [ i ] - 1	389:16:12717:12760	5093348	1	True				
ANR	5093563	AssignmentExpression	encoded [ i ] = ( float ) pfn -> params . Size [ i ] - 1		5093348	0		=			
ANR	5093564	ArrayIndexing	encoded [ i ]		5093348	0					
ANR	5093565	Identifier	encoded		5093348	0					
ANR	5093566	Identifier	i		5093348	1					
ANR	5093567	AdditiveExpression	( float ) pfn -> params . Size [ i ] - 1		5093348	1		-			
ANR	5093568	CastExpression	( float ) pfn -> params . Size [ i ]		5093348	0					
ANR	5093569	CastTarget	float		5093348	0					
ANR	5093570	ArrayIndexing	pfn -> params . Size [ i ]		5093348	1					
ANR	5093571	MemberAccess	pfn -> params . Size		5093348	0					
ANR	5093572	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093573	Identifier	pfn		5093348	0					
ANR	5093574	Identifier	params		5093348	1					
ANR	5093575	Identifier	Size		5093348	1					
ANR	5093576	Identifier	i		5093348	1					
ANR	5093577	PrimaryExpression	1		5093348	1					
ANR	5093578	ElseStatement	else		5093348	0					
ANR	5093579	ExpressionStatement	encoded [ i ] = enc	391:16:12795:12811	5093348	0	True				
ANR	5093580	AssignmentExpression	encoded [ i ] = enc		5093348	0		=			
ANR	5093581	ArrayIndexing	encoded [ i ]		5093348	0					
ANR	5093582	Identifier	encoded		5093348	0					
ANR	5093583	Identifier	i		5093348	1					
ANR	5093584	Identifier	enc		5093348	1					
ANR	5093585	ElseStatement	else		5093348	0					
ANR	5093586	CompoundStatement		33:15:1036:1036	5093348	0					
ANR	5093587	ExpressionStatement	encoded [ i ] = ( arg - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )	395:12:12989:13052	5093348	0	True				
ANR	5093588	AssignmentExpression	encoded [ i ] = ( arg - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		5093348	0		=			
ANR	5093589	ArrayIndexing	encoded [ i ]		5093348	0					
ANR	5093590	Identifier	encoded		5093348	0					
ANR	5093591	Identifier	i		5093348	1					
ANR	5093592	MultiplicativeExpression	( arg - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		5093348	1		*			
ANR	5093593	AdditiveExpression	arg - d0		5093348	0		-			
ANR	5093594	Identifier	arg		5093348	0					
ANR	5093595	Identifier	d0		5093348	1					
ANR	5093596	MultiplicativeExpression	( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		5093348	1		/			
ANR	5093597	AdditiveExpression	pfn -> params . Size [ i ] - 1		5093348	0		-			
ANR	5093598	ArrayIndexing	pfn -> params . Size [ i ]		5093348	0					
ANR	5093599	MemberAccess	pfn -> params . Size		5093348	0					
ANR	5093600	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093601	Identifier	pfn		5093348	0					
ANR	5093602	Identifier	params		5093348	1					
ANR	5093603	Identifier	Size		5093348	1					
ANR	5093604	Identifier	i		5093348	1					
ANR	5093605	PrimaryExpression	1		5093348	1					
ANR	5093606	AdditiveExpression	d1 - d0		5093348	1		-			
ANR	5093607	Identifier	d1		5093348	0					
ANR	5093608	Identifier	d0		5093348	1					
ANR	5093609	CompoundStatement		43:8:1347:1381	5093348	9					
ANR	5093610	IdentifierDeclStatement	ulong factor = bps * pfn -> params . n ;	402:8:13139:13173	5093348	0	True				
ANR	5093611	IdentifierDecl	factor = bps * pfn -> params . n		5093348	0					
ANR	5093612	IdentifierDeclType	ulong		5093348	0					
ANR	5093613	Identifier	factor		5093348	1					
ANR	5093614	AssignmentExpression	factor = bps * pfn -> params . n		5093348	2		=			
ANR	5093615	Identifier	factor		5093348	0					
ANR	5093616	MultiplicativeExpression	bps * pfn -> params . n		5093348	1		*			
ANR	5093617	Identifier	bps		5093348	0					
ANR	5093618	MemberAccess	pfn -> params . n		5093348	1					
ANR	5093619	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093620	Identifier	pfn		5093348	0					
ANR	5093621	Identifier	params		5093348	1					
ANR	5093622	Identifier	n		5093348	1					
ANR	5093623	ForStatement	for ( i = 0 ; i < pfn -> params . m ; factor *= pfn -> params . Size [ i ++ ] )		5093348	1					
ANR	5093624	ForInit	i = 0 ;	404:13:13189:13194	5093348	0	True				
ANR	5093625	AssignmentExpression	i = 0		5093348	0		=			
ANR	5093626	Identifier	i		5093348	0					
ANR	5093627	PrimaryExpression	0		5093348	1					
ANR	5093628	Condition	i < pfn -> params . m	404:20:13196:13212	5093348	1	True				
ANR	5093629	RelationalExpression	i < pfn -> params . m		5093348	0		<			
ANR	5093630	Identifier	i		5093348	0					
ANR	5093631	MemberAccess	pfn -> params . m		5093348	1					
ANR	5093632	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093633	Identifier	pfn		5093348	0					
ANR	5093634	Identifier	params		5093348	1					
ANR	5093635	Identifier	m		5093348	1					
ANR	5093636	AssignmentExpression	factor *= pfn -> params . Size [ i ++ ]	404:39:13215:13245	5093348	2	True	*=			
ANR	5093637	Identifier	factor		5093348	0					
ANR	5093638	ArrayIndexing	pfn -> params . Size [ i ++ ]		5093348	1					
ANR	5093639	MemberAccess	pfn -> params . Size		5093348	0					
ANR	5093640	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093641	Identifier	pfn		5093348	0					
ANR	5093642	Identifier	params		5093348	1					
ANR	5093643	Identifier	Size		5093348	1					
ANR	5093644	PostIncDecOperationExpression	i ++		5093348	1					
ANR	5093645	Identifier	i		5093348	0					
ANR	5093646	IncDec	++		5093348	1					
ANR	5093647	CompoundStatement		46:12:1470:1497	5093348	3					
ANR	5093648	IdentifierDeclStatement	int ipart = ( int ) encoded [ i ] ;	405:12:13262:13289	5093348	0	True				
ANR	5093649	IdentifierDecl	ipart = ( int ) encoded [ i ]		5093348	0					
ANR	5093650	IdentifierDeclType	int		5093348	0					
ANR	5093651	Identifier	ipart		5093348	1					
ANR	5093652	AssignmentExpression	ipart = ( int ) encoded [ i ]		5093348	2		=			
ANR	5093653	Identifier	ipart		5093348	0					
ANR	5093654	CastExpression	( int ) encoded [ i ]		5093348	1					
ANR	5093655	CastTarget	int		5093348	0					
ANR	5093656	ArrayIndexing	encoded [ i ]		5093348	1					
ANR	5093657	Identifier	encoded		5093348	0					
ANR	5093658	Identifier	i		5093348	1					
ANR	5093659	ExpressionStatement	offset += ( factors [ i ] = factor ) * ipart	407:12:13304:13343	5093348	1	True				
ANR	5093660	AssignmentExpression	offset += ( factors [ i ] = factor ) * ipart		5093348	0		+=			
ANR	5093661	Identifier	offset		5093348	0					
ANR	5093662	MultiplicativeExpression	( factors [ i ] = factor ) * ipart		5093348	1		*			
ANR	5093663	AssignmentExpression	factors [ i ] = factor		5093348	0		=			
ANR	5093664	ArrayIndexing	factors [ i ]		5093348	0					
ANR	5093665	Identifier	factors		5093348	0					
ANR	5093666	Identifier	i		5093348	1					
ANR	5093667	Identifier	factor		5093348	1					
ANR	5093668	Identifier	ipart		5093348	1					
ANR	5093669	ExpressionStatement	iparts [ i ] = ipart	408:12:13357:13374	5093348	2	True				
ANR	5093670	AssignmentExpression	iparts [ i ] = ipart		5093348	0		=			
ANR	5093671	ArrayIndexing	iparts [ i ]		5093348	0					
ANR	5093672	Identifier	iparts		5093348	0					
ANR	5093673	Identifier	i		5093348	1					
ANR	5093674	Identifier	ipart		5093348	1					
ANR	5093675	ExpressionStatement	encoded [ i ] -= ipart	409:12:13430:13449	5093348	3	True				
ANR	5093676	AssignmentExpression	encoded [ i ] -= ipart		5093348	0		-=			
ANR	5093677	ArrayIndexing	encoded [ i ]		5093348	0					
ANR	5093678	Identifier	encoded		5093348	0					
ANR	5093679	Identifier	i		5093348	1					
ANR	5093680	Identifier	ipart		5093348	1					
ANR	5093681	IfStatement	if ( pfn -> params . Order == 3 )		5093348	10					
ANR	5093682	Condition	pfn -> params . Order == 3	412:8:13475:13496	5093348	0	True				
ANR	5093683	EqualityExpression	pfn -> params . Order == 3		5093348	0		==			
ANR	5093684	MemberAccess	pfn -> params . Order		5093348	0					
ANR	5093685	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093686	Identifier	pfn		5093348	0					
ANR	5093687	Identifier	params		5093348	1					
ANR	5093688	Identifier	Order		5093348	1					
ANR	5093689	PrimaryExpression	3		5093348	1					
ANR	5093690	ExpressionStatement	"fn_interpolate_cubic ( pfn , encoded , iparts , factors , samples , offset , pfn -> params . m )"	413:8:13507:13619	5093348	1	True				
ANR	5093691	CallExpression	"fn_interpolate_cubic ( pfn , encoded , iparts , factors , samples , offset , pfn -> params . m )"		5093348	0					
ANR	5093692	Callee	fn_interpolate_cubic		5093348	0					
ANR	5093693	Identifier	fn_interpolate_cubic		5093348	0					
ANR	5093694	ArgumentList	pfn		5093348	1					
ANR	5093695	Argument	pfn		5093348	0					
ANR	5093696	Identifier	pfn		5093348	0					
ANR	5093697	Argument	encoded		5093348	1					
ANR	5093698	Identifier	encoded		5093348	0					
ANR	5093699	Argument	iparts		5093348	2					
ANR	5093700	Identifier	iparts		5093348	0					
ANR	5093701	Argument	factors		5093348	3					
ANR	5093702	Identifier	factors		5093348	0					
ANR	5093703	Argument	samples		5093348	4					
ANR	5093704	Identifier	samples		5093348	0					
ANR	5093705	Argument	offset		5093348	5					
ANR	5093706	Identifier	offset		5093348	0					
ANR	5093707	Argument	pfn -> params . m		5093348	6					
ANR	5093708	MemberAccess	pfn -> params . m		5093348	0					
ANR	5093709	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093710	Identifier	pfn		5093348	0					
ANR	5093711	Identifier	params		5093348	1					
ANR	5093712	Identifier	m		5093348	1					
ANR	5093713	ElseStatement	else		5093348	0					
ANR	5093714	ExpressionStatement	"fn_interpolate_linear ( pfn , encoded , factors , samples , offset , pfn -> params . m )"	416:8:13638:13744	5093348	0	True				
ANR	5093715	CallExpression	"fn_interpolate_linear ( pfn , encoded , factors , samples , offset , pfn -> params . m )"		5093348	0					
ANR	5093716	Callee	fn_interpolate_linear		5093348	0					
ANR	5093717	Identifier	fn_interpolate_linear		5093348	0					
ANR	5093718	ArgumentList	pfn		5093348	1					
ANR	5093719	Argument	pfn		5093348	0					
ANR	5093720	Identifier	pfn		5093348	0					
ANR	5093721	Argument	encoded		5093348	1					
ANR	5093722	Identifier	encoded		5093348	0					
ANR	5093723	Argument	factors		5093348	2					
ANR	5093724	Identifier	factors		5093348	0					
ANR	5093725	Argument	samples		5093348	3					
ANR	5093726	Identifier	samples		5093348	0					
ANR	5093727	Argument	offset		5093348	4					
ANR	5093728	Identifier	offset		5093348	0					
ANR	5093729	Argument	pfn -> params . m		5093348	5					
ANR	5093730	MemberAccess	pfn -> params . m		5093348	0					
ANR	5093731	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093732	Identifier	pfn		5093348	0					
ANR	5093733	Identifier	params		5093348	1					
ANR	5093734	Identifier	m		5093348	1					
ANR	5093735	ForStatement	for ( i = 0 ; i < pfn -> params . n ; ++ i )		5093348	11					
ANR	5093736	ForInit	i = 0 ;	421:9:13793:13798	5093348	0	True				
ANR	5093737	AssignmentExpression	i = 0		5093348	0		=			
ANR	5093738	Identifier	i		5093348	0					
ANR	5093739	PrimaryExpression	0		5093348	1					
ANR	5093740	Condition	i < pfn -> params . n	421:16:13800:13816	5093348	1	True				
ANR	5093741	RelationalExpression	i < pfn -> params . n		5093348	0		<			
ANR	5093742	Identifier	i		5093348	0					
ANR	5093743	MemberAccess	pfn -> params . n		5093348	1					
ANR	5093744	PtrMemberAccess	pfn -> params		5093348	0					
ANR	5093745	Identifier	pfn		5093348	0					
ANR	5093746	Identifier	params		5093348	1					
ANR	5093747	Identifier	n		5093348	1					
ANR	5093748	UnaryExpression	++ i	421:35:13819:13821	5093348	2	True				
ANR	5093749	IncDec	++		5093348	0					
ANR	5093750	Identifier	i		5093348	1					
ANR	5093751	ExpressionStatement	"out [ i ] = ( float ) fn_Sd_encode ( pfn , i , samples [ i ] )"	422:8:13832:13880	5093348	3	True				
ANR	5093752	AssignmentExpression	"out [ i ] = ( float ) fn_Sd_encode ( pfn , i , samples [ i ] )"		5093348	0		=			
ANR	5093753	ArrayIndexing	out [ i ]		5093348	0					
ANR	5093754	Identifier	out		5093348	0					
ANR	5093755	Identifier	i		5093348	1					
ANR	5093756	CastExpression	"( float ) fn_Sd_encode ( pfn , i , samples [ i ] )"		5093348	1					
ANR	5093757	CastTarget	float		5093348	0					
ANR	5093758	CallExpression	"fn_Sd_encode ( pfn , i , samples [ i ] )"		5093348	1					
ANR	5093759	Callee	fn_Sd_encode		5093348	0					
ANR	5093760	Identifier	fn_Sd_encode		5093348	0					
ANR	5093761	ArgumentList	pfn		5093348	1					
ANR	5093762	Argument	pfn		5093348	0					
ANR	5093763	Identifier	pfn		5093348	0					
ANR	5093764	Argument	i		5093348	1					
ANR	5093765	Identifier	i		5093348	0					
ANR	5093766	Argument	samples [ i ]		5093348	2					
ANR	5093767	ArrayIndexing	samples [ i ]		5093348	0					
ANR	5093768	Identifier	samples		5093348	0					
ANR	5093769	Identifier	i		5093348	1					
ANR	5093770	ReturnStatement	return 0 ;	424:4:13887:13895	5093348	12	True				
ANR	5093771	PrimaryExpression	0		5093348	0					
ANR	5093772	ReturnType	static int		5093348	1					
ANR	5093773	Identifier	fn_Sd_evaluate_general		5093348	2					
ANR	5093774	ParameterList	"const gs_function_t * pfn_common , const float * in , float * out"		5093348	3					
ANR	5093775	Parameter	const gs_function_t * pfn_common	359:23:11728:11759	5093348	0	True				
ANR	5093776	ParameterType	const gs_function_t *		5093348	0					
ANR	5093777	Identifier	pfn_common		5093348	1					
ANR	5093778	Parameter	const float * in	359:57:11762:11776	5093348	1	True				
ANR	5093779	ParameterType	const float *		5093348	0					
ANR	5093780	Identifier	in		5093348	1					
ANR	5093781	Parameter	float * out	359:74:11779:11788	5093348	2	True				
ANR	5093782	ParameterType	float *		5093348	0					
ANR	5093783	Identifier	out		5093348	1					
ANR	5093784	CFGEntryNode	ENTRY		5093348		True				
ANR	5093785	CFGExitNode	EXIT		5093348		True				
ANR	5093786	Symbol	pfn -> params . m		5093348						
ANR	5093787	Symbol	pfn -> params . Size		5093348						
ANR	5093788	Symbol	pfn -> params . n		5093348						
ANR	5093789	Symbol	pfn_common		5093348						
ANR	5093790	Symbol	* factors		5093348						
ANR	5093791	Symbol	* in		5093348						
ANR	5093792	Symbol	* encoded		5093348						
ANR	5093793	Symbol	d0		5093348						
ANR	5093794	Symbol	* * pfn		5093348						
ANR	5093795	Symbol	d1		5093348						
ANR	5093796	Symbol	out		5093348						
ANR	5093797	Symbol	pfn -> params . Order		5093348						
ANR	5093798	Symbol	iparts		5093348						
ANR	5093799	Symbol	* samples		5093348						
ANR	5093800	Symbol	fn_Sd_encode		5093348						
ANR	5093801	Symbol	arg		5093348						
ANR	5093802	Symbol	pfn -> params . Encode		5093348						
ANR	5093803	Symbol	enc		5093348						
ANR	5093804	Symbol	factor		5093348						
ANR	5093805	Symbol	pfn -> params . BitsPerSample		5093348						
ANR	5093806	Symbol	ipart		5093348						
ANR	5093807	Symbol	* pfn		5093348						
ANR	5093808	Symbol	bps		5093348						
ANR	5093809	Symbol	offset		5093348						
ANR	5093810	Symbol	in		5093348						
ANR	5093811	Symbol	* pfn -> params . Encode		5093348						
ANR	5093812	Symbol	* pfn -> params . Size		5093348						
ANR	5093813	Symbol	i		5093348						
ANR	5093814	Symbol	pfn -> params . Domain		5093348						
ANR	5093815	Symbol	* pfn -> params . Domain		5093348						
ANR	5093816	Symbol	e0		5093348						
ANR	5093817	Symbol	e1		5093348						
ANR	5093818	Symbol	samples		5093348						
ANR	5093819	Symbol	factors		5093348						
ANR	5093820	Symbol	* iparts		5093348						
ANR	5093821	Symbol	* i		5093348						
ANR	5093822	Symbol	* out		5093348						
ANR	5093823	Symbol	pfn		5093348						
ANR	5093824	Symbol	pfn -> params		5093348						
ANR	5093825	Symbol	* pfn -> params		5093348						
ANR	5093826	Symbol	encoded		5093348						
ANR	5093827	DeclStmt									
ANR	5093828	Decl							const double	const double	double_stub
ANR	5093829	Function	fn_make_cubic_poles	429:0:13941:14317							
ANR	5093830	FunctionDef	"fn_make_cubic_poles (double * p , double f0 , double f1 , double f2 , double f3 , const int pole_step_minor)"		5093829	0					
ANR	5093831	CompoundStatement		432:0:14074:14317	5093829	0					
ANR	5093832	IdentifierDeclStatement	const double a = - 0.5 ;	434:4:14182:14203	5093829	0	True				
ANR	5093833	IdentifierDecl	a = - 0.5		5093829	0					
ANR	5093834	IdentifierDeclType	const double		5093829	0					
ANR	5093835	Identifier	a		5093829	1					
ANR	5093836	AssignmentExpression	a = - 0.5		5093829	2		=			
ANR	5093837	Identifier	a		5093829	0					
ANR	5093838	UnaryOperationExpression	- 0.5		5093829	1					
ANR	5093839	UnaryOperator	-		5093829	0					
ANR	5093840	PrimaryExpression	0.5		5093829	1					
ANR	5093841	ExpressionStatement	p [ pole_step_minor * 1 ] = ( a * f0 + 3 * f1 - a * f2 ) / 3.0	436:4:14210:14259	5093829	1	True				
ANR	5093842	AssignmentExpression	p [ pole_step_minor * 1 ] = ( a * f0 + 3 * f1 - a * f2 ) / 3.0		5093829	0		=			
ANR	5093843	ArrayIndexing	p [ pole_step_minor * 1 ]		5093829	0					
ANR	5093844	Identifier	p		5093829	0					
ANR	5093845	MultiplicativeExpression	pole_step_minor * 1		5093829	1		*			
ANR	5093846	Identifier	pole_step_minor		5093829	0					
ANR	5093847	PrimaryExpression	1		5093829	1					
ANR	5093848	MultiplicativeExpression	( a * f0 + 3 * f1 - a * f2 ) / 3.0		5093829	1		/			
ANR	5093849	AdditiveExpression	a * f0 + 3 * f1 - a * f2		5093829	0		+			
ANR	5093850	MultiplicativeExpression	a * f0		5093829	0		*			
ANR	5093851	Identifier	a		5093829	0					
ANR	5093852	Identifier	f0		5093829	1					
ANR	5093853	AdditiveExpression	3 * f1 - a * f2		5093829	1		-			
ANR	5093854	MultiplicativeExpression	3 * f1		5093829	0		*			
ANR	5093855	PrimaryExpression	3		5093829	0					
ANR	5093856	Identifier	f1		5093829	1					
ANR	5093857	MultiplicativeExpression	a * f2		5093829	1		*			
ANR	5093858	Identifier	a		5093829	0					
ANR	5093859	Identifier	f2		5093829	1					
ANR	5093860	PrimaryExpression	3.0		5093829	1					
ANR	5093861	ExpressionStatement	p [ pole_step_minor * 2 ] = ( - a * f1 + 3 * f2 + a * f3 ) / 3.0	437:4:14265:14315	5093829	2	True				
ANR	5093862	AssignmentExpression	p [ pole_step_minor * 2 ] = ( - a * f1 + 3 * f2 + a * f3 ) / 3.0		5093829	0		=			
ANR	5093863	ArrayIndexing	p [ pole_step_minor * 2 ]		5093829	0					
ANR	5093864	Identifier	p		5093829	0					
ANR	5093865	MultiplicativeExpression	pole_step_minor * 2		5093829	1		*			
ANR	5093866	Identifier	pole_step_minor		5093829	0					
ANR	5093867	PrimaryExpression	2		5093829	1					
ANR	5093868	MultiplicativeExpression	( - a * f1 + 3 * f2 + a * f3 ) / 3.0		5093829	1		/			
ANR	5093869	AdditiveExpression	- a * f1 + 3 * f2 + a * f3		5093829	0		+			
ANR	5093870	MultiplicativeExpression	- a * f1		5093829	0		*			
ANR	5093871	UnaryOperationExpression	- a		5093829	0					
ANR	5093872	UnaryOperator	-		5093829	0					
ANR	5093873	Identifier	a		5093829	1					
ANR	5093874	Identifier	f1		5093829	1					
ANR	5093875	AdditiveExpression	3 * f2 + a * f3		5093829	1		+			
ANR	5093876	MultiplicativeExpression	3 * f2		5093829	0		*			
ANR	5093877	PrimaryExpression	3		5093829	0					
ANR	5093878	Identifier	f2		5093829	1					
ANR	5093879	MultiplicativeExpression	a * f3		5093829	1		*			
ANR	5093880	Identifier	a		5093829	0					
ANR	5093881	Identifier	f3		5093829	1					
ANR	5093882	PrimaryExpression	3.0		5093829	1					
ANR	5093883	ReturnType	static inline void		5093829	1					
ANR	5093884	Identifier	fn_make_cubic_poles		5093829	2					
ANR	5093885	ParameterList	"double * p , double f0 , double f1 , double f2 , double f3 , const int pole_step_minor"		5093829	3					
ANR	5093886	Parameter	double * p	430:20:13980:13988	5093829	0	True				
ANR	5093887	ParameterType	double *		5093829	0					
ANR	5093888	Identifier	p		5093829	1					
ANR	5093889	Parameter	double f0	430:31:13991:13999	5093829	1	True				
ANR	5093890	ParameterType	double		5093829	0					
ANR	5093891	Identifier	f0		5093829	1					
ANR	5093892	Parameter	double f1	430:42:14002:14010	5093829	2	True				
ANR	5093893	ParameterType	double		5093829	0					
ANR	5093894	Identifier	f1		5093829	1					
ANR	5093895	Parameter	double f2	430:53:14013:14021	5093829	3	True				
ANR	5093896	ParameterType	double		5093829	0					
ANR	5093897	Identifier	f2		5093829	1					
ANR	5093898	Parameter	double f3	430:64:14024:14032	5093829	4	True				
ANR	5093899	ParameterType	double		5093829	0					
ANR	5093900	Identifier	f3		5093829	1					
ANR	5093901	Parameter	const int pole_step_minor	431:12:14047:14071	5093829	5	True				
ANR	5093902	ParameterType	const int		5093829	0					
ANR	5093903	Identifier	pole_step_minor		5093829	1					
ANR	5093904	CFGEntryNode	ENTRY		5093829		True				
ANR	5093905	CFGExitNode	EXIT		5093829		True				
ANR	5093906	Symbol	p		5093829						
ANR	5093907	Symbol	a		5093829						
ANR	5093908	Symbol	f0		5093829						
ANR	5093909	Symbol	* p		5093829						
ANR	5093910	Symbol	f1		5093829						
ANR	5093911	Symbol	pole_step_minor		5093829						
ANR	5093912	Symbol	f2		5093829						
ANR	5093913	Symbol	f3		5093829						
ANR	5093914	Symbol	* pole_step_minor		5093829						
ANR	5093915	Function	fn_make_poles	440:0:14320:15446							
ANR	5093916	FunctionDef	"fn_make_poles (double * p , const int pole_step , int power , int bias)"		5093915	0					
ANR	5093917	CompoundStatement		442:0:14399:15446	5093915	0					
ANR	5093918	IdentifierDeclStatement	const int pole_step_minor = pole_step / 3 ;	443:4:14405:14446	5093915	0	True				
ANR	5093919	IdentifierDecl	pole_step_minor = pole_step / 3		5093915	0					
ANR	5093920	IdentifierDeclType	const int		5093915	0					
ANR	5093921	Identifier	pole_step_minor		5093915	1					
ANR	5093922	AssignmentExpression	pole_step_minor = pole_step / 3		5093915	2		=			
ANR	5093923	Identifier	pole_step_minor		5093915	0					
ANR	5093924	MultiplicativeExpression	pole_step / 3		5093915	1		/			
ANR	5093925	Identifier	pole_step		5093915	0					
ANR	5093926	PrimaryExpression	3		5093915	1					
ANR	5093927	SwitchStatement	switch ( power )		5093915	1					
ANR	5093928	Condition	power	444:11:14459:14463	5093915	0	True				
ANR	5093929	Identifier	power		5093915	0					
ANR	5093930	CompoundStatement		3:18:66:66	5093915	1					
ANR	5093931	Label	case 1 :	445:8:14476:14482	5093915	0	True				
ANR	5093932	ExpressionStatement	p [ pole_step_minor * 1 ] = ( 2 * p [ pole_step * 0 ] + 1 * p [ pole_step * 1 ] ) / 3	447:12:14561:14635	5093915	1	True				
ANR	5093933	AssignmentExpression	p [ pole_step_minor * 1 ] = ( 2 * p [ pole_step * 0 ] + 1 * p [ pole_step * 1 ] ) / 3		5093915	0		=			
ANR	5093934	ArrayIndexing	p [ pole_step_minor * 1 ]		5093915	0					
ANR	5093935	Identifier	p		5093915	0					
ANR	5093936	MultiplicativeExpression	pole_step_minor * 1		5093915	1		*			
ANR	5093937	Identifier	pole_step_minor		5093915	0					
ANR	5093938	PrimaryExpression	1		5093915	1					
ANR	5093939	MultiplicativeExpression	( 2 * p [ pole_step * 0 ] + 1 * p [ pole_step * 1 ] ) / 3		5093915	1		/			
ANR	5093940	AdditiveExpression	2 * p [ pole_step * 0 ] + 1 * p [ pole_step * 1 ]		5093915	0		+			
ANR	5093941	MultiplicativeExpression	2 * p [ pole_step * 0 ]		5093915	0		*			
ANR	5093942	PrimaryExpression	2		5093915	0					
ANR	5093943	ArrayIndexing	p [ pole_step * 0 ]		5093915	1					
ANR	5093944	Identifier	p		5093915	0					
ANR	5093945	MultiplicativeExpression	pole_step * 0		5093915	1		*			
ANR	5093946	Identifier	pole_step		5093915	0					
ANR	5093947	PrimaryExpression	0		5093915	1					
ANR	5093948	MultiplicativeExpression	1 * p [ pole_step * 1 ]		5093915	1		*			
ANR	5093949	PrimaryExpression	1		5093915	0					
ANR	5093950	ArrayIndexing	p [ pole_step * 1 ]		5093915	1					
ANR	5093951	Identifier	p		5093915	0					
ANR	5093952	MultiplicativeExpression	pole_step * 1		5093915	1		*			
ANR	5093953	Identifier	pole_step		5093915	0					
ANR	5093954	PrimaryExpression	1		5093915	1					
ANR	5093955	PrimaryExpression	3		5093915	1					
ANR	5093956	ExpressionStatement	p [ pole_step_minor * 2 ] = ( 1 * p [ pole_step * 0 ] + 2 * p [ pole_step * 1 ] ) / 3	448:12:14649:14723	5093915	2	True				
ANR	5093957	AssignmentExpression	p [ pole_step_minor * 2 ] = ( 1 * p [ pole_step * 0 ] + 2 * p [ pole_step * 1 ] ) / 3		5093915	0		=			
ANR	5093958	ArrayIndexing	p [ pole_step_minor * 2 ]		5093915	0					
ANR	5093959	Identifier	p		5093915	0					
ANR	5093960	MultiplicativeExpression	pole_step_minor * 2		5093915	1		*			
ANR	5093961	Identifier	pole_step_minor		5093915	0					
ANR	5093962	PrimaryExpression	2		5093915	1					
ANR	5093963	MultiplicativeExpression	( 1 * p [ pole_step * 0 ] + 2 * p [ pole_step * 1 ] ) / 3		5093915	1		/			
ANR	5093964	AdditiveExpression	1 * p [ pole_step * 0 ] + 2 * p [ pole_step * 1 ]		5093915	0		+			
ANR	5093965	MultiplicativeExpression	1 * p [ pole_step * 0 ]		5093915	0		*			
ANR	5093966	PrimaryExpression	1		5093915	0					
ANR	5093967	ArrayIndexing	p [ pole_step * 0 ]		5093915	1					
ANR	5093968	Identifier	p		5093915	0					
ANR	5093969	MultiplicativeExpression	pole_step * 0		5093915	1		*			
ANR	5093970	Identifier	pole_step		5093915	0					
ANR	5093971	PrimaryExpression	0		5093915	1					
ANR	5093972	MultiplicativeExpression	2 * p [ pole_step * 1 ]		5093915	1		*			
ANR	5093973	PrimaryExpression	2		5093915	0					
ANR	5093974	ArrayIndexing	p [ pole_step * 1 ]		5093915	1					
ANR	5093975	Identifier	p		5093915	0					
ANR	5093976	MultiplicativeExpression	pole_step * 1		5093915	1		*			
ANR	5093977	Identifier	pole_step		5093915	0					
ANR	5093978	PrimaryExpression	1		5093915	1					
ANR	5093979	PrimaryExpression	3		5093915	1					
ANR	5093980	BreakStatement	break ;	449:12:14737:14742	5093915	3	True				
ANR	5093981	Label	case 2 :	450:8:14752:14758	5093915	4	True				
ANR	5093982	ExpressionStatement	"fn_make_cubic_poles ( p + pole_step * bias , p [ pole_step * 0 ] , p [ pole_step * bias ] , p [ pole_step * ( 1 + bias ) ] , p [ pole_step * 2 ] , pole_step_minor )"	453:12:14901:15103	5093915	5	True				
ANR	5093983	CallExpression	"fn_make_cubic_poles ( p + pole_step * bias , p [ pole_step * 0 ] , p [ pole_step * bias ] , p [ pole_step * ( 1 + bias ) ] , p [ pole_step * 2 ] , pole_step_minor )"		5093915	0					
ANR	5093984	Callee	fn_make_cubic_poles		5093915	0					
ANR	5093985	Identifier	fn_make_cubic_poles		5093915	0					
ANR	5093986	ArgumentList	p + pole_step * bias		5093915	1					
ANR	5093987	Argument	p + pole_step * bias		5093915	0					
ANR	5093988	AdditiveExpression	p + pole_step * bias		5093915	0		+			
ANR	5093989	Identifier	p		5093915	0					
ANR	5093990	MultiplicativeExpression	pole_step * bias		5093915	1		*			
ANR	5093991	Identifier	pole_step		5093915	0					
ANR	5093992	Identifier	bias		5093915	1					
ANR	5093993	Argument	p [ pole_step * 0 ]		5093915	1					
ANR	5093994	ArrayIndexing	p [ pole_step * 0 ]		5093915	0					
ANR	5093995	Identifier	p		5093915	0					
ANR	5093996	MultiplicativeExpression	pole_step * 0		5093915	1		*			
ANR	5093997	Identifier	pole_step		5093915	0					
ANR	5093998	PrimaryExpression	0		5093915	1					
ANR	5093999	Argument	p [ pole_step * bias ]		5093915	2					
ANR	5094000	ArrayIndexing	p [ pole_step * bias ]		5093915	0					
ANR	5094001	Identifier	p		5093915	0					
ANR	5094002	MultiplicativeExpression	pole_step * bias		5093915	1		*			
ANR	5094003	Identifier	pole_step		5093915	0					
ANR	5094004	Identifier	bias		5093915	1					
ANR	5094005	Argument	p [ pole_step * ( 1 + bias ) ]		5093915	3					
ANR	5094006	ArrayIndexing	p [ pole_step * ( 1 + bias ) ]		5093915	0					
ANR	5094007	Identifier	p		5093915	0					
ANR	5094008	MultiplicativeExpression	pole_step * ( 1 + bias )		5093915	1		*			
ANR	5094009	Identifier	pole_step		5093915	0					
ANR	5094010	AdditiveExpression	1 + bias		5093915	1		+			
ANR	5094011	PrimaryExpression	1		5093915	0					
ANR	5094012	Identifier	bias		5093915	1					
ANR	5094013	Argument	p [ pole_step * 2 ]		5093915	4					
ANR	5094014	ArrayIndexing	p [ pole_step * 2 ]		5093915	0					
ANR	5094015	Identifier	p		5093915	0					
ANR	5094016	MultiplicativeExpression	pole_step * 2		5093915	1		*			
ANR	5094017	Identifier	pole_step		5093915	0					
ANR	5094018	PrimaryExpression	2		5093915	1					
ANR	5094019	Argument	pole_step_minor		5093915	5					
ANR	5094020	Identifier	pole_step_minor		5093915	0					
ANR	5094021	BreakStatement	break ;	457:12:15117:15122	5093915	6	True				
ANR	5094022	Label	case 3 :	458:8:15132:15138	5093915	7	True				
ANR	5094023	ExpressionStatement	"fn_make_cubic_poles ( p + pole_step * bias , p [ pole_step * 0 ] , p [ pole_step * 1 ] , p [ pole_step * 2 ] , p [ pole_step * 3 ] , pole_step_minor )"	460:12:15186:15356	5093915	8	True				
ANR	5094024	CallExpression	"fn_make_cubic_poles ( p + pole_step * bias , p [ pole_step * 0 ] , p [ pole_step * 1 ] , p [ pole_step * 2 ] , p [ pole_step * 3 ] , pole_step_minor )"		5093915	0					
ANR	5094025	Callee	fn_make_cubic_poles		5093915	0					
ANR	5094026	Identifier	fn_make_cubic_poles		5093915	0					
ANR	5094027	ArgumentList	p + pole_step * bias		5093915	1					
ANR	5094028	Argument	p + pole_step * bias		5093915	0					
ANR	5094029	AdditiveExpression	p + pole_step * bias		5093915	0		+			
ANR	5094030	Identifier	p		5093915	0					
ANR	5094031	MultiplicativeExpression	pole_step * bias		5093915	1		*			
ANR	5094032	Identifier	pole_step		5093915	0					
ANR	5094033	Identifier	bias		5093915	1					
ANR	5094034	Argument	p [ pole_step * 0 ]		5093915	1					
ANR	5094035	ArrayIndexing	p [ pole_step * 0 ]		5093915	0					
ANR	5094036	Identifier	p		5093915	0					
ANR	5094037	MultiplicativeExpression	pole_step * 0		5093915	1		*			
ANR	5094038	Identifier	pole_step		5093915	0					
ANR	5094039	PrimaryExpression	0		5093915	1					
ANR	5094040	Argument	p [ pole_step * 1 ]		5093915	2					
ANR	5094041	ArrayIndexing	p [ pole_step * 1 ]		5093915	0					
ANR	5094042	Identifier	p		5093915	0					
ANR	5094043	MultiplicativeExpression	pole_step * 1		5093915	1		*			
ANR	5094044	Identifier	pole_step		5093915	0					
ANR	5094045	PrimaryExpression	1		5093915	1					
ANR	5094046	Argument	p [ pole_step * 2 ]		5093915	3					
ANR	5094047	ArrayIndexing	p [ pole_step * 2 ]		5093915	0					
ANR	5094048	Identifier	p		5093915	0					
ANR	5094049	MultiplicativeExpression	pole_step * 2		5093915	1		*			
ANR	5094050	Identifier	pole_step		5093915	0					
ANR	5094051	PrimaryExpression	2		5093915	1					
ANR	5094052	Argument	p [ pole_step * 3 ]		5093915	4					
ANR	5094053	ArrayIndexing	p [ pole_step * 3 ]		5093915	0					
ANR	5094054	Identifier	p		5093915	0					
ANR	5094055	MultiplicativeExpression	pole_step * 3		5093915	1		*			
ANR	5094056	Identifier	pole_step		5093915	0					
ANR	5094057	PrimaryExpression	3		5093915	1					
ANR	5094058	Argument	pole_step_minor		5093915	5					
ANR	5094059	Identifier	pole_step_minor		5093915	0					
ANR	5094060	BreakStatement	break ;	463:12:15370:15375	5093915	9	True				
ANR	5094061	Label	default :	464:8:15385:15392	5093915	10	True				
ANR	5094062	Identifier	default		5093915	0					
ANR	5094063	ExpressionStatement	DO_NOTHING	465:11:15428:15438	5093915	11	True				
ANR	5094064	Identifier	DO_NOTHING		5093915	0					
ANR	5094065	ReturnType	static void		5093915	1					
ANR	5094066	Identifier	fn_make_poles		5093915	2					
ANR	5094067	ParameterList	"double * p , const int pole_step , int power , int bias"		5093915	3					
ANR	5094068	Parameter	double * p	441:14:14346:14354	5093915	0	True				
ANR	5094069	ParameterType	double *		5093915	0					
ANR	5094070	Identifier	p		5093915	1					
ANR	5094071	Parameter	const int pole_step	441:25:14357:14375	5093915	1	True				
ANR	5094072	ParameterType	const int		5093915	0					
ANR	5094073	Identifier	pole_step		5093915	1					
ANR	5094074	Parameter	int power	441:46:14378:14386	5093915	2	True				
ANR	5094075	ParameterType	int		5093915	0					
ANR	5094076	Identifier	power		5093915	1					
ANR	5094077	Parameter	int bias	441:57:14389:14396	5093915	3	True				
ANR	5094078	ParameterType	int		5093915	0					
ANR	5094079	Identifier	bias		5093915	1					
ANR	5094080	CFGEntryNode	ENTRY		5093915		True				
ANR	5094081	CFGExitNode	EXIT		5093915		True				
ANR	5094082	Symbol	p		5093915						
ANR	5094083	Symbol	* bias		5093915						
ANR	5094084	Symbol	bias		5093915						
ANR	5094085	Symbol	* p		5093915						
ANR	5094086	Symbol	power		5093915						
ANR	5094087	Symbol	pole_step_minor		5093915						
ANR	5094088	Symbol	* pole_step		5093915						
ANR	5094089	Symbol	pole_step		5093915						
ANR	5094090	Symbol	* pole_step_minor		5093915						
ANR	5094091	Function	fn_Sd_evaluate_cubic_cached_1d	475:0:15724:17654							
ANR	5094092	FunctionDef	"fn_Sd_evaluate_cubic_cached_1d (const gs_function_Sd_t * pfn , const float * in , float * out)"		5094091	0					
ANR	5094093	CompoundStatement		477:0:15824:17654	5094091	0					
ANR	5094094	IdentifierDeclStatement	float d0 = pfn -> params . Domain [ 2 * 0 ] ;	478:4:15830:15866	5094091	0	True				
ANR	5094095	IdentifierDecl	d0 = pfn -> params . Domain [ 2 * 0 ]		5094091	0					
ANR	5094096	IdentifierDeclType	float		5094091	0					
ANR	5094097	Identifier	d0		5094091	1					
ANR	5094098	AssignmentExpression	d0 = pfn -> params . Domain [ 2 * 0 ]		5094091	2		=			
ANR	5094099	Identifier	d0		5094091	0					
ANR	5094100	ArrayIndexing	pfn -> params . Domain [ 2 * 0 ]		5094091	1					
ANR	5094101	MemberAccess	pfn -> params . Domain		5094091	0					
ANR	5094102	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094103	Identifier	pfn		5094091	0					
ANR	5094104	Identifier	params		5094091	1					
ANR	5094105	Identifier	Domain		5094091	1					
ANR	5094106	MultiplicativeExpression	2 * 0		5094091	1		*			
ANR	5094107	PrimaryExpression	2		5094091	0					
ANR	5094108	PrimaryExpression	0		5094091	1					
ANR	5094109	IdentifierDeclStatement	float d1 = pfn -> params . Domain [ 2 * 0 + 1 ] ;	479:4:15872:15912	5094091	1	True				
ANR	5094110	IdentifierDecl	d1 = pfn -> params . Domain [ 2 * 0 + 1 ]		5094091	0					
ANR	5094111	IdentifierDeclType	float		5094091	0					
ANR	5094112	Identifier	d1		5094091	1					
ANR	5094113	AssignmentExpression	d1 = pfn -> params . Domain [ 2 * 0 + 1 ]		5094091	2		=			
ANR	5094114	Identifier	d1		5094091	0					
ANR	5094115	ArrayIndexing	pfn -> params . Domain [ 2 * 0 + 1 ]		5094091	1					
ANR	5094116	MemberAccess	pfn -> params . Domain		5094091	0					
ANR	5094117	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094118	Identifier	pfn		5094091	0					
ANR	5094119	Identifier	params		5094091	1					
ANR	5094120	Identifier	Domain		5094091	1					
ANR	5094121	AdditiveExpression	2 * 0 + 1		5094091	1		+			
ANR	5094122	MultiplicativeExpression	2 * 0		5094091	0		*			
ANR	5094123	PrimaryExpression	2		5094091	0					
ANR	5094124	PrimaryExpression	0		5094091	1					
ANR	5094125	PrimaryExpression	1		5094091	1					
ANR	5094126	IdentifierDeclStatement	const int pole_step_minor = pfn -> params . n ;	480:4:15918:15959	5094091	2	True				
ANR	5094127	IdentifierDecl	pole_step_minor = pfn -> params . n		5094091	0					
ANR	5094128	IdentifierDeclType	const int		5094091	0					
ANR	5094129	Identifier	pole_step_minor		5094091	1					
ANR	5094130	AssignmentExpression	pole_step_minor = pfn -> params . n		5094091	2		=			
ANR	5094131	Identifier	pole_step_minor		5094091	0					
ANR	5094132	MemberAccess	pfn -> params . n		5094091	1					
ANR	5094133	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094134	Identifier	pfn		5094091	0					
ANR	5094135	Identifier	params		5094091	1					
ANR	5094136	Identifier	n		5094091	1					
ANR	5094137	IdentifierDeclStatement	const int pole_step = 3 * pole_step_minor ;	481:4:15965:16006	5094091	3	True				
ANR	5094138	IdentifierDecl	pole_step = 3 * pole_step_minor		5094091	0					
ANR	5094139	IdentifierDeclType	const int		5094091	0					
ANR	5094140	Identifier	pole_step		5094091	1					
ANR	5094141	AssignmentExpression	pole_step = 3 * pole_step_minor		5094091	2		=			
ANR	5094142	Identifier	pole_step		5094091	0					
ANR	5094143	MultiplicativeExpression	3 * pole_step_minor		5094091	1		*			
ANR	5094144	PrimaryExpression	3		5094091	0					
ANR	5094145	Identifier	pole_step_minor		5094091	1					
ANR	5094146	IdentifierDeclStatement	int i0 ;	482:4:16012:16018	5094091	4	True				
ANR	5094147	IdentifierDecl	i0		5094091	0					
ANR	5094148	IdentifierDeclType	int		5094091	0					
ANR	5094149	Identifier	i0		5094091	1					
ANR	5094150	IdentifierDeclStatement	"int ib , ie , i , k ;"	483:4:16044:16060	5094091	5	True				
ANR	5094151	IdentifierDecl	ib		5094091	0					
ANR	5094152	IdentifierDeclType	int		5094091	0					
ANR	5094153	Identifier	ib		5094091	1					
ANR	5094154	IdentifierDecl	ie		5094091	1					
ANR	5094155	IdentifierDeclType	int		5094091	0					
ANR	5094156	Identifier	ie		5094091	1					
ANR	5094157	IdentifierDecl	i		5094091	2					
ANR	5094158	IdentifierDeclType	int		5094091	0					
ANR	5094159	Identifier	i		5094091	1					
ANR	5094160	IdentifierDecl	k		5094091	3					
ANR	5094161	IdentifierDeclType	int		5094091	0					
ANR	5094162	Identifier	k		5094091	1					
ANR	5094163	IdentifierDeclStatement	"double * p , t0 , t1 , tt ;"	484:4:16066:16087	5094091	6	True				
ANR	5094164	IdentifierDecl	* p		5094091	0					
ANR	5094165	IdentifierDeclType	double *		5094091	0					
ANR	5094166	Identifier	p		5094091	1					
ANR	5094167	IdentifierDecl	t0		5094091	1					
ANR	5094168	IdentifierDeclType	double		5094091	0					
ANR	5094169	Identifier	t0		5094091	1					
ANR	5094170	IdentifierDecl	t1		5094091	2					
ANR	5094171	IdentifierDeclType	double		5094091	0					
ANR	5094172	Identifier	t1		5094091	1					
ANR	5094173	IdentifierDecl	tt		5094091	3					
ANR	5094174	IdentifierDeclType	double		5094091	0					
ANR	5094175	Identifier	tt		5094091	1					
ANR	5094176	ExpressionStatement	tt = ( in [ 0 ] - d0 ) * ( pfn -> params . Size [ 0 ] - 1 ) / ( d1 - d0 )	486:4:16094:16151	5094091	7	True				
ANR	5094177	AssignmentExpression	tt = ( in [ 0 ] - d0 ) * ( pfn -> params . Size [ 0 ] - 1 ) / ( d1 - d0 )		5094091	0		=			
ANR	5094178	Identifier	tt		5094091	0					
ANR	5094179	MultiplicativeExpression	( in [ 0 ] - d0 ) * ( pfn -> params . Size [ 0 ] - 1 ) / ( d1 - d0 )		5094091	1		*			
ANR	5094180	AdditiveExpression	in [ 0 ] - d0		5094091	0		-			
ANR	5094181	ArrayIndexing	in [ 0 ]		5094091	0					
ANR	5094182	Identifier	in		5094091	0					
ANR	5094183	PrimaryExpression	0		5094091	1					
ANR	5094184	Identifier	d0		5094091	1					
ANR	5094185	MultiplicativeExpression	( pfn -> params . Size [ 0 ] - 1 ) / ( d1 - d0 )		5094091	1		/			
ANR	5094186	AdditiveExpression	pfn -> params . Size [ 0 ] - 1		5094091	0		-			
ANR	5094187	ArrayIndexing	pfn -> params . Size [ 0 ]		5094091	0					
ANR	5094188	MemberAccess	pfn -> params . Size		5094091	0					
ANR	5094189	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094190	Identifier	pfn		5094091	0					
ANR	5094191	Identifier	params		5094091	1					
ANR	5094192	Identifier	Size		5094091	1					
ANR	5094193	PrimaryExpression	0		5094091	1					
ANR	5094194	PrimaryExpression	1		5094091	1					
ANR	5094195	AdditiveExpression	d1 - d0		5094091	1		-			
ANR	5094196	Identifier	d1		5094091	0					
ANR	5094197	Identifier	d0		5094091	1					
ANR	5094198	ExpressionStatement	i0 = ( int ) floor ( tt )	487:4:16157:16176	5094091	8	True				
ANR	5094199	AssignmentExpression	i0 = ( int ) floor ( tt )		5094091	0		=			
ANR	5094200	Identifier	i0		5094091	0					
ANR	5094201	CastExpression	( int ) floor ( tt )		5094091	1					
ANR	5094202	CastTarget	int		5094091	0					
ANR	5094203	CallExpression	floor ( tt )		5094091	1					
ANR	5094204	Callee	floor		5094091	0					
ANR	5094205	Identifier	floor		5094091	0					
ANR	5094206	ArgumentList	tt		5094091	1					
ANR	5094207	Argument	tt		5094091	0					
ANR	5094208	Identifier	tt		5094091	0					
ANR	5094209	ExpressionStatement	"ib = max ( i0 - 1 , 0 )"	488:4:16182:16201	5094091	9	True				
ANR	5094210	AssignmentExpression	"ib = max ( i0 - 1 , 0 )"		5094091	0		=			
ANR	5094211	Identifier	ib		5094091	0					
ANR	5094212	CallExpression	"max ( i0 - 1 , 0 )"		5094091	1					
ANR	5094213	Callee	max		5094091	0					
ANR	5094214	Identifier	max		5094091	0					
ANR	5094215	ArgumentList	i0 - 1		5094091	1					
ANR	5094216	Argument	i0 - 1		5094091	0					
ANR	5094217	AdditiveExpression	i0 - 1		5094091	0		-			
ANR	5094218	Identifier	i0		5094091	0					
ANR	5094219	PrimaryExpression	1		5094091	1					
ANR	5094220	Argument	0		5094091	1					
ANR	5094221	PrimaryExpression	0		5094091	0					
ANR	5094222	ExpressionStatement	"ie = min ( pfn -> params . Size [ 0 ] , i0 + 3 )"	489:4:16207:16244	5094091	10	True				
ANR	5094223	AssignmentExpression	"ie = min ( pfn -> params . Size [ 0 ] , i0 + 3 )"		5094091	0		=			
ANR	5094224	Identifier	ie		5094091	0					
ANR	5094225	CallExpression	"min ( pfn -> params . Size [ 0 ] , i0 + 3 )"		5094091	1					
ANR	5094226	Callee	min		5094091	0					
ANR	5094227	Identifier	min		5094091	0					
ANR	5094228	ArgumentList	pfn -> params . Size [ 0 ]		5094091	1					
ANR	5094229	Argument	pfn -> params . Size [ 0 ]		5094091	0					
ANR	5094230	ArrayIndexing	pfn -> params . Size [ 0 ]		5094091	0					
ANR	5094231	MemberAccess	pfn -> params . Size		5094091	0					
ANR	5094232	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094233	Identifier	pfn		5094091	0					
ANR	5094234	Identifier	params		5094091	1					
ANR	5094235	Identifier	Size		5094091	1					
ANR	5094236	PrimaryExpression	0		5094091	1					
ANR	5094237	Argument	i0 + 3		5094091	1					
ANR	5094238	AdditiveExpression	i0 + 3		5094091	0		+			
ANR	5094239	Identifier	i0		5094091	0					
ANR	5094240	PrimaryExpression	3		5094091	1					
ANR	5094241	ForStatement	for ( i = ib ; i < ie ; i ++ )		5094091	11					
ANR	5094242	ForInit	i = ib ;	490:9:16255:16261	5094091	0	True				
ANR	5094243	AssignmentExpression	i = ib		5094091	0		=			
ANR	5094244	Identifier	i		5094091	0					
ANR	5094245	Identifier	ib		5094091	1					
ANR	5094246	Condition	i < ie	490:17:16263:16268	5094091	1	True				
ANR	5094247	RelationalExpression	i < ie		5094091	0		<			
ANR	5094248	Identifier	i		5094091	0					
ANR	5094249	Identifier	ie		5094091	1					
ANR	5094250	PostIncDecOperationExpression	i ++	490:25:16271:16273	5094091	2	True				
ANR	5094251	Identifier	i		5094091	0					
ANR	5094252	IncDec	++		5094091	1					
ANR	5094253	CompoundStatement		14:30:451:451	5094091	3					
ANR	5094254	IfStatement	if ( pfn -> params . pole [ i * pole_step ] == double_stub )		5094091	0					
ANR	5094255	Condition	pfn -> params . pole [ i * pole_step ] == double_stub	491:12:16290:16335	5094091	0	True				
ANR	5094256	EqualityExpression	pfn -> params . pole [ i * pole_step ] == double_stub		5094091	0		==			
ANR	5094257	ArrayIndexing	pfn -> params . pole [ i * pole_step ]		5094091	0					
ANR	5094258	MemberAccess	pfn -> params . pole		5094091	0					
ANR	5094259	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094260	Identifier	pfn		5094091	0					
ANR	5094261	Identifier	params		5094091	1					
ANR	5094262	Identifier	pole		5094091	1					
ANR	5094263	MultiplicativeExpression	i * pole_step		5094091	1		*			
ANR	5094264	Identifier	i		5094091	0					
ANR	5094265	Identifier	pole_step		5094091	1					
ANR	5094266	Identifier	double_stub		5094091	1					
ANR	5094267	CompoundStatement		17:12:561:596	5094091	1					
ANR	5094268	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	492:12:16352:16372	5094091	0	True				
ANR	5094269	IdentifierDecl	sdata [ max_Sd_n ]		5094091	0					
ANR	5094270	IdentifierDeclType	uint [ max_Sd_n ]		5094091	0					
ANR	5094271	Identifier	sdata		5094091	1					
ANR	5094272	Identifier	max_Sd_n		5094091	2					
ANR	5094273	IdentifierDeclStatement	int bps = pfn -> params . BitsPerSample ;	493:12:16386:16421	5094091	1	True				
ANR	5094274	IdentifierDecl	bps = pfn -> params . BitsPerSample		5094091	0					
ANR	5094275	IdentifierDeclType	int		5094091	0					
ANR	5094276	Identifier	bps		5094091	1					
ANR	5094277	AssignmentExpression	bps = pfn -> params . BitsPerSample		5094091	2		=			
ANR	5094278	Identifier	bps		5094091	0					
ANR	5094279	MemberAccess	pfn -> params . BitsPerSample		5094091	1					
ANR	5094280	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094281	Identifier	pfn		5094091	0					
ANR	5094282	Identifier	params		5094091	1					
ANR	5094283	Identifier	BitsPerSample		5094091	1					
ANR	5094284	ExpressionStatement	p = & pfn -> params . pole [ i * pole_step ]	495:12:16436:16472	5094091	2	True				
ANR	5094285	AssignmentExpression	p = & pfn -> params . pole [ i * pole_step ]		5094091	0		=			
ANR	5094286	Identifier	p		5094091	0					
ANR	5094287	UnaryOperationExpression	& pfn -> params . pole [ i * pole_step ]		5094091	1					
ANR	5094288	UnaryOperator	&		5094091	0					
ANR	5094289	ArrayIndexing	pfn -> params . pole [ i * pole_step ]		5094091	1					
ANR	5094290	MemberAccess	pfn -> params . pole		5094091	0					
ANR	5094291	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094292	Identifier	pfn		5094091	0					
ANR	5094293	Identifier	params		5094091	1					
ANR	5094294	Identifier	pole		5094091	1					
ANR	5094295	MultiplicativeExpression	i * pole_step		5094091	1		*			
ANR	5094296	Identifier	i		5094091	0					
ANR	5094297	Identifier	pole_step		5094091	1					
ANR	5094298	ExpressionStatement	"fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , i * bps * pfn -> params . n , sdata )"	496:12:16486:16564	5094091	3	True				
ANR	5094299	CallExpression	"fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , i * bps * pfn -> params . n , sdata )"		5094091	0					
ANR	5094300	Callee	fn_get_samples [ pfn -> params . BitsPerSample ]		5094091	0					
ANR	5094301	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		5094091	0					
ANR	5094302	Identifier	fn_get_samples		5094091	0					
ANR	5094303	MemberAccess	pfn -> params . BitsPerSample		5094091	1					
ANR	5094304	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094305	Identifier	pfn		5094091	0					
ANR	5094306	Identifier	params		5094091	1					
ANR	5094307	Identifier	BitsPerSample		5094091	1					
ANR	5094308	ArgumentList	pfn		5094091	1					
ANR	5094309	Argument	pfn		5094091	0					
ANR	5094310	Identifier	pfn		5094091	0					
ANR	5094311	Argument	i * bps * pfn -> params . n		5094091	1					
ANR	5094312	MultiplicativeExpression	i * bps * pfn -> params . n		5094091	0		*			
ANR	5094313	Identifier	i		5094091	0					
ANR	5094314	MultiplicativeExpression	bps * pfn -> params . n		5094091	1		*			
ANR	5094315	Identifier	bps		5094091	0					
ANR	5094316	MemberAccess	pfn -> params . n		5094091	1					
ANR	5094317	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094318	Identifier	pfn		5094091	0					
ANR	5094319	Identifier	params		5094091	1					
ANR	5094320	Identifier	n		5094091	1					
ANR	5094321	Argument	sdata		5094091	2					
ANR	5094322	Identifier	sdata		5094091	0					
ANR	5094323	ForStatement	"for ( k = 0 ; k < pfn -> params . n ; k ++ , p ++ )"		5094091	4					
ANR	5094324	ForInit	k = 0 ;	497:17:16583:16588	5094091	0	True				
ANR	5094325	AssignmentExpression	k = 0		5094091	0		=			
ANR	5094326	Identifier	k		5094091	0					
ANR	5094327	PrimaryExpression	0		5094091	1					
ANR	5094328	Condition	k < pfn -> params . n	497:24:16590:16606	5094091	1	True				
ANR	5094329	RelationalExpression	k < pfn -> params . n		5094091	0		<			
ANR	5094330	Identifier	k		5094091	0					
ANR	5094331	MemberAccess	pfn -> params . n		5094091	1					
ANR	5094332	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094333	Identifier	pfn		5094091	0					
ANR	5094334	Identifier	params		5094091	1					
ANR	5094335	Identifier	n		5094091	1					
ANR	5094336	Expression	"k ++ , p ++"	497:43:16609:16616	5094091	2	True				
ANR	5094337	PostIncDecOperationExpression	k ++		5094091	0					
ANR	5094338	Identifier	k		5094091	0					
ANR	5094339	IncDec	++		5094091	1					
ANR	5094340	PostIncDecOperationExpression	p ++		5094091	1					
ANR	5094341	Identifier	p		5094091	0					
ANR	5094342	IncDec	++		5094091	1					
ANR	5094343	ExpressionStatement	"* p = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"	498:16:16635:16678	5094091	3	True				
ANR	5094344	AssignmentExpression	"* p = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		5094091	0		=			
ANR	5094345	UnaryOperationExpression	* p		5094091	0					
ANR	5094346	UnaryOperator	*		5094091	0					
ANR	5094347	Identifier	p		5094091	1					
ANR	5094348	CallExpression	"fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		5094091	1					
ANR	5094349	Callee	fn_Sd_encode		5094091	0					
ANR	5094350	Identifier	fn_Sd_encode		5094091	0					
ANR	5094351	ArgumentList	pfn		5094091	1					
ANR	5094352	Argument	pfn		5094091	0					
ANR	5094353	Identifier	pfn		5094091	0					
ANR	5094354	Argument	k		5094091	1					
ANR	5094355	Identifier	k		5094091	0					
ANR	5094356	Argument	( double ) sdata [ k ]		5094091	2					
ANR	5094357	CastExpression	( double ) sdata [ k ]		5094091	0					
ANR	5094358	CastTarget	double		5094091	0					
ANR	5094359	ArrayIndexing	sdata [ k ]		5094091	1					
ANR	5094360	Identifier	sdata		5094091	0					
ANR	5094361	Identifier	k		5094091	1					
ANR	5094362	ExpressionStatement	p = & pfn -> params . pole [ i0 * pole_step ]	501:4:16700:16737	5094091	12	True				
ANR	5094363	AssignmentExpression	p = & pfn -> params . pole [ i0 * pole_step ]		5094091	0		=			
ANR	5094364	Identifier	p		5094091	0					
ANR	5094365	UnaryOperationExpression	& pfn -> params . pole [ i0 * pole_step ]		5094091	1					
ANR	5094366	UnaryOperator	&		5094091	0					
ANR	5094367	ArrayIndexing	pfn -> params . pole [ i0 * pole_step ]		5094091	1					
ANR	5094368	MemberAccess	pfn -> params . pole		5094091	0					
ANR	5094369	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094370	Identifier	pfn		5094091	0					
ANR	5094371	Identifier	params		5094091	1					
ANR	5094372	Identifier	pole		5094091	1					
ANR	5094373	MultiplicativeExpression	i0 * pole_step		5094091	1		*			
ANR	5094374	Identifier	i0		5094091	0					
ANR	5094375	Identifier	pole_step		5094091	1					
ANR	5094376	ExpressionStatement	t0 = tt - i0	502:4:16743:16755	5094091	13	True				
ANR	5094377	AssignmentExpression	t0 = tt - i0		5094091	0		=			
ANR	5094378	Identifier	t0		5094091	0					
ANR	5094379	AdditiveExpression	tt - i0		5094091	1		-			
ANR	5094380	Identifier	tt		5094091	0					
ANR	5094381	Identifier	i0		5094091	1					
ANR	5094382	IfStatement	if ( t0 == 0 )		5094091	14					
ANR	5094383	Condition	t0 == 0	503:8:16765:16771	5094091	0	True				
ANR	5094384	EqualityExpression	t0 == 0		5094091	0		==			
ANR	5094385	Identifier	t0		5094091	0					
ANR	5094386	PrimaryExpression	0		5094091	1					
ANR	5094387	CompoundStatement		27:17:949:949	5094091	1					
ANR	5094388	ForStatement	"for ( k = 0 ; k < pfn -> params . n ; k ++ , p ++ )"		5094091	0					
ANR	5094389	ForInit	k = 0 ;	504:13:16789:16794	5094091	0	True				
ANR	5094390	AssignmentExpression	k = 0		5094091	0		=			
ANR	5094391	Identifier	k		5094091	0					
ANR	5094392	PrimaryExpression	0		5094091	1					
ANR	5094393	Condition	k < pfn -> params . n	504:20:16796:16812	5094091	1	True				
ANR	5094394	RelationalExpression	k < pfn -> params . n		5094091	0		<			
ANR	5094395	Identifier	k		5094091	0					
ANR	5094396	MemberAccess	pfn -> params . n		5094091	1					
ANR	5094397	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094398	Identifier	pfn		5094091	0					
ANR	5094399	Identifier	params		5094091	1					
ANR	5094400	Identifier	n		5094091	1					
ANR	5094401	Expression	"k ++ , p ++"	504:39:16815:16822	5094091	2	True				
ANR	5094402	PostIncDecOperationExpression	k ++		5094091	0					
ANR	5094403	Identifier	k		5094091	0					
ANR	5094404	IncDec	++		5094091	1					
ANR	5094405	PostIncDecOperationExpression	p ++		5094091	1					
ANR	5094406	Identifier	p		5094091	0					
ANR	5094407	IncDec	++		5094091	1					
ANR	5094408	ExpressionStatement	out [ k ] = * p	505:12:16837:16848	5094091	3	True				
ANR	5094409	AssignmentExpression	out [ k ] = * p		5094091	0		=			
ANR	5094410	ArrayIndexing	out [ k ]		5094091	0					
ANR	5094411	Identifier	out		5094091	0					
ANR	5094412	Identifier	k		5094091	1					
ANR	5094413	UnaryOperationExpression	* p		5094091	1					
ANR	5094414	UnaryOperator	*		5094091	0					
ANR	5094415	Identifier	p		5094091	1					
ANR	5094416	ElseStatement	else		5094091	0					
ANR	5094417	CompoundStatement		30:11:1036:1036	5094091	0					
ANR	5094418	IfStatement	if ( p [ 1 * pole_step_minor ] == double_stub )		5094091	0					
ANR	5094419	Condition	p [ 1 * pole_step_minor ] == double_stub	507:12:16875:16911	5094091	0	True				
ANR	5094420	EqualityExpression	p [ 1 * pole_step_minor ] == double_stub		5094091	0		==			
ANR	5094421	ArrayIndexing	p [ 1 * pole_step_minor ]		5094091	0					
ANR	5094422	Identifier	p		5094091	0					
ANR	5094423	MultiplicativeExpression	1 * pole_step_minor		5094091	1		*			
ANR	5094424	PrimaryExpression	1		5094091	0					
ANR	5094425	Identifier	pole_step_minor		5094091	1					
ANR	5094426	Identifier	double_stub		5094091	1					
ANR	5094427	CompoundStatement		31:51:1089:1089	5094091	1					
ANR	5094428	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		5094091	0					
ANR	5094429	ForInit	k = 0 ;	508:17:16933:16938	5094091	0	True				
ANR	5094430	AssignmentExpression	k = 0		5094091	0		=			
ANR	5094431	Identifier	k		5094091	0					
ANR	5094432	PrimaryExpression	0		5094091	1					
ANR	5094433	Condition	k < pfn -> params . n	508:24:16940:16956	5094091	1	True				
ANR	5094434	RelationalExpression	k < pfn -> params . n		5094091	0		<			
ANR	5094435	Identifier	k		5094091	0					
ANR	5094436	MemberAccess	pfn -> params . n		5094091	1					
ANR	5094437	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094438	Identifier	pfn		5094091	0					
ANR	5094439	Identifier	params		5094091	1					
ANR	5094440	Identifier	n		5094091	1					
ANR	5094441	PostIncDecOperationExpression	k ++	508:43:16959:16961	5094091	2	True				
ANR	5094442	Identifier	k		5094091	0					
ANR	5094443	IncDec	++		5094091	1					
ANR	5094444	ExpressionStatement	"fn_make_poles ( & pfn -> params . pole [ ib * pole_step + k ] , pole_step , ie - ib - 1 , i0 - ib )"	509:16:16980:17089	5094091	3	True				
ANR	5094445	CallExpression	"fn_make_poles ( & pfn -> params . pole [ ib * pole_step + k ] , pole_step , ie - ib - 1 , i0 - ib )"		5094091	0					
ANR	5094446	Callee	fn_make_poles		5094091	0					
ANR	5094447	Identifier	fn_make_poles		5094091	0					
ANR	5094448	ArgumentList	& pfn -> params . pole [ ib * pole_step + k ]		5094091	1					
ANR	5094449	Argument	& pfn -> params . pole [ ib * pole_step + k ]		5094091	0					
ANR	5094450	UnaryOperationExpression	& pfn -> params . pole [ ib * pole_step + k ]		5094091	0					
ANR	5094451	UnaryOperator	&		5094091	0					
ANR	5094452	ArrayIndexing	pfn -> params . pole [ ib * pole_step + k ]		5094091	1					
ANR	5094453	MemberAccess	pfn -> params . pole		5094091	0					
ANR	5094454	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094455	Identifier	pfn		5094091	0					
ANR	5094456	Identifier	params		5094091	1					
ANR	5094457	Identifier	pole		5094091	1					
ANR	5094458	AdditiveExpression	ib * pole_step + k		5094091	1		+			
ANR	5094459	MultiplicativeExpression	ib * pole_step		5094091	0		*			
ANR	5094460	Identifier	ib		5094091	0					
ANR	5094461	Identifier	pole_step		5094091	1					
ANR	5094462	Identifier	k		5094091	1					
ANR	5094463	Argument	pole_step		5094091	1					
ANR	5094464	Identifier	pole_step		5094091	0					
ANR	5094465	Argument	ie - ib - 1		5094091	2					
ANR	5094466	AdditiveExpression	ie - ib - 1		5094091	0		-			
ANR	5094467	Identifier	ie		5094091	0					
ANR	5094468	AdditiveExpression	ib - 1		5094091	1		-			
ANR	5094469	Identifier	ib		5094091	0					
ANR	5094470	PrimaryExpression	1		5094091	1					
ANR	5094471	Argument	i0 - ib		5094091	3					
ANR	5094472	AdditiveExpression	i0 - ib		5094091	0		-			
ANR	5094473	Identifier	i0		5094091	0					
ANR	5094474	Identifier	ib		5094091	1					
ANR	5094475	ExpressionStatement	t1 = 1 - t0	512:8:17109:17120	5094091	1	True				
ANR	5094476	AssignmentExpression	t1 = 1 - t0		5094091	0		=			
ANR	5094477	Identifier	t1		5094091	0					
ANR	5094478	AdditiveExpression	1 - t0		5094091	1		-			
ANR	5094479	PrimaryExpression	1		5094091	0					
ANR	5094480	Identifier	t0		5094091	1					
ANR	5094481	ForStatement	"for ( k = 0 ; k < pfn -> params . n ; k ++ , p ++ )"		5094091	2					
ANR	5094482	ForInit	k = 0 ;	513:13:17135:17140	5094091	0	True				
ANR	5094483	AssignmentExpression	k = 0		5094091	0		=			
ANR	5094484	Identifier	k		5094091	0					
ANR	5094485	PrimaryExpression	0		5094091	1					
ANR	5094486	Condition	k < pfn -> params . n	513:20:17142:17158	5094091	1	True				
ANR	5094487	RelationalExpression	k < pfn -> params . n		5094091	0		<			
ANR	5094488	Identifier	k		5094091	0					
ANR	5094489	MemberAccess	pfn -> params . n		5094091	1					
ANR	5094490	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094491	Identifier	pfn		5094091	0					
ANR	5094492	Identifier	params		5094091	1					
ANR	5094493	Identifier	n		5094091	1					
ANR	5094494	Expression	"k ++ , p ++"	513:39:17161:17168	5094091	2	True				
ANR	5094495	PostIncDecOperationExpression	k ++		5094091	0					
ANR	5094496	Identifier	k		5094091	0					
ANR	5094497	IncDec	++		5094091	1					
ANR	5094498	PostIncDecOperationExpression	p ++		5094091	1					
ANR	5094499	Identifier	p		5094091	0					
ANR	5094500	IncDec	++		5094091	1					
ANR	5094501	CompoundStatement		38:12:1360:1605	5094091	3					
ANR	5094502	IdentifierDeclStatement	double y = p [ 0 * pole_step_minor ] * t1 * t1 * t1 + p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0 ;	514:12:17185:17430	5094091	0	True				
ANR	5094503	IdentifierDecl	y = p [ 0 * pole_step_minor ] * t1 * t1 * t1 + p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		5094091	0					
ANR	5094504	IdentifierDeclType	double		5094091	0					
ANR	5094505	Identifier	y		5094091	1					
ANR	5094506	AssignmentExpression	y = p [ 0 * pole_step_minor ] * t1 * t1 * t1 + p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		5094091	2		=			
ANR	5094507	Identifier	y		5094091	0					
ANR	5094508	AdditiveExpression	p [ 0 * pole_step_minor ] * t1 * t1 * t1 + p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		5094091	1		+			
ANR	5094509	MultiplicativeExpression	p [ 0 * pole_step_minor ] * t1 * t1 * t1		5094091	0		*			
ANR	5094510	ArrayIndexing	p [ 0 * pole_step_minor ]		5094091	0					
ANR	5094511	Identifier	p		5094091	0					
ANR	5094512	MultiplicativeExpression	0 * pole_step_minor		5094091	1		*			
ANR	5094513	PrimaryExpression	0		5094091	0					
ANR	5094514	Identifier	pole_step_minor		5094091	1					
ANR	5094515	MultiplicativeExpression	t1 * t1 * t1		5094091	1		*			
ANR	5094516	Identifier	t1		5094091	0					
ANR	5094517	MultiplicativeExpression	t1 * t1		5094091	1		*			
ANR	5094518	Identifier	t1		5094091	0					
ANR	5094519	Identifier	t1		5094091	1					
ANR	5094520	AdditiveExpression	p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3 + p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		5094091	1		+			
ANR	5094521	MultiplicativeExpression	p [ 1 * pole_step_minor ] * t1 * t1 * t0 * 3		5094091	0		*			
ANR	5094522	ArrayIndexing	p [ 1 * pole_step_minor ]		5094091	0					
ANR	5094523	Identifier	p		5094091	0					
ANR	5094524	MultiplicativeExpression	1 * pole_step_minor		5094091	1		*			
ANR	5094525	PrimaryExpression	1		5094091	0					
ANR	5094526	Identifier	pole_step_minor		5094091	1					
ANR	5094527	MultiplicativeExpression	t1 * t1 * t0 * 3		5094091	1		*			
ANR	5094528	Identifier	t1		5094091	0					
ANR	5094529	MultiplicativeExpression	t1 * t0 * 3		5094091	1		*			
ANR	5094530	Identifier	t1		5094091	0					
ANR	5094531	MultiplicativeExpression	t0 * 3		5094091	1		*			
ANR	5094532	Identifier	t0		5094091	0					
ANR	5094533	PrimaryExpression	3		5094091	1					
ANR	5094534	AdditiveExpression	p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3 + p [ 3 * pole_step_minor ] * t0 * t0 * t0		5094091	1		+			
ANR	5094535	MultiplicativeExpression	p [ 2 * pole_step_minor ] * t1 * t0 * t0 * 3		5094091	0		*			
ANR	5094536	ArrayIndexing	p [ 2 * pole_step_minor ]		5094091	0					
ANR	5094537	Identifier	p		5094091	0					
ANR	5094538	MultiplicativeExpression	2 * pole_step_minor		5094091	1		*			
ANR	5094539	PrimaryExpression	2		5094091	0					
ANR	5094540	Identifier	pole_step_minor		5094091	1					
ANR	5094541	MultiplicativeExpression	t1 * t0 * t0 * 3		5094091	1		*			
ANR	5094542	Identifier	t1		5094091	0					
ANR	5094543	MultiplicativeExpression	t0 * t0 * 3		5094091	1		*			
ANR	5094544	Identifier	t0		5094091	0					
ANR	5094545	MultiplicativeExpression	t0 * 3		5094091	1		*			
ANR	5094546	Identifier	t0		5094091	0					
ANR	5094547	PrimaryExpression	3		5094091	1					
ANR	5094548	MultiplicativeExpression	p [ 3 * pole_step_minor ] * t0 * t0 * t0		5094091	1		*			
ANR	5094549	ArrayIndexing	p [ 3 * pole_step_minor ]		5094091	0					
ANR	5094550	Identifier	p		5094091	0					
ANR	5094551	MultiplicativeExpression	3 * pole_step_minor		5094091	1		*			
ANR	5094552	PrimaryExpression	3		5094091	0					
ANR	5094553	Identifier	pole_step_minor		5094091	1					
ANR	5094554	MultiplicativeExpression	t0 * t0 * t0		5094091	1		*			
ANR	5094555	Identifier	t0		5094091	0					
ANR	5094556	MultiplicativeExpression	t0 * t0		5094091	1		*			
ANR	5094557	Identifier	t0		5094091	0					
ANR	5094558	Identifier	t0		5094091	1					
ANR	5094559	IfStatement	if ( y < pfn -> params . Range [ 0 ] )		5094091	1					
ANR	5094560	Condition	y < pfn -> params . Range [ 0 ]	518:16:17448:17471	5094091	0	True				
ANR	5094561	RelationalExpression	y < pfn -> params . Range [ 0 ]		5094091	0		<			
ANR	5094562	Identifier	y		5094091	0					
ANR	5094563	ArrayIndexing	pfn -> params . Range [ 0 ]		5094091	1					
ANR	5094564	MemberAccess	pfn -> params . Range		5094091	0					
ANR	5094565	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094566	Identifier	pfn		5094091	0					
ANR	5094567	Identifier	params		5094091	1					
ANR	5094568	Identifier	Range		5094091	1					
ANR	5094569	PrimaryExpression	0		5094091	1					
ANR	5094570	ExpressionStatement	y = pfn -> params . Range [ 0 ]	519:16:17490:17514	5094091	1	True				
ANR	5094571	AssignmentExpression	y = pfn -> params . Range [ 0 ]		5094091	0		=			
ANR	5094572	Identifier	y		5094091	0					
ANR	5094573	ArrayIndexing	pfn -> params . Range [ 0 ]		5094091	1					
ANR	5094574	MemberAccess	pfn -> params . Range		5094091	0					
ANR	5094575	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094576	Identifier	pfn		5094091	0					
ANR	5094577	Identifier	params		5094091	1					
ANR	5094578	Identifier	Range		5094091	1					
ANR	5094579	PrimaryExpression	0		5094091	1					
ANR	5094580	IfStatement	if ( y > pfn -> params . Range [ 1 ] )		5094091	2					
ANR	5094581	Condition	y > pfn -> params . Range [ 1 ]	520:16:17532:17555	5094091	0	True				
ANR	5094582	RelationalExpression	y > pfn -> params . Range [ 1 ]		5094091	0		>			
ANR	5094583	Identifier	y		5094091	0					
ANR	5094584	ArrayIndexing	pfn -> params . Range [ 1 ]		5094091	1					
ANR	5094585	MemberAccess	pfn -> params . Range		5094091	0					
ANR	5094586	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094587	Identifier	pfn		5094091	0					
ANR	5094588	Identifier	params		5094091	1					
ANR	5094589	Identifier	Range		5094091	1					
ANR	5094590	PrimaryExpression	1		5094091	1					
ANR	5094591	ExpressionStatement	y = pfn -> params . Range [ 1 ]	521:16:17574:17598	5094091	1	True				
ANR	5094592	AssignmentExpression	y = pfn -> params . Range [ 1 ]		5094091	0		=			
ANR	5094593	Identifier	y		5094091	0					
ANR	5094594	ArrayIndexing	pfn -> params . Range [ 1 ]		5094091	1					
ANR	5094595	MemberAccess	pfn -> params . Range		5094091	0					
ANR	5094596	PtrMemberAccess	pfn -> params		5094091	0					
ANR	5094597	Identifier	pfn		5094091	0					
ANR	5094598	Identifier	params		5094091	1					
ANR	5094599	Identifier	Range		5094091	1					
ANR	5094600	PrimaryExpression	1		5094091	1					
ANR	5094601	ExpressionStatement	out [ k ] = y	522:12:17612:17622	5094091	3	True				
ANR	5094602	AssignmentExpression	out [ k ] = y		5094091	0		=			
ANR	5094603	ArrayIndexing	out [ k ]		5094091	0					
ANR	5094604	Identifier	out		5094091	0					
ANR	5094605	Identifier	k		5094091	1					
ANR	5094606	Identifier	y		5094091	1					
ANR	5094607	ReturnStatement	return 0 ;	525:4:17644:17652	5094091	15	True				
ANR	5094608	PrimaryExpression	0		5094091	0					
ANR	5094609	ReturnType	static int		5094091	1					
ANR	5094610	Identifier	fn_Sd_evaluate_cubic_cached_1d		5094091	2					
ANR	5094611	ParameterList	"const gs_function_Sd_t * pfn , const float * in , float * out"		5094091	3					
ANR	5094612	Parameter	const gs_function_Sd_t * pfn	476:31:15766:15792	5094091	0	True				
ANR	5094613	ParameterType	const gs_function_Sd_t *		5094091	0					
ANR	5094614	Identifier	pfn		5094091	1					
ANR	5094615	Parameter	const float * in	476:60:15795:15809	5094091	1	True				
ANR	5094616	ParameterType	const float *		5094091	0					
ANR	5094617	Identifier	in		5094091	1					
ANR	5094618	Parameter	float * out	476:77:15812:15821	5094091	2	True				
ANR	5094619	ParameterType	float *		5094091	0					
ANR	5094620	Identifier	out		5094091	1					
ANR	5094621	CFGEntryNode	ENTRY		5094091		True				
ANR	5094622	CFGExitNode	EXIT		5094091		True				
ANR	5094623	Symbol	tt		5094091						
ANR	5094624	Symbol	pfn -> params . Range		5094091						
ANR	5094625	Symbol	pfn -> params . n		5094091						
ANR	5094626	Symbol	pfn -> params . Size		5094091						
ANR	5094627	Symbol	* sdata		5094091						
ANR	5094628	Symbol	* in		5094091						
ANR	5094629	Symbol	d0		5094091						
ANR	5094630	Symbol	* * pfn		5094091						
ANR	5094631	Symbol	* pole_step		5094091						
ANR	5094632	Symbol	d1		5094091						
ANR	5094633	Symbol	pole_step		5094091						
ANR	5094634	Symbol	out		5094091						
ANR	5094635	Symbol	double_stub		5094091						
ANR	5094636	Symbol	pfn -> params . pole		5094091						
ANR	5094637	Symbol	min		5094091						
ANR	5094638	Symbol	fn_Sd_encode		5094091						
ANR	5094639	Symbol	* pfn -> params . Range		5094091						
ANR	5094640	Symbol	ib		5094091						
ANR	5094641	Symbol	ie		5094091						
ANR	5094642	Symbol	floor		5094091						
ANR	5094643	Symbol	sdata		5094091						
ANR	5094644	Symbol	pfn -> params . BitsPerSample		5094091						
ANR	5094645	Symbol	* pfn		5094091						
ANR	5094646	Symbol	bps		5094091						
ANR	5094647	Symbol	in		5094091						
ANR	5094648	Symbol	max		5094091						
ANR	5094649	Symbol	i0		5094091						
ANR	5094650	Symbol	fn_get_samples		5094091						
ANR	5094651	Symbol	* pfn -> params . Size		5094091						
ANR	5094652	Symbol	pfn -> params . Domain		5094091						
ANR	5094653	Symbol	i		5094091						
ANR	5094654	Symbol	* pfn -> params . Domain		5094091						
ANR	5094655	Symbol	pole_step_minor		5094091						
ANR	5094656	Symbol	k		5094091						
ANR	5094657	Symbol	* pole_step_minor		5094091						
ANR	5094658	Symbol	p		5094091						
ANR	5094659	Symbol	* pfn -> params . pole		5094091						
ANR	5094660	Symbol	* i		5094091						
ANR	5094661	Symbol	* k		5094091						
ANR	5094662	Symbol	* out		5094091						
ANR	5094663	Symbol	pfn		5094091						
ANR	5094664	Symbol	y		5094091						
ANR	5094665	Symbol	* p		5094091						
ANR	5094666	Symbol	t0		5094091						
ANR	5094667	Symbol	pfn -> params		5094091						
ANR	5094668	Symbol	t1		5094091						
ANR	5094669	Symbol	* pfn -> params		5094091						
ANR	5094670	Function	decode_argument	528:0:17657:18184							
ANR	5094671	FunctionDef	"decode_argument (const gs_function_Sd_t * pfn , const float * in , double T [ max_Sd_m ] , int I [ max_Sd_m ])"		5094670	0					
ANR	5094672	CompoundStatement		530:0:17775:18184	5094670	0					
ANR	5094673	IdentifierDeclStatement	int i ;	531:4:17781:17786	5094670	0	True				
ANR	5094674	IdentifierDecl	i		5094670	0					
ANR	5094675	IdentifierDeclType	int		5094670	0					
ANR	5094676	Identifier	i		5094670	1					
ANR	5094677	ForStatement	for ( i = 0 ; i < pfn -> params . m ; i ++ )		5094670	1					
ANR	5094678	ForInit	i = 0 ;	533:9:17798:17803	5094670	0	True				
ANR	5094679	AssignmentExpression	i = 0		5094670	0		=			
ANR	5094680	Identifier	i		5094670	0					
ANR	5094681	PrimaryExpression	0		5094670	1					
ANR	5094682	Condition	i < pfn -> params . m	533:16:17805:17821	5094670	1	True				
ANR	5094683	RelationalExpression	i < pfn -> params . m		5094670	0		<			
ANR	5094684	Identifier	i		5094670	0					
ANR	5094685	MemberAccess	pfn -> params . m		5094670	1					
ANR	5094686	PtrMemberAccess	pfn -> params		5094670	0					
ANR	5094687	Identifier	pfn		5094670	0					
ANR	5094688	Identifier	params		5094670	1					
ANR	5094689	Identifier	m		5094670	1					
ANR	5094690	PostIncDecOperationExpression	i ++	533:35:17824:17826	5094670	2	True				
ANR	5094691	Identifier	i		5094670	0					
ANR	5094692	IncDec	++		5094670	1					
ANR	5094693	CompoundStatement		8:8:189:197	5094670	3					
ANR	5094694	IdentifierDeclStatement	float xi = in [ i ] ;	534:8:17839:17855	5094670	0	True				
ANR	5094695	IdentifierDecl	xi = in [ i ]		5094670	0					
ANR	5094696	IdentifierDeclType	float		5094670	0					
ANR	5094697	Identifier	xi		5094670	1					
ANR	5094698	AssignmentExpression	xi = in [ i ]		5094670	2		=			
ANR	5094699	Identifier	xi		5094670	0					
ANR	5094700	ArrayIndexing	in [ i ]		5094670	1					
ANR	5094701	Identifier	in		5094670	0					
ANR	5094702	Identifier	i		5094670	1					
ANR	5094703	IdentifierDeclStatement	float d0 = pfn -> params . Domain [ 2 * i + 0 ] ;	535:8:17865:17905	5094670	1	True				
ANR	5094704	IdentifierDecl	d0 = pfn -> params . Domain [ 2 * i + 0 ]		5094670	0					
ANR	5094705	IdentifierDeclType	float		5094670	0					
ANR	5094706	Identifier	d0		5094670	1					
ANR	5094707	AssignmentExpression	d0 = pfn -> params . Domain [ 2 * i + 0 ]		5094670	2		=			
ANR	5094708	Identifier	d0		5094670	0					
ANR	5094709	ArrayIndexing	pfn -> params . Domain [ 2 * i + 0 ]		5094670	1					
ANR	5094710	MemberAccess	pfn -> params . Domain		5094670	0					
ANR	5094711	PtrMemberAccess	pfn -> params		5094670	0					
ANR	5094712	Identifier	pfn		5094670	0					
ANR	5094713	Identifier	params		5094670	1					
ANR	5094714	Identifier	Domain		5094670	1					
ANR	5094715	AdditiveExpression	2 * i + 0		5094670	1		+			
ANR	5094716	MultiplicativeExpression	2 * i		5094670	0		*			
ANR	5094717	PrimaryExpression	2		5094670	0					
ANR	5094718	Identifier	i		5094670	1					
ANR	5094719	PrimaryExpression	0		5094670	1					
ANR	5094720	IdentifierDeclStatement	float d1 = pfn -> params . Domain [ 2 * i + 1 ] ;	536:8:17915:17955	5094670	2	True				
ANR	5094721	IdentifierDecl	d1 = pfn -> params . Domain [ 2 * i + 1 ]		5094670	0					
ANR	5094722	IdentifierDeclType	float		5094670	0					
ANR	5094723	Identifier	d1		5094670	1					
ANR	5094724	AssignmentExpression	d1 = pfn -> params . Domain [ 2 * i + 1 ]		5094670	2		=			
ANR	5094725	Identifier	d1		5094670	0					
ANR	5094726	ArrayIndexing	pfn -> params . Domain [ 2 * i + 1 ]		5094670	1					
ANR	5094727	MemberAccess	pfn -> params . Domain		5094670	0					
ANR	5094728	PtrMemberAccess	pfn -> params		5094670	0					
ANR	5094729	Identifier	pfn		5094670	0					
ANR	5094730	Identifier	params		5094670	1					
ANR	5094731	Identifier	Domain		5094670	1					
ANR	5094732	AdditiveExpression	2 * i + 1		5094670	1		+			
ANR	5094733	MultiplicativeExpression	2 * i		5094670	0		*			
ANR	5094734	PrimaryExpression	2		5094670	0					
ANR	5094735	Identifier	i		5094670	1					
ANR	5094736	PrimaryExpression	1		5094670	1					
ANR	5094737	IdentifierDeclStatement	double t ;	537:8:17965:17973	5094670	3	True				
ANR	5094738	IdentifierDecl	t		5094670	0					
ANR	5094739	IdentifierDeclType	double		5094670	0					
ANR	5094740	Identifier	t		5094670	1					
ANR	5094741	IfStatement	if ( xi < d0 )		5094670	4					
ANR	5094742	Condition	xi < d0	539:12:17988:17994	5094670	0	True				
ANR	5094743	RelationalExpression	xi < d0		5094670	0		<			
ANR	5094744	Identifier	xi		5094670	0					
ANR	5094745	Identifier	d0		5094670	1					
ANR	5094746	ExpressionStatement	xi = d0	540:12:18009:18016	5094670	1	True				
ANR	5094747	AssignmentExpression	xi = d0		5094670	0		=			
ANR	5094748	Identifier	xi		5094670	0					
ANR	5094749	Identifier	d0		5094670	1					
ANR	5094750	IfStatement	if ( xi > d1 )		5094670	5					
ANR	5094751	Condition	xi > d1	541:12:18030:18036	5094670	0	True				
ANR	5094752	RelationalExpression	xi > d1		5094670	0		>			
ANR	5094753	Identifier	xi		5094670	0					
ANR	5094754	Identifier	d1		5094670	1					
ANR	5094755	ExpressionStatement	xi = d1	542:12:18051:18058	5094670	1	True				
ANR	5094756	AssignmentExpression	xi = d1		5094670	0		=			
ANR	5094757	Identifier	xi		5094670	0					
ANR	5094758	Identifier	d1		5094670	1					
ANR	5094759	ExpressionStatement	t = ( xi - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )	543:8:18068:18121	5094670	6	True				
ANR	5094760	AssignmentExpression	t = ( xi - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		5094670	0		=			
ANR	5094761	Identifier	t		5094670	0					
ANR	5094762	MultiplicativeExpression	( xi - d0 ) * ( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		5094670	1		*			
ANR	5094763	AdditiveExpression	xi - d0		5094670	0		-			
ANR	5094764	Identifier	xi		5094670	0					
ANR	5094765	Identifier	d0		5094670	1					
ANR	5094766	MultiplicativeExpression	( pfn -> params . Size [ i ] - 1 ) / ( d1 - d0 )		5094670	1		/			
ANR	5094767	AdditiveExpression	pfn -> params . Size [ i ] - 1		5094670	0		-			
ANR	5094768	ArrayIndexing	pfn -> params . Size [ i ]		5094670	0					
ANR	5094769	MemberAccess	pfn -> params . Size		5094670	0					
ANR	5094770	PtrMemberAccess	pfn -> params		5094670	0					
ANR	5094771	Identifier	pfn		5094670	0					
ANR	5094772	Identifier	params		5094670	1					
ANR	5094773	Identifier	Size		5094670	1					
ANR	5094774	Identifier	i		5094670	1					
ANR	5094775	PrimaryExpression	1		5094670	1					
ANR	5094776	AdditiveExpression	d1 - d0		5094670	1		-			
ANR	5094777	Identifier	d1		5094670	0					
ANR	5094778	Identifier	d0		5094670	1					
ANR	5094779	ExpressionStatement	I [ i ] = ( int ) floor ( t )	544:8:18131:18151	5094670	7	True				
ANR	5094780	AssignmentExpression	I [ i ] = ( int ) floor ( t )		5094670	0		=			
ANR	5094781	ArrayIndexing	I [ i ]		5094670	0					
ANR	5094782	Identifier	I		5094670	0					
ANR	5094783	Identifier	i		5094670	1					
ANR	5094784	CastExpression	( int ) floor ( t )		5094670	1					
ANR	5094785	CastTarget	int		5094670	0					
ANR	5094786	CallExpression	floor ( t )		5094670	1					
ANR	5094787	Callee	floor		5094670	0					
ANR	5094788	Identifier	floor		5094670	0					
ANR	5094789	ArgumentList	t		5094670	1					
ANR	5094790	Argument	t		5094670	0					
ANR	5094791	Identifier	t		5094670	0					
ANR	5094792	ExpressionStatement	T [ i ] = t - I [ i ]	545:8:18161:18176	5094670	8	True				
ANR	5094793	AssignmentExpression	T [ i ] = t - I [ i ]		5094670	0		=			
ANR	5094794	ArrayIndexing	T [ i ]		5094670	0					
ANR	5094795	Identifier	T		5094670	0					
ANR	5094796	Identifier	i		5094670	1					
ANR	5094797	AdditiveExpression	t - I [ i ]		5094670	1		-			
ANR	5094798	Identifier	t		5094670	0					
ANR	5094799	ArrayIndexing	I [ i ]		5094670	1					
ANR	5094800	Identifier	I		5094670	0					
ANR	5094801	Identifier	i		5094670	1					
ANR	5094802	ReturnType	static inline void		5094670	1					
ANR	5094803	Identifier	decode_argument		5094670	2					
ANR	5094804	ParameterList	"const gs_function_Sd_t * pfn , const float * in , double T [ max_Sd_m ] , int I [ max_Sd_m ]"		5094670	3					
ANR	5094805	Parameter	const gs_function_Sd_t * pfn	529:16:17692:17718	5094670	0	True				
ANR	5094806	ParameterType	const gs_function_Sd_t *		5094670	0					
ANR	5094807	Identifier	pfn		5094670	1					
ANR	5094808	Parameter	const float * in	529:45:17721:17735	5094670	1	True				
ANR	5094809	ParameterType	const float *		5094670	0					
ANR	5094810	Identifier	in		5094670	1					
ANR	5094811	Parameter	double T [ max_Sd_m ]	529:62:17738:17755	5094670	2	True				
ANR	5094812	ParameterType	double [ max_Sd_m ]		5094670	0					
ANR	5094813	Identifier	T		5094670	1					
ANR	5094814	Parameter	int I [ max_Sd_m ]	529:82:17758:17772	5094670	3	True				
ANR	5094815	ParameterType	int [ max_Sd_m ]		5094670	0					
ANR	5094816	Identifier	I		5094670	1					
ANR	5094817	CFGEntryNode	ENTRY		5094670		True				
ANR	5094818	CFGExitNode	EXIT		5094670		True				
ANR	5094819	Symbol	* pfn		5094670						
ANR	5094820	Symbol	pfn -> params . m		5094670						
ANR	5094821	Symbol	pfn -> params . Size		5094670						
ANR	5094822	Symbol	in		5094670						
ANR	5094823	Symbol	* in		5094670						
ANR	5094824	Symbol	* pfn -> params . Size		5094670						
ANR	5094825	Symbol	I		5094670						
ANR	5094826	Symbol	i		5094670						
ANR	5094827	Symbol	pfn -> params . Domain		5094670						
ANR	5094828	Symbol	* pfn -> params . Domain		5094670						
ANR	5094829	Symbol	* * pfn		5094670						
ANR	5094830	Symbol	d0		5094670						
ANR	5094831	Symbol	d1		5094670						
ANR	5094832	Symbol	xi		5094670						
ANR	5094833	Symbol	* i		5094670						
ANR	5094834	Symbol	* I		5094670						
ANR	5094835	Symbol	T		5094670						
ANR	5094836	Symbol	t		5094670						
ANR	5094837	Symbol	pfn		5094670						
ANR	5094838	Symbol	floor		5094670						
ANR	5094839	Symbol	pfn -> params		5094670						
ANR	5094840	Symbol	* pfn -> params		5094670						
ANR	5094841	Symbol	* T		5094670						
ANR	5094842	Function	index_span	549:0:18187:18483							
ANR	5094843	FunctionDef	"index_span (const gs_function_Sd_t * pfn , int * I , double * T , int ii , int * Ii , int * ib , int * ie)"		5094842	0					
ANR	5094844	CompoundStatement		551:0:18300:18483	5094842	0					
ANR	5094845	ExpressionStatement	* Ii = I [ ii ]	552:4:18306:18317	5094842	0	True				
ANR	5094846	AssignmentExpression	* Ii = I [ ii ]		5094842	0		=			
ANR	5094847	UnaryOperationExpression	* Ii		5094842	0					
ANR	5094848	UnaryOperator	*		5094842	0					
ANR	5094849	Identifier	Ii		5094842	1					
ANR	5094850	ArrayIndexing	I [ ii ]		5094842	1					
ANR	5094851	Identifier	I		5094842	0					
ANR	5094852	Identifier	ii		5094842	1					
ANR	5094853	IfStatement	if ( T [ ii ] != 0 )		5094842	1					
ANR	5094854	Condition	T [ ii ] != 0	553:8:18327:18336	5094842	0	True				
ANR	5094855	EqualityExpression	T [ ii ] != 0		5094842	0		!=			
ANR	5094856	ArrayIndexing	T [ ii ]		5094842	0					
ANR	5094857	Identifier	T		5094842	0					
ANR	5094858	Identifier	ii		5094842	1					
ANR	5094859	PrimaryExpression	0		5094842	1					
ANR	5094860	CompoundStatement		3:20:38:38	5094842	1					
ANR	5094861	ExpressionStatement	"* ib = max ( * Ii - 1 , 0 )"	554:8:18349:18370	5094842	0	True				
ANR	5094862	AssignmentExpression	"* ib = max ( * Ii - 1 , 0 )"		5094842	0		=			
ANR	5094863	UnaryOperationExpression	* ib		5094842	0					
ANR	5094864	UnaryOperator	*		5094842	0					
ANR	5094865	Identifier	ib		5094842	1					
ANR	5094866	CallExpression	"max ( * Ii - 1 , 0 )"		5094842	1					
ANR	5094867	Callee	max		5094842	0					
ANR	5094868	Identifier	max		5094842	0					
ANR	5094869	ArgumentList	* Ii - 1		5094842	1					
ANR	5094870	Argument	* Ii - 1		5094842	0					
ANR	5094871	AdditiveExpression	* Ii - 1		5094842	0		-			
ANR	5094872	UnaryOperationExpression	* Ii		5094842	0					
ANR	5094873	UnaryOperator	*		5094842	0					
ANR	5094874	Identifier	Ii		5094842	1					
ANR	5094875	PrimaryExpression	1		5094842	1					
ANR	5094876	Argument	0		5094842	1					
ANR	5094877	PrimaryExpression	0		5094842	0					
ANR	5094878	ExpressionStatement	"* ie = min ( pfn -> params . Size [ ii ] , * Ii + 3 )"	555:8:18380:18420	5094842	1	True				
ANR	5094879	AssignmentExpression	"* ie = min ( pfn -> params . Size [ ii ] , * Ii + 3 )"		5094842	0		=			
ANR	5094880	UnaryOperationExpression	* ie		5094842	0					
ANR	5094881	UnaryOperator	*		5094842	0					
ANR	5094882	Identifier	ie		5094842	1					
ANR	5094883	CallExpression	"min ( pfn -> params . Size [ ii ] , * Ii + 3 )"		5094842	1					
ANR	5094884	Callee	min		5094842	0					
ANR	5094885	Identifier	min		5094842	0					
ANR	5094886	ArgumentList	pfn -> params . Size [ ii ]		5094842	1					
ANR	5094887	Argument	pfn -> params . Size [ ii ]		5094842	0					
ANR	5094888	ArrayIndexing	pfn -> params . Size [ ii ]		5094842	0					
ANR	5094889	MemberAccess	pfn -> params . Size		5094842	0					
ANR	5094890	PtrMemberAccess	pfn -> params		5094842	0					
ANR	5094891	Identifier	pfn		5094842	0					
ANR	5094892	Identifier	params		5094842	1					
ANR	5094893	Identifier	Size		5094842	1					
ANR	5094894	Identifier	ii		5094842	1					
ANR	5094895	Argument	* Ii + 3		5094842	1					
ANR	5094896	AdditiveExpression	* Ii + 3		5094842	0		+			
ANR	5094897	UnaryOperationExpression	* Ii		5094842	0					
ANR	5094898	UnaryOperator	*		5094842	0					
ANR	5094899	Identifier	Ii		5094842	1					
ANR	5094900	PrimaryExpression	3		5094842	1					
ANR	5094901	ElseStatement	else		5094842	0					
ANR	5094902	CompoundStatement		6:11:132:132	5094842	0					
ANR	5094903	ExpressionStatement	* ib = * Ii	557:8:18443:18452	5094842	0	True				
ANR	5094904	AssignmentExpression	* ib = * Ii		5094842	0		=			
ANR	5094905	UnaryOperationExpression	* ib		5094842	0					
ANR	5094906	UnaryOperator	*		5094842	0					
ANR	5094907	Identifier	ib		5094842	1					
ANR	5094908	UnaryOperationExpression	* Ii		5094842	1					
ANR	5094909	UnaryOperator	*		5094842	0					
ANR	5094910	Identifier	Ii		5094842	1					
ANR	5094911	ExpressionStatement	* ie = * Ii + 1	558:8:18462:18475	5094842	1	True				
ANR	5094912	AssignmentExpression	* ie = * Ii + 1		5094842	0		=			
ANR	5094913	UnaryOperationExpression	* ie		5094842	0					
ANR	5094914	UnaryOperator	*		5094842	0					
ANR	5094915	Identifier	ie		5094842	1					
ANR	5094916	AdditiveExpression	* Ii + 1		5094842	1		+			
ANR	5094917	UnaryOperationExpression	* Ii		5094842	0					
ANR	5094918	UnaryOperator	*		5094842	0					
ANR	5094919	Identifier	Ii		5094842	1					
ANR	5094920	PrimaryExpression	1		5094842	1					
ANR	5094921	ReturnType	static inline void		5094842	1					
ANR	5094922	Identifier	index_span		5094842	2					
ANR	5094923	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int ii , int * Ii , int * ib , int * ie"		5094842	3					
ANR	5094924	Parameter	const gs_function_Sd_t * pfn	550:11:18217:18243	5094842	0	True				
ANR	5094925	ParameterType	const gs_function_Sd_t *		5094842	0					
ANR	5094926	Identifier	pfn		5094842	1					
ANR	5094927	Parameter	int * I	550:40:18246:18251	5094842	1	True				
ANR	5094928	ParameterType	int *		5094842	0					
ANR	5094929	Identifier	I		5094842	1					
ANR	5094930	Parameter	double * T	550:48:18254:18262	5094842	2	True				
ANR	5094931	ParameterType	double *		5094842	0					
ANR	5094932	Identifier	T		5094842	1					
ANR	5094933	Parameter	int ii	550:59:18265:18270	5094842	3	True				
ANR	5094934	ParameterType	int		5094842	0					
ANR	5094935	Identifier	ii		5094842	1					
ANR	5094936	Parameter	int * Ii	550:67:18273:18279	5094842	4	True				
ANR	5094937	ParameterType	int *		5094842	0					
ANR	5094938	Identifier	Ii		5094842	1					
ANR	5094939	Parameter	int * ib	550:76:18282:18288	5094842	5	True				
ANR	5094940	ParameterType	int *		5094842	0					
ANR	5094941	Identifier	ib		5094842	1					
ANR	5094942	Parameter	int * ie	550:85:18291:18297	5094842	6	True				
ANR	5094943	ParameterType	int *		5094842	0					
ANR	5094944	Identifier	ie		5094842	1					
ANR	5094945	CFGEntryNode	ENTRY		5094842		True				
ANR	5094946	CFGExitNode	EXIT		5094842		True				
ANR	5094947	Symbol	ii		5094842						
ANR	5094948	Symbol	Ii		5094842						
ANR	5094949	Symbol	* ie		5094842						
ANR	5094950	Symbol	* pfn		5094842						
ANR	5094951	Symbol	pfn -> params . Size		5094842						
ANR	5094952	Symbol	* ii		5094842						
ANR	5094953	Symbol	* Ii		5094842						
ANR	5094954	Symbol	max		5094842						
ANR	5094955	Symbol	* pfn -> params . Size		5094842						
ANR	5094956	Symbol	I		5094842						
ANR	5094957	Symbol	* * pfn		5094842						
ANR	5094958	Symbol	* I		5094842						
ANR	5094959	Symbol	min		5094842						
ANR	5094960	Symbol	T		5094842						
ANR	5094961	Symbol	pfn		5094842						
ANR	5094962	Symbol	ib		5094842						
ANR	5094963	Symbol	ie		5094842						
ANR	5094964	Symbol	* ib		5094842						
ANR	5094965	Symbol	pfn -> params		5094842						
ANR	5094966	Symbol	* T		5094842						
ANR	5094967	Symbol	* pfn -> params		5094842						
ANR	5094968	Function	load_vector_to	562:0:18486:18843							
ANR	5094969	FunctionDef	"load_vector_to (const gs_function_Sd_t * pfn , int s_offset , double * V)"		5094968	0					
ANR	5094970	CompoundStatement		564:0:18573:18843	5094968	0					
ANR	5094971	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	565:4:18579:18599	5094968	0	True				
ANR	5094972	IdentifierDecl	sdata [ max_Sd_n ]		5094968	0					
ANR	5094973	IdentifierDeclType	uint [ max_Sd_n ]		5094968	0					
ANR	5094974	Identifier	sdata		5094968	1					
ANR	5094975	Identifier	max_Sd_n		5094968	2					
ANR	5094976	IdentifierDeclStatement	"int k , code ;"	566:4:18605:18616	5094968	1	True				
ANR	5094977	IdentifierDecl	k		5094968	0					
ANR	5094978	IdentifierDeclType	int		5094968	0					
ANR	5094979	Identifier	k		5094968	1					
ANR	5094980	IdentifierDecl	code		5094968	1					
ANR	5094981	IdentifierDeclType	int		5094968	0					
ANR	5094982	Identifier	code		5094968	1					
ANR	5094983	ExpressionStatement	"code = fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"	568:4:18623:18693	5094968	2	True				
ANR	5094984	AssignmentExpression	"code = fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"		5094968	0		=			
ANR	5094985	Identifier	code		5094968	0					
ANR	5094986	CallExpression	"fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"		5094968	1					
ANR	5094987	Callee	fn_get_samples [ pfn -> params . BitsPerSample ]		5094968	0					
ANR	5094988	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		5094968	0					
ANR	5094989	Identifier	fn_get_samples		5094968	0					
ANR	5094990	MemberAccess	pfn -> params . BitsPerSample		5094968	1					
ANR	5094991	PtrMemberAccess	pfn -> params		5094968	0					
ANR	5094992	Identifier	pfn		5094968	0					
ANR	5094993	Identifier	params		5094968	1					
ANR	5094994	Identifier	BitsPerSample		5094968	1					
ANR	5094995	ArgumentList	pfn		5094968	1					
ANR	5094996	Argument	pfn		5094968	0					
ANR	5094997	Identifier	pfn		5094968	0					
ANR	5094998	Argument	s_offset		5094968	1					
ANR	5094999	Identifier	s_offset		5094968	0					
ANR	5095000	Argument	sdata		5094968	2					
ANR	5095001	Identifier	sdata		5094968	0					
ANR	5095002	IfStatement	if ( code < 0 )		5094968	3					
ANR	5095003	Condition	code < 0	569:8:18703:18710	5094968	0	True				
ANR	5095004	RelationalExpression	code < 0		5094968	0		<			
ANR	5095005	Identifier	code		5094968	0					
ANR	5095006	PrimaryExpression	0		5094968	1					
ANR	5095007	ReturnStatement	return code ;	570:8:18721:18732	5094968	1	True				
ANR	5095008	Identifier	code		5094968	0					
ANR	5095009	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		5094968	4					
ANR	5095010	ForInit	k = 0 ;	571:9:18743:18748	5094968	0	True				
ANR	5095011	AssignmentExpression	k = 0		5094968	0		=			
ANR	5095012	Identifier	k		5094968	0					
ANR	5095013	PrimaryExpression	0		5094968	1					
ANR	5095014	Condition	k < pfn -> params . n	571:16:18750:18766	5094968	1	True				
ANR	5095015	RelationalExpression	k < pfn -> params . n		5094968	0		<			
ANR	5095016	Identifier	k		5094968	0					
ANR	5095017	MemberAccess	pfn -> params . n		5094968	1					
ANR	5095018	PtrMemberAccess	pfn -> params		5094968	0					
ANR	5095019	Identifier	pfn		5094968	0					
ANR	5095020	Identifier	params		5094968	1					
ANR	5095021	Identifier	n		5094968	1					
ANR	5095022	PostIncDecOperationExpression	k ++	571:35:18769:18771	5094968	2	True				
ANR	5095023	Identifier	k		5094968	0					
ANR	5095024	IncDec	++		5094968	1					
ANR	5095025	ExpressionStatement	"V [ k ] = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"	572:8:18782:18827	5094968	3	True				
ANR	5095026	AssignmentExpression	"V [ k ] = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		5094968	0		=			
ANR	5095027	ArrayIndexing	V [ k ]		5094968	0					
ANR	5095028	Identifier	V		5094968	0					
ANR	5095029	Identifier	k		5094968	1					
ANR	5095030	CallExpression	"fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		5094968	1					
ANR	5095031	Callee	fn_Sd_encode		5094968	0					
ANR	5095032	Identifier	fn_Sd_encode		5094968	0					
ANR	5095033	ArgumentList	pfn		5094968	1					
ANR	5095034	Argument	pfn		5094968	0					
ANR	5095035	Identifier	pfn		5094968	0					
ANR	5095036	Argument	k		5094968	1					
ANR	5095037	Identifier	k		5094968	0					
ANR	5095038	Argument	( double ) sdata [ k ]		5094968	2					
ANR	5095039	CastExpression	( double ) sdata [ k ]		5094968	0					
ANR	5095040	CastTarget	double		5094968	0					
ANR	5095041	ArrayIndexing	sdata [ k ]		5094968	1					
ANR	5095042	Identifier	sdata		5094968	0					
ANR	5095043	Identifier	k		5094968	1					
ANR	5095044	ReturnStatement	return 0 ;	573:4:18833:18841	5094968	5	True				
ANR	5095045	PrimaryExpression	0		5094968	0					
ANR	5095046	ReturnType	static inline int		5094968	1					
ANR	5095047	Identifier	load_vector_to		5094968	2					
ANR	5095048	ParameterList	"const gs_function_Sd_t * pfn , int s_offset , double * V"		5094968	3					
ANR	5095049	Parameter	const gs_function_Sd_t * pfn	563:15:18519:18545	5094968	0	True				
ANR	5095050	ParameterType	const gs_function_Sd_t *		5094968	0					
ANR	5095051	Identifier	pfn		5094968	1					
ANR	5095052	Parameter	int s_offset	563:44:18548:18559	5094968	1	True				
ANR	5095053	ParameterType	int		5094968	0					
ANR	5095054	Identifier	s_offset		5094968	1					
ANR	5095055	Parameter	double * V	563:58:18562:18570	5094968	2	True				
ANR	5095056	ParameterType	double *		5094968	0					
ANR	5095057	Identifier	V		5094968	1					
ANR	5095058	CFGEntryNode	ENTRY		5094968		True				
ANR	5095059	CFGExitNode	EXIT		5094968		True				
ANR	5095060	Symbol	* V		5094968						
ANR	5095061	Symbol	* pfn		5094968						
ANR	5095062	Symbol	code		5094968						
ANR	5095063	Symbol	pfn -> params . n		5094968						
ANR	5095064	Symbol	* sdata		5094968						
ANR	5095065	Symbol	fn_get_samples		5094968						
ANR	5095066	Symbol	k		5094968						
ANR	5095067	Symbol	* * pfn		5094968						
ANR	5095068	Symbol	* pfn -> params . BitsPerSample		5094968						
ANR	5095069	Symbol	s_offset		5094968						
ANR	5095070	Symbol	fn_Sd_encode		5094968						
ANR	5095071	Symbol	* k		5094968						
ANR	5095072	Symbol	V		5094968						
ANR	5095073	Symbol	* fn_get_samples		5094968						
ANR	5095074	Symbol	pfn		5094968						
ANR	5095075	Symbol	pfn -> params		5094968						
ANR	5095076	Symbol	sdata		5094968						
ANR	5095077	Symbol	* pfn -> params		5094968						
ANR	5095078	Symbol	pfn -> params . BitsPerSample		5094968						
ANR	5095079	Function	load_vector	576:0:18846:19324							
ANR	5095080	FunctionDef	"load_vector (const gs_function_Sd_t * pfn , int a_offset , int s_offset)"		5095079	0					
ANR	5095081	CompoundStatement		578:0:18933:19324	5095079	0					
ANR	5095082	IfStatement	if ( * ( pfn -> params . pole + a_offset ) == double_stub )		5095079	0					
ANR	5095083	Condition	* ( pfn -> params . pole + a_offset ) == double_stub	579:8:18943:18987	5095079	0	True				
ANR	5095084	EqualityExpression	* ( pfn -> params . pole + a_offset ) == double_stub		5095079	0		==			
ANR	5095085	UnaryOperationExpression	* ( pfn -> params . pole + a_offset )		5095079	0					
ANR	5095086	UnaryOperator	*		5095079	0					
ANR	5095087	AdditiveExpression	pfn -> params . pole + a_offset		5095079	1		+			
ANR	5095088	MemberAccess	pfn -> params . pole		5095079	0					
ANR	5095089	PtrMemberAccess	pfn -> params		5095079	0					
ANR	5095090	Identifier	pfn		5095079	0					
ANR	5095091	Identifier	params		5095079	1					
ANR	5095092	Identifier	pole		5095079	1					
ANR	5095093	Identifier	a_offset		5095079	1					
ANR	5095094	Identifier	double_stub		5095079	1					
ANR	5095095	CompoundStatement		4:8:96:107	5095079	1					
ANR	5095096	IdentifierDeclStatement	uint sdata [ max_Sd_n ] ;	580:8:19000:19020	5095079	0	True				
ANR	5095097	IdentifierDecl	sdata [ max_Sd_n ]		5095079	0					
ANR	5095098	IdentifierDeclType	uint [ max_Sd_n ]		5095079	0					
ANR	5095099	Identifier	sdata		5095079	1					
ANR	5095100	Identifier	max_Sd_n		5095079	2					
ANR	5095101	IdentifierDeclStatement	"int k , code ;"	581:8:19030:19041	5095079	1	True				
ANR	5095102	IdentifierDecl	k		5095079	0					
ANR	5095103	IdentifierDeclType	int		5095079	0					
ANR	5095104	Identifier	k		5095079	1					
ANR	5095105	IdentifierDecl	code		5095079	1					
ANR	5095106	IdentifierDeclType	int		5095079	0					
ANR	5095107	Identifier	code		5095079	1					
ANR	5095108	ExpressionStatement	"code = fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"	583:8:19052:19122	5095079	2	True				
ANR	5095109	AssignmentExpression	"code = fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"		5095079	0		=			
ANR	5095110	Identifier	code		5095079	0					
ANR	5095111	CallExpression	"fn_get_samples [ pfn -> params . BitsPerSample ] ( pfn , s_offset , sdata )"		5095079	1					
ANR	5095112	Callee	fn_get_samples [ pfn -> params . BitsPerSample ]		5095079	0					
ANR	5095113	ArrayIndexing	fn_get_samples [ pfn -> params . BitsPerSample ]		5095079	0					
ANR	5095114	Identifier	fn_get_samples		5095079	0					
ANR	5095115	MemberAccess	pfn -> params . BitsPerSample		5095079	1					
ANR	5095116	PtrMemberAccess	pfn -> params		5095079	0					
ANR	5095117	Identifier	pfn		5095079	0					
ANR	5095118	Identifier	params		5095079	1					
ANR	5095119	Identifier	BitsPerSample		5095079	1					
ANR	5095120	ArgumentList	pfn		5095079	1					
ANR	5095121	Argument	pfn		5095079	0					
ANR	5095122	Identifier	pfn		5095079	0					
ANR	5095123	Argument	s_offset		5095079	1					
ANR	5095124	Identifier	s_offset		5095079	0					
ANR	5095125	Argument	sdata		5095079	2					
ANR	5095126	Identifier	sdata		5095079	0					
ANR	5095127	IfStatement	if ( code < 0 )		5095079	3					
ANR	5095128	Condition	code < 0	584:12:19136:19143	5095079	0	True				
ANR	5095129	RelationalExpression	code < 0		5095079	0		<			
ANR	5095130	Identifier	code		5095079	0					
ANR	5095131	PrimaryExpression	0		5095079	1					
ANR	5095132	ReturnStatement	return code ;	585:12:19158:19169	5095079	1	True				
ANR	5095133	Identifier	code		5095079	0					
ANR	5095134	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		5095079	4					
ANR	5095135	ForInit	k = 0 ;	586:13:19184:19189	5095079	0	True				
ANR	5095136	AssignmentExpression	k = 0		5095079	0		=			
ANR	5095137	Identifier	k		5095079	0					
ANR	5095138	PrimaryExpression	0		5095079	1					
ANR	5095139	Condition	k < pfn -> params . n	586:20:19191:19207	5095079	1	True				
ANR	5095140	RelationalExpression	k < pfn -> params . n		5095079	0		<			
ANR	5095141	Identifier	k		5095079	0					
ANR	5095142	MemberAccess	pfn -> params . n		5095079	1					
ANR	5095143	PtrMemberAccess	pfn -> params		5095079	0					
ANR	5095144	Identifier	pfn		5095079	0					
ANR	5095145	Identifier	params		5095079	1					
ANR	5095146	Identifier	n		5095079	1					
ANR	5095147	PostIncDecOperationExpression	k ++	586:39:19210:19212	5095079	2	True				
ANR	5095148	Identifier	k		5095079	0					
ANR	5095149	IncDec	++		5095079	1					
ANR	5095150	ExpressionStatement	"* ( pfn -> params . pole + a_offset + k ) = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"	587:12:19227:19302	5095079	3	True				
ANR	5095151	AssignmentExpression	"* ( pfn -> params . pole + a_offset + k ) = fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		5095079	0		=			
ANR	5095152	UnaryOperationExpression	* ( pfn -> params . pole + a_offset + k )		5095079	0					
ANR	5095153	UnaryOperator	*		5095079	0					
ANR	5095154	AdditiveExpression	pfn -> params . pole + a_offset + k		5095079	1		+			
ANR	5095155	MemberAccess	pfn -> params . pole		5095079	0					
ANR	5095156	PtrMemberAccess	pfn -> params		5095079	0					
ANR	5095157	Identifier	pfn		5095079	0					
ANR	5095158	Identifier	params		5095079	1					
ANR	5095159	Identifier	pole		5095079	1					
ANR	5095160	AdditiveExpression	a_offset + k		5095079	1		+			
ANR	5095161	Identifier	a_offset		5095079	0					
ANR	5095162	Identifier	k		5095079	1					
ANR	5095163	CallExpression	"fn_Sd_encode ( pfn , k , ( double ) sdata [ k ] )"		5095079	1					
ANR	5095164	Callee	fn_Sd_encode		5095079	0					
ANR	5095165	Identifier	fn_Sd_encode		5095079	0					
ANR	5095166	ArgumentList	pfn		5095079	1					
ANR	5095167	Argument	pfn		5095079	0					
ANR	5095168	Identifier	pfn		5095079	0					
ANR	5095169	Argument	k		5095079	1					
ANR	5095170	Identifier	k		5095079	0					
ANR	5095171	Argument	( double ) sdata [ k ]		5095079	2					
ANR	5095172	CastExpression	( double ) sdata [ k ]		5095079	0					
ANR	5095173	CastTarget	double		5095079	0					
ANR	5095174	ArrayIndexing	sdata [ k ]		5095079	1					
ANR	5095175	Identifier	sdata		5095079	0					
ANR	5095176	Identifier	k		5095079	1					
ANR	5095177	ReturnStatement	return 0 ;	589:4:19314:19322	5095079	1	True				
ANR	5095178	PrimaryExpression	0		5095079	0					
ANR	5095179	ReturnType	static inline int		5095079	1					
ANR	5095180	Identifier	load_vector		5095079	2					
ANR	5095181	ParameterList	"const gs_function_Sd_t * pfn , int a_offset , int s_offset"		5095079	3					
ANR	5095182	Parameter	const gs_function_Sd_t * pfn	577:12:18876:18902	5095079	0	True				
ANR	5095183	ParameterType	const gs_function_Sd_t *		5095079	0					
ANR	5095184	Identifier	pfn		5095079	1					
ANR	5095185	Parameter	int a_offset	577:41:18905:18916	5095079	1	True				
ANR	5095186	ParameterType	int		5095079	0					
ANR	5095187	Identifier	a_offset		5095079	1					
ANR	5095188	Parameter	int s_offset	577:55:18919:18930	5095079	2	True				
ANR	5095189	ParameterType	int		5095079	0					
ANR	5095190	Identifier	s_offset		5095079	1					
ANR	5095191	CFGEntryNode	ENTRY		5095079		True				
ANR	5095192	CFGExitNode	EXIT		5095079		True				
ANR	5095193	Symbol	* pfn		5095079						
ANR	5095194	Symbol	code		5095079						
ANR	5095195	Symbol	pfn -> params . n		5095079						
ANR	5095196	Symbol	* sdata		5095079						
ANR	5095197	Symbol	fn_get_samples		5095079						
ANR	5095198	Symbol	a_offset		5095079						
ANR	5095199	Symbol	k		5095079						
ANR	5095200	Symbol	* * pfn		5095079						
ANR	5095201	Symbol	* pfn -> params . BitsPerSample		5095079						
ANR	5095202	Symbol	double_stub		5095079						
ANR	5095203	Symbol	pfn -> params . pole		5095079						
ANR	5095204	Symbol	s_offset		5095079						
ANR	5095205	Symbol	* pfn -> params . pole		5095079						
ANR	5095206	Symbol	* ( pfn -> params . pole + a_offset + k )		5095079						
ANR	5095207	Symbol	* a_offset		5095079						
ANR	5095208	Symbol	fn_Sd_encode		5095079						
ANR	5095209	Symbol	* k		5095079						
ANR	5095210	Symbol	* fn_get_samples		5095079						
ANR	5095211	Symbol	pfn		5095079						
ANR	5095212	Symbol	* ( pfn -> params . pole + a_offset )		5095079						
ANR	5095213	Symbol	pfn -> params		5095079						
ANR	5095214	Symbol	* pfn -> params		5095079						
ANR	5095215	Symbol	sdata		5095079						
ANR	5095216	Symbol	pfn -> params . BitsPerSample		5095079						
ANR	5095217	Function	interpolate_vector	592:0:19327:19574							
ANR	5095218	FunctionDef	"interpolate_vector (const gs_function_Sd_t * pfn , int offset , int pole_step , int power , int bias)"		5095217	0					
ANR	5095219	CompoundStatement		594:0:19442:19574	5095217	0					
ANR	5095220	IdentifierDeclStatement	int k ;	595:4:19448:19453	5095217	0	True				
ANR	5095221	IdentifierDecl	k		5095217	0					
ANR	5095222	IdentifierDeclType	int		5095217	0					
ANR	5095223	Identifier	k		5095217	1					
ANR	5095224	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		5095217	1					
ANR	5095225	ForInit	k = 0 ;	597:9:19465:19470	5095217	0	True				
ANR	5095226	AssignmentExpression	k = 0		5095217	0		=			
ANR	5095227	Identifier	k		5095217	0					
ANR	5095228	PrimaryExpression	0		5095217	1					
ANR	5095229	Condition	k < pfn -> params . n	597:16:19472:19488	5095217	1	True				
ANR	5095230	RelationalExpression	k < pfn -> params . n		5095217	0		<			
ANR	5095231	Identifier	k		5095217	0					
ANR	5095232	MemberAccess	pfn -> params . n		5095217	1					
ANR	5095233	PtrMemberAccess	pfn -> params		5095217	0					
ANR	5095234	Identifier	pfn		5095217	0					
ANR	5095235	Identifier	params		5095217	1					
ANR	5095236	Identifier	n		5095217	1					
ANR	5095237	PostIncDecOperationExpression	k ++	597:35:19491:19493	5095217	2	True				
ANR	5095238	Identifier	k		5095217	0					
ANR	5095239	IncDec	++		5095217	1					
ANR	5095240	ExpressionStatement	"fn_make_poles ( pfn -> params . pole + offset + k , pole_step , power , bias )"	598:8:19504:19572	5095217	3	True				
ANR	5095241	CallExpression	"fn_make_poles ( pfn -> params . pole + offset + k , pole_step , power , bias )"		5095217	0					
ANR	5095242	Callee	fn_make_poles		5095217	0					
ANR	5095243	Identifier	fn_make_poles		5095217	0					
ANR	5095244	ArgumentList	pfn -> params . pole + offset + k		5095217	1					
ANR	5095245	Argument	pfn -> params . pole + offset + k		5095217	0					
ANR	5095246	AdditiveExpression	pfn -> params . pole + offset + k		5095217	0		+			
ANR	5095247	MemberAccess	pfn -> params . pole		5095217	0					
ANR	5095248	PtrMemberAccess	pfn -> params		5095217	0					
ANR	5095249	Identifier	pfn		5095217	0					
ANR	5095250	Identifier	params		5095217	1					
ANR	5095251	Identifier	pole		5095217	1					
ANR	5095252	AdditiveExpression	offset + k		5095217	1		+			
ANR	5095253	Identifier	offset		5095217	0					
ANR	5095254	Identifier	k		5095217	1					
ANR	5095255	Argument	pole_step		5095217	1					
ANR	5095256	Identifier	pole_step		5095217	0					
ANR	5095257	Argument	power		5095217	2					
ANR	5095258	Identifier	power		5095217	0					
ANR	5095259	Argument	bias		5095217	3					
ANR	5095260	Identifier	bias		5095217	0					
ANR	5095261	ReturnType	static inline void		5095217	1					
ANR	5095262	Identifier	interpolate_vector		5095217	2					
ANR	5095263	ParameterList	"const gs_function_Sd_t * pfn , int offset , int pole_step , int power , int bias"		5095217	3					
ANR	5095264	Parameter	const gs_function_Sd_t * pfn	593:19:19365:19391	5095217	0	True				
ANR	5095265	ParameterType	const gs_function_Sd_t *		5095217	0					
ANR	5095266	Identifier	pfn		5095217	1					
ANR	5095267	Parameter	int offset	593:48:19394:19403	5095217	1	True				
ANR	5095268	ParameterType	int		5095217	0					
ANR	5095269	Identifier	offset		5095217	1					
ANR	5095270	Parameter	int pole_step	593:60:19406:19418	5095217	2	True				
ANR	5095271	ParameterType	int		5095217	0					
ANR	5095272	Identifier	pole_step		5095217	1					
ANR	5095273	Parameter	int power	593:75:19421:19429	5095217	3	True				
ANR	5095274	ParameterType	int		5095217	0					
ANR	5095275	Identifier	power		5095217	1					
ANR	5095276	Parameter	int bias	593:86:19432:19439	5095217	4	True				
ANR	5095277	ParameterType	int		5095217	0					
ANR	5095278	Identifier	bias		5095217	1					
ANR	5095279	CFGEntryNode	ENTRY		5095217		True				
ANR	5095280	CFGExitNode	EXIT		5095217		True				
ANR	5095281	Symbol	* pfn		5095217						
ANR	5095282	Symbol	pfn -> params . n		5095217						
ANR	5095283	Symbol	offset		5095217						
ANR	5095284	Symbol	bias		5095217						
ANR	5095285	Symbol	pfn		5095217						
ANR	5095286	Symbol	power		5095217						
ANR	5095287	Symbol	k		5095217						
ANR	5095288	Symbol	pole_step		5095217						
ANR	5095289	Symbol	pfn -> params		5095217						
ANR	5095290	Symbol	pfn -> params . pole		5095217						
ANR	5095291	Function	interpolate_tensors	601:0:19577:20208							
ANR	5095292	FunctionDef	"interpolate_tensors (const gs_function_Sd_t * pfn , int * I , double * T , int offset , int pole_step , int power , int bias , int ii)"		5095291	0					
ANR	5095293	CompoundStatement		604:0:19728:20208	5095291	0					
ANR	5095294	IfStatement	if ( ii < 0 )		5095291	0					
ANR	5095295	Condition	ii < 0	605:8:19738:19743	5095291	0	True				
ANR	5095296	RelationalExpression	ii < 0		5095291	0		<			
ANR	5095297	Identifier	ii		5095291	0					
ANR	5095298	PrimaryExpression	0		5095291	1					
ANR	5095299	ExpressionStatement	"interpolate_vector ( pfn , offset , pole_step , power , bias )"	606:8:19754:19809	5095291	1	True				
ANR	5095300	CallExpression	"interpolate_vector ( pfn , offset , pole_step , power , bias )"		5095291	0					
ANR	5095301	Callee	interpolate_vector		5095291	0					
ANR	5095302	Identifier	interpolate_vector		5095291	0					
ANR	5095303	ArgumentList	pfn		5095291	1					
ANR	5095304	Argument	pfn		5095291	0					
ANR	5095305	Identifier	pfn		5095291	0					
ANR	5095306	Argument	offset		5095291	1					
ANR	5095307	Identifier	offset		5095291	0					
ANR	5095308	Argument	pole_step		5095291	2					
ANR	5095309	Identifier	pole_step		5095291	0					
ANR	5095310	Argument	power		5095291	3					
ANR	5095311	Identifier	power		5095291	0					
ANR	5095312	Argument	bias		5095291	4					
ANR	5095313	Identifier	bias		5095291	0					
ANR	5095314	ElseStatement	else		5095291	0					
ANR	5095315	CompoundStatement		6:8:145:159	5095291	0					
ANR	5095316	IdentifierDeclStatement	int s = pfn -> params . array_step [ ii ] ;	608:8:19830:19864	5095291	0	True				
ANR	5095317	IdentifierDecl	s = pfn -> params . array_step [ ii ]		5095291	0					
ANR	5095318	IdentifierDeclType	int		5095291	0					
ANR	5095319	Identifier	s		5095291	1					
ANR	5095320	AssignmentExpression	s = pfn -> params . array_step [ ii ]		5095291	2		=			
ANR	5095321	Identifier	s		5095291	0					
ANR	5095322	ArrayIndexing	pfn -> params . array_step [ ii ]		5095291	1					
ANR	5095323	MemberAccess	pfn -> params . array_step		5095291	0					
ANR	5095324	PtrMemberAccess	pfn -> params		5095291	0					
ANR	5095325	Identifier	pfn		5095291	0					
ANR	5095326	Identifier	params		5095291	1					
ANR	5095327	Identifier	array_step		5095291	1					
ANR	5095328	Identifier	ii		5095291	1					
ANR	5095329	IdentifierDeclStatement	int Ii = I [ ii ] ;	609:8:19874:19888	5095291	1	True				
ANR	5095330	IdentifierDecl	Ii = I [ ii ]		5095291	0					
ANR	5095331	IdentifierDeclType	int		5095291	0					
ANR	5095332	Identifier	Ii		5095291	1					
ANR	5095333	AssignmentExpression	Ii = I [ ii ]		5095291	2		=			
ANR	5095334	Identifier	Ii		5095291	0					
ANR	5095335	ArrayIndexing	I [ ii ]		5095291	1					
ANR	5095336	Identifier	I		5095291	0					
ANR	5095337	Identifier	ii		5095291	1					
ANR	5095338	IfStatement	if ( T [ ii ] == 0 )		5095291	2					
ANR	5095339	Condition	T [ ii ] == 0	611:12:19903:19912	5095291	0	True				
ANR	5095340	EqualityExpression	T [ ii ] == 0		5095291	0		==			
ANR	5095341	ArrayIndexing	T [ ii ]		5095291	0					
ANR	5095342	Identifier	T		5095291	0					
ANR	5095343	Identifier	ii		5095291	1					
ANR	5095344	PrimaryExpression	0		5095291	1					
ANR	5095345	CompoundStatement		8:24:186:186	5095291	1					
ANR	5095346	ExpressionStatement	"interpolate_tensors ( pfn , I , T , offset + Ii * s , pole_step , power , bias , ii - 1 )"	612:12:19929:20008	5095291	0	True				
ANR	5095347	CallExpression	"interpolate_tensors ( pfn , I , T , offset + Ii * s , pole_step , power , bias , ii - 1 )"		5095291	0					
ANR	5095348	Callee	interpolate_tensors		5095291	0					
ANR	5095349	Identifier	interpolate_tensors		5095291	0					
ANR	5095350	ArgumentList	pfn		5095291	1					
ANR	5095351	Argument	pfn		5095291	0					
ANR	5095352	Identifier	pfn		5095291	0					
ANR	5095353	Argument	I		5095291	1					
ANR	5095354	Identifier	I		5095291	0					
ANR	5095355	Argument	T		5095291	2					
ANR	5095356	Identifier	T		5095291	0					
ANR	5095357	Argument	offset + Ii * s		5095291	3					
ANR	5095358	AdditiveExpression	offset + Ii * s		5095291	0		+			
ANR	5095359	Identifier	offset		5095291	0					
ANR	5095360	MultiplicativeExpression	Ii * s		5095291	1		*			
ANR	5095361	Identifier	Ii		5095291	0					
ANR	5095362	Identifier	s		5095291	1					
ANR	5095363	Argument	pole_step		5095291	4					
ANR	5095364	Identifier	pole_step		5095291	0					
ANR	5095365	Argument	power		5095291	5					
ANR	5095366	Identifier	power		5095291	0					
ANR	5095367	Argument	bias		5095291	6					
ANR	5095368	Identifier	bias		5095291	0					
ANR	5095369	Argument	ii - 1		5095291	7					
ANR	5095370	AdditiveExpression	ii - 1		5095291	0		-			
ANR	5095371	Identifier	ii		5095291	0					
ANR	5095372	PrimaryExpression	1		5095291	1					
ANR	5095373	ElseStatement	else		5095291	0					
ANR	5095374	CompoundStatement		11:12:310:315	5095291	0					
ANR	5095375	IdentifierDeclStatement	int l ;	614:12:20039:20044	5095291	0	True				
ANR	5095376	IdentifierDecl	l		5095291	0					
ANR	5095377	IdentifierDeclType	int		5095291	0					
ANR	5095378	Identifier	l		5095291	1					
ANR	5095379	ForStatement	for ( l = 0 ; l < 4 ; l ++ )		5095291	1					
ANR	5095380	ForInit	l = 0 ;	616:17:20064:20069	5095291	0	True				
ANR	5095381	AssignmentExpression	l = 0		5095291	0		=			
ANR	5095382	Identifier	l		5095291	0					
ANR	5095383	PrimaryExpression	0		5095291	1					
ANR	5095384	Condition	l < 4	616:24:20071:20075	5095291	1	True				
ANR	5095385	RelationalExpression	l < 4		5095291	0		<			
ANR	5095386	Identifier	l		5095291	0					
ANR	5095387	PrimaryExpression	4		5095291	1					
ANR	5095388	PostIncDecOperationExpression	l ++	616:31:20078:20080	5095291	2	True				
ANR	5095389	Identifier	l		5095291	0					
ANR	5095390	IncDec	++		5095291	1					
ANR	5095391	ExpressionStatement	"interpolate_tensors ( pfn , I , T , offset + Ii * s + l * s / 3 , pole_step , power , bias , ii - 1 )"	617:16:20099:20190	5095291	3	True				
ANR	5095392	CallExpression	"interpolate_tensors ( pfn , I , T , offset + Ii * s + l * s / 3 , pole_step , power , bias , ii - 1 )"		5095291	0					
ANR	5095393	Callee	interpolate_tensors		5095291	0					
ANR	5095394	Identifier	interpolate_tensors		5095291	0					
ANR	5095395	ArgumentList	pfn		5095291	1					
ANR	5095396	Argument	pfn		5095291	0					
ANR	5095397	Identifier	pfn		5095291	0					
ANR	5095398	Argument	I		5095291	1					
ANR	5095399	Identifier	I		5095291	0					
ANR	5095400	Argument	T		5095291	2					
ANR	5095401	Identifier	T		5095291	0					
ANR	5095402	Argument	offset + Ii * s + l * s / 3		5095291	3					
ANR	5095403	AdditiveExpression	offset + Ii * s + l * s / 3		5095291	0		+			
ANR	5095404	Identifier	offset		5095291	0					
ANR	5095405	AdditiveExpression	Ii * s + l * s / 3		5095291	1		+			
ANR	5095406	MultiplicativeExpression	Ii * s		5095291	0		*			
ANR	5095407	Identifier	Ii		5095291	0					
ANR	5095408	Identifier	s		5095291	1					
ANR	5095409	MultiplicativeExpression	l * s / 3		5095291	1		*			
ANR	5095410	Identifier	l		5095291	0					
ANR	5095411	MultiplicativeExpression	s / 3		5095291	1		/			
ANR	5095412	Identifier	s		5095291	0					
ANR	5095413	PrimaryExpression	3		5095291	1					
ANR	5095414	Argument	pole_step		5095291	4					
ANR	5095415	Identifier	pole_step		5095291	0					
ANR	5095416	Argument	power		5095291	5					
ANR	5095417	Identifier	power		5095291	0					
ANR	5095418	Argument	bias		5095291	6					
ANR	5095419	Identifier	bias		5095291	0					
ANR	5095420	Argument	ii - 1		5095291	7					
ANR	5095421	AdditiveExpression	ii - 1		5095291	0		-			
ANR	5095422	Identifier	ii		5095291	0					
ANR	5095423	PrimaryExpression	1		5095291	1					
ANR	5095424	ReturnType	static inline void		5095291	1					
ANR	5095425	Identifier	interpolate_tensors		5095291	2					
ANR	5095426	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int offset , int pole_step , int power , int bias , int ii"		5095291	3					
ANR	5095427	Parameter	const gs_function_Sd_t * pfn	602:20:19616:19642	5095291	0	True				
ANR	5095428	ParameterType	const gs_function_Sd_t *		5095291	0					
ANR	5095429	Identifier	pfn		5095291	1					
ANR	5095430	Parameter	int * I	602:49:19645:19650	5095291	1	True				
ANR	5095431	ParameterType	int *		5095291	0					
ANR	5095432	Identifier	I		5095291	1					
ANR	5095433	Parameter	double * T	602:57:19653:19661	5095291	2	True				
ANR	5095434	ParameterType	double *		5095291	0					
ANR	5095435	Identifier	T		5095291	1					
ANR	5095436	Parameter	int offset	603:8:19672:19681	5095291	3	True				
ANR	5095437	ParameterType	int		5095291	0					
ANR	5095438	Identifier	offset		5095291	1					
ANR	5095439	Parameter	int pole_step	603:20:19684:19696	5095291	4	True				
ANR	5095440	ParameterType	int		5095291	0					
ANR	5095441	Identifier	pole_step		5095291	1					
ANR	5095442	Parameter	int power	603:35:19699:19707	5095291	5	True				
ANR	5095443	ParameterType	int		5095291	0					
ANR	5095444	Identifier	power		5095291	1					
ANR	5095445	Parameter	int bias	603:46:19710:19717	5095291	6	True				
ANR	5095446	ParameterType	int		5095291	0					
ANR	5095447	Identifier	bias		5095291	1					
ANR	5095448	Parameter	int ii	603:56:19720:19725	5095291	7	True				
ANR	5095449	ParameterType	int		5095291	0					
ANR	5095450	Identifier	ii		5095291	1					
ANR	5095451	CFGEntryNode	ENTRY		5095291		True				
ANR	5095452	CFGExitNode	EXIT		5095291		True				
ANR	5095453	Symbol	ii		5095291						
ANR	5095454	Symbol	* pfn -> params . array_step		5095291						
ANR	5095455	Symbol	Ii		5095291						
ANR	5095456	Symbol	* pfn		5095291						
ANR	5095457	Symbol	offset		5095291						
ANR	5095458	Symbol	* ii		5095291						
ANR	5095459	Symbol	I		5095291						
ANR	5095460	Symbol	* * pfn		5095291						
ANR	5095461	Symbol	l		5095291						
ANR	5095462	Symbol	pole_step		5095291						
ANR	5095463	Symbol	s		5095291						
ANR	5095464	Symbol	* I		5095291						
ANR	5095465	Symbol	T		5095291						
ANR	5095466	Symbol	bias		5095291						
ANR	5095467	Symbol	pfn -> params . array_step		5095291						
ANR	5095468	Symbol	pfn		5095291						
ANR	5095469	Symbol	power		5095291						
ANR	5095470	Symbol	pfn -> params		5095291						
ANR	5095471	Symbol	* pfn -> params		5095291						
ANR	5095472	Symbol	* T		5095291						
ANR	5095473	Function	is_tensor_done	622:0:20211:20633							
ANR	5095474	FunctionDef	"is_tensor_done (const gs_function_Sd_t * pfn , int * I , double * T , int a_offset , int ii)"		5095473	0					
ANR	5095475	CompoundStatement		624:0:20315:20633	5095473	0					
ANR	5095476	IdentifierDeclStatement	"int i , o = 0 ;"	626:4:20364:20376	5095473	0	True				
ANR	5095477	IdentifierDecl	i		5095473	0					
ANR	5095478	IdentifierDeclType	int		5095473	0					
ANR	5095479	Identifier	i		5095473	1					
ANR	5095480	IdentifierDecl	o = 0		5095473	1					
ANR	5095481	IdentifierDeclType	int		5095473	0					
ANR	5095482	Identifier	o		5095473	1					
ANR	5095483	AssignmentExpression	o = 0		5095473	2		=			
ANR	5095484	Identifier	o		5095473	0					
ANR	5095485	PrimaryExpression	0		5095473	1					
ANR	5095486	ForStatement	for ( i = ii ; i >= 0 ; i -- )		5095473	1					
ANR	5095487	ForInit	i = ii ;	628:9:20388:20394	5095473	0	True				
ANR	5095488	AssignmentExpression	i = ii		5095473	0		=			
ANR	5095489	Identifier	i		5095473	0					
ANR	5095490	Identifier	ii		5095473	1					
ANR	5095491	Condition	i >= 0	628:17:20396:20401	5095473	1	True				
ANR	5095492	RelationalExpression	i >= 0		5095473	0		>=			
ANR	5095493	Identifier	i		5095473	0					
ANR	5095494	PrimaryExpression	0		5095473	1					
ANR	5095495	PostIncDecOperationExpression	i --	628:25:20404:20406	5095473	2	True				
ANR	5095496	Identifier	i		5095473	0					
ANR	5095497	IncDec	--		5095473	1					
ANR	5095498	CompoundStatement		5:30:93:93	5095473	3					
ANR	5095499	ExpressionStatement	o += I [ i ] * pfn -> params . array_step [ i ]	629:8:20419:20456	5095473	0	True				
ANR	5095500	AssignmentExpression	o += I [ i ] * pfn -> params . array_step [ i ]		5095473	0		+=			
ANR	5095501	Identifier	o		5095473	0					
ANR	5095502	MultiplicativeExpression	I [ i ] * pfn -> params . array_step [ i ]		5095473	1		*			
ANR	5095503	ArrayIndexing	I [ i ]		5095473	0					
ANR	5095504	Identifier	I		5095473	0					
ANR	5095505	Identifier	i		5095473	1					
ANR	5095506	ArrayIndexing	pfn -> params . array_step [ i ]		5095473	1					
ANR	5095507	MemberAccess	pfn -> params . array_step		5095473	0					
ANR	5095508	PtrMemberAccess	pfn -> params		5095473	0					
ANR	5095509	Identifier	pfn		5095473	0					
ANR	5095510	Identifier	params		5095473	1					
ANR	5095511	Identifier	array_step		5095473	1					
ANR	5095512	Identifier	i		5095473	1					
ANR	5095513	IfStatement	if ( T [ i ] != 0 )		5095473	1					
ANR	5095514	Condition	T [ i ] != 0	630:12:20470:20478	5095473	0	True				
ANR	5095515	EqualityExpression	T [ i ] != 0		5095473	0		!=			
ANR	5095516	ArrayIndexing	T [ i ]		5095473	0					
ANR	5095517	Identifier	T		5095473	0					
ANR	5095518	Identifier	i		5095473	1					
ANR	5095519	PrimaryExpression	0		5095473	1					
ANR	5095520	ExpressionStatement	o += pfn -> params . array_step [ i ] / 3	631:12:20493:20527	5095473	1	True				
ANR	5095521	AssignmentExpression	o += pfn -> params . array_step [ i ] / 3		5095473	0		+=			
ANR	5095522	Identifier	o		5095473	0					
ANR	5095523	MultiplicativeExpression	pfn -> params . array_step [ i ] / 3		5095473	1		/			
ANR	5095524	ArrayIndexing	pfn -> params . array_step [ i ]		5095473	0					
ANR	5095525	MemberAccess	pfn -> params . array_step		5095473	0					
ANR	5095526	PtrMemberAccess	pfn -> params		5095473	0					
ANR	5095527	Identifier	pfn		5095473	0					
ANR	5095528	Identifier	params		5095473	1					
ANR	5095529	Identifier	array_step		5095473	1					
ANR	5095530	Identifier	i		5095473	1					
ANR	5095531	PrimaryExpression	3		5095473	1					
ANR	5095532	IfStatement	if ( * ( pfn -> params . pole + a_offset + o ) != double_stub )		5095473	2					
ANR	5095533	Condition	* ( pfn -> params . pole + a_offset + o ) != double_stub	633:8:20543:20591	5095473	0	True				
ANR	5095534	EqualityExpression	* ( pfn -> params . pole + a_offset + o ) != double_stub		5095473	0		!=			
ANR	5095535	UnaryOperationExpression	* ( pfn -> params . pole + a_offset + o )		5095473	0					
ANR	5095536	UnaryOperator	*		5095473	0					
ANR	5095537	AdditiveExpression	pfn -> params . pole + a_offset + o		5095473	1		+			
ANR	5095538	MemberAccess	pfn -> params . pole		5095473	0					
ANR	5095539	PtrMemberAccess	pfn -> params		5095473	0					
ANR	5095540	Identifier	pfn		5095473	0					
ANR	5095541	Identifier	params		5095473	1					
ANR	5095542	Identifier	pole		5095473	1					
ANR	5095543	AdditiveExpression	a_offset + o		5095473	1		+			
ANR	5095544	Identifier	a_offset		5095473	0					
ANR	5095545	Identifier	o		5095473	1					
ANR	5095546	Identifier	double_stub		5095473	1					
ANR	5095547	ReturnStatement	return true ;	634:8:20602:20613	5095473	1	True				
ANR	5095548	Identifier	true		5095473	0					
ANR	5095549	ReturnStatement	return false ;	635:4:20619:20631	5095473	3	True				
ANR	5095550	Identifier	false		5095473	0					
ANR	5095551	ReturnType	static inline bool		5095473	1					
ANR	5095552	Identifier	is_tensor_done		5095473	2					
ANR	5095553	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int a_offset , int ii"		5095473	3					
ANR	5095554	Parameter	const gs_function_Sd_t * pfn	623:15:20245:20271	5095473	0	True				
ANR	5095555	ParameterType	const gs_function_Sd_t *		5095473	0					
ANR	5095556	Identifier	pfn		5095473	1					
ANR	5095557	Parameter	int * I	623:44:20274:20279	5095473	1	True				
ANR	5095558	ParameterType	int *		5095473	0					
ANR	5095559	Identifier	I		5095473	1					
ANR	5095560	Parameter	double * T	623:52:20282:20290	5095473	2	True				
ANR	5095561	ParameterType	double *		5095473	0					
ANR	5095562	Identifier	T		5095473	1					
ANR	5095563	Parameter	int a_offset	623:63:20293:20304	5095473	3	True				
ANR	5095564	ParameterType	int		5095473	0					
ANR	5095565	Identifier	a_offset		5095473	1					
ANR	5095566	Parameter	int ii	623:77:20307:20312	5095473	4	True				
ANR	5095567	ParameterType	int		5095473	0					
ANR	5095568	Identifier	ii		5095473	1					
ANR	5095569	CFGEntryNode	ENTRY		5095473		True				
ANR	5095570	CFGExitNode	EXIT		5095473		True				
ANR	5095571	Symbol	ii		5095473						
ANR	5095572	Symbol	* pfn -> params . array_step		5095473						
ANR	5095573	Symbol	* pfn		5095473						
ANR	5095574	Symbol	a_offset		5095473						
ANR	5095575	Symbol	false		5095473						
ANR	5095576	Symbol	I		5095473						
ANR	5095577	Symbol	i		5095473						
ANR	5095578	Symbol	* * pfn		5095473						
ANR	5095579	Symbol	o		5095473						
ANR	5095580	Symbol	pfn -> params . pole		5095473						
ANR	5095581	Symbol	double_stub		5095473						
ANR	5095582	Symbol	* pfn -> params . pole		5095473						
ANR	5095583	Symbol	* i		5095473						
ANR	5095584	Symbol	* I		5095473						
ANR	5095585	Symbol	T		5095473						
ANR	5095586	Symbol	* a_offset		5095473						
ANR	5095587	Symbol	pfn -> params . array_step		5095473						
ANR	5095588	Symbol	* ( pfn -> params . pole + a_offset + o )		5095473						
ANR	5095589	Symbol	true		5095473						
ANR	5095590	Symbol	pfn		5095473						
ANR	5095591	Symbol	* o		5095473						
ANR	5095592	Symbol	pfn -> params		5095473						
ANR	5095593	Symbol	* pfn -> params		5095473						
ANR	5095594	Symbol	* T		5095473						
ANR	5095595	Function	make_interpolation_tensor	639:0:20705:24283							
ANR	5095596	FunctionDef	"make_interpolation_tensor (const gs_function_Sd_t * pfn , int * I , double * T , int a_offset , int s_offset , int ii)"		5095595	0					
ANR	5095597	CompoundStatement		642:0:20861:24283	5095595	0					
ANR	5095598	IdentifierDeclStatement	int code ;	693:4:23343:23351	5095595	0	True				
ANR	5095599	IdentifierDecl	code		5095595	0					
ANR	5095600	IdentifierDeclType	int		5095595	0					
ANR	5095601	Identifier	code		5095595	1					
ANR	5095602	IfStatement	if ( ii < 0 )		5095595	1					
ANR	5095603	Condition	ii < 0	695:8:23362:23367	5095595	0	True				
ANR	5095604	RelationalExpression	ii < 0		5095595	0		<			
ANR	5095605	Identifier	ii		5095595	0					
ANR	5095606	PrimaryExpression	0		5095595	1					
ANR	5095607	CompoundStatement		54:16:2508:2508	5095595	1					
ANR	5095608	IfStatement	if ( POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub )		5095595	0					
ANR	5095609	Condition	POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub	696:12:23384:23449	5095595	0	True				
ANR	5095610	OrExpression	POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub		5095595	0		||			
ANR	5095611	Identifier	POLE_CACHE_IGNORE		5095595	0					
ANR	5095612	EqualityExpression	* ( pfn -> params . pole + a_offset ) == double_stub		5095595	1		==			
ANR	5095613	UnaryOperationExpression	* ( pfn -> params . pole + a_offset )		5095595	0					
ANR	5095614	UnaryOperator	*		5095595	0					
ANR	5095615	AdditiveExpression	pfn -> params . pole + a_offset		5095595	1		+			
ANR	5095616	MemberAccess	pfn -> params . pole		5095595	0					
ANR	5095617	PtrMemberAccess	pfn -> params		5095595	0					
ANR	5095618	Identifier	pfn		5095595	0					
ANR	5095619	Identifier	params		5095595	1					
ANR	5095620	Identifier	pole		5095595	1					
ANR	5095621	Identifier	a_offset		5095595	1					
ANR	5095622	Identifier	double_stub		5095595	1					
ANR	5095623	CompoundStatement		55:80:2590:2590	5095595	1					
ANR	5095624	ExpressionStatement	"code = load_vector ( pfn , a_offset , s_offset )"	697:12:23466:23509	5095595	0	True				
ANR	5095625	AssignmentExpression	"code = load_vector ( pfn , a_offset , s_offset )"		5095595	0		=			
ANR	5095626	Identifier	code		5095595	0					
ANR	5095627	CallExpression	"load_vector ( pfn , a_offset , s_offset )"		5095595	1					
ANR	5095628	Callee	load_vector		5095595	0					
ANR	5095629	Identifier	load_vector		5095595	0					
ANR	5095630	ArgumentList	pfn		5095595	1					
ANR	5095631	Argument	pfn		5095595	0					
ANR	5095632	Identifier	pfn		5095595	0					
ANR	5095633	Argument	a_offset		5095595	1					
ANR	5095634	Identifier	a_offset		5095595	0					
ANR	5095635	Argument	s_offset		5095595	2					
ANR	5095636	Identifier	s_offset		5095595	0					
ANR	5095637	IfStatement	if ( code < 0 )		5095595	1					
ANR	5095638	Condition	code < 0	698:16:23527:23534	5095595	0	True				
ANR	5095639	RelationalExpression	code < 0		5095595	0		<			
ANR	5095640	Identifier	code		5095595	0					
ANR	5095641	PrimaryExpression	0		5095595	1					
ANR	5095642	ReturnStatement	return code ;	699:16:23553:23564	5095595	1	True				
ANR	5095643	Identifier	code		5095595	0					
ANR	5095644	ElseStatement	else		5095595	0					
ANR	5095645	CompoundStatement		63:8:2807:2843	5095595	0					
ANR	5095646	IdentifierDeclStatement	"int Ii , ib , ie , i ;"	702:8:23597:23614	5095595	0	True				
ANR	5095647	IdentifierDecl	Ii		5095595	0					
ANR	5095648	IdentifierDeclType	int		5095595	0					
ANR	5095649	Identifier	Ii		5095595	1					
ANR	5095650	IdentifierDecl	ib		5095595	1					
ANR	5095651	IdentifierDeclType	int		5095595	0					
ANR	5095652	Identifier	ib		5095595	1					
ANR	5095653	IdentifierDecl	ie		5095595	2					
ANR	5095654	IdentifierDeclType	int		5095595	0					
ANR	5095655	Identifier	ie		5095595	1					
ANR	5095656	IdentifierDecl	i		5095595	3					
ANR	5095657	IdentifierDeclType	int		5095595	0					
ANR	5095658	Identifier	i		5095595	1					
ANR	5095659	IdentifierDeclStatement	int sa = pfn -> params . array_step [ ii ] ;	703:8:23624:23659	5095595	1	True				
ANR	5095660	IdentifierDecl	sa = pfn -> params . array_step [ ii ]		5095595	0					
ANR	5095661	IdentifierDeclType	int		5095595	0					
ANR	5095662	Identifier	sa		5095595	1					
ANR	5095663	AssignmentExpression	sa = pfn -> params . array_step [ ii ]		5095595	2		=			
ANR	5095664	Identifier	sa		5095595	0					
ANR	5095665	ArrayIndexing	pfn -> params . array_step [ ii ]		5095595	1					
ANR	5095666	MemberAccess	pfn -> params . array_step		5095595	0					
ANR	5095667	PtrMemberAccess	pfn -> params		5095595	0					
ANR	5095668	Identifier	pfn		5095595	0					
ANR	5095669	Identifier	params		5095595	1					
ANR	5095670	Identifier	array_step		5095595	1					
ANR	5095671	Identifier	ii		5095595	1					
ANR	5095672	IdentifierDeclStatement	int ss = pfn -> params . stream_step [ ii ] ;	704:8:23669:23705	5095595	2	True				
ANR	5095673	IdentifierDecl	ss = pfn -> params . stream_step [ ii ]		5095595	0					
ANR	5095674	IdentifierDeclType	int		5095595	0					
ANR	5095675	Identifier	ss		5095595	1					
ANR	5095676	AssignmentExpression	ss = pfn -> params . stream_step [ ii ]		5095595	2		=			
ANR	5095677	Identifier	ss		5095595	0					
ANR	5095678	ArrayIndexing	pfn -> params . stream_step [ ii ]		5095595	1					
ANR	5095679	MemberAccess	pfn -> params . stream_step		5095595	0					
ANR	5095680	PtrMemberAccess	pfn -> params		5095595	0					
ANR	5095681	Identifier	pfn		5095595	0					
ANR	5095682	Identifier	params		5095595	1					
ANR	5095683	Identifier	stream_step		5095595	1					
ANR	5095684	Identifier	ii		5095595	1					
ANR	5095685	ExpressionStatement	"index_span ( pfn , I , T , ii , & Ii , & ib , & ie )"	706:8:23716:23756	5095595	3	True				
ANR	5095686	CallExpression	"index_span ( pfn , I , T , ii , & Ii , & ib , & ie )"		5095595	0					
ANR	5095687	Callee	index_span		5095595	0					
ANR	5095688	Identifier	index_span		5095595	0					
ANR	5095689	ArgumentList	pfn		5095595	1					
ANR	5095690	Argument	pfn		5095595	0					
ANR	5095691	Identifier	pfn		5095595	0					
ANR	5095692	Argument	I		5095595	1					
ANR	5095693	Identifier	I		5095595	0					
ANR	5095694	Argument	T		5095595	2					
ANR	5095695	Identifier	T		5095595	0					
ANR	5095696	Argument	ii		5095595	3					
ANR	5095697	Identifier	ii		5095595	0					
ANR	5095698	Argument	& Ii		5095595	4					
ANR	5095699	UnaryOperationExpression	& Ii		5095595	0					
ANR	5095700	UnaryOperator	&		5095595	0					
ANR	5095701	Identifier	Ii		5095595	1					
ANR	5095702	Argument	& ib		5095595	5					
ANR	5095703	UnaryOperationExpression	& ib		5095595	0					
ANR	5095704	UnaryOperator	&		5095595	0					
ANR	5095705	Identifier	ib		5095595	1					
ANR	5095706	Argument	& ie		5095595	6					
ANR	5095707	UnaryOperationExpression	& ie		5095595	0					
ANR	5095708	UnaryOperator	&		5095595	0					
ANR	5095709	Identifier	ie		5095595	1					
ANR	5095710	IfStatement	"if ( POLE_CACHE_IGNORE || ! is_tensor_done ( pfn , I , T , a_offset , ii ) )"		5095595	4					
ANR	5095711	Condition	"POLE_CACHE_IGNORE || ! is_tensor_done ( pfn , I , T , a_offset , ii )"	707:12:23770:23830	5095595	0	True				
ANR	5095712	OrExpression	"POLE_CACHE_IGNORE || ! is_tensor_done ( pfn , I , T , a_offset , ii )"		5095595	0		||			
ANR	5095713	Identifier	POLE_CACHE_IGNORE		5095595	0					
ANR	5095714	UnaryOperationExpression	"! is_tensor_done ( pfn , I , T , a_offset , ii )"		5095595	1					
ANR	5095715	UnaryOperator	!		5095595	0					
ANR	5095716	CallExpression	"is_tensor_done ( pfn , I , T , a_offset , ii )"		5095595	1					
ANR	5095717	Callee	is_tensor_done		5095595	0					
ANR	5095718	Identifier	is_tensor_done		5095595	0					
ANR	5095719	ArgumentList	pfn		5095595	1					
ANR	5095720	Argument	pfn		5095595	0					
ANR	5095721	Identifier	pfn		5095595	0					
ANR	5095722	Argument	I		5095595	1					
ANR	5095723	Identifier	I		5095595	0					
ANR	5095724	Argument	T		5095595	2					
ANR	5095725	Identifier	T		5095595	0					
ANR	5095726	Argument	a_offset		5095595	3					
ANR	5095727	Identifier	a_offset		5095595	0					
ANR	5095728	Argument	ii		5095595	4					
ANR	5095729	Identifier	ii		5095595	0					
ANR	5095730	CompoundStatement		66:75:2971:2971	5095595	1					
ANR	5095731	ForStatement	for ( i = ib ; i < ie ; i ++ )		5095595	0					
ANR	5095732	ForInit	i = ib ;	708:17:23852:23858	5095595	0	True				
ANR	5095733	AssignmentExpression	i = ib		5095595	0		=			
ANR	5095734	Identifier	i		5095595	0					
ANR	5095735	Identifier	ib		5095595	1					
ANR	5095736	Condition	i < ie	708:25:23860:23865	5095595	1	True				
ANR	5095737	RelationalExpression	i < ie		5095595	0		<			
ANR	5095738	Identifier	i		5095595	0					
ANR	5095739	Identifier	ie		5095595	1					
ANR	5095740	PostIncDecOperationExpression	i ++	708:33:23868:23870	5095595	2	True				
ANR	5095741	Identifier	i		5095595	0					
ANR	5095742	IncDec	++		5095595	1					
ANR	5095743	CompoundStatement		67:38:3011:3011	5095595	3					
ANR	5095744	ExpressionStatement	"code = make_interpolation_tensor ( pfn , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"	709:16:23891:24012	5095595	0	True				
ANR	5095745	AssignmentExpression	"code = make_interpolation_tensor ( pfn , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"		5095595	0		=			
ANR	5095746	Identifier	code		5095595	0					
ANR	5095747	CallExpression	"make_interpolation_tensor ( pfn , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"		5095595	1					
ANR	5095748	Callee	make_interpolation_tensor		5095595	0					
ANR	5095749	Identifier	make_interpolation_tensor		5095595	0					
ANR	5095750	ArgumentList	pfn		5095595	1					
ANR	5095751	Argument	pfn		5095595	0					
ANR	5095752	Identifier	pfn		5095595	0					
ANR	5095753	Argument	I		5095595	1					
ANR	5095754	Identifier	I		5095595	0					
ANR	5095755	Argument	T		5095595	2					
ANR	5095756	Identifier	T		5095595	0					
ANR	5095757	Argument	a_offset + i * sa		5095595	3					
ANR	5095758	AdditiveExpression	a_offset + i * sa		5095595	0		+			
ANR	5095759	Identifier	a_offset		5095595	0					
ANR	5095760	MultiplicativeExpression	i * sa		5095595	1		*			
ANR	5095761	Identifier	i		5095595	0					
ANR	5095762	Identifier	sa		5095595	1					
ANR	5095763	Argument	s_offset + i * ss		5095595	4					
ANR	5095764	AdditiveExpression	s_offset + i * ss		5095595	0		+			
ANR	5095765	Identifier	s_offset		5095595	0					
ANR	5095766	MultiplicativeExpression	i * ss		5095595	1		*			
ANR	5095767	Identifier	i		5095595	0					
ANR	5095768	Identifier	ss		5095595	1					
ANR	5095769	Argument	ii - 1		5095595	5					
ANR	5095770	AdditiveExpression	ii - 1		5095595	0		-			
ANR	5095771	Identifier	ii		5095595	0					
ANR	5095772	PrimaryExpression	1		5095595	1					
ANR	5095773	IfStatement	if ( code < 0 )		5095595	1					
ANR	5095774	Condition	code < 0	711:20:24034:24041	5095595	0	True				
ANR	5095775	RelationalExpression	code < 0		5095595	0		<			
ANR	5095776	Identifier	code		5095595	0					
ANR	5095777	PrimaryExpression	0		5095595	1					
ANR	5095778	ReturnStatement	return code ;	712:20:24064:24075	5095595	1	True				
ANR	5095779	Identifier	code		5095595	0					
ANR	5095780	IfStatement	if ( T [ ii ] != 0 )		5095595	1					
ANR	5095781	Condition	T [ ii ] != 0	714:16:24107:24116	5095595	0	True				
ANR	5095782	EqualityExpression	T [ ii ] != 0		5095595	0		!=			
ANR	5095783	ArrayIndexing	T [ ii ]		5095595	0					
ANR	5095784	Identifier	T		5095595	0					
ANR	5095785	Identifier	ii		5095595	1					
ANR	5095786	PrimaryExpression	0		5095595	1					
ANR	5095787	ExpressionStatement	"interpolate_tensors ( pfn , I , T , a_offset + ib * sa , sa , ie - ib - 1 , Ii - ib , ii - 1 )"	715:16:24135:24251	5095595	1	True				
ANR	5095788	CallExpression	"interpolate_tensors ( pfn , I , T , a_offset + ib * sa , sa , ie - ib - 1 , Ii - ib , ii - 1 )"		5095595	0					
ANR	5095789	Callee	interpolate_tensors		5095595	0					
ANR	5095790	Identifier	interpolate_tensors		5095595	0					
ANR	5095791	ArgumentList	pfn		5095595	1					
ANR	5095792	Argument	pfn		5095595	0					
ANR	5095793	Identifier	pfn		5095595	0					
ANR	5095794	Argument	I		5095595	1					
ANR	5095795	Identifier	I		5095595	0					
ANR	5095796	Argument	T		5095595	2					
ANR	5095797	Identifier	T		5095595	0					
ANR	5095798	Argument	a_offset + ib * sa		5095595	3					
ANR	5095799	AdditiveExpression	a_offset + ib * sa		5095595	0		+			
ANR	5095800	Identifier	a_offset		5095595	0					
ANR	5095801	MultiplicativeExpression	ib * sa		5095595	1		*			
ANR	5095802	Identifier	ib		5095595	0					
ANR	5095803	Identifier	sa		5095595	1					
ANR	5095804	Argument	sa		5095595	4					
ANR	5095805	Identifier	sa		5095595	0					
ANR	5095806	Argument	ie - ib - 1		5095595	5					
ANR	5095807	AdditiveExpression	ie - ib - 1		5095595	0		-			
ANR	5095808	Identifier	ie		5095595	0					
ANR	5095809	AdditiveExpression	ib - 1		5095595	1		-			
ANR	5095810	Identifier	ib		5095595	0					
ANR	5095811	PrimaryExpression	1		5095595	1					
ANR	5095812	Argument	Ii - ib		5095595	6					
ANR	5095813	AdditiveExpression	Ii - ib		5095595	0		-			
ANR	5095814	Identifier	Ii		5095595	0					
ANR	5095815	Identifier	ib		5095595	1					
ANR	5095816	Argument	ii - 1		5095595	7					
ANR	5095817	AdditiveExpression	ii - 1		5095595	0		-			
ANR	5095818	Identifier	ii		5095595	0					
ANR	5095819	PrimaryExpression	1		5095595	1					
ANR	5095820	ReturnStatement	return 0 ;	719:4:24273:24281	5095595	2	True				
ANR	5095821	PrimaryExpression	0		5095595	0					
ANR	5095822	ReturnType	static inline int		5095595	1					
ANR	5095823	Identifier	make_interpolation_tensor		5095595	2					
ANR	5095824	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int a_offset , int s_offset , int ii"		5095595	3					
ANR	5095825	Parameter	const gs_function_Sd_t * pfn	640:26:20749:20775	5095595	0	True				
ANR	5095826	ParameterType	const gs_function_Sd_t *		5095595	0					
ANR	5095827	Identifier	pfn		5095595	1					
ANR	5095828	Parameter	int * I	640:55:20778:20783	5095595	1	True				
ANR	5095829	ParameterType	int *		5095595	0					
ANR	5095830	Identifier	I		5095595	1					
ANR	5095831	Parameter	double * T	640:63:20786:20794	5095595	2	True				
ANR	5095832	ParameterType	double *		5095595	0					
ANR	5095833	Identifier	T		5095595	1					
ANR	5095834	Parameter	int a_offset	641:28:20825:20836	5095595	3	True				
ANR	5095835	ParameterType	int		5095595	0					
ANR	5095836	Identifier	a_offset		5095595	1					
ANR	5095837	Parameter	int s_offset	641:42:20839:20850	5095595	4	True				
ANR	5095838	ParameterType	int		5095595	0					
ANR	5095839	Identifier	s_offset		5095595	1					
ANR	5095840	Parameter	int ii	641:56:20853:20858	5095595	5	True				
ANR	5095841	ParameterType	int		5095595	0					
ANR	5095842	Identifier	ii		5095595	1					
ANR	5095843	CFGEntryNode	ENTRY		5095595		True				
ANR	5095844	CFGExitNode	EXIT		5095595		True				
ANR	5095845	Symbol	Ii		5095595						
ANR	5095846	Symbol	& ib		5095595						
ANR	5095847	Symbol	code		5095595						
ANR	5095848	Symbol	* ii		5095595						
ANR	5095849	Symbol	& ie		5095595						
ANR	5095850	Symbol	a_offset		5095595						
ANR	5095851	Symbol	I		5095595						
ANR	5095852	Symbol	* * pfn		5095595						
ANR	5095853	Symbol	sa		5095595						
ANR	5095854	Symbol	double_stub		5095595						
ANR	5095855	Symbol	pfn -> params . pole		5095595						
ANR	5095856	Symbol	s_offset		5095595						
ANR	5095857	Symbol	T		5095595						
ANR	5095858	Symbol	pfn -> params . stream_step		5095595						
ANR	5095859	Symbol	pfn -> params . array_step		5095595						
ANR	5095860	Symbol	* ( pfn -> params . pole + a_offset )		5095595						
ANR	5095861	Symbol	ib		5095595						
ANR	5095862	Symbol	POLE_CACHE_IGNORE		5095595						
ANR	5095863	Symbol	ie		5095595						
ANR	5095864	Symbol	* pfn -> params . stream_step		5095595						
ANR	5095865	Symbol	* T		5095595						
ANR	5095866	Symbol	ii		5095595						
ANR	5095867	Symbol	* pfn -> params . array_step		5095595						
ANR	5095868	Symbol	ss		5095595						
ANR	5095869	Symbol	make_interpolation_tensor		5095595						
ANR	5095870	Symbol	* pfn		5095595						
ANR	5095871	Symbol	i		5095595						
ANR	5095872	Symbol	& Ii		5095595						
ANR	5095873	Symbol	* pfn -> params . pole		5095595						
ANR	5095874	Symbol	* a_offset		5095595						
ANR	5095875	Symbol	pfn		5095595						
ANR	5095876	Symbol	load_vector		5095595						
ANR	5095877	Symbol	is_tensor_done		5095595						
ANR	5095878	Symbol	pfn -> params		5095595						
ANR	5095879	Symbol	* pfn -> params		5095595						
ANR	5095880	Function	make_interpolation_nodes	723:0:24323:25706							
ANR	5095881	FunctionDef	"make_interpolation_nodes (const gs_function_Sd_t * pfn , double * T0 , double * T1 , int * I , double * T , int a_offset , int s_offset , int ii)"		5095880	0					
ANR	5095882	CompoundStatement		727:0:24530:25706	5095880	0					
ANR	5095883	IdentifierDeclStatement	int code ;	728:4:24536:24544	5095880	0	True				
ANR	5095884	IdentifierDecl	code		5095880	0					
ANR	5095885	IdentifierDeclType	int		5095880	0					
ANR	5095886	Identifier	code		5095880	1					
ANR	5095887	IfStatement	if ( ii < 0 )		5095880	1					
ANR	5095888	Condition	ii < 0	730:8:24555:24560	5095880	0	True				
ANR	5095889	RelationalExpression	ii < 0		5095880	0		<			
ANR	5095890	Identifier	ii		5095880	0					
ANR	5095891	PrimaryExpression	0		5095880	1					
ANR	5095892	CompoundStatement		4:16:32:32	5095880	1					
ANR	5095893	IfStatement	if ( POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub )		5095880	0					
ANR	5095894	Condition	POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub	731:12:24577:24642	5095880	0	True				
ANR	5095895	OrExpression	POLE_CACHE_IGNORE || * ( pfn -> params . pole + a_offset ) == double_stub		5095880	0		||			
ANR	5095896	Identifier	POLE_CACHE_IGNORE		5095880	0					
ANR	5095897	EqualityExpression	* ( pfn -> params . pole + a_offset ) == double_stub		5095880	1		==			
ANR	5095898	UnaryOperationExpression	* ( pfn -> params . pole + a_offset )		5095880	0					
ANR	5095899	UnaryOperator	*		5095880	0					
ANR	5095900	AdditiveExpression	pfn -> params . pole + a_offset		5095880	1		+			
ANR	5095901	MemberAccess	pfn -> params . pole		5095880	0					
ANR	5095902	PtrMemberAccess	pfn -> params		5095880	0					
ANR	5095903	Identifier	pfn		5095880	0					
ANR	5095904	Identifier	params		5095880	1					
ANR	5095905	Identifier	pole		5095880	1					
ANR	5095906	Identifier	a_offset		5095880	1					
ANR	5095907	Identifier	double_stub		5095880	1					
ANR	5095908	CompoundStatement		5:80:114:114	5095880	1					
ANR	5095909	ExpressionStatement	"code = load_vector ( pfn , a_offset , s_offset )"	732:12:24659:24702	5095880	0	True				
ANR	5095910	AssignmentExpression	"code = load_vector ( pfn , a_offset , s_offset )"		5095880	0		=			
ANR	5095911	Identifier	code		5095880	0					
ANR	5095912	CallExpression	"load_vector ( pfn , a_offset , s_offset )"		5095880	1					
ANR	5095913	Callee	load_vector		5095880	0					
ANR	5095914	Identifier	load_vector		5095880	0					
ANR	5095915	ArgumentList	pfn		5095880	1					
ANR	5095916	Argument	pfn		5095880	0					
ANR	5095917	Identifier	pfn		5095880	0					
ANR	5095918	Argument	a_offset		5095880	1					
ANR	5095919	Identifier	a_offset		5095880	0					
ANR	5095920	Argument	s_offset		5095880	2					
ANR	5095921	Identifier	s_offset		5095880	0					
ANR	5095922	IfStatement	if ( code < 0 )		5095880	1					
ANR	5095923	Condition	code < 0	733:16:24720:24727	5095880	0	True				
ANR	5095924	RelationalExpression	code < 0		5095880	0		<			
ANR	5095925	Identifier	code		5095880	0					
ANR	5095926	PrimaryExpression	0		5095880	1					
ANR	5095927	ReturnStatement	return code ;	734:16:24746:24757	5095880	1	True				
ANR	5095928	Identifier	code		5095880	0					
ANR	5095929	IfStatement	if ( pfn -> params . Order == 3 )		5095880	1					
ANR	5095930	Condition	pfn -> params . Order == 3	736:12:24781:24802	5095880	0	True				
ANR	5095931	EqualityExpression	pfn -> params . Order == 3		5095880	0		==			
ANR	5095932	MemberAccess	pfn -> params . Order		5095880	0					
ANR	5095933	PtrMemberAccess	pfn -> params		5095880	0					
ANR	5095934	Identifier	pfn		5095880	0					
ANR	5095935	Identifier	params		5095880	1					
ANR	5095936	Identifier	Order		5095880	1					
ANR	5095937	PrimaryExpression	3		5095880	1					
ANR	5095938	CompoundStatement		10:36:274:274	5095880	1					
ANR	5095939	ExpressionStatement	"code = make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"	737:12:24819:24887	5095880	0	True				
ANR	5095940	AssignmentExpression	"code = make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"		5095880	0		=			
ANR	5095941	Identifier	code		5095880	0					
ANR	5095942	CallExpression	"make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"		5095880	1					
ANR	5095943	Callee	make_interpolation_tensor		5095880	0					
ANR	5095944	Identifier	make_interpolation_tensor		5095880	0					
ANR	5095945	ArgumentList	pfn		5095880	1					
ANR	5095946	Argument	pfn		5095880	0					
ANR	5095947	Identifier	pfn		5095880	0					
ANR	5095948	Argument	I		5095880	1					
ANR	5095949	Identifier	I		5095880	0					
ANR	5095950	Argument	T		5095880	2					
ANR	5095951	Identifier	T		5095880	0					
ANR	5095952	Argument	0		5095880	3					
ANR	5095953	PrimaryExpression	0		5095880	0					
ANR	5095954	Argument	0		5095880	4					
ANR	5095955	PrimaryExpression	0		5095880	0					
ANR	5095956	Argument	pfn -> params . m - 1		5095880	5					
ANR	5095957	AdditiveExpression	pfn -> params . m - 1		5095880	0		-			
ANR	5095958	MemberAccess	pfn -> params . m		5095880	0					
ANR	5095959	PtrMemberAccess	pfn -> params		5095880	0					
ANR	5095960	Identifier	pfn		5095880	0					
ANR	5095961	Identifier	params		5095880	1					
ANR	5095962	Identifier	m		5095880	1					
ANR	5095963	PrimaryExpression	1		5095880	1					
ANR	5095964	IfStatement	if ( code < 0 )		5095880	1					
ANR	5095965	Condition	code < 0	738:16:24905:24912	5095880	0	True				
ANR	5095966	RelationalExpression	code < 0		5095880	0		<			
ANR	5095967	Identifier	code		5095880	0					
ANR	5095968	PrimaryExpression	0		5095880	1					
ANR	5095969	ReturnStatement	return code ;	739:16:24931:24942	5095880	1	True				
ANR	5095970	Identifier	code		5095880	0					
ANR	5095971	ElseStatement	else		5095880	0					
ANR	5095972	CompoundStatement		20:8:577:613	5095880	0					
ANR	5095973	IdentifierDeclStatement	int i ;	742:8:24975:24980	5095880	0	True				
ANR	5095974	IdentifierDecl	i		5095880	0					
ANR	5095975	IdentifierDeclType	int		5095880	0					
ANR	5095976	Identifier	i		5095880	1					
ANR	5095977	IdentifierDeclStatement	int i0 = ( int ) floor ( T0 [ ii ] ) ;	743:8:24990:25017	5095880	1	True				
ANR	5095978	IdentifierDecl	i0 = ( int ) floor ( T0 [ ii ] )		5095880	0					
ANR	5095979	IdentifierDeclType	int		5095880	0					
ANR	5095980	Identifier	i0		5095880	1					
ANR	5095981	AssignmentExpression	i0 = ( int ) floor ( T0 [ ii ] )		5095880	2		=			
ANR	5095982	Identifier	i0		5095880	0					
ANR	5095983	CastExpression	( int ) floor ( T0 [ ii ] )		5095880	1					
ANR	5095984	CastTarget	int		5095880	0					
ANR	5095985	CallExpression	floor ( T0 [ ii ] )		5095880	1					
ANR	5095986	Callee	floor		5095880	0					
ANR	5095987	Identifier	floor		5095880	0					
ANR	5095988	ArgumentList	T0 [ ii ]		5095880	1					
ANR	5095989	Argument	T0 [ ii ]		5095880	0					
ANR	5095990	ArrayIndexing	T0 [ ii ]		5095880	0					
ANR	5095991	Identifier	T0		5095880	0					
ANR	5095992	Identifier	ii		5095880	1					
ANR	5095993	IdentifierDeclStatement	int i1 = ( int ) ceil ( T1 [ ii ] ) ;	744:8:25027:25053	5095880	2	True				
ANR	5095994	IdentifierDecl	i1 = ( int ) ceil ( T1 [ ii ] )		5095880	0					
ANR	5095995	IdentifierDeclType	int		5095880	0					
ANR	5095996	Identifier	i1		5095880	1					
ANR	5095997	AssignmentExpression	i1 = ( int ) ceil ( T1 [ ii ] )		5095880	2		=			
ANR	5095998	Identifier	i1		5095880	0					
ANR	5095999	CastExpression	( int ) ceil ( T1 [ ii ] )		5095880	1					
ANR	5096000	CastTarget	int		5095880	0					
ANR	5096001	CallExpression	ceil ( T1 [ ii ] )		5095880	1					
ANR	5096002	Callee	ceil		5095880	0					
ANR	5096003	Identifier	ceil		5095880	0					
ANR	5096004	ArgumentList	T1 [ ii ]		5095880	1					
ANR	5096005	Argument	T1 [ ii ]		5095880	0					
ANR	5096006	ArrayIndexing	T1 [ ii ]		5095880	0					
ANR	5096007	Identifier	T1		5095880	0					
ANR	5096008	Identifier	ii		5095880	1					
ANR	5096009	IdentifierDeclStatement	int sa = pfn -> params . array_step [ ii ] ;	745:8:25063:25098	5095880	3	True				
ANR	5096010	IdentifierDecl	sa = pfn -> params . array_step [ ii ]		5095880	0					
ANR	5096011	IdentifierDeclType	int		5095880	0					
ANR	5096012	Identifier	sa		5095880	1					
ANR	5096013	AssignmentExpression	sa = pfn -> params . array_step [ ii ]		5095880	2		=			
ANR	5096014	Identifier	sa		5095880	0					
ANR	5096015	ArrayIndexing	pfn -> params . array_step [ ii ]		5095880	1					
ANR	5096016	MemberAccess	pfn -> params . array_step		5095880	0					
ANR	5096017	PtrMemberAccess	pfn -> params		5095880	0					
ANR	5096018	Identifier	pfn		5095880	0					
ANR	5096019	Identifier	params		5095880	1					
ANR	5096020	Identifier	array_step		5095880	1					
ANR	5096021	Identifier	ii		5095880	1					
ANR	5096022	IdentifierDeclStatement	int ss = pfn -> params . stream_step [ ii ] ;	746:8:25108:25144	5095880	4	True				
ANR	5096023	IdentifierDecl	ss = pfn -> params . stream_step [ ii ]		5095880	0					
ANR	5096024	IdentifierDeclType	int		5095880	0					
ANR	5096025	Identifier	ss		5095880	1					
ANR	5096026	AssignmentExpression	ss = pfn -> params . stream_step [ ii ]		5095880	2		=			
ANR	5096027	Identifier	ss		5095880	0					
ANR	5096028	ArrayIndexing	pfn -> params . stream_step [ ii ]		5095880	1					
ANR	5096029	MemberAccess	pfn -> params . stream_step		5095880	0					
ANR	5096030	PtrMemberAccess	pfn -> params		5095880	0					
ANR	5096031	Identifier	pfn		5095880	0					
ANR	5096032	Identifier	params		5095880	1					
ANR	5096033	Identifier	stream_step		5095880	1					
ANR	5096034	Identifier	ii		5095880	1					
ANR	5096035	IfStatement	if ( i0 < 0 || i0 >= pfn -> params . Size [ ii ] )		5095880	5					
ANR	5096036	Condition	i0 < 0 || i0 >= pfn -> params . Size [ ii ]	748:12:25159:25194	5095880	0	True				
ANR	5096037	OrExpression	i0 < 0 || i0 >= pfn -> params . Size [ ii ]		5095880	0		||			
ANR	5096038	RelationalExpression	i0 < 0		5095880	0		<			
ANR	5096039	Identifier	i0		5095880	0					
ANR	5096040	PrimaryExpression	0		5095880	1					
ANR	5096041	RelationalExpression	i0 >= pfn -> params . Size [ ii ]		5095880	1		>=			
ANR	5096042	Identifier	i0		5095880	0					
ANR	5096043	ArrayIndexing	pfn -> params . Size [ ii ]		5095880	1					
ANR	5096044	MemberAccess	pfn -> params . Size		5095880	0					
ANR	5096045	PtrMemberAccess	pfn -> params		5095880	0					
ANR	5096046	Identifier	pfn		5095880	0					
ANR	5096047	Identifier	params		5095880	1					
ANR	5096048	Identifier	Size		5095880	1					
ANR	5096049	Identifier	ii		5095880	1					
ANR	5096050	ExpressionStatement	return_error ( gs_error_unregistered )	749:12:25209:25244	5095880	1	True				
ANR	5096051	CallExpression	return_error ( gs_error_unregistered )		5095880	0					
ANR	5096052	Callee	return_error		5095880	0					
ANR	5096053	Identifier	return_error		5095880	0					
ANR	5096054	ArgumentList	gs_error_unregistered		5095880	1					
ANR	5096055	Argument	gs_error_unregistered		5095880	0					
ANR	5096056	Identifier	gs_error_unregistered		5095880	0					
ANR	5096057	IfStatement	if ( i1 < 0 || i1 >= pfn -> params . Size [ ii ] )		5095880	6					
ANR	5096058	Condition	i1 < 0 || i1 >= pfn -> params . Size [ ii ]	750:12:25281:25316	5095880	0	True				
ANR	5096059	OrExpression	i1 < 0 || i1 >= pfn -> params . Size [ ii ]		5095880	0		||			
ANR	5096060	RelationalExpression	i1 < 0		5095880	0		<			
ANR	5096061	Identifier	i1		5095880	0					
ANR	5096062	PrimaryExpression	0		5095880	1					
ANR	5096063	RelationalExpression	i1 >= pfn -> params . Size [ ii ]		5095880	1		>=			
ANR	5096064	Identifier	i1		5095880	0					
ANR	5096065	ArrayIndexing	pfn -> params . Size [ ii ]		5095880	1					
ANR	5096066	MemberAccess	pfn -> params . Size		5095880	0					
ANR	5096067	PtrMemberAccess	pfn -> params		5095880	0					
ANR	5096068	Identifier	pfn		5095880	0					
ANR	5096069	Identifier	params		5095880	1					
ANR	5096070	Identifier	Size		5095880	1					
ANR	5096071	Identifier	ii		5095880	1					
ANR	5096072	ExpressionStatement	return_error ( gs_error_unregistered )	751:12:25331:25366	5095880	1	True				
ANR	5096073	CallExpression	return_error ( gs_error_unregistered )		5095880	0					
ANR	5096074	Callee	return_error		5095880	0					
ANR	5096075	Identifier	return_error		5095880	0					
ANR	5096076	ArgumentList	gs_error_unregistered		5095880	1					
ANR	5096077	Argument	gs_error_unregistered		5095880	0					
ANR	5096078	Identifier	gs_error_unregistered		5095880	0					
ANR	5096079	ExpressionStatement	I [ ii ] = i0	752:8:25399:25409	5095880	7	True				
ANR	5096080	AssignmentExpression	I [ ii ] = i0		5095880	0		=			
ANR	5096081	ArrayIndexing	I [ ii ]		5095880	0					
ANR	5096082	Identifier	I		5095880	0					
ANR	5096083	Identifier	ii		5095880	1					
ANR	5096084	Identifier	i0		5095880	1					
ANR	5096085	ExpressionStatement	T [ ii ] = ( i1 > i0 ? 1 : 0 )	753:8:25419:25444	5095880	8	True				
ANR	5096086	AssignmentExpression	T [ ii ] = ( i1 > i0 ? 1 : 0 )		5095880	0		=			
ANR	5096087	ArrayIndexing	T [ ii ]		5095880	0					
ANR	5096088	Identifier	T		5095880	0					
ANR	5096089	Identifier	ii		5095880	1					
ANR	5096090	ConditionalExpression	i1 > i0 ? 1 : 0		5095880	1					
ANR	5096091	Condition	i1 > i0		5095880	0					
ANR	5096092	RelationalExpression	i1 > i0		5095880	0		>			
ANR	5096093	Identifier	i1		5095880	0					
ANR	5096094	Identifier	i0		5095880	1					
ANR	5096095	PrimaryExpression	1		5095880	1					
ANR	5096096	PrimaryExpression	0		5095880	2					
ANR	5096097	ForStatement	for ( i = i0 ; i <= i1 ; i ++ )		5095880	9					
ANR	5096098	ForInit	i = i0 ;	754:13:25459:25465	5095880	0	True				
ANR	5096099	AssignmentExpression	i = i0		5095880	0		=			
ANR	5096100	Identifier	i		5095880	0					
ANR	5096101	Identifier	i0		5095880	1					
ANR	5096102	Condition	i <= i1	754:21:25467:25473	5095880	1	True				
ANR	5096103	RelationalExpression	i <= i1		5095880	0		<=			
ANR	5096104	Identifier	i		5095880	0					
ANR	5096105	Identifier	i1		5095880	1					
ANR	5096106	PostIncDecOperationExpression	i ++	754:30:25476:25478	5095880	2	True				
ANR	5096107	Identifier	i		5095880	0					
ANR	5096108	IncDec	++		5095880	1					
ANR	5096109	CompoundStatement		28:35:950:950	5095880	3					
ANR	5096110	ExpressionStatement	"code = make_interpolation_nodes ( pfn , T0 , T1 , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"	755:12:25495:25619	5095880	0	True				
ANR	5096111	AssignmentExpression	"code = make_interpolation_nodes ( pfn , T0 , T1 , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"		5095880	0		=			
ANR	5096112	Identifier	code		5095880	0					
ANR	5096113	CallExpression	"make_interpolation_nodes ( pfn , T0 , T1 , I , T , a_offset + i * sa , s_offset + i * ss , ii - 1 )"		5095880	1					
ANR	5096114	Callee	make_interpolation_nodes		5095880	0					
ANR	5096115	Identifier	make_interpolation_nodes		5095880	0					
ANR	5096116	ArgumentList	pfn		5095880	1					
ANR	5096117	Argument	pfn		5095880	0					
ANR	5096118	Identifier	pfn		5095880	0					
ANR	5096119	Argument	T0		5095880	1					
ANR	5096120	Identifier	T0		5095880	0					
ANR	5096121	Argument	T1		5095880	2					
ANR	5096122	Identifier	T1		5095880	0					
ANR	5096123	Argument	I		5095880	3					
ANR	5096124	Identifier	I		5095880	0					
ANR	5096125	Argument	T		5095880	4					
ANR	5096126	Identifier	T		5095880	0					
ANR	5096127	Argument	a_offset + i * sa		5095880	5					
ANR	5096128	AdditiveExpression	a_offset + i * sa		5095880	0		+			
ANR	5096129	Identifier	a_offset		5095880	0					
ANR	5096130	MultiplicativeExpression	i * sa		5095880	1		*			
ANR	5096131	Identifier	i		5095880	0					
ANR	5096132	Identifier	sa		5095880	1					
ANR	5096133	Argument	s_offset + i * ss		5095880	6					
ANR	5096134	AdditiveExpression	s_offset + i * ss		5095880	0		+			
ANR	5096135	Identifier	s_offset		5095880	0					
ANR	5096136	MultiplicativeExpression	i * ss		5095880	1		*			
ANR	5096137	Identifier	i		5095880	0					
ANR	5096138	Identifier	ss		5095880	1					
ANR	5096139	Argument	ii - 1		5095880	7					
ANR	5096140	AdditiveExpression	ii - 1		5095880	0		-			
ANR	5096141	Identifier	ii		5095880	0					
ANR	5096142	PrimaryExpression	1		5095880	1					
ANR	5096143	IfStatement	if ( code < 0 )		5095880	1					
ANR	5096144	Condition	code < 0	757:16:25637:25644	5095880	0	True				
ANR	5096145	RelationalExpression	code < 0		5095880	0		<			
ANR	5096146	Identifier	code		5095880	0					
ANR	5096147	PrimaryExpression	0		5095880	1					
ANR	5096148	ReturnStatement	return code ;	758:16:25663:25674	5095880	1	True				
ANR	5096149	Identifier	code		5095880	0					
ANR	5096150	ReturnStatement	return 0 ;	761:4:25696:25704	5095880	2	True				
ANR	5096151	PrimaryExpression	0		5095880	0					
ANR	5096152	ReturnType	static inline int		5095880	1					
ANR	5096153	Identifier	make_interpolation_nodes		5095880	2					
ANR	5096154	ParameterList	"const gs_function_Sd_t * pfn , double * T0 , double * T1 , int * I , double * T , int a_offset , int s_offset , int ii"		5095880	3					
ANR	5096155	Parameter	const gs_function_Sd_t * pfn	724:25:24366:24392	5095880	0	True				
ANR	5096156	ParameterType	const gs_function_Sd_t *		5095880	0					
ANR	5096157	Identifier	pfn		5095880	1					
ANR	5096158	Parameter	double * T0	724:54:24395:24404	5095880	1	True				
ANR	5096159	ParameterType	double *		5095880	0					
ANR	5096160	Identifier	T0		5095880	1					
ANR	5096161	Parameter	double * T1	724:66:24407:24416	5095880	2	True				
ANR	5096162	ParameterType	double *		5095880	0					
ANR	5096163	Identifier	T1		5095880	1					
ANR	5096164	Parameter	int * I	725:28:24447:24452	5095880	3	True				
ANR	5096165	ParameterType	int *		5095880	0					
ANR	5096166	Identifier	I		5095880	1					
ANR	5096167	Parameter	double * T	725:36:24455:24463	5095880	4	True				
ANR	5096168	ParameterType	double *		5095880	0					
ANR	5096169	Identifier	T		5095880	1					
ANR	5096170	Parameter	int a_offset	726:28:24494:24505	5095880	5	True				
ANR	5096171	ParameterType	int		5095880	0					
ANR	5096172	Identifier	a_offset		5095880	1					
ANR	5096173	Parameter	int s_offset	726:42:24508:24519	5095880	6	True				
ANR	5096174	ParameterType	int		5095880	0					
ANR	5096175	Identifier	s_offset		5095880	1					
ANR	5096176	Parameter	int ii	726:56:24522:24527	5095880	7	True				
ANR	5096177	ParameterType	int		5095880	0					
ANR	5096178	Identifier	ii		5095880	1					
ANR	5096179	CFGEntryNode	ENTRY		5095880		True				
ANR	5096180	CFGExitNode	EXIT		5095880		True				
ANR	5096181	Symbol	* T1		5095880						
ANR	5096182	Symbol	make_interpolation_nodes		5095880						
ANR	5096183	Symbol	* T0		5095880						
ANR	5096184	Symbol	pfn -> params . m		5095880						
ANR	5096185	Symbol	gs_error_unregistered		5095880						
ANR	5096186	Symbol	code		5095880						
ANR	5096187	Symbol	pfn -> params . Size		5095880						
ANR	5096188	Symbol	* ii		5095880						
ANR	5096189	Symbol	a_offset		5095880						
ANR	5096190	Symbol	I		5095880						
ANR	5096191	Symbol	* * pfn		5095880						
ANR	5096192	Symbol	sa		5095880						
ANR	5096193	Symbol	double_stub		5095880						
ANR	5096194	Symbol	pfn -> params . pole		5095880						
ANR	5096195	Symbol	s_offset		5095880						
ANR	5096196	Symbol	pfn -> params . Order		5095880						
ANR	5096197	Symbol	* I		5095880						
ANR	5096198	Symbol	T		5095880						
ANR	5096199	Symbol	pfn -> params . stream_step		5095880						
ANR	5096200	Symbol	pfn -> params . array_step		5095880						
ANR	5096201	Symbol	* ( pfn -> params . pole + a_offset )		5095880						
ANR	5096202	Symbol	T0		5095880						
ANR	5096203	Symbol	POLE_CACHE_IGNORE		5095880						
ANR	5096204	Symbol	floor		5095880						
ANR	5096205	Symbol	T1		5095880						
ANR	5096206	Symbol	* pfn -> params . stream_step		5095880						
ANR	5096207	Symbol	* T		5095880						
ANR	5096208	Symbol	ii		5095880						
ANR	5096209	Symbol	make_interpolation_tensor		5095880						
ANR	5096210	Symbol	* pfn -> params . array_step		5095880						
ANR	5096211	Symbol	ss		5095880						
ANR	5096212	Symbol	* pfn		5095880						
ANR	5096213	Symbol	i0		5095880						
ANR	5096214	Symbol	i1		5095880						
ANR	5096215	Symbol	* pfn -> params . Size		5095880						
ANR	5096216	Symbol	i		5095880						
ANR	5096217	Symbol	ceil		5095880						
ANR	5096218	Symbol	* pfn -> params . pole		5095880						
ANR	5096219	Symbol	* a_offset		5095880						
ANR	5096220	Symbol	pfn		5095880						
ANR	5096221	Symbol	load_vector		5095880						
ANR	5096222	Symbol	pfn -> params		5095880						
ANR	5096223	Symbol	* pfn -> params		5095880						
ANR	5096224	Function	evaluate_from_tenzor	764:0:25709:26628							
ANR	5096225	FunctionDef	"evaluate_from_tenzor (const gs_function_Sd_t * pfn , int * I , double * T , int offset , int ii , double * y)"		5096224	0					
ANR	5096226	CompoundStatement		766:0:25827:26628	5096224	0					
ANR	5096227	IdentifierDeclStatement	"int s = pfn -> params . array_step [ ii ] , k , l , code ;"	767:4:25833:25879	5096224	0	True				
ANR	5096228	IdentifierDecl	s = pfn -> params . array_step [ ii ]		5096224	0					
ANR	5096229	IdentifierDeclType	int		5096224	0					
ANR	5096230	Identifier	s		5096224	1					
ANR	5096231	AssignmentExpression	s = pfn -> params . array_step [ ii ]		5096224	2		=			
ANR	5096232	Identifier	s		5096224	0					
ANR	5096233	ArrayIndexing	pfn -> params . array_step [ ii ]		5096224	1					
ANR	5096234	MemberAccess	pfn -> params . array_step		5096224	0					
ANR	5096235	PtrMemberAccess	pfn -> params		5096224	0					
ANR	5096236	Identifier	pfn		5096224	0					
ANR	5096237	Identifier	params		5096224	1					
ANR	5096238	Identifier	array_step		5096224	1					
ANR	5096239	Identifier	ii		5096224	1					
ANR	5096240	IdentifierDecl	k		5096224	1					
ANR	5096241	IdentifierDeclType	int		5096224	0					
ANR	5096242	Identifier	k		5096224	1					
ANR	5096243	IdentifierDecl	l		5096224	2					
ANR	5096244	IdentifierDeclType	int		5096224	0					
ANR	5096245	Identifier	l		5096224	1					
ANR	5096246	IdentifierDecl	code		5096224	3					
ANR	5096247	IdentifierDeclType	int		5096224	0					
ANR	5096248	Identifier	code		5096224	1					
ANR	5096249	IfStatement	if ( ii < 0 )		5096224	1					
ANR	5096250	Condition	ii < 0	769:8:25890:25895	5096224	0	True				
ANR	5096251	RelationalExpression	ii < 0		5096224	0		<			
ANR	5096252	Identifier	ii		5096224	0					
ANR	5096253	PrimaryExpression	0		5096224	1					
ANR	5096254	CompoundStatement		4:16:70:70	5096224	1					
ANR	5096255	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		5096224	0					
ANR	5096256	ForInit	k = 0 ;	770:13:25913:25918	5096224	0	True				
ANR	5096257	AssignmentExpression	k = 0		5096224	0		=			
ANR	5096258	Identifier	k		5096224	0					
ANR	5096259	PrimaryExpression	0		5096224	1					
ANR	5096260	Condition	k < pfn -> params . n	770:20:25920:25936	5096224	1	True				
ANR	5096261	RelationalExpression	k < pfn -> params . n		5096224	0		<			
ANR	5096262	Identifier	k		5096224	0					
ANR	5096263	MemberAccess	pfn -> params . n		5096224	1					
ANR	5096264	PtrMemberAccess	pfn -> params		5096224	0					
ANR	5096265	Identifier	pfn		5096224	0					
ANR	5096266	Identifier	params		5096224	1					
ANR	5096267	Identifier	n		5096224	1					
ANR	5096268	PostIncDecOperationExpression	k ++	770:39:25939:25941	5096224	2	True				
ANR	5096269	Identifier	k		5096224	0					
ANR	5096270	IncDec	++		5096224	1					
ANR	5096271	ExpressionStatement	y [ k ] = * ( pfn -> params . pole + offset + k )	771:12:25956:25995	5096224	3	True				
ANR	5096272	AssignmentExpression	y [ k ] = * ( pfn -> params . pole + offset + k )		5096224	0		=			
ANR	5096273	ArrayIndexing	y [ k ]		5096224	0					
ANR	5096274	Identifier	y		5096224	0					
ANR	5096275	Identifier	k		5096224	1					
ANR	5096276	UnaryOperationExpression	* ( pfn -> params . pole + offset + k )		5096224	1					
ANR	5096277	UnaryOperator	*		5096224	0					
ANR	5096278	AdditiveExpression	pfn -> params . pole + offset + k		5096224	1		+			
ANR	5096279	MemberAccess	pfn -> params . pole		5096224	0					
ANR	5096280	PtrMemberAccess	pfn -> params		5096224	0					
ANR	5096281	Identifier	pfn		5096224	0					
ANR	5096282	Identifier	params		5096224	1					
ANR	5096283	Identifier	pole		5096224	1					
ANR	5096284	AdditiveExpression	offset + k		5096224	1		+			
ANR	5096285	Identifier	offset		5096224	0					
ANR	5096286	Identifier	k		5096224	1					
ANR	5096287	ElseStatement	else		5096224	0					
ANR	5096288	IfStatement	if ( T [ ii ] == 0 )		5096224	0					
ANR	5096289	Condition	T [ ii ] == 0	772:15:26012:26021	5096224	0	True				
ANR	5096290	EqualityExpression	T [ ii ] == 0		5096224	0		==			
ANR	5096291	ArrayIndexing	T [ ii ]		5096224	0					
ANR	5096292	Identifier	T		5096224	0					
ANR	5096293	Identifier	ii		5096224	1					
ANR	5096294	PrimaryExpression	0		5096224	1					
ANR	5096295	CompoundStatement		7:27:196:196	5096224	1					
ANR	5096296	ReturnStatement	"return evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] , ii - 1 , y ) ;"	773:8:26034:26103	5096224	0	True				
ANR	5096297	CallExpression	"evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] , ii - 1 , y )"		5096224	0					
ANR	5096298	Callee	evaluate_from_tenzor		5096224	0					
ANR	5096299	Identifier	evaluate_from_tenzor		5096224	0					
ANR	5096300	ArgumentList	pfn		5096224	1					
ANR	5096301	Argument	pfn		5096224	0					
ANR	5096302	Identifier	pfn		5096224	0					
ANR	5096303	Argument	I		5096224	1					
ANR	5096304	Identifier	I		5096224	0					
ANR	5096305	Argument	T		5096224	2					
ANR	5096306	Identifier	T		5096224	0					
ANR	5096307	Argument	offset + s * I [ ii ]		5096224	3					
ANR	5096308	AdditiveExpression	offset + s * I [ ii ]		5096224	0		+			
ANR	5096309	Identifier	offset		5096224	0					
ANR	5096310	MultiplicativeExpression	s * I [ ii ]		5096224	1		*			
ANR	5096311	Identifier	s		5096224	0					
ANR	5096312	ArrayIndexing	I [ ii ]		5096224	1					
ANR	5096313	Identifier	I		5096224	0					
ANR	5096314	Identifier	ii		5096224	1					
ANR	5096315	Argument	ii - 1		5096224	4					
ANR	5096316	AdditiveExpression	ii - 1		5096224	0		-			
ANR	5096317	Identifier	ii		5096224	0					
ANR	5096318	PrimaryExpression	1		5096224	1					
ANR	5096319	Argument	y		5096224	5					
ANR	5096320	Identifier	y		5096224	0					
ANR	5096321	ElseStatement	else		5096224	0					
ANR	5096322	CompoundStatement		10:8:298:328	5096224	0					
ANR	5096323	IdentifierDeclStatement	"double t0 = T [ ii ] , t1 = 1 - t0 ;"	775:8:26126:26156	5096224	0	True				
ANR	5096324	IdentifierDecl	t0 = T [ ii ]		5096224	0					
ANR	5096325	IdentifierDeclType	double		5096224	0					
ANR	5096326	Identifier	t0		5096224	1					
ANR	5096327	AssignmentExpression	t0 = T [ ii ]		5096224	2		=			
ANR	5096328	Identifier	t0		5096224	0					
ANR	5096329	ArrayIndexing	T [ ii ]		5096224	1					
ANR	5096330	Identifier	T		5096224	0					
ANR	5096331	Identifier	ii		5096224	1					
ANR	5096332	IdentifierDecl	t1 = 1 - t0		5096224	1					
ANR	5096333	IdentifierDeclType	double		5096224	0					
ANR	5096334	Identifier	t1		5096224	1					
ANR	5096335	AssignmentExpression	t1 = 1 - t0		5096224	2		=			
ANR	5096336	Identifier	t1		5096224	0					
ANR	5096337	AdditiveExpression	1 - t0		5096224	1		-			
ANR	5096338	PrimaryExpression	1		5096224	0					
ANR	5096339	Identifier	t0		5096224	1					
ANR	5096340	Statement	double	776:8:26166:26171	5096224	1	True				
ANR	5096341	ExpressionStatement	p [ 4 ] [ max_Sd_n ]	776:15:26173:26187	5096224	2	True				
ANR	5096342	ArrayIndexing	p [ 4 ] [ max_Sd_n ]		5096224	0					
ANR	5096343	ArrayIndexing	p [ 4 ]		5096224	0					
ANR	5096344	Identifier	p		5096224	0					
ANR	5096345	PrimaryExpression	4		5096224	1					
ANR	5096346	Identifier	max_Sd_n		5096224	1					
ANR	5096347	ForStatement	for ( l = 0 ; l < 4 ; l ++ )		5096224	3					
ANR	5096348	ForInit	l = 0 ;	778:13:26203:26208	5096224	0	True				
ANR	5096349	AssignmentExpression	l = 0		5096224	0		=			
ANR	5096350	Identifier	l		5096224	0					
ANR	5096351	PrimaryExpression	0		5096224	1					
ANR	5096352	Condition	l < 4	778:20:26210:26214	5096224	1	True				
ANR	5096353	RelationalExpression	l < 4		5096224	0		<			
ANR	5096354	Identifier	l		5096224	0					
ANR	5096355	PrimaryExpression	4		5096224	1					
ANR	5096356	PostIncDecOperationExpression	l ++	778:27:26217:26219	5096224	2	True				
ANR	5096357	Identifier	l		5096224	0					
ANR	5096358	IncDec	++		5096224	1					
ANR	5096359	CompoundStatement		13:32:394:394	5096224	3					
ANR	5096360	ExpressionStatement	"code = evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] + l * ( s / 3 ) , ii - 1 , p [ l ] )"	779:12:26236:26322	5096224	0	True				
ANR	5096361	AssignmentExpression	"code = evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] + l * ( s / 3 ) , ii - 1 , p [ l ] )"		5096224	0		=			
ANR	5096362	Identifier	code		5096224	0					
ANR	5096363	CallExpression	"evaluate_from_tenzor ( pfn , I , T , offset + s * I [ ii ] + l * ( s / 3 ) , ii - 1 , p [ l ] )"		5096224	1					
ANR	5096364	Callee	evaluate_from_tenzor		5096224	0					
ANR	5096365	Identifier	evaluate_from_tenzor		5096224	0					
ANR	5096366	ArgumentList	pfn		5096224	1					
ANR	5096367	Argument	pfn		5096224	0					
ANR	5096368	Identifier	pfn		5096224	0					
ANR	5096369	Argument	I		5096224	1					
ANR	5096370	Identifier	I		5096224	0					
ANR	5096371	Argument	T		5096224	2					
ANR	5096372	Identifier	T		5096224	0					
ANR	5096373	Argument	offset + s * I [ ii ] + l * ( s / 3 )		5096224	3					
ANR	5096374	AdditiveExpression	offset + s * I [ ii ] + l * ( s / 3 )		5096224	0		+			
ANR	5096375	Identifier	offset		5096224	0					
ANR	5096376	AdditiveExpression	s * I [ ii ] + l * ( s / 3 )		5096224	1		+			
ANR	5096377	MultiplicativeExpression	s * I [ ii ]		5096224	0		*			
ANR	5096378	Identifier	s		5096224	0					
ANR	5096379	ArrayIndexing	I [ ii ]		5096224	1					
ANR	5096380	Identifier	I		5096224	0					
ANR	5096381	Identifier	ii		5096224	1					
ANR	5096382	MultiplicativeExpression	l * ( s / 3 )		5096224	1		*			
ANR	5096383	Identifier	l		5096224	0					
ANR	5096384	MultiplicativeExpression	s / 3		5096224	1		/			
ANR	5096385	Identifier	s		5096224	0					
ANR	5096386	PrimaryExpression	3		5096224	1					
ANR	5096387	Argument	ii - 1		5096224	4					
ANR	5096388	AdditiveExpression	ii - 1		5096224	0		-			
ANR	5096389	Identifier	ii		5096224	0					
ANR	5096390	PrimaryExpression	1		5096224	1					
ANR	5096391	Argument	p [ l ]		5096224	5					
ANR	5096392	ArrayIndexing	p [ l ]		5096224	0					
ANR	5096393	Identifier	p		5096224	0					
ANR	5096394	Identifier	l		5096224	1					
ANR	5096395	IfStatement	if ( code < 0 )		5096224	1					
ANR	5096396	Condition	code < 0	780:16:26340:26347	5096224	0	True				
ANR	5096397	RelationalExpression	code < 0		5096224	0		<			
ANR	5096398	Identifier	code		5096224	0					
ANR	5096399	PrimaryExpression	0		5096224	1					
ANR	5096400	ReturnStatement	return code ;	781:16:26366:26377	5096224	1	True				
ANR	5096401	Identifier	code		5096224	0					
ANR	5096402	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		5096224	4					
ANR	5096403	ForInit	k = 0 ;	783:13:26402:26407	5096224	0	True				
ANR	5096404	AssignmentExpression	k = 0		5096224	0		=			
ANR	5096405	Identifier	k		5096224	0					
ANR	5096406	PrimaryExpression	0		5096224	1					
ANR	5096407	Condition	k < pfn -> params . n	783:20:26409:26425	5096224	1	True				
ANR	5096408	RelationalExpression	k < pfn -> params . n		5096224	0		<			
ANR	5096409	Identifier	k		5096224	0					
ANR	5096410	MemberAccess	pfn -> params . n		5096224	1					
ANR	5096411	PtrMemberAccess	pfn -> params		5096224	0					
ANR	5096412	Identifier	pfn		5096224	0					
ANR	5096413	Identifier	params		5096224	1					
ANR	5096414	Identifier	n		5096224	1					
ANR	5096415	PostIncDecOperationExpression	k ++	783:39:26428:26430	5096224	2	True				
ANR	5096416	Identifier	k		5096224	0					
ANR	5096417	IncDec	++		5096224	1					
ANR	5096418	ExpressionStatement	y [ k ] = p [ 0 ] [ k ] * t1 * t1 * t1 + p [ 1 ] [ k ] * t1 * t1 * t0 * 3 + p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0	784:12:26445:26606	5096224	3	True				
ANR	5096419	AssignmentExpression	y [ k ] = p [ 0 ] [ k ] * t1 * t1 * t1 + p [ 1 ] [ k ] * t1 * t1 * t0 * 3 + p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0		5096224	0		=			
ANR	5096420	ArrayIndexing	y [ k ]		5096224	0					
ANR	5096421	Identifier	y		5096224	0					
ANR	5096422	Identifier	k		5096224	1					
ANR	5096423	AdditiveExpression	p [ 0 ] [ k ] * t1 * t1 * t1 + p [ 1 ] [ k ] * t1 * t1 * t0 * 3 + p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0		5096224	1		+			
ANR	5096424	MultiplicativeExpression	p [ 0 ] [ k ] * t1 * t1 * t1		5096224	0		*			
ANR	5096425	ArrayIndexing	p [ 0 ] [ k ]		5096224	0					
ANR	5096426	ArrayIndexing	p [ 0 ]		5096224	0					
ANR	5096427	Identifier	p		5096224	0					
ANR	5096428	PrimaryExpression	0		5096224	1					
ANR	5096429	Identifier	k		5096224	1					
ANR	5096430	MultiplicativeExpression	t1 * t1 * t1		5096224	1		*			
ANR	5096431	Identifier	t1		5096224	0					
ANR	5096432	MultiplicativeExpression	t1 * t1		5096224	1		*			
ANR	5096433	Identifier	t1		5096224	0					
ANR	5096434	Identifier	t1		5096224	1					
ANR	5096435	AdditiveExpression	p [ 1 ] [ k ] * t1 * t1 * t0 * 3 + p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0		5096224	1		+			
ANR	5096436	MultiplicativeExpression	p [ 1 ] [ k ] * t1 * t1 * t0 * 3		5096224	0		*			
ANR	5096437	ArrayIndexing	p [ 1 ] [ k ]		5096224	0					
ANR	5096438	ArrayIndexing	p [ 1 ]		5096224	0					
ANR	5096439	Identifier	p		5096224	0					
ANR	5096440	PrimaryExpression	1		5096224	1					
ANR	5096441	Identifier	k		5096224	1					
ANR	5096442	MultiplicativeExpression	t1 * t1 * t0 * 3		5096224	1		*			
ANR	5096443	Identifier	t1		5096224	0					
ANR	5096444	MultiplicativeExpression	t1 * t0 * 3		5096224	1		*			
ANR	5096445	Identifier	t1		5096224	0					
ANR	5096446	MultiplicativeExpression	t0 * 3		5096224	1		*			
ANR	5096447	Identifier	t0		5096224	0					
ANR	5096448	PrimaryExpression	3		5096224	1					
ANR	5096449	AdditiveExpression	p [ 2 ] [ k ] * t1 * t0 * t0 * 3 + p [ 3 ] [ k ] * t0 * t0 * t0		5096224	1		+			
ANR	5096450	MultiplicativeExpression	p [ 2 ] [ k ] * t1 * t0 * t0 * 3		5096224	0		*			
ANR	5096451	ArrayIndexing	p [ 2 ] [ k ]		5096224	0					
ANR	5096452	ArrayIndexing	p [ 2 ]		5096224	0					
ANR	5096453	Identifier	p		5096224	0					
ANR	5096454	PrimaryExpression	2		5096224	1					
ANR	5096455	Identifier	k		5096224	1					
ANR	5096456	MultiplicativeExpression	t1 * t0 * t0 * 3		5096224	1		*			
ANR	5096457	Identifier	t1		5096224	0					
ANR	5096458	MultiplicativeExpression	t0 * t0 * 3		5096224	1		*			
ANR	5096459	Identifier	t0		5096224	0					
ANR	5096460	MultiplicativeExpression	t0 * 3		5096224	1		*			
ANR	5096461	Identifier	t0		5096224	0					
ANR	5096462	PrimaryExpression	3		5096224	1					
ANR	5096463	MultiplicativeExpression	p [ 3 ] [ k ] * t0 * t0 * t0		5096224	1		*			
ANR	5096464	ArrayIndexing	p [ 3 ] [ k ]		5096224	0					
ANR	5096465	ArrayIndexing	p [ 3 ]		5096224	0					
ANR	5096466	Identifier	p		5096224	0					
ANR	5096467	PrimaryExpression	3		5096224	1					
ANR	5096468	Identifier	k		5096224	1					
ANR	5096469	MultiplicativeExpression	t0 * t0 * t0		5096224	1		*			
ANR	5096470	Identifier	t0		5096224	0					
ANR	5096471	MultiplicativeExpression	t0 * t0		5096224	1		*			
ANR	5096472	Identifier	t0		5096224	0					
ANR	5096473	Identifier	t0		5096224	1					
ANR	5096474	ReturnStatement	return 0 ;	789:4:26618:26626	5096224	2	True				
ANR	5096475	PrimaryExpression	0		5096224	0					
ANR	5096476	ReturnType	static inline int		5096224	1					
ANR	5096477	Identifier	evaluate_from_tenzor		5096224	2					
ANR	5096478	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T , int offset , int ii , double * y"		5096224	3					
ANR	5096479	Parameter	const gs_function_Sd_t * pfn	765:21:25748:25774	5096224	0	True				
ANR	5096480	ParameterType	const gs_function_Sd_t *		5096224	0					
ANR	5096481	Identifier	pfn		5096224	1					
ANR	5096482	Parameter	int * I	765:50:25777:25782	5096224	1	True				
ANR	5096483	ParameterType	int *		5096224	0					
ANR	5096484	Identifier	I		5096224	1					
ANR	5096485	Parameter	double * T	765:58:25785:25793	5096224	2	True				
ANR	5096486	ParameterType	double *		5096224	0					
ANR	5096487	Identifier	T		5096224	1					
ANR	5096488	Parameter	int offset	765:69:25796:25805	5096224	3	True				
ANR	5096489	ParameterType	int		5096224	0					
ANR	5096490	Identifier	offset		5096224	1					
ANR	5096491	Parameter	int ii	765:81:25808:25813	5096224	4	True				
ANR	5096492	ParameterType	int		5096224	0					
ANR	5096493	Identifier	ii		5096224	1					
ANR	5096494	Parameter	double * y	765:89:25816:25824	5096224	5	True				
ANR	5096495	ParameterType	double *		5096224	0					
ANR	5096496	Identifier	y		5096224	1					
ANR	5096497	CFGEntryNode	ENTRY		5096224		True				
ANR	5096498	CFGExitNode	EXIT		5096224		True				
ANR	5096499	Symbol	code		5096224						
ANR	5096500	Symbol	pfn -> params . n		5096224						
ANR	5096501	Symbol	* y		5096224						
ANR	5096502	Symbol	* ii		5096224						
ANR	5096503	Symbol	I		5096224						
ANR	5096504	Symbol	* ( pfn -> params . pole + offset + k )		5096224						
ANR	5096505	Symbol	* * pfn		5096224						
ANR	5096506	Symbol	pfn -> params . pole		5096224						
ANR	5096507	Symbol	* I		5096224						
ANR	5096508	Symbol	T		5096224						
ANR	5096509	Symbol	pfn -> params . array_step		5096224						
ANR	5096510	Symbol	* * p		5096224						
ANR	5096511	Symbol	* T		5096224						
ANR	5096512	Symbol	max_Sd_n		5096224						
ANR	5096513	Symbol	ii		5096224						
ANR	5096514	Symbol	* pfn -> params . array_step		5096224						
ANR	5096515	Symbol	* pfn		5096224						
ANR	5096516	Symbol	offset		5096224						
ANR	5096517	Symbol	k		5096224						
ANR	5096518	Symbol	l		5096224						
ANR	5096519	Symbol	evaluate_from_tenzor		5096224						
ANR	5096520	Symbol	p		5096224						
ANR	5096521	Symbol	* pfn -> params . pole		5096224						
ANR	5096522	Symbol	s		5096224						
ANR	5096523	Symbol	* k		5096224						
ANR	5096524	Symbol	* l		5096224						
ANR	5096525	Symbol	pfn		5096224						
ANR	5096526	Symbol	y		5096224						
ANR	5096527	Symbol	* offset		5096224						
ANR	5096528	Symbol	* p		5096224						
ANR	5096529	Symbol	t0		5096224						
ANR	5096530	Symbol	pfn -> params		5096224						
ANR	5096531	Symbol	t1		5096224						
ANR	5096532	Symbol	* pfn -> params		5096224						
ANR	5096533	Function	fn_Sd_evaluate_multicubic_cached	795:0:26786:27467							
ANR	5096534	FunctionDef	"fn_Sd_evaluate_multicubic_cached (const gs_function_Sd_t * pfn , const float * in , float * out)"		5096533	0					
ANR	5096535	CompoundStatement		797:0:26888:27467	5096533	0					
ANR	5096536	IdentifierDeclStatement	"double T [ max_Sd_m ] , y [ max_Sd_n ] ;"	798:4:26894:26925	5096533	0	True				
ANR	5096537	IdentifierDecl	T [ max_Sd_m ]		5096533	0					
ANR	5096538	IdentifierDeclType	double [ max_Sd_m ]		5096533	0					
ANR	5096539	Identifier	T		5096533	1					
ANR	5096540	Identifier	max_Sd_m		5096533	2					
ANR	5096541	IdentifierDecl	y [ max_Sd_n ]		5096533	1					
ANR	5096542	IdentifierDeclType	double [ max_Sd_n ]		5096533	0					
ANR	5096543	Identifier	y		5096533	1					
ANR	5096544	Identifier	max_Sd_n		5096533	2					
ANR	5096545	IdentifierDeclStatement	"int I [ max_Sd_m ] , k , code ;"	799:4:26931:26955	5096533	1	True				
ANR	5096546	IdentifierDecl	I [ max_Sd_m ]		5096533	0					
ANR	5096547	IdentifierDeclType	int [ max_Sd_m ]		5096533	0					
ANR	5096548	Identifier	I		5096533	1					
ANR	5096549	Identifier	max_Sd_m		5096533	2					
ANR	5096550	IdentifierDecl	k		5096533	1					
ANR	5096551	IdentifierDeclType	int		5096533	0					
ANR	5096552	Identifier	k		5096533	1					
ANR	5096553	IdentifierDecl	code		5096533	2					
ANR	5096554	IdentifierDeclType	int		5096533	0					
ANR	5096555	Identifier	code		5096533	1					
ANR	5096556	ExpressionStatement	"decode_argument ( pfn , in , T , I )"	801:4:26962:26992	5096533	2	True				
ANR	5096557	CallExpression	"decode_argument ( pfn , in , T , I )"		5096533	0					
ANR	5096558	Callee	decode_argument		5096533	0					
ANR	5096559	Identifier	decode_argument		5096533	0					
ANR	5096560	ArgumentList	pfn		5096533	1					
ANR	5096561	Argument	pfn		5096533	0					
ANR	5096562	Identifier	pfn		5096533	0					
ANR	5096563	Argument	in		5096533	1					
ANR	5096564	Identifier	in		5096533	0					
ANR	5096565	Argument	T		5096533	2					
ANR	5096566	Identifier	T		5096533	0					
ANR	5096567	Argument	I		5096533	3					
ANR	5096568	Identifier	I		5096533	0					
ANR	5096569	ExpressionStatement	"code = make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"	802:4:26998:27066	5096533	3	True				
ANR	5096570	AssignmentExpression	"code = make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"		5096533	0		=			
ANR	5096571	Identifier	code		5096533	0					
ANR	5096572	CallExpression	"make_interpolation_tensor ( pfn , I , T , 0 , 0 , pfn -> params . m - 1 )"		5096533	1					
ANR	5096573	Callee	make_interpolation_tensor		5096533	0					
ANR	5096574	Identifier	make_interpolation_tensor		5096533	0					
ANR	5096575	ArgumentList	pfn		5096533	1					
ANR	5096576	Argument	pfn		5096533	0					
ANR	5096577	Identifier	pfn		5096533	0					
ANR	5096578	Argument	I		5096533	1					
ANR	5096579	Identifier	I		5096533	0					
ANR	5096580	Argument	T		5096533	2					
ANR	5096581	Identifier	T		5096533	0					
ANR	5096582	Argument	0		5096533	3					
ANR	5096583	PrimaryExpression	0		5096533	0					
ANR	5096584	Argument	0		5096533	4					
ANR	5096585	PrimaryExpression	0		5096533	0					
ANR	5096586	Argument	pfn -> params . m - 1		5096533	5					
ANR	5096587	AdditiveExpression	pfn -> params . m - 1		5096533	0		-			
ANR	5096588	MemberAccess	pfn -> params . m		5096533	0					
ANR	5096589	PtrMemberAccess	pfn -> params		5096533	0					
ANR	5096590	Identifier	pfn		5096533	0					
ANR	5096591	Identifier	params		5096533	1					
ANR	5096592	Identifier	m		5096533	1					
ANR	5096593	PrimaryExpression	1		5096533	1					
ANR	5096594	IfStatement	if ( code < 0 )		5096533	4					
ANR	5096595	Condition	code < 0	803:8:27076:27083	5096533	0	True				
ANR	5096596	RelationalExpression	code < 0		5096533	0		<			
ANR	5096597	Identifier	code		5096533	0					
ANR	5096598	PrimaryExpression	0		5096533	1					
ANR	5096599	ReturnStatement	return code ;	804:8:27094:27105	5096533	1	True				
ANR	5096600	Identifier	code		5096533	0					
ANR	5096601	ExpressionStatement	"evaluate_from_tenzor ( pfn , I , T , 0 , pfn -> params . m - 1 , y )"	805:4:27111:27167	5096533	5	True				
ANR	5096602	CallExpression	"evaluate_from_tenzor ( pfn , I , T , 0 , pfn -> params . m - 1 , y )"		5096533	0					
ANR	5096603	Callee	evaluate_from_tenzor		5096533	0					
ANR	5096604	Identifier	evaluate_from_tenzor		5096533	0					
ANR	5096605	ArgumentList	pfn		5096533	1					
ANR	5096606	Argument	pfn		5096533	0					
ANR	5096607	Identifier	pfn		5096533	0					
ANR	5096608	Argument	I		5096533	1					
ANR	5096609	Identifier	I		5096533	0					
ANR	5096610	Argument	T		5096533	2					
ANR	5096611	Identifier	T		5096533	0					
ANR	5096612	Argument	0		5096533	3					
ANR	5096613	PrimaryExpression	0		5096533	0					
ANR	5096614	Argument	pfn -> params . m - 1		5096533	4					
ANR	5096615	AdditiveExpression	pfn -> params . m - 1		5096533	0		-			
ANR	5096616	MemberAccess	pfn -> params . m		5096533	0					
ANR	5096617	PtrMemberAccess	pfn -> params		5096533	0					
ANR	5096618	Identifier	pfn		5096533	0					
ANR	5096619	Identifier	params		5096533	1					
ANR	5096620	Identifier	m		5096533	1					
ANR	5096621	PrimaryExpression	1		5096533	1					
ANR	5096622	Argument	y		5096533	5					
ANR	5096623	Identifier	y		5096533	0					
ANR	5096624	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		5096533	6					
ANR	5096625	ForInit	k = 0 ;	806:9:27178:27183	5096533	0	True				
ANR	5096626	AssignmentExpression	k = 0		5096533	0		=			
ANR	5096627	Identifier	k		5096533	0					
ANR	5096628	PrimaryExpression	0		5096533	1					
ANR	5096629	Condition	k < pfn -> params . n	806:16:27185:27201	5096533	1	True				
ANR	5096630	RelationalExpression	k < pfn -> params . n		5096533	0		<			
ANR	5096631	Identifier	k		5096533	0					
ANR	5096632	MemberAccess	pfn -> params . n		5096533	1					
ANR	5096633	PtrMemberAccess	pfn -> params		5096533	0					
ANR	5096634	Identifier	pfn		5096533	0					
ANR	5096635	Identifier	params		5096533	1					
ANR	5096636	Identifier	n		5096533	1					
ANR	5096637	PostIncDecOperationExpression	k ++	806:35:27204:27206	5096533	2	True				
ANR	5096638	Identifier	k		5096533	0					
ANR	5096639	IncDec	++		5096533	1					
ANR	5096640	CompoundStatement		11:8:330:346	5096533	3					
ANR	5096641	IdentifierDeclStatement	double yk = y [ k ] ;	807:8:27219:27235	5096533	0	True				
ANR	5096642	IdentifierDecl	yk = y [ k ]		5096533	0					
ANR	5096643	IdentifierDeclType	double		5096533	0					
ANR	5096644	Identifier	yk		5096533	1					
ANR	5096645	AssignmentExpression	yk = y [ k ]		5096533	2		=			
ANR	5096646	Identifier	yk		5096533	0					
ANR	5096647	ArrayIndexing	y [ k ]		5096533	1					
ANR	5096648	Identifier	y		5096533	0					
ANR	5096649	Identifier	k		5096533	1					
ANR	5096650	IfStatement	if ( yk < pfn -> params . Range [ k * 2 + 0 ] )		5096533	1					
ANR	5096651	Condition	yk < pfn -> params . Range [ k * 2 + 0 ]	809:12:27250:27282	5096533	0	True				
ANR	5096652	RelationalExpression	yk < pfn -> params . Range [ k * 2 + 0 ]		5096533	0		<			
ANR	5096653	Identifier	yk		5096533	0					
ANR	5096654	ArrayIndexing	pfn -> params . Range [ k * 2 + 0 ]		5096533	1					
ANR	5096655	MemberAccess	pfn -> params . Range		5096533	0					
ANR	5096656	PtrMemberAccess	pfn -> params		5096533	0					
ANR	5096657	Identifier	pfn		5096533	0					
ANR	5096658	Identifier	params		5096533	1					
ANR	5096659	Identifier	Range		5096533	1					
ANR	5096660	AdditiveExpression	k * 2 + 0		5096533	1		+			
ANR	5096661	MultiplicativeExpression	k * 2		5096533	0		*			
ANR	5096662	Identifier	k		5096533	0					
ANR	5096663	PrimaryExpression	2		5096533	1					
ANR	5096664	PrimaryExpression	0		5096533	1					
ANR	5096665	ExpressionStatement	yk = pfn -> params . Range [ k * 2 + 0 ]	810:12:27297:27330	5096533	1	True				
ANR	5096666	AssignmentExpression	yk = pfn -> params . Range [ k * 2 + 0 ]		5096533	0		=			
ANR	5096667	Identifier	yk		5096533	0					
ANR	5096668	ArrayIndexing	pfn -> params . Range [ k * 2 + 0 ]		5096533	1					
ANR	5096669	MemberAccess	pfn -> params . Range		5096533	0					
ANR	5096670	PtrMemberAccess	pfn -> params		5096533	0					
ANR	5096671	Identifier	pfn		5096533	0					
ANR	5096672	Identifier	params		5096533	1					
ANR	5096673	Identifier	Range		5096533	1					
ANR	5096674	AdditiveExpression	k * 2 + 0		5096533	1		+			
ANR	5096675	MultiplicativeExpression	k * 2		5096533	0		*			
ANR	5096676	Identifier	k		5096533	0					
ANR	5096677	PrimaryExpression	2		5096533	1					
ANR	5096678	PrimaryExpression	0		5096533	1					
ANR	5096679	IfStatement	if ( yk > pfn -> params . Range [ k * 2 + 1 ] )		5096533	2					
ANR	5096680	Condition	yk > pfn -> params . Range [ k * 2 + 1 ]	811:12:27344:27376	5096533	0	True				
ANR	5096681	RelationalExpression	yk > pfn -> params . Range [ k * 2 + 1 ]		5096533	0		>			
ANR	5096682	Identifier	yk		5096533	0					
ANR	5096683	ArrayIndexing	pfn -> params . Range [ k * 2 + 1 ]		5096533	1					
ANR	5096684	MemberAccess	pfn -> params . Range		5096533	0					
ANR	5096685	PtrMemberAccess	pfn -> params		5096533	0					
ANR	5096686	Identifier	pfn		5096533	0					
ANR	5096687	Identifier	params		5096533	1					
ANR	5096688	Identifier	Range		5096533	1					
ANR	5096689	AdditiveExpression	k * 2 + 1		5096533	1		+			
ANR	5096690	MultiplicativeExpression	k * 2		5096533	0		*			
ANR	5096691	Identifier	k		5096533	0					
ANR	5096692	PrimaryExpression	2		5096533	1					
ANR	5096693	PrimaryExpression	1		5096533	1					
ANR	5096694	ExpressionStatement	yk = pfn -> params . Range [ k * 2 + 1 ]	812:12:27391:27424	5096533	1	True				
ANR	5096695	AssignmentExpression	yk = pfn -> params . Range [ k * 2 + 1 ]		5096533	0		=			
ANR	5096696	Identifier	yk		5096533	0					
ANR	5096697	ArrayIndexing	pfn -> params . Range [ k * 2 + 1 ]		5096533	1					
ANR	5096698	MemberAccess	pfn -> params . Range		5096533	0					
ANR	5096699	PtrMemberAccess	pfn -> params		5096533	0					
ANR	5096700	Identifier	pfn		5096533	0					
ANR	5096701	Identifier	params		5096533	1					
ANR	5096702	Identifier	Range		5096533	1					
ANR	5096703	AdditiveExpression	k * 2 + 1		5096533	1		+			
ANR	5096704	MultiplicativeExpression	k * 2		5096533	0		*			
ANR	5096705	Identifier	k		5096533	0					
ANR	5096706	PrimaryExpression	2		5096533	1					
ANR	5096707	PrimaryExpression	1		5096533	1					
ANR	5096708	ExpressionStatement	out [ k ] = yk	813:8:27434:27445	5096533	3	True				
ANR	5096709	AssignmentExpression	out [ k ] = yk		5096533	0		=			
ANR	5096710	ArrayIndexing	out [ k ]		5096533	0					
ANR	5096711	Identifier	out		5096533	0					
ANR	5096712	Identifier	k		5096533	1					
ANR	5096713	Identifier	yk		5096533	1					
ANR	5096714	ReturnStatement	return 0 ;	815:4:27457:27465	5096533	7	True				
ANR	5096715	PrimaryExpression	0		5096533	0					
ANR	5096716	ReturnType	static int		5096533	1					
ANR	5096717	Identifier	fn_Sd_evaluate_multicubic_cached		5096533	2					
ANR	5096718	ParameterList	"const gs_function_Sd_t * pfn , const float * in , float * out"		5096533	3					
ANR	5096719	Parameter	const gs_function_Sd_t * pfn	796:33:26830:26856	5096533	0	True				
ANR	5096720	ParameterType	const gs_function_Sd_t *		5096533	0					
ANR	5096721	Identifier	pfn		5096533	1					
ANR	5096722	Parameter	const float * in	796:62:26859:26873	5096533	1	True				
ANR	5096723	ParameterType	const float *		5096533	0					
ANR	5096724	Identifier	in		5096533	1					
ANR	5096725	Parameter	float * out	796:79:26876:26885	5096533	2	True				
ANR	5096726	ParameterType	float *		5096533	0					
ANR	5096727	Identifier	out		5096533	1					
ANR	5096728	CFGEntryNode	ENTRY		5096533		True				
ANR	5096729	CFGExitNode	EXIT		5096533		True				
ANR	5096730	Symbol	make_interpolation_tensor		5096533						
ANR	5096731	Symbol	* pfn		5096533						
ANR	5096732	Symbol	pfn -> params . m		5096533						
ANR	5096733	Symbol	pfn -> params . Range		5096533						
ANR	5096734	Symbol	code		5096533						
ANR	5096735	Symbol	pfn -> params . n		5096533						
ANR	5096736	Symbol	* y		5096533						
ANR	5096737	Symbol	in		5096533						
ANR	5096738	Symbol	I		5096533						
ANR	5096739	Symbol	k		5096533						
ANR	5096740	Symbol	* * pfn		5096533						
ANR	5096741	Symbol	out		5096533						
ANR	5096742	Symbol	yk		5096533						
ANR	5096743	Symbol	T		5096533						
ANR	5096744	Symbol	* k		5096533						
ANR	5096745	Symbol	* pfn -> params . Range		5096533						
ANR	5096746	Symbol	* out		5096533						
ANR	5096747	Symbol	pfn		5096533						
ANR	5096748	Symbol	y		5096533						
ANR	5096749	Symbol	pfn -> params		5096533						
ANR	5096750	Symbol	* pfn -> params		5096533						
ANR	5096751	Function	fn_Sd_evaluate	819:0:27505:28533							
ANR	5096752	FunctionDef	"fn_Sd_evaluate (const gs_function_t * pfn_common , const float * in , float * out)"		5096751	0					
ANR	5096753	CompoundStatement		821:0:27594:28533	5096751	0					
ANR	5096754	IdentifierDeclStatement	const gs_function_Sd_t * pfn = ( const gs_function_Sd_t * ) pfn_common ;	822:4:27600:27666	5096751	0	True				
ANR	5096755	IdentifierDecl	* pfn = ( const gs_function_Sd_t * ) pfn_common		5096751	0					
ANR	5096756	IdentifierDeclType	const gs_function_Sd_t *		5096751	0					
ANR	5096757	Identifier	pfn		5096751	1					
ANR	5096758	AssignmentExpression	* pfn = ( const gs_function_Sd_t * ) pfn_common		5096751	2		=			
ANR	5096759	Identifier	pfn		5096751	0					
ANR	5096760	CastExpression	( const gs_function_Sd_t * ) pfn_common		5096751	1					
ANR	5096761	CastTarget	const gs_function_Sd_t *		5096751	0					
ANR	5096762	Identifier	pfn_common		5096751	1					
ANR	5096763	IdentifierDeclStatement	int code ;	823:4:27672:27680	5096751	1	True				
ANR	5096764	IdentifierDecl	code		5096751	0					
ANR	5096765	IdentifierDeclType	int		5096751	0					
ANR	5096766	Identifier	code		5096751	1					
ANR	5096767	IfStatement	if ( pfn -> params . Order == 3 )		5096751	2					
ANR	5096768	Condition	pfn -> params . Order == 3	825:8:27691:27712	5096751	0	True				
ANR	5096769	EqualityExpression	pfn -> params . Order == 3		5096751	0		==			
ANR	5096770	MemberAccess	pfn -> params . Order		5096751	0					
ANR	5096771	PtrMemberAccess	pfn -> params		5096751	0					
ANR	5096772	Identifier	pfn		5096751	0					
ANR	5096773	Identifier	params		5096751	1					
ANR	5096774	Identifier	Order		5096751	1					
ANR	5096775	PrimaryExpression	3		5096751	1					
ANR	5096776	CompoundStatement		5:32:120:120	5096751	1					
ANR	5096777	IfStatement	if ( POLE_CACHE_GENERIC_1D || pfn -> params . m > 1 )		5096751	0					
ANR	5096778	Condition	POLE_CACHE_GENERIC_1D || pfn -> params . m > 1	826:12:27729:27770	5096751	0	True				
ANR	5096779	OrExpression	POLE_CACHE_GENERIC_1D || pfn -> params . m > 1		5096751	0		||			
ANR	5096780	Identifier	POLE_CACHE_GENERIC_1D		5096751	0					
ANR	5096781	RelationalExpression	pfn -> params . m > 1		5096751	1		>			
ANR	5096782	MemberAccess	pfn -> params . m		5096751	0					
ANR	5096783	PtrMemberAccess	pfn -> params		5096751	0					
ANR	5096784	Identifier	pfn		5096751	0					
ANR	5096785	Identifier	params		5096751	1					
ANR	5096786	Identifier	m		5096751	1					
ANR	5096787	PrimaryExpression	1		5096751	1					
ANR	5096788	ExpressionStatement	"code = fn_Sd_evaluate_multicubic_cached ( pfn , in , out )"	827:12:27785:27838	5096751	1	True				
ANR	5096789	AssignmentExpression	"code = fn_Sd_evaluate_multicubic_cached ( pfn , in , out )"		5096751	0		=			
ANR	5096790	Identifier	code		5096751	0					
ANR	5096791	CallExpression	"fn_Sd_evaluate_multicubic_cached ( pfn , in , out )"		5096751	1					
ANR	5096792	Callee	fn_Sd_evaluate_multicubic_cached		5096751	0					
ANR	5096793	Identifier	fn_Sd_evaluate_multicubic_cached		5096751	0					
ANR	5096794	ArgumentList	pfn		5096751	1					
ANR	5096795	Argument	pfn		5096751	0					
ANR	5096796	Identifier	pfn		5096751	0					
ANR	5096797	Argument	in		5096751	1					
ANR	5096798	Identifier	in		5096751	0					
ANR	5096799	Argument	out		5096751	2					
ANR	5096800	Identifier	out		5096751	0					
ANR	5096801	ElseStatement	else		5096751	0					
ANR	5096802	ExpressionStatement	"code = fn_Sd_evaluate_cubic_cached_1d ( pfn , in , out )"	829:12:27865:27916	5096751	0	True				
ANR	5096803	AssignmentExpression	"code = fn_Sd_evaluate_cubic_cached_1d ( pfn , in , out )"		5096751	0		=			
ANR	5096804	Identifier	code		5096751	0					
ANR	5096805	CallExpression	"fn_Sd_evaluate_cubic_cached_1d ( pfn , in , out )"		5096751	1					
ANR	5096806	Callee	fn_Sd_evaluate_cubic_cached_1d		5096751	0					
ANR	5096807	Identifier	fn_Sd_evaluate_cubic_cached_1d		5096751	0					
ANR	5096808	ArgumentList	pfn		5096751	1					
ANR	5096809	Argument	pfn		5096751	0					
ANR	5096810	Identifier	pfn		5096751	0					
ANR	5096811	Argument	in		5096751	1					
ANR	5096812	Identifier	in		5096751	0					
ANR	5096813	Argument	out		5096751	2					
ANR	5096814	Identifier	out		5096751	0					
ANR	5096815	Statement	if	830:2:27920:27921	5096751	1	True				
ANR	5096816	Statement	POLE_CACHE_DEBUG	830:5:27923:27938	5096751	2	True				
ANR	5096817	CompoundStatement		12:12:388:400	5096751	3					
ANR	5096818	IdentifierDeclStatement	float y [ max_Sd_n ] ;	831:12:27952:27969	5096751	0	True				
ANR	5096819	IdentifierDecl	y [ max_Sd_n ]		5096751	0					
ANR	5096820	IdentifierDeclType	float [ max_Sd_n ]		5096751	0					
ANR	5096821	Identifier	y		5096751	1					
ANR	5096822	Identifier	max_Sd_n		5096751	2					
ANR	5096823	IdentifierDeclStatement	"int k , code1 ;"	832:12:27983:27995	5096751	1	True				
ANR	5096824	IdentifierDecl	k		5096751	0					
ANR	5096825	IdentifierDeclType	int		5096751	0					
ANR	5096826	Identifier	k		5096751	1					
ANR	5096827	IdentifierDecl	code1		5096751	1					
ANR	5096828	IdentifierDeclType	int		5096751	0					
ANR	5096829	Identifier	code1		5096751	1					
ANR	5096830	ExpressionStatement	"code1 = fn_Sd_evaluate_general ( pfn_common , in , y )"	834:12:28010:28059	5096751	2	True				
ANR	5096831	AssignmentExpression	"code1 = fn_Sd_evaluate_general ( pfn_common , in , y )"		5096751	0		=			
ANR	5096832	Identifier	code1		5096751	0					
ANR	5096833	CallExpression	"fn_Sd_evaluate_general ( pfn_common , in , y )"		5096751	1					
ANR	5096834	Callee	fn_Sd_evaluate_general		5096751	0					
ANR	5096835	Identifier	fn_Sd_evaluate_general		5096751	0					
ANR	5096836	ArgumentList	pfn_common		5096751	1					
ANR	5096837	Argument	pfn_common		5096751	0					
ANR	5096838	Identifier	pfn_common		5096751	0					
ANR	5096839	Argument	in		5096751	1					
ANR	5096840	Identifier	in		5096751	0					
ANR	5096841	Argument	y		5096751	2					
ANR	5096842	Identifier	y		5096751	0					
ANR	5096843	IfStatement	if ( code != code1 )		5096751	3					
ANR	5096844	Condition	code != code1	835:16:28077:28089	5096751	0	True				
ANR	5096845	EqualityExpression	code != code1		5096751	0		!=			
ANR	5096846	Identifier	code		5096751	0					
ANR	5096847	Identifier	code1		5096751	1					
ANR	5096848	ExpressionStatement	return_error ( gs_error_unregistered )	836:16:28108:28143	5096751	1	True				
ANR	5096849	CallExpression	return_error ( gs_error_unregistered )		5096751	0					
ANR	5096850	Callee	return_error		5096751	0					
ANR	5096851	Identifier	return_error		5096751	0					
ANR	5096852	ArgumentList	gs_error_unregistered		5096751	1					
ANR	5096853	Argument	gs_error_unregistered		5096751	0					
ANR	5096854	Identifier	gs_error_unregistered		5096751	0					
ANR	5096855	ForStatement	for ( k = 0 ; k < pfn -> params . n ; k ++ )		5096751	4					
ANR	5096856	ForInit	k = 0 ;	837:17:28185:28190	5096751	0	True				
ANR	5096857	AssignmentExpression	k = 0		5096751	0		=			
ANR	5096858	Identifier	k		5096751	0					
ANR	5096859	PrimaryExpression	0		5096751	1					
ANR	5096860	Condition	k < pfn -> params . n	837:24:28192:28208	5096751	1	True				
ANR	5096861	RelationalExpression	k < pfn -> params . n		5096751	0		<			
ANR	5096862	Identifier	k		5096751	0					
ANR	5096863	MemberAccess	pfn -> params . n		5096751	1					
ANR	5096864	PtrMemberAccess	pfn -> params		5096751	0					
ANR	5096865	Identifier	pfn		5096751	0					
ANR	5096866	Identifier	params		5096751	1					
ANR	5096867	Identifier	n		5096751	1					
ANR	5096868	PostIncDecOperationExpression	k ++	837:43:28211:28213	5096751	2	True				
ANR	5096869	Identifier	k		5096751	0					
ANR	5096870	IncDec	++		5096751	1					
ANR	5096871	CompoundStatement		17:48:621:621	5096751	3					
ANR	5096872	IfStatement	if ( any_abs ( y [ k ] - out [ k ] ) > 1e-6 * ( pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ] ) )		5096751	0					
ANR	5096873	Condition	any_abs ( y [ k ] - out [ k ] ) > 1e-6 * ( pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ] )	838:20:28238:28330	5096751	0	True				
ANR	5096874	RelationalExpression	any_abs ( y [ k ] - out [ k ] ) > 1e-6 * ( pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ] )		5096751	0		>			
ANR	5096875	CallExpression	any_abs ( y [ k ] - out [ k ] )		5096751	0					
ANR	5096876	Callee	any_abs		5096751	0					
ANR	5096877	Identifier	any_abs		5096751	0					
ANR	5096878	ArgumentList	y [ k ] - out [ k ]		5096751	1					
ANR	5096879	Argument	y [ k ] - out [ k ]		5096751	0					
ANR	5096880	AdditiveExpression	y [ k ] - out [ k ]		5096751	0		-			
ANR	5096881	ArrayIndexing	y [ k ]		5096751	0					
ANR	5096882	Identifier	y		5096751	0					
ANR	5096883	Identifier	k		5096751	1					
ANR	5096884	ArrayIndexing	out [ k ]		5096751	1					
ANR	5096885	Identifier	out		5096751	0					
ANR	5096886	Identifier	k		5096751	1					
ANR	5096887	MultiplicativeExpression	1e-6 * ( pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ] )		5096751	1		*			
ANR	5096888	PrimaryExpression	1e-6		5096751	0					
ANR	5096889	AdditiveExpression	pfn -> params . Range [ k * 2 + 1 ] - pfn -> params . Range [ k * 2 + 0 ]		5096751	1		-			
ANR	5096890	ArrayIndexing	pfn -> params . Range [ k * 2 + 1 ]		5096751	0					
ANR	5096891	MemberAccess	pfn -> params . Range		5096751	0					
ANR	5096892	PtrMemberAccess	pfn -> params		5096751	0					
ANR	5096893	Identifier	pfn		5096751	0					
ANR	5096894	Identifier	params		5096751	1					
ANR	5096895	Identifier	Range		5096751	1					
ANR	5096896	AdditiveExpression	k * 2 + 1		5096751	1		+			
ANR	5096897	MultiplicativeExpression	k * 2		5096751	0		*			
ANR	5096898	Identifier	k		5096751	0					
ANR	5096899	PrimaryExpression	2		5096751	1					
ANR	5096900	PrimaryExpression	1		5096751	1					
ANR	5096901	ArrayIndexing	pfn -> params . Range [ k * 2 + 0 ]		5096751	1					
ANR	5096902	MemberAccess	pfn -> params . Range		5096751	0					
ANR	5096903	PtrMemberAccess	pfn -> params		5096751	0					
ANR	5096904	Identifier	pfn		5096751	0					
ANR	5096905	Identifier	params		5096751	1					
ANR	5096906	Identifier	Range		5096751	1					
ANR	5096907	AdditiveExpression	k * 2 + 0		5096751	1		+			
ANR	5096908	MultiplicativeExpression	k * 2		5096751	0		*			
ANR	5096909	Identifier	k		5096751	0					
ANR	5096910	PrimaryExpression	2		5096751	1					
ANR	5096911	PrimaryExpression	0		5096751	1					
ANR	5096912	ExpressionStatement	return_error ( gs_error_unregistered )	839:20:28353:28388	5096751	1	True				
ANR	5096913	CallExpression	return_error ( gs_error_unregistered )		5096751	0					
ANR	5096914	Callee	return_error		5096751	0					
ANR	5096915	Identifier	return_error		5096751	0					
ANR	5096916	ArgumentList	gs_error_unregistered		5096751	1					
ANR	5096917	Argument	gs_error_unregistered		5096751	0					
ANR	5096918	Identifier	gs_error_unregistered		5096751	0					
ANR	5096919	Statement	endif	842:2:28439:28443	5096751	4	True				
ANR	5096920	ElseStatement	else		5096751	0					
ANR	5096921	ExpressionStatement	"code = fn_Sd_evaluate_general ( pfn_common , in , out )"	844:8:28464:28514	5096751	0	True				
ANR	5096922	AssignmentExpression	"code = fn_Sd_evaluate_general ( pfn_common , in , out )"		5096751	0		=			
ANR	5096923	Identifier	code		5096751	0					
ANR	5096924	CallExpression	"fn_Sd_evaluate_general ( pfn_common , in , out )"		5096751	1					
ANR	5096925	Callee	fn_Sd_evaluate_general		5096751	0					
ANR	5096926	Identifier	fn_Sd_evaluate_general		5096751	0					
ANR	5096927	ArgumentList	pfn_common		5096751	1					
ANR	5096928	Argument	pfn_common		5096751	0					
ANR	5096929	Identifier	pfn_common		5096751	0					
ANR	5096930	Argument	in		5096751	1					
ANR	5096931	Identifier	in		5096751	0					
ANR	5096932	Argument	out		5096751	2					
ANR	5096933	Identifier	out		5096751	0					
ANR	5096934	ReturnStatement	return code ;	845:4:28520:28531	5096751	3	True				
ANR	5096935	Identifier	code		5096751	0					
ANR	5096936	ReturnType	static int		5096751	1					
ANR	5096937	Identifier	fn_Sd_evaluate		5096751	2					
ANR	5096938	ParameterList	"const gs_function_t * pfn_common , const float * in , float * out"		5096751	3					
ANR	5096939	Parameter	const gs_function_t * pfn_common	820:15:27531:27562	5096751	0	True				
ANR	5096940	ParameterType	const gs_function_t *		5096751	0					
ANR	5096941	Identifier	pfn_common		5096751	1					
ANR	5096942	Parameter	const float * in	820:49:27565:27579	5096751	1	True				
ANR	5096943	ParameterType	const float *		5096751	0					
ANR	5096944	Identifier	in		5096751	1					
ANR	5096945	Parameter	float * out	820:66:27582:27591	5096751	2	True				
ANR	5096946	ParameterType	float *		5096751	0					
ANR	5096947	Identifier	out		5096751	1					
ANR	5096948	CFGEntryNode	ENTRY		5096751		True				
ANR	5096949	CFGExitNode	EXIT		5096751		True				
ANR	5096950	Symbol	pfn -> params . m		5096751						
ANR	5096951	Symbol	gs_error_unregistered		5096751						
ANR	5096952	Symbol	pfn -> params . Range		5096751						
ANR	5096953	Symbol	code		5096751						
ANR	5096954	Symbol	code1		5096751						
ANR	5096955	Symbol	pfn -> params . n		5096751						
ANR	5096956	Symbol	* y		5096751						
ANR	5096957	Symbol	pfn_common		5096751						
ANR	5096958	Symbol	* * pfn		5096751						
ANR	5096959	Symbol	fn_Sd_evaluate_multicubic_cached		5096751						
ANR	5096960	Symbol	out		5096751						
ANR	5096961	Symbol	pfn -> params . Order		5096751						
ANR	5096962	Symbol	* pfn -> params . Range		5096751						
ANR	5096963	Symbol	any_abs		5096751						
ANR	5096964	Symbol	POLE_CACHE_GENERIC_1D		5096751						
ANR	5096965	Symbol	* pfn		5096751						
ANR	5096966	Symbol	fn_Sd_evaluate_general		5096751						
ANR	5096967	Symbol	in		5096751						
ANR	5096968	Symbol	k		5096751						
ANR	5096969	Symbol	* k		5096751						
ANR	5096970	Symbol	* out		5096751						
ANR	5096971	Symbol	pfn		5096751						
ANR	5096972	Symbol	y		5096751						
ANR	5096973	Symbol	fn_Sd_evaluate_cubic_cached_1d		5096751						
ANR	5096974	Symbol	pfn -> params		5096751						
ANR	5096975	Symbol	* pfn -> params		5096751						
ANR	5096976	DeclStmt									
ANR	5096977	Decl							float	float	d0
ANR	5096978	Decl							float	float	d1
ANR	5096979	DeclStmt									
ANR	5096980	Decl							float	float	v0
ANR	5096981	Decl							float	float	v1
ANR	5096982	DeclStmt									
ANR	5096983	Decl							float	float	e0
ANR	5096984	Decl							float	float	e1
ANR	5096985	Decl							float	float	w0
ANR	5096986	Decl							float	float	w1
ANR	5096987	Decl							float	float	w
ANR	5096988	DeclStmt									
ANR	5096989	Decl							const float	const float	small_noise
ANR	5096990	Function	copy_poles	890:0:29923:30813							
ANR	5096991	FunctionDef	"copy_poles (const gs_function_Sd_t * pfn , int * I , double * T0 , double * T1 , int a_offset , int ii , double * pole , int p_offset , int pole_step)"		5096990	0					
ANR	5096992	CompoundStatement		893:0:30087:30813	5096990	0					
ANR	5096993	IdentifierDeclStatement	"int i , ei , sa , code ;"	894:4:30093:30112	5096990	0	True				
ANR	5096994	IdentifierDecl	i		5096990	0					
ANR	5096995	IdentifierDeclType	int		5096990	0					
ANR	5096996	Identifier	i		5096990	1					
ANR	5096997	IdentifierDecl	ei		5096990	1					
ANR	5096998	IdentifierDeclType	int		5096990	0					
ANR	5096999	Identifier	ei		5096990	1					
ANR	5097000	IdentifierDecl	sa		5096990	2					
ANR	5097001	IdentifierDeclType	int		5096990	0					
ANR	5097002	Identifier	sa		5096990	1					
ANR	5097003	IdentifierDecl	code		5096990	3					
ANR	5097004	IdentifierDeclType	int		5096990	0					
ANR	5097005	Identifier	code		5096990	1					
ANR	5097006	IdentifierDeclStatement	int order = pfn -> params . Order ;	895:4:30118:30147	5096990	1	True				
ANR	5097007	IdentifierDecl	order = pfn -> params . Order		5096990	0					
ANR	5097008	IdentifierDeclType	int		5096990	0					
ANR	5097009	Identifier	order		5096990	1					
ANR	5097010	AssignmentExpression	order = pfn -> params . Order		5096990	2		=			
ANR	5097011	Identifier	order		5096990	0					
ANR	5097012	MemberAccess	pfn -> params . Order		5096990	1					
ANR	5097013	PtrMemberAccess	pfn -> params		5096990	0					
ANR	5097014	Identifier	pfn		5096990	0					
ANR	5097015	Identifier	params		5096990	1					
ANR	5097016	Identifier	Order		5096990	1					
ANR	5097017	IfStatement	if ( pole_step <= 0 )		5096990	2					
ANR	5097018	Condition	pole_step <= 0	897:8:30158:30171	5096990	0	True				
ANR	5097019	RelationalExpression	pole_step <= 0		5096990	0		<=			
ANR	5097020	Identifier	pole_step		5096990	0					
ANR	5097021	PrimaryExpression	0		5096990	1					
ANR	5097022	ExpressionStatement	return_error ( gs_error_limitcheck )	898:8:30182:30215	5096990	1	True				
ANR	5097023	CallExpression	return_error ( gs_error_limitcheck )		5096990	0					
ANR	5097024	Callee	return_error		5096990	0					
ANR	5097025	Identifier	return_error		5096990	0					
ANR	5097026	ArgumentList	gs_error_limitcheck		5096990	1					
ANR	5097027	Argument	gs_error_limitcheck		5096990	0					
ANR	5097028	Identifier	gs_error_limitcheck		5096990	0					
ANR	5097029	ExpressionStatement	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )	899:4:30245:30284	5096990	3	True				
ANR	5097030	AssignmentExpression	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		5096990	0		=			
ANR	5097031	Identifier	ei		5096990	0					
ANR	5097032	ConditionalExpression	T0 [ ii ] == T1 [ ii ] ? 1 : order + 1		5096990	1					
ANR	5097033	Condition	T0 [ ii ] == T1 [ ii ]		5096990	0					
ANR	5097034	EqualityExpression	T0 [ ii ] == T1 [ ii ]		5096990	0		==			
ANR	5097035	ArrayIndexing	T0 [ ii ]		5096990	0					
ANR	5097036	Identifier	T0		5096990	0					
ANR	5097037	Identifier	ii		5096990	1					
ANR	5097038	ArrayIndexing	T1 [ ii ]		5096990	1					
ANR	5097039	Identifier	T1		5096990	0					
ANR	5097040	Identifier	ii		5096990	1					
ANR	5097041	PrimaryExpression	1		5096990	1					
ANR	5097042	AdditiveExpression	order + 1		5096990	2		+			
ANR	5097043	Identifier	order		5096990	0					
ANR	5097044	PrimaryExpression	1		5096990	1					
ANR	5097045	ExpressionStatement	sa = pfn -> params . array_step [ ii ]	900:4:30290:30321	5096990	4	True				
ANR	5097046	AssignmentExpression	sa = pfn -> params . array_step [ ii ]		5096990	0		=			
ANR	5097047	Identifier	sa		5096990	0					
ANR	5097048	ArrayIndexing	pfn -> params . array_step [ ii ]		5096990	1					
ANR	5097049	MemberAccess	pfn -> params . array_step		5096990	0					
ANR	5097050	PtrMemberAccess	pfn -> params		5096990	0					
ANR	5097051	Identifier	pfn		5096990	0					
ANR	5097052	Identifier	params		5096990	1					
ANR	5097053	Identifier	array_step		5096990	1					
ANR	5097054	Identifier	ii		5096990	1					
ANR	5097055	IfStatement	if ( ii == 0 )		5096990	5					
ANR	5097056	Condition	ii == 0	901:8:30331:30337	5096990	0	True				
ANR	5097057	EqualityExpression	ii == 0		5096990	0		==			
ANR	5097058	Identifier	ii		5096990	0					
ANR	5097059	PrimaryExpression	0		5096990	1					
ANR	5097060	CompoundStatement		9:17:252:252	5096990	1					
ANR	5097061	ForStatement	for ( i = 0 ; i < ei ; i ++ )		5096990	0					
ANR	5097062	ForInit	i = 0 ;	902:13:30355:30360	5096990	0	True				
ANR	5097063	AssignmentExpression	i = 0		5096990	0		=			
ANR	5097064	Identifier	i		5096990	0					
ANR	5097065	PrimaryExpression	0		5096990	1					
ANR	5097066	Condition	i < ei	902:20:30362:30367	5096990	1	True				
ANR	5097067	RelationalExpression	i < ei		5096990	0		<			
ANR	5097068	Identifier	i		5096990	0					
ANR	5097069	Identifier	ei		5096990	1					
ANR	5097070	PostIncDecOperationExpression	i ++	902:28:30370:30372	5096990	2	True				
ANR	5097071	Identifier	i		5096990	0					
ANR	5097072	IncDec	++		5096990	1					
ANR	5097073	ExpressionStatement	* ( pole + p_offset + i * pole_step ) = * ( pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order ) )	903:12:30387:30506	5096990	3	True				
ANR	5097074	AssignmentExpression	* ( pole + p_offset + i * pole_step ) = * ( pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order ) )		5096990	0		=			
ANR	5097075	UnaryOperationExpression	* ( pole + p_offset + i * pole_step )		5096990	0					
ANR	5097076	UnaryOperator	*		5096990	0					
ANR	5097077	AdditiveExpression	pole + p_offset + i * pole_step		5096990	1		+			
ANR	5097078	Identifier	pole		5096990	0					
ANR	5097079	AdditiveExpression	p_offset + i * pole_step		5096990	1		+			
ANR	5097080	Identifier	p_offset		5096990	0					
ANR	5097081	MultiplicativeExpression	i * pole_step		5096990	1		*			
ANR	5097082	Identifier	i		5096990	0					
ANR	5097083	Identifier	pole_step		5096990	1					
ANR	5097084	UnaryOperationExpression	* ( pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order ) )		5096990	1					
ANR	5097085	UnaryOperator	*		5096990	0					
ANR	5097086	AdditiveExpression	pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order )		5096990	1		+			
ANR	5097087	MemberAccess	pfn -> params . pole		5096990	0					
ANR	5097088	PtrMemberAccess	pfn -> params		5096990	0					
ANR	5097089	Identifier	pfn		5096990	0					
ANR	5097090	Identifier	params		5096990	1					
ANR	5097091	Identifier	pole		5096990	1					
ANR	5097092	AdditiveExpression	a_offset + I [ ii ] * sa + i * ( sa / order )		5096990	1		+			
ANR	5097093	Identifier	a_offset		5096990	0					
ANR	5097094	AdditiveExpression	I [ ii ] * sa + i * ( sa / order )		5096990	1		+			
ANR	5097095	MultiplicativeExpression	I [ ii ] * sa		5096990	0		*			
ANR	5097096	ArrayIndexing	I [ ii ]		5096990	0					
ANR	5097097	Identifier	I		5096990	0					
ANR	5097098	Identifier	ii		5096990	1					
ANR	5097099	Identifier	sa		5096990	1					
ANR	5097100	MultiplicativeExpression	i * ( sa / order )		5096990	1		*			
ANR	5097101	Identifier	i		5096990	0					
ANR	5097102	MultiplicativeExpression	sa / order		5096990	1		/			
ANR	5097103	Identifier	sa		5096990	0					
ANR	5097104	Identifier	order		5096990	1					
ANR	5097105	ElseStatement	else		5096990	0					
ANR	5097106	CompoundStatement		13:11:431:431	5096990	0					
ANR	5097107	ForStatement	for ( i = 0 ; i < ei ; i ++ )		5096990	0					
ANR	5097108	ForInit	i = 0 ;	906:13:30534:30539	5096990	0	True				
ANR	5097109	AssignmentExpression	i = 0		5096990	0		=			
ANR	5097110	Identifier	i		5096990	0					
ANR	5097111	PrimaryExpression	0		5096990	1					
ANR	5097112	Condition	i < ei	906:20:30541:30546	5096990	1	True				
ANR	5097113	RelationalExpression	i < ei		5096990	0		<			
ANR	5097114	Identifier	i		5096990	0					
ANR	5097115	Identifier	ei		5096990	1					
ANR	5097116	PostIncDecOperationExpression	i ++	906:28:30549:30551	5096990	2	True				
ANR	5097117	Identifier	i		5096990	0					
ANR	5097118	IncDec	++		5096990	1					
ANR	5097119	CompoundStatement		14:33:466:466	5096990	3					
ANR	5097120	ExpressionStatement	"code = copy_poles ( pfn , I , T0 , T1 , a_offset + I [ ii ] * sa + i * ( sa / order ) , ii - 1 , pole , p_offset + i * pole_step , pole_step / 4 )"	907:12:30568:30726	5096990	0	True				
ANR	5097121	AssignmentExpression	"code = copy_poles ( pfn , I , T0 , T1 , a_offset + I [ ii ] * sa + i * ( sa / order ) , ii - 1 , pole , p_offset + i * pole_step , pole_step / 4 )"		5096990	0		=			
ANR	5097122	Identifier	code		5096990	0					
ANR	5097123	CallExpression	"copy_poles ( pfn , I , T0 , T1 , a_offset + I [ ii ] * sa + i * ( sa / order ) , ii - 1 , pole , p_offset + i * pole_step , pole_step / 4 )"		5096990	1					
ANR	5097124	Callee	copy_poles		5096990	0					
ANR	5097125	Identifier	copy_poles		5096990	0					
ANR	5097126	ArgumentList	pfn		5096990	1					
ANR	5097127	Argument	pfn		5096990	0					
ANR	5097128	Identifier	pfn		5096990	0					
ANR	5097129	Argument	I		5096990	1					
ANR	5097130	Identifier	I		5096990	0					
ANR	5097131	Argument	T0		5096990	2					
ANR	5097132	Identifier	T0		5096990	0					
ANR	5097133	Argument	T1		5096990	3					
ANR	5097134	Identifier	T1		5096990	0					
ANR	5097135	Argument	a_offset + I [ ii ] * sa + i * ( sa / order )		5096990	4					
ANR	5097136	AdditiveExpression	a_offset + I [ ii ] * sa + i * ( sa / order )		5096990	0		+			
ANR	5097137	Identifier	a_offset		5096990	0					
ANR	5097138	AdditiveExpression	I [ ii ] * sa + i * ( sa / order )		5096990	1		+			
ANR	5097139	MultiplicativeExpression	I [ ii ] * sa		5096990	0		*			
ANR	5097140	ArrayIndexing	I [ ii ]		5096990	0					
ANR	5097141	Identifier	I		5096990	0					
ANR	5097142	Identifier	ii		5096990	1					
ANR	5097143	Identifier	sa		5096990	1					
ANR	5097144	MultiplicativeExpression	i * ( sa / order )		5096990	1		*			
ANR	5097145	Identifier	i		5096990	0					
ANR	5097146	MultiplicativeExpression	sa / order		5096990	1		/			
ANR	5097147	Identifier	sa		5096990	0					
ANR	5097148	Identifier	order		5096990	1					
ANR	5097149	Argument	ii - 1		5096990	5					
ANR	5097150	AdditiveExpression	ii - 1		5096990	0		-			
ANR	5097151	Identifier	ii		5096990	0					
ANR	5097152	PrimaryExpression	1		5096990	1					
ANR	5097153	Argument	pole		5096990	6					
ANR	5097154	Identifier	pole		5096990	0					
ANR	5097155	Argument	p_offset + i * pole_step		5096990	7					
ANR	5097156	AdditiveExpression	p_offset + i * pole_step		5096990	0		+			
ANR	5097157	Identifier	p_offset		5096990	0					
ANR	5097158	MultiplicativeExpression	i * pole_step		5096990	1		*			
ANR	5097159	Identifier	i		5096990	0					
ANR	5097160	Identifier	pole_step		5096990	1					
ANR	5097161	Argument	pole_step / 4		5096990	8					
ANR	5097162	MultiplicativeExpression	pole_step / 4		5096990	0		/			
ANR	5097163	Identifier	pole_step		5096990	0					
ANR	5097164	PrimaryExpression	4		5096990	1					
ANR	5097165	IfStatement	if ( code < 0 )		5096990	1					
ANR	5097166	Condition	code < 0	909:16:30744:30751	5096990	0	True				
ANR	5097167	RelationalExpression	code < 0		5096990	0		<			
ANR	5097168	Identifier	code		5096990	0					
ANR	5097169	PrimaryExpression	0		5096990	1					
ANR	5097170	ReturnStatement	return code ;	910:16:30770:30781	5096990	1	True				
ANR	5097171	Identifier	code		5096990	0					
ANR	5097172	ReturnStatement	return 0 ;	913:4:30803:30811	5096990	6	True				
ANR	5097173	PrimaryExpression	0		5096990	0					
ANR	5097174	ReturnType	static int		5096990	1					
ANR	5097175	Identifier	copy_poles		5096990	2					
ANR	5097176	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T0 , double * T1 , int a_offset , int ii , double * pole , int p_offset , int pole_step"		5096990	3					
ANR	5097177	Parameter	const gs_function_Sd_t * pfn	891:11:29945:29971	5096990	0	True				
ANR	5097178	ParameterType	const gs_function_Sd_t *		5096990	0					
ANR	5097179	Identifier	pfn		5096990	1					
ANR	5097180	Parameter	int * I	891:40:29974:29979	5096990	1	True				
ANR	5097181	ParameterType	int *		5096990	0					
ANR	5097182	Identifier	I		5096990	1					
ANR	5097183	Parameter	double * T0	891:48:29982:29991	5096990	2	True				
ANR	5097184	ParameterType	double *		5096990	0					
ANR	5097185	Identifier	T0		5096990	1					
ANR	5097186	Parameter	double * T1	891:60:29994:30003	5096990	3	True				
ANR	5097187	ParameterType	double *		5096990	0					
ANR	5097188	Identifier	T1		5096990	1					
ANR	5097189	Parameter	int a_offset	891:72:30006:30017	5096990	4	True				
ANR	5097190	ParameterType	int		5096990	0					
ANR	5097191	Identifier	a_offset		5096990	1					
ANR	5097192	Parameter	int ii	892:16:30036:30041	5096990	5	True				
ANR	5097193	ParameterType	int		5096990	0					
ANR	5097194	Identifier	ii		5096990	1					
ANR	5097195	Parameter	double * pole	892:24:30044:30055	5096990	6	True				
ANR	5097196	ParameterType	double *		5096990	0					
ANR	5097197	Identifier	pole		5096990	1					
ANR	5097198	Parameter	int p_offset	892:38:30058:30069	5096990	7	True				
ANR	5097199	ParameterType	int		5096990	0					
ANR	5097200	Identifier	p_offset		5096990	1					
ANR	5097201	Parameter	int pole_step	892:52:30072:30084	5096990	8	True				
ANR	5097202	ParameterType	int		5096990	0					
ANR	5097203	Identifier	pole_step		5096990	1					
ANR	5097204	CFGEntryNode	ENTRY		5096990		True				
ANR	5097205	CFGExitNode	EXIT		5096990		True				
ANR	5097206	Symbol	* T1		5096990						
ANR	5097207	Symbol	* T0		5096990						
ANR	5097208	Symbol	* * I		5096990						
ANR	5097209	Symbol	code		5096990						
ANR	5097210	Symbol	* ii		5096990						
ANR	5097211	Symbol	a_offset		5096990						
ANR	5097212	Symbol	I		5096990						
ANR	5097213	Symbol	pole		5096990						
ANR	5097214	Symbol	* * pfn		5096990						
ANR	5097215	Symbol	* pole_step		5096990						
ANR	5097216	Symbol	pole_step		5096990						
ANR	5097217	Symbol	* pole		5096990						
ANR	5097218	Symbol	sa		5096990						
ANR	5097219	Symbol	* * ii		5096990						
ANR	5097220	Symbol	pfn -> params . pole		5096990						
ANR	5097221	Symbol	pfn -> params . Order		5096990						
ANR	5097222	Symbol	copy_poles		5096990						
ANR	5097223	Symbol	* I		5096990						
ANR	5097224	Symbol	gs_error_limitcheck		5096990						
ANR	5097225	Symbol	pfn -> params . array_step		5096990						
ANR	5097226	Symbol	* sa		5096990						
ANR	5097227	Symbol	T0		5096990						
ANR	5097228	Symbol	T1		5096990						
ANR	5097229	Symbol	order		5096990						
ANR	5097230	Symbol	ii		5096990						
ANR	5097231	Symbol	* pfn -> params . array_step		5096990						
ANR	5097232	Symbol	* pfn		5096990						
ANR	5097233	Symbol	ei		5096990						
ANR	5097234	Symbol	* ( pfn -> params . pole + a_offset + I [ ii ] * sa + i * ( sa / order ) )		5096990						
ANR	5097235	Symbol	p_offset		5096990						
ANR	5097236	Symbol	i		5096990						
ANR	5097237	Symbol	* order		5096990						
ANR	5097238	Symbol	* ( pole + p_offset + i * pole_step )		5096990						
ANR	5097239	Symbol	* pfn -> params . pole		5096990						
ANR	5097240	Symbol	* i		5096990						
ANR	5097241	Symbol	* a_offset		5096990						
ANR	5097242	Symbol	pfn		5096990						
ANR	5097243	Symbol	pfn -> params		5096990						
ANR	5097244	Symbol	* p_offset		5096990						
ANR	5097245	Symbol	* pfn -> params		5096990						
ANR	5097246	Function	subcurve	916:0:30816:32019							
ANR	5097247	FunctionDef	"subcurve (double * pole , int pole_step , double t0 , double t1)"		5097246	0					
ANR	5097248	CompoundStatement		918:0:30895:32019	5097246	0					
ANR	5097249	IdentifierDeclStatement	double q0 = pole [ pole_step * 0 ] ;	920:4:30961:30992	5097246	0	True				
ANR	5097250	IdentifierDecl	q0 = pole [ pole_step * 0 ]		5097246	0					
ANR	5097251	IdentifierDeclType	double		5097246	0					
ANR	5097252	Identifier	q0		5097246	1					
ANR	5097253	AssignmentExpression	q0 = pole [ pole_step * 0 ]		5097246	2		=			
ANR	5097254	Identifier	q0		5097246	0					
ANR	5097255	ArrayIndexing	pole [ pole_step * 0 ]		5097246	1					
ANR	5097256	Identifier	pole		5097246	0					
ANR	5097257	MultiplicativeExpression	pole_step * 0		5097246	1		*			
ANR	5097258	Identifier	pole_step		5097246	0					
ANR	5097259	PrimaryExpression	0		5097246	1					
ANR	5097260	IdentifierDeclStatement	double q1 = pole [ pole_step * 1 ] ;	921:4:30998:31029	5097246	1	True				
ANR	5097261	IdentifierDecl	q1 = pole [ pole_step * 1 ]		5097246	0					
ANR	5097262	IdentifierDeclType	double		5097246	0					
ANR	5097263	Identifier	q1		5097246	1					
ANR	5097264	AssignmentExpression	q1 = pole [ pole_step * 1 ]		5097246	2		=			
ANR	5097265	Identifier	q1		5097246	0					
ANR	5097266	ArrayIndexing	pole [ pole_step * 1 ]		5097246	1					
ANR	5097267	Identifier	pole		5097246	0					
ANR	5097268	MultiplicativeExpression	pole_step * 1		5097246	1		*			
ANR	5097269	Identifier	pole_step		5097246	0					
ANR	5097270	PrimaryExpression	1		5097246	1					
ANR	5097271	IdentifierDeclStatement	double q2 = pole [ pole_step * 2 ] ;	922:4:31035:31066	5097246	2	True				
ANR	5097272	IdentifierDecl	q2 = pole [ pole_step * 2 ]		5097246	0					
ANR	5097273	IdentifierDeclType	double		5097246	0					
ANR	5097274	Identifier	q2		5097246	1					
ANR	5097275	AssignmentExpression	q2 = pole [ pole_step * 2 ]		5097246	2		=			
ANR	5097276	Identifier	q2		5097246	0					
ANR	5097277	ArrayIndexing	pole [ pole_step * 2 ]		5097246	1					
ANR	5097278	Identifier	pole		5097246	0					
ANR	5097279	MultiplicativeExpression	pole_step * 2		5097246	1		*			
ANR	5097280	Identifier	pole_step		5097246	0					
ANR	5097281	PrimaryExpression	2		5097246	1					
ANR	5097282	IdentifierDeclStatement	double q3 = pole [ pole_step * 3 ] ;	923:4:31072:31103	5097246	3	True				
ANR	5097283	IdentifierDecl	q3 = pole [ pole_step * 3 ]		5097246	0					
ANR	5097284	IdentifierDeclType	double		5097246	0					
ANR	5097285	Identifier	q3		5097246	1					
ANR	5097286	AssignmentExpression	q3 = pole [ pole_step * 3 ]		5097246	2		=			
ANR	5097287	Identifier	q3		5097246	0					
ANR	5097288	ArrayIndexing	pole [ pole_step * 3 ]		5097246	1					
ANR	5097289	Identifier	pole		5097246	0					
ANR	5097290	MultiplicativeExpression	pole_step * 3		5097246	1		*			
ANR	5097291	Identifier	pole_step		5097246	0					
ANR	5097292	PrimaryExpression	3		5097246	1					
ANR	5097293	IdentifierDeclStatement	"double t01 = t0 - 1 , t11 = t1 - 1 ;"	924:4:31109:31142	5097246	4	True				
ANR	5097294	IdentifierDecl	t01 = t0 - 1		5097246	0					
ANR	5097295	IdentifierDeclType	double		5097246	0					
ANR	5097296	Identifier	t01		5097246	1					
ANR	5097297	AssignmentExpression	t01 = t0 - 1		5097246	2		=			
ANR	5097298	Identifier	t01		5097246	0					
ANR	5097299	AdditiveExpression	t0 - 1		5097246	1		-			
ANR	5097300	Identifier	t0		5097246	0					
ANR	5097301	PrimaryExpression	1		5097246	1					
ANR	5097302	IdentifierDecl	t11 = t1 - 1		5097246	1					
ANR	5097303	IdentifierDeclType	double		5097246	0					
ANR	5097304	Identifier	t11		5097246	1					
ANR	5097305	AssignmentExpression	t11 = t1 - 1		5097246	2		=			
ANR	5097306	Identifier	t11		5097246	0					
ANR	5097307	AdditiveExpression	t1 - 1		5097246	1		-			
ANR	5097308	Identifier	t1		5097246	0					
ANR	5097309	PrimaryExpression	1		5097246	1					
ANR	5097310	IdentifierDeclStatement	double small = 1e-13 ;	925:4:31148:31168	5097246	5	True				
ANR	5097311	IdentifierDecl	small = 1e-13		5097246	0					
ANR	5097312	IdentifierDeclType	double		5097246	0					
ANR	5097313	Identifier	small		5097246	1					
ANR	5097314	AssignmentExpression	small = 1e-13		5097246	2		=			
ANR	5097315	Identifier	small		5097246	0					
ANR	5097316	PrimaryExpression	1e-13		5097246	1					
ANR	5097317	Statement	define	927:1:31172:31177	5097246	6	True				
ANR	5097318	Statement	Power2	927:8:31179:31184	5097246	7	True				
ANR	5097319	Statement	(	927:14:31185:31185	5097246	8	True				
ANR	5097320	Statement	a	927:15:31186:31186	5097246	9	True				
ANR	5097321	Statement	)	927:16:31187:31187	5097246	10	True				
ANR	5097322	Statement	(	927:18:31189:31189	5097246	11	True				
ANR	5097323	Statement	a	927:19:31190:31190	5097246	12	True				
ANR	5097324	Statement	)	927:20:31191:31191	5097246	13	True				
ANR	5097325	Statement	*	927:22:31193:31193	5097246	14	True				
ANR	5097326	Statement	(	927:24:31195:31195	5097246	15	True				
ANR	5097327	Statement	a	927:25:31196:31196	5097246	16	True				
ANR	5097328	Statement	)	927:26:31197:31197	5097246	17	True				
ANR	5097329	Statement	define	928:1:31200:31205	5097246	18	True				
ANR	5097330	ExpressionStatement	Power3 ( a ) ( a ) * ( a ) * ( a ) pole [ pole_step * 0 ] = t0 * ( t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 ) ) - q0 * Power3 ( t01 )	928:8:31207:31321	5097246	19	True				
ANR	5097331	AssignmentExpression	Power3 ( a ) ( a ) * ( a ) * ( a ) pole [ pole_step * 0 ] = t0 * ( t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 ) ) - q0 * Power3 ( t01 )		5097246	0		=			
ANR	5097332	MultiplicativeExpression	Power3 ( a ) ( a ) * ( a ) * ( a ) pole [ pole_step * 0 ]		5097246	0		*			
ANR	5097333	CallExpression	Power3 ( a ) ( a )		5097246	0					
ANR	5097334	Callee	Power3 ( a )		5097246	0					
ANR	5097335	CallExpression	Power3 ( a )		5097246	0					
ANR	5097336	Callee	Power3		5097246	0					
ANR	5097337	Identifier	Power3		5097246	0					
ANR	5097338	ArgumentList	a		5097246	1					
ANR	5097339	Argument	a		5097246	0					
ANR	5097340	Identifier	a		5097246	0					
ANR	5097341	ArgumentList	a		5097246	1					
ANR	5097342	Argument	a		5097246	0					
ANR	5097343	Identifier	a		5097246	0					
ANR	5097344	CastExpression	( a ) * ( a ) pole [ pole_step * 0 ]		5097246	1					
ANR	5097345	CastTarget	a		5097246	0					
ANR	5097346	UnaryOperationExpression	* ( a ) pole [ pole_step * 0 ]		5097246	1					
ANR	5097347	UnaryOperator	*		5097246	0					
ANR	5097348	CastExpression	( a ) pole [ pole_step * 0 ]		5097246	1					
ANR	5097349	CastTarget	a		5097246	0					
ANR	5097350	ArrayIndexing	pole [ pole_step * 0 ]		5097246	1					
ANR	5097351	Identifier	pole		5097246	0					
ANR	5097352	MultiplicativeExpression	pole_step * 0		5097246	1		*			
ANR	5097353	Identifier	pole_step		5097246	0					
ANR	5097354	PrimaryExpression	0		5097246	1					
ANR	5097355	AdditiveExpression	t0 * ( t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 ) ) - q0 * Power3 ( t01 )		5097246	1		-			
ANR	5097356	MultiplicativeExpression	t0 * ( t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 ) )		5097246	0		*			
ANR	5097357	Identifier	t0		5097246	0					
ANR	5097358	AdditiveExpression	t0 * ( q3 * t0 - 3 * q2 * t01 ) + 3 * q1 * Power2 ( t01 )		5097246	1		+			
ANR	5097359	MultiplicativeExpression	t0 * ( q3 * t0 - 3 * q2 * t01 )		5097246	0		*			
ANR	5097360	Identifier	t0		5097246	0					
ANR	5097361	AdditiveExpression	q3 * t0 - 3 * q2 * t01		5097246	1		-			
ANR	5097362	MultiplicativeExpression	q3 * t0		5097246	0		*			
ANR	5097363	Identifier	q3		5097246	0					
ANR	5097364	Identifier	t0		5097246	1					
ANR	5097365	MultiplicativeExpression	3 * q2 * t01		5097246	1		*			
ANR	5097366	PrimaryExpression	3		5097246	0					
ANR	5097367	MultiplicativeExpression	q2 * t01		5097246	1		*			
ANR	5097368	Identifier	q2		5097246	0					
ANR	5097369	Identifier	t01		5097246	1					
ANR	5097370	MultiplicativeExpression	3 * q1 * Power2 ( t01 )		5097246	1		*			
ANR	5097371	PrimaryExpression	3		5097246	0					
ANR	5097372	MultiplicativeExpression	q1 * Power2 ( t01 )		5097246	1		*			
ANR	5097373	Identifier	q1		5097246	0					
ANR	5097374	CallExpression	Power2 ( t01 )		5097246	1					
ANR	5097375	Callee	Power2		5097246	0					
ANR	5097376	Identifier	Power2		5097246	0					
ANR	5097377	ArgumentList	t01		5097246	1					
ANR	5097378	Argument	t01		5097246	0					
ANR	5097379	Identifier	t01		5097246	0					
ANR	5097380	MultiplicativeExpression	q0 * Power3 ( t01 )		5097246	1		*			
ANR	5097381	Identifier	q0		5097246	0					
ANR	5097382	CallExpression	Power3 ( t01 )		5097246	1					
ANR	5097383	Callee	Power3		5097246	0					
ANR	5097384	Identifier	Power3		5097246	0					
ANR	5097385	ArgumentList	t01		5097246	1					
ANR	5097386	Argument	t01		5097246	0					
ANR	5097387	Identifier	t01		5097246	0					
ANR	5097388	ExpressionStatement	pole [ pole_step * 1 ] = q1 * t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 ) + t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) - q0 * t11 * Power2 ( t01 )	930:4:31327:31474	5097246	20	True				
ANR	5097389	AssignmentExpression	pole [ pole_step * 1 ] = q1 * t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 ) + t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) - q0 * t11 * Power2 ( t01 )		5097246	0		=			
ANR	5097390	ArrayIndexing	pole [ pole_step * 1 ]		5097246	0					
ANR	5097391	Identifier	pole		5097246	0					
ANR	5097392	MultiplicativeExpression	pole_step * 1		5097246	1		*			
ANR	5097393	Identifier	pole_step		5097246	0					
ANR	5097394	PrimaryExpression	1		5097246	1					
ANR	5097395	AdditiveExpression	q1 * t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 ) + t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) - q0 * t11 * Power2 ( t01 )		5097246	1		+			
ANR	5097396	MultiplicativeExpression	q1 * t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 )		5097246	0		*			
ANR	5097397	Identifier	q1		5097246	0					
ANR	5097398	MultiplicativeExpression	t01 * ( - 2 * t0 - t1 + 3 * t0 * t1 )		5097246	1		*			
ANR	5097399	Identifier	t01		5097246	0					
ANR	5097400	AdditiveExpression	- 2 * t0 - t1 + 3 * t0 * t1		5097246	1		-			
ANR	5097401	MultiplicativeExpression	- 2 * t0		5097246	0		*			
ANR	5097402	UnaryOperationExpression	- 2		5097246	0					
ANR	5097403	UnaryOperator	-		5097246	0					
ANR	5097404	PrimaryExpression	2		5097246	1					
ANR	5097405	Identifier	t0		5097246	1					
ANR	5097406	AdditiveExpression	t1 + 3 * t0 * t1		5097246	1		+			
ANR	5097407	Identifier	t1		5097246	0					
ANR	5097408	MultiplicativeExpression	3 * t0 * t1		5097246	1		*			
ANR	5097409	PrimaryExpression	3		5097246	0					
ANR	5097410	MultiplicativeExpression	t0 * t1		5097246	1		*			
ANR	5097411	Identifier	t0		5097246	0					
ANR	5097412	Identifier	t1		5097246	1					
ANR	5097413	AdditiveExpression	t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) - q0 * t11 * Power2 ( t01 )		5097246	1		-			
ANR	5097414	MultiplicativeExpression	t0 * ( q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 )		5097246	0		*			
ANR	5097415	Identifier	t0		5097246	0					
ANR	5097416	AdditiveExpression	q2 * t0 + 2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1		5097246	1		+			
ANR	5097417	MultiplicativeExpression	q2 * t0		5097246	0		*			
ANR	5097418	Identifier	q2		5097246	0					
ANR	5097419	Identifier	t0		5097246	1					
ANR	5097420	AdditiveExpression	2 * q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1		5097246	1		-			
ANR	5097421	MultiplicativeExpression	2 * q2 * t1		5097246	0		*			
ANR	5097422	PrimaryExpression	2		5097246	0					
ANR	5097423	MultiplicativeExpression	q2 * t1		5097246	1		*			
ANR	5097424	Identifier	q2		5097246	0					
ANR	5097425	Identifier	t1		5097246	1					
ANR	5097426	AdditiveExpression	3 * q2 * t0 * t1 + q3 * t0 * t1		5097246	1		+			
ANR	5097427	MultiplicativeExpression	3 * q2 * t0 * t1		5097246	0		*			
ANR	5097428	PrimaryExpression	3		5097246	0					
ANR	5097429	MultiplicativeExpression	q2 * t0 * t1		5097246	1		*			
ANR	5097430	Identifier	q2		5097246	0					
ANR	5097431	MultiplicativeExpression	t0 * t1		5097246	1		*			
ANR	5097432	Identifier	t0		5097246	0					
ANR	5097433	Identifier	t1		5097246	1					
ANR	5097434	MultiplicativeExpression	q3 * t0 * t1		5097246	1		*			
ANR	5097435	Identifier	q3		5097246	0					
ANR	5097436	MultiplicativeExpression	t0 * t1		5097246	1		*			
ANR	5097437	Identifier	t0		5097246	0					
ANR	5097438	Identifier	t1		5097246	1					
ANR	5097439	MultiplicativeExpression	q0 * t11 * Power2 ( t01 )		5097246	1		*			
ANR	5097440	Identifier	q0		5097246	0					
ANR	5097441	MultiplicativeExpression	t11 * Power2 ( t01 )		5097246	1		*			
ANR	5097442	Identifier	t11		5097246	0					
ANR	5097443	CallExpression	Power2 ( t01 )		5097246	1					
ANR	5097444	Callee	Power2		5097246	0					
ANR	5097445	Identifier	Power2		5097246	0					
ANR	5097446	ArgumentList	t01		5097246	1					
ANR	5097447	Argument	t01		5097246	0					
ANR	5097448	Identifier	t01		5097246	0					
ANR	5097449	ExpressionStatement	pole [ pole_step * 2 ] = t1 * ( 2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) + q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11 - q0 * t01 * Power2 ( t11 )	932:4:31480:31627	5097246	21	True				
ANR	5097450	AssignmentExpression	pole [ pole_step * 2 ] = t1 * ( 2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) + q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11 - q0 * t01 * Power2 ( t11 )		5097246	0		=			
ANR	5097451	ArrayIndexing	pole [ pole_step * 2 ]		5097246	0					
ANR	5097452	Identifier	pole		5097246	0					
ANR	5097453	MultiplicativeExpression	pole_step * 2		5097246	1		*			
ANR	5097454	Identifier	pole_step		5097246	0					
ANR	5097455	PrimaryExpression	2		5097246	1					
ANR	5097456	AdditiveExpression	t1 * ( 2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 ) + q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11 - q0 * t01 * Power2 ( t11 )		5097246	1		+			
ANR	5097457	MultiplicativeExpression	t1 * ( 2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1 )		5097246	0		*			
ANR	5097458	Identifier	t1		5097246	0					
ANR	5097459	AdditiveExpression	2 * q2 * t0 + q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1		5097246	1		+			
ANR	5097460	MultiplicativeExpression	2 * q2 * t0		5097246	0		*			
ANR	5097461	PrimaryExpression	2		5097246	0					
ANR	5097462	MultiplicativeExpression	q2 * t0		5097246	1		*			
ANR	5097463	Identifier	q2		5097246	0					
ANR	5097464	Identifier	t0		5097246	1					
ANR	5097465	AdditiveExpression	q2 * t1 - 3 * q2 * t0 * t1 + q3 * t0 * t1		5097246	1		-			
ANR	5097466	MultiplicativeExpression	q2 * t1		5097246	0		*			
ANR	5097467	Identifier	q2		5097246	0					
ANR	5097468	Identifier	t1		5097246	1					
ANR	5097469	AdditiveExpression	3 * q2 * t0 * t1 + q3 * t0 * t1		5097246	1		+			
ANR	5097470	MultiplicativeExpression	3 * q2 * t0 * t1		5097246	0		*			
ANR	5097471	PrimaryExpression	3		5097246	0					
ANR	5097472	MultiplicativeExpression	q2 * t0 * t1		5097246	1		*			
ANR	5097473	Identifier	q2		5097246	0					
ANR	5097474	MultiplicativeExpression	t0 * t1		5097246	1		*			
ANR	5097475	Identifier	t0		5097246	0					
ANR	5097476	Identifier	t1		5097246	1					
ANR	5097477	MultiplicativeExpression	q3 * t0 * t1		5097246	1		*			
ANR	5097478	Identifier	q3		5097246	0					
ANR	5097479	MultiplicativeExpression	t0 * t1		5097246	1		*			
ANR	5097480	Identifier	t0		5097246	0					
ANR	5097481	Identifier	t1		5097246	1					
ANR	5097482	AdditiveExpression	q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11 - q0 * t01 * Power2 ( t11 )		5097246	1		-			
ANR	5097483	MultiplicativeExpression	q1 * ( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11		5097246	0		*			
ANR	5097484	Identifier	q1		5097246	0					
ANR	5097485	MultiplicativeExpression	( - t0 - 2 * t1 + 3 * t0 * t1 ) * t11		5097246	1		*			
ANR	5097486	AdditiveExpression	- t0 - 2 * t1 + 3 * t0 * t1		5097246	0		-			
ANR	5097487	UnaryOperationExpression	- t0		5097246	0					
ANR	5097488	UnaryOperator	-		5097246	0					
ANR	5097489	Identifier	t0		5097246	1					
ANR	5097490	AdditiveExpression	2 * t1 + 3 * t0 * t1		5097246	1		+			
ANR	5097491	MultiplicativeExpression	2 * t1		5097246	0		*			
ANR	5097492	PrimaryExpression	2		5097246	0					
ANR	5097493	Identifier	t1		5097246	1					
ANR	5097494	MultiplicativeExpression	3 * t0 * t1		5097246	1		*			
ANR	5097495	PrimaryExpression	3		5097246	0					
ANR	5097496	MultiplicativeExpression	t0 * t1		5097246	1		*			
ANR	5097497	Identifier	t0		5097246	0					
ANR	5097498	Identifier	t1		5097246	1					
ANR	5097499	Identifier	t11		5097246	1					
ANR	5097500	MultiplicativeExpression	q0 * t01 * Power2 ( t11 )		5097246	1		*			
ANR	5097501	Identifier	q0		5097246	0					
ANR	5097502	MultiplicativeExpression	t01 * Power2 ( t11 )		5097246	1		*			
ANR	5097503	Identifier	t01		5097246	0					
ANR	5097504	CallExpression	Power2 ( t11 )		5097246	1					
ANR	5097505	Callee	Power2		5097246	0					
ANR	5097506	Identifier	Power2		5097246	0					
ANR	5097507	ArgumentList	t11		5097246	1					
ANR	5097508	Argument	t11		5097246	0					
ANR	5097509	Identifier	t11		5097246	0					
ANR	5097510	ExpressionStatement	pole [ pole_step * 3 ] = t1 * ( t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 ) ) - q0 * Power3 ( t11 )	934:4:31633:31751	5097246	22	True				
ANR	5097511	AssignmentExpression	pole [ pole_step * 3 ] = t1 * ( t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 ) ) - q0 * Power3 ( t11 )		5097246	0		=			
ANR	5097512	ArrayIndexing	pole [ pole_step * 3 ]		5097246	0					
ANR	5097513	Identifier	pole		5097246	0					
ANR	5097514	MultiplicativeExpression	pole_step * 3		5097246	1		*			
ANR	5097515	Identifier	pole_step		5097246	0					
ANR	5097516	PrimaryExpression	3		5097246	1					
ANR	5097517	AdditiveExpression	t1 * ( t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 ) ) - q0 * Power3 ( t11 )		5097246	1		-			
ANR	5097518	MultiplicativeExpression	t1 * ( t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 ) )		5097246	0		*			
ANR	5097519	Identifier	t1		5097246	0					
ANR	5097520	AdditiveExpression	t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 ) + 3 * q1 * Power2 ( t11 )		5097246	1		+			
ANR	5097521	MultiplicativeExpression	t1 * ( 3 * q2 - 3 * q2 * t1 + q3 * t1 )		5097246	0		*			
ANR	5097522	Identifier	t1		5097246	0					
ANR	5097523	AdditiveExpression	3 * q2 - 3 * q2 * t1 + q3 * t1		5097246	1		-			
ANR	5097524	MultiplicativeExpression	3 * q2		5097246	0		*			
ANR	5097525	PrimaryExpression	3		5097246	0					
ANR	5097526	Identifier	q2		5097246	1					
ANR	5097527	AdditiveExpression	3 * q2 * t1 + q3 * t1		5097246	1		+			
ANR	5097528	MultiplicativeExpression	3 * q2 * t1		5097246	0		*			
ANR	5097529	PrimaryExpression	3		5097246	0					
ANR	5097530	MultiplicativeExpression	q2 * t1		5097246	1		*			
ANR	5097531	Identifier	q2		5097246	0					
ANR	5097532	Identifier	t1		5097246	1					
ANR	5097533	MultiplicativeExpression	q3 * t1		5097246	1		*			
ANR	5097534	Identifier	q3		5097246	0					
ANR	5097535	Identifier	t1		5097246	1					
ANR	5097536	MultiplicativeExpression	3 * q1 * Power2 ( t11 )		5097246	1		*			
ANR	5097537	PrimaryExpression	3		5097246	0					
ANR	5097538	MultiplicativeExpression	q1 * Power2 ( t11 )		5097246	1		*			
ANR	5097539	Identifier	q1		5097246	0					
ANR	5097540	CallExpression	Power2 ( t11 )		5097246	1					
ANR	5097541	Callee	Power2		5097246	0					
ANR	5097542	Identifier	Power2		5097246	0					
ANR	5097543	ArgumentList	t11		5097246	1					
ANR	5097544	Argument	t11		5097246	0					
ANR	5097545	Identifier	t11		5097246	0					
ANR	5097546	MultiplicativeExpression	q0 * Power3 ( t11 )		5097246	1		*			
ANR	5097547	Identifier	q0		5097246	0					
ANR	5097548	CallExpression	Power3 ( t11 )		5097246	1					
ANR	5097549	Callee	Power3		5097246	0					
ANR	5097550	Identifier	Power3		5097246	0					
ANR	5097551	ArgumentList	t11		5097246	1					
ANR	5097552	Argument	t11		5097246	0					
ANR	5097553	Identifier	t11		5097246	0					
ANR	5097554	Statement	undef	936:1:31754:31758	5097246	23	True				
ANR	5097555	Statement	Power2	936:7:31760:31765	5097246	24	True				
ANR	5097556	Statement	undef	937:1:31768:31772	5097246	25	True				
ANR	5097557	Statement	Power3	937:7:31774:31779	5097246	26	True				
ANR	5097558	IfStatement	if ( any_abs ( pole [ pole_step * 1 ] - pole [ pole_step * 0 ] ) < small )		5097246	27					
ANR	5097559	Condition	any_abs ( pole [ pole_step * 1 ] - pole [ pole_step * 0 ] ) < small	938:8:31789:31846	5097246	0	True				
ANR	5097560	RelationalExpression	any_abs ( pole [ pole_step * 1 ] - pole [ pole_step * 0 ] ) < small		5097246	0		<			
ANR	5097561	CallExpression	any_abs ( pole [ pole_step * 1 ] - pole [ pole_step * 0 ] )		5097246	0					
ANR	5097562	Callee	any_abs		5097246	0					
ANR	5097563	Identifier	any_abs		5097246	0					
ANR	5097564	ArgumentList	pole [ pole_step * 1 ] - pole [ pole_step * 0 ]		5097246	1					
ANR	5097565	Argument	pole [ pole_step * 1 ] - pole [ pole_step * 0 ]		5097246	0					
ANR	5097566	AdditiveExpression	pole [ pole_step * 1 ] - pole [ pole_step * 0 ]		5097246	0		-			
ANR	5097567	ArrayIndexing	pole [ pole_step * 1 ]		5097246	0					
ANR	5097568	Identifier	pole		5097246	0					
ANR	5097569	MultiplicativeExpression	pole_step * 1		5097246	1		*			
ANR	5097570	Identifier	pole_step		5097246	0					
ANR	5097571	PrimaryExpression	1		5097246	1					
ANR	5097572	ArrayIndexing	pole [ pole_step * 0 ]		5097246	1					
ANR	5097573	Identifier	pole		5097246	0					
ANR	5097574	MultiplicativeExpression	pole_step * 0		5097246	1		*			
ANR	5097575	Identifier	pole_step		5097246	0					
ANR	5097576	PrimaryExpression	0		5097246	1					
ANR	5097577	Identifier	small		5097246	1					
ANR	5097578	ExpressionStatement	pole [ pole_step * 1 ] = pole [ pole_step * 0 ]	939:8:31857:31898	5097246	1	True				
ANR	5097579	AssignmentExpression	pole [ pole_step * 1 ] = pole [ pole_step * 0 ]		5097246	0		=			
ANR	5097580	ArrayIndexing	pole [ pole_step * 1 ]		5097246	0					
ANR	5097581	Identifier	pole		5097246	0					
ANR	5097582	MultiplicativeExpression	pole_step * 1		5097246	1		*			
ANR	5097583	Identifier	pole_step		5097246	0					
ANR	5097584	PrimaryExpression	1		5097246	1					
ANR	5097585	ArrayIndexing	pole [ pole_step * 0 ]		5097246	1					
ANR	5097586	Identifier	pole		5097246	0					
ANR	5097587	MultiplicativeExpression	pole_step * 0		5097246	1		*			
ANR	5097588	Identifier	pole_step		5097246	0					
ANR	5097589	PrimaryExpression	0		5097246	1					
ANR	5097590	IfStatement	if ( any_abs ( pole [ pole_step * 2 ] - pole [ pole_step * 3 ] ) < small )		5097246	28					
ANR	5097591	Condition	any_abs ( pole [ pole_step * 2 ] - pole [ pole_step * 3 ] ) < small	940:8:31908:31965	5097246	0	True				
ANR	5097592	RelationalExpression	any_abs ( pole [ pole_step * 2 ] - pole [ pole_step * 3 ] ) < small		5097246	0		<			
ANR	5097593	CallExpression	any_abs ( pole [ pole_step * 2 ] - pole [ pole_step * 3 ] )		5097246	0					
ANR	5097594	Callee	any_abs		5097246	0					
ANR	5097595	Identifier	any_abs		5097246	0					
ANR	5097596	ArgumentList	pole [ pole_step * 2 ] - pole [ pole_step * 3 ]		5097246	1					
ANR	5097597	Argument	pole [ pole_step * 2 ] - pole [ pole_step * 3 ]		5097246	0					
ANR	5097598	AdditiveExpression	pole [ pole_step * 2 ] - pole [ pole_step * 3 ]		5097246	0		-			
ANR	5097599	ArrayIndexing	pole [ pole_step * 2 ]		5097246	0					
ANR	5097600	Identifier	pole		5097246	0					
ANR	5097601	MultiplicativeExpression	pole_step * 2		5097246	1		*			
ANR	5097602	Identifier	pole_step		5097246	0					
ANR	5097603	PrimaryExpression	2		5097246	1					
ANR	5097604	ArrayIndexing	pole [ pole_step * 3 ]		5097246	1					
ANR	5097605	Identifier	pole		5097246	0					
ANR	5097606	MultiplicativeExpression	pole_step * 3		5097246	1		*			
ANR	5097607	Identifier	pole_step		5097246	0					
ANR	5097608	PrimaryExpression	3		5097246	1					
ANR	5097609	Identifier	small		5097246	1					
ANR	5097610	ExpressionStatement	pole [ pole_step * 2 ] = pole [ pole_step * 3 ]	941:8:31976:32017	5097246	1	True				
ANR	5097611	AssignmentExpression	pole [ pole_step * 2 ] = pole [ pole_step * 3 ]		5097246	0		=			
ANR	5097612	ArrayIndexing	pole [ pole_step * 2 ]		5097246	0					
ANR	5097613	Identifier	pole		5097246	0					
ANR	5097614	MultiplicativeExpression	pole_step * 2		5097246	1		*			
ANR	5097615	Identifier	pole_step		5097246	0					
ANR	5097616	PrimaryExpression	2		5097246	1					
ANR	5097617	ArrayIndexing	pole [ pole_step * 3 ]		5097246	1					
ANR	5097618	Identifier	pole		5097246	0					
ANR	5097619	MultiplicativeExpression	pole_step * 3		5097246	1		*			
ANR	5097620	Identifier	pole_step		5097246	0					
ANR	5097621	PrimaryExpression	3		5097246	1					
ANR	5097622	ReturnType	static inline void		5097246	1					
ANR	5097623	Identifier	subcurve		5097246	2					
ANR	5097624	ParameterList	"double * pole , int pole_step , double t0 , double t1"		5097246	3					
ANR	5097625	Parameter	double * pole	917:9:30844:30855	5097246	0	True				
ANR	5097626	ParameterType	double *		5097246	0					
ANR	5097627	Identifier	pole		5097246	1					
ANR	5097628	Parameter	int pole_step	917:23:30858:30870	5097246	1	True				
ANR	5097629	ParameterType	int		5097246	0					
ANR	5097630	Identifier	pole_step		5097246	1					
ANR	5097631	Parameter	double t0	917:38:30873:30881	5097246	2	True				
ANR	5097632	ParameterType	double		5097246	0					
ANR	5097633	Identifier	t0		5097246	1					
ANR	5097634	Parameter	double t1	917:49:30884:30892	5097246	3	True				
ANR	5097635	ParameterType	double		5097246	0					
ANR	5097636	Identifier	t1		5097246	1					
ANR	5097637	CFGEntryNode	ENTRY		5097246		True				
ANR	5097638	CFGExitNode	EXIT		5097246		True				
ANR	5097639	Symbol	q1		5097246						
ANR	5097640	Symbol	small		5097246						
ANR	5097641	Symbol	q2		5097246						
ANR	5097642	Symbol	a		5097246						
ANR	5097643	Symbol	q3		5097246						
ANR	5097644	Symbol	* * pole_step		5097246						
ANR	5097645	Symbol	pole		5097246						
ANR	5097646	Symbol	* pole_step		5097246						
ANR	5097647	Symbol	* ( a ) pole [ pole_step * 0 ]		5097246						
ANR	5097648	Symbol	pole_step		5097246						
ANR	5097649	Symbol	* pole		5097246						
ANR	5097650	Symbol	t01		5097246						
ANR	5097651	Symbol	t11		5097246						
ANR	5097652	Symbol	any_abs		5097246						
ANR	5097653	Symbol	Power3		5097246						
ANR	5097654	Symbol	Power2		5097246						
ANR	5097655	Symbol	t0		5097246						
ANR	5097656	Symbol	t1		5097246						
ANR	5097657	Symbol	q0		5097246						
ANR	5097658	Symbol	* * pole		5097246						
ANR	5097659	Function	subline	944:0:32022:32279							
ANR	5097660	FunctionDef	"subline (double * pole , int pole_step , double t0 , double t1)"		5097659	0					
ANR	5097661	CompoundStatement		946:0:32100:32279	5097659	0					
ANR	5097662	IdentifierDeclStatement	double q0 = pole [ pole_step * 0 ] ;	947:4:32106:32137	5097659	0	True				
ANR	5097663	IdentifierDecl	q0 = pole [ pole_step * 0 ]		5097659	0					
ANR	5097664	IdentifierDeclType	double		5097659	0					
ANR	5097665	Identifier	q0		5097659	1					
ANR	5097666	AssignmentExpression	q0 = pole [ pole_step * 0 ]		5097659	2		=			
ANR	5097667	Identifier	q0		5097659	0					
ANR	5097668	ArrayIndexing	pole [ pole_step * 0 ]		5097659	1					
ANR	5097669	Identifier	pole		5097659	0					
ANR	5097670	MultiplicativeExpression	pole_step * 0		5097659	1		*			
ANR	5097671	Identifier	pole_step		5097659	0					
ANR	5097672	PrimaryExpression	0		5097659	1					
ANR	5097673	IdentifierDeclStatement	double q1 = pole [ pole_step * 1 ] ;	948:4:32143:32174	5097659	1	True				
ANR	5097674	IdentifierDecl	q1 = pole [ pole_step * 1 ]		5097659	0					
ANR	5097675	IdentifierDeclType	double		5097659	0					
ANR	5097676	Identifier	q1		5097659	1					
ANR	5097677	AssignmentExpression	q1 = pole [ pole_step * 1 ]		5097659	2		=			
ANR	5097678	Identifier	q1		5097659	0					
ANR	5097679	ArrayIndexing	pole [ pole_step * 1 ]		5097659	1					
ANR	5097680	Identifier	pole		5097659	0					
ANR	5097681	MultiplicativeExpression	pole_step * 1		5097659	1		*			
ANR	5097682	Identifier	pole_step		5097659	0					
ANR	5097683	PrimaryExpression	1		5097659	1					
ANR	5097684	ExpressionStatement	pole [ pole_step * 0 ] = ( 1 - t0 ) * q0 + t0 * q1	950:4:32181:32226	5097659	2	True				
ANR	5097685	AssignmentExpression	pole [ pole_step * 0 ] = ( 1 - t0 ) * q0 + t0 * q1		5097659	0		=			
ANR	5097686	ArrayIndexing	pole [ pole_step * 0 ]		5097659	0					
ANR	5097687	Identifier	pole		5097659	0					
ANR	5097688	MultiplicativeExpression	pole_step * 0		5097659	1		*			
ANR	5097689	Identifier	pole_step		5097659	0					
ANR	5097690	PrimaryExpression	0		5097659	1					
ANR	5097691	AdditiveExpression	( 1 - t0 ) * q0 + t0 * q1		5097659	1		+			
ANR	5097692	MultiplicativeExpression	( 1 - t0 ) * q0		5097659	0		*			
ANR	5097693	AdditiveExpression	1 - t0		5097659	0		-			
ANR	5097694	PrimaryExpression	1		5097659	0					
ANR	5097695	Identifier	t0		5097659	1					
ANR	5097696	Identifier	q0		5097659	1					
ANR	5097697	MultiplicativeExpression	t0 * q1		5097659	1		*			
ANR	5097698	Identifier	t0		5097659	0					
ANR	5097699	Identifier	q1		5097659	1					
ANR	5097700	ExpressionStatement	pole [ pole_step * 1 ] = ( 1 - t1 ) * q0 + t1 * q1	951:4:32232:32277	5097659	3	True				
ANR	5097701	AssignmentExpression	pole [ pole_step * 1 ] = ( 1 - t1 ) * q0 + t1 * q1		5097659	0		=			
ANR	5097702	ArrayIndexing	pole [ pole_step * 1 ]		5097659	0					
ANR	5097703	Identifier	pole		5097659	0					
ANR	5097704	MultiplicativeExpression	pole_step * 1		5097659	1		*			
ANR	5097705	Identifier	pole_step		5097659	0					
ANR	5097706	PrimaryExpression	1		5097659	1					
ANR	5097707	AdditiveExpression	( 1 - t1 ) * q0 + t1 * q1		5097659	1		+			
ANR	5097708	MultiplicativeExpression	( 1 - t1 ) * q0		5097659	0		*			
ANR	5097709	AdditiveExpression	1 - t1		5097659	0		-			
ANR	5097710	PrimaryExpression	1		5097659	0					
ANR	5097711	Identifier	t1		5097659	1					
ANR	5097712	Identifier	q0		5097659	1					
ANR	5097713	MultiplicativeExpression	t1 * q1		5097659	1		*			
ANR	5097714	Identifier	t1		5097659	0					
ANR	5097715	Identifier	q1		5097659	1					
ANR	5097716	ReturnType	static inline void		5097659	1					
ANR	5097717	Identifier	subline		5097659	2					
ANR	5097718	ParameterList	"double * pole , int pole_step , double t0 , double t1"		5097659	3					
ANR	5097719	Parameter	double * pole	945:8:32049:32060	5097659	0	True				
ANR	5097720	ParameterType	double *		5097659	0					
ANR	5097721	Identifier	pole		5097659	1					
ANR	5097722	Parameter	int pole_step	945:22:32063:32075	5097659	1	True				
ANR	5097723	ParameterType	int		5097659	0					
ANR	5097724	Identifier	pole_step		5097659	1					
ANR	5097725	Parameter	double t0	945:37:32078:32086	5097659	2	True				
ANR	5097726	ParameterType	double		5097659	0					
ANR	5097727	Identifier	t0		5097659	1					
ANR	5097728	Parameter	double t1	945:48:32089:32097	5097659	3	True				
ANR	5097729	ParameterType	double		5097659	0					
ANR	5097730	Identifier	t1		5097659	1					
ANR	5097731	CFGEntryNode	ENTRY		5097659		True				
ANR	5097732	CFGExitNode	EXIT		5097659		True				
ANR	5097733	Symbol	q1		5097659						
ANR	5097734	Symbol	pole		5097659						
ANR	5097735	Symbol	t0		5097659						
ANR	5097736	Symbol	* pole_step		5097659						
ANR	5097737	Symbol	pole_step		5097659						
ANR	5097738	Symbol	t1		5097659						
ANR	5097739	Symbol	* pole		5097659						
ANR	5097740	Symbol	q0		5097659						
ANR	5097741	Function	clamp_poles	954:0:32282:32984							
ANR	5097742	FunctionDef	"clamp_poles (double * T0 , double * T1 , int ii , int i , double * pole , int p_offset , int pole_step , int pole_step_i , int order)"		5097741	0					
ANR	5097743	CompoundStatement		957:0:32433:32984	5097741	0					
ANR	5097744	IfStatement	if ( ii < 0 )		5097741	0					
ANR	5097745	Condition	ii < 0	958:8:32443:32448	5097741	0	True				
ANR	5097746	RelationalExpression	ii < 0		5097741	0		<			
ANR	5097747	Identifier	ii		5097741	0					
ANR	5097748	PrimaryExpression	0		5097741	1					
ANR	5097749	CompoundStatement		2:16:17:17	5097741	1					
ANR	5097750	IfStatement	if ( order == 3 )		5097741	0					
ANR	5097751	Condition	order == 3	959:12:32465:32474	5097741	0	True				
ANR	5097752	EqualityExpression	order == 3		5097741	0		==			
ANR	5097753	Identifier	order		5097741	0					
ANR	5097754	PrimaryExpression	3		5097741	1					
ANR	5097755	ExpressionStatement	"subcurve ( pole + p_offset , pole_step_i , T0 [ i ] , T1 [ i ] )"	960:12:32489:32541	5097741	1	True				
ANR	5097756	CallExpression	"subcurve ( pole + p_offset , pole_step_i , T0 [ i ] , T1 [ i ] )"		5097741	0					
ANR	5097757	Callee	subcurve		5097741	0					
ANR	5097758	Identifier	subcurve		5097741	0					
ANR	5097759	ArgumentList	pole + p_offset		5097741	1					
ANR	5097760	Argument	pole + p_offset		5097741	0					
ANR	5097761	AdditiveExpression	pole + p_offset		5097741	0		+			
ANR	5097762	Identifier	pole		5097741	0					
ANR	5097763	Identifier	p_offset		5097741	1					
ANR	5097764	Argument	pole_step_i		5097741	1					
ANR	5097765	Identifier	pole_step_i		5097741	0					
ANR	5097766	Argument	T0 [ i ]		5097741	2					
ANR	5097767	ArrayIndexing	T0 [ i ]		5097741	0					
ANR	5097768	Identifier	T0		5097741	0					
ANR	5097769	Identifier	i		5097741	1					
ANR	5097770	Argument	T1 [ i ]		5097741	3					
ANR	5097771	ArrayIndexing	T1 [ i ]		5097741	0					
ANR	5097772	Identifier	T1		5097741	0					
ANR	5097773	Identifier	i		5097741	1					
ANR	5097774	ElseStatement	else		5097741	0					
ANR	5097775	ExpressionStatement	"subline ( pole + p_offset , pole_step_i , T0 [ i ] , T1 [ i ] )"	962:12:32568:32619	5097741	0	True				
ANR	5097776	CallExpression	"subline ( pole + p_offset , pole_step_i , T0 [ i ] , T1 [ i ] )"		5097741	0					
ANR	5097777	Callee	subline		5097741	0					
ANR	5097778	Identifier	subline		5097741	0					
ANR	5097779	ArgumentList	pole + p_offset		5097741	1					
ANR	5097780	Argument	pole + p_offset		5097741	0					
ANR	5097781	AdditiveExpression	pole + p_offset		5097741	0		+			
ANR	5097782	Identifier	pole		5097741	0					
ANR	5097783	Identifier	p_offset		5097741	1					
ANR	5097784	Argument	pole_step_i		5097741	1					
ANR	5097785	Identifier	pole_step_i		5097741	0					
ANR	5097786	Argument	T0 [ i ]		5097741	2					
ANR	5097787	ArrayIndexing	T0 [ i ]		5097741	0					
ANR	5097788	Identifier	T0		5097741	0					
ANR	5097789	Identifier	i		5097741	1					
ANR	5097790	Argument	T1 [ i ]		5097741	3					
ANR	5097791	ArrayIndexing	T1 [ i ]		5097741	0					
ANR	5097792	Identifier	T1		5097741	0					
ANR	5097793	Identifier	i		5097741	1					
ANR	5097794	ElseStatement	else		5097741	0					
ANR	5097795	IfStatement	if ( i == ii )		5097741	0					
ANR	5097796	Condition	i == ii	963:15:32636:32642	5097741	0	True				
ANR	5097797	EqualityExpression	i == ii		5097741	0		==			
ANR	5097798	Identifier	i		5097741	0					
ANR	5097799	Identifier	ii		5097741	1					
ANR	5097800	CompoundStatement		7:24:211:211	5097741	1					
ANR	5097801	ExpressionStatement	"clamp_poles ( T0 , T1 , ii - 1 , i , pole , p_offset , pole_step / 4 , pole_step , order )"	964:8:32655:32734	5097741	0	True				
ANR	5097802	CallExpression	"clamp_poles ( T0 , T1 , ii - 1 , i , pole , p_offset , pole_step / 4 , pole_step , order )"		5097741	0					
ANR	5097803	Callee	clamp_poles		5097741	0					
ANR	5097804	Identifier	clamp_poles		5097741	0					
ANR	5097805	ArgumentList	T0		5097741	1					
ANR	5097806	Argument	T0		5097741	0					
ANR	5097807	Identifier	T0		5097741	0					
ANR	5097808	Argument	T1		5097741	1					
ANR	5097809	Identifier	T1		5097741	0					
ANR	5097810	Argument	ii - 1		5097741	2					
ANR	5097811	AdditiveExpression	ii - 1		5097741	0		-			
ANR	5097812	Identifier	ii		5097741	0					
ANR	5097813	PrimaryExpression	1		5097741	1					
ANR	5097814	Argument	i		5097741	3					
ANR	5097815	Identifier	i		5097741	0					
ANR	5097816	Argument	pole		5097741	4					
ANR	5097817	Identifier	pole		5097741	0					
ANR	5097818	Argument	p_offset		5097741	5					
ANR	5097819	Identifier	p_offset		5097741	0					
ANR	5097820	Argument	pole_step / 4		5097741	6					
ANR	5097821	MultiplicativeExpression	pole_step / 4		5097741	0		/			
ANR	5097822	Identifier	pole_step		5097741	0					
ANR	5097823	PrimaryExpression	4		5097741	1					
ANR	5097824	Argument	pole_step		5097741	7					
ANR	5097825	Identifier	pole_step		5097741	0					
ANR	5097826	Argument	order		5097741	8					
ANR	5097827	Identifier	order		5097741	0					
ANR	5097828	ElseStatement	else		5097741	0					
ANR	5097829	CompoundStatement		10:8:323:369	5097741	0					
ANR	5097830	IdentifierDeclStatement	"int j , ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 ) ;"	966:8:32757:32803	5097741	0	True				
ANR	5097831	IdentifierDecl	j		5097741	0					
ANR	5097832	IdentifierDeclType	int		5097741	0					
ANR	5097833	Identifier	j		5097741	1					
ANR	5097834	IdentifierDecl	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		5097741	1					
ANR	5097835	IdentifierDeclType	int		5097741	0					
ANR	5097836	Identifier	ei		5097741	1					
ANR	5097837	AssignmentExpression	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		5097741	2		=			
ANR	5097838	Identifier	ei		5097741	0					
ANR	5097839	ConditionalExpression	T0 [ ii ] == T1 [ ii ] ? 1 : order + 1		5097741	1					
ANR	5097840	Condition	T0 [ ii ] == T1 [ ii ]		5097741	0					
ANR	5097841	EqualityExpression	T0 [ ii ] == T1 [ ii ]		5097741	0		==			
ANR	5097842	ArrayIndexing	T0 [ ii ]		5097741	0					
ANR	5097843	Identifier	T0		5097741	0					
ANR	5097844	Identifier	ii		5097741	1					
ANR	5097845	ArrayIndexing	T1 [ ii ]		5097741	1					
ANR	5097846	Identifier	T1		5097741	0					
ANR	5097847	Identifier	ii		5097741	1					
ANR	5097848	PrimaryExpression	1		5097741	1					
ANR	5097849	AdditiveExpression	order + 1		5097741	2		+			
ANR	5097850	Identifier	order		5097741	0					
ANR	5097851	PrimaryExpression	1		5097741	1					
ANR	5097852	ForStatement	for ( j = 0 ; j < ei ; j ++ )		5097741	1					
ANR	5097853	ForInit	j = 0 ;	968:13:32819:32824	5097741	0	True				
ANR	5097854	AssignmentExpression	j = 0		5097741	0		=			
ANR	5097855	Identifier	j		5097741	0					
ANR	5097856	PrimaryExpression	0		5097741	1					
ANR	5097857	Condition	j < ei	968:20:32826:32831	5097741	1	True				
ANR	5097858	RelationalExpression	j < ei		5097741	0		<			
ANR	5097859	Identifier	j		5097741	0					
ANR	5097860	Identifier	ei		5097741	1					
ANR	5097861	PostIncDecOperationExpression	j ++	968:28:32834:32836	5097741	2	True				
ANR	5097862	Identifier	j		5097741	0					
ANR	5097863	IncDec	++		5097741	1					
ANR	5097864	ExpressionStatement	"clamp_poles ( T0 , T1 , ii - 1 , i , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"	969:12:32851:32976	5097741	3	True				
ANR	5097865	CallExpression	"clamp_poles ( T0 , T1 , ii - 1 , i , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"		5097741	0					
ANR	5097866	Callee	clamp_poles		5097741	0					
ANR	5097867	Identifier	clamp_poles		5097741	0					
ANR	5097868	ArgumentList	T0		5097741	1					
ANR	5097869	Argument	T0		5097741	0					
ANR	5097870	Identifier	T0		5097741	0					
ANR	5097871	Argument	T1		5097741	1					
ANR	5097872	Identifier	T1		5097741	0					
ANR	5097873	Argument	ii - 1		5097741	2					
ANR	5097874	AdditiveExpression	ii - 1		5097741	0		-			
ANR	5097875	Identifier	ii		5097741	0					
ANR	5097876	PrimaryExpression	1		5097741	1					
ANR	5097877	Argument	i		5097741	3					
ANR	5097878	Identifier	i		5097741	0					
ANR	5097879	Argument	pole		5097741	4					
ANR	5097880	Identifier	pole		5097741	0					
ANR	5097881	Argument	p_offset + j * pole_step		5097741	5					
ANR	5097882	AdditiveExpression	p_offset + j * pole_step		5097741	0		+			
ANR	5097883	Identifier	p_offset		5097741	0					
ANR	5097884	MultiplicativeExpression	j * pole_step		5097741	1		*			
ANR	5097885	Identifier	j		5097741	0					
ANR	5097886	Identifier	pole_step		5097741	1					
ANR	5097887	Argument	pole_step / 4		5097741	6					
ANR	5097888	MultiplicativeExpression	pole_step / 4		5097741	0		/			
ANR	5097889	Identifier	pole_step		5097741	0					
ANR	5097890	PrimaryExpression	4		5097741	1					
ANR	5097891	Argument	pole_step_i		5097741	7					
ANR	5097892	Identifier	pole_step_i		5097741	0					
ANR	5097893	Argument	order		5097741	8					
ANR	5097894	Identifier	order		5097741	0					
ANR	5097895	ReturnType	static void		5097741	1					
ANR	5097896	Identifier	clamp_poles		5097741	2					
ANR	5097897	ParameterList	"double * T0 , double * T1 , int ii , int i , double * pole , int p_offset , int pole_step , int pole_step_i , int order"		5097741	3					
ANR	5097898	Parameter	double * T0	955:12:32306:32315	5097741	0	True				
ANR	5097899	ParameterType	double *		5097741	0					
ANR	5097900	Identifier	T0		5097741	1					
ANR	5097901	Parameter	double * T1	955:24:32318:32327	5097741	1	True				
ANR	5097902	ParameterType	double *		5097741	0					
ANR	5097903	Identifier	T1		5097741	1					
ANR	5097904	Parameter	int ii	955:36:32330:32335	5097741	2	True				
ANR	5097905	ParameterType	int		5097741	0					
ANR	5097906	Identifier	ii		5097741	1					
ANR	5097907	Parameter	int i	955:44:32338:32342	5097741	3	True				
ANR	5097908	ParameterType	int		5097741	0					
ANR	5097909	Identifier	i		5097741	1					
ANR	5097910	Parameter	double * pole	955:51:32345:32357	5097741	4	True				
ANR	5097911	ParameterType	double *		5097741	0					
ANR	5097912	Identifier	pole		5097741	1					
ANR	5097913	Parameter	int p_offset	956:16:32376:32387	5097741	5	True				
ANR	5097914	ParameterType	int		5097741	0					
ANR	5097915	Identifier	p_offset		5097741	1					
ANR	5097916	Parameter	int pole_step	956:30:32390:32402	5097741	6	True				
ANR	5097917	ParameterType	int		5097741	0					
ANR	5097918	Identifier	pole_step		5097741	1					
ANR	5097919	Parameter	int pole_step_i	956:45:32405:32419	5097741	7	True				
ANR	5097920	ParameterType	int		5097741	0					
ANR	5097921	Identifier	pole_step_i		5097741	1					
ANR	5097922	Parameter	int order	956:62:32422:32430	5097741	8	True				
ANR	5097923	ParameterType	int		5097741	0					
ANR	5097924	Identifier	order		5097741	1					
ANR	5097925	CFGEntryNode	ENTRY		5097741		True				
ANR	5097926	CFGExitNode	EXIT		5097741		True				
ANR	5097927	Symbol	ii		5097741						
ANR	5097928	Symbol	* T1		5097741						
ANR	5097929	Symbol	* T0		5097741						
ANR	5097930	Symbol	ei		5097741						
ANR	5097931	Symbol	* ii		5097741						
ANR	5097932	Symbol	pole_step_i		5097741						
ANR	5097933	Symbol	i		5097741						
ANR	5097934	Symbol	p_offset		5097741						
ANR	5097935	Symbol	j		5097741						
ANR	5097936	Symbol	pole		5097741						
ANR	5097937	Symbol	pole_step		5097741						
ANR	5097938	Symbol	* i		5097741						
ANR	5097939	Symbol	T0		5097741						
ANR	5097940	Symbol	T1		5097741						
ANR	5097941	Symbol	order		5097741						
ANR	5097942	Function	curve_monotonity	974:0:32987:33621							
ANR	5097943	FunctionDef	"curve_monotonity (double * pole , int pole_step)"		5097942	0					
ANR	5097944	CompoundStatement		976:0:33119:33621	5097942	0					
ANR	5097945	IdentifierDeclStatement	double p0 = pole [ pole_step * 0 ] ;	977:4:33125:33156	5097942	0	True				
ANR	5097946	IdentifierDecl	p0 = pole [ pole_step * 0 ]		5097942	0					
ANR	5097947	IdentifierDeclType	double		5097942	0					
ANR	5097948	Identifier	p0		5097942	1					
ANR	5097949	AssignmentExpression	p0 = pole [ pole_step * 0 ]		5097942	2		=			
ANR	5097950	Identifier	p0		5097942	0					
ANR	5097951	ArrayIndexing	pole [ pole_step * 0 ]		5097942	1					
ANR	5097952	Identifier	pole		5097942	0					
ANR	5097953	MultiplicativeExpression	pole_step * 0		5097942	1		*			
ANR	5097954	Identifier	pole_step		5097942	0					
ANR	5097955	PrimaryExpression	0		5097942	1					
ANR	5097956	IdentifierDeclStatement	double p1 = pole [ pole_step * 1 ] ;	978:4:33162:33193	5097942	1	True				
ANR	5097957	IdentifierDecl	p1 = pole [ pole_step * 1 ]		5097942	0					
ANR	5097958	IdentifierDeclType	double		5097942	0					
ANR	5097959	Identifier	p1		5097942	1					
ANR	5097960	AssignmentExpression	p1 = pole [ pole_step * 1 ]		5097942	2		=			
ANR	5097961	Identifier	p1		5097942	0					
ANR	5097962	ArrayIndexing	pole [ pole_step * 1 ]		5097942	1					
ANR	5097963	Identifier	pole		5097942	0					
ANR	5097964	MultiplicativeExpression	pole_step * 1		5097942	1		*			
ANR	5097965	Identifier	pole_step		5097942	0					
ANR	5097966	PrimaryExpression	1		5097942	1					
ANR	5097967	IdentifierDeclStatement	double p2 = pole [ pole_step * 2 ] ;	979:4:33199:33230	5097942	2	True				
ANR	5097968	IdentifierDecl	p2 = pole [ pole_step * 2 ]		5097942	0					
ANR	5097969	IdentifierDeclType	double		5097942	0					
ANR	5097970	Identifier	p2		5097942	1					
ANR	5097971	AssignmentExpression	p2 = pole [ pole_step * 2 ]		5097942	2		=			
ANR	5097972	Identifier	p2		5097942	0					
ANR	5097973	ArrayIndexing	pole [ pole_step * 2 ]		5097942	1					
ANR	5097974	Identifier	pole		5097942	0					
ANR	5097975	MultiplicativeExpression	pole_step * 2		5097942	1		*			
ANR	5097976	Identifier	pole_step		5097942	0					
ANR	5097977	PrimaryExpression	2		5097942	1					
ANR	5097978	IdentifierDeclStatement	double p3 = pole [ pole_step * 3 ] ;	980:4:33236:33267	5097942	3	True				
ANR	5097979	IdentifierDecl	p3 = pole [ pole_step * 3 ]		5097942	0					
ANR	5097980	IdentifierDeclType	double		5097942	0					
ANR	5097981	Identifier	p3		5097942	1					
ANR	5097982	AssignmentExpression	p3 = pole [ pole_step * 3 ]		5097942	2		=			
ANR	5097983	Identifier	p3		5097942	0					
ANR	5097984	ArrayIndexing	pole [ pole_step * 3 ]		5097942	1					
ANR	5097985	Identifier	pole		5097942	0					
ANR	5097986	MultiplicativeExpression	pole_step * 3		5097942	1		*			
ANR	5097987	Identifier	pole_step		5097942	0					
ANR	5097988	PrimaryExpression	3		5097942	1					
ANR	5097989	IfStatement	if ( p0 == p1 && any_abs ( p1 - p2 ) < 1e-13 && p2 == p3 )		5097942	4					
ANR	5097990	Condition	p0 == p1 && any_abs ( p1 - p2 ) < 1e-13 && p2 == p3	982:8:33278:33325	5097942	0	True				
ANR	5097991	AndExpression	p0 == p1 && any_abs ( p1 - p2 ) < 1e-13 && p2 == p3		5097942	0		&&			
ANR	5097992	EqualityExpression	p0 == p1		5097942	0		==			
ANR	5097993	Identifier	p0		5097942	0					
ANR	5097994	Identifier	p1		5097942	1					
ANR	5097995	AndExpression	any_abs ( p1 - p2 ) < 1e-13 && p2 == p3		5097942	1		&&			
ANR	5097996	RelationalExpression	any_abs ( p1 - p2 ) < 1e-13		5097942	0		<			
ANR	5097997	CallExpression	any_abs ( p1 - p2 )		5097942	0					
ANR	5097998	Callee	any_abs		5097942	0					
ANR	5097999	Identifier	any_abs		5097942	0					
ANR	5098000	ArgumentList	p1 - p2		5097942	1					
ANR	5098001	Argument	p1 - p2		5097942	0					
ANR	5098002	AdditiveExpression	p1 - p2		5097942	0		-			
ANR	5098003	Identifier	p1		5097942	0					
ANR	5098004	Identifier	p2		5097942	1					
ANR	5098005	PrimaryExpression	1e-13		5097942	1					
ANR	5098006	EqualityExpression	p2 == p3		5097942	1		==			
ANR	5098007	Identifier	p2		5097942	0					
ANR	5098008	Identifier	p3		5097942	1					
ANR	5098009	ReturnStatement	return 0 ;	983:8:33336:33344	5097942	1	True				
ANR	5098010	PrimaryExpression	0		5097942	0					
ANR	5098011	IfStatement	if ( p0 <= p1 && p1 <= p2 && p2 <= p3 )		5097942	5					
ANR	5098012	Condition	p0 <= p1 && p1 <= p2 && p2 <= p3	984:8:33354:33385	5097942	0	True				
ANR	5098013	AndExpression	p0 <= p1 && p1 <= p2 && p2 <= p3		5097942	0		&&			
ANR	5098014	RelationalExpression	p0 <= p1		5097942	0		<=			
ANR	5098015	Identifier	p0		5097942	0					
ANR	5098016	Identifier	p1		5097942	1					
ANR	5098017	AndExpression	p1 <= p2 && p2 <= p3		5097942	1		&&			
ANR	5098018	RelationalExpression	p1 <= p2		5097942	0		<=			
ANR	5098019	Identifier	p1		5097942	0					
ANR	5098020	Identifier	p2		5097942	1					
ANR	5098021	RelationalExpression	p2 <= p3		5097942	1		<=			
ANR	5098022	Identifier	p2		5097942	0					
ANR	5098023	Identifier	p3		5097942	1					
ANR	5098024	ReturnStatement	return 1 ;	985:8:33396:33404	5097942	1	True				
ANR	5098025	PrimaryExpression	1		5097942	0					
ANR	5098026	IfStatement	if ( p0 >= p1 && p1 >= p2 && p2 >= p3 )		5097942	6					
ANR	5098027	Condition	p0 >= p1 && p1 >= p2 && p2 >= p3	986:8:33414:33445	5097942	0	True				
ANR	5098028	AndExpression	p0 >= p1 && p1 >= p2 && p2 >= p3		5097942	0		&&			
ANR	5098029	RelationalExpression	p0 >= p1		5097942	0		>=			
ANR	5098030	Identifier	p0		5097942	0					
ANR	5098031	Identifier	p1		5097942	1					
ANR	5098032	AndExpression	p1 >= p2 && p2 >= p3		5097942	1		&&			
ANR	5098033	RelationalExpression	p1 >= p2		5097942	0		>=			
ANR	5098034	Identifier	p1		5097942	0					
ANR	5098035	Identifier	p2		5097942	1					
ANR	5098036	RelationalExpression	p2 >= p3		5097942	1		>=			
ANR	5098037	Identifier	p2		5097942	0					
ANR	5098038	Identifier	p3		5097942	1					
ANR	5098039	ReturnStatement	return 2 ;	987:8:33456:33464	5097942	1	True				
ANR	5098040	PrimaryExpression	2		5097942	0					
ANR	5098041	ReturnStatement	return 3 ;	992:4:33611:33619	5097942	7	True				
ANR	5098042	PrimaryExpression	3		5097942	0					
ANR	5098043	ReturnType	static inline int		5097942	1					
ANR	5098044	Identifier	curve_monotonity		5097942	2					
ANR	5098045	ParameterList	"double * pole , int pole_step"		5097942	3					
ANR	5098046	Parameter	double * pole	975:17:33090:33101	5097942	0	True				
ANR	5098047	ParameterType	double *		5097942	0					
ANR	5098048	Identifier	pole		5097942	1					
ANR	5098049	Parameter	int pole_step	975:31:33104:33116	5097942	1	True				
ANR	5098050	ParameterType	int		5097942	0					
ANR	5098051	Identifier	pole_step		5097942	1					
ANR	5098052	CFGEntryNode	ENTRY		5097942		True				
ANR	5098053	CFGExitNode	EXIT		5097942		True				
ANR	5098054	Symbol	p0		5097942						
ANR	5098055	Symbol	p1		5097942						
ANR	5098056	Symbol	p2		5097942						
ANR	5098057	Symbol	p3		5097942						
ANR	5098058	Symbol	any_abs		5097942						
ANR	5098059	Symbol	pole		5097942						
ANR	5098060	Symbol	* pole_step		5097942						
ANR	5098061	Symbol	pole_step		5097942						
ANR	5098062	Symbol	* pole		5097942						
ANR	5098063	Function	line_monotonity	995:0:33624:33916							
ANR	5098064	FunctionDef	"line_monotonity (double * pole , int pole_step)"		5098063	0					
ANR	5098065	CompoundStatement		997:0:33739:33916	5098063	0					
ANR	5098066	IdentifierDeclStatement	double p0 = pole [ pole_step * 0 ] ;	998:4:33745:33776	5098063	0	True				
ANR	5098067	IdentifierDecl	p0 = pole [ pole_step * 0 ]		5098063	0					
ANR	5098068	IdentifierDeclType	double		5098063	0					
ANR	5098069	Identifier	p0		5098063	1					
ANR	5098070	AssignmentExpression	p0 = pole [ pole_step * 0 ]		5098063	2		=			
ANR	5098071	Identifier	p0		5098063	0					
ANR	5098072	ArrayIndexing	pole [ pole_step * 0 ]		5098063	1					
ANR	5098073	Identifier	pole		5098063	0					
ANR	5098074	MultiplicativeExpression	pole_step * 0		5098063	1		*			
ANR	5098075	Identifier	pole_step		5098063	0					
ANR	5098076	PrimaryExpression	0		5098063	1					
ANR	5098077	IdentifierDeclStatement	double p1 = pole [ pole_step * 1 ] ;	999:4:33782:33813	5098063	1	True				
ANR	5098078	IdentifierDecl	p1 = pole [ pole_step * 1 ]		5098063	0					
ANR	5098079	IdentifierDeclType	double		5098063	0					
ANR	5098080	Identifier	p1		5098063	1					
ANR	5098081	AssignmentExpression	p1 = pole [ pole_step * 1 ]		5098063	2		=			
ANR	5098082	Identifier	p1		5098063	0					
ANR	5098083	ArrayIndexing	pole [ pole_step * 1 ]		5098063	1					
ANR	5098084	Identifier	pole		5098063	0					
ANR	5098085	MultiplicativeExpression	pole_step * 1		5098063	1		*			
ANR	5098086	Identifier	pole_step		5098063	0					
ANR	5098087	PrimaryExpression	1		5098063	1					
ANR	5098088	IfStatement	if ( p1 - p0 > 1e-13 )		5098063	2					
ANR	5098089	Condition	p1 - p0 > 1e-13	1001:8:33824:33838	5098063	0	True				
ANR	5098090	RelationalExpression	p1 - p0 > 1e-13		5098063	0		>			
ANR	5098091	AdditiveExpression	p1 - p0		5098063	0		-			
ANR	5098092	Identifier	p1		5098063	0					
ANR	5098093	Identifier	p0		5098063	1					
ANR	5098094	PrimaryExpression	1e-13		5098063	1					
ANR	5098095	ReturnStatement	return 1 ;	1002:8:33849:33857	5098063	1	True				
ANR	5098096	PrimaryExpression	1		5098063	0					
ANR	5098097	IfStatement	if ( p0 - p1 > 1e-13 )		5098063	3					
ANR	5098098	Condition	p0 - p1 > 1e-13	1003:8:33867:33881	5098063	0	True				
ANR	5098099	RelationalExpression	p0 - p1 > 1e-13		5098063	0		>			
ANR	5098100	AdditiveExpression	p0 - p1		5098063	0		-			
ANR	5098101	Identifier	p0		5098063	0					
ANR	5098102	Identifier	p1		5098063	1					
ANR	5098103	PrimaryExpression	1e-13		5098063	1					
ANR	5098104	ReturnStatement	return 2 ;	1004:8:33892:33900	5098063	1	True				
ANR	5098105	PrimaryExpression	2		5098063	0					
ANR	5098106	ReturnStatement	return 0 ;	1005:4:33906:33914	5098063	4	True				
ANR	5098107	PrimaryExpression	0		5098063	0					
ANR	5098108	ReturnType	static inline int		5098063	1					
ANR	5098109	Identifier	line_monotonity		5098063	2					
ANR	5098110	ParameterList	"double * pole , int pole_step"		5098063	3					
ANR	5098111	Parameter	double * pole	996:16:33710:33721	5098063	0	True				
ANR	5098112	ParameterType	double *		5098063	0					
ANR	5098113	Identifier	pole		5098063	1					
ANR	5098114	Parameter	int pole_step	996:30:33724:33736	5098063	1	True				
ANR	5098115	ParameterType	int		5098063	0					
ANR	5098116	Identifier	pole_step		5098063	1					
ANR	5098117	CFGEntryNode	ENTRY		5098063		True				
ANR	5098118	CFGExitNode	EXIT		5098063		True				
ANR	5098119	Symbol	p0		5098063						
ANR	5098120	Symbol	p1		5098063						
ANR	5098121	Symbol	pole		5098063						
ANR	5098122	Symbol	* pole_step		5098063						
ANR	5098123	Symbol	pole_step		5098063						
ANR	5098124	Symbol	* pole		5098063						
ANR	5098125	Function	tensor_dimension_monotonity	1008:0:33919:35230							
ANR	5098126	FunctionDef	"tensor_dimension_monotonity (const double * T0 , const double * T1 , int ii , int i0 , double * pole , int p_offset , int pole_step , int pole_step_i , int order)"		5098125	0					
ANR	5098127	CompoundStatement		1013:0:34274:35230	5098125	0					
ANR	5098128	IfStatement	if ( ii < 0 )		5098125	0					
ANR	5098129	Condition	ii < 0	1014:8:34284:34289	5098125	0	True				
ANR	5098130	RelationalExpression	ii < 0		5098125	0		<			
ANR	5098131	Identifier	ii		5098125	0					
ANR	5098132	PrimaryExpression	0		5098125	1					
ANR	5098133	CompoundStatement		2:16:17:17	5098125	1					
ANR	5098134	IfStatement	if ( order == 3 )		5098125	0					
ANR	5098135	Condition	order == 3	1015:12:34306:34315	5098125	0	True				
ANR	5098136	EqualityExpression	order == 3		5098125	0		==			
ANR	5098137	Identifier	order		5098125	0					
ANR	5098138	PrimaryExpression	3		5098125	1					
ANR	5098139	ReturnStatement	"return curve_monotonity ( pole + p_offset , pole_step_i ) ;"	1016:12:34330:34383	5098125	1	True				
ANR	5098140	CallExpression	"curve_monotonity ( pole + p_offset , pole_step_i )"		5098125	0					
ANR	5098141	Callee	curve_monotonity		5098125	0					
ANR	5098142	Identifier	curve_monotonity		5098125	0					
ANR	5098143	ArgumentList	pole + p_offset		5098125	1					
ANR	5098144	Argument	pole + p_offset		5098125	0					
ANR	5098145	AdditiveExpression	pole + p_offset		5098125	0		+			
ANR	5098146	Identifier	pole		5098125	0					
ANR	5098147	Identifier	p_offset		5098125	1					
ANR	5098148	Argument	pole_step_i		5098125	1					
ANR	5098149	Identifier	pole_step_i		5098125	0					
ANR	5098150	ElseStatement	else		5098125	0					
ANR	5098151	ReturnStatement	"return line_monotonity ( pole + p_offset , pole_step_i ) ;"	1018:12:34410:34462	5098125	0	True				
ANR	5098152	CallExpression	"line_monotonity ( pole + p_offset , pole_step_i )"		5098125	0					
ANR	5098153	Callee	line_monotonity		5098125	0					
ANR	5098154	Identifier	line_monotonity		5098125	0					
ANR	5098155	ArgumentList	pole + p_offset		5098125	1					
ANR	5098156	Argument	pole + p_offset		5098125	0					
ANR	5098157	AdditiveExpression	pole + p_offset		5098125	0		+			
ANR	5098158	Identifier	pole		5098125	0					
ANR	5098159	Identifier	p_offset		5098125	1					
ANR	5098160	Argument	pole_step_i		5098125	1					
ANR	5098161	Identifier	pole_step_i		5098125	0					
ANR	5098162	ElseStatement	else		5098125	0					
ANR	5098163	IfStatement	if ( i0 == ii )		5098125	0					
ANR	5098164	Condition	i0 == ii	1019:15:34479:34486	5098125	0	True				
ANR	5098165	EqualityExpression	i0 == ii		5098125	0		==			
ANR	5098166	Identifier	i0		5098125	0					
ANR	5098167	Identifier	ii		5098125	1					
ANR	5098168	CompoundStatement		7:25:214:214	5098125	1					
ANR	5098169	ReturnStatement	"return tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset , pole_step / 4 , pole_step , order ) ;"	1021:8:34569:34700	5098125	0	True				
ANR	5098170	CallExpression	"tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset , pole_step / 4 , pole_step , order )"		5098125	0					
ANR	5098171	Callee	tensor_dimension_monotonity		5098125	0					
ANR	5098172	Identifier	tensor_dimension_monotonity		5098125	0					
ANR	5098173	ArgumentList	T0		5098125	1					
ANR	5098174	Argument	T0		5098125	0					
ANR	5098175	Identifier	T0		5098125	0					
ANR	5098176	Argument	T1		5098125	1					
ANR	5098177	Identifier	T1		5098125	0					
ANR	5098178	Argument	ii - 1		5098125	2					
ANR	5098179	AdditiveExpression	ii - 1		5098125	0		-			
ANR	5098180	Identifier	ii		5098125	0					
ANR	5098181	PrimaryExpression	1		5098125	1					
ANR	5098182	Argument	i0		5098125	3					
ANR	5098183	Identifier	i0		5098125	0					
ANR	5098184	Argument	pole		5098125	4					
ANR	5098185	Identifier	pole		5098125	0					
ANR	5098186	Argument	p_offset		5098125	5					
ANR	5098187	Identifier	p_offset		5098125	0					
ANR	5098188	Argument	pole_step / 4		5098125	6					
ANR	5098189	MultiplicativeExpression	pole_step / 4		5098125	0		/			
ANR	5098190	Identifier	pole_step		5098125	0					
ANR	5098191	PrimaryExpression	4		5098125	1					
ANR	5098192	Argument	pole_step		5098125	7					
ANR	5098193	Identifier	pole_step		5098125	0					
ANR	5098194	Argument	order		5098125	8					
ANR	5098195	Identifier	order		5098125	0					
ANR	5098196	ElseStatement	else		5098125	0					
ANR	5098197	CompoundStatement		12:8:448:505	5098125	0					
ANR	5098198	IdentifierDeclStatement	"int j , ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 ) , m = 0 , mm ;"	1024:8:34723:34780	5098125	0	True				
ANR	5098199	IdentifierDecl	j		5098125	0					
ANR	5098200	IdentifierDeclType	int		5098125	0					
ANR	5098201	Identifier	j		5098125	1					
ANR	5098202	IdentifierDecl	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		5098125	1					
ANR	5098203	IdentifierDeclType	int		5098125	0					
ANR	5098204	Identifier	ei		5098125	1					
ANR	5098205	AssignmentExpression	ei = ( T0 [ ii ] == T1 [ ii ] ? 1 : order + 1 )		5098125	2		=			
ANR	5098206	Identifier	ei		5098125	0					
ANR	5098207	ConditionalExpression	T0 [ ii ] == T1 [ ii ] ? 1 : order + 1		5098125	1					
ANR	5098208	Condition	T0 [ ii ] == T1 [ ii ]		5098125	0					
ANR	5098209	EqualityExpression	T0 [ ii ] == T1 [ ii ]		5098125	0		==			
ANR	5098210	ArrayIndexing	T0 [ ii ]		5098125	0					
ANR	5098211	Identifier	T0		5098125	0					
ANR	5098212	Identifier	ii		5098125	1					
ANR	5098213	ArrayIndexing	T1 [ ii ]		5098125	1					
ANR	5098214	Identifier	T1		5098125	0					
ANR	5098215	Identifier	ii		5098125	1					
ANR	5098216	PrimaryExpression	1		5098125	1					
ANR	5098217	AdditiveExpression	order + 1		5098125	2		+			
ANR	5098218	Identifier	order		5098125	0					
ANR	5098219	PrimaryExpression	1		5098125	1					
ANR	5098220	IdentifierDecl	m = 0		5098125	2					
ANR	5098221	IdentifierDeclType	int		5098125	0					
ANR	5098222	Identifier	m		5098125	1					
ANR	5098223	AssignmentExpression	m = 0		5098125	2		=			
ANR	5098224	Identifier	m		5098125	0					
ANR	5098225	PrimaryExpression	0		5098125	1					
ANR	5098226	IdentifierDecl	mm		5098125	3					
ANR	5098227	IdentifierDeclType	int		5098125	0					
ANR	5098228	Identifier	mm		5098125	1					
ANR	5098229	ForStatement	for ( j = 0 ; j < ei ; j ++ )		5098125	1					
ANR	5098230	ForInit	j = 0 ;	1026:13:34796:34801	5098125	0	True				
ANR	5098231	AssignmentExpression	j = 0		5098125	0		=			
ANR	5098232	Identifier	j		5098125	0					
ANR	5098233	PrimaryExpression	0		5098125	1					
ANR	5098234	Condition	j < ei	1026:20:34803:34808	5098125	1	True				
ANR	5098235	RelationalExpression	j < ei		5098125	0		<			
ANR	5098236	Identifier	j		5098125	0					
ANR	5098237	Identifier	ei		5098125	1					
ANR	5098238	PostIncDecOperationExpression	j ++	1026:28:34811:34813	5098125	2	True				
ANR	5098239	Identifier	j		5098125	0					
ANR	5098240	IncDec	++		5098125	1					
ANR	5098241	CompoundStatement		14:33:541:541	5098125	3					
ANR	5098242	ExpressionStatement	"mm = tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"	1027:12:34830:34976	5098125	0	True				
ANR	5098243	AssignmentExpression	"mm = tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"		5098125	0		=			
ANR	5098244	Identifier	mm		5098125	0					
ANR	5098245	CallExpression	"tensor_dimension_monotonity ( T0 , T1 , ii - 1 , i0 , pole , p_offset + j * pole_step , pole_step / 4 , pole_step_i , order )"		5098125	1					
ANR	5098246	Callee	tensor_dimension_monotonity		5098125	0					
ANR	5098247	Identifier	tensor_dimension_monotonity		5098125	0					
ANR	5098248	ArgumentList	T0		5098125	1					
ANR	5098249	Argument	T0		5098125	0					
ANR	5098250	Identifier	T0		5098125	0					
ANR	5098251	Argument	T1		5098125	1					
ANR	5098252	Identifier	T1		5098125	0					
ANR	5098253	Argument	ii - 1		5098125	2					
ANR	5098254	AdditiveExpression	ii - 1		5098125	0		-			
ANR	5098255	Identifier	ii		5098125	0					
ANR	5098256	PrimaryExpression	1		5098125	1					
ANR	5098257	Argument	i0		5098125	3					
ANR	5098258	Identifier	i0		5098125	0					
ANR	5098259	Argument	pole		5098125	4					
ANR	5098260	Identifier	pole		5098125	0					
ANR	5098261	Argument	p_offset + j * pole_step		5098125	5					
ANR	5098262	AdditiveExpression	p_offset + j * pole_step		5098125	0		+			
ANR	5098263	Identifier	p_offset		5098125	0					
ANR	5098264	MultiplicativeExpression	j * pole_step		5098125	1		*			
ANR	5098265	Identifier	j		5098125	0					
ANR	5098266	Identifier	pole_step		5098125	1					
ANR	5098267	Argument	pole_step / 4		5098125	6					
ANR	5098268	MultiplicativeExpression	pole_step / 4		5098125	0		/			
ANR	5098269	Identifier	pole_step		5098125	0					
ANR	5098270	PrimaryExpression	4		5098125	1					
ANR	5098271	Argument	pole_step_i		5098125	7					
ANR	5098272	Identifier	pole_step_i		5098125	0					
ANR	5098273	Argument	order		5098125	8					
ANR	5098274	Identifier	order		5098125	0					
ANR	5098275	ExpressionStatement	m |= mm << ( j * 3 )	1029:12:34990:35008	5098125	1	True				
ANR	5098276	AssignmentExpression	m |= mm << ( j * 3 )		5098125	0		|=			
ANR	5098277	Identifier	m		5098125	0					
ANR	5098278	ShiftExpression	mm << ( j * 3 )		5098125	1		<<			
ANR	5098279	Identifier	mm		5098125	0					
ANR	5098280	MultiplicativeExpression	j * 3		5098125	1		*			
ANR	5098281	Identifier	j		5098125	0					
ANR	5098282	PrimaryExpression	3		5098125	1					
ANR	5098283	IfStatement	if ( mm == 3 )		5098125	2					
ANR	5098284	Condition	mm == 3	1030:16:35026:35032	5098125	0	True				
ANR	5098285	EqualityExpression	mm == 3		5098125	0		==			
ANR	5098286	Identifier	mm		5098125	0					
ANR	5098287	PrimaryExpression	3		5098125	1					
ANR	5098288	CompoundStatement		18:25:760:760	5098125	1					
ANR	5098289	BreakStatement	break ;	1033:16:35175:35180	5098125	0	True				
ANR	5098290	ReturnStatement	return m ;	1036:8:35214:35222	5098125	2	True				
ANR	5098291	Identifier	m		5098125	0					
ANR	5098292	ReturnType	static int		5098125	1					
ANR	5098293	Identifier	tensor_dimension_monotonity		5098125	2					
ANR	5098294	ParameterList	"const double * T0 , const double * T1 , int ii , int i0 , double * pole , int p_offset , int pole_step , int pole_step_i , int order"		5098125	3					
ANR	5098295	Parameter	const double * T0	1011:28:34135:34150	5098125	0	True				
ANR	5098296	ParameterType	const double *		5098125	0					
ANR	5098297	Identifier	T0		5098125	1					
ANR	5098298	Parameter	const double * T1	1011:46:34153:34168	5098125	1	True				
ANR	5098299	ParameterType	const double *		5098125	0					
ANR	5098300	Identifier	T1		5098125	1					
ANR	5098301	Parameter	int ii	1011:64:34171:34176	5098125	2	True				
ANR	5098302	ParameterType	int		5098125	0					
ANR	5098303	Identifier	ii		5098125	1					
ANR	5098304	Parameter	int i0	1011:72:34179:34184	5098125	3	True				
ANR	5098305	ParameterType	int		5098125	0					
ANR	5098306	Identifier	i0		5098125	1					
ANR	5098307	Parameter	double * pole	1011:80:34187:34198	5098125	4	True				
ANR	5098308	ParameterType	double *		5098125	0					
ANR	5098309	Identifier	pole		5098125	1					
ANR	5098310	Parameter	int p_offset	1012:16:34217:34228	5098125	5	True				
ANR	5098311	ParameterType	int		5098125	0					
ANR	5098312	Identifier	p_offset		5098125	1					
ANR	5098313	Parameter	int pole_step	1012:30:34231:34243	5098125	6	True				
ANR	5098314	ParameterType	int		5098125	0					
ANR	5098315	Identifier	pole_step		5098125	1					
ANR	5098316	Parameter	int pole_step_i	1012:45:34246:34260	5098125	7	True				
ANR	5098317	ParameterType	int		5098125	0					
ANR	5098318	Identifier	pole_step_i		5098125	1					
ANR	5098319	Parameter	int order	1012:62:34263:34271	5098125	8	True				
ANR	5098320	ParameterType	int		5098125	0					
ANR	5098321	Identifier	order		5098125	1					
ANR	5098322	CFGEntryNode	ENTRY		5098125		True				
ANR	5098323	CFGExitNode	EXIT		5098125		True				
ANR	5098324	Symbol	ii		5098125						
ANR	5098325	Symbol	mm		5098125						
ANR	5098326	Symbol	* T1		5098125						
ANR	5098327	Symbol	tensor_dimension_monotonity		5098125						
ANR	5098328	Symbol	* T0		5098125						
ANR	5098329	Symbol	ei		5098125						
ANR	5098330	Symbol	* ii		5098125						
ANR	5098331	Symbol	pole_step_i		5098125						
ANR	5098332	Symbol	i0		5098125						
ANR	5098333	Symbol	p_offset		5098125						
ANR	5098334	Symbol	j		5098125						
ANR	5098335	Symbol	pole		5098125						
ANR	5098336	Symbol	pole_step		5098125						
ANR	5098337	Symbol	m		5098125						
ANR	5098338	Symbol	curve_monotonity		5098125						
ANR	5098339	Symbol	line_monotonity		5098125						
ANR	5098340	Symbol	T0		5098125						
ANR	5098341	Symbol	T1		5098125						
ANR	5098342	Symbol	order		5098125						
ANR	5098343	Function	is_tensor_monotonic_by_dimension	1040:0:35233:36578							
ANR	5098344	FunctionDef	"is_tensor_monotonic_by_dimension (const gs_function_Sd_t * pfn , int * I , double * T0 , double * T1 , int i0 , int k , uint * mask)"		5098343	0					
ANR	5098345	CompoundStatement		1045:0:35569:36578	5098343	0					
ANR	5098346	IdentifierDeclStatement	double pole [ 4 * 4 * 4 ] ;	1046:4:35575:35593	5098343	0	True				
ANR	5098347	IdentifierDecl	pole [ 4 * 4 * 4 ]		5098343	0					
ANR	5098348	IdentifierDeclType	double [ 4 * 4 * 4 ]		5098343	0					
ANR	5098349	Identifier	pole		5098343	1					
ANR	5098350	MultiplicativeExpression	4 * 4 * 4		5098343	2		*			
ANR	5098351	PrimaryExpression	4		5098343	0					
ANR	5098352	MultiplicativeExpression	4 * 4		5098343	1		*			
ANR	5098353	PrimaryExpression	4		5098343	0					
ANR	5098354	PrimaryExpression	4		5098343	1					
ANR	5098355	IdentifierDeclStatement	"int i , code , ii = pfn -> params . m - 1 ;"	1048:4:35740:35775	5098343	1	True				
ANR	5098356	IdentifierDecl	i		5098343	0					
ANR	5098357	IdentifierDeclType	int		5098343	0					
ANR	5098358	Identifier	i		5098343	1					
ANR	5098359	IdentifierDecl	code		5098343	1					
ANR	5098360	IdentifierDeclType	int		5098343	0					
ANR	5098361	Identifier	code		5098343	1					
ANR	5098362	IdentifierDecl	ii = pfn -> params . m - 1		5098343	2					
ANR	5098363	IdentifierDeclType	int		5098343	0					
ANR	5098364	Identifier	ii		5098343	1					
ANR	5098365	AssignmentExpression	ii = pfn -> params . m - 1		5098343	2		=			
ANR	5098366	Identifier	ii		5098343	0					
ANR	5098367	AdditiveExpression	pfn -> params . m - 1		5098343	1		-			
ANR	5098368	MemberAccess	pfn -> params . m		5098343	0					
ANR	5098369	PtrMemberAccess	pfn -> params		5098343	0					
ANR	5098370	Identifier	pfn		5098343	0					
ANR	5098371	Identifier	params		5098343	1					
ANR	5098372	Identifier	m		5098343	1					
ANR	5098373	PrimaryExpression	1		5098343	1					
ANR	5098374	IdentifierDeclStatement	"double TT0 [ 3 ] , TT1 [ 3 ] ;"	1049:4:35781:35802	5098343	2	True				
ANR	5098375	IdentifierDecl	TT0 [ 3 ]		5098343	0					
ANR	5098376	IdentifierDeclType	double [ 3 ]		5098343	0					
ANR	5098377	Identifier	TT0		5098343	1					
ANR	5098378	PrimaryExpression	3		5098343	2					
ANR	5098379	IdentifierDecl	TT1 [ 3 ]		5098343	1					
ANR	5098380	IdentifierDeclType	double [ 3 ]		5098343	0					
ANR	5098381	Identifier	TT1		5098343	1					
ANR	5098382	PrimaryExpression	3		5098343	2					
ANR	5098383	ExpressionStatement	* mask = 0	1051:4:35809:35818	5098343	3	True				
ANR	5098384	AssignmentExpression	* mask = 0		5098343	0		=			
ANR	5098385	UnaryOperationExpression	* mask		5098343	0					
ANR	5098386	UnaryOperator	*		5098343	0					
ANR	5098387	Identifier	mask		5098343	1					
ANR	5098388	PrimaryExpression	0		5098343	1					
ANR	5098389	IfStatement	if ( ii >= 3 )		5098343	4					
ANR	5098390	Condition	ii >= 3	1052:8:35828:35834	5098343	0	True				
ANR	5098391	RelationalExpression	ii >= 3		5098343	0		>=			
ANR	5098392	Identifier	ii		5098343	0					
ANR	5098393	PrimaryExpression	3		5098343	1					
ANR	5098394	CompoundStatement		8:17:267:267	5098343	1					
ANR	5098395	ExpressionStatement	return_error ( gs_error_limitcheck )	1055:8:35986:36019	5098343	0	True				
ANR	5098396	CallExpression	return_error ( gs_error_limitcheck )		5098343	0					
ANR	5098397	Callee	return_error		5098343	0					
ANR	5098398	Identifier	return_error		5098343	0					
ANR	5098399	ArgumentList	gs_error_limitcheck		5098343	1					
ANR	5098400	Argument	gs_error_limitcheck		5098343	0					
ANR	5098401	Identifier	gs_error_limitcheck		5098343	0					
ANR	5098402	ExpressionStatement	"code = copy_poles ( pfn , I , T0 , T1 , k , ii , pole , 0 , count_of ( pole ) / 4 )"	1057:4:36031:36100	5098343	5	True				
ANR	5098403	AssignmentExpression	"code = copy_poles ( pfn , I , T0 , T1 , k , ii , pole , 0 , count_of ( pole ) / 4 )"		5098343	0		=			
ANR	5098404	Identifier	code		5098343	0					
ANR	5098405	CallExpression	"copy_poles ( pfn , I , T0 , T1 , k , ii , pole , 0 , count_of ( pole ) / 4 )"		5098343	1					
ANR	5098406	Callee	copy_poles		5098343	0					
ANR	5098407	Identifier	copy_poles		5098343	0					
ANR	5098408	ArgumentList	pfn		5098343	1					
ANR	5098409	Argument	pfn		5098343	0					
ANR	5098410	Identifier	pfn		5098343	0					
ANR	5098411	Argument	I		5098343	1					
ANR	5098412	Identifier	I		5098343	0					
ANR	5098413	Argument	T0		5098343	2					
ANR	5098414	Identifier	T0		5098343	0					
ANR	5098415	Argument	T1		5098343	3					
ANR	5098416	Identifier	T1		5098343	0					
ANR	5098417	Argument	k		5098343	4					
ANR	5098418	Identifier	k		5098343	0					
ANR	5098419	Argument	ii		5098343	5					
ANR	5098420	Identifier	ii		5098343	0					
ANR	5098421	Argument	pole		5098343	6					
ANR	5098422	Identifier	pole		5098343	0					
ANR	5098423	Argument	0		5098343	7					
ANR	5098424	PrimaryExpression	0		5098343	0					
ANR	5098425	Argument	count_of ( pole ) / 4		5098343	8					
ANR	5098426	MultiplicativeExpression	count_of ( pole ) / 4		5098343	0		/			
ANR	5098427	CallExpression	count_of ( pole )		5098343	0					
ANR	5098428	Callee	count_of		5098343	0					
ANR	5098429	Identifier	count_of		5098343	0					
ANR	5098430	ArgumentList	pole		5098343	1					
ANR	5098431	Argument	pole		5098343	0					
ANR	5098432	Identifier	pole		5098343	0					
ANR	5098433	PrimaryExpression	4		5098343	1					
ANR	5098434	IfStatement	if ( code < 0 )		5098343	6					
ANR	5098435	Condition	code < 0	1058:8:36110:36117	5098343	0	True				
ANR	5098436	RelationalExpression	code < 0		5098343	0		<			
ANR	5098437	Identifier	code		5098343	0					
ANR	5098438	PrimaryExpression	0		5098343	1					
ANR	5098439	ReturnStatement	return code ;	1059:8:36128:36139	5098343	1	True				
ANR	5098440	Identifier	code		5098343	0					
ANR	5098441	ForStatement	for ( i = ii ; i >= 0 ; i -- )		5098343	7					
ANR	5098442	ForInit	i = ii ;	1060:9:36150:36156	5098343	0	True				
ANR	5098443	AssignmentExpression	i = ii		5098343	0		=			
ANR	5098444	Identifier	i		5098343	0					
ANR	5098445	Identifier	ii		5098343	1					
ANR	5098446	Condition	i >= 0	1060:17:36158:36163	5098343	1	True				
ANR	5098447	RelationalExpression	i >= 0		5098343	0		>=			
ANR	5098448	Identifier	i		5098343	0					
ANR	5098449	PrimaryExpression	0		5098343	1					
ANR	5098450	PostIncDecOperationExpression	i --	1060:25:36166:36168	5098343	2	True				
ANR	5098451	Identifier	i		5098343	0					
ANR	5098452	IncDec	--		5098343	1					
ANR	5098453	CompoundStatement		16:30:601:601	5098343	3					
ANR	5098454	ExpressionStatement	TT0 [ i ] = 0	1061:8:36181:36191	5098343	0	True				
ANR	5098455	AssignmentExpression	TT0 [ i ] = 0		5098343	0		=			
ANR	5098456	ArrayIndexing	TT0 [ i ]		5098343	0					
ANR	5098457	Identifier	TT0		5098343	0					
ANR	5098458	Identifier	i		5098343	1					
ANR	5098459	PrimaryExpression	0		5098343	1					
ANR	5098460	IfStatement	if ( T0 [ i ] != T1 [ i ] )		5098343	1					
ANR	5098461	Condition	T0 [ i ] != T1 [ i ]	1062:12:36205:36218	5098343	0	True				
ANR	5098462	EqualityExpression	T0 [ i ] != T1 [ i ]		5098343	0		!=			
ANR	5098463	ArrayIndexing	T0 [ i ]		5098343	0					
ANR	5098464	Identifier	T0		5098343	0					
ANR	5098465	Identifier	i		5098343	1					
ANR	5098466	ArrayIndexing	T1 [ i ]		5098343	1					
ANR	5098467	Identifier	T1		5098343	0					
ANR	5098468	Identifier	i		5098343	1					
ANR	5098469	CompoundStatement		18:28:651:651	5098343	1					
ANR	5098470	IfStatement	if ( T0 [ i ] != 0 || T1 [ i ] != 1 )		5098343	0					
ANR	5098471	Condition	T0 [ i ] != 0 || T1 [ i ] != 1	1063:16:36239:36262	5098343	0	True				
ANR	5098472	OrExpression	T0 [ i ] != 0 || T1 [ i ] != 1		5098343	0		||			
ANR	5098473	EqualityExpression	T0 [ i ] != 0		5098343	0		!=			
ANR	5098474	ArrayIndexing	T0 [ i ]		5098343	0					
ANR	5098475	Identifier	T0		5098343	0					
ANR	5098476	Identifier	i		5098343	1					
ANR	5098477	PrimaryExpression	0		5098343	1					
ANR	5098478	EqualityExpression	T1 [ i ] != 1		5098343	1		!=			
ANR	5098479	ArrayIndexing	T1 [ i ]		5098343	0					
ANR	5098480	Identifier	T1		5098343	0					
ANR	5098481	Identifier	i		5098343	1					
ANR	5098482	PrimaryExpression	1		5098343	1					
ANR	5098483	ExpressionStatement	"clamp_poles ( T0 , T1 , ii , i , pole , 0 , count_of ( pole ) / 4 , - 1 , pfn -> params . Order )"	1064:16:36281:36359	5098343	1	True				
ANR	5098484	CallExpression	"clamp_poles ( T0 , T1 , ii , i , pole , 0 , count_of ( pole ) / 4 , - 1 , pfn -> params . Order )"		5098343	0					
ANR	5098485	Callee	clamp_poles		5098343	0					
ANR	5098486	Identifier	clamp_poles		5098343	0					
ANR	5098487	ArgumentList	T0		5098343	1					
ANR	5098488	Argument	T0		5098343	0					
ANR	5098489	Identifier	T0		5098343	0					
ANR	5098490	Argument	T1		5098343	1					
ANR	5098491	Identifier	T1		5098343	0					
ANR	5098492	Argument	ii		5098343	2					
ANR	5098493	Identifier	ii		5098343	0					
ANR	5098494	Argument	i		5098343	3					
ANR	5098495	Identifier	i		5098343	0					
ANR	5098496	Argument	pole		5098343	4					
ANR	5098497	Identifier	pole		5098343	0					
ANR	5098498	Argument	0		5098343	5					
ANR	5098499	PrimaryExpression	0		5098343	0					
ANR	5098500	Argument	count_of ( pole ) / 4		5098343	6					
ANR	5098501	MultiplicativeExpression	count_of ( pole ) / 4		5098343	0		/			
ANR	5098502	CallExpression	count_of ( pole )		5098343	0					
ANR	5098503	Callee	count_of		5098343	0					
ANR	5098504	Identifier	count_of		5098343	0					
ANR	5098505	ArgumentList	pole		5098343	1					
ANR	5098506	Argument	pole		5098343	0					
ANR	5098507	Identifier	pole		5098343	0					
ANR	5098508	PrimaryExpression	4		5098343	1					
ANR	5098509	Argument	- 1		5098343	7					
ANR	5098510	UnaryOperationExpression	- 1		5098343	0					
ANR	5098511	UnaryOperator	-		5098343	0					
ANR	5098512	PrimaryExpression	1		5098343	1					
ANR	5098513	Argument	pfn -> params . Order		5098343	8					
ANR	5098514	MemberAccess	pfn -> params . Order		5098343	0					
ANR	5098515	PtrMemberAccess	pfn -> params		5098343	0					
ANR	5098516	Identifier	pfn		5098343	0					
ANR	5098517	Identifier	params		5098343	1					
ANR	5098518	Identifier	Order		5098343	1					
ANR	5098519	ExpressionStatement	TT1 [ i ] = 1	1065:12:36373:36383	5098343	1	True				
ANR	5098520	AssignmentExpression	TT1 [ i ] = 1		5098343	0		=			
ANR	5098521	ArrayIndexing	TT1 [ i ]		5098343	0					
ANR	5098522	Identifier	TT1		5098343	0					
ANR	5098523	Identifier	i		5098343	1					
ANR	5098524	PrimaryExpression	1		5098343	1					
ANR	5098525	ElseStatement	else		5098343	0					
ANR	5098526	ExpressionStatement	TT1 [ i ] = 0	1067:12:36412:36422	5098343	0	True				
ANR	5098527	AssignmentExpression	TT1 [ i ] = 0		5098343	0		=			
ANR	5098528	ArrayIndexing	TT1 [ i ]		5098343	0					
ANR	5098529	Identifier	TT1		5098343	0					
ANR	5098530	Identifier	i		5098343	1					
ANR	5098531	PrimaryExpression	0		5098343	1					
ANR	5098532	ExpressionStatement	"* mask = tensor_dimension_monotonity ( TT0 , TT1 , ii , i0 , pole , 0 , count_of ( pole ) / 4 , 1 , pfn -> params . Order )"	1069:4:36434:36562	5098343	8	True				
ANR	5098533	AssignmentExpression	"* mask = tensor_dimension_monotonity ( TT0 , TT1 , ii , i0 , pole , 0 , count_of ( pole ) / 4 , 1 , pfn -> params . Order )"		5098343	0		=			
ANR	5098534	UnaryOperationExpression	* mask		5098343	0					
ANR	5098535	UnaryOperator	*		5098343	0					
ANR	5098536	Identifier	mask		5098343	1					
ANR	5098537	CallExpression	"tensor_dimension_monotonity ( TT0 , TT1 , ii , i0 , pole , 0 , count_of ( pole ) / 4 , 1 , pfn -> params . Order )"		5098343	1					
ANR	5098538	Callee	tensor_dimension_monotonity		5098343	0					
ANR	5098539	Identifier	tensor_dimension_monotonity		5098343	0					
ANR	5098540	ArgumentList	TT0		5098343	1					
ANR	5098541	Argument	TT0		5098343	0					
ANR	5098542	Identifier	TT0		5098343	0					
ANR	5098543	Argument	TT1		5098343	1					
ANR	5098544	Identifier	TT1		5098343	0					
ANR	5098545	Argument	ii		5098343	2					
ANR	5098546	Identifier	ii		5098343	0					
ANR	5098547	Argument	i0		5098343	3					
ANR	5098548	Identifier	i0		5098343	0					
ANR	5098549	Argument	pole		5098343	4					
ANR	5098550	Identifier	pole		5098343	0					
ANR	5098551	Argument	0		5098343	5					
ANR	5098552	PrimaryExpression	0		5098343	0					
ANR	5098553	Argument	count_of ( pole ) / 4		5098343	6					
ANR	5098554	MultiplicativeExpression	count_of ( pole ) / 4		5098343	0		/			
ANR	5098555	CallExpression	count_of ( pole )		5098343	0					
ANR	5098556	Callee	count_of		5098343	0					
ANR	5098557	Identifier	count_of		5098343	0					
ANR	5098558	ArgumentList	pole		5098343	1					
ANR	5098559	Argument	pole		5098343	0					
ANR	5098560	Identifier	pole		5098343	0					
ANR	5098561	PrimaryExpression	4		5098343	1					
ANR	5098562	Argument	1		5098343	7					
ANR	5098563	PrimaryExpression	1		5098343	0					
ANR	5098564	Argument	pfn -> params . Order		5098343	8					
ANR	5098565	MemberAccess	pfn -> params . Order		5098343	0					
ANR	5098566	PtrMemberAccess	pfn -> params		5098343	0					
ANR	5098567	Identifier	pfn		5098343	0					
ANR	5098568	Identifier	params		5098343	1					
ANR	5098569	Identifier	Order		5098343	1					
ANR	5098570	ReturnStatement	return 0 ;	1071:4:36568:36576	5098343	9	True				
ANR	5098571	PrimaryExpression	0		5098343	0					
ANR	5098572	ReturnType	static inline int		5098343	1					
ANR	5098573	Identifier	is_tensor_monotonic_by_dimension		5098343	2					
ANR	5098574	ParameterList	"const gs_function_Sd_t * pfn , int * I , double * T0 , double * T1 , int i0 , int k , uint * mask"		5098343	3					
ANR	5098575	Parameter	const gs_function_Sd_t * pfn	1041:33:35284:35310	5098343	0	True				
ANR	5098576	ParameterType	const gs_function_Sd_t *		5098343	0					
ANR	5098577	Identifier	pfn		5098343	1					
ANR	5098578	Parameter	int * I	1041:62:35313:35318	5098343	1	True				
ANR	5098579	ParameterType	int *		5098343	0					
ANR	5098580	Identifier	I		5098343	1					
ANR	5098581	Parameter	double * T0	1041:70:35321:35330	5098343	2	True				
ANR	5098582	ParameterType	double *		5098343	0					
ANR	5098583	Identifier	T0		5098343	1					
ANR	5098584	Parameter	double * T1	1041:82:35333:35342	5098343	3	True				
ANR	5098585	ParameterType	double *		5098343	0					
ANR	5098586	Identifier	T1		5098343	1					
ANR	5098587	Parameter	int i0	1041:94:35345:35350	5098343	4	True				
ANR	5098588	ParameterType	int		5098343	0					
ANR	5098589	Identifier	i0		5098343	1					
ANR	5098590	Parameter	int k	1041:102:35353:35357	5098343	5	True				
ANR	5098591	ParameterType	int		5098343	0					
ANR	5098592	Identifier	k		5098343	1					
ANR	5098593	Parameter	uint * mask	1042:20:35380:35389	5098343	6	True				
ANR	5098594	ParameterType	uint *		5098343	0					
ANR	5098595	Identifier	mask		5098343	1					
ANR	5098596	CFGEntryNode	ENTRY		5098343		True				
ANR	5098597	CFGExitNode	EXIT		5098343		True				
ANR	5098598	Symbol	* T1		5098343						
ANR	5098599	Symbol	* T0		5098343						
ANR	5098600	Symbol	tensor_dimension_monotonity		5098343						
ANR	5098601	Symbol	pfn -> params . m		5098343						
ANR	5098602	Symbol	code		5098343						
ANR	5098603	Symbol	* mask		5098343						
ANR	5098604	Symbol	I		5098343						
ANR	5098605	Symbol	pole		5098343						
ANR	5098606	Symbol	pfn -> params . Order		5098343						
ANR	5098607	Symbol	copy_poles		5098343						
ANR	5098608	Symbol	count_of		5098343						
ANR	5098609	Symbol	gs_error_limitcheck		5098343						
ANR	5098610	Symbol	T0		5098343						
ANR	5098611	Symbol	T1		5098343						
ANR	5098612	Symbol	mask		5098343						
ANR	5098613	Symbol	ii		5098343						
ANR	5098614	Symbol	* pfn		5098343						
ANR	5098615	Symbol	* TT1		5098343						
ANR	5098616	Symbol	* TT0		5098343						
ANR	5098617	Symbol	i0		5098343						
ANR	5098618	Symbol	i		5098343						
ANR	5098619	Symbol	k		5098343						
ANR	5098620	Symbol	TT1		5098343						
ANR	5098621	Symbol	TT0		5098343						
ANR	5098622	Symbol	* i		5098343						
ANR	5098623	Symbol	pfn		5098343						
ANR	5098624	Symbol	pfn -> params		5098343						
ANR	5098625	Function	is_lattice_monotonic_by_dimension	1074:0:36581:38184							
ANR	5098626	FunctionDef	"is_lattice_monotonic_by_dimension (const gs_function_Sd_t * pfn , const double * T0 , const double * T1 , int * I , double * S0 , double * S1 , int ii , int i0 , int k , uint * mask)"		5098625	0					
ANR	5098627	CompoundStatement		1079:0:36919:38184	5098625	0					
ANR	5098628	IfStatement	if ( ii == - 1 )		5098625	0					
ANR	5098629	Condition	ii == - 1	1080:8:36929:36936	5098625	0	True				
ANR	5098630	EqualityExpression	ii == - 1		5098625	0		==			
ANR	5098631	Identifier	ii		5098625	0					
ANR	5098632	UnaryOperationExpression	- 1		5098625	1					
ANR	5098633	UnaryOperator	-		5098625	0					
ANR	5098634	PrimaryExpression	1		5098625	1					
ANR	5098635	CompoundStatement		2:18:19:19	5098625	1					
ANR	5098636	ReturnStatement	"return is_tensor_monotonic_by_dimension ( pfn , I , S0 , S1 , i0 , k , mask ) ;"	1082:8:37033:37101	5098625	0	True				
ANR	5098637	CallExpression	"is_tensor_monotonic_by_dimension ( pfn , I , S0 , S1 , i0 , k , mask )"		5098625	0					
ANR	5098638	Callee	is_tensor_monotonic_by_dimension		5098625	0					
ANR	5098639	Identifier	is_tensor_monotonic_by_dimension		5098625	0					
ANR	5098640	ArgumentList	pfn		5098625	1					
ANR	5098641	Argument	pfn		5098625	0					
ANR	5098642	Identifier	pfn		5098625	0					
ANR	5098643	Argument	I		5098625	1					
ANR	5098644	Identifier	I		5098625	0					
ANR	5098645	Argument	S0		5098625	2					
ANR	5098646	Identifier	S0		5098625	0					
ANR	5098647	Argument	S1		5098625	3					
ANR	5098648	Identifier	S1		5098625	0					
ANR	5098649	Argument	i0		5098625	4					
ANR	5098650	Identifier	i0		5098625	0					
ANR	5098651	Argument	k		5098625	5					
ANR	5098652	Identifier	k		5098625	0					
ANR	5098653	Argument	mask		5098625	6					
ANR	5098654	Identifier	mask		5098625	0					
ANR	5098655	ElseStatement	else		5098625	0					
ANR	5098656	CompoundStatement		10:8:412:484	5098625	0					
ANR	5098657	IdentifierDeclStatement	int i1 = ( ii > i0 ? ii : ii == 0 ? i0 : ii - 1 ) ;	1084:8:37124:37171	5098625	0	True				
ANR	5098658	IdentifierDecl	i1 = ( ii > i0 ? ii : ii == 0 ? i0 : ii - 1 )		5098625	0					
ANR	5098659	IdentifierDeclType	int		5098625	0					
ANR	5098660	Identifier	i1		5098625	1					
ANR	5098661	AssignmentExpression	i1 = ( ii > i0 ? ii : ii == 0 ? i0 : ii - 1 )		5098625	2		=			
ANR	5098662	Identifier	i1		5098625	0					
ANR	5098663	ConditionalExpression	ii > i0 ? ii : ii == 0 ? i0 : ii - 1		5098625	1					
ANR	5098664	Condition	ii > i0		5098625	0					
ANR	5098665	RelationalExpression	ii > i0		5098625	0		>			
ANR	5098666	Identifier	ii		5098625	0					
ANR	5098667	Identifier	i0		5098625	1					
ANR	5098668	Identifier	ii		5098625	1					
ANR	5098669	ConditionalExpression	ii == 0 ? i0 : ii - 1		5098625	2					
ANR	5098670	Condition	ii == 0		5098625	0					
ANR	5098671	EqualityExpression	ii == 0		5098625	0		==			
ANR	5098672	Identifier	ii		5098625	0					
ANR	5098673	PrimaryExpression	0		5098625	1					
ANR	5098674	Identifier	i0		5098625	1					
ANR	5098675	AdditiveExpression	ii - 1		5098625	2		-			
ANR	5098676	Identifier	ii		5098625	0					
ANR	5098677	PrimaryExpression	1		5098625	1					
ANR	5098678	IdentifierDeclStatement	"int j , code ;"	1085:8:37237:37248	5098625	1	True				
ANR	5098679	IdentifierDecl	j		5098625	0					
ANR	5098680	IdentifierDeclType	int		5098625	0					
ANR	5098681	Identifier	j		5098625	1					
ANR	5098682	IdentifierDecl	code		5098625	1					
ANR	5098683	IdentifierDeclType	int		5098625	0					
ANR	5098684	Identifier	code		5098625	1					
ANR	5098685	IdentifierDeclStatement	int bi = ( int ) floor ( T0 [ i1 ] ) ;	1086:8:37258:37285	5098625	2	True				
ANR	5098686	IdentifierDecl	bi = ( int ) floor ( T0 [ i1 ] )		5098625	0					
ANR	5098687	IdentifierDeclType	int		5098625	0					
ANR	5098688	Identifier	bi		5098625	1					
ANR	5098689	AssignmentExpression	bi = ( int ) floor ( T0 [ i1 ] )		5098625	2		=			
ANR	5098690	Identifier	bi		5098625	0					
ANR	5098691	CastExpression	( int ) floor ( T0 [ i1 ] )		5098625	1					
ANR	5098692	CastTarget	int		5098625	0					
ANR	5098693	CallExpression	floor ( T0 [ i1 ] )		5098625	1					
ANR	5098694	Callee	floor		5098625	0					
ANR	5098695	Identifier	floor		5098625	0					
ANR	5098696	ArgumentList	T0 [ i1 ]		5098625	1					
ANR	5098697	Argument	T0 [ i1 ]		5098625	0					
ANR	5098698	ArrayIndexing	T0 [ i1 ]		5098625	0					
ANR	5098699	Identifier	T0		5098625	0					
ANR	5098700	Identifier	i1		5098625	1					
ANR	5098701	IdentifierDeclStatement	int ei = ( int ) floor ( T1 [ i1 ] ) ;	1087:8:37295:37322	5098625	3	True				
ANR	5098702	IdentifierDecl	ei = ( int ) floor ( T1 [ i1 ] )		5098625	0					
ANR	5098703	IdentifierDeclType	int		5098625	0					
ANR	5098704	Identifier	ei		5098625	1					
ANR	5098705	AssignmentExpression	ei = ( int ) floor ( T1 [ i1 ] )		5098625	2		=			
ANR	5098706	Identifier	ei		5098625	0					
ANR	5098707	CastExpression	( int ) floor ( T1 [ i1 ] )		5098625	1					
ANR	5098708	CastTarget	int		5098625	0					
ANR	5098709	CallExpression	floor ( T1 [ i1 ] )		5098625	1					
ANR	5098710	Callee	floor		5098625	0					
ANR	5098711	Identifier	floor		5098625	0					
ANR	5098712	ArgumentList	T1 [ i1 ]		5098625	1					
ANR	5098713	Argument	T1 [ i1 ]		5098625	0					
ANR	5098714	ArrayIndexing	T1 [ i1 ]		5098625	0					
ANR	5098715	Identifier	T1		5098625	0					
ANR	5098716	Identifier	i1		5098625	1					
ANR	5098717	IdentifierDeclStatement	"uint m , mm , m1 = 0x49249249 & ( ( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1 ) ;"	1088:8:37332:37404	5098625	4	True				
ANR	5098718	IdentifierDecl	m		5098625	0					
ANR	5098719	IdentifierDeclType	uint		5098625	0					
ANR	5098720	Identifier	m		5098625	1					
ANR	5098721	IdentifierDecl	mm		5098625	1					
ANR	5098722	IdentifierDeclType	uint		5098625	0					
ANR	5098723	Identifier	mm		5098625	1					
ANR	5098724	IdentifierDecl	m1 = 0x49249249 & ( ( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1 )		5098625	2					
ANR	5098725	IdentifierDeclType	uint		5098625	0					
ANR	5098726	Identifier	m1		5098625	1					
ANR	5098727	AssignmentExpression	m1 = 0x49249249 & ( ( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1 )		5098625	2		=			
ANR	5098728	Identifier	m1		5098625	0					
ANR	5098729	BitAndExpression	0x49249249 & ( ( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1 )		5098625	1		&			
ANR	5098730	PrimaryExpression	0x49249249		5098625	0					
ANR	5098731	AdditiveExpression	( 1 << ( ( pfn -> params . Order + 1 ) * 3 ) ) - 1		5098625	1		-			
ANR	5098732	ShiftExpression	1 << ( ( pfn -> params . Order + 1 ) * 3 )		5098625	0		<<			
ANR	5098733	PrimaryExpression	1		5098625	0					
ANR	5098734	MultiplicativeExpression	( pfn -> params . Order + 1 ) * 3		5098625	1		*			
ANR	5098735	AdditiveExpression	pfn -> params . Order + 1		5098625	0		+			
ANR	5098736	MemberAccess	pfn -> params . Order		5098625	0					
ANR	5098737	PtrMemberAccess	pfn -> params		5098625	0					
ANR	5098738	Identifier	pfn		5098625	0					
ANR	5098739	Identifier	params		5098625	1					
ANR	5098740	Identifier	Order		5098625	1					
ANR	5098741	PrimaryExpression	1		5098625	1					
ANR	5098742	PrimaryExpression	3		5098625	1					
ANR	5098743	PrimaryExpression	1		5098625	1					
ANR	5098744	IfStatement	if ( floor ( T1 [ i1 ] ) == T1 [ i1 ] )		5098625	5					
ANR	5098745	Condition	floor ( T1 [ i1 ] ) == T1 [ i1 ]	1090:12:37419:37441	5098625	0	True				
ANR	5098746	EqualityExpression	floor ( T1 [ i1 ] ) == T1 [ i1 ]		5098625	0		==			
ANR	5098747	CallExpression	floor ( T1 [ i1 ] )		5098625	0					
ANR	5098748	Callee	floor		5098625	0					
ANR	5098749	Identifier	floor		5098625	0					
ANR	5098750	ArgumentList	T1 [ i1 ]		5098625	1					
ANR	5098751	Argument	T1 [ i1 ]		5098625	0					
ANR	5098752	ArrayIndexing	T1 [ i1 ]		5098625	0					
ANR	5098753	Identifier	T1		5098625	0					
ANR	5098754	Identifier	i1		5098625	1					
ANR	5098755	ArrayIndexing	T1 [ i1 ]		5098625	1					
ANR	5098756	Identifier	T1		5098625	0					
ANR	5098757	Identifier	i1		5098625	1					
ANR	5098758	ExpressionStatement	ei --	1091:12:37456:37461	5098625	1	True				
ANR	5098759	PostIncDecOperationExpression	ei --		5098625	0					
ANR	5098760	Identifier	ei		5098625	0					
ANR	5098761	IncDec	--		5098625	1					
ANR	5098762	ExpressionStatement	m = 0	1092:8:37471:37476	5098625	6	True				
ANR	5098763	AssignmentExpression	m = 0		5098625	0		=			
ANR	5098764	Identifier	m		5098625	0					
ANR	5098765	PrimaryExpression	0		5098625	1					
ANR	5098766	ForStatement	for ( j = bi ; j <= ei ; j ++ )		5098625	7					
ANR	5098767	ForInit	j = bi ;	1093:13:37491:37497	5098625	0	True				
ANR	5098768	AssignmentExpression	j = bi		5098625	0		=			
ANR	5098769	Identifier	j		5098625	0					
ANR	5098770	Identifier	bi		5098625	1					
ANR	5098771	Condition	j <= ei	1093:21:37499:37505	5098625	1	True				
ANR	5098772	RelationalExpression	j <= ei		5098625	0		<=			
ANR	5098773	Identifier	j		5098625	0					
ANR	5098774	Identifier	ei		5098625	1					
ANR	5098775	PostIncDecOperationExpression	j ++	1093:30:37508:37510	5098625	2	True				
ANR	5098776	Identifier	j		5098625	0					
ANR	5098777	IncDec	++		5098625	1					
ANR	5098778	CompoundStatement		15:35:593:593	5098625	3					
ANR	5098779	ExpressionStatement	I [ i1 ] = j	1095:12:37635:37644	5098625	0	True				
ANR	5098780	AssignmentExpression	I [ i1 ] = j		5098625	0		=			
ANR	5098781	ArrayIndexing	I [ i1 ]		5098625	0					
ANR	5098782	Identifier	I		5098625	0					
ANR	5098783	Identifier	i1		5098625	1					
ANR	5098784	Identifier	j		5098625	1					
ANR	5098785	ExpressionStatement	"S0 [ i1 ] = max ( T0 [ i1 ] - j , 0 )"	1096:12:37658:37685	5098625	1	True				
ANR	5098786	AssignmentExpression	"S0 [ i1 ] = max ( T0 [ i1 ] - j , 0 )"		5098625	0		=			
ANR	5098787	ArrayIndexing	S0 [ i1 ]		5098625	0					
ANR	5098788	Identifier	S0		5098625	0					
ANR	5098789	Identifier	i1		5098625	1					
ANR	5098790	CallExpression	"max ( T0 [ i1 ] - j , 0 )"		5098625	1					
ANR	5098791	Callee	max		5098625	0					
ANR	5098792	Identifier	max		5098625	0					
ANR	5098793	ArgumentList	T0 [ i1 ] - j		5098625	1					
ANR	5098794	Argument	T0 [ i1 ] - j		5098625	0					
ANR	5098795	AdditiveExpression	T0 [ i1 ] - j		5098625	0		-			
ANR	5098796	ArrayIndexing	T0 [ i1 ]		5098625	0					
ANR	5098797	Identifier	T0		5098625	0					
ANR	5098798	Identifier	i1		5098625	1					
ANR	5098799	Identifier	j		5098625	1					
ANR	5098800	Argument	0		5098625	1					
ANR	5098801	PrimaryExpression	0		5098625	0					
ANR	5098802	ExpressionStatement	"S1 [ i1 ] = min ( T1 [ i1 ] - j , 1 )"	1097:12:37699:37726	5098625	2	True				
ANR	5098803	AssignmentExpression	"S1 [ i1 ] = min ( T1 [ i1 ] - j , 1 )"		5098625	0		=			
ANR	5098804	ArrayIndexing	S1 [ i1 ]		5098625	0					
ANR	5098805	Identifier	S1		5098625	0					
ANR	5098806	Identifier	i1		5098625	1					
ANR	5098807	CallExpression	"min ( T1 [ i1 ] - j , 1 )"		5098625	1					
ANR	5098808	Callee	min		5098625	0					
ANR	5098809	Identifier	min		5098625	0					
ANR	5098810	ArgumentList	T1 [ i1 ] - j		5098625	1					
ANR	5098811	Argument	T1 [ i1 ] - j		5098625	0					
ANR	5098812	AdditiveExpression	T1 [ i1 ] - j		5098625	0		-			
ANR	5098813	ArrayIndexing	T1 [ i1 ]		5098625	0					
ANR	5098814	Identifier	T1		5098625	0					
ANR	5098815	Identifier	i1		5098625	1					
ANR	5098816	Identifier	j		5098625	1					
ANR	5098817	Argument	1		5098625	1					
ANR	5098818	PrimaryExpression	1		5098625	0					
ANR	5098819	ExpressionStatement	"code = is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , ii - 1 , i0 , k , & mm )"	1098:12:37740:37824	5098625	3	True				
ANR	5098820	AssignmentExpression	"code = is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , ii - 1 , i0 , k , & mm )"		5098625	0		=			
ANR	5098821	Identifier	code		5098625	0					
ANR	5098822	CallExpression	"is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , ii - 1 , i0 , k , & mm )"		5098625	1					
ANR	5098823	Callee	is_lattice_monotonic_by_dimension		5098625	0					
ANR	5098824	Identifier	is_lattice_monotonic_by_dimension		5098625	0					
ANR	5098825	ArgumentList	pfn		5098625	1					
ANR	5098826	Argument	pfn		5098625	0					
ANR	5098827	Identifier	pfn		5098625	0					
ANR	5098828	Argument	T0		5098625	1					
ANR	5098829	Identifier	T0		5098625	0					
ANR	5098830	Argument	T1		5098625	2					
ANR	5098831	Identifier	T1		5098625	0					
ANR	5098832	Argument	I		5098625	3					
ANR	5098833	Identifier	I		5098625	0					
ANR	5098834	Argument	S0		5098625	4					
ANR	5098835	Identifier	S0		5098625	0					
ANR	5098836	Argument	S1		5098625	5					
ANR	5098837	Identifier	S1		5098625	0					
ANR	5098838	Argument	ii - 1		5098625	6					
ANR	5098839	AdditiveExpression	ii - 1		5098625	0		-			
ANR	5098840	Identifier	ii		5098625	0					
ANR	5098841	PrimaryExpression	1		5098625	1					
ANR	5098842	Argument	i0		5098625	7					
ANR	5098843	Identifier	i0		5098625	0					
ANR	5098844	Argument	k		5098625	8					
ANR	5098845	Identifier	k		5098625	0					
ANR	5098846	Argument	& mm		5098625	9					
ANR	5098847	UnaryOperationExpression	& mm		5098625	0					
ANR	5098848	UnaryOperator	&		5098625	0					
ANR	5098849	Identifier	mm		5098625	1					
ANR	5098850	IfStatement	if ( code < 0 )		5098625	4					
ANR	5098851	Condition	code < 0	1099:16:37842:37849	5098625	0	True				
ANR	5098852	RelationalExpression	code < 0		5098625	0		<			
ANR	5098853	Identifier	code		5098625	0					
ANR	5098854	PrimaryExpression	0		5098625	1					
ANR	5098855	ReturnStatement	return code ;	1100:16:37868:37879	5098625	1	True				
ANR	5098856	Identifier	code		5098625	0					
ANR	5098857	ExpressionStatement	m |= mm	1101:12:37893:37900	5098625	5	True				
ANR	5098858	AssignmentExpression	m |= mm		5098625	0		|=			
ANR	5098859	Identifier	m		5098625	0					
ANR	5098860	Identifier	mm		5098625	1					
ANR	5098861	IfStatement	if ( m == m1 )		5098625	6					
ANR	5098862	Condition	m == m1	1102:16:37918:37924	5098625	0	True				
ANR	5098863	EqualityExpression	m == m1		5098625	0		==			
ANR	5098864	Identifier	m		5098625	0					
ANR	5098865	Identifier	m1		5098625	1					
ANR	5098866	BreakStatement	break ;	1103:16:38014:38019	5098625	1	True				
ANR	5098867	IfStatement	if ( ii == 0 )		5098625	8					
ANR	5098868	Condition	ii == 0	1105:12:38043:38049	5098625	0	True				
ANR	5098869	EqualityExpression	ii == 0		5098625	0		==			
ANR	5098870	Identifier	ii		5098625	0					
ANR	5098871	PrimaryExpression	0		5098625	1					
ANR	5098872	CompoundStatement		27:21:1132:1132	5098625	1					
ANR	5098873	ExpressionStatement	m = m & ( m >> 1 )	1107:12:38113:38129	5098625	0	True				
ANR	5098874	AssignmentExpression	m = m & ( m >> 1 )		5098625	0		=			
ANR	5098875	Identifier	m		5098625	0					
ANR	5098876	BitAndExpression	m & ( m >> 1 )		5098625	1		&			
ANR	5098877	Identifier	m		5098625	0					
ANR	5098878	ShiftExpression	m >> 1		5098625	1		>>			
ANR	5098879	Identifier	m		5098625	0					
ANR	5098880	PrimaryExpression	1		5098625	1					
ANR	5098881	ExpressionStatement	* mask = m	1109:8:38149:38158	5098625	9	True				
ANR	5098882	AssignmentExpression	* mask = m		5098625	0		=			
ANR	5098883	UnaryOperationExpression	* mask		5098625	0					
ANR	5098884	UnaryOperator	*		5098625	0					
ANR	5098885	Identifier	mask		5098625	1					
ANR	5098886	Identifier	m		5098625	1					
ANR	5098887	ReturnStatement	return 0 ;	1110:8:38168:38176	5098625	10	True				
ANR	5098888	PrimaryExpression	0		5098625	0					
ANR	5098889	ReturnType	static int		5098625	1					
ANR	5098890	Identifier	is_lattice_monotonic_by_dimension		5098625	2					
ANR	5098891	ParameterList	"const gs_function_Sd_t * pfn , const double * T0 , const double * T1 , int * I , double * S0 , double * S1 , int ii , int i0 , int k , uint * mask"		5098625	3					
ANR	5098892	Parameter	const gs_function_Sd_t * pfn	1075:34:36643:36669	5098625	0	True				
ANR	5098893	ParameterType	const gs_function_Sd_t *		5098625	0					
ANR	5098894	Identifier	pfn		5098625	1					
ANR	5098895	Parameter	const double * T0	1075:63:36672:36687	5098625	1	True				
ANR	5098896	ParameterType	const double *		5098625	0					
ANR	5098897	Identifier	T0		5098625	1					
ANR	5098898	Parameter	const double * T1	1075:81:36690:36705	5098625	2	True				
ANR	5098899	ParameterType	const double *		5098625	0					
ANR	5098900	Identifier	T1		5098625	1					
ANR	5098901	Parameter	int * I	1076:8:36716:36721	5098625	3	True				
ANR	5098902	ParameterType	int *		5098625	0					
ANR	5098903	Identifier	I		5098625	1					
ANR	5098904	Parameter	double * S0	1076:16:36724:36733	5098625	4	True				
ANR	5098905	ParameterType	double *		5098625	0					
ANR	5098906	Identifier	S0		5098625	1					
ANR	5098907	Parameter	double * S1	1076:28:36736:36745	5098625	5	True				
ANR	5098908	ParameterType	double *		5098625	0					
ANR	5098909	Identifier	S1		5098625	1					
ANR	5098910	Parameter	int ii	1076:40:36748:36753	5098625	6	True				
ANR	5098911	ParameterType	int		5098625	0					
ANR	5098912	Identifier	ii		5098625	1					
ANR	5098913	Parameter	int i0	1076:48:36756:36761	5098625	7	True				
ANR	5098914	ParameterType	int		5098625	0					
ANR	5098915	Identifier	i0		5098625	1					
ANR	5098916	Parameter	int k	1076:56:36764:36768	5098625	8	True				
ANR	5098917	ParameterType	int		5098625	0					
ANR	5098918	Identifier	k		5098625	1					
ANR	5098919	Parameter	uint * mask	1077:8:36779:36788	5098625	9	True				
ANR	5098920	ParameterType	uint *		5098625	0					
ANR	5098921	Identifier	mask		5098625	1					
ANR	5098922	CFGEntryNode	ENTRY		5098625		True				
ANR	5098923	CFGExitNode	EXIT		5098625		True				
ANR	5098924	Symbol	* T1		5098625						
ANR	5098925	Symbol	* T0		5098625						
ANR	5098926	Symbol	code		5098625						
ANR	5098927	Symbol	* mask		5098625						
ANR	5098928	Symbol	bi		5098625						
ANR	5098929	Symbol	I		5098625						
ANR	5098930	Symbol	& mm		5098625						
ANR	5098931	Symbol	* i1		5098625						
ANR	5098932	Symbol	pfn -> params . Order		5098625						
ANR	5098933	Symbol	* I		5098625						
ANR	5098934	Symbol	min		5098625						
ANR	5098935	Symbol	is_lattice_monotonic_by_dimension		5098625						
ANR	5098936	Symbol	T0		5098625						
ANR	5098937	Symbol	floor		5098625						
ANR	5098938	Symbol	T1		5098625						
ANR	5098939	Symbol	mask		5098625						
ANR	5098940	Symbol	ii		5098625						
ANR	5098941	Symbol	mm		5098625						
ANR	5098942	Symbol	* S0		5098625						
ANR	5098943	Symbol	* pfn		5098625						
ANR	5098944	Symbol	ei		5098625						
ANR	5098945	Symbol	m1		5098625						
ANR	5098946	Symbol	max		5098625						
ANR	5098947	Symbol	i0		5098625						
ANR	5098948	Symbol	* S1		5098625						
ANR	5098949	Symbol	i1		5098625						
ANR	5098950	Symbol	j		5098625						
ANR	5098951	Symbol	k		5098625						
ANR	5098952	Symbol	m		5098625						
ANR	5098953	Symbol	is_tensor_monotonic_by_dimension		5098625						
ANR	5098954	Symbol	pfn		5098625						
ANR	5098955	Symbol	S0		5098625						
ANR	5098956	Symbol	pfn -> params		5098625						
ANR	5098957	Symbol	S1		5098625						
ANR	5098958	Function	is_lattice_monotonic	1114:0:38187:38844							
ANR	5098959	FunctionDef	"is_lattice_monotonic (const gs_function_Sd_t * pfn , const double * T0 , const double * T1 , int * I , double * S0 , double * S1 , int k , uint * mask)"		5098958	0					
ANR	5098960	CompoundStatement		1119:0:38475:38844	5098958	0					
ANR	5098961	IdentifierDeclStatement	"uint m , mm = 0 ;"	1120:4:38481:38495	5098958	0	True				
ANR	5098962	IdentifierDecl	m		5098958	0					
ANR	5098963	IdentifierDeclType	uint		5098958	0					
ANR	5098964	Identifier	m		5098958	1					
ANR	5098965	IdentifierDecl	mm = 0		5098958	1					
ANR	5098966	IdentifierDeclType	uint		5098958	0					
ANR	5098967	Identifier	mm		5098958	1					
ANR	5098968	AssignmentExpression	mm = 0		5098958	2		=			
ANR	5098969	Identifier	mm		5098958	0					
ANR	5098970	PrimaryExpression	0		5098958	1					
ANR	5098971	IdentifierDeclStatement	"int i , code ;"	1121:4:38501:38512	5098958	1	True				
ANR	5098972	IdentifierDecl	i		5098958	0					
ANR	5098973	IdentifierDeclType	int		5098958	0					
ANR	5098974	Identifier	i		5098958	1					
ANR	5098975	IdentifierDecl	code		5098958	1					
ANR	5098976	IdentifierDeclType	int		5098958	0					
ANR	5098977	Identifier	code		5098958	1					
ANR	5098978	ForStatement	for ( i = 0 ; i < pfn -> params . m ; i ++ )		5098958	2					
ANR	5098979	ForInit	i = 0 ;	1123:9:38524:38529	5098958	0	True				
ANR	5098980	AssignmentExpression	i = 0		5098958	0		=			
ANR	5098981	Identifier	i		5098958	0					
ANR	5098982	PrimaryExpression	0		5098958	1					
ANR	5098983	Condition	i < pfn -> params . m	1123:16:38531:38547	5098958	1	True				
ANR	5098984	RelationalExpression	i < pfn -> params . m		5098958	0		<			
ANR	5098985	Identifier	i		5098958	0					
ANR	5098986	MemberAccess	pfn -> params . m		5098958	1					
ANR	5098987	PtrMemberAccess	pfn -> params		5098958	0					
ANR	5098988	Identifier	pfn		5098958	0					
ANR	5098989	Identifier	params		5098958	1					
ANR	5098990	Identifier	m		5098958	1					
ANR	5098991	PostIncDecOperationExpression	i ++	1123:35:38550:38552	5098958	2	True				
ANR	5098992	Identifier	i		5098958	0					
ANR	5098993	IncDec	++		5098958	1					
ANR	5098994	CompoundStatement		5:40:79:79	5098958	3					
ANR	5098995	IfStatement	if ( T0 [ i ] != T1 [ i ] )		5098958	0					
ANR	5098996	Condition	T0 [ i ] != T1 [ i ]	1124:12:38569:38582	5098958	0	True				
ANR	5098997	EqualityExpression	T0 [ i ] != T1 [ i ]		5098958	0		!=			
ANR	5098998	ArrayIndexing	T0 [ i ]		5098958	0					
ANR	5098999	Identifier	T0		5098958	0					
ANR	5099000	Identifier	i		5098958	1					
ANR	5099001	ArrayIndexing	T1 [ i ]		5098958	1					
ANR	5099002	Identifier	T1		5098958	0					
ANR	5099003	Identifier	i		5098958	1					
ANR	5099004	CompoundStatement		6:28:109:109	5098958	1					
ANR	5099005	ExpressionStatement	"code = is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , pfn -> params . m - 1 , i , k , & m )"	1125:12:38599:38692	5098958	0	True				
ANR	5099006	AssignmentExpression	"code = is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , pfn -> params . m - 1 , i , k , & m )"		5098958	0		=			
ANR	5099007	Identifier	code		5098958	0					
ANR	5099008	CallExpression	"is_lattice_monotonic_by_dimension ( pfn , T0 , T1 , I , S0 , S1 , pfn -> params . m - 1 , i , k , & m )"		5098958	1					
ANR	5099009	Callee	is_lattice_monotonic_by_dimension		5098958	0					
ANR	5099010	Identifier	is_lattice_monotonic_by_dimension		5098958	0					
ANR	5099011	ArgumentList	pfn		5098958	1					
ANR	5099012	Argument	pfn		5098958	0					
ANR	5099013	Identifier	pfn		5098958	0					
ANR	5099014	Argument	T0		5098958	1					
ANR	5099015	Identifier	T0		5098958	0					
ANR	5099016	Argument	T1		5098958	2					
ANR	5099017	Identifier	T1		5098958	0					
ANR	5099018	Argument	I		5098958	3					
ANR	5099019	Identifier	I		5098958	0					
ANR	5099020	Argument	S0		5098958	4					
ANR	5099021	Identifier	S0		5098958	0					
ANR	5099022	Argument	S1		5098958	5					
ANR	5099023	Identifier	S1		5098958	0					
ANR	5099024	Argument	pfn -> params . m - 1		5098958	6					
ANR	5099025	AdditiveExpression	pfn -> params . m - 1		5098958	0		-			
ANR	5099026	MemberAccess	pfn -> params . m		5098958	0					
ANR	5099027	PtrMemberAccess	pfn -> params		5098958	0					
ANR	5099028	Identifier	pfn		5098958	0					
ANR	5099029	Identifier	params		5098958	1					
ANR	5099030	Identifier	m		5098958	1					
ANR	5099031	PrimaryExpression	1		5098958	1					
ANR	5099032	Argument	i		5098958	7					
ANR	5099033	Identifier	i		5098958	0					
ANR	5099034	Argument	k		5098958	8					
ANR	5099035	Identifier	k		5098958	0					
ANR	5099036	Argument	& m		5098958	9					
ANR	5099037	UnaryOperationExpression	& m		5098958	0					
ANR	5099038	UnaryOperator	&		5098958	0					
ANR	5099039	Identifier	m		5098958	1					
ANR	5099040	IfStatement	if ( code < 0 )		5098958	1					
ANR	5099041	Condition	code < 0	1126:16:38710:38717	5098958	0	True				
ANR	5099042	RelationalExpression	code < 0		5098958	0		<			
ANR	5099043	Identifier	code		5098958	0					
ANR	5099044	PrimaryExpression	0		5098958	1					
ANR	5099045	ReturnStatement	return code ;	1127:16:38736:38747	5098958	1	True				
ANR	5099046	Identifier	code		5098958	0					
ANR	5099047	IfStatement	if ( m )		5098958	2					
ANR	5099048	Condition	m	1128:16:38765:38765	5098958	0	True				
ANR	5099049	Identifier	m		5098958	0					
ANR	5099050	ExpressionStatement	mm |= 1 << i	1129:16:38784:38796	5098958	1	True				
ANR	5099051	AssignmentExpression	mm |= 1 << i		5098958	0		|=			
ANR	5099052	Identifier	mm		5098958	0					
ANR	5099053	ShiftExpression	1 << i		5098958	1		<<			
ANR	5099054	PrimaryExpression	1		5098958	0					
ANR	5099055	Identifier	i		5098958	1					
ANR	5099056	ExpressionStatement	* mask = mm	1132:4:38818:38828	5098958	3	True				
ANR	5099057	AssignmentExpression	* mask = mm		5098958	0		=			
ANR	5099058	UnaryOperationExpression	* mask		5098958	0					
ANR	5099059	UnaryOperator	*		5098958	0					
ANR	5099060	Identifier	mask		5098958	1					
ANR	5099061	Identifier	mm		5098958	1					
ANR	5099062	ReturnStatement	return 0 ;	1133:4:38834:38842	5098958	4	True				
ANR	5099063	PrimaryExpression	0		5098958	0					
ANR	5099064	ReturnType	static inline int		5098958	1					
ANR	5099065	Identifier	is_lattice_monotonic		5098958	2					
ANR	5099066	ParameterList	"const gs_function_Sd_t * pfn , const double * T0 , const double * T1 , int * I , double * S0 , double * S1 , int k , uint * mask"		5098958	3					
ANR	5099067	Parameter	const gs_function_Sd_t * pfn	1115:21:38243:38269	5098958	0	True				
ANR	5099068	ParameterType	const gs_function_Sd_t *		5098958	0					
ANR	5099069	Identifier	pfn		5098958	1					
ANR	5099070	Parameter	const double * T0	1115:50:38272:38287	5098958	1	True				
ANR	5099071	ParameterType	const double *		5098958	0					
ANR	5099072	Identifier	T0		5098958	1					
ANR	5099073	Parameter	const double * T1	1115:68:38290:38305	5098958	2	True				
ANR	5099074	ParameterType	const double *		5098958	0					
ANR	5099075	Identifier	T1		5098958	1					
ANR	5099076	Parameter	int * I	1116:9:38317:38322	5098958	3	True				
ANR	5099077	ParameterType	int *		5098958	0					
ANR	5099078	Identifier	I		5098958	1					
ANR	5099079	Parameter	double * S0	1116:17:38325:38334	5098958	4	True				
ANR	5099080	ParameterType	double *		5098958	0					
ANR	5099081	Identifier	S0		5098958	1					
ANR	5099082	Parameter	double * S1	1116:29:38337:38346	5098958	5	True				
ANR	5099083	ParameterType	double *		5098958	0					
ANR	5099084	Identifier	S1		5098958	1					
ANR	5099085	Parameter	int k	1117:9:38358:38362	5098958	6	True				
ANR	5099086	ParameterType	int		5098958	0					
ANR	5099087	Identifier	k		5098958	1					
ANR	5099088	Parameter	uint * mask	1117:16:38365:38374	5098958	7	True				
ANR	5099089	ParameterType	uint *		5098958	0					
ANR	5099090	Identifier	mask		5098958	1					
ANR	5099091	CFGEntryNode	ENTRY		5098958		True				
ANR	5099092	CFGExitNode	EXIT		5098958		True				
ANR	5099093	Symbol	mm		5098958						
ANR	5099094	Symbol	* T1		5098958						
ANR	5099095	Symbol	* T0		5098958						
ANR	5099096	Symbol	* pfn		5098958						
ANR	5099097	Symbol	pfn -> params . m		5098958						
ANR	5099098	Symbol	code		5098958						
ANR	5099099	Symbol	* mask		5098958						
ANR	5099100	Symbol	I		5098958						
ANR	5099101	Symbol	i		5098958						
ANR	5099102	Symbol	k		5098958						
ANR	5099103	Symbol	m		5098958						
ANR	5099104	Symbol	* i		5098958						
ANR	5099105	Symbol	& m		5098958						
ANR	5099106	Symbol	is_lattice_monotonic_by_dimension		5098958						
ANR	5099107	Symbol	pfn		5098958						
ANR	5099108	Symbol	T0		5098958						
ANR	5099109	Symbol	T1		5098958						
ANR	5099110	Symbol	S0		5098958						
ANR	5099111	Symbol	pfn -> params		5098958						
ANR	5099112	Symbol	S1		5098958						
ANR	5099113	Symbol	mask		5098958						
ANR	5099114	DeclStmt									
ANR	5099115	Decl							int	int	code
ANR	5099116	Decl							int	int	i
ANR	5099117	DeclStmt									
ANR	5099118	Decl							double	double [ MAX_FAST_COMPS ]	VV
ANR	5099119	DeclStmt									
ANR	5099120	Decl							int	int	ii
ANR	5099121	Decl							int	int	code
ANR	5099122	Decl							int	int	cod1
ANR	5099123	DeclStmt									
ANR	5099124	Decl							int	int	i0
ANR	5099125	DeclStmt									
ANR	5099126	Decl							int	int	i1
ANR	5099127	Decl							int	int	code
ANR	5099128	DeclStmt									
ANR	5099129	Decl							double	double [ MAX_FAST_COMPS ]	V0
ANR	5099130	Decl							double	double [ MAX_FAST_COMPS ]	V1
ANR	5099131	DeclStmt									
ANR	5099132	Decl							int	int	i
ANR	5099133	Decl							int	int	code
ANR	5099134	Decl							int	int	ii
ANR	5099135	DeclStmt									
ANR	5099136	Decl							int	int [ 4 ]	I
ANR	5099137	DeclStmt									
ANR	5099138	Decl							double	double [ count_of ( I ) ]	T0
ANR	5099139	Decl							double	double [ count_of ( I ) ]	T1
ANR	5099140	DeclStmt									
ANR	5099141	Decl							double	double [ count_of ( I ) ]	S0
ANR	5099142	Decl							double	double [ count_of ( I ) ]	S1
ANR	5099143	DeclStmt									
ANR	5099144	Decl							uint	uint	m
ANR	5099145	Decl							uint	uint	mm
ANR	5099146	Decl							uint	uint	m1
ANR	5099147	DeclStmt									
ANR	5099148	Decl							DEBUG_Sd_1arg int	DEBUG_Sd_1arg int	code1
ANR	5099149	Decl							DEBUG_Sd_1arg int	DEBUG_Sd_1arg int	mask1
ANR	5099150	DeclStmt									
ANR	5099151	Decl							float	float	w0
ANR	5099152	Decl							float	float	w1
ANR	5099153	DeclStmt									
ANR	5099154	Decl							endif	endif *	mask
ANR	5099155	Function	fn_Sd_is_monotonic	1264:0:42960:43244							
ANR	5099156	FunctionDef	"fn_Sd_is_monotonic (const gs_function_t * pfn_common , const float * lower , const float * upper , uint * mask)"		5099155	0					
ANR	5099157	CompoundStatement		1267:0:43095:43244	5099155	0					
ANR	5099158	Statement	const	1268:4:43101:43105	5099155	0	True				
ANR	5099159	Statement	gs_function_Sd_t	1268:10:43107:43122	5099155	1	True				
ANR	5099160	Statement	*	1268:27:43124:43124	5099155	2	True				
ANR	5099161	Statement	const	1268:28:43125:43129	5099155	3	True				
ANR	5099162	ExpressionStatement	pfn = ( const gs_function_Sd_t * ) pfn_common	1268:34:43131:43181	5099155	4	True				
ANR	5099163	AssignmentExpression	pfn = ( const gs_function_Sd_t * ) pfn_common		5099155	0		=			
ANR	5099164	Identifier	pfn		5099155	0					
ANR	5099165	CastExpression	( const gs_function_Sd_t * ) pfn_common		5099155	1					
ANR	5099166	CastTarget	const gs_function_Sd_t *		5099155	0					
ANR	5099167	Identifier	pfn_common		5099155	1					
ANR	5099168	ReturnStatement	"return fn_Sd_is_monotonic_aux ( pfn , lower , upper , mask ) ;"	1271:4:43188:43242	5099155	5	True				
ANR	5099169	CallExpression	"fn_Sd_is_monotonic_aux ( pfn , lower , upper , mask )"		5099155	0					
ANR	5099170	Callee	fn_Sd_is_monotonic_aux		5099155	0					
ANR	5099171	Identifier	fn_Sd_is_monotonic_aux		5099155	0					
ANR	5099172	ArgumentList	pfn		5099155	1					
ANR	5099173	Argument	pfn		5099155	0					
ANR	5099174	Identifier	pfn		5099155	0					
ANR	5099175	Argument	lower		5099155	1					
ANR	5099176	Identifier	lower		5099155	0					
ANR	5099177	Argument	upper		5099155	2					
ANR	5099178	Identifier	upper		5099155	0					
ANR	5099179	Argument	mask		5099155	3					
ANR	5099180	Identifier	mask		5099155	0					
ANR	5099181	ReturnType	static int		5099155	1					
ANR	5099182	Identifier	fn_Sd_is_monotonic		5099155	2					
ANR	5099183	ParameterList	"const gs_function_t * pfn_common , const float * lower , const float * upper , uint * mask"		5099155	3					
ANR	5099184	Parameter	const gs_function_t * pfn_common	1265:19:42990:43021	5099155	0	True				
ANR	5099185	ParameterType	const gs_function_t *		5099155	0					
ANR	5099186	Identifier	pfn_common		5099155	1					
ANR	5099187	Parameter	const float * lower	1266:19:43043:43060	5099155	1	True				
ANR	5099188	ParameterType	const float *		5099155	0					
ANR	5099189	Identifier	lower		5099155	1					
ANR	5099190	Parameter	const float * upper	1266:39:43063:43080	5099155	2	True				
ANR	5099191	ParameterType	const float *		5099155	0					
ANR	5099192	Identifier	upper		5099155	1					
ANR	5099193	Parameter	uint * mask	1266:59:43083:43092	5099155	3	True				
ANR	5099194	ParameterType	uint *		5099155	0					
ANR	5099195	Identifier	mask		5099155	1					
ANR	5099196	CFGEntryNode	ENTRY		5099155		True				
ANR	5099197	CFGExitNode	EXIT		5099155		True				
ANR	5099198	Symbol	fn_Sd_is_monotonic_aux		5099155						
ANR	5099199	Symbol	pfn_common		5099155						
ANR	5099200	Symbol	lower		5099155						
ANR	5099201	Symbol	upper		5099155						
ANR	5099202	Symbol	pfn		5099155						
ANR	5099203	Symbol	mask		5099155						
ANR	5099204	Function	fn_Sd_get_info	1275:0:43290:43765							
ANR	5099205	FunctionDef	"fn_Sd_get_info (const gs_function_t * pfn_common , gs_function_info_t * pfi)"		5099204	0					
ANR	5099206	CompoundStatement		1277:0:43375:43765	5099204	0					
ANR	5099207	Statement	const	1278:4:43381:43385	5099204	0	True				
ANR	5099208	Statement	gs_function_Sd_t	1278:10:43387:43402	5099204	1	True				
ANR	5099209	Statement	*	1278:27:43404:43404	5099204	2	True				
ANR	5099210	Statement	const	1278:28:43405:43409	5099204	3	True				
ANR	5099211	ExpressionStatement	pfn = ( const gs_function_Sd_t * ) pfn_common	1278:34:43411:43461	5099204	4	True				
ANR	5099212	AssignmentExpression	pfn = ( const gs_function_Sd_t * ) pfn_common		5099204	0		=			
ANR	5099213	Identifier	pfn		5099204	0					
ANR	5099214	CastExpression	( const gs_function_Sd_t * ) pfn_common		5099204	1					
ANR	5099215	CastTarget	const gs_function_Sd_t *		5099204	0					
ANR	5099216	Identifier	pfn_common		5099204	1					
ANR	5099217	IdentifierDeclStatement	long size ;	1280:4:43467:43476	5099204	5	True				
ANR	5099218	IdentifierDecl	size		5099204	0					
ANR	5099219	IdentifierDeclType	long		5099204	0					
ANR	5099220	Identifier	size		5099204	1					
ANR	5099221	IdentifierDeclStatement	int i ;	1281:4:43482:43487	5099204	6	True				
ANR	5099222	IdentifierDecl	i		5099204	0					
ANR	5099223	IdentifierDeclType	int		5099204	0					
ANR	5099224	Identifier	i		5099204	1					
ANR	5099225	ExpressionStatement	"gs_function_get_info_default ( pfn_common , pfi )"	1283:4:43494:43539	5099204	7	True				
ANR	5099226	CallExpression	"gs_function_get_info_default ( pfn_common , pfi )"		5099204	0					
ANR	5099227	Callee	gs_function_get_info_default		5099204	0					
ANR	5099228	Identifier	gs_function_get_info_default		5099204	0					
ANR	5099229	ArgumentList	pfn_common		5099204	1					
ANR	5099230	Argument	pfn_common		5099204	0					
ANR	5099231	Identifier	pfn_common		5099204	0					
ANR	5099232	Argument	pfi		5099204	1					
ANR	5099233	Identifier	pfi		5099204	0					
ANR	5099234	ExpressionStatement	pfi -> DataSource = & pfn -> params . DataSource	1284:4:43545:43586	5099204	8	True				
ANR	5099235	AssignmentExpression	pfi -> DataSource = & pfn -> params . DataSource		5099204	0		=			
ANR	5099236	PtrMemberAccess	pfi -> DataSource		5099204	0					
ANR	5099237	Identifier	pfi		5099204	0					
ANR	5099238	Identifier	DataSource		5099204	1					
ANR	5099239	UnaryOperationExpression	& pfn -> params . DataSource		5099204	1					
ANR	5099240	UnaryOperator	&		5099204	0					
ANR	5099241	MemberAccess	pfn -> params . DataSource		5099204	1					
ANR	5099242	PtrMemberAccess	pfn -> params		5099204	0					
ANR	5099243	Identifier	pfn		5099204	0					
ANR	5099244	Identifier	params		5099204	1					
ANR	5099245	Identifier	DataSource		5099204	1					
ANR	5099246	ForStatement	"for ( i = 0 , size = 1 ; i < pfn -> params . m ; ++ i )"		5099204	9					
ANR	5099247	ForInit	"i = 0 , size = 1 ;"	1285:9:43597:43612	5099204	0	True				
ANR	5099248	Expression	"i = 0 , size = 1"		5099204	0					
ANR	5099249	AssignmentExpression	i = 0		5099204	0		=			
ANR	5099250	Identifier	i		5099204	0					
ANR	5099251	PrimaryExpression	0		5099204	1					
ANR	5099252	AssignmentExpression	size = 1		5099204	1		=			
ANR	5099253	Identifier	size		5099204	0					
ANR	5099254	PrimaryExpression	1		5099204	1					
ANR	5099255	Condition	i < pfn -> params . m	1285:26:43614:43630	5099204	1	True				
ANR	5099256	RelationalExpression	i < pfn -> params . m		5099204	0		<			
ANR	5099257	Identifier	i		5099204	0					
ANR	5099258	MemberAccess	pfn -> params . m		5099204	1					
ANR	5099259	PtrMemberAccess	pfn -> params		5099204	0					
ANR	5099260	Identifier	pfn		5099204	0					
ANR	5099261	Identifier	params		5099204	1					
ANR	5099262	Identifier	m		5099204	1					
ANR	5099263	UnaryExpression	++ i	1285:45:43633:43635	5099204	2	True				
ANR	5099264	IncDec	++		5099204	0					
ANR	5099265	Identifier	i		5099204	1					
ANR	5099266	ExpressionStatement	size *= pfn -> params . Size [ i ]	1286:8:43646:43673	5099204	3	True				
ANR	5099267	AssignmentExpression	size *= pfn -> params . Size [ i ]		5099204	0		*=			
ANR	5099268	Identifier	size		5099204	0					
ANR	5099269	ArrayIndexing	pfn -> params . Size [ i ]		5099204	1					
ANR	5099270	MemberAccess	pfn -> params . Size		5099204	0					
ANR	5099271	PtrMemberAccess	pfn -> params		5099204	0					
ANR	5099272	Identifier	pfn		5099204	0					
ANR	5099273	Identifier	params		5099204	1					
ANR	5099274	Identifier	Size		5099204	1					
ANR	5099275	Identifier	i		5099204	1					
ANR	5099276	ExpressionStatement	pfi -> data_size = ( size * pfn -> params . n * pfn -> params . BitsPerSample + 7 ) >> 3	1287:4:43679:43763	5099204	10	True				
ANR	5099277	AssignmentExpression	pfi -> data_size = ( size * pfn -> params . n * pfn -> params . BitsPerSample + 7 ) >> 3		5099204	0		=			
ANR	5099278	PtrMemberAccess	pfi -> data_size		5099204	0					
ANR	5099279	Identifier	pfi		5099204	0					
ANR	5099280	Identifier	data_size		5099204	1					
ANR	5099281	ShiftExpression	( size * pfn -> params . n * pfn -> params . BitsPerSample + 7 ) >> 3		5099204	1		>>			
ANR	5099282	AdditiveExpression	size * pfn -> params . n * pfn -> params . BitsPerSample + 7		5099204	0		+			
ANR	5099283	MultiplicativeExpression	size * pfn -> params . n * pfn -> params . BitsPerSample		5099204	0		*			
ANR	5099284	Identifier	size		5099204	0					
ANR	5099285	MultiplicativeExpression	pfn -> params . n * pfn -> params . BitsPerSample		5099204	1		*			
ANR	5099286	MemberAccess	pfn -> params . n		5099204	0					
ANR	5099287	PtrMemberAccess	pfn -> params		5099204	0					
ANR	5099288	Identifier	pfn		5099204	0					
ANR	5099289	Identifier	params		5099204	1					
ANR	5099290	Identifier	n		5099204	1					
ANR	5099291	MemberAccess	pfn -> params . BitsPerSample		5099204	1					
ANR	5099292	PtrMemberAccess	pfn -> params		5099204	0					
ANR	5099293	Identifier	pfn		5099204	0					
ANR	5099294	Identifier	params		5099204	1					
ANR	5099295	Identifier	BitsPerSample		5099204	1					
ANR	5099296	PrimaryExpression	7		5099204	1					
ANR	5099297	PrimaryExpression	3		5099204	1					
ANR	5099298	ReturnType	static void		5099204	1					
ANR	5099299	Identifier	fn_Sd_get_info		5099204	2					
ANR	5099300	ParameterList	"const gs_function_t * pfn_common , gs_function_info_t * pfi"		5099204	3					
ANR	5099301	Parameter	const gs_function_t * pfn_common	1276:15:43317:43347	5099204	0	True				
ANR	5099302	ParameterType	const gs_function_t *		5099204	0					
ANR	5099303	Identifier	pfn_common		5099204	1					
ANR	5099304	Parameter	gs_function_info_t * pfi	1276:48:43350:43372	5099204	1	True				
ANR	5099305	ParameterType	gs_function_info_t *		5099204	0					
ANR	5099306	Identifier	pfi		5099204	1					
ANR	5099307	CFGEntryNode	ENTRY		5099204		True				
ANR	5099308	CFGExitNode	EXIT		5099204		True				
ANR	5099309	Symbol	* pfn		5099204						
ANR	5099310	Symbol	pfn -> params . m		5099204						
ANR	5099311	Symbol	pfn -> params . Size		5099204						
ANR	5099312	Symbol	pfn -> params . n		5099204						
ANR	5099313	Symbol	pfn_common		5099204						
ANR	5099314	Symbol	& pfn -> params		5099204						
ANR	5099315	Symbol	* pfn -> params . Size		5099204						
ANR	5099316	Symbol	i		5099204						
ANR	5099317	Symbol	* * pfn		5099204						
ANR	5099318	Symbol	pfi -> data_size		5099204						
ANR	5099319	Symbol	pfi -> DataSource		5099204						
ANR	5099320	Symbol	pfi		5099204						
ANR	5099321	Symbol	* i		5099204						
ANR	5099322	Symbol	size		5099204						
ANR	5099323	Symbol	pfn		5099204						
ANR	5099324	Symbol	pfn -> params		5099204						
ANR	5099325	Symbol	& pfn -> params . DataSource		5099204						
ANR	5099326	Symbol	* pfi		5099204						
ANR	5099327	Symbol	* pfn -> params		5099204						
ANR	5099328	Symbol	pfn -> params . BitsPerSample		5099204						
ANR	5099329	Function	fn_Sd_get_params	1292:0:43829:45117							
ANR	5099330	FunctionDef	"fn_Sd_get_params (const gs_function_t * pfn_common , gs_param_list * plist)"		5099329	0					
ANR	5099331	CompoundStatement		1294:0:43912:45117	5099329	0					
ANR	5099332	Statement	const	1295:4:43918:43922	5099329	0	True				
ANR	5099333	Statement	gs_function_Sd_t	1295:10:43924:43939	5099329	1	True				
ANR	5099334	Statement	*	1295:27:43941:43941	5099329	2	True				
ANR	5099335	Statement	const	1295:28:43942:43946	5099329	3	True				
ANR	5099336	ExpressionStatement	pfn = ( const gs_function_Sd_t * ) pfn_common	1295:34:43948:43998	5099329	4	True				
ANR	5099337	AssignmentExpression	pfn = ( const gs_function_Sd_t * ) pfn_common		5099329	0		=			
ANR	5099338	Identifier	pfn		5099329	0					
ANR	5099339	CastExpression	( const gs_function_Sd_t * ) pfn_common		5099329	1					
ANR	5099340	CastTarget	const gs_function_Sd_t *		5099329	0					
ANR	5099341	Identifier	pfn_common		5099329	1					
ANR	5099342	IdentifierDeclStatement	"int ecode = fn_common_get_params ( pfn_common , plist ) ;"	1297:4:44004:44055	5099329	5	True				
ANR	5099343	IdentifierDecl	"ecode = fn_common_get_params ( pfn_common , plist )"		5099329	0					
ANR	5099344	IdentifierDeclType	int		5099329	0					
ANR	5099345	Identifier	ecode		5099329	1					
ANR	5099346	AssignmentExpression	"ecode = fn_common_get_params ( pfn_common , plist )"		5099329	2		=			
ANR	5099347	Identifier	ecode		5099329	0					
ANR	5099348	CallExpression	"fn_common_get_params ( pfn_common , plist )"		5099329	1					
ANR	5099349	Callee	fn_common_get_params		5099329	0					
ANR	5099350	Identifier	fn_common_get_params		5099329	0					
ANR	5099351	ArgumentList	pfn_common		5099329	1					
ANR	5099352	Argument	pfn_common		5099329	0					
ANR	5099353	Identifier	pfn_common		5099329	0					
ANR	5099354	Argument	plist		5099329	1					
ANR	5099355	Identifier	plist		5099329	0					
ANR	5099356	IdentifierDeclStatement	int code ;	1298:4:44061:44069	5099329	6	True				
ANR	5099357	IdentifierDecl	code		5099329	0					
ANR	5099358	IdentifierDeclType	int		5099329	0					
ANR	5099359	Identifier	code		5099329	1					
ANR	5099360	IfStatement	if ( pfn -> params . Order != 1 )		5099329	7					
ANR	5099361	Condition	pfn -> params . Order != 1	1300:8:44080:44101	5099329	0	True				
ANR	5099362	EqualityExpression	pfn -> params . Order != 1		5099329	0		!=			
ANR	5099363	MemberAccess	pfn -> params . Order		5099329	0					
ANR	5099364	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099365	Identifier	pfn		5099329	0					
ANR	5099366	Identifier	params		5099329	1					
ANR	5099367	Identifier	Order		5099329	1					
ANR	5099368	PrimaryExpression	1		5099329	1					
ANR	5099369	CompoundStatement		7:32:191:191	5099329	1					
ANR	5099370	IfStatement	"if ( ( code = param_write_int ( plist , ""Order"" , & pfn -> params . Order ) ) < 0 )"		5099329	0					
ANR	5099371	Condition	"( code = param_write_int ( plist , ""Order"" , & pfn -> params . Order ) ) < 0"	1301:12:44118:44181	5099329	0	True				
ANR	5099372	RelationalExpression	"( code = param_write_int ( plist , ""Order"" , & pfn -> params . Order ) ) < 0"		5099329	0		<			
ANR	5099373	AssignmentExpression	"code = param_write_int ( plist , ""Order"" , & pfn -> params . Order )"		5099329	0		=			
ANR	5099374	Identifier	code		5099329	0					
ANR	5099375	CallExpression	"param_write_int ( plist , ""Order"" , & pfn -> params . Order )"		5099329	1					
ANR	5099376	Callee	param_write_int		5099329	0					
ANR	5099377	Identifier	param_write_int		5099329	0					
ANR	5099378	ArgumentList	plist		5099329	1					
ANR	5099379	Argument	plist		5099329	0					
ANR	5099380	Identifier	plist		5099329	0					
ANR	5099381	Argument	"""Order"""		5099329	1					
ANR	5099382	PrimaryExpression	"""Order"""		5099329	0					
ANR	5099383	Argument	& pfn -> params . Order		5099329	2					
ANR	5099384	UnaryOperationExpression	& pfn -> params . Order		5099329	0					
ANR	5099385	UnaryOperator	&		5099329	0					
ANR	5099386	MemberAccess	pfn -> params . Order		5099329	1					
ANR	5099387	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099388	Identifier	pfn		5099329	0					
ANR	5099389	Identifier	params		5099329	1					
ANR	5099390	Identifier	Order		5099329	1					
ANR	5099391	PrimaryExpression	0		5099329	1					
ANR	5099392	ExpressionStatement	ecode = code	1302:12:44196:44208	5099329	1	True				
ANR	5099393	AssignmentExpression	ecode = code		5099329	0		=			
ANR	5099394	Identifier	ecode		5099329	0					
ANR	5099395	Identifier	code		5099329	1					
ANR	5099396	IfStatement	"if ( ( code = param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample ) ) < 0 )"		5099329	8					
ANR	5099397	Condition	"( code = param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample ) ) < 0"	1304:8:44224:44335	5099329	0	True				
ANR	5099398	RelationalExpression	"( code = param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample ) ) < 0"		5099329	0		<			
ANR	5099399	AssignmentExpression	"code = param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample )"		5099329	0		=			
ANR	5099400	Identifier	code		5099329	0					
ANR	5099401	CallExpression	"param_write_int ( plist , ""BitsPerSample"" , & pfn -> params . BitsPerSample )"		5099329	1					
ANR	5099402	Callee	param_write_int		5099329	0					
ANR	5099403	Identifier	param_write_int		5099329	0					
ANR	5099404	ArgumentList	plist		5099329	1					
ANR	5099405	Argument	plist		5099329	0					
ANR	5099406	Identifier	plist		5099329	0					
ANR	5099407	Argument	"""BitsPerSample"""		5099329	1					
ANR	5099408	PrimaryExpression	"""BitsPerSample"""		5099329	0					
ANR	5099409	Argument	& pfn -> params . BitsPerSample		5099329	2					
ANR	5099410	UnaryOperationExpression	& pfn -> params . BitsPerSample		5099329	0					
ANR	5099411	UnaryOperator	&		5099329	0					
ANR	5099412	MemberAccess	pfn -> params . BitsPerSample		5099329	1					
ANR	5099413	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099414	Identifier	pfn		5099329	0					
ANR	5099415	Identifier	params		5099329	1					
ANR	5099416	Identifier	BitsPerSample		5099329	1					
ANR	5099417	PrimaryExpression	0		5099329	1					
ANR	5099418	ExpressionStatement	ecode = code	1306:8:44346:44358	5099329	1	True				
ANR	5099419	AssignmentExpression	ecode = code		5099329	0		=			
ANR	5099420	Identifier	ecode		5099329	0					
ANR	5099421	Identifier	code		5099329	1					
ANR	5099422	IfStatement	if ( pfn -> params . Encode )		5099329	9					
ANR	5099423	Condition	pfn -> params . Encode	1307:8:44368:44385	5099329	0	True				
ANR	5099424	MemberAccess	pfn -> params . Encode		5099329	0					
ANR	5099425	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099426	Identifier	pfn		5099329	0					
ANR	5099427	Identifier	params		5099329	1					
ANR	5099428	Identifier	Encode		5099329	1					
ANR	5099429	CompoundStatement		14:28:475:475	5099329	1					
ANR	5099430	IfStatement	"if ( ( code = param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false ) ) < 0 )"		5099329	0					
ANR	5099431	Condition	"( code = param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false ) ) < 0"	1308:12:44402:44591	5099329	0	True				
ANR	5099432	RelationalExpression	"( code = param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false ) ) < 0"		5099329	0		<			
ANR	5099433	AssignmentExpression	"code = param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false )"		5099329	0		=			
ANR	5099434	Identifier	code		5099329	0					
ANR	5099435	CallExpression	"param_write_float_values ( plist , ""Encode"" , pfn -> params . Encode , 2 * pfn -> params . m , false )"		5099329	1					
ANR	5099436	Callee	param_write_float_values		5099329	0					
ANR	5099437	Identifier	param_write_float_values		5099329	0					
ANR	5099438	ArgumentList	plist		5099329	1					
ANR	5099439	Argument	plist		5099329	0					
ANR	5099440	Identifier	plist		5099329	0					
ANR	5099441	Argument	"""Encode"""		5099329	1					
ANR	5099442	PrimaryExpression	"""Encode"""		5099329	0					
ANR	5099443	Argument	pfn -> params . Encode		5099329	2					
ANR	5099444	MemberAccess	pfn -> params . Encode		5099329	0					
ANR	5099445	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099446	Identifier	pfn		5099329	0					
ANR	5099447	Identifier	params		5099329	1					
ANR	5099448	Identifier	Encode		5099329	1					
ANR	5099449	Argument	2 * pfn -> params . m		5099329	3					
ANR	5099450	MultiplicativeExpression	2 * pfn -> params . m		5099329	0		*			
ANR	5099451	PrimaryExpression	2		5099329	0					
ANR	5099452	MemberAccess	pfn -> params . m		5099329	1					
ANR	5099453	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099454	Identifier	pfn		5099329	0					
ANR	5099455	Identifier	params		5099329	1					
ANR	5099456	Identifier	m		5099329	1					
ANR	5099457	Argument	false		5099329	4					
ANR	5099458	Identifier	false		5099329	0					
ANR	5099459	PrimaryExpression	0		5099329	1					
ANR	5099460	ExpressionStatement	ecode = code	1311:12:44606:44618	5099329	1	True				
ANR	5099461	AssignmentExpression	ecode = code		5099329	0		=			
ANR	5099462	Identifier	ecode		5099329	0					
ANR	5099463	Identifier	code		5099329	1					
ANR	5099464	IfStatement	if ( pfn -> params . Decode )		5099329	10					
ANR	5099465	Condition	pfn -> params . Decode	1313:8:44634:44651	5099329	0	True				
ANR	5099466	MemberAccess	pfn -> params . Decode		5099329	0					
ANR	5099467	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099468	Identifier	pfn		5099329	0					
ANR	5099469	Identifier	params		5099329	1					
ANR	5099470	Identifier	Decode		5099329	1					
ANR	5099471	CompoundStatement		20:28:741:741	5099329	1					
ANR	5099472	IfStatement	"if ( ( code = param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false ) ) < 0 )"		5099329	0					
ANR	5099473	Condition	"( code = param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false ) ) < 0"	1314:12:44668:44857	5099329	0	True				
ANR	5099474	RelationalExpression	"( code = param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false ) ) < 0"		5099329	0		<			
ANR	5099475	AssignmentExpression	"code = param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false )"		5099329	0		=			
ANR	5099476	Identifier	code		5099329	0					
ANR	5099477	CallExpression	"param_write_float_values ( plist , ""Decode"" , pfn -> params . Decode , 2 * pfn -> params . n , false )"		5099329	1					
ANR	5099478	Callee	param_write_float_values		5099329	0					
ANR	5099479	Identifier	param_write_float_values		5099329	0					
ANR	5099480	ArgumentList	plist		5099329	1					
ANR	5099481	Argument	plist		5099329	0					
ANR	5099482	Identifier	plist		5099329	0					
ANR	5099483	Argument	"""Decode"""		5099329	1					
ANR	5099484	PrimaryExpression	"""Decode"""		5099329	0					
ANR	5099485	Argument	pfn -> params . Decode		5099329	2					
ANR	5099486	MemberAccess	pfn -> params . Decode		5099329	0					
ANR	5099487	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099488	Identifier	pfn		5099329	0					
ANR	5099489	Identifier	params		5099329	1					
ANR	5099490	Identifier	Decode		5099329	1					
ANR	5099491	Argument	2 * pfn -> params . n		5099329	3					
ANR	5099492	MultiplicativeExpression	2 * pfn -> params . n		5099329	0		*			
ANR	5099493	PrimaryExpression	2		5099329	0					
ANR	5099494	MemberAccess	pfn -> params . n		5099329	1					
ANR	5099495	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099496	Identifier	pfn		5099329	0					
ANR	5099497	Identifier	params		5099329	1					
ANR	5099498	Identifier	n		5099329	1					
ANR	5099499	Argument	false		5099329	4					
ANR	5099500	Identifier	false		5099329	0					
ANR	5099501	PrimaryExpression	0		5099329	1					
ANR	5099502	ExpressionStatement	ecode = code	1317:12:44872:44884	5099329	1	True				
ANR	5099503	AssignmentExpression	ecode = code		5099329	0		=			
ANR	5099504	Identifier	ecode		5099329	0					
ANR	5099505	Identifier	code		5099329	1					
ANR	5099506	IfStatement	if ( pfn -> params . Size )		5099329	11					
ANR	5099507	Condition	pfn -> params . Size	1319:8:44900:44915	5099329	0	True				
ANR	5099508	MemberAccess	pfn -> params . Size		5099329	0					
ANR	5099509	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099510	Identifier	pfn		5099329	0					
ANR	5099511	Identifier	params		5099329	1					
ANR	5099512	Identifier	Size		5099329	1					
ANR	5099513	CompoundStatement		26:26:1005:1005	5099329	1					
ANR	5099514	IfStatement	"if ( ( code = param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false ) ) < 0 )"		5099329	0					
ANR	5099515	Condition	"( code = param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false ) ) < 0"	1320:12:44932:45064	5099329	0	True				
ANR	5099516	RelationalExpression	"( code = param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false ) ) < 0"		5099329	0		<			
ANR	5099517	AssignmentExpression	"code = param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false )"		5099329	0		=			
ANR	5099518	Identifier	code		5099329	0					
ANR	5099519	CallExpression	"param_write_int_values ( plist , ""Size"" , pfn -> params . Size , pfn -> params . m , false )"		5099329	1					
ANR	5099520	Callee	param_write_int_values		5099329	0					
ANR	5099521	Identifier	param_write_int_values		5099329	0					
ANR	5099522	ArgumentList	plist		5099329	1					
ANR	5099523	Argument	plist		5099329	0					
ANR	5099524	Identifier	plist		5099329	0					
ANR	5099525	Argument	"""Size"""		5099329	1					
ANR	5099526	PrimaryExpression	"""Size"""		5099329	0					
ANR	5099527	Argument	pfn -> params . Size		5099329	2					
ANR	5099528	MemberAccess	pfn -> params . Size		5099329	0					
ANR	5099529	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099530	Identifier	pfn		5099329	0					
ANR	5099531	Identifier	params		5099329	1					
ANR	5099532	Identifier	Size		5099329	1					
ANR	5099533	Argument	pfn -> params . m		5099329	3					
ANR	5099534	MemberAccess	pfn -> params . m		5099329	0					
ANR	5099535	PtrMemberAccess	pfn -> params		5099329	0					
ANR	5099536	Identifier	pfn		5099329	0					
ANR	5099537	Identifier	params		5099329	1					
ANR	5099538	Identifier	m		5099329	1					
ANR	5099539	Argument	false		5099329	4					
ANR	5099540	Identifier	false		5099329	0					
ANR	5099541	PrimaryExpression	0		5099329	1					
ANR	5099542	ExpressionStatement	ecode = code	1322:12:45079:45091	5099329	1	True				
ANR	5099543	AssignmentExpression	ecode = code		5099329	0		=			
ANR	5099544	Identifier	ecode		5099329	0					
ANR	5099545	Identifier	code		5099329	1					
ANR	5099546	ReturnStatement	return ecode ;	1324:4:45103:45115	5099329	12	True				
ANR	5099547	Identifier	ecode		5099329	0					
ANR	5099548	ReturnType	static int		5099329	1					
ANR	5099549	Identifier	fn_Sd_get_params		5099329	2					
ANR	5099550	ParameterList	"const gs_function_t * pfn_common , gs_param_list * plist"		5099329	3					
ANR	5099551	Parameter	const gs_function_t * pfn_common	1293:17:43857:43887	5099329	0	True				
ANR	5099552	ParameterType	const gs_function_t *		5099329	0					
ANR	5099553	Identifier	pfn_common		5099329	1					
ANR	5099554	Parameter	gs_param_list * plist	1293:50:43890:43909	5099329	1	True				
ANR	5099555	ParameterType	gs_param_list *		5099329	0					
ANR	5099556	Identifier	plist		5099329	1					
ANR	5099557	CFGEntryNode	ENTRY		5099329		True				
ANR	5099558	CFGExitNode	EXIT		5099329		True				
ANR	5099559	Symbol	* pfn		5099329						
ANR	5099560	Symbol	pfn -> params . m		5099329						
ANR	5099561	Symbol	code		5099329						
ANR	5099562	Symbol	& pfn -> params . Order		5099329						
ANR	5099563	Symbol	pfn -> params . n		5099329						
ANR	5099564	Symbol	pfn -> params . Size		5099329						
ANR	5099565	Symbol	pfn_common		5099329						
ANR	5099566	Symbol	& pfn -> params . BitsPerSample		5099329						
ANR	5099567	Symbol	& pfn -> params		5099329						
ANR	5099568	Symbol	false		5099329						
ANR	5099569	Symbol	param_write_float_values		5099329						
ANR	5099570	Symbol	ecode		5099329						
ANR	5099571	Symbol	pfn -> params . Order		5099329						
ANR	5099572	Symbol	plist		5099329						
ANR	5099573	Symbol	param_write_int_values		5099329						
ANR	5099574	Symbol	pfn		5099329						
ANR	5099575	Symbol	pfn -> params . Encode		5099329						
ANR	5099576	Symbol	pfn -> params . Decode		5099329						
ANR	5099577	Symbol	pfn -> params		5099329						
ANR	5099578	Symbol	fn_common_get_params		5099329						
ANR	5099579	Symbol	param_write_int		5099329						
ANR	5099580	Function	fn_Sd_make_scaled	1328:0:45168:46408							
ANR	5099581	FunctionDef	"fn_Sd_make_scaled (const gs_function_Sd_t * pfn , gs_function_Sd_t * * ppsfn , const gs_range_t * pranges , gs_memory_t * mem)"		5099580	0					
ANR	5099582	CompoundStatement		1331:0:45315:46408	5099580	0					
ANR	5099583	IdentifierDeclStatement	"gs_function_Sd_t * psfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""fn_Sd_make_scaled"" ) ;"	1332:4:45321:45454	5099580	0	True				
ANR	5099584	IdentifierDecl	"* psfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""fn_Sd_make_scaled"" )"		5099580	0					
ANR	5099585	IdentifierDeclType	gs_function_Sd_t *		5099580	0					
ANR	5099586	Identifier	psfn		5099580	1					
ANR	5099587	AssignmentExpression	"* psfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""fn_Sd_make_scaled"" )"		5099580	2		=			
ANR	5099588	Identifier	psfn		5099580	0					
ANR	5099589	CallExpression	"gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""fn_Sd_make_scaled"" )"		5099580	1					
ANR	5099590	Callee	gs_alloc_struct		5099580	0					
ANR	5099591	Identifier	gs_alloc_struct		5099580	0					
ANR	5099592	ArgumentList	mem		5099580	1					
ANR	5099593	Argument	mem		5099580	0					
ANR	5099594	Identifier	mem		5099580	0					
ANR	5099595	Argument	gs_function_Sd_t		5099580	1					
ANR	5099596	Identifier	gs_function_Sd_t		5099580	0					
ANR	5099597	Argument	& st_function_Sd		5099580	2					
ANR	5099598	UnaryOperationExpression	& st_function_Sd		5099580	0					
ANR	5099599	UnaryOperator	&		5099580	0					
ANR	5099600	Identifier	st_function_Sd		5099580	1					
ANR	5099601	Argument	"""fn_Sd_make_scaled"""		5099580	3					
ANR	5099602	PrimaryExpression	"""fn_Sd_make_scaled"""		5099580	0					
ANR	5099603	IdentifierDeclStatement	int code ;	1335:4:45460:45468	5099580	1	True				
ANR	5099604	IdentifierDecl	code		5099580	0					
ANR	5099605	IdentifierDeclType	int		5099580	0					
ANR	5099606	Identifier	code		5099580	1					
ANR	5099607	IfStatement	if ( psfn == 0 )		5099580	2					
ANR	5099608	Condition	psfn == 0	1337:8:45479:45487	5099580	0	True				
ANR	5099609	EqualityExpression	psfn == 0		5099580	0		==			
ANR	5099610	Identifier	psfn		5099580	0					
ANR	5099611	PrimaryExpression	0		5099580	1					
ANR	5099612	ExpressionStatement	return_error ( gs_error_VMerror )	1338:8:45498:45528	5099580	1	True				
ANR	5099613	CallExpression	return_error ( gs_error_VMerror )		5099580	0					
ANR	5099614	Callee	return_error		5099580	0					
ANR	5099615	Identifier	return_error		5099580	0					
ANR	5099616	ArgumentList	gs_error_VMerror		5099580	1					
ANR	5099617	Argument	gs_error_VMerror		5099580	0					
ANR	5099618	Identifier	gs_error_VMerror		5099580	0					
ANR	5099619	ExpressionStatement	psfn -> params = pfn -> params	1339:4:45534:45560	5099580	3	True				
ANR	5099620	AssignmentExpression	psfn -> params = pfn -> params		5099580	0		=			
ANR	5099621	PtrMemberAccess	psfn -> params		5099580	0					
ANR	5099622	Identifier	psfn		5099580	0					
ANR	5099623	Identifier	params		5099580	1					
ANR	5099624	PtrMemberAccess	pfn -> params		5099580	1					
ANR	5099625	Identifier	pfn		5099580	0					
ANR	5099626	Identifier	params		5099580	1					
ANR	5099627	ExpressionStatement	psfn -> params . Encode = 0	1340:4:45566:45589	5099580	4	True				
ANR	5099628	AssignmentExpression	psfn -> params . Encode = 0		5099580	0		=			
ANR	5099629	MemberAccess	psfn -> params . Encode		5099580	0					
ANR	5099630	PtrMemberAccess	psfn -> params		5099580	0					
ANR	5099631	Identifier	psfn		5099580	0					
ANR	5099632	Identifier	params		5099580	1					
ANR	5099633	Identifier	Encode		5099580	1					
ANR	5099634	PrimaryExpression	0		5099580	1					
ANR	5099635	ExpressionStatement	psfn -> params . Decode = 0	1341:4:45621:45644	5099580	5	True				
ANR	5099636	AssignmentExpression	psfn -> params . Decode = 0		5099580	0		=			
ANR	5099637	MemberAccess	psfn -> params . Decode		5099580	0					
ANR	5099638	PtrMemberAccess	psfn -> params		5099580	0					
ANR	5099639	Identifier	psfn		5099580	0					
ANR	5099640	Identifier	params		5099580	1					
ANR	5099641	Identifier	Decode		5099580	1					
ANR	5099642	PrimaryExpression	0		5099580	1					
ANR	5099643	ExpressionStatement	"psfn -> params . Size = fn_copy_values ( pfn -> params . Size , pfn -> params . m , sizeof ( int ) , mem )"	1342:4:45650:45743	5099580	6	True				
ANR	5099644	AssignmentExpression	"psfn -> params . Size = fn_copy_values ( pfn -> params . Size , pfn -> params . m , sizeof ( int ) , mem )"		5099580	0		=			
ANR	5099645	MemberAccess	psfn -> params . Size		5099580	0					
ANR	5099646	PtrMemberAccess	psfn -> params		5099580	0					
ANR	5099647	Identifier	psfn		5099580	0					
ANR	5099648	Identifier	params		5099580	1					
ANR	5099649	Identifier	Size		5099580	1					
ANR	5099650	CallExpression	"fn_copy_values ( pfn -> params . Size , pfn -> params . m , sizeof ( int ) , mem )"		5099580	1					
ANR	5099651	Callee	fn_copy_values		5099580	0					
ANR	5099652	Identifier	fn_copy_values		5099580	0					
ANR	5099653	ArgumentList	pfn -> params . Size		5099580	1					
ANR	5099654	Argument	pfn -> params . Size		5099580	0					
ANR	5099655	MemberAccess	pfn -> params . Size		5099580	0					
ANR	5099656	PtrMemberAccess	pfn -> params		5099580	0					
ANR	5099657	Identifier	pfn		5099580	0					
ANR	5099658	Identifier	params		5099580	1					
ANR	5099659	Identifier	Size		5099580	1					
ANR	5099660	Argument	pfn -> params . m		5099580	1					
ANR	5099661	MemberAccess	pfn -> params . m		5099580	0					
ANR	5099662	PtrMemberAccess	pfn -> params		5099580	0					
ANR	5099663	Identifier	pfn		5099580	0					
ANR	5099664	Identifier	params		5099580	1					
ANR	5099665	Identifier	m		5099580	1					
ANR	5099666	Argument	sizeof ( int )		5099580	2					
ANR	5099667	SizeofExpression	sizeof ( int )		5099580	0					
ANR	5099668	Sizeof	sizeof		5099580	0					
ANR	5099669	SizeofOperand	int		5099580	1					
ANR	5099670	Argument	mem		5099580	3					
ANR	5099671	Identifier	mem		5099580	0					
ANR	5099672	IfStatement	"if ( ( code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 ) ) < 0 || ( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0 )"		5099580	7					
ANR	5099673	Condition	"( code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 ) ) < 0 || ( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"	1344:8:45753:46292	5099580	0	True				
ANR	5099674	OrExpression	"( code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 ) ) < 0 || ( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"		5099580	0		||			
ANR	5099675	RelationalExpression	( code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 ) ) < 0		5099580	0		<			
ANR	5099676	AssignmentExpression	code = ( psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0 )		5099580	0		=			
ANR	5099677	Identifier	code		5099580	0					
ANR	5099678	ConditionalExpression	psfn -> params . Size == 0 ? gs_note_error ( gs_error_VMerror ) : 0		5099580	1					
ANR	5099679	Condition	psfn -> params . Size == 0		5099580	0					
ANR	5099680	EqualityExpression	psfn -> params . Size == 0		5099580	0		==			
ANR	5099681	MemberAccess	psfn -> params . Size		5099580	0					
ANR	5099682	PtrMemberAccess	psfn -> params		5099580	0					
ANR	5099683	Identifier	psfn		5099580	0					
ANR	5099684	Identifier	params		5099580	1					
ANR	5099685	Identifier	Size		5099580	1					
ANR	5099686	PrimaryExpression	0		5099580	1					
ANR	5099687	CallExpression	gs_note_error ( gs_error_VMerror )		5099580	1					
ANR	5099688	Callee	gs_note_error		5099580	0					
ANR	5099689	Identifier	gs_note_error		5099580	0					
ANR	5099690	ArgumentList	gs_error_VMerror		5099580	1					
ANR	5099691	Argument	gs_error_VMerror		5099580	0					
ANR	5099692	Identifier	gs_error_VMerror		5099580	0					
ANR	5099693	PrimaryExpression	0		5099580	2					
ANR	5099694	PrimaryExpression	0		5099580	1					
ANR	5099695	OrExpression	"( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"		5099580	1		||			
ANR	5099696	RelationalExpression	"( code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem ) ) < 0"		5099580	0		<			
ANR	5099697	AssignmentExpression	"code = fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem )"		5099580	0		=			
ANR	5099698	Identifier	code		5099580	0					
ANR	5099699	CallExpression	"fn_common_scale ( ( gs_function_t * ) psfn , ( const gs_function_t * ) pfn , pranges , mem )"		5099580	1					
ANR	5099700	Callee	fn_common_scale		5099580	0					
ANR	5099701	Identifier	fn_common_scale		5099580	0					
ANR	5099702	ArgumentList	( gs_function_t * ) psfn		5099580	1					
ANR	5099703	Argument	( gs_function_t * ) psfn		5099580	0					
ANR	5099704	CastExpression	( gs_function_t * ) psfn		5099580	0					
ANR	5099705	CastTarget	gs_function_t *		5099580	0					
ANR	5099706	Identifier	psfn		5099580	1					
ANR	5099707	Argument	( const gs_function_t * ) pfn		5099580	1					
ANR	5099708	CastExpression	( const gs_function_t * ) pfn		5099580	0					
ANR	5099709	CastTarget	const gs_function_t *		5099580	0					
ANR	5099710	Identifier	pfn		5099580	1					
ANR	5099711	Argument	pranges		5099580	2					
ANR	5099712	Identifier	pranges		5099580	0					
ANR	5099713	Argument	mem		5099580	3					
ANR	5099714	Identifier	mem		5099580	0					
ANR	5099715	PrimaryExpression	0		5099580	1					
ANR	5099716	OrExpression	"( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0 || ( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"		5099580	1		||			
ANR	5099717	RelationalExpression	"( code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem ) ) < 0"		5099580	0		<			
ANR	5099718	AssignmentExpression	"code = fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem )"		5099580	0		=			
ANR	5099719	Identifier	code		5099580	0					
ANR	5099720	CallExpression	"fn_scale_pairs ( & psfn -> params . Encode , pfn -> params . Encode , pfn -> params . m , NULL , mem )"		5099580	1					
ANR	5099721	Callee	fn_scale_pairs		5099580	0					
ANR	5099722	Identifier	fn_scale_pairs		5099580	0					
ANR	5099723	ArgumentList	& psfn -> params . Encode		5099580	1					
ANR	5099724	Argument	& psfn -> params . Encode		5099580	0					
ANR	5099725	UnaryOperationExpression	& psfn -> params . Encode		5099580	0					
ANR	5099726	UnaryOperator	&		5099580	0					
ANR	5099727	MemberAccess	psfn -> params . Encode		5099580	1					
ANR	5099728	PtrMemberAccess	psfn -> params		5099580	0					
ANR	5099729	Identifier	psfn		5099580	0					
ANR	5099730	Identifier	params		5099580	1					
ANR	5099731	Identifier	Encode		5099580	1					
ANR	5099732	Argument	pfn -> params . Encode		5099580	1					
ANR	5099733	MemberAccess	pfn -> params . Encode		5099580	0					
ANR	5099734	PtrMemberAccess	pfn -> params		5099580	0					
ANR	5099735	Identifier	pfn		5099580	0					
ANR	5099736	Identifier	params		5099580	1					
ANR	5099737	Identifier	Encode		5099580	1					
ANR	5099738	Argument	pfn -> params . m		5099580	2					
ANR	5099739	MemberAccess	pfn -> params . m		5099580	0					
ANR	5099740	PtrMemberAccess	pfn -> params		5099580	0					
ANR	5099741	Identifier	pfn		5099580	0					
ANR	5099742	Identifier	params		5099580	1					
ANR	5099743	Identifier	m		5099580	1					
ANR	5099744	Argument	NULL		5099580	3					
ANR	5099745	Identifier	NULL		5099580	0					
ANR	5099746	Argument	mem		5099580	4					
ANR	5099747	Identifier	mem		5099580	0					
ANR	5099748	PrimaryExpression	0		5099580	1					
ANR	5099749	RelationalExpression	"( code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem ) ) < 0"		5099580	1		<			
ANR	5099750	AssignmentExpression	"code = fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem )"		5099580	0		=			
ANR	5099751	Identifier	code		5099580	0					
ANR	5099752	CallExpression	"fn_scale_pairs ( & psfn -> params . Decode , pfn -> params . Decode , pfn -> params . n , pranges , mem )"		5099580	1					
ANR	5099753	Callee	fn_scale_pairs		5099580	0					
ANR	5099754	Identifier	fn_scale_pairs		5099580	0					
ANR	5099755	ArgumentList	& psfn -> params . Decode		5099580	1					
ANR	5099756	Argument	& psfn -> params . Decode		5099580	0					
ANR	5099757	UnaryOperationExpression	& psfn -> params . Decode		5099580	0					
ANR	5099758	UnaryOperator	&		5099580	0					
ANR	5099759	MemberAccess	psfn -> params . Decode		5099580	1					
ANR	5099760	PtrMemberAccess	psfn -> params		5099580	0					
ANR	5099761	Identifier	psfn		5099580	0					
ANR	5099762	Identifier	params		5099580	1					
ANR	5099763	Identifier	Decode		5099580	1					
ANR	5099764	Argument	pfn -> params . Decode		5099580	1					
ANR	5099765	MemberAccess	pfn -> params . Decode		5099580	0					
ANR	5099766	PtrMemberAccess	pfn -> params		5099580	0					
ANR	5099767	Identifier	pfn		5099580	0					
ANR	5099768	Identifier	params		5099580	1					
ANR	5099769	Identifier	Decode		5099580	1					
ANR	5099770	Argument	pfn -> params . n		5099580	2					
ANR	5099771	MemberAccess	pfn -> params . n		5099580	0					
ANR	5099772	PtrMemberAccess	pfn -> params		5099580	0					
ANR	5099773	Identifier	pfn		5099580	0					
ANR	5099774	Identifier	params		5099580	1					
ANR	5099775	Identifier	n		5099580	1					
ANR	5099776	Argument	pranges		5099580	3					
ANR	5099777	Identifier	pranges		5099580	0					
ANR	5099778	Argument	mem		5099580	4					
ANR	5099779	Identifier	mem		5099580	0					
ANR	5099780	PrimaryExpression	0		5099580	1					
ANR	5099781	CompoundStatement		22:66:979:979	5099580	1					
ANR	5099782	ExpressionStatement	"gs_function_free ( ( gs_function_t * ) psfn , true , mem )"	1353:8:46305:46355	5099580	0	True				
ANR	5099783	CallExpression	"gs_function_free ( ( gs_function_t * ) psfn , true , mem )"		5099580	0					
ANR	5099784	Callee	gs_function_free		5099580	0					
ANR	5099785	Identifier	gs_function_free		5099580	0					
ANR	5099786	ArgumentList	( gs_function_t * ) psfn		5099580	1					
ANR	5099787	Argument	( gs_function_t * ) psfn		5099580	0					
ANR	5099788	CastExpression	( gs_function_t * ) psfn		5099580	0					
ANR	5099789	CastTarget	gs_function_t *		5099580	0					
ANR	5099790	Identifier	psfn		5099580	1					
ANR	5099791	Argument	true		5099580	1					
ANR	5099792	Identifier	true		5099580	0					
ANR	5099793	Argument	mem		5099580	2					
ANR	5099794	Identifier	mem		5099580	0					
ANR	5099795	ElseStatement	else		5099580	0					
ANR	5099796	ExpressionStatement	* ppsfn = psfn	1355:8:46376:46389	5099580	0	True				
ANR	5099797	AssignmentExpression	* ppsfn = psfn		5099580	0		=			
ANR	5099798	UnaryOperationExpression	* ppsfn		5099580	0					
ANR	5099799	UnaryOperator	*		5099580	0					
ANR	5099800	Identifier	ppsfn		5099580	1					
ANR	5099801	Identifier	psfn		5099580	1					
ANR	5099802	ReturnStatement	return code ;	1356:4:46395:46406	5099580	8	True				
ANR	5099803	Identifier	code		5099580	0					
ANR	5099804	ReturnType	static int		5099580	1					
ANR	5099805	Identifier	fn_Sd_make_scaled		5099580	2					
ANR	5099806	ParameterList	"const gs_function_Sd_t * pfn , gs_function_Sd_t * * ppsfn , const gs_range_t * pranges , gs_memory_t * mem"		5099580	3					
ANR	5099807	Parameter	const gs_function_Sd_t * pfn	1329:18:45197:45223	5099580	0	True				
ANR	5099808	ParameterType	const gs_function_Sd_t *		5099580	0					
ANR	5099809	Identifier	pfn		5099580	1					
ANR	5099810	Parameter	gs_function_Sd_t * * ppsfn	1329:47:45226:45249	5099580	1	True				
ANR	5099811	ParameterType	gs_function_Sd_t * *		5099580	0					
ANR	5099812	Identifier	ppsfn		5099580	1					
ANR	5099813	Parameter	const gs_range_t * pranges	1330:18:45270:45294	5099580	2	True				
ANR	5099814	ParameterType	const gs_range_t *		5099580	0					
ANR	5099815	Identifier	pranges		5099580	1					
ANR	5099816	Parameter	gs_memory_t * mem	1330:45:45297:45312	5099580	3	True				
ANR	5099817	ParameterType	gs_memory_t *		5099580	0					
ANR	5099818	Identifier	mem		5099580	1					
ANR	5099819	CFGEntryNode	ENTRY		5099580		True				
ANR	5099820	CFGExitNode	EXIT		5099580		True				
ANR	5099821	Symbol	fn_common_scale		5099580						
ANR	5099822	Symbol	pfn -> params . m		5099580						
ANR	5099823	Symbol	code		5099580						
ANR	5099824	Symbol	pfn -> params . Size		5099580						
ANR	5099825	Symbol	pfn -> params . n		5099580						
ANR	5099826	Symbol	psfn -> params . Size		5099580						
ANR	5099827	Symbol	gs_alloc_struct		5099580						
ANR	5099828	Symbol	pranges		5099580						
ANR	5099829	Symbol	& psfn -> params . Encode		5099580						
ANR	5099830	Symbol	& psfn -> params		5099580						
ANR	5099831	Symbol	psfn -> params . Decode		5099580						
ANR	5099832	Symbol	mem		5099580						
ANR	5099833	Symbol	pfn -> params . Encode		5099580						
ANR	5099834	Symbol	fn_scale_pairs		5099580						
ANR	5099835	Symbol	fn_copy_values		5099580						
ANR	5099836	Symbol	psfn -> params		5099580						
ANR	5099837	Symbol	* pfn		5099580						
ANR	5099838	Symbol	* psfn		5099580						
ANR	5099839	Symbol	NULL		5099580						
ANR	5099840	Symbol	ppsfn		5099580						
ANR	5099841	Symbol	& st_function_Sd		5099580						
ANR	5099842	Symbol	psfn -> params . Encode		5099580						
ANR	5099843	Symbol	gs_error_VMerror		5099580						
ANR	5099844	Symbol	gs_note_error		5099580						
ANR	5099845	Symbol	& psfn -> params . Decode		5099580						
ANR	5099846	Symbol	true		5099580						
ANR	5099847	Symbol	pfn		5099580						
ANR	5099848	Symbol	* ppsfn		5099580						
ANR	5099849	Symbol	pfn -> params . Decode		5099580						
ANR	5099850	Symbol	gs_function_Sd_t		5099580						
ANR	5099851	Symbol	pfn -> params		5099580						
ANR	5099852	Symbol	psfn		5099580						
ANR	5099853	Function	gs_function_Sd_free_params	1360:0:46460:46999							
ANR	5099854	FunctionDef	"gs_function_Sd_free_params (gs_function_Sd_params_t * params , gs_memory_t * mem)"		5099853	0					
ANR	5099855	CompoundStatement		1362:0:46545:46999	5099853	0					
ANR	5099856	ExpressionStatement	"gs_free_const_object ( mem , params -> Size , ""Size"" )"	1363:4:46551:46598	5099853	0	True				
ANR	5099857	CallExpression	"gs_free_const_object ( mem , params -> Size , ""Size"" )"		5099853	0					
ANR	5099858	Callee	gs_free_const_object		5099853	0					
ANR	5099859	Identifier	gs_free_const_object		5099853	0					
ANR	5099860	ArgumentList	mem		5099853	1					
ANR	5099861	Argument	mem		5099853	0					
ANR	5099862	Identifier	mem		5099853	0					
ANR	5099863	Argument	params -> Size		5099853	1					
ANR	5099864	PtrMemberAccess	params -> Size		5099853	0					
ANR	5099865	Identifier	params		5099853	0					
ANR	5099866	Identifier	Size		5099853	1					
ANR	5099867	Argument	"""Size"""		5099853	2					
ANR	5099868	PrimaryExpression	"""Size"""		5099853	0					
ANR	5099869	ExpressionStatement	"gs_free_const_object ( mem , params -> Decode , ""Decode"" )"	1364:4:46604:46655	5099853	1	True				
ANR	5099870	CallExpression	"gs_free_const_object ( mem , params -> Decode , ""Decode"" )"		5099853	0					
ANR	5099871	Callee	gs_free_const_object		5099853	0					
ANR	5099872	Identifier	gs_free_const_object		5099853	0					
ANR	5099873	ArgumentList	mem		5099853	1					
ANR	5099874	Argument	mem		5099853	0					
ANR	5099875	Identifier	mem		5099853	0					
ANR	5099876	Argument	params -> Decode		5099853	1					
ANR	5099877	PtrMemberAccess	params -> Decode		5099853	0					
ANR	5099878	Identifier	params		5099853	0					
ANR	5099879	Identifier	Decode		5099853	1					
ANR	5099880	Argument	"""Decode"""		5099853	2					
ANR	5099881	PrimaryExpression	"""Decode"""		5099853	0					
ANR	5099882	ExpressionStatement	"gs_free_const_object ( mem , params -> Encode , ""Encode"" )"	1365:4:46661:46712	5099853	2	True				
ANR	5099883	CallExpression	"gs_free_const_object ( mem , params -> Encode , ""Encode"" )"		5099853	0					
ANR	5099884	Callee	gs_free_const_object		5099853	0					
ANR	5099885	Identifier	gs_free_const_object		5099853	0					
ANR	5099886	ArgumentList	mem		5099853	1					
ANR	5099887	Argument	mem		5099853	0					
ANR	5099888	Identifier	mem		5099853	0					
ANR	5099889	Argument	params -> Encode		5099853	1					
ANR	5099890	PtrMemberAccess	params -> Encode		5099853	0					
ANR	5099891	Identifier	params		5099853	0					
ANR	5099892	Identifier	Encode		5099853	1					
ANR	5099893	Argument	"""Encode"""		5099853	2					
ANR	5099894	PrimaryExpression	"""Encode"""		5099853	0					
ANR	5099895	ExpressionStatement	"fn_common_free_params ( ( gs_function_params_t * ) params , mem )"	1366:4:46718:46777	5099853	3	True				
ANR	5099896	CallExpression	"fn_common_free_params ( ( gs_function_params_t * ) params , mem )"		5099853	0					
ANR	5099897	Callee	fn_common_free_params		5099853	0					
ANR	5099898	Identifier	fn_common_free_params		5099853	0					
ANR	5099899	ArgumentList	( gs_function_params_t * ) params		5099853	1					
ANR	5099900	Argument	( gs_function_params_t * ) params		5099853	0					
ANR	5099901	CastExpression	( gs_function_params_t * ) params		5099853	0					
ANR	5099902	CastTarget	gs_function_params_t *		5099853	0					
ANR	5099903	Identifier	params		5099853	1					
ANR	5099904	Argument	mem		5099853	1					
ANR	5099905	Identifier	mem		5099853	0					
ANR	5099906	ExpressionStatement	"gs_free_object ( mem , params -> pole , ""gs_function_Sd_free_params"" )"	1367:4:46783:46846	5099853	4	True				
ANR	5099907	CallExpression	"gs_free_object ( mem , params -> pole , ""gs_function_Sd_free_params"" )"		5099853	0					
ANR	5099908	Callee	gs_free_object		5099853	0					
ANR	5099909	Identifier	gs_free_object		5099853	0					
ANR	5099910	ArgumentList	mem		5099853	1					
ANR	5099911	Argument	mem		5099853	0					
ANR	5099912	Identifier	mem		5099853	0					
ANR	5099913	Argument	params -> pole		5099853	1					
ANR	5099914	PtrMemberAccess	params -> pole		5099853	0					
ANR	5099915	Identifier	params		5099853	0					
ANR	5099916	Identifier	pole		5099853	1					
ANR	5099917	Argument	"""gs_function_Sd_free_params"""		5099853	2					
ANR	5099918	PrimaryExpression	"""gs_function_Sd_free_params"""		5099853	0					
ANR	5099919	ExpressionStatement	"gs_free_object ( mem , params -> array_step , ""gs_function_Sd_free_params"" )"	1368:4:46852:46921	5099853	5	True				
ANR	5099920	CallExpression	"gs_free_object ( mem , params -> array_step , ""gs_function_Sd_free_params"" )"		5099853	0					
ANR	5099921	Callee	gs_free_object		5099853	0					
ANR	5099922	Identifier	gs_free_object		5099853	0					
ANR	5099923	ArgumentList	mem		5099853	1					
ANR	5099924	Argument	mem		5099853	0					
ANR	5099925	Identifier	mem		5099853	0					
ANR	5099926	Argument	params -> array_step		5099853	1					
ANR	5099927	PtrMemberAccess	params -> array_step		5099853	0					
ANR	5099928	Identifier	params		5099853	0					
ANR	5099929	Identifier	array_step		5099853	1					
ANR	5099930	Argument	"""gs_function_Sd_free_params"""		5099853	2					
ANR	5099931	PrimaryExpression	"""gs_function_Sd_free_params"""		5099853	0					
ANR	5099932	ExpressionStatement	"gs_free_object ( mem , params -> stream_step , ""gs_function_Sd_free_params"" )"	1369:4:46927:46997	5099853	6	True				
ANR	5099933	CallExpression	"gs_free_object ( mem , params -> stream_step , ""gs_function_Sd_free_params"" )"		5099853	0					
ANR	5099934	Callee	gs_free_object		5099853	0					
ANR	5099935	Identifier	gs_free_object		5099853	0					
ANR	5099936	ArgumentList	mem		5099853	1					
ANR	5099937	Argument	mem		5099853	0					
ANR	5099938	Identifier	mem		5099853	0					
ANR	5099939	Argument	params -> stream_step		5099853	1					
ANR	5099940	PtrMemberAccess	params -> stream_step		5099853	0					
ANR	5099941	Identifier	params		5099853	0					
ANR	5099942	Identifier	stream_step		5099853	1					
ANR	5099943	Argument	"""gs_function_Sd_free_params"""		5099853	2					
ANR	5099944	PrimaryExpression	"""gs_function_Sd_free_params"""		5099853	0					
ANR	5099945	ReturnType	void		5099853	1					
ANR	5099946	Identifier	gs_function_Sd_free_params		5099853	2					
ANR	5099947	ParameterList	"gs_function_Sd_params_t * params , gs_memory_t * mem"		5099853	3					
ANR	5099948	Parameter	gs_function_Sd_params_t * params	1361:27:46492:46523	5099853	0	True				
ANR	5099949	ParameterType	gs_function_Sd_params_t *		5099853	0					
ANR	5099950	Identifier	params		5099853	1					
ANR	5099951	Parameter	gs_memory_t * mem	1361:61:46526:46542	5099853	1	True				
ANR	5099952	ParameterType	gs_memory_t *		5099853	0					
ANR	5099953	Identifier	mem		5099853	1					
ANR	5099954	CFGEntryNode	ENTRY		5099853		True				
ANR	5099955	CFGExitNode	EXIT		5099853		True				
ANR	5099956	Symbol	params -> array_step		5099853						
ANR	5099957	Symbol	mem		5099853						
ANR	5099958	Symbol	params -> Encode		5099853						
ANR	5099959	Symbol	params -> Decode		5099853						
ANR	5099960	Symbol	params -> pole		5099853						
ANR	5099961	Symbol	params		5099853						
ANR	5099962	Symbol	params -> Size		5099853						
ANR	5099963	Symbol	* params		5099853						
ANR	5099964	Symbol	params -> stream_step		5099853						
ANR	5099965	Function	serialize_array	1373:0:47048:47449							
ANR	5099966	FunctionDef	"serialize_array (const float * a , int half_size , stream * s)"		5099965	0					
ANR	5099967	CompoundStatement		1374:0:47117:47449	5099965	0					
ANR	5099968	IdentifierDeclStatement	uint n ;	1375:4:47123:47129	5099965	0	True				
ANR	5099969	IdentifierDecl	n		5099965	0					
ANR	5099970	IdentifierDeclType	uint		5099965	0					
ANR	5099971	Identifier	n		5099965	1					
ANR	5099972	IdentifierDeclStatement	"const float dummy [ 2 ] = { 0 , 0 } ;"	1376:4:47135:47164	5099965	1	True				
ANR	5099973	IdentifierDecl	"dummy [ 2 ] = { 0 , 0 }"		5099965	0					
ANR	5099974	IdentifierDeclType	const float [ 2 ]		5099965	0					
ANR	5099975	Identifier	dummy		5099965	1					
ANR	5099976	PrimaryExpression	2		5099965	2					
ANR	5099977	AssignmentExpression	"dummy [ 2 ] = { 0 , 0 }"		5099965	3		=			
ANR	5099978	Identifier	dummy		5099965	0					
ANR	5099979	InitializerList	0		5099965	1					
ANR	5099980	PrimaryExpression	0		5099965	0					
ANR	5099981	PrimaryExpression	0		5099965	1					
ANR	5099982	IdentifierDeclStatement	"int i , code ;"	1377:4:47170:47181	5099965	2	True				
ANR	5099983	IdentifierDecl	i		5099965	0					
ANR	5099984	IdentifierDeclType	int		5099965	0					
ANR	5099985	Identifier	i		5099965	1					
ANR	5099986	IdentifierDecl	code		5099965	1					
ANR	5099987	IdentifierDeclType	int		5099965	0					
ANR	5099988	Identifier	code		5099965	1					
ANR	5099989	IfStatement	if ( a != NULL )		5099965	3					
ANR	5099990	Condition	a != NULL	1379:8:47192:47200	5099965	0	True				
ANR	5099991	EqualityExpression	a != NULL		5099965	0		!=			
ANR	5099992	Identifier	a		5099965	0					
ANR	5099993	Identifier	NULL		5099965	1					
ANR	5099994	ReturnStatement	"return sputs ( s , ( const byte * ) a , sizeof ( a [ 0 ] ) * half_size * 2 , & n ) ;"	1380:8:47211:47277	5099965	1	True				
ANR	5099995	CallExpression	"sputs ( s , ( const byte * ) a , sizeof ( a [ 0 ] ) * half_size * 2 , & n )"		5099965	0					
ANR	5099996	Callee	sputs		5099965	0					
ANR	5099997	Identifier	sputs		5099965	0					
ANR	5099998	ArgumentList	s		5099965	1					
ANR	5099999	Argument	s		5099965	0					
ANR	5100000	Identifier	s		5099965	0					
ANR	5100001	Argument	( const byte * ) a		5099965	1					
ANR	5100002	CastExpression	( const byte * ) a		5099965	0					
ANR	5100003	CastTarget	const byte *		5099965	0					
ANR	5100004	Identifier	a		5099965	1					
ANR	5100005	Argument	sizeof ( a [ 0 ] ) * half_size * 2		5099965	2					
ANR	5100006	MultiplicativeExpression	sizeof ( a [ 0 ] ) * half_size * 2		5099965	0		*			
ANR	5100007	SizeofExpression	sizeof ( a [ 0 ] )		5099965	0					
ANR	5100008	Sizeof	sizeof		5099965	0					
ANR	5100009	ArrayIndexing	a [ 0 ]		5099965	1					
ANR	5100010	Identifier	a		5099965	0					
ANR	5100011	PrimaryExpression	0		5099965	1					
ANR	5100012	MultiplicativeExpression	half_size * 2		5099965	1		*			
ANR	5100013	Identifier	half_size		5099965	0					
ANR	5100014	PrimaryExpression	2		5099965	1					
ANR	5100015	Argument	& n		5099965	3					
ANR	5100016	UnaryOperationExpression	& n		5099965	0					
ANR	5100017	UnaryOperator	&		5099965	0					
ANR	5100018	Identifier	n		5099965	1					
ANR	5100019	ForStatement	for ( i = 0 ; i < half_size ; i ++ )		5099965	4					
ANR	5100020	ForInit	i = 0 ;	1381:9:47288:47293	5099965	0	True				
ANR	5100021	AssignmentExpression	i = 0		5099965	0		=			
ANR	5100022	Identifier	i		5099965	0					
ANR	5100023	PrimaryExpression	0		5099965	1					
ANR	5100024	Condition	i < half_size	1381:16:47295:47307	5099965	1	True				
ANR	5100025	RelationalExpression	i < half_size		5099965	0		<			
ANR	5100026	Identifier	i		5099965	0					
ANR	5100027	Identifier	half_size		5099965	1					
ANR	5100028	PostIncDecOperationExpression	i ++	1381:31:47310:47312	5099965	2	True				
ANR	5100029	Identifier	i		5099965	0					
ANR	5100030	IncDec	++		5099965	1					
ANR	5100031	CompoundStatement		8:36:197:197	5099965	3					
ANR	5100032	ExpressionStatement	"code = sputs ( s , ( const byte * ) dummy , sizeof ( dummy ) , & n )"	1382:8:47325:47380	5099965	0	True				
ANR	5100033	AssignmentExpression	"code = sputs ( s , ( const byte * ) dummy , sizeof ( dummy ) , & n )"		5099965	0		=			
ANR	5100034	Identifier	code		5099965	0					
ANR	5100035	CallExpression	"sputs ( s , ( const byte * ) dummy , sizeof ( dummy ) , & n )"		5099965	1					
ANR	5100036	Callee	sputs		5099965	0					
ANR	5100037	Identifier	sputs		5099965	0					
ANR	5100038	ArgumentList	s		5099965	1					
ANR	5100039	Argument	s		5099965	0					
ANR	5100040	Identifier	s		5099965	0					
ANR	5100041	Argument	( const byte * ) dummy		5099965	1					
ANR	5100042	CastExpression	( const byte * ) dummy		5099965	0					
ANR	5100043	CastTarget	const byte *		5099965	0					
ANR	5100044	Identifier	dummy		5099965	1					
ANR	5100045	Argument	sizeof ( dummy )		5099965	2					
ANR	5100046	SizeofExpression	sizeof ( dummy )		5099965	0					
ANR	5100047	Sizeof	sizeof		5099965	0					
ANR	5100048	SizeofOperand	dummy		5099965	1					
ANR	5100049	Argument	& n		5099965	3					
ANR	5100050	UnaryOperationExpression	& n		5099965	0					
ANR	5100051	UnaryOperator	&		5099965	0					
ANR	5100052	Identifier	n		5099965	1					
ANR	5100053	IfStatement	if ( code < 0 )		5099965	1					
ANR	5100054	Condition	code < 0	1383:12:47394:47401	5099965	0	True				
ANR	5100055	RelationalExpression	code < 0		5099965	0		<			
ANR	5100056	Identifier	code		5099965	0					
ANR	5100057	PrimaryExpression	0		5099965	1					
ANR	5100058	ReturnStatement	return code ;	1384:12:47416:47427	5099965	1	True				
ANR	5100059	Identifier	code		5099965	0					
ANR	5100060	ReturnStatement	return 0 ;	1386:4:47439:47447	5099965	5	True				
ANR	5100061	PrimaryExpression	0		5099965	0					
ANR	5100062	ReturnType	static int		5099965	1					
ANR	5100063	Identifier	serialize_array		5099965	2					
ANR	5100064	ParameterList	"const float * a , int half_size , stream * s"		5099965	3					
ANR	5100065	Parameter	const float * a	1373:27:47075:47088	5099965	0	True				
ANR	5100066	ParameterType	const float *		5099965	0					
ANR	5100067	Identifier	a		5099965	1					
ANR	5100068	Parameter	int half_size	1373:43:47091:47103	5099965	1	True				
ANR	5100069	ParameterType	int		5099965	0					
ANR	5100070	Identifier	half_size		5099965	1					
ANR	5100071	Parameter	stream * s	1373:58:47106:47114	5099965	2	True				
ANR	5100072	ParameterType	stream *		5099965	0					
ANR	5100073	Identifier	s		5099965	1					
ANR	5100074	CFGEntryNode	ENTRY		5099965		True				
ANR	5100075	CFGExitNode	EXIT		5099965		True				
ANR	5100076	Symbol	dummy		5099965						
ANR	5100077	Symbol	a		5099965						
ANR	5100078	Symbol	half_size		5099965						
ANR	5100079	Symbol	s		5099965						
ANR	5100080	Symbol	code		5099965						
ANR	5100081	Symbol	NULL		5099965						
ANR	5100082	Symbol	& n		5099965						
ANR	5100083	Symbol	i		5099965						
ANR	5100084	Symbol	* a		5099965						
ANR	5100085	Symbol	n		5099965						
ANR	5100086	Symbol	sputs		5099965						
ANR	5100087	Function	gs_function_Sd_serialize	1390:0:47469:48682							
ANR	5100088	FunctionDef	"gs_function_Sd_serialize (const gs_function_t * pfn , stream * s)"		5100087	0					
ANR	5100089	CompoundStatement		1392:0:47543:48682	5100087	0					
ANR	5100090	IdentifierDeclStatement	uint n ;	1393:4:47549:47555	5100087	0	True				
ANR	5100091	IdentifierDecl	n		5100087	0					
ANR	5100092	IdentifierDeclType	uint		5100087	0					
ANR	5100093	Identifier	n		5100087	1					
ANR	5100094	IdentifierDeclStatement	const gs_function_Sd_params_t * p = ( const gs_function_Sd_params_t * ) & pfn -> params ;	1394:4:47561:47642	5100087	1	True				
ANR	5100095	IdentifierDecl	* p = ( const gs_function_Sd_params_t * ) & pfn -> params		5100087	0					
ANR	5100096	IdentifierDeclType	const gs_function_Sd_params_t *		5100087	0					
ANR	5100097	Identifier	p		5100087	1					
ANR	5100098	AssignmentExpression	* p = ( const gs_function_Sd_params_t * ) & pfn -> params		5100087	2		=			
ANR	5100099	Identifier	p		5100087	0					
ANR	5100100	CastExpression	( const gs_function_Sd_params_t * ) & pfn -> params		5100087	1					
ANR	5100101	CastTarget	const gs_function_Sd_params_t *		5100087	0					
ANR	5100102	UnaryOperationExpression	& pfn -> params		5100087	1					
ANR	5100103	UnaryOperator	&		5100087	0					
ANR	5100104	PtrMemberAccess	pfn -> params		5100087	1					
ANR	5100105	Identifier	pfn		5100087	0					
ANR	5100106	Identifier	params		5100087	1					
ANR	5100107	IdentifierDeclStatement	gs_function_info_t info ;	1395:4:47648:47671	5100087	2	True				
ANR	5100108	IdentifierDecl	info		5100087	0					
ANR	5100109	IdentifierDeclType	gs_function_info_t		5100087	0					
ANR	5100110	Identifier	info		5100087	1					
ANR	5100111	IdentifierDeclStatement	"int code = fn_common_serialize ( pfn , s ) ;"	1396:4:47677:47715	5100087	3	True				
ANR	5100112	IdentifierDecl	"code = fn_common_serialize ( pfn , s )"		5100087	0					
ANR	5100113	IdentifierDeclType	int		5100087	0					
ANR	5100114	Identifier	code		5100087	1					
ANR	5100115	AssignmentExpression	"code = fn_common_serialize ( pfn , s )"		5100087	2		=			
ANR	5100116	Identifier	code		5100087	0					
ANR	5100117	CallExpression	"fn_common_serialize ( pfn , s )"		5100087	1					
ANR	5100118	Callee	fn_common_serialize		5100087	0					
ANR	5100119	Identifier	fn_common_serialize		5100087	0					
ANR	5100120	ArgumentList	pfn		5100087	1					
ANR	5100121	Argument	pfn		5100087	0					
ANR	5100122	Identifier	pfn		5100087	0					
ANR	5100123	Argument	s		5100087	1					
ANR	5100124	Identifier	s		5100087	0					
ANR	5100125	IdentifierDeclStatement	ulong pos ;	1397:4:47721:47730	5100087	4	True				
ANR	5100126	IdentifierDecl	pos		5100087	0					
ANR	5100127	IdentifierDeclType	ulong		5100087	0					
ANR	5100128	Identifier	pos		5100087	1					
ANR	5100129	IdentifierDeclStatement	uint count ;	1398:4:47736:47746	5100087	5	True				
ANR	5100130	IdentifierDecl	count		5100087	0					
ANR	5100131	IdentifierDeclType	uint		5100087	0					
ANR	5100132	Identifier	count		5100087	1					
ANR	5100133	IdentifierDeclStatement	byte buf [ 100 ] ;	1399:4:47752:47765	5100087	6	True				
ANR	5100134	IdentifierDecl	buf [ 100 ]		5100087	0					
ANR	5100135	IdentifierDeclType	byte [ 100 ]		5100087	0					
ANR	5100136	Identifier	buf		5100087	1					
ANR	5100137	PrimaryExpression	100		5100087	2					
ANR	5100138	IdentifierDeclStatement	const byte * ptr ;	1400:4:47771:47786	5100087	7	True				
ANR	5100139	IdentifierDecl	* ptr		5100087	0					
ANR	5100140	IdentifierDeclType	const byte *		5100087	0					
ANR	5100141	Identifier	ptr		5100087	1					
ANR	5100142	IfStatement	if ( code < 0 )		5100087	8					
ANR	5100143	Condition	code < 0	1402:8:47797:47804	5100087	0	True				
ANR	5100144	RelationalExpression	code < 0		5100087	0		<			
ANR	5100145	Identifier	code		5100087	0					
ANR	5100146	PrimaryExpression	0		5100087	1					
ANR	5100147	ReturnStatement	return code ;	1403:8:47815:47826	5100087	1	True				
ANR	5100148	Identifier	code		5100087	0					
ANR	5100149	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> Order , sizeof ( p -> Order ) , & n )"	1404:4:47832:47894	5100087	9	True				
ANR	5100150	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> Order , sizeof ( p -> Order ) , & n )"		5100087	0		=			
ANR	5100151	Identifier	code		5100087	0					
ANR	5100152	CallExpression	"sputs ( s , ( const byte * ) & p -> Order , sizeof ( p -> Order ) , & n )"		5100087	1					
ANR	5100153	Callee	sputs		5100087	0					
ANR	5100154	Identifier	sputs		5100087	0					
ANR	5100155	ArgumentList	s		5100087	1					
ANR	5100156	Argument	s		5100087	0					
ANR	5100157	Identifier	s		5100087	0					
ANR	5100158	Argument	( const byte * ) & p -> Order		5100087	1					
ANR	5100159	CastExpression	( const byte * ) & p -> Order		5100087	0					
ANR	5100160	CastTarget	const byte *		5100087	0					
ANR	5100161	UnaryOperationExpression	& p -> Order		5100087	1					
ANR	5100162	UnaryOperator	&		5100087	0					
ANR	5100163	PtrMemberAccess	p -> Order		5100087	1					
ANR	5100164	Identifier	p		5100087	0					
ANR	5100165	Identifier	Order		5100087	1					
ANR	5100166	Argument	sizeof ( p -> Order )		5100087	2					
ANR	5100167	SizeofExpression	sizeof ( p -> Order )		5100087	0					
ANR	5100168	Sizeof	sizeof		5100087	0					
ANR	5100169	PtrMemberAccess	p -> Order		5100087	1					
ANR	5100170	Identifier	p		5100087	0					
ANR	5100171	Identifier	Order		5100087	1					
ANR	5100172	Argument	& n		5100087	3					
ANR	5100173	UnaryOperationExpression	& n		5100087	0					
ANR	5100174	UnaryOperator	&		5100087	0					
ANR	5100175	Identifier	n		5100087	1					
ANR	5100176	IfStatement	if ( code < 0 )		5100087	10					
ANR	5100177	Condition	code < 0	1405:8:47904:47911	5100087	0	True				
ANR	5100178	RelationalExpression	code < 0		5100087	0		<			
ANR	5100179	Identifier	code		5100087	0					
ANR	5100180	PrimaryExpression	0		5100087	1					
ANR	5100181	ReturnStatement	return code ;	1406:8:47922:47933	5100087	1	True				
ANR	5100182	Identifier	code		5100087	0					
ANR	5100183	ExpressionStatement	"code = sputs ( s , ( const byte * ) & p -> BitsPerSample , sizeof ( p -> BitsPerSample ) , & n )"	1407:4:47939:48017	5100087	11	True				
ANR	5100184	AssignmentExpression	"code = sputs ( s , ( const byte * ) & p -> BitsPerSample , sizeof ( p -> BitsPerSample ) , & n )"		5100087	0		=			
ANR	5100185	Identifier	code		5100087	0					
ANR	5100186	CallExpression	"sputs ( s , ( const byte * ) & p -> BitsPerSample , sizeof ( p -> BitsPerSample ) , & n )"		5100087	1					
ANR	5100187	Callee	sputs		5100087	0					
ANR	5100188	Identifier	sputs		5100087	0					
ANR	5100189	ArgumentList	s		5100087	1					
ANR	5100190	Argument	s		5100087	0					
ANR	5100191	Identifier	s		5100087	0					
ANR	5100192	Argument	( const byte * ) & p -> BitsPerSample		5100087	1					
ANR	5100193	CastExpression	( const byte * ) & p -> BitsPerSample		5100087	0					
ANR	5100194	CastTarget	const byte *		5100087	0					
ANR	5100195	UnaryOperationExpression	& p -> BitsPerSample		5100087	1					
ANR	5100196	UnaryOperator	&		5100087	0					
ANR	5100197	PtrMemberAccess	p -> BitsPerSample		5100087	1					
ANR	5100198	Identifier	p		5100087	0					
ANR	5100199	Identifier	BitsPerSample		5100087	1					
ANR	5100200	Argument	sizeof ( p -> BitsPerSample )		5100087	2					
ANR	5100201	SizeofExpression	sizeof ( p -> BitsPerSample )		5100087	0					
ANR	5100202	Sizeof	sizeof		5100087	0					
ANR	5100203	PtrMemberAccess	p -> BitsPerSample		5100087	1					
ANR	5100204	Identifier	p		5100087	0					
ANR	5100205	Identifier	BitsPerSample		5100087	1					
ANR	5100206	Argument	& n		5100087	3					
ANR	5100207	UnaryOperationExpression	& n		5100087	0					
ANR	5100208	UnaryOperator	&		5100087	0					
ANR	5100209	Identifier	n		5100087	1					
ANR	5100210	IfStatement	if ( code < 0 )		5100087	12					
ANR	5100211	Condition	code < 0	1408:8:48027:48034	5100087	0	True				
ANR	5100212	RelationalExpression	code < 0		5100087	0		<			
ANR	5100213	Identifier	code		5100087	0					
ANR	5100214	PrimaryExpression	0		5100087	1					
ANR	5100215	ReturnStatement	return code ;	1409:8:48045:48056	5100087	1	True				
ANR	5100216	Identifier	code		5100087	0					
ANR	5100217	ExpressionStatement	"code = serialize_array ( p -> Encode , p -> m , s )"	1410:4:48062:48104	5100087	13	True				
ANR	5100218	AssignmentExpression	"code = serialize_array ( p -> Encode , p -> m , s )"		5100087	0		=			
ANR	5100219	Identifier	code		5100087	0					
ANR	5100220	CallExpression	"serialize_array ( p -> Encode , p -> m , s )"		5100087	1					
ANR	5100221	Callee	serialize_array		5100087	0					
ANR	5100222	Identifier	serialize_array		5100087	0					
ANR	5100223	ArgumentList	p -> Encode		5100087	1					
ANR	5100224	Argument	p -> Encode		5100087	0					
ANR	5100225	PtrMemberAccess	p -> Encode		5100087	0					
ANR	5100226	Identifier	p		5100087	0					
ANR	5100227	Identifier	Encode		5100087	1					
ANR	5100228	Argument	p -> m		5100087	1					
ANR	5100229	PtrMemberAccess	p -> m		5100087	0					
ANR	5100230	Identifier	p		5100087	0					
ANR	5100231	Identifier	m		5100087	1					
ANR	5100232	Argument	s		5100087	2					
ANR	5100233	Identifier	s		5100087	0					
ANR	5100234	IfStatement	if ( code < 0 )		5100087	14					
ANR	5100235	Condition	code < 0	1411:8:48114:48121	5100087	0	True				
ANR	5100236	RelationalExpression	code < 0		5100087	0		<			
ANR	5100237	Identifier	code		5100087	0					
ANR	5100238	PrimaryExpression	0		5100087	1					
ANR	5100239	ReturnStatement	return code ;	1412:8:48132:48143	5100087	1	True				
ANR	5100240	Identifier	code		5100087	0					
ANR	5100241	ExpressionStatement	"code = serialize_array ( p -> Decode , p -> n , s )"	1413:4:48149:48191	5100087	15	True				
ANR	5100242	AssignmentExpression	"code = serialize_array ( p -> Decode , p -> n , s )"		5100087	0		=			
ANR	5100243	Identifier	code		5100087	0					
ANR	5100244	CallExpression	"serialize_array ( p -> Decode , p -> n , s )"		5100087	1					
ANR	5100245	Callee	serialize_array		5100087	0					
ANR	5100246	Identifier	serialize_array		5100087	0					
ANR	5100247	ArgumentList	p -> Decode		5100087	1					
ANR	5100248	Argument	p -> Decode		5100087	0					
ANR	5100249	PtrMemberAccess	p -> Decode		5100087	0					
ANR	5100250	Identifier	p		5100087	0					
ANR	5100251	Identifier	Decode		5100087	1					
ANR	5100252	Argument	p -> n		5100087	1					
ANR	5100253	PtrMemberAccess	p -> n		5100087	0					
ANR	5100254	Identifier	p		5100087	0					
ANR	5100255	Identifier	n		5100087	1					
ANR	5100256	Argument	s		5100087	2					
ANR	5100257	Identifier	s		5100087	0					
ANR	5100258	IfStatement	if ( code < 0 )		5100087	16					
ANR	5100259	Condition	code < 0	1414:8:48201:48208	5100087	0	True				
ANR	5100260	RelationalExpression	code < 0		5100087	0		<			
ANR	5100261	Identifier	code		5100087	0					
ANR	5100262	PrimaryExpression	0		5100087	1					
ANR	5100263	ReturnStatement	return code ;	1415:8:48219:48230	5100087	1	True				
ANR	5100264	Identifier	code		5100087	0					
ANR	5100265	ExpressionStatement	"gs_function_get_info ( pfn , & info )"	1416:4:48236:48268	5100087	17	True				
ANR	5100266	CallExpression	"gs_function_get_info ( pfn , & info )"		5100087	0					
ANR	5100267	Callee	gs_function_get_info		5100087	0					
ANR	5100268	Identifier	gs_function_get_info		5100087	0					
ANR	5100269	ArgumentList	pfn		5100087	1					
ANR	5100270	Argument	pfn		5100087	0					
ANR	5100271	Identifier	pfn		5100087	0					
ANR	5100272	Argument	& info		5100087	1					
ANR	5100273	UnaryOperationExpression	& info		5100087	0					
ANR	5100274	UnaryOperator	&		5100087	0					
ANR	5100275	Identifier	info		5100087	1					
ANR	5100276	ExpressionStatement	"code = sputs ( s , ( const byte * ) & info . data_size , sizeof ( info . data_size ) , & n )"	1417:4:48274:48348	5100087	18	True				
ANR	5100277	AssignmentExpression	"code = sputs ( s , ( const byte * ) & info . data_size , sizeof ( info . data_size ) , & n )"		5100087	0		=			
ANR	5100278	Identifier	code		5100087	0					
ANR	5100279	CallExpression	"sputs ( s , ( const byte * ) & info . data_size , sizeof ( info . data_size ) , & n )"		5100087	1					
ANR	5100280	Callee	sputs		5100087	0					
ANR	5100281	Identifier	sputs		5100087	0					
ANR	5100282	ArgumentList	s		5100087	1					
ANR	5100283	Argument	s		5100087	0					
ANR	5100284	Identifier	s		5100087	0					
ANR	5100285	Argument	( const byte * ) & info . data_size		5100087	1					
ANR	5100286	CastExpression	( const byte * ) & info . data_size		5100087	0					
ANR	5100287	CastTarget	const byte *		5100087	0					
ANR	5100288	UnaryOperationExpression	& info . data_size		5100087	1					
ANR	5100289	UnaryOperator	&		5100087	0					
ANR	5100290	MemberAccess	info . data_size		5100087	1					
ANR	5100291	Identifier	info		5100087	0					
ANR	5100292	Identifier	data_size		5100087	1					
ANR	5100293	Argument	sizeof ( info . data_size )		5100087	2					
ANR	5100294	SizeofExpression	sizeof ( info . data_size )		5100087	0					
ANR	5100295	Sizeof	sizeof		5100087	0					
ANR	5100296	MemberAccess	info . data_size		5100087	1					
ANR	5100297	Identifier	info		5100087	0					
ANR	5100298	Identifier	data_size		5100087	1					
ANR	5100299	Argument	& n		5100087	3					
ANR	5100300	UnaryOperationExpression	& n		5100087	0					
ANR	5100301	UnaryOperator	&		5100087	0					
ANR	5100302	Identifier	n		5100087	1					
ANR	5100303	IfStatement	if ( code < 0 )		5100087	19					
ANR	5100304	Condition	code < 0	1418:8:48358:48365	5100087	0	True				
ANR	5100305	RelationalExpression	code < 0		5100087	0		<			
ANR	5100306	Identifier	code		5100087	0					
ANR	5100307	PrimaryExpression	0		5100087	1					
ANR	5100308	ReturnStatement	return code ;	1419:8:48376:48387	5100087	1	True				
ANR	5100309	Identifier	code		5100087	0					
ANR	5100310	ForStatement	for ( pos = 0 ; pos < info . data_size ; pos += count )		5100087	20					
ANR	5100311	ForInit	pos = 0 ;	1420:9:48398:48405	5100087	0	True				
ANR	5100312	AssignmentExpression	pos = 0		5100087	0		=			
ANR	5100313	Identifier	pos		5100087	0					
ANR	5100314	PrimaryExpression	0		5100087	1					
ANR	5100315	Condition	pos < info . data_size	1420:18:48407:48426	5100087	1	True				
ANR	5100316	RelationalExpression	pos < info . data_size		5100087	0		<			
ANR	5100317	Identifier	pos		5100087	0					
ANR	5100318	MemberAccess	info . data_size		5100087	1					
ANR	5100319	Identifier	info		5100087	0					
ANR	5100320	Identifier	data_size		5100087	1					
ANR	5100321	AssignmentExpression	pos += count	1420:40:48429:48440	5100087	2	True	+=			
ANR	5100322	Identifier	pos		5100087	0					
ANR	5100323	Identifier	count		5100087	1					
ANR	5100324	CompoundStatement		29:54:899:899	5100087	3					
ANR	5100325	ExpressionStatement	"count = min ( sizeof ( buf ) , info . data_size - pos )"	1421:8:48453:48499	5100087	0	True				
ANR	5100326	AssignmentExpression	"count = min ( sizeof ( buf ) , info . data_size - pos )"		5100087	0		=			
ANR	5100327	Identifier	count		5100087	0					
ANR	5100328	CallExpression	"min ( sizeof ( buf ) , info . data_size - pos )"		5100087	1					
ANR	5100329	Callee	min		5100087	0					
ANR	5100330	Identifier	min		5100087	0					
ANR	5100331	ArgumentList	sizeof ( buf )		5100087	1					
ANR	5100332	Argument	sizeof ( buf )		5100087	0					
ANR	5100333	SizeofExpression	sizeof ( buf )		5100087	0					
ANR	5100334	Sizeof	sizeof		5100087	0					
ANR	5100335	SizeofOperand	buf		5100087	1					
ANR	5100336	Argument	info . data_size - pos		5100087	1					
ANR	5100337	AdditiveExpression	info . data_size - pos		5100087	0		-			
ANR	5100338	MemberAccess	info . data_size		5100087	0					
ANR	5100339	Identifier	info		5100087	0					
ANR	5100340	Identifier	data_size		5100087	1					
ANR	5100341	Identifier	pos		5100087	1					
ANR	5100342	ExpressionStatement	"data_source_access_only ( info . DataSource , pos , count , buf , & ptr )"	1422:8:48509:48572	5100087	1	True				
ANR	5100343	CallExpression	"data_source_access_only ( info . DataSource , pos , count , buf , & ptr )"		5100087	0					
ANR	5100344	Callee	data_source_access_only		5100087	0					
ANR	5100345	Identifier	data_source_access_only		5100087	0					
ANR	5100346	ArgumentList	info . DataSource		5100087	1					
ANR	5100347	Argument	info . DataSource		5100087	0					
ANR	5100348	MemberAccess	info . DataSource		5100087	0					
ANR	5100349	Identifier	info		5100087	0					
ANR	5100350	Identifier	DataSource		5100087	1					
ANR	5100351	Argument	pos		5100087	1					
ANR	5100352	Identifier	pos		5100087	0					
ANR	5100353	Argument	count		5100087	2					
ANR	5100354	Identifier	count		5100087	0					
ANR	5100355	Argument	buf		5100087	3					
ANR	5100356	Identifier	buf		5100087	0					
ANR	5100357	Argument	& ptr		5100087	4					
ANR	5100358	UnaryOperationExpression	& ptr		5100087	0					
ANR	5100359	UnaryOperator	&		5100087	0					
ANR	5100360	Identifier	ptr		5100087	1					
ANR	5100361	ExpressionStatement	"code = sputs ( s , ptr , count , & n )"	1423:8:48582:48613	5100087	2	True				
ANR	5100362	AssignmentExpression	"code = sputs ( s , ptr , count , & n )"		5100087	0		=			
ANR	5100363	Identifier	code		5100087	0					
ANR	5100364	CallExpression	"sputs ( s , ptr , count , & n )"		5100087	1					
ANR	5100365	Callee	sputs		5100087	0					
ANR	5100366	Identifier	sputs		5100087	0					
ANR	5100367	ArgumentList	s		5100087	1					
ANR	5100368	Argument	s		5100087	0					
ANR	5100369	Identifier	s		5100087	0					
ANR	5100370	Argument	ptr		5100087	1					
ANR	5100371	Identifier	ptr		5100087	0					
ANR	5100372	Argument	count		5100087	2					
ANR	5100373	Identifier	count		5100087	0					
ANR	5100374	Argument	& n		5100087	3					
ANR	5100375	UnaryOperationExpression	& n		5100087	0					
ANR	5100376	UnaryOperator	&		5100087	0					
ANR	5100377	Identifier	n		5100087	1					
ANR	5100378	IfStatement	if ( code < 0 )		5100087	3					
ANR	5100379	Condition	code < 0	1424:12:48627:48634	5100087	0	True				
ANR	5100380	RelationalExpression	code < 0		5100087	0		<			
ANR	5100381	Identifier	code		5100087	0					
ANR	5100382	PrimaryExpression	0		5100087	1					
ANR	5100383	ReturnStatement	return code ;	1425:12:48649:48660	5100087	1	True				
ANR	5100384	Identifier	code		5100087	0					
ANR	5100385	ReturnStatement	return 0 ;	1427:4:48672:48680	5100087	21	True				
ANR	5100386	PrimaryExpression	0		5100087	0					
ANR	5100387	ReturnType	static int		5100087	1					
ANR	5100388	Identifier	gs_function_Sd_serialize		5100087	2					
ANR	5100389	ParameterList	"const gs_function_t * pfn , stream * s"		5100087	3					
ANR	5100390	Parameter	const gs_function_t * pfn	1391:25:47505:47529	5100087	0	True				
ANR	5100391	ParameterType	const gs_function_t *		5100087	0					
ANR	5100392	Identifier	pfn		5100087	1					
ANR	5100393	Parameter	stream * s	1391:52:47532:47540	5100087	1	True				
ANR	5100394	ParameterType	stream *		5100087	0					
ANR	5100395	Identifier	s		5100087	1					
ANR	5100396	CFGEntryNode	ENTRY		5100087		True				
ANR	5100397	CFGExitNode	EXIT		5100087		True				
ANR	5100398	Symbol	code		5100087						
ANR	5100399	Symbol	info . data_size		5100087						
ANR	5100400	Symbol	& p -> Order		5100087						
ANR	5100401	Symbol	& p -> BitsPerSample		5100087						
ANR	5100402	Symbol	min		5100087						
ANR	5100403	Symbol	& ptr		5100087						
ANR	5100404	Symbol	info . DataSource		5100087						
ANR	5100405	Symbol	pos		5100087						
ANR	5100406	Symbol	p -> n		5100087						
ANR	5100407	Symbol	p -> m		5100087						
ANR	5100408	Symbol	p -> Encode		5100087						
ANR	5100409	Symbol	p -> BitsPerSample		5100087						
ANR	5100410	Symbol	fn_common_serialize		5100087						
ANR	5100411	Symbol	info		5100087						
ANR	5100412	Symbol	p -> Order		5100087						
ANR	5100413	Symbol	& info		5100087						
ANR	5100414	Symbol	& pfn -> params		5100087						
ANR	5100415	Symbol	count		5100087						
ANR	5100416	Symbol	n		5100087						
ANR	5100417	Symbol	ptr		5100087						
ANR	5100418	Symbol	p		5100087						
ANR	5100419	Symbol	buf		5100087						
ANR	5100420	Symbol	& info . data_size		5100087						
ANR	5100421	Symbol	s		5100087						
ANR	5100422	Symbol	serialize_array		5100087						
ANR	5100423	Symbol	& n		5100087						
ANR	5100424	Symbol	p -> Decode		5100087						
ANR	5100425	Symbol	pfn		5100087						
ANR	5100426	Symbol	* p		5100087						
ANR	5100427	Symbol	sputs		5100087						
ANR	5100428	Function	gs_function_Sd_init	1431:0:48735:52321							
ANR	5100429	FunctionDef	"gs_function_Sd_init (gs_function_t * * ppfn , const gs_function_Sd_params_t * params , gs_memory_t * mem)"		5100428	0					
ANR	5100430	CompoundStatement		1434:0:48859:52321	5100428	0					
ANR	5100431	Statement	static	1435:4:48865:48870	5100428	0	True				
ANR	5100432	Statement	const	1435:11:48872:48876	5100428	1	True				
ANR	5100433	Statement	gs_function_head_t	1435:17:48878:48895	5100428	2	True				
ANR	5100434	Statement	function_Sd_head	1435:36:48897:48912	5100428	3	True				
ANR	5100435	Statement	=	1435:53:48914:48914	5100428	4	True				
ANR	5100436	CompoundStatement		2:55:56:56	5100428	5					
ANR	5100437	Statement	function_type_Sampled	1436:8:48926:48946	5100428	0	True				
ANR	5100438	Statement	","	1436:29:48947:48947	5100428	1	True				
ANR	5100439	CompoundStatement		4:8:97:97	5100428	2					
ANR	5100440	Statement	(	1438:12:48971:48971	5100428	0	True				
ANR	5100441	Statement	fn_evaluate_proc_t	1438:13:48972:48989	5100428	1	True				
ANR	5100442	Statement	)	1438:31:48990:48990	5100428	2	True				
ANR	5100443	Statement	fn_Sd_evaluate	1438:33:48992:49005	5100428	3	True				
ANR	5100444	Statement	","	1438:47:49006:49006	5100428	4	True				
ANR	5100445	Statement	(	1439:12:49020:49020	5100428	5	True				
ANR	5100446	Statement	fn_is_monotonic_proc_t	1439:13:49021:49042	5100428	6	True				
ANR	5100447	Statement	)	1439:35:49043:49043	5100428	7	True				
ANR	5100448	Statement	fn_Sd_is_monotonic	1439:37:49045:49062	5100428	8	True				
ANR	5100449	Statement	","	1439:55:49063:49063	5100428	9	True				
ANR	5100450	Statement	(	1440:12:49077:49077	5100428	10	True				
ANR	5100451	Statement	fn_get_info_proc_t	1440:13:49078:49095	5100428	11	True				
ANR	5100452	Statement	)	1440:31:49096:49096	5100428	12	True				
ANR	5100453	Statement	fn_Sd_get_info	1440:33:49098:49111	5100428	13	True				
ANR	5100454	Statement	","	1440:47:49112:49112	5100428	14	True				
ANR	5100455	Statement	(	1441:12:49126:49126	5100428	15	True				
ANR	5100456	Statement	fn_get_params_proc_t	1441:13:49127:49146	5100428	16	True				
ANR	5100457	Statement	)	1441:33:49147:49147	5100428	17	True				
ANR	5100458	Statement	fn_Sd_get_params	1441:35:49149:49164	5100428	18	True				
ANR	5100459	Statement	","	1441:51:49165:49165	5100428	19	True				
ANR	5100460	Statement	(	1442:12:49179:49179	5100428	20	True				
ANR	5100461	Statement	fn_make_scaled_proc_t	1442:13:49180:49200	5100428	21	True				
ANR	5100462	Statement	)	1442:34:49201:49201	5100428	22	True				
ANR	5100463	Statement	fn_Sd_make_scaled	1442:36:49203:49219	5100428	23	True				
ANR	5100464	Statement	","	1442:53:49220:49220	5100428	24	True				
ANR	5100465	Statement	(	1443:12:49234:49234	5100428	25	True				
ANR	5100466	Statement	fn_free_params_proc_t	1443:13:49235:49255	5100428	26	True				
ANR	5100467	Statement	)	1443:34:49256:49256	5100428	27	True				
ANR	5100468	Statement	gs_function_Sd_free_params	1443:36:49258:49283	5100428	28	True				
ANR	5100469	Statement	","	1443:62:49284:49284	5100428	29	True				
ANR	5100470	Statement	fn_common_free	1444:12:49298:49311	5100428	30	True				
ANR	5100471	Statement	","	1444:26:49312:49312	5100428	31	True				
ANR	5100472	Statement	(	1445:12:49326:49326	5100428	32	True				
ANR	5100473	Statement	fn_serialize_proc_t	1445:13:49327:49345	5100428	33	True				
ANR	5100474	Statement	)	1445:32:49346:49346	5100428	34	True				
ANR	5100475	Statement	gs_function_Sd_serialize	1445:34:49348:49371	5100428	35	True				
ANR	5100476	Statement	","	1445:58:49372:49372	5100428	36	True				
ANR	5100477	ExpressionStatement		1447:5:49389:49389	5100428	6	True				
ANR	5100478	IdentifierDeclStatement	int code ;	1448:4:49395:49403	5100428	7	True				
ANR	5100479	IdentifierDecl	code		5100428	0					
ANR	5100480	IdentifierDeclType	int		5100428	0					
ANR	5100481	Identifier	code		5100428	1					
ANR	5100482	IdentifierDeclStatement	int i ;	1449:4:49409:49414	5100428	8	True				
ANR	5100483	IdentifierDecl	i		5100428	0					
ANR	5100484	IdentifierDeclType	int		5100428	0					
ANR	5100485	Identifier	i		5100428	1					
ANR	5100486	ExpressionStatement	* ppfn = 0	1451:4:49421:49430	5100428	9	True				
ANR	5100487	AssignmentExpression	* ppfn = 0		5100428	0		=			
ANR	5100488	UnaryOperationExpression	* ppfn		5100428	0					
ANR	5100489	UnaryOperator	*		5100428	0					
ANR	5100490	Identifier	ppfn		5100428	1					
ANR	5100491	PrimaryExpression	0		5100428	1					
ANR	5100492	ExpressionStatement	"code = fn_check_mnDR ( ( const gs_function_params_t * ) params , params -> m , params -> n )"	1452:4:49461:49566	5100428	10	True				
ANR	5100493	AssignmentExpression	"code = fn_check_mnDR ( ( const gs_function_params_t * ) params , params -> m , params -> n )"		5100428	0		=			
ANR	5100494	Identifier	code		5100428	0					
ANR	5100495	CallExpression	"fn_check_mnDR ( ( const gs_function_params_t * ) params , params -> m , params -> n )"		5100428	1					
ANR	5100496	Callee	fn_check_mnDR		5100428	0					
ANR	5100497	Identifier	fn_check_mnDR		5100428	0					
ANR	5100498	ArgumentList	( const gs_function_params_t * ) params		5100428	1					
ANR	5100499	Argument	( const gs_function_params_t * ) params		5100428	0					
ANR	5100500	CastExpression	( const gs_function_params_t * ) params		5100428	0					
ANR	5100501	CastTarget	const gs_function_params_t *		5100428	0					
ANR	5100502	Identifier	params		5100428	1					
ANR	5100503	Argument	params -> m		5100428	1					
ANR	5100504	PtrMemberAccess	params -> m		5100428	0					
ANR	5100505	Identifier	params		5100428	0					
ANR	5100506	Identifier	m		5100428	1					
ANR	5100507	Argument	params -> n		5100428	2					
ANR	5100508	PtrMemberAccess	params -> n		5100428	0					
ANR	5100509	Identifier	params		5100428	0					
ANR	5100510	Identifier	n		5100428	1					
ANR	5100511	IfStatement	if ( code < 0 )		5100428	11					
ANR	5100512	Condition	code < 0	1454:8:49576:49583	5100428	0	True				
ANR	5100513	RelationalExpression	code < 0		5100428	0		<			
ANR	5100514	Identifier	code		5100428	0					
ANR	5100515	PrimaryExpression	0		5100428	1					
ANR	5100516	ReturnStatement	return code ;	1455:8:49594:49605	5100428	1	True				
ANR	5100517	Identifier	code		5100428	0					
ANR	5100518	IfStatement	if ( params -> m > max_Sd_m )		5100428	12					
ANR	5100519	Condition	params -> m > max_Sd_m	1456:8:49615:49634	5100428	0	True				
ANR	5100520	RelationalExpression	params -> m > max_Sd_m		5100428	0		>			
ANR	5100521	PtrMemberAccess	params -> m		5100428	0					
ANR	5100522	Identifier	params		5100428	0					
ANR	5100523	Identifier	m		5100428	1					
ANR	5100524	Identifier	max_Sd_m		5100428	1					
ANR	5100525	ExpressionStatement	return_error ( gs_error_limitcheck )	1457:8:49645:49678	5100428	1	True				
ANR	5100526	CallExpression	return_error ( gs_error_limitcheck )		5100428	0					
ANR	5100527	Callee	return_error		5100428	0					
ANR	5100528	Identifier	return_error		5100428	0					
ANR	5100529	ArgumentList	gs_error_limitcheck		5100428	1					
ANR	5100530	Argument	gs_error_limitcheck		5100428	0					
ANR	5100531	Identifier	gs_error_limitcheck		5100428	0					
ANR	5100532	SwitchStatement	switch ( params -> Order )		5100428	13					
ANR	5100533	Condition	params -> Order	1458:12:49692:49704	5100428	0	True				
ANR	5100534	PtrMemberAccess	params -> Order		5100428	0					
ANR	5100535	Identifier	params		5100428	0					
ANR	5100536	Identifier	Order		5100428	1					
ANR	5100537	CompoundStatement		25:27:847:847	5100428	1					
ANR	5100538	Label	case 0 :	1459:8:49717:49723	5100428	0	True				
ANR	5100539	Label	case 1 :	1460:8:49752:49758	5100428	1	True				
ANR	5100540	Label	case 3 :	1461:8:49768:49774	5100428	2	True				
ANR	5100541	BreakStatement	break ;	1462:12:49788:49793	5100428	3	True				
ANR	5100542	Label	default :	1463:8:49803:49810	5100428	4	True				
ANR	5100543	Identifier	default		5100428	0					
ANR	5100544	ExpressionStatement	return_error ( gs_error_rangecheck )	1464:12:49824:49857	5100428	5	True				
ANR	5100545	CallExpression	return_error ( gs_error_rangecheck )		5100428	0					
ANR	5100546	Callee	return_error		5100428	0					
ANR	5100547	Identifier	return_error		5100428	0					
ANR	5100548	ArgumentList	gs_error_rangecheck		5100428	1					
ANR	5100549	Argument	gs_error_rangecheck		5100428	0					
ANR	5100550	Identifier	gs_error_rangecheck		5100428	0					
ANR	5100551	SwitchStatement	switch ( params -> BitsPerSample )		5100428	14					
ANR	5100552	Condition	params -> BitsPerSample	1466:12:49877:49897	5100428	0	True				
ANR	5100553	PtrMemberAccess	params -> BitsPerSample		5100428	0					
ANR	5100554	Identifier	params		5100428	0					
ANR	5100555	Identifier	BitsPerSample		5100428	1					
ANR	5100556	CompoundStatement		33:35:1040:1040	5100428	1					
ANR	5100557	Label	case 1 :	1467:8:49910:49916	5100428	0	True				
ANR	5100558	Label	case 2 :	1468:8:49926:49932	5100428	1	True				
ANR	5100559	Label	case 4 :	1469:8:49942:49948	5100428	2	True				
ANR	5100560	Label	case 8 :	1470:8:49958:49964	5100428	3	True				
ANR	5100561	Label	case 12 :	1471:8:49974:49981	5100428	4	True				
ANR	5100562	Label	case 16 :	1472:8:49991:49998	5100428	5	True				
ANR	5100563	Label	case 24 :	1473:8:50008:50015	5100428	6	True				
ANR	5100564	Label	case 32 :	1474:8:50025:50032	5100428	7	True				
ANR	5100565	BreakStatement	break ;	1475:12:50046:50051	5100428	8	True				
ANR	5100566	Label	default :	1476:8:50061:50068	5100428	9	True				
ANR	5100567	Identifier	default		5100428	0					
ANR	5100568	ExpressionStatement	return_error ( gs_error_rangecheck )	1477:12:50082:50115	5100428	10	True				
ANR	5100569	CallExpression	return_error ( gs_error_rangecheck )		5100428	0					
ANR	5100570	Callee	return_error		5100428	0					
ANR	5100571	Identifier	return_error		5100428	0					
ANR	5100572	ArgumentList	gs_error_rangecheck		5100428	1					
ANR	5100573	Argument	gs_error_rangecheck		5100428	0					
ANR	5100574	Identifier	gs_error_rangecheck		5100428	0					
ANR	5100575	ForStatement	for ( i = 0 ; i < params -> m ; ++ i )		5100428	15					
ANR	5100576	ForInit	i = 0 ;	1479:9:50132:50137	5100428	0	True				
ANR	5100577	AssignmentExpression	i = 0		5100428	0		=			
ANR	5100578	Identifier	i		5100428	0					
ANR	5100579	PrimaryExpression	0		5100428	1					
ANR	5100580	Condition	i < params -> m	1479:16:50139:50151	5100428	1	True				
ANR	5100581	RelationalExpression	i < params -> m		5100428	0		<			
ANR	5100582	Identifier	i		5100428	0					
ANR	5100583	PtrMemberAccess	params -> m		5100428	1					
ANR	5100584	Identifier	params		5100428	0					
ANR	5100585	Identifier	m		5100428	1					
ANR	5100586	UnaryExpression	++ i	1479:31:50154:50156	5100428	2	True				
ANR	5100587	IncDec	++		5100428	0					
ANR	5100588	Identifier	i		5100428	1					
ANR	5100589	IfStatement	if ( params -> Size [ i ] <= 0 )		5100428	3					
ANR	5100590	Condition	params -> Size [ i ] <= 0	1480:12:50171:50190	5100428	0	True				
ANR	5100591	RelationalExpression	params -> Size [ i ] <= 0		5100428	0		<=			
ANR	5100592	ArrayIndexing	params -> Size [ i ]		5100428	0					
ANR	5100593	PtrMemberAccess	params -> Size		5100428	0					
ANR	5100594	Identifier	params		5100428	0					
ANR	5100595	Identifier	Size		5100428	1					
ANR	5100596	Identifier	i		5100428	1					
ANR	5100597	PrimaryExpression	0		5100428	1					
ANR	5100598	ExpressionStatement	return_error ( gs_error_rangecheck )	1481:12:50205:50238	5100428	1	True				
ANR	5100599	CallExpression	return_error ( gs_error_rangecheck )		5100428	0					
ANR	5100600	Callee	return_error		5100428	0					
ANR	5100601	Identifier	return_error		5100428	0					
ANR	5100602	ArgumentList	gs_error_rangecheck		5100428	1					
ANR	5100603	Argument	gs_error_rangecheck		5100428	0					
ANR	5100604	Identifier	gs_error_rangecheck		5100428	0					
ANR	5100605	CompoundStatement		53:8:1546:1571	5100428	16					
ANR	5100606	IdentifierDeclStatement	"gs_function_Sd_t * pfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""gs_function_Sd_init"" ) ;"	1483:8:50254:50396	5100428	0	True				
ANR	5100607	IdentifierDecl	"* pfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""gs_function_Sd_init"" )"		5100428	0					
ANR	5100608	IdentifierDeclType	gs_function_Sd_t *		5100428	0					
ANR	5100609	Identifier	pfn		5100428	1					
ANR	5100610	AssignmentExpression	"* pfn = gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""gs_function_Sd_init"" )"		5100428	2		=			
ANR	5100611	Identifier	pfn		5100428	0					
ANR	5100612	CallExpression	"gs_alloc_struct ( mem , gs_function_Sd_t , & st_function_Sd , ""gs_function_Sd_init"" )"		5100428	1					
ANR	5100613	Callee	gs_alloc_struct		5100428	0					
ANR	5100614	Identifier	gs_alloc_struct		5100428	0					
ANR	5100615	ArgumentList	mem		5100428	1					
ANR	5100616	Argument	mem		5100428	0					
ANR	5100617	Identifier	mem		5100428	0					
ANR	5100618	Argument	gs_function_Sd_t		5100428	1					
ANR	5100619	Identifier	gs_function_Sd_t		5100428	0					
ANR	5100620	Argument	& st_function_Sd		5100428	2					
ANR	5100621	UnaryOperationExpression	& st_function_Sd		5100428	0					
ANR	5100622	UnaryOperator	&		5100428	0					
ANR	5100623	Identifier	st_function_Sd		5100428	1					
ANR	5100624	Argument	"""gs_function_Sd_init"""		5100428	3					
ANR	5100625	PrimaryExpression	"""gs_function_Sd_init"""		5100428	0					
ANR	5100626	IdentifierDeclStatement	"int bps , sa , ss , i , order ;"	1486:8:50406:50431	5100428	1	True				
ANR	5100627	IdentifierDecl	bps		5100428	0					
ANR	5100628	IdentifierDeclType	int		5100428	0					
ANR	5100629	Identifier	bps		5100428	1					
ANR	5100630	IdentifierDecl	sa		5100428	1					
ANR	5100631	IdentifierDeclType	int		5100428	0					
ANR	5100632	Identifier	sa		5100428	1					
ANR	5100633	IdentifierDecl	ss		5100428	2					
ANR	5100634	IdentifierDeclType	int		5100428	0					
ANR	5100635	Identifier	ss		5100428	1					
ANR	5100636	IdentifierDecl	i		5100428	3					
ANR	5100637	IdentifierDeclType	int		5100428	0					
ANR	5100638	Identifier	i		5100428	1					
ANR	5100639	IdentifierDecl	order		5100428	4					
ANR	5100640	IdentifierDeclType	int		5100428	0					
ANR	5100641	Identifier	order		5100428	1					
ANR	5100642	IfStatement	if ( pfn == 0 )		5100428	2					
ANR	5100643	Condition	pfn == 0	1488:12:50446:50453	5100428	0	True				
ANR	5100644	EqualityExpression	pfn == 0		5100428	0		==			
ANR	5100645	Identifier	pfn		5100428	0					
ANR	5100646	PrimaryExpression	0		5100428	1					
ANR	5100647	ExpressionStatement	return_error ( gs_error_VMerror )	1489:12:50468:50498	5100428	1	True				
ANR	5100648	CallExpression	return_error ( gs_error_VMerror )		5100428	0					
ANR	5100649	Callee	return_error		5100428	0					
ANR	5100650	Identifier	return_error		5100428	0					
ANR	5100651	ArgumentList	gs_error_VMerror		5100428	1					
ANR	5100652	Argument	gs_error_VMerror		5100428	0					
ANR	5100653	Identifier	gs_error_VMerror		5100428	0					
ANR	5100654	ExpressionStatement	pfn -> params = * params	1490:8:50508:50529	5100428	3	True				
ANR	5100655	AssignmentExpression	pfn -> params = * params		5100428	0		=			
ANR	5100656	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100657	Identifier	pfn		5100428	0					
ANR	5100658	Identifier	params		5100428	1					
ANR	5100659	UnaryOperationExpression	* params		5100428	1					
ANR	5100660	UnaryOperator	*		5100428	0					
ANR	5100661	Identifier	params		5100428	1					
ANR	5100662	IfStatement	if ( params -> Order == 0 )		5100428	4					
ANR	5100663	Condition	params -> Order == 0	1491:12:50543:50560	5100428	0	True				
ANR	5100664	EqualityExpression	params -> Order == 0		5100428	0		==			
ANR	5100665	PtrMemberAccess	params -> Order		5100428	0					
ANR	5100666	Identifier	params		5100428	0					
ANR	5100667	Identifier	Order		5100428	1					
ANR	5100668	PrimaryExpression	0		5100428	1					
ANR	5100669	ExpressionStatement	pfn -> params . Order = 1	1492:12:50575:50596	5100428	1	True				
ANR	5100670	AssignmentExpression	pfn -> params . Order = 1		5100428	0		=			
ANR	5100671	MemberAccess	pfn -> params . Order		5100428	0					
ANR	5100672	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100673	Identifier	pfn		5100428	0					
ANR	5100674	Identifier	params		5100428	1					
ANR	5100675	Identifier	Order		5100428	1					
ANR	5100676	PrimaryExpression	1		5100428	1					
ANR	5100677	ExpressionStatement	pfn -> params . pole = NULL	1493:8:50620:50643	5100428	5	True				
ANR	5100678	AssignmentExpression	pfn -> params . pole = NULL		5100428	0		=			
ANR	5100679	MemberAccess	pfn -> params . pole		5100428	0					
ANR	5100680	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100681	Identifier	pfn		5100428	0					
ANR	5100682	Identifier	params		5100428	1					
ANR	5100683	Identifier	pole		5100428	1					
ANR	5100684	Identifier	NULL		5100428	1					
ANR	5100685	ExpressionStatement	pfn -> params . array_step = NULL	1494:8:50653:50682	5100428	6	True				
ANR	5100686	AssignmentExpression	pfn -> params . array_step = NULL		5100428	0		=			
ANR	5100687	MemberAccess	pfn -> params . array_step		5100428	0					
ANR	5100688	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100689	Identifier	pfn		5100428	0					
ANR	5100690	Identifier	params		5100428	1					
ANR	5100691	Identifier	array_step		5100428	1					
ANR	5100692	Identifier	NULL		5100428	1					
ANR	5100693	ExpressionStatement	pfn -> params . stream_step = NULL	1495:8:50692:50722	5100428	7	True				
ANR	5100694	AssignmentExpression	pfn -> params . stream_step = NULL		5100428	0		=			
ANR	5100695	MemberAccess	pfn -> params . stream_step		5100428	0					
ANR	5100696	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100697	Identifier	pfn		5100428	0					
ANR	5100698	Identifier	params		5100428	1					
ANR	5100699	Identifier	stream_step		5100428	1					
ANR	5100700	Identifier	NULL		5100428	1					
ANR	5100701	ExpressionStatement	pfn -> head = function_Sd_head	1496:8:50732:50760	5100428	8	True				
ANR	5100702	AssignmentExpression	pfn -> head = function_Sd_head		5100428	0		=			
ANR	5100703	PtrMemberAccess	pfn -> head		5100428	0					
ANR	5100704	Identifier	pfn		5100428	0					
ANR	5100705	Identifier	head		5100428	1					
ANR	5100706	Identifier	function_Sd_head		5100428	1					
ANR	5100707	ExpressionStatement	pfn -> params . array_size = 0	1497:8:50770:50796	5100428	9	True				
ANR	5100708	AssignmentExpression	pfn -> params . array_size = 0		5100428	0		=			
ANR	5100709	MemberAccess	pfn -> params . array_size		5100428	0					
ANR	5100710	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100711	Identifier	pfn		5100428	0					
ANR	5100712	Identifier	params		5100428	1					
ANR	5100713	Identifier	array_size		5100428	1					
ANR	5100714	PrimaryExpression	0		5100428	1					
ANR	5100715	IfStatement	if ( pfn -> params . m == 1 && pfn -> params . Order == 1 && pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg )		5100428	10					
ANR	5100716	Condition	pfn -> params . m == 1 && pfn -> params . Order == 1 && pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg	1498:12:50810:50906	5100428	0	True				
ANR	5100717	AndExpression	pfn -> params . m == 1 && pfn -> params . Order == 1 && pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg		5100428	0		&&			
ANR	5100718	EqualityExpression	pfn -> params . m == 1		5100428	0		==			
ANR	5100719	MemberAccess	pfn -> params . m		5100428	0					
ANR	5100720	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100721	Identifier	pfn		5100428	0					
ANR	5100722	Identifier	params		5100428	1					
ANR	5100723	Identifier	m		5100428	1					
ANR	5100724	PrimaryExpression	1		5100428	1					
ANR	5100725	AndExpression	pfn -> params . Order == 1 && pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg		5100428	1		&&			
ANR	5100726	EqualityExpression	pfn -> params . Order == 1		5100428	0		==			
ANR	5100727	MemberAccess	pfn -> params . Order		5100428	0					
ANR	5100728	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100729	Identifier	pfn		5100428	0					
ANR	5100730	Identifier	params		5100428	1					
ANR	5100731	Identifier	Order		5100428	1					
ANR	5100732	PrimaryExpression	1		5100428	1					
ANR	5100733	AndExpression	pfn -> params . n <= MAX_FAST_COMPS && ! DEBUG_Sd_1arg		5100428	1		&&			
ANR	5100734	RelationalExpression	pfn -> params . n <= MAX_FAST_COMPS		5100428	0		<=			
ANR	5100735	MemberAccess	pfn -> params . n		5100428	0					
ANR	5100736	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100737	Identifier	pfn		5100428	0					
ANR	5100738	Identifier	params		5100428	1					
ANR	5100739	Identifier	n		5100428	1					
ANR	5100740	Identifier	MAX_FAST_COMPS		5100428	1					
ANR	5100741	UnaryOperationExpression	! DEBUG_Sd_1arg		5100428	1					
ANR	5100742	UnaryOperator	!		5100428	0					
ANR	5100743	Identifier	DEBUG_Sd_1arg		5100428	1					
ANR	5100744	CompoundStatement		65:111:2049:2049	5100428	1					
ANR	5100745	ElseStatement	else		5100428	0					
ANR	5100746	CompoundStatement		67:15:2148:2148	5100428	0					
ANR	5100747	ExpressionStatement	"pfn -> params . array_step = ( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"	1501:12:51022:51160	5100428	0	True				
ANR	5100748	AssignmentExpression	"pfn -> params . array_step = ( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		5100428	0		=			
ANR	5100749	MemberAccess	pfn -> params . array_step		5100428	0					
ANR	5100750	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100751	Identifier	pfn		5100428	0					
ANR	5100752	Identifier	params		5100428	1					
ANR	5100753	Identifier	array_step		5100428	1					
ANR	5100754	CastExpression	"( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		5100428	1					
ANR	5100755	CastTarget	int *		5100428	0					
ANR	5100756	CallExpression	"gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		5100428	1					
ANR	5100757	Callee	gs_alloc_byte_array		5100428	0					
ANR	5100758	Identifier	gs_alloc_byte_array		5100428	0					
ANR	5100759	ArgumentList	mem		5100428	1					
ANR	5100760	Argument	mem		5100428	0					
ANR	5100761	Identifier	mem		5100428	0					
ANR	5100762	Argument	max_Sd_m		5100428	1					
ANR	5100763	Identifier	max_Sd_m		5100428	0					
ANR	5100764	Argument	sizeof ( int )		5100428	2					
ANR	5100765	SizeofExpression	sizeof ( int )		5100428	0					
ANR	5100766	Sizeof	sizeof		5100428	0					
ANR	5100767	SizeofOperand	int		5100428	1					
ANR	5100768	Argument	"""gs_function_Sd_init"""		5100428	3					
ANR	5100769	PrimaryExpression	"""gs_function_Sd_init"""		5100428	0					
ANR	5100770	ExpressionStatement	"pfn -> params . stream_step = ( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"	1503:12:51174:51313	5100428	1	True				
ANR	5100771	AssignmentExpression	"pfn -> params . stream_step = ( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		5100428	0		=			
ANR	5100772	MemberAccess	pfn -> params . stream_step		5100428	0					
ANR	5100773	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100774	Identifier	pfn		5100428	0					
ANR	5100775	Identifier	params		5100428	1					
ANR	5100776	Identifier	stream_step		5100428	1					
ANR	5100777	CastExpression	"( int * ) gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		5100428	1					
ANR	5100778	CastTarget	int *		5100428	0					
ANR	5100779	CallExpression	"gs_alloc_byte_array ( mem , max_Sd_m , sizeof ( int ) , ""gs_function_Sd_init"" )"		5100428	1					
ANR	5100780	Callee	gs_alloc_byte_array		5100428	0					
ANR	5100781	Identifier	gs_alloc_byte_array		5100428	0					
ANR	5100782	ArgumentList	mem		5100428	1					
ANR	5100783	Argument	mem		5100428	0					
ANR	5100784	Identifier	mem		5100428	0					
ANR	5100785	Argument	max_Sd_m		5100428	1					
ANR	5100786	Identifier	max_Sd_m		5100428	0					
ANR	5100787	Argument	sizeof ( int )		5100428	2					
ANR	5100788	SizeofExpression	sizeof ( int )		5100428	0					
ANR	5100789	Sizeof	sizeof		5100428	0					
ANR	5100790	SizeofOperand	int		5100428	1					
ANR	5100791	Argument	"""gs_function_Sd_init"""		5100428	3					
ANR	5100792	PrimaryExpression	"""gs_function_Sd_init"""		5100428	0					
ANR	5100793	IfStatement	if ( pfn -> params . array_step == NULL || pfn -> params . stream_step == NULL )		5100428	2					
ANR	5100794	Condition	pfn -> params . array_step == NULL || pfn -> params . stream_step == NULL	1505:16:51331:51395	5100428	0	True				
ANR	5100795	OrExpression	pfn -> params . array_step == NULL || pfn -> params . stream_step == NULL		5100428	0		||			
ANR	5100796	EqualityExpression	pfn -> params . array_step == NULL		5100428	0		==			
ANR	5100797	MemberAccess	pfn -> params . array_step		5100428	0					
ANR	5100798	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100799	Identifier	pfn		5100428	0					
ANR	5100800	Identifier	params		5100428	1					
ANR	5100801	Identifier	array_step		5100428	1					
ANR	5100802	Identifier	NULL		5100428	1					
ANR	5100803	EqualityExpression	pfn -> params . stream_step == NULL		5100428	1		==			
ANR	5100804	MemberAccess	pfn -> params . stream_step		5100428	0					
ANR	5100805	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100806	Identifier	pfn		5100428	0					
ANR	5100807	Identifier	params		5100428	1					
ANR	5100808	Identifier	stream_step		5100428	1					
ANR	5100809	Identifier	NULL		5100428	1					
ANR	5100810	ExpressionStatement	return_error ( gs_error_VMerror )	1506:16:51414:51444	5100428	1	True				
ANR	5100811	CallExpression	return_error ( gs_error_VMerror )		5100428	0					
ANR	5100812	Callee	return_error		5100428	0					
ANR	5100813	Identifier	return_error		5100428	0					
ANR	5100814	ArgumentList	gs_error_VMerror		5100428	1					
ANR	5100815	Argument	gs_error_VMerror		5100428	0					
ANR	5100816	Identifier	gs_error_VMerror		5100428	0					
ANR	5100817	ExpressionStatement	bps = pfn -> params . BitsPerSample	1507:12:51458:51489	5100428	3	True				
ANR	5100818	AssignmentExpression	bps = pfn -> params . BitsPerSample		5100428	0		=			
ANR	5100819	Identifier	bps		5100428	0					
ANR	5100820	MemberAccess	pfn -> params . BitsPerSample		5100428	1					
ANR	5100821	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100822	Identifier	pfn		5100428	0					
ANR	5100823	Identifier	params		5100428	1					
ANR	5100824	Identifier	BitsPerSample		5100428	1					
ANR	5100825	ExpressionStatement	sa = pfn -> params . n	1508:12:51503:51521	5100428	4	True				
ANR	5100826	AssignmentExpression	sa = pfn -> params . n		5100428	0		=			
ANR	5100827	Identifier	sa		5100428	0					
ANR	5100828	MemberAccess	pfn -> params . n		5100428	1					
ANR	5100829	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100830	Identifier	pfn		5100428	0					
ANR	5100831	Identifier	params		5100428	1					
ANR	5100832	Identifier	n		5100428	1					
ANR	5100833	ExpressionStatement	ss = pfn -> params . n * bps	1509:12:51535:51559	5100428	5	True				
ANR	5100834	AssignmentExpression	ss = pfn -> params . n * bps		5100428	0		=			
ANR	5100835	Identifier	ss		5100428	0					
ANR	5100836	MultiplicativeExpression	pfn -> params . n * bps		5100428	1		*			
ANR	5100837	MemberAccess	pfn -> params . n		5100428	0					
ANR	5100838	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100839	Identifier	pfn		5100428	0					
ANR	5100840	Identifier	params		5100428	1					
ANR	5100841	Identifier	n		5100428	1					
ANR	5100842	Identifier	bps		5100428	1					
ANR	5100843	ExpressionStatement	order = pfn -> params . Order	1510:12:51573:51598	5100428	6	True				
ANR	5100844	AssignmentExpression	order = pfn -> params . Order		5100428	0		=			
ANR	5100845	Identifier	order		5100428	0					
ANR	5100846	MemberAccess	pfn -> params . Order		5100428	1					
ANR	5100847	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100848	Identifier	pfn		5100428	0					
ANR	5100849	Identifier	params		5100428	1					
ANR	5100850	Identifier	Order		5100428	1					
ANR	5100851	ForStatement	for ( i = 0 ; i < pfn -> params . m ; i ++ )		5100428	7					
ANR	5100852	ForInit	i = 0 ;	1511:17:51617:51622	5100428	0	True				
ANR	5100853	AssignmentExpression	i = 0		5100428	0		=			
ANR	5100854	Identifier	i		5100428	0					
ANR	5100855	PrimaryExpression	0		5100428	1					
ANR	5100856	Condition	i < pfn -> params . m	1511:24:51624:51640	5100428	1	True				
ANR	5100857	RelationalExpression	i < pfn -> params . m		5100428	0		<			
ANR	5100858	Identifier	i		5100428	0					
ANR	5100859	MemberAccess	pfn -> params . m		5100428	1					
ANR	5100860	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100861	Identifier	pfn		5100428	0					
ANR	5100862	Identifier	params		5100428	1					
ANR	5100863	Identifier	m		5100428	1					
ANR	5100864	PostIncDecOperationExpression	i ++	1511:43:51643:51645	5100428	2	True				
ANR	5100865	Identifier	i		5100428	0					
ANR	5100866	IncDec	++		5100428	1					
ANR	5100867	CompoundStatement		78:48:2788:2788	5100428	3					
ANR	5100868	ExpressionStatement	pfn -> params . array_step [ i ] = sa * order	1512:16:51666:51704	5100428	0	True				
ANR	5100869	AssignmentExpression	pfn -> params . array_step [ i ] = sa * order		5100428	0		=			
ANR	5100870	ArrayIndexing	pfn -> params . array_step [ i ]		5100428	0					
ANR	5100871	MemberAccess	pfn -> params . array_step		5100428	0					
ANR	5100872	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100873	Identifier	pfn		5100428	0					
ANR	5100874	Identifier	params		5100428	1					
ANR	5100875	Identifier	array_step		5100428	1					
ANR	5100876	Identifier	i		5100428	1					
ANR	5100877	MultiplicativeExpression	sa * order		5100428	1		*			
ANR	5100878	Identifier	sa		5100428	0					
ANR	5100879	Identifier	order		5100428	1					
ANR	5100880	ExpressionStatement	sa = ( pfn -> params . Size [ i ] * order - ( order - 1 ) ) * sa	1513:16:51722:51775	5100428	1	True				
ANR	5100881	AssignmentExpression	sa = ( pfn -> params . Size [ i ] * order - ( order - 1 ) ) * sa		5100428	0		=			
ANR	5100882	Identifier	sa		5100428	0					
ANR	5100883	MultiplicativeExpression	( pfn -> params . Size [ i ] * order - ( order - 1 ) ) * sa		5100428	1		*			
ANR	5100884	AdditiveExpression	pfn -> params . Size [ i ] * order - ( order - 1 )		5100428	0		-			
ANR	5100885	MultiplicativeExpression	pfn -> params . Size [ i ] * order		5100428	0		*			
ANR	5100886	ArrayIndexing	pfn -> params . Size [ i ]		5100428	0					
ANR	5100887	MemberAccess	pfn -> params . Size		5100428	0					
ANR	5100888	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100889	Identifier	pfn		5100428	0					
ANR	5100890	Identifier	params		5100428	1					
ANR	5100891	Identifier	Size		5100428	1					
ANR	5100892	Identifier	i		5100428	1					
ANR	5100893	Identifier	order		5100428	1					
ANR	5100894	AdditiveExpression	order - 1		5100428	1		-			
ANR	5100895	Identifier	order		5100428	0					
ANR	5100896	PrimaryExpression	1		5100428	1					
ANR	5100897	Identifier	sa		5100428	1					
ANR	5100898	ExpressionStatement	pfn -> params . stream_step [ i ] = ss	1514:16:51793:51824	5100428	2	True				
ANR	5100899	AssignmentExpression	pfn -> params . stream_step [ i ] = ss		5100428	0		=			
ANR	5100900	ArrayIndexing	pfn -> params . stream_step [ i ]		5100428	0					
ANR	5100901	MemberAccess	pfn -> params . stream_step		5100428	0					
ANR	5100902	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100903	Identifier	pfn		5100428	0					
ANR	5100904	Identifier	params		5100428	1					
ANR	5100905	Identifier	stream_step		5100428	1					
ANR	5100906	Identifier	i		5100428	1					
ANR	5100907	Identifier	ss		5100428	1					
ANR	5100908	ExpressionStatement	ss = pfn -> params . Size [ i ] * ss	1515:16:51842:51871	5100428	3	True				
ANR	5100909	AssignmentExpression	ss = pfn -> params . Size [ i ] * ss		5100428	0		=			
ANR	5100910	Identifier	ss		5100428	0					
ANR	5100911	MultiplicativeExpression	pfn -> params . Size [ i ] * ss		5100428	1		*			
ANR	5100912	ArrayIndexing	pfn -> params . Size [ i ]		5100428	0					
ANR	5100913	MemberAccess	pfn -> params . Size		5100428	0					
ANR	5100914	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100915	Identifier	pfn		5100428	0					
ANR	5100916	Identifier	params		5100428	1					
ANR	5100917	Identifier	Size		5100428	1					
ANR	5100918	Identifier	i		5100428	1					
ANR	5100919	Identifier	ss		5100428	1					
ANR	5100920	ExpressionStatement	"pfn -> params . pole = ( double * ) gs_alloc_byte_array ( mem , sa , sizeof ( double ) , ""gs_function_Sd_init"" )"	1517:12:51899:52031	5100428	8	True				
ANR	5100921	AssignmentExpression	"pfn -> params . pole = ( double * ) gs_alloc_byte_array ( mem , sa , sizeof ( double ) , ""gs_function_Sd_init"" )"		5100428	0		=			
ANR	5100922	MemberAccess	pfn -> params . pole		5100428	0					
ANR	5100923	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100924	Identifier	pfn		5100428	0					
ANR	5100925	Identifier	params		5100428	1					
ANR	5100926	Identifier	pole		5100428	1					
ANR	5100927	CastExpression	"( double * ) gs_alloc_byte_array ( mem , sa , sizeof ( double ) , ""gs_function_Sd_init"" )"		5100428	1					
ANR	5100928	CastTarget	double *		5100428	0					
ANR	5100929	CallExpression	"gs_alloc_byte_array ( mem , sa , sizeof ( double ) , ""gs_function_Sd_init"" )"		5100428	1					
ANR	5100930	Callee	gs_alloc_byte_array		5100428	0					
ANR	5100931	Identifier	gs_alloc_byte_array		5100428	0					
ANR	5100932	ArgumentList	mem		5100428	1					
ANR	5100933	Argument	mem		5100428	0					
ANR	5100934	Identifier	mem		5100428	0					
ANR	5100935	Argument	sa		5100428	1					
ANR	5100936	Identifier	sa		5100428	0					
ANR	5100937	Argument	sizeof ( double )		5100428	2					
ANR	5100938	SizeofExpression	sizeof ( double )		5100428	0					
ANR	5100939	Sizeof	sizeof		5100428	0					
ANR	5100940	SizeofOperand	double		5100428	1					
ANR	5100941	Argument	"""gs_function_Sd_init"""		5100428	3					
ANR	5100942	PrimaryExpression	"""gs_function_Sd_init"""		5100428	0					
ANR	5100943	IfStatement	if ( pfn -> params . pole == NULL )		5100428	9					
ANR	5100944	Condition	pfn -> params . pole == NULL	1519:16:52049:52072	5100428	0	True				
ANR	5100945	EqualityExpression	pfn -> params . pole == NULL		5100428	0		==			
ANR	5100946	MemberAccess	pfn -> params . pole		5100428	0					
ANR	5100947	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100948	Identifier	pfn		5100428	0					
ANR	5100949	Identifier	params		5100428	1					
ANR	5100950	Identifier	pole		5100428	1					
ANR	5100951	Identifier	NULL		5100428	1					
ANR	5100952	ExpressionStatement	return_error ( gs_error_VMerror )	1520:16:52091:52121	5100428	1	True				
ANR	5100953	CallExpression	return_error ( gs_error_VMerror )		5100428	0					
ANR	5100954	Callee	return_error		5100428	0					
ANR	5100955	Identifier	return_error		5100428	0					
ANR	5100956	ArgumentList	gs_error_VMerror		5100428	1					
ANR	5100957	Argument	gs_error_VMerror		5100428	0					
ANR	5100958	Identifier	gs_error_VMerror		5100428	0					
ANR	5100959	ForStatement	for ( i = 0 ; i < sa ; i ++ )		5100428	10					
ANR	5100960	ForInit	i = 0 ;	1521:17:52140:52145	5100428	0	True				
ANR	5100961	AssignmentExpression	i = 0		5100428	0		=			
ANR	5100962	Identifier	i		5100428	0					
ANR	5100963	PrimaryExpression	0		5100428	1					
ANR	5100964	Condition	i < sa	1521:24:52147:52152	5100428	1	True				
ANR	5100965	RelationalExpression	i < sa		5100428	0		<			
ANR	5100966	Identifier	i		5100428	0					
ANR	5100967	Identifier	sa		5100428	1					
ANR	5100968	PostIncDecOperationExpression	i ++	1521:32:52155:52157	5100428	2	True				
ANR	5100969	Identifier	i		5100428	0					
ANR	5100970	IncDec	++		5100428	1					
ANR	5100971	ExpressionStatement	pfn -> params . pole [ i ] = double_stub	1522:16:52176:52209	5100428	3	True				
ANR	5100972	AssignmentExpression	pfn -> params . pole [ i ] = double_stub		5100428	0		=			
ANR	5100973	ArrayIndexing	pfn -> params . pole [ i ]		5100428	0					
ANR	5100974	MemberAccess	pfn -> params . pole		5100428	0					
ANR	5100975	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100976	Identifier	pfn		5100428	0					
ANR	5100977	Identifier	params		5100428	1					
ANR	5100978	Identifier	pole		5100428	1					
ANR	5100979	Identifier	i		5100428	1					
ANR	5100980	Identifier	double_stub		5100428	1					
ANR	5100981	ExpressionStatement	pfn -> params . array_size = sa	1523:12:52223:52250	5100428	11	True				
ANR	5100982	AssignmentExpression	pfn -> params . array_size = sa		5100428	0		=			
ANR	5100983	MemberAccess	pfn -> params . array_size		5100428	0					
ANR	5100984	PtrMemberAccess	pfn -> params		5100428	0					
ANR	5100985	Identifier	pfn		5100428	0					
ANR	5100986	Identifier	params		5100428	1					
ANR	5100987	Identifier	array_size		5100428	1					
ANR	5100988	Identifier	sa		5100428	1					
ANR	5100989	ExpressionStatement	* ppfn = ( gs_function_t * ) pfn	1525:8:52270:52299	5100428	11	True				
ANR	5100990	AssignmentExpression	* ppfn = ( gs_function_t * ) pfn		5100428	0		=			
ANR	5100991	UnaryOperationExpression	* ppfn		5100428	0					
ANR	5100992	UnaryOperator	*		5100428	0					
ANR	5100993	Identifier	ppfn		5100428	1					
ANR	5100994	CastExpression	( gs_function_t * ) pfn		5100428	1					
ANR	5100995	CastTarget	gs_function_t *		5100428	0					
ANR	5100996	Identifier	pfn		5100428	1					
ANR	5100997	ReturnStatement	return 0 ;	1527:4:52311:52319	5100428	17	True				
ANR	5100998	PrimaryExpression	0		5100428	0					
ANR	5100999	ReturnType	int		5100428	1					
ANR	5101000	Identifier	gs_function_Sd_init		5100428	2					
ANR	5101001	ParameterList	"gs_function_t * * ppfn , const gs_function_Sd_params_t * params , gs_memory_t * mem"		5100428	3					
ANR	5101002	Parameter	gs_function_t * * ppfn	1432:20:48759:48779	5100428	0	True				
ANR	5101003	ParameterType	gs_function_t * *		5100428	0					
ANR	5101004	Identifier	ppfn		5100428	1					
ANR	5101005	Parameter	const gs_function_Sd_params_t * params	1433:18:48800:48837	5100428	1	True				
ANR	5101006	ParameterType	const gs_function_Sd_params_t *		5100428	0					
ANR	5101007	Identifier	params		5100428	1					
ANR	5101008	Parameter	gs_memory_t * mem	1433:58:48840:48856	5100428	2	True				
ANR	5101009	ParameterType	gs_memory_t *		5100428	0					
ANR	5101010	Identifier	mem		5100428	1					
ANR	5101011	CFGEntryNode	ENTRY		5100428		True				
ANR	5101012	CFGExitNode	EXIT		5100428		True				
ANR	5101013	Symbol	MAX_FAST_COMPS		5100428						
ANR	5101014	Symbol	params -> BitsPerSample		5100428						
ANR	5101015	Symbol	pfn -> params . Size		5100428						
ANR	5101016	Symbol	gs_error_rangecheck		5100428						
ANR	5101017	Symbol	* * params		5100428						
ANR	5101018	Symbol	* * pfn		5100428						
ANR	5101019	Symbol	pfn -> params . pole		5100428						
ANR	5101020	Symbol	pfn -> head		5100428						
ANR	5101021	Symbol	pfn -> params . Order		5100428						
ANR	5101022	Symbol	pfn -> params . array_step		5100428						
ANR	5101023	Symbol	pfn -> params . BitsPerSample		5100428						
ANR	5101024	Symbol	* pfn -> params . stream_step		5100428						
ANR	5101025	Symbol	order		5100428						
ANR	5101026	Symbol	* pfn		5100428						
ANR	5101027	Symbol	NULL		5100428						
ANR	5101028	Symbol	function_Sd_head		5100428						
ANR	5101029	Symbol	DEBUG_Sd_1arg		5100428						
ANR	5101030	Symbol	params		5100428						
ANR	5101031	Symbol	* pfn -> params . pole		5100428						
ANR	5101032	Symbol	pfn		5100428						
ANR	5101033	Symbol	* pfn -> params		5100428						
ANR	5101034	Symbol	pfn -> params . m		5100428						
ANR	5101035	Symbol	code		5100428						
ANR	5101036	Symbol	pfn -> params . n		5100428						
ANR	5101037	Symbol	params -> Order		5100428						
ANR	5101038	Symbol	gs_alloc_struct		5100428						
ANR	5101039	Symbol	pfn -> params . array_size		5100428						
ANR	5101040	Symbol	sa		5100428						
ANR	5101041	Symbol	double_stub		5100428						
ANR	5101042	Symbol	params -> m		5100428						
ANR	5101043	Symbol	params -> n		5100428						
ANR	5101044	Symbol	mem		5100428						
ANR	5101045	Symbol	pfn -> params . stream_step		5100428						
ANR	5101046	Symbol	gs_error_limitcheck		5100428						
ANR	5101047	Symbol	* ppfn		5100428						
ANR	5101048	Symbol	max_Sd_m		5100428						
ANR	5101049	Symbol	params -> Size		5100428						
ANR	5101050	Symbol	* params		5100428						
ANR	5101051	Symbol	ss		5100428						
ANR	5101052	Symbol	* pfn -> params . array_step		5100428						
ANR	5101053	Symbol	fn_check_mnDR		5100428						
ANR	5101054	Symbol	bps		5100428						
ANR	5101055	Symbol	* params -> Size		5100428						
ANR	5101056	Symbol	& st_function_Sd		5100428						
ANR	5101057	Symbol	* pfn -> params . Size		5100428						
ANR	5101058	Symbol	i		5100428						
ANR	5101059	Symbol	gs_error_VMerror		5100428						
ANR	5101060	Symbol	* i		5100428						
ANR	5101061	Symbol	ppfn		5100428						
ANR	5101062	Symbol	gs_alloc_byte_array		5100428						
ANR	5101063	Symbol	gs_function_Sd_t		5100428						
ANR	5101064	Symbol	pfn -> params		5100428						
