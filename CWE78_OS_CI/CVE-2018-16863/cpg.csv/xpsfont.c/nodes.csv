command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	10887819	File	data/converged/CVE-2018-16863_ghostpdl/xpsfont.c								
ANR	10887820	DeclStmt									
ANR	10887821	Decl							void	void ( xps_font_t * font )	xps_load_sfnt_cmap
ANR	10887822	Function	s16	27:0:749:831							
ANR	10887823	FunctionDef	s16 (byte * p)		10887822	0					
ANR	10887824	CompoundStatement		28:0:780:831	10887822	0					
ANR	10887825	ReturnStatement	return ( signed short ) ( ( p [ 0 ] << 8 ) | p [ 1 ] ) ;	29:4:786:829	10887822	0	True				
ANR	10887826	CastExpression	( signed short ) ( ( p [ 0 ] << 8 ) | p [ 1 ] )		10887822	0					
ANR	10887827	CastTarget	signed short		10887822	0					
ANR	10887828	InclusiveOrExpression	( p [ 0 ] << 8 ) | p [ 1 ]		10887822	1		|			
ANR	10887829	ShiftExpression	p [ 0 ] << 8		10887822	0		<<			
ANR	10887830	ArrayIndexing	p [ 0 ]		10887822	0					
ANR	10887831	Identifier	p		10887822	0					
ANR	10887832	PrimaryExpression	0		10887822	1					
ANR	10887833	PrimaryExpression	8		10887822	1					
ANR	10887834	ArrayIndexing	p [ 1 ]		10887822	1					
ANR	10887835	Identifier	p		10887822	0					
ANR	10887836	PrimaryExpression	1		10887822	1					
ANR	10887837	ReturnType	static inline int		10887822	1					
ANR	10887838	Identifier	s16		10887822	2					
ANR	10887839	ParameterList	byte * p		10887822	3					
ANR	10887840	Parameter	byte * p	27:22:771:777	10887822	0	True				
ANR	10887841	ParameterType	byte *		10887822	0					
ANR	10887842	Identifier	p		10887822	1					
ANR	10887843	CFGEntryNode	ENTRY		10887822		True				
ANR	10887844	CFGExitNode	EXIT		10887822		True				
ANR	10887845	Symbol	p		10887822						
ANR	10887846	Symbol	* p		10887822						
ANR	10887847	Function	u16	32:0:834:898							
ANR	10887848	FunctionDef	u16 (byte * p)		10887847	0					
ANR	10887849	CompoundStatement		33:0:865:898	10887847	0					
ANR	10887850	ReturnStatement	return ( p [ 0 ] << 8 ) | p [ 1 ] ;	34:4:871:896	10887847	0	True				
ANR	10887851	InclusiveOrExpression	( p [ 0 ] << 8 ) | p [ 1 ]		10887847	0		|			
ANR	10887852	ShiftExpression	p [ 0 ] << 8		10887847	0		<<			
ANR	10887853	ArrayIndexing	p [ 0 ]		10887847	0					
ANR	10887854	Identifier	p		10887847	0					
ANR	10887855	PrimaryExpression	0		10887847	1					
ANR	10887856	PrimaryExpression	8		10887847	1					
ANR	10887857	ArrayIndexing	p [ 1 ]		10887847	1					
ANR	10887858	Identifier	p		10887847	0					
ANR	10887859	PrimaryExpression	1		10887847	1					
ANR	10887860	ReturnType	static inline int		10887847	1					
ANR	10887861	Identifier	u16		10887847	2					
ANR	10887862	ParameterList	byte * p		10887847	3					
ANR	10887863	Parameter	byte * p	32:22:856:862	10887847	0	True				
ANR	10887864	ParameterType	byte *		10887847	0					
ANR	10887865	Identifier	p		10887847	1					
ANR	10887866	CFGEntryNode	ENTRY		10887847		True				
ANR	10887867	CFGExitNode	EXIT		10887847		True				
ANR	10887868	Symbol	p		10887847						
ANR	10887869	Symbol	* p		10887847						
ANR	10887870	Function	u24	37:0:901:980							
ANR	10887871	FunctionDef	u24 (byte * p)		10887870	0					
ANR	10887872	CompoundStatement		38:0:932:980	10887870	0					
ANR	10887873	ReturnStatement	return ( p [ 0 ] << 16 ) | ( p [ 1 ] << 8 ) | p [ 2 ] ;	39:4:938:978	10887870	0	True				
ANR	10887874	InclusiveOrExpression	( p [ 0 ] << 16 ) | ( p [ 1 ] << 8 ) | p [ 2 ]		10887870	0		|			
ANR	10887875	ShiftExpression	p [ 0 ] << 16		10887870	0		<<			
ANR	10887876	ArrayIndexing	p [ 0 ]		10887870	0					
ANR	10887877	Identifier	p		10887870	0					
ANR	10887878	PrimaryExpression	0		10887870	1					
ANR	10887879	PrimaryExpression	16		10887870	1					
ANR	10887880	InclusiveOrExpression	( p [ 1 ] << 8 ) | p [ 2 ]		10887870	1		|			
ANR	10887881	ShiftExpression	p [ 1 ] << 8		10887870	0		<<			
ANR	10887882	ArrayIndexing	p [ 1 ]		10887870	0					
ANR	10887883	Identifier	p		10887870	0					
ANR	10887884	PrimaryExpression	1		10887870	1					
ANR	10887885	PrimaryExpression	8		10887870	1					
ANR	10887886	ArrayIndexing	p [ 2 ]		10887870	1					
ANR	10887887	Identifier	p		10887870	0					
ANR	10887888	PrimaryExpression	2		10887870	1					
ANR	10887889	ReturnType	static inline int		10887870	1					
ANR	10887890	Identifier	u24		10887870	2					
ANR	10887891	ParameterList	byte * p		10887870	3					
ANR	10887892	Parameter	byte * p	37:22:923:929	10887870	0	True				
ANR	10887893	ParameterType	byte *		10887870	0					
ANR	10887894	Identifier	p		10887870	1					
ANR	10887895	CFGEntryNode	ENTRY		10887870		True				
ANR	10887896	CFGExitNode	EXIT		10887870		True				
ANR	10887897	Symbol	p		10887870						
ANR	10887898	Symbol	* p		10887870						
ANR	10887899	Function	u32	42:0:983:1077							
ANR	10887900	FunctionDef	u32 (byte * p)		10887899	0					
ANR	10887901	CompoundStatement		43:0:1014:1077	10887899	0					
ANR	10887902	ReturnStatement	return ( p [ 0 ] << 24 ) | ( p [ 1 ] << 16 ) | ( p [ 2 ] << 8 ) | p [ 3 ] ;	44:4:1020:1075	10887899	0	True				
ANR	10887903	InclusiveOrExpression	( p [ 0 ] << 24 ) | ( p [ 1 ] << 16 ) | ( p [ 2 ] << 8 ) | p [ 3 ]		10887899	0		|			
ANR	10887904	ShiftExpression	p [ 0 ] << 24		10887899	0		<<			
ANR	10887905	ArrayIndexing	p [ 0 ]		10887899	0					
ANR	10887906	Identifier	p		10887899	0					
ANR	10887907	PrimaryExpression	0		10887899	1					
ANR	10887908	PrimaryExpression	24		10887899	1					
ANR	10887909	InclusiveOrExpression	( p [ 1 ] << 16 ) | ( p [ 2 ] << 8 ) | p [ 3 ]		10887899	1		|			
ANR	10887910	ShiftExpression	p [ 1 ] << 16		10887899	0		<<			
ANR	10887911	ArrayIndexing	p [ 1 ]		10887899	0					
ANR	10887912	Identifier	p		10887899	0					
ANR	10887913	PrimaryExpression	1		10887899	1					
ANR	10887914	PrimaryExpression	16		10887899	1					
ANR	10887915	InclusiveOrExpression	( p [ 2 ] << 8 ) | p [ 3 ]		10887899	1		|			
ANR	10887916	ShiftExpression	p [ 2 ] << 8		10887899	0		<<			
ANR	10887917	ArrayIndexing	p [ 2 ]		10887899	0					
ANR	10887918	Identifier	p		10887899	0					
ANR	10887919	PrimaryExpression	2		10887899	1					
ANR	10887920	PrimaryExpression	8		10887899	1					
ANR	10887921	ArrayIndexing	p [ 3 ]		10887899	1					
ANR	10887922	Identifier	p		10887899	0					
ANR	10887923	PrimaryExpression	3		10887899	1					
ANR	10887924	ReturnType	static inline int		10887899	1					
ANR	10887925	Identifier	u32		10887899	2					
ANR	10887926	ParameterList	byte * p		10887899	3					
ANR	10887927	Parameter	byte * p	42:22:1005:1011	10887899	0	True				
ANR	10887928	ParameterType	byte *		10887899	0					
ANR	10887929	Identifier	p		10887899	1					
ANR	10887930	CFGEntryNode	ENTRY		10887899		True				
ANR	10887931	CFGExitNode	EXIT		10887899		True				
ANR	10887932	Symbol	p		10887899						
ANR	10887933	Symbol	* p		10887899						
ANR	10887934	Function	xps_new_font	47:0:1080:2368							
ANR	10887935	FunctionDef	"xps_new_font (xps_context_t * ctx , byte * buf , int buflen , int index)"		10887934	0					
ANR	10887936	CompoundStatement		49:0:1160:2368	10887934	0					
ANR	10887937	IdentifierDeclStatement	xps_font_t * font ;	50:4:1166:1182	10887934	0	True				
ANR	10887938	IdentifierDecl	* font		10887934	0					
ANR	10887939	IdentifierDeclType	xps_font_t *		10887934	0					
ANR	10887940	Identifier	font		10887934	1					
ANR	10887941	IdentifierDeclStatement	int code ;	51:4:1188:1196	10887934	1	True				
ANR	10887942	IdentifierDecl	code		10887934	0					
ANR	10887943	IdentifierDeclType	int		10887934	0					
ANR	10887944	Identifier	code		10887934	1					
ANR	10887945	ExpressionStatement	"font = xps_alloc ( ctx , sizeof ( xps_font_t ) )"	53:4:1203:1244	10887934	2	True				
ANR	10887946	AssignmentExpression	"font = xps_alloc ( ctx , sizeof ( xps_font_t ) )"		10887934	0		=			
ANR	10887947	Identifier	font		10887934	0					
ANR	10887948	CallExpression	"xps_alloc ( ctx , sizeof ( xps_font_t ) )"		10887934	1					
ANR	10887949	Callee	xps_alloc		10887934	0					
ANR	10887950	Identifier	xps_alloc		10887934	0					
ANR	10887951	ArgumentList	ctx		10887934	1					
ANR	10887952	Argument	ctx		10887934	0					
ANR	10887953	Identifier	ctx		10887934	0					
ANR	10887954	Argument	sizeof ( xps_font_t )		10887934	1					
ANR	10887955	SizeofExpression	sizeof ( xps_font_t )		10887934	0					
ANR	10887956	Sizeof	sizeof		10887934	0					
ANR	10887957	SizeofOperand	xps_font_t		10887934	1					
ANR	10887958	IfStatement	if ( ! font )		10887934	3					
ANR	10887959	Condition	! font	54:8:1254:1258	10887934	0	True				
ANR	10887960	UnaryOperationExpression	! font		10887934	0					
ANR	10887961	UnaryOperator	!		10887934	0					
ANR	10887962	Identifier	font		10887934	1					
ANR	10887963	CompoundStatement		7:4:104:104	10887934	1					
ANR	10887964	ExpressionStatement	"gs_throw ( gs_error_VMerror , ""out of memory"" )"	56:8:1275:1318	10887934	0	True				
ANR	10887965	CallExpression	"gs_throw ( gs_error_VMerror , ""out of memory"" )"		10887934	0					
ANR	10887966	Callee	gs_throw		10887934	0					
ANR	10887967	Identifier	gs_throw		10887934	0					
ANR	10887968	ArgumentList	gs_error_VMerror		10887934	1					
ANR	10887969	Argument	gs_error_VMerror		10887934	0					
ANR	10887970	Identifier	gs_error_VMerror		10887934	0					
ANR	10887971	Argument	"""out of memory"""		10887934	1					
ANR	10887972	PrimaryExpression	"""out of memory"""		10887934	0					
ANR	10887973	ReturnStatement	return NULL ;	57:8:1328:1339	10887934	1	True				
ANR	10887974	Identifier	NULL		10887934	0					
ANR	10887975	ExpressionStatement	font -> data = buf	60:4:1352:1368	10887934	4	True				
ANR	10887976	AssignmentExpression	font -> data = buf		10887934	0		=			
ANR	10887977	PtrMemberAccess	font -> data		10887934	0					
ANR	10887978	Identifier	font		10887934	0					
ANR	10887979	Identifier	data		10887934	1					
ANR	10887980	Identifier	buf		10887934	1					
ANR	10887981	ExpressionStatement	font -> length = buflen	61:4:1374:1395	10887934	5	True				
ANR	10887982	AssignmentExpression	font -> length = buflen		10887934	0		=			
ANR	10887983	PtrMemberAccess	font -> length		10887934	0					
ANR	10887984	Identifier	font		10887934	0					
ANR	10887985	Identifier	length		10887934	1					
ANR	10887986	Identifier	buflen		10887934	1					
ANR	10887987	ExpressionStatement	font -> font = NULL	62:4:1401:1418	10887934	6	True				
ANR	10887988	AssignmentExpression	font -> font = NULL		10887934	0		=			
ANR	10887989	PtrMemberAccess	font -> font		10887934	0					
ANR	10887990	Identifier	font		10887934	0					
ANR	10887991	Identifier	font		10887934	1					
ANR	10887992	Identifier	NULL		10887934	1					
ANR	10887993	ExpressionStatement	font -> subfontid = index	64:4:1425:1448	10887934	7	True				
ANR	10887994	AssignmentExpression	font -> subfontid = index		10887934	0		=			
ANR	10887995	PtrMemberAccess	font -> subfontid		10887934	0					
ANR	10887996	Identifier	font		10887934	0					
ANR	10887997	Identifier	subfontid		10887934	1					
ANR	10887998	Identifier	index		10887934	1					
ANR	10887999	ExpressionStatement	font -> cmaptable = 0	65:4:1454:1473	10887934	8	True				
ANR	10888000	AssignmentExpression	font -> cmaptable = 0		10887934	0		=			
ANR	10888001	PtrMemberAccess	font -> cmaptable		10887934	0					
ANR	10888002	Identifier	font		10887934	0					
ANR	10888003	Identifier	cmaptable		10887934	1					
ANR	10888004	PrimaryExpression	0		10887934	1					
ANR	10888005	ExpressionStatement	font -> cmapsubcount = 0	66:4:1479:1501	10887934	9	True				
ANR	10888006	AssignmentExpression	font -> cmapsubcount = 0		10887934	0		=			
ANR	10888007	PtrMemberAccess	font -> cmapsubcount		10887934	0					
ANR	10888008	Identifier	font		10887934	0					
ANR	10888009	Identifier	cmapsubcount		10887934	1					
ANR	10888010	PrimaryExpression	0		10887934	1					
ANR	10888011	ExpressionStatement	font -> cmapsubtable = 0	67:4:1507:1529	10887934	10	True				
ANR	10888012	AssignmentExpression	font -> cmapsubtable = 0		10887934	0		=			
ANR	10888013	PtrMemberAccess	font -> cmapsubtable		10887934	0					
ANR	10888014	Identifier	font		10887934	0					
ANR	10888015	Identifier	cmapsubtable		10887934	1					
ANR	10888016	PrimaryExpression	0		10887934	1					
ANR	10888017	ExpressionStatement	font -> usepua = 0	68:4:1535:1551	10887934	11	True				
ANR	10888018	AssignmentExpression	font -> usepua = 0		10887934	0		=			
ANR	10888019	PtrMemberAccess	font -> usepua		10887934	0					
ANR	10888020	Identifier	font		10887934	0					
ANR	10888021	Identifier	usepua		10887934	1					
ANR	10888022	PrimaryExpression	0		10887934	1					
ANR	10888023	ExpressionStatement	font -> cffdata = 0	70:4:1558:1575	10887934	12	True				
ANR	10888024	AssignmentExpression	font -> cffdata = 0		10887934	0		=			
ANR	10888025	PtrMemberAccess	font -> cffdata		10887934	0					
ANR	10888026	Identifier	font		10887934	0					
ANR	10888027	Identifier	cffdata		10887934	1					
ANR	10888028	PrimaryExpression	0		10887934	1					
ANR	10888029	ExpressionStatement	font -> cffend = 0	71:4:1581:1597	10887934	13	True				
ANR	10888030	AssignmentExpression	font -> cffend = 0		10887934	0		=			
ANR	10888031	PtrMemberAccess	font -> cffend		10887934	0					
ANR	10888032	Identifier	font		10887934	0					
ANR	10888033	Identifier	cffend		10887934	1					
ANR	10888034	PrimaryExpression	0		10887934	1					
ANR	10888035	ExpressionStatement	font -> gsubrs = 0	72:4:1603:1619	10887934	14	True				
ANR	10888036	AssignmentExpression	font -> gsubrs = 0		10887934	0		=			
ANR	10888037	PtrMemberAccess	font -> gsubrs		10887934	0					
ANR	10888038	Identifier	font		10887934	0					
ANR	10888039	Identifier	gsubrs		10887934	1					
ANR	10888040	PrimaryExpression	0		10887934	1					
ANR	10888041	ExpressionStatement	font -> subrs = 0	73:4:1625:1640	10887934	15	True				
ANR	10888042	AssignmentExpression	font -> subrs = 0		10887934	0		=			
ANR	10888043	PtrMemberAccess	font -> subrs		10887934	0					
ANR	10888044	Identifier	font		10887934	0					
ANR	10888045	Identifier	subrs		10887934	1					
ANR	10888046	PrimaryExpression	0		10887934	1					
ANR	10888047	ExpressionStatement	font -> charstrings = 0	74:4:1646:1667	10887934	16	True				
ANR	10888048	AssignmentExpression	font -> charstrings = 0		10887934	0		=			
ANR	10888049	PtrMemberAccess	font -> charstrings		10887934	0					
ANR	10888050	Identifier	font		10887934	0					
ANR	10888051	Identifier	charstrings		10887934	1					
ANR	10888052	PrimaryExpression	0		10887934	1					
ANR	10888053	IfStatement	"if ( memcmp ( font -> data , ""OTTO"" , 4 ) == 0 )"		10887934	17					
ANR	10888054	Condition	"memcmp ( font -> data , ""OTTO"" , 4 ) == 0"	76:8:1678:1711	10887934	0	True				
ANR	10888055	EqualityExpression	"memcmp ( font -> data , ""OTTO"" , 4 ) == 0"		10887934	0		==			
ANR	10888056	CallExpression	"memcmp ( font -> data , ""OTTO"" , 4 )"		10887934	0					
ANR	10888057	Callee	memcmp		10887934	0					
ANR	10888058	Identifier	memcmp		10887934	0					
ANR	10888059	ArgumentList	font -> data		10887934	1					
ANR	10888060	Argument	font -> data		10887934	0					
ANR	10888061	PtrMemberAccess	font -> data		10887934	0					
ANR	10888062	Identifier	font		10887934	0					
ANR	10888063	Identifier	data		10887934	1					
ANR	10888064	Argument	"""OTTO"""		10887934	1					
ANR	10888065	PrimaryExpression	"""OTTO"""		10887934	0					
ANR	10888066	Argument	4		10887934	2					
ANR	10888067	PrimaryExpression	4		10887934	0					
ANR	10888068	PrimaryExpression	0		10887934	1					
ANR	10888069	ExpressionStatement	"code = xps_init_postscript_font ( ctx , font )"	77:8:1722:1764	10887934	1	True				
ANR	10888070	AssignmentExpression	"code = xps_init_postscript_font ( ctx , font )"		10887934	0		=			
ANR	10888071	Identifier	code		10887934	0					
ANR	10888072	CallExpression	"xps_init_postscript_font ( ctx , font )"		10887934	1					
ANR	10888073	Callee	xps_init_postscript_font		10887934	0					
ANR	10888074	Identifier	xps_init_postscript_font		10887934	0					
ANR	10888075	ArgumentList	ctx		10887934	1					
ANR	10888076	Argument	ctx		10887934	0					
ANR	10888077	Identifier	ctx		10887934	0					
ANR	10888078	Argument	font		10887934	1					
ANR	10888079	Identifier	font		10887934	0					
ANR	10888080	ElseStatement	else		10887934	0					
ANR	10888081	IfStatement	"if ( memcmp ( font -> data , ""\\0\\1\\0\\0"" , 4 ) == 0 )"		10887934	0					
ANR	10888082	Condition	"memcmp ( font -> data , ""\\0\\1\\0\\0"" , 4 ) == 0"	78:13:1779:1816	10887934	0	True				
ANR	10888083	EqualityExpression	"memcmp ( font -> data , ""\\0\\1\\0\\0"" , 4 ) == 0"		10887934	0		==			
ANR	10888084	CallExpression	"memcmp ( font -> data , ""\\0\\1\\0\\0"" , 4 )"		10887934	0					
ANR	10888085	Callee	memcmp		10887934	0					
ANR	10888086	Identifier	memcmp		10887934	0					
ANR	10888087	ArgumentList	font -> data		10887934	1					
ANR	10888088	Argument	font -> data		10887934	0					
ANR	10888089	PtrMemberAccess	font -> data		10887934	0					
ANR	10888090	Identifier	font		10887934	0					
ANR	10888091	Identifier	data		10887934	1					
ANR	10888092	Argument	"""\\0\\1\\0\\0"""		10887934	1					
ANR	10888093	PrimaryExpression	"""\\0\\1\\0\\0"""		10887934	0					
ANR	10888094	Argument	4		10887934	2					
ANR	10888095	PrimaryExpression	4		10887934	0					
ANR	10888096	PrimaryExpression	0		10887934	1					
ANR	10888097	ExpressionStatement	"code = xps_init_truetype_font ( ctx , font )"	79:8:1827:1867	10887934	1	True				
ANR	10888098	AssignmentExpression	"code = xps_init_truetype_font ( ctx , font )"		10887934	0		=			
ANR	10888099	Identifier	code		10887934	0					
ANR	10888100	CallExpression	"xps_init_truetype_font ( ctx , font )"		10887934	1					
ANR	10888101	Callee	xps_init_truetype_font		10887934	0					
ANR	10888102	Identifier	xps_init_truetype_font		10887934	0					
ANR	10888103	ArgumentList	ctx		10887934	1					
ANR	10888104	Argument	ctx		10887934	0					
ANR	10888105	Identifier	ctx		10887934	0					
ANR	10888106	Argument	font		10887934	1					
ANR	10888107	Identifier	font		10887934	0					
ANR	10888108	ElseStatement	else		10887934	0					
ANR	10888109	IfStatement	"if ( memcmp ( font -> data , ""true"" , 4 ) == 0 )"		10887934	0					
ANR	10888110	Condition	"memcmp ( font -> data , ""true"" , 4 ) == 0"	80:13:1882:1915	10887934	0	True				
ANR	10888111	EqualityExpression	"memcmp ( font -> data , ""true"" , 4 ) == 0"		10887934	0		==			
ANR	10888112	CallExpression	"memcmp ( font -> data , ""true"" , 4 )"		10887934	0					
ANR	10888113	Callee	memcmp		10887934	0					
ANR	10888114	Identifier	memcmp		10887934	0					
ANR	10888115	ArgumentList	font -> data		10887934	1					
ANR	10888116	Argument	font -> data		10887934	0					
ANR	10888117	PtrMemberAccess	font -> data		10887934	0					
ANR	10888118	Identifier	font		10887934	0					
ANR	10888119	Identifier	data		10887934	1					
ANR	10888120	Argument	"""true"""		10887934	1					
ANR	10888121	PrimaryExpression	"""true"""		10887934	0					
ANR	10888122	Argument	4		10887934	2					
ANR	10888123	PrimaryExpression	4		10887934	0					
ANR	10888124	PrimaryExpression	0		10887934	1					
ANR	10888125	ExpressionStatement	"code = xps_init_truetype_font ( ctx , font )"	81:8:1926:1966	10887934	1	True				
ANR	10888126	AssignmentExpression	"code = xps_init_truetype_font ( ctx , font )"		10887934	0		=			
ANR	10888127	Identifier	code		10887934	0					
ANR	10888128	CallExpression	"xps_init_truetype_font ( ctx , font )"		10887934	1					
ANR	10888129	Callee	xps_init_truetype_font		10887934	0					
ANR	10888130	Identifier	xps_init_truetype_font		10887934	0					
ANR	10888131	ArgumentList	ctx		10887934	1					
ANR	10888132	Argument	ctx		10887934	0					
ANR	10888133	Identifier	ctx		10887934	0					
ANR	10888134	Argument	font		10887934	1					
ANR	10888135	Identifier	font		10887934	0					
ANR	10888136	ElseStatement	else		10887934	0					
ANR	10888137	IfStatement	"if ( memcmp ( font -> data , ""ttcf"" , 4 ) == 0 )"		10887934	0					
ANR	10888138	Condition	"memcmp ( font -> data , ""ttcf"" , 4 ) == 0"	82:13:1981:2014	10887934	0	True				
ANR	10888139	EqualityExpression	"memcmp ( font -> data , ""ttcf"" , 4 ) == 0"		10887934	0		==			
ANR	10888140	CallExpression	"memcmp ( font -> data , ""ttcf"" , 4 )"		10887934	0					
ANR	10888141	Callee	memcmp		10887934	0					
ANR	10888142	Identifier	memcmp		10887934	0					
ANR	10888143	ArgumentList	font -> data		10887934	1					
ANR	10888144	Argument	font -> data		10887934	0					
ANR	10888145	PtrMemberAccess	font -> data		10887934	0					
ANR	10888146	Identifier	font		10887934	0					
ANR	10888147	Identifier	data		10887934	1					
ANR	10888148	Argument	"""ttcf"""		10887934	1					
ANR	10888149	PrimaryExpression	"""ttcf"""		10887934	0					
ANR	10888150	Argument	4		10887934	2					
ANR	10888151	PrimaryExpression	4		10887934	0					
ANR	10888152	PrimaryExpression	0		10887934	1					
ANR	10888153	ExpressionStatement	"code = xps_init_truetype_font ( ctx , font )"	83:8:2025:2065	10887934	1	True				
ANR	10888154	AssignmentExpression	"code = xps_init_truetype_font ( ctx , font )"		10887934	0		=			
ANR	10888155	Identifier	code		10887934	0					
ANR	10888156	CallExpression	"xps_init_truetype_font ( ctx , font )"		10887934	1					
ANR	10888157	Callee	xps_init_truetype_font		10887934	0					
ANR	10888158	Identifier	xps_init_truetype_font		10887934	0					
ANR	10888159	ArgumentList	ctx		10887934	1					
ANR	10888160	Argument	ctx		10887934	0					
ANR	10888161	Identifier	ctx		10887934	0					
ANR	10888162	Argument	font		10887934	1					
ANR	10888163	Identifier	font		10887934	0					
ANR	10888164	ElseStatement	else		10887934	0					
ANR	10888165	CompoundStatement		37:4:919:919	10887934	0					
ANR	10888166	ExpressionStatement	"xps_free_font ( ctx , font )"	86:8:2090:2114	10887934	0	True				
ANR	10888167	CallExpression	"xps_free_font ( ctx , font )"		10887934	0					
ANR	10888168	Callee	xps_free_font		10887934	0					
ANR	10888169	Identifier	xps_free_font		10887934	0					
ANR	10888170	ArgumentList	ctx		10887934	1					
ANR	10888171	Argument	ctx		10887934	0					
ANR	10888172	Identifier	ctx		10887934	0					
ANR	10888173	Argument	font		10887934	1					
ANR	10888174	Identifier	font		10887934	0					
ANR	10888175	ExpressionStatement	"gs_throw ( - 1 , ""not an opentype font"" )"	87:8:2124:2160	10887934	1	True				
ANR	10888176	CallExpression	"gs_throw ( - 1 , ""not an opentype font"" )"		10887934	0					
ANR	10888177	Callee	gs_throw		10887934	0					
ANR	10888178	Identifier	gs_throw		10887934	0					
ANR	10888179	ArgumentList	- 1		10887934	1					
ANR	10888180	Argument	- 1		10887934	0					
ANR	10888181	UnaryOperationExpression	- 1		10887934	0					
ANR	10888182	UnaryOperator	-		10887934	0					
ANR	10888183	PrimaryExpression	1		10887934	1					
ANR	10888184	Argument	"""not an opentype font"""		10887934	1					
ANR	10888185	PrimaryExpression	"""not an opentype font"""		10887934	0					
ANR	10888186	ReturnStatement	return NULL ;	88:8:2170:2181	10887934	2	True				
ANR	10888187	Identifier	NULL		10887934	0					
ANR	10888188	IfStatement	if ( code < 0 )		10887934	18					
ANR	10888189	Condition	code < 0	91:8:2198:2205	10887934	0	True				
ANR	10888190	RelationalExpression	code < 0		10887934	0		<			
ANR	10888191	Identifier	code		10887934	0					
ANR	10888192	PrimaryExpression	0		10887934	1					
ANR	10888193	CompoundStatement		44:4:1051:1051	10887934	1					
ANR	10888194	ExpressionStatement	"xps_free_font ( ctx , font )"	93:8:2222:2246	10887934	0	True				
ANR	10888195	CallExpression	"xps_free_font ( ctx , font )"		10887934	0					
ANR	10888196	Callee	xps_free_font		10887934	0					
ANR	10888197	Identifier	xps_free_font		10887934	0					
ANR	10888198	ArgumentList	ctx		10887934	1					
ANR	10888199	Argument	ctx		10887934	0					
ANR	10888200	Identifier	ctx		10887934	0					
ANR	10888201	Argument	font		10887934	1					
ANR	10888202	Identifier	font		10887934	0					
ANR	10888203	ExpressionStatement	"gs_rethrow ( - 1 , ""cannot init font"" )"	94:8:2256:2290	10887934	1	True				
ANR	10888204	CallExpression	"gs_rethrow ( - 1 , ""cannot init font"" )"		10887934	0					
ANR	10888205	Callee	gs_rethrow		10887934	0					
ANR	10888206	Identifier	gs_rethrow		10887934	0					
ANR	10888207	ArgumentList	- 1		10887934	1					
ANR	10888208	Argument	- 1		10887934	0					
ANR	10888209	UnaryOperationExpression	- 1		10887934	0					
ANR	10888210	UnaryOperator	-		10887934	0					
ANR	10888211	PrimaryExpression	1		10887934	1					
ANR	10888212	Argument	"""cannot init font"""		10887934	1					
ANR	10888213	PrimaryExpression	"""cannot init font"""		10887934	0					
ANR	10888214	ReturnStatement	return NULL ;	95:8:2300:2311	10887934	2	True				
ANR	10888215	Identifier	NULL		10887934	0					
ANR	10888216	ExpressionStatement	xps_load_sfnt_cmap ( font )	98:4:2324:2348	10887934	19	True				
ANR	10888217	CallExpression	xps_load_sfnt_cmap ( font )		10887934	0					
ANR	10888218	Callee	xps_load_sfnt_cmap		10887934	0					
ANR	10888219	Identifier	xps_load_sfnt_cmap		10887934	0					
ANR	10888220	ArgumentList	font		10887934	1					
ANR	10888221	Argument	font		10887934	0					
ANR	10888222	Identifier	font		10887934	0					
ANR	10888223	ReturnStatement	return font ;	100:4:2355:2366	10887934	20	True				
ANR	10888224	Identifier	font		10887934	0					
ANR	10888225	ReturnType	xps_font_t *		10887934	1					
ANR	10888226	Identifier	xps_new_font		10887934	2					
ANR	10888227	ParameterList	"xps_context_t * ctx , byte * buf , int buflen , int index"		10887934	3					
ANR	10888228	Parameter	xps_context_t * ctx	48:13:1106:1123	10887934	0	True				
ANR	10888229	ParameterType	xps_context_t *		10887934	0					
ANR	10888230	Identifier	ctx		10887934	1					
ANR	10888231	Parameter	byte * buf	48:33:1126:1134	10887934	1	True				
ANR	10888232	ParameterType	byte *		10887934	0					
ANR	10888233	Identifier	buf		10887934	1					
ANR	10888234	Parameter	int buflen	48:44:1137:1146	10887934	2	True				
ANR	10888235	ParameterType	int		10887934	0					
ANR	10888236	Identifier	buflen		10887934	1					
ANR	10888237	Parameter	int index	48:56:1149:1157	10887934	3	True				
ANR	10888238	ParameterType	int		10887934	0					
ANR	10888239	Identifier	index		10887934	1					
ANR	10888240	CFGEntryNode	ENTRY		10887934		True				
ANR	10888241	CFGExitNode	EXIT		10887934		True				
ANR	10888242	Symbol	font -> gsubrs		10887934						
ANR	10888243	Symbol	code		10887934						
ANR	10888244	Symbol	font -> usepua		10887934						
ANR	10888245	Symbol	font -> charstrings		10887934						
ANR	10888246	Symbol	font -> cmapsubtable		10887934						
ANR	10888247	Symbol	font -> subrs		10887934						
ANR	10888248	Symbol	font -> font		10887934						
ANR	10888249	Symbol	memcmp		10887934						
ANR	10888250	Symbol	buflen		10887934						
ANR	10888251	Symbol	xps_alloc		10887934						
ANR	10888252	Symbol	* font		10887934						
ANR	10888253	Symbol	font -> length		10887934						
ANR	10888254	Symbol	NULL		10887934						
ANR	10888255	Symbol	font -> cmapsubcount		10887934						
ANR	10888256	Symbol	font -> subfontid		10887934						
ANR	10888257	Symbol	xps_init_postscript_font		10887934						
ANR	10888258	Symbol	ctx		10887934						
ANR	10888259	Symbol	index		10887934						
ANR	10888260	Symbol	xps_init_truetype_font		10887934						
ANR	10888261	Symbol	gs_error_VMerror		10887934						
ANR	10888262	Symbol	font -> cffend		10887934						
ANR	10888263	Symbol	buf		10887934						
ANR	10888264	Symbol	font -> cffdata		10887934						
ANR	10888265	Symbol	font -> cmaptable		10887934						
ANR	10888266	Symbol	font -> data		10887934						
ANR	10888267	Symbol	font		10887934						
ANR	10888268	Function	xps_free_font	103:0:2371:2602							
ANR	10888269	FunctionDef	"xps_free_font (xps_context_t * ctx , xps_font_t * font)"		10888268	0					
ANR	10888270	CompoundStatement		105:0:2428:2602	10888268	0					
ANR	10888271	IfStatement	if ( font -> font )		10888268	0					
ANR	10888272	Condition	font -> font	106:8:2438:2447	10888268	0	True				
ANR	10888273	PtrMemberAccess	font -> font		10888268	0					
ANR	10888274	Identifier	font		10888268	0					
ANR	10888275	Identifier	font		10888268	1					
ANR	10888276	CompoundStatement		3:4:25:25	10888268	1					
ANR	10888277	ExpressionStatement	"gs_font_finalize ( ctx -> memory , font -> font )"	108:8:2464:2505	10888268	0	True				
ANR	10888278	CallExpression	"gs_font_finalize ( ctx -> memory , font -> font )"		10888268	0					
ANR	10888279	Callee	gs_font_finalize		10888268	0					
ANR	10888280	Identifier	gs_font_finalize		10888268	0					
ANR	10888281	ArgumentList	ctx -> memory		10888268	1					
ANR	10888282	Argument	ctx -> memory		10888268	0					
ANR	10888283	PtrMemberAccess	ctx -> memory		10888268	0					
ANR	10888284	Identifier	ctx		10888268	0					
ANR	10888285	Identifier	memory		10888268	1					
ANR	10888286	Argument	font -> font		10888268	1					
ANR	10888287	PtrMemberAccess	font -> font		10888268	0					
ANR	10888288	Identifier	font		10888268	0					
ANR	10888289	Identifier	font		10888268	1					
ANR	10888290	ExpressionStatement	"gs_free_object ( ctx -> memory , font -> font , ""font object"" )"	109:8:2515:2569	10888268	1	True				
ANR	10888291	CallExpression	"gs_free_object ( ctx -> memory , font -> font , ""font object"" )"		10888268	0					
ANR	10888292	Callee	gs_free_object		10888268	0					
ANR	10888293	Identifier	gs_free_object		10888268	0					
ANR	10888294	ArgumentList	ctx -> memory		10888268	1					
ANR	10888295	Argument	ctx -> memory		10888268	0					
ANR	10888296	PtrMemberAccess	ctx -> memory		10888268	0					
ANR	10888297	Identifier	ctx		10888268	0					
ANR	10888298	Identifier	memory		10888268	1					
ANR	10888299	Argument	font -> font		10888268	1					
ANR	10888300	PtrMemberAccess	font -> font		10888268	0					
ANR	10888301	Identifier	font		10888268	0					
ANR	10888302	Identifier	font		10888268	1					
ANR	10888303	Argument	"""font object"""		10888268	2					
ANR	10888304	PrimaryExpression	"""font object"""		10888268	0					
ANR	10888305	ExpressionStatement	"xps_free ( ctx , font )"	111:4:2581:2600	10888268	1	True				
ANR	10888306	CallExpression	"xps_free ( ctx , font )"		10888268	0					
ANR	10888307	Callee	xps_free		10888268	0					
ANR	10888308	Identifier	xps_free		10888268	0					
ANR	10888309	ArgumentList	ctx		10888268	1					
ANR	10888310	Argument	ctx		10888268	0					
ANR	10888311	Identifier	ctx		10888268	0					
ANR	10888312	Argument	font		10888268	1					
ANR	10888313	Identifier	font		10888268	0					
ANR	10888314	ReturnType	void		10888268	1					
ANR	10888315	Identifier	xps_free_font		10888268	2					
ANR	10888316	ParameterList	"xps_context_t * ctx , xps_font_t * font"		10888268	3					
ANR	10888317	Parameter	xps_context_t * ctx	104:14:2390:2407	10888268	0	True				
ANR	10888318	ParameterType	xps_context_t *		10888268	0					
ANR	10888319	Identifier	ctx		10888268	1					
ANR	10888320	Parameter	xps_font_t * font	104:34:2410:2425	10888268	1	True				
ANR	10888321	ParameterType	xps_font_t *		10888268	0					
ANR	10888322	Identifier	font		10888268	1					
ANR	10888323	CFGEntryNode	ENTRY		10888268		True				
ANR	10888324	CFGExitNode	EXIT		10888268		True				
ANR	10888325	Symbol	ctx -> memory		10888268						
ANR	10888326	Symbol	font -> font		10888268						
ANR	10888327	Symbol	ctx		10888268						
ANR	10888328	Symbol	* font		10888268						
ANR	10888329	Symbol	* ctx		10888268						
ANR	10888330	Symbol	font		10888268						
ANR	10888331	Function	xps_find_sfnt_table	119:0:2718:3626							
ANR	10888332	FunctionDef	"xps_find_sfnt_table (xps_font_t * font , const char * name , int * lengthp)"		10888331	0					
ANR	10888333	CompoundStatement		121:0:2792:3626	10888331	0					
ANR	10888334	IdentifierDeclStatement	int offset ;	122:4:2798:2808	10888331	0	True				
ANR	10888335	IdentifierDecl	offset		10888331	0					
ANR	10888336	IdentifierDeclType	int		10888331	0					
ANR	10888337	Identifier	offset		10888331	1					
ANR	10888338	IdentifierDeclStatement	int ntables ;	123:4:2814:2825	10888331	1	True				
ANR	10888339	IdentifierDecl	ntables		10888331	0					
ANR	10888340	IdentifierDeclType	int		10888331	0					
ANR	10888341	Identifier	ntables		10888331	1					
ANR	10888342	IdentifierDeclStatement	int i ;	124:4:2831:2836	10888331	2	True				
ANR	10888343	IdentifierDecl	i		10888331	0					
ANR	10888344	IdentifierDeclType	int		10888331	0					
ANR	10888345	Identifier	i		10888331	1					
ANR	10888346	IfStatement	if ( font -> length < 12 )		10888331	3					
ANR	10888347	Condition	font -> length < 12	126:8:2847:2863	10888331	0	True				
ANR	10888348	RelationalExpression	font -> length < 12		10888331	0		<			
ANR	10888349	PtrMemberAccess	font -> length		10888331	0					
ANR	10888350	Identifier	font		10888331	0					
ANR	10888351	Identifier	length		10888331	1					
ANR	10888352	PrimaryExpression	12		10888331	1					
ANR	10888353	ReturnStatement	return - 1 ;	127:8:2874:2883	10888331	1	True				
ANR	10888354	UnaryOperationExpression	- 1		10888331	0					
ANR	10888355	UnaryOperator	-		10888331	0					
ANR	10888356	PrimaryExpression	1		10888331	1					
ANR	10888357	IfStatement	"if ( ! memcmp ( font -> data , ""ttcf"" , 4 ) )"		10888331	4					
ANR	10888358	Condition	"! memcmp ( font -> data , ""ttcf"" , 4 )"	129:8:2894:2923	10888331	0	True				
ANR	10888359	UnaryOperationExpression	"! memcmp ( font -> data , ""ttcf"" , 4 )"		10888331	0					
ANR	10888360	UnaryOperator	!		10888331	0					
ANR	10888361	CallExpression	"memcmp ( font -> data , ""ttcf"" , 4 )"		10888331	1					
ANR	10888362	Callee	memcmp		10888331	0					
ANR	10888363	Identifier	memcmp		10888331	0					
ANR	10888364	ArgumentList	font -> data		10888331	1					
ANR	10888365	Argument	font -> data		10888331	0					
ANR	10888366	PtrMemberAccess	font -> data		10888331	0					
ANR	10888367	Identifier	font		10888331	0					
ANR	10888368	Identifier	data		10888331	1					
ANR	10888369	Argument	"""ttcf"""		10888331	1					
ANR	10888370	PrimaryExpression	"""ttcf"""		10888331	0					
ANR	10888371	Argument	4		10888331	2					
ANR	10888372	PrimaryExpression	4		10888331	0					
ANR	10888373	CompoundStatement		11:8:147:179	10888331	1					
ANR	10888374	IdentifierDeclStatement	int nfonts = u32 ( font -> data + 8 ) ;	131:8:2940:2972	10888331	0	True				
ANR	10888375	IdentifierDecl	nfonts = u32 ( font -> data + 8 )		10888331	0					
ANR	10888376	IdentifierDeclType	int		10888331	0					
ANR	10888377	Identifier	nfonts		10888331	1					
ANR	10888378	AssignmentExpression	nfonts = u32 ( font -> data + 8 )		10888331	2		=			
ANR	10888379	Identifier	nfonts		10888331	0					
ANR	10888380	CallExpression	u32 ( font -> data + 8 )		10888331	1					
ANR	10888381	Callee	u32		10888331	0					
ANR	10888382	Identifier	u32		10888331	0					
ANR	10888383	ArgumentList	font -> data + 8		10888331	1					
ANR	10888384	Argument	font -> data + 8		10888331	0					
ANR	10888385	AdditiveExpression	font -> data + 8		10888331	0		+			
ANR	10888386	PtrMemberAccess	font -> data		10888331	0					
ANR	10888387	Identifier	font		10888331	0					
ANR	10888388	Identifier	data		10888331	1					
ANR	10888389	PrimaryExpression	8		10888331	1					
ANR	10888390	IfStatement	if ( font -> subfontid < 0 || font -> subfontid >= nfonts )		10888331	1					
ANR	10888391	Condition	font -> subfontid < 0 || font -> subfontid >= nfonts	132:12:2986:3033	10888331	0	True				
ANR	10888392	OrExpression	font -> subfontid < 0 || font -> subfontid >= nfonts		10888331	0		||			
ANR	10888393	RelationalExpression	font -> subfontid < 0		10888331	0		<			
ANR	10888394	PtrMemberAccess	font -> subfontid		10888331	0					
ANR	10888395	Identifier	font		10888331	0					
ANR	10888396	Identifier	subfontid		10888331	1					
ANR	10888397	PrimaryExpression	0		10888331	1					
ANR	10888398	RelationalExpression	font -> subfontid >= nfonts		10888331	1		>=			
ANR	10888399	PtrMemberAccess	font -> subfontid		10888331	0					
ANR	10888400	Identifier	font		10888331	0					
ANR	10888401	Identifier	subfontid		10888331	1					
ANR	10888402	Identifier	nfonts		10888331	1					
ANR	10888403	CompoundStatement		13:8:251:251	10888331	1					
ANR	10888404	ExpressionStatement	"gs_warn ( ""Invalid subfont ID"" )"	134:12:3058:3087	10888331	0	True				
ANR	10888405	CallExpression	"gs_warn ( ""Invalid subfont ID"" )"		10888331	0					
ANR	10888406	Callee	gs_warn		10888331	0					
ANR	10888407	Identifier	gs_warn		10888331	0					
ANR	10888408	ArgumentList	"""Invalid subfont ID"""		10888331	1					
ANR	10888409	Argument	"""Invalid subfont ID"""		10888331	0					
ANR	10888410	PrimaryExpression	"""Invalid subfont ID"""		10888331	0					
ANR	10888411	ReturnStatement	return - 1 ;	135:12:3101:3110	10888331	1	True				
ANR	10888412	UnaryOperationExpression	- 1		10888331	0					
ANR	10888413	UnaryOperator	-		10888331	0					
ANR	10888414	PrimaryExpression	1		10888331	1					
ANR	10888415	ExpressionStatement	offset = u32 ( font -> data + 12 + font -> subfontid * 4 )	137:8:3130:3181	10888331	2	True				
ANR	10888416	AssignmentExpression	offset = u32 ( font -> data + 12 + font -> subfontid * 4 )		10888331	0		=			
ANR	10888417	Identifier	offset		10888331	0					
ANR	10888418	CallExpression	u32 ( font -> data + 12 + font -> subfontid * 4 )		10888331	1					
ANR	10888419	Callee	u32		10888331	0					
ANR	10888420	Identifier	u32		10888331	0					
ANR	10888421	ArgumentList	font -> data + 12 + font -> subfontid * 4		10888331	1					
ANR	10888422	Argument	font -> data + 12 + font -> subfontid * 4		10888331	0					
ANR	10888423	AdditiveExpression	font -> data + 12 + font -> subfontid * 4		10888331	0		+			
ANR	10888424	PtrMemberAccess	font -> data		10888331	0					
ANR	10888425	Identifier	font		10888331	0					
ANR	10888426	Identifier	data		10888331	1					
ANR	10888427	AdditiveExpression	12 + font -> subfontid * 4		10888331	1		+			
ANR	10888428	PrimaryExpression	12		10888331	0					
ANR	10888429	MultiplicativeExpression	font -> subfontid * 4		10888331	1		*			
ANR	10888430	PtrMemberAccess	font -> subfontid		10888331	0					
ANR	10888431	Identifier	font		10888331	0					
ANR	10888432	Identifier	subfontid		10888331	1					
ANR	10888433	PrimaryExpression	4		10888331	1					
ANR	10888434	ElseStatement	else		10888331	0					
ANR	10888435	CompoundStatement		20:4:409:409	10888331	0					
ANR	10888436	ExpressionStatement	offset = 0	141:8:3212:3222	10888331	0	True				
ANR	10888437	AssignmentExpression	offset = 0		10888331	0		=			
ANR	10888438	Identifier	offset		10888331	0					
ANR	10888439	PrimaryExpression	0		10888331	1					
ANR	10888440	ExpressionStatement	ntables = u16 ( font -> data + offset + 4 )	144:4:3235:3273	10888331	5	True				
ANR	10888441	AssignmentExpression	ntables = u16 ( font -> data + offset + 4 )		10888331	0		=			
ANR	10888442	Identifier	ntables		10888331	0					
ANR	10888443	CallExpression	u16 ( font -> data + offset + 4 )		10888331	1					
ANR	10888444	Callee	u16		10888331	0					
ANR	10888445	Identifier	u16		10888331	0					
ANR	10888446	ArgumentList	font -> data + offset + 4		10888331	1					
ANR	10888447	Argument	font -> data + offset + 4		10888331	0					
ANR	10888448	AdditiveExpression	font -> data + offset + 4		10888331	0		+			
ANR	10888449	PtrMemberAccess	font -> data		10888331	0					
ANR	10888450	Identifier	font		10888331	0					
ANR	10888451	Identifier	data		10888331	1					
ANR	10888452	AdditiveExpression	offset + 4		10888331	1		+			
ANR	10888453	Identifier	offset		10888331	0					
ANR	10888454	PrimaryExpression	4		10888331	1					
ANR	10888455	IfStatement	if ( font -> length < offset + 12 + ntables * 16 )		10888331	6					
ANR	10888456	Condition	font -> length < offset + 12 + ntables * 16	145:8:3283:3323	10888331	0	True				
ANR	10888457	RelationalExpression	font -> length < offset + 12 + ntables * 16		10888331	0		<			
ANR	10888458	PtrMemberAccess	font -> length		10888331	0					
ANR	10888459	Identifier	font		10888331	0					
ANR	10888460	Identifier	length		10888331	1					
ANR	10888461	AdditiveExpression	offset + 12 + ntables * 16		10888331	1		+			
ANR	10888462	Identifier	offset		10888331	0					
ANR	10888463	AdditiveExpression	12 + ntables * 16		10888331	1		+			
ANR	10888464	PrimaryExpression	12		10888331	0					
ANR	10888465	MultiplicativeExpression	ntables * 16		10888331	1		*			
ANR	10888466	Identifier	ntables		10888331	0					
ANR	10888467	PrimaryExpression	16		10888331	1					
ANR	10888468	ReturnStatement	return - 1 ;	146:8:3334:3343	10888331	1	True				
ANR	10888469	UnaryOperationExpression	- 1		10888331	0					
ANR	10888470	UnaryOperator	-		10888331	0					
ANR	10888471	PrimaryExpression	1		10888331	1					
ANR	10888472	ForStatement	for ( i = 0 ; i < ntables ; i ++ )		10888331	7					
ANR	10888473	ForInit	i = 0 ;	148:9:3355:3360	10888331	0	True				
ANR	10888474	AssignmentExpression	i = 0		10888331	0		=			
ANR	10888475	Identifier	i		10888331	0					
ANR	10888476	PrimaryExpression	0		10888331	1					
ANR	10888477	Condition	i < ntables	148:16:3362:3372	10888331	1	True				
ANR	10888478	RelationalExpression	i < ntables		10888331	0		<			
ANR	10888479	Identifier	i		10888331	0					
ANR	10888480	Identifier	ntables		10888331	1					
ANR	10888481	PostIncDecOperationExpression	i ++	148:29:3375:3377	10888331	2	True				
ANR	10888482	Identifier	i		10888331	0					
ANR	10888483	IncDec	++		10888331	1					
ANR	10888484	CompoundStatement		30:8:601:648	10888331	3					
ANR	10888485	IdentifierDeclStatement	byte * entry = font -> data + offset + 12 + i * 16 ;	150:8:3394:3441	10888331	0	True				
ANR	10888486	IdentifierDecl	* entry = font -> data + offset + 12 + i * 16		10888331	0					
ANR	10888487	IdentifierDeclType	byte *		10888331	0					
ANR	10888488	Identifier	entry		10888331	1					
ANR	10888489	AssignmentExpression	* entry = font -> data + offset + 12 + i * 16		10888331	2		=			
ANR	10888490	Identifier	entry		10888331	0					
ANR	10888491	AdditiveExpression	font -> data + offset + 12 + i * 16		10888331	1		+			
ANR	10888492	PtrMemberAccess	font -> data		10888331	0					
ANR	10888493	Identifier	font		10888331	0					
ANR	10888494	Identifier	data		10888331	1					
ANR	10888495	AdditiveExpression	offset + 12 + i * 16		10888331	1		+			
ANR	10888496	Identifier	offset		10888331	0					
ANR	10888497	AdditiveExpression	12 + i * 16		10888331	1		+			
ANR	10888498	PrimaryExpression	12		10888331	0					
ANR	10888499	MultiplicativeExpression	i * 16		10888331	1		*			
ANR	10888500	Identifier	i		10888331	0					
ANR	10888501	PrimaryExpression	16		10888331	1					
ANR	10888502	IfStatement	"if ( ! memcmp ( entry , name , 4 ) )"		10888331	1					
ANR	10888503	Condition	"! memcmp ( entry , name , 4 )"	151:12:3455:3477	10888331	0	True				
ANR	10888504	UnaryOperationExpression	"! memcmp ( entry , name , 4 )"		10888331	0					
ANR	10888505	UnaryOperator	!		10888331	0					
ANR	10888506	CallExpression	"memcmp ( entry , name , 4 )"		10888331	1					
ANR	10888507	Callee	memcmp		10888331	0					
ANR	10888508	Identifier	memcmp		10888331	0					
ANR	10888509	ArgumentList	entry		10888331	1					
ANR	10888510	Argument	entry		10888331	0					
ANR	10888511	Identifier	entry		10888331	0					
ANR	10888512	Argument	name		10888331	1					
ANR	10888513	Identifier	name		10888331	0					
ANR	10888514	Argument	4		10888331	2					
ANR	10888515	PrimaryExpression	4		10888331	0					
ANR	10888516	CompoundStatement		32:8:695:695	10888331	1					
ANR	10888517	IfStatement	if ( lengthp )		10888331	0					
ANR	10888518	Condition	lengthp	153:16:3506:3512	10888331	0	True				
ANR	10888519	Identifier	lengthp		10888331	0					
ANR	10888520	ExpressionStatement	* lengthp = u32 ( entry + 12 )	154:16:3531:3557	10888331	1	True				
ANR	10888521	AssignmentExpression	* lengthp = u32 ( entry + 12 )		10888331	0		=			
ANR	10888522	UnaryOperationExpression	* lengthp		10888331	0					
ANR	10888523	UnaryOperator	*		10888331	0					
ANR	10888524	Identifier	lengthp		10888331	1					
ANR	10888525	CallExpression	u32 ( entry + 12 )		10888331	1					
ANR	10888526	Callee	u32		10888331	0					
ANR	10888527	Identifier	u32		10888331	0					
ANR	10888528	ArgumentList	entry + 12		10888331	1					
ANR	10888529	Argument	entry + 12		10888331	0					
ANR	10888530	AdditiveExpression	entry + 12		10888331	0		+			
ANR	10888531	Identifier	entry		10888331	0					
ANR	10888532	PrimaryExpression	12		10888331	1					
ANR	10888533	ReturnStatement	return u32 ( entry + 8 ) ;	155:12:3571:3592	10888331	1	True				
ANR	10888534	CallExpression	u32 ( entry + 8 )		10888331	0					
ANR	10888535	Callee	u32		10888331	0					
ANR	10888536	Identifier	u32		10888331	0					
ANR	10888537	ArgumentList	entry + 8		10888331	1					
ANR	10888538	Argument	entry + 8		10888331	0					
ANR	10888539	AdditiveExpression	entry + 8		10888331	0		+			
ANR	10888540	Identifier	entry		10888331	0					
ANR	10888541	PrimaryExpression	8		10888331	1					
ANR	10888542	ReturnStatement	return - 1 ;	159:4:3615:3624	10888331	8	True				
ANR	10888543	UnaryOperationExpression	- 1		10888331	0					
ANR	10888544	UnaryOperator	-		10888331	0					
ANR	10888545	PrimaryExpression	1		10888331	1					
ANR	10888546	ReturnType	int		10888331	1					
ANR	10888547	Identifier	xps_find_sfnt_table		10888331	2					
ANR	10888548	ParameterList	"xps_font_t * font , const char * name , int * lengthp"		10888331	3					
ANR	10888549	Parameter	xps_font_t * font	120:20:2742:2757	10888331	0	True				
ANR	10888550	ParameterType	xps_font_t *		10888331	0					
ANR	10888551	Identifier	font		10888331	1					
ANR	10888552	Parameter	const char * name	120:38:2760:2775	10888331	1	True				
ANR	10888553	ParameterType	const char *		10888331	0					
ANR	10888554	Identifier	name		10888331	1					
ANR	10888555	Parameter	int * lengthp	120:56:2778:2789	10888331	2	True				
ANR	10888556	ParameterType	int *		10888331	0					
ANR	10888557	Identifier	lengthp		10888331	1					
ANR	10888558	CFGEntryNode	ENTRY		10888331		True				
ANR	10888559	CFGExitNode	EXIT		10888331		True				
ANR	10888560	Symbol	offset		10888331						
ANR	10888561	Symbol	font -> subfontid		10888331						
ANR	10888562	Symbol	i		10888331						
ANR	10888563	Symbol	* lengthp		10888331						
ANR	10888564	Symbol	nfonts		10888331						
ANR	10888565	Symbol	entry		10888331						
ANR	10888566	Symbol	lengthp		10888331						
ANR	10888567	Symbol	memcmp		10888331						
ANR	10888568	Symbol	u32		10888331						
ANR	10888569	Symbol	font -> data		10888331						
ANR	10888570	Symbol	ntables		10888331						
ANR	10888571	Symbol	name		10888331						
ANR	10888572	Symbol	* font		10888331						
ANR	10888573	Symbol	u16		10888331						
ANR	10888574	Symbol	font -> length		10888331						
ANR	10888575	Symbol	font		10888331						
ANR	10888576	Function	xps_load_sfnt_name	165:0:3711:6919							
ANR	10888577	FunctionDef	"xps_load_sfnt_name (xps_font_t * font , char * namep , const int buflen)"		10888576	0					
ANR	10888578	CompoundStatement		167:0:3784:6919	10888576	0					
ANR	10888579	IdentifierDeclStatement	byte * namedata ;	168:4:3790:3804	10888576	0	True				
ANR	10888580	IdentifierDecl	* namedata		10888576	0					
ANR	10888581	IdentifierDeclType	byte *		10888576	0					
ANR	10888582	Identifier	namedata		10888576	1					
ANR	10888583	IdentifierDeclStatement	"int offset , length ;"	169:4:3810:3828	10888576	1	True				
ANR	10888584	IdentifierDecl	offset		10888576	0					
ANR	10888585	IdentifierDeclType	int		10888576	0					
ANR	10888586	Identifier	offset		10888576	1					
ANR	10888587	IdentifierDecl	length		10888576	1					
ANR	10888588	IdentifierDeclType	int		10888576	0					
ANR	10888589	Identifier	length		10888576	1					
ANR	10888590	IdentifierDeclStatement	"int count , stringoffset ;"	171:4:3854:3877	10888576	2	True				
ANR	10888591	IdentifierDecl	count		10888576	0					
ANR	10888592	IdentifierDeclType	int		10888576	0					
ANR	10888593	Identifier	count		10888576	1					
ANR	10888594	IdentifierDecl	stringoffset		10888576	1					
ANR	10888595	IdentifierDeclType	int		10888576	0					
ANR	10888596	Identifier	stringoffset		10888576	1					
ANR	10888597	IdentifierDeclStatement	int found ;	172:4:3883:3892	10888576	3	True				
ANR	10888598	IdentifierDecl	found		10888576	0					
ANR	10888599	IdentifierDeclType	int		10888576	0					
ANR	10888600	Identifier	found		10888576	1					
ANR	10888601	IdentifierDeclStatement	"int i , k ;"	173:4:3898:3906	10888576	4	True				
ANR	10888602	IdentifierDecl	i		10888576	0					
ANR	10888603	IdentifierDeclType	int		10888576	0					
ANR	10888604	Identifier	i		10888576	1					
ANR	10888605	IdentifierDecl	k		10888576	1					
ANR	10888606	IdentifierDeclType	int		10888576	0					
ANR	10888607	Identifier	k		10888576	1					
ANR	10888608	ExpressionStatement	found = 0	175:4:3913:3922	10888576	5	True				
ANR	10888609	AssignmentExpression	found = 0		10888576	0		=			
ANR	10888610	Identifier	found		10888576	0					
ANR	10888611	PrimaryExpression	0		10888576	1					
ANR	10888612	ExpressionStatement	"strcpy ( namep , ""Unknown"" )"	176:4:3928:3952	10888576	6	True				
ANR	10888613	CallExpression	"strcpy ( namep , ""Unknown"" )"		10888576	0					
ANR	10888614	Callee	strcpy		10888576	0					
ANR	10888615	Identifier	strcpy		10888576	0					
ANR	10888616	ArgumentList	namep		10888576	1					
ANR	10888617	Argument	namep		10888576	0					
ANR	10888618	Identifier	namep		10888576	0					
ANR	10888619	Argument	"""Unknown"""		10888576	1					
ANR	10888620	PrimaryExpression	"""Unknown"""		10888576	0					
ANR	10888621	ExpressionStatement	"offset = xps_find_sfnt_table ( font , ""name"" , & length )"	178:4:3959:4010	10888576	7	True				
ANR	10888622	AssignmentExpression	"offset = xps_find_sfnt_table ( font , ""name"" , & length )"		10888576	0		=			
ANR	10888623	Identifier	offset		10888576	0					
ANR	10888624	CallExpression	"xps_find_sfnt_table ( font , ""name"" , & length )"		10888576	1					
ANR	10888625	Callee	xps_find_sfnt_table		10888576	0					
ANR	10888626	Identifier	xps_find_sfnt_table		10888576	0					
ANR	10888627	ArgumentList	font		10888576	1					
ANR	10888628	Argument	font		10888576	0					
ANR	10888629	Identifier	font		10888576	0					
ANR	10888630	Argument	"""name"""		10888576	1					
ANR	10888631	PrimaryExpression	"""name"""		10888576	0					
ANR	10888632	Argument	& length		10888576	2					
ANR	10888633	UnaryOperationExpression	& length		10888576	0					
ANR	10888634	UnaryOperator	&		10888576	0					
ANR	10888635	Identifier	length		10888576	1					
ANR	10888636	IfStatement	if ( offset < 0 || length < 6 )		10888576	8					
ANR	10888637	Condition	offset < 0 || length < 6	179:8:4020:4043	10888576	0	True				
ANR	10888638	OrExpression	offset < 0 || length < 6		10888576	0		||			
ANR	10888639	RelationalExpression	offset < 0		10888576	0		<			
ANR	10888640	Identifier	offset		10888576	0					
ANR	10888641	PrimaryExpression	0		10888576	1					
ANR	10888642	RelationalExpression	length < 6		10888576	1		<			
ANR	10888643	Identifier	length		10888576	0					
ANR	10888644	PrimaryExpression	6		10888576	1					
ANR	10888645	CompoundStatement		14:4:265:265	10888576	1					
ANR	10888646	ExpressionStatement	"gs_warn ( ""cannot find name table"" )"	181:8:4060:4093	10888576	0	True				
ANR	10888647	CallExpression	"gs_warn ( ""cannot find name table"" )"		10888576	0					
ANR	10888648	Callee	gs_warn		10888576	0					
ANR	10888649	Identifier	gs_warn		10888576	0					
ANR	10888650	ArgumentList	"""cannot find name table"""		10888576	1					
ANR	10888651	Argument	"""cannot find name table"""		10888576	0					
ANR	10888652	PrimaryExpression	"""cannot find name table"""		10888576	0					
ANR	10888653	ReturnStatement	return ;	182:8:4103:4109	10888576	1	True				
ANR	10888654	IfStatement	if ( offset + 6 > font -> length )		10888576	9					
ANR	10888655	Condition	offset + 6 > font -> length	188:8:4221:4245	10888576	0	True				
ANR	10888656	RelationalExpression	offset + 6 > font -> length		10888576	0		>			
ANR	10888657	AdditiveExpression	offset + 6		10888576	0		+			
ANR	10888658	Identifier	offset		10888576	0					
ANR	10888659	PrimaryExpression	6		10888576	1					
ANR	10888660	PtrMemberAccess	font -> length		10888576	1					
ANR	10888661	Identifier	font		10888576	0					
ANR	10888662	Identifier	length		10888576	1					
ANR	10888663	CompoundStatement		23:4:467:467	10888576	1					
ANR	10888664	ExpressionStatement	"gs_warn ( ""name table byte offset invalid"" )"	190:8:4262:4303	10888576	0	True				
ANR	10888665	CallExpression	"gs_warn ( ""name table byte offset invalid"" )"		10888576	0					
ANR	10888666	Callee	gs_warn		10888576	0					
ANR	10888667	Identifier	gs_warn		10888576	0					
ANR	10888668	ArgumentList	"""name table byte offset invalid"""		10888576	1					
ANR	10888669	Argument	"""name table byte offset invalid"""		10888576	0					
ANR	10888670	PrimaryExpression	"""name table byte offset invalid"""		10888576	0					
ANR	10888671	ReturnStatement	return ;	191:8:4313:4319	10888576	1	True				
ANR	10888672	ExpressionStatement	namedata = font -> data + offset	193:4:4331:4361	10888576	10	True				
ANR	10888673	AssignmentExpression	namedata = font -> data + offset		10888576	0		=			
ANR	10888674	Identifier	namedata		10888576	0					
ANR	10888675	AdditiveExpression	font -> data + offset		10888576	1		+			
ANR	10888676	PtrMemberAccess	font -> data		10888576	0					
ANR	10888677	Identifier	font		10888576	0					
ANR	10888678	Identifier	data		10888576	1					
ANR	10888679	Identifier	offset		10888576	1					
ANR	10888680	ExpressionStatement	count = u16 ( namedata + 2 )	196:4:4404:4429	10888576	11	True				
ANR	10888681	AssignmentExpression	count = u16 ( namedata + 2 )		10888576	0		=			
ANR	10888682	Identifier	count		10888576	0					
ANR	10888683	CallExpression	u16 ( namedata + 2 )		10888576	1					
ANR	10888684	Callee	u16		10888576	0					
ANR	10888685	Identifier	u16		10888576	0					
ANR	10888686	ArgumentList	namedata + 2		10888576	1					
ANR	10888687	Argument	namedata + 2		10888576	0					
ANR	10888688	AdditiveExpression	namedata + 2		10888576	0		+			
ANR	10888689	Identifier	namedata		10888576	0					
ANR	10888690	PrimaryExpression	2		10888576	1					
ANR	10888691	ExpressionStatement	stringoffset = u16 ( namedata + 4 )	197:4:4435:4467	10888576	12	True				
ANR	10888692	AssignmentExpression	stringoffset = u16 ( namedata + 4 )		10888576	0		=			
ANR	10888693	Identifier	stringoffset		10888576	0					
ANR	10888694	CallExpression	u16 ( namedata + 4 )		10888576	1					
ANR	10888695	Callee	u16		10888576	0					
ANR	10888696	Identifier	u16		10888576	0					
ANR	10888697	ArgumentList	namedata + 4		10888576	1					
ANR	10888698	Argument	namedata + 4		10888576	0					
ANR	10888699	AdditiveExpression	namedata + 4		10888576	0		+			
ANR	10888700	Identifier	namedata		10888576	0					
ANR	10888701	PrimaryExpression	4		10888576	1					
ANR	10888702	IfStatement	if ( stringoffset + offset > font -> length || offset + 6 + count * 12 > font -> length )		10888576	13					
ANR	10888703	Condition	stringoffset + offset > font -> length || offset + 6 + count * 12 > font -> length	199:8:4478:4563	10888576	0	True				
ANR	10888704	OrExpression	stringoffset + offset > font -> length || offset + 6 + count * 12 > font -> length		10888576	0		||			
ANR	10888705	RelationalExpression	stringoffset + offset > font -> length		10888576	0		>			
ANR	10888706	AdditiveExpression	stringoffset + offset		10888576	0		+			
ANR	10888707	Identifier	stringoffset		10888576	0					
ANR	10888708	Identifier	offset		10888576	1					
ANR	10888709	PtrMemberAccess	font -> length		10888576	1					
ANR	10888710	Identifier	font		10888576	0					
ANR	10888711	Identifier	length		10888576	1					
ANR	10888712	RelationalExpression	offset + 6 + count * 12 > font -> length		10888576	1		>			
ANR	10888713	AdditiveExpression	offset + 6 + count * 12		10888576	0		+			
ANR	10888714	Identifier	offset		10888576	0					
ANR	10888715	AdditiveExpression	6 + count * 12		10888576	1		+			
ANR	10888716	PrimaryExpression	6		10888576	0					
ANR	10888717	MultiplicativeExpression	count * 12		10888576	1		*			
ANR	10888718	Identifier	count		10888576	0					
ANR	10888719	PrimaryExpression	12		10888576	1					
ANR	10888720	PtrMemberAccess	font -> length		10888576	1					
ANR	10888721	Identifier	font		10888576	0					
ANR	10888722	Identifier	length		10888576	1					
ANR	10888723	CompoundStatement		35:4:785:785	10888576	1					
ANR	10888724	ExpressionStatement	"gs_warn ( ""name table invalid"" )"	202:8:4580:4609	10888576	0	True				
ANR	10888725	CallExpression	"gs_warn ( ""name table invalid"" )"		10888576	0					
ANR	10888726	Callee	gs_warn		10888576	0					
ANR	10888727	Identifier	gs_warn		10888576	0					
ANR	10888728	ArgumentList	"""name table invalid"""		10888576	1					
ANR	10888729	Argument	"""name table invalid"""		10888576	0					
ANR	10888730	PrimaryExpression	"""name table invalid"""		10888576	0					
ANR	10888731	ReturnStatement	return ;	203:8:4619:4625	10888576	1	True				
ANR	10888732	IfStatement	if ( length < 6 + ( count * 12 ) )		10888576	14					
ANR	10888733	Condition	length < 6 + ( count * 12 )	206:8:4642:4666	10888576	0	True				
ANR	10888734	RelationalExpression	length < 6 + ( count * 12 )		10888576	0		<			
ANR	10888735	Identifier	length		10888576	0					
ANR	10888736	AdditiveExpression	6 + ( count * 12 )		10888576	1		+			
ANR	10888737	PrimaryExpression	6		10888576	0					
ANR	10888738	MultiplicativeExpression	count * 12		10888576	1		*			
ANR	10888739	Identifier	count		10888576	0					
ANR	10888740	PrimaryExpression	12		10888576	1					
ANR	10888741	CompoundStatement		41:4:888:888	10888576	1					
ANR	10888742	ExpressionStatement	"gs_warn ( ""name table too short"" )"	208:8:4683:4714	10888576	0	True				
ANR	10888743	CallExpression	"gs_warn ( ""name table too short"" )"		10888576	0					
ANR	10888744	Callee	gs_warn		10888576	0					
ANR	10888745	Identifier	gs_warn		10888576	0					
ANR	10888746	ArgumentList	"""name table too short"""		10888576	1					
ANR	10888747	Argument	"""name table too short"""		10888576	0					
ANR	10888748	PrimaryExpression	"""name table too short"""		10888576	0					
ANR	10888749	ReturnStatement	return ;	209:8:4724:4730	10888576	1	True				
ANR	10888750	ForStatement	for ( i = 0 ; i < count ; i ++ )		10888576	15					
ANR	10888751	ForInit	i = 0 ;	212:9:4748:4753	10888576	0	True				
ANR	10888752	AssignmentExpression	i = 0		10888576	0		=			
ANR	10888753	Identifier	i		10888576	0					
ANR	10888754	PrimaryExpression	0		10888576	1					
ANR	10888755	Condition	i < count	212:16:4755:4763	10888576	1	True				
ANR	10888756	RelationalExpression	i < count		10888576	0		<			
ANR	10888757	Identifier	i		10888576	0					
ANR	10888758	Identifier	count		10888576	1					
ANR	10888759	PostIncDecOperationExpression	i ++	212:27:4766:4768	10888576	2	True				
ANR	10888760	Identifier	i		10888576	0					
ANR	10888761	IncDec	++		10888576	1					
ANR	10888762	CompoundStatement		52:8:1154:1182	10888576	3					
ANR	10888763	IdentifierDeclStatement	byte * record = namedata + 6 + i * 12 ;	214:8:4785:4821	10888576	0	True				
ANR	10888764	IdentifierDecl	* record = namedata + 6 + i * 12		10888576	0					
ANR	10888765	IdentifierDeclType	byte *		10888576	0					
ANR	10888766	Identifier	record		10888576	1					
ANR	10888767	AssignmentExpression	* record = namedata + 6 + i * 12		10888576	2		=			
ANR	10888768	Identifier	record		10888576	0					
ANR	10888769	AdditiveExpression	namedata + 6 + i * 12		10888576	1		+			
ANR	10888770	Identifier	namedata		10888576	0					
ANR	10888771	AdditiveExpression	6 + i * 12		10888576	1		+			
ANR	10888772	PrimaryExpression	6		10888576	0					
ANR	10888773	MultiplicativeExpression	i * 12		10888576	1		*			
ANR	10888774	Identifier	i		10888576	0					
ANR	10888775	PrimaryExpression	12		10888576	1					
ANR	10888776	IdentifierDeclStatement	int pid = u16 ( record + 0 ) ;	215:8:4831:4856	10888576	1	True				
ANR	10888777	IdentifierDecl	pid = u16 ( record + 0 )		10888576	0					
ANR	10888778	IdentifierDeclType	int		10888576	0					
ANR	10888779	Identifier	pid		10888576	1					
ANR	10888780	AssignmentExpression	pid = u16 ( record + 0 )		10888576	2		=			
ANR	10888781	Identifier	pid		10888576	0					
ANR	10888782	CallExpression	u16 ( record + 0 )		10888576	1					
ANR	10888783	Callee	u16		10888576	0					
ANR	10888784	Identifier	u16		10888576	0					
ANR	10888785	ArgumentList	record + 0		10888576	1					
ANR	10888786	Argument	record + 0		10888576	0					
ANR	10888787	AdditiveExpression	record + 0		10888576	0		+			
ANR	10888788	Identifier	record		10888576	0					
ANR	10888789	PrimaryExpression	0		10888576	1					
ANR	10888790	IdentifierDeclStatement	int eid = u16 ( record + 2 ) ;	216:8:4866:4891	10888576	2	True				
ANR	10888791	IdentifierDecl	eid = u16 ( record + 2 )		10888576	0					
ANR	10888792	IdentifierDeclType	int		10888576	0					
ANR	10888793	Identifier	eid		10888576	1					
ANR	10888794	AssignmentExpression	eid = u16 ( record + 2 )		10888576	2		=			
ANR	10888795	Identifier	eid		10888576	0					
ANR	10888796	CallExpression	u16 ( record + 2 )		10888576	1					
ANR	10888797	Callee	u16		10888576	0					
ANR	10888798	Identifier	u16		10888576	0					
ANR	10888799	ArgumentList	record + 2		10888576	1					
ANR	10888800	Argument	record + 2		10888576	0					
ANR	10888801	AdditiveExpression	record + 2		10888576	0		+			
ANR	10888802	Identifier	record		10888576	0					
ANR	10888803	PrimaryExpression	2		10888576	1					
ANR	10888804	IdentifierDeclStatement	int langid = u16 ( record + 4 ) ;	217:8:4901:4929	10888576	3	True				
ANR	10888805	IdentifierDecl	langid = u16 ( record + 4 )		10888576	0					
ANR	10888806	IdentifierDeclType	int		10888576	0					
ANR	10888807	Identifier	langid		10888576	1					
ANR	10888808	AssignmentExpression	langid = u16 ( record + 4 )		10888576	2		=			
ANR	10888809	Identifier	langid		10888576	0					
ANR	10888810	CallExpression	u16 ( record + 4 )		10888576	1					
ANR	10888811	Callee	u16		10888576	0					
ANR	10888812	Identifier	u16		10888576	0					
ANR	10888813	ArgumentList	record + 4		10888576	1					
ANR	10888814	Argument	record + 4		10888576	0					
ANR	10888815	AdditiveExpression	record + 4		10888576	0		+			
ANR	10888816	Identifier	record		10888576	0					
ANR	10888817	PrimaryExpression	4		10888576	1					
ANR	10888818	IdentifierDeclStatement	int nameid = u16 ( record + 6 ) ;	218:8:4939:4967	10888576	4	True				
ANR	10888819	IdentifierDecl	nameid = u16 ( record + 6 )		10888576	0					
ANR	10888820	IdentifierDeclType	int		10888576	0					
ANR	10888821	Identifier	nameid		10888576	1					
ANR	10888822	AssignmentExpression	nameid = u16 ( record + 6 )		10888576	2		=			
ANR	10888823	Identifier	nameid		10888576	0					
ANR	10888824	CallExpression	u16 ( record + 6 )		10888576	1					
ANR	10888825	Callee	u16		10888576	0					
ANR	10888826	Identifier	u16		10888576	0					
ANR	10888827	ArgumentList	record + 6		10888576	1					
ANR	10888828	Argument	record + 6		10888576	0					
ANR	10888829	AdditiveExpression	record + 6		10888576	0		+			
ANR	10888830	Identifier	record		10888576	0					
ANR	10888831	PrimaryExpression	6		10888576	1					
ANR	10888832	ExpressionStatement	length = u16 ( record + 8 )	219:8:4977:5001	10888576	5	True				
ANR	10888833	AssignmentExpression	length = u16 ( record + 8 )		10888576	0		=			
ANR	10888834	Identifier	length		10888576	0					
ANR	10888835	CallExpression	u16 ( record + 8 )		10888576	1					
ANR	10888836	Callee	u16		10888576	0					
ANR	10888837	Identifier	u16		10888576	0					
ANR	10888838	ArgumentList	record + 8		10888576	1					
ANR	10888839	Argument	record + 8		10888576	0					
ANR	10888840	AdditiveExpression	record + 8		10888576	0		+			
ANR	10888841	Identifier	record		10888576	0					
ANR	10888842	PrimaryExpression	8		10888576	1					
ANR	10888843	ExpressionStatement	offset = u16 ( record + 10 )	220:8:5011:5036	10888576	6	True				
ANR	10888844	AssignmentExpression	offset = u16 ( record + 10 )		10888576	0		=			
ANR	10888845	Identifier	offset		10888576	0					
ANR	10888846	CallExpression	u16 ( record + 10 )		10888576	1					
ANR	10888847	Callee	u16		10888576	0					
ANR	10888848	Identifier	u16		10888576	0					
ANR	10888849	ArgumentList	record + 10		10888576	1					
ANR	10888850	Argument	record + 10		10888576	0					
ANR	10888851	AdditiveExpression	record + 10		10888576	0		+			
ANR	10888852	Identifier	record		10888576	0					
ANR	10888853	PrimaryExpression	10		10888576	1					
ANR	10888854	ExpressionStatement	length = length > buflen - 1 ? buflen - 1 : length	222:8:5047:5096	10888576	7	True				
ANR	10888855	AssignmentExpression	length = length > buflen - 1 ? buflen - 1 : length		10888576	0		=			
ANR	10888856	Identifier	length		10888576	0					
ANR	10888857	ConditionalExpression	length > buflen - 1 ? buflen - 1 : length		10888576	1					
ANR	10888858	Condition	length > buflen - 1		10888576	0					
ANR	10888859	RelationalExpression	length > buflen - 1		10888576	0		>			
ANR	10888860	Identifier	length		10888576	0					
ANR	10888861	AdditiveExpression	buflen - 1		10888576	1		-			
ANR	10888862	Identifier	buflen		10888576	0					
ANR	10888863	PrimaryExpression	1		10888576	1					
ANR	10888864	AdditiveExpression	buflen - 1		10888576	1		-			
ANR	10888865	Identifier	buflen		10888576	0					
ANR	10888866	PrimaryExpression	1		10888576	1					
ANR	10888867	Identifier	length		10888576	2					
ANR	10888868	IfStatement	if ( namedata + stringoffset + offset >= font -> data + font -> length )		10888576	8					
ANR	10888869	Condition	namedata + stringoffset + offset >= font -> data + font -> length	223:12:5110:5170	10888576	0	True				
ANR	10888870	RelationalExpression	namedata + stringoffset + offset >= font -> data + font -> length		10888576	0		>=			
ANR	10888871	AdditiveExpression	namedata + stringoffset + offset		10888576	0		+			
ANR	10888872	Identifier	namedata		10888576	0					
ANR	10888873	AdditiveExpression	stringoffset + offset		10888576	1		+			
ANR	10888874	Identifier	stringoffset		10888576	0					
ANR	10888875	Identifier	offset		10888576	1					
ANR	10888876	AdditiveExpression	font -> data + font -> length		10888576	1		+			
ANR	10888877	PtrMemberAccess	font -> data		10888576	0					
ANR	10888878	Identifier	font		10888576	0					
ANR	10888879	Identifier	data		10888576	1					
ANR	10888880	PtrMemberAccess	font -> length		10888576	1					
ANR	10888881	Identifier	font		10888576	0					
ANR	10888882	Identifier	length		10888576	1					
ANR	10888883	ContinueStatement	continue ;	224:12:5185:5193	10888576	1	True				
ANR	10888884	IfStatement	if ( namedata + stringoffset + offset + length >= font -> data + font -> length )		10888576	9					
ANR	10888885	Condition	namedata + stringoffset + offset + length >= font -> data + font -> length	226:12:5208:5278	10888576	0	True				
ANR	10888886	RelationalExpression	namedata + stringoffset + offset + length >= font -> data + font -> length		10888576	0		>=			
ANR	10888887	AdditiveExpression	namedata + stringoffset + offset + length		10888576	0		+			
ANR	10888888	Identifier	namedata		10888576	0					
ANR	10888889	AdditiveExpression	stringoffset + offset + length		10888576	1		+			
ANR	10888890	Identifier	stringoffset		10888576	0					
ANR	10888891	AdditiveExpression	offset + length		10888576	1		+			
ANR	10888892	Identifier	offset		10888576	0					
ANR	10888893	Identifier	length		10888576	1					
ANR	10888894	AdditiveExpression	font -> data + font -> length		10888576	1		+			
ANR	10888895	PtrMemberAccess	font -> data		10888576	0					
ANR	10888896	Identifier	font		10888576	0					
ANR	10888897	Identifier	data		10888576	1					
ANR	10888898	PtrMemberAccess	font -> length		10888576	1					
ANR	10888899	Identifier	font		10888576	0					
ANR	10888900	Identifier	length		10888576	1					
ANR	10888901	ExpressionStatement	length = ( font -> data + font -> length ) - ( namedata + stringoffset + offset )	227:12:5293:5367	10888576	1	True				
ANR	10888902	AssignmentExpression	length = ( font -> data + font -> length ) - ( namedata + stringoffset + offset )		10888576	0		=			
ANR	10888903	Identifier	length		10888576	0					
ANR	10888904	AdditiveExpression	( font -> data + font -> length ) - ( namedata + stringoffset + offset )		10888576	1		-			
ANR	10888905	AdditiveExpression	font -> data + font -> length		10888576	0		+			
ANR	10888906	PtrMemberAccess	font -> data		10888576	0					
ANR	10888907	Identifier	font		10888576	0					
ANR	10888908	Identifier	data		10888576	1					
ANR	10888909	PtrMemberAccess	font -> length		10888576	1					
ANR	10888910	Identifier	font		10888576	0					
ANR	10888911	Identifier	length		10888576	1					
ANR	10888912	AdditiveExpression	namedata + stringoffset + offset		10888576	1		+			
ANR	10888913	Identifier	namedata		10888576	0					
ANR	10888914	AdditiveExpression	stringoffset + offset		10888576	1		+			
ANR	10888915	Identifier	stringoffset		10888576	0					
ANR	10888916	Identifier	offset		10888576	1					
ANR	10888917	IfStatement	if ( nameid == 4 || nameid == 6 )		10888576	10					
ANR	10888918	Condition	nameid == 4 || nameid == 6	230:12:5430:5455	10888576	0	True				
ANR	10888919	OrExpression	nameid == 4 || nameid == 6		10888576	0		||			
ANR	10888920	EqualityExpression	nameid == 4		10888576	0		==			
ANR	10888921	Identifier	nameid		10888576	0					
ANR	10888922	PrimaryExpression	4		10888576	1					
ANR	10888923	EqualityExpression	nameid == 6		10888576	1		==			
ANR	10888924	Identifier	nameid		10888576	0					
ANR	10888925	PrimaryExpression	6		10888576	1					
ANR	10888926	CompoundStatement		65:8:1681:1681	10888576	1					
ANR	10888927	IfStatement	if ( pid == 1 && eid == 0 && langid == 0 )		10888576	0					
ANR	10888928	Condition	pid == 1 && eid == 0 && langid == 0	232:16:5484:5518	10888576	0	True				
ANR	10888929	AndExpression	pid == 1 && eid == 0 && langid == 0		10888576	0		&&			
ANR	10888930	EqualityExpression	pid == 1		10888576	0		==			
ANR	10888931	Identifier	pid		10888576	0					
ANR	10888932	PrimaryExpression	1		10888576	1					
ANR	10888933	AndExpression	eid == 0 && langid == 0		10888576	1		&&			
ANR	10888934	EqualityExpression	eid == 0		10888576	0		==			
ANR	10888935	Identifier	eid		10888576	0					
ANR	10888936	PrimaryExpression	0		10888576	1					
ANR	10888937	EqualityExpression	langid == 0		10888576	1		==			
ANR	10888938	Identifier	langid		10888576	0					
ANR	10888939	PrimaryExpression	0		10888576	1					
ANR	10888940	CompoundStatement		67:12:1773:1773	10888576	1					
ANR	10888941	IfStatement	if ( found < 3 )		10888576	0					
ANR	10888942	Condition	found < 3	234:20:5580:5588	10888576	0	True				
ANR	10888943	RelationalExpression	found < 3		10888576	0		<			
ANR	10888944	Identifier	found		10888576	0					
ANR	10888945	PrimaryExpression	3		10888576	1					
ANR	10888946	CompoundStatement		69:16:1822:1822	10888576	1					
ANR	10888947	ExpressionStatement	"memcpy ( namep , namedata + stringoffset + offset , length )"	236:20:5629:5684	10888576	0	True				
ANR	10888948	CallExpression	"memcpy ( namep , namedata + stringoffset + offset , length )"		10888576	0					
ANR	10888949	Callee	memcpy		10888576	0					
ANR	10888950	Identifier	memcpy		10888576	0					
ANR	10888951	ArgumentList	namep		10888576	1					
ANR	10888952	Argument	namep		10888576	0					
ANR	10888953	Identifier	namep		10888576	0					
ANR	10888954	Argument	namedata + stringoffset + offset		10888576	1					
ANR	10888955	AdditiveExpression	namedata + stringoffset + offset		10888576	0		+			
ANR	10888956	Identifier	namedata		10888576	0					
ANR	10888957	AdditiveExpression	stringoffset + offset		10888576	1		+			
ANR	10888958	Identifier	stringoffset		10888576	0					
ANR	10888959	Identifier	offset		10888576	1					
ANR	10888960	Argument	length		10888576	2					
ANR	10888961	Identifier	length		10888576	0					
ANR	10888962	ExpressionStatement	namep [ length ] = 0	237:20:5706:5723	10888576	1	True				
ANR	10888963	AssignmentExpression	namep [ length ] = 0		10888576	0		=			
ANR	10888964	ArrayIndexing	namep [ length ]		10888576	0					
ANR	10888965	Identifier	namep		10888576	0					
ANR	10888966	Identifier	length		10888576	1					
ANR	10888967	PrimaryExpression	0		10888576	1					
ANR	10888968	ExpressionStatement	found = 3	238:20:5745:5754	10888576	2	True				
ANR	10888969	AssignmentExpression	found = 3		10888576	0		=			
ANR	10888970	Identifier	found		10888576	0					
ANR	10888971	PrimaryExpression	3		10888576	1					
ANR	10888972	IfStatement	if ( pid == 3 && eid == 1 && langid == 0x409 )		10888576	1					
ANR	10888973	Condition	pid == 3 && eid == 1 && langid == 0x409	242:16:5805:5843	10888576	0	True				
ANR	10888974	AndExpression	pid == 3 && eid == 1 && langid == 0x409		10888576	0		&&			
ANR	10888975	EqualityExpression	pid == 3		10888576	0		==			
ANR	10888976	Identifier	pid		10888576	0					
ANR	10888977	PrimaryExpression	3		10888576	1					
ANR	10888978	AndExpression	eid == 1 && langid == 0x409		10888576	1		&&			
ANR	10888979	EqualityExpression	eid == 1		10888576	0		==			
ANR	10888980	Identifier	eid		10888576	0					
ANR	10888981	PrimaryExpression	1		10888576	1					
ANR	10888982	EqualityExpression	langid == 0x409		10888576	1		==			
ANR	10888983	Identifier	langid		10888576	0					
ANR	10888984	PrimaryExpression	0x409		10888576	1					
ANR	10888985	CompoundStatement		77:12:2105:2105	10888576	1					
ANR	10888986	IfStatement	if ( found < 2 )		10888576	0					
ANR	10888987	Condition	found < 2	244:20:5912:5920	10888576	0	True				
ANR	10888988	RelationalExpression	found < 2		10888576	0		<			
ANR	10888989	Identifier	found		10888576	0					
ANR	10888990	PrimaryExpression	2		10888576	1					
ANR	10888991	CompoundStatement		81:20:2249:2267	10888576	1					
ANR	10888992	IdentifierDeclStatement	unsigned char * s = namedata + stringoffset + offset ;	246:20:5961:6012	10888576	0	True				
ANR	10888993	IdentifierDecl	* s = namedata + stringoffset + offset		10888576	0					
ANR	10888994	IdentifierDeclType	unsigned char *		10888576	0					
ANR	10888995	Identifier	s		10888576	1					
ANR	10888996	AssignmentExpression	* s = namedata + stringoffset + offset		10888576	2		=			
ANR	10888997	Identifier	s		10888576	0					
ANR	10888998	AdditiveExpression	namedata + stringoffset + offset		10888576	1		+			
ANR	10888999	Identifier	namedata		10888576	0					
ANR	10889000	AdditiveExpression	stringoffset + offset		10888576	1		+			
ANR	10889001	Identifier	stringoffset		10888576	0					
ANR	10889002	Identifier	offset		10888576	1					
ANR	10889003	IdentifierDeclStatement	int n = length / 2 ;	247:20:6034:6052	10888576	1	True				
ANR	10889004	IdentifierDecl	n = length / 2		10888576	0					
ANR	10889005	IdentifierDeclType	int		10888576	0					
ANR	10889006	Identifier	n		10888576	1					
ANR	10889007	AssignmentExpression	n = length / 2		10888576	2		=			
ANR	10889008	Identifier	n		10888576	0					
ANR	10889009	MultiplicativeExpression	length / 2		10888576	1		/			
ANR	10889010	Identifier	length		10888576	0					
ANR	10889011	PrimaryExpression	2		10888576	1					
ANR	10889012	ForStatement	for ( k = 0 ; k < n ; k ++ )		10888576	2					
ANR	10889013	ForInit	k = 0 ;	248:25:6079:6084	10888576	0	True				
ANR	10889014	AssignmentExpression	k = 0		10888576	0		=			
ANR	10889015	Identifier	k		10888576	0					
ANR	10889016	PrimaryExpression	0		10888576	1					
ANR	10889017	Condition	k < n	248:32:6086:6090	10888576	1	True				
ANR	10889018	RelationalExpression	k < n		10888576	0		<			
ANR	10889019	Identifier	k		10888576	0					
ANR	10889020	Identifier	n		10888576	1					
ANR	10889021	PostIncDecOperationExpression	k ++	248:39:6093:6096	10888576	2	True				
ANR	10889022	Identifier	k		10888576	0					
ANR	10889023	IncDec	++		10888576	1					
ANR	10889024	CompoundStatement		84:24:2360:2382	10888576	3					
ANR	10889025	IdentifierDeclStatement	int c = u16 ( s + k * 2 ) ;	250:24:6145:6167	10888576	0	True				
ANR	10889026	IdentifierDecl	c = u16 ( s + k * 2 )		10888576	0					
ANR	10889027	IdentifierDeclType	int		10888576	0					
ANR	10889028	Identifier	c		10888576	1					
ANR	10889029	AssignmentExpression	c = u16 ( s + k * 2 )		10888576	2		=			
ANR	10889030	Identifier	c		10888576	0					
ANR	10889031	CallExpression	u16 ( s + k * 2 )		10888576	1					
ANR	10889032	Callee	u16		10888576	0					
ANR	10889033	Identifier	u16		10888576	0					
ANR	10889034	ArgumentList	s + k * 2		10888576	1					
ANR	10889035	Argument	s + k * 2		10888576	0					
ANR	10889036	AdditiveExpression	s + k * 2		10888576	0		+			
ANR	10889037	Identifier	s		10888576	0					
ANR	10889038	MultiplicativeExpression	k * 2		10888576	1		*			
ANR	10889039	Identifier	k		10888576	0					
ANR	10889040	PrimaryExpression	2		10888576	1					
ANR	10889041	ExpressionStatement	namep [ k ] = isprint ( c ) ? c : '?'	251:24:6193:6224	10888576	1	True				
ANR	10889042	AssignmentExpression	namep [ k ] = isprint ( c ) ? c : '?'		10888576	0		=			
ANR	10889043	ArrayIndexing	namep [ k ]		10888576	0					
ANR	10889044	Identifier	namep		10888576	0					
ANR	10889045	Identifier	k		10888576	1					
ANR	10889046	ConditionalExpression	isprint ( c ) ? c : '?'		10888576	1					
ANR	10889047	Condition	isprint ( c )		10888576	0					
ANR	10889048	CallExpression	isprint ( c )		10888576	0					
ANR	10889049	Callee	isprint		10888576	0					
ANR	10889050	Identifier	isprint		10888576	0					
ANR	10889051	ArgumentList	c		10888576	1					
ANR	10889052	Argument	c		10888576	0					
ANR	10889053	Identifier	c		10888576	0					
ANR	10889054	Identifier	c		10888576	1					
ANR	10889055	PrimaryExpression	'?'		10888576	2					
ANR	10889056	ExpressionStatement	namep [ k ] = 0	253:20:6268:6280	10888576	3	True				
ANR	10889057	AssignmentExpression	namep [ k ] = 0		10888576	0		=			
ANR	10889058	ArrayIndexing	namep [ k ]		10888576	0					
ANR	10889059	Identifier	namep		10888576	0					
ANR	10889060	Identifier	k		10888576	1					
ANR	10889061	PrimaryExpression	0		10888576	1					
ANR	10889062	ExpressionStatement	found = 2	254:20:6302:6311	10888576	4	True				
ANR	10889063	AssignmentExpression	found = 2		10888576	0		=			
ANR	10889064	Identifier	found		10888576	0					
ANR	10889065	PrimaryExpression	2		10888576	1					
ANR	10889066	IfStatement	if ( pid == 3 && eid == 10 && langid == 0x409 )		10888576	2					
ANR	10889067	Condition	pid == 3 && eid == 10 && langid == 0x409	258:16:6362:6401	10888576	0	True				
ANR	10889068	AndExpression	pid == 3 && eid == 10 && langid == 0x409		10888576	0		&&			
ANR	10889069	EqualityExpression	pid == 3		10888576	0		==			
ANR	10889070	Identifier	pid		10888576	0					
ANR	10889071	PrimaryExpression	3		10888576	1					
ANR	10889072	AndExpression	eid == 10 && langid == 0x409		10888576	1		&&			
ANR	10889073	EqualityExpression	eid == 10		10888576	0		==			
ANR	10889074	Identifier	eid		10888576	0					
ANR	10889075	PrimaryExpression	10		10888576	1					
ANR	10889076	EqualityExpression	langid == 0x409		10888576	1		==			
ANR	10889077	Identifier	langid		10888576	0					
ANR	10889078	PrimaryExpression	0x409		10888576	1					
ANR	10889079	CompoundStatement		93:12:2663:2663	10888576	1					
ANR	10889080	IfStatement	if ( found < 1 )		10888576	0					
ANR	10889081	Condition	found < 1	260:20:6470:6478	10888576	0	True				
ANR	10889082	RelationalExpression	found < 1		10888576	0		<			
ANR	10889083	Identifier	found		10888576	0					
ANR	10889084	PrimaryExpression	1		10888576	1					
ANR	10889085	CompoundStatement		97:20:2807:2825	10888576	1					
ANR	10889086	IdentifierDeclStatement	unsigned char * s = namedata + stringoffset + offset ;	262:20:6519:6570	10888576	0	True				
ANR	10889087	IdentifierDecl	* s = namedata + stringoffset + offset		10888576	0					
ANR	10889088	IdentifierDeclType	unsigned char *		10888576	0					
ANR	10889089	Identifier	s		10888576	1					
ANR	10889090	AssignmentExpression	* s = namedata + stringoffset + offset		10888576	2		=			
ANR	10889091	Identifier	s		10888576	0					
ANR	10889092	AdditiveExpression	namedata + stringoffset + offset		10888576	1		+			
ANR	10889093	Identifier	namedata		10888576	0					
ANR	10889094	AdditiveExpression	stringoffset + offset		10888576	1		+			
ANR	10889095	Identifier	stringoffset		10888576	0					
ANR	10889096	Identifier	offset		10888576	1					
ANR	10889097	IdentifierDeclStatement	int n = length / 4 ;	263:20:6592:6610	10888576	1	True				
ANR	10889098	IdentifierDecl	n = length / 4		10888576	0					
ANR	10889099	IdentifierDeclType	int		10888576	0					
ANR	10889100	Identifier	n		10888576	1					
ANR	10889101	AssignmentExpression	n = length / 4		10888576	2		=			
ANR	10889102	Identifier	n		10888576	0					
ANR	10889103	MultiplicativeExpression	length / 4		10888576	1		/			
ANR	10889104	Identifier	length		10888576	0					
ANR	10889105	PrimaryExpression	4		10888576	1					
ANR	10889106	ForStatement	for ( k = 0 ; k < n ; k ++ )		10888576	2					
ANR	10889107	ForInit	k = 0 ;	264:25:6637:6642	10888576	0	True				
ANR	10889108	AssignmentExpression	k = 0		10888576	0		=			
ANR	10889109	Identifier	k		10888576	0					
ANR	10889110	PrimaryExpression	0		10888576	1					
ANR	10889111	Condition	k < n	264:32:6644:6648	10888576	1	True				
ANR	10889112	RelationalExpression	k < n		10888576	0		<			
ANR	10889113	Identifier	k		10888576	0					
ANR	10889114	Identifier	n		10888576	1					
ANR	10889115	PostIncDecOperationExpression	k ++	264:39:6651:6654	10888576	2	True				
ANR	10889116	Identifier	k		10888576	0					
ANR	10889117	IncDec	++		10888576	1					
ANR	10889118	CompoundStatement		100:24:2918:2940	10888576	3					
ANR	10889119	IdentifierDeclStatement	int c = u32 ( s + k * 4 ) ;	266:24:6703:6725	10888576	0	True				
ANR	10889120	IdentifierDecl	c = u32 ( s + k * 4 )		10888576	0					
ANR	10889121	IdentifierDeclType	int		10888576	0					
ANR	10889122	Identifier	c		10888576	1					
ANR	10889123	AssignmentExpression	c = u32 ( s + k * 4 )		10888576	2		=			
ANR	10889124	Identifier	c		10888576	0					
ANR	10889125	CallExpression	u32 ( s + k * 4 )		10888576	1					
ANR	10889126	Callee	u32		10888576	0					
ANR	10889127	Identifier	u32		10888576	0					
ANR	10889128	ArgumentList	s + k * 4		10888576	1					
ANR	10889129	Argument	s + k * 4		10888576	0					
ANR	10889130	AdditiveExpression	s + k * 4		10888576	0		+			
ANR	10889131	Identifier	s		10888576	0					
ANR	10889132	MultiplicativeExpression	k * 4		10888576	1		*			
ANR	10889133	Identifier	k		10888576	0					
ANR	10889134	PrimaryExpression	4		10888576	1					
ANR	10889135	ExpressionStatement	namep [ k ] = isprint ( c ) ? c : '?'	267:24:6751:6782	10888576	1	True				
ANR	10889136	AssignmentExpression	namep [ k ] = isprint ( c ) ? c : '?'		10888576	0		=			
ANR	10889137	ArrayIndexing	namep [ k ]		10888576	0					
ANR	10889138	Identifier	namep		10888576	0					
ANR	10889139	Identifier	k		10888576	1					
ANR	10889140	ConditionalExpression	isprint ( c ) ? c : '?'		10888576	1					
ANR	10889141	Condition	isprint ( c )		10888576	0					
ANR	10889142	CallExpression	isprint ( c )		10888576	0					
ANR	10889143	Callee	isprint		10888576	0					
ANR	10889144	Identifier	isprint		10888576	0					
ANR	10889145	ArgumentList	c		10888576	1					
ANR	10889146	Argument	c		10888576	0					
ANR	10889147	Identifier	c		10888576	0					
ANR	10889148	Identifier	c		10888576	1					
ANR	10889149	PrimaryExpression	'?'		10888576	2					
ANR	10889150	ExpressionStatement	namep [ k ] = 0	269:20:6826:6838	10888576	3	True				
ANR	10889151	AssignmentExpression	namep [ k ] = 0		10888576	0		=			
ANR	10889152	ArrayIndexing	namep [ k ]		10888576	0					
ANR	10889153	Identifier	namep		10888576	0					
ANR	10889154	Identifier	k		10888576	1					
ANR	10889155	PrimaryExpression	0		10888576	1					
ANR	10889156	ExpressionStatement	found = 1	270:20:6860:6869	10888576	4	True				
ANR	10889157	AssignmentExpression	found = 1		10888576	0		=			
ANR	10889158	Identifier	found		10888576	0					
ANR	10889159	PrimaryExpression	1		10888576	1					
ANR	10889160	ReturnType	void		10888576	1					
ANR	10889161	Identifier	xps_load_sfnt_name		10888576	2					
ANR	10889162	ParameterList	"xps_font_t * font , char * namep , const int buflen"		10888576	3					
ANR	10889163	Parameter	xps_font_t * font	166:19:3735:3750	10888576	0	True				
ANR	10889164	ParameterType	xps_font_t *		10888576	0					
ANR	10889165	Identifier	font		10888576	1					
ANR	10889166	Parameter	char * namep	166:37:3753:3763	10888576	1	True				
ANR	10889167	ParameterType	char *		10888576	0					
ANR	10889168	Identifier	namep		10888576	1					
ANR	10889169	Parameter	const int buflen	166:50:3766:3781	10888576	2	True				
ANR	10889170	ParameterType	const int		10888576	0					
ANR	10889171	Identifier	buflen		10888576	1					
ANR	10889172	CFGEntryNode	ENTRY		10888576		True				
ANR	10889173	CFGExitNode	EXIT		10888576		True				
ANR	10889174	Symbol	eid		10888576						
ANR	10889175	Symbol	isprint		10888576						
ANR	10889176	Symbol	namedata		10888576						
ANR	10889177	Symbol	pid		10888576						
ANR	10889178	Symbol	found		10888576						
ANR	10889179	Symbol	* namep		10888576						
ANR	10889180	Symbol	u32		10888576						
ANR	10889181	Symbol	record		10888576						
ANR	10889182	Symbol	buflen		10888576						
ANR	10889183	Symbol	nameid		10888576						
ANR	10889184	Symbol	* length		10888576						
ANR	10889185	Symbol	* font		10888576						
ANR	10889186	Symbol	u16		10888576						
ANR	10889187	Symbol	font -> length		10888576						
ANR	10889188	Symbol	langid		10888576						
ANR	10889189	Symbol	& length		10888576						
ANR	10889190	Symbol	c		10888576						
ANR	10889191	Symbol	offset		10888576						
ANR	10889192	Symbol	length		10888576						
ANR	10889193	Symbol	count		10888576						
ANR	10889194	Symbol	i		10888576						
ANR	10889195	Symbol	stringoffset		10888576						
ANR	10889196	Symbol	k		10888576						
ANR	10889197	Symbol	n		10888576						
ANR	10889198	Symbol	s		10888576						
ANR	10889199	Symbol	* k		10888576						
ANR	10889200	Symbol	font -> data		10888576						
ANR	10889201	Symbol	xps_find_sfnt_table		10888576						
ANR	10889202	Symbol	namep		10888576						
ANR	10889203	Symbol	font		10888576						
ANR	10889204	Function	xps_load_sfnt_cmap	281:0:6992:7668							
ANR	10889205	FunctionDef	xps_load_sfnt_cmap (xps_font_t * font)		10889204	0					
ANR	10889206	CompoundStatement		283:0:7041:7668	10889204	0					
ANR	10889207	IdentifierDeclStatement	byte * cmapdata ;	284:4:7047:7061	10889204	0	True				
ANR	10889208	IdentifierDecl	* cmapdata		10889204	0					
ANR	10889209	IdentifierDeclType	byte *		10889204	0					
ANR	10889210	Identifier	cmapdata		10889204	1					
ANR	10889211	IdentifierDeclStatement	"int offset , length ;"	285:4:7067:7085	10889204	1	True				
ANR	10889212	IdentifierDecl	offset		10889204	0					
ANR	10889213	IdentifierDeclType	int		10889204	0					
ANR	10889214	Identifier	offset		10889204	1					
ANR	10889215	IdentifierDecl	length		10889204	1					
ANR	10889216	IdentifierDeclType	int		10889204	0					
ANR	10889217	Identifier	length		10889204	1					
ANR	10889218	IdentifierDeclStatement	int nsubtables ;	286:4:7091:7105	10889204	2	True				
ANR	10889219	IdentifierDecl	nsubtables		10889204	0					
ANR	10889220	IdentifierDeclType	int		10889204	0					
ANR	10889221	Identifier	nsubtables		10889204	1					
ANR	10889222	ExpressionStatement	"offset = xps_find_sfnt_table ( font , ""cmap"" , & length )"	288:4:7112:7163	10889204	3	True				
ANR	10889223	AssignmentExpression	"offset = xps_find_sfnt_table ( font , ""cmap"" , & length )"		10889204	0		=			
ANR	10889224	Identifier	offset		10889204	0					
ANR	10889225	CallExpression	"xps_find_sfnt_table ( font , ""cmap"" , & length )"		10889204	1					
ANR	10889226	Callee	xps_find_sfnt_table		10889204	0					
ANR	10889227	Identifier	xps_find_sfnt_table		10889204	0					
ANR	10889228	ArgumentList	font		10889204	1					
ANR	10889229	Argument	font		10889204	0					
ANR	10889230	Identifier	font		10889204	0					
ANR	10889231	Argument	"""cmap"""		10889204	1					
ANR	10889232	PrimaryExpression	"""cmap"""		10889204	0					
ANR	10889233	Argument	& length		10889204	2					
ANR	10889234	UnaryOperationExpression	& length		10889204	0					
ANR	10889235	UnaryOperator	&		10889204	0					
ANR	10889236	Identifier	length		10889204	1					
ANR	10889237	IfStatement	if ( offset < 0 || length < 4 )		10889204	4					
ANR	10889238	Condition	offset < 0 || length < 4	289:8:7173:7196	10889204	0	True				
ANR	10889239	OrExpression	offset < 0 || length < 4		10889204	0		||			
ANR	10889240	RelationalExpression	offset < 0		10889204	0		<			
ANR	10889241	Identifier	offset		10889204	0					
ANR	10889242	PrimaryExpression	0		10889204	1					
ANR	10889243	RelationalExpression	length < 4		10889204	1		<			
ANR	10889244	Identifier	length		10889204	0					
ANR	10889245	PrimaryExpression	4		10889204	1					
ANR	10889246	CompoundStatement		8:4:161:161	10889204	1					
ANR	10889247	ExpressionStatement	"gs_warn ( ""cannot find cmap table"" )"	291:8:7213:7246	10889204	0	True				
ANR	10889248	CallExpression	"gs_warn ( ""cannot find cmap table"" )"		10889204	0					
ANR	10889249	Callee	gs_warn		10889204	0					
ANR	10889250	Identifier	gs_warn		10889204	0					
ANR	10889251	ArgumentList	"""cannot find cmap table"""		10889204	1					
ANR	10889252	Argument	"""cannot find cmap table"""		10889204	0					
ANR	10889253	PrimaryExpression	"""cannot find cmap table"""		10889204	0					
ANR	10889254	ReturnStatement	return ;	292:8:7256:7262	10889204	1	True				
ANR	10889255	ExpressionStatement	cmapdata = font -> data + offset	295:4:7275:7305	10889204	5	True				
ANR	10889256	AssignmentExpression	cmapdata = font -> data + offset		10889204	0		=			
ANR	10889257	Identifier	cmapdata		10889204	0					
ANR	10889258	AdditiveExpression	font -> data + offset		10889204	1		+			
ANR	10889259	PtrMemberAccess	font -> data		10889204	0					
ANR	10889260	Identifier	font		10889204	0					
ANR	10889261	Identifier	data		10889204	1					
ANR	10889262	Identifier	offset		10889204	1					
ANR	10889263	IfStatement	if ( cmapdata + 4 < font -> data + font -> length )		10889204	6					
ANR	10889264	Condition	cmapdata + 4 < font -> data + font -> length	296:8:7315:7354	10889204	0	True				
ANR	10889265	RelationalExpression	cmapdata + 4 < font -> data + font -> length		10889204	0		<			
ANR	10889266	AdditiveExpression	cmapdata + 4		10889204	0		+			
ANR	10889267	Identifier	cmapdata		10889204	0					
ANR	10889268	PrimaryExpression	4		10889204	1					
ANR	10889269	AdditiveExpression	font -> data + font -> length		10889204	1		+			
ANR	10889270	PtrMemberAccess	font -> data		10889204	0					
ANR	10889271	Identifier	font		10889204	0					
ANR	10889272	Identifier	data		10889204	1					
ANR	10889273	PtrMemberAccess	font -> length		10889204	1					
ANR	10889274	Identifier	font		10889204	0					
ANR	10889275	Identifier	length		10889204	1					
ANR	10889276	CompoundStatement		15:4:319:319	10889204	1					
ANR	10889277	ExpressionStatement	nsubtables = u16 ( cmapdata + 2 )	298:8:7371:7401	10889204	0	True				
ANR	10889278	AssignmentExpression	nsubtables = u16 ( cmapdata + 2 )		10889204	0		=			
ANR	10889279	Identifier	nsubtables		10889204	0					
ANR	10889280	CallExpression	u16 ( cmapdata + 2 )		10889204	1					
ANR	10889281	Callee	u16		10889204	0					
ANR	10889282	Identifier	u16		10889204	0					
ANR	10889283	ArgumentList	cmapdata + 2		10889204	1					
ANR	10889284	Argument	cmapdata + 2		10889204	0					
ANR	10889285	AdditiveExpression	cmapdata + 2		10889204	0		+			
ANR	10889286	Identifier	cmapdata		10889204	0					
ANR	10889287	PrimaryExpression	2		10889204	1					
ANR	10889288	IfStatement	if ( nsubtables < 0 || length < 4 + nsubtables * 8 )		10889204	1					
ANR	10889289	Condition	nsubtables < 0 || length < 4 + nsubtables * 8	299:12:7415:7459	10889204	0	True				
ANR	10889290	OrExpression	nsubtables < 0 || length < 4 + nsubtables * 8		10889204	0		||			
ANR	10889291	RelationalExpression	nsubtables < 0		10889204	0		<			
ANR	10889292	Identifier	nsubtables		10889204	0					
ANR	10889293	PrimaryExpression	0		10889204	1					
ANR	10889294	RelationalExpression	length < 4 + nsubtables * 8		10889204	1		<			
ANR	10889295	Identifier	length		10889204	0					
ANR	10889296	AdditiveExpression	4 + nsubtables * 8		10889204	1		+			
ANR	10889297	PrimaryExpression	4		10889204	0					
ANR	10889298	MultiplicativeExpression	nsubtables * 8		10889204	1		*			
ANR	10889299	Identifier	nsubtables		10889204	0					
ANR	10889300	PrimaryExpression	8		10889204	1					
ANR	10889301	CompoundStatement		18:8:428:428	10889204	1					
ANR	10889302	ExpressionStatement	"gs_warn ( ""cannot find cmap sub-tables"" )"	301:12:7484:7522	10889204	0	True				
ANR	10889303	CallExpression	"gs_warn ( ""cannot find cmap sub-tables"" )"		10889204	0					
ANR	10889304	Callee	gs_warn		10889204	0					
ANR	10889305	Identifier	gs_warn		10889204	0					
ANR	10889306	ArgumentList	"""cannot find cmap sub-tables"""		10889204	1					
ANR	10889307	Argument	"""cannot find cmap sub-tables"""		10889204	0					
ANR	10889308	PrimaryExpression	"""cannot find cmap sub-tables"""		10889204	0					
ANR	10889309	ReturnStatement	return ;	302:12:7536:7542	10889204	1	True				
ANR	10889310	ExpressionStatement	font -> cmaptable = offset	305:8:7563:7587	10889204	2	True				
ANR	10889311	AssignmentExpression	font -> cmaptable = offset		10889204	0		=			
ANR	10889312	PtrMemberAccess	font -> cmaptable		10889204	0					
ANR	10889313	Identifier	font		10889204	0					
ANR	10889314	Identifier	cmaptable		10889204	1					
ANR	10889315	Identifier	offset		10889204	1					
ANR	10889316	ExpressionStatement	font -> cmapsubcount = nsubtables	306:8:7597:7628	10889204	3	True				
ANR	10889317	AssignmentExpression	font -> cmapsubcount = nsubtables		10889204	0		=			
ANR	10889318	PtrMemberAccess	font -> cmapsubcount		10889204	0					
ANR	10889319	Identifier	font		10889204	0					
ANR	10889320	Identifier	cmapsubcount		10889204	1					
ANR	10889321	Identifier	nsubtables		10889204	1					
ANR	10889322	ExpressionStatement	font -> cmapsubtable = 0	307:8:7638:7660	10889204	4	True				
ANR	10889323	AssignmentExpression	font -> cmapsubtable = 0		10889204	0		=			
ANR	10889324	PtrMemberAccess	font -> cmapsubtable		10889204	0					
ANR	10889325	Identifier	font		10889204	0					
ANR	10889326	Identifier	cmapsubtable		10889204	1					
ANR	10889327	PrimaryExpression	0		10889204	1					
ANR	10889328	ReturnType	static void		10889204	1					
ANR	10889329	Identifier	xps_load_sfnt_cmap		10889204	2					
ANR	10889330	ParameterList	xps_font_t * font		10889204	3					
ANR	10889331	Parameter	xps_font_t * font	282:19:7023:7038	10889204	0	True				
ANR	10889332	ParameterType	xps_font_t *		10889204	0					
ANR	10889333	Identifier	font		10889204	1					
ANR	10889334	CFGEntryNode	ENTRY		10889204		True				
ANR	10889335	CFGExitNode	EXIT		10889204		True				
ANR	10889336	Symbol	& length		10889204						
ANR	10889337	Symbol	offset		10889204						
ANR	10889338	Symbol	font -> cmapsubcount		10889204						
ANR	10889339	Symbol	length		10889204						
ANR	10889340	Symbol	font -> cmapsubtable		10889204						
ANR	10889341	Symbol	font -> cmaptable		10889204						
ANR	10889342	Symbol	font -> data		10889204						
ANR	10889343	Symbol	nsubtables		10889204						
ANR	10889344	Symbol	cmapdata		10889204						
ANR	10889345	Symbol	* font		10889204						
ANR	10889346	Symbol	u16		10889204						
ANR	10889347	Symbol	font -> length		10889204						
ANR	10889348	Symbol	xps_find_sfnt_table		10889204						
ANR	10889349	Symbol	font		10889204						
ANR	10889350	Function	xps_count_font_encodings	315:0:7719:7799							
ANR	10889351	FunctionDef	xps_count_font_encodings (xps_font_t * font)		10889350	0					
ANR	10889352	CompoundStatement		317:0:7766:7799	10889350	0					
ANR	10889353	ReturnStatement	return font -> cmapsubcount ;	318:4:7772:7797	10889350	0	True				
ANR	10889354	PtrMemberAccess	font -> cmapsubcount		10889350	0					
ANR	10889355	Identifier	font		10889350	0					
ANR	10889356	Identifier	cmapsubcount		10889350	1					
ANR	10889357	ReturnType	int		10889350	1					
ANR	10889358	Identifier	xps_count_font_encodings		10889350	2					
ANR	10889359	ParameterList	xps_font_t * font		10889350	3					
ANR	10889360	Parameter	xps_font_t * font	316:25:7748:7763	10889350	0	True				
ANR	10889361	ParameterType	xps_font_t *		10889350	0					
ANR	10889362	Identifier	font		10889350	1					
ANR	10889363	CFGEntryNode	ENTRY		10889350		True				
ANR	10889364	CFGExitNode	EXIT		10889350		True				
ANR	10889365	Symbol	font -> cmapsubcount		10889350						
ANR	10889366	Symbol	* font		10889350						
ANR	10889367	Symbol	font		10889350						
ANR	10889368	Function	xps_identify_font_encoding	325:0:7868:8174							
ANR	10889369	FunctionDef	"xps_identify_font_encoding (xps_font_t * font , int idx , int * pid , int * eid)"		10889368	0					
ANR	10889370	CompoundStatement		327:0:7947:8174	10889368	0					
ANR	10889371	IdentifierDeclStatement	"byte * cmapdata , * entry ;"	328:4:7953:7975	10889368	0	True				
ANR	10889372	IdentifierDecl	* cmapdata		10889368	0					
ANR	10889373	IdentifierDeclType	byte *		10889368	0					
ANR	10889374	Identifier	cmapdata		10889368	1					
ANR	10889375	IdentifierDecl	* entry		10889368	1					
ANR	10889376	IdentifierDeclType	byte *		10889368	0					
ANR	10889377	Identifier	entry		10889368	1					
ANR	10889378	IfStatement	if ( idx < 0 || idx >= font -> cmapsubcount )		10889368	1					
ANR	10889379	Condition	idx < 0 || idx >= font -> cmapsubcount	329:8:7985:8020	10889368	0	True				
ANR	10889380	OrExpression	idx < 0 || idx >= font -> cmapsubcount		10889368	0		||			
ANR	10889381	RelationalExpression	idx < 0		10889368	0		<			
ANR	10889382	Identifier	idx		10889368	0					
ANR	10889383	PrimaryExpression	0		10889368	1					
ANR	10889384	RelationalExpression	idx >= font -> cmapsubcount		10889368	1		>=			
ANR	10889385	Identifier	idx		10889368	0					
ANR	10889386	PtrMemberAccess	font -> cmapsubcount		10889368	1					
ANR	10889387	Identifier	font		10889368	0					
ANR	10889388	Identifier	cmapsubcount		10889368	1					
ANR	10889389	ReturnStatement	return ;	330:8:8031:8037	10889368	1	True				
ANR	10889390	ExpressionStatement	cmapdata = font -> data + font -> cmaptable	331:4:8043:8082	10889368	2	True				
ANR	10889391	AssignmentExpression	cmapdata = font -> data + font -> cmaptable		10889368	0		=			
ANR	10889392	Identifier	cmapdata		10889368	0					
ANR	10889393	AdditiveExpression	font -> data + font -> cmaptable		10889368	1		+			
ANR	10889394	PtrMemberAccess	font -> data		10889368	0					
ANR	10889395	Identifier	font		10889368	0					
ANR	10889396	Identifier	data		10889368	1					
ANR	10889397	PtrMemberAccess	font -> cmaptable		10889368	1					
ANR	10889398	Identifier	font		10889368	0					
ANR	10889399	Identifier	cmaptable		10889368	1					
ANR	10889400	ExpressionStatement	entry = cmapdata + 4 + idx * 8	332:4:8088:8118	10889368	3	True				
ANR	10889401	AssignmentExpression	entry = cmapdata + 4 + idx * 8		10889368	0		=			
ANR	10889402	Identifier	entry		10889368	0					
ANR	10889403	AdditiveExpression	cmapdata + 4 + idx * 8		10889368	1		+			
ANR	10889404	Identifier	cmapdata		10889368	0					
ANR	10889405	AdditiveExpression	4 + idx * 8		10889368	1		+			
ANR	10889406	PrimaryExpression	4		10889368	0					
ANR	10889407	MultiplicativeExpression	idx * 8		10889368	1		*			
ANR	10889408	Identifier	idx		10889368	0					
ANR	10889409	PrimaryExpression	8		10889368	1					
ANR	10889410	ExpressionStatement	* pid = u16 ( entry + 0 )	333:4:8124:8145	10889368	4	True				
ANR	10889411	AssignmentExpression	* pid = u16 ( entry + 0 )		10889368	0		=			
ANR	10889412	UnaryOperationExpression	* pid		10889368	0					
ANR	10889413	UnaryOperator	*		10889368	0					
ANR	10889414	Identifier	pid		10889368	1					
ANR	10889415	CallExpression	u16 ( entry + 0 )		10889368	1					
ANR	10889416	Callee	u16		10889368	0					
ANR	10889417	Identifier	u16		10889368	0					
ANR	10889418	ArgumentList	entry + 0		10889368	1					
ANR	10889419	Argument	entry + 0		10889368	0					
ANR	10889420	AdditiveExpression	entry + 0		10889368	0		+			
ANR	10889421	Identifier	entry		10889368	0					
ANR	10889422	PrimaryExpression	0		10889368	1					
ANR	10889423	ExpressionStatement	* eid = u16 ( entry + 2 )	334:4:8151:8172	10889368	5	True				
ANR	10889424	AssignmentExpression	* eid = u16 ( entry + 2 )		10889368	0		=			
ANR	10889425	UnaryOperationExpression	* eid		10889368	0					
ANR	10889426	UnaryOperator	*		10889368	0					
ANR	10889427	Identifier	eid		10889368	1					
ANR	10889428	CallExpression	u16 ( entry + 2 )		10889368	1					
ANR	10889429	Callee	u16		10889368	0					
ANR	10889430	Identifier	u16		10889368	0					
ANR	10889431	ArgumentList	entry + 2		10889368	1					
ANR	10889432	Argument	entry + 2		10889368	0					
ANR	10889433	AdditiveExpression	entry + 2		10889368	0		+			
ANR	10889434	Identifier	entry		10889368	0					
ANR	10889435	PrimaryExpression	2		10889368	1					
ANR	10889436	ReturnType	void		10889368	1					
ANR	10889437	Identifier	xps_identify_font_encoding		10889368	2					
ANR	10889438	ParameterList	"xps_font_t * font , int idx , int * pid , int * eid"		10889368	3					
ANR	10889439	Parameter	xps_font_t * font	326:27:7900:7915	10889368	0	True				
ANR	10889440	ParameterType	xps_font_t *		10889368	0					
ANR	10889441	Identifier	font		10889368	1					
ANR	10889442	Parameter	int idx	326:45:7918:7924	10889368	1	True				
ANR	10889443	ParameterType	int		10889368	0					
ANR	10889444	Identifier	idx		10889368	1					
ANR	10889445	Parameter	int * pid	326:54:7927:7934	10889368	2	True				
ANR	10889446	ParameterType	int *		10889368	0					
ANR	10889447	Identifier	pid		10889368	1					
ANR	10889448	Parameter	int * eid	326:64:7937:7944	10889368	3	True				
ANR	10889449	ParameterType	int *		10889368	0					
ANR	10889450	Identifier	eid		10889368	1					
ANR	10889451	CFGEntryNode	ENTRY		10889368		True				
ANR	10889452	CFGExitNode	EXIT		10889368		True				
ANR	10889453	Symbol	eid		10889368						
ANR	10889454	Symbol	font -> cmapsubcount		10889368						
ANR	10889455	Symbol	pid		10889368						
ANR	10889456	Symbol	entry		10889368						
ANR	10889457	Symbol	font -> cmaptable		10889368						
ANR	10889458	Symbol	* pid		10889368						
ANR	10889459	Symbol	* eid		10889368						
ANR	10889460	Symbol	font -> data		10889368						
ANR	10889461	Symbol	cmapdata		10889368						
ANR	10889462	Symbol	* font		10889368						
ANR	10889463	Symbol	u16		10889368						
ANR	10889464	Symbol	idx		10889368						
ANR	10889465	Symbol	font		10889368						
ANR	10889466	Function	xps_select_font_encoding	341:0:8244:8763							
ANR	10889467	FunctionDef	"xps_select_font_encoding (xps_font_t * font , int idx)"		10889466	0					
ANR	10889468	CompoundStatement		343:0:8300:8763	10889466	0					
ANR	10889469	IdentifierDeclStatement	"byte * cmapdata , * entry ;"	344:4:8306:8328	10889466	0	True				
ANR	10889470	IdentifierDecl	* cmapdata		10889466	0					
ANR	10889471	IdentifierDeclType	byte *		10889466	0					
ANR	10889472	Identifier	cmapdata		10889466	1					
ANR	10889473	IdentifierDecl	* entry		10889466	1					
ANR	10889474	IdentifierDeclType	byte *		10889466	0					
ANR	10889475	Identifier	entry		10889466	1					
ANR	10889476	IdentifierDeclStatement	"int pid , eid ;"	345:4:8334:8346	10889466	1	True				
ANR	10889477	IdentifierDecl	pid		10889466	0					
ANR	10889478	IdentifierDeclType	int		10889466	0					
ANR	10889479	Identifier	pid		10889466	1					
ANR	10889480	IdentifierDecl	eid		10889466	1					
ANR	10889481	IdentifierDeclType	int		10889466	0					
ANR	10889482	Identifier	eid		10889466	1					
ANR	10889483	IfStatement	if ( idx < 0 || idx >= font -> cmapsubcount )		10889466	2					
ANR	10889484	Condition	idx < 0 || idx >= font -> cmapsubcount	346:8:8356:8391	10889466	0	True				
ANR	10889485	OrExpression	idx < 0 || idx >= font -> cmapsubcount		10889466	0		||			
ANR	10889486	RelationalExpression	idx < 0		10889466	0		<			
ANR	10889487	Identifier	idx		10889466	0					
ANR	10889488	PrimaryExpression	0		10889466	1					
ANR	10889489	RelationalExpression	idx >= font -> cmapsubcount		10889466	1		>=			
ANR	10889490	Identifier	idx		10889466	0					
ANR	10889491	PtrMemberAccess	font -> cmapsubcount		10889466	1					
ANR	10889492	Identifier	font		10889466	0					
ANR	10889493	Identifier	cmapsubcount		10889466	1					
ANR	10889494	ReturnStatement	return 0 ;	347:8:8402:8410	10889466	1	True				
ANR	10889495	PrimaryExpression	0		10889466	0					
ANR	10889496	ExpressionStatement	cmapdata = font -> data + font -> cmaptable	348:4:8416:8455	10889466	3	True				
ANR	10889497	AssignmentExpression	cmapdata = font -> data + font -> cmaptable		10889466	0		=			
ANR	10889498	Identifier	cmapdata		10889466	0					
ANR	10889499	AdditiveExpression	font -> data + font -> cmaptable		10889466	1		+			
ANR	10889500	PtrMemberAccess	font -> data		10889466	0					
ANR	10889501	Identifier	font		10889466	0					
ANR	10889502	Identifier	data		10889466	1					
ANR	10889503	PtrMemberAccess	font -> cmaptable		10889466	1					
ANR	10889504	Identifier	font		10889466	0					
ANR	10889505	Identifier	cmaptable		10889466	1					
ANR	10889506	ExpressionStatement	entry = cmapdata + 4 + idx * 8	349:4:8461:8491	10889466	4	True				
ANR	10889507	AssignmentExpression	entry = cmapdata + 4 + idx * 8		10889466	0		=			
ANR	10889508	Identifier	entry		10889466	0					
ANR	10889509	AdditiveExpression	cmapdata + 4 + idx * 8		10889466	1		+			
ANR	10889510	Identifier	cmapdata		10889466	0					
ANR	10889511	AdditiveExpression	4 + idx * 8		10889466	1		+			
ANR	10889512	PrimaryExpression	4		10889466	0					
ANR	10889513	MultiplicativeExpression	idx * 8		10889466	1		*			
ANR	10889514	Identifier	idx		10889466	0					
ANR	10889515	PrimaryExpression	8		10889466	1					
ANR	10889516	ExpressionStatement	pid = u16 ( entry + 0 )	350:4:8497:8517	10889466	5	True				
ANR	10889517	AssignmentExpression	pid = u16 ( entry + 0 )		10889466	0		=			
ANR	10889518	Identifier	pid		10889466	0					
ANR	10889519	CallExpression	u16 ( entry + 0 )		10889466	1					
ANR	10889520	Callee	u16		10889466	0					
ANR	10889521	Identifier	u16		10889466	0					
ANR	10889522	ArgumentList	entry + 0		10889466	1					
ANR	10889523	Argument	entry + 0		10889466	0					
ANR	10889524	AdditiveExpression	entry + 0		10889466	0		+			
ANR	10889525	Identifier	entry		10889466	0					
ANR	10889526	PrimaryExpression	0		10889466	1					
ANR	10889527	ExpressionStatement	eid = u16 ( entry + 2 )	351:4:8523:8543	10889466	6	True				
ANR	10889528	AssignmentExpression	eid = u16 ( entry + 2 )		10889466	0		=			
ANR	10889529	Identifier	eid		10889466	0					
ANR	10889530	CallExpression	u16 ( entry + 2 )		10889466	1					
ANR	10889531	Callee	u16		10889466	0					
ANR	10889532	Identifier	u16		10889466	0					
ANR	10889533	ArgumentList	entry + 2		10889466	1					
ANR	10889534	Argument	entry + 2		10889466	0					
ANR	10889535	AdditiveExpression	entry + 2		10889466	0		+			
ANR	10889536	Identifier	entry		10889466	0					
ANR	10889537	PrimaryExpression	2		10889466	1					
ANR	10889538	ExpressionStatement	font -> cmapsubtable = font -> cmaptable + u32 ( entry + 4 )	352:4:8549:8602	10889466	7	True				
ANR	10889539	AssignmentExpression	font -> cmapsubtable = font -> cmaptable + u32 ( entry + 4 )		10889466	0		=			
ANR	10889540	PtrMemberAccess	font -> cmapsubtable		10889466	0					
ANR	10889541	Identifier	font		10889466	0					
ANR	10889542	Identifier	cmapsubtable		10889466	1					
ANR	10889543	AdditiveExpression	font -> cmaptable + u32 ( entry + 4 )		10889466	1		+			
ANR	10889544	PtrMemberAccess	font -> cmaptable		10889466	0					
ANR	10889545	Identifier	font		10889466	0					
ANR	10889546	Identifier	cmaptable		10889466	1					
ANR	10889547	CallExpression	u32 ( entry + 4 )		10889466	1					
ANR	10889548	Callee	u32		10889466	0					
ANR	10889549	Identifier	u32		10889466	0					
ANR	10889550	ArgumentList	entry + 4		10889466	1					
ANR	10889551	Argument	entry + 4		10889466	0					
ANR	10889552	AdditiveExpression	entry + 4		10889466	0		+			
ANR	10889553	Identifier	entry		10889466	0					
ANR	10889554	PrimaryExpression	4		10889466	1					
ANR	10889555	IfStatement	if ( font -> cmapsubtable >= font -> length )		10889466	8					
ANR	10889556	Condition	font -> cmapsubtable >= font -> length	353:8:8612:8645	10889466	0	True				
ANR	10889557	RelationalExpression	font -> cmapsubtable >= font -> length		10889466	0		>=			
ANR	10889558	PtrMemberAccess	font -> cmapsubtable		10889466	0					
ANR	10889559	Identifier	font		10889466	0					
ANR	10889560	Identifier	cmapsubtable		10889466	1					
ANR	10889561	PtrMemberAccess	font -> length		10889466	1					
ANR	10889562	Identifier	font		10889466	0					
ANR	10889563	Identifier	length		10889466	1					
ANR	10889564	CompoundStatement		11:44:347:347	10889466	1					
ANR	10889565	ExpressionStatement	font -> cmapsubtable = 0	354:8:8658:8680	10889466	0	True				
ANR	10889566	AssignmentExpression	font -> cmapsubtable = 0		10889466	0		=			
ANR	10889567	PtrMemberAccess	font -> cmapsubtable		10889466	0					
ANR	10889568	Identifier	font		10889466	0					
ANR	10889569	Identifier	cmapsubtable		10889466	1					
ANR	10889570	PrimaryExpression	0		10889466	1					
ANR	10889571	ReturnStatement	return 0 ;	355:8:8690:8698	10889466	1	True				
ANR	10889572	PrimaryExpression	0		10889466	0					
ANR	10889573	ExpressionStatement	font -> usepua = ( pid == 3 && eid == 0 )	357:4:8710:8747	10889466	9	True				
ANR	10889574	AssignmentExpression	font -> usepua = ( pid == 3 && eid == 0 )		10889466	0		=			
ANR	10889575	PtrMemberAccess	font -> usepua		10889466	0					
ANR	10889576	Identifier	font		10889466	0					
ANR	10889577	Identifier	usepua		10889466	1					
ANR	10889578	AndExpression	pid == 3 && eid == 0		10889466	1		&&			
ANR	10889579	EqualityExpression	pid == 3		10889466	0		==			
ANR	10889580	Identifier	pid		10889466	0					
ANR	10889581	PrimaryExpression	3		10889466	1					
ANR	10889582	EqualityExpression	eid == 0		10889466	1		==			
ANR	10889583	Identifier	eid		10889466	0					
ANR	10889584	PrimaryExpression	0		10889466	1					
ANR	10889585	ReturnStatement	return 1 ;	358:4:8753:8761	10889466	10	True				
ANR	10889586	PrimaryExpression	1		10889466	0					
ANR	10889587	ReturnType	int		10889466	1					
ANR	10889588	Identifier	xps_select_font_encoding		10889466	2					
ANR	10889589	ParameterList	"xps_font_t * font , int idx"		10889466	3					
ANR	10889590	Parameter	xps_font_t * font	342:25:8273:8288	10889466	0	True				
ANR	10889591	ParameterType	xps_font_t *		10889466	0					
ANR	10889592	Identifier	font		10889466	1					
ANR	10889593	Parameter	int idx	342:43:8291:8297	10889466	1	True				
ANR	10889594	ParameterType	int		10889466	0					
ANR	10889595	Identifier	idx		10889466	1					
ANR	10889596	CFGEntryNode	ENTRY		10889466		True				
ANR	10889597	CFGExitNode	EXIT		10889466		True				
ANR	10889598	Symbol	eid		10889466						
ANR	10889599	Symbol	font -> cmapsubcount		10889466						
ANR	10889600	Symbol	font -> usepua		10889466						
ANR	10889601	Symbol	pid		10889466						
ANR	10889602	Symbol	font -> cmapsubtable		10889466						
ANR	10889603	Symbol	entry		10889466						
ANR	10889604	Symbol	font -> cmaptable		10889466						
ANR	10889605	Symbol	u32		10889466						
ANR	10889606	Symbol	font -> data		10889466						
ANR	10889607	Symbol	cmapdata		10889466						
ANR	10889608	Symbol	* font		10889466						
ANR	10889609	Symbol	u16		10889466						
ANR	10889610	Symbol	idx		10889466						
ANR	10889611	Symbol	font -> length		10889466						
ANR	10889612	Symbol	font		10889466						
ANR	10889613	Function	xps_encode_font_char_imp	366:0:8879:12335							
ANR	10889614	FunctionDef	"xps_encode_font_char_imp (xps_font_t * font , int code)"		10889613	0					
ANR	10889615	CompoundStatement		368:0:8943:12335	10889613	0					
ANR	10889616	IdentifierDeclStatement	byte * table ;	369:4:8949:8960	10889613	0	True				
ANR	10889617	IdentifierDecl	* table		10889613	0					
ANR	10889618	IdentifierDeclType	byte *		10889613	0					
ANR	10889619	Identifier	table		10889613	1					
ANR	10889620	IfStatement	if ( font -> cmapsubtable <= 0 )		10889613	1					
ANR	10889621	Condition	font -> cmapsubtable <= 0	372:8:9015:9037	10889613	0	True				
ANR	10889622	RelationalExpression	font -> cmapsubtable <= 0		10889613	0		<=			
ANR	10889623	PtrMemberAccess	font -> cmapsubtable		10889613	0					
ANR	10889624	Identifier	font		10889613	0					
ANR	10889625	Identifier	cmapsubtable		10889613	1					
ANR	10889626	PrimaryExpression	0		10889613	1					
ANR	10889627	ReturnStatement	return code ;	373:8:9048:9059	10889613	1	True				
ANR	10889628	Identifier	code		10889613	0					
ANR	10889629	ExpressionStatement	table = font -> data + font -> cmapsubtable	375:4:9066:9105	10889613	2	True				
ANR	10889630	AssignmentExpression	table = font -> data + font -> cmapsubtable		10889613	0		=			
ANR	10889631	Identifier	table		10889613	0					
ANR	10889632	AdditiveExpression	font -> data + font -> cmapsubtable		10889613	1		+			
ANR	10889633	PtrMemberAccess	font -> data		10889613	0					
ANR	10889634	Identifier	font		10889613	0					
ANR	10889635	Identifier	data		10889613	1					
ANR	10889636	PtrMemberAccess	font -> cmapsubtable		10889613	1					
ANR	10889637	Identifier	font		10889613	0					
ANR	10889638	Identifier	cmapsubtable		10889613	1					
ANR	10889639	SwitchStatement	switch ( u16 ( table ) )		10889613	3					
ANR	10889640	Condition	u16 ( table )	377:12:9120:9129	10889613	0	True				
ANR	10889641	CallExpression	u16 ( table )		10889613	0					
ANR	10889642	Callee	u16		10889613	0					
ANR	10889643	Identifier	u16		10889613	0					
ANR	10889644	ArgumentList	table		10889613	1					
ANR	10889645	Argument	table		10889613	0					
ANR	10889646	Identifier	table		10889613	0					
ANR	10889647	CompoundStatement		11:4:192:192	10889613	1					
ANR	10889648	Label	case 0 :	379:4:9142:9148	10889613	0	True				
ANR	10889649	ReturnStatement	return table [ code + 6 ] ;	380:8:9195:9217	10889613	1	True				
ANR	10889650	ArrayIndexing	table [ code + 6 ]		10889613	0					
ANR	10889651	Identifier	table		10889613	0					
ANR	10889652	AdditiveExpression	code + 6		10889613	1		+			
ANR	10889653	Identifier	code		10889613	0					
ANR	10889654	PrimaryExpression	6		10889613	1					
ANR	10889655	Label	case 4 :	382:4:9224:9230	10889613	2	True				
ANR	10889656	CompoundStatement		23:12:627:633	10889613	3					
ANR	10889657	IdentifierDeclStatement	int segCount2 = u16 ( table + 6 ) ;	384:12:9295:9325	10889613	0	True				
ANR	10889658	IdentifierDecl	segCount2 = u16 ( table + 6 )		10889613	0					
ANR	10889659	IdentifierDeclType	int		10889613	0					
ANR	10889660	Identifier	segCount2		10889613	1					
ANR	10889661	AssignmentExpression	segCount2 = u16 ( table + 6 )		10889613	2		=			
ANR	10889662	Identifier	segCount2		10889613	0					
ANR	10889663	CallExpression	u16 ( table + 6 )		10889613	1					
ANR	10889664	Callee	u16		10889613	0					
ANR	10889665	Identifier	u16		10889613	0					
ANR	10889666	ArgumentList	table + 6		10889613	1					
ANR	10889667	Argument	table + 6		10889613	0					
ANR	10889668	AdditiveExpression	table + 6		10889613	0		+			
ANR	10889669	Identifier	table		10889613	0					
ANR	10889670	PrimaryExpression	6		10889613	1					
ANR	10889671	IdentifierDeclStatement	byte * endCount = table + 14 ;	385:12:9339:9366	10889613	1	True				
ANR	10889672	IdentifierDecl	* endCount = table + 14		10889613	0					
ANR	10889673	IdentifierDeclType	byte *		10889613	0					
ANR	10889674	Identifier	endCount		10889613	1					
ANR	10889675	AssignmentExpression	* endCount = table + 14		10889613	2		=			
ANR	10889676	Identifier	endCount		10889613	0					
ANR	10889677	AdditiveExpression	table + 14		10889613	1		+			
ANR	10889678	Identifier	table		10889613	0					
ANR	10889679	PrimaryExpression	14		10889613	1					
ANR	10889680	IdentifierDeclStatement	byte * startCount = endCount + segCount2 + 2 ;	386:12:9380:9423	10889613	2	True				
ANR	10889681	IdentifierDecl	* startCount = endCount + segCount2 + 2		10889613	0					
ANR	10889682	IdentifierDeclType	byte *		10889613	0					
ANR	10889683	Identifier	startCount		10889613	1					
ANR	10889684	AssignmentExpression	* startCount = endCount + segCount2 + 2		10889613	2		=			
ANR	10889685	Identifier	startCount		10889613	0					
ANR	10889686	AdditiveExpression	endCount + segCount2 + 2		10889613	1		+			
ANR	10889687	Identifier	endCount		10889613	0					
ANR	10889688	AdditiveExpression	segCount2 + 2		10889613	1		+			
ANR	10889689	Identifier	segCount2		10889613	0					
ANR	10889690	PrimaryExpression	2		10889613	1					
ANR	10889691	IdentifierDeclStatement	byte * idDelta = startCount + segCount2 ;	387:12:9437:9475	10889613	3	True				
ANR	10889692	IdentifierDecl	* idDelta = startCount + segCount2		10889613	0					
ANR	10889693	IdentifierDeclType	byte *		10889613	0					
ANR	10889694	Identifier	idDelta		10889613	1					
ANR	10889695	AssignmentExpression	* idDelta = startCount + segCount2		10889613	2		=			
ANR	10889696	Identifier	idDelta		10889613	0					
ANR	10889697	AdditiveExpression	startCount + segCount2		10889613	1		+			
ANR	10889698	Identifier	startCount		10889613	0					
ANR	10889699	Identifier	segCount2		10889613	1					
ANR	10889700	IdentifierDeclStatement	byte * idRangeOffset = idDelta + segCount2 ;	388:12:9489:9530	10889613	4	True				
ANR	10889701	IdentifierDecl	* idRangeOffset = idDelta + segCount2		10889613	0					
ANR	10889702	IdentifierDeclType	byte *		10889613	0					
ANR	10889703	Identifier	idRangeOffset		10889613	1					
ANR	10889704	AssignmentExpression	* idRangeOffset = idDelta + segCount2		10889613	2		=			
ANR	10889705	Identifier	idRangeOffset		10889613	0					
ANR	10889706	AdditiveExpression	idDelta + segCount2		10889613	1		+			
ANR	10889707	Identifier	idDelta		10889613	0					
ANR	10889708	Identifier	segCount2		10889613	1					
ANR	10889709	IdentifierDeclStatement	byte * giddata ;	389:12:9544:9557	10889613	5	True				
ANR	10889710	IdentifierDecl	* giddata		10889613	0					
ANR	10889711	IdentifierDeclType	byte *		10889613	0					
ANR	10889712	Identifier	giddata		10889613	1					
ANR	10889713	IdentifierDeclStatement	int i2 ;	390:12:9571:9577	10889613	6	True				
ANR	10889714	IdentifierDecl	i2		10889613	0					
ANR	10889715	IdentifierDeclType	int		10889613	0					
ANR	10889716	Identifier	i2		10889613	1					
ANR	10889717	IfStatement	if ( segCount2 < 3 || segCount2 > 65535 || idRangeOffset > font -> data + font -> length )		10889613	7					
ANR	10889718	Condition	segCount2 < 3 || segCount2 > 65535 || idRangeOffset > font -> data + font -> length	392:16:9596:9689	10889613	0	True				
ANR	10889719	OrExpression	segCount2 < 3 || segCount2 > 65535 || idRangeOffset > font -> data + font -> length		10889613	0		||			
ANR	10889720	RelationalExpression	segCount2 < 3		10889613	0		<			
ANR	10889721	Identifier	segCount2		10889613	0					
ANR	10889722	PrimaryExpression	3		10889613	1					
ANR	10889723	OrExpression	segCount2 > 65535 || idRangeOffset > font -> data + font -> length		10889613	1		||			
ANR	10889724	RelationalExpression	segCount2 > 65535		10889613	0		>			
ANR	10889725	Identifier	segCount2		10889613	0					
ANR	10889726	PrimaryExpression	65535		10889613	1					
ANR	10889727	RelationalExpression	idRangeOffset > font -> data + font -> length		10889613	1		>			
ANR	10889728	Identifier	idRangeOffset		10889613	0					
ANR	10889729	AdditiveExpression	font -> data + font -> length		10889613	1		+			
ANR	10889730	PtrMemberAccess	font -> data		10889613	0					
ANR	10889731	Identifier	font		10889613	0					
ANR	10889732	Identifier	data		10889613	1					
ANR	10889733	PtrMemberAccess	font -> length		10889613	1					
ANR	10889734	Identifier	font		10889613	0					
ANR	10889735	Identifier	length		10889613	1					
ANR	10889736	ReturnStatement	return gs_error_invalidfont ;	394:15:9707:9734	10889613	1	True				
ANR	10889737	Identifier	gs_error_invalidfont		10889613	0					
ANR	10889738	ForStatement	for ( i2 = 0 ; i2 < segCount2 - 3 ; i2 += 2 )		10889613	8					
ANR	10889739	ForInit	i2 = 0 ;	396:16:9753:9759	10889613	0	True				
ANR	10889740	AssignmentExpression	i2 = 0		10889613	0		=			
ANR	10889741	Identifier	i2		10889613	0					
ANR	10889742	PrimaryExpression	0		10889613	1					
ANR	10889743	Condition	i2 < segCount2 - 3	396:24:9761:9778	10889613	1	True				
ANR	10889744	RelationalExpression	i2 < segCount2 - 3		10889613	0		<			
ANR	10889745	Identifier	i2		10889613	0					
ANR	10889746	AdditiveExpression	segCount2 - 3		10889613	1		-			
ANR	10889747	Identifier	segCount2		10889613	0					
ANR	10889748	PrimaryExpression	3		10889613	1					
ANR	10889749	AssignmentExpression	i2 += 2	396:44:9781:9787	10889613	2	True	+=			
ANR	10889750	Identifier	i2		10889613	0					
ANR	10889751	PrimaryExpression	2		10889613	1					
ANR	10889752	CompoundStatement		33:16:959:968	10889613	3					
ANR	10889753	IdentifierDeclStatement	"int delta , roff ;"	398:16:9820:9835	10889613	0	True				
ANR	10889754	IdentifierDecl	delta		10889613	0					
ANR	10889755	IdentifierDeclType	int		10889613	0					
ANR	10889756	Identifier	delta		10889613	1					
ANR	10889757	IdentifierDecl	roff		10889613	1					
ANR	10889758	IdentifierDeclType	int		10889613	0					
ANR	10889759	Identifier	roff		10889613	1					
ANR	10889760	IdentifierDeclStatement	int start = u16 ( startCount + i2 ) ;	399:16:9853:9885	10889613	1	True				
ANR	10889761	IdentifierDecl	start = u16 ( startCount + i2 )		10889613	0					
ANR	10889762	IdentifierDeclType	int		10889613	0					
ANR	10889763	Identifier	start		10889613	1					
ANR	10889764	AssignmentExpression	start = u16 ( startCount + i2 )		10889613	2		=			
ANR	10889765	Identifier	start		10889613	0					
ANR	10889766	CallExpression	u16 ( startCount + i2 )		10889613	1					
ANR	10889767	Callee	u16		10889613	0					
ANR	10889768	Identifier	u16		10889613	0					
ANR	10889769	ArgumentList	startCount + i2		10889613	1					
ANR	10889770	Argument	startCount + i2		10889613	0					
ANR	10889771	AdditiveExpression	startCount + i2		10889613	0		+			
ANR	10889772	Identifier	startCount		10889613	0					
ANR	10889773	Identifier	i2		10889613	1					
ANR	10889774	IdentifierDeclStatement	int glyph ;	400:16:9903:9912	10889613	2	True				
ANR	10889775	IdentifierDecl	glyph		10889613	0					
ANR	10889776	IdentifierDeclType	int		10889613	0					
ANR	10889777	Identifier	glyph		10889613	1					
ANR	10889778	IfStatement	if ( code < start )		10889613	3					
ANR	10889779	Condition	code < start	402:21:9936:9947	10889613	0	True				
ANR	10889780	RelationalExpression	code < start		10889613	0		<			
ANR	10889781	Identifier	code		10889613	0					
ANR	10889782	Identifier	start		10889613	1					
ANR	10889783	ReturnStatement	return 0 ;	403:20:9971:9979	10889613	1	True				
ANR	10889784	PrimaryExpression	0		10889613	0					
ANR	10889785	IfStatement	if ( code > u16 ( endCount + i2 ) )		10889613	4					
ANR	10889786	Condition	code > u16 ( endCount + i2 )	404:21:10002:10026	10889613	0	True				
ANR	10889787	RelationalExpression	code > u16 ( endCount + i2 )		10889613	0		>			
ANR	10889788	Identifier	code		10889613	0					
ANR	10889789	CallExpression	u16 ( endCount + i2 )		10889613	1					
ANR	10889790	Callee	u16		10889613	0					
ANR	10889791	Identifier	u16		10889613	0					
ANR	10889792	ArgumentList	endCount + i2		10889613	1					
ANR	10889793	Argument	endCount + i2		10889613	0					
ANR	10889794	AdditiveExpression	endCount + i2		10889613	0		+			
ANR	10889795	Identifier	endCount		10889613	0					
ANR	10889796	Identifier	i2		10889613	1					
ANR	10889797	ContinueStatement	continue ;	405:20:10050:10058	10889613	1	True				
ANR	10889798	ExpressionStatement	delta = s16 ( idDelta + i2 )	406:16:10076:10101	10889613	5	True				
ANR	10889799	AssignmentExpression	delta = s16 ( idDelta + i2 )		10889613	0		=			
ANR	10889800	Identifier	delta		10889613	0					
ANR	10889801	CallExpression	s16 ( idDelta + i2 )		10889613	1					
ANR	10889802	Callee	s16		10889613	0					
ANR	10889803	Identifier	s16		10889613	0					
ANR	10889804	ArgumentList	idDelta + i2		10889613	1					
ANR	10889805	Argument	idDelta + i2		10889613	0					
ANR	10889806	AdditiveExpression	idDelta + i2		10889613	0		+			
ANR	10889807	Identifier	idDelta		10889613	0					
ANR	10889808	Identifier	i2		10889613	1					
ANR	10889809	ExpressionStatement	roff = u16 ( idRangeOffset + i2 )	407:16:10119:10149	10889613	6	True				
ANR	10889810	AssignmentExpression	roff = u16 ( idRangeOffset + i2 )		10889613	0		=			
ANR	10889811	Identifier	roff		10889613	0					
ANR	10889812	CallExpression	u16 ( idRangeOffset + i2 )		10889613	1					
ANR	10889813	Callee	u16		10889613	0					
ANR	10889814	Identifier	u16		10889613	0					
ANR	10889815	ArgumentList	idRangeOffset + i2		10889613	1					
ANR	10889816	Argument	idRangeOffset + i2		10889613	0					
ANR	10889817	AdditiveExpression	idRangeOffset + i2		10889613	0		+			
ANR	10889818	Identifier	idRangeOffset		10889613	0					
ANR	10889819	Identifier	i2		10889613	1					
ANR	10889820	IfStatement	if ( roff == 0 )		10889613	7					
ANR	10889821	Condition	roff == 0	408:21:10172:10180	10889613	0	True				
ANR	10889822	EqualityExpression	roff == 0		10889613	0		==			
ANR	10889823	Identifier	roff		10889613	0					
ANR	10889824	PrimaryExpression	0		10889613	1					
ANR	10889825	CompoundStatement		42:16:1256:1256	10889613	1					
ANR	10889826	ReturnStatement	return ( code + delta ) & 0xffff ;	410:20:10222:10254	10889613	0	True				
ANR	10889827	BitAndExpression	( code + delta ) & 0xffff		10889613	0		&			
ANR	10889828	AdditiveExpression	code + delta		10889613	0		+			
ANR	10889829	Identifier	code		10889613	0					
ANR	10889830	Identifier	delta		10889613	1					
ANR	10889831	PrimaryExpression	0xffff		10889613	1					
ANR	10889832	IfStatement	if ( ( giddata = ( idRangeOffset + i2 + roff + ( ( code - start ) << 1 ) ) ) > font -> data + font -> length )		10889613	8					
ANR	10889833	Condition	( giddata = ( idRangeOffset + i2 + roff + ( ( code - start ) << 1 ) ) ) > font -> data + font -> length	412:20:10310:10420	10889613	0	True				
ANR	10889834	RelationalExpression	( giddata = ( idRangeOffset + i2 + roff + ( ( code - start ) << 1 ) ) ) > font -> data + font -> length		10889613	0		>			
ANR	10889835	AssignmentExpression	giddata = ( idRangeOffset + i2 + roff + ( ( code - start ) << 1 ) )		10889613	0		=			
ANR	10889836	Identifier	giddata		10889613	0					
ANR	10889837	AdditiveExpression	idRangeOffset + i2 + roff + ( ( code - start ) << 1 )		10889613	1		+			
ANR	10889838	Identifier	idRangeOffset		10889613	0					
ANR	10889839	AdditiveExpression	i2 + roff + ( ( code - start ) << 1 )		10889613	1		+			
ANR	10889840	Identifier	i2		10889613	0					
ANR	10889841	AdditiveExpression	roff + ( ( code - start ) << 1 )		10889613	1		+			
ANR	10889842	Identifier	roff		10889613	0					
ANR	10889843	ShiftExpression	( code - start ) << 1		10889613	1		<<			
ANR	10889844	AdditiveExpression	code - start		10889613	0		-			
ANR	10889845	Identifier	code		10889613	0					
ANR	10889846	Identifier	start		10889613	1					
ANR	10889847	PrimaryExpression	1		10889613	1					
ANR	10889848	AdditiveExpression	font -> data + font -> length		10889613	1		+			
ANR	10889849	PtrMemberAccess	font -> data		10889613	0					
ANR	10889850	Identifier	font		10889613	0					
ANR	10889851	Identifier	data		10889613	1					
ANR	10889852	PtrMemberAccess	font -> length		10889613	1					
ANR	10889853	Identifier	font		10889613	0					
ANR	10889854	Identifier	length		10889613	1					
ANR	10889855	CompoundStatement		46:47:1479:1479	10889613	1					
ANR	10889856	ReturnStatement	return code ;	414:20:10445:10456	10889613	0	True				
ANR	10889857	Identifier	code		10889613	0					
ANR	10889858	ExpressionStatement	glyph = u16 ( giddata )	416:16:10492:10512	10889613	9	True				
ANR	10889859	AssignmentExpression	glyph = u16 ( giddata )		10889613	0		=			
ANR	10889860	Identifier	glyph		10889613	0					
ANR	10889861	CallExpression	u16 ( giddata )		10889613	1					
ANR	10889862	Callee	u16		10889613	0					
ANR	10889863	Identifier	u16		10889613	0					
ANR	10889864	ArgumentList	giddata		10889613	1					
ANR	10889865	Argument	giddata		10889613	0					
ANR	10889866	Identifier	giddata		10889613	0					
ANR	10889867	ReturnStatement	return ( glyph == 0 ? 0 : glyph + delta ) ;	417:16:10530:10569	10889613	10	True				
ANR	10889868	ConditionalExpression	glyph == 0 ? 0 : glyph + delta		10889613	0					
ANR	10889869	Condition	glyph == 0		10889613	0					
ANR	10889870	EqualityExpression	glyph == 0		10889613	0		==			
ANR	10889871	Identifier	glyph		10889613	0					
ANR	10889872	PrimaryExpression	0		10889613	1					
ANR	10889873	PrimaryExpression	0		10889613	1					
ANR	10889874	AdditiveExpression	glyph + delta		10889613	2		+			
ANR	10889875	Identifier	glyph		10889613	0					
ANR	10889876	Identifier	delta		10889613	1					
ANR	10889877	ReturnStatement	return 0 ;	425:12:10829:10837	10889613	9	True				
ANR	10889878	PrimaryExpression	0		10889613	0					
ANR	10889879	Label	case 6 :	428:4:10854:10860	10889613	4	True				
ANR	10889880	CompoundStatement		64:12:2014:2045	10889613	5					
ANR	10889881	IdentifierDeclStatement	int firstCode = u16 ( table + 6 ) ;	430:12:10914:10944	10889613	0	True				
ANR	10889882	IdentifierDecl	firstCode = u16 ( table + 6 )		10889613	0					
ANR	10889883	IdentifierDeclType	int		10889613	0					
ANR	10889884	Identifier	firstCode		10889613	1					
ANR	10889885	AssignmentExpression	firstCode = u16 ( table + 6 )		10889613	2		=			
ANR	10889886	Identifier	firstCode		10889613	0					
ANR	10889887	CallExpression	u16 ( table + 6 )		10889613	1					
ANR	10889888	Callee	u16		10889613	0					
ANR	10889889	Identifier	u16		10889613	0					
ANR	10889890	ArgumentList	table + 6		10889613	1					
ANR	10889891	Argument	table + 6		10889613	0					
ANR	10889892	AdditiveExpression	table + 6		10889613	0		+			
ANR	10889893	Identifier	table		10889613	0					
ANR	10889894	PrimaryExpression	6		10889613	1					
ANR	10889895	IdentifierDeclStatement	int entryCount = u16 ( table + 8 ) ;	431:12:10958:10989	10889613	1	True				
ANR	10889896	IdentifierDecl	entryCount = u16 ( table + 8 )		10889613	0					
ANR	10889897	IdentifierDeclType	int		10889613	0					
ANR	10889898	Identifier	entryCount		10889613	1					
ANR	10889899	AssignmentExpression	entryCount = u16 ( table + 8 )		10889613	2		=			
ANR	10889900	Identifier	entryCount		10889613	0					
ANR	10889901	CallExpression	u16 ( table + 8 )		10889613	1					
ANR	10889902	Callee	u16		10889613	0					
ANR	10889903	Identifier	u16		10889613	0					
ANR	10889904	ArgumentList	table + 8		10889613	1					
ANR	10889905	Argument	table + 8		10889613	0					
ANR	10889906	AdditiveExpression	table + 8		10889613	0		+			
ANR	10889907	Identifier	table		10889613	0					
ANR	10889908	PrimaryExpression	8		10889613	1					
ANR	10889909	IfStatement	if ( code < firstCode || code >= firstCode + entryCount )		10889613	2					
ANR	10889910	Condition	code < firstCode || code >= firstCode + entryCount	432:17:11008:11057	10889613	0	True				
ANR	10889911	OrExpression	code < firstCode || code >= firstCode + entryCount		10889613	0		||			
ANR	10889912	RelationalExpression	code < firstCode		10889613	0		<			
ANR	10889913	Identifier	code		10889613	0					
ANR	10889914	Identifier	firstCode		10889613	1					
ANR	10889915	RelationalExpression	code >= firstCode + entryCount		10889613	1		>=			
ANR	10889916	Identifier	code		10889613	0					
ANR	10889917	AdditiveExpression	firstCode + entryCount		10889613	1		+			
ANR	10889918	Identifier	firstCode		10889613	0					
ANR	10889919	Identifier	entryCount		10889613	1					
ANR	10889920	ReturnStatement	return 0 ;	433:16:11077:11085	10889613	1	True				
ANR	10889921	PrimaryExpression	0		10889613	0					
ANR	10889922	ReturnStatement	return u16 ( table + 10 + ( ( code - firstCode ) << 1 ) ) ;	434:12:11099:11149	10889613	3	True				
ANR	10889923	CallExpression	u16 ( table + 10 + ( ( code - firstCode ) << 1 ) )		10889613	0					
ANR	10889924	Callee	u16		10889613	0					
ANR	10889925	Identifier	u16		10889613	0					
ANR	10889926	ArgumentList	table + 10 + ( ( code - firstCode ) << 1 )		10889613	1					
ANR	10889927	Argument	table + 10 + ( ( code - firstCode ) << 1 )		10889613	0					
ANR	10889928	AdditiveExpression	table + 10 + ( ( code - firstCode ) << 1 )		10889613	0		+			
ANR	10889929	Identifier	table		10889613	0					
ANR	10889930	AdditiveExpression	10 + ( ( code - firstCode ) << 1 )		10889613	1		+			
ANR	10889931	PrimaryExpression	10		10889613	0					
ANR	10889932	ShiftExpression	( code - firstCode ) << 1		10889613	1		<<			
ANR	10889933	AdditiveExpression	code - firstCode		10889613	0		-			
ANR	10889934	Identifier	code		10889613	0					
ANR	10889935	Identifier	firstCode		10889613	1					
ANR	10889936	PrimaryExpression	1		10889613	1					
ANR	10889937	Label	case 10 :	437:4:11166:11173	10889613	6	True				
ANR	10889938	CompoundStatement		73:12:2331:2361	10889613	7					
ANR	10889939	IdentifierDeclStatement	int startCharCode = u32 ( table + 12 ) ;	439:12:11226:11261	10889613	0	True				
ANR	10889940	IdentifierDecl	startCharCode = u32 ( table + 12 )		10889613	0					
ANR	10889941	IdentifierDeclType	int		10889613	0					
ANR	10889942	Identifier	startCharCode		10889613	1					
ANR	10889943	AssignmentExpression	startCharCode = u32 ( table + 12 )		10889613	2		=			
ANR	10889944	Identifier	startCharCode		10889613	0					
ANR	10889945	CallExpression	u32 ( table + 12 )		10889613	1					
ANR	10889946	Callee	u32		10889613	0					
ANR	10889947	Identifier	u32		10889613	0					
ANR	10889948	ArgumentList	table + 12		10889613	1					
ANR	10889949	Argument	table + 12		10889613	0					
ANR	10889950	AdditiveExpression	table + 12		10889613	0		+			
ANR	10889951	Identifier	table		10889613	0					
ANR	10889952	PrimaryExpression	12		10889613	1					
ANR	10889953	IdentifierDeclStatement	int numChars = u32 ( table + 16 ) ;	440:12:11275:11305	10889613	1	True				
ANR	10889954	IdentifierDecl	numChars = u32 ( table + 16 )		10889613	0					
ANR	10889955	IdentifierDeclType	int		10889613	0					
ANR	10889956	Identifier	numChars		10889613	1					
ANR	10889957	AssignmentExpression	numChars = u32 ( table + 16 )		10889613	2		=			
ANR	10889958	Identifier	numChars		10889613	0					
ANR	10889959	CallExpression	u32 ( table + 16 )		10889613	1					
ANR	10889960	Callee	u32		10889613	0					
ANR	10889961	Identifier	u32		10889613	0					
ANR	10889962	ArgumentList	table + 16		10889613	1					
ANR	10889963	Argument	table + 16		10889613	0					
ANR	10889964	AdditiveExpression	table + 16		10889613	0		+			
ANR	10889965	Identifier	table		10889613	0					
ANR	10889966	PrimaryExpression	16		10889613	1					
ANR	10889967	IfStatement	if ( code < startCharCode || code >= startCharCode + numChars )		10889613	2					
ANR	10889968	Condition	code < startCharCode || code >= startCharCode + numChars	441:17:11324:11379	10889613	0	True				
ANR	10889969	OrExpression	code < startCharCode || code >= startCharCode + numChars		10889613	0		||			
ANR	10889970	RelationalExpression	code < startCharCode		10889613	0		<			
ANR	10889971	Identifier	code		10889613	0					
ANR	10889972	Identifier	startCharCode		10889613	1					
ANR	10889973	RelationalExpression	code >= startCharCode + numChars		10889613	1		>=			
ANR	10889974	Identifier	code		10889613	0					
ANR	10889975	AdditiveExpression	startCharCode + numChars		10889613	1		+			
ANR	10889976	Identifier	startCharCode		10889613	0					
ANR	10889977	Identifier	numChars		10889613	1					
ANR	10889978	ReturnStatement	return 0 ;	442:16:11399:11407	10889613	1	True				
ANR	10889979	PrimaryExpression	0		10889613	0					
ANR	10889980	ReturnStatement	return u32 ( table + 20 + ( code - startCharCode ) * 4 ) ;	443:12:11421:11472	10889613	3	True				
ANR	10889981	CallExpression	u32 ( table + 20 + ( code - startCharCode ) * 4 )		10889613	0					
ANR	10889982	Callee	u32		10889613	0					
ANR	10889983	Identifier	u32		10889613	0					
ANR	10889984	ArgumentList	table + 20 + ( code - startCharCode ) * 4		10889613	1					
ANR	10889985	Argument	table + 20 + ( code - startCharCode ) * 4		10889613	0					
ANR	10889986	AdditiveExpression	table + 20 + ( code - startCharCode ) * 4		10889613	0		+			
ANR	10889987	Identifier	table		10889613	0					
ANR	10889988	AdditiveExpression	20 + ( code - startCharCode ) * 4		10889613	1		+			
ANR	10889989	PrimaryExpression	20		10889613	0					
ANR	10889990	MultiplicativeExpression	( code - startCharCode ) * 4		10889613	1		*			
ANR	10889991	AdditiveExpression	code - startCharCode		10889613	0		-			
ANR	10889992	Identifier	code		10889613	0					
ANR	10889993	Identifier	startCharCode		10889613	1					
ANR	10889994	PrimaryExpression	4		10889613	1					
ANR	10889995	Label	case 12 :	446:4:11489:11496	10889613	8	True				
ANR	10889996	CompoundStatement		83:12:2692:2697	10889613	9					
ANR	10889997	IdentifierDeclStatement	int nGroups = u32 ( table + 12 ) ;	448:12:11555:11584	10889613	0	True				
ANR	10889998	IdentifierDecl	nGroups = u32 ( table + 12 )		10889613	0					
ANR	10889999	IdentifierDeclType	int		10889613	0					
ANR	10890000	Identifier	nGroups		10889613	1					
ANR	10890001	AssignmentExpression	nGroups = u32 ( table + 12 )		10889613	2		=			
ANR	10890002	Identifier	nGroups		10889613	0					
ANR	10890003	CallExpression	u32 ( table + 12 )		10889613	1					
ANR	10890004	Callee	u32		10889613	0					
ANR	10890005	Identifier	u32		10889613	0					
ANR	10890006	ArgumentList	table + 12		10889613	1					
ANR	10890007	Argument	table + 12		10889613	0					
ANR	10890008	AdditiveExpression	table + 12		10889613	0		+			
ANR	10890009	Identifier	table		10889613	0					
ANR	10890010	PrimaryExpression	12		10889613	1					
ANR	10890011	IdentifierDeclStatement	byte * group = table + 16 ;	449:12:11598:11622	10889613	1	True				
ANR	10890012	IdentifierDecl	* group = table + 16		10889613	0					
ANR	10890013	IdentifierDeclType	byte *		10889613	0					
ANR	10890014	Identifier	group		10889613	1					
ANR	10890015	AssignmentExpression	* group = table + 16		10889613	2		=			
ANR	10890016	Identifier	group		10889613	0					
ANR	10890017	AdditiveExpression	table + 16		10889613	1		+			
ANR	10890018	Identifier	table		10889613	0					
ANR	10890019	PrimaryExpression	16		10889613	1					
ANR	10890020	IdentifierDeclStatement	int i ;	450:12:11636:11641	10889613	2	True				
ANR	10890021	IdentifierDecl	i		10889613	0					
ANR	10890022	IdentifierDeclType	int		10889613	0					
ANR	10890023	Identifier	i		10889613	1					
ANR	10890024	ForStatement	for ( i = 0 ; i < nGroups ; i ++ )		10889613	3					
ANR	10890025	ForInit	i = 0 ;	452:17:11661:11666	10889613	0	True				
ANR	10890026	AssignmentExpression	i = 0		10889613	0		=			
ANR	10890027	Identifier	i		10889613	0					
ANR	10890028	PrimaryExpression	0		10889613	1					
ANR	10890029	Condition	i < nGroups	452:24:11668:11678	10889613	1	True				
ANR	10890030	RelationalExpression	i < nGroups		10889613	0		<			
ANR	10890031	Identifier	i		10889613	0					
ANR	10890032	Identifier	nGroups		10889613	1					
ANR	10890033	PostIncDecOperationExpression	i ++	452:37:11681:11683	10889613	2	True				
ANR	10890034	Identifier	i		10889613	0					
ANR	10890035	IncDec	++		10889613	1					
ANR	10890036	CompoundStatement		89:16:2874:2907	10889613	3					
ANR	10890037	IdentifierDeclStatement	int startCharCode = u32 ( group + 0 ) ;	454:16:11716:11750	10889613	0	True				
ANR	10890038	IdentifierDecl	startCharCode = u32 ( group + 0 )		10889613	0					
ANR	10890039	IdentifierDeclType	int		10889613	0					
ANR	10890040	Identifier	startCharCode		10889613	1					
ANR	10890041	AssignmentExpression	startCharCode = u32 ( group + 0 )		10889613	2		=			
ANR	10890042	Identifier	startCharCode		10889613	0					
ANR	10890043	CallExpression	u32 ( group + 0 )		10889613	1					
ANR	10890044	Callee	u32		10889613	0					
ANR	10890045	Identifier	u32		10889613	0					
ANR	10890046	ArgumentList	group + 0		10889613	1					
ANR	10890047	Argument	group + 0		10889613	0					
ANR	10890048	AdditiveExpression	group + 0		10889613	0		+			
ANR	10890049	Identifier	group		10889613	0					
ANR	10890050	PrimaryExpression	0		10889613	1					
ANR	10890051	IdentifierDeclStatement	int endCharCode = u32 ( group + 4 ) ;	455:16:11768:11800	10889613	1	True				
ANR	10890052	IdentifierDecl	endCharCode = u32 ( group + 4 )		10889613	0					
ANR	10890053	IdentifierDeclType	int		10889613	0					
ANR	10890054	Identifier	endCharCode		10889613	1					
ANR	10890055	AssignmentExpression	endCharCode = u32 ( group + 4 )		10889613	2		=			
ANR	10890056	Identifier	endCharCode		10889613	0					
ANR	10890057	CallExpression	u32 ( group + 4 )		10889613	1					
ANR	10890058	Callee	u32		10889613	0					
ANR	10890059	Identifier	u32		10889613	0					
ANR	10890060	ArgumentList	group + 4		10889613	1					
ANR	10890061	Argument	group + 4		10889613	0					
ANR	10890062	AdditiveExpression	group + 4		10889613	0		+			
ANR	10890063	Identifier	group		10889613	0					
ANR	10890064	PrimaryExpression	4		10889613	1					
ANR	10890065	IdentifierDeclStatement	int startGlyphID = u32 ( group + 8 ) ;	456:16:11818:11851	10889613	2	True				
ANR	10890066	IdentifierDecl	startGlyphID = u32 ( group + 8 )		10889613	0					
ANR	10890067	IdentifierDeclType	int		10889613	0					
ANR	10890068	Identifier	startGlyphID		10889613	1					
ANR	10890069	AssignmentExpression	startGlyphID = u32 ( group + 8 )		10889613	2		=			
ANR	10890070	Identifier	startGlyphID		10889613	0					
ANR	10890071	CallExpression	u32 ( group + 8 )		10889613	1					
ANR	10890072	Callee	u32		10889613	0					
ANR	10890073	Identifier	u32		10889613	0					
ANR	10890074	ArgumentList	group + 8		10889613	1					
ANR	10890075	Argument	group + 8		10889613	0					
ANR	10890076	AdditiveExpression	group + 8		10889613	0		+			
ANR	10890077	Identifier	group		10889613	0					
ANR	10890078	PrimaryExpression	8		10889613	1					
ANR	10890079	IfStatement	if ( code < startCharCode )		10889613	3					
ANR	10890080	Condition	code < startCharCode	457:21:11874:11893	10889613	0	True				
ANR	10890081	RelationalExpression	code < startCharCode		10889613	0		<			
ANR	10890082	Identifier	code		10889613	0					
ANR	10890083	Identifier	startCharCode		10889613	1					
ANR	10890084	ReturnStatement	return 0 ;	458:20:11917:11925	10889613	1	True				
ANR	10890085	PrimaryExpression	0		10889613	0					
ANR	10890086	IfStatement	if ( code <= endCharCode )		10889613	4					
ANR	10890087	Condition	code <= endCharCode	459:21:11948:11966	10889613	0	True				
ANR	10890088	RelationalExpression	code <= endCharCode		10889613	0		<=			
ANR	10890089	Identifier	code		10889613	0					
ANR	10890090	Identifier	endCharCode		10889613	1					
ANR	10890091	ReturnStatement	return startGlyphID + ( code - startCharCode ) ;	460:20:11990:12034	10889613	1	True				
ANR	10890092	AdditiveExpression	startGlyphID + ( code - startCharCode )		10889613	0		+			
ANR	10890093	Identifier	startGlyphID		10889613	0					
ANR	10890094	AdditiveExpression	code - startCharCode		10889613	1		-			
ANR	10890095	Identifier	code		10889613	0					
ANR	10890096	Identifier	startCharCode		10889613	1					
ANR	10890097	ExpressionStatement	group += 12	461:16:12052:12063	10889613	5	True				
ANR	10890098	AssignmentExpression	group += 12		10889613	0		+=			
ANR	10890099	Identifier	group		10889613	0					
ANR	10890100	PrimaryExpression	12		10889613	1					
ANR	10890101	ReturnStatement	return 0 ;	464:12:12092:12100	10889613	4	True				
ANR	10890102	PrimaryExpression	0		10889613	0					
ANR	10890103	Label	case 2 :	467:4:12117:12123	10889613	10	True				
ANR	10890104	Label	case 8 :	468:4:12168:12174	10889613	11	True				
ANR	10890105	Label	default :	469:4:12228:12235	10889613	12	True				
ANR	10890106	Identifier	default		10889613	0					
ANR	10890107	ExpressionStatement	"gs_warn1 ( ""unknown cmap format: %d\\n"" , u16 ( table ) )"	470:8:12245:12294	10889613	13	True				
ANR	10890108	CallExpression	"gs_warn1 ( ""unknown cmap format: %d\\n"" , u16 ( table ) )"		10889613	0					
ANR	10890109	Callee	gs_warn1		10889613	0					
ANR	10890110	Identifier	gs_warn1		10889613	0					
ANR	10890111	ArgumentList	"""unknown cmap format: %d\\n"""		10889613	1					
ANR	10890112	Argument	"""unknown cmap format: %d\\n"""		10889613	0					
ANR	10890113	PrimaryExpression	"""unknown cmap format: %d\\n"""		10889613	0					
ANR	10890114	Argument	u16 ( table )		10889613	1					
ANR	10890115	CallExpression	u16 ( table )		10889613	0					
ANR	10890116	Callee	u16		10889613	0					
ANR	10890117	Identifier	u16		10889613	0					
ANR	10890118	ArgumentList	table		10889613	1					
ANR	10890119	Argument	table		10889613	0					
ANR	10890120	Identifier	table		10889613	0					
ANR	10890121	ReturnStatement	return 0 ;	471:8:12304:12312	10889613	14	True				
ANR	10890122	PrimaryExpression	0		10889613	0					
ANR	10890123	ReturnStatement	return 0 ;	474:4:12325:12333	10889613	4	True				
ANR	10890124	PrimaryExpression	0		10889613	0					
ANR	10890125	ReturnType	static int		10889613	1					
ANR	10890126	Identifier	xps_encode_font_char_imp		10889613	2					
ANR	10890127	ParameterList	"xps_font_t * font , int code"		10889613	3					
ANR	10890128	Parameter	xps_font_t * font	367:25:8915:8930	10889613	0	True				
ANR	10890129	ParameterType	xps_font_t *		10889613	0					
ANR	10890130	Identifier	font		10889613	1					
ANR	10890131	Parameter	int code	367:43:8933:8940	10889613	1	True				
ANR	10890132	ParameterType	int		10889613	0					
ANR	10890133	Identifier	code		10889613	1					
ANR	10890134	CFGEntryNode	ENTRY		10889613		True				
ANR	10890135	CFGExitNode	EXIT		10889613		True				
ANR	10890136	Symbol	startGlyphID		10889613						
ANR	10890137	Symbol	code		10889613						
ANR	10890138	Symbol	delta		10889613						
ANR	10890139	Symbol	roff		10889613						
ANR	10890140	Symbol	font -> cmapsubtable		10889613						
ANR	10890141	Symbol	giddata		10889613						
ANR	10890142	Symbol	u32		10889613						
ANR	10890143	Symbol	s16		10889613						
ANR	10890144	Symbol	* font		10889613						
ANR	10890145	Symbol	u16		10889613						
ANR	10890146	Symbol	firstCode		10889613						
ANR	10890147	Symbol	font -> length		10889613						
ANR	10890148	Symbol	gs_error_invalidfont		10889613						
ANR	10890149	Symbol	idDelta		10889613						
ANR	10890150	Symbol	table		10889613						
ANR	10890151	Symbol	group		10889613						
ANR	10890152	Symbol	startCount		10889613						
ANR	10890153	Symbol	segCount2		10889613						
ANR	10890154	Symbol	start		10889613						
ANR	10890155	Symbol	* table		10889613						
ANR	10890156	Symbol	i2		10889613						
ANR	10890157	Symbol	i		10889613						
ANR	10890158	Symbol	numChars		10889613						
ANR	10890159	Symbol	glyph		10889613						
ANR	10890160	Symbol	nGroups		10889613						
ANR	10890161	Symbol	entryCount		10889613						
ANR	10890162	Symbol	font -> data		10889613						
ANR	10890163	Symbol	endCount		10889613						
ANR	10890164	Symbol	startCharCode		10889613						
ANR	10890165	Symbol	endCharCode		10889613						
ANR	10890166	Symbol	idRangeOffset		10889613						
ANR	10890167	Symbol	* code		10889613						
ANR	10890168	Symbol	font		10889613						
ANR	10890169	Function	xps_decode_font_char_imp	483:0:12643:17130							
ANR	10890170	FunctionDef	"xps_decode_font_char_imp (xps_font_t * font , int code)"		10890169	0					
ANR	10890171	CompoundStatement		485:0:12707:17130	10890169	0					
ANR	10890172	IdentifierDeclStatement	"byte * table , * t ;"	486:4:12713:12728	10890169	0	True				
ANR	10890173	IdentifierDecl	* table		10890169	0					
ANR	10890174	IdentifierDeclType	byte *		10890169	0					
ANR	10890175	Identifier	table		10890169	1					
ANR	10890176	IdentifierDecl	* t		10890169	1					
ANR	10890177	IdentifierDeclType	byte *		10890169	0					
ANR	10890178	Identifier	t		10890169	1					
ANR	10890179	IfStatement	if ( font -> cmapsubtable <= 0 )		10890169	1					
ANR	10890180	Condition	font -> cmapsubtable <= 0	489:8:12783:12805	10890169	0	True				
ANR	10890181	RelationalExpression	font -> cmapsubtable <= 0		10890169	0		<=			
ANR	10890182	PtrMemberAccess	font -> cmapsubtable		10890169	0					
ANR	10890183	Identifier	font		10890169	0					
ANR	10890184	Identifier	cmapsubtable		10890169	1					
ANR	10890185	PrimaryExpression	0		10890169	1					
ANR	10890186	ReturnStatement	return code ;	490:8:12816:12827	10890169	1	True				
ANR	10890187	Identifier	code		10890169	0					
ANR	10890188	ExpressionStatement	table = font -> data + font -> cmapsubtable	492:4:12834:12873	10890169	2	True				
ANR	10890189	AssignmentExpression	table = font -> data + font -> cmapsubtable		10890169	0		=			
ANR	10890190	Identifier	table		10890169	0					
ANR	10890191	AdditiveExpression	font -> data + font -> cmapsubtable		10890169	1		+			
ANR	10890192	PtrMemberAccess	font -> data		10890169	0					
ANR	10890193	Identifier	font		10890169	0					
ANR	10890194	Identifier	data		10890169	1					
ANR	10890195	PtrMemberAccess	font -> cmapsubtable		10890169	1					
ANR	10890196	Identifier	font		10890169	0					
ANR	10890197	Identifier	cmapsubtable		10890169	1					
ANR	10890198	IfStatement	if ( table >= font -> data + font -> length )		10890169	3					
ANR	10890199	Condition	table >= font -> data + font -> length	493:8:12883:12916	10890169	0	True				
ANR	10890200	RelationalExpression	table >= font -> data + font -> length		10890169	0		>=			
ANR	10890201	Identifier	table		10890169	0					
ANR	10890202	AdditiveExpression	font -> data + font -> length		10890169	1		+			
ANR	10890203	PtrMemberAccess	font -> data		10890169	0					
ANR	10890204	Identifier	font		10890169	0					
ANR	10890205	Identifier	data		10890169	1					
ANR	10890206	PtrMemberAccess	font -> length		10890169	1					
ANR	10890207	Identifier	font		10890169	0					
ANR	10890208	Identifier	length		10890169	1					
ANR	10890209	ReturnStatement	return code ;	494:8:12927:12938	10890169	1	True				
ANR	10890210	Identifier	code		10890169	0					
ANR	10890211	SwitchStatement	switch ( u16 ( table ) )		10890169	4					
ANR	10890212	Condition	u16 ( table )	496:12:12953:12962	10890169	0	True				
ANR	10890213	CallExpression	u16 ( table )		10890169	0					
ANR	10890214	Callee	u16		10890169	0					
ANR	10890215	Identifier	u16		10890169	0					
ANR	10890216	ArgumentList	table		10890169	1					
ANR	10890217	Argument	table		10890169	0					
ANR	10890218	Identifier	table		10890169	0					
ANR	10890219	CompoundStatement		13:4:261:261	10890169	1					
ANR	10890220	Label	case 0 :	498:8:12979:12985	10890169	0	True				
ANR	10890221	CompoundStatement		16:16:346:380	10890169	1					
ANR	10890222	IdentifierDeclStatement	"int i , length = u16 ( & table [ 2 ] ) - 6 ;"	500:16:13054:13088	10890169	0	True				
ANR	10890223	IdentifierDecl	i		10890169	0					
ANR	10890224	IdentifierDeclType	int		10890169	0					
ANR	10890225	Identifier	i		10890169	1					
ANR	10890226	IdentifierDecl	length = u16 ( & table [ 2 ] ) - 6		10890169	1					
ANR	10890227	IdentifierDeclType	int		10890169	0					
ANR	10890228	Identifier	length		10890169	1					
ANR	10890229	AssignmentExpression	length = u16 ( & table [ 2 ] ) - 6		10890169	2		=			
ANR	10890230	Identifier	length		10890169	0					
ANR	10890231	AdditiveExpression	u16 ( & table [ 2 ] ) - 6		10890169	1		-			
ANR	10890232	CallExpression	u16 ( & table [ 2 ] )		10890169	0					
ANR	10890233	Callee	u16		10890169	0					
ANR	10890234	Identifier	u16		10890169	0					
ANR	10890235	ArgumentList	& table [ 2 ]		10890169	1					
ANR	10890236	Argument	& table [ 2 ]		10890169	0					
ANR	10890237	UnaryOperationExpression	& table [ 2 ]		10890169	0					
ANR	10890238	UnaryOperator	&		10890169	0					
ANR	10890239	ArrayIndexing	table [ 2 ]		10890169	1					
ANR	10890240	Identifier	table		10890169	0					
ANR	10890241	PrimaryExpression	2		10890169	1					
ANR	10890242	PrimaryExpression	6		10890169	1					
ANR	10890243	IfStatement	if ( length < 0 || length > 256 )		10890169	1					
ANR	10890244	Condition	length < 0 || length > 256	502:20:13111:13136	10890169	0	True				
ANR	10890245	OrExpression	length < 0 || length > 256		10890169	0		||			
ANR	10890246	RelationalExpression	length < 0		10890169	0		<			
ANR	10890247	Identifier	length		10890169	0					
ANR	10890248	PrimaryExpression	0		10890169	1					
ANR	10890249	RelationalExpression	length > 256		10890169	1		>			
ANR	10890250	Identifier	length		10890169	0					
ANR	10890251	PrimaryExpression	256		10890169	1					
ANR	10890252	ReturnStatement	return gs_error_invalidfont ;	503:20:13159:13186	10890169	1	True				
ANR	10890253	Identifier	gs_error_invalidfont		10890169	0					
ANR	10890254	ForStatement	for ( i = 0 ; i < length ; i ++ )		10890169	2					
ANR	10890255	ForInit	i = 0 ;	505:21:13210:13213	10890169	0	True				
ANR	10890256	AssignmentExpression	i = 0		10890169	0		=			
ANR	10890257	Identifier	i		10890169	0					
ANR	10890258	PrimaryExpression	0		10890169	1					
ANR	10890259	Condition	i < length	505:25:13214:13221	10890169	1	True				
ANR	10890260	RelationalExpression	i < length		10890169	0		<			
ANR	10890261	Identifier	i		10890169	0					
ANR	10890262	Identifier	length		10890169	1					
ANR	10890263	PostIncDecOperationExpression	i ++	505:34:13223:13225	10890169	2	True				
ANR	10890264	Identifier	i		10890169	0					
ANR	10890265	IncDec	++		10890169	1					
ANR	10890266	CompoundStatement		21:39:520:520	10890169	3					
ANR	10890267	IfStatement	if ( table [ 6 + i ] == code )		10890169	0					
ANR	10890268	Condition	table [ 6 + i ] == code	506:24:13254:13273	10890169	0	True				
ANR	10890269	EqualityExpression	table [ 6 + i ] == code		10890169	0		==			
ANR	10890270	ArrayIndexing	table [ 6 + i ]		10890169	0					
ANR	10890271	Identifier	table		10890169	0					
ANR	10890272	AdditiveExpression	6 + i		10890169	1		+			
ANR	10890273	PrimaryExpression	6		10890169	0					
ANR	10890274	Identifier	i		10890169	1					
ANR	10890275	Identifier	code		10890169	1					
ANR	10890276	ReturnStatement	return i ;	507:24:13300:13308	10890169	1	True				
ANR	10890277	Identifier	i		10890169	0					
ANR	10890278	ReturnStatement	return 0 ;	510:12:13354:13362	10890169	2	True				
ANR	10890279	PrimaryExpression	0		10890169	0					
ANR	10890280	Label	case 4 :	511:8:13372:13378	10890169	3	True				
ANR	10890281	CompoundStatement		35:16:1043:1049	10890169	4					
ANR	10890282	IdentifierDeclStatement	int segCount2 = u16 ( table + 6 ) ;	513:16:13451:13481	10890169	0	True				
ANR	10890283	IdentifierDecl	segCount2 = u16 ( table + 6 )		10890169	0					
ANR	10890284	IdentifierDeclType	int		10890169	0					
ANR	10890285	Identifier	segCount2		10890169	1					
ANR	10890286	AssignmentExpression	segCount2 = u16 ( table + 6 )		10890169	2		=			
ANR	10890287	Identifier	segCount2		10890169	0					
ANR	10890288	CallExpression	u16 ( table + 6 )		10890169	1					
ANR	10890289	Callee	u16		10890169	0					
ANR	10890290	Identifier	u16		10890169	0					
ANR	10890291	ArgumentList	table + 6		10890169	1					
ANR	10890292	Argument	table + 6		10890169	0					
ANR	10890293	AdditiveExpression	table + 6		10890169	0		+			
ANR	10890294	Identifier	table		10890169	0					
ANR	10890295	PrimaryExpression	6		10890169	1					
ANR	10890296	IdentifierDeclStatement	byte * endCount = table + 14 ;	514:16:13499:13526	10890169	1	True				
ANR	10890297	IdentifierDecl	* endCount = table + 14		10890169	0					
ANR	10890298	IdentifierDeclType	byte *		10890169	0					
ANR	10890299	Identifier	endCount		10890169	1					
ANR	10890300	AssignmentExpression	* endCount = table + 14		10890169	2		=			
ANR	10890301	Identifier	endCount		10890169	0					
ANR	10890302	AdditiveExpression	table + 14		10890169	1		+			
ANR	10890303	Identifier	table		10890169	0					
ANR	10890304	PrimaryExpression	14		10890169	1					
ANR	10890305	IdentifierDeclStatement	byte * startCount = endCount + segCount2 + 2 ;	515:16:13544:13587	10890169	2	True				
ANR	10890306	IdentifierDecl	* startCount = endCount + segCount2 + 2		10890169	0					
ANR	10890307	IdentifierDeclType	byte *		10890169	0					
ANR	10890308	Identifier	startCount		10890169	1					
ANR	10890309	AssignmentExpression	* startCount = endCount + segCount2 + 2		10890169	2		=			
ANR	10890310	Identifier	startCount		10890169	0					
ANR	10890311	AdditiveExpression	endCount + segCount2 + 2		10890169	1		+			
ANR	10890312	Identifier	endCount		10890169	0					
ANR	10890313	AdditiveExpression	segCount2 + 2		10890169	1		+			
ANR	10890314	Identifier	segCount2		10890169	0					
ANR	10890315	PrimaryExpression	2		10890169	1					
ANR	10890316	IdentifierDeclStatement	byte * idDelta = startCount + segCount2 ;	516:16:13605:13643	10890169	3	True				
ANR	10890317	IdentifierDecl	* idDelta = startCount + segCount2		10890169	0					
ANR	10890318	IdentifierDeclType	byte *		10890169	0					
ANR	10890319	Identifier	idDelta		10890169	1					
ANR	10890320	AssignmentExpression	* idDelta = startCount + segCount2		10890169	2		=			
ANR	10890321	Identifier	idDelta		10890169	0					
ANR	10890322	AdditiveExpression	startCount + segCount2		10890169	1		+			
ANR	10890323	Identifier	startCount		10890169	0					
ANR	10890324	Identifier	segCount2		10890169	1					
ANR	10890325	IdentifierDeclStatement	byte * idRangeOffset = idDelta + segCount2 ;	517:16:13661:13702	10890169	4	True				
ANR	10890326	IdentifierDecl	* idRangeOffset = idDelta + segCount2		10890169	0					
ANR	10890327	IdentifierDeclType	byte *		10890169	0					
ANR	10890328	Identifier	idRangeOffset		10890169	1					
ANR	10890329	AssignmentExpression	* idRangeOffset = idDelta + segCount2		10890169	2		=			
ANR	10890330	Identifier	idRangeOffset		10890169	0					
ANR	10890331	AdditiveExpression	idDelta + segCount2		10890169	1		+			
ANR	10890332	Identifier	idDelta		10890169	0					
ANR	10890333	Identifier	segCount2		10890169	1					
ANR	10890334	IdentifierDeclStatement	byte * giddata ;	518:16:13720:13733	10890169	5	True				
ANR	10890335	IdentifierDecl	* giddata		10890169	0					
ANR	10890336	IdentifierDeclType	byte *		10890169	0					
ANR	10890337	Identifier	giddata		10890169	1					
ANR	10890338	IdentifierDeclStatement	int i2 ;	519:16:13751:13757	10890169	6	True				
ANR	10890339	IdentifierDecl	i2		10890169	0					
ANR	10890340	IdentifierDeclType	int		10890169	0					
ANR	10890341	Identifier	i2		10890169	1					
ANR	10890342	IfStatement	if ( segCount2 < 3 || segCount2 > 65535 || idRangeOffset > font -> data + font -> length )		10890169	7					
ANR	10890343	Condition	segCount2 < 3 || segCount2 > 65535 || idRangeOffset > font -> data + font -> length	521:20:13780:13878	10890169	0	True				
ANR	10890344	OrExpression	segCount2 < 3 || segCount2 > 65535 || idRangeOffset > font -> data + font -> length		10890169	0		||			
ANR	10890345	RelationalExpression	segCount2 < 3		10890169	0		<			
ANR	10890346	Identifier	segCount2		10890169	0					
ANR	10890347	PrimaryExpression	3		10890169	1					
ANR	10890348	OrExpression	segCount2 > 65535 || idRangeOffset > font -> data + font -> length		10890169	1		||			
ANR	10890349	RelationalExpression	segCount2 > 65535		10890169	0		>			
ANR	10890350	Identifier	segCount2		10890169	0					
ANR	10890351	PrimaryExpression	65535		10890169	1					
ANR	10890352	RelationalExpression	idRangeOffset > font -> data + font -> length		10890169	1		>			
ANR	10890353	Identifier	idRangeOffset		10890169	0					
ANR	10890354	AdditiveExpression	font -> data + font -> length		10890169	1		+			
ANR	10890355	PtrMemberAccess	font -> data		10890169	0					
ANR	10890356	Identifier	font		10890169	0					
ANR	10890357	Identifier	data		10890169	1					
ANR	10890358	PtrMemberAccess	font -> length		10890169	1					
ANR	10890359	Identifier	font		10890169	0					
ANR	10890360	Identifier	length		10890169	1					
ANR	10890361	ReturnStatement	return gs_error_invalidfont ;	523:20:13901:13928	10890169	1	True				
ANR	10890362	Identifier	gs_error_invalidfont		10890169	0					
ANR	10890363	ForStatement	for ( i2 = 0 ; i2 < segCount2 - 3 ; i2 += 2 )		10890169	8					
ANR	10890364	ForInit	i2 = 0 ;	525:21:13952:13958	10890169	0	True				
ANR	10890365	AssignmentExpression	i2 = 0		10890169	0		=			
ANR	10890366	Identifier	i2		10890169	0					
ANR	10890367	PrimaryExpression	0		10890169	1					
ANR	10890368	Condition	i2 < segCount2 - 3	525:29:13960:13977	10890169	1	True				
ANR	10890369	RelationalExpression	i2 < segCount2 - 3		10890169	0		<			
ANR	10890370	Identifier	i2		10890169	0					
ANR	10890371	AdditiveExpression	segCount2 - 3		10890169	1		-			
ANR	10890372	Identifier	segCount2		10890169	0					
ANR	10890373	PrimaryExpression	3		10890169	1					
ANR	10890374	AssignmentExpression	i2 += 2	525:49:13980:13986	10890169	2	True	+=			
ANR	10890375	Identifier	i2		10890169	0					
ANR	10890376	PrimaryExpression	2		10890169	1					
ANR	10890377	CompoundStatement		46:20:1506:1518	10890169	3					
ANR	10890378	IdentifierDeclStatement	"int delta = s16 ( idDelta + i2 ) , roff = u16 ( idRangeOffset + i2 ) ;"	527:20:14027:14088	10890169	0	True				
ANR	10890379	IdentifierDecl	delta = s16 ( idDelta + i2 )		10890169	0					
ANR	10890380	IdentifierDeclType	int		10890169	0					
ANR	10890381	Identifier	delta		10890169	1					
ANR	10890382	AssignmentExpression	delta = s16 ( idDelta + i2 )		10890169	2		=			
ANR	10890383	Identifier	delta		10890169	0					
ANR	10890384	CallExpression	s16 ( idDelta + i2 )		10890169	1					
ANR	10890385	Callee	s16		10890169	0					
ANR	10890386	Identifier	s16		10890169	0					
ANR	10890387	ArgumentList	idDelta + i2		10890169	1					
ANR	10890388	Argument	idDelta + i2		10890169	0					
ANR	10890389	AdditiveExpression	idDelta + i2		10890169	0		+			
ANR	10890390	Identifier	idDelta		10890169	0					
ANR	10890391	Identifier	i2		10890169	1					
ANR	10890392	IdentifierDecl	roff = u16 ( idRangeOffset + i2 )		10890169	1					
ANR	10890393	IdentifierDeclType	int		10890169	0					
ANR	10890394	Identifier	roff		10890169	1					
ANR	10890395	AssignmentExpression	roff = u16 ( idRangeOffset + i2 )		10890169	2		=			
ANR	10890396	Identifier	roff		10890169	0					
ANR	10890397	CallExpression	u16 ( idRangeOffset + i2 )		10890169	1					
ANR	10890398	Callee	u16		10890169	0					
ANR	10890399	Identifier	u16		10890169	0					
ANR	10890400	ArgumentList	idRangeOffset + i2		10890169	1					
ANR	10890401	Argument	idRangeOffset + i2		10890169	0					
ANR	10890402	AdditiveExpression	idRangeOffset + i2		10890169	0		+			
ANR	10890403	Identifier	idRangeOffset		10890169	0					
ANR	10890404	Identifier	i2		10890169	1					
ANR	10890405	IdentifierDeclStatement	int start = u16 ( startCount + i2 ) ;	528:20:14110:14142	10890169	1	True				
ANR	10890406	IdentifierDecl	start = u16 ( startCount + i2 )		10890169	0					
ANR	10890407	IdentifierDeclType	int		10890169	0					
ANR	10890408	Identifier	start		10890169	1					
ANR	10890409	AssignmentExpression	start = u16 ( startCount + i2 )		10890169	2		=			
ANR	10890410	Identifier	start		10890169	0					
ANR	10890411	CallExpression	u16 ( startCount + i2 )		10890169	1					
ANR	10890412	Callee	u16		10890169	0					
ANR	10890413	Identifier	u16		10890169	0					
ANR	10890414	ArgumentList	startCount + i2		10890169	1					
ANR	10890415	Argument	startCount + i2		10890169	0					
ANR	10890416	AdditiveExpression	startCount + i2		10890169	0		+			
ANR	10890417	Identifier	startCount		10890169	0					
ANR	10890418	Identifier	i2		10890169	1					
ANR	10890419	IdentifierDeclStatement	int end = u16 ( endCount + i2 ) ;	529:20:14164:14192	10890169	2	True				
ANR	10890420	IdentifierDecl	end = u16 ( endCount + i2 )		10890169	0					
ANR	10890421	IdentifierDeclType	int		10890169	0					
ANR	10890422	Identifier	end		10890169	1					
ANR	10890423	AssignmentExpression	end = u16 ( endCount + i2 )		10890169	2		=			
ANR	10890424	Identifier	end		10890169	0					
ANR	10890425	CallExpression	u16 ( endCount + i2 )		10890169	1					
ANR	10890426	Callee	u16		10890169	0					
ANR	10890427	Identifier	u16		10890169	0					
ANR	10890428	ArgumentList	endCount + i2		10890169	1					
ANR	10890429	Argument	endCount + i2		10890169	0					
ANR	10890430	AdditiveExpression	endCount + i2		10890169	0		+			
ANR	10890431	Identifier	endCount		10890169	0					
ANR	10890432	Identifier	i2		10890169	1					
ANR	10890433	IdentifierDeclStatement	"int glyph , i ;"	530:20:14214:14226	10890169	3	True				
ANR	10890434	IdentifierDecl	glyph		10890169	0					
ANR	10890435	IdentifierDeclType	int		10890169	0					
ANR	10890436	Identifier	glyph		10890169	1					
ANR	10890437	IdentifierDecl	i		10890169	1					
ANR	10890438	IdentifierDeclType	int		10890169	0					
ANR	10890439	Identifier	i		10890169	1					
ANR	10890440	IfStatement	if ( end < start )		10890169	4					
ANR	10890441	Condition	end < start	532:24:14253:14263	10890169	0	True				
ANR	10890442	RelationalExpression	end < start		10890169	0		<			
ANR	10890443	Identifier	end		10890169	0					
ANR	10890444	Identifier	start		10890169	1					
ANR	10890445	ReturnStatement	return gs_error_invalidfont ;	533:24:14290:14317	10890169	1	True				
ANR	10890446	Identifier	gs_error_invalidfont		10890169	0					
ANR	10890447	ForStatement	for ( i = start ; i <= end ; i ++ )		10890169	5					
ANR	10890448	ForInit	i = start ;	535:25:14345:14352	10890169	0	True				
ANR	10890449	AssignmentExpression	i = start		10890169	0		=			
ANR	10890450	Identifier	i		10890169	0					
ANR	10890451	Identifier	start		10890169	1					
ANR	10890452	Condition	i <= end	535:33:14353:14358	10890169	1	True				
ANR	10890453	RelationalExpression	i <= end		10890169	0		<=			
ANR	10890454	Identifier	i		10890169	0					
ANR	10890455	Identifier	end		10890169	1					
ANR	10890456	PostIncDecOperationExpression	i ++	535:40:14360:14362	10890169	2	True				
ANR	10890457	Identifier	i		10890169	0					
ANR	10890458	IncDec	++		10890169	1					
ANR	10890459	CompoundStatement		51:45:1657:1657	10890169	3					
ANR	10890460	IfStatement	if ( roff == 0 )		10890169	0					
ANR	10890461	Condition	roff == 0	536:28:14395:14403	10890169	0	True				
ANR	10890462	EqualityExpression	roff == 0		10890169	0		==			
ANR	10890463	Identifier	roff		10890169	0					
ANR	10890464	PrimaryExpression	0		10890169	1					
ANR	10890465	CompoundStatement		52:39:1698:1698	10890169	1					
ANR	10890466	ExpressionStatement	glyph = ( i + delta ) & 0xffff	537:28:14436:14464	10890169	0	True				
ANR	10890467	AssignmentExpression	glyph = ( i + delta ) & 0xffff		10890169	0		=			
ANR	10890468	Identifier	glyph		10890169	0					
ANR	10890469	BitAndExpression	( i + delta ) & 0xffff		10890169	1		&			
ANR	10890470	AdditiveExpression	i + delta		10890169	0		+			
ANR	10890471	Identifier	i		10890169	0					
ANR	10890472	Identifier	delta		10890169	1					
ANR	10890473	PrimaryExpression	0xffff		10890169	1					
ANR	10890474	ElseStatement	else		10890169	0					
ANR	10890475	CompoundStatement		54:31:1789:1789	10890169	0					
ANR	10890476	IfStatement	if ( ( giddata = ( idRangeOffset + i2 + roff + ( ( i - start ) << 1 ) ) ) > font -> data + font -> length )		10890169	0					
ANR	10890477	Condition	( giddata = ( idRangeOffset + i2 + roff + ( ( i - start ) << 1 ) ) ) > font -> data + font -> length	539:32:14531:14651	10890169	0	True				
ANR	10890478	RelationalExpression	( giddata = ( idRangeOffset + i2 + roff + ( ( i - start ) << 1 ) ) ) > font -> data + font -> length		10890169	0		>			
ANR	10890479	AssignmentExpression	giddata = ( idRangeOffset + i2 + roff + ( ( i - start ) << 1 ) )		10890169	0		=			
ANR	10890480	Identifier	giddata		10890169	0					
ANR	10890481	AdditiveExpression	idRangeOffset + i2 + roff + ( ( i - start ) << 1 )		10890169	1		+			
ANR	10890482	Identifier	idRangeOffset		10890169	0					
ANR	10890483	AdditiveExpression	i2 + roff + ( ( i - start ) << 1 )		10890169	1		+			
ANR	10890484	Identifier	i2		10890169	0					
ANR	10890485	AdditiveExpression	roff + ( ( i - start ) << 1 )		10890169	1		+			
ANR	10890486	Identifier	roff		10890169	0					
ANR	10890487	ShiftExpression	( i - start ) << 1		10890169	1		<<			
ANR	10890488	AdditiveExpression	i - start		10890169	0		-			
ANR	10890489	Identifier	i		10890169	0					
ANR	10890490	Identifier	start		10890169	1					
ANR	10890491	PrimaryExpression	1		10890169	1					
ANR	10890492	AdditiveExpression	font -> data + font -> length		10890169	1		+			
ANR	10890493	PtrMemberAccess	font -> data		10890169	0					
ANR	10890494	Identifier	font		10890169	0					
ANR	10890495	Identifier	data		10890169	1					
ANR	10890496	PtrMemberAccess	font -> length		10890169	1					
ANR	10890497	Identifier	font		10890169	0					
ANR	10890498	Identifier	length		10890169	1					
ANR	10890499	CompoundStatement		56:60:1946:1946	10890169	1					
ANR	10890500	ExpressionStatement	return_error ( gs_error_invalidfont )	541:32:14688:14722	10890169	0	True				
ANR	10890501	CallExpression	return_error ( gs_error_invalidfont )		10890169	0					
ANR	10890502	Callee	return_error		10890169	0					
ANR	10890503	Identifier	return_error		10890169	0					
ANR	10890504	ArgumentList	gs_error_invalidfont		10890169	1					
ANR	10890505	Argument	gs_error_invalidfont		10890169	0					
ANR	10890506	Identifier	gs_error_invalidfont		10890169	0					
ANR	10890507	ExpressionStatement	glyph = u16 ( giddata )	543:28:14782:14802	10890169	1	True				
ANR	10890508	AssignmentExpression	glyph = u16 ( giddata )		10890169	0		=			
ANR	10890509	Identifier	glyph		10890169	0					
ANR	10890510	CallExpression	u16 ( giddata )		10890169	1					
ANR	10890511	Callee	u16		10890169	0					
ANR	10890512	Identifier	u16		10890169	0					
ANR	10890513	ArgumentList	giddata		10890169	1					
ANR	10890514	Argument	giddata		10890169	0					
ANR	10890515	Identifier	giddata		10890169	0					
ANR	10890516	IfStatement	if ( glyph == code )		10890169	1					
ANR	10890517	Condition	glyph == code	545:28:14858:14870	10890169	0	True				
ANR	10890518	EqualityExpression	glyph == code		10890169	0		==			
ANR	10890519	Identifier	glyph		10890169	0					
ANR	10890520	Identifier	code		10890169	1					
ANR	10890521	CompoundStatement		61:43:2165:2165	10890169	1					
ANR	10890522	ReturnStatement	return i ;	546:28:14903:14911	10890169	0	True				
ANR	10890523	Identifier	i		10890169	0					
ANR	10890524	ReturnStatement	return 0 ;	551:12:15005:15013	10890169	5	True				
ANR	10890525	PrimaryExpression	0		10890169	0					
ANR	10890526	Label	case 6 :	552:8:15023:15029	10890169	6	True				
ANR	10890527	CompoundStatement		71:16:2435:2465	10890169	7					
ANR	10890528	IdentifierDeclStatement	"int ch , i , length = u16 ( & table [ 8 ] ) ;"	554:16:15091:15125	10890169	0	True				
ANR	10890529	IdentifierDecl	ch		10890169	0					
ANR	10890530	IdentifierDeclType	int		10890169	0					
ANR	10890531	Identifier	ch		10890169	1					
ANR	10890532	IdentifierDecl	i		10890169	1					
ANR	10890533	IdentifierDeclType	int		10890169	0					
ANR	10890534	Identifier	i		10890169	1					
ANR	10890535	IdentifierDecl	length = u16 ( & table [ 8 ] )		10890169	2					
ANR	10890536	IdentifierDeclType	int		10890169	0					
ANR	10890537	Identifier	length		10890169	1					
ANR	10890538	AssignmentExpression	length = u16 ( & table [ 8 ] )		10890169	2		=			
ANR	10890539	Identifier	length		10890169	0					
ANR	10890540	CallExpression	u16 ( & table [ 8 ] )		10890169	1					
ANR	10890541	Callee	u16		10890169	0					
ANR	10890542	Identifier	u16		10890169	0					
ANR	10890543	ArgumentList	& table [ 8 ]		10890169	1					
ANR	10890544	Argument	& table [ 8 ]		10890169	0					
ANR	10890545	UnaryOperationExpression	& table [ 8 ]		10890169	0					
ANR	10890546	UnaryOperator	&		10890169	0					
ANR	10890547	ArrayIndexing	table [ 8 ]		10890169	1					
ANR	10890548	Identifier	table		10890169	0					
ANR	10890549	PrimaryExpression	8		10890169	1					
ANR	10890550	IdentifierDeclStatement	int firstCode = u16 ( & table [ 6 ] ) ;	555:16:15143:15173	10890169	1	True				
ANR	10890551	IdentifierDecl	firstCode = u16 ( & table [ 6 ] )		10890169	0					
ANR	10890552	IdentifierDeclType	int		10890169	0					
ANR	10890553	Identifier	firstCode		10890169	1					
ANR	10890554	AssignmentExpression	firstCode = u16 ( & table [ 6 ] )		10890169	2		=			
ANR	10890555	Identifier	firstCode		10890169	0					
ANR	10890556	CallExpression	u16 ( & table [ 6 ] )		10890169	1					
ANR	10890557	Callee	u16		10890169	0					
ANR	10890558	Identifier	u16		10890169	0					
ANR	10890559	ArgumentList	& table [ 6 ]		10890169	1					
ANR	10890560	Argument	& table [ 6 ]		10890169	0					
ANR	10890561	UnaryOperationExpression	& table [ 6 ]		10890169	0					
ANR	10890562	UnaryOperator	&		10890169	0					
ANR	10890563	ArrayIndexing	table [ 6 ]		10890169	1					
ANR	10890564	Identifier	table		10890169	0					
ANR	10890565	PrimaryExpression	6		10890169	1					
ANR	10890566	IfStatement	if ( length < 0 || length > 65535 )		10890169	2					
ANR	10890567	Condition	length < 0 || length > 65535	557:20:15196:15223	10890169	0	True				
ANR	10890568	OrExpression	length < 0 || length > 65535		10890169	0		||			
ANR	10890569	RelationalExpression	length < 0		10890169	0		<			
ANR	10890570	Identifier	length		10890169	0					
ANR	10890571	PrimaryExpression	0		10890169	1					
ANR	10890572	RelationalExpression	length > 65535		10890169	1		>			
ANR	10890573	Identifier	length		10890169	0					
ANR	10890574	PrimaryExpression	65535		10890169	1					
ANR	10890575	ReturnStatement	return gs_error_invalidfont ;	558:20:15246:15273	10890169	1	True				
ANR	10890576	Identifier	gs_error_invalidfont		10890169	0					
ANR	10890577	ForStatement	for ( i = 0 ; i < length ; i ++ )		10890169	3					
ANR	10890578	ForInit	i = 0 ;	560:21:15297:15300	10890169	0	True				
ANR	10890579	AssignmentExpression	i = 0		10890169	0		=			
ANR	10890580	Identifier	i		10890169	0					
ANR	10890581	PrimaryExpression	0		10890169	1					
ANR	10890582	Condition	i < length	560:25:15301:15308	10890169	1	True				
ANR	10890583	RelationalExpression	i < length		10890169	0		<			
ANR	10890584	Identifier	i		10890169	0					
ANR	10890585	Identifier	length		10890169	1					
ANR	10890586	PostIncDecOperationExpression	i ++	560:34:15310:15312	10890169	2	True				
ANR	10890587	Identifier	i		10890169	0					
ANR	10890588	IncDec	++		10890169	1					
ANR	10890589	CompoundStatement		76:39:2607:2607	10890169	3					
ANR	10890590	ExpressionStatement	t = & table [ 10 + ( i * 2 ) ]	561:20:15337:15361	10890169	0	True				
ANR	10890591	AssignmentExpression	t = & table [ 10 + ( i * 2 ) ]		10890169	0		=			
ANR	10890592	Identifier	t		10890169	0					
ANR	10890593	UnaryOperationExpression	& table [ 10 + ( i * 2 ) ]		10890169	1					
ANR	10890594	UnaryOperator	&		10890169	0					
ANR	10890595	ArrayIndexing	table [ 10 + ( i * 2 ) ]		10890169	1					
ANR	10890596	Identifier	table		10890169	0					
ANR	10890597	AdditiveExpression	10 + ( i * 2 )		10890169	1		+			
ANR	10890598	PrimaryExpression	10		10890169	0					
ANR	10890599	MultiplicativeExpression	i * 2		10890169	1		*			
ANR	10890600	Identifier	i		10890169	0					
ANR	10890601	PrimaryExpression	2		10890169	1					
ANR	10890602	IfStatement	if ( t + 2 > font -> data + font -> length )		10890169	1					
ANR	10890603	Condition	t + 2 > font -> data + font -> length	562:24:15387:15419	10890169	0	True				
ANR	10890604	RelationalExpression	t + 2 > font -> data + font -> length		10890169	0		>			
ANR	10890605	AdditiveExpression	t + 2		10890169	0		+			
ANR	10890606	Identifier	t		10890169	0					
ANR	10890607	PrimaryExpression	2		10890169	1					
ANR	10890608	AdditiveExpression	font -> data + font -> length		10890169	1		+			
ANR	10890609	PtrMemberAccess	font -> data		10890169	0					
ANR	10890610	Identifier	font		10890169	0					
ANR	10890611	Identifier	data		10890169	1					
ANR	10890612	PtrMemberAccess	font -> length		10890169	1					
ANR	10890613	Identifier	font		10890169	0					
ANR	10890614	Identifier	length		10890169	1					
ANR	10890615	ReturnStatement	return gs_error_invalidfont ;	563:24:15446:15473	10890169	1	True				
ANR	10890616	Identifier	gs_error_invalidfont		10890169	0					
ANR	10890617	ExpressionStatement	ch = u16 ( t )	564:20:15495:15506	10890169	2	True				
ANR	10890618	AssignmentExpression	ch = u16 ( t )		10890169	0		=			
ANR	10890619	Identifier	ch		10890169	0					
ANR	10890620	CallExpression	u16 ( t )		10890169	1					
ANR	10890621	Callee	u16		10890169	0					
ANR	10890622	Identifier	u16		10890169	0					
ANR	10890623	ArgumentList	t		10890169	1					
ANR	10890624	Argument	t		10890169	0					
ANR	10890625	Identifier	t		10890169	0					
ANR	10890626	IfStatement	if ( ch == code )		10890169	3					
ANR	10890627	Condition	ch == code	565:24:15532:15541	10890169	0	True				
ANR	10890628	EqualityExpression	ch == code		10890169	0		==			
ANR	10890629	Identifier	ch		10890169	0					
ANR	10890630	Identifier	code		10890169	1					
ANR	10890631	ReturnStatement	return ( firstCode + i ) ;	566:24:15568:15590	10890169	1	True				
ANR	10890632	AdditiveExpression	firstCode + i		10890169	0		+			
ANR	10890633	Identifier	firstCode		10890169	0					
ANR	10890634	Identifier	i		10890169	1					
ANR	10890635	ReturnStatement	return 0 ;	569:12:15636:15644	10890169	8	True				
ANR	10890636	PrimaryExpression	0		10890169	0					
ANR	10890637	Label	case 10 :	570:8:15654:15661	10890169	9	True				
ANR	10890638	CompoundStatement		89:16:3076:3107	10890169	10					
ANR	10890639	IdentifierDeclStatement	"unsigned int ch , i , length = u32 ( & table [ 20 ] ) ;"	572:16:15722:15766	10890169	0	True				
ANR	10890640	IdentifierDecl	ch		10890169	0					
ANR	10890641	IdentifierDeclType	unsigned int		10890169	0					
ANR	10890642	Identifier	ch		10890169	1					
ANR	10890643	IdentifierDecl	i		10890169	1					
ANR	10890644	IdentifierDeclType	unsigned int		10890169	0					
ANR	10890645	Identifier	i		10890169	1					
ANR	10890646	IdentifierDecl	length = u32 ( & table [ 20 ] )		10890169	2					
ANR	10890647	IdentifierDeclType	unsigned int		10890169	0					
ANR	10890648	Identifier	length		10890169	1					
ANR	10890649	AssignmentExpression	length = u32 ( & table [ 20 ] )		10890169	2		=			
ANR	10890650	Identifier	length		10890169	0					
ANR	10890651	CallExpression	u32 ( & table [ 20 ] )		10890169	1					
ANR	10890652	Callee	u32		10890169	0					
ANR	10890653	Identifier	u32		10890169	0					
ANR	10890654	ArgumentList	& table [ 20 ]		10890169	1					
ANR	10890655	Argument	& table [ 20 ]		10890169	0					
ANR	10890656	UnaryOperationExpression	& table [ 20 ]		10890169	0					
ANR	10890657	UnaryOperator	&		10890169	0					
ANR	10890658	ArrayIndexing	table [ 20 ]		10890169	1					
ANR	10890659	Identifier	table		10890169	0					
ANR	10890660	PrimaryExpression	20		10890169	1					
ANR	10890661	IdentifierDeclStatement	int firstCode = u32 ( & table [ 16 ] ) ;	573:16:15784:15815	10890169	1	True				
ANR	10890662	IdentifierDecl	firstCode = u32 ( & table [ 16 ] )		10890169	0					
ANR	10890663	IdentifierDeclType	int		10890169	0					
ANR	10890664	Identifier	firstCode		10890169	1					
ANR	10890665	AssignmentExpression	firstCode = u32 ( & table [ 16 ] )		10890169	2		=			
ANR	10890666	Identifier	firstCode		10890169	0					
ANR	10890667	CallExpression	u32 ( & table [ 16 ] )		10890169	1					
ANR	10890668	Callee	u32		10890169	0					
ANR	10890669	Identifier	u32		10890169	0					
ANR	10890670	ArgumentList	& table [ 16 ]		10890169	1					
ANR	10890671	Argument	& table [ 16 ]		10890169	0					
ANR	10890672	UnaryOperationExpression	& table [ 16 ]		10890169	0					
ANR	10890673	UnaryOperator	&		10890169	0					
ANR	10890674	ArrayIndexing	table [ 16 ]		10890169	1					
ANR	10890675	Identifier	table		10890169	0					
ANR	10890676	PrimaryExpression	16		10890169	1					
ANR	10890677	ForStatement	for ( i = 0 ; i < length ; i ++ )		10890169	2					
ANR	10890678	ForInit	i = 0 ;	574:21:15838:15841	10890169	0	True				
ANR	10890679	AssignmentExpression	i = 0		10890169	0		=			
ANR	10890680	Identifier	i		10890169	0					
ANR	10890681	PrimaryExpression	0		10890169	1					
ANR	10890682	Condition	i < length	574:25:15842:15849	10890169	1	True				
ANR	10890683	RelationalExpression	i < length		10890169	0		<			
ANR	10890684	Identifier	i		10890169	0					
ANR	10890685	Identifier	length		10890169	1					
ANR	10890686	PostIncDecOperationExpression	i ++	574:34:15851:15853	10890169	2	True				
ANR	10890687	Identifier	i		10890169	0					
ANR	10890688	IncDec	++		10890169	1					
ANR	10890689	CompoundStatement		90:39:3148:3148	10890169	3					
ANR	10890690	ExpressionStatement	t = & table [ 10 + ( i * 2 ) ]	575:20:15878:15902	10890169	0	True				
ANR	10890691	AssignmentExpression	t = & table [ 10 + ( i * 2 ) ]		10890169	0		=			
ANR	10890692	Identifier	t		10890169	0					
ANR	10890693	UnaryOperationExpression	& table [ 10 + ( i * 2 ) ]		10890169	1					
ANR	10890694	UnaryOperator	&		10890169	0					
ANR	10890695	ArrayIndexing	table [ 10 + ( i * 2 ) ]		10890169	1					
ANR	10890696	Identifier	table		10890169	0					
ANR	10890697	AdditiveExpression	10 + ( i * 2 )		10890169	1		+			
ANR	10890698	PrimaryExpression	10		10890169	0					
ANR	10890699	MultiplicativeExpression	i * 2		10890169	1		*			
ANR	10890700	Identifier	i		10890169	0					
ANR	10890701	PrimaryExpression	2		10890169	1					
ANR	10890702	IfStatement	if ( t + 2 > font -> data + font -> length )		10890169	1					
ANR	10890703	Condition	t + 2 > font -> data + font -> length	576:24:15928:15960	10890169	0	True				
ANR	10890704	RelationalExpression	t + 2 > font -> data + font -> length		10890169	0		>			
ANR	10890705	AdditiveExpression	t + 2		10890169	0		+			
ANR	10890706	Identifier	t		10890169	0					
ANR	10890707	PrimaryExpression	2		10890169	1					
ANR	10890708	AdditiveExpression	font -> data + font -> length		10890169	1		+			
ANR	10890709	PtrMemberAccess	font -> data		10890169	0					
ANR	10890710	Identifier	font		10890169	0					
ANR	10890711	Identifier	data		10890169	1					
ANR	10890712	PtrMemberAccess	font -> length		10890169	1					
ANR	10890713	Identifier	font		10890169	0					
ANR	10890714	Identifier	length		10890169	1					
ANR	10890715	ReturnStatement	return gs_error_invalidfont ;	577:24:15987:16014	10890169	1	True				
ANR	10890716	Identifier	gs_error_invalidfont		10890169	0					
ANR	10890717	ExpressionStatement	ch = u16 ( t )	578:20:16036:16047	10890169	2	True				
ANR	10890718	AssignmentExpression	ch = u16 ( t )		10890169	0		=			
ANR	10890719	Identifier	ch		10890169	0					
ANR	10890720	CallExpression	u16 ( t )		10890169	1					
ANR	10890721	Callee	u16		10890169	0					
ANR	10890722	Identifier	u16		10890169	0					
ANR	10890723	ArgumentList	t		10890169	1					
ANR	10890724	Argument	t		10890169	0					
ANR	10890725	Identifier	t		10890169	0					
ANR	10890726	IfStatement	if ( ch == code )		10890169	3					
ANR	10890727	Condition	ch == code	579:24:16073:16082	10890169	0	True				
ANR	10890728	EqualityExpression	ch == code		10890169	0		==			
ANR	10890729	Identifier	ch		10890169	0					
ANR	10890730	Identifier	code		10890169	1					
ANR	10890731	ReturnStatement	return ( firstCode + i ) ;	580:24:16109:16131	10890169	1	True				
ANR	10890732	AdditiveExpression	firstCode + i		10890169	0		+			
ANR	10890733	Identifier	firstCode		10890169	0					
ANR	10890734	Identifier	i		10890169	1					
ANR	10890735	ReturnStatement	return 0 ;	583:12:16177:16185	10890169	11	True				
ANR	10890736	PrimaryExpression	0		10890169	0					
ANR	10890737	Label	case 12 :	584:8:16195:16202	10890169	12	True				
ANR	10890738	CompoundStatement		103:16:3617:3626	10890169	13					
ANR	10890739	IdentifierDeclStatement	unsigned int nGroups = u32 ( & table [ 12 ] ) ;	586:16:16269:16307	10890169	0	True				
ANR	10890740	IdentifierDecl	nGroups = u32 ( & table [ 12 ] )		10890169	0					
ANR	10890741	IdentifierDeclType	unsigned int		10890169	0					
ANR	10890742	Identifier	nGroups		10890169	1					
ANR	10890743	AssignmentExpression	nGroups = u32 ( & table [ 12 ] )		10890169	2		=			
ANR	10890744	Identifier	nGroups		10890169	0					
ANR	10890745	CallExpression	u32 ( & table [ 12 ] )		10890169	1					
ANR	10890746	Callee	u32		10890169	0					
ANR	10890747	Identifier	u32		10890169	0					
ANR	10890748	ArgumentList	& table [ 12 ]		10890169	1					
ANR	10890749	Argument	& table [ 12 ]		10890169	0					
ANR	10890750	UnaryOperationExpression	& table [ 12 ]		10890169	0					
ANR	10890751	UnaryOperator	&		10890169	0					
ANR	10890752	ArrayIndexing	table [ 12 ]		10890169	1					
ANR	10890753	Identifier	table		10890169	0					
ANR	10890754	PrimaryExpression	12		10890169	1					
ANR	10890755	IdentifierDeclStatement	int Group ;	587:16:16325:16334	10890169	1	True				
ANR	10890756	IdentifierDecl	Group		10890169	0					
ANR	10890757	IdentifierDeclType	int		10890169	0					
ANR	10890758	Identifier	Group		10890169	1					
ANR	10890759	ForStatement	for ( Group = 0 ; Group < nGroups ; Group ++ )		10890169	2					
ANR	10890760	ForInit	Group = 0 ;	589:21:16358:16365	10890169	0	True				
ANR	10890761	AssignmentExpression	Group = 0		10890169	0		=			
ANR	10890762	Identifier	Group		10890169	0					
ANR	10890763	PrimaryExpression	0		10890169	1					
ANR	10890764	Condition	Group < nGroups	589:29:16366:16378	10890169	1	True				
ANR	10890765	RelationalExpression	Group < nGroups		10890169	0		<			
ANR	10890766	Identifier	Group		10890169	0					
ANR	10890767	Identifier	nGroups		10890169	1					
ANR	10890768	PostIncDecOperationExpression	Group ++	589:43:16380:16386	10890169	2	True				
ANR	10890769	Identifier	Group		10890169	0					
ANR	10890770	IncDec	++		10890169	1					
ANR	10890771	CompoundStatement		109:20:3865:3920	10890169	3					
ANR	10890772	IdentifierDeclStatement	int startCharCode = u32 ( & table [ 16 + ( Group * 12 ) ] ) ;	591:20:16427:16477	10890169	0	True				
ANR	10890773	IdentifierDecl	startCharCode = u32 ( & table [ 16 + ( Group * 12 ) ] )		10890169	0					
ANR	10890774	IdentifierDeclType	int		10890169	0					
ANR	10890775	Identifier	startCharCode		10890169	1					
ANR	10890776	AssignmentExpression	startCharCode = u32 ( & table [ 16 + ( Group * 12 ) ] )		10890169	2		=			
ANR	10890777	Identifier	startCharCode		10890169	0					
ANR	10890778	CallExpression	u32 ( & table [ 16 + ( Group * 12 ) ] )		10890169	1					
ANR	10890779	Callee	u32		10890169	0					
ANR	10890780	Identifier	u32		10890169	0					
ANR	10890781	ArgumentList	& table [ 16 + ( Group * 12 ) ]		10890169	1					
ANR	10890782	Argument	& table [ 16 + ( Group * 12 ) ]		10890169	0					
ANR	10890783	UnaryOperationExpression	& table [ 16 + ( Group * 12 ) ]		10890169	0					
ANR	10890784	UnaryOperator	&		10890169	0					
ANR	10890785	ArrayIndexing	table [ 16 + ( Group * 12 ) ]		10890169	1					
ANR	10890786	Identifier	table		10890169	0					
ANR	10890787	AdditiveExpression	16 + ( Group * 12 )		10890169	1		+			
ANR	10890788	PrimaryExpression	16		10890169	0					
ANR	10890789	MultiplicativeExpression	Group * 12		10890169	1		*			
ANR	10890790	Identifier	Group		10890169	0					
ANR	10890791	PrimaryExpression	12		10890169	1					
ANR	10890792	IdentifierDeclStatement	int endCharCode = u32 ( & table [ 16 + ( Group * 12 ) + 4 ] ) ;	592:20:16499:16551	10890169	1	True				
ANR	10890793	IdentifierDecl	endCharCode = u32 ( & table [ 16 + ( Group * 12 ) + 4 ] )		10890169	0					
ANR	10890794	IdentifierDeclType	int		10890169	0					
ANR	10890795	Identifier	endCharCode		10890169	1					
ANR	10890796	AssignmentExpression	endCharCode = u32 ( & table [ 16 + ( Group * 12 ) + 4 ] )		10890169	2		=			
ANR	10890797	Identifier	endCharCode		10890169	0					
ANR	10890798	CallExpression	u32 ( & table [ 16 + ( Group * 12 ) + 4 ] )		10890169	1					
ANR	10890799	Callee	u32		10890169	0					
ANR	10890800	Identifier	u32		10890169	0					
ANR	10890801	ArgumentList	& table [ 16 + ( Group * 12 ) + 4 ]		10890169	1					
ANR	10890802	Argument	& table [ 16 + ( Group * 12 ) + 4 ]		10890169	0					
ANR	10890803	UnaryOperationExpression	& table [ 16 + ( Group * 12 ) + 4 ]		10890169	0					
ANR	10890804	UnaryOperator	&		10890169	0					
ANR	10890805	ArrayIndexing	table [ 16 + ( Group * 12 ) + 4 ]		10890169	1					
ANR	10890806	Identifier	table		10890169	0					
ANR	10890807	AdditiveExpression	16 + ( Group * 12 ) + 4		10890169	1		+			
ANR	10890808	PrimaryExpression	16		10890169	0					
ANR	10890809	AdditiveExpression	( Group * 12 ) + 4		10890169	1		+			
ANR	10890810	MultiplicativeExpression	Group * 12		10890169	0		*			
ANR	10890811	Identifier	Group		10890169	0					
ANR	10890812	PrimaryExpression	12		10890169	1					
ANR	10890813	PrimaryExpression	4		10890169	1					
ANR	10890814	IdentifierDeclStatement	int startGlyphCode = u32 ( & table [ 16 + ( Group * 12 ) + 8 ] ) ;	593:20:16573:16628	10890169	2	True				
ANR	10890815	IdentifierDecl	startGlyphCode = u32 ( & table [ 16 + ( Group * 12 ) + 8 ] )		10890169	0					
ANR	10890816	IdentifierDeclType	int		10890169	0					
ANR	10890817	Identifier	startGlyphCode		10890169	1					
ANR	10890818	AssignmentExpression	startGlyphCode = u32 ( & table [ 16 + ( Group * 12 ) + 8 ] )		10890169	2		=			
ANR	10890819	Identifier	startGlyphCode		10890169	0					
ANR	10890820	CallExpression	u32 ( & table [ 16 + ( Group * 12 ) + 8 ] )		10890169	1					
ANR	10890821	Callee	u32		10890169	0					
ANR	10890822	Identifier	u32		10890169	0					
ANR	10890823	ArgumentList	& table [ 16 + ( Group * 12 ) + 8 ]		10890169	1					
ANR	10890824	Argument	& table [ 16 + ( Group * 12 ) + 8 ]		10890169	0					
ANR	10890825	UnaryOperationExpression	& table [ 16 + ( Group * 12 ) + 8 ]		10890169	0					
ANR	10890826	UnaryOperator	&		10890169	0					
ANR	10890827	ArrayIndexing	table [ 16 + ( Group * 12 ) + 8 ]		10890169	1					
ANR	10890828	Identifier	table		10890169	0					
ANR	10890829	AdditiveExpression	16 + ( Group * 12 ) + 8		10890169	1		+			
ANR	10890830	PrimaryExpression	16		10890169	0					
ANR	10890831	AdditiveExpression	( Group * 12 ) + 8		10890169	1		+			
ANR	10890832	MultiplicativeExpression	Group * 12		10890169	0		*			
ANR	10890833	Identifier	Group		10890169	0					
ANR	10890834	PrimaryExpression	12		10890169	1					
ANR	10890835	PrimaryExpression	8		10890169	1					
ANR	10890836	IfStatement	if ( code >= startGlyphCode && code <= ( startGlyphCode + ( endCharCode - startCharCode ) ) )		10890169	3					
ANR	10890837	Condition	code >= startGlyphCode && code <= ( startGlyphCode + ( endCharCode - startCharCode ) )	595:24:16655:16736	10890169	0	True				
ANR	10890838	AndExpression	code >= startGlyphCode && code <= ( startGlyphCode + ( endCharCode - startCharCode ) )		10890169	0		&&			
ANR	10890839	RelationalExpression	code >= startGlyphCode		10890169	0		>=			
ANR	10890840	Identifier	code		10890169	0					
ANR	10890841	Identifier	startGlyphCode		10890169	1					
ANR	10890842	RelationalExpression	code <= ( startGlyphCode + ( endCharCode - startCharCode ) )		10890169	1		<=			
ANR	10890843	Identifier	code		10890169	0					
ANR	10890844	AdditiveExpression	startGlyphCode + ( endCharCode - startCharCode )		10890169	1		+			
ANR	10890845	Identifier	startGlyphCode		10890169	0					
ANR	10890846	AdditiveExpression	endCharCode - startCharCode		10890169	1		-			
ANR	10890847	Identifier	endCharCode		10890169	0					
ANR	10890848	Identifier	startCharCode		10890169	1					
ANR	10890849	CompoundStatement		111:108:4031:4031	10890169	1					
ANR	10890850	ReturnStatement	return startGlyphCode + ( code - startCharCode ) ;	596:24:16765:16811	10890169	0	True				
ANR	10890851	AdditiveExpression	startGlyphCode + ( code - startCharCode )		10890169	0		+			
ANR	10890852	Identifier	startGlyphCode		10890169	0					
ANR	10890853	AdditiveExpression	code - startCharCode		10890169	1		-			
ANR	10890854	Identifier	code		10890169	0					
ANR	10890855	Identifier	startCharCode		10890169	1					
ANR	10890856	ReturnStatement	return 0 ;	600:12:16879:16887	10890169	14	True				
ANR	10890857	PrimaryExpression	0		10890169	0					
ANR	10890858	Label	case 2 :	601:8:16897:16903	10890169	15	True				
ANR	10890859	Label	case 8 :	602:8:16952:16958	10890169	16	True				
ANR	10890860	Label	default :	603:8:17016:17023	10890169	17	True				
ANR	10890861	Identifier	default		10890169	0					
ANR	10890862	ExpressionStatement	"gs_warn1 ( ""unknown cmap format: %d\\n"" , u16 ( table ) )"	604:12:17037:17086	10890169	18	True				
ANR	10890863	CallExpression	"gs_warn1 ( ""unknown cmap format: %d\\n"" , u16 ( table ) )"		10890169	0					
ANR	10890864	Callee	gs_warn1		10890169	0					
ANR	10890865	Identifier	gs_warn1		10890169	0					
ANR	10890866	ArgumentList	"""unknown cmap format: %d\\n"""		10890169	1					
ANR	10890867	Argument	"""unknown cmap format: %d\\n"""		10890169	0					
ANR	10890868	PrimaryExpression	"""unknown cmap format: %d\\n"""		10890169	0					
ANR	10890869	Argument	u16 ( table )		10890169	1					
ANR	10890870	CallExpression	u16 ( table )		10890169	0					
ANR	10890871	Callee	u16		10890169	0					
ANR	10890872	Identifier	u16		10890169	0					
ANR	10890873	ArgumentList	table		10890169	1					
ANR	10890874	Argument	table		10890169	0					
ANR	10890875	Identifier	table		10890169	0					
ANR	10890876	ReturnStatement	return 0 ;	605:12:17100:17108	10890169	19	True				
ANR	10890877	PrimaryExpression	0		10890169	0					
ANR	10890878	ReturnStatement	return 0 ;	607:4:17120:17128	10890169	5	True				
ANR	10890879	PrimaryExpression	0		10890169	0					
ANR	10890880	ReturnType	static int		10890169	1					
ANR	10890881	Identifier	xps_decode_font_char_imp		10890169	2					
ANR	10890882	ParameterList	"xps_font_t * font , int code"		10890169	3					
ANR	10890883	Parameter	xps_font_t * font	484:25:12679:12694	10890169	0	True				
ANR	10890884	ParameterType	xps_font_t *		10890169	0					
ANR	10890885	Identifier	font		10890169	1					
ANR	10890886	Parameter	int code	484:43:12697:12704	10890169	1	True				
ANR	10890887	ParameterType	int		10890169	0					
ANR	10890888	Identifier	code		10890169	1					
ANR	10890889	CFGEntryNode	ENTRY		10890169		True				
ANR	10890890	CFGExitNode	EXIT		10890169		True				
ANR	10890891	Symbol	Group		10890169						
ANR	10890892	Symbol	code		10890169						
ANR	10890893	Symbol	startGlyphCode		10890169						
ANR	10890894	Symbol	delta		10890169						
ANR	10890895	Symbol	roff		10890169						
ANR	10890896	Symbol	font -> cmapsubtable		10890169						
ANR	10890897	Symbol	giddata		10890169						
ANR	10890898	Symbol	u32		10890169						
ANR	10890899	Symbol	s16		10890169						
ANR	10890900	Symbol	end		10890169						
ANR	10890901	Symbol	* font		10890169						
ANR	10890902	Symbol	u16		10890169						
ANR	10890903	Symbol	firstCode		10890169						
ANR	10890904	Symbol	font -> length		10890169						
ANR	10890905	Symbol	gs_error_invalidfont		10890169						
ANR	10890906	Symbol	idDelta		10890169						
ANR	10890907	Symbol	table		10890169						
ANR	10890908	Symbol	startCount		10890169						
ANR	10890909	Symbol	ch		10890169						
ANR	10890910	Symbol	segCount2		10890169						
ANR	10890911	Symbol	length		10890169						
ANR	10890912	Symbol	start		10890169						
ANR	10890913	Symbol	i		10890169						
ANR	10890914	Symbol	* table		10890169						
ANR	10890915	Symbol	i2		10890169						
ANR	10890916	Symbol	glyph		10890169						
ANR	10890917	Symbol	nGroups		10890169						
ANR	10890918	Symbol	* i		10890169						
ANR	10890919	Symbol	t		10890169						
ANR	10890920	Symbol	font -> data		10890169						
ANR	10890921	Symbol	endCount		10890169						
ANR	10890922	Symbol	startCharCode		10890169						
ANR	10890923	Symbol	endCharCode		10890169						
ANR	10890924	Symbol	idRangeOffset		10890169						
ANR	10890925	Symbol	font		10890169						
ANR	10890926	Function	xps_decode_font_char	610:0:17133:17295							
ANR	10890927	FunctionDef	"xps_decode_font_char (xps_font_t * font , int code)"		10890926	0					
ANR	10890928	CompoundStatement		612:0:17186:17295	10890926	0					
ANR	10890929	IdentifierDeclStatement	"int gid = xps_decode_font_char_imp ( font , code ) ;"	613:4:17192:17238	10890926	0	True				
ANR	10890930	IdentifierDecl	"gid = xps_decode_font_char_imp ( font , code )"		10890926	0					
ANR	10890931	IdentifierDeclType	int		10890926	0					
ANR	10890932	Identifier	gid		10890926	1					
ANR	10890933	AssignmentExpression	"gid = xps_decode_font_char_imp ( font , code )"		10890926	2		=			
ANR	10890934	Identifier	gid		10890926	0					
ANR	10890935	CallExpression	"xps_decode_font_char_imp ( font , code )"		10890926	1					
ANR	10890936	Callee	xps_decode_font_char_imp		10890926	0					
ANR	10890937	Identifier	xps_decode_font_char_imp		10890926	0					
ANR	10890938	ArgumentList	font		10890926	1					
ANR	10890939	Argument	font		10890926	0					
ANR	10890940	Identifier	font		10890926	0					
ANR	10890941	Argument	code		10890926	1					
ANR	10890942	Identifier	code		10890926	0					
ANR	10890943	IfStatement	if ( gid == 0 )		10890926	1					
ANR	10890944	Condition	gid == 0	614:8:17248:17255	10890926	0	True				
ANR	10890945	EqualityExpression	gid == 0		10890926	0		==			
ANR	10890946	Identifier	gid		10890926	0					
ANR	10890947	PrimaryExpression	0		10890926	1					
ANR	10890948	ReturnStatement	return code ;	615:8:17266:17277	10890926	1	True				
ANR	10890949	Identifier	code		10890926	0					
ANR	10890950	ReturnStatement	return gid ;	616:4:17283:17293	10890926	2	True				
ANR	10890951	Identifier	gid		10890926	0					
ANR	10890952	ReturnType	int		10890926	1					
ANR	10890953	Identifier	xps_decode_font_char		10890926	2					
ANR	10890954	ParameterList	"xps_font_t * font , int code"		10890926	3					
ANR	10890955	Parameter	xps_font_t * font	611:21:17158:17173	10890926	0	True				
ANR	10890956	ParameterType	xps_font_t *		10890926	0					
ANR	10890957	Identifier	font		10890926	1					
ANR	10890958	Parameter	int code	611:39:17176:17183	10890926	1	True				
ANR	10890959	ParameterType	int		10890926	0					
ANR	10890960	Identifier	code		10890926	1					
ANR	10890961	CFGEntryNode	ENTRY		10890926		True				
ANR	10890962	CFGExitNode	EXIT		10890926		True				
ANR	10890963	Symbol	code		10890926						
ANR	10890964	Symbol	gid		10890926						
ANR	10890965	Symbol	xps_decode_font_char_imp		10890926						
ANR	10890966	Symbol	font		10890926						
ANR	10890967	Function	xps_encode_font_char	619:0:17298:17516							
ANR	10890968	FunctionDef	"xps_encode_font_char (xps_font_t * font , int code)"		10890967	0					
ANR	10890969	CompoundStatement		621:0:17351:17516	10890967	0					
ANR	10890970	IdentifierDeclStatement	"int gid = xps_encode_font_char_imp ( font , code ) ;"	622:4:17357:17403	10890967	0	True				
ANR	10890971	IdentifierDecl	"gid = xps_encode_font_char_imp ( font , code )"		10890967	0					
ANR	10890972	IdentifierDeclType	int		10890967	0					
ANR	10890973	Identifier	gid		10890967	1					
ANR	10890974	AssignmentExpression	"gid = xps_encode_font_char_imp ( font , code )"		10890967	2		=			
ANR	10890975	Identifier	gid		10890967	0					
ANR	10890976	CallExpression	"xps_encode_font_char_imp ( font , code )"		10890967	1					
ANR	10890977	Callee	xps_encode_font_char_imp		10890967	0					
ANR	10890978	Identifier	xps_encode_font_char_imp		10890967	0					
ANR	10890979	ArgumentList	font		10890967	1					
ANR	10890980	Argument	font		10890967	0					
ANR	10890981	Identifier	font		10890967	0					
ANR	10890982	Argument	code		10890967	1					
ANR	10890983	Identifier	code		10890967	0					
ANR	10890984	IfStatement	if ( gid == 0 && font -> usepua )		10890967	1					
ANR	10890985	Condition	gid == 0 && font -> usepua	623:8:17413:17436	10890967	0	True				
ANR	10890986	AndExpression	gid == 0 && font -> usepua		10890967	0		&&			
ANR	10890987	EqualityExpression	gid == 0		10890967	0		==			
ANR	10890988	Identifier	gid		10890967	0					
ANR	10890989	PrimaryExpression	0		10890967	1					
ANR	10890990	PtrMemberAccess	font -> usepua		10890967	1					
ANR	10890991	Identifier	font		10890967	0					
ANR	10890992	Identifier	usepua		10890967	1					
ANR	10890993	ExpressionStatement	"gid = xps_encode_font_char_imp ( font , 0xF000 | code )"	624:8:17447:17498	10890967	1	True				
ANR	10890994	AssignmentExpression	"gid = xps_encode_font_char_imp ( font , 0xF000 | code )"		10890967	0		=			
ANR	10890995	Identifier	gid		10890967	0					
ANR	10890996	CallExpression	"xps_encode_font_char_imp ( font , 0xF000 | code )"		10890967	1					
ANR	10890997	Callee	xps_encode_font_char_imp		10890967	0					
ANR	10890998	Identifier	xps_encode_font_char_imp		10890967	0					
ANR	10890999	ArgumentList	font		10890967	1					
ANR	10891000	Argument	font		10890967	0					
ANR	10891001	Identifier	font		10890967	0					
ANR	10891002	Argument	0xF000 | code		10890967	1					
ANR	10891003	InclusiveOrExpression	0xF000 | code		10890967	0		|			
ANR	10891004	PrimaryExpression	0xF000		10890967	0					
ANR	10891005	Identifier	code		10890967	1					
ANR	10891006	ReturnStatement	return gid ;	625:4:17504:17514	10890967	2	True				
ANR	10891007	Identifier	gid		10890967	0					
ANR	10891008	ReturnType	int		10890967	1					
ANR	10891009	Identifier	xps_encode_font_char		10890967	2					
ANR	10891010	ParameterList	"xps_font_t * font , int code"		10890967	3					
ANR	10891011	Parameter	xps_font_t * font	620:21:17323:17338	10890967	0	True				
ANR	10891012	ParameterType	xps_font_t *		10890967	0					
ANR	10891013	Identifier	font		10890967	1					
ANR	10891014	Parameter	int code	620:39:17341:17348	10890967	1	True				
ANR	10891015	ParameterType	int		10890967	0					
ANR	10891016	Identifier	code		10890967	1					
ANR	10891017	CFGEntryNode	ENTRY		10890967		True				
ANR	10891018	CFGExitNode	EXIT		10890967		True				
ANR	10891019	Symbol	code		10890967						
ANR	10891020	Symbol	gid		10890967						
ANR	10891021	Symbol	font -> usepua		10890967						
ANR	10891022	Symbol	* font		10890967						
ANR	10891023	Symbol	xps_encode_font_char_imp		10890967						
ANR	10891024	Symbol	font		10890967						
ANR	10891025	Function	xps_measure_font_glyph	634:0:17709:20769							
ANR	10891026	FunctionDef	"xps_measure_font_glyph (xps_context_t * ctx , xps_font_t * font , int gid , xps_glyph_metrics_t * mtx)"		10891025	0					
ANR	10891027	CompoundStatement		636:0:17810:20769	10891025	0					
ANR	10891028	IdentifierDeclStatement	"int head , format , loca , glyf ;"	638:4:17817:17845	10891025	0	True				
ANR	10891029	IdentifierDecl	head		10891025	0					
ANR	10891030	IdentifierDeclType	int		10891025	0					
ANR	10891031	Identifier	head		10891025	1					
ANR	10891032	IdentifierDecl	format		10891025	1					
ANR	10891033	IdentifierDeclType	int		10891025	0					
ANR	10891034	Identifier	format		10891025	1					
ANR	10891035	IdentifierDecl	loca		10891025	2					
ANR	10891036	IdentifierDeclType	int		10891025	0					
ANR	10891037	Identifier	loca		10891025	1					
ANR	10891038	IdentifierDecl	glyf		10891025	3					
ANR	10891039	IdentifierDeclType	int		10891025	0					
ANR	10891040	Identifier	glyf		10891025	1					
ANR	10891041	IdentifierDeclStatement	"int ofs , len ;"	639:4:17851:17863	10891025	1	True				
ANR	10891042	IdentifierDecl	ofs		10891025	0					
ANR	10891043	IdentifierDeclType	int		10891025	0					
ANR	10891044	Identifier	ofs		10891025	1					
ANR	10891045	IdentifierDecl	len		10891025	1					
ANR	10891046	IdentifierDeclType	int		10891025	0					
ANR	10891047	Identifier	len		10891025	1					
ANR	10891048	IdentifierDeclStatement	"int idx , i , n ;"	640:4:17869:17882	10891025	2	True				
ANR	10891049	IdentifierDecl	idx		10891025	0					
ANR	10891050	IdentifierDeclType	int		10891025	0					
ANR	10891051	Identifier	idx		10891025	1					
ANR	10891052	IdentifierDecl	i		10891025	1					
ANR	10891053	IdentifierDeclType	int		10891025	0					
ANR	10891054	Identifier	i		10891025	1					
ANR	10891055	IdentifierDecl	n		10891025	2					
ANR	10891056	IdentifierDeclType	int		10891025	0					
ANR	10891057	Identifier	n		10891025	1					
ANR	10891058	IdentifierDeclStatement	"int hadv , vadv , vorg ;"	641:4:17888:17908	10891025	3	True				
ANR	10891059	IdentifierDecl	hadv		10891025	0					
ANR	10891060	IdentifierDeclType	int		10891025	0					
ANR	10891061	Identifier	hadv		10891025	1					
ANR	10891062	IdentifierDecl	vadv		10891025	1					
ANR	10891063	IdentifierDeclType	int		10891025	0					
ANR	10891064	Identifier	vadv		10891025	1					
ANR	10891065	IdentifierDecl	vorg		10891025	2					
ANR	10891066	IdentifierDeclType	int		10891025	0					
ANR	10891067	Identifier	vorg		10891025	1					
ANR	10891068	IdentifierDeclStatement	"int vtop , ymax , desc ;"	642:4:17914:17934	10891025	4	True				
ANR	10891069	IdentifierDecl	vtop		10891025	0					
ANR	10891070	IdentifierDeclType	int		10891025	0					
ANR	10891071	Identifier	vtop		10891025	1					
ANR	10891072	IdentifierDecl	ymax		10891025	1					
ANR	10891073	IdentifierDeclType	int		10891025	0					
ANR	10891074	Identifier	ymax		10891025	1					
ANR	10891075	IdentifierDecl	desc		10891025	2					
ANR	10891076	IdentifierDeclType	int		10891025	0					
ANR	10891077	Identifier	desc		10891025	1					
ANR	10891078	IdentifierDeclStatement	int scale ;	643:4:17940:17949	10891025	5	True				
ANR	10891079	IdentifierDecl	scale		10891025	0					
ANR	10891080	IdentifierDeclType	int		10891025	0					
ANR	10891081	Identifier	scale		10891025	1					
ANR	10891082	ExpressionStatement	scale = 1000	647:4:17988:18000	10891025	6	True				
ANR	10891083	AssignmentExpression	scale = 1000		10891025	0		=			
ANR	10891084	Identifier	scale		10891025	0					
ANR	10891085	PrimaryExpression	1000		10891025	1					
ANR	10891086	ExpressionStatement	hadv = 500	648:4:18025:18035	10891025	7	True				
ANR	10891087	AssignmentExpression	hadv = 500		10891025	0		=			
ANR	10891088	Identifier	hadv		10891025	0					
ANR	10891089	PrimaryExpression	500		10891025	1					
ANR	10891090	ExpressionStatement	vadv = - 1000	649:4:18041:18053	10891025	8	True				
ANR	10891091	AssignmentExpression	vadv = - 1000		10891025	0		=			
ANR	10891092	Identifier	vadv		10891025	0					
ANR	10891093	UnaryOperationExpression	- 1000		10891025	1					
ANR	10891094	UnaryOperator	-		10891025	0					
ANR	10891095	PrimaryExpression	1000		10891025	1					
ANR	10891096	ExpressionStatement	vorg = 1000	650:4:18059:18070	10891025	9	True				
ANR	10891097	AssignmentExpression	vorg = 1000		10891025	0		=			
ANR	10891098	Identifier	vorg		10891025	0					
ANR	10891099	PrimaryExpression	1000		10891025	1					
ANR	10891100	ExpressionStatement	"ofs = xps_find_sfnt_table ( font , ""hhea"" , & len )"	656:4:18129:18174	10891025	10	True				
ANR	10891101	AssignmentExpression	"ofs = xps_find_sfnt_table ( font , ""hhea"" , & len )"		10891025	0		=			
ANR	10891102	Identifier	ofs		10891025	0					
ANR	10891103	CallExpression	"xps_find_sfnt_table ( font , ""hhea"" , & len )"		10891025	1					
ANR	10891104	Callee	xps_find_sfnt_table		10891025	0					
ANR	10891105	Identifier	xps_find_sfnt_table		10891025	0					
ANR	10891106	ArgumentList	font		10891025	1					
ANR	10891107	Argument	font		10891025	0					
ANR	10891108	Identifier	font		10891025	0					
ANR	10891109	Argument	"""hhea"""		10891025	1					
ANR	10891110	PrimaryExpression	"""hhea"""		10891025	0					
ANR	10891111	Argument	& len		10891025	2					
ANR	10891112	UnaryOperationExpression	& len		10891025	0					
ANR	10891113	UnaryOperator	&		10891025	0					
ANR	10891114	Identifier	len		10891025	1					
ANR	10891115	IfStatement	if ( ofs < 0 || len < 2 * 18 )		10891025	11					
ANR	10891116	Condition	ofs < 0 || len < 2 * 18	657:8:18184:18206	10891025	0	True				
ANR	10891117	OrExpression	ofs < 0 || len < 2 * 18		10891025	0		||			
ANR	10891118	RelationalExpression	ofs < 0		10891025	0		<			
ANR	10891119	Identifier	ofs		10891025	0					
ANR	10891120	PrimaryExpression	0		10891025	1					
ANR	10891121	RelationalExpression	len < 2 * 18		10891025	1		<			
ANR	10891122	Identifier	len		10891025	0					
ANR	10891123	MultiplicativeExpression	2 * 18		10891025	1		*			
ANR	10891124	PrimaryExpression	2		10891025	0					
ANR	10891125	PrimaryExpression	18		10891025	1					
ANR	10891126	CompoundStatement		23:4:402:402	10891025	1					
ANR	10891127	ExpressionStatement	"gs_warn ( ""hhea table is too short"" )"	659:8:18223:18257	10891025	0	True				
ANR	10891128	CallExpression	"gs_warn ( ""hhea table is too short"" )"		10891025	0					
ANR	10891129	Callee	gs_warn		10891025	0					
ANR	10891130	Identifier	gs_warn		10891025	0					
ANR	10891131	ArgumentList	"""hhea table is too short"""		10891025	1					
ANR	10891132	Argument	"""hhea table is too short"""		10891025	0					
ANR	10891133	PrimaryExpression	"""hhea table is too short"""		10891025	0					
ANR	10891134	ReturnStatement	return ;	660:8:18267:18273	10891025	1	True				
ANR	10891135	ExpressionStatement	vorg = s16 ( font -> data + ofs + 4 )	663:4:18286:18318	10891025	12	True				
ANR	10891136	AssignmentExpression	vorg = s16 ( font -> data + ofs + 4 )		10891025	0		=			
ANR	10891137	Identifier	vorg		10891025	0					
ANR	10891138	CallExpression	s16 ( font -> data + ofs + 4 )		10891025	1					
ANR	10891139	Callee	s16		10891025	0					
ANR	10891140	Identifier	s16		10891025	0					
ANR	10891141	ArgumentList	font -> data + ofs + 4		10891025	1					
ANR	10891142	Argument	font -> data + ofs + 4		10891025	0					
ANR	10891143	AdditiveExpression	font -> data + ofs + 4		10891025	0		+			
ANR	10891144	PtrMemberAccess	font -> data		10891025	0					
ANR	10891145	Identifier	font		10891025	0					
ANR	10891146	Identifier	data		10891025	1					
ANR	10891147	AdditiveExpression	ofs + 4		10891025	1		+			
ANR	10891148	Identifier	ofs		10891025	0					
ANR	10891149	PrimaryExpression	4		10891025	1					
ANR	10891150	ExpressionStatement	desc = s16 ( font -> data + ofs + 6 )	664:4:18355:18387	10891025	13	True				
ANR	10891151	AssignmentExpression	desc = s16 ( font -> data + ofs + 6 )		10891025	0		=			
ANR	10891152	Identifier	desc		10891025	0					
ANR	10891153	CallExpression	s16 ( font -> data + ofs + 6 )		10891025	1					
ANR	10891154	Callee	s16		10891025	0					
ANR	10891155	Identifier	s16		10891025	0					
ANR	10891156	ArgumentList	font -> data + ofs + 6		10891025	1					
ANR	10891157	Argument	font -> data + ofs + 6		10891025	0					
ANR	10891158	AdditiveExpression	font -> data + ofs + 6		10891025	0		+			
ANR	10891159	PtrMemberAccess	font -> data		10891025	0					
ANR	10891160	Identifier	font		10891025	0					
ANR	10891161	Identifier	data		10891025	1					
ANR	10891162	AdditiveExpression	ofs + 6		10891025	1		+			
ANR	10891163	Identifier	ofs		10891025	0					
ANR	10891164	PrimaryExpression	6		10891025	1					
ANR	10891165	IfStatement	if ( desc < 0 )		10891025	14					
ANR	10891166	Condition	desc < 0	665:8:18413:18420	10891025	0	True				
ANR	10891167	RelationalExpression	desc < 0		10891025	0		<			
ANR	10891168	Identifier	desc		10891025	0					
ANR	10891169	PrimaryExpression	0		10891025	1					
ANR	10891170	ExpressionStatement	desc = - desc	666:8:18431:18443	10891025	1	True				
ANR	10891171	AssignmentExpression	desc = - desc		10891025	0		=			
ANR	10891172	Identifier	desc		10891025	0					
ANR	10891173	UnaryOperationExpression	- desc		10891025	1					
ANR	10891174	UnaryOperator	-		10891025	0					
ANR	10891175	Identifier	desc		10891025	1					
ANR	10891176	ExpressionStatement	n = u16 ( font -> data + ofs + 17 * 2 )	667:4:18449:18483	10891025	15	True				
ANR	10891177	AssignmentExpression	n = u16 ( font -> data + ofs + 17 * 2 )		10891025	0		=			
ANR	10891178	Identifier	n		10891025	0					
ANR	10891179	CallExpression	u16 ( font -> data + ofs + 17 * 2 )		10891025	1					
ANR	10891180	Callee	u16		10891025	0					
ANR	10891181	Identifier	u16		10891025	0					
ANR	10891182	ArgumentList	font -> data + ofs + 17 * 2		10891025	1					
ANR	10891183	Argument	font -> data + ofs + 17 * 2		10891025	0					
ANR	10891184	AdditiveExpression	font -> data + ofs + 17 * 2		10891025	0		+			
ANR	10891185	PtrMemberAccess	font -> data		10891025	0					
ANR	10891186	Identifier	font		10891025	0					
ANR	10891187	Identifier	data		10891025	1					
ANR	10891188	AdditiveExpression	ofs + 17 * 2		10891025	1		+			
ANR	10891189	Identifier	ofs		10891025	0					
ANR	10891190	MultiplicativeExpression	17 * 2		10891025	1		*			
ANR	10891191	PrimaryExpression	17		10891025	0					
ANR	10891192	PrimaryExpression	2		10891025	1					
ANR	10891193	ExpressionStatement	"ofs = xps_find_sfnt_table ( font , ""hmtx"" , & len )"	669:4:18490:18535	10891025	16	True				
ANR	10891194	AssignmentExpression	"ofs = xps_find_sfnt_table ( font , ""hmtx"" , & len )"		10891025	0		=			
ANR	10891195	Identifier	ofs		10891025	0					
ANR	10891196	CallExpression	"xps_find_sfnt_table ( font , ""hmtx"" , & len )"		10891025	1					
ANR	10891197	Callee	xps_find_sfnt_table		10891025	0					
ANR	10891198	Identifier	xps_find_sfnt_table		10891025	0					
ANR	10891199	ArgumentList	font		10891025	1					
ANR	10891200	Argument	font		10891025	0					
ANR	10891201	Identifier	font		10891025	0					
ANR	10891202	Argument	"""hmtx"""		10891025	1					
ANR	10891203	PrimaryExpression	"""hmtx"""		10891025	0					
ANR	10891204	Argument	& len		10891025	2					
ANR	10891205	UnaryOperationExpression	& len		10891025	0					
ANR	10891206	UnaryOperator	&		10891025	0					
ANR	10891207	Identifier	len		10891025	1					
ANR	10891208	IfStatement	if ( ofs < 0 )		10891025	17					
ANR	10891209	Condition	ofs < 0	670:8:18545:18551	10891025	0	True				
ANR	10891210	RelationalExpression	ofs < 0		10891025	0		<			
ANR	10891211	Identifier	ofs		10891025	0					
ANR	10891212	PrimaryExpression	0		10891025	1					
ANR	10891213	CompoundStatement		36:4:747:747	10891025	1					
ANR	10891214	ExpressionStatement	"gs_warn ( ""cannot find hmtx table"" )"	672:8:18568:18601	10891025	0	True				
ANR	10891215	CallExpression	"gs_warn ( ""cannot find hmtx table"" )"		10891025	0					
ANR	10891216	Callee	gs_warn		10891025	0					
ANR	10891217	Identifier	gs_warn		10891025	0					
ANR	10891218	ArgumentList	"""cannot find hmtx table"""		10891025	1					
ANR	10891219	Argument	"""cannot find hmtx table"""		10891025	0					
ANR	10891220	PrimaryExpression	"""cannot find hmtx table"""		10891025	0					
ANR	10891221	ReturnStatement	return ;	673:8:18611:18617	10891025	1	True				
ANR	10891222	ExpressionStatement	idx = gid	676:4:18630:18639	10891025	18	True				
ANR	10891223	AssignmentExpression	idx = gid		10891025	0		=			
ANR	10891224	Identifier	idx		10891025	0					
ANR	10891225	Identifier	gid		10891025	1					
ANR	10891226	IfStatement	if ( idx > n - 1 )		10891025	19					
ANR	10891227	Condition	idx > n - 1	677:8:18649:18659	10891025	0	True				
ANR	10891228	RelationalExpression	idx > n - 1		10891025	0		>			
ANR	10891229	Identifier	idx		10891025	0					
ANR	10891230	AdditiveExpression	n - 1		10891025	1		-			
ANR	10891231	Identifier	n		10891025	0					
ANR	10891232	PrimaryExpression	1		10891025	1					
ANR	10891233	ExpressionStatement	idx = n - 1	678:8:18670:18681	10891025	1	True				
ANR	10891234	AssignmentExpression	idx = n - 1		10891025	0		=			
ANR	10891235	Identifier	idx		10891025	0					
ANR	10891236	AdditiveExpression	n - 1		10891025	1		-			
ANR	10891237	Identifier	n		10891025	0					
ANR	10891238	PrimaryExpression	1		10891025	1					
ANR	10891239	ExpressionStatement	hadv = u16 ( font -> data + ofs + idx * 4 )	680:4:18688:18726	10891025	20	True				
ANR	10891240	AssignmentExpression	hadv = u16 ( font -> data + ofs + idx * 4 )		10891025	0		=			
ANR	10891241	Identifier	hadv		10891025	0					
ANR	10891242	CallExpression	u16 ( font -> data + ofs + idx * 4 )		10891025	1					
ANR	10891243	Callee	u16		10891025	0					
ANR	10891244	Identifier	u16		10891025	0					
ANR	10891245	ArgumentList	font -> data + ofs + idx * 4		10891025	1					
ANR	10891246	Argument	font -> data + ofs + idx * 4		10891025	0					
ANR	10891247	AdditiveExpression	font -> data + ofs + idx * 4		10891025	0		+			
ANR	10891248	PtrMemberAccess	font -> data		10891025	0					
ANR	10891249	Identifier	font		10891025	0					
ANR	10891250	Identifier	data		10891025	1					
ANR	10891251	AdditiveExpression	ofs + idx * 4		10891025	1		+			
ANR	10891252	Identifier	ofs		10891025	0					
ANR	10891253	MultiplicativeExpression	idx * 4		10891025	1		*			
ANR	10891254	Identifier	idx		10891025	0					
ANR	10891255	PrimaryExpression	4		10891025	1					
ANR	10891256	ExpressionStatement	vadv = 0	681:4:18732:18740	10891025	21	True				
ANR	10891257	AssignmentExpression	vadv = 0		10891025	0		=			
ANR	10891258	Identifier	vadv		10891025	0					
ANR	10891259	PrimaryExpression	0		10891025	1					
ANR	10891260	ExpressionStatement	"head = xps_find_sfnt_table ( font , ""head"" , & len )"	687:4:18820:18866	10891025	22	True				
ANR	10891261	AssignmentExpression	"head = xps_find_sfnt_table ( font , ""head"" , & len )"		10891025	0		=			
ANR	10891262	Identifier	head		10891025	0					
ANR	10891263	CallExpression	"xps_find_sfnt_table ( font , ""head"" , & len )"		10891025	1					
ANR	10891264	Callee	xps_find_sfnt_table		10891025	0					
ANR	10891265	Identifier	xps_find_sfnt_table		10891025	0					
ANR	10891266	ArgumentList	font		10891025	1					
ANR	10891267	Argument	font		10891025	0					
ANR	10891268	Identifier	font		10891025	0					
ANR	10891269	Argument	"""head"""		10891025	1					
ANR	10891270	PrimaryExpression	"""head"""		10891025	0					
ANR	10891271	Argument	& len		10891025	2					
ANR	10891272	UnaryOperationExpression	& len		10891025	0					
ANR	10891273	UnaryOperator	&		10891025	0					
ANR	10891274	Identifier	len		10891025	1					
ANR	10891275	IfStatement	if ( head > 0 )		10891025	23					
ANR	10891276	Condition	head > 0	688:8:18876:18883	10891025	0	True				
ANR	10891277	RelationalExpression	head > 0		10891025	0		>			
ANR	10891278	Identifier	head		10891025	0					
ANR	10891279	PrimaryExpression	0		10891025	1					
ANR	10891280	CompoundStatement		54:4:1079:1079	10891025	1					
ANR	10891281	ExpressionStatement	scale = u16 ( font -> data + head + 18 )	690:8:18900:18935	10891025	0	True				
ANR	10891282	AssignmentExpression	scale = u16 ( font -> data + head + 18 )		10891025	0		=			
ANR	10891283	Identifier	scale		10891025	0					
ANR	10891284	CallExpression	u16 ( font -> data + head + 18 )		10891025	1					
ANR	10891285	Callee	u16		10891025	0					
ANR	10891286	Identifier	u16		10891025	0					
ANR	10891287	ArgumentList	font -> data + head + 18		10891025	1					
ANR	10891288	Argument	font -> data + head + 18		10891025	0					
ANR	10891289	AdditiveExpression	font -> data + head + 18		10891025	0		+			
ANR	10891290	PtrMemberAccess	font -> data		10891025	0					
ANR	10891291	Identifier	font		10891025	0					
ANR	10891292	Identifier	data		10891025	1					
ANR	10891293	AdditiveExpression	head + 18		10891025	1		+			
ANR	10891294	Identifier	head		10891025	0					
ANR	10891295	PrimaryExpression	18		10891025	1					
ANR	10891296	ExpressionStatement	"ofs = xps_find_sfnt_table ( font , ""OS/2"" , & len )"	693:4:18967:19012	10891025	24	True				
ANR	10891297	AssignmentExpression	"ofs = xps_find_sfnt_table ( font , ""OS/2"" , & len )"		10891025	0		=			
ANR	10891298	Identifier	ofs		10891025	0					
ANR	10891299	CallExpression	"xps_find_sfnt_table ( font , ""OS/2"" , & len )"		10891025	1					
ANR	10891300	Callee	xps_find_sfnt_table		10891025	0					
ANR	10891301	Identifier	xps_find_sfnt_table		10891025	0					
ANR	10891302	ArgumentList	font		10891025	1					
ANR	10891303	Argument	font		10891025	0					
ANR	10891304	Identifier	font		10891025	0					
ANR	10891305	Argument	"""OS/2"""		10891025	1					
ANR	10891306	PrimaryExpression	"""OS/2"""		10891025	0					
ANR	10891307	Argument	& len		10891025	2					
ANR	10891308	UnaryOperationExpression	& len		10891025	0					
ANR	10891309	UnaryOperator	&		10891025	0					
ANR	10891310	Identifier	len		10891025	1					
ANR	10891311	IfStatement	if ( ofs > 0 && len > 70 )		10891025	25					
ANR	10891312	Condition	ofs > 0 && len > 70	694:8:19022:19040	10891025	0	True				
ANR	10891313	AndExpression	ofs > 0 && len > 70		10891025	0		&&			
ANR	10891314	RelationalExpression	ofs > 0		10891025	0		>			
ANR	10891315	Identifier	ofs		10891025	0					
ANR	10891316	PrimaryExpression	0		10891025	1					
ANR	10891317	RelationalExpression	len > 70		10891025	1		>			
ANR	10891318	Identifier	len		10891025	0					
ANR	10891319	PrimaryExpression	70		10891025	1					
ANR	10891320	CompoundStatement		60:4:1236:1236	10891025	1					
ANR	10891321	ExpressionStatement	vorg = s16 ( font -> data + ofs + 68 )	696:8:19057:19090	10891025	0	True				
ANR	10891322	AssignmentExpression	vorg = s16 ( font -> data + ofs + 68 )		10891025	0		=			
ANR	10891323	Identifier	vorg		10891025	0					
ANR	10891324	CallExpression	s16 ( font -> data + ofs + 68 )		10891025	1					
ANR	10891325	Callee	s16		10891025	0					
ANR	10891326	Identifier	s16		10891025	0					
ANR	10891327	ArgumentList	font -> data + ofs + 68		10891025	1					
ANR	10891328	Argument	font -> data + ofs + 68		10891025	0					
ANR	10891329	AdditiveExpression	font -> data + ofs + 68		10891025	0		+			
ANR	10891330	PtrMemberAccess	font -> data		10891025	0					
ANR	10891331	Identifier	font		10891025	0					
ANR	10891332	Identifier	data		10891025	1					
ANR	10891333	AdditiveExpression	ofs + 68		10891025	1		+			
ANR	10891334	Identifier	ofs		10891025	0					
ANR	10891335	PrimaryExpression	68		10891025	1					
ANR	10891336	ExpressionStatement	desc = s16 ( font -> data + ofs + 70 )	697:8:19120:19153	10891025	1	True				
ANR	10891337	AssignmentExpression	desc = s16 ( font -> data + ofs + 70 )		10891025	0		=			
ANR	10891338	Identifier	desc		10891025	0					
ANR	10891339	CallExpression	s16 ( font -> data + ofs + 70 )		10891025	1					
ANR	10891340	Callee	s16		10891025	0					
ANR	10891341	Identifier	s16		10891025	0					
ANR	10891342	ArgumentList	font -> data + ofs + 70		10891025	1					
ANR	10891343	Argument	font -> data + ofs + 70		10891025	0					
ANR	10891344	AdditiveExpression	font -> data + ofs + 70		10891025	0		+			
ANR	10891345	PtrMemberAccess	font -> data		10891025	0					
ANR	10891346	Identifier	font		10891025	0					
ANR	10891347	Identifier	data		10891025	1					
ANR	10891348	AdditiveExpression	ofs + 70		10891025	1		+			
ANR	10891349	Identifier	ofs		10891025	0					
ANR	10891350	PrimaryExpression	70		10891025	1					
ANR	10891351	IfStatement	if ( desc < 0 )		10891025	2					
ANR	10891352	Condition	desc < 0	698:12:19188:19195	10891025	0	True				
ANR	10891353	RelationalExpression	desc < 0		10891025	0		<			
ANR	10891354	Identifier	desc		10891025	0					
ANR	10891355	PrimaryExpression	0		10891025	1					
ANR	10891356	ExpressionStatement	desc = - desc	699:12:19210:19222	10891025	1	True				
ANR	10891357	AssignmentExpression	desc = - desc		10891025	0		=			
ANR	10891358	Identifier	desc		10891025	0					
ANR	10891359	UnaryOperationExpression	- desc		10891025	1					
ANR	10891360	UnaryOperator	-		10891025	0					
ANR	10891361	Identifier	desc		10891025	1					
ANR	10891362	ExpressionStatement	"ofs = xps_find_sfnt_table ( font , ""vhea"" , & len )"	702:4:19235:19280	10891025	26	True				
ANR	10891363	AssignmentExpression	"ofs = xps_find_sfnt_table ( font , ""vhea"" , & len )"		10891025	0		=			
ANR	10891364	Identifier	ofs		10891025	0					
ANR	10891365	CallExpression	"xps_find_sfnt_table ( font , ""vhea"" , & len )"		10891025	1					
ANR	10891366	Callee	xps_find_sfnt_table		10891025	0					
ANR	10891367	Identifier	xps_find_sfnt_table		10891025	0					
ANR	10891368	ArgumentList	font		10891025	1					
ANR	10891369	Argument	font		10891025	0					
ANR	10891370	Identifier	font		10891025	0					
ANR	10891371	Argument	"""vhea"""		10891025	1					
ANR	10891372	PrimaryExpression	"""vhea"""		10891025	0					
ANR	10891373	Argument	& len		10891025	2					
ANR	10891374	UnaryOperationExpression	& len		10891025	0					
ANR	10891375	UnaryOperator	&		10891025	0					
ANR	10891376	Identifier	len		10891025	1					
ANR	10891377	IfStatement	if ( ofs > 0 && len >= 2 * 18 )		10891025	27					
ANR	10891378	Condition	ofs > 0 && len >= 2 * 18	703:8:19290:19313	10891025	0	True				
ANR	10891379	AndExpression	ofs > 0 && len >= 2 * 18		10891025	0		&&			
ANR	10891380	RelationalExpression	ofs > 0		10891025	0		>			
ANR	10891381	Identifier	ofs		10891025	0					
ANR	10891382	PrimaryExpression	0		10891025	1					
ANR	10891383	RelationalExpression	len >= 2 * 18		10891025	1		>=			
ANR	10891384	Identifier	len		10891025	0					
ANR	10891385	MultiplicativeExpression	2 * 18		10891025	1		*			
ANR	10891386	PrimaryExpression	2		10891025	0					
ANR	10891387	PrimaryExpression	18		10891025	1					
ANR	10891388	CompoundStatement		69:4:1509:1509	10891025	1					
ANR	10891389	ExpressionStatement	n = u16 ( font -> data + ofs + 17 * 2 )	705:8:19330:19364	10891025	0	True				
ANR	10891390	AssignmentExpression	n = u16 ( font -> data + ofs + 17 * 2 )		10891025	0		=			
ANR	10891391	Identifier	n		10891025	0					
ANR	10891392	CallExpression	u16 ( font -> data + ofs + 17 * 2 )		10891025	1					
ANR	10891393	Callee	u16		10891025	0					
ANR	10891394	Identifier	u16		10891025	0					
ANR	10891395	ArgumentList	font -> data + ofs + 17 * 2		10891025	1					
ANR	10891396	Argument	font -> data + ofs + 17 * 2		10891025	0					
ANR	10891397	AdditiveExpression	font -> data + ofs + 17 * 2		10891025	0		+			
ANR	10891398	PtrMemberAccess	font -> data		10891025	0					
ANR	10891399	Identifier	font		10891025	0					
ANR	10891400	Identifier	data		10891025	1					
ANR	10891401	AdditiveExpression	ofs + 17 * 2		10891025	1		+			
ANR	10891402	Identifier	ofs		10891025	0					
ANR	10891403	MultiplicativeExpression	17 * 2		10891025	1		*			
ANR	10891404	PrimaryExpression	17		10891025	0					
ANR	10891405	PrimaryExpression	2		10891025	1					
ANR	10891406	ExpressionStatement	"ofs = xps_find_sfnt_table ( font , ""vmtx"" , & len )"	707:8:19375:19420	10891025	1	True				
ANR	10891407	AssignmentExpression	"ofs = xps_find_sfnt_table ( font , ""vmtx"" , & len )"		10891025	0		=			
ANR	10891408	Identifier	ofs		10891025	0					
ANR	10891409	CallExpression	"xps_find_sfnt_table ( font , ""vmtx"" , & len )"		10891025	1					
ANR	10891410	Callee	xps_find_sfnt_table		10891025	0					
ANR	10891411	Identifier	xps_find_sfnt_table		10891025	0					
ANR	10891412	ArgumentList	font		10891025	1					
ANR	10891413	Argument	font		10891025	0					
ANR	10891414	Identifier	font		10891025	0					
ANR	10891415	Argument	"""vmtx"""		10891025	1					
ANR	10891416	PrimaryExpression	"""vmtx"""		10891025	0					
ANR	10891417	Argument	& len		10891025	2					
ANR	10891418	UnaryOperationExpression	& len		10891025	0					
ANR	10891419	UnaryOperator	&		10891025	0					
ANR	10891420	Identifier	len		10891025	1					
ANR	10891421	IfStatement	if ( ofs < 0 )		10891025	2					
ANR	10891422	Condition	ofs < 0	708:12:19434:19440	10891025	0	True				
ANR	10891423	RelationalExpression	ofs < 0		10891025	0		<			
ANR	10891424	Identifier	ofs		10891025	0					
ANR	10891425	PrimaryExpression	0		10891025	1					
ANR	10891426	CompoundStatement		74:8:1640:1640	10891025	1					
ANR	10891427	ExpressionStatement	"gs_warn ( ""cannot find vmtx table"" )"	710:12:19465:19498	10891025	0	True				
ANR	10891428	CallExpression	"gs_warn ( ""cannot find vmtx table"" )"		10891025	0					
ANR	10891429	Callee	gs_warn		10891025	0					
ANR	10891430	Identifier	gs_warn		10891025	0					
ANR	10891431	ArgumentList	"""cannot find vmtx table"""		10891025	1					
ANR	10891432	Argument	"""cannot find vmtx table"""		10891025	0					
ANR	10891433	PrimaryExpression	"""cannot find vmtx table"""		10891025	0					
ANR	10891434	ReturnStatement	return ;	711:12:19512:19518	10891025	1	True				
ANR	10891435	ExpressionStatement	idx = gid	714:8:19539:19548	10891025	3	True				
ANR	10891436	AssignmentExpression	idx = gid		10891025	0		=			
ANR	10891437	Identifier	idx		10891025	0					
ANR	10891438	Identifier	gid		10891025	1					
ANR	10891439	IfStatement	if ( idx > n - 1 )		10891025	4					
ANR	10891440	Condition	idx > n - 1	715:12:19562:19572	10891025	0	True				
ANR	10891441	RelationalExpression	idx > n - 1		10891025	0		>			
ANR	10891442	Identifier	idx		10891025	0					
ANR	10891443	AdditiveExpression	n - 1		10891025	1		-			
ANR	10891444	Identifier	n		10891025	0					
ANR	10891445	PrimaryExpression	1		10891025	1					
ANR	10891446	ExpressionStatement	idx = n - 1	716:12:19587:19598	10891025	1	True				
ANR	10891447	AssignmentExpression	idx = n - 1		10891025	0		=			
ANR	10891448	Identifier	idx		10891025	0					
ANR	10891449	AdditiveExpression	n - 1		10891025	1		-			
ANR	10891450	Identifier	n		10891025	0					
ANR	10891451	PrimaryExpression	1		10891025	1					
ANR	10891452	ExpressionStatement	vadv = u16 ( font -> data + ofs + idx * 4 )	718:8:19609:19647	10891025	5	True				
ANR	10891453	AssignmentExpression	vadv = u16 ( font -> data + ofs + idx * 4 )		10891025	0		=			
ANR	10891454	Identifier	vadv		10891025	0					
ANR	10891455	CallExpression	u16 ( font -> data + ofs + idx * 4 )		10891025	1					
ANR	10891456	Callee	u16		10891025	0					
ANR	10891457	Identifier	u16		10891025	0					
ANR	10891458	ArgumentList	font -> data + ofs + idx * 4		10891025	1					
ANR	10891459	Argument	font -> data + ofs + idx * 4		10891025	0					
ANR	10891460	AdditiveExpression	font -> data + ofs + idx * 4		10891025	0		+			
ANR	10891461	PtrMemberAccess	font -> data		10891025	0					
ANR	10891462	Identifier	font		10891025	0					
ANR	10891463	Identifier	data		10891025	1					
ANR	10891464	AdditiveExpression	ofs + idx * 4		10891025	1		+			
ANR	10891465	Identifier	ofs		10891025	0					
ANR	10891466	MultiplicativeExpression	idx * 4		10891025	1		*			
ANR	10891467	Identifier	idx		10891025	0					
ANR	10891468	PrimaryExpression	4		10891025	1					
ANR	10891469	ExpressionStatement	vtop = u16 ( font -> data + ofs + idx * 4 + 2 )	719:8:19657:19699	10891025	6	True				
ANR	10891470	AssignmentExpression	vtop = u16 ( font -> data + ofs + idx * 4 + 2 )		10891025	0		=			
ANR	10891471	Identifier	vtop		10891025	0					
ANR	10891472	CallExpression	u16 ( font -> data + ofs + idx * 4 + 2 )		10891025	1					
ANR	10891473	Callee	u16		10891025	0					
ANR	10891474	Identifier	u16		10891025	0					
ANR	10891475	ArgumentList	font -> data + ofs + idx * 4 + 2		10891025	1					
ANR	10891476	Argument	font -> data + ofs + idx * 4 + 2		10891025	0					
ANR	10891477	AdditiveExpression	font -> data + ofs + idx * 4 + 2		10891025	0		+			
ANR	10891478	PtrMemberAccess	font -> data		10891025	0					
ANR	10891479	Identifier	font		10891025	0					
ANR	10891480	Identifier	data		10891025	1					
ANR	10891481	AdditiveExpression	ofs + idx * 4 + 2		10891025	1		+			
ANR	10891482	Identifier	ofs		10891025	0					
ANR	10891483	AdditiveExpression	idx * 4 + 2		10891025	1		+			
ANR	10891484	MultiplicativeExpression	idx * 4		10891025	0		*			
ANR	10891485	Identifier	idx		10891025	0					
ANR	10891486	PrimaryExpression	4		10891025	1					
ANR	10891487	PrimaryExpression	2		10891025	1					
ANR	10891488	ExpressionStatement	"glyf = xps_find_sfnt_table ( font , ""glyf"" , & len )"	721:8:19710:19756	10891025	7	True				
ANR	10891489	AssignmentExpression	"glyf = xps_find_sfnt_table ( font , ""glyf"" , & len )"		10891025	0		=			
ANR	10891490	Identifier	glyf		10891025	0					
ANR	10891491	CallExpression	"xps_find_sfnt_table ( font , ""glyf"" , & len )"		10891025	1					
ANR	10891492	Callee	xps_find_sfnt_table		10891025	0					
ANR	10891493	Identifier	xps_find_sfnt_table		10891025	0					
ANR	10891494	ArgumentList	font		10891025	1					
ANR	10891495	Argument	font		10891025	0					
ANR	10891496	Identifier	font		10891025	0					
ANR	10891497	Argument	"""glyf"""		10891025	1					
ANR	10891498	PrimaryExpression	"""glyf"""		10891025	0					
ANR	10891499	Argument	& len		10891025	2					
ANR	10891500	UnaryOperationExpression	& len		10891025	0					
ANR	10891501	UnaryOperator	&		10891025	0					
ANR	10891502	Identifier	len		10891025	1					
ANR	10891503	ExpressionStatement	"loca = xps_find_sfnt_table ( font , ""loca"" , & len )"	722:8:19766:19812	10891025	8	True				
ANR	10891504	AssignmentExpression	"loca = xps_find_sfnt_table ( font , ""loca"" , & len )"		10891025	0		=			
ANR	10891505	Identifier	loca		10891025	0					
ANR	10891506	CallExpression	"xps_find_sfnt_table ( font , ""loca"" , & len )"		10891025	1					
ANR	10891507	Callee	xps_find_sfnt_table		10891025	0					
ANR	10891508	Identifier	xps_find_sfnt_table		10891025	0					
ANR	10891509	ArgumentList	font		10891025	1					
ANR	10891510	Argument	font		10891025	0					
ANR	10891511	Identifier	font		10891025	0					
ANR	10891512	Argument	"""loca"""		10891025	1					
ANR	10891513	PrimaryExpression	"""loca"""		10891025	0					
ANR	10891514	Argument	& len		10891025	2					
ANR	10891515	UnaryOperationExpression	& len		10891025	0					
ANR	10891516	UnaryOperator	&		10891025	0					
ANR	10891517	Identifier	len		10891025	1					
ANR	10891518	IfStatement	if ( head > 0 && glyf > 0 && loca > 0 )		10891025	9					
ANR	10891519	Condition	head > 0 && glyf > 0 && loca > 0	723:12:19826:19857	10891025	0	True				
ANR	10891520	AndExpression	head > 0 && glyf > 0 && loca > 0		10891025	0		&&			
ANR	10891521	RelationalExpression	head > 0		10891025	0		>			
ANR	10891522	Identifier	head		10891025	0					
ANR	10891523	PrimaryExpression	0		10891025	1					
ANR	10891524	AndExpression	glyf > 0 && loca > 0		10891025	1		&&			
ANR	10891525	RelationalExpression	glyf > 0		10891025	0		>			
ANR	10891526	Identifier	glyf		10891025	0					
ANR	10891527	PrimaryExpression	0		10891025	1					
ANR	10891528	RelationalExpression	loca > 0		10891025	1		>			
ANR	10891529	Identifier	loca		10891025	0					
ANR	10891530	PrimaryExpression	0		10891025	1					
ANR	10891531	CompoundStatement		89:8:2057:2057	10891025	1					
ANR	10891532	ExpressionStatement	format = u16 ( font -> data + head + 50 )	725:12:19882:19918	10891025	0	True				
ANR	10891533	AssignmentExpression	format = u16 ( font -> data + head + 50 )		10891025	0		=			
ANR	10891534	Identifier	format		10891025	0					
ANR	10891535	CallExpression	u16 ( font -> data + head + 50 )		10891025	1					
ANR	10891536	Callee	u16		10891025	0					
ANR	10891537	Identifier	u16		10891025	0					
ANR	10891538	ArgumentList	font -> data + head + 50		10891025	1					
ANR	10891539	Argument	font -> data + head + 50		10891025	0					
ANR	10891540	AdditiveExpression	font -> data + head + 50		10891025	0		+			
ANR	10891541	PtrMemberAccess	font -> data		10891025	0					
ANR	10891542	Identifier	font		10891025	0					
ANR	10891543	Identifier	data		10891025	1					
ANR	10891544	AdditiveExpression	head + 50		10891025	1		+			
ANR	10891545	Identifier	head		10891025	0					
ANR	10891546	PrimaryExpression	50		10891025	1					
ANR	10891547	IfStatement	if ( format == 0 )		10891025	1					
ANR	10891548	Condition	format == 0	727:16:19961:19971	10891025	0	True				
ANR	10891549	EqualityExpression	format == 0		10891025	0		==			
ANR	10891550	Identifier	format		10891025	0					
ANR	10891551	PrimaryExpression	0		10891025	1					
ANR	10891552	ExpressionStatement	ofs = u16 ( font -> data + loca + gid * 2 ) * 2	728:16:19990:20032	10891025	1	True				
ANR	10891553	AssignmentExpression	ofs = u16 ( font -> data + loca + gid * 2 ) * 2		10891025	0		=			
ANR	10891554	Identifier	ofs		10891025	0					
ANR	10891555	MultiplicativeExpression	u16 ( font -> data + loca + gid * 2 ) * 2		10891025	1		*			
ANR	10891556	CallExpression	u16 ( font -> data + loca + gid * 2 )		10891025	0					
ANR	10891557	Callee	u16		10891025	0					
ANR	10891558	Identifier	u16		10891025	0					
ANR	10891559	ArgumentList	font -> data + loca + gid * 2		10891025	1					
ANR	10891560	Argument	font -> data + loca + gid * 2		10891025	0					
ANR	10891561	AdditiveExpression	font -> data + loca + gid * 2		10891025	0		+			
ANR	10891562	PtrMemberAccess	font -> data		10891025	0					
ANR	10891563	Identifier	font		10891025	0					
ANR	10891564	Identifier	data		10891025	1					
ANR	10891565	AdditiveExpression	loca + gid * 2		10891025	1		+			
ANR	10891566	Identifier	loca		10891025	0					
ANR	10891567	MultiplicativeExpression	gid * 2		10891025	1		*			
ANR	10891568	Identifier	gid		10891025	0					
ANR	10891569	PrimaryExpression	2		10891025	1					
ANR	10891570	PrimaryExpression	2		10891025	1					
ANR	10891571	ElseStatement	else		10891025	0					
ANR	10891572	ExpressionStatement	ofs = u32 ( font -> data + loca + gid * 4 )	730:16:20067:20105	10891025	0	True				
ANR	10891573	AssignmentExpression	ofs = u32 ( font -> data + loca + gid * 4 )		10891025	0		=			
ANR	10891574	Identifier	ofs		10891025	0					
ANR	10891575	CallExpression	u32 ( font -> data + loca + gid * 4 )		10891025	1					
ANR	10891576	Callee	u32		10891025	0					
ANR	10891577	Identifier	u32		10891025	0					
ANR	10891578	ArgumentList	font -> data + loca + gid * 4		10891025	1					
ANR	10891579	Argument	font -> data + loca + gid * 4		10891025	0					
ANR	10891580	AdditiveExpression	font -> data + loca + gid * 4		10891025	0		+			
ANR	10891581	PtrMemberAccess	font -> data		10891025	0					
ANR	10891582	Identifier	font		10891025	0					
ANR	10891583	Identifier	data		10891025	1					
ANR	10891584	AdditiveExpression	loca + gid * 4		10891025	1		+			
ANR	10891585	Identifier	loca		10891025	0					
ANR	10891586	MultiplicativeExpression	gid * 4		10891025	1		*			
ANR	10891587	Identifier	gid		10891025	0					
ANR	10891588	PrimaryExpression	4		10891025	1					
ANR	10891589	ExpressionStatement	ymax = u16 ( font -> data + glyf + ofs + 8 )	732:12:20120:20159	10891025	2	True				
ANR	10891590	AssignmentExpression	ymax = u16 ( font -> data + glyf + ofs + 8 )		10891025	0		=			
ANR	10891591	Identifier	ymax		10891025	0					
ANR	10891592	CallExpression	u16 ( font -> data + glyf + ofs + 8 )		10891025	1					
ANR	10891593	Callee	u16		10891025	0					
ANR	10891594	Identifier	u16		10891025	0					
ANR	10891595	ArgumentList	font -> data + glyf + ofs + 8		10891025	1					
ANR	10891596	Argument	font -> data + glyf + ofs + 8		10891025	0					
ANR	10891597	AdditiveExpression	font -> data + glyf + ofs + 8		10891025	0		+			
ANR	10891598	PtrMemberAccess	font -> data		10891025	0					
ANR	10891599	Identifier	font		10891025	0					
ANR	10891600	Identifier	data		10891025	1					
ANR	10891601	AdditiveExpression	glyf + ofs + 8		10891025	1		+			
ANR	10891602	Identifier	glyf		10891025	0					
ANR	10891603	AdditiveExpression	ofs + 8		10891025	1		+			
ANR	10891604	Identifier	ofs		10891025	0					
ANR	10891605	PrimaryExpression	8		10891025	1					
ANR	10891606	ExpressionStatement	vorg = ymax + vtop	734:12:20185:20203	10891025	3	True				
ANR	10891607	AssignmentExpression	vorg = ymax + vtop		10891025	0		=			
ANR	10891608	Identifier	vorg		10891025	0					
ANR	10891609	AdditiveExpression	ymax + vtop		10891025	1		+			
ANR	10891610	Identifier	ymax		10891025	0					
ANR	10891611	Identifier	vtop		10891025	1					
ANR	10891612	ExpressionStatement	"ofs = xps_find_sfnt_table ( font , ""VORG"" , & len )"	738:4:20226:20271	10891025	28	True				
ANR	10891613	AssignmentExpression	"ofs = xps_find_sfnt_table ( font , ""VORG"" , & len )"		10891025	0		=			
ANR	10891614	Identifier	ofs		10891025	0					
ANR	10891615	CallExpression	"xps_find_sfnt_table ( font , ""VORG"" , & len )"		10891025	1					
ANR	10891616	Callee	xps_find_sfnt_table		10891025	0					
ANR	10891617	Identifier	xps_find_sfnt_table		10891025	0					
ANR	10891618	ArgumentList	font		10891025	1					
ANR	10891619	Argument	font		10891025	0					
ANR	10891620	Identifier	font		10891025	0					
ANR	10891621	Argument	"""VORG"""		10891025	1					
ANR	10891622	PrimaryExpression	"""VORG"""		10891025	0					
ANR	10891623	Argument	& len		10891025	2					
ANR	10891624	UnaryOperationExpression	& len		10891025	0					
ANR	10891625	UnaryOperator	&		10891025	0					
ANR	10891626	Identifier	len		10891025	1					
ANR	10891627	IfStatement	if ( ofs > 0 )		10891025	29					
ANR	10891628	Condition	ofs > 0	739:8:20281:20287	10891025	0	True				
ANR	10891629	RelationalExpression	ofs > 0		10891025	0		>			
ANR	10891630	Identifier	ofs		10891025	0					
ANR	10891631	PrimaryExpression	0		10891025	1					
ANR	10891632	CompoundStatement		105:4:2483:2483	10891025	1					
ANR	10891633	ExpressionStatement	vorg = u16 ( font -> data + ofs + 6 )	741:8:20304:20336	10891025	0	True				
ANR	10891634	AssignmentExpression	vorg = u16 ( font -> data + ofs + 6 )		10891025	0		=			
ANR	10891635	Identifier	vorg		10891025	0					
ANR	10891636	CallExpression	u16 ( font -> data + ofs + 6 )		10891025	1					
ANR	10891637	Callee	u16		10891025	0					
ANR	10891638	Identifier	u16		10891025	0					
ANR	10891639	ArgumentList	font -> data + ofs + 6		10891025	1					
ANR	10891640	Argument	font -> data + ofs + 6		10891025	0					
ANR	10891641	AdditiveExpression	font -> data + ofs + 6		10891025	0		+			
ANR	10891642	PtrMemberAccess	font -> data		10891025	0					
ANR	10891643	Identifier	font		10891025	0					
ANR	10891644	Identifier	data		10891025	1					
ANR	10891645	AdditiveExpression	ofs + 6		10891025	1		+			
ANR	10891646	Identifier	ofs		10891025	0					
ANR	10891647	PrimaryExpression	6		10891025	1					
ANR	10891648	ExpressionStatement	n = u16 ( font -> data + ofs + 6 )	742:8:20346:20375	10891025	1	True				
ANR	10891649	AssignmentExpression	n = u16 ( font -> data + ofs + 6 )		10891025	0		=			
ANR	10891650	Identifier	n		10891025	0					
ANR	10891651	CallExpression	u16 ( font -> data + ofs + 6 )		10891025	1					
ANR	10891652	Callee	u16		10891025	0					
ANR	10891653	Identifier	u16		10891025	0					
ANR	10891654	ArgumentList	font -> data + ofs + 6		10891025	1					
ANR	10891655	Argument	font -> data + ofs + 6		10891025	0					
ANR	10891656	AdditiveExpression	font -> data + ofs + 6		10891025	0		+			
ANR	10891657	PtrMemberAccess	font -> data		10891025	0					
ANR	10891658	Identifier	font		10891025	0					
ANR	10891659	Identifier	data		10891025	1					
ANR	10891660	AdditiveExpression	ofs + 6		10891025	1		+			
ANR	10891661	Identifier	ofs		10891025	0					
ANR	10891662	PrimaryExpression	6		10891025	1					
ANR	10891663	ForStatement	for ( i = 0 ; i < n ; i ++ )		10891025	2					
ANR	10891664	ForInit	i = 0 ;	743:13:20390:20395	10891025	0	True				
ANR	10891665	AssignmentExpression	i = 0		10891025	0		=			
ANR	10891666	Identifier	i		10891025	0					
ANR	10891667	PrimaryExpression	0		10891025	1					
ANR	10891668	Condition	i < n	743:20:20397:20401	10891025	1	True				
ANR	10891669	RelationalExpression	i < n		10891025	0		<			
ANR	10891670	Identifier	i		10891025	0					
ANR	10891671	Identifier	n		10891025	1					
ANR	10891672	PostIncDecOperationExpression	i ++	743:27:20404:20406	10891025	2	True				
ANR	10891673	Identifier	i		10891025	0					
ANR	10891674	IncDec	++		10891025	1					
ANR	10891675	CompoundStatement		109:8:2606:2606	10891025	3					
ANR	10891676	IfStatement	if ( u16 ( font -> data + ofs + 8 + 4 * i ) == gid )		10891025	0					
ANR	10891677	Condition	u16 ( font -> data + ofs + 8 + 4 * i ) == gid	745:16:20435:20474	10891025	0	True				
ANR	10891678	EqualityExpression	u16 ( font -> data + ofs + 8 + 4 * i ) == gid		10891025	0		==			
ANR	10891679	CallExpression	u16 ( font -> data + ofs + 8 + 4 * i )		10891025	0					
ANR	10891680	Callee	u16		10891025	0					
ANR	10891681	Identifier	u16		10891025	0					
ANR	10891682	ArgumentList	font -> data + ofs + 8 + 4 * i		10891025	1					
ANR	10891683	Argument	font -> data + ofs + 8 + 4 * i		10891025	0					
ANR	10891684	AdditiveExpression	font -> data + ofs + 8 + 4 * i		10891025	0		+			
ANR	10891685	PtrMemberAccess	font -> data		10891025	0					
ANR	10891686	Identifier	font		10891025	0					
ANR	10891687	Identifier	data		10891025	1					
ANR	10891688	AdditiveExpression	ofs + 8 + 4 * i		10891025	1		+			
ANR	10891689	Identifier	ofs		10891025	0					
ANR	10891690	AdditiveExpression	8 + 4 * i		10891025	1		+			
ANR	10891691	PrimaryExpression	8		10891025	0					
ANR	10891692	MultiplicativeExpression	4 * i		10891025	1		*			
ANR	10891693	PrimaryExpression	4		10891025	0					
ANR	10891694	Identifier	i		10891025	1					
ANR	10891695	Identifier	gid		10891025	1					
ANR	10891696	CompoundStatement		111:12:2678:2678	10891025	1					
ANR	10891697	ExpressionStatement	vorg = s16 ( font -> data + ofs + 8 + 4 * i + 2 )	747:16:20507:20551	10891025	0	True				
ANR	10891698	AssignmentExpression	vorg = s16 ( font -> data + ofs + 8 + 4 * i + 2 )		10891025	0		=			
ANR	10891699	Identifier	vorg		10891025	0					
ANR	10891700	CallExpression	s16 ( font -> data + ofs + 8 + 4 * i + 2 )		10891025	1					
ANR	10891701	Callee	s16		10891025	0					
ANR	10891702	Identifier	s16		10891025	0					
ANR	10891703	ArgumentList	font -> data + ofs + 8 + 4 * i + 2		10891025	1					
ANR	10891704	Argument	font -> data + ofs + 8 + 4 * i + 2		10891025	0					
ANR	10891705	AdditiveExpression	font -> data + ofs + 8 + 4 * i + 2		10891025	0		+			
ANR	10891706	PtrMemberAccess	font -> data		10891025	0					
ANR	10891707	Identifier	font		10891025	0					
ANR	10891708	Identifier	data		10891025	1					
ANR	10891709	AdditiveExpression	ofs + 8 + 4 * i + 2		10891025	1		+			
ANR	10891710	Identifier	ofs		10891025	0					
ANR	10891711	AdditiveExpression	8 + 4 * i + 2		10891025	1		+			
ANR	10891712	PrimaryExpression	8		10891025	0					
ANR	10891713	AdditiveExpression	4 * i + 2		10891025	1		+			
ANR	10891714	MultiplicativeExpression	4 * i		10891025	0		*			
ANR	10891715	PrimaryExpression	4		10891025	0					
ANR	10891716	Identifier	i		10891025	1					
ANR	10891717	PrimaryExpression	2		10891025	1					
ANR	10891718	BreakStatement	break ;	748:16:20569:20574	10891025	1	True				
ANR	10891719	IfStatement	if ( vadv == 0 )		10891025	30					
ANR	10891720	Condition	vadv == 0	753:8:20615:20623	10891025	0	True				
ANR	10891721	EqualityExpression	vadv == 0		10891025	0		==			
ANR	10891722	Identifier	vadv		10891025	0					
ANR	10891723	PrimaryExpression	0		10891025	1					
ANR	10891724	ExpressionStatement	vadv = vorg + desc	754:8:20634:20652	10891025	1	True				
ANR	10891725	AssignmentExpression	vadv = vorg + desc		10891025	0		=			
ANR	10891726	Identifier	vadv		10891025	0					
ANR	10891727	AdditiveExpression	vorg + desc		10891025	1		+			
ANR	10891728	Identifier	vorg		10891025	0					
ANR	10891729	Identifier	desc		10891025	1					
ANR	10891730	ExpressionStatement	mtx -> hadv = hadv / ( float ) scale	756:4:20659:20691	10891025	31	True				
ANR	10891731	AssignmentExpression	mtx -> hadv = hadv / ( float ) scale		10891025	0		=			
ANR	10891732	PtrMemberAccess	mtx -> hadv		10891025	0					
ANR	10891733	Identifier	mtx		10891025	0					
ANR	10891734	Identifier	hadv		10891025	1					
ANR	10891735	MultiplicativeExpression	hadv / ( float ) scale		10891025	1		/			
ANR	10891736	Identifier	hadv		10891025	0					
ANR	10891737	CastExpression	( float ) scale		10891025	1					
ANR	10891738	CastTarget	float		10891025	0					
ANR	10891739	Identifier	scale		10891025	1					
ANR	10891740	ExpressionStatement	mtx -> vadv = vadv / ( float ) scale	757:4:20697:20729	10891025	32	True				
ANR	10891741	AssignmentExpression	mtx -> vadv = vadv / ( float ) scale		10891025	0		=			
ANR	10891742	PtrMemberAccess	mtx -> vadv		10891025	0					
ANR	10891743	Identifier	mtx		10891025	0					
ANR	10891744	Identifier	vadv		10891025	1					
ANR	10891745	MultiplicativeExpression	vadv / ( float ) scale		10891025	1		/			
ANR	10891746	Identifier	vadv		10891025	0					
ANR	10891747	CastExpression	( float ) scale		10891025	1					
ANR	10891748	CastTarget	float		10891025	0					
ANR	10891749	Identifier	scale		10891025	1					
ANR	10891750	ExpressionStatement	mtx -> vorg = vorg / ( float ) scale	758:4:20735:20767	10891025	33	True				
ANR	10891751	AssignmentExpression	mtx -> vorg = vorg / ( float ) scale		10891025	0		=			
ANR	10891752	PtrMemberAccess	mtx -> vorg		10891025	0					
ANR	10891753	Identifier	mtx		10891025	0					
ANR	10891754	Identifier	vorg		10891025	1					
ANR	10891755	MultiplicativeExpression	vorg / ( float ) scale		10891025	1		/			
ANR	10891756	Identifier	vorg		10891025	0					
ANR	10891757	CastExpression	( float ) scale		10891025	1					
ANR	10891758	CastTarget	float		10891025	0					
ANR	10891759	Identifier	scale		10891025	1					
ANR	10891760	ReturnType	void		10891025	1					
ANR	10891761	Identifier	xps_measure_font_glyph		10891025	2					
ANR	10891762	ParameterList	"xps_context_t * ctx , xps_font_t * font , int gid , xps_glyph_metrics_t * mtx"		10891025	3					
ANR	10891763	Parameter	xps_context_t * ctx	635:23:17737:17754	10891025	0	True				
ANR	10891764	ParameterType	xps_context_t *		10891025	0					
ANR	10891765	Identifier	ctx		10891025	1					
ANR	10891766	Parameter	xps_font_t * font	635:43:17757:17772	10891025	1	True				
ANR	10891767	ParameterType	xps_font_t *		10891025	0					
ANR	10891768	Identifier	font		10891025	1					
ANR	10891769	Parameter	int gid	635:61:17775:17781	10891025	2	True				
ANR	10891770	ParameterType	int		10891025	0					
ANR	10891771	Identifier	gid		10891025	1					
ANR	10891772	Parameter	xps_glyph_metrics_t * mtx	635:70:17784:17807	10891025	3	True				
ANR	10891773	ParameterType	xps_glyph_metrics_t *		10891025	0					
ANR	10891774	Identifier	mtx		10891025	1					
ANR	10891775	CFGEntryNode	ENTRY		10891025		True				
ANR	10891776	CFGExitNode	EXIT		10891025		True				
ANR	10891777	Symbol	glyf		10891025						
ANR	10891778	Symbol	mtx -> vadv		10891025						
ANR	10891779	Symbol	gid		10891025						
ANR	10891780	Symbol	scale		10891025						
ANR	10891781	Symbol	vadv		10891025						
ANR	10891782	Symbol	head		10891025						
ANR	10891783	Symbol	loca		10891025						
ANR	10891784	Symbol	len		10891025						
ANR	10891785	Symbol	u32		10891025						
ANR	10891786	Symbol	vorg		10891025						
ANR	10891787	Symbol	s16		10891025						
ANR	10891788	Symbol	* font		10891025						
ANR	10891789	Symbol	u16		10891025						
ANR	10891790	Symbol	* mtx		10891025						
ANR	10891791	Symbol	ctx		10891025						
ANR	10891792	Symbol	format		10891025						
ANR	10891793	Symbol	vtop		10891025						
ANR	10891794	Symbol	i		10891025						
ANR	10891795	Symbol	n		10891025						
ANR	10891796	Symbol	mtx -> vorg		10891025						
ANR	10891797	Symbol	mtx		10891025						
ANR	10891798	Symbol	mtx -> hadv		10891025						
ANR	10891799	Symbol	ymax		10891025						
ANR	10891800	Symbol	font -> data		10891025						
ANR	10891801	Symbol	hadv		10891025						
ANR	10891802	Symbol	idx		10891025						
ANR	10891803	Symbol	& len		10891025						
ANR	10891804	Symbol	ofs		10891025						
ANR	10891805	Symbol	xps_find_sfnt_table		10891025						
ANR	10891806	Symbol	font		10891025						
ANR	10891807	Symbol	desc		10891025						
