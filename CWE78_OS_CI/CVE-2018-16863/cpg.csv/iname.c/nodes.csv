command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6043353	File	data/converged/CVE-2018-16863_ghostpdl/iname.c								
ANR	6043354	DeclStmt									
ANR	6043355	Decl							const uint	const uint	name_max_string
ANR	6043356	DeclStmt									
ANR	6043357	Decl							const byte	const byte [ 256 ]	hash_permutation
ANR	6043358	DeclStmt									
ANR	6043359	Decl							const byte	const byte [ NT_1CHAR_SIZE ]	nt_1char_names
ANR	6043360	DeclStmt									
ANR	6043361	Decl							void	"void ( const gs_memory_t * , void * )"	gs_names_finalize
ANR	6043362	DeclStmt									
ANR	6043363	Decl							int	int ( name_table * )	name_alloc_sub
ANR	6043364	DeclStmt									
ANR	6043365	Decl							void	"void ( name_table * , uint , bool )"	name_free_sub
ANR	6043366	DeclStmt									
ANR	6043367	Decl							void	"void ( name_table * , uint , bool , bool )"	name_scan_sub
ANR	6043368	Function	name_print	59:0:1950:2517							
ANR	6043369	FunctionDef	"name_print (const char * msg , const name_table * nt , uint nidx , const int * pflag)"		6043368	0					
ANR	6043370	CompoundStatement		61:0:2041:2517	6043368	0					
ANR	6043371	IdentifierDeclStatement	"const name_string_t * pnstr = names_index_string_inline ( nt , nidx ) ;"	62:4:2047:2111	6043368	0	True				
ANR	6043372	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , nidx )"		6043368	0					
ANR	6043373	IdentifierDeclType	const name_string_t *		6043368	0					
ANR	6043374	Identifier	pnstr		6043368	1					
ANR	6043375	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , nidx )"		6043368	2		=			
ANR	6043376	Identifier	pnstr		6043368	0					
ANR	6043377	CallExpression	"names_index_string_inline ( nt , nidx )"		6043368	1					
ANR	6043378	Callee	names_index_string_inline		6043368	0					
ANR	6043379	Identifier	names_index_string_inline		6043368	0					
ANR	6043380	ArgumentList	nt		6043368	1					
ANR	6043381	Argument	nt		6043368	0					
ANR	6043382	Identifier	nt		6043368	0					
ANR	6043383	Argument	nidx		6043368	1					
ANR	6043384	Identifier	nidx		6043368	0					
ANR	6043385	IdentifierDeclStatement	"const name * pname = names_index_ptr_inline ( nt , nidx ) ;"	63:4:2117:2169	6043368	1	True				
ANR	6043386	IdentifierDecl	"* pname = names_index_ptr_inline ( nt , nidx )"		6043368	0					
ANR	6043387	IdentifierDeclType	const name *		6043368	0					
ANR	6043388	Identifier	pname		6043368	1					
ANR	6043389	AssignmentExpression	"* pname = names_index_ptr_inline ( nt , nidx )"		6043368	2		=			
ANR	6043390	Identifier	pname		6043368	0					
ANR	6043391	CallExpression	"names_index_ptr_inline ( nt , nidx )"		6043368	1					
ANR	6043392	Callee	names_index_ptr_inline		6043368	0					
ANR	6043393	Identifier	names_index_ptr_inline		6043368	0					
ANR	6043394	ArgumentList	nt		6043368	1					
ANR	6043395	Argument	nt		6043368	0					
ANR	6043396	Identifier	nt		6043368	0					
ANR	6043397	Argument	nidx		6043368	1					
ANR	6043398	Identifier	nidx		6043368	0					
ANR	6043399	IdentifierDeclStatement	const byte * str = pnstr -> string_bytes ;	64:4:2175:2212	6043368	2	True				
ANR	6043400	IdentifierDecl	* str = pnstr -> string_bytes		6043368	0					
ANR	6043401	IdentifierDeclType	const byte *		6043368	0					
ANR	6043402	Identifier	str		6043368	1					
ANR	6043403	AssignmentExpression	* str = pnstr -> string_bytes		6043368	2		=			
ANR	6043404	Identifier	str		6043368	0					
ANR	6043405	PtrMemberAccess	pnstr -> string_bytes		6043368	1					
ANR	6043406	Identifier	pnstr		6043368	0					
ANR	6043407	Identifier	string_bytes		6043368	1					
ANR	6043408	ExpressionStatement	"dmlprintf1 ( nt -> memory , ""[n]%s"" , msg )"	66:4:2219:2255	6043368	3	True				
ANR	6043409	CallExpression	"dmlprintf1 ( nt -> memory , ""[n]%s"" , msg )"		6043368	0					
ANR	6043410	Callee	dmlprintf1		6043368	0					
ANR	6043411	Identifier	dmlprintf1		6043368	0					
ANR	6043412	ArgumentList	nt -> memory		6043368	1					
ANR	6043413	Argument	nt -> memory		6043368	0					
ANR	6043414	PtrMemberAccess	nt -> memory		6043368	0					
ANR	6043415	Identifier	nt		6043368	0					
ANR	6043416	Identifier	memory		6043368	1					
ANR	6043417	Argument	"""[n]%s"""		6043368	1					
ANR	6043418	PrimaryExpression	"""[n]%s"""		6043368	0					
ANR	6043419	Argument	msg		6043368	2					
ANR	6043420	Identifier	msg		6043368	0					
ANR	6043421	IfStatement	if ( pflag )		6043368	4					
ANR	6043422	Condition	pflag	67:8:2265:2269	6043368	0	True				
ANR	6043423	Identifier	pflag		6043368	0					
ANR	6043424	ExpressionStatement	"dmprintf1 ( nt -> memory , ""(%d)"" , * pflag )"	68:8:2280:2317	6043368	1	True				
ANR	6043425	CallExpression	"dmprintf1 ( nt -> memory , ""(%d)"" , * pflag )"		6043368	0					
ANR	6043426	Callee	dmprintf1		6043368	0					
ANR	6043427	Identifier	dmprintf1		6043368	0					
ANR	6043428	ArgumentList	nt -> memory		6043368	1					
ANR	6043429	Argument	nt -> memory		6043368	0					
ANR	6043430	PtrMemberAccess	nt -> memory		6043368	0					
ANR	6043431	Identifier	nt		6043368	0					
ANR	6043432	Identifier	memory		6043368	1					
ANR	6043433	Argument	"""(%d)"""		6043368	1					
ANR	6043434	PrimaryExpression	"""(%d)"""		6043368	0					
ANR	6043435	Argument	* pflag		6043368	2					
ANR	6043436	UnaryOperationExpression	* pflag		6043368	0					
ANR	6043437	UnaryOperator	*		6043368	0					
ANR	6043438	Identifier	pflag		6043368	1					
ANR	6043439	ExpressionStatement	"dmprintf2 ( nt -> memory , "" (0x%lx#%u)"" , ( ulong ) pname , nidx )"	69:4:2323:2379	6043368	5	True				
ANR	6043440	CallExpression	"dmprintf2 ( nt -> memory , "" (0x%lx#%u)"" , ( ulong ) pname , nidx )"		6043368	0					
ANR	6043441	Callee	dmprintf2		6043368	0					
ANR	6043442	Identifier	dmprintf2		6043368	0					
ANR	6043443	ArgumentList	nt -> memory		6043368	1					
ANR	6043444	Argument	nt -> memory		6043368	0					
ANR	6043445	PtrMemberAccess	nt -> memory		6043368	0					
ANR	6043446	Identifier	nt		6043368	0					
ANR	6043447	Identifier	memory		6043368	1					
ANR	6043448	Argument	""" (0x%lx#%u)"""		6043368	1					
ANR	6043449	PrimaryExpression	""" (0x%lx#%u)"""		6043368	0					
ANR	6043450	Argument	( ulong ) pname		6043368	2					
ANR	6043451	CastExpression	( ulong ) pname		6043368	0					
ANR	6043452	CastTarget	ulong		6043368	0					
ANR	6043453	Identifier	pname		6043368	1					
ANR	6043454	Argument	nidx		6043368	3					
ANR	6043455	Identifier	nidx		6043368	0					
ANR	6043456	ExpressionStatement	"debug_print_string ( nt -> memory , str , pnstr -> string_size )"	70:4:2385:2440	6043368	6	True				
ANR	6043457	CallExpression	"debug_print_string ( nt -> memory , str , pnstr -> string_size )"		6043368	0					
ANR	6043458	Callee	debug_print_string		6043368	0					
ANR	6043459	Identifier	debug_print_string		6043368	0					
ANR	6043460	ArgumentList	nt -> memory		6043368	1					
ANR	6043461	Argument	nt -> memory		6043368	0					
ANR	6043462	PtrMemberAccess	nt -> memory		6043368	0					
ANR	6043463	Identifier	nt		6043368	0					
ANR	6043464	Identifier	memory		6043368	1					
ANR	6043465	Argument	str		6043368	1					
ANR	6043466	Identifier	str		6043368	0					
ANR	6043467	Argument	pnstr -> string_size		6043368	2					
ANR	6043468	PtrMemberAccess	pnstr -> string_size		6043368	0					
ANR	6043469	Identifier	pnstr		6043368	0					
ANR	6043470	Identifier	string_size		6043368	1					
ANR	6043471	ExpressionStatement	"dmprintf2 ( nt -> memory , ""(0x%lx,%u)\\n"" , ( ulong ) str , pnstr -> string_size )"	71:4:2446:2515	6043368	7	True				
ANR	6043472	CallExpression	"dmprintf2 ( nt -> memory , ""(0x%lx,%u)\\n"" , ( ulong ) str , pnstr -> string_size )"		6043368	0					
ANR	6043473	Callee	dmprintf2		6043368	0					
ANR	6043474	Identifier	dmprintf2		6043368	0					
ANR	6043475	ArgumentList	nt -> memory		6043368	1					
ANR	6043476	Argument	nt -> memory		6043368	0					
ANR	6043477	PtrMemberAccess	nt -> memory		6043368	0					
ANR	6043478	Identifier	nt		6043368	0					
ANR	6043479	Identifier	memory		6043368	1					
ANR	6043480	Argument	"""(0x%lx,%u)\\n"""		6043368	1					
ANR	6043481	PrimaryExpression	"""(0x%lx,%u)\\n"""		6043368	0					
ANR	6043482	Argument	( ulong ) str		6043368	2					
ANR	6043483	CastExpression	( ulong ) str		6043368	0					
ANR	6043484	CastTarget	ulong		6043368	0					
ANR	6043485	Identifier	str		6043368	1					
ANR	6043486	Argument	pnstr -> string_size		6043368	3					
ANR	6043487	PtrMemberAccess	pnstr -> string_size		6043368	0					
ANR	6043488	Identifier	pnstr		6043368	0					
ANR	6043489	Identifier	string_size		6043368	1					
ANR	6043490	ReturnType	static void		6043368	1					
ANR	6043491	Identifier	name_print		6043368	2					
ANR	6043492	ParameterList	"const char * msg , const name_table * nt , uint nidx , const int * pflag"		6043368	3					
ANR	6043493	Parameter	const char * msg	60:11:1973:1987	6043368	0	True				
ANR	6043494	ParameterType	const char *		6043368	0					
ANR	6043495	Identifier	msg		6043368	1					
ANR	6043496	Parameter	const name_table * nt	60:28:1990:2009	6043368	1	True				
ANR	6043497	ParameterType	const name_table *		6043368	0					
ANR	6043498	Identifier	nt		6043368	1					
ANR	6043499	Parameter	uint nidx	60:50:2012:2020	6043368	2	True				
ANR	6043500	ParameterType	uint		6043368	0					
ANR	6043501	Identifier	nidx		6043368	1					
ANR	6043502	Parameter	const int * pflag	60:61:2023:2038	6043368	3	True				
ANR	6043503	ParameterType	const int *		6043368	0					
ANR	6043504	Identifier	pflag		6043368	1					
ANR	6043505	CFGEntryNode	ENTRY		6043368		True				
ANR	6043506	CFGExitNode	EXIT		6043368		True				
ANR	6043507	Symbol	msg		6043368						
ANR	6043508	Symbol	pnstr -> string_size		6043368						
ANR	6043509	Symbol	* pnstr		6043368						
ANR	6043510	Symbol	nt		6043368						
ANR	6043511	Symbol	pflag		6043368						
ANR	6043512	Symbol	pname		6043368						
ANR	6043513	Symbol	nt -> memory		6043368						
ANR	6043514	Symbol	pnstr -> string_bytes		6043368						
ANR	6043515	Symbol	pnstr		6043368						
ANR	6043516	Symbol	names_index_string_inline		6043368						
ANR	6043517	Symbol	* nt		6043368						
ANR	6043518	Symbol	str		6043368						
ANR	6043519	Symbol	names_index_ptr_inline		6043368						
ANR	6043520	Symbol	nidx		6043368						
ANR	6043521	Symbol	* pflag		6043368						
ANR	6043522	Function	names_init	80:0:2728:4335							
ANR	6043523	FunctionDef	"names_init (ulong count , gs_ref_memory_t * imem)"		6043522	0					
ANR	6043524	CompoundStatement		82:0:2788:4335	6043522	0					
ANR	6043525	IdentifierDeclStatement	gs_memory_t * mem = ( gs_memory_t * ) imem ;	83:4:2794:2832	6043522	0	True				
ANR	6043526	IdentifierDecl	* mem = ( gs_memory_t * ) imem		6043522	0					
ANR	6043527	IdentifierDeclType	gs_memory_t *		6043522	0					
ANR	6043528	Identifier	mem		6043522	1					
ANR	6043529	AssignmentExpression	* mem = ( gs_memory_t * ) imem		6043522	2		=			
ANR	6043530	Identifier	mem		6043522	0					
ANR	6043531	CastExpression	( gs_memory_t * ) imem		6043522	1					
ANR	6043532	CastTarget	gs_memory_t *		6043522	0					
ANR	6043533	Identifier	imem		6043522	1					
ANR	6043534	IdentifierDeclStatement	name_table * nt ;	84:4:2838:2852	6043522	1	True				
ANR	6043535	IdentifierDecl	* nt		6043522	0					
ANR	6043536	IdentifierDeclType	name_table *		6043522	0					
ANR	6043537	Identifier	nt		6043522	1					
ANR	6043538	IdentifierDeclStatement	int i ;	85:4:2858:2863	6043522	2	True				
ANR	6043539	IdentifierDecl	i		6043522	0					
ANR	6043540	IdentifierDeclType	int		6043522	0					
ANR	6043541	Identifier	i		6043522	1					
ANR	6043542	IfStatement	if ( count == 0 )		6043522	3					
ANR	6043543	Condition	count == 0	87:8:2874:2883	6043522	0	True				
ANR	6043544	EqualityExpression	count == 0		6043522	0		==			
ANR	6043545	Identifier	count		6043522	0					
ANR	6043546	PrimaryExpression	0		6043522	1					
ANR	6043547	ExpressionStatement	count = max_name_count + 1L	88:8:2894:2921	6043522	1	True				
ANR	6043548	AssignmentExpression	count = max_name_count + 1L		6043522	0		=			
ANR	6043549	Identifier	count		6043522	0					
ANR	6043550	AdditiveExpression	max_name_count + 1L		6043522	1		+			
ANR	6043551	Identifier	max_name_count		6043522	0					
ANR	6043552	PrimaryExpression	1L		6043522	1					
ANR	6043553	ElseStatement	else		6043522	0					
ANR	6043554	IfStatement	if ( count - 1 > max_name_count )		6043522	0					
ANR	6043555	Condition	count - 1 > max_name_count	89:13:2936:2961	6043522	0	True				
ANR	6043556	RelationalExpression	count - 1 > max_name_count		6043522	0		>			
ANR	6043557	AdditiveExpression	count - 1		6043522	0		-			
ANR	6043558	Identifier	count		6043522	0					
ANR	6043559	PrimaryExpression	1		6043522	1					
ANR	6043560	Identifier	max_name_count		6043522	1					
ANR	6043561	ReturnStatement	return 0 ;	90:8:2972:2980	6043522	1	True				
ANR	6043562	PrimaryExpression	0		6043522	0					
ANR	6043563	ExpressionStatement	"nt = gs_alloc_struct ( mem , name_table , & st_name_table , ""name_init(nt)"" )"	91:4:2986:3056	6043522	4	True				
ANR	6043564	AssignmentExpression	"nt = gs_alloc_struct ( mem , name_table , & st_name_table , ""name_init(nt)"" )"		6043522	0		=			
ANR	6043565	Identifier	nt		6043522	0					
ANR	6043566	CallExpression	"gs_alloc_struct ( mem , name_table , & st_name_table , ""name_init(nt)"" )"		6043522	1					
ANR	6043567	Callee	gs_alloc_struct		6043522	0					
ANR	6043568	Identifier	gs_alloc_struct		6043522	0					
ANR	6043569	ArgumentList	mem		6043522	1					
ANR	6043570	Argument	mem		6043522	0					
ANR	6043571	Identifier	mem		6043522	0					
ANR	6043572	Argument	name_table		6043522	1					
ANR	6043573	Identifier	name_table		6043522	0					
ANR	6043574	Argument	& st_name_table		6043522	2					
ANR	6043575	UnaryOperationExpression	& st_name_table		6043522	0					
ANR	6043576	UnaryOperator	&		6043522	0					
ANR	6043577	Identifier	st_name_table		6043522	1					
ANR	6043578	Argument	"""name_init(nt)"""		6043522	3					
ANR	6043579	PrimaryExpression	"""name_init(nt)"""		6043522	0					
ANR	6043580	IfStatement	if ( nt == 0 )		6043522	5					
ANR	6043581	Condition	nt == 0	92:8:3066:3072	6043522	0	True				
ANR	6043582	EqualityExpression	nt == 0		6043522	0		==			
ANR	6043583	Identifier	nt		6043522	0					
ANR	6043584	PrimaryExpression	0		6043522	1					
ANR	6043585	ReturnStatement	return 0 ;	93:8:3083:3091	6043522	1	True				
ANR	6043586	PrimaryExpression	0		6043522	0					
ANR	6043587	ExpressionStatement	"memset ( nt , 0 , sizeof ( name_table ) )"	94:4:3097:3130	6043522	6	True				
ANR	6043588	CallExpression	"memset ( nt , 0 , sizeof ( name_table ) )"		6043522	0					
ANR	6043589	Callee	memset		6043522	0					
ANR	6043590	Identifier	memset		6043522	0					
ANR	6043591	ArgumentList	nt		6043522	1					
ANR	6043592	Argument	nt		6043522	0					
ANR	6043593	Identifier	nt		6043522	0					
ANR	6043594	Argument	0		6043522	1					
ANR	6043595	PrimaryExpression	0		6043522	0					
ANR	6043596	Argument	sizeof ( name_table )		6043522	2					
ANR	6043597	SizeofExpression	sizeof ( name_table )		6043522	0					
ANR	6043598	Sizeof	sizeof		6043522	0					
ANR	6043599	SizeofOperand	name_table		6043522	1					
ANR	6043600	ExpressionStatement	nt -> max_sub_count = ( ( count - 1 ) | nt_sub_index_mask ) >> nt_log2_sub_size	95:4:3136:3217	6043522	7	True				
ANR	6043601	AssignmentExpression	nt -> max_sub_count = ( ( count - 1 ) | nt_sub_index_mask ) >> nt_log2_sub_size		6043522	0		=			
ANR	6043602	PtrMemberAccess	nt -> max_sub_count		6043522	0					
ANR	6043603	Identifier	nt		6043522	0					
ANR	6043604	Identifier	max_sub_count		6043522	1					
ANR	6043605	ShiftExpression	( ( count - 1 ) | nt_sub_index_mask ) >> nt_log2_sub_size		6043522	1		>>			
ANR	6043606	InclusiveOrExpression	( count - 1 ) | nt_sub_index_mask		6043522	0		|			
ANR	6043607	AdditiveExpression	count - 1		6043522	0		-			
ANR	6043608	Identifier	count		6043522	0					
ANR	6043609	PrimaryExpression	1		6043522	1					
ANR	6043610	Identifier	nt_sub_index_mask		6043522	1					
ANR	6043611	Identifier	nt_log2_sub_size		6043522	1					
ANR	6043612	ExpressionStatement	nt -> name_string_attrs = imemory_space ( imem ) | a_readonly	97:4:3223:3279	6043522	8	True				
ANR	6043613	AssignmentExpression	nt -> name_string_attrs = imemory_space ( imem ) | a_readonly		6043522	0		=			
ANR	6043614	PtrMemberAccess	nt -> name_string_attrs		6043522	0					
ANR	6043615	Identifier	nt		6043522	0					
ANR	6043616	Identifier	name_string_attrs		6043522	1					
ANR	6043617	InclusiveOrExpression	imemory_space ( imem ) | a_readonly		6043522	1		|			
ANR	6043618	CallExpression	imemory_space ( imem )		6043522	0					
ANR	6043619	Callee	imemory_space		6043522	0					
ANR	6043620	Identifier	imemory_space		6043522	0					
ANR	6043621	ArgumentList	imem		6043522	1					
ANR	6043622	Argument	imem		6043522	0					
ANR	6043623	Identifier	imem		6043522	0					
ANR	6043624	Identifier	a_readonly		6043522	1					
ANR	6043625	ExpressionStatement	nt -> memory = mem	98:4:3285:3301	6043522	9	True				
ANR	6043626	AssignmentExpression	nt -> memory = mem		6043522	0		=			
ANR	6043627	PtrMemberAccess	nt -> memory		6043522	0					
ANR	6043628	Identifier	nt		6043522	0					
ANR	6043629	Identifier	memory		6043522	1					
ANR	6043630	Identifier	mem		6043522	1					
ANR	6043631	ForStatement	for ( i = 0 ; i < NT_1CHAR_FIRST + NT_1CHAR_SIZE ; i += nt_sub_size )		6043522	10					
ANR	6043632	ForInit	i = 0 ;	101:9:3412:3417	6043522	0	True				
ANR	6043633	AssignmentExpression	i = 0		6043522	0		=			
ANR	6043634	Identifier	i		6043522	0					
ANR	6043635	PrimaryExpression	0		6043522	1					
ANR	6043636	Condition	i < NT_1CHAR_FIRST + NT_1CHAR_SIZE	101:16:3419:3452	6043522	1	True				
ANR	6043637	RelationalExpression	i < NT_1CHAR_FIRST + NT_1CHAR_SIZE		6043522	0		<			
ANR	6043638	Identifier	i		6043522	0					
ANR	6043639	AdditiveExpression	NT_1CHAR_FIRST + NT_1CHAR_SIZE		6043522	1		+			
ANR	6043640	Identifier	NT_1CHAR_FIRST		6043522	0					
ANR	6043641	Identifier	NT_1CHAR_SIZE		6043522	1					
ANR	6043642	AssignmentExpression	i += nt_sub_size	101:52:3455:3470	6043522	2	True	+=			
ANR	6043643	Identifier	i		6043522	0					
ANR	6043644	Identifier	nt_sub_size		6043522	1					
ANR	6043645	CompoundStatement		21:8:694:723	6043522	3					
ANR	6043646	IdentifierDeclStatement	int code = name_alloc_sub ( nt ) ;	102:8:3483:3512	6043522	0	True				
ANR	6043647	IdentifierDecl	code = name_alloc_sub ( nt )		6043522	0					
ANR	6043648	IdentifierDeclType	int		6043522	0					
ANR	6043649	Identifier	code		6043522	1					
ANR	6043650	AssignmentExpression	code = name_alloc_sub ( nt )		6043522	2		=			
ANR	6043651	Identifier	code		6043522	0					
ANR	6043652	CallExpression	name_alloc_sub ( nt )		6043522	1					
ANR	6043653	Callee	name_alloc_sub		6043522	0					
ANR	6043654	Identifier	name_alloc_sub		6043522	0					
ANR	6043655	ArgumentList	nt		6043522	1					
ANR	6043656	Argument	nt		6043522	0					
ANR	6043657	Identifier	nt		6043522	0					
ANR	6043658	IfStatement	if ( code < 0 )		6043522	1					
ANR	6043659	Condition	code < 0	104:12:3527:3534	6043522	0	True				
ANR	6043660	RelationalExpression	code < 0		6043522	0		<			
ANR	6043661	Identifier	code		6043522	0					
ANR	6043662	PrimaryExpression	0		6043522	1					
ANR	6043663	CompoundStatement		23:22:748:748	6043522	1					
ANR	6043664	ExpressionStatement	names_free ( nt )	105:12:3551:3565	6043522	0	True				
ANR	6043665	CallExpression	names_free ( nt )		6043522	0					
ANR	6043666	Callee	names_free		6043522	0					
ANR	6043667	Identifier	names_free		6043522	0					
ANR	6043668	ArgumentList	nt		6043522	1					
ANR	6043669	Argument	nt		6043522	0					
ANR	6043670	Identifier	nt		6043522	0					
ANR	6043671	ReturnStatement	return 0 ;	106:12:3579:3587	6043522	1	True				
ANR	6043672	PrimaryExpression	0		6043522	0					
ANR	6043673	ForStatement	for ( i = - 1 ; i < NT_1CHAR_SIZE ; i ++ )		6043522	11					
ANR	6043674	ForInit	i = - 1 ;	109:9:3614:3620	6043522	0	True				
ANR	6043675	AssignmentExpression	i = - 1		6043522	0		=			
ANR	6043676	Identifier	i		6043522	0					
ANR	6043677	UnaryOperationExpression	- 1		6043522	1					
ANR	6043678	UnaryOperator	-		6043522	0					
ANR	6043679	PrimaryExpression	1		6043522	1					
ANR	6043680	Condition	i < NT_1CHAR_SIZE	109:17:3622:3638	6043522	1	True				
ANR	6043681	RelationalExpression	i < NT_1CHAR_SIZE		6043522	0		<			
ANR	6043682	Identifier	i		6043522	0					
ANR	6043683	Identifier	NT_1CHAR_SIZE		6043522	1					
ANR	6043684	PostIncDecOperationExpression	i ++	109:36:3641:3643	6043522	2	True				
ANR	6043685	Identifier	i		6043522	0					
ANR	6043686	IncDec	++		6043522	1					
ANR	6043687	CompoundStatement		32:8:1010:1068	6043522	3					
ANR	6043688	IdentifierDeclStatement	uint ncnt = NT_1CHAR_FIRST + i ;	110:8:3656:3686	6043522	0	True				
ANR	6043689	IdentifierDecl	ncnt = NT_1CHAR_FIRST + i		6043522	0					
ANR	6043690	IdentifierDeclType	uint		6043522	0					
ANR	6043691	Identifier	ncnt		6043522	1					
ANR	6043692	AssignmentExpression	ncnt = NT_1CHAR_FIRST + i		6043522	2		=			
ANR	6043693	Identifier	ncnt		6043522	0					
ANR	6043694	AdditiveExpression	NT_1CHAR_FIRST + i		6043522	1		+			
ANR	6043695	Identifier	NT_1CHAR_FIRST		6043522	0					
ANR	6043696	Identifier	i		6043522	1					
ANR	6043697	IdentifierDeclStatement	uint nidx = name_count_to_index ( ncnt ) ;	111:8:3696:3733	6043522	1	True				
ANR	6043698	IdentifierDecl	nidx = name_count_to_index ( ncnt )		6043522	0					
ANR	6043699	IdentifierDeclType	uint		6043522	0					
ANR	6043700	Identifier	nidx		6043522	1					
ANR	6043701	AssignmentExpression	nidx = name_count_to_index ( ncnt )		6043522	2		=			
ANR	6043702	Identifier	nidx		6043522	0					
ANR	6043703	CallExpression	name_count_to_index ( ncnt )		6043522	1					
ANR	6043704	Callee	name_count_to_index		6043522	0					
ANR	6043705	Identifier	name_count_to_index		6043522	0					
ANR	6043706	ArgumentList	ncnt		6043522	1					
ANR	6043707	Argument	ncnt		6043522	0					
ANR	6043708	Identifier	ncnt		6043522	0					
ANR	6043709	IdentifierDeclStatement	"name * pname = names_index_ptr_inline ( nt , nidx ) ;"	112:8:3743:3789	6043522	2	True				
ANR	6043710	IdentifierDecl	"* pname = names_index_ptr_inline ( nt , nidx )"		6043522	0					
ANR	6043711	IdentifierDeclType	name *		6043522	0					
ANR	6043712	Identifier	pname		6043522	1					
ANR	6043713	AssignmentExpression	"* pname = names_index_ptr_inline ( nt , nidx )"		6043522	2		=			
ANR	6043714	Identifier	pname		6043522	0					
ANR	6043715	CallExpression	"names_index_ptr_inline ( nt , nidx )"		6043522	1					
ANR	6043716	Callee	names_index_ptr_inline		6043522	0					
ANR	6043717	Identifier	names_index_ptr_inline		6043522	0					
ANR	6043718	ArgumentList	nt		6043522	1					
ANR	6043719	Argument	nt		6043522	0					
ANR	6043720	Identifier	nt		6043522	0					
ANR	6043721	Argument	nidx		6043522	1					
ANR	6043722	Identifier	nidx		6043522	0					
ANR	6043723	IdentifierDeclStatement	"name_string_t * pnstr = names_index_string_inline ( nt , nidx ) ;"	113:8:3799:3857	6043522	3	True				
ANR	6043724	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , nidx )"		6043522	0					
ANR	6043725	IdentifierDeclType	name_string_t *		6043522	0					
ANR	6043726	Identifier	pnstr		6043522	1					
ANR	6043727	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , nidx )"		6043522	2		=			
ANR	6043728	Identifier	pnstr		6043522	0					
ANR	6043729	CallExpression	"names_index_string_inline ( nt , nidx )"		6043522	1					
ANR	6043730	Callee	names_index_string_inline		6043522	0					
ANR	6043731	Identifier	names_index_string_inline		6043522	0					
ANR	6043732	ArgumentList	nt		6043522	1					
ANR	6043733	Argument	nt		6043522	0					
ANR	6043734	Identifier	nt		6043522	0					
ANR	6043735	Argument	nidx		6043522	1					
ANR	6043736	Identifier	nidx		6043522	0					
ANR	6043737	IfStatement	if ( i < 0 )		6043522	4					
ANR	6043738	Condition	i < 0	115:12:3872:3876	6043522	0	True				
ANR	6043739	RelationalExpression	i < 0		6043522	0		<			
ANR	6043740	Identifier	i		6043522	0					
ANR	6043741	PrimaryExpression	0		6043522	1					
ANR	6043742	ExpressionStatement	"pnstr -> string_bytes = nt_1char_names , pnstr -> string_size = 0"	116:12:3891:3967	6043522	1	True				
ANR	6043743	Expression	"pnstr -> string_bytes = nt_1char_names , pnstr -> string_size = 0"		6043522	0					
ANR	6043744	AssignmentExpression	pnstr -> string_bytes = nt_1char_names		6043522	0		=			
ANR	6043745	PtrMemberAccess	pnstr -> string_bytes		6043522	0					
ANR	6043746	Identifier	pnstr		6043522	0					
ANR	6043747	Identifier	string_bytes		6043522	1					
ANR	6043748	Identifier	nt_1char_names		6043522	1					
ANR	6043749	AssignmentExpression	pnstr -> string_size = 0		6043522	1		=			
ANR	6043750	PtrMemberAccess	pnstr -> string_size		6043522	0					
ANR	6043751	Identifier	pnstr		6043522	0					
ANR	6043752	Identifier	string_size		6043522	1					
ANR	6043753	PrimaryExpression	0		6043522	1					
ANR	6043754	ElseStatement	else		6043522	0					
ANR	6043755	ExpressionStatement	"pnstr -> string_bytes = nt_1char_names + i , pnstr -> string_size = 1"	119:12:3994:4074	6043522	0	True				
ANR	6043756	Expression	"pnstr -> string_bytes = nt_1char_names + i , pnstr -> string_size = 1"		6043522	0					
ANR	6043757	AssignmentExpression	pnstr -> string_bytes = nt_1char_names + i		6043522	0		=			
ANR	6043758	PtrMemberAccess	pnstr -> string_bytes		6043522	0					
ANR	6043759	Identifier	pnstr		6043522	0					
ANR	6043760	Identifier	string_bytes		6043522	1					
ANR	6043761	AdditiveExpression	nt_1char_names + i		6043522	1		+			
ANR	6043762	Identifier	nt_1char_names		6043522	0					
ANR	6043763	Identifier	i		6043522	1					
ANR	6043764	AssignmentExpression	pnstr -> string_size = 1		6043522	1		=			
ANR	6043765	PtrMemberAccess	pnstr -> string_size		6043522	0					
ANR	6043766	Identifier	pnstr		6043522	0					
ANR	6043767	Identifier	string_size		6043522	1					
ANR	6043768	PrimaryExpression	1		6043522	1					
ANR	6043769	ExpressionStatement	pnstr -> foreign_string = 1	121:8:4084:4109	6043522	5	True				
ANR	6043770	AssignmentExpression	pnstr -> foreign_string = 1		6043522	0		=			
ANR	6043771	PtrMemberAccess	pnstr -> foreign_string		6043522	0					
ANR	6043772	Identifier	pnstr		6043522	0					
ANR	6043773	Identifier	foreign_string		6043522	1					
ANR	6043774	PrimaryExpression	1		6043522	1					
ANR	6043775	ExpressionStatement	pnstr -> mark = 1	122:8:4119:4134	6043522	6	True				
ANR	6043776	AssignmentExpression	pnstr -> mark = 1		6043522	0		=			
ANR	6043777	PtrMemberAccess	pnstr -> mark		6043522	0					
ANR	6043778	Identifier	pnstr		6043522	0					
ANR	6043779	Identifier	mark		6043522	1					
ANR	6043780	PrimaryExpression	1		6043522	1					
ANR	6043781	ExpressionStatement	pname -> pvalue = pv_no_defn	123:8:4144:4170	6043522	7	True				
ANR	6043782	AssignmentExpression	pname -> pvalue = pv_no_defn		6043522	0		=			
ANR	6043783	PtrMemberAccess	pname -> pvalue		6043522	0					
ANR	6043784	Identifier	pname		6043522	0					
ANR	6043785	Identifier	pvalue		6043522	1					
ANR	6043786	Identifier	pv_no_defn		6043522	1					
ANR	6043787	ExpressionStatement	nt -> perm_count = NT_1CHAR_FIRST + NT_1CHAR_SIZE	125:4:4182:4229	6043522	12	True				
ANR	6043788	AssignmentExpression	nt -> perm_count = NT_1CHAR_FIRST + NT_1CHAR_SIZE		6043522	0		=			
ANR	6043789	PtrMemberAccess	nt -> perm_count		6043522	0					
ANR	6043790	Identifier	nt		6043522	0					
ANR	6043791	Identifier	perm_count		6043522	1					
ANR	6043792	AdditiveExpression	NT_1CHAR_FIRST + NT_1CHAR_SIZE		6043522	1		+			
ANR	6043793	Identifier	NT_1CHAR_FIRST		6043522	0					
ANR	6043794	Identifier	NT_1CHAR_SIZE		6043522	1					
ANR	6043795	ExpressionStatement	nt -> free = 0	127:4:4272:4284	6043522	13	True				
ANR	6043796	AssignmentExpression	nt -> free = 0		6043522	0		=			
ANR	6043797	PtrMemberAccess	nt -> free		6043522	0					
ANR	6043798	Identifier	nt		6043522	0					
ANR	6043799	Identifier	free		6043522	1					
ANR	6043800	PrimaryExpression	0		6043522	1					
ANR	6043801	ExpressionStatement	"names_trace_finish ( nt , NULL )"	128:4:4290:4318	6043522	14	True				
ANR	6043802	CallExpression	"names_trace_finish ( nt , NULL )"		6043522	0					
ANR	6043803	Callee	names_trace_finish		6043522	0					
ANR	6043804	Identifier	names_trace_finish		6043522	0					
ANR	6043805	ArgumentList	nt		6043522	1					
ANR	6043806	Argument	nt		6043522	0					
ANR	6043807	Identifier	nt		6043522	0					
ANR	6043808	Argument	NULL		6043522	1					
ANR	6043809	Identifier	NULL		6043522	0					
ANR	6043810	ReturnStatement	return nt ;	129:4:4324:4333	6043522	15	True				
ANR	6043811	Identifier	nt		6043522	0					
ANR	6043812	ReturnType	name_table *		6043522	1					
ANR	6043813	Identifier	names_init		6043522	2					
ANR	6043814	ParameterList	"ulong count , gs_ref_memory_t * imem"		6043522	3					
ANR	6043815	Parameter	ulong count	81:11:2752:2762	6043522	0	True				
ANR	6043816	ParameterType	ulong		6043522	0					
ANR	6043817	Identifier	count		6043522	1					
ANR	6043818	Parameter	gs_ref_memory_t * imem	81:24:2765:2785	6043522	1	True				
ANR	6043819	ParameterType	gs_ref_memory_t *		6043522	0					
ANR	6043820	Identifier	imem		6043522	1					
ANR	6043821	CFGEntryNode	ENTRY		6043522		True				
ANR	6043822	CFGExitNode	EXIT		6043522		True				
ANR	6043823	Symbol	pnstr -> string_size		6043522						
ANR	6043824	Symbol	name_count_to_index		6043522						
ANR	6043825	Symbol	code		6043522						
ANR	6043826	Symbol	* pnstr		6043522						
ANR	6043827	Symbol	name_table		6043522						
ANR	6043828	Symbol	nt_sub_size		6043522						
ANR	6043829	Symbol	nt		6043522						
ANR	6043830	Symbol	gs_alloc_struct		6043522						
ANR	6043831	Symbol	nt -> memory		6043522						
ANR	6043832	Symbol	ncnt		6043522						
ANR	6043833	Symbol	nt -> max_sub_count		6043522						
ANR	6043834	Symbol	nt -> free		6043522						
ANR	6043835	Symbol	mem		6043522						
ANR	6043836	Symbol	nt_1char_names		6043522						
ANR	6043837	Symbol	names_index_ptr_inline		6043522						
ANR	6043838	Symbol	nt_log2_sub_size		6043522						
ANR	6043839	Symbol	nt -> name_string_attrs		6043522						
ANR	6043840	Symbol	nt_sub_index_mask		6043522						
ANR	6043841	Symbol	& st_name_table		6043522						
ANR	6043842	Symbol	nt -> perm_count		6043522						
ANR	6043843	Symbol	pnstr -> foreign_string		6043522						
ANR	6043844	Symbol	NT_1CHAR_FIRST		6043522						
ANR	6043845	Symbol	NULL		6043522						
ANR	6043846	Symbol	pname		6043522						
ANR	6043847	Symbol	count		6043522						
ANR	6043848	Symbol	i		6043522						
ANR	6043849	Symbol	name_alloc_sub		6043522						
ANR	6043850	Symbol	pnstr -> string_bytes		6043522						
ANR	6043851	Symbol	pnstr -> mark		6043522						
ANR	6043852	Symbol	pnstr		6043522						
ANR	6043853	Symbol	names_index_string_inline		6043522						
ANR	6043854	Symbol	* nt		6043522						
ANR	6043855	Symbol	a_readonly		6043522						
ANR	6043856	Symbol	pv_no_defn		6043522						
ANR	6043857	Symbol	pname -> pvalue		6043522						
ANR	6043858	Symbol	NT_1CHAR_SIZE		6043522						
ANR	6043859	Symbol	max_name_count		6043522						
ANR	6043860	Symbol	imemory_space		6043522						
ANR	6043861	Symbol	* pname		6043522						
ANR	6043862	Symbol	nidx		6043522						
ANR	6043863	Symbol	imem		6043522						
ANR	6043864	Function	names_free	133:0:4362:4561							
ANR	6043865	FunctionDef	names_free (name_table * nt)		6043864	0					
ANR	6043866	CompoundStatement		135:0:4394:4561	6043864	0					
ANR	6043867	IfStatement	if ( nt == NULL )		6043864	0					
ANR	6043868	Condition	nt == NULL	136:8:4404:4413	6043864	0	True				
ANR	6043869	EqualityExpression	nt == NULL		6043864	0		==			
ANR	6043870	Identifier	nt		6043864	0					
ANR	6043871	Identifier	NULL		6043864	1					
ANR	6043872	ReturnStatement	return ;	136:20:4416:4422	6043864	1	True				
ANR	6043873	WhileStatement	while ( nt -> sub_count > 0 )		6043864	1					
ANR	6043874	Condition	nt -> sub_count > 0	138:11:4436:4452	6043864	0	True				
ANR	6043875	RelationalExpression	nt -> sub_count > 0		6043864	0		>			
ANR	6043876	PtrMemberAccess	nt -> sub_count		6043864	0					
ANR	6043877	Identifier	nt		6043864	0					
ANR	6043878	Identifier	sub_count		6043864	1					
ANR	6043879	PrimaryExpression	0		6043864	1					
ANR	6043880	ExpressionStatement	"name_free_sub ( nt , -- ( nt -> sub_count ) , false )"	139:8:4463:4506	6043864	1	True				
ANR	6043881	CallExpression	"name_free_sub ( nt , -- ( nt -> sub_count ) , false )"		6043864	0					
ANR	6043882	Callee	name_free_sub		6043864	0					
ANR	6043883	Identifier	name_free_sub		6043864	0					
ANR	6043884	ArgumentList	nt		6043864	1					
ANR	6043885	Argument	nt		6043864	0					
ANR	6043886	Identifier	nt		6043864	0					
ANR	6043887	Argument	-- ( nt -> sub_count )		6043864	1					
ANR	6043888	UnaryExpression	-- ( nt -> sub_count )		6043864	0					
ANR	6043889	IncDec	--		6043864	0					
ANR	6043890	PtrMemberAccess	nt -> sub_count		6043864	1					
ANR	6043891	Identifier	nt		6043864	0					
ANR	6043892	Identifier	sub_count		6043864	1					
ANR	6043893	Argument	false		6043864	2					
ANR	6043894	Identifier	false		6043864	0					
ANR	6043895	ExpressionStatement	"gs_free_object ( nt -> memory , nt , ""name_init(nt)"" )"	140:4:4512:4559	6043864	2	True				
ANR	6043896	CallExpression	"gs_free_object ( nt -> memory , nt , ""name_init(nt)"" )"		6043864	0					
ANR	6043897	Callee	gs_free_object		6043864	0					
ANR	6043898	Identifier	gs_free_object		6043864	0					
ANR	6043899	ArgumentList	nt -> memory		6043864	1					
ANR	6043900	Argument	nt -> memory		6043864	0					
ANR	6043901	PtrMemberAccess	nt -> memory		6043864	0					
ANR	6043902	Identifier	nt		6043864	0					
ANR	6043903	Identifier	memory		6043864	1					
ANR	6043904	Argument	nt		6043864	1					
ANR	6043905	Identifier	nt		6043864	0					
ANR	6043906	Argument	"""name_init(nt)"""		6043864	2					
ANR	6043907	PrimaryExpression	"""name_init(nt)"""		6043864	0					
ANR	6043908	ReturnType	void		6043864	1					
ANR	6043909	Identifier	names_free		6043864	2					
ANR	6043910	ParameterList	name_table * nt		6043864	3					
ANR	6043911	Parameter	name_table * nt	134:11:4378:4391	6043864	0	True				
ANR	6043912	ParameterType	name_table *		6043864	0					
ANR	6043913	Identifier	nt		6043864	1					
ANR	6043914	CFGEntryNode	ENTRY		6043864		True				
ANR	6043915	CFGExitNode	EXIT		6043864		True				
ANR	6043916	Symbol	NULL		6043864						
ANR	6043917	Symbol	nt		6043864						
ANR	6043918	Symbol	false		6043864						
ANR	6043919	Symbol	nt -> memory		6043864						
ANR	6043920	Symbol	nt -> sub_count		6043864						
ANR	6043921	Symbol	* nt		6043864						
ANR	6043922	Function	gs_names_finalize	143:0:4564:4706							
ANR	6043923	FunctionDef	"gs_names_finalize (const gs_memory_t * cmem , void * vptr)"		6043922	0					
ANR	6043924	CompoundStatement		145:0:4631:4706	6043922	0					
ANR	6043925	ExpressionStatement	( void ) vptr	146:4:4637:4647	6043922	0	True				
ANR	6043926	CastExpression	( void ) vptr		6043922	0					
ANR	6043927	CastTarget	void		6043922	0					
ANR	6043928	Identifier	vptr		6043922	1					
ANR	6043929	ExpressionStatement	cmem -> gs_lib_ctx -> gs_name_table = NULL	147:4:4666:4704	6043922	1	True				
ANR	6043930	AssignmentExpression	cmem -> gs_lib_ctx -> gs_name_table = NULL		6043922	0		=			
ANR	6043931	PtrMemberAccess	cmem -> gs_lib_ctx -> gs_name_table		6043922	0					
ANR	6043932	PtrMemberAccess	cmem -> gs_lib_ctx		6043922	0					
ANR	6043933	Identifier	cmem		6043922	0					
ANR	6043934	Identifier	gs_lib_ctx		6043922	1					
ANR	6043935	Identifier	gs_name_table		6043922	1					
ANR	6043936	Identifier	NULL		6043922	1					
ANR	6043937	ReturnType	static void		6043922	1					
ANR	6043938	Identifier	gs_names_finalize		6043922	2					
ANR	6043939	ParameterList	"const gs_memory_t * cmem , void * vptr"		6043922	3					
ANR	6043940	Parameter	const gs_memory_t * cmem	144:18:4594:4616	6043922	0	True				
ANR	6043941	ParameterType	const gs_memory_t *		6043922	0					
ANR	6043942	Identifier	cmem		6043922	1					
ANR	6043943	Parameter	void * vptr	144:43:4619:4628	6043922	1	True				
ANR	6043944	ParameterType	void *		6043922	0					
ANR	6043945	Identifier	vptr		6043922	1					
ANR	6043946	CFGEntryNode	ENTRY		6043922		True				
ANR	6043947	CFGExitNode	EXIT		6043922		True				
ANR	6043948	Symbol	NULL		6043922						
ANR	6043949	Symbol	* cmem		6043922						
ANR	6043950	Symbol	cmem -> gs_lib_ctx		6043922						
ANR	6043951	Symbol	* cmem -> gs_lib_ctx		6043922						
ANR	6043952	Symbol	cmem -> gs_lib_ctx -> gs_name_table		6043922						
ANR	6043953	Symbol	* * cmem		6043922						
ANR	6043954	Symbol	cmem		6043922						
ANR	6043955	Symbol	vptr		6043922						
ANR	6043956	Function	names_memory	151:0:4753:4828							
ANR	6043957	FunctionDef	names_memory (const name_table * nt)		6043956	0					
ANR	6043958	CompoundStatement		153:0:4803:4828	6043956	0					
ANR	6043959	ReturnStatement	return nt -> memory ;	154:4:4809:4826	6043956	0	True				
ANR	6043960	PtrMemberAccess	nt -> memory		6043956	0					
ANR	6043961	Identifier	nt		6043956	0					
ANR	6043962	Identifier	memory		6043956	1					
ANR	6043963	ReturnType	gs_memory_t *		6043956	1					
ANR	6043964	Identifier	names_memory		6043956	2					
ANR	6043965	ParameterList	const name_table * nt		6043956	3					
ANR	6043966	Parameter	const name_table * nt	152:13:4780:4800	6043956	0	True				
ANR	6043967	ParameterType	const name_table *		6043956	0					
ANR	6043968	Identifier	nt		6043956	1					
ANR	6043969	CFGEntryNode	ENTRY		6043956		True				
ANR	6043970	CFGExitNode	EXIT		6043956		True				
ANR	6043971	Symbol	nt		6043956						
ANR	6043972	Symbol	nt -> memory		6043956						
ANR	6043973	Symbol	* nt		6043956						
ANR	6043974	Function	names_ref	161:0:5015:7348							
ANR	6043975	FunctionDef	"names_ref (name_table * nt , const byte * ptr , uint size , ref * pref , int enterflag)"		6043974	0					
ANR	6043976	CompoundStatement		163:0:5099:7348	6043974	0					
ANR	6043977	IdentifierDeclStatement	name * pname ;	164:4:5105:5116	6043974	0	True				
ANR	6043978	IdentifierDecl	* pname		6043974	0					
ANR	6043979	IdentifierDeclType	name *		6043974	0					
ANR	6043980	Identifier	pname		6043974	1					
ANR	6043981	IdentifierDeclStatement	name_string_t * pnstr ;	165:4:5122:5142	6043974	1	True				
ANR	6043982	IdentifierDecl	* pnstr		6043974	0					
ANR	6043983	IdentifierDeclType	name_string_t *		6043974	0					
ANR	6043984	Identifier	pnstr		6043974	1					
ANR	6043985	IdentifierDeclStatement	uint nidx ;	166:4:5148:5157	6043974	2	True				
ANR	6043986	IdentifierDecl	nidx		6043974	0					
ANR	6043987	IdentifierDeclType	uint		6043974	0					
ANR	6043988	Identifier	nidx		6043974	1					
ANR	6043989	IdentifierDeclStatement	uint * phash ;	167:4:5163:5174	6043974	3	True				
ANR	6043990	IdentifierDecl	* phash		6043974	0					
ANR	6043991	IdentifierDeclType	uint *		6043974	0					
ANR	6043992	Identifier	phash		6043974	1					
ANR	6043993	SwitchStatement	switch ( size )		6043974	4					
ANR	6043994	Condition	size	171:12:5284:5287	6043974	0	True				
ANR	6043995	Identifier	size		6043974	0					
ANR	6043996	CompoundStatement		9:18:190:190	6043974	1					
ANR	6043997	Label	case 0 :	172:4:5296:5302	6043974	0	True				
ANR	6043998	ExpressionStatement	nidx = name_count_to_index ( 1 )	173:8:5312:5341	6043974	1	True				
ANR	6043999	AssignmentExpression	nidx = name_count_to_index ( 1 )		6043974	0		=			
ANR	6044000	Identifier	nidx		6043974	0					
ANR	6044001	CallExpression	name_count_to_index ( 1 )		6043974	1					
ANR	6044002	Callee	name_count_to_index		6043974	0					
ANR	6044003	Identifier	name_count_to_index		6043974	0					
ANR	6044004	ArgumentList	1		6043974	1					
ANR	6044005	Argument	1		6043974	0					
ANR	6044006	PrimaryExpression	1		6043974	0					
ANR	6044007	ExpressionStatement	"pname = names_index_ptr_inline ( nt , nidx )"	174:8:5351:5391	6043974	2	True				
ANR	6044008	AssignmentExpression	"pname = names_index_ptr_inline ( nt , nidx )"		6043974	0		=			
ANR	6044009	Identifier	pname		6043974	0					
ANR	6044010	CallExpression	"names_index_ptr_inline ( nt , nidx )"		6043974	1					
ANR	6044011	Callee	names_index_ptr_inline		6043974	0					
ANR	6044012	Identifier	names_index_ptr_inline		6043974	0					
ANR	6044013	ArgumentList	nt		6043974	1					
ANR	6044014	Argument	nt		6043974	0					
ANR	6044015	Identifier	nt		6043974	0					
ANR	6044016	Argument	nidx		6043974	1					
ANR	6044017	Identifier	nidx		6043974	0					
ANR	6044018	GotoStatement	goto mkn ;	175:8:5401:5409	6043974	3	True				
ANR	6044019	Identifier	mkn		6043974	0					
ANR	6044020	Label	case 1 :	176:4:5415:5421	6043974	4	True				
ANR	6044021	IfStatement	if ( * ptr < NT_1CHAR_SIZE )		6043974	5					
ANR	6044022	Condition	* ptr < NT_1CHAR_SIZE	177:12:5435:5454	6043974	0	True				
ANR	6044023	RelationalExpression	* ptr < NT_1CHAR_SIZE		6043974	0		<			
ANR	6044024	UnaryOperationExpression	* ptr		6043974	0					
ANR	6044025	UnaryOperator	*		6043974	0					
ANR	6044026	Identifier	ptr		6043974	1					
ANR	6044027	Identifier	NT_1CHAR_SIZE		6043974	1					
ANR	6044028	CompoundStatement		16:12:371:404	6043974	1					
ANR	6044029	IdentifierDeclStatement	uint hash = * ptr + NT_1CHAR_FIRST ;	178:12:5471:5504	6043974	0	True				
ANR	6044030	IdentifierDecl	hash = * ptr + NT_1CHAR_FIRST		6043974	0					
ANR	6044031	IdentifierDeclType	uint		6043974	0					
ANR	6044032	Identifier	hash		6043974	1					
ANR	6044033	AssignmentExpression	hash = * ptr + NT_1CHAR_FIRST		6043974	2		=			
ANR	6044034	Identifier	hash		6043974	0					
ANR	6044035	AdditiveExpression	* ptr + NT_1CHAR_FIRST		6043974	1		+			
ANR	6044036	UnaryOperationExpression	* ptr		6043974	0					
ANR	6044037	UnaryOperator	*		6043974	0					
ANR	6044038	Identifier	ptr		6043974	1					
ANR	6044039	Identifier	NT_1CHAR_FIRST		6043974	1					
ANR	6044040	ExpressionStatement	nidx = name_count_to_index ( hash )	180:12:5519:5551	6043974	1	True				
ANR	6044041	AssignmentExpression	nidx = name_count_to_index ( hash )		6043974	0		=			
ANR	6044042	Identifier	nidx		6043974	0					
ANR	6044043	CallExpression	name_count_to_index ( hash )		6043974	1					
ANR	6044044	Callee	name_count_to_index		6043974	0					
ANR	6044045	Identifier	name_count_to_index		6043974	0					
ANR	6044046	ArgumentList	hash		6043974	1					
ANR	6044047	Argument	hash		6043974	0					
ANR	6044048	Identifier	hash		6043974	0					
ANR	6044049	ExpressionStatement	"pname = names_index_ptr_inline ( nt , nidx )"	181:12:5565:5605	6043974	2	True				
ANR	6044050	AssignmentExpression	"pname = names_index_ptr_inline ( nt , nidx )"		6043974	0		=			
ANR	6044051	Identifier	pname		6043974	0					
ANR	6044052	CallExpression	"names_index_ptr_inline ( nt , nidx )"		6043974	1					
ANR	6044053	Callee	names_index_ptr_inline		6043974	0					
ANR	6044054	Identifier	names_index_ptr_inline		6043974	0					
ANR	6044055	ArgumentList	nt		6043974	1					
ANR	6044056	Argument	nt		6043974	0					
ANR	6044057	Identifier	nt		6043974	0					
ANR	6044058	Argument	nidx		6043974	1					
ANR	6044059	Identifier	nidx		6043974	0					
ANR	6044060	GotoStatement	goto mkn ;	182:12:5619:5627	6043974	3	True				
ANR	6044061	Identifier	mkn		6043974	0					
ANR	6044062	Label	default :	185:4:5671:5678	6043974	6	True				
ANR	6044063	Identifier	default		6043974	0					
ANR	6044064	CompoundStatement		24:8:590:599	6043974	7					
ANR	6044065	IdentifierDeclStatement	uint hash ;	186:8:5690:5699	6043974	0	True				
ANR	6044066	IdentifierDecl	hash		6043974	0					
ANR	6044067	IdentifierDeclType	uint		6043974	0					
ANR	6044068	Identifier	hash		6043974	1					
ANR	6044069	ExpressionStatement	"NAME_HASH ( hash , hash_permutation , ptr , size )"	188:8:5710:5754	6043974	1	True				
ANR	6044070	CallExpression	"NAME_HASH ( hash , hash_permutation , ptr , size )"		6043974	0					
ANR	6044071	Callee	NAME_HASH		6043974	0					
ANR	6044072	Identifier	NAME_HASH		6043974	0					
ANR	6044073	ArgumentList	hash		6043974	1					
ANR	6044074	Argument	hash		6043974	0					
ANR	6044075	Identifier	hash		6043974	0					
ANR	6044076	Argument	hash_permutation		6043974	1					
ANR	6044077	Identifier	hash_permutation		6043974	0					
ANR	6044078	Argument	ptr		6043974	2					
ANR	6044079	Identifier	ptr		6043974	0					
ANR	6044080	Argument	size		6043974	3					
ANR	6044081	Identifier	size		6043974	0					
ANR	6044082	ExpressionStatement	phash = nt -> hash + ( hash & ( NT_HASH_SIZE - 1 ) )	189:8:5764:5810	6043974	2	True				
ANR	6044083	AssignmentExpression	phash = nt -> hash + ( hash & ( NT_HASH_SIZE - 1 ) )		6043974	0		=			
ANR	6044084	Identifier	phash		6043974	0					
ANR	6044085	AdditiveExpression	nt -> hash + ( hash & ( NT_HASH_SIZE - 1 ) )		6043974	1		+			
ANR	6044086	PtrMemberAccess	nt -> hash		6043974	0					
ANR	6044087	Identifier	nt		6043974	0					
ANR	6044088	Identifier	hash		6043974	1					
ANR	6044089	BitAndExpression	hash & ( NT_HASH_SIZE - 1 )		6043974	1		&			
ANR	6044090	Identifier	hash		6043974	0					
ANR	6044091	AdditiveExpression	NT_HASH_SIZE - 1		6043974	1		-			
ANR	6044092	Identifier	NT_HASH_SIZE		6043974	0					
ANR	6044093	PrimaryExpression	1		6043974	1					
ANR	6044094	ForStatement	"for ( nidx = * phash ; nidx != 0 ; nidx = name_next_index ( nidx , pnstr ) )"		6043974	5					
ANR	6044095	ForInit	nidx = * phash ;	193:9:5834:5847	6043974	0	True				
ANR	6044096	AssignmentExpression	nidx = * phash		6043974	0		=			
ANR	6044097	Identifier	nidx		6043974	0					
ANR	6044098	UnaryOperationExpression	* phash		6043974	1					
ANR	6044099	UnaryOperator	*		6043974	0					
ANR	6044100	Identifier	phash		6043974	1					
ANR	6044101	Condition	nidx != 0	193:24:5849:5857	6043974	1	True				
ANR	6044102	EqualityExpression	nidx != 0		6043974	0		!=			
ANR	6044103	Identifier	nidx		6043974	0					
ANR	6044104	PrimaryExpression	0		6043974	1					
ANR	6044105	AssignmentExpression	"nidx = name_next_index ( nidx , pnstr )"	194:9:5869:5903	6043974	2	True	=			
ANR	6044106	Identifier	nidx		6043974	0					
ANR	6044107	CallExpression	"name_next_index ( nidx , pnstr )"		6043974	1					
ANR	6044108	Callee	name_next_index		6043974	0					
ANR	6044109	Identifier	name_next_index		6043974	0					
ANR	6044110	ArgumentList	nidx		6043974	1					
ANR	6044111	Argument	nidx		6043974	0					
ANR	6044112	Identifier	nidx		6043974	0					
ANR	6044113	Argument	pnstr		6043974	1					
ANR	6044114	Identifier	pnstr		6043974	0					
ANR	6044115	CompoundStatement		33:10:815:815	6043974	3					
ANR	6044116	ExpressionStatement	"pnstr = names_index_string_inline ( nt , nidx )"	196:8:5925:5968	6043974	0	True				
ANR	6044117	AssignmentExpression	"pnstr = names_index_string_inline ( nt , nidx )"		6043974	0		=			
ANR	6044118	Identifier	pnstr		6043974	0					
ANR	6044119	CallExpression	"names_index_string_inline ( nt , nidx )"		6043974	1					
ANR	6044120	Callee	names_index_string_inline		6043974	0					
ANR	6044121	Identifier	names_index_string_inline		6043974	0					
ANR	6044122	ArgumentList	nt		6043974	1					
ANR	6044123	Argument	nt		6043974	0					
ANR	6044124	Identifier	nt		6043974	0					
ANR	6044125	Argument	nidx		6043974	1					
ANR	6044126	Identifier	nidx		6043974	0					
ANR	6044127	IfStatement	"if ( pnstr -> string_size == size && ! memcmp_inline ( ptr , pnstr -> string_bytes , size ) )"		6043974	1					
ANR	6044128	Condition	"pnstr -> string_size == size && ! memcmp_inline ( ptr , pnstr -> string_bytes , size )"	197:12:5982:6069	6043974	0	True				
ANR	6044129	AndExpression	"pnstr -> string_size == size && ! memcmp_inline ( ptr , pnstr -> string_bytes , size )"		6043974	0		&&			
ANR	6044130	EqualityExpression	pnstr -> string_size == size		6043974	0		==			
ANR	6044131	PtrMemberAccess	pnstr -> string_size		6043974	0					
ANR	6044132	Identifier	pnstr		6043974	0					
ANR	6044133	Identifier	string_size		6043974	1					
ANR	6044134	Identifier	size		6043974	1					
ANR	6044135	UnaryOperationExpression	"! memcmp_inline ( ptr , pnstr -> string_bytes , size )"		6043974	1					
ANR	6044136	UnaryOperator	!		6043974	0					
ANR	6044137	CallExpression	"memcmp_inline ( ptr , pnstr -> string_bytes , size )"		6043974	1					
ANR	6044138	Callee	memcmp_inline		6043974	0					
ANR	6044139	Identifier	memcmp_inline		6043974	0					
ANR	6044140	ArgumentList	ptr		6043974	1					
ANR	6044141	Argument	ptr		6043974	0					
ANR	6044142	Identifier	ptr		6043974	0					
ANR	6044143	Argument	pnstr -> string_bytes		6043974	1					
ANR	6044144	PtrMemberAccess	pnstr -> string_bytes		6043974	0					
ANR	6044145	Identifier	pnstr		6043974	0					
ANR	6044146	Identifier	string_bytes		6043974	1					
ANR	6044147	Argument	size		6043974	2					
ANR	6044148	Identifier	size		6043974	0					
ANR	6044149	CompoundStatement		37:14:985:985	6043974	1					
ANR	6044150	ExpressionStatement	"pname = name_index_ptr_inline ( nt , nidx )"	200:12:6099:6138	6043974	0	True				
ANR	6044151	AssignmentExpression	"pname = name_index_ptr_inline ( nt , nidx )"		6043974	0		=			
ANR	6044152	Identifier	pname		6043974	0					
ANR	6044153	CallExpression	"name_index_ptr_inline ( nt , nidx )"		6043974	1					
ANR	6044154	Callee	name_index_ptr_inline		6043974	0					
ANR	6044155	Identifier	name_index_ptr_inline		6043974	0					
ANR	6044156	ArgumentList	nt		6043974	1					
ANR	6044157	Argument	nt		6043974	0					
ANR	6044158	Identifier	nt		6043974	0					
ANR	6044159	Argument	nidx		6043974	1					
ANR	6044160	Identifier	nidx		6043974	0					
ANR	6044161	GotoStatement	goto mkn ;	201:12:6152:6160	6043974	1	True				
ANR	6044162	Identifier	mkn		6043974	0					
ANR	6044163	IfStatement	if ( enterflag < 0 )		6043974	6					
ANR	6044164	Condition	enterflag < 0	205:8:6242:6254	6043974	0	True				
ANR	6044165	RelationalExpression	enterflag < 0		6043974	0		<			
ANR	6044166	Identifier	enterflag		6043974	0					
ANR	6044167	PrimaryExpression	0		6043974	1					
ANR	6044168	ExpressionStatement	return_error ( gs_error_undefined )	206:8:6265:6297	6043974	1	True				
ANR	6044169	CallExpression	return_error ( gs_error_undefined )		6043974	0					
ANR	6044170	Callee	return_error		6043974	0					
ANR	6044171	Identifier	return_error		6043974	0					
ANR	6044172	ArgumentList	gs_error_undefined		6043974	1					
ANR	6044173	Argument	gs_error_undefined		6043974	0					
ANR	6044174	Identifier	gs_error_undefined		6043974	0					
ANR	6044175	IfStatement	if ( size > max_name_string )		6043974	7					
ANR	6044176	Condition	size > max_name_string	207:8:6307:6328	6043974	0	True				
ANR	6044177	RelationalExpression	size > max_name_string		6043974	0		>			
ANR	6044178	Identifier	size		6043974	0					
ANR	6044179	Identifier	max_name_string		6043974	1					
ANR	6044180	ExpressionStatement	return_error ( gs_error_limitcheck )	208:8:6339:6372	6043974	1	True				
ANR	6044181	CallExpression	return_error ( gs_error_limitcheck )		6043974	0					
ANR	6044182	Callee	return_error		6043974	0					
ANR	6044183	Identifier	return_error		6043974	0					
ANR	6044184	ArgumentList	gs_error_limitcheck		6043974	1					
ANR	6044185	Argument	gs_error_limitcheck		6043974	0					
ANR	6044186	Identifier	gs_error_limitcheck		6043974	0					
ANR	6044187	ExpressionStatement	nidx = nt -> free	209:4:6378:6393	6043974	8	True				
ANR	6044188	AssignmentExpression	nidx = nt -> free		6043974	0		=			
ANR	6044189	Identifier	nidx		6043974	0					
ANR	6044190	PtrMemberAccess	nt -> free		6043974	1					
ANR	6044191	Identifier	nt		6043974	0					
ANR	6044192	Identifier	free		6043974	1					
ANR	6044193	IfStatement	if ( nidx == 0 )		6043974	9					
ANR	6044194	Condition	nidx == 0	210:8:6403:6411	6043974	0	True				
ANR	6044195	EqualityExpression	nidx == 0		6043974	0		==			
ANR	6044196	Identifier	nidx		6043974	0					
ANR	6044197	PrimaryExpression	0		6043974	1					
ANR	6044198	CompoundStatement		49:8:1324:1353	6043974	1					
ANR	6044199	IdentifierDeclStatement	int code = name_alloc_sub ( nt ) ;	211:8:6424:6453	6043974	0	True				
ANR	6044200	IdentifierDecl	code = name_alloc_sub ( nt )		6043974	0					
ANR	6044201	IdentifierDeclType	int		6043974	0					
ANR	6044202	Identifier	code		6043974	1					
ANR	6044203	AssignmentExpression	code = name_alloc_sub ( nt )		6043974	2		=			
ANR	6044204	Identifier	code		6043974	0					
ANR	6044205	CallExpression	name_alloc_sub ( nt )		6043974	1					
ANR	6044206	Callee	name_alloc_sub		6043974	0					
ANR	6044207	Identifier	name_alloc_sub		6043974	0					
ANR	6044208	ArgumentList	nt		6043974	1					
ANR	6044209	Argument	nt		6043974	0					
ANR	6044210	Identifier	nt		6043974	0					
ANR	6044211	IfStatement	if ( code < 0 )		6043974	1					
ANR	6044212	Condition	code < 0	213:12:6468:6475	6043974	0	True				
ANR	6044213	RelationalExpression	code < 0		6043974	0		<			
ANR	6044214	Identifier	code		6043974	0					
ANR	6044215	PrimaryExpression	0		6043974	1					
ANR	6044216	ReturnStatement	return code ;	214:12:6490:6501	6043974	1	True				
ANR	6044217	Identifier	code		6043974	0					
ANR	6044218	ExpressionStatement	nidx = nt -> free	215:8:6511:6526	6043974	2	True				
ANR	6044219	AssignmentExpression	nidx = nt -> free		6043974	0		=			
ANR	6044220	Identifier	nidx		6043974	0					
ANR	6044221	PtrMemberAccess	nt -> free		6043974	1					
ANR	6044222	Identifier	nt		6043974	0					
ANR	6044223	Identifier	free		6043974	1					
ANR	6044224	ExpressionStatement	"pnstr = names_index_string_inline ( nt , nidx )"	217:4:6538:6581	6043974	10	True				
ANR	6044225	AssignmentExpression	"pnstr = names_index_string_inline ( nt , nidx )"		6043974	0		=			
ANR	6044226	Identifier	pnstr		6043974	0					
ANR	6044227	CallExpression	"names_index_string_inline ( nt , nidx )"		6043974	1					
ANR	6044228	Callee	names_index_string_inline		6043974	0					
ANR	6044229	Identifier	names_index_string_inline		6043974	0					
ANR	6044230	ArgumentList	nt		6043974	1					
ANR	6044231	Argument	nt		6043974	0					
ANR	6044232	Identifier	nt		6043974	0					
ANR	6044233	Argument	nidx		6043974	1					
ANR	6044234	Identifier	nidx		6043974	0					
ANR	6044235	IfStatement	if ( enterflag == 1 )		6043974	11					
ANR	6044236	Condition	enterflag == 1	218:8:6591:6604	6043974	0	True				
ANR	6044237	EqualityExpression	enterflag == 1		6043974	0		==			
ANR	6044238	Identifier	enterflag		6043974	0					
ANR	6044239	PrimaryExpression	1		6043974	1					
ANR	6044240	CompoundStatement		57:8:1517:1637	6043974	1					
ANR	6044241	IdentifierDeclStatement	"byte * cptr = ( byte * ) gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" ) ;"	219:8:6617:6737	6043974	0	True				
ANR	6044242	IdentifierDecl	"* cptr = ( byte * ) gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" )"		6043974	0					
ANR	6044243	IdentifierDeclType	byte *		6043974	0					
ANR	6044244	Identifier	cptr		6043974	1					
ANR	6044245	AssignmentExpression	"* cptr = ( byte * ) gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" )"		6043974	2		=			
ANR	6044246	Identifier	cptr		6043974	0					
ANR	6044247	CastExpression	"( byte * ) gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" )"		6043974	1					
ANR	6044248	CastTarget	byte *		6043974	0					
ANR	6044249	CallExpression	"gs_alloc_string ( nt -> memory , size , ""names_ref(string)"" )"		6043974	1					
ANR	6044250	Callee	gs_alloc_string		6043974	0					
ANR	6044251	Identifier	gs_alloc_string		6043974	0					
ANR	6044252	ArgumentList	nt -> memory		6043974	1					
ANR	6044253	Argument	nt -> memory		6043974	0					
ANR	6044254	PtrMemberAccess	nt -> memory		6043974	0					
ANR	6044255	Identifier	nt		6043974	0					
ANR	6044256	Identifier	memory		6043974	1					
ANR	6044257	Argument	size		6043974	1					
ANR	6044258	Identifier	size		6043974	0					
ANR	6044259	Argument	"""names_ref(string)"""		6043974	2					
ANR	6044260	PrimaryExpression	"""names_ref(string)"""		6043974	0					
ANR	6044261	IfStatement	if ( cptr == 0 )		6043974	1					
ANR	6044262	Condition	cptr == 0	222:12:6752:6760	6043974	0	True				
ANR	6044263	EqualityExpression	cptr == 0		6043974	0		==			
ANR	6044264	Identifier	cptr		6043974	0					
ANR	6044265	PrimaryExpression	0		6043974	1					
ANR	6044266	ExpressionStatement	return_error ( gs_error_VMerror )	223:12:6775:6805	6043974	1	True				
ANR	6044267	CallExpression	return_error ( gs_error_VMerror )		6043974	0					
ANR	6044268	Callee	return_error		6043974	0					
ANR	6044269	Identifier	return_error		6043974	0					
ANR	6044270	ArgumentList	gs_error_VMerror		6043974	1					
ANR	6044271	Argument	gs_error_VMerror		6043974	0					
ANR	6044272	Identifier	gs_error_VMerror		6043974	0					
ANR	6044273	ExpressionStatement	"memcpy ( cptr , ptr , size )"	224:8:6815:6838	6043974	2	True				
ANR	6044274	CallExpression	"memcpy ( cptr , ptr , size )"		6043974	0					
ANR	6044275	Callee	memcpy		6043974	0					
ANR	6044276	Identifier	memcpy		6043974	0					
ANR	6044277	ArgumentList	cptr		6043974	1					
ANR	6044278	Argument	cptr		6043974	0					
ANR	6044279	Identifier	cptr		6043974	0					
ANR	6044280	Argument	ptr		6043974	1					
ANR	6044281	Identifier	ptr		6043974	0					
ANR	6044282	Argument	size		6043974	2					
ANR	6044283	Identifier	size		6043974	0					
ANR	6044284	ExpressionStatement	pnstr -> string_bytes = cptr	225:8:6848:6874	6043974	3	True				
ANR	6044285	AssignmentExpression	pnstr -> string_bytes = cptr		6043974	0		=			
ANR	6044286	PtrMemberAccess	pnstr -> string_bytes		6043974	0					
ANR	6044287	Identifier	pnstr		6043974	0					
ANR	6044288	Identifier	string_bytes		6043974	1					
ANR	6044289	Identifier	cptr		6043974	1					
ANR	6044290	ExpressionStatement	pnstr -> foreign_string = 0	226:8:6884:6909	6043974	4	True				
ANR	6044291	AssignmentExpression	pnstr -> foreign_string = 0		6043974	0		=			
ANR	6044292	PtrMemberAccess	pnstr -> foreign_string		6043974	0					
ANR	6044293	Identifier	pnstr		6043974	0					
ANR	6044294	Identifier	foreign_string		6043974	1					
ANR	6044295	PrimaryExpression	0		6043974	1					
ANR	6044296	ElseStatement	else		6043974	0					
ANR	6044297	CompoundStatement		65:11:1822:1822	6043974	0					
ANR	6044298	ExpressionStatement	pnstr -> string_bytes = ptr	228:8:6932:6957	6043974	0	True				
ANR	6044299	AssignmentExpression	pnstr -> string_bytes = ptr		6043974	0		=			
ANR	6044300	PtrMemberAccess	pnstr -> string_bytes		6043974	0					
ANR	6044301	Identifier	pnstr		6043974	0					
ANR	6044302	Identifier	string_bytes		6043974	1					
ANR	6044303	Identifier	ptr		6043974	1					
ANR	6044304	ExpressionStatement	pnstr -> foreign_string = ( enterflag == 0 ? 1 : 0 )	229:8:6967:7015	6043974	1	True				
ANR	6044305	AssignmentExpression	pnstr -> foreign_string = ( enterflag == 0 ? 1 : 0 )		6043974	0		=			
ANR	6044306	PtrMemberAccess	pnstr -> foreign_string		6043974	0					
ANR	6044307	Identifier	pnstr		6043974	0					
ANR	6044308	Identifier	foreign_string		6043974	1					
ANR	6044309	ConditionalExpression	enterflag == 0 ? 1 : 0		6043974	1					
ANR	6044310	Condition	enterflag == 0		6043974	0					
ANR	6044311	EqualityExpression	enterflag == 0		6043974	0		==			
ANR	6044312	Identifier	enterflag		6043974	0					
ANR	6044313	PrimaryExpression	0		6043974	1					
ANR	6044314	PrimaryExpression	1		6043974	1					
ANR	6044315	PrimaryExpression	0		6043974	2					
ANR	6044316	ExpressionStatement	pnstr -> string_size = size	231:4:7027:7052	6043974	12	True				
ANR	6044317	AssignmentExpression	pnstr -> string_size = size		6043974	0		=			
ANR	6044318	PtrMemberAccess	pnstr -> string_size		6043974	0					
ANR	6044319	Identifier	pnstr		6043974	0					
ANR	6044320	Identifier	string_size		6043974	1					
ANR	6044321	Identifier	size		6043974	1					
ANR	6044322	ExpressionStatement	"pname = name_index_ptr_inline ( nt , nidx )"	232:4:7058:7097	6043974	13	True				
ANR	6044323	AssignmentExpression	"pname = name_index_ptr_inline ( nt , nidx )"		6043974	0		=			
ANR	6044324	Identifier	pname		6043974	0					
ANR	6044325	CallExpression	"name_index_ptr_inline ( nt , nidx )"		6043974	1					
ANR	6044326	Callee	name_index_ptr_inline		6043974	0					
ANR	6044327	Identifier	name_index_ptr_inline		6043974	0					
ANR	6044328	ArgumentList	nt		6043974	1					
ANR	6044329	Argument	nt		6043974	0					
ANR	6044330	Identifier	nt		6043974	0					
ANR	6044331	Argument	nidx		6043974	1					
ANR	6044332	Identifier	nidx		6043974	0					
ANR	6044333	ExpressionStatement	pname -> pvalue = pv_no_defn	233:4:7103:7129	6043974	14	True				
ANR	6044334	AssignmentExpression	pname -> pvalue = pv_no_defn		6043974	0		=			
ANR	6044335	PtrMemberAccess	pname -> pvalue		6043974	0					
ANR	6044336	Identifier	pname		6043974	0					
ANR	6044337	Identifier	pvalue		6043974	1					
ANR	6044338	Identifier	pv_no_defn		6043974	1					
ANR	6044339	ExpressionStatement	"nt -> free = name_next_index ( nidx , pnstr )"	234:4:7135:7174	6043974	15	True				
ANR	6044340	AssignmentExpression	"nt -> free = name_next_index ( nidx , pnstr )"		6043974	0		=			
ANR	6044341	PtrMemberAccess	nt -> free		6043974	0					
ANR	6044342	Identifier	nt		6043974	0					
ANR	6044343	Identifier	free		6043974	1					
ANR	6044344	CallExpression	"name_next_index ( nidx , pnstr )"		6043974	1					
ANR	6044345	Callee	name_next_index		6043974	0					
ANR	6044346	Identifier	name_next_index		6043974	0					
ANR	6044347	ArgumentList	nidx		6043974	1					
ANR	6044348	Argument	nidx		6043974	0					
ANR	6044349	Identifier	nidx		6043974	0					
ANR	6044350	Argument	pnstr		6043974	1					
ANR	6044351	Identifier	pnstr		6043974	0					
ANR	6044352	ExpressionStatement	"set_name_next_index ( nidx , pnstr , * phash )"	235:4:7180:7220	6043974	16	True				
ANR	6044353	CallExpression	"set_name_next_index ( nidx , pnstr , * phash )"		6043974	0					
ANR	6044354	Callee	set_name_next_index		6043974	0					
ANR	6044355	Identifier	set_name_next_index		6043974	0					
ANR	6044356	ArgumentList	nidx		6043974	1					
ANR	6044357	Argument	nidx		6043974	0					
ANR	6044358	Identifier	nidx		6043974	0					
ANR	6044359	Argument	pnstr		6043974	1					
ANR	6044360	Identifier	pnstr		6043974	0					
ANR	6044361	Argument	* phash		6043974	2					
ANR	6044362	UnaryOperationExpression	* phash		6043974	0					
ANR	6044363	UnaryOperator	*		6043974	0					
ANR	6044364	Identifier	phash		6043974	1					
ANR	6044365	ExpressionStatement	* phash = nidx	236:4:7226:7239	6043974	17	True				
ANR	6044366	AssignmentExpression	* phash = nidx		6043974	0		=			
ANR	6044367	UnaryOperationExpression	* phash		6043974	0					
ANR	6044368	UnaryOperator	*		6043974	0					
ANR	6044369	Identifier	phash		6043974	1					
ANR	6044370	Identifier	nidx		6043974	1					
ANR	6044371	ExpressionStatement	"if_debug_name ( ""new name"" , nt , nidx , & enterflag )"	237:4:7245:7292	6043974	18	True				
ANR	6044372	CallExpression	"if_debug_name ( ""new name"" , nt , nidx , & enterflag )"		6043974	0					
ANR	6044373	Callee	if_debug_name		6043974	0					
ANR	6044374	Identifier	if_debug_name		6043974	0					
ANR	6044375	ArgumentList	"""new name"""		6043974	1					
ANR	6044376	Argument	"""new name"""		6043974	0					
ANR	6044377	PrimaryExpression	"""new name"""		6043974	0					
ANR	6044378	Argument	nt		6043974	1					
ANR	6044379	Identifier	nt		6043974	0					
ANR	6044380	Argument	nidx		6043974	2					
ANR	6044381	Identifier	nidx		6043974	0					
ANR	6044382	Argument	& enterflag		6043974	3					
ANR	6044383	UnaryOperationExpression	& enterflag		6043974	0					
ANR	6044384	UnaryOperator	&		6043974	0					
ANR	6044385	Identifier	enterflag		6043974	1					
ANR	6044386	Label	mkn :	238:1:7295:7298	6043974	19	True				
ANR	6044387	Identifier	mkn		6043974	0					
ANR	6044388	ExpressionStatement	"make_name ( pref , nidx , pname )"	239:4:7304:7332	6043974	20	True				
ANR	6044389	CallExpression	"make_name ( pref , nidx , pname )"		6043974	0					
ANR	6044390	Callee	make_name		6043974	0					
ANR	6044391	Identifier	make_name		6043974	0					
ANR	6044392	ArgumentList	pref		6043974	1					
ANR	6044393	Argument	pref		6043974	0					
ANR	6044394	Identifier	pref		6043974	0					
ANR	6044395	Argument	nidx		6043974	1					
ANR	6044396	Identifier	nidx		6043974	0					
ANR	6044397	Argument	pname		6043974	2					
ANR	6044398	Identifier	pname		6043974	0					
ANR	6044399	ReturnStatement	return 0 ;	240:4:7338:7346	6043974	21	True				
ANR	6044400	PrimaryExpression	0		6043974	0					
ANR	6044401	ReturnType	int		6043974	1					
ANR	6044402	Identifier	names_ref		6043974	2					
ANR	6044403	ParameterList	"name_table * nt , const byte * ptr , uint size , ref * pref , int enterflag"		6043974	3					
ANR	6044404	Parameter	name_table * nt	162:10:5029:5042	6043974	0	True				
ANR	6044405	ParameterType	name_table *		6043974	0					
ANR	6044406	Identifier	nt		6043974	1					
ANR	6044407	Parameter	const byte * ptr	162:26:5045:5059	6043974	1	True				
ANR	6044408	ParameterType	const byte *		6043974	0					
ANR	6044409	Identifier	ptr		6043974	1					
ANR	6044410	Parameter	uint size	162:43:5062:5070	6043974	2	True				
ANR	6044411	ParameterType	uint		6043974	0					
ANR	6044412	Identifier	size		6043974	1					
ANR	6044413	Parameter	ref * pref	162:54:5073:5081	6043974	3	True				
ANR	6044414	ParameterType	ref *		6043974	0					
ANR	6044415	Identifier	pref		6043974	1					
ANR	6044416	Parameter	int enterflag	162:65:5084:5096	6043974	4	True				
ANR	6044417	ParameterType	int		6043974	0					
ANR	6044418	Identifier	enterflag		6043974	1					
ANR	6044419	CFGEntryNode	ENTRY		6043974		True				
ANR	6044420	CFGExitNode	EXIT		6043974		True				
ANR	6044421	Symbol	pnstr -> string_size		6043974						
ANR	6044422	Symbol	name_count_to_index		6043974						
ANR	6044423	Symbol	name_index_ptr_inline		6043974						
ANR	6044424	Symbol	* pnstr		6043974						
ANR	6044425	Symbol	code		6043974						
ANR	6044426	Symbol	cptr		6043974						
ANR	6044427	Symbol	nt		6043974						
ANR	6044428	Symbol	gs_error_undefined		6043974						
ANR	6044429	Symbol	nt -> memory		6043974						
ANR	6044430	Symbol	& enterflag		6043974						
ANR	6044431	Symbol	max_name_string		6043974						
ANR	6044432	Symbol	nt -> free		6043974						
ANR	6044433	Symbol	hash_permutation		6043974						
ANR	6044434	Symbol	pref		6043974						
ANR	6044435	Symbol	names_index_ptr_inline		6043974						
ANR	6044436	Symbol	gs_error_limitcheck		6043974						
ANR	6044437	Symbol	* ptr		6043974						
ANR	6044438	Symbol	gs_alloc_string		6043974						
ANR	6044439	Symbol	pnstr -> foreign_string		6043974						
ANR	6044440	Symbol	NT_1CHAR_FIRST		6043974						
ANR	6044441	Symbol	NT_HASH_SIZE		6043974						
ANR	6044442	Symbol	phash		6043974						
ANR	6044443	Symbol	pname		6043974						
ANR	6044444	Symbol	enterflag		6043974						
ANR	6044445	Symbol	pnstr -> string_bytes		6043974						
ANR	6044446	Symbol	name_alloc_sub		6043974						
ANR	6044447	Symbol	nt -> hash		6043974						
ANR	6044448	Symbol	memcmp_inline		6043974						
ANR	6044449	Symbol	pnstr		6043974						
ANR	6044450	Symbol	names_index_string_inline		6043974						
ANR	6044451	Symbol	ptr		6043974						
ANR	6044452	Symbol	* nt		6043974						
ANR	6044453	Symbol	name_next_index		6043974						
ANR	6044454	Symbol	gs_error_VMerror		6043974						
ANR	6044455	Symbol	* phash		6043974						
ANR	6044456	Symbol	pv_no_defn		6043974						
ANR	6044457	Symbol	size		6043974						
ANR	6044458	Symbol	pname -> pvalue		6043974						
ANR	6044459	Symbol	NT_1CHAR_SIZE		6043974						
ANR	6044460	Symbol	* pname		6043974						
ANR	6044461	Symbol	nidx		6043974						
ANR	6044462	Symbol	hash		6043974						
ANR	6044463	Function	names_string_ref	244:0:7384:7834							
ANR	6044464	FunctionDef	"names_string_ref (const name_table * nt , const ref * pnref , ref * psref)"		6044463	0					
ANR	6044465	CompoundStatement		247:0:7516:7834	6044463	0					
ANR	6044466	IdentifierDeclStatement	"const name_string_t * pnstr = names_string_inline ( nt , pnref ) ;"	248:4:7522:7581	6044463	0	True				
ANR	6044467	IdentifierDecl	"* pnstr = names_string_inline ( nt , pnref )"		6044463	0					
ANR	6044468	IdentifierDeclType	const name_string_t *		6044463	0					
ANR	6044469	Identifier	pnstr		6044463	1					
ANR	6044470	AssignmentExpression	"* pnstr = names_string_inline ( nt , pnref )"		6044463	2		=			
ANR	6044471	Identifier	pnstr		6044463	0					
ANR	6044472	CallExpression	"names_string_inline ( nt , pnref )"		6044463	1					
ANR	6044473	Callee	names_string_inline		6044463	0					
ANR	6044474	Identifier	names_string_inline		6044463	0					
ANR	6044475	ArgumentList	nt		6044463	1					
ANR	6044476	Argument	nt		6044463	0					
ANR	6044477	Identifier	nt		6044463	0					
ANR	6044478	Argument	pnref		6044463	1					
ANR	6044479	Identifier	pnref		6044463	0					
ANR	6044480	ExpressionStatement	"make_const_string ( psref , ( pnstr -> foreign_string ? avm_foreign | a_readonly : nt -> name_string_attrs ) , pnstr -> string_size , ( const byte * ) pnstr -> string_bytes )"	250:4:7588:7832	6044463	1	True				
ANR	6044481	CallExpression	"make_const_string ( psref , ( pnstr -> foreign_string ? avm_foreign | a_readonly : nt -> name_string_attrs ) , pnstr -> string_size , ( const byte * ) pnstr -> string_bytes )"		6044463	0					
ANR	6044482	Callee	make_const_string		6044463	0					
ANR	6044483	Identifier	make_const_string		6044463	0					
ANR	6044484	ArgumentList	psref		6044463	1					
ANR	6044485	Argument	psref		6044463	0					
ANR	6044486	Identifier	psref		6044463	0					
ANR	6044487	Argument	pnstr -> foreign_string ? avm_foreign | a_readonly : nt -> name_string_attrs		6044463	1					
ANR	6044488	ConditionalExpression	pnstr -> foreign_string ? avm_foreign | a_readonly : nt -> name_string_attrs		6044463	0					
ANR	6044489	Condition	pnstr -> foreign_string		6044463	0					
ANR	6044490	PtrMemberAccess	pnstr -> foreign_string		6044463	0					
ANR	6044491	Identifier	pnstr		6044463	0					
ANR	6044492	Identifier	foreign_string		6044463	1					
ANR	6044493	InclusiveOrExpression	avm_foreign | a_readonly		6044463	1		|			
ANR	6044494	Identifier	avm_foreign		6044463	0					
ANR	6044495	Identifier	a_readonly		6044463	1					
ANR	6044496	PtrMemberAccess	nt -> name_string_attrs		6044463	2					
ANR	6044497	Identifier	nt		6044463	0					
ANR	6044498	Identifier	name_string_attrs		6044463	1					
ANR	6044499	Argument	pnstr -> string_size		6044463	2					
ANR	6044500	PtrMemberAccess	pnstr -> string_size		6044463	0					
ANR	6044501	Identifier	pnstr		6044463	0					
ANR	6044502	Identifier	string_size		6044463	1					
ANR	6044503	Argument	( const byte * ) pnstr -> string_bytes		6044463	3					
ANR	6044504	CastExpression	( const byte * ) pnstr -> string_bytes		6044463	0					
ANR	6044505	CastTarget	const byte *		6044463	0					
ANR	6044506	PtrMemberAccess	pnstr -> string_bytes		6044463	1					
ANR	6044507	Identifier	pnstr		6044463	0					
ANR	6044508	Identifier	string_bytes		6044463	1					
ANR	6044509	ReturnType	void		6044463	1					
ANR	6044510	Identifier	names_string_ref		6044463	2					
ANR	6044511	ParameterList	"const name_table * nt , const ref * pnref , ref * psref"		6044463	3					
ANR	6044512	Parameter	const name_table * nt	245:17:7406:7426	6044463	0	True				
ANR	6044513	ParameterType	const name_table *		6044463	0					
ANR	6044514	Identifier	nt		6044463	1					
ANR	6044515	Parameter	const ref * pnref	245:40:7429:7445	6044463	1	True				
ANR	6044516	ParameterType	const ref *		6044463	0					
ANR	6044517	Identifier	pnref		6044463	1					
ANR	6044518	Parameter	ref * psref	246:17:7479:7489	6044463	2	True				
ANR	6044519	ParameterType	ref *		6044463	0					
ANR	6044520	Identifier	psref		6044463	1					
ANR	6044521	CFGEntryNode	ENTRY		6044463		True				
ANR	6044522	CFGExitNode	EXIT		6044463		True				
ANR	6044523	Symbol	pnstr -> string_size		6044463						
ANR	6044524	Symbol	* pnstr		6044463						
ANR	6044525	Symbol	nt		6044463						
ANR	6044526	Symbol	pnstr -> string_bytes		6044463						
ANR	6044527	Symbol	pnref		6044463						
ANR	6044528	Symbol	pnstr		6044463						
ANR	6044529	Symbol	* nt		6044463						
ANR	6044530	Symbol	a_readonly		6044463						
ANR	6044531	Symbol	psref		6044463						
ANR	6044532	Symbol	nt -> name_string_attrs		6044463						
ANR	6044533	Symbol	names_string_inline		6044463						
ANR	6044534	Symbol	avm_foreign		6044463						
ANR	6044535	Symbol	pnstr -> foreign_string		6044463						
ANR	6044536	Function	names_from_string	259:0:7917:8226							
ANR	6044537	FunctionDef	"names_from_string (name_table * nt , const ref * psref , ref * pnref)"		6044536	0					
ANR	6044538	CompoundStatement		261:0:7988:8226	6044536	0					
ANR	6044539	IdentifierDeclStatement	"int exec = r_has_attr ( psref , a_executable ) ;"	262:4:7994:8036	6044536	0	True				
ANR	6044540	IdentifierDecl	"exec = r_has_attr ( psref , a_executable )"		6044536	0					
ANR	6044541	IdentifierDeclType	int		6044536	0					
ANR	6044542	Identifier	exec		6044536	1					
ANR	6044543	AssignmentExpression	"exec = r_has_attr ( psref , a_executable )"		6044536	2		=			
ANR	6044544	Identifier	exec		6044536	0					
ANR	6044545	CallExpression	"r_has_attr ( psref , a_executable )"		6044536	1					
ANR	6044546	Callee	r_has_attr		6044536	0					
ANR	6044547	Identifier	r_has_attr		6044536	0					
ANR	6044548	ArgumentList	psref		6044536	1					
ANR	6044549	Argument	psref		6044536	0					
ANR	6044550	Identifier	psref		6044536	0					
ANR	6044551	Argument	a_executable		6044536	1					
ANR	6044552	Identifier	a_executable		6044536	0					
ANR	6044553	IdentifierDeclStatement	"int code = names_ref ( nt , psref -> value . bytes , r_size ( psref ) , pnref , 1 ) ;"	263:4:8042:8111	6044536	1	True				
ANR	6044554	IdentifierDecl	"code = names_ref ( nt , psref -> value . bytes , r_size ( psref ) , pnref , 1 )"		6044536	0					
ANR	6044555	IdentifierDeclType	int		6044536	0					
ANR	6044556	Identifier	code		6044536	1					
ANR	6044557	AssignmentExpression	"code = names_ref ( nt , psref -> value . bytes , r_size ( psref ) , pnref , 1 )"		6044536	2		=			
ANR	6044558	Identifier	code		6044536	0					
ANR	6044559	CallExpression	"names_ref ( nt , psref -> value . bytes , r_size ( psref ) , pnref , 1 )"		6044536	1					
ANR	6044560	Callee	names_ref		6044536	0					
ANR	6044561	Identifier	names_ref		6044536	0					
ANR	6044562	ArgumentList	nt		6044536	1					
ANR	6044563	Argument	nt		6044536	0					
ANR	6044564	Identifier	nt		6044536	0					
ANR	6044565	Argument	psref -> value . bytes		6044536	1					
ANR	6044566	MemberAccess	psref -> value . bytes		6044536	0					
ANR	6044567	PtrMemberAccess	psref -> value		6044536	0					
ANR	6044568	Identifier	psref		6044536	0					
ANR	6044569	Identifier	value		6044536	1					
ANR	6044570	Identifier	bytes		6044536	1					
ANR	6044571	Argument	r_size ( psref )		6044536	2					
ANR	6044572	CallExpression	r_size ( psref )		6044536	0					
ANR	6044573	Callee	r_size		6044536	0					
ANR	6044574	Identifier	r_size		6044536	0					
ANR	6044575	ArgumentList	psref		6044536	1					
ANR	6044576	Argument	psref		6044536	0					
ANR	6044577	Identifier	psref		6044536	0					
ANR	6044578	Argument	pnref		6044536	3					
ANR	6044579	Identifier	pnref		6044536	0					
ANR	6044580	Argument	1		6044536	4					
ANR	6044581	PrimaryExpression	1		6044536	0					
ANR	6044582	IfStatement	if ( code < 0 )		6044536	2					
ANR	6044583	Condition	code < 0	265:8:8122:8129	6044536	0	True				
ANR	6044584	RelationalExpression	code < 0		6044536	0		<			
ANR	6044585	Identifier	code		6044536	0					
ANR	6044586	PrimaryExpression	0		6044536	1					
ANR	6044587	ReturnStatement	return code ;	266:8:8140:8151	6044536	1	True				
ANR	6044588	Identifier	code		6044536	0					
ANR	6044589	IfStatement	if ( exec )		6044536	3					
ANR	6044590	Condition	exec	267:8:8161:8164	6044536	0	True				
ANR	6044591	Identifier	exec		6044536	0					
ANR	6044592	ExpressionStatement	"r_set_attrs ( pnref , a_executable )"	268:8:8175:8207	6044536	1	True				
ANR	6044593	CallExpression	"r_set_attrs ( pnref , a_executable )"		6044536	0					
ANR	6044594	Callee	r_set_attrs		6044536	0					
ANR	6044595	Identifier	r_set_attrs		6044536	0					
ANR	6044596	ArgumentList	pnref		6044536	1					
ANR	6044597	Argument	pnref		6044536	0					
ANR	6044598	Identifier	pnref		6044536	0					
ANR	6044599	Argument	a_executable		6044536	1					
ANR	6044600	Identifier	a_executable		6044536	0					
ANR	6044601	ReturnStatement	return code ;	269:4:8213:8224	6044536	4	True				
ANR	6044602	Identifier	code		6044536	0					
ANR	6044603	ReturnType	int		6044536	1					
ANR	6044604	Identifier	names_from_string		6044536	2					
ANR	6044605	ParameterList	"name_table * nt , const ref * psref , ref * pnref"		6044536	3					
ANR	6044606	Parameter	name_table * nt	260:18:7939:7953	6044536	0	True				
ANR	6044607	ParameterType	name_table *		6044536	0					
ANR	6044608	Identifier	nt		6044536	1					
ANR	6044609	Parameter	const ref * psref	260:35:7956:7972	6044536	1	True				
ANR	6044610	ParameterType	const ref *		6044536	0					
ANR	6044611	Identifier	psref		6044536	1					
ANR	6044612	Parameter	ref * pnref	260:54:7975:7985	6044536	2	True				
ANR	6044613	ParameterType	ref *		6044536	0					
ANR	6044614	Identifier	pnref		6044536	1					
ANR	6044615	CFGEntryNode	ENTRY		6044536		True				
ANR	6044616	CFGExitNode	EXIT		6044536		True				
ANR	6044617	Symbol	psref		6044536						
ANR	6044618	Symbol	code		6044536						
ANR	6044619	Symbol	r_has_attr		6044536						
ANR	6044620	Symbol	nt		6044536						
ANR	6044621	Symbol	psref -> value . bytes		6044536						
ANR	6044622	Symbol	names_ref		6044536						
ANR	6044623	Symbol	r_size		6044536						
ANR	6044624	Symbol	psref -> value		6044536						
ANR	6044625	Symbol	a_executable		6044536						
ANR	6044626	Symbol	pnref		6044536						
ANR	6044627	Symbol	* psref		6044536						
ANR	6044628	Symbol	exec		6044536						
ANR	6044629	Function	names_enter_string	273:0:8287:8425							
ANR	6044630	FunctionDef	"names_enter_string (name_table * nt , const char * str , ref * pref)"		6044629	0					
ANR	6044631	CompoundStatement		275:0:8356:8425	6044629	0					
ANR	6044632	ReturnStatement	"return names_ref ( nt , ( const byte * ) str , strlen ( str ) , pref , 0 ) ;"	276:4:8362:8423	6044629	0	True				
ANR	6044633	CallExpression	"names_ref ( nt , ( const byte * ) str , strlen ( str ) , pref , 0 )"		6044629	0					
ANR	6044634	Callee	names_ref		6044629	0					
ANR	6044635	Identifier	names_ref		6044629	0					
ANR	6044636	ArgumentList	nt		6044629	1					
ANR	6044637	Argument	nt		6044629	0					
ANR	6044638	Identifier	nt		6044629	0					
ANR	6044639	Argument	( const byte * ) str		6044629	1					
ANR	6044640	CastExpression	( const byte * ) str		6044629	0					
ANR	6044641	CastTarget	const byte *		6044629	0					
ANR	6044642	Identifier	str		6044629	1					
ANR	6044643	Argument	strlen ( str )		6044629	2					
ANR	6044644	CallExpression	strlen ( str )		6044629	0					
ANR	6044645	Callee	strlen		6044629	0					
ANR	6044646	Identifier	strlen		6044629	0					
ANR	6044647	ArgumentList	str		6044629	1					
ANR	6044648	Argument	str		6044629	0					
ANR	6044649	Identifier	str		6044629	0					
ANR	6044650	Argument	pref		6044629	3					
ANR	6044651	Identifier	pref		6044629	0					
ANR	6044652	Argument	0		6044629	4					
ANR	6044653	PrimaryExpression	0		6044629	0					
ANR	6044654	ReturnType	int		6044629	1					
ANR	6044655	Identifier	names_enter_string		6044629	2					
ANR	6044656	ParameterList	"name_table * nt , const char * str , ref * pref"		6044629	3					
ANR	6044657	Parameter	name_table * nt	274:19:8310:8324	6044629	0	True				
ANR	6044658	ParameterType	name_table *		6044629	0					
ANR	6044659	Identifier	nt		6044629	1					
ANR	6044660	Parameter	const char * str	274:36:8327:8341	6044629	1	True				
ANR	6044661	ParameterType	const char *		6044629	0					
ANR	6044662	Identifier	str		6044629	1					
ANR	6044663	Parameter	ref * pref	274:53:8344:8353	6044629	2	True				
ANR	6044664	ParameterType	ref *		6044629	0					
ANR	6044665	Identifier	pref		6044629	1					
ANR	6044666	CFGEntryNode	ENTRY		6044629		True				
ANR	6044667	CFGExitNode	EXIT		6044629		True				
ANR	6044668	Symbol	str		6044629						
ANR	6044669	Symbol	strlen		6044629						
ANR	6044670	Symbol	nt		6044629						
ANR	6044671	Symbol	pref		6044629						
ANR	6044672	Symbol	names_ref		6044629						
ANR	6044673	Function	names_invalidate_value_cache	280:0:8473:8588							
ANR	6044674	FunctionDef	"names_invalidate_value_cache (name_table * nt , const ref * pnref)"		6044673	0					
ANR	6044675	CompoundStatement		282:0:8543:8588	6044673	0					
ANR	6044676	ExpressionStatement	pnref -> value . pname -> pvalue = pv_other	283:4:8549:8586	6044673	0	True				
ANR	6044677	AssignmentExpression	pnref -> value . pname -> pvalue = pv_other		6044673	0		=			
ANR	6044678	PtrMemberAccess	pnref -> value . pname -> pvalue		6044673	0					
ANR	6044679	MemberAccess	pnref -> value . pname		6044673	0					
ANR	6044680	PtrMemberAccess	pnref -> value		6044673	0					
ANR	6044681	Identifier	pnref		6044673	0					
ANR	6044682	Identifier	value		6044673	1					
ANR	6044683	Identifier	pname		6044673	1					
ANR	6044684	Identifier	pvalue		6044673	1					
ANR	6044685	Identifier	pv_other		6044673	1					
ANR	6044686	ReturnType	void		6044673	1					
ANR	6044687	Identifier	names_invalidate_value_cache		6044673	2					
ANR	6044688	ParameterList	"name_table * nt , const ref * pnref"		6044673	3					
ANR	6044689	Parameter	name_table * nt	281:29:8507:8521	6044673	0	True				
ANR	6044690	ParameterType	name_table *		6044673	0					
ANR	6044691	Identifier	nt		6044673	1					
ANR	6044692	Parameter	const ref * pnref	281:46:8524:8540	6044673	1	True				
ANR	6044693	ParameterType	const ref *		6044673	0					
ANR	6044694	Identifier	pnref		6044673	1					
ANR	6044695	CFGEntryNode	ENTRY		6044673		True				
ANR	6044696	CFGExitNode	EXIT		6044673		True				
ANR	6044697	Symbol	* pnref		6044673						
ANR	6044698	Symbol	* pnref -> value		6044673						
ANR	6044699	Symbol	nt		6044673						
ANR	6044700	Symbol	pnref -> value		6044673						
ANR	6044701	Symbol	pv_other		6044673						
ANR	6044702	Symbol	* * pnref		6044673						
ANR	6044703	Symbol	* pnref -> value . pname		6044673						
ANR	6044704	Symbol	pnref -> value . pname		6044673						
ANR	6044705	Symbol	pnref		6044673						
ANR	6044706	Symbol	pnref -> value . pname -> pvalue		6044673						
ANR	6044707	Function	names_index	287:1:8633:8762							
ANR	6044708	FunctionDef	"names_index (const name_table * nt , const ref * pnref)"		6044707	0					
ANR	6044709	CompoundStatement		290:0:8718:8762	6044707	0					
ANR	6044710	ReturnStatement	"return names_index_inline ( nt , pnref ) ;"	291:4:8724:8760	6044707	0	True				
ANR	6044711	CallExpression	"names_index_inline ( nt , pnref )"		6044707	0					
ANR	6044712	Callee	names_index_inline		6044707	0					
ANR	6044713	Identifier	names_index_inline		6044707	0					
ANR	6044714	ArgumentList	nt		6044707	1					
ANR	6044715	Argument	nt		6044707	0					
ANR	6044716	Identifier	nt		6044707	0					
ANR	6044717	Argument	pnref		6044707	1					
ANR	6044718	Identifier	pnref		6044707	0					
ANR	6044719	ReturnType	undef names_index name_index_t		6044707	1					
ANR	6044720	Identifier	names_index		6044707	2					
ANR	6044721	ParameterList	"const name_table * nt , const ref * pnref"		6044707	3					
ANR	6044722	Parameter	const name_table * nt	289:12:8676:8696	6044707	0	True				
ANR	6044723	ParameterType	const name_table *		6044707	0					
ANR	6044724	Identifier	nt		6044707	1					
ANR	6044725	Parameter	const ref * pnref	289:35:8699:8715	6044707	1	True				
ANR	6044726	ParameterType	const ref *		6044707	0					
ANR	6044727	Identifier	pnref		6044707	1					
ANR	6044728	CFGEntryNode	ENTRY		6044707		True				
ANR	6044729	CFGExitNode	EXIT		6044707		True				
ANR	6044730	Symbol	nt		6044707						
ANR	6044731	Symbol	names_index_inline		6044707						
ANR	6044732	Symbol	pnref		6044707						
ANR	6044733	Function	names_index_ref	293:0:8764:8889							
ANR	6044734	FunctionDef	"names_index_ref (const name_table * nt , name_index_t index , ref * pnref)"		6044733	0					
ANR	6044735	CompoundStatement		295:0:8841:8889	6044733	0					
ANR	6044736	ExpressionStatement	"names_index_ref_inline ( nt , index , pnref )"	296:4:8847:8887	6044733	0	True				
ANR	6044737	CallExpression	"names_index_ref_inline ( nt , index , pnref )"		6044733	0					
ANR	6044738	Callee	names_index_ref_inline		6044733	0					
ANR	6044739	Identifier	names_index_ref_inline		6044733	0					
ANR	6044740	ArgumentList	nt		6044733	1					
ANR	6044741	Argument	nt		6044733	0					
ANR	6044742	Identifier	nt		6044733	0					
ANR	6044743	Argument	index		6044733	1					
ANR	6044744	Identifier	index		6044733	0					
ANR	6044745	Argument	pnref		6044733	2					
ANR	6044746	Identifier	pnref		6044733	0					
ANR	6044747	ReturnType	void		6044733	1					
ANR	6044748	Identifier	names_index_ref		6044733	2					
ANR	6044749	ParameterList	"const name_table * nt , name_index_t index , ref * pnref"		6044733	3					
ANR	6044750	Parameter	const name_table * nt	294:16:8785:8805	6044733	0	True				
ANR	6044751	ParameterType	const name_table *		6044733	0					
ANR	6044752	Identifier	nt		6044733	1					
ANR	6044753	Parameter	name_index_t index	294:39:8808:8825	6044733	1	True				
ANR	6044754	ParameterType	name_index_t		6044733	0					
ANR	6044755	Identifier	index		6044733	1					
ANR	6044756	Parameter	ref * pnref	294:59:8828:8838	6044733	2	True				
ANR	6044757	ParameterType	ref *		6044733	0					
ANR	6044758	Identifier	pnref		6044733	1					
ANR	6044759	CFGEntryNode	ENTRY		6044733		True				
ANR	6044760	CFGExitNode	EXIT		6044733		True				
ANR	6044761	Symbol	nt		6044733						
ANR	6044762	Symbol	index		6044733						
ANR	6044763	Symbol	pnref		6044733						
ANR	6044764	Function	names_index_ptr	298:0:8891:9005							
ANR	6044765	FunctionDef	"names_index_ptr (const name_table * nt , name_index_t index)"		6044764	0					
ANR	6044766	CompoundStatement		300:0:8957:9005	6044764	0					
ANR	6044767	ReturnStatement	"return names_index_ptr_inline ( nt , index ) ;"	301:4:8963:9003	6044764	0	True				
ANR	6044768	CallExpression	"names_index_ptr_inline ( nt , index )"		6044764	0					
ANR	6044769	Callee	names_index_ptr_inline		6044764	0					
ANR	6044770	Identifier	names_index_ptr_inline		6044764	0					
ANR	6044771	ArgumentList	nt		6044764	1					
ANR	6044772	Argument	nt		6044764	0					
ANR	6044773	Identifier	nt		6044764	0					
ANR	6044774	Argument	index		6044764	1					
ANR	6044775	Identifier	index		6044764	0					
ANR	6044776	ReturnType	name *		6044764	1					
ANR	6044777	Identifier	names_index_ptr		6044764	2					
ANR	6044778	ParameterList	"const name_table * nt , name_index_t index"		6044764	3					
ANR	6044779	Parameter	const name_table * nt	299:16:8914:8934	6044764	0	True				
ANR	6044780	ParameterType	const name_table *		6044764	0					
ANR	6044781	Identifier	nt		6044764	1					
ANR	6044782	Parameter	name_index_t index	299:39:8937:8954	6044764	1	True				
ANR	6044783	ParameterType	name_index_t		6044764	0					
ANR	6044784	Identifier	index		6044764	1					
ANR	6044785	CFGEntryNode	ENTRY		6044764		True				
ANR	6044786	CFGExitNode	EXIT		6044764		True				
ANR	6044787	Symbol	nt		6044764						
ANR	6044788	Symbol	names_index_ptr_inline		6044764						
ANR	6044789	Symbol	index		6044764						
ANR	6044790	Function	names_next_valid_index	307:0:9131:9796							
ANR	6044791	FunctionDef	"names_next_valid_index (name_table * nt , name_index_t nidx)"		6044790	0					
ANR	6044792	CompoundStatement		309:0:9203:9796	6044790	0					
ANR	6044793	IdentifierDeclStatement	const name_string_sub_table_t * ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings ;	310:4:9209:9296	6044790	0	True				
ANR	6044794	IdentifierDecl	* ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings		6044790	0					
ANR	6044795	IdentifierDeclType	const name_string_sub_table_t *		6044790	0					
ANR	6044796	Identifier	ssub		6044790	1					
ANR	6044797	AssignmentExpression	* ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings		6044790	2		=			
ANR	6044798	Identifier	ssub		6044790	0					
ANR	6044799	MemberAccess	nt -> sub [ nidx >> nt_log2_sub_size ] . strings		6044790	1					
ANR	6044800	ArrayIndexing	nt -> sub [ nidx >> nt_log2_sub_size ]		6044790	0					
ANR	6044801	PtrMemberAccess	nt -> sub		6044790	0					
ANR	6044802	Identifier	nt		6044790	0					
ANR	6044803	Identifier	sub		6044790	1					
ANR	6044804	ShiftExpression	nidx >> nt_log2_sub_size		6044790	1		>>			
ANR	6044805	Identifier	nidx		6044790	0					
ANR	6044806	Identifier	nt_log2_sub_size		6044790	1					
ANR	6044807	Identifier	strings		6044790	1					
ANR	6044808	IdentifierDeclStatement	const name_string_t * pnstr ;	312:4:9302:9328	6044790	1	True				
ANR	6044809	IdentifierDecl	* pnstr		6044790	0					
ANR	6044810	IdentifierDeclType	const name_string_t *		6044790	0					
ANR	6044811	Identifier	pnstr		6044790	1					
ANR	6044812	DoStatement	do		6044790	2					
ANR	6044813	CompoundStatement		6:7:134:134	6044790	0					
ANR	6044814	ExpressionStatement	++ nidx	315:8:9348:9354	6044790	0	True				
ANR	6044815	UnaryExpression	++ nidx		6044790	0					
ANR	6044816	IncDec	++		6044790	0					
ANR	6044817	Identifier	nidx		6044790	1					
ANR	6044818	IfStatement	if ( ( nidx & nt_sub_index_mask ) == 0 )		6044790	1					
ANR	6044819	Condition	( nidx & nt_sub_index_mask ) == 0	316:12:9368:9398	6044790	0	True				
ANR	6044820	EqualityExpression	( nidx & nt_sub_index_mask ) == 0		6044790	0		==			
ANR	6044821	BitAndExpression	nidx & nt_sub_index_mask		6044790	0		&			
ANR	6044822	Identifier	nidx		6044790	0					
ANR	6044823	Identifier	nt_sub_index_mask		6044790	1					
ANR	6044824	PrimaryExpression	0		6044790	1					
ANR	6044825	ForStatement	for ( ; ; nidx += nt_sub_size )		6044790	1					
ANR	6044826	AssignmentExpression	nidx += nt_sub_size	317:20:9421:9439	6044790	0	True	+=			
ANR	6044827	Identifier	nidx		6044790	0					
ANR	6044828	Identifier	nt_sub_size		6044790	1					
ANR	6044829	CompoundStatement		9:41:238:238	6044790	1					
ANR	6044830	IfStatement	if ( ( nidx >> nt_log2_sub_size ) >= nt -> sub_count )		6044790	0					
ANR	6044831	Condition	( nidx >> nt_log2_sub_size ) >= nt -> sub_count	318:20:9464:9506	6044790	0	True				
ANR	6044832	RelationalExpression	( nidx >> nt_log2_sub_size ) >= nt -> sub_count		6044790	0		>=			
ANR	6044833	ShiftExpression	nidx >> nt_log2_sub_size		6044790	0		>>			
ANR	6044834	Identifier	nidx		6044790	0					
ANR	6044835	Identifier	nt_log2_sub_size		6044790	1					
ANR	6044836	PtrMemberAccess	nt -> sub_count		6044790	1					
ANR	6044837	Identifier	nt		6044790	0					
ANR	6044838	Identifier	sub_count		6044790	1					
ANR	6044839	ReturnStatement	return 0 ;	319:20:9529:9537	6044790	1	True				
ANR	6044840	PrimaryExpression	0		6044790	0					
ANR	6044841	ExpressionStatement	ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings	320:16:9555:9603	6044790	1	True				
ANR	6044842	AssignmentExpression	ssub = nt -> sub [ nidx >> nt_log2_sub_size ] . strings		6044790	0		=			
ANR	6044843	Identifier	ssub		6044790	0					
ANR	6044844	MemberAccess	nt -> sub [ nidx >> nt_log2_sub_size ] . strings		6044790	1					
ANR	6044845	ArrayIndexing	nt -> sub [ nidx >> nt_log2_sub_size ]		6044790	0					
ANR	6044846	PtrMemberAccess	nt -> sub		6044790	0					
ANR	6044847	Identifier	nt		6044790	0					
ANR	6044848	Identifier	sub		6044790	1					
ANR	6044849	ShiftExpression	nidx >> nt_log2_sub_size		6044790	1		>>			
ANR	6044850	Identifier	nidx		6044790	0					
ANR	6044851	Identifier	nt_log2_sub_size		6044790	1					
ANR	6044852	Identifier	strings		6044790	1					
ANR	6044853	IfStatement	if ( ssub != 0 )		6044790	2					
ANR	6044854	Condition	ssub != 0	321:20:9625:9633	6044790	0	True				
ANR	6044855	EqualityExpression	ssub != 0		6044790	0		!=			
ANR	6044856	Identifier	ssub		6044790	0					
ANR	6044857	PrimaryExpression	0		6044790	1					
ANR	6044858	BreakStatement	break ;	322:20:9656:9661	6044790	1	True				
ANR	6044859	ExpressionStatement	pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ]	324:8:9685:9733	6044790	2	True				
ANR	6044860	AssignmentExpression	pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ]		6044790	0		=			
ANR	6044861	Identifier	pnstr		6044790	0					
ANR	6044862	UnaryOperationExpression	& ssub -> strings [ nidx & nt_sub_index_mask ]		6044790	1					
ANR	6044863	UnaryOperator	&		6044790	0					
ANR	6044864	ArrayIndexing	ssub -> strings [ nidx & nt_sub_index_mask ]		6044790	1					
ANR	6044865	PtrMemberAccess	ssub -> strings		6044790	0					
ANR	6044866	Identifier	ssub		6044790	0					
ANR	6044867	Identifier	strings		6044790	1					
ANR	6044868	BitAndExpression	nidx & nt_sub_index_mask		6044790	1		&			
ANR	6044869	Identifier	nidx		6044790	0					
ANR	6044870	Identifier	nt_sub_index_mask		6044790	1					
ANR	6044871	Condition	pnstr -> string_bytes == 0	326:11:9752:9775	6044790	1	True				
ANR	6044872	EqualityExpression	pnstr -> string_bytes == 0		6044790	0		==			
ANR	6044873	PtrMemberAccess	pnstr -> string_bytes		6044790	0					
ANR	6044874	Identifier	pnstr		6044790	0					
ANR	6044875	Identifier	string_bytes		6044790	1					
ANR	6044876	PrimaryExpression	0		6044790	1					
ANR	6044877	ReturnStatement	return nidx ;	327:4:9783:9794	6044790	3	True				
ANR	6044878	Identifier	nidx		6044790	0					
ANR	6044879	ReturnType	name_index_t		6044790	1					
ANR	6044880	Identifier	names_next_valid_index		6044790	2					
ANR	6044881	ParameterList	"name_table * nt , name_index_t nidx"		6044790	3					
ANR	6044882	Parameter	name_table * nt	308:23:9167:9181	6044790	0	True				
ANR	6044883	ParameterType	name_table *		6044790	0					
ANR	6044884	Identifier	nt		6044790	1					
ANR	6044885	Parameter	name_index_t nidx	308:40:9184:9200	6044790	1	True				
ANR	6044886	ParameterType	name_index_t		6044790	0					
ANR	6044887	Identifier	nidx		6044790	1					
ANR	6044888	CFGEntryNode	ENTRY		6044790		True				
ANR	6044889	CFGExitNode	EXIT		6044790		True				
ANR	6044890	InfiniteForNode	true		6044790		True				
ANR	6044891	Symbol	* nt_log2_sub_size		6044790						
ANR	6044892	Symbol	* pnstr		6044790						
ANR	6044893	Symbol	nt_sub_size		6044790						
ANR	6044894	Symbol	ssub -> strings		6044790						
ANR	6044895	Symbol	nt		6044790						
ANR	6044896	Symbol	* nidx		6044790						
ANR	6044897	Symbol	nt -> sub [ nidx >> nt_log2_sub_size ] . strings		6044790						
ANR	6044898	Symbol	* ssub		6044790						
ANR	6044899	Symbol	pnstr -> string_bytes		6044790						
ANR	6044900	Symbol	pnstr		6044790						
ANR	6044901	Symbol	* nt		6044790						
ANR	6044902	Symbol	nt -> sub		6044790						
ANR	6044903	Symbol	* * nt		6044790						
ANR	6044904	Symbol	nt_log2_sub_size		6044790						
ANR	6044905	Symbol	nt -> sub_count		6044790						
ANR	6044906	Symbol	ssub		6044790						
ANR	6044907	Symbol	* nt -> sub		6044790						
ANR	6044908	Symbol	nt_sub_index_mask		6044790						
ANR	6044909	Symbol	nidx		6044790						
ANR	6044910	Function	names_unmark_all	333:0:9905:10394							
ANR	6044911	FunctionDef	names_unmark_all (name_table * nt)		6044910	0					
ANR	6044912	CompoundStatement		335:0:9944:10394	6044910	0					
ANR	6044913	IdentifierDeclStatement	uint si ;	336:4:9950:9957	6044910	0	True				
ANR	6044914	IdentifierDecl	si		6044910	0					
ANR	6044915	IdentifierDeclType	uint		6044910	0					
ANR	6044916	Identifier	si		6044910	1					
ANR	6044917	IdentifierDeclStatement	name_string_sub_table_t * ssub ;	337:4:9963:9992	6044910	1	True				
ANR	6044918	IdentifierDecl	* ssub		6044910	0					
ANR	6044919	IdentifierDeclType	name_string_sub_table_t *		6044910	0					
ANR	6044920	Identifier	ssub		6044910	1					
ANR	6044921	ForStatement	for ( si = 0 ; si < nt -> sub_count ; ++ si )		6044910	2					
ANR	6044922	ForInit	si = 0 ;	339:9:10004:10010	6044910	0	True				
ANR	6044923	AssignmentExpression	si = 0		6044910	0		=			
ANR	6044924	Identifier	si		6044910	0					
ANR	6044925	PrimaryExpression	0		6044910	1					
ANR	6044926	Condition	si < nt -> sub_count	339:17:10012:10029	6044910	1	True				
ANR	6044927	RelationalExpression	si < nt -> sub_count		6044910	0		<			
ANR	6044928	Identifier	si		6044910	0					
ANR	6044929	PtrMemberAccess	nt -> sub_count		6044910	1					
ANR	6044930	Identifier	nt		6044910	0					
ANR	6044931	Identifier	sub_count		6044910	1					
ANR	6044932	UnaryExpression	++ si	339:37:10032:10035	6044910	2	True				
ANR	6044933	IncDec	++		6044910	0					
ANR	6044934	Identifier	si		6044910	1					
ANR	6044935	IfStatement	if ( ( ssub = nt -> sub [ si ] . strings ) != 0 )		6044910	3					
ANR	6044936	Condition	( ssub = nt -> sub [ si ] . strings ) != 0	340:12:10050:10082	6044910	0	True				
ANR	6044937	EqualityExpression	( ssub = nt -> sub [ si ] . strings ) != 0		6044910	0		!=			
ANR	6044938	AssignmentExpression	ssub = nt -> sub [ si ] . strings		6044910	0		=			
ANR	6044939	Identifier	ssub		6044910	0					
ANR	6044940	MemberAccess	nt -> sub [ si ] . strings		6044910	1					
ANR	6044941	ArrayIndexing	nt -> sub [ si ]		6044910	0					
ANR	6044942	PtrMemberAccess	nt -> sub		6044910	0					
ANR	6044943	Identifier	nt		6044910	0					
ANR	6044944	Identifier	sub		6044910	1					
ANR	6044945	Identifier	si		6044910	1					
ANR	6044946	Identifier	strings		6044910	1					
ANR	6044947	PrimaryExpression	0		6044910	1					
ANR	6044948	CompoundStatement		7:12:154:160	6044910	1					
ANR	6044949	IdentifierDeclStatement	uint i ;	341:12:10099:10105	6044910	0	True				
ANR	6044950	IdentifierDecl	i		6044910	0					
ANR	6044951	IdentifierDeclType	uint		6044910	0					
ANR	6044952	Identifier	i		6044910	1					
ANR	6044953	ForStatement	for ( i = 0 ; i < nt_sub_size ; ++ i )		6044910	1					
ANR	6044954	ForInit	i = 0 ;	344:17:10199:10204	6044910	0	True				
ANR	6044955	AssignmentExpression	i = 0		6044910	0		=			
ANR	6044956	Identifier	i		6044910	0					
ANR	6044957	PrimaryExpression	0		6044910	1					
ANR	6044958	Condition	i < nt_sub_size	344:24:10206:10220	6044910	1	True				
ANR	6044959	RelationalExpression	i < nt_sub_size		6044910	0		<			
ANR	6044960	Identifier	i		6044910	0					
ANR	6044961	Identifier	nt_sub_size		6044910	1					
ANR	6044962	UnaryExpression	++ i	344:41:10223:10225	6044910	2	True				
ANR	6044963	IncDec	++		6044910	0					
ANR	6044964	Identifier	i		6044910	1					
ANR	6044965	IfStatement	if ( name_index_to_count ( ( si << nt_log2_sub_size ) + i ) >= nt -> perm_count )		6044910	3					
ANR	6044966	Condition	name_index_to_count ( ( si << nt_log2_sub_size ) + i ) >= nt -> perm_count	345:20:10248:10334	6044910	0	True				
ANR	6044967	RelationalExpression	name_index_to_count ( ( si << nt_log2_sub_size ) + i ) >= nt -> perm_count		6044910	0		>=			
ANR	6044968	CallExpression	name_index_to_count ( ( si << nt_log2_sub_size ) + i )		6044910	0					
ANR	6044969	Callee	name_index_to_count		6044910	0					
ANR	6044970	Identifier	name_index_to_count		6044910	0					
ANR	6044971	ArgumentList	( si << nt_log2_sub_size ) + i		6044910	1					
ANR	6044972	Argument	( si << nt_log2_sub_size ) + i		6044910	0					
ANR	6044973	AdditiveExpression	( si << nt_log2_sub_size ) + i		6044910	0		+			
ANR	6044974	ShiftExpression	si << nt_log2_sub_size		6044910	0		<<			
ANR	6044975	Identifier	si		6044910	0					
ANR	6044976	Identifier	nt_log2_sub_size		6044910	1					
ANR	6044977	Identifier	i		6044910	1					
ANR	6044978	PtrMemberAccess	nt -> perm_count		6044910	1					
ANR	6044979	Identifier	nt		6044910	0					
ANR	6044980	Identifier	perm_count		6044910	1					
ANR	6044981	ExpressionStatement	ssub -> strings [ i ] . mark = 0	347:20:10357:10382	6044910	1	True				
ANR	6044982	AssignmentExpression	ssub -> strings [ i ] . mark = 0		6044910	0		=			
ANR	6044983	MemberAccess	ssub -> strings [ i ] . mark		6044910	0					
ANR	6044984	ArrayIndexing	ssub -> strings [ i ]		6044910	0					
ANR	6044985	PtrMemberAccess	ssub -> strings		6044910	0					
ANR	6044986	Identifier	ssub		6044910	0					
ANR	6044987	Identifier	strings		6044910	1					
ANR	6044988	Identifier	i		6044910	1					
ANR	6044989	Identifier	mark		6044910	1					
ANR	6044990	PrimaryExpression	0		6044910	1					
ANR	6044991	ReturnType	void		6044910	1					
ANR	6044992	Identifier	names_unmark_all		6044910	2					
ANR	6044993	ParameterList	name_table * nt		6044910	3					
ANR	6044994	Parameter	name_table * nt	334:17:9927:9941	6044910	0	True				
ANR	6044995	ParameterType	name_table *		6044910	0					
ANR	6044996	Identifier	nt		6044910	1					
ANR	6044997	CFGEntryNode	ENTRY		6044910		True				
ANR	6044998	CFGExitNode	EXIT		6044910		True				
ANR	6044999	Symbol	nt -> sub [ si ] . strings		6044910						
ANR	6045000	Symbol	nt_sub_size		6044910						
ANR	6045001	Symbol	* * ssub		6044910						
ANR	6045002	Symbol	ssub -> strings		6044910						
ANR	6045003	Symbol	nt		6044910						
ANR	6045004	Symbol	* ssub		6044910						
ANR	6045005	Symbol	i		6044910						
ANR	6045006	Symbol	* ssub -> strings		6044910						
ANR	6045007	Symbol	* nt		6044910						
ANR	6045008	Symbol	* * nt		6044910						
ANR	6045009	Symbol	nt -> sub		6044910						
ANR	6045010	Symbol	name_index_to_count		6044910						
ANR	6045011	Symbol	* i		6044910						
ANR	6045012	Symbol	si		6044910						
ANR	6045013	Symbol	nt_log2_sub_size		6044910						
ANR	6045014	Symbol	ssub -> strings [ i ] . mark		6044910						
ANR	6045015	Symbol	nt -> sub_count		6044910						
ANR	6045016	Symbol	ssub		6044910						
ANR	6045017	Symbol	* nt -> sub		6044910						
ANR	6045018	Symbol	nt -> perm_count		6044910						
ANR	6045019	Symbol	* si		6044910						
ANR	6045020	Function	names_mark_index	353:0:10519:10725							
ANR	6045021	FunctionDef	"names_mark_index (name_table * nt , name_index_t nidx)"		6045020	0					
ANR	6045022	CompoundStatement		355:0:10577:10725	6045020	0					
ANR	6045023	IdentifierDeclStatement	"name_string_t * pnstr = names_index_string_inline ( nt , nidx ) ;"	356:4:10583:10641	6045020	0	True				
ANR	6045024	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , nidx )"		6045020	0					
ANR	6045025	IdentifierDeclType	name_string_t *		6045020	0					
ANR	6045026	Identifier	pnstr		6045020	1					
ANR	6045027	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , nidx )"		6045020	2		=			
ANR	6045028	Identifier	pnstr		6045020	0					
ANR	6045029	CallExpression	"names_index_string_inline ( nt , nidx )"		6045020	1					
ANR	6045030	Callee	names_index_string_inline		6045020	0					
ANR	6045031	Identifier	names_index_string_inline		6045020	0					
ANR	6045032	ArgumentList	nt		6045020	1					
ANR	6045033	Argument	nt		6045020	0					
ANR	6045034	Identifier	nt		6045020	0					
ANR	6045035	Argument	nidx		6045020	1					
ANR	6045036	Identifier	nidx		6045020	0					
ANR	6045037	IfStatement	if ( pnstr -> mark )		6045020	1					
ANR	6045038	Condition	pnstr -> mark	358:8:10652:10662	6045020	0	True				
ANR	6045039	PtrMemberAccess	pnstr -> mark		6045020	0					
ANR	6045040	Identifier	pnstr		6045020	0					
ANR	6045041	Identifier	mark		6045020	1					
ANR	6045042	ReturnStatement	return false ;	359:8:10673:10685	6045020	1	True				
ANR	6045043	Identifier	false		6045020	0					
ANR	6045044	ExpressionStatement	pnstr -> mark = 1	360:4:10691:10706	6045020	2	True				
ANR	6045045	AssignmentExpression	pnstr -> mark = 1		6045020	0		=			
ANR	6045046	PtrMemberAccess	pnstr -> mark		6045020	0					
ANR	6045047	Identifier	pnstr		6045020	0					
ANR	6045048	Identifier	mark		6045020	1					
ANR	6045049	PrimaryExpression	1		6045020	1					
ANR	6045050	ReturnStatement	return true ;	361:4:10712:10723	6045020	3	True				
ANR	6045051	Identifier	true		6045020	0					
ANR	6045052	ReturnType	bool		6045020	1					
ANR	6045053	Identifier	names_mark_index		6045020	2					
ANR	6045054	ParameterList	"name_table * nt , name_index_t nidx"		6045020	3					
ANR	6045055	Parameter	name_table * nt	354:17:10541:10555	6045020	0	True				
ANR	6045056	ParameterType	name_table *		6045020	0					
ANR	6045057	Identifier	nt		6045020	1					
ANR	6045058	Parameter	name_index_t nidx	354:34:10558:10574	6045020	1	True				
ANR	6045059	ParameterType	name_index_t		6045020	0					
ANR	6045060	Identifier	nidx		6045020	1					
ANR	6045061	CFGEntryNode	ENTRY		6045020		True				
ANR	6045062	CFGExitNode	EXIT		6045020		True				
ANR	6045063	Symbol	* pnstr		6045020						
ANR	6045064	Symbol	nt		6045020						
ANR	6045065	Symbol	false		6045020						
ANR	6045066	Symbol	true		6045020						
ANR	6045067	Symbol	pnstr -> mark		6045020						
ANR	6045068	Symbol	nidx		6045020						
ANR	6045069	Symbol	pnstr		6045020						
ANR	6045070	Symbol	names_index_string_inline		6045020						
ANR	6045071	Function	names_ref_sub_table	366:0:10857:11263							
ANR	6045072	FunctionDef	"names_ref_sub_table (name_table * nt , const ref * pnref)"		6045071	0					
ANR	6045073	CompoundStatement		368:0:10938:11263	6045071	0					
ANR	6045074	ReturnStatement	return pnref -> value . pname - ( r_size ( pnref ) & nt_sub_index_mask ) ;	373:4:11198:11261	6045071	0	True				
ANR	6045075	AdditiveExpression	pnref -> value . pname - ( r_size ( pnref ) & nt_sub_index_mask )		6045071	0		-			
ANR	6045076	MemberAccess	pnref -> value . pname		6045071	0					
ANR	6045077	PtrMemberAccess	pnref -> value		6045071	0					
ANR	6045078	Identifier	pnref		6045071	0					
ANR	6045079	Identifier	value		6045071	1					
ANR	6045080	Identifier	pname		6045071	1					
ANR	6045081	BitAndExpression	r_size ( pnref ) & nt_sub_index_mask		6045071	1		&			
ANR	6045082	CallExpression	r_size ( pnref )		6045071	0					
ANR	6045083	Callee	r_size		6045071	0					
ANR	6045084	Identifier	r_size		6045071	0					
ANR	6045085	ArgumentList	pnref		6045071	1					
ANR	6045086	Argument	pnref		6045071	0					
ANR	6045087	Identifier	pnref		6045071	0					
ANR	6045088	Identifier	nt_sub_index_mask		6045071	1					
ANR	6045089	ReturnType	void *		6045071	1					
ANR	6045090	Identifier	names_ref_sub_table		6045071	2					
ANR	6045091	ParameterList	"name_table * nt , const ref * pnref"		6045071	3					
ANR	6045092	Parameter	name_table * nt	367:20:10902:10916	6045071	0	True				
ANR	6045093	ParameterType	name_table *		6045071	0					
ANR	6045094	Identifier	nt		6045071	1					
ANR	6045095	Parameter	const ref * pnref	367:37:10919:10935	6045071	1	True				
ANR	6045096	ParameterType	const ref *		6045071	0					
ANR	6045097	Identifier	pnref		6045071	1					
ANR	6045098	CFGEntryNode	ENTRY		6045071		True				
ANR	6045099	CFGExitNode	EXIT		6045071		True				
ANR	6045100	Symbol	* pnref		6045071						
ANR	6045101	Symbol	nt		6045071						
ANR	6045102	Symbol	pnref -> value		6045071						
ANR	6045103	Symbol	r_size		6045071						
ANR	6045104	Symbol	pnref -> value . pname		6045071						
ANR	6045105	Symbol	pnref		6045071						
ANR	6045106	Symbol	nt_sub_index_mask		6045071						
ANR	6045107	Function	names_index_sub_table	375:0:11265:11404							
ANR	6045108	FunctionDef	"names_index_sub_table (name_table * nt , name_index_t index)"		6045107	0					
ANR	6045109	CompoundStatement		377:0:11349:11404	6045107	0					
ANR	6045110	ReturnStatement	return nt -> sub [ index >> nt_log2_sub_size ] . names ;	378:4:11355:11402	6045107	0	True				
ANR	6045111	MemberAccess	nt -> sub [ index >> nt_log2_sub_size ] . names		6045107	0					
ANR	6045112	ArrayIndexing	nt -> sub [ index >> nt_log2_sub_size ]		6045107	0					
ANR	6045113	PtrMemberAccess	nt -> sub		6045107	0					
ANR	6045114	Identifier	nt		6045107	0					
ANR	6045115	Identifier	sub		6045107	1					
ANR	6045116	ShiftExpression	index >> nt_log2_sub_size		6045107	1		>>			
ANR	6045117	Identifier	index		6045107	0					
ANR	6045118	Identifier	nt_log2_sub_size		6045107	1					
ANR	6045119	Identifier	names		6045107	1					
ANR	6045120	ReturnType	void *		6045107	1					
ANR	6045121	Identifier	names_index_sub_table		6045107	2					
ANR	6045122	ParameterList	"name_table * nt , name_index_t index"		6045107	3					
ANR	6045123	Parameter	name_table * nt	376:22:11312:11326	6045107	0	True				
ANR	6045124	ParameterType	name_table *		6045107	0					
ANR	6045125	Identifier	nt		6045107	1					
ANR	6045126	Parameter	name_index_t index	376:39:11329:11346	6045107	1	True				
ANR	6045127	ParameterType	name_index_t		6045107	0					
ANR	6045128	Identifier	index		6045107	1					
ANR	6045129	CFGEntryNode	ENTRY		6045107		True				
ANR	6045130	CFGExitNode	EXIT		6045107		True				
ANR	6045131	Symbol	* * nt		6045107						
ANR	6045132	Symbol	nt -> sub		6045107						
ANR	6045133	Symbol	* nt_log2_sub_size		6045107						
ANR	6045134	Symbol	nt		6045107						
ANR	6045135	Symbol	nt -> sub [ index >> nt_log2_sub_size ] . names		6045107						
ANR	6045136	Symbol	* index		6045107						
ANR	6045137	Symbol	index		6045107						
ANR	6045138	Symbol	nt_log2_sub_size		6045107						
ANR	6045139	Symbol	* nt -> sub		6045107						
ANR	6045140	Symbol	* nt		6045107						
ANR	6045141	Function	names_index_string_sub_table	380:0:11406:11554							
ANR	6045142	FunctionDef	"names_index_string_sub_table (name_table * nt , name_index_t index)"		6045141	0					
ANR	6045143	CompoundStatement		382:0:11497:11554	6045141	0					
ANR	6045144	ReturnStatement	return nt -> sub [ index >> nt_log2_sub_size ] . strings ;	383:4:11503:11552	6045141	0	True				
ANR	6045145	MemberAccess	nt -> sub [ index >> nt_log2_sub_size ] . strings		6045141	0					
ANR	6045146	ArrayIndexing	nt -> sub [ index >> nt_log2_sub_size ]		6045141	0					
ANR	6045147	PtrMemberAccess	nt -> sub		6045141	0					
ANR	6045148	Identifier	nt		6045141	0					
ANR	6045149	Identifier	sub		6045141	1					
ANR	6045150	ShiftExpression	index >> nt_log2_sub_size		6045141	1		>>			
ANR	6045151	Identifier	index		6045141	0					
ANR	6045152	Identifier	nt_log2_sub_size		6045141	1					
ANR	6045153	Identifier	strings		6045141	1					
ANR	6045154	ReturnType	void *		6045141	1					
ANR	6045155	Identifier	names_index_string_sub_table		6045141	2					
ANR	6045156	ParameterList	"name_table * nt , name_index_t index"		6045141	3					
ANR	6045157	Parameter	name_table * nt	381:29:11460:11474	6045141	0	True				
ANR	6045158	ParameterType	name_table *		6045141	0					
ANR	6045159	Identifier	nt		6045141	1					
ANR	6045160	Parameter	name_index_t index	381:46:11477:11494	6045141	1	True				
ANR	6045161	ParameterType	name_index_t		6045141	0					
ANR	6045162	Identifier	index		6045141	1					
ANR	6045163	CFGEntryNode	ENTRY		6045141		True				
ANR	6045164	CFGExitNode	EXIT		6045141		True				
ANR	6045165	Symbol	* * nt		6045141						
ANR	6045166	Symbol	nt -> sub		6045141						
ANR	6045167	Symbol	* nt_log2_sub_size		6045141						
ANR	6045168	Symbol	nt		6045141						
ANR	6045169	Symbol	* index		6045141						
ANR	6045170	Symbol	index		6045141						
ANR	6045171	Symbol	nt_log2_sub_size		6045141						
ANR	6045172	Symbol	* nt -> sub		6045141						
ANR	6045173	Symbol	nt -> sub [ index >> nt_log2_sub_size ] . strings		6045141						
ANR	6045174	Symbol	* nt		6045141						
ANR	6045175	Function	names_trace_finish	391:0:11780:13199							
ANR	6045176	FunctionDef	"names_trace_finish (name_table * nt , gc_state_t * gcst)"		6045175	0					
ANR	6045177	CompoundStatement		393:0:11840:13199	6045175	0					
ANR	6045178	IdentifierDeclStatement	uint * phash = & nt -> hash [ 0 ] ;	394:4:11846:11872	6045175	0	True				
ANR	6045179	IdentifierDecl	* phash = & nt -> hash [ 0 ]		6045175	0					
ANR	6045180	IdentifierDeclType	uint *		6045175	0					
ANR	6045181	Identifier	phash		6045175	1					
ANR	6045182	AssignmentExpression	* phash = & nt -> hash [ 0 ]		6045175	2		=			
ANR	6045183	Identifier	phash		6045175	0					
ANR	6045184	UnaryOperationExpression	& nt -> hash [ 0 ]		6045175	1					
ANR	6045185	UnaryOperator	&		6045175	0					
ANR	6045186	ArrayIndexing	nt -> hash [ 0 ]		6045175	1					
ANR	6045187	PtrMemberAccess	nt -> hash		6045175	0					
ANR	6045188	Identifier	nt		6045175	0					
ANR	6045189	Identifier	hash		6045175	1					
ANR	6045190	PrimaryExpression	0		6045175	1					
ANR	6045191	IdentifierDeclStatement	int i ;	395:4:11878:11883	6045175	1	True				
ANR	6045192	IdentifierDecl	i		6045175	0					
ANR	6045193	IdentifierDeclType	int		6045175	0					
ANR	6045194	Identifier	i		6045175	1					
ANR	6045195	ForStatement	"for ( i = 0 ; i < NT_HASH_SIZE ; phash ++ , i ++ )"		6045175	2					
ANR	6045196	ForInit	i = 0 ;	397:9:11895:11900	6045175	0	True				
ANR	6045197	AssignmentExpression	i = 0		6045175	0		=			
ANR	6045198	Identifier	i		6045175	0					
ANR	6045199	PrimaryExpression	0		6045175	1					
ANR	6045200	Condition	i < NT_HASH_SIZE	397:16:11902:11917	6045175	1	True				
ANR	6045201	RelationalExpression	i < NT_HASH_SIZE		6045175	0		<			
ANR	6045202	Identifier	i		6045175	0					
ANR	6045203	Identifier	NT_HASH_SIZE		6045175	1					
ANR	6045204	Expression	"phash ++ , i ++"	397:34:11920:11931	6045175	2	True				
ANR	6045205	PostIncDecOperationExpression	phash ++		6045175	0					
ANR	6045206	Identifier	phash		6045175	0					
ANR	6045207	IncDec	++		6045175	1					
ANR	6045208	PostIncDecOperationExpression	i ++		6045175	1					
ANR	6045209	Identifier	i		6045175	0					
ANR	6045210	IncDec	++		6045175	1					
ANR	6045211	CompoundStatement		13:8:377:403	6045175	3					
ANR	6045212	IdentifierDeclStatement	name_index_t prev = 0 ;	398:8:11944:11965	6045175	0	True				
ANR	6045213	IdentifierDecl	prev = 0		6045175	0					
ANR	6045214	IdentifierDeclType	name_index_t		6045175	0					
ANR	6045215	Identifier	prev		6045175	1					
ANR	6045216	AssignmentExpression	prev = 0		6045175	2		=			
ANR	6045217	Identifier	prev		6045175	0					
ANR	6045218	PrimaryExpression	0		6045175	1					
ANR	6045219	IdentifierDeclStatement	name_string_t * pnprev = 0 ;	404:8:12183:12208	6045175	1	True				
ANR	6045220	IdentifierDecl	* pnprev = 0		6045175	0					
ANR	6045221	IdentifierDeclType	name_string_t *		6045175	0					
ANR	6045222	Identifier	pnprev		6045175	1					
ANR	6045223	AssignmentExpression	* pnprev = 0		6045175	2		=			
ANR	6045224	Identifier	pnprev		6045175	0					
ANR	6045225	PrimaryExpression	0		6045175	1					
ANR	6045226	IdentifierDeclStatement	name_index_t nidx = * phash ;	405:8:12218:12244	6045175	2	True				
ANR	6045227	IdentifierDecl	nidx = * phash		6045175	0					
ANR	6045228	IdentifierDeclType	name_index_t		6045175	0					
ANR	6045229	Identifier	nidx		6045175	1					
ANR	6045230	AssignmentExpression	nidx = * phash		6045175	2		=			
ANR	6045231	Identifier	nidx		6045175	0					
ANR	6045232	UnaryOperationExpression	* phash		6045175	1					
ANR	6045233	UnaryOperator	*		6045175	0					
ANR	6045234	Identifier	phash		6045175	1					
ANR	6045235	WhileStatement	while ( nidx != 0 )		6045175	3					
ANR	6045236	Condition	nidx != 0	407:15:12262:12270	6045175	0	True				
ANR	6045237	EqualityExpression	nidx != 0		6045175	0		!=			
ANR	6045238	Identifier	nidx		6045175	0					
ANR	6045239	PrimaryExpression	0		6045175	1					
ANR	6045240	CompoundStatement		17:12:518:566	6045175	1					
ANR	6045241	IdentifierDeclStatement	"name_string_t * pnstr = names_index_string_inline ( nt , nidx ) ;"	408:12:12287:12345	6045175	0	True				
ANR	6045242	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , nidx )"		6045175	0					
ANR	6045243	IdentifierDeclType	name_string_t *		6045175	0					
ANR	6045244	Identifier	pnstr		6045175	1					
ANR	6045245	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , nidx )"		6045175	2		=			
ANR	6045246	Identifier	pnstr		6045175	0					
ANR	6045247	CallExpression	"names_index_string_inline ( nt , nidx )"		6045175	1					
ANR	6045248	Callee	names_index_string_inline		6045175	0					
ANR	6045249	Identifier	names_index_string_inline		6045175	0					
ANR	6045250	ArgumentList	nt		6045175	1					
ANR	6045251	Argument	nt		6045175	0					
ANR	6045252	Identifier	nt		6045175	0					
ANR	6045253	Argument	nidx		6045175	1					
ANR	6045254	Identifier	nidx		6045175	0					
ANR	6045255	IdentifierDeclStatement	"name_index_t next = name_next_index ( nidx , pnstr ) ;"	409:12:12359:12407	6045175	1	True				
ANR	6045256	IdentifierDecl	"next = name_next_index ( nidx , pnstr )"		6045175	0					
ANR	6045257	IdentifierDeclType	name_index_t		6045175	0					
ANR	6045258	Identifier	next		6045175	1					
ANR	6045259	AssignmentExpression	"next = name_next_index ( nidx , pnstr )"		6045175	2		=			
ANR	6045260	Identifier	next		6045175	0					
ANR	6045261	CallExpression	"name_next_index ( nidx , pnstr )"		6045175	1					
ANR	6045262	Callee	name_next_index		6045175	0					
ANR	6045263	Identifier	name_next_index		6045175	0					
ANR	6045264	ArgumentList	nidx		6045175	1					
ANR	6045265	Argument	nidx		6045175	0					
ANR	6045266	Identifier	nidx		6045175	0					
ANR	6045267	Argument	pnstr		6045175	1					
ANR	6045268	Identifier	pnstr		6045175	0					
ANR	6045269	IfStatement	if ( pnstr -> mark )		6045175	2					
ANR	6045270	Condition	pnstr -> mark	411:16:12426:12436	6045175	0	True				
ANR	6045271	PtrMemberAccess	pnstr -> mark		6045175	0					
ANR	6045272	Identifier	pnstr		6045175	0					
ANR	6045273	Identifier	mark		6045175	1					
ANR	6045274	CompoundStatement		19:29:598:598	6045175	1					
ANR	6045275	ExpressionStatement	prev = nidx	412:16:12457:12468	6045175	0	True				
ANR	6045276	AssignmentExpression	prev = nidx		6045175	0		=			
ANR	6045277	Identifier	prev		6045175	0					
ANR	6045278	Identifier	nidx		6045175	1					
ANR	6045279	ExpressionStatement	pnprev = pnstr	413:16:12486:12500	6045175	1	True				
ANR	6045280	AssignmentExpression	pnprev = pnstr		6045175	0		=			
ANR	6045281	Identifier	pnprev		6045175	0					
ANR	6045282	Identifier	pnstr		6045175	1					
ANR	6045283	ElseStatement	else		6045175	0					
ANR	6045284	CompoundStatement		22:19:680:680	6045175	0					
ANR	6045285	ExpressionStatement	"if_debug_name ( ""GC remove name"" , nt , nidx , NULL )"	415:16:12539:12586	6045175	0	True				
ANR	6045286	CallExpression	"if_debug_name ( ""GC remove name"" , nt , nidx , NULL )"		6045175	0					
ANR	6045287	Callee	if_debug_name		6045175	0					
ANR	6045288	Identifier	if_debug_name		6045175	0					
ANR	6045289	ArgumentList	"""GC remove name"""		6045175	1					
ANR	6045290	Argument	"""GC remove name"""		6045175	0					
ANR	6045291	PrimaryExpression	"""GC remove name"""		6045175	0					
ANR	6045292	Argument	nt		6045175	1					
ANR	6045293	Identifier	nt		6045175	0					
ANR	6045294	Argument	nidx		6045175	2					
ANR	6045295	Identifier	nidx		6045175	0					
ANR	6045296	Argument	NULL		6045175	3					
ANR	6045297	Identifier	NULL		6045175	0					
ANR	6045298	ExpressionStatement	pnstr -> string_bytes = 0	417:16:12663:12686	6045175	1	True				
ANR	6045299	AssignmentExpression	pnstr -> string_bytes = 0		6045175	0		=			
ANR	6045300	PtrMemberAccess	pnstr -> string_bytes		6045175	0					
ANR	6045301	Identifier	pnstr		6045175	0					
ANR	6045302	Identifier	string_bytes		6045175	1					
ANR	6045303	PrimaryExpression	0		6045175	1					
ANR	6045304	ExpressionStatement	pnstr -> string_size = 0	418:16:12704:12726	6045175	2	True				
ANR	6045305	AssignmentExpression	pnstr -> string_size = 0		6045175	0		=			
ANR	6045306	PtrMemberAccess	pnstr -> string_size		6045175	0					
ANR	6045307	Identifier	pnstr		6045175	0					
ANR	6045308	Identifier	string_size		6045175	1					
ANR	6045309	PrimaryExpression	0		6045175	1					
ANR	6045310	IfStatement	if ( prev == 0 )		6045175	3					
ANR	6045311	Condition	prev == 0	419:20:12748:12756	6045175	0	True				
ANR	6045312	EqualityExpression	prev == 0		6045175	0		==			
ANR	6045313	Identifier	prev		6045175	0					
ANR	6045314	PrimaryExpression	0		6045175	1					
ANR	6045315	ExpressionStatement	* phash = next	420:20:12779:12792	6045175	1	True				
ANR	6045316	AssignmentExpression	* phash = next		6045175	0		=			
ANR	6045317	UnaryOperationExpression	* phash		6045175	0					
ANR	6045318	UnaryOperator	*		6045175	0					
ANR	6045319	Identifier	phash		6045175	1					
ANR	6045320	Identifier	next		6045175	1					
ANR	6045321	ElseStatement	else		6045175	0					
ANR	6045322	ExpressionStatement	"set_name_next_index ( prev , pnprev , next )"	422:20:12835:12874	6045175	0	True				
ANR	6045323	CallExpression	"set_name_next_index ( prev , pnprev , next )"		6045175	0					
ANR	6045324	Callee	set_name_next_index		6045175	0					
ANR	6045325	Identifier	set_name_next_index		6045175	0					
ANR	6045326	ArgumentList	prev		6045175	1					
ANR	6045327	Argument	prev		6045175	0					
ANR	6045328	Identifier	prev		6045175	0					
ANR	6045329	Argument	pnprev		6045175	1					
ANR	6045330	Identifier	pnprev		6045175	0					
ANR	6045331	Argument	next		6045175	2					
ANR	6045332	Identifier	next		6045175	0					
ANR	6045333	ExpressionStatement	nidx = next	424:12:12902:12913	6045175	3	True				
ANR	6045334	AssignmentExpression	nidx = next		6045175	0		=			
ANR	6045335	Identifier	nidx		6045175	0					
ANR	6045336	Identifier	next		6045175	1					
ANR	6045337	ExpressionStatement	nt -> free = 0	428:4:12972:12984	6045175	3	True				
ANR	6045338	AssignmentExpression	nt -> free = 0		6045175	0		=			
ANR	6045339	PtrMemberAccess	nt -> free		6045175	0					
ANR	6045340	Identifier	nt		6045175	0					
ANR	6045341	Identifier	free		6045175	1					
ANR	6045342	PrimaryExpression	0		6045175	1					
ANR	6045343	ForStatement	for ( i = nt -> sub_count ; -- i >= 0 ; )		6045175	4					
ANR	6045344	ForInit	i = nt -> sub_count ;	429:9:12995:13012	6045175	0	True				
ANR	6045345	AssignmentExpression	i = nt -> sub_count		6045175	0		=			
ANR	6045346	Identifier	i		6045175	0					
ANR	6045347	PtrMemberAccess	nt -> sub_count		6045175	1					
ANR	6045348	Identifier	nt		6045175	0					
ANR	6045349	Identifier	sub_count		6045175	1					
ANR	6045350	Condition	-- i >= 0	429:28:13014:13021	6045175	1	True				
ANR	6045351	RelationalExpression	-- i >= 0		6045175	0		>=			
ANR	6045352	UnaryExpression	-- i		6045175	0					
ANR	6045353	IncDec	--		6045175	0					
ANR	6045354	Identifier	i		6045175	1					
ANR	6045355	PrimaryExpression	0		6045175	1					
ANR	6045356	CompoundStatement		38:8:1194:1232	6045175	2					
ANR	6045357	IdentifierDeclStatement	name_sub_table * sub = nt -> sub [ i ] . names ;	430:8:13035:13073	6045175	0	True				
ANR	6045358	IdentifierDecl	* sub = nt -> sub [ i ] . names		6045175	0					
ANR	6045359	IdentifierDeclType	name_sub_table *		6045175	0					
ANR	6045360	Identifier	sub		6045175	1					
ANR	6045361	AssignmentExpression	* sub = nt -> sub [ i ] . names		6045175	2		=			
ANR	6045362	Identifier	sub		6045175	0					
ANR	6045363	MemberAccess	nt -> sub [ i ] . names		6045175	1					
ANR	6045364	ArrayIndexing	nt -> sub [ i ]		6045175	0					
ANR	6045365	PtrMemberAccess	nt -> sub		6045175	0					
ANR	6045366	Identifier	nt		6045175	0					
ANR	6045367	Identifier	sub		6045175	1					
ANR	6045368	Identifier	i		6045175	1					
ANR	6045369	Identifier	names		6045175	1					
ANR	6045370	IfStatement	if ( sub != 0 )		6045175	1					
ANR	6045371	Condition	sub != 0	432:12:13088:13095	6045175	0	True				
ANR	6045372	EqualityExpression	sub != 0		6045175	0		!=			
ANR	6045373	Identifier	sub		6045175	0					
ANR	6045374	PrimaryExpression	0		6045175	1					
ANR	6045375	CompoundStatement		40:22:1257:1257	6045175	1					
ANR	6045376	ExpressionStatement	"name_scan_sub ( nt , i , true , true && ( gcst != 0 ) )"	433:12:13112:13159	6045175	0	True				
ANR	6045377	CallExpression	"name_scan_sub ( nt , i , true , true && ( gcst != 0 ) )"		6045175	0					
ANR	6045378	Callee	name_scan_sub		6045175	0					
ANR	6045379	Identifier	name_scan_sub		6045175	0					
ANR	6045380	ArgumentList	nt		6045175	1					
ANR	6045381	Argument	nt		6045175	0					
ANR	6045382	Identifier	nt		6045175	0					
ANR	6045383	Argument	i		6045175	1					
ANR	6045384	Identifier	i		6045175	0					
ANR	6045385	Argument	true		6045175	2					
ANR	6045386	Identifier	true		6045175	0					
ANR	6045387	Argument	true && ( gcst != 0 )		6045175	3					
ANR	6045388	AndExpression	true && ( gcst != 0 )		6045175	0		&&			
ANR	6045389	Identifier	true		6045175	0					
ANR	6045390	EqualityExpression	gcst != 0		6045175	1		!=			
ANR	6045391	Identifier	gcst		6045175	0					
ANR	6045392	PrimaryExpression	0		6045175	1					
ANR	6045393	ExpressionStatement	nt -> sub_next = 0	436:4:13181:13197	6045175	5	True				
ANR	6045394	AssignmentExpression	nt -> sub_next = 0		6045175	0		=			
ANR	6045395	PtrMemberAccess	nt -> sub_next		6045175	0					
ANR	6045396	Identifier	nt		6045175	0					
ANR	6045397	Identifier	sub_next		6045175	1					
ANR	6045398	PrimaryExpression	0		6045175	1					
ANR	6045399	ReturnType	void		6045175	1					
ANR	6045400	Identifier	names_trace_finish		6045175	2					
ANR	6045401	ParameterList	"name_table * nt , gc_state_t * gcst"		6045175	3					
ANR	6045402	Parameter	name_table * nt	392:19:11804:11818	6045175	0	True				
ANR	6045403	ParameterType	name_table *		6045175	0					
ANR	6045404	Identifier	nt		6045175	1					
ANR	6045405	Parameter	gc_state_t * gcst	392:36:11821:11837	6045175	1	True				
ANR	6045406	ParameterType	gc_state_t *		6045175	0					
ANR	6045407	Identifier	gcst		6045175	1					
ANR	6045408	CFGEntryNode	ENTRY		6045175		True				
ANR	6045409	CFGExitNode	EXIT		6045175		True				
ANR	6045410	Symbol	next		6045175						
ANR	6045411	Symbol	pnstr -> string_size		6045175						
ANR	6045412	Symbol	sub		6045175						
ANR	6045413	Symbol	* pnstr		6045175						
ANR	6045414	Symbol	nt		6045175						
ANR	6045415	Symbol	prev		6045175						
ANR	6045416	Symbol	nt -> sub [ i ] . names		6045175						
ANR	6045417	Symbol	gcst		6045175						
ANR	6045418	Symbol	nt -> free		6045175						
ANR	6045419	Symbol	pnprev		6045175						
ANR	6045420	Symbol	nt -> sub		6045175						
ANR	6045421	Symbol	* nt -> sub		6045175						
ANR	6045422	Symbol	NT_HASH_SIZE		6045175						
ANR	6045423	Symbol	NULL		6045175						
ANR	6045424	Symbol	phash		6045175						
ANR	6045425	Symbol	i		6045175						
ANR	6045426	Symbol	pnstr -> mark		6045175						
ANR	6045427	Symbol	pnstr -> string_bytes		6045175						
ANR	6045428	Symbol	nt -> hash		6045175						
ANR	6045429	Symbol	pnstr		6045175						
ANR	6045430	Symbol	names_index_string_inline		6045175						
ANR	6045431	Symbol	* nt		6045175						
ANR	6045432	Symbol	name_next_index		6045175						
ANR	6045433	Symbol	* * nt		6045175						
ANR	6045434	Symbol	* phash		6045175						
ANR	6045435	Symbol	* i		6045175						
ANR	6045436	Symbol	nt -> sub_next		6045175						
ANR	6045437	Symbol	true		6045175						
ANR	6045438	Symbol	nt -> sub_count		6045175						
ANR	6045439	Symbol	nidx		6045175						
ANR	6045440	Function	names_restore	447:0:13636:14566							
ANR	6045441	FunctionDef	"names_restore (name_table * nt , alloc_save_t * save)"		6045440	0					
ANR	6045442	CompoundStatement		449:0:13693:14566	6045440	0					
ANR	6045443	IdentifierDeclStatement	uint si ;	452:4:13813:13820	6045440	0	True				
ANR	6045444	IdentifierDecl	si		6045440	0					
ANR	6045445	IdentifierDeclType	uint		6045440	0					
ANR	6045446	Identifier	si		6045440	1					
ANR	6045447	ForStatement	for ( si = 0 ; si < nt -> sub_count ; ++ si )		6045440	1					
ANR	6045448	ForInit	si = 0 ;	454:9:13832:13838	6045440	0	True				
ANR	6045449	AssignmentExpression	si = 0		6045440	0		=			
ANR	6045450	Identifier	si		6045440	0					
ANR	6045451	PrimaryExpression	0		6045440	1					
ANR	6045452	Condition	si < nt -> sub_count	454:17:13840:13857	6045440	1	True				
ANR	6045453	RelationalExpression	si < nt -> sub_count		6045440	0		<			
ANR	6045454	Identifier	si		6045440	0					
ANR	6045455	PtrMemberAccess	nt -> sub_count		6045440	1					
ANR	6045456	Identifier	nt		6045440	0					
ANR	6045457	Identifier	sub_count		6045440	1					
ANR	6045458	UnaryExpression	++ si	454:37:13860:13863	6045440	2	True				
ANR	6045459	IncDec	++		6045440	0					
ANR	6045460	Identifier	si		6045440	1					
ANR	6045461	IfStatement	if ( nt -> sub [ si ] . strings != 0 )		6045440	3					
ANR	6045462	Condition	nt -> sub [ si ] . strings != 0	455:12:13878:13901	6045440	0	True				
ANR	6045463	EqualityExpression	nt -> sub [ si ] . strings != 0		6045440	0		!=			
ANR	6045464	MemberAccess	nt -> sub [ si ] . strings		6045440	0					
ANR	6045465	ArrayIndexing	nt -> sub [ si ]		6045440	0					
ANR	6045466	PtrMemberAccess	nt -> sub		6045440	0					
ANR	6045467	Identifier	nt		6045440	0					
ANR	6045468	Identifier	sub		6045440	1					
ANR	6045469	Identifier	si		6045440	1					
ANR	6045470	Identifier	strings		6045440	1					
ANR	6045471	PrimaryExpression	0		6045440	1					
ANR	6045472	CompoundStatement		8:12:224:230	6045440	1					
ANR	6045473	IdentifierDeclStatement	uint i ;	456:12:13918:13924	6045440	0	True				
ANR	6045474	IdentifierDecl	i		6045440	0					
ANR	6045475	IdentifierDeclType	uint		6045440	0					
ANR	6045476	Identifier	i		6045440	1					
ANR	6045477	ForStatement	for ( i = 0 ; i < nt_sub_size ; ++ i )		6045440	1					
ANR	6045478	ForInit	i = 0 ;	458:17:13944:13949	6045440	0	True				
ANR	6045479	AssignmentExpression	i = 0		6045440	0		=			
ANR	6045480	Identifier	i		6045440	0					
ANR	6045481	PrimaryExpression	0		6045440	1					
ANR	6045482	Condition	i < nt_sub_size	458:24:13951:13965	6045440	1	True				
ANR	6045483	RelationalExpression	i < nt_sub_size		6045440	0		<			
ANR	6045484	Identifier	i		6045440	0					
ANR	6045485	Identifier	nt_sub_size		6045440	1					
ANR	6045486	UnaryExpression	++ i	458:41:13968:13970	6045440	2	True				
ANR	6045487	IncDec	++		6045440	0					
ANR	6045488	Identifier	i		6045440	1					
ANR	6045489	CompoundStatement		11:16:297:399	6045440	3					
ANR	6045490	IdentifierDeclStatement	"name_string_t * pnstr = names_index_string_inline ( nt , ( si << nt_log2_sub_size ) + i ) ;"	459:16:13991:14093	6045440	0	True				
ANR	6045491	IdentifierDecl	"* pnstr = names_index_string_inline ( nt , ( si << nt_log2_sub_size ) + i )"		6045440	0					
ANR	6045492	IdentifierDeclType	name_string_t *		6045440	0					
ANR	6045493	Identifier	pnstr		6045440	1					
ANR	6045494	AssignmentExpression	"* pnstr = names_index_string_inline ( nt , ( si << nt_log2_sub_size ) + i )"		6045440	2		=			
ANR	6045495	Identifier	pnstr		6045440	0					
ANR	6045496	CallExpression	"names_index_string_inline ( nt , ( si << nt_log2_sub_size ) + i )"		6045440	1					
ANR	6045497	Callee	names_index_string_inline		6045440	0					
ANR	6045498	Identifier	names_index_string_inline		6045440	0					
ANR	6045499	ArgumentList	nt		6045440	1					
ANR	6045500	Argument	nt		6045440	0					
ANR	6045501	Identifier	nt		6045440	0					
ANR	6045502	Argument	( si << nt_log2_sub_size ) + i		6045440	1					
ANR	6045503	AdditiveExpression	( si << nt_log2_sub_size ) + i		6045440	0		+			
ANR	6045504	ShiftExpression	si << nt_log2_sub_size		6045440	0		<<			
ANR	6045505	Identifier	si		6045440	0					
ANR	6045506	Identifier	nt_log2_sub_size		6045440	1					
ANR	6045507	Identifier	i		6045440	1					
ANR	6045508	IfStatement	if ( pnstr -> string_bytes == 0 )		6045440	1					
ANR	6045509	Condition	pnstr -> string_bytes == 0	462:20:14116:14139	6045440	0	True				
ANR	6045510	EqualityExpression	pnstr -> string_bytes == 0		6045440	0		==			
ANR	6045511	PtrMemberAccess	pnstr -> string_bytes		6045440	0					
ANR	6045512	Identifier	pnstr		6045440	0					
ANR	6045513	Identifier	string_bytes		6045440	1					
ANR	6045514	PrimaryExpression	0		6045440	1					
ANR	6045515	ExpressionStatement	pnstr -> mark = 0	463:20:14162:14177	6045440	1	True				
ANR	6045516	AssignmentExpression	pnstr -> mark = 0		6045440	0		=			
ANR	6045517	PtrMemberAccess	pnstr -> mark		6045440	0					
ANR	6045518	Identifier	pnstr		6045440	0					
ANR	6045519	Identifier	mark		6045440	1					
ANR	6045520	PrimaryExpression	0		6045440	1					
ANR	6045521	ElseStatement	else		6045440	0					
ANR	6045522	IfStatement	if ( pnstr -> foreign_string )		6045440	0					
ANR	6045523	Condition	pnstr -> foreign_string	464:25:14204:14224	6045440	0	True				
ANR	6045524	PtrMemberAccess	pnstr -> foreign_string		6045440	0					
ANR	6045525	Identifier	pnstr		6045440	0					
ANR	6045526	Identifier	foreign_string		6045440	1					
ANR	6045527	CompoundStatement		16:48:533:533	6045440	1					
ANR	6045528	IfStatement	if ( ! pnstr -> mark )		6045440	0					
ANR	6045529	Condition	! pnstr -> mark	466:24:14323:14334	6045440	0	True				
ANR	6045530	UnaryOperationExpression	! pnstr -> mark		6045440	0					
ANR	6045531	UnaryOperator	!		6045440	0					
ANR	6045532	PtrMemberAccess	pnstr -> mark		6045440	1					
ANR	6045533	Identifier	pnstr		6045440	0					
ANR	6045534	Identifier	mark		6045440	1					
ANR	6045535	ExpressionStatement	pnstr -> mark = 1	467:24:14361:14376	6045440	1	True				
ANR	6045536	AssignmentExpression	pnstr -> mark = 1		6045440	0		=			
ANR	6045537	PtrMemberAccess	pnstr -> mark		6045440	0					
ANR	6045538	Identifier	pnstr		6045440	0					
ANR	6045539	Identifier	mark		6045440	1					
ANR	6045540	PrimaryExpression	1		6045440	1					
ANR	6045541	ElseStatement	else		6045440	0					
ANR	6045542	ExpressionStatement	"pnstr -> mark = ! alloc_is_since_save ( pnstr -> string_bytes , save )"	469:20:14421:14506	6045440	0	True				
ANR	6045543	AssignmentExpression	"pnstr -> mark = ! alloc_is_since_save ( pnstr -> string_bytes , save )"		6045440	0		=			
ANR	6045544	PtrMemberAccess	pnstr -> mark		6045440	0					
ANR	6045545	Identifier	pnstr		6045440	0					
ANR	6045546	Identifier	mark		6045440	1					
ANR	6045547	UnaryOperationExpression	"! alloc_is_since_save ( pnstr -> string_bytes , save )"		6045440	1					
ANR	6045548	UnaryOperator	!		6045440	0					
ANR	6045549	CallExpression	"alloc_is_since_save ( pnstr -> string_bytes , save )"		6045440	1					
ANR	6045550	Callee	alloc_is_since_save		6045440	0					
ANR	6045551	Identifier	alloc_is_since_save		6045440	0					
ANR	6045552	ArgumentList	pnstr -> string_bytes		6045440	1					
ANR	6045553	Argument	pnstr -> string_bytes		6045440	0					
ANR	6045554	PtrMemberAccess	pnstr -> string_bytes		6045440	0					
ANR	6045555	Identifier	pnstr		6045440	0					
ANR	6045556	Identifier	string_bytes		6045440	1					
ANR	6045557	Argument	save		6045440	1					
ANR	6045558	Identifier	save		6045440	0					
ANR	6045559	ExpressionStatement	"names_trace_finish ( nt , NULL )"	473:4:14536:14564	6045440	2	True				
ANR	6045560	CallExpression	"names_trace_finish ( nt , NULL )"		6045440	0					
ANR	6045561	Callee	names_trace_finish		6045440	0					
ANR	6045562	Identifier	names_trace_finish		6045440	0					
ANR	6045563	ArgumentList	nt		6045440	1					
ANR	6045564	Argument	nt		6045440	0					
ANR	6045565	Identifier	nt		6045440	0					
ANR	6045566	Argument	NULL		6045440	1					
ANR	6045567	Identifier	NULL		6045440	0					
ANR	6045568	ReturnType	void		6045440	1					
ANR	6045569	Identifier	names_restore		6045440	2					
ANR	6045570	ParameterList	"name_table * nt , alloc_save_t * save"		6045440	3					
ANR	6045571	Parameter	name_table * nt	448:14:13655:13669	6045440	0	True				
ANR	6045572	ParameterType	name_table *		6045440	0					
ANR	6045573	Identifier	nt		6045440	1					
ANR	6045574	Parameter	alloc_save_t * save	448:31:13672:13690	6045440	1	True				
ANR	6045575	ParameterType	alloc_save_t *		6045440	0					
ANR	6045576	Identifier	save		6045440	1					
ANR	6045577	CFGEntryNode	ENTRY		6045440		True				
ANR	6045578	CFGExitNode	EXIT		6045440		True				
ANR	6045579	Symbol	nt -> sub [ si ] . strings		6045440						
ANR	6045580	Symbol	* pnstr		6045440						
ANR	6045581	Symbol	NULL		6045440						
ANR	6045582	Symbol	nt_sub_size		6045440						
ANR	6045583	Symbol	nt		6045440						
ANR	6045584	Symbol	save		6045440						
ANR	6045585	Symbol	i		6045440						
ANR	6045586	Symbol	pnstr -> string_bytes		6045440						
ANR	6045587	Symbol	pnstr -> mark		6045440						
ANR	6045588	Symbol	pnstr		6045440						
ANR	6045589	Symbol	names_index_string_inline		6045440						
ANR	6045590	Symbol	* nt		6045440						
ANR	6045591	Symbol	* * nt		6045440						
ANR	6045592	Symbol	nt -> sub		6045440						
ANR	6045593	Symbol	si		6045440						
ANR	6045594	Symbol	nt_log2_sub_size		6045440						
ANR	6045595	Symbol	nt -> sub_count		6045440						
ANR	6045596	Symbol	alloc_is_since_save		6045440						
ANR	6045597	Symbol	* nt -> sub		6045440						
ANR	6045598	Symbol	pnstr -> foreign_string		6045440						
ANR	6045599	Symbol	* si		6045440						
ANR	6045600	Function	name_alloc_sub	479:0:14645:16857							
ANR	6045601	FunctionDef	name_alloc_sub (name_table * nt)		6045600	0					
ANR	6045602	CompoundStatement		481:0:14688:16857	6045600	0					
ANR	6045603	IdentifierDeclStatement	gs_memory_t * mem = nt -> memory ;	482:4:14694:14723	6045600	0	True				
ANR	6045604	IdentifierDecl	* mem = nt -> memory		6045600	0					
ANR	6045605	IdentifierDeclType	gs_memory_t *		6045600	0					
ANR	6045606	Identifier	mem		6045600	1					
ANR	6045607	AssignmentExpression	* mem = nt -> memory		6045600	2		=			
ANR	6045608	Identifier	mem		6045600	0					
ANR	6045609	PtrMemberAccess	nt -> memory		6045600	1					
ANR	6045610	Identifier	nt		6045600	0					
ANR	6045611	Identifier	memory		6045600	1					
ANR	6045612	IdentifierDeclStatement	uint sub_index = nt -> sub_next ;	483:4:14729:14758	6045600	1	True				
ANR	6045613	IdentifierDecl	sub_index = nt -> sub_next		6045600	0					
ANR	6045614	IdentifierDeclType	uint		6045600	0					
ANR	6045615	Identifier	sub_index		6045600	1					
ANR	6045616	AssignmentExpression	sub_index = nt -> sub_next		6045600	2		=			
ANR	6045617	Identifier	sub_index		6045600	0					
ANR	6045618	PtrMemberAccess	nt -> sub_next		6045600	1					
ANR	6045619	Identifier	nt		6045600	0					
ANR	6045620	Identifier	sub_next		6045600	1					
ANR	6045621	IdentifierDeclStatement	name_sub_table * sub ;	484:4:14764:14783	6045600	2	True				
ANR	6045622	IdentifierDecl	* sub		6045600	0					
ANR	6045623	IdentifierDeclType	name_sub_table *		6045600	0					
ANR	6045624	Identifier	sub		6045600	1					
ANR	6045625	IdentifierDeclStatement	name_string_sub_table_t * ssub ;	485:4:14789:14818	6045600	3	True				
ANR	6045626	IdentifierDecl	* ssub		6045600	0					
ANR	6045627	IdentifierDeclType	name_string_sub_table_t *		6045600	0					
ANR	6045628	Identifier	ssub		6045600	1					
ANR	6045629	ForStatement	for ( ; ; ++ sub_index )		6045600	4					
ANR	6045630	UnaryExpression	++ sub_index	487:12:14833:14843	6045600	0	True				
ANR	6045631	IncDec	++		6045600	0					
ANR	6045632	Identifier	sub_index		6045600	1					
ANR	6045633	CompoundStatement		7:25:157:157	6045600	1					
ANR	6045634	IfStatement	if ( sub_index > nt -> max_sub_count )		6045600	0					
ANR	6045635	Condition	sub_index > nt -> max_sub_count	488:12:14860:14888	6045600	0	True				
ANR	6045636	RelationalExpression	sub_index > nt -> max_sub_count		6045600	0		>			
ANR	6045637	Identifier	sub_index		6045600	0					
ANR	6045638	PtrMemberAccess	nt -> max_sub_count		6045600	1					
ANR	6045639	Identifier	nt		6045600	0					
ANR	6045640	Identifier	max_sub_count		6045600	1					
ANR	6045641	ExpressionStatement	return_error ( gs_error_limitcheck )	489:12:14903:14936	6045600	1	True				
ANR	6045642	CallExpression	return_error ( gs_error_limitcheck )		6045600	0					
ANR	6045643	Callee	return_error		6045600	0					
ANR	6045644	Identifier	return_error		6045600	0					
ANR	6045645	ArgumentList	gs_error_limitcheck		6045600	1					
ANR	6045646	Argument	gs_error_limitcheck		6045600	0					
ANR	6045647	Identifier	gs_error_limitcheck		6045600	0					
ANR	6045648	IfStatement	if ( nt -> sub [ sub_index ] . names == 0 )		6045600	1					
ANR	6045649	Condition	nt -> sub [ sub_index ] . names == 0	490:12:14950:14978	6045600	0	True				
ANR	6045650	EqualityExpression	nt -> sub [ sub_index ] . names == 0		6045600	0		==			
ANR	6045651	MemberAccess	nt -> sub [ sub_index ] . names		6045600	0					
ANR	6045652	ArrayIndexing	nt -> sub [ sub_index ]		6045600	0					
ANR	6045653	PtrMemberAccess	nt -> sub		6045600	0					
ANR	6045654	Identifier	nt		6045600	0					
ANR	6045655	Identifier	sub		6045600	1					
ANR	6045656	Identifier	sub_index		6045600	1					
ANR	6045657	Identifier	names		6045600	1					
ANR	6045658	PrimaryExpression	0		6045600	1					
ANR	6045659	BreakStatement	break ;	491:12:14993:14998	6045600	1	True				
ANR	6045660	ExpressionStatement	nt -> sub_next = sub_index + 1	493:4:15010:15038	6045600	5	True				
ANR	6045661	AssignmentExpression	nt -> sub_next = sub_index + 1		6045600	0		=			
ANR	6045662	PtrMemberAccess	nt -> sub_next		6045600	0					
ANR	6045663	Identifier	nt		6045600	0					
ANR	6045664	Identifier	sub_next		6045600	1					
ANR	6045665	AdditiveExpression	sub_index + 1		6045600	1		+			
ANR	6045666	Identifier	sub_index		6045600	0					
ANR	6045667	PrimaryExpression	1		6045600	1					
ANR	6045668	IfStatement	if ( nt -> sub_next > nt -> sub_count )		6045600	6					
ANR	6045669	Condition	nt -> sub_next > nt -> sub_count	494:8:15048:15075	6045600	0	True				
ANR	6045670	RelationalExpression	nt -> sub_next > nt -> sub_count		6045600	0		>			
ANR	6045671	PtrMemberAccess	nt -> sub_next		6045600	0					
ANR	6045672	Identifier	nt		6045600	0					
ANR	6045673	Identifier	sub_next		6045600	1					
ANR	6045674	PtrMemberAccess	nt -> sub_count		6045600	1					
ANR	6045675	Identifier	nt		6045600	0					
ANR	6045676	Identifier	sub_count		6045600	1					
ANR	6045677	ExpressionStatement	nt -> sub_count = nt -> sub_next	495:8:15086:15114	6045600	1	True				
ANR	6045678	AssignmentExpression	nt -> sub_count = nt -> sub_next		6045600	0		=			
ANR	6045679	PtrMemberAccess	nt -> sub_count		6045600	0					
ANR	6045680	Identifier	nt		6045600	0					
ANR	6045681	Identifier	sub_count		6045600	1					
ANR	6045682	PtrMemberAccess	nt -> sub_next		6045600	1					
ANR	6045683	Identifier	nt		6045600	0					
ANR	6045684	Identifier	sub_next		6045600	1					
ANR	6045685	ExpressionStatement	"sub = gs_alloc_struct ( mem , name_sub_table , & st_name_sub_table , ""name_alloc_sub(sub-table)"" )"	496:4:15120:15237	6045600	7	True				
ANR	6045686	AssignmentExpression	"sub = gs_alloc_struct ( mem , name_sub_table , & st_name_sub_table , ""name_alloc_sub(sub-table)"" )"		6045600	0		=			
ANR	6045687	Identifier	sub		6045600	0					
ANR	6045688	CallExpression	"gs_alloc_struct ( mem , name_sub_table , & st_name_sub_table , ""name_alloc_sub(sub-table)"" )"		6045600	1					
ANR	6045689	Callee	gs_alloc_struct		6045600	0					
ANR	6045690	Identifier	gs_alloc_struct		6045600	0					
ANR	6045691	ArgumentList	mem		6045600	1					
ANR	6045692	Argument	mem		6045600	0					
ANR	6045693	Identifier	mem		6045600	0					
ANR	6045694	Argument	name_sub_table		6045600	1					
ANR	6045695	Identifier	name_sub_table		6045600	0					
ANR	6045696	Argument	& st_name_sub_table		6045600	2					
ANR	6045697	UnaryOperationExpression	& st_name_sub_table		6045600	0					
ANR	6045698	UnaryOperator	&		6045600	0					
ANR	6045699	Identifier	st_name_sub_table		6045600	1					
ANR	6045700	Argument	"""name_alloc_sub(sub-table)"""		6045600	3					
ANR	6045701	PrimaryExpression	"""name_alloc_sub(sub-table)"""		6045600	0					
ANR	6045702	ExpressionStatement	"ssub = gs_alloc_struct ( mem , name_string_sub_table_t , & st_name_string_sub_table , ""name_alloc_sub(string sub-table)"" )"	498:4:15243:15411	6045600	8	True				
ANR	6045703	AssignmentExpression	"ssub = gs_alloc_struct ( mem , name_string_sub_table_t , & st_name_string_sub_table , ""name_alloc_sub(string sub-table)"" )"		6045600	0		=			
ANR	6045704	Identifier	ssub		6045600	0					
ANR	6045705	CallExpression	"gs_alloc_struct ( mem , name_string_sub_table_t , & st_name_string_sub_table , ""name_alloc_sub(string sub-table)"" )"		6045600	1					
ANR	6045706	Callee	gs_alloc_struct		6045600	0					
ANR	6045707	Identifier	gs_alloc_struct		6045600	0					
ANR	6045708	ArgumentList	mem		6045600	1					
ANR	6045709	Argument	mem		6045600	0					
ANR	6045710	Identifier	mem		6045600	0					
ANR	6045711	Argument	name_string_sub_table_t		6045600	1					
ANR	6045712	Identifier	name_string_sub_table_t		6045600	0					
ANR	6045713	Argument	& st_name_string_sub_table		6045600	2					
ANR	6045714	UnaryOperationExpression	& st_name_string_sub_table		6045600	0					
ANR	6045715	UnaryOperator	&		6045600	0					
ANR	6045716	Identifier	st_name_string_sub_table		6045600	1					
ANR	6045717	Argument	"""name_alloc_sub(string sub-table)"""		6045600	3					
ANR	6045718	PrimaryExpression	"""name_alloc_sub(string sub-table)"""		6045600	0					
ANR	6045719	IfStatement	if ( sub == 0 || ssub == 0 )		6045600	9					
ANR	6045720	Condition	sub == 0 || ssub == 0	501:8:15421:15441	6045600	0	True				
ANR	6045721	OrExpression	sub == 0 || ssub == 0		6045600	0		||			
ANR	6045722	EqualityExpression	sub == 0		6045600	0		==			
ANR	6045723	Identifier	sub		6045600	0					
ANR	6045724	PrimaryExpression	0		6045600	1					
ANR	6045725	EqualityExpression	ssub == 0		6045600	1		==			
ANR	6045726	Identifier	ssub		6045600	0					
ANR	6045727	PrimaryExpression	0		6045600	1					
ANR	6045728	CompoundStatement		21:31:755:755	6045600	1					
ANR	6045729	ExpressionStatement	"gs_free_object ( mem , ssub , ""name_alloc_sub(string sub-table)"" )"	502:8:15454:15515	6045600	0	True				
ANR	6045730	CallExpression	"gs_free_object ( mem , ssub , ""name_alloc_sub(string sub-table)"" )"		6045600	0					
ANR	6045731	Callee	gs_free_object		6045600	0					
ANR	6045732	Identifier	gs_free_object		6045600	0					
ANR	6045733	ArgumentList	mem		6045600	1					
ANR	6045734	Argument	mem		6045600	0					
ANR	6045735	Identifier	mem		6045600	0					
ANR	6045736	Argument	ssub		6045600	1					
ANR	6045737	Identifier	ssub		6045600	0					
ANR	6045738	Argument	"""name_alloc_sub(string sub-table)"""		6045600	2					
ANR	6045739	PrimaryExpression	"""name_alloc_sub(string sub-table)"""		6045600	0					
ANR	6045740	ExpressionStatement	"gs_free_object ( mem , sub , ""name_alloc_sub(sub-table)"" )"	503:8:15525:15578	6045600	1	True				
ANR	6045741	CallExpression	"gs_free_object ( mem , sub , ""name_alloc_sub(sub-table)"" )"		6045600	0					
ANR	6045742	Callee	gs_free_object		6045600	0					
ANR	6045743	Identifier	gs_free_object		6045600	0					
ANR	6045744	ArgumentList	mem		6045600	1					
ANR	6045745	Argument	mem		6045600	0					
ANR	6045746	Identifier	mem		6045600	0					
ANR	6045747	Argument	sub		6045600	1					
ANR	6045748	Identifier	sub		6045600	0					
ANR	6045749	Argument	"""name_alloc_sub(sub-table)"""		6045600	2					
ANR	6045750	PrimaryExpression	"""name_alloc_sub(sub-table)"""		6045600	0					
ANR	6045751	ExpressionStatement	return_error ( gs_error_VMerror )	504:8:15588:15618	6045600	2	True				
ANR	6045752	CallExpression	return_error ( gs_error_VMerror )		6045600	0					
ANR	6045753	Callee	return_error		6045600	0					
ANR	6045754	Identifier	return_error		6045600	0					
ANR	6045755	ArgumentList	gs_error_VMerror		6045600	1					
ANR	6045756	Argument	gs_error_VMerror		6045600	0					
ANR	6045757	Identifier	gs_error_VMerror		6045600	0					
ANR	6045758	ExpressionStatement	"memset ( sub , 0 , sizeof ( name_sub_table ) )"	506:4:15630:15668	6045600	10	True				
ANR	6045759	CallExpression	"memset ( sub , 0 , sizeof ( name_sub_table ) )"		6045600	0					
ANR	6045760	Callee	memset		6045600	0					
ANR	6045761	Identifier	memset		6045600	0					
ANR	6045762	ArgumentList	sub		6045600	1					
ANR	6045763	Argument	sub		6045600	0					
ANR	6045764	Identifier	sub		6045600	0					
ANR	6045765	Argument	0		6045600	1					
ANR	6045766	PrimaryExpression	0		6045600	0					
ANR	6045767	Argument	sizeof ( name_sub_table )		6045600	2					
ANR	6045768	SizeofExpression	sizeof ( name_sub_table )		6045600	0					
ANR	6045769	Sizeof	sizeof		6045600	0					
ANR	6045770	SizeofOperand	name_sub_table		6045600	1					
ANR	6045771	ExpressionStatement	"memset ( ssub , 0 , sizeof ( name_string_sub_table_t ) )"	507:4:15674:15722	6045600	11	True				
ANR	6045772	CallExpression	"memset ( ssub , 0 , sizeof ( name_string_sub_table_t ) )"		6045600	0					
ANR	6045773	Callee	memset		6045600	0					
ANR	6045774	Identifier	memset		6045600	0					
ANR	6045775	ArgumentList	ssub		6045600	1					
ANR	6045776	Argument	ssub		6045600	0					
ANR	6045777	Identifier	ssub		6045600	0					
ANR	6045778	Argument	0		6045600	1					
ANR	6045779	PrimaryExpression	0		6045600	0					
ANR	6045780	Argument	sizeof ( name_string_sub_table_t )		6045600	2					
ANR	6045781	SizeofExpression	sizeof ( name_string_sub_table_t )		6045600	0					
ANR	6045782	Sizeof	sizeof		6045600	0					
ANR	6045783	SizeofOperand	name_string_sub_table_t		6045600	1					
ANR	6045784	ExpressionStatement	sub -> high_index = ( sub_index >> ( 16 - nt_log2_sub_size ) ) << 16	510:4:15827:15889	6045600	12	True				
ANR	6045785	AssignmentExpression	sub -> high_index = ( sub_index >> ( 16 - nt_log2_sub_size ) ) << 16		6045600	0		=			
ANR	6045786	PtrMemberAccess	sub -> high_index		6045600	0					
ANR	6045787	Identifier	sub		6045600	0					
ANR	6045788	Identifier	high_index		6045600	1					
ANR	6045789	ShiftExpression	( sub_index >> ( 16 - nt_log2_sub_size ) ) << 16		6045600	1		<<			
ANR	6045790	ShiftExpression	sub_index >> ( 16 - nt_log2_sub_size )		6045600	0		>>			
ANR	6045791	Identifier	sub_index		6045600	0					
ANR	6045792	AdditiveExpression	16 - nt_log2_sub_size		6045600	1		-			
ANR	6045793	PrimaryExpression	16		6045600	0					
ANR	6045794	Identifier	nt_log2_sub_size		6045600	1					
ANR	6045795	PrimaryExpression	16		6045600	1					
ANR	6045796	ExpressionStatement	nt -> sub [ sub_index ] . names = sub	512:4:15902:15932	6045600	13	True				
ANR	6045797	AssignmentExpression	nt -> sub [ sub_index ] . names = sub		6045600	0		=			
ANR	6045798	MemberAccess	nt -> sub [ sub_index ] . names		6045600	0					
ANR	6045799	ArrayIndexing	nt -> sub [ sub_index ]		6045600	0					
ANR	6045800	PtrMemberAccess	nt -> sub		6045600	0					
ANR	6045801	Identifier	nt		6045600	0					
ANR	6045802	Identifier	sub		6045600	1					
ANR	6045803	Identifier	sub_index		6045600	1					
ANR	6045804	Identifier	names		6045600	1					
ANR	6045805	Identifier	sub		6045600	1					
ANR	6045806	ExpressionStatement	nt -> sub [ sub_index ] . strings = ssub	513:4:15938:15971	6045600	14	True				
ANR	6045807	AssignmentExpression	nt -> sub [ sub_index ] . strings = ssub		6045600	0		=			
ANR	6045808	MemberAccess	nt -> sub [ sub_index ] . strings		6045600	0					
ANR	6045809	ArrayIndexing	nt -> sub [ sub_index ]		6045600	0					
ANR	6045810	PtrMemberAccess	nt -> sub		6045600	0					
ANR	6045811	Identifier	nt		6045600	0					
ANR	6045812	Identifier	sub		6045600	1					
ANR	6045813	Identifier	sub_index		6045600	1					
ANR	6045814	Identifier	strings		6045600	1					
ANR	6045815	Identifier	ssub		6045600	1					
ANR	6045816	ExpressionStatement	"name_scan_sub ( nt , sub_index , false , false )"	517:4:16137:16179	6045600	15	True				
ANR	6045817	CallExpression	"name_scan_sub ( nt , sub_index , false , false )"		6045600	0					
ANR	6045818	Callee	name_scan_sub		6045600	0					
ANR	6045819	Identifier	name_scan_sub		6045600	0					
ANR	6045820	ArgumentList	nt		6045600	1					
ANR	6045821	Argument	nt		6045600	0					
ANR	6045822	Identifier	nt		6045600	0					
ANR	6045823	Argument	sub_index		6045600	1					
ANR	6045824	Identifier	sub_index		6045600	0					
ANR	6045825	Argument	false		6045600	2					
ANR	6045826	Identifier	false		6045600	0					
ANR	6045827	Argument	false		6045600	3					
ANR	6045828	Identifier	false		6045600	0					
ANR	6045829	IfStatement	if ( gs_debug_c ( 'n' ) )		6045600	16					
ANR	6045830	Condition	gs_debug_c ( 'n' )	519:8:16202:16216	6045600	0	True				
ANR	6045831	CallExpression	gs_debug_c ( 'n' )		6045600	0					
ANR	6045832	Callee	gs_debug_c		6045600	0					
ANR	6045833	Identifier	gs_debug_c		6045600	0					
ANR	6045834	ArgumentList	'n'		6045600	1					
ANR	6045835	Argument	'n'		6045600	0					
ANR	6045836	PrimaryExpression	'n'		6045600	0					
ANR	6045837	CompoundStatement		40:8:1584:1590	6045600	1					
ANR	6045838	IdentifierDeclStatement	int i0 ;	520:8:16273:16279	6045600	0	True				
ANR	6045839	IdentifierDecl	i0		6045600	0					
ANR	6045840	IdentifierDeclType	int		6045600	0					
ANR	6045841	Identifier	i0		6045600	1					
ANR	6045842	ForStatement	for ( i0 = 0 ; i0 < NT_HASH_SIZE ; i0 += 16 )		6045600	1					
ANR	6045843	ForInit	i0 = 0 ;	522:13:16295:16301	6045600	0	True				
ANR	6045844	AssignmentExpression	i0 = 0		6045600	0		=			
ANR	6045845	Identifier	i0		6045600	0					
ANR	6045846	PrimaryExpression	0		6045600	1					
ANR	6045847	Condition	i0 < NT_HASH_SIZE	522:21:16303:16319	6045600	1	True				
ANR	6045848	RelationalExpression	i0 < NT_HASH_SIZE		6045600	0		<			
ANR	6045849	Identifier	i0		6045600	0					
ANR	6045850	Identifier	NT_HASH_SIZE		6045600	1					
ANR	6045851	AssignmentExpression	i0 += 16	522:40:16322:16329	6045600	2	True	+=			
ANR	6045852	Identifier	i0		6045600	0					
ANR	6045853	PrimaryExpression	16		6045600	1					
ANR	6045854	CompoundStatement		43:12:1657:1662	6045600	3					
ANR	6045855	IdentifierDeclStatement	int i ;	523:12:16346:16351	6045600	0	True				
ANR	6045856	IdentifierDecl	i		6045600	0					
ANR	6045857	IdentifierDeclType	int		6045600	0					
ANR	6045858	Identifier	i		6045600	1					
ANR	6045859	ExpressionStatement	"dmlprintf1 ( mem , ""[n]chain %d:"" , i0 )"	525:12:16366:16401	6045600	1	True				
ANR	6045860	CallExpression	"dmlprintf1 ( mem , ""[n]chain %d:"" , i0 )"		6045600	0					
ANR	6045861	Callee	dmlprintf1		6045600	0					
ANR	6045862	Identifier	dmlprintf1		6045600	0					
ANR	6045863	ArgumentList	mem		6045600	1					
ANR	6045864	Argument	mem		6045600	0					
ANR	6045865	Identifier	mem		6045600	0					
ANR	6045866	Argument	"""[n]chain %d:"""		6045600	1					
ANR	6045867	PrimaryExpression	"""[n]chain %d:"""		6045600	0					
ANR	6045868	Argument	i0		6045600	2					
ANR	6045869	Identifier	i0		6045600	0					
ANR	6045870	ForStatement	for ( i = i0 ; i < i0 + 16 ; i ++ )		6045600	2					
ANR	6045871	ForInit	i = i0 ;	526:17:16420:16426	6045600	0	True				
ANR	6045872	AssignmentExpression	i = i0		6045600	0		=			
ANR	6045873	Identifier	i		6045600	0					
ANR	6045874	Identifier	i0		6045600	1					
ANR	6045875	Condition	i < i0 + 16	526:25:16428:16438	6045600	1	True				
ANR	6045876	RelationalExpression	i < i0 + 16		6045600	0		<			
ANR	6045877	Identifier	i		6045600	0					
ANR	6045878	AdditiveExpression	i0 + 16		6045600	1		+			
ANR	6045879	Identifier	i0		6045600	0					
ANR	6045880	PrimaryExpression	16		6045600	1					
ANR	6045881	PostIncDecOperationExpression	i ++	526:38:16441:16443	6045600	2	True				
ANR	6045882	Identifier	i		6045600	0					
ANR	6045883	IncDec	++		6045600	1					
ANR	6045884	CompoundStatement		48:16:1802:1811	6045600	3					
ANR	6045885	IdentifierDeclStatement	int n = 0 ;	527:16:16464:16473	6045600	0	True				
ANR	6045886	IdentifierDecl	n = 0		6045600	0					
ANR	6045887	IdentifierDeclType	int		6045600	0					
ANR	6045888	Identifier	n		6045600	1					
ANR	6045889	AssignmentExpression	n = 0		6045600	2		=			
ANR	6045890	Identifier	n		6045600	0					
ANR	6045891	PrimaryExpression	0		6045600	1					
ANR	6045892	IdentifierDeclStatement	uint nidx ;	528:16:16491:16500	6045600	1	True				
ANR	6045893	IdentifierDecl	nidx		6045600	0					
ANR	6045894	IdentifierDeclType	uint		6045600	0					
ANR	6045895	Identifier	nidx		6045600	1					
ANR	6045896	ForStatement	"for ( nidx = nt -> hash [ i ] ; nidx != 0 ; nidx = name_next_index ( nidx , names_index_string_inline ( nt , nidx ) ) )"		6045600	2					
ANR	6045897	ForInit	nidx = nt -> hash [ i ] ;	530:21:16524:16542	6045600	0	True				
ANR	6045898	AssignmentExpression	nidx = nt -> hash [ i ]		6045600	0		=			
ANR	6045899	Identifier	nidx		6045600	0					
ANR	6045900	ArrayIndexing	nt -> hash [ i ]		6045600	1					
ANR	6045901	PtrMemberAccess	nt -> hash		6045600	0					
ANR	6045902	Identifier	nt		6045600	0					
ANR	6045903	Identifier	hash		6045600	1					
ANR	6045904	Identifier	i		6045600	1					
ANR	6045905	Condition	nidx != 0	530:41:16544:16552	6045600	1	True				
ANR	6045906	EqualityExpression	nidx != 0		6045600	0		!=			
ANR	6045907	Identifier	nidx		6045600	0					
ANR	6045908	PrimaryExpression	0		6045600	1					
ANR	6045909	AssignmentExpression	"nidx = name_next_index ( nidx , names_index_string_inline ( nt , nidx ) )"	531:21:16576:16684	6045600	2	True	=			
ANR	6045910	Identifier	nidx		6045600	0					
ANR	6045911	CallExpression	"name_next_index ( nidx , names_index_string_inline ( nt , nidx ) )"		6045600	1					
ANR	6045912	Callee	name_next_index		6045600	0					
ANR	6045913	Identifier	name_next_index		6045600	0					
ANR	6045914	ArgumentList	nidx		6045600	1					
ANR	6045915	Argument	nidx		6045600	0					
ANR	6045916	Identifier	nidx		6045600	0					
ANR	6045917	Argument	"names_index_string_inline ( nt , nidx )"		6045600	1					
ANR	6045918	CallExpression	"names_index_string_inline ( nt , nidx )"		6045600	0					
ANR	6045919	Callee	names_index_string_inline		6045600	0					
ANR	6045920	Identifier	names_index_string_inline		6045600	0					
ANR	6045921	ArgumentList	nt		6045600	1					
ANR	6045922	Argument	nt		6045600	0					
ANR	6045923	Identifier	nt		6045600	0					
ANR	6045924	Argument	nidx		6045600	1					
ANR	6045925	Identifier	nidx		6045600	0					
ANR	6045926	ExpressionStatement	n ++	534:20:16728:16731	6045600	3	True				
ANR	6045927	PostIncDecOperationExpression	n ++		6045600	0					
ANR	6045928	Identifier	n		6045600	0					
ANR	6045929	IncDec	++		6045600	1					
ANR	6045930	ExpressionStatement	"dmprintf1 ( mem , "" %d"" , n )"	535:16:16749:16773	6045600	3	True				
ANR	6045931	CallExpression	"dmprintf1 ( mem , "" %d"" , n )"		6045600	0					
ANR	6045932	Callee	dmprintf1		6045600	0					
ANR	6045933	Identifier	dmprintf1		6045600	0					
ANR	6045934	ArgumentList	mem		6045600	1					
ANR	6045935	Argument	mem		6045600	0					
ANR	6045936	Identifier	mem		6045600	0					
ANR	6045937	Argument	""" %d"""		6045600	1					
ANR	6045938	PrimaryExpression	""" %d"""		6045600	0					
ANR	6045939	Argument	n		6045600	2					
ANR	6045940	Identifier	n		6045600	0					
ANR	6045941	ExpressionStatement	"dmputc ( mem , '\\n' )"	537:12:16801:16818	6045600	3	True				
ANR	6045942	CallExpression	"dmputc ( mem , '\\n' )"		6045600	0					
ANR	6045943	Callee	dmputc		6045600	0					
ANR	6045944	Identifier	dmputc		6045600	0					
ANR	6045945	ArgumentList	mem		6045600	1					
ANR	6045946	Argument	mem		6045600	0					
ANR	6045947	Identifier	mem		6045600	0					
ANR	6045948	Argument	'\\n'		6045600	1					
ANR	6045949	PrimaryExpression	'\\n'		6045600	0					
ANR	6045950	ReturnStatement	return 0 ;	541:4:16847:16855	6045600	17	True				
ANR	6045951	PrimaryExpression	0		6045600	0					
ANR	6045952	ReturnType	static int		6045600	1					
ANR	6045953	Identifier	name_alloc_sub		6045600	2					
ANR	6045954	ParameterList	name_table * nt		6045600	3					
ANR	6045955	Parameter	name_table * nt	480:15:14671:14685	6045600	0	True				
ANR	6045956	ParameterType	name_table *		6045600	0					
ANR	6045957	Identifier	nt		6045600	1					
ANR	6045958	CFGEntryNode	ENTRY		6045600		True				
ANR	6045959	CFGExitNode	EXIT		6045600		True				
ANR	6045960	InfiniteForNode	true		6045600		True				
ANR	6045961	Symbol	nt -> sub [ sub_index ] . strings		6045600						
ANR	6045962	Symbol	sub		6045600						
ANR	6045963	Symbol	nt		6045600						
ANR	6045964	Symbol	nt -> sub [ sub_index ] . names		6045600						
ANR	6045965	Symbol	gs_alloc_struct		6045600						
ANR	6045966	Symbol	nt -> memory		6045600						
ANR	6045967	Symbol	* sub_index		6045600						
ANR	6045968	Symbol	nt -> max_sub_count		6045600						
ANR	6045969	Symbol	nt -> sub		6045600						
ANR	6045970	Symbol	sub -> high_index		6045600						
ANR	6045971	Symbol	* nt -> hash		6045600						
ANR	6045972	Symbol	mem		6045600						
ANR	6045973	Symbol	gs_error_limitcheck		6045600						
ANR	6045974	Symbol	nt_log2_sub_size		6045600						
ANR	6045975	Symbol	gs_debug_c		6045600						
ANR	6045976	Symbol	ssub		6045600						
ANR	6045977	Symbol	* nt -> sub		6045600						
ANR	6045978	Symbol	name_sub_table		6045600						
ANR	6045979	Symbol	& st_name_sub_table		6045600						
ANR	6045980	Symbol	name_string_sub_table_t		6045600						
ANR	6045981	Symbol	NT_HASH_SIZE		6045600						
ANR	6045982	Symbol	i0		6045600						
ANR	6045983	Symbol	false		6045600						
ANR	6045984	Symbol	i		6045600						
ANR	6045985	Symbol	* sub		6045600						
ANR	6045986	Symbol	nt -> hash		6045600						
ANR	6045987	Symbol	names_index_string_inline		6045600						
ANR	6045988	Symbol	n		6045600						
ANR	6045989	Symbol	* nt		6045600						
ANR	6045990	Symbol	name_next_index		6045600						
ANR	6045991	Symbol	* * nt		6045600						
ANR	6045992	Symbol	gs_error_VMerror		6045600						
ANR	6045993	Symbol	sub_index		6045600						
ANR	6045994	Symbol	nt -> sub_next		6045600						
ANR	6045995	Symbol	* i		6045600						
ANR	6045996	Symbol	nt -> sub_count		6045600						
ANR	6045997	Symbol	nidx		6045600						
ANR	6045998	Symbol	& st_name_string_sub_table		6045600						
ANR	6045999	Function	name_free_sub	545:0:16884:17698							
ANR	6046000	FunctionDef	"name_free_sub (name_table * nt , uint sub_index , bool unmark)"		6045999	0					
ANR	6046001	CompoundStatement		547:0:16956:17698	6045999	0					
ANR	6046002	IfStatement	if ( unmark )		6045999	0					
ANR	6046003	Condition	unmark	552:8:17168:17173	6045999	0	True				
ANR	6046004	Identifier	unmark		6045999	0					
ANR	6046005	CompoundStatement		8:8:285:343	6045999	1					
ANR	6046006	IdentifierDeclStatement	name_sub_table * sub = nt -> sub [ sub_index ] . names ;	553:8:17186:17232	6045999	0	True				
ANR	6046007	IdentifierDecl	* sub = nt -> sub [ sub_index ] . names		6045999	0					
ANR	6046008	IdentifierDeclType	name_sub_table *		6045999	0					
ANR	6046009	Identifier	sub		6045999	1					
ANR	6046010	AssignmentExpression	* sub = nt -> sub [ sub_index ] . names		6045999	2		=			
ANR	6046011	Identifier	sub		6045999	0					
ANR	6046012	MemberAccess	nt -> sub [ sub_index ] . names		6045999	1					
ANR	6046013	ArrayIndexing	nt -> sub [ sub_index ]		6045999	0					
ANR	6046014	PtrMemberAccess	nt -> sub		6045999	0					
ANR	6046015	Identifier	nt		6045999	0					
ANR	6046016	Identifier	sub		6045999	1					
ANR	6046017	Identifier	sub_index		6045999	1					
ANR	6046018	Identifier	names		6045999	1					
ANR	6046019	IdentifierDeclStatement	name_string_sub_table_t * ssub = nt -> sub [ sub_index ] . strings ;	554:8:17242:17300	6045999	1	True				
ANR	6046020	IdentifierDecl	* ssub = nt -> sub [ sub_index ] . strings		6045999	0					
ANR	6046021	IdentifierDeclType	name_string_sub_table_t *		6045999	0					
ANR	6046022	Identifier	ssub		6045999	1					
ANR	6046023	AssignmentExpression	* ssub = nt -> sub [ sub_index ] . strings		6045999	2		=			
ANR	6046024	Identifier	ssub		6045999	0					
ANR	6046025	MemberAccess	nt -> sub [ sub_index ] . strings		6045999	1					
ANR	6046026	ArrayIndexing	nt -> sub [ sub_index ]		6045999	0					
ANR	6046027	PtrMemberAccess	nt -> sub		6045999	0					
ANR	6046028	Identifier	nt		6045999	0					
ANR	6046029	Identifier	sub		6045999	1					
ANR	6046030	Identifier	sub_index		6045999	1					
ANR	6046031	Identifier	strings		6045999	1					
ANR	6046032	ExpressionStatement	o_set_unmarked ( ( obj_header_t * ) sub - 1 )	556:8:17311:17350	6045999	2	True				
ANR	6046033	CallExpression	o_set_unmarked ( ( obj_header_t * ) sub - 1 )		6045999	0					
ANR	6046034	Callee	o_set_unmarked		6045999	0					
ANR	6046035	Identifier	o_set_unmarked		6045999	0					
ANR	6046036	ArgumentList	( obj_header_t * ) sub - 1		6045999	1					
ANR	6046037	Argument	( obj_header_t * ) sub - 1		6045999	0					
ANR	6046038	AdditiveExpression	( obj_header_t * ) sub - 1		6045999	0		-			
ANR	6046039	CastExpression	( obj_header_t * ) sub		6045999	0					
ANR	6046040	CastTarget	obj_header_t *		6045999	0					
ANR	6046041	Identifier	sub		6045999	1					
ANR	6046042	PrimaryExpression	1		6045999	1					
ANR	6046043	ExpressionStatement	o_set_unmarked ( ( obj_header_t * ) ssub - 1 )	557:8:17360:17400	6045999	3	True				
ANR	6046044	CallExpression	o_set_unmarked ( ( obj_header_t * ) ssub - 1 )		6045999	0					
ANR	6046045	Callee	o_set_unmarked		6045999	0					
ANR	6046046	Identifier	o_set_unmarked		6045999	0					
ANR	6046047	ArgumentList	( obj_header_t * ) ssub - 1		6045999	1					
ANR	6046048	Argument	( obj_header_t * ) ssub - 1		6045999	0					
ANR	6046049	AdditiveExpression	( obj_header_t * ) ssub - 1		6045999	0		-			
ANR	6046050	CastExpression	( obj_header_t * ) ssub		6045999	0					
ANR	6046051	CastTarget	obj_header_t *		6045999	0					
ANR	6046052	Identifier	ssub		6045999	1					
ANR	6046053	PrimaryExpression	1		6045999	1					
ANR	6046054	ExpressionStatement	"gs_free_object ( nt -> memory , nt -> sub [ sub_index ] . strings , ""name_free_sub(string sub-table)"" )"	560:4:17413:17521	6045999	1	True				
ANR	6046055	CallExpression	"gs_free_object ( nt -> memory , nt -> sub [ sub_index ] . strings , ""name_free_sub(string sub-table)"" )"		6045999	0					
ANR	6046056	Callee	gs_free_object		6045999	0					
ANR	6046057	Identifier	gs_free_object		6045999	0					
ANR	6046058	ArgumentList	nt -> memory		6045999	1					
ANR	6046059	Argument	nt -> memory		6045999	0					
ANR	6046060	PtrMemberAccess	nt -> memory		6045999	0					
ANR	6046061	Identifier	nt		6045999	0					
ANR	6046062	Identifier	memory		6045999	1					
ANR	6046063	Argument	nt -> sub [ sub_index ] . strings		6045999	1					
ANR	6046064	MemberAccess	nt -> sub [ sub_index ] . strings		6045999	0					
ANR	6046065	ArrayIndexing	nt -> sub [ sub_index ]		6045999	0					
ANR	6046066	PtrMemberAccess	nt -> sub		6045999	0					
ANR	6046067	Identifier	nt		6045999	0					
ANR	6046068	Identifier	sub		6045999	1					
ANR	6046069	Identifier	sub_index		6045999	1					
ANR	6046070	Identifier	strings		6045999	1					
ANR	6046071	Argument	"""name_free_sub(string sub-table)"""		6045999	2					
ANR	6046072	PrimaryExpression	"""name_free_sub(string sub-table)"""		6045999	0					
ANR	6046073	ExpressionStatement	"gs_free_object ( nt -> memory , nt -> sub [ sub_index ] . names , ""name_free_sub(sub-table)"" )"	562:4:17527:17626	6045999	2	True				
ANR	6046074	CallExpression	"gs_free_object ( nt -> memory , nt -> sub [ sub_index ] . names , ""name_free_sub(sub-table)"" )"		6045999	0					
ANR	6046075	Callee	gs_free_object		6045999	0					
ANR	6046076	Identifier	gs_free_object		6045999	0					
ANR	6046077	ArgumentList	nt -> memory		6045999	1					
ANR	6046078	Argument	nt -> memory		6045999	0					
ANR	6046079	PtrMemberAccess	nt -> memory		6045999	0					
ANR	6046080	Identifier	nt		6045999	0					
ANR	6046081	Identifier	memory		6045999	1					
ANR	6046082	Argument	nt -> sub [ sub_index ] . names		6045999	1					
ANR	6046083	MemberAccess	nt -> sub [ sub_index ] . names		6045999	0					
ANR	6046084	ArrayIndexing	nt -> sub [ sub_index ]		6045999	0					
ANR	6046085	PtrMemberAccess	nt -> sub		6045999	0					
ANR	6046086	Identifier	nt		6045999	0					
ANR	6046087	Identifier	sub		6045999	1					
ANR	6046088	Identifier	sub_index		6045999	1					
ANR	6046089	Identifier	names		6045999	1					
ANR	6046090	Argument	"""name_free_sub(sub-table)"""		6045999	2					
ANR	6046091	PrimaryExpression	"""name_free_sub(sub-table)"""		6045999	0					
ANR	6046092	ExpressionStatement	nt -> sub [ sub_index ] . names = 0	564:4:17632:17660	6045999	3	True				
ANR	6046093	AssignmentExpression	nt -> sub [ sub_index ] . names = 0		6045999	0		=			
ANR	6046094	MemberAccess	nt -> sub [ sub_index ] . names		6045999	0					
ANR	6046095	ArrayIndexing	nt -> sub [ sub_index ]		6045999	0					
ANR	6046096	PtrMemberAccess	nt -> sub		6045999	0					
ANR	6046097	Identifier	nt		6045999	0					
ANR	6046098	Identifier	sub		6045999	1					
ANR	6046099	Identifier	sub_index		6045999	1					
ANR	6046100	Identifier	names		6045999	1					
ANR	6046101	PrimaryExpression	0		6045999	1					
ANR	6046102	ExpressionStatement	nt -> sub [ sub_index ] . strings = 0	565:4:17666:17696	6045999	4	True				
ANR	6046103	AssignmentExpression	nt -> sub [ sub_index ] . strings = 0		6045999	0		=			
ANR	6046104	MemberAccess	nt -> sub [ sub_index ] . strings		6045999	0					
ANR	6046105	ArrayIndexing	nt -> sub [ sub_index ]		6045999	0					
ANR	6046106	PtrMemberAccess	nt -> sub		6045999	0					
ANR	6046107	Identifier	nt		6045999	0					
ANR	6046108	Identifier	sub		6045999	1					
ANR	6046109	Identifier	sub_index		6045999	1					
ANR	6046110	Identifier	strings		6045999	1					
ANR	6046111	PrimaryExpression	0		6045999	1					
ANR	6046112	ReturnType	static void		6045999	1					
ANR	6046113	Identifier	name_free_sub		6045999	2					
ANR	6046114	ParameterList	"name_table * nt , uint sub_index , bool unmark"		6045999	3					
ANR	6046115	Parameter	name_table * nt	546:14:16910:16924	6045999	0	True				
ANR	6046116	ParameterType	name_table *		6045999	0					
ANR	6046117	Identifier	nt		6045999	1					
ANR	6046118	Parameter	uint sub_index	546:31:16927:16940	6045999	1	True				
ANR	6046119	ParameterType	uint		6045999	0					
ANR	6046120	Identifier	sub_index		6045999	1					
ANR	6046121	Parameter	bool unmark	546:47:16943:16953	6045999	2	True				
ANR	6046122	ParameterType	bool		6045999	0					
ANR	6046123	Identifier	unmark		6045999	1					
ANR	6046124	CFGEntryNode	ENTRY		6045999		True				
ANR	6046125	CFGExitNode	EXIT		6045999		True				
ANR	6046126	Symbol	nt -> sub [ sub_index ] . strings		6045999						
ANR	6046127	Symbol	sub		6045999						
ANR	6046128	Symbol	nt		6045999						
ANR	6046129	Symbol	nt -> sub [ sub_index ] . names		6045999						
ANR	6046130	Symbol	* sub_index		6045999						
ANR	6046131	Symbol	nt -> memory		6045999						
ANR	6046132	Symbol	unmark		6045999						
ANR	6046133	Symbol	* nt		6045999						
ANR	6046134	Symbol	nt -> sub		6045999						
ANR	6046135	Symbol	* * nt		6045999						
ANR	6046136	Symbol	sub_index		6045999						
ANR	6046137	Symbol	* nt -> sub		6045999						
ANR	6046138	Symbol	ssub		6045999						
ANR	6046139	Function	name_scan_sub	572:0:17939:19266							
ANR	6046140	FunctionDef	"name_scan_sub (name_table * nt , uint sub_index , bool free_empty , bool unmark)"		6046139	0					
ANR	6046141	CompoundStatement		574:0:18028:19266	6046139	0					
ANR	6046142	IdentifierDeclStatement	name_string_sub_table_t * ssub = nt -> sub [ sub_index ] . strings ;	575:4:18034:18092	6046139	0	True				
ANR	6046143	IdentifierDecl	* ssub = nt -> sub [ sub_index ] . strings		6046139	0					
ANR	6046144	IdentifierDeclType	name_string_sub_table_t *		6046139	0					
ANR	6046145	Identifier	ssub		6046139	1					
ANR	6046146	AssignmentExpression	* ssub = nt -> sub [ sub_index ] . strings		6046139	2		=			
ANR	6046147	Identifier	ssub		6046139	0					
ANR	6046148	MemberAccess	nt -> sub [ sub_index ] . strings		6046139	1					
ANR	6046149	ArrayIndexing	nt -> sub [ sub_index ]		6046139	0					
ANR	6046150	PtrMemberAccess	nt -> sub		6046139	0					
ANR	6046151	Identifier	nt		6046139	0					
ANR	6046152	Identifier	sub		6046139	1					
ANR	6046153	Identifier	sub_index		6046139	1					
ANR	6046154	Identifier	strings		6046139	1					
ANR	6046155	IdentifierDeclStatement	uint free = nt -> free ;	576:4:18098:18118	6046139	1	True				
ANR	6046156	IdentifierDecl	free = nt -> free		6046139	0					
ANR	6046157	IdentifierDeclType	uint		6046139	0					
ANR	6046158	Identifier	free		6046139	1					
ANR	6046159	AssignmentExpression	free = nt -> free		6046139	2		=			
ANR	6046160	Identifier	free		6046139	0					
ANR	6046161	PtrMemberAccess	nt -> free		6046139	1					
ANR	6046162	Identifier	nt		6046139	0					
ANR	6046163	Identifier	free		6046139	1					
ANR	6046164	IdentifierDeclStatement	uint nbase = sub_index << nt_log2_sub_size ;	577:4:18124:18166	6046139	2	True				
ANR	6046165	IdentifierDecl	nbase = sub_index << nt_log2_sub_size		6046139	0					
ANR	6046166	IdentifierDeclType	uint		6046139	0					
ANR	6046167	Identifier	nbase		6046139	1					
ANR	6046168	AssignmentExpression	nbase = sub_index << nt_log2_sub_size		6046139	2		=			
ANR	6046169	Identifier	nbase		6046139	0					
ANR	6046170	ShiftExpression	sub_index << nt_log2_sub_size		6046139	1		<<			
ANR	6046171	Identifier	sub_index		6046139	0					
ANR	6046172	Identifier	nt_log2_sub_size		6046139	1					
ANR	6046173	IdentifierDeclStatement	uint ncnt = nbase + ( nt_sub_size - 1 ) ;	578:4:18172:18209	6046139	3	True				
ANR	6046174	IdentifierDecl	ncnt = nbase + ( nt_sub_size - 1 )		6046139	0					
ANR	6046175	IdentifierDeclType	uint		6046139	0					
ANR	6046176	Identifier	ncnt		6046139	1					
ANR	6046177	AssignmentExpression	ncnt = nbase + ( nt_sub_size - 1 )		6046139	2		=			
ANR	6046178	Identifier	ncnt		6046139	0					
ANR	6046179	AdditiveExpression	nbase + ( nt_sub_size - 1 )		6046139	1		+			
ANR	6046180	Identifier	nbase		6046139	0					
ANR	6046181	AdditiveExpression	nt_sub_size - 1		6046139	1		-			
ANR	6046182	Identifier	nt_sub_size		6046139	0					
ANR	6046183	PrimaryExpression	1		6046139	1					
ANR	6046184	IdentifierDeclStatement	bool keep = ! free_empty ;	579:4:18215:18238	6046139	4	True				
ANR	6046185	IdentifierDecl	keep = ! free_empty		6046139	0					
ANR	6046186	IdentifierDeclType	bool		6046139	0					
ANR	6046187	Identifier	keep		6046139	1					
ANR	6046188	AssignmentExpression	keep = ! free_empty		6046139	2		=			
ANR	6046189	Identifier	keep		6046139	0					
ANR	6046190	UnaryOperationExpression	! free_empty		6046139	1					
ANR	6046191	UnaryOperator	!		6046139	0					
ANR	6046192	Identifier	free_empty		6046139	1					
ANR	6046193	IfStatement	if ( ssub == 0 )		6046139	5					
ANR	6046194	Condition	ssub == 0	581:8:18249:18257	6046139	0	True				
ANR	6046195	EqualityExpression	ssub == 0		6046139	0		==			
ANR	6046196	Identifier	ssub		6046139	0					
ANR	6046197	PrimaryExpression	0		6046139	1					
ANR	6046198	ReturnStatement	return ;	582:8:18268:18274	6046139	1	True				
ANR	6046199	IfStatement	if ( nbase == 0 )		6046139	6					
ANR	6046200	Condition	nbase == 0	583:8:18284:18293	6046139	0	True				
ANR	6046201	EqualityExpression	nbase == 0		6046139	0		==			
ANR	6046202	Identifier	nbase		6046139	0					
ANR	6046203	PrimaryExpression	0		6046139	1					
ANR	6046204	ExpressionStatement	"nbase = 1 , keep = true"	584:8:18304:18326	6046139	1	True				
ANR	6046205	Expression	"nbase = 1 , keep = true"		6046139	0					
ANR	6046206	AssignmentExpression	nbase = 1		6046139	0		=			
ANR	6046207	Identifier	nbase		6046139	0					
ANR	6046208	PrimaryExpression	1		6046139	1					
ANR	6046209	AssignmentExpression	keep = true		6046139	1		=			
ANR	6046210	Identifier	keep		6046139	0					
ANR	6046211	Identifier	true		6046139	1					
ANR	6046212	ForStatement	for ( ; ; -- ncnt )		6046139	7					
ANR	6046213	UnaryExpression	-- ncnt	585:12:18364:18369	6046139	0	True				
ANR	6046214	IncDec	--		6046139	0					
ANR	6046215	Identifier	ncnt		6046139	1					
ANR	6046216	CompoundStatement		14:8:400:463	6046139	1					
ANR	6046217	IdentifierDeclStatement	uint nidx = name_count_to_index ( ncnt ) ;	586:8:18382:18419	6046139	0	True				
ANR	6046218	IdentifierDecl	nidx = name_count_to_index ( ncnt )		6046139	0					
ANR	6046219	IdentifierDeclType	uint		6046139	0					
ANR	6046220	Identifier	nidx		6046139	1					
ANR	6046221	AssignmentExpression	nidx = name_count_to_index ( ncnt )		6046139	2		=			
ANR	6046222	Identifier	nidx		6046139	0					
ANR	6046223	CallExpression	name_count_to_index ( ncnt )		6046139	1					
ANR	6046224	Callee	name_count_to_index		6046139	0					
ANR	6046225	Identifier	name_count_to_index		6046139	0					
ANR	6046226	ArgumentList	ncnt		6046139	1					
ANR	6046227	Argument	ncnt		6046139	0					
ANR	6046228	Identifier	ncnt		6046139	0					
ANR	6046229	IdentifierDeclStatement	name_string_t * pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ] ;	587:8:18429:18492	6046139	1	True				
ANR	6046230	IdentifierDecl	* pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ]		6046139	0					
ANR	6046231	IdentifierDeclType	name_string_t *		6046139	0					
ANR	6046232	Identifier	pnstr		6046139	1					
ANR	6046233	AssignmentExpression	* pnstr = & ssub -> strings [ nidx & nt_sub_index_mask ]		6046139	2		=			
ANR	6046234	Identifier	pnstr		6046139	0					
ANR	6046235	UnaryOperationExpression	& ssub -> strings [ nidx & nt_sub_index_mask ]		6046139	1					
ANR	6046236	UnaryOperator	&		6046139	0					
ANR	6046237	ArrayIndexing	ssub -> strings [ nidx & nt_sub_index_mask ]		6046139	1					
ANR	6046238	PtrMemberAccess	ssub -> strings		6046139	0					
ANR	6046239	Identifier	ssub		6046139	0					
ANR	6046240	Identifier	strings		6046139	1					
ANR	6046241	BitAndExpression	nidx & nt_sub_index_mask		6046139	1		&			
ANR	6046242	Identifier	nidx		6046139	0					
ANR	6046243	Identifier	nt_sub_index_mask		6046139	1					
ANR	6046244	IfStatement	if ( pnstr -> mark )		6046139	2					
ANR	6046245	Condition	pnstr -> mark	589:12:18507:18517	6046139	0	True				
ANR	6046246	PtrMemberAccess	pnstr -> mark		6046139	0					
ANR	6046247	Identifier	pnstr		6046139	0					
ANR	6046248	Identifier	mark		6046139	1					
ANR	6046249	ExpressionStatement	keep = true	590:12:18532:18543	6046139	1	True				
ANR	6046250	AssignmentExpression	keep = true		6046139	0		=			
ANR	6046251	Identifier	keep		6046139	0					
ANR	6046252	Identifier	true		6046139	1					
ANR	6046253	ElseStatement	else		6046139	0					
ANR	6046254	CompoundStatement		18:13:529:529	6046139	0					
ANR	6046255	ExpressionStatement	"set_name_next_index ( nidx , pnstr , free )"	592:12:18572:18610	6046139	0	True				
ANR	6046256	CallExpression	"set_name_next_index ( nidx , pnstr , free )"		6046139	0					
ANR	6046257	Callee	set_name_next_index		6046139	0					
ANR	6046258	Identifier	set_name_next_index		6046139	0					
ANR	6046259	ArgumentList	nidx		6046139	1					
ANR	6046260	Argument	nidx		6046139	0					
ANR	6046261	Identifier	nidx		6046139	0					
ANR	6046262	Argument	pnstr		6046139	1					
ANR	6046263	Identifier	pnstr		6046139	0					
ANR	6046264	Argument	free		6046139	2					
ANR	6046265	Identifier	free		6046139	0					
ANR	6046266	ExpressionStatement	free = nidx	593:12:18624:18635	6046139	1	True				
ANR	6046267	AssignmentExpression	free = nidx		6046139	0		=			
ANR	6046268	Identifier	free		6046139	0					
ANR	6046269	Identifier	nidx		6046139	1					
ANR	6046270	IfStatement	if ( ncnt == nbase )		6046139	3					
ANR	6046271	Condition	ncnt == nbase	595:12:18659:18671	6046139	0	True				
ANR	6046272	EqualityExpression	ncnt == nbase		6046139	0		==			
ANR	6046273	Identifier	ncnt		6046139	0					
ANR	6046274	Identifier	nbase		6046139	1					
ANR	6046275	BreakStatement	break ;	596:12:18686:18691	6046139	1	True				
ANR	6046276	IfStatement	if ( keep )		6046139	8					
ANR	6046277	Condition	keep	598:8:18707:18710	6046139	0	True				
ANR	6046278	Identifier	keep		6046139	0					
ANR	6046279	ExpressionStatement	nt -> free = free	599:8:18721:18736	6046139	1	True				
ANR	6046280	AssignmentExpression	nt -> free = free		6046139	0		=			
ANR	6046281	PtrMemberAccess	nt -> free		6046139	0					
ANR	6046282	Identifier	nt		6046139	0					
ANR	6046283	Identifier	free		6046139	1					
ANR	6046284	Identifier	free		6046139	1					
ANR	6046285	ElseStatement	else		6046139	0					
ANR	6046286	CompoundStatement		27:9:718:718	6046139	0					
ANR	6046287	ExpressionStatement	"name_free_sub ( nt , sub_index , unmark )"	602:8:18810:18846	6046139	0	True				
ANR	6046288	CallExpression	"name_free_sub ( nt , sub_index , unmark )"		6046139	0					
ANR	6046289	Callee	name_free_sub		6046139	0					
ANR	6046290	Identifier	name_free_sub		6046139	0					
ANR	6046291	ArgumentList	nt		6046139	1					
ANR	6046292	Argument	nt		6046139	0					
ANR	6046293	Identifier	nt		6046139	0					
ANR	6046294	Argument	sub_index		6046139	1					
ANR	6046295	Identifier	sub_index		6046139	0					
ANR	6046296	Argument	unmark		6046139	2					
ANR	6046297	Identifier	unmark		6046139	0					
ANR	6046298	IfStatement	if ( sub_index == nt -> sub_count - 1 )		6046139	1					
ANR	6046299	Condition	sub_index == nt -> sub_count - 1	603:12:18860:18889	6046139	0	True				
ANR	6046300	EqualityExpression	sub_index == nt -> sub_count - 1		6046139	0		==			
ANR	6046301	Identifier	sub_index		6046139	0					
ANR	6046302	AdditiveExpression	nt -> sub_count - 1		6046139	1		-			
ANR	6046303	PtrMemberAccess	nt -> sub_count		6046139	0					
ANR	6046304	Identifier	nt		6046139	0					
ANR	6046305	Identifier	sub_count		6046139	1					
ANR	6046306	PrimaryExpression	1		6046139	1					
ANR	6046307	CompoundStatement		30:44:863:863	6046139	1					
ANR	6046308	DoStatement	do		6046139	0					
ANR	6046309	CompoundStatement		32:15:946:946	6046139	0					
ANR	6046310	ExpressionStatement	-- sub_index	606:16:18993:19004	6046139	0	True				
ANR	6046311	UnaryExpression	-- sub_index		6046139	0					
ANR	6046312	IncDec	--		6046139	0					
ANR	6046313	Identifier	sub_index		6046139	1					
ANR	6046314	Condition	nt -> sub [ sub_index ] . names == 0	607:21:19027:19055	6046139	1	True				
ANR	6046315	EqualityExpression	nt -> sub [ sub_index ] . names == 0		6046139	0		==			
ANR	6046316	MemberAccess	nt -> sub [ sub_index ] . names		6046139	0					
ANR	6046317	ArrayIndexing	nt -> sub [ sub_index ]		6046139	0					
ANR	6046318	PtrMemberAccess	nt -> sub		6046139	0					
ANR	6046319	Identifier	nt		6046139	0					
ANR	6046320	Identifier	sub		6046139	1					
ANR	6046321	Identifier	sub_index		6046139	1					
ANR	6046322	Identifier	names		6046139	1					
ANR	6046323	PrimaryExpression	0		6046139	1					
ANR	6046324	ExpressionStatement	nt -> sub_count = sub_index + 1	608:12:19071:19100	6046139	1	True				
ANR	6046325	AssignmentExpression	nt -> sub_count = sub_index + 1		6046139	0		=			
ANR	6046326	PtrMemberAccess	nt -> sub_count		6046139	0					
ANR	6046327	Identifier	nt		6046139	0					
ANR	6046328	Identifier	sub_count		6046139	1					
ANR	6046329	AdditiveExpression	sub_index + 1		6046139	1		+			
ANR	6046330	Identifier	sub_index		6046139	0					
ANR	6046331	PrimaryExpression	1		6046139	1					
ANR	6046332	IfStatement	if ( nt -> sub_next > sub_index )		6046139	2					
ANR	6046333	Condition	nt -> sub_next > sub_index	609:16:19118:19141	6046139	0	True				
ANR	6046334	RelationalExpression	nt -> sub_next > sub_index		6046139	0		>			
ANR	6046335	PtrMemberAccess	nt -> sub_next		6046139	0					
ANR	6046336	Identifier	nt		6046139	0					
ANR	6046337	Identifier	sub_next		6046139	1					
ANR	6046338	Identifier	sub_index		6046139	1					
ANR	6046339	ExpressionStatement	nt -> sub_next = sub_index	610:16:19160:19184	6046139	1	True				
ANR	6046340	AssignmentExpression	nt -> sub_next = sub_index		6046139	0		=			
ANR	6046341	PtrMemberAccess	nt -> sub_next		6046139	0					
ANR	6046342	Identifier	nt		6046139	0					
ANR	6046343	Identifier	sub_next		6046139	1					
ANR	6046344	Identifier	sub_index		6046139	1					
ANR	6046345	ElseStatement	else		6046139	0					
ANR	6046346	IfStatement	if ( nt -> sub_next == sub_index )		6046139	0					
ANR	6046347	Condition	nt -> sub_next == sub_index	611:19:19205:19229	6046139	0	True				
ANR	6046348	EqualityExpression	nt -> sub_next == sub_index		6046139	0		==			
ANR	6046349	PtrMemberAccess	nt -> sub_next		6046139	0					
ANR	6046350	Identifier	nt		6046139	0					
ANR	6046351	Identifier	sub_next		6046139	1					
ANR	6046352	Identifier	sub_index		6046139	1					
ANR	6046353	ExpressionStatement	nt -> sub_next --	612:12:19244:19258	6046139	1	True				
ANR	6046354	PostIncDecOperationExpression	nt -> sub_next --		6046139	0					
ANR	6046355	PtrMemberAccess	nt -> sub_next		6046139	0					
ANR	6046356	Identifier	nt		6046139	0					
ANR	6046357	Identifier	sub_next		6046139	1					
ANR	6046358	IncDec	--		6046139	1					
ANR	6046359	ReturnType	static void		6046139	1					
ANR	6046360	Identifier	name_scan_sub		6046139	2					
ANR	6046361	ParameterList	"name_table * nt , uint sub_index , bool free_empty , bool unmark"		6046139	3					
ANR	6046362	Parameter	name_table * nt	573:14:17965:17979	6046139	0	True				
ANR	6046363	ParameterType	name_table *		6046139	0					
ANR	6046364	Identifier	nt		6046139	1					
ANR	6046365	Parameter	uint sub_index	573:31:17982:17995	6046139	1	True				
ANR	6046366	ParameterType	uint		6046139	0					
ANR	6046367	Identifier	sub_index		6046139	1					
ANR	6046368	Parameter	bool free_empty	573:47:17998:18012	6046139	2	True				
ANR	6046369	ParameterType	bool		6046139	0					
ANR	6046370	Identifier	free_empty		6046139	1					
ANR	6046371	Parameter	bool unmark	573:64:18015:18025	6046139	3	True				
ANR	6046372	ParameterType	bool		6046139	0					
ANR	6046373	Identifier	unmark		6046139	1					
ANR	6046374	CFGEntryNode	ENTRY		6046139		True				
ANR	6046375	CFGExitNode	EXIT		6046139		True				
ANR	6046376	InfiniteForNode	true		6046139		True				
ANR	6046377	Symbol	nt -> sub [ sub_index ] . strings		6046139						
ANR	6046378	Symbol	name_count_to_index		6046139						
ANR	6046379	Symbol	nbase		6046139						
ANR	6046380	Symbol	* pnstr		6046139						
ANR	6046381	Symbol	nt_sub_size		6046139						
ANR	6046382	Symbol	ssub -> strings		6046139						
ANR	6046383	Symbol	nt		6046139						
ANR	6046384	Symbol	nt -> sub [ sub_index ] . names		6046139						
ANR	6046385	Symbol	* ssub		6046139						
ANR	6046386	Symbol	* sub_index		6046139						
ANR	6046387	Symbol	ncnt		6046139						
ANR	6046388	Symbol	unmark		6046139						
ANR	6046389	Symbol	nt -> free		6046139						
ANR	6046390	Symbol	nt -> sub		6046139						
ANR	6046391	Symbol	nt_log2_sub_size		6046139						
ANR	6046392	Symbol	ssub		6046139						
ANR	6046393	Symbol	* nt -> sub		6046139						
ANR	6046394	Symbol	nt_sub_index_mask		6046139						
ANR	6046395	Symbol	free		6046139						
ANR	6046396	Symbol	pnstr -> mark		6046139						
ANR	6046397	Symbol	pnstr		6046139						
ANR	6046398	Symbol	* nt		6046139						
ANR	6046399	Symbol	* * nt		6046139						
ANR	6046400	Symbol	sub_index		6046139						
ANR	6046401	Symbol	nt -> sub_next		6046139						
ANR	6046402	Symbol	keep		6046139						
ANR	6046403	Symbol	true		6046139						
ANR	6046404	Symbol	nt -> sub_count		6046139						
ANR	6046405	Symbol	nidx		6046139						
ANR	6046406	Symbol	free_empty		6046139						
ANR	6046407	DeclStmt									
ANR	6046408	Decl							uint	uint	i
ANR	6046409	DeclStmt									
ANR	6046410	Decl							uint	uint	sub_count
ANR	6046411	DeclStmt									
ANR	6046412	Decl							uint	uint	i
ANR	6046413	DeclStmt									
ANR	6046414	Decl							name_string_t	name_string_t *	pnstr
ANR	6046415	DeclStmt									
ANR	6046416	Decl							uint	uint	i
ANR	6046417	DeclStmt									
ANR	6046418	Decl							gs_const_string	gs_const_string	nstr
