command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	10908580	File	data/converged/CVE-2018-16863_ghostpdl/xpsmem.c								
ANR	10908581	Function	xps_realloc_imp	21:0:657:870							
ANR	10908582	FunctionDef	"xps_realloc_imp (xps_context_t * ctx , void * ptr , int size , const char * func)"		10908581	0					
ANR	10908583	CompoundStatement		23:0:739:870	10908581	0					
ANR	10908584	IfStatement	if ( ! ptr )		10908581	0					
ANR	10908585	Condition	! ptr	24:8:749:752	10908581	0	True				
ANR	10908586	UnaryOperationExpression	! ptr		10908581	0					
ANR	10908587	UnaryOperator	!		10908581	0					
ANR	10908588	Identifier	ptr		10908581	1					
ANR	10908589	ReturnStatement	"return gs_alloc_bytes ( ctx -> memory , size , func ) ;"	25:8:763:809	10908581	1	True				
ANR	10908590	CallExpression	"gs_alloc_bytes ( ctx -> memory , size , func )"		10908581	0					
ANR	10908591	Callee	gs_alloc_bytes		10908581	0					
ANR	10908592	Identifier	gs_alloc_bytes		10908581	0					
ANR	10908593	ArgumentList	ctx -> memory		10908581	1					
ANR	10908594	Argument	ctx -> memory		10908581	0					
ANR	10908595	PtrMemberAccess	ctx -> memory		10908581	0					
ANR	10908596	Identifier	ctx		10908581	0					
ANR	10908597	Identifier	memory		10908581	1					
ANR	10908598	Argument	size		10908581	1					
ANR	10908599	Identifier	size		10908581	0					
ANR	10908600	Argument	func		10908581	2					
ANR	10908601	Identifier	func		10908581	0					
ANR	10908602	ReturnStatement	"return gs_resize_object ( ctx -> memory , ptr , size , func ) ;"	26:4:815:868	10908581	1	True				
ANR	10908603	CallExpression	"gs_resize_object ( ctx -> memory , ptr , size , func )"		10908581	0					
ANR	10908604	Callee	gs_resize_object		10908581	0					
ANR	10908605	Identifier	gs_resize_object		10908581	0					
ANR	10908606	ArgumentList	ctx -> memory		10908581	1					
ANR	10908607	Argument	ctx -> memory		10908581	0					
ANR	10908608	PtrMemberAccess	ctx -> memory		10908581	0					
ANR	10908609	Identifier	ctx		10908581	0					
ANR	10908610	Identifier	memory		10908581	1					
ANR	10908611	Argument	ptr		10908581	1					
ANR	10908612	Identifier	ptr		10908581	0					
ANR	10908613	Argument	size		10908581	2					
ANR	10908614	Identifier	size		10908581	0					
ANR	10908615	Argument	func		10908581	3					
ANR	10908616	Identifier	func		10908581	0					
ANR	10908617	ReturnType	void *		10908581	1					
ANR	10908618	Identifier	xps_realloc_imp		10908581	2					
ANR	10908619	ParameterList	"xps_context_t * ctx , void * ptr , int size , const char * func"		10908581	3					
ANR	10908620	Parameter	xps_context_t * ctx	22:16:680:697	10908581	0	True				
ANR	10908621	ParameterType	xps_context_t *		10908581	0					
ANR	10908622	Identifier	ctx		10908581	1					
ANR	10908623	Parameter	void * ptr	22:36:700:708	10908581	1	True				
ANR	10908624	ParameterType	void *		10908581	0					
ANR	10908625	Identifier	ptr		10908581	1					
ANR	10908626	Parameter	int size	22:47:711:718	10908581	2	True				
ANR	10908627	ParameterType	int		10908581	0					
ANR	10908628	Identifier	size		10908581	1					
ANR	10908629	Parameter	const char * func	22:57:721:736	10908581	3	True				
ANR	10908630	ParameterType	const char *		10908581	0					
ANR	10908631	Identifier	func		10908581	1					
ANR	10908632	CFGEntryNode	ENTRY		10908581		True				
ANR	10908633	CFGExitNode	EXIT		10908581		True				
ANR	10908634	Symbol	ctx -> memory		10908581						
ANR	10908635	Symbol	gs_alloc_bytes		10908581						
ANR	10908636	Symbol	size		10908581						
ANR	10908637	Symbol	func		10908581						
ANR	10908638	Symbol	ctx		10908581						
ANR	10908639	Symbol	gs_resize_object		10908581						
ANR	10908640	Symbol	* ctx		10908581						
ANR	10908641	Symbol	ptr		10908581						
ANR	10908642	Function	xps_tolower	29:0:873:979							
ANR	10908643	FunctionDef	xps_tolower (int c)		10908642	0					
ANR	10908644	CompoundStatement		31:0:910:979	10908642	0					
ANR	10908645	IfStatement	if ( c >= 'A' && c <= 'Z' )		10908642	0					
ANR	10908646	Condition	c >= 'A' && c <= 'Z'	32:8:920:939	10908642	0	True				
ANR	10908647	AndExpression	c >= 'A' && c <= 'Z'		10908642	0		&&			
ANR	10908648	RelationalExpression	c >= 'A'		10908642	0		>=			
ANR	10908649	Identifier	c		10908642	0					
ANR	10908650	PrimaryExpression	'A'		10908642	1					
ANR	10908651	RelationalExpression	c <= 'Z'		10908642	1		<=			
ANR	10908652	Identifier	c		10908642	0					
ANR	10908653	PrimaryExpression	'Z'		10908642	1					
ANR	10908654	ReturnStatement	return c + 32 ;	33:8:950:963	10908642	1	True				
ANR	10908655	AdditiveExpression	c + 32		10908642	0		+			
ANR	10908656	Identifier	c		10908642	0					
ANR	10908657	PrimaryExpression	32		10908642	1					
ANR	10908658	ReturnStatement	return c ;	34:4:969:977	10908642	1	True				
ANR	10908659	Identifier	c		10908642	0					
ANR	10908660	ReturnType	static inline int		10908642	1					
ANR	10908661	Identifier	xps_tolower		10908642	2					
ANR	10908662	ParameterList	int c		10908642	3					
ANR	10908663	Parameter	int c	30:12:903:907	10908642	0	True				
ANR	10908664	ParameterType	int		10908642	0					
ANR	10908665	Identifier	c		10908642	1					
ANR	10908666	CFGEntryNode	ENTRY		10908642		True				
ANR	10908667	CFGExitNode	EXIT		10908642		True				
ANR	10908668	Symbol	c		10908642						
ANR	10908669	Function	xps_strcasecmp	37:0:982:1240							
ANR	10908670	FunctionDef	"xps_strcasecmp (const char * a , const char * b)"		10908669	0					
ANR	10908671	CompoundStatement		39:0:1031:1240	10908669	0					
ANR	10908672	WhileStatement	while ( xps_tolower ( * a ) == xps_tolower ( * b ) )		10908669	0					
ANR	10908673	Condition	xps_tolower ( * a ) == xps_tolower ( * b )	40:15:1048:1081	10908669	0	True				
ANR	10908674	EqualityExpression	xps_tolower ( * a ) == xps_tolower ( * b )		10908669	0		==			
ANR	10908675	CallExpression	xps_tolower ( * a )		10908669	0					
ANR	10908676	Callee	xps_tolower		10908669	0					
ANR	10908677	Identifier	xps_tolower		10908669	0					
ANR	10908678	ArgumentList	* a		10908669	1					
ANR	10908679	Argument	* a		10908669	0					
ANR	10908680	UnaryOperationExpression	* a		10908669	0					
ANR	10908681	UnaryOperator	*		10908669	0					
ANR	10908682	Identifier	a		10908669	1					
ANR	10908683	CallExpression	xps_tolower ( * b )		10908669	1					
ANR	10908684	Callee	xps_tolower		10908669	0					
ANR	10908685	Identifier	xps_tolower		10908669	0					
ANR	10908686	ArgumentList	* b		10908669	1					
ANR	10908687	Argument	* b		10908669	0					
ANR	10908688	UnaryOperationExpression	* b		10908669	0					
ANR	10908689	UnaryOperator	*		10908669	0					
ANR	10908690	Identifier	b		10908669	1					
ANR	10908691	CompoundStatement		3:8:60:60	10908669	1					
ANR	10908692	IfStatement	if ( * a ++ == 0 )		10908669	0					
ANR	10908693	Condition	* a ++ == 0	42:20:1114:1122	10908669	0	True				
ANR	10908694	EqualityExpression	* a ++ == 0		10908669	0		==			
ANR	10908695	UnaryOperationExpression	* a ++		10908669	0					
ANR	10908696	UnaryOperator	*		10908669	0					
ANR	10908697	PostIncDecOperationExpression	a ++		10908669	1					
ANR	10908698	Identifier	a		10908669	0					
ANR	10908699	IncDec	++		10908669	1					
ANR	10908700	PrimaryExpression	0		10908669	1					
ANR	10908701	ReturnStatement	return 0 ;	43:24:1149:1157	10908669	1	True				
ANR	10908702	PrimaryExpression	0		10908669	0					
ANR	10908703	ExpressionStatement	b ++	44:16:1175:1178	10908669	1	True				
ANR	10908704	PostIncDecOperationExpression	b ++		10908669	0					
ANR	10908705	Identifier	b		10908669	0					
ANR	10908706	IncDec	++		10908669	1					
ANR	10908707	ReturnStatement	return xps_tolower ( * a ) - xps_tolower ( * b ) ;	46:8:1198:1238	10908669	1	True				
ANR	10908708	AdditiveExpression	xps_tolower ( * a ) - xps_tolower ( * b )		10908669	0		-			
ANR	10908709	CallExpression	xps_tolower ( * a )		10908669	0					
ANR	10908710	Callee	xps_tolower		10908669	0					
ANR	10908711	Identifier	xps_tolower		10908669	0					
ANR	10908712	ArgumentList	* a		10908669	1					
ANR	10908713	Argument	* a		10908669	0					
ANR	10908714	UnaryOperationExpression	* a		10908669	0					
ANR	10908715	UnaryOperator	*		10908669	0					
ANR	10908716	Identifier	a		10908669	1					
ANR	10908717	CallExpression	xps_tolower ( * b )		10908669	1					
ANR	10908718	Callee	xps_tolower		10908669	0					
ANR	10908719	Identifier	xps_tolower		10908669	0					
ANR	10908720	ArgumentList	* b		10908669	1					
ANR	10908721	Argument	* b		10908669	0					
ANR	10908722	UnaryOperationExpression	* b		10908669	0					
ANR	10908723	UnaryOperator	*		10908669	0					
ANR	10908724	Identifier	b		10908669	1					
ANR	10908725	ReturnType	int		10908669	1					
ANR	10908726	Identifier	xps_strcasecmp		10908669	2					
ANR	10908727	ParameterList	"const char * a , const char * b"		10908669	3					
ANR	10908728	Parameter	const char * a	38:15:1001:1013	10908669	0	True				
ANR	10908729	ParameterType	const char *		10908669	0					
ANR	10908730	Identifier	a		10908669	1					
ANR	10908731	Parameter	const char * b	38:30:1016:1028	10908669	1	True				
ANR	10908732	ParameterType	const char *		10908669	0					
ANR	10908733	Identifier	b		10908669	1					
ANR	10908734	CFGEntryNode	ENTRY		10908669		True				
ANR	10908735	CFGExitNode	EXIT		10908669		True				
ANR	10908736	Symbol	a		10908669						
ANR	10908737	Symbol	b		10908669						
ANR	10908738	Symbol	xps_tolower		10908669						
ANR	10908739	Symbol	* a		10908669						
ANR	10908740	Symbol	* b		10908669						
ANR	10908741	Symbol	* a ++		10908669						
ANR	10908742	Function	xps_strdup_imp	49:0:1243:1488							
ANR	10908743	FunctionDef	"xps_strdup_imp (xps_context_t * ctx , const char * str , const char * cname)"		10908742	0					
ANR	10908744	CompoundStatement		51:0:1321:1488	10908742	0					
ANR	10908745	IdentifierDeclStatement	char * cpy = NULL ;	52:4:1327:1343	10908742	0	True				
ANR	10908746	IdentifierDecl	* cpy = NULL		10908742	0					
ANR	10908747	IdentifierDeclType	char *		10908742	0					
ANR	10908748	Identifier	cpy		10908742	1					
ANR	10908749	AssignmentExpression	* cpy = NULL		10908742	2		=			
ANR	10908750	Identifier	NULL		10908742	0					
ANR	10908751	Identifier	NULL		10908742	1					
ANR	10908752	IfStatement	if ( str )		10908742	1					
ANR	10908753	Condition	str	53:8:1353:1355	10908742	0	True				
ANR	10908754	Identifier	str		10908742	0					
ANR	10908755	ExpressionStatement	"cpy = ( char * ) gs_alloc_bytes ( ctx -> memory , strlen ( str ) + 1 , cname )"	54:8:1366:1431	10908742	1	True				
ANR	10908756	AssignmentExpression	"cpy = ( char * ) gs_alloc_bytes ( ctx -> memory , strlen ( str ) + 1 , cname )"		10908742	0		=			
ANR	10908757	Identifier	cpy		10908742	0					
ANR	10908758	CastExpression	"( char * ) gs_alloc_bytes ( ctx -> memory , strlen ( str ) + 1 , cname )"		10908742	1					
ANR	10908759	CastTarget	char *		10908742	0					
ANR	10908760	CallExpression	"gs_alloc_bytes ( ctx -> memory , strlen ( str ) + 1 , cname )"		10908742	1					
ANR	10908761	Callee	gs_alloc_bytes		10908742	0					
ANR	10908762	Identifier	gs_alloc_bytes		10908742	0					
ANR	10908763	ArgumentList	ctx -> memory		10908742	1					
ANR	10908764	Argument	ctx -> memory		10908742	0					
ANR	10908765	PtrMemberAccess	ctx -> memory		10908742	0					
ANR	10908766	Identifier	ctx		10908742	0					
ANR	10908767	Identifier	memory		10908742	1					
ANR	10908768	Argument	strlen ( str ) + 1		10908742	1					
ANR	10908769	AdditiveExpression	strlen ( str ) + 1		10908742	0		+			
ANR	10908770	CallExpression	strlen ( str )		10908742	0					
ANR	10908771	Callee	strlen		10908742	0					
ANR	10908772	Identifier	strlen		10908742	0					
ANR	10908773	ArgumentList	str		10908742	1					
ANR	10908774	Argument	str		10908742	0					
ANR	10908775	Identifier	str		10908742	0					
ANR	10908776	PrimaryExpression	1		10908742	1					
ANR	10908777	Argument	cname		10908742	2					
ANR	10908778	Identifier	cname		10908742	0					
ANR	10908779	IfStatement	if ( cpy )		10908742	2					
ANR	10908780	Condition	cpy	55:8:1441:1443	10908742	0	True				
ANR	10908781	Identifier	cpy		10908742	0					
ANR	10908782	ExpressionStatement	"strcpy ( cpy , str )"	56:8:1454:1470	10908742	1	True				
ANR	10908783	CallExpression	"strcpy ( cpy , str )"		10908742	0					
ANR	10908784	Callee	strcpy		10908742	0					
ANR	10908785	Identifier	strcpy		10908742	0					
ANR	10908786	ArgumentList	cpy		10908742	1					
ANR	10908787	Argument	cpy		10908742	0					
ANR	10908788	Identifier	cpy		10908742	0					
ANR	10908789	Argument	str		10908742	1					
ANR	10908790	Identifier	str		10908742	0					
ANR	10908791	ReturnStatement	return cpy ;	57:4:1476:1486	10908742	3	True				
ANR	10908792	Identifier	cpy		10908742	0					
ANR	10908793	ReturnType	char *		10908742	1					
ANR	10908794	Identifier	xps_strdup_imp		10908742	2					
ANR	10908795	ParameterList	"xps_context_t * ctx , const char * str , const char * cname"		10908742	3					
ANR	10908796	Parameter	xps_context_t * ctx	50:15:1265:1282	10908742	0	True				
ANR	10908797	ParameterType	xps_context_t *		10908742	0					
ANR	10908798	Identifier	ctx		10908742	1					
ANR	10908799	Parameter	const char * str	50:35:1285:1299	10908742	1	True				
ANR	10908800	ParameterType	const char *		10908742	0					
ANR	10908801	Identifier	str		10908742	1					
ANR	10908802	Parameter	const char * cname	50:52:1302:1318	10908742	2	True				
ANR	10908803	ParameterType	const char *		10908742	0					
ANR	10908804	Identifier	cname		10908742	1					
ANR	10908805	CFGEntryNode	ENTRY		10908742		True				
ANR	10908806	CFGExitNode	EXIT		10908742		True				
ANR	10908807	Symbol	str		10908742						
ANR	10908808	Symbol	strlen		10908742						
ANR	10908809	Symbol	ctx -> memory		10908742						
ANR	10908810	Symbol	gs_alloc_bytes		10908742						
ANR	10908811	Symbol	NULL		10908742						
ANR	10908812	Symbol	ctx		10908742						
ANR	10908813	Symbol	cname		10908742						
ANR	10908814	Symbol	cpy		10908742						
ANR	10908815	Symbol	* ctx		10908742						
ANR	10908816	Function	xps_clean_path	62:0:1531:2956							
ANR	10908817	FunctionDef	xps_clean_path (char * name)		10908816	0					
ANR	10908818	CompoundStatement		64:0:1572:2956	10908816	0					
ANR	10908819	IdentifierDeclStatement	"char * p , * q , * dotdot ;"	65:4:1578:1598	10908816	0	True				
ANR	10908820	IdentifierDecl	* p		10908816	0					
ANR	10908821	IdentifierDeclType	char *		10908816	0					
ANR	10908822	Identifier	p		10908816	1					
ANR	10908823	IdentifierDecl	* q		10908816	1					
ANR	10908824	IdentifierDeclType	char *		10908816	0					
ANR	10908825	Identifier	q		10908816	1					
ANR	10908826	IdentifierDecl	* dotdot		10908816	2					
ANR	10908827	IdentifierDeclType	char *		10908816	0					
ANR	10908828	Identifier	dotdot		10908816	1					
ANR	10908829	IdentifierDeclStatement	int rooted ;	66:4:1604:1614	10908816	1	True				
ANR	10908830	IdentifierDecl	rooted		10908816	0					
ANR	10908831	IdentifierDeclType	int		10908816	0					
ANR	10908832	Identifier	rooted		10908816	1					
ANR	10908833	ExpressionStatement	rooted = name [ 0 ] == '/'	68:4:1621:1644	10908816	2	True				
ANR	10908834	AssignmentExpression	rooted = name [ 0 ] == '/'		10908816	0		=			
ANR	10908835	Identifier	rooted		10908816	0					
ANR	10908836	EqualityExpression	name [ 0 ] == '/'		10908816	1		==			
ANR	10908837	ArrayIndexing	name [ 0 ]		10908816	0					
ANR	10908838	Identifier	name		10908816	0					
ANR	10908839	PrimaryExpression	0		10908816	1					
ANR	10908840	PrimaryExpression	'/'		10908816	1					
ANR	10908841	ExpressionStatement	p = q = dotdot = name + rooted	77:4:1944:1974	10908816	3	True				
ANR	10908842	AssignmentExpression	p = q = dotdot = name + rooted		10908816	0		=			
ANR	10908843	Identifier	p		10908816	0					
ANR	10908844	AssignmentExpression	q = dotdot = name + rooted		10908816	1		=			
ANR	10908845	Identifier	q		10908816	0					
ANR	10908846	AssignmentExpression	dotdot = name + rooted		10908816	1		=			
ANR	10908847	Identifier	dotdot		10908816	0					
ANR	10908848	AdditiveExpression	name + rooted		10908816	1		+			
ANR	10908849	Identifier	name		10908816	0					
ANR	10908850	Identifier	rooted		10908816	1					
ANR	10908851	WhileStatement	while ( * p )		10908816	4					
ANR	10908852	Condition	* p	78:11:1987:1988	10908816	0	True				
ANR	10908853	UnaryOperationExpression	* p		10908816	0					
ANR	10908854	UnaryOperator	*		10908816	0					
ANR	10908855	Identifier	p		10908816	1					
ANR	10908856	CompoundStatement		16:4:422:422	10908816	1					
ANR	10908857	IfStatement	if ( p [ 0 ] == '/' )		10908816	0					
ANR	10908858	Condition	p [ 0 ] == '/'	80:11:2008:2018	10908816	0	True				
ANR	10908859	EqualityExpression	p [ 0 ] == '/'		10908816	0		==			
ANR	10908860	ArrayIndexing	p [ 0 ]		10908816	0					
ANR	10908861	Identifier	p		10908816	0					
ANR	10908862	PrimaryExpression	0		10908816	1					
ANR	10908863	PrimaryExpression	'/'		10908816	1					
ANR	10908864	ExpressionStatement	p ++	81:12:2052:2055	10908816	1	True				
ANR	10908865	PostIncDecOperationExpression	p ++		10908816	0					
ANR	10908866	Identifier	p		10908816	0					
ANR	10908867	IncDec	++		10908816	1					
ANR	10908868	ElseStatement	else		10908816	0					
ANR	10908869	IfStatement	if ( p [ 0 ] == '.' && SEP ( p [ 1 ] ) )		10908816	0					
ANR	10908870	Condition	p [ 0 ] == '.' && SEP ( p [ 1 ] )	82:17:2074:2097	10908816	0	True				
ANR	10908871	AndExpression	p [ 0 ] == '.' && SEP ( p [ 1 ] )		10908816	0		&&			
ANR	10908872	EqualityExpression	p [ 0 ] == '.'		10908816	0		==			
ANR	10908873	ArrayIndexing	p [ 0 ]		10908816	0					
ANR	10908874	Identifier	p		10908816	0					
ANR	10908875	PrimaryExpression	0		10908816	1					
ANR	10908876	PrimaryExpression	'.'		10908816	1					
ANR	10908877	CallExpression	SEP ( p [ 1 ] )		10908816	1					
ANR	10908878	Callee	SEP		10908816	0					
ANR	10908879	Identifier	SEP		10908816	0					
ANR	10908880	ArgumentList	p [ 1 ]		10908816	1					
ANR	10908881	Argument	p [ 1 ]		10908816	0					
ANR	10908882	ArrayIndexing	p [ 1 ]		10908816	0					
ANR	10908883	Identifier	p		10908816	0					
ANR	10908884	PrimaryExpression	1		10908816	1					
ANR	10908885	ExpressionStatement	p += 1	83:12:2112:2118	10908816	1	True				
ANR	10908886	AssignmentExpression	p += 1		10908816	0		+=			
ANR	10908887	Identifier	p		10908816	0					
ANR	10908888	PrimaryExpression	1		10908816	1					
ANR	10908889	ElseStatement	else		10908816	0					
ANR	10908890	IfStatement	if ( p [ 0 ] == '.' && p [ 1 ] == '.' && SEP ( p [ 2 ] ) )		10908816	0					
ANR	10908891	Condition	p [ 0 ] == '.' && p [ 1 ] == '.' && SEP ( p [ 2 ] )	84:17:2187:2225	10908816	0	True				
ANR	10908892	AndExpression	p [ 0 ] == '.' && p [ 1 ] == '.' && SEP ( p [ 2 ] )		10908816	0		&&			
ANR	10908893	EqualityExpression	p [ 0 ] == '.'		10908816	0		==			
ANR	10908894	ArrayIndexing	p [ 0 ]		10908816	0					
ANR	10908895	Identifier	p		10908816	0					
ANR	10908896	PrimaryExpression	0		10908816	1					
ANR	10908897	PrimaryExpression	'.'		10908816	1					
ANR	10908898	AndExpression	p [ 1 ] == '.' && SEP ( p [ 2 ] )		10908816	1		&&			
ANR	10908899	EqualityExpression	p [ 1 ] == '.'		10908816	0		==			
ANR	10908900	ArrayIndexing	p [ 1 ]		10908816	0					
ANR	10908901	Identifier	p		10908816	0					
ANR	10908902	PrimaryExpression	1		10908816	1					
ANR	10908903	PrimaryExpression	'.'		10908816	1					
ANR	10908904	CallExpression	SEP ( p [ 2 ] )		10908816	1					
ANR	10908905	Callee	SEP		10908816	0					
ANR	10908906	Identifier	SEP		10908816	0					
ANR	10908907	ArgumentList	p [ 2 ]		10908816	1					
ANR	10908908	Argument	p [ 2 ]		10908816	0					
ANR	10908909	ArrayIndexing	p [ 2 ]		10908816	0					
ANR	10908910	Identifier	p		10908816	0					
ANR	10908911	PrimaryExpression	2		10908816	1					
ANR	10908912	CompoundStatement		22:8:663:663	10908816	1					
ANR	10908913	ExpressionStatement	p += 2	86:12:2250:2256	10908816	0	True				
ANR	10908914	AssignmentExpression	p += 2		10908816	0		+=			
ANR	10908915	Identifier	p		10908816	0					
ANR	10908916	PrimaryExpression	2		10908816	1					
ANR	10908917	IfStatement	if ( q > dotdot )		10908816	1					
ANR	10908918	Condition	q > dotdot	87:16:2274:2283	10908816	0	True				
ANR	10908919	RelationalExpression	q > dotdot		10908816	0		>			
ANR	10908920	Identifier	q		10908816	0					
ANR	10908921	Identifier	dotdot		10908816	1					
ANR	10908922	CompoundStatement		25:12:745:745	10908816	1					
ANR	10908923	WhileStatement	while ( -- q > dotdot && * q != '/' )		10908816	0					
ANR	10908924	Condition	-- q > dotdot && * q != '/'	89:22:2342:2366	10908816	0	True				
ANR	10908925	AndExpression	-- q > dotdot && * q != '/'		10908816	0		&&			
ANR	10908926	RelationalExpression	-- q > dotdot		10908816	0		>			
ANR	10908927	UnaryExpression	-- q		10908816	0					
ANR	10908928	IncDec	--		10908816	0					
ANR	10908929	Identifier	q		10908816	1					
ANR	10908930	Identifier	dotdot		10908816	1					
ANR	10908931	EqualityExpression	* q != '/'		10908816	1		!=			
ANR	10908932	UnaryOperationExpression	* q		10908816	0					
ANR	10908933	UnaryOperator	*		10908816	0					
ANR	10908934	Identifier	q		10908816	1					
ANR	10908935	PrimaryExpression	'/'		10908816	1					
ANR	10908936	ExpressionStatement		90:20:2389:2389	10908816	1	True				
ANR	10908937	ElseStatement	else		10908816	0					
ANR	10908938	IfStatement	if ( ! rooted )		10908816	0					
ANR	10908939	Condition	! rooted	92:21:2426:2432	10908816	0	True				
ANR	10908940	UnaryOperationExpression	! rooted		10908816	0					
ANR	10908941	UnaryOperator	!		10908816	0					
ANR	10908942	Identifier	rooted		10908816	1					
ANR	10908943	CompoundStatement		30:12:905:905	10908816	1					
ANR	10908944	IfStatement	if ( q != name )		10908816	0					
ANR	10908945	Condition	q != name	94:20:2500:2508	10908816	0	True				
ANR	10908946	EqualityExpression	q != name		10908816	0		!=			
ANR	10908947	Identifier	q		10908816	0					
ANR	10908948	Identifier	name		10908816	1					
ANR	10908949	ExpressionStatement	* q ++ = '/'	95:20:2531:2541	10908816	1	True				
ANR	10908950	AssignmentExpression	* q ++ = '/'		10908816	0		=			
ANR	10908951	UnaryOperationExpression	* q ++		10908816	0					
ANR	10908952	UnaryOperator	*		10908816	0					
ANR	10908953	PostIncDecOperationExpression	q ++		10908816	1					
ANR	10908954	Identifier	q		10908816	0					
ANR	10908955	IncDec	++		10908816	1					
ANR	10908956	PrimaryExpression	'/'		10908816	1					
ANR	10908957	ExpressionStatement	* q ++ = '.'	96:16:2559:2569	10908816	1	True				
ANR	10908958	AssignmentExpression	* q ++ = '.'		10908816	0		=			
ANR	10908959	UnaryOperationExpression	* q ++		10908816	0					
ANR	10908960	UnaryOperator	*		10908816	0					
ANR	10908961	PostIncDecOperationExpression	q ++		10908816	1					
ANR	10908962	Identifier	q		10908816	0					
ANR	10908963	IncDec	++		10908816	1					
ANR	10908964	PrimaryExpression	'.'		10908816	1					
ANR	10908965	ExpressionStatement	* q ++ = '.'	97:16:2587:2597	10908816	2	True				
ANR	10908966	AssignmentExpression	* q ++ = '.'		10908816	0		=			
ANR	10908967	UnaryOperationExpression	* q ++		10908816	0					
ANR	10908968	UnaryOperator	*		10908816	0					
ANR	10908969	PostIncDecOperationExpression	q ++		10908816	1					
ANR	10908970	Identifier	q		10908816	0					
ANR	10908971	IncDec	++		10908816	1					
ANR	10908972	PrimaryExpression	'.'		10908816	1					
ANR	10908973	ExpressionStatement	dotdot = q	98:16:2615:2625	10908816	3	True				
ANR	10908974	AssignmentExpression	dotdot = q		10908816	0		=			
ANR	10908975	Identifier	dotdot		10908816	0					
ANR	10908976	Identifier	q		10908816	1					
ANR	10908977	ElseStatement	else		10908816	0					
ANR	10908978	CompoundStatement		39:8:1123:1123	10908816	0					
ANR	10908979	IfStatement	if ( q != name + rooted )		10908816	0					
ANR	10908980	Condition	q != name + rooted	103:16:2714:2729	10908816	0	True				
ANR	10908981	EqualityExpression	q != name + rooted		10908816	0		!=			
ANR	10908982	Identifier	q		10908816	0					
ANR	10908983	AdditiveExpression	name + rooted		10908816	1		+			
ANR	10908984	Identifier	name		10908816	0					
ANR	10908985	Identifier	rooted		10908816	1					
ANR	10908986	ExpressionStatement	* q ++ = '/'	104:16:2748:2758	10908816	1	True				
ANR	10908987	AssignmentExpression	* q ++ = '/'		10908816	0		=			
ANR	10908988	UnaryOperationExpression	* q ++		10908816	0					
ANR	10908989	UnaryOperator	*		10908816	0					
ANR	10908990	PostIncDecOperationExpression	q ++		10908816	1					
ANR	10908991	Identifier	q		10908816	0					
ANR	10908992	IncDec	++		10908816	1					
ANR	10908993	PrimaryExpression	'/'		10908816	1					
ANR	10908994	WhileStatement	while ( ( * q = * p ) != '/' && * q != 0 )		10908816	1					
ANR	10908995	Condition	( * q = * p ) != '/' && * q != 0	105:19:2779:2805	10908816	0	True				
ANR	10908996	AndExpression	( * q = * p ) != '/' && * q != 0		10908816	0		&&			
ANR	10908997	EqualityExpression	( * q = * p ) != '/'		10908816	0		!=			
ANR	10908998	AssignmentExpression	* q = * p		10908816	0		=			
ANR	10908999	UnaryOperationExpression	* q		10908816	0					
ANR	10909000	UnaryOperator	*		10908816	0					
ANR	10909001	Identifier	q		10908816	1					
ANR	10909002	UnaryOperationExpression	* p		10908816	1					
ANR	10909003	UnaryOperator	*		10908816	0					
ANR	10909004	Identifier	p		10908816	1					
ANR	10909005	PrimaryExpression	'/'		10908816	1					
ANR	10909006	EqualityExpression	* q != 0		10908816	1		!=			
ANR	10909007	UnaryOperationExpression	* q		10908816	0					
ANR	10909008	UnaryOperator	*		10908816	0					
ANR	10909009	Identifier	q		10908816	1					
ANR	10909010	PrimaryExpression	0		10908816	1					
ANR	10909011	ExpressionStatement	"p ++ , q ++"	106:16:2824:2832	10908816	1	True				
ANR	10909012	Expression	"p ++ , q ++"		10908816	0					
ANR	10909013	PostIncDecOperationExpression	p ++		10908816	0					
ANR	10909014	Identifier	p		10908816	0					
ANR	10909015	IncDec	++		10908816	1					
ANR	10909016	PostIncDecOperationExpression	q ++		10908816	1					
ANR	10909017	Identifier	q		10908816	0					
ANR	10909018	IncDec	++		10908816	1					
ANR	10909019	IfStatement	if ( q == name )		10908816	5					
ANR	10909020	Condition	q == name	110:8:2859:2867	10908816	0	True				
ANR	10909021	EqualityExpression	q == name		10908816	0		==			
ANR	10909022	Identifier	q		10908816	0					
ANR	10909023	Identifier	name		10908816	1					
ANR	10909024	ExpressionStatement	* q ++ = '.'	111:8:2911:2921	10908816	1	True				
ANR	10909025	AssignmentExpression	* q ++ = '.'		10908816	0		=			
ANR	10909026	UnaryOperationExpression	* q ++		10908816	0					
ANR	10909027	UnaryOperator	*		10908816	0					
ANR	10909028	PostIncDecOperationExpression	q ++		10908816	1					
ANR	10909029	Identifier	q		10908816	0					
ANR	10909030	IncDec	++		10908816	1					
ANR	10909031	PrimaryExpression	'.'		10908816	1					
ANR	10909032	ExpressionStatement	* q = '\\0'	112:4:2927:2936	10908816	6	True				
ANR	10909033	AssignmentExpression	* q = '\\0'		10908816	0		=			
ANR	10909034	UnaryOperationExpression	* q		10908816	0					
ANR	10909035	UnaryOperator	*		10908816	0					
ANR	10909036	Identifier	q		10908816	1					
ANR	10909037	PrimaryExpression	'\\0'		10908816	1					
ANR	10909038	ReturnStatement	return name ;	114:4:2943:2954	10908816	7	True				
ANR	10909039	Identifier	name		10908816	0					
ANR	10909040	ReturnType	static char *		10908816	1					
ANR	10909041	Identifier	xps_clean_path		10908816	2					
ANR	10909042	ParameterList	char * name		10908816	3					
ANR	10909043	Parameter	char * name	63:15:1560:1569	10908816	0	True				
ANR	10909044	ParameterType	char *		10908816	0					
ANR	10909045	Identifier	name		10908816	1					
ANR	10909046	CFGEntryNode	ENTRY		10908816		True				
ANR	10909047	CFGExitNode	EXIT		10908816		True				
ANR	10909048	Symbol	p		10908816						
ANR	10909049	Symbol	* name		10908816						
ANR	10909050	Symbol	q		10908816						
ANR	10909051	Symbol	dotdot		10908816						
ANR	10909052	Symbol	* q ++		10908816						
ANR	10909053	Symbol	name		10908816						
ANR	10909054	Symbol	rooted		10908816						
ANR	10909055	Symbol	* p		10908816						
ANR	10909056	Symbol	* q		10908816						
ANR	10909057	Symbol	SEP		10908816						
ANR	10909058	Function	xps_absolute_path	117:0:2959:3319							
ANR	10909059	FunctionDef	"xps_absolute_path (char * output , char * base_uri , char * path , int output_size)"		10909058	0					
ANR	10909060	CompoundStatement		119:0:3041:3319	10909058	0					
ANR	10909061	IfStatement	if ( path [ 0 ] == '/' )		10909058	0					
ANR	10909062	Condition	path [ 0 ] == '/'	120:8:3051:3064	10909058	0	True				
ANR	10909063	EqualityExpression	path [ 0 ] == '/'		10909058	0		==			
ANR	10909064	ArrayIndexing	path [ 0 ]		10909058	0					
ANR	10909065	Identifier	path		10909058	0					
ANR	10909066	PrimaryExpression	0		10909058	1					
ANR	10909067	PrimaryExpression	'/'		10909058	1					
ANR	10909068	CompoundStatement		3:4:29:29	10909058	1					
ANR	10909069	ExpressionStatement	"gs_strlcpy ( output , path , output_size )"	122:8:3081:3118	10909058	0	True				
ANR	10909070	CallExpression	"gs_strlcpy ( output , path , output_size )"		10909058	0					
ANR	10909071	Callee	gs_strlcpy		10909058	0					
ANR	10909072	Identifier	gs_strlcpy		10909058	0					
ANR	10909073	ArgumentList	output		10909058	1					
ANR	10909074	Argument	output		10909058	0					
ANR	10909075	Identifier	output		10909058	0					
ANR	10909076	Argument	path		10909058	1					
ANR	10909077	Identifier	path		10909058	0					
ANR	10909078	Argument	output_size		10909058	2					
ANR	10909079	Identifier	output_size		10909058	0					
ANR	10909080	ElseStatement	else		10909058	0					
ANR	10909081	CompoundStatement		7:4:97:97	10909058	0					
ANR	10909082	ExpressionStatement	"gs_strlcpy ( output , base_uri , output_size )"	126:8:3149:3190	10909058	0	True				
ANR	10909083	CallExpression	"gs_strlcpy ( output , base_uri , output_size )"		10909058	0					
ANR	10909084	Callee	gs_strlcpy		10909058	0					
ANR	10909085	Identifier	gs_strlcpy		10909058	0					
ANR	10909086	ArgumentList	output		10909058	1					
ANR	10909087	Argument	output		10909058	0					
ANR	10909088	Identifier	output		10909058	0					
ANR	10909089	Argument	base_uri		10909058	1					
ANR	10909090	Identifier	base_uri		10909058	0					
ANR	10909091	Argument	output_size		10909058	2					
ANR	10909092	Identifier	output_size		10909058	0					
ANR	10909093	ExpressionStatement	"gs_strlcat ( output , ""/"" , output_size )"	127:8:3200:3236	10909058	1	True				
ANR	10909094	CallExpression	"gs_strlcat ( output , ""/"" , output_size )"		10909058	0					
ANR	10909095	Callee	gs_strlcat		10909058	0					
ANR	10909096	Identifier	gs_strlcat		10909058	0					
ANR	10909097	ArgumentList	output		10909058	1					
ANR	10909098	Argument	output		10909058	0					
ANR	10909099	Identifier	output		10909058	0					
ANR	10909100	Argument	"""/"""		10909058	1					
ANR	10909101	PrimaryExpression	"""/"""		10909058	0					
ANR	10909102	Argument	output_size		10909058	2					
ANR	10909103	Identifier	output_size		10909058	0					
ANR	10909104	ExpressionStatement	"gs_strlcat ( output , path , output_size )"	128:8:3246:3283	10909058	2	True				
ANR	10909105	CallExpression	"gs_strlcat ( output , path , output_size )"		10909058	0					
ANR	10909106	Callee	gs_strlcat		10909058	0					
ANR	10909107	Identifier	gs_strlcat		10909058	0					
ANR	10909108	ArgumentList	output		10909058	1					
ANR	10909109	Argument	output		10909058	0					
ANR	10909110	Identifier	output		10909058	0					
ANR	10909111	Argument	path		10909058	1					
ANR	10909112	Identifier	path		10909058	0					
ANR	10909113	Argument	output_size		10909058	2					
ANR	10909114	Identifier	output_size		10909058	0					
ANR	10909115	ExpressionStatement	xps_clean_path ( output )	130:4:3295:3317	10909058	1	True				
ANR	10909116	CallExpression	xps_clean_path ( output )		10909058	0					
ANR	10909117	Callee	xps_clean_path		10909058	0					
ANR	10909118	Identifier	xps_clean_path		10909058	0					
ANR	10909119	ArgumentList	output		10909058	1					
ANR	10909120	Argument	output		10909058	0					
ANR	10909121	Identifier	output		10909058	0					
ANR	10909122	ReturnType	void		10909058	1					
ANR	10909123	Identifier	xps_absolute_path		10909058	2					
ANR	10909124	ParameterList	"char * output , char * base_uri , char * path , int output_size"		10909058	3					
ANR	10909125	Parameter	char * output	118:18:2982:2993	10909058	0	True				
ANR	10909126	ParameterType	char *		10909058	0					
ANR	10909127	Identifier	output		10909058	1					
ANR	10909128	Parameter	char * base_uri	118:32:2996:3009	10909058	1	True				
ANR	10909129	ParameterType	char *		10909058	0					
ANR	10909130	Identifier	base_uri		10909058	1					
ANR	10909131	Parameter	char * path	118:48:3012:3021	10909058	2	True				
ANR	10909132	ParameterType	char *		10909058	0					
ANR	10909133	Identifier	path		10909058	1					
ANR	10909134	Parameter	int output_size	118:60:3024:3038	10909058	3	True				
ANR	10909135	ParameterType	int		10909058	0					
ANR	10909136	Identifier	output_size		10909058	1					
ANR	10909137	CFGEntryNode	ENTRY		10909058		True				
ANR	10909138	CFGExitNode	EXIT		10909058		True				
ANR	10909139	Symbol	output		10909058						
ANR	10909140	Symbol	path		10909058						
ANR	10909141	Symbol	output_size		10909058						
ANR	10909142	Symbol	base_uri		10909058						
ANR	10909143	Symbol	* path		10909058						
