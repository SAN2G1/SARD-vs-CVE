command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	666887	File	data/converged/CVE-2018-16863_ghostpdl/base_gsioram.c								
ANR	666888	DeclStmt									
ANR	666889	Decl							void	"void ( const gs_memory_t * memory , void * vptr )"	ram_finalize
ANR	666890	DeclStmt									
ANR	666891	Decl							const gx_io_device	const gx_io_device	gs_iodev_ram
ANR	666892	ClassDef	ramfs_state_s	72:8:2401:2477							
ANR	666893	DeclStmt									
ANR	666894	Decl							gs_memory_t	gs_memory_t *	memory
ANR	666895	DeclStmt									
ANR	666896	Decl							ramfs	ramfs *	fs
ANR	666897	DeclStmt									
ANR	666898	Decl							ramfs_state_s	ramfs_state_s	ramfs_state
ANR	666899	ClassDef	gsram_enum_s	81:8:2639:2736							
ANR	666900	DeclStmt									
ANR	666901	Decl							char	char *	pattern
ANR	666902	DeclStmt									
ANR	666903	Decl							ramfs_enum	ramfs_enum *	e
ANR	666904	DeclStmt									
ANR	666905	Decl							gs_memory_t	gs_memory_t *	memory
ANR	666906	DeclStmt									
ANR	666907	Decl							gsram_enum_s	gsram_enum_s	gsram_enum
ANR	666908	DeclStmt									
ANR	666909	Decl							int	"int ( stream * , gs_offset_t * )"	s_ram_available
ANR	666910	Decl							int	"int ( stream * , gs_offset_t )"	s_ram_read_seek
ANR	666911	Decl							int	int ( stream * )	s_ram_read_close
ANR	666912	Decl							int	"int ( stream_state * , stream_cursor_read * , stream_cursor_write * , bool )"	s_ram_read_process
ANR	666913	DeclStmt									
ANR	666914	Decl							int	"int ( stream * , gs_offset_t )"	s_ram_write_seek
ANR	666915	Decl							int	int ( stream * )	s_ram_write_flush
ANR	666916	Decl							int	int ( stream * )	s_ram_write_close
ANR	666917	Decl							int	"int ( stream_state * , stream_cursor_read * , stream_cursor_write * , bool )"	s_ram_write_process
ANR	666918	DeclStmt									
ANR	666919	Decl							int	"int ( stream * , bool )"	s_ram_switch
ANR	666920	Function	ramfs_errno_to_code	113:0:3545:3904							
ANR	666921	FunctionDef	ramfs_errno_to_code (int errno)		666920	0					
ANR	666922	CompoundStatement		114:31:3587:3904	666920	0					
ANR	666923	SwitchStatement	switch ( errno )		666920	0					
ANR	666924	Condition	errno	115:12:3601:3605	666920	0	True				
ANR	666925	Identifier	errno		666920	0					
ANR	666926	CompoundStatement		2:19:20:20	666920	1					
ANR	666927	Label	case RAMFS_NOTFOUND :	116:4:3614:3633	666920	0	True				
ANR	666928	Identifier	RAMFS_NOTFOUND		666920	0					
ANR	666929	ExpressionStatement	return_error ( gs_error_undefinedfilename )	117:8:3643:3683	666920	1	True				
ANR	666930	CallExpression	return_error ( gs_error_undefinedfilename )		666920	0					
ANR	666931	Callee	return_error		666920	0					
ANR	666932	Identifier	return_error		666920	0					
ANR	666933	ArgumentList	gs_error_undefinedfilename		666920	1					
ANR	666934	Argument	gs_error_undefinedfilename		666920	0					
ANR	666935	Identifier	gs_error_undefinedfilename		666920	0					
ANR	666936	Label	case RAMFS_NOACCESS :	118:4:3689:3708	666920	2	True				
ANR	666937	Identifier	RAMFS_NOACCESS		666920	0					
ANR	666938	ExpressionStatement	return_error ( gs_error_invalidfileaccess )	119:8:3718:3758	666920	3	True				
ANR	666939	CallExpression	return_error ( gs_error_invalidfileaccess )		666920	0					
ANR	666940	Callee	return_error		666920	0					
ANR	666941	Identifier	return_error		666920	0					
ANR	666942	ArgumentList	gs_error_invalidfileaccess		666920	1					
ANR	666943	Argument	gs_error_invalidfileaccess		666920	0					
ANR	666944	Identifier	gs_error_invalidfileaccess		666920	0					
ANR	666945	Label	case RAMFS_NOMEM :	120:4:3764:3780	666920	4	True				
ANR	666946	Identifier	RAMFS_NOMEM		666920	0					
ANR	666947	ExpressionStatement	return_error ( gs_error_VMerror )	121:8:3790:3820	666920	5	True				
ANR	666948	CallExpression	return_error ( gs_error_VMerror )		666920	0					
ANR	666949	Callee	return_error		666920	0					
ANR	666950	Identifier	return_error		666920	0					
ANR	666951	ArgumentList	gs_error_VMerror		666920	1					
ANR	666952	Argument	gs_error_VMerror		666920	0					
ANR	666953	Identifier	gs_error_VMerror		666920	0					
ANR	666954	Label	default :	123:4:3849:3856	666920	6	True				
ANR	666955	Identifier	default		666920	0					
ANR	666956	ExpressionStatement	return_error ( gs_error_ioerror )	124:8:3866:3896	666920	7	True				
ANR	666957	CallExpression	return_error ( gs_error_ioerror )		666920	0					
ANR	666958	Callee	return_error		666920	0					
ANR	666959	Identifier	return_error		666920	0					
ANR	666960	ArgumentList	gs_error_ioerror		666920	1					
ANR	666961	Argument	gs_error_ioerror		666920	0					
ANR	666962	Identifier	gs_error_ioerror		666920	0					
ANR	666963	ReturnType	static int		666920	1					
ANR	666964	Identifier	ramfs_errno_to_code		666920	2					
ANR	666965	ParameterList	int errno		666920	3					
ANR	666966	Parameter	int errno	114:20:3576:3584	666920	0	True				
ANR	666967	ParameterType	int		666920	0					
ANR	666968	Identifier	errno		666920	1					
ANR	666969	CFGEntryNode	ENTRY		666920		True				
ANR	666970	CFGExitNode	EXIT		666920		True				
ANR	666971	Symbol	gs_error_VMerror		666920						
ANR	666972	Symbol	errno		666920						
ANR	666973	Symbol	gs_error_ioerror		666920						
ANR	666974	Symbol	gs_error_undefinedfilename		666920						
ANR	666975	Symbol	gs_error_invalidfileaccess		666920						
ANR	666976	DeclStmt									
ANR	666977	Decl							void	"void ( register stream * s , ramhandle * file , byte * buf , uint len )"	sread_ram
ANR	666978	Decl							void	"void ( register stream * s , ramhandle * file , byte * buf , uint len )"	swrite_ram
ANR	666979	Decl							void	"void ( register stream * s , ramhandle * file , byte * buf , uint len )"	sappend_ram
ANR	666980	Function	ram_open_file	133:0:4141:6603							
ANR	666981	FunctionDef	"ram_open_file (gx_io_device * iodev , const char * fname , uint len , const char * file_access , stream * * ps , gs_memory_t * mem)"		666980	0					
ANR	666982	CompoundStatement		136:0:4279:6603	666980	0					
ANR	666983	IdentifierDeclStatement	int code = 0 ;	137:4:4285:4297	666980	0	True				
ANR	666984	IdentifierDecl	code = 0		666980	0					
ANR	666985	IdentifierDeclType	int		666980	0					
ANR	666986	Identifier	code		666980	1					
ANR	666987	AssignmentExpression	code = 0		666980	2		=			
ANR	666988	Identifier	code		666980	0					
ANR	666989	PrimaryExpression	0		666980	1					
ANR	666990	IdentifierDeclStatement	ramhandle * file ;	138:4:4303:4319	666980	1	True				
ANR	666991	IdentifierDecl	* file		666980	0					
ANR	666992	IdentifierDeclType	ramhandle *		666980	0					
ANR	666993	Identifier	file		666980	1					
ANR	666994	IdentifierDeclStatement	char fmode [ 4 ] ;	139:4:4325:4338	666980	2	True				
ANR	666995	IdentifierDecl	fmode [ 4 ]		666980	0					
ANR	666996	IdentifierDeclType	char [ 4 ]		666980	0					
ANR	666997	Identifier	fmode		666980	1					
ANR	666998	PrimaryExpression	4		666980	2					
ANR	666999	IdentifierDeclStatement	int openmode = RAMFS_READ ;	140:4:4373:4396	666980	3	True				
ANR	667000	IdentifierDecl	openmode = RAMFS_READ		666980	0					
ANR	667001	IdentifierDeclType	int		666980	0					
ANR	667002	Identifier	openmode		666980	1					
ANR	667003	AssignmentExpression	openmode = RAMFS_READ		666980	2		=			
ANR	667004	Identifier	RAMFS_READ		666980	0					
ANR	667005	Identifier	RAMFS_READ		666980	1					
ANR	667006	IdentifierDeclStatement	ramfs * fs ;	141:4:4402:4412	666980	4	True				
ANR	667007	IdentifierDecl	* fs		666980	0					
ANR	667008	IdentifierDeclType	ramfs *		666980	0					
ANR	667009	Identifier	fs		666980	1					
ANR	667010	IdentifierDeclStatement	char * namestr = NULL ;	142:4:4418:4439	666980	5	True				
ANR	667011	IdentifierDecl	* namestr = NULL		666980	0					
ANR	667012	IdentifierDeclType	char *		666980	0					
ANR	667013	Identifier	namestr		666980	1					
ANR	667014	AssignmentExpression	* namestr = NULL		666980	2		=			
ANR	667015	Identifier	NULL		666980	0					
ANR	667016	Identifier	NULL		666980	1					
ANR	667017	ExpressionStatement	"namestr = ( char * ) gs_alloc_bytes ( mem , len + 1 , ""temporary filename string"" )"	145:4:4498:4573	666980	6	True				
ANR	667018	AssignmentExpression	"namestr = ( char * ) gs_alloc_bytes ( mem , len + 1 , ""temporary filename string"" )"		666980	0		=			
ANR	667019	Identifier	namestr		666980	0					
ANR	667020	CastExpression	"( char * ) gs_alloc_bytes ( mem , len + 1 , ""temporary filename string"" )"		666980	1					
ANR	667021	CastTarget	char *		666980	0					
ANR	667022	CallExpression	"gs_alloc_bytes ( mem , len + 1 , ""temporary filename string"" )"		666980	1					
ANR	667023	Callee	gs_alloc_bytes		666980	0					
ANR	667024	Identifier	gs_alloc_bytes		666980	0					
ANR	667025	ArgumentList	mem		666980	1					
ANR	667026	Argument	mem		666980	0					
ANR	667027	Identifier	mem		666980	0					
ANR	667028	Argument	len + 1		666980	1					
ANR	667029	AdditiveExpression	len + 1		666980	0		+			
ANR	667030	Identifier	len		666980	0					
ANR	667031	PrimaryExpression	1		666980	1					
ANR	667032	Argument	"""temporary filename string"""		666980	2					
ANR	667033	PrimaryExpression	"""temporary filename string"""		666980	0					
ANR	667034	IfStatement	if ( ! namestr )		666980	7					
ANR	667035	Condition	! namestr	146:7:4582:4589	666980	0	True				
ANR	667036	UnaryOperationExpression	! namestr		666980	0					
ANR	667037	UnaryOperator	!		666980	0					
ANR	667038	Identifier	namestr		666980	1					
ANR	667039	ExpressionStatement	return_error ( gs_error_VMerror )	147:8:4600:4630	666980	1	True				
ANR	667040	CallExpression	return_error ( gs_error_VMerror )		666980	0					
ANR	667041	Callee	return_error		666980	0					
ANR	667042	Identifier	return_error		666980	0					
ANR	667043	ArgumentList	gs_error_VMerror		666980	1					
ANR	667044	Argument	gs_error_VMerror		666980	0					
ANR	667045	Identifier	gs_error_VMerror		666980	0					
ANR	667046	ExpressionStatement	"strncpy ( namestr , fname , len )"	148:4:4636:4662	666980	8	True				
ANR	667047	CallExpression	"strncpy ( namestr , fname , len )"		666980	0					
ANR	667048	Callee	strncpy		666980	0					
ANR	667049	Identifier	strncpy		666980	0					
ANR	667050	ArgumentList	namestr		666980	1					
ANR	667051	Argument	namestr		666980	0					
ANR	667052	Identifier	namestr		666980	0					
ANR	667053	Argument	fname		666980	1					
ANR	667054	Identifier	fname		666980	0					
ANR	667055	Argument	len		666980	2					
ANR	667056	Identifier	len		666980	0					
ANR	667057	ExpressionStatement	namestr [ len ] = 0	149:4:4668:4684	666980	9	True				
ANR	667058	AssignmentExpression	namestr [ len ] = 0		666980	0		=			
ANR	667059	ArrayIndexing	namestr [ len ]		666980	0					
ANR	667060	Identifier	namestr		666980	0					
ANR	667061	Identifier	len		666980	1					
ANR	667062	PrimaryExpression	0		666980	1					
ANR	667063	IfStatement	if ( ! iodev )		666980	10					
ANR	667064	Condition	! iodev	151:8:4695:4700	666980	0	True				
ANR	667065	UnaryOperationExpression	! iodev		666980	0					
ANR	667066	UnaryOperator	!		666980	0					
ANR	667067	Identifier	iodev		666980	1					
ANR	667068	CompoundStatement		16:16:423:423	666980	1					
ANR	667069	ExpressionStatement	"gs_free_object ( mem , namestr , ""free temporary filename string"" )"	152:8:4739:4801	666980	0	True				
ANR	667070	CallExpression	"gs_free_object ( mem , namestr , ""free temporary filename string"" )"		666980	0					
ANR	667071	Callee	gs_free_object		666980	0					
ANR	667072	Identifier	gs_free_object		666980	0					
ANR	667073	ArgumentList	mem		666980	1					
ANR	667074	Argument	mem		666980	0					
ANR	667075	Identifier	mem		666980	0					
ANR	667076	Argument	namestr		666980	1					
ANR	667077	Identifier	namestr		666980	0					
ANR	667078	Argument	"""free temporary filename string"""		666980	2					
ANR	667079	PrimaryExpression	"""free temporary filename string"""		666980	0					
ANR	667080	ReturnStatement	return gs_note_error ( gs_error_invalidaccess ) ;	153:8:4811:4855	666980	1	True				
ANR	667081	CallExpression	gs_note_error ( gs_error_invalidaccess )		666980	0					
ANR	667082	Callee	gs_note_error		666980	0					
ANR	667083	Identifier	gs_note_error		666980	0					
ANR	667084	ArgumentList	gs_error_invalidaccess		666980	1					
ANR	667085	Argument	gs_error_invalidaccess		666980	0					
ANR	667086	Identifier	gs_error_invalidaccess		666980	0					
ANR	667087	ExpressionStatement	fs = GETRAMFS ( iodev -> state )	155:4:4867:4894	666980	11	True				
ANR	667088	AssignmentExpression	fs = GETRAMFS ( iodev -> state )		666980	0		=			
ANR	667089	Identifier	fs		666980	0					
ANR	667090	CallExpression	GETRAMFS ( iodev -> state )		666980	1					
ANR	667091	Callee	GETRAMFS		666980	0					
ANR	667092	Identifier	GETRAMFS		666980	0					
ANR	667093	ArgumentList	iodev -> state		666980	1					
ANR	667094	Argument	iodev -> state		666980	0					
ANR	667095	PtrMemberAccess	iodev -> state		666980	0					
ANR	667096	Identifier	iodev		666980	0					
ANR	667097	Identifier	state		666980	1					
ANR	667098	ExpressionStatement	"code = file_prepare_stream ( fname , len , file_access , DEFAULT_BUFFER_SIZE , ps , fmode , mem )"	156:4:4900:4997	666980	12	True				
ANR	667099	AssignmentExpression	"code = file_prepare_stream ( fname , len , file_access , DEFAULT_BUFFER_SIZE , ps , fmode , mem )"		666980	0		=			
ANR	667100	Identifier	code		666980	0					
ANR	667101	CallExpression	"file_prepare_stream ( fname , len , file_access , DEFAULT_BUFFER_SIZE , ps , fmode , mem )"		666980	1					
ANR	667102	Callee	file_prepare_stream		666980	0					
ANR	667103	Identifier	file_prepare_stream		666980	0					
ANR	667104	ArgumentList	fname		666980	1					
ANR	667105	Argument	fname		666980	0					
ANR	667106	Identifier	fname		666980	0					
ANR	667107	Argument	len		666980	1					
ANR	667108	Identifier	len		666980	0					
ANR	667109	Argument	file_access		666980	2					
ANR	667110	Identifier	file_access		666980	0					
ANR	667111	Argument	DEFAULT_BUFFER_SIZE		666980	3					
ANR	667112	Identifier	DEFAULT_BUFFER_SIZE		666980	0					
ANR	667113	Argument	ps		666980	4					
ANR	667114	Identifier	ps		666980	0					
ANR	667115	Argument	fmode		666980	5					
ANR	667116	Identifier	fmode		666980	0					
ANR	667117	Argument	mem		666980	6					
ANR	667118	Identifier	mem		666980	0					
ANR	667119	IfStatement	if ( code < 0 )		666980	13					
ANR	667120	Condition	code < 0	159:8:5007:5014	666980	0	True				
ANR	667121	RelationalExpression	code < 0		666980	0		<			
ANR	667122	Identifier	code		666980	0					
ANR	667123	PrimaryExpression	0		666980	1					
ANR	667124	GotoStatement	goto error ;	159:18:5017:5027	666980	1	True				
ANR	667125	Identifier	error		666980	0					
ANR	667126	IfStatement	if ( fname == 0 )		666980	14					
ANR	667127	Condition	fname == 0	160:8:5037:5046	666980	0	True				
ANR	667128	EqualityExpression	fname == 0		666980	0		==			
ANR	667129	Identifier	fname		666980	0					
ANR	667130	PrimaryExpression	0		666980	1					
ANR	667131	CompoundStatement		25:20:769:769	666980	1					
ANR	667132	ExpressionStatement	"gs_free_object ( mem , namestr , ""free temporary filename string"" )"	161:8:5059:5121	666980	0	True				
ANR	667133	CallExpression	"gs_free_object ( mem , namestr , ""free temporary filename string"" )"		666980	0					
ANR	667134	Callee	gs_free_object		666980	0					
ANR	667135	Identifier	gs_free_object		666980	0					
ANR	667136	ArgumentList	mem		666980	1					
ANR	667137	Argument	mem		666980	0					
ANR	667138	Identifier	mem		666980	0					
ANR	667139	Argument	namestr		666980	1					
ANR	667140	Identifier	namestr		666980	0					
ANR	667141	Argument	"""free temporary filename string"""		666980	2					
ANR	667142	PrimaryExpression	"""free temporary filename string"""		666980	0					
ANR	667143	ReturnStatement	return 0 ;	162:8:5131:5139	666980	1	True				
ANR	667144	PrimaryExpression	0		666980	0					
ANR	667145	SwitchStatement	switch ( fmode [ 0 ] )		666980	15					
ANR	667146	Condition	fmode [ 0 ]	165:12:5160:5167	666980	0	True				
ANR	667147	ArrayIndexing	fmode [ 0 ]		666980	0					
ANR	667148	Identifier	fmode		666980	0					
ANR	667149	PrimaryExpression	0		666980	1					
ANR	667150	CompoundStatement		30:22:890:890	666980	1					
ANR	667151	Label	case 'a' :	166:8:5180:5188	666980	0	True				
ANR	667152	ExpressionStatement	openmode = RAMFS_WRITE | RAMFS_APPEND	167:10:5200:5237	666980	1	True				
ANR	667153	AssignmentExpression	openmode = RAMFS_WRITE | RAMFS_APPEND		666980	0		=			
ANR	667154	Identifier	openmode		666980	0					
ANR	667155	InclusiveOrExpression	RAMFS_WRITE | RAMFS_APPEND		666980	1		|			
ANR	667156	Identifier	RAMFS_WRITE		666980	0					
ANR	667157	Identifier	RAMFS_APPEND		666980	1					
ANR	667158	BreakStatement	break ;	168:10:5249:5254	666980	2	True				
ANR	667159	Label	case 'r' :	169:8:5264:5272	666980	3	True				
ANR	667160	ExpressionStatement	openmode = RAMFS_READ	170:10:5284:5305	666980	4	True				
ANR	667161	AssignmentExpression	openmode = RAMFS_READ		666980	0		=			
ANR	667162	Identifier	openmode		666980	0					
ANR	667163	Identifier	RAMFS_READ		666980	1					
ANR	667164	IfStatement	if ( fmode [ 1 ] == '+' )		666980	5					
ANR	667165	Condition	fmode [ 1 ] == '+'	171:14:5321:5335	666980	0	True				
ANR	667166	EqualityExpression	fmode [ 1 ] == '+'		666980	0		==			
ANR	667167	ArrayIndexing	fmode [ 1 ]		666980	0					
ANR	667168	Identifier	fmode		666980	0					
ANR	667169	PrimaryExpression	1		666980	1					
ANR	667170	PrimaryExpression	'+'		666980	1					
ANR	667171	ExpressionStatement	openmode |= RAMFS_WRITE	172:12:5350:5373	666980	1	True				
ANR	667172	AssignmentExpression	openmode |= RAMFS_WRITE		666980	0		|=			
ANR	667173	Identifier	openmode		666980	0					
ANR	667174	Identifier	RAMFS_WRITE		666980	1					
ANR	667175	BreakStatement	break ;	173:10:5385:5390	666980	6	True				
ANR	667176	Label	case 'w' :	174:8:5400:5408	666980	7	True				
ANR	667177	ExpressionStatement	openmode |= RAMFS_WRITE | RAMFS_TRUNC | RAMFS_CREATE	175:10:5420:5472	666980	8	True				
ANR	667178	AssignmentExpression	openmode |= RAMFS_WRITE | RAMFS_TRUNC | RAMFS_CREATE		666980	0		|=			
ANR	667179	Identifier	openmode		666980	0					
ANR	667180	InclusiveOrExpression	RAMFS_WRITE | RAMFS_TRUNC | RAMFS_CREATE		666980	1		|			
ANR	667181	Identifier	RAMFS_WRITE		666980	0					
ANR	667182	InclusiveOrExpression	RAMFS_TRUNC | RAMFS_CREATE		666980	1		|			
ANR	667183	Identifier	RAMFS_TRUNC		666980	0					
ANR	667184	Identifier	RAMFS_CREATE		666980	1					
ANR	667185	IfStatement	if ( fmode [ 1 ] == '+' )		666980	9					
ANR	667186	Condition	fmode [ 1 ] == '+'	176:14:5488:5502	666980	0	True				
ANR	667187	EqualityExpression	fmode [ 1 ] == '+'		666980	0		==			
ANR	667188	ArrayIndexing	fmode [ 1 ]		666980	0					
ANR	667189	Identifier	fmode		666980	0					
ANR	667190	PrimaryExpression	1		666980	1					
ANR	667191	PrimaryExpression	'+'		666980	1					
ANR	667192	ExpressionStatement	openmode |= RAMFS_READ	177:13:5518:5540	666980	1	True				
ANR	667193	AssignmentExpression	openmode |= RAMFS_READ		666980	0		|=			
ANR	667194	Identifier	openmode		666980	0					
ANR	667195	Identifier	RAMFS_READ		666980	1					
ANR	667196	ExpressionStatement	"file = ramfs_open ( mem , fs , namestr , openmode )"	186:4:5911:5954	666980	16	True				
ANR	667197	AssignmentExpression	"file = ramfs_open ( mem , fs , namestr , openmode )"		666980	0		=			
ANR	667198	Identifier	file		666980	0					
ANR	667199	CallExpression	"ramfs_open ( mem , fs , namestr , openmode )"		666980	1					
ANR	667200	Callee	ramfs_open		666980	0					
ANR	667201	Identifier	ramfs_open		666980	0					
ANR	667202	ArgumentList	mem		666980	1					
ANR	667203	Argument	mem		666980	0					
ANR	667204	Identifier	mem		666980	0					
ANR	667205	Argument	fs		666980	1					
ANR	667206	Identifier	fs		666980	0					
ANR	667207	Argument	namestr		666980	2					
ANR	667208	Identifier	namestr		666980	0					
ANR	667209	Argument	openmode		666980	3					
ANR	667210	Identifier	openmode		666980	0					
ANR	667211	IfStatement	if ( ! file )		666980	17					
ANR	667212	Condition	! file	187:7:5963:5967	666980	0	True				
ANR	667213	UnaryOperationExpression	! file		666980	0					
ANR	667214	UnaryOperator	!		666980	0					
ANR	667215	Identifier	file		666980	1					
ANR	667216	CompoundStatement		52:14:1690:1690	666980	1					
ANR	667217	ExpressionStatement	code = ramfs_errno_to_code ( ramfs_error ( fs ) )	187:16:5972:6015	666980	0	True				
ANR	667218	AssignmentExpression	code = ramfs_errno_to_code ( ramfs_error ( fs ) )		666980	0		=			
ANR	667219	Identifier	code		666980	0					
ANR	667220	CallExpression	ramfs_errno_to_code ( ramfs_error ( fs ) )		666980	1					
ANR	667221	Callee	ramfs_errno_to_code		666980	0					
ANR	667222	Identifier	ramfs_errno_to_code		666980	0					
ANR	667223	ArgumentList	ramfs_error ( fs )		666980	1					
ANR	667224	Argument	ramfs_error ( fs )		666980	0					
ANR	667225	CallExpression	ramfs_error ( fs )		666980	0					
ANR	667226	Callee	ramfs_error		666980	0					
ANR	667227	Identifier	ramfs_error		666980	0					
ANR	667228	ArgumentList	fs		666980	1					
ANR	667229	Argument	fs		666980	0					
ANR	667230	Identifier	fs		666980	0					
ANR	667231	GotoStatement	goto error ;	187:61:6017:6027	666980	1	True				
ANR	667232	Identifier	error		666980	0					
ANR	667233	SwitchStatement	switch ( fmode [ 0 ] )		666980	18					
ANR	667234	Condition	fmode [ 0 ]	189:12:6044:6051	666980	0	True				
ANR	667235	ArrayIndexing	fmode [ 0 ]		666980	0					
ANR	667236	Identifier	fmode		666980	0					
ANR	667237	PrimaryExpression	0		666980	1					
ANR	667238	CompoundStatement		54:22:1774:1774	666980	1					
ANR	667239	Label	case 'a' :	190:4:6060:6068	666980	0	True				
ANR	667240	ExpressionStatement	"sappend_ram ( * ps , file , ( * ps ) -> cbuf , ( * ps ) -> bsize )"	191:4:6074:6123	666980	1	True				
ANR	667241	CallExpression	"sappend_ram ( * ps , file , ( * ps ) -> cbuf , ( * ps ) -> bsize )"		666980	0					
ANR	667242	Callee	sappend_ram		666980	0					
ANR	667243	Identifier	sappend_ram		666980	0					
ANR	667244	ArgumentList	* ps		666980	1					
ANR	667245	Argument	* ps		666980	0					
ANR	667246	UnaryOperationExpression	* ps		666980	0					
ANR	667247	UnaryOperator	*		666980	0					
ANR	667248	Identifier	ps		666980	1					
ANR	667249	Argument	file		666980	1					
ANR	667250	Identifier	file		666980	0					
ANR	667251	Argument	( * ps ) -> cbuf		666980	2					
ANR	667252	PtrMemberAccess	( * ps ) -> cbuf		666980	0					
ANR	667253	UnaryOperationExpression	* ps		666980	0					
ANR	667254	UnaryOperator	*		666980	0					
ANR	667255	Identifier	ps		666980	1					
ANR	667256	Identifier	cbuf		666980	1					
ANR	667257	Argument	( * ps ) -> bsize		666980	3					
ANR	667258	PtrMemberAccess	( * ps ) -> bsize		666980	0					
ANR	667259	UnaryOperationExpression	* ps		666980	0					
ANR	667260	UnaryOperator	*		666980	0					
ANR	667261	Identifier	ps		666980	1					
ANR	667262	Identifier	bsize		666980	1					
ANR	667263	BreakStatement	break ;	192:4:6129:6134	666980	2	True				
ANR	667264	Label	case 'r' :	193:4:6140:6148	666980	3	True				
ANR	667265	ExpressionStatement	"sread_ram ( * ps , file , ( * ps ) -> cbuf , ( * ps ) -> bsize )"	194:4:6154:6201	666980	4	True				
ANR	667266	CallExpression	"sread_ram ( * ps , file , ( * ps ) -> cbuf , ( * ps ) -> bsize )"		666980	0					
ANR	667267	Callee	sread_ram		666980	0					
ANR	667268	Identifier	sread_ram		666980	0					
ANR	667269	ArgumentList	* ps		666980	1					
ANR	667270	Argument	* ps		666980	0					
ANR	667271	UnaryOperationExpression	* ps		666980	0					
ANR	667272	UnaryOperator	*		666980	0					
ANR	667273	Identifier	ps		666980	1					
ANR	667274	Argument	file		666980	1					
ANR	667275	Identifier	file		666980	0					
ANR	667276	Argument	( * ps ) -> cbuf		666980	2					
ANR	667277	PtrMemberAccess	( * ps ) -> cbuf		666980	0					
ANR	667278	UnaryOperationExpression	* ps		666980	0					
ANR	667279	UnaryOperator	*		666980	0					
ANR	667280	Identifier	ps		666980	1					
ANR	667281	Identifier	cbuf		666980	1					
ANR	667282	Argument	( * ps ) -> bsize		666980	3					
ANR	667283	PtrMemberAccess	( * ps ) -> bsize		666980	0					
ANR	667284	UnaryOperationExpression	* ps		666980	0					
ANR	667285	UnaryOperator	*		666980	0					
ANR	667286	Identifier	ps		666980	1					
ANR	667287	Identifier	bsize		666980	1					
ANR	667288	BreakStatement	break ;	195:4:6207:6212	666980	5	True				
ANR	667289	Label	case 'w' :	196:4:6218:6226	666980	6	True				
ANR	667290	ExpressionStatement	"swrite_ram ( * ps , file , ( * ps ) -> cbuf , ( * ps ) -> bsize )"	197:4:6232:6280	666980	7	True				
ANR	667291	CallExpression	"swrite_ram ( * ps , file , ( * ps ) -> cbuf , ( * ps ) -> bsize )"		666980	0					
ANR	667292	Callee	swrite_ram		666980	0					
ANR	667293	Identifier	swrite_ram		666980	0					
ANR	667294	ArgumentList	* ps		666980	1					
ANR	667295	Argument	* ps		666980	0					
ANR	667296	UnaryOperationExpression	* ps		666980	0					
ANR	667297	UnaryOperator	*		666980	0					
ANR	667298	Identifier	ps		666980	1					
ANR	667299	Argument	file		666980	1					
ANR	667300	Identifier	file		666980	0					
ANR	667301	Argument	( * ps ) -> cbuf		666980	2					
ANR	667302	PtrMemberAccess	( * ps ) -> cbuf		666980	0					
ANR	667303	UnaryOperationExpression	* ps		666980	0					
ANR	667304	UnaryOperator	*		666980	0					
ANR	667305	Identifier	ps		666980	1					
ANR	667306	Identifier	cbuf		666980	1					
ANR	667307	Argument	( * ps ) -> bsize		666980	3					
ANR	667308	PtrMemberAccess	( * ps ) -> bsize		666980	0					
ANR	667309	UnaryOperationExpression	* ps		666980	0					
ANR	667310	UnaryOperator	*		666980	0					
ANR	667311	Identifier	ps		666980	1					
ANR	667312	Identifier	bsize		666980	1					
ANR	667313	IfStatement	if ( fmode [ 1 ] == '+' )		666980	19					
ANR	667314	Condition	fmode [ 1 ] == '+'	199:8:6296:6310	666980	0	True				
ANR	667315	EqualityExpression	fmode [ 1 ] == '+'		666980	0		==			
ANR	667316	ArrayIndexing	fmode [ 1 ]		666980	0					
ANR	667317	Identifier	fmode		666980	0					
ANR	667318	PrimaryExpression	1		666980	1					
ANR	667319	PrimaryExpression	'+'		666980	1					
ANR	667320	CompoundStatement		64:25:2033:2033	666980	1					
ANR	667321	ExpressionStatement	( * ps ) -> modes = ( * ps ) -> file_modes |= s_mode_read | s_mode_write	200:6:6321:6383	666980	0	True				
ANR	667322	AssignmentExpression	( * ps ) -> modes = ( * ps ) -> file_modes |= s_mode_read | s_mode_write		666980	0		=			
ANR	667323	PtrMemberAccess	( * ps ) -> modes		666980	0					
ANR	667324	UnaryOperationExpression	* ps		666980	0					
ANR	667325	UnaryOperator	*		666980	0					
ANR	667326	Identifier	ps		666980	1					
ANR	667327	Identifier	modes		666980	1					
ANR	667328	AssignmentExpression	( * ps ) -> file_modes |= s_mode_read | s_mode_write		666980	1		|=			
ANR	667329	PtrMemberAccess	( * ps ) -> file_modes		666980	0					
ANR	667330	UnaryOperationExpression	* ps		666980	0					
ANR	667331	UnaryOperator	*		666980	0					
ANR	667332	Identifier	ps		666980	1					
ANR	667333	Identifier	file_modes		666980	1					
ANR	667334	InclusiveOrExpression	s_mode_read | s_mode_write		666980	1		|			
ANR	667335	Identifier	s_mode_read		666980	0					
ANR	667336	Identifier	s_mode_write		666980	1					
ANR	667337	ExpressionStatement	( * ps ) -> save_close = ( * ps ) -> procs . close	202:4:6395:6433	666980	20	True				
ANR	667338	AssignmentExpression	( * ps ) -> save_close = ( * ps ) -> procs . close		666980	0		=			
ANR	667339	PtrMemberAccess	( * ps ) -> save_close		666980	0					
ANR	667340	UnaryOperationExpression	* ps		666980	0					
ANR	667341	UnaryOperator	*		666980	0					
ANR	667342	Identifier	ps		666980	1					
ANR	667343	Identifier	save_close		666980	1					
ANR	667344	MemberAccess	( * ps ) -> procs . close		666980	1					
ANR	667345	PtrMemberAccess	( * ps ) -> procs		666980	0					
ANR	667346	UnaryOperationExpression	* ps		666980	0					
ANR	667347	UnaryOperator	*		666980	0					
ANR	667348	Identifier	ps		666980	1					
ANR	667349	Identifier	procs		666980	1					
ANR	667350	Identifier	close		666980	1					
ANR	667351	ExpressionStatement	( * ps ) -> procs . close = file_close_file	203:4:6439:6475	666980	21	True				
ANR	667352	AssignmentExpression	( * ps ) -> procs . close = file_close_file		666980	0		=			
ANR	667353	MemberAccess	( * ps ) -> procs . close		666980	0					
ANR	667354	PtrMemberAccess	( * ps ) -> procs		666980	0					
ANR	667355	UnaryOperationExpression	* ps		666980	0					
ANR	667356	UnaryOperator	*		666980	0					
ANR	667357	Identifier	ps		666980	1					
ANR	667358	Identifier	procs		666980	1					
ANR	667359	Identifier	close		666980	1					
ANR	667360	Identifier	file_close_file		666980	1					
ANR	667361	Label	error :	204:1:6478:6483	666980	22	True				
ANR	667362	Identifier	error		666980	0					
ANR	667363	ExpressionStatement	"gs_free_object ( mem , namestr , ""free temporary filename string"" )"	205:4:6489:6551	666980	23	True				
ANR	667364	CallExpression	"gs_free_object ( mem , namestr , ""free temporary filename string"" )"		666980	0					
ANR	667365	Callee	gs_free_object		666980	0					
ANR	667366	Identifier	gs_free_object		666980	0					
ANR	667367	ArgumentList	mem		666980	1					
ANR	667368	Argument	mem		666980	0					
ANR	667369	Identifier	mem		666980	0					
ANR	667370	Argument	namestr		666980	1					
ANR	667371	Identifier	namestr		666980	0					
ANR	667372	Argument	"""free temporary filename string"""		666980	2					
ANR	667373	PrimaryExpression	"""free temporary filename string"""		666980	0					
ANR	667374	ReturnStatement	return code ;	207:4:6590:6601	666980	24	True				
ANR	667375	Identifier	code		666980	0					
ANR	667376	ReturnType	static int		666980	1					
ANR	667377	Identifier	ram_open_file		666980	2					
ANR	667378	ParameterList	"gx_io_device * iodev , const char * fname , uint len , const char * file_access , stream * * ps , gs_memory_t * mem"		666980	3					
ANR	667379	Parameter	gx_io_device * iodev	134:14:4166:4185	666980	0	True				
ANR	667380	ParameterType	gx_io_device *		666980	0					
ANR	667381	Identifier	iodev		666980	1					
ANR	667382	Parameter	const char * fname	134:36:4188:4204	666980	1	True				
ANR	667383	ParameterType	const char *		666980	0					
ANR	667384	Identifier	fname		666980	1					
ANR	667385	Parameter	uint len	134:55:4207:4214	666980	2	True				
ANR	667386	ParameterType	uint		666980	0					
ANR	667387	Identifier	len		666980	1					
ANR	667388	Parameter	const char * file_access	135:4:4221:4243	666980	3	True				
ANR	667389	ParameterType	const char *		666980	0					
ANR	667390	Identifier	file_access		666980	1					
ANR	667391	Parameter	stream * * ps	135:29:4246:4257	666980	4	True				
ANR	667392	ParameterType	stream * *		666980	0					
ANR	667393	Identifier	ps		666980	1					
ANR	667394	Parameter	gs_memory_t * mem	135:43:4260:4276	666980	5	True				
ANR	667395	ParameterType	gs_memory_t *		666980	0					
ANR	667396	Identifier	mem		666980	1					
ANR	667397	CFGEntryNode	ENTRY		666980		True				
ANR	667398	CFGExitNode	EXIT		666980		True				
ANR	667399	Symbol	ps		666980						
ANR	667400	Symbol	code		666980						
ANR	667401	Symbol	ramfs_errno_to_code		666980						
ANR	667402	Symbol	( * ps ) -> bsize		666980						
ANR	667403	Symbol	s_mode_write		666980						
ANR	667404	Symbol	RAMFS_WRITE		666980						
ANR	667405	Symbol	( * ps ) -> modes		666980						
ANR	667406	Symbol	file_access		666980						
ANR	667407	Symbol	( * ps ) -> procs		666980						
ANR	667408	Symbol	fs		666980						
ANR	667409	Symbol	RAMFS_TRUNC		666980						
ANR	667410	Symbol	file_prepare_stream		666980						
ANR	667411	Symbol	RAMFS_READ		666980						
ANR	667412	Symbol	file		666980						
ANR	667413	Symbol	* namestr		666980						
ANR	667414	Symbol	iodev		666980						
ANR	667415	Symbol	len		666980						
ANR	667416	Symbol	mem		666980						
ANR	667417	Symbol	( * ps ) -> save_close		666980						
ANR	667418	Symbol	fmode		666980						
ANR	667419	Symbol	openmode		666980						
ANR	667420	Symbol	gs_error_invalidaccess		666980						
ANR	667421	Symbol	s_mode_read		666980						
ANR	667422	Symbol	RAMFS_CREATE		666980						
ANR	667423	Symbol	ramfs_error		666980						
ANR	667424	Symbol	fname		666980						
ANR	667425	Symbol	RAMFS_APPEND		666980						
ANR	667426	Symbol	gs_alloc_bytes		666980						
ANR	667427	Symbol	* fmode		666980						
ANR	667428	Symbol	NULL		666980						
ANR	667429	Symbol	( * ps ) -> file_modes		666980						
ANR	667430	Symbol	( * ps ) -> procs . close		666980						
ANR	667431	Symbol	namestr		666980						
ANR	667432	Symbol	* iodev		666980						
ANR	667433	Symbol	DEFAULT_BUFFER_SIZE		666980						
ANR	667434	Symbol	( * ps ) -> cbuf		666980						
ANR	667435	Symbol	* ps		666980						
ANR	667436	Symbol	* * ps		666980						
ANR	667437	Symbol	GETRAMFS		666980						
ANR	667438	Symbol	gs_error_VMerror		666980						
ANR	667439	Symbol	gs_note_error		666980						
ANR	667440	Symbol	ramfs_open		666980						
ANR	667441	Symbol	iodev -> state		666980						
ANR	667442	Symbol	file_close_file		666980						
ANR	667443	Symbol	* len		666980						
ANR	667444	Function	sread_ram	211:0:6656:7184							
ANR	667445	FunctionDef	"sread_ram (register stream * s , ramhandle * file , byte * buf , uint len)"		667444	0					
ANR	667446	CompoundStatement		213:0:6739:7184	667444	0					
ANR	667447	Statement	static	214:4:6745:6750	667444	0	True				
ANR	667448	IdentifierDeclStatement	"const stream_procs p = { s_ram_available , s_ram_read_seek , s_std_read_reset , s_std_read_flush , s_ram_read_close , s_ram_read_process , s_ram_switch } ;"	214:11:6752:6915	667444	1	True				
ANR	667449	IdentifierDecl	"p = { s_ram_available , s_ram_read_seek , s_std_read_reset , s_std_read_flush , s_ram_read_close , s_ram_read_process , s_ram_switch }"		667444	0					
ANR	667450	IdentifierDeclType	const stream_procs		667444	0					
ANR	667451	Identifier	p		667444	1					
ANR	667452	AssignmentExpression	"p = { s_ram_available , s_ram_read_seek , s_std_read_reset , s_std_read_flush , s_ram_read_close , s_ram_read_process , s_ram_switch }"		667444	2		=			
ANR	667453	Identifier	p		667444	0					
ANR	667454	InitializerList	s_ram_available		667444	1					
ANR	667455	Identifier	s_ram_available		667444	0					
ANR	667456	Identifier	s_ram_read_seek		667444	1					
ANR	667457	Identifier	s_std_read_reset		667444	2					
ANR	667458	Identifier	s_std_read_flush		667444	3					
ANR	667459	Identifier	s_ram_read_close		667444	4					
ANR	667460	Identifier	s_ram_read_process		667444	5					
ANR	667461	Identifier	s_ram_switch		667444	6					
ANR	667462	ExpressionStatement	"s_std_init ( s , buf , len , & p , s_mode_read + s_mode_seek )"	220:4:6922:6975	667444	2	True				
ANR	667463	CallExpression	"s_std_init ( s , buf , len , & p , s_mode_read + s_mode_seek )"		667444	0					
ANR	667464	Callee	s_std_init		667444	0					
ANR	667465	Identifier	s_std_init		667444	0					
ANR	667466	ArgumentList	s		667444	1					
ANR	667467	Argument	s		667444	0					
ANR	667468	Identifier	s		667444	0					
ANR	667469	Argument	buf		667444	1					
ANR	667470	Identifier	buf		667444	0					
ANR	667471	Argument	len		667444	2					
ANR	667472	Identifier	len		667444	0					
ANR	667473	Argument	& p		667444	3					
ANR	667474	UnaryOperationExpression	& p		667444	0					
ANR	667475	UnaryOperator	&		667444	0					
ANR	667476	Identifier	p		667444	1					
ANR	667477	Argument	s_mode_read + s_mode_seek		667444	4					
ANR	667478	AdditiveExpression	s_mode_read + s_mode_seek		667444	0		+			
ANR	667479	Identifier	s_mode_read		667444	0					
ANR	667480	Identifier	s_mode_seek		667444	1					
ANR	667481	ExpressionStatement	s -> file = ( FILE * ) file	221:4:6981:7002	667444	3	True				
ANR	667482	AssignmentExpression	s -> file = ( FILE * ) file		667444	0		=			
ANR	667483	PtrMemberAccess	s -> file		667444	0					
ANR	667484	Identifier	s		667444	0					
ANR	667485	Identifier	file		667444	1					
ANR	667486	CastExpression	( FILE * ) file		667444	1					
ANR	667487	CastTarget	FILE *		667444	0					
ANR	667488	Identifier	file		667444	1					
ANR	667489	ExpressionStatement	s -> file_modes = s -> modes	222:4:7008:7032	667444	4	True				
ANR	667490	AssignmentExpression	s -> file_modes = s -> modes		667444	0		=			
ANR	667491	PtrMemberAccess	s -> file_modes		667444	0					
ANR	667492	Identifier	s		667444	0					
ANR	667493	Identifier	file_modes		667444	1					
ANR	667494	PtrMemberAccess	s -> modes		667444	1					
ANR	667495	Identifier	s		667444	0					
ANR	667496	Identifier	modes		667444	1					
ANR	667497	ExpressionStatement	s -> file_offset = 0	223:4:7038:7056	667444	5	True				
ANR	667498	AssignmentExpression	s -> file_offset = 0		667444	0		=			
ANR	667499	PtrMemberAccess	s -> file_offset		667444	0					
ANR	667500	Identifier	s		667444	0					
ANR	667501	Identifier	file_offset		667444	1					
ANR	667502	PrimaryExpression	0		667444	1					
ANR	667503	ExpressionStatement	"ramfile_seek ( file , 0 , RAMFS_SEEK_END )"	224:4:7062:7099	667444	6	True				
ANR	667504	CallExpression	"ramfile_seek ( file , 0 , RAMFS_SEEK_END )"		667444	0					
ANR	667505	Callee	ramfile_seek		667444	0					
ANR	667506	Identifier	ramfile_seek		667444	0					
ANR	667507	ArgumentList	file		667444	1					
ANR	667508	Argument	file		667444	0					
ANR	667509	Identifier	file		667444	0					
ANR	667510	Argument	0		667444	1					
ANR	667511	PrimaryExpression	0		667444	0					
ANR	667512	Argument	RAMFS_SEEK_END		667444	2					
ANR	667513	Identifier	RAMFS_SEEK_END		667444	0					
ANR	667514	ExpressionStatement	s -> file_limit = ramfile_tell ( file )	225:4:7105:7139	667444	7	True				
ANR	667515	AssignmentExpression	s -> file_limit = ramfile_tell ( file )		667444	0		=			
ANR	667516	PtrMemberAccess	s -> file_limit		667444	0					
ANR	667517	Identifier	s		667444	0					
ANR	667518	Identifier	file_limit		667444	1					
ANR	667519	CallExpression	ramfile_tell ( file )		667444	1					
ANR	667520	Callee	ramfile_tell		667444	0					
ANR	667521	Identifier	ramfile_tell		667444	0					
ANR	667522	ArgumentList	file		667444	1					
ANR	667523	Argument	file		667444	0					
ANR	667524	Identifier	file		667444	0					
ANR	667525	ExpressionStatement	"ramfile_seek ( file , 0 , RAMFS_SEEK_SET )"	226:4:7145:7182	667444	8	True				
ANR	667526	CallExpression	"ramfile_seek ( file , 0 , RAMFS_SEEK_SET )"		667444	0					
ANR	667527	Callee	ramfile_seek		667444	0					
ANR	667528	Identifier	ramfile_seek		667444	0					
ANR	667529	ArgumentList	file		667444	1					
ANR	667530	Argument	file		667444	0					
ANR	667531	Identifier	file		667444	0					
ANR	667532	Argument	0		667444	1					
ANR	667533	PrimaryExpression	0		667444	0					
ANR	667534	Argument	RAMFS_SEEK_SET		667444	2					
ANR	667535	Identifier	RAMFS_SEEK_SET		667444	0					
ANR	667536	ReturnType	static void		667444	1					
ANR	667537	Identifier	sread_ram		667444	2					
ANR	667538	ParameterList	"register stream * s , ramhandle * file , byte * buf , uint len"		667444	3					
ANR	667539	Parameter	register stream * s	212:10:6678:6696	667444	0	True				
ANR	667540	ParameterType	register stream *		667444	0					
ANR	667541	Identifier	s		667444	1					
ANR	667542	Parameter	ramhandle * file	212:31:6699:6714	667444	1	True				
ANR	667543	ParameterType	ramhandle *		667444	0					
ANR	667544	Identifier	file		667444	1					
ANR	667545	Parameter	byte * buf	212:49:6717:6726	667444	2	True				
ANR	667546	ParameterType	byte *		667444	0					
ANR	667547	Identifier	buf		667444	1					
ANR	667548	Parameter	uint len	212:61:6729:6736	667444	3	True				
ANR	667549	ParameterType	uint		667444	0					
ANR	667550	Identifier	len		667444	1					
ANR	667551	CFGEntryNode	ENTRY		667444		True				
ANR	667552	CFGExitNode	EXIT		667444		True				
ANR	667553	Symbol	s -> file		667444						
ANR	667554	Symbol	ramfile_tell		667444						
ANR	667555	Symbol	s -> file_modes		667444						
ANR	667556	Symbol	s -> file_offset		667444						
ANR	667557	Symbol	s_ram_read_close		667444						
ANR	667558	Symbol	s_ram_read_process		667444						
ANR	667559	Symbol	s -> file_limit		667444						
ANR	667560	Symbol	p		667444						
ANR	667561	Symbol	s_std_read_reset		667444						
ANR	667562	Symbol	buf		667444						
ANR	667563	Symbol	s		667444						
ANR	667564	Symbol	file		667444						
ANR	667565	Symbol	len		667444						
ANR	667566	Symbol	s_mode_seek		667444						
ANR	667567	Symbol	s_ram_available		667444						
ANR	667568	Symbol	& p		667444						
ANR	667569	Symbol	s_ram_switch		667444						
ANR	667570	Symbol	RAMFS_SEEK_SET		667444						
ANR	667571	Symbol	s_std_read_flush		667444						
ANR	667572	Symbol	s_ram_read_seek		667444						
ANR	667573	Symbol	s_mode_read		667444						
ANR	667574	Symbol	* s		667444						
ANR	667575	Symbol	RAMFS_SEEK_END		667444						
ANR	667576	Symbol	s -> modes		667444						
ANR	667577	Function	s_ram_available	230:0:7228:7462							
ANR	667578	FunctionDef	"s_ram_available (register stream * s , gs_offset_t * pl)"		667577	0					
ANR	667579	CompoundStatement		232:0:7293:7462	667577	0					
ANR	667580	IdentifierDeclStatement	long max_avail = s -> file_limit - stell ( s ) ;	233:4:7299:7340	667577	0	True				
ANR	667581	IdentifierDecl	max_avail = s -> file_limit - stell ( s )		667577	0					
ANR	667582	IdentifierDeclType	long		667577	0					
ANR	667583	Identifier	max_avail		667577	1					
ANR	667584	AssignmentExpression	max_avail = s -> file_limit - stell ( s )		667577	2		=			
ANR	667585	Identifier	max_avail		667577	0					
ANR	667586	AdditiveExpression	s -> file_limit - stell ( s )		667577	1		-			
ANR	667587	PtrMemberAccess	s -> file_limit		667577	0					
ANR	667588	Identifier	s		667577	0					
ANR	667589	Identifier	file_limit		667577	1					
ANR	667590	CallExpression	stell ( s )		667577	1					
ANR	667591	Callee	stell		667577	0					
ANR	667592	Identifier	stell		667577	0					
ANR	667593	ArgumentList	s		667577	1					
ANR	667594	Argument	s		667577	0					
ANR	667595	Identifier	s		667577	0					
ANR	667596	ExpressionStatement	* pl = max_avail	235:4:7347:7362	667577	1	True				
ANR	667597	AssignmentExpression	* pl = max_avail		667577	0		=			
ANR	667598	UnaryOperationExpression	* pl		667577	0					
ANR	667599	UnaryOperator	*		667577	0					
ANR	667600	Identifier	pl		667577	1					
ANR	667601	Identifier	max_avail		667577	1					
ANR	667602	IfStatement	if ( * pl == 0 && ramfile_eof ( ( ramhandle * ) s -> file ) )		667577	2					
ANR	667603	Condition	* pl == 0 && ramfile_eof ( ( ramhandle * ) s -> file )	236:7:7371:7414	667577	0	True				
ANR	667604	AndExpression	* pl == 0 && ramfile_eof ( ( ramhandle * ) s -> file )		667577	0		&&			
ANR	667605	EqualityExpression	* pl == 0		667577	0		==			
ANR	667606	UnaryOperationExpression	* pl		667577	0					
ANR	667607	UnaryOperator	*		667577	0					
ANR	667608	Identifier	pl		667577	1					
ANR	667609	PrimaryExpression	0		667577	1					
ANR	667610	CallExpression	ramfile_eof ( ( ramhandle * ) s -> file )		667577	1					
ANR	667611	Callee	ramfile_eof		667577	0					
ANR	667612	Identifier	ramfile_eof		667577	0					
ANR	667613	ArgumentList	( ramhandle * ) s -> file		667577	1					
ANR	667614	Argument	( ramhandle * ) s -> file		667577	0					
ANR	667615	CastExpression	( ramhandle * ) s -> file		667577	0					
ANR	667616	CastTarget	ramhandle *		667577	0					
ANR	667617	PtrMemberAccess	s -> file		667577	1					
ANR	667618	Identifier	s		667577	0					
ANR	667619	Identifier	file		667577	1					
ANR	667620	ExpressionStatement	* pl = - 1	237:4:7421:7429	667577	1	True				
ANR	667621	AssignmentExpression	* pl = - 1		667577	0		=			
ANR	667622	UnaryOperationExpression	* pl		667577	0					
ANR	667623	UnaryOperator	*		667577	0					
ANR	667624	Identifier	pl		667577	1					
ANR	667625	UnaryOperationExpression	- 1		667577	1					
ANR	667626	UnaryOperator	-		667577	0					
ANR	667627	PrimaryExpression	1		667577	1					
ANR	667628	ReturnStatement	return 0 ;	238:4:7452:7460	667577	3	True				
ANR	667629	PrimaryExpression	0		667577	0					
ANR	667630	ReturnType	static int		667577	1					
ANR	667631	Identifier	s_ram_available		667577	2					
ANR	667632	ParameterList	"register stream * s , gs_offset_t * pl"		667577	3					
ANR	667633	Parameter	register stream * s	231:16:7255:7273	667577	0	True				
ANR	667634	ParameterType	register stream *		667577	0					
ANR	667635	Identifier	s		667577	1					
ANR	667636	Parameter	gs_offset_t * pl	231:37:7276:7290	667577	1	True				
ANR	667637	ParameterType	gs_offset_t *		667577	0					
ANR	667638	Identifier	pl		667577	1					
ANR	667639	CFGEntryNode	ENTRY		667577		True				
ANR	667640	CFGExitNode	EXIT		667577		True				
ANR	667641	Symbol	* pl		667577						
ANR	667642	Symbol	s		667577						
ANR	667643	Symbol	s -> file		667577						
ANR	667644	Symbol	ramfile_eof		667577						
ANR	667645	Symbol	pl		667577						
ANR	667646	Symbol	s -> file_limit		667577						
ANR	667647	Symbol	* s		667577						
ANR	667648	Symbol	stell		667577						
ANR	667649	Symbol	max_avail		667577						
ANR	667650	Function	s_ram_read_seek	241:0:7465:7993							
ANR	667651	FunctionDef	"s_ram_read_seek (register stream * s , gs_offset_t pos)"		667650	0					
ANR	667652	CompoundStatement		243:0:7530:7993	667650	0					
ANR	667653	IdentifierDeclStatement	uint end = s -> srlimit - s -> cbuf + 1 ;	244:4:7536:7571	667650	0	True				
ANR	667654	IdentifierDecl	end = s -> srlimit - s -> cbuf + 1		667650	0					
ANR	667655	IdentifierDeclType	uint		667650	0					
ANR	667656	Identifier	end		667650	1					
ANR	667657	AssignmentExpression	end = s -> srlimit - s -> cbuf + 1		667650	2		=			
ANR	667658	Identifier	end		667650	0					
ANR	667659	AdditiveExpression	s -> srlimit - s -> cbuf + 1		667650	1		-			
ANR	667660	PtrMemberAccess	s -> srlimit		667650	0					
ANR	667661	Identifier	s		667650	0					
ANR	667662	Identifier	srlimit		667650	1					
ANR	667663	AdditiveExpression	s -> cbuf + 1		667650	1		+			
ANR	667664	PtrMemberAccess	s -> cbuf		667650	0					
ANR	667665	Identifier	s		667650	0					
ANR	667666	Identifier	cbuf		667650	1					
ANR	667667	PrimaryExpression	1		667650	1					
ANR	667668	IdentifierDeclStatement	long offset = pos - s -> position ;	245:4:7577:7608	667650	1	True				
ANR	667669	IdentifierDecl	offset = pos - s -> position		667650	0					
ANR	667670	IdentifierDeclType	long		667650	0					
ANR	667671	Identifier	offset		667650	1					
ANR	667672	AssignmentExpression	offset = pos - s -> position		667650	2		=			
ANR	667673	Identifier	offset		667650	0					
ANR	667674	AdditiveExpression	pos - s -> position		667650	1		-			
ANR	667675	Identifier	pos		667650	0					
ANR	667676	PtrMemberAccess	s -> position		667650	1					
ANR	667677	Identifier	s		667650	0					
ANR	667678	Identifier	position		667650	1					
ANR	667679	IfStatement	if ( offset >= 0 && offset <= end )		667650	2					
ANR	667680	Condition	offset >= 0 && offset <= end	247:8:7619:7646	667650	0	True				
ANR	667681	AndExpression	offset >= 0 && offset <= end		667650	0		&&			
ANR	667682	RelationalExpression	offset >= 0		667650	0		>=			
ANR	667683	Identifier	offset		667650	0					
ANR	667684	PrimaryExpression	0		667650	1					
ANR	667685	RelationalExpression	offset <= end		667650	1		<=			
ANR	667686	Identifier	offset		667650	0					
ANR	667687	Identifier	end		667650	1					
ANR	667688	CompoundStatement		5:38:118:118	667650	1					
ANR	667689	ExpressionStatement	s -> srptr = s -> cbuf + offset - 1	248:4:7693:7724	667650	0	True				
ANR	667690	AssignmentExpression	s -> srptr = s -> cbuf + offset - 1		667650	0		=			
ANR	667691	PtrMemberAccess	s -> srptr		667650	0					
ANR	667692	Identifier	s		667650	0					
ANR	667693	Identifier	srptr		667650	1					
ANR	667694	AdditiveExpression	s -> cbuf + offset - 1		667650	1		+			
ANR	667695	PtrMemberAccess	s -> cbuf		667650	0					
ANR	667696	Identifier	s		667650	0					
ANR	667697	Identifier	cbuf		667650	1					
ANR	667698	AdditiveExpression	offset - 1		667650	1		-			
ANR	667699	Identifier	offset		667650	0					
ANR	667700	PrimaryExpression	1		667650	1					
ANR	667701	ReturnStatement	return 0 ;	249:4:7730:7738	667650	1	True				
ANR	667702	PrimaryExpression	0		667650	0					
ANR	667703	IfStatement	"if ( pos < 0 || pos > s -> file_limit || ramfile_seek ( ( ramhandle * ) s -> file , s -> file_offset + pos , RAMFS_SEEK_SET ) != 0 )"		667650	3					
ANR	667704	Condition	"pos < 0 || pos > s -> file_limit || ramfile_seek ( ( ramhandle * ) s -> file , s -> file_offset + pos , RAMFS_SEEK_SET ) != 0"	251:8:7754:7867	667650	0	True				
ANR	667705	OrExpression	"pos < 0 || pos > s -> file_limit || ramfile_seek ( ( ramhandle * ) s -> file , s -> file_offset + pos , RAMFS_SEEK_SET ) != 0"		667650	0		||			
ANR	667706	RelationalExpression	pos < 0		667650	0		<			
ANR	667707	Identifier	pos		667650	0					
ANR	667708	PrimaryExpression	0		667650	1					
ANR	667709	OrExpression	"pos > s -> file_limit || ramfile_seek ( ( ramhandle * ) s -> file , s -> file_offset + pos , RAMFS_SEEK_SET ) != 0"		667650	1		||			
ANR	667710	RelationalExpression	pos > s -> file_limit		667650	0		>			
ANR	667711	Identifier	pos		667650	0					
ANR	667712	PtrMemberAccess	s -> file_limit		667650	1					
ANR	667713	Identifier	s		667650	0					
ANR	667714	Identifier	file_limit		667650	1					
ANR	667715	EqualityExpression	"ramfile_seek ( ( ramhandle * ) s -> file , s -> file_offset + pos , RAMFS_SEEK_SET ) != 0"		667650	1		!=			
ANR	667716	CallExpression	"ramfile_seek ( ( ramhandle * ) s -> file , s -> file_offset + pos , RAMFS_SEEK_SET )"		667650	0					
ANR	667717	Callee	ramfile_seek		667650	0					
ANR	667718	Identifier	ramfile_seek		667650	0					
ANR	667719	ArgumentList	( ramhandle * ) s -> file		667650	1					
ANR	667720	Argument	( ramhandle * ) s -> file		667650	0					
ANR	667721	CastExpression	( ramhandle * ) s -> file		667650	0					
ANR	667722	CastTarget	ramhandle *		667650	0					
ANR	667723	PtrMemberAccess	s -> file		667650	1					
ANR	667724	Identifier	s		667650	0					
ANR	667725	Identifier	file		667650	1					
ANR	667726	Argument	s -> file_offset + pos		667650	1					
ANR	667727	AdditiveExpression	s -> file_offset + pos		667650	0		+			
ANR	667728	PtrMemberAccess	s -> file_offset		667650	0					
ANR	667729	Identifier	s		667650	0					
ANR	667730	Identifier	file_offset		667650	1					
ANR	667731	Identifier	pos		667650	1					
ANR	667732	Argument	RAMFS_SEEK_SET		667650	2					
ANR	667733	Identifier	RAMFS_SEEK_SET		667650	0					
ANR	667734	PrimaryExpression	0		667650	1					
ANR	667735	ReturnStatement	return ERRC ;	254:4:7879:7890	667650	1	True				
ANR	667736	Identifier	ERRC		667650	0					
ANR	667737	ExpressionStatement	s -> srptr = s -> srlimit = s -> cbuf - 1	255:4:7896:7931	667650	4	True				
ANR	667738	AssignmentExpression	s -> srptr = s -> srlimit = s -> cbuf - 1		667650	0		=			
ANR	667739	PtrMemberAccess	s -> srptr		667650	0					
ANR	667740	Identifier	s		667650	0					
ANR	667741	Identifier	srptr		667650	1					
ANR	667742	AssignmentExpression	s -> srlimit = s -> cbuf - 1		667650	1		=			
ANR	667743	PtrMemberAccess	s -> srlimit		667650	0					
ANR	667744	Identifier	s		667650	0					
ANR	667745	Identifier	srlimit		667650	1					
ANR	667746	AdditiveExpression	s -> cbuf - 1		667650	1		-			
ANR	667747	PtrMemberAccess	s -> cbuf		667650	0					
ANR	667748	Identifier	s		667650	0					
ANR	667749	Identifier	cbuf		667650	1					
ANR	667750	PrimaryExpression	1		667650	1					
ANR	667751	ExpressionStatement	s -> end_status = 0	256:4:7937:7954	667650	5	True				
ANR	667752	AssignmentExpression	s -> end_status = 0		667650	0		=			
ANR	667753	PtrMemberAccess	s -> end_status		667650	0					
ANR	667754	Identifier	s		667650	0					
ANR	667755	Identifier	end_status		667650	1					
ANR	667756	PrimaryExpression	0		667650	1					
ANR	667757	ExpressionStatement	s -> position = pos	257:4:7960:7977	667650	6	True				
ANR	667758	AssignmentExpression	s -> position = pos		667650	0		=			
ANR	667759	PtrMemberAccess	s -> position		667650	0					
ANR	667760	Identifier	s		667650	0					
ANR	667761	Identifier	position		667650	1					
ANR	667762	Identifier	pos		667650	1					
ANR	667763	ReturnStatement	return 0 ;	258:4:7983:7991	667650	7	True				
ANR	667764	PrimaryExpression	0		667650	0					
ANR	667765	ReturnType	static int		667650	1					
ANR	667766	Identifier	s_ram_read_seek		667650	2					
ANR	667767	ParameterList	"register stream * s , gs_offset_t pos"		667650	3					
ANR	667768	Parameter	register stream * s	242:16:7492:7510	667650	0	True				
ANR	667769	ParameterType	register stream *		667650	0					
ANR	667770	Identifier	s		667650	1					
ANR	667771	Parameter	gs_offset_t pos	242:37:7513:7527	667650	1	True				
ANR	667772	ParameterType	gs_offset_t		667650	0					
ANR	667773	Identifier	pos		667650	1					
ANR	667774	CFGEntryNode	ENTRY		667650		True				
ANR	667775	CFGExitNode	EXIT		667650		True				
ANR	667776	Symbol	offset		667650						
ANR	667777	Symbol	s -> srptr		667650						
ANR	667778	Symbol	s -> file		667650						
ANR	667779	Symbol	s -> position		667650						
ANR	667780	Symbol	s -> srlimit		667650						
ANR	667781	Symbol	s -> file_offset		667650						
ANR	667782	Symbol	s -> cbuf		667650						
ANR	667783	Symbol	s -> file_limit		667650						
ANR	667784	Symbol	ramfile_seek		667650						
ANR	667785	Symbol	s		667650						
ANR	667786	Symbol	pos		667650						
ANR	667787	Symbol	RAMFS_SEEK_SET		667650						
ANR	667788	Symbol	end		667650						
ANR	667789	Symbol	s -> end_status		667650						
ANR	667790	Symbol	* s		667650						
ANR	667791	Symbol	ERRC		667650						
ANR	667792	Function	s_ram_read_close	260:0:7995:8164							
ANR	667793	FunctionDef	s_ram_read_close (stream * s)		667792	0					
ANR	667794	CompoundStatement		262:0:8035:8164	667792	0					
ANR	667795	IdentifierDeclStatement	ramhandle * file = ( ramhandle * ) s -> file ;	263:4:8041:8078	667792	0	True				
ANR	667796	IdentifierDecl	* file = ( ramhandle * ) s -> file		667792	0					
ANR	667797	IdentifierDeclType	ramhandle *		667792	0					
ANR	667798	Identifier	file		667792	1					
ANR	667799	AssignmentExpression	* file = ( ramhandle * ) s -> file		667792	2		=			
ANR	667800	Identifier	file		667792	0					
ANR	667801	CastExpression	( ramhandle * ) s -> file		667792	1					
ANR	667802	CastTarget	ramhandle *		667792	0					
ANR	667803	PtrMemberAccess	s -> file		667792	1					
ANR	667804	Identifier	s		667792	0					
ANR	667805	Identifier	file		667792	1					
ANR	667806	IfStatement	if ( file != 0 )		667792	1					
ANR	667807	Condition	file != 0	265:8:8089:8097	667792	0	True				
ANR	667808	EqualityExpression	file != 0		667792	0		!=			
ANR	667809	Identifier	file		667792	0					
ANR	667810	PrimaryExpression	0		667792	1					
ANR	667811	CompoundStatement		4:19:64:64	667792	1					
ANR	667812	ExpressionStatement	s -> file = 0	266:4:8106:8117	667792	0	True				
ANR	667813	AssignmentExpression	s -> file = 0		667792	0		=			
ANR	667814	PtrMemberAccess	s -> file		667792	0					
ANR	667815	Identifier	s		667792	0					
ANR	667816	Identifier	file		667792	1					
ANR	667817	PrimaryExpression	0		667792	1					
ANR	667818	ExpressionStatement	ramfile_close ( file )	267:4:8123:8142	667792	1	True				
ANR	667819	CallExpression	ramfile_close ( file )		667792	0					
ANR	667820	Callee	ramfile_close		667792	0					
ANR	667821	Identifier	ramfile_close		667792	0					
ANR	667822	ArgumentList	file		667792	1					
ANR	667823	Argument	file		667792	0					
ANR	667824	Identifier	file		667792	0					
ANR	667825	ReturnStatement	return 0 ;	269:4:8154:8162	667792	2	True				
ANR	667826	PrimaryExpression	0		667792	0					
ANR	667827	ReturnType	static int		667792	1					
ANR	667828	Identifier	s_ram_read_close		667792	2					
ANR	667829	ParameterList	stream * s		667792	3					
ANR	667830	Parameter	stream * s	261:17:8023:8032	667792	0	True				
ANR	667831	ParameterType	stream *		667792	0					
ANR	667832	Identifier	s		667792	1					
ANR	667833	CFGEntryNode	ENTRY		667792		True				
ANR	667834	CFGExitNode	EXIT		667792		True				
ANR	667835	Symbol	s		667792						
ANR	667836	Symbol	file		667792						
ANR	667837	Symbol	s -> file		667792						
ANR	667838	Symbol	* s		667792						
ANR	667839	Function	s_ram_read_process	276:0:8287:9000							
ANR	667840	FunctionDef	"s_ram_read_process (stream_state * st , stream_cursor_read * ignore_pr , stream_cursor_write * pw , bool last)"		667839	0					
ANR	667841	CompoundStatement		279:0:8409:9000	667839	0					
ANR	667842	IdentifierDeclStatement	stream * s = ( stream * ) st ;	280:4:8415:8439	667839	0	True				
ANR	667843	IdentifierDecl	* s = ( stream * ) st		667839	0					
ANR	667844	IdentifierDeclType	stream *		667839	0					
ANR	667845	Identifier	s		667839	1					
ANR	667846	AssignmentExpression	* s = ( stream * ) st		667839	2		=			
ANR	667847	Identifier	s		667839	0					
ANR	667848	CastExpression	( stream * ) st		667839	1					
ANR	667849	CastTarget	stream *		667839	0					
ANR	667850	Identifier	st		667839	1					
ANR	667851	IdentifierDeclStatement	ramhandle * file = ( ramhandle * ) s -> file ;	281:4:8472:8509	667839	1	True				
ANR	667852	IdentifierDecl	* file = ( ramhandle * ) s -> file		667839	0					
ANR	667853	IdentifierDeclType	ramhandle *		667839	0					
ANR	667854	Identifier	file		667839	1					
ANR	667855	AssignmentExpression	* file = ( ramhandle * ) s -> file		667839	2		=			
ANR	667856	Identifier	file		667839	0					
ANR	667857	CastExpression	( ramhandle * ) s -> file		667839	1					
ANR	667858	CastTarget	ramhandle *		667839	0					
ANR	667859	PtrMemberAccess	s -> file		667839	1					
ANR	667860	Identifier	s		667839	0					
ANR	667861	Identifier	file		667839	1					
ANR	667862	IdentifierDeclStatement	uint max_count = pw -> limit - pw -> ptr ;	282:4:8515:8551	667839	2	True				
ANR	667863	IdentifierDecl	max_count = pw -> limit - pw -> ptr		667839	0					
ANR	667864	IdentifierDeclType	uint		667839	0					
ANR	667865	Identifier	max_count		667839	1					
ANR	667866	AssignmentExpression	max_count = pw -> limit - pw -> ptr		667839	2		=			
ANR	667867	Identifier	max_count		667839	0					
ANR	667868	AdditiveExpression	pw -> limit - pw -> ptr		667839	1		-			
ANR	667869	PtrMemberAccess	pw -> limit		667839	0					
ANR	667870	Identifier	pw		667839	0					
ANR	667871	Identifier	limit		667839	1					
ANR	667872	PtrMemberAccess	pw -> ptr		667839	1					
ANR	667873	Identifier	pw		667839	0					
ANR	667874	Identifier	ptr		667839	1					
ANR	667875	IdentifierDeclStatement	int status = 1 ;	283:4:8557:8571	667839	3	True				
ANR	667876	IdentifierDecl	status = 1		667839	0					
ANR	667877	IdentifierDeclType	int		667839	0					
ANR	667878	Identifier	status		667839	1					
ANR	667879	AssignmentExpression	status = 1		667839	2		=			
ANR	667880	Identifier	status		667839	0					
ANR	667881	PrimaryExpression	1		667839	1					
ANR	667882	IdentifierDeclStatement	int count ;	284:4:8577:8586	667839	4	True				
ANR	667883	IdentifierDecl	count		667839	0					
ANR	667884	IdentifierDeclType	int		667839	0					
ANR	667885	Identifier	count		667839	1					
ANR	667886	IfStatement	if ( s -> file_limit < S_FILE_LIMIT_MAX )		667839	5					
ANR	667887	Condition	s -> file_limit < S_FILE_LIMIT_MAX	286:8:8597:8628	667839	0	True				
ANR	667888	RelationalExpression	s -> file_limit < S_FILE_LIMIT_MAX		667839	0		<			
ANR	667889	PtrMemberAccess	s -> file_limit		667839	0					
ANR	667890	Identifier	s		667839	0					
ANR	667891	Identifier	file_limit		667839	1					
ANR	667892	Identifier	S_FILE_LIMIT_MAX		667839	1					
ANR	667893	CompoundStatement		9:4:227:301	667839	1					
ANR	667894	IdentifierDeclStatement	long limit_count = s -> file_offset + s -> file_limit - ramfile_tell ( file ) ;	287:4:8637:8711	667839	0	True				
ANR	667895	IdentifierDecl	limit_count = s -> file_offset + s -> file_limit - ramfile_tell ( file )		667839	0					
ANR	667896	IdentifierDeclType	long		667839	0					
ANR	667897	Identifier	limit_count		667839	1					
ANR	667898	AssignmentExpression	limit_count = s -> file_offset + s -> file_limit - ramfile_tell ( file )		667839	2		=			
ANR	667899	Identifier	limit_count		667839	0					
ANR	667900	AdditiveExpression	s -> file_offset + s -> file_limit - ramfile_tell ( file )		667839	1		+			
ANR	667901	PtrMemberAccess	s -> file_offset		667839	0					
ANR	667902	Identifier	s		667839	0					
ANR	667903	Identifier	file_offset		667839	1					
ANR	667904	AdditiveExpression	s -> file_limit - ramfile_tell ( file )		667839	1		-			
ANR	667905	PtrMemberAccess	s -> file_limit		667839	0					
ANR	667906	Identifier	s		667839	0					
ANR	667907	Identifier	file_limit		667839	1					
ANR	667908	CallExpression	ramfile_tell ( file )		667839	1					
ANR	667909	Callee	ramfile_tell		667839	0					
ANR	667910	Identifier	ramfile_tell		667839	0					
ANR	667911	ArgumentList	file		667839	1					
ANR	667912	Argument	file		667839	0					
ANR	667913	Identifier	file		667839	0					
ANR	667914	IfStatement	if ( max_count > limit_count )		667839	1					
ANR	667915	Condition	max_count > limit_count	290:8:8722:8744	667839	0	True				
ANR	667916	RelationalExpression	max_count > limit_count		667839	0		>			
ANR	667917	Identifier	max_count		667839	0					
ANR	667918	Identifier	limit_count		667839	1					
ANR	667919	ExpressionStatement	"max_count = limit_count , status = EOFC"	291:8:8755:8793	667839	1	True				
ANR	667920	Expression	"max_count = limit_count , status = EOFC"		667839	0					
ANR	667921	AssignmentExpression	max_count = limit_count		667839	0		=			
ANR	667922	Identifier	max_count		667839	0					
ANR	667923	Identifier	limit_count		667839	1					
ANR	667924	AssignmentExpression	status = EOFC		667839	1		=			
ANR	667925	Identifier	status		667839	0					
ANR	667926	Identifier	EOFC		667839	1					
ANR	667927	ExpressionStatement	"count = ramfile_read ( file , pw -> ptr + 1 , max_count )"	293:4:8805:8854	667839	6	True				
ANR	667928	AssignmentExpression	"count = ramfile_read ( file , pw -> ptr + 1 , max_count )"		667839	0		=			
ANR	667929	Identifier	count		667839	0					
ANR	667930	CallExpression	"ramfile_read ( file , pw -> ptr + 1 , max_count )"		667839	1					
ANR	667931	Callee	ramfile_read		667839	0					
ANR	667932	Identifier	ramfile_read		667839	0					
ANR	667933	ArgumentList	file		667839	1					
ANR	667934	Argument	file		667839	0					
ANR	667935	Identifier	file		667839	0					
ANR	667936	Argument	pw -> ptr + 1		667839	1					
ANR	667937	AdditiveExpression	pw -> ptr + 1		667839	0		+			
ANR	667938	PtrMemberAccess	pw -> ptr		667839	0					
ANR	667939	Identifier	pw		667839	0					
ANR	667940	Identifier	ptr		667839	1					
ANR	667941	PrimaryExpression	1		667839	1					
ANR	667942	Argument	max_count		667839	2					
ANR	667943	Identifier	max_count		667839	0					
ANR	667944	IfStatement	if ( count < 0 )		667839	7					
ANR	667945	Condition	count < 0	294:8:8864:8872	667839	0	True				
ANR	667946	RelationalExpression	count < 0		667839	0		<			
ANR	667947	Identifier	count		667839	0					
ANR	667948	PrimaryExpression	0		667839	1					
ANR	667949	ReturnStatement	return ERRC ;	294:19:8875:8886	667839	1	True				
ANR	667950	Identifier	ERRC		667839	0					
ANR	667951	ExpressionStatement	pw -> ptr += count	295:4:8892:8908	667839	8	True				
ANR	667952	AssignmentExpression	pw -> ptr += count		667839	0		+=			
ANR	667953	PtrMemberAccess	pw -> ptr		667839	0					
ANR	667954	Identifier	pw		667839	0					
ANR	667955	Identifier	ptr		667839	1					
ANR	667956	Identifier	count		667839	1					
ANR	667957	ReturnStatement	return ramfile_eof ( file ) ? EOFC : status ;	297:4:8958:8998	667839	9	True				
ANR	667958	ConditionalExpression	ramfile_eof ( file ) ? EOFC : status		667839	0					
ANR	667959	Condition	ramfile_eof ( file )		667839	0					
ANR	667960	CallExpression	ramfile_eof ( file )		667839	0					
ANR	667961	Callee	ramfile_eof		667839	0					
ANR	667962	Identifier	ramfile_eof		667839	0					
ANR	667963	ArgumentList	file		667839	1					
ANR	667964	Argument	file		667839	0					
ANR	667965	Identifier	file		667839	0					
ANR	667966	Identifier	EOFC		667839	1					
ANR	667967	Identifier	status		667839	2					
ANR	667968	ReturnType	static int		667839	1					
ANR	667969	Identifier	s_ram_read_process		667839	2					
ANR	667970	ParameterList	"stream_state * st , stream_cursor_read * ignore_pr , stream_cursor_write * pw , bool last"		667839	3					
ANR	667971	Parameter	stream_state * st	277:19:8317:8333	667839	0	True				
ANR	667972	ParameterType	stream_state *		667839	0					
ANR	667973	Identifier	st		667839	1					
ANR	667974	Parameter	stream_cursor_read * ignore_pr	277:38:8336:8365	667839	1	True				
ANR	667975	ParameterType	stream_cursor_read *		667839	0					
ANR	667976	Identifier	ignore_pr		667839	1					
ANR	667977	Parameter	stream_cursor_write * pw	278:4:8372:8395	667839	2	True				
ANR	667978	ParameterType	stream_cursor_write *		667839	0					
ANR	667979	Identifier	pw		667839	1					
ANR	667980	Parameter	bool last	278:30:8398:8406	667839	3	True				
ANR	667981	ParameterType	bool		667839	0					
ANR	667982	Identifier	last		667839	1					
ANR	667983	CFGEntryNode	ENTRY		667839		True				
ANR	667984	CFGExitNode	EXIT		667839		True				
ANR	667985	Symbol	st		667839						
ANR	667986	Symbol	last		667839						
ANR	667987	Symbol	s -> file		667839						
ANR	667988	Symbol	ramfile_tell		667839						
ANR	667989	Symbol	pw		667839						
ANR	667990	Symbol	EOFC		667839						
ANR	667991	Symbol	count		667839						
ANR	667992	Symbol	s -> file_offset		667839						
ANR	667993	Symbol	S_FILE_LIMIT_MAX		667839						
ANR	667994	Symbol	ramfile_read		667839						
ANR	667995	Symbol	ramfile_eof		667839						
ANR	667996	Symbol	s -> file_limit		667839						
ANR	667997	Symbol	* pw		667839						
ANR	667998	Symbol	max_count		667839						
ANR	667999	Symbol	pw -> limit		667839						
ANR	668000	Symbol	s		667839						
ANR	668001	Symbol	file		667839						
ANR	668002	Symbol	ignore_pr		667839						
ANR	668003	Symbol	limit_count		667839						
ANR	668004	Symbol	* s		667839						
ANR	668005	Symbol	ERRC		667839						
ANR	668006	Symbol	pw -> ptr		667839						
ANR	668007	Symbol	status		667839						
ANR	668008	Function	swrite_ram	303:0:9083:9581							
ANR	668009	FunctionDef	"swrite_ram (register stream * s , ramhandle * file , byte * buf , uint len)"		668008	0					
ANR	668010	CompoundStatement		305:0:9167:9581	668008	0					
ANR	668011	Statement	static	306:4:9173:9178	668008	0	True				
ANR	668012	IdentifierDeclStatement	"const stream_procs p = { s_std_noavailable , s_ram_write_seek , s_std_write_reset , s_ram_write_flush , s_ram_write_close , s_ram_write_process , s_ram_switch } ;"	306:11:9180:9350	668008	1	True				
ANR	668013	IdentifierDecl	"p = { s_std_noavailable , s_ram_write_seek , s_std_write_reset , s_ram_write_flush , s_ram_write_close , s_ram_write_process , s_ram_switch }"		668008	0					
ANR	668014	IdentifierDeclType	const stream_procs		668008	0					
ANR	668015	Identifier	p		668008	1					
ANR	668016	AssignmentExpression	"p = { s_std_noavailable , s_ram_write_seek , s_std_write_reset , s_ram_write_flush , s_ram_write_close , s_ram_write_process , s_ram_switch }"		668008	2		=			
ANR	668017	Identifier	p		668008	0					
ANR	668018	InitializerList	s_std_noavailable		668008	1					
ANR	668019	Identifier	s_std_noavailable		668008	0					
ANR	668020	Identifier	s_ram_write_seek		668008	1					
ANR	668021	Identifier	s_std_write_reset		668008	2					
ANR	668022	Identifier	s_ram_write_flush		668008	3					
ANR	668023	Identifier	s_ram_write_close		668008	4					
ANR	668024	Identifier	s_ram_write_process		668008	5					
ANR	668025	Identifier	s_ram_switch		668008	6					
ANR	668026	ExpressionStatement	"s_std_init ( s , buf , len , & p , s_mode_write + s_mode_seek )"	312:4:9357:9412	668008	2	True				
ANR	668027	CallExpression	"s_std_init ( s , buf , len , & p , s_mode_write + s_mode_seek )"		668008	0					
ANR	668028	Callee	s_std_init		668008	0					
ANR	668029	Identifier	s_std_init		668008	0					
ANR	668030	ArgumentList	s		668008	1					
ANR	668031	Argument	s		668008	0					
ANR	668032	Identifier	s		668008	0					
ANR	668033	Argument	buf		668008	1					
ANR	668034	Identifier	buf		668008	0					
ANR	668035	Argument	len		668008	2					
ANR	668036	Identifier	len		668008	0					
ANR	668037	Argument	& p		668008	3					
ANR	668038	UnaryOperationExpression	& p		668008	0					
ANR	668039	UnaryOperator	&		668008	0					
ANR	668040	Identifier	p		668008	1					
ANR	668041	Argument	s_mode_write + s_mode_seek		668008	4					
ANR	668042	AdditiveExpression	s_mode_write + s_mode_seek		668008	0		+			
ANR	668043	Identifier	s_mode_write		668008	0					
ANR	668044	Identifier	s_mode_seek		668008	1					
ANR	668045	ExpressionStatement	s -> file = ( FILE * ) file	313:4:9418:9439	668008	3	True				
ANR	668046	AssignmentExpression	s -> file = ( FILE * ) file		668008	0		=			
ANR	668047	PtrMemberAccess	s -> file		668008	0					
ANR	668048	Identifier	s		668008	0					
ANR	668049	Identifier	file		668008	1					
ANR	668050	CastExpression	( FILE * ) file		668008	1					
ANR	668051	CastTarget	FILE *		668008	0					
ANR	668052	Identifier	file		668008	1					
ANR	668053	ExpressionStatement	s -> file_modes = s -> modes	314:4:9445:9469	668008	4	True				
ANR	668054	AssignmentExpression	s -> file_modes = s -> modes		668008	0		=			
ANR	668055	PtrMemberAccess	s -> file_modes		668008	0					
ANR	668056	Identifier	s		668008	0					
ANR	668057	Identifier	file_modes		668008	1					
ANR	668058	PtrMemberAccess	s -> modes		668008	1					
ANR	668059	Identifier	s		668008	0					
ANR	668060	Identifier	modes		668008	1					
ANR	668061	ExpressionStatement	s -> file_offset = 0	315:4:9475:9493	668008	5	True				
ANR	668062	AssignmentExpression	s -> file_offset = 0		668008	0		=			
ANR	668063	PtrMemberAccess	s -> file_offset		668008	0					
ANR	668064	Identifier	s		668008	0					
ANR	668065	Identifier	file_offset		668008	1					
ANR	668066	PrimaryExpression	0		668008	1					
ANR	668067	ExpressionStatement	s -> file_limit = S_FILE_LIMIT_MAX	316:4:9547:9579	668008	6	True				
ANR	668068	AssignmentExpression	s -> file_limit = S_FILE_LIMIT_MAX		668008	0		=			
ANR	668069	PtrMemberAccess	s -> file_limit		668008	0					
ANR	668070	Identifier	s		668008	0					
ANR	668071	Identifier	file_limit		668008	1					
ANR	668072	Identifier	S_FILE_LIMIT_MAX		668008	1					
ANR	668073	ReturnType	static void		668008	1					
ANR	668074	Identifier	swrite_ram		668008	2					
ANR	668075	ParameterList	"register stream * s , ramhandle * file , byte * buf , uint len"		668008	3					
ANR	668076	Parameter	register stream * s	304:11:9106:9124	668008	0	True				
ANR	668077	ParameterType	register stream *		668008	0					
ANR	668078	Identifier	s		668008	1					
ANR	668079	Parameter	ramhandle * file	304:32:9127:9142	668008	1	True				
ANR	668080	ParameterType	ramhandle *		668008	0					
ANR	668081	Identifier	file		668008	1					
ANR	668082	Parameter	byte * buf	304:50:9145:9154	668008	2	True				
ANR	668083	ParameterType	byte *		668008	0					
ANR	668084	Identifier	buf		668008	1					
ANR	668085	Parameter	uint len	304:62:9157:9164	668008	3	True				
ANR	668086	ParameterType	uint		668008	0					
ANR	668087	Identifier	len		668008	1					
ANR	668088	CFGEntryNode	ENTRY		668008		True				
ANR	668089	CFGExitNode	EXIT		668008		True				
ANR	668090	Symbol	s -> file		668008						
ANR	668091	Symbol	s_ram_write_process		668008						
ANR	668092	Symbol	s_std_write_reset		668008						
ANR	668093	Symbol	s -> file_modes		668008						
ANR	668094	Symbol	s -> file_offset		668008						
ANR	668095	Symbol	s_mode_write		668008						
ANR	668096	Symbol	S_FILE_LIMIT_MAX		668008						
ANR	668097	Symbol	s -> file_limit		668008						
ANR	668098	Symbol	p		668008						
ANR	668099	Symbol	buf		668008						
ANR	668100	Symbol	s_ram_write_close		668008						
ANR	668101	Symbol	s		668008						
ANR	668102	Symbol	file		668008						
ANR	668103	Symbol	s_ram_write_flush		668008						
ANR	668104	Symbol	len		668008						
ANR	668105	Symbol	s_mode_seek		668008						
ANR	668106	Symbol	s_ram_write_seek		668008						
ANR	668107	Symbol	& p		668008						
ANR	668108	Symbol	s_ram_switch		668008						
ANR	668109	Symbol	s_std_noavailable		668008						
ANR	668110	Symbol	* s		668008						
ANR	668111	Symbol	s -> modes		668008						
ANR	668112	Function	sappend_ram	320:0:9626:9919							
ANR	668113	FunctionDef	"sappend_ram (register stream * s , ramhandle * file , byte * buf , uint len)"		668112	0					
ANR	668114	CompoundStatement		322:0:9711:9919	668112	0					
ANR	668115	ExpressionStatement	"swrite_ram ( s , file , buf , len )"	323:4:9717:9746	668112	0	True				
ANR	668116	CallExpression	"swrite_ram ( s , file , buf , len )"		668112	0					
ANR	668117	Callee	swrite_ram		668112	0					
ANR	668118	Identifier	swrite_ram		668112	0					
ANR	668119	ArgumentList	s		668112	1					
ANR	668120	Argument	s		668112	0					
ANR	668121	Identifier	s		668112	0					
ANR	668122	Argument	file		668112	1					
ANR	668123	Identifier	file		668112	0					
ANR	668124	Argument	buf		668112	2					
ANR	668125	Identifier	buf		668112	0					
ANR	668126	Argument	len		668112	3					
ANR	668127	Identifier	len		668112	0					
ANR	668128	ExpressionStatement	s -> modes = s_mode_write + s_mode_append	324:4:9752:9791	668112	1	True				
ANR	668129	AssignmentExpression	s -> modes = s_mode_write + s_mode_append		668112	0		=			
ANR	668130	PtrMemberAccess	s -> modes		668112	0					
ANR	668131	Identifier	s		668112	0					
ANR	668132	Identifier	modes		668112	1					
ANR	668133	AdditiveExpression	s_mode_write + s_mode_append		668112	1		+			
ANR	668134	Identifier	s_mode_write		668112	0					
ANR	668135	Identifier	s_mode_append		668112	1					
ANR	668136	ExpressionStatement	s -> file_modes = s -> modes	325:4:9814:9838	668112	2	True				
ANR	668137	AssignmentExpression	s -> file_modes = s -> modes		668112	0		=			
ANR	668138	PtrMemberAccess	s -> file_modes		668112	0					
ANR	668139	Identifier	s		668112	0					
ANR	668140	Identifier	file_modes		668112	1					
ANR	668141	PtrMemberAccess	s -> modes		668112	1					
ANR	668142	Identifier	s		668112	0					
ANR	668143	Identifier	modes		668112	1					
ANR	668144	ExpressionStatement	"ramfile_seek ( file , 0 , RAMFS_SEEK_END )"	326:4:9844:9879	668112	3	True				
ANR	668145	CallExpression	"ramfile_seek ( file , 0 , RAMFS_SEEK_END )"		668112	0					
ANR	668146	Callee	ramfile_seek		668112	0					
ANR	668147	Identifier	ramfile_seek		668112	0					
ANR	668148	ArgumentList	file		668112	1					
ANR	668149	Argument	file		668112	0					
ANR	668150	Identifier	file		668112	0					
ANR	668151	Argument	0		668112	1					
ANR	668152	PrimaryExpression	0		668112	0					
ANR	668153	Argument	RAMFS_SEEK_END		668112	2					
ANR	668154	Identifier	RAMFS_SEEK_END		668112	0					
ANR	668155	ExpressionStatement	s -> position = ramfile_tell ( file )	327:4:9885:9917	668112	4	True				
ANR	668156	AssignmentExpression	s -> position = ramfile_tell ( file )		668112	0		=			
ANR	668157	PtrMemberAccess	s -> position		668112	0					
ANR	668158	Identifier	s		668112	0					
ANR	668159	Identifier	position		668112	1					
ANR	668160	CallExpression	ramfile_tell ( file )		668112	1					
ANR	668161	Callee	ramfile_tell		668112	0					
ANR	668162	Identifier	ramfile_tell		668112	0					
ANR	668163	ArgumentList	file		668112	1					
ANR	668164	Argument	file		668112	0					
ANR	668165	Identifier	file		668112	0					
ANR	668166	ReturnType	static void		668112	1					
ANR	668167	Identifier	sappend_ram		668112	2					
ANR	668168	ParameterList	"register stream * s , ramhandle * file , byte * buf , uint len"		668112	3					
ANR	668169	Parameter	register stream * s	321:12:9650:9668	668112	0	True				
ANR	668170	ParameterType	register stream *		668112	0					
ANR	668171	Identifier	s		668112	1					
ANR	668172	Parameter	ramhandle * file	321:33:9671:9686	668112	1	True				
ANR	668173	ParameterType	ramhandle *		668112	0					
ANR	668174	Identifier	file		668112	1					
ANR	668175	Parameter	byte * buf	321:51:9689:9698	668112	2	True				
ANR	668176	ParameterType	byte *		668112	0					
ANR	668177	Identifier	buf		668112	1					
ANR	668178	Parameter	uint len	321:63:9701:9708	668112	3	True				
ANR	668179	ParameterType	uint		668112	0					
ANR	668180	Identifier	len		668112	1					
ANR	668181	CFGEntryNode	ENTRY		668112		True				
ANR	668182	CFGExitNode	EXIT		668112		True				
ANR	668183	Symbol	buf		668112						
ANR	668184	Symbol	s		668112						
ANR	668185	Symbol	file		668112						
ANR	668186	Symbol	len		668112						
ANR	668187	Symbol	ramfile_tell		668112						
ANR	668188	Symbol	s -> position		668112						
ANR	668189	Symbol	s -> file_modes		668112						
ANR	668190	Symbol	s_mode_write		668112						
ANR	668191	Symbol	* s		668112						
ANR	668192	Symbol	s_mode_append		668112						
ANR	668193	Symbol	RAMFS_SEEK_END		668112						
ANR	668194	Symbol	s -> modes		668112						
ANR	668195	Function	s_ram_write_seek	331:0:9961:10251							
ANR	668196	FunctionDef	"s_ram_write_seek (stream * s , gs_offset_t pos)"		668195	0					
ANR	668197	CompoundStatement		333:0:10018:10251	668195	0					
ANR	668198	IdentifierDeclStatement	int code = sflush ( s ) ;	335:4:10074:10094	668195	0	True				
ANR	668199	IdentifierDecl	code = sflush ( s )		668195	0					
ANR	668200	IdentifierDeclType	int		668195	0					
ANR	668201	Identifier	code		668195	1					
ANR	668202	AssignmentExpression	code = sflush ( s )		668195	2		=			
ANR	668203	Identifier	code		668195	0					
ANR	668204	CallExpression	sflush ( s )		668195	1					
ANR	668205	Callee	sflush		668195	0					
ANR	668206	Identifier	sflush		668195	0					
ANR	668207	ArgumentList	s		668195	1					
ANR	668208	Argument	s		668195	0					
ANR	668209	Identifier	s		668195	0					
ANR	668210	IfStatement	if ( code < 0 )		668195	1					
ANR	668211	Condition	code < 0	337:8:10105:10112	668195	0	True				
ANR	668212	RelationalExpression	code < 0		668195	0		<			
ANR	668213	Identifier	code		668195	0					
ANR	668214	PrimaryExpression	0		668195	1					
ANR	668215	ReturnStatement	return code ;	337:18:10115:10126	668195	1	True				
ANR	668216	Identifier	code		668195	0					
ANR	668217	IfStatement	"if ( ramfile_seek ( ( ramhandle * ) s -> file , pos , RAMFS_SEEK_SET ) != 0 )"		668195	2					
ANR	668218	Condition	"ramfile_seek ( ( ramhandle * ) s -> file , pos , RAMFS_SEEK_SET ) != 0"	338:8:10136:10194	668195	0	True				
ANR	668219	EqualityExpression	"ramfile_seek ( ( ramhandle * ) s -> file , pos , RAMFS_SEEK_SET ) != 0"		668195	0		!=			
ANR	668220	CallExpression	"ramfile_seek ( ( ramhandle * ) s -> file , pos , RAMFS_SEEK_SET )"		668195	0					
ANR	668221	Callee	ramfile_seek		668195	0					
ANR	668222	Identifier	ramfile_seek		668195	0					
ANR	668223	ArgumentList	( ramhandle * ) s -> file		668195	1					
ANR	668224	Argument	( ramhandle * ) s -> file		668195	0					
ANR	668225	CastExpression	( ramhandle * ) s -> file		668195	0					
ANR	668226	CastTarget	ramhandle *		668195	0					
ANR	668227	PtrMemberAccess	s -> file		668195	1					
ANR	668228	Identifier	s		668195	0					
ANR	668229	Identifier	file		668195	1					
ANR	668230	Argument	pos		668195	1					
ANR	668231	Identifier	pos		668195	0					
ANR	668232	Argument	RAMFS_SEEK_SET		668195	2					
ANR	668233	Identifier	RAMFS_SEEK_SET		668195	0					
ANR	668234	PrimaryExpression	0		668195	1					
ANR	668235	ReturnStatement	return ERRC ;	339:4:10201:10212	668195	1	True				
ANR	668236	Identifier	ERRC		668195	0					
ANR	668237	ExpressionStatement	s -> position = pos	340:4:10218:10235	668195	3	True				
ANR	668238	AssignmentExpression	s -> position = pos		668195	0		=			
ANR	668239	PtrMemberAccess	s -> position		668195	0					
ANR	668240	Identifier	s		668195	0					
ANR	668241	Identifier	position		668195	1					
ANR	668242	Identifier	pos		668195	1					
ANR	668243	ReturnStatement	return 0 ;	341:4:10241:10249	668195	4	True				
ANR	668244	PrimaryExpression	0		668195	0					
ANR	668245	ReturnType	static int		668195	1					
ANR	668246	Identifier	s_ram_write_seek		668195	2					
ANR	668247	ParameterList	"stream * s , gs_offset_t pos"		668195	3					
ANR	668248	Parameter	stream * s	332:17:9989:9998	668195	0	True				
ANR	668249	ParameterType	stream *		668195	0					
ANR	668250	Identifier	s		668195	1					
ANR	668251	Parameter	gs_offset_t pos	332:29:10001:10015	668195	1	True				
ANR	668252	ParameterType	gs_offset_t		668195	0					
ANR	668253	Identifier	pos		668195	1					
ANR	668254	CFGEntryNode	ENTRY		668195		True				
ANR	668255	CFGExitNode	EXIT		668195		True				
ANR	668256	Symbol	s		668195						
ANR	668257	Symbol	code		668195						
ANR	668258	Symbol	pos		668195						
ANR	668259	Symbol	s -> file		668195						
ANR	668260	Symbol	s -> position		668195						
ANR	668261	Symbol	RAMFS_SEEK_SET		668195						
ANR	668262	Symbol	sflush		668195						
ANR	668263	Symbol	* s		668195						
ANR	668264	Symbol	ramfile_seek		668195						
ANR	668265	Symbol	ERRC		668195						
ANR	668266	Function	s_ram_write_flush	344:0:10254:10373							
ANR	668267	FunctionDef	s_ram_write_flush (register stream * s)		668266	0					
ANR	668268	CompoundStatement		346:0:10304:10373	668266	0					
ANR	668269	IdentifierDeclStatement	"int result = s_process_write_buf ( s , false ) ;"	347:4:10310:10352	668266	0	True				
ANR	668270	IdentifierDecl	"result = s_process_write_buf ( s , false )"		668266	0					
ANR	668271	IdentifierDeclType	int		668266	0					
ANR	668272	Identifier	result		668266	1					
ANR	668273	AssignmentExpression	"result = s_process_write_buf ( s , false )"		668266	2		=			
ANR	668274	Identifier	result		668266	0					
ANR	668275	CallExpression	"s_process_write_buf ( s , false )"		668266	1					
ANR	668276	Callee	s_process_write_buf		668266	0					
ANR	668277	Identifier	s_process_write_buf		668266	0					
ANR	668278	ArgumentList	s		668266	1					
ANR	668279	Argument	s		668266	0					
ANR	668280	Identifier	s		668266	0					
ANR	668281	Argument	false		668266	1					
ANR	668282	Identifier	false		668266	0					
ANR	668283	ReturnStatement	return result ;	348:4:10358:10371	668266	1	True				
ANR	668284	Identifier	result		668266	0					
ANR	668285	ReturnType	static int		668266	1					
ANR	668286	Identifier	s_ram_write_flush		668266	2					
ANR	668287	ParameterList	register stream * s		668266	3					
ANR	668288	Parameter	register stream * s	345:18:10283:10301	668266	0	True				
ANR	668289	ParameterType	register stream *		668266	0					
ANR	668290	Identifier	s		668266	1					
ANR	668291	CFGEntryNode	ENTRY		668266		True				
ANR	668292	CFGExitNode	EXIT		668266		True				
ANR	668293	Symbol	result		668266						
ANR	668294	Symbol	s		668266						
ANR	668295	Symbol	false		668266						
ANR	668296	Symbol	s_process_write_buf		668266						
ANR	668297	Function	s_ram_write_close	351:0:10376:10494							
ANR	668298	FunctionDef	s_ram_write_close (register stream * s)		668297	0					
ANR	668299	CompoundStatement		353:0:10426:10494	668297	0					
ANR	668300	ExpressionStatement	"s_process_write_buf ( s , true )"	354:4:10432:10460	668297	0	True				
ANR	668301	CallExpression	"s_process_write_buf ( s , true )"		668297	0					
ANR	668302	Callee	s_process_write_buf		668297	0					
ANR	668303	Identifier	s_process_write_buf		668297	0					
ANR	668304	ArgumentList	s		668297	1					
ANR	668305	Argument	s		668297	0					
ANR	668306	Identifier	s		668297	0					
ANR	668307	Argument	true		668297	1					
ANR	668308	Identifier	true		668297	0					
ANR	668309	ReturnStatement	return s_ram_read_close ( s ) ;	355:4:10466:10492	668297	1	True				
ANR	668310	CallExpression	s_ram_read_close ( s )		668297	0					
ANR	668311	Callee	s_ram_read_close		668297	0					
ANR	668312	Identifier	s_ram_read_close		668297	0					
ANR	668313	ArgumentList	s		668297	1					
ANR	668314	Argument	s		668297	0					
ANR	668315	Identifier	s		668297	0					
ANR	668316	ReturnType	static int		668297	1					
ANR	668317	Identifier	s_ram_write_close		668297	2					
ANR	668318	ParameterList	register stream * s		668297	3					
ANR	668319	Parameter	register stream * s	352:18:10405:10423	668297	0	True				
ANR	668320	ParameterType	register stream *		668297	0					
ANR	668321	Identifier	s		668297	1					
ANR	668322	CFGEntryNode	ENTRY		668297		True				
ANR	668323	CFGExitNode	EXIT		668297		True				
ANR	668324	Symbol	s		668297						
ANR	668325	Symbol	true		668297						
ANR	668326	Symbol	s_ram_read_close		668297						
ANR	668327	Function	s_ram_write_process	362:0:10616:10968							
ANR	668328	FunctionDef	"s_ram_write_process (stream_state * st , stream_cursor_read * pr , stream_cursor_write * ignore_pw , bool last)"		668327	0					
ANR	668329	CompoundStatement		365:0:10739:10968	668327	0					
ANR	668330	IdentifierDeclStatement	uint count = pr -> limit - pr -> ptr ;	366:4:10745:10777	668327	0	True				
ANR	668331	IdentifierDecl	count = pr -> limit - pr -> ptr		668327	0					
ANR	668332	IdentifierDeclType	uint		668327	0					
ANR	668333	Identifier	count		668327	1					
ANR	668334	AssignmentExpression	count = pr -> limit - pr -> ptr		668327	2		=			
ANR	668335	Identifier	count		668327	0					
ANR	668336	AdditiveExpression	pr -> limit - pr -> ptr		668327	1		-			
ANR	668337	PtrMemberAccess	pr -> limit		668327	0					
ANR	668338	Identifier	pr		668327	0					
ANR	668339	Identifier	limit		668327	1					
ANR	668340	PtrMemberAccess	pr -> ptr		668327	1					
ANR	668341	Identifier	pr		668327	0					
ANR	668342	Identifier	ptr		668327	1					
ANR	668343	IdentifierDeclStatement	ramhandle * file = ( ramhandle * ) ( ( stream * ) st ) -> file ;	368:4:10784:10835	668327	1	True				
ANR	668344	IdentifierDecl	* file = ( ramhandle * ) ( ( stream * ) st ) -> file		668327	0					
ANR	668345	IdentifierDeclType	ramhandle *		668327	0					
ANR	668346	Identifier	file		668327	1					
ANR	668347	AssignmentExpression	* file = ( ramhandle * ) ( ( stream * ) st ) -> file		668327	2		=			
ANR	668348	Identifier	file		668327	0					
ANR	668349	CastExpression	( ramhandle * ) ( ( stream * ) st ) -> file		668327	1					
ANR	668350	CastTarget	ramhandle *		668327	0					
ANR	668351	PtrMemberAccess	( ( stream * ) st ) -> file		668327	1					
ANR	668352	CastExpression	( stream * ) st		668327	0					
ANR	668353	CastTarget	stream *		668327	0					
ANR	668354	Identifier	st		668327	1					
ANR	668355	Identifier	file		668327	1					
ANR	668356	IdentifierDeclStatement	"int written = ramfile_write ( file , pr -> ptr + 1 , count ) ;"	369:4:10841:10893	668327	2	True				
ANR	668357	IdentifierDecl	"written = ramfile_write ( file , pr -> ptr + 1 , count )"		668327	0					
ANR	668358	IdentifierDeclType	int		668327	0					
ANR	668359	Identifier	written		668327	1					
ANR	668360	AssignmentExpression	"written = ramfile_write ( file , pr -> ptr + 1 , count )"		668327	2		=			
ANR	668361	Identifier	written		668327	0					
ANR	668362	CallExpression	"ramfile_write ( file , pr -> ptr + 1 , count )"		668327	1					
ANR	668363	Callee	ramfile_write		668327	0					
ANR	668364	Identifier	ramfile_write		668327	0					
ANR	668365	ArgumentList	file		668327	1					
ANR	668366	Argument	file		668327	0					
ANR	668367	Identifier	file		668327	0					
ANR	668368	Argument	pr -> ptr + 1		668327	1					
ANR	668369	AdditiveExpression	pr -> ptr + 1		668327	0		+			
ANR	668370	PtrMemberAccess	pr -> ptr		668327	0					
ANR	668371	Identifier	pr		668327	0					
ANR	668372	Identifier	ptr		668327	1					
ANR	668373	PrimaryExpression	1		668327	1					
ANR	668374	Argument	count		668327	2					
ANR	668375	Identifier	count		668327	0					
ANR	668376	IfStatement	if ( written < 0 )		668327	3					
ANR	668377	Condition	written < 0	371:8:10904:10914	668327	0	True				
ANR	668378	RelationalExpression	written < 0		668327	0		<			
ANR	668379	Identifier	written		668327	0					
ANR	668380	PrimaryExpression	0		668327	1					
ANR	668381	ReturnStatement	return ERRC ;	371:21:10917:10928	668327	1	True				
ANR	668382	Identifier	ERRC		668327	0					
ANR	668383	ExpressionStatement	pr -> ptr += written	372:4:10934:10952	668327	4	True				
ANR	668384	AssignmentExpression	pr -> ptr += written		668327	0		+=			
ANR	668385	PtrMemberAccess	pr -> ptr		668327	0					
ANR	668386	Identifier	pr		668327	0					
ANR	668387	Identifier	ptr		668327	1					
ANR	668388	Identifier	written		668327	1					
ANR	668389	ReturnStatement	return 0 ;	373:4:10958:10966	668327	5	True				
ANR	668390	PrimaryExpression	0		668327	0					
ANR	668391	ReturnType	static int		668327	1					
ANR	668392	Identifier	s_ram_write_process		668327	2					
ANR	668393	ParameterList	"stream_state * st , stream_cursor_read * pr , stream_cursor_write * ignore_pw , bool last"		668327	3					
ANR	668394	Parameter	stream_state * st	363:20:10647:10663	668327	0	True				
ANR	668395	ParameterType	stream_state *		668327	0					
ANR	668396	Identifier	st		668327	1					
ANR	668397	Parameter	stream_cursor_read * pr	363:39:10666:10688	668327	1	True				
ANR	668398	ParameterType	stream_cursor_read *		668327	0					
ANR	668399	Identifier	pr		668327	1					
ANR	668400	Parameter	stream_cursor_write * ignore_pw	364:4:10695:10725	668327	2	True				
ANR	668401	ParameterType	stream_cursor_write *		668327	0					
ANR	668402	Identifier	ignore_pw		668327	1					
ANR	668403	Parameter	bool last	364:37:10728:10736	668327	3	True				
ANR	668404	ParameterType	bool		668327	0					
ANR	668405	Identifier	last		668327	1					
ANR	668406	CFGEntryNode	ENTRY		668327		True				
ANR	668407	CFGExitNode	EXIT		668327		True				
ANR	668408	Symbol	st		668327						
ANR	668409	Symbol	pr		668327						
ANR	668410	Symbol	ignore_pw		668327						
ANR	668411	Symbol	last		668327						
ANR	668412	Symbol	* st		668327						
ANR	668413	Symbol	count		668327						
ANR	668414	Symbol	ramfile_write		668327						
ANR	668415	Symbol	* pr		668327						
ANR	668416	Symbol	pr -> limit		668327						
ANR	668417	Symbol	( ( stream * ) st ) -> file		668327						
ANR	668418	Symbol	file		668327						
ANR	668419	Symbol	written		668327						
ANR	668420	Symbol	pr -> ptr		668327						
ANR	668421	Symbol	ERRC		668327						
ANR	668422	Function	s_ram_switch	376:0:10971:11781							
ANR	668423	FunctionDef	"s_ram_switch (stream * s , bool writing)"		668422	0					
ANR	668424	CompoundStatement		378:0:11021:11781	668422	0					
ANR	668425	IdentifierDeclStatement	uint modes = s -> file_modes ;	379:4:11027:11053	668422	0	True				
ANR	668426	IdentifierDecl	modes = s -> file_modes		668422	0					
ANR	668427	IdentifierDeclType	uint		668422	0					
ANR	668428	Identifier	modes		668422	1					
ANR	668429	AssignmentExpression	modes = s -> file_modes		668422	2		=			
ANR	668430	Identifier	modes		668422	0					
ANR	668431	PtrMemberAccess	s -> file_modes		668422	1					
ANR	668432	Identifier	s		668422	0					
ANR	668433	Identifier	file_modes		668422	1					
ANR	668434	IdentifierDeclStatement	ramhandle * file = ( ramhandle * ) s -> file ;	380:4:11059:11096	668422	1	True				
ANR	668435	IdentifierDecl	* file = ( ramhandle * ) s -> file		668422	0					
ANR	668436	IdentifierDeclType	ramhandle *		668422	0					
ANR	668437	Identifier	file		668422	1					
ANR	668438	AssignmentExpression	* file = ( ramhandle * ) s -> file		668422	2		=			
ANR	668439	Identifier	file		668422	0					
ANR	668440	CastExpression	( ramhandle * ) s -> file		668422	1					
ANR	668441	CastTarget	ramhandle *		668422	0					
ANR	668442	PtrMemberAccess	s -> file		668422	1					
ANR	668443	Identifier	s		668422	0					
ANR	668444	Identifier	file		668422	1					
ANR	668445	IdentifierDeclStatement	long pos ;	381:4:11102:11110	668422	2	True				
ANR	668446	IdentifierDecl	pos		668422	0					
ANR	668447	IdentifierDeclType	long		668422	0					
ANR	668448	Identifier	pos		668422	1					
ANR	668449	IfStatement	if ( writing )		668422	3					
ANR	668450	Condition	writing	383:8:11121:11127	668422	0	True				
ANR	668451	Identifier	writing		668422	0					
ANR	668452	CompoundStatement		6:17:108:108	668422	1					
ANR	668453	IfStatement	if ( ! ( s -> file_modes & s_mode_write ) )		668422	0					
ANR	668454	Condition	! ( s -> file_modes & s_mode_write )	384:8:11140:11170	668422	0	True				
ANR	668455	UnaryOperationExpression	! ( s -> file_modes & s_mode_write )		668422	0					
ANR	668456	UnaryOperator	!		668422	0					
ANR	668457	BitAndExpression	s -> file_modes & s_mode_write		668422	1		&			
ANR	668458	PtrMemberAccess	s -> file_modes		668422	0					
ANR	668459	Identifier	s		668422	0					
ANR	668460	Identifier	file_modes		668422	1					
ANR	668461	Identifier	s_mode_write		668422	1					
ANR	668462	ReturnStatement	return ERRC ;	384:41:11173:11184	668422	1	True				
ANR	668463	Identifier	ERRC		668422	0					
ANR	668464	ExpressionStatement	pos = stell ( s )	385:4:11190:11204	668422	1	True				
ANR	668465	AssignmentExpression	pos = stell ( s )		668422	0		=			
ANR	668466	Identifier	pos		668422	0					
ANR	668467	CallExpression	stell ( s )		668422	1					
ANR	668468	Callee	stell		668422	0					
ANR	668469	Identifier	stell		668422	0					
ANR	668470	ArgumentList	s		668422	1					
ANR	668471	Argument	s		668422	0					
ANR	668472	Identifier	s		668422	0					
ANR	668473	ExpressionStatement	"ramfile_seek ( file , pos , RAMFS_SEEK_SET )"	386:4:11210:11249	668422	2	True				
ANR	668474	CallExpression	"ramfile_seek ( file , pos , RAMFS_SEEK_SET )"		668422	0					
ANR	668475	Callee	ramfile_seek		668422	0					
ANR	668476	Identifier	ramfile_seek		668422	0					
ANR	668477	ArgumentList	file		668422	1					
ANR	668478	Argument	file		668422	0					
ANR	668479	Identifier	file		668422	0					
ANR	668480	Argument	pos		668422	1					
ANR	668481	Identifier	pos		668422	0					
ANR	668482	Argument	RAMFS_SEEK_SET		668422	2					
ANR	668483	Identifier	RAMFS_SEEK_SET		668422	0					
ANR	668484	IfStatement	if ( modes & s_mode_append )		668422	3					
ANR	668485	Condition	modes & s_mode_append	387:8:11259:11279	668422	0	True				
ANR	668486	BitAndExpression	modes & s_mode_append		668422	0		&			
ANR	668487	Identifier	modes		668422	0					
ANR	668488	Identifier	s_mode_append		668422	1					
ANR	668489	CompoundStatement		10:31:260:260	668422	1					
ANR	668490	ExpressionStatement	"sappend_ram ( s , file , s -> cbuf , s -> cbsize )"	388:8:11292:11332	668422	0	True				
ANR	668491	CallExpression	"sappend_ram ( s , file , s -> cbuf , s -> cbsize )"		668422	0					
ANR	668492	Callee	sappend_ram		668422	0					
ANR	668493	Identifier	sappend_ram		668422	0					
ANR	668494	ArgumentList	s		668422	1					
ANR	668495	Argument	s		668422	0					
ANR	668496	Identifier	s		668422	0					
ANR	668497	Argument	file		668422	1					
ANR	668498	Identifier	file		668422	0					
ANR	668499	Argument	s -> cbuf		668422	2					
ANR	668500	PtrMemberAccess	s -> cbuf		668422	0					
ANR	668501	Identifier	s		668422	0					
ANR	668502	Identifier	cbuf		668422	1					
ANR	668503	Argument	s -> cbsize		668422	3					
ANR	668504	PtrMemberAccess	s -> cbsize		668422	0					
ANR	668505	Identifier	s		668422	0					
ANR	668506	Identifier	cbsize		668422	1					
ANR	668507	ElseStatement	else		668422	0					
ANR	668508	CompoundStatement		12:11:346:346	668422	0					
ANR	668509	ExpressionStatement	"swrite_ram ( s , file , s -> cbuf , s -> cbsize )"	390:8:11378:11417	668422	0	True				
ANR	668510	CallExpression	"swrite_ram ( s , file , s -> cbuf , s -> cbsize )"		668422	0					
ANR	668511	Callee	swrite_ram		668422	0					
ANR	668512	Identifier	swrite_ram		668422	0					
ANR	668513	ArgumentList	s		668422	1					
ANR	668514	Argument	s		668422	0					
ANR	668515	Identifier	s		668422	0					
ANR	668516	Argument	file		668422	1					
ANR	668517	Identifier	file		668422	0					
ANR	668518	Argument	s -> cbuf		668422	2					
ANR	668519	PtrMemberAccess	s -> cbuf		668422	0					
ANR	668520	Identifier	s		668422	0					
ANR	668521	Identifier	cbuf		668422	1					
ANR	668522	Argument	s -> cbsize		668422	3					
ANR	668523	PtrMemberAccess	s -> cbsize		668422	0					
ANR	668524	Identifier	s		668422	0					
ANR	668525	Identifier	cbsize		668422	1					
ANR	668526	ExpressionStatement	s -> position = pos	391:8:11427:11444	668422	1	True				
ANR	668527	AssignmentExpression	s -> position = pos		668422	0		=			
ANR	668528	PtrMemberAccess	s -> position		668422	0					
ANR	668529	Identifier	s		668422	0					
ANR	668530	Identifier	position		668422	1					
ANR	668531	Identifier	pos		668422	1					
ANR	668532	ExpressionStatement	s -> modes = modes	393:4:11456:11472	668422	4	True				
ANR	668533	AssignmentExpression	s -> modes = modes		668422	0		=			
ANR	668534	PtrMemberAccess	s -> modes		668422	0					
ANR	668535	Identifier	s		668422	0					
ANR	668536	Identifier	modes		668422	1					
ANR	668537	Identifier	modes		668422	1					
ANR	668538	ElseStatement	else		668422	0					
ANR	668539	CompoundStatement		17:11:463:463	668422	0					
ANR	668540	IfStatement	if ( ! ( s -> file_modes & s_mode_read ) )		668422	0					
ANR	668541	Condition	! ( s -> file_modes & s_mode_read )	395:8:11495:11524	668422	0	True				
ANR	668542	UnaryOperationExpression	! ( s -> file_modes & s_mode_read )		668422	0					
ANR	668543	UnaryOperator	!		668422	0					
ANR	668544	BitAndExpression	s -> file_modes & s_mode_read		668422	1		&			
ANR	668545	PtrMemberAccess	s -> file_modes		668422	0					
ANR	668546	Identifier	s		668422	0					
ANR	668547	Identifier	file_modes		668422	1					
ANR	668548	Identifier	s_mode_read		668422	1					
ANR	668549	ReturnStatement	return ERRC ;	395:40:11527:11538	668422	1	True				
ANR	668550	Identifier	ERRC		668422	0					
ANR	668551	ExpressionStatement	pos = stell ( s )	396:4:11544:11558	668422	1	True				
ANR	668552	AssignmentExpression	pos = stell ( s )		668422	0		=			
ANR	668553	Identifier	pos		668422	0					
ANR	668554	CallExpression	stell ( s )		668422	1					
ANR	668555	Callee	stell		668422	0					
ANR	668556	Identifier	stell		668422	0					
ANR	668557	ArgumentList	s		668422	1					
ANR	668558	Argument	s		668422	0					
ANR	668559	Identifier	s		668422	0					
ANR	668560	IfStatement	if ( sflush ( s ) < 0 )		668422	2					
ANR	668561	Condition	sflush ( s ) < 0	397:8:11568:11580	668422	0	True				
ANR	668562	RelationalExpression	sflush ( s ) < 0		668422	0		<			
ANR	668563	CallExpression	sflush ( s )		668422	0					
ANR	668564	Callee	sflush		668422	0					
ANR	668565	Identifier	sflush		668422	0					
ANR	668566	ArgumentList	s		668422	1					
ANR	668567	Argument	s		668422	0					
ANR	668568	Identifier	s		668422	0					
ANR	668569	PrimaryExpression	0		668422	1					
ANR	668570	ReturnStatement	return ERRC ;	397:23:11583:11594	668422	1	True				
ANR	668571	Identifier	ERRC		668422	0					
ANR	668572	ExpressionStatement	"sread_ram ( s , file , s -> cbuf , s -> cbsize )"	398:4:11600:11638	668422	3	True				
ANR	668573	CallExpression	"sread_ram ( s , file , s -> cbuf , s -> cbsize )"		668422	0					
ANR	668574	Callee	sread_ram		668422	0					
ANR	668575	Identifier	sread_ram		668422	0					
ANR	668576	ArgumentList	s		668422	1					
ANR	668577	Argument	s		668422	0					
ANR	668578	Identifier	s		668422	0					
ANR	668579	Argument	file		668422	1					
ANR	668580	Identifier	file		668422	0					
ANR	668581	Argument	s -> cbuf		668422	2					
ANR	668582	PtrMemberAccess	s -> cbuf		668422	0					
ANR	668583	Identifier	s		668422	0					
ANR	668584	Identifier	cbuf		668422	1					
ANR	668585	Argument	s -> cbsize		668422	3					
ANR	668586	PtrMemberAccess	s -> cbsize		668422	0					
ANR	668587	Identifier	s		668422	0					
ANR	668588	Identifier	cbsize		668422	1					
ANR	668589	ExpressionStatement	s -> modes |= modes & s_mode_append	399:4:11644:11677	668422	4	True				
ANR	668590	AssignmentExpression	s -> modes |= modes & s_mode_append		668422	0		|=			
ANR	668591	PtrMemberAccess	s -> modes		668422	0					
ANR	668592	Identifier	s		668422	0					
ANR	668593	Identifier	modes		668422	1					
ANR	668594	BitAndExpression	modes & s_mode_append		668422	1		&			
ANR	668595	Identifier	modes		668422	0					
ANR	668596	Identifier	s_mode_append		668422	1					
ANR	668597	ExpressionStatement	s -> position = pos	400:4:11715:11732	668422	5	True				
ANR	668598	AssignmentExpression	s -> position = pos		668422	0		=			
ANR	668599	PtrMemberAccess	s -> position		668422	0					
ANR	668600	Identifier	s		668422	0					
ANR	668601	Identifier	position		668422	1					
ANR	668602	Identifier	pos		668422	1					
ANR	668603	ExpressionStatement	s -> file_modes = modes	402:4:11744:11765	668422	4	True				
ANR	668604	AssignmentExpression	s -> file_modes = modes		668422	0		=			
ANR	668605	PtrMemberAccess	s -> file_modes		668422	0					
ANR	668606	Identifier	s		668422	0					
ANR	668607	Identifier	file_modes		668422	1					
ANR	668608	Identifier	modes		668422	1					
ANR	668609	ReturnStatement	return 0 ;	403:4:11771:11779	668422	5	True				
ANR	668610	PrimaryExpression	0		668422	0					
ANR	668611	ReturnType	static int		668422	1					
ANR	668612	Identifier	s_ram_switch		668422	2					
ANR	668613	ParameterList	"stream * s , bool writing"		668422	3					
ANR	668614	Parameter	stream * s	377:13:10995:11004	668422	0	True				
ANR	668615	ParameterType	stream *		668422	0					
ANR	668616	Identifier	s		668422	1					
ANR	668617	Parameter	bool writing	377:25:11007:11018	668422	1	True				
ANR	668618	ParameterType	bool		668422	0					
ANR	668619	Identifier	writing		668422	1					
ANR	668620	CFGEntryNode	ENTRY		668422		True				
ANR	668621	CFGExitNode	EXIT		668422		True				
ANR	668622	Symbol	modes		668422						
ANR	668623	Symbol	s -> file		668422						
ANR	668624	Symbol	s -> position		668422						
ANR	668625	Symbol	s -> file_modes		668422						
ANR	668626	Symbol	s_mode_write		668422						
ANR	668627	Symbol	s -> cbuf		668422						
ANR	668628	Symbol	s_mode_append		668422						
ANR	668629	Symbol	stell		668422						
ANR	668630	Symbol	s -> cbsize		668422						
ANR	668631	Symbol	s		668422						
ANR	668632	Symbol	file		668422						
ANR	668633	Symbol	pos		668422						
ANR	668634	Symbol	writing		668422						
ANR	668635	Symbol	RAMFS_SEEK_SET		668422						
ANR	668636	Symbol	sflush		668422						
ANR	668637	Symbol	* s		668422						
ANR	668638	Symbol	s_mode_read		668422						
ANR	668639	Symbol	ERRC		668422						
ANR	668640	Symbol	s -> modes		668422						
ANR	668641	Function	iodev_ram_init	409:0:11811:12280							
ANR	668642	FunctionDef	"iodev_ram_init (gx_io_device * iodev , gs_memory_t * mem)"		668641	0					
ANR	668643	CompoundStatement		411:0:11878:12280	668641	0					
ANR	668644	IdentifierDeclStatement	"ramfs * fs = ramfs_new ( mem , MAXBLOCKS ) ;"	412:4:11884:11921	668641	0	True				
ANR	668645	IdentifierDecl	"* fs = ramfs_new ( mem , MAXBLOCKS )"		668641	0					
ANR	668646	IdentifierDeclType	ramfs *		668641	0					
ANR	668647	Identifier	fs		668641	1					
ANR	668648	AssignmentExpression	"* fs = ramfs_new ( mem , MAXBLOCKS )"		668641	2		=			
ANR	668649	Identifier	fs		668641	0					
ANR	668650	CallExpression	"ramfs_new ( mem , MAXBLOCKS )"		668641	1					
ANR	668651	Callee	ramfs_new		668641	0					
ANR	668652	Identifier	ramfs_new		668641	0					
ANR	668653	ArgumentList	mem		668641	1					
ANR	668654	Argument	mem		668641	0					
ANR	668655	Identifier	mem		668641	0					
ANR	668656	Argument	MAXBLOCKS		668641	1					
ANR	668657	Identifier	MAXBLOCKS		668641	0					
ANR	668658	IdentifierDeclStatement	"ramfs_state * state = gs_alloc_struct ( mem , ramfs_state , & st_ramfs_state , ""ramfs_init(state)"" ) ;"	413:4:11927:12028	668641	1	True				
ANR	668659	IdentifierDecl	"* state = gs_alloc_struct ( mem , ramfs_state , & st_ramfs_state , ""ramfs_init(state)"" )"		668641	0					
ANR	668660	IdentifierDeclType	ramfs_state *		668641	0					
ANR	668661	Identifier	state		668641	1					
ANR	668662	AssignmentExpression	"* state = gs_alloc_struct ( mem , ramfs_state , & st_ramfs_state , ""ramfs_init(state)"" )"		668641	2		=			
ANR	668663	Identifier	state		668641	0					
ANR	668664	CallExpression	"gs_alloc_struct ( mem , ramfs_state , & st_ramfs_state , ""ramfs_init(state)"" )"		668641	1					
ANR	668665	Callee	gs_alloc_struct		668641	0					
ANR	668666	Identifier	gs_alloc_struct		668641	0					
ANR	668667	ArgumentList	mem		668641	1					
ANR	668668	Argument	mem		668641	0					
ANR	668669	Identifier	mem		668641	0					
ANR	668670	Argument	ramfs_state		668641	1					
ANR	668671	Identifier	ramfs_state		668641	0					
ANR	668672	Argument	& st_ramfs_state		668641	2					
ANR	668673	UnaryOperationExpression	& st_ramfs_state		668641	0					
ANR	668674	UnaryOperator	&		668641	0					
ANR	668675	Identifier	st_ramfs_state		668641	1					
ANR	668676	Argument	"""ramfs_init(state)"""		668641	3					
ANR	668677	PrimaryExpression	"""ramfs_init(state)"""		668641	0					
ANR	668678	IfStatement	if ( fs && state )		668641	2					
ANR	668679	Condition	fs && state	416:8:12038:12048	668641	0	True				
ANR	668680	AndExpression	fs && state		668641	0		&&			
ANR	668681	Identifier	fs		668641	0					
ANR	668682	Identifier	state		668641	1					
ANR	668683	CompoundStatement		6:21:172:172	668641	1					
ANR	668684	ExpressionStatement	state -> fs = fs	417:4:12057:12071	668641	0	True				
ANR	668685	AssignmentExpression	state -> fs = fs		668641	0		=			
ANR	668686	PtrMemberAccess	state -> fs		668641	0					
ANR	668687	Identifier	state		668641	0					
ANR	668688	Identifier	fs		668641	1					
ANR	668689	Identifier	fs		668641	1					
ANR	668690	ExpressionStatement	state -> memory = mem	418:4:12077:12096	668641	1	True				
ANR	668691	AssignmentExpression	state -> memory = mem		668641	0		=			
ANR	668692	PtrMemberAccess	state -> memory		668641	0					
ANR	668693	Identifier	state		668641	0					
ANR	668694	Identifier	memory		668641	1					
ANR	668695	Identifier	mem		668641	1					
ANR	668696	ExpressionStatement	iodev -> state = state	419:4:12102:12122	668641	2	True				
ANR	668697	AssignmentExpression	iodev -> state = state		668641	0		=			
ANR	668698	PtrMemberAccess	iodev -> state		668641	0					
ANR	668699	Identifier	iodev		668641	0					
ANR	668700	Identifier	state		668641	1					
ANR	668701	Identifier	state		668641	1					
ANR	668702	ReturnStatement	return 0 ;	420:4:12128:12136	668641	3	True				
ANR	668703	PrimaryExpression	0		668641	0					
ANR	668704	IfStatement	if ( fs )		668641	3					
ANR	668705	Condition	fs	422:7:12151:12152	668641	0	True				
ANR	668706	Identifier	fs		668641	0					
ANR	668707	ExpressionStatement	"ramfs_destroy ( mem , fs )"	422:11:12155:12177	668641	1	True				
ANR	668708	CallExpression	"ramfs_destroy ( mem , fs )"		668641	0					
ANR	668709	Callee	ramfs_destroy		668641	0					
ANR	668710	Identifier	ramfs_destroy		668641	0					
ANR	668711	ArgumentList	mem		668641	1					
ANR	668712	Argument	mem		668641	0					
ANR	668713	Identifier	mem		668641	0					
ANR	668714	Argument	fs		668641	1					
ANR	668715	Identifier	fs		668641	0					
ANR	668716	IfStatement	if ( state )		668641	4					
ANR	668717	Condition	state	423:7:12186:12190	668641	0	True				
ANR	668718	Identifier	state		668641	0					
ANR	668719	ExpressionStatement	"gs_free_object ( mem , state , ""iodev_ram_init(state)"" )"	423:14:12193:12242	668641	1	True				
ANR	668720	CallExpression	"gs_free_object ( mem , state , ""iodev_ram_init(state)"" )"		668641	0					
ANR	668721	Callee	gs_free_object		668641	0					
ANR	668722	Identifier	gs_free_object		668641	0					
ANR	668723	ArgumentList	mem		668641	1					
ANR	668724	Argument	mem		668641	0					
ANR	668725	Identifier	mem		668641	0					
ANR	668726	Argument	state		668641	1					
ANR	668727	Identifier	state		668641	0					
ANR	668728	Argument	"""iodev_ram_init(state)"""		668641	2					
ANR	668729	PrimaryExpression	"""iodev_ram_init(state)"""		668641	0					
ANR	668730	ExpressionStatement	return_error ( gs_error_VMerror )	424:4:12248:12278	668641	5	True				
ANR	668731	CallExpression	return_error ( gs_error_VMerror )		668641	0					
ANR	668732	Callee	return_error		668641	0					
ANR	668733	Identifier	return_error		668641	0					
ANR	668734	ArgumentList	gs_error_VMerror		668641	1					
ANR	668735	Argument	gs_error_VMerror		668641	0					
ANR	668736	Identifier	gs_error_VMerror		668641	0					
ANR	668737	ReturnType	static int		668641	1					
ANR	668738	Identifier	iodev_ram_init		668641	2					
ANR	668739	ParameterList	"gx_io_device * iodev , gs_memory_t * mem"		668641	3					
ANR	668740	Parameter	gx_io_device * iodev	410:15:11837:11856	668641	0	True				
ANR	668741	ParameterType	gx_io_device *		668641	0					
ANR	668742	Identifier	iodev		668641	1					
ANR	668743	Parameter	gs_memory_t * mem	410:37:11859:11875	668641	1	True				
ANR	668744	ParameterType	gs_memory_t *		668641	0					
ANR	668745	Identifier	mem		668641	1					
ANR	668746	CFGEntryNode	ENTRY		668641		True				
ANR	668747	CFGExitNode	EXIT		668641		True				
ANR	668748	Symbol	& st_ramfs_state		668641						
ANR	668749	Symbol	* iodev		668641						
ANR	668750	Symbol	gs_alloc_struct		668641						
ANR	668751	Symbol	ramfs_state		668641						
ANR	668752	Symbol	state -> fs		668641						
ANR	668753	Symbol	fs		668641						
ANR	668754	Symbol	ramfs_new		668641						
ANR	668755	Symbol	* state		668641						
ANR	668756	Symbol	gs_error_VMerror		668641						
ANR	668757	Symbol	MAXBLOCKS		668641						
ANR	668758	Symbol	iodev		668641						
ANR	668759	Symbol	mem		668641						
ANR	668760	Symbol	state -> memory		668641						
ANR	668761	Symbol	iodev -> state		668641						
ANR	668762	Symbol	state		668641						
ANR	668763	Function	iodev_ram_finit	427:0:12283:12549							
ANR	668764	FunctionDef	"iodev_ram_finit (gx_io_device * iodev , gs_memory_t * mem)"		668763	0					
ANR	668765	CompoundStatement		429:0:12352:12549	668763	0					
ANR	668766	IdentifierDeclStatement	ramfs_state * state = ( ramfs_state * ) iodev -> state ;	430:4:12358:12406	668763	0	True				
ANR	668767	IdentifierDecl	* state = ( ramfs_state * ) iodev -> state		668763	0					
ANR	668768	IdentifierDeclType	ramfs_state *		668763	0					
ANR	668769	Identifier	state		668763	1					
ANR	668770	AssignmentExpression	* state = ( ramfs_state * ) iodev -> state		668763	2		=			
ANR	668771	Identifier	state		668763	0					
ANR	668772	CastExpression	( ramfs_state * ) iodev -> state		668763	1					
ANR	668773	CastTarget	ramfs_state *		668763	0					
ANR	668774	PtrMemberAccess	iodev -> state		668763	1					
ANR	668775	Identifier	iodev		668763	0					
ANR	668776	Identifier	state		668763	1					
ANR	668777	IfStatement	if ( state != NULL )		668763	1					
ANR	668778	Condition	state != NULL	431:8:12416:12428	668763	0	True				
ANR	668779	EqualityExpression	state != NULL		668763	0		!=			
ANR	668780	Identifier	state		668763	0					
ANR	668781	Identifier	NULL		668763	1					
ANR	668782	CompoundStatement		4:4:82:82	668763	1					
ANR	668783	ExpressionStatement	iodev -> state = NULL	433:8:12445:12464	668763	0	True				
ANR	668784	AssignmentExpression	iodev -> state = NULL		668763	0		=			
ANR	668785	PtrMemberAccess	iodev -> state		668763	0					
ANR	668786	Identifier	iodev		668763	0					
ANR	668787	Identifier	state		668763	1					
ANR	668788	Identifier	NULL		668763	1					
ANR	668789	ExpressionStatement	"gs_free_object ( state -> memory , state , ""iodev_ram_finit"" )"	434:8:12474:12529	668763	1	True				
ANR	668790	CallExpression	"gs_free_object ( state -> memory , state , ""iodev_ram_finit"" )"		668763	0					
ANR	668791	Callee	gs_free_object		668763	0					
ANR	668792	Identifier	gs_free_object		668763	0					
ANR	668793	ArgumentList	state -> memory		668763	1					
ANR	668794	Argument	state -> memory		668763	0					
ANR	668795	PtrMemberAccess	state -> memory		668763	0					
ANR	668796	Identifier	state		668763	0					
ANR	668797	Identifier	memory		668763	1					
ANR	668798	Argument	state		668763	1					
ANR	668799	Identifier	state		668763	0					
ANR	668800	Argument	"""iodev_ram_finit"""		668763	2					
ANR	668801	PrimaryExpression	"""iodev_ram_finit"""		668763	0					
ANR	668802	ReturnStatement	return ;	436:4:12541:12547	668763	2	True				
ANR	668803	ReturnType	static void		668763	1					
ANR	668804	Identifier	iodev_ram_finit		668763	2					
ANR	668805	ParameterList	"gx_io_device * iodev , gs_memory_t * mem"		668763	3					
ANR	668806	Parameter	gx_io_device * iodev	428:16:12311:12330	668763	0	True				
ANR	668807	ParameterType	gx_io_device *		668763	0					
ANR	668808	Identifier	iodev		668763	1					
ANR	668809	Parameter	gs_memory_t * mem	428:38:12333:12349	668763	1	True				
ANR	668810	ParameterType	gs_memory_t *		668763	0					
ANR	668811	Identifier	mem		668763	1					
ANR	668812	CFGEntryNode	ENTRY		668763		True				
ANR	668813	CFGExitNode	EXIT		668763		True				
ANR	668814	Symbol	* state		668763						
ANR	668815	Symbol	NULL		668763						
ANR	668816	Symbol	iodev		668763						
ANR	668817	Symbol	mem		668763						
ANR	668818	Symbol	* iodev		668763						
ANR	668819	Symbol	state -> memory		668763						
ANR	668820	Symbol	iodev -> state		668763						
ANR	668821	Symbol	state		668763						
ANR	668822	Function	ram_finalize	439:0:12552:12752							
ANR	668823	FunctionDef	"ram_finalize (const gs_memory_t * memory , void * vptr)"		668822	0					
ANR	668824	CompoundStatement		441:0:12617:12752	668822	0					
ANR	668825	IdentifierDeclStatement	ramfs * fs = GETRAMFS ( ( ramfs_state * ) vptr ) ;	442:4:12623:12663	668822	0	True				
ANR	668826	IdentifierDecl	* fs = GETRAMFS ( ( ramfs_state * ) vptr )		668822	0					
ANR	668827	IdentifierDeclType	ramfs *		668822	0					
ANR	668828	Identifier	fs		668822	1					
ANR	668829	AssignmentExpression	* fs = GETRAMFS ( ( ramfs_state * ) vptr )		668822	2		=			
ANR	668830	Identifier	fs		668822	0					
ANR	668831	CallExpression	GETRAMFS ( ( ramfs_state * ) vptr )		668822	1					
ANR	668832	Callee	GETRAMFS		668822	0					
ANR	668833	Identifier	GETRAMFS		668822	0					
ANR	668834	ArgumentList	( ramfs_state * ) vptr		668822	1					
ANR	668835	Argument	( ramfs_state * ) vptr		668822	0					
ANR	668836	CastExpression	( ramfs_state * ) vptr		668822	0					
ANR	668837	CastTarget	ramfs_state *		668822	0					
ANR	668838	Identifier	vptr		668822	1					
ANR	668839	ExpressionStatement	"ramfs_destroy ( ( gs_memory_t * ) memory , fs )"	443:4:12669:12709	668822	1	True				
ANR	668840	CallExpression	"ramfs_destroy ( ( gs_memory_t * ) memory , fs )"		668822	0					
ANR	668841	Callee	ramfs_destroy		668822	0					
ANR	668842	Identifier	ramfs_destroy		668822	0					
ANR	668843	ArgumentList	( gs_memory_t * ) memory		668822	1					
ANR	668844	Argument	( gs_memory_t * ) memory		668822	0					
ANR	668845	CastExpression	( gs_memory_t * ) memory		668822	0					
ANR	668846	CastTarget	gs_memory_t *		668822	0					
ANR	668847	Identifier	memory		668822	1					
ANR	668848	Argument	fs		668822	1					
ANR	668849	Identifier	fs		668822	0					
ANR	668850	ExpressionStatement	GETRAMFS ( ( ramfs_state * ) vptr ) = NULL	444:4:12715:12750	668822	2	True				
ANR	668851	AssignmentExpression	GETRAMFS ( ( ramfs_state * ) vptr ) = NULL		668822	0		=			
ANR	668852	CallExpression	GETRAMFS ( ( ramfs_state * ) vptr )		668822	0					
ANR	668853	Callee	GETRAMFS		668822	0					
ANR	668854	Identifier	GETRAMFS		668822	0					
ANR	668855	ArgumentList	( ramfs_state * ) vptr		668822	1					
ANR	668856	Argument	( ramfs_state * ) vptr		668822	0					
ANR	668857	CastExpression	( ramfs_state * ) vptr		668822	0					
ANR	668858	CastTarget	ramfs_state *		668822	0					
ANR	668859	Identifier	vptr		668822	1					
ANR	668860	Identifier	NULL		668822	1					
ANR	668861	ReturnType	static void		668822	1					
ANR	668862	Identifier	ram_finalize		668822	2					
ANR	668863	ParameterList	"const gs_memory_t * memory , void * vptr"		668822	3					
ANR	668864	Parameter	const gs_memory_t * memory	440:13:12577:12601	668822	0	True				
ANR	668865	ParameterType	const gs_memory_t *		668822	0					
ANR	668866	Identifier	memory		668822	1					
ANR	668867	Parameter	void * vptr	440:40:12604:12614	668822	1	True				
ANR	668868	ParameterType	void *		668822	0					
ANR	668869	Identifier	vptr		668822	1					
ANR	668870	CFGEntryNode	ENTRY		668822		True				
ANR	668871	CFGExitNode	EXIT		668822		True				
ANR	668872	Symbol	memory		668822						
ANR	668873	Symbol	NULL		668822						
ANR	668874	Symbol	fs		668822						
ANR	668875	Symbol	vptr		668822						
ANR	668876	Symbol	GETRAMFS		668822						
ANR	668877	Function	ram_delete	447:0:12755:12973							
ANR	668878	FunctionDef	"ram_delete (gx_io_device * iodev , const char * fname)"		668877	0					
ANR	668879	CompoundStatement		449:0:12818:12973	668877	0					
ANR	668880	IdentifierDeclStatement	ramfs * fs = GETRAMFS ( iodev -> state ) ;	450:4:12824:12858	668877	0	True				
ANR	668881	IdentifierDecl	* fs = GETRAMFS ( iodev -> state )		668877	0					
ANR	668882	IdentifierDeclType	ramfs *		668877	0					
ANR	668883	Identifier	fs		668877	1					
ANR	668884	AssignmentExpression	* fs = GETRAMFS ( iodev -> state )		668877	2		=			
ANR	668885	Identifier	fs		668877	0					
ANR	668886	CallExpression	GETRAMFS ( iodev -> state )		668877	1					
ANR	668887	Callee	GETRAMFS		668877	0					
ANR	668888	Identifier	GETRAMFS		668877	0					
ANR	668889	ArgumentList	iodev -> state		668877	1					
ANR	668890	Argument	iodev -> state		668877	0					
ANR	668891	PtrMemberAccess	iodev -> state		668877	0					
ANR	668892	Identifier	iodev		668877	0					
ANR	668893	Identifier	state		668877	1					
ANR	668894	IfStatement	"if ( ramfs_unlink ( fs , fname ) != 0 )"		668877	1					
ANR	668895	Condition	"ramfs_unlink ( fs , fname ) != 0"	452:7:12868:12892	668877	0	True				
ANR	668896	EqualityExpression	"ramfs_unlink ( fs , fname ) != 0"		668877	0		!=			
ANR	668897	CallExpression	"ramfs_unlink ( fs , fname )"		668877	0					
ANR	668898	Callee	ramfs_unlink		668877	0					
ANR	668899	Identifier	ramfs_unlink		668877	0					
ANR	668900	ArgumentList	fs		668877	1					
ANR	668901	Argument	fs		668877	0					
ANR	668902	Identifier	fs		668877	0					
ANR	668903	Argument	fname		668877	1					
ANR	668904	Identifier	fname		668877	0					
ANR	668905	PrimaryExpression	0		668877	1					
ANR	668906	CompoundStatement		4:34:76:76	668877	1					
ANR	668907	ExpressionStatement	return_error ( ramfs_errno_to_code ( ramfs_error ( fs ) ) )	453:4:12901:12951	668877	0	True				
ANR	668908	CallExpression	return_error ( ramfs_errno_to_code ( ramfs_error ( fs ) ) )		668877	0					
ANR	668909	Callee	return_error		668877	0					
ANR	668910	Identifier	return_error		668877	0					
ANR	668911	ArgumentList	ramfs_errno_to_code ( ramfs_error ( fs ) )		668877	1					
ANR	668912	Argument	ramfs_errno_to_code ( ramfs_error ( fs ) )		668877	0					
ANR	668913	CallExpression	ramfs_errno_to_code ( ramfs_error ( fs ) )		668877	0					
ANR	668914	Callee	ramfs_errno_to_code		668877	0					
ANR	668915	Identifier	ramfs_errno_to_code		668877	0					
ANR	668916	ArgumentList	ramfs_error ( fs )		668877	1					
ANR	668917	Argument	ramfs_error ( fs )		668877	0					
ANR	668918	CallExpression	ramfs_error ( fs )		668877	0					
ANR	668919	Callee	ramfs_error		668877	0					
ANR	668920	Identifier	ramfs_error		668877	0					
ANR	668921	ArgumentList	fs		668877	1					
ANR	668922	Argument	fs		668877	0					
ANR	668923	Identifier	fs		668877	0					
ANR	668924	ReturnStatement	return 0 ;	455:4:12963:12971	668877	2	True				
ANR	668925	PrimaryExpression	0		668877	0					
ANR	668926	ReturnType	static int		668877	1					
ANR	668927	Identifier	ram_delete		668877	2					
ANR	668928	ParameterList	"gx_io_device * iodev , const char * fname"		668877	3					
ANR	668929	Parameter	gx_io_device * iodev	448:11:12777:12796	668877	0	True				
ANR	668930	ParameterType	gx_io_device *		668877	0					
ANR	668931	Identifier	iodev		668877	1					
ANR	668932	Parameter	const char * fname	448:33:12799:12815	668877	1	True				
ANR	668933	ParameterType	const char *		668877	0					
ANR	668934	Identifier	fname		668877	1					
ANR	668935	CFGEntryNode	ENTRY		668877		True				
ANR	668936	CFGExitNode	EXIT		668877		True				
ANR	668937	Symbol	ramfs_error		668877						
ANR	668938	Symbol	fname		668877						
ANR	668939	Symbol	iodev		668877						
ANR	668940	Symbol	* iodev		668877						
ANR	668941	Symbol	iodev -> state		668877						
ANR	668942	Symbol	ramfs_errno_to_code		668877						
ANR	668943	Symbol	ramfs_unlink		668877						
ANR	668944	Symbol	fs		668877						
ANR	668945	Symbol	GETRAMFS		668877						
ANR	668946	Function	ram_rename	458:0:12976:13211							
ANR	668947	FunctionDef	"ram_rename (gx_io_device * iodev , const char * from , const char * to)"		668946	0					
ANR	668948	CompoundStatement		460:0:13054:13211	668946	0					
ANR	668949	IdentifierDeclStatement	ramfs * fs = GETRAMFS ( iodev -> state ) ;	461:4:13060:13094	668946	0	True				
ANR	668950	IdentifierDecl	* fs = GETRAMFS ( iodev -> state )		668946	0					
ANR	668951	IdentifierDeclType	ramfs *		668946	0					
ANR	668952	Identifier	fs		668946	1					
ANR	668953	AssignmentExpression	* fs = GETRAMFS ( iodev -> state )		668946	2		=			
ANR	668954	Identifier	fs		668946	0					
ANR	668955	CallExpression	GETRAMFS ( iodev -> state )		668946	1					
ANR	668956	Callee	GETRAMFS		668946	0					
ANR	668957	Identifier	GETRAMFS		668946	0					
ANR	668958	ArgumentList	iodev -> state		668946	1					
ANR	668959	Argument	iodev -> state		668946	0					
ANR	668960	PtrMemberAccess	iodev -> state		668946	0					
ANR	668961	Identifier	iodev		668946	0					
ANR	668962	Identifier	state		668946	1					
ANR	668963	IfStatement	"if ( ramfs_rename ( fs , from , to ) != 0 )"		668946	1					
ANR	668964	Condition	"ramfs_rename ( fs , from , to ) != 0"	463:7:13104:13130	668946	0	True				
ANR	668965	EqualityExpression	"ramfs_rename ( fs , from , to ) != 0"		668946	0		!=			
ANR	668966	CallExpression	"ramfs_rename ( fs , from , to )"		668946	0					
ANR	668967	Callee	ramfs_rename		668946	0					
ANR	668968	Identifier	ramfs_rename		668946	0					
ANR	668969	ArgumentList	fs		668946	1					
ANR	668970	Argument	fs		668946	0					
ANR	668971	Identifier	fs		668946	0					
ANR	668972	Argument	from		668946	1					
ANR	668973	Identifier	from		668946	0					
ANR	668974	Argument	to		668946	2					
ANR	668975	Identifier	to		668946	0					
ANR	668976	PrimaryExpression	0		668946	1					
ANR	668977	CompoundStatement		4:36:78:78	668946	1					
ANR	668978	ExpressionStatement	return_error ( ramfs_errno_to_code ( ramfs_error ( fs ) ) )	464:4:13139:13189	668946	0	True				
ANR	668979	CallExpression	return_error ( ramfs_errno_to_code ( ramfs_error ( fs ) ) )		668946	0					
ANR	668980	Callee	return_error		668946	0					
ANR	668981	Identifier	return_error		668946	0					
ANR	668982	ArgumentList	ramfs_errno_to_code ( ramfs_error ( fs ) )		668946	1					
ANR	668983	Argument	ramfs_errno_to_code ( ramfs_error ( fs ) )		668946	0					
ANR	668984	CallExpression	ramfs_errno_to_code ( ramfs_error ( fs ) )		668946	0					
ANR	668985	Callee	ramfs_errno_to_code		668946	0					
ANR	668986	Identifier	ramfs_errno_to_code		668946	0					
ANR	668987	ArgumentList	ramfs_error ( fs )		668946	1					
ANR	668988	Argument	ramfs_error ( fs )		668946	0					
ANR	668989	CallExpression	ramfs_error ( fs )		668946	0					
ANR	668990	Callee	ramfs_error		668946	0					
ANR	668991	Identifier	ramfs_error		668946	0					
ANR	668992	ArgumentList	fs		668946	1					
ANR	668993	Argument	fs		668946	0					
ANR	668994	Identifier	fs		668946	0					
ANR	668995	ReturnStatement	return 0 ;	466:4:13201:13209	668946	2	True				
ANR	668996	PrimaryExpression	0		668946	0					
ANR	668997	ReturnType	static int		668946	1					
ANR	668998	Identifier	ram_rename		668946	2					
ANR	668999	ParameterList	"gx_io_device * iodev , const char * from , const char * to"		668946	3					
ANR	669000	Parameter	gx_io_device * iodev	459:11:12998:13017	668946	0	True				
ANR	669001	ParameterType	gx_io_device *		668946	0					
ANR	669002	Identifier	iodev		668946	1					
ANR	669003	Parameter	const char * from	459:33:13020:13035	668946	1	True				
ANR	669004	ParameterType	const char *		668946	0					
ANR	669005	Identifier	from		668946	1					
ANR	669006	Parameter	const char * to	459:51:13038:13051	668946	2	True				
ANR	669007	ParameterType	const char *		668946	0					
ANR	669008	Identifier	to		668946	1					
ANR	669009	CFGEntryNode	ENTRY		668946		True				
ANR	669010	CFGExitNode	EXIT		668946		True				
ANR	669011	Symbol	ramfs_error		668946						
ANR	669012	Symbol	iodev		668946						
ANR	669013	Symbol	* iodev		668946						
ANR	669014	Symbol	iodev -> state		668946						
ANR	669015	Symbol	ramfs_errno_to_code		668946						
ANR	669016	Symbol	from		668946						
ANR	669017	Symbol	to		668946						
ANR	669018	Symbol	fs		668946						
ANR	669019	Symbol	ramfs_rename		668946						
ANR	669020	Symbol	GETRAMFS		668946						
ANR	669021	Function	ram_status	469:0:13214:13792							
ANR	669022	FunctionDef	"ram_status (gx_io_device * iodev , const char * fname , struct stat * pstat)"		669021	0					
ANR	669023	CompoundStatement		471:0:13297:13792	669021	0					
ANR	669024	IdentifierDeclStatement	ramhandle * f ;	472:4:13303:13316	669021	0	True				
ANR	669025	IdentifierDecl	* f		669021	0					
ANR	669026	IdentifierDeclType	ramhandle *		669021	0					
ANR	669027	Identifier	f		669021	1					
ANR	669028	IdentifierDeclStatement	ramfs * fs = GETRAMFS ( iodev -> state ) ;	473:4:13322:13356	669021	1	True				
ANR	669029	IdentifierDecl	* fs = GETRAMFS ( iodev -> state )		669021	0					
ANR	669030	IdentifierDeclType	ramfs *		669021	0					
ANR	669031	Identifier	fs		669021	1					
ANR	669032	AssignmentExpression	* fs = GETRAMFS ( iodev -> state )		669021	2		=			
ANR	669033	Identifier	fs		669021	0					
ANR	669034	CallExpression	GETRAMFS ( iodev -> state )		669021	1					
ANR	669035	Callee	GETRAMFS		669021	0					
ANR	669036	Identifier	GETRAMFS		669021	0					
ANR	669037	ArgumentList	iodev -> state		669021	1					
ANR	669038	Argument	iodev -> state		669021	0					
ANR	669039	PtrMemberAccess	iodev -> state		669021	0					
ANR	669040	Identifier	iodev		669021	0					
ANR	669041	Identifier	state		669021	1					
ANR	669042	ExpressionStatement	"f = ramfs_open ( ( ( ramfs_state * ) iodev -> state ) -> memory , fs , fname , RAMFS_READ )"	475:4:13363:13437	669021	2	True				
ANR	669043	AssignmentExpression	"f = ramfs_open ( ( ( ramfs_state * ) iodev -> state ) -> memory , fs , fname , RAMFS_READ )"		669021	0		=			
ANR	669044	Identifier	f		669021	0					
ANR	669045	CallExpression	"ramfs_open ( ( ( ramfs_state * ) iodev -> state ) -> memory , fs , fname , RAMFS_READ )"		669021	1					
ANR	669046	Callee	ramfs_open		669021	0					
ANR	669047	Identifier	ramfs_open		669021	0					
ANR	669048	ArgumentList	( ( ramfs_state * ) iodev -> state ) -> memory		669021	1					
ANR	669049	Argument	( ( ramfs_state * ) iodev -> state ) -> memory		669021	0					
ANR	669050	PtrMemberAccess	( ( ramfs_state * ) iodev -> state ) -> memory		669021	0					
ANR	669051	CastExpression	( ramfs_state * ) iodev -> state		669021	0					
ANR	669052	CastTarget	ramfs_state *		669021	0					
ANR	669053	PtrMemberAccess	iodev -> state		669021	1					
ANR	669054	Identifier	iodev		669021	0					
ANR	669055	Identifier	state		669021	1					
ANR	669056	Identifier	memory		669021	1					
ANR	669057	Argument	fs		669021	1					
ANR	669058	Identifier	fs		669021	0					
ANR	669059	Argument	fname		669021	2					
ANR	669060	Identifier	fname		669021	0					
ANR	669061	Argument	RAMFS_READ		669021	3					
ANR	669062	Identifier	RAMFS_READ		669021	0					
ANR	669063	IfStatement	if ( ! f )		669021	3					
ANR	669064	Condition	! f	476:7:13446:13447	669021	0	True				
ANR	669065	UnaryOperationExpression	! f		669021	0					
ANR	669066	UnaryOperator	!		669021	0					
ANR	669067	Identifier	f		669021	1					
ANR	669068	ExpressionStatement	return_error ( ramfs_errno_to_code ( ramfs_error ( fs ) ) )	476:11:13450:13500	669021	1	True				
ANR	669069	CallExpression	return_error ( ramfs_errno_to_code ( ramfs_error ( fs ) ) )		669021	0					
ANR	669070	Callee	return_error		669021	0					
ANR	669071	Identifier	return_error		669021	0					
ANR	669072	ArgumentList	ramfs_errno_to_code ( ramfs_error ( fs ) )		669021	1					
ANR	669073	Argument	ramfs_errno_to_code ( ramfs_error ( fs ) )		669021	0					
ANR	669074	CallExpression	ramfs_errno_to_code ( ramfs_error ( fs ) )		669021	0					
ANR	669075	Callee	ramfs_errno_to_code		669021	0					
ANR	669076	Identifier	ramfs_errno_to_code		669021	0					
ANR	669077	ArgumentList	ramfs_error ( fs )		669021	1					
ANR	669078	Argument	ramfs_error ( fs )		669021	0					
ANR	669079	CallExpression	ramfs_error ( fs )		669021	0					
ANR	669080	Callee	ramfs_error		669021	0					
ANR	669081	Identifier	ramfs_error		669021	0					
ANR	669082	ArgumentList	fs		669021	1					
ANR	669083	Argument	fs		669021	0					
ANR	669084	Identifier	fs		669021	0					
ANR	669085	ExpressionStatement	"memset ( pstat , 0 , sizeof ( * pstat ) )"	478:4:13507:13539	669021	4	True				
ANR	669086	CallExpression	"memset ( pstat , 0 , sizeof ( * pstat ) )"		669021	0					
ANR	669087	Callee	memset		669021	0					
ANR	669088	Identifier	memset		669021	0					
ANR	669089	ArgumentList	pstat		669021	1					
ANR	669090	Argument	pstat		669021	0					
ANR	669091	Identifier	pstat		669021	0					
ANR	669092	Argument	0		669021	1					
ANR	669093	PrimaryExpression	0		669021	0					
ANR	669094	Argument	sizeof ( * pstat )		669021	2					
ANR	669095	SizeofExpression	sizeof ( * pstat )		669021	0					
ANR	669096	Sizeof	sizeof		669021	0					
ANR	669097	UnaryOperationExpression	* pstat		669021	1					
ANR	669098	UnaryOperator	*		669021	0					
ANR	669099	Identifier	pstat		669021	1					
ANR	669100	ExpressionStatement	pstat -> st_size = ramfile_size ( f )	479:4:13545:13577	669021	5	True				
ANR	669101	AssignmentExpression	pstat -> st_size = ramfile_size ( f )		669021	0		=			
ANR	669102	PtrMemberAccess	pstat -> st_size		669021	0					
ANR	669103	Identifier	pstat		669021	0					
ANR	669104	Identifier	st_size		669021	1					
ANR	669105	CallExpression	ramfile_size ( f )		669021	1					
ANR	669106	Callee	ramfile_size		669021	0					
ANR	669107	Identifier	ramfile_size		669021	0					
ANR	669108	ArgumentList	f		669021	1					
ANR	669109	Argument	f		669021	0					
ANR	669110	Identifier	f		669021	0					
ANR	669111	ExpressionStatement	ramfile_close ( f )	483:4:13760:13776	669021	6	True				
ANR	669112	CallExpression	ramfile_close ( f )		669021	0					
ANR	669113	Callee	ramfile_close		669021	0					
ANR	669114	Identifier	ramfile_close		669021	0					
ANR	669115	ArgumentList	f		669021	1					
ANR	669116	Argument	f		669021	0					
ANR	669117	Identifier	f		669021	0					
ANR	669118	ReturnStatement	return 0 ;	484:4:13782:13790	669021	7	True				
ANR	669119	PrimaryExpression	0		669021	0					
ANR	669120	ReturnType	static int		669021	1					
ANR	669121	Identifier	ram_status		669021	2					
ANR	669122	ParameterList	"gx_io_device * iodev , const char * fname , struct stat * pstat"		669021	3					
ANR	669123	Parameter	gx_io_device * iodev	470:11:13236:13255	669021	0	True				
ANR	669124	ParameterType	gx_io_device *		669021	0					
ANR	669125	Identifier	iodev		669021	1					
ANR	669126	Parameter	const char * fname	470:33:13258:13274	669021	1	True				
ANR	669127	ParameterType	const char *		669021	0					
ANR	669128	Identifier	fname		669021	1					
ANR	669129	Parameter	struct stat * pstat	470:52:13277:13294	669021	2	True				
ANR	669130	ParameterType	struct stat *		669021	0					
ANR	669131	Identifier	pstat		669021	1					
ANR	669132	CFGEntryNode	ENTRY		669021		True				
ANR	669133	CFGExitNode	EXIT		669021		True				
ANR	669134	Symbol	ramfs_error		669021						
ANR	669135	Symbol	pstat -> st_size		669021						
ANR	669136	Symbol	fname		669021						
ANR	669137	Symbol	pstat		669021						
ANR	669138	Symbol	* iodev		669021						
ANR	669139	Symbol	f		669021						
ANR	669140	Symbol	ramfs_errno_to_code		669021						
ANR	669141	Symbol	fs		669021						
ANR	669142	Symbol	* iodev -> state		669021						
ANR	669143	Symbol	GETRAMFS		669021						
ANR	669144	Symbol	* pstat		669021						
ANR	669145	Symbol	RAMFS_READ		669021						
ANR	669146	Symbol	iodev		669021						
ANR	669147	Symbol	ramfs_open		669021						
ANR	669148	Symbol	ramfile_size		669021						
ANR	669149	Symbol	iodev -> state		669021						
ANR	669150	Symbol	( ( ramfs_state * ) iodev -> state ) -> memory		669021						
ANR	669151	Symbol	* * iodev		669021						
ANR	669152	Function	ram_enumerate_init	487:0:13795:14599							
ANR	669153	FunctionDef	"ram_enumerate_init (gx_io_device * iodev , const char * pat , uint patlen , gs_memory_t * mem)"		669152	0					
ANR	669154	CompoundStatement		490:0:13906:14599	669152	0					
ANR	669155	IdentifierDeclStatement	"gsram_enum * penum = gs_alloc_struct ( mem , gsram_enum , & st_gsram_enum , ""ram_enumerate_files_init(file_enum)"" ) ;"	491:4:13912:14034	669152	0	True				
ANR	669156	IdentifierDecl	"* penum = gs_alloc_struct ( mem , gsram_enum , & st_gsram_enum , ""ram_enumerate_files_init(file_enum)"" )"		669152	0					
ANR	669157	IdentifierDeclType	gsram_enum *		669152	0					
ANR	669158	Identifier	penum		669152	1					
ANR	669159	AssignmentExpression	"* penum = gs_alloc_struct ( mem , gsram_enum , & st_gsram_enum , ""ram_enumerate_files_init(file_enum)"" )"		669152	2		=			
ANR	669160	Identifier	penum		669152	0					
ANR	669161	CallExpression	"gs_alloc_struct ( mem , gsram_enum , & st_gsram_enum , ""ram_enumerate_files_init(file_enum)"" )"		669152	1					
ANR	669162	Callee	gs_alloc_struct		669152	0					
ANR	669163	Identifier	gs_alloc_struct		669152	0					
ANR	669164	ArgumentList	mem		669152	1					
ANR	669165	Argument	mem		669152	0					
ANR	669166	Identifier	mem		669152	0					
ANR	669167	Argument	gsram_enum		669152	1					
ANR	669168	Identifier	gsram_enum		669152	0					
ANR	669169	Argument	& st_gsram_enum		669152	2					
ANR	669170	UnaryOperationExpression	& st_gsram_enum		669152	0					
ANR	669171	UnaryOperator	&		669152	0					
ANR	669172	Identifier	st_gsram_enum		669152	1					
ANR	669173	Argument	"""ram_enumerate_files_init(file_enum)"""		669152	3					
ANR	669174	PrimaryExpression	"""ram_enumerate_files_init(file_enum)"""		669152	0					
ANR	669175	IdentifierDeclStatement	"char * pattern = ( char * ) gs_alloc_bytes ( mem , patlen + 1 , ""ram_enumerate_file_init(pattern)"" ) ;"	495:4:14040:14139	669152	1	True				
ANR	669176	IdentifierDecl	"* pattern = ( char * ) gs_alloc_bytes ( mem , patlen + 1 , ""ram_enumerate_file_init(pattern)"" )"		669152	0					
ANR	669177	IdentifierDeclType	char *		669152	0					
ANR	669178	Identifier	pattern		669152	1					
ANR	669179	AssignmentExpression	"* pattern = ( char * ) gs_alloc_bytes ( mem , patlen + 1 , ""ram_enumerate_file_init(pattern)"" )"		669152	2		=			
ANR	669180	Identifier	pattern		669152	0					
ANR	669181	CastExpression	"( char * ) gs_alloc_bytes ( mem , patlen + 1 , ""ram_enumerate_file_init(pattern)"" )"		669152	1					
ANR	669182	CastTarget	char *		669152	0					
ANR	669183	CallExpression	"gs_alloc_bytes ( mem , patlen + 1 , ""ram_enumerate_file_init(pattern)"" )"		669152	1					
ANR	669184	Callee	gs_alloc_bytes		669152	0					
ANR	669185	Identifier	gs_alloc_bytes		669152	0					
ANR	669186	ArgumentList	mem		669152	1					
ANR	669187	Argument	mem		669152	0					
ANR	669188	Identifier	mem		669152	0					
ANR	669189	Argument	patlen + 1		669152	1					
ANR	669190	AdditiveExpression	patlen + 1		669152	0		+			
ANR	669191	Identifier	patlen		669152	0					
ANR	669192	PrimaryExpression	1		669152	1					
ANR	669193	Argument	"""ram_enumerate_file_init(pattern)"""		669152	2					
ANR	669194	PrimaryExpression	"""ram_enumerate_file_init(pattern)"""		669152	0					
ANR	669195	IdentifierDeclStatement	ramfs_enum * e = ramfs_enum_new ( GETRAMFS ( iodev -> state ) ) ;	498:4:14145:14200	669152	2	True				
ANR	669196	IdentifierDecl	* e = ramfs_enum_new ( GETRAMFS ( iodev -> state ) )		669152	0					
ANR	669197	IdentifierDeclType	ramfs_enum *		669152	0					
ANR	669198	Identifier	e		669152	1					
ANR	669199	AssignmentExpression	* e = ramfs_enum_new ( GETRAMFS ( iodev -> state ) )		669152	2		=			
ANR	669200	Identifier	e		669152	0					
ANR	669201	CallExpression	ramfs_enum_new ( GETRAMFS ( iodev -> state ) )		669152	1					
ANR	669202	Callee	ramfs_enum_new		669152	0					
ANR	669203	Identifier	ramfs_enum_new		669152	0					
ANR	669204	ArgumentList	GETRAMFS ( iodev -> state )		669152	1					
ANR	669205	Argument	GETRAMFS ( iodev -> state )		669152	0					
ANR	669206	CallExpression	GETRAMFS ( iodev -> state )		669152	0					
ANR	669207	Callee	GETRAMFS		669152	0					
ANR	669208	Identifier	GETRAMFS		669152	0					
ANR	669209	ArgumentList	iodev -> state		669152	1					
ANR	669210	Argument	iodev -> state		669152	0					
ANR	669211	PtrMemberAccess	iodev -> state		669152	0					
ANR	669212	Identifier	iodev		669152	0					
ANR	669213	Identifier	state		669152	1					
ANR	669214	IfStatement	if ( penum && pattern && e )		669152	3					
ANR	669215	Condition	penum && pattern && e	499:7:14209:14229	669152	0	True				
ANR	669216	AndExpression	penum && pattern && e		669152	0		&&			
ANR	669217	Identifier	penum		669152	0					
ANR	669218	AndExpression	pattern && e		669152	1		&&			
ANR	669219	Identifier	pattern		669152	0					
ANR	669220	Identifier	e		669152	1					
ANR	669221	CompoundStatement		10:30:325:325	669152	1					
ANR	669222	ExpressionStatement	"memcpy ( pattern , pat , patlen )"	500:4:14238:14266	669152	0	True				
ANR	669223	CallExpression	"memcpy ( pattern , pat , patlen )"		669152	0					
ANR	669224	Callee	memcpy		669152	0					
ANR	669225	Identifier	memcpy		669152	0					
ANR	669226	ArgumentList	pattern		669152	1					
ANR	669227	Argument	pattern		669152	0					
ANR	669228	Identifier	pattern		669152	0					
ANR	669229	Argument	pat		669152	1					
ANR	669230	Identifier	pat		669152	0					
ANR	669231	Argument	patlen		669152	2					
ANR	669232	Identifier	patlen		669152	0					
ANR	669233	ExpressionStatement	pattern [ patlen ] = 0	501:4:14272:14289	669152	1	True				
ANR	669234	AssignmentExpression	pattern [ patlen ] = 0		669152	0		=			
ANR	669235	ArrayIndexing	pattern [ patlen ]		669152	0					
ANR	669236	Identifier	pattern		669152	0					
ANR	669237	Identifier	patlen		669152	1					
ANR	669238	PrimaryExpression	0		669152	1					
ANR	669239	ExpressionStatement	penum -> memory = mem	503:4:14296:14315	669152	2	True				
ANR	669240	AssignmentExpression	penum -> memory = mem		669152	0		=			
ANR	669241	PtrMemberAccess	penum -> memory		669152	0					
ANR	669242	Identifier	penum		669152	0					
ANR	669243	Identifier	memory		669152	1					
ANR	669244	Identifier	mem		669152	1					
ANR	669245	ExpressionStatement	penum -> pattern = pattern	504:4:14321:14345	669152	3	True				
ANR	669246	AssignmentExpression	penum -> pattern = pattern		669152	0		=			
ANR	669247	PtrMemberAccess	penum -> pattern		669152	0					
ANR	669248	Identifier	penum		669152	0					
ANR	669249	Identifier	pattern		669152	1					
ANR	669250	Identifier	pattern		669152	1					
ANR	669251	ExpressionStatement	penum -> e = e	505:4:14351:14363	669152	4	True				
ANR	669252	AssignmentExpression	penum -> e = e		669152	0		=			
ANR	669253	PtrMemberAccess	penum -> e		669152	0					
ANR	669254	Identifier	penum		669152	0					
ANR	669255	Identifier	e		669152	1					
ANR	669256	Identifier	e		669152	1					
ANR	669257	ReturnStatement	return ( file_enum * ) penum ;	506:4:14369:14394	669152	5	True				
ANR	669258	CastExpression	( file_enum * ) penum		669152	0					
ANR	669259	CastTarget	file_enum *		669152	0					
ANR	669260	Identifier	penum		669152	1					
ANR	669261	IfStatement	if ( penum )		669152	4					
ANR	669262	Condition	penum	508:8:14410:14414	669152	0	True				
ANR	669263	Identifier	penum		669152	0					
ANR	669264	ExpressionStatement	"gs_free_object ( mem , penum , ""ramfs_enum_init(ramfs_enum)"" )"	508:15:14417:14472	669152	1	True				
ANR	669265	CallExpression	"gs_free_object ( mem , penum , ""ramfs_enum_init(ramfs_enum)"" )"		669152	0					
ANR	669266	Callee	gs_free_object		669152	0					
ANR	669267	Identifier	gs_free_object		669152	0					
ANR	669268	ArgumentList	mem		669152	1					
ANR	669269	Argument	mem		669152	0					
ANR	669270	Identifier	mem		669152	0					
ANR	669271	Argument	penum		669152	1					
ANR	669272	Identifier	penum		669152	0					
ANR	669273	Argument	"""ramfs_enum_init(ramfs_enum)"""		669152	2					
ANR	669274	PrimaryExpression	"""ramfs_enum_init(ramfs_enum)"""		669152	0					
ANR	669275	IfStatement	if ( pattern )		669152	5					
ANR	669276	Condition	pattern	509:8:14482:14488	669152	0	True				
ANR	669277	Identifier	pattern		669152	0					
ANR	669278	ExpressionStatement	"gs_free_object ( mem , pattern , ""ramfs_enum_init(pattern)"" )"	510:4:14495:14551	669152	1	True				
ANR	669279	CallExpression	"gs_free_object ( mem , pattern , ""ramfs_enum_init(pattern)"" )"		669152	0					
ANR	669280	Callee	gs_free_object		669152	0					
ANR	669281	Identifier	gs_free_object		669152	0					
ANR	669282	ArgumentList	mem		669152	1					
ANR	669283	Argument	mem		669152	0					
ANR	669284	Identifier	mem		669152	0					
ANR	669285	Argument	pattern		669152	1					
ANR	669286	Identifier	pattern		669152	0					
ANR	669287	Argument	"""ramfs_enum_init(pattern)"""		669152	2					
ANR	669288	PrimaryExpression	"""ramfs_enum_init(pattern)"""		669152	0					
ANR	669289	IfStatement	if ( e )		669152	6					
ANR	669290	Condition	e	511:7:14560:14560	669152	0	True				
ANR	669291	Identifier	e		669152	0					
ANR	669292	ExpressionStatement	ramfs_enum_end ( e )	511:10:14563:14580	669152	1	True				
ANR	669293	CallExpression	ramfs_enum_end ( e )		669152	0					
ANR	669294	Callee	ramfs_enum_end		669152	0					
ANR	669295	Identifier	ramfs_enum_end		669152	0					
ANR	669296	ArgumentList	e		669152	1					
ANR	669297	Argument	e		669152	0					
ANR	669298	Identifier	e		669152	0					
ANR	669299	ReturnStatement	return NULL ;	512:4:14586:14597	669152	7	True				
ANR	669300	Identifier	NULL		669152	0					
ANR	669301	ReturnType	static file_enum *		669152	1					
ANR	669302	Identifier	ram_enumerate_init		669152	2					
ANR	669303	ParameterList	"gx_io_device * iodev , const char * pat , uint patlen , gs_memory_t * mem"		669152	3					
ANR	669304	Parameter	gx_io_device * iodev	488:19:13833:13851	669152	0	True				
ANR	669305	ParameterType	gx_io_device *		669152	0					
ANR	669306	Identifier	iodev		669152	1					
ANR	669307	Parameter	const char * pat	488:40:13854:13868	669152	1	True				
ANR	669308	ParameterType	const char *		669152	0					
ANR	669309	Identifier	pat		669152	1					
ANR	669310	Parameter	uint patlen	488:57:13871:13881	669152	2	True				
ANR	669311	ParameterType	uint		669152	0					
ANR	669312	Identifier	patlen		669152	1					
ANR	669313	Parameter	gs_memory_t * mem	489:4:13888:13903	669152	3	True				
ANR	669314	ParameterType	gs_memory_t *		669152	0					
ANR	669315	Identifier	mem		669152	1					
ANR	669316	CFGEntryNode	ENTRY		669152		True				
ANR	669317	CFGExitNode	EXIT		669152		True				
ANR	669318	Symbol	* penum		669152						
ANR	669319	Symbol	pat		669152						
ANR	669320	Symbol	gs_alloc_bytes		669152						
ANR	669321	Symbol	* pattern		669152						
ANR	669322	Symbol	NULL		669152						
ANR	669323	Symbol	penum -> memory		669152						
ANR	669324	Symbol	e		669152						
ANR	669325	Symbol	* iodev		669152						
ANR	669326	Symbol	gs_alloc_struct		669152						
ANR	669327	Symbol	penum		669152						
ANR	669328	Symbol	pattern		669152						
ANR	669329	Symbol	& st_gsram_enum		669152						
ANR	669330	Symbol	* patlen		669152						
ANR	669331	Symbol	GETRAMFS		669152						
ANR	669332	Symbol	ramfs_enum_new		669152						
ANR	669333	Symbol	penum -> e		669152						
ANR	669334	Symbol	iodev		669152						
ANR	669335	Symbol	mem		669152						
ANR	669336	Symbol	penum -> pattern		669152						
ANR	669337	Symbol	iodev -> state		669152						
ANR	669338	Symbol	gsram_enum		669152						
ANR	669339	Symbol	patlen		669152						
ANR	669340	Function	ram_enumerate_close	515:0:14602:14898							
ANR	669341	FunctionDef	ram_enumerate_close (file_enum * pfen)		669340	0					
ANR	669342	CompoundStatement		517:0:14651:14898	669340	0					
ANR	669343	IdentifierDeclStatement	gsram_enum * penum = ( gsram_enum * ) pfen ;	518:4:14657:14695	669340	0	True				
ANR	669344	IdentifierDecl	* penum = ( gsram_enum * ) pfen		669340	0					
ANR	669345	IdentifierDeclType	gsram_enum *		669340	0					
ANR	669346	Identifier	penum		669340	1					
ANR	669347	AssignmentExpression	* penum = ( gsram_enum * ) pfen		669340	2		=			
ANR	669348	Identifier	penum		669340	0					
ANR	669349	CastExpression	( gsram_enum * ) pfen		669340	1					
ANR	669350	CastTarget	gsram_enum *		669340	0					
ANR	669351	Identifier	pfen		669340	1					
ANR	669352	IdentifierDeclStatement	gs_memory_t * mem = penum -> memory ;	519:4:14701:14733	669340	1	True				
ANR	669353	IdentifierDecl	* mem = penum -> memory		669340	0					
ANR	669354	IdentifierDeclType	gs_memory_t *		669340	0					
ANR	669355	Identifier	mem		669340	1					
ANR	669356	AssignmentExpression	* mem = penum -> memory		669340	2		=			
ANR	669357	Identifier	mem		669340	0					
ANR	669358	PtrMemberAccess	penum -> memory		669340	1					
ANR	669359	Identifier	penum		669340	0					
ANR	669360	Identifier	memory		669340	1					
ANR	669361	ExpressionStatement	ramfs_enum_end ( penum -> e )	521:4:14740:14764	669340	2	True				
ANR	669362	CallExpression	ramfs_enum_end ( penum -> e )		669340	0					
ANR	669363	Callee	ramfs_enum_end		669340	0					
ANR	669364	Identifier	ramfs_enum_end		669340	0					
ANR	669365	ArgumentList	penum -> e		669340	1					
ANR	669366	Argument	penum -> e		669340	0					
ANR	669367	PtrMemberAccess	penum -> e		669340	0					
ANR	669368	Identifier	penum		669340	0					
ANR	669369	Identifier	e		669340	1					
ANR	669370	ExpressionStatement	"gs_free_object ( mem , penum -> pattern , ""ramfs_enum_init(pattern)"" )"	522:4:14770:14833	669340	3	True				
ANR	669371	CallExpression	"gs_free_object ( mem , penum -> pattern , ""ramfs_enum_init(pattern)"" )"		669340	0					
ANR	669372	Callee	gs_free_object		669340	0					
ANR	669373	Identifier	gs_free_object		669340	0					
ANR	669374	ArgumentList	mem		669340	1					
ANR	669375	Argument	mem		669340	0					
ANR	669376	Identifier	mem		669340	0					
ANR	669377	Argument	penum -> pattern		669340	1					
ANR	669378	PtrMemberAccess	penum -> pattern		669340	0					
ANR	669379	Identifier	penum		669340	0					
ANR	669380	Identifier	pattern		669340	1					
ANR	669381	Argument	"""ramfs_enum_init(pattern)"""		669340	2					
ANR	669382	PrimaryExpression	"""ramfs_enum_init(pattern)"""		669340	0					
ANR	669383	ExpressionStatement	"gs_free_object ( mem , penum , ""ramfs_enum_init(ramfs_enum)"" )"	523:4:14839:14896	669340	4	True				
ANR	669384	CallExpression	"gs_free_object ( mem , penum , ""ramfs_enum_init(ramfs_enum)"" )"		669340	0					
ANR	669385	Callee	gs_free_object		669340	0					
ANR	669386	Identifier	gs_free_object		669340	0					
ANR	669387	ArgumentList	mem		669340	1					
ANR	669388	Argument	mem		669340	0					
ANR	669389	Identifier	mem		669340	0					
ANR	669390	Argument	penum		669340	1					
ANR	669391	Identifier	penum		669340	0					
ANR	669392	Argument	"""ramfs_enum_init(ramfs_enum)"""		669340	2					
ANR	669393	PrimaryExpression	"""ramfs_enum_init(ramfs_enum)"""		669340	0					
ANR	669394	ReturnType	static void		669340	1					
ANR	669395	Identifier	ram_enumerate_close		669340	2					
ANR	669396	ParameterList	file_enum * pfen		669340	3					
ANR	669397	Parameter	file_enum * pfen	516:20:14634:14648	669340	0	True				
ANR	669398	ParameterType	file_enum *		669340	0					
ANR	669399	Identifier	pfen		669340	1					
ANR	669400	CFGEntryNode	ENTRY		669340		True				
ANR	669401	CFGExitNode	EXIT		669340		True				
ANR	669402	Symbol	* penum		669340						
ANR	669403	Symbol	penum -> e		669340						
ANR	669404	Symbol	mem		669340						
ANR	669405	Symbol	penum -> memory		669340						
ANR	669406	Symbol	penum -> pattern		669340						
ANR	669407	Symbol	penum		669340						
ANR	669408	Symbol	pfen		669340						
ANR	669409	Function	ram_enumerate_next	526:0:14901:15504							
ANR	669410	FunctionDef	"ram_enumerate_next (file_enum * pfen , char * ptr , uint maxlen)"		669409	0					
ANR	669411	CompoundStatement		528:0:14973:15504	669409	0					
ANR	669412	IdentifierDeclStatement	gsram_enum * penum = ( gsram_enum * ) pfen ;	529:4:14979:15017	669409	0	True				
ANR	669413	IdentifierDecl	* penum = ( gsram_enum * ) pfen		669409	0					
ANR	669414	IdentifierDeclType	gsram_enum *		669409	0					
ANR	669415	Identifier	penum		669409	1					
ANR	669416	AssignmentExpression	* penum = ( gsram_enum * ) pfen		669409	2		=			
ANR	669417	Identifier	penum		669409	0					
ANR	669418	CastExpression	( gsram_enum * ) pfen		669409	1					
ANR	669419	CastTarget	gsram_enum *		669409	0					
ANR	669420	Identifier	pfen		669409	1					
ANR	669421	IdentifierDeclStatement	char * filename ;	531:4:15024:15039	669409	1	True				
ANR	669422	IdentifierDecl	* filename		669409	0					
ANR	669423	IdentifierDeclType	char *		669409	0					
ANR	669424	Identifier	filename		669409	1					
ANR	669425	WhileStatement	while ( ( filename = ramfs_enum_next ( penum -> e ) ) )		669409	2					
ANR	669426	Condition	filename = ramfs_enum_next ( penum -> e )	532:11:15052:15089	669409	0	True				
ANR	669427	AssignmentExpression	filename = ramfs_enum_next ( penum -> e )		669409	0		=			
ANR	669428	Identifier	filename		669409	0					
ANR	669429	CallExpression	ramfs_enum_next ( penum -> e )		669409	1					
ANR	669430	Callee	ramfs_enum_next		669409	0					
ANR	669431	Identifier	ramfs_enum_next		669409	0					
ANR	669432	ArgumentList	penum -> e		669409	1					
ANR	669433	Argument	penum -> e		669409	0					
ANR	669434	PtrMemberAccess	penum -> e		669409	0					
ANR	669435	Identifier	penum		669409	0					
ANR	669436	Identifier	e		669409	1					
ANR	669437	CompoundStatement		5:51:118:118	669409	1					
ANR	669438	IfStatement	"if ( string_match ( ( byte * ) filename , strlen ( filename ) , ( byte * ) penum -> pattern , strlen ( penum -> pattern ) , 0 ) )"		669409	0					
ANR	669439	Condition	"string_match ( ( byte * ) filename , strlen ( filename ) , ( byte * ) penum -> pattern , strlen ( penum -> pattern ) , 0 )"	533:8:15102:15216	669409	0	True				
ANR	669440	CallExpression	"string_match ( ( byte * ) filename , strlen ( filename ) , ( byte * ) penum -> pattern , strlen ( penum -> pattern ) , 0 )"		669409	0					
ANR	669441	Callee	string_match		669409	0					
ANR	669442	Identifier	string_match		669409	0					
ANR	669443	ArgumentList	( byte * ) filename		669409	1					
ANR	669444	Argument	( byte * ) filename		669409	0					
ANR	669445	CastExpression	( byte * ) filename		669409	0					
ANR	669446	CastTarget	byte *		669409	0					
ANR	669447	Identifier	filename		669409	1					
ANR	669448	Argument	strlen ( filename )		669409	1					
ANR	669449	CallExpression	strlen ( filename )		669409	0					
ANR	669450	Callee	strlen		669409	0					
ANR	669451	Identifier	strlen		669409	0					
ANR	669452	ArgumentList	filename		669409	1					
ANR	669453	Argument	filename		669409	0					
ANR	669454	Identifier	filename		669409	0					
ANR	669455	Argument	( byte * ) penum -> pattern		669409	2					
ANR	669456	CastExpression	( byte * ) penum -> pattern		669409	0					
ANR	669457	CastTarget	byte *		669409	0					
ANR	669458	PtrMemberAccess	penum -> pattern		669409	1					
ANR	669459	Identifier	penum		669409	0					
ANR	669460	Identifier	pattern		669409	1					
ANR	669461	Argument	strlen ( penum -> pattern )		669409	3					
ANR	669462	CallExpression	strlen ( penum -> pattern )		669409	0					
ANR	669463	Callee	strlen		669409	0					
ANR	669464	Identifier	strlen		669409	0					
ANR	669465	ArgumentList	penum -> pattern		669409	1					
ANR	669466	Argument	penum -> pattern		669409	0					
ANR	669467	PtrMemberAccess	penum -> pattern		669409	0					
ANR	669468	Identifier	penum		669409	0					
ANR	669469	Identifier	pattern		669409	1					
ANR	669470	Argument	0		669409	4					
ANR	669471	PrimaryExpression	0		669409	0					
ANR	669472	CompoundStatement		8:36:245:245	669409	1					
ANR	669473	IfStatement	if ( strlen ( filename ) < maxlen )		669409	0					
ANR	669474	Condition	strlen ( filename ) < maxlen	536:12:15233:15257	669409	0	True				
ANR	669475	RelationalExpression	strlen ( filename ) < maxlen		669409	0		<			
ANR	669476	CallExpression	strlen ( filename )		669409	0					
ANR	669477	Callee	strlen		669409	0					
ANR	669478	Identifier	strlen		669409	0					
ANR	669479	ArgumentList	filename		669409	1					
ANR	669480	Argument	filename		669409	0					
ANR	669481	Identifier	filename		669409	0					
ANR	669482	Identifier	maxlen		669409	1					
ANR	669483	ExpressionStatement	"memcpy ( ptr , filename , strlen ( filename ) )"	537:8:15268:15307	669409	1	True				
ANR	669484	CallExpression	"memcpy ( ptr , filename , strlen ( filename ) )"		669409	0					
ANR	669485	Callee	memcpy		669409	0					
ANR	669486	Identifier	memcpy		669409	0					
ANR	669487	ArgumentList	ptr		669409	1					
ANR	669488	Argument	ptr		669409	0					
ANR	669489	Identifier	ptr		669409	0					
ANR	669490	Argument	filename		669409	1					
ANR	669491	Identifier	filename		669409	0					
ANR	669492	Argument	strlen ( filename )		669409	2					
ANR	669493	CallExpression	strlen ( filename )		669409	0					
ANR	669494	Callee	strlen		669409	0					
ANR	669495	Identifier	strlen		669409	0					
ANR	669496	ArgumentList	filename		669409	1					
ANR	669497	Argument	filename		669409	0					
ANR	669498	Identifier	filename		669409	0					
ANR	669499	ReturnStatement	return strlen ( filename ) ;	538:8:15317:15340	669409	1	True				
ANR	669500	CallExpression	strlen ( filename )		669409	0					
ANR	669501	Callee	strlen		669409	0					
ANR	669502	Identifier	strlen		669409	0					
ANR	669503	ArgumentList	filename		669409	1					
ANR	669504	Argument	filename		669409	0					
ANR	669505	Identifier	filename		669409	0					
ANR	669506	ExpressionStatement	ram_enumerate_close ( pfen )	542:4:15456:15481	669409	3	True				
ANR	669507	CallExpression	ram_enumerate_close ( pfen )		669409	0					
ANR	669508	Callee	ram_enumerate_close		669409	0					
ANR	669509	Identifier	ram_enumerate_close		669409	0					
ANR	669510	ArgumentList	pfen		669409	1					
ANR	669511	Argument	pfen		669409	0					
ANR	669512	Identifier	pfen		669409	0					
ANR	669513	ReturnStatement	return ~ ( uint ) 0 ;	543:4:15487:15502	669409	4	True				
ANR	669514	UnaryOperationExpression	~ ( uint ) 0		669409	0					
ANR	669515	UnaryOperator	~		669409	0					
ANR	669516	CastExpression	( uint ) 0		669409	1					
ANR	669517	CastTarget	uint		669409	0					
ANR	669518	PrimaryExpression	0		669409	1					
ANR	669519	ReturnType	static uint		669409	1					
ANR	669520	Identifier	ram_enumerate_next		669409	2					
ANR	669521	ParameterList	"file_enum * pfen , char * ptr , uint maxlen"		669409	3					
ANR	669522	Parameter	file_enum * pfen	527:19:14932:14946	669409	0	True				
ANR	669523	ParameterType	file_enum *		669409	0					
ANR	669524	Identifier	pfen		669409	1					
ANR	669525	Parameter	char * ptr	527:36:14949:14957	669409	1	True				
ANR	669526	ParameterType	char *		669409	0					
ANR	669527	Identifier	ptr		669409	1					
ANR	669528	Parameter	uint maxlen	527:47:14960:14970	669409	2	True				
ANR	669529	ParameterType	uint		669409	0					
ANR	669530	Identifier	maxlen		669409	1					
ANR	669531	CFGEntryNode	ENTRY		669409		True				
ANR	669532	CFGExitNode	EXIT		669409		True				
ANR	669533	Symbol	* penum		669409						
ANR	669534	Symbol	penum -> e		669409						
ANR	669535	Symbol	strlen		669409						
ANR	669536	Symbol	filename		669409						
ANR	669537	Symbol	penum -> pattern		669409						
ANR	669538	Symbol	string_match		669409						
ANR	669539	Symbol	penum		669409						
ANR	669540	Symbol	pfen		669409						
ANR	669541	Symbol	ramfs_enum_next		669409						
ANR	669542	Symbol	maxlen		669409						
ANR	669543	Symbol	ptr		669409						
ANR	669544	Function	ram_get_params	546:0:15507:16602							
ANR	669545	FunctionDef	"ram_get_params (gx_io_device * iodev , gs_param_list * plist)"		669544	0					
ANR	669546	CompoundStatement		548:0:15578:16602	669544	0					
ANR	669547	IdentifierDeclStatement	int code ;	549:4:15584:15592	669544	0	True				
ANR	669548	IdentifierDecl	code		669544	0					
ANR	669549	IdentifierDeclType	int		669544	0					
ANR	669550	Identifier	code		669544	1					
ANR	669551	IdentifierDeclStatement	"int i0 = 0 , so = 1 ;"	550:4:15598:15616	669544	1	True				
ANR	669552	IdentifierDecl	i0 = 0		669544	0					
ANR	669553	IdentifierDeclType	int		669544	0					
ANR	669554	Identifier	i0		669544	1					
ANR	669555	AssignmentExpression	i0 = 0		669544	2		=			
ANR	669556	Identifier	i0		669544	0					
ANR	669557	PrimaryExpression	0		669544	1					
ANR	669558	IdentifierDecl	so = 1		669544	1					
ANR	669559	IdentifierDeclType	int		669544	0					
ANR	669560	Identifier	so		669544	1					
ANR	669561	AssignmentExpression	so = 1		669544	2		=			
ANR	669562	Identifier	so		669544	0					
ANR	669563	PrimaryExpression	1		669544	1					
ANR	669564	IdentifierDeclStatement	"bool btrue = true , bfalse = false ;"	551:4:15622:15655	669544	2	True				
ANR	669565	IdentifierDecl	btrue = true		669544	0					
ANR	669566	IdentifierDeclType	bool		669544	0					
ANR	669567	Identifier	btrue		669544	1					
ANR	669568	AssignmentExpression	btrue = true		669544	2		=			
ANR	669569	Identifier	true		669544	0					
ANR	669570	Identifier	true		669544	1					
ANR	669571	IdentifierDecl	bfalse = false		669544	1					
ANR	669572	IdentifierDeclType	bool		669544	0					
ANR	669573	Identifier	bfalse		669544	1					
ANR	669574	AssignmentExpression	bfalse = false		669544	2		=			
ANR	669575	Identifier	false		669544	0					
ANR	669576	Identifier	false		669544	1					
ANR	669577	IdentifierDeclStatement	ramfs * fs = GETRAMFS ( iodev -> state ) ;	552:4:15661:15695	669544	3	True				
ANR	669578	IdentifierDecl	* fs = GETRAMFS ( iodev -> state )		669544	0					
ANR	669579	IdentifierDeclType	ramfs *		669544	0					
ANR	669580	Identifier	fs		669544	1					
ANR	669581	AssignmentExpression	* fs = GETRAMFS ( iodev -> state )		669544	2		=			
ANR	669582	Identifier	fs		669544	0					
ANR	669583	CallExpression	GETRAMFS ( iodev -> state )		669544	1					
ANR	669584	Callee	GETRAMFS		669544	0					
ANR	669585	Identifier	GETRAMFS		669544	0					
ANR	669586	ArgumentList	iodev -> state		669544	1					
ANR	669587	Argument	iodev -> state		669544	0					
ANR	669588	PtrMemberAccess	iodev -> state		669544	0					
ANR	669589	Identifier	iodev		669544	0					
ANR	669590	Identifier	state		669544	1					
ANR	669591	IdentifierDeclStatement	int BlockSize ;	553:4:15701:15714	669544	4	True				
ANR	669592	IdentifierDecl	BlockSize		669544	0					
ANR	669593	IdentifierDeclType	int		669544	0					
ANR	669594	Identifier	BlockSize		669544	1					
ANR	669595	IdentifierDeclStatement	"long Free , LogicalSize ;"	554:4:15720:15742	669544	5	True				
ANR	669596	IdentifierDecl	Free		669544	0					
ANR	669597	IdentifierDeclType	long		669544	0					
ANR	669598	Identifier	Free		669544	1					
ANR	669599	IdentifierDecl	LogicalSize		669544	1					
ANR	669600	IdentifierDeclType	long		669544	0					
ANR	669601	Identifier	LogicalSize		669544	1					
ANR	669602	ExpressionStatement	BlockSize = ramfs_blocksize ( fs )	556:4:15749:15780	669544	6	True				
ANR	669603	AssignmentExpression	BlockSize = ramfs_blocksize ( fs )		669544	0		=			
ANR	669604	Identifier	BlockSize		669544	0					
ANR	669605	CallExpression	ramfs_blocksize ( fs )		669544	1					
ANR	669606	Callee	ramfs_blocksize		669544	0					
ANR	669607	Identifier	ramfs_blocksize		669544	0					
ANR	669608	ArgumentList	fs		669544	1					
ANR	669609	Argument	fs		669544	0					
ANR	669610	Identifier	fs		669544	0					
ANR	669611	ExpressionStatement	LogicalSize = MAXBLOCKS	557:4:15786:15809	669544	7	True				
ANR	669612	AssignmentExpression	LogicalSize = MAXBLOCKS		669544	0		=			
ANR	669613	Identifier	LogicalSize		669544	0					
ANR	669614	Identifier	MAXBLOCKS		669544	1					
ANR	669615	ExpressionStatement	Free = ramfs_blocksfree ( fs )	558:4:15815:15842	669544	8	True				
ANR	669616	AssignmentExpression	Free = ramfs_blocksfree ( fs )		669544	0		=			
ANR	669617	Identifier	Free		669544	0					
ANR	669618	CallExpression	ramfs_blocksfree ( fs )		669544	1					
ANR	669619	Callee	ramfs_blocksfree		669544	0					
ANR	669620	Identifier	ramfs_blocksfree		669544	0					
ANR	669621	ArgumentList	fs		669544	1					
ANR	669622	Argument	fs		669544	0					
ANR	669623	Identifier	fs		669544	0					
ANR	669624	IfStatement	"if ( ( code = param_write_bool ( plist , ""HasNames"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""BlockSize"" , & BlockSize ) ) < 0 || ( code = param_write_long ( plist , ""Free"" , & Free ) ) < 0 || ( code = param_write_int ( plist , ""InitializeAction"" , & i0 ) ) < 0 || ( code = param_write_bool ( plist , ""Mounted"" , & btrue ) ) < 0 || ( code = param_write_bool ( plist , ""Removable"" , & bfalse ) ) < 0 || ( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0 )"		669544	9					
ANR	669625	Condition	"( code = param_write_bool ( plist , ""HasNames"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""BlockSize"" , & BlockSize ) ) < 0 || ( code = param_write_long ( plist , ""Free"" , & Free ) ) < 0 || ( code = param_write_int ( plist , ""InitializeAction"" , & i0 ) ) < 0 || ( code = param_write_bool ( plist , ""Mounted"" , & btrue ) ) < 0 || ( code = param_write_bool ( plist , ""Removable"" , & bfalse ) ) < 0 || ( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"	561:4:15858:16563	669544	0	True				
ANR	669626	OrExpression	"( code = param_write_bool ( plist , ""HasNames"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""BlockSize"" , & BlockSize ) ) < 0 || ( code = param_write_long ( plist , ""Free"" , & Free ) ) < 0 || ( code = param_write_int ( plist , ""InitializeAction"" , & i0 ) ) < 0 || ( code = param_write_bool ( plist , ""Mounted"" , & btrue ) ) < 0 || ( code = param_write_bool ( plist , ""Removable"" , & bfalse ) ) < 0 || ( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	0		||			
ANR	669627	RelationalExpression	"( code = param_write_bool ( plist , ""HasNames"" , & btrue ) ) < 0"		669544	0		<			
ANR	669628	AssignmentExpression	"code = param_write_bool ( plist , ""HasNames"" , & btrue )"		669544	0		=			
ANR	669629	Identifier	code		669544	0					
ANR	669630	CallExpression	"param_write_bool ( plist , ""HasNames"" , & btrue )"		669544	1					
ANR	669631	Callee	param_write_bool		669544	0					
ANR	669632	Identifier	param_write_bool		669544	0					
ANR	669633	ArgumentList	plist		669544	1					
ANR	669634	Argument	plist		669544	0					
ANR	669635	Identifier	plist		669544	0					
ANR	669636	Argument	"""HasNames"""		669544	1					
ANR	669637	PrimaryExpression	"""HasNames"""		669544	0					
ANR	669638	Argument	& btrue		669544	2					
ANR	669639	UnaryOperationExpression	& btrue		669544	0					
ANR	669640	UnaryOperator	&		669544	0					
ANR	669641	Identifier	btrue		669544	1					
ANR	669642	PrimaryExpression	0		669544	1					
ANR	669643	OrExpression	"( code = param_write_int ( plist , ""BlockSize"" , & BlockSize ) ) < 0 || ( code = param_write_long ( plist , ""Free"" , & Free ) ) < 0 || ( code = param_write_int ( plist , ""InitializeAction"" , & i0 ) ) < 0 || ( code = param_write_bool ( plist , ""Mounted"" , & btrue ) ) < 0 || ( code = param_write_bool ( plist , ""Removable"" , & bfalse ) ) < 0 || ( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	1		||			
ANR	669644	RelationalExpression	"( code = param_write_int ( plist , ""BlockSize"" , & BlockSize ) ) < 0"		669544	0		<			
ANR	669645	AssignmentExpression	"code = param_write_int ( plist , ""BlockSize"" , & BlockSize )"		669544	0		=			
ANR	669646	Identifier	code		669544	0					
ANR	669647	CallExpression	"param_write_int ( plist , ""BlockSize"" , & BlockSize )"		669544	1					
ANR	669648	Callee	param_write_int		669544	0					
ANR	669649	Identifier	param_write_int		669544	0					
ANR	669650	ArgumentList	plist		669544	1					
ANR	669651	Argument	plist		669544	0					
ANR	669652	Identifier	plist		669544	0					
ANR	669653	Argument	"""BlockSize"""		669544	1					
ANR	669654	PrimaryExpression	"""BlockSize"""		669544	0					
ANR	669655	Argument	& BlockSize		669544	2					
ANR	669656	UnaryOperationExpression	& BlockSize		669544	0					
ANR	669657	UnaryOperator	&		669544	0					
ANR	669658	Identifier	BlockSize		669544	1					
ANR	669659	PrimaryExpression	0		669544	1					
ANR	669660	OrExpression	"( code = param_write_long ( plist , ""Free"" , & Free ) ) < 0 || ( code = param_write_int ( plist , ""InitializeAction"" , & i0 ) ) < 0 || ( code = param_write_bool ( plist , ""Mounted"" , & btrue ) ) < 0 || ( code = param_write_bool ( plist , ""Removable"" , & bfalse ) ) < 0 || ( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	1		||			
ANR	669661	RelationalExpression	"( code = param_write_long ( plist , ""Free"" , & Free ) ) < 0"		669544	0		<			
ANR	669662	AssignmentExpression	"code = param_write_long ( plist , ""Free"" , & Free )"		669544	0		=			
ANR	669663	Identifier	code		669544	0					
ANR	669664	CallExpression	"param_write_long ( plist , ""Free"" , & Free )"		669544	1					
ANR	669665	Callee	param_write_long		669544	0					
ANR	669666	Identifier	param_write_long		669544	0					
ANR	669667	ArgumentList	plist		669544	1					
ANR	669668	Argument	plist		669544	0					
ANR	669669	Identifier	plist		669544	0					
ANR	669670	Argument	"""Free"""		669544	1					
ANR	669671	PrimaryExpression	"""Free"""		669544	0					
ANR	669672	Argument	& Free		669544	2					
ANR	669673	UnaryOperationExpression	& Free		669544	0					
ANR	669674	UnaryOperator	&		669544	0					
ANR	669675	Identifier	Free		669544	1					
ANR	669676	PrimaryExpression	0		669544	1					
ANR	669677	OrExpression	"( code = param_write_int ( plist , ""InitializeAction"" , & i0 ) ) < 0 || ( code = param_write_bool ( plist , ""Mounted"" , & btrue ) ) < 0 || ( code = param_write_bool ( plist , ""Removable"" , & bfalse ) ) < 0 || ( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	1		||			
ANR	669678	RelationalExpression	"( code = param_write_int ( plist , ""InitializeAction"" , & i0 ) ) < 0"		669544	0		<			
ANR	669679	AssignmentExpression	"code = param_write_int ( plist , ""InitializeAction"" , & i0 )"		669544	0		=			
ANR	669680	Identifier	code		669544	0					
ANR	669681	CallExpression	"param_write_int ( plist , ""InitializeAction"" , & i0 )"		669544	1					
ANR	669682	Callee	param_write_int		669544	0					
ANR	669683	Identifier	param_write_int		669544	0					
ANR	669684	ArgumentList	plist		669544	1					
ANR	669685	Argument	plist		669544	0					
ANR	669686	Identifier	plist		669544	0					
ANR	669687	Argument	"""InitializeAction"""		669544	1					
ANR	669688	PrimaryExpression	"""InitializeAction"""		669544	0					
ANR	669689	Argument	& i0		669544	2					
ANR	669690	UnaryOperationExpression	& i0		669544	0					
ANR	669691	UnaryOperator	&		669544	0					
ANR	669692	Identifier	i0		669544	1					
ANR	669693	PrimaryExpression	0		669544	1					
ANR	669694	OrExpression	"( code = param_write_bool ( plist , ""Mounted"" , & btrue ) ) < 0 || ( code = param_write_bool ( plist , ""Removable"" , & bfalse ) ) < 0 || ( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	1		||			
ANR	669695	RelationalExpression	"( code = param_write_bool ( plist , ""Mounted"" , & btrue ) ) < 0"		669544	0		<			
ANR	669696	AssignmentExpression	"code = param_write_bool ( plist , ""Mounted"" , & btrue )"		669544	0		=			
ANR	669697	Identifier	code		669544	0					
ANR	669698	CallExpression	"param_write_bool ( plist , ""Mounted"" , & btrue )"		669544	1					
ANR	669699	Callee	param_write_bool		669544	0					
ANR	669700	Identifier	param_write_bool		669544	0					
ANR	669701	ArgumentList	plist		669544	1					
ANR	669702	Argument	plist		669544	0					
ANR	669703	Identifier	plist		669544	0					
ANR	669704	Argument	"""Mounted"""		669544	1					
ANR	669705	PrimaryExpression	"""Mounted"""		669544	0					
ANR	669706	Argument	& btrue		669544	2					
ANR	669707	UnaryOperationExpression	& btrue		669544	0					
ANR	669708	UnaryOperator	&		669544	0					
ANR	669709	Identifier	btrue		669544	1					
ANR	669710	PrimaryExpression	0		669544	1					
ANR	669711	OrExpression	"( code = param_write_bool ( plist , ""Removable"" , & bfalse ) ) < 0 || ( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	1		||			
ANR	669712	RelationalExpression	"( code = param_write_bool ( plist , ""Removable"" , & bfalse ) ) < 0"		669544	0		<			
ANR	669713	AssignmentExpression	"code = param_write_bool ( plist , ""Removable"" , & bfalse )"		669544	0		=			
ANR	669714	Identifier	code		669544	0					
ANR	669715	CallExpression	"param_write_bool ( plist , ""Removable"" , & bfalse )"		669544	1					
ANR	669716	Callee	param_write_bool		669544	0					
ANR	669717	Identifier	param_write_bool		669544	0					
ANR	669718	ArgumentList	plist		669544	1					
ANR	669719	Argument	plist		669544	0					
ANR	669720	Identifier	plist		669544	0					
ANR	669721	Argument	"""Removable"""		669544	1					
ANR	669722	PrimaryExpression	"""Removable"""		669544	0					
ANR	669723	Argument	& bfalse		669544	2					
ANR	669724	UnaryOperationExpression	& bfalse		669544	0					
ANR	669725	UnaryOperator	&		669544	0					
ANR	669726	Identifier	bfalse		669544	1					
ANR	669727	PrimaryExpression	0		669544	1					
ANR	669728	OrExpression	"( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0 || ( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	1		||			
ANR	669729	RelationalExpression	"( code = param_write_bool ( plist , ""Searchable"" , & btrue ) ) < 0"		669544	0		<			
ANR	669730	AssignmentExpression	"code = param_write_bool ( plist , ""Searchable"" , & btrue )"		669544	0		=			
ANR	669731	Identifier	code		669544	0					
ANR	669732	CallExpression	"param_write_bool ( plist , ""Searchable"" , & btrue )"		669544	1					
ANR	669733	Callee	param_write_bool		669544	0					
ANR	669734	Identifier	param_write_bool		669544	0					
ANR	669735	ArgumentList	plist		669544	1					
ANR	669736	Argument	plist		669544	0					
ANR	669737	Identifier	plist		669544	0					
ANR	669738	Argument	"""Searchable"""		669544	1					
ANR	669739	PrimaryExpression	"""Searchable"""		669544	0					
ANR	669740	Argument	& btrue		669544	2					
ANR	669741	UnaryOperationExpression	& btrue		669544	0					
ANR	669742	UnaryOperator	&		669544	0					
ANR	669743	Identifier	btrue		669544	1					
ANR	669744	PrimaryExpression	0		669544	1					
ANR	669745	OrExpression	"( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0 || ( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	1		||			
ANR	669746	RelationalExpression	"( code = param_write_int ( plist , ""SearchOrder"" , & so ) ) < 0"		669544	0		<			
ANR	669747	AssignmentExpression	"code = param_write_int ( plist , ""SearchOrder"" , & so )"		669544	0		=			
ANR	669748	Identifier	code		669544	0					
ANR	669749	CallExpression	"param_write_int ( plist , ""SearchOrder"" , & so )"		669544	1					
ANR	669750	Callee	param_write_int		669544	0					
ANR	669751	Identifier	param_write_int		669544	0					
ANR	669752	ArgumentList	plist		669544	1					
ANR	669753	Argument	plist		669544	0					
ANR	669754	Identifier	plist		669544	0					
ANR	669755	Argument	"""SearchOrder"""		669544	1					
ANR	669756	PrimaryExpression	"""SearchOrder"""		669544	0					
ANR	669757	Argument	& so		669544	2					
ANR	669758	UnaryOperationExpression	& so		669544	0					
ANR	669759	UnaryOperator	&		669544	0					
ANR	669760	Identifier	so		669544	1					
ANR	669761	PrimaryExpression	0		669544	1					
ANR	669762	OrExpression	"( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0 || ( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	1		||			
ANR	669763	RelationalExpression	"( code = param_write_bool ( plist , ""Writeable"" , & btrue ) ) < 0"		669544	0		<			
ANR	669764	AssignmentExpression	"code = param_write_bool ( plist , ""Writeable"" , & btrue )"		669544	0		=			
ANR	669765	Identifier	code		669544	0					
ANR	669766	CallExpression	"param_write_bool ( plist , ""Writeable"" , & btrue )"		669544	1					
ANR	669767	Callee	param_write_bool		669544	0					
ANR	669768	Identifier	param_write_bool		669544	0					
ANR	669769	ArgumentList	plist		669544	1					
ANR	669770	Argument	plist		669544	0					
ANR	669771	Identifier	plist		669544	0					
ANR	669772	Argument	"""Writeable"""		669544	1					
ANR	669773	PrimaryExpression	"""Writeable"""		669544	0					
ANR	669774	Argument	& btrue		669544	2					
ANR	669775	UnaryOperationExpression	& btrue		669544	0					
ANR	669776	UnaryOperator	&		669544	0					
ANR	669777	Identifier	btrue		669544	1					
ANR	669778	PrimaryExpression	0		669544	1					
ANR	669779	RelationalExpression	"( code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize ) ) < 0"		669544	1		<			
ANR	669780	AssignmentExpression	"code = param_write_long ( plist , ""LogicalSize"" , & LogicalSize )"		669544	0		=			
ANR	669781	Identifier	code		669544	0					
ANR	669782	CallExpression	"param_write_long ( plist , ""LogicalSize"" , & LogicalSize )"		669544	1					
ANR	669783	Callee	param_write_long		669544	0					
ANR	669784	Identifier	param_write_long		669544	0					
ANR	669785	ArgumentList	plist		669544	1					
ANR	669786	Argument	plist		669544	0					
ANR	669787	Identifier	plist		669544	0					
ANR	669788	Argument	"""LogicalSize"""		669544	1					
ANR	669789	PrimaryExpression	"""LogicalSize"""		669544	0					
ANR	669790	Argument	& LogicalSize		669544	2					
ANR	669791	UnaryOperationExpression	& LogicalSize		669544	0					
ANR	669792	UnaryOperator	&		669544	0					
ANR	669793	Identifier	LogicalSize		669544	1					
ANR	669794	PrimaryExpression	0		669544	1					
ANR	669795	ReturnStatement	return code ;	572:4:16575:16586	669544	1	True				
ANR	669796	Identifier	code		669544	0					
ANR	669797	ReturnStatement	return 0 ;	573:4:16592:16600	669544	10	True				
ANR	669798	PrimaryExpression	0		669544	0					
ANR	669799	ReturnType	static int		669544	1					
ANR	669800	Identifier	ram_get_params		669544	2					
ANR	669801	ParameterList	"gx_io_device * iodev , gs_param_list * plist"		669544	3					
ANR	669802	Parameter	gx_io_device * iodev	547:15:15533:15552	669544	0	True				
ANR	669803	ParameterType	gx_io_device *		669544	0					
ANR	669804	Identifier	iodev		669544	1					
ANR	669805	Parameter	gs_param_list * plist	547:37:15555:15575	669544	1	True				
ANR	669806	ParameterType	gs_param_list *		669544	0					
ANR	669807	Identifier	plist		669544	1					
ANR	669808	CFGEntryNode	ENTRY		669544		True				
ANR	669809	CFGExitNode	EXIT		669544		True				
ANR	669810	Symbol	& bfalse		669544						
ANR	669811	Symbol	code		669544						
ANR	669812	Symbol	LogicalSize		669544						
ANR	669813	Symbol	& BlockSize		669544						
ANR	669814	Symbol	bfalse		669544						
ANR	669815	Symbol	& so		669544						
ANR	669816	Symbol	fs		669544						
ANR	669817	Symbol	param_write_bool		669544						
ANR	669818	Symbol	plist		669544						
ANR	669819	Symbol	MAXBLOCKS		669544						
ANR	669820	Symbol	iodev		669544						
ANR	669821	Symbol	& btrue		669544						
ANR	669822	Symbol	so		669544						
ANR	669823	Symbol	param_write_int		669544						
ANR	669824	Symbol	& LogicalSize		669544						
ANR	669825	Symbol	* iodev		669544						
ANR	669826	Symbol	ramfs_blocksize		669544						
ANR	669827	Symbol	i0		669544						
ANR	669828	Symbol	false		669544						
ANR	669829	Symbol	btrue		669544						
ANR	669830	Symbol	Free		669544						
ANR	669831	Symbol	GETRAMFS		669544						
ANR	669832	Symbol	ramfs_blocksfree		669544						
ANR	669833	Symbol	& i0		669544						
ANR	669834	Symbol	true		669544						
ANR	669835	Symbol	iodev -> state		669544						
ANR	669836	Symbol	& Free		669544						
ANR	669837	Symbol	BlockSize		669544						
ANR	669838	Symbol	param_write_long		669544						
