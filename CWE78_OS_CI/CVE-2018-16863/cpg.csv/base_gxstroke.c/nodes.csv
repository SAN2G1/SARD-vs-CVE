command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1286917	File	data/converged/CVE-2018-16863_ghostpdl/base_gxstroke.c								
ANR	1286918	DeclStmt									
ANR	1286919	Decl							float	"float ( const gs_gstate * , gs_line_join )"	join_expansion_factor
ANR	1286920	Function	gx_stroke_path_expansion	104:0:3782:6726							
ANR	1286921	FunctionDef	"gx_stroke_path_expansion (const gs_gstate * pgs , const gx_path * ppath , gs_fixed_point * ppt)"		1286920	0					
ANR	1286922	CompoundStatement		107:0:3904:6726	1286920	0					
ANR	1286923	IdentifierDeclStatement	const subpath * psub = ppath -> first_subpath ;	108:4:3910:3952	1286920	0	True				
ANR	1286924	IdentifierDecl	* psub = ppath -> first_subpath		1286920	0					
ANR	1286925	IdentifierDeclType	const subpath *		1286920	0					
ANR	1286926	Identifier	psub		1286920	1					
ANR	1286927	AssignmentExpression	* psub = ppath -> first_subpath		1286920	2		=			
ANR	1286928	Identifier	psub		1286920	0					
ANR	1286929	PtrMemberAccess	ppath -> first_subpath		1286920	1					
ANR	1286930	Identifier	ppath		1286920	0					
ANR	1286931	Identifier	first_subpath		1286920	1					
ANR	1286932	IdentifierDeclStatement	const segment * pseg ;	109:4:3958:3977	1286920	1	True				
ANR	1286933	IdentifierDecl	* pseg		1286920	0					
ANR	1286934	IdentifierDeclType	const segment *		1286920	0					
ANR	1286935	Identifier	pseg		1286920	1					
ANR	1286936	IdentifierDeclStatement	double cx = fabs ( pgs -> ctm . xx ) + fabs ( pgs -> ctm . yx ) ;	110:4:3983:4032	1286920	2	True				
ANR	1286937	IdentifierDecl	cx = fabs ( pgs -> ctm . xx ) + fabs ( pgs -> ctm . yx )		1286920	0					
ANR	1286938	IdentifierDeclType	double		1286920	0					
ANR	1286939	Identifier	cx		1286920	1					
ANR	1286940	AssignmentExpression	cx = fabs ( pgs -> ctm . xx ) + fabs ( pgs -> ctm . yx )		1286920	2		=			
ANR	1286941	Identifier	cx		1286920	0					
ANR	1286942	AdditiveExpression	fabs ( pgs -> ctm . xx ) + fabs ( pgs -> ctm . yx )		1286920	1		+			
ANR	1286943	CallExpression	fabs ( pgs -> ctm . xx )		1286920	0					
ANR	1286944	Callee	fabs		1286920	0					
ANR	1286945	Identifier	fabs		1286920	0					
ANR	1286946	ArgumentList	pgs -> ctm . xx		1286920	1					
ANR	1286947	Argument	pgs -> ctm . xx		1286920	0					
ANR	1286948	MemberAccess	pgs -> ctm . xx		1286920	0					
ANR	1286949	PtrMemberAccess	pgs -> ctm		1286920	0					
ANR	1286950	Identifier	pgs		1286920	0					
ANR	1286951	Identifier	ctm		1286920	1					
ANR	1286952	Identifier	xx		1286920	1					
ANR	1286953	CallExpression	fabs ( pgs -> ctm . yx )		1286920	1					
ANR	1286954	Callee	fabs		1286920	0					
ANR	1286955	Identifier	fabs		1286920	0					
ANR	1286956	ArgumentList	pgs -> ctm . yx		1286920	1					
ANR	1286957	Argument	pgs -> ctm . yx		1286920	0					
ANR	1286958	MemberAccess	pgs -> ctm . yx		1286920	0					
ANR	1286959	PtrMemberAccess	pgs -> ctm		1286920	0					
ANR	1286960	Identifier	pgs		1286920	0					
ANR	1286961	Identifier	ctm		1286920	1					
ANR	1286962	Identifier	yx		1286920	1					
ANR	1286963	IdentifierDeclStatement	double cy = fabs ( pgs -> ctm . xy ) + fabs ( pgs -> ctm . yy ) ;	111:4:4038:4087	1286920	3	True				
ANR	1286964	IdentifierDecl	cy = fabs ( pgs -> ctm . xy ) + fabs ( pgs -> ctm . yy )		1286920	0					
ANR	1286965	IdentifierDeclType	double		1286920	0					
ANR	1286966	Identifier	cy		1286920	1					
ANR	1286967	AssignmentExpression	cy = fabs ( pgs -> ctm . xy ) + fabs ( pgs -> ctm . yy )		1286920	2		=			
ANR	1286968	Identifier	cy		1286920	0					
ANR	1286969	AdditiveExpression	fabs ( pgs -> ctm . xy ) + fabs ( pgs -> ctm . yy )		1286920	1		+			
ANR	1286970	CallExpression	fabs ( pgs -> ctm . xy )		1286920	0					
ANR	1286971	Callee	fabs		1286920	0					
ANR	1286972	Identifier	fabs		1286920	0					
ANR	1286973	ArgumentList	pgs -> ctm . xy		1286920	1					
ANR	1286974	Argument	pgs -> ctm . xy		1286920	0					
ANR	1286975	MemberAccess	pgs -> ctm . xy		1286920	0					
ANR	1286976	PtrMemberAccess	pgs -> ctm		1286920	0					
ANR	1286977	Identifier	pgs		1286920	0					
ANR	1286978	Identifier	ctm		1286920	1					
ANR	1286979	Identifier	xy		1286920	1					
ANR	1286980	CallExpression	fabs ( pgs -> ctm . yy )		1286920	1					
ANR	1286981	Callee	fabs		1286920	0					
ANR	1286982	Identifier	fabs		1286920	0					
ANR	1286983	ArgumentList	pgs -> ctm . yy		1286920	1					
ANR	1286984	Argument	pgs -> ctm . yy		1286920	0					
ANR	1286985	MemberAccess	pgs -> ctm . yy		1286920	0					
ANR	1286986	PtrMemberAccess	pgs -> ctm		1286920	0					
ANR	1286987	Identifier	pgs		1286920	0					
ANR	1286988	Identifier	ctm		1286920	1					
ANR	1286989	Identifier	yy		1286920	1					
ANR	1286990	IdentifierDeclStatement	double expand = pgs -> line_params . half_width ;	112:4:4093:4136	1286920	4	True				
ANR	1286991	IdentifierDecl	expand = pgs -> line_params . half_width		1286920	0					
ANR	1286992	IdentifierDeclType	double		1286920	0					
ANR	1286993	Identifier	expand		1286920	1					
ANR	1286994	AssignmentExpression	expand = pgs -> line_params . half_width		1286920	2		=			
ANR	1286995	Identifier	expand		1286920	0					
ANR	1286996	MemberAccess	pgs -> line_params . half_width		1286920	1					
ANR	1286997	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1286998	Identifier	pgs		1286920	0					
ANR	1286999	Identifier	line_params		1286920	1					
ANR	1287000	Identifier	half_width		1286920	1					
ANR	1287001	IdentifierDeclStatement	int result = 1 ;	113:4:4142:4156	1286920	5	True				
ANR	1287002	IdentifierDecl	result = 1		1286920	0					
ANR	1287003	IdentifierDeclType	int		1286920	0					
ANR	1287004	Identifier	result		1286920	1					
ANR	1287005	AssignmentExpression	result = 1		1286920	2		=			
ANR	1287006	Identifier	result		1286920	0					
ANR	1287007	PrimaryExpression	1		1286920	1					
ANR	1287008	IfStatement	if ( pgs -> line_params . start_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_square )		1286920	6					
ANR	1287009	Condition	pgs -> line_params . start_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_square	116:8:4229:4324	1286920	0	True				
ANR	1287010	OrExpression	pgs -> line_params . start_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_square		1286920	0		||			
ANR	1287011	EqualityExpression	pgs -> line_params . start_cap == gs_cap_square		1286920	0		==			
ANR	1287012	MemberAccess	pgs -> line_params . start_cap		1286920	0					
ANR	1287013	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287014	Identifier	pgs		1286920	0					
ANR	1287015	Identifier	line_params		1286920	1					
ANR	1287016	Identifier	start_cap		1286920	1					
ANR	1287017	Identifier	gs_cap_square		1286920	1					
ANR	1287018	EqualityExpression	pgs -> line_params . end_cap == gs_cap_square		1286920	1		==			
ANR	1287019	MemberAccess	pgs -> line_params . end_cap		1286920	0					
ANR	1287020	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287021	Identifier	pgs		1286920	0					
ANR	1287022	Identifier	line_params		1286920	1					
ANR	1287023	Identifier	end_cap		1286920	1					
ANR	1287024	Identifier	gs_cap_square		1286920	1					
ANR	1287025	ExpressionStatement	expand *= 1.414213562	118:12:4339:4360	1286920	1	True				
ANR	1287026	AssignmentExpression	expand *= 1.414213562		1286920	0		*=			
ANR	1287027	Identifier	expand		1286920	0					
ANR	1287028	PrimaryExpression	1.414213562		1286920	1					
ANR	1287029	IfStatement	"if ( is_fzero2 ( pgs -> ctm . xy , pgs -> ctm . yx ) || is_fzero2 ( pgs -> ctm . xx , pgs -> ctm . yy ) )"		1286920	7					
ANR	1287030	Condition	"is_fzero2 ( pgs -> ctm . xy , pgs -> ctm . yx ) || is_fzero2 ( pgs -> ctm . xx , pgs -> ctm . yy )"	121:8:4439:4520	1286920	0	True				
ANR	1287031	OrExpression	"is_fzero2 ( pgs -> ctm . xy , pgs -> ctm . yx ) || is_fzero2 ( pgs -> ctm . xx , pgs -> ctm . yy )"		1286920	0		||			
ANR	1287032	CallExpression	"is_fzero2 ( pgs -> ctm . xy , pgs -> ctm . yx )"		1286920	0					
ANR	1287033	Callee	is_fzero2		1286920	0					
ANR	1287034	Identifier	is_fzero2		1286920	0					
ANR	1287035	ArgumentList	pgs -> ctm . xy		1286920	1					
ANR	1287036	Argument	pgs -> ctm . xy		1286920	0					
ANR	1287037	MemberAccess	pgs -> ctm . xy		1286920	0					
ANR	1287038	PtrMemberAccess	pgs -> ctm		1286920	0					
ANR	1287039	Identifier	pgs		1286920	0					
ANR	1287040	Identifier	ctm		1286920	1					
ANR	1287041	Identifier	xy		1286920	1					
ANR	1287042	Argument	pgs -> ctm . yx		1286920	1					
ANR	1287043	MemberAccess	pgs -> ctm . yx		1286920	0					
ANR	1287044	PtrMemberAccess	pgs -> ctm		1286920	0					
ANR	1287045	Identifier	pgs		1286920	0					
ANR	1287046	Identifier	ctm		1286920	1					
ANR	1287047	Identifier	yx		1286920	1					
ANR	1287048	CallExpression	"is_fzero2 ( pgs -> ctm . xx , pgs -> ctm . yy )"		1286920	1					
ANR	1287049	Callee	is_fzero2		1286920	0					
ANR	1287050	Identifier	is_fzero2		1286920	0					
ANR	1287051	ArgumentList	pgs -> ctm . xx		1286920	1					
ANR	1287052	Argument	pgs -> ctm . xx		1286920	0					
ANR	1287053	MemberAccess	pgs -> ctm . xx		1286920	0					
ANR	1287054	PtrMemberAccess	pgs -> ctm		1286920	0					
ANR	1287055	Identifier	pgs		1286920	0					
ANR	1287056	Identifier	ctm		1286920	1					
ANR	1287057	Identifier	xx		1286920	1					
ANR	1287058	Argument	pgs -> ctm . yy		1286920	1					
ANR	1287059	MemberAccess	pgs -> ctm . yy		1286920	0					
ANR	1287060	PtrMemberAccess	pgs -> ctm		1286920	0					
ANR	1287061	Identifier	pgs		1286920	0					
ANR	1287062	Identifier	ctm		1286920	1					
ANR	1287063	Identifier	yy		1286920	1					
ANR	1287064	CompoundStatement		25:8:1031:1050	1286920	1					
ANR	1287065	IdentifierDeclStatement	bool must_be_closed = ! ( pgs -> line_params . start_cap == gs_cap_square || pgs -> line_params . start_cap == gs_cap_round || pgs -> line_params . end_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_round || pgs -> line_params . dash_cap == gs_cap_square || pgs -> line_params . dash_cap == gs_cap_round ) ;	124:8:4542:4926	1286920	0	True				
ANR	1287066	IdentifierDecl	must_be_closed = ! ( pgs -> line_params . start_cap == gs_cap_square || pgs -> line_params . start_cap == gs_cap_round || pgs -> line_params . end_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_round || pgs -> line_params . dash_cap == gs_cap_square || pgs -> line_params . dash_cap == gs_cap_round )		1286920	0					
ANR	1287067	IdentifierDeclType	bool		1286920	0					
ANR	1287068	Identifier	must_be_closed		1286920	1					
ANR	1287069	AssignmentExpression	must_be_closed = ! ( pgs -> line_params . start_cap == gs_cap_square || pgs -> line_params . start_cap == gs_cap_round || pgs -> line_params . end_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_round || pgs -> line_params . dash_cap == gs_cap_square || pgs -> line_params . dash_cap == gs_cap_round )		1286920	2		=			
ANR	1287070	Identifier	must_be_closed		1286920	0					
ANR	1287071	UnaryOperationExpression	! ( pgs -> line_params . start_cap == gs_cap_square || pgs -> line_params . start_cap == gs_cap_round || pgs -> line_params . end_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_round || pgs -> line_params . dash_cap == gs_cap_square || pgs -> line_params . dash_cap == gs_cap_round )		1286920	1					
ANR	1287072	UnaryOperator	!		1286920	0					
ANR	1287073	OrExpression	pgs -> line_params . start_cap == gs_cap_square || pgs -> line_params . start_cap == gs_cap_round || pgs -> line_params . end_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_round || pgs -> line_params . dash_cap == gs_cap_square || pgs -> line_params . dash_cap == gs_cap_round		1286920	1		||			
ANR	1287074	EqualityExpression	pgs -> line_params . start_cap == gs_cap_square		1286920	0		==			
ANR	1287075	MemberAccess	pgs -> line_params . start_cap		1286920	0					
ANR	1287076	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287077	Identifier	pgs		1286920	0					
ANR	1287078	Identifier	line_params		1286920	1					
ANR	1287079	Identifier	start_cap		1286920	1					
ANR	1287080	Identifier	gs_cap_square		1286920	1					
ANR	1287081	OrExpression	pgs -> line_params . start_cap == gs_cap_round || pgs -> line_params . end_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_round || pgs -> line_params . dash_cap == gs_cap_square || pgs -> line_params . dash_cap == gs_cap_round		1286920	1		||			
ANR	1287082	EqualityExpression	pgs -> line_params . start_cap == gs_cap_round		1286920	0		==			
ANR	1287083	MemberAccess	pgs -> line_params . start_cap		1286920	0					
ANR	1287084	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287085	Identifier	pgs		1286920	0					
ANR	1287086	Identifier	line_params		1286920	1					
ANR	1287087	Identifier	start_cap		1286920	1					
ANR	1287088	Identifier	gs_cap_round		1286920	1					
ANR	1287089	OrExpression	pgs -> line_params . end_cap == gs_cap_square || pgs -> line_params . end_cap == gs_cap_round || pgs -> line_params . dash_cap == gs_cap_square || pgs -> line_params . dash_cap == gs_cap_round		1286920	1		||			
ANR	1287090	EqualityExpression	pgs -> line_params . end_cap == gs_cap_square		1286920	0		==			
ANR	1287091	MemberAccess	pgs -> line_params . end_cap		1286920	0					
ANR	1287092	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287093	Identifier	pgs		1286920	0					
ANR	1287094	Identifier	line_params		1286920	1					
ANR	1287095	Identifier	end_cap		1286920	1					
ANR	1287096	Identifier	gs_cap_square		1286920	1					
ANR	1287097	OrExpression	pgs -> line_params . end_cap == gs_cap_round || pgs -> line_params . dash_cap == gs_cap_square || pgs -> line_params . dash_cap == gs_cap_round		1286920	1		||			
ANR	1287098	EqualityExpression	pgs -> line_params . end_cap == gs_cap_round		1286920	0		==			
ANR	1287099	MemberAccess	pgs -> line_params . end_cap		1286920	0					
ANR	1287100	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287101	Identifier	pgs		1286920	0					
ANR	1287102	Identifier	line_params		1286920	1					
ANR	1287103	Identifier	end_cap		1286920	1					
ANR	1287104	Identifier	gs_cap_round		1286920	1					
ANR	1287105	OrExpression	pgs -> line_params . dash_cap == gs_cap_square || pgs -> line_params . dash_cap == gs_cap_round		1286920	1		||			
ANR	1287106	EqualityExpression	pgs -> line_params . dash_cap == gs_cap_square		1286920	0		==			
ANR	1287107	MemberAccess	pgs -> line_params . dash_cap		1286920	0					
ANR	1287108	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287109	Identifier	pgs		1286920	0					
ANR	1287110	Identifier	line_params		1286920	1					
ANR	1287111	Identifier	dash_cap		1286920	1					
ANR	1287112	Identifier	gs_cap_square		1286920	1					
ANR	1287113	EqualityExpression	pgs -> line_params . dash_cap == gs_cap_round		1286920	1		==			
ANR	1287114	MemberAccess	pgs -> line_params . dash_cap		1286920	0					
ANR	1287115	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287116	Identifier	pgs		1286920	0					
ANR	1287117	Identifier	line_params		1286920	1					
ANR	1287118	Identifier	dash_cap		1286920	1					
ANR	1287119	Identifier	gs_cap_round		1286920	1					
ANR	1287120	IdentifierDeclStatement	gs_fixed_point prev ;	131:8:4936:4955	1286920	1	True				
ANR	1287121	IdentifierDecl	prev		1286920	0					
ANR	1287122	IdentifierDeclType	gs_fixed_point		1286920	0					
ANR	1287123	Identifier	prev		1286920	1					
ANR	1287124	ExpressionStatement	prev . x = prev . y = 0	133:8:4966:4985	1286920	2	True				
ANR	1287125	AssignmentExpression	prev . x = prev . y = 0		1286920	0		=			
ANR	1287126	MemberAccess	prev . x		1286920	0					
ANR	1287127	Identifier	prev		1286920	0					
ANR	1287128	Identifier	x		1286920	1					
ANR	1287129	AssignmentExpression	prev . y = 0		1286920	1		=			
ANR	1287130	MemberAccess	prev . y		1286920	0					
ANR	1287131	Identifier	prev		1286920	0					
ANR	1287132	Identifier	y		1286920	1					
ANR	1287133	PrimaryExpression	0		1286920	1					
ANR	1287134	ForStatement	"for ( pseg = ( const segment * ) psub ; pseg ; prev = pseg -> pt , pseg = pseg -> next )"		1286920	3					
ANR	1287135	ForInit	pseg = ( const segment * ) psub ;	134:13:5025:5053	1286920	0	True				
ANR	1287136	AssignmentExpression	pseg = ( const segment * ) psub		1286920	0		=			
ANR	1287137	Identifier	pseg		1286920	0					
ANR	1287138	CastExpression	( const segment * ) psub		1286920	1					
ANR	1287139	CastTarget	const segment *		1286920	0					
ANR	1287140	Identifier	psub		1286920	1					
ANR	1287141	Condition	pseg	134:43:5055:5058	1286920	1	True				
ANR	1287142	Identifier	pseg		1286920	0					
ANR	1287143	Expression	"prev = pseg -> pt , pseg = pseg -> next"	135:13:5074:5107	1286920	2	True				
ANR	1287144	AssignmentExpression	prev = pseg -> pt		1286920	0		=			
ANR	1287145	Identifier	prev		1286920	0					
ANR	1287146	PtrMemberAccess	pseg -> pt		1286920	1					
ANR	1287147	Identifier	pseg		1286920	0					
ANR	1287148	Identifier	pt		1286920	1					
ANR	1287149	AssignmentExpression	pseg = pseg -> next		1286920	1		=			
ANR	1287150	Identifier	pseg		1286920	0					
ANR	1287151	PtrMemberAccess	pseg -> next		1286920	1					
ANR	1287152	Identifier	pseg		1286920	0					
ANR	1287153	Identifier	next		1286920	1					
ANR	1287154	SwitchStatement	switch ( pseg -> type )		1286920	3					
ANR	1287155	Condition	pseg -> type	137:20:5144:5153	1286920	0	True				
ANR	1287156	PtrMemberAccess	pseg -> type		1286920	0					
ANR	1287157	Identifier	pseg		1286920	0					
ANR	1287158	Identifier	type		1286920	1					
ANR	1287159	CompoundStatement		31:32:1251:1251	1286920	1					
ANR	1287160	Label	case s_start :	138:12:5170:5182	1286920	0	True				
ANR	1287161	Identifier	s_start		1286920	0					
ANR	1287162	IfStatement	if ( ( ( const subpath * ) pseg ) -> curve_count || ( must_be_closed && ! ( ( const subpath * ) pseg ) -> is_closed ) )		1286920	1					
ANR	1287163	Condition	( ( const subpath * ) pseg ) -> curve_count || ( must_be_closed && ! ( ( const subpath * ) pseg ) -> is_closed )	139:20:5204:5318	1286920	0	True				
ANR	1287164	OrExpression	( ( const subpath * ) pseg ) -> curve_count || ( must_be_closed && ! ( ( const subpath * ) pseg ) -> is_closed )		1286920	0		||			
ANR	1287165	PtrMemberAccess	( ( const subpath * ) pseg ) -> curve_count		1286920	0					
ANR	1287166	CastExpression	( const subpath * ) pseg		1286920	0					
ANR	1287167	CastTarget	const subpath *		1286920	0					
ANR	1287168	Identifier	pseg		1286920	1					
ANR	1287169	Identifier	curve_count		1286920	1					
ANR	1287170	AndExpression	must_be_closed && ! ( ( const subpath * ) pseg ) -> is_closed		1286920	1		&&			
ANR	1287171	Identifier	must_be_closed		1286920	0					
ANR	1287172	UnaryOperationExpression	! ( ( const subpath * ) pseg ) -> is_closed		1286920	1					
ANR	1287173	UnaryOperator	!		1286920	0					
ANR	1287174	PtrMemberAccess	( ( const subpath * ) pseg ) -> is_closed		1286920	1					
ANR	1287175	CastExpression	( const subpath * ) pseg		1286920	0					
ANR	1287176	CastTarget	const subpath *		1286920	0					
ANR	1287177	Identifier	pseg		1286920	1					
ANR	1287178	Identifier	is_closed		1286920	1					
ANR	1287179	GotoStatement	goto not_exact ;	142:20:5362:5376	1286920	1	True				
ANR	1287180	Identifier	not_exact		1286920	0					
ANR	1287181	BreakStatement	break ;	143:16:5394:5399	1286920	2	True				
ANR	1287182	Label	case s_line :	144:12:5413:5424	1286920	3	True				
ANR	1287183	Identifier	s_line		1286920	0					
ANR	1287184	Label	case s_dash :	145:12:5438:5449	1286920	4	True				
ANR	1287185	Identifier	s_dash		1286920	0					
ANR	1287186	Label	case s_line_close :	146:12:5463:5480	1286920	5	True				
ANR	1287187	Identifier	s_line_close		1286920	0					
ANR	1287188	IfStatement	if ( ! ( pseg -> pt . x == prev . x || pseg -> pt . y == prev . y ) )		1286920	6					
ANR	1287189	Condition	! ( pseg -> pt . x == prev . x || pseg -> pt . y == prev . y )	147:20:5502:5548	1286920	0	True				
ANR	1287190	UnaryOperationExpression	! ( pseg -> pt . x == prev . x || pseg -> pt . y == prev . y )		1286920	0					
ANR	1287191	UnaryOperator	!		1286920	0					
ANR	1287192	OrExpression	pseg -> pt . x == prev . x || pseg -> pt . y == prev . y		1286920	1		||			
ANR	1287193	EqualityExpression	pseg -> pt . x == prev . x		1286920	0		==			
ANR	1287194	MemberAccess	pseg -> pt . x		1286920	0					
ANR	1287195	PtrMemberAccess	pseg -> pt		1286920	0					
ANR	1287196	Identifier	pseg		1286920	0					
ANR	1287197	Identifier	pt		1286920	1					
ANR	1287198	Identifier	x		1286920	1					
ANR	1287199	MemberAccess	prev . x		1286920	1					
ANR	1287200	Identifier	prev		1286920	0					
ANR	1287201	Identifier	x		1286920	1					
ANR	1287202	EqualityExpression	pseg -> pt . y == prev . y		1286920	1		==			
ANR	1287203	MemberAccess	pseg -> pt . y		1286920	0					
ANR	1287204	PtrMemberAccess	pseg -> pt		1286920	0					
ANR	1287205	Identifier	pseg		1286920	0					
ANR	1287206	Identifier	pt		1286920	1					
ANR	1287207	Identifier	y		1286920	1					
ANR	1287208	MemberAccess	prev . y		1286920	1					
ANR	1287209	Identifier	prev		1286920	0					
ANR	1287210	Identifier	y		1286920	1					
ANR	1287211	GotoStatement	goto not_exact ;	148:20:5571:5585	1286920	1	True				
ANR	1287212	Identifier	not_exact		1286920	0					
ANR	1287213	BreakStatement	break ;	149:16:5603:5608	1286920	7	True				
ANR	1287214	Label	case s_gap :	150:12:5622:5632	1286920	8	True				
ANR	1287215	Identifier	s_gap		1286920	0					
ANR	1287216	Label	default :	151:12:5646:5653	1286920	9	True				
ANR	1287217	Identifier	default		1286920	0					
ANR	1287218	GotoStatement	goto not_exact ;	152:16:5715:5729	1286920	10	True				
ANR	1287219	Identifier	not_exact		1286920	0					
ANR	1287220	ExpressionStatement	result = 0	154:8:5753:5763	1286920	4	True				
ANR	1287221	AssignmentExpression	result = 0		1286920	0		=			
ANR	1287222	Identifier	result		1286920	0					
ANR	1287223	PrimaryExpression	0		1286920	1					
ANR	1287224	Label	not_exact :	156:0:5802:5811	1286920	8	True				
ANR	1287225	Identifier	not_exact		1286920	0					
ANR	1287226	IfStatement	if ( result )		1286920	9					
ANR	1287227	Condition	result	157:8:5821:5826	1286920	0	True				
ANR	1287228	Identifier	result		1286920	0					
ANR	1287229	CompoundStatement		51:16:1924:1924	1286920	1					
ANR	1287230	IfStatement	if ( ! gx_path_has_curves ( ppath ) && gx_path_subpath_count ( ppath ) <= 1 && ( psub == 0 || ( pseg = psub -> next ) == 0 || ( pseg = pseg -> next ) == 0 || pseg -> type == s_line_close ) )		1286920	0					
ANR	1287231	Condition	! gx_path_has_curves ( ppath ) && gx_path_subpath_count ( ppath ) <= 1 && ( psub == 0 || ( pseg = psub -> next ) == 0 || ( pseg = pseg -> next ) == 0 || pseg -> type == s_line_close )	158:12:5843:6031	1286920	0	True				
ANR	1287232	AndExpression	! gx_path_has_curves ( ppath ) && gx_path_subpath_count ( ppath ) <= 1 && ( psub == 0 || ( pseg = psub -> next ) == 0 || ( pseg = pseg -> next ) == 0 || pseg -> type == s_line_close )		1286920	0		&&			
ANR	1287233	UnaryOperationExpression	! gx_path_has_curves ( ppath )		1286920	0					
ANR	1287234	UnaryOperator	!		1286920	0					
ANR	1287235	CallExpression	gx_path_has_curves ( ppath )		1286920	1					
ANR	1287236	Callee	gx_path_has_curves		1286920	0					
ANR	1287237	Identifier	gx_path_has_curves		1286920	0					
ANR	1287238	ArgumentList	ppath		1286920	1					
ANR	1287239	Argument	ppath		1286920	0					
ANR	1287240	Identifier	ppath		1286920	0					
ANR	1287241	AndExpression	gx_path_subpath_count ( ppath ) <= 1 && ( psub == 0 || ( pseg = psub -> next ) == 0 || ( pseg = pseg -> next ) == 0 || pseg -> type == s_line_close )		1286920	1		&&			
ANR	1287242	RelationalExpression	gx_path_subpath_count ( ppath ) <= 1		1286920	0		<=			
ANR	1287243	CallExpression	gx_path_subpath_count ( ppath )		1286920	0					
ANR	1287244	Callee	gx_path_subpath_count		1286920	0					
ANR	1287245	Identifier	gx_path_subpath_count		1286920	0					
ANR	1287246	ArgumentList	ppath		1286920	1					
ANR	1287247	Argument	ppath		1286920	0					
ANR	1287248	Identifier	ppath		1286920	0					
ANR	1287249	PrimaryExpression	1		1286920	1					
ANR	1287250	OrExpression	psub == 0 || ( pseg = psub -> next ) == 0 || ( pseg = pseg -> next ) == 0 || pseg -> type == s_line_close		1286920	1		||			
ANR	1287251	EqualityExpression	psub == 0		1286920	0		==			
ANR	1287252	Identifier	psub		1286920	0					
ANR	1287253	PrimaryExpression	0		1286920	1					
ANR	1287254	OrExpression	( pseg = psub -> next ) == 0 || ( pseg = pseg -> next ) == 0 || pseg -> type == s_line_close		1286920	1		||			
ANR	1287255	EqualityExpression	( pseg = psub -> next ) == 0		1286920	0		==			
ANR	1287256	AssignmentExpression	pseg = psub -> next		1286920	0		=			
ANR	1287257	Identifier	pseg		1286920	0					
ANR	1287258	PtrMemberAccess	psub -> next		1286920	1					
ANR	1287259	Identifier	psub		1286920	0					
ANR	1287260	Identifier	next		1286920	1					
ANR	1287261	PrimaryExpression	0		1286920	1					
ANR	1287262	OrExpression	( pseg = pseg -> next ) == 0 || pseg -> type == s_line_close		1286920	1		||			
ANR	1287263	EqualityExpression	( pseg = pseg -> next ) == 0		1286920	0		==			
ANR	1287264	AssignmentExpression	pseg = pseg -> next		1286920	0		=			
ANR	1287265	Identifier	pseg		1286920	0					
ANR	1287266	PtrMemberAccess	pseg -> next		1286920	1					
ANR	1287267	Identifier	pseg		1286920	0					
ANR	1287268	Identifier	next		1286920	1					
ANR	1287269	PrimaryExpression	0		1286920	1					
ANR	1287270	EqualityExpression	pseg -> type == s_line_close		1286920	1		==			
ANR	1287271	PtrMemberAccess	pseg -> type		1286920	0					
ANR	1287272	Identifier	pseg		1286920	0					
ANR	1287273	Identifier	type		1286920	1					
ANR	1287274	Identifier	s_line_close		1286920	1					
ANR	1287275	ExpressionStatement	DO_NOTHING	161:12:6046:6056	1286920	1	True				
ANR	1287276	Identifier	DO_NOTHING		1286920	0					
ANR	1287277	ElseStatement	else		1286920	0					
ANR	1287278	CompoundStatement		57:12:2180:2244	1286920	0					
ANR	1287279	IdentifierDeclStatement	"float factor = join_expansion_factor ( pgs , pgs -> line_params . join ) ;"	163:12:6085:6149	1286920	0	True				
ANR	1287280	IdentifierDecl	"factor = join_expansion_factor ( pgs , pgs -> line_params . join )"		1286920	0					
ANR	1287281	IdentifierDeclType	float		1286920	0					
ANR	1287282	Identifier	factor		1286920	1					
ANR	1287283	AssignmentExpression	"factor = join_expansion_factor ( pgs , pgs -> line_params . join )"		1286920	2		=			
ANR	1287284	Identifier	factor		1286920	0					
ANR	1287285	CallExpression	"join_expansion_factor ( pgs , pgs -> line_params . join )"		1286920	1					
ANR	1287286	Callee	join_expansion_factor		1286920	0					
ANR	1287287	Identifier	join_expansion_factor		1286920	0					
ANR	1287288	ArgumentList	pgs		1286920	1					
ANR	1287289	Argument	pgs		1286920	0					
ANR	1287290	Identifier	pgs		1286920	0					
ANR	1287291	Argument	pgs -> line_params . join		1286920	1					
ANR	1287292	MemberAccess	pgs -> line_params . join		1286920	0					
ANR	1287293	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287294	Identifier	pgs		1286920	0					
ANR	1287295	Identifier	line_params		1286920	1					
ANR	1287296	Identifier	join		1286920	1					
ANR	1287297	IfStatement	if ( pgs -> line_params . curve_join >= 0 )		1286920	1					
ANR	1287298	Condition	pgs -> line_params . curve_join >= 0	165:16:6168:6199	1286920	0	True				
ANR	1287299	RelationalExpression	pgs -> line_params . curve_join >= 0		1286920	0		>=			
ANR	1287300	MemberAccess	pgs -> line_params . curve_join		1286920	0					
ANR	1287301	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287302	Identifier	pgs		1286920	0					
ANR	1287303	Identifier	line_params		1286920	1					
ANR	1287304	Identifier	curve_join		1286920	1					
ANR	1287305	PrimaryExpression	0		1286920	1					
ANR	1287306	ExpressionStatement	"factor = max ( factor , join_expansion_factor ( pgs , ( gs_line_join ) pgs -> line_params . curve_join ) )"	166:16:6218:6341	1286920	1	True				
ANR	1287307	AssignmentExpression	"factor = max ( factor , join_expansion_factor ( pgs , ( gs_line_join ) pgs -> line_params . curve_join ) )"		1286920	0		=			
ANR	1287308	Identifier	factor		1286920	0					
ANR	1287309	CallExpression	"max ( factor , join_expansion_factor ( pgs , ( gs_line_join ) pgs -> line_params . curve_join ) )"		1286920	1					
ANR	1287310	Callee	max		1286920	0					
ANR	1287311	Identifier	max		1286920	0					
ANR	1287312	ArgumentList	factor		1286920	1					
ANR	1287313	Argument	factor		1286920	0					
ANR	1287314	Identifier	factor		1286920	0					
ANR	1287315	Argument	"join_expansion_factor ( pgs , ( gs_line_join ) pgs -> line_params . curve_join )"		1286920	1					
ANR	1287316	CallExpression	"join_expansion_factor ( pgs , ( gs_line_join ) pgs -> line_params . curve_join )"		1286920	0					
ANR	1287317	Callee	join_expansion_factor		1286920	0					
ANR	1287318	Identifier	join_expansion_factor		1286920	0					
ANR	1287319	ArgumentList	pgs		1286920	1					
ANR	1287320	Argument	pgs		1286920	0					
ANR	1287321	Identifier	pgs		1286920	0					
ANR	1287322	Argument	( gs_line_join ) pgs -> line_params . curve_join		1286920	1					
ANR	1287323	CastExpression	( gs_line_join ) pgs -> line_params . curve_join		1286920	0					
ANR	1287324	CastTarget	gs_line_join		1286920	0					
ANR	1287325	MemberAccess	pgs -> line_params . curve_join		1286920	1					
ANR	1287326	PtrMemberAccess	pgs -> line_params		1286920	0					
ANR	1287327	Identifier	pgs		1286920	0					
ANR	1287328	Identifier	line_params		1286920	1					
ANR	1287329	Identifier	curve_join		1286920	1					
ANR	1287330	ExpressionStatement	expand *= factor	168:12:6355:6371	1286920	2	True				
ANR	1287331	AssignmentExpression	expand *= factor		1286920	0		*=			
ANR	1287332	Identifier	expand		1286920	0					
ANR	1287333	Identifier	factor		1286920	1					
ANR	1287334	CompoundStatement		70:8:2604:2648	1286920	10					
ANR	1287335	IdentifierDeclStatement	float exx = expand * cx ;	174:8:6443:6466	1286920	0	True				
ANR	1287336	IdentifierDecl	exx = expand * cx		1286920	0					
ANR	1287337	IdentifierDeclType	float		1286920	0					
ANR	1287338	Identifier	exx		1286920	1					
ANR	1287339	AssignmentExpression	exx = expand * cx		1286920	2		=			
ANR	1287340	Identifier	exx		1286920	0					
ANR	1287341	MultiplicativeExpression	expand * cx		1286920	1		*			
ANR	1287342	Identifier	expand		1286920	0					
ANR	1287343	Identifier	cx		1286920	1					
ANR	1287344	IdentifierDeclStatement	float exy = expand * cy ;	175:8:6476:6499	1286920	1	True				
ANR	1287345	IdentifierDecl	exy = expand * cy		1286920	0					
ANR	1287346	IdentifierDeclType	float		1286920	0					
ANR	1287347	Identifier	exy		1286920	1					
ANR	1287348	AssignmentExpression	exy = expand * cy		1286920	2		=			
ANR	1287349	Identifier	exy		1286920	0					
ANR	1287350	MultiplicativeExpression	expand * cy		1286920	1		*			
ANR	1287351	Identifier	expand		1286920	0					
ANR	1287352	Identifier	cy		1286920	1					
ANR	1287353	IdentifierDeclStatement	"int code = set_float2fixed_vars ( ppt -> x , exx ) ;"	176:8:6509:6553	1286920	2	True				
ANR	1287354	IdentifierDecl	"code = set_float2fixed_vars ( ppt -> x , exx )"		1286920	0					
ANR	1287355	IdentifierDeclType	int		1286920	0					
ANR	1287356	Identifier	code		1286920	1					
ANR	1287357	AssignmentExpression	"code = set_float2fixed_vars ( ppt -> x , exx )"		1286920	2		=			
ANR	1287358	Identifier	code		1286920	0					
ANR	1287359	CallExpression	"set_float2fixed_vars ( ppt -> x , exx )"		1286920	1					
ANR	1287360	Callee	set_float2fixed_vars		1286920	0					
ANR	1287361	Identifier	set_float2fixed_vars		1286920	0					
ANR	1287362	ArgumentList	ppt -> x		1286920	1					
ANR	1287363	Argument	ppt -> x		1286920	0					
ANR	1287364	PtrMemberAccess	ppt -> x		1286920	0					
ANR	1287365	Identifier	ppt		1286920	0					
ANR	1287366	Identifier	x		1286920	1					
ANR	1287367	Argument	exx		1286920	1					
ANR	1287368	Identifier	exx		1286920	0					
ANR	1287369	IfStatement	if ( code < 0 )		1286920	3					
ANR	1287370	Condition	code < 0	178:12:6568:6575	1286920	0	True				
ANR	1287371	RelationalExpression	code < 0		1286920	0		<			
ANR	1287372	Identifier	code		1286920	0					
ANR	1287373	PrimaryExpression	0		1286920	1					
ANR	1287374	ReturnStatement	return code ;	179:12:6590:6601	1286920	1	True				
ANR	1287375	Identifier	code		1286920	0					
ANR	1287376	ExpressionStatement	"code = set_float2fixed_vars ( ppt -> y , exy )"	180:8:6611:6651	1286920	4	True				
ANR	1287377	AssignmentExpression	"code = set_float2fixed_vars ( ppt -> y , exy )"		1286920	0		=			
ANR	1287378	Identifier	code		1286920	0					
ANR	1287379	CallExpression	"set_float2fixed_vars ( ppt -> y , exy )"		1286920	1					
ANR	1287380	Callee	set_float2fixed_vars		1286920	0					
ANR	1287381	Identifier	set_float2fixed_vars		1286920	0					
ANR	1287382	ArgumentList	ppt -> y		1286920	1					
ANR	1287383	Argument	ppt -> y		1286920	0					
ANR	1287384	PtrMemberAccess	ppt -> y		1286920	0					
ANR	1287385	Identifier	ppt		1286920	0					
ANR	1287386	Identifier	y		1286920	1					
ANR	1287387	Argument	exy		1286920	1					
ANR	1287388	Identifier	exy		1286920	0					
ANR	1287389	IfStatement	if ( code < 0 )		1286920	5					
ANR	1287390	Condition	code < 0	181:12:6665:6672	1286920	0	True				
ANR	1287391	RelationalExpression	code < 0		1286920	0		<			
ANR	1287392	Identifier	code		1286920	0					
ANR	1287393	PrimaryExpression	0		1286920	1					
ANR	1287394	ReturnStatement	return code ;	182:12:6687:6698	1286920	1	True				
ANR	1287395	Identifier	code		1286920	0					
ANR	1287396	ReturnStatement	return result ;	185:4:6711:6724	1286920	11	True				
ANR	1287397	Identifier	result		1286920	0					
ANR	1287398	ReturnType	int		1286920	1					
ANR	1287399	Identifier	gx_stroke_path_expansion		1286920	2					
ANR	1287400	ParameterList	"const gs_gstate * pgs , const gx_path * ppath , gs_fixed_point * ppt"		1286920	3					
ANR	1287401	Parameter	const gs_gstate * pgs	105:25:3811:3831	1286920	0	True				
ANR	1287402	ParameterType	const gs_gstate *		1286920	0					
ANR	1287403	Identifier	pgs		1286920	1					
ANR	1287404	Parameter	const gx_path * ppath	105:48:3834:3854	1286920	1	True				
ANR	1287405	ParameterType	const gx_path *		1286920	0					
ANR	1287406	Identifier	ppath		1286920	1					
ANR	1287407	Parameter	gs_fixed_point * ppt	106:25:3882:3901	1286920	2	True				
ANR	1287408	ParameterType	gs_fixed_point *		1286920	0					
ANR	1287409	Identifier	ppt		1286920	1					
ANR	1287410	CFGEntryNode	ENTRY		1286920		True				
ANR	1287411	CFGExitNode	EXIT		1286920		True				
ANR	1287412	Symbol	is_fzero2		1286920						
ANR	1287413	Symbol	gs_cap_square		1286920						
ANR	1287414	Symbol	* pgs		1286920						
ANR	1287415	Symbol	pgs -> line_params		1286920						
ANR	1287416	Symbol	prev		1286920						
ANR	1287417	Symbol	pgs -> line_params . join		1286920						
ANR	1287418	Symbol	pseg -> next		1286920						
ANR	1287419	Symbol	pgs -> ctm . xx		1286920						
ANR	1287420	Symbol	join_expansion_factor		1286920						
ANR	1287421	Symbol	pgs -> ctm . xy		1286920						
ANR	1287422	Symbol	* ppt		1286920						
ANR	1287423	Symbol	* ppath		1286920						
ANR	1287424	Symbol	exx		1286920						
ANR	1287425	Symbol	* psub		1286920						
ANR	1287426	Symbol	pgs -> line_params . curve_join		1286920						
ANR	1287427	Symbol	exy		1286920						
ANR	1287428	Symbol	s_line_close		1286920						
ANR	1287429	Symbol	pseg -> pt . x		1286920						
ANR	1287430	Symbol	psub -> next		1286920						
ANR	1287431	Symbol	pseg -> pt . y		1286920						
ANR	1287432	Symbol	set_float2fixed_vars		1286920						
ANR	1287433	Symbol	pgs -> ctm		1286920						
ANR	1287434	Symbol	expand		1286920						
ANR	1287435	Symbol	( ( const subpath * ) pseg ) -> curve_count		1286920						
ANR	1287436	Symbol	pgs -> ctm . yy		1286920						
ANR	1287437	Symbol	pgs -> ctm . yx		1286920						
ANR	1287438	Symbol	* pseg		1286920						
ANR	1287439	Symbol	must_be_closed		1286920						
ANR	1287440	Symbol	code		1286920						
ANR	1287441	Symbol	ppath		1286920						
ANR	1287442	Symbol	ppath -> first_subpath		1286920						
ANR	1287443	Symbol	( ( const subpath * ) pseg ) -> is_closed		1286920						
ANR	1287444	Symbol	result		1286920						
ANR	1287445	Symbol	pseg		1286920						
ANR	1287446	Symbol	pseg -> pt		1286920						
ANR	1287447	Symbol	pseg -> type		1286920						
ANR	1287448	Symbol	factor		1286920						
ANR	1287449	Symbol	pgs		1286920						
ANR	1287450	Symbol	gs_cap_round		1286920						
ANR	1287451	Symbol	gx_path_has_curves		1286920						
ANR	1287452	Symbol	fabs		1286920						
ANR	1287453	Symbol	psub		1286920						
ANR	1287454	Symbol	pgs -> line_params . end_cap		1286920						
ANR	1287455	Symbol	pgs -> line_params . half_width		1286920						
ANR	1287456	Symbol	pgs -> line_params . start_cap		1286920						
ANR	1287457	Symbol	max		1286920						
ANR	1287458	Symbol	pgs -> line_params . dash_cap		1286920						
ANR	1287459	Symbol	prev . x		1286920						
ANR	1287460	Symbol	prev . y		1286920						
ANR	1287461	Symbol	ppt		1286920						
ANR	1287462	Symbol	cx		1286920						
ANR	1287463	Symbol	cy		1286920						
ANR	1287464	Symbol	ppt -> x		1286920						
ANR	1287465	Symbol	gx_path_subpath_count		1286920						
ANR	1287466	Symbol	ppt -> y		1286920						
ANR	1287467	Function	join_expansion_factor	187:0:6728:6957							
ANR	1287468	FunctionDef	"join_expansion_factor (const gs_gstate * pgs , gs_line_join join)"		1287467	0					
ANR	1287469	CompoundStatement		189:0:6804:6957	1287467	0					
ANR	1287470	SwitchStatement	switch ( join )		1287467	0					
ANR	1287471	Condition	join	190:12:6818:6821	1287467	0	True				
ANR	1287472	Identifier	join		1287467	0					
ANR	1287473	CompoundStatement		2:18:19:19	1287467	1					
ANR	1287474	Label	case gs_join_miter :	191:4:6830:6848	1287467	0	True				
ANR	1287475	Identifier	gs_join_miter		1287467	0					
ANR	1287476	ReturnStatement	return pgs -> line_params . miter_limit ;	191:24:6850:6885	1287467	1	True				
ANR	1287477	MemberAccess	pgs -> line_params . miter_limit		1287467	0					
ANR	1287478	PtrMemberAccess	pgs -> line_params		1287467	0					
ANR	1287479	Identifier	pgs		1287467	0					
ANR	1287480	Identifier	line_params		1287467	1					
ANR	1287481	Identifier	miter_limit		1287467	1					
ANR	1287482	Label	case gs_join_triangle :	192:4:6891:6912	1287467	2	True				
ANR	1287483	Identifier	gs_join_triangle		1287467	0					
ANR	1287484	ReturnStatement	return 2.0 ;	192:27:6914:6924	1287467	3	True				
ANR	1287485	PrimaryExpression	2.0		1287467	0					
ANR	1287486	Label	default :	193:4:6930:6937	1287467	4	True				
ANR	1287487	Identifier	default		1287467	0					
ANR	1287488	ReturnStatement	return 1.0 ;	193:13:6939:6949	1287467	5	True				
ANR	1287489	PrimaryExpression	1.0		1287467	0					
ANR	1287490	ReturnType	static float		1287467	1					
ANR	1287491	Identifier	join_expansion_factor		1287467	2					
ANR	1287492	ParameterList	"const gs_gstate * pgs , gs_line_join join"		1287467	3					
ANR	1287493	Parameter	const gs_gstate * pgs	188:22:6763:6782	1287467	0	True				
ANR	1287494	ParameterType	const gs_gstate *		1287467	0					
ANR	1287495	Identifier	pgs		1287467	1					
ANR	1287496	Parameter	gs_line_join join	188:44:6785:6801	1287467	1	True				
ANR	1287497	ParameterType	gs_line_join		1287467	0					
ANR	1287498	Identifier	join		1287467	1					
ANR	1287499	CFGEntryNode	ENTRY		1287467		True				
ANR	1287500	CFGExitNode	EXIT		1287467		True				
ANR	1287501	Symbol	pgs -> line_params		1287467						
ANR	1287502	Symbol	* pgs		1287467						
ANR	1287503	Symbol	join		1287467						
ANR	1287504	Symbol	pgs		1287467						
ANR	1287505	Symbol	pgs -> line_params . miter_limit		1287467						
ANR	1287506	DeclStmt									
ANR	1287507	Decl							gs_fixed_point	gs_fixed_point *	p_ptr
ANR	1287508	ClassDef	endpoint_s	218:8:8015:8223							
ANR	1287509	DeclStmt									
ANR	1287510	Decl							gs_fixed_point	gs_fixed_point	p
ANR	1287511	DeclStmt									
ANR	1287512	Decl							gs_fixed_point	gs_fixed_point	co
ANR	1287513	Decl							gs_fixed_point	gs_fixed_point	ce
ANR	1287514	DeclStmt									
ANR	1287515	Decl							gs_fixed_point	gs_fixed_point	cdelta
ANR	1287516	DeclStmt									
ANR	1287517	Decl							endpoint_s	endpoint_s	endpoint
ANR	1287518	DeclStmt									
ANR	1287519	Decl							endpoint	endpoint *	ep_ptr
ANR	1287520	DeclStmt									
ANR	1287521	Decl							const endpoint	const endpoint *	const_ep_ptr
ANR	1287522	ClassDef	partial_line_s	225:8:8297:8648							
ANR	1287523	DeclStmt									
ANR	1287524	Decl							endpoint	endpoint	o
ANR	1287525	DeclStmt									
ANR	1287526	Decl							endpoint	endpoint	e
ANR	1287527	DeclStmt									
ANR	1287528	Decl							gs_fixed_point	gs_fixed_point	width
ANR	1287529	DeclStmt									
ANR	1287530	Decl							gs_fixed_point	gs_fixed_point	vector
ANR	1287531	DeclStmt									
ANR	1287532	Decl							bool	bool	thin
ANR	1287533	DeclStmt									
ANR	1287534	Decl							partial_line_s	partial_line_s	partial_line
ANR	1287535	DeclStmt									
ANR	1287536	Decl							partial_line	partial_line *	pl_ptr
ANR	1287537	ClassDef	note_flags	243:8:9162:10184							
ANR	1287538	DeclStmt									
ANR	1287539	Decl							note_flags	note_flags	note_flags
ANR	1287540	DeclStmt									
ANR	1287541	Decl							bool	bool ( pl_ptr )	width_is_thin
ANR	1287542	DeclStmt									
ANR	1287543	Decl							void	"void ( gx_device * , pl_ptr , const gs_gstate * , bool , bool , note_flags )"	adjust_stroke
ANR	1287544	DeclStmt									
ANR	1287545	Decl							int	"int ( const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , gs_fixed_point * join_points , const gs_matrix * pmat , gs_line_join join , bool reflected )"	line_join_points
ANR	1287546	DeclStmt									
ANR	1287547	Decl							int	"int ( const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , gs_fixed_point * rjoin_points , const gs_matrix * pmat , gs_line_join join )"	line_join_points_fast_cw
ANR	1287548	DeclStmt									
ANR	1287549	Decl							int	"int ( const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , gs_fixed_point * join_points , const gs_matrix * pmat , gs_line_join join )"	line_join_points_fast_ccw
ANR	1287550	DeclStmt									
ANR	1287551	Decl							void	void ( pl_ptr )	compute_caps
ANR	1287552	DeclStmt									
ANR	1287553	Decl							int	"int ( gx_path * , const gs_fixed_point * , int , bool )"	add_points
ANR	1287554	DeclStmt									
ANR	1287555	Decl							int	"int ( gx_path * , pl_ptr , pl_ptr , bool , bool )"	add_pie_join
ANR	1287556	DeclStmt									
ANR	1287557	Decl							int	"int ( gx_path * , pl_ptr , pl_ptr , bool )"	add_pie_join_fast_cw
ANR	1287558	DeclStmt									
ANR	1287559	Decl							int	"int ( gx_path * , pl_ptr , pl_ptr , bool )"	add_pie_join_fast_ccw
ANR	1287560	DeclStmt									
ANR	1287561	Decl							int	"int ( gx_path * , const_ep_ptr )"	add_round_cap
ANR	1287562	DeclStmt									
ANR	1287563	Decl							int	"int ( gx_path * , const_ep_ptr )"	add_pie_cap
ANR	1287564	DeclStmt									
ANR	1287565	Decl							int	"int ( gs_line_cap , const_ep_ptr , gs_fixed_point * )"	cap_points
ANR	1287566	DeclStmt									
ANR	1287567	Decl							int	"int ( gx_path * , pl_ptr , pl_ptr , bool )"	join_under_pie
ANR	1287568	Function	gx_default_stroke_path	328:0:12816:13187							
ANR	1287569	FunctionDef	"gx_default_stroke_path (gx_device * dev , const gs_gstate * pgs , gx_path * ppath , const gx_stroke_params * params , const gx_drawing_color * pdcolor , const gx_clip_path * pcpath)"		1287568	0					
ANR	1287570	CompoundStatement		333:0:13065:13187	1287568	0					
ANR	1287571	ReturnStatement	"return gx_stroke_path_only ( ppath , ( gx_path * ) 0 , dev , pgs , params , pdcolor , pcpath ) ;"	334:4:13071:13185	1287568	0	True				
ANR	1287572	CallExpression	"gx_stroke_path_only ( ppath , ( gx_path * ) 0 , dev , pgs , params , pdcolor , pcpath )"		1287568	0					
ANR	1287573	Callee	gx_stroke_path_only		1287568	0					
ANR	1287574	Identifier	gx_stroke_path_only		1287568	0					
ANR	1287575	ArgumentList	ppath		1287568	1					
ANR	1287576	Argument	ppath		1287568	0					
ANR	1287577	Identifier	ppath		1287568	0					
ANR	1287578	Argument	( gx_path * ) 0		1287568	1					
ANR	1287579	CastExpression	( gx_path * ) 0		1287568	0					
ANR	1287580	CastTarget	gx_path *		1287568	0					
ANR	1287581	PrimaryExpression	0		1287568	1					
ANR	1287582	Argument	dev		1287568	2					
ANR	1287583	Identifier	dev		1287568	0					
ANR	1287584	Argument	pgs		1287568	3					
ANR	1287585	Identifier	pgs		1287568	0					
ANR	1287586	Argument	params		1287568	4					
ANR	1287587	Identifier	params		1287568	0					
ANR	1287588	Argument	pdcolor		1287568	5					
ANR	1287589	Identifier	pdcolor		1287568	0					
ANR	1287590	Argument	pcpath		1287568	6					
ANR	1287591	Identifier	pcpath		1287568	0					
ANR	1287592	ReturnType	int		1287568	1					
ANR	1287593	Identifier	gx_default_stroke_path		1287568	2					
ANR	1287594	ParameterList	"gx_device * dev , const gs_gstate * pgs , gx_path * ppath , const gx_stroke_params * params , const gx_drawing_color * pdcolor , const gx_clip_path * pcpath"		1287568	3					
ANR	1287595	Parameter	gx_device * dev	329:23:12843:12857	1287568	0	True				
ANR	1287596	ParameterType	gx_device *		1287568	0					
ANR	1287597	Identifier	dev		1287568	1					
ANR	1287598	Parameter	const gs_gstate * pgs	329:40:12860:12880	1287568	1	True				
ANR	1287599	ParameterType	const gs_gstate *		1287568	0					
ANR	1287600	Identifier	pgs		1287568	1					
ANR	1287601	Parameter	gx_path * ppath	330:23:12906:12920	1287568	2	True				
ANR	1287602	ParameterType	gx_path *		1287568	0					
ANR	1287603	Identifier	ppath		1287568	1					
ANR	1287604	Parameter	const gx_stroke_params * params	330:40:12923:12953	1287568	3	True				
ANR	1287605	ParameterType	const gx_stroke_params *		1287568	0					
ANR	1287606	Identifier	params		1287568	1					
ANR	1287607	Parameter	const gx_drawing_color * pdcolor	331:23:12979:13010	1287568	4	True				
ANR	1287608	ParameterType	const gx_drawing_color *		1287568	0					
ANR	1287609	Identifier	pdcolor		1287568	1					
ANR	1287610	Parameter	const gx_clip_path * pcpath	332:23:13036:13062	1287568	5	True				
ANR	1287611	ParameterType	const gx_clip_path *		1287568	0					
ANR	1287612	Identifier	pcpath		1287568	1					
ANR	1287613	CFGEntryNode	ENTRY		1287568		True				
ANR	1287614	CFGExitNode	EXIT		1287568		True				
ANR	1287615	Symbol	dev		1287568						
ANR	1287616	Symbol	pdcolor		1287568						
ANR	1287617	Symbol	gx_stroke_path_only		1287568						
ANR	1287618	Symbol	ppath		1287568						
ANR	1287619	Symbol	params		1287568						
ANR	1287620	Symbol	pgs		1287568						
ANR	1287621	Symbol	pcpath		1287568						
ANR	1287622	DeclStmt									
ANR	1287623	Decl							int	"int ( gx_path * ppath , pl_ptr plp , bool adlust_longitude , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs )"	stroke_add_initial_cap_compat
ANR	1287624	ClassDef	<unnamed>	379:8:15079:15233							
ANR	1287625	DeclStmt									
ANR	1287626	Decl									orientation
ANR	1287627	Function	gx_join_path_and_reverse	394:0:15602:15967							
ANR	1287628	FunctionDef	"gx_join_path_and_reverse (gx_path * path , gx_path * rpath)"		1287627	0					
ANR	1287629	CompoundStatement		396:0:15671:15967	1287627	0					
ANR	1287630	IdentifierDeclStatement	int code ;	397:4:15677:15685	1287627	0	True				
ANR	1287631	IdentifierDecl	code		1287627	0					
ANR	1287632	IdentifierDeclType	int		1287627	0					
ANR	1287633	Identifier	code		1287627	1					
ANR	1287634	IfStatement	if ( gx_path_is_void ( rpath ) )		1287627	1					
ANR	1287635	Condition	gx_path_is_void ( rpath )	399:8:15696:15717	1287627	0	True				
ANR	1287636	CallExpression	gx_path_is_void ( rpath )		1287627	0					
ANR	1287637	Callee	gx_path_is_void		1287627	0					
ANR	1287638	Identifier	gx_path_is_void		1287627	0					
ANR	1287639	ArgumentList	rpath		1287627	1					
ANR	1287640	Argument	rpath		1287627	0					
ANR	1287641	Identifier	rpath		1287627	0					
ANR	1287642	ReturnStatement	return 0 ;	400:8:15728:15736	1287627	1	True				
ANR	1287643	PrimaryExpression	0		1287627	0					
ANR	1287644	ExpressionStatement	"code = gx_path_append_reversed ( rpath , path )"	401:5:15743:15786	1287627	2	True				
ANR	1287645	AssignmentExpression	"code = gx_path_append_reversed ( rpath , path )"		1287627	0		=			
ANR	1287646	Identifier	code		1287627	0					
ANR	1287647	CallExpression	"gx_path_append_reversed ( rpath , path )"		1287627	1					
ANR	1287648	Callee	gx_path_append_reversed		1287627	0					
ANR	1287649	Identifier	gx_path_append_reversed		1287627	0					
ANR	1287650	ArgumentList	rpath		1287627	1					
ANR	1287651	Argument	rpath		1287627	0					
ANR	1287652	Identifier	rpath		1287627	0					
ANR	1287653	Argument	path		1287627	1					
ANR	1287654	Identifier	path		1287627	0					
ANR	1287655	IfStatement	if ( code < 0 )		1287627	3					
ANR	1287656	Condition	code < 0	402:8:15796:15803	1287627	0	True				
ANR	1287657	RelationalExpression	code < 0		1287627	0		<			
ANR	1287658	Identifier	code		1287627	0					
ANR	1287659	PrimaryExpression	0		1287627	1					
ANR	1287660	ReturnStatement	return code ;	403:8:15814:15825	1287627	1	True				
ANR	1287661	Identifier	code		1287627	0					
ANR	1287662	ExpressionStatement	"gx_path_free ( rpath , ""gx_join_path_and_reverse"" )"	405:4:15832:15879	1287627	4	True				
ANR	1287663	CallExpression	"gx_path_free ( rpath , ""gx_join_path_and_reverse"" )"		1287627	0					
ANR	1287664	Callee	gx_path_free		1287627	0					
ANR	1287665	Identifier	gx_path_free		1287627	0					
ANR	1287666	ArgumentList	rpath		1287627	1					
ANR	1287667	Argument	rpath		1287627	0					
ANR	1287668	Identifier	rpath		1287627	0					
ANR	1287669	Argument	"""gx_join_path_and_reverse"""		1287627	1					
ANR	1287670	PrimaryExpression	"""gx_join_path_and_reverse"""		1287627	0					
ANR	1287671	ExpressionStatement	"gx_path_init_local ( rpath , path -> memory )"	406:4:15885:15924	1287627	5	True				
ANR	1287672	CallExpression	"gx_path_init_local ( rpath , path -> memory )"		1287627	0					
ANR	1287673	Callee	gx_path_init_local		1287627	0					
ANR	1287674	Identifier	gx_path_init_local		1287627	0					
ANR	1287675	ArgumentList	rpath		1287627	1					
ANR	1287676	Argument	rpath		1287627	0					
ANR	1287677	Identifier	rpath		1287627	0					
ANR	1287678	Argument	path -> memory		1287627	1					
ANR	1287679	PtrMemberAccess	path -> memory		1287627	0					
ANR	1287680	Identifier	path		1287627	0					
ANR	1287681	Identifier	memory		1287627	1					
ANR	1287682	ReturnStatement	return gx_path_close_subpath ( path ) ;	408:4:15931:15965	1287627	6	True				
ANR	1287683	CallExpression	gx_path_close_subpath ( path )		1287627	0					
ANR	1287684	Callee	gx_path_close_subpath		1287627	0					
ANR	1287685	Identifier	gx_path_close_subpath		1287627	0					
ANR	1287686	ArgumentList	path		1287627	1					
ANR	1287687	Argument	path		1287627	0					
ANR	1287688	Identifier	path		1287627	0					
ANR	1287689	ReturnType	static int		1287627	1					
ANR	1287690	Identifier	gx_join_path_and_reverse		1287627	2					
ANR	1287691	ParameterList	"gx_path * path , gx_path * rpath"		1287627	3					
ANR	1287692	Parameter	gx_path * path	395:25:15638:15651	1287627	0	True				
ANR	1287693	ParameterType	gx_path *		1287627	0					
ANR	1287694	Identifier	path		1287627	1					
ANR	1287695	Parameter	gx_path * rpath	395:41:15654:15668	1287627	1	True				
ANR	1287696	ParameterType	gx_path *		1287627	0					
ANR	1287697	Identifier	rpath		1287627	1					
ANR	1287698	CFGEntryNode	ENTRY		1287627		True				
ANR	1287699	CFGExitNode	EXIT		1287627		True				
ANR	1287700	Symbol	path		1287627						
ANR	1287701	Symbol	gx_path_is_void		1287627						
ANR	1287702	Symbol	code		1287627						
ANR	1287703	Symbol	gx_path_append_reversed		1287627						
ANR	1287704	Symbol	path -> memory		1287627						
ANR	1287705	Symbol	* path		1287627						
ANR	1287706	Symbol	rpath		1287627						
ANR	1287707	Symbol	gx_path_close_subpath		1287627						
ANR	1287708	Function	gx_stroke_path_only_aux	419:0:16257:44953							
ANR	1287709	FunctionDef	"gx_stroke_path_only_aux (gx_path * ppath , gx_path * to_path , gx_device * pdev , const gs_gstate * pgs , const gx_stroke_params * params , const gx_device_color * pdevc , const gx_clip_path * pcpath)"		1287708	0					
ANR	1287710	CompoundStatement		423:0:16494:44953	1287708	0					
ANR	1287711	IdentifierDeclStatement	bool CPSI_mode = gs_currentcpsimode ( pgs -> memory ) ;	424:4:16500:16548	1287708	0	True				
ANR	1287712	IdentifierDecl	CPSI_mode = gs_currentcpsimode ( pgs -> memory )		1287708	0					
ANR	1287713	IdentifierDeclType	bool		1287708	0					
ANR	1287714	Identifier	CPSI_mode		1287708	1					
ANR	1287715	AssignmentExpression	CPSI_mode = gs_currentcpsimode ( pgs -> memory )		1287708	2		=			
ANR	1287716	Identifier	CPSI_mode		1287708	0					
ANR	1287717	CallExpression	gs_currentcpsimode ( pgs -> memory )		1287708	1					
ANR	1287718	Callee	gs_currentcpsimode		1287708	0					
ANR	1287719	Identifier	gs_currentcpsimode		1287708	0					
ANR	1287720	ArgumentList	pgs -> memory		1287708	1					
ANR	1287721	Argument	pgs -> memory		1287708	0					
ANR	1287722	PtrMemberAccess	pgs -> memory		1287708	0					
ANR	1287723	Identifier	pgs		1287708	0					
ANR	1287724	Identifier	memory		1287708	1					
ANR	1287725	IdentifierDeclStatement	bool traditional = CPSI_mode | params -> traditional ;	425:4:16554:16604	1287708	1	True				
ANR	1287726	IdentifierDecl	traditional = CPSI_mode | params -> traditional		1287708	0					
ANR	1287727	IdentifierDeclType	bool		1287708	0					
ANR	1287728	Identifier	traditional		1287708	1					
ANR	1287729	AssignmentExpression	traditional = CPSI_mode | params -> traditional		1287708	2		=			
ANR	1287730	Identifier	traditional		1287708	0					
ANR	1287731	InclusiveOrExpression	CPSI_mode | params -> traditional		1287708	1		|			
ANR	1287732	Identifier	CPSI_mode		1287708	0					
ANR	1287733	PtrMemberAccess	params -> traditional		1287708	1					
ANR	1287734	Identifier	params		1287708	0					
ANR	1287735	Identifier	traditional		1287708	1					
ANR	1287736	IdentifierDeclStatement	stroke_line_proc_t line_proc = ( ( to_path == 0 && ! gx_dc_is_pattern1_color_clist_based ( pdevc ) ) ? ( lop_is_idempotent ( pgs -> log_op ) ? stroke_fill : stroke_add ) : ( traditional ? stroke_add_compat : stroke_add_fast ) ) ;	426:4:16610:16881	1287708	2	True				
ANR	1287737	IdentifierDecl	line_proc = ( ( to_path == 0 && ! gx_dc_is_pattern1_color_clist_based ( pdevc ) ) ? ( lop_is_idempotent ( pgs -> log_op ) ? stroke_fill : stroke_add ) : ( traditional ? stroke_add_compat : stroke_add_fast ) )		1287708	0					
ANR	1287738	IdentifierDeclType	stroke_line_proc_t		1287708	0					
ANR	1287739	Identifier	line_proc		1287708	1					
ANR	1287740	AssignmentExpression	line_proc = ( ( to_path == 0 && ! gx_dc_is_pattern1_color_clist_based ( pdevc ) ) ? ( lop_is_idempotent ( pgs -> log_op ) ? stroke_fill : stroke_add ) : ( traditional ? stroke_add_compat : stroke_add_fast ) )		1287708	2		=			
ANR	1287741	Identifier	line_proc		1287708	0					
ANR	1287742	ConditionalExpression	( to_path == 0 && ! gx_dc_is_pattern1_color_clist_based ( pdevc ) ) ? ( lop_is_idempotent ( pgs -> log_op ) ? stroke_fill : stroke_add ) : ( traditional ? stroke_add_compat : stroke_add_fast )		1287708	1					
ANR	1287743	Condition	to_path == 0 && ! gx_dc_is_pattern1_color_clist_based ( pdevc )		1287708	0					
ANR	1287744	AndExpression	to_path == 0 && ! gx_dc_is_pattern1_color_clist_based ( pdevc )		1287708	0		&&			
ANR	1287745	EqualityExpression	to_path == 0		1287708	0		==			
ANR	1287746	Identifier	to_path		1287708	0					
ANR	1287747	PrimaryExpression	0		1287708	1					
ANR	1287748	UnaryOperationExpression	! gx_dc_is_pattern1_color_clist_based ( pdevc )		1287708	1					
ANR	1287749	UnaryOperator	!		1287708	0					
ANR	1287750	CallExpression	gx_dc_is_pattern1_color_clist_based ( pdevc )		1287708	1					
ANR	1287751	Callee	gx_dc_is_pattern1_color_clist_based		1287708	0					
ANR	1287752	Identifier	gx_dc_is_pattern1_color_clist_based		1287708	0					
ANR	1287753	ArgumentList	pdevc		1287708	1					
ANR	1287754	Argument	pdevc		1287708	0					
ANR	1287755	Identifier	pdevc		1287708	0					
ANR	1287756	ConditionalExpression	lop_is_idempotent ( pgs -> log_op ) ? stroke_fill : stroke_add		1287708	1					
ANR	1287757	Condition	lop_is_idempotent ( pgs -> log_op )		1287708	0					
ANR	1287758	CallExpression	lop_is_idempotent ( pgs -> log_op )		1287708	0					
ANR	1287759	Callee	lop_is_idempotent		1287708	0					
ANR	1287760	Identifier	lop_is_idempotent		1287708	0					
ANR	1287761	ArgumentList	pgs -> log_op		1287708	1					
ANR	1287762	Argument	pgs -> log_op		1287708	0					
ANR	1287763	PtrMemberAccess	pgs -> log_op		1287708	0					
ANR	1287764	Identifier	pgs		1287708	0					
ANR	1287765	Identifier	log_op		1287708	1					
ANR	1287766	Identifier	stroke_fill		1287708	1					
ANR	1287767	Identifier	stroke_add		1287708	2					
ANR	1287768	ConditionalExpression	traditional ? stroke_add_compat : stroke_add_fast		1287708	2					
ANR	1287769	Condition	traditional		1287708	0					
ANR	1287770	Identifier	traditional		1287708	0					
ANR	1287771	Identifier	stroke_add_compat		1287708	1					
ANR	1287772	Identifier	stroke_add_fast		1287708	2					
ANR	1287773	IdentifierDeclStatement	"gs_fixed_rect ibox , cbox ;"	430:4:16887:16911	1287708	3	True				
ANR	1287774	IdentifierDecl	ibox		1287708	0					
ANR	1287775	IdentifierDeclType	gs_fixed_rect		1287708	0					
ANR	1287776	Identifier	ibox		1287708	1					
ANR	1287777	IdentifierDecl	cbox		1287708	1					
ANR	1287778	IdentifierDeclType	gs_fixed_rect		1287708	0					
ANR	1287779	Identifier	cbox		1287708	1					
ANR	1287780	IdentifierDeclStatement	gx_device_clip cdev ;	431:4:16917:16936	1287708	4	True				
ANR	1287781	IdentifierDecl	cdev		1287708	0					
ANR	1287782	IdentifierDeclType	gx_device_clip		1287708	0					
ANR	1287783	Identifier	cdev		1287708	1					
ANR	1287784	IdentifierDeclStatement	gx_device * dev = pdev ;	432:4:16942:16963	1287708	5	True				
ANR	1287785	IdentifierDecl	* dev = pdev		1287708	0					
ANR	1287786	IdentifierDeclType	gx_device *		1287708	0					
ANR	1287787	Identifier	dev		1287708	1					
ANR	1287788	AssignmentExpression	* dev = pdev		1287708	2		=			
ANR	1287789	Identifier	pdev		1287708	0					
ANR	1287790	Identifier	pdev		1287708	1					
ANR	1287791	IdentifierDeclStatement	int code = 0 ;	433:4:16969:16981	1287708	6	True				
ANR	1287792	IdentifierDecl	code = 0		1287708	0					
ANR	1287793	IdentifierDeclType	int		1287708	0					
ANR	1287794	Identifier	code		1287708	1					
ANR	1287795	AssignmentExpression	code = 0		1287708	2		=			
ANR	1287796	Identifier	code		1287708	0					
ANR	1287797	PrimaryExpression	0		1287708	1					
ANR	1287798	IdentifierDeclStatement	gx_fill_params fill_params ;	434:4:16987:17013	1287708	7	True				
ANR	1287799	IdentifierDecl	fill_params		1287708	0					
ANR	1287800	IdentifierDeclType	gx_fill_params		1287708	0					
ANR	1287801	Identifier	fill_params		1287708	1					
ANR	1287802	IdentifierDeclStatement	const gx_line_params * pgs_lp = gs_currentlineparams_inline ( pgs ) ;	435:4:17019:17082	1287708	8	True				
ANR	1287803	IdentifierDecl	* pgs_lp = gs_currentlineparams_inline ( pgs )		1287708	0					
ANR	1287804	IdentifierDeclType	const gx_line_params *		1287708	0					
ANR	1287805	Identifier	pgs_lp		1287708	1					
ANR	1287806	AssignmentExpression	* pgs_lp = gs_currentlineparams_inline ( pgs )		1287708	2		=			
ANR	1287807	Identifier	pgs_lp		1287708	0					
ANR	1287808	CallExpression	gs_currentlineparams_inline ( pgs )		1287708	1					
ANR	1287809	Callee	gs_currentlineparams_inline		1287708	0					
ANR	1287810	Identifier	gs_currentlineparams_inline		1287708	0					
ANR	1287811	ArgumentList	pgs		1287708	1					
ANR	1287812	Argument	pgs		1287708	0					
ANR	1287813	Identifier	pgs		1287708	0					
ANR	1287814	IdentifierDeclStatement	int dash_count = pgs_lp -> dash . pattern_size ;	436:4:17088:17130	1287708	9	True				
ANR	1287815	IdentifierDecl	dash_count = pgs_lp -> dash . pattern_size		1287708	0					
ANR	1287816	IdentifierDeclType	int		1287708	0					
ANR	1287817	Identifier	dash_count		1287708	1					
ANR	1287818	AssignmentExpression	dash_count = pgs_lp -> dash . pattern_size		1287708	2		=			
ANR	1287819	Identifier	dash_count		1287708	0					
ANR	1287820	MemberAccess	pgs_lp -> dash . pattern_size		1287708	1					
ANR	1287821	PtrMemberAccess	pgs_lp -> dash		1287708	0					
ANR	1287822	Identifier	pgs_lp		1287708	0					
ANR	1287823	Identifier	dash		1287708	1					
ANR	1287824	Identifier	pattern_size		1287708	1					
ANR	1287825	IdentifierDeclStatement	"gx_path fpath , dpath ;"	437:4:17136:17156	1287708	10	True				
ANR	1287826	IdentifierDecl	fpath		1287708	0					
ANR	1287827	IdentifierDeclType	gx_path		1287708	0					
ANR	1287828	Identifier	fpath		1287708	1					
ANR	1287829	IdentifierDecl	dpath		1287708	1					
ANR	1287830	IdentifierDeclType	gx_path		1287708	0					
ANR	1287831	Identifier	dpath		1287708	1					
ANR	1287832	IdentifierDeclStatement	gx_path stroke_path_body ;	438:4:17162:17186	1287708	11	True				
ANR	1287833	IdentifierDecl	stroke_path_body		1287708	0					
ANR	1287834	IdentifierDeclType	gx_path		1287708	0					
ANR	1287835	Identifier	stroke_path_body		1287708	1					
ANR	1287836	IdentifierDeclStatement	gx_path stroke_path_reverse ;	439:4:17192:17219	1287708	12	True				
ANR	1287837	IdentifierDecl	stroke_path_reverse		1287708	0					
ANR	1287838	IdentifierDeclType	gx_path		1287708	0					
ANR	1287839	Identifier	stroke_path_reverse		1287708	1					
ANR	1287840	IdentifierDeclStatement	gx_path * to_path_reverse = NULL ;	440:4:17225:17256	1287708	13	True				
ANR	1287841	IdentifierDecl	* to_path_reverse = NULL		1287708	0					
ANR	1287842	IdentifierDeclType	gx_path *		1287708	0					
ANR	1287843	Identifier	to_path_reverse		1287708	1					
ANR	1287844	AssignmentExpression	* to_path_reverse = NULL		1287708	2		=			
ANR	1287845	Identifier	NULL		1287708	0					
ANR	1287846	Identifier	NULL		1287708	1					
ANR	1287847	IdentifierDeclStatement	const gx_path * spath ;	441:4:17262:17282	1287708	14	True				
ANR	1287848	IdentifierDecl	* spath		1287708	0					
ANR	1287849	IdentifierDeclType	const gx_path *		1287708	0					
ANR	1287850	Identifier	spath		1287708	1					
ANR	1287851	IdentifierDeclStatement	"float xx = pgs -> ctm . xx , xy = pgs -> ctm . xy ;"	442:4:17288:17328	1287708	15	True				
ANR	1287852	IdentifierDecl	xx = pgs -> ctm . xx		1287708	0					
ANR	1287853	IdentifierDeclType	float		1287708	0					
ANR	1287854	Identifier	xx		1287708	1					
ANR	1287855	AssignmentExpression	xx = pgs -> ctm . xx		1287708	2		=			
ANR	1287856	Identifier	xx		1287708	0					
ANR	1287857	MemberAccess	pgs -> ctm . xx		1287708	1					
ANR	1287858	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1287859	Identifier	pgs		1287708	0					
ANR	1287860	Identifier	ctm		1287708	1					
ANR	1287861	Identifier	xx		1287708	1					
ANR	1287862	IdentifierDecl	xy = pgs -> ctm . xy		1287708	1					
ANR	1287863	IdentifierDeclType	float		1287708	0					
ANR	1287864	Identifier	xy		1287708	1					
ANR	1287865	AssignmentExpression	xy = pgs -> ctm . xy		1287708	2		=			
ANR	1287866	Identifier	xy		1287708	0					
ANR	1287867	MemberAccess	pgs -> ctm . xy		1287708	1					
ANR	1287868	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1287869	Identifier	pgs		1287708	0					
ANR	1287870	Identifier	ctm		1287708	1					
ANR	1287871	Identifier	xy		1287708	1					
ANR	1287872	IdentifierDeclStatement	"float yx = pgs -> ctm . yx , yy = pgs -> ctm . yy ;"	443:4:17334:17374	1287708	16	True				
ANR	1287873	IdentifierDecl	yx = pgs -> ctm . yx		1287708	0					
ANR	1287874	IdentifierDeclType	float		1287708	0					
ANR	1287875	Identifier	yx		1287708	1					
ANR	1287876	AssignmentExpression	yx = pgs -> ctm . yx		1287708	2		=			
ANR	1287877	Identifier	yx		1287708	0					
ANR	1287878	MemberAccess	pgs -> ctm . yx		1287708	1					
ANR	1287879	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1287880	Identifier	pgs		1287708	0					
ANR	1287881	Identifier	ctm		1287708	1					
ANR	1287882	Identifier	yx		1287708	1					
ANR	1287883	IdentifierDecl	yy = pgs -> ctm . yy		1287708	1					
ANR	1287884	IdentifierDeclType	float		1287708	0					
ANR	1287885	Identifier	yy		1287708	1					
ANR	1287886	AssignmentExpression	yy = pgs -> ctm . yy		1287708	2		=			
ANR	1287887	Identifier	yy		1287708	0					
ANR	1287888	MemberAccess	pgs -> ctm . yy		1287708	1					
ANR	1287889	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1287890	Identifier	pgs		1287708	0					
ANR	1287891	Identifier	ctm		1287708	1					
ANR	1287892	Identifier	yy		1287708	1					
ANR	1287893	IdentifierDeclStatement	int uniform ;	449:4:17572:17583	1287708	17	True				
ANR	1287894	IdentifierDecl	uniform		1287708	0					
ANR	1287895	IdentifierDeclType	int		1287708	0					
ANR	1287896	Identifier	uniform		1287708	1					
ANR	1287897	IdentifierDeclStatement	bool reflected ;	450:4:17589:17603	1287708	18	True				
ANR	1287898	IdentifierDecl	reflected		1287708	0					
ANR	1287899	IdentifierDeclType	bool		1287708	0					
ANR	1287900	Identifier	reflected		1287708	1					
ANR	1287901	Statement	orientation	451:4:17609:17619	1287708	19	True				
ANR	1287902	Statement	orient	451:16:17621:17626	1287708	20	True				
ANR	1287903	Statement	=	451:23:17628:17628	1287708	21	True				
ANR	1287904	Statement	(	452:8:17638:17638	1287708	22	True				
ANR	1287905	Statement	is_fzero2	454:9:17677:17685	1287708	23	True				
ANR	1287906	Statement	(	454:18:17686:17686	1287708	24	True				
ANR	1287907	Statement	xy	454:19:17687:17688	1287708	25	True				
ANR	1287908	Statement	","	454:21:17689:17689	1287708	26	True				
ANR	1287909	Statement	yx	454:23:17691:17692	1287708	27	True				
ANR	1287910	Statement	)	454:25:17693:17693	1287708	28	True				
ANR	1287911	Statement	?	454:27:17695:17695	1287708	29	True				
ANR	1287912	Statement	(	455:9:17706:17706	1287708	30	True				
ANR	1287913	Statement	uniform	455:10:17707:17713	1287708	31	True				
ANR	1287914	Statement	=	455:18:17715:17715	1287708	32	True				
ANR	1287915	Statement	(	455:20:17717:17717	1287708	33	True				
ANR	1287916	Statement	xx	455:21:17718:17719	1287708	34	True				
ANR	1287917	Statement	==	455:24:17721:17722	1287708	35	True				
ANR	1287918	Statement	yy	455:27:17724:17725	1287708	36	True				
ANR	1287919	Statement	?	455:30:17727:17727	1287708	37	True				
ANR	1287920	Label	1 :	455:32:17729:17731	1287708	38	True				
ANR	1287921	Statement	xx	455:36:17733:17734	1287708	39	True				
ANR	1287922	Statement	==	455:39:17736:17737	1287708	40	True				
ANR	1287923	Statement	-	455:42:17739:17739	1287708	41	True				
ANR	1287924	Statement	yy	455:43:17740:17741	1287708	42	True				
ANR	1287925	Statement	?	455:46:17743:17743	1287708	43	True				
ANR	1287926	Statement	-	455:48:17745:17745	1287708	44	True				
ANR	1287927	Label	1 :	455:49:17746:17748	1287708	45	True				
ANR	1287928	Statement	0	455:53:17750:17750	1287708	46	True				
ANR	1287929	Statement	)	455:54:17751:17751	1287708	47	True				
ANR	1287930	Statement	","	455:55:17752:17752	1287708	48	True				
ANR	1287931	Statement	reflected	456:10:17764:17772	1287708	49	True				
ANR	1287932	Statement	=	456:20:17774:17774	1287708	50	True				
ANR	1287933	Statement	(	456:22:17776:17776	1287708	51	True				
ANR	1287934	Statement	uniform	456:23:17777:17783	1287708	52	True				
ANR	1287935	Statement	?	456:31:17785:17785	1287708	53	True				
ANR	1287936	Statement	uniform	456:33:17787:17793	1287708	54	True				
ANR	1287937	Statement	<	456:41:17795:17795	1287708	55	True				
ANR	1287938	Label	0 :	456:43:17797:17799	1287708	56	True				
ANR	1287939	Statement	(	456:47:17801:17801	1287708	57	True				
ANR	1287940	Statement	xx	456:48:17802:17803	1287708	58	True				
ANR	1287941	Statement	<	456:51:17805:17805	1287708	59	True				
ANR	1287942	Statement	0	456:53:17807:17807	1287708	60	True				
ANR	1287943	Statement	)	456:54:17808:17808	1287708	61	True				
ANR	1287944	Statement	!=	456:56:17810:17811	1287708	62	True				
ANR	1287945	Statement	(	456:59:17813:17813	1287708	63	True				
ANR	1287946	Statement	yy	456:60:17814:17815	1287708	64	True				
ANR	1287947	Statement	<	456:63:17817:17817	1287708	65	True				
ANR	1287948	Statement	0	456:65:17819:17819	1287708	66	True				
ANR	1287949	Statement	)	456:66:17820:17820	1287708	67	True				
ANR	1287950	Statement	)	456:67:17821:17821	1287708	68	True				
ANR	1287951	Statement	","	456:68:17822:17822	1287708	69	True				
ANR	1287952	Statement	orient_portrait	457:10:17834:17848	1287708	70	True				
ANR	1287953	Statement	)	457:25:17849:17849	1287708	71	True				
ANR	1287954	Statement	:	457:27:17851:17851	1287708	72	True				
ANR	1287955	Statement	is_fzero2	458:9:17862:17870	1287708	73	True				
ANR	1287956	Statement	(	458:18:17871:17871	1287708	74	True				
ANR	1287957	Statement	xx	458:19:17872:17873	1287708	75	True				
ANR	1287958	Statement	","	458:21:17874:17874	1287708	76	True				
ANR	1287959	Statement	yy	458:23:17876:17877	1287708	77	True				
ANR	1287960	Statement	)	458:25:17878:17878	1287708	78	True				
ANR	1287961	Statement	?	458:27:17880:17880	1287708	79	True				
ANR	1287962	Statement	(	459:9:17891:17891	1287708	80	True				
ANR	1287963	Statement	uniform	459:10:17892:17898	1287708	81	True				
ANR	1287964	Statement	=	459:18:17900:17900	1287708	82	True				
ANR	1287965	Statement	(	459:20:17902:17902	1287708	83	True				
ANR	1287966	Statement	xy	459:21:17903:17904	1287708	84	True				
ANR	1287967	Statement	==	459:24:17906:17907	1287708	85	True				
ANR	1287968	Statement	yx	459:27:17909:17910	1287708	86	True				
ANR	1287969	Statement	?	459:30:17912:17912	1287708	87	True				
ANR	1287970	Statement	-	459:32:17914:17914	1287708	88	True				
ANR	1287971	Label	1 :	459:33:17915:17917	1287708	89	True				
ANR	1287972	Statement	xy	459:37:17919:17920	1287708	90	True				
ANR	1287973	Statement	==	459:40:17922:17923	1287708	91	True				
ANR	1287974	Statement	-	459:43:17925:17925	1287708	92	True				
ANR	1287975	Statement	yx	459:44:17926:17927	1287708	93	True				
ANR	1287976	Statement	?	459:47:17929:17929	1287708	94	True				
ANR	1287977	Label	1 :	459:49:17931:17933	1287708	95	True				
ANR	1287978	Statement	0	459:53:17935:17935	1287708	96	True				
ANR	1287979	Statement	)	459:54:17936:17936	1287708	97	True				
ANR	1287980	Statement	","	459:55:17937:17937	1287708	98	True				
ANR	1287981	Statement	reflected	460:10:17949:17957	1287708	99	True				
ANR	1287982	Statement	=	460:20:17959:17959	1287708	100	True				
ANR	1287983	Statement	(	460:22:17961:17961	1287708	101	True				
ANR	1287984	Statement	uniform	460:23:17962:17968	1287708	102	True				
ANR	1287985	Statement	?	460:31:17970:17970	1287708	103	True				
ANR	1287986	Statement	uniform	460:33:17972:17978	1287708	104	True				
ANR	1287987	Statement	<	460:41:17980:17980	1287708	105	True				
ANR	1287988	Label	0 :	460:43:17982:17984	1287708	106	True				
ANR	1287989	Statement	(	460:47:17986:17986	1287708	107	True				
ANR	1287990	Statement	xy	460:48:17987:17988	1287708	108	True				
ANR	1287991	Statement	<	460:51:17990:17990	1287708	109	True				
ANR	1287992	Statement	0	460:53:17992:17992	1287708	110	True				
ANR	1287993	Statement	)	460:54:17993:17993	1287708	111	True				
ANR	1287994	Statement	==	460:56:17995:17996	1287708	112	True				
ANR	1287995	Statement	(	460:59:17998:17998	1287708	113	True				
ANR	1287996	Statement	yx	460:60:17999:18000	1287708	114	True				
ANR	1287997	Statement	<	460:63:18002:18002	1287708	115	True				
ANR	1287998	Statement	0	460:65:18004:18004	1287708	116	True				
ANR	1287999	Statement	)	460:66:18005:18005	1287708	117	True				
ANR	1288000	Statement	)	460:67:18006:18006	1287708	118	True				
ANR	1288001	Statement	","	460:68:18007:18007	1287708	119	True				
ANR	1288002	Statement	orient_landscape	461:10:18019:18034	1287708	120	True				
ANR	1288003	Statement	)	461:26:18035:18035	1287708	121	True				
ANR	1288004	Statement	:	461:28:18037:18037	1287708	122	True				
ANR	1288005	Statement	(	465:9:18157:18157	1287708	123	True				
ANR	1288006	Statement	uniform	465:10:18158:18164	1287708	124	True				
ANR	1288007	Statement	=	465:18:18166:18166	1287708	125	True				
ANR	1288008	Statement	0	465:20:18168:18168	1287708	126	True				
ANR	1288009	Statement	","	465:21:18169:18169	1287708	127	True				
ANR	1288010	Statement	reflected	466:10:18181:18189	1287708	128	True				
ANR	1288011	Statement	=	466:20:18191:18191	1287708	129	True				
ANR	1288012	Statement	xy	466:22:18193:18194	1287708	130	True				
ANR	1288013	Statement	*	466:25:18196:18196	1287708	131	True				
ANR	1288014	Statement	yx	466:27:18198:18199	1287708	132	True				
ANR	1288015	Statement	>	466:30:18201:18201	1287708	133	True				
ANR	1288016	Statement	xx	466:32:18203:18204	1287708	134	True				
ANR	1288017	Statement	*	466:35:18206:18206	1287708	135	True				
ANR	1288018	Statement	yy	466:37:18208:18209	1287708	136	True				
ANR	1288019	Statement	","	466:39:18210:18210	1287708	137	True				
ANR	1288020	Statement	orient_other	467:10:18222:18233	1287708	138	True				
ANR	1288021	Statement	)	467:22:18234:18234	1287708	139	True				
ANR	1288022	Statement	)	467:23:18235:18235	1287708	140	True				
ANR	1288023	ExpressionStatement		467:24:18236:18236	1287708	141	True				
ANR	1288024	IdentifierDeclStatement	segment_notes not_first = ( ! is_fzero ( pgs -> line_params . dot_length ) ? sn_not_first : sn_none ) ;	476:4:18580:18679	1287708	142	True				
ANR	1288025	IdentifierDecl	not_first = ( ! is_fzero ( pgs -> line_params . dot_length ) ? sn_not_first : sn_none )		1287708	0					
ANR	1288026	IdentifierDeclType	segment_notes		1287708	0					
ANR	1288027	Identifier	not_first		1287708	1					
ANR	1288028	AssignmentExpression	not_first = ( ! is_fzero ( pgs -> line_params . dot_length ) ? sn_not_first : sn_none )		1287708	2		=			
ANR	1288029	Identifier	not_first		1287708	0					
ANR	1288030	ConditionalExpression	! is_fzero ( pgs -> line_params . dot_length ) ? sn_not_first : sn_none		1287708	1					
ANR	1288031	Condition	! is_fzero ( pgs -> line_params . dot_length )		1287708	0					
ANR	1288032	UnaryOperationExpression	! is_fzero ( pgs -> line_params . dot_length )		1287708	0					
ANR	1288033	UnaryOperator	!		1287708	0					
ANR	1288034	CallExpression	is_fzero ( pgs -> line_params . dot_length )		1287708	1					
ANR	1288035	Callee	is_fzero		1287708	0					
ANR	1288036	Identifier	is_fzero		1287708	0					
ANR	1288037	ArgumentList	pgs -> line_params . dot_length		1287708	1					
ANR	1288038	Argument	pgs -> line_params . dot_length		1287708	0					
ANR	1288039	MemberAccess	pgs -> line_params . dot_length		1287708	0					
ANR	1288040	PtrMemberAccess	pgs -> line_params		1287708	0					
ANR	1288041	Identifier	pgs		1287708	0					
ANR	1288042	Identifier	line_params		1287708	1					
ANR	1288043	Identifier	dot_length		1287708	1					
ANR	1288044	Identifier	sn_not_first		1287708	1					
ANR	1288045	Identifier	sn_none		1287708	2					
ANR	1288046	IdentifierDeclStatement	gs_line_join curve_join = ( pgs_lp -> curve_join >= 0 ? ( gs_line_join ) pgs_lp -> curve_join : pgs_lp -> join == gs_join_none || pgs_lp -> join == gs_join_round ? gs_join_bevel : pgs_lp -> join ) ;	481:4:18748:18958	1287708	143	True				
ANR	1288047	IdentifierDecl	curve_join = ( pgs_lp -> curve_join >= 0 ? ( gs_line_join ) pgs_lp -> curve_join : pgs_lp -> join == gs_join_none || pgs_lp -> join == gs_join_round ? gs_join_bevel : pgs_lp -> join )		1287708	0					
ANR	1288048	IdentifierDeclType	gs_line_join		1287708	0					
ANR	1288049	Identifier	curve_join		1287708	1					
ANR	1288050	AssignmentExpression	curve_join = ( pgs_lp -> curve_join >= 0 ? ( gs_line_join ) pgs_lp -> curve_join : pgs_lp -> join == gs_join_none || pgs_lp -> join == gs_join_round ? gs_join_bevel : pgs_lp -> join )		1287708	2		=			
ANR	1288051	Identifier	curve_join		1287708	0					
ANR	1288052	ConditionalExpression	pgs_lp -> curve_join >= 0 ? ( gs_line_join ) pgs_lp -> curve_join : pgs_lp -> join == gs_join_none || pgs_lp -> join == gs_join_round ? gs_join_bevel : pgs_lp -> join		1287708	1					
ANR	1288053	Condition	pgs_lp -> curve_join >= 0		1287708	0					
ANR	1288054	RelationalExpression	pgs_lp -> curve_join >= 0		1287708	0		>=			
ANR	1288055	PtrMemberAccess	pgs_lp -> curve_join		1287708	0					
ANR	1288056	Identifier	pgs_lp		1287708	0					
ANR	1288057	Identifier	curve_join		1287708	1					
ANR	1288058	PrimaryExpression	0		1287708	1					
ANR	1288059	CastExpression	( gs_line_join ) pgs_lp -> curve_join		1287708	1					
ANR	1288060	CastTarget	gs_line_join		1287708	0					
ANR	1288061	PtrMemberAccess	pgs_lp -> curve_join		1287708	1					
ANR	1288062	Identifier	pgs_lp		1287708	0					
ANR	1288063	Identifier	curve_join		1287708	1					
ANR	1288064	ConditionalExpression	pgs_lp -> join == gs_join_none || pgs_lp -> join == gs_join_round ? gs_join_bevel : pgs_lp -> join		1287708	2					
ANR	1288065	Condition	pgs_lp -> join == gs_join_none || pgs_lp -> join == gs_join_round		1287708	0					
ANR	1288066	OrExpression	pgs_lp -> join == gs_join_none || pgs_lp -> join == gs_join_round		1287708	0		||			
ANR	1288067	EqualityExpression	pgs_lp -> join == gs_join_none		1287708	0		==			
ANR	1288068	PtrMemberAccess	pgs_lp -> join		1287708	0					
ANR	1288069	Identifier	pgs_lp		1287708	0					
ANR	1288070	Identifier	join		1287708	1					
ANR	1288071	Identifier	gs_join_none		1287708	1					
ANR	1288072	EqualityExpression	pgs_lp -> join == gs_join_round		1287708	1		==			
ANR	1288073	PtrMemberAccess	pgs_lp -> join		1287708	0					
ANR	1288074	Identifier	pgs_lp		1287708	0					
ANR	1288075	Identifier	join		1287708	1					
ANR	1288076	Identifier	gs_join_round		1287708	1					
ANR	1288077	Identifier	gs_join_bevel		1287708	1					
ANR	1288078	PtrMemberAccess	pgs_lp -> join		1287708	2					
ANR	1288079	Identifier	pgs_lp		1287708	0					
ANR	1288080	Identifier	join		1287708	1					
ANR	1288081	IdentifierDeclStatement	float line_width = pgs_lp -> half_width ;	485:4:18964:19001	1287708	144	True				
ANR	1288082	IdentifierDecl	line_width = pgs_lp -> half_width		1287708	0					
ANR	1288083	IdentifierDeclType	float		1287708	0					
ANR	1288084	Identifier	line_width		1287708	1					
ANR	1288085	AssignmentExpression	line_width = pgs_lp -> half_width		1287708	2		=			
ANR	1288086	Identifier	line_width		1287708	0					
ANR	1288087	PtrMemberAccess	pgs_lp -> half_width		1287708	1					
ANR	1288088	Identifier	pgs_lp		1287708	0					
ANR	1288089	Identifier	half_width		1287708	1					
ANR	1288090	IdentifierDeclStatement	bool always_thin ;	486:4:19042:19058	1287708	145	True				
ANR	1288091	IdentifierDecl	always_thin		1287708	0					
ANR	1288092	IdentifierDeclType	bool		1287708	0					
ANR	1288093	Identifier	always_thin		1287708	1					
ANR	1288094	IdentifierDeclStatement	double line_width_and_scale ;	487:4:19064:19091	1287708	146	True				
ANR	1288095	IdentifierDecl	line_width_and_scale		1287708	0					
ANR	1288096	IdentifierDeclType	double		1287708	0					
ANR	1288097	Identifier	line_width_and_scale		1287708	1					
ANR	1288098	IdentifierDeclStatement	double device_line_width_scale = 0 ;	488:4:19097:19131	1287708	147	True				
ANR	1288099	IdentifierDecl	device_line_width_scale = 0		1287708	0					
ANR	1288100	IdentifierDeclType	double		1287708	0					
ANR	1288101	Identifier	device_line_width_scale		1287708	1					
ANR	1288102	AssignmentExpression	device_line_width_scale = 0		1287708	2		=			
ANR	1288103	Identifier	device_line_width_scale		1287708	0					
ANR	1288104	PrimaryExpression	0		1287708	1					
ANR	1288105	IdentifierDeclStatement	double device_dot_length = pgs_lp -> dot_length * fixed_1 ;	489:4:19159:19214	1287708	148	True				
ANR	1288106	IdentifierDecl	device_dot_length = pgs_lp -> dot_length * fixed_1		1287708	0					
ANR	1288107	IdentifierDeclType	double		1287708	0					
ANR	1288108	Identifier	device_dot_length		1287708	1					
ANR	1288109	AssignmentExpression	device_dot_length = pgs_lp -> dot_length * fixed_1		1287708	2		=			
ANR	1288110	Identifier	device_dot_length		1287708	0					
ANR	1288111	MultiplicativeExpression	pgs_lp -> dot_length * fixed_1		1287708	1		*			
ANR	1288112	PtrMemberAccess	pgs_lp -> dot_length		1287708	0					
ANR	1288113	Identifier	pgs_lp		1287708	0					
ANR	1288114	Identifier	dot_length		1287708	1					
ANR	1288115	Identifier	fixed_1		1287708	1					
ANR	1288116	IdentifierDeclStatement	const subpath * psub ;	490:4:19220:19239	1287708	149	True				
ANR	1288117	IdentifierDecl	* psub		1287708	0					
ANR	1288118	IdentifierDeclType	const subpath *		1287708	0					
ANR	1288119	Identifier	psub		1287708	1					
ANR	1288120	IdentifierDeclStatement	gs_matrix initial_matrix ;	491:4:19245:19269	1287708	150	True				
ANR	1288121	IdentifierDecl	initial_matrix		1287708	0					
ANR	1288122	IdentifierDeclType	gs_matrix		1287708	0					
ANR	1288123	Identifier	initial_matrix		1287708	1					
ANR	1288124	IdentifierDeclStatement	bool initial_matrix_reflected ;	492:4:19275:19304	1287708	151	True				
ANR	1288125	IdentifierDecl	initial_matrix_reflected		1287708	0					
ANR	1288126	IdentifierDeclType	bool		1287708	0					
ANR	1288127	Identifier	initial_matrix_reflected		1287708	1					
ANR	1288128	IdentifierDeclStatement	note_flags flags ;	493:4:19310:19326	1287708	152	True				
ANR	1288129	IdentifierDecl	flags		1287708	0					
ANR	1288130	IdentifierDeclType	note_flags		1287708	0					
ANR	1288131	Identifier	flags		1287708	1					
ANR	1288132	ExpressionStatement	"( * dev_proc ( pdev , get_initial_matrix ) ) ( pdev , & initial_matrix )"	495:4:19333:19394	1287708	153	True				
ANR	1288133	CallExpression	"( * dev_proc ( pdev , get_initial_matrix ) ) ( pdev , & initial_matrix )"		1287708	0					
ANR	1288134	Callee	"* dev_proc ( pdev , get_initial_matrix )"		1287708	0					
ANR	1288135	UnaryOperationExpression	"* dev_proc ( pdev , get_initial_matrix )"		1287708	0					
ANR	1288136	UnaryOperator	*		1287708	0					
ANR	1288137	CallExpression	"dev_proc ( pdev , get_initial_matrix )"		1287708	1					
ANR	1288138	Callee	dev_proc		1287708	0					
ANR	1288139	Identifier	dev_proc		1287708	0					
ANR	1288140	ArgumentList	pdev		1287708	1					
ANR	1288141	Argument	pdev		1287708	0					
ANR	1288142	Identifier	pdev		1287708	0					
ANR	1288143	Argument	get_initial_matrix		1287708	1					
ANR	1288144	Identifier	get_initial_matrix		1287708	0					
ANR	1288145	ArgumentList	pdev		1287708	1					
ANR	1288146	Argument	pdev		1287708	0					
ANR	1288147	Identifier	pdev		1287708	0					
ANR	1288148	Argument	& initial_matrix		1287708	1					
ANR	1288149	UnaryOperationExpression	& initial_matrix		1287708	0					
ANR	1288150	UnaryOperator	&		1287708	0					
ANR	1288151	Identifier	initial_matrix		1287708	1					
ANR	1288152	ExpressionStatement	initial_matrix_reflected = initial_matrix . xy * initial_matrix . yx > initial_matrix . xx * initial_matrix . yy	496:4:19400:19535	1287708	154	True				
ANR	1288153	AssignmentExpression	initial_matrix_reflected = initial_matrix . xy * initial_matrix . yx > initial_matrix . xx * initial_matrix . yy		1287708	0		=			
ANR	1288154	Identifier	initial_matrix_reflected		1287708	0					
ANR	1288155	RelationalExpression	initial_matrix . xy * initial_matrix . yx > initial_matrix . xx * initial_matrix . yy		1287708	1		>			
ANR	1288156	MultiplicativeExpression	initial_matrix . xy * initial_matrix . yx		1287708	0		*			
ANR	1288157	MemberAccess	initial_matrix . xy		1287708	0					
ANR	1288158	Identifier	initial_matrix		1287708	0					
ANR	1288159	Identifier	xy		1287708	1					
ANR	1288160	MemberAccess	initial_matrix . yx		1287708	1					
ANR	1288161	Identifier	initial_matrix		1287708	0					
ANR	1288162	Identifier	yx		1287708	1					
ANR	1288163	MultiplicativeExpression	initial_matrix . xx * initial_matrix . yy		1287708	1		*			
ANR	1288164	MemberAccess	initial_matrix . xx		1287708	0					
ANR	1288165	Identifier	initial_matrix		1287708	0					
ANR	1288166	Identifier	xx		1287708	1					
ANR	1288167	MemberAccess	initial_matrix . yy		1287708	1					
ANR	1288168	Identifier	initial_matrix		1287708	0					
ANR	1288169	Identifier	yy		1287708	1					
ANR	1288170	IfStatement	if ( gs_debug_c ( 'o' ) )		1287708	155					
ANR	1288171	Condition	gs_debug_c ( 'o' )	500:8:19559:19573	1287708	0	True				
ANR	1288172	CallExpression	gs_debug_c ( 'o' )		1287708	0					
ANR	1288173	Callee	gs_debug_c		1287708	0					
ANR	1288174	Identifier	gs_debug_c		1287708	0					
ANR	1288175	ArgumentList	'o'		1287708	1					
ANR	1288176	Argument	'o'		1287708	0					
ANR	1288177	PrimaryExpression	'o'		1287708	0					
ANR	1288178	CompoundStatement		79:8:3091:3096	1287708	1					
ANR	1288179	IdentifierDeclStatement	int i ;	501:8:19586:19591	1287708	0	True				
ANR	1288180	IdentifierDecl	i		1287708	0					
ANR	1288181	IdentifierDeclType	int		1287708	0					
ANR	1288182	Identifier	i		1287708	1					
ANR	1288183	ExpressionStatement	"dmlprintf4 ( ppath -> memory , ""[o]half_width=%f, start_cap=%d, end_cap=%d, dash_cap=%d,\\n"" , pgs_lp -> half_width , ( int ) pgs_lp -> start_cap , ( int ) pgs_lp -> end_cap , ( int ) pgs_lp -> dash_cap )"	503:8:19602:19816	1287708	1	True				
ANR	1288184	CallExpression	"dmlprintf4 ( ppath -> memory , ""[o]half_width=%f, start_cap=%d, end_cap=%d, dash_cap=%d,\\n"" , pgs_lp -> half_width , ( int ) pgs_lp -> start_cap , ( int ) pgs_lp -> end_cap , ( int ) pgs_lp -> dash_cap )"		1287708	0					
ANR	1288185	Callee	dmlprintf4		1287708	0					
ANR	1288186	Identifier	dmlprintf4		1287708	0					
ANR	1288187	ArgumentList	ppath -> memory		1287708	1					
ANR	1288188	Argument	ppath -> memory		1287708	0					
ANR	1288189	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1288190	Identifier	ppath		1287708	0					
ANR	1288191	Identifier	memory		1287708	1					
ANR	1288192	Argument	"""[o]half_width=%f, start_cap=%d, end_cap=%d, dash_cap=%d,\\n"""		1287708	1					
ANR	1288193	PrimaryExpression	"""[o]half_width=%f, start_cap=%d, end_cap=%d, dash_cap=%d,\\n"""		1287708	0					
ANR	1288194	Argument	pgs_lp -> half_width		1287708	2					
ANR	1288195	PtrMemberAccess	pgs_lp -> half_width		1287708	0					
ANR	1288196	Identifier	pgs_lp		1287708	0					
ANR	1288197	Identifier	half_width		1287708	1					
ANR	1288198	Argument	( int ) pgs_lp -> start_cap		1287708	3					
ANR	1288199	CastExpression	( int ) pgs_lp -> start_cap		1287708	0					
ANR	1288200	CastTarget	int		1287708	0					
ANR	1288201	PtrMemberAccess	pgs_lp -> start_cap		1287708	1					
ANR	1288202	Identifier	pgs_lp		1287708	0					
ANR	1288203	Identifier	start_cap		1287708	1					
ANR	1288204	Argument	( int ) pgs_lp -> end_cap		1287708	4					
ANR	1288205	CastExpression	( int ) pgs_lp -> end_cap		1287708	0					
ANR	1288206	CastTarget	int		1287708	0					
ANR	1288207	PtrMemberAccess	pgs_lp -> end_cap		1287708	1					
ANR	1288208	Identifier	pgs_lp		1287708	0					
ANR	1288209	Identifier	end_cap		1287708	1					
ANR	1288210	Argument	( int ) pgs_lp -> dash_cap		1287708	5					
ANR	1288211	CastExpression	( int ) pgs_lp -> dash_cap		1287708	0					
ANR	1288212	CastTarget	int		1287708	0					
ANR	1288213	PtrMemberAccess	pgs_lp -> dash_cap		1287708	1					
ANR	1288214	Identifier	pgs_lp		1287708	0					
ANR	1288215	Identifier	dash_cap		1287708	1					
ANR	1288216	ExpressionStatement	"dmlprintf3 ( ppath -> memory , ""   join=%d, miter_limit=%f, miter_check=%f,\\n"" , ( int ) pgs_lp -> join , pgs_lp -> miter_limit , pgs_lp -> miter_check )"	506:8:19826:19999	1287708	2	True				
ANR	1288217	CallExpression	"dmlprintf3 ( ppath -> memory , ""   join=%d, miter_limit=%f, miter_check=%f,\\n"" , ( int ) pgs_lp -> join , pgs_lp -> miter_limit , pgs_lp -> miter_check )"		1287708	0					
ANR	1288218	Callee	dmlprintf3		1287708	0					
ANR	1288219	Identifier	dmlprintf3		1287708	0					
ANR	1288220	ArgumentList	ppath -> memory		1287708	1					
ANR	1288221	Argument	ppath -> memory		1287708	0					
ANR	1288222	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1288223	Identifier	ppath		1287708	0					
ANR	1288224	Identifier	memory		1287708	1					
ANR	1288225	Argument	"""   join=%d, miter_limit=%f, miter_check=%f,\\n"""		1287708	1					
ANR	1288226	PrimaryExpression	"""   join=%d, miter_limit=%f, miter_check=%f,\\n"""		1287708	0					
ANR	1288227	Argument	( int ) pgs_lp -> join		1287708	2					
ANR	1288228	CastExpression	( int ) pgs_lp -> join		1287708	0					
ANR	1288229	CastTarget	int		1287708	0					
ANR	1288230	PtrMemberAccess	pgs_lp -> join		1287708	1					
ANR	1288231	Identifier	pgs_lp		1287708	0					
ANR	1288232	Identifier	join		1287708	1					
ANR	1288233	Argument	pgs_lp -> miter_limit		1287708	3					
ANR	1288234	PtrMemberAccess	pgs_lp -> miter_limit		1287708	0					
ANR	1288235	Identifier	pgs_lp		1287708	0					
ANR	1288236	Identifier	miter_limit		1287708	1					
ANR	1288237	Argument	pgs_lp -> miter_check		1287708	4					
ANR	1288238	PtrMemberAccess	pgs_lp -> miter_check		1287708	0					
ANR	1288239	Identifier	pgs_lp		1287708	0					
ANR	1288240	Identifier	miter_check		1287708	1					
ANR	1288241	ExpressionStatement	"dmlprintf1 ( ppath -> memory , ""   dash pattern=%d"" , dash_count )"	509:8:20009:20068	1287708	3	True				
ANR	1288242	CallExpression	"dmlprintf1 ( ppath -> memory , ""   dash pattern=%d"" , dash_count )"		1287708	0					
ANR	1288243	Callee	dmlprintf1		1287708	0					
ANR	1288244	Identifier	dmlprintf1		1287708	0					
ANR	1288245	ArgumentList	ppath -> memory		1287708	1					
ANR	1288246	Argument	ppath -> memory		1287708	0					
ANR	1288247	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1288248	Identifier	ppath		1287708	0					
ANR	1288249	Identifier	memory		1287708	1					
ANR	1288250	Argument	"""   dash pattern=%d"""		1287708	1					
ANR	1288251	PrimaryExpression	"""   dash pattern=%d"""		1287708	0					
ANR	1288252	Argument	dash_count		1287708	2					
ANR	1288253	Identifier	dash_count		1287708	0					
ANR	1288254	ForStatement	for ( i = 0 ; i < dash_count ; i ++ )		1287708	4					
ANR	1288255	ForInit	i = 0 ;	510:13:20083:20088	1287708	0	True				
ANR	1288256	AssignmentExpression	i = 0		1287708	0		=			
ANR	1288257	Identifier	i		1287708	0					
ANR	1288258	PrimaryExpression	0		1287708	1					
ANR	1288259	Condition	i < dash_count	510:20:20090:20103	1287708	1	True				
ANR	1288260	RelationalExpression	i < dash_count		1287708	0		<			
ANR	1288261	Identifier	i		1287708	0					
ANR	1288262	Identifier	dash_count		1287708	1					
ANR	1288263	PostIncDecOperationExpression	i ++	510:36:20106:20108	1287708	2	True				
ANR	1288264	Identifier	i		1287708	0					
ANR	1288265	IncDec	++		1287708	1					
ANR	1288266	ExpressionStatement	"dmprintf1 ( ppath -> memory , "",%f"" , pgs_lp -> dash . pattern [ i ] )"	511:12:20123:20179	1287708	3	True				
ANR	1288267	CallExpression	"dmprintf1 ( ppath -> memory , "",%f"" , pgs_lp -> dash . pattern [ i ] )"		1287708	0					
ANR	1288268	Callee	dmprintf1		1287708	0					
ANR	1288269	Identifier	dmprintf1		1287708	0					
ANR	1288270	ArgumentList	ppath -> memory		1287708	1					
ANR	1288271	Argument	ppath -> memory		1287708	0					
ANR	1288272	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1288273	Identifier	ppath		1287708	0					
ANR	1288274	Identifier	memory		1287708	1					
ANR	1288275	Argument	""",%f"""		1287708	1					
ANR	1288276	PrimaryExpression	""",%f"""		1287708	0					
ANR	1288277	Argument	pgs_lp -> dash . pattern [ i ]		1287708	2					
ANR	1288278	ArrayIndexing	pgs_lp -> dash . pattern [ i ]		1287708	0					
ANR	1288279	MemberAccess	pgs_lp -> dash . pattern		1287708	0					
ANR	1288280	PtrMemberAccess	pgs_lp -> dash		1287708	0					
ANR	1288281	Identifier	pgs_lp		1287708	0					
ANR	1288282	Identifier	dash		1287708	1					
ANR	1288283	Identifier	pattern		1287708	1					
ANR	1288284	Identifier	i		1287708	1					
ANR	1288285	ExpressionStatement	"dmputs ( ppath -> memory , "",\\n"" )"	512:8:20189:20217	1287708	5	True				
ANR	1288286	CallExpression	"dmputs ( ppath -> memory , "",\\n"" )"		1287708	0					
ANR	1288287	Callee	dmputs		1287708	0					
ANR	1288288	Identifier	dmputs		1287708	0					
ANR	1288289	ArgumentList	ppath -> memory		1287708	1					
ANR	1288290	Argument	ppath -> memory		1287708	0					
ANR	1288291	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1288292	Identifier	ppath		1287708	0					
ANR	1288293	Identifier	memory		1287708	1					
ANR	1288294	Argument	""",\\n"""		1287708	1					
ANR	1288295	PrimaryExpression	""",\\n"""		1287708	0					
ANR	1288296	ExpressionStatement	"dmlprintf4 ( ppath -> memory , ""\\toffset=%f, init(ink_on=%d, index=%d, dist_left=%f)\\n"" , pgs_lp -> dash . offset , pgs_lp -> dash . init_ink_on , pgs_lp -> dash . init_index , pgs_lp -> dash . init_dist_left )"	513:8:20227:20449	1287708	6	True				
ANR	1288297	CallExpression	"dmlprintf4 ( ppath -> memory , ""\\toffset=%f, init(ink_on=%d, index=%d, dist_left=%f)\\n"" , pgs_lp -> dash . offset , pgs_lp -> dash . init_ink_on , pgs_lp -> dash . init_index , pgs_lp -> dash . init_dist_left )"		1287708	0					
ANR	1288298	Callee	dmlprintf4		1287708	0					
ANR	1288299	Identifier	dmlprintf4		1287708	0					
ANR	1288300	ArgumentList	ppath -> memory		1287708	1					
ANR	1288301	Argument	ppath -> memory		1287708	0					
ANR	1288302	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1288303	Identifier	ppath		1287708	0					
ANR	1288304	Identifier	memory		1287708	1					
ANR	1288305	Argument	"""\\toffset=%f, init(ink_on=%d, index=%d, dist_left=%f)\\n"""		1287708	1					
ANR	1288306	PrimaryExpression	"""\\toffset=%f, init(ink_on=%d, index=%d, dist_left=%f)\\n"""		1287708	0					
ANR	1288307	Argument	pgs_lp -> dash . offset		1287708	2					
ANR	1288308	MemberAccess	pgs_lp -> dash . offset		1287708	0					
ANR	1288309	PtrMemberAccess	pgs_lp -> dash		1287708	0					
ANR	1288310	Identifier	pgs_lp		1287708	0					
ANR	1288311	Identifier	dash		1287708	1					
ANR	1288312	Identifier	offset		1287708	1					
ANR	1288313	Argument	pgs_lp -> dash . init_ink_on		1287708	3					
ANR	1288314	MemberAccess	pgs_lp -> dash . init_ink_on		1287708	0					
ANR	1288315	PtrMemberAccess	pgs_lp -> dash		1287708	0					
ANR	1288316	Identifier	pgs_lp		1287708	0					
ANR	1288317	Identifier	dash		1287708	1					
ANR	1288318	Identifier	init_ink_on		1287708	1					
ANR	1288319	Argument	pgs_lp -> dash . init_index		1287708	4					
ANR	1288320	MemberAccess	pgs_lp -> dash . init_index		1287708	0					
ANR	1288321	PtrMemberAccess	pgs_lp -> dash		1287708	0					
ANR	1288322	Identifier	pgs_lp		1287708	0					
ANR	1288323	Identifier	dash		1287708	1					
ANR	1288324	Identifier	init_index		1287708	1					
ANR	1288325	Argument	pgs_lp -> dash . init_dist_left		1287708	5					
ANR	1288326	MemberAccess	pgs_lp -> dash . init_dist_left		1287708	0					
ANR	1288327	PtrMemberAccess	pgs_lp -> dash		1287708	0					
ANR	1288328	Identifier	pgs_lp		1287708	0					
ANR	1288329	Identifier	dash		1287708	1					
ANR	1288330	Identifier	init_dist_left		1287708	1					
ANR	1288331	ExpressionStatement	"gx_path_bbox ( ppath , & ibox )"	519:4:20469:20495	1287708	156	True				
ANR	1288332	CallExpression	"gx_path_bbox ( ppath , & ibox )"		1287708	0					
ANR	1288333	Callee	gx_path_bbox		1287708	0					
ANR	1288334	Identifier	gx_path_bbox		1287708	0					
ANR	1288335	ArgumentList	ppath		1287708	1					
ANR	1288336	Argument	ppath		1287708	0					
ANR	1288337	Identifier	ppath		1287708	0					
ANR	1288338	Argument	& ibox		1287708	1					
ANR	1288339	UnaryOperationExpression	& ibox		1287708	0					
ANR	1288340	UnaryOperator	&		1287708	0					
ANR	1288341	Identifier	ibox		1287708	1					
ANR	1288342	CompoundStatement		100:8:4081:4105	1287708	157					
ANR	1288343	IdentifierDeclStatement	gs_fixed_point expansion ;	522:8:20576:20600	1287708	0	True				
ANR	1288344	IdentifierDecl	expansion		1287708	0					
ANR	1288345	IdentifierDeclType	gs_fixed_point		1287708	0					
ANR	1288346	Identifier	expansion		1287708	1					
ANR	1288347	IfStatement	"if ( gx_stroke_path_expansion ( pgs , ppath , & expansion ) < 0 )"		1287708	1					
ANR	1288348	Condition	"gx_stroke_path_expansion ( pgs , ppath , & expansion ) < 0"	524:12:20615:20666	1287708	0	True				
ANR	1288349	RelationalExpression	"gx_stroke_path_expansion ( pgs , ppath , & expansion ) < 0"		1287708	0		<			
ANR	1288350	CallExpression	"gx_stroke_path_expansion ( pgs , ppath , & expansion )"		1287708	0					
ANR	1288351	Callee	gx_stroke_path_expansion		1287708	0					
ANR	1288352	Identifier	gx_stroke_path_expansion		1287708	0					
ANR	1288353	ArgumentList	pgs		1287708	1					
ANR	1288354	Argument	pgs		1287708	0					
ANR	1288355	Identifier	pgs		1287708	0					
ANR	1288356	Argument	ppath		1287708	1					
ANR	1288357	Identifier	ppath		1287708	0					
ANR	1288358	Argument	& expansion		1287708	2					
ANR	1288359	UnaryOperationExpression	& expansion		1287708	0					
ANR	1288360	UnaryOperator	&		1287708	0					
ANR	1288361	Identifier	expansion		1287708	1					
ANR	1288362	PrimaryExpression	0		1287708	1					
ANR	1288363	CompoundStatement		102:66:4174:4174	1287708	1					
ANR	1288364	ExpressionStatement	ibox . p . x = ibox . p . y = min_fixed	526:12:20751:20782	1287708	0	True				
ANR	1288365	AssignmentExpression	ibox . p . x = ibox . p . y = min_fixed		1287708	0		=			
ANR	1288366	MemberAccess	ibox . p . x		1287708	0					
ANR	1288367	MemberAccess	ibox . p		1287708	0					
ANR	1288368	Identifier	ibox		1287708	0					
ANR	1288369	Identifier	p		1287708	1					
ANR	1288370	Identifier	x		1287708	1					
ANR	1288371	AssignmentExpression	ibox . p . y = min_fixed		1287708	1		=			
ANR	1288372	MemberAccess	ibox . p . y		1287708	0					
ANR	1288373	MemberAccess	ibox . p		1287708	0					
ANR	1288374	Identifier	ibox		1287708	0					
ANR	1288375	Identifier	p		1287708	1					
ANR	1288376	Identifier	y		1287708	1					
ANR	1288377	Identifier	min_fixed		1287708	1					
ANR	1288378	ExpressionStatement	ibox . q . x = ibox . q . y = max_fixed	527:12:20796:20827	1287708	1	True				
ANR	1288379	AssignmentExpression	ibox . q . x = ibox . q . y = max_fixed		1287708	0		=			
ANR	1288380	MemberAccess	ibox . q . x		1287708	0					
ANR	1288381	MemberAccess	ibox . q		1287708	0					
ANR	1288382	Identifier	ibox		1287708	0					
ANR	1288383	Identifier	q		1287708	1					
ANR	1288384	Identifier	x		1287708	1					
ANR	1288385	AssignmentExpression	ibox . q . y = max_fixed		1287708	1		=			
ANR	1288386	MemberAccess	ibox . q . y		1287708	0					
ANR	1288387	MemberAccess	ibox . q		1287708	0					
ANR	1288388	Identifier	ibox		1287708	0					
ANR	1288389	Identifier	q		1287708	1					
ANR	1288390	Identifier	y		1287708	1					
ANR	1288391	Identifier	max_fixed		1287708	1					
ANR	1288392	ElseStatement	else		1287708	0					
ANR	1288393	CompoundStatement		106:15:4349:4349	1287708	0					
ANR	1288394	ExpressionStatement	expansion . x += pgs -> fill_adjust . x	529:12:20858:20891	1287708	0	True				
ANR	1288395	AssignmentExpression	expansion . x += pgs -> fill_adjust . x		1287708	0		+=			
ANR	1288396	MemberAccess	expansion . x		1287708	0					
ANR	1288397	Identifier	expansion		1287708	0					
ANR	1288398	Identifier	x		1287708	1					
ANR	1288399	MemberAccess	pgs -> fill_adjust . x		1287708	1					
ANR	1288400	PtrMemberAccess	pgs -> fill_adjust		1287708	0					
ANR	1288401	Identifier	pgs		1287708	0					
ANR	1288402	Identifier	fill_adjust		1287708	1					
ANR	1288403	Identifier	x		1287708	1					
ANR	1288404	ExpressionStatement	expansion . y += pgs -> fill_adjust . y	530:12:20905:20938	1287708	1	True				
ANR	1288405	AssignmentExpression	expansion . y += pgs -> fill_adjust . y		1287708	0		+=			
ANR	1288406	MemberAccess	expansion . y		1287708	0					
ANR	1288407	Identifier	expansion		1287708	0					
ANR	1288408	Identifier	y		1287708	1					
ANR	1288409	MemberAccess	pgs -> fill_adjust . y		1287708	1					
ANR	1288410	PtrMemberAccess	pgs -> fill_adjust		1287708	0					
ANR	1288411	Identifier	pgs		1287708	0					
ANR	1288412	Identifier	fill_adjust		1287708	1					
ANR	1288413	Identifier	y		1287708	1					
ANR	1288414	ExpressionStatement	ibox . p . x = ( ibox . p . x < min_fixed + expansion . x ? min_fixed : ibox . p . x - expansion . x )	535:12:21115:21223	1287708	2	True				
ANR	1288415	AssignmentExpression	ibox . p . x = ( ibox . p . x < min_fixed + expansion . x ? min_fixed : ibox . p . x - expansion . x )		1287708	0		=			
ANR	1288416	MemberAccess	ibox . p . x		1287708	0					
ANR	1288417	MemberAccess	ibox . p		1287708	0					
ANR	1288418	Identifier	ibox		1287708	0					
ANR	1288419	Identifier	p		1287708	1					
ANR	1288420	Identifier	x		1287708	1					
ANR	1288421	ConditionalExpression	ibox . p . x < min_fixed + expansion . x ? min_fixed : ibox . p . x - expansion . x		1287708	1					
ANR	1288422	Condition	ibox . p . x < min_fixed + expansion . x		1287708	0					
ANR	1288423	RelationalExpression	ibox . p . x < min_fixed + expansion . x		1287708	0		<			
ANR	1288424	MemberAccess	ibox . p . x		1287708	0					
ANR	1288425	MemberAccess	ibox . p		1287708	0					
ANR	1288426	Identifier	ibox		1287708	0					
ANR	1288427	Identifier	p		1287708	1					
ANR	1288428	Identifier	x		1287708	1					
ANR	1288429	AdditiveExpression	min_fixed + expansion . x		1287708	1		+			
ANR	1288430	Identifier	min_fixed		1287708	0					
ANR	1288431	MemberAccess	expansion . x		1287708	1					
ANR	1288432	Identifier	expansion		1287708	0					
ANR	1288433	Identifier	x		1287708	1					
ANR	1288434	Identifier	min_fixed		1287708	1					
ANR	1288435	AdditiveExpression	ibox . p . x - expansion . x		1287708	2		-			
ANR	1288436	MemberAccess	ibox . p . x		1287708	0					
ANR	1288437	MemberAccess	ibox . p		1287708	0					
ANR	1288438	Identifier	ibox		1287708	0					
ANR	1288439	Identifier	p		1287708	1					
ANR	1288440	Identifier	x		1287708	1					
ANR	1288441	MemberAccess	expansion . x		1287708	1					
ANR	1288442	Identifier	expansion		1287708	0					
ANR	1288443	Identifier	x		1287708	1					
ANR	1288444	ExpressionStatement	ibox . p . y = ( ibox . p . y < min_fixed + expansion . y ? min_fixed : ibox . p . y - expansion . y )	537:12:21237:21345	1287708	3	True				
ANR	1288445	AssignmentExpression	ibox . p . y = ( ibox . p . y < min_fixed + expansion . y ? min_fixed : ibox . p . y - expansion . y )		1287708	0		=			
ANR	1288446	MemberAccess	ibox . p . y		1287708	0					
ANR	1288447	MemberAccess	ibox . p		1287708	0					
ANR	1288448	Identifier	ibox		1287708	0					
ANR	1288449	Identifier	p		1287708	1					
ANR	1288450	Identifier	y		1287708	1					
ANR	1288451	ConditionalExpression	ibox . p . y < min_fixed + expansion . y ? min_fixed : ibox . p . y - expansion . y		1287708	1					
ANR	1288452	Condition	ibox . p . y < min_fixed + expansion . y		1287708	0					
ANR	1288453	RelationalExpression	ibox . p . y < min_fixed + expansion . y		1287708	0		<			
ANR	1288454	MemberAccess	ibox . p . y		1287708	0					
ANR	1288455	MemberAccess	ibox . p		1287708	0					
ANR	1288456	Identifier	ibox		1287708	0					
ANR	1288457	Identifier	p		1287708	1					
ANR	1288458	Identifier	y		1287708	1					
ANR	1288459	AdditiveExpression	min_fixed + expansion . y		1287708	1		+			
ANR	1288460	Identifier	min_fixed		1287708	0					
ANR	1288461	MemberAccess	expansion . y		1287708	1					
ANR	1288462	Identifier	expansion		1287708	0					
ANR	1288463	Identifier	y		1287708	1					
ANR	1288464	Identifier	min_fixed		1287708	1					
ANR	1288465	AdditiveExpression	ibox . p . y - expansion . y		1287708	2		-			
ANR	1288466	MemberAccess	ibox . p . y		1287708	0					
ANR	1288467	MemberAccess	ibox . p		1287708	0					
ANR	1288468	Identifier	ibox		1287708	0					
ANR	1288469	Identifier	p		1287708	1					
ANR	1288470	Identifier	y		1287708	1					
ANR	1288471	MemberAccess	expansion . y		1287708	1					
ANR	1288472	Identifier	expansion		1287708	0					
ANR	1288473	Identifier	y		1287708	1					
ANR	1288474	ExpressionStatement	ibox . q . x = ( ibox . q . x > max_fixed - expansion . x ? max_fixed : ibox . q . x + expansion . x )	539:12:21359:21467	1287708	4	True				
ANR	1288475	AssignmentExpression	ibox . q . x = ( ibox . q . x > max_fixed - expansion . x ? max_fixed : ibox . q . x + expansion . x )		1287708	0		=			
ANR	1288476	MemberAccess	ibox . q . x		1287708	0					
ANR	1288477	MemberAccess	ibox . q		1287708	0					
ANR	1288478	Identifier	ibox		1287708	0					
ANR	1288479	Identifier	q		1287708	1					
ANR	1288480	Identifier	x		1287708	1					
ANR	1288481	ConditionalExpression	ibox . q . x > max_fixed - expansion . x ? max_fixed : ibox . q . x + expansion . x		1287708	1					
ANR	1288482	Condition	ibox . q . x > max_fixed - expansion . x		1287708	0					
ANR	1288483	RelationalExpression	ibox . q . x > max_fixed - expansion . x		1287708	0		>			
ANR	1288484	MemberAccess	ibox . q . x		1287708	0					
ANR	1288485	MemberAccess	ibox . q		1287708	0					
ANR	1288486	Identifier	ibox		1287708	0					
ANR	1288487	Identifier	q		1287708	1					
ANR	1288488	Identifier	x		1287708	1					
ANR	1288489	AdditiveExpression	max_fixed - expansion . x		1287708	1		-			
ANR	1288490	Identifier	max_fixed		1287708	0					
ANR	1288491	MemberAccess	expansion . x		1287708	1					
ANR	1288492	Identifier	expansion		1287708	0					
ANR	1288493	Identifier	x		1287708	1					
ANR	1288494	Identifier	max_fixed		1287708	1					
ANR	1288495	AdditiveExpression	ibox . q . x + expansion . x		1287708	2		+			
ANR	1288496	MemberAccess	ibox . q . x		1287708	0					
ANR	1288497	MemberAccess	ibox . q		1287708	0					
ANR	1288498	Identifier	ibox		1287708	0					
ANR	1288499	Identifier	q		1287708	1					
ANR	1288500	Identifier	x		1287708	1					
ANR	1288501	MemberAccess	expansion . x		1287708	1					
ANR	1288502	Identifier	expansion		1287708	0					
ANR	1288503	Identifier	x		1287708	1					
ANR	1288504	ExpressionStatement	ibox . q . y = ( ibox . q . y > max_fixed - expansion . y ? max_fixed : ibox . q . y + expansion . y )	541:12:21481:21589	1287708	5	True				
ANR	1288505	AssignmentExpression	ibox . q . y = ( ibox . q . y > max_fixed - expansion . y ? max_fixed : ibox . q . y + expansion . y )		1287708	0		=			
ANR	1288506	MemberAccess	ibox . q . y		1287708	0					
ANR	1288507	MemberAccess	ibox . q		1287708	0					
ANR	1288508	Identifier	ibox		1287708	0					
ANR	1288509	Identifier	q		1287708	1					
ANR	1288510	Identifier	y		1287708	1					
ANR	1288511	ConditionalExpression	ibox . q . y > max_fixed - expansion . y ? max_fixed : ibox . q . y + expansion . y		1287708	1					
ANR	1288512	Condition	ibox . q . y > max_fixed - expansion . y		1287708	0					
ANR	1288513	RelationalExpression	ibox . q . y > max_fixed - expansion . y		1287708	0		>			
ANR	1288514	MemberAccess	ibox . q . y		1287708	0					
ANR	1288515	MemberAccess	ibox . q		1287708	0					
ANR	1288516	Identifier	ibox		1287708	0					
ANR	1288517	Identifier	q		1287708	1					
ANR	1288518	Identifier	y		1287708	1					
ANR	1288519	AdditiveExpression	max_fixed - expansion . y		1287708	1		-			
ANR	1288520	Identifier	max_fixed		1287708	0					
ANR	1288521	MemberAccess	expansion . y		1287708	1					
ANR	1288522	Identifier	expansion		1287708	0					
ANR	1288523	Identifier	y		1287708	1					
ANR	1288524	Identifier	max_fixed		1287708	1					
ANR	1288525	AdditiveExpression	ibox . q . y + expansion . y		1287708	2		+			
ANR	1288526	MemberAccess	ibox . q . y		1287708	0					
ANR	1288527	MemberAccess	ibox . q		1287708	0					
ANR	1288528	Identifier	ibox		1287708	0					
ANR	1288529	Identifier	q		1287708	1					
ANR	1288530	Identifier	y		1287708	1					
ANR	1288531	MemberAccess	expansion . y		1287708	1					
ANR	1288532	Identifier	expansion		1287708	0					
ANR	1288533	Identifier	y		1287708	1					
ANR	1288534	IfStatement	if ( pcpath )		1287708	158					
ANR	1288535	Condition	pcpath	546:8:21687:21692	1287708	0	True				
ANR	1288536	Identifier	pcpath		1287708	0					
ANR	1288537	ExpressionStatement	"gx_cpath_inner_box ( pcpath , & cbox )"	547:8:21703:21736	1287708	1	True				
ANR	1288538	CallExpression	"gx_cpath_inner_box ( pcpath , & cbox )"		1287708	0					
ANR	1288539	Callee	gx_cpath_inner_box		1287708	0					
ANR	1288540	Identifier	gx_cpath_inner_box		1287708	0					
ANR	1288541	ArgumentList	pcpath		1287708	1					
ANR	1288542	Argument	pcpath		1287708	0					
ANR	1288543	Identifier	pcpath		1287708	0					
ANR	1288544	Argument	& cbox		1287708	1					
ANR	1288545	UnaryOperationExpression	& cbox		1287708	0					
ANR	1288546	UnaryOperator	&		1287708	0					
ANR	1288547	Identifier	cbox		1287708	1					
ANR	1288548	ElseStatement	else		1287708	0					
ANR	1288549	IfStatement	if ( pdevc )		1287708	0					
ANR	1288550	Condition	pdevc	548:13:21751:21755	1287708	0	True				
ANR	1288551	Identifier	pdevc		1287708	0					
ANR	1288552	ExpressionStatement	"( * dev_proc ( pdev , get_clipping_box ) ) ( pdev , & cbox )"	549:8:21766:21815	1287708	1	True				
ANR	1288553	CallExpression	"( * dev_proc ( pdev , get_clipping_box ) ) ( pdev , & cbox )"		1287708	0					
ANR	1288554	Callee	"* dev_proc ( pdev , get_clipping_box )"		1287708	0					
ANR	1288555	UnaryOperationExpression	"* dev_proc ( pdev , get_clipping_box )"		1287708	0					
ANR	1288556	UnaryOperator	*		1287708	0					
ANR	1288557	CallExpression	"dev_proc ( pdev , get_clipping_box )"		1287708	1					
ANR	1288558	Callee	dev_proc		1287708	0					
ANR	1288559	Identifier	dev_proc		1287708	0					
ANR	1288560	ArgumentList	pdev		1287708	1					
ANR	1288561	Argument	pdev		1287708	0					
ANR	1288562	Identifier	pdev		1287708	0					
ANR	1288563	Argument	get_clipping_box		1287708	1					
ANR	1288564	Identifier	get_clipping_box		1287708	0					
ANR	1288565	ArgumentList	pdev		1287708	1					
ANR	1288566	Argument	pdev		1287708	0					
ANR	1288567	Identifier	pdev		1287708	0					
ANR	1288568	Argument	& cbox		1287708	1					
ANR	1288569	UnaryOperationExpression	& cbox		1287708	0					
ANR	1288570	UnaryOperator	&		1287708	0					
ANR	1288571	Identifier	cbox		1287708	1					
ANR	1288572	ElseStatement	else		1287708	0					
ANR	1288573	CompoundStatement		128:9:5331:5331	1287708	0					
ANR	1288574	ExpressionStatement	cbox = ibox	552:8:21895:21906	1287708	0	True				
ANR	1288575	AssignmentExpression	cbox = ibox		1287708	0		=			
ANR	1288576	Identifier	cbox		1287708	0					
ANR	1288577	Identifier	ibox		1287708	1					
ANR	1288578	IfStatement	"if ( ! rect_within ( ibox , cbox ) )"		1287708	159					
ANR	1288579	Condition	"! rect_within ( ibox , cbox )"	554:8:21922:21945	1287708	0	True				
ANR	1288580	UnaryOperationExpression	"! rect_within ( ibox , cbox )"		1287708	0					
ANR	1288581	UnaryOperator	!		1287708	0					
ANR	1288582	CallExpression	"rect_within ( ibox , cbox )"		1287708	1					
ANR	1288583	Callee	rect_within		1287708	0					
ANR	1288584	Identifier	rect_within		1287708	0					
ANR	1288585	ArgumentList	ibox		1287708	1					
ANR	1288586	Argument	ibox		1287708	0					
ANR	1288587	Identifier	ibox		1287708	0					
ANR	1288588	Argument	cbox		1287708	1					
ANR	1288589	Identifier	cbox		1287708	0					
ANR	1288590	CompoundStatement		135:8:5593:5611	1287708	1					
ANR	1288591	IdentifierDeclStatement	gs_fixed_rect bbox ;	557:8:22088:22106	1287708	0	True				
ANR	1288592	IdentifierDecl	bbox		1287708	0					
ANR	1288593	IdentifierDeclType	gs_fixed_rect		1287708	0					
ANR	1288594	Identifier	bbox		1287708	1					
ANR	1288595	IfStatement	if ( pcpath )		1287708	1					
ANR	1288596	Condition	pcpath	559:12:22121:22126	1287708	0	True				
ANR	1288597	Identifier	pcpath		1287708	0					
ANR	1288598	CompoundStatement		137:20:5634:5634	1287708	1					
ANR	1288599	ExpressionStatement	"gx_cpath_outer_box ( pcpath , & bbox )"	560:12:22143:22176	1287708	0	True				
ANR	1288600	CallExpression	"gx_cpath_outer_box ( pcpath , & bbox )"		1287708	0					
ANR	1288601	Callee	gx_cpath_outer_box		1287708	0					
ANR	1288602	Identifier	gx_cpath_outer_box		1287708	0					
ANR	1288603	ArgumentList	pcpath		1287708	1					
ANR	1288604	Argument	pcpath		1287708	0					
ANR	1288605	Identifier	pcpath		1287708	0					
ANR	1288606	Argument	& bbox		1287708	1					
ANR	1288607	UnaryOperationExpression	& bbox		1287708	0					
ANR	1288608	UnaryOperator	&		1287708	0					
ANR	1288609	Identifier	bbox		1287708	1					
ANR	1288610	ExpressionStatement	"if_debug4m ( 'f' , ppath -> memory , ""   outer_box=(%g,%g),(%g,%g)\\n"" , fixed2float ( bbox . p . x ) , fixed2float ( bbox . p . y ) , fixed2float ( bbox . q . x ) , fixed2float ( bbox . q . y ) )"	561:12:22190:22392	1287708	1	True				
ANR	1288611	CallExpression	"if_debug4m ( 'f' , ppath -> memory , ""   outer_box=(%g,%g),(%g,%g)\\n"" , fixed2float ( bbox . p . x ) , fixed2float ( bbox . p . y ) , fixed2float ( bbox . q . x ) , fixed2float ( bbox . q . y ) )"		1287708	0					
ANR	1288612	Callee	if_debug4m		1287708	0					
ANR	1288613	Identifier	if_debug4m		1287708	0					
ANR	1288614	ArgumentList	'f'		1287708	1					
ANR	1288615	Argument	'f'		1287708	0					
ANR	1288616	PrimaryExpression	'f'		1287708	0					
ANR	1288617	Argument	ppath -> memory		1287708	1					
ANR	1288618	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1288619	Identifier	ppath		1287708	0					
ANR	1288620	Identifier	memory		1287708	1					
ANR	1288621	Argument	"""   outer_box=(%g,%g),(%g,%g)\\n"""		1287708	2					
ANR	1288622	PrimaryExpression	"""   outer_box=(%g,%g),(%g,%g)\\n"""		1287708	0					
ANR	1288623	Argument	fixed2float ( bbox . p . x )		1287708	3					
ANR	1288624	CallExpression	fixed2float ( bbox . p . x )		1287708	0					
ANR	1288625	Callee	fixed2float		1287708	0					
ANR	1288626	Identifier	fixed2float		1287708	0					
ANR	1288627	ArgumentList	bbox . p . x		1287708	1					
ANR	1288628	Argument	bbox . p . x		1287708	0					
ANR	1288629	MemberAccess	bbox . p . x		1287708	0					
ANR	1288630	MemberAccess	bbox . p		1287708	0					
ANR	1288631	Identifier	bbox		1287708	0					
ANR	1288632	Identifier	p		1287708	1					
ANR	1288633	Identifier	x		1287708	1					
ANR	1288634	Argument	fixed2float ( bbox . p . y )		1287708	4					
ANR	1288635	CallExpression	fixed2float ( bbox . p . y )		1287708	0					
ANR	1288636	Callee	fixed2float		1287708	0					
ANR	1288637	Identifier	fixed2float		1287708	0					
ANR	1288638	ArgumentList	bbox . p . y		1287708	1					
ANR	1288639	Argument	bbox . p . y		1287708	0					
ANR	1288640	MemberAccess	bbox . p . y		1287708	0					
ANR	1288641	MemberAccess	bbox . p		1287708	0					
ANR	1288642	Identifier	bbox		1287708	0					
ANR	1288643	Identifier	p		1287708	1					
ANR	1288644	Identifier	y		1287708	1					
ANR	1288645	Argument	fixed2float ( bbox . q . x )		1287708	5					
ANR	1288646	CallExpression	fixed2float ( bbox . q . x )		1287708	0					
ANR	1288647	Callee	fixed2float		1287708	0					
ANR	1288648	Identifier	fixed2float		1287708	0					
ANR	1288649	ArgumentList	bbox . q . x		1287708	1					
ANR	1288650	Argument	bbox . q . x		1287708	0					
ANR	1288651	MemberAccess	bbox . q . x		1287708	0					
ANR	1288652	MemberAccess	bbox . q		1287708	0					
ANR	1288653	Identifier	bbox		1287708	0					
ANR	1288654	Identifier	q		1287708	1					
ANR	1288655	Identifier	x		1287708	1					
ANR	1288656	Argument	fixed2float ( bbox . q . y )		1287708	6					
ANR	1288657	CallExpression	fixed2float ( bbox . q . y )		1287708	0					
ANR	1288658	Callee	fixed2float		1287708	0					
ANR	1288659	Identifier	fixed2float		1287708	0					
ANR	1288660	ArgumentList	bbox . q . y		1287708	1					
ANR	1288661	Argument	bbox . q . y		1287708	0					
ANR	1288662	MemberAccess	bbox . q . y		1287708	0					
ANR	1288663	MemberAccess	bbox . q		1287708	0					
ANR	1288664	Identifier	bbox		1287708	0					
ANR	1288665	Identifier	q		1287708	1					
ANR	1288666	Identifier	y		1287708	1					
ANR	1288667	ExpressionStatement	"rect_intersect ( ibox , bbox )"	564:12:22406:22432	1287708	2	True				
ANR	1288668	CallExpression	"rect_intersect ( ibox , bbox )"		1287708	0					
ANR	1288669	Callee	rect_intersect		1287708	0					
ANR	1288670	Identifier	rect_intersect		1287708	0					
ANR	1288671	ArgumentList	ibox		1287708	1					
ANR	1288672	Argument	ibox		1287708	0					
ANR	1288673	Identifier	ibox		1287708	0					
ANR	1288674	Argument	bbox		1287708	1					
ANR	1288675	Identifier	bbox		1287708	0					
ANR	1288676	ElseStatement	else		1287708	0					
ANR	1288677	ExpressionStatement	"rect_intersect ( ibox , cbox )"	566:12:22461:22487	1287708	0	True				
ANR	1288678	CallExpression	"rect_intersect ( ibox , cbox )"		1287708	0					
ANR	1288679	Callee	rect_intersect		1287708	0					
ANR	1288680	Identifier	rect_intersect		1287708	0					
ANR	1288681	ArgumentList	ibox		1287708	1					
ANR	1288682	Argument	ibox		1287708	0					
ANR	1288683	Identifier	ibox		1287708	0					
ANR	1288684	Argument	cbox		1287708	1					
ANR	1288685	Identifier	cbox		1287708	0					
ANR	1288686	IfStatement	if ( ibox . p . x >= ibox . q . x || ibox . p . y >= ibox . q . y )		1287708	2					
ANR	1288687	Condition	ibox . p . x >= ibox . q . x || ibox . p . y >= ibox . q . y	567:12:22501:22544	1287708	0	True				
ANR	1288688	OrExpression	ibox . p . x >= ibox . q . x || ibox . p . y >= ibox . q . y		1287708	0		||			
ANR	1288689	RelationalExpression	ibox . p . x >= ibox . q . x		1287708	0		>=			
ANR	1288690	MemberAccess	ibox . p . x		1287708	0					
ANR	1288691	MemberAccess	ibox . p		1287708	0					
ANR	1288692	Identifier	ibox		1287708	0					
ANR	1288693	Identifier	p		1287708	1					
ANR	1288694	Identifier	x		1287708	1					
ANR	1288695	MemberAccess	ibox . q . x		1287708	1					
ANR	1288696	MemberAccess	ibox . q		1287708	0					
ANR	1288697	Identifier	ibox		1287708	0					
ANR	1288698	Identifier	q		1287708	1					
ANR	1288699	Identifier	x		1287708	1					
ANR	1288700	RelationalExpression	ibox . p . y >= ibox . q . y		1287708	1		>=			
ANR	1288701	MemberAccess	ibox . p . y		1287708	0					
ANR	1288702	MemberAccess	ibox . p		1287708	0					
ANR	1288703	Identifier	ibox		1287708	0					
ANR	1288704	Identifier	p		1287708	1					
ANR	1288705	Identifier	y		1287708	1					
ANR	1288706	MemberAccess	ibox . q . y		1287708	1					
ANR	1288707	MemberAccess	ibox . q		1287708	0					
ANR	1288708	Identifier	ibox		1287708	0					
ANR	1288709	Identifier	q		1287708	1					
ANR	1288710	Identifier	y		1287708	1					
ANR	1288711	CompoundStatement		145:58:6052:6052	1287708	1					
ANR	1288712	ReturnStatement	return 0 ;	569:12:22611:22619	1287708	0	True				
ANR	1288713	PrimaryExpression	0		1287708	0					
ANR	1288714	IfStatement	if ( pcpath && line_proc == stroke_fill )		1287708	3					
ANR	1288715	Condition	pcpath && line_proc == stroke_fill	590:12:23590:23623	1287708	0	True				
ANR	1288716	AndExpression	pcpath && line_proc == stroke_fill		1287708	0		&&			
ANR	1288717	Identifier	pcpath		1287708	0					
ANR	1288718	EqualityExpression	line_proc == stroke_fill		1287708	1		==			
ANR	1288719	Identifier	line_proc		1287708	0					
ANR	1288720	Identifier	stroke_fill		1287708	1					
ANR	1288721	CompoundStatement		168:48:7131:7131	1287708	1					
ANR	1288722	ExpressionStatement	"gx_make_clip_device_on_stack ( & cdev , pcpath , pdev )"	591:12:23640:23689	1287708	0	True				
ANR	1288723	CallExpression	"gx_make_clip_device_on_stack ( & cdev , pcpath , pdev )"		1287708	0					
ANR	1288724	Callee	gx_make_clip_device_on_stack		1287708	0					
ANR	1288725	Identifier	gx_make_clip_device_on_stack		1287708	0					
ANR	1288726	ArgumentList	& cdev		1287708	1					
ANR	1288727	Argument	& cdev		1287708	0					
ANR	1288728	UnaryOperationExpression	& cdev		1287708	0					
ANR	1288729	UnaryOperator	&		1287708	0					
ANR	1288730	Identifier	cdev		1287708	1					
ANR	1288731	Argument	pcpath		1287708	1					
ANR	1288732	Identifier	pcpath		1287708	0					
ANR	1288733	Argument	pdev		1287708	2					
ANR	1288734	Identifier	pdev		1287708	0					
ANR	1288735	ExpressionStatement	cdev . max_fill_band = pdev -> max_fill_band	592:12:23703:23743	1287708	1	True				
ANR	1288736	AssignmentExpression	cdev . max_fill_band = pdev -> max_fill_band		1287708	0		=			
ANR	1288737	MemberAccess	cdev . max_fill_band		1287708	0					
ANR	1288738	Identifier	cdev		1287708	0					
ANR	1288739	Identifier	max_fill_band		1287708	1					
ANR	1288740	PtrMemberAccess	pdev -> max_fill_band		1287708	1					
ANR	1288741	Identifier	pdev		1287708	0					
ANR	1288742	Identifier	max_fill_band		1287708	1					
ANR	1288743	ExpressionStatement	dev = ( gx_device * ) & cdev	593:12:23757:23781	1287708	2	True				
ANR	1288744	AssignmentExpression	dev = ( gx_device * ) & cdev		1287708	0		=			
ANR	1288745	Identifier	dev		1287708	0					
ANR	1288746	CastExpression	( gx_device * ) & cdev		1287708	1					
ANR	1288747	CastTarget	gx_device *		1287708	0					
ANR	1288748	UnaryOperationExpression	& cdev		1287708	1					
ANR	1288749	UnaryOperator	&		1287708	0					
ANR	1288750	Identifier	cdev		1287708	1					
ANR	1288751	ExpressionStatement	fill_params . rule = gx_rule_winding_number	596:4:23803:23844	1287708	160	True				
ANR	1288752	AssignmentExpression	fill_params . rule = gx_rule_winding_number		1287708	0		=			
ANR	1288753	MemberAccess	fill_params . rule		1287708	0					
ANR	1288754	Identifier	fill_params		1287708	0					
ANR	1288755	Identifier	rule		1287708	1					
ANR	1288756	Identifier	gx_rule_winding_number		1287708	1					
ANR	1288757	ExpressionStatement	fill_params . flatness = pgs -> flatness	597:4:23850:23886	1287708	161	True				
ANR	1288758	AssignmentExpression	fill_params . flatness = pgs -> flatness		1287708	0		=			
ANR	1288759	MemberAccess	fill_params . flatness		1287708	0					
ANR	1288760	Identifier	fill_params		1287708	0					
ANR	1288761	Identifier	flatness		1287708	1					
ANR	1288762	PtrMemberAccess	pgs -> flatness		1287708	1					
ANR	1288763	Identifier	pgs		1287708	0					
ANR	1288764	Identifier	flatness		1287708	1					
ANR	1288765	IfStatement	if ( line_width < 0 )		1287708	162					
ANR	1288766	Condition	line_width < 0	598:8:23896:23909	1287708	0	True				
ANR	1288767	RelationalExpression	line_width < 0		1287708	0		<			
ANR	1288768	Identifier	line_width		1287708	0					
ANR	1288769	PrimaryExpression	0		1287708	1					
ANR	1288770	ExpressionStatement	line_width = - line_width	599:8:23920:23944	1287708	1	True				
ANR	1288771	AssignmentExpression	line_width = - line_width		1287708	0		=			
ANR	1288772	Identifier	line_width		1287708	0					
ANR	1288773	UnaryOperationExpression	- line_width		1287708	1					
ANR	1288774	UnaryOperator	-		1287708	0					
ANR	1288775	Identifier	line_width		1287708	1					
ANR	1288776	ExpressionStatement	line_width_and_scale = line_width * ( double ) int2fixed ( 1 )	600:4:23950:24006	1287708	163	True				
ANR	1288777	AssignmentExpression	line_width_and_scale = line_width * ( double ) int2fixed ( 1 )		1287708	0		=			
ANR	1288778	Identifier	line_width_and_scale		1287708	0					
ANR	1288779	MultiplicativeExpression	line_width * ( double ) int2fixed ( 1 )		1287708	1		*			
ANR	1288780	Identifier	line_width		1287708	0					
ANR	1288781	CastExpression	( double ) int2fixed ( 1 )		1287708	1					
ANR	1288782	CastTarget	double		1287708	0					
ANR	1288783	CallExpression	int2fixed ( 1 )		1287708	1					
ANR	1288784	Callee	int2fixed		1287708	0					
ANR	1288785	Identifier	int2fixed		1287708	0					
ANR	1288786	ArgumentList	1		1287708	1					
ANR	1288787	Argument	1		1287708	0					
ANR	1288788	PrimaryExpression	1		1287708	0					
ANR	1288789	IfStatement	if ( is_fzero ( line_width ) )		1287708	164					
ANR	1288790	Condition	is_fzero ( line_width )	601:8:24016:24035	1287708	0	True				
ANR	1288791	CallExpression	is_fzero ( line_width )		1287708	0					
ANR	1288792	Callee	is_fzero		1287708	0					
ANR	1288793	Identifier	is_fzero		1287708	0					
ANR	1288794	ArgumentList	line_width		1287708	1					
ANR	1288795	Argument	line_width		1287708	0					
ANR	1288796	Identifier	line_width		1287708	0					
ANR	1288797	ExpressionStatement	always_thin = true	602:8:24046:24064	1287708	1	True				
ANR	1288798	AssignmentExpression	always_thin = true		1287708	0		=			
ANR	1288799	Identifier	always_thin		1287708	0					
ANR	1288800	Identifier	true		1287708	1					
ANR	1288801	ElseStatement	else		1287708	0					
ANR	1288802	CompoundStatement		182:8:7590:7602	1287708	0					
ANR	1288803	IdentifierDeclStatement	"float xa , ya ;"	604:8:24085:24097	1287708	0	True				
ANR	1288804	IdentifierDecl	xa		1287708	0					
ANR	1288805	IdentifierDeclType	float		1287708	0					
ANR	1288806	Identifier	xa		1287708	1					
ANR	1288807	IdentifierDecl	ya		1287708	1					
ANR	1288808	IdentifierDeclType	float		1287708	0					
ANR	1288809	Identifier	ya		1287708	1					
ANR	1288810	SwitchStatement	switch ( orient )		1287708	1					
ANR	1288811	Condition	orient	606:16:24116:24121	1287708	0	True				
ANR	1288812	Identifier	orient		1287708	0					
ANR	1288813	CompoundStatement		184:24:7629:7629	1287708	1					
ANR	1288814	Label	case orient_portrait :	607:12:24138:24158	1287708	0	True				
ANR	1288815	Identifier	orient_portrait		1287708	0					
ANR	1288816	ExpressionStatement	"xa = xx , ya = yy"	608:16:24176:24192	1287708	1	True				
ANR	1288817	Expression	"xa = xx , ya = yy"		1287708	0					
ANR	1288818	AssignmentExpression	xa = xx		1287708	0		=			
ANR	1288819	Identifier	xa		1287708	0					
ANR	1288820	Identifier	xx		1287708	1					
ANR	1288821	AssignmentExpression	ya = yy		1287708	1		=			
ANR	1288822	Identifier	ya		1287708	0					
ANR	1288823	Identifier	yy		1287708	1					
ANR	1288824	GotoStatement	goto sat ;	609:16:24210:24218	1287708	2	True				
ANR	1288825	Identifier	sat		1287708	0					
ANR	1288826	Label	case orient_landscape :	610:12:24232:24253	1287708	3	True				
ANR	1288827	Identifier	orient_landscape		1287708	0					
ANR	1288828	ExpressionStatement	"xa = xy , ya = yx"	611:16:24271:24287	1287708	4	True				
ANR	1288829	Expression	"xa = xy , ya = yx"		1287708	0					
ANR	1288830	AssignmentExpression	xa = xy		1287708	0		=			
ANR	1288831	Identifier	xa		1287708	0					
ANR	1288832	Identifier	xy		1287708	1					
ANR	1288833	AssignmentExpression	ya = yx		1287708	1		=			
ANR	1288834	Identifier	ya		1287708	0					
ANR	1288835	Identifier	yx		1287708	1					
ANR	1288836	Label	sat :	612:14:24303:24306	1287708	5	True				
ANR	1288837	Identifier	sat		1287708	0					
ANR	1288838	IfStatement	if ( xa < 0 )		1287708	6					
ANR	1288839	Condition	xa < 0	613:20:24328:24333	1287708	0	True				
ANR	1288840	RelationalExpression	xa < 0		1287708	0		<			
ANR	1288841	Identifier	xa		1287708	0					
ANR	1288842	PrimaryExpression	0		1287708	1					
ANR	1288843	ExpressionStatement	xa = - xa	614:20:24356:24364	1287708	1	True				
ANR	1288844	AssignmentExpression	xa = - xa		1287708	0		=			
ANR	1288845	Identifier	xa		1287708	0					
ANR	1288846	UnaryOperationExpression	- xa		1287708	1					
ANR	1288847	UnaryOperator	-		1287708	0					
ANR	1288848	Identifier	xa		1287708	1					
ANR	1288849	IfStatement	if ( ya < 0 )		1287708	7					
ANR	1288850	Condition	ya < 0	615:20:24386:24391	1287708	0	True				
ANR	1288851	RelationalExpression	ya < 0		1287708	0		<			
ANR	1288852	Identifier	ya		1287708	0					
ANR	1288853	PrimaryExpression	0		1287708	1					
ANR	1288854	ExpressionStatement	ya = - ya	616:20:24414:24422	1287708	1	True				
ANR	1288855	AssignmentExpression	ya = - ya		1287708	0		=			
ANR	1288856	Identifier	ya		1287708	0					
ANR	1288857	UnaryOperationExpression	- ya		1287708	1					
ANR	1288858	UnaryOperator	-		1287708	0					
ANR	1288859	Identifier	ya		1287708	1					
ANR	1288860	ExpressionStatement	"always_thin = ( max ( xa , ya ) * line_width < 0.5 )"	617:16:24440:24486	1287708	8	True				
ANR	1288861	AssignmentExpression	"always_thin = ( max ( xa , ya ) * line_width < 0.5 )"		1287708	0		=			
ANR	1288862	Identifier	always_thin		1287708	0					
ANR	1288863	RelationalExpression	"max ( xa , ya ) * line_width < 0.5"		1287708	1		<			
ANR	1288864	MultiplicativeExpression	"max ( xa , ya ) * line_width"		1287708	0		*			
ANR	1288865	CallExpression	"max ( xa , ya )"		1287708	0					
ANR	1288866	Callee	max		1287708	0					
ANR	1288867	Identifier	max		1287708	0					
ANR	1288868	ArgumentList	xa		1287708	1					
ANR	1288869	Argument	xa		1287708	0					
ANR	1288870	Identifier	xa		1287708	0					
ANR	1288871	Argument	ya		1287708	1					
ANR	1288872	Identifier	ya		1287708	0					
ANR	1288873	Identifier	line_width		1287708	1					
ANR	1288874	PrimaryExpression	0.5		1287708	1					
ANR	1288875	IfStatement	if ( ! always_thin && uniform )		1287708	9					
ANR	1288876	Condition	! always_thin && uniform	618:20:24508:24530	1287708	0	True				
ANR	1288877	AndExpression	! always_thin && uniform		1287708	0		&&			
ANR	1288878	UnaryOperationExpression	! always_thin		1287708	0					
ANR	1288879	UnaryOperator	!		1287708	0					
ANR	1288880	Identifier	always_thin		1287708	1					
ANR	1288881	Identifier	uniform		1287708	1					
ANR	1288882	CompoundStatement		196:45:8038:8038	1287708	1					
ANR	1288883	ExpressionStatement	device_line_width_scale = line_width_and_scale * xa	619:20:24599:24650	1287708	0	True				
ANR	1288884	AssignmentExpression	device_line_width_scale = line_width_and_scale * xa		1287708	0		=			
ANR	1288885	Identifier	device_line_width_scale		1287708	0					
ANR	1288886	MultiplicativeExpression	line_width_and_scale * xa		1287708	1		*			
ANR	1288887	Identifier	line_width_and_scale		1287708	0					
ANR	1288888	Identifier	xa		1287708	1					
ANR	1288889	BreakStatement	break ;	621:16:24686:24691	1287708	10	True				
ANR	1288890	Label	default :	622:12:24705:24712	1287708	11	True				
ANR	1288891	Identifier	default		1287708	0					
ANR	1288892	CompoundStatement		213:20:9002:9319	1287708	12					
ANR	1288893	IdentifierDeclStatement	double max_rr = ( xx * xx + xy * xy + yx * yx + yy * yy + sqrt ( ( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) ) ) ) / 2 ;	635:20:25497:25814	1287708	0	True				
ANR	1288894	IdentifierDecl	max_rr = ( xx * xx + xy * xy + yx * yx + yy * yy + sqrt ( ( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) ) ) ) / 2		1287708	0					
ANR	1288895	IdentifierDeclType	double		1287708	0					
ANR	1288896	Identifier	max_rr		1287708	1					
ANR	1288897	AssignmentExpression	max_rr = ( xx * xx + xy * xy + yx * yx + yy * yy + sqrt ( ( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) ) ) ) / 2		1287708	2		=			
ANR	1288898	Identifier	max_rr		1287708	0					
ANR	1288899	MultiplicativeExpression	( xx * xx + xy * xy + yx * yx + yy * yy + sqrt ( ( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) ) ) ) / 2		1287708	1		/			
ANR	1288900	AdditiveExpression	xx * xx + xy * xy + yx * yx + yy * yy + sqrt ( ( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) ) )		1287708	0		+			
ANR	1288901	MultiplicativeExpression	xx * xx		1287708	0		*			
ANR	1288902	Identifier	xx		1287708	0					
ANR	1288903	Identifier	xx		1287708	1					
ANR	1288904	AdditiveExpression	xy * xy + yx * yx + yy * yy + sqrt ( ( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) ) )		1287708	1		+			
ANR	1288905	MultiplicativeExpression	xy * xy		1287708	0		*			
ANR	1288906	Identifier	xy		1287708	0					
ANR	1288907	Identifier	xy		1287708	1					
ANR	1288908	AdditiveExpression	yx * yx + yy * yy + sqrt ( ( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) ) )		1287708	1		+			
ANR	1288909	MultiplicativeExpression	yx * yx		1287708	0		*			
ANR	1288910	Identifier	yx		1287708	0					
ANR	1288911	Identifier	yx		1287708	1					
ANR	1288912	AdditiveExpression	yy * yy + sqrt ( ( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) ) )		1287708	1		+			
ANR	1288913	MultiplicativeExpression	yy * yy		1287708	0		*			
ANR	1288914	Identifier	yy		1287708	0					
ANR	1288915	Identifier	yy		1287708	1					
ANR	1288916	CallExpression	sqrt ( ( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) ) )		1287708	1					
ANR	1288917	Callee	sqrt		1287708	0					
ANR	1288918	Identifier	sqrt		1287708	0					
ANR	1288919	ArgumentList	( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) )		1287708	1					
ANR	1288920	Argument	( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) )		1287708	0					
ANR	1288921	MultiplicativeExpression	( ( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy ) ) * ( ( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy ) )		1287708	0		*			
ANR	1288922	AdditiveExpression	( xy + yx ) * ( xy + yx ) + ( xx - yy ) * ( xx - yy )		1287708	0		+			
ANR	1288923	MultiplicativeExpression	( xy + yx ) * ( xy + yx )		1287708	0		*			
ANR	1288924	AdditiveExpression	xy + yx		1287708	0		+			
ANR	1288925	Identifier	xy		1287708	0					
ANR	1288926	Identifier	yx		1287708	1					
ANR	1288927	AdditiveExpression	xy + yx		1287708	1		+			
ANR	1288928	Identifier	xy		1287708	0					
ANR	1288929	Identifier	yx		1287708	1					
ANR	1288930	MultiplicativeExpression	( xx - yy ) * ( xx - yy )		1287708	1		*			
ANR	1288931	AdditiveExpression	xx - yy		1287708	0		-			
ANR	1288932	Identifier	xx		1287708	0					
ANR	1288933	Identifier	yy		1287708	1					
ANR	1288934	AdditiveExpression	xx - yy		1287708	1		-			
ANR	1288935	Identifier	xx		1287708	0					
ANR	1288936	Identifier	yy		1287708	1					
ANR	1288937	AdditiveExpression	( xy - yx ) * ( xy - yx ) + ( xx + yy ) * ( xx + yy )		1287708	1		+			
ANR	1288938	MultiplicativeExpression	( xy - yx ) * ( xy - yx )		1287708	0		*			
ANR	1288939	AdditiveExpression	xy - yx		1287708	0		-			
ANR	1288940	Identifier	xy		1287708	0					
ANR	1288941	Identifier	yx		1287708	1					
ANR	1288942	AdditiveExpression	xy - yx		1287708	1		-			
ANR	1288943	Identifier	xy		1287708	0					
ANR	1288944	Identifier	yx		1287708	1					
ANR	1288945	MultiplicativeExpression	( xx + yy ) * ( xx + yy )		1287708	1		*			
ANR	1288946	AdditiveExpression	xx + yy		1287708	0		+			
ANR	1288947	Identifier	xx		1287708	0					
ANR	1288948	Identifier	yy		1287708	1					
ANR	1288949	AdditiveExpression	xx + yy		1287708	1		+			
ANR	1288950	Identifier	xx		1287708	0					
ANR	1288951	Identifier	yy		1287708	1					
ANR	1288952	PrimaryExpression	2		1287708	1					
ANR	1288953	ExpressionStatement	always_thin = max_rr * line_width * line_width < 0.25	641:20:25837:25890	1287708	1	True				
ANR	1288954	AssignmentExpression	always_thin = max_rr * line_width * line_width < 0.25		1287708	0		=			
ANR	1288955	Identifier	always_thin		1287708	0					
ANR	1288956	RelationalExpression	max_rr * line_width * line_width < 0.25		1287708	1		<			
ANR	1288957	MultiplicativeExpression	max_rr * line_width * line_width		1287708	0		*			
ANR	1288958	Identifier	max_rr		1287708	0					
ANR	1288959	MultiplicativeExpression	line_width * line_width		1287708	1		*			
ANR	1288960	Identifier	line_width		1287708	0					
ANR	1288961	Identifier	line_width		1287708	1					
ANR	1288962	PrimaryExpression	0.25		1287708	1					
ANR	1288963	ExpressionStatement	"if_debug7m ( 'o' , ppath -> memory , ""[o]ctm=(%g,%g,%g,%g,%g,%g) thin=%d\\n"" , xx , xy , yx , yy , pgs -> ctm . tx , pgs -> ctm . ty , always_thin )"	645:4:25930:26069	1287708	165	True				
ANR	1288964	CallExpression	"if_debug7m ( 'o' , ppath -> memory , ""[o]ctm=(%g,%g,%g,%g,%g,%g) thin=%d\\n"" , xx , xy , yx , yy , pgs -> ctm . tx , pgs -> ctm . ty , always_thin )"		1287708	0					
ANR	1288965	Callee	if_debug7m		1287708	0					
ANR	1288966	Identifier	if_debug7m		1287708	0					
ANR	1288967	ArgumentList	'o'		1287708	1					
ANR	1288968	Argument	'o'		1287708	0					
ANR	1288969	PrimaryExpression	'o'		1287708	0					
ANR	1288970	Argument	ppath -> memory		1287708	1					
ANR	1288971	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1288972	Identifier	ppath		1287708	0					
ANR	1288973	Identifier	memory		1287708	1					
ANR	1288974	Argument	"""[o]ctm=(%g,%g,%g,%g,%g,%g) thin=%d\\n"""		1287708	2					
ANR	1288975	PrimaryExpression	"""[o]ctm=(%g,%g,%g,%g,%g,%g) thin=%d\\n"""		1287708	0					
ANR	1288976	Argument	xx		1287708	3					
ANR	1288977	Identifier	xx		1287708	0					
ANR	1288978	Argument	xy		1287708	4					
ANR	1288979	Identifier	xy		1287708	0					
ANR	1288980	Argument	yx		1287708	5					
ANR	1288981	Identifier	yx		1287708	0					
ANR	1288982	Argument	yy		1287708	6					
ANR	1288983	Identifier	yy		1287708	0					
ANR	1288984	Argument	pgs -> ctm . tx		1287708	7					
ANR	1288985	MemberAccess	pgs -> ctm . tx		1287708	0					
ANR	1288986	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1288987	Identifier	pgs		1287708	0					
ANR	1288988	Identifier	ctm		1287708	1					
ANR	1288989	Identifier	tx		1287708	1					
ANR	1288990	Argument	pgs -> ctm . ty		1287708	8					
ANR	1288991	MemberAccess	pgs -> ctm . ty		1287708	0					
ANR	1288992	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1288993	Identifier	pgs		1287708	0					
ANR	1288994	Identifier	ctm		1287708	1					
ANR	1288995	Identifier	ty		1287708	1					
ANR	1288996	Argument	always_thin		1287708	9					
ANR	1288997	Identifier	always_thin		1287708	0					
ANR	1288998	IfStatement	if ( device_dot_length != 0 )		1287708	166					
ANR	1288999	Condition	device_dot_length != 0	647:8:26079:26100	1287708	0	True				
ANR	1289000	EqualityExpression	device_dot_length != 0		1287708	0		!=			
ANR	1289001	Identifier	device_dot_length		1287708	0					
ANR	1289002	PrimaryExpression	0		1287708	1					
ANR	1289003	CompoundStatement		231:8:9801:9822	1287708	1					
ANR	1289004	IdentifierDeclStatement	gs_matrix mat ;	652:8:26273:26286	1287708	0	True				
ANR	1289005	IdentifierDecl	mat		1287708	0					
ANR	1289006	IdentifierDeclType	gs_matrix		1287708	0					
ANR	1289007	Identifier	mat		1287708	1					
ANR	1289008	IdentifierDeclStatement	const gs_matrix * pmat ;	653:8:26296:26317	1287708	1	True				
ANR	1289009	IdentifierDecl	* pmat		1287708	0					
ANR	1289010	IdentifierDeclType	const gs_matrix *		1287708	0					
ANR	1289011	Identifier	pmat		1287708	1					
ANR	1289012	IfStatement	if ( pgs_lp -> dot_length_absolute )		1287708	2					
ANR	1289013	Condition	pgs_lp -> dot_length_absolute	655:12:26332:26358	1287708	0	True				
ANR	1289014	PtrMemberAccess	pgs_lp -> dot_length_absolute		1287708	0					
ANR	1289015	Identifier	pgs_lp		1287708	0					
ANR	1289016	Identifier	dot_length_absolute		1287708	1					
ANR	1289017	CompoundStatement		233:41:9866:9866	1287708	1					
ANR	1289018	ExpressionStatement	"gs_deviceinitialmatrix ( pdev , & mat )"	656:12:26375:26409	1287708	0	True				
ANR	1289019	CallExpression	"gs_deviceinitialmatrix ( pdev , & mat )"		1287708	0					
ANR	1289020	Callee	gs_deviceinitialmatrix		1287708	0					
ANR	1289021	Identifier	gs_deviceinitialmatrix		1287708	0					
ANR	1289022	ArgumentList	pdev		1287708	1					
ANR	1289023	Argument	pdev		1287708	0					
ANR	1289024	Identifier	pdev		1287708	0					
ANR	1289025	Argument	& mat		1287708	1					
ANR	1289026	UnaryOperationExpression	& mat		1287708	0					
ANR	1289027	UnaryOperator	&		1287708	0					
ANR	1289028	Identifier	mat		1287708	1					
ANR	1289029	ExpressionStatement	pmat = & mat	657:12:26423:26434	1287708	1	True				
ANR	1289030	AssignmentExpression	pmat = & mat		1287708	0		=			
ANR	1289031	Identifier	pmat		1287708	0					
ANR	1289032	UnaryOperationExpression	& mat		1287708	1					
ANR	1289033	UnaryOperator	&		1287708	0					
ANR	1289034	Identifier	mat		1287708	1					
ANR	1289035	ElseStatement	else		1287708	0					
ANR	1289036	ExpressionStatement	pmat = ( const gs_matrix * ) & pgs -> ctm	659:12:26463:26498	1287708	0	True				
ANR	1289037	AssignmentExpression	pmat = ( const gs_matrix * ) & pgs -> ctm		1287708	0		=			
ANR	1289038	Identifier	pmat		1287708	0					
ANR	1289039	CastExpression	( const gs_matrix * ) & pgs -> ctm		1287708	1					
ANR	1289040	CastTarget	const gs_matrix *		1287708	0					
ANR	1289041	UnaryOperationExpression	& pgs -> ctm		1287708	1					
ANR	1289042	UnaryOperator	&		1287708	0					
ANR	1289043	PtrMemberAccess	pgs -> ctm		1287708	1					
ANR	1289044	Identifier	pgs		1287708	0					
ANR	1289045	Identifier	ctm		1287708	1					
ANR	1289046	ExpressionStatement	device_dot_length *= fabs ( pmat -> xy ) + fabs ( pmat -> yy )	660:8:26508:26560	1287708	3	True				
ANR	1289047	AssignmentExpression	device_dot_length *= fabs ( pmat -> xy ) + fabs ( pmat -> yy )		1287708	0		*=			
ANR	1289048	Identifier	device_dot_length		1287708	0					
ANR	1289049	AdditiveExpression	fabs ( pmat -> xy ) + fabs ( pmat -> yy )		1287708	1		+			
ANR	1289050	CallExpression	fabs ( pmat -> xy )		1287708	0					
ANR	1289051	Callee	fabs		1287708	0					
ANR	1289052	Identifier	fabs		1287708	0					
ANR	1289053	ArgumentList	pmat -> xy		1287708	1					
ANR	1289054	Argument	pmat -> xy		1287708	0					
ANR	1289055	PtrMemberAccess	pmat -> xy		1287708	0					
ANR	1289056	Identifier	pmat		1287708	0					
ANR	1289057	Identifier	xy		1287708	1					
ANR	1289058	CallExpression	fabs ( pmat -> yy )		1287708	1					
ANR	1289059	Callee	fabs		1287708	0					
ANR	1289060	Identifier	fabs		1287708	0					
ANR	1289061	ArgumentList	pmat -> yy		1287708	1					
ANR	1289062	Argument	pmat -> yy		1287708	0					
ANR	1289063	PtrMemberAccess	pmat -> yy		1287708	0					
ANR	1289064	Identifier	pmat		1287708	0					
ANR	1289065	Identifier	yy		1287708	1					
ANR	1289066	IfStatement	if ( ! gx_path_has_curves ( ppath ) && ! gx_path_has_long_segments ( ppath ) )		1287708	167					
ANR	1289067	Condition	! gx_path_has_curves ( ppath ) && ! gx_path_has_long_segments ( ppath )	663:8:26650:26712	1287708	0	True				
ANR	1289068	AndExpression	! gx_path_has_curves ( ppath ) && ! gx_path_has_long_segments ( ppath )		1287708	0		&&			
ANR	1289069	UnaryOperationExpression	! gx_path_has_curves ( ppath )		1287708	0					
ANR	1289070	UnaryOperator	!		1287708	0					
ANR	1289071	CallExpression	gx_path_has_curves ( ppath )		1287708	1					
ANR	1289072	Callee	gx_path_has_curves		1287708	0					
ANR	1289073	Identifier	gx_path_has_curves		1287708	0					
ANR	1289074	ArgumentList	ppath		1287708	1					
ANR	1289075	Argument	ppath		1287708	0					
ANR	1289076	Identifier	ppath		1287708	0					
ANR	1289077	UnaryOperationExpression	! gx_path_has_long_segments ( ppath )		1287708	1					
ANR	1289078	UnaryOperator	!		1287708	0					
ANR	1289079	CallExpression	gx_path_has_long_segments ( ppath )		1287708	1					
ANR	1289080	Callee	gx_path_has_long_segments		1287708	0					
ANR	1289081	Identifier	gx_path_has_long_segments		1287708	0					
ANR	1289082	ArgumentList	ppath		1287708	1					
ANR	1289083	Argument	ppath		1287708	0					
ANR	1289084	Identifier	ppath		1287708	0					
ANR	1289085	CompoundStatement		241:73:10220:10220	1287708	1					
ANR	1289086	IfStatement	if ( ! ppath -> first_subpath )		1287708	0					
ANR	1289087	Condition	! ppath -> first_subpath	665:12:26765:26785	1287708	0	True				
ANR	1289088	UnaryOperationExpression	! ppath -> first_subpath		1287708	0					
ANR	1289089	UnaryOperator	!		1287708	0					
ANR	1289090	PtrMemberAccess	ppath -> first_subpath		1287708	1					
ANR	1289091	Identifier	ppath		1287708	0					
ANR	1289092	Identifier	first_subpath		1287708	1					
ANR	1289093	ReturnStatement	return 0 ;	666:12:26800:26808	1287708	1	True				
ANR	1289094	PrimaryExpression	0		1287708	0					
ANR	1289095	ExpressionStatement	spath = ppath	667:8:26818:26831	1287708	1	True				
ANR	1289096	AssignmentExpression	spath = ppath		1287708	0		=			
ANR	1289097	Identifier	spath		1287708	0					
ANR	1289098	Identifier	ppath		1287708	1					
ANR	1289099	ElseStatement	else		1287708	0					
ANR	1289100	CompoundStatement		246:11:10349:10349	1287708	0					
ANR	1289101	ExpressionStatement	"gx_path_init_local ( & fpath , ppath -> memory )"	669:8:26854:26895	1287708	0	True				
ANR	1289102	CallExpression	"gx_path_init_local ( & fpath , ppath -> memory )"		1287708	0					
ANR	1289103	Callee	gx_path_init_local		1287708	0					
ANR	1289104	Identifier	gx_path_init_local		1287708	0					
ANR	1289105	ArgumentList	& fpath		1287708	1					
ANR	1289106	Argument	& fpath		1287708	0					
ANR	1289107	UnaryOperationExpression	& fpath		1287708	0					
ANR	1289108	UnaryOperator	&		1287708	0					
ANR	1289109	Identifier	fpath		1287708	1					
ANR	1289110	Argument	ppath -> memory		1287708	1					
ANR	1289111	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1289112	Identifier	ppath		1287708	0					
ANR	1289113	Identifier	memory		1287708	1					
ANR	1289114	IfStatement	"if ( ( code = gx_path_add_flattened_for_stroke ( ppath , & fpath , params -> flatness , pgs ) ) < 0 )"		1287708	1					
ANR	1289115	Condition	"( code = gx_path_add_flattened_for_stroke ( ppath , & fpath , params -> flatness , pgs ) ) < 0"	670:12:26909:27039	1287708	0	True				
ANR	1289116	RelationalExpression	"( code = gx_path_add_flattened_for_stroke ( ppath , & fpath , params -> flatness , pgs ) ) < 0"		1287708	0		<			
ANR	1289117	AssignmentExpression	"code = gx_path_add_flattened_for_stroke ( ppath , & fpath , params -> flatness , pgs )"		1287708	0		=			
ANR	1289118	Identifier	code		1287708	0					
ANR	1289119	CallExpression	"gx_path_add_flattened_for_stroke ( ppath , & fpath , params -> flatness , pgs )"		1287708	1					
ANR	1289120	Callee	gx_path_add_flattened_for_stroke		1287708	0					
ANR	1289121	Identifier	gx_path_add_flattened_for_stroke		1287708	0					
ANR	1289122	ArgumentList	ppath		1287708	1					
ANR	1289123	Argument	ppath		1287708	0					
ANR	1289124	Identifier	ppath		1287708	0					
ANR	1289125	Argument	& fpath		1287708	1					
ANR	1289126	UnaryOperationExpression	& fpath		1287708	0					
ANR	1289127	UnaryOperator	&		1287708	0					
ANR	1289128	Identifier	fpath		1287708	1					
ANR	1289129	Argument	params -> flatness		1287708	2					
ANR	1289130	PtrMemberAccess	params -> flatness		1287708	0					
ANR	1289131	Identifier	params		1287708	0					
ANR	1289132	Identifier	flatness		1287708	1					
ANR	1289133	Argument	pgs		1287708	3					
ANR	1289134	Identifier	pgs		1287708	0					
ANR	1289135	PrimaryExpression	0		1287708	1					
ANR	1289136	ReturnStatement	return code ;	673:12:27067:27078	1287708	1	True				
ANR	1289137	Identifier	code		1287708	0					
ANR	1289138	ExpressionStatement	spath = & fpath	674:8:27088:27102	1287708	2	True				
ANR	1289139	AssignmentExpression	spath = & fpath		1287708	0		=			
ANR	1289140	Identifier	spath		1287708	0					
ANR	1289141	UnaryOperationExpression	& fpath		1287708	1					
ANR	1289142	UnaryOperator	&		1287708	0					
ANR	1289143	Identifier	fpath		1287708	1					
ANR	1289144	IfStatement	if ( dash_count )		1287708	168					
ANR	1289145	Condition	dash_count	676:8:27118:27127	1287708	0	True				
ANR	1289146	Identifier	dash_count		1287708	0					
ANR	1289147	CompoundStatement		258:8:10722:10762	1287708	1					
ANR	1289148	IdentifierDeclStatement	float max_dash_len = 0 ;	677:8:27140:27162	1287708	0	True				
ANR	1289149	IdentifierDecl	max_dash_len = 0		1287708	0					
ANR	1289150	IdentifierDeclType	float		1287708	0					
ANR	1289151	Identifier	max_dash_len		1287708	1					
ANR	1289152	AssignmentExpression	max_dash_len = 0		1287708	2		=			
ANR	1289153	Identifier	max_dash_len		1287708	0					
ANR	1289154	PrimaryExpression	0		1287708	1					
ANR	1289155	IdentifierDeclStatement	float expand_squared ;	678:8:27172:27192	1287708	1	True				
ANR	1289156	IdentifierDecl	expand_squared		1287708	0					
ANR	1289157	IdentifierDeclType	float		1287708	0					
ANR	1289158	Identifier	expand_squared		1287708	1					
ANR	1289159	IdentifierDeclStatement	int i ;	679:8:27202:27207	1287708	2	True				
ANR	1289160	IdentifierDecl	i		1287708	0					
ANR	1289161	IdentifierDeclType	int		1287708	0					
ANR	1289162	Identifier	i		1287708	1					
ANR	1289163	IdentifierDeclStatement	float adjust = ( float ) pgs -> fill_adjust . x ;	680:8:27217:27257	1287708	3	True				
ANR	1289164	IdentifierDecl	adjust = ( float ) pgs -> fill_adjust . x		1287708	0					
ANR	1289165	IdentifierDeclType	float		1287708	0					
ANR	1289166	Identifier	adjust		1287708	1					
ANR	1289167	AssignmentExpression	adjust = ( float ) pgs -> fill_adjust . x		1287708	2		=			
ANR	1289168	Identifier	adjust		1287708	0					
ANR	1289169	CastExpression	( float ) pgs -> fill_adjust . x		1287708	1					
ANR	1289170	CastTarget	float		1287708	0					
ANR	1289171	MemberAccess	pgs -> fill_adjust . x		1287708	1					
ANR	1289172	PtrMemberAccess	pgs -> fill_adjust		1287708	0					
ANR	1289173	Identifier	pgs		1287708	0					
ANR	1289174	Identifier	fill_adjust		1287708	1					
ANR	1289175	Identifier	x		1287708	1					
ANR	1289176	IfStatement	if ( adjust > ( float ) pgs -> fill_adjust . y )		1287708	4					
ANR	1289177	Condition	adjust > ( float ) pgs -> fill_adjust . y	681:12:27271:27304	1287708	0	True				
ANR	1289178	RelationalExpression	adjust > ( float ) pgs -> fill_adjust . y		1287708	0		>			
ANR	1289179	Identifier	adjust		1287708	0					
ANR	1289180	CastExpression	( float ) pgs -> fill_adjust . y		1287708	1					
ANR	1289181	CastTarget	float		1287708	0					
ANR	1289182	MemberAccess	pgs -> fill_adjust . y		1287708	1					
ANR	1289183	PtrMemberAccess	pgs -> fill_adjust		1287708	0					
ANR	1289184	Identifier	pgs		1287708	0					
ANR	1289185	Identifier	fill_adjust		1287708	1					
ANR	1289186	Identifier	y		1287708	1					
ANR	1289187	ExpressionStatement	adjust = ( float ) pgs -> fill_adjust . y	682:12:27319:27353	1287708	1	True				
ANR	1289188	AssignmentExpression	adjust = ( float ) pgs -> fill_adjust . y		1287708	0		=			
ANR	1289189	Identifier	adjust		1287708	0					
ANR	1289190	CastExpression	( float ) pgs -> fill_adjust . y		1287708	1					
ANR	1289191	CastTarget	float		1287708	0					
ANR	1289192	MemberAccess	pgs -> fill_adjust . y		1287708	1					
ANR	1289193	PtrMemberAccess	pgs -> fill_adjust		1287708	0					
ANR	1289194	Identifier	pgs		1287708	0					
ANR	1289195	Identifier	fill_adjust		1287708	1					
ANR	1289196	Identifier	y		1287708	1					
ANR	1289197	ForStatement	for ( i = 0 ; i < dash_count ; i ++ )		1287708	5					
ANR	1289198	ForInit	i = 0 ;	683:13:27368:27373	1287708	0	True				
ANR	1289199	AssignmentExpression	i = 0		1287708	0		=			
ANR	1289200	Identifier	i		1287708	0					
ANR	1289201	PrimaryExpression	0		1287708	1					
ANR	1289202	Condition	i < dash_count	683:20:27375:27388	1287708	1	True				
ANR	1289203	RelationalExpression	i < dash_count		1287708	0		<			
ANR	1289204	Identifier	i		1287708	0					
ANR	1289205	Identifier	dash_count		1287708	1					
ANR	1289206	PostIncDecOperationExpression	i ++	683:36:27391:27393	1287708	2	True				
ANR	1289207	Identifier	i		1287708	0					
ANR	1289208	IncDec	++		1287708	1					
ANR	1289209	CompoundStatement		261:41:10901:10901	1287708	3					
ANR	1289210	IfStatement	if ( max_dash_len < pgs_lp -> dash . pattern [ i ] )		1287708	0					
ANR	1289211	Condition	max_dash_len < pgs_lp -> dash . pattern [ i ]	684:16:27414:27451	1287708	0	True				
ANR	1289212	RelationalExpression	max_dash_len < pgs_lp -> dash . pattern [ i ]		1287708	0		<			
ANR	1289213	Identifier	max_dash_len		1287708	0					
ANR	1289214	ArrayIndexing	pgs_lp -> dash . pattern [ i ]		1287708	1					
ANR	1289215	MemberAccess	pgs_lp -> dash . pattern		1287708	0					
ANR	1289216	PtrMemberAccess	pgs_lp -> dash		1287708	0					
ANR	1289217	Identifier	pgs_lp		1287708	0					
ANR	1289218	Identifier	dash		1287708	1					
ANR	1289219	Identifier	pattern		1287708	1					
ANR	1289220	Identifier	i		1287708	1					
ANR	1289221	ExpressionStatement	max_dash_len = pgs_lp -> dash . pattern [ i ]	685:16:27470:27508	1287708	1	True				
ANR	1289222	AssignmentExpression	max_dash_len = pgs_lp -> dash . pattern [ i ]		1287708	0		=			
ANR	1289223	Identifier	max_dash_len		1287708	0					
ANR	1289224	ArrayIndexing	pgs_lp -> dash . pattern [ i ]		1287708	1					
ANR	1289225	MemberAccess	pgs_lp -> dash . pattern		1287708	0					
ANR	1289226	PtrMemberAccess	pgs_lp -> dash		1287708	0					
ANR	1289227	Identifier	pgs_lp		1287708	0					
ANR	1289228	Identifier	dash		1287708	1					
ANR	1289229	Identifier	pattern		1287708	1					
ANR	1289230	Identifier	i		1287708	1					
ANR	1289231	ExpressionStatement	expand_squared = pgs -> ctm . xx * pgs -> ctm . yy - pgs -> ctm . xy * pgs -> ctm . yx	687:8:27528:27598	1287708	6	True				
ANR	1289232	AssignmentExpression	expand_squared = pgs -> ctm . xx * pgs -> ctm . yy - pgs -> ctm . xy * pgs -> ctm . yx		1287708	0		=			
ANR	1289233	Identifier	expand_squared		1287708	0					
ANR	1289234	AdditiveExpression	pgs -> ctm . xx * pgs -> ctm . yy - pgs -> ctm . xy * pgs -> ctm . yx		1287708	1		-			
ANR	1289235	MultiplicativeExpression	pgs -> ctm . xx * pgs -> ctm . yy		1287708	0		*			
ANR	1289236	MemberAccess	pgs -> ctm . xx		1287708	0					
ANR	1289237	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1289238	Identifier	pgs		1287708	0					
ANR	1289239	Identifier	ctm		1287708	1					
ANR	1289240	Identifier	xx		1287708	1					
ANR	1289241	MemberAccess	pgs -> ctm . yy		1287708	1					
ANR	1289242	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1289243	Identifier	pgs		1287708	0					
ANR	1289244	Identifier	ctm		1287708	1					
ANR	1289245	Identifier	yy		1287708	1					
ANR	1289246	MultiplicativeExpression	pgs -> ctm . xy * pgs -> ctm . yx		1287708	1		*			
ANR	1289247	MemberAccess	pgs -> ctm . xy		1287708	0					
ANR	1289248	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1289249	Identifier	pgs		1287708	0					
ANR	1289250	Identifier	ctm		1287708	1					
ANR	1289251	Identifier	xy		1287708	1					
ANR	1289252	MemberAccess	pgs -> ctm . yx		1287708	1					
ANR	1289253	PtrMemberAccess	pgs -> ctm		1287708	0					
ANR	1289254	Identifier	pgs		1287708	0					
ANR	1289255	Identifier	ctm		1287708	1					
ANR	1289256	Identifier	yx		1287708	1					
ANR	1289257	IfStatement	if ( expand_squared < 0 )		1287708	7					
ANR	1289258	Condition	expand_squared < 0	688:12:27612:27629	1287708	0	True				
ANR	1289259	RelationalExpression	expand_squared < 0		1287708	0		<			
ANR	1289260	Identifier	expand_squared		1287708	0					
ANR	1289261	PrimaryExpression	0		1287708	1					
ANR	1289262	ExpressionStatement	expand_squared = - expand_squared	689:12:27644:27676	1287708	1	True				
ANR	1289263	AssignmentExpression	expand_squared = - expand_squared		1287708	0		=			
ANR	1289264	Identifier	expand_squared		1287708	0					
ANR	1289265	UnaryOperationExpression	- expand_squared		1287708	1					
ANR	1289266	UnaryOperator	-		1287708	0					
ANR	1289267	Identifier	expand_squared		1287708	1					
ANR	1289268	ExpressionStatement	expand_squared *= max_dash_len * max_dash_len	690:8:27686:27731	1287708	8	True				
ANR	1289269	AssignmentExpression	expand_squared *= max_dash_len * max_dash_len		1287708	0		*=			
ANR	1289270	Identifier	expand_squared		1287708	0					
ANR	1289271	MultiplicativeExpression	max_dash_len * max_dash_len		1287708	1		*			
ANR	1289272	Identifier	max_dash_len		1287708	0					
ANR	1289273	Identifier	max_dash_len		1287708	1					
ANR	1289274	IfStatement	if ( pgs -> line_params . half_width > 1 )		1287708	9					
ANR	1289275	Condition	pgs -> line_params . half_width > 1	693:12:27839:27869	1287708	0	True				
ANR	1289276	RelationalExpression	pgs -> line_params . half_width > 1		1287708	0		>			
ANR	1289277	MemberAccess	pgs -> line_params . half_width		1287708	0					
ANR	1289278	PtrMemberAccess	pgs -> line_params		1287708	0					
ANR	1289279	Identifier	pgs		1287708	0					
ANR	1289280	Identifier	line_params		1287708	1					
ANR	1289281	Identifier	half_width		1287708	1					
ANR	1289282	PrimaryExpression	1		1287708	1					
ANR	1289283	ExpressionStatement	adjust /= pgs -> line_params . half_width	694:12:27884:27921	1287708	1	True				
ANR	1289284	AssignmentExpression	adjust /= pgs -> line_params . half_width		1287708	0		/=			
ANR	1289285	Identifier	adjust		1287708	0					
ANR	1289286	MemberAccess	pgs -> line_params . half_width		1287708	1					
ANR	1289287	PtrMemberAccess	pgs -> line_params		1287708	0					
ANR	1289288	Identifier	pgs		1287708	0					
ANR	1289289	Identifier	line_params		1287708	1					
ANR	1289290	Identifier	half_width		1287708	1					
ANR	1289291	IfStatement	if ( expand_squared * 65536.0f >= ( float ) ( adjust * adjust ) )		1287708	10					
ANR	1289292	Condition	expand_squared * 65536.0f >= ( float ) ( adjust * adjust )	695:12:27935:27983	1287708	0	True				
ANR	1289293	RelationalExpression	expand_squared * 65536.0f >= ( float ) ( adjust * adjust )		1287708	0		>=			
ANR	1289294	MultiplicativeExpression	expand_squared * 65536.0f		1287708	0		*			
ANR	1289295	Identifier	expand_squared		1287708	0					
ANR	1289296	PrimaryExpression	65536.0f		1287708	1					
ANR	1289297	CastExpression	( float ) ( adjust * adjust )		1287708	1					
ANR	1289298	CastTarget	float		1287708	0					
ANR	1289299	MultiplicativeExpression	adjust * adjust		1287708	1		*			
ANR	1289300	Identifier	adjust		1287708	0					
ANR	1289301	Identifier	adjust		1287708	1					
ANR	1289302	CompoundStatement		273:63:11491:11491	1287708	1					
ANR	1289303	ExpressionStatement	"gx_path_init_local ( & dpath , ppath -> memory )"	696:12:28000:28041	1287708	0	True				
ANR	1289304	CallExpression	"gx_path_init_local ( & dpath , ppath -> memory )"		1287708	0					
ANR	1289305	Callee	gx_path_init_local		1287708	0					
ANR	1289306	Identifier	gx_path_init_local		1287708	0					
ANR	1289307	ArgumentList	& dpath		1287708	1					
ANR	1289308	Argument	& dpath		1287708	0					
ANR	1289309	UnaryOperationExpression	& dpath		1287708	0					
ANR	1289310	UnaryOperator	&		1287708	0					
ANR	1289311	Identifier	dpath		1287708	1					
ANR	1289312	Argument	ppath -> memory		1287708	1					
ANR	1289313	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1289314	Identifier	ppath		1287708	0					
ANR	1289315	Identifier	memory		1287708	1					
ANR	1289316	ExpressionStatement	"code = gx_path_add_dash_expansion ( spath , & dpath , pgs )"	697:12:28055:28108	1287708	1	True				
ANR	1289317	AssignmentExpression	"code = gx_path_add_dash_expansion ( spath , & dpath , pgs )"		1287708	0		=			
ANR	1289318	Identifier	code		1287708	0					
ANR	1289319	CallExpression	"gx_path_add_dash_expansion ( spath , & dpath , pgs )"		1287708	1					
ANR	1289320	Callee	gx_path_add_dash_expansion		1287708	0					
ANR	1289321	Identifier	gx_path_add_dash_expansion		1287708	0					
ANR	1289322	ArgumentList	spath		1287708	1					
ANR	1289323	Argument	spath		1287708	0					
ANR	1289324	Identifier	spath		1287708	0					
ANR	1289325	Argument	& dpath		1287708	1					
ANR	1289326	UnaryOperationExpression	& dpath		1287708	0					
ANR	1289327	UnaryOperator	&		1287708	0					
ANR	1289328	Identifier	dpath		1287708	1					
ANR	1289329	Argument	pgs		1287708	2					
ANR	1289330	Identifier	pgs		1287708	0					
ANR	1289331	IfStatement	if ( code < 0 )		1287708	2					
ANR	1289332	Condition	code < 0	698:16:28126:28133	1287708	0	True				
ANR	1289333	RelationalExpression	code < 0		1287708	0		<			
ANR	1289334	Identifier	code		1287708	0					
ANR	1289335	PrimaryExpression	0		1287708	1					
ANR	1289336	GotoStatement	goto exf ;	699:16:28152:28160	1287708	1	True				
ANR	1289337	Identifier	exf		1287708	0					
ANR	1289338	ExpressionStatement	spath = & dpath	700:12:28174:28188	1287708	3	True				
ANR	1289339	AssignmentExpression	spath = & dpath		1287708	0		=			
ANR	1289340	Identifier	spath		1287708	0					
ANR	1289341	UnaryOperationExpression	& dpath		1287708	1					
ANR	1289342	UnaryOperator	&		1287708	0					
ANR	1289343	Identifier	dpath		1287708	1					
ANR	1289344	ElseStatement	else		1287708	0					
ANR	1289345	CompoundStatement		279:15:11710:11710	1287708	0					
ANR	1289346	ExpressionStatement	dash_count = 0	702:12:28219:28233	1287708	0	True				
ANR	1289347	AssignmentExpression	dash_count = 0		1287708	0		=			
ANR	1289348	Identifier	dash_count		1287708	0					
ANR	1289349	PrimaryExpression	0		1287708	1					
ANR	1289350	IfStatement	if ( to_path == 0 )		1287708	169					
ANR	1289351	Condition	to_path == 0	705:8:28259:28270	1287708	0	True				
ANR	1289352	EqualityExpression	to_path == 0		1287708	0		==			
ANR	1289353	Identifier	to_path		1287708	0					
ANR	1289354	PrimaryExpression	0		1287708	1					
ANR	1289355	CompoundStatement		283:22:11778:11778	1287708	1					
ANR	1289356	ExpressionStatement	to_path = & stroke_path_body	707:8:28346:28373	1287708	0	True				
ANR	1289357	AssignmentExpression	to_path = & stroke_path_body		1287708	0		=			
ANR	1289358	Identifier	to_path		1287708	0					
ANR	1289359	UnaryOperationExpression	& stroke_path_body		1287708	1					
ANR	1289360	UnaryOperator	&		1287708	0					
ANR	1289361	Identifier	stroke_path_body		1287708	1					
ANR	1289362	ExpressionStatement	"gx_path_init_local ( & stroke_path_body , ppath -> memory )"	708:8:28383:28435	1287708	1	True				
ANR	1289363	CallExpression	"gx_path_init_local ( & stroke_path_body , ppath -> memory )"		1287708	0					
ANR	1289364	Callee	gx_path_init_local		1287708	0					
ANR	1289365	Identifier	gx_path_init_local		1287708	0					
ANR	1289366	ArgumentList	& stroke_path_body		1287708	1					
ANR	1289367	Argument	& stroke_path_body		1287708	0					
ANR	1289368	UnaryOperationExpression	& stroke_path_body		1287708	0					
ANR	1289369	UnaryOperator	&		1287708	0					
ANR	1289370	Identifier	stroke_path_body		1287708	1					
ANR	1289371	Argument	ppath -> memory		1287708	1					
ANR	1289372	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1289373	Identifier	ppath		1287708	0					
ANR	1289374	Identifier	memory		1287708	1					
ANR	1289375	IfStatement	if ( line_proc == stroke_add_fast )		1287708	170					
ANR	1289376	Condition	line_proc == stroke_add_fast	710:8:28451:28478	1287708	0	True				
ANR	1289377	EqualityExpression	line_proc == stroke_add_fast		1287708	0		==			
ANR	1289378	Identifier	line_proc		1287708	0					
ANR	1289379	Identifier	stroke_add_fast		1287708	1					
ANR	1289380	CompoundStatement		288:38:11986:11986	1287708	1					
ANR	1289381	ExpressionStatement	to_path_reverse = & stroke_path_reverse	711:8:28491:28529	1287708	0	True				
ANR	1289382	AssignmentExpression	to_path_reverse = & stroke_path_reverse		1287708	0		=			
ANR	1289383	Identifier	to_path_reverse		1287708	0					
ANR	1289384	UnaryOperationExpression	& stroke_path_reverse		1287708	1					
ANR	1289385	UnaryOperator	&		1287708	0					
ANR	1289386	Identifier	stroke_path_reverse		1287708	1					
ANR	1289387	ExpressionStatement	"gx_path_init_local ( & stroke_path_reverse , ppath -> memory )"	712:8:28539:28594	1287708	1	True				
ANR	1289388	CallExpression	"gx_path_init_local ( & stroke_path_reverse , ppath -> memory )"		1287708	0					
ANR	1289389	Callee	gx_path_init_local		1287708	0					
ANR	1289390	Identifier	gx_path_init_local		1287708	0					
ANR	1289391	ArgumentList	& stroke_path_reverse		1287708	1					
ANR	1289392	Argument	& stroke_path_reverse		1287708	0					
ANR	1289393	UnaryOperationExpression	& stroke_path_reverse		1287708	0					
ANR	1289394	UnaryOperator	&		1287708	0					
ANR	1289395	Identifier	stroke_path_reverse		1287708	1					
ANR	1289396	Argument	ppath -> memory		1287708	1					
ANR	1289397	PtrMemberAccess	ppath -> memory		1287708	0					
ANR	1289398	Identifier	ppath		1287708	0					
ANR	1289399	Identifier	memory		1287708	1					
ANR	1289400	ForStatement	for ( psub = spath -> first_subpath ; psub != 0 ; )		1287708	171					
ANR	1289401	ForInit	psub = spath -> first_subpath ;	714:9:28611:28638	1287708	0	True				
ANR	1289402	AssignmentExpression	psub = spath -> first_subpath		1287708	0		=			
ANR	1289403	Identifier	psub		1287708	0					
ANR	1289404	PtrMemberAccess	spath -> first_subpath		1287708	1					
ANR	1289405	Identifier	spath		1287708	0					
ANR	1289406	Identifier	first_subpath		1287708	1					
ANR	1289407	Condition	psub != 0	714:38:28640:28648	1287708	1	True				
ANR	1289408	EqualityExpression	psub != 0		1287708	0		!=			
ANR	1289409	Identifier	psub		1287708	0					
ANR	1289410	PrimaryExpression	0		1287708	1					
ANR	1289411	CompoundStatement		300:8:12441:12469	1287708	2					
ANR	1289412	IdentifierDeclStatement	int index = 0 ;	715:8:28662:28675	1287708	0	True				
ANR	1289413	IdentifierDecl	index = 0		1287708	0					
ANR	1289414	IdentifierDeclType	int		1287708	0					
ANR	1289415	Identifier	index		1287708	1					
ANR	1289416	AssignmentExpression	index = 0		1287708	2		=			
ANR	1289417	Identifier	index		1287708	0					
ANR	1289418	PrimaryExpression	0		1287708	1					
ANR	1289419	IdentifierDeclStatement	const segment * pseg = ( const segment * ) psub ;	716:8:28685:28728	1287708	1	True				
ANR	1289420	IdentifierDecl	* pseg = ( const segment * ) psub		1287708	0					
ANR	1289421	IdentifierDeclType	const segment *		1287708	0					
ANR	1289422	Identifier	pseg		1287708	1					
ANR	1289423	AssignmentExpression	* pseg = ( const segment * ) psub		1287708	2		=			
ANR	1289424	Identifier	pseg		1287708	0					
ANR	1289425	CastExpression	( const segment * ) psub		1287708	1					
ANR	1289426	CastTarget	const segment *		1287708	0					
ANR	1289427	Identifier	psub		1287708	1					
ANR	1289428	IdentifierDeclStatement	fixed x = pseg -> pt . x ;	717:8:28738:28758	1287708	2	True				
ANR	1289429	IdentifierDecl	x = pseg -> pt . x		1287708	0					
ANR	1289430	IdentifierDeclType	fixed		1287708	0					
ANR	1289431	Identifier	x		1287708	1					
ANR	1289432	AssignmentExpression	x = pseg -> pt . x		1287708	2		=			
ANR	1289433	Identifier	x		1287708	0					
ANR	1289434	MemberAccess	pseg -> pt . x		1287708	1					
ANR	1289435	PtrMemberAccess	pseg -> pt		1287708	0					
ANR	1289436	Identifier	pseg		1287708	0					
ANR	1289437	Identifier	pt		1287708	1					
ANR	1289438	Identifier	x		1287708	1					
ANR	1289439	IdentifierDeclStatement	fixed y = pseg -> pt . y ;	718:8:28768:28788	1287708	3	True				
ANR	1289440	IdentifierDecl	y = pseg -> pt . y		1287708	0					
ANR	1289441	IdentifierDeclType	fixed		1287708	0					
ANR	1289442	Identifier	y		1287708	1					
ANR	1289443	AssignmentExpression	y = pseg -> pt . y		1287708	2		=			
ANR	1289444	Identifier	y		1287708	0					
ANR	1289445	MemberAccess	pseg -> pt . y		1287708	1					
ANR	1289446	PtrMemberAccess	pseg -> pt		1287708	0					
ANR	1289447	Identifier	pseg		1287708	0					
ANR	1289448	Identifier	pt		1287708	1					
ANR	1289449	Identifier	y		1287708	1					
ANR	1289450	IdentifierDeclStatement	bool is_closed = ( ( const subpath * ) pseg ) -> is_closed ;	719:8:28798:28849	1287708	4	True				
ANR	1289451	IdentifierDecl	is_closed = ( ( const subpath * ) pseg ) -> is_closed		1287708	0					
ANR	1289452	IdentifierDeclType	bool		1287708	0					
ANR	1289453	Identifier	is_closed		1287708	1					
ANR	1289454	AssignmentExpression	is_closed = ( ( const subpath * ) pseg ) -> is_closed		1287708	2		=			
ANR	1289455	Identifier	is_closed		1287708	0					
ANR	1289456	PtrMemberAccess	( ( const subpath * ) pseg ) -> is_closed		1287708	1					
ANR	1289457	CastExpression	( const subpath * ) pseg		1287708	0					
ANR	1289458	CastTarget	const subpath *		1287708	0					
ANR	1289459	Identifier	pseg		1287708	1					
ANR	1289460	Identifier	is_closed		1287708	1					
ANR	1289461	IdentifierDeclStatement	"partial_line pl , pl_prev , pl_first ;"	720:8:28859:28893	1287708	5	True				
ANR	1289462	IdentifierDecl	pl		1287708	0					
ANR	1289463	IdentifierDeclType	partial_line		1287708	0					
ANR	1289464	Identifier	pl		1287708	1					
ANR	1289465	IdentifierDecl	pl_prev		1287708	1					
ANR	1289466	IdentifierDeclType	partial_line		1287708	0					
ANR	1289467	Identifier	pl_prev		1287708	1					
ANR	1289468	IdentifierDecl	pl_first		1287708	2					
ANR	1289469	IdentifierDeclType	partial_line		1287708	0					
ANR	1289470	Identifier	pl_first		1287708	1					
ANR	1289471	IdentifierDeclStatement	bool zero_length = true ;	721:8:28903:28926	1287708	6	True				
ANR	1289472	IdentifierDecl	zero_length = true		1287708	0					
ANR	1289473	IdentifierDeclType	bool		1287708	0					
ANR	1289474	Identifier	zero_length		1287708	1					
ANR	1289475	AssignmentExpression	zero_length = true		1287708	2		=			
ANR	1289476	Identifier	true		1287708	0					
ANR	1289477	Identifier	true		1287708	1					
ANR	1289478	IdentifierDeclStatement	int pseg_notes = pseg -> notes ;	722:8:28936:28964	1287708	7	True				
ANR	1289479	IdentifierDecl	pseg_notes = pseg -> notes		1287708	0					
ANR	1289480	IdentifierDeclType	int		1287708	0					
ANR	1289481	Identifier	pseg_notes		1287708	1					
ANR	1289482	AssignmentExpression	pseg_notes = pseg -> notes		1287708	2		=			
ANR	1289483	Identifier	pseg_notes		1287708	0					
ANR	1289484	PtrMemberAccess	pseg -> notes		1287708	1					
ANR	1289485	Identifier	pseg		1287708	0					
ANR	1289486	Identifier	notes		1287708	1					
ANR	1289487	ExpressionStatement	flags = nf_all_from_arc	724:8:28975:28998	1287708	8	True				
ANR	1289488	AssignmentExpression	flags = nf_all_from_arc		1287708	0		=			
ANR	1289489	Identifier	flags		1287708	0					
ANR	1289490	Identifier	nf_all_from_arc		1287708	1					
ANR	1289491	WhileStatement	while ( ( pseg = pseg -> next ) != 0 && pseg -> type != s_start )		1287708	9					
ANR	1289492	Condition	( pseg = pseg -> next ) != 0 && pseg -> type != s_start	730:15:29286:29349	1287708	0	True				
ANR	1289493	AndExpression	( pseg = pseg -> next ) != 0 && pseg -> type != s_start		1287708	0		&&			
ANR	1289494	EqualityExpression	( pseg = pseg -> next ) != 0		1287708	0		!=			
ANR	1289495	AssignmentExpression	pseg = pseg -> next		1287708	0		=			
ANR	1289496	Identifier	pseg		1287708	0					
ANR	1289497	PtrMemberAccess	pseg -> next		1287708	1					
ANR	1289498	Identifier	pseg		1287708	0					
ANR	1289499	Identifier	next		1287708	1					
ANR	1289500	PrimaryExpression	0		1287708	1					
ANR	1289501	EqualityExpression	pseg -> type != s_start		1287708	1		!=			
ANR	1289502	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289503	Identifier	pseg		1287708	0					
ANR	1289504	Identifier	type		1287708	1					
ANR	1289505	Identifier	s_start		1287708	1					
ANR	1289506	CompoundStatement		314:12:13043:13063	1287708	1					
ANR	1289507	IdentifierDeclStatement	"fixed sx , udx , sy , udy ;"	735:12:29502:29524	1287708	0	True				
ANR	1289508	IdentifierDecl	sx		1287708	0					
ANR	1289509	IdentifierDeclType	fixed		1287708	0					
ANR	1289510	Identifier	sx		1287708	1					
ANR	1289511	IdentifierDecl	udx		1287708	1					
ANR	1289512	IdentifierDeclType	fixed		1287708	0					
ANR	1289513	Identifier	udx		1287708	1					
ANR	1289514	IdentifierDecl	sy		1287708	2					
ANR	1289515	IdentifierDeclType	fixed		1287708	0					
ANR	1289516	Identifier	sy		1287708	1					
ANR	1289517	IdentifierDecl	udy		1287708	3					
ANR	1289518	IdentifierDeclType	fixed		1287708	0					
ANR	1289519	Identifier	udy		1287708	1					
ANR	1289520	IdentifierDeclStatement	bool is_dash_segment ;	736:12:29538:29558	1287708	1	True				
ANR	1289521	IdentifierDecl	is_dash_segment		1287708	0					
ANR	1289522	IdentifierDeclType	bool		1287708	0					
ANR	1289523	Identifier	is_dash_segment		1287708	1					
ANR	1289524	ExpressionStatement	pseg_notes = pseg -> notes	738:12:29573:29597	1287708	2	True				
ANR	1289525	AssignmentExpression	pseg_notes = pseg -> notes		1287708	0		=			
ANR	1289526	Identifier	pseg_notes		1287708	0					
ANR	1289527	PtrMemberAccess	pseg -> notes		1287708	1					
ANR	1289528	Identifier	pseg		1287708	0					
ANR	1289529	Identifier	notes		1287708	1					
ANR	1289530	Label	d2 :	740:9:29609:29611	1287708	3	True				
ANR	1289531	Identifier	d2		1287708	0					
ANR	1289532	ExpressionStatement	is_dash_segment = false	740:12:29612:29635	1287708	4	True				
ANR	1289533	AssignmentExpression	is_dash_segment = false		1287708	0		=			
ANR	1289534	Identifier	is_dash_segment		1287708	0					
ANR	1289535	Identifier	false		1287708	1					
ANR	1289536	Label	d1 :	741:9:29646:29648	1287708	5	True				
ANR	1289537	Identifier	d1		1287708	0					
ANR	1289538	IfStatement	if ( pseg -> type == s_dash )		1287708	6					
ANR	1289539	Condition	pseg -> type == s_dash	741:16:29653:29672	1287708	0	True				
ANR	1289540	EqualityExpression	pseg -> type == s_dash		1287708	0		==			
ANR	1289541	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289542	Identifier	pseg		1287708	0					
ANR	1289543	Identifier	type		1287708	1					
ANR	1289544	Identifier	s_dash		1287708	1					
ANR	1289545	CompoundStatement		320:16:13198:13237	1287708	1					
ANR	1289546	IdentifierDeclStatement	dash_segment * pd = ( dash_segment * ) pseg ;	742:16:29693:29732	1287708	0	True				
ANR	1289547	IdentifierDecl	* pd = ( dash_segment * ) pseg		1287708	0					
ANR	1289548	IdentifierDeclType	dash_segment *		1287708	0					
ANR	1289549	Identifier	pd		1287708	1					
ANR	1289550	AssignmentExpression	* pd = ( dash_segment * ) pseg		1287708	2		=			
ANR	1289551	Identifier	pd		1287708	0					
ANR	1289552	CastExpression	( dash_segment * ) pseg		1287708	1					
ANR	1289553	CastTarget	dash_segment *		1287708	0					
ANR	1289554	Identifier	pseg		1287708	1					
ANR	1289555	ExpressionStatement	sx = pd -> pt . x	744:16:29751:29764	1287708	1	True				
ANR	1289556	AssignmentExpression	sx = pd -> pt . x		1287708	0		=			
ANR	1289557	Identifier	sx		1287708	0					
ANR	1289558	MemberAccess	pd -> pt . x		1287708	1					
ANR	1289559	PtrMemberAccess	pd -> pt		1287708	0					
ANR	1289560	Identifier	pd		1287708	0					
ANR	1289561	Identifier	pt		1287708	1					
ANR	1289562	Identifier	x		1287708	1					
ANR	1289563	ExpressionStatement	sy = pd -> pt . y	745:16:29782:29795	1287708	2	True				
ANR	1289564	AssignmentExpression	sy = pd -> pt . y		1287708	0		=			
ANR	1289565	Identifier	sy		1287708	0					
ANR	1289566	MemberAccess	pd -> pt . y		1287708	1					
ANR	1289567	PtrMemberAccess	pd -> pt		1287708	0					
ANR	1289568	Identifier	pd		1287708	0					
ANR	1289569	Identifier	pt		1287708	1					
ANR	1289570	Identifier	y		1287708	1					
ANR	1289571	ExpressionStatement	udx = pd -> tangent . x	746:16:29813:29832	1287708	3	True				
ANR	1289572	AssignmentExpression	udx = pd -> tangent . x		1287708	0		=			
ANR	1289573	Identifier	udx		1287708	0					
ANR	1289574	MemberAccess	pd -> tangent . x		1287708	1					
ANR	1289575	PtrMemberAccess	pd -> tangent		1287708	0					
ANR	1289576	Identifier	pd		1287708	0					
ANR	1289577	Identifier	tangent		1287708	1					
ANR	1289578	Identifier	x		1287708	1					
ANR	1289579	ExpressionStatement	udy = pd -> tangent . y	747:16:29850:29869	1287708	4	True				
ANR	1289580	AssignmentExpression	udy = pd -> tangent . y		1287708	0		=			
ANR	1289581	Identifier	udy		1287708	0					
ANR	1289582	MemberAccess	pd -> tangent . y		1287708	1					
ANR	1289583	PtrMemberAccess	pd -> tangent		1287708	0					
ANR	1289584	Identifier	pd		1287708	0					
ANR	1289585	Identifier	tangent		1287708	1					
ANR	1289586	Identifier	y		1287708	1					
ANR	1289587	ExpressionStatement	is_dash_segment = true	748:16:29887:29909	1287708	5	True				
ANR	1289588	AssignmentExpression	is_dash_segment = true		1287708	0		=			
ANR	1289589	Identifier	is_dash_segment		1287708	0					
ANR	1289590	Identifier	true		1287708	1					
ANR	1289591	ElseStatement	else		1287708	0					
ANR	1289592	IfStatement	if ( pseg -> type == s_gap )		1287708	0					
ANR	1289593	Condition	pseg -> type == s_gap	749:23:29934:29952	1287708	0	True				
ANR	1289594	EqualityExpression	pseg -> type == s_gap		1287708	0		==			
ANR	1289595	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289596	Identifier	pseg		1287708	0					
ANR	1289597	Identifier	type		1287708	1					
ANR	1289598	Identifier	s_gap		1287708	1					
ANR	1289599	CompoundStatement		327:44:13460:13460	1287708	1					
ANR	1289600	ExpressionStatement	sx = pseg -> pt . x	750:16:29973:29988	1287708	0	True				
ANR	1289601	AssignmentExpression	sx = pseg -> pt . x		1287708	0		=			
ANR	1289602	Identifier	sx		1287708	0					
ANR	1289603	MemberAccess	pseg -> pt . x		1287708	1					
ANR	1289604	PtrMemberAccess	pseg -> pt		1287708	0					
ANR	1289605	Identifier	pseg		1287708	0					
ANR	1289606	Identifier	pt		1287708	1					
ANR	1289607	Identifier	x		1287708	1					
ANR	1289608	ExpressionStatement	sy = pseg -> pt . y	751:16:30006:30021	1287708	1	True				
ANR	1289609	AssignmentExpression	sy = pseg -> pt . y		1287708	0		=			
ANR	1289610	Identifier	sy		1287708	0					
ANR	1289611	MemberAccess	pseg -> pt . y		1287708	1					
ANR	1289612	PtrMemberAccess	pseg -> pt		1287708	0					
ANR	1289613	Identifier	pseg		1287708	0					
ANR	1289614	Identifier	pt		1287708	1					
ANR	1289615	Identifier	y		1287708	1					
ANR	1289616	ExpressionStatement	udx = sx - x	752:16:30039:30051	1287708	2	True				
ANR	1289617	AssignmentExpression	udx = sx - x		1287708	0		=			
ANR	1289618	Identifier	udx		1287708	0					
ANR	1289619	AdditiveExpression	sx - x		1287708	1		-			
ANR	1289620	Identifier	sx		1287708	0					
ANR	1289621	Identifier	x		1287708	1					
ANR	1289622	ExpressionStatement	udy = sy - y	753:16:30069:30081	1287708	3	True				
ANR	1289623	AssignmentExpression	udy = sy - y		1287708	0		=			
ANR	1289624	Identifier	udy		1287708	0					
ANR	1289625	AdditiveExpression	sy - y		1287708	1		-			
ANR	1289626	Identifier	sy		1287708	0					
ANR	1289627	Identifier	y		1287708	1					
ANR	1289628	ExpressionStatement	is_dash_segment = true	754:16:30099:30121	1287708	4	True				
ANR	1289629	AssignmentExpression	is_dash_segment = true		1287708	0		=			
ANR	1289630	Identifier	is_dash_segment		1287708	0					
ANR	1289631	Identifier	true		1287708	1					
ANR	1289632	ElseStatement	else		1287708	0					
ANR	1289633	CompoundStatement		333:19:13647:13647	1287708	0					
ANR	1289634	ExpressionStatement	sx = pseg -> pt . x	756:16:30160:30175	1287708	0	True				
ANR	1289635	AssignmentExpression	sx = pseg -> pt . x		1287708	0		=			
ANR	1289636	Identifier	sx		1287708	0					
ANR	1289637	MemberAccess	pseg -> pt . x		1287708	1					
ANR	1289638	PtrMemberAccess	pseg -> pt		1287708	0					
ANR	1289639	Identifier	pseg		1287708	0					
ANR	1289640	Identifier	pt		1287708	1					
ANR	1289641	Identifier	x		1287708	1					
ANR	1289642	ExpressionStatement	sy = pseg -> pt . y	757:16:30193:30208	1287708	1	True				
ANR	1289643	AssignmentExpression	sy = pseg -> pt . y		1287708	0		=			
ANR	1289644	Identifier	sy		1287708	0					
ANR	1289645	MemberAccess	pseg -> pt . y		1287708	1					
ANR	1289646	PtrMemberAccess	pseg -> pt		1287708	0					
ANR	1289647	Identifier	pseg		1287708	0					
ANR	1289648	Identifier	pt		1287708	1					
ANR	1289649	Identifier	y		1287708	1					
ANR	1289650	ExpressionStatement	udx = sx - x	758:16:30226:30238	1287708	2	True				
ANR	1289651	AssignmentExpression	udx = sx - x		1287708	0		=			
ANR	1289652	Identifier	udx		1287708	0					
ANR	1289653	AdditiveExpression	sx - x		1287708	1		-			
ANR	1289654	Identifier	sx		1287708	0					
ANR	1289655	Identifier	x		1287708	1					
ANR	1289656	ExpressionStatement	udy = sy - y	759:16:30256:30268	1287708	3	True				
ANR	1289657	AssignmentExpression	udy = sy - y		1287708	0		=			
ANR	1289658	Identifier	udy		1287708	0					
ANR	1289659	AdditiveExpression	sy - y		1287708	1		-			
ANR	1289660	Identifier	sy		1287708	0					
ANR	1289661	Identifier	y		1287708	1					
ANR	1289662	ExpressionStatement	zero_length &= ( ( udx | udy ) == 0 )	761:12:30296:30329	1287708	7	True				
ANR	1289663	AssignmentExpression	zero_length &= ( ( udx | udy ) == 0 )		1287708	0		&=			
ANR	1289664	Identifier	zero_length		1287708	0					
ANR	1289665	EqualityExpression	( udx | udy ) == 0		1287708	1		==			
ANR	1289666	InclusiveOrExpression	udx | udy		1287708	0		|			
ANR	1289667	Identifier	udx		1287708	0					
ANR	1289668	Identifier	udy		1287708	1					
ANR	1289669	PrimaryExpression	0		1287708	1					
ANR	1289670	ExpressionStatement	"pl . o . p . x = x , pl . o . p . y = y"	762:12:30343:30369	1287708	8	True				
ANR	1289671	Expression	"pl . o . p . x = x , pl . o . p . y = y"		1287708	0					
ANR	1289672	AssignmentExpression	pl . o . p . x = x		1287708	0		=			
ANR	1289673	MemberAccess	pl . o . p . x		1287708	0					
ANR	1289674	MemberAccess	pl . o . p		1287708	0					
ANR	1289675	MemberAccess	pl . o		1287708	0					
ANR	1289676	Identifier	pl		1287708	0					
ANR	1289677	Identifier	o		1287708	1					
ANR	1289678	Identifier	p		1287708	1					
ANR	1289679	Identifier	x		1287708	1					
ANR	1289680	Identifier	x		1287708	1					
ANR	1289681	AssignmentExpression	pl . o . p . y = y		1287708	1		=			
ANR	1289682	MemberAccess	pl . o . p . y		1287708	0					
ANR	1289683	MemberAccess	pl . o . p		1287708	0					
ANR	1289684	MemberAccess	pl . o		1287708	0					
ANR	1289685	Identifier	pl		1287708	0					
ANR	1289686	Identifier	o		1287708	1					
ANR	1289687	Identifier	p		1287708	1					
ANR	1289688	Identifier	y		1287708	1					
ANR	1289689	Identifier	y		1287708	1					
ANR	1289690	Label	d :	763:10:30381:30382	1287708	9	True				
ANR	1289691	Identifier	d		1287708	0					
ANR	1289692	ExpressionStatement	flags = ( ( ( pseg_notes & sn_not_first ) ? ( ( flags & nf_all_from_arc ) | nf_some_from_arc ) : 0 ) | ( ( pseg_notes & sn_dash_head ) ? nf_dash_head : 0 ) | ( ( pseg_notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc ) )	763:12:30383:30697	1287708	10	True				
ANR	1289693	AssignmentExpression	flags = ( ( ( pseg_notes & sn_not_first ) ? ( ( flags & nf_all_from_arc ) | nf_some_from_arc ) : 0 ) | ( ( pseg_notes & sn_dash_head ) ? nf_dash_head : 0 ) | ( ( pseg_notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc ) )		1287708	0		=			
ANR	1289694	Identifier	flags		1287708	0					
ANR	1289695	InclusiveOrExpression	( ( pseg_notes & sn_not_first ) ? ( ( flags & nf_all_from_arc ) | nf_some_from_arc ) : 0 ) | ( ( pseg_notes & sn_dash_head ) ? nf_dash_head : 0 ) | ( ( pseg_notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc )		1287708	1		|			
ANR	1289696	ConditionalExpression	( pseg_notes & sn_not_first ) ? ( ( flags & nf_all_from_arc ) | nf_some_from_arc ) : 0		1287708	0					
ANR	1289697	Condition	pseg_notes & sn_not_first		1287708	0					
ANR	1289698	BitAndExpression	pseg_notes & sn_not_first		1287708	0		&			
ANR	1289699	Identifier	pseg_notes		1287708	0					
ANR	1289700	Identifier	sn_not_first		1287708	1					
ANR	1289701	InclusiveOrExpression	( flags & nf_all_from_arc ) | nf_some_from_arc		1287708	1		|			
ANR	1289702	BitAndExpression	flags & nf_all_from_arc		1287708	0		&			
ANR	1289703	Identifier	flags		1287708	0					
ANR	1289704	Identifier	nf_all_from_arc		1287708	1					
ANR	1289705	Identifier	nf_some_from_arc		1287708	1					
ANR	1289706	PrimaryExpression	0		1287708	2					
ANR	1289707	InclusiveOrExpression	( ( pseg_notes & sn_dash_head ) ? nf_dash_head : 0 ) | ( ( pseg_notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc )		1287708	1		|			
ANR	1289708	ConditionalExpression	( pseg_notes & sn_dash_head ) ? nf_dash_head : 0		1287708	0					
ANR	1289709	Condition	pseg_notes & sn_dash_head		1287708	0					
ANR	1289710	BitAndExpression	pseg_notes & sn_dash_head		1287708	0		&			
ANR	1289711	Identifier	pseg_notes		1287708	0					
ANR	1289712	Identifier	sn_dash_head		1287708	1					
ANR	1289713	Identifier	nf_dash_head		1287708	1					
ANR	1289714	PrimaryExpression	0		1287708	2					
ANR	1289715	InclusiveOrExpression	( ( pseg_notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc )		1287708	1		|			
ANR	1289716	ConditionalExpression	( pseg_notes & sn_dash_tail ) ? nf_dash_tail : 0		1287708	0					
ANR	1289717	Condition	pseg_notes & sn_dash_tail		1287708	0					
ANR	1289718	BitAndExpression	pseg_notes & sn_dash_tail		1287708	0		&			
ANR	1289719	Identifier	pseg_notes		1287708	0					
ANR	1289720	Identifier	sn_dash_tail		1287708	1					
ANR	1289721	Identifier	nf_dash_tail		1287708	1					
ANR	1289722	PrimaryExpression	0		1287708	2					
ANR	1289723	BitAndExpression	flags & ~nf_all_from_arc		1287708	1		&			
ANR	1289724	Identifier	flags		1287708	0					
ANR	1289725	Identifier	~nf_all_from_arc		1287708	1					
ANR	1289726	ExpressionStatement	"pl . e . p . x = sx , pl . e . p . y = sy"	768:12:30711:30739	1287708	11	True				
ANR	1289727	Expression	"pl . e . p . x = sx , pl . e . p . y = sy"		1287708	0					
ANR	1289728	AssignmentExpression	pl . e . p . x = sx		1287708	0		=			
ANR	1289729	MemberAccess	pl . e . p . x		1287708	0					
ANR	1289730	MemberAccess	pl . e . p		1287708	0					
ANR	1289731	MemberAccess	pl . e		1287708	0					
ANR	1289732	Identifier	pl		1287708	0					
ANR	1289733	Identifier	e		1287708	1					
ANR	1289734	Identifier	p		1287708	1					
ANR	1289735	Identifier	x		1287708	1					
ANR	1289736	Identifier	sx		1287708	1					
ANR	1289737	AssignmentExpression	pl . e . p . y = sy		1287708	1		=			
ANR	1289738	MemberAccess	pl . e . p . y		1287708	0					
ANR	1289739	MemberAccess	pl . e . p		1287708	0					
ANR	1289740	MemberAccess	pl . e		1287708	0					
ANR	1289741	Identifier	pl		1287708	0					
ANR	1289742	Identifier	e		1287708	1					
ANR	1289743	Identifier	p		1287708	1					
ANR	1289744	Identifier	y		1287708	1					
ANR	1289745	Identifier	sy		1287708	1					
ANR	1289746	IfStatement	if ( ! ( udx | udy ) || pseg -> type == s_dash || pseg -> type == s_gap )		1287708	12					
ANR	1289747	Condition	! ( udx | udy ) || pseg -> type == s_dash || pseg -> type == s_gap	769:16:30757:30815	1287708	0	True				
ANR	1289748	OrExpression	! ( udx | udy ) || pseg -> type == s_dash || pseg -> type == s_gap		1287708	0		||			
ANR	1289749	UnaryOperationExpression	! ( udx | udy )		1287708	0					
ANR	1289750	UnaryOperator	!		1287708	0					
ANR	1289751	InclusiveOrExpression	udx | udy		1287708	1		|			
ANR	1289752	Identifier	udx		1287708	0					
ANR	1289753	Identifier	udy		1287708	1					
ANR	1289754	OrExpression	pseg -> type == s_dash || pseg -> type == s_gap		1287708	1		||			
ANR	1289755	EqualityExpression	pseg -> type == s_dash		1287708	0		==			
ANR	1289756	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289757	Identifier	pseg		1287708	0					
ANR	1289758	Identifier	type		1287708	1					
ANR	1289759	Identifier	s_dash		1287708	1					
ANR	1289760	EqualityExpression	pseg -> type == s_gap		1287708	1		==			
ANR	1289761	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289762	Identifier	pseg		1287708	0					
ANR	1289763	Identifier	type		1287708	1					
ANR	1289764	Identifier	s_gap		1287708	1					
ANR	1289765	CompoundStatement		347:77:14323:14323	1287708	1					
ANR	1289766	IfStatement	if ( index != 0 && pseg -> type != s_dash && pseg -> type != s_gap )		1287708	0					
ANR	1289767	Condition	index != 0 && pseg -> type != s_dash && pseg -> type != s_gap	775:20:31090:31146	1287708	0	True				
ANR	1289768	AndExpression	index != 0 && pseg -> type != s_dash && pseg -> type != s_gap		1287708	0		&&			
ANR	1289769	EqualityExpression	index != 0		1287708	0		!=			
ANR	1289770	Identifier	index		1287708	0					
ANR	1289771	PrimaryExpression	0		1287708	1					
ANR	1289772	AndExpression	pseg -> type != s_dash && pseg -> type != s_gap		1287708	1		&&			
ANR	1289773	EqualityExpression	pseg -> type != s_dash		1287708	0		!=			
ANR	1289774	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289775	Identifier	pseg		1287708	0					
ANR	1289776	Identifier	type		1287708	1					
ANR	1289777	Identifier	s_dash		1287708	1					
ANR	1289778	EqualityExpression	pseg -> type != s_gap		1287708	1		!=			
ANR	1289779	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289780	Identifier	pseg		1287708	0					
ANR	1289781	Identifier	type		1287708	1					
ANR	1289782	Identifier	s_gap		1287708	1					
ANR	1289783	CompoundStatement		354:16:14670:14670	1287708	1					
ANR	1289784	IfStatement	if ( pseg -> next == NULL || pseg -> next -> type == s_start )		1287708	0					
ANR	1289785	Condition	pseg -> next == NULL || pseg -> next -> type == s_start	777:24:31191:31239	1287708	0	True				
ANR	1289786	OrExpression	pseg -> next == NULL || pseg -> next -> type == s_start		1287708	0		||			
ANR	1289787	EqualityExpression	pseg -> next == NULL		1287708	0		==			
ANR	1289788	PtrMemberAccess	pseg -> next		1287708	0					
ANR	1289789	Identifier	pseg		1287708	0					
ANR	1289790	Identifier	next		1287708	1					
ANR	1289791	Identifier	NULL		1287708	1					
ANR	1289792	EqualityExpression	pseg -> next -> type == s_start		1287708	1		==			
ANR	1289793	PtrMemberAccess	pseg -> next -> type		1287708	0					
ANR	1289794	PtrMemberAccess	pseg -> next		1287708	0					
ANR	1289795	Identifier	pseg		1287708	0					
ANR	1289796	Identifier	next		1287708	1					
ANR	1289797	Identifier	type		1287708	1					
ANR	1289798	Identifier	s_start		1287708	1					
ANR	1289799	ContinueStatement	continue ;	778:24:31266:31274	1287708	1	True				
ANR	1289800	ExpressionStatement	pseg = pseg -> next	779:20:31296:31313	1287708	1	True				
ANR	1289801	AssignmentExpression	pseg = pseg -> next		1287708	0		=			
ANR	1289802	Identifier	pseg		1287708	0					
ANR	1289803	PtrMemberAccess	pseg -> next		1287708	1					
ANR	1289804	Identifier	pseg		1287708	0					
ANR	1289805	Identifier	next		1287708	1					
ANR	1289806	ExpressionStatement	pseg_notes = ( ( ( pseg_notes & sn_not_first ) == 0 ) ? ( pseg -> notes & ~sn_not_first ) : pseg -> notes )	785:20:31702:31865	1287708	2	True				
ANR	1289807	AssignmentExpression	pseg_notes = ( ( ( pseg_notes & sn_not_first ) == 0 ) ? ( pseg -> notes & ~sn_not_first ) : pseg -> notes )		1287708	0		=			
ANR	1289808	Identifier	pseg_notes		1287708	0					
ANR	1289809	ConditionalExpression	( ( pseg_notes & sn_not_first ) == 0 ) ? ( pseg -> notes & ~sn_not_first ) : pseg -> notes		1287708	1					
ANR	1289810	Condition	( pseg_notes & sn_not_first ) == 0		1287708	0					
ANR	1289811	EqualityExpression	( pseg_notes & sn_not_first ) == 0		1287708	0		==			
ANR	1289812	BitAndExpression	pseg_notes & sn_not_first		1287708	0		&			
ANR	1289813	Identifier	pseg_notes		1287708	0					
ANR	1289814	Identifier	sn_not_first		1287708	1					
ANR	1289815	PrimaryExpression	0		1287708	1					
ANR	1289816	BitAndExpression	pseg -> notes & ~sn_not_first		1287708	1		&			
ANR	1289817	PtrMemberAccess	pseg -> notes		1287708	0					
ANR	1289818	Identifier	pseg		1287708	0					
ANR	1289819	Identifier	notes		1287708	1					
ANR	1289820	Identifier	~sn_not_first		1287708	1					
ANR	1289821	PtrMemberAccess	pseg -> notes		1287708	2					
ANR	1289822	Identifier	pseg		1287708	0					
ANR	1289823	Identifier	notes		1287708	1					
ANR	1289824	GotoStatement	goto d2 ;	788:20:31887:31894	1287708	3	True				
ANR	1289825	Identifier	d2		1287708	0					
ANR	1289826	WhileStatement	while ( ( pseg = pseg -> next ) != 0 && pseg -> type != s_start )		1287708	1					
ANR	1289827	Condition	( pseg = pseg -> next ) != 0 && pseg -> type != s_start	791:23:31991:32062	1287708	0	True				
ANR	1289828	AndExpression	( pseg = pseg -> next ) != 0 && pseg -> type != s_start		1287708	0		&&			
ANR	1289829	EqualityExpression	( pseg = pseg -> next ) != 0		1287708	0		!=			
ANR	1289830	AssignmentExpression	pseg = pseg -> next		1287708	0		=			
ANR	1289831	Identifier	pseg		1287708	0					
ANR	1289832	PtrMemberAccess	pseg -> next		1287708	1					
ANR	1289833	Identifier	pseg		1287708	0					
ANR	1289834	Identifier	next		1287708	1					
ANR	1289835	PrimaryExpression	0		1287708	1					
ANR	1289836	EqualityExpression	pseg -> type != s_start		1287708	1		!=			
ANR	1289837	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289838	Identifier	pseg		1287708	0					
ANR	1289839	Identifier	type		1287708	1					
ANR	1289840	Identifier	s_start		1287708	1					
ANR	1289841	CompoundStatement		371:22:15591:15591	1287708	1					
ANR	1289842	IfStatement	if ( is_dash_segment )		1287708	0					
ANR	1289843	Condition	is_dash_segment	794:24:32112:32126	1287708	0	True				
ANR	1289844	Identifier	is_dash_segment		1287708	0					
ANR	1289845	BreakStatement	break ;	795:24:32153:32158	1287708	1	True				
ANR	1289846	IfStatement	if ( pseg -> type == s_dash || pseg -> type == s_gap )		1287708	1					
ANR	1289847	Condition	pseg -> type == s_dash || pseg -> type == s_gap	796:24:32184:32226	1287708	0	True				
ANR	1289848	OrExpression	pseg -> type == s_dash || pseg -> type == s_gap		1287708	0		||			
ANR	1289849	EqualityExpression	pseg -> type == s_dash		1287708	0		==			
ANR	1289850	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289851	Identifier	pseg		1287708	0					
ANR	1289852	Identifier	type		1287708	1					
ANR	1289853	Identifier	s_dash		1287708	1					
ANR	1289854	EqualityExpression	pseg -> type == s_gap		1287708	1		==			
ANR	1289855	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1289856	Identifier	pseg		1287708	0					
ANR	1289857	Identifier	type		1287708	1					
ANR	1289858	Identifier	s_gap		1287708	1					
ANR	1289859	GotoStatement	goto d1 ;	797:24:32253:32260	1287708	1	True				
ANR	1289860	Identifier	d1		1287708	0					
ANR	1289861	ExpressionStatement	"sx = pseg -> pt . x , udx = sx - x"	798:20:32282:32311	1287708	2	True				
ANR	1289862	Expression	"sx = pseg -> pt . x , udx = sx - x"		1287708	0					
ANR	1289863	AssignmentExpression	sx = pseg -> pt . x		1287708	0		=			
ANR	1289864	Identifier	sx		1287708	0					
ANR	1289865	MemberAccess	pseg -> pt . x		1287708	1					
ANR	1289866	PtrMemberAccess	pseg -> pt		1287708	0					
ANR	1289867	Identifier	pseg		1287708	0					
ANR	1289868	Identifier	pt		1287708	1					
ANR	1289869	Identifier	x		1287708	1					
ANR	1289870	AssignmentExpression	udx = sx - x		1287708	1		=			
ANR	1289871	Identifier	udx		1287708	0					
ANR	1289872	AdditiveExpression	sx - x		1287708	1		-			
ANR	1289873	Identifier	sx		1287708	0					
ANR	1289874	Identifier	x		1287708	1					
ANR	1289875	ExpressionStatement	"sy = pseg -> pt . y , udy = sy - y"	799:20:32333:32362	1287708	3	True				
ANR	1289876	Expression	"sy = pseg -> pt . y , udy = sy - y"		1287708	0					
ANR	1289877	AssignmentExpression	sy = pseg -> pt . y		1287708	0		=			
ANR	1289878	Identifier	sy		1287708	0					
ANR	1289879	MemberAccess	pseg -> pt . y		1287708	1					
ANR	1289880	PtrMemberAccess	pseg -> pt		1287708	0					
ANR	1289881	Identifier	pseg		1287708	0					
ANR	1289882	Identifier	pt		1287708	1					
ANR	1289883	Identifier	y		1287708	1					
ANR	1289884	AssignmentExpression	udy = sy - y		1287708	1		=			
ANR	1289885	Identifier	udy		1287708	0					
ANR	1289886	AdditiveExpression	sy - y		1287708	1		-			
ANR	1289887	Identifier	sy		1287708	0					
ANR	1289888	Identifier	y		1287708	1					
ANR	1289889	IfStatement	if ( udx | udy )		1287708	4					
ANR	1289890	Condition	udx | udy	800:24:32388:32396	1287708	0	True				
ANR	1289891	InclusiveOrExpression	udx | udy		1287708	0		|			
ANR	1289892	Identifier	udx		1287708	0					
ANR	1289893	Identifier	udy		1287708	1					
ANR	1289894	CompoundStatement		378:35:15904:15904	1287708	1					
ANR	1289895	ExpressionStatement	zero_length = false	801:24:32425:32444	1287708	0	True				
ANR	1289896	AssignmentExpression	zero_length = false		1287708	0		=			
ANR	1289897	Identifier	zero_length		1287708	0					
ANR	1289898	Identifier	false		1287708	1					
ANR	1289899	GotoStatement	goto d ;	802:24:32470:32476	1287708	1	True				
ANR	1289900	Identifier	d		1287708	0					
ANR	1289901	IfStatement	if ( pgs_lp -> dot_length == 0 && pgs_lp -> start_cap != gs_cap_round && pgs_lp -> end_cap != gs_cap_round && ! is_dash_segment )		1287708	2					
ANR	1289902	Condition	pgs_lp -> dot_length == 0 && pgs_lp -> start_cap != gs_cap_round && pgs_lp -> end_cap != gs_cap_round && ! is_dash_segment	805:20:32538:32712	1287708	0	True				
ANR	1289903	AndExpression	pgs_lp -> dot_length == 0 && pgs_lp -> start_cap != gs_cap_round && pgs_lp -> end_cap != gs_cap_round && ! is_dash_segment		1287708	0		&&			
ANR	1289904	EqualityExpression	pgs_lp -> dot_length == 0		1287708	0		==			
ANR	1289905	PtrMemberAccess	pgs_lp -> dot_length		1287708	0					
ANR	1289906	Identifier	pgs_lp		1287708	0					
ANR	1289907	Identifier	dot_length		1287708	1					
ANR	1289908	PrimaryExpression	0		1287708	1					
ANR	1289909	AndExpression	pgs_lp -> start_cap != gs_cap_round && pgs_lp -> end_cap != gs_cap_round && ! is_dash_segment		1287708	1		&&			
ANR	1289910	EqualityExpression	pgs_lp -> start_cap != gs_cap_round		1287708	0		!=			
ANR	1289911	PtrMemberAccess	pgs_lp -> start_cap		1287708	0					
ANR	1289912	Identifier	pgs_lp		1287708	0					
ANR	1289913	Identifier	start_cap		1287708	1					
ANR	1289914	Identifier	gs_cap_round		1287708	1					
ANR	1289915	AndExpression	pgs_lp -> end_cap != gs_cap_round && ! is_dash_segment		1287708	1		&&			
ANR	1289916	EqualityExpression	pgs_lp -> end_cap != gs_cap_round		1287708	0		!=			
ANR	1289917	PtrMemberAccess	pgs_lp -> end_cap		1287708	0					
ANR	1289918	Identifier	pgs_lp		1287708	0					
ANR	1289919	Identifier	end_cap		1287708	1					
ANR	1289920	Identifier	gs_cap_round		1287708	1					
ANR	1289921	UnaryOperationExpression	! is_dash_segment		1287708	1					
ANR	1289922	UnaryOperator	!		1287708	0					
ANR	1289923	Identifier	is_dash_segment		1287708	1					
ANR	1289924	CompoundStatement		386:38:16220:16220	1287708	1					
ANR	1289925	BreakStatement	break ;	813:20:33040:33045	1287708	0	True				
ANR	1289926	CompoundStatement		404:20:17232:17263	1287708	3					
ANR	1289927	IdentifierDeclStatement	const segment * end = psub -> last ;	826:20:33727:33758	1287708	0	True				
ANR	1289928	IdentifierDecl	* end = psub -> last		1287708	0					
ANR	1289929	IdentifierDeclType	const segment *		1287708	0					
ANR	1289930	Identifier	end		1287708	1					
ANR	1289931	AssignmentExpression	* end = psub -> last		1287708	2		=			
ANR	1289932	Identifier	end		1287708	0					
ANR	1289933	PtrMemberAccess	psub -> last		1287708	1					
ANR	1289934	Identifier	psub		1287708	0					
ANR	1289935	Identifier	last		1287708	1					
ANR	1289936	IfStatement	if ( is_dash_segment )		1287708	1					
ANR	1289937	Condition	is_dash_segment	828:24:33785:33799	1287708	0	True				
ANR	1289938	Identifier	is_dash_segment		1287708	0					
ANR	1289939	CompoundStatement		406:41:17307:17307	1287708	1					
ANR	1289940	ElseStatement	else		1287708	0					
ANR	1289941	IfStatement	if ( end != 0 && ( end -> pt . x != x || end -> pt . y != y ) )		1287708	0					
ANR	1289942	Condition	end != 0 && ( end -> pt . x != x || end -> pt . y != y )	830:31:33874:33919	1287708	0	True				
ANR	1289943	AndExpression	end != 0 && ( end -> pt . x != x || end -> pt . y != y )		1287708	0		&&			
ANR	1289944	EqualityExpression	end != 0		1287708	0		!=			
ANR	1289945	Identifier	end		1287708	0					
ANR	1289946	PrimaryExpression	0		1287708	1					
ANR	1289947	OrExpression	end -> pt . x != x || end -> pt . y != y		1287708	1		||			
ANR	1289948	EqualityExpression	end -> pt . x != x		1287708	0		!=			
ANR	1289949	MemberAccess	end -> pt . x		1287708	0					
ANR	1289950	PtrMemberAccess	end -> pt		1287708	0					
ANR	1289951	Identifier	end		1287708	0					
ANR	1289952	Identifier	pt		1287708	1					
ANR	1289953	Identifier	x		1287708	1					
ANR	1289954	Identifier	x		1287708	1					
ANR	1289955	EqualityExpression	end -> pt . y != y		1287708	1		!=			
ANR	1289956	MemberAccess	end -> pt . y		1287708	0					
ANR	1289957	PtrMemberAccess	end -> pt		1287708	0					
ANR	1289958	Identifier	end		1287708	0					
ANR	1289959	Identifier	pt		1287708	1					
ANR	1289960	Identifier	y		1287708	1					
ANR	1289961	Identifier	y		1287708	1					
ANR	1289962	ExpressionStatement	"sx = end -> pt . x , sy = end -> pt . y , udx = sx - x , udy = sy - y"	831:24:33946:34004	1287708	1	True				
ANR	1289963	Expression	"sx = end -> pt . x , sy = end -> pt . y , udx = sx - x , udy = sy - y"		1287708	0					
ANR	1289964	AssignmentExpression	sx = end -> pt . x		1287708	0		=			
ANR	1289965	Identifier	sx		1287708	0					
ANR	1289966	MemberAccess	end -> pt . x		1287708	1					
ANR	1289967	PtrMemberAccess	end -> pt		1287708	0					
ANR	1289968	Identifier	end		1287708	0					
ANR	1289969	Identifier	pt		1287708	1					
ANR	1289970	Identifier	x		1287708	1					
ANR	1289971	Expression	"sy = end -> pt . y , udx = sx - x , udy = sy - y"		1287708	1					
ANR	1289972	AssignmentExpression	sy = end -> pt . y		1287708	0		=			
ANR	1289973	Identifier	sy		1287708	0					
ANR	1289974	MemberAccess	end -> pt . y		1287708	1					
ANR	1289975	PtrMemberAccess	end -> pt		1287708	0					
ANR	1289976	Identifier	end		1287708	0					
ANR	1289977	Identifier	pt		1287708	1					
ANR	1289978	Identifier	y		1287708	1					
ANR	1289979	Expression	"udx = sx - x , udy = sy - y"		1287708	1					
ANR	1289980	AssignmentExpression	udx = sx - x		1287708	0		=			
ANR	1289981	Identifier	udx		1287708	0					
ANR	1289982	AdditiveExpression	sx - x		1287708	1		-			
ANR	1289983	Identifier	sx		1287708	0					
ANR	1289984	Identifier	x		1287708	1					
ANR	1289985	AssignmentExpression	udy = sy - y		1287708	1		=			
ANR	1289986	Identifier	udy		1287708	0					
ANR	1289987	AdditiveExpression	sy - y		1287708	1		-			
ANR	1289988	Identifier	sy		1287708	0					
ANR	1289989	Identifier	y		1287708	1					
ANR	1289990	IfStatement	if ( ( udx | udy ) == 0 )		1287708	4					
ANR	1289991	Condition	( udx | udy ) == 0	837:20:34209:34224	1287708	0	True				
ANR	1289992	EqualityExpression	( udx | udy ) == 0		1287708	0		==			
ANR	1289993	InclusiveOrExpression	udx | udy		1287708	0		|			
ANR	1289994	Identifier	udx		1287708	0					
ANR	1289995	Identifier	udy		1287708	1					
ANR	1289996	PrimaryExpression	0		1287708	1					
ANR	1289997	CompoundStatement		415:38:17732:17732	1287708	1					
ANR	1289998	IfStatement	if ( is_fzero ( pgs_lp -> dot_orientation . xy ) )		1287708	0					
ANR	1289999	Condition	is_fzero ( pgs_lp -> dot_orientation . xy )	838:24:34253:34288	1287708	0	True				
ANR	1290000	CallExpression	is_fzero ( pgs_lp -> dot_orientation . xy )		1287708	0					
ANR	1290001	Callee	is_fzero		1287708	0					
ANR	1290002	Identifier	is_fzero		1287708	0					
ANR	1290003	ArgumentList	pgs_lp -> dot_orientation . xy		1287708	1					
ANR	1290004	Argument	pgs_lp -> dot_orientation . xy		1287708	0					
ANR	1290005	MemberAccess	pgs_lp -> dot_orientation . xy		1287708	0					
ANR	1290006	PtrMemberAccess	pgs_lp -> dot_orientation		1287708	0					
ANR	1290007	Identifier	pgs_lp		1287708	0					
ANR	1290008	Identifier	dot_orientation		1287708	1					
ANR	1290009	Identifier	xy		1287708	1					
ANR	1290010	CompoundStatement		416:62:17796:17796	1287708	1					
ANR	1290011	ExpressionStatement	udx = fixed_1	840:24:34384:34397	1287708	0	True				
ANR	1290012	AssignmentExpression	udx = fixed_1		1287708	0		=			
ANR	1290013	Identifier	udx		1287708	0					
ANR	1290014	Identifier	fixed_1		1287708	1					
ANR	1290015	ElseStatement	else		1287708	0					
ANR	1290016	CompoundStatement		419:27:17931:17931	1287708	0					
ANR	1290017	ExpressionStatement	udy = fixed_1	843:24:34520:34533	1287708	0	True				
ANR	1290018	AssignmentExpression	udy = fixed_1		1287708	0		=			
ANR	1290019	Identifier	udy		1287708	0					
ANR	1290020	Identifier	fixed_1		1287708	1					
ANR	1290021	IfStatement	if ( sx == x && sy == y && ( pseg == NULL || pseg -> type == s_start ) )		1287708	5					
ANR	1290022	Condition	sx == x && sy == y && ( pseg == NULL || pseg -> type == s_start )	846:20:34595:34655	1287708	0	True				
ANR	1290023	AndExpression	sx == x && sy == y && ( pseg == NULL || pseg -> type == s_start )		1287708	0		&&			
ANR	1290024	EqualityExpression	sx == x		1287708	0		==			
ANR	1290025	Identifier	sx		1287708	0					
ANR	1290026	Identifier	x		1287708	1					
ANR	1290027	AndExpression	sy == y && ( pseg == NULL || pseg -> type == s_start )		1287708	1		&&			
ANR	1290028	EqualityExpression	sy == y		1287708	0		==			
ANR	1290029	Identifier	sy		1287708	0					
ANR	1290030	Identifier	y		1287708	1					
ANR	1290031	OrExpression	pseg == NULL || pseg -> type == s_start		1287708	1		||			
ANR	1290032	EqualityExpression	pseg == NULL		1287708	0		==			
ANR	1290033	Identifier	pseg		1287708	0					
ANR	1290034	Identifier	NULL		1287708	1					
ANR	1290035	EqualityExpression	pseg -> type == s_start		1287708	1		==			
ANR	1290036	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1290037	Identifier	pseg		1287708	0					
ANR	1290038	Identifier	type		1287708	1					
ANR	1290039	Identifier	s_start		1287708	1					
ANR	1290040	CompoundStatement		427:20:18305:18321	1287708	1					
ANR	1290041	IdentifierDeclStatement	"double scale = device_dot_length / hypot ( ( double ) udx , ( double ) udy ) ;"	847:20:34680:34778	1287708	0	True				
ANR	1290042	IdentifierDecl	"scale = device_dot_length / hypot ( ( double ) udx , ( double ) udy )"		1287708	0					
ANR	1290043	IdentifierDeclType	double		1287708	0					
ANR	1290044	Identifier	scale		1287708	1					
ANR	1290045	AssignmentExpression	"scale = device_dot_length / hypot ( ( double ) udx , ( double ) udy )"		1287708	2		=			
ANR	1290046	Identifier	scale		1287708	0					
ANR	1290047	MultiplicativeExpression	"device_dot_length / hypot ( ( double ) udx , ( double ) udy )"		1287708	1		/			
ANR	1290048	Identifier	device_dot_length		1287708	0					
ANR	1290049	CallExpression	"hypot ( ( double ) udx , ( double ) udy )"		1287708	1					
ANR	1290050	Callee	hypot		1287708	0					
ANR	1290051	Identifier	hypot		1287708	0					
ANR	1290052	ArgumentList	( double ) udx		1287708	1					
ANR	1290053	Argument	( double ) udx		1287708	0					
ANR	1290054	CastExpression	( double ) udx		1287708	0					
ANR	1290055	CastTarget	double		1287708	0					
ANR	1290056	Identifier	udx		1287708	1					
ANR	1290057	Argument	( double ) udy		1287708	1					
ANR	1290058	CastExpression	( double ) udy		1287708	0					
ANR	1290059	CastTarget	double		1287708	0					
ANR	1290060	Identifier	udy		1287708	1					
ANR	1290061	IdentifierDeclStatement	"fixed udx1 , udy1 ;"	849:20:34800:34816	1287708	1	True				
ANR	1290062	IdentifierDecl	udx1		1287708	0					
ANR	1290063	IdentifierDeclType	fixed		1287708	0					
ANR	1290064	Identifier	udx1		1287708	1					
ANR	1290065	IdentifierDecl	udy1		1287708	1					
ANR	1290066	IdentifierDeclType	fixed		1287708	0					
ANR	1290067	Identifier	udy1		1287708	1					
ANR	1290068	IfStatement	if ( ! always_thin && ( pgs_lp -> start_cap == gs_cap_butt || pgs_lp -> end_cap == gs_cap_butt || pgs_lp -> dash_cap == gs_cap_butt ) )		1287708	2					
ANR	1290069	Condition	! always_thin && ( pgs_lp -> start_cap == gs_cap_butt || pgs_lp -> end_cap == gs_cap_butt || pgs_lp -> dash_cap == gs_cap_butt )	856:24:35141:35344	1287708	0	True				
ANR	1290070	AndExpression	! always_thin && ( pgs_lp -> start_cap == gs_cap_butt || pgs_lp -> end_cap == gs_cap_butt || pgs_lp -> dash_cap == gs_cap_butt )		1287708	0		&&			
ANR	1290071	UnaryOperationExpression	! always_thin		1287708	0					
ANR	1290072	UnaryOperator	!		1287708	0					
ANR	1290073	Identifier	always_thin		1287708	1					
ANR	1290074	OrExpression	pgs_lp -> start_cap == gs_cap_butt || pgs_lp -> end_cap == gs_cap_butt || pgs_lp -> dash_cap == gs_cap_butt		1287708	1		||			
ANR	1290075	EqualityExpression	pgs_lp -> start_cap == gs_cap_butt		1287708	0		==			
ANR	1290076	PtrMemberAccess	pgs_lp -> start_cap		1287708	0					
ANR	1290077	Identifier	pgs_lp		1287708	0					
ANR	1290078	Identifier	start_cap		1287708	1					
ANR	1290079	Identifier	gs_cap_butt		1287708	1					
ANR	1290080	OrExpression	pgs_lp -> end_cap == gs_cap_butt || pgs_lp -> dash_cap == gs_cap_butt		1287708	1		||			
ANR	1290081	EqualityExpression	pgs_lp -> end_cap == gs_cap_butt		1287708	0		==			
ANR	1290082	PtrMemberAccess	pgs_lp -> end_cap		1287708	0					
ANR	1290083	Identifier	pgs_lp		1287708	0					
ANR	1290084	Identifier	end_cap		1287708	1					
ANR	1290085	Identifier	gs_cap_butt		1287708	1					
ANR	1290086	EqualityExpression	pgs_lp -> dash_cap == gs_cap_butt		1287708	1		==			
ANR	1290087	PtrMemberAccess	pgs_lp -> dash_cap		1287708	0					
ANR	1290088	Identifier	pgs_lp		1287708	0					
ANR	1290089	Identifier	dash_cap		1287708	1					
ANR	1290090	Identifier	gs_cap_butt		1287708	1					
ANR	1290091	CompoundStatement		437:24:18878:18922	1287708	1					
ANR	1290092	IdentifierDeclStatement	"fixed dmax = max ( any_abs ( udx ) , any_abs ( udy ) ) ;"	859:24:35373:35417	1287708	0	True				
ANR	1290093	IdentifierDecl	"dmax = max ( any_abs ( udx ) , any_abs ( udy ) )"		1287708	0					
ANR	1290094	IdentifierDeclType	fixed		1287708	0					
ANR	1290095	Identifier	dmax		1287708	1					
ANR	1290096	AssignmentExpression	"dmax = max ( any_abs ( udx ) , any_abs ( udy ) )"		1287708	2		=			
ANR	1290097	Identifier	dmax		1287708	0					
ANR	1290098	CallExpression	"max ( any_abs ( udx ) , any_abs ( udy ) )"		1287708	1					
ANR	1290099	Callee	max		1287708	0					
ANR	1290100	Identifier	max		1287708	0					
ANR	1290101	ArgumentList	any_abs ( udx )		1287708	1					
ANR	1290102	Argument	any_abs ( udx )		1287708	0					
ANR	1290103	CallExpression	any_abs ( udx )		1287708	0					
ANR	1290104	Callee	any_abs		1287708	0					
ANR	1290105	Identifier	any_abs		1287708	0					
ANR	1290106	ArgumentList	udx		1287708	1					
ANR	1290107	Argument	udx		1287708	0					
ANR	1290108	Identifier	udx		1287708	0					
ANR	1290109	Argument	any_abs ( udy )		1287708	1					
ANR	1290110	CallExpression	any_abs ( udy )		1287708	0					
ANR	1290111	Callee	any_abs		1287708	0					
ANR	1290112	Identifier	any_abs		1287708	0					
ANR	1290113	ArgumentList	udy		1287708	1					
ANR	1290114	Argument	udy		1287708	0					
ANR	1290115	Identifier	udy		1287708	0					
ANR	1290116	IfStatement	if ( dmax * scale < fixed_1 )		1287708	1					
ANR	1290117	Condition	dmax * scale < fixed_1	861:28:35448:35469	1287708	0	True				
ANR	1290118	RelationalExpression	dmax * scale < fixed_1		1287708	0		<			
ANR	1290119	MultiplicativeExpression	dmax * scale		1287708	0		*			
ANR	1290120	Identifier	dmax		1287708	0					
ANR	1290121	Identifier	scale		1287708	1					
ANR	1290122	Identifier	fixed_1		1287708	1					
ANR	1290123	ExpressionStatement	scale = ( float ) fixed_1 / dmax	862:28:35500:35529	1287708	1	True				
ANR	1290124	AssignmentExpression	scale = ( float ) fixed_1 / dmax		1287708	0		=			
ANR	1290125	Identifier	scale		1287708	0					
ANR	1290126	MultiplicativeExpression	( float ) fixed_1 / dmax		1287708	1		/			
ANR	1290127	CastExpression	( float ) fixed_1		1287708	0					
ANR	1290128	CastTarget	float		1287708	0					
ANR	1290129	Identifier	fixed_1		1287708	1					
ANR	1290130	Identifier	dmax		1287708	1					
ANR	1290131	ExpressionStatement	udx1 = ( fixed ) ( udx * scale )	864:20:35573:35601	1287708	3	True				
ANR	1290132	AssignmentExpression	udx1 = ( fixed ) ( udx * scale )		1287708	0		=			
ANR	1290133	Identifier	udx1		1287708	0					
ANR	1290134	CastExpression	( fixed ) ( udx * scale )		1287708	1					
ANR	1290135	CastTarget	fixed		1287708	0					
ANR	1290136	MultiplicativeExpression	udx * scale		1287708	1		*			
ANR	1290137	Identifier	udx		1287708	0					
ANR	1290138	Identifier	scale		1287708	1					
ANR	1290139	ExpressionStatement	udy1 = ( fixed ) ( udy * scale )	865:20:35623:35651	1287708	4	True				
ANR	1290140	AssignmentExpression	udy1 = ( fixed ) ( udy * scale )		1287708	0		=			
ANR	1290141	Identifier	udy1		1287708	0					
ANR	1290142	CastExpression	( fixed ) ( udy * scale )		1287708	1					
ANR	1290143	CastTarget	fixed		1287708	0					
ANR	1290144	MultiplicativeExpression	udy * scale		1287708	1		*			
ANR	1290145	Identifier	udy		1287708	0					
ANR	1290146	Identifier	scale		1287708	1					
ANR	1290147	ExpressionStatement	sx = x + udx1	866:20:35673:35686	1287708	5	True				
ANR	1290148	AssignmentExpression	sx = x + udx1		1287708	0		=			
ANR	1290149	Identifier	sx		1287708	0					
ANR	1290150	AdditiveExpression	x + udx1		1287708	1		+			
ANR	1290151	Identifier	x		1287708	0					
ANR	1290152	Identifier	udx1		1287708	1					
ANR	1290153	ExpressionStatement	sy = y + udy1	867:20:35708:35721	1287708	6	True				
ANR	1290154	AssignmentExpression	sy = y + udy1		1287708	0		=			
ANR	1290155	Identifier	sy		1287708	0					
ANR	1290156	AdditiveExpression	y + udy1		1287708	1		+			
ANR	1290157	Identifier	y		1287708	0					
ANR	1290158	Identifier	udy1		1287708	1					
ANR	1290159	ExpressionStatement	pseg = ( pseg != 0 ? pseg -> prev : psub -> last )	872:16:35867:35911	1287708	6	True				
ANR	1290160	AssignmentExpression	pseg = ( pseg != 0 ? pseg -> prev : psub -> last )		1287708	0		=			
ANR	1290161	Identifier	pseg		1287708	0					
ANR	1290162	ConditionalExpression	pseg != 0 ? pseg -> prev : psub -> last		1287708	1					
ANR	1290163	Condition	pseg != 0		1287708	0					
ANR	1290164	EqualityExpression	pseg != 0		1287708	0		!=			
ANR	1290165	Identifier	pseg		1287708	0					
ANR	1290166	PrimaryExpression	0		1287708	1					
ANR	1290167	PtrMemberAccess	pseg -> prev		1287708	1					
ANR	1290168	Identifier	pseg		1287708	0					
ANR	1290169	Identifier	prev		1287708	1					
ANR	1290170	PtrMemberAccess	psub -> last		1287708	2					
ANR	1290171	Identifier	psub		1287708	0					
ANR	1290172	Identifier	last		1287708	1					
ANR	1290173	IfStatement	if ( ! is_dash_segment )		1287708	7					
ANR	1290174	Condition	! is_dash_segment	873:20:35933:35948	1287708	0	True				
ANR	1290175	UnaryOperationExpression	! is_dash_segment		1287708	0					
ANR	1290176	UnaryOperator	!		1287708	0					
ANR	1290177	Identifier	is_dash_segment		1287708	1					
ANR	1290178	GotoStatement	goto d ;	874:20:35971:35977	1287708	1	True				
ANR	1290179	Identifier	d		1287708	0					
ANR	1290180	ExpressionStatement	pl . e . p . x = sx	875:16:35995:36008	1287708	8	True				
ANR	1290181	AssignmentExpression	pl . e . p . x = sx		1287708	0		=			
ANR	1290182	MemberAccess	pl . e . p . x		1287708	0					
ANR	1290183	MemberAccess	pl . e . p		1287708	0					
ANR	1290184	MemberAccess	pl . e		1287708	0					
ANR	1290185	Identifier	pl		1287708	0					
ANR	1290186	Identifier	e		1287708	1					
ANR	1290187	Identifier	p		1287708	1					
ANR	1290188	Identifier	x		1287708	1					
ANR	1290189	Identifier	sx		1287708	1					
ANR	1290190	ExpressionStatement	pl . e . p . y = sy	876:16:36026:36039	1287708	9	True				
ANR	1290191	AssignmentExpression	pl . e . p . y = sy		1287708	0		=			
ANR	1290192	MemberAccess	pl . e . p . y		1287708	0					
ANR	1290193	MemberAccess	pl . e . p		1287708	0					
ANR	1290194	MemberAccess	pl . e		1287708	0					
ANR	1290195	Identifier	pl		1287708	0					
ANR	1290196	Identifier	e		1287708	1					
ANR	1290197	Identifier	p		1287708	1					
ANR	1290198	Identifier	y		1287708	1					
ANR	1290199	Identifier	sy		1287708	1					
ANR	1290200	ExpressionStatement	pl . vector . x = udx	878:12:36067:36084	1287708	13	True				
ANR	1290201	AssignmentExpression	pl . vector . x = udx		1287708	0		=			
ANR	1290202	MemberAccess	pl . vector . x		1287708	0					
ANR	1290203	MemberAccess	pl . vector		1287708	0					
ANR	1290204	Identifier	pl		1287708	0					
ANR	1290205	Identifier	vector		1287708	1					
ANR	1290206	Identifier	x		1287708	1					
ANR	1290207	Identifier	udx		1287708	1					
ANR	1290208	ExpressionStatement	pl . vector . y = udy	879:12:36098:36115	1287708	14	True				
ANR	1290209	AssignmentExpression	pl . vector . y = udy		1287708	0		=			
ANR	1290210	MemberAccess	pl . vector . y		1287708	0					
ANR	1290211	MemberAccess	pl . vector		1287708	0					
ANR	1290212	Identifier	pl		1287708	0					
ANR	1290213	Identifier	vector		1287708	1					
ANR	1290214	Identifier	y		1287708	1					
ANR	1290215	Identifier	udy		1287708	1					
ANR	1290216	IfStatement	if ( always_thin )		1287708	15					
ANR	1290217	Condition	always_thin	880:16:36133:36143	1287708	0	True				
ANR	1290218	Identifier	always_thin		1287708	0					
ANR	1290219	CompoundStatement		458:29:19651:19651	1287708	1					
ANR	1290220	ExpressionStatement	pl . e . cdelta . x = pl . e . cdelta . y = 0	881:16:36164:36197	1287708	0	True				
ANR	1290221	AssignmentExpression	pl . e . cdelta . x = pl . e . cdelta . y = 0		1287708	0		=			
ANR	1290222	MemberAccess	pl . e . cdelta . x		1287708	0					
ANR	1290223	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290224	MemberAccess	pl . e		1287708	0					
ANR	1290225	Identifier	pl		1287708	0					
ANR	1290226	Identifier	e		1287708	1					
ANR	1290227	Identifier	cdelta		1287708	1					
ANR	1290228	Identifier	x		1287708	1					
ANR	1290229	AssignmentExpression	pl . e . cdelta . y = 0		1287708	1		=			
ANR	1290230	MemberAccess	pl . e . cdelta . y		1287708	0					
ANR	1290231	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290232	MemberAccess	pl . e		1287708	0					
ANR	1290233	Identifier	pl		1287708	0					
ANR	1290234	Identifier	e		1287708	1					
ANR	1290235	Identifier	cdelta		1287708	1					
ANR	1290236	Identifier	y		1287708	1					
ANR	1290237	PrimaryExpression	0		1287708	1					
ANR	1290238	ExpressionStatement	pl . width . x = pl . width . y = 0	882:16:36215:36242	1287708	1	True				
ANR	1290239	AssignmentExpression	pl . width . x = pl . width . y = 0		1287708	0		=			
ANR	1290240	MemberAccess	pl . width . x		1287708	0					
ANR	1290241	MemberAccess	pl . width		1287708	0					
ANR	1290242	Identifier	pl		1287708	0					
ANR	1290243	Identifier	width		1287708	1					
ANR	1290244	Identifier	x		1287708	1					
ANR	1290245	AssignmentExpression	pl . width . y = 0		1287708	1		=			
ANR	1290246	MemberAccess	pl . width . y		1287708	0					
ANR	1290247	MemberAccess	pl . width		1287708	0					
ANR	1290248	Identifier	pl		1287708	0					
ANR	1290249	Identifier	width		1287708	1					
ANR	1290250	Identifier	y		1287708	1					
ANR	1290251	PrimaryExpression	0		1287708	1					
ANR	1290252	ExpressionStatement	pl . thin = true	883:16:36260:36274	1287708	2	True				
ANR	1290253	AssignmentExpression	pl . thin = true		1287708	0		=			
ANR	1290254	MemberAccess	pl . thin		1287708	0					
ANR	1290255	Identifier	pl		1287708	0					
ANR	1290256	Identifier	thin		1287708	1					
ANR	1290257	Identifier	true		1287708	1					
ANR	1290258	ElseStatement	else		1287708	0					
ANR	1290259	CompoundStatement		462:19:19800:19800	1287708	0					
ANR	1290260	IfStatement	if ( uniform != 0 )		1287708	0					
ANR	1290261	Condition	uniform != 0	885:20:36317:36328	1287708	0	True				
ANR	1290262	EqualityExpression	uniform != 0		1287708	0		!=			
ANR	1290263	Identifier	uniform		1287708	0					
ANR	1290264	PrimaryExpression	0		1287708	1					
ANR	1290265	CompoundStatement		467:20:20031:20104	1287708	1					
ANR	1290266	IdentifierDeclStatement	"double dpx = udx , dpy = udy ;"	888:20:36477:36504	1287708	0	True				
ANR	1290267	IdentifierDecl	dpx = udx		1287708	0					
ANR	1290268	IdentifierDeclType	double		1287708	0					
ANR	1290269	Identifier	dpx		1287708	1					
ANR	1290270	AssignmentExpression	dpx = udx		1287708	2		=			
ANR	1290271	Identifier	udx		1287708	0					
ANR	1290272	Identifier	udx		1287708	1					
ANR	1290273	IdentifierDecl	dpy = udy		1287708	1					
ANR	1290274	IdentifierDeclType	double		1287708	0					
ANR	1290275	Identifier	dpy		1287708	1					
ANR	1290276	AssignmentExpression	dpy = udy		1287708	2		=			
ANR	1290277	Identifier	udy		1287708	0					
ANR	1290278	Identifier	udy		1287708	1					
ANR	1290279	IdentifierDeclStatement	"double wl = device_line_width_scale / hypot ( dpx , dpy ) ;"	889:20:36526:36599	1287708	1	True				
ANR	1290280	IdentifierDecl	"wl = device_line_width_scale / hypot ( dpx , dpy )"		1287708	0					
ANR	1290281	IdentifierDeclType	double		1287708	0					
ANR	1290282	Identifier	wl		1287708	1					
ANR	1290283	AssignmentExpression	"wl = device_line_width_scale / hypot ( dpx , dpy )"		1287708	2		=			
ANR	1290284	Identifier	wl		1287708	0					
ANR	1290285	MultiplicativeExpression	"device_line_width_scale / hypot ( dpx , dpy )"		1287708	1		/			
ANR	1290286	Identifier	device_line_width_scale		1287708	0					
ANR	1290287	CallExpression	"hypot ( dpx , dpy )"		1287708	1					
ANR	1290288	Callee	hypot		1287708	0					
ANR	1290289	Identifier	hypot		1287708	0					
ANR	1290290	ArgumentList	dpx		1287708	1					
ANR	1290291	Argument	dpx		1287708	0					
ANR	1290292	Identifier	dpx		1287708	0					
ANR	1290293	Argument	dpy		1287708	1					
ANR	1290294	Identifier	dpy		1287708	0					
ANR	1290295	ExpressionStatement	pl . e . cdelta . x = ( fixed ) ( dpx * wl )	892:20:36622:36656	1287708	2	True				
ANR	1290296	AssignmentExpression	pl . e . cdelta . x = ( fixed ) ( dpx * wl )		1287708	0		=			
ANR	1290297	MemberAccess	pl . e . cdelta . x		1287708	0					
ANR	1290298	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290299	MemberAccess	pl . e		1287708	0					
ANR	1290300	Identifier	pl		1287708	0					
ANR	1290301	Identifier	e		1287708	1					
ANR	1290302	Identifier	cdelta		1287708	1					
ANR	1290303	Identifier	x		1287708	1					
ANR	1290304	CastExpression	( fixed ) ( dpx * wl )		1287708	1					
ANR	1290305	CastTarget	fixed		1287708	0					
ANR	1290306	MultiplicativeExpression	dpx * wl		1287708	1		*			
ANR	1290307	Identifier	dpx		1287708	0					
ANR	1290308	Identifier	wl		1287708	1					
ANR	1290309	ExpressionStatement	pl . e . cdelta . y = ( fixed ) ( dpy * wl )	893:20:36678:36712	1287708	3	True				
ANR	1290310	AssignmentExpression	pl . e . cdelta . y = ( fixed ) ( dpy * wl )		1287708	0		=			
ANR	1290311	MemberAccess	pl . e . cdelta . y		1287708	0					
ANR	1290312	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290313	MemberAccess	pl . e		1287708	0					
ANR	1290314	Identifier	pl		1287708	0					
ANR	1290315	Identifier	e		1287708	1					
ANR	1290316	Identifier	cdelta		1287708	1					
ANR	1290317	Identifier	y		1287708	1					
ANR	1290318	CastExpression	( fixed ) ( dpy * wl )		1287708	1					
ANR	1290319	CastTarget	fixed		1287708	0					
ANR	1290320	MultiplicativeExpression	dpy * wl		1287708	1		*			
ANR	1290321	Identifier	dpy		1287708	0					
ANR	1290322	Identifier	wl		1287708	1					
ANR	1290323	IfStatement	if ( initial_matrix_reflected )		1287708	4					
ANR	1290324	Condition	initial_matrix_reflected	896:24:36840:36863	1287708	0	True				
ANR	1290325	Identifier	initial_matrix_reflected		1287708	0					
ANR	1290326	ExpressionStatement	"pl . width . x = pl . e . cdelta . y , pl . width . y = - pl . e . cdelta . x"	897:24:36890:36945	1287708	1	True				
ANR	1290327	Expression	"pl . width . x = pl . e . cdelta . y , pl . width . y = - pl . e . cdelta . x"		1287708	0					
ANR	1290328	AssignmentExpression	pl . width . x = pl . e . cdelta . y		1287708	0		=			
ANR	1290329	MemberAccess	pl . width . x		1287708	0					
ANR	1290330	MemberAccess	pl . width		1287708	0					
ANR	1290331	Identifier	pl		1287708	0					
ANR	1290332	Identifier	width		1287708	1					
ANR	1290333	Identifier	x		1287708	1					
ANR	1290334	MemberAccess	pl . e . cdelta . y		1287708	1					
ANR	1290335	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290336	MemberAccess	pl . e		1287708	0					
ANR	1290337	Identifier	pl		1287708	0					
ANR	1290338	Identifier	e		1287708	1					
ANR	1290339	Identifier	cdelta		1287708	1					
ANR	1290340	Identifier	y		1287708	1					
ANR	1290341	AssignmentExpression	pl . width . y = - pl . e . cdelta . x		1287708	1		=			
ANR	1290342	MemberAccess	pl . width . y		1287708	0					
ANR	1290343	MemberAccess	pl . width		1287708	0					
ANR	1290344	Identifier	pl		1287708	0					
ANR	1290345	Identifier	width		1287708	1					
ANR	1290346	Identifier	y		1287708	1					
ANR	1290347	UnaryOperationExpression	- pl . e . cdelta . x		1287708	1					
ANR	1290348	UnaryOperator	-		1287708	0					
ANR	1290349	MemberAccess	pl . e . cdelta . x		1287708	1					
ANR	1290350	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290351	MemberAccess	pl . e		1287708	0					
ANR	1290352	Identifier	pl		1287708	0					
ANR	1290353	Identifier	e		1287708	1					
ANR	1290354	Identifier	cdelta		1287708	1					
ANR	1290355	Identifier	x		1287708	1					
ANR	1290356	ElseStatement	else		1287708	0					
ANR	1290357	ExpressionStatement	"pl . width . x = - pl . e . cdelta . y , pl . width . y = pl . e . cdelta . x"	899:24:36996:37051	1287708	0	True				
ANR	1290358	Expression	"pl . width . x = - pl . e . cdelta . y , pl . width . y = pl . e . cdelta . x"		1287708	0					
ANR	1290359	AssignmentExpression	pl . width . x = - pl . e . cdelta . y		1287708	0		=			
ANR	1290360	MemberAccess	pl . width . x		1287708	0					
ANR	1290361	MemberAccess	pl . width		1287708	0					
ANR	1290362	Identifier	pl		1287708	0					
ANR	1290363	Identifier	width		1287708	1					
ANR	1290364	Identifier	x		1287708	1					
ANR	1290365	UnaryOperationExpression	- pl . e . cdelta . y		1287708	1					
ANR	1290366	UnaryOperator	-		1287708	0					
ANR	1290367	MemberAccess	pl . e . cdelta . y		1287708	1					
ANR	1290368	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290369	MemberAccess	pl . e		1287708	0					
ANR	1290370	Identifier	pl		1287708	0					
ANR	1290371	Identifier	e		1287708	1					
ANR	1290372	Identifier	cdelta		1287708	1					
ANR	1290373	Identifier	y		1287708	1					
ANR	1290374	AssignmentExpression	pl . width . y = pl . e . cdelta . x		1287708	1		=			
ANR	1290375	MemberAccess	pl . width . y		1287708	0					
ANR	1290376	MemberAccess	pl . width		1287708	0					
ANR	1290377	Identifier	pl		1287708	0					
ANR	1290378	Identifier	width		1287708	1					
ANR	1290379	Identifier	y		1287708	1					
ANR	1290380	MemberAccess	pl . e . cdelta . x		1287708	1					
ANR	1290381	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290382	MemberAccess	pl . e		1287708	0					
ANR	1290383	Identifier	pl		1287708	0					
ANR	1290384	Identifier	e		1287708	1					
ANR	1290385	Identifier	cdelta		1287708	1					
ANR	1290386	Identifier	x		1287708	1					
ANR	1290387	ExpressionStatement	pl . thin = false	900:20:37073:37088	1287708	5	True				
ANR	1290388	AssignmentExpression	pl . thin = false		1287708	0		=			
ANR	1290389	MemberAccess	pl . thin		1287708	0					
ANR	1290390	Identifier	pl		1287708	0					
ANR	1290391	Identifier	thin		1287708	1					
ANR	1290392	Identifier	false		1287708	1					
ANR	1290393	ElseStatement	else		1287708	0					
ANR	1290394	CompoundStatement		483:20:20768:20776	1287708	0					
ANR	1290395	IdentifierDeclStatement	gs_point dpt ;	904:20:37208:37220	1287708	0	True				
ANR	1290396	IdentifierDecl	dpt		1287708	0					
ANR	1290397	IdentifierDeclType	gs_point		1287708	0					
ANR	1290398	Identifier	dpt		1287708	1					
ANR	1290399	IdentifierDeclStatement	float wl ;	905:20:37263:37271	1287708	1	True				
ANR	1290400	IdentifierDecl	wl		1287708	0					
ANR	1290401	IdentifierDeclType	float		1287708	0					
ANR	1290402	Identifier	wl		1287708	1					
ANR	1290403	ExpressionStatement	"code = gs_gstate_idtransform ( pgs , ( float ) udx , ( float ) udy , & dpt )"	907:20:37294:37455	1287708	2	True				
ANR	1290404	AssignmentExpression	"code = gs_gstate_idtransform ( pgs , ( float ) udx , ( float ) udy , & dpt )"		1287708	0		=			
ANR	1290405	Identifier	code		1287708	0					
ANR	1290406	CallExpression	"gs_gstate_idtransform ( pgs , ( float ) udx , ( float ) udy , & dpt )"		1287708	1					
ANR	1290407	Callee	gs_gstate_idtransform		1287708	0					
ANR	1290408	Identifier	gs_gstate_idtransform		1287708	0					
ANR	1290409	ArgumentList	pgs		1287708	1					
ANR	1290410	Argument	pgs		1287708	0					
ANR	1290411	Identifier	pgs		1287708	0					
ANR	1290412	Argument	( float ) udx		1287708	1					
ANR	1290413	CastExpression	( float ) udx		1287708	0					
ANR	1290414	CastTarget	float		1287708	0					
ANR	1290415	Identifier	udx		1287708	1					
ANR	1290416	Argument	( float ) udy		1287708	2					
ANR	1290417	CastExpression	( float ) udy		1287708	0					
ANR	1290418	CastTarget	float		1287708	0					
ANR	1290419	Identifier	udy		1287708	1					
ANR	1290420	Argument	& dpt		1287708	3					
ANR	1290421	UnaryOperationExpression	& dpt		1287708	0					
ANR	1290422	UnaryOperator	&		1287708	0					
ANR	1290423	Identifier	dpt		1287708	1					
ANR	1290424	IfStatement	if ( code < 0 )		1287708	3					
ANR	1290425	Condition	code < 0	910:24:37481:37488	1287708	0	True				
ANR	1290426	RelationalExpression	code < 0		1287708	0		<			
ANR	1290427	Identifier	code		1287708	0					
ANR	1290428	PrimaryExpression	0		1287708	1					
ANR	1290429	CompoundStatement		488:34:20996:20996	1287708	1					
ANR	1290430	ExpressionStatement	dpt . x = 0	911:24:37517:37526	1287708	0	True				
ANR	1290431	AssignmentExpression	dpt . x = 0		1287708	0		=			
ANR	1290432	MemberAccess	dpt . x		1287708	0					
ANR	1290433	Identifier	dpt		1287708	0					
ANR	1290434	Identifier	x		1287708	1					
ANR	1290435	PrimaryExpression	0		1287708	1					
ANR	1290436	ExpressionStatement	dpt . y = 0	911:35:37528:37537	1287708	1	True				
ANR	1290437	AssignmentExpression	dpt . y = 0		1287708	0		=			
ANR	1290438	MemberAccess	dpt . y		1287708	0					
ANR	1290439	Identifier	dpt		1287708	0					
ANR	1290440	Identifier	y		1287708	1					
ANR	1290441	PrimaryExpression	0		1287708	1					
ANR	1290442	ExpressionStatement	code = 0	913:24:37611:37619	1287708	2	True				
ANR	1290443	AssignmentExpression	code = 0		1287708	0		=			
ANR	1290444	Identifier	code		1287708	0					
ANR	1290445	PrimaryExpression	0		1287708	1					
ANR	1290446	ElseStatement	else		1287708	0					
ANR	1290447	CompoundStatement		492:27:21153:21153	1287708	0					
ANR	1290448	ExpressionStatement	"wl = line_width_and_scale / hypot ( dpt . x , dpt . y )"	915:24:37674:37749	1287708	0	True				
ANR	1290449	AssignmentExpression	"wl = line_width_and_scale / hypot ( dpt . x , dpt . y )"		1287708	0		=			
ANR	1290450	Identifier	wl		1287708	0					
ANR	1290451	MultiplicativeExpression	"line_width_and_scale / hypot ( dpt . x , dpt . y )"		1287708	1		/			
ANR	1290452	Identifier	line_width_and_scale		1287708	0					
ANR	1290453	CallExpression	"hypot ( dpt . x , dpt . y )"		1287708	1					
ANR	1290454	Callee	hypot		1287708	0					
ANR	1290455	Identifier	hypot		1287708	0					
ANR	1290456	ArgumentList	dpt . x		1287708	1					
ANR	1290457	Argument	dpt . x		1287708	0					
ANR	1290458	MemberAccess	dpt . x		1287708	0					
ANR	1290459	Identifier	dpt		1287708	0					
ANR	1290460	Identifier	x		1287708	1					
ANR	1290461	Argument	dpt . y		1287708	1					
ANR	1290462	MemberAccess	dpt . y		1287708	0					
ANR	1290463	Identifier	dpt		1287708	0					
ANR	1290464	Identifier	y		1287708	1					
ANR	1290465	ExpressionStatement	dpt . x *= wl	919:24:37893:37904	1287708	1	True				
ANR	1290466	AssignmentExpression	dpt . x *= wl		1287708	0		*=			
ANR	1290467	MemberAccess	dpt . x		1287708	0					
ANR	1290468	Identifier	dpt		1287708	0					
ANR	1290469	Identifier	x		1287708	1					
ANR	1290470	Identifier	wl		1287708	1					
ANR	1290471	ExpressionStatement	dpt . y *= wl	920:24:37930:37941	1287708	2	True				
ANR	1290472	AssignmentExpression	dpt . y *= wl		1287708	0		*=			
ANR	1290473	MemberAccess	dpt . y		1287708	0					
ANR	1290474	Identifier	dpt		1287708	0					
ANR	1290475	Identifier	y		1287708	1					
ANR	1290476	Identifier	wl		1287708	1					
ANR	1290477	ExpressionStatement	pl . e . cdelta . x = ( fixed ) ( dpt . x * xx )	934:20:38562:38598	1287708	4	True				
ANR	1290478	AssignmentExpression	pl . e . cdelta . x = ( fixed ) ( dpt . x * xx )		1287708	0		=			
ANR	1290479	MemberAccess	pl . e . cdelta . x		1287708	0					
ANR	1290480	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290481	MemberAccess	pl . e		1287708	0					
ANR	1290482	Identifier	pl		1287708	0					
ANR	1290483	Identifier	e		1287708	1					
ANR	1290484	Identifier	cdelta		1287708	1					
ANR	1290485	Identifier	x		1287708	1					
ANR	1290486	CastExpression	( fixed ) ( dpt . x * xx )		1287708	1					
ANR	1290487	CastTarget	fixed		1287708	0					
ANR	1290488	MultiplicativeExpression	dpt . x * xx		1287708	1		*			
ANR	1290489	MemberAccess	dpt . x		1287708	0					
ANR	1290490	Identifier	dpt		1287708	0					
ANR	1290491	Identifier	x		1287708	1					
ANR	1290492	Identifier	xx		1287708	1					
ANR	1290493	ExpressionStatement	pl . e . cdelta . y = ( fixed ) ( dpt . y * yy )	935:20:38620:38656	1287708	5	True				
ANR	1290494	AssignmentExpression	pl . e . cdelta . y = ( fixed ) ( dpt . y * yy )		1287708	0		=			
ANR	1290495	MemberAccess	pl . e . cdelta . y		1287708	0					
ANR	1290496	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290497	MemberAccess	pl . e		1287708	0					
ANR	1290498	Identifier	pl		1287708	0					
ANR	1290499	Identifier	e		1287708	1					
ANR	1290500	Identifier	cdelta		1287708	1					
ANR	1290501	Identifier	y		1287708	1					
ANR	1290502	CastExpression	( fixed ) ( dpt . y * yy )		1287708	1					
ANR	1290503	CastTarget	fixed		1287708	0					
ANR	1290504	MultiplicativeExpression	dpt . y * yy		1287708	1		*			
ANR	1290505	MemberAccess	dpt . y		1287708	0					
ANR	1290506	Identifier	dpt		1287708	0					
ANR	1290507	Identifier	y		1287708	1					
ANR	1290508	Identifier	yy		1287708	1					
ANR	1290509	IfStatement	if ( orient != orient_portrait )		1287708	6					
ANR	1290510	Condition	orient != orient_portrait	936:24:38682:38706	1287708	0	True				
ANR	1290511	EqualityExpression	orient != orient_portrait		1287708	0		!=			
ANR	1290512	Identifier	orient		1287708	0					
ANR	1290513	Identifier	orient_portrait		1287708	1					
ANR	1290514	ExpressionStatement	"pl . e . cdelta . x += ( fixed ) ( dpt . y * yx ) , pl . e . cdelta . y += ( fixed ) ( dpt . x * xy )"	937:24:38733:38837	1287708	1	True				
ANR	1290515	Expression	"pl . e . cdelta . x += ( fixed ) ( dpt . y * yx ) , pl . e . cdelta . y += ( fixed ) ( dpt . x * xy )"		1287708	0					
ANR	1290516	AssignmentExpression	pl . e . cdelta . x += ( fixed ) ( dpt . y * yx )		1287708	0		+=			
ANR	1290517	MemberAccess	pl . e . cdelta . x		1287708	0					
ANR	1290518	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290519	MemberAccess	pl . e		1287708	0					
ANR	1290520	Identifier	pl		1287708	0					
ANR	1290521	Identifier	e		1287708	1					
ANR	1290522	Identifier	cdelta		1287708	1					
ANR	1290523	Identifier	x		1287708	1					
ANR	1290524	CastExpression	( fixed ) ( dpt . y * yx )		1287708	1					
ANR	1290525	CastTarget	fixed		1287708	0					
ANR	1290526	MultiplicativeExpression	dpt . y * yx		1287708	1		*			
ANR	1290527	MemberAccess	dpt . y		1287708	0					
ANR	1290528	Identifier	dpt		1287708	0					
ANR	1290529	Identifier	y		1287708	1					
ANR	1290530	Identifier	yx		1287708	1					
ANR	1290531	AssignmentExpression	pl . e . cdelta . y += ( fixed ) ( dpt . x * xy )		1287708	1		+=			
ANR	1290532	MemberAccess	pl . e . cdelta . y		1287708	0					
ANR	1290533	MemberAccess	pl . e . cdelta		1287708	0					
ANR	1290534	MemberAccess	pl . e		1287708	0					
ANR	1290535	Identifier	pl		1287708	0					
ANR	1290536	Identifier	e		1287708	1					
ANR	1290537	Identifier	cdelta		1287708	1					
ANR	1290538	Identifier	y		1287708	1					
ANR	1290539	CastExpression	( fixed ) ( dpt . x * xy )		1287708	1					
ANR	1290540	CastTarget	fixed		1287708	0					
ANR	1290541	MultiplicativeExpression	dpt . x * xy		1287708	1		*			
ANR	1290542	MemberAccess	dpt . x		1287708	0					
ANR	1290543	Identifier	dpt		1287708	0					
ANR	1290544	Identifier	x		1287708	1					
ANR	1290545	Identifier	xy		1287708	1					
ANR	1290546	IfStatement	if ( ! reflected ^ initial_matrix_reflected )		1287708	7					
ANR	1290547	Condition	! reflected ^ initial_matrix_reflected	939:24:38863:38899	1287708	0	True				
ANR	1290548	ExclusiveOrExpression	! reflected ^ initial_matrix_reflected		1287708	0		^			
ANR	1290549	UnaryOperationExpression	! reflected		1287708	0					
ANR	1290550	UnaryOperator	!		1287708	0					
ANR	1290551	Identifier	reflected		1287708	1					
ANR	1290552	Identifier	initial_matrix_reflected		1287708	1					
ANR	1290553	ExpressionStatement	"dpt . x = - dpt . x , dpt . y = - dpt . y"	940:24:38926:38956	1287708	1	True				
ANR	1290554	Expression	"dpt . x = - dpt . x , dpt . y = - dpt . y"		1287708	0					
ANR	1290555	AssignmentExpression	dpt . x = - dpt . x		1287708	0		=			
ANR	1290556	MemberAccess	dpt . x		1287708	0					
ANR	1290557	Identifier	dpt		1287708	0					
ANR	1290558	Identifier	x		1287708	1					
ANR	1290559	UnaryOperationExpression	- dpt . x		1287708	1					
ANR	1290560	UnaryOperator	-		1287708	0					
ANR	1290561	MemberAccess	dpt . x		1287708	1					
ANR	1290562	Identifier	dpt		1287708	0					
ANR	1290563	Identifier	x		1287708	1					
ANR	1290564	AssignmentExpression	dpt . y = - dpt . y		1287708	1		=			
ANR	1290565	MemberAccess	dpt . y		1287708	0					
ANR	1290566	Identifier	dpt		1287708	0					
ANR	1290567	Identifier	y		1287708	1					
ANR	1290568	UnaryOperationExpression	- dpt . y		1287708	1					
ANR	1290569	UnaryOperator	-		1287708	0					
ANR	1290570	MemberAccess	dpt . y		1287708	1					
ANR	1290571	Identifier	dpt		1287708	0					
ANR	1290572	Identifier	y		1287708	1					
ANR	1290573	ExpressionStatement	"pl . width . x = ( fixed ) ( dpt . y * xx ) , pl . width . y = - ( fixed ) ( dpt . x * yy )"	941:20:38978:39071	1287708	8	True				
ANR	1290574	Expression	"pl . width . x = ( fixed ) ( dpt . y * xx ) , pl . width . y = - ( fixed ) ( dpt . x * yy )"		1287708	0					
ANR	1290575	AssignmentExpression	pl . width . x = ( fixed ) ( dpt . y * xx )		1287708	0		=			
ANR	1290576	MemberAccess	pl . width . x		1287708	0					
ANR	1290577	MemberAccess	pl . width		1287708	0					
ANR	1290578	Identifier	pl		1287708	0					
ANR	1290579	Identifier	width		1287708	1					
ANR	1290580	Identifier	x		1287708	1					
ANR	1290581	CastExpression	( fixed ) ( dpt . y * xx )		1287708	1					
ANR	1290582	CastTarget	fixed		1287708	0					
ANR	1290583	MultiplicativeExpression	dpt . y * xx		1287708	1		*			
ANR	1290584	MemberAccess	dpt . y		1287708	0					
ANR	1290585	Identifier	dpt		1287708	0					
ANR	1290586	Identifier	y		1287708	1					
ANR	1290587	Identifier	xx		1287708	1					
ANR	1290588	AssignmentExpression	pl . width . y = - ( fixed ) ( dpt . x * yy )		1287708	1		=			
ANR	1290589	MemberAccess	pl . width . y		1287708	0					
ANR	1290590	MemberAccess	pl . width		1287708	0					
ANR	1290591	Identifier	pl		1287708	0					
ANR	1290592	Identifier	width		1287708	1					
ANR	1290593	Identifier	y		1287708	1					
ANR	1290594	UnaryOperationExpression	- ( fixed ) ( dpt . x * yy )		1287708	1					
ANR	1290595	UnaryOperator	-		1287708	0					
ANR	1290596	CastExpression	( fixed ) ( dpt . x * yy )		1287708	1					
ANR	1290597	CastTarget	fixed		1287708	0					
ANR	1290598	MultiplicativeExpression	dpt . x * yy		1287708	1		*			
ANR	1290599	MemberAccess	dpt . x		1287708	0					
ANR	1290600	Identifier	dpt		1287708	0					
ANR	1290601	Identifier	x		1287708	1					
ANR	1290602	Identifier	yy		1287708	1					
ANR	1290603	IfStatement	if ( orient != orient_portrait )		1287708	9					
ANR	1290604	Condition	orient != orient_portrait	943:24:39097:39121	1287708	0	True				
ANR	1290605	EqualityExpression	orient != orient_portrait		1287708	0		!=			
ANR	1290606	Identifier	orient		1287708	0					
ANR	1290607	Identifier	orient_portrait		1287708	1					
ANR	1290608	ExpressionStatement	"pl . width . x -= ( fixed ) ( dpt . x * yx ) , pl . width . y += ( fixed ) ( dpt . y * xy )"	944:24:39148:39246	1287708	1	True				
ANR	1290609	Expression	"pl . width . x -= ( fixed ) ( dpt . x * yx ) , pl . width . y += ( fixed ) ( dpt . y * xy )"		1287708	0					
ANR	1290610	AssignmentExpression	pl . width . x -= ( fixed ) ( dpt . x * yx )		1287708	0		-=			
ANR	1290611	MemberAccess	pl . width . x		1287708	0					
ANR	1290612	MemberAccess	pl . width		1287708	0					
ANR	1290613	Identifier	pl		1287708	0					
ANR	1290614	Identifier	width		1287708	1					
ANR	1290615	Identifier	x		1287708	1					
ANR	1290616	CastExpression	( fixed ) ( dpt . x * yx )		1287708	1					
ANR	1290617	CastTarget	fixed		1287708	0					
ANR	1290618	MultiplicativeExpression	dpt . x * yx		1287708	1		*			
ANR	1290619	MemberAccess	dpt . x		1287708	0					
ANR	1290620	Identifier	dpt		1287708	0					
ANR	1290621	Identifier	x		1287708	1					
ANR	1290622	Identifier	yx		1287708	1					
ANR	1290623	AssignmentExpression	pl . width . y += ( fixed ) ( dpt . y * xy )		1287708	1		+=			
ANR	1290624	MemberAccess	pl . width . y		1287708	0					
ANR	1290625	MemberAccess	pl . width		1287708	0					
ANR	1290626	Identifier	pl		1287708	0					
ANR	1290627	Identifier	width		1287708	1					
ANR	1290628	Identifier	y		1287708	1					
ANR	1290629	CastExpression	( fixed ) ( dpt . y * xy )		1287708	1					
ANR	1290630	CastTarget	fixed		1287708	0					
ANR	1290631	MultiplicativeExpression	dpt . y * xy		1287708	1		*			
ANR	1290632	MemberAccess	dpt . y		1287708	0					
ANR	1290633	Identifier	dpt		1287708	0					
ANR	1290634	Identifier	y		1287708	1					
ANR	1290635	Identifier	xy		1287708	1					
ANR	1290636	ExpressionStatement	pl . thin = width_is_thin ( & pl )	946:20:39268:39296	1287708	10	True				
ANR	1290637	AssignmentExpression	pl . thin = width_is_thin ( & pl )		1287708	0		=			
ANR	1290638	MemberAccess	pl . thin		1287708	0					
ANR	1290639	Identifier	pl		1287708	0					
ANR	1290640	Identifier	thin		1287708	1					
ANR	1290641	CallExpression	width_is_thin ( & pl )		1287708	1					
ANR	1290642	Callee	width_is_thin		1287708	0					
ANR	1290643	Identifier	width_is_thin		1287708	0					
ANR	1290644	ArgumentList	& pl		1287708	1					
ANR	1290645	Argument	& pl		1287708	0					
ANR	1290646	UnaryOperationExpression	& pl		1287708	0					
ANR	1290647	UnaryOperator	&		1287708	0					
ANR	1290648	Identifier	pl		1287708	1					
ANR	1290649	IfStatement	if ( ! pl . thin )		1287708	1					
ANR	1290650	Condition	! pl . thin	948:20:39336:39343	1287708	0	True				
ANR	1290651	UnaryOperationExpression	! pl . thin		1287708	0					
ANR	1290652	UnaryOperator	!		1287708	0					
ANR	1290653	MemberAccess	pl . thin		1287708	1					
ANR	1290654	Identifier	pl		1287708	0					
ANR	1290655	Identifier	thin		1287708	1					
ANR	1290656	CompoundStatement		526:30:22851:22851	1287708	1					
ANR	1290657	IfStatement	if ( index )		1287708	0					
ANR	1290658	Condition	index	949:24:39372:39376	1287708	0	True				
ANR	1290659	Identifier	index		1287708	0					
ANR	1290660	ExpressionStatement	dev -> sgr . stroke_stored = false	950:24:39403:39433	1287708	1	True				
ANR	1290661	AssignmentExpression	dev -> sgr . stroke_stored = false		1287708	0		=			
ANR	1290662	MemberAccess	dev -> sgr . stroke_stored		1287708	0					
ANR	1290663	PtrMemberAccess	dev -> sgr		1287708	0					
ANR	1290664	Identifier	dev		1287708	0					
ANR	1290665	Identifier	sgr		1287708	1					
ANR	1290666	Identifier	stroke_stored		1287708	1					
ANR	1290667	Identifier	false		1287708	1					
ANR	1290668	ExpressionStatement	"adjust_stroke ( dev , & pl , pgs , false , ( pseg -> prev == 0 || pseg -> prev -> type == s_start ) && ( pseg -> next == 0 || pseg -> next -> type == s_start ) && ( zero_length || ! is_closed ) , COMBINE_FLAGS ( flags ) )"	951:20:39455:39757	1287708	1	True				
ANR	1290669	CallExpression	"adjust_stroke ( dev , & pl , pgs , false , ( pseg -> prev == 0 || pseg -> prev -> type == s_start ) && ( pseg -> next == 0 || pseg -> next -> type == s_start ) && ( zero_length || ! is_closed ) , COMBINE_FLAGS ( flags ) )"		1287708	0					
ANR	1290670	Callee	adjust_stroke		1287708	0					
ANR	1290671	Identifier	adjust_stroke		1287708	0					
ANR	1290672	ArgumentList	dev		1287708	1					
ANR	1290673	Argument	dev		1287708	0					
ANR	1290674	Identifier	dev		1287708	0					
ANR	1290675	Argument	& pl		1287708	1					
ANR	1290676	UnaryOperationExpression	& pl		1287708	0					
ANR	1290677	UnaryOperator	&		1287708	0					
ANR	1290678	Identifier	pl		1287708	1					
ANR	1290679	Argument	pgs		1287708	2					
ANR	1290680	Identifier	pgs		1287708	0					
ANR	1290681	Argument	false		1287708	3					
ANR	1290682	Identifier	false		1287708	0					
ANR	1290683	Argument	( pseg -> prev == 0 || pseg -> prev -> type == s_start ) && ( pseg -> next == 0 || pseg -> next -> type == s_start ) && ( zero_length || ! is_closed )		1287708	4					
ANR	1290684	AndExpression	( pseg -> prev == 0 || pseg -> prev -> type == s_start ) && ( pseg -> next == 0 || pseg -> next -> type == s_start ) && ( zero_length || ! is_closed )		1287708	0		&&			
ANR	1290685	OrExpression	pseg -> prev == 0 || pseg -> prev -> type == s_start		1287708	0		||			
ANR	1290686	EqualityExpression	pseg -> prev == 0		1287708	0		==			
ANR	1290687	PtrMemberAccess	pseg -> prev		1287708	0					
ANR	1290688	Identifier	pseg		1287708	0					
ANR	1290689	Identifier	prev		1287708	1					
ANR	1290690	PrimaryExpression	0		1287708	1					
ANR	1290691	EqualityExpression	pseg -> prev -> type == s_start		1287708	1		==			
ANR	1290692	PtrMemberAccess	pseg -> prev -> type		1287708	0					
ANR	1290693	PtrMemberAccess	pseg -> prev		1287708	0					
ANR	1290694	Identifier	pseg		1287708	0					
ANR	1290695	Identifier	prev		1287708	1					
ANR	1290696	Identifier	type		1287708	1					
ANR	1290697	Identifier	s_start		1287708	1					
ANR	1290698	AndExpression	( pseg -> next == 0 || pseg -> next -> type == s_start ) && ( zero_length || ! is_closed )		1287708	1		&&			
ANR	1290699	OrExpression	pseg -> next == 0 || pseg -> next -> type == s_start		1287708	0		||			
ANR	1290700	EqualityExpression	pseg -> next == 0		1287708	0		==			
ANR	1290701	PtrMemberAccess	pseg -> next		1287708	0					
ANR	1290702	Identifier	pseg		1287708	0					
ANR	1290703	Identifier	next		1287708	1					
ANR	1290704	PrimaryExpression	0		1287708	1					
ANR	1290705	EqualityExpression	pseg -> next -> type == s_start		1287708	1		==			
ANR	1290706	PtrMemberAccess	pseg -> next -> type		1287708	0					
ANR	1290707	PtrMemberAccess	pseg -> next		1287708	0					
ANR	1290708	Identifier	pseg		1287708	0					
ANR	1290709	Identifier	next		1287708	1					
ANR	1290710	Identifier	type		1287708	1					
ANR	1290711	Identifier	s_start		1287708	1					
ANR	1290712	OrExpression	zero_length || ! is_closed		1287708	1		||			
ANR	1290713	Identifier	zero_length		1287708	0					
ANR	1290714	UnaryOperationExpression	! is_closed		1287708	1					
ANR	1290715	UnaryOperator	!		1287708	0					
ANR	1290716	Identifier	is_closed		1287708	1					
ANR	1290717	Argument	COMBINE_FLAGS ( flags )		1287708	5					
ANR	1290718	CallExpression	COMBINE_FLAGS ( flags )		1287708	0					
ANR	1290719	Callee	COMBINE_FLAGS		1287708	0					
ANR	1290720	Identifier	COMBINE_FLAGS		1287708	0					
ANR	1290721	ArgumentList	flags		1287708	1					
ANR	1290722	Argument	flags		1287708	0					
ANR	1290723	Identifier	flags		1287708	0					
ANR	1290724	ExpressionStatement	compute_caps ( & pl )	956:20:39779:39796	1287708	2	True				
ANR	1290725	CallExpression	compute_caps ( & pl )		1287708	0					
ANR	1290726	Callee	compute_caps		1287708	0					
ANR	1290727	Identifier	compute_caps		1287708	0					
ANR	1290728	ArgumentList	& pl		1287708	1					
ANR	1290729	Argument	& pl		1287708	0					
ANR	1290730	UnaryOperationExpression	& pl		1287708	0					
ANR	1290731	UnaryOperator	&		1287708	0					
ANR	1290732	Identifier	pl		1287708	1					
ANR	1290733	IfStatement	if ( index ++ )		1287708	16					
ANR	1290734	Condition	index ++	959:16:39846:39852	1287708	0	True				
ANR	1290735	PostIncDecOperationExpression	index ++		1287708	0					
ANR	1290736	Identifier	index		1287708	0					
ANR	1290737	IncDec	++		1287708	1					
ANR	1290738	CompoundStatement		542:16:23544:23562	1287708	1					
ANR	1290739	IdentifierDeclStatement	gs_line_join join = ( pseg_notes & not_first ? curve_join : pgs_lp -> join ) ;	960:16:39873:39965	1287708	0	True				
ANR	1290740	IdentifierDecl	join = ( pseg_notes & not_first ? curve_join : pgs_lp -> join )		1287708	0					
ANR	1290741	IdentifierDeclType	gs_line_join		1287708	0					
ANR	1290742	Identifier	join		1287708	1					
ANR	1290743	AssignmentExpression	join = ( pseg_notes & not_first ? curve_join : pgs_lp -> join )		1287708	2		=			
ANR	1290744	Identifier	join		1287708	0					
ANR	1290745	ConditionalExpression	pseg_notes & not_first ? curve_join : pgs_lp -> join		1287708	1					
ANR	1290746	Condition	pseg_notes & not_first		1287708	0					
ANR	1290747	BitAndExpression	pseg_notes & not_first		1287708	0		&			
ANR	1290748	Identifier	pseg_notes		1287708	0					
ANR	1290749	Identifier	not_first		1287708	1					
ANR	1290750	Identifier	curve_join		1287708	1					
ANR	1290751	PtrMemberAccess	pgs_lp -> join		1287708	2					
ANR	1290752	Identifier	pgs_lp		1287708	0					
ANR	1290753	Identifier	join		1287708	1					
ANR	1290754	IdentifierDeclStatement	int first ;	962:16:39983:39992	1287708	1	True				
ANR	1290755	IdentifierDecl	first		1287708	0					
ANR	1290756	IdentifierDeclType	int		1287708	0					
ANR	1290757	Identifier	first		1287708	1					
ANR	1290758	IdentifierDeclStatement	pl_ptr lptr ;	963:16:40010:40021	1287708	2	True				
ANR	1290759	IdentifierDecl	lptr		1287708	0					
ANR	1290760	IdentifierDeclType	pl_ptr		1287708	0					
ANR	1290761	Identifier	lptr		1287708	1					
ANR	1290762	IdentifierDeclStatement	bool ensure_closed ;	964:16:40039:40057	1287708	3	True				
ANR	1290763	IdentifierDecl	ensure_closed		1287708	0					
ANR	1290764	IdentifierDeclType	bool		1287708	0					
ANR	1290765	Identifier	ensure_closed		1287708	1					
ANR	1290766	IfStatement	if ( join == gs_join_none )		1287708	4					
ANR	1290767	Condition	join == gs_join_none	966:20:40080:40099	1287708	0	True				
ANR	1290768	EqualityExpression	join == gs_join_none		1287708	0		==			
ANR	1290769	Identifier	join		1287708	0					
ANR	1290770	Identifier	gs_join_none		1287708	1					
ANR	1290771	CompoundStatement		544:42:23607:23607	1287708	1					
ANR	1290772	ExpressionStatement	first = 0	969:20:40235:40244	1287708	0	True				
ANR	1290773	AssignmentExpression	first = 0		1287708	0		=			
ANR	1290774	Identifier	first		1287708	0					
ANR	1290775	PrimaryExpression	0		1287708	1					
ANR	1290776	ExpressionStatement	lptr = 0	970:20:40266:40274	1287708	1	True				
ANR	1290777	AssignmentExpression	lptr = 0		1287708	0		=			
ANR	1290778	Identifier	lptr		1287708	0					
ANR	1290779	PrimaryExpression	0		1287708	1					
ANR	1290780	ExpressionStatement	index = 1	971:20:40296:40305	1287708	2	True				
ANR	1290781	AssignmentExpression	index = 1		1287708	0		=			
ANR	1290782	Identifier	index		1287708	0					
ANR	1290783	PrimaryExpression	1		1287708	1					
ANR	1290784	ElseStatement	else		1287708	0					
ANR	1290785	CompoundStatement		550:23:23835:23835	1287708	0					
ANR	1290786	ExpressionStatement	first = ( is_closed ? 1 : index - 2 )	973:20:40352:40387	1287708	0	True				
ANR	1290787	AssignmentExpression	first = ( is_closed ? 1 : index - 2 )		1287708	0		=			
ANR	1290788	Identifier	first		1287708	0					
ANR	1290789	ConditionalExpression	is_closed ? 1 : index - 2		1287708	1					
ANR	1290790	Condition	is_closed		1287708	0					
ANR	1290791	Identifier	is_closed		1287708	0					
ANR	1290792	PrimaryExpression	1		1287708	1					
ANR	1290793	AdditiveExpression	index - 2		1287708	2		-			
ANR	1290794	Identifier	index		1287708	0					
ANR	1290795	PrimaryExpression	2		1287708	1					
ANR	1290796	ExpressionStatement	lptr = & pl	974:20:40409:40419	1287708	1	True				
ANR	1290797	AssignmentExpression	lptr = & pl		1287708	0		=			
ANR	1290798	Identifier	lptr		1287708	0					
ANR	1290799	UnaryOperationExpression	& pl		1287708	1					
ANR	1290800	UnaryOperator	&		1287708	0					
ANR	1290801	Identifier	pl		1287708	1					
ANR	1290802	IfStatement	if ( is_dash_segment )		1287708	5					
ANR	1290803	Condition	is_dash_segment	977:20:40493:40507	1287708	0	True				
ANR	1290804	Identifier	is_dash_segment		1287708	0					
ANR	1290805	ExpressionStatement	lptr = NULL	978:20:40565:40576	1287708	1	True				
ANR	1290806	AssignmentExpression	lptr = NULL		1287708	0		=			
ANR	1290807	Identifier	lptr		1287708	0					
ANR	1290808	Identifier	NULL		1287708	1					
ANR	1290809	IfStatement	if ( pseg -> type == s_gap )		1287708	6					
ANR	1290810	Condition	pseg -> type == s_gap	980:20:40605:40623	1287708	0	True				
ANR	1290811	EqualityExpression	pseg -> type == s_gap		1287708	0		==			
ANR	1290812	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1290813	Identifier	pseg		1287708	0					
ANR	1290814	Identifier	type		1287708	1					
ANR	1290815	Identifier	s_gap		1287708	1					
ANR	1290816	CompoundStatement		559:16:24147:24147	1287708	1					
ANR	1290817	ExpressionStatement	lptr = NULL	982:20:40664:40675	1287708	0	True				
ANR	1290818	AssignmentExpression	lptr = NULL		1287708	0		=			
ANR	1290819	Identifier	lptr		1287708	0					
ANR	1290820	Identifier	NULL		1287708	1					
ANR	1290821	ExpressionStatement	index = 0	985:20:40834:40843	1287708	1	True				
ANR	1290822	AssignmentExpression	index = 0		1287708	0		=			
ANR	1290823	Identifier	index		1287708	0					
ANR	1290824	PrimaryExpression	0		1287708	1					
ANR	1290825	ExpressionStatement	ensure_closed = ( ( to_path == & stroke_path_body && lop_is_idempotent ( pgs -> log_op ) ) || ( lptr == NULL ? true : lptr -> thin ) )	988:16:40880:41067	1287708	7	True				
ANR	1290826	AssignmentExpression	ensure_closed = ( ( to_path == & stroke_path_body && lop_is_idempotent ( pgs -> log_op ) ) || ( lptr == NULL ? true : lptr -> thin ) )		1287708	0		=			
ANR	1290827	Identifier	ensure_closed		1287708	0					
ANR	1290828	OrExpression	( to_path == & stroke_path_body && lop_is_idempotent ( pgs -> log_op ) ) || ( lptr == NULL ? true : lptr -> thin )		1287708	1		||			
ANR	1290829	AndExpression	to_path == & stroke_path_body && lop_is_idempotent ( pgs -> log_op )		1287708	0		&&			
ANR	1290830	EqualityExpression	to_path == & stroke_path_body		1287708	0		==			
ANR	1290831	Identifier	to_path		1287708	0					
ANR	1290832	UnaryOperationExpression	& stroke_path_body		1287708	1					
ANR	1290833	UnaryOperator	&		1287708	0					
ANR	1290834	Identifier	stroke_path_body		1287708	1					
ANR	1290835	CallExpression	lop_is_idempotent ( pgs -> log_op )		1287708	1					
ANR	1290836	Callee	lop_is_idempotent		1287708	0					
ANR	1290837	Identifier	lop_is_idempotent		1287708	0					
ANR	1290838	ArgumentList	pgs -> log_op		1287708	1					
ANR	1290839	Argument	pgs -> log_op		1287708	0					
ANR	1290840	PtrMemberAccess	pgs -> log_op		1287708	0					
ANR	1290841	Identifier	pgs		1287708	0					
ANR	1290842	Identifier	log_op		1287708	1					
ANR	1290843	ConditionalExpression	lptr == NULL ? true : lptr -> thin		1287708	1					
ANR	1290844	Condition	lptr == NULL		1287708	0					
ANR	1290845	EqualityExpression	lptr == NULL		1287708	0		==			
ANR	1290846	Identifier	lptr		1287708	0					
ANR	1290847	Identifier	NULL		1287708	1					
ANR	1290848	Identifier	true		1287708	1					
ANR	1290849	PtrMemberAccess	lptr -> thin		1287708	2					
ANR	1290850	Identifier	lptr		1287708	0					
ANR	1290851	Identifier	thin		1287708	1					
ANR	1290852	ExpressionStatement	"code = ( * line_proc ) ( to_path , to_path_reverse , ensure_closed , first , & pl_prev , lptr , pdevc , dev , pgs , params , & cbox , uniform , join , initial_matrix_reflected , COMBINE_FLAGS ( flags ) )"	993:16:41206:41533	1287708	8	True				
ANR	1290853	AssignmentExpression	"code = ( * line_proc ) ( to_path , to_path_reverse , ensure_closed , first , & pl_prev , lptr , pdevc , dev , pgs , params , & cbox , uniform , join , initial_matrix_reflected , COMBINE_FLAGS ( flags ) )"		1287708	0		=			
ANR	1290854	Identifier	code		1287708	0					
ANR	1290855	CallExpression	"( * line_proc ) ( to_path , to_path_reverse , ensure_closed , first , & pl_prev , lptr , pdevc , dev , pgs , params , & cbox , uniform , join , initial_matrix_reflected , COMBINE_FLAGS ( flags ) )"		1287708	1					
ANR	1290856	Callee	* line_proc		1287708	0					
ANR	1290857	UnaryOperationExpression	* line_proc		1287708	0					
ANR	1290858	UnaryOperator	*		1287708	0					
ANR	1290859	Identifier	line_proc		1287708	1					
ANR	1290860	ArgumentList	to_path		1287708	1					
ANR	1290861	Argument	to_path		1287708	0					
ANR	1290862	Identifier	to_path		1287708	0					
ANR	1290863	Argument	to_path_reverse		1287708	1					
ANR	1290864	Identifier	to_path_reverse		1287708	0					
ANR	1290865	Argument	ensure_closed		1287708	2					
ANR	1290866	Identifier	ensure_closed		1287708	0					
ANR	1290867	Argument	first		1287708	3					
ANR	1290868	Identifier	first		1287708	0					
ANR	1290869	Argument	& pl_prev		1287708	4					
ANR	1290870	UnaryOperationExpression	& pl_prev		1287708	0					
ANR	1290871	UnaryOperator	&		1287708	0					
ANR	1290872	Identifier	pl_prev		1287708	1					
ANR	1290873	Argument	lptr		1287708	5					
ANR	1290874	Identifier	lptr		1287708	0					
ANR	1290875	Argument	pdevc		1287708	6					
ANR	1290876	Identifier	pdevc		1287708	0					
ANR	1290877	Argument	dev		1287708	7					
ANR	1290878	Identifier	dev		1287708	0					
ANR	1290879	Argument	pgs		1287708	8					
ANR	1290880	Identifier	pgs		1287708	0					
ANR	1290881	Argument	params		1287708	9					
ANR	1290882	Identifier	params		1287708	0					
ANR	1290883	Argument	& cbox		1287708	10					
ANR	1290884	UnaryOperationExpression	& cbox		1287708	0					
ANR	1290885	UnaryOperator	&		1287708	0					
ANR	1290886	Identifier	cbox		1287708	1					
ANR	1290887	Argument	uniform		1287708	11					
ANR	1290888	Identifier	uniform		1287708	0					
ANR	1290889	Argument	join		1287708	12					
ANR	1290890	Identifier	join		1287708	0					
ANR	1290891	Argument	initial_matrix_reflected		1287708	13					
ANR	1290892	Identifier	initial_matrix_reflected		1287708	0					
ANR	1290893	Argument	COMBINE_FLAGS ( flags )		1287708	14					
ANR	1290894	CallExpression	COMBINE_FLAGS ( flags )		1287708	0					
ANR	1290895	Callee	COMBINE_FLAGS		1287708	0					
ANR	1290896	Identifier	COMBINE_FLAGS		1287708	0					
ANR	1290897	ArgumentList	flags		1287708	1					
ANR	1290898	Argument	flags		1287708	0					
ANR	1290899	Identifier	flags		1287708	0					
ANR	1290900	IfStatement	if ( code < 0 )		1287708	9					
ANR	1290901	Condition	code < 0	998:20:41555:41562	1287708	0	True				
ANR	1290902	RelationalExpression	code < 0		1287708	0		<			
ANR	1290903	Identifier	code		1287708	0					
ANR	1290904	PrimaryExpression	0		1287708	1					
ANR	1290905	GotoStatement	goto exit ;	999:20:41585:41594	1287708	1	True				
ANR	1290906	Identifier	exit		1287708	0					
ANR	1290907	ExpressionStatement	"FILL_STROKE_PATH ( pdev , always_thin , pcpath , false )"	1000:16:41612:41662	1287708	10	True				
ANR	1290908	CallExpression	"FILL_STROKE_PATH ( pdev , always_thin , pcpath , false )"		1287708	0					
ANR	1290909	Callee	FILL_STROKE_PATH		1287708	0					
ANR	1290910	Identifier	FILL_STROKE_PATH		1287708	0					
ANR	1290911	ArgumentList	pdev		1287708	1					
ANR	1290912	Argument	pdev		1287708	0					
ANR	1290913	Identifier	pdev		1287708	0					
ANR	1290914	Argument	always_thin		1287708	1					
ANR	1290915	Identifier	always_thin		1287708	0					
ANR	1290916	Argument	pcpath		1287708	2					
ANR	1290917	Identifier	pcpath		1287708	0					
ANR	1290918	Argument	false		1287708	3					
ANR	1290919	Identifier	false		1287708	0					
ANR	1290920	ElseStatement	else		1287708	0					
ANR	1290921	IfStatement	if ( pseg -> type == s_gap )		1287708	0					
ANR	1290922	Condition	pseg -> type == s_gap	1001:23:41687:41705	1287708	0	True				
ANR	1290923	EqualityExpression	pseg -> type == s_gap		1287708	0		==			
ANR	1290924	PtrMemberAccess	pseg -> type		1287708	0					
ANR	1290925	Identifier	pseg		1287708	0					
ANR	1290926	Identifier	type		1287708	1					
ANR	1290927	Identifier	s_gap		1287708	1					
ANR	1290928	CompoundStatement		579:44:25213:25213	1287708	1					
ANR	1290929	ExpressionStatement	index = 0	1004:16:41834:41843	1287708	0	True				
ANR	1290930	AssignmentExpression	index = 0		1287708	0		=			
ANR	1290931	Identifier	index		1287708	0					
ANR	1290932	PrimaryExpression	0		1287708	1					
ANR	1290933	ElseStatement	else		1287708	0					
ANR	1290934	ExpressionStatement	pl_first = pl	1006:16:41880:41893	1287708	0	True				
ANR	1290935	AssignmentExpression	pl_first = pl		1287708	0		=			
ANR	1290936	Identifier	pl_first		1287708	0					
ANR	1290937	Identifier	pl		1287708	1					
ANR	1290938	ExpressionStatement	pl_prev = pl	1007:12:41907:41919	1287708	17	True				
ANR	1290939	AssignmentExpression	pl_prev = pl		1287708	0		=			
ANR	1290940	Identifier	pl_prev		1287708	0					
ANR	1290941	Identifier	pl		1287708	1					
ANR	1290942	ExpressionStatement	"x = sx , y = sy"	1008:12:41933:41947	1287708	18	True				
ANR	1290943	Expression	"x = sx , y = sy"		1287708	0					
ANR	1290944	AssignmentExpression	x = sx		1287708	0		=			
ANR	1290945	Identifier	x		1287708	0					
ANR	1290946	Identifier	sx		1287708	1					
ANR	1290947	AssignmentExpression	y = sy		1287708	1		=			
ANR	1290948	Identifier	y		1287708	0					
ANR	1290949	Identifier	sy		1287708	1					
ANR	1290950	ExpressionStatement	flags = ( flags << 4 ) | nf_all_from_arc	1009:12:41961:41997	1287708	19	True				
ANR	1290951	AssignmentExpression	flags = ( flags << 4 ) | nf_all_from_arc		1287708	0		=			
ANR	1290952	Identifier	flags		1287708	0					
ANR	1290953	InclusiveOrExpression	( flags << 4 ) | nf_all_from_arc		1287708	1		|			
ANR	1290954	ShiftExpression	flags << 4		1287708	0		<<			
ANR	1290955	Identifier	flags		1287708	0					
ANR	1290956	PrimaryExpression	4		1287708	1					
ANR	1290957	Identifier	nf_all_from_arc		1287708	1					
ANR	1290958	IfStatement	if ( index )		1287708	10					
ANR	1290959	Condition	index	1011:12:42021:42025	1287708	0	True				
ANR	1290960	Identifier	index		1287708	0					
ANR	1290961	CompoundStatement		599:12:26040:26173	1287708	1					
ANR	1290962	IdentifierDeclStatement	segment_notes notes = ( pseg == 0 ? ( const segment * ) spath -> first_subpath : pseg ) -> notes ;	1013:12:42101:42258	1287708	0	True				
ANR	1290963	IdentifierDecl	notes = ( pseg == 0 ? ( const segment * ) spath -> first_subpath : pseg ) -> notes		1287708	0					
ANR	1290964	IdentifierDeclType	segment_notes		1287708	0					
ANR	1290965	Identifier	notes		1287708	1					
ANR	1290966	AssignmentExpression	notes = ( pseg == 0 ? ( const segment * ) spath -> first_subpath : pseg ) -> notes		1287708	2		=			
ANR	1290967	Identifier	notes		1287708	0					
ANR	1290968	PtrMemberAccess	( pseg == 0 ? ( const segment * ) spath -> first_subpath : pseg ) -> notes		1287708	1					
ANR	1290969	ConditionalExpression	pseg == 0 ? ( const segment * ) spath -> first_subpath : pseg		1287708	0					
ANR	1290970	Condition	pseg == 0		1287708	0					
ANR	1290971	EqualityExpression	pseg == 0		1287708	0		==			
ANR	1290972	Identifier	pseg		1287708	0					
ANR	1290973	PrimaryExpression	0		1287708	1					
ANR	1290974	CastExpression	( const segment * ) spath -> first_subpath		1287708	1					
ANR	1290975	CastTarget	const segment *		1287708	0					
ANR	1290976	PtrMemberAccess	spath -> first_subpath		1287708	1					
ANR	1290977	Identifier	spath		1287708	0					
ANR	1290978	Identifier	first_subpath		1287708	1					
ANR	1290979	Identifier	pseg		1287708	2					
ANR	1290980	Identifier	notes		1287708	1					
ANR	1290981	IdentifierDeclStatement	gs_line_join join = ( notes & not_first ? curve_join : pgs_lp -> join ) ;	1016:12:42272:42372	1287708	1	True				
ANR	1290982	IdentifierDecl	join = ( notes & not_first ? curve_join : pgs_lp -> join )		1287708	0					
ANR	1290983	IdentifierDeclType	gs_line_join		1287708	0					
ANR	1290984	Identifier	join		1287708	1					
ANR	1290985	AssignmentExpression	join = ( notes & not_first ? curve_join : pgs_lp -> join )		1287708	2		=			
ANR	1290986	Identifier	join		1287708	0					
ANR	1290987	ConditionalExpression	notes & not_first ? curve_join : pgs_lp -> join		1287708	1					
ANR	1290988	Condition	notes & not_first		1287708	0					
ANR	1290989	BitAndExpression	notes & not_first		1287708	0		&			
ANR	1290990	Identifier	notes		1287708	0					
ANR	1290991	Identifier	not_first		1287708	1					
ANR	1290992	Identifier	curve_join		1287708	1					
ANR	1290993	PtrMemberAccess	pgs_lp -> join		1287708	2					
ANR	1290994	Identifier	pgs_lp		1287708	0					
ANR	1290995	Identifier	join		1287708	1					
ANR	1290996	IdentifierDeclStatement	gs_line_cap cap ;	1018:12:42386:42401	1287708	2	True				
ANR	1290997	IdentifierDecl	cap		1287708	0					
ANR	1290998	IdentifierDeclType	gs_line_cap		1287708	0					
ANR	1290999	Identifier	cap		1287708	1					
ANR	1291000	IdentifierDeclStatement	pl_ptr lptr = ( ! is_closed || join == gs_join_none || zero_length ? ( pl_ptr ) 0 : ( pl_ptr ) & pl_first ) ;	1021:12:42535:42668	1287708	3	True				
ANR	1291001	IdentifierDecl	lptr = ( ! is_closed || join == gs_join_none || zero_length ? ( pl_ptr ) 0 : ( pl_ptr ) & pl_first )		1287708	0					
ANR	1291002	IdentifierDeclType	pl_ptr		1287708	0					
ANR	1291003	Identifier	lptr		1287708	1					
ANR	1291004	AssignmentExpression	lptr = ( ! is_closed || join == gs_join_none || zero_length ? ( pl_ptr ) 0 : ( pl_ptr ) & pl_first )		1287708	2		=			
ANR	1291005	Identifier	lptr		1287708	0					
ANR	1291006	ConditionalExpression	! is_closed || join == gs_join_none || zero_length ? ( pl_ptr ) 0 : ( pl_ptr ) & pl_first		1287708	1					
ANR	1291007	Condition	! is_closed || join == gs_join_none || zero_length		1287708	0					
ANR	1291008	OrExpression	! is_closed || join == gs_join_none || zero_length		1287708	0		||			
ANR	1291009	UnaryOperationExpression	! is_closed		1287708	0					
ANR	1291010	UnaryOperator	!		1287708	0					
ANR	1291011	Identifier	is_closed		1287708	1					
ANR	1291012	OrExpression	join == gs_join_none || zero_length		1287708	1		||			
ANR	1291013	EqualityExpression	join == gs_join_none		1287708	0		==			
ANR	1291014	Identifier	join		1287708	0					
ANR	1291015	Identifier	gs_join_none		1287708	1					
ANR	1291016	Identifier	zero_length		1287708	1					
ANR	1291017	CastExpression	( pl_ptr ) 0		1287708	1					
ANR	1291018	CastTarget	pl_ptr		1287708	0					
ANR	1291019	PrimaryExpression	0		1287708	1					
ANR	1291020	CastExpression	( pl_ptr ) & pl_first		1287708	2					
ANR	1291021	CastTarget	pl_ptr		1287708	0					
ANR	1291022	UnaryOperationExpression	& pl_first		1287708	1					
ANR	1291023	UnaryOperator	&		1287708	0					
ANR	1291024	Identifier	pl_first		1287708	1					
ANR	1291025	IfStatement	if ( lptr && psub -> type == s_dash )		1287708	4					
ANR	1291026	Condition	lptr && psub -> type == s_dash	1026:16:42721:42748	1287708	0	True				
ANR	1291027	AndExpression	lptr && psub -> type == s_dash		1287708	0		&&			
ANR	1291028	Identifier	lptr		1287708	0					
ANR	1291029	EqualityExpression	psub -> type == s_dash		1287708	1		==			
ANR	1291030	PtrMemberAccess	psub -> type		1287708	0					
ANR	1291031	Identifier	psub		1287708	0					
ANR	1291032	Identifier	type		1287708	1					
ANR	1291033	Identifier	s_dash		1287708	1					
ANR	1291034	ExpressionStatement	lptr = NULL	1027:16:42767:42778	1287708	1	True				
ANR	1291035	AssignmentExpression	lptr = NULL		1287708	0		=			
ANR	1291036	Identifier	lptr		1287708	0					
ANR	1291037	Identifier	NULL		1287708	1					
ANR	1291038	IfStatement	if ( lptr && psub -> type == s_start && psub -> next && psub -> next -> type == s_gap )		1287708	5					
ANR	1291039	Condition	lptr && psub -> type == s_start && psub -> next && psub -> next -> type == s_gap	1030:16:42877:42948	1287708	0	True				
ANR	1291040	AndExpression	lptr && psub -> type == s_start && psub -> next && psub -> next -> type == s_gap		1287708	0		&&			
ANR	1291041	Identifier	lptr		1287708	0					
ANR	1291042	AndExpression	psub -> type == s_start && psub -> next && psub -> next -> type == s_gap		1287708	1		&&			
ANR	1291043	EqualityExpression	psub -> type == s_start		1287708	0		==			
ANR	1291044	PtrMemberAccess	psub -> type		1287708	0					
ANR	1291045	Identifier	psub		1287708	0					
ANR	1291046	Identifier	type		1287708	1					
ANR	1291047	Identifier	s_start		1287708	1					
ANR	1291048	AndExpression	psub -> next && psub -> next -> type == s_gap		1287708	1		&&			
ANR	1291049	PtrMemberAccess	psub -> next		1287708	0					
ANR	1291050	Identifier	psub		1287708	0					
ANR	1291051	Identifier	next		1287708	1					
ANR	1291052	EqualityExpression	psub -> next -> type == s_gap		1287708	1		==			
ANR	1291053	PtrMemberAccess	psub -> next -> type		1287708	0					
ANR	1291054	PtrMemberAccess	psub -> next		1287708	0					
ANR	1291055	Identifier	psub		1287708	0					
ANR	1291056	Identifier	next		1287708	1					
ANR	1291057	Identifier	type		1287708	1					
ANR	1291058	Identifier	s_gap		1287708	1					
ANR	1291059	ExpressionStatement	lptr = NULL	1031:16:42967:42978	1287708	1	True				
ANR	1291060	AssignmentExpression	lptr = NULL		1287708	0		=			
ANR	1291061	Identifier	lptr		1287708	0					
ANR	1291062	Identifier	NULL		1287708	1					
ANR	1291063	ExpressionStatement	flags = ( ( ( notes & sn_not_first ) ? ( ( flags & nf_all_from_arc ) | nf_some_from_arc ) : 0 ) | ( ( notes & sn_dash_head ) ? nf_dash_head : 0 ) | ( ( notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc ) )	1033:12:42993:43286	1287708	6	True				
ANR	1291064	AssignmentExpression	flags = ( ( ( notes & sn_not_first ) ? ( ( flags & nf_all_from_arc ) | nf_some_from_arc ) : 0 ) | ( ( notes & sn_dash_head ) ? nf_dash_head : 0 ) | ( ( notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc ) )		1287708	0		=			
ANR	1291065	Identifier	flags		1287708	0					
ANR	1291066	InclusiveOrExpression	( ( notes & sn_not_first ) ? ( ( flags & nf_all_from_arc ) | nf_some_from_arc ) : 0 ) | ( ( notes & sn_dash_head ) ? nf_dash_head : 0 ) | ( ( notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc )		1287708	1		|			
ANR	1291067	ConditionalExpression	( notes & sn_not_first ) ? ( ( flags & nf_all_from_arc ) | nf_some_from_arc ) : 0		1287708	0					
ANR	1291068	Condition	notes & sn_not_first		1287708	0					
ANR	1291069	BitAndExpression	notes & sn_not_first		1287708	0		&			
ANR	1291070	Identifier	notes		1287708	0					
ANR	1291071	Identifier	sn_not_first		1287708	1					
ANR	1291072	InclusiveOrExpression	( flags & nf_all_from_arc ) | nf_some_from_arc		1287708	1		|			
ANR	1291073	BitAndExpression	flags & nf_all_from_arc		1287708	0		&			
ANR	1291074	Identifier	flags		1287708	0					
ANR	1291075	Identifier	nf_all_from_arc		1287708	1					
ANR	1291076	Identifier	nf_some_from_arc		1287708	1					
ANR	1291077	PrimaryExpression	0		1287708	2					
ANR	1291078	InclusiveOrExpression	( ( notes & sn_dash_head ) ? nf_dash_head : 0 ) | ( ( notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc )		1287708	1		|			
ANR	1291079	ConditionalExpression	( notes & sn_dash_head ) ? nf_dash_head : 0		1287708	0					
ANR	1291080	Condition	notes & sn_dash_head		1287708	0					
ANR	1291081	BitAndExpression	notes & sn_dash_head		1287708	0		&			
ANR	1291082	Identifier	notes		1287708	0					
ANR	1291083	Identifier	sn_dash_head		1287708	1					
ANR	1291084	Identifier	nf_dash_head		1287708	1					
ANR	1291085	PrimaryExpression	0		1287708	2					
ANR	1291086	InclusiveOrExpression	( ( notes & sn_dash_tail ) ? nf_dash_tail : 0 ) | ( flags & ~nf_all_from_arc )		1287708	1		|			
ANR	1291087	ConditionalExpression	( notes & sn_dash_tail ) ? nf_dash_tail : 0		1287708	0					
ANR	1291088	Condition	notes & sn_dash_tail		1287708	0					
ANR	1291089	BitAndExpression	notes & sn_dash_tail		1287708	0		&			
ANR	1291090	Identifier	notes		1287708	0					
ANR	1291091	Identifier	sn_dash_tail		1287708	1					
ANR	1291092	Identifier	nf_dash_tail		1287708	1					
ANR	1291093	PrimaryExpression	0		1287708	2					
ANR	1291094	BitAndExpression	flags & ~nf_all_from_arc		1287708	1		&			
ANR	1291095	Identifier	flags		1287708	0					
ANR	1291096	Identifier	~nf_all_from_arc		1287708	1					
ANR	1291097	ExpressionStatement	"code = ( * line_proc ) ( to_path , to_path_reverse , true , index - 1 , & pl_prev , lptr , pdevc , dev , pgs , params , & cbox , uniform , join , initial_matrix_reflected , COMBINE_FLAGS ( flags ) )"	1038:12:43300:43606	1287708	7	True				
ANR	1291098	AssignmentExpression	"code = ( * line_proc ) ( to_path , to_path_reverse , true , index - 1 , & pl_prev , lptr , pdevc , dev , pgs , params , & cbox , uniform , join , initial_matrix_reflected , COMBINE_FLAGS ( flags ) )"		1287708	0		=			
ANR	1291099	Identifier	code		1287708	0					
ANR	1291100	CallExpression	"( * line_proc ) ( to_path , to_path_reverse , true , index - 1 , & pl_prev , lptr , pdevc , dev , pgs , params , & cbox , uniform , join , initial_matrix_reflected , COMBINE_FLAGS ( flags ) )"		1287708	1					
ANR	1291101	Callee	* line_proc		1287708	0					
ANR	1291102	UnaryOperationExpression	* line_proc		1287708	0					
ANR	1291103	UnaryOperator	*		1287708	0					
ANR	1291104	Identifier	line_proc		1287708	1					
ANR	1291105	ArgumentList	to_path		1287708	1					
ANR	1291106	Argument	to_path		1287708	0					
ANR	1291107	Identifier	to_path		1287708	0					
ANR	1291108	Argument	to_path_reverse		1287708	1					
ANR	1291109	Identifier	to_path_reverse		1287708	0					
ANR	1291110	Argument	true		1287708	2					
ANR	1291111	Identifier	true		1287708	0					
ANR	1291112	Argument	index - 1		1287708	3					
ANR	1291113	AdditiveExpression	index - 1		1287708	0		-			
ANR	1291114	Identifier	index		1287708	0					
ANR	1291115	PrimaryExpression	1		1287708	1					
ANR	1291116	Argument	& pl_prev		1287708	4					
ANR	1291117	UnaryOperationExpression	& pl_prev		1287708	0					
ANR	1291118	UnaryOperator	&		1287708	0					
ANR	1291119	Identifier	pl_prev		1287708	1					
ANR	1291120	Argument	lptr		1287708	5					
ANR	1291121	Identifier	lptr		1287708	0					
ANR	1291122	Argument	pdevc		1287708	6					
ANR	1291123	Identifier	pdevc		1287708	0					
ANR	1291124	Argument	dev		1287708	7					
ANR	1291125	Identifier	dev		1287708	0					
ANR	1291126	Argument	pgs		1287708	8					
ANR	1291127	Identifier	pgs		1287708	0					
ANR	1291128	Argument	params		1287708	9					
ANR	1291129	Identifier	params		1287708	0					
ANR	1291130	Argument	& cbox		1287708	10					
ANR	1291131	UnaryOperationExpression	& cbox		1287708	0					
ANR	1291132	UnaryOperator	&		1287708	0					
ANR	1291133	Identifier	cbox		1287708	1					
ANR	1291134	Argument	uniform		1287708	11					
ANR	1291135	Identifier	uniform		1287708	0					
ANR	1291136	Argument	join		1287708	12					
ANR	1291137	Identifier	join		1287708	0					
ANR	1291138	Argument	initial_matrix_reflected		1287708	13					
ANR	1291139	Identifier	initial_matrix_reflected		1287708	0					
ANR	1291140	Argument	COMBINE_FLAGS ( flags )		1287708	14					
ANR	1291141	CallExpression	COMBINE_FLAGS ( flags )		1287708	0					
ANR	1291142	Callee	COMBINE_FLAGS		1287708	0					
ANR	1291143	Identifier	COMBINE_FLAGS		1287708	0					
ANR	1291144	ArgumentList	flags		1287708	1					
ANR	1291145	Argument	flags		1287708	0					
ANR	1291146	Identifier	flags		1287708	0					
ANR	1291147	IfStatement	if ( code < 0 )		1287708	8					
ANR	1291148	Condition	code < 0	1043:16:43624:43631	1287708	0	True				
ANR	1291149	RelationalExpression	code < 0		1287708	0		<			
ANR	1291150	Identifier	code		1287708	0					
ANR	1291151	PrimaryExpression	0		1287708	1					
ANR	1291152	GotoStatement	goto exit ;	1044:16:43650:43659	1287708	1	True				
ANR	1291153	Identifier	exit		1287708	0					
ANR	1291154	ExpressionStatement	"FILL_STROKE_PATH ( pdev , always_thin , pcpath , false )"	1045:12:43673:43723	1287708	9	True				
ANR	1291155	CallExpression	"FILL_STROKE_PATH ( pdev , always_thin , pcpath , false )"		1287708	0					
ANR	1291156	Callee	FILL_STROKE_PATH		1287708	0					
ANR	1291157	Identifier	FILL_STROKE_PATH		1287708	0					
ANR	1291158	ArgumentList	pdev		1287708	1					
ANR	1291159	Argument	pdev		1287708	0					
ANR	1291160	Identifier	pdev		1287708	0					
ANR	1291161	Argument	always_thin		1287708	1					
ANR	1291162	Identifier	always_thin		1287708	0					
ANR	1291163	Argument	pcpath		1287708	2					
ANR	1291164	Identifier	pcpath		1287708	0					
ANR	1291165	Argument	false		1287708	3					
ANR	1291166	Identifier	false		1287708	0					
ANR	1291167	ExpressionStatement	cap = ( ( flags & nf_prev_dash_head ) ? pgs_lp -> start_cap : pgs_lp -> dash_cap )	1046:12:43737:43830	1287708	10	True				
ANR	1291168	AssignmentExpression	cap = ( ( flags & nf_prev_dash_head ) ? pgs_lp -> start_cap : pgs_lp -> dash_cap )		1287708	0		=			
ANR	1291169	Identifier	cap		1287708	0					
ANR	1291170	ConditionalExpression	( flags & nf_prev_dash_head ) ? pgs_lp -> start_cap : pgs_lp -> dash_cap		1287708	1					
ANR	1291171	Condition	flags & nf_prev_dash_head		1287708	0					
ANR	1291172	BitAndExpression	flags & nf_prev_dash_head		1287708	0		&			
ANR	1291173	Identifier	flags		1287708	0					
ANR	1291174	Identifier	nf_prev_dash_head		1287708	1					
ANR	1291175	PtrMemberAccess	pgs_lp -> start_cap		1287708	1					
ANR	1291176	Identifier	pgs_lp		1287708	0					
ANR	1291177	Identifier	start_cap		1287708	1					
ANR	1291178	PtrMemberAccess	pgs_lp -> dash_cap		1287708	2					
ANR	1291179	Identifier	pgs_lp		1287708	0					
ANR	1291180	Identifier	dash_cap		1287708	1					
ANR	1291181	IfStatement	if ( traditional && lptr == 0 && cap != gs_cap_butt )		1287708	11					
ANR	1291182	Condition	traditional && lptr == 0 && cap != gs_cap_butt	1048:16:43848:43893	1287708	0	True				
ANR	1291183	AndExpression	traditional && lptr == 0 && cap != gs_cap_butt		1287708	0		&&			
ANR	1291184	Identifier	traditional		1287708	0					
ANR	1291185	AndExpression	lptr == 0 && cap != gs_cap_butt		1287708	1		&&			
ANR	1291186	EqualityExpression	lptr == 0		1287708	0		==			
ANR	1291187	Identifier	lptr		1287708	0					
ANR	1291188	PrimaryExpression	0		1287708	1					
ANR	1291189	EqualityExpression	cap != gs_cap_butt		1287708	1		!=			
ANR	1291190	Identifier	cap		1287708	0					
ANR	1291191	Identifier	gs_cap_butt		1287708	1					
ANR	1291192	CompoundStatement		626:64:27401:27401	1287708	1					
ANR	1291193	ExpressionStatement	"code = stroke_add_initial_cap_compat ( to_path , & pl_first , index == 1 , pdevc , dev , pgs )"	1050:16:43968:44053	1287708	0	True				
ANR	1291194	AssignmentExpression	"code = stroke_add_initial_cap_compat ( to_path , & pl_first , index == 1 , pdevc , dev , pgs )"		1287708	0		=			
ANR	1291195	Identifier	code		1287708	0					
ANR	1291196	CallExpression	"stroke_add_initial_cap_compat ( to_path , & pl_first , index == 1 , pdevc , dev , pgs )"		1287708	1					
ANR	1291197	Callee	stroke_add_initial_cap_compat		1287708	0					
ANR	1291198	Identifier	stroke_add_initial_cap_compat		1287708	0					
ANR	1291199	ArgumentList	to_path		1287708	1					
ANR	1291200	Argument	to_path		1287708	0					
ANR	1291201	Identifier	to_path		1287708	0					
ANR	1291202	Argument	& pl_first		1287708	1					
ANR	1291203	UnaryOperationExpression	& pl_first		1287708	0					
ANR	1291204	UnaryOperator	&		1287708	0					
ANR	1291205	Identifier	pl_first		1287708	1					
ANR	1291206	Argument	index == 1		1287708	2					
ANR	1291207	EqualityExpression	index == 1		1287708	0		==			
ANR	1291208	Identifier	index		1287708	0					
ANR	1291209	PrimaryExpression	1		1287708	1					
ANR	1291210	Argument	pdevc		1287708	3					
ANR	1291211	Identifier	pdevc		1287708	0					
ANR	1291212	Argument	dev		1287708	4					
ANR	1291213	Identifier	dev		1287708	0					
ANR	1291214	Argument	pgs		1287708	5					
ANR	1291215	Identifier	pgs		1287708	0					
ANR	1291216	IfStatement	if ( code < 0 )		1287708	1					
ANR	1291217	Condition	code < 0	1051:20:44075:44082	1287708	0	True				
ANR	1291218	RelationalExpression	code < 0		1287708	0		<			
ANR	1291219	Identifier	code		1287708	0					
ANR	1291220	PrimaryExpression	0		1287708	1					
ANR	1291221	GotoStatement	goto exit ;	1052:20:44105:44114	1287708	1	True				
ANR	1291222	Identifier	exit		1287708	0					
ANR	1291223	ExpressionStatement	"FILL_STROKE_PATH ( pdev , always_thin , pcpath , false )"	1053:16:44132:44182	1287708	2	True				
ANR	1291224	CallExpression	"FILL_STROKE_PATH ( pdev , always_thin , pcpath , false )"		1287708	0					
ANR	1291225	Callee	FILL_STROKE_PATH		1287708	0					
ANR	1291226	Identifier	FILL_STROKE_PATH		1287708	0					
ANR	1291227	ArgumentList	pdev		1287708	1					
ANR	1291228	Argument	pdev		1287708	0					
ANR	1291229	Identifier	pdev		1287708	0					
ANR	1291230	Argument	always_thin		1287708	1					
ANR	1291231	Identifier	always_thin		1287708	0					
ANR	1291232	Argument	pcpath		1287708	2					
ANR	1291233	Identifier	pcpath		1287708	0					
ANR	1291234	Argument	false		1287708	3					
ANR	1291235	Identifier	false		1287708	0					
ANR	1291236	ExpressionStatement	psub = ( const subpath * ) pseg	1056:8:44216:44244	1287708	11	True				
ANR	1291237	AssignmentExpression	psub = ( const subpath * ) pseg		1287708	0		=			
ANR	1291238	Identifier	psub		1287708	0					
ANR	1291239	CastExpression	( const subpath * ) pseg		1287708	1					
ANR	1291240	CastTarget	const subpath *		1287708	0					
ANR	1291241	Identifier	pseg		1287708	1					
ANR	1291242	IfStatement	if ( to_path_reverse != NULL )		1287708	172					
ANR	1291243	Condition	to_path_reverse != NULL	1058:8:44260:44282	1287708	0	True				
ANR	1291244	EqualityExpression	to_path_reverse != NULL		1287708	0		!=			
ANR	1291245	Identifier	to_path_reverse		1287708	0					
ANR	1291246	Identifier	NULL		1287708	1					
ANR	1291247	ExpressionStatement	"code = gx_join_path_and_reverse ( to_path , to_path_reverse )"	1059:8:44293:44350	1287708	1	True				
ANR	1291248	AssignmentExpression	"code = gx_join_path_and_reverse ( to_path , to_path_reverse )"		1287708	0		=			
ANR	1291249	Identifier	code		1287708	0					
ANR	1291250	CallExpression	"gx_join_path_and_reverse ( to_path , to_path_reverse )"		1287708	1					
ANR	1291251	Callee	gx_join_path_and_reverse		1287708	0					
ANR	1291252	Identifier	gx_join_path_and_reverse		1287708	0					
ANR	1291253	ArgumentList	to_path		1287708	1					
ANR	1291254	Argument	to_path		1287708	0					
ANR	1291255	Identifier	to_path		1287708	0					
ANR	1291256	Argument	to_path_reverse		1287708	1					
ANR	1291257	Identifier	to_path_reverse		1287708	0					
ANR	1291258	ExpressionStatement	"FILL_STROKE_PATH ( pdev , always_thin , pcpath , true )"	1060:4:44356:44405	1287708	173	True				
ANR	1291259	CallExpression	"FILL_STROKE_PATH ( pdev , always_thin , pcpath , true )"		1287708	0					
ANR	1291260	Callee	FILL_STROKE_PATH		1287708	0					
ANR	1291261	Identifier	FILL_STROKE_PATH		1287708	0					
ANR	1291262	ArgumentList	pdev		1287708	1					
ANR	1291263	Argument	pdev		1287708	0					
ANR	1291264	Identifier	pdev		1287708	0					
ANR	1291265	Argument	always_thin		1287708	1					
ANR	1291266	Identifier	always_thin		1287708	0					
ANR	1291267	Argument	pcpath		1287708	2					
ANR	1291268	Identifier	pcpath		1287708	0					
ANR	1291269	Argument	true		1287708	3					
ANR	1291270	Identifier	true		1287708	0					
ANR	1291271	Label	exit :	1061:2:44409:44413	1287708	174	True				
ANR	1291272	Identifier	exit		1287708	0					
ANR	1291273	IfStatement	if ( dev == ( gx_device * ) & cdev )		1287708	175					
ANR	1291274	Condition	dev == ( gx_device * ) & cdev	1062:8:44423:44447	1287708	0	True				
ANR	1291275	EqualityExpression	dev == ( gx_device * ) & cdev		1287708	0		==			
ANR	1291276	Identifier	dev		1287708	0					
ANR	1291277	CastExpression	( gx_device * ) & cdev		1287708	1					
ANR	1291278	CastTarget	gx_device *		1287708	0					
ANR	1291279	UnaryOperationExpression	& cdev		1287708	1					
ANR	1291280	UnaryOperator	&		1287708	0					
ANR	1291281	Identifier	cdev		1287708	1					
ANR	1291282	ExpressionStatement	cdev . target -> sgr = cdev . sgr	1063:8:44458:44485	1287708	1	True				
ANR	1291283	AssignmentExpression	cdev . target -> sgr = cdev . sgr		1287708	0		=			
ANR	1291284	PtrMemberAccess	cdev . target -> sgr		1287708	0					
ANR	1291285	MemberAccess	cdev . target		1287708	0					
ANR	1291286	Identifier	cdev		1287708	0					
ANR	1291287	Identifier	target		1287708	1					
ANR	1291288	Identifier	sgr		1287708	1					
ANR	1291289	MemberAccess	cdev . sgr		1287708	1					
ANR	1291290	Identifier	cdev		1287708	0					
ANR	1291291	Identifier	sgr		1287708	1					
ANR	1291292	IfStatement	if ( to_path == & stroke_path_body )		1287708	176					
ANR	1291293	Condition	to_path == & stroke_path_body	1064:8:44495:44522	1287708	0	True				
ANR	1291294	EqualityExpression	to_path == & stroke_path_body		1287708	0		==			
ANR	1291295	Identifier	to_path		1287708	0					
ANR	1291296	UnaryOperationExpression	& stroke_path_body		1287708	1					
ANR	1291297	UnaryOperator	&		1287708	0					
ANR	1291298	Identifier	stroke_path_body		1287708	1					
ANR	1291299	ExpressionStatement	"gx_path_free ( & stroke_path_body , ""gx_stroke_path_only error"" )"	1065:8:44533:44593	1287708	1	True				
ANR	1291300	CallExpression	"gx_path_free ( & stroke_path_body , ""gx_stroke_path_only error"" )"		1287708	0					
ANR	1291301	Callee	gx_path_free		1287708	0					
ANR	1291302	Identifier	gx_path_free		1287708	0					
ANR	1291303	ArgumentList	& stroke_path_body		1287708	1					
ANR	1291304	Argument	& stroke_path_body		1287708	0					
ANR	1291305	UnaryOperationExpression	& stroke_path_body		1287708	0					
ANR	1291306	UnaryOperator	&		1287708	0					
ANR	1291307	Identifier	stroke_path_body		1287708	1					
ANR	1291308	Argument	"""gx_stroke_path_only error"""		1287708	1					
ANR	1291309	PrimaryExpression	"""gx_stroke_path_only error"""		1287708	0					
ANR	1291310	IfStatement	if ( to_path_reverse == & stroke_path_reverse )		1287708	177					
ANR	1291311	Condition	to_path_reverse == & stroke_path_reverse	1066:8:44634:44672	1287708	0	True				
ANR	1291312	EqualityExpression	to_path_reverse == & stroke_path_reverse		1287708	0		==			
ANR	1291313	Identifier	to_path_reverse		1287708	0					
ANR	1291314	UnaryOperationExpression	& stroke_path_reverse		1287708	1					
ANR	1291315	UnaryOperator	&		1287708	0					
ANR	1291316	Identifier	stroke_path_reverse		1287708	1					
ANR	1291317	ExpressionStatement	"gx_path_free ( & stroke_path_reverse , ""gx_stroke_path_only error"" )"	1067:8:44683:44746	1287708	1	True				
ANR	1291318	CallExpression	"gx_path_free ( & stroke_path_reverse , ""gx_stroke_path_only error"" )"		1287708	0					
ANR	1291319	Callee	gx_path_free		1287708	0					
ANR	1291320	Identifier	gx_path_free		1287708	0					
ANR	1291321	ArgumentList	& stroke_path_reverse		1287708	1					
ANR	1291322	Argument	& stroke_path_reverse		1287708	0					
ANR	1291323	UnaryOperationExpression	& stroke_path_reverse		1287708	0					
ANR	1291324	UnaryOperator	&		1287708	0					
ANR	1291325	Identifier	stroke_path_reverse		1287708	1					
ANR	1291326	Argument	"""gx_stroke_path_only error"""		1287708	1					
ANR	1291327	PrimaryExpression	"""gx_stroke_path_only error"""		1287708	0					
ANR	1291328	IfStatement	if ( dash_count )		1287708	178					
ANR	1291329	Condition	dash_count	1068:8:44756:44765	1287708	0	True				
ANR	1291330	Identifier	dash_count		1287708	0					
ANR	1291331	ExpressionStatement	"gx_path_free ( & dpath , ""gx_stroke_path exit(dash path)"" )"	1069:8:44776:44830	1287708	1	True				
ANR	1291332	CallExpression	"gx_path_free ( & dpath , ""gx_stroke_path exit(dash path)"" )"		1287708	0					
ANR	1291333	Callee	gx_path_free		1287708	0					
ANR	1291334	Identifier	gx_path_free		1287708	0					
ANR	1291335	ArgumentList	& dpath		1287708	1					
ANR	1291336	Argument	& dpath		1287708	0					
ANR	1291337	UnaryOperationExpression	& dpath		1287708	0					
ANR	1291338	UnaryOperator	&		1287708	0					
ANR	1291339	Identifier	dpath		1287708	1					
ANR	1291340	Argument	"""gx_stroke_path exit(dash path)"""		1287708	1					
ANR	1291341	PrimaryExpression	"""gx_stroke_path exit(dash path)"""		1287708	0					
ANR	1291342	Label	exf :	1070:2:44834:44837	1287708	179	True				
ANR	1291343	Identifier	exf		1287708	0					
ANR	1291344	IfStatement	if ( ppath -> curve_count )		1287708	180					
ANR	1291345	Condition	ppath -> curve_count	1071:8:44847:44864	1287708	0	True				
ANR	1291346	PtrMemberAccess	ppath -> curve_count		1287708	0					
ANR	1291347	Identifier	ppath		1287708	0					
ANR	1291348	Identifier	curve_count		1287708	1					
ANR	1291349	ExpressionStatement	"gx_path_free ( & fpath , ""gx_stroke_path exit(flattened path)"" )"	1072:8:44875:44934	1287708	1	True				
ANR	1291350	CallExpression	"gx_path_free ( & fpath , ""gx_stroke_path exit(flattened path)"" )"		1287708	0					
ANR	1291351	Callee	gx_path_free		1287708	0					
ANR	1291352	Identifier	gx_path_free		1287708	0					
ANR	1291353	ArgumentList	& fpath		1287708	1					
ANR	1291354	Argument	& fpath		1287708	0					
ANR	1291355	UnaryOperationExpression	& fpath		1287708	0					
ANR	1291356	UnaryOperator	&		1287708	0					
ANR	1291357	Identifier	fpath		1287708	1					
ANR	1291358	Argument	"""gx_stroke_path exit(flattened path)"""		1287708	1					
ANR	1291359	PrimaryExpression	"""gx_stroke_path exit(flattened path)"""		1287708	0					
ANR	1291360	ReturnStatement	return code ;	1073:4:44940:44951	1287708	181	True				
ANR	1291361	Identifier	code		1287708	0					
ANR	1291362	ReturnType	static int		1287708	1					
ANR	1291363	Identifier	gx_stroke_path_only_aux		1287708	2					
ANR	1291364	ParameterList	"gx_path * ppath , gx_path * to_path , gx_device * pdev , const gs_gstate * pgs , const gx_stroke_params * params , const gx_device_color * pdevc , const gx_clip_path * pcpath"		1287708	3					
ANR	1291365	Parameter	gx_path * ppath	420:24:16292:16306	1287708	0	True				
ANR	1291366	ParameterType	gx_path *		1287708	0					
ANR	1291367	Identifier	ppath		1287708	1					
ANR	1291368	Parameter	gx_path * to_path	420:41:16309:16325	1287708	1	True				
ANR	1291369	ParameterType	gx_path *		1287708	0					
ANR	1291370	Identifier	to_path		1287708	1					
ANR	1291371	Parameter	gx_device * pdev	420:60:16328:16343	1287708	2	True				
ANR	1291372	ParameterType	gx_device *		1287708	0					
ANR	1291373	Identifier	pdev		1287708	1					
ANR	1291374	Parameter	const gs_gstate * pgs	421:15:16361:16381	1287708	3	True				
ANR	1291375	ParameterType	const gs_gstate *		1287708	0					
ANR	1291376	Identifier	pgs		1287708	1					
ANR	1291377	Parameter	const gx_stroke_params * params	421:38:16384:16414	1287708	4	True				
ANR	1291378	ParameterType	const gx_stroke_params *		1287708	0					
ANR	1291379	Identifier	params		1287708	1					
ANR	1291380	Parameter	const gx_device_color * pdevc	422:17:16434:16462	1287708	5	True				
ANR	1291381	ParameterType	const gx_device_color *		1287708	0					
ANR	1291382	Identifier	pdevc		1287708	1					
ANR	1291383	Parameter	const gx_clip_path * pcpath	422:48:16465:16491	1287708	6	True				
ANR	1291384	ParameterType	const gx_clip_path *		1287708	0					
ANR	1291385	Identifier	pcpath		1287708	1					
ANR	1291386	CFGEntryNode	ENTRY		1287708		True				
ANR	1291387	CFGExitNode	EXIT		1287708		True				
ANR	1291388	Symbol	pgs_lp -> dot_length_absolute		1287708						
ANR	1291389	Symbol	params -> flatness		1287708						
ANR	1291390	Symbol	is_fzero		1287708						
ANR	1291391	Symbol	pd -> pt		1287708						
ANR	1291392	Symbol	spath -> first_subpath		1287708						
ANR	1291393	Symbol	nf_all_from_arc		1287708						
ANR	1291394	Symbol	* pgs		1287708						
ANR	1291395	Symbol	bbox		1287708						
ANR	1291396	Symbol	( pseg == 0 ? ( const segment * ) spath -> first_subpath : pseg ) -> notes		1287708						
ANR	1291397	Symbol	reflected		1287708						
ANR	1291398	Symbol	get_clipping_box		1287708						
ANR	1291399	Symbol	not_first		1287708						
ANR	1291400	Symbol	sn_none		1287708						
ANR	1291401	Symbol	pl . vector . x		1287708						
ANR	1291402	Symbol	min_fixed		1287708						
ANR	1291403	Symbol	pgs -> ctm . tx		1287708						
ANR	1291404	Symbol	max_dash_len		1287708						
ANR	1291405	Symbol	pgs -> ctm . ty		1287708						
ANR	1291406	Symbol	dev		1287708						
ANR	1291407	Symbol	gx_path_add_dash_expansion		1287708						
ANR	1291408	Symbol	~nf_all_from_arc		1287708						
ANR	1291409	Symbol	* pseg -> prev		1287708						
ANR	1291410	Symbol	& pl		1287708						
ANR	1291411	Symbol	ibox . p . x		1287708						
ANR	1291412	Symbol	ibox . p . y		1287708						
ANR	1291413	Symbol	pd -> pt . x		1287708						
ANR	1291414	Symbol	gs_join_bevel		1287708						
ANR	1291415	Symbol	pd -> pt . y		1287708						
ANR	1291416	Symbol	line_proc		1287708						
ANR	1291417	Symbol	gx_stroke_path_expansion		1287708						
ANR	1291418	Symbol	CPSI_mode		1287708						
ANR	1291419	Symbol	dash_count		1287708						
ANR	1291420	Symbol	stroke_fill		1287708						
ANR	1291421	Symbol	gs_join_round		1287708						
ANR	1291422	Symbol	* pgs_lp -> dash . pattern		1287708						
ANR	1291423	Symbol	pgs -> fill_adjust . y		1287708						
ANR	1291424	Symbol	pgs -> fill_adjust . x		1287708						
ANR	1291425	Symbol	sn_dash_head		1287708						
ANR	1291426	Symbol	bbox . p . y		1287708						
ANR	1291427	Symbol	bbox . p . x		1287708						
ANR	1291428	Symbol	cdev . target		1287708						
ANR	1291429	Symbol	& mat		1287708						
ANR	1291430	Symbol	to_path		1287708						
ANR	1291431	Symbol	pgs_lp -> dash . init_index		1287708						
ANR	1291432	Symbol	& cdev		1287708						
ANR	1291433	Symbol	expand_squared		1287708						
ANR	1291434	Symbol	end -> pt . y		1287708						
ANR	1291435	Symbol	end -> pt . x		1287708						
ANR	1291436	Symbol	& dpt		1287708						
ANR	1291437	Symbol	pgs_lp -> dot_orientation		1287708						
ANR	1291438	Symbol	sn_dash_tail		1287708						
ANR	1291439	Symbol	pl . e . cdelta		1287708						
ANR	1291440	Symbol	pl . o . p . y		1287708						
ANR	1291441	Symbol	pseg -> pt		1287708						
ANR	1291442	Symbol	pseg_notes		1287708						
ANR	1291443	Symbol	pl . o . p . x		1287708						
ANR	1291444	Symbol	pseg -> type		1287708						
ANR	1291445	Symbol	gx_dc_is_pattern1_color_clist_based		1287708						
ANR	1291446	Symbol	hypot		1287708						
ANR	1291447	Symbol	any_abs		1287708						
ANR	1291448	Symbol	fpath		1287708						
ANR	1291449	Symbol	pgs -> memory		1287708						
ANR	1291450	Symbol	pcpath		1287708						
ANR	1291451	Symbol	& pl_prev		1287708						
ANR	1291452	Symbol	* params		1287708						
ANR	1291453	Symbol	* * pgs_lp		1287708						
ANR	1291454	Symbol	gx_path_has_curves		1287708						
ANR	1291455	Symbol	fabs		1287708						
ANR	1291456	Symbol	& pl_first		1287708						
ANR	1291457	Symbol	sx		1287708						
ANR	1291458	Symbol	sy		1287708						
ANR	1291459	Symbol	i		1287708						
ANR	1291460	Symbol	gs_cap_butt		1287708						
ANR	1291461	Symbol	& dpath		1287708						
ANR	1291462	Symbol	pgs_lp -> start_cap		1287708						
ANR	1291463	Symbol	stroke_add_compat		1287708						
ANR	1291464	Symbol	& stroke_path_body		1287708						
ANR	1291465	Symbol	stroke_add		1287708						
ANR	1291466	Symbol	orient_portrait		1287708						
ANR	1291467	Symbol	expansion . x		1287708						
ANR	1291468	Symbol	x		1287708						
ANR	1291469	Symbol	s_dash		1287708						
ANR	1291470	Symbol	* pdev		1287708						
ANR	1291471	Symbol	y		1287708						
ANR	1291472	Symbol	* spath -> first_subpath		1287708						
ANR	1291473	Symbol	expansion . y		1287708						
ANR	1291474	Symbol	pgs_lp -> dash		1287708						
ANR	1291475	Symbol	pl . o . p		1287708						
ANR	1291476	Symbol	pgs_lp -> dash . init_ink_on		1287708						
ANR	1291477	Symbol	pd -> tangent . y		1287708						
ANR	1291478	Symbol	pd -> tangent . x		1287708						
ANR	1291479	Symbol	notes		1287708						
ANR	1291480	Symbol	* pmat		1287708						
ANR	1291481	Symbol	& cbox		1287708						
ANR	1291482	Symbol	always_thin		1287708						
ANR	1291483	Symbol	bbox . q . x		1287708						
ANR	1291484	Symbol	bbox . q . y		1287708						
ANR	1291485	Symbol	pl . e . p		1287708						
ANR	1291486	Symbol	pgs -> ctm . xx		1287708						
ANR	1291487	Symbol	* cdev		1287708						
ANR	1291488	Symbol	cdev . sgr		1287708						
ANR	1291489	Symbol	pgs -> ctm . xy		1287708						
ANR	1291490	Symbol	* lptr		1287708						
ANR	1291491	Symbol	gs_join_none		1287708						
ANR	1291492	Symbol	dev -> sgr		1287708						
ANR	1291493	Symbol	is_closed		1287708						
ANR	1291494	Symbol	device_dot_length		1287708						
ANR	1291495	Symbol	pgs_lp -> miter_limit		1287708						
ANR	1291496	Symbol	pgs_lp -> dot_orientation . xy		1287708						
ANR	1291497	Symbol	stroke_add_initial_cap_compat		1287708						
ANR	1291498	Symbol	cbox		1287708						
ANR	1291499	Symbol	initial_matrix_reflected		1287708						
ANR	1291500	Symbol	pgs_lp -> dash . init_dist_left		1287708						
ANR	1291501	Symbol	pseg -> pt . x		1287708						
ANR	1291502	Symbol	pseg -> pt . y		1287708						
ANR	1291503	Symbol	pgs -> ctm		1287708						
ANR	1291504	Symbol	dmax		1287708						
ANR	1291505	Symbol	& ibox		1287708						
ANR	1291506	Symbol	pl . e . p . x		1287708						
ANR	1291507	Symbol	pgs -> ctm . yy		1287708						
ANR	1291508	Symbol	ibox . q . y		1287708						
ANR	1291509	Symbol	nf_dash_head		1287708						
ANR	1291510	Symbol	* psub -> next		1287708						
ANR	1291511	Symbol	pgs -> ctm . yx		1287708						
ANR	1291512	Symbol	& initial_matrix		1287708						
ANR	1291513	Symbol	adjust		1287708						
ANR	1291514	Symbol	pl . e . p . y		1287708						
ANR	1291515	Symbol	ibox . q . x		1287708						
ANR	1291516	Symbol	params -> traditional		1287708						
ANR	1291517	Symbol	nf_prev_dash_head		1287708						
ANR	1291518	Symbol	to_path_reverse		1287708						
ANR	1291519	Symbol	pmat		1287708						
ANR	1291520	Symbol	pseg -> notes		1287708						
ANR	1291521	Symbol	line_width		1287708						
ANR	1291522	Symbol	fill_params . rule		1287708						
ANR	1291523	Symbol	ppath		1287708						
ANR	1291524	Symbol	zero_length		1287708						
ANR	1291525	Symbol	width_is_thin		1287708						
ANR	1291526	Symbol	initial_matrix		1287708						
ANR	1291527	Symbol	pgs -> flatness		1287708						
ANR	1291528	Symbol	wl		1287708						
ANR	1291529	Symbol	dev_proc		1287708						
ANR	1291530	Symbol	pgs_lp -> join		1287708						
ANR	1291531	Symbol	ppath -> memory		1287708						
ANR	1291532	Symbol	gx_path_add_flattened_for_stroke		1287708						
ANR	1291533	Symbol	end		1287708						
ANR	1291534	Symbol	bbox . q		1287708						
ANR	1291535	Symbol	pl_prev		1287708						
ANR	1291536	Symbol	* pseg -> next		1287708						
ANR	1291537	Symbol	false		1287708						
ANR	1291538	Symbol	rect_within		1287708						
ANR	1291539	Symbol	xa		1287708						
ANR	1291540	Symbol	bbox . p		1287708						
ANR	1291541	Symbol	pl . width		1287708						
ANR	1291542	Symbol	pgs -> fill_adjust		1287708						
ANR	1291543	Symbol	ibox		1287708						
ANR	1291544	Symbol	pl . vector . y		1287708						
ANR	1291545	Symbol	fill_params		1287708						
ANR	1291546	Symbol	pl . vector		1287708						
ANR	1291547	Symbol	cdev		1287708						
ANR	1291548	Symbol	* cdev . target		1287708						
ANR	1291549	Symbol	xx		1287708						
ANR	1291550	Symbol	xy		1287708						
ANR	1291551	Symbol	pdevc		1287708						
ANR	1291552	Symbol	ya		1287708						
ANR	1291553	Symbol	nf_dash_tail		1287708						
ANR	1291554	Symbol	sqrt		1287708						
ANR	1291555	Symbol	pdev -> max_fill_band		1287708						
ANR	1291556	Symbol	join		1287708						
ANR	1291557	Symbol	yx		1287708						
ANR	1291558	Symbol	yy		1287708						
ANR	1291559	Symbol	get_initial_matrix		1287708						
ANR	1291560	Symbol	pl_first		1287708						
ANR	1291561	Symbol	index		1287708						
ANR	1291562	Symbol	& bbox		1287708						
ANR	1291563	Symbol	psub -> next		1287708						
ANR	1291564	Symbol	params		1287708						
ANR	1291565	Symbol	is_dash_segment		1287708						
ANR	1291566	Symbol	dpt . y		1287708						
ANR	1291567	Symbol	lptr		1287708						
ANR	1291568	Symbol	dpt . x		1287708						
ANR	1291569	Symbol	traditional		1287708						
ANR	1291570	Symbol	ibox . p		1287708						
ANR	1291571	Symbol	ibox . q		1287708						
ANR	1291572	Symbol	lop_is_idempotent		1287708						
ANR	1291573	Symbol	pgs_lp -> end_cap		1287708						
ANR	1291574	Symbol	pgs_lp -> dash . pattern_size		1287708						
ANR	1291575	Symbol	dpath		1287708						
ANR	1291576	Symbol	nf_some_from_arc		1287708						
ANR	1291577	Symbol	* dev		1287708						
ANR	1291578	Symbol	gx_join_path_and_reverse		1287708						
ANR	1291579	Symbol	* pgs_lp		1287708						
ANR	1291580	Symbol	flags		1287708						
ANR	1291581	Symbol	* spath		1287708						
ANR	1291582	Symbol	uniform		1287708						
ANR	1291583	Symbol	gs_currentcpsimode		1287708						
ANR	1291584	Symbol	line_width_and_scale		1287708						
ANR	1291585	Symbol	COMBINE_FLAGS		1287708						
ANR	1291586	Symbol	pgs_lp -> half_width		1287708						
ANR	1291587	Symbol	pgs		1287708						
ANR	1291588	Symbol	pseg -> prev		1287708						
ANR	1291589	Symbol	mat		1287708						
ANR	1291590	Symbol	psub -> type		1287708						
ANR	1291591	Symbol	max		1287708						
ANR	1291592	Symbol	pgs -> line_params . half_width		1287708						
ANR	1291593	Symbol	dpt		1287708						
ANR	1291594	Symbol	dpy		1287708						
ANR	1291595	Symbol	dpx		1287708						
ANR	1291596	Symbol	pgs_lp -> miter_check		1287708						
ANR	1291597	Symbol	* pgs_lp -> dash		1287708						
ANR	1291598	Symbol	& expansion		1287708						
ANR	1291599	Symbol	max_rr		1287708						
ANR	1291600	Symbol	pseg -> next -> type		1287708						
ANR	1291601	Symbol	int2fixed		1287708						
ANR	1291602	Symbol	& pgs -> ctm		1287708						
ANR	1291603	Symbol	first		1287708						
ANR	1291604	Symbol	pd -> tangent		1287708						
ANR	1291605	Symbol	pgs -> line_params . dot_length		1287708						
ANR	1291606	Symbol	s_start		1287708						
ANR	1291607	Symbol	pgs -> line_params		1287708						
ANR	1291608	Symbol	& fpath		1287708						
ANR	1291609	Symbol	pl . width . x		1287708						
ANR	1291610	Symbol	pl . width . y		1287708						
ANR	1291611	Symbol	psub -> next -> type		1287708						
ANR	1291612	Symbol	* * pseg		1287708						
ANR	1291613	Symbol	gx_rule_winding_number		1287708						
ANR	1291614	Symbol	s_gap		1287708						
ANR	1291615	Symbol	stroke_path_body		1287708						
ANR	1291616	Symbol	spath		1287708						
ANR	1291617	Symbol	pseg -> next		1287708						
ANR	1291618	Symbol	pdev		1287708						
ANR	1291619	Symbol	udy1		1287708						
ANR	1291620	Symbol	fixed_1		1287708						
ANR	1291621	Symbol	max_fixed		1287708						
ANR	1291622	Symbol	gs_currentlineparams_inline		1287708						
ANR	1291623	Symbol	gs_debug_c		1287708						
ANR	1291624	Symbol	pgs_lp -> curve_join		1287708						
ANR	1291625	Symbol	stroke_path_reverse		1287708						
ANR	1291626	Symbol	* ppath		1287708						
ANR	1291627	Symbol	gs_gstate_idtransform		1287708						
ANR	1291628	Symbol	curve_join		1287708						
ANR	1291629	Symbol	NULL		1287708						
ANR	1291630	Symbol	orient		1287708						
ANR	1291631	Symbol	pmat -> yy		1287708						
ANR	1291632	Symbol	ensure_closed		1287708						
ANR	1291633	Symbol	* psub		1287708						
ANR	1291634	Symbol	fill_params . flatness		1287708						
ANR	1291635	Symbol	ppath -> curve_count		1287708						
ANR	1291636	Symbol	& stroke_path_reverse		1287708						
ANR	1291637	Symbol	end -> pt		1287708						
ANR	1291638	Symbol	pseg -> prev -> type		1287708						
ANR	1291639	Symbol	initial_matrix . xy		1287708						
ANR	1291640	Symbol	lptr -> thin		1287708						
ANR	1291641	Symbol	initial_matrix . xx		1287708						
ANR	1291642	Symbol	expansion		1287708						
ANR	1291643	Symbol	pl . e . cdelta . x		1287708						
ANR	1291644	Symbol	pl . e . cdelta . y		1287708						
ANR	1291645	Symbol	pgs_lp		1287708						
ANR	1291646	Symbol	true		1287708						
ANR	1291647	Symbol	* pseg		1287708						
ANR	1291648	Symbol	* pd		1287708						
ANR	1291649	Symbol	* end		1287708						
ANR	1291650	Symbol	dev -> sgr . stroke_stored		1287708						
ANR	1291651	Symbol	pmat -> xy		1287708						
ANR	1291652	Symbol	udx1		1287708						
ANR	1291653	Symbol	pl . thin		1287708						
ANR	1291654	Symbol	psub -> last		1287708						
ANR	1291655	Symbol	code		1287708						
ANR	1291656	Symbol	device_line_width_scale		1287708						
ANR	1291657	Symbol	gx_path_has_long_segments		1287708						
ANR	1291658	Symbol	pl . o		1287708						
ANR	1291659	Symbol	~sn_not_first		1287708						
ANR	1291660	Symbol	udx		1287708						
ANR	1291661	Symbol	scale		1287708						
ANR	1291662	Symbol	ppath -> first_subpath		1287708						
ANR	1291663	Symbol	udy		1287708						
ANR	1291664	Symbol	initial_matrix . yx		1287708						
ANR	1291665	Symbol	pgs_lp -> dash_cap		1287708						
ANR	1291666	Symbol	( ( const subpath * ) pseg ) -> is_closed		1287708						
ANR	1291667	Symbol	initial_matrix . yy		1287708						
ANR	1291668	Symbol	pl . e		1287708						
ANR	1291669	Symbol	pseg		1287708						
ANR	1291670	Symbol	cap		1287708						
ANR	1291671	Symbol	stroke_add_fast		1287708						
ANR	1291672	Symbol	pgs_lp -> dash . offset		1287708						
ANR	1291673	Symbol	cdev . target -> sgr		1287708						
ANR	1291674	Symbol	pgs_lp -> dash . pattern		1287708						
ANR	1291675	Symbol	gs_cap_round		1287708						
ANR	1291676	Symbol	pgs -> log_op		1287708						
ANR	1291677	Symbol	psub		1287708						
ANR	1291678	Symbol	fixed2float		1287708						
ANR	1291679	Symbol	* * spath		1287708						
ANR	1291680	Symbol	pgs_lp -> dot_length		1287708						
ANR	1291681	Symbol	* * psub		1287708						
ANR	1291682	Symbol	* line_proc		1287708						
ANR	1291683	Symbol	* i		1287708						
ANR	1291684	Symbol	pd		1287708						
ANR	1291685	Symbol	cdev . max_fill_band		1287708						
ANR	1291686	Symbol	sn_not_first		1287708						
ANR	1291687	Symbol	pl		1287708						
ANR	1291688	Function	gx_stroke_path_only	1076:0:44956:45270							
ANR	1291689	FunctionDef	"gx_stroke_path_only (gx_path * ppath , gx_path * to_path , gx_device * pdev , const gs_gstate * pgs , const gx_stroke_params * params , const gx_device_color * pdevc , const gx_clip_path * pcpath)"		1291688	0					
ANR	1291690	CompoundStatement		1080:0:45182:45270	1291688	0					
ANR	1291691	ReturnStatement	"return gx_stroke_path_only_aux ( ppath , to_path , pdev , pgs , params , pdevc , pcpath ) ;"	1081:4:45188:45268	1291688	0	True				
ANR	1291692	CallExpression	"gx_stroke_path_only_aux ( ppath , to_path , pdev , pgs , params , pdevc , pcpath )"		1291688	0					
ANR	1291693	Callee	gx_stroke_path_only_aux		1291688	0					
ANR	1291694	Identifier	gx_stroke_path_only_aux		1291688	0					
ANR	1291695	ArgumentList	ppath		1291688	1					
ANR	1291696	Argument	ppath		1291688	0					
ANR	1291697	Identifier	ppath		1291688	0					
ANR	1291698	Argument	to_path		1291688	1					
ANR	1291699	Identifier	to_path		1291688	0					
ANR	1291700	Argument	pdev		1291688	2					
ANR	1291701	Identifier	pdev		1291688	0					
ANR	1291702	Argument	pgs		1291688	3					
ANR	1291703	Identifier	pgs		1291688	0					
ANR	1291704	Argument	params		1291688	4					
ANR	1291705	Identifier	params		1291688	0					
ANR	1291706	Argument	pdevc		1291688	5					
ANR	1291707	Identifier	pdevc		1291688	0					
ANR	1291708	Argument	pcpath		1291688	6					
ANR	1291709	Identifier	pcpath		1291688	0					
ANR	1291710	ReturnType	int		1291688	1					
ANR	1291711	Identifier	gx_stroke_path_only		1291688	2					
ANR	1291712	ParameterList	"gx_path * ppath , gx_path * to_path , gx_device * pdev , const gs_gstate * pgs , const gx_stroke_params * params , const gx_device_color * pdevc , const gx_clip_path * pcpath"		1291688	3					
ANR	1291713	Parameter	gx_path * ppath	1077:20:44980:44994	1291688	0	True				
ANR	1291714	ParameterType	gx_path *		1291688	0					
ANR	1291715	Identifier	ppath		1291688	1					
ANR	1291716	Parameter	gx_path * to_path	1077:37:44997:45013	1291688	1	True				
ANR	1291717	ParameterType	gx_path *		1291688	0					
ANR	1291718	Identifier	to_path		1291688	1					
ANR	1291719	Parameter	gx_device * pdev	1077:56:45016:45031	1291688	2	True				
ANR	1291720	ParameterType	gx_device *		1291688	0					
ANR	1291721	Identifier	pdev		1291688	1					
ANR	1291722	Parameter	const gs_gstate * pgs	1078:15:45049:45069	1291688	3	True				
ANR	1291723	ParameterType	const gs_gstate *		1291688	0					
ANR	1291724	Identifier	pgs		1291688	1					
ANR	1291725	Parameter	const gx_stroke_params * params	1078:38:45072:45102	1291688	4	True				
ANR	1291726	ParameterType	const gx_stroke_params *		1291688	0					
ANR	1291727	Identifier	params		1291688	1					
ANR	1291728	Parameter	const gx_device_color * pdevc	1079:17:45122:45150	1291688	5	True				
ANR	1291729	ParameterType	const gx_device_color *		1291688	0					
ANR	1291730	Identifier	pdevc		1291688	1					
ANR	1291731	Parameter	const gx_clip_path * pcpath	1079:48:45153:45179	1291688	6	True				
ANR	1291732	ParameterType	const gx_clip_path *		1291688	0					
ANR	1291733	Identifier	pcpath		1291688	1					
ANR	1291734	CFGEntryNode	ENTRY		1291688		True				
ANR	1291735	CFGExitNode	EXIT		1291688		True				
ANR	1291736	Symbol	gx_stroke_path_only_aux		1291688						
ANR	1291737	Symbol	pdev		1291688						
ANR	1291738	Symbol	to_path		1291688						
ANR	1291739	Symbol	pdevc		1291688						
ANR	1291740	Symbol	ppath		1291688						
ANR	1291741	Symbol	params		1291688						
ANR	1291742	Symbol	pgs		1291688						
ANR	1291743	Symbol	pcpath		1291688						
ANR	1291744	Function	width_is_thin	1092:0:45595:46684							
ANR	1291745	FunctionDef	width_is_thin (pl_ptr plp)		1291744	0					
ANR	1291746	CompoundStatement		1094:0:45633:46684	1291744	0					
ANR	1291747	IdentifierDeclStatement	"fixed dx , dy , wx = plp -> width . x , wy = plp -> width . y ;"	1095:4:45639:45689	1291744	0	True				
ANR	1291748	IdentifierDecl	dx		1291744	0					
ANR	1291749	IdentifierDeclType	fixed		1291744	0					
ANR	1291750	Identifier	dx		1291744	1					
ANR	1291751	IdentifierDecl	dy		1291744	1					
ANR	1291752	IdentifierDeclType	fixed		1291744	0					
ANR	1291753	Identifier	dy		1291744	1					
ANR	1291754	IdentifierDecl	wx = plp -> width . x		1291744	2					
ANR	1291755	IdentifierDeclType	fixed		1291744	0					
ANR	1291756	Identifier	wx		1291744	1					
ANR	1291757	AssignmentExpression	wx = plp -> width . x		1291744	2		=			
ANR	1291758	Identifier	wx		1291744	0					
ANR	1291759	MemberAccess	plp -> width . x		1291744	1					
ANR	1291760	PtrMemberAccess	plp -> width		1291744	0					
ANR	1291761	Identifier	plp		1291744	0					
ANR	1291762	Identifier	width		1291744	1					
ANR	1291763	Identifier	x		1291744	1					
ANR	1291764	IdentifierDecl	wy = plp -> width . y		1291744	3					
ANR	1291765	IdentifierDeclType	fixed		1291744	0					
ANR	1291766	Identifier	wy		1291744	1					
ANR	1291767	AssignmentExpression	wy = plp -> width . y		1291744	2		=			
ANR	1291768	Identifier	wy		1291744	0					
ANR	1291769	MemberAccess	plp -> width . y		1291744	1					
ANR	1291770	PtrMemberAccess	plp -> width		1291744	0					
ANR	1291771	Identifier	plp		1291744	0					
ANR	1291772	Identifier	width		1291744	1					
ANR	1291773	Identifier	y		1291744	1					
ANR	1291774	IfStatement	if ( ( dy = plp -> vector . y ) == 0 )		1291744	1					
ANR	1291775	Condition	( dy = plp -> vector . y ) == 0	1098:8:45766:45790	1291744	0	True				
ANR	1291776	EqualityExpression	( dy = plp -> vector . y ) == 0		1291744	0		==			
ANR	1291777	AssignmentExpression	dy = plp -> vector . y		1291744	0		=			
ANR	1291778	Identifier	dy		1291744	0					
ANR	1291779	MemberAccess	plp -> vector . y		1291744	1					
ANR	1291780	PtrMemberAccess	plp -> vector		1291744	0					
ANR	1291781	Identifier	plp		1291744	0					
ANR	1291782	Identifier	vector		1291744	1					
ANR	1291783	Identifier	y		1291744	1					
ANR	1291784	PrimaryExpression	0		1291744	1					
ANR	1291785	ReturnStatement	return any_abs ( wy ) < fixed_half ;	1099:8:45801:45832	1291744	1	True				
ANR	1291786	RelationalExpression	any_abs ( wy ) < fixed_half		1291744	0		<			
ANR	1291787	CallExpression	any_abs ( wy )		1291744	0					
ANR	1291788	Callee	any_abs		1291744	0					
ANR	1291789	Identifier	any_abs		1291744	0					
ANR	1291790	ArgumentList	wy		1291744	1					
ANR	1291791	Argument	wy		1291744	0					
ANR	1291792	Identifier	wy		1291744	0					
ANR	1291793	Identifier	fixed_half		1291744	1					
ANR	1291794	IfStatement	if ( ( dx = plp -> vector . x ) == 0 )		1291744	2					
ANR	1291795	Condition	( dx = plp -> vector . x ) == 0	1100:8:45842:45866	1291744	0	True				
ANR	1291796	EqualityExpression	( dx = plp -> vector . x ) == 0		1291744	0		==			
ANR	1291797	AssignmentExpression	dx = plp -> vector . x		1291744	0		=			
ANR	1291798	Identifier	dx		1291744	0					
ANR	1291799	MemberAccess	plp -> vector . x		1291744	1					
ANR	1291800	PtrMemberAccess	plp -> vector		1291744	0					
ANR	1291801	Identifier	plp		1291744	0					
ANR	1291802	Identifier	vector		1291744	1					
ANR	1291803	Identifier	x		1291744	1					
ANR	1291804	PrimaryExpression	0		1291744	1					
ANR	1291805	ReturnStatement	return any_abs ( wx ) < fixed_half ;	1101:8:45877:45908	1291744	1	True				
ANR	1291806	RelationalExpression	any_abs ( wx ) < fixed_half		1291744	0		<			
ANR	1291807	CallExpression	any_abs ( wx )		1291744	0					
ANR	1291808	Callee	any_abs		1291744	0					
ANR	1291809	Identifier	any_abs		1291744	0					
ANR	1291810	ArgumentList	wx		1291744	1					
ANR	1291811	Argument	wx		1291744	0					
ANR	1291812	Identifier	wx		1291744	0					
ANR	1291813	Identifier	fixed_half		1291744	1					
ANR	1291814	IfStatement	if ( any_abs ( wx ) < fixed_half && any_abs ( wy ) < fixed_half )		1291744	3					
ANR	1291815	Condition	any_abs ( wx ) < fixed_half && any_abs ( wy ) < fixed_half	1107:8:46024:46075	1291744	0	True				
ANR	1291816	AndExpression	any_abs ( wx ) < fixed_half && any_abs ( wy ) < fixed_half		1291744	0		&&			
ANR	1291817	RelationalExpression	any_abs ( wx ) < fixed_half		1291744	0		<			
ANR	1291818	CallExpression	any_abs ( wx )		1291744	0					
ANR	1291819	Callee	any_abs		1291744	0					
ANR	1291820	Identifier	any_abs		1291744	0					
ANR	1291821	ArgumentList	wx		1291744	1					
ANR	1291822	Argument	wx		1291744	0					
ANR	1291823	Identifier	wx		1291744	0					
ANR	1291824	Identifier	fixed_half		1291744	1					
ANR	1291825	RelationalExpression	any_abs ( wy ) < fixed_half		1291744	1		<			
ANR	1291826	CallExpression	any_abs ( wy )		1291744	0					
ANR	1291827	Callee	any_abs		1291744	0					
ANR	1291828	Identifier	any_abs		1291744	0					
ANR	1291829	ArgumentList	wy		1291744	1					
ANR	1291830	Argument	wy		1291744	0					
ANR	1291831	Identifier	wy		1291744	0					
ANR	1291832	Identifier	fixed_half		1291744	1					
ANR	1291833	ReturnStatement	return true ;	1108:8:46086:46097	1291744	1	True				
ANR	1291834	Identifier	true		1291744	0					
ANR	1291835	CompoundStatement		27:8:847:873	1291744	4					
ANR	1291836	IdentifierDeclStatement	"double C = dx , D = dy ;"	1118:8:46412:46433	1291744	0	True				
ANR	1291837	IdentifierDecl	C = dx		1291744	0					
ANR	1291838	IdentifierDeclType	double		1291744	0					
ANR	1291839	Identifier	C		1291744	1					
ANR	1291840	AssignmentExpression	C = dx		1291744	2		=			
ANR	1291841	Identifier	dx		1291744	0					
ANR	1291842	Identifier	dx		1291744	1					
ANR	1291843	IdentifierDecl	D = dy		1291744	1					
ANR	1291844	IdentifierDeclType	double		1291744	0					
ANR	1291845	Identifier	D		1291744	1					
ANR	1291846	AssignmentExpression	D = dy		1291744	2		=			
ANR	1291847	Identifier	dy		1291744	0					
ANR	1291848	Identifier	dy		1291744	1					
ANR	1291849	IdentifierDeclStatement	double num = C * wy - D * wx ;	1119:8:46443:46471	1291744	1	True				
ANR	1291850	IdentifierDecl	num = C * wy - D * wx		1291744	0					
ANR	1291851	IdentifierDeclType	double		1291744	0					
ANR	1291852	Identifier	num		1291744	1					
ANR	1291853	AssignmentExpression	num = C * wy - D * wx		1291744	2		=			
ANR	1291854	Identifier	num		1291744	0					
ANR	1291855	AdditiveExpression	C * wy - D * wx		1291744	1		-			
ANR	1291856	MultiplicativeExpression	C * wy		1291744	0		*			
ANR	1291857	Identifier	C		1291744	0					
ANR	1291858	Identifier	wy		1291744	1					
ANR	1291859	MultiplicativeExpression	D * wx		1291744	1		*			
ANR	1291860	Identifier	D		1291744	0					
ANR	1291861	Identifier	wx		1291744	1					
ANR	1291862	IdentifierDeclStatement	"double denom = hypot ( C , D ) ;"	1120:8:46481:46507	1291744	2	True				
ANR	1291863	IdentifierDecl	"denom = hypot ( C , D )"		1291744	0					
ANR	1291864	IdentifierDeclType	double		1291744	0					
ANR	1291865	Identifier	denom		1291744	1					
ANR	1291866	AssignmentExpression	"denom = hypot ( C , D )"		1291744	2		=			
ANR	1291867	Identifier	denom		1291744	0					
ANR	1291868	CallExpression	"hypot ( C , D )"		1291744	1					
ANR	1291869	Callee	hypot		1291744	0					
ANR	1291870	Identifier	hypot		1291744	0					
ANR	1291871	ArgumentList	C		1291744	1					
ANR	1291872	Argument	C		1291744	0					
ANR	1291873	Identifier	C		1291744	0					
ANR	1291874	Argument	D		1291744	1					
ANR	1291875	Identifier	D		1291744	0					
ANR	1291876	ReturnStatement	return fabs ( num ) < denom * 0.5 ;	1124:8:46646:46676	1291744	3	True				
ANR	1291877	RelationalExpression	fabs ( num ) < denom * 0.5		1291744	0		<			
ANR	1291878	CallExpression	fabs ( num )		1291744	0					
ANR	1291879	Callee	fabs		1291744	0					
ANR	1291880	Identifier	fabs		1291744	0					
ANR	1291881	ArgumentList	num		1291744	1					
ANR	1291882	Argument	num		1291744	0					
ANR	1291883	Identifier	num		1291744	0					
ANR	1291884	MultiplicativeExpression	denom * 0.5		1291744	1		*			
ANR	1291885	Identifier	denom		1291744	0					
ANR	1291886	PrimaryExpression	0.5		1291744	1					
ANR	1291887	ReturnType	static bool		1291744	1					
ANR	1291888	Identifier	width_is_thin		1291744	2					
ANR	1291889	ParameterList	pl_ptr plp		1291744	3					
ANR	1291890	Parameter	pl_ptr plp	1093:14:45621:45630	1291744	0	True				
ANR	1291891	ParameterType	pl_ptr		1291744	0					
ANR	1291892	Identifier	plp		1291744	1					
ANR	1291893	CFGEntryNode	ENTRY		1291744		True				
ANR	1291894	CFGExitNode	EXIT		1291744		True				
ANR	1291895	Symbol	wx		1291744						
ANR	1291896	Symbol	plp -> width . y		1291744						
ANR	1291897	Symbol	wy		1291744						
ANR	1291898	Symbol	plp -> width . x		1291744						
ANR	1291899	Symbol	C		1291744						
ANR	1291900	Symbol	fabs		1291744						
ANR	1291901	Symbol	D		1291744						
ANR	1291902	Symbol	num		1291744						
ANR	1291903	Symbol	plp -> width		1291744						
ANR	1291904	Symbol	dx		1291744						
ANR	1291905	Symbol	plp -> vector		1291744						
ANR	1291906	Symbol	plp		1291744						
ANR	1291907	Symbol	dy		1291744						
ANR	1291908	Symbol	hypot		1291744						
ANR	1291909	Symbol	any_abs		1291744						
ANR	1291910	Symbol	true		1291744						
ANR	1291911	Symbol	fixed_half		1291744						
ANR	1291912	Symbol	plp -> vector . y		1291744						
ANR	1291913	Symbol	plp -> vector . x		1291744						
ANR	1291914	Symbol	denom		1291744						
ANR	1291915	Symbol	* plp		1291744						
ANR	1291916	Function	adjust_stroke_transversal	1129:0:46767:48418							
ANR	1291917	FunctionDef	"adjust_stroke_transversal (pl_ptr plp , const gs_gstate * pgs , bool thin , bool horiz)"		1291916	0					
ANR	1291918	CompoundStatement		1131:0:46863:48418	1291916	0					
ANR	1291919	IdentifierDeclStatement	fixed * pw ;	1132:4:46869:46878	1291916	0	True				
ANR	1291920	IdentifierDecl	* pw		1291916	0					
ANR	1291921	IdentifierDeclType	fixed *		1291916	0					
ANR	1291922	Identifier	pw		1291916	1					
ANR	1291923	IdentifierDeclStatement	fixed * pov ;	1133:4:46884:46894	1291916	1	True				
ANR	1291924	IdentifierDecl	* pov		1291916	0					
ANR	1291925	IdentifierDeclType	fixed *		1291916	0					
ANR	1291926	Identifier	pov		1291916	1					
ANR	1291927	IdentifierDeclStatement	fixed * pev ;	1134:4:46900:46910	1291916	2	True				
ANR	1291928	IdentifierDecl	* pev		1291916	0					
ANR	1291929	IdentifierDeclType	fixed *		1291916	0					
ANR	1291930	Identifier	pev		1291916	1					
ANR	1291931	IdentifierDeclStatement	"fixed w , w2 ;"	1135:4:46916:46927	1291916	3	True				
ANR	1291932	IdentifierDecl	w		1291916	0					
ANR	1291933	IdentifierDeclType	fixed		1291916	0					
ANR	1291934	Identifier	w		1291916	1					
ANR	1291935	IdentifierDecl	w2		1291916	1					
ANR	1291936	IdentifierDeclType	fixed		1291916	0					
ANR	1291937	Identifier	w2		1291916	1					
ANR	1291938	IdentifierDeclStatement	fixed adj2 ;	1136:4:46933:46943	1291916	4	True				
ANR	1291939	IdentifierDecl	adj2		1291916	0					
ANR	1291940	IdentifierDeclType	fixed		1291916	0					
ANR	1291941	Identifier	adj2		1291916	1					
ANR	1291942	IfStatement	if ( horiz )		1291916	5					
ANR	1291943	Condition	horiz	1138:8:46954:46958	1291916	0	True				
ANR	1291944	Identifier	horiz		1291916	0					
ANR	1291945	CompoundStatement		8:15:97:97	1291916	1					
ANR	1291946	ExpressionStatement	"pw = & plp -> width . y , pov = & plp -> o . p . y , pev = & plp -> e . p . y"	1140:8:47008:47064	1291916	0	True				
ANR	1291947	Expression	"pw = & plp -> width . y , pov = & plp -> o . p . y , pev = & plp -> e . p . y"		1291916	0					
ANR	1291948	AssignmentExpression	pw = & plp -> width . y		1291916	0		=			
ANR	1291949	Identifier	pw		1291916	0					
ANR	1291950	UnaryOperationExpression	& plp -> width . y		1291916	1					
ANR	1291951	UnaryOperator	&		1291916	0					
ANR	1291952	MemberAccess	plp -> width . y		1291916	1					
ANR	1291953	PtrMemberAccess	plp -> width		1291916	0					
ANR	1291954	Identifier	plp		1291916	0					
ANR	1291955	Identifier	width		1291916	1					
ANR	1291956	Identifier	y		1291916	1					
ANR	1291957	Expression	"pov = & plp -> o . p . y , pev = & plp -> e . p . y"		1291916	1					
ANR	1291958	AssignmentExpression	pov = & plp -> o . p . y		1291916	0		=			
ANR	1291959	Identifier	pov		1291916	0					
ANR	1291960	UnaryOperationExpression	& plp -> o . p . y		1291916	1					
ANR	1291961	UnaryOperator	&		1291916	0					
ANR	1291962	MemberAccess	plp -> o . p . y		1291916	1					
ANR	1291963	MemberAccess	plp -> o . p		1291916	0					
ANR	1291964	PtrMemberAccess	plp -> o		1291916	0					
ANR	1291965	Identifier	plp		1291916	0					
ANR	1291966	Identifier	o		1291916	1					
ANR	1291967	Identifier	p		1291916	1					
ANR	1291968	Identifier	y		1291916	1					
ANR	1291969	AssignmentExpression	pev = & plp -> e . p . y		1291916	1		=			
ANR	1291970	Identifier	pev		1291916	0					
ANR	1291971	UnaryOperationExpression	& plp -> e . p . y		1291916	1					
ANR	1291972	UnaryOperator	&		1291916	0					
ANR	1291973	MemberAccess	plp -> e . p . y		1291916	1					
ANR	1291974	MemberAccess	plp -> e . p		1291916	0					
ANR	1291975	PtrMemberAccess	plp -> e		1291916	0					
ANR	1291976	Identifier	plp		1291916	0					
ANR	1291977	Identifier	e		1291916	1					
ANR	1291978	Identifier	p		1291916	1					
ANR	1291979	Identifier	y		1291916	1					
ANR	1291980	ExpressionStatement	"adj2 = STROKE_ADJUSTMENT ( thin , pgs , y ) << 1"	1141:8:47074:47117	1291916	1	True				
ANR	1291981	AssignmentExpression	"adj2 = STROKE_ADJUSTMENT ( thin , pgs , y ) << 1"		1291916	0		=			
ANR	1291982	Identifier	adj2		1291916	0					
ANR	1291983	ShiftExpression	"STROKE_ADJUSTMENT ( thin , pgs , y ) << 1"		1291916	1		<<			
ANR	1291984	CallExpression	"STROKE_ADJUSTMENT ( thin , pgs , y )"		1291916	0					
ANR	1291985	Callee	STROKE_ADJUSTMENT		1291916	0					
ANR	1291986	Identifier	STROKE_ADJUSTMENT		1291916	0					
ANR	1291987	ArgumentList	thin		1291916	1					
ANR	1291988	Argument	thin		1291916	0					
ANR	1291989	Identifier	thin		1291916	0					
ANR	1291990	Argument	pgs		1291916	1					
ANR	1291991	Identifier	pgs		1291916	0					
ANR	1291992	Argument	y		1291916	2					
ANR	1291993	Identifier	y		1291916	0					
ANR	1291994	PrimaryExpression	1		1291916	1					
ANR	1291995	ElseStatement	else		1291916	0					
ANR	1291996	CompoundStatement		12:11:266:266	1291916	0					
ANR	1291997	ExpressionStatement	"pw = & plp -> width . x , pov = & plp -> o . p . x , pev = & plp -> e . p . x"	1144:8:47175:47231	1291916	0	True				
ANR	1291998	Expression	"pw = & plp -> width . x , pov = & plp -> o . p . x , pev = & plp -> e . p . x"		1291916	0					
ANR	1291999	AssignmentExpression	pw = & plp -> width . x		1291916	0		=			
ANR	1292000	Identifier	pw		1291916	0					
ANR	1292001	UnaryOperationExpression	& plp -> width . x		1291916	1					
ANR	1292002	UnaryOperator	&		1291916	0					
ANR	1292003	MemberAccess	plp -> width . x		1291916	1					
ANR	1292004	PtrMemberAccess	plp -> width		1291916	0					
ANR	1292005	Identifier	plp		1291916	0					
ANR	1292006	Identifier	width		1291916	1					
ANR	1292007	Identifier	x		1291916	1					
ANR	1292008	Expression	"pov = & plp -> o . p . x , pev = & plp -> e . p . x"		1291916	1					
ANR	1292009	AssignmentExpression	pov = & plp -> o . p . x		1291916	0		=			
ANR	1292010	Identifier	pov		1291916	0					
ANR	1292011	UnaryOperationExpression	& plp -> o . p . x		1291916	1					
ANR	1292012	UnaryOperator	&		1291916	0					
ANR	1292013	MemberAccess	plp -> o . p . x		1291916	1					
ANR	1292014	MemberAccess	plp -> o . p		1291916	0					
ANR	1292015	PtrMemberAccess	plp -> o		1291916	0					
ANR	1292016	Identifier	plp		1291916	0					
ANR	1292017	Identifier	o		1291916	1					
ANR	1292018	Identifier	p		1291916	1					
ANR	1292019	Identifier	x		1291916	1					
ANR	1292020	AssignmentExpression	pev = & plp -> e . p . x		1291916	1		=			
ANR	1292021	Identifier	pev		1291916	0					
ANR	1292022	UnaryOperationExpression	& plp -> e . p . x		1291916	1					
ANR	1292023	UnaryOperator	&		1291916	0					
ANR	1292024	MemberAccess	plp -> e . p . x		1291916	1					
ANR	1292025	MemberAccess	plp -> e . p		1291916	0					
ANR	1292026	PtrMemberAccess	plp -> e		1291916	0					
ANR	1292027	Identifier	plp		1291916	0					
ANR	1292028	Identifier	e		1291916	1					
ANR	1292029	Identifier	p		1291916	1					
ANR	1292030	Identifier	x		1291916	1					
ANR	1292031	ExpressionStatement	"adj2 = STROKE_ADJUSTMENT ( thin , pgs , x ) << 1"	1145:8:47241:47284	1291916	1	True				
ANR	1292032	AssignmentExpression	"adj2 = STROKE_ADJUSTMENT ( thin , pgs , x ) << 1"		1291916	0		=			
ANR	1292033	Identifier	adj2		1291916	0					
ANR	1292034	ShiftExpression	"STROKE_ADJUSTMENT ( thin , pgs , x ) << 1"		1291916	1		<<			
ANR	1292035	CallExpression	"STROKE_ADJUSTMENT ( thin , pgs , x )"		1291916	0					
ANR	1292036	Callee	STROKE_ADJUSTMENT		1291916	0					
ANR	1292037	Identifier	STROKE_ADJUSTMENT		1291916	0					
ANR	1292038	ArgumentList	thin		1291916	1					
ANR	1292039	Argument	thin		1291916	0					
ANR	1292040	Identifier	thin		1291916	0					
ANR	1292041	Argument	pgs		1291916	1					
ANR	1292042	Identifier	pgs		1291916	0					
ANR	1292043	Argument	x		1291916	2					
ANR	1292044	Identifier	x		1291916	0					
ANR	1292045	PrimaryExpression	1		1291916	1					
ANR	1292046	ExpressionStatement	w = * pw	1151:4:47530:47537	1291916	6	True				
ANR	1292047	AssignmentExpression	w = * pw		1291916	0		=			
ANR	1292048	Identifier	w		1291916	0					
ANR	1292049	UnaryOperationExpression	* pw		1291916	1					
ANR	1292050	UnaryOperator	*		1291916	0					
ANR	1292051	Identifier	pw		1291916	1					
ANR	1292052	IfStatement	if ( w > 0 )		1291916	7					
ANR	1292053	Condition	w > 0	1152:8:47547:47551	1291916	0	True				
ANR	1292054	RelationalExpression	w > 0		1291916	0		>			
ANR	1292055	Identifier	w		1291916	0					
ANR	1292056	PrimaryExpression	0		1291916	1					
ANR	1292057	ExpressionStatement	w2 = fixed_rounded ( w << 1 )	1153:8:47562:47588	1291916	1	True				
ANR	1292058	AssignmentExpression	w2 = fixed_rounded ( w << 1 )		1291916	0		=			
ANR	1292059	Identifier	w2		1291916	0					
ANR	1292060	CallExpression	fixed_rounded ( w << 1 )		1291916	1					
ANR	1292061	Callee	fixed_rounded		1291916	0					
ANR	1292062	Identifier	fixed_rounded		1291916	0					
ANR	1292063	ArgumentList	w << 1		1291916	1					
ANR	1292064	Argument	w << 1		1291916	0					
ANR	1292065	ShiftExpression	w << 1		1291916	0		<<			
ANR	1292066	Identifier	w		1291916	0					
ANR	1292067	PrimaryExpression	1		1291916	1					
ANR	1292068	ElseStatement	else		1291916	0					
ANR	1292069	ExpressionStatement	w2 = - fixed_rounded ( - w << 1 )	1155:8:47633:47661	1291916	0	True				
ANR	1292070	AssignmentExpression	w2 = - fixed_rounded ( - w << 1 )		1291916	0		=			
ANR	1292071	Identifier	w2		1291916	0					
ANR	1292072	UnaryOperationExpression	- fixed_rounded ( - w << 1 )		1291916	1					
ANR	1292073	UnaryOperator	-		1291916	0					
ANR	1292074	CallExpression	fixed_rounded ( - w << 1 )		1291916	1					
ANR	1292075	Callee	fixed_rounded		1291916	0					
ANR	1292076	Identifier	fixed_rounded		1291916	0					
ANR	1292077	ArgumentList	- w << 1		1291916	1					
ANR	1292078	Argument	- w << 1		1291916	0					
ANR	1292079	ShiftExpression	- w << 1		1291916	0		<<			
ANR	1292080	UnaryOperationExpression	- w		1291916	0					
ANR	1292081	UnaryOperator	-		1291916	0					
ANR	1292082	Identifier	w		1291916	1					
ANR	1292083	PrimaryExpression	1		1291916	1					
ANR	1292084	IfStatement	if ( w2 == 0 && * pw != 0 )		1291916	8					
ANR	1292085	Condition	w2 == 0 && * pw != 0	1156:8:47695:47713	1291916	0	True				
ANR	1292086	AndExpression	w2 == 0 && * pw != 0		1291916	0		&&			
ANR	1292087	EqualityExpression	w2 == 0		1291916	0		==			
ANR	1292088	Identifier	w2		1291916	0					
ANR	1292089	PrimaryExpression	0		1291916	1					
ANR	1292090	EqualityExpression	* pw != 0		1291916	1		!=			
ANR	1292091	UnaryOperationExpression	* pw		1291916	0					
ANR	1292092	UnaryOperator	*		1291916	0					
ANR	1292093	Identifier	pw		1291916	1					
ANR	1292094	PrimaryExpression	0		1291916	1					
ANR	1292095	CompoundStatement		26:29:852:852	1291916	1					
ANR	1292096	ExpressionStatement	w2 = ( * pw < 0 ? - fixed_1 + adj2 : fixed_1 - adj2 )	1158:8:47778:47827	1291916	0	True				
ANR	1292097	AssignmentExpression	w2 = ( * pw < 0 ? - fixed_1 + adj2 : fixed_1 - adj2 )		1291916	0		=			
ANR	1292098	Identifier	w2		1291916	0					
ANR	1292099	ConditionalExpression	* pw < 0 ? - fixed_1 + adj2 : fixed_1 - adj2		1291916	1					
ANR	1292100	Condition	* pw < 0		1291916	0					
ANR	1292101	RelationalExpression	* pw < 0		1291916	0		<			
ANR	1292102	UnaryOperationExpression	* pw		1291916	0					
ANR	1292103	UnaryOperator	*		1291916	0					
ANR	1292104	Identifier	pw		1291916	1					
ANR	1292105	PrimaryExpression	0		1291916	1					
ANR	1292106	AdditiveExpression	- fixed_1 + adj2		1291916	1		+			
ANR	1292107	UnaryOperationExpression	- fixed_1		1291916	0					
ANR	1292108	UnaryOperator	-		1291916	0					
ANR	1292109	Identifier	fixed_1		1291916	1					
ANR	1292110	Identifier	adj2		1291916	1					
ANR	1292111	AdditiveExpression	fixed_1 - adj2		1291916	2		-			
ANR	1292112	Identifier	fixed_1		1291916	0					
ANR	1292113	Identifier	adj2		1291916	1					
ANR	1292114	ExpressionStatement	* pw = arith_rshift_1 ( w2 )	1159:8:47837:47861	1291916	1	True				
ANR	1292115	AssignmentExpression	* pw = arith_rshift_1 ( w2 )		1291916	0		=			
ANR	1292116	UnaryOperationExpression	* pw		1291916	0					
ANR	1292117	UnaryOperator	*		1291916	0					
ANR	1292118	Identifier	pw		1291916	1					
ANR	1292119	CallExpression	arith_rshift_1 ( w2 )		1291916	1					
ANR	1292120	Callee	arith_rshift_1		1291916	0					
ANR	1292121	Identifier	arith_rshift_1		1291916	0					
ANR	1292122	ArgumentList	w2		1291916	1					
ANR	1292123	Argument	w2		1291916	0					
ANR	1292124	Identifier	w2		1291916	0					
ANR	1292125	IfStatement	if ( * pov == * pev )		1291916	9					
ANR	1292126	Condition	* pov == * pev	1162:8:47952:47963	1291916	0	True				
ANR	1292127	EqualityExpression	* pov == * pev		1291916	0		==			
ANR	1292128	UnaryOperationExpression	* pov		1291916	0					
ANR	1292129	UnaryOperator	*		1291916	0					
ANR	1292130	Identifier	pov		1291916	1					
ANR	1292131	UnaryOperationExpression	* pev		1291916	1					
ANR	1292132	UnaryOperator	*		1291916	0					
ANR	1292133	Identifier	pev		1291916	1					
ANR	1292134	CompoundStatement		32:22:1102:1102	1291916	1					
ANR	1292135	IfStatement	if ( w >= 0 )		1291916	0					
ANR	1292136	Condition	w >= 0	1165:12:48101:48106	1291916	0	True				
ANR	1292137	RelationalExpression	w >= 0		1291916	0		>=			
ANR	1292138	Identifier	w		1291916	0					
ANR	1292139	PrimaryExpression	0		1291916	1					
ANR	1292140	ExpressionStatement	w2 += adj2	1166:12:48121:48131	1291916	1	True				
ANR	1292141	AssignmentExpression	w2 += adj2		1291916	0		+=			
ANR	1292142	Identifier	w2		1291916	0					
ANR	1292143	Identifier	adj2		1291916	1					
ANR	1292144	ElseStatement	else		1291916	0					
ANR	1292145	ExpressionStatement	w2 = adj2 - w2	1168:12:48158:48172	1291916	0	True				
ANR	1292146	AssignmentExpression	w2 = adj2 - w2		1291916	0		=			
ANR	1292147	Identifier	w2		1291916	0					
ANR	1292148	AdditiveExpression	adj2 - w2		1291916	1		-			
ANR	1292149	Identifier	adj2		1291916	0					
ANR	1292150	Identifier	w2		1291916	1					
ANR	1292151	IfStatement	if ( w2 & fixed_1 )		1291916	1					
ANR	1292152	Condition	w2 & fixed_1	1169:12:48186:48197	1291916	0	True				
ANR	1292153	BitAndExpression	w2 & fixed_1		1291916	0		&			
ANR	1292154	Identifier	w2		1291916	0					
ANR	1292155	Identifier	fixed_1		1291916	1					
ANR	1292156	ExpressionStatement	* pov = * pev = fixed_floor ( * pov ) + fixed_half	1170:12:48254:48298	1291916	1	True				
ANR	1292157	AssignmentExpression	* pov = * pev = fixed_floor ( * pov ) + fixed_half		1291916	0		=			
ANR	1292158	UnaryOperationExpression	* pov		1291916	0					
ANR	1292159	UnaryOperator	*		1291916	0					
ANR	1292160	Identifier	pov		1291916	1					
ANR	1292161	AssignmentExpression	* pev = fixed_floor ( * pov ) + fixed_half		1291916	1		=			
ANR	1292162	UnaryOperationExpression	* pev		1291916	0					
ANR	1292163	UnaryOperator	*		1291916	0					
ANR	1292164	Identifier	pev		1291916	1					
ANR	1292165	AdditiveExpression	fixed_floor ( * pov ) + fixed_half		1291916	1		+			
ANR	1292166	CallExpression	fixed_floor ( * pov )		1291916	0					
ANR	1292167	Callee	fixed_floor		1291916	0					
ANR	1292168	Identifier	fixed_floor		1291916	0					
ANR	1292169	ArgumentList	* pov		1291916	1					
ANR	1292170	Argument	* pov		1291916	0					
ANR	1292171	UnaryOperationExpression	* pov		1291916	0					
ANR	1292172	UnaryOperator	*		1291916	0					
ANR	1292173	Identifier	pov		1291916	1					
ANR	1292174	Identifier	fixed_half		1291916	1					
ANR	1292175	ElseStatement	else		1291916	0					
ANR	1292176	ExpressionStatement	* pov = * pev = fixed_rounded ( * pov )	1172:12:48376:48409	1291916	0	True				
ANR	1292177	AssignmentExpression	* pov = * pev = fixed_rounded ( * pov )		1291916	0		=			
ANR	1292178	UnaryOperationExpression	* pov		1291916	0					
ANR	1292179	UnaryOperator	*		1291916	0					
ANR	1292180	Identifier	pov		1291916	1					
ANR	1292181	AssignmentExpression	* pev = fixed_rounded ( * pov )		1291916	1		=			
ANR	1292182	UnaryOperationExpression	* pev		1291916	0					
ANR	1292183	UnaryOperator	*		1291916	0					
ANR	1292184	Identifier	pev		1291916	1					
ANR	1292185	CallExpression	fixed_rounded ( * pov )		1291916	1					
ANR	1292186	Callee	fixed_rounded		1291916	0					
ANR	1292187	Identifier	fixed_rounded		1291916	0					
ANR	1292188	ArgumentList	* pov		1291916	1					
ANR	1292189	Argument	* pov		1291916	0					
ANR	1292190	UnaryOperationExpression	* pov		1291916	0					
ANR	1292191	UnaryOperator	*		1291916	0					
ANR	1292192	Identifier	pov		1291916	1					
ANR	1292193	ReturnType	static void		1291916	1					
ANR	1292194	Identifier	adjust_stroke_transversal		1291916	2					
ANR	1292195	ParameterList	"pl_ptr plp , const gs_gstate * pgs , bool thin , bool horiz"		1291916	3					
ANR	1292196	Parameter	pl_ptr plp	1130:26:46805:46814	1291916	0	True				
ANR	1292197	ParameterType	pl_ptr		1291916	0					
ANR	1292198	Identifier	plp		1291916	1					
ANR	1292199	Parameter	const gs_gstate * pgs	1130:38:46817:46837	1291916	1	True				
ANR	1292200	ParameterType	const gs_gstate *		1291916	0					
ANR	1292201	Identifier	pgs		1291916	1					
ANR	1292202	Parameter	bool thin	1130:61:46840:46848	1291916	2	True				
ANR	1292203	ParameterType	bool		1291916	0					
ANR	1292204	Identifier	thin		1291916	1					
ANR	1292205	Parameter	bool horiz	1130:72:46851:46860	1291916	3	True				
ANR	1292206	ParameterType	bool		1291916	0					
ANR	1292207	Identifier	horiz		1291916	1					
ANR	1292208	CFGEntryNode	ENTRY		1291916		True				
ANR	1292209	CFGExitNode	EXIT		1291916		True				
ANR	1292210	Symbol	* pov		1291916						
ANR	1292211	Symbol	fixed_floor		1291916						
ANR	1292212	Symbol	adj2		1291916						
ANR	1292213	Symbol	pw		1291916						
ANR	1292214	Symbol	& plp -> o . p		1291916						
ANR	1292215	Symbol	plp -> o . p		1291916						
ANR	1292216	Symbol	* pev		1291916						
ANR	1292217	Symbol	& plp -> e		1291916						
ANR	1292218	Symbol	plp -> width		1291916						
ANR	1292219	Symbol	horiz		1291916						
ANR	1292220	Symbol	& plp -> o . p . x		1291916						
ANR	1292221	Symbol	fixed_1		1291916						
ANR	1292222	Symbol	& plp -> o . p . y		1291916						
ANR	1292223	Symbol	pov		1291916						
ANR	1292224	Symbol	STROKE_ADJUSTMENT		1291916						
ANR	1292225	Symbol	fixed_half		1291916						
ANR	1292226	Symbol	w2		1291916						
ANR	1292227	Symbol	pgs		1291916						
ANR	1292228	Symbol	& plp -> width		1291916						
ANR	1292229	Symbol	* plp		1291916						
ANR	1292230	Symbol	pev		1291916						
ANR	1292231	Symbol	arith_rshift_1		1291916						
ANR	1292232	Symbol	& plp -> width . y		1291916						
ANR	1292233	Symbol	& plp -> width . x		1291916						
ANR	1292234	Symbol	* pw		1291916						
ANR	1292235	Symbol	thin		1291916						
ANR	1292236	Symbol	& plp -> e . p . x		1291916						
ANR	1292237	Symbol	& plp -> e . p . y		1291916						
ANR	1292238	Symbol	plp -> e . p		1291916						
ANR	1292239	Symbol	plp		1291916						
ANR	1292240	Symbol	& plp -> o		1291916						
ANR	1292241	Symbol	w		1291916						
ANR	1292242	Symbol	plp -> o		1291916						
ANR	1292243	Symbol	x		1291916						
ANR	1292244	Symbol	plp -> e		1291916						
ANR	1292245	Symbol	y		1291916						
ANR	1292246	Symbol	& plp -> e . p		1291916						
ANR	1292247	Symbol	fixed_rounded		1291916						
ANR	1292248	Function	adjust_stroke_longitude	1177:0:48421:50462							
ANR	1292249	FunctionDef	"adjust_stroke_longitude (pl_ptr plp , const gs_gstate * pgs , bool thin , bool horiz , gs_line_cap start_cap , gs_line_cap end_cap)"		1292248	0					
ANR	1292250	CompoundStatement		1181:0:48607:50462	1292248	0					
ANR	1292251	IdentifierDeclStatement	fixed * pow = ( horiz ? & plp -> o . p . y : & plp -> o . p . x ) ;	1183:4:48614:48662	1292248	0	True				
ANR	1292252	IdentifierDecl	* pow = ( horiz ? & plp -> o . p . y : & plp -> o . p . x )		1292248	0					
ANR	1292253	IdentifierDeclType	fixed *		1292248	0					
ANR	1292254	Identifier	pow		1292248	1					
ANR	1292255	AssignmentExpression	* pow = ( horiz ? & plp -> o . p . y : & plp -> o . p . x )		1292248	2		=			
ANR	1292256	Identifier	pow		1292248	0					
ANR	1292257	ConditionalExpression	horiz ? & plp -> o . p . y : & plp -> o . p . x		1292248	1					
ANR	1292258	Condition	horiz		1292248	0					
ANR	1292259	Identifier	horiz		1292248	0					
ANR	1292260	UnaryOperationExpression	& plp -> o . p . y		1292248	1					
ANR	1292261	UnaryOperator	&		1292248	0					
ANR	1292262	MemberAccess	plp -> o . p . y		1292248	1					
ANR	1292263	MemberAccess	plp -> o . p		1292248	0					
ANR	1292264	PtrMemberAccess	plp -> o		1292248	0					
ANR	1292265	Identifier	plp		1292248	0					
ANR	1292266	Identifier	o		1292248	1					
ANR	1292267	Identifier	p		1292248	1					
ANR	1292268	Identifier	y		1292248	1					
ANR	1292269	UnaryOperationExpression	& plp -> o . p . x		1292248	2					
ANR	1292270	UnaryOperator	&		1292248	0					
ANR	1292271	MemberAccess	plp -> o . p . x		1292248	1					
ANR	1292272	MemberAccess	plp -> o . p		1292248	0					
ANR	1292273	PtrMemberAccess	plp -> o		1292248	0					
ANR	1292274	Identifier	plp		1292248	0					
ANR	1292275	Identifier	o		1292248	1					
ANR	1292276	Identifier	p		1292248	1					
ANR	1292277	Identifier	x		1292248	1					
ANR	1292278	IdentifierDeclStatement	fixed * pew = ( horiz ? & plp -> e . p . y : & plp -> e . p . x ) ;	1184:4:48668:48716	1292248	1	True				
ANR	1292279	IdentifierDecl	* pew = ( horiz ? & plp -> e . p . y : & plp -> e . p . x )		1292248	0					
ANR	1292280	IdentifierDeclType	fixed *		1292248	0					
ANR	1292281	Identifier	pew		1292248	1					
ANR	1292282	AssignmentExpression	* pew = ( horiz ? & plp -> e . p . y : & plp -> e . p . x )		1292248	2		=			
ANR	1292283	Identifier	pew		1292248	0					
ANR	1292284	ConditionalExpression	horiz ? & plp -> e . p . y : & plp -> e . p . x		1292248	1					
ANR	1292285	Condition	horiz		1292248	0					
ANR	1292286	Identifier	horiz		1292248	0					
ANR	1292287	UnaryOperationExpression	& plp -> e . p . y		1292248	1					
ANR	1292288	UnaryOperator	&		1292248	0					
ANR	1292289	MemberAccess	plp -> e . p . y		1292248	1					
ANR	1292290	MemberAccess	plp -> e . p		1292248	0					
ANR	1292291	PtrMemberAccess	plp -> e		1292248	0					
ANR	1292292	Identifier	plp		1292248	0					
ANR	1292293	Identifier	e		1292248	1					
ANR	1292294	Identifier	p		1292248	1					
ANR	1292295	Identifier	y		1292248	1					
ANR	1292296	UnaryOperationExpression	& plp -> e . p . x		1292248	2					
ANR	1292297	UnaryOperator	&		1292248	0					
ANR	1292298	MemberAccess	plp -> e . p . x		1292248	1					
ANR	1292299	MemberAccess	plp -> e . p		1292248	0					
ANR	1292300	PtrMemberAccess	plp -> e		1292248	0					
ANR	1292301	Identifier	plp		1292248	0					
ANR	1292302	Identifier	e		1292248	1					
ANR	1292303	Identifier	p		1292248	1					
ANR	1292304	Identifier	x		1292248	1					
ANR	1292305	IfStatement	if ( * pow == * pew )		1292248	2					
ANR	1292306	Condition	* pow == * pew	1188:8:48856:48867	1292248	0	True				
ANR	1292307	EqualityExpression	* pow == * pew		1292248	0		==			
ANR	1292308	UnaryOperationExpression	* pow		1292248	0					
ANR	1292309	UnaryOperator	*		1292248	0					
ANR	1292310	Identifier	pow		1292248	1					
ANR	1292311	UnaryOperationExpression	* pew		1292248	1					
ANR	1292312	UnaryOperator	*		1292248	0					
ANR	1292313	Identifier	pew		1292248	1					
ANR	1292314	CompoundStatement		14:8:513:634	1292248	1					
ANR	1292315	IdentifierDeclStatement	fixed * pov = ( horiz ? & plp -> o . p . x : & plp -> o . p . y ) ;	1189:8:48880:48928	1292248	0	True				
ANR	1292316	IdentifierDecl	* pov = ( horiz ? & plp -> o . p . x : & plp -> o . p . y )		1292248	0					
ANR	1292317	IdentifierDeclType	fixed *		1292248	0					
ANR	1292318	Identifier	pov		1292248	1					
ANR	1292319	AssignmentExpression	* pov = ( horiz ? & plp -> o . p . x : & plp -> o . p . y )		1292248	2		=			
ANR	1292320	Identifier	pov		1292248	0					
ANR	1292321	ConditionalExpression	horiz ? & plp -> o . p . x : & plp -> o . p . y		1292248	1					
ANR	1292322	Condition	horiz		1292248	0					
ANR	1292323	Identifier	horiz		1292248	0					
ANR	1292324	UnaryOperationExpression	& plp -> o . p . x		1292248	1					
ANR	1292325	UnaryOperator	&		1292248	0					
ANR	1292326	MemberAccess	plp -> o . p . x		1292248	1					
ANR	1292327	MemberAccess	plp -> o . p		1292248	0					
ANR	1292328	PtrMemberAccess	plp -> o		1292248	0					
ANR	1292329	Identifier	plp		1292248	0					
ANR	1292330	Identifier	o		1292248	1					
ANR	1292331	Identifier	p		1292248	1					
ANR	1292332	Identifier	x		1292248	1					
ANR	1292333	UnaryOperationExpression	& plp -> o . p . y		1292248	2					
ANR	1292334	UnaryOperator	&		1292248	0					
ANR	1292335	MemberAccess	plp -> o . p . y		1292248	1					
ANR	1292336	MemberAccess	plp -> o . p		1292248	0					
ANR	1292337	PtrMemberAccess	plp -> o		1292248	0					
ANR	1292338	Identifier	plp		1292248	0					
ANR	1292339	Identifier	o		1292248	1					
ANR	1292340	Identifier	p		1292248	1					
ANR	1292341	Identifier	y		1292248	1					
ANR	1292342	IdentifierDeclStatement	fixed * pev = ( horiz ? & plp -> e . p . x : & plp -> e . p . y ) ;	1190:8:48938:48986	1292248	1	True				
ANR	1292343	IdentifierDecl	* pev = ( horiz ? & plp -> e . p . x : & plp -> e . p . y )		1292248	0					
ANR	1292344	IdentifierDeclType	fixed *		1292248	0					
ANR	1292345	Identifier	pev		1292248	1					
ANR	1292346	AssignmentExpression	* pev = ( horiz ? & plp -> e . p . x : & plp -> e . p . y )		1292248	2		=			
ANR	1292347	Identifier	pev		1292248	0					
ANR	1292348	ConditionalExpression	horiz ? & plp -> e . p . x : & plp -> e . p . y		1292248	1					
ANR	1292349	Condition	horiz		1292248	0					
ANR	1292350	Identifier	horiz		1292248	0					
ANR	1292351	UnaryOperationExpression	& plp -> e . p . x		1292248	1					
ANR	1292352	UnaryOperator	&		1292248	0					
ANR	1292353	MemberAccess	plp -> e . p . x		1292248	1					
ANR	1292354	MemberAccess	plp -> e . p		1292248	0					
ANR	1292355	PtrMemberAccess	plp -> e		1292248	0					
ANR	1292356	Identifier	plp		1292248	0					
ANR	1292357	Identifier	e		1292248	1					
ANR	1292358	Identifier	p		1292248	1					
ANR	1292359	Identifier	x		1292248	1					
ANR	1292360	UnaryOperationExpression	& plp -> e . p . y		1292248	2					
ANR	1292361	UnaryOperator	&		1292248	0					
ANR	1292362	MemberAccess	plp -> e . p . y		1292248	1					
ANR	1292363	MemberAccess	plp -> e . p		1292248	0					
ANR	1292364	PtrMemberAccess	plp -> e		1292248	0					
ANR	1292365	Identifier	plp		1292248	0					
ANR	1292366	Identifier	e		1292248	1					
ANR	1292367	Identifier	p		1292248	1					
ANR	1292368	Identifier	y		1292248	1					
ANR	1292369	IdentifierDeclStatement	fixed length = any_abs ( * pov - * pev ) ;	1191:8:48996:49031	1292248	2	True				
ANR	1292370	IdentifierDecl	length = any_abs ( * pov - * pev )		1292248	0					
ANR	1292371	IdentifierDeclType	fixed		1292248	0					
ANR	1292372	Identifier	length		1292248	1					
ANR	1292373	AssignmentExpression	length = any_abs ( * pov - * pev )		1292248	2		=			
ANR	1292374	Identifier	length		1292248	0					
ANR	1292375	CallExpression	any_abs ( * pov - * pev )		1292248	1					
ANR	1292376	Callee	any_abs		1292248	0					
ANR	1292377	Identifier	any_abs		1292248	0					
ANR	1292378	ArgumentList	* pov - * pev		1292248	1					
ANR	1292379	Argument	* pov - * pev		1292248	0					
ANR	1292380	AdditiveExpression	* pov - * pev		1292248	0		-			
ANR	1292381	UnaryOperationExpression	* pov		1292248	0					
ANR	1292382	UnaryOperator	*		1292248	0					
ANR	1292383	Identifier	pov		1292248	1					
ANR	1292384	UnaryOperationExpression	* pev		1292248	1					
ANR	1292385	UnaryOperator	*		1292248	0					
ANR	1292386	Identifier	pev		1292248	1					
ANR	1292387	IdentifierDeclStatement	"fixed length_r , length_r_2 ;"	1192:8:49041:49067	1292248	3	True				
ANR	1292388	IdentifierDecl	length_r		1292248	0					
ANR	1292389	IdentifierDeclType	fixed		1292248	0					
ANR	1292390	Identifier	length_r		1292248	1					
ANR	1292391	IdentifierDecl	length_r_2		1292248	1					
ANR	1292392	IdentifierDeclType	fixed		1292248	0					
ANR	1292393	Identifier	length_r_2		1292248	1					
ANR	1292394	IdentifierDeclStatement	"fixed mv = ( * pov + * pev ) / 2 , mv_r ;"	1193:8:49077:49111	1292248	4	True				
ANR	1292395	IdentifierDecl	mv = ( * pov + * pev ) / 2		1292248	0					
ANR	1292396	IdentifierDeclType	fixed		1292248	0					
ANR	1292397	Identifier	mv		1292248	1					
ANR	1292398	AssignmentExpression	mv = ( * pov + * pev ) / 2		1292248	2		=			
ANR	1292399	Identifier	mv		1292248	0					
ANR	1292400	MultiplicativeExpression	( * pov + * pev ) / 2		1292248	1		/			
ANR	1292401	AdditiveExpression	* pov + * pev		1292248	0		+			
ANR	1292402	UnaryOperationExpression	* pov		1292248	0					
ANR	1292403	UnaryOperator	*		1292248	0					
ANR	1292404	Identifier	pov		1292248	1					
ANR	1292405	UnaryOperationExpression	* pev		1292248	1					
ANR	1292406	UnaryOperator	*		1292248	0					
ANR	1292407	Identifier	pev		1292248	1					
ANR	1292408	PrimaryExpression	2		1292248	1					
ANR	1292409	IdentifierDecl	mv_r		1292248	1					
ANR	1292410	IdentifierDeclType	fixed		1292248	0					
ANR	1292411	Identifier	mv_r		1292248	1					
ANR	1292412	IdentifierDeclStatement	"fixed adj2 = ( horiz ? STROKE_ADJUSTMENT ( thin , pgs , x ) : STROKE_ADJUSTMENT ( thin , pgs , y ) ) << 1 ;"	1194:8:49121:49242	1292248	5	True				
ANR	1292413	IdentifierDecl	"adj2 = ( horiz ? STROKE_ADJUSTMENT ( thin , pgs , x ) : STROKE_ADJUSTMENT ( thin , pgs , y ) ) << 1"		1292248	0					
ANR	1292414	IdentifierDeclType	fixed		1292248	0					
ANR	1292415	Identifier	adj2		1292248	1					
ANR	1292416	AssignmentExpression	"adj2 = ( horiz ? STROKE_ADJUSTMENT ( thin , pgs , x ) : STROKE_ADJUSTMENT ( thin , pgs , y ) ) << 1"		1292248	2		=			
ANR	1292417	Identifier	adj2		1292248	0					
ANR	1292418	ShiftExpression	"( horiz ? STROKE_ADJUSTMENT ( thin , pgs , x ) : STROKE_ADJUSTMENT ( thin , pgs , y ) ) << 1"		1292248	1		<<			
ANR	1292419	ConditionalExpression	"horiz ? STROKE_ADJUSTMENT ( thin , pgs , x ) : STROKE_ADJUSTMENT ( thin , pgs , y )"		1292248	0					
ANR	1292420	Condition	horiz		1292248	0					
ANR	1292421	Identifier	horiz		1292248	0					
ANR	1292422	CallExpression	"STROKE_ADJUSTMENT ( thin , pgs , x )"		1292248	1					
ANR	1292423	Callee	STROKE_ADJUSTMENT		1292248	0					
ANR	1292424	Identifier	STROKE_ADJUSTMENT		1292248	0					
ANR	1292425	ArgumentList	thin		1292248	1					
ANR	1292426	Argument	thin		1292248	0					
ANR	1292427	Identifier	thin		1292248	0					
ANR	1292428	Argument	pgs		1292248	1					
ANR	1292429	Identifier	pgs		1292248	0					
ANR	1292430	Argument	x		1292248	2					
ANR	1292431	Identifier	x		1292248	0					
ANR	1292432	CallExpression	"STROKE_ADJUSTMENT ( thin , pgs , y )"		1292248	2					
ANR	1292433	Callee	STROKE_ADJUSTMENT		1292248	0					
ANR	1292434	Identifier	STROKE_ADJUSTMENT		1292248	0					
ANR	1292435	ArgumentList	thin		1292248	1					
ANR	1292436	Argument	thin		1292248	0					
ANR	1292437	Identifier	thin		1292248	0					
ANR	1292438	Argument	pgs		1292248	1					
ANR	1292439	Identifier	pgs		1292248	0					
ANR	1292440	Argument	y		1292248	2					
ANR	1292441	Identifier	y		1292248	0					
ANR	1292442	PrimaryExpression	1		1292248	1					
ANR	1292443	IfStatement	if ( length > fixed_1 )		1292248	6					
ANR	1292444	Condition	length > fixed_1	1203:12:49549:49564	1292248	0	True				
ANR	1292445	RelationalExpression	length > fixed_1		1292248	0		>			
ANR	1292446	Identifier	length		1292248	0					
ANR	1292447	Identifier	fixed_1		1292248	1					
ANR	1292448	ReturnStatement	return ;	1204:12:49608:49614	1292248	1	True				
ANR	1292449	IfStatement	if ( start_cap == gs_cap_butt || end_cap == gs_cap_butt )		1292248	7					
ANR	1292450	Condition	start_cap == gs_cap_butt || end_cap == gs_cap_butt	1205:12:49628:49677	1292248	0	True				
ANR	1292451	OrExpression	start_cap == gs_cap_butt || end_cap == gs_cap_butt		1292248	0		||			
ANR	1292452	EqualityExpression	start_cap == gs_cap_butt		1292248	0		==			
ANR	1292453	Identifier	start_cap		1292248	0					
ANR	1292454	Identifier	gs_cap_butt		1292248	1					
ANR	1292455	EqualityExpression	end_cap == gs_cap_butt		1292248	1		==			
ANR	1292456	Identifier	end_cap		1292248	0					
ANR	1292457	Identifier	gs_cap_butt		1292248	1					
ANR	1292458	CompoundStatement		25:64:1072:1072	1292248	1					
ANR	1292459	ExpressionStatement	length_r = fixed_rounded ( length )	1206:12:49694:49726	1292248	0	True				
ANR	1292460	AssignmentExpression	length_r = fixed_rounded ( length )		1292248	0		=			
ANR	1292461	Identifier	length_r		1292248	0					
ANR	1292462	CallExpression	fixed_rounded ( length )		1292248	1					
ANR	1292463	Callee	fixed_rounded		1292248	0					
ANR	1292464	Identifier	fixed_rounded		1292248	0					
ANR	1292465	ArgumentList	length		1292248	1					
ANR	1292466	Argument	length		1292248	0					
ANR	1292467	Identifier	length		1292248	0					
ANR	1292468	IfStatement	if ( length_r < fixed_1 )		1292248	1					
ANR	1292469	Condition	length_r < fixed_1	1207:16:49744:49761	1292248	0	True				
ANR	1292470	RelationalExpression	length_r < fixed_1		1292248	0		<			
ANR	1292471	Identifier	length_r		1292248	0					
ANR	1292472	Identifier	fixed_1		1292248	1					
ANR	1292473	ExpressionStatement	length_r = fixed_1	1208:16:49780:49798	1292248	1	True				
ANR	1292474	AssignmentExpression	length_r = fixed_1		1292248	0		=			
ANR	1292475	Identifier	length_r		1292248	0					
ANR	1292476	Identifier	fixed_1		1292248	1					
ANR	1292477	ExpressionStatement	length_r_2 = length_r / 2	1209:12:49812:49837	1292248	2	True				
ANR	1292478	AssignmentExpression	length_r_2 = length_r / 2		1292248	0		=			
ANR	1292479	Identifier	length_r_2		1292248	0					
ANR	1292480	MultiplicativeExpression	length_r / 2		1292248	1		/			
ANR	1292481	Identifier	length_r		1292248	0					
ANR	1292482	PrimaryExpression	2		1292248	1					
ANR	1292483	ElseStatement	else		1292248	0					
ANR	1292484	CompoundStatement		32:12:1324:1382	1292248	0					
ANR	1292485	IdentifierDeclStatement	fixed width = any_abs ( horiz ? plp -> width . y : plp -> width . x ) ;	1212:12:49932:49990	1292248	0	True				
ANR	1292486	IdentifierDecl	width = any_abs ( horiz ? plp -> width . y : plp -> width . x )		1292248	0					
ANR	1292487	IdentifierDeclType	fixed		1292248	0					
ANR	1292488	Identifier	width		1292248	1					
ANR	1292489	AssignmentExpression	width = any_abs ( horiz ? plp -> width . y : plp -> width . x )		1292248	2		=			
ANR	1292490	Identifier	width		1292248	0					
ANR	1292491	CallExpression	any_abs ( horiz ? plp -> width . y : plp -> width . x )		1292248	1					
ANR	1292492	Callee	any_abs		1292248	0					
ANR	1292493	Identifier	any_abs		1292248	0					
ANR	1292494	ArgumentList	horiz ? plp -> width . y : plp -> width . x		1292248	1					
ANR	1292495	Argument	horiz ? plp -> width . y : plp -> width . x		1292248	0					
ANR	1292496	ConditionalExpression	horiz ? plp -> width . y : plp -> width . x		1292248	0					
ANR	1292497	Condition	horiz		1292248	0					
ANR	1292498	Identifier	horiz		1292248	0					
ANR	1292499	MemberAccess	plp -> width . y		1292248	1					
ANR	1292500	PtrMemberAccess	plp -> width		1292248	0					
ANR	1292501	Identifier	plp		1292248	0					
ANR	1292502	Identifier	width		1292248	1					
ANR	1292503	Identifier	y		1292248	1					
ANR	1292504	MemberAccess	plp -> width . x		1292248	2					
ANR	1292505	PtrMemberAccess	plp -> width		1292248	0					
ANR	1292506	Identifier	plp		1292248	0					
ANR	1292507	Identifier	width		1292248	1					
ANR	1292508	Identifier	x		1292248	1					
ANR	1292509	ExpressionStatement	length_r = fixed_rounded ( length + width * 2 + adj2 )	1214:12:50005:50056	1292248	1	True				
ANR	1292510	AssignmentExpression	length_r = fixed_rounded ( length + width * 2 + adj2 )		1292248	0		=			
ANR	1292511	Identifier	length_r		1292248	0					
ANR	1292512	CallExpression	fixed_rounded ( length + width * 2 + adj2 )		1292248	1					
ANR	1292513	Callee	fixed_rounded		1292248	0					
ANR	1292514	Identifier	fixed_rounded		1292248	0					
ANR	1292515	ArgumentList	length + width * 2 + adj2		1292248	1					
ANR	1292516	Argument	length + width * 2 + adj2		1292248	0					
ANR	1292517	AdditiveExpression	length + width * 2 + adj2		1292248	0		+			
ANR	1292518	Identifier	length		1292248	0					
ANR	1292519	AdditiveExpression	width * 2 + adj2		1292248	1		+			
ANR	1292520	MultiplicativeExpression	width * 2		1292248	0		*			
ANR	1292521	Identifier	width		1292248	0					
ANR	1292522	PrimaryExpression	2		1292248	1					
ANR	1292523	Identifier	adj2		1292248	1					
ANR	1292524	ExpressionStatement	length_r_2 = fixed_rounded ( length ) / 2	1215:12:50070:50108	1292248	2	True				
ANR	1292525	AssignmentExpression	length_r_2 = fixed_rounded ( length ) / 2		1292248	0		=			
ANR	1292526	Identifier	length_r_2		1292248	0					
ANR	1292527	MultiplicativeExpression	fixed_rounded ( length ) / 2		1292248	1		/			
ANR	1292528	CallExpression	fixed_rounded ( length )		1292248	0					
ANR	1292529	Callee	fixed_rounded		1292248	0					
ANR	1292530	Identifier	fixed_rounded		1292248	0					
ANR	1292531	ArgumentList	length		1292248	1					
ANR	1292532	Argument	length		1292248	0					
ANR	1292533	Identifier	length		1292248	0					
ANR	1292534	PrimaryExpression	2		1292248	1					
ANR	1292535	IfStatement	if ( length_r & fixed_1 )		1292248	8					
ANR	1292536	Condition	length_r & fixed_1	1217:12:50132:50149	1292248	0	True				
ANR	1292537	BitAndExpression	length_r & fixed_1		1292248	0		&			
ANR	1292538	Identifier	length_r		1292248	0					
ANR	1292539	Identifier	fixed_1		1292248	1					
ANR	1292540	ExpressionStatement	mv_r = fixed_floor ( mv ) + fixed_half	1218:12:50164:50199	1292248	1	True				
ANR	1292541	AssignmentExpression	mv_r = fixed_floor ( mv ) + fixed_half		1292248	0		=			
ANR	1292542	Identifier	mv_r		1292248	0					
ANR	1292543	AdditiveExpression	fixed_floor ( mv ) + fixed_half		1292248	1		+			
ANR	1292544	CallExpression	fixed_floor ( mv )		1292248	0					
ANR	1292545	Callee	fixed_floor		1292248	0					
ANR	1292546	Identifier	fixed_floor		1292248	0					
ANR	1292547	ArgumentList	mv		1292248	1					
ANR	1292548	Argument	mv		1292248	0					
ANR	1292549	Identifier	mv		1292248	0					
ANR	1292550	Identifier	fixed_half		1292248	1					
ANR	1292551	ElseStatement	else		1292248	0					
ANR	1292552	ExpressionStatement	mv_r = fixed_floor ( mv )	1220:12:50226:50248	1292248	0	True				
ANR	1292553	AssignmentExpression	mv_r = fixed_floor ( mv )		1292248	0		=			
ANR	1292554	Identifier	mv_r		1292248	0					
ANR	1292555	CallExpression	fixed_floor ( mv )		1292248	1					
ANR	1292556	Callee	fixed_floor		1292248	0					
ANR	1292557	Identifier	fixed_floor		1292248	0					
ANR	1292558	ArgumentList	mv		1292248	1					
ANR	1292559	Argument	mv		1292248	0					
ANR	1292560	Identifier	mv		1292248	0					
ANR	1292561	IfStatement	if ( * pov < * pev )		1292248	9					
ANR	1292562	Condition	* pov < * pev	1221:12:50262:50272	1292248	0	True				
ANR	1292563	RelationalExpression	* pov < * pev		1292248	0		<			
ANR	1292564	UnaryOperationExpression	* pov		1292248	0					
ANR	1292565	UnaryOperator	*		1292248	0					
ANR	1292566	Identifier	pov		1292248	1					
ANR	1292567	UnaryOperationExpression	* pev		1292248	1					
ANR	1292568	UnaryOperator	*		1292248	0					
ANR	1292569	Identifier	pev		1292248	1					
ANR	1292570	CompoundStatement		41:25:1667:1667	1292248	1					
ANR	1292571	ExpressionStatement	* pov = mv_r - length_r_2	1222:12:50289:50313	1292248	0	True				
ANR	1292572	AssignmentExpression	* pov = mv_r - length_r_2		1292248	0		=			
ANR	1292573	UnaryOperationExpression	* pov		1292248	0					
ANR	1292574	UnaryOperator	*		1292248	0					
ANR	1292575	Identifier	pov		1292248	1					
ANR	1292576	AdditiveExpression	mv_r - length_r_2		1292248	1		-			
ANR	1292577	Identifier	mv_r		1292248	0					
ANR	1292578	Identifier	length_r_2		1292248	1					
ANR	1292579	ExpressionStatement	* pev = mv_r + length_r_2	1223:12:50327:50351	1292248	1	True				
ANR	1292580	AssignmentExpression	* pev = mv_r + length_r_2		1292248	0		=			
ANR	1292581	UnaryOperationExpression	* pev		1292248	0					
ANR	1292582	UnaryOperator	*		1292248	0					
ANR	1292583	Identifier	pev		1292248	1					
ANR	1292584	AdditiveExpression	mv_r + length_r_2		1292248	1		+			
ANR	1292585	Identifier	mv_r		1292248	0					
ANR	1292586	Identifier	length_r_2		1292248	1					
ANR	1292587	ElseStatement	else		1292248	0					
ANR	1292588	CompoundStatement		44:15:1760:1760	1292248	0					
ANR	1292589	ExpressionStatement	* pov = mv_r + length_r_2	1225:12:50382:50406	1292248	0	True				
ANR	1292590	AssignmentExpression	* pov = mv_r + length_r_2		1292248	0		=			
ANR	1292591	UnaryOperationExpression	* pov		1292248	0					
ANR	1292592	UnaryOperator	*		1292248	0					
ANR	1292593	Identifier	pov		1292248	1					
ANR	1292594	AdditiveExpression	mv_r + length_r_2		1292248	1		+			
ANR	1292595	Identifier	mv_r		1292248	0					
ANR	1292596	Identifier	length_r_2		1292248	1					
ANR	1292597	ExpressionStatement	* pev = mv_r - length_r_2	1226:12:50420:50444	1292248	1	True				
ANR	1292598	AssignmentExpression	* pev = mv_r - length_r_2		1292248	0		=			
ANR	1292599	UnaryOperationExpression	* pev		1292248	0					
ANR	1292600	UnaryOperator	*		1292248	0					
ANR	1292601	Identifier	pev		1292248	1					
ANR	1292602	AdditiveExpression	mv_r - length_r_2		1292248	1		-			
ANR	1292603	Identifier	mv_r		1292248	0					
ANR	1292604	Identifier	length_r_2		1292248	1					
ANR	1292605	ReturnType	static void		1292248	1					
ANR	1292606	Identifier	adjust_stroke_longitude		1292248	2					
ANR	1292607	ParameterList	"pl_ptr plp , const gs_gstate * pgs , bool thin , bool horiz , gs_line_cap start_cap , gs_line_cap end_cap"		1292248	3					
ANR	1292608	Parameter	pl_ptr plp	1178:24:48457:48466	1292248	0	True				
ANR	1292609	ParameterType	pl_ptr		1292248	0					
ANR	1292610	Identifier	plp		1292248	1					
ANR	1292611	Parameter	const gs_gstate * pgs	1178:36:48469:48489	1292248	1	True				
ANR	1292612	ParameterType	const gs_gstate *		1292248	0					
ANR	1292613	Identifier	pgs		1292248	1					
ANR	1292614	Parameter	bool thin	1179:24:48516:48524	1292248	2	True				
ANR	1292615	ParameterType	bool		1292248	0					
ANR	1292616	Identifier	thin		1292248	1					
ANR	1292617	Parameter	bool horiz	1179:35:48527:48536	1292248	3	True				
ANR	1292618	ParameterType	bool		1292248	0					
ANR	1292619	Identifier	horiz		1292248	1					
ANR	1292620	Parameter	gs_line_cap start_cap	1180:24:48563:48583	1292248	4	True				
ANR	1292621	ParameterType	gs_line_cap		1292248	0					
ANR	1292622	Identifier	start_cap		1292248	1					
ANR	1292623	Parameter	gs_line_cap end_cap	1180:47:48586:48604	1292248	5	True				
ANR	1292624	ParameterType	gs_line_cap		1292248	0					
ANR	1292625	Identifier	end_cap		1292248	1					
ANR	1292626	CFGEntryNode	ENTRY		1292248		True				
ANR	1292627	CFGExitNode	EXIT		1292248		True				
ANR	1292628	Symbol	* pov		1292248						
ANR	1292629	Symbol	plp -> width . y		1292248						
ANR	1292630	Symbol	* pow		1292248						
ANR	1292631	Symbol	plp -> width . x		1292248						
ANR	1292632	Symbol	fixed_floor		1292248						
ANR	1292633	Symbol	adj2		1292248						
ANR	1292634	Symbol	& plp -> o . p		1292248						
ANR	1292635	Symbol	plp -> o . p		1292248						
ANR	1292636	Symbol	* pev		1292248						
ANR	1292637	Symbol	& plp -> e		1292248						
ANR	1292638	Symbol	* pew		1292248						
ANR	1292639	Symbol	plp -> width		1292248						
ANR	1292640	Symbol	horiz		1292248						
ANR	1292641	Symbol	& plp -> o . p . x		1292248						
ANR	1292642	Symbol	fixed_1		1292248						
ANR	1292643	Symbol	& plp -> o . p . y		1292248						
ANR	1292644	Symbol	end_cap		1292248						
ANR	1292645	Symbol	pov		1292248						
ANR	1292646	Symbol	any_abs		1292248						
ANR	1292647	Symbol	pow		1292248						
ANR	1292648	Symbol	STROKE_ADJUSTMENT		1292248						
ANR	1292649	Symbol	fixed_half		1292248						
ANR	1292650	Symbol	pgs		1292248						
ANR	1292651	Symbol	* plp		1292248						
ANR	1292652	Symbol	pev		1292248						
ANR	1292653	Symbol	pew		1292248						
ANR	1292654	Symbol	length		1292248						
ANR	1292655	Symbol	mv		1292248						
ANR	1292656	Symbol	gs_cap_butt		1292248						
ANR	1292657	Symbol	thin		1292248						
ANR	1292658	Symbol	start_cap		1292248						
ANR	1292659	Symbol	mv_r		1292248						
ANR	1292660	Symbol	& plp -> e . p . x		1292248						
ANR	1292661	Symbol	length_r		1292248						
ANR	1292662	Symbol	plp -> e . p		1292248						
ANR	1292663	Symbol	& plp -> e . p . y		1292248						
ANR	1292664	Symbol	plp		1292248						
ANR	1292665	Symbol	& plp -> o		1292248						
ANR	1292666	Symbol	plp -> o		1292248						
ANR	1292667	Symbol	x		1292248						
ANR	1292668	Symbol	width		1292248						
ANR	1292669	Symbol	plp -> e		1292248						
ANR	1292670	Symbol	y		1292248						
ANR	1292671	Symbol	& plp -> e . p		1292248						
ANR	1292672	Symbol	length_r_2		1292248						
ANR	1292673	Symbol	fixed_rounded		1292248						
ANR	1292674	Function	adjust_stroke	1234:0:50619:57290							
ANR	1292675	FunctionDef	"adjust_stroke (gx_device * dev , pl_ptr plp , const gs_gstate * pgs , bool thin , bool adjust_longitude , note_flags flags)"		1292674	0					
ANR	1292676	CompoundStatement		1237:0:50762:57290	1292674	0					
ANR	1292677	IdentifierDeclStatement	"bool horiz , adjust = true ;"	1238:4:50768:50793	1292674	0	True				
ANR	1292678	IdentifierDecl	horiz		1292674	0					
ANR	1292679	IdentifierDeclType	bool		1292674	0					
ANR	1292680	Identifier	horiz		1292674	1					
ANR	1292681	IdentifierDecl	adjust = true		1292674	1					
ANR	1292682	IdentifierDeclType	bool		1292674	0					
ANR	1292683	Identifier	adjust		1292674	1					
ANR	1292684	AssignmentExpression	adjust = true		1292674	2		=			
ANR	1292685	Identifier	true		1292674	0					
ANR	1292686	Identifier	true		1292674	1					
ANR	1292687	IdentifierDeclStatement	gs_line_cap start_cap = ( flags & nf_dash_head ? pgs -> line_params . dash_cap : pgs -> line_params . start_cap ) ;	1239:4:50799:50960	1292674	1	True				
ANR	1292688	IdentifierDecl	start_cap = ( flags & nf_dash_head ? pgs -> line_params . dash_cap : pgs -> line_params . start_cap )		1292674	0					
ANR	1292689	IdentifierDeclType	gs_line_cap		1292674	0					
ANR	1292690	Identifier	start_cap		1292674	1					
ANR	1292691	AssignmentExpression	start_cap = ( flags & nf_dash_head ? pgs -> line_params . dash_cap : pgs -> line_params . start_cap )		1292674	2		=			
ANR	1292692	Identifier	start_cap		1292674	0					
ANR	1292693	ConditionalExpression	flags & nf_dash_head ? pgs -> line_params . dash_cap : pgs -> line_params . start_cap		1292674	1					
ANR	1292694	Condition	flags & nf_dash_head		1292674	0					
ANR	1292695	BitAndExpression	flags & nf_dash_head		1292674	0		&			
ANR	1292696	Identifier	flags		1292674	0					
ANR	1292697	Identifier	nf_dash_head		1292674	1					
ANR	1292698	MemberAccess	pgs -> line_params . dash_cap		1292674	1					
ANR	1292699	PtrMemberAccess	pgs -> line_params		1292674	0					
ANR	1292700	Identifier	pgs		1292674	0					
ANR	1292701	Identifier	line_params		1292674	1					
ANR	1292702	Identifier	dash_cap		1292674	1					
ANR	1292703	MemberAccess	pgs -> line_params . start_cap		1292674	2					
ANR	1292704	PtrMemberAccess	pgs -> line_params		1292674	0					
ANR	1292705	Identifier	pgs		1292674	0					
ANR	1292706	Identifier	line_params		1292674	1					
ANR	1292707	Identifier	start_cap		1292674	1					
ANR	1292708	IdentifierDeclStatement	gs_line_cap end_cap = ( flags & nf_dash_tail ? pgs -> line_params . dash_cap : pgs -> line_params . end_cap ) ;	1242:4:50966:51125	1292674	2	True				
ANR	1292709	IdentifierDecl	end_cap = ( flags & nf_dash_tail ? pgs -> line_params . dash_cap : pgs -> line_params . end_cap )		1292674	0					
ANR	1292710	IdentifierDeclType	gs_line_cap		1292674	0					
ANR	1292711	Identifier	end_cap		1292674	1					
ANR	1292712	AssignmentExpression	end_cap = ( flags & nf_dash_tail ? pgs -> line_params . dash_cap : pgs -> line_params . end_cap )		1292674	2		=			
ANR	1292713	Identifier	end_cap		1292674	0					
ANR	1292714	ConditionalExpression	flags & nf_dash_tail ? pgs -> line_params . dash_cap : pgs -> line_params . end_cap		1292674	1					
ANR	1292715	Condition	flags & nf_dash_tail		1292674	0					
ANR	1292716	BitAndExpression	flags & nf_dash_tail		1292674	0		&			
ANR	1292717	Identifier	flags		1292674	0					
ANR	1292718	Identifier	nf_dash_tail		1292674	1					
ANR	1292719	MemberAccess	pgs -> line_params . dash_cap		1292674	1					
ANR	1292720	PtrMemberAccess	pgs -> line_params		1292674	0					
ANR	1292721	Identifier	pgs		1292674	0					
ANR	1292722	Identifier	line_params		1292674	1					
ANR	1292723	Identifier	dash_cap		1292674	1					
ANR	1292724	MemberAccess	pgs -> line_params . end_cap		1292674	2					
ANR	1292725	PtrMemberAccess	pgs -> line_params		1292674	0					
ANR	1292726	Identifier	pgs		1292674	0					
ANR	1292727	Identifier	line_params		1292674	1					
ANR	1292728	Identifier	end_cap		1292674	1					
ANR	1292729	IfStatement	if ( ! pgs -> stroke_adjust || ( plp -> width . x != 0 && plp -> width . y != 0 ) )		1292674	3					
ANR	1292730	Condition	! pgs -> stroke_adjust || ( plp -> width . x != 0 && plp -> width . y != 0 )	1248:8:51243:51305	1292674	0	True				
ANR	1292731	OrExpression	! pgs -> stroke_adjust || ( plp -> width . x != 0 && plp -> width . y != 0 )		1292674	0		||			
ANR	1292732	UnaryOperationExpression	! pgs -> stroke_adjust		1292674	0					
ANR	1292733	UnaryOperator	!		1292674	0					
ANR	1292734	PtrMemberAccess	pgs -> stroke_adjust		1292674	1					
ANR	1292735	Identifier	pgs		1292674	0					
ANR	1292736	Identifier	stroke_adjust		1292674	1					
ANR	1292737	AndExpression	plp -> width . x != 0 && plp -> width . y != 0		1292674	1		&&			
ANR	1292738	EqualityExpression	plp -> width . x != 0		1292674	0		!=			
ANR	1292739	MemberAccess	plp -> width . x		1292674	0					
ANR	1292740	PtrMemberAccess	plp -> width		1292674	0					
ANR	1292741	Identifier	plp		1292674	0					
ANR	1292742	Identifier	width		1292674	1					
ANR	1292743	Identifier	x		1292674	1					
ANR	1292744	PrimaryExpression	0		1292674	1					
ANR	1292745	EqualityExpression	plp -> width . y != 0		1292674	1		!=			
ANR	1292746	MemberAccess	plp -> width . y		1292674	0					
ANR	1292747	PtrMemberAccess	plp -> width		1292674	0					
ANR	1292748	Identifier	plp		1292674	0					
ANR	1292749	Identifier	width		1292674	1					
ANR	1292750	Identifier	y		1292674	1					
ANR	1292751	PrimaryExpression	0		1292674	1					
ANR	1292752	CompoundStatement		12:73:545:545	1292674	1					
ANR	1292753	ExpressionStatement	dev -> sgr . stroke_stored = false	1249:8:51318:51348	1292674	0	True				
ANR	1292754	AssignmentExpression	dev -> sgr . stroke_stored = false		1292674	0		=			
ANR	1292755	MemberAccess	dev -> sgr . stroke_stored		1292674	0					
ANR	1292756	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292757	Identifier	dev		1292674	0					
ANR	1292758	Identifier	sgr		1292674	1					
ANR	1292759	Identifier	stroke_stored		1292674	1					
ANR	1292760	Identifier	false		1292674	1					
ANR	1292761	ReturnStatement	return ;	1250:8:51358:51364	1292674	1	True				
ANR	1292762	IfStatement	if ( dev -> sgr . stroke_stored && ( start_cap == gs_cap_butt || end_cap == gs_cap_butt ) && dev -> sgr . orig [ 3 ] . x == plp -> vector . x && dev -> sgr . orig [ 3 ] . y == plp -> vector . y )		1292674	4					
ANR	1292763	Condition	dev -> sgr . stroke_stored && ( start_cap == gs_cap_butt || end_cap == gs_cap_butt ) && dev -> sgr . orig [ 3 ] . x == plp -> vector . x && dev -> sgr . orig [ 3 ] . y == plp -> vector . y	1255:8:51579:51750	1292674	0	True				
ANR	1292764	AndExpression	dev -> sgr . stroke_stored && ( start_cap == gs_cap_butt || end_cap == gs_cap_butt ) && dev -> sgr . orig [ 3 ] . x == plp -> vector . x && dev -> sgr . orig [ 3 ] . y == plp -> vector . y		1292674	0		&&			
ANR	1292765	MemberAccess	dev -> sgr . stroke_stored		1292674	0					
ANR	1292766	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292767	Identifier	dev		1292674	0					
ANR	1292768	Identifier	sgr		1292674	1					
ANR	1292769	Identifier	stroke_stored		1292674	1					
ANR	1292770	AndExpression	( start_cap == gs_cap_butt || end_cap == gs_cap_butt ) && dev -> sgr . orig [ 3 ] . x == plp -> vector . x && dev -> sgr . orig [ 3 ] . y == plp -> vector . y		1292674	1		&&			
ANR	1292771	OrExpression	start_cap == gs_cap_butt || end_cap == gs_cap_butt		1292674	0		||			
ANR	1292772	EqualityExpression	start_cap == gs_cap_butt		1292674	0		==			
ANR	1292773	Identifier	start_cap		1292674	0					
ANR	1292774	Identifier	gs_cap_butt		1292674	1					
ANR	1292775	EqualityExpression	end_cap == gs_cap_butt		1292674	1		==			
ANR	1292776	Identifier	end_cap		1292674	0					
ANR	1292777	Identifier	gs_cap_butt		1292674	1					
ANR	1292778	AndExpression	dev -> sgr . orig [ 3 ] . x == plp -> vector . x && dev -> sgr . orig [ 3 ] . y == plp -> vector . y		1292674	1		&&			
ANR	1292779	EqualityExpression	dev -> sgr . orig [ 3 ] . x == plp -> vector . x		1292674	0		==			
ANR	1292780	MemberAccess	dev -> sgr . orig [ 3 ] . x		1292674	0					
ANR	1292781	ArrayIndexing	dev -> sgr . orig [ 3 ]		1292674	0					
ANR	1292782	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1292783	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292784	Identifier	dev		1292674	0					
ANR	1292785	Identifier	sgr		1292674	1					
ANR	1292786	Identifier	orig		1292674	1					
ANR	1292787	PrimaryExpression	3		1292674	1					
ANR	1292788	Identifier	x		1292674	1					
ANR	1292789	MemberAccess	plp -> vector . x		1292674	1					
ANR	1292790	PtrMemberAccess	plp -> vector		1292674	0					
ANR	1292791	Identifier	plp		1292674	0					
ANR	1292792	Identifier	vector		1292674	1					
ANR	1292793	Identifier	x		1292674	1					
ANR	1292794	EqualityExpression	dev -> sgr . orig [ 3 ] . y == plp -> vector . y		1292674	1		==			
ANR	1292795	MemberAccess	dev -> sgr . orig [ 3 ] . y		1292674	0					
ANR	1292796	ArrayIndexing	dev -> sgr . orig [ 3 ]		1292674	0					
ANR	1292797	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1292798	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292799	Identifier	dev		1292674	0					
ANR	1292800	Identifier	sgr		1292674	1					
ANR	1292801	Identifier	orig		1292674	1					
ANR	1292802	PrimaryExpression	3		1292674	1					
ANR	1292803	Identifier	y		1292674	1					
ANR	1292804	MemberAccess	plp -> vector . y		1292674	1					
ANR	1292805	PtrMemberAccess	plp -> vector		1292674	0					
ANR	1292806	Identifier	plp		1292674	0					
ANR	1292807	Identifier	vector		1292674	1					
ANR	1292808	Identifier	y		1292674	1					
ANR	1292809	CompoundStatement		21:84:990:990	1292674	1					
ANR	1292810	IfStatement	if ( ( int64_t ) ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) * plp -> vector . x == ( int64_t ) ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) * plp -> vector . y && ( int64_t ) ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) * plp -> vector . x == ( int64_t ) ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) * plp -> vector . y )		1292674	0					
ANR	1292811	Condition	( int64_t ) ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) * plp -> vector . x == ( int64_t ) ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) * plp -> vector . y && ( int64_t ) ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) * plp -> vector . x == ( int64_t ) ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) * plp -> vector . y	1259:12:51791:52070	1292674	0	True				
ANR	1292812	AndExpression	( int64_t ) ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) * plp -> vector . x == ( int64_t ) ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) * plp -> vector . y && ( int64_t ) ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) * plp -> vector . x == ( int64_t ) ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) * plp -> vector . y		1292674	0		&&			
ANR	1292813	EqualityExpression	( int64_t ) ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) * plp -> vector . x == ( int64_t ) ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) * plp -> vector . y		1292674	0		==			
ANR	1292814	MultiplicativeExpression	( int64_t ) ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) * plp -> vector . x		1292674	0		*			
ANR	1292815	CastExpression	( int64_t ) ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x )		1292674	0					
ANR	1292816	CastTarget	int64_t		1292674	0					
ANR	1292817	AdditiveExpression	plp -> o . p . x - dev -> sgr . orig [ 0 ] . x		1292674	1		-			
ANR	1292818	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1292819	MemberAccess	plp -> o . p		1292674	0					
ANR	1292820	PtrMemberAccess	plp -> o		1292674	0					
ANR	1292821	Identifier	plp		1292674	0					
ANR	1292822	Identifier	o		1292674	1					
ANR	1292823	Identifier	p		1292674	1					
ANR	1292824	Identifier	x		1292674	1					
ANR	1292825	MemberAccess	dev -> sgr . orig [ 0 ] . x		1292674	1					
ANR	1292826	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1292827	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1292828	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292829	Identifier	dev		1292674	0					
ANR	1292830	Identifier	sgr		1292674	1					
ANR	1292831	Identifier	orig		1292674	1					
ANR	1292832	PrimaryExpression	0		1292674	1					
ANR	1292833	Identifier	x		1292674	1					
ANR	1292834	MemberAccess	plp -> vector . x		1292674	1					
ANR	1292835	PtrMemberAccess	plp -> vector		1292674	0					
ANR	1292836	Identifier	plp		1292674	0					
ANR	1292837	Identifier	vector		1292674	1					
ANR	1292838	Identifier	x		1292674	1					
ANR	1292839	MultiplicativeExpression	( int64_t ) ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) * plp -> vector . y		1292674	1		*			
ANR	1292840	CastExpression	( int64_t ) ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y )		1292674	0					
ANR	1292841	CastTarget	int64_t		1292674	0					
ANR	1292842	AdditiveExpression	plp -> o . p . y - dev -> sgr . orig [ 0 ] . y		1292674	1		-			
ANR	1292843	MemberAccess	plp -> o . p . y		1292674	0					
ANR	1292844	MemberAccess	plp -> o . p		1292674	0					
ANR	1292845	PtrMemberAccess	plp -> o		1292674	0					
ANR	1292846	Identifier	plp		1292674	0					
ANR	1292847	Identifier	o		1292674	1					
ANR	1292848	Identifier	p		1292674	1					
ANR	1292849	Identifier	y		1292674	1					
ANR	1292850	MemberAccess	dev -> sgr . orig [ 0 ] . y		1292674	1					
ANR	1292851	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1292852	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1292853	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292854	Identifier	dev		1292674	0					
ANR	1292855	Identifier	sgr		1292674	1					
ANR	1292856	Identifier	orig		1292674	1					
ANR	1292857	PrimaryExpression	0		1292674	1					
ANR	1292858	Identifier	y		1292674	1					
ANR	1292859	MemberAccess	plp -> vector . y		1292674	1					
ANR	1292860	PtrMemberAccess	plp -> vector		1292674	0					
ANR	1292861	Identifier	plp		1292674	0					
ANR	1292862	Identifier	vector		1292674	1					
ANR	1292863	Identifier	y		1292674	1					
ANR	1292864	EqualityExpression	( int64_t ) ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) * plp -> vector . x == ( int64_t ) ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) * plp -> vector . y		1292674	1		==			
ANR	1292865	MultiplicativeExpression	( int64_t ) ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) * plp -> vector . x		1292674	0		*			
ANR	1292866	CastExpression	( int64_t ) ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x )		1292674	0					
ANR	1292867	CastTarget	int64_t		1292674	0					
ANR	1292868	AdditiveExpression	plp -> e . p . x - dev -> sgr . orig [ 1 ] . x		1292674	1		-			
ANR	1292869	MemberAccess	plp -> e . p . x		1292674	0					
ANR	1292870	MemberAccess	plp -> e . p		1292674	0					
ANR	1292871	PtrMemberAccess	plp -> e		1292674	0					
ANR	1292872	Identifier	plp		1292674	0					
ANR	1292873	Identifier	e		1292674	1					
ANR	1292874	Identifier	p		1292674	1					
ANR	1292875	Identifier	x		1292674	1					
ANR	1292876	MemberAccess	dev -> sgr . orig [ 1 ] . x		1292674	1					
ANR	1292877	ArrayIndexing	dev -> sgr . orig [ 1 ]		1292674	0					
ANR	1292878	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1292879	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292880	Identifier	dev		1292674	0					
ANR	1292881	Identifier	sgr		1292674	1					
ANR	1292882	Identifier	orig		1292674	1					
ANR	1292883	PrimaryExpression	1		1292674	1					
ANR	1292884	Identifier	x		1292674	1					
ANR	1292885	MemberAccess	plp -> vector . x		1292674	1					
ANR	1292886	PtrMemberAccess	plp -> vector		1292674	0					
ANR	1292887	Identifier	plp		1292674	0					
ANR	1292888	Identifier	vector		1292674	1					
ANR	1292889	Identifier	x		1292674	1					
ANR	1292890	MultiplicativeExpression	( int64_t ) ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) * plp -> vector . y		1292674	1		*			
ANR	1292891	CastExpression	( int64_t ) ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y )		1292674	0					
ANR	1292892	CastTarget	int64_t		1292674	0					
ANR	1292893	AdditiveExpression	plp -> e . p . y - dev -> sgr . orig [ 1 ] . y		1292674	1		-			
ANR	1292894	MemberAccess	plp -> e . p . y		1292674	0					
ANR	1292895	MemberAccess	plp -> e . p		1292674	0					
ANR	1292896	PtrMemberAccess	plp -> e		1292674	0					
ANR	1292897	Identifier	plp		1292674	0					
ANR	1292898	Identifier	e		1292674	1					
ANR	1292899	Identifier	p		1292674	1					
ANR	1292900	Identifier	y		1292674	1					
ANR	1292901	MemberAccess	dev -> sgr . orig [ 1 ] . y		1292674	1					
ANR	1292902	ArrayIndexing	dev -> sgr . orig [ 1 ]		1292674	0					
ANR	1292903	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1292904	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292905	Identifier	dev		1292674	0					
ANR	1292906	Identifier	sgr		1292674	1					
ANR	1292907	Identifier	orig		1292674	1					
ANR	1292908	PrimaryExpression	1		1292674	1					
ANR	1292909	Identifier	y		1292674	1					
ANR	1292910	MemberAccess	plp -> vector . y		1292674	1					
ANR	1292911	PtrMemberAccess	plp -> vector		1292674	0					
ANR	1292912	Identifier	plp		1292674	0					
ANR	1292913	Identifier	vector		1292674	1					
ANR	1292914	Identifier	y		1292674	1					
ANR	1292915	CompoundStatement		26:72:1310:1310	1292674	1					
ANR	1292916	IfStatement	if ( any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) && any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) && any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) )		1292674	0					
ANR	1292917	Condition	any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) && any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) && any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )	1264:16:52128:52531	1292674	0	True				
ANR	1292918	AndExpression	any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) && any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) && any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )		1292674	0		&&			
ANR	1292919	RelationalExpression	any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x )		1292674	0		<=			
ANR	1292920	CallExpression	any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x )		1292674	0					
ANR	1292921	Callee	any_abs		1292674	0					
ANR	1292922	Identifier	any_abs		1292674	0					
ANR	1292923	ArgumentList	plp -> o . p . x - dev -> sgr . orig [ 0 ] . x		1292674	1					
ANR	1292924	Argument	plp -> o . p . x - dev -> sgr . orig [ 0 ] . x		1292674	0					
ANR	1292925	AdditiveExpression	plp -> o . p . x - dev -> sgr . orig [ 0 ] . x		1292674	0		-			
ANR	1292926	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1292927	MemberAccess	plp -> o . p		1292674	0					
ANR	1292928	PtrMemberAccess	plp -> o		1292674	0					
ANR	1292929	Identifier	plp		1292674	0					
ANR	1292930	Identifier	o		1292674	1					
ANR	1292931	Identifier	p		1292674	1					
ANR	1292932	Identifier	x		1292674	1					
ANR	1292933	MemberAccess	dev -> sgr . orig [ 0 ] . x		1292674	1					
ANR	1292934	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1292935	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1292936	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292937	Identifier	dev		1292674	0					
ANR	1292938	Identifier	sgr		1292674	1					
ANR	1292939	Identifier	orig		1292674	1					
ANR	1292940	PrimaryExpression	0		1292674	1					
ANR	1292941	Identifier	x		1292674	1					
ANR	1292942	CallExpression	any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x )		1292674	1					
ANR	1292943	Callee	any_abs		1292674	0					
ANR	1292944	Identifier	any_abs		1292674	0					
ANR	1292945	ArgumentList	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	1					
ANR	1292946	Argument	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	0					
ANR	1292947	AdditiveExpression	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	0		+			
ANR	1292948	MemberAccess	plp -> width . x		1292674	0					
ANR	1292949	PtrMemberAccess	plp -> width		1292674	0					
ANR	1292950	Identifier	plp		1292674	0					
ANR	1292951	Identifier	width		1292674	1					
ANR	1292952	Identifier	x		1292674	1					
ANR	1292953	MemberAccess	dev -> sgr . orig [ 2 ] . x		1292674	1					
ANR	1292954	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1292955	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1292956	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292957	Identifier	dev		1292674	0					
ANR	1292958	Identifier	sgr		1292674	1					
ANR	1292959	Identifier	orig		1292674	1					
ANR	1292960	PrimaryExpression	2		1292674	1					
ANR	1292961	Identifier	x		1292674	1					
ANR	1292962	AndExpression	any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) && any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )		1292674	1		&&			
ANR	1292963	RelationalExpression	any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )		1292674	0		<=			
ANR	1292964	CallExpression	any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y )		1292674	0					
ANR	1292965	Callee	any_abs		1292674	0					
ANR	1292966	Identifier	any_abs		1292674	0					
ANR	1292967	ArgumentList	plp -> o . p . y - dev -> sgr . orig [ 0 ] . y		1292674	1					
ANR	1292968	Argument	plp -> o . p . y - dev -> sgr . orig [ 0 ] . y		1292674	0					
ANR	1292969	AdditiveExpression	plp -> o . p . y - dev -> sgr . orig [ 0 ] . y		1292674	0		-			
ANR	1292970	MemberAccess	plp -> o . p . y		1292674	0					
ANR	1292971	MemberAccess	plp -> o . p		1292674	0					
ANR	1292972	PtrMemberAccess	plp -> o		1292674	0					
ANR	1292973	Identifier	plp		1292674	0					
ANR	1292974	Identifier	o		1292674	1					
ANR	1292975	Identifier	p		1292674	1					
ANR	1292976	Identifier	y		1292674	1					
ANR	1292977	MemberAccess	dev -> sgr . orig [ 0 ] . y		1292674	1					
ANR	1292978	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1292979	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1292980	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1292981	Identifier	dev		1292674	0					
ANR	1292982	Identifier	sgr		1292674	1					
ANR	1292983	Identifier	orig		1292674	1					
ANR	1292984	PrimaryExpression	0		1292674	1					
ANR	1292985	Identifier	y		1292674	1					
ANR	1292986	CallExpression	any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )		1292674	1					
ANR	1292987	Callee	any_abs		1292674	0					
ANR	1292988	Identifier	any_abs		1292674	0					
ANR	1292989	ArgumentList	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	1					
ANR	1292990	Argument	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	0					
ANR	1292991	AdditiveExpression	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	0		+			
ANR	1292992	MemberAccess	plp -> width . y		1292674	0					
ANR	1292993	PtrMemberAccess	plp -> width		1292674	0					
ANR	1292994	Identifier	plp		1292674	0					
ANR	1292995	Identifier	width		1292674	1					
ANR	1292996	Identifier	y		1292674	1					
ANR	1292997	MemberAccess	dev -> sgr . orig [ 2 ] . y		1292674	1					
ANR	1292998	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1292999	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293000	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293001	Identifier	dev		1292674	0					
ANR	1293002	Identifier	sgr		1292674	1					
ANR	1293003	Identifier	orig		1292674	1					
ANR	1293004	PrimaryExpression	2		1292674	1					
ANR	1293005	Identifier	y		1292674	1					
ANR	1293006	AndExpression	any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )		1292674	1		&&			
ANR	1293007	RelationalExpression	any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x )		1292674	0		<=			
ANR	1293008	CallExpression	any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x )		1292674	0					
ANR	1293009	Callee	any_abs		1292674	0					
ANR	1293010	Identifier	any_abs		1292674	0					
ANR	1293011	ArgumentList	plp -> e . p . x - dev -> sgr . orig [ 1 ] . x		1292674	1					
ANR	1293012	Argument	plp -> e . p . x - dev -> sgr . orig [ 1 ] . x		1292674	0					
ANR	1293013	AdditiveExpression	plp -> e . p . x - dev -> sgr . orig [ 1 ] . x		1292674	0		-			
ANR	1293014	MemberAccess	plp -> e . p . x		1292674	0					
ANR	1293015	MemberAccess	plp -> e . p		1292674	0					
ANR	1293016	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293017	Identifier	plp		1292674	0					
ANR	1293018	Identifier	e		1292674	1					
ANR	1293019	Identifier	p		1292674	1					
ANR	1293020	Identifier	x		1292674	1					
ANR	1293021	MemberAccess	dev -> sgr . orig [ 1 ] . x		1292674	1					
ANR	1293022	ArrayIndexing	dev -> sgr . orig [ 1 ]		1292674	0					
ANR	1293023	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293024	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293025	Identifier	dev		1292674	0					
ANR	1293026	Identifier	sgr		1292674	1					
ANR	1293027	Identifier	orig		1292674	1					
ANR	1293028	PrimaryExpression	1		1292674	1					
ANR	1293029	Identifier	x		1292674	1					
ANR	1293030	CallExpression	any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x )		1292674	1					
ANR	1293031	Callee	any_abs		1292674	0					
ANR	1293032	Identifier	any_abs		1292674	0					
ANR	1293033	ArgumentList	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	1					
ANR	1293034	Argument	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	0					
ANR	1293035	AdditiveExpression	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	0		+			
ANR	1293036	MemberAccess	plp -> width . x		1292674	0					
ANR	1293037	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293038	Identifier	plp		1292674	0					
ANR	1293039	Identifier	width		1292674	1					
ANR	1293040	Identifier	x		1292674	1					
ANR	1293041	MemberAccess	dev -> sgr . orig [ 2 ] . x		1292674	1					
ANR	1293042	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1293043	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293044	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293045	Identifier	dev		1292674	0					
ANR	1293046	Identifier	sgr		1292674	1					
ANR	1293047	Identifier	orig		1292674	1					
ANR	1293048	PrimaryExpression	2		1292674	1					
ANR	1293049	Identifier	x		1292674	1					
ANR	1293050	RelationalExpression	any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )		1292674	1		<=			
ANR	1293051	CallExpression	any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y )		1292674	0					
ANR	1293052	Callee	any_abs		1292674	0					
ANR	1293053	Identifier	any_abs		1292674	0					
ANR	1293054	ArgumentList	plp -> e . p . y - dev -> sgr . orig [ 1 ] . y		1292674	1					
ANR	1293055	Argument	plp -> e . p . y - dev -> sgr . orig [ 1 ] . y		1292674	0					
ANR	1293056	AdditiveExpression	plp -> e . p . y - dev -> sgr . orig [ 1 ] . y		1292674	0		-			
ANR	1293057	MemberAccess	plp -> e . p . y		1292674	0					
ANR	1293058	MemberAccess	plp -> e . p		1292674	0					
ANR	1293059	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293060	Identifier	plp		1292674	0					
ANR	1293061	Identifier	e		1292674	1					
ANR	1293062	Identifier	p		1292674	1					
ANR	1293063	Identifier	y		1292674	1					
ANR	1293064	MemberAccess	dev -> sgr . orig [ 1 ] . y		1292674	1					
ANR	1293065	ArrayIndexing	dev -> sgr . orig [ 1 ]		1292674	0					
ANR	1293066	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293067	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293068	Identifier	dev		1292674	0					
ANR	1293069	Identifier	sgr		1292674	1					
ANR	1293070	Identifier	orig		1292674	1					
ANR	1293071	PrimaryExpression	1		1292674	1					
ANR	1293072	Identifier	y		1292674	1					
ANR	1293073	CallExpression	any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )		1292674	1					
ANR	1293074	Callee	any_abs		1292674	0					
ANR	1293075	Identifier	any_abs		1292674	0					
ANR	1293076	ArgumentList	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	1					
ANR	1293077	Argument	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	0					
ANR	1293078	AdditiveExpression	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	0		+			
ANR	1293079	MemberAccess	plp -> width . y		1292674	0					
ANR	1293080	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293081	Identifier	plp		1292674	0					
ANR	1293082	Identifier	width		1292674	1					
ANR	1293083	Identifier	y		1292674	1					
ANR	1293084	MemberAccess	dev -> sgr . orig [ 2 ] . y		1292674	1					
ANR	1293085	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1293086	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293087	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293088	Identifier	dev		1292674	0					
ANR	1293089	Identifier	sgr		1292674	1					
ANR	1293090	Identifier	orig		1292674	1					
ANR	1293091	PrimaryExpression	2		1292674	1					
ANR	1293092	Identifier	y		1292674	1					
ANR	1293093	CompoundStatement		31:104:1771:1771	1292674	1					
ANR	1293094	IfStatement	if ( any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2 && any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2 && any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2 && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2 )		1292674	0					
ANR	1293095	Condition	any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2 && any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2 && any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2 && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2	1269:20:52622:53053	1292674	0	True				
ANR	1293096	AndExpression	any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2 && any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2 && any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2 && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2		1292674	0		&&			
ANR	1293097	RelationalExpression	any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2		1292674	0		>=			
ANR	1293098	CallExpression	any_abs ( plp -> o . p . x - dev -> sgr . orig [ 0 ] . x )		1292674	0					
ANR	1293099	Callee	any_abs		1292674	0					
ANR	1293100	Identifier	any_abs		1292674	0					
ANR	1293101	ArgumentList	plp -> o . p . x - dev -> sgr . orig [ 0 ] . x		1292674	1					
ANR	1293102	Argument	plp -> o . p . x - dev -> sgr . orig [ 0 ] . x		1292674	0					
ANR	1293103	AdditiveExpression	plp -> o . p . x - dev -> sgr . orig [ 0 ] . x		1292674	0		-			
ANR	1293104	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1293105	MemberAccess	plp -> o . p		1292674	0					
ANR	1293106	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293107	Identifier	plp		1292674	0					
ANR	1293108	Identifier	o		1292674	1					
ANR	1293109	Identifier	p		1292674	1					
ANR	1293110	Identifier	x		1292674	1					
ANR	1293111	MemberAccess	dev -> sgr . orig [ 0 ] . x		1292674	1					
ANR	1293112	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1293113	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293114	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293115	Identifier	dev		1292674	0					
ANR	1293116	Identifier	sgr		1292674	1					
ANR	1293117	Identifier	orig		1292674	1					
ANR	1293118	PrimaryExpression	0		1292674	1					
ANR	1293119	Identifier	x		1292674	1					
ANR	1293120	MultiplicativeExpression	any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2		1292674	1		/			
ANR	1293121	CallExpression	any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x )		1292674	0					
ANR	1293122	Callee	any_abs		1292674	0					
ANR	1293123	Identifier	any_abs		1292674	0					
ANR	1293124	ArgumentList	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	1					
ANR	1293125	Argument	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	0					
ANR	1293126	AdditiveExpression	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	0		+			
ANR	1293127	MemberAccess	plp -> width . x		1292674	0					
ANR	1293128	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293129	Identifier	plp		1292674	0					
ANR	1293130	Identifier	width		1292674	1					
ANR	1293131	Identifier	x		1292674	1					
ANR	1293132	MemberAccess	dev -> sgr . orig [ 2 ] . x		1292674	1					
ANR	1293133	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1293134	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293135	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293136	Identifier	dev		1292674	0					
ANR	1293137	Identifier	sgr		1292674	1					
ANR	1293138	Identifier	orig		1292674	1					
ANR	1293139	PrimaryExpression	2		1292674	1					
ANR	1293140	Identifier	x		1292674	1					
ANR	1293141	PrimaryExpression	2		1292674	1					
ANR	1293142	AndExpression	any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2 && any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2 && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2		1292674	1		&&			
ANR	1293143	RelationalExpression	any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2		1292674	0		>=			
ANR	1293144	CallExpression	any_abs ( plp -> o . p . y - dev -> sgr . orig [ 0 ] . y )		1292674	0					
ANR	1293145	Callee	any_abs		1292674	0					
ANR	1293146	Identifier	any_abs		1292674	0					
ANR	1293147	ArgumentList	plp -> o . p . y - dev -> sgr . orig [ 0 ] . y		1292674	1					
ANR	1293148	Argument	plp -> o . p . y - dev -> sgr . orig [ 0 ] . y		1292674	0					
ANR	1293149	AdditiveExpression	plp -> o . p . y - dev -> sgr . orig [ 0 ] . y		1292674	0		-			
ANR	1293150	MemberAccess	plp -> o . p . y		1292674	0					
ANR	1293151	MemberAccess	plp -> o . p		1292674	0					
ANR	1293152	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293153	Identifier	plp		1292674	0					
ANR	1293154	Identifier	o		1292674	1					
ANR	1293155	Identifier	p		1292674	1					
ANR	1293156	Identifier	y		1292674	1					
ANR	1293157	MemberAccess	dev -> sgr . orig [ 0 ] . y		1292674	1					
ANR	1293158	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1293159	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293160	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293161	Identifier	dev		1292674	0					
ANR	1293162	Identifier	sgr		1292674	1					
ANR	1293163	Identifier	orig		1292674	1					
ANR	1293164	PrimaryExpression	0		1292674	1					
ANR	1293165	Identifier	y		1292674	1					
ANR	1293166	MultiplicativeExpression	any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2		1292674	1		/			
ANR	1293167	CallExpression	any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )		1292674	0					
ANR	1293168	Callee	any_abs		1292674	0					
ANR	1293169	Identifier	any_abs		1292674	0					
ANR	1293170	ArgumentList	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	1					
ANR	1293171	Argument	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	0					
ANR	1293172	AdditiveExpression	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	0		+			
ANR	1293173	MemberAccess	plp -> width . y		1292674	0					
ANR	1293174	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293175	Identifier	plp		1292674	0					
ANR	1293176	Identifier	width		1292674	1					
ANR	1293177	Identifier	y		1292674	1					
ANR	1293178	MemberAccess	dev -> sgr . orig [ 2 ] . y		1292674	1					
ANR	1293179	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1293180	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293181	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293182	Identifier	dev		1292674	0					
ANR	1293183	Identifier	sgr		1292674	1					
ANR	1293184	Identifier	orig		1292674	1					
ANR	1293185	PrimaryExpression	2		1292674	1					
ANR	1293186	Identifier	y		1292674	1					
ANR	1293187	PrimaryExpression	2		1292674	1					
ANR	1293188	AndExpression	any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2 && any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2		1292674	1		&&			
ANR	1293189	RelationalExpression	any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x ) >= any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2		1292674	0		>=			
ANR	1293190	CallExpression	any_abs ( plp -> e . p . x - dev -> sgr . orig [ 1 ] . x )		1292674	0					
ANR	1293191	Callee	any_abs		1292674	0					
ANR	1293192	Identifier	any_abs		1292674	0					
ANR	1293193	ArgumentList	plp -> e . p . x - dev -> sgr . orig [ 1 ] . x		1292674	1					
ANR	1293194	Argument	plp -> e . p . x - dev -> sgr . orig [ 1 ] . x		1292674	0					
ANR	1293195	AdditiveExpression	plp -> e . p . x - dev -> sgr . orig [ 1 ] . x		1292674	0		-			
ANR	1293196	MemberAccess	plp -> e . p . x		1292674	0					
ANR	1293197	MemberAccess	plp -> e . p		1292674	0					
ANR	1293198	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293199	Identifier	plp		1292674	0					
ANR	1293200	Identifier	e		1292674	1					
ANR	1293201	Identifier	p		1292674	1					
ANR	1293202	Identifier	x		1292674	1					
ANR	1293203	MemberAccess	dev -> sgr . orig [ 1 ] . x		1292674	1					
ANR	1293204	ArrayIndexing	dev -> sgr . orig [ 1 ]		1292674	0					
ANR	1293205	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293206	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293207	Identifier	dev		1292674	0					
ANR	1293208	Identifier	sgr		1292674	1					
ANR	1293209	Identifier	orig		1292674	1					
ANR	1293210	PrimaryExpression	1		1292674	1					
ANR	1293211	Identifier	x		1292674	1					
ANR	1293212	MultiplicativeExpression	any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x ) / 2		1292674	1		/			
ANR	1293213	CallExpression	any_abs ( plp -> width . x + dev -> sgr . orig [ 2 ] . x )		1292674	0					
ANR	1293214	Callee	any_abs		1292674	0					
ANR	1293215	Identifier	any_abs		1292674	0					
ANR	1293216	ArgumentList	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	1					
ANR	1293217	Argument	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	0					
ANR	1293218	AdditiveExpression	plp -> width . x + dev -> sgr . orig [ 2 ] . x		1292674	0		+			
ANR	1293219	MemberAccess	plp -> width . x		1292674	0					
ANR	1293220	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293221	Identifier	plp		1292674	0					
ANR	1293222	Identifier	width		1292674	1					
ANR	1293223	Identifier	x		1292674	1					
ANR	1293224	MemberAccess	dev -> sgr . orig [ 2 ] . x		1292674	1					
ANR	1293225	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1293226	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293227	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293228	Identifier	dev		1292674	0					
ANR	1293229	Identifier	sgr		1292674	1					
ANR	1293230	Identifier	orig		1292674	1					
ANR	1293231	PrimaryExpression	2		1292674	1					
ANR	1293232	Identifier	x		1292674	1					
ANR	1293233	PrimaryExpression	2		1292674	1					
ANR	1293234	RelationalExpression	any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y ) >= any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2		1292674	1		>=			
ANR	1293235	CallExpression	any_abs ( plp -> e . p . y - dev -> sgr . orig [ 1 ] . y )		1292674	0					
ANR	1293236	Callee	any_abs		1292674	0					
ANR	1293237	Identifier	any_abs		1292674	0					
ANR	1293238	ArgumentList	plp -> e . p . y - dev -> sgr . orig [ 1 ] . y		1292674	1					
ANR	1293239	Argument	plp -> e . p . y - dev -> sgr . orig [ 1 ] . y		1292674	0					
ANR	1293240	AdditiveExpression	plp -> e . p . y - dev -> sgr . orig [ 1 ] . y		1292674	0		-			
ANR	1293241	MemberAccess	plp -> e . p . y		1292674	0					
ANR	1293242	MemberAccess	plp -> e . p		1292674	0					
ANR	1293243	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293244	Identifier	plp		1292674	0					
ANR	1293245	Identifier	e		1292674	1					
ANR	1293246	Identifier	p		1292674	1					
ANR	1293247	Identifier	y		1292674	1					
ANR	1293248	MemberAccess	dev -> sgr . orig [ 1 ] . y		1292674	1					
ANR	1293249	ArrayIndexing	dev -> sgr . orig [ 1 ]		1292674	0					
ANR	1293250	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293251	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293252	Identifier	dev		1292674	0					
ANR	1293253	Identifier	sgr		1292674	1					
ANR	1293254	Identifier	orig		1292674	1					
ANR	1293255	PrimaryExpression	1		1292674	1					
ANR	1293256	Identifier	y		1292674	1					
ANR	1293257	MultiplicativeExpression	any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y ) / 2		1292674	1		/			
ANR	1293258	CallExpression	any_abs ( plp -> width . y + dev -> sgr . orig [ 2 ] . y )		1292674	0					
ANR	1293259	Callee	any_abs		1292674	0					
ANR	1293260	Identifier	any_abs		1292674	0					
ANR	1293261	ArgumentList	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	1					
ANR	1293262	Argument	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	0					
ANR	1293263	AdditiveExpression	plp -> width . y + dev -> sgr . orig [ 2 ] . y		1292674	0		+			
ANR	1293264	MemberAccess	plp -> width . y		1292674	0					
ANR	1293265	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293266	Identifier	plp		1292674	0					
ANR	1293267	Identifier	width		1292674	1					
ANR	1293268	Identifier	y		1292674	1					
ANR	1293269	MemberAccess	dev -> sgr . orig [ 2 ] . y		1292674	1					
ANR	1293270	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1293271	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293272	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293273	Identifier	dev		1292674	0					
ANR	1293274	Identifier	sgr		1292674	1					
ANR	1293275	Identifier	orig		1292674	1					
ANR	1293276	PrimaryExpression	2		1292674	1					
ANR	1293277	Identifier	y		1292674	1					
ANR	1293278	PrimaryExpression	2		1292674	1					
ANR	1293279	CompoundStatement		36:112:2293:2293	1292674	1					
ANR	1293280	IfStatement	if ( ! ( any_abs ( plp -> o . p . x - dev -> sgr . adjusted [ 0 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y ) && any_abs ( plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y ) ) )		1292674	0					
ANR	1293281	Condition	! ( any_abs ( plp -> o . p . x - dev -> sgr . adjusted [ 0 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y ) && any_abs ( plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y ) )	1274:24:53147:53615	1292674	0	True				
ANR	1293282	UnaryOperationExpression	! ( any_abs ( plp -> o . p . x - dev -> sgr . adjusted [ 0 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y ) && any_abs ( plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y ) )		1292674	0					
ANR	1293283	UnaryOperator	!		1292674	0					
ANR	1293284	AndExpression	any_abs ( plp -> o . p . x - dev -> sgr . adjusted [ 0 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y ) && any_abs ( plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y )		1292674	1		&&			
ANR	1293285	RelationalExpression	any_abs ( plp -> o . p . x - dev -> sgr . adjusted [ 0 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x )		1292674	0		<=			
ANR	1293286	CallExpression	any_abs ( plp -> o . p . x - dev -> sgr . adjusted [ 0 ] . x )		1292674	0					
ANR	1293287	Callee	any_abs		1292674	0					
ANR	1293288	Identifier	any_abs		1292674	0					
ANR	1293289	ArgumentList	plp -> o . p . x - dev -> sgr . adjusted [ 0 ] . x		1292674	1					
ANR	1293290	Argument	plp -> o . p . x - dev -> sgr . adjusted [ 0 ] . x		1292674	0					
ANR	1293291	AdditiveExpression	plp -> o . p . x - dev -> sgr . adjusted [ 0 ] . x		1292674	0		-			
ANR	1293292	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1293293	MemberAccess	plp -> o . p		1292674	0					
ANR	1293294	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293295	Identifier	plp		1292674	0					
ANR	1293296	Identifier	o		1292674	1					
ANR	1293297	Identifier	p		1292674	1					
ANR	1293298	Identifier	x		1292674	1					
ANR	1293299	MemberAccess	dev -> sgr . adjusted [ 0 ] . x		1292674	1					
ANR	1293300	ArrayIndexing	dev -> sgr . adjusted [ 0 ]		1292674	0					
ANR	1293301	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293302	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293303	Identifier	dev		1292674	0					
ANR	1293304	Identifier	sgr		1292674	1					
ANR	1293305	Identifier	adjusted		1292674	1					
ANR	1293306	PrimaryExpression	0		1292674	1					
ANR	1293307	Identifier	x		1292674	1					
ANR	1293308	CallExpression	any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x )		1292674	1					
ANR	1293309	Callee	any_abs		1292674	0					
ANR	1293310	Identifier	any_abs		1292674	0					
ANR	1293311	ArgumentList	plp -> width . x + dev -> sgr . adjusted [ 2 ] . x		1292674	1					
ANR	1293312	Argument	plp -> width . x + dev -> sgr . adjusted [ 2 ] . x		1292674	0					
ANR	1293313	AdditiveExpression	plp -> width . x + dev -> sgr . adjusted [ 2 ] . x		1292674	0		+			
ANR	1293314	MemberAccess	plp -> width . x		1292674	0					
ANR	1293315	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293316	Identifier	plp		1292674	0					
ANR	1293317	Identifier	width		1292674	1					
ANR	1293318	Identifier	x		1292674	1					
ANR	1293319	MemberAccess	dev -> sgr . adjusted [ 2 ] . x		1292674	1					
ANR	1293320	ArrayIndexing	dev -> sgr . adjusted [ 2 ]		1292674	0					
ANR	1293321	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293322	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293323	Identifier	dev		1292674	0					
ANR	1293324	Identifier	sgr		1292674	1					
ANR	1293325	Identifier	adjusted		1292674	1					
ANR	1293326	PrimaryExpression	2		1292674	1					
ANR	1293327	Identifier	x		1292674	1					
ANR	1293328	AndExpression	any_abs ( plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y ) && any_abs ( plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y )		1292674	1		&&			
ANR	1293329	RelationalExpression	any_abs ( plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y )		1292674	0		<=			
ANR	1293330	CallExpression	any_abs ( plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y )		1292674	0					
ANR	1293331	Callee	any_abs		1292674	0					
ANR	1293332	Identifier	any_abs		1292674	0					
ANR	1293333	ArgumentList	plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y		1292674	1					
ANR	1293334	Argument	plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y		1292674	0					
ANR	1293335	AdditiveExpression	plp -> o . p . y - dev -> sgr . adjusted [ 0 ] . y		1292674	0		-			
ANR	1293336	MemberAccess	plp -> o . p . y		1292674	0					
ANR	1293337	MemberAccess	plp -> o . p		1292674	0					
ANR	1293338	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293339	Identifier	plp		1292674	0					
ANR	1293340	Identifier	o		1292674	1					
ANR	1293341	Identifier	p		1292674	1					
ANR	1293342	Identifier	y		1292674	1					
ANR	1293343	MemberAccess	dev -> sgr . adjusted [ 0 ] . y		1292674	1					
ANR	1293344	ArrayIndexing	dev -> sgr . adjusted [ 0 ]		1292674	0					
ANR	1293345	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293346	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293347	Identifier	dev		1292674	0					
ANR	1293348	Identifier	sgr		1292674	1					
ANR	1293349	Identifier	adjusted		1292674	1					
ANR	1293350	PrimaryExpression	0		1292674	1					
ANR	1293351	Identifier	y		1292674	1					
ANR	1293352	CallExpression	any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y )		1292674	1					
ANR	1293353	Callee	any_abs		1292674	0					
ANR	1293354	Identifier	any_abs		1292674	0					
ANR	1293355	ArgumentList	plp -> width . y + dev -> sgr . adjusted [ 2 ] . y		1292674	1					
ANR	1293356	Argument	plp -> width . y + dev -> sgr . adjusted [ 2 ] . y		1292674	0					
ANR	1293357	AdditiveExpression	plp -> width . y + dev -> sgr . adjusted [ 2 ] . y		1292674	0		+			
ANR	1293358	MemberAccess	plp -> width . y		1292674	0					
ANR	1293359	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293360	Identifier	plp		1292674	0					
ANR	1293361	Identifier	width		1292674	1					
ANR	1293362	Identifier	y		1292674	1					
ANR	1293363	MemberAccess	dev -> sgr . adjusted [ 2 ] . y		1292674	1					
ANR	1293364	ArrayIndexing	dev -> sgr . adjusted [ 2 ]		1292674	0					
ANR	1293365	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293366	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293367	Identifier	dev		1292674	0					
ANR	1293368	Identifier	sgr		1292674	1					
ANR	1293369	Identifier	adjusted		1292674	1					
ANR	1293370	PrimaryExpression	2		1292674	1					
ANR	1293371	Identifier	y		1292674	1					
ANR	1293372	AndExpression	any_abs ( plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x ) && any_abs ( plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y )		1292674	1		&&			
ANR	1293373	RelationalExpression	any_abs ( plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x ) <= any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x )		1292674	0		<=			
ANR	1293374	CallExpression	any_abs ( plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x )		1292674	0					
ANR	1293375	Callee	any_abs		1292674	0					
ANR	1293376	Identifier	any_abs		1292674	0					
ANR	1293377	ArgumentList	plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x		1292674	1					
ANR	1293378	Argument	plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x		1292674	0					
ANR	1293379	AdditiveExpression	plp -> e . p . x - dev -> sgr . adjusted [ 1 ] . x		1292674	0		-			
ANR	1293380	MemberAccess	plp -> e . p . x		1292674	0					
ANR	1293381	MemberAccess	plp -> e . p		1292674	0					
ANR	1293382	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293383	Identifier	plp		1292674	0					
ANR	1293384	Identifier	e		1292674	1					
ANR	1293385	Identifier	p		1292674	1					
ANR	1293386	Identifier	x		1292674	1					
ANR	1293387	MemberAccess	dev -> sgr . adjusted [ 1 ] . x		1292674	1					
ANR	1293388	ArrayIndexing	dev -> sgr . adjusted [ 1 ]		1292674	0					
ANR	1293389	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293390	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293391	Identifier	dev		1292674	0					
ANR	1293392	Identifier	sgr		1292674	1					
ANR	1293393	Identifier	adjusted		1292674	1					
ANR	1293394	PrimaryExpression	1		1292674	1					
ANR	1293395	Identifier	x		1292674	1					
ANR	1293396	CallExpression	any_abs ( plp -> width . x + dev -> sgr . adjusted [ 2 ] . x )		1292674	1					
ANR	1293397	Callee	any_abs		1292674	0					
ANR	1293398	Identifier	any_abs		1292674	0					
ANR	1293399	ArgumentList	plp -> width . x + dev -> sgr . adjusted [ 2 ] . x		1292674	1					
ANR	1293400	Argument	plp -> width . x + dev -> sgr . adjusted [ 2 ] . x		1292674	0					
ANR	1293401	AdditiveExpression	plp -> width . x + dev -> sgr . adjusted [ 2 ] . x		1292674	0		+			
ANR	1293402	MemberAccess	plp -> width . x		1292674	0					
ANR	1293403	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293404	Identifier	plp		1292674	0					
ANR	1293405	Identifier	width		1292674	1					
ANR	1293406	Identifier	x		1292674	1					
ANR	1293407	MemberAccess	dev -> sgr . adjusted [ 2 ] . x		1292674	1					
ANR	1293408	ArrayIndexing	dev -> sgr . adjusted [ 2 ]		1292674	0					
ANR	1293409	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293410	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293411	Identifier	dev		1292674	0					
ANR	1293412	Identifier	sgr		1292674	1					
ANR	1293413	Identifier	adjusted		1292674	1					
ANR	1293414	PrimaryExpression	2		1292674	1					
ANR	1293415	Identifier	x		1292674	1					
ANR	1293416	RelationalExpression	any_abs ( plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y ) <= any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y )		1292674	1		<=			
ANR	1293417	CallExpression	any_abs ( plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y )		1292674	0					
ANR	1293418	Callee	any_abs		1292674	0					
ANR	1293419	Identifier	any_abs		1292674	0					
ANR	1293420	ArgumentList	plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y		1292674	1					
ANR	1293421	Argument	plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y		1292674	0					
ANR	1293422	AdditiveExpression	plp -> e . p . y - dev -> sgr . adjusted [ 1 ] . y		1292674	0		-			
ANR	1293423	MemberAccess	plp -> e . p . y		1292674	0					
ANR	1293424	MemberAccess	plp -> e . p		1292674	0					
ANR	1293425	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293426	Identifier	plp		1292674	0					
ANR	1293427	Identifier	e		1292674	1					
ANR	1293428	Identifier	p		1292674	1					
ANR	1293429	Identifier	y		1292674	1					
ANR	1293430	MemberAccess	dev -> sgr . adjusted [ 1 ] . y		1292674	1					
ANR	1293431	ArrayIndexing	dev -> sgr . adjusted [ 1 ]		1292674	0					
ANR	1293432	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293433	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293434	Identifier	dev		1292674	0					
ANR	1293435	Identifier	sgr		1292674	1					
ANR	1293436	Identifier	adjusted		1292674	1					
ANR	1293437	PrimaryExpression	1		1292674	1					
ANR	1293438	Identifier	y		1292674	1					
ANR	1293439	CallExpression	any_abs ( plp -> width . y + dev -> sgr . adjusted [ 2 ] . y )		1292674	1					
ANR	1293440	Callee	any_abs		1292674	0					
ANR	1293441	Identifier	any_abs		1292674	0					
ANR	1293442	ArgumentList	plp -> width . y + dev -> sgr . adjusted [ 2 ] . y		1292674	1					
ANR	1293443	Argument	plp -> width . y + dev -> sgr . adjusted [ 2 ] . y		1292674	0					
ANR	1293444	AdditiveExpression	plp -> width . y + dev -> sgr . adjusted [ 2 ] . y		1292674	0		+			
ANR	1293445	MemberAccess	plp -> width . y		1292674	0					
ANR	1293446	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293447	Identifier	plp		1292674	0					
ANR	1293448	Identifier	width		1292674	1					
ANR	1293449	Identifier	y		1292674	1					
ANR	1293450	MemberAccess	dev -> sgr . adjusted [ 2 ] . y		1292674	1					
ANR	1293451	ArrayIndexing	dev -> sgr . adjusted [ 2 ]		1292674	0					
ANR	1293452	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293453	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293454	Identifier	dev		1292674	0					
ANR	1293455	Identifier	sgr		1292674	1					
ANR	1293456	Identifier	adjusted		1292674	1					
ANR	1293457	PrimaryExpression	2		1292674	1					
ANR	1293458	Identifier	y		1292674	1					
ANR	1293459	CompoundStatement		52:24:3709:3772	1292674	1					
ANR	1293460	IdentifierDeclStatement	fixed delta_w_x = ( dev -> sgr . adjusted [ 2 ] . x - dev -> sgr . orig [ 2 ] . x ) ;	1283:24:53984:54047	1292674	0	True				
ANR	1293461	IdentifierDecl	delta_w_x = ( dev -> sgr . adjusted [ 2 ] . x - dev -> sgr . orig [ 2 ] . x )		1292674	0					
ANR	1293462	IdentifierDeclType	fixed		1292674	0					
ANR	1293463	Identifier	delta_w_x		1292674	1					
ANR	1293464	AssignmentExpression	delta_w_x = ( dev -> sgr . adjusted [ 2 ] . x - dev -> sgr . orig [ 2 ] . x )		1292674	2		=			
ANR	1293465	Identifier	delta_w_x		1292674	0					
ANR	1293466	AdditiveExpression	dev -> sgr . adjusted [ 2 ] . x - dev -> sgr . orig [ 2 ] . x		1292674	1		-			
ANR	1293467	MemberAccess	dev -> sgr . adjusted [ 2 ] . x		1292674	0					
ANR	1293468	ArrayIndexing	dev -> sgr . adjusted [ 2 ]		1292674	0					
ANR	1293469	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293470	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293471	Identifier	dev		1292674	0					
ANR	1293472	Identifier	sgr		1292674	1					
ANR	1293473	Identifier	adjusted		1292674	1					
ANR	1293474	PrimaryExpression	2		1292674	1					
ANR	1293475	Identifier	x		1292674	1					
ANR	1293476	MemberAccess	dev -> sgr . orig [ 2 ] . x		1292674	1					
ANR	1293477	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1293478	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293479	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293480	Identifier	dev		1292674	0					
ANR	1293481	Identifier	sgr		1292674	1					
ANR	1293482	Identifier	orig		1292674	1					
ANR	1293483	PrimaryExpression	2		1292674	1					
ANR	1293484	Identifier	x		1292674	1					
ANR	1293485	IdentifierDeclStatement	fixed delta_w_y = ( dev -> sgr . adjusted [ 2 ] . y - dev -> sgr . orig [ 2 ] . y ) ;	1284:24:54073:54136	1292674	1	True				
ANR	1293486	IdentifierDecl	delta_w_y = ( dev -> sgr . adjusted [ 2 ] . y - dev -> sgr . orig [ 2 ] . y )		1292674	0					
ANR	1293487	IdentifierDeclType	fixed		1292674	0					
ANR	1293488	Identifier	delta_w_y		1292674	1					
ANR	1293489	AssignmentExpression	delta_w_y = ( dev -> sgr . adjusted [ 2 ] . y - dev -> sgr . orig [ 2 ] . y )		1292674	2		=			
ANR	1293490	Identifier	delta_w_y		1292674	0					
ANR	1293491	AdditiveExpression	dev -> sgr . adjusted [ 2 ] . y - dev -> sgr . orig [ 2 ] . y		1292674	1		-			
ANR	1293492	MemberAccess	dev -> sgr . adjusted [ 2 ] . y		1292674	0					
ANR	1293493	ArrayIndexing	dev -> sgr . adjusted [ 2 ]		1292674	0					
ANR	1293494	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293495	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293496	Identifier	dev		1292674	0					
ANR	1293497	Identifier	sgr		1292674	1					
ANR	1293498	Identifier	adjusted		1292674	1					
ANR	1293499	PrimaryExpression	2		1292674	1					
ANR	1293500	Identifier	y		1292674	1					
ANR	1293501	MemberAccess	dev -> sgr . orig [ 2 ] . y		1292674	1					
ANR	1293502	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1293503	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293504	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293505	Identifier	dev		1292674	0					
ANR	1293506	Identifier	sgr		1292674	1					
ANR	1293507	Identifier	orig		1292674	1					
ANR	1293508	PrimaryExpression	2		1292674	1					
ANR	1293509	Identifier	y		1292674	1					
ANR	1293510	IdentifierDeclStatement	fixed shift_o_x = ( dev -> sgr . adjusted [ 0 ] . x - dev -> sgr . orig [ 0 ] . x ) ;	1285:24:54162:54225	1292674	2	True				
ANR	1293511	IdentifierDecl	shift_o_x = ( dev -> sgr . adjusted [ 0 ] . x - dev -> sgr . orig [ 0 ] . x )		1292674	0					
ANR	1293512	IdentifierDeclType	fixed		1292674	0					
ANR	1293513	Identifier	shift_o_x		1292674	1					
ANR	1293514	AssignmentExpression	shift_o_x = ( dev -> sgr . adjusted [ 0 ] . x - dev -> sgr . orig [ 0 ] . x )		1292674	2		=			
ANR	1293515	Identifier	shift_o_x		1292674	0					
ANR	1293516	AdditiveExpression	dev -> sgr . adjusted [ 0 ] . x - dev -> sgr . orig [ 0 ] . x		1292674	1		-			
ANR	1293517	MemberAccess	dev -> sgr . adjusted [ 0 ] . x		1292674	0					
ANR	1293518	ArrayIndexing	dev -> sgr . adjusted [ 0 ]		1292674	0					
ANR	1293519	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293520	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293521	Identifier	dev		1292674	0					
ANR	1293522	Identifier	sgr		1292674	1					
ANR	1293523	Identifier	adjusted		1292674	1					
ANR	1293524	PrimaryExpression	0		1292674	1					
ANR	1293525	Identifier	x		1292674	1					
ANR	1293526	MemberAccess	dev -> sgr . orig [ 0 ] . x		1292674	1					
ANR	1293527	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1293528	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293529	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293530	Identifier	dev		1292674	0					
ANR	1293531	Identifier	sgr		1292674	1					
ANR	1293532	Identifier	orig		1292674	1					
ANR	1293533	PrimaryExpression	0		1292674	1					
ANR	1293534	Identifier	x		1292674	1					
ANR	1293535	IdentifierDeclStatement	fixed shift_o_y = ( dev -> sgr . adjusted [ 0 ] . y - dev -> sgr . orig [ 0 ] . y ) ;	1286:24:54251:54314	1292674	3	True				
ANR	1293536	IdentifierDecl	shift_o_y = ( dev -> sgr . adjusted [ 0 ] . y - dev -> sgr . orig [ 0 ] . y )		1292674	0					
ANR	1293537	IdentifierDeclType	fixed		1292674	0					
ANR	1293538	Identifier	shift_o_y		1292674	1					
ANR	1293539	AssignmentExpression	shift_o_y = ( dev -> sgr . adjusted [ 0 ] . y - dev -> sgr . orig [ 0 ] . y )		1292674	2		=			
ANR	1293540	Identifier	shift_o_y		1292674	0					
ANR	1293541	AdditiveExpression	dev -> sgr . adjusted [ 0 ] . y - dev -> sgr . orig [ 0 ] . y		1292674	1		-			
ANR	1293542	MemberAccess	dev -> sgr . adjusted [ 0 ] . y		1292674	0					
ANR	1293543	ArrayIndexing	dev -> sgr . adjusted [ 0 ]		1292674	0					
ANR	1293544	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293545	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293546	Identifier	dev		1292674	0					
ANR	1293547	Identifier	sgr		1292674	1					
ANR	1293548	Identifier	adjusted		1292674	1					
ANR	1293549	PrimaryExpression	0		1292674	1					
ANR	1293550	Identifier	y		1292674	1					
ANR	1293551	MemberAccess	dev -> sgr . orig [ 0 ] . y		1292674	1					
ANR	1293552	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1293553	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293554	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293555	Identifier	dev		1292674	0					
ANR	1293556	Identifier	sgr		1292674	1					
ANR	1293557	Identifier	orig		1292674	1					
ANR	1293558	PrimaryExpression	0		1292674	1					
ANR	1293559	Identifier	y		1292674	1					
ANR	1293560	IdentifierDeclStatement	fixed shift_e_x = ( dev -> sgr . adjusted [ 1 ] . x - dev -> sgr . orig [ 1 ] . x ) ;	1287:24:54340:54403	1292674	4	True				
ANR	1293561	IdentifierDecl	shift_e_x = ( dev -> sgr . adjusted [ 1 ] . x - dev -> sgr . orig [ 1 ] . x )		1292674	0					
ANR	1293562	IdentifierDeclType	fixed		1292674	0					
ANR	1293563	Identifier	shift_e_x		1292674	1					
ANR	1293564	AssignmentExpression	shift_e_x = ( dev -> sgr . adjusted [ 1 ] . x - dev -> sgr . orig [ 1 ] . x )		1292674	2		=			
ANR	1293565	Identifier	shift_e_x		1292674	0					
ANR	1293566	AdditiveExpression	dev -> sgr . adjusted [ 1 ] . x - dev -> sgr . orig [ 1 ] . x		1292674	1		-			
ANR	1293567	MemberAccess	dev -> sgr . adjusted [ 1 ] . x		1292674	0					
ANR	1293568	ArrayIndexing	dev -> sgr . adjusted [ 1 ]		1292674	0					
ANR	1293569	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293570	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293571	Identifier	dev		1292674	0					
ANR	1293572	Identifier	sgr		1292674	1					
ANR	1293573	Identifier	adjusted		1292674	1					
ANR	1293574	PrimaryExpression	1		1292674	1					
ANR	1293575	Identifier	x		1292674	1					
ANR	1293576	MemberAccess	dev -> sgr . orig [ 1 ] . x		1292674	1					
ANR	1293577	ArrayIndexing	dev -> sgr . orig [ 1 ]		1292674	0					
ANR	1293578	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293579	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293580	Identifier	dev		1292674	0					
ANR	1293581	Identifier	sgr		1292674	1					
ANR	1293582	Identifier	orig		1292674	1					
ANR	1293583	PrimaryExpression	1		1292674	1					
ANR	1293584	Identifier	x		1292674	1					
ANR	1293585	IdentifierDeclStatement	fixed shift_e_y = ( dev -> sgr . adjusted [ 1 ] . y - dev -> sgr . orig [ 1 ] . y ) ;	1288:24:54472:54535	1292674	5	True				
ANR	1293586	IdentifierDecl	shift_e_y = ( dev -> sgr . adjusted [ 1 ] . y - dev -> sgr . orig [ 1 ] . y )		1292674	0					
ANR	1293587	IdentifierDeclType	fixed		1292674	0					
ANR	1293588	Identifier	shift_e_y		1292674	1					
ANR	1293589	AssignmentExpression	shift_e_y = ( dev -> sgr . adjusted [ 1 ] . y - dev -> sgr . orig [ 1 ] . y )		1292674	2		=			
ANR	1293590	Identifier	shift_e_y		1292674	0					
ANR	1293591	AdditiveExpression	dev -> sgr . adjusted [ 1 ] . y - dev -> sgr . orig [ 1 ] . y		1292674	1		-			
ANR	1293592	MemberAccess	dev -> sgr . adjusted [ 1 ] . y		1292674	0					
ANR	1293593	ArrayIndexing	dev -> sgr . adjusted [ 1 ]		1292674	0					
ANR	1293594	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1293595	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293596	Identifier	dev		1292674	0					
ANR	1293597	Identifier	sgr		1292674	1					
ANR	1293598	Identifier	adjusted		1292674	1					
ANR	1293599	PrimaryExpression	1		1292674	1					
ANR	1293600	Identifier	y		1292674	1					
ANR	1293601	MemberAccess	dev -> sgr . orig [ 1 ] . y		1292674	1					
ANR	1293602	ArrayIndexing	dev -> sgr . orig [ 1 ]		1292674	0					
ANR	1293603	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293604	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293605	Identifier	dev		1292674	0					
ANR	1293606	Identifier	sgr		1292674	1					
ANR	1293607	Identifier	orig		1292674	1					
ANR	1293608	PrimaryExpression	1		1292674	1					
ANR	1293609	Identifier	y		1292674	1					
ANR	1293610	IfStatement	if ( plp -> o . p . x < dev -> sgr . orig [ 0 ] . x || ( plp -> o . p . x == dev -> sgr . orig [ 0 ] . x && plp -> o . p . y < dev -> sgr . orig [ 0 ] . y ) )		1292674	6					
ANR	1293611	Condition	plp -> o . p . x < dev -> sgr . orig [ 0 ] . x || ( plp -> o . p . x == dev -> sgr . orig [ 0 ] . x && plp -> o . p . y < dev -> sgr . orig [ 0 ] . y )	1290:28:54566:54697	1292674	0	True				
ANR	1293612	OrExpression	plp -> o . p . x < dev -> sgr . orig [ 0 ] . x || ( plp -> o . p . x == dev -> sgr . orig [ 0 ] . x && plp -> o . p . y < dev -> sgr . orig [ 0 ] . y )		1292674	0		||			
ANR	1293613	RelationalExpression	plp -> o . p . x < dev -> sgr . orig [ 0 ] . x		1292674	0		<			
ANR	1293614	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1293615	MemberAccess	plp -> o . p		1292674	0					
ANR	1293616	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293617	Identifier	plp		1292674	0					
ANR	1293618	Identifier	o		1292674	1					
ANR	1293619	Identifier	p		1292674	1					
ANR	1293620	Identifier	x		1292674	1					
ANR	1293621	MemberAccess	dev -> sgr . orig [ 0 ] . x		1292674	1					
ANR	1293622	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1293623	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293624	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293625	Identifier	dev		1292674	0					
ANR	1293626	Identifier	sgr		1292674	1					
ANR	1293627	Identifier	orig		1292674	1					
ANR	1293628	PrimaryExpression	0		1292674	1					
ANR	1293629	Identifier	x		1292674	1					
ANR	1293630	AndExpression	plp -> o . p . x == dev -> sgr . orig [ 0 ] . x && plp -> o . p . y < dev -> sgr . orig [ 0 ] . y		1292674	1		&&			
ANR	1293631	EqualityExpression	plp -> o . p . x == dev -> sgr . orig [ 0 ] . x		1292674	0		==			
ANR	1293632	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1293633	MemberAccess	plp -> o . p		1292674	0					
ANR	1293634	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293635	Identifier	plp		1292674	0					
ANR	1293636	Identifier	o		1292674	1					
ANR	1293637	Identifier	p		1292674	1					
ANR	1293638	Identifier	x		1292674	1					
ANR	1293639	MemberAccess	dev -> sgr . orig [ 0 ] . x		1292674	1					
ANR	1293640	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1293641	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293642	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293643	Identifier	dev		1292674	0					
ANR	1293644	Identifier	sgr		1292674	1					
ANR	1293645	Identifier	orig		1292674	1					
ANR	1293646	PrimaryExpression	0		1292674	1					
ANR	1293647	Identifier	x		1292674	1					
ANR	1293648	RelationalExpression	plp -> o . p . y < dev -> sgr . orig [ 0 ] . y		1292674	1		<			
ANR	1293649	MemberAccess	plp -> o . p . y		1292674	0					
ANR	1293650	MemberAccess	plp -> o . p		1292674	0					
ANR	1293651	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293652	Identifier	plp		1292674	0					
ANR	1293653	Identifier	o		1292674	1					
ANR	1293654	Identifier	p		1292674	1					
ANR	1293655	Identifier	y		1292674	1					
ANR	1293656	MemberAccess	dev -> sgr . orig [ 0 ] . y		1292674	1					
ANR	1293657	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1293658	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293659	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293660	Identifier	dev		1292674	0					
ANR	1293661	Identifier	sgr		1292674	1					
ANR	1293662	Identifier	orig		1292674	1					
ANR	1293663	PrimaryExpression	0		1292674	1					
ANR	1293664	Identifier	y		1292674	1					
ANR	1293665	CompoundStatement		55:99:3937:3937	1292674	1					
ANR	1293666	ExpressionStatement	"if_debug4m ( 'O' , dev -> memory , ""[O]don't adjust {{%f,%f},{%f,%f}}\\n"" , fixed2float ( plp -> o . p . x ) , fixed2float ( plp -> o . p . y ) , fixed2float ( plp -> e . p . x ) , fixed2float ( plp -> e . p . y ) )"	1293:28:54806:55051	1292674	0	True				
ANR	1293667	CallExpression	"if_debug4m ( 'O' , dev -> memory , ""[O]don't adjust {{%f,%f},{%f,%f}}\\n"" , fixed2float ( plp -> o . p . x ) , fixed2float ( plp -> o . p . y ) , fixed2float ( plp -> e . p . x ) , fixed2float ( plp -> e . p . y ) )"		1292674	0					
ANR	1293668	Callee	if_debug4m		1292674	0					
ANR	1293669	Identifier	if_debug4m		1292674	0					
ANR	1293670	ArgumentList	'O'		1292674	1					
ANR	1293671	Argument	'O'		1292674	0					
ANR	1293672	PrimaryExpression	'O'		1292674	0					
ANR	1293673	Argument	dev -> memory		1292674	1					
ANR	1293674	PtrMemberAccess	dev -> memory		1292674	0					
ANR	1293675	Identifier	dev		1292674	0					
ANR	1293676	Identifier	memory		1292674	1					
ANR	1293677	Argument	"""[O]don't adjust {{%f,%f},{%f,%f}}\\n"""		1292674	2					
ANR	1293678	PrimaryExpression	"""[O]don't adjust {{%f,%f},{%f,%f}}\\n"""		1292674	0					
ANR	1293679	Argument	fixed2float ( plp -> o . p . x )		1292674	3					
ANR	1293680	CallExpression	fixed2float ( plp -> o . p . x )		1292674	0					
ANR	1293681	Callee	fixed2float		1292674	0					
ANR	1293682	Identifier	fixed2float		1292674	0					
ANR	1293683	ArgumentList	plp -> o . p . x		1292674	1					
ANR	1293684	Argument	plp -> o . p . x		1292674	0					
ANR	1293685	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1293686	MemberAccess	plp -> o . p		1292674	0					
ANR	1293687	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293688	Identifier	plp		1292674	0					
ANR	1293689	Identifier	o		1292674	1					
ANR	1293690	Identifier	p		1292674	1					
ANR	1293691	Identifier	x		1292674	1					
ANR	1293692	Argument	fixed2float ( plp -> o . p . y )		1292674	4					
ANR	1293693	CallExpression	fixed2float ( plp -> o . p . y )		1292674	0					
ANR	1293694	Callee	fixed2float		1292674	0					
ANR	1293695	Identifier	fixed2float		1292674	0					
ANR	1293696	ArgumentList	plp -> o . p . y		1292674	1					
ANR	1293697	Argument	plp -> o . p . y		1292674	0					
ANR	1293698	MemberAccess	plp -> o . p . y		1292674	0					
ANR	1293699	MemberAccess	plp -> o . p		1292674	0					
ANR	1293700	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293701	Identifier	plp		1292674	0					
ANR	1293702	Identifier	o		1292674	1					
ANR	1293703	Identifier	p		1292674	1					
ANR	1293704	Identifier	y		1292674	1					
ANR	1293705	Argument	fixed2float ( plp -> e . p . x )		1292674	5					
ANR	1293706	CallExpression	fixed2float ( plp -> e . p . x )		1292674	0					
ANR	1293707	Callee	fixed2float		1292674	0					
ANR	1293708	Identifier	fixed2float		1292674	0					
ANR	1293709	ArgumentList	plp -> e . p . x		1292674	1					
ANR	1293710	Argument	plp -> e . p . x		1292674	0					
ANR	1293711	MemberAccess	plp -> e . p . x		1292674	0					
ANR	1293712	MemberAccess	plp -> e . p		1292674	0					
ANR	1293713	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293714	Identifier	plp		1292674	0					
ANR	1293715	Identifier	e		1292674	1					
ANR	1293716	Identifier	p		1292674	1					
ANR	1293717	Identifier	x		1292674	1					
ANR	1293718	Argument	fixed2float ( plp -> e . p . y )		1292674	6					
ANR	1293719	CallExpression	fixed2float ( plp -> e . p . y )		1292674	0					
ANR	1293720	Callee	fixed2float		1292674	0					
ANR	1293721	Identifier	fixed2float		1292674	0					
ANR	1293722	ArgumentList	plp -> e . p . y		1292674	1					
ANR	1293723	Argument	plp -> e . p . y		1292674	0					
ANR	1293724	MemberAccess	plp -> e . p . y		1292674	0					
ANR	1293725	MemberAccess	plp -> e . p		1292674	0					
ANR	1293726	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293727	Identifier	plp		1292674	0					
ANR	1293728	Identifier	e		1292674	1					
ANR	1293729	Identifier	p		1292674	1					
ANR	1293730	Identifier	y		1292674	1					
ANR	1293731	ExpressionStatement	plp -> width . x += ( shift_o_x - delta_w_x ) / 2	1296:28:55081:55124	1292674	1	True				
ANR	1293732	AssignmentExpression	plp -> width . x += ( shift_o_x - delta_w_x ) / 2		1292674	0		+=			
ANR	1293733	MemberAccess	plp -> width . x		1292674	0					
ANR	1293734	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293735	Identifier	plp		1292674	0					
ANR	1293736	Identifier	width		1292674	1					
ANR	1293737	Identifier	x		1292674	1					
ANR	1293738	MultiplicativeExpression	( shift_o_x - delta_w_x ) / 2		1292674	1		/			
ANR	1293739	AdditiveExpression	shift_o_x - delta_w_x		1292674	0		-			
ANR	1293740	Identifier	shift_o_x		1292674	0					
ANR	1293741	Identifier	delta_w_x		1292674	1					
ANR	1293742	PrimaryExpression	2		1292674	1					
ANR	1293743	ExpressionStatement	plp -> width . y += ( shift_o_y - delta_w_y ) / 2	1297:28:55154:55197	1292674	2	True				
ANR	1293744	AssignmentExpression	plp -> width . y += ( shift_o_y - delta_w_y ) / 2		1292674	0		+=			
ANR	1293745	MemberAccess	plp -> width . y		1292674	0					
ANR	1293746	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293747	Identifier	plp		1292674	0					
ANR	1293748	Identifier	width		1292674	1					
ANR	1293749	Identifier	y		1292674	1					
ANR	1293750	MultiplicativeExpression	( shift_o_y - delta_w_y ) / 2		1292674	1		/			
ANR	1293751	AdditiveExpression	shift_o_y - delta_w_y		1292674	0		-			
ANR	1293752	Identifier	shift_o_y		1292674	0					
ANR	1293753	Identifier	delta_w_y		1292674	1					
ANR	1293754	PrimaryExpression	2		1292674	1					
ANR	1293755	ExpressionStatement	plp -> o . p . x += ( shift_o_x - delta_w_x ) / 2	1298:28:55227:55268	1292674	3	True				
ANR	1293756	AssignmentExpression	plp -> o . p . x += ( shift_o_x - delta_w_x ) / 2		1292674	0		+=			
ANR	1293757	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1293758	MemberAccess	plp -> o . p		1292674	0					
ANR	1293759	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293760	Identifier	plp		1292674	0					
ANR	1293761	Identifier	o		1292674	1					
ANR	1293762	Identifier	p		1292674	1					
ANR	1293763	Identifier	x		1292674	1					
ANR	1293764	MultiplicativeExpression	( shift_o_x - delta_w_x ) / 2		1292674	1		/			
ANR	1293765	AdditiveExpression	shift_o_x - delta_w_x		1292674	0		-			
ANR	1293766	Identifier	shift_o_x		1292674	0					
ANR	1293767	Identifier	delta_w_x		1292674	1					
ANR	1293768	PrimaryExpression	2		1292674	1					
ANR	1293769	ExpressionStatement	plp -> o . p . y += ( shift_o_y - delta_w_y ) / 2	1299:28:55298:55339	1292674	4	True				
ANR	1293770	AssignmentExpression	plp -> o . p . y += ( shift_o_y - delta_w_y ) / 2		1292674	0		+=			
ANR	1293771	MemberAccess	plp -> o . p . y		1292674	0					
ANR	1293772	MemberAccess	plp -> o . p		1292674	0					
ANR	1293773	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293774	Identifier	plp		1292674	0					
ANR	1293775	Identifier	o		1292674	1					
ANR	1293776	Identifier	p		1292674	1					
ANR	1293777	Identifier	y		1292674	1					
ANR	1293778	MultiplicativeExpression	( shift_o_y - delta_w_y ) / 2		1292674	1		/			
ANR	1293779	AdditiveExpression	shift_o_y - delta_w_y		1292674	0		-			
ANR	1293780	Identifier	shift_o_y		1292674	0					
ANR	1293781	Identifier	delta_w_y		1292674	1					
ANR	1293782	PrimaryExpression	2		1292674	1					
ANR	1293783	ExpressionStatement	plp -> e . p . x += ( shift_e_x - delta_w_x ) / 2	1300:28:55369:55410	1292674	5	True				
ANR	1293784	AssignmentExpression	plp -> e . p . x += ( shift_e_x - delta_w_x ) / 2		1292674	0		+=			
ANR	1293785	MemberAccess	plp -> e . p . x		1292674	0					
ANR	1293786	MemberAccess	plp -> e . p		1292674	0					
ANR	1293787	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293788	Identifier	plp		1292674	0					
ANR	1293789	Identifier	e		1292674	1					
ANR	1293790	Identifier	p		1292674	1					
ANR	1293791	Identifier	x		1292674	1					
ANR	1293792	MultiplicativeExpression	( shift_e_x - delta_w_x ) / 2		1292674	1		/			
ANR	1293793	AdditiveExpression	shift_e_x - delta_w_x		1292674	0		-			
ANR	1293794	Identifier	shift_e_x		1292674	0					
ANR	1293795	Identifier	delta_w_x		1292674	1					
ANR	1293796	PrimaryExpression	2		1292674	1					
ANR	1293797	ExpressionStatement	plp -> e . p . y += ( shift_e_y - delta_w_y ) / 2	1301:28:55440:55481	1292674	6	True				
ANR	1293798	AssignmentExpression	plp -> e . p . y += ( shift_e_y - delta_w_y ) / 2		1292674	0		+=			
ANR	1293799	MemberAccess	plp -> e . p . y		1292674	0					
ANR	1293800	MemberAccess	plp -> e . p		1292674	0					
ANR	1293801	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293802	Identifier	plp		1292674	0					
ANR	1293803	Identifier	e		1292674	1					
ANR	1293804	Identifier	p		1292674	1					
ANR	1293805	Identifier	y		1292674	1					
ANR	1293806	MultiplicativeExpression	( shift_e_y - delta_w_y ) / 2		1292674	1		/			
ANR	1293807	AdditiveExpression	shift_e_y - delta_w_y		1292674	0		-			
ANR	1293808	Identifier	shift_e_y		1292674	0					
ANR	1293809	Identifier	delta_w_y		1292674	1					
ANR	1293810	PrimaryExpression	2		1292674	1					
ANR	1293811	ExpressionStatement	adjust = false	1302:28:55511:55525	1292674	7	True				
ANR	1293812	AssignmentExpression	adjust = false		1292674	0		=			
ANR	1293813	Identifier	adjust		1292674	0					
ANR	1293814	Identifier	false		1292674	1					
ANR	1293815	ElseStatement	else		1292674	0					
ANR	1293816	CompoundStatement		67:31:4795:4795	1292674	0					
ANR	1293817	ExpressionStatement	"if_debug4m ( 'O' , dev -> memory , ""[O]don't adjust {{%f,%f},{%f,%f}}\\n"" , fixed2float ( plp -> o . p . x ) , fixed2float ( plp -> o . p . y ) , fixed2float ( plp -> e . p . x ) , fixed2float ( plp -> e . p . y ) )"	1305:28:55665:55910	1292674	0	True				
ANR	1293818	CallExpression	"if_debug4m ( 'O' , dev -> memory , ""[O]don't adjust {{%f,%f},{%f,%f}}\\n"" , fixed2float ( plp -> o . p . x ) , fixed2float ( plp -> o . p . y ) , fixed2float ( plp -> e . p . x ) , fixed2float ( plp -> e . p . y ) )"		1292674	0					
ANR	1293819	Callee	if_debug4m		1292674	0					
ANR	1293820	Identifier	if_debug4m		1292674	0					
ANR	1293821	ArgumentList	'O'		1292674	1					
ANR	1293822	Argument	'O'		1292674	0					
ANR	1293823	PrimaryExpression	'O'		1292674	0					
ANR	1293824	Argument	dev -> memory		1292674	1					
ANR	1293825	PtrMemberAccess	dev -> memory		1292674	0					
ANR	1293826	Identifier	dev		1292674	0					
ANR	1293827	Identifier	memory		1292674	1					
ANR	1293828	Argument	"""[O]don't adjust {{%f,%f},{%f,%f}}\\n"""		1292674	2					
ANR	1293829	PrimaryExpression	"""[O]don't adjust {{%f,%f},{%f,%f}}\\n"""		1292674	0					
ANR	1293830	Argument	fixed2float ( plp -> o . p . x )		1292674	3					
ANR	1293831	CallExpression	fixed2float ( plp -> o . p . x )		1292674	0					
ANR	1293832	Callee	fixed2float		1292674	0					
ANR	1293833	Identifier	fixed2float		1292674	0					
ANR	1293834	ArgumentList	plp -> o . p . x		1292674	1					
ANR	1293835	Argument	plp -> o . p . x		1292674	0					
ANR	1293836	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1293837	MemberAccess	plp -> o . p		1292674	0					
ANR	1293838	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293839	Identifier	plp		1292674	0					
ANR	1293840	Identifier	o		1292674	1					
ANR	1293841	Identifier	p		1292674	1					
ANR	1293842	Identifier	x		1292674	1					
ANR	1293843	Argument	fixed2float ( plp -> o . p . y )		1292674	4					
ANR	1293844	CallExpression	fixed2float ( plp -> o . p . y )		1292674	0					
ANR	1293845	Callee	fixed2float		1292674	0					
ANR	1293846	Identifier	fixed2float		1292674	0					
ANR	1293847	ArgumentList	plp -> o . p . y		1292674	1					
ANR	1293848	Argument	plp -> o . p . y		1292674	0					
ANR	1293849	MemberAccess	plp -> o . p . y		1292674	0					
ANR	1293850	MemberAccess	plp -> o . p		1292674	0					
ANR	1293851	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293852	Identifier	plp		1292674	0					
ANR	1293853	Identifier	o		1292674	1					
ANR	1293854	Identifier	p		1292674	1					
ANR	1293855	Identifier	y		1292674	1					
ANR	1293856	Argument	fixed2float ( plp -> e . p . x )		1292674	5					
ANR	1293857	CallExpression	fixed2float ( plp -> e . p . x )		1292674	0					
ANR	1293858	Callee	fixed2float		1292674	0					
ANR	1293859	Identifier	fixed2float		1292674	0					
ANR	1293860	ArgumentList	plp -> e . p . x		1292674	1					
ANR	1293861	Argument	plp -> e . p . x		1292674	0					
ANR	1293862	MemberAccess	plp -> e . p . x		1292674	0					
ANR	1293863	MemberAccess	plp -> e . p		1292674	0					
ANR	1293864	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293865	Identifier	plp		1292674	0					
ANR	1293866	Identifier	e		1292674	1					
ANR	1293867	Identifier	p		1292674	1					
ANR	1293868	Identifier	x		1292674	1					
ANR	1293869	Argument	fixed2float ( plp -> e . p . y )		1292674	6					
ANR	1293870	CallExpression	fixed2float ( plp -> e . p . y )		1292674	0					
ANR	1293871	Callee	fixed2float		1292674	0					
ANR	1293872	Identifier	fixed2float		1292674	0					
ANR	1293873	ArgumentList	plp -> e . p . y		1292674	1					
ANR	1293874	Argument	plp -> e . p . y		1292674	0					
ANR	1293875	MemberAccess	plp -> e . p . y		1292674	0					
ANR	1293876	MemberAccess	plp -> e . p		1292674	0					
ANR	1293877	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293878	Identifier	plp		1292674	0					
ANR	1293879	Identifier	e		1292674	1					
ANR	1293880	Identifier	p		1292674	1					
ANR	1293881	Identifier	y		1292674	1					
ANR	1293882	ExpressionStatement	plp -> width . x -= ( shift_o_x + delta_w_x ) / 2	1308:28:55940:55983	1292674	1	True				
ANR	1293883	AssignmentExpression	plp -> width . x -= ( shift_o_x + delta_w_x ) / 2		1292674	0		-=			
ANR	1293884	MemberAccess	plp -> width . x		1292674	0					
ANR	1293885	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293886	Identifier	plp		1292674	0					
ANR	1293887	Identifier	width		1292674	1					
ANR	1293888	Identifier	x		1292674	1					
ANR	1293889	MultiplicativeExpression	( shift_o_x + delta_w_x ) / 2		1292674	1		/			
ANR	1293890	AdditiveExpression	shift_o_x + delta_w_x		1292674	0		+			
ANR	1293891	Identifier	shift_o_x		1292674	0					
ANR	1293892	Identifier	delta_w_x		1292674	1					
ANR	1293893	PrimaryExpression	2		1292674	1					
ANR	1293894	ExpressionStatement	plp -> width . y -= ( shift_o_y + delta_w_y ) / 2	1309:28:56013:56056	1292674	2	True				
ANR	1293895	AssignmentExpression	plp -> width . y -= ( shift_o_y + delta_w_y ) / 2		1292674	0		-=			
ANR	1293896	MemberAccess	plp -> width . y		1292674	0					
ANR	1293897	PtrMemberAccess	plp -> width		1292674	0					
ANR	1293898	Identifier	plp		1292674	0					
ANR	1293899	Identifier	width		1292674	1					
ANR	1293900	Identifier	y		1292674	1					
ANR	1293901	MultiplicativeExpression	( shift_o_y + delta_w_y ) / 2		1292674	1		/			
ANR	1293902	AdditiveExpression	shift_o_y + delta_w_y		1292674	0		+			
ANR	1293903	Identifier	shift_o_y		1292674	0					
ANR	1293904	Identifier	delta_w_y		1292674	1					
ANR	1293905	PrimaryExpression	2		1292674	1					
ANR	1293906	ExpressionStatement	plp -> o . p . x += ( shift_o_x + delta_w_x ) / 2	1310:28:56086:56127	1292674	3	True				
ANR	1293907	AssignmentExpression	plp -> o . p . x += ( shift_o_x + delta_w_x ) / 2		1292674	0		+=			
ANR	1293908	MemberAccess	plp -> o . p . x		1292674	0					
ANR	1293909	MemberAccess	plp -> o . p		1292674	0					
ANR	1293910	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293911	Identifier	plp		1292674	0					
ANR	1293912	Identifier	o		1292674	1					
ANR	1293913	Identifier	p		1292674	1					
ANR	1293914	Identifier	x		1292674	1					
ANR	1293915	MultiplicativeExpression	( shift_o_x + delta_w_x ) / 2		1292674	1		/			
ANR	1293916	AdditiveExpression	shift_o_x + delta_w_x		1292674	0		+			
ANR	1293917	Identifier	shift_o_x		1292674	0					
ANR	1293918	Identifier	delta_w_x		1292674	1					
ANR	1293919	PrimaryExpression	2		1292674	1					
ANR	1293920	ExpressionStatement	plp -> o . p . y += ( shift_o_y + delta_w_y ) / 2	1311:28:56157:56198	1292674	4	True				
ANR	1293921	AssignmentExpression	plp -> o . p . y += ( shift_o_y + delta_w_y ) / 2		1292674	0		+=			
ANR	1293922	MemberAccess	plp -> o . p . y		1292674	0					
ANR	1293923	MemberAccess	plp -> o . p		1292674	0					
ANR	1293924	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293925	Identifier	plp		1292674	0					
ANR	1293926	Identifier	o		1292674	1					
ANR	1293927	Identifier	p		1292674	1					
ANR	1293928	Identifier	y		1292674	1					
ANR	1293929	MultiplicativeExpression	( shift_o_y + delta_w_y ) / 2		1292674	1		/			
ANR	1293930	AdditiveExpression	shift_o_y + delta_w_y		1292674	0		+			
ANR	1293931	Identifier	shift_o_y		1292674	0					
ANR	1293932	Identifier	delta_w_y		1292674	1					
ANR	1293933	PrimaryExpression	2		1292674	1					
ANR	1293934	ExpressionStatement	plp -> e . p . x += ( shift_e_x + delta_w_x ) / 2	1312:28:56228:56269	1292674	5	True				
ANR	1293935	AssignmentExpression	plp -> e . p . x += ( shift_e_x + delta_w_x ) / 2		1292674	0		+=			
ANR	1293936	MemberAccess	plp -> e . p . x		1292674	0					
ANR	1293937	MemberAccess	plp -> e . p		1292674	0					
ANR	1293938	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293939	Identifier	plp		1292674	0					
ANR	1293940	Identifier	e		1292674	1					
ANR	1293941	Identifier	p		1292674	1					
ANR	1293942	Identifier	x		1292674	1					
ANR	1293943	MultiplicativeExpression	( shift_e_x + delta_w_x ) / 2		1292674	1		/			
ANR	1293944	AdditiveExpression	shift_e_x + delta_w_x		1292674	0		+			
ANR	1293945	Identifier	shift_e_x		1292674	0					
ANR	1293946	Identifier	delta_w_x		1292674	1					
ANR	1293947	PrimaryExpression	2		1292674	1					
ANR	1293948	ExpressionStatement	plp -> e . p . y += ( shift_e_y + delta_w_y ) / 2	1313:28:56299:56340	1292674	6	True				
ANR	1293949	AssignmentExpression	plp -> e . p . y += ( shift_e_y + delta_w_y ) / 2		1292674	0		+=			
ANR	1293950	MemberAccess	plp -> e . p . y		1292674	0					
ANR	1293951	MemberAccess	plp -> e . p		1292674	0					
ANR	1293952	PtrMemberAccess	plp -> e		1292674	0					
ANR	1293953	Identifier	plp		1292674	0					
ANR	1293954	Identifier	e		1292674	1					
ANR	1293955	Identifier	p		1292674	1					
ANR	1293956	Identifier	y		1292674	1					
ANR	1293957	MultiplicativeExpression	( shift_e_y + delta_w_y ) / 2		1292674	1		/			
ANR	1293958	AdditiveExpression	shift_e_y + delta_w_y		1292674	0		+			
ANR	1293959	Identifier	shift_e_y		1292674	0					
ANR	1293960	Identifier	delta_w_y		1292674	1					
ANR	1293961	PrimaryExpression	2		1292674	1					
ANR	1293962	ExpressionStatement	adjust = false	1314:28:56370:56384	1292674	7	True				
ANR	1293963	AssignmentExpression	adjust = false		1292674	0		=			
ANR	1293964	Identifier	adjust		1292674	0					
ANR	1293965	Identifier	false		1292674	1					
ANR	1293966	IfStatement	if ( ( start_cap == gs_cap_butt ) || ( end_cap == gs_cap_butt ) )		1292674	5					
ANR	1293967	Condition	( start_cap == gs_cap_butt ) || ( end_cap == gs_cap_butt )	1321:8:56490:56543	1292674	0	True				
ANR	1293968	OrExpression	( start_cap == gs_cap_butt ) || ( end_cap == gs_cap_butt )		1292674	0		||			
ANR	1293969	EqualityExpression	start_cap == gs_cap_butt		1292674	0		==			
ANR	1293970	Identifier	start_cap		1292674	0					
ANR	1293971	Identifier	gs_cap_butt		1292674	1					
ANR	1293972	EqualityExpression	end_cap == gs_cap_butt		1292674	1		==			
ANR	1293973	Identifier	end_cap		1292674	0					
ANR	1293974	Identifier	gs_cap_butt		1292674	1					
ANR	1293975	CompoundStatement		85:64:5783:5783	1292674	1					
ANR	1293976	ExpressionStatement	dev -> sgr . stroke_stored = true	1322:8:56556:56585	1292674	0	True				
ANR	1293977	AssignmentExpression	dev -> sgr . stroke_stored = true		1292674	0		=			
ANR	1293978	MemberAccess	dev -> sgr . stroke_stored		1292674	0					
ANR	1293979	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293980	Identifier	dev		1292674	0					
ANR	1293981	Identifier	sgr		1292674	1					
ANR	1293982	Identifier	stroke_stored		1292674	1					
ANR	1293983	Identifier	true		1292674	1					
ANR	1293984	ExpressionStatement	dev -> sgr . orig [ 0 ] = plp -> o . p	1323:8:56595:56622	1292674	1	True				
ANR	1293985	AssignmentExpression	dev -> sgr . orig [ 0 ] = plp -> o . p		1292674	0		=			
ANR	1293986	ArrayIndexing	dev -> sgr . orig [ 0 ]		1292674	0					
ANR	1293987	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1293988	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1293989	Identifier	dev		1292674	0					
ANR	1293990	Identifier	sgr		1292674	1					
ANR	1293991	Identifier	orig		1292674	1					
ANR	1293992	PrimaryExpression	0		1292674	1					
ANR	1293993	MemberAccess	plp -> o . p		1292674	1					
ANR	1293994	PtrMemberAccess	plp -> o		1292674	0					
ANR	1293995	Identifier	plp		1292674	0					
ANR	1293996	Identifier	o		1292674	1					
ANR	1293997	Identifier	p		1292674	1					
ANR	1293998	ExpressionStatement	dev -> sgr . orig [ 1 ] = plp -> e . p	1324:8:56632:56659	1292674	2	True				
ANR	1293999	AssignmentExpression	dev -> sgr . orig [ 1 ] = plp -> e . p		1292674	0		=			
ANR	1294000	ArrayIndexing	dev -> sgr . orig [ 1 ]		1292674	0					
ANR	1294001	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1294002	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1294003	Identifier	dev		1292674	0					
ANR	1294004	Identifier	sgr		1292674	1					
ANR	1294005	Identifier	orig		1292674	1					
ANR	1294006	PrimaryExpression	1		1292674	1					
ANR	1294007	MemberAccess	plp -> e . p		1292674	1					
ANR	1294008	PtrMemberAccess	plp -> e		1292674	0					
ANR	1294009	Identifier	plp		1292674	0					
ANR	1294010	Identifier	e		1292674	1					
ANR	1294011	Identifier	p		1292674	1					
ANR	1294012	ExpressionStatement	dev -> sgr . orig [ 2 ] = plp -> width	1325:8:56669:56698	1292674	3	True				
ANR	1294013	AssignmentExpression	dev -> sgr . orig [ 2 ] = plp -> width		1292674	0		=			
ANR	1294014	ArrayIndexing	dev -> sgr . orig [ 2 ]		1292674	0					
ANR	1294015	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1294016	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1294017	Identifier	dev		1292674	0					
ANR	1294018	Identifier	sgr		1292674	1					
ANR	1294019	Identifier	orig		1292674	1					
ANR	1294020	PrimaryExpression	2		1292674	1					
ANR	1294021	PtrMemberAccess	plp -> width		1292674	1					
ANR	1294022	Identifier	plp		1292674	0					
ANR	1294023	Identifier	width		1292674	1					
ANR	1294024	ExpressionStatement	dev -> sgr . orig [ 3 ] = plp -> vector	1326:8:56708:56738	1292674	4	True				
ANR	1294025	AssignmentExpression	dev -> sgr . orig [ 3 ] = plp -> vector		1292674	0		=			
ANR	1294026	ArrayIndexing	dev -> sgr . orig [ 3 ]		1292674	0					
ANR	1294027	MemberAccess	dev -> sgr . orig		1292674	0					
ANR	1294028	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1294029	Identifier	dev		1292674	0					
ANR	1294030	Identifier	sgr		1292674	1					
ANR	1294031	Identifier	orig		1292674	1					
ANR	1294032	PrimaryExpression	3		1292674	1					
ANR	1294033	PtrMemberAccess	plp -> vector		1292674	1					
ANR	1294034	Identifier	plp		1292674	0					
ANR	1294035	Identifier	vector		1292674	1					
ANR	1294036	ElseStatement	else		1292674	0					
ANR	1294037	ExpressionStatement	dev -> sgr . stroke_stored = false	1328:8:56759:56789	1292674	0	True				
ANR	1294038	AssignmentExpression	dev -> sgr . stroke_stored = false		1292674	0		=			
ANR	1294039	MemberAccess	dev -> sgr . stroke_stored		1292674	0					
ANR	1294040	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1294041	Identifier	dev		1292674	0					
ANR	1294042	Identifier	sgr		1292674	1					
ANR	1294043	Identifier	stroke_stored		1292674	1					
ANR	1294044	Identifier	false		1292674	1					
ANR	1294045	IfStatement	if ( adjust )		1292674	6					
ANR	1294046	Condition	adjust	1329:8:56799:56804	1292674	0	True				
ANR	1294047	Identifier	adjust		1292674	0					
ANR	1294048	CompoundStatement		93:16:6044:6044	1292674	1					
ANR	1294049	ExpressionStatement	horiz = ( any_abs ( plp -> width . x ) <= any_abs ( plp -> width . y ) )	1330:8:56817:56873	1292674	0	True				
ANR	1294050	AssignmentExpression	horiz = ( any_abs ( plp -> width . x ) <= any_abs ( plp -> width . y ) )		1292674	0		=			
ANR	1294051	Identifier	horiz		1292674	0					
ANR	1294052	RelationalExpression	any_abs ( plp -> width . x ) <= any_abs ( plp -> width . y )		1292674	1		<=			
ANR	1294053	CallExpression	any_abs ( plp -> width . x )		1292674	0					
ANR	1294054	Callee	any_abs		1292674	0					
ANR	1294055	Identifier	any_abs		1292674	0					
ANR	1294056	ArgumentList	plp -> width . x		1292674	1					
ANR	1294057	Argument	plp -> width . x		1292674	0					
ANR	1294058	MemberAccess	plp -> width . x		1292674	0					
ANR	1294059	PtrMemberAccess	plp -> width		1292674	0					
ANR	1294060	Identifier	plp		1292674	0					
ANR	1294061	Identifier	width		1292674	1					
ANR	1294062	Identifier	x		1292674	1					
ANR	1294063	CallExpression	any_abs ( plp -> width . y )		1292674	1					
ANR	1294064	Callee	any_abs		1292674	0					
ANR	1294065	Identifier	any_abs		1292674	0					
ANR	1294066	ArgumentList	plp -> width . y		1292674	1					
ANR	1294067	Argument	plp -> width . y		1292674	0					
ANR	1294068	MemberAccess	plp -> width . y		1292674	0					
ANR	1294069	PtrMemberAccess	plp -> width		1292674	0					
ANR	1294070	Identifier	plp		1292674	0					
ANR	1294071	Identifier	width		1292674	1					
ANR	1294072	Identifier	y		1292674	1					
ANR	1294073	ExpressionStatement	"adjust_stroke_transversal ( plp , pgs , thin , horiz )"	1331:8:56883:56931	1292674	1	True				
ANR	1294074	CallExpression	"adjust_stroke_transversal ( plp , pgs , thin , horiz )"		1292674	0					
ANR	1294075	Callee	adjust_stroke_transversal		1292674	0					
ANR	1294076	Identifier	adjust_stroke_transversal		1292674	0					
ANR	1294077	ArgumentList	plp		1292674	1					
ANR	1294078	Argument	plp		1292674	0					
ANR	1294079	Identifier	plp		1292674	0					
ANR	1294080	Argument	pgs		1292674	1					
ANR	1294081	Identifier	pgs		1292674	0					
ANR	1294082	Argument	thin		1292674	2					
ANR	1294083	Identifier	thin		1292674	0					
ANR	1294084	Argument	horiz		1292674	3					
ANR	1294085	Identifier	horiz		1292674	0					
ANR	1294086	IfStatement	if ( adjust_longitude )		1292674	2					
ANR	1294087	Condition	adjust_longitude	1332:12:56945:56960	1292674	0	True				
ANR	1294088	Identifier	adjust_longitude		1292674	0					
ANR	1294089	ExpressionStatement	"adjust_stroke_longitude ( plp , pgs , thin , horiz , start_cap , end_cap )"	1333:12:56975:57041	1292674	1	True				
ANR	1294090	CallExpression	"adjust_stroke_longitude ( plp , pgs , thin , horiz , start_cap , end_cap )"		1292674	0					
ANR	1294091	Callee	adjust_stroke_longitude		1292674	0					
ANR	1294092	Identifier	adjust_stroke_longitude		1292674	0					
ANR	1294093	ArgumentList	plp		1292674	1					
ANR	1294094	Argument	plp		1292674	0					
ANR	1294095	Identifier	plp		1292674	0					
ANR	1294096	Argument	pgs		1292674	1					
ANR	1294097	Identifier	pgs		1292674	0					
ANR	1294098	Argument	thin		1292674	2					
ANR	1294099	Identifier	thin		1292674	0					
ANR	1294100	Argument	horiz		1292674	3					
ANR	1294101	Identifier	horiz		1292674	0					
ANR	1294102	Argument	start_cap		1292674	4					
ANR	1294103	Identifier	start_cap		1292674	0					
ANR	1294104	Argument	end_cap		1292674	5					
ANR	1294105	Identifier	end_cap		1292674	0					
ANR	1294106	IfStatement	if ( ( start_cap == gs_cap_butt ) || ( end_cap == gs_cap_butt ) )		1292674	7					
ANR	1294107	Condition	( start_cap == gs_cap_butt ) || ( end_cap == gs_cap_butt )	1335:8:57057:57110	1292674	0	True				
ANR	1294108	OrExpression	( start_cap == gs_cap_butt ) || ( end_cap == gs_cap_butt )		1292674	0		||			
ANR	1294109	EqualityExpression	start_cap == gs_cap_butt		1292674	0		==			
ANR	1294110	Identifier	start_cap		1292674	0					
ANR	1294111	Identifier	gs_cap_butt		1292674	1					
ANR	1294112	EqualityExpression	end_cap == gs_cap_butt		1292674	1		==			
ANR	1294113	Identifier	end_cap		1292674	0					
ANR	1294114	Identifier	gs_cap_butt		1292674	1					
ANR	1294115	CompoundStatement		99:64:6350:6350	1292674	1					
ANR	1294116	ExpressionStatement	dev -> sgr . adjusted [ 0 ] = plp -> o . p	1336:8:57123:57154	1292674	0	True				
ANR	1294117	AssignmentExpression	dev -> sgr . adjusted [ 0 ] = plp -> o . p		1292674	0		=			
ANR	1294118	ArrayIndexing	dev -> sgr . adjusted [ 0 ]		1292674	0					
ANR	1294119	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1294120	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1294121	Identifier	dev		1292674	0					
ANR	1294122	Identifier	sgr		1292674	1					
ANR	1294123	Identifier	adjusted		1292674	1					
ANR	1294124	PrimaryExpression	0		1292674	1					
ANR	1294125	MemberAccess	plp -> o . p		1292674	1					
ANR	1294126	PtrMemberAccess	plp -> o		1292674	0					
ANR	1294127	Identifier	plp		1292674	0					
ANR	1294128	Identifier	o		1292674	1					
ANR	1294129	Identifier	p		1292674	1					
ANR	1294130	ExpressionStatement	dev -> sgr . adjusted [ 1 ] = plp -> e . p	1337:8:57164:57195	1292674	1	True				
ANR	1294131	AssignmentExpression	dev -> sgr . adjusted [ 1 ] = plp -> e . p		1292674	0		=			
ANR	1294132	ArrayIndexing	dev -> sgr . adjusted [ 1 ]		1292674	0					
ANR	1294133	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1294134	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1294135	Identifier	dev		1292674	0					
ANR	1294136	Identifier	sgr		1292674	1					
ANR	1294137	Identifier	adjusted		1292674	1					
ANR	1294138	PrimaryExpression	1		1292674	1					
ANR	1294139	MemberAccess	plp -> e . p		1292674	1					
ANR	1294140	PtrMemberAccess	plp -> e		1292674	0					
ANR	1294141	Identifier	plp		1292674	0					
ANR	1294142	Identifier	e		1292674	1					
ANR	1294143	Identifier	p		1292674	1					
ANR	1294144	ExpressionStatement	dev -> sgr . adjusted [ 2 ] = plp -> width	1338:8:57205:57238	1292674	2	True				
ANR	1294145	AssignmentExpression	dev -> sgr . adjusted [ 2 ] = plp -> width		1292674	0		=			
ANR	1294146	ArrayIndexing	dev -> sgr . adjusted [ 2 ]		1292674	0					
ANR	1294147	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1294148	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1294149	Identifier	dev		1292674	0					
ANR	1294150	Identifier	sgr		1292674	1					
ANR	1294151	Identifier	adjusted		1292674	1					
ANR	1294152	PrimaryExpression	2		1292674	1					
ANR	1294153	PtrMemberAccess	plp -> width		1292674	1					
ANR	1294154	Identifier	plp		1292674	0					
ANR	1294155	Identifier	width		1292674	1					
ANR	1294156	ExpressionStatement	dev -> sgr . adjusted [ 3 ] = plp -> vector	1339:8:57248:57282	1292674	3	True				
ANR	1294157	AssignmentExpression	dev -> sgr . adjusted [ 3 ] = plp -> vector		1292674	0		=			
ANR	1294158	ArrayIndexing	dev -> sgr . adjusted [ 3 ]		1292674	0					
ANR	1294159	MemberAccess	dev -> sgr . adjusted		1292674	0					
ANR	1294160	PtrMemberAccess	dev -> sgr		1292674	0					
ANR	1294161	Identifier	dev		1292674	0					
ANR	1294162	Identifier	sgr		1292674	1					
ANR	1294163	Identifier	adjusted		1292674	1					
ANR	1294164	PrimaryExpression	3		1292674	1					
ANR	1294165	PtrMemberAccess	plp -> vector		1292674	1					
ANR	1294166	Identifier	plp		1292674	0					
ANR	1294167	Identifier	vector		1292674	1					
ANR	1294168	ReturnType	static void		1292674	1					
ANR	1294169	Identifier	adjust_stroke		1292674	2					
ANR	1294170	ParameterList	"gx_device * dev , pl_ptr plp , const gs_gstate * pgs , bool thin , bool adjust_longitude , note_flags flags"		1292674	3					
ANR	1294171	Parameter	gx_device * dev	1235:14:50645:50658	1292674	0	True				
ANR	1294172	ParameterType	gx_device *		1292674	0					
ANR	1294173	Identifier	dev		1292674	1					
ANR	1294174	Parameter	pl_ptr plp	1235:30:50661:50670	1292674	1	True				
ANR	1294175	ParameterType	pl_ptr		1292674	0					
ANR	1294176	Identifier	plp		1292674	1					
ANR	1294177	Parameter	const gs_gstate * pgs	1235:42:50673:50693	1292674	2	True				
ANR	1294178	ParameterType	const gs_gstate *		1292674	0					
ANR	1294179	Identifier	pgs		1292674	1					
ANR	1294180	Parameter	bool thin	1236:14:50710:50718	1292674	3	True				
ANR	1294181	ParameterType	bool		1292674	0					
ANR	1294182	Identifier	thin		1292674	1					
ANR	1294183	Parameter	bool adjust_longitude	1236:25:50721:50741	1292674	4	True				
ANR	1294184	ParameterType	bool		1292674	0					
ANR	1294185	Identifier	adjust_longitude		1292674	1					
ANR	1294186	Parameter	note_flags flags	1236:48:50744:50759	1292674	5	True				
ANR	1294187	ParameterType	note_flags		1292674	0					
ANR	1294188	Identifier	flags		1292674	1					
ANR	1294189	CFGEntryNode	ENTRY		1292674		True				
ANR	1294190	CFGExitNode	EXIT		1292674		True				
ANR	1294191	Symbol	delta_w_x		1292674						
ANR	1294192	Symbol	delta_w_y		1292674						
ANR	1294193	Symbol	* pgs		1292674						
ANR	1294194	Symbol	pgs -> line_params		1292674						
ANR	1294195	Symbol	nf_dash_tail		1292674						
ANR	1294196	Symbol	dev -> sgr . orig [ 2 ] . x		1292674						
ANR	1294197	Symbol	* dev -> sgr		1292674						
ANR	1294198	Symbol	dev -> sgr . adjusted [ 2 ] . y		1292674						
ANR	1294199	Symbol	dev -> sgr . orig [ 2 ] . y		1292674						
ANR	1294200	Symbol	dev -> sgr . adjusted [ 2 ] . x		1292674						
ANR	1294201	Symbol	dev		1292674						
ANR	1294202	Symbol	plp -> vector		1292674						
ANR	1294203	Symbol	* dev -> sgr . adjusted		1292674						
ANR	1294204	Symbol	dev -> sgr		1292674						
ANR	1294205	Symbol	* plp		1292674						
ANR	1294206	Symbol	shift_e_x		1292674						
ANR	1294207	Symbol	shift_e_y		1292674						
ANR	1294208	Symbol	shift_o_y		1292674						
ANR	1294209	Symbol	plp -> o . p . y		1292674						
ANR	1294210	Symbol	plp -> o . p . x		1292674						
ANR	1294211	Symbol	dev -> sgr . adjusted [ 0 ] . x		1292674						
ANR	1294212	Symbol	dev -> sgr . adjusted [ 0 ] . y		1292674						
ANR	1294213	Symbol	thin		1292674						
ANR	1294214	Symbol	shift_o_x		1292674						
ANR	1294215	Symbol	plp -> e . p		1292674						
ANR	1294216	Symbol	nf_dash_head		1292674						
ANR	1294217	Symbol	adjust		1292674						
ANR	1294218	Symbol	true		1292674						
ANR	1294219	Symbol	dev -> sgr . stroke_stored		1292674						
ANR	1294220	Symbol	dev -> sgr . orig [ 1 ] . y		1292674						
ANR	1294221	Symbol	dev -> sgr . orig [ 1 ] . x		1292674						
ANR	1294222	Symbol	* dev		1292674						
ANR	1294223	Symbol	plp -> width . y		1292674						
ANR	1294224	Symbol	plp -> width . x		1292674						
ANR	1294225	Symbol	dev -> sgr . orig [ 0 ] . y		1292674						
ANR	1294226	Symbol	flags		1292674						
ANR	1294227	Symbol	dev -> sgr . orig		1292674						
ANR	1294228	Symbol	plp -> e . p . y		1292674						
ANR	1294229	Symbol	plp -> e . p . x		1292674						
ANR	1294230	Symbol	dev -> sgr . adjusted [ 1 ] . y		1292674						
ANR	1294231	Symbol	plp -> o . p		1292674						
ANR	1294232	Symbol	dev -> sgr . adjusted [ 1 ] . x		1292674						
ANR	1294233	Symbol	dev -> sgr . orig [ 0 ] . x		1292674						
ANR	1294234	Symbol	pgs -> stroke_adjust		1292674						
ANR	1294235	Symbol	plp -> width		1292674						
ANR	1294236	Symbol	horiz		1292674						
ANR	1294237	Symbol	end_cap		1292674						
ANR	1294238	Symbol	any_abs		1292674						
ANR	1294239	Symbol	pgs		1292674						
ANR	1294240	Symbol	* dev -> sgr . orig		1292674						
ANR	1294241	Symbol	pgs -> line_params . end_cap		1292674						
ANR	1294242	Symbol	fixed2float		1292674						
ANR	1294243	Symbol	pgs -> line_params . start_cap		1292674						
ANR	1294244	Symbol	pgs -> line_params . dash_cap		1292674						
ANR	1294245	Symbol	false		1292674						
ANR	1294246	Symbol	* * dev		1292674						
ANR	1294247	Symbol	gs_cap_butt		1292674						
ANR	1294248	Symbol	adjust_longitude		1292674						
ANR	1294249	Symbol	start_cap		1292674						
ANR	1294250	Symbol	dev -> memory		1292674						
ANR	1294251	Symbol	dev -> sgr . orig [ 3 ] . y		1292674						
ANR	1294252	Symbol	plp		1292674						
ANR	1294253	Symbol	dev -> sgr . orig [ 3 ] . x		1292674						
ANR	1294254	Symbol	dev -> sgr . adjusted		1292674						
ANR	1294255	Symbol	plp -> o		1292674						
ANR	1294256	Symbol	plp -> e		1292674						
ANR	1294257	Symbol	plp -> vector . y		1292674						
ANR	1294258	Symbol	plp -> vector . x		1292674						
ANR	1294259	Function	line_intersect	1348:0:57649:59417							
ANR	1294260	FunctionDef	"line_intersect (p_ptr pp1 , p_ptr pd1 , p_ptr pp2 , p_ptr pd2 , p_ptr pi)"		1294259	0					
ANR	1294261	CompoundStatement		1355:0:57936:59417	1294259	0					
ANR	1294262	IdentifierDeclStatement	"double u1 = pd1 -> x , v1 = pd1 -> y ;"	1357:4:58078:58109	1294259	0	True				
ANR	1294263	IdentifierDecl	u1 = pd1 -> x		1294259	0					
ANR	1294264	IdentifierDeclType	double		1294259	0					
ANR	1294265	Identifier	u1		1294259	1					
ANR	1294266	AssignmentExpression	u1 = pd1 -> x		1294259	2		=			
ANR	1294267	Identifier	u1		1294259	0					
ANR	1294268	PtrMemberAccess	pd1 -> x		1294259	1					
ANR	1294269	Identifier	pd1		1294259	0					
ANR	1294270	Identifier	x		1294259	1					
ANR	1294271	IdentifierDecl	v1 = pd1 -> y		1294259	1					
ANR	1294272	IdentifierDeclType	double		1294259	0					
ANR	1294273	Identifier	v1		1294259	1					
ANR	1294274	AssignmentExpression	v1 = pd1 -> y		1294259	2		=			
ANR	1294275	Identifier	v1		1294259	0					
ANR	1294276	PtrMemberAccess	pd1 -> y		1294259	1					
ANR	1294277	Identifier	pd1		1294259	0					
ANR	1294278	Identifier	y		1294259	1					
ANR	1294279	IdentifierDeclStatement	"double u2 = pd2 -> x , v2 = pd2 -> y ;"	1358:4:58115:58146	1294259	1	True				
ANR	1294280	IdentifierDecl	u2 = pd2 -> x		1294259	0					
ANR	1294281	IdentifierDeclType	double		1294259	0					
ANR	1294282	Identifier	u2		1294259	1					
ANR	1294283	AssignmentExpression	u2 = pd2 -> x		1294259	2		=			
ANR	1294284	Identifier	u2		1294259	0					
ANR	1294285	PtrMemberAccess	pd2 -> x		1294259	1					
ANR	1294286	Identifier	pd2		1294259	0					
ANR	1294287	Identifier	x		1294259	1					
ANR	1294288	IdentifierDecl	v2 = pd2 -> y		1294259	1					
ANR	1294289	IdentifierDeclType	double		1294259	0					
ANR	1294290	Identifier	v2		1294259	1					
ANR	1294291	AssignmentExpression	v2 = pd2 -> y		1294259	2		=			
ANR	1294292	Identifier	v2		1294259	0					
ANR	1294293	PtrMemberAccess	pd2 -> y		1294259	1					
ANR	1294294	Identifier	pd2		1294259	0					
ANR	1294295	Identifier	y		1294259	1					
ANR	1294296	IdentifierDeclStatement	double denom = u1 * v2 - u2 * v1 ;	1359:4:58152:58184	1294259	2	True				
ANR	1294297	IdentifierDecl	denom = u1 * v2 - u2 * v1		1294259	0					
ANR	1294298	IdentifierDeclType	double		1294259	0					
ANR	1294299	Identifier	denom		1294259	1					
ANR	1294300	AssignmentExpression	denom = u1 * v2 - u2 * v1		1294259	2		=			
ANR	1294301	Identifier	denom		1294259	0					
ANR	1294302	AdditiveExpression	u1 * v2 - u2 * v1		1294259	1		-			
ANR	1294303	MultiplicativeExpression	u1 * v2		1294259	0		*			
ANR	1294304	Identifier	u1		1294259	0					
ANR	1294305	Identifier	v2		1294259	1					
ANR	1294306	MultiplicativeExpression	u2 * v1		1294259	1		*			
ANR	1294307	Identifier	u2		1294259	0					
ANR	1294308	Identifier	v1		1294259	1					
ANR	1294309	IdentifierDeclStatement	double xdiff = pp2 -> x - pp1 -> x ;	1360:4:58190:58220	1294259	3	True				
ANR	1294310	IdentifierDecl	xdiff = pp2 -> x - pp1 -> x		1294259	0					
ANR	1294311	IdentifierDeclType	double		1294259	0					
ANR	1294312	Identifier	xdiff		1294259	1					
ANR	1294313	AssignmentExpression	xdiff = pp2 -> x - pp1 -> x		1294259	2		=			
ANR	1294314	Identifier	xdiff		1294259	0					
ANR	1294315	AdditiveExpression	pp2 -> x - pp1 -> x		1294259	1		-			
ANR	1294316	PtrMemberAccess	pp2 -> x		1294259	0					
ANR	1294317	Identifier	pp2		1294259	0					
ANR	1294318	Identifier	x		1294259	1					
ANR	1294319	PtrMemberAccess	pp1 -> x		1294259	1					
ANR	1294320	Identifier	pp1		1294259	0					
ANR	1294321	Identifier	x		1294259	1					
ANR	1294322	IdentifierDeclStatement	double ydiff = pp2 -> y - pp1 -> y ;	1361:4:58226:58256	1294259	4	True				
ANR	1294323	IdentifierDecl	ydiff = pp2 -> y - pp1 -> y		1294259	0					
ANR	1294324	IdentifierDeclType	double		1294259	0					
ANR	1294325	Identifier	ydiff		1294259	1					
ANR	1294326	AssignmentExpression	ydiff = pp2 -> y - pp1 -> y		1294259	2		=			
ANR	1294327	Identifier	ydiff		1294259	0					
ANR	1294328	AdditiveExpression	pp2 -> y - pp1 -> y		1294259	1		-			
ANR	1294329	PtrMemberAccess	pp2 -> y		1294259	0					
ANR	1294330	Identifier	pp2		1294259	0					
ANR	1294331	Identifier	y		1294259	1					
ANR	1294332	PtrMemberAccess	pp1 -> y		1294259	1					
ANR	1294333	Identifier	pp1		1294259	0					
ANR	1294334	Identifier	y		1294259	1					
ANR	1294335	IdentifierDeclStatement	double f1 ;	1362:4:58262:58271	1294259	5	True				
ANR	1294336	IdentifierDecl	f1		1294259	0					
ANR	1294337	IdentifierDeclType	double		1294259	0					
ANR	1294338	Identifier	f1		1294259	1					
ANR	1294339	IdentifierDeclStatement	double max_result = any_abs ( denom ) * ( double ) max_fixed ;	1363:4:58277:58331	1294259	6	True				
ANR	1294340	IdentifierDecl	max_result = any_abs ( denom ) * ( double ) max_fixed		1294259	0					
ANR	1294341	IdentifierDeclType	double		1294259	0					
ANR	1294342	Identifier	max_result		1294259	1					
ANR	1294343	AssignmentExpression	max_result = any_abs ( denom ) * ( double ) max_fixed		1294259	2		=			
ANR	1294344	Identifier	max_result		1294259	0					
ANR	1294345	MultiplicativeExpression	any_abs ( denom ) * ( double ) max_fixed		1294259	1		*			
ANR	1294346	CallExpression	any_abs ( denom )		1294259	0					
ANR	1294347	Callee	any_abs		1294259	0					
ANR	1294348	Identifier	any_abs		1294259	0					
ANR	1294349	ArgumentList	denom		1294259	1					
ANR	1294350	Argument	denom		1294259	0					
ANR	1294351	Identifier	denom		1294259	0					
ANR	1294352	CastExpression	( double ) max_fixed		1294259	1					
ANR	1294353	CastTarget	double		1294259	0					
ANR	1294354	Identifier	max_fixed		1294259	1					
ANR	1294355	IfStatement	if ( gs_debug_c ( 'O' ) )		1294259	7					
ANR	1294356	Condition	gs_debug_c ( 'O' )	1366:8:58388:58402	1294259	0	True				
ANR	1294357	CallExpression	gs_debug_c ( 'O' )		1294259	0					
ANR	1294358	Callee	gs_debug_c		1294259	0					
ANR	1294359	Identifier	gs_debug_c		1294259	0					
ANR	1294360	ArgumentList	'O'		1294259	1					
ANR	1294361	Argument	'O'		1294259	0					
ANR	1294362	PrimaryExpression	'O'		1294259	0					
ANR	1294363	CompoundStatement		12:25:468:468	1294259	1					
ANR	1294364	ExpressionStatement	"dlprintf4 ( ""[o]Intersect %f,%f(%f/%f)"" , fixed2float ( pp1 -> x ) , fixed2float ( pp1 -> y ) , fixed2float ( pd1 -> x ) , fixed2float ( pd1 -> y ) )"	1367:8:58415:58573	1294259	0	True				
ANR	1294365	CallExpression	"dlprintf4 ( ""[o]Intersect %f,%f(%f/%f)"" , fixed2float ( pp1 -> x ) , fixed2float ( pp1 -> y ) , fixed2float ( pd1 -> x ) , fixed2float ( pd1 -> y ) )"		1294259	0					
ANR	1294366	Callee	dlprintf4		1294259	0					
ANR	1294367	Identifier	dlprintf4		1294259	0					
ANR	1294368	ArgumentList	"""[o]Intersect %f,%f(%f/%f)"""		1294259	1					
ANR	1294369	Argument	"""[o]Intersect %f,%f(%f/%f)"""		1294259	0					
ANR	1294370	PrimaryExpression	"""[o]Intersect %f,%f(%f/%f)"""		1294259	0					
ANR	1294371	Argument	fixed2float ( pp1 -> x )		1294259	1					
ANR	1294372	CallExpression	fixed2float ( pp1 -> x )		1294259	0					
ANR	1294373	Callee	fixed2float		1294259	0					
ANR	1294374	Identifier	fixed2float		1294259	0					
ANR	1294375	ArgumentList	pp1 -> x		1294259	1					
ANR	1294376	Argument	pp1 -> x		1294259	0					
ANR	1294377	PtrMemberAccess	pp1 -> x		1294259	0					
ANR	1294378	Identifier	pp1		1294259	0					
ANR	1294379	Identifier	x		1294259	1					
ANR	1294380	Argument	fixed2float ( pp1 -> y )		1294259	2					
ANR	1294381	CallExpression	fixed2float ( pp1 -> y )		1294259	0					
ANR	1294382	Callee	fixed2float		1294259	0					
ANR	1294383	Identifier	fixed2float		1294259	0					
ANR	1294384	ArgumentList	pp1 -> y		1294259	1					
ANR	1294385	Argument	pp1 -> y		1294259	0					
ANR	1294386	PtrMemberAccess	pp1 -> y		1294259	0					
ANR	1294387	Identifier	pp1		1294259	0					
ANR	1294388	Identifier	y		1294259	1					
ANR	1294389	Argument	fixed2float ( pd1 -> x )		1294259	3					
ANR	1294390	CallExpression	fixed2float ( pd1 -> x )		1294259	0					
ANR	1294391	Callee	fixed2float		1294259	0					
ANR	1294392	Identifier	fixed2float		1294259	0					
ANR	1294393	ArgumentList	pd1 -> x		1294259	1					
ANR	1294394	Argument	pd1 -> x		1294259	0					
ANR	1294395	PtrMemberAccess	pd1 -> x		1294259	0					
ANR	1294396	Identifier	pd1		1294259	0					
ANR	1294397	Identifier	x		1294259	1					
ANR	1294398	Argument	fixed2float ( pd1 -> y )		1294259	4					
ANR	1294399	CallExpression	fixed2float ( pd1 -> y )		1294259	0					
ANR	1294400	Callee	fixed2float		1294259	0					
ANR	1294401	Identifier	fixed2float		1294259	0					
ANR	1294402	ArgumentList	pd1 -> y		1294259	1					
ANR	1294403	Argument	pd1 -> y		1294259	0					
ANR	1294404	PtrMemberAccess	pd1 -> y		1294259	0					
ANR	1294405	Identifier	pd1		1294259	0					
ANR	1294406	Identifier	y		1294259	1					
ANR	1294407	ExpressionStatement	"dlprintf4 ( "" & %f,%f(%f/%f),\\n"" , fixed2float ( pp2 -> x ) , fixed2float ( pp2 -> y ) , fixed2float ( pd2 -> x ) , fixed2float ( pd2 -> y ) )"	1370:8:58583:58734	1294259	1	True				
ANR	1294408	CallExpression	"dlprintf4 ( "" & %f,%f(%f/%f),\\n"" , fixed2float ( pp2 -> x ) , fixed2float ( pp2 -> y ) , fixed2float ( pd2 -> x ) , fixed2float ( pd2 -> y ) )"		1294259	0					
ANR	1294409	Callee	dlprintf4		1294259	0					
ANR	1294410	Identifier	dlprintf4		1294259	0					
ANR	1294411	ArgumentList	""" & %f,%f(%f/%f),\\n"""		1294259	1					
ANR	1294412	Argument	""" & %f,%f(%f/%f),\\n"""		1294259	0					
ANR	1294413	PrimaryExpression	""" & %f,%f(%f/%f),\\n"""		1294259	0					
ANR	1294414	Argument	fixed2float ( pp2 -> x )		1294259	1					
ANR	1294415	CallExpression	fixed2float ( pp2 -> x )		1294259	0					
ANR	1294416	Callee	fixed2float		1294259	0					
ANR	1294417	Identifier	fixed2float		1294259	0					
ANR	1294418	ArgumentList	pp2 -> x		1294259	1					
ANR	1294419	Argument	pp2 -> x		1294259	0					
ANR	1294420	PtrMemberAccess	pp2 -> x		1294259	0					
ANR	1294421	Identifier	pp2		1294259	0					
ANR	1294422	Identifier	x		1294259	1					
ANR	1294423	Argument	fixed2float ( pp2 -> y )		1294259	2					
ANR	1294424	CallExpression	fixed2float ( pp2 -> y )		1294259	0					
ANR	1294425	Callee	fixed2float		1294259	0					
ANR	1294426	Identifier	fixed2float		1294259	0					
ANR	1294427	ArgumentList	pp2 -> y		1294259	1					
ANR	1294428	Argument	pp2 -> y		1294259	0					
ANR	1294429	PtrMemberAccess	pp2 -> y		1294259	0					
ANR	1294430	Identifier	pp2		1294259	0					
ANR	1294431	Identifier	y		1294259	1					
ANR	1294432	Argument	fixed2float ( pd2 -> x )		1294259	3					
ANR	1294433	CallExpression	fixed2float ( pd2 -> x )		1294259	0					
ANR	1294434	Callee	fixed2float		1294259	0					
ANR	1294435	Identifier	fixed2float		1294259	0					
ANR	1294436	ArgumentList	pd2 -> x		1294259	1					
ANR	1294437	Argument	pd2 -> x		1294259	0					
ANR	1294438	PtrMemberAccess	pd2 -> x		1294259	0					
ANR	1294439	Identifier	pd2		1294259	0					
ANR	1294440	Identifier	x		1294259	1					
ANR	1294441	Argument	fixed2float ( pd2 -> y )		1294259	4					
ANR	1294442	CallExpression	fixed2float ( pd2 -> y )		1294259	0					
ANR	1294443	Callee	fixed2float		1294259	0					
ANR	1294444	Identifier	fixed2float		1294259	0					
ANR	1294445	ArgumentList	pd2 -> y		1294259	1					
ANR	1294446	Argument	pd2 -> y		1294259	0					
ANR	1294447	PtrMemberAccess	pd2 -> y		1294259	0					
ANR	1294448	Identifier	pd2		1294259	0					
ANR	1294449	Identifier	y		1294259	1					
ANR	1294450	ExpressionStatement	"dlprintf3 ( ""\\txdiff=%f ydiff=%f denom=%f ->\\n"" , xdiff , ydiff , denom )"	1373:8:58744:58829	1294259	2	True				
ANR	1294451	CallExpression	"dlprintf3 ( ""\\txdiff=%f ydiff=%f denom=%f ->\\n"" , xdiff , ydiff , denom )"		1294259	0					
ANR	1294452	Callee	dlprintf3		1294259	0					
ANR	1294453	Identifier	dlprintf3		1294259	0					
ANR	1294454	ArgumentList	"""\\txdiff=%f ydiff=%f denom=%f ->\\n"""		1294259	1					
ANR	1294455	Argument	"""\\txdiff=%f ydiff=%f denom=%f ->\\n"""		1294259	0					
ANR	1294456	PrimaryExpression	"""\\txdiff=%f ydiff=%f denom=%f ->\\n"""		1294259	0					
ANR	1294457	Argument	xdiff		1294259	1					
ANR	1294458	Identifier	xdiff		1294259	0					
ANR	1294459	Argument	ydiff		1294259	2					
ANR	1294460	Identifier	ydiff		1294259	0					
ANR	1294461	Argument	denom		1294259	3					
ANR	1294462	Identifier	denom		1294259	0					
ANR	1294463	IfStatement	if ( any_abs ( xdiff ) >= max_result || any_abs ( ydiff ) >= max_result )		1294259	8					
ANR	1294464	Condition	any_abs ( xdiff ) >= max_result || any_abs ( ydiff ) >= max_result	1378:8:58891:58950	1294259	0	True				
ANR	1294465	OrExpression	any_abs ( xdiff ) >= max_result || any_abs ( ydiff ) >= max_result		1294259	0		||			
ANR	1294466	RelationalExpression	any_abs ( xdiff ) >= max_result		1294259	0		>=			
ANR	1294467	CallExpression	any_abs ( xdiff )		1294259	0					
ANR	1294468	Callee	any_abs		1294259	0					
ANR	1294469	Identifier	any_abs		1294259	0					
ANR	1294470	ArgumentList	xdiff		1294259	1					
ANR	1294471	Argument	xdiff		1294259	0					
ANR	1294472	Identifier	xdiff		1294259	0					
ANR	1294473	Identifier	max_result		1294259	1					
ANR	1294474	RelationalExpression	any_abs ( ydiff ) >= max_result		1294259	1		>=			
ANR	1294475	CallExpression	any_abs ( ydiff )		1294259	0					
ANR	1294476	Callee	any_abs		1294259	0					
ANR	1294477	Identifier	any_abs		1294259	0					
ANR	1294478	ArgumentList	ydiff		1294259	1					
ANR	1294479	Argument	ydiff		1294259	0					
ANR	1294480	Identifier	ydiff		1294259	0					
ANR	1294481	Identifier	max_result		1294259	1					
ANR	1294482	CompoundStatement		24:70:1016:1016	1294259	1					
ANR	1294483	ExpressionStatement	"if_debug0 ( 'O' , ""\\tdegenerate!\\n"" )"	1381:8:59061:59094	1294259	0	True				
ANR	1294484	CallExpression	"if_debug0 ( 'O' , ""\\tdegenerate!\\n"" )"		1294259	0					
ANR	1294485	Callee	if_debug0		1294259	0					
ANR	1294486	Identifier	if_debug0		1294259	0					
ANR	1294487	ArgumentList	'O'		1294259	1					
ANR	1294488	Argument	'O'		1294259	0					
ANR	1294489	PrimaryExpression	'O'		1294259	0					
ANR	1294490	Argument	"""\\tdegenerate!\\n"""		1294259	1					
ANR	1294491	PrimaryExpression	"""\\tdegenerate!\\n"""		1294259	0					
ANR	1294492	ReturnStatement	return - 1 ;	1382:8:59104:59113	1294259	1	True				
ANR	1294493	UnaryOperationExpression	- 1		1294259	0					
ANR	1294494	UnaryOperator	-		1294259	0					
ANR	1294495	PrimaryExpression	1		1294259	1					
ANR	1294496	ExpressionStatement	f1 = ( v2 * xdiff - u2 * ydiff ) / denom	1384:4:59125:59163	1294259	9	True				
ANR	1294497	AssignmentExpression	f1 = ( v2 * xdiff - u2 * ydiff ) / denom		1294259	0		=			
ANR	1294498	Identifier	f1		1294259	0					
ANR	1294499	MultiplicativeExpression	( v2 * xdiff - u2 * ydiff ) / denom		1294259	1		/			
ANR	1294500	AdditiveExpression	v2 * xdiff - u2 * ydiff		1294259	0		-			
ANR	1294501	MultiplicativeExpression	v2 * xdiff		1294259	0		*			
ANR	1294502	Identifier	v2		1294259	0					
ANR	1294503	Identifier	xdiff		1294259	1					
ANR	1294504	MultiplicativeExpression	u2 * ydiff		1294259	1		*			
ANR	1294505	Identifier	u2		1294259	0					
ANR	1294506	Identifier	ydiff		1294259	1					
ANR	1294507	Identifier	denom		1294259	1					
ANR	1294508	ExpressionStatement	pi -> x = pp1 -> x + ( fixed ) ( f1 * u1 )	1385:4:59169:59203	1294259	10	True				
ANR	1294509	AssignmentExpression	pi -> x = pp1 -> x + ( fixed ) ( f1 * u1 )		1294259	0		=			
ANR	1294510	PtrMemberAccess	pi -> x		1294259	0					
ANR	1294511	Identifier	pi		1294259	0					
ANR	1294512	Identifier	x		1294259	1					
ANR	1294513	AdditiveExpression	pp1 -> x + ( fixed ) ( f1 * u1 )		1294259	1		+			
ANR	1294514	PtrMemberAccess	pp1 -> x		1294259	0					
ANR	1294515	Identifier	pp1		1294259	0					
ANR	1294516	Identifier	x		1294259	1					
ANR	1294517	CastExpression	( fixed ) ( f1 * u1 )		1294259	1					
ANR	1294518	CastTarget	fixed		1294259	0					
ANR	1294519	MultiplicativeExpression	f1 * u1		1294259	1		*			
ANR	1294520	Identifier	f1		1294259	0					
ANR	1294521	Identifier	u1		1294259	1					
ANR	1294522	ExpressionStatement	pi -> y = pp1 -> y + ( fixed ) ( f1 * v1 )	1386:4:59209:59243	1294259	11	True				
ANR	1294523	AssignmentExpression	pi -> y = pp1 -> y + ( fixed ) ( f1 * v1 )		1294259	0		=			
ANR	1294524	PtrMemberAccess	pi -> y		1294259	0					
ANR	1294525	Identifier	pi		1294259	0					
ANR	1294526	Identifier	y		1294259	1					
ANR	1294527	AdditiveExpression	pp1 -> y + ( fixed ) ( f1 * v1 )		1294259	1		+			
ANR	1294528	PtrMemberAccess	pp1 -> y		1294259	0					
ANR	1294529	Identifier	pp1		1294259	0					
ANR	1294530	Identifier	y		1294259	1					
ANR	1294531	CastExpression	( fixed ) ( f1 * v1 )		1294259	1					
ANR	1294532	CastTarget	fixed		1294259	0					
ANR	1294533	MultiplicativeExpression	f1 * v1		1294259	1		*			
ANR	1294534	Identifier	f1		1294259	0					
ANR	1294535	Identifier	v1		1294259	1					
ANR	1294536	ExpressionStatement	"if_debug2 ( 'O' , ""\\t%f,%f\\n"" , fixed2float ( pi -> x ) , fixed2float ( pi -> y ) )"	1387:4:59249:59330	1294259	12	True				
ANR	1294537	CallExpression	"if_debug2 ( 'O' , ""\\t%f,%f\\n"" , fixed2float ( pi -> x ) , fixed2float ( pi -> y ) )"		1294259	0					
ANR	1294538	Callee	if_debug2		1294259	0					
ANR	1294539	Identifier	if_debug2		1294259	0					
ANR	1294540	ArgumentList	'O'		1294259	1					
ANR	1294541	Argument	'O'		1294259	0					
ANR	1294542	PrimaryExpression	'O'		1294259	0					
ANR	1294543	Argument	"""\\t%f,%f\\n"""		1294259	1					
ANR	1294544	PrimaryExpression	"""\\t%f,%f\\n"""		1294259	0					
ANR	1294545	Argument	fixed2float ( pi -> x )		1294259	2					
ANR	1294546	CallExpression	fixed2float ( pi -> x )		1294259	0					
ANR	1294547	Callee	fixed2float		1294259	0					
ANR	1294548	Identifier	fixed2float		1294259	0					
ANR	1294549	ArgumentList	pi -> x		1294259	1					
ANR	1294550	Argument	pi -> x		1294259	0					
ANR	1294551	PtrMemberAccess	pi -> x		1294259	0					
ANR	1294552	Identifier	pi		1294259	0					
ANR	1294553	Identifier	x		1294259	1					
ANR	1294554	Argument	fixed2float ( pi -> y )		1294259	3					
ANR	1294555	CallExpression	fixed2float ( pi -> y )		1294259	0					
ANR	1294556	Callee	fixed2float		1294259	0					
ANR	1294557	Identifier	fixed2float		1294259	0					
ANR	1294558	ArgumentList	pi -> y		1294259	1					
ANR	1294559	Argument	pi -> y		1294259	0					
ANR	1294560	PtrMemberAccess	pi -> y		1294259	0					
ANR	1294561	Identifier	pi		1294259	0					
ANR	1294562	Identifier	y		1294259	1					
ANR	1294563	ReturnStatement	return ( f1 >= 0 && ( v1 * xdiff >= u1 * ydiff ? denom >= 0 : denom < 0 ) ? 0 : 1 ) ;	1389:4:59336:59415	1294259	13	True				
ANR	1294564	ConditionalExpression	f1 >= 0 && ( v1 * xdiff >= u1 * ydiff ? denom >= 0 : denom < 0 ) ? 0 : 1		1294259	0					
ANR	1294565	Condition	f1 >= 0 && ( v1 * xdiff >= u1 * ydiff ? denom >= 0 : denom < 0 )		1294259	0					
ANR	1294566	AndExpression	f1 >= 0 && ( v1 * xdiff >= u1 * ydiff ? denom >= 0 : denom < 0 )		1294259	0		&&			
ANR	1294567	RelationalExpression	f1 >= 0		1294259	0		>=			
ANR	1294568	Identifier	f1		1294259	0					
ANR	1294569	PrimaryExpression	0		1294259	1					
ANR	1294570	ConditionalExpression	v1 * xdiff >= u1 * ydiff ? denom >= 0 : denom < 0		1294259	1					
ANR	1294571	Condition	v1 * xdiff >= u1 * ydiff		1294259	0					
ANR	1294572	RelationalExpression	v1 * xdiff >= u1 * ydiff		1294259	0		>=			
ANR	1294573	MultiplicativeExpression	v1 * xdiff		1294259	0		*			
ANR	1294574	Identifier	v1		1294259	0					
ANR	1294575	Identifier	xdiff		1294259	1					
ANR	1294576	MultiplicativeExpression	u1 * ydiff		1294259	1		*			
ANR	1294577	Identifier	u1		1294259	0					
ANR	1294578	Identifier	ydiff		1294259	1					
ANR	1294579	RelationalExpression	denom >= 0		1294259	1		>=			
ANR	1294580	Identifier	denom		1294259	0					
ANR	1294581	PrimaryExpression	0		1294259	1					
ANR	1294582	RelationalExpression	denom < 0		1294259	2		<			
ANR	1294583	Identifier	denom		1294259	0					
ANR	1294584	PrimaryExpression	0		1294259	1					
ANR	1294585	PrimaryExpression	0		1294259	1					
ANR	1294586	PrimaryExpression	1		1294259	2					
ANR	1294587	ReturnType	static int		1294259	1					
ANR	1294588	Identifier	line_intersect		1294259	2					
ANR	1294589	ParameterList	"p_ptr pp1 , p_ptr pd1 , p_ptr pp2 , p_ptr pd2 , p_ptr pi"		1294259	3					
ANR	1294590	Parameter	p_ptr pp1	1350:18:57694:57702	1294259	0	True				
ANR	1294591	ParameterType	p_ptr		1294259	0					
ANR	1294592	Identifier	pp1		1294259	1					
ANR	1294593	Parameter	p_ptr pd1	1351:18:57750:57758	1294259	1	True				
ANR	1294594	ParameterType	p_ptr		1294259	0					
ANR	1294595	Identifier	pd1		1294259	1					
ANR	1294596	Parameter	p_ptr pp2	1352:18:57814:57822	1294259	2	True				
ANR	1294597	ParameterType	p_ptr		1294259	0					
ANR	1294598	Identifier	pp2		1294259	1					
ANR	1294599	Parameter	p_ptr pd2	1353:18:57870:57878	1294259	3	True				
ANR	1294600	ParameterType	p_ptr		1294259	0					
ANR	1294601	Identifier	pd2		1294259	1					
ANR	1294602	Parameter	p_ptr pi	1354:18:57926:57933	1294259	4	True				
ANR	1294603	ParameterType	p_ptr		1294259	0					
ANR	1294604	Identifier	pi		1294259	1					
ANR	1294605	CFGEntryNode	ENTRY		1294259		True				
ANR	1294606	CFGExitNode	EXIT		1294259		True				
ANR	1294607	Symbol	f1		1294259						
ANR	1294608	Symbol	pp2 -> y		1294259						
ANR	1294609	Symbol	max_fixed		1294259						
ANR	1294610	Symbol	any_abs		1294259						
ANR	1294611	Symbol	gs_debug_c		1294259						
ANR	1294612	Symbol	denom		1294259						
ANR	1294613	Symbol	* pp1		1294259						
ANR	1294614	Symbol	u1		1294259						
ANR	1294615	Symbol	* pp2		1294259						
ANR	1294616	Symbol	u2		1294259						
ANR	1294617	Symbol	pp2 -> x		1294259						
ANR	1294618	Symbol	pd1 -> x		1294259						
ANR	1294619	Symbol	fixed2float		1294259						
ANR	1294620	Symbol	pd1 -> y		1294259						
ANR	1294621	Symbol	ydiff		1294259						
ANR	1294622	Symbol	max_result		1294259						
ANR	1294623	Symbol	* pd1		1294259						
ANR	1294624	Symbol	* pd2		1294259						
ANR	1294625	Symbol	pp1 -> y		1294259						
ANR	1294626	Symbol	pp1 -> x		1294259						
ANR	1294627	Symbol	pi -> y		1294259						
ANR	1294628	Symbol	pi -> x		1294259						
ANR	1294629	Symbol	pp1		1294259						
ANR	1294630	Symbol	pd2 -> y		1294259						
ANR	1294631	Symbol	pp2		1294259						
ANR	1294632	Symbol	pd2 -> x		1294259						
ANR	1294633	Symbol	xdiff		1294259						
ANR	1294634	Symbol	pi		1294259						
ANR	1294635	Symbol	v1		1294259						
ANR	1294636	Symbol	pd1		1294259						
ANR	1294637	Symbol	v2		1294259						
ANR	1294638	Symbol	* pi		1294259						
ANR	1294639	Symbol	pd2		1294259						
ANR	1294640	Function	set_thin_widths	1394:0:59529:59987							
ANR	1294641	FunctionDef	set_thin_widths (register pl_ptr plp)		1294640	0					
ANR	1294642	CompoundStatement		1396:0:59578:59987	1294640	0					
ANR	1294643	IdentifierDeclStatement	"fixed dx = plp -> e . p . x - plp -> o . p . x , dy = plp -> e . p . y - plp -> o . p . y ;"	1397:4:59584:59648	1294640	0	True				
ANR	1294644	IdentifierDecl	dx = plp -> e . p . x - plp -> o . p . x		1294640	0					
ANR	1294645	IdentifierDeclType	fixed		1294640	0					
ANR	1294646	Identifier	dx		1294640	1					
ANR	1294647	AssignmentExpression	dx = plp -> e . p . x - plp -> o . p . x		1294640	2		=			
ANR	1294648	Identifier	dx		1294640	0					
ANR	1294649	AdditiveExpression	plp -> e . p . x - plp -> o . p . x		1294640	1		-			
ANR	1294650	MemberAccess	plp -> e . p . x		1294640	0					
ANR	1294651	MemberAccess	plp -> e . p		1294640	0					
ANR	1294652	PtrMemberAccess	plp -> e		1294640	0					
ANR	1294653	Identifier	plp		1294640	0					
ANR	1294654	Identifier	e		1294640	1					
ANR	1294655	Identifier	p		1294640	1					
ANR	1294656	Identifier	x		1294640	1					
ANR	1294657	MemberAccess	plp -> o . p . x		1294640	1					
ANR	1294658	MemberAccess	plp -> o . p		1294640	0					
ANR	1294659	PtrMemberAccess	plp -> o		1294640	0					
ANR	1294660	Identifier	plp		1294640	0					
ANR	1294661	Identifier	o		1294640	1					
ANR	1294662	Identifier	p		1294640	1					
ANR	1294663	Identifier	x		1294640	1					
ANR	1294664	IdentifierDecl	dy = plp -> e . p . y - plp -> o . p . y		1294640	1					
ANR	1294665	IdentifierDeclType	fixed		1294640	0					
ANR	1294666	Identifier	dy		1294640	1					
ANR	1294667	AssignmentExpression	dy = plp -> e . p . y - plp -> o . p . y		1294640	2		=			
ANR	1294668	Identifier	dy		1294640	0					
ANR	1294669	AdditiveExpression	plp -> e . p . y - plp -> o . p . y		1294640	1		-			
ANR	1294670	MemberAccess	plp -> e . p . y		1294640	0					
ANR	1294671	MemberAccess	plp -> e . p		1294640	0					
ANR	1294672	PtrMemberAccess	plp -> e		1294640	0					
ANR	1294673	Identifier	plp		1294640	0					
ANR	1294674	Identifier	e		1294640	1					
ANR	1294675	Identifier	p		1294640	1					
ANR	1294676	Identifier	y		1294640	1					
ANR	1294677	MemberAccess	plp -> o . p . y		1294640	1					
ANR	1294678	MemberAccess	plp -> o . p		1294640	0					
ANR	1294679	PtrMemberAccess	plp -> o		1294640	0					
ANR	1294680	Identifier	plp		1294640	0					
ANR	1294681	Identifier	o		1294640	1					
ANR	1294682	Identifier	p		1294640	1					
ANR	1294683	Identifier	y		1294640	1					
ANR	1294684	Statement	define	1399:1:59652:59657	1294640	1	True				
ANR	1294685	Statement	TRSIGN	1399:8:59659:59664	1294640	2	True				
ANR	1294686	Statement	(	1399:14:59665:59665	1294640	3	True				
ANR	1294687	Statement	v	1399:15:59666:59666	1294640	4	True				
ANR	1294688	Statement	","	1399:16:59667:59667	1294640	5	True				
ANR	1294689	Statement	c	1399:18:59669:59669	1294640	6	True				
ANR	1294690	Statement	)	1399:19:59670:59670	1294640	7	True				
ANR	1294691	Statement	(	1399:21:59672:59672	1294640	8	True				
ANR	1294692	Statement	(	1399:22:59673:59673	1294640	9	True				
ANR	1294693	Statement	v	1399:23:59674:59674	1294640	10	True				
ANR	1294694	Statement	)	1399:24:59675:59675	1294640	11	True				
ANR	1294695	Statement	>=	1399:26:59677:59678	1294640	12	True				
ANR	1294696	Statement	0	1399:29:59680:59680	1294640	13	True				
ANR	1294697	Statement	?	1399:31:59682:59682	1294640	14	True				
ANR	1294698	Statement	(	1399:33:59684:59684	1294640	15	True				
ANR	1294699	Statement	c	1399:34:59685:59685	1294640	16	True				
ANR	1294700	Statement	)	1399:35:59686:59686	1294640	17	True				
ANR	1294701	Statement	:	1399:37:59688:59688	1294640	18	True				
ANR	1294702	Statement	-	1399:39:59690:59690	1294640	19	True				
ANR	1294703	Statement	(	1399:40:59691:59691	1294640	20	True				
ANR	1294704	Statement	c	1399:41:59692:59692	1294640	21	True				
ANR	1294705	Statement	)	1399:42:59693:59693	1294640	22	True				
ANR	1294706	Statement	)	1399:43:59694:59694	1294640	23	True				
ANR	1294707	IfStatement	if ( any_abs ( dx ) > any_abs ( dy ) )		1294640	24					
ANR	1294708	Condition	any_abs ( dx ) > any_abs ( dy )	1400:8:59704:59728	1294640	0	True				
ANR	1294709	RelationalExpression	any_abs ( dx ) > any_abs ( dy )		1294640	0		>			
ANR	1294710	CallExpression	any_abs ( dx )		1294640	0					
ANR	1294711	Callee	any_abs		1294640	0					
ANR	1294712	Identifier	any_abs		1294640	0					
ANR	1294713	ArgumentList	dx		1294640	1					
ANR	1294714	Argument	dx		1294640	0					
ANR	1294715	Identifier	dx		1294640	0					
ANR	1294716	CallExpression	any_abs ( dy )		1294640	1					
ANR	1294717	Callee	any_abs		1294640	0					
ANR	1294718	Identifier	any_abs		1294640	0					
ANR	1294719	ArgumentList	dy		1294640	1					
ANR	1294720	Argument	dy		1294640	0					
ANR	1294721	Identifier	dy		1294640	0					
ANR	1294722	CompoundStatement		5:35:152:152	1294640	1					
ANR	1294723	ExpressionStatement	plp -> width . x = plp -> e . cdelta . y = 0	1401:8:59741:59775	1294640	0	True				
ANR	1294724	AssignmentExpression	plp -> width . x = plp -> e . cdelta . y = 0		1294640	0		=			
ANR	1294725	MemberAccess	plp -> width . x		1294640	0					
ANR	1294726	PtrMemberAccess	plp -> width		1294640	0					
ANR	1294727	Identifier	plp		1294640	0					
ANR	1294728	Identifier	width		1294640	1					
ANR	1294729	Identifier	x		1294640	1					
ANR	1294730	AssignmentExpression	plp -> e . cdelta . y = 0		1294640	1		=			
ANR	1294731	MemberAccess	plp -> e . cdelta . y		1294640	0					
ANR	1294732	MemberAccess	plp -> e . cdelta		1294640	0					
ANR	1294733	PtrMemberAccess	plp -> e		1294640	0					
ANR	1294734	Identifier	plp		1294640	0					
ANR	1294735	Identifier	e		1294640	1					
ANR	1294736	Identifier	cdelta		1294640	1					
ANR	1294737	Identifier	y		1294640	1					
ANR	1294738	PrimaryExpression	0		1294640	1					
ANR	1294739	ExpressionStatement	"plp -> width . y = plp -> e . cdelta . x = TRSIGN ( dx , fixed_half )"	1402:8:59785:59840	1294640	1	True				
ANR	1294740	AssignmentExpression	"plp -> width . y = plp -> e . cdelta . x = TRSIGN ( dx , fixed_half )"		1294640	0		=			
ANR	1294741	MemberAccess	plp -> width . y		1294640	0					
ANR	1294742	PtrMemberAccess	plp -> width		1294640	0					
ANR	1294743	Identifier	plp		1294640	0					
ANR	1294744	Identifier	width		1294640	1					
ANR	1294745	Identifier	y		1294640	1					
ANR	1294746	AssignmentExpression	"plp -> e . cdelta . x = TRSIGN ( dx , fixed_half )"		1294640	1		=			
ANR	1294747	MemberAccess	plp -> e . cdelta . x		1294640	0					
ANR	1294748	MemberAccess	plp -> e . cdelta		1294640	0					
ANR	1294749	PtrMemberAccess	plp -> e		1294640	0					
ANR	1294750	Identifier	plp		1294640	0					
ANR	1294751	Identifier	e		1294640	1					
ANR	1294752	Identifier	cdelta		1294640	1					
ANR	1294753	Identifier	x		1294640	1					
ANR	1294754	CallExpression	"TRSIGN ( dx , fixed_half )"		1294640	1					
ANR	1294755	Callee	TRSIGN		1294640	0					
ANR	1294756	Identifier	TRSIGN		1294640	0					
ANR	1294757	ArgumentList	dx		1294640	1					
ANR	1294758	Argument	dx		1294640	0					
ANR	1294759	Identifier	dx		1294640	0					
ANR	1294760	Argument	fixed_half		1294640	1					
ANR	1294761	Identifier	fixed_half		1294640	0					
ANR	1294762	ElseStatement	else		1294640	0					
ANR	1294763	CompoundStatement		8:11:274:274	1294640	0					
ANR	1294764	ExpressionStatement	plp -> width . y = plp -> e . cdelta . x = 0	1404:8:59863:59897	1294640	0	True				
ANR	1294765	AssignmentExpression	plp -> width . y = plp -> e . cdelta . x = 0		1294640	0		=			
ANR	1294766	MemberAccess	plp -> width . y		1294640	0					
ANR	1294767	PtrMemberAccess	plp -> width		1294640	0					
ANR	1294768	Identifier	plp		1294640	0					
ANR	1294769	Identifier	width		1294640	1					
ANR	1294770	Identifier	y		1294640	1					
ANR	1294771	AssignmentExpression	plp -> e . cdelta . x = 0		1294640	1		=			
ANR	1294772	MemberAccess	plp -> e . cdelta . x		1294640	0					
ANR	1294773	MemberAccess	plp -> e . cdelta		1294640	0					
ANR	1294774	PtrMemberAccess	plp -> e		1294640	0					
ANR	1294775	Identifier	plp		1294640	0					
ANR	1294776	Identifier	e		1294640	1					
ANR	1294777	Identifier	cdelta		1294640	1					
ANR	1294778	Identifier	x		1294640	1					
ANR	1294779	PrimaryExpression	0		1294640	1					
ANR	1294780	ExpressionStatement	"plp -> width . x = - ( plp -> e . cdelta . y = TRSIGN ( dy , fixed_half ) )"	1405:8:59907:59965	1294640	1	True				
ANR	1294781	AssignmentExpression	"plp -> width . x = - ( plp -> e . cdelta . y = TRSIGN ( dy , fixed_half ) )"		1294640	0		=			
ANR	1294782	MemberAccess	plp -> width . x		1294640	0					
ANR	1294783	PtrMemberAccess	plp -> width		1294640	0					
ANR	1294784	Identifier	plp		1294640	0					
ANR	1294785	Identifier	width		1294640	1					
ANR	1294786	Identifier	x		1294640	1					
ANR	1294787	UnaryOperationExpression	"- ( plp -> e . cdelta . y = TRSIGN ( dy , fixed_half ) )"		1294640	1					
ANR	1294788	UnaryOperator	-		1294640	0					
ANR	1294789	AssignmentExpression	"plp -> e . cdelta . y = TRSIGN ( dy , fixed_half )"		1294640	1		=			
ANR	1294790	MemberAccess	plp -> e . cdelta . y		1294640	0					
ANR	1294791	MemberAccess	plp -> e . cdelta		1294640	0					
ANR	1294792	PtrMemberAccess	plp -> e		1294640	0					
ANR	1294793	Identifier	plp		1294640	0					
ANR	1294794	Identifier	e		1294640	1					
ANR	1294795	Identifier	cdelta		1294640	1					
ANR	1294796	Identifier	y		1294640	1					
ANR	1294797	CallExpression	"TRSIGN ( dy , fixed_half )"		1294640	1					
ANR	1294798	Callee	TRSIGN		1294640	0					
ANR	1294799	Identifier	TRSIGN		1294640	0					
ANR	1294800	ArgumentList	dy		1294640	1					
ANR	1294801	Argument	dy		1294640	0					
ANR	1294802	Identifier	dy		1294640	0					
ANR	1294803	Argument	fixed_half		1294640	1					
ANR	1294804	Identifier	fixed_half		1294640	0					
ANR	1294805	Statement	undef	1407:1:59974:59978	1294640	25	True				
ANR	1294806	Statement	TRSIGN	1407:7:59980:59985	1294640	26	True				
ANR	1294807	ReturnType	static void		1294640	1					
ANR	1294808	Identifier	set_thin_widths		1294640	2					
ANR	1294809	ParameterList	register pl_ptr plp		1294640	3					
ANR	1294810	Parameter	register pl_ptr plp	1395:16:59557:59575	1294640	0	True				
ANR	1294811	ParameterType	register pl_ptr		1294640	0					
ANR	1294812	Identifier	plp		1294640	1					
ANR	1294813	CFGEntryNode	ENTRY		1294640		True				
ANR	1294814	CFGExitNode	EXIT		1294640		True				
ANR	1294815	Symbol	plp -> e . cdelta . x		1294640						
ANR	1294816	Symbol	plp -> width . y		1294640						
ANR	1294817	Symbol	plp -> width . x		1294640						
ANR	1294818	Symbol	plp -> e . cdelta . y		1294640						
ANR	1294819	Symbol	plp -> e . p . y		1294640						
ANR	1294820	Symbol	plp -> e . p . x		1294640						
ANR	1294821	Symbol	plp -> o . p . y		1294640						
ANR	1294822	Symbol	plp -> o . p		1294640						
ANR	1294823	Symbol	plp -> o . p . x		1294640						
ANR	1294824	Symbol	plp -> width		1294640						
ANR	1294825	Symbol	plp -> e . p		1294640						
ANR	1294826	Symbol	dx		1294640						
ANR	1294827	Symbol	plp		1294640						
ANR	1294828	Symbol	dy		1294640						
ANR	1294829	Symbol	plp -> o		1294640						
ANR	1294830	Symbol	any_abs		1294640						
ANR	1294831	Symbol	plp -> e		1294640						
ANR	1294832	Symbol	plp -> e . cdelta		1294640						
ANR	1294833	Symbol	fixed_half		1294640						
ANR	1294834	Symbol	TRSIGN		1294640						
ANR	1294835	Symbol	* plp		1294640						
ANR	1294836	Function	stroke_fill	1413:0:60139:65059							
ANR	1294837	FunctionDef	"stroke_fill (gx_path * ppath , gx_path * rpath , bool ensure_closed , int first , register pl_ptr plp , pl_ptr nplp , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs , const gx_stroke_params * params , const gs_fixed_rect * pbbox , int uniform , gs_line_join join , bool reflected , note_flags flags)"		1294836	0					
ANR	1294838	CompoundStatement		1420:0:60520:65059	1294836	0					
ANR	1294839	IdentifierDeclStatement	const fixed lix = plp -> o . p . x ;	1421:4:60526:60554	1294836	0	True				
ANR	1294840	IdentifierDecl	lix = plp -> o . p . x		1294836	0					
ANR	1294841	IdentifierDeclType	const fixed		1294836	0					
ANR	1294842	Identifier	lix		1294836	1					
ANR	1294843	AssignmentExpression	lix = plp -> o . p . x		1294836	2		=			
ANR	1294844	Identifier	lix		1294836	0					
ANR	1294845	MemberAccess	plp -> o . p . x		1294836	1					
ANR	1294846	MemberAccess	plp -> o . p		1294836	0					
ANR	1294847	PtrMemberAccess	plp -> o		1294836	0					
ANR	1294848	Identifier	plp		1294836	0					
ANR	1294849	Identifier	o		1294836	1					
ANR	1294850	Identifier	p		1294836	1					
ANR	1294851	Identifier	x		1294836	1					
ANR	1294852	IdentifierDeclStatement	const fixed liy = plp -> o . p . y ;	1422:4:60560:60588	1294836	1	True				
ANR	1294853	IdentifierDecl	liy = plp -> o . p . y		1294836	0					
ANR	1294854	IdentifierDeclType	const fixed		1294836	0					
ANR	1294855	Identifier	liy		1294836	1					
ANR	1294856	AssignmentExpression	liy = plp -> o . p . y		1294836	2		=			
ANR	1294857	Identifier	liy		1294836	0					
ANR	1294858	MemberAccess	plp -> o . p . y		1294836	1					
ANR	1294859	MemberAccess	plp -> o . p		1294836	0					
ANR	1294860	PtrMemberAccess	plp -> o		1294836	0					
ANR	1294861	Identifier	plp		1294836	0					
ANR	1294862	Identifier	o		1294836	1					
ANR	1294863	Identifier	p		1294836	1					
ANR	1294864	Identifier	y		1294836	1					
ANR	1294865	IdentifierDeclStatement	const fixed litox = plp -> e . p . x ;	1423:4:60594:60624	1294836	2	True				
ANR	1294866	IdentifierDecl	litox = plp -> e . p . x		1294836	0					
ANR	1294867	IdentifierDeclType	const fixed		1294836	0					
ANR	1294868	Identifier	litox		1294836	1					
ANR	1294869	AssignmentExpression	litox = plp -> e . p . x		1294836	2		=			
ANR	1294870	Identifier	litox		1294836	0					
ANR	1294871	MemberAccess	plp -> e . p . x		1294836	1					
ANR	1294872	MemberAccess	plp -> e . p		1294836	0					
ANR	1294873	PtrMemberAccess	plp -> e		1294836	0					
ANR	1294874	Identifier	plp		1294836	0					
ANR	1294875	Identifier	e		1294836	1					
ANR	1294876	Identifier	p		1294836	1					
ANR	1294877	Identifier	x		1294836	1					
ANR	1294878	IdentifierDeclStatement	const fixed litoy = plp -> e . p . y ;	1424:4:60630:60660	1294836	3	True				
ANR	1294879	IdentifierDecl	litoy = plp -> e . p . y		1294836	0					
ANR	1294880	IdentifierDeclType	const fixed		1294836	0					
ANR	1294881	Identifier	litoy		1294836	1					
ANR	1294882	AssignmentExpression	litoy = plp -> e . p . y		1294836	2		=			
ANR	1294883	Identifier	litoy		1294836	0					
ANR	1294884	MemberAccess	plp -> e . p . y		1294836	1					
ANR	1294885	MemberAccess	plp -> e . p		1294836	0					
ANR	1294886	PtrMemberAccess	plp -> e		1294836	0					
ANR	1294887	Identifier	plp		1294836	0					
ANR	1294888	Identifier	e		1294836	1					
ANR	1294889	Identifier	p		1294836	1					
ANR	1294890	Identifier	y		1294836	1					
ANR	1294891	IfStatement	if ( plp -> thin )		1294836	4					
ANR	1294892	Condition	plp -> thin	1427:8:60721:60729	1294836	0	True				
ANR	1294893	PtrMemberAccess	plp -> thin		1294836	0					
ANR	1294894	Identifier	plp		1294836	0					
ANR	1294895	Identifier	thin		1294836	1					
ANR	1294896	CompoundStatement		8:19:211:211	1294836	1					
ANR	1294897	ReturnStatement	"return ( * dev_proc ( dev , draw_thin_line ) ) ( dev , lix , liy , litox , litoy , pdevc , pgs -> log_op , pgs -> fill_adjust . x , pgs -> fill_adjust . y ) ;"	1429:8:60818:61090	1294836	0	True				
ANR	1294898	CallExpression	"( * dev_proc ( dev , draw_thin_line ) ) ( dev , lix , liy , litox , litoy , pdevc , pgs -> log_op , pgs -> fill_adjust . x , pgs -> fill_adjust . y )"		1294836	0					
ANR	1294899	Callee	"* dev_proc ( dev , draw_thin_line )"		1294836	0					
ANR	1294900	UnaryOperationExpression	"* dev_proc ( dev , draw_thin_line )"		1294836	0					
ANR	1294901	UnaryOperator	*		1294836	0					
ANR	1294902	CallExpression	"dev_proc ( dev , draw_thin_line )"		1294836	1					
ANR	1294903	Callee	dev_proc		1294836	0					
ANR	1294904	Identifier	dev_proc		1294836	0					
ANR	1294905	ArgumentList	dev		1294836	1					
ANR	1294906	Argument	dev		1294836	0					
ANR	1294907	Identifier	dev		1294836	0					
ANR	1294908	Argument	draw_thin_line		1294836	1					
ANR	1294909	Identifier	draw_thin_line		1294836	0					
ANR	1294910	ArgumentList	dev		1294836	1					
ANR	1294911	Argument	dev		1294836	0					
ANR	1294912	Identifier	dev		1294836	0					
ANR	1294913	Argument	lix		1294836	1					
ANR	1294914	Identifier	lix		1294836	0					
ANR	1294915	Argument	liy		1294836	2					
ANR	1294916	Identifier	liy		1294836	0					
ANR	1294917	Argument	litox		1294836	3					
ANR	1294918	Identifier	litox		1294836	0					
ANR	1294919	Argument	litoy		1294836	4					
ANR	1294920	Identifier	litoy		1294836	0					
ANR	1294921	Argument	pdevc		1294836	5					
ANR	1294922	Identifier	pdevc		1294836	0					
ANR	1294923	Argument	pgs -> log_op		1294836	6					
ANR	1294924	PtrMemberAccess	pgs -> log_op		1294836	0					
ANR	1294925	Identifier	pgs		1294836	0					
ANR	1294926	Identifier	log_op		1294836	1					
ANR	1294927	Argument	pgs -> fill_adjust . x		1294836	7					
ANR	1294928	MemberAccess	pgs -> fill_adjust . x		1294836	0					
ANR	1294929	PtrMemberAccess	pgs -> fill_adjust		1294836	0					
ANR	1294930	Identifier	pgs		1294836	0					
ANR	1294931	Identifier	fill_adjust		1294836	1					
ANR	1294932	Identifier	x		1294836	1					
ANR	1294933	Argument	pgs -> fill_adjust . y		1294836	8					
ANR	1294934	MemberAccess	pgs -> fill_adjust . y		1294836	0					
ANR	1294935	PtrMemberAccess	pgs -> fill_adjust		1294836	0					
ANR	1294936	Identifier	pgs		1294836	0					
ANR	1294937	Identifier	fill_adjust		1294836	1					
ANR	1294938	Identifier	y		1294836	1					
ANR	1294939	CompoundStatement		20:8:841:957	1294836	5					
ANR	1294940	IdentifierDeclStatement	const gx_line_params * pgs_lp = gs_currentlineparams_inline ( pgs ) ;	1436:8:61161:61224	1294836	0	True				
ANR	1294941	IdentifierDecl	* pgs_lp = gs_currentlineparams_inline ( pgs )		1294836	0					
ANR	1294942	IdentifierDeclType	const gx_line_params *		1294836	0					
ANR	1294943	Identifier	pgs_lp		1294836	1					
ANR	1294944	AssignmentExpression	* pgs_lp = gs_currentlineparams_inline ( pgs )		1294836	2		=			
ANR	1294945	Identifier	pgs_lp		1294836	0					
ANR	1294946	CallExpression	gs_currentlineparams_inline ( pgs )		1294836	1					
ANR	1294947	Callee	gs_currentlineparams_inline		1294836	0					
ANR	1294948	Identifier	gs_currentlineparams_inline		1294836	0					
ANR	1294949	ArgumentList	pgs		1294836	1					
ANR	1294950	Argument	pgs		1294836	0					
ANR	1294951	Identifier	pgs		1294836	0					
ANR	1294952	IdentifierDeclStatement	gs_line_cap start_cap = ( flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap ) ;	1437:8:61234:61352	1294836	1	True				
ANR	1294953	IdentifierDecl	start_cap = ( flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap )		1294836	0					
ANR	1294954	IdentifierDeclType	gs_line_cap		1294836	0					
ANR	1294955	Identifier	start_cap		1294836	1					
ANR	1294956	AssignmentExpression	start_cap = ( flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap )		1294836	2		=			
ANR	1294957	Identifier	start_cap		1294836	0					
ANR	1294958	ConditionalExpression	flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap		1294836	1					
ANR	1294959	Condition	flags & nf_dash_head		1294836	0					
ANR	1294960	BitAndExpression	flags & nf_dash_head		1294836	0		&			
ANR	1294961	Identifier	flags		1294836	0					
ANR	1294962	Identifier	nf_dash_head		1294836	1					
ANR	1294963	PtrMemberAccess	pgs_lp -> dash_cap		1294836	1					
ANR	1294964	Identifier	pgs_lp		1294836	0					
ANR	1294965	Identifier	dash_cap		1294836	1					
ANR	1294966	PtrMemberAccess	pgs_lp -> start_cap		1294836	2					
ANR	1294967	Identifier	pgs_lp		1294836	0					
ANR	1294968	Identifier	start_cap		1294836	1					
ANR	1294969	IdentifierDeclStatement	gs_line_cap end_cap = ( flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap ) ;	1439:8:61362:61478	1294836	2	True				
ANR	1294970	IdentifierDecl	end_cap = ( flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap )		1294836	0					
ANR	1294971	IdentifierDeclType	gs_line_cap		1294836	0					
ANR	1294972	Identifier	end_cap		1294836	1					
ANR	1294973	AssignmentExpression	end_cap = ( flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap )		1294836	2		=			
ANR	1294974	Identifier	end_cap		1294836	0					
ANR	1294975	ConditionalExpression	flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap		1294836	1					
ANR	1294976	Condition	flags & nf_dash_tail		1294836	0					
ANR	1294977	BitAndExpression	flags & nf_dash_tail		1294836	0		&			
ANR	1294978	Identifier	flags		1294836	0					
ANR	1294979	Identifier	nf_dash_tail		1294836	1					
ANR	1294980	PtrMemberAccess	pgs_lp -> dash_cap		1294836	1					
ANR	1294981	Identifier	pgs_lp		1294836	0					
ANR	1294982	Identifier	dash_cap		1294836	1					
ANR	1294983	PtrMemberAccess	pgs_lp -> end_cap		1294836	2					
ANR	1294984	Identifier	pgs_lp		1294836	0					
ANR	1294985	Identifier	end_cap		1294836	1					
ANR	1294986	IfStatement	if ( first != 0 )		1294836	3					
ANR	1294987	Condition	first != 0	1442:12:61493:61502	1294836	0	True				
ANR	1294988	EqualityExpression	first != 0		1294836	0		!=			
ANR	1294989	Identifier	first		1294836	0					
ANR	1294990	PrimaryExpression	0		1294836	1					
ANR	1294991	ExpressionStatement	start_cap = gs_cap_butt	1443:12:61517:61540	1294836	1	True				
ANR	1294992	AssignmentExpression	start_cap = gs_cap_butt		1294836	0		=			
ANR	1294993	Identifier	start_cap		1294836	0					
ANR	1294994	Identifier	gs_cap_butt		1294836	1					
ANR	1294995	IfStatement	if ( nplp != 0 )		1294836	4					
ANR	1294996	Condition	nplp != 0	1444:12:61554:61562	1294836	0	True				
ANR	1294997	EqualityExpression	nplp != 0		1294836	0		!=			
ANR	1294998	Identifier	nplp		1294836	0					
ANR	1294999	PrimaryExpression	0		1294836	1					
ANR	1295000	ExpressionStatement	end_cap = gs_cap_butt	1445:12:61577:61598	1294836	1	True				
ANR	1295001	AssignmentExpression	end_cap = gs_cap_butt		1294836	0		=			
ANR	1295002	Identifier	end_cap		1294836	0					
ANR	1295003	Identifier	gs_cap_butt		1294836	1					
ANR	1295004	IfStatement	if ( ! plp -> thin && ( nplp == 0 || ! nplp -> thin ) && ( start_cap == gs_cap_butt || start_cap == gs_cap_square ) && ( end_cap == gs_cap_butt || end_cap == gs_cap_square ) && ( join == gs_join_bevel || join == gs_join_miter || join == gs_join_none ) && ( pgs -> fill_adjust . x | pgs -> fill_adjust . y ) == 0 )		1294836	5					
ANR	1295005	Condition	! plp -> thin && ( nplp == 0 || ! nplp -> thin ) && ( start_cap == gs_cap_butt || start_cap == gs_cap_square ) && ( end_cap == gs_cap_butt || end_cap == gs_cap_square ) && ( join == gs_join_bevel || join == gs_join_miter || join == gs_join_none ) && ( pgs -> fill_adjust . x | pgs -> fill_adjust . y ) == 0	1446:12:61612:61961	1294836	0	True				
ANR	1295006	AndExpression	! plp -> thin && ( nplp == 0 || ! nplp -> thin ) && ( start_cap == gs_cap_butt || start_cap == gs_cap_square ) && ( end_cap == gs_cap_butt || end_cap == gs_cap_square ) && ( join == gs_join_bevel || join == gs_join_miter || join == gs_join_none ) && ( pgs -> fill_adjust . x | pgs -> fill_adjust . y ) == 0		1294836	0		&&			
ANR	1295007	UnaryOperationExpression	! plp -> thin		1294836	0					
ANR	1295008	UnaryOperator	!		1294836	0					
ANR	1295009	PtrMemberAccess	plp -> thin		1294836	1					
ANR	1295010	Identifier	plp		1294836	0					
ANR	1295011	Identifier	thin		1294836	1					
ANR	1295012	AndExpression	( nplp == 0 || ! nplp -> thin ) && ( start_cap == gs_cap_butt || start_cap == gs_cap_square ) && ( end_cap == gs_cap_butt || end_cap == gs_cap_square ) && ( join == gs_join_bevel || join == gs_join_miter || join == gs_join_none ) && ( pgs -> fill_adjust . x | pgs -> fill_adjust . y ) == 0		1294836	1		&&			
ANR	1295013	OrExpression	nplp == 0 || ! nplp -> thin		1294836	0		||			
ANR	1295014	EqualityExpression	nplp == 0		1294836	0		==			
ANR	1295015	Identifier	nplp		1294836	0					
ANR	1295016	PrimaryExpression	0		1294836	1					
ANR	1295017	UnaryOperationExpression	! nplp -> thin		1294836	1					
ANR	1295018	UnaryOperator	!		1294836	0					
ANR	1295019	PtrMemberAccess	nplp -> thin		1294836	1					
ANR	1295020	Identifier	nplp		1294836	0					
ANR	1295021	Identifier	thin		1294836	1					
ANR	1295022	AndExpression	( start_cap == gs_cap_butt || start_cap == gs_cap_square ) && ( end_cap == gs_cap_butt || end_cap == gs_cap_square ) && ( join == gs_join_bevel || join == gs_join_miter || join == gs_join_none ) && ( pgs -> fill_adjust . x | pgs -> fill_adjust . y ) == 0		1294836	1		&&			
ANR	1295023	OrExpression	start_cap == gs_cap_butt || start_cap == gs_cap_square		1294836	0		||			
ANR	1295024	EqualityExpression	start_cap == gs_cap_butt		1294836	0		==			
ANR	1295025	Identifier	start_cap		1294836	0					
ANR	1295026	Identifier	gs_cap_butt		1294836	1					
ANR	1295027	EqualityExpression	start_cap == gs_cap_square		1294836	1		==			
ANR	1295028	Identifier	start_cap		1294836	0					
ANR	1295029	Identifier	gs_cap_square		1294836	1					
ANR	1295030	AndExpression	( end_cap == gs_cap_butt || end_cap == gs_cap_square ) && ( join == gs_join_bevel || join == gs_join_miter || join == gs_join_none ) && ( pgs -> fill_adjust . x | pgs -> fill_adjust . y ) == 0		1294836	1		&&			
ANR	1295031	OrExpression	end_cap == gs_cap_butt || end_cap == gs_cap_square		1294836	0		||			
ANR	1295032	EqualityExpression	end_cap == gs_cap_butt		1294836	0		==			
ANR	1295033	Identifier	end_cap		1294836	0					
ANR	1295034	Identifier	gs_cap_butt		1294836	1					
ANR	1295035	EqualityExpression	end_cap == gs_cap_square		1294836	1		==			
ANR	1295036	Identifier	end_cap		1294836	0					
ANR	1295037	Identifier	gs_cap_square		1294836	1					
ANR	1295038	AndExpression	( join == gs_join_bevel || join == gs_join_miter || join == gs_join_none ) && ( pgs -> fill_adjust . x | pgs -> fill_adjust . y ) == 0		1294836	1		&&			
ANR	1295039	OrExpression	join == gs_join_bevel || join == gs_join_miter || join == gs_join_none		1294836	0		||			
ANR	1295040	EqualityExpression	join == gs_join_bevel		1294836	0		==			
ANR	1295041	Identifier	join		1294836	0					
ANR	1295042	Identifier	gs_join_bevel		1294836	1					
ANR	1295043	OrExpression	join == gs_join_miter || join == gs_join_none		1294836	1		||			
ANR	1295044	EqualityExpression	join == gs_join_miter		1294836	0		==			
ANR	1295045	Identifier	join		1294836	0					
ANR	1295046	Identifier	gs_join_miter		1294836	1					
ANR	1295047	EqualityExpression	join == gs_join_none		1294836	1		==			
ANR	1295048	Identifier	join		1294836	0					
ANR	1295049	Identifier	gs_join_none		1294836	1					
ANR	1295050	EqualityExpression	( pgs -> fill_adjust . x | pgs -> fill_adjust . y ) == 0		1294836	1		==			
ANR	1295051	InclusiveOrExpression	pgs -> fill_adjust . x | pgs -> fill_adjust . y		1294836	0		|			
ANR	1295052	MemberAccess	pgs -> fill_adjust . x		1294836	0					
ANR	1295053	PtrMemberAccess	pgs -> fill_adjust		1294836	0					
ANR	1295054	Identifier	pgs		1294836	0					
ANR	1295055	Identifier	fill_adjust		1294836	1					
ANR	1295056	Identifier	x		1294836	1					
ANR	1295057	MemberAccess	pgs -> fill_adjust . y		1294836	1					
ANR	1295058	PtrMemberAccess	pgs -> fill_adjust		1294836	0					
ANR	1295059	Identifier	pgs		1294836	0					
ANR	1295060	Identifier	fill_adjust		1294836	1					
ANR	1295061	Identifier	y		1294836	1					
ANR	1295062	PrimaryExpression	0		1294836	1					
ANR	1295063	CompoundStatement		36:12:1539:1559	1294836	1					
ANR	1295064	IdentifierDeclStatement	gs_fixed_point points [ 6 ] ;	1453:12:61991:62015	1294836	0	True				
ANR	1295065	IdentifierDecl	points [ 6 ]		1294836	0					
ANR	1295066	IdentifierDeclType	gs_fixed_point [ 6 ]		1294836	0					
ANR	1295067	Identifier	points		1294836	1					
ANR	1295068	PrimaryExpression	6		1294836	2					
ANR	1295069	IdentifierDeclStatement	"int npoints , code ;"	1454:12:62029:62046	1294836	1	True				
ANR	1295070	IdentifierDecl	npoints		1294836	0					
ANR	1295071	IdentifierDeclType	int		1294836	0					
ANR	1295072	Identifier	npoints		1294836	1					
ANR	1295073	IdentifierDecl	code		1294836	1					
ANR	1295074	IdentifierDeclType	int		1294836	0					
ANR	1295075	Identifier	code		1294836	1					
ANR	1295076	IdentifierDeclStatement	"fixed ax , ay , bx , by ;"	1455:12:62060:62080	1294836	2	True				
ANR	1295077	IdentifierDecl	ax		1294836	0					
ANR	1295078	IdentifierDeclType	fixed		1294836	0					
ANR	1295079	Identifier	ax		1294836	1					
ANR	1295080	IdentifierDecl	ay		1294836	1					
ANR	1295081	IdentifierDeclType	fixed		1294836	0					
ANR	1295082	Identifier	ay		1294836	1					
ANR	1295083	IdentifierDecl	bx		1294836	2					
ANR	1295084	IdentifierDeclType	fixed		1294836	0					
ANR	1295085	Identifier	bx		1294836	1					
ANR	1295086	IdentifierDecl	by		1294836	3					
ANR	1295087	IdentifierDeclType	fixed		1294836	0					
ANR	1295088	Identifier	by		1294836	1					
ANR	1295089	ExpressionStatement	"npoints = cap_points ( start_cap , & plp -> o , points )"	1457:12:62095:62143	1294836	3	True				
ANR	1295090	AssignmentExpression	"npoints = cap_points ( start_cap , & plp -> o , points )"		1294836	0		=			
ANR	1295091	Identifier	npoints		1294836	0					
ANR	1295092	CallExpression	"cap_points ( start_cap , & plp -> o , points )"		1294836	1					
ANR	1295093	Callee	cap_points		1294836	0					
ANR	1295094	Identifier	cap_points		1294836	0					
ANR	1295095	ArgumentList	start_cap		1294836	1					
ANR	1295096	Argument	start_cap		1294836	0					
ANR	1295097	Identifier	start_cap		1294836	0					
ANR	1295098	Argument	& plp -> o		1294836	1					
ANR	1295099	UnaryOperationExpression	& plp -> o		1294836	0					
ANR	1295100	UnaryOperator	&		1294836	0					
ANR	1295101	PtrMemberAccess	plp -> o		1294836	1					
ANR	1295102	Identifier	plp		1294836	0					
ANR	1295103	Identifier	o		1294836	1					
ANR	1295104	Argument	points		1294836	2					
ANR	1295105	Identifier	points		1294836	0					
ANR	1295106	IfStatement	if ( nplp == 0 )		1294836	4					
ANR	1295107	Condition	nplp == 0	1458:16:62161:62169	1294836	0	True				
ANR	1295108	EqualityExpression	nplp == 0		1294836	0		==			
ANR	1295109	Identifier	nplp		1294836	0					
ANR	1295110	PrimaryExpression	0		1294836	1					
ANR	1295111	ExpressionStatement	"code = cap_points ( end_cap , & plp -> e , points + npoints )"	1459:16:62188:62241	1294836	1	True				
ANR	1295112	AssignmentExpression	"code = cap_points ( end_cap , & plp -> e , points + npoints )"		1294836	0		=			
ANR	1295113	Identifier	code		1294836	0					
ANR	1295114	CallExpression	"cap_points ( end_cap , & plp -> e , points + npoints )"		1294836	1					
ANR	1295115	Callee	cap_points		1294836	0					
ANR	1295116	Identifier	cap_points		1294836	0					
ANR	1295117	ArgumentList	end_cap		1294836	1					
ANR	1295118	Argument	end_cap		1294836	0					
ANR	1295119	Identifier	end_cap		1294836	0					
ANR	1295120	Argument	& plp -> e		1294836	1					
ANR	1295121	UnaryOperationExpression	& plp -> e		1294836	0					
ANR	1295122	UnaryOperator	&		1294836	0					
ANR	1295123	PtrMemberAccess	plp -> e		1294836	1					
ANR	1295124	Identifier	plp		1294836	0					
ANR	1295125	Identifier	e		1294836	1					
ANR	1295126	Argument	points + npoints		1294836	2					
ANR	1295127	AdditiveExpression	points + npoints		1294836	0		+			
ANR	1295128	Identifier	points		1294836	0					
ANR	1295129	Identifier	npoints		1294836	1					
ANR	1295130	ElseStatement	else		1294836	0					
ANR	1295131	ExpressionStatement	"code = line_join_points ( pgs_lp , plp , nplp , points + npoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"	1461:16:62276:62480	1294836	0	True				
ANR	1295132	AssignmentExpression	"code = line_join_points ( pgs_lp , plp , nplp , points + npoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"		1294836	0		=			
ANR	1295133	Identifier	code		1294836	0					
ANR	1295134	CallExpression	"line_join_points ( pgs_lp , plp , nplp , points + npoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"		1294836	1					
ANR	1295135	Callee	line_join_points		1294836	0					
ANR	1295136	Identifier	line_join_points		1294836	0					
ANR	1295137	ArgumentList	pgs_lp		1294836	1					
ANR	1295138	Argument	pgs_lp		1294836	0					
ANR	1295139	Identifier	pgs_lp		1294836	0					
ANR	1295140	Argument	plp		1294836	1					
ANR	1295141	Identifier	plp		1294836	0					
ANR	1295142	Argument	nplp		1294836	2					
ANR	1295143	Identifier	nplp		1294836	0					
ANR	1295144	Argument	points + npoints		1294836	3					
ANR	1295145	AdditiveExpression	points + npoints		1294836	0		+			
ANR	1295146	Identifier	points		1294836	0					
ANR	1295147	Identifier	npoints		1294836	1					
ANR	1295148	Argument	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1294836	4					
ANR	1295149	ConditionalExpression	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1294836	0					
ANR	1295150	Condition	uniform		1294836	0					
ANR	1295151	Identifier	uniform		1294836	0					
ANR	1295152	CastExpression	( gs_matrix * ) 0		1294836	1					
ANR	1295153	CastTarget	gs_matrix *		1294836	0					
ANR	1295154	PrimaryExpression	0		1294836	1					
ANR	1295155	UnaryOperationExpression	& ctm_only ( pgs )		1294836	2					
ANR	1295156	UnaryOperator	&		1294836	0					
ANR	1295157	CallExpression	ctm_only ( pgs )		1294836	1					
ANR	1295158	Callee	ctm_only		1294836	0					
ANR	1295159	Identifier	ctm_only		1294836	0					
ANR	1295160	ArgumentList	pgs		1294836	1					
ANR	1295161	Argument	pgs		1294836	0					
ANR	1295162	Identifier	pgs		1294836	0					
ANR	1295163	Argument	join		1294836	5					
ANR	1295164	Identifier	join		1294836	0					
ANR	1295165	Argument	reflected		1294836	6					
ANR	1295166	Identifier	reflected		1294836	0					
ANR	1295167	IfStatement	if ( code < 0 )		1294836	5					
ANR	1295168	Condition	code < 0	1464:16:62498:62505	1294836	0	True				
ANR	1295169	RelationalExpression	code < 0		1294836	0		<			
ANR	1295170	Identifier	code		1294836	0					
ANR	1295171	PrimaryExpression	0		1294836	1					
ANR	1295172	GotoStatement	goto general ;	1465:16:62524:62536	1294836	1	True				
ANR	1295173	Identifier	general		1294836	0					
ANR	1295174	Statement	define	1467:1:62606:62611	1294836	6	True				
ANR	1295175	Statement	SUB_OVERFLOWS	1467:8:62613:62625	1294836	7	True				
ANR	1295176	Statement	(	1467:21:62626:62626	1294836	8	True				
ANR	1295177	Statement	r	1467:22:62627:62627	1294836	9	True				
ANR	1295178	Statement	","	1467:23:62628:62628	1294836	10	True				
ANR	1295179	Statement	u	1467:25:62630:62630	1294836	11	True				
ANR	1295180	Statement	","	1467:26:62631:62631	1294836	12	True				
ANR	1295181	Statement	v	1467:28:62633:62633	1294836	13	True				
ANR	1295182	Statement	)	1467:29:62634:62634	1294836	14	True				
ANR	1295183	Statement	(	1468:2:62639:62639	1294836	15	True				
ANR	1295184	Statement	(	1468:3:62640:62640	1294836	16	True				
ANR	1295185	Statement	(	1468:4:62641:62641	1294836	17	True				
ANR	1295186	Statement	r	1468:5:62642:62642	1294836	18	True				
ANR	1295187	Statement	=	1468:7:62644:62644	1294836	19	True				
ANR	1295188	Statement	u	1468:9:62646:62646	1294836	20	True				
ANR	1295189	Statement	-	1468:11:62648:62648	1294836	21	True				
ANR	1295190	Statement	v	1468:13:62650:62650	1294836	22	True				
ANR	1295191	Statement	)	1468:14:62651:62651	1294836	23	True				
ANR	1295192	Statement	^	1468:16:62653:62653	1294836	24	True				
ANR	1295193	Statement	u	1468:18:62655:62655	1294836	25	True				
ANR	1295194	Statement	)	1468:19:62656:62656	1294836	26	True				
ANR	1295195	Statement	<	1468:21:62658:62658	1294836	27	True				
ANR	1295196	Statement	0	1468:23:62660:62660	1294836	28	True				
ANR	1295197	Statement	&&	1468:25:62662:62663	1294836	29	True				
ANR	1295198	Statement	(	1468:28:62665:62665	1294836	30	True				
ANR	1295199	Statement	u	1468:29:62666:62666	1294836	31	True				
ANR	1295200	Statement	^	1468:31:62668:62668	1294836	32	True				
ANR	1295201	Statement	v	1468:33:62670:62670	1294836	33	True				
ANR	1295202	Statement	)	1468:34:62671:62671	1294836	34	True				
ANR	1295203	Statement	<	1468:36:62673:62673	1294836	35	True				
ANR	1295204	Statement	0	1468:38:62675:62675	1294836	36	True				
ANR	1295205	Statement	)	1468:39:62676:62676	1294836	37	True				
ANR	1295206	IfStatement	"if ( SUB_OVERFLOWS ( ax , points [ 0 ] . x , points [ 1 ] . x ) || SUB_OVERFLOWS ( ay , points [ 0 ] . y , points [ 1 ] . y ) || SUB_OVERFLOWS ( bx , points [ 2 ] . x , points [ 1 ] . x ) || SUB_OVERFLOWS ( by , points [ 2 ] . y , points [ 1 ] . y ) )"		1294836	38					
ANR	1295207	Condition	"SUB_OVERFLOWS ( ax , points [ 0 ] . x , points [ 1 ] . x ) || SUB_OVERFLOWS ( ay , points [ 0 ] . y , points [ 1 ] . y ) || SUB_OVERFLOWS ( bx , points [ 2 ] . x , points [ 1 ] . x ) || SUB_OVERFLOWS ( by , points [ 2 ] . y , points [ 1 ] . y )"	1469:16:62694:62925	1294836	0	True				
ANR	1295208	OrExpression	"SUB_OVERFLOWS ( ax , points [ 0 ] . x , points [ 1 ] . x ) || SUB_OVERFLOWS ( ay , points [ 0 ] . y , points [ 1 ] . y ) || SUB_OVERFLOWS ( bx , points [ 2 ] . x , points [ 1 ] . x ) || SUB_OVERFLOWS ( by , points [ 2 ] . y , points [ 1 ] . y )"		1294836	0		||			
ANR	1295209	CallExpression	"SUB_OVERFLOWS ( ax , points [ 0 ] . x , points [ 1 ] . x )"		1294836	0					
ANR	1295210	Callee	SUB_OVERFLOWS		1294836	0					
ANR	1295211	Identifier	SUB_OVERFLOWS		1294836	0					
ANR	1295212	ArgumentList	ax		1294836	1					
ANR	1295213	Argument	ax		1294836	0					
ANR	1295214	Identifier	ax		1294836	0					
ANR	1295215	Argument	points [ 0 ] . x		1294836	1					
ANR	1295216	MemberAccess	points [ 0 ] . x		1294836	0					
ANR	1295217	ArrayIndexing	points [ 0 ]		1294836	0					
ANR	1295218	Identifier	points		1294836	0					
ANR	1295219	PrimaryExpression	0		1294836	1					
ANR	1295220	Identifier	x		1294836	1					
ANR	1295221	Argument	points [ 1 ] . x		1294836	2					
ANR	1295222	MemberAccess	points [ 1 ] . x		1294836	0					
ANR	1295223	ArrayIndexing	points [ 1 ]		1294836	0					
ANR	1295224	Identifier	points		1294836	0					
ANR	1295225	PrimaryExpression	1		1294836	1					
ANR	1295226	Identifier	x		1294836	1					
ANR	1295227	OrExpression	"SUB_OVERFLOWS ( ay , points [ 0 ] . y , points [ 1 ] . y ) || SUB_OVERFLOWS ( bx , points [ 2 ] . x , points [ 1 ] . x ) || SUB_OVERFLOWS ( by , points [ 2 ] . y , points [ 1 ] . y )"		1294836	1		||			
ANR	1295228	CallExpression	"SUB_OVERFLOWS ( ay , points [ 0 ] . y , points [ 1 ] . y )"		1294836	0					
ANR	1295229	Callee	SUB_OVERFLOWS		1294836	0					
ANR	1295230	Identifier	SUB_OVERFLOWS		1294836	0					
ANR	1295231	ArgumentList	ay		1294836	1					
ANR	1295232	Argument	ay		1294836	0					
ANR	1295233	Identifier	ay		1294836	0					
ANR	1295234	Argument	points [ 0 ] . y		1294836	1					
ANR	1295235	MemberAccess	points [ 0 ] . y		1294836	0					
ANR	1295236	ArrayIndexing	points [ 0 ]		1294836	0					
ANR	1295237	Identifier	points		1294836	0					
ANR	1295238	PrimaryExpression	0		1294836	1					
ANR	1295239	Identifier	y		1294836	1					
ANR	1295240	Argument	points [ 1 ] . y		1294836	2					
ANR	1295241	MemberAccess	points [ 1 ] . y		1294836	0					
ANR	1295242	ArrayIndexing	points [ 1 ]		1294836	0					
ANR	1295243	Identifier	points		1294836	0					
ANR	1295244	PrimaryExpression	1		1294836	1					
ANR	1295245	Identifier	y		1294836	1					
ANR	1295246	OrExpression	"SUB_OVERFLOWS ( bx , points [ 2 ] . x , points [ 1 ] . x ) || SUB_OVERFLOWS ( by , points [ 2 ] . y , points [ 1 ] . y )"		1294836	1		||			
ANR	1295247	CallExpression	"SUB_OVERFLOWS ( bx , points [ 2 ] . x , points [ 1 ] . x )"		1294836	0					
ANR	1295248	Callee	SUB_OVERFLOWS		1294836	0					
ANR	1295249	Identifier	SUB_OVERFLOWS		1294836	0					
ANR	1295250	ArgumentList	bx		1294836	1					
ANR	1295251	Argument	bx		1294836	0					
ANR	1295252	Identifier	bx		1294836	0					
ANR	1295253	Argument	points [ 2 ] . x		1294836	1					
ANR	1295254	MemberAccess	points [ 2 ] . x		1294836	0					
ANR	1295255	ArrayIndexing	points [ 2 ]		1294836	0					
ANR	1295256	Identifier	points		1294836	0					
ANR	1295257	PrimaryExpression	2		1294836	1					
ANR	1295258	Identifier	x		1294836	1					
ANR	1295259	Argument	points [ 1 ] . x		1294836	2					
ANR	1295260	MemberAccess	points [ 1 ] . x		1294836	0					
ANR	1295261	ArrayIndexing	points [ 1 ]		1294836	0					
ANR	1295262	Identifier	points		1294836	0					
ANR	1295263	PrimaryExpression	1		1294836	1					
ANR	1295264	Identifier	x		1294836	1					
ANR	1295265	CallExpression	"SUB_OVERFLOWS ( by , points [ 2 ] . y , points [ 1 ] . y )"		1294836	1					
ANR	1295266	Callee	SUB_OVERFLOWS		1294836	0					
ANR	1295267	Identifier	SUB_OVERFLOWS		1294836	0					
ANR	1295268	ArgumentList	by		1294836	1					
ANR	1295269	Argument	by		1294836	0					
ANR	1295270	Identifier	by		1294836	0					
ANR	1295271	Argument	points [ 2 ] . y		1294836	1					
ANR	1295272	MemberAccess	points [ 2 ] . y		1294836	0					
ANR	1295273	ArrayIndexing	points [ 2 ]		1294836	0					
ANR	1295274	Identifier	points		1294836	0					
ANR	1295275	PrimaryExpression	2		1294836	1					
ANR	1295276	Identifier	y		1294836	1					
ANR	1295277	Argument	points [ 1 ] . y		1294836	2					
ANR	1295278	MemberAccess	points [ 1 ] . y		1294836	0					
ANR	1295279	ArrayIndexing	points [ 1 ]		1294836	0					
ANR	1295280	Identifier	points		1294836	0					
ANR	1295281	PrimaryExpression	1		1294836	1					
ANR	1295282	Identifier	y		1294836	1					
ANR	1295283	GotoStatement	goto general ;	1474:16:62961:62973	1294836	1	True				
ANR	1295284	Identifier	general		1294836	0					
ANR	1295285	Statement	undef	1475:1:62976:62980	1294836	39	True				
ANR	1295286	Statement	SUB_OVERFLOWS	1475:7:62982:62994	1294836	40	True				
ANR	1295287	IfStatement	if ( nplp != 0 )		1294836	41					
ANR	1295288	Condition	nplp != 0	1476:16:63012:63020	1294836	0	True				
ANR	1295289	EqualityExpression	nplp != 0		1294836	0		!=			
ANR	1295290	Identifier	nplp		1294836	0					
ANR	1295291	PrimaryExpression	0		1294836	1					
ANR	1295292	CompoundStatement		57:27:2502:2502	1294836	1					
ANR	1295293	IfStatement	if ( join == gs_join_miter )		1294836	0					
ANR	1295294	Condition	join == gs_join_miter	1477:20:63045:63065	1294836	0	True				
ANR	1295295	EqualityExpression	join == gs_join_miter		1294836	0		==			
ANR	1295296	Identifier	join		1294836	0					
ANR	1295297	Identifier	gs_join_miter		1294836	1					
ANR	1295298	CompoundStatement		58:43:2547:2547	1294836	1					
ANR	1295299	IfStatement	if ( ! ( points [ 2 ] . x == plp -> e . co . x && points [ 2 ] . y == plp -> e . co . y && points [ 5 ] . x == plp -> e . ce . x && points [ 5 ] . y == plp -> e . ce . y ) )		1294836	0					
ANR	1295300	Condition	! ( points [ 2 ] . x == plp -> e . co . x && points [ 2 ] . y == plp -> e . co . y && points [ 5 ] . x == plp -> e . ce . x && points [ 5 ] . y == plp -> e . ce . y )	1479:24:63163:63359	1294836	0	True				
ANR	1295301	UnaryOperationExpression	! ( points [ 2 ] . x == plp -> e . co . x && points [ 2 ] . y == plp -> e . co . y && points [ 5 ] . x == plp -> e . ce . x && points [ 5 ] . y == plp -> e . ce . y )		1294836	0					
ANR	1295302	UnaryOperator	!		1294836	0					
ANR	1295303	AndExpression	points [ 2 ] . x == plp -> e . co . x && points [ 2 ] . y == plp -> e . co . y && points [ 5 ] . x == plp -> e . ce . x && points [ 5 ] . y == plp -> e . ce . y		1294836	1		&&			
ANR	1295304	EqualityExpression	points [ 2 ] . x == plp -> e . co . x		1294836	0		==			
ANR	1295305	MemberAccess	points [ 2 ] . x		1294836	0					
ANR	1295306	ArrayIndexing	points [ 2 ]		1294836	0					
ANR	1295307	Identifier	points		1294836	0					
ANR	1295308	PrimaryExpression	2		1294836	1					
ANR	1295309	Identifier	x		1294836	1					
ANR	1295310	MemberAccess	plp -> e . co . x		1294836	1					
ANR	1295311	MemberAccess	plp -> e . co		1294836	0					
ANR	1295312	PtrMemberAccess	plp -> e		1294836	0					
ANR	1295313	Identifier	plp		1294836	0					
ANR	1295314	Identifier	e		1294836	1					
ANR	1295315	Identifier	co		1294836	1					
ANR	1295316	Identifier	x		1294836	1					
ANR	1295317	AndExpression	points [ 2 ] . y == plp -> e . co . y && points [ 5 ] . x == plp -> e . ce . x && points [ 5 ] . y == plp -> e . ce . y		1294836	1		&&			
ANR	1295318	EqualityExpression	points [ 2 ] . y == plp -> e . co . y		1294836	0		==			
ANR	1295319	MemberAccess	points [ 2 ] . y		1294836	0					
ANR	1295320	ArrayIndexing	points [ 2 ]		1294836	0					
ANR	1295321	Identifier	points		1294836	0					
ANR	1295322	PrimaryExpression	2		1294836	1					
ANR	1295323	Identifier	y		1294836	1					
ANR	1295324	MemberAccess	plp -> e . co . y		1294836	1					
ANR	1295325	MemberAccess	plp -> e . co		1294836	0					
ANR	1295326	PtrMemberAccess	plp -> e		1294836	0					
ANR	1295327	Identifier	plp		1294836	0					
ANR	1295328	Identifier	e		1294836	1					
ANR	1295329	Identifier	co		1294836	1					
ANR	1295330	Identifier	y		1294836	1					
ANR	1295331	AndExpression	points [ 5 ] . x == plp -> e . ce . x && points [ 5 ] . y == plp -> e . ce . y		1294836	1		&&			
ANR	1295332	EqualityExpression	points [ 5 ] . x == plp -> e . ce . x		1294836	0		==			
ANR	1295333	MemberAccess	points [ 5 ] . x		1294836	0					
ANR	1295334	ArrayIndexing	points [ 5 ]		1294836	0					
ANR	1295335	Identifier	points		1294836	0					
ANR	1295336	PrimaryExpression	5		1294836	1					
ANR	1295337	Identifier	x		1294836	1					
ANR	1295338	MemberAccess	plp -> e . ce . x		1294836	1					
ANR	1295339	MemberAccess	plp -> e . ce		1294836	0					
ANR	1295340	PtrMemberAccess	plp -> e		1294836	0					
ANR	1295341	Identifier	plp		1294836	0					
ANR	1295342	Identifier	e		1294836	1					
ANR	1295343	Identifier	ce		1294836	1					
ANR	1295344	Identifier	x		1294836	1					
ANR	1295345	EqualityExpression	points [ 5 ] . y == plp -> e . ce . y		1294836	1		==			
ANR	1295346	MemberAccess	points [ 5 ] . y		1294836	0					
ANR	1295347	ArrayIndexing	points [ 5 ]		1294836	0					
ANR	1295348	Identifier	points		1294836	0					
ANR	1295349	PrimaryExpression	5		1294836	1					
ANR	1295350	Identifier	y		1294836	1					
ANR	1295351	MemberAccess	plp -> e . ce . y		1294836	1					
ANR	1295352	MemberAccess	plp -> e . ce		1294836	0					
ANR	1295353	PtrMemberAccess	plp -> e		1294836	0					
ANR	1295354	Identifier	plp		1294836	0					
ANR	1295355	Identifier	e		1294836	1					
ANR	1295356	Identifier	ce		1294836	1					
ANR	1295357	Identifier	y		1294836	1					
ANR	1295358	GotoStatement	goto fill ;	1484:24:63411:63420	1294836	1	True				
ANR	1295359	Identifier	fill		1294836	0					
ANR	1295360	CompoundStatement		67:20:2941:2981	1294836	1					
ANR	1295361	IdentifierDeclStatement	const gs_fixed_point * bevel = points + 2 ;	1486:20:63462:63502	1294836	0	True				
ANR	1295362	IdentifierDecl	* bevel = points + 2		1294836	0					
ANR	1295363	IdentifierDeclType	const gs_fixed_point *		1294836	0					
ANR	1295364	Identifier	bevel		1294836	1					
ANR	1295365	AssignmentExpression	* bevel = points + 2		1294836	2		=			
ANR	1295366	Identifier	bevel		1294836	0					
ANR	1295367	AdditiveExpression	points + 2		1294836	1		+			
ANR	1295368	Identifier	points		1294836	0					
ANR	1295369	PrimaryExpression	2		1294836	1					
ANR	1295370	IfStatement	if ( points [ 3 ] . x == nplp -> o . p . x && points [ 3 ] . y == nplp -> o . p . y )		1294836	1					
ANR	1295371	Condition	points [ 3 ] . x == nplp -> o . p . x && points [ 3 ] . y == nplp -> o . p . y	1489:24:63606:63685	1294836	0	True				
ANR	1295372	AndExpression	points [ 3 ] . x == nplp -> o . p . x && points [ 3 ] . y == nplp -> o . p . y		1294836	0		&&			
ANR	1295373	EqualityExpression	points [ 3 ] . x == nplp -> o . p . x		1294836	0		==			
ANR	1295374	MemberAccess	points [ 3 ] . x		1294836	0					
ANR	1295375	ArrayIndexing	points [ 3 ]		1294836	0					
ANR	1295376	Identifier	points		1294836	0					
ANR	1295377	PrimaryExpression	3		1294836	1					
ANR	1295378	Identifier	x		1294836	1					
ANR	1295379	MemberAccess	nplp -> o . p . x		1294836	1					
ANR	1295380	MemberAccess	nplp -> o . p		1294836	0					
ANR	1295381	PtrMemberAccess	nplp -> o		1294836	0					
ANR	1295382	Identifier	nplp		1294836	0					
ANR	1295383	Identifier	o		1294836	1					
ANR	1295384	Identifier	p		1294836	1					
ANR	1295385	Identifier	x		1294836	1					
ANR	1295386	EqualityExpression	points [ 3 ] . y == nplp -> o . p . y		1294836	1		==			
ANR	1295387	MemberAccess	points [ 3 ] . y		1294836	0					
ANR	1295388	ArrayIndexing	points [ 3 ]		1294836	0					
ANR	1295389	Identifier	points		1294836	0					
ANR	1295390	PrimaryExpression	3		1294836	1					
ANR	1295391	Identifier	y		1294836	1					
ANR	1295392	MemberAccess	nplp -> o . p . y		1294836	1					
ANR	1295393	MemberAccess	nplp -> o . p		1294836	0					
ANR	1295394	PtrMemberAccess	nplp -> o		1294836	0					
ANR	1295395	Identifier	nplp		1294836	0					
ANR	1295396	Identifier	o		1294836	1					
ANR	1295397	Identifier	p		1294836	1					
ANR	1295398	Identifier	y		1294836	1					
ANR	1295399	ExpressionStatement	++ bevel	1492:24:63737:63744	1294836	1	True				
ANR	1295400	UnaryExpression	++ bevel		1294836	0					
ANR	1295401	IncDec	++		1294836	0					
ANR	1295402	Identifier	bevel		1294836	1					
ANR	1295403	ExpressionStatement	"code = ( * dev_proc ( dev , fill_triangle ) ) ( dev , bevel -> x , bevel -> y , bevel [ 1 ] . x - bevel -> x , bevel [ 1 ] . y - bevel -> y , bevel [ 2 ] . x - bevel -> x , bevel [ 2 ] . y - bevel -> y , pdevc , pgs -> log_op )"	1494:20:63808:64159	1294836	2	True				
ANR	1295404	AssignmentExpression	"code = ( * dev_proc ( dev , fill_triangle ) ) ( dev , bevel -> x , bevel -> y , bevel [ 1 ] . x - bevel -> x , bevel [ 1 ] . y - bevel -> y , bevel [ 2 ] . x - bevel -> x , bevel [ 2 ] . y - bevel -> y , pdevc , pgs -> log_op )"		1294836	0		=			
ANR	1295405	Identifier	code		1294836	0					
ANR	1295406	CallExpression	"( * dev_proc ( dev , fill_triangle ) ) ( dev , bevel -> x , bevel -> y , bevel [ 1 ] . x - bevel -> x , bevel [ 1 ] . y - bevel -> y , bevel [ 2 ] . x - bevel -> x , bevel [ 2 ] . y - bevel -> y , pdevc , pgs -> log_op )"		1294836	1					
ANR	1295407	Callee	"* dev_proc ( dev , fill_triangle )"		1294836	0					
ANR	1295408	UnaryOperationExpression	"* dev_proc ( dev , fill_triangle )"		1294836	0					
ANR	1295409	UnaryOperator	*		1294836	0					
ANR	1295410	CallExpression	"dev_proc ( dev , fill_triangle )"		1294836	1					
ANR	1295411	Callee	dev_proc		1294836	0					
ANR	1295412	Identifier	dev_proc		1294836	0					
ANR	1295413	ArgumentList	dev		1294836	1					
ANR	1295414	Argument	dev		1294836	0					
ANR	1295415	Identifier	dev		1294836	0					
ANR	1295416	Argument	fill_triangle		1294836	1					
ANR	1295417	Identifier	fill_triangle		1294836	0					
ANR	1295418	ArgumentList	dev		1294836	1					
ANR	1295419	Argument	dev		1294836	0					
ANR	1295420	Identifier	dev		1294836	0					
ANR	1295421	Argument	bevel -> x		1294836	1					
ANR	1295422	PtrMemberAccess	bevel -> x		1294836	0					
ANR	1295423	Identifier	bevel		1294836	0					
ANR	1295424	Identifier	x		1294836	1					
ANR	1295425	Argument	bevel -> y		1294836	2					
ANR	1295426	PtrMemberAccess	bevel -> y		1294836	0					
ANR	1295427	Identifier	bevel		1294836	0					
ANR	1295428	Identifier	y		1294836	1					
ANR	1295429	Argument	bevel [ 1 ] . x - bevel -> x		1294836	3					
ANR	1295430	AdditiveExpression	bevel [ 1 ] . x - bevel -> x		1294836	0		-			
ANR	1295431	MemberAccess	bevel [ 1 ] . x		1294836	0					
ANR	1295432	ArrayIndexing	bevel [ 1 ]		1294836	0					
ANR	1295433	Identifier	bevel		1294836	0					
ANR	1295434	PrimaryExpression	1		1294836	1					
ANR	1295435	Identifier	x		1294836	1					
ANR	1295436	PtrMemberAccess	bevel -> x		1294836	1					
ANR	1295437	Identifier	bevel		1294836	0					
ANR	1295438	Identifier	x		1294836	1					
ANR	1295439	Argument	bevel [ 1 ] . y - bevel -> y		1294836	4					
ANR	1295440	AdditiveExpression	bevel [ 1 ] . y - bevel -> y		1294836	0		-			
ANR	1295441	MemberAccess	bevel [ 1 ] . y		1294836	0					
ANR	1295442	ArrayIndexing	bevel [ 1 ]		1294836	0					
ANR	1295443	Identifier	bevel		1294836	0					
ANR	1295444	PrimaryExpression	1		1294836	1					
ANR	1295445	Identifier	y		1294836	1					
ANR	1295446	PtrMemberAccess	bevel -> y		1294836	1					
ANR	1295447	Identifier	bevel		1294836	0					
ANR	1295448	Identifier	y		1294836	1					
ANR	1295449	Argument	bevel [ 2 ] . x - bevel -> x		1294836	5					
ANR	1295450	AdditiveExpression	bevel [ 2 ] . x - bevel -> x		1294836	0		-			
ANR	1295451	MemberAccess	bevel [ 2 ] . x		1294836	0					
ANR	1295452	ArrayIndexing	bevel [ 2 ]		1294836	0					
ANR	1295453	Identifier	bevel		1294836	0					
ANR	1295454	PrimaryExpression	2		1294836	1					
ANR	1295455	Identifier	x		1294836	1					
ANR	1295456	PtrMemberAccess	bevel -> x		1294836	1					
ANR	1295457	Identifier	bevel		1294836	0					
ANR	1295458	Identifier	x		1294836	1					
ANR	1295459	Argument	bevel [ 2 ] . y - bevel -> y		1294836	6					
ANR	1295460	AdditiveExpression	bevel [ 2 ] . y - bevel -> y		1294836	0		-			
ANR	1295461	MemberAccess	bevel [ 2 ] . y		1294836	0					
ANR	1295462	ArrayIndexing	bevel [ 2 ]		1294836	0					
ANR	1295463	Identifier	bevel		1294836	0					
ANR	1295464	PrimaryExpression	2		1294836	1					
ANR	1295465	Identifier	y		1294836	1					
ANR	1295466	PtrMemberAccess	bevel -> y		1294836	1					
ANR	1295467	Identifier	bevel		1294836	0					
ANR	1295468	Identifier	y		1294836	1					
ANR	1295469	Argument	pdevc		1294836	7					
ANR	1295470	Identifier	pdevc		1294836	0					
ANR	1295471	Argument	pgs -> log_op		1294836	8					
ANR	1295472	PtrMemberAccess	pgs -> log_op		1294836	0					
ANR	1295473	Identifier	pgs		1294836	0					
ANR	1295474	Identifier	log_op		1294836	1					
ANR	1295475	IfStatement	if ( code < 0 )		1294836	3					
ANR	1295476	Condition	code < 0	1499:24:64185:64192	1294836	0	True				
ANR	1295477	RelationalExpression	code < 0		1294836	0		<			
ANR	1295478	Identifier	code		1294836	0					
ANR	1295479	PrimaryExpression	0		1294836	1					
ANR	1295480	ReturnStatement	return code ;	1500:24:64219:64230	1294836	1	True				
ANR	1295481	Identifier	code		1294836	0					
ANR	1295482	ReturnStatement	"return ( * dev_proc ( dev , fill_parallelogram ) ) ( dev , points [ 1 ] . x , points [ 1 ] . y , ax , ay , bx , by , pdevc , pgs -> log_op ) ;"	1504:12:64323:64599	1294836	42	True				
ANR	1295483	CallExpression	"( * dev_proc ( dev , fill_parallelogram ) ) ( dev , points [ 1 ] . x , points [ 1 ] . y , ax , ay , bx , by , pdevc , pgs -> log_op )"		1294836	0					
ANR	1295484	Callee	"* dev_proc ( dev , fill_parallelogram )"		1294836	0					
ANR	1295485	UnaryOperationExpression	"* dev_proc ( dev , fill_parallelogram )"		1294836	0					
ANR	1295486	UnaryOperator	*		1294836	0					
ANR	1295487	CallExpression	"dev_proc ( dev , fill_parallelogram )"		1294836	1					
ANR	1295488	Callee	dev_proc		1294836	0					
ANR	1295489	Identifier	dev_proc		1294836	0					
ANR	1295490	ArgumentList	dev		1294836	1					
ANR	1295491	Argument	dev		1294836	0					
ANR	1295492	Identifier	dev		1294836	0					
ANR	1295493	Argument	fill_parallelogram		1294836	1					
ANR	1295494	Identifier	fill_parallelogram		1294836	0					
ANR	1295495	ArgumentList	dev		1294836	1					
ANR	1295496	Argument	dev		1294836	0					
ANR	1295497	Identifier	dev		1294836	0					
ANR	1295498	Argument	points [ 1 ] . x		1294836	1					
ANR	1295499	MemberAccess	points [ 1 ] . x		1294836	0					
ANR	1295500	ArrayIndexing	points [ 1 ]		1294836	0					
ANR	1295501	Identifier	points		1294836	0					
ANR	1295502	PrimaryExpression	1		1294836	1					
ANR	1295503	Identifier	x		1294836	1					
ANR	1295504	Argument	points [ 1 ] . y		1294836	2					
ANR	1295505	MemberAccess	points [ 1 ] . y		1294836	0					
ANR	1295506	ArrayIndexing	points [ 1 ]		1294836	0					
ANR	1295507	Identifier	points		1294836	0					
ANR	1295508	PrimaryExpression	1		1294836	1					
ANR	1295509	Identifier	y		1294836	1					
ANR	1295510	Argument	ax		1294836	3					
ANR	1295511	Identifier	ax		1294836	0					
ANR	1295512	Argument	ay		1294836	4					
ANR	1295513	Identifier	ay		1294836	0					
ANR	1295514	Argument	bx		1294836	5					
ANR	1295515	Identifier	bx		1294836	0					
ANR	1295516	Argument	by		1294836	6					
ANR	1295517	Identifier	by		1294836	0					
ANR	1295518	Argument	pdevc		1294836	7					
ANR	1295519	Identifier	pdevc		1294836	0					
ANR	1295520	Argument	pgs -> log_op		1294836	8					
ANR	1295521	PtrMemberAccess	pgs -> log_op		1294836	0					
ANR	1295522	Identifier	pgs		1294836	0					
ANR	1295523	Identifier	log_op		1294836	1					
ANR	1295524	Label	fill :	1508:10:64611:64615	1294836	43	True				
ANR	1295525	Identifier	fill		1294836	0					
ANR	1295526	ExpressionStatement	"code = add_points ( ppath , points , npoints + code , true )"	1509:12:64629:64683	1294836	44	True				
ANR	1295527	AssignmentExpression	"code = add_points ( ppath , points , npoints + code , true )"		1294836	0		=			
ANR	1295528	Identifier	code		1294836	0					
ANR	1295529	CallExpression	"add_points ( ppath , points , npoints + code , true )"		1294836	1					
ANR	1295530	Callee	add_points		1294836	0					
ANR	1295531	Identifier	add_points		1294836	0					
ANR	1295532	ArgumentList	ppath		1294836	1					
ANR	1295533	Argument	ppath		1294836	0					
ANR	1295534	Identifier	ppath		1294836	0					
ANR	1295535	Argument	points		1294836	1					
ANR	1295536	Identifier	points		1294836	0					
ANR	1295537	Argument	npoints + code		1294836	2					
ANR	1295538	AdditiveExpression	npoints + code		1294836	0		+			
ANR	1295539	Identifier	npoints		1294836	0					
ANR	1295540	Identifier	code		1294836	1					
ANR	1295541	Argument	true		1294836	3					
ANR	1295542	Identifier	true		1294836	0					
ANR	1295543	IfStatement	if ( code < 0 )		1294836	45					
ANR	1295544	Condition	code < 0	1510:16:64701:64708	1294836	0	True				
ANR	1295545	RelationalExpression	code < 0		1294836	0		<			
ANR	1295546	Identifier	code		1294836	0					
ANR	1295547	PrimaryExpression	0		1294836	1					
ANR	1295548	ReturnStatement	return code ;	1511:16:64727:64738	1294836	1	True				
ANR	1295549	Identifier	code		1294836	0					
ANR	1295550	ReturnStatement	return gx_path_close_subpath ( ppath ) ;	1512:12:64752:64787	1294836	46	True				
ANR	1295551	CallExpression	gx_path_close_subpath ( ppath )		1294836	0					
ANR	1295552	Callee	gx_path_close_subpath		1294836	0					
ANR	1295553	Identifier	gx_path_close_subpath		1294836	0					
ANR	1295554	ArgumentList	ppath		1294836	1					
ANR	1295555	Argument	ppath		1294836	0					
ANR	1295556	Identifier	ppath		1294836	0					
ANR	1295557	Label	general :	1516:1:64871:64878	1294836	6	True				
ANR	1295558	Identifier	general		1294836	0					
ANR	1295559	ReturnStatement	"return stroke_add ( ppath , rpath , ensure_closed , first , plp , nplp , pdevc , dev , pgs , params , pbbox , uniform , join , reflected , flags ) ;"	1517:4:64884:65057	1294836	7	True				
ANR	1295560	CallExpression	"stroke_add ( ppath , rpath , ensure_closed , first , plp , nplp , pdevc , dev , pgs , params , pbbox , uniform , join , reflected , flags )"		1294836	0					
ANR	1295561	Callee	stroke_add		1294836	0					
ANR	1295562	Identifier	stroke_add		1294836	0					
ANR	1295563	ArgumentList	ppath		1294836	1					
ANR	1295564	Argument	ppath		1294836	0					
ANR	1295565	Identifier	ppath		1294836	0					
ANR	1295566	Argument	rpath		1294836	1					
ANR	1295567	Identifier	rpath		1294836	0					
ANR	1295568	Argument	ensure_closed		1294836	2					
ANR	1295569	Identifier	ensure_closed		1294836	0					
ANR	1295570	Argument	first		1294836	3					
ANR	1295571	Identifier	first		1294836	0					
ANR	1295572	Argument	plp		1294836	4					
ANR	1295573	Identifier	plp		1294836	0					
ANR	1295574	Argument	nplp		1294836	5					
ANR	1295575	Identifier	nplp		1294836	0					
ANR	1295576	Argument	pdevc		1294836	6					
ANR	1295577	Identifier	pdevc		1294836	0					
ANR	1295578	Argument	dev		1294836	7					
ANR	1295579	Identifier	dev		1294836	0					
ANR	1295580	Argument	pgs		1294836	8					
ANR	1295581	Identifier	pgs		1294836	0					
ANR	1295582	Argument	params		1294836	9					
ANR	1295583	Identifier	params		1294836	0					
ANR	1295584	Argument	pbbox		1294836	10					
ANR	1295585	Identifier	pbbox		1294836	0					
ANR	1295586	Argument	uniform		1294836	11					
ANR	1295587	Identifier	uniform		1294836	0					
ANR	1295588	Argument	join		1294836	12					
ANR	1295589	Identifier	join		1294836	0					
ANR	1295590	Argument	reflected		1294836	13					
ANR	1295591	Identifier	reflected		1294836	0					
ANR	1295592	Argument	flags		1294836	14					
ANR	1295593	Identifier	flags		1294836	0					
ANR	1295594	ReturnType	static int		1294836	1					
ANR	1295595	Identifier	stroke_fill		1294836	2					
ANR	1295596	ParameterList	"gx_path * ppath , gx_path * rpath , bool ensure_closed , int first , register pl_ptr plp , pl_ptr nplp , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs , const gx_stroke_params * params , const gs_fixed_rect * pbbox , int uniform , gs_line_join join , bool reflected , note_flags flags"		1294836	3					
ANR	1295597	Parameter	gx_path * ppath	1414:12:60162:60176	1294836	0	True				
ANR	1295598	ParameterType	gx_path *		1294836	0					
ANR	1295599	Identifier	ppath		1294836	1					
ANR	1295600	Parameter	gx_path * rpath	1414:29:60179:60193	1294836	1	True				
ANR	1295601	ParameterType	gx_path *		1294836	0					
ANR	1295602	Identifier	rpath		1294836	1					
ANR	1295603	Parameter	bool ensure_closed	1414:46:60196:60213	1294836	2	True				
ANR	1295604	ParameterType	bool		1294836	0					
ANR	1295605	Identifier	ensure_closed		1294836	1					
ANR	1295606	Parameter	int first	1414:66:60216:60224	1294836	3	True				
ANR	1295607	ParameterType	int		1294836	0					
ANR	1295608	Identifier	first		1294836	1					
ANR	1295609	Parameter	register pl_ptr plp	1415:12:60239:60257	1294836	4	True				
ANR	1295610	ParameterType	register pl_ptr		1294836	0					
ANR	1295611	Identifier	plp		1294836	1					
ANR	1295612	Parameter	pl_ptr nplp	1415:33:60260:60270	1294836	5	True				
ANR	1295613	ParameterType	pl_ptr		1294836	0					
ANR	1295614	Identifier	nplp		1294836	1					
ANR	1295615	Parameter	const gx_device_color * pdevc	1415:46:60273:60301	1294836	6	True				
ANR	1295616	ParameterType	const gx_device_color *		1294836	0					
ANR	1295617	Identifier	pdevc		1294836	1					
ANR	1295618	Parameter	gx_device * dev	1416:12:60316:60330	1294836	7	True				
ANR	1295619	ParameterType	gx_device *		1294836	0					
ANR	1295620	Identifier	dev		1294836	1					
ANR	1295621	Parameter	const gs_gstate * pgs	1416:29:60333:60353	1294836	8	True				
ANR	1295622	ParameterType	const gs_gstate *		1294836	0					
ANR	1295623	Identifier	pgs		1294836	1					
ANR	1295624	Parameter	const gx_stroke_params * params	1417:12:60368:60398	1294836	9	True				
ANR	1295625	ParameterType	const gx_stroke_params *		1294836	0					
ANR	1295626	Identifier	params		1294836	1					
ANR	1295627	Parameter	const gs_fixed_rect * pbbox	1417:45:60401:60427	1294836	10	True				
ANR	1295628	ParameterType	const gs_fixed_rect *		1294836	0					
ANR	1295629	Identifier	pbbox		1294836	1					
ANR	1295630	Parameter	int uniform	1418:12:60442:60452	1294836	11	True				
ANR	1295631	ParameterType	int		1294836	0					
ANR	1295632	Identifier	uniform		1294836	1					
ANR	1295633	Parameter	gs_line_join join	1418:25:60455:60471	1294836	12	True				
ANR	1295634	ParameterType	gs_line_join		1294836	0					
ANR	1295635	Identifier	join		1294836	1					
ANR	1295636	Parameter	bool reflected	1418:44:60474:60487	1294836	13	True				
ANR	1295637	ParameterType	bool		1294836	0					
ANR	1295638	Identifier	reflected		1294836	1					
ANR	1295639	Parameter	note_flags flags	1419:12:60502:60517	1294836	14	True				
ANR	1295640	ParameterType	note_flags		1294836	0					
ANR	1295641	Identifier	flags		1294836	1					
ANR	1295642	CFGEntryNode	ENTRY		1294836		True				
ANR	1295643	CFGExitNode	EXIT		1294836		True				
ANR	1295644	Symbol	"* dev_proc ( dev , fill_triangle )"		1294836						
ANR	1295645	Symbol	gs_cap_square		1294836						
ANR	1295646	Symbol	* pgs		1294836						
ANR	1295647	Symbol	nplp -> o . p . x		1294836						
ANR	1295648	Symbol	pdevc		1294836						
ANR	1295649	Symbol	nplp -> o . p . y		1294836						
ANR	1295650	Symbol	reflected		1294836						
ANR	1295651	Symbol	& plp -> e		1294836						
ANR	1295652	Symbol	nf_dash_tail		1294836						
ANR	1295653	Symbol	dev		1294836						
ANR	1295654	Symbol	points [ 3 ] . y		1294836						
ANR	1295655	Symbol	points [ 3 ] . x		1294836						
ANR	1295656	Symbol	join		1294836						
ANR	1295657	Symbol	points [ 0 ] . y		1294836						
ANR	1295658	Symbol	points [ 0 ] . x		1294836						
ANR	1295659	Symbol	add_points		1294836						
ANR	1295660	Symbol	plp -> thin		1294836						
ANR	1295661	Symbol	gs_join_bevel		1294836						
ANR	1295662	Symbol	params		1294836						
ANR	1295663	Symbol	fill_parallelogram		1294836						
ANR	1295664	Symbol	plp -> e . p		1294836						
ANR	1295665	Symbol	& plp -> o		1294836						
ANR	1295666	Symbol	pgs_lp -> end_cap		1294836						
ANR	1295667	Symbol	ax		1294836						
ANR	1295668	Symbol	pgs -> fill_adjust . y		1294836						
ANR	1295669	Symbol	ay		1294836						
ANR	1295670	Symbol	pgs -> fill_adjust . x		1294836						
ANR	1295671	Symbol	cap_points		1294836						
ANR	1295672	Symbol	* pgs_lp		1294836						
ANR	1295673	Symbol	* dev_proc		1294836						
ANR	1295674	Symbol	flags		1294836						
ANR	1295675	Symbol	points [ 2 ] . x		1294836						
ANR	1295676	Symbol	plp -> o . p		1294836						
ANR	1295677	Symbol	points [ 2 ] . y		1294836						
ANR	1295678	Symbol	bevel -> x		1294836						
ANR	1295679	Symbol	bevel -> y		1294836						
ANR	1295680	Symbol	uniform		1294836						
ANR	1295681	Symbol	end_cap		1294836						
ANR	1295682	Symbol	bx		1294836						
ANR	1295683	Symbol	by		1294836						
ANR	1295684	Symbol	SUB_OVERFLOWS		1294836						
ANR	1295685	Symbol	pgs		1294836						
ANR	1295686	Symbol	* nplp		1294836						
ANR	1295687	Symbol	line_join_points		1294836						
ANR	1295688	Symbol	gs_cap_butt		1294836						
ANR	1295689	Symbol	start_cap		1294836						
ANR	1295690	Symbol	pgs_lp -> start_cap		1294836						
ANR	1295691	Symbol	stroke_add		1294836						
ANR	1295692	Symbol	draw_thin_line		1294836						
ANR	1295693	Symbol	fill_triangle		1294836						
ANR	1295694	Symbol	first		1294836						
ANR	1295695	Symbol	npoints		1294836						
ANR	1295696	Symbol	"* dev_proc ( dev , fill_parallelogram )"		1294836						
ANR	1295697	Symbol	points		1294836						
ANR	1295698	Symbol	plp -> e . co . y		1294836						
ANR	1295699	Symbol	plp -> e . co . x		1294836						
ANR	1295700	Symbol	plp -> e . co		1294836						
ANR	1295701	Symbol	gs_currentlineparams_inline		1294836						
ANR	1295702	Symbol	plp -> e . ce		1294836						
ANR	1295703	Symbol	lix		1294836						
ANR	1295704	Symbol	gs_join_none		1294836						
ANR	1295705	Symbol	liy		1294836						
ANR	1295706	Symbol	* plp		1294836						
ANR	1295707	Symbol	ensure_closed		1294836						
ANR	1295708	Symbol	points [ 1 ] . y		1294836						
ANR	1295709	Symbol	points [ 1 ] . x		1294836						
ANR	1295710	Symbol	plp -> o . p . y		1294836						
ANR	1295711	Symbol	plp -> o . p . x		1294836						
ANR	1295712	Symbol	nf_dash_head		1294836						
ANR	1295713	Symbol	bevel [ 2 ] . y		1294836						
ANR	1295714	Symbol	bevel [ 2 ] . x		1294836						
ANR	1295715	Symbol	pgs_lp		1294836						
ANR	1295716	Symbol	true		1294836						
ANR	1295717	Symbol	* points		1294836						
ANR	1295718	Symbol	pbbox		1294836						
ANR	1295719	Symbol	code		1294836						
ANR	1295720	Symbol	plp -> e . p . y		1294836						
ANR	1295721	Symbol	plp -> e . p . x		1294836						
ANR	1295722	Symbol	ppath		1294836						
ANR	1295723	Symbol	pgs_lp -> dash_cap		1294836						
ANR	1295724	Symbol	gx_path_close_subpath		1294836						
ANR	1295725	Symbol	dev_proc		1294836						
ANR	1295726	Symbol	points [ 5 ] . x		1294836						
ANR	1295727	Symbol	points [ 5 ] . y		1294836						
ANR	1295728	Symbol	nplp -> o		1294836						
ANR	1295729	Symbol	bevel [ 1 ] . y		1294836						
ANR	1295730	Symbol	bevel [ 1 ] . x		1294836						
ANR	1295731	Symbol	pgs -> log_op		1294836						
ANR	1295732	Symbol	litoy		1294836						
ANR	1295733	Symbol	litox		1294836						
ANR	1295734	Symbol	& ctm_only		1294836						
ANR	1295735	Symbol	"* dev_proc ( dev , draw_thin_line )"		1294836						
ANR	1295736	Symbol	rpath		1294836						
ANR	1295737	Symbol	gs_join_miter		1294836						
ANR	1295738	Symbol	bevel		1294836						
ANR	1295739	Symbol	pgs -> fill_adjust		1294836						
ANR	1295740	Symbol	* bevel		1294836						
ANR	1295741	Symbol	plp -> e . ce . x		1294836						
ANR	1295742	Symbol	plp -> e . ce . y		1294836						
ANR	1295743	Symbol	plp		1294836						
ANR	1295744	Symbol	nplp		1294836						
ANR	1295745	Symbol	nplp -> o . p		1294836						
ANR	1295746	Symbol	plp -> o		1294836						
ANR	1295747	Symbol	plp -> e		1294836						
ANR	1295748	Symbol	nplp -> thin		1294836						
ANR	1295749	Function	stroke_add	1523:0:65132:68586							
ANR	1295750	FunctionDef	"stroke_add (gx_path * ppath , gx_path * rpath , bool ensure_closed , int first , pl_ptr plp , pl_ptr nplp , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs , const gx_stroke_params * params , const gs_fixed_rect * ignore_pbbox , int uniform , gs_line_join join , bool reflected , note_flags flags)"		1295749	0					
ANR	1295751	CompoundStatement		1530:0:65505:68586	1295749	0					
ANR	1295752	IdentifierDeclStatement	const gx_line_params * pgs_lp = gs_currentlineparams_inline ( pgs ) ;	1531:4:65511:65574	1295749	0	True				
ANR	1295753	IdentifierDecl	* pgs_lp = gs_currentlineparams_inline ( pgs )		1295749	0					
ANR	1295754	IdentifierDeclType	const gx_line_params *		1295749	0					
ANR	1295755	Identifier	pgs_lp		1295749	1					
ANR	1295756	AssignmentExpression	* pgs_lp = gs_currentlineparams_inline ( pgs )		1295749	2		=			
ANR	1295757	Identifier	pgs_lp		1295749	0					
ANR	1295758	CallExpression	gs_currentlineparams_inline ( pgs )		1295749	1					
ANR	1295759	Callee	gs_currentlineparams_inline		1295749	0					
ANR	1295760	Identifier	gs_currentlineparams_inline		1295749	0					
ANR	1295761	ArgumentList	pgs		1295749	1					
ANR	1295762	Argument	pgs		1295749	0					
ANR	1295763	Identifier	pgs		1295749	0					
ANR	1295764	IdentifierDeclStatement	gs_fixed_point points [ 8 ] ;	1532:4:65580:65604	1295749	1	True				
ANR	1295765	IdentifierDecl	points [ 8 ]		1295749	0					
ANR	1295766	IdentifierDeclType	gs_fixed_point [ 8 ]		1295749	0					
ANR	1295767	Identifier	points		1295749	1					
ANR	1295768	PrimaryExpression	8		1295749	2					
ANR	1295769	IdentifierDeclStatement	int npoints ;	1533:4:65610:65621	1295749	2	True				
ANR	1295770	IdentifierDecl	npoints		1295749	0					
ANR	1295771	IdentifierDeclType	int		1295749	0					
ANR	1295772	Identifier	npoints		1295749	1					
ANR	1295773	IdentifierDeclStatement	int code ;	1534:4:65627:65635	1295749	3	True				
ANR	1295774	IdentifierDecl	code		1295749	0					
ANR	1295775	IdentifierDeclType	int		1295749	0					
ANR	1295776	Identifier	code		1295749	1					
ANR	1295777	IdentifierDeclStatement	bool moveto_first = true ;	1535:4:65641:65665	1295749	4	True				
ANR	1295778	IdentifierDecl	moveto_first = true		1295749	0					
ANR	1295779	IdentifierDeclType	bool		1295749	0					
ANR	1295780	Identifier	moveto_first		1295749	1					
ANR	1295781	AssignmentExpression	moveto_first = true		1295749	2		=			
ANR	1295782	Identifier	true		1295749	0					
ANR	1295783	Identifier	true		1295749	1					
ANR	1295784	IdentifierDeclStatement	gs_line_cap start_cap = ( flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap ) ;	1536:4:65671:65785	1295749	5	True				
ANR	1295785	IdentifierDecl	start_cap = ( flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap )		1295749	0					
ANR	1295786	IdentifierDeclType	gs_line_cap		1295749	0					
ANR	1295787	Identifier	start_cap		1295749	1					
ANR	1295788	AssignmentExpression	start_cap = ( flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap )		1295749	2		=			
ANR	1295789	Identifier	start_cap		1295749	0					
ANR	1295790	ConditionalExpression	flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap		1295749	1					
ANR	1295791	Condition	flags & nf_dash_head		1295749	0					
ANR	1295792	BitAndExpression	flags & nf_dash_head		1295749	0		&			
ANR	1295793	Identifier	flags		1295749	0					
ANR	1295794	Identifier	nf_dash_head		1295749	1					
ANR	1295795	PtrMemberAccess	pgs_lp -> dash_cap		1295749	1					
ANR	1295796	Identifier	pgs_lp		1295749	0					
ANR	1295797	Identifier	dash_cap		1295749	1					
ANR	1295798	PtrMemberAccess	pgs_lp -> start_cap		1295749	2					
ANR	1295799	Identifier	pgs_lp		1295749	0					
ANR	1295800	Identifier	start_cap		1295749	1					
ANR	1295801	IdentifierDeclStatement	gs_line_cap end_cap = ( flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap ) ;	1538:4:65791:65903	1295749	6	True				
ANR	1295802	IdentifierDecl	end_cap = ( flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap )		1295749	0					
ANR	1295803	IdentifierDeclType	gs_line_cap		1295749	0					
ANR	1295804	Identifier	end_cap		1295749	1					
ANR	1295805	AssignmentExpression	end_cap = ( flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap )		1295749	2		=			
ANR	1295806	Identifier	end_cap		1295749	0					
ANR	1295807	ConditionalExpression	flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap		1295749	1					
ANR	1295808	Condition	flags & nf_dash_tail		1295749	0					
ANR	1295809	BitAndExpression	flags & nf_dash_tail		1295749	0		&			
ANR	1295810	Identifier	flags		1295749	0					
ANR	1295811	Identifier	nf_dash_tail		1295749	1					
ANR	1295812	PtrMemberAccess	pgs_lp -> dash_cap		1295749	1					
ANR	1295813	Identifier	pgs_lp		1295749	0					
ANR	1295814	Identifier	dash_cap		1295749	1					
ANR	1295815	PtrMemberAccess	pgs_lp -> end_cap		1295749	2					
ANR	1295816	Identifier	pgs_lp		1295749	0					
ANR	1295817	Identifier	end_cap		1295749	1					
ANR	1295818	IfStatement	if ( plp -> thin )		1295749	7					
ANR	1295819	Condition	plp -> thin	1541:8:65914:65922	1295749	0	True				
ANR	1295820	PtrMemberAccess	plp -> thin		1295749	0					
ANR	1295821	Identifier	plp		1295749	0					
ANR	1295822	Identifier	thin		1295749	1					
ANR	1295823	CompoundStatement		12:19:419:419	1295749	1					
ANR	1295824	ExpressionStatement	set_thin_widths ( plp )	1544:8:66051:66071	1295749	0	True				
ANR	1295825	CallExpression	set_thin_widths ( plp )		1295749	0					
ANR	1295826	Callee	set_thin_widths		1295749	0					
ANR	1295827	Identifier	set_thin_widths		1295749	0					
ANR	1295828	ArgumentList	plp		1295749	1					
ANR	1295829	Argument	plp		1295749	0					
ANR	1295830	Identifier	plp		1295749	0					
ANR	1295831	ExpressionStatement	"adjust_stroke ( dev , plp , pgs , true , first == 0 && nplp == 0 , flags )"	1545:8:66081:66147	1295749	1	True				
ANR	1295832	CallExpression	"adjust_stroke ( dev , plp , pgs , true , first == 0 && nplp == 0 , flags )"		1295749	0					
ANR	1295833	Callee	adjust_stroke		1295749	0					
ANR	1295834	Identifier	adjust_stroke		1295749	0					
ANR	1295835	ArgumentList	dev		1295749	1					
ANR	1295836	Argument	dev		1295749	0					
ANR	1295837	Identifier	dev		1295749	0					
ANR	1295838	Argument	plp		1295749	1					
ANR	1295839	Identifier	plp		1295749	0					
ANR	1295840	Argument	pgs		1295749	2					
ANR	1295841	Identifier	pgs		1295749	0					
ANR	1295842	Argument	true		1295749	3					
ANR	1295843	Identifier	true		1295749	0					
ANR	1295844	Argument	first == 0 && nplp == 0		1295749	4					
ANR	1295845	AndExpression	first == 0 && nplp == 0		1295749	0		&&			
ANR	1295846	EqualityExpression	first == 0		1295749	0		==			
ANR	1295847	Identifier	first		1295749	0					
ANR	1295848	PrimaryExpression	0		1295749	1					
ANR	1295849	EqualityExpression	nplp == 0		1295749	1		==			
ANR	1295850	Identifier	nplp		1295749	0					
ANR	1295851	PrimaryExpression	0		1295749	1					
ANR	1295852	Argument	flags		1295749	5					
ANR	1295853	Identifier	flags		1295749	0					
ANR	1295854	ExpressionStatement	compute_caps ( plp )	1546:8:66157:66174	1295749	2	True				
ANR	1295855	CallExpression	compute_caps ( plp )		1295749	0					
ANR	1295856	Callee	compute_caps		1295749	0					
ANR	1295857	Identifier	compute_caps		1295749	0					
ANR	1295858	ArgumentList	plp		1295749	1					
ANR	1295859	Argument	plp		1295749	0					
ANR	1295860	Identifier	plp		1295749	0					
ANR	1295861	IfStatement	if ( first == 0 && start_cap == gs_cap_round )		1295749	8					
ANR	1295862	Condition	first == 0 && start_cap == gs_cap_round	1549:8:66234:66272	1295749	0	True				
ANR	1295863	AndExpression	first == 0 && start_cap == gs_cap_round		1295749	0		&&			
ANR	1295864	EqualityExpression	first == 0		1295749	0		==			
ANR	1295865	Identifier	first		1295749	0					
ANR	1295866	PrimaryExpression	0		1295749	1					
ANR	1295867	EqualityExpression	start_cap == gs_cap_round		1295749	1		==			
ANR	1295868	Identifier	start_cap		1295749	0					
ANR	1295869	Identifier	gs_cap_round		1295749	1					
ANR	1295870	CompoundStatement		20:49:769:769	1295749	1					
ANR	1295871	IfStatement	"if ( ( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = add_pie_cap ( ppath , & plp -> o ) ) < 0 )"		1295749	0					
ANR	1295872	Condition	"( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = add_pie_cap ( ppath , & plp -> o ) ) < 0"	1550:12:66289:66407	1295749	0	True				
ANR	1295873	OrExpression	"( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = add_pie_cap ( ppath , & plp -> o ) ) < 0"		1295749	0		||			
ANR	1295874	RelationalExpression	"( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0"		1295749	0		<			
ANR	1295875	AssignmentExpression	"code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y )"		1295749	0		=			
ANR	1295876	Identifier	code		1295749	0					
ANR	1295877	CallExpression	"gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y )"		1295749	1					
ANR	1295878	Callee	gx_path_add_point		1295749	0					
ANR	1295879	Identifier	gx_path_add_point		1295749	0					
ANR	1295880	ArgumentList	ppath		1295749	1					
ANR	1295881	Argument	ppath		1295749	0					
ANR	1295882	Identifier	ppath		1295749	0					
ANR	1295883	Argument	plp -> o . co . x		1295749	1					
ANR	1295884	MemberAccess	plp -> o . co . x		1295749	0					
ANR	1295885	MemberAccess	plp -> o . co		1295749	0					
ANR	1295886	PtrMemberAccess	plp -> o		1295749	0					
ANR	1295887	Identifier	plp		1295749	0					
ANR	1295888	Identifier	o		1295749	1					
ANR	1295889	Identifier	co		1295749	1					
ANR	1295890	Identifier	x		1295749	1					
ANR	1295891	Argument	plp -> o . co . y		1295749	2					
ANR	1295892	MemberAccess	plp -> o . co . y		1295749	0					
ANR	1295893	MemberAccess	plp -> o . co		1295749	0					
ANR	1295894	PtrMemberAccess	plp -> o		1295749	0					
ANR	1295895	Identifier	plp		1295749	0					
ANR	1295896	Identifier	o		1295749	1					
ANR	1295897	Identifier	co		1295749	1					
ANR	1295898	Identifier	y		1295749	1					
ANR	1295899	PrimaryExpression	0		1295749	1					
ANR	1295900	RelationalExpression	"( code = add_pie_cap ( ppath , & plp -> o ) ) < 0"		1295749	1		<			
ANR	1295901	AssignmentExpression	"code = add_pie_cap ( ppath , & plp -> o )"		1295749	0		=			
ANR	1295902	Identifier	code		1295749	0					
ANR	1295903	CallExpression	"add_pie_cap ( ppath , & plp -> o )"		1295749	1					
ANR	1295904	Callee	add_pie_cap		1295749	0					
ANR	1295905	Identifier	add_pie_cap		1295749	0					
ANR	1295906	ArgumentList	ppath		1295749	1					
ANR	1295907	Argument	ppath		1295749	0					
ANR	1295908	Identifier	ppath		1295749	0					
ANR	1295909	Argument	& plp -> o		1295749	1					
ANR	1295910	UnaryOperationExpression	& plp -> o		1295749	0					
ANR	1295911	UnaryOperator	&		1295749	0					
ANR	1295912	PtrMemberAccess	plp -> o		1295749	1					
ANR	1295913	Identifier	plp		1295749	0					
ANR	1295914	Identifier	o		1295749	1					
ANR	1295915	PrimaryExpression	0		1295749	1					
ANR	1295916	ReturnStatement	return code ;	1552:12:66422:66433	1295749	1	True				
ANR	1295917	Identifier	code		1295749	0					
ANR	1295918	ExpressionStatement	npoints = 0	1553:8:66443:66454	1295749	1	True				
ANR	1295919	AssignmentExpression	npoints = 0		1295749	0		=			
ANR	1295920	Identifier	npoints		1295749	0					
ANR	1295921	PrimaryExpression	0		1295749	1					
ANR	1295922	ExpressionStatement	moveto_first = false	1554:8:66464:66484	1295749	2	True				
ANR	1295923	AssignmentExpression	moveto_first = false		1295749	0		=			
ANR	1295924	Identifier	moveto_first		1295749	0					
ANR	1295925	Identifier	false		1295749	1					
ANR	1295926	ElseStatement	else		1295749	0					
ANR	1295927	CompoundStatement		26:11:991:991	1295749	0					
ANR	1295928	IfStatement	"if ( ( npoints = cap_points ( ( first == 0 ? start_cap : gs_cap_butt ) , & plp -> o , points ) ) < 0 )"		1295749	0					
ANR	1295929	Condition	"( npoints = cap_points ( ( first == 0 ? start_cap : gs_cap_butt ) , & plp -> o , points ) ) < 0"	1556:12:66511:66627	1295749	0	True				
ANR	1295930	RelationalExpression	"( npoints = cap_points ( ( first == 0 ? start_cap : gs_cap_butt ) , & plp -> o , points ) ) < 0"		1295749	0		<			
ANR	1295931	AssignmentExpression	"npoints = cap_points ( ( first == 0 ? start_cap : gs_cap_butt ) , & plp -> o , points )"		1295749	0		=			
ANR	1295932	Identifier	npoints		1295749	0					
ANR	1295933	CallExpression	"cap_points ( ( first == 0 ? start_cap : gs_cap_butt ) , & plp -> o , points )"		1295749	1					
ANR	1295934	Callee	cap_points		1295749	0					
ANR	1295935	Identifier	cap_points		1295749	0					
ANR	1295936	ArgumentList	first == 0 ? start_cap : gs_cap_butt		1295749	1					
ANR	1295937	Argument	first == 0 ? start_cap : gs_cap_butt		1295749	0					
ANR	1295938	ConditionalExpression	first == 0 ? start_cap : gs_cap_butt		1295749	0					
ANR	1295939	Condition	first == 0		1295749	0					
ANR	1295940	EqualityExpression	first == 0		1295749	0		==			
ANR	1295941	Identifier	first		1295749	0					
ANR	1295942	PrimaryExpression	0		1295749	1					
ANR	1295943	Identifier	start_cap		1295749	1					
ANR	1295944	Identifier	gs_cap_butt		1295749	2					
ANR	1295945	Argument	& plp -> o		1295749	1					
ANR	1295946	UnaryOperationExpression	& plp -> o		1295749	0					
ANR	1295947	UnaryOperator	&		1295749	0					
ANR	1295948	PtrMemberAccess	plp -> o		1295749	1					
ANR	1295949	Identifier	plp		1295749	0					
ANR	1295950	Identifier	o		1295749	1					
ANR	1295951	Argument	points		1295749	2					
ANR	1295952	Identifier	points		1295749	0					
ANR	1295953	PrimaryExpression	0		1295749	1					
ANR	1295954	ReturnStatement	return npoints ;	1558:12:66642:66656	1295749	1	True				
ANR	1295955	Identifier	npoints		1295749	0					
ANR	1295956	IfStatement	if ( nplp == 0 )		1295749	9					
ANR	1295957	Condition	nplp == 0	1560:8:66672:66680	1295749	0	True				
ANR	1295958	EqualityExpression	nplp == 0		1295749	0		==			
ANR	1295959	Identifier	nplp		1295749	0					
ANR	1295960	PrimaryExpression	0		1295749	1					
ANR	1295961	CompoundStatement		31:19:1177:1177	1295749	1					
ANR	1295962	IfStatement	if ( end_cap == gs_cap_round )		1295749	0					
ANR	1295963	Condition	end_cap == gs_cap_round	1562:12:66728:66750	1295749	0	True				
ANR	1295964	EqualityExpression	end_cap == gs_cap_round		1295749	0		==			
ANR	1295965	Identifier	end_cap		1295749	0					
ANR	1295966	Identifier	gs_cap_round		1295749	1					
ANR	1295967	CompoundStatement		33:37:1247:1247	1295749	1					
ANR	1295968	ExpressionStatement	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"	1563:12:66767:66808	1295749	0	True				
ANR	1295969	CallExpression	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"		1295749	0					
ANR	1295970	Callee	ASSIGN_POINT		1295749	0					
ANR	1295971	Identifier	ASSIGN_POINT		1295749	0					
ANR	1295972	ArgumentList	& points [ npoints ]		1295749	1					
ANR	1295973	Argument	& points [ npoints ]		1295749	0					
ANR	1295974	UnaryOperationExpression	& points [ npoints ]		1295749	0					
ANR	1295975	UnaryOperator	&		1295749	0					
ANR	1295976	ArrayIndexing	points [ npoints ]		1295749	1					
ANR	1295977	Identifier	points		1295749	0					
ANR	1295978	Identifier	npoints		1295749	1					
ANR	1295979	Argument	plp -> e . co		1295749	1					
ANR	1295980	MemberAccess	plp -> e . co		1295749	0					
ANR	1295981	PtrMemberAccess	plp -> e		1295749	0					
ANR	1295982	Identifier	plp		1295749	0					
ANR	1295983	Identifier	e		1295749	1					
ANR	1295984	Identifier	co		1295749	1					
ANR	1295985	ExpressionStatement	++ npoints	1564:12:66822:66831	1295749	1	True				
ANR	1295986	UnaryExpression	++ npoints		1295749	0					
ANR	1295987	IncDec	++		1295749	0					
ANR	1295988	Identifier	npoints		1295749	1					
ANR	1295989	IfStatement	"if ( ( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0 )"		1295749	2					
ANR	1295990	Condition	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"	1565:16:66849:66909	1295749	0	True				
ANR	1295991	RelationalExpression	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"		1295749	0		<			
ANR	1295992	AssignmentExpression	"code = add_points ( ppath , points , npoints , moveto_first )"		1295749	0		=			
ANR	1295993	Identifier	code		1295749	0					
ANR	1295994	CallExpression	"add_points ( ppath , points , npoints , moveto_first )"		1295749	1					
ANR	1295995	Callee	add_points		1295749	0					
ANR	1295996	Identifier	add_points		1295749	0					
ANR	1295997	ArgumentList	ppath		1295749	1					
ANR	1295998	Argument	ppath		1295749	0					
ANR	1295999	Identifier	ppath		1295749	0					
ANR	1296000	Argument	points		1295749	1					
ANR	1296001	Identifier	points		1295749	0					
ANR	1296002	Argument	npoints		1295749	2					
ANR	1296003	Identifier	npoints		1295749	0					
ANR	1296004	Argument	moveto_first		1295749	3					
ANR	1296005	Identifier	moveto_first		1295749	0					
ANR	1296006	PrimaryExpression	0		1295749	1					
ANR	1296007	ReturnStatement	return code ;	1566:16:66928:66939	1295749	1	True				
ANR	1296008	Identifier	code		1295749	0					
ANR	1296009	ExpressionStatement	"code = add_pie_cap ( ppath , & plp -> e )"	1567:12:66953:66987	1295749	3	True				
ANR	1296010	AssignmentExpression	"code = add_pie_cap ( ppath , & plp -> e )"		1295749	0		=			
ANR	1296011	Identifier	code		1295749	0					
ANR	1296012	CallExpression	"add_pie_cap ( ppath , & plp -> e )"		1295749	1					
ANR	1296013	Callee	add_pie_cap		1295749	0					
ANR	1296014	Identifier	add_pie_cap		1295749	0					
ANR	1296015	ArgumentList	ppath		1295749	1					
ANR	1296016	Argument	ppath		1295749	0					
ANR	1296017	Identifier	ppath		1295749	0					
ANR	1296018	Argument	& plp -> e		1295749	1					
ANR	1296019	UnaryOperationExpression	& plp -> e		1295749	0					
ANR	1296020	UnaryOperator	&		1295749	0					
ANR	1296021	PtrMemberAccess	plp -> e		1295749	1					
ANR	1296022	Identifier	plp		1295749	0					
ANR	1296023	Identifier	e		1295749	1					
ANR	1296024	GotoStatement	goto done ;	1568:12:67001:67010	1295749	4	True				
ANR	1296025	Identifier	done		1295749	0					
ANR	1296026	ExpressionStatement	"code = cap_points ( end_cap , & plp -> e , points + npoints )"	1570:8:67030:67083	1295749	1	True				
ANR	1296027	AssignmentExpression	"code = cap_points ( end_cap , & plp -> e , points + npoints )"		1295749	0		=			
ANR	1296028	Identifier	code		1295749	0					
ANR	1296029	CallExpression	"cap_points ( end_cap , & plp -> e , points + npoints )"		1295749	1					
ANR	1296030	Callee	cap_points		1295749	0					
ANR	1296031	Identifier	cap_points		1295749	0					
ANR	1296032	ArgumentList	end_cap		1295749	1					
ANR	1296033	Argument	end_cap		1295749	0					
ANR	1296034	Identifier	end_cap		1295749	0					
ANR	1296035	Argument	& plp -> e		1295749	1					
ANR	1296036	UnaryOperationExpression	& plp -> e		1295749	0					
ANR	1296037	UnaryOperator	&		1295749	0					
ANR	1296038	PtrMemberAccess	plp -> e		1295749	1					
ANR	1296039	Identifier	plp		1295749	0					
ANR	1296040	Identifier	e		1295749	1					
ANR	1296041	Argument	points + npoints		1295749	2					
ANR	1296042	AdditiveExpression	points + npoints		1295749	0		+			
ANR	1296043	Identifier	points		1295749	0					
ANR	1296044	Identifier	npoints		1295749	1					
ANR	1296045	ElseStatement	else		1295749	0					
ANR	1296046	IfStatement	if ( nplp -> thin )		1295749	0					
ANR	1296047	Condition	nplp -> thin	1571:15:67100:67109	1295749	0	True				
ANR	1296048	PtrMemberAccess	nplp -> thin		1295749	0					
ANR	1296049	Identifier	nplp		1295749	0					
ANR	1296050	Identifier	thin		1295749	1					
ANR	1296051	ExpressionStatement	"code = cap_points ( gs_cap_butt , & plp -> e , points + npoints )"	1572:8:67134:67191	1295749	1	True				
ANR	1296052	AssignmentExpression	"code = cap_points ( gs_cap_butt , & plp -> e , points + npoints )"		1295749	0		=			
ANR	1296053	Identifier	code		1295749	0					
ANR	1296054	CallExpression	"cap_points ( gs_cap_butt , & plp -> e , points + npoints )"		1295749	1					
ANR	1296055	Callee	cap_points		1295749	0					
ANR	1296056	Identifier	cap_points		1295749	0					
ANR	1296057	ArgumentList	gs_cap_butt		1295749	1					
ANR	1296058	Argument	gs_cap_butt		1295749	0					
ANR	1296059	Identifier	gs_cap_butt		1295749	0					
ANR	1296060	Argument	& plp -> e		1295749	1					
ANR	1296061	UnaryOperationExpression	& plp -> e		1295749	0					
ANR	1296062	UnaryOperator	&		1295749	0					
ANR	1296063	PtrMemberAccess	plp -> e		1295749	1					
ANR	1296064	Identifier	plp		1295749	0					
ANR	1296065	Identifier	e		1295749	1					
ANR	1296066	Argument	points + npoints		1295749	2					
ANR	1296067	AdditiveExpression	points + npoints		1295749	0		+			
ANR	1296068	Identifier	points		1295749	0					
ANR	1296069	Identifier	npoints		1295749	1					
ANR	1296070	ElseStatement	else		1295749	0					
ANR	1296071	IfStatement	if ( join == gs_join_round )		1295749	0					
ANR	1296072	Condition	join == gs_join_round	1573:13:67206:67226	1295749	0	True				
ANR	1296073	EqualityExpression	join == gs_join_round		1295749	0		==			
ANR	1296074	Identifier	join		1295749	0					
ANR	1296075	Identifier	gs_join_round		1295749	1					
ANR	1296076	CompoundStatement		44:36:1723:1723	1295749	1					
ANR	1296077	ExpressionStatement	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"	1574:8:67239:67280	1295749	0	True				
ANR	1296078	CallExpression	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"		1295749	0					
ANR	1296079	Callee	ASSIGN_POINT		1295749	0					
ANR	1296080	Identifier	ASSIGN_POINT		1295749	0					
ANR	1296081	ArgumentList	& points [ npoints ]		1295749	1					
ANR	1296082	Argument	& points [ npoints ]		1295749	0					
ANR	1296083	UnaryOperationExpression	& points [ npoints ]		1295749	0					
ANR	1296084	UnaryOperator	&		1295749	0					
ANR	1296085	ArrayIndexing	points [ npoints ]		1295749	1					
ANR	1296086	Identifier	points		1295749	0					
ANR	1296087	Identifier	npoints		1295749	1					
ANR	1296088	Argument	plp -> e . co		1295749	1					
ANR	1296089	MemberAccess	plp -> e . co		1295749	0					
ANR	1296090	PtrMemberAccess	plp -> e		1295749	0					
ANR	1296091	Identifier	plp		1295749	0					
ANR	1296092	Identifier	e		1295749	1					
ANR	1296093	Identifier	co		1295749	1					
ANR	1296094	ExpressionStatement	++ npoints	1575:8:67290:67299	1295749	1	True				
ANR	1296095	UnaryExpression	++ npoints		1295749	0					
ANR	1296096	IncDec	++		1295749	0					
ANR	1296097	Identifier	npoints		1295749	1					
ANR	1296098	IfStatement	"if ( ( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0 )"		1295749	2					
ANR	1296099	Condition	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"	1576:12:67313:67373	1295749	0	True				
ANR	1296100	RelationalExpression	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"		1295749	0		<			
ANR	1296101	AssignmentExpression	"code = add_points ( ppath , points , npoints , moveto_first )"		1295749	0		=			
ANR	1296102	Identifier	code		1295749	0					
ANR	1296103	CallExpression	"add_points ( ppath , points , npoints , moveto_first )"		1295749	1					
ANR	1296104	Callee	add_points		1295749	0					
ANR	1296105	Identifier	add_points		1295749	0					
ANR	1296106	ArgumentList	ppath		1295749	1					
ANR	1296107	Argument	ppath		1295749	0					
ANR	1296108	Identifier	ppath		1295749	0					
ANR	1296109	Argument	points		1295749	1					
ANR	1296110	Identifier	points		1295749	0					
ANR	1296111	Argument	npoints		1295749	2					
ANR	1296112	Identifier	npoints		1295749	0					
ANR	1296113	Argument	moveto_first		1295749	3					
ANR	1296114	Identifier	moveto_first		1295749	0					
ANR	1296115	PrimaryExpression	0		1295749	1					
ANR	1296116	ReturnStatement	return code ;	1577:12:67388:67399	1295749	1	True				
ANR	1296117	Identifier	code		1295749	0					
ANR	1296118	ExpressionStatement	"code = add_pie_join ( ppath , plp , nplp , reflected , true )"	1578:8:67409:67463	1295749	3	True				
ANR	1296119	AssignmentExpression	"code = add_pie_join ( ppath , plp , nplp , reflected , true )"		1295749	0		=			
ANR	1296120	Identifier	code		1295749	0					
ANR	1296121	CallExpression	"add_pie_join ( ppath , plp , nplp , reflected , true )"		1295749	1					
ANR	1296122	Callee	add_pie_join		1295749	0					
ANR	1296123	Identifier	add_pie_join		1295749	0					
ANR	1296124	ArgumentList	ppath		1295749	1					
ANR	1296125	Argument	ppath		1295749	0					
ANR	1296126	Identifier	ppath		1295749	0					
ANR	1296127	Argument	plp		1295749	1					
ANR	1296128	Identifier	plp		1295749	0					
ANR	1296129	Argument	nplp		1295749	2					
ANR	1296130	Identifier	nplp		1295749	0					
ANR	1296131	Argument	reflected		1295749	3					
ANR	1296132	Identifier	reflected		1295749	0					
ANR	1296133	Argument	true		1295749	4					
ANR	1296134	Identifier	true		1295749	0					
ANR	1296135	GotoStatement	goto done ;	1579:8:67473:67482	1295749	4	True				
ANR	1296136	Identifier	done		1295749	0					
ANR	1296137	ElseStatement	else		1295749	0					
ANR	1296138	IfStatement	if ( flags & nf_all_from_arc )		1295749	0					
ANR	1296139	Condition	flags & nf_all_from_arc	1580:15:67499:67521	1295749	0	True				
ANR	1296140	BitAndExpression	flags & nf_all_from_arc		1295749	0		&			
ANR	1296141	Identifier	flags		1295749	0					
ANR	1296142	Identifier	nf_all_from_arc		1295749	1					
ANR	1296143	CompoundStatement		51:40:2018:2018	1295749	1					
ANR	1296144	ExpressionStatement	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"	1584:8:67741:67782	1295749	0	True				
ANR	1296145	CallExpression	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"		1295749	0					
ANR	1296146	Callee	ASSIGN_POINT		1295749	0					
ANR	1296147	Identifier	ASSIGN_POINT		1295749	0					
ANR	1296148	ArgumentList	& points [ npoints ]		1295749	1					
ANR	1296149	Argument	& points [ npoints ]		1295749	0					
ANR	1296150	UnaryOperationExpression	& points [ npoints ]		1295749	0					
ANR	1296151	UnaryOperator	&		1295749	0					
ANR	1296152	ArrayIndexing	points [ npoints ]		1295749	1					
ANR	1296153	Identifier	points		1295749	0					
ANR	1296154	Identifier	npoints		1295749	1					
ANR	1296155	Argument	plp -> e . co		1295749	1					
ANR	1296156	MemberAccess	plp -> e . co		1295749	0					
ANR	1296157	PtrMemberAccess	plp -> e		1295749	0					
ANR	1296158	Identifier	plp		1295749	0					
ANR	1296159	Identifier	e		1295749	1					
ANR	1296160	Identifier	co		1295749	1					
ANR	1296161	ExpressionStatement	++ npoints	1585:8:67792:67801	1295749	1	True				
ANR	1296162	UnaryExpression	++ npoints		1295749	0					
ANR	1296163	IncDec	++		1295749	0					
ANR	1296164	Identifier	npoints		1295749	1					
ANR	1296165	IfStatement	"if ( ( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0 )"		1295749	2					
ANR	1296166	Condition	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"	1586:12:67815:67875	1295749	0	True				
ANR	1296167	RelationalExpression	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"		1295749	0		<			
ANR	1296168	AssignmentExpression	"code = add_points ( ppath , points , npoints , moveto_first )"		1295749	0		=			
ANR	1296169	Identifier	code		1295749	0					
ANR	1296170	CallExpression	"add_points ( ppath , points , npoints , moveto_first )"		1295749	1					
ANR	1296171	Callee	add_points		1295749	0					
ANR	1296172	Identifier	add_points		1295749	0					
ANR	1296173	ArgumentList	ppath		1295749	1					
ANR	1296174	Argument	ppath		1295749	0					
ANR	1296175	Identifier	ppath		1295749	0					
ANR	1296176	Argument	points		1295749	1					
ANR	1296177	Identifier	points		1295749	0					
ANR	1296178	Argument	npoints		1295749	2					
ANR	1296179	Identifier	npoints		1295749	0					
ANR	1296180	Argument	moveto_first		1295749	3					
ANR	1296181	Identifier	moveto_first		1295749	0					
ANR	1296182	PrimaryExpression	0		1295749	1					
ANR	1296183	ReturnStatement	return code ;	1587:12:67890:67901	1295749	1	True				
ANR	1296184	Identifier	code		1295749	0					
ANR	1296185	ExpressionStatement	"code = add_pie_join ( ppath , plp , nplp , reflected , false )"	1588:8:67911:67966	1295749	3	True				
ANR	1296186	AssignmentExpression	"code = add_pie_join ( ppath , plp , nplp , reflected , false )"		1295749	0		=			
ANR	1296187	Identifier	code		1295749	0					
ANR	1296188	CallExpression	"add_pie_join ( ppath , plp , nplp , reflected , false )"		1295749	1					
ANR	1296189	Callee	add_pie_join		1295749	0					
ANR	1296190	Identifier	add_pie_join		1295749	0					
ANR	1296191	ArgumentList	ppath		1295749	1					
ANR	1296192	Argument	ppath		1295749	0					
ANR	1296193	Identifier	ppath		1295749	0					
ANR	1296194	Argument	plp		1295749	1					
ANR	1296195	Identifier	plp		1295749	0					
ANR	1296196	Argument	nplp		1295749	2					
ANR	1296197	Identifier	nplp		1295749	0					
ANR	1296198	Argument	reflected		1295749	3					
ANR	1296199	Identifier	reflected		1295749	0					
ANR	1296200	Argument	false		1295749	4					
ANR	1296201	Identifier	false		1295749	0					
ANR	1296202	GotoStatement	goto done ;	1589:8:67976:67985	1295749	4	True				
ANR	1296203	Identifier	done		1295749	0					
ANR	1296204	ElseStatement	else		1295749	0					
ANR	1296205	ExpressionStatement	"code = line_join_points ( pgs_lp , plp , nplp , points + npoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"	1591:7:68047:68234	1295749	0	True				
ANR	1296206	AssignmentExpression	"code = line_join_points ( pgs_lp , plp , nplp , points + npoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"		1295749	0		=			
ANR	1296207	Identifier	code		1295749	0					
ANR	1296208	CallExpression	"line_join_points ( pgs_lp , plp , nplp , points + npoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"		1295749	1					
ANR	1296209	Callee	line_join_points		1295749	0					
ANR	1296210	Identifier	line_join_points		1295749	0					
ANR	1296211	ArgumentList	pgs_lp		1295749	1					
ANR	1296212	Argument	pgs_lp		1295749	0					
ANR	1296213	Identifier	pgs_lp		1295749	0					
ANR	1296214	Argument	plp		1295749	1					
ANR	1296215	Identifier	plp		1295749	0					
ANR	1296216	Argument	nplp		1295749	2					
ANR	1296217	Identifier	nplp		1295749	0					
ANR	1296218	Argument	points + npoints		1295749	3					
ANR	1296219	AdditiveExpression	points + npoints		1295749	0		+			
ANR	1296220	Identifier	points		1295749	0					
ANR	1296221	Identifier	npoints		1295749	1					
ANR	1296222	Argument	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1295749	4					
ANR	1296223	ConditionalExpression	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1295749	0					
ANR	1296224	Condition	uniform		1295749	0					
ANR	1296225	Identifier	uniform		1295749	0					
ANR	1296226	CastExpression	( gs_matrix * ) 0		1295749	1					
ANR	1296227	CastTarget	gs_matrix *		1295749	0					
ANR	1296228	PrimaryExpression	0		1295749	1					
ANR	1296229	UnaryOperationExpression	& ctm_only ( pgs )		1295749	2					
ANR	1296230	UnaryOperator	&		1295749	0					
ANR	1296231	CallExpression	ctm_only ( pgs )		1295749	1					
ANR	1296232	Callee	ctm_only		1295749	0					
ANR	1296233	Identifier	ctm_only		1295749	0					
ANR	1296234	ArgumentList	pgs		1295749	1					
ANR	1296235	Argument	pgs		1295749	0					
ANR	1296236	Identifier	pgs		1295749	0					
ANR	1296237	Argument	join		1295749	5					
ANR	1296238	Identifier	join		1295749	0					
ANR	1296239	Argument	reflected		1295749	6					
ANR	1296240	Identifier	reflected		1295749	0					
ANR	1296241	IfStatement	if ( code < 0 )		1295749	10					
ANR	1296242	Condition	code < 0	1594:8:68244:68251	1295749	0	True				
ANR	1296243	RelationalExpression	code < 0		1295749	0		<			
ANR	1296244	Identifier	code		1295749	0					
ANR	1296245	PrimaryExpression	0		1295749	1					
ANR	1296246	ReturnStatement	return code ;	1595:8:68262:68273	1295749	1	True				
ANR	1296247	Identifier	code		1295749	0					
ANR	1296248	ExpressionStatement	"code = add_points ( ppath , points , npoints + code , moveto_first )"	1596:4:68279:68341	1295749	11	True				
ANR	1296249	AssignmentExpression	"code = add_points ( ppath , points , npoints + code , moveto_first )"		1295749	0		=			
ANR	1296250	Identifier	code		1295749	0					
ANR	1296251	CallExpression	"add_points ( ppath , points , npoints + code , moveto_first )"		1295749	1					
ANR	1296252	Callee	add_points		1295749	0					
ANR	1296253	Identifier	add_points		1295749	0					
ANR	1296254	ArgumentList	ppath		1295749	1					
ANR	1296255	Argument	ppath		1295749	0					
ANR	1296256	Identifier	ppath		1295749	0					
ANR	1296257	Argument	points		1295749	1					
ANR	1296258	Identifier	points		1295749	0					
ANR	1296259	Argument	npoints + code		1295749	2					
ANR	1296260	AdditiveExpression	npoints + code		1295749	0		+			
ANR	1296261	Identifier	npoints		1295749	0					
ANR	1296262	Identifier	code		1295749	1					
ANR	1296263	Argument	moveto_first		1295749	3					
ANR	1296264	Identifier	moveto_first		1295749	0					
ANR	1296265	Label	done :	1597:2:68345:68349	1295749	12	True				
ANR	1296266	Identifier	done		1295749	0					
ANR	1296267	IfStatement	if ( code < 0 )		1295749	13					
ANR	1296268	Condition	code < 0	1598:8:68359:68366	1295749	0	True				
ANR	1296269	RelationalExpression	code < 0		1295749	0		<			
ANR	1296270	Identifier	code		1295749	0					
ANR	1296271	PrimaryExpression	0		1295749	1					
ANR	1296272	ReturnStatement	return code ;	1599:8:68377:68388	1295749	1	True				
ANR	1296273	Identifier	code		1295749	0					
ANR	1296274	IfStatement	if ( ( flags & nf_some_from_arc ) && ( ! plp -> thin ) && ( nplp != NULL ) && ( ! nplp -> thin ) )		1295749	14					
ANR	1296275	Condition	( flags & nf_some_from_arc ) && ( ! plp -> thin ) && ( nplp != NULL ) && ( ! nplp -> thin )	1600:8:68398:68482	1295749	0	True				
ANR	1296276	AndExpression	( flags & nf_some_from_arc ) && ( ! plp -> thin ) && ( nplp != NULL ) && ( ! nplp -> thin )		1295749	0		&&			
ANR	1296277	BitAndExpression	flags & nf_some_from_arc		1295749	0		&			
ANR	1296278	Identifier	flags		1295749	0					
ANR	1296279	Identifier	nf_some_from_arc		1295749	1					
ANR	1296280	AndExpression	( ! plp -> thin ) && ( nplp != NULL ) && ( ! nplp -> thin )		1295749	1		&&			
ANR	1296281	UnaryOperationExpression	! plp -> thin		1295749	0					
ANR	1296282	UnaryOperator	!		1295749	0					
ANR	1296283	PtrMemberAccess	plp -> thin		1295749	1					
ANR	1296284	Identifier	plp		1295749	0					
ANR	1296285	Identifier	thin		1295749	1					
ANR	1296286	AndExpression	( nplp != NULL ) && ( ! nplp -> thin )		1295749	1		&&			
ANR	1296287	EqualityExpression	nplp != NULL		1295749	0		!=			
ANR	1296288	Identifier	nplp		1295749	0					
ANR	1296289	Identifier	NULL		1295749	1					
ANR	1296290	UnaryOperationExpression	! nplp -> thin		1295749	1					
ANR	1296291	UnaryOperator	!		1295749	0					
ANR	1296292	PtrMemberAccess	nplp -> thin		1295749	1					
ANR	1296293	Identifier	nplp		1295749	0					
ANR	1296294	Identifier	thin		1295749	1					
ANR	1296295	ExpressionStatement	"code = join_under_pie ( ppath , plp , nplp , reflected )"	1602:8:68493:68543	1295749	1	True				
ANR	1296296	AssignmentExpression	"code = join_under_pie ( ppath , plp , nplp , reflected )"		1295749	0		=			
ANR	1296297	Identifier	code		1295749	0					
ANR	1296298	CallExpression	"join_under_pie ( ppath , plp , nplp , reflected )"		1295749	1					
ANR	1296299	Callee	join_under_pie		1295749	0					
ANR	1296300	Identifier	join_under_pie		1295749	0					
ANR	1296301	ArgumentList	ppath		1295749	1					
ANR	1296302	Argument	ppath		1295749	0					
ANR	1296303	Identifier	ppath		1295749	0					
ANR	1296304	Argument	plp		1295749	1					
ANR	1296305	Identifier	plp		1295749	0					
ANR	1296306	Argument	nplp		1295749	2					
ANR	1296307	Identifier	nplp		1295749	0					
ANR	1296308	Argument	reflected		1295749	3					
ANR	1296309	Identifier	reflected		1295749	0					
ANR	1296310	ReturnStatement	return gx_path_close_subpath ( ppath ) ;	1603:4:68549:68584	1295749	15	True				
ANR	1296311	CallExpression	gx_path_close_subpath ( ppath )		1295749	0					
ANR	1296312	Callee	gx_path_close_subpath		1295749	0					
ANR	1296313	Identifier	gx_path_close_subpath		1295749	0					
ANR	1296314	ArgumentList	ppath		1295749	1					
ANR	1296315	Argument	ppath		1295749	0					
ANR	1296316	Identifier	ppath		1295749	0					
ANR	1296317	ReturnType	static int		1295749	1					
ANR	1296318	Identifier	stroke_add		1295749	2					
ANR	1296319	ParameterList	"gx_path * ppath , gx_path * rpath , bool ensure_closed , int first , pl_ptr plp , pl_ptr nplp , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs , const gx_stroke_params * params , const gs_fixed_rect * ignore_pbbox , int uniform , gs_line_join join , bool reflected , note_flags flags"		1295749	3					
ANR	1296320	Parameter	gx_path * ppath	1524:11:65154:65168	1295749	0	True				
ANR	1296321	ParameterType	gx_path *		1295749	0					
ANR	1296322	Identifier	ppath		1295749	1					
ANR	1296323	Parameter	gx_path * rpath	1524:28:65171:65185	1295749	1	True				
ANR	1296324	ParameterType	gx_path *		1295749	0					
ANR	1296325	Identifier	rpath		1295749	1					
ANR	1296326	Parameter	bool ensure_closed	1524:45:65188:65205	1295749	2	True				
ANR	1296327	ParameterType	bool		1295749	0					
ANR	1296328	Identifier	ensure_closed		1295749	1					
ANR	1296329	Parameter	int first	1524:65:65208:65216	1295749	3	True				
ANR	1296330	ParameterType	int		1295749	0					
ANR	1296331	Identifier	first		1295749	1					
ANR	1296332	Parameter	pl_ptr plp	1525:11:65230:65239	1295749	4	True				
ANR	1296333	ParameterType	pl_ptr		1295749	0					
ANR	1296334	Identifier	plp		1295749	1					
ANR	1296335	Parameter	pl_ptr nplp	1525:23:65242:65252	1295749	5	True				
ANR	1296336	ParameterType	pl_ptr		1295749	0					
ANR	1296337	Identifier	nplp		1295749	1					
ANR	1296338	Parameter	const gx_device_color * pdevc	1525:36:65255:65283	1295749	6	True				
ANR	1296339	ParameterType	const gx_device_color *		1295749	0					
ANR	1296340	Identifier	pdevc		1295749	1					
ANR	1296341	Parameter	gx_device * dev	1526:11:65297:65311	1295749	7	True				
ANR	1296342	ParameterType	gx_device *		1295749	0					
ANR	1296343	Identifier	dev		1295749	1					
ANR	1296344	Parameter	const gs_gstate * pgs	1526:28:65314:65334	1295749	8	True				
ANR	1296345	ParameterType	const gs_gstate *		1295749	0					
ANR	1296346	Identifier	pgs		1295749	1					
ANR	1296347	Parameter	const gx_stroke_params * params	1527:11:65348:65378	1295749	9	True				
ANR	1296348	ParameterType	const gx_stroke_params *		1295749	0					
ANR	1296349	Identifier	params		1295749	1					
ANR	1296350	Parameter	const gs_fixed_rect * ignore_pbbox	1528:11:65392:65425	1295749	10	True				
ANR	1296351	ParameterType	const gs_fixed_rect *		1295749	0					
ANR	1296352	Identifier	ignore_pbbox		1295749	1					
ANR	1296353	Parameter	int uniform	1528:47:65428:65438	1295749	11	True				
ANR	1296354	ParameterType	int		1295749	0					
ANR	1296355	Identifier	uniform		1295749	1					
ANR	1296356	Parameter	gs_line_join join	1529:11:65452:65468	1295749	12	True				
ANR	1296357	ParameterType	gs_line_join		1295749	0					
ANR	1296358	Identifier	join		1295749	1					
ANR	1296359	Parameter	bool reflected	1529:30:65471:65484	1295749	13	True				
ANR	1296360	ParameterType	bool		1295749	0					
ANR	1296361	Identifier	reflected		1295749	1					
ANR	1296362	Parameter	note_flags flags	1529:46:65487:65502	1295749	14	True				
ANR	1296363	ParameterType	note_flags		1295749	0					
ANR	1296364	Identifier	flags		1295749	1					
ANR	1296365	CFGEntryNode	ENTRY		1295749		True				
ANR	1296366	CFGExitNode	EXIT		1295749		True				
ANR	1296367	Symbol	nf_all_from_arc		1295749						
ANR	1296368	Symbol	pdevc		1295749						
ANR	1296369	Symbol	npoints		1295749						
ANR	1296370	Symbol	reflected		1295749						
ANR	1296371	Symbol	& plp -> e		1295749						
ANR	1296372	Symbol	nf_dash_tail		1295749						
ANR	1296373	Symbol	points		1295749						
ANR	1296374	Symbol	dev		1295749						
ANR	1296375	Symbol	plp -> e . co		1295749						
ANR	1296376	Symbol	gs_currentlineparams_inline		1295749						
ANR	1296377	Symbol	join		1295749						
ANR	1296378	Symbol	join_under_pie		1295749						
ANR	1296379	Symbol	* plp		1295749						
ANR	1296380	Symbol	add_points		1295749						
ANR	1296381	Symbol	plp -> thin		1295749						
ANR	1296382	Symbol	NULL		1295749						
ANR	1296383	Symbol	ensure_closed		1295749						
ANR	1296384	Symbol	add_pie_join		1295749						
ANR	1296385	Symbol	params		1295749						
ANR	1296386	Symbol	gx_path_add_point		1295749						
ANR	1296387	Symbol	nf_dash_head		1295749						
ANR	1296388	Symbol	gs_join_round		1295749						
ANR	1296389	Symbol	& plp -> o		1295749						
ANR	1296390	Symbol	pgs_lp -> end_cap		1295749						
ANR	1296391	Symbol	pgs_lp		1295749						
ANR	1296392	Symbol	true		1295749						
ANR	1296393	Symbol	nf_some_from_arc		1295749						
ANR	1296394	Symbol	code		1295749						
ANR	1296395	Symbol	add_pie_cap		1295749						
ANR	1296396	Symbol	cap_points		1295749						
ANR	1296397	Symbol	* pgs_lp		1295749						
ANR	1296398	Symbol	ignore_pbbox		1295749						
ANR	1296399	Symbol	flags		1295749						
ANR	1296400	Symbol	plp -> o . co		1295749						
ANR	1296401	Symbol	ppath		1295749						
ANR	1296402	Symbol	pgs_lp -> dash_cap		1295749						
ANR	1296403	Symbol	plp -> o . co . y		1295749						
ANR	1296404	Symbol	plp -> o . co . x		1295749						
ANR	1296405	Symbol	gx_path_close_subpath		1295749						
ANR	1296406	Symbol	uniform		1295749						
ANR	1296407	Symbol	moveto_first		1295749						
ANR	1296408	Symbol	end_cap		1295749						
ANR	1296409	Symbol	pgs		1295749						
ANR	1296410	Symbol	gs_cap_round		1295749						
ANR	1296411	Symbol	* nplp		1295749						
ANR	1296412	Symbol	& ctm_only		1295749						
ANR	1296413	Symbol	line_join_points		1295749						
ANR	1296414	Symbol	false		1295749						
ANR	1296415	Symbol	gs_cap_butt		1295749						
ANR	1296416	Symbol	rpath		1295749						
ANR	1296417	Symbol	start_cap		1295749						
ANR	1296418	Symbol	pgs_lp -> start_cap		1295749						
ANR	1296419	Symbol	plp		1295749						
ANR	1296420	Symbol	nplp		1295749						
ANR	1296421	Symbol	plp -> o		1295749						
ANR	1296422	Symbol	plp -> e		1295749						
ANR	1296423	Symbol	nplp -> thin		1295749						
ANR	1296424	Symbol	first		1295749						
ANR	1296425	Function	wide_underjoin	1628:0:69649:70266							
ANR	1296426	FunctionDef	"wide_underjoin (pl_ptr plp , pl_ptr nplp)"		1296425	0					
ANR	1296427	CompoundStatement		1630:0:69701:70266	1296425	0					
ANR	1296428	IdentifierDeclStatement	double h_squared = ( double ) nplp -> vector . x * nplp -> vector . x + ( double ) nplp -> vector . y * nplp -> vector . y ;	1631:4:69707:69807	1296425	0	True				
ANR	1296429	IdentifierDecl	h_squared = ( double ) nplp -> vector . x * nplp -> vector . x + ( double ) nplp -> vector . y * nplp -> vector . y		1296425	0					
ANR	1296430	IdentifierDeclType	double		1296425	0					
ANR	1296431	Identifier	h_squared		1296425	1					
ANR	1296432	AssignmentExpression	h_squared = ( double ) nplp -> vector . x * nplp -> vector . x + ( double ) nplp -> vector . y * nplp -> vector . y		1296425	2		=			
ANR	1296433	Identifier	h_squared		1296425	0					
ANR	1296434	AdditiveExpression	( double ) nplp -> vector . x * nplp -> vector . x + ( double ) nplp -> vector . y * nplp -> vector . y		1296425	1		+			
ANR	1296435	MultiplicativeExpression	( double ) nplp -> vector . x * nplp -> vector . x		1296425	0		*			
ANR	1296436	CastExpression	( double ) nplp -> vector . x		1296425	0					
ANR	1296437	CastTarget	double		1296425	0					
ANR	1296438	MemberAccess	nplp -> vector . x		1296425	1					
ANR	1296439	PtrMemberAccess	nplp -> vector		1296425	0					
ANR	1296440	Identifier	nplp		1296425	0					
ANR	1296441	Identifier	vector		1296425	1					
ANR	1296442	Identifier	x		1296425	1					
ANR	1296443	MemberAccess	nplp -> vector . x		1296425	1					
ANR	1296444	PtrMemberAccess	nplp -> vector		1296425	0					
ANR	1296445	Identifier	nplp		1296425	0					
ANR	1296446	Identifier	vector		1296425	1					
ANR	1296447	Identifier	x		1296425	1					
ANR	1296448	MultiplicativeExpression	( double ) nplp -> vector . y * nplp -> vector . y		1296425	1		*			
ANR	1296449	CastExpression	( double ) nplp -> vector . y		1296425	0					
ANR	1296450	CastTarget	double		1296425	0					
ANR	1296451	MemberAccess	nplp -> vector . y		1296425	1					
ANR	1296452	PtrMemberAccess	nplp -> vector		1296425	0					
ANR	1296453	Identifier	nplp		1296425	0					
ANR	1296454	Identifier	vector		1296425	1					
ANR	1296455	Identifier	y		1296425	1					
ANR	1296456	MemberAccess	nplp -> vector . y		1296425	1					
ANR	1296457	PtrMemberAccess	nplp -> vector		1296425	0					
ANR	1296458	Identifier	nplp		1296425	0					
ANR	1296459	Identifier	vector		1296425	1					
ANR	1296460	Identifier	y		1296425	1					
ANR	1296461	IdentifierDeclStatement	double dot = ( double ) plp -> width . x * nplp -> vector . x + ( double ) plp -> width . y * nplp -> vector . y ;	1632:4:69813:69903	1296425	1	True				
ANR	1296462	IdentifierDecl	dot = ( double ) plp -> width . x * nplp -> vector . x + ( double ) plp -> width . y * nplp -> vector . y		1296425	0					
ANR	1296463	IdentifierDeclType	double		1296425	0					
ANR	1296464	Identifier	dot		1296425	1					
ANR	1296465	AssignmentExpression	dot = ( double ) plp -> width . x * nplp -> vector . x + ( double ) plp -> width . y * nplp -> vector . y		1296425	2		=			
ANR	1296466	Identifier	dot		1296425	0					
ANR	1296467	AdditiveExpression	( double ) plp -> width . x * nplp -> vector . x + ( double ) plp -> width . y * nplp -> vector . y		1296425	1		+			
ANR	1296468	MultiplicativeExpression	( double ) plp -> width . x * nplp -> vector . x		1296425	0		*			
ANR	1296469	CastExpression	( double ) plp -> width . x		1296425	0					
ANR	1296470	CastTarget	double		1296425	0					
ANR	1296471	MemberAccess	plp -> width . x		1296425	1					
ANR	1296472	PtrMemberAccess	plp -> width		1296425	0					
ANR	1296473	Identifier	plp		1296425	0					
ANR	1296474	Identifier	width		1296425	1					
ANR	1296475	Identifier	x		1296425	1					
ANR	1296476	MemberAccess	nplp -> vector . x		1296425	1					
ANR	1296477	PtrMemberAccess	nplp -> vector		1296425	0					
ANR	1296478	Identifier	nplp		1296425	0					
ANR	1296479	Identifier	vector		1296425	1					
ANR	1296480	Identifier	x		1296425	1					
ANR	1296481	MultiplicativeExpression	( double ) plp -> width . y * nplp -> vector . y		1296425	1		*			
ANR	1296482	CastExpression	( double ) plp -> width . y		1296425	0					
ANR	1296483	CastTarget	double		1296425	0					
ANR	1296484	MemberAccess	plp -> width . y		1296425	1					
ANR	1296485	PtrMemberAccess	plp -> width		1296425	0					
ANR	1296486	Identifier	plp		1296425	0					
ANR	1296487	Identifier	width		1296425	1					
ANR	1296488	Identifier	y		1296425	1					
ANR	1296489	MemberAccess	nplp -> vector . y		1296425	1					
ANR	1296490	PtrMemberAccess	nplp -> vector		1296425	0					
ANR	1296491	Identifier	nplp		1296425	0					
ANR	1296492	Identifier	vector		1296425	1					
ANR	1296493	Identifier	y		1296425	1					
ANR	1296494	IfStatement	if ( dot < 0 )		1296425	2					
ANR	1296495	Condition	dot < 0	1634:8:69914:69920	1296425	0	True				
ANR	1296496	RelationalExpression	dot < 0		1296425	0		<			
ANR	1296497	Identifier	dot		1296425	0					
ANR	1296498	PrimaryExpression	0		1296425	1					
ANR	1296499	ExpressionStatement	dot = - dot	1635:8:69931:69941	1296425	1	True				
ANR	1296500	AssignmentExpression	dot = - dot		1296425	0		=			
ANR	1296501	Identifier	dot		1296425	0					
ANR	1296502	UnaryOperationExpression	- dot		1296425	1					
ANR	1296503	UnaryOperator	-		1296425	0					
ANR	1296504	Identifier	dot		1296425	1					
ANR	1296505	IfStatement	if ( dot > h_squared )		1296425	3					
ANR	1296506	Condition	dot > h_squared	1636:8:69951:69965	1296425	0	True				
ANR	1296507	RelationalExpression	dot > h_squared		1296425	0		>			
ANR	1296508	Identifier	dot		1296425	0					
ANR	1296509	Identifier	h_squared		1296425	1					
ANR	1296510	ReturnStatement	return 1 ;	1637:8:69976:69984	1296425	1	True				
ANR	1296511	PrimaryExpression	1		1296425	0					
ANR	1296512	ExpressionStatement	h_squared = ( double ) plp -> vector . x * plp -> vector . x + ( double ) plp -> vector . y * plp -> vector . y	1639:4:69991:70080	1296425	4	True				
ANR	1296513	AssignmentExpression	h_squared = ( double ) plp -> vector . x * plp -> vector . x + ( double ) plp -> vector . y * plp -> vector . y		1296425	0		=			
ANR	1296514	Identifier	h_squared		1296425	0					
ANR	1296515	AdditiveExpression	( double ) plp -> vector . x * plp -> vector . x + ( double ) plp -> vector . y * plp -> vector . y		1296425	1		+			
ANR	1296516	MultiplicativeExpression	( double ) plp -> vector . x * plp -> vector . x		1296425	0		*			
ANR	1296517	CastExpression	( double ) plp -> vector . x		1296425	0					
ANR	1296518	CastTarget	double		1296425	0					
ANR	1296519	MemberAccess	plp -> vector . x		1296425	1					
ANR	1296520	PtrMemberAccess	plp -> vector		1296425	0					
ANR	1296521	Identifier	plp		1296425	0					
ANR	1296522	Identifier	vector		1296425	1					
ANR	1296523	Identifier	x		1296425	1					
ANR	1296524	MemberAccess	plp -> vector . x		1296425	1					
ANR	1296525	PtrMemberAccess	plp -> vector		1296425	0					
ANR	1296526	Identifier	plp		1296425	0					
ANR	1296527	Identifier	vector		1296425	1					
ANR	1296528	Identifier	x		1296425	1					
ANR	1296529	MultiplicativeExpression	( double ) plp -> vector . y * plp -> vector . y		1296425	1		*			
ANR	1296530	CastExpression	( double ) plp -> vector . y		1296425	0					
ANR	1296531	CastTarget	double		1296425	0					
ANR	1296532	MemberAccess	plp -> vector . y		1296425	1					
ANR	1296533	PtrMemberAccess	plp -> vector		1296425	0					
ANR	1296534	Identifier	plp		1296425	0					
ANR	1296535	Identifier	vector		1296425	1					
ANR	1296536	Identifier	y		1296425	1					
ANR	1296537	MemberAccess	plp -> vector . y		1296425	1					
ANR	1296538	PtrMemberAccess	plp -> vector		1296425	0					
ANR	1296539	Identifier	plp		1296425	0					
ANR	1296540	Identifier	vector		1296425	1					
ANR	1296541	Identifier	y		1296425	1					
ANR	1296542	ExpressionStatement	dot = ( double ) nplp -> width . x * plp -> vector . x + ( double ) nplp -> width . y * plp -> vector . y	1640:4:70086:70169	1296425	5	True				
ANR	1296543	AssignmentExpression	dot = ( double ) nplp -> width . x * plp -> vector . x + ( double ) nplp -> width . y * plp -> vector . y		1296425	0		=			
ANR	1296544	Identifier	dot		1296425	0					
ANR	1296545	AdditiveExpression	( double ) nplp -> width . x * plp -> vector . x + ( double ) nplp -> width . y * plp -> vector . y		1296425	1		+			
ANR	1296546	MultiplicativeExpression	( double ) nplp -> width . x * plp -> vector . x		1296425	0		*			
ANR	1296547	CastExpression	( double ) nplp -> width . x		1296425	0					
ANR	1296548	CastTarget	double		1296425	0					
ANR	1296549	MemberAccess	nplp -> width . x		1296425	1					
ANR	1296550	PtrMemberAccess	nplp -> width		1296425	0					
ANR	1296551	Identifier	nplp		1296425	0					
ANR	1296552	Identifier	width		1296425	1					
ANR	1296553	Identifier	x		1296425	1					
ANR	1296554	MemberAccess	plp -> vector . x		1296425	1					
ANR	1296555	PtrMemberAccess	plp -> vector		1296425	0					
ANR	1296556	Identifier	plp		1296425	0					
ANR	1296557	Identifier	vector		1296425	1					
ANR	1296558	Identifier	x		1296425	1					
ANR	1296559	MultiplicativeExpression	( double ) nplp -> width . y * plp -> vector . y		1296425	1		*			
ANR	1296560	CastExpression	( double ) nplp -> width . y		1296425	0					
ANR	1296561	CastTarget	double		1296425	0					
ANR	1296562	MemberAccess	nplp -> width . y		1296425	1					
ANR	1296563	PtrMemberAccess	nplp -> width		1296425	0					
ANR	1296564	Identifier	nplp		1296425	0					
ANR	1296565	Identifier	width		1296425	1					
ANR	1296566	Identifier	y		1296425	1					
ANR	1296567	MemberAccess	plp -> vector . y		1296425	1					
ANR	1296568	PtrMemberAccess	plp -> vector		1296425	0					
ANR	1296569	Identifier	plp		1296425	0					
ANR	1296570	Identifier	vector		1296425	1					
ANR	1296571	Identifier	y		1296425	1					
ANR	1296572	IfStatement	if ( dot < 0 )		1296425	6					
ANR	1296573	Condition	dot < 0	1641:8:70179:70185	1296425	0	True				
ANR	1296574	RelationalExpression	dot < 0		1296425	0		<			
ANR	1296575	Identifier	dot		1296425	0					
ANR	1296576	PrimaryExpression	0		1296425	1					
ANR	1296577	ExpressionStatement	dot = - dot	1642:8:70196:70206	1296425	1	True				
ANR	1296578	AssignmentExpression	dot = - dot		1296425	0		=			
ANR	1296579	Identifier	dot		1296425	0					
ANR	1296580	UnaryOperationExpression	- dot		1296425	1					
ANR	1296581	UnaryOperator	-		1296425	0					
ANR	1296582	Identifier	dot		1296425	1					
ANR	1296583	IfStatement	if ( dot > h_squared )		1296425	7					
ANR	1296584	Condition	dot > h_squared	1643:8:70216:70230	1296425	0	True				
ANR	1296585	RelationalExpression	dot > h_squared		1296425	0		>			
ANR	1296586	Identifier	dot		1296425	0					
ANR	1296587	Identifier	h_squared		1296425	1					
ANR	1296588	ReturnStatement	return 1 ;	1644:8:70241:70249	1296425	1	True				
ANR	1296589	PrimaryExpression	1		1296425	0					
ANR	1296590	ReturnStatement	return 0 ;	1646:4:70256:70264	1296425	8	True				
ANR	1296591	PrimaryExpression	0		1296425	0					
ANR	1296592	ReturnType	static bool		1296425	1					
ANR	1296593	Identifier	wide_underjoin		1296425	2					
ANR	1296594	ParameterList	"pl_ptr plp , pl_ptr nplp"		1296425	3					
ANR	1296595	Parameter	pl_ptr plp	1629:15:69676:69685	1296425	0	True				
ANR	1296596	ParameterType	pl_ptr		1296425	0					
ANR	1296597	Identifier	plp		1296425	1					
ANR	1296598	Parameter	pl_ptr nplp	1629:27:69688:69698	1296425	1	True				
ANR	1296599	ParameterType	pl_ptr		1296425	0					
ANR	1296600	Identifier	nplp		1296425	1					
ANR	1296601	CFGEntryNode	ENTRY		1296425		True				
ANR	1296602	CFGExitNode	EXIT		1296425		True				
ANR	1296603	Symbol	plp -> width . y		1296425						
ANR	1296604	Symbol	plp -> width . x		1296425						
ANR	1296605	Symbol	nplp -> vector		1296425						
ANR	1296606	Symbol	dot		1296425						
ANR	1296607	Symbol	h_squared		1296425						
ANR	1296608	Symbol	plp -> width		1296425						
ANR	1296609	Symbol	nplp -> width . y		1296425						
ANR	1296610	Symbol	nplp -> width		1296425						
ANR	1296611	Symbol	plp -> vector		1296425						
ANR	1296612	Symbol	plp		1296425						
ANR	1296613	Symbol	nplp		1296425						
ANR	1296614	Symbol	nplp -> vector . x		1296425						
ANR	1296615	Symbol	nplp -> vector . y		1296425						
ANR	1296616	Symbol	plp -> vector . y		1296425						
ANR	1296617	Symbol	plp -> vector . x		1296425						
ANR	1296618	Symbol	* nplp		1296425						
ANR	1296619	Symbol	* plp		1296425						
ANR	1296620	Symbol	nplp -> width . x		1296425						
ANR	1296621	Function	stroke_add_fast	1653:0:70402:80962							
ANR	1296622	FunctionDef	"stroke_add_fast (gx_path * ppath , gx_path * rpath , bool ensure_closed , int first , pl_ptr plp , pl_ptr nplp , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs , const gx_stroke_params * params , const gs_fixed_rect * ignore_pbbox , int uniform , gs_line_join join , bool reflected , note_flags flags)"		1296621	0					
ANR	1296623	CompoundStatement		1660:0:70805:80962	1296621	0					
ANR	1296624	IdentifierDeclStatement	const gx_line_params * pgs_lp = gs_currentlineparams_inline ( pgs ) ;	1661:4:70811:70874	1296621	0	True				
ANR	1296625	IdentifierDecl	* pgs_lp = gs_currentlineparams_inline ( pgs )		1296621	0					
ANR	1296626	IdentifierDeclType	const gx_line_params *		1296621	0					
ANR	1296627	Identifier	pgs_lp		1296621	1					
ANR	1296628	AssignmentExpression	* pgs_lp = gs_currentlineparams_inline ( pgs )		1296621	2		=			
ANR	1296629	Identifier	pgs_lp		1296621	0					
ANR	1296630	CallExpression	gs_currentlineparams_inline ( pgs )		1296621	1					
ANR	1296631	Callee	gs_currentlineparams_inline		1296621	0					
ANR	1296632	Identifier	gs_currentlineparams_inline		1296621	0					
ANR	1296633	ArgumentList	pgs		1296621	1					
ANR	1296634	Argument	pgs		1296621	0					
ANR	1296635	Identifier	pgs		1296621	0					
ANR	1296636	IdentifierDeclStatement	gs_fixed_point points [ 8 ] ;	1662:4:70880:70904	1296621	1	True				
ANR	1296637	IdentifierDecl	points [ 8 ]		1296621	0					
ANR	1296638	IdentifierDeclType	gs_fixed_point [ 8 ]		1296621	0					
ANR	1296639	Identifier	points		1296621	1					
ANR	1296640	PrimaryExpression	8		1296621	2					
ANR	1296641	IdentifierDeclStatement	gs_fixed_point rpoints [ 8 ] ;	1663:4:70910:70935	1296621	2	True				
ANR	1296642	IdentifierDecl	rpoints [ 8 ]		1296621	0					
ANR	1296643	IdentifierDeclType	gs_fixed_point [ 8 ]		1296621	0					
ANR	1296644	Identifier	rpoints		1296621	1					
ANR	1296645	PrimaryExpression	8		1296621	2					
ANR	1296646	IdentifierDeclStatement	int npoints = 0 ;	1664:4:70941:70957	1296621	3	True				
ANR	1296647	IdentifierDecl	npoints = 0		1296621	0					
ANR	1296648	IdentifierDeclType	int		1296621	0					
ANR	1296649	Identifier	npoints		1296621	1					
ANR	1296650	AssignmentExpression	npoints = 0		1296621	2		=			
ANR	1296651	Identifier	npoints		1296621	0					
ANR	1296652	PrimaryExpression	0		1296621	1					
ANR	1296653	IdentifierDeclStatement	int nrpoints = 0 ;	1665:4:70963:70979	1296621	4	True				
ANR	1296654	IdentifierDecl	nrpoints = 0		1296621	0					
ANR	1296655	IdentifierDeclType	int		1296621	0					
ANR	1296656	Identifier	nrpoints		1296621	1					
ANR	1296657	AssignmentExpression	nrpoints = 0		1296621	2		=			
ANR	1296658	Identifier	nrpoints		1296621	0					
ANR	1296659	PrimaryExpression	0		1296621	1					
ANR	1296660	IdentifierDeclStatement	int code ;	1666:4:70985:70993	1296621	5	True				
ANR	1296661	IdentifierDecl	code		1296621	0					
ANR	1296662	IdentifierDeclType	int		1296621	0					
ANR	1296663	Identifier	code		1296621	1					
ANR	1296664	IdentifierDeclStatement	bool moveto_first = false ;	1667:4:70999:71025	1296621	6	True				
ANR	1296665	IdentifierDecl	moveto_first = false		1296621	0					
ANR	1296666	IdentifierDeclType	bool		1296621	0					
ANR	1296667	Identifier	moveto_first		1296621	1					
ANR	1296668	AssignmentExpression	moveto_first = false		1296621	2		=			
ANR	1296669	Identifier	false		1296621	0					
ANR	1296670	Identifier	false		1296621	1					
ANR	1296671	IdentifierDeclStatement	bool rmoveto_first = false ;	1668:4:71031:71057	1296621	7	True				
ANR	1296672	IdentifierDecl	rmoveto_first = false		1296621	0					
ANR	1296673	IdentifierDeclType	bool		1296621	0					
ANR	1296674	Identifier	rmoveto_first		1296621	1					
ANR	1296675	AssignmentExpression	rmoveto_first = false		1296621	2		=			
ANR	1296676	Identifier	false		1296621	0					
ANR	1296677	Identifier	false		1296621	1					
ANR	1296678	IdentifierDeclStatement	"gs_line_cap start_cap , end_cap ;"	1669:4:71063:71093	1296621	8	True				
ANR	1296679	IdentifierDecl	start_cap		1296621	0					
ANR	1296680	IdentifierDeclType	gs_line_cap		1296621	0					
ANR	1296681	Identifier	start_cap		1296621	1					
ANR	1296682	IdentifierDecl	end_cap		1296621	1					
ANR	1296683	IdentifierDeclType	gs_line_cap		1296621	0					
ANR	1296684	Identifier	end_cap		1296621	1					
ANR	1296685	IfStatement	if ( plp -> thin )		1296621	9					
ANR	1296686	Condition	plp -> thin	1671:8:71104:71112	1296621	0	True				
ANR	1296687	PtrMemberAccess	plp -> thin		1296621	0					
ANR	1296688	Identifier	plp		1296621	0					
ANR	1296689	Identifier	thin		1296621	1					
ANR	1296690	CompoundStatement		12:19:309:309	1296621	1					
ANR	1296691	ExpressionStatement	set_thin_widths ( plp )	1674:8:71241:71261	1296621	0	True				
ANR	1296692	CallExpression	set_thin_widths ( plp )		1296621	0					
ANR	1296693	Callee	set_thin_widths		1296621	0					
ANR	1296694	Identifier	set_thin_widths		1296621	0					
ANR	1296695	ArgumentList	plp		1296621	1					
ANR	1296696	Argument	plp		1296621	0					
ANR	1296697	Identifier	plp		1296621	0					
ANR	1296698	ExpressionStatement	"adjust_stroke ( dev , plp , pgs , true , first == 0 && nplp == 0 , flags )"	1675:8:71271:71337	1296621	1	True				
ANR	1296699	CallExpression	"adjust_stroke ( dev , plp , pgs , true , first == 0 && nplp == 0 , flags )"		1296621	0					
ANR	1296700	Callee	adjust_stroke		1296621	0					
ANR	1296701	Identifier	adjust_stroke		1296621	0					
ANR	1296702	ArgumentList	dev		1296621	1					
ANR	1296703	Argument	dev		1296621	0					
ANR	1296704	Identifier	dev		1296621	0					
ANR	1296705	Argument	plp		1296621	1					
ANR	1296706	Identifier	plp		1296621	0					
ANR	1296707	Argument	pgs		1296621	2					
ANR	1296708	Identifier	pgs		1296621	0					
ANR	1296709	Argument	true		1296621	3					
ANR	1296710	Identifier	true		1296621	0					
ANR	1296711	Argument	first == 0 && nplp == 0		1296621	4					
ANR	1296712	AndExpression	first == 0 && nplp == 0		1296621	0		&&			
ANR	1296713	EqualityExpression	first == 0		1296621	0		==			
ANR	1296714	Identifier	first		1296621	0					
ANR	1296715	PrimaryExpression	0		1296621	1					
ANR	1296716	EqualityExpression	nplp == 0		1296621	1		==			
ANR	1296717	Identifier	nplp		1296621	0					
ANR	1296718	PrimaryExpression	0		1296621	1					
ANR	1296719	Argument	flags		1296621	5					
ANR	1296720	Identifier	flags		1296621	0					
ANR	1296721	ExpressionStatement	compute_caps ( plp )	1676:8:71347:71364	1296621	2	True				
ANR	1296722	CallExpression	compute_caps ( plp )		1296621	0					
ANR	1296723	Callee	compute_caps		1296621	0					
ANR	1296724	Identifier	compute_caps		1296621	0					
ANR	1296725	ArgumentList	plp		1296621	1					
ANR	1296726	Argument	plp		1296621	0					
ANR	1296727	Identifier	plp		1296621	0					
ANR	1296728	ExpressionStatement	start_cap = ( flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap )	1678:4:71376:71466	1296621	10	True				
ANR	1296729	AssignmentExpression	start_cap = ( flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap )		1296621	0		=			
ANR	1296730	Identifier	start_cap		1296621	0					
ANR	1296731	ConditionalExpression	flags & nf_dash_head ? pgs_lp -> dash_cap : pgs_lp -> start_cap		1296621	1					
ANR	1296732	Condition	flags & nf_dash_head		1296621	0					
ANR	1296733	BitAndExpression	flags & nf_dash_head		1296621	0		&			
ANR	1296734	Identifier	flags		1296621	0					
ANR	1296735	Identifier	nf_dash_head		1296621	1					
ANR	1296736	PtrMemberAccess	pgs_lp -> dash_cap		1296621	1					
ANR	1296737	Identifier	pgs_lp		1296621	0					
ANR	1296738	Identifier	dash_cap		1296621	1					
ANR	1296739	PtrMemberAccess	pgs_lp -> start_cap		1296621	2					
ANR	1296740	Identifier	pgs_lp		1296621	0					
ANR	1296741	Identifier	start_cap		1296621	1					
ANR	1296742	ExpressionStatement	end_cap = ( flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap )	1680:4:71472:71560	1296621	11	True				
ANR	1296743	AssignmentExpression	end_cap = ( flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap )		1296621	0		=			
ANR	1296744	Identifier	end_cap		1296621	0					
ANR	1296745	ConditionalExpression	flags & nf_dash_tail ? pgs_lp -> dash_cap : pgs_lp -> end_cap		1296621	1					
ANR	1296746	Condition	flags & nf_dash_tail		1296621	0					
ANR	1296747	BitAndExpression	flags & nf_dash_tail		1296621	0		&			
ANR	1296748	Identifier	flags		1296621	0					
ANR	1296749	Identifier	nf_dash_tail		1296621	1					
ANR	1296750	PtrMemberAccess	pgs_lp -> dash_cap		1296621	1					
ANR	1296751	Identifier	pgs_lp		1296621	0					
ANR	1296752	Identifier	dash_cap		1296621	1					
ANR	1296753	PtrMemberAccess	pgs_lp -> end_cap		1296621	2					
ANR	1296754	Identifier	pgs_lp		1296621	0					
ANR	1296755	Identifier	end_cap		1296621	1					
ANR	1296756	IfStatement	if ( gx_path_is_void ( rpath ) && ( first != 0 ) )		1296621	12					
ANR	1296757	Condition	gx_path_is_void ( rpath ) && ( first != 0 )	1684:8:71708:71745	1296621	0	True				
ANR	1296758	AndExpression	gx_path_is_void ( rpath ) && ( first != 0 )		1296621	0		&&			
ANR	1296759	CallExpression	gx_path_is_void ( rpath )		1296621	0					
ANR	1296760	Callee	gx_path_is_void		1296621	0					
ANR	1296761	Identifier	gx_path_is_void		1296621	0					
ANR	1296762	ArgumentList	rpath		1296621	1					
ANR	1296763	Argument	rpath		1296621	0					
ANR	1296764	Identifier	rpath		1296621	0					
ANR	1296765	EqualityExpression	first != 0		1296621	1		!=			
ANR	1296766	Identifier	first		1296621	0					
ANR	1296767	PrimaryExpression	0		1296621	1					
ANR	1296768	CompoundStatement		25:48:942:942	1296621	1					
ANR	1296769	ExpressionStatement	first = 0	1685:8:71758:71767	1296621	0	True				
ANR	1296770	AssignmentExpression	first = 0		1296621	0		=			
ANR	1296771	Identifier	first		1296621	0					
ANR	1296772	PrimaryExpression	0		1296621	1					
ANR	1296773	ExpressionStatement	start_cap = gs_cap_butt	1686:8:71777:71800	1296621	1	True				
ANR	1296774	AssignmentExpression	start_cap = gs_cap_butt		1296621	0		=			
ANR	1296775	Identifier	start_cap		1296621	0					
ANR	1296776	Identifier	gs_cap_butt		1296621	1					
ANR	1296777	ExpressionStatement	end_cap = gs_cap_butt	1687:8:71810:71833	1296621	2	True				
ANR	1296778	AssignmentExpression	end_cap = gs_cap_butt		1296621	0		=			
ANR	1296779	Identifier	end_cap		1296621	0					
ANR	1296780	Identifier	gs_cap_butt		1296621	1					
ANR	1296781	ExpressionStatement	moveto_first = true	1688:8:71843:71863	1296621	3	True				
ANR	1296782	AssignmentExpression	moveto_first = true		1296621	0		=			
ANR	1296783	Identifier	moveto_first		1296621	0					
ANR	1296784	Identifier	true		1296621	1					
ANR	1296785	ExpressionStatement	rmoveto_first = true	1689:8:71873:71893	1296621	4	True				
ANR	1296786	AssignmentExpression	rmoveto_first = true		1296621	0		=			
ANR	1296787	Identifier	rmoveto_first		1296621	0					
ANR	1296788	Identifier	true		1296621	1					
ANR	1296789	IfStatement	if ( first == 0 )		1296621	13					
ANR	1296790	Condition	first == 0	1691:8:71909:71918	1296621	0	True				
ANR	1296791	EqualityExpression	first == 0		1296621	0		==			
ANR	1296792	Identifier	first		1296621	0					
ANR	1296793	PrimaryExpression	0		1296621	1					
ANR	1296794	CompoundStatement		32:20:1115:1115	1296621	1					
ANR	1296795	IfStatement	if ( start_cap == gs_cap_round )		1296621	0					
ANR	1296796	Condition	start_cap == gs_cap_round	1693:12:71972:71996	1296621	0	True				
ANR	1296797	EqualityExpression	start_cap == gs_cap_round		1296621	0		==			
ANR	1296798	Identifier	start_cap		1296621	0					
ANR	1296799	Identifier	gs_cap_round		1296621	1					
ANR	1296800	CompoundStatement		34:39:1193:1193	1296621	1					
ANR	1296801	IfStatement	"if ( ( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = add_pie_cap ( ppath , & plp -> o ) ) < 0 )"		1296621	0					
ANR	1296802	Condition	"( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = add_pie_cap ( ppath , & plp -> o ) ) < 0"	1694:16:72017:72139	1296621	0	True				
ANR	1296803	OrExpression	"( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = add_pie_cap ( ppath , & plp -> o ) ) < 0"		1296621	0		||			
ANR	1296804	RelationalExpression	"( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0"		1296621	0		<			
ANR	1296805	AssignmentExpression	"code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y )"		1296621	0		=			
ANR	1296806	Identifier	code		1296621	0					
ANR	1296807	CallExpression	"gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y )"		1296621	1					
ANR	1296808	Callee	gx_path_add_point		1296621	0					
ANR	1296809	Identifier	gx_path_add_point		1296621	0					
ANR	1296810	ArgumentList	ppath		1296621	1					
ANR	1296811	Argument	ppath		1296621	0					
ANR	1296812	Identifier	ppath		1296621	0					
ANR	1296813	Argument	plp -> o . co . x		1296621	1					
ANR	1296814	MemberAccess	plp -> o . co . x		1296621	0					
ANR	1296815	MemberAccess	plp -> o . co		1296621	0					
ANR	1296816	PtrMemberAccess	plp -> o		1296621	0					
ANR	1296817	Identifier	plp		1296621	0					
ANR	1296818	Identifier	o		1296621	1					
ANR	1296819	Identifier	co		1296621	1					
ANR	1296820	Identifier	x		1296621	1					
ANR	1296821	Argument	plp -> o . co . y		1296621	2					
ANR	1296822	MemberAccess	plp -> o . co . y		1296621	0					
ANR	1296823	MemberAccess	plp -> o . co		1296621	0					
ANR	1296824	PtrMemberAccess	plp -> o		1296621	0					
ANR	1296825	Identifier	plp		1296621	0					
ANR	1296826	Identifier	o		1296621	1					
ANR	1296827	Identifier	co		1296621	1					
ANR	1296828	Identifier	y		1296621	1					
ANR	1296829	PrimaryExpression	0		1296621	1					
ANR	1296830	RelationalExpression	"( code = add_pie_cap ( ppath , & plp -> o ) ) < 0"		1296621	1		<			
ANR	1296831	AssignmentExpression	"code = add_pie_cap ( ppath , & plp -> o )"		1296621	0		=			
ANR	1296832	Identifier	code		1296621	0					
ANR	1296833	CallExpression	"add_pie_cap ( ppath , & plp -> o )"		1296621	1					
ANR	1296834	Callee	add_pie_cap		1296621	0					
ANR	1296835	Identifier	add_pie_cap		1296621	0					
ANR	1296836	ArgumentList	ppath		1296621	1					
ANR	1296837	Argument	ppath		1296621	0					
ANR	1296838	Identifier	ppath		1296621	0					
ANR	1296839	Argument	& plp -> o		1296621	1					
ANR	1296840	UnaryOperationExpression	& plp -> o		1296621	0					
ANR	1296841	UnaryOperator	&		1296621	0					
ANR	1296842	PtrMemberAccess	plp -> o		1296621	1					
ANR	1296843	Identifier	plp		1296621	0					
ANR	1296844	Identifier	o		1296621	1					
ANR	1296845	PrimaryExpression	0		1296621	1					
ANR	1296846	ReturnStatement	return code ;	1696:16:72158:72169	1296621	1	True				
ANR	1296847	Identifier	code		1296621	0					
ANR	1296848	ExpressionStatement	moveto_first = false	1697:12:72183:72203	1296621	1	True				
ANR	1296849	AssignmentExpression	moveto_first = false		1296621	0		=			
ANR	1296850	Identifier	moveto_first		1296621	0					
ANR	1296851	Identifier	false		1296621	1					
ANR	1296852	ElseStatement	else		1296621	0					
ANR	1296853	CompoundStatement		39:15:1414:1414	1296621	0					
ANR	1296854	IfStatement	"if ( ( npoints = cap_points ( start_cap , & plp -> o , points ) ) < 0 )"		1296621	0					
ANR	1296855	Condition	"( npoints = cap_points ( start_cap , & plp -> o , points ) ) < 0"	1699:16:72238:72291	1296621	0	True				
ANR	1296856	RelationalExpression	"( npoints = cap_points ( start_cap , & plp -> o , points ) ) < 0"		1296621	0		<			
ANR	1296857	AssignmentExpression	"npoints = cap_points ( start_cap , & plp -> o , points )"		1296621	0		=			
ANR	1296858	Identifier	npoints		1296621	0					
ANR	1296859	CallExpression	"cap_points ( start_cap , & plp -> o , points )"		1296621	1					
ANR	1296860	Callee	cap_points		1296621	0					
ANR	1296861	Identifier	cap_points		1296621	0					
ANR	1296862	ArgumentList	start_cap		1296621	1					
ANR	1296863	Argument	start_cap		1296621	0					
ANR	1296864	Identifier	start_cap		1296621	0					
ANR	1296865	Argument	& plp -> o		1296621	1					
ANR	1296866	UnaryOperationExpression	& plp -> o		1296621	0					
ANR	1296867	UnaryOperator	&		1296621	0					
ANR	1296868	PtrMemberAccess	plp -> o		1296621	1					
ANR	1296869	Identifier	plp		1296621	0					
ANR	1296870	Identifier	o		1296621	1					
ANR	1296871	Argument	points		1296621	2					
ANR	1296872	Identifier	points		1296621	0					
ANR	1296873	PrimaryExpression	0		1296621	1					
ANR	1296874	ReturnStatement	return npoints ;	1700:16:72310:72324	1296621	1	True				
ANR	1296875	Identifier	npoints		1296621	0					
ANR	1296876	ExpressionStatement	moveto_first = true	1701:12:72338:72357	1296621	1	True				
ANR	1296877	AssignmentExpression	moveto_first = true		1296621	0		=			
ANR	1296878	Identifier	moveto_first		1296621	0					
ANR	1296879	Identifier	true		1296621	1					
ANR	1296880	ExpressionStatement	rmoveto_first = true	1703:8:72377:72397	1296621	1	True				
ANR	1296881	AssignmentExpression	rmoveto_first = true		1296621	0		=			
ANR	1296882	Identifier	rmoveto_first		1296621	0					
ANR	1296883	Identifier	true		1296621	1					
ANR	1296884	ExpressionStatement	"ASSIGN_POINT ( & rpoints [ 0 ] , plp -> o . co )"	1704:8:72407:72443	1296621	2	True				
ANR	1296885	CallExpression	"ASSIGN_POINT ( & rpoints [ 0 ] , plp -> o . co )"		1296621	0					
ANR	1296886	Callee	ASSIGN_POINT		1296621	0					
ANR	1296887	Identifier	ASSIGN_POINT		1296621	0					
ANR	1296888	ArgumentList	& rpoints [ 0 ]		1296621	1					
ANR	1296889	Argument	& rpoints [ 0 ]		1296621	0					
ANR	1296890	UnaryOperationExpression	& rpoints [ 0 ]		1296621	0					
ANR	1296891	UnaryOperator	&		1296621	0					
ANR	1296892	ArrayIndexing	rpoints [ 0 ]		1296621	1					
ANR	1296893	Identifier	rpoints		1296621	0					
ANR	1296894	PrimaryExpression	0		1296621	1					
ANR	1296895	Argument	plp -> o . co		1296621	1					
ANR	1296896	MemberAccess	plp -> o . co		1296621	0					
ANR	1296897	PtrMemberAccess	plp -> o		1296621	0					
ANR	1296898	Identifier	plp		1296621	0					
ANR	1296899	Identifier	o		1296621	1					
ANR	1296900	Identifier	co		1296621	1					
ANR	1296901	ExpressionStatement	nrpoints = 1	1705:8:72453:72465	1296621	3	True				
ANR	1296902	AssignmentExpression	nrpoints = 1		1296621	0		=			
ANR	1296903	Identifier	nrpoints		1296621	0					
ANR	1296904	PrimaryExpression	1		1296621	1					
ANR	1296905	ExpressionStatement	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"	1708:4:72540:72583	1296621	14	True				
ANR	1296906	CallExpression	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"		1296621	0					
ANR	1296907	Callee	ASSIGN_POINT		1296621	0					
ANR	1296908	Identifier	ASSIGN_POINT		1296621	0					
ANR	1296909	ArgumentList	& points [ npoints ]		1296621	1					
ANR	1296910	Argument	& points [ npoints ]		1296621	0					
ANR	1296911	UnaryOperationExpression	& points [ npoints ]		1296621	0					
ANR	1296912	UnaryOperator	&		1296621	0					
ANR	1296913	ArrayIndexing	points [ npoints ]		1296621	1					
ANR	1296914	Identifier	points		1296621	0					
ANR	1296915	Identifier	npoints		1296621	1					
ANR	1296916	Argument	plp -> e . co		1296621	1					
ANR	1296917	MemberAccess	plp -> e . co		1296621	0					
ANR	1296918	PtrMemberAccess	plp -> e		1296621	0					
ANR	1296919	Identifier	plp		1296621	0					
ANR	1296920	Identifier	e		1296621	1					
ANR	1296921	Identifier	co		1296621	1					
ANR	1296922	ExpressionStatement	"ASSIGN_POINT ( & rpoints [ nrpoints ] , plp -> e . ce )"	1709:4:72589:72632	1296621	15	True				
ANR	1296923	CallExpression	"ASSIGN_POINT ( & rpoints [ nrpoints ] , plp -> e . ce )"		1296621	0					
ANR	1296924	Callee	ASSIGN_POINT		1296621	0					
ANR	1296925	Identifier	ASSIGN_POINT		1296621	0					
ANR	1296926	ArgumentList	& rpoints [ nrpoints ]		1296621	1					
ANR	1296927	Argument	& rpoints [ nrpoints ]		1296621	0					
ANR	1296928	UnaryOperationExpression	& rpoints [ nrpoints ]		1296621	0					
ANR	1296929	UnaryOperator	&		1296621	0					
ANR	1296930	ArrayIndexing	rpoints [ nrpoints ]		1296621	1					
ANR	1296931	Identifier	rpoints		1296621	0					
ANR	1296932	Identifier	nrpoints		1296621	1					
ANR	1296933	Argument	plp -> e . ce		1296621	1					
ANR	1296934	MemberAccess	plp -> e . ce		1296621	0					
ANR	1296935	PtrMemberAccess	plp -> e		1296621	0					
ANR	1296936	Identifier	plp		1296621	0					
ANR	1296937	Identifier	e		1296621	1					
ANR	1296938	Identifier	ce		1296621	1					
ANR	1296939	ExpressionStatement	npoints ++	1710:4:72638:72647	1296621	16	True				
ANR	1296940	PostIncDecOperationExpression	npoints ++		1296621	0					
ANR	1296941	Identifier	npoints		1296621	0					
ANR	1296942	IncDec	++		1296621	1					
ANR	1296943	ExpressionStatement	nrpoints ++	1711:4:72653:72663	1296621	17	True				
ANR	1296944	PostIncDecOperationExpression	nrpoints ++		1296621	0					
ANR	1296945	Identifier	nrpoints		1296621	0					
ANR	1296946	IncDec	++		1296621	1					
ANR	1296947	IfStatement	"if ( ( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0 )"		1296621	18					
ANR	1296948	Condition	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"	1712:8:72673:72733	1296621	0	True				
ANR	1296949	RelationalExpression	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"		1296621	0		<			
ANR	1296950	AssignmentExpression	"code = add_points ( ppath , points , npoints , moveto_first )"		1296621	0		=			
ANR	1296951	Identifier	code		1296621	0					
ANR	1296952	CallExpression	"add_points ( ppath , points , npoints , moveto_first )"		1296621	1					
ANR	1296953	Callee	add_points		1296621	0					
ANR	1296954	Identifier	add_points		1296621	0					
ANR	1296955	ArgumentList	ppath		1296621	1					
ANR	1296956	Argument	ppath		1296621	0					
ANR	1296957	Identifier	ppath		1296621	0					
ANR	1296958	Argument	points		1296621	1					
ANR	1296959	Identifier	points		1296621	0					
ANR	1296960	Argument	npoints		1296621	2					
ANR	1296961	Identifier	npoints		1296621	0					
ANR	1296962	Argument	moveto_first		1296621	3					
ANR	1296963	Identifier	moveto_first		1296621	0					
ANR	1296964	PrimaryExpression	0		1296621	1					
ANR	1296965	ReturnStatement	return code ;	1713:8:72744:72755	1296621	1	True				
ANR	1296966	Identifier	code		1296621	0					
ANR	1296967	IfStatement	"if ( ( code = add_points ( rpath , rpoints , nrpoints , rmoveto_first ) ) < 0 )"		1296621	19					
ANR	1296968	Condition	"( code = add_points ( rpath , rpoints , nrpoints , rmoveto_first ) ) < 0"	1714:8:72765:72828	1296621	0	True				
ANR	1296969	RelationalExpression	"( code = add_points ( rpath , rpoints , nrpoints , rmoveto_first ) ) < 0"		1296621	0		<			
ANR	1296970	AssignmentExpression	"code = add_points ( rpath , rpoints , nrpoints , rmoveto_first )"		1296621	0		=			
ANR	1296971	Identifier	code		1296621	0					
ANR	1296972	CallExpression	"add_points ( rpath , rpoints , nrpoints , rmoveto_first )"		1296621	1					
ANR	1296973	Callee	add_points		1296621	0					
ANR	1296974	Identifier	add_points		1296621	0					
ANR	1296975	ArgumentList	rpath		1296621	1					
ANR	1296976	Argument	rpath		1296621	0					
ANR	1296977	Identifier	rpath		1296621	0					
ANR	1296978	Argument	rpoints		1296621	1					
ANR	1296979	Identifier	rpoints		1296621	0					
ANR	1296980	Argument	nrpoints		1296621	2					
ANR	1296981	Identifier	nrpoints		1296621	0					
ANR	1296982	Argument	rmoveto_first		1296621	3					
ANR	1296983	Identifier	rmoveto_first		1296621	0					
ANR	1296984	PrimaryExpression	0		1296621	1					
ANR	1296985	ReturnStatement	return code ;	1715:8:72839:72850	1296621	1	True				
ANR	1296986	Identifier	code		1296621	0					
ANR	1296987	ExpressionStatement	npoints = 0	1716:4:72856:72868	1296621	20	True				
ANR	1296988	AssignmentExpression	npoints = 0		1296621	0		=			
ANR	1296989	Identifier	npoints		1296621	0					
ANR	1296990	PrimaryExpression	0		1296621	1					
ANR	1296991	ExpressionStatement	nrpoints = 0	1717:4:72874:72886	1296621	21	True				
ANR	1296992	AssignmentExpression	nrpoints = 0		1296621	0		=			
ANR	1296993	Identifier	nrpoints		1296621	0					
ANR	1296994	PrimaryExpression	0		1296621	1					
ANR	1296995	IfStatement	if ( nplp == 0 )		1296621	22					
ANR	1296996	Condition	nplp == 0	1719:8:72897:72905	1296621	0	True				
ANR	1296997	EqualityExpression	nplp == 0		1296621	0		==			
ANR	1296998	Identifier	nplp		1296621	0					
ANR	1296999	PrimaryExpression	0		1296621	1					
ANR	1297000	CompoundStatement		60:19:2102:2102	1296621	1					
ANR	1297001	IfStatement	if ( end_cap == gs_cap_round )		1296621	0					
ANR	1297002	Condition	end_cap == gs_cap_round	1720:12:72945:72967	1296621	0	True				
ANR	1297003	EqualityExpression	end_cap == gs_cap_round		1296621	0		==			
ANR	1297004	Identifier	end_cap		1296621	0					
ANR	1297005	Identifier	gs_cap_round		1296621	1					
ANR	1297006	CompoundStatement		61:37:2164:2164	1296621	1					
ANR	1297007	ExpressionStatement	"code = add_pie_cap ( ppath , & plp -> e )"	1721:12:72984:73018	1296621	0	True				
ANR	1297008	AssignmentExpression	"code = add_pie_cap ( ppath , & plp -> e )"		1296621	0		=			
ANR	1297009	Identifier	code		1296621	0					
ANR	1297010	CallExpression	"add_pie_cap ( ppath , & plp -> e )"		1296621	1					
ANR	1297011	Callee	add_pie_cap		1296621	0					
ANR	1297012	Identifier	add_pie_cap		1296621	0					
ANR	1297013	ArgumentList	ppath		1296621	1					
ANR	1297014	Argument	ppath		1296621	0					
ANR	1297015	Identifier	ppath		1296621	0					
ANR	1297016	Argument	& plp -> e		1296621	1					
ANR	1297017	UnaryOperationExpression	& plp -> e		1296621	0					
ANR	1297018	UnaryOperator	&		1296621	0					
ANR	1297019	PtrMemberAccess	plp -> e		1296621	1					
ANR	1297020	Identifier	plp		1296621	0					
ANR	1297021	Identifier	e		1296621	1					
ANR	1297022	ElseStatement	else		1296621	0					
ANR	1297023	CompoundStatement		63:15:2229:2229	1296621	0					
ANR	1297024	ExpressionStatement	"code = cap_points ( end_cap , & plp -> e , points )"	1723:12:73049:73092	1296621	0	True				
ANR	1297025	AssignmentExpression	"code = cap_points ( end_cap , & plp -> e , points )"		1296621	0		=			
ANR	1297026	Identifier	code		1296621	0					
ANR	1297027	CallExpression	"cap_points ( end_cap , & plp -> e , points )"		1296621	1					
ANR	1297028	Callee	cap_points		1296621	0					
ANR	1297029	Identifier	cap_points		1296621	0					
ANR	1297030	ArgumentList	end_cap		1296621	1					
ANR	1297031	Argument	end_cap		1296621	0					
ANR	1297032	Identifier	end_cap		1296621	0					
ANR	1297033	Argument	& plp -> e		1296621	1					
ANR	1297034	UnaryOperationExpression	& plp -> e		1296621	0					
ANR	1297035	UnaryOperator	&		1296621	0					
ANR	1297036	PtrMemberAccess	plp -> e		1296621	1					
ANR	1297037	Identifier	plp		1296621	0					
ANR	1297038	Identifier	e		1296621	1					
ANR	1297039	Argument	points		1296621	2					
ANR	1297040	Identifier	points		1296621	0					
ANR	1297041	ExpressionStatement	npoints = code	1724:12:73106:73120	1296621	1	True				
ANR	1297042	AssignmentExpression	npoints = code		1296621	0		=			
ANR	1297043	Identifier	npoints		1296621	0					
ANR	1297044	Identifier	code		1296621	1					
ANR	1297045	ElseStatement	else		1296621	0					
ANR	1297046	IfStatement	if ( nplp -> thin )		1296621	0					
ANR	1297047	Condition	nplp -> thin	1726:15:73147:73156	1296621	0	True				
ANR	1297048	PtrMemberAccess	nplp -> thin		1296621	0					
ANR	1297049	Identifier	nplp		1296621	0					
ANR	1297050	Identifier	thin		1296621	1					
ANR	1297051	CompoundStatement		67:27:2353:2353	1296621	1					
ANR	1297052	ExpressionStatement	"code = cap_points ( gs_cap_butt , & plp -> e , points )"	1727:8:73183:73230	1296621	0	True				
ANR	1297053	AssignmentExpression	"code = cap_points ( gs_cap_butt , & plp -> e , points )"		1296621	0		=			
ANR	1297054	Identifier	code		1296621	0					
ANR	1297055	CallExpression	"cap_points ( gs_cap_butt , & plp -> e , points )"		1296621	1					
ANR	1297056	Callee	cap_points		1296621	0					
ANR	1297057	Identifier	cap_points		1296621	0					
ANR	1297058	ArgumentList	gs_cap_butt		1296621	1					
ANR	1297059	Argument	gs_cap_butt		1296621	0					
ANR	1297060	Identifier	gs_cap_butt		1296621	0					
ANR	1297061	Argument	& plp -> e		1296621	1					
ANR	1297062	UnaryOperationExpression	& plp -> e		1296621	0					
ANR	1297063	UnaryOperator	&		1296621	0					
ANR	1297064	PtrMemberAccess	plp -> e		1296621	1					
ANR	1297065	Identifier	plp		1296621	0					
ANR	1297066	Identifier	e		1296621	1					
ANR	1297067	Argument	points		1296621	2					
ANR	1297068	Identifier	points		1296621	0					
ANR	1297069	ExpressionStatement	npoints = code	1728:8:73240:73254	1296621	1	True				
ANR	1297070	AssignmentExpression	npoints = code		1296621	0		=			
ANR	1297071	Identifier	npoints		1296621	0					
ANR	1297072	Identifier	code		1296621	1					
ANR	1297073	ElseStatement	else		1296621	0					
ANR	1297074	CompoundStatement		72:8:2506:2517	1296621	0					
ANR	1297075	IdentifierDeclStatement	"double l , r ;"	1731:8:73312:73323	1296621	0	True				
ANR	1297076	IdentifierDecl	l		1296621	0					
ANR	1297077	IdentifierDeclType	double		1296621	0					
ANR	1297078	Identifier	l		1296621	1					
ANR	1297079	IdentifierDecl	r		1296621	1					
ANR	1297080	IdentifierDeclType	double		1296621	0					
ANR	1297081	Identifier	r		1296621	1					
ANR	1297082	ExpressionStatement	l = ( double ) ( plp -> width . x ) * ( nplp -> width . y )	1733:8:73334:73396	1296621	1	True				
ANR	1297083	AssignmentExpression	l = ( double ) ( plp -> width . x ) * ( nplp -> width . y )		1296621	0		=			
ANR	1297084	Identifier	l		1296621	0					
ANR	1297085	MultiplicativeExpression	( double ) ( plp -> width . x ) * ( nplp -> width . y )		1296621	1		*			
ANR	1297086	CastExpression	( double ) ( plp -> width . x )		1296621	0					
ANR	1297087	CastTarget	double		1296621	0					
ANR	1297088	MemberAccess	plp -> width . x		1296621	1					
ANR	1297089	PtrMemberAccess	plp -> width		1296621	0					
ANR	1297090	Identifier	plp		1296621	0					
ANR	1297091	Identifier	width		1296621	1					
ANR	1297092	Identifier	x		1296621	1					
ANR	1297093	MemberAccess	nplp -> width . y		1296621	1					
ANR	1297094	PtrMemberAccess	nplp -> width		1296621	0					
ANR	1297095	Identifier	nplp		1296621	0					
ANR	1297096	Identifier	width		1296621	1					
ANR	1297097	Identifier	y		1296621	1					
ANR	1297098	ExpressionStatement	r = ( double ) ( nplp -> width . x ) * ( plp -> width . y )	1734:8:73406:73468	1296621	2	True				
ANR	1297099	AssignmentExpression	r = ( double ) ( nplp -> width . x ) * ( plp -> width . y )		1296621	0		=			
ANR	1297100	Identifier	r		1296621	0					
ANR	1297101	MultiplicativeExpression	( double ) ( nplp -> width . x ) * ( plp -> width . y )		1296621	1		*			
ANR	1297102	CastExpression	( double ) ( nplp -> width . x )		1296621	0					
ANR	1297103	CastTarget	double		1296621	0					
ANR	1297104	MemberAccess	nplp -> width . x		1296621	1					
ANR	1297105	PtrMemberAccess	nplp -> width		1296621	0					
ANR	1297106	Identifier	nplp		1296621	0					
ANR	1297107	Identifier	width		1296621	1					
ANR	1297108	Identifier	x		1296621	1					
ANR	1297109	MemberAccess	plp -> width . y		1296621	1					
ANR	1297110	PtrMemberAccess	plp -> width		1296621	0					
ANR	1297111	Identifier	plp		1296621	0					
ANR	1297112	Identifier	width		1296621	1					
ANR	1297113	Identifier	y		1296621	1					
ANR	1297114	IfStatement	if ( ( l == r ) && ( join == gs_join_round ) )		1296621	3					
ANR	1297115	Condition	( l == r ) && ( join == gs_join_round )	1736:12:73483:73517	1296621	0	True				
ANR	1297116	AndExpression	( l == r ) && ( join == gs_join_round )		1296621	0		&&			
ANR	1297117	EqualityExpression	l == r		1296621	0		==			
ANR	1297118	Identifier	l		1296621	0					
ANR	1297119	Identifier	r		1296621	1					
ANR	1297120	EqualityExpression	join == gs_join_round		1296621	1		==			
ANR	1297121	Identifier	join		1296621	0					
ANR	1297122	Identifier	gs_join_round		1296621	1					
ANR	1297123	CompoundStatement		77:49:2714:2714	1296621	1					
ANR	1297124	ExpressionStatement	"code = add_pie_cap ( ppath , & plp -> e )"	1738:12:73561:73595	1296621	0	True				
ANR	1297125	AssignmentExpression	"code = add_pie_cap ( ppath , & plp -> e )"		1296621	0		=			
ANR	1297126	Identifier	code		1296621	0					
ANR	1297127	CallExpression	"add_pie_cap ( ppath , & plp -> e )"		1296621	1					
ANR	1297128	Callee	add_pie_cap		1296621	0					
ANR	1297129	Identifier	add_pie_cap		1296621	0					
ANR	1297130	ArgumentList	ppath		1296621	1					
ANR	1297131	Argument	ppath		1296621	0					
ANR	1297132	Identifier	ppath		1296621	0					
ANR	1297133	Argument	& plp -> e		1296621	1					
ANR	1297134	UnaryOperationExpression	& plp -> e		1296621	0					
ANR	1297135	UnaryOperator	&		1296621	0					
ANR	1297136	PtrMemberAccess	plp -> e		1296621	1					
ANR	1297137	Identifier	plp		1296621	0					
ANR	1297138	Identifier	e		1296621	1					
ANR	1297139	IfStatement	if ( code >= 0 )		1296621	1					
ANR	1297140	Condition	code >= 0	1739:16:73613:73621	1296621	0	True				
ANR	1297141	RelationalExpression	code >= 0		1296621	0		>=			
ANR	1297142	Identifier	code		1296621	0					
ANR	1297143	PrimaryExpression	0		1296621	1					
ANR	1297144	CompoundStatement		80:27:2818:2818	1296621	1					
ANR	1297145	IfStatement	if ( ( double ) ( plp -> width . x ) * nplp -> width . x + ( double ) plp -> width . y * nplp -> width . y >= 0 )		1296621	0					
ANR	1297146	Condition	( double ) ( plp -> width . x ) * nplp -> width . x + ( double ) plp -> width . y * nplp -> width . y >= 0	1745:20:74036:74117	1296621	0	True				
ANR	1297147	RelationalExpression	( double ) ( plp -> width . x ) * nplp -> width . x + ( double ) plp -> width . y * nplp -> width . y >= 0		1296621	0		>=			
ANR	1297148	AdditiveExpression	( double ) ( plp -> width . x ) * nplp -> width . x + ( double ) plp -> width . y * nplp -> width . y		1296621	0		+			
ANR	1297149	MultiplicativeExpression	( double ) ( plp -> width . x ) * nplp -> width . x		1296621	0		*			
ANR	1297150	CastExpression	( double ) ( plp -> width . x )		1296621	0					
ANR	1297151	CastTarget	double		1296621	0					
ANR	1297152	MemberAccess	plp -> width . x		1296621	1					
ANR	1297153	PtrMemberAccess	plp -> width		1296621	0					
ANR	1297154	Identifier	plp		1296621	0					
ANR	1297155	Identifier	width		1296621	1					
ANR	1297156	Identifier	x		1296621	1					
ANR	1297157	MemberAccess	nplp -> width . x		1296621	1					
ANR	1297158	PtrMemberAccess	nplp -> width		1296621	0					
ANR	1297159	Identifier	nplp		1296621	0					
ANR	1297160	Identifier	width		1296621	1					
ANR	1297161	Identifier	x		1296621	1					
ANR	1297162	MultiplicativeExpression	( double ) plp -> width . y * nplp -> width . y		1296621	1		*			
ANR	1297163	CastExpression	( double ) plp -> width . y		1296621	0					
ANR	1297164	CastTarget	double		1296621	0					
ANR	1297165	MemberAccess	plp -> width . y		1296621	1					
ANR	1297166	PtrMemberAccess	plp -> width		1296621	0					
ANR	1297167	Identifier	plp		1296621	0					
ANR	1297168	Identifier	width		1296621	1					
ANR	1297169	Identifier	y		1296621	1					
ANR	1297170	MemberAccess	nplp -> width . y		1296621	1					
ANR	1297171	PtrMemberAccess	nplp -> width		1296621	0					
ANR	1297172	Identifier	nplp		1296621	0					
ANR	1297173	Identifier	width		1296621	1					
ANR	1297174	Identifier	y		1296621	1					
ANR	1297175	PrimaryExpression	0		1296621	1					
ANR	1297176	ExpressionStatement	"code = gx_path_add_line ( ppath , plp -> e . co . x , plp -> e . co . y )"	1746:20:74140:74196	1296621	1	True				
ANR	1297177	AssignmentExpression	"code = gx_path_add_line ( ppath , plp -> e . co . x , plp -> e . co . y )"		1296621	0		=			
ANR	1297178	Identifier	code		1296621	0					
ANR	1297179	CallExpression	"gx_path_add_line ( ppath , plp -> e . co . x , plp -> e . co . y )"		1296621	1					
ANR	1297180	Callee	gx_path_add_line		1296621	0					
ANR	1297181	Identifier	gx_path_add_line		1296621	0					
ANR	1297182	ArgumentList	ppath		1296621	1					
ANR	1297183	Argument	ppath		1296621	0					
ANR	1297184	Identifier	ppath		1296621	0					
ANR	1297185	Argument	plp -> e . co . x		1296621	1					
ANR	1297186	MemberAccess	plp -> e . co . x		1296621	0					
ANR	1297187	MemberAccess	plp -> e . co		1296621	0					
ANR	1297188	PtrMemberAccess	plp -> e		1296621	0					
ANR	1297189	Identifier	plp		1296621	0					
ANR	1297190	Identifier	e		1296621	1					
ANR	1297191	Identifier	co		1296621	1					
ANR	1297192	Identifier	x		1296621	1					
ANR	1297193	Argument	plp -> e . co . y		1296621	2					
ANR	1297194	MemberAccess	plp -> e . co . y		1296621	0					
ANR	1297195	MemberAccess	plp -> e . co		1296621	0					
ANR	1297196	PtrMemberAccess	plp -> e		1296621	0					
ANR	1297197	Identifier	plp		1296621	0					
ANR	1297198	Identifier	e		1296621	1					
ANR	1297199	Identifier	co		1296621	1					
ANR	1297200	Identifier	y		1296621	1					
ANR	1297201	ElseStatement	else		1296621	0					
ANR	1297202	IfStatement	if ( ( l > r ) ^ reflected )		1296621	0					
ANR	1297203	Condition	( l > r ) ^ reflected	1748:19:74231:74249	1296621	0	True				
ANR	1297204	ExclusiveOrExpression	( l > r ) ^ reflected		1296621	0		^			
ANR	1297205	RelationalExpression	l > r		1296621	0		>			
ANR	1297206	Identifier	l		1296621	0					
ANR	1297207	Identifier	r		1296621	1					
ANR	1297208	Identifier	reflected		1296621	1					
ANR	1297209	CompoundStatement		89:40:3446:3446	1296621	1					
ANR	1297210	IfStatement	if ( join == gs_join_round )		1296621	0					
ANR	1297211	Condition	join == gs_join_round	1756:16:74702:74722	1296621	0	True				
ANR	1297212	EqualityExpression	join == gs_join_round		1296621	0		==			
ANR	1297213	Identifier	join		1296621	0					
ANR	1297214	Identifier	gs_join_round		1296621	1					
ANR	1297215	CompoundStatement		97:74:3954:3954	1296621	1					
ANR	1297216	ExpressionStatement	"code = add_pie_join_fast_ccw ( ppath , plp , nplp , reflected )"	1757:16:74778:74835	1296621	0	True				
ANR	1297217	AssignmentExpression	"code = add_pie_join_fast_ccw ( ppath , plp , nplp , reflected )"		1296621	0		=			
ANR	1297218	Identifier	code		1296621	0					
ANR	1297219	CallExpression	"add_pie_join_fast_ccw ( ppath , plp , nplp , reflected )"		1296621	1					
ANR	1297220	Callee	add_pie_join_fast_ccw		1296621	0					
ANR	1297221	Identifier	add_pie_join_fast_ccw		1296621	0					
ANR	1297222	ArgumentList	ppath		1296621	1					
ANR	1297223	Argument	ppath		1296621	0					
ANR	1297224	Identifier	ppath		1296621	0					
ANR	1297225	Argument	plp		1296621	1					
ANR	1297226	Identifier	plp		1296621	0					
ANR	1297227	Argument	nplp		1296621	2					
ANR	1297228	Identifier	nplp		1296621	0					
ANR	1297229	Argument	reflected		1296621	3					
ANR	1297230	Identifier	reflected		1296621	0					
ANR	1297231	ElseStatement	else		1296621	0					
ANR	1297232	CompoundStatement		99:19:4050:4050	1296621	0					
ANR	1297233	ExpressionStatement	"code = line_join_points_fast_ccw ( pgs_lp , plp , nplp , points , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join )"	1759:16:74895:75213	1296621	0	True				
ANR	1297234	AssignmentExpression	"code = line_join_points_fast_ccw ( pgs_lp , plp , nplp , points , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join )"		1296621	0		=			
ANR	1297235	Identifier	code		1296621	0					
ANR	1297236	CallExpression	"line_join_points_fast_ccw ( pgs_lp , plp , nplp , points , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join )"		1296621	1					
ANR	1297237	Callee	line_join_points_fast_ccw		1296621	0					
ANR	1297238	Identifier	line_join_points_fast_ccw		1296621	0					
ANR	1297239	ArgumentList	pgs_lp		1296621	1					
ANR	1297240	Argument	pgs_lp		1296621	0					
ANR	1297241	Identifier	pgs_lp		1296621	0					
ANR	1297242	Argument	plp		1296621	1					
ANR	1297243	Identifier	plp		1296621	0					
ANR	1297244	Argument	nplp		1296621	2					
ANR	1297245	Identifier	nplp		1296621	0					
ANR	1297246	Argument	points		1296621	3					
ANR	1297247	Identifier	points		1296621	0					
ANR	1297248	Argument	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1296621	4					
ANR	1297249	ConditionalExpression	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1296621	0					
ANR	1297250	Condition	uniform		1296621	0					
ANR	1297251	Identifier	uniform		1296621	0					
ANR	1297252	CastExpression	( gs_matrix * ) 0		1296621	1					
ANR	1297253	CastTarget	gs_matrix *		1296621	0					
ANR	1297254	PrimaryExpression	0		1296621	1					
ANR	1297255	UnaryOperationExpression	& ctm_only ( pgs )		1296621	2					
ANR	1297256	UnaryOperator	&		1296621	0					
ANR	1297257	CallExpression	ctm_only ( pgs )		1296621	1					
ANR	1297258	Callee	ctm_only		1296621	0					
ANR	1297259	Identifier	ctm_only		1296621	0					
ANR	1297260	ArgumentList	pgs		1296621	1					
ANR	1297261	Argument	pgs		1296621	0					
ANR	1297262	Identifier	pgs		1296621	0					
ANR	1297263	Argument	join		1296621	5					
ANR	1297264	Identifier	join		1296621	0					
ANR	1297265	ExpressionStatement	npoints = code	1764:16:75231:75245	1296621	1	True				
ANR	1297266	AssignmentExpression	npoints = code		1296621	0		=			
ANR	1297267	Identifier	npoints		1296621	0					
ANR	1297268	Identifier	code		1296621	1					
ANR	1297269	IfStatement	if ( code < 0 )		1296621	1					
ANR	1297270	Condition	code < 0	1766:16:75277:75284	1296621	0	True				
ANR	1297271	RelationalExpression	code < 0		1296621	0		<			
ANR	1297272	Identifier	code		1296621	0					
ANR	1297273	PrimaryExpression	0		1296621	1					
ANR	1297274	ReturnStatement	return code ;	1767:16:75303:75314	1296621	1	True				
ANR	1297275	Identifier	code		1296621	0					
ANR	1297276	IfStatement	if ( ( flags & ( nf_some_from_arc | nf_prev_some_from_arc ) ) == 0 )		1296621	2					
ANR	1297277	Condition	( flags & ( nf_some_from_arc | nf_prev_some_from_arc ) ) == 0	1770:16:75406:75462	1296621	0	True				
ANR	1297278	EqualityExpression	( flags & ( nf_some_from_arc | nf_prev_some_from_arc ) ) == 0		1296621	0		==			
ANR	1297279	BitAndExpression	flags & ( nf_some_from_arc | nf_prev_some_from_arc )		1296621	0		&			
ANR	1297280	Identifier	flags		1296621	0					
ANR	1297281	InclusiveOrExpression	nf_some_from_arc | nf_prev_some_from_arc		1296621	1		|			
ANR	1297282	Identifier	nf_some_from_arc		1296621	0					
ANR	1297283	Identifier	nf_prev_some_from_arc		1296621	1					
ANR	1297284	PrimaryExpression	0		1296621	1					
ANR	1297285	CompoundStatement		111:75:4659:4659	1296621	1					
ANR	1297286	ExpressionStatement	"code = gx_path_add_line ( rpath , nplp -> o . p . x , nplp -> o . p . y )"	1785:16:76417:76473	1296621	0	True				
ANR	1297287	AssignmentExpression	"code = gx_path_add_line ( rpath , nplp -> o . p . x , nplp -> o . p . y )"		1296621	0		=			
ANR	1297288	Identifier	code		1296621	0					
ANR	1297289	CallExpression	"gx_path_add_line ( rpath , nplp -> o . p . x , nplp -> o . p . y )"		1296621	1					
ANR	1297290	Callee	gx_path_add_line		1296621	0					
ANR	1297291	Identifier	gx_path_add_line		1296621	0					
ANR	1297292	ArgumentList	rpath		1296621	1					
ANR	1297293	Argument	rpath		1296621	0					
ANR	1297294	Identifier	rpath		1296621	0					
ANR	1297295	Argument	nplp -> o . p . x		1296621	1					
ANR	1297296	MemberAccess	nplp -> o . p . x		1296621	0					
ANR	1297297	MemberAccess	nplp -> o . p		1296621	0					
ANR	1297298	PtrMemberAccess	nplp -> o		1296621	0					
ANR	1297299	Identifier	nplp		1296621	0					
ANR	1297300	Identifier	o		1296621	1					
ANR	1297301	Identifier	p		1296621	1					
ANR	1297302	Identifier	x		1296621	1					
ANR	1297303	Argument	nplp -> o . p . y		1296621	2					
ANR	1297304	MemberAccess	nplp -> o . p . y		1296621	0					
ANR	1297305	MemberAccess	nplp -> o . p		1296621	0					
ANR	1297306	PtrMemberAccess	nplp -> o		1296621	0					
ANR	1297307	Identifier	nplp		1296621	0					
ANR	1297308	Identifier	o		1296621	1					
ANR	1297309	Identifier	p		1296621	1					
ANR	1297310	Identifier	y		1296621	1					
ANR	1297311	IfStatement	if ( code < 0 )		1296621	1					
ANR	1297312	Condition	code < 0	1786:20:76495:76502	1296621	0	True				
ANR	1297313	RelationalExpression	code < 0		1296621	0		<			
ANR	1297314	Identifier	code		1296621	0					
ANR	1297315	PrimaryExpression	0		1296621	1					
ANR	1297316	ReturnStatement	return code ;	1787:20:76525:76536	1296621	1	True				
ANR	1297317	Identifier	code		1296621	0					
ANR	1297318	ExpressionStatement	"code = gx_path_add_line ( rpath , nplp -> o . co . x , nplp -> o . co . y )"	1808:12:77333:77391	1296621	3	True				
ANR	1297319	AssignmentExpression	"code = gx_path_add_line ( rpath , nplp -> o . co . x , nplp -> o . co . y )"		1296621	0		=			
ANR	1297320	Identifier	code		1296621	0					
ANR	1297321	CallExpression	"gx_path_add_line ( rpath , nplp -> o . co . x , nplp -> o . co . y )"		1296621	1					
ANR	1297322	Callee	gx_path_add_line		1296621	0					
ANR	1297323	Identifier	gx_path_add_line		1296621	0					
ANR	1297324	ArgumentList	rpath		1296621	1					
ANR	1297325	Argument	rpath		1296621	0					
ANR	1297326	Identifier	rpath		1296621	0					
ANR	1297327	Argument	nplp -> o . co . x		1296621	1					
ANR	1297328	MemberAccess	nplp -> o . co . x		1296621	0					
ANR	1297329	MemberAccess	nplp -> o . co		1296621	0					
ANR	1297330	PtrMemberAccess	nplp -> o		1296621	0					
ANR	1297331	Identifier	nplp		1296621	0					
ANR	1297332	Identifier	o		1296621	1					
ANR	1297333	Identifier	co		1296621	1					
ANR	1297334	Identifier	x		1296621	1					
ANR	1297335	Argument	nplp -> o . co . y		1296621	2					
ANR	1297336	MemberAccess	nplp -> o . co . y		1296621	0					
ANR	1297337	MemberAccess	nplp -> o . co		1296621	0					
ANR	1297338	PtrMemberAccess	nplp -> o		1296621	0					
ANR	1297339	Identifier	nplp		1296621	0					
ANR	1297340	Identifier	o		1296621	1					
ANR	1297341	Identifier	co		1296621	1					
ANR	1297342	Identifier	y		1296621	1					
ANR	1297343	ElseStatement	else		1296621	0					
ANR	1297344	CompoundStatement		150:15:6602:6602	1296621	0					
ANR	1297345	IfStatement	if ( join == gs_join_round )		1296621	0					
ANR	1297346	Condition	join == gs_join_round	1817:16:77857:77877	1296621	0	True				
ANR	1297347	EqualityExpression	join == gs_join_round		1296621	0		==			
ANR	1297348	Identifier	join		1296621	0					
ANR	1297349	Identifier	gs_join_round		1296621	1					
ANR	1297350	CompoundStatement		158:74:7109:7109	1296621	1					
ANR	1297351	ExpressionStatement	"code = add_pie_join_fast_cw ( rpath , plp , nplp , reflected )"	1818:16:77933:77989	1296621	0	True				
ANR	1297352	AssignmentExpression	"code = add_pie_join_fast_cw ( rpath , plp , nplp , reflected )"		1296621	0		=			
ANR	1297353	Identifier	code		1296621	0					
ANR	1297354	CallExpression	"add_pie_join_fast_cw ( rpath , plp , nplp , reflected )"		1296621	1					
ANR	1297355	Callee	add_pie_join_fast_cw		1296621	0					
ANR	1297356	Identifier	add_pie_join_fast_cw		1296621	0					
ANR	1297357	ArgumentList	rpath		1296621	1					
ANR	1297358	Argument	rpath		1296621	0					
ANR	1297359	Identifier	rpath		1296621	0					
ANR	1297360	Argument	plp		1296621	1					
ANR	1297361	Identifier	plp		1296621	0					
ANR	1297362	Argument	nplp		1296621	2					
ANR	1297363	Identifier	nplp		1296621	0					
ANR	1297364	Argument	reflected		1296621	3					
ANR	1297365	Identifier	reflected		1296621	0					
ANR	1297366	ElseStatement	else		1296621	0					
ANR	1297367	CompoundStatement		160:19:7204:7204	1296621	0					
ANR	1297368	ExpressionStatement	"code = line_join_points_fast_cw ( pgs_lp , plp , nplp , rpoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join )"	1820:16:78049:78363	1296621	0	True				
ANR	1297369	AssignmentExpression	"code = line_join_points_fast_cw ( pgs_lp , plp , nplp , rpoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join )"		1296621	0		=			
ANR	1297370	Identifier	code		1296621	0					
ANR	1297371	CallExpression	"line_join_points_fast_cw ( pgs_lp , plp , nplp , rpoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join )"		1296621	1					
ANR	1297372	Callee	line_join_points_fast_cw		1296621	0					
ANR	1297373	Identifier	line_join_points_fast_cw		1296621	0					
ANR	1297374	ArgumentList	pgs_lp		1296621	1					
ANR	1297375	Argument	pgs_lp		1296621	0					
ANR	1297376	Identifier	pgs_lp		1296621	0					
ANR	1297377	Argument	plp		1296621	1					
ANR	1297378	Identifier	plp		1296621	0					
ANR	1297379	Argument	nplp		1296621	2					
ANR	1297380	Identifier	nplp		1296621	0					
ANR	1297381	Argument	rpoints		1296621	3					
ANR	1297382	Identifier	rpoints		1296621	0					
ANR	1297383	Argument	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1296621	4					
ANR	1297384	ConditionalExpression	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1296621	0					
ANR	1297385	Condition	uniform		1296621	0					
ANR	1297386	Identifier	uniform		1296621	0					
ANR	1297387	CastExpression	( gs_matrix * ) 0		1296621	1					
ANR	1297388	CastTarget	gs_matrix *		1296621	0					
ANR	1297389	PrimaryExpression	0		1296621	1					
ANR	1297390	UnaryOperationExpression	& ctm_only ( pgs )		1296621	2					
ANR	1297391	UnaryOperator	&		1296621	0					
ANR	1297392	CallExpression	ctm_only ( pgs )		1296621	1					
ANR	1297393	Callee	ctm_only		1296621	0					
ANR	1297394	Identifier	ctm_only		1296621	0					
ANR	1297395	ArgumentList	pgs		1296621	1					
ANR	1297396	Argument	pgs		1296621	0					
ANR	1297397	Identifier	pgs		1296621	0					
ANR	1297398	Argument	join		1296621	5					
ANR	1297399	Identifier	join		1296621	0					
ANR	1297400	ExpressionStatement	nrpoints = code	1825:16:78381:78396	1296621	1	True				
ANR	1297401	AssignmentExpression	nrpoints = code		1296621	0		=			
ANR	1297402	Identifier	nrpoints		1296621	0					
ANR	1297403	Identifier	code		1296621	1					
ANR	1297404	IfStatement	if ( code < 0 )		1296621	1					
ANR	1297405	Condition	code < 0	1827:16:78428:78435	1296621	0	True				
ANR	1297406	RelationalExpression	code < 0		1296621	0		<			
ANR	1297407	Identifier	code		1296621	0					
ANR	1297408	PrimaryExpression	0		1296621	1					
ANR	1297409	ReturnStatement	return code ;	1828:16:78454:78465	1296621	1	True				
ANR	1297410	Identifier	code		1296621	0					
ANR	1297411	IfStatement	if ( ( flags & ( nf_some_from_arc | nf_prev_some_from_arc ) ) == 0 )		1296621	2					
ANR	1297412	Condition	( flags & ( nf_some_from_arc | nf_prev_some_from_arc ) ) == 0	1831:16:78557:78613	1296621	0	True				
ANR	1297413	EqualityExpression	( flags & ( nf_some_from_arc | nf_prev_some_from_arc ) ) == 0		1296621	0		==			
ANR	1297414	BitAndExpression	flags & ( nf_some_from_arc | nf_prev_some_from_arc )		1296621	0		&			
ANR	1297415	Identifier	flags		1296621	0					
ANR	1297416	InclusiveOrExpression	nf_some_from_arc | nf_prev_some_from_arc		1296621	1		|			
ANR	1297417	Identifier	nf_some_from_arc		1296621	0					
ANR	1297418	Identifier	nf_prev_some_from_arc		1296621	1					
ANR	1297419	PrimaryExpression	0		1296621	1					
ANR	1297420	CompoundStatement		172:75:7810:7810	1296621	1					
ANR	1297421	ExpressionStatement	"code = gx_path_add_line ( ppath , nplp -> o . p . x , nplp -> o . p . y )"	1846:16:79568:79624	1296621	0	True				
ANR	1297422	AssignmentExpression	"code = gx_path_add_line ( ppath , nplp -> o . p . x , nplp -> o . p . y )"		1296621	0		=			
ANR	1297423	Identifier	code		1296621	0					
ANR	1297424	CallExpression	"gx_path_add_line ( ppath , nplp -> o . p . x , nplp -> o . p . y )"		1296621	1					
ANR	1297425	Callee	gx_path_add_line		1296621	0					
ANR	1297426	Identifier	gx_path_add_line		1296621	0					
ANR	1297427	ArgumentList	ppath		1296621	1					
ANR	1297428	Argument	ppath		1296621	0					
ANR	1297429	Identifier	ppath		1296621	0					
ANR	1297430	Argument	nplp -> o . p . x		1296621	1					
ANR	1297431	MemberAccess	nplp -> o . p . x		1296621	0					
ANR	1297432	MemberAccess	nplp -> o . p		1296621	0					
ANR	1297433	PtrMemberAccess	nplp -> o		1296621	0					
ANR	1297434	Identifier	nplp		1296621	0					
ANR	1297435	Identifier	o		1296621	1					
ANR	1297436	Identifier	p		1296621	1					
ANR	1297437	Identifier	x		1296621	1					
ANR	1297438	Argument	nplp -> o . p . y		1296621	2					
ANR	1297439	MemberAccess	nplp -> o . p . y		1296621	0					
ANR	1297440	MemberAccess	nplp -> o . p		1296621	0					
ANR	1297441	PtrMemberAccess	nplp -> o		1296621	0					
ANR	1297442	Identifier	nplp		1296621	0					
ANR	1297443	Identifier	o		1296621	1					
ANR	1297444	Identifier	p		1296621	1					
ANR	1297445	Identifier	y		1296621	1					
ANR	1297446	IfStatement	if ( code < 0 )		1296621	1					
ANR	1297447	Condition	code < 0	1847:20:79646:79653	1296621	0	True				
ANR	1297448	RelationalExpression	code < 0		1296621	0		<			
ANR	1297449	Identifier	code		1296621	0					
ANR	1297450	PrimaryExpression	0		1296621	1					
ANR	1297451	ReturnStatement	return code ;	1848:20:79676:79687	1296621	1	True				
ANR	1297452	Identifier	code		1296621	0					
ANR	1297453	ExpressionStatement	"code = gx_path_add_line ( ppath , nplp -> o . ce . x , nplp -> o . ce . y )"	1869:12:80484:80542	1296621	3	True				
ANR	1297454	AssignmentExpression	"code = gx_path_add_line ( ppath , nplp -> o . ce . x , nplp -> o . ce . y )"		1296621	0		=			
ANR	1297455	Identifier	code		1296621	0					
ANR	1297456	CallExpression	"gx_path_add_line ( ppath , nplp -> o . ce . x , nplp -> o . ce . y )"		1296621	1					
ANR	1297457	Callee	gx_path_add_line		1296621	0					
ANR	1297458	Identifier	gx_path_add_line		1296621	0					
ANR	1297459	ArgumentList	ppath		1296621	1					
ANR	1297460	Argument	ppath		1296621	0					
ANR	1297461	Identifier	ppath		1296621	0					
ANR	1297462	Argument	nplp -> o . ce . x		1296621	1					
ANR	1297463	MemberAccess	nplp -> o . ce . x		1296621	0					
ANR	1297464	MemberAccess	nplp -> o . ce		1296621	0					
ANR	1297465	PtrMemberAccess	nplp -> o		1296621	0					
ANR	1297466	Identifier	nplp		1296621	0					
ANR	1297467	Identifier	o		1296621	1					
ANR	1297468	Identifier	ce		1296621	1					
ANR	1297469	Identifier	x		1296621	1					
ANR	1297470	Argument	nplp -> o . ce . y		1296621	2					
ANR	1297471	MemberAccess	nplp -> o . ce . y		1296621	0					
ANR	1297472	MemberAccess	nplp -> o . ce		1296621	0					
ANR	1297473	PtrMemberAccess	nplp -> o		1296621	0					
ANR	1297474	Identifier	nplp		1296621	0					
ANR	1297475	Identifier	o		1296621	1					
ANR	1297476	Identifier	ce		1296621	1					
ANR	1297477	Identifier	y		1296621	1					
ANR	1297478	IfStatement	if ( code < 0 )		1296621	23					
ANR	1297479	Condition	code < 0	1872:8:80568:80575	1296621	0	True				
ANR	1297480	RelationalExpression	code < 0		1296621	0		<			
ANR	1297481	Identifier	code		1296621	0					
ANR	1297482	PrimaryExpression	0		1296621	1					
ANR	1297483	ReturnStatement	return code ;	1873:8:80586:80597	1296621	1	True				
ANR	1297484	Identifier	code		1296621	0					
ANR	1297485	IfStatement	if ( npoints > 0 )		1296621	24					
ANR	1297486	Condition	npoints > 0	1874:8:80607:80617	1296621	0	True				
ANR	1297487	RelationalExpression	npoints > 0		1296621	0		>			
ANR	1297488	Identifier	npoints		1296621	0					
ANR	1297489	PrimaryExpression	0		1296621	1					
ANR	1297490	CompoundStatement		215:21:9814:9814	1296621	1					
ANR	1297491	ExpressionStatement	"code = add_points ( ppath , points , npoints , false )"	1875:8:80630:80678	1296621	0	True				
ANR	1297492	AssignmentExpression	"code = add_points ( ppath , points , npoints , false )"		1296621	0		=			
ANR	1297493	Identifier	code		1296621	0					
ANR	1297494	CallExpression	"add_points ( ppath , points , npoints , false )"		1296621	1					
ANR	1297495	Callee	add_points		1296621	0					
ANR	1297496	Identifier	add_points		1296621	0					
ANR	1297497	ArgumentList	ppath		1296621	1					
ANR	1297498	Argument	ppath		1296621	0					
ANR	1297499	Identifier	ppath		1296621	0					
ANR	1297500	Argument	points		1296621	1					
ANR	1297501	Identifier	points		1296621	0					
ANR	1297502	Argument	npoints		1296621	2					
ANR	1297503	Identifier	npoints		1296621	0					
ANR	1297504	Argument	false		1296621	3					
ANR	1297505	Identifier	false		1296621	0					
ANR	1297506	IfStatement	if ( code < 0 )		1296621	1					
ANR	1297507	Condition	code < 0	1876:12:80692:80699	1296621	0	True				
ANR	1297508	RelationalExpression	code < 0		1296621	0		<			
ANR	1297509	Identifier	code		1296621	0					
ANR	1297510	PrimaryExpression	0		1296621	1					
ANR	1297511	ReturnStatement	return code ;	1877:12:80714:80725	1296621	1	True				
ANR	1297512	Identifier	code		1296621	0					
ANR	1297513	IfStatement	if ( nrpoints > 0 )		1296621	25					
ANR	1297514	Condition	nrpoints > 0	1879:8:80741:80752	1296621	0	True				
ANR	1297515	RelationalExpression	nrpoints > 0		1296621	0		>			
ANR	1297516	Identifier	nrpoints		1296621	0					
ANR	1297517	PrimaryExpression	0		1296621	1					
ANR	1297518	CompoundStatement		220:22:9949:9949	1296621	1					
ANR	1297519	ExpressionStatement	"code = add_points ( rpath , rpoints , nrpoints , false )"	1880:8:80765:80815	1296621	0	True				
ANR	1297520	AssignmentExpression	"code = add_points ( rpath , rpoints , nrpoints , false )"		1296621	0		=			
ANR	1297521	Identifier	code		1296621	0					
ANR	1297522	CallExpression	"add_points ( rpath , rpoints , nrpoints , false )"		1296621	1					
ANR	1297523	Callee	add_points		1296621	0					
ANR	1297524	Identifier	add_points		1296621	0					
ANR	1297525	ArgumentList	rpath		1296621	1					
ANR	1297526	Argument	rpath		1296621	0					
ANR	1297527	Identifier	rpath		1296621	0					
ANR	1297528	Argument	rpoints		1296621	1					
ANR	1297529	Identifier	rpoints		1296621	0					
ANR	1297530	Argument	nrpoints		1296621	2					
ANR	1297531	Identifier	nrpoints		1296621	0					
ANR	1297532	Argument	false		1296621	3					
ANR	1297533	Identifier	false		1296621	0					
ANR	1297534	IfStatement	if ( code < 0 )		1296621	1					
ANR	1297535	Condition	code < 0	1881:12:80829:80836	1296621	0	True				
ANR	1297536	RelationalExpression	code < 0		1296621	0		<			
ANR	1297537	Identifier	code		1296621	0					
ANR	1297538	PrimaryExpression	0		1296621	1					
ANR	1297539	ReturnStatement	return code ;	1882:12:80851:80862	1296621	1	True				
ANR	1297540	Identifier	code		1296621	0					
ANR	1297541	IfStatement	if ( ensure_closed )		1296621	26					
ANR	1297542	Condition	ensure_closed	1884:8:80878:80890	1296621	0	True				
ANR	1297543	Identifier	ensure_closed		1296621	0					
ANR	1297544	ReturnStatement	"return gx_join_path_and_reverse ( ppath , rpath ) ;"	1885:8:80901:80946	1296621	1	True				
ANR	1297545	CallExpression	"gx_join_path_and_reverse ( ppath , rpath )"		1296621	0					
ANR	1297546	Callee	gx_join_path_and_reverse		1296621	0					
ANR	1297547	Identifier	gx_join_path_and_reverse		1296621	0					
ANR	1297548	ArgumentList	ppath		1296621	1					
ANR	1297549	Argument	ppath		1296621	0					
ANR	1297550	Identifier	ppath		1296621	0					
ANR	1297551	Argument	rpath		1296621	1					
ANR	1297552	Identifier	rpath		1296621	0					
ANR	1297553	ReturnStatement	return 0 ;	1886:4:80952:80960	1296621	27	True				
ANR	1297554	PrimaryExpression	0		1296621	0					
ANR	1297555	ReturnType	static int		1296621	1					
ANR	1297556	Identifier	stroke_add_fast		1296621	2					
ANR	1297557	ParameterList	"gx_path * ppath , gx_path * rpath , bool ensure_closed , int first , pl_ptr plp , pl_ptr nplp , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs , const gx_stroke_params * params , const gs_fixed_rect * ignore_pbbox , int uniform , gs_line_join join , bool reflected , note_flags flags"		1296621	3					
ANR	1297558	Parameter	gx_path * ppath	1654:16:70429:70443	1296621	0	True				
ANR	1297559	ParameterType	gx_path *		1296621	0					
ANR	1297560	Identifier	ppath		1296621	1					
ANR	1297561	Parameter	gx_path * rpath	1654:33:70446:70460	1296621	1	True				
ANR	1297562	ParameterType	gx_path *		1296621	0					
ANR	1297563	Identifier	rpath		1296621	1					
ANR	1297564	Parameter	bool ensure_closed	1654:50:70463:70480	1296621	2	True				
ANR	1297565	ParameterType	bool		1296621	0					
ANR	1297566	Identifier	ensure_closed		1296621	1					
ANR	1297567	Parameter	int first	1654:70:70483:70491	1296621	3	True				
ANR	1297568	ParameterType	int		1296621	0					
ANR	1297569	Identifier	first		1296621	1					
ANR	1297570	Parameter	pl_ptr plp	1655:16:70510:70519	1296621	4	True				
ANR	1297571	ParameterType	pl_ptr		1296621	0					
ANR	1297572	Identifier	plp		1296621	1					
ANR	1297573	Parameter	pl_ptr nplp	1655:28:70522:70532	1296621	5	True				
ANR	1297574	ParameterType	pl_ptr		1296621	0					
ANR	1297575	Identifier	nplp		1296621	1					
ANR	1297576	Parameter	const gx_device_color * pdevc	1655:41:70535:70563	1296621	6	True				
ANR	1297577	ParameterType	const gx_device_color *		1296621	0					
ANR	1297578	Identifier	pdevc		1296621	1					
ANR	1297579	Parameter	gx_device * dev	1656:16:70582:70596	1296621	7	True				
ANR	1297580	ParameterType	gx_device *		1296621	0					
ANR	1297581	Identifier	dev		1296621	1					
ANR	1297582	Parameter	const gs_gstate * pgs	1656:33:70599:70619	1296621	8	True				
ANR	1297583	ParameterType	const gs_gstate *		1296621	0					
ANR	1297584	Identifier	pgs		1296621	1					
ANR	1297585	Parameter	const gx_stroke_params * params	1657:16:70638:70668	1296621	9	True				
ANR	1297586	ParameterType	const gx_stroke_params *		1296621	0					
ANR	1297587	Identifier	params		1296621	1					
ANR	1297588	Parameter	const gs_fixed_rect * ignore_pbbox	1658:16:70687:70720	1296621	10	True				
ANR	1297589	ParameterType	const gs_fixed_rect *		1296621	0					
ANR	1297590	Identifier	ignore_pbbox		1296621	1					
ANR	1297591	Parameter	int uniform	1658:52:70723:70733	1296621	11	True				
ANR	1297592	ParameterType	int		1296621	0					
ANR	1297593	Identifier	uniform		1296621	1					
ANR	1297594	Parameter	gs_line_join join	1659:16:70752:70768	1296621	12	True				
ANR	1297595	ParameterType	gs_line_join		1296621	0					
ANR	1297596	Identifier	join		1296621	1					
ANR	1297597	Parameter	bool reflected	1659:35:70771:70784	1296621	13	True				
ANR	1297598	ParameterType	bool		1296621	0					
ANR	1297599	Identifier	reflected		1296621	1					
ANR	1297600	Parameter	note_flags flags	1659:51:70787:70802	1296621	14	True				
ANR	1297601	ParameterType	note_flags		1296621	0					
ANR	1297602	Identifier	flags		1296621	1					
ANR	1297603	CFGEntryNode	ENTRY		1296621		True				
ANR	1297604	CFGExitNode	EXIT		1296621		True				
ANR	1297605	Symbol	gx_path_is_void		1296621						
ANR	1297606	Symbol	nplp -> o . p . x		1296621						
ANR	1297607	Symbol	pdevc		1296621						
ANR	1297608	Symbol	nplp -> o . p . y		1296621						
ANR	1297609	Symbol	npoints		1296621						
ANR	1297610	Symbol	reflected		1296621						
ANR	1297611	Symbol	& plp -> e		1296621						
ANR	1297612	Symbol	nf_dash_tail		1296621						
ANR	1297613	Symbol	line_join_points_fast_cw		1296621						
ANR	1297614	Symbol	points		1296621						
ANR	1297615	Symbol	nrpoints		1296621						
ANR	1297616	Symbol	dev		1296621						
ANR	1297617	Symbol	plp -> e . co . y		1296621						
ANR	1297618	Symbol	plp -> e . co . x		1296621						
ANR	1297619	Symbol	plp -> e . co		1296621						
ANR	1297620	Symbol	nplp -> o . ce . y		1296621						
ANR	1297621	Symbol	nplp -> o . ce . x		1296621						
ANR	1297622	Symbol	gs_currentlineparams_inline		1296621						
ANR	1297623	Symbol	plp -> e . ce		1296621						
ANR	1297624	Symbol	join		1296621						
ANR	1297625	Symbol	* plp		1296621						
ANR	1297626	Symbol	add_points		1296621						
ANR	1297627	Symbol	plp -> thin		1296621						
ANR	1297628	Symbol	add_pie_join_fast_cw		1296621						
ANR	1297629	Symbol	ensure_closed		1296621						
ANR	1297630	Symbol	rpoints		1296621						
ANR	1297631	Symbol	params		1296621						
ANR	1297632	Symbol	gx_path_add_point		1296621						
ANR	1297633	Symbol	nplp -> o . co . x		1296621						
ANR	1297634	Symbol	nplp -> o . co . y		1296621						
ANR	1297635	Symbol	add_pie_join_fast_ccw		1296621						
ANR	1297636	Symbol	nf_dash_head		1296621						
ANR	1297637	Symbol	gs_join_round		1296621						
ANR	1297638	Symbol	& plp -> o		1296621						
ANR	1297639	Symbol	pgs_lp -> end_cap		1296621						
ANR	1297640	Symbol	pgs_lp		1296621						
ANR	1297641	Symbol	true		1296621						
ANR	1297642	Symbol	nf_some_from_arc		1296621						
ANR	1297643	Symbol	gx_join_path_and_reverse		1296621						
ANR	1297644	Symbol	plp -> width . y		1296621						
ANR	1297645	Symbol	plp -> width . x		1296621						
ANR	1297646	Symbol	code		1296621						
ANR	1297647	Symbol	nplp -> o . co		1296621						
ANR	1297648	Symbol	add_pie_cap		1296621						
ANR	1297649	Symbol	cap_points		1296621						
ANR	1297650	Symbol	* pgs_lp		1296621						
ANR	1297651	Symbol	ignore_pbbox		1296621						
ANR	1297652	Symbol	flags		1296621						
ANR	1297653	Symbol	plp -> o . co		1296621						
ANR	1297654	Symbol	ppath		1296621						
ANR	1297655	Symbol	pgs_lp -> dash_cap		1296621						
ANR	1297656	Symbol	plp -> o . co . y		1296621						
ANR	1297657	Symbol	plp -> o . co . x		1296621						
ANR	1297658	Symbol	plp -> width		1296621						
ANR	1297659	Symbol	uniform		1296621						
ANR	1297660	Symbol	nplp -> width		1296621						
ANR	1297661	Symbol	moveto_first		1296621						
ANR	1297662	Symbol	end_cap		1296621						
ANR	1297663	Symbol	line_join_points_fast_ccw		1296621						
ANR	1297664	Symbol	nf_prev_some_from_arc		1296621						
ANR	1297665	Symbol	nplp -> o		1296621						
ANR	1297666	Symbol	pgs		1296621						
ANR	1297667	Symbol	gs_cap_round		1296621						
ANR	1297668	Symbol	* nplp		1296621						
ANR	1297669	Symbol	& ctm_only		1296621						
ANR	1297670	Symbol	false		1296621						
ANR	1297671	Symbol	rmoveto_first		1296621						
ANR	1297672	Symbol	gs_cap_butt		1296621						
ANR	1297673	Symbol	l		1296621						
ANR	1297674	Symbol	rpath		1296621						
ANR	1297675	Symbol	start_cap		1296621						
ANR	1297676	Symbol	nplp -> width . y		1296621						
ANR	1297677	Symbol	r		1296621						
ANR	1297678	Symbol	pgs_lp -> start_cap		1296621						
ANR	1297679	Symbol	plp		1296621						
ANR	1297680	Symbol	nplp		1296621						
ANR	1297681	Symbol	nplp -> o . p		1296621						
ANR	1297682	Symbol	plp -> o		1296621						
ANR	1297683	Symbol	gx_path_add_line		1296621						
ANR	1297684	Symbol	plp -> e		1296621						
ANR	1297685	Symbol	nplp -> thin		1296621						
ANR	1297686	Symbol	nplp -> o . ce		1296621						
ANR	1297687	Symbol	first		1296621						
ANR	1297688	Symbol	nplp -> width . x		1296621						
ANR	1297689	Function	stroke_add_compat	1895:0:81172:84943							
ANR	1297690	FunctionDef	"stroke_add_compat (gx_path * ppath , gx_path * rpath , bool ensure_closed , int first , pl_ptr plp , pl_ptr nplp , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs , const gx_stroke_params * params , const gs_fixed_rect * ignore_pbbox , int uniform , gs_line_join join , bool reflected , note_flags flags)"		1297689	0					
ANR	1297691	CompoundStatement		1903:0:81604:84943	1297689	0					
ANR	1297692	IdentifierDeclStatement	const gx_line_params * pgs_lp = gs_currentlineparams_inline ( pgs ) ;	1907:4:81782:81845	1297689	0	True				
ANR	1297693	IdentifierDecl	* pgs_lp = gs_currentlineparams_inline ( pgs )		1297689	0					
ANR	1297694	IdentifierDeclType	const gx_line_params *		1297689	0					
ANR	1297695	Identifier	pgs_lp		1297689	1					
ANR	1297696	AssignmentExpression	* pgs_lp = gs_currentlineparams_inline ( pgs )		1297689	2		=			
ANR	1297697	Identifier	pgs_lp		1297689	0					
ANR	1297698	CallExpression	gs_currentlineparams_inline ( pgs )		1297689	1					
ANR	1297699	Callee	gs_currentlineparams_inline		1297689	0					
ANR	1297700	Identifier	gs_currentlineparams_inline		1297689	0					
ANR	1297701	ArgumentList	pgs		1297689	1					
ANR	1297702	Argument	pgs		1297689	0					
ANR	1297703	Identifier	pgs		1297689	0					
ANR	1297704	IdentifierDeclStatement	gs_fixed_point points [ 5 ] ;	1908:4:81851:81875	1297689	1	True				
ANR	1297705	IdentifierDecl	points [ 5 ]		1297689	0					
ANR	1297706	IdentifierDeclType	gs_fixed_point [ 5 ]		1297689	0					
ANR	1297707	Identifier	points		1297689	1					
ANR	1297708	PrimaryExpression	5		1297689	2					
ANR	1297709	IdentifierDeclStatement	int npoints ;	1909:4:81881:81892	1297689	2	True				
ANR	1297710	IdentifierDecl	npoints		1297689	0					
ANR	1297711	IdentifierDeclType	int		1297689	0					
ANR	1297712	Identifier	npoints		1297689	1					
ANR	1297713	IdentifierDeclStatement	bool const moveto_first = true ;	1910:4:81898:81928	1297689	3	True				
ANR	1297714	IdentifierDecl	moveto_first = true		1297689	0					
ANR	1297715	IdentifierDeclType	bool const		1297689	0					
ANR	1297716	Identifier	moveto_first		1297689	1					
ANR	1297717	AssignmentExpression	moveto_first = true		1297689	2		=			
ANR	1297718	Identifier	true		1297689	0					
ANR	1297719	Identifier	true		1297689	1					
ANR	1297720	IdentifierDeclStatement	int code ;	1911:4:81982:81990	1297689	4	True				
ANR	1297721	IdentifierDecl	code		1297689	0					
ANR	1297722	IdentifierDeclType	int		1297689	0					
ANR	1297723	Identifier	code		1297689	1					
ANR	1297724	IfStatement	if ( plp -> thin )		1297689	5					
ANR	1297725	Condition	plp -> thin	1913:8:82001:82009	1297689	0	True				
ANR	1297726	PtrMemberAccess	plp -> thin		1297689	0					
ANR	1297727	Identifier	plp		1297689	0					
ANR	1297728	Identifier	thin		1297689	1					
ANR	1297729	CompoundStatement		11:19:407:407	1297689	1					
ANR	1297730	ExpressionStatement	set_thin_widths ( plp )	1916:8:82138:82158	1297689	0	True				
ANR	1297731	CallExpression	set_thin_widths ( plp )		1297689	0					
ANR	1297732	Callee	set_thin_widths		1297689	0					
ANR	1297733	Identifier	set_thin_widths		1297689	0					
ANR	1297734	ArgumentList	plp		1297689	1					
ANR	1297735	Argument	plp		1297689	0					
ANR	1297736	Identifier	plp		1297689	0					
ANR	1297737	ExpressionStatement	"adjust_stroke ( dev , plp , pgs , true , first == 0 && nplp == 0 , flags )"	1917:8:82168:82234	1297689	1	True				
ANR	1297738	CallExpression	"adjust_stroke ( dev , plp , pgs , true , first == 0 && nplp == 0 , flags )"		1297689	0					
ANR	1297739	Callee	adjust_stroke		1297689	0					
ANR	1297740	Identifier	adjust_stroke		1297689	0					
ANR	1297741	ArgumentList	dev		1297689	1					
ANR	1297742	Argument	dev		1297689	0					
ANR	1297743	Identifier	dev		1297689	0					
ANR	1297744	Argument	plp		1297689	1					
ANR	1297745	Identifier	plp		1297689	0					
ANR	1297746	Argument	pgs		1297689	2					
ANR	1297747	Identifier	pgs		1297689	0					
ANR	1297748	Argument	true		1297689	3					
ANR	1297749	Identifier	true		1297689	0					
ANR	1297750	Argument	first == 0 && nplp == 0		1297689	4					
ANR	1297751	AndExpression	first == 0 && nplp == 0		1297689	0		&&			
ANR	1297752	EqualityExpression	first == 0		1297689	0		==			
ANR	1297753	Identifier	first		1297689	0					
ANR	1297754	PrimaryExpression	0		1297689	1					
ANR	1297755	EqualityExpression	nplp == 0		1297689	1		==			
ANR	1297756	Identifier	nplp		1297689	0					
ANR	1297757	PrimaryExpression	0		1297689	1					
ANR	1297758	Argument	flags		1297689	5					
ANR	1297759	Identifier	flags		1297689	0					
ANR	1297760	ExpressionStatement	compute_caps ( plp )	1918:8:82244:82261	1297689	2	True				
ANR	1297761	CallExpression	compute_caps ( plp )		1297689	0					
ANR	1297762	Callee	compute_caps		1297689	0					
ANR	1297763	Identifier	compute_caps		1297689	0					
ANR	1297764	ArgumentList	plp		1297689	1					
ANR	1297765	Argument	plp		1297689	0					
ANR	1297766	Identifier	plp		1297689	0					
ANR	1297767	ExpressionStatement	"ASSIGN_POINT ( & points [ 0 ] , plp -> o . ce )"	1921:4:82304:82339	1297689	6	True				
ANR	1297768	CallExpression	"ASSIGN_POINT ( & points [ 0 ] , plp -> o . ce )"		1297689	0					
ANR	1297769	Callee	ASSIGN_POINT		1297689	0					
ANR	1297770	Identifier	ASSIGN_POINT		1297689	0					
ANR	1297771	ArgumentList	& points [ 0 ]		1297689	1					
ANR	1297772	Argument	& points [ 0 ]		1297689	0					
ANR	1297773	UnaryOperationExpression	& points [ 0 ]		1297689	0					
ANR	1297774	UnaryOperator	&		1297689	0					
ANR	1297775	ArrayIndexing	points [ 0 ]		1297689	1					
ANR	1297776	Identifier	points		1297689	0					
ANR	1297777	PrimaryExpression	0		1297689	1					
ANR	1297778	Argument	plp -> o . ce		1297689	1					
ANR	1297779	MemberAccess	plp -> o . ce		1297689	0					
ANR	1297780	PtrMemberAccess	plp -> o		1297689	0					
ANR	1297781	Identifier	plp		1297689	0					
ANR	1297782	Identifier	o		1297689	1					
ANR	1297783	Identifier	ce		1297689	1					
ANR	1297784	ExpressionStatement	"ASSIGN_POINT ( & points [ 1 ] , plp -> e . co )"	1922:4:82345:82380	1297689	7	True				
ANR	1297785	CallExpression	"ASSIGN_POINT ( & points [ 1 ] , plp -> e . co )"		1297689	0					
ANR	1297786	Callee	ASSIGN_POINT		1297689	0					
ANR	1297787	Identifier	ASSIGN_POINT		1297689	0					
ANR	1297788	ArgumentList	& points [ 1 ]		1297689	1					
ANR	1297789	Argument	& points [ 1 ]		1297689	0					
ANR	1297790	UnaryOperationExpression	& points [ 1 ]		1297689	0					
ANR	1297791	UnaryOperator	&		1297689	0					
ANR	1297792	ArrayIndexing	points [ 1 ]		1297689	1					
ANR	1297793	Identifier	points		1297689	0					
ANR	1297794	PrimaryExpression	1		1297689	1					
ANR	1297795	Argument	plp -> e . co		1297689	1					
ANR	1297796	MemberAccess	plp -> e . co		1297689	0					
ANR	1297797	PtrMemberAccess	plp -> e		1297689	0					
ANR	1297798	Identifier	plp		1297689	0					
ANR	1297799	Identifier	e		1297689	1					
ANR	1297800	Identifier	co		1297689	1					
ANR	1297801	ExpressionStatement	"ASSIGN_POINT ( & points [ 2 ] , plp -> e . ce )"	1923:4:82386:82421	1297689	8	True				
ANR	1297802	CallExpression	"ASSIGN_POINT ( & points [ 2 ] , plp -> e . ce )"		1297689	0					
ANR	1297803	Callee	ASSIGN_POINT		1297689	0					
ANR	1297804	Identifier	ASSIGN_POINT		1297689	0					
ANR	1297805	ArgumentList	& points [ 2 ]		1297689	1					
ANR	1297806	Argument	& points [ 2 ]		1297689	0					
ANR	1297807	UnaryOperationExpression	& points [ 2 ]		1297689	0					
ANR	1297808	UnaryOperator	&		1297689	0					
ANR	1297809	ArrayIndexing	points [ 2 ]		1297689	1					
ANR	1297810	Identifier	points		1297689	0					
ANR	1297811	PrimaryExpression	2		1297689	1					
ANR	1297812	Argument	plp -> e . ce		1297689	1					
ANR	1297813	MemberAccess	plp -> e . ce		1297689	0					
ANR	1297814	PtrMemberAccess	plp -> e		1297689	0					
ANR	1297815	Identifier	plp		1297689	0					
ANR	1297816	Identifier	e		1297689	1					
ANR	1297817	Identifier	ce		1297689	1					
ANR	1297818	ExpressionStatement	"ASSIGN_POINT ( & points [ 3 ] , plp -> o . co )"	1924:4:82427:82462	1297689	9	True				
ANR	1297819	CallExpression	"ASSIGN_POINT ( & points [ 3 ] , plp -> o . co )"		1297689	0					
ANR	1297820	Callee	ASSIGN_POINT		1297689	0					
ANR	1297821	Identifier	ASSIGN_POINT		1297689	0					
ANR	1297822	ArgumentList	& points [ 3 ]		1297689	1					
ANR	1297823	Argument	& points [ 3 ]		1297689	0					
ANR	1297824	UnaryOperationExpression	& points [ 3 ]		1297689	0					
ANR	1297825	UnaryOperator	&		1297689	0					
ANR	1297826	ArrayIndexing	points [ 3 ]		1297689	1					
ANR	1297827	Identifier	points		1297689	0					
ANR	1297828	PrimaryExpression	3		1297689	1					
ANR	1297829	Argument	plp -> o . co		1297689	1					
ANR	1297830	MemberAccess	plp -> o . co		1297689	0					
ANR	1297831	PtrMemberAccess	plp -> o		1297689	0					
ANR	1297832	Identifier	plp		1297689	0					
ANR	1297833	Identifier	o		1297689	1					
ANR	1297834	Identifier	co		1297689	1					
ANR	1297835	ExpressionStatement	"code = add_points ( ppath , points , 4 , moveto_first )"	1925:4:82468:82517	1297689	10	True				
ANR	1297836	AssignmentExpression	"code = add_points ( ppath , points , 4 , moveto_first )"		1297689	0		=			
ANR	1297837	Identifier	code		1297689	0					
ANR	1297838	CallExpression	"add_points ( ppath , points , 4 , moveto_first )"		1297689	1					
ANR	1297839	Callee	add_points		1297689	0					
ANR	1297840	Identifier	add_points		1297689	0					
ANR	1297841	ArgumentList	ppath		1297689	1					
ANR	1297842	Argument	ppath		1297689	0					
ANR	1297843	Identifier	ppath		1297689	0					
ANR	1297844	Argument	points		1297689	1					
ANR	1297845	Identifier	points		1297689	0					
ANR	1297846	Argument	4		1297689	2					
ANR	1297847	PrimaryExpression	4		1297689	0					
ANR	1297848	Argument	moveto_first		1297689	3					
ANR	1297849	Identifier	moveto_first		1297689	0					
ANR	1297850	IfStatement	if ( code < 0 )		1297689	11					
ANR	1297851	Condition	code < 0	1926:8:82527:82534	1297689	0	True				
ANR	1297852	RelationalExpression	code < 0		1297689	0		<			
ANR	1297853	Identifier	code		1297689	0					
ANR	1297854	PrimaryExpression	0		1297689	1					
ANR	1297855	ReturnStatement	return code ;	1927:8:82545:82556	1297689	1	True				
ANR	1297856	Identifier	code		1297689	0					
ANR	1297857	ExpressionStatement	code = gx_path_close_subpath ( ppath )	1928:4:82562:82597	1297689	12	True				
ANR	1297858	AssignmentExpression	code = gx_path_close_subpath ( ppath )		1297689	0		=			
ANR	1297859	Identifier	code		1297689	0					
ANR	1297860	CallExpression	gx_path_close_subpath ( ppath )		1297689	1					
ANR	1297861	Callee	gx_path_close_subpath		1297689	0					
ANR	1297862	Identifier	gx_path_close_subpath		1297689	0					
ANR	1297863	ArgumentList	ppath		1297689	1					
ANR	1297864	Argument	ppath		1297689	0					
ANR	1297865	Identifier	ppath		1297689	0					
ANR	1297866	IfStatement	if ( code < 0 )		1297689	13					
ANR	1297867	Condition	code < 0	1929:8:82607:82614	1297689	0	True				
ANR	1297868	RelationalExpression	code < 0		1297689	0		<			
ANR	1297869	Identifier	code		1297689	0					
ANR	1297870	PrimaryExpression	0		1297689	1					
ANR	1297871	ReturnStatement	return code ;	1930:8:82625:82636	1297689	1	True				
ANR	1297872	Identifier	code		1297689	0					
ANR	1297873	ExpressionStatement	npoints = 0	1931:4:82642:82653	1297689	14	True				
ANR	1297874	AssignmentExpression	npoints = 0		1297689	0		=			
ANR	1297875	Identifier	npoints		1297689	0					
ANR	1297876	PrimaryExpression	0		1297689	1					
ANR	1297877	IfStatement	if ( nplp == 0 )		1297689	15					
ANR	1297878	Condition	nplp == 0	1932:8:82663:82671	1297689	0	True				
ANR	1297879	EqualityExpression	nplp == 0		1297689	0		==			
ANR	1297880	Identifier	nplp		1297689	0					
ANR	1297881	PrimaryExpression	0		1297689	1					
ANR	1297882	CompoundStatement		30:19:1069:1069	1297689	1					
ANR	1297883	IfStatement	if ( pgs_lp -> start_cap == gs_cap_butt )		1297689	0					
ANR	1297884	Condition	pgs_lp -> start_cap == gs_cap_butt	1934:12:82719:82750	1297689	0	True				
ANR	1297885	EqualityExpression	pgs_lp -> start_cap == gs_cap_butt		1297689	0		==			
ANR	1297886	PtrMemberAccess	pgs_lp -> start_cap		1297689	0					
ANR	1297887	Identifier	pgs_lp		1297689	0					
ANR	1297888	Identifier	start_cap		1297689	1					
ANR	1297889	Identifier	gs_cap_butt		1297689	1					
ANR	1297890	ReturnStatement	return 0 ;	1935:12:82765:82773	1297689	1	True				
ANR	1297891	PrimaryExpression	0		1297689	0					
ANR	1297892	IfStatement	if ( pgs_lp -> start_cap == gs_cap_round )		1297689	1					
ANR	1297893	Condition	pgs_lp -> start_cap == gs_cap_round	1936:12:82787:82819	1297689	0	True				
ANR	1297894	EqualityExpression	pgs_lp -> start_cap == gs_cap_round		1297689	0		==			
ANR	1297895	PtrMemberAccess	pgs_lp -> start_cap		1297689	0					
ANR	1297896	Identifier	pgs_lp		1297689	0					
ANR	1297897	Identifier	start_cap		1297689	1					
ANR	1297898	Identifier	gs_cap_round		1297689	1					
ANR	1297899	CompoundStatement		34:47:1217:1217	1297689	1					
ANR	1297900	ExpressionStatement	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"	1937:12:82836:82877	1297689	0	True				
ANR	1297901	CallExpression	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"		1297689	0					
ANR	1297902	Callee	ASSIGN_POINT		1297689	0					
ANR	1297903	Identifier	ASSIGN_POINT		1297689	0					
ANR	1297904	ArgumentList	& points [ npoints ]		1297689	1					
ANR	1297905	Argument	& points [ npoints ]		1297689	0					
ANR	1297906	UnaryOperationExpression	& points [ npoints ]		1297689	0					
ANR	1297907	UnaryOperator	&		1297689	0					
ANR	1297908	ArrayIndexing	points [ npoints ]		1297689	1					
ANR	1297909	Identifier	points		1297689	0					
ANR	1297910	Identifier	npoints		1297689	1					
ANR	1297911	Argument	plp -> e . co		1297689	1					
ANR	1297912	MemberAccess	plp -> e . co		1297689	0					
ANR	1297913	PtrMemberAccess	plp -> e		1297689	0					
ANR	1297914	Identifier	plp		1297689	0					
ANR	1297915	Identifier	e		1297689	1					
ANR	1297916	Identifier	co		1297689	1					
ANR	1297917	ExpressionStatement	++ npoints	1938:12:82891:82900	1297689	1	True				
ANR	1297918	UnaryExpression	++ npoints		1297689	0					
ANR	1297919	IncDec	++		1297689	0					
ANR	1297920	Identifier	npoints		1297689	1					
ANR	1297921	IfStatement	"if ( ( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0 )"		1297689	2					
ANR	1297922	Condition	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"	1939:16:82918:82978	1297689	0	True				
ANR	1297923	RelationalExpression	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"		1297689	0		<			
ANR	1297924	AssignmentExpression	"code = add_points ( ppath , points , npoints , moveto_first )"		1297689	0		=			
ANR	1297925	Identifier	code		1297689	0					
ANR	1297926	CallExpression	"add_points ( ppath , points , npoints , moveto_first )"		1297689	1					
ANR	1297927	Callee	add_points		1297689	0					
ANR	1297928	Identifier	add_points		1297689	0					
ANR	1297929	ArgumentList	ppath		1297689	1					
ANR	1297930	Argument	ppath		1297689	0					
ANR	1297931	Identifier	ppath		1297689	0					
ANR	1297932	Argument	points		1297689	1					
ANR	1297933	Identifier	points		1297689	0					
ANR	1297934	Argument	npoints		1297689	2					
ANR	1297935	Identifier	npoints		1297689	0					
ANR	1297936	Argument	moveto_first		1297689	3					
ANR	1297937	Identifier	moveto_first		1297689	0					
ANR	1297938	PrimaryExpression	0		1297689	1					
ANR	1297939	ReturnStatement	return code ;	1940:16:82997:83008	1297689	1	True				
ANR	1297940	Identifier	code		1297689	0					
ANR	1297941	ReturnStatement	"return add_round_cap ( ppath , & plp -> e ) ;"	1941:12:83022:83058	1297689	3	True				
ANR	1297942	CallExpression	"add_round_cap ( ppath , & plp -> e )"		1297689	0					
ANR	1297943	Callee	add_round_cap		1297689	0					
ANR	1297944	Identifier	add_round_cap		1297689	0					
ANR	1297945	ArgumentList	ppath		1297689	1					
ANR	1297946	Argument	ppath		1297689	0					
ANR	1297947	Identifier	ppath		1297689	0					
ANR	1297948	Argument	& plp -> e		1297689	1					
ANR	1297949	UnaryOperationExpression	& plp -> e		1297689	0					
ANR	1297950	UnaryOperator	&		1297689	0					
ANR	1297951	PtrMemberAccess	plp -> e		1297689	1					
ANR	1297952	Identifier	plp		1297689	0					
ANR	1297953	Identifier	e		1297689	1					
ANR	1297954	ExpressionStatement	"ASSIGN_POINT ( & points [ 0 ] , plp -> e . ce )"	1943:8:83078:83113	1297689	2	True				
ANR	1297955	CallExpression	"ASSIGN_POINT ( & points [ 0 ] , plp -> e . ce )"		1297689	0					
ANR	1297956	Callee	ASSIGN_POINT		1297689	0					
ANR	1297957	Identifier	ASSIGN_POINT		1297689	0					
ANR	1297958	ArgumentList	& points [ 0 ]		1297689	1					
ANR	1297959	Argument	& points [ 0 ]		1297689	0					
ANR	1297960	UnaryOperationExpression	& points [ 0 ]		1297689	0					
ANR	1297961	UnaryOperator	&		1297689	0					
ANR	1297962	ArrayIndexing	points [ 0 ]		1297689	1					
ANR	1297963	Identifier	points		1297689	0					
ANR	1297964	PrimaryExpression	0		1297689	1					
ANR	1297965	Argument	plp -> e . ce		1297689	1					
ANR	1297966	MemberAccess	plp -> e . ce		1297689	0					
ANR	1297967	PtrMemberAccess	plp -> e		1297689	0					
ANR	1297968	Identifier	plp		1297689	0					
ANR	1297969	Identifier	e		1297689	1					
ANR	1297970	Identifier	ce		1297689	1					
ANR	1297971	ExpressionStatement	++ npoints	1944:8:83123:83132	1297689	3	True				
ANR	1297972	UnaryExpression	++ npoints		1297689	0					
ANR	1297973	IncDec	++		1297689	0					
ANR	1297974	Identifier	npoints		1297689	1					
ANR	1297975	ExpressionStatement	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"	1945:8:83142:83183	1297689	4	True				
ANR	1297976	CallExpression	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"		1297689	0					
ANR	1297977	Callee	ASSIGN_POINT		1297689	0					
ANR	1297978	Identifier	ASSIGN_POINT		1297689	0					
ANR	1297979	ArgumentList	& points [ npoints ]		1297689	1					
ANR	1297980	Argument	& points [ npoints ]		1297689	0					
ANR	1297981	UnaryOperationExpression	& points [ npoints ]		1297689	0					
ANR	1297982	UnaryOperator	&		1297689	0					
ANR	1297983	ArrayIndexing	points [ npoints ]		1297689	1					
ANR	1297984	Identifier	points		1297689	0					
ANR	1297985	Identifier	npoints		1297689	1					
ANR	1297986	Argument	plp -> e . co		1297689	1					
ANR	1297987	MemberAccess	plp -> e . co		1297689	0					
ANR	1297988	PtrMemberAccess	plp -> e		1297689	0					
ANR	1297989	Identifier	plp		1297689	0					
ANR	1297990	Identifier	e		1297689	1					
ANR	1297991	Identifier	co		1297689	1					
ANR	1297992	ExpressionStatement	++ npoints	1946:8:83193:83202	1297689	5	True				
ANR	1297993	UnaryExpression	++ npoints		1297689	0					
ANR	1297994	IncDec	++		1297689	0					
ANR	1297995	Identifier	npoints		1297689	1					
ANR	1297996	ExpressionStatement	"code = cap_points ( pgs_lp -> start_cap , & plp -> e , points + npoints )"	1947:8:83212:83275	1297689	6	True				
ANR	1297997	AssignmentExpression	"code = cap_points ( pgs_lp -> start_cap , & plp -> e , points + npoints )"		1297689	0		=			
ANR	1297998	Identifier	code		1297689	0					
ANR	1297999	CallExpression	"cap_points ( pgs_lp -> start_cap , & plp -> e , points + npoints )"		1297689	1					
ANR	1298000	Callee	cap_points		1297689	0					
ANR	1298001	Identifier	cap_points		1297689	0					
ANR	1298002	ArgumentList	pgs_lp -> start_cap		1297689	1					
ANR	1298003	Argument	pgs_lp -> start_cap		1297689	0					
ANR	1298004	PtrMemberAccess	pgs_lp -> start_cap		1297689	0					
ANR	1298005	Identifier	pgs_lp		1297689	0					
ANR	1298006	Identifier	start_cap		1297689	1					
ANR	1298007	Argument	& plp -> e		1297689	1					
ANR	1298008	UnaryOperationExpression	& plp -> e		1297689	0					
ANR	1298009	UnaryOperator	&		1297689	0					
ANR	1298010	PtrMemberAccess	plp -> e		1297689	1					
ANR	1298011	Identifier	plp		1297689	0					
ANR	1298012	Identifier	e		1297689	1					
ANR	1298013	Argument	points + npoints		1297689	2					
ANR	1298014	AdditiveExpression	points + npoints		1297689	0		+			
ANR	1298015	Identifier	points		1297689	0					
ANR	1298016	Identifier	npoints		1297689	1					
ANR	1298017	IfStatement	if ( code < 0 )		1297689	7					
ANR	1298018	Condition	code < 0	1948:12:83289:83296	1297689	0	True				
ANR	1298019	RelationalExpression	code < 0		1297689	0		<			
ANR	1298020	Identifier	code		1297689	0					
ANR	1298021	PrimaryExpression	0		1297689	1					
ANR	1298022	ReturnStatement	return code ;	1949:12:83311:83322	1297689	1	True				
ANR	1298023	Identifier	code		1297689	0					
ANR	1298024	ExpressionStatement	npoints += code	1950:8:83332:83347	1297689	8	True				
ANR	1298025	AssignmentExpression	npoints += code		1297689	0		+=			
ANR	1298026	Identifier	npoints		1297689	0					
ANR	1298027	Identifier	code		1297689	1					
ANR	1298028	ElseStatement	else		1297689	0					
ANR	1298029	IfStatement	if ( join == gs_join_round )		1297689	0					
ANR	1298030	Condition	join == gs_join_round	1951:15:83364:83384	1297689	0	True				
ANR	1298031	EqualityExpression	join == gs_join_round		1297689	0		==			
ANR	1298032	Identifier	join		1297689	0					
ANR	1298033	Identifier	gs_join_round		1297689	1					
ANR	1298034	CompoundStatement		49:38:1782:1782	1297689	1					
ANR	1298035	ExpressionStatement	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"	1952:8:83397:83438	1297689	0	True				
ANR	1298036	CallExpression	"ASSIGN_POINT ( & points [ npoints ] , plp -> e . co )"		1297689	0					
ANR	1298037	Callee	ASSIGN_POINT		1297689	0					
ANR	1298038	Identifier	ASSIGN_POINT		1297689	0					
ANR	1298039	ArgumentList	& points [ npoints ]		1297689	1					
ANR	1298040	Argument	& points [ npoints ]		1297689	0					
ANR	1298041	UnaryOperationExpression	& points [ npoints ]		1297689	0					
ANR	1298042	UnaryOperator	&		1297689	0					
ANR	1298043	ArrayIndexing	points [ npoints ]		1297689	1					
ANR	1298044	Identifier	points		1297689	0					
ANR	1298045	Identifier	npoints		1297689	1					
ANR	1298046	Argument	plp -> e . co		1297689	1					
ANR	1298047	MemberAccess	plp -> e . co		1297689	0					
ANR	1298048	PtrMemberAccess	plp -> e		1297689	0					
ANR	1298049	Identifier	plp		1297689	0					
ANR	1298050	Identifier	e		1297689	1					
ANR	1298051	Identifier	co		1297689	1					
ANR	1298052	ExpressionStatement	++ npoints	1953:8:83448:83457	1297689	1	True				
ANR	1298053	UnaryExpression	++ npoints		1297689	0					
ANR	1298054	IncDec	++		1297689	0					
ANR	1298055	Identifier	npoints		1297689	1					
ANR	1298056	IfStatement	"if ( ( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0 )"		1297689	2					
ANR	1298057	Condition	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"	1954:12:83471:83531	1297689	0	True				
ANR	1298058	RelationalExpression	"( code = add_points ( ppath , points , npoints , moveto_first ) ) < 0"		1297689	0		<			
ANR	1298059	AssignmentExpression	"code = add_points ( ppath , points , npoints , moveto_first )"		1297689	0		=			
ANR	1298060	Identifier	code		1297689	0					
ANR	1298061	CallExpression	"add_points ( ppath , points , npoints , moveto_first )"		1297689	1					
ANR	1298062	Callee	add_points		1297689	0					
ANR	1298063	Identifier	add_points		1297689	0					
ANR	1298064	ArgumentList	ppath		1297689	1					
ANR	1298065	Argument	ppath		1297689	0					
ANR	1298066	Identifier	ppath		1297689	0					
ANR	1298067	Argument	points		1297689	1					
ANR	1298068	Identifier	points		1297689	0					
ANR	1298069	Argument	npoints		1297689	2					
ANR	1298070	Identifier	npoints		1297689	0					
ANR	1298071	Argument	moveto_first		1297689	3					
ANR	1298072	Identifier	moveto_first		1297689	0					
ANR	1298073	PrimaryExpression	0		1297689	1					
ANR	1298074	ReturnStatement	return code ;	1955:12:83546:83557	1297689	1	True				
ANR	1298075	Identifier	code		1297689	0					
ANR	1298076	ReturnStatement	"return add_round_cap ( ppath , & plp -> e ) ;"	1956:8:83567:83603	1297689	3	True				
ANR	1298077	CallExpression	"add_round_cap ( ppath , & plp -> e )"		1297689	0					
ANR	1298078	Callee	add_round_cap		1297689	0					
ANR	1298079	Identifier	add_round_cap		1297689	0					
ANR	1298080	ArgumentList	ppath		1297689	1					
ANR	1298081	Argument	ppath		1297689	0					
ANR	1298082	Identifier	ppath		1297689	0					
ANR	1298083	Argument	& plp -> e		1297689	1					
ANR	1298084	UnaryOperationExpression	& plp -> e		1297689	0					
ANR	1298085	UnaryOperator	&		1297689	0					
ANR	1298086	PtrMemberAccess	plp -> e		1297689	1					
ANR	1298087	Identifier	plp		1297689	0					
ANR	1298088	Identifier	e		1297689	1					
ANR	1298089	ElseStatement	else		1297689	0					
ANR	1298090	IfStatement	if ( nplp -> thin )		1297689	0					
ANR	1298091	Condition	nplp -> thin	1957:15:83620:83629	1297689	0	True				
ANR	1298092	PtrMemberAccess	nplp -> thin		1297689	0					
ANR	1298093	Identifier	nplp		1297689	0					
ANR	1298094	Identifier	thin		1297689	1					
ANR	1298095	CompoundStatement		55:27:2027:2027	1297689	1					
ANR	1298096	ExpressionStatement	npoints = 0	1958:8:83659:83670	1297689	0	True				
ANR	1298097	AssignmentExpression	npoints = 0		1297689	0		=			
ANR	1298098	Identifier	npoints		1297689	0					
ANR	1298099	PrimaryExpression	0		1297689	1					
ANR	1298100	ElseStatement	else		1297689	0					
ANR	1298101	CompoundStatement		58:8:2128:2282	1297689	0					
ANR	1298102	IdentifierDeclStatement	bool ccw = ( double ) ( plp -> width . x ) * ( nplp -> width . y ) > ( double ) ( nplp -> width . x ) * ( plp -> width . y ) ;	1960:8:83733:83887	1297689	0	True				
ANR	1298103	IdentifierDecl	ccw = ( double ) ( plp -> width . x ) * ( nplp -> width . y ) > ( double ) ( nplp -> width . x ) * ( plp -> width . y )		1297689	0					
ANR	1298104	IdentifierDeclType	bool		1297689	0					
ANR	1298105	Identifier	ccw		1297689	1					
ANR	1298106	AssignmentExpression	ccw = ( double ) ( plp -> width . x ) * ( nplp -> width . y ) > ( double ) ( nplp -> width . x ) * ( plp -> width . y )		1297689	2		=			
ANR	1298107	Identifier	ccw		1297689	0					
ANR	1298108	RelationalExpression	( double ) ( plp -> width . x ) * ( nplp -> width . y ) > ( double ) ( nplp -> width . x ) * ( plp -> width . y )		1297689	1		>			
ANR	1298109	MultiplicativeExpression	( double ) ( plp -> width . x ) * ( nplp -> width . y )		1297689	0		*			
ANR	1298110	CastExpression	( double ) ( plp -> width . x )		1297689	0					
ANR	1298111	CastTarget	double		1297689	0					
ANR	1298112	MemberAccess	plp -> width . x		1297689	1					
ANR	1298113	PtrMemberAccess	plp -> width		1297689	0					
ANR	1298114	Identifier	plp		1297689	0					
ANR	1298115	Identifier	width		1297689	1					
ANR	1298116	Identifier	x		1297689	1					
ANR	1298117	MemberAccess	nplp -> width . y		1297689	1					
ANR	1298118	PtrMemberAccess	nplp -> width		1297689	0					
ANR	1298119	Identifier	nplp		1297689	0					
ANR	1298120	Identifier	width		1297689	1					
ANR	1298121	Identifier	y		1297689	1					
ANR	1298122	MultiplicativeExpression	( double ) ( nplp -> width . x ) * ( plp -> width . y )		1297689	1		*			
ANR	1298123	CastExpression	( double ) ( nplp -> width . x )		1297689	0					
ANR	1298124	CastTarget	double		1297689	0					
ANR	1298125	MemberAccess	nplp -> width . x		1297689	1					
ANR	1298126	PtrMemberAccess	nplp -> width		1297689	0					
ANR	1298127	Identifier	nplp		1297689	0					
ANR	1298128	Identifier	width		1297689	1					
ANR	1298129	Identifier	x		1297689	1					
ANR	1298130	MemberAccess	plp -> width . y		1297689	1					
ANR	1298131	PtrMemberAccess	plp -> width		1297689	0					
ANR	1298132	Identifier	plp		1297689	0					
ANR	1298133	Identifier	width		1297689	1					
ANR	1298134	Identifier	y		1297689	1					
ANR	1298135	IfStatement	if ( ccw ^ reflected )		1297689	1					
ANR	1298136	Condition	ccw ^ reflected	1964:12:83902:83916	1297689	0	True				
ANR	1298137	ExclusiveOrExpression	ccw ^ reflected		1297689	0		^			
ANR	1298138	Identifier	ccw		1297689	0					
ANR	1298139	Identifier	reflected		1297689	1					
ANR	1298140	CompoundStatement		62:29:2314:2314	1297689	1					
ANR	1298141	ExpressionStatement	"ASSIGN_POINT ( & points [ 0 ] , plp -> e . co )"	1965:12:83933:83968	1297689	0	True				
ANR	1298142	CallExpression	"ASSIGN_POINT ( & points [ 0 ] , plp -> e . co )"		1297689	0					
ANR	1298143	Callee	ASSIGN_POINT		1297689	0					
ANR	1298144	Identifier	ASSIGN_POINT		1297689	0					
ANR	1298145	ArgumentList	& points [ 0 ]		1297689	1					
ANR	1298146	Argument	& points [ 0 ]		1297689	0					
ANR	1298147	UnaryOperationExpression	& points [ 0 ]		1297689	0					
ANR	1298148	UnaryOperator	&		1297689	0					
ANR	1298149	ArrayIndexing	points [ 0 ]		1297689	1					
ANR	1298150	Identifier	points		1297689	0					
ANR	1298151	PrimaryExpression	0		1297689	1					
ANR	1298152	Argument	plp -> e . co		1297689	1					
ANR	1298153	MemberAccess	plp -> e . co		1297689	0					
ANR	1298154	PtrMemberAccess	plp -> e		1297689	0					
ANR	1298155	Identifier	plp		1297689	0					
ANR	1298156	Identifier	e		1297689	1					
ANR	1298157	Identifier	co		1297689	1					
ANR	1298158	ExpressionStatement	++ npoints	1966:12:83982:83991	1297689	1	True				
ANR	1298159	UnaryExpression	++ npoints		1297689	0					
ANR	1298160	IncDec	++		1297689	0					
ANR	1298161	Identifier	npoints		1297689	1					
ANR	1298162	ExpressionStatement	"code = line_join_points ( pgs_lp , plp , nplp , points + npoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"	1967:12:84005:84200	1297689	2	True				
ANR	1298163	AssignmentExpression	"code = line_join_points ( pgs_lp , plp , nplp , points + npoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"		1297689	0		=			
ANR	1298164	Identifier	code		1297689	0					
ANR	1298165	CallExpression	"line_join_points ( pgs_lp , plp , nplp , points + npoints , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"		1297689	1					
ANR	1298166	Callee	line_join_points		1297689	0					
ANR	1298167	Identifier	line_join_points		1297689	0					
ANR	1298168	ArgumentList	pgs_lp		1297689	1					
ANR	1298169	Argument	pgs_lp		1297689	0					
ANR	1298170	Identifier	pgs_lp		1297689	0					
ANR	1298171	Argument	plp		1297689	1					
ANR	1298172	Identifier	plp		1297689	0					
ANR	1298173	Argument	nplp		1297689	2					
ANR	1298174	Identifier	nplp		1297689	0					
ANR	1298175	Argument	points + npoints		1297689	3					
ANR	1298176	AdditiveExpression	points + npoints		1297689	0		+			
ANR	1298177	Identifier	points		1297689	0					
ANR	1298178	Identifier	npoints		1297689	1					
ANR	1298179	Argument	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1297689	4					
ANR	1298180	ConditionalExpression	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1297689	0					
ANR	1298181	Condition	uniform		1297689	0					
ANR	1298182	Identifier	uniform		1297689	0					
ANR	1298183	CastExpression	( gs_matrix * ) 0		1297689	1					
ANR	1298184	CastTarget	gs_matrix *		1297689	0					
ANR	1298185	PrimaryExpression	0		1297689	1					
ANR	1298186	UnaryOperationExpression	& ctm_only ( pgs )		1297689	2					
ANR	1298187	UnaryOperator	&		1297689	0					
ANR	1298188	CallExpression	ctm_only ( pgs )		1297689	1					
ANR	1298189	Callee	ctm_only		1297689	0					
ANR	1298190	Identifier	ctm_only		1297689	0					
ANR	1298191	ArgumentList	pgs		1297689	1					
ANR	1298192	Argument	pgs		1297689	0					
ANR	1298193	Identifier	pgs		1297689	0					
ANR	1298194	Argument	join		1297689	5					
ANR	1298195	Identifier	join		1297689	0					
ANR	1298196	Argument	reflected		1297689	6					
ANR	1298197	Identifier	reflected		1297689	0					
ANR	1298198	IfStatement	if ( code < 0 )		1297689	3					
ANR	1298199	Condition	code < 0	1970:16:84218:84225	1297689	0	True				
ANR	1298200	RelationalExpression	code < 0		1297689	0		<			
ANR	1298201	Identifier	code		1297689	0					
ANR	1298202	PrimaryExpression	0		1297689	1					
ANR	1298203	ReturnStatement	return code ;	1971:16:84244:84255	1297689	1	True				
ANR	1298204	Identifier	code		1297689	0					
ANR	1298205	ExpressionStatement	code --	1972:12:84269:84275	1297689	4	True				
ANR	1298206	PostIncDecOperationExpression	code --		1297689	0					
ANR	1298207	Identifier	code		1297689	0					
ANR	1298208	IncDec	--		1297689	1					
ANR	1298209	ExpressionStatement	npoints += code	1973:12:84343:84358	1297689	5	True				
ANR	1298210	AssignmentExpression	npoints += code		1297689	0		+=			
ANR	1298211	Identifier	npoints		1297689	0					
ANR	1298212	Identifier	code		1297689	1					
ANR	1298213	ElseStatement	else		1297689	0					
ANR	1298214	CompoundStatement		72:15:2770:2770	1297689	0					
ANR	1298215	ExpressionStatement	"code = line_join_points ( pgs_lp , plp , nplp , points , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"	1975:12:84389:84574	1297689	0	True				
ANR	1298216	AssignmentExpression	"code = line_join_points ( pgs_lp , plp , nplp , points , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"		1297689	0		=			
ANR	1298217	Identifier	code		1297689	0					
ANR	1298218	CallExpression	"line_join_points ( pgs_lp , plp , nplp , points , ( uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs ) ) , join , reflected )"		1297689	1					
ANR	1298219	Callee	line_join_points		1297689	0					
ANR	1298220	Identifier	line_join_points		1297689	0					
ANR	1298221	ArgumentList	pgs_lp		1297689	1					
ANR	1298222	Argument	pgs_lp		1297689	0					
ANR	1298223	Identifier	pgs_lp		1297689	0					
ANR	1298224	Argument	plp		1297689	1					
ANR	1298225	Identifier	plp		1297689	0					
ANR	1298226	Argument	nplp		1297689	2					
ANR	1298227	Identifier	nplp		1297689	0					
ANR	1298228	Argument	points		1297689	3					
ANR	1298229	Identifier	points		1297689	0					
ANR	1298230	Argument	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1297689	4					
ANR	1298231	ConditionalExpression	uniform ? ( gs_matrix * ) 0 : & ctm_only ( pgs )		1297689	0					
ANR	1298232	Condition	uniform		1297689	0					
ANR	1298233	Identifier	uniform		1297689	0					
ANR	1298234	CastExpression	( gs_matrix * ) 0		1297689	1					
ANR	1298235	CastTarget	gs_matrix *		1297689	0					
ANR	1298236	PrimaryExpression	0		1297689	1					
ANR	1298237	UnaryOperationExpression	& ctm_only ( pgs )		1297689	2					
ANR	1298238	UnaryOperator	&		1297689	0					
ANR	1298239	CallExpression	ctm_only ( pgs )		1297689	1					
ANR	1298240	Callee	ctm_only		1297689	0					
ANR	1298241	Identifier	ctm_only		1297689	0					
ANR	1298242	ArgumentList	pgs		1297689	1					
ANR	1298243	Argument	pgs		1297689	0					
ANR	1298244	Identifier	pgs		1297689	0					
ANR	1298245	Argument	join		1297689	5					
ANR	1298246	Identifier	join		1297689	0					
ANR	1298247	Argument	reflected		1297689	6					
ANR	1298248	Identifier	reflected		1297689	0					
ANR	1298249	IfStatement	if ( code < 0 )		1297689	1					
ANR	1298250	Condition	code < 0	1978:16:84592:84599	1297689	0	True				
ANR	1298251	RelationalExpression	code < 0		1297689	0		<			
ANR	1298252	Identifier	code		1297689	0					
ANR	1298253	PrimaryExpression	0		1297689	1					
ANR	1298254	ReturnStatement	return code ;	1979:16:84618:84629	1297689	1	True				
ANR	1298255	Identifier	code		1297689	0					
ANR	1298256	ExpressionStatement	"ASSIGN_POINT ( & points [ 0 ] , plp -> e . ce )"	1980:12:84643:84678	1297689	2	True				
ANR	1298257	CallExpression	"ASSIGN_POINT ( & points [ 0 ] , plp -> e . ce )"		1297689	0					
ANR	1298258	Callee	ASSIGN_POINT		1297689	0					
ANR	1298259	Identifier	ASSIGN_POINT		1297689	0					
ANR	1298260	ArgumentList	& points [ 0 ]		1297689	1					
ANR	1298261	Argument	& points [ 0 ]		1297689	0					
ANR	1298262	UnaryOperationExpression	& points [ 0 ]		1297689	0					
ANR	1298263	UnaryOperator	&		1297689	0					
ANR	1298264	ArrayIndexing	points [ 0 ]		1297689	1					
ANR	1298265	Identifier	points		1297689	0					
ANR	1298266	PrimaryExpression	0		1297689	1					
ANR	1298267	Argument	plp -> e . ce		1297689	1					
ANR	1298268	MemberAccess	plp -> e . ce		1297689	0					
ANR	1298269	PtrMemberAccess	plp -> e		1297689	0					
ANR	1298270	Identifier	plp		1297689	0					
ANR	1298271	Identifier	e		1297689	1					
ANR	1298272	Identifier	ce		1297689	1					
ANR	1298273	ExpressionStatement	npoints = code	1981:12:84753:84767	1297689	3	True				
ANR	1298274	AssignmentExpression	npoints = code		1297689	0		=			
ANR	1298275	Identifier	npoints		1297689	0					
ANR	1298276	Identifier	code		1297689	1					
ANR	1298277	ExpressionStatement	"code = add_points ( ppath , points , npoints , moveto_first )"	1984:4:84789:84844	1297689	16	True				
ANR	1298278	AssignmentExpression	"code = add_points ( ppath , points , npoints , moveto_first )"		1297689	0		=			
ANR	1298279	Identifier	code		1297689	0					
ANR	1298280	CallExpression	"add_points ( ppath , points , npoints , moveto_first )"		1297689	1					
ANR	1298281	Callee	add_points		1297689	0					
ANR	1298282	Identifier	add_points		1297689	0					
ANR	1298283	ArgumentList	ppath		1297689	1					
ANR	1298284	Argument	ppath		1297689	0					
ANR	1298285	Identifier	ppath		1297689	0					
ANR	1298286	Argument	points		1297689	1					
ANR	1298287	Identifier	points		1297689	0					
ANR	1298288	Argument	npoints		1297689	2					
ANR	1298289	Identifier	npoints		1297689	0					
ANR	1298290	Argument	moveto_first		1297689	3					
ANR	1298291	Identifier	moveto_first		1297689	0					
ANR	1298292	IfStatement	if ( code < 0 )		1297689	17					
ANR	1298293	Condition	code < 0	1985:8:84854:84861	1297689	0	True				
ANR	1298294	RelationalExpression	code < 0		1297689	0		<			
ANR	1298295	Identifier	code		1297689	0					
ANR	1298296	PrimaryExpression	0		1297689	1					
ANR	1298297	ReturnStatement	return code ;	1986:8:84872:84883	1297689	1	True				
ANR	1298298	Identifier	code		1297689	0					
ANR	1298299	ExpressionStatement	code = gx_path_close_subpath ( ppath )	1987:4:84889:84924	1297689	18	True				
ANR	1298300	AssignmentExpression	code = gx_path_close_subpath ( ppath )		1297689	0		=			
ANR	1298301	Identifier	code		1297689	0					
ANR	1298302	CallExpression	gx_path_close_subpath ( ppath )		1297689	1					
ANR	1298303	Callee	gx_path_close_subpath		1297689	0					
ANR	1298304	Identifier	gx_path_close_subpath		1297689	0					
ANR	1298305	ArgumentList	ppath		1297689	1					
ANR	1298306	Argument	ppath		1297689	0					
ANR	1298307	Identifier	ppath		1297689	0					
ANR	1298308	ReturnStatement	return code ;	1988:4:84930:84941	1297689	19	True				
ANR	1298309	Identifier	code		1297689	0					
ANR	1298310	ReturnType	static int		1297689	1					
ANR	1298311	Identifier	stroke_add_compat		1297689	2					
ANR	1298312	ParameterList	"gx_path * ppath , gx_path * rpath , bool ensure_closed , int first , pl_ptr plp , pl_ptr nplp , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs , const gx_stroke_params * params , const gs_fixed_rect * ignore_pbbox , int uniform , gs_line_join join , bool reflected , note_flags flags"		1297689	3					
ANR	1298313	Parameter	gx_path * ppath	1896:18:81201:81215	1297689	0	True				
ANR	1298314	ParameterType	gx_path *		1297689	0					
ANR	1298315	Identifier	ppath		1297689	1					
ANR	1298316	Parameter	gx_path * rpath	1896:35:81218:81231	1297689	1	True				
ANR	1298317	ParameterType	gx_path *		1297689	0					
ANR	1298318	Identifier	rpath		1297689	1					
ANR	1298319	Parameter	bool ensure_closed	1896:51:81234:81251	1297689	2	True				
ANR	1298320	ParameterType	bool		1297689	0					
ANR	1298321	Identifier	ensure_closed		1297689	1					
ANR	1298322	Parameter	int first	1897:18:81272:81280	1297689	3	True				
ANR	1298323	ParameterType	int		1297689	0					
ANR	1298324	Identifier	first		1297689	1					
ANR	1298325	Parameter	pl_ptr plp	1897:29:81283:81292	1297689	4	True				
ANR	1298326	ParameterType	pl_ptr		1297689	0					
ANR	1298327	Identifier	plp		1297689	1					
ANR	1298328	Parameter	pl_ptr nplp	1897:41:81295:81305	1297689	5	True				
ANR	1298329	ParameterType	pl_ptr		1297689	0					
ANR	1298330	Identifier	nplp		1297689	1					
ANR	1298331	Parameter	const gx_device_color * pdevc	1898:18:81326:81354	1297689	6	True				
ANR	1298332	ParameterType	const gx_device_color *		1297689	0					
ANR	1298333	Identifier	pdevc		1297689	1					
ANR	1298334	Parameter	gx_device * dev	1898:49:81357:81371	1297689	7	True				
ANR	1298335	ParameterType	gx_device *		1297689	0					
ANR	1298336	Identifier	dev		1297689	1					
ANR	1298337	Parameter	const gs_gstate * pgs	1899:18:81392:81412	1297689	8	True				
ANR	1298338	ParameterType	const gs_gstate *		1297689	0					
ANR	1298339	Identifier	pgs		1297689	1					
ANR	1298340	Parameter	const gx_stroke_params * params	1900:18:81433:81463	1297689	9	True				
ANR	1298341	ParameterType	const gx_stroke_params *		1297689	0					
ANR	1298342	Identifier	params		1297689	1					
ANR	1298343	Parameter	const gs_fixed_rect * ignore_pbbox	1901:18:81484:81517	1297689	10	True				
ANR	1298344	ParameterType	const gs_fixed_rect *		1297689	0					
ANR	1298345	Identifier	ignore_pbbox		1297689	1					
ANR	1298346	Parameter	int uniform	1901:54:81520:81530	1297689	11	True				
ANR	1298347	ParameterType	int		1297689	0					
ANR	1298348	Identifier	uniform		1297689	1					
ANR	1298349	Parameter	gs_line_join join	1902:18:81551:81567	1297689	12	True				
ANR	1298350	ParameterType	gs_line_join		1297689	0					
ANR	1298351	Identifier	join		1297689	1					
ANR	1298352	Parameter	bool reflected	1902:37:81570:81583	1297689	13	True				
ANR	1298353	ParameterType	bool		1297689	0					
ANR	1298354	Identifier	reflected		1297689	1					
ANR	1298355	Parameter	note_flags flags	1902:53:81586:81601	1297689	14	True				
ANR	1298356	ParameterType	note_flags		1297689	0					
ANR	1298357	Identifier	flags		1297689	1					
ANR	1298358	CFGEntryNode	ENTRY		1297689		True				
ANR	1298359	CFGExitNode	EXIT		1297689		True				
ANR	1298360	Symbol	pdevc		1297689						
ANR	1298361	Symbol	npoints		1297689						
ANR	1298362	Symbol	reflected		1297689						
ANR	1298363	Symbol	& plp -> e		1297689						
ANR	1298364	Symbol	points		1297689						
ANR	1298365	Symbol	dev		1297689						
ANR	1298366	Symbol	plp -> e . co		1297689						
ANR	1298367	Symbol	ccw		1297689						
ANR	1298368	Symbol	gs_currentlineparams_inline		1297689						
ANR	1298369	Symbol	plp -> e . ce		1297689						
ANR	1298370	Symbol	join		1297689						
ANR	1298371	Symbol	* plp		1297689						
ANR	1298372	Symbol	add_points		1297689						
ANR	1298373	Symbol	plp -> thin		1297689						
ANR	1298374	Symbol	ensure_closed		1297689						
ANR	1298375	Symbol	params		1297689						
ANR	1298376	Symbol	gs_join_round		1297689						
ANR	1298377	Symbol	pgs_lp		1297689						
ANR	1298378	Symbol	true		1297689						
ANR	1298379	Symbol	plp -> width . y		1297689						
ANR	1298380	Symbol	plp -> width . x		1297689						
ANR	1298381	Symbol	code		1297689						
ANR	1298382	Symbol	cap_points		1297689						
ANR	1298383	Symbol	* pgs_lp		1297689						
ANR	1298384	Symbol	ignore_pbbox		1297689						
ANR	1298385	Symbol	flags		1297689						
ANR	1298386	Symbol	plp -> o . co		1297689						
ANR	1298387	Symbol	ppath		1297689						
ANR	1298388	Symbol	gx_path_close_subpath		1297689						
ANR	1298389	Symbol	plp -> width		1297689						
ANR	1298390	Symbol	uniform		1297689						
ANR	1298391	Symbol	nplp -> width		1297689						
ANR	1298392	Symbol	moveto_first		1297689						
ANR	1298393	Symbol	plp -> o . ce		1297689						
ANR	1298394	Symbol	add_round_cap		1297689						
ANR	1298395	Symbol	pgs		1297689						
ANR	1298396	Symbol	gs_cap_round		1297689						
ANR	1298397	Symbol	* nplp		1297689						
ANR	1298398	Symbol	& ctm_only		1297689						
ANR	1298399	Symbol	line_join_points		1297689						
ANR	1298400	Symbol	gs_cap_butt		1297689						
ANR	1298401	Symbol	rpath		1297689						
ANR	1298402	Symbol	nplp -> width . y		1297689						
ANR	1298403	Symbol	pgs_lp -> start_cap		1297689						
ANR	1298404	Symbol	plp		1297689						
ANR	1298405	Symbol	nplp		1297689						
ANR	1298406	Symbol	plp -> o		1297689						
ANR	1298407	Symbol	plp -> e		1297689						
ANR	1298408	Symbol	nplp -> thin		1297689						
ANR	1298409	Symbol	first		1297689						
ANR	1298410	Symbol	nplp -> width . x		1297689						
ANR	1298411	Function	stroke_add_initial_cap_compat	1997:0:85153:86519							
ANR	1298412	FunctionDef	"stroke_add_initial_cap_compat (gx_path * ppath , pl_ptr plp , bool adlust_longitude , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs)"		1298411	0					
ANR	1298413	CompoundStatement		2001:0:85339:86519	1298411	0					
ANR	1298414	IdentifierDeclStatement	const gx_line_params * pgs_lp = gs_currentlineparams_inline ( pgs ) ;	2002:4:85345:85408	1298411	0	True				
ANR	1298415	IdentifierDecl	* pgs_lp = gs_currentlineparams_inline ( pgs )		1298411	0					
ANR	1298416	IdentifierDeclType	const gx_line_params *		1298411	0					
ANR	1298417	Identifier	pgs_lp		1298411	1					
ANR	1298418	AssignmentExpression	* pgs_lp = gs_currentlineparams_inline ( pgs )		1298411	2		=			
ANR	1298419	Identifier	pgs_lp		1298411	0					
ANR	1298420	CallExpression	gs_currentlineparams_inline ( pgs )		1298411	1					
ANR	1298421	Callee	gs_currentlineparams_inline		1298411	0					
ANR	1298422	Identifier	gs_currentlineparams_inline		1298411	0					
ANR	1298423	ArgumentList	pgs		1298411	1					
ANR	1298424	Argument	pgs		1298411	0					
ANR	1298425	Identifier	pgs		1298411	0					
ANR	1298426	IdentifierDeclStatement	gs_fixed_point points [ 5 ] ;	2003:4:85414:85438	1298411	1	True				
ANR	1298427	IdentifierDecl	points [ 5 ]		1298411	0					
ANR	1298428	IdentifierDeclType	gs_fixed_point [ 5 ]		1298411	0					
ANR	1298429	Identifier	points		1298411	1					
ANR	1298430	PrimaryExpression	5		1298411	2					
ANR	1298431	IdentifierDeclStatement	int npoints = 0 ;	2004:4:85444:85459	1298411	2	True				
ANR	1298432	IdentifierDecl	npoints = 0		1298411	0					
ANR	1298433	IdentifierDeclType	int		1298411	0					
ANR	1298434	Identifier	npoints		1298411	1					
ANR	1298435	AssignmentExpression	npoints = 0		1298411	2		=			
ANR	1298436	Identifier	npoints		1298411	0					
ANR	1298437	PrimaryExpression	0		1298411	1					
ANR	1298438	IdentifierDeclStatement	int code ;	2005:4:85465:85473	1298411	3	True				
ANR	1298439	IdentifierDecl	code		1298411	0					
ANR	1298440	IdentifierDeclType	int		1298411	0					
ANR	1298441	Identifier	code		1298411	1					
ANR	1298442	IfStatement	if ( pgs_lp -> start_cap == gs_cap_butt )		1298411	4					
ANR	1298443	Condition	pgs_lp -> start_cap == gs_cap_butt	2007:8:85484:85515	1298411	0	True				
ANR	1298444	EqualityExpression	pgs_lp -> start_cap == gs_cap_butt		1298411	0		==			
ANR	1298445	PtrMemberAccess	pgs_lp -> start_cap		1298411	0					
ANR	1298446	Identifier	pgs_lp		1298411	0					
ANR	1298447	Identifier	start_cap		1298411	1					
ANR	1298448	Identifier	gs_cap_butt		1298411	1					
ANR	1298449	ReturnStatement	return 0 ;	2008:8:85526:85534	1298411	1	True				
ANR	1298450	PrimaryExpression	0		1298411	0					
ANR	1298451	IfStatement	if ( plp -> thin )		1298411	5					
ANR	1298452	Condition	plp -> thin	2009:8:85544:85552	1298411	0	True				
ANR	1298453	PtrMemberAccess	plp -> thin		1298411	0					
ANR	1298454	Identifier	plp		1298411	0					
ANR	1298455	Identifier	thin		1298411	1					
ANR	1298456	CompoundStatement		9:19:215:215	1298411	1					
ANR	1298457	ExpressionStatement	set_thin_widths ( plp )	2012:8:85681:85701	1298411	0	True				
ANR	1298458	CallExpression	set_thin_widths ( plp )		1298411	0					
ANR	1298459	Callee	set_thin_widths		1298411	0					
ANR	1298460	Identifier	set_thin_widths		1298411	0					
ANR	1298461	ArgumentList	plp		1298411	1					
ANR	1298462	Argument	plp		1298411	0					
ANR	1298463	Identifier	plp		1298411	0					
ANR	1298464	ExpressionStatement	"adjust_stroke ( dev , plp , pgs , true , adlust_longitude , 0 )"	2013:8:85711:85766	1298411	1	True				
ANR	1298465	CallExpression	"adjust_stroke ( dev , plp , pgs , true , adlust_longitude , 0 )"		1298411	0					
ANR	1298466	Callee	adjust_stroke		1298411	0					
ANR	1298467	Identifier	adjust_stroke		1298411	0					
ANR	1298468	ArgumentList	dev		1298411	1					
ANR	1298469	Argument	dev		1298411	0					
ANR	1298470	Identifier	dev		1298411	0					
ANR	1298471	Argument	plp		1298411	1					
ANR	1298472	Identifier	plp		1298411	0					
ANR	1298473	Argument	pgs		1298411	2					
ANR	1298474	Identifier	pgs		1298411	0					
ANR	1298475	Argument	true		1298411	3					
ANR	1298476	Identifier	true		1298411	0					
ANR	1298477	Argument	adlust_longitude		1298411	4					
ANR	1298478	Identifier	adlust_longitude		1298411	0					
ANR	1298479	Argument	0		1298411	5					
ANR	1298480	PrimaryExpression	0		1298411	0					
ANR	1298481	ExpressionStatement	compute_caps ( plp )	2014:8:85776:85793	1298411	2	True				
ANR	1298482	CallExpression	compute_caps ( plp )		1298411	0					
ANR	1298483	Callee	compute_caps		1298411	0					
ANR	1298484	Identifier	compute_caps		1298411	0					
ANR	1298485	ArgumentList	plp		1298411	1					
ANR	1298486	Argument	plp		1298411	0					
ANR	1298487	Identifier	plp		1298411	0					
ANR	1298488	IfStatement	if ( pgs_lp -> start_cap == gs_cap_round )		1298411	6					
ANR	1298489	Condition	pgs_lp -> start_cap == gs_cap_round	2017:8:85853:85885	1298411	0	True				
ANR	1298490	EqualityExpression	pgs_lp -> start_cap == gs_cap_round		1298411	0		==			
ANR	1298491	PtrMemberAccess	pgs_lp -> start_cap		1298411	0					
ANR	1298492	Identifier	pgs_lp		1298411	0					
ANR	1298493	Identifier	start_cap		1298411	1					
ANR	1298494	Identifier	gs_cap_round		1298411	1					
ANR	1298495	CompoundStatement		17:43:548:548	1298411	1					
ANR	1298496	IfStatement	"if ( ( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = add_round_cap ( ppath , & plp -> o ) ) < 0 )"		1298411	0					
ANR	1298497	Condition	"( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = add_round_cap ( ppath , & plp -> o ) ) < 0"	2018:12:85902:86022	1298411	0	True				
ANR	1298498	OrExpression	"( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = add_round_cap ( ppath , & plp -> o ) ) < 0"		1298411	0		||			
ANR	1298499	RelationalExpression	"( code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0"		1298411	0		<			
ANR	1298500	AssignmentExpression	"code = gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y )"		1298411	0		=			
ANR	1298501	Identifier	code		1298411	0					
ANR	1298502	CallExpression	"gx_path_add_point ( ppath , plp -> o . co . x , plp -> o . co . y )"		1298411	1					
ANR	1298503	Callee	gx_path_add_point		1298411	0					
ANR	1298504	Identifier	gx_path_add_point		1298411	0					
ANR	1298505	ArgumentList	ppath		1298411	1					
ANR	1298506	Argument	ppath		1298411	0					
ANR	1298507	Identifier	ppath		1298411	0					
ANR	1298508	Argument	plp -> o . co . x		1298411	1					
ANR	1298509	MemberAccess	plp -> o . co . x		1298411	0					
ANR	1298510	MemberAccess	plp -> o . co		1298411	0					
ANR	1298511	PtrMemberAccess	plp -> o		1298411	0					
ANR	1298512	Identifier	plp		1298411	0					
ANR	1298513	Identifier	o		1298411	1					
ANR	1298514	Identifier	co		1298411	1					
ANR	1298515	Identifier	x		1298411	1					
ANR	1298516	Argument	plp -> o . co . y		1298411	2					
ANR	1298517	MemberAccess	plp -> o . co . y		1298411	0					
ANR	1298518	MemberAccess	plp -> o . co		1298411	0					
ANR	1298519	PtrMemberAccess	plp -> o		1298411	0					
ANR	1298520	Identifier	plp		1298411	0					
ANR	1298521	Identifier	o		1298411	1					
ANR	1298522	Identifier	co		1298411	1					
ANR	1298523	Identifier	y		1298411	1					
ANR	1298524	PrimaryExpression	0		1298411	1					
ANR	1298525	RelationalExpression	"( code = add_round_cap ( ppath , & plp -> o ) ) < 0"		1298411	1		<			
ANR	1298526	AssignmentExpression	"code = add_round_cap ( ppath , & plp -> o )"		1298411	0		=			
ANR	1298527	Identifier	code		1298411	0					
ANR	1298528	CallExpression	"add_round_cap ( ppath , & plp -> o )"		1298411	1					
ANR	1298529	Callee	add_round_cap		1298411	0					
ANR	1298530	Identifier	add_round_cap		1298411	0					
ANR	1298531	ArgumentList	ppath		1298411	1					
ANR	1298532	Argument	ppath		1298411	0					
ANR	1298533	Identifier	ppath		1298411	0					
ANR	1298534	Argument	& plp -> o		1298411	1					
ANR	1298535	UnaryOperationExpression	& plp -> o		1298411	0					
ANR	1298536	UnaryOperator	&		1298411	0					
ANR	1298537	PtrMemberAccess	plp -> o		1298411	1					
ANR	1298538	Identifier	plp		1298411	0					
ANR	1298539	Identifier	o		1298411	1					
ANR	1298540	PrimaryExpression	0		1298411	1					
ANR	1298541	ReturnStatement	return code ;	2021:12:86050:86061	1298411	1	True				
ANR	1298542	Identifier	code		1298411	0					
ANR	1298543	ReturnStatement	return 0 ;	2022:8:86071:86079	1298411	1	True				
ANR	1298544	PrimaryExpression	0		1298411	0					
ANR	1298545	ElseStatement	else		1298411	0					
ANR	1298546	CompoundStatement		23:11:752:752	1298411	0					
ANR	1298547	ExpressionStatement	"ASSIGN_POINT ( & points [ 0 ] , plp -> o . co )"	2024:8:86102:86137	1298411	0	True				
ANR	1298548	CallExpression	"ASSIGN_POINT ( & points [ 0 ] , plp -> o . co )"		1298411	0					
ANR	1298549	Callee	ASSIGN_POINT		1298411	0					
ANR	1298550	Identifier	ASSIGN_POINT		1298411	0					
ANR	1298551	ArgumentList	& points [ 0 ]		1298411	1					
ANR	1298552	Argument	& points [ 0 ]		1298411	0					
ANR	1298553	UnaryOperationExpression	& points [ 0 ]		1298411	0					
ANR	1298554	UnaryOperator	&		1298411	0					
ANR	1298555	ArrayIndexing	points [ 0 ]		1298411	1					
ANR	1298556	Identifier	points		1298411	0					
ANR	1298557	PrimaryExpression	0		1298411	1					
ANR	1298558	Argument	plp -> o . co		1298411	1					
ANR	1298559	MemberAccess	plp -> o . co		1298411	0					
ANR	1298560	PtrMemberAccess	plp -> o		1298411	0					
ANR	1298561	Identifier	plp		1298411	0					
ANR	1298562	Identifier	o		1298411	1					
ANR	1298563	Identifier	co		1298411	1					
ANR	1298564	ExpressionStatement	++ npoints	2025:8:86147:86156	1298411	1	True				
ANR	1298565	UnaryExpression	++ npoints		1298411	0					
ANR	1298566	IncDec	++		1298411	0					
ANR	1298567	Identifier	npoints		1298411	1					
ANR	1298568	IfStatement	"if ( ( code = cap_points ( pgs_lp -> start_cap , & plp -> o , points + npoints ) ) < 0 )"		1298411	2					
ANR	1298569	Condition	"( code = cap_points ( pgs_lp -> start_cap , & plp -> o , points + npoints ) ) < 0"	2026:12:86170:86238	1298411	0	True				
ANR	1298570	RelationalExpression	"( code = cap_points ( pgs_lp -> start_cap , & plp -> o , points + npoints ) ) < 0"		1298411	0		<			
ANR	1298571	AssignmentExpression	"code = cap_points ( pgs_lp -> start_cap , & plp -> o , points + npoints )"		1298411	0		=			
ANR	1298572	Identifier	code		1298411	0					
ANR	1298573	CallExpression	"cap_points ( pgs_lp -> start_cap , & plp -> o , points + npoints )"		1298411	1					
ANR	1298574	Callee	cap_points		1298411	0					
ANR	1298575	Identifier	cap_points		1298411	0					
ANR	1298576	ArgumentList	pgs_lp -> start_cap		1298411	1					
ANR	1298577	Argument	pgs_lp -> start_cap		1298411	0					
ANR	1298578	PtrMemberAccess	pgs_lp -> start_cap		1298411	0					
ANR	1298579	Identifier	pgs_lp		1298411	0					
ANR	1298580	Identifier	start_cap		1298411	1					
ANR	1298581	Argument	& plp -> o		1298411	1					
ANR	1298582	UnaryOperationExpression	& plp -> o		1298411	0					
ANR	1298583	UnaryOperator	&		1298411	0					
ANR	1298584	PtrMemberAccess	plp -> o		1298411	1					
ANR	1298585	Identifier	plp		1298411	0					
ANR	1298586	Identifier	o		1298411	1					
ANR	1298587	Argument	points + npoints		1298411	2					
ANR	1298588	AdditiveExpression	points + npoints		1298411	0		+			
ANR	1298589	Identifier	points		1298411	0					
ANR	1298590	Identifier	npoints		1298411	1					
ANR	1298591	PrimaryExpression	0		1298411	1					
ANR	1298592	ReturnStatement	return npoints ;	2027:12:86253:86267	1298411	1	True				
ANR	1298593	Identifier	npoints		1298411	0					
ANR	1298594	ExpressionStatement	npoints += code	2028:8:86277:86292	1298411	3	True				
ANR	1298595	AssignmentExpression	npoints += code		1298411	0		+=			
ANR	1298596	Identifier	npoints		1298411	0					
ANR	1298597	Identifier	code		1298411	1					
ANR	1298598	ExpressionStatement	"ASSIGN_POINT ( & points [ npoints ] , plp -> o . ce )"	2029:8:86302:86343	1298411	4	True				
ANR	1298599	CallExpression	"ASSIGN_POINT ( & points [ npoints ] , plp -> o . ce )"		1298411	0					
ANR	1298600	Callee	ASSIGN_POINT		1298411	0					
ANR	1298601	Identifier	ASSIGN_POINT		1298411	0					
ANR	1298602	ArgumentList	& points [ npoints ]		1298411	1					
ANR	1298603	Argument	& points [ npoints ]		1298411	0					
ANR	1298604	UnaryOperationExpression	& points [ npoints ]		1298411	0					
ANR	1298605	UnaryOperator	&		1298411	0					
ANR	1298606	ArrayIndexing	points [ npoints ]		1298411	1					
ANR	1298607	Identifier	points		1298411	0					
ANR	1298608	Identifier	npoints		1298411	1					
ANR	1298609	Argument	plp -> o . ce		1298411	1					
ANR	1298610	MemberAccess	plp -> o . ce		1298411	0					
ANR	1298611	PtrMemberAccess	plp -> o		1298411	0					
ANR	1298612	Identifier	plp		1298411	0					
ANR	1298613	Identifier	o		1298411	1					
ANR	1298614	Identifier	ce		1298411	1					
ANR	1298615	ExpressionStatement	++ npoints	2030:8:86353:86362	1298411	5	True				
ANR	1298616	UnaryExpression	++ npoints		1298411	0					
ANR	1298617	IncDec	++		1298411	0					
ANR	1298618	Identifier	npoints		1298411	1					
ANR	1298619	ExpressionStatement	"code = add_points ( ppath , points , npoints , true )"	2031:8:86372:86419	1298411	6	True				
ANR	1298620	AssignmentExpression	"code = add_points ( ppath , points , npoints , true )"		1298411	0		=			
ANR	1298621	Identifier	code		1298411	0					
ANR	1298622	CallExpression	"add_points ( ppath , points , npoints , true )"		1298411	1					
ANR	1298623	Callee	add_points		1298411	0					
ANR	1298624	Identifier	add_points		1298411	0					
ANR	1298625	ArgumentList	ppath		1298411	1					
ANR	1298626	Argument	ppath		1298411	0					
ANR	1298627	Identifier	ppath		1298411	0					
ANR	1298628	Argument	points		1298411	1					
ANR	1298629	Identifier	points		1298411	0					
ANR	1298630	Argument	npoints		1298411	2					
ANR	1298631	Identifier	npoints		1298411	0					
ANR	1298632	Argument	true		1298411	3					
ANR	1298633	Identifier	true		1298411	0					
ANR	1298634	IfStatement	if ( code < 0 )		1298411	7					
ANR	1298635	Condition	code < 0	2032:12:86433:86440	1298411	0	True				
ANR	1298636	RelationalExpression	code < 0		1298411	0		<			
ANR	1298637	Identifier	code		1298411	0					
ANR	1298638	PrimaryExpression	0		1298411	1					
ANR	1298639	ReturnStatement	return code ;	2033:12:86455:86466	1298411	1	True				
ANR	1298640	Identifier	code		1298411	0					
ANR	1298641	ReturnStatement	return gx_path_close_subpath ( ppath ) ;	2034:8:86476:86511	1298411	8	True				
ANR	1298642	CallExpression	gx_path_close_subpath ( ppath )		1298411	0					
ANR	1298643	Callee	gx_path_close_subpath		1298411	0					
ANR	1298644	Identifier	gx_path_close_subpath		1298411	0					
ANR	1298645	ArgumentList	ppath		1298411	1					
ANR	1298646	Argument	ppath		1298411	0					
ANR	1298647	Identifier	ppath		1298411	0					
ANR	1298648	ReturnType	static int		1298411	1					
ANR	1298649	Identifier	stroke_add_initial_cap_compat		1298411	2					
ANR	1298650	ParameterList	"gx_path * ppath , pl_ptr plp , bool adlust_longitude , const gx_device_color * pdevc , gx_device * dev , const gs_gstate * pgs"		1298411	3					
ANR	1298651	Parameter	gx_path * ppath	1998:30:85194:85208	1298411	0	True				
ANR	1298652	ParameterType	gx_path *		1298411	0					
ANR	1298653	Identifier	ppath		1298411	1					
ANR	1298654	Parameter	pl_ptr plp	1998:47:85211:85220	1298411	1	True				
ANR	1298655	ParameterType	pl_ptr		1298411	0					
ANR	1298656	Identifier	plp		1298411	1					
ANR	1298657	Parameter	bool adlust_longitude	1998:59:85223:85243	1298411	2	True				
ANR	1298658	ParameterType	bool		1298411	0					
ANR	1298659	Identifier	adlust_longitude		1298411	1					
ANR	1298660	Parameter	const gx_device_color * pdevc	1999:11:85257:85285	1298411	3	True				
ANR	1298661	ParameterType	const gx_device_color *		1298411	0					
ANR	1298662	Identifier	pdevc		1298411	1					
ANR	1298663	Parameter	gx_device * dev	1999:42:85288:85302	1298411	4	True				
ANR	1298664	ParameterType	gx_device *		1298411	0					
ANR	1298665	Identifier	dev		1298411	1					
ANR	1298666	Parameter	const gs_gstate * pgs	2000:11:85316:85336	1298411	5	True				
ANR	1298667	ParameterType	const gs_gstate *		1298411	0					
ANR	1298668	Identifier	pgs		1298411	1					
ANR	1298669	CFGEntryNode	ENTRY		1298411		True				
ANR	1298670	CFGExitNode	EXIT		1298411		True				
ANR	1298671	Symbol	code		1298411						
ANR	1298672	Symbol	cap_points		1298411						
ANR	1298673	Symbol	* pgs_lp		1298411						
ANR	1298674	Symbol	pdevc		1298411						
ANR	1298675	Symbol	npoints		1298411						
ANR	1298676	Symbol	plp -> o . co		1298411						
ANR	1298677	Symbol	ppath		1298411						
ANR	1298678	Symbol	plp -> o . co . y		1298411						
ANR	1298679	Symbol	plp -> o . co . x		1298411						
ANR	1298680	Symbol	gx_path_close_subpath		1298411						
ANR	1298681	Symbol	points		1298411						
ANR	1298682	Symbol	plp -> o . ce		1298411						
ANR	1298683	Symbol	dev		1298411						
ANR	1298684	Symbol	gs_currentlineparams_inline		1298411						
ANR	1298685	Symbol	add_round_cap		1298411						
ANR	1298686	Symbol	pgs		1298411						
ANR	1298687	Symbol	* plp		1298411						
ANR	1298688	Symbol	gs_cap_round		1298411						
ANR	1298689	Symbol	add_points		1298411						
ANR	1298690	Symbol	plp -> thin		1298411						
ANR	1298691	Symbol	gs_cap_butt		1298411						
ANR	1298692	Symbol	gx_path_add_point		1298411						
ANR	1298693	Symbol	adlust_longitude		1298411						
ANR	1298694	Symbol	pgs_lp -> start_cap		1298411						
ANR	1298695	Symbol	plp		1298411						
ANR	1298696	Symbol	& plp -> o		1298411						
ANR	1298697	Symbol	plp -> o		1298411						
ANR	1298698	Symbol	pgs_lp		1298411						
ANR	1298699	Symbol	true		1298411						
ANR	1298700	Function	add_points	2039:0:86570:86981							
ANR	1298701	FunctionDef	"add_points (gx_path * ppath , const gs_fixed_point * points , int npoints , bool moveto_first)"		1298700	0					
ANR	1298702	CompoundStatement		2042:0:86683:86981	1298700	0					
ANR	1298703	IdentifierDeclStatement	int code ;	2043:4:86689:86697	1298700	0	True				
ANR	1298704	IdentifierDecl	code		1298700	0					
ANR	1298705	IdentifierDeclType	int		1298700	0					
ANR	1298706	Identifier	code		1298700	1					
ANR	1298707	IfStatement	if ( moveto_first )		1298700	1					
ANR	1298708	Condition	moveto_first	2045:8:86708:86719	1298700	0	True				
ANR	1298709	Identifier	moveto_first		1298700	0					
ANR	1298710	CompoundStatement		4:22:38:38	1298700	1					
ANR	1298711	ExpressionStatement	"code = gx_path_add_point ( ppath , points [ 0 ] . x , points [ 0 ] . y )"	2046:8:86732:86789	1298700	0	True				
ANR	1298712	AssignmentExpression	"code = gx_path_add_point ( ppath , points [ 0 ] . x , points [ 0 ] . y )"		1298700	0		=			
ANR	1298713	Identifier	code		1298700	0					
ANR	1298714	CallExpression	"gx_path_add_point ( ppath , points [ 0 ] . x , points [ 0 ] . y )"		1298700	1					
ANR	1298715	Callee	gx_path_add_point		1298700	0					
ANR	1298716	Identifier	gx_path_add_point		1298700	0					
ANR	1298717	ArgumentList	ppath		1298700	1					
ANR	1298718	Argument	ppath		1298700	0					
ANR	1298719	Identifier	ppath		1298700	0					
ANR	1298720	Argument	points [ 0 ] . x		1298700	1					
ANR	1298721	MemberAccess	points [ 0 ] . x		1298700	0					
ANR	1298722	ArrayIndexing	points [ 0 ]		1298700	0					
ANR	1298723	Identifier	points		1298700	0					
ANR	1298724	PrimaryExpression	0		1298700	1					
ANR	1298725	Identifier	x		1298700	1					
ANR	1298726	Argument	points [ 0 ] . y		1298700	2					
ANR	1298727	MemberAccess	points [ 0 ] . y		1298700	0					
ANR	1298728	ArrayIndexing	points [ 0 ]		1298700	0					
ANR	1298729	Identifier	points		1298700	0					
ANR	1298730	PrimaryExpression	0		1298700	1					
ANR	1298731	Identifier	y		1298700	1					
ANR	1298732	IfStatement	if ( code < 0 )		1298700	1					
ANR	1298733	Condition	code < 0	2047:12:86803:86810	1298700	0	True				
ANR	1298734	RelationalExpression	code < 0		1298700	0		<			
ANR	1298735	Identifier	code		1298700	0					
ANR	1298736	PrimaryExpression	0		1298700	1					
ANR	1298737	ReturnStatement	return code ;	2048:12:86825:86836	1298700	1	True				
ANR	1298738	Identifier	code		1298700	0					
ANR	1298739	ReturnStatement	"return gx_path_add_lines ( ppath , points + 1 , npoints - 1 ) ;"	2049:8:86846:86902	1298700	2	True				
ANR	1298740	CallExpression	"gx_path_add_lines ( ppath , points + 1 , npoints - 1 )"		1298700	0					
ANR	1298741	Callee	gx_path_add_lines		1298700	0					
ANR	1298742	Identifier	gx_path_add_lines		1298700	0					
ANR	1298743	ArgumentList	ppath		1298700	1					
ANR	1298744	Argument	ppath		1298700	0					
ANR	1298745	Identifier	ppath		1298700	0					
ANR	1298746	Argument	points + 1		1298700	1					
ANR	1298747	AdditiveExpression	points + 1		1298700	0		+			
ANR	1298748	Identifier	points		1298700	0					
ANR	1298749	PrimaryExpression	1		1298700	1					
ANR	1298750	Argument	npoints - 1		1298700	2					
ANR	1298751	AdditiveExpression	npoints - 1		1298700	0		-			
ANR	1298752	Identifier	npoints		1298700	0					
ANR	1298753	PrimaryExpression	1		1298700	1					
ANR	1298754	ElseStatement	else		1298700	0					
ANR	1298755	CompoundStatement		9:11:231:231	1298700	0					
ANR	1298756	ReturnStatement	"return gx_path_add_lines ( ppath , points , npoints ) ;"	2051:8:86925:86973	1298700	0	True				
ANR	1298757	CallExpression	"gx_path_add_lines ( ppath , points , npoints )"		1298700	0					
ANR	1298758	Callee	gx_path_add_lines		1298700	0					
ANR	1298759	Identifier	gx_path_add_lines		1298700	0					
ANR	1298760	ArgumentList	ppath		1298700	1					
ANR	1298761	Argument	ppath		1298700	0					
ANR	1298762	Identifier	ppath		1298700	0					
ANR	1298763	Argument	points		1298700	1					
ANR	1298764	Identifier	points		1298700	0					
ANR	1298765	Argument	npoints		1298700	2					
ANR	1298766	Identifier	npoints		1298700	0					
ANR	1298767	ReturnType	static int		1298700	1					
ANR	1298768	Identifier	add_points		1298700	2					
ANR	1298769	ParameterList	"gx_path * ppath , const gs_fixed_point * points , int npoints , bool moveto_first"		1298700	3					
ANR	1298770	Parameter	gx_path * ppath	2040:11:86592:86606	1298700	0	True				
ANR	1298771	ParameterType	gx_path *		1298700	0					
ANR	1298772	Identifier	ppath		1298700	1					
ANR	1298773	Parameter	const gs_fixed_point * points	2040:28:86609:86637	1298700	1	True				
ANR	1298774	ParameterType	const gs_fixed_point *		1298700	0					
ANR	1298775	Identifier	points		1298700	1					
ANR	1298776	Parameter	int npoints	2040:59:86640:86650	1298700	2	True				
ANR	1298777	ParameterType	int		1298700	0					
ANR	1298778	Identifier	npoints		1298700	1					
ANR	1298779	Parameter	bool moveto_first	2041:11:86664:86680	1298700	3	True				
ANR	1298780	ParameterType	bool		1298700	0					
ANR	1298781	Identifier	moveto_first		1298700	1					
ANR	1298782	CFGEntryNode	ENTRY		1298700		True				
ANR	1298783	CFGExitNode	EXIT		1298700		True				
ANR	1298784	Symbol	moveto_first		1298700						
ANR	1298785	Symbol	code		1298700						
ANR	1298786	Symbol	npoints		1298700						
ANR	1298787	Symbol	gx_path_add_lines		1298700						
ANR	1298788	Symbol	ppath		1298700						
ANR	1298789	Symbol	* points		1298700						
ANR	1298790	Symbol	points [ 0 ] . y		1298700						
ANR	1298791	Symbol	gx_path_add_point		1298700						
ANR	1298792	Symbol	points [ 0 ] . x		1298700						
ANR	1298793	Symbol	points		1298700						
ANR	1298794	Function	check_miter	2057:0:87042:92537							
ANR	1298795	FunctionDef	"check_miter (const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , const gs_matrix * pmat , p_ptr outp , p_ptr np , p_ptr mpt , bool ccw0)"		1298794	0					
ANR	1298796	CompoundStatement		2061:0:87213:92537	1298794	0					
ANR	1298797	IdentifierDeclStatement	float check = pgs_lp -> miter_check ;	2076:4:87775:87808	1298794	0	True				
ANR	1298798	IdentifierDecl	check = pgs_lp -> miter_check		1298794	0					
ANR	1298799	IdentifierDeclType	float		1298794	0					
ANR	1298800	Identifier	check		1298794	1					
ANR	1298801	AssignmentExpression	check = pgs_lp -> miter_check		1298794	2		=			
ANR	1298802	Identifier	check		1298794	0					
ANR	1298803	PtrMemberAccess	pgs_lp -> miter_check		1298794	1					
ANR	1298804	Identifier	pgs_lp		1298794	0					
ANR	1298805	Identifier	miter_check		1298794	1					
ANR	1298806	IdentifierDeclStatement	"double u1 = plp -> vector . y , v1 = plp -> vector . x ;"	2077:4:87814:87859	1298794	1	True				
ANR	1298807	IdentifierDecl	u1 = plp -> vector . y		1298794	0					
ANR	1298808	IdentifierDeclType	double		1298794	0					
ANR	1298809	Identifier	u1		1298794	1					
ANR	1298810	AssignmentExpression	u1 = plp -> vector . y		1298794	2		=			
ANR	1298811	Identifier	u1		1298794	0					
ANR	1298812	MemberAccess	plp -> vector . y		1298794	1					
ANR	1298813	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1298814	Identifier	plp		1298794	0					
ANR	1298815	Identifier	vector		1298794	1					
ANR	1298816	Identifier	y		1298794	1					
ANR	1298817	IdentifierDecl	v1 = plp -> vector . x		1298794	1					
ANR	1298818	IdentifierDeclType	double		1298794	0					
ANR	1298819	Identifier	v1		1298794	1					
ANR	1298820	AssignmentExpression	v1 = plp -> vector . x		1298794	2		=			
ANR	1298821	Identifier	v1		1298794	0					
ANR	1298822	MemberAccess	plp -> vector . x		1298794	1					
ANR	1298823	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1298824	Identifier	plp		1298794	0					
ANR	1298825	Identifier	vector		1298794	1					
ANR	1298826	Identifier	x		1298794	1					
ANR	1298827	IdentifierDeclStatement	"double u2 = - nplp -> vector . y , v2 = - nplp -> vector . x ;"	2078:4:87865:87914	1298794	2	True				
ANR	1298828	IdentifierDecl	u2 = - nplp -> vector . y		1298794	0					
ANR	1298829	IdentifierDeclType	double		1298794	0					
ANR	1298830	Identifier	u2		1298794	1					
ANR	1298831	AssignmentExpression	u2 = - nplp -> vector . y		1298794	2		=			
ANR	1298832	Identifier	u2		1298794	0					
ANR	1298833	UnaryOperationExpression	- nplp -> vector . y		1298794	1					
ANR	1298834	UnaryOperator	-		1298794	0					
ANR	1298835	MemberAccess	nplp -> vector . y		1298794	1					
ANR	1298836	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1298837	Identifier	nplp		1298794	0					
ANR	1298838	Identifier	vector		1298794	1					
ANR	1298839	Identifier	y		1298794	1					
ANR	1298840	IdentifierDecl	v2 = - nplp -> vector . x		1298794	1					
ANR	1298841	IdentifierDeclType	double		1298794	0					
ANR	1298842	Identifier	v2		1298794	1					
ANR	1298843	AssignmentExpression	v2 = - nplp -> vector . x		1298794	2		=			
ANR	1298844	Identifier	v2		1298794	0					
ANR	1298845	UnaryOperationExpression	- nplp -> vector . x		1298794	1					
ANR	1298846	UnaryOperator	-		1298794	0					
ANR	1298847	MemberAccess	nplp -> vector . x		1298794	1					
ANR	1298848	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1298849	Identifier	nplp		1298794	0					
ANR	1298850	Identifier	vector		1298794	1					
ANR	1298851	Identifier	x		1298794	1					
ANR	1298852	IdentifierDeclStatement	"double num , denom ;"	2079:4:87920:87937	1298794	3	True				
ANR	1298853	IdentifierDecl	num		1298794	0					
ANR	1298854	IdentifierDeclType	double		1298794	0					
ANR	1298855	Identifier	num		1298794	1					
ANR	1298856	IdentifierDecl	denom		1298794	1					
ANR	1298857	IdentifierDeclType	double		1298794	0					
ANR	1298858	Identifier	denom		1298794	1					
ANR	1298859	IdentifierDeclStatement	int code ;	2080:4:87943:87951	1298794	4	True				
ANR	1298860	IdentifierDecl	code		1298794	0					
ANR	1298861	IdentifierDeclType	int		1298794	0					
ANR	1298862	Identifier	code		1298794	1					
ANR	1298863	IfStatement	if ( pmat )		1298794	5					
ANR	1298864	Condition	pmat	2082:8:87962:87965	1298794	0	True				
ANR	1298865	Identifier	pmat		1298794	0					
ANR	1298866	CompoundStatement		23:8:764:775	1298794	1					
ANR	1298867	IdentifierDeclStatement	gs_point pt ;	2083:8:87978:87989	1298794	0	True				
ANR	1298868	IdentifierDecl	pt		1298794	0					
ANR	1298869	IdentifierDeclType	gs_point		1298794	0					
ANR	1298870	Identifier	pt		1298794	1					
ANR	1298871	ExpressionStatement	"code = gs_distance_transform_inverse ( v1 , u1 , pmat , & pt )"	2085:8:88000:88055	1298794	1	True				
ANR	1298872	AssignmentExpression	"code = gs_distance_transform_inverse ( v1 , u1 , pmat , & pt )"		1298794	0		=			
ANR	1298873	Identifier	code		1298794	0					
ANR	1298874	CallExpression	"gs_distance_transform_inverse ( v1 , u1 , pmat , & pt )"		1298794	1					
ANR	1298875	Callee	gs_distance_transform_inverse		1298794	0					
ANR	1298876	Identifier	gs_distance_transform_inverse		1298794	0					
ANR	1298877	ArgumentList	v1		1298794	1					
ANR	1298878	Argument	v1		1298794	0					
ANR	1298879	Identifier	v1		1298794	0					
ANR	1298880	Argument	u1		1298794	1					
ANR	1298881	Identifier	u1		1298794	0					
ANR	1298882	Argument	pmat		1298794	2					
ANR	1298883	Identifier	pmat		1298794	0					
ANR	1298884	Argument	& pt		1298794	3					
ANR	1298885	UnaryOperationExpression	& pt		1298794	0					
ANR	1298886	UnaryOperator	&		1298794	0					
ANR	1298887	Identifier	pt		1298794	1					
ANR	1298888	IfStatement	if ( code < 0 )		1298794	2					
ANR	1298889	Condition	code < 0	2086:12:88069:88076	1298794	0	True				
ANR	1298890	RelationalExpression	code < 0		1298794	0		<			
ANR	1298891	Identifier	code		1298794	0					
ANR	1298892	PrimaryExpression	0		1298794	1					
ANR	1298893	ReturnStatement	return code ;	2087:8:88087:88098	1298794	1	True				
ANR	1298894	Identifier	code		1298794	0					
ANR	1298895	ExpressionStatement	"v1 = pt . x , u1 = pt . y"	2088:8:88108:88128	1298794	3	True				
ANR	1298896	Expression	"v1 = pt . x , u1 = pt . y"		1298794	0					
ANR	1298897	AssignmentExpression	v1 = pt . x		1298794	0		=			
ANR	1298898	Identifier	v1		1298794	0					
ANR	1298899	MemberAccess	pt . x		1298794	1					
ANR	1298900	Identifier	pt		1298794	0					
ANR	1298901	Identifier	x		1298794	1					
ANR	1298902	AssignmentExpression	u1 = pt . y		1298794	1		=			
ANR	1298903	Identifier	u1		1298794	0					
ANR	1298904	MemberAccess	pt . y		1298794	1					
ANR	1298905	Identifier	pt		1298794	0					
ANR	1298906	Identifier	y		1298794	1					
ANR	1298907	ExpressionStatement	"code = gs_distance_transform_inverse ( v2 , u2 , pmat , & pt )"	2089:8:88138:88193	1298794	4	True				
ANR	1298908	AssignmentExpression	"code = gs_distance_transform_inverse ( v2 , u2 , pmat , & pt )"		1298794	0		=			
ANR	1298909	Identifier	code		1298794	0					
ANR	1298910	CallExpression	"gs_distance_transform_inverse ( v2 , u2 , pmat , & pt )"		1298794	1					
ANR	1298911	Callee	gs_distance_transform_inverse		1298794	0					
ANR	1298912	Identifier	gs_distance_transform_inverse		1298794	0					
ANR	1298913	ArgumentList	v2		1298794	1					
ANR	1298914	Argument	v2		1298794	0					
ANR	1298915	Identifier	v2		1298794	0					
ANR	1298916	Argument	u2		1298794	1					
ANR	1298917	Identifier	u2		1298794	0					
ANR	1298918	Argument	pmat		1298794	2					
ANR	1298919	Identifier	pmat		1298794	0					
ANR	1298920	Argument	& pt		1298794	3					
ANR	1298921	UnaryOperationExpression	& pt		1298794	0					
ANR	1298922	UnaryOperator	&		1298794	0					
ANR	1298923	Identifier	pt		1298794	1					
ANR	1298924	IfStatement	if ( code < 0 )		1298794	5					
ANR	1298925	Condition	code < 0	2090:12:88207:88214	1298794	0	True				
ANR	1298926	RelationalExpression	code < 0		1298794	0		<			
ANR	1298927	Identifier	code		1298794	0					
ANR	1298928	PrimaryExpression	0		1298794	1					
ANR	1298929	ReturnStatement	return code ;	2091:12:88229:88240	1298794	1	True				
ANR	1298930	Identifier	code		1298794	0					
ANR	1298931	ExpressionStatement	"v2 = pt . x , u2 = pt . y"	2092:8:88250:88270	1298794	6	True				
ANR	1298932	Expression	"v2 = pt . x , u2 = pt . y"		1298794	0					
ANR	1298933	AssignmentExpression	v2 = pt . x		1298794	0		=			
ANR	1298934	Identifier	v2		1298794	0					
ANR	1298935	MemberAccess	pt . x		1298794	1					
ANR	1298936	Identifier	pt		1298794	0					
ANR	1298937	Identifier	x		1298794	1					
ANR	1298938	AssignmentExpression	u2 = pt . y		1298794	1		=			
ANR	1298939	Identifier	u2		1298794	0					
ANR	1298940	MemberAccess	pt . y		1298794	1					
ANR	1298941	Identifier	pt		1298794	0					
ANR	1298942	Identifier	y		1298794	1					
ANR	1298943	ExpressionStatement	ccw0 = v1 * u2 < v2 * u1	2102:8:88699:88723	1298794	7	True				
ANR	1298944	AssignmentExpression	ccw0 = v1 * u2 < v2 * u1		1298794	0		=			
ANR	1298945	Identifier	ccw0		1298794	0					
ANR	1298946	RelationalExpression	v1 * u2 < v2 * u1		1298794	1		<			
ANR	1298947	MultiplicativeExpression	v1 * u2		1298794	0		*			
ANR	1298948	Identifier	v1		1298794	0					
ANR	1298949	Identifier	u2		1298794	1					
ANR	1298950	MultiplicativeExpression	v2 * u1		1298794	1		*			
ANR	1298951	Identifier	v2		1298794	0					
ANR	1298952	Identifier	u1		1298794	1					
ANR	1298953	CompoundStatement		45:12:1579:1639	1298794	8					
ANR	1298954	IdentifierDeclStatement	"double a1 = atan2 ( u1 , v1 ) , a2 = atan2 ( u2 , v2 ) , dif = a1 - a2 ;"	2105:12:88793:88853	1298794	0	True				
ANR	1298955	IdentifierDecl	"a1 = atan2 ( u1 , v1 )"		1298794	0					
ANR	1298956	IdentifierDeclType	double		1298794	0					
ANR	1298957	Identifier	a1		1298794	1					
ANR	1298958	AssignmentExpression	"a1 = atan2 ( u1 , v1 )"		1298794	2		=			
ANR	1298959	Identifier	a1		1298794	0					
ANR	1298960	CallExpression	"atan2 ( u1 , v1 )"		1298794	1					
ANR	1298961	Callee	atan2		1298794	0					
ANR	1298962	Identifier	atan2		1298794	0					
ANR	1298963	ArgumentList	u1		1298794	1					
ANR	1298964	Argument	u1		1298794	0					
ANR	1298965	Identifier	u1		1298794	0					
ANR	1298966	Argument	v1		1298794	1					
ANR	1298967	Identifier	v1		1298794	0					
ANR	1298968	IdentifierDecl	"a2 = atan2 ( u2 , v2 )"		1298794	1					
ANR	1298969	IdentifierDeclType	double		1298794	0					
ANR	1298970	Identifier	a2		1298794	1					
ANR	1298971	AssignmentExpression	"a2 = atan2 ( u2 , v2 )"		1298794	2		=			
ANR	1298972	Identifier	a2		1298794	0					
ANR	1298973	CallExpression	"atan2 ( u2 , v2 )"		1298794	1					
ANR	1298974	Callee	atan2		1298794	0					
ANR	1298975	Identifier	atan2		1298794	0					
ANR	1298976	ArgumentList	u2		1298794	1					
ANR	1298977	Argument	u2		1298794	0					
ANR	1298978	Identifier	u2		1298794	0					
ANR	1298979	Argument	v2		1298794	1					
ANR	1298980	Identifier	v2		1298794	0					
ANR	1298981	IdentifierDecl	dif = a1 - a2		1298794	2					
ANR	1298982	IdentifierDeclType	double		1298794	0					
ANR	1298983	Identifier	dif		1298794	1					
ANR	1298984	AssignmentExpression	dif = a1 - a2		1298794	2		=			
ANR	1298985	Identifier	dif		1298794	0					
ANR	1298986	AdditiveExpression	a1 - a2		1298794	1		-			
ANR	1298987	Identifier	a1		1298794	0					
ANR	1298988	Identifier	a2		1298794	1					
ANR	1298989	IfStatement	if ( dif < 0 )		1298794	1					
ANR	1298990	Condition	dif < 0	2107:16:88872:88878	1298794	0	True				
ANR	1298991	RelationalExpression	dif < 0		1298794	0		<			
ANR	1298992	Identifier	dif		1298794	0					
ANR	1298993	PrimaryExpression	0		1298794	1					
ANR	1298994	ExpressionStatement	dif += 2 * M_PI	2108:16:88897:88912	1298794	1	True				
ANR	1298995	AssignmentExpression	dif += 2 * M_PI		1298794	0		+=			
ANR	1298996	Identifier	dif		1298794	0					
ANR	1298997	MultiplicativeExpression	2 * M_PI		1298794	1		*			
ANR	1298998	PrimaryExpression	2		1298794	0					
ANR	1298999	Identifier	M_PI		1298794	1					
ANR	1299000	ElseStatement	else		1298794	0					
ANR	1299001	IfStatement	if ( dif >= 2 * M_PI )		1298794	0					
ANR	1299002	Condition	dif >= 2 * M_PI	2109:21:88935:88949	1298794	0	True				
ANR	1299003	RelationalExpression	dif >= 2 * M_PI		1298794	0		>=			
ANR	1299004	Identifier	dif		1298794	0					
ANR	1299005	MultiplicativeExpression	2 * M_PI		1298794	1		*			
ANR	1299006	PrimaryExpression	2		1298794	0					
ANR	1299007	Identifier	M_PI		1298794	1					
ANR	1299008	ExpressionStatement	dif -= 2 * M_PI	2110:16:88968:88983	1298794	1	True				
ANR	1299009	AssignmentExpression	dif -= 2 * M_PI		1298794	0		-=			
ANR	1299010	Identifier	dif		1298794	0					
ANR	1299011	MultiplicativeExpression	2 * M_PI		1298794	1		*			
ANR	1299012	PrimaryExpression	2		1298794	0					
ANR	1299013	Identifier	M_PI		1298794	1					
ANR	1299014	IfStatement	if ( dif != 0 && ( dif < M_PI ) != ccw0 )		1298794	2					
ANR	1299015	Condition	dif != 0 && ( dif < M_PI ) != ccw0	2111:16:89001:89032	1298794	0	True				
ANR	1299016	AndExpression	dif != 0 && ( dif < M_PI ) != ccw0		1298794	0		&&			
ANR	1299017	EqualityExpression	dif != 0		1298794	0		!=			
ANR	1299018	Identifier	dif		1298794	0					
ANR	1299019	PrimaryExpression	0		1298794	1					
ANR	1299020	EqualityExpression	( dif < M_PI ) != ccw0		1298794	1		!=			
ANR	1299021	RelationalExpression	dif < M_PI		1298794	0		<			
ANR	1299022	Identifier	dif		1298794	0					
ANR	1299023	Identifier	M_PI		1298794	1					
ANR	1299024	Identifier	ccw0		1298794	1					
ANR	1299025	ExpressionStatement	"lprintf8 ( ""ccw wrong: tan(a1=%g)=%g/%g, tan(a2=%g)=%g,%g, dif=%g, ccw0=%d\\n"" , a1 , u1 , v1 , a2 , u2 , v2 , dif , ccw0 )"	2112:16:89051:89187	1298794	1	True				
ANR	1299026	CallExpression	"lprintf8 ( ""ccw wrong: tan(a1=%g)=%g/%g, tan(a2=%g)=%g,%g, dif=%g, ccw0=%d\\n"" , a1 , u1 , v1 , a2 , u2 , v2 , dif , ccw0 )"		1298794	0					
ANR	1299027	Callee	lprintf8		1298794	0					
ANR	1299028	Identifier	lprintf8		1298794	0					
ANR	1299029	ArgumentList	"""ccw wrong: tan(a1=%g)=%g/%g, tan(a2=%g)=%g,%g, dif=%g, ccw0=%d\\n"""		1298794	1					
ANR	1299030	Argument	"""ccw wrong: tan(a1=%g)=%g/%g, tan(a2=%g)=%g,%g, dif=%g, ccw0=%d\\n"""		1298794	0					
ANR	1299031	PrimaryExpression	"""ccw wrong: tan(a1=%g)=%g/%g, tan(a2=%g)=%g,%g, dif=%g, ccw0=%d\\n"""		1298794	0					
ANR	1299032	Argument	a1		1298794	1					
ANR	1299033	Identifier	a1		1298794	0					
ANR	1299034	Argument	u1		1298794	2					
ANR	1299035	Identifier	u1		1298794	0					
ANR	1299036	Argument	v1		1298794	3					
ANR	1299037	Identifier	v1		1298794	0					
ANR	1299038	Argument	a2		1298794	4					
ANR	1299039	Identifier	a2		1298794	0					
ANR	1299040	Argument	u2		1298794	5					
ANR	1299041	Identifier	u2		1298794	0					
ANR	1299042	Argument	v2		1298794	6					
ANR	1299043	Identifier	v2		1298794	0					
ANR	1299044	Argument	dif		1298794	7					
ANR	1299045	Identifier	dif		1298794	0					
ANR	1299046	Argument	ccw0		1298794	8					
ANR	1299047	Identifier	ccw0		1298794	0					
ANR	1299048	ExpressionStatement	num = u1 * v2 - u2 * v1	2117:4:89216:89239	1298794	6	True				
ANR	1299049	AssignmentExpression	num = u1 * v2 - u2 * v1		1298794	0		=			
ANR	1299050	Identifier	num		1298794	0					
ANR	1299051	AdditiveExpression	u1 * v2 - u2 * v1		1298794	1		-			
ANR	1299052	MultiplicativeExpression	u1 * v2		1298794	0		*			
ANR	1299053	Identifier	u1		1298794	0					
ANR	1299054	Identifier	v2		1298794	1					
ANR	1299055	MultiplicativeExpression	u2 * v1		1298794	1		*			
ANR	1299056	Identifier	u2		1298794	0					
ANR	1299057	Identifier	v1		1298794	1					
ANR	1299058	ExpressionStatement	denom = u1 * u2 + v1 * v2	2118:4:89245:89270	1298794	7	True				
ANR	1299059	AssignmentExpression	denom = u1 * u2 + v1 * v2		1298794	0		=			
ANR	1299060	Identifier	denom		1298794	0					
ANR	1299061	AdditiveExpression	u1 * u2 + v1 * v2		1298794	1		+			
ANR	1299062	MultiplicativeExpression	u1 * u2		1298794	0		*			
ANR	1299063	Identifier	u1		1298794	0					
ANR	1299064	Identifier	u2		1298794	1					
ANR	1299065	MultiplicativeExpression	v1 * v2		1298794	1		*			
ANR	1299066	Identifier	v1		1298794	0					
ANR	1299067	Identifier	v2		1298794	1					
ANR	1299068	IfStatement	if ( ! ccw0 )		1298794	8					
ANR	1299069	Condition	! ccw0	2124:8:89456:89460	1298794	0	True				
ANR	1299070	UnaryOperationExpression	! ccw0		1298794	0					
ANR	1299071	UnaryOperator	!		1298794	0					
ANR	1299072	Identifier	ccw0		1298794	1					
ANR	1299073	ExpressionStatement	num = - num	2125:8:89519:89529	1298794	1	True				
ANR	1299074	AssignmentExpression	num = - num		1298794	0		=			
ANR	1299075	Identifier	num		1298794	0					
ANR	1299076	UnaryOperationExpression	- num		1298794	1					
ANR	1299077	UnaryOperator	-		1298794	0					
ANR	1299078	Identifier	num		1298794	1					
ANR	1299079	IfStatement	if ( gs_debug_c ( 'O' ) )		1298794	9					
ANR	1299080	Condition	gs_debug_c ( 'O' )	2127:8:89585:89599	1298794	0	True				
ANR	1299081	CallExpression	gs_debug_c ( 'O' )		1298794	0					
ANR	1299082	Callee	gs_debug_c		1298794	0					
ANR	1299083	Identifier	gs_debug_c		1298794	0					
ANR	1299084	ArgumentList	'O'		1298794	1					
ANR	1299085	Argument	'O'		1298794	0					
ANR	1299086	PrimaryExpression	'O'		1298794	0					
ANR	1299087	CompoundStatement		67:25:2388:2388	1298794	1					
ANR	1299088	ExpressionStatement	"dlprintf4 ( ""[o]Miter check: u1/v1=%f/%f, u2/v2=%f/%f,\\n"" , u1 , v1 , u2 , v2 )"	2128:8:89612:89702	1298794	0	True				
ANR	1299089	CallExpression	"dlprintf4 ( ""[o]Miter check: u1/v1=%f/%f, u2/v2=%f/%f,\\n"" , u1 , v1 , u2 , v2 )"		1298794	0					
ANR	1299090	Callee	dlprintf4		1298794	0					
ANR	1299091	Identifier	dlprintf4		1298794	0					
ANR	1299092	ArgumentList	"""[o]Miter check: u1/v1=%f/%f, u2/v2=%f/%f,\\n"""		1298794	1					
ANR	1299093	Argument	"""[o]Miter check: u1/v1=%f/%f, u2/v2=%f/%f,\\n"""		1298794	0					
ANR	1299094	PrimaryExpression	"""[o]Miter check: u1/v1=%f/%f, u2/v2=%f/%f,\\n"""		1298794	0					
ANR	1299095	Argument	u1		1298794	1					
ANR	1299096	Identifier	u1		1298794	0					
ANR	1299097	Argument	v1		1298794	2					
ANR	1299098	Identifier	v1		1298794	0					
ANR	1299099	Argument	u2		1298794	3					
ANR	1299100	Identifier	u2		1298794	0					
ANR	1299101	Argument	v2		1298794	4					
ANR	1299102	Identifier	v2		1298794	0					
ANR	1299103	ExpressionStatement	"dlprintf3 ( ""        num=%f, denom=%f, check=%f\\n"" , num , denom , check )"	2130:8:89712:89798	1298794	1	True				
ANR	1299104	CallExpression	"dlprintf3 ( ""        num=%f, denom=%f, check=%f\\n"" , num , denom , check )"		1298794	0					
ANR	1299105	Callee	dlprintf3		1298794	0					
ANR	1299106	Identifier	dlprintf3		1298794	0					
ANR	1299107	ArgumentList	"""        num=%f, denom=%f, check=%f\\n"""		1298794	1					
ANR	1299108	Argument	"""        num=%f, denom=%f, check=%f\\n"""		1298794	0					
ANR	1299109	PrimaryExpression	"""        num=%f, denom=%f, check=%f\\n"""		1298794	0					
ANR	1299110	Argument	num		1298794	1					
ANR	1299111	Identifier	num		1298794	0					
ANR	1299112	Argument	denom		1298794	2					
ANR	1299113	Identifier	denom		1298794	0					
ANR	1299114	Argument	check		1298794	3					
ANR	1299115	Identifier	check		1298794	0					
ANR	1299116	IfStatement	if ( num == 0 && denom == 0 )		1298794	10					
ANR	1299117	Condition	num == 0 && denom == 0	2149:8:90530:90551	1298794	0	True				
ANR	1299118	AndExpression	num == 0 && denom == 0		1298794	0		&&			
ANR	1299119	EqualityExpression	num == 0		1298794	0		==			
ANR	1299120	Identifier	num		1298794	0					
ANR	1299121	PrimaryExpression	0		1298794	1					
ANR	1299122	EqualityExpression	denom == 0		1298794	1		==			
ANR	1299123	Identifier	denom		1298794	0					
ANR	1299124	PrimaryExpression	0		1298794	1					
ANR	1299125	ExpressionStatement	return_error ( gs_error_unregistered )	2150:8:90562:90597	1298794	1	True				
ANR	1299126	CallExpression	return_error ( gs_error_unregistered )		1298794	0					
ANR	1299127	Callee	return_error		1298794	0					
ANR	1299128	Identifier	return_error		1298794	0					
ANR	1299129	ArgumentList	gs_error_unregistered		1298794	1					
ANR	1299130	Argument	gs_error_unregistered		1298794	0					
ANR	1299131	Identifier	gs_error_unregistered		1298794	0					
ANR	1299132	IfStatement	if ( denom < 0 )		1298794	11					
ANR	1299133	Condition	denom < 0	2151:8:90630:90638	1298794	0	True				
ANR	1299134	RelationalExpression	denom < 0		1298794	0		<			
ANR	1299135	Identifier	denom		1298794	0					
ANR	1299136	PrimaryExpression	0		1298794	1					
ANR	1299137	ExpressionStatement	"num = - num , denom = - denom"	2152:8:90649:90675	1298794	1	True				
ANR	1299138	Expression	"num = - num , denom = - denom"		1298794	0					
ANR	1299139	AssignmentExpression	num = - num		1298794	0		=			
ANR	1299140	Identifier	num		1298794	0					
ANR	1299141	UnaryOperationExpression	- num		1298794	1					
ANR	1299142	UnaryOperator	-		1298794	0					
ANR	1299143	Identifier	num		1298794	1					
ANR	1299144	AssignmentExpression	denom = - denom		1298794	1		=			
ANR	1299145	Identifier	denom		1298794	0					
ANR	1299146	UnaryOperationExpression	- denom		1298794	1					
ANR	1299147	UnaryOperator	-		1298794	0					
ANR	1299148	Identifier	denom		1298794	1					
ANR	1299149	IfStatement	if ( check > 0 ? ( num < 0 || num >= denom * check ) : ( num < 0 && num >= denom * check ) )		1298794	12					
ANR	1299150	Condition	check > 0 ? ( num < 0 || num >= denom * check ) : ( num < 0 && num >= denom * check )	2154:8:90735:90831	1298794	0	True				
ANR	1299151	ConditionalExpression	check > 0 ? ( num < 0 || num >= denom * check ) : ( num < 0 && num >= denom * check )		1298794	0					
ANR	1299152	Condition	check > 0		1298794	0					
ANR	1299153	RelationalExpression	check > 0		1298794	0		>			
ANR	1299154	Identifier	check		1298794	0					
ANR	1299155	PrimaryExpression	0		1298794	1					
ANR	1299156	OrExpression	num < 0 || num >= denom * check		1298794	1		||			
ANR	1299157	RelationalExpression	num < 0		1298794	0		<			
ANR	1299158	Identifier	num		1298794	0					
ANR	1299159	PrimaryExpression	0		1298794	1					
ANR	1299160	RelationalExpression	num >= denom * check		1298794	1		>=			
ANR	1299161	Identifier	num		1298794	0					
ANR	1299162	MultiplicativeExpression	denom * check		1298794	1		*			
ANR	1299163	Identifier	denom		1298794	0					
ANR	1299164	Identifier	check		1298794	1					
ANR	1299165	AndExpression	num < 0 && num >= denom * check		1298794	2		&&			
ANR	1299166	RelationalExpression	num < 0		1298794	0		<			
ANR	1299167	Identifier	num		1298794	0					
ANR	1299168	PrimaryExpression	0		1298794	1					
ANR	1299169	RelationalExpression	num >= denom * check		1298794	1		>=			
ANR	1299170	Identifier	num		1298794	0					
ANR	1299171	MultiplicativeExpression	denom * check		1298794	1		*			
ANR	1299172	Identifier	denom		1298794	0					
ANR	1299173	Identifier	check		1298794	1					
ANR	1299174	CompoundStatement		99:8:3677:3704	1298794	1					
ANR	1299175	IdentifierDeclStatement	"gs_fixed_point dirn1 , dirn2 ;"	2159:8:90891:90918	1298794	0	True				
ANR	1299176	IdentifierDecl	dirn1		1298794	0					
ANR	1299177	IdentifierDeclType	gs_fixed_point		1298794	0					
ANR	1299178	Identifier	dirn1		1298794	1					
ANR	1299179	IdentifierDecl	dirn2		1298794	1					
ANR	1299180	IdentifierDeclType	gs_fixed_point		1298794	0					
ANR	1299181	Identifier	dirn2		1298794	1					
ANR	1299182	ExpressionStatement	dirn1 . x = plp -> e . cdelta . x	2161:8:90929:90954	1298794	1	True				
ANR	1299183	AssignmentExpression	dirn1 . x = plp -> e . cdelta . x		1298794	0		=			
ANR	1299184	MemberAccess	dirn1 . x		1298794	0					
ANR	1299185	Identifier	dirn1		1298794	0					
ANR	1299186	Identifier	x		1298794	1					
ANR	1299187	MemberAccess	plp -> e . cdelta . x		1298794	1					
ANR	1299188	MemberAccess	plp -> e . cdelta		1298794	0					
ANR	1299189	PtrMemberAccess	plp -> e		1298794	0					
ANR	1299190	Identifier	plp		1298794	0					
ANR	1299191	Identifier	e		1298794	1					
ANR	1299192	Identifier	cdelta		1298794	1					
ANR	1299193	Identifier	x		1298794	1					
ANR	1299194	ExpressionStatement	dirn1 . y = plp -> e . cdelta . y	2162:8:90964:90989	1298794	2	True				
ANR	1299195	AssignmentExpression	dirn1 . y = plp -> e . cdelta . y		1298794	0		=			
ANR	1299196	MemberAccess	dirn1 . y		1298794	0					
ANR	1299197	Identifier	dirn1		1298794	0					
ANR	1299198	Identifier	y		1298794	1					
ANR	1299199	MemberAccess	plp -> e . cdelta . y		1298794	1					
ANR	1299200	MemberAccess	plp -> e . cdelta		1298794	0					
ANR	1299201	PtrMemberAccess	plp -> e		1298794	0					
ANR	1299202	Identifier	plp		1298794	0					
ANR	1299203	Identifier	e		1298794	1					
ANR	1299204	Identifier	cdelta		1298794	1					
ANR	1299205	Identifier	y		1298794	1					
ANR	1299206	IfStatement	if ( ( abs ( dirn1 . x ) + abs ( dirn1 . y ) < 16 ) && ( ( plp -> vector . x != 0 ) || ( plp -> vector . y != 0 ) ) )		1298794	3					
ANR	1299207	Condition	( abs ( dirn1 . x ) + abs ( dirn1 . y ) < 16 ) && ( ( plp -> vector . x != 0 ) || ( plp -> vector . y != 0 ) )	2166:12:91191:91286	1298794	0	True				
ANR	1299208	AndExpression	( abs ( dirn1 . x ) + abs ( dirn1 . y ) < 16 ) && ( ( plp -> vector . x != 0 ) || ( plp -> vector . y != 0 ) )		1298794	0		&&			
ANR	1299209	RelationalExpression	abs ( dirn1 . x ) + abs ( dirn1 . y ) < 16		1298794	0		<			
ANR	1299210	AdditiveExpression	abs ( dirn1 . x ) + abs ( dirn1 . y )		1298794	0		+			
ANR	1299211	CallExpression	abs ( dirn1 . x )		1298794	0					
ANR	1299212	Callee	abs		1298794	0					
ANR	1299213	Identifier	abs		1298794	0					
ANR	1299214	ArgumentList	dirn1 . x		1298794	1					
ANR	1299215	Argument	dirn1 . x		1298794	0					
ANR	1299216	MemberAccess	dirn1 . x		1298794	0					
ANR	1299217	Identifier	dirn1		1298794	0					
ANR	1299218	Identifier	x		1298794	1					
ANR	1299219	CallExpression	abs ( dirn1 . y )		1298794	1					
ANR	1299220	Callee	abs		1298794	0					
ANR	1299221	Identifier	abs		1298794	0					
ANR	1299222	ArgumentList	dirn1 . y		1298794	1					
ANR	1299223	Argument	dirn1 . y		1298794	0					
ANR	1299224	MemberAccess	dirn1 . y		1298794	0					
ANR	1299225	Identifier	dirn1		1298794	0					
ANR	1299226	Identifier	y		1298794	1					
ANR	1299227	PrimaryExpression	16		1298794	1					
ANR	1299228	OrExpression	( plp -> vector . x != 0 ) || ( plp -> vector . y != 0 )		1298794	1		||			
ANR	1299229	EqualityExpression	plp -> vector . x != 0		1298794	0		!=			
ANR	1299230	MemberAccess	plp -> vector . x		1298794	0					
ANR	1299231	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1299232	Identifier	plp		1298794	0					
ANR	1299233	Identifier	vector		1298794	1					
ANR	1299234	Identifier	x		1298794	1					
ANR	1299235	PrimaryExpression	0		1298794	1					
ANR	1299236	EqualityExpression	plp -> vector . y != 0		1298794	1		!=			
ANR	1299237	MemberAccess	plp -> vector . y		1298794	0					
ANR	1299238	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1299239	Identifier	plp		1298794	0					
ANR	1299240	Identifier	vector		1298794	1					
ANR	1299241	Identifier	y		1298794	1					
ANR	1299242	PrimaryExpression	0		1298794	1					
ANR	1299243	CompoundStatement		109:12:4097:4118	1298794	1					
ANR	1299244	IdentifierDeclStatement	float scale = 65536.0 ;	2169:12:91311:91332	1298794	0	True				
ANR	1299245	IdentifierDecl	scale = 65536.0		1298794	0					
ANR	1299246	IdentifierDeclType	float		1298794	0					
ANR	1299247	Identifier	scale		1298794	1					
ANR	1299248	AssignmentExpression	scale = 65536.0		1298794	2		=			
ANR	1299249	Identifier	scale		1298794	0					
ANR	1299250	PrimaryExpression	65536.0		1298794	1					
ANR	1299251	IfStatement	if ( abs ( plp -> vector . x ) > abs ( plp -> vector . y ) )		1298794	1					
ANR	1299252	Condition	abs ( plp -> vector . x ) > abs ( plp -> vector . y )	2170:16:91350:91388	1298794	0	True				
ANR	1299253	RelationalExpression	abs ( plp -> vector . x ) > abs ( plp -> vector . y )		1298794	0		>			
ANR	1299254	CallExpression	abs ( plp -> vector . x )		1298794	0					
ANR	1299255	Callee	abs		1298794	0					
ANR	1299256	Identifier	abs		1298794	0					
ANR	1299257	ArgumentList	plp -> vector . x		1298794	1					
ANR	1299258	Argument	plp -> vector . x		1298794	0					
ANR	1299259	MemberAccess	plp -> vector . x		1298794	0					
ANR	1299260	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1299261	Identifier	plp		1298794	0					
ANR	1299262	Identifier	vector		1298794	1					
ANR	1299263	Identifier	x		1298794	1					
ANR	1299264	CallExpression	abs ( plp -> vector . y )		1298794	1					
ANR	1299265	Callee	abs		1298794	0					
ANR	1299266	Identifier	abs		1298794	0					
ANR	1299267	ArgumentList	plp -> vector . y		1298794	1					
ANR	1299268	Argument	plp -> vector . y		1298794	0					
ANR	1299269	MemberAccess	plp -> vector . y		1298794	0					
ANR	1299270	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1299271	Identifier	plp		1298794	0					
ANR	1299272	Identifier	vector		1298794	1					
ANR	1299273	Identifier	y		1298794	1					
ANR	1299274	ExpressionStatement	scale /= abs ( plp -> vector . x )	2171:16:91407:91434	1298794	1	True				
ANR	1299275	AssignmentExpression	scale /= abs ( plp -> vector . x )		1298794	0		/=			
ANR	1299276	Identifier	scale		1298794	0					
ANR	1299277	CallExpression	abs ( plp -> vector . x )		1298794	1					
ANR	1299278	Callee	abs		1298794	0					
ANR	1299279	Identifier	abs		1298794	0					
ANR	1299280	ArgumentList	plp -> vector . x		1298794	1					
ANR	1299281	Argument	plp -> vector . x		1298794	0					
ANR	1299282	MemberAccess	plp -> vector . x		1298794	0					
ANR	1299283	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1299284	Identifier	plp		1298794	0					
ANR	1299285	Identifier	vector		1298794	1					
ANR	1299286	Identifier	x		1298794	1					
ANR	1299287	ElseStatement	else		1298794	0					
ANR	1299288	ExpressionStatement	scale /= abs ( plp -> vector . y )	2173:16:91469:91496	1298794	0	True				
ANR	1299289	AssignmentExpression	scale /= abs ( plp -> vector . y )		1298794	0		/=			
ANR	1299290	Identifier	scale		1298794	0					
ANR	1299291	CallExpression	abs ( plp -> vector . y )		1298794	1					
ANR	1299292	Callee	abs		1298794	0					
ANR	1299293	Identifier	abs		1298794	0					
ANR	1299294	ArgumentList	plp -> vector . y		1298794	1					
ANR	1299295	Argument	plp -> vector . y		1298794	0					
ANR	1299296	MemberAccess	plp -> vector . y		1298794	0					
ANR	1299297	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1299298	Identifier	plp		1298794	0					
ANR	1299299	Identifier	vector		1298794	1					
ANR	1299300	Identifier	y		1298794	1					
ANR	1299301	ExpressionStatement	dirn1 . x = ( fixed ) ( plp -> vector . x * scale )	2174:12:91510:91548	1298794	2	True				
ANR	1299302	AssignmentExpression	dirn1 . x = ( fixed ) ( plp -> vector . x * scale )		1298794	0		=			
ANR	1299303	MemberAccess	dirn1 . x		1298794	0					
ANR	1299304	Identifier	dirn1		1298794	0					
ANR	1299305	Identifier	x		1298794	1					
ANR	1299306	CastExpression	( fixed ) ( plp -> vector . x * scale )		1298794	1					
ANR	1299307	CastTarget	fixed		1298794	0					
ANR	1299308	MultiplicativeExpression	plp -> vector . x * scale		1298794	1		*			
ANR	1299309	MemberAccess	plp -> vector . x		1298794	0					
ANR	1299310	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1299311	Identifier	plp		1298794	0					
ANR	1299312	Identifier	vector		1298794	1					
ANR	1299313	Identifier	x		1298794	1					
ANR	1299314	Identifier	scale		1298794	1					
ANR	1299315	ExpressionStatement	dirn1 . y = ( fixed ) ( plp -> vector . y * scale )	2175:12:91562:91600	1298794	3	True				
ANR	1299316	AssignmentExpression	dirn1 . y = ( fixed ) ( plp -> vector . y * scale )		1298794	0		=			
ANR	1299317	MemberAccess	dirn1 . y		1298794	0					
ANR	1299318	Identifier	dirn1		1298794	0					
ANR	1299319	Identifier	y		1298794	1					
ANR	1299320	CastExpression	( fixed ) ( plp -> vector . y * scale )		1298794	1					
ANR	1299321	CastTarget	fixed		1298794	0					
ANR	1299322	MultiplicativeExpression	plp -> vector . y * scale		1298794	1		*			
ANR	1299323	MemberAccess	plp -> vector . y		1298794	0					
ANR	1299324	PtrMemberAccess	plp -> vector		1298794	0					
ANR	1299325	Identifier	plp		1298794	0					
ANR	1299326	Identifier	vector		1298794	1					
ANR	1299327	Identifier	y		1298794	1					
ANR	1299328	Identifier	scale		1298794	1					
ANR	1299329	ExpressionStatement	dirn2 . x = nplp -> o . cdelta . x	2177:8:91620:91646	1298794	4	True				
ANR	1299330	AssignmentExpression	dirn2 . x = nplp -> o . cdelta . x		1298794	0		=			
ANR	1299331	MemberAccess	dirn2 . x		1298794	0					
ANR	1299332	Identifier	dirn2		1298794	0					
ANR	1299333	Identifier	x		1298794	1					
ANR	1299334	MemberAccess	nplp -> o . cdelta . x		1298794	1					
ANR	1299335	MemberAccess	nplp -> o . cdelta		1298794	0					
ANR	1299336	PtrMemberAccess	nplp -> o		1298794	0					
ANR	1299337	Identifier	nplp		1298794	0					
ANR	1299338	Identifier	o		1298794	1					
ANR	1299339	Identifier	cdelta		1298794	1					
ANR	1299340	Identifier	x		1298794	1					
ANR	1299341	ExpressionStatement	dirn2 . y = nplp -> o . cdelta . y	2178:8:91656:91682	1298794	5	True				
ANR	1299342	AssignmentExpression	dirn2 . y = nplp -> o . cdelta . y		1298794	0		=			
ANR	1299343	MemberAccess	dirn2 . y		1298794	0					
ANR	1299344	Identifier	dirn2		1298794	0					
ANR	1299345	Identifier	y		1298794	1					
ANR	1299346	MemberAccess	nplp -> o . cdelta . y		1298794	1					
ANR	1299347	MemberAccess	nplp -> o . cdelta		1298794	0					
ANR	1299348	PtrMemberAccess	nplp -> o		1298794	0					
ANR	1299349	Identifier	nplp		1298794	0					
ANR	1299350	Identifier	o		1298794	1					
ANR	1299351	Identifier	cdelta		1298794	1					
ANR	1299352	Identifier	y		1298794	1					
ANR	1299353	IfStatement	if ( ( abs ( dirn2 . x ) + abs ( dirn2 . y ) < 16 ) && ( ( nplp -> vector . x != 0 ) || ( nplp -> vector . y != 0 ) ) )		1298794	6					
ANR	1299354	Condition	( abs ( dirn2 . x ) + abs ( dirn2 . y ) < 16 ) && ( ( nplp -> vector . x != 0 ) || ( nplp -> vector . y != 0 ) )	2182:12:91884:91981	1298794	0	True				
ANR	1299355	AndExpression	( abs ( dirn2 . x ) + abs ( dirn2 . y ) < 16 ) && ( ( nplp -> vector . x != 0 ) || ( nplp -> vector . y != 0 ) )		1298794	0		&&			
ANR	1299356	RelationalExpression	abs ( dirn2 . x ) + abs ( dirn2 . y ) < 16		1298794	0		<			
ANR	1299357	AdditiveExpression	abs ( dirn2 . x ) + abs ( dirn2 . y )		1298794	0		+			
ANR	1299358	CallExpression	abs ( dirn2 . x )		1298794	0					
ANR	1299359	Callee	abs		1298794	0					
ANR	1299360	Identifier	abs		1298794	0					
ANR	1299361	ArgumentList	dirn2 . x		1298794	1					
ANR	1299362	Argument	dirn2 . x		1298794	0					
ANR	1299363	MemberAccess	dirn2 . x		1298794	0					
ANR	1299364	Identifier	dirn2		1298794	0					
ANR	1299365	Identifier	x		1298794	1					
ANR	1299366	CallExpression	abs ( dirn2 . y )		1298794	1					
ANR	1299367	Callee	abs		1298794	0					
ANR	1299368	Identifier	abs		1298794	0					
ANR	1299369	ArgumentList	dirn2 . y		1298794	1					
ANR	1299370	Argument	dirn2 . y		1298794	0					
ANR	1299371	MemberAccess	dirn2 . y		1298794	0					
ANR	1299372	Identifier	dirn2		1298794	0					
ANR	1299373	Identifier	y		1298794	1					
ANR	1299374	PrimaryExpression	16		1298794	1					
ANR	1299375	OrExpression	( nplp -> vector . x != 0 ) || ( nplp -> vector . y != 0 )		1298794	1		||			
ANR	1299376	EqualityExpression	nplp -> vector . x != 0		1298794	0		!=			
ANR	1299377	MemberAccess	nplp -> vector . x		1298794	0					
ANR	1299378	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1299379	Identifier	nplp		1298794	0					
ANR	1299380	Identifier	vector		1298794	1					
ANR	1299381	Identifier	x		1298794	1					
ANR	1299382	PrimaryExpression	0		1298794	1					
ANR	1299383	EqualityExpression	nplp -> vector . y != 0		1298794	1		!=			
ANR	1299384	MemberAccess	nplp -> vector . y		1298794	0					
ANR	1299385	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1299386	Identifier	nplp		1298794	0					
ANR	1299387	Identifier	vector		1298794	1					
ANR	1299388	Identifier	y		1298794	1					
ANR	1299389	PrimaryExpression	0		1298794	1					
ANR	1299390	CompoundStatement		125:12:4792:4813	1298794	1					
ANR	1299391	IdentifierDeclStatement	float scale = 65536.0 ;	2185:12:92006:92027	1298794	0	True				
ANR	1299392	IdentifierDecl	scale = 65536.0		1298794	0					
ANR	1299393	IdentifierDeclType	float		1298794	0					
ANR	1299394	Identifier	scale		1298794	1					
ANR	1299395	AssignmentExpression	scale = 65536.0		1298794	2		=			
ANR	1299396	Identifier	scale		1298794	0					
ANR	1299397	PrimaryExpression	65536.0		1298794	1					
ANR	1299398	IfStatement	if ( abs ( nplp -> vector . x ) > abs ( nplp -> vector . y ) )		1298794	1					
ANR	1299399	Condition	abs ( nplp -> vector . x ) > abs ( nplp -> vector . y )	2186:16:92045:92085	1298794	0	True				
ANR	1299400	RelationalExpression	abs ( nplp -> vector . x ) > abs ( nplp -> vector . y )		1298794	0		>			
ANR	1299401	CallExpression	abs ( nplp -> vector . x )		1298794	0					
ANR	1299402	Callee	abs		1298794	0					
ANR	1299403	Identifier	abs		1298794	0					
ANR	1299404	ArgumentList	nplp -> vector . x		1298794	1					
ANR	1299405	Argument	nplp -> vector . x		1298794	0					
ANR	1299406	MemberAccess	nplp -> vector . x		1298794	0					
ANR	1299407	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1299408	Identifier	nplp		1298794	0					
ANR	1299409	Identifier	vector		1298794	1					
ANR	1299410	Identifier	x		1298794	1					
ANR	1299411	CallExpression	abs ( nplp -> vector . y )		1298794	1					
ANR	1299412	Callee	abs		1298794	0					
ANR	1299413	Identifier	abs		1298794	0					
ANR	1299414	ArgumentList	nplp -> vector . y		1298794	1					
ANR	1299415	Argument	nplp -> vector . y		1298794	0					
ANR	1299416	MemberAccess	nplp -> vector . y		1298794	0					
ANR	1299417	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1299418	Identifier	nplp		1298794	0					
ANR	1299419	Identifier	vector		1298794	1					
ANR	1299420	Identifier	y		1298794	1					
ANR	1299421	ExpressionStatement	scale /= abs ( nplp -> vector . x )	2187:16:92104:92132	1298794	1	True				
ANR	1299422	AssignmentExpression	scale /= abs ( nplp -> vector . x )		1298794	0		/=			
ANR	1299423	Identifier	scale		1298794	0					
ANR	1299424	CallExpression	abs ( nplp -> vector . x )		1298794	1					
ANR	1299425	Callee	abs		1298794	0					
ANR	1299426	Identifier	abs		1298794	0					
ANR	1299427	ArgumentList	nplp -> vector . x		1298794	1					
ANR	1299428	Argument	nplp -> vector . x		1298794	0					
ANR	1299429	MemberAccess	nplp -> vector . x		1298794	0					
ANR	1299430	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1299431	Identifier	nplp		1298794	0					
ANR	1299432	Identifier	vector		1298794	1					
ANR	1299433	Identifier	x		1298794	1					
ANR	1299434	ElseStatement	else		1298794	0					
ANR	1299435	ExpressionStatement	scale /= abs ( nplp -> vector . y )	2189:16:92167:92195	1298794	0	True				
ANR	1299436	AssignmentExpression	scale /= abs ( nplp -> vector . y )		1298794	0		/=			
ANR	1299437	Identifier	scale		1298794	0					
ANR	1299438	CallExpression	abs ( nplp -> vector . y )		1298794	1					
ANR	1299439	Callee	abs		1298794	0					
ANR	1299440	Identifier	abs		1298794	0					
ANR	1299441	ArgumentList	nplp -> vector . y		1298794	1					
ANR	1299442	Argument	nplp -> vector . y		1298794	0					
ANR	1299443	MemberAccess	nplp -> vector . y		1298794	0					
ANR	1299444	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1299445	Identifier	nplp		1298794	0					
ANR	1299446	Identifier	vector		1298794	1					
ANR	1299447	Identifier	y		1298794	1					
ANR	1299448	ExpressionStatement	dirn2 . x = ( fixed ) ( - nplp -> vector . x * scale )	2190:12:92209:92249	1298794	2	True				
ANR	1299449	AssignmentExpression	dirn2 . x = ( fixed ) ( - nplp -> vector . x * scale )		1298794	0		=			
ANR	1299450	MemberAccess	dirn2 . x		1298794	0					
ANR	1299451	Identifier	dirn2		1298794	0					
ANR	1299452	Identifier	x		1298794	1					
ANR	1299453	CastExpression	( fixed ) ( - nplp -> vector . x * scale )		1298794	1					
ANR	1299454	CastTarget	fixed		1298794	0					
ANR	1299455	MultiplicativeExpression	- nplp -> vector . x * scale		1298794	1		*			
ANR	1299456	UnaryOperationExpression	- nplp -> vector . x		1298794	0					
ANR	1299457	UnaryOperator	-		1298794	0					
ANR	1299458	MemberAccess	nplp -> vector . x		1298794	1					
ANR	1299459	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1299460	Identifier	nplp		1298794	0					
ANR	1299461	Identifier	vector		1298794	1					
ANR	1299462	Identifier	x		1298794	1					
ANR	1299463	Identifier	scale		1298794	1					
ANR	1299464	ExpressionStatement	dirn2 . y = ( fixed ) ( - nplp -> vector . y * scale )	2191:12:92263:92303	1298794	3	True				
ANR	1299465	AssignmentExpression	dirn2 . y = ( fixed ) ( - nplp -> vector . y * scale )		1298794	0		=			
ANR	1299466	MemberAccess	dirn2 . y		1298794	0					
ANR	1299467	Identifier	dirn2		1298794	0					
ANR	1299468	Identifier	y		1298794	1					
ANR	1299469	CastExpression	( fixed ) ( - nplp -> vector . y * scale )		1298794	1					
ANR	1299470	CastTarget	fixed		1298794	0					
ANR	1299471	MultiplicativeExpression	- nplp -> vector . y * scale		1298794	1		*			
ANR	1299472	UnaryOperationExpression	- nplp -> vector . y		1298794	0					
ANR	1299473	UnaryOperator	-		1298794	0					
ANR	1299474	MemberAccess	nplp -> vector . y		1298794	1					
ANR	1299475	PtrMemberAccess	nplp -> vector		1298794	0					
ANR	1299476	Identifier	nplp		1298794	0					
ANR	1299477	Identifier	vector		1298794	1					
ANR	1299478	Identifier	y		1298794	1					
ANR	1299479	Identifier	scale		1298794	1					
ANR	1299480	ExpressionStatement	"if_debug0 ( 'O' , ""        ... passes.\\n"" )"	2193:8:92323:92362	1298794	7	True				
ANR	1299481	CallExpression	"if_debug0 ( 'O' , ""        ... passes.\\n"" )"		1298794	0					
ANR	1299482	Callee	if_debug0		1298794	0					
ANR	1299483	Identifier	if_debug0		1298794	0					
ANR	1299484	ArgumentList	'O'		1298794	1					
ANR	1299485	Argument	'O'		1298794	0					
ANR	1299486	PrimaryExpression	'O'		1298794	0					
ANR	1299487	Argument	"""        ... passes.\\n"""		1298794	1					
ANR	1299488	PrimaryExpression	"""        ... passes.\\n"""		1298794	0					
ANR	1299489	IfStatement	"if ( line_intersect ( outp , & dirn1 , np , & dirn2 , mpt ) == 0 )"		1298794	8					
ANR	1299490	Condition	"line_intersect ( outp , & dirn1 , np , & dirn2 , mpt ) == 0"	2195:12:92443:92492	1298794	0	True				
ANR	1299491	EqualityExpression	"line_intersect ( outp , & dirn1 , np , & dirn2 , mpt ) == 0"		1298794	0		==			
ANR	1299492	CallExpression	"line_intersect ( outp , & dirn1 , np , & dirn2 , mpt )"		1298794	0					
ANR	1299493	Callee	line_intersect		1298794	0					
ANR	1299494	Identifier	line_intersect		1298794	0					
ANR	1299495	ArgumentList	outp		1298794	1					
ANR	1299496	Argument	outp		1298794	0					
ANR	1299497	Identifier	outp		1298794	0					
ANR	1299498	Argument	& dirn1		1298794	1					
ANR	1299499	UnaryOperationExpression	& dirn1		1298794	0					
ANR	1299500	UnaryOperator	&		1298794	0					
ANR	1299501	Identifier	dirn1		1298794	1					
ANR	1299502	Argument	np		1298794	2					
ANR	1299503	Identifier	np		1298794	0					
ANR	1299504	Argument	& dirn2		1298794	3					
ANR	1299505	UnaryOperationExpression	& dirn2		1298794	0					
ANR	1299506	UnaryOperator	&		1298794	0					
ANR	1299507	Identifier	dirn2		1298794	1					
ANR	1299508	Argument	mpt		1298794	4					
ANR	1299509	Identifier	mpt		1298794	0					
ANR	1299510	PrimaryExpression	0		1298794	1					
ANR	1299511	ReturnStatement	return 0 ;	2196:12:92507:92515	1298794	1	True				
ANR	1299512	PrimaryExpression	0		1298794	0					
ANR	1299513	ReturnStatement	return 1 ;	2198:4:92527:92535	1298794	13	True				
ANR	1299514	PrimaryExpression	1		1298794	0					
ANR	1299515	ReturnType	static int		1298794	1					
ANR	1299516	Identifier	check_miter		1298794	2					
ANR	1299517	ParameterList	"const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , const gs_matrix * pmat , p_ptr outp , p_ptr np , p_ptr mpt , bool ccw0"		1298794	3					
ANR	1299518	Parameter	const gx_line_params * pgs_lp	2058:12:87065:87093	1298794	0	True				
ANR	1299519	ParameterType	const gx_line_params *		1298794	0					
ANR	1299520	Identifier	pgs_lp		1298794	1					
ANR	1299521	Parameter	pl_ptr plp	2058:43:87096:87105	1298794	1	True				
ANR	1299522	ParameterType	pl_ptr		1298794	0					
ANR	1299523	Identifier	plp		1298794	1					
ANR	1299524	Parameter	pl_ptr nplp	2058:55:87108:87118	1298794	2	True				
ANR	1299525	ParameterType	pl_ptr		1298794	0					
ANR	1299526	Identifier	nplp		1298794	1					
ANR	1299527	Parameter	const gs_matrix * pmat	2059:12:87133:87154	1298794	3	True				
ANR	1299528	ParameterType	const gs_matrix *		1298794	0					
ANR	1299529	Identifier	pmat		1298794	1					
ANR	1299530	Parameter	p_ptr outp	2059:36:87157:87166	1298794	4	True				
ANR	1299531	ParameterType	p_ptr		1298794	0					
ANR	1299532	Identifier	outp		1298794	1					
ANR	1299533	Parameter	p_ptr np	2059:48:87169:87176	1298794	5	True				
ANR	1299534	ParameterType	p_ptr		1298794	0					
ANR	1299535	Identifier	np		1298794	1					
ANR	1299536	Parameter	p_ptr mpt	2059:58:87179:87187	1298794	6	True				
ANR	1299537	ParameterType	p_ptr		1298794	0					
ANR	1299538	Identifier	mpt		1298794	1					
ANR	1299539	Parameter	bool ccw0	2060:12:87202:87210	1298794	7	True				
ANR	1299540	ParameterType	bool		1298794	0					
ANR	1299541	Identifier	ccw0		1298794	1					
ANR	1299542	CFGEntryNode	ENTRY		1298794		True				
ANR	1299543	CFGExitNode	EXIT		1298794		True				
ANR	1299544	Symbol	dif		1298794						
ANR	1299545	Symbol	pt		1298794						
ANR	1299546	Symbol	nplp -> vector		1298794						
ANR	1299547	Symbol	num		1298794						
ANR	1299548	Symbol	line_intersect		1298794						
ANR	1299549	Symbol	M_PI		1298794						
ANR	1299550	Symbol	plp -> vector		1298794						
ANR	1299551	Symbol	dirn2 . x		1298794						
ANR	1299552	Symbol	gs_debug_c		1298794						
ANR	1299553	Symbol	dirn2 . y		1298794						
ANR	1299554	Symbol	denom		1298794						
ANR	1299555	Symbol	* plp		1298794						
ANR	1299556	Symbol	atan2		1298794						
ANR	1299557	Symbol	plp -> e . cdelta . x		1298794						
ANR	1299558	Symbol	dirn1 . y		1298794						
ANR	1299559	Symbol	dirn1 . x		1298794						
ANR	1299560	Symbol	plp -> e . cdelta . y		1298794						
ANR	1299561	Symbol	check		1298794						
ANR	1299562	Symbol	& dirn1		1298794						
ANR	1299563	Symbol	& dirn2		1298794						
ANR	1299564	Symbol	& pt		1298794						
ANR	1299565	Symbol	mpt		1298794						
ANR	1299566	Symbol	pgs_lp		1298794						
ANR	1299567	Symbol	np		1298794						
ANR	1299568	Symbol	gs_error_unregistered		1298794						
ANR	1299569	Symbol	code		1298794						
ANR	1299570	Symbol	pmat		1298794						
ANR	1299571	Symbol	* pgs_lp		1298794						
ANR	1299572	Symbol	nplp -> o . cdelta		1298794						
ANR	1299573	Symbol	scale		1298794						
ANR	1299574	Symbol	outp		1298794						
ANR	1299575	Symbol	ccw0		1298794						
ANR	1299576	Symbol	nplp -> o . cdelta . x		1298794						
ANR	1299577	Symbol	nplp -> o		1298794						
ANR	1299578	Symbol	u1		1298794						
ANR	1299579	Symbol	u2		1298794						
ANR	1299580	Symbol	* nplp		1298794						
ANR	1299581	Symbol	nplp -> o . cdelta . y		1298794						
ANR	1299582	Symbol	dirn1		1298794						
ANR	1299583	Symbol	dirn2		1298794						
ANR	1299584	Symbol	a1		1298794						
ANR	1299585	Symbol	pgs_lp -> miter_check		1298794						
ANR	1299586	Symbol	a2		1298794						
ANR	1299587	Symbol	abs		1298794						
ANR	1299588	Symbol	plp		1298794						
ANR	1299589	Symbol	nplp		1298794						
ANR	1299590	Symbol	nplp -> vector . x		1298794						
ANR	1299591	Symbol	nplp -> vector . y		1298794						
ANR	1299592	Symbol	plp -> e . cdelta		1298794						
ANR	1299593	Symbol	plp -> e		1298794						
ANR	1299594	Symbol	plp -> vector . y		1298794						
ANR	1299595	Symbol	pt . x		1298794						
ANR	1299596	Symbol	v1		1298794						
ANR	1299597	Symbol	plp -> vector . x		1298794						
ANR	1299598	Symbol	pt . y		1298794						
ANR	1299599	Symbol	v2		1298794						
ANR	1299600	Symbol	gs_distance_transform_inverse		1298794						
ANR	1299601	Function	line_join_points	2205:0:92736:96240							
ANR	1299602	FunctionDef	"line_join_points (const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , gs_fixed_point * join_points , const gs_matrix * pmat , gs_line_join join , bool reflected)"		1299601	0					
ANR	1299603	CompoundStatement		2209:0:92943:96240	1299601	0					
ANR	1299604	Statement	define	2210:1:92946:92951	1299601	0	True				
ANR	1299605	Statement	jp1	2210:8:92953:92955	1299601	1	True				
ANR	1299606	Statement	join_points	2210:12:92957:92967	1299601	2	True				
ANR	1299607	Statement	[	2210:23:92968:92968	1299601	3	True				
ANR	1299608	Statement	0	2210:24:92969:92969	1299601	4	True				
ANR	1299609	Statement	]	2210:25:92970:92970	1299601	5	True				
ANR	1299610	Statement	define	2211:1:92973:92978	1299601	6	True				
ANR	1299611	Statement	np1	2211:8:92980:92982	1299601	7	True				
ANR	1299612	Statement	join_points	2211:12:92984:92994	1299601	8	True				
ANR	1299613	Statement	[	2211:23:92995:92995	1299601	9	True				
ANR	1299614	Statement	1	2211:24:92996:92996	1299601	10	True				
ANR	1299615	Statement	]	2211:25:92997:92997	1299601	11	True				
ANR	1299616	Statement	define	2212:1:93000:93005	1299601	12	True				
ANR	1299617	Statement	np2	2212:8:93007:93009	1299601	13	True				
ANR	1299618	Statement	join_points	2212:12:93011:93021	1299601	14	True				
ANR	1299619	Statement	[	2212:23:93022:93022	1299601	15	True				
ANR	1299620	Statement	2	2212:24:93023:93023	1299601	16	True				
ANR	1299621	Statement	]	2212:25:93024:93024	1299601	17	True				
ANR	1299622	Statement	define	2213:1:93027:93032	1299601	18	True				
ANR	1299623	Statement	jp2	2213:8:93034:93036	1299601	19	True				
ANR	1299624	Statement	join_points	2213:12:93038:93048	1299601	20	True				
ANR	1299625	Statement	[	2213:23:93049:93049	1299601	21	True				
ANR	1299626	Statement	3	2213:24:93050:93050	1299601	22	True				
ANR	1299627	Statement	]	2213:25:93051:93051	1299601	23	True				
ANR	1299628	Statement	define	2214:1:93054:93059	1299601	24	True				
ANR	1299629	Statement	jpx	2214:8:93061:93063	1299601	25	True				
ANR	1299630	Statement	join_points	2214:12:93065:93075	1299601	26	True				
ANR	1299631	Statement	[	2214:23:93076:93076	1299601	27	True				
ANR	1299632	Statement	4	2214:24:93077:93077	1299601	28	True				
ANR	1299633	Statement	]	2214:25:93078:93078	1299601	29	True				
ANR	1299634	IdentifierDeclStatement	bool ccw = ( double ) ( plp -> width . x ) * ( nplp -> width . y ) > ( double ) ( nplp -> width . x ) * ( plp -> width . y ) ;	2242:4:94300:94446	1299601	30	True				
ANR	1299635	IdentifierDecl	ccw = ( double ) ( plp -> width . x ) * ( nplp -> width . y ) > ( double ) ( nplp -> width . x ) * ( plp -> width . y )		1299601	0					
ANR	1299636	IdentifierDeclType	bool		1299601	0					
ANR	1299637	Identifier	ccw		1299601	1					
ANR	1299638	AssignmentExpression	ccw = ( double ) ( plp -> width . x ) * ( nplp -> width . y ) > ( double ) ( nplp -> width . x ) * ( plp -> width . y )		1299601	2		=			
ANR	1299639	Identifier	ccw		1299601	0					
ANR	1299640	RelationalExpression	( double ) ( plp -> width . x ) * ( nplp -> width . y ) > ( double ) ( nplp -> width . x ) * ( plp -> width . y )		1299601	1		>			
ANR	1299641	MultiplicativeExpression	( double ) ( plp -> width . x ) * ( nplp -> width . y )		1299601	0		*			
ANR	1299642	CastExpression	( double ) ( plp -> width . x )		1299601	0					
ANR	1299643	CastTarget	double		1299601	0					
ANR	1299644	MemberAccess	plp -> width . x		1299601	1					
ANR	1299645	PtrMemberAccess	plp -> width		1299601	0					
ANR	1299646	Identifier	plp		1299601	0					
ANR	1299647	Identifier	width		1299601	1					
ANR	1299648	Identifier	x		1299601	1					
ANR	1299649	MemberAccess	nplp -> width . y		1299601	1					
ANR	1299650	PtrMemberAccess	nplp -> width		1299601	0					
ANR	1299651	Identifier	nplp		1299601	0					
ANR	1299652	Identifier	width		1299601	1					
ANR	1299653	Identifier	y		1299601	1					
ANR	1299654	MultiplicativeExpression	( double ) ( nplp -> width . x ) * ( plp -> width . y )		1299601	1		*			
ANR	1299655	CastExpression	( double ) ( nplp -> width . x )		1299601	0					
ANR	1299656	CastTarget	double		1299601	0					
ANR	1299657	MemberAccess	nplp -> width . x		1299601	1					
ANR	1299658	PtrMemberAccess	nplp -> width		1299601	0					
ANR	1299659	Identifier	nplp		1299601	0					
ANR	1299660	Identifier	width		1299601	1					
ANR	1299661	Identifier	x		1299601	1					
ANR	1299662	MemberAccess	plp -> width . y		1299601	1					
ANR	1299663	PtrMemberAccess	plp -> width		1299601	0					
ANR	1299664	Identifier	plp		1299601	0					
ANR	1299665	Identifier	width		1299601	1					
ANR	1299666	Identifier	y		1299601	1					
ANR	1299667	IdentifierDeclStatement	bool ccw0 = ccw ;	2245:4:94452:94467	1299601	31	True				
ANR	1299668	IdentifierDecl	ccw0 = ccw		1299601	0					
ANR	1299669	IdentifierDeclType	bool		1299601	0					
ANR	1299670	Identifier	ccw0		1299601	1					
ANR	1299671	AssignmentExpression	ccw0 = ccw		1299601	2		=			
ANR	1299672	Identifier	ccw		1299601	0					
ANR	1299673	Identifier	ccw		1299601	1					
ANR	1299674	IdentifierDeclStatement	"p_ptr outp , np ;"	2246:4:94473:94487	1299601	32	True				
ANR	1299675	IdentifierDecl	outp		1299601	0					
ANR	1299676	IdentifierDeclType	p_ptr		1299601	0					
ANR	1299677	Identifier	outp		1299601	1					
ANR	1299678	IdentifierDecl	np		1299601	1					
ANR	1299679	IdentifierDeclType	p_ptr		1299601	0					
ANR	1299680	Identifier	np		1299601	1					
ANR	1299681	IdentifierDeclStatement	int code ;	2247:4:94493:94503	1299601	33	True				
ANR	1299682	IdentifierDecl	code		1299601	0					
ANR	1299683	IdentifierDeclType	int		1299601	0					
ANR	1299684	Identifier	code		1299601	1					
ANR	1299685	ExpressionStatement	ccw ^= reflected	2249:4:94510:94526	1299601	34	True				
ANR	1299686	AssignmentExpression	ccw ^= reflected		1299601	0		^=			
ANR	1299687	Identifier	ccw		1299601	0					
ANR	1299688	Identifier	reflected		1299601	1					
ANR	1299689	ExpressionStatement	"ASSIGN_POINT ( & jp1 , plp -> e . co )"	2252:4:94572:94601	1299601	35	True				
ANR	1299690	CallExpression	"ASSIGN_POINT ( & jp1 , plp -> e . co )"		1299601	0					
ANR	1299691	Callee	ASSIGN_POINT		1299601	0					
ANR	1299692	Identifier	ASSIGN_POINT		1299601	0					
ANR	1299693	ArgumentList	& jp1		1299601	1					
ANR	1299694	Argument	& jp1		1299601	0					
ANR	1299695	UnaryOperationExpression	& jp1		1299601	0					
ANR	1299696	UnaryOperator	&		1299601	0					
ANR	1299697	Identifier	jp1		1299601	1					
ANR	1299698	Argument	plp -> e . co		1299601	1					
ANR	1299699	MemberAccess	plp -> e . co		1299601	0					
ANR	1299700	PtrMemberAccess	plp -> e		1299601	0					
ANR	1299701	Identifier	plp		1299601	0					
ANR	1299702	Identifier	e		1299601	1					
ANR	1299703	Identifier	co		1299601	1					
ANR	1299704	ExpressionStatement	"ASSIGN_POINT ( & jp2 , plp -> e . ce )"	2253:4:94607:94636	1299601	36	True				
ANR	1299705	CallExpression	"ASSIGN_POINT ( & jp2 , plp -> e . ce )"		1299601	0					
ANR	1299706	Callee	ASSIGN_POINT		1299601	0					
ANR	1299707	Identifier	ASSIGN_POINT		1299601	0					
ANR	1299708	ArgumentList	& jp2		1299601	1					
ANR	1299709	Argument	& jp2		1299601	0					
ANR	1299710	UnaryOperationExpression	& jp2		1299601	0					
ANR	1299711	UnaryOperator	&		1299601	0					
ANR	1299712	Identifier	jp2		1299601	1					
ANR	1299713	Argument	plp -> e . ce		1299601	1					
ANR	1299714	MemberAccess	plp -> e . ce		1299601	0					
ANR	1299715	PtrMemberAccess	plp -> e		1299601	0					
ANR	1299716	Identifier	plp		1299601	0					
ANR	1299717	Identifier	e		1299601	1					
ANR	1299718	Identifier	ce		1299601	1					
ANR	1299719	IfStatement	if ( ! ccw )		1299601	37					
ANR	1299720	Condition	! ccw	2260:8:94811:94814	1299601	0	True				
ANR	1299721	UnaryOperationExpression	! ccw		1299601	0					
ANR	1299722	UnaryOperator	!		1299601	0					
ANR	1299723	Identifier	ccw		1299601	1					
ANR	1299724	CompoundStatement		52:14:1873:1873	1299601	1					
ANR	1299725	ExpressionStatement	outp = & jp2	2261:8:94827:94838	1299601	0	True				
ANR	1299726	AssignmentExpression	outp = & jp2		1299601	0		=			
ANR	1299727	Identifier	outp		1299601	0					
ANR	1299728	UnaryOperationExpression	& jp2		1299601	1					
ANR	1299729	UnaryOperator	&		1299601	0					
ANR	1299730	Identifier	jp2		1299601	1					
ANR	1299731	ExpressionStatement	"ASSIGN_POINT ( & np2 , nplp -> o . co )"	2262:8:94848:94878	1299601	1	True				
ANR	1299732	CallExpression	"ASSIGN_POINT ( & np2 , nplp -> o . co )"		1299601	0					
ANR	1299733	Callee	ASSIGN_POINT		1299601	0					
ANR	1299734	Identifier	ASSIGN_POINT		1299601	0					
ANR	1299735	ArgumentList	& np2		1299601	1					
ANR	1299736	Argument	& np2		1299601	0					
ANR	1299737	UnaryOperationExpression	& np2		1299601	0					
ANR	1299738	UnaryOperator	&		1299601	0					
ANR	1299739	Identifier	np2		1299601	1					
ANR	1299740	Argument	nplp -> o . co		1299601	1					
ANR	1299741	MemberAccess	nplp -> o . co		1299601	0					
ANR	1299742	PtrMemberAccess	nplp -> o		1299601	0					
ANR	1299743	Identifier	nplp		1299601	0					
ANR	1299744	Identifier	o		1299601	1					
ANR	1299745	Identifier	co		1299601	1					
ANR	1299746	ExpressionStatement	"ASSIGN_POINT ( & np1 , nplp -> o . p )"	2263:8:94888:94917	1299601	2	True				
ANR	1299747	CallExpression	"ASSIGN_POINT ( & np1 , nplp -> o . p )"		1299601	0					
ANR	1299748	Callee	ASSIGN_POINT		1299601	0					
ANR	1299749	Identifier	ASSIGN_POINT		1299601	0					
ANR	1299750	ArgumentList	& np1		1299601	1					
ANR	1299751	Argument	& np1		1299601	0					
ANR	1299752	UnaryOperationExpression	& np1		1299601	0					
ANR	1299753	UnaryOperator	&		1299601	0					
ANR	1299754	Identifier	np1		1299601	1					
ANR	1299755	Argument	nplp -> o . p		1299601	1					
ANR	1299756	MemberAccess	nplp -> o . p		1299601	0					
ANR	1299757	PtrMemberAccess	nplp -> o		1299601	0					
ANR	1299758	Identifier	nplp		1299601	0					
ANR	1299759	Identifier	o		1299601	1					
ANR	1299760	Identifier	p		1299601	1					
ANR	1299761	ExpressionStatement	np = & np2	2264:8:94927:94936	1299601	3	True				
ANR	1299762	AssignmentExpression	np = & np2		1299601	0		=			
ANR	1299763	Identifier	np		1299601	0					
ANR	1299764	UnaryOperationExpression	& np2		1299601	1					
ANR	1299765	UnaryOperator	&		1299601	0					
ANR	1299766	Identifier	np2		1299601	1					
ANR	1299767	ElseStatement	else		1299601	0					
ANR	1299768	CompoundStatement		57:11:2005:2005	1299601	0					
ANR	1299769	ExpressionStatement	outp = & jp1	2266:8:94959:94970	1299601	0	True				
ANR	1299770	AssignmentExpression	outp = & jp1		1299601	0		=			
ANR	1299771	Identifier	outp		1299601	0					
ANR	1299772	UnaryOperationExpression	& jp1		1299601	1					
ANR	1299773	UnaryOperator	&		1299601	0					
ANR	1299774	Identifier	jp1		1299601	1					
ANR	1299775	ExpressionStatement	"ASSIGN_POINT ( & np1 , nplp -> o . ce )"	2267:8:94980:95010	1299601	1	True				
ANR	1299776	CallExpression	"ASSIGN_POINT ( & np1 , nplp -> o . ce )"		1299601	0					
ANR	1299777	Callee	ASSIGN_POINT		1299601	0					
ANR	1299778	Identifier	ASSIGN_POINT		1299601	0					
ANR	1299779	ArgumentList	& np1		1299601	1					
ANR	1299780	Argument	& np1		1299601	0					
ANR	1299781	UnaryOperationExpression	& np1		1299601	0					
ANR	1299782	UnaryOperator	&		1299601	0					
ANR	1299783	Identifier	np1		1299601	1					
ANR	1299784	Argument	nplp -> o . ce		1299601	1					
ANR	1299785	MemberAccess	nplp -> o . ce		1299601	0					
ANR	1299786	PtrMemberAccess	nplp -> o		1299601	0					
ANR	1299787	Identifier	nplp		1299601	0					
ANR	1299788	Identifier	o		1299601	1					
ANR	1299789	Identifier	ce		1299601	1					
ANR	1299790	ExpressionStatement	"ASSIGN_POINT ( & np2 , nplp -> o . p )"	2268:8:95020:95049	1299601	2	True				
ANR	1299791	CallExpression	"ASSIGN_POINT ( & np2 , nplp -> o . p )"		1299601	0					
ANR	1299792	Callee	ASSIGN_POINT		1299601	0					
ANR	1299793	Identifier	ASSIGN_POINT		1299601	0					
ANR	1299794	ArgumentList	& np2		1299601	1					
ANR	1299795	Argument	& np2		1299601	0					
ANR	1299796	UnaryOperationExpression	& np2		1299601	0					
ANR	1299797	UnaryOperator	&		1299601	0					
ANR	1299798	Identifier	np2		1299601	1					
ANR	1299799	Argument	nplp -> o . p		1299601	1					
ANR	1299800	MemberAccess	nplp -> o . p		1299601	0					
ANR	1299801	PtrMemberAccess	nplp -> o		1299601	0					
ANR	1299802	Identifier	nplp		1299601	0					
ANR	1299803	Identifier	o		1299601	1					
ANR	1299804	Identifier	p		1299601	1					
ANR	1299805	ExpressionStatement	np = & np1	2269:8:95059:95068	1299601	3	True				
ANR	1299806	AssignmentExpression	np = & np1		1299601	0		=			
ANR	1299807	Identifier	np		1299601	0					
ANR	1299808	UnaryOperationExpression	& np1		1299601	1					
ANR	1299809	UnaryOperator	&		1299601	0					
ANR	1299810	Identifier	np1		1299601	1					
ANR	1299811	ExpressionStatement	"if_debug1 ( 'O' , ""[O]use %s\\n"" , ( ccw ? ""co (ccw)"" : ""ce (cw)"" ) )"	2271:4:95080:95141	1299601	38	True				
ANR	1299812	CallExpression	"if_debug1 ( 'O' , ""[O]use %s\\n"" , ( ccw ? ""co (ccw)"" : ""ce (cw)"" ) )"		1299601	0					
ANR	1299813	Callee	if_debug1		1299601	0					
ANR	1299814	Identifier	if_debug1		1299601	0					
ANR	1299815	ArgumentList	'O'		1299601	1					
ANR	1299816	Argument	'O'		1299601	0					
ANR	1299817	PrimaryExpression	'O'		1299601	0					
ANR	1299818	Argument	"""[O]use %s\\n"""		1299601	1					
ANR	1299819	PrimaryExpression	"""[O]use %s\\n"""		1299601	0					
ANR	1299820	Argument	"ccw ? ""co (ccw)"" : ""ce (cw)"""		1299601	2					
ANR	1299821	ConditionalExpression	"ccw ? ""co (ccw)"" : ""ce (cw)"""		1299601	0					
ANR	1299822	Condition	ccw		1299601	0					
ANR	1299823	Identifier	ccw		1299601	0					
ANR	1299824	PrimaryExpression	"""co (ccw)"""		1299601	1					
ANR	1299825	PrimaryExpression	"""ce (cw)"""		1299601	2					
ANR	1299826	IfStatement	if ( join == gs_join_triangle )		1299601	39					
ANR	1299827	Condition	join == gs_join_triangle	2274:8:95191:95214	1299601	0	True				
ANR	1299828	EqualityExpression	join == gs_join_triangle		1299601	0		==			
ANR	1299829	Identifier	join		1299601	0					
ANR	1299830	Identifier	gs_join_triangle		1299601	1					
ANR	1299831	CompoundStatement		68:8:2334:2375	1299601	1					
ANR	1299832	IdentifierDeclStatement	fixed tpx = outp -> x - nplp -> o . p . x + np -> x ;	2275:8:95227:95268	1299601	0	True				
ANR	1299833	IdentifierDecl	tpx = outp -> x - nplp -> o . p . x + np -> x		1299601	0					
ANR	1299834	IdentifierDeclType	fixed		1299601	0					
ANR	1299835	Identifier	tpx		1299601	1					
ANR	1299836	AssignmentExpression	tpx = outp -> x - nplp -> o . p . x + np -> x		1299601	2		=			
ANR	1299837	Identifier	tpx		1299601	0					
ANR	1299838	AdditiveExpression	outp -> x - nplp -> o . p . x + np -> x		1299601	1		-			
ANR	1299839	PtrMemberAccess	outp -> x		1299601	0					
ANR	1299840	Identifier	outp		1299601	0					
ANR	1299841	Identifier	x		1299601	1					
ANR	1299842	AdditiveExpression	nplp -> o . p . x + np -> x		1299601	1		+			
ANR	1299843	MemberAccess	nplp -> o . p . x		1299601	0					
ANR	1299844	MemberAccess	nplp -> o . p		1299601	0					
ANR	1299845	PtrMemberAccess	nplp -> o		1299601	0					
ANR	1299846	Identifier	nplp		1299601	0					
ANR	1299847	Identifier	o		1299601	1					
ANR	1299848	Identifier	p		1299601	1					
ANR	1299849	Identifier	x		1299601	1					
ANR	1299850	PtrMemberAccess	np -> x		1299601	1					
ANR	1299851	Identifier	np		1299601	0					
ANR	1299852	Identifier	x		1299601	1					
ANR	1299853	IdentifierDeclStatement	fixed tpy = outp -> y - nplp -> o . p . y + np -> y ;	2276:8:95278:95319	1299601	1	True				
ANR	1299854	IdentifierDecl	tpy = outp -> y - nplp -> o . p . y + np -> y		1299601	0					
ANR	1299855	IdentifierDeclType	fixed		1299601	0					
ANR	1299856	Identifier	tpy		1299601	1					
ANR	1299857	AssignmentExpression	tpy = outp -> y - nplp -> o . p . y + np -> y		1299601	2		=			
ANR	1299858	Identifier	tpy		1299601	0					
ANR	1299859	AdditiveExpression	outp -> y - nplp -> o . p . y + np -> y		1299601	1		-			
ANR	1299860	PtrMemberAccess	outp -> y		1299601	0					
ANR	1299861	Identifier	outp		1299601	0					
ANR	1299862	Identifier	y		1299601	1					
ANR	1299863	AdditiveExpression	nplp -> o . p . y + np -> y		1299601	1		+			
ANR	1299864	MemberAccess	nplp -> o . p . y		1299601	0					
ANR	1299865	MemberAccess	nplp -> o . p		1299601	0					
ANR	1299866	PtrMemberAccess	nplp -> o		1299601	0					
ANR	1299867	Identifier	nplp		1299601	0					
ANR	1299868	Identifier	o		1299601	1					
ANR	1299869	Identifier	p		1299601	1					
ANR	1299870	Identifier	y		1299601	1					
ANR	1299871	PtrMemberAccess	np -> y		1299601	1					
ANR	1299872	Identifier	np		1299601	0					
ANR	1299873	Identifier	y		1299601	1					
ANR	1299874	ExpressionStatement	"ASSIGN_POINT ( & jpx , jp2 )"	2278:8:95330:95353	1299601	2	True				
ANR	1299875	CallExpression	"ASSIGN_POINT ( & jpx , jp2 )"		1299601	0					
ANR	1299876	Callee	ASSIGN_POINT		1299601	0					
ANR	1299877	Identifier	ASSIGN_POINT		1299601	0					
ANR	1299878	ArgumentList	& jpx		1299601	1					
ANR	1299879	Argument	& jpx		1299601	0					
ANR	1299880	UnaryOperationExpression	& jpx		1299601	0					
ANR	1299881	UnaryOperator	&		1299601	0					
ANR	1299882	Identifier	jpx		1299601	1					
ANR	1299883	Argument	jp2		1299601	1					
ANR	1299884	Identifier	jp2		1299601	0					
ANR	1299885	IfStatement	if ( ! ccw )		1299601	3					
ANR	1299886	Condition	! ccw	2279:12:95367:95370	1299601	0	True				
ANR	1299887	UnaryOperationExpression	! ccw		1299601	0					
ANR	1299888	UnaryOperator	!		1299601	0					
ANR	1299889	Identifier	ccw		1299601	1					
ANR	1299890	CompoundStatement		71:18:2429:2429	1299601	1					
ANR	1299891	ExpressionStatement	"jp2 . x = tpx , jp2 . y = tpy"	2281:12:95436:95460	1299601	0	True				
ANR	1299892	Expression	"jp2 . x = tpx , jp2 . y = tpy"		1299601	0					
ANR	1299893	AssignmentExpression	jp2 . x = tpx		1299601	0		=			
ANR	1299894	MemberAccess	jp2 . x		1299601	0					
ANR	1299895	Identifier	jp2		1299601	0					
ANR	1299896	Identifier	x		1299601	1					
ANR	1299897	Identifier	tpx		1299601	1					
ANR	1299898	AssignmentExpression	jp2 . y = tpy		1299601	1		=			
ANR	1299899	MemberAccess	jp2 . y		1299601	0					
ANR	1299900	Identifier	jp2		1299601	0					
ANR	1299901	Identifier	y		1299601	1					
ANR	1299902	Identifier	tpy		1299601	1					
ANR	1299903	ElseStatement	else		1299601	0					
ANR	1299904	CompoundStatement		74:15:2533:2533	1299601	0					
ANR	1299905	ExpressionStatement	"ASSIGN_POINT ( & jp2 , np2 )"	2284:12:95540:95563	1299601	0	True				
ANR	1299906	CallExpression	"ASSIGN_POINT ( & jp2 , np2 )"		1299601	0					
ANR	1299907	Callee	ASSIGN_POINT		1299601	0					
ANR	1299908	Identifier	ASSIGN_POINT		1299601	0					
ANR	1299909	ArgumentList	& jp2		1299601	1					
ANR	1299910	Argument	& jp2		1299601	0					
ANR	1299911	UnaryOperationExpression	& jp2		1299601	0					
ANR	1299912	UnaryOperator	&		1299601	0					
ANR	1299913	Identifier	jp2		1299601	1					
ANR	1299914	Argument	np2		1299601	1					
ANR	1299915	Identifier	np2		1299601	0					
ANR	1299916	ExpressionStatement	"ASSIGN_POINT ( & np2 , np1 )"	2285:12:95577:95600	1299601	1	True				
ANR	1299917	CallExpression	"ASSIGN_POINT ( & np2 , np1 )"		1299601	0					
ANR	1299918	Callee	ASSIGN_POINT		1299601	0					
ANR	1299919	Identifier	ASSIGN_POINT		1299601	0					
ANR	1299920	ArgumentList	& np2		1299601	1					
ANR	1299921	Argument	& np2		1299601	0					
ANR	1299922	UnaryOperationExpression	& np2		1299601	0					
ANR	1299923	UnaryOperator	&		1299601	0					
ANR	1299924	Identifier	np2		1299601	1					
ANR	1299925	Argument	np1		1299601	1					
ANR	1299926	Identifier	np1		1299601	0					
ANR	1299927	ExpressionStatement	"np1 . x = tpx , np1 . y = tpy"	2286:12:95614:95638	1299601	2	True				
ANR	1299928	Expression	"np1 . x = tpx , np1 . y = tpy"		1299601	0					
ANR	1299929	AssignmentExpression	np1 . x = tpx		1299601	0		=			
ANR	1299930	MemberAccess	np1 . x		1299601	0					
ANR	1299931	Identifier	np1		1299601	0					
ANR	1299932	Identifier	x		1299601	1					
ANR	1299933	Identifier	tpx		1299601	1					
ANR	1299934	AssignmentExpression	np1 . y = tpy		1299601	1		=			
ANR	1299935	MemberAccess	np1 . y		1299601	0					
ANR	1299936	Identifier	np1		1299601	0					
ANR	1299937	Identifier	y		1299601	1					
ANR	1299938	Identifier	tpy		1299601	1					
ANR	1299939	ReturnStatement	return 5 ;	2288:8:95658:95666	1299601	4	True				
ANR	1299940	PrimaryExpression	5		1299601	0					
ANR	1299941	IfStatement	if ( join == gs_join_miter && ! ( fixed2long ( outp -> x << 1 ) == fixed2long ( np -> x << 1 ) && fixed2long ( outp -> y << 1 ) == fixed2long ( np -> y << 1 ) ) )		1299601	40					
ANR	1299942	Condition	join == gs_join_miter && ! ( fixed2long ( outp -> x << 1 ) == fixed2long ( np -> x << 1 ) && fixed2long ( outp -> y << 1 ) == fixed2long ( np -> y << 1 ) )	2295:8:95847:95996	1299601	0	True				
ANR	1299943	AndExpression	join == gs_join_miter && ! ( fixed2long ( outp -> x << 1 ) == fixed2long ( np -> x << 1 ) && fixed2long ( outp -> y << 1 ) == fixed2long ( np -> y << 1 ) )		1299601	0		&&			
ANR	1299944	EqualityExpression	join == gs_join_miter		1299601	0		==			
ANR	1299945	Identifier	join		1299601	0					
ANR	1299946	Identifier	gs_join_miter		1299601	1					
ANR	1299947	UnaryOperationExpression	! ( fixed2long ( outp -> x << 1 ) == fixed2long ( np -> x << 1 ) && fixed2long ( outp -> y << 1 ) == fixed2long ( np -> y << 1 ) )		1299601	1					
ANR	1299948	UnaryOperator	!		1299601	0					
ANR	1299949	AndExpression	fixed2long ( outp -> x << 1 ) == fixed2long ( np -> x << 1 ) && fixed2long ( outp -> y << 1 ) == fixed2long ( np -> y << 1 )		1299601	1		&&			
ANR	1299950	EqualityExpression	fixed2long ( outp -> x << 1 ) == fixed2long ( np -> x << 1 )		1299601	0		==			
ANR	1299951	CallExpression	fixed2long ( outp -> x << 1 )		1299601	0					
ANR	1299952	Callee	fixed2long		1299601	0					
ANR	1299953	Identifier	fixed2long		1299601	0					
ANR	1299954	ArgumentList	outp -> x << 1		1299601	1					
ANR	1299955	Argument	outp -> x << 1		1299601	0					
ANR	1299956	ShiftExpression	outp -> x << 1		1299601	0		<<			
ANR	1299957	PtrMemberAccess	outp -> x		1299601	0					
ANR	1299958	Identifier	outp		1299601	0					
ANR	1299959	Identifier	x		1299601	1					
ANR	1299960	PrimaryExpression	1		1299601	1					
ANR	1299961	CallExpression	fixed2long ( np -> x << 1 )		1299601	1					
ANR	1299962	Callee	fixed2long		1299601	0					
ANR	1299963	Identifier	fixed2long		1299601	0					
ANR	1299964	ArgumentList	np -> x << 1		1299601	1					
ANR	1299965	Argument	np -> x << 1		1299601	0					
ANR	1299966	ShiftExpression	np -> x << 1		1299601	0		<<			
ANR	1299967	PtrMemberAccess	np -> x		1299601	0					
ANR	1299968	Identifier	np		1299601	0					
ANR	1299969	Identifier	x		1299601	1					
ANR	1299970	PrimaryExpression	1		1299601	1					
ANR	1299971	EqualityExpression	fixed2long ( outp -> y << 1 ) == fixed2long ( np -> y << 1 )		1299601	1		==			
ANR	1299972	CallExpression	fixed2long ( outp -> y << 1 )		1299601	0					
ANR	1299973	Callee	fixed2long		1299601	0					
ANR	1299974	Identifier	fixed2long		1299601	0					
ANR	1299975	ArgumentList	outp -> y << 1		1299601	1					
ANR	1299976	Argument	outp -> y << 1		1299601	0					
ANR	1299977	ShiftExpression	outp -> y << 1		1299601	0		<<			
ANR	1299978	PtrMemberAccess	outp -> y		1299601	0					
ANR	1299979	Identifier	outp		1299601	0					
ANR	1299980	Identifier	y		1299601	1					
ANR	1299981	PrimaryExpression	1		1299601	1					
ANR	1299982	CallExpression	fixed2long ( np -> y << 1 )		1299601	1					
ANR	1299983	Callee	fixed2long		1299601	0					
ANR	1299984	Identifier	fixed2long		1299601	0					
ANR	1299985	ArgumentList	np -> y << 1		1299601	1					
ANR	1299986	Argument	np -> y << 1		1299601	0					
ANR	1299987	ShiftExpression	np -> y << 1		1299601	0		<<			
ANR	1299988	PtrMemberAccess	np -> y		1299601	0					
ANR	1299989	Identifier	np		1299601	0					
ANR	1299990	Identifier	y		1299601	1					
ANR	1299991	PrimaryExpression	1		1299601	1					
ANR	1299992	CompoundStatement		91:8:3074:3092	1299601	1					
ANR	1299993	IdentifierDeclStatement	gs_fixed_point mpt ;	2299:8:96018:96036	1299601	0	True				
ANR	1299994	IdentifierDecl	mpt		1299601	0					
ANR	1299995	IdentifierDeclType	gs_fixed_point		1299601	0					
ANR	1299996	Identifier	mpt		1299601	1					
ANR	1299997	ExpressionStatement	"code = check_miter ( pgs_lp , plp , nplp , pmat , outp , np , & mpt , ccw0 )"	2300:8:96046:96111	1299601	1	True				
ANR	1299998	AssignmentExpression	"code = check_miter ( pgs_lp , plp , nplp , pmat , outp , np , & mpt , ccw0 )"		1299601	0		=			
ANR	1299999	Identifier	code		1299601	0					
ANR	1300000	CallExpression	"check_miter ( pgs_lp , plp , nplp , pmat , outp , np , & mpt , ccw0 )"		1299601	1					
ANR	1300001	Callee	check_miter		1299601	0					
ANR	1300002	Identifier	check_miter		1299601	0					
ANR	1300003	ArgumentList	pgs_lp		1299601	1					
ANR	1300004	Argument	pgs_lp		1299601	0					
ANR	1300005	Identifier	pgs_lp		1299601	0					
ANR	1300006	Argument	plp		1299601	1					
ANR	1300007	Identifier	plp		1299601	0					
ANR	1300008	Argument	nplp		1299601	2					
ANR	1300009	Identifier	nplp		1299601	0					
ANR	1300010	Argument	pmat		1299601	3					
ANR	1300011	Identifier	pmat		1299601	0					
ANR	1300012	Argument	outp		1299601	4					
ANR	1300013	Identifier	outp		1299601	0					
ANR	1300014	Argument	np		1299601	5					
ANR	1300015	Identifier	np		1299601	0					
ANR	1300016	Argument	& mpt		1299601	6					
ANR	1300017	UnaryOperationExpression	& mpt		1299601	0					
ANR	1300018	UnaryOperator	&		1299601	0					
ANR	1300019	Identifier	mpt		1299601	1					
ANR	1300020	Argument	ccw0		1299601	7					
ANR	1300021	Identifier	ccw0		1299601	0					
ANR	1300022	IfStatement	if ( code < 0 )		1299601	2					
ANR	1300023	Condition	code < 0	2301:12:96125:96132	1299601	0	True				
ANR	1300024	RelationalExpression	code < 0		1299601	0		<			
ANR	1300025	Identifier	code		1299601	0					
ANR	1300026	PrimaryExpression	0		1299601	1					
ANR	1300027	ReturnStatement	return code ;	2302:12:96147:96158	1299601	1	True				
ANR	1300028	Identifier	code		1299601	0					
ANR	1300029	IfStatement	if ( code == 0 )		1299601	3					
ANR	1300030	Condition	code == 0	2303:12:96172:96180	1299601	0	True				
ANR	1300031	EqualityExpression	code == 0		1299601	0		==			
ANR	1300032	Identifier	code		1299601	0					
ANR	1300033	PrimaryExpression	0		1299601	1					
ANR	1300034	ExpressionStatement	"ASSIGN_POINT ( outp , mpt )"	2304:12:96195:96218	1299601	1	True				
ANR	1300035	CallExpression	"ASSIGN_POINT ( outp , mpt )"		1299601	0					
ANR	1300036	Callee	ASSIGN_POINT		1299601	0					
ANR	1300037	Identifier	ASSIGN_POINT		1299601	0					
ANR	1300038	ArgumentList	outp		1299601	1					
ANR	1300039	Argument	outp		1299601	0					
ANR	1300040	Identifier	outp		1299601	0					
ANR	1300041	Argument	mpt		1299601	1					
ANR	1300042	Identifier	mpt		1299601	0					
ANR	1300043	ReturnStatement	return 4 ;	2306:4:96230:96238	1299601	41	True				
ANR	1300044	PrimaryExpression	4		1299601	0					
ANR	1300045	ReturnType	static int		1299601	1					
ANR	1300046	Identifier	line_join_points		1299601	2					
ANR	1300047	ParameterList	"const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , gs_fixed_point * join_points , const gs_matrix * pmat , gs_line_join join , bool reflected"		1299601	3					
ANR	1300048	Parameter	const gx_line_params * pgs_lp	2206:17:92764:92792	1299601	0	True				
ANR	1300049	ParameterType	const gx_line_params *		1299601	0					
ANR	1300050	Identifier	pgs_lp		1299601	1					
ANR	1300051	Parameter	pl_ptr plp	2206:48:92795:92804	1299601	1	True				
ANR	1300052	ParameterType	pl_ptr		1299601	0					
ANR	1300053	Identifier	plp		1299601	1					
ANR	1300054	Parameter	pl_ptr nplp	2206:60:92807:92817	1299601	2	True				
ANR	1300055	ParameterType	pl_ptr		1299601	0					
ANR	1300056	Identifier	nplp		1299601	1					
ANR	1300057	Parameter	gs_fixed_point * join_points	2207:17:92837:92864	1299601	3	True				
ANR	1300058	ParameterType	gs_fixed_point *		1299601	0					
ANR	1300059	Identifier	join_points		1299601	1					
ANR	1300060	Parameter	const gs_matrix * pmat	2207:47:92867:92888	1299601	4	True				
ANR	1300061	ParameterType	const gs_matrix *		1299601	0					
ANR	1300062	Identifier	pmat		1299601	1					
ANR	1300063	Parameter	gs_line_join join	2208:17:92908:92924	1299601	5	True				
ANR	1300064	ParameterType	gs_line_join		1299601	0					
ANR	1300065	Identifier	join		1299601	1					
ANR	1300066	Parameter	bool reflected	2208:36:92927:92940	1299601	6	True				
ANR	1300067	ParameterType	bool		1299601	0					
ANR	1300068	Identifier	reflected		1299601	1					
ANR	1300069	CFGEntryNode	ENTRY		1299601		True				
ANR	1300070	CFGExitNode	EXIT		1299601		True				
ANR	1300071	Symbol	np -> x		1299601						
ANR	1300072	Symbol	nplp -> o . p . x		1299601						
ANR	1300073	Symbol	nplp -> o . p . y		1299601						
ANR	1300074	Symbol	reflected		1299601						
ANR	1300075	Symbol	np -> y		1299601						
ANR	1300076	Symbol	& mpt		1299601						
ANR	1300077	Symbol	& np2		1299601						
ANR	1300078	Symbol	& np1		1299601						
ANR	1300079	Symbol	& jp2		1299601						
ANR	1300080	Symbol	ccw		1299601						
ANR	1300081	Symbol	& jp1		1299601						
ANR	1300082	Symbol	plp -> e . co		1299601						
ANR	1300083	Symbol	outp -> y		1299601						
ANR	1300084	Symbol	plp -> e . ce		1299601						
ANR	1300085	Symbol	outp -> x		1299601						
ANR	1300086	Symbol	join		1299601						
ANR	1300087	Symbol	* plp		1299601						
ANR	1300088	Symbol	join_points		1299601						
ANR	1300089	Symbol	jp2		1299601						
ANR	1300090	Symbol	np1		1299601						
ANR	1300091	Symbol	mpt		1299601						
ANR	1300092	Symbol	np2		1299601						
ANR	1300093	Symbol	gs_join_triangle		1299601						
ANR	1300094	Symbol	pgs_lp		1299601						
ANR	1300095	Symbol	* outp		1299601						
ANR	1300096	Symbol	plp -> width . y		1299601						
ANR	1300097	Symbol	plp -> width . x		1299601						
ANR	1300098	Symbol	np		1299601						
ANR	1300099	Symbol	code		1299601						
ANR	1300100	Symbol	nplp -> o . co		1299601						
ANR	1300101	Symbol	pmat		1299601						
ANR	1300102	Symbol	plp -> width		1299601						
ANR	1300103	Symbol	jp2 . y		1299601						
ANR	1300104	Symbol	nplp -> width		1299601						
ANR	1300105	Symbol	jp2 . x		1299601						
ANR	1300106	Symbol	outp		1299601						
ANR	1300107	Symbol	ccw0		1299601						
ANR	1300108	Symbol	np1 . x		1299601						
ANR	1300109	Symbol	nplp -> o		1299601						
ANR	1300110	Symbol	np1 . y		1299601						
ANR	1300111	Symbol	* nplp		1299601						
ANR	1300112	Symbol	& jpx		1299601						
ANR	1300113	Symbol	* np		1299601						
ANR	1300114	Symbol	gs_join_miter		1299601						
ANR	1300115	Symbol	check_miter		1299601						
ANR	1300116	Symbol	nplp -> width . y		1299601						
ANR	1300117	Symbol	fixed2long		1299601						
ANR	1300118	Symbol	plp		1299601						
ANR	1300119	Symbol	nplp		1299601						
ANR	1300120	Symbol	nplp -> o . p		1299601						
ANR	1300121	Symbol	plp -> e		1299601						
ANR	1300122	Symbol	tpy		1299601						
ANR	1300123	Symbol	nplp -> o . ce		1299601						
ANR	1300124	Symbol	tpx		1299601						
ANR	1300125	Symbol	nplp -> width . x		1299601						
ANR	1300126	Function	line_join_points_fast_cw	2309:0:96243:97779							
ANR	1300127	FunctionDef	"line_join_points_fast_cw (const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , gs_fixed_point * rjoin_points , const gs_matrix * pmat , gs_line_join join)"		1300126	0					
ANR	1300128	CompoundStatement		2315:0:96509:97779	1300126	0					
ANR	1300129	IfStatement	if ( join == gs_join_triangle )		1300126	0					
ANR	1300130	Condition	join == gs_join_triangle	2320:8:96660:96683	1300126	0	True				
ANR	1300131	EqualityExpression	join == gs_join_triangle		1300126	0		==			
ANR	1300132	Identifier	join		1300126	0					
ANR	1300133	Identifier	gs_join_triangle		1300126	1					
ANR	1300134	CompoundStatement		8:8:190:207	1300126	1					
ANR	1300135	IdentifierDeclStatement	gs_fixed_point tp ;	2322:8:96700:96717	1300126	0	True				
ANR	1300136	IdentifierDecl	tp		1300126	0					
ANR	1300137	IdentifierDeclType	gs_fixed_point		1300126	0					
ANR	1300138	Identifier	tp		1300126	1					
ANR	1300139	ExpressionStatement	tp . x = plp -> e . ce . x - nplp -> o . p . x + nplp -> o . co . x	2324:8:96728:96775	1300126	1	True				
ANR	1300140	AssignmentExpression	tp . x = plp -> e . ce . x - nplp -> o . p . x + nplp -> o . co . x		1300126	0		=			
ANR	1300141	MemberAccess	tp . x		1300126	0					
ANR	1300142	Identifier	tp		1300126	0					
ANR	1300143	Identifier	x		1300126	1					
ANR	1300144	AdditiveExpression	plp -> e . ce . x - nplp -> o . p . x + nplp -> o . co . x		1300126	1		-			
ANR	1300145	MemberAccess	plp -> e . ce . x		1300126	0					
ANR	1300146	MemberAccess	plp -> e . ce		1300126	0					
ANR	1300147	PtrMemberAccess	plp -> e		1300126	0					
ANR	1300148	Identifier	plp		1300126	0					
ANR	1300149	Identifier	e		1300126	1					
ANR	1300150	Identifier	ce		1300126	1					
ANR	1300151	Identifier	x		1300126	1					
ANR	1300152	AdditiveExpression	nplp -> o . p . x + nplp -> o . co . x		1300126	1		+			
ANR	1300153	MemberAccess	nplp -> o . p . x		1300126	0					
ANR	1300154	MemberAccess	nplp -> o . p		1300126	0					
ANR	1300155	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300156	Identifier	nplp		1300126	0					
ANR	1300157	Identifier	o		1300126	1					
ANR	1300158	Identifier	p		1300126	1					
ANR	1300159	Identifier	x		1300126	1					
ANR	1300160	MemberAccess	nplp -> o . co . x		1300126	1					
ANR	1300161	MemberAccess	nplp -> o . co		1300126	0					
ANR	1300162	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300163	Identifier	nplp		1300126	0					
ANR	1300164	Identifier	o		1300126	1					
ANR	1300165	Identifier	co		1300126	1					
ANR	1300166	Identifier	x		1300126	1					
ANR	1300167	ExpressionStatement	tp . y = plp -> e . ce . y - nplp -> o . p . y + nplp -> o . co . y	2325:8:96785:96832	1300126	2	True				
ANR	1300168	AssignmentExpression	tp . y = plp -> e . ce . y - nplp -> o . p . y + nplp -> o . co . y		1300126	0		=			
ANR	1300169	MemberAccess	tp . y		1300126	0					
ANR	1300170	Identifier	tp		1300126	0					
ANR	1300171	Identifier	y		1300126	1					
ANR	1300172	AdditiveExpression	plp -> e . ce . y - nplp -> o . p . y + nplp -> o . co . y		1300126	1		-			
ANR	1300173	MemberAccess	plp -> e . ce . y		1300126	0					
ANR	1300174	MemberAccess	plp -> e . ce		1300126	0					
ANR	1300175	PtrMemberAccess	plp -> e		1300126	0					
ANR	1300176	Identifier	plp		1300126	0					
ANR	1300177	Identifier	e		1300126	1					
ANR	1300178	Identifier	ce		1300126	1					
ANR	1300179	Identifier	y		1300126	1					
ANR	1300180	AdditiveExpression	nplp -> o . p . y + nplp -> o . co . y		1300126	1		+			
ANR	1300181	MemberAccess	nplp -> o . p . y		1300126	0					
ANR	1300182	MemberAccess	nplp -> o . p		1300126	0					
ANR	1300183	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300184	Identifier	nplp		1300126	0					
ANR	1300185	Identifier	o		1300126	1					
ANR	1300186	Identifier	p		1300126	1					
ANR	1300187	Identifier	y		1300126	1					
ANR	1300188	MemberAccess	nplp -> o . co . y		1300126	1					
ANR	1300189	MemberAccess	nplp -> o . co		1300126	0					
ANR	1300190	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300191	Identifier	nplp		1300126	0					
ANR	1300192	Identifier	o		1300126	1					
ANR	1300193	Identifier	co		1300126	1					
ANR	1300194	Identifier	y		1300126	1					
ANR	1300195	ExpressionStatement	"ASSIGN_POINT ( & rjoin_points [ 0 ] , tp )"	2326:8:96842:96876	1300126	3	True				
ANR	1300196	CallExpression	"ASSIGN_POINT ( & rjoin_points [ 0 ] , tp )"		1300126	0					
ANR	1300197	Callee	ASSIGN_POINT		1300126	0					
ANR	1300198	Identifier	ASSIGN_POINT		1300126	0					
ANR	1300199	ArgumentList	& rjoin_points [ 0 ]		1300126	1					
ANR	1300200	Argument	& rjoin_points [ 0 ]		1300126	0					
ANR	1300201	UnaryOperationExpression	& rjoin_points [ 0 ]		1300126	0					
ANR	1300202	UnaryOperator	&		1300126	0					
ANR	1300203	ArrayIndexing	rjoin_points [ 0 ]		1300126	1					
ANR	1300204	Identifier	rjoin_points		1300126	0					
ANR	1300205	PrimaryExpression	0		1300126	1					
ANR	1300206	Argument	tp		1300126	1					
ANR	1300207	Identifier	tp		1300126	0					
ANR	1300208	ExpressionStatement	"ASSIGN_POINT ( & rjoin_points [ 1 ] , nplp -> o . co )"	2327:8:96886:96928	1300126	4	True				
ANR	1300209	CallExpression	"ASSIGN_POINT ( & rjoin_points [ 1 ] , nplp -> o . co )"		1300126	0					
ANR	1300210	Callee	ASSIGN_POINT		1300126	0					
ANR	1300211	Identifier	ASSIGN_POINT		1300126	0					
ANR	1300212	ArgumentList	& rjoin_points [ 1 ]		1300126	1					
ANR	1300213	Argument	& rjoin_points [ 1 ]		1300126	0					
ANR	1300214	UnaryOperationExpression	& rjoin_points [ 1 ]		1300126	0					
ANR	1300215	UnaryOperator	&		1300126	0					
ANR	1300216	ArrayIndexing	rjoin_points [ 1 ]		1300126	1					
ANR	1300217	Identifier	rjoin_points		1300126	0					
ANR	1300218	PrimaryExpression	1		1300126	1					
ANR	1300219	Argument	nplp -> o . co		1300126	1					
ANR	1300220	MemberAccess	nplp -> o . co		1300126	0					
ANR	1300221	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300222	Identifier	nplp		1300126	0					
ANR	1300223	Identifier	o		1300126	1					
ANR	1300224	Identifier	co		1300126	1					
ANR	1300225	ReturnStatement	return 2 ;	2328:8:96938:96946	1300126	5	True				
ANR	1300226	PrimaryExpression	2		1300126	0					
ANR	1300227	ExpressionStatement	"ASSIGN_POINT ( & rjoin_points [ 0 ] , nplp -> o . co )"	2332:4:96993:97035	1300126	1	True				
ANR	1300228	CallExpression	"ASSIGN_POINT ( & rjoin_points [ 0 ] , nplp -> o . co )"		1300126	0					
ANR	1300229	Callee	ASSIGN_POINT		1300126	0					
ANR	1300230	Identifier	ASSIGN_POINT		1300126	0					
ANR	1300231	ArgumentList	& rjoin_points [ 0 ]		1300126	1					
ANR	1300232	Argument	& rjoin_points [ 0 ]		1300126	0					
ANR	1300233	UnaryOperationExpression	& rjoin_points [ 0 ]		1300126	0					
ANR	1300234	UnaryOperator	&		1300126	0					
ANR	1300235	ArrayIndexing	rjoin_points [ 0 ]		1300126	1					
ANR	1300236	Identifier	rjoin_points		1300126	0					
ANR	1300237	PrimaryExpression	0		1300126	1					
ANR	1300238	Argument	nplp -> o . co		1300126	1					
ANR	1300239	MemberAccess	nplp -> o . co		1300126	0					
ANR	1300240	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300241	Identifier	nplp		1300126	0					
ANR	1300242	Identifier	o		1300126	1					
ANR	1300243	Identifier	co		1300126	1					
ANR	1300244	IfStatement	if ( join == gs_join_miter && ! ( fixed2long ( plp -> e . ce . x << 1 ) == fixed2long ( nplp -> o . co . x << 1 ) && fixed2long ( plp -> e . ce . y << 1 ) == fixed2long ( nplp -> o . co . y << 1 ) ) )		1300126	2					
ANR	1300245	Condition	join == gs_join_miter && ! ( fixed2long ( plp -> e . ce . x << 1 ) == fixed2long ( nplp -> o . co . x << 1 ) && fixed2long ( plp -> e . ce . y << 1 ) == fixed2long ( nplp -> o . co . y << 1 ) )	2339:8:97211:97382	1300126	0	True				
ANR	1300246	AndExpression	join == gs_join_miter && ! ( fixed2long ( plp -> e . ce . x << 1 ) == fixed2long ( nplp -> o . co . x << 1 ) && fixed2long ( plp -> e . ce . y << 1 ) == fixed2long ( nplp -> o . co . y << 1 ) )		1300126	0		&&			
ANR	1300247	EqualityExpression	join == gs_join_miter		1300126	0		==			
ANR	1300248	Identifier	join		1300126	0					
ANR	1300249	Identifier	gs_join_miter		1300126	1					
ANR	1300250	UnaryOperationExpression	! ( fixed2long ( plp -> e . ce . x << 1 ) == fixed2long ( nplp -> o . co . x << 1 ) && fixed2long ( plp -> e . ce . y << 1 ) == fixed2long ( nplp -> o . co . y << 1 ) )		1300126	1					
ANR	1300251	UnaryOperator	!		1300126	0					
ANR	1300252	AndExpression	fixed2long ( plp -> e . ce . x << 1 ) == fixed2long ( nplp -> o . co . x << 1 ) && fixed2long ( plp -> e . ce . y << 1 ) == fixed2long ( nplp -> o . co . y << 1 )		1300126	1		&&			
ANR	1300253	EqualityExpression	fixed2long ( plp -> e . ce . x << 1 ) == fixed2long ( nplp -> o . co . x << 1 )		1300126	0		==			
ANR	1300254	CallExpression	fixed2long ( plp -> e . ce . x << 1 )		1300126	0					
ANR	1300255	Callee	fixed2long		1300126	0					
ANR	1300256	Identifier	fixed2long		1300126	0					
ANR	1300257	ArgumentList	plp -> e . ce . x << 1		1300126	1					
ANR	1300258	Argument	plp -> e . ce . x << 1		1300126	0					
ANR	1300259	ShiftExpression	plp -> e . ce . x << 1		1300126	0		<<			
ANR	1300260	MemberAccess	plp -> e . ce . x		1300126	0					
ANR	1300261	MemberAccess	plp -> e . ce		1300126	0					
ANR	1300262	PtrMemberAccess	plp -> e		1300126	0					
ANR	1300263	Identifier	plp		1300126	0					
ANR	1300264	Identifier	e		1300126	1					
ANR	1300265	Identifier	ce		1300126	1					
ANR	1300266	Identifier	x		1300126	1					
ANR	1300267	PrimaryExpression	1		1300126	1					
ANR	1300268	CallExpression	fixed2long ( nplp -> o . co . x << 1 )		1300126	1					
ANR	1300269	Callee	fixed2long		1300126	0					
ANR	1300270	Identifier	fixed2long		1300126	0					
ANR	1300271	ArgumentList	nplp -> o . co . x << 1		1300126	1					
ANR	1300272	Argument	nplp -> o . co . x << 1		1300126	0					
ANR	1300273	ShiftExpression	nplp -> o . co . x << 1		1300126	0		<<			
ANR	1300274	MemberAccess	nplp -> o . co . x		1300126	0					
ANR	1300275	MemberAccess	nplp -> o . co		1300126	0					
ANR	1300276	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300277	Identifier	nplp		1300126	0					
ANR	1300278	Identifier	o		1300126	1					
ANR	1300279	Identifier	co		1300126	1					
ANR	1300280	Identifier	x		1300126	1					
ANR	1300281	PrimaryExpression	1		1300126	1					
ANR	1300282	EqualityExpression	fixed2long ( plp -> e . ce . y << 1 ) == fixed2long ( nplp -> o . co . y << 1 )		1300126	1		==			
ANR	1300283	CallExpression	fixed2long ( plp -> e . ce . y << 1 )		1300126	0					
ANR	1300284	Callee	fixed2long		1300126	0					
ANR	1300285	Identifier	fixed2long		1300126	0					
ANR	1300286	ArgumentList	plp -> e . ce . y << 1		1300126	1					
ANR	1300287	Argument	plp -> e . ce . y << 1		1300126	0					
ANR	1300288	ShiftExpression	plp -> e . ce . y << 1		1300126	0		<<			
ANR	1300289	MemberAccess	plp -> e . ce . y		1300126	0					
ANR	1300290	MemberAccess	plp -> e . ce		1300126	0					
ANR	1300291	PtrMemberAccess	plp -> e		1300126	0					
ANR	1300292	Identifier	plp		1300126	0					
ANR	1300293	Identifier	e		1300126	1					
ANR	1300294	Identifier	ce		1300126	1					
ANR	1300295	Identifier	y		1300126	1					
ANR	1300296	PrimaryExpression	1		1300126	1					
ANR	1300297	CallExpression	fixed2long ( nplp -> o . co . y << 1 )		1300126	1					
ANR	1300298	Callee	fixed2long		1300126	0					
ANR	1300299	Identifier	fixed2long		1300126	0					
ANR	1300300	ArgumentList	nplp -> o . co . y << 1		1300126	1					
ANR	1300301	Argument	nplp -> o . co . y << 1		1300126	0					
ANR	1300302	ShiftExpression	nplp -> o . co . y << 1		1300126	0		<<			
ANR	1300303	MemberAccess	nplp -> o . co . y		1300126	0					
ANR	1300304	MemberAccess	nplp -> o . co		1300126	0					
ANR	1300305	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300306	Identifier	nplp		1300126	0					
ANR	1300307	Identifier	o		1300126	1					
ANR	1300308	Identifier	co		1300126	1					
ANR	1300309	Identifier	y		1300126	1					
ANR	1300310	PrimaryExpression	1		1300126	1					
ANR	1300311	CompoundStatement		30:8:922:1038	1300126	1					
ANR	1300312	IdentifierDeclStatement	gs_fixed_point mpt ;	2343:8:97404:97422	1300126	0	True				
ANR	1300313	IdentifierDecl	mpt		1300126	0					
ANR	1300314	IdentifierDeclType	gs_fixed_point		1300126	0					
ANR	1300315	Identifier	mpt		1300126	1					
ANR	1300316	IdentifierDeclStatement	"int code = check_miter ( pgs_lp , plp , nplp , pmat , & plp -> e . ce , & nplp -> o . co , & mpt , false ) ;"	2344:8:97432:97548	1300126	1	True				
ANR	1300317	IdentifierDecl	"code = check_miter ( pgs_lp , plp , nplp , pmat , & plp -> e . ce , & nplp -> o . co , & mpt , false )"		1300126	0					
ANR	1300318	IdentifierDeclType	int		1300126	0					
ANR	1300319	Identifier	code		1300126	1					
ANR	1300320	AssignmentExpression	"code = check_miter ( pgs_lp , plp , nplp , pmat , & plp -> e . ce , & nplp -> o . co , & mpt , false )"		1300126	2		=			
ANR	1300321	Identifier	code		1300126	0					
ANR	1300322	CallExpression	"check_miter ( pgs_lp , plp , nplp , pmat , & plp -> e . ce , & nplp -> o . co , & mpt , false )"		1300126	1					
ANR	1300323	Callee	check_miter		1300126	0					
ANR	1300324	Identifier	check_miter		1300126	0					
ANR	1300325	ArgumentList	pgs_lp		1300126	1					
ANR	1300326	Argument	pgs_lp		1300126	0					
ANR	1300327	Identifier	pgs_lp		1300126	0					
ANR	1300328	Argument	plp		1300126	1					
ANR	1300329	Identifier	plp		1300126	0					
ANR	1300330	Argument	nplp		1300126	2					
ANR	1300331	Identifier	nplp		1300126	0					
ANR	1300332	Argument	pmat		1300126	3					
ANR	1300333	Identifier	pmat		1300126	0					
ANR	1300334	Argument	& plp -> e . ce		1300126	4					
ANR	1300335	UnaryOperationExpression	& plp -> e . ce		1300126	0					
ANR	1300336	UnaryOperator	&		1300126	0					
ANR	1300337	MemberAccess	plp -> e . ce		1300126	1					
ANR	1300338	PtrMemberAccess	plp -> e		1300126	0					
ANR	1300339	Identifier	plp		1300126	0					
ANR	1300340	Identifier	e		1300126	1					
ANR	1300341	Identifier	ce		1300126	1					
ANR	1300342	Argument	& nplp -> o . co		1300126	5					
ANR	1300343	UnaryOperationExpression	& nplp -> o . co		1300126	0					
ANR	1300344	UnaryOperator	&		1300126	0					
ANR	1300345	MemberAccess	nplp -> o . co		1300126	1					
ANR	1300346	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300347	Identifier	nplp		1300126	0					
ANR	1300348	Identifier	o		1300126	1					
ANR	1300349	Identifier	co		1300126	1					
ANR	1300350	Argument	& mpt		1300126	6					
ANR	1300351	UnaryOperationExpression	& mpt		1300126	0					
ANR	1300352	UnaryOperator	&		1300126	0					
ANR	1300353	Identifier	mpt		1300126	1					
ANR	1300354	Argument	false		1300126	7					
ANR	1300355	Identifier	false		1300126	0					
ANR	1300356	IfStatement	if ( code < 0 )		1300126	2					
ANR	1300357	Condition	code < 0	2346:12:97562:97569	1300126	0	True				
ANR	1300358	RelationalExpression	code < 0		1300126	0		<			
ANR	1300359	Identifier	code		1300126	0					
ANR	1300360	PrimaryExpression	0		1300126	1					
ANR	1300361	ReturnStatement	return code ;	2347:12:97584:97595	1300126	1	True				
ANR	1300362	Identifier	code		1300126	0					
ANR	1300363	IfStatement	if ( code == 0 )		1300126	3					
ANR	1300364	Condition	code == 0	2348:12:97609:97617	1300126	0	True				
ANR	1300365	EqualityExpression	code == 0		1300126	0		==			
ANR	1300366	Identifier	code		1300126	0					
ANR	1300367	PrimaryExpression	0		1300126	1					
ANR	1300368	CompoundStatement		34:23:1110:1110	1300126	1					
ANR	1300369	ExpressionStatement	"ASSIGN_POINT ( & rjoin_points [ 0 ] , mpt )"	2349:12:97634:97669	1300126	0	True				
ANR	1300370	CallExpression	"ASSIGN_POINT ( & rjoin_points [ 0 ] , mpt )"		1300126	0					
ANR	1300371	Callee	ASSIGN_POINT		1300126	0					
ANR	1300372	Identifier	ASSIGN_POINT		1300126	0					
ANR	1300373	ArgumentList	& rjoin_points [ 0 ]		1300126	1					
ANR	1300374	Argument	& rjoin_points [ 0 ]		1300126	0					
ANR	1300375	UnaryOperationExpression	& rjoin_points [ 0 ]		1300126	0					
ANR	1300376	UnaryOperator	&		1300126	0					
ANR	1300377	ArrayIndexing	rjoin_points [ 0 ]		1300126	1					
ANR	1300378	Identifier	rjoin_points		1300126	0					
ANR	1300379	PrimaryExpression	0		1300126	1					
ANR	1300380	Argument	mpt		1300126	1					
ANR	1300381	Identifier	mpt		1300126	0					
ANR	1300382	ExpressionStatement	"ASSIGN_POINT ( & rjoin_points [ 1 ] , nplp -> o . co )"	2350:12:97683:97725	1300126	1	True				
ANR	1300383	CallExpression	"ASSIGN_POINT ( & rjoin_points [ 1 ] , nplp -> o . co )"		1300126	0					
ANR	1300384	Callee	ASSIGN_POINT		1300126	0					
ANR	1300385	Identifier	ASSIGN_POINT		1300126	0					
ANR	1300386	ArgumentList	& rjoin_points [ 1 ]		1300126	1					
ANR	1300387	Argument	& rjoin_points [ 1 ]		1300126	0					
ANR	1300388	UnaryOperationExpression	& rjoin_points [ 1 ]		1300126	0					
ANR	1300389	UnaryOperator	&		1300126	0					
ANR	1300390	ArrayIndexing	rjoin_points [ 1 ]		1300126	1					
ANR	1300391	Identifier	rjoin_points		1300126	0					
ANR	1300392	PrimaryExpression	1		1300126	1					
ANR	1300393	Argument	nplp -> o . co		1300126	1					
ANR	1300394	MemberAccess	nplp -> o . co		1300126	0					
ANR	1300395	PtrMemberAccess	nplp -> o		1300126	0					
ANR	1300396	Identifier	nplp		1300126	0					
ANR	1300397	Identifier	o		1300126	1					
ANR	1300398	Identifier	co		1300126	1					
ANR	1300399	ReturnStatement	return 2 ;	2351:12:97739:97747	1300126	2	True				
ANR	1300400	PrimaryExpression	2		1300126	0					
ANR	1300401	ReturnStatement	return 1 ;	2354:4:97769:97777	1300126	3	True				
ANR	1300402	PrimaryExpression	1		1300126	0					
ANR	1300403	ReturnType	static int		1300126	1					
ANR	1300404	Identifier	line_join_points_fast_cw		1300126	2					
ANR	1300405	ParameterList	"const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , gs_fixed_point * rjoin_points , const gs_matrix * pmat , gs_line_join join"		1300126	3					
ANR	1300406	Parameter	const gx_line_params * pgs_lp	2310:25:96279:96307	1300126	0	True				
ANR	1300407	ParameterType	const gx_line_params *		1300126	0					
ANR	1300408	Identifier	pgs_lp		1300126	1					
ANR	1300409	Parameter	pl_ptr plp	2311:25:96335:96344	1300126	1	True				
ANR	1300410	ParameterType	pl_ptr		1300126	0					
ANR	1300411	Identifier	plp		1300126	1					
ANR	1300412	Parameter	pl_ptr nplp	2311:37:96347:96357	1300126	2	True				
ANR	1300413	ParameterType	pl_ptr		1300126	0					
ANR	1300414	Identifier	nplp		1300126	1					
ANR	1300415	Parameter	gs_fixed_point * rjoin_points	2312:25:96385:96413	1300126	3	True				
ANR	1300416	ParameterType	gs_fixed_point *		1300126	0					
ANR	1300417	Identifier	rjoin_points		1300126	1					
ANR	1300418	Parameter	const gs_matrix * pmat	2313:25:96441:96462	1300126	4	True				
ANR	1300419	ParameterType	const gs_matrix *		1300126	0					
ANR	1300420	Identifier	pmat		1300126	1					
ANR	1300421	Parameter	gs_line_join join	2314:25:96490:96506	1300126	5	True				
ANR	1300422	ParameterType	gs_line_join		1300126	0					
ANR	1300423	Identifier	join		1300126	1					
ANR	1300424	CFGEntryNode	ENTRY		1300126		True				
ANR	1300425	CFGExitNode	EXIT		1300126		True				
ANR	1300426	Symbol	nplp -> o . co		1300126						
ANR	1300427	Symbol	code		1300126						
ANR	1300428	Symbol	pmat		1300126						
ANR	1300429	Symbol	& nplp -> o		1300126						
ANR	1300430	Symbol	nplp -> o . p . x		1300126						
ANR	1300431	Symbol	nplp -> o . p . y		1300126						
ANR	1300432	Symbol	tp . y		1300126						
ANR	1300433	Symbol	tp . x		1300126						
ANR	1300434	Symbol	& plp -> e		1300126						
ANR	1300435	Symbol	& plp -> e . ce		1300126						
ANR	1300436	Symbol	& mpt		1300126						
ANR	1300437	Symbol	plp -> e . ce		1300126						
ANR	1300438	Symbol	nplp -> o		1300126						
ANR	1300439	Symbol	join		1300126						
ANR	1300440	Symbol	* plp		1300126						
ANR	1300441	Symbol	* nplp		1300126						
ANR	1300442	Symbol	& nplp -> o . co		1300126						
ANR	1300443	Symbol	false		1300126						
ANR	1300444	Symbol	gs_join_miter		1300126						
ANR	1300445	Symbol	check_miter		1300126						
ANR	1300446	Symbol	nplp -> o . co . x		1300126						
ANR	1300447	Symbol	nplp -> o . co . y		1300126						
ANR	1300448	Symbol	mpt		1300126						
ANR	1300449	Symbol	rjoin_points		1300126						
ANR	1300450	Symbol	plp -> e . ce . x		1300126						
ANR	1300451	Symbol	plp -> e . ce . y		1300126						
ANR	1300452	Symbol	fixed2long		1300126						
ANR	1300453	Symbol	plp		1300126						
ANR	1300454	Symbol	nplp		1300126						
ANR	1300455	Symbol	nplp -> o . p		1300126						
ANR	1300456	Symbol	gs_join_triangle		1300126						
ANR	1300457	Symbol	pgs_lp		1300126						
ANR	1300458	Symbol	plp -> e		1300126						
ANR	1300459	Symbol	tp		1300126						
ANR	1300460	Function	line_join_points_fast_ccw	2357:0:97782:99314							
ANR	1300461	FunctionDef	"line_join_points_fast_ccw (const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , gs_fixed_point * join_points , const gs_matrix * pmat , gs_line_join join)"		1300460	0					
ANR	1300462	CompoundStatement		2363:0:98052:99314	1300460	0					
ANR	1300463	IfStatement	if ( join == gs_join_triangle )		1300460	0					
ANR	1300464	Condition	join == gs_join_triangle	2367:8:98201:98224	1300460	0	True				
ANR	1300465	EqualityExpression	join == gs_join_triangle		1300460	0		==			
ANR	1300466	Identifier	join		1300460	0					
ANR	1300467	Identifier	gs_join_triangle		1300460	1					
ANR	1300468	CompoundStatement		7:8:188:205	1300460	1					
ANR	1300469	IdentifierDeclStatement	gs_fixed_point tp ;	2369:8:98241:98258	1300460	0	True				
ANR	1300470	IdentifierDecl	tp		1300460	0					
ANR	1300471	IdentifierDeclType	gs_fixed_point		1300460	0					
ANR	1300472	Identifier	tp		1300460	1					
ANR	1300473	ExpressionStatement	tp . x = plp -> e . co . x - nplp -> o . p . x + nplp -> o . ce . x	2371:8:98269:98316	1300460	1	True				
ANR	1300474	AssignmentExpression	tp . x = plp -> e . co . x - nplp -> o . p . x + nplp -> o . ce . x		1300460	0		=			
ANR	1300475	MemberAccess	tp . x		1300460	0					
ANR	1300476	Identifier	tp		1300460	0					
ANR	1300477	Identifier	x		1300460	1					
ANR	1300478	AdditiveExpression	plp -> e . co . x - nplp -> o . p . x + nplp -> o . ce . x		1300460	1		-			
ANR	1300479	MemberAccess	plp -> e . co . x		1300460	0					
ANR	1300480	MemberAccess	plp -> e . co		1300460	0					
ANR	1300481	PtrMemberAccess	plp -> e		1300460	0					
ANR	1300482	Identifier	plp		1300460	0					
ANR	1300483	Identifier	e		1300460	1					
ANR	1300484	Identifier	co		1300460	1					
ANR	1300485	Identifier	x		1300460	1					
ANR	1300486	AdditiveExpression	nplp -> o . p . x + nplp -> o . ce . x		1300460	1		+			
ANR	1300487	MemberAccess	nplp -> o . p . x		1300460	0					
ANR	1300488	MemberAccess	nplp -> o . p		1300460	0					
ANR	1300489	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300490	Identifier	nplp		1300460	0					
ANR	1300491	Identifier	o		1300460	1					
ANR	1300492	Identifier	p		1300460	1					
ANR	1300493	Identifier	x		1300460	1					
ANR	1300494	MemberAccess	nplp -> o . ce . x		1300460	1					
ANR	1300495	MemberAccess	nplp -> o . ce		1300460	0					
ANR	1300496	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300497	Identifier	nplp		1300460	0					
ANR	1300498	Identifier	o		1300460	1					
ANR	1300499	Identifier	ce		1300460	1					
ANR	1300500	Identifier	x		1300460	1					
ANR	1300501	ExpressionStatement	tp . y = plp -> e . co . y - nplp -> o . p . y + nplp -> o . ce . y	2372:8:98326:98373	1300460	2	True				
ANR	1300502	AssignmentExpression	tp . y = plp -> e . co . y - nplp -> o . p . y + nplp -> o . ce . y		1300460	0		=			
ANR	1300503	MemberAccess	tp . y		1300460	0					
ANR	1300504	Identifier	tp		1300460	0					
ANR	1300505	Identifier	y		1300460	1					
ANR	1300506	AdditiveExpression	plp -> e . co . y - nplp -> o . p . y + nplp -> o . ce . y		1300460	1		-			
ANR	1300507	MemberAccess	plp -> e . co . y		1300460	0					
ANR	1300508	MemberAccess	plp -> e . co		1300460	0					
ANR	1300509	PtrMemberAccess	plp -> e		1300460	0					
ANR	1300510	Identifier	plp		1300460	0					
ANR	1300511	Identifier	e		1300460	1					
ANR	1300512	Identifier	co		1300460	1					
ANR	1300513	Identifier	y		1300460	1					
ANR	1300514	AdditiveExpression	nplp -> o . p . y + nplp -> o . ce . y		1300460	1		+			
ANR	1300515	MemberAccess	nplp -> o . p . y		1300460	0					
ANR	1300516	MemberAccess	nplp -> o . p		1300460	0					
ANR	1300517	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300518	Identifier	nplp		1300460	0					
ANR	1300519	Identifier	o		1300460	1					
ANR	1300520	Identifier	p		1300460	1					
ANR	1300521	Identifier	y		1300460	1					
ANR	1300522	MemberAccess	nplp -> o . ce . y		1300460	1					
ANR	1300523	MemberAccess	nplp -> o . ce		1300460	0					
ANR	1300524	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300525	Identifier	nplp		1300460	0					
ANR	1300526	Identifier	o		1300460	1					
ANR	1300527	Identifier	ce		1300460	1					
ANR	1300528	Identifier	y		1300460	1					
ANR	1300529	ExpressionStatement	"ASSIGN_POINT ( & join_points [ 0 ] , tp )"	2373:8:98383:98416	1300460	3	True				
ANR	1300530	CallExpression	"ASSIGN_POINT ( & join_points [ 0 ] , tp )"		1300460	0					
ANR	1300531	Callee	ASSIGN_POINT		1300460	0					
ANR	1300532	Identifier	ASSIGN_POINT		1300460	0					
ANR	1300533	ArgumentList	& join_points [ 0 ]		1300460	1					
ANR	1300534	Argument	& join_points [ 0 ]		1300460	0					
ANR	1300535	UnaryOperationExpression	& join_points [ 0 ]		1300460	0					
ANR	1300536	UnaryOperator	&		1300460	0					
ANR	1300537	ArrayIndexing	join_points [ 0 ]		1300460	1					
ANR	1300538	Identifier	join_points		1300460	0					
ANR	1300539	PrimaryExpression	0		1300460	1					
ANR	1300540	Argument	tp		1300460	1					
ANR	1300541	Identifier	tp		1300460	0					
ANR	1300542	ExpressionStatement	"ASSIGN_POINT ( & join_points [ 1 ] , nplp -> o . ce )"	2374:8:98426:98467	1300460	4	True				
ANR	1300543	CallExpression	"ASSIGN_POINT ( & join_points [ 1 ] , nplp -> o . ce )"		1300460	0					
ANR	1300544	Callee	ASSIGN_POINT		1300460	0					
ANR	1300545	Identifier	ASSIGN_POINT		1300460	0					
ANR	1300546	ArgumentList	& join_points [ 1 ]		1300460	1					
ANR	1300547	Argument	& join_points [ 1 ]		1300460	0					
ANR	1300548	UnaryOperationExpression	& join_points [ 1 ]		1300460	0					
ANR	1300549	UnaryOperator	&		1300460	0					
ANR	1300550	ArrayIndexing	join_points [ 1 ]		1300460	1					
ANR	1300551	Identifier	join_points		1300460	0					
ANR	1300552	PrimaryExpression	1		1300460	1					
ANR	1300553	Argument	nplp -> o . ce		1300460	1					
ANR	1300554	MemberAccess	nplp -> o . ce		1300460	0					
ANR	1300555	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300556	Identifier	nplp		1300460	0					
ANR	1300557	Identifier	o		1300460	1					
ANR	1300558	Identifier	ce		1300460	1					
ANR	1300559	ReturnStatement	return 2 ;	2375:8:98477:98485	1300460	5	True				
ANR	1300560	PrimaryExpression	2		1300460	0					
ANR	1300561	ExpressionStatement	"ASSIGN_POINT ( & join_points [ 0 ] , nplp -> o . ce )"	2379:4:98532:98573	1300460	1	True				
ANR	1300562	CallExpression	"ASSIGN_POINT ( & join_points [ 0 ] , nplp -> o . ce )"		1300460	0					
ANR	1300563	Callee	ASSIGN_POINT		1300460	0					
ANR	1300564	Identifier	ASSIGN_POINT		1300460	0					
ANR	1300565	ArgumentList	& join_points [ 0 ]		1300460	1					
ANR	1300566	Argument	& join_points [ 0 ]		1300460	0					
ANR	1300567	UnaryOperationExpression	& join_points [ 0 ]		1300460	0					
ANR	1300568	UnaryOperator	&		1300460	0					
ANR	1300569	ArrayIndexing	join_points [ 0 ]		1300460	1					
ANR	1300570	Identifier	join_points		1300460	0					
ANR	1300571	PrimaryExpression	0		1300460	1					
ANR	1300572	Argument	nplp -> o . ce		1300460	1					
ANR	1300573	MemberAccess	nplp -> o . ce		1300460	0					
ANR	1300574	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300575	Identifier	nplp		1300460	0					
ANR	1300576	Identifier	o		1300460	1					
ANR	1300577	Identifier	ce		1300460	1					
ANR	1300578	IfStatement	if ( join == gs_join_miter && ! ( fixed2long ( plp -> e . co . x << 1 ) == fixed2long ( nplp -> o . ce . x << 1 ) && fixed2long ( plp -> e . co . y << 1 ) == fixed2long ( nplp -> o . ce . y << 1 ) ) )		1300460	2					
ANR	1300579	Condition	join == gs_join_miter && ! ( fixed2long ( plp -> e . co . x << 1 ) == fixed2long ( nplp -> o . ce . x << 1 ) && fixed2long ( plp -> e . co . y << 1 ) == fixed2long ( nplp -> o . ce . y << 1 ) )	2386:8:98749:98920	1300460	0	True				
ANR	1300580	AndExpression	join == gs_join_miter && ! ( fixed2long ( plp -> e . co . x << 1 ) == fixed2long ( nplp -> o . ce . x << 1 ) && fixed2long ( plp -> e . co . y << 1 ) == fixed2long ( nplp -> o . ce . y << 1 ) )		1300460	0		&&			
ANR	1300581	EqualityExpression	join == gs_join_miter		1300460	0		==			
ANR	1300582	Identifier	join		1300460	0					
ANR	1300583	Identifier	gs_join_miter		1300460	1					
ANR	1300584	UnaryOperationExpression	! ( fixed2long ( plp -> e . co . x << 1 ) == fixed2long ( nplp -> o . ce . x << 1 ) && fixed2long ( plp -> e . co . y << 1 ) == fixed2long ( nplp -> o . ce . y << 1 ) )		1300460	1					
ANR	1300585	UnaryOperator	!		1300460	0					
ANR	1300586	AndExpression	fixed2long ( plp -> e . co . x << 1 ) == fixed2long ( nplp -> o . ce . x << 1 ) && fixed2long ( plp -> e . co . y << 1 ) == fixed2long ( nplp -> o . ce . y << 1 )		1300460	1		&&			
ANR	1300587	EqualityExpression	fixed2long ( plp -> e . co . x << 1 ) == fixed2long ( nplp -> o . ce . x << 1 )		1300460	0		==			
ANR	1300588	CallExpression	fixed2long ( plp -> e . co . x << 1 )		1300460	0					
ANR	1300589	Callee	fixed2long		1300460	0					
ANR	1300590	Identifier	fixed2long		1300460	0					
ANR	1300591	ArgumentList	plp -> e . co . x << 1		1300460	1					
ANR	1300592	Argument	plp -> e . co . x << 1		1300460	0					
ANR	1300593	ShiftExpression	plp -> e . co . x << 1		1300460	0		<<			
ANR	1300594	MemberAccess	plp -> e . co . x		1300460	0					
ANR	1300595	MemberAccess	plp -> e . co		1300460	0					
ANR	1300596	PtrMemberAccess	plp -> e		1300460	0					
ANR	1300597	Identifier	plp		1300460	0					
ANR	1300598	Identifier	e		1300460	1					
ANR	1300599	Identifier	co		1300460	1					
ANR	1300600	Identifier	x		1300460	1					
ANR	1300601	PrimaryExpression	1		1300460	1					
ANR	1300602	CallExpression	fixed2long ( nplp -> o . ce . x << 1 )		1300460	1					
ANR	1300603	Callee	fixed2long		1300460	0					
ANR	1300604	Identifier	fixed2long		1300460	0					
ANR	1300605	ArgumentList	nplp -> o . ce . x << 1		1300460	1					
ANR	1300606	Argument	nplp -> o . ce . x << 1		1300460	0					
ANR	1300607	ShiftExpression	nplp -> o . ce . x << 1		1300460	0		<<			
ANR	1300608	MemberAccess	nplp -> o . ce . x		1300460	0					
ANR	1300609	MemberAccess	nplp -> o . ce		1300460	0					
ANR	1300610	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300611	Identifier	nplp		1300460	0					
ANR	1300612	Identifier	o		1300460	1					
ANR	1300613	Identifier	ce		1300460	1					
ANR	1300614	Identifier	x		1300460	1					
ANR	1300615	PrimaryExpression	1		1300460	1					
ANR	1300616	EqualityExpression	fixed2long ( plp -> e . co . y << 1 ) == fixed2long ( nplp -> o . ce . y << 1 )		1300460	1		==			
ANR	1300617	CallExpression	fixed2long ( plp -> e . co . y << 1 )		1300460	0					
ANR	1300618	Callee	fixed2long		1300460	0					
ANR	1300619	Identifier	fixed2long		1300460	0					
ANR	1300620	ArgumentList	plp -> e . co . y << 1		1300460	1					
ANR	1300621	Argument	plp -> e . co . y << 1		1300460	0					
ANR	1300622	ShiftExpression	plp -> e . co . y << 1		1300460	0		<<			
ANR	1300623	MemberAccess	plp -> e . co . y		1300460	0					
ANR	1300624	MemberAccess	plp -> e . co		1300460	0					
ANR	1300625	PtrMemberAccess	plp -> e		1300460	0					
ANR	1300626	Identifier	plp		1300460	0					
ANR	1300627	Identifier	e		1300460	1					
ANR	1300628	Identifier	co		1300460	1					
ANR	1300629	Identifier	y		1300460	1					
ANR	1300630	PrimaryExpression	1		1300460	1					
ANR	1300631	CallExpression	fixed2long ( nplp -> o . ce . y << 1 )		1300460	1					
ANR	1300632	Callee	fixed2long		1300460	0					
ANR	1300633	Identifier	fixed2long		1300460	0					
ANR	1300634	ArgumentList	nplp -> o . ce . y << 1		1300460	1					
ANR	1300635	Argument	nplp -> o . ce . y << 1		1300460	0					
ANR	1300636	ShiftExpression	nplp -> o . ce . y << 1		1300460	0		<<			
ANR	1300637	MemberAccess	nplp -> o . ce . y		1300460	0					
ANR	1300638	MemberAccess	nplp -> o . ce		1300460	0					
ANR	1300639	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300640	Identifier	nplp		1300460	0					
ANR	1300641	Identifier	o		1300460	1					
ANR	1300642	Identifier	ce		1300460	1					
ANR	1300643	Identifier	y		1300460	1					
ANR	1300644	PrimaryExpression	1		1300460	1					
ANR	1300645	CompoundStatement		29:8:917:1032	1300460	1					
ANR	1300646	IdentifierDeclStatement	gs_fixed_point mpt ;	2390:8:98942:98960	1300460	0	True				
ANR	1300647	IdentifierDecl	mpt		1300460	0					
ANR	1300648	IdentifierDeclType	gs_fixed_point		1300460	0					
ANR	1300649	Identifier	mpt		1300460	1					
ANR	1300650	IdentifierDeclStatement	"int code = check_miter ( pgs_lp , plp , nplp , pmat , & plp -> e . co , & nplp -> o . ce , & mpt , true ) ;"	2391:8:98970:99085	1300460	1	True				
ANR	1300651	IdentifierDecl	"code = check_miter ( pgs_lp , plp , nplp , pmat , & plp -> e . co , & nplp -> o . ce , & mpt , true )"		1300460	0					
ANR	1300652	IdentifierDeclType	int		1300460	0					
ANR	1300653	Identifier	code		1300460	1					
ANR	1300654	AssignmentExpression	"code = check_miter ( pgs_lp , plp , nplp , pmat , & plp -> e . co , & nplp -> o . ce , & mpt , true )"		1300460	2		=			
ANR	1300655	Identifier	code		1300460	0					
ANR	1300656	CallExpression	"check_miter ( pgs_lp , plp , nplp , pmat , & plp -> e . co , & nplp -> o . ce , & mpt , true )"		1300460	1					
ANR	1300657	Callee	check_miter		1300460	0					
ANR	1300658	Identifier	check_miter		1300460	0					
ANR	1300659	ArgumentList	pgs_lp		1300460	1					
ANR	1300660	Argument	pgs_lp		1300460	0					
ANR	1300661	Identifier	pgs_lp		1300460	0					
ANR	1300662	Argument	plp		1300460	1					
ANR	1300663	Identifier	plp		1300460	0					
ANR	1300664	Argument	nplp		1300460	2					
ANR	1300665	Identifier	nplp		1300460	0					
ANR	1300666	Argument	pmat		1300460	3					
ANR	1300667	Identifier	pmat		1300460	0					
ANR	1300668	Argument	& plp -> e . co		1300460	4					
ANR	1300669	UnaryOperationExpression	& plp -> e . co		1300460	0					
ANR	1300670	UnaryOperator	&		1300460	0					
ANR	1300671	MemberAccess	plp -> e . co		1300460	1					
ANR	1300672	PtrMemberAccess	plp -> e		1300460	0					
ANR	1300673	Identifier	plp		1300460	0					
ANR	1300674	Identifier	e		1300460	1					
ANR	1300675	Identifier	co		1300460	1					
ANR	1300676	Argument	& nplp -> o . ce		1300460	5					
ANR	1300677	UnaryOperationExpression	& nplp -> o . ce		1300460	0					
ANR	1300678	UnaryOperator	&		1300460	0					
ANR	1300679	MemberAccess	nplp -> o . ce		1300460	1					
ANR	1300680	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300681	Identifier	nplp		1300460	0					
ANR	1300682	Identifier	o		1300460	1					
ANR	1300683	Identifier	ce		1300460	1					
ANR	1300684	Argument	& mpt		1300460	6					
ANR	1300685	UnaryOperationExpression	& mpt		1300460	0					
ANR	1300686	UnaryOperator	&		1300460	0					
ANR	1300687	Identifier	mpt		1300460	1					
ANR	1300688	Argument	true		1300460	7					
ANR	1300689	Identifier	true		1300460	0					
ANR	1300690	IfStatement	if ( code < 0 )		1300460	2					
ANR	1300691	Condition	code < 0	2393:12:99099:99106	1300460	0	True				
ANR	1300692	RelationalExpression	code < 0		1300460	0		<			
ANR	1300693	Identifier	code		1300460	0					
ANR	1300694	PrimaryExpression	0		1300460	1					
ANR	1300695	ReturnStatement	return code ;	2394:12:99121:99132	1300460	1	True				
ANR	1300696	Identifier	code		1300460	0					
ANR	1300697	IfStatement	if ( code == 0 )		1300460	3					
ANR	1300698	Condition	code == 0	2395:12:99146:99154	1300460	0	True				
ANR	1300699	EqualityExpression	code == 0		1300460	0		==			
ANR	1300700	Identifier	code		1300460	0					
ANR	1300701	PrimaryExpression	0		1300460	1					
ANR	1300702	CompoundStatement		33:23:1104:1104	1300460	1					
ANR	1300703	ExpressionStatement	"ASSIGN_POINT ( & join_points [ 0 ] , mpt )"	2396:12:99171:99205	1300460	0	True				
ANR	1300704	CallExpression	"ASSIGN_POINT ( & join_points [ 0 ] , mpt )"		1300460	0					
ANR	1300705	Callee	ASSIGN_POINT		1300460	0					
ANR	1300706	Identifier	ASSIGN_POINT		1300460	0					
ANR	1300707	ArgumentList	& join_points [ 0 ]		1300460	1					
ANR	1300708	Argument	& join_points [ 0 ]		1300460	0					
ANR	1300709	UnaryOperationExpression	& join_points [ 0 ]		1300460	0					
ANR	1300710	UnaryOperator	&		1300460	0					
ANR	1300711	ArrayIndexing	join_points [ 0 ]		1300460	1					
ANR	1300712	Identifier	join_points		1300460	0					
ANR	1300713	PrimaryExpression	0		1300460	1					
ANR	1300714	Argument	mpt		1300460	1					
ANR	1300715	Identifier	mpt		1300460	0					
ANR	1300716	ExpressionStatement	"ASSIGN_POINT ( & join_points [ 1 ] , nplp -> o . ce )"	2397:12:99219:99260	1300460	1	True				
ANR	1300717	CallExpression	"ASSIGN_POINT ( & join_points [ 1 ] , nplp -> o . ce )"		1300460	0					
ANR	1300718	Callee	ASSIGN_POINT		1300460	0					
ANR	1300719	Identifier	ASSIGN_POINT		1300460	0					
ANR	1300720	ArgumentList	& join_points [ 1 ]		1300460	1					
ANR	1300721	Argument	& join_points [ 1 ]		1300460	0					
ANR	1300722	UnaryOperationExpression	& join_points [ 1 ]		1300460	0					
ANR	1300723	UnaryOperator	&		1300460	0					
ANR	1300724	ArrayIndexing	join_points [ 1 ]		1300460	1					
ANR	1300725	Identifier	join_points		1300460	0					
ANR	1300726	PrimaryExpression	1		1300460	1					
ANR	1300727	Argument	nplp -> o . ce		1300460	1					
ANR	1300728	MemberAccess	nplp -> o . ce		1300460	0					
ANR	1300729	PtrMemberAccess	nplp -> o		1300460	0					
ANR	1300730	Identifier	nplp		1300460	0					
ANR	1300731	Identifier	o		1300460	1					
ANR	1300732	Identifier	ce		1300460	1					
ANR	1300733	ReturnStatement	return 2 ;	2398:12:99274:99282	1300460	2	True				
ANR	1300734	PrimaryExpression	2		1300460	0					
ANR	1300735	ReturnStatement	return 1 ;	2401:4:99304:99312	1300460	3	True				
ANR	1300736	PrimaryExpression	1		1300460	0					
ANR	1300737	ReturnType	static int		1300460	1					
ANR	1300738	Identifier	line_join_points_fast_ccw		1300460	2					
ANR	1300739	ParameterList	"const gx_line_params * pgs_lp , pl_ptr plp , pl_ptr nplp , gs_fixed_point * join_points , const gs_matrix * pmat , gs_line_join join"		1300460	3					
ANR	1300740	Parameter	const gx_line_params * pgs_lp	2358:26:97819:97847	1300460	0	True				
ANR	1300741	ParameterType	const gx_line_params *		1300460	0					
ANR	1300742	Identifier	pgs_lp		1300460	1					
ANR	1300743	Parameter	pl_ptr plp	2359:26:97876:97885	1300460	1	True				
ANR	1300744	ParameterType	pl_ptr		1300460	0					
ANR	1300745	Identifier	plp		1300460	1					
ANR	1300746	Parameter	pl_ptr nplp	2359:38:97888:97898	1300460	2	True				
ANR	1300747	ParameterType	pl_ptr		1300460	0					
ANR	1300748	Identifier	nplp		1300460	1					
ANR	1300749	Parameter	gs_fixed_point * join_points	2360:26:97927:97954	1300460	3	True				
ANR	1300750	ParameterType	gs_fixed_point *		1300460	0					
ANR	1300751	Identifier	join_points		1300460	1					
ANR	1300752	Parameter	const gs_matrix * pmat	2361:26:97983:98004	1300460	4	True				
ANR	1300753	ParameterType	const gs_matrix *		1300460	0					
ANR	1300754	Identifier	pmat		1300460	1					
ANR	1300755	Parameter	gs_line_join join	2362:26:98033:98049	1300460	5	True				
ANR	1300756	ParameterType	gs_line_join		1300460	0					
ANR	1300757	Identifier	join		1300460	1					
ANR	1300758	CFGEntryNode	ENTRY		1300460		True				
ANR	1300759	CFGExitNode	EXIT		1300460		True				
ANR	1300760	Symbol	code		1300460						
ANR	1300761	Symbol	pmat		1300460						
ANR	1300762	Symbol	& nplp -> o		1300460						
ANR	1300763	Symbol	nplp -> o . p . x		1300460						
ANR	1300764	Symbol	nplp -> o . p . y		1300460						
ANR	1300765	Symbol	tp . y		1300460						
ANR	1300766	Symbol	tp . x		1300460						
ANR	1300767	Symbol	& plp -> e		1300460						
ANR	1300768	Symbol	& mpt		1300460						
ANR	1300769	Symbol	plp -> e . co . y		1300460						
ANR	1300770	Symbol	plp -> e . co . x		1300460						
ANR	1300771	Symbol	plp -> e . co		1300460						
ANR	1300772	Symbol	nplp -> o . ce . y		1300460						
ANR	1300773	Symbol	nplp -> o . ce . x		1300460						
ANR	1300774	Symbol	nplp -> o		1300460						
ANR	1300775	Symbol	join		1300460						
ANR	1300776	Symbol	* nplp		1300460						
ANR	1300777	Symbol	* plp		1300460						
ANR	1300778	Symbol	join_points		1300460						
ANR	1300779	Symbol	gs_join_miter		1300460						
ANR	1300780	Symbol	check_miter		1300460						
ANR	1300781	Symbol	& nplp -> o . ce		1300460						
ANR	1300782	Symbol	mpt		1300460						
ANR	1300783	Symbol	fixed2long		1300460						
ANR	1300784	Symbol	plp		1300460						
ANR	1300785	Symbol	nplp		1300460						
ANR	1300786	Symbol	nplp -> o . p		1300460						
ANR	1300787	Symbol	gs_join_triangle		1300460						
ANR	1300788	Symbol	& plp -> e . co		1300460						
ANR	1300789	Symbol	pgs_lp		1300460						
ANR	1300790	Symbol	true		1300460						
ANR	1300791	Symbol	plp -> e		1300460						
ANR	1300792	Symbol	tp		1300460						
ANR	1300793	Symbol	nplp -> o . ce		1300460						
ANR	1300794	Function	compute_caps	2407:0:99486:100418							
ANR	1300795	FunctionDef	compute_caps (pl_ptr plp)		1300794	0					
ANR	1300796	CompoundStatement		2409:0:99523:100418	1300794	0					
ANR	1300797	IdentifierDeclStatement	fixed wx2 = plp -> width . x ;	2410:4:99529:99553	1300794	0	True				
ANR	1300798	IdentifierDecl	wx2 = plp -> width . x		1300794	0					
ANR	1300799	IdentifierDeclType	fixed		1300794	0					
ANR	1300800	Identifier	wx2		1300794	1					
ANR	1300801	AssignmentExpression	wx2 = plp -> width . x		1300794	2		=			
ANR	1300802	Identifier	wx2		1300794	0					
ANR	1300803	MemberAccess	plp -> width . x		1300794	1					
ANR	1300804	PtrMemberAccess	plp -> width		1300794	0					
ANR	1300805	Identifier	plp		1300794	0					
ANR	1300806	Identifier	width		1300794	1					
ANR	1300807	Identifier	x		1300794	1					
ANR	1300808	IdentifierDeclStatement	fixed wy2 = plp -> width . y ;	2411:4:99559:99583	1300794	1	True				
ANR	1300809	IdentifierDecl	wy2 = plp -> width . y		1300794	0					
ANR	1300810	IdentifierDeclType	fixed		1300794	0					
ANR	1300811	Identifier	wy2		1300794	1					
ANR	1300812	AssignmentExpression	wy2 = plp -> width . y		1300794	2		=			
ANR	1300813	Identifier	wy2		1300794	0					
ANR	1300814	MemberAccess	plp -> width . y		1300794	1					
ANR	1300815	PtrMemberAccess	plp -> width		1300794	0					
ANR	1300816	Identifier	plp		1300794	0					
ANR	1300817	Identifier	width		1300794	1					
ANR	1300818	Identifier	y		1300794	1					
ANR	1300819	ExpressionStatement	"plp -> o . co . x = plp -> o . p . x + wx2 , plp -> o . co . y = plp -> o . p . y + wy2"	2413:4:99590:99652	1300794	2	True				
ANR	1300820	Expression	"plp -> o . co . x = plp -> o . p . x + wx2 , plp -> o . co . y = plp -> o . p . y + wy2"		1300794	0					
ANR	1300821	AssignmentExpression	plp -> o . co . x = plp -> o . p . x + wx2		1300794	0		=			
ANR	1300822	MemberAccess	plp -> o . co . x		1300794	0					
ANR	1300823	MemberAccess	plp -> o . co		1300794	0					
ANR	1300824	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300825	Identifier	plp		1300794	0					
ANR	1300826	Identifier	o		1300794	1					
ANR	1300827	Identifier	co		1300794	1					
ANR	1300828	Identifier	x		1300794	1					
ANR	1300829	AdditiveExpression	plp -> o . p . x + wx2		1300794	1		+			
ANR	1300830	MemberAccess	plp -> o . p . x		1300794	0					
ANR	1300831	MemberAccess	plp -> o . p		1300794	0					
ANR	1300832	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300833	Identifier	plp		1300794	0					
ANR	1300834	Identifier	o		1300794	1					
ANR	1300835	Identifier	p		1300794	1					
ANR	1300836	Identifier	x		1300794	1					
ANR	1300837	Identifier	wx2		1300794	1					
ANR	1300838	AssignmentExpression	plp -> o . co . y = plp -> o . p . y + wy2		1300794	1		=			
ANR	1300839	MemberAccess	plp -> o . co . y		1300794	0					
ANR	1300840	MemberAccess	plp -> o . co		1300794	0					
ANR	1300841	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300842	Identifier	plp		1300794	0					
ANR	1300843	Identifier	o		1300794	1					
ANR	1300844	Identifier	co		1300794	1					
ANR	1300845	Identifier	y		1300794	1					
ANR	1300846	AdditiveExpression	plp -> o . p . y + wy2		1300794	1		+			
ANR	1300847	MemberAccess	plp -> o . p . y		1300794	0					
ANR	1300848	MemberAccess	plp -> o . p		1300794	0					
ANR	1300849	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300850	Identifier	plp		1300794	0					
ANR	1300851	Identifier	o		1300794	1					
ANR	1300852	Identifier	p		1300794	1					
ANR	1300853	Identifier	y		1300794	1					
ANR	1300854	Identifier	wy2		1300794	1					
ANR	1300855	ExpressionStatement	"plp -> o . cdelta . x = - plp -> e . cdelta . x , plp -> o . cdelta . y = - plp -> e . cdelta . y"	2414:4:99658:99736	1300794	3	True				
ANR	1300856	Expression	"plp -> o . cdelta . x = - plp -> e . cdelta . x , plp -> o . cdelta . y = - plp -> e . cdelta . y"		1300794	0					
ANR	1300857	AssignmentExpression	plp -> o . cdelta . x = - plp -> e . cdelta . x		1300794	0		=			
ANR	1300858	MemberAccess	plp -> o . cdelta . x		1300794	0					
ANR	1300859	MemberAccess	plp -> o . cdelta		1300794	0					
ANR	1300860	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300861	Identifier	plp		1300794	0					
ANR	1300862	Identifier	o		1300794	1					
ANR	1300863	Identifier	cdelta		1300794	1					
ANR	1300864	Identifier	x		1300794	1					
ANR	1300865	UnaryOperationExpression	- plp -> e . cdelta . x		1300794	1					
ANR	1300866	UnaryOperator	-		1300794	0					
ANR	1300867	MemberAccess	plp -> e . cdelta . x		1300794	1					
ANR	1300868	MemberAccess	plp -> e . cdelta		1300794	0					
ANR	1300869	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300870	Identifier	plp		1300794	0					
ANR	1300871	Identifier	e		1300794	1					
ANR	1300872	Identifier	cdelta		1300794	1					
ANR	1300873	Identifier	x		1300794	1					
ANR	1300874	AssignmentExpression	plp -> o . cdelta . y = - plp -> e . cdelta . y		1300794	1		=			
ANR	1300875	MemberAccess	plp -> o . cdelta . y		1300794	0					
ANR	1300876	MemberAccess	plp -> o . cdelta		1300794	0					
ANR	1300877	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300878	Identifier	plp		1300794	0					
ANR	1300879	Identifier	o		1300794	1					
ANR	1300880	Identifier	cdelta		1300794	1					
ANR	1300881	Identifier	y		1300794	1					
ANR	1300882	UnaryOperationExpression	- plp -> e . cdelta . y		1300794	1					
ANR	1300883	UnaryOperator	-		1300794	0					
ANR	1300884	MemberAccess	plp -> e . cdelta . y		1300794	1					
ANR	1300885	MemberAccess	plp -> e . cdelta		1300794	0					
ANR	1300886	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300887	Identifier	plp		1300794	0					
ANR	1300888	Identifier	e		1300794	1					
ANR	1300889	Identifier	cdelta		1300794	1					
ANR	1300890	Identifier	y		1300794	1					
ANR	1300891	ExpressionStatement	"plp -> o . ce . x = plp -> o . p . x - wx2 , plp -> o . ce . y = plp -> o . p . y - wy2"	2416:4:99742:99804	1300794	4	True				
ANR	1300892	Expression	"plp -> o . ce . x = plp -> o . p . x - wx2 , plp -> o . ce . y = plp -> o . p . y - wy2"		1300794	0					
ANR	1300893	AssignmentExpression	plp -> o . ce . x = plp -> o . p . x - wx2		1300794	0		=			
ANR	1300894	MemberAccess	plp -> o . ce . x		1300794	0					
ANR	1300895	MemberAccess	plp -> o . ce		1300794	0					
ANR	1300896	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300897	Identifier	plp		1300794	0					
ANR	1300898	Identifier	o		1300794	1					
ANR	1300899	Identifier	ce		1300794	1					
ANR	1300900	Identifier	x		1300794	1					
ANR	1300901	AdditiveExpression	plp -> o . p . x - wx2		1300794	1		-			
ANR	1300902	MemberAccess	plp -> o . p . x		1300794	0					
ANR	1300903	MemberAccess	plp -> o . p		1300794	0					
ANR	1300904	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300905	Identifier	plp		1300794	0					
ANR	1300906	Identifier	o		1300794	1					
ANR	1300907	Identifier	p		1300794	1					
ANR	1300908	Identifier	x		1300794	1					
ANR	1300909	Identifier	wx2		1300794	1					
ANR	1300910	AssignmentExpression	plp -> o . ce . y = plp -> o . p . y - wy2		1300794	1		=			
ANR	1300911	MemberAccess	plp -> o . ce . y		1300794	0					
ANR	1300912	MemberAccess	plp -> o . ce		1300794	0					
ANR	1300913	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300914	Identifier	plp		1300794	0					
ANR	1300915	Identifier	o		1300794	1					
ANR	1300916	Identifier	ce		1300794	1					
ANR	1300917	Identifier	y		1300794	1					
ANR	1300918	AdditiveExpression	plp -> o . p . y - wy2		1300794	1		-			
ANR	1300919	MemberAccess	plp -> o . p . y		1300794	0					
ANR	1300920	MemberAccess	plp -> o . p		1300794	0					
ANR	1300921	PtrMemberAccess	plp -> o		1300794	0					
ANR	1300922	Identifier	plp		1300794	0					
ANR	1300923	Identifier	o		1300794	1					
ANR	1300924	Identifier	p		1300794	1					
ANR	1300925	Identifier	y		1300794	1					
ANR	1300926	Identifier	wy2		1300794	1					
ANR	1300927	ExpressionStatement	"plp -> e . co . x = plp -> e . p . x - wx2 , plp -> e . co . y = plp -> e . p . y - wy2"	2417:4:99810:99872	1300794	5	True				
ANR	1300928	Expression	"plp -> e . co . x = plp -> e . p . x - wx2 , plp -> e . co . y = plp -> e . p . y - wy2"		1300794	0					
ANR	1300929	AssignmentExpression	plp -> e . co . x = plp -> e . p . x - wx2		1300794	0		=			
ANR	1300930	MemberAccess	plp -> e . co . x		1300794	0					
ANR	1300931	MemberAccess	plp -> e . co		1300794	0					
ANR	1300932	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300933	Identifier	plp		1300794	0					
ANR	1300934	Identifier	e		1300794	1					
ANR	1300935	Identifier	co		1300794	1					
ANR	1300936	Identifier	x		1300794	1					
ANR	1300937	AdditiveExpression	plp -> e . p . x - wx2		1300794	1		-			
ANR	1300938	MemberAccess	plp -> e . p . x		1300794	0					
ANR	1300939	MemberAccess	plp -> e . p		1300794	0					
ANR	1300940	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300941	Identifier	plp		1300794	0					
ANR	1300942	Identifier	e		1300794	1					
ANR	1300943	Identifier	p		1300794	1					
ANR	1300944	Identifier	x		1300794	1					
ANR	1300945	Identifier	wx2		1300794	1					
ANR	1300946	AssignmentExpression	plp -> e . co . y = plp -> e . p . y - wy2		1300794	1		=			
ANR	1300947	MemberAccess	plp -> e . co . y		1300794	0					
ANR	1300948	MemberAccess	plp -> e . co		1300794	0					
ANR	1300949	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300950	Identifier	plp		1300794	0					
ANR	1300951	Identifier	e		1300794	1					
ANR	1300952	Identifier	co		1300794	1					
ANR	1300953	Identifier	y		1300794	1					
ANR	1300954	AdditiveExpression	plp -> e . p . y - wy2		1300794	1		-			
ANR	1300955	MemberAccess	plp -> e . p . y		1300794	0					
ANR	1300956	MemberAccess	plp -> e . p		1300794	0					
ANR	1300957	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300958	Identifier	plp		1300794	0					
ANR	1300959	Identifier	e		1300794	1					
ANR	1300960	Identifier	p		1300794	1					
ANR	1300961	Identifier	y		1300794	1					
ANR	1300962	Identifier	wy2		1300794	1					
ANR	1300963	ExpressionStatement	"plp -> e . ce . x = plp -> e . p . x + wx2 , plp -> e . ce . y = plp -> e . p . y + wy2"	2418:4:99878:99940	1300794	6	True				
ANR	1300964	Expression	"plp -> e . ce . x = plp -> e . p . x + wx2 , plp -> e . ce . y = plp -> e . p . y + wy2"		1300794	0					
ANR	1300965	AssignmentExpression	plp -> e . ce . x = plp -> e . p . x + wx2		1300794	0		=			
ANR	1300966	MemberAccess	plp -> e . ce . x		1300794	0					
ANR	1300967	MemberAccess	plp -> e . ce		1300794	0					
ANR	1300968	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300969	Identifier	plp		1300794	0					
ANR	1300970	Identifier	e		1300794	1					
ANR	1300971	Identifier	ce		1300794	1					
ANR	1300972	Identifier	x		1300794	1					
ANR	1300973	AdditiveExpression	plp -> e . p . x + wx2		1300794	1		+			
ANR	1300974	MemberAccess	plp -> e . p . x		1300794	0					
ANR	1300975	MemberAccess	plp -> e . p		1300794	0					
ANR	1300976	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300977	Identifier	plp		1300794	0					
ANR	1300978	Identifier	e		1300794	1					
ANR	1300979	Identifier	p		1300794	1					
ANR	1300980	Identifier	x		1300794	1					
ANR	1300981	Identifier	wx2		1300794	1					
ANR	1300982	AssignmentExpression	plp -> e . ce . y = plp -> e . p . y + wy2		1300794	1		=			
ANR	1300983	MemberAccess	plp -> e . ce . y		1300794	0					
ANR	1300984	MemberAccess	plp -> e . ce		1300794	0					
ANR	1300985	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300986	Identifier	plp		1300794	0					
ANR	1300987	Identifier	e		1300794	1					
ANR	1300988	Identifier	ce		1300794	1					
ANR	1300989	Identifier	y		1300794	1					
ANR	1300990	AdditiveExpression	plp -> e . p . y + wy2		1300794	1		+			
ANR	1300991	MemberAccess	plp -> e . p . y		1300794	0					
ANR	1300992	MemberAccess	plp -> e . p		1300794	0					
ANR	1300993	PtrMemberAccess	plp -> e		1300794	0					
ANR	1300994	Identifier	plp		1300794	0					
ANR	1300995	Identifier	e		1300794	1					
ANR	1300996	Identifier	p		1300794	1					
ANR	1300997	Identifier	y		1300794	1					
ANR	1300998	Identifier	wy2		1300794	1					
ANR	1300999	IfStatement	if ( gs_debug_c ( 'O' ) )		1300794	7					
ANR	1301000	Condition	gs_debug_c ( 'O' )	2420:8:99996:100010	1300794	0	True				
ANR	1301001	CallExpression	gs_debug_c ( 'O' )		1300794	0					
ANR	1301002	Callee	gs_debug_c		1300794	0					
ANR	1301003	Identifier	gs_debug_c		1300794	0					
ANR	1301004	ArgumentList	'O'		1300794	1					
ANR	1301005	Argument	'O'		1300794	0					
ANR	1301006	PrimaryExpression	'O'		1300794	0					
ANR	1301007	CompoundStatement		12:25:489:489	1300794	1					
ANR	1301008	ExpressionStatement	"dlprintf4 ( ""[o]Stroke o=(%f,%f) e=(%f,%f)\\n"" , fixed2float ( plp -> o . p . x ) , fixed2float ( plp -> o . p . y ) , fixed2float ( plp -> e . p . x ) , fixed2float ( plp -> e . p . y ) )"	2421:8:100023:100203	1300794	0	True				
ANR	1301009	CallExpression	"dlprintf4 ( ""[o]Stroke o=(%f,%f) e=(%f,%f)\\n"" , fixed2float ( plp -> o . p . x ) , fixed2float ( plp -> o . p . y ) , fixed2float ( plp -> e . p . x ) , fixed2float ( plp -> e . p . y ) )"		1300794	0					
ANR	1301010	Callee	dlprintf4		1300794	0					
ANR	1301011	Identifier	dlprintf4		1300794	0					
ANR	1301012	ArgumentList	"""[o]Stroke o=(%f,%f) e=(%f,%f)\\n"""		1300794	1					
ANR	1301013	Argument	"""[o]Stroke o=(%f,%f) e=(%f,%f)\\n"""		1300794	0					
ANR	1301014	PrimaryExpression	"""[o]Stroke o=(%f,%f) e=(%f,%f)\\n"""		1300794	0					
ANR	1301015	Argument	fixed2float ( plp -> o . p . x )		1300794	1					
ANR	1301016	CallExpression	fixed2float ( plp -> o . p . x )		1300794	0					
ANR	1301017	Callee	fixed2float		1300794	0					
ANR	1301018	Identifier	fixed2float		1300794	0					
ANR	1301019	ArgumentList	plp -> o . p . x		1300794	1					
ANR	1301020	Argument	plp -> o . p . x		1300794	0					
ANR	1301021	MemberAccess	plp -> o . p . x		1300794	0					
ANR	1301022	MemberAccess	plp -> o . p		1300794	0					
ANR	1301023	PtrMemberAccess	plp -> o		1300794	0					
ANR	1301024	Identifier	plp		1300794	0					
ANR	1301025	Identifier	o		1300794	1					
ANR	1301026	Identifier	p		1300794	1					
ANR	1301027	Identifier	x		1300794	1					
ANR	1301028	Argument	fixed2float ( plp -> o . p . y )		1300794	2					
ANR	1301029	CallExpression	fixed2float ( plp -> o . p . y )		1300794	0					
ANR	1301030	Callee	fixed2float		1300794	0					
ANR	1301031	Identifier	fixed2float		1300794	0					
ANR	1301032	ArgumentList	plp -> o . p . y		1300794	1					
ANR	1301033	Argument	plp -> o . p . y		1300794	0					
ANR	1301034	MemberAccess	plp -> o . p . y		1300794	0					
ANR	1301035	MemberAccess	plp -> o . p		1300794	0					
ANR	1301036	PtrMemberAccess	plp -> o		1300794	0					
ANR	1301037	Identifier	plp		1300794	0					
ANR	1301038	Identifier	o		1300794	1					
ANR	1301039	Identifier	p		1300794	1					
ANR	1301040	Identifier	y		1300794	1					
ANR	1301041	Argument	fixed2float ( plp -> e . p . x )		1300794	3					
ANR	1301042	CallExpression	fixed2float ( plp -> e . p . x )		1300794	0					
ANR	1301043	Callee	fixed2float		1300794	0					
ANR	1301044	Identifier	fixed2float		1300794	0					
ANR	1301045	ArgumentList	plp -> e . p . x		1300794	1					
ANR	1301046	Argument	plp -> e . p . x		1300794	0					
ANR	1301047	MemberAccess	plp -> e . p . x		1300794	0					
ANR	1301048	MemberAccess	plp -> e . p		1300794	0					
ANR	1301049	PtrMemberAccess	plp -> e		1300794	0					
ANR	1301050	Identifier	plp		1300794	0					
ANR	1301051	Identifier	e		1300794	1					
ANR	1301052	Identifier	p		1300794	1					
ANR	1301053	Identifier	x		1300794	1					
ANR	1301054	Argument	fixed2float ( plp -> e . p . y )		1300794	4					
ANR	1301055	CallExpression	fixed2float ( plp -> e . p . y )		1300794	0					
ANR	1301056	Callee	fixed2float		1300794	0					
ANR	1301057	Identifier	fixed2float		1300794	0					
ANR	1301058	ArgumentList	plp -> e . p . y		1300794	1					
ANR	1301059	Argument	plp -> e . p . y		1300794	0					
ANR	1301060	MemberAccess	plp -> e . p . y		1300794	0					
ANR	1301061	MemberAccess	plp -> e . p		1300794	0					
ANR	1301062	PtrMemberAccess	plp -> e		1300794	0					
ANR	1301063	Identifier	plp		1300794	0					
ANR	1301064	Identifier	e		1300794	1					
ANR	1301065	Identifier	p		1300794	1					
ANR	1301066	Identifier	y		1300794	1					
ANR	1301067	ExpressionStatement	"dlprintf4 ( ""\\twxy=(%f,%f) lxy=(%f,%f)\\n"" , fixed2float ( wx2 ) , fixed2float ( wy2 ) , fixed2float ( plp -> e . cdelta . x ) , fixed2float ( plp -> e . cdelta . y ) )"	2424:8:100213:100403	1300794	1	True				
ANR	1301068	CallExpression	"dlprintf4 ( ""\\twxy=(%f,%f) lxy=(%f,%f)\\n"" , fixed2float ( wx2 ) , fixed2float ( wy2 ) , fixed2float ( plp -> e . cdelta . x ) , fixed2float ( plp -> e . cdelta . y ) )"		1300794	0					
ANR	1301069	Callee	dlprintf4		1300794	0					
ANR	1301070	Identifier	dlprintf4		1300794	0					
ANR	1301071	ArgumentList	"""\\twxy=(%f,%f) lxy=(%f,%f)\\n"""		1300794	1					
ANR	1301072	Argument	"""\\twxy=(%f,%f) lxy=(%f,%f)\\n"""		1300794	0					
ANR	1301073	PrimaryExpression	"""\\twxy=(%f,%f) lxy=(%f,%f)\\n"""		1300794	0					
ANR	1301074	Argument	fixed2float ( wx2 )		1300794	1					
ANR	1301075	CallExpression	fixed2float ( wx2 )		1300794	0					
ANR	1301076	Callee	fixed2float		1300794	0					
ANR	1301077	Identifier	fixed2float		1300794	0					
ANR	1301078	ArgumentList	wx2		1300794	1					
ANR	1301079	Argument	wx2		1300794	0					
ANR	1301080	Identifier	wx2		1300794	0					
ANR	1301081	Argument	fixed2float ( wy2 )		1300794	2					
ANR	1301082	CallExpression	fixed2float ( wy2 )		1300794	0					
ANR	1301083	Callee	fixed2float		1300794	0					
ANR	1301084	Identifier	fixed2float		1300794	0					
ANR	1301085	ArgumentList	wy2		1300794	1					
ANR	1301086	Argument	wy2		1300794	0					
ANR	1301087	Identifier	wy2		1300794	0					
ANR	1301088	Argument	fixed2float ( plp -> e . cdelta . x )		1300794	3					
ANR	1301089	CallExpression	fixed2float ( plp -> e . cdelta . x )		1300794	0					
ANR	1301090	Callee	fixed2float		1300794	0					
ANR	1301091	Identifier	fixed2float		1300794	0					
ANR	1301092	ArgumentList	plp -> e . cdelta . x		1300794	1					
ANR	1301093	Argument	plp -> e . cdelta . x		1300794	0					
ANR	1301094	MemberAccess	plp -> e . cdelta . x		1300794	0					
ANR	1301095	MemberAccess	plp -> e . cdelta		1300794	0					
ANR	1301096	PtrMemberAccess	plp -> e		1300794	0					
ANR	1301097	Identifier	plp		1300794	0					
ANR	1301098	Identifier	e		1300794	1					
ANR	1301099	Identifier	cdelta		1300794	1					
ANR	1301100	Identifier	x		1300794	1					
ANR	1301101	Argument	fixed2float ( plp -> e . cdelta . y )		1300794	4					
ANR	1301102	CallExpression	fixed2float ( plp -> e . cdelta . y )		1300794	0					
ANR	1301103	Callee	fixed2float		1300794	0					
ANR	1301104	Identifier	fixed2float		1300794	0					
ANR	1301105	ArgumentList	plp -> e . cdelta . y		1300794	1					
ANR	1301106	Argument	plp -> e . cdelta . y		1300794	0					
ANR	1301107	MemberAccess	plp -> e . cdelta . y		1300794	0					
ANR	1301108	MemberAccess	plp -> e . cdelta		1300794	0					
ANR	1301109	PtrMemberAccess	plp -> e		1300794	0					
ANR	1301110	Identifier	plp		1300794	0					
ANR	1301111	Identifier	e		1300794	1					
ANR	1301112	Identifier	cdelta		1300794	1					
ANR	1301113	Identifier	y		1300794	1					
ANR	1301114	ReturnType	static void		1300794	1					
ANR	1301115	Identifier	compute_caps		1300794	2					
ANR	1301116	ParameterList	pl_ptr plp		1300794	3					
ANR	1301117	Parameter	pl_ptr plp	2408:13:99511:99520	1300794	0	True				
ANR	1301118	ParameterType	pl_ptr		1300794	0					
ANR	1301119	Identifier	plp		1300794	1					
ANR	1301120	CFGEntryNode	ENTRY		1300794		True				
ANR	1301121	CFGExitNode	EXIT		1300794		True				
ANR	1301122	Symbol	plp -> width . y		1300794						
ANR	1301123	Symbol	plp -> width . x		1300794						
ANR	1301124	Symbol	plp -> o . ce . x		1300794						
ANR	1301125	Symbol	plp -> o . ce . y		1300794						
ANR	1301126	Symbol	plp -> e . p . y		1300794						
ANR	1301127	Symbol	plp -> o . co		1300794						
ANR	1301128	Symbol	plp -> e . p . x		1300794						
ANR	1301129	Symbol	plp -> o . p		1300794						
ANR	1301130	Symbol	plp -> o . co . y		1300794						
ANR	1301131	Symbol	plp -> o . co . x		1300794						
ANR	1301132	Symbol	plp -> width		1300794						
ANR	1301133	Symbol	wy2		1300794						
ANR	1301134	Symbol	plp -> o . ce		1300794						
ANR	1301135	Symbol	plp -> o . cdelta . x		1300794						
ANR	1301136	Symbol	plp -> e . co . y		1300794						
ANR	1301137	Symbol	plp -> e . co . x		1300794						
ANR	1301138	Symbol	plp -> e . co		1300794						
ANR	1301139	Symbol	plp -> o . cdelta . y		1300794						
ANR	1301140	Symbol	plp -> e . ce		1300794						
ANR	1301141	Symbol	gs_debug_c		1300794						
ANR	1301142	Symbol	* plp		1300794						
ANR	1301143	Symbol	plp -> e . cdelta . x		1300794						
ANR	1301144	Symbol	plp -> o . cdelta		1300794						
ANR	1301145	Symbol	fixed2float		1300794						
ANR	1301146	Symbol	plp -> e . cdelta . y		1300794						
ANR	1301147	Symbol	plp -> o . p . y		1300794						
ANR	1301148	Symbol	plp -> o . p . x		1300794						
ANR	1301149	Symbol	wx2		1300794						
ANR	1301150	Symbol	plp -> e . ce . x		1300794						
ANR	1301151	Symbol	plp -> e . p		1300794						
ANR	1301152	Symbol	plp -> e . ce . y		1300794						
ANR	1301153	Symbol	plp		1300794						
ANR	1301154	Symbol	plp -> o		1300794						
ANR	1301155	Symbol	plp -> e		1300794						
ANR	1301156	Symbol	plp -> e . cdelta		1300794						
ANR	1301157	Function	add_round_cap	2443:0:100700:101730							
ANR	1301158	FunctionDef	"add_round_cap (gx_path * ppath , const_ep_ptr endp)"		1301157	0					
ANR	1301159	CompoundStatement		2445:0:100761:101730	1301157	0					
ANR	1301160	IdentifierDeclStatement	int code ;	2446:4:100767:100775	1301157	0	True				
ANR	1301161	IdentifierDecl	code		1301157	0					
ANR	1301162	IdentifierDeclType	int		1301157	0					
ANR	1301163	Identifier	code		1301157	1					
ANR	1301164	IfStatement	"if ( ( code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , px - cdx , py - cdy , xe - cdx , ye - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xo , yo , xo - cdx , yo - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0 )"		1301157	1					
ANR	1301165	Condition	"( code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , px - cdx , py - cdy , xe - cdx , ye - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xo , yo , xo - cdx , yo - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"	2452:8:100909:101683	1301157	0	True				
ANR	1301166	OrExpression	"( code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , px - cdx , py - cdy , xe - cdx , ye - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xo , yo , xo - cdx , yo - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"		1301157	0		||			
ANR	1301167	RelationalExpression	"( code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction ) ) < 0"		1301157	0		<			
ANR	1301168	AssignmentExpression	"code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction )"		1301157	0		=			
ANR	1301169	Identifier	code		1301157	0					
ANR	1301170	CallExpression	"gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction )"		1301157	1					
ANR	1301171	Callee	gx_path_add_partial_arc		1301157	0					
ANR	1301172	Identifier	gx_path_add_partial_arc		1301157	0					
ANR	1301173	ArgumentList	ppath		1301157	1					
ANR	1301174	Argument	ppath		1301157	0					
ANR	1301175	Identifier	ppath		1301157	0					
ANR	1301176	Argument	px + cdx		1301157	1					
ANR	1301177	AdditiveExpression	px + cdx		1301157	0		+			
ANR	1301178	Identifier	px		1301157	0					
ANR	1301179	Identifier	cdx		1301157	1					
ANR	1301180	Argument	py + cdy		1301157	2					
ANR	1301181	AdditiveExpression	py + cdy		1301157	0		+			
ANR	1301182	Identifier	py		1301157	0					
ANR	1301183	Identifier	cdy		1301157	1					
ANR	1301184	Argument	xo + cdx		1301157	3					
ANR	1301185	AdditiveExpression	xo + cdx		1301157	0		+			
ANR	1301186	Identifier	xo		1301157	0					
ANR	1301187	Identifier	cdx		1301157	1					
ANR	1301188	Argument	yo + cdy		1301157	4					
ANR	1301189	AdditiveExpression	yo + cdy		1301157	0		+			
ANR	1301190	Identifier	yo		1301157	0					
ANR	1301191	Identifier	cdy		1301157	1					
ANR	1301192	Argument	quarter_arc_fraction		1301157	5					
ANR	1301193	Identifier	quarter_arc_fraction		1301157	0					
ANR	1301194	PrimaryExpression	0		1301157	1					
ANR	1301195	OrExpression	"( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , px - cdx , py - cdy , xe - cdx , ye - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xo , yo , xo - cdx , yo - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"		1301157	1		||			
ANR	1301196	RelationalExpression	"( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0"		1301157	0		<			
ANR	1301197	AssignmentExpression	"code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction )"		1301157	0		=			
ANR	1301198	Identifier	code		1301157	0					
ANR	1301199	CallExpression	"gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction )"		1301157	1					
ANR	1301200	Callee	gx_path_add_partial_arc		1301157	0					
ANR	1301201	Identifier	gx_path_add_partial_arc		1301157	0					
ANR	1301202	ArgumentList	ppath		1301157	1					
ANR	1301203	Argument	ppath		1301157	0					
ANR	1301204	Identifier	ppath		1301157	0					
ANR	1301205	Argument	xe		1301157	1					
ANR	1301206	Identifier	xe		1301157	0					
ANR	1301207	Argument	ye		1301157	2					
ANR	1301208	Identifier	ye		1301157	0					
ANR	1301209	Argument	xe + cdx		1301157	3					
ANR	1301210	AdditiveExpression	xe + cdx		1301157	0		+			
ANR	1301211	Identifier	xe		1301157	0					
ANR	1301212	Identifier	cdx		1301157	1					
ANR	1301213	Argument	ye + cdy		1301157	4					
ANR	1301214	AdditiveExpression	ye + cdy		1301157	0		+			
ANR	1301215	Identifier	ye		1301157	0					
ANR	1301216	Identifier	cdy		1301157	1					
ANR	1301217	Argument	quarter_arc_fraction		1301157	5					
ANR	1301218	Identifier	quarter_arc_fraction		1301157	0					
ANR	1301219	PrimaryExpression	0		1301157	1					
ANR	1301220	OrExpression	"( code = gx_path_add_partial_arc ( ppath , px - cdx , py - cdy , xe - cdx , ye - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xo , yo , xo - cdx , yo - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"		1301157	1		||			
ANR	1301221	RelationalExpression	"( code = gx_path_add_partial_arc ( ppath , px - cdx , py - cdy , xe - cdx , ye - cdy , quarter_arc_fraction ) ) < 0"		1301157	0		<			
ANR	1301222	AssignmentExpression	"code = gx_path_add_partial_arc ( ppath , px - cdx , py - cdy , xe - cdx , ye - cdy , quarter_arc_fraction )"		1301157	0		=			
ANR	1301223	Identifier	code		1301157	0					
ANR	1301224	CallExpression	"gx_path_add_partial_arc ( ppath , px - cdx , py - cdy , xe - cdx , ye - cdy , quarter_arc_fraction )"		1301157	1					
ANR	1301225	Callee	gx_path_add_partial_arc		1301157	0					
ANR	1301226	Identifier	gx_path_add_partial_arc		1301157	0					
ANR	1301227	ArgumentList	ppath		1301157	1					
ANR	1301228	Argument	ppath		1301157	0					
ANR	1301229	Identifier	ppath		1301157	0					
ANR	1301230	Argument	px - cdx		1301157	1					
ANR	1301231	AdditiveExpression	px - cdx		1301157	0		-			
ANR	1301232	Identifier	px		1301157	0					
ANR	1301233	Identifier	cdx		1301157	1					
ANR	1301234	Argument	py - cdy		1301157	2					
ANR	1301235	AdditiveExpression	py - cdy		1301157	0		-			
ANR	1301236	Identifier	py		1301157	0					
ANR	1301237	Identifier	cdy		1301157	1					
ANR	1301238	Argument	xe - cdx		1301157	3					
ANR	1301239	AdditiveExpression	xe - cdx		1301157	0		-			
ANR	1301240	Identifier	xe		1301157	0					
ANR	1301241	Identifier	cdx		1301157	1					
ANR	1301242	Argument	ye - cdy		1301157	4					
ANR	1301243	AdditiveExpression	ye - cdy		1301157	0		-			
ANR	1301244	Identifier	ye		1301157	0					
ANR	1301245	Identifier	cdy		1301157	1					
ANR	1301246	Argument	quarter_arc_fraction		1301157	5					
ANR	1301247	Identifier	quarter_arc_fraction		1301157	0					
ANR	1301248	PrimaryExpression	0		1301157	1					
ANR	1301249	OrExpression	"( code = gx_path_add_partial_arc ( ppath , xo , yo , xo - cdx , yo - cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"		1301157	1		||			
ANR	1301250	RelationalExpression	"( code = gx_path_add_partial_arc ( ppath , xo , yo , xo - cdx , yo - cdy , quarter_arc_fraction ) ) < 0"		1301157	0		<			
ANR	1301251	AssignmentExpression	"code = gx_path_add_partial_arc ( ppath , xo , yo , xo - cdx , yo - cdy , quarter_arc_fraction )"		1301157	0		=			
ANR	1301252	Identifier	code		1301157	0					
ANR	1301253	CallExpression	"gx_path_add_partial_arc ( ppath , xo , yo , xo - cdx , yo - cdy , quarter_arc_fraction )"		1301157	1					
ANR	1301254	Callee	gx_path_add_partial_arc		1301157	0					
ANR	1301255	Identifier	gx_path_add_partial_arc		1301157	0					
ANR	1301256	ArgumentList	ppath		1301157	1					
ANR	1301257	Argument	ppath		1301157	0					
ANR	1301258	Identifier	ppath		1301157	0					
ANR	1301259	Argument	xo		1301157	1					
ANR	1301260	Identifier	xo		1301157	0					
ANR	1301261	Argument	yo		1301157	2					
ANR	1301262	Identifier	yo		1301157	0					
ANR	1301263	Argument	xo - cdx		1301157	3					
ANR	1301264	AdditiveExpression	xo - cdx		1301157	0		-			
ANR	1301265	Identifier	xo		1301157	0					
ANR	1301266	Identifier	cdx		1301157	1					
ANR	1301267	Argument	yo - cdy		1301157	4					
ANR	1301268	AdditiveExpression	yo - cdy		1301157	0		-			
ANR	1301269	Identifier	yo		1301157	0					
ANR	1301270	Identifier	cdy		1301157	1					
ANR	1301271	Argument	quarter_arc_fraction		1301157	5					
ANR	1301272	Identifier	quarter_arc_fraction		1301157	0					
ANR	1301273	PrimaryExpression	0		1301157	1					
ANR	1301274	RelationalExpression	"( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"		1301157	1		<			
ANR	1301275	AssignmentExpression	"code = gx_path_add_line ( ppath , xe , ye )"		1301157	0		=			
ANR	1301276	Identifier	code		1301157	0					
ANR	1301277	CallExpression	"gx_path_add_line ( ppath , xe , ye )"		1301157	1					
ANR	1301278	Callee	gx_path_add_line		1301157	0					
ANR	1301279	Identifier	gx_path_add_line		1301157	0					
ANR	1301280	ArgumentList	ppath		1301157	1					
ANR	1301281	Argument	ppath		1301157	0					
ANR	1301282	Identifier	ppath		1301157	0					
ANR	1301283	Argument	xe		1301157	1					
ANR	1301284	Identifier	xe		1301157	0					
ANR	1301285	Argument	ye		1301157	2					
ANR	1301286	Identifier	ye		1301157	0					
ANR	1301287	PrimaryExpression	0		1301157	1					
ANR	1301288	ReturnStatement	return code ;	2465:8:101703:101714	1301157	1	True				
ANR	1301289	Identifier	code		1301157	0					
ANR	1301290	ReturnStatement	return 0 ;	2466:4:101720:101728	1301157	2	True				
ANR	1301291	PrimaryExpression	0		1301157	0					
ANR	1301292	ReturnType	static int		1301157	1					
ANR	1301293	Identifier	add_round_cap		1301157	2					
ANR	1301294	ParameterList	"gx_path * ppath , const_ep_ptr endp"		1301157	3					
ANR	1301295	Parameter	gx_path * ppath	2444:14:100725:100739	1301157	0	True				
ANR	1301296	ParameterType	gx_path *		1301157	0					
ANR	1301297	Identifier	ppath		1301157	1					
ANR	1301298	Parameter	const_ep_ptr endp	2444:31:100742:100758	1301157	1	True				
ANR	1301299	ParameterType	const_ep_ptr		1301157	0					
ANR	1301300	Identifier	endp		1301157	1					
ANR	1301301	CFGEntryNode	ENTRY		1301157		True				
ANR	1301302	CFGExitNode	EXIT		1301157		True				
ANR	1301303	Symbol	code		1301157						
ANR	1301304	Symbol	quarter_arc_fraction		1301157						
ANR	1301305	Symbol	px		1301157						
ANR	1301306	Symbol	py		1301157						
ANR	1301307	Symbol	ppath		1301157						
ANR	1301308	Symbol	ye		1301157						
ANR	1301309	Symbol	xe		1301157						
ANR	1301310	Symbol	gx_path_add_partial_arc		1301157						
ANR	1301311	Symbol	cdx		1301157						
ANR	1301312	Symbol	yo		1301157						
ANR	1301313	Symbol	xo		1301157						
ANR	1301314	Symbol	gx_path_add_line		1301157						
ANR	1301315	Symbol	cdy		1301157						
ANR	1301316	Symbol	endp		1301157						
ANR	1301317	Function	add_pie_cap	2471:0:101834:102341							
ANR	1301318	FunctionDef	"add_pie_cap (gx_path * ppath , const_ep_ptr endp)"		1301317	0					
ANR	1301319	CompoundStatement		2473:0:101893:102341	1301317	0					
ANR	1301320	IdentifierDeclStatement	int code ;	2474:4:101899:101907	1301317	0	True				
ANR	1301321	IdentifierDecl	code		1301317	0					
ANR	1301322	IdentifierDeclType	int		1301317	0					
ANR	1301323	Identifier	code		1301317	1					
ANR	1301324	IfStatement	"if ( ( code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0 )"		1301317	1					
ANR	1301325	Condition	"( code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"	2476:8:101918:102303	1301317	0	True				
ANR	1301326	OrExpression	"( code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"		1301317	0		||			
ANR	1301327	RelationalExpression	"( code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction ) ) < 0"		1301317	0		<			
ANR	1301328	AssignmentExpression	"code = gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction )"		1301317	0		=			
ANR	1301329	Identifier	code		1301317	0					
ANR	1301330	CallExpression	"gx_path_add_partial_arc ( ppath , px + cdx , py + cdy , xo + cdx , yo + cdy , quarter_arc_fraction )"		1301317	1					
ANR	1301331	Callee	gx_path_add_partial_arc		1301317	0					
ANR	1301332	Identifier	gx_path_add_partial_arc		1301317	0					
ANR	1301333	ArgumentList	ppath		1301317	1					
ANR	1301334	Argument	ppath		1301317	0					
ANR	1301335	Identifier	ppath		1301317	0					
ANR	1301336	Argument	px + cdx		1301317	1					
ANR	1301337	AdditiveExpression	px + cdx		1301317	0		+			
ANR	1301338	Identifier	px		1301317	0					
ANR	1301339	Identifier	cdx		1301317	1					
ANR	1301340	Argument	py + cdy		1301317	2					
ANR	1301341	AdditiveExpression	py + cdy		1301317	0		+			
ANR	1301342	Identifier	py		1301317	0					
ANR	1301343	Identifier	cdy		1301317	1					
ANR	1301344	Argument	xo + cdx		1301317	3					
ANR	1301345	AdditiveExpression	xo + cdx		1301317	0		+			
ANR	1301346	Identifier	xo		1301317	0					
ANR	1301347	Identifier	cdx		1301317	1					
ANR	1301348	Argument	yo + cdy		1301317	4					
ANR	1301349	AdditiveExpression	yo + cdy		1301317	0		+			
ANR	1301350	Identifier	yo		1301317	0					
ANR	1301351	Identifier	cdy		1301317	1					
ANR	1301352	Argument	quarter_arc_fraction		1301317	5					
ANR	1301353	Identifier	quarter_arc_fraction		1301317	0					
ANR	1301354	PrimaryExpression	0		1301317	1					
ANR	1301355	OrExpression	"( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0 || ( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"		1301317	1		||			
ANR	1301356	RelationalExpression	"( code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction ) ) < 0"		1301317	0		<			
ANR	1301357	AssignmentExpression	"code = gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction )"		1301317	0		=			
ANR	1301358	Identifier	code		1301317	0					
ANR	1301359	CallExpression	"gx_path_add_partial_arc ( ppath , xe , ye , xe + cdx , ye + cdy , quarter_arc_fraction )"		1301317	1					
ANR	1301360	Callee	gx_path_add_partial_arc		1301317	0					
ANR	1301361	Identifier	gx_path_add_partial_arc		1301317	0					
ANR	1301362	ArgumentList	ppath		1301317	1					
ANR	1301363	Argument	ppath		1301317	0					
ANR	1301364	Identifier	ppath		1301317	0					
ANR	1301365	Argument	xe		1301317	1					
ANR	1301366	Identifier	xe		1301317	0					
ANR	1301367	Argument	ye		1301317	2					
ANR	1301368	Identifier	ye		1301317	0					
ANR	1301369	Argument	xe + cdx		1301317	3					
ANR	1301370	AdditiveExpression	xe + cdx		1301317	0		+			
ANR	1301371	Identifier	xe		1301317	0					
ANR	1301372	Identifier	cdx		1301317	1					
ANR	1301373	Argument	ye + cdy		1301317	4					
ANR	1301374	AdditiveExpression	ye + cdy		1301317	0		+			
ANR	1301375	Identifier	ye		1301317	0					
ANR	1301376	Identifier	cdy		1301317	1					
ANR	1301377	Argument	quarter_arc_fraction		1301317	5					
ANR	1301378	Identifier	quarter_arc_fraction		1301317	0					
ANR	1301379	PrimaryExpression	0		1301317	1					
ANR	1301380	RelationalExpression	"( code = gx_path_add_line ( ppath , xe , ye ) ) < 0"		1301317	1		<			
ANR	1301381	AssignmentExpression	"code = gx_path_add_line ( ppath , xe , ye )"		1301317	0		=			
ANR	1301382	Identifier	code		1301317	0					
ANR	1301383	CallExpression	"gx_path_add_line ( ppath , xe , ye )"		1301317	1					
ANR	1301384	Callee	gx_path_add_line		1301317	0					
ANR	1301385	Identifier	gx_path_add_line		1301317	0					
ANR	1301386	ArgumentList	ppath		1301317	1					
ANR	1301387	Argument	ppath		1301317	0					
ANR	1301388	Identifier	ppath		1301317	0					
ANR	1301389	Argument	xe		1301317	1					
ANR	1301390	Identifier	xe		1301317	0					
ANR	1301391	Argument	ye		1301317	2					
ANR	1301392	Identifier	ye		1301317	0					
ANR	1301393	PrimaryExpression	0		1301317	1					
ANR	1301394	ReturnStatement	return code ;	2482:8:102314:102325	1301317	1	True				
ANR	1301395	Identifier	code		1301317	0					
ANR	1301396	ReturnStatement	return 0 ;	2483:4:102331:102339	1301317	2	True				
ANR	1301397	PrimaryExpression	0		1301317	0					
ANR	1301398	ReturnType	static int		1301317	1					
ANR	1301399	Identifier	add_pie_cap		1301317	2					
ANR	1301400	ParameterList	"gx_path * ppath , const_ep_ptr endp"		1301317	3					
ANR	1301401	Parameter	gx_path * ppath	2472:12:101857:101871	1301317	0	True				
ANR	1301402	ParameterType	gx_path *		1301317	0					
ANR	1301403	Identifier	ppath		1301317	1					
ANR	1301404	Parameter	const_ep_ptr endp	2472:29:101874:101890	1301317	1	True				
ANR	1301405	ParameterType	const_ep_ptr		1301317	0					
ANR	1301406	Identifier	endp		1301317	1					
ANR	1301407	CFGEntryNode	ENTRY		1301317		True				
ANR	1301408	CFGExitNode	EXIT		1301317		True				
ANR	1301409	Symbol	code		1301317						
ANR	1301410	Symbol	quarter_arc_fraction		1301317						
ANR	1301411	Symbol	px		1301317						
ANR	1301412	Symbol	py		1301317						
ANR	1301413	Symbol	ppath		1301317						
ANR	1301414	Symbol	ye		1301317						
ANR	1301415	Symbol	xe		1301317						
ANR	1301416	Symbol	gx_path_add_partial_arc		1301317						
ANR	1301417	Symbol	cdx		1301317						
ANR	1301418	Symbol	yo		1301317						
ANR	1301419	Symbol	gx_path_add_line		1301317						
ANR	1301420	Symbol	xo		1301317						
ANR	1301421	Symbol	cdy		1301317						
ANR	1301422	Symbol	endp		1301317						
ANR	1301423	Function	do_pie_join	2486:0:102344:104628							
ANR	1301424	FunctionDef	"do_pie_join (gx_path * ppath , gs_fixed_point * centre , gs_fixed_point * current_orig , gs_fixed_point * current_tangent , gs_fixed_point * final , gs_fixed_point * final_tangent , bool ccw , gs_fixed_point * width)"		1301423	0					
ANR	1301425	CompoundStatement		2491:0:102594:104628	1301423	0					
ANR	1301426	IdentifierDeclStatement	int code ;	2492:4:102600:102608	1301423	0	True				
ANR	1301427	IdentifierDecl	code		1301423	0					
ANR	1301428	IdentifierDeclType	int		1301423	0					
ANR	1301429	Identifier	code		1301423	1					
ANR	1301430	IdentifierDeclStatement	"double rad_squared , dist_squared , F ;"	2493:4:102614:102649	1301423	1	True				
ANR	1301431	IdentifierDecl	rad_squared		1301423	0					
ANR	1301432	IdentifierDeclType	double		1301423	0					
ANR	1301433	Identifier	rad_squared		1301423	1					
ANR	1301434	IdentifierDecl	dist_squared		1301423	1					
ANR	1301435	IdentifierDeclType	double		1301423	0					
ANR	1301436	Identifier	dist_squared		1301423	1					
ANR	1301437	IdentifierDecl	F		1301423	2					
ANR	1301438	IdentifierDeclType	double		1301423	0					
ANR	1301439	Identifier	F		1301423	1					
ANR	1301440	IdentifierDeclStatement	"gs_fixed_point current , tangent , tangmeet ;"	2494:4:102655:102696	1301423	2	True				
ANR	1301441	IdentifierDecl	current		1301423	0					
ANR	1301442	IdentifierDeclType	gs_fixed_point		1301423	0					
ANR	1301443	Identifier	current		1301423	1					
ANR	1301444	IdentifierDecl	tangent		1301423	1					
ANR	1301445	IdentifierDeclType	gs_fixed_point		1301423	0					
ANR	1301446	Identifier	tangent		1301423	1					
ANR	1301447	IdentifierDecl	tangmeet		1301423	2					
ANR	1301448	IdentifierDeclType	gs_fixed_point		1301423	0					
ANR	1301449	Identifier	tangmeet		1301423	1					
ANR	1301450	ExpressionStatement	tangent . x = current_tangent -> x	2496:4:102703:102733	1301423	3	True				
ANR	1301451	AssignmentExpression	tangent . x = current_tangent -> x		1301423	0		=			
ANR	1301452	MemberAccess	tangent . x		1301423	0					
ANR	1301453	Identifier	tangent		1301423	0					
ANR	1301454	Identifier	x		1301423	1					
ANR	1301455	PtrMemberAccess	current_tangent -> x		1301423	1					
ANR	1301456	Identifier	current_tangent		1301423	0					
ANR	1301457	Identifier	x		1301423	1					
ANR	1301458	ExpressionStatement	tangent . y = current_tangent -> y	2497:4:102739:102769	1301423	4	True				
ANR	1301459	AssignmentExpression	tangent . y = current_tangent -> y		1301423	0		=			
ANR	1301460	MemberAccess	tangent . y		1301423	0					
ANR	1301461	Identifier	tangent		1301423	0					
ANR	1301462	Identifier	y		1301423	1					
ANR	1301463	PtrMemberAccess	current_tangent -> y		1301423	1					
ANR	1301464	Identifier	current_tangent		1301423	0					
ANR	1301465	Identifier	y		1301423	1					
ANR	1301466	ExpressionStatement	current . x = current_orig -> x	2498:4:102775:102802	1301423	5	True				
ANR	1301467	AssignmentExpression	current . x = current_orig -> x		1301423	0		=			
ANR	1301468	MemberAccess	current . x		1301423	0					
ANR	1301469	Identifier	current		1301423	0					
ANR	1301470	Identifier	x		1301423	1					
ANR	1301471	PtrMemberAccess	current_orig -> x		1301423	1					
ANR	1301472	Identifier	current_orig		1301423	0					
ANR	1301473	Identifier	x		1301423	1					
ANR	1301474	ExpressionStatement	current . y = current_orig -> y	2499:4:102808:102835	1301423	6	True				
ANR	1301475	AssignmentExpression	current . y = current_orig -> y		1301423	0		=			
ANR	1301476	MemberAccess	current . y		1301423	0					
ANR	1301477	Identifier	current		1301423	0					
ANR	1301478	Identifier	y		1301423	1					
ANR	1301479	PtrMemberAccess	current_orig -> y		1301423	1					
ANR	1301480	Identifier	current_orig		1301423	0					
ANR	1301481	Identifier	y		1301423	1					
ANR	1301482	IfStatement	if ( ( double ) tangent . x * ( double ) final_tangent -> x + ( double ) tangent . y * ( double ) final_tangent -> y > 0 )		1301423	7					
ANR	1301483	Condition	( double ) tangent . x * ( double ) final_tangent -> x + ( double ) tangent . y * ( double ) final_tangent -> y > 0	2502:8:102890:102992	1301423	0	True				
ANR	1301484	RelationalExpression	( double ) tangent . x * ( double ) final_tangent -> x + ( double ) tangent . y * ( double ) final_tangent -> y > 0		1301423	0		>			
ANR	1301485	AdditiveExpression	( double ) tangent . x * ( double ) final_tangent -> x + ( double ) tangent . y * ( double ) final_tangent -> y		1301423	0		+			
ANR	1301486	MultiplicativeExpression	( double ) tangent . x * ( double ) final_tangent -> x		1301423	0		*			
ANR	1301487	CastExpression	( double ) tangent . x		1301423	0					
ANR	1301488	CastTarget	double		1301423	0					
ANR	1301489	MemberAccess	tangent . x		1301423	1					
ANR	1301490	Identifier	tangent		1301423	0					
ANR	1301491	Identifier	x		1301423	1					
ANR	1301492	CastExpression	( double ) final_tangent -> x		1301423	1					
ANR	1301493	CastTarget	double		1301423	0					
ANR	1301494	PtrMemberAccess	final_tangent -> x		1301423	1					
ANR	1301495	Identifier	final_tangent		1301423	0					
ANR	1301496	Identifier	x		1301423	1					
ANR	1301497	MultiplicativeExpression	( double ) tangent . y * ( double ) final_tangent -> y		1301423	1		*			
ANR	1301498	CastExpression	( double ) tangent . y		1301423	0					
ANR	1301499	CastTarget	double		1301423	0					
ANR	1301500	MemberAccess	tangent . y		1301423	1					
ANR	1301501	Identifier	tangent		1301423	0					
ANR	1301502	Identifier	y		1301423	1					
ANR	1301503	CastExpression	( double ) final_tangent -> y		1301423	1					
ANR	1301504	CastTarget	double		1301423	0					
ANR	1301505	PtrMemberAccess	final_tangent -> y		1301423	1					
ANR	1301506	Identifier	final_tangent		1301423	0					
ANR	1301507	Identifier	y		1301423	1					
ANR	1301508	PrimaryExpression	0		1301423	1					
ANR	1301509	CompoundStatement		13:58:400:400	1301423	1					
ANR	1301510	ExpressionStatement	"code = gx_path_add_partial_arc ( ppath , centre -> x + tangent . x , centre -> y + tangent . y , current . x + tangent . x , current . y + tangent . y , quarter_arc_fraction )"	2505:8:103046:103463	1301423	0	True				
ANR	1301511	AssignmentExpression	"code = gx_path_add_partial_arc ( ppath , centre -> x + tangent . x , centre -> y + tangent . y , current . x + tangent . x , current . y + tangent . y , quarter_arc_fraction )"		1301423	0		=			
ANR	1301512	Identifier	code		1301423	0					
ANR	1301513	CallExpression	"gx_path_add_partial_arc ( ppath , centre -> x + tangent . x , centre -> y + tangent . y , current . x + tangent . x , current . y + tangent . y , quarter_arc_fraction )"		1301423	1					
ANR	1301514	Callee	gx_path_add_partial_arc		1301423	0					
ANR	1301515	Identifier	gx_path_add_partial_arc		1301423	0					
ANR	1301516	ArgumentList	ppath		1301423	1					
ANR	1301517	Argument	ppath		1301423	0					
ANR	1301518	Identifier	ppath		1301423	0					
ANR	1301519	Argument	centre -> x + tangent . x		1301423	1					
ANR	1301520	AdditiveExpression	centre -> x + tangent . x		1301423	0		+			
ANR	1301521	PtrMemberAccess	centre -> x		1301423	0					
ANR	1301522	Identifier	centre		1301423	0					
ANR	1301523	Identifier	x		1301423	1					
ANR	1301524	MemberAccess	tangent . x		1301423	1					
ANR	1301525	Identifier	tangent		1301423	0					
ANR	1301526	Identifier	x		1301423	1					
ANR	1301527	Argument	centre -> y + tangent . y		1301423	2					
ANR	1301528	AdditiveExpression	centre -> y + tangent . y		1301423	0		+			
ANR	1301529	PtrMemberAccess	centre -> y		1301423	0					
ANR	1301530	Identifier	centre		1301423	0					
ANR	1301531	Identifier	y		1301423	1					
ANR	1301532	MemberAccess	tangent . y		1301423	1					
ANR	1301533	Identifier	tangent		1301423	0					
ANR	1301534	Identifier	y		1301423	1					
ANR	1301535	Argument	current . x + tangent . x		1301423	3					
ANR	1301536	AdditiveExpression	current . x + tangent . x		1301423	0		+			
ANR	1301537	MemberAccess	current . x		1301423	0					
ANR	1301538	Identifier	current		1301423	0					
ANR	1301539	Identifier	x		1301423	1					
ANR	1301540	MemberAccess	tangent . x		1301423	1					
ANR	1301541	Identifier	tangent		1301423	0					
ANR	1301542	Identifier	x		1301423	1					
ANR	1301543	Argument	current . y + tangent . y		1301423	4					
ANR	1301544	AdditiveExpression	current . y + tangent . y		1301423	0		+			
ANR	1301545	MemberAccess	current . y		1301423	0					
ANR	1301546	Identifier	current		1301423	0					
ANR	1301547	Identifier	y		1301423	1					
ANR	1301548	MemberAccess	tangent . y		1301423	1					
ANR	1301549	Identifier	tangent		1301423	0					
ANR	1301550	Identifier	y		1301423	1					
ANR	1301551	Argument	quarter_arc_fraction		1301423	5					
ANR	1301552	Identifier	quarter_arc_fraction		1301423	0					
ANR	1301553	IfStatement	if ( code < 0 )		1301423	1					
ANR	1301554	Condition	code < 0	2512:12:103477:103484	1301423	0	True				
ANR	1301555	RelationalExpression	code < 0		1301423	0		<			
ANR	1301556	Identifier	code		1301423	0					
ANR	1301557	PrimaryExpression	0		1301423	1					
ANR	1301558	ReturnStatement	return code ;	2513:12:103499:103510	1301423	1	True				
ANR	1301559	Identifier	code		1301423	0					
ANR	1301560	ExpressionStatement	current . x = centre -> x + tangent . x	2514:8:103520:103553	1301423	2	True				
ANR	1301561	AssignmentExpression	current . x = centre -> x + tangent . x		1301423	0		=			
ANR	1301562	MemberAccess	current . x		1301423	0					
ANR	1301563	Identifier	current		1301423	0					
ANR	1301564	Identifier	x		1301423	1					
ANR	1301565	AdditiveExpression	centre -> x + tangent . x		1301423	1		+			
ANR	1301566	PtrMemberAccess	centre -> x		1301423	0					
ANR	1301567	Identifier	centre		1301423	0					
ANR	1301568	Identifier	x		1301423	1					
ANR	1301569	MemberAccess	tangent . x		1301423	1					
ANR	1301570	Identifier	tangent		1301423	0					
ANR	1301571	Identifier	x		1301423	1					
ANR	1301572	ExpressionStatement	current . y = centre -> y + tangent . y	2515:8:103563:103596	1301423	3	True				
ANR	1301573	AssignmentExpression	current . y = centre -> y + tangent . y		1301423	0		=			
ANR	1301574	MemberAccess	current . y		1301423	0					
ANR	1301575	Identifier	current		1301423	0					
ANR	1301576	Identifier	y		1301423	1					
ANR	1301577	AdditiveExpression	centre -> y + tangent . y		1301423	1		+			
ANR	1301578	PtrMemberAccess	centre -> y		1301423	0					
ANR	1301579	Identifier	centre		1301423	0					
ANR	1301580	Identifier	y		1301423	1					
ANR	1301581	MemberAccess	tangent . y		1301423	1					
ANR	1301582	Identifier	tangent		1301423	0					
ANR	1301583	Identifier	y		1301423	1					
ANR	1301584	IfStatement	if ( ccw )		1301423	4					
ANR	1301585	Condition	ccw	2516:12:103610:103612	1301423	0	True				
ANR	1301586	Identifier	ccw		1301423	0					
ANR	1301587	CompoundStatement		27:12:1034:1053	1301423	1					
ANR	1301588	IdentifierDeclStatement	int tmp = tangent . x ;	2517:12:103629:103648	1301423	0	True				
ANR	1301589	IdentifierDecl	tmp = tangent . x		1301423	0					
ANR	1301590	IdentifierDeclType	int		1301423	0					
ANR	1301591	Identifier	tmp		1301423	1					
ANR	1301592	AssignmentExpression	tmp = tangent . x		1301423	2		=			
ANR	1301593	Identifier	tmp		1301423	0					
ANR	1301594	MemberAccess	tangent . x		1301423	1					
ANR	1301595	Identifier	tangent		1301423	0					
ANR	1301596	Identifier	x		1301423	1					
ANR	1301597	ExpressionStatement	tangent . x = - tangent . y	2518:12:103662:103684	1301423	1	True				
ANR	1301598	AssignmentExpression	tangent . x = - tangent . y		1301423	0		=			
ANR	1301599	MemberAccess	tangent . x		1301423	0					
ANR	1301600	Identifier	tangent		1301423	0					
ANR	1301601	Identifier	x		1301423	1					
ANR	1301602	UnaryOperationExpression	- tangent . y		1301423	1					
ANR	1301603	UnaryOperator	-		1301423	0					
ANR	1301604	MemberAccess	tangent . y		1301423	1					
ANR	1301605	Identifier	tangent		1301423	0					
ANR	1301606	Identifier	y		1301423	1					
ANR	1301607	ExpressionStatement	tangent . y = tmp	2519:12:103698:103713	1301423	2	True				
ANR	1301608	AssignmentExpression	tangent . y = tmp		1301423	0		=			
ANR	1301609	MemberAccess	tangent . y		1301423	0					
ANR	1301610	Identifier	tangent		1301423	0					
ANR	1301611	Identifier	y		1301423	1					
ANR	1301612	Identifier	tmp		1301423	1					
ANR	1301613	ElseStatement	else		1301423	0					
ANR	1301614	CompoundStatement		31:12:1149:1168	1301423	0					
ANR	1301615	IdentifierDeclStatement	int tmp = tangent . x ;	2521:12:103744:103763	1301423	0	True				
ANR	1301616	IdentifierDecl	tmp = tangent . x		1301423	0					
ANR	1301617	IdentifierDeclType	int		1301423	0					
ANR	1301618	Identifier	tmp		1301423	1					
ANR	1301619	AssignmentExpression	tmp = tangent . x		1301423	2		=			
ANR	1301620	Identifier	tmp		1301423	0					
ANR	1301621	MemberAccess	tangent . x		1301423	1					
ANR	1301622	Identifier	tangent		1301423	0					
ANR	1301623	Identifier	x		1301423	1					
ANR	1301624	ExpressionStatement	tangent . x = tangent . y	2522:12:103777:103798	1301423	1	True				
ANR	1301625	AssignmentExpression	tangent . x = tangent . y		1301423	0		=			
ANR	1301626	MemberAccess	tangent . x		1301423	0					
ANR	1301627	Identifier	tangent		1301423	0					
ANR	1301628	Identifier	x		1301423	1					
ANR	1301629	MemberAccess	tangent . y		1301423	1					
ANR	1301630	Identifier	tangent		1301423	0					
ANR	1301631	Identifier	y		1301423	1					
ANR	1301632	ExpressionStatement	tangent . y = - tmp	2523:12:103812:103828	1301423	2	True				
ANR	1301633	AssignmentExpression	tangent . y = - tmp		1301423	0		=			
ANR	1301634	MemberAccess	tangent . y		1301423	0					
ANR	1301635	Identifier	tangent		1301423	0					
ANR	1301636	Identifier	y		1301423	1					
ANR	1301637	UnaryOperationExpression	- tmp		1301423	1					
ANR	1301638	UnaryOperator	-		1301423	0					
ANR	1301639	Identifier	tmp		1301423	1					
ANR	1301640	IfStatement	"if ( line_intersect ( & current , & tangent , final , final_tangent , & tangmeet ) != 0 )"		1301423	8					
ANR	1301641	Condition	"line_intersect ( & current , & tangent , final , final_tangent , & tangmeet ) != 0"	2529:8:103993:104087	1301423	0	True				
ANR	1301642	EqualityExpression	"line_intersect ( & current , & tangent , final , final_tangent , & tangmeet ) != 0"		1301423	0		!=			
ANR	1301643	CallExpression	"line_intersect ( & current , & tangent , final , final_tangent , & tangmeet )"		1301423	0					
ANR	1301644	Callee	line_intersect		1301423	0					
ANR	1301645	Identifier	line_intersect		1301423	0					
ANR	1301646	ArgumentList	& current		1301423	1					
ANR	1301647	Argument	& current		1301423	0					
ANR	1301648	UnaryOperationExpression	& current		1301423	0					
ANR	1301649	UnaryOperator	&		1301423	0					
ANR	1301650	Identifier	current		1301423	1					
ANR	1301651	Argument	& tangent		1301423	1					
ANR	1301652	UnaryOperationExpression	& tangent		1301423	0					
ANR	1301653	UnaryOperator	&		1301423	0					
ANR	1301654	Identifier	tangent		1301423	1					
ANR	1301655	Argument	final		1301423	2					
ANR	1301656	Identifier	final		1301423	0					
ANR	1301657	Argument	final_tangent		1301423	3					
ANR	1301658	Identifier	final_tangent		1301423	0					
ANR	1301659	Argument	& tangmeet		1301423	4					
ANR	1301660	UnaryOperationExpression	& tangmeet		1301423	0					
ANR	1301661	UnaryOperator	&		1301423	0					
ANR	1301662	Identifier	tangmeet		1301423	1					
ANR	1301663	PrimaryExpression	0		1301423	1					
ANR	1301664	CompoundStatement		40:62:1495:1495	1301423	1					
ANR	1301665	ReturnStatement	"return gx_path_add_line ( ppath , final -> x , final -> y ) ;"	2531:8:104100:104150	1301423	0	True				
ANR	1301666	CallExpression	"gx_path_add_line ( ppath , final -> x , final -> y )"		1301423	0					
ANR	1301667	Callee	gx_path_add_line		1301423	0					
ANR	1301668	Identifier	gx_path_add_line		1301423	0					
ANR	1301669	ArgumentList	ppath		1301423	1					
ANR	1301670	Argument	ppath		1301423	0					
ANR	1301671	Identifier	ppath		1301423	0					
ANR	1301672	Argument	final -> x		1301423	1					
ANR	1301673	PtrMemberAccess	final -> x		1301423	0					
ANR	1301674	Identifier	final		1301423	0					
ANR	1301675	Identifier	x		1301423	1					
ANR	1301676	Argument	final -> y		1301423	2					
ANR	1301677	PtrMemberAccess	final -> y		1301423	0					
ANR	1301678	Identifier	final		1301423	0					
ANR	1301679	Identifier	y		1301423	1					
ANR	1301680	ExpressionStatement	current . x -= tangmeet . x	2533:4:104162:104185	1301423	9	True				
ANR	1301681	AssignmentExpression	current . x -= tangmeet . x		1301423	0		-=			
ANR	1301682	MemberAccess	current . x		1301423	0					
ANR	1301683	Identifier	current		1301423	0					
ANR	1301684	Identifier	x		1301423	1					
ANR	1301685	MemberAccess	tangmeet . x		1301423	1					
ANR	1301686	Identifier	tangmeet		1301423	0					
ANR	1301687	Identifier	x		1301423	1					
ANR	1301688	ExpressionStatement	current . y -= tangmeet . y	2534:4:104191:104214	1301423	10	True				
ANR	1301689	AssignmentExpression	current . y -= tangmeet . y		1301423	0		-=			
ANR	1301690	MemberAccess	current . y		1301423	0					
ANR	1301691	Identifier	current		1301423	0					
ANR	1301692	Identifier	y		1301423	1					
ANR	1301693	MemberAccess	tangmeet . y		1301423	1					
ANR	1301694	Identifier	tangmeet		1301423	0					
ANR	1301695	Identifier	y		1301423	1					
ANR	1301696	ExpressionStatement	dist_squared = ( ( double ) current . x ) * current . x + ( ( double ) current . y ) * current . y	2535:4:104220:104319	1301423	11	True				
ANR	1301697	AssignmentExpression	dist_squared = ( ( double ) current . x ) * current . x + ( ( double ) current . y ) * current . y		1301423	0		=			
ANR	1301698	Identifier	dist_squared		1301423	0					
ANR	1301699	AdditiveExpression	( ( double ) current . x ) * current . x + ( ( double ) current . y ) * current . y		1301423	1		+			
ANR	1301700	MultiplicativeExpression	( ( double ) current . x ) * current . x		1301423	0		*			
ANR	1301701	CastExpression	( double ) current . x		1301423	0					
ANR	1301702	CastTarget	double		1301423	0					
ANR	1301703	MemberAccess	current . x		1301423	1					
ANR	1301704	Identifier	current		1301423	0					
ANR	1301705	Identifier	x		1301423	1					
ANR	1301706	MemberAccess	current . x		1301423	1					
ANR	1301707	Identifier	current		1301423	0					
ANR	1301708	Identifier	x		1301423	1					
ANR	1301709	MultiplicativeExpression	( ( double ) current . y ) * current . y		1301423	1		*			
ANR	1301710	CastExpression	( double ) current . y		1301423	0					
ANR	1301711	CastTarget	double		1301423	0					
ANR	1301712	MemberAccess	current . y		1301423	1					
ANR	1301713	Identifier	current		1301423	0					
ANR	1301714	Identifier	y		1301423	1					
ANR	1301715	MemberAccess	current . y		1301423	1					
ANR	1301716	Identifier	current		1301423	0					
ANR	1301717	Identifier	y		1301423	1					
ANR	1301718	ExpressionStatement	rad_squared = ( ( double ) width -> x ) * width -> x + ( ( double ) width -> y ) * width -> y	2537:4:104325:104420	1301423	12	True				
ANR	1301719	AssignmentExpression	rad_squared = ( ( double ) width -> x ) * width -> x + ( ( double ) width -> y ) * width -> y		1301423	0		=			
ANR	1301720	Identifier	rad_squared		1301423	0					
ANR	1301721	AdditiveExpression	( ( double ) width -> x ) * width -> x + ( ( double ) width -> y ) * width -> y		1301423	1		+			
ANR	1301722	MultiplicativeExpression	( ( double ) width -> x ) * width -> x		1301423	0		*			
ANR	1301723	CastExpression	( double ) width -> x		1301423	0					
ANR	1301724	CastTarget	double		1301423	0					
ANR	1301725	PtrMemberAccess	width -> x		1301423	1					
ANR	1301726	Identifier	width		1301423	0					
ANR	1301727	Identifier	x		1301423	1					
ANR	1301728	PtrMemberAccess	width -> x		1301423	1					
ANR	1301729	Identifier	width		1301423	0					
ANR	1301730	Identifier	x		1301423	1					
ANR	1301731	MultiplicativeExpression	( ( double ) width -> y ) * width -> y		1301423	1		*			
ANR	1301732	CastExpression	( double ) width -> y		1301423	0					
ANR	1301733	CastTarget	double		1301423	0					
ANR	1301734	PtrMemberAccess	width -> y		1301423	1					
ANR	1301735	Identifier	width		1301423	0					
ANR	1301736	Identifier	y		1301423	1					
ANR	1301737	PtrMemberAccess	width -> y		1301423	1					
ANR	1301738	Identifier	width		1301423	0					
ANR	1301739	Identifier	y		1301423	1					
ANR	1301740	ExpressionStatement	dist_squared /= rad_squared	2539:4:104426:104453	1301423	13	True				
ANR	1301741	AssignmentExpression	dist_squared /= rad_squared		1301423	0		/=			
ANR	1301742	Identifier	dist_squared		1301423	0					
ANR	1301743	Identifier	rad_squared		1301423	1					
ANR	1301744	ExpressionStatement	F = ( 4.0 / 3.0 ) * ( 1 / ( 1 + sqrt ( 1 + dist_squared ) ) )	2540:4:104459:104501	1301423	14	True				
ANR	1301745	AssignmentExpression	F = ( 4.0 / 3.0 ) * ( 1 / ( 1 + sqrt ( 1 + dist_squared ) ) )		1301423	0		=			
ANR	1301746	Identifier	F		1301423	0					
ANR	1301747	MultiplicativeExpression	( 4.0 / 3.0 ) * ( 1 / ( 1 + sqrt ( 1 + dist_squared ) ) )		1301423	1		*			
ANR	1301748	MultiplicativeExpression	4.0 / 3.0		1301423	0		/			
ANR	1301749	PrimaryExpression	4.0		1301423	0					
ANR	1301750	PrimaryExpression	3.0		1301423	1					
ANR	1301751	MultiplicativeExpression	1 / ( 1 + sqrt ( 1 + dist_squared ) )		1301423	1		/			
ANR	1301752	PrimaryExpression	1		1301423	0					
ANR	1301753	AdditiveExpression	1 + sqrt ( 1 + dist_squared )		1301423	1		+			
ANR	1301754	PrimaryExpression	1		1301423	0					
ANR	1301755	CallExpression	sqrt ( 1 + dist_squared )		1301423	1					
ANR	1301756	Callee	sqrt		1301423	0					
ANR	1301757	Identifier	sqrt		1301423	0					
ANR	1301758	ArgumentList	1 + dist_squared		1301423	1					
ANR	1301759	Argument	1 + dist_squared		1301423	0					
ANR	1301760	AdditiveExpression	1 + dist_squared		1301423	0		+			
ANR	1301761	PrimaryExpression	1		1301423	0					
ANR	1301762	Identifier	dist_squared		1301423	1					
ANR	1301763	ReturnStatement	"return gx_path_add_partial_arc ( ppath , final -> x , final -> y , tangmeet . x , tangmeet . y , F ) ;"	2541:4:104507:104626	1301423	15	True				
ANR	1301764	CallExpression	"gx_path_add_partial_arc ( ppath , final -> x , final -> y , tangmeet . x , tangmeet . y , F )"		1301423	0					
ANR	1301765	Callee	gx_path_add_partial_arc		1301423	0					
ANR	1301766	Identifier	gx_path_add_partial_arc		1301423	0					
ANR	1301767	ArgumentList	ppath		1301423	1					
ANR	1301768	Argument	ppath		1301423	0					
ANR	1301769	Identifier	ppath		1301423	0					
ANR	1301770	Argument	final -> x		1301423	1					
ANR	1301771	PtrMemberAccess	final -> x		1301423	0					
ANR	1301772	Identifier	final		1301423	0					
ANR	1301773	Identifier	x		1301423	1					
ANR	1301774	Argument	final -> y		1301423	2					
ANR	1301775	PtrMemberAccess	final -> y		1301423	0					
ANR	1301776	Identifier	final		1301423	0					
ANR	1301777	Identifier	y		1301423	1					
ANR	1301778	Argument	tangmeet . x		1301423	3					
ANR	1301779	MemberAccess	tangmeet . x		1301423	0					
ANR	1301780	Identifier	tangmeet		1301423	0					
ANR	1301781	Identifier	x		1301423	1					
ANR	1301782	Argument	tangmeet . y		1301423	4					
ANR	1301783	MemberAccess	tangmeet . y		1301423	0					
ANR	1301784	Identifier	tangmeet		1301423	0					
ANR	1301785	Identifier	y		1301423	1					
ANR	1301786	Argument	F		1301423	5					
ANR	1301787	Identifier	F		1301423	0					
ANR	1301788	ReturnType	static int		1301423	1					
ANR	1301789	Identifier	do_pie_join		1301423	2					
ANR	1301790	ParameterList	"gx_path * ppath , gs_fixed_point * centre , gs_fixed_point * current_orig , gs_fixed_point * current_tangent , gs_fixed_point * final , gs_fixed_point * final_tangent , bool ccw , gs_fixed_point * width"		1301423	3					
ANR	1301791	Parameter	gx_path * ppath	2487:12:102367:102381	1301423	0	True				
ANR	1301792	ParameterType	gx_path *		1301423	0					
ANR	1301793	Identifier	ppath		1301423	1					
ANR	1301794	Parameter	gs_fixed_point * centre	2487:29:102384:102405	1301423	1	True				
ANR	1301795	ParameterType	gs_fixed_point *		1301423	0					
ANR	1301796	Identifier	centre		1301423	1					
ANR	1301797	Parameter	gs_fixed_point * current_orig	2488:12:102420:102447	1301423	2	True				
ANR	1301798	ParameterType	gs_fixed_point *		1301423	0					
ANR	1301799	Identifier	current_orig		1301423	1					
ANR	1301800	Parameter	gs_fixed_point * current_tangent	2488:42:102450:102480	1301423	3	True				
ANR	1301801	ParameterType	gs_fixed_point *		1301423	0					
ANR	1301802	Identifier	current_tangent		1301423	1					
ANR	1301803	Parameter	gs_fixed_point * final	2489:12:102495:102515	1301423	4	True				
ANR	1301804	ParameterType	gs_fixed_point *		1301423	0					
ANR	1301805	Identifier	final		1301423	1					
ANR	1301806	Parameter	gs_fixed_point * final_tangent	2489:35:102518:102546	1301423	5	True				
ANR	1301807	ParameterType	gs_fixed_point *		1301423	0					
ANR	1301808	Identifier	final_tangent		1301423	1					
ANR	1301809	Parameter	bool ccw	2489:66:102549:102556	1301423	6	True				
ANR	1301810	ParameterType	bool		1301423	0					
ANR	1301811	Identifier	ccw		1301423	1					
ANR	1301812	Parameter	gs_fixed_point * width	2490:12:102571:102591	1301423	7	True				
ANR	1301813	ParameterType	gs_fixed_point *		1301423	0					
ANR	1301814	Identifier	width		1301423	1					
ANR	1301815	CFGEntryNode	ENTRY		1301423		True				
ANR	1301816	CFGExitNode	EXIT		1301423		True				
ANR	1301817	Symbol	final -> y		1301423						
ANR	1301818	Symbol	code		1301423						
ANR	1301819	Symbol	current_tangent -> y		1301423						
ANR	1301820	Symbol	current_tangent -> x		1301423						
ANR	1301821	Symbol	final -> x		1301423						
ANR	1301822	Symbol	F		1301423						
ANR	1301823	Symbol	& current		1301423						
ANR	1301824	Symbol	ppath		1301423						
ANR	1301825	Symbol	current_orig		1301423						
ANR	1301826	Symbol	line_intersect		1301423						
ANR	1301827	Symbol	* width		1301423						
ANR	1301828	Symbol	tangent		1301423						
ANR	1301829	Symbol	current		1301423						
ANR	1301830	Symbol	final_tangent		1301423						
ANR	1301831	Symbol	sqrt		1301423						
ANR	1301832	Symbol	ccw		1301423						
ANR	1301833	Symbol	tmp		1301423						
ANR	1301834	Symbol	tangent . x		1301423						
ANR	1301835	Symbol	tangent . y		1301423						
ANR	1301836	Symbol	current . y		1301423						
ANR	1301837	Symbol	current_tangent		1301423						
ANR	1301838	Symbol	current . x		1301423						
ANR	1301839	Symbol	quarter_arc_fraction		1301423						
ANR	1301840	Symbol	rad_squared		1301423						
ANR	1301841	Symbol	centre		1301423						
ANR	1301842	Symbol	width -> y		1301423						
ANR	1301843	Symbol	& tangmeet		1301423						
ANR	1301844	Symbol	tangmeet . y		1301423						
ANR	1301845	Symbol	tangmeet . x		1301423						
ANR	1301846	Symbol	dist_squared		1301423						
ANR	1301847	Symbol	* final_tangent		1301423						
ANR	1301848	Symbol	& tangent		1301423						
ANR	1301849	Symbol	width -> x		1301423						
ANR	1301850	Symbol	* final		1301423						
ANR	1301851	Symbol	* current_tangent		1301423						
ANR	1301852	Symbol	* current_orig		1301423						
ANR	1301853	Symbol	gx_path_add_partial_arc		1301423						
ANR	1301854	Symbol	final_tangent -> x		1301423						
ANR	1301855	Symbol	tangmeet		1301423						
ANR	1301856	Symbol	final_tangent -> y		1301423						
ANR	1301857	Symbol	gx_path_add_line		1301423						
ANR	1301858	Symbol	final		1301423						
ANR	1301859	Symbol	width		1301423						
ANR	1301860	Symbol	current_orig -> x		1301423						
ANR	1301861	Symbol	* centre		1301423						
ANR	1301862	Symbol	current_orig -> y		1301423						
ANR	1301863	Symbol	centre -> x		1301423						
ANR	1301864	Symbol	centre -> y		1301423						
ANR	1301865	Function	add_pie_join	2547:0:104731:106558							
ANR	1301866	FunctionDef	"add_pie_join (gx_path * ppath , pl_ptr plp , pl_ptr nplp , bool reflected , bool cap)"		1301865	0					
ANR	1301867	CompoundStatement		2550:0:104836:106558	1301865	0					
ANR	1301868	IdentifierDeclStatement	int code ;	2551:4:104842:104850	1301865	0	True				
ANR	1301869	IdentifierDecl	code		1301865	0					
ANR	1301870	IdentifierDeclType	int		1301865	0					
ANR	1301871	Identifier	code		1301865	1					
ANR	1301872	IdentifierDeclStatement	"gs_fixed_point * current , * final , * tangent , * final_tangent ;"	2552:4:104856:104913	1301865	1	True				
ANR	1301873	IdentifierDecl	* current		1301865	0					
ANR	1301874	IdentifierDeclType	gs_fixed_point *		1301865	0					
ANR	1301875	Identifier	current		1301865	1					
ANR	1301876	IdentifierDecl	* final		1301865	1					
ANR	1301877	IdentifierDeclType	gs_fixed_point *		1301865	0					
ANR	1301878	Identifier	final		1301865	1					
ANR	1301879	IdentifierDecl	* tangent		1301865	2					
ANR	1301880	IdentifierDeclType	gs_fixed_point *		1301865	0					
ANR	1301881	Identifier	tangent		1301865	1					
ANR	1301882	IdentifierDecl	* final_tangent		1301865	3					
ANR	1301883	IdentifierDeclType	gs_fixed_point *		1301865	0					
ANR	1301884	Identifier	final_tangent		1301865	1					
ANR	1301885	IdentifierDeclStatement	"double l , r ;"	2553:4:104919:104930	1301865	2	True				
ANR	1301886	IdentifierDecl	l		1301865	0					
ANR	1301887	IdentifierDeclType	double		1301865	0					
ANR	1301888	Identifier	l		1301865	1					
ANR	1301889	IdentifierDecl	r		1301865	1					
ANR	1301890	IdentifierDeclType	double		1301865	0					
ANR	1301891	Identifier	r		1301865	1					
ANR	1301892	IdentifierDeclStatement	bool ccw ;	2554:4:104936:104944	1301865	3	True				
ANR	1301893	IdentifierDecl	ccw		1301865	0					
ANR	1301894	IdentifierDeclType	bool		1301865	0					
ANR	1301895	Identifier	ccw		1301865	1					
ANR	1301896	ExpressionStatement	l = ( double ) ( plp -> width . x ) * ( nplp -> width . y )	2556:4:104951:105013	1301865	4	True				
ANR	1301897	AssignmentExpression	l = ( double ) ( plp -> width . x ) * ( nplp -> width . y )		1301865	0		=			
ANR	1301898	Identifier	l		1301865	0					
ANR	1301899	MultiplicativeExpression	( double ) ( plp -> width . x ) * ( nplp -> width . y )		1301865	1		*			
ANR	1301900	CastExpression	( double ) ( plp -> width . x )		1301865	0					
ANR	1301901	CastTarget	double		1301865	0					
ANR	1301902	MemberAccess	plp -> width . x		1301865	1					
ANR	1301903	PtrMemberAccess	plp -> width		1301865	0					
ANR	1301904	Identifier	plp		1301865	0					
ANR	1301905	Identifier	width		1301865	1					
ANR	1301906	Identifier	x		1301865	1					
ANR	1301907	MemberAccess	nplp -> width . y		1301865	1					
ANR	1301908	PtrMemberAccess	nplp -> width		1301865	0					
ANR	1301909	Identifier	nplp		1301865	0					
ANR	1301910	Identifier	width		1301865	1					
ANR	1301911	Identifier	y		1301865	1					
ANR	1301912	ExpressionStatement	r = ( double ) ( nplp -> width . x ) * ( plp -> width . y )	2557:4:105019:105081	1301865	5	True				
ANR	1301913	AssignmentExpression	r = ( double ) ( nplp -> width . x ) * ( plp -> width . y )		1301865	0		=			
ANR	1301914	Identifier	r		1301865	0					
ANR	1301915	MultiplicativeExpression	( double ) ( nplp -> width . x ) * ( plp -> width . y )		1301865	1		*			
ANR	1301916	CastExpression	( double ) ( nplp -> width . x )		1301865	0					
ANR	1301917	CastTarget	double		1301865	0					
ANR	1301918	MemberAccess	nplp -> width . x		1301865	1					
ANR	1301919	PtrMemberAccess	nplp -> width		1301865	0					
ANR	1301920	Identifier	nplp		1301865	0					
ANR	1301921	Identifier	width		1301865	1					
ANR	1301922	Identifier	x		1301865	1					
ANR	1301923	MemberAccess	plp -> width . y		1301865	1					
ANR	1301924	PtrMemberAccess	plp -> width		1301865	0					
ANR	1301925	Identifier	plp		1301865	0					
ANR	1301926	Identifier	width		1301865	1					
ANR	1301927	Identifier	y		1301865	1					
ANR	1301928	IfStatement	if ( l == r )		1301865	6					
ANR	1301929	Condition	l == r	2559:8:105092:105097	1301865	0	True				
ANR	1301930	EqualityExpression	l == r		1301865	0		==			
ANR	1301931	Identifier	l		1301865	0					
ANR	1301932	Identifier	r		1301865	1					
ANR	1301933	CompoundStatement		10:16:263:263	1301865	1					
ANR	1301934	IfStatement	if ( cap )		1301865	0					
ANR	1301935	Condition	cap	2560:12:105114:105116	1301865	0	True				
ANR	1301936	Identifier	cap		1301865	0					
ANR	1301937	ReturnStatement	"return add_pie_cap ( ppath , & plp -> e ) ;"	2561:12:105131:105165	1301865	1	True				
ANR	1301938	CallExpression	"add_pie_cap ( ppath , & plp -> e )"		1301865	0					
ANR	1301939	Callee	add_pie_cap		1301865	0					
ANR	1301940	Identifier	add_pie_cap		1301865	0					
ANR	1301941	ArgumentList	ppath		1301865	1					
ANR	1301942	Argument	ppath		1301865	0					
ANR	1301943	Identifier	ppath		1301865	0					
ANR	1301944	Argument	& plp -> e		1301865	1					
ANR	1301945	UnaryOperationExpression	& plp -> e		1301865	0					
ANR	1301946	UnaryOperator	&		1301865	0					
ANR	1301947	PtrMemberAccess	plp -> e		1301865	1					
ANR	1301948	Identifier	plp		1301865	0					
ANR	1301949	Identifier	e		1301865	1					
ANR	1301950	ElseStatement	else		1301865	0					
ANR	1301951	ReturnStatement	"return gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y ) ;"	2563:12:105192:105248	1301865	0	True				
ANR	1301952	CallExpression	"gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y )"		1301865	0					
ANR	1301953	Callee	gx_path_add_line		1301865	0					
ANR	1301954	Identifier	gx_path_add_line		1301865	0					
ANR	1301955	ArgumentList	ppath		1301865	1					
ANR	1301956	Argument	ppath		1301865	0					
ANR	1301957	Identifier	ppath		1301865	0					
ANR	1301958	Argument	plp -> e . ce . x		1301865	1					
ANR	1301959	MemberAccess	plp -> e . ce . x		1301865	0					
ANR	1301960	MemberAccess	plp -> e . ce		1301865	0					
ANR	1301961	PtrMemberAccess	plp -> e		1301865	0					
ANR	1301962	Identifier	plp		1301865	0					
ANR	1301963	Identifier	e		1301865	1					
ANR	1301964	Identifier	ce		1301865	1					
ANR	1301965	Identifier	x		1301865	1					
ANR	1301966	Argument	plp -> e . ce . y		1301865	2					
ANR	1301967	MemberAccess	plp -> e . ce . y		1301865	0					
ANR	1301968	MemberAccess	plp -> e . ce		1301865	0					
ANR	1301969	PtrMemberAccess	plp -> e		1301865	0					
ANR	1301970	Identifier	plp		1301865	0					
ANR	1301971	Identifier	e		1301865	1					
ANR	1301972	Identifier	ce		1301865	1					
ANR	1301973	Identifier	y		1301865	1					
ANR	1301974	ExpressionStatement	ccw = ( l > r )	2566:4:105261:105274	1301865	7	True				
ANR	1301975	AssignmentExpression	ccw = ( l > r )		1301865	0		=			
ANR	1301976	Identifier	ccw		1301865	0					
ANR	1301977	RelationalExpression	l > r		1301865	1		>			
ANR	1301978	Identifier	l		1301865	0					
ANR	1301979	Identifier	r		1301865	1					
ANR	1301980	ExpressionStatement	ccw ^= reflected	2568:4:105281:105297	1301865	8	True				
ANR	1301981	AssignmentExpression	ccw ^= reflected		1301865	0		^=			
ANR	1301982	Identifier	ccw		1301865	0					
ANR	1301983	Identifier	reflected		1301865	1					
ANR	1301984	IfStatement	if ( ccw )		1301865	9					
ANR	1301985	Condition	ccw	2571:8:105364:105366	1301865	0	True				
ANR	1301986	Identifier	ccw		1301865	0					
ANR	1301987	CompoundStatement		22:13:532:532	1301865	1					
ANR	1301988	ExpressionStatement	current = & plp -> e . co	2572:8:105379:105406	1301865	0	True				
ANR	1301989	AssignmentExpression	current = & plp -> e . co		1301865	0		=			
ANR	1301990	Identifier	current		1301865	0					
ANR	1301991	UnaryOperationExpression	& plp -> e . co		1301865	1					
ANR	1301992	UnaryOperator	&		1301865	0					
ANR	1301993	MemberAccess	plp -> e . co		1301865	1					
ANR	1301994	PtrMemberAccess	plp -> e		1301865	0					
ANR	1301995	Identifier	plp		1301865	0					
ANR	1301996	Identifier	e		1301865	1					
ANR	1301997	Identifier	co		1301865	1					
ANR	1301998	ExpressionStatement	final = & nplp -> o . ce	2573:8:105416:105443	1301865	1	True				
ANR	1301999	AssignmentExpression	final = & nplp -> o . ce		1301865	0		=			
ANR	1302000	Identifier	final		1301865	0					
ANR	1302001	UnaryOperationExpression	& nplp -> o . ce		1301865	1					
ANR	1302002	UnaryOperator	&		1301865	0					
ANR	1302003	MemberAccess	nplp -> o . ce		1301865	1					
ANR	1302004	PtrMemberAccess	nplp -> o		1301865	0					
ANR	1302005	Identifier	nplp		1301865	0					
ANR	1302006	Identifier	o		1301865	1					
ANR	1302007	Identifier	ce		1301865	1					
ANR	1302008	ExpressionStatement	tangent = & plp -> e . cdelta	2574:8:105453:105484	1301865	2	True				
ANR	1302009	AssignmentExpression	tangent = & plp -> e . cdelta		1301865	0		=			
ANR	1302010	Identifier	tangent		1301865	0					
ANR	1302011	UnaryOperationExpression	& plp -> e . cdelta		1301865	1					
ANR	1302012	UnaryOperator	&		1301865	0					
ANR	1302013	MemberAccess	plp -> e . cdelta		1301865	1					
ANR	1302014	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302015	Identifier	plp		1301865	0					
ANR	1302016	Identifier	e		1301865	1					
ANR	1302017	Identifier	cdelta		1301865	1					
ANR	1302018	ExpressionStatement	final_tangent = & nplp -> o . cdelta	2575:8:105494:105525	1301865	3	True				
ANR	1302019	AssignmentExpression	final_tangent = & nplp -> o . cdelta		1301865	0		=			
ANR	1302020	Identifier	final_tangent		1301865	0					
ANR	1302021	UnaryOperationExpression	& nplp -> o . cdelta		1301865	1					
ANR	1302022	UnaryOperator	&		1301865	0					
ANR	1302023	MemberAccess	nplp -> o . cdelta		1301865	1					
ANR	1302024	PtrMemberAccess	nplp -> o		1301865	0					
ANR	1302025	Identifier	nplp		1301865	0					
ANR	1302026	Identifier	o		1301865	1					
ANR	1302027	Identifier	cdelta		1301865	1					
ANR	1302028	IfStatement	if ( current -> x == final -> x && current -> y == final -> y )		1301865	4					
ANR	1302029	Condition	current -> x == final -> x && current -> y == final -> y	2577:12:105580:105627	1301865	0	True				
ANR	1302030	AndExpression	current -> x == final -> x && current -> y == final -> y		1301865	0		&&			
ANR	1302031	EqualityExpression	current -> x == final -> x		1301865	0		==			
ANR	1302032	PtrMemberAccess	current -> x		1301865	0					
ANR	1302033	Identifier	current		1301865	0					
ANR	1302034	Identifier	x		1301865	1					
ANR	1302035	PtrMemberAccess	final -> x		1301865	1					
ANR	1302036	Identifier	final		1301865	0					
ANR	1302037	Identifier	x		1301865	1					
ANR	1302038	EqualityExpression	current -> y == final -> y		1301865	1		==			
ANR	1302039	PtrMemberAccess	current -> y		1301865	0					
ANR	1302040	Identifier	current		1301865	0					
ANR	1302041	Identifier	y		1301865	1					
ANR	1302042	PtrMemberAccess	final -> y		1301865	1					
ANR	1302043	Identifier	final		1301865	0					
ANR	1302044	Identifier	y		1301865	1					
ANR	1302045	CompoundStatement		28:62:793:793	1301865	1					
ANR	1302046	ReturnStatement	"return gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y ) ;"	2578:12:105644:105700	1301865	0	True				
ANR	1302047	CallExpression	"gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y )"		1301865	0					
ANR	1302048	Callee	gx_path_add_line		1301865	0					
ANR	1302049	Identifier	gx_path_add_line		1301865	0					
ANR	1302050	ArgumentList	ppath		1301865	1					
ANR	1302051	Argument	ppath		1301865	0					
ANR	1302052	Identifier	ppath		1301865	0					
ANR	1302053	Argument	plp -> e . ce . x		1301865	1					
ANR	1302054	MemberAccess	plp -> e . ce . x		1301865	0					
ANR	1302055	MemberAccess	plp -> e . ce		1301865	0					
ANR	1302056	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302057	Identifier	plp		1301865	0					
ANR	1302058	Identifier	e		1301865	1					
ANR	1302059	Identifier	ce		1301865	1					
ANR	1302060	Identifier	x		1301865	1					
ANR	1302061	Argument	plp -> e . ce . y		1301865	2					
ANR	1302062	MemberAccess	plp -> e . ce . y		1301865	0					
ANR	1302063	MemberAccess	plp -> e . ce		1301865	0					
ANR	1302064	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302065	Identifier	plp		1301865	0					
ANR	1302066	Identifier	e		1301865	1					
ANR	1302067	Identifier	ce		1301865	1					
ANR	1302068	Identifier	y		1301865	1					
ANR	1302069	ElseStatement	else		1301865	0					
ANR	1302070	CompoundStatement		31:11:886:886	1301865	0					
ANR	1302071	ExpressionStatement	current = & nplp -> o . co	2581:8:105733:105760	1301865	0	True				
ANR	1302072	AssignmentExpression	current = & nplp -> o . co		1301865	0		=			
ANR	1302073	Identifier	current		1301865	0					
ANR	1302074	UnaryOperationExpression	& nplp -> o . co		1301865	1					
ANR	1302075	UnaryOperator	&		1301865	0					
ANR	1302076	MemberAccess	nplp -> o . co		1301865	1					
ANR	1302077	PtrMemberAccess	nplp -> o		1301865	0					
ANR	1302078	Identifier	nplp		1301865	0					
ANR	1302079	Identifier	o		1301865	1					
ANR	1302080	Identifier	co		1301865	1					
ANR	1302081	ExpressionStatement	final = & plp -> e . ce	2582:8:105770:105797	1301865	1	True				
ANR	1302082	AssignmentExpression	final = & plp -> e . ce		1301865	0		=			
ANR	1302083	Identifier	final		1301865	0					
ANR	1302084	UnaryOperationExpression	& plp -> e . ce		1301865	1					
ANR	1302085	UnaryOperator	&		1301865	0					
ANR	1302086	MemberAccess	plp -> e . ce		1301865	1					
ANR	1302087	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302088	Identifier	plp		1301865	0					
ANR	1302089	Identifier	e		1301865	1					
ANR	1302090	Identifier	ce		1301865	1					
ANR	1302091	ExpressionStatement	tangent = & nplp -> o . cdelta	2583:8:105807:105838	1301865	2	True				
ANR	1302092	AssignmentExpression	tangent = & nplp -> o . cdelta		1301865	0		=			
ANR	1302093	Identifier	tangent		1301865	0					
ANR	1302094	UnaryOperationExpression	& nplp -> o . cdelta		1301865	1					
ANR	1302095	UnaryOperator	&		1301865	0					
ANR	1302096	MemberAccess	nplp -> o . cdelta		1301865	1					
ANR	1302097	PtrMemberAccess	nplp -> o		1301865	0					
ANR	1302098	Identifier	nplp		1301865	0					
ANR	1302099	Identifier	o		1301865	1					
ANR	1302100	Identifier	cdelta		1301865	1					
ANR	1302101	ExpressionStatement	final_tangent = & plp -> e . cdelta	2584:8:105848:105879	1301865	3	True				
ANR	1302102	AssignmentExpression	final_tangent = & plp -> e . cdelta		1301865	0		=			
ANR	1302103	Identifier	final_tangent		1301865	0					
ANR	1302104	UnaryOperationExpression	& plp -> e . cdelta		1301865	1					
ANR	1302105	UnaryOperator	&		1301865	0					
ANR	1302106	MemberAccess	plp -> e . cdelta		1301865	1					
ANR	1302107	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302108	Identifier	plp		1301865	0					
ANR	1302109	Identifier	e		1301865	1					
ANR	1302110	Identifier	cdelta		1301865	1					
ANR	1302111	ExpressionStatement	"code = gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y )"	2585:8:105889:105943	1301865	4	True				
ANR	1302112	AssignmentExpression	"code = gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y )"		1301865	0		=			
ANR	1302113	Identifier	code		1301865	0					
ANR	1302114	CallExpression	"gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y )"		1301865	1					
ANR	1302115	Callee	gx_path_add_line		1301865	0					
ANR	1302116	Identifier	gx_path_add_line		1301865	0					
ANR	1302117	ArgumentList	ppath		1301865	1					
ANR	1302118	Argument	ppath		1301865	0					
ANR	1302119	Identifier	ppath		1301865	0					
ANR	1302120	Argument	plp -> e . p . x		1301865	1					
ANR	1302121	MemberAccess	plp -> e . p . x		1301865	0					
ANR	1302122	MemberAccess	plp -> e . p		1301865	0					
ANR	1302123	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302124	Identifier	plp		1301865	0					
ANR	1302125	Identifier	e		1301865	1					
ANR	1302126	Identifier	p		1301865	1					
ANR	1302127	Identifier	x		1301865	1					
ANR	1302128	Argument	plp -> e . p . y		1301865	2					
ANR	1302129	MemberAccess	plp -> e . p . y		1301865	0					
ANR	1302130	MemberAccess	plp -> e . p		1301865	0					
ANR	1302131	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302132	Identifier	plp		1301865	0					
ANR	1302133	Identifier	e		1301865	1					
ANR	1302134	Identifier	p		1301865	1					
ANR	1302135	Identifier	y		1301865	1					
ANR	1302136	IfStatement	if ( code < 0 )		1301865	5					
ANR	1302137	Condition	code < 0	2586:12:105957:105964	1301865	0	True				
ANR	1302138	RelationalExpression	code < 0		1301865	0		<			
ANR	1302139	Identifier	code		1301865	0					
ANR	1302140	PrimaryExpression	0		1301865	1					
ANR	1302141	ReturnStatement	return code ;	2587:12:105979:105990	1301865	1	True				
ANR	1302142	Identifier	code		1301865	0					
ANR	1302143	ExpressionStatement	"code = gx_path_add_line ( ppath , current -> x , current -> y )"	2588:8:106000:106054	1301865	6	True				
ANR	1302144	AssignmentExpression	"code = gx_path_add_line ( ppath , current -> x , current -> y )"		1301865	0		=			
ANR	1302145	Identifier	code		1301865	0					
ANR	1302146	CallExpression	"gx_path_add_line ( ppath , current -> x , current -> y )"		1301865	1					
ANR	1302147	Callee	gx_path_add_line		1301865	0					
ANR	1302148	Identifier	gx_path_add_line		1301865	0					
ANR	1302149	ArgumentList	ppath		1301865	1					
ANR	1302150	Argument	ppath		1301865	0					
ANR	1302151	Identifier	ppath		1301865	0					
ANR	1302152	Argument	current -> x		1301865	1					
ANR	1302153	PtrMemberAccess	current -> x		1301865	0					
ANR	1302154	Identifier	current		1301865	0					
ANR	1302155	Identifier	x		1301865	1					
ANR	1302156	Argument	current -> y		1301865	2					
ANR	1302157	PtrMemberAccess	current -> y		1301865	0					
ANR	1302158	Identifier	current		1301865	0					
ANR	1302159	Identifier	y		1301865	1					
ANR	1302160	IfStatement	if ( code < 0 )		1301865	7					
ANR	1302161	Condition	code < 0	2589:12:106068:106075	1301865	0	True				
ANR	1302162	RelationalExpression	code < 0		1301865	0		<			
ANR	1302163	Identifier	code		1301865	0					
ANR	1302164	PrimaryExpression	0		1301865	1					
ANR	1302165	ReturnStatement	return code ;	2590:12:106090:106101	1301865	1	True				
ANR	1302166	Identifier	code		1301865	0					
ANR	1302167	IfStatement	if ( current -> x == final -> x && current -> y == final -> y )		1301865	8					
ANR	1302168	Condition	current -> x == final -> x && current -> y == final -> y	2591:12:106115:106162	1301865	0	True				
ANR	1302169	AndExpression	current -> x == final -> x && current -> y == final -> y		1301865	0		&&			
ANR	1302170	EqualityExpression	current -> x == final -> x		1301865	0		==			
ANR	1302171	PtrMemberAccess	current -> x		1301865	0					
ANR	1302172	Identifier	current		1301865	0					
ANR	1302173	Identifier	x		1301865	1					
ANR	1302174	PtrMemberAccess	final -> x		1301865	1					
ANR	1302175	Identifier	final		1301865	0					
ANR	1302176	Identifier	x		1301865	1					
ANR	1302177	EqualityExpression	current -> y == final -> y		1301865	1		==			
ANR	1302178	PtrMemberAccess	current -> y		1301865	0					
ANR	1302179	Identifier	current		1301865	0					
ANR	1302180	Identifier	y		1301865	1					
ANR	1302181	PtrMemberAccess	final -> y		1301865	1					
ANR	1302182	Identifier	final		1301865	0					
ANR	1302183	Identifier	y		1301865	1					
ANR	1302184	ReturnStatement	return 0 ;	2592:12:106177:106185	1301865	1	True				
ANR	1302185	PrimaryExpression	0		1301865	0					
ANR	1302186	IfStatement	"if ( ( code = do_pie_join ( ppath , & plp -> e . p , current , tangent , final , final_tangent , ! reflected , & plp -> width ) ) < 0 )"		1301865	10					
ANR	1302187	Condition	"( code = do_pie_join ( ppath , & plp -> e . p , current , tangent , final , final_tangent , ! reflected , & plp -> width ) ) < 0"	2595:8:106202:106336	1301865	0	True				
ANR	1302188	RelationalExpression	"( code = do_pie_join ( ppath , & plp -> e . p , current , tangent , final , final_tangent , ! reflected , & plp -> width ) ) < 0"		1301865	0		<			
ANR	1302189	AssignmentExpression	"code = do_pie_join ( ppath , & plp -> e . p , current , tangent , final , final_tangent , ! reflected , & plp -> width )"		1301865	0		=			
ANR	1302190	Identifier	code		1301865	0					
ANR	1302191	CallExpression	"do_pie_join ( ppath , & plp -> e . p , current , tangent , final , final_tangent , ! reflected , & plp -> width )"		1301865	1					
ANR	1302192	Callee	do_pie_join		1301865	0					
ANR	1302193	Identifier	do_pie_join		1301865	0					
ANR	1302194	ArgumentList	ppath		1301865	1					
ANR	1302195	Argument	ppath		1301865	0					
ANR	1302196	Identifier	ppath		1301865	0					
ANR	1302197	Argument	& plp -> e . p		1301865	1					
ANR	1302198	UnaryOperationExpression	& plp -> e . p		1301865	0					
ANR	1302199	UnaryOperator	&		1301865	0					
ANR	1302200	MemberAccess	plp -> e . p		1301865	1					
ANR	1302201	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302202	Identifier	plp		1301865	0					
ANR	1302203	Identifier	e		1301865	1					
ANR	1302204	Identifier	p		1301865	1					
ANR	1302205	Argument	current		1301865	2					
ANR	1302206	Identifier	current		1301865	0					
ANR	1302207	Argument	tangent		1301865	3					
ANR	1302208	Identifier	tangent		1301865	0					
ANR	1302209	Argument	final		1301865	4					
ANR	1302210	Identifier	final		1301865	0					
ANR	1302211	Argument	final_tangent		1301865	5					
ANR	1302212	Identifier	final_tangent		1301865	0					
ANR	1302213	Argument	! reflected		1301865	6					
ANR	1302214	UnaryOperationExpression	! reflected		1301865	0					
ANR	1302215	UnaryOperator	!		1301865	0					
ANR	1302216	Identifier	reflected		1301865	1					
ANR	1302217	Argument	& plp -> width		1301865	7					
ANR	1302218	UnaryOperationExpression	& plp -> width		1301865	0					
ANR	1302219	UnaryOperator	&		1301865	0					
ANR	1302220	PtrMemberAccess	plp -> width		1301865	1					
ANR	1302221	Identifier	plp		1301865	0					
ANR	1302222	Identifier	width		1301865	1					
ANR	1302223	PrimaryExpression	0		1301865	1					
ANR	1302224	ReturnStatement	return code ;	2597:8:106347:106358	1301865	1	True				
ANR	1302225	Identifier	code		1301865	0					
ANR	1302226	IfStatement	"if ( ccw && ( ( code = gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y ) ) < 0 || ( code = gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y ) ) < 0 ) )"		1301865	11					
ANR	1302227	Condition	"ccw && ( ( code = gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y ) ) < 0 || ( code = gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y ) ) < 0 )"	2598:8:106368:106519	1301865	0	True				
ANR	1302228	AndExpression	"ccw && ( ( code = gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y ) ) < 0 || ( code = gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y ) ) < 0 )"		1301865	0		&&			
ANR	1302229	Identifier	ccw		1301865	0					
ANR	1302230	OrExpression	"( code = gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y ) ) < 0 || ( code = gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y ) ) < 0"		1301865	1		||			
ANR	1302231	RelationalExpression	"( code = gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y ) ) < 0"		1301865	0		<			
ANR	1302232	AssignmentExpression	"code = gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y )"		1301865	0		=			
ANR	1302233	Identifier	code		1301865	0					
ANR	1302234	CallExpression	"gx_path_add_line ( ppath , plp -> e . p . x , plp -> e . p . y )"		1301865	1					
ANR	1302235	Callee	gx_path_add_line		1301865	0					
ANR	1302236	Identifier	gx_path_add_line		1301865	0					
ANR	1302237	ArgumentList	ppath		1301865	1					
ANR	1302238	Argument	ppath		1301865	0					
ANR	1302239	Identifier	ppath		1301865	0					
ANR	1302240	Argument	plp -> e . p . x		1301865	1					
ANR	1302241	MemberAccess	plp -> e . p . x		1301865	0					
ANR	1302242	MemberAccess	plp -> e . p		1301865	0					
ANR	1302243	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302244	Identifier	plp		1301865	0					
ANR	1302245	Identifier	e		1301865	1					
ANR	1302246	Identifier	p		1301865	1					
ANR	1302247	Identifier	x		1301865	1					
ANR	1302248	Argument	plp -> e . p . y		1301865	2					
ANR	1302249	MemberAccess	plp -> e . p . y		1301865	0					
ANR	1302250	MemberAccess	plp -> e . p		1301865	0					
ANR	1302251	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302252	Identifier	plp		1301865	0					
ANR	1302253	Identifier	e		1301865	1					
ANR	1302254	Identifier	p		1301865	1					
ANR	1302255	Identifier	y		1301865	1					
ANR	1302256	PrimaryExpression	0		1301865	1					
ANR	1302257	RelationalExpression	"( code = gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y ) ) < 0"		1301865	1		<			
ANR	1302258	AssignmentExpression	"code = gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y )"		1301865	0		=			
ANR	1302259	Identifier	code		1301865	0					
ANR	1302260	CallExpression	"gx_path_add_line ( ppath , plp -> e . ce . x , plp -> e . ce . y )"		1301865	1					
ANR	1302261	Callee	gx_path_add_line		1301865	0					
ANR	1302262	Identifier	gx_path_add_line		1301865	0					
ANR	1302263	ArgumentList	ppath		1301865	1					
ANR	1302264	Argument	ppath		1301865	0					
ANR	1302265	Identifier	ppath		1301865	0					
ANR	1302266	Argument	plp -> e . ce . x		1301865	1					
ANR	1302267	MemberAccess	plp -> e . ce . x		1301865	0					
ANR	1302268	MemberAccess	plp -> e . ce		1301865	0					
ANR	1302269	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302270	Identifier	plp		1301865	0					
ANR	1302271	Identifier	e		1301865	1					
ANR	1302272	Identifier	ce		1301865	1					
ANR	1302273	Identifier	x		1301865	1					
ANR	1302274	Argument	plp -> e . ce . y		1301865	2					
ANR	1302275	MemberAccess	plp -> e . ce . y		1301865	0					
ANR	1302276	MemberAccess	plp -> e . ce		1301865	0					
ANR	1302277	PtrMemberAccess	plp -> e		1301865	0					
ANR	1302278	Identifier	plp		1301865	0					
ANR	1302279	Identifier	e		1301865	1					
ANR	1302280	Identifier	ce		1301865	1					
ANR	1302281	Identifier	y		1301865	1					
ANR	1302282	PrimaryExpression	0		1301865	1					
ANR	1302283	ReturnStatement	return code ;	2601:8:106530:106541	1301865	1	True				
ANR	1302284	Identifier	code		1301865	0					
ANR	1302285	ReturnStatement	return 0 ;	2603:4:106548:106556	1301865	12	True				
ANR	1302286	PrimaryExpression	0		1301865	0					
ANR	1302287	ReturnType	static int		1301865	1					
ANR	1302288	Identifier	add_pie_join		1301865	2					
ANR	1302289	ParameterList	"gx_path * ppath , pl_ptr plp , pl_ptr nplp , bool reflected , bool cap"		1301865	3					
ANR	1302290	Parameter	gx_path * ppath	2548:13:104755:104769	1301865	0	True				
ANR	1302291	ParameterType	gx_path *		1301865	0					
ANR	1302292	Identifier	ppath		1301865	1					
ANR	1302293	Parameter	pl_ptr plp	2548:30:104772:104781	1301865	1	True				
ANR	1302294	ParameterType	pl_ptr		1301865	0					
ANR	1302295	Identifier	plp		1301865	1					
ANR	1302296	Parameter	pl_ptr nplp	2548:42:104784:104794	1301865	2	True				
ANR	1302297	ParameterType	pl_ptr		1301865	0					
ANR	1302298	Identifier	nplp		1301865	1					
ANR	1302299	Parameter	bool reflected	2548:55:104797:104810	1301865	3	True				
ANR	1302300	ParameterType	bool		1301865	0					
ANR	1302301	Identifier	reflected		1301865	1					
ANR	1302302	Parameter	bool cap	2549:13:104826:104833	1301865	4	True				
ANR	1302303	ParameterType	bool		1301865	0					
ANR	1302304	Identifier	cap		1301865	1					
ANR	1302305	CFGEntryNode	ENTRY		1301865		True				
ANR	1302306	CFGExitNode	EXIT		1301865		True				
ANR	1302307	Symbol	plp -> width . y		1301865						
ANR	1302308	Symbol	plp -> width . x		1301865						
ANR	1302309	Symbol	final -> y		1301865						
ANR	1302310	Symbol	code		1301865						
ANR	1302311	Symbol	add_pie_cap		1301865						
ANR	1302312	Symbol	& nplp -> o		1301865						
ANR	1302313	Symbol	final -> x		1301865						
ANR	1302314	Symbol	& plp -> e . cdelta		1301865						
ANR	1302315	Symbol	* current		1301865						
ANR	1302316	Symbol	plp -> e . p . y		1301865						
ANR	1302317	Symbol	reflected		1301865						
ANR	1302318	Symbol	plp -> e . p . x		1301865						
ANR	1302319	Symbol	ppath		1301865						
ANR	1302320	Symbol	& plp -> e		1301865						
ANR	1302321	Symbol	& plp -> e . ce		1301865						
ANR	1302322	Symbol	plp -> width		1301865						
ANR	1302323	Symbol	nplp -> width		1301865						
ANR	1302324	Symbol	current		1301865						
ANR	1302325	Symbol	tangent		1301865						
ANR	1302326	Symbol	cap		1301865						
ANR	1302327	Symbol	final_tangent		1301865						
ANR	1302328	Symbol	ccw		1301865						
ANR	1302329	Symbol	plp -> e . ce		1301865						
ANR	1302330	Symbol	nplp -> o		1301865						
ANR	1302331	Symbol	& nplp -> o . cdelta		1301865						
ANR	1302332	Symbol	& plp -> width		1301865						
ANR	1302333	Symbol	* plp		1301865						
ANR	1302334	Symbol	* nplp		1301865						
ANR	1302335	Symbol	current -> y		1301865						
ANR	1302336	Symbol	current -> x		1301865						
ANR	1302337	Symbol	& nplp -> o . co		1301865						
ANR	1302338	Symbol	l		1301865						
ANR	1302339	Symbol	& nplp -> o . ce		1301865						
ANR	1302340	Symbol	* final		1301865						
ANR	1302341	Symbol	nplp -> width . y		1301865						
ANR	1302342	Symbol	r		1301865						
ANR	1302343	Symbol	plp -> e . ce . x		1301865						
ANR	1302344	Symbol	plp -> e . ce . y		1301865						
ANR	1302345	Symbol	plp -> e . p		1301865						
ANR	1302346	Symbol	plp		1301865						
ANR	1302347	Symbol	nplp		1301865						
ANR	1302348	Symbol	gx_path_add_line		1301865						
ANR	1302349	Symbol	& plp -> e . co		1301865						
ANR	1302350	Symbol	final		1301865						
ANR	1302351	Symbol	plp -> e		1301865						
ANR	1302352	Symbol	do_pie_join		1301865						
ANR	1302353	Symbol	& plp -> e . p		1301865						
ANR	1302354	Symbol	nplp -> width . x		1301865						
ANR	1302355	Function	add_pie_join_fast_cw	2607:0:106600:106982							
ANR	1302356	FunctionDef	"add_pie_join_fast_cw (gx_path * rpath , pl_ptr plp , pl_ptr nplp , bool reflected)"		1302355	0					
ANR	1302357	CompoundStatement		2609:0:106690:106982	1302355	0					
ANR	1302358	IfStatement	if ( plp -> e . ce . x == nplp -> o . co . x && plp -> e . ce . y == nplp -> o . co . y )		1302355	0					
ANR	1302359	Condition	plp -> e . ce . x == nplp -> o . co . x && plp -> e . ce . y == nplp -> o . co . y	2611:8:106756:106813	1302355	0	True				
ANR	1302360	AndExpression	plp -> e . ce . x == nplp -> o . co . x && plp -> e . ce . y == nplp -> o . co . y		1302355	0		&&			
ANR	1302361	EqualityExpression	plp -> e . ce . x == nplp -> o . co . x		1302355	0		==			
ANR	1302362	MemberAccess	plp -> e . ce . x		1302355	0					
ANR	1302363	MemberAccess	plp -> e . ce		1302355	0					
ANR	1302364	PtrMemberAccess	plp -> e		1302355	0					
ANR	1302365	Identifier	plp		1302355	0					
ANR	1302366	Identifier	e		1302355	1					
ANR	1302367	Identifier	ce		1302355	1					
ANR	1302368	Identifier	x		1302355	1					
ANR	1302369	MemberAccess	nplp -> o . co . x		1302355	1					
ANR	1302370	MemberAccess	nplp -> o . co		1302355	0					
ANR	1302371	PtrMemberAccess	nplp -> o		1302355	0					
ANR	1302372	Identifier	nplp		1302355	0					
ANR	1302373	Identifier	o		1302355	1					
ANR	1302374	Identifier	co		1302355	1					
ANR	1302375	Identifier	x		1302355	1					
ANR	1302376	EqualityExpression	plp -> e . ce . y == nplp -> o . co . y		1302355	1		==			
ANR	1302377	MemberAccess	plp -> e . ce . y		1302355	0					
ANR	1302378	MemberAccess	plp -> e . ce		1302355	0					
ANR	1302379	PtrMemberAccess	plp -> e		1302355	0					
ANR	1302380	Identifier	plp		1302355	0					
ANR	1302381	Identifier	e		1302355	1					
ANR	1302382	Identifier	ce		1302355	1					
ANR	1302383	Identifier	y		1302355	1					
ANR	1302384	MemberAccess	nplp -> o . co . y		1302355	1					
ANR	1302385	MemberAccess	nplp -> o . co		1302355	0					
ANR	1302386	PtrMemberAccess	nplp -> o		1302355	0					
ANR	1302387	Identifier	nplp		1302355	0					
ANR	1302388	Identifier	o		1302355	1					
ANR	1302389	Identifier	co		1302355	1					
ANR	1302390	Identifier	y		1302355	1					
ANR	1302391	ReturnStatement	return 0 ;	2612:8:106824:106832	1302355	1	True				
ANR	1302392	PrimaryExpression	0		1302355	0					
ANR	1302393	ReturnStatement	"return do_pie_join ( rpath , & plp -> e . p , & plp -> e . ce , & plp -> e . cdelta , & nplp -> o . co , & nplp -> o . cdelta , reflected , & plp -> width ) ;"	2614:4:106839:106980	1302355	1	True				
ANR	1302394	CallExpression	"do_pie_join ( rpath , & plp -> e . p , & plp -> e . ce , & plp -> e . cdelta , & nplp -> o . co , & nplp -> o . cdelta , reflected , & plp -> width )"		1302355	0					
ANR	1302395	Callee	do_pie_join		1302355	0					
ANR	1302396	Identifier	do_pie_join		1302355	0					
ANR	1302397	ArgumentList	rpath		1302355	1					
ANR	1302398	Argument	rpath		1302355	0					
ANR	1302399	Identifier	rpath		1302355	0					
ANR	1302400	Argument	& plp -> e . p		1302355	1					
ANR	1302401	UnaryOperationExpression	& plp -> e . p		1302355	0					
ANR	1302402	UnaryOperator	&		1302355	0					
ANR	1302403	MemberAccess	plp -> e . p		1302355	1					
ANR	1302404	PtrMemberAccess	plp -> e		1302355	0					
ANR	1302405	Identifier	plp		1302355	0					
ANR	1302406	Identifier	e		1302355	1					
ANR	1302407	Identifier	p		1302355	1					
ANR	1302408	Argument	& plp -> e . ce		1302355	2					
ANR	1302409	UnaryOperationExpression	& plp -> e . ce		1302355	0					
ANR	1302410	UnaryOperator	&		1302355	0					
ANR	1302411	MemberAccess	plp -> e . ce		1302355	1					
ANR	1302412	PtrMemberAccess	plp -> e		1302355	0					
ANR	1302413	Identifier	plp		1302355	0					
ANR	1302414	Identifier	e		1302355	1					
ANR	1302415	Identifier	ce		1302355	1					
ANR	1302416	Argument	& plp -> e . cdelta		1302355	3					
ANR	1302417	UnaryOperationExpression	& plp -> e . cdelta		1302355	0					
ANR	1302418	UnaryOperator	&		1302355	0					
ANR	1302419	MemberAccess	plp -> e . cdelta		1302355	1					
ANR	1302420	PtrMemberAccess	plp -> e		1302355	0					
ANR	1302421	Identifier	plp		1302355	0					
ANR	1302422	Identifier	e		1302355	1					
ANR	1302423	Identifier	cdelta		1302355	1					
ANR	1302424	Argument	& nplp -> o . co		1302355	4					
ANR	1302425	UnaryOperationExpression	& nplp -> o . co		1302355	0					
ANR	1302426	UnaryOperator	&		1302355	0					
ANR	1302427	MemberAccess	nplp -> o . co		1302355	1					
ANR	1302428	PtrMemberAccess	nplp -> o		1302355	0					
ANR	1302429	Identifier	nplp		1302355	0					
ANR	1302430	Identifier	o		1302355	1					
ANR	1302431	Identifier	co		1302355	1					
ANR	1302432	Argument	& nplp -> o . cdelta		1302355	5					
ANR	1302433	UnaryOperationExpression	& nplp -> o . cdelta		1302355	0					
ANR	1302434	UnaryOperator	&		1302355	0					
ANR	1302435	MemberAccess	nplp -> o . cdelta		1302355	1					
ANR	1302436	PtrMemberAccess	nplp -> o		1302355	0					
ANR	1302437	Identifier	nplp		1302355	0					
ANR	1302438	Identifier	o		1302355	1					
ANR	1302439	Identifier	cdelta		1302355	1					
ANR	1302440	Argument	reflected		1302355	6					
ANR	1302441	Identifier	reflected		1302355	0					
ANR	1302442	Argument	& plp -> width		1302355	7					
ANR	1302443	UnaryOperationExpression	& plp -> width		1302355	0					
ANR	1302444	UnaryOperator	&		1302355	0					
ANR	1302445	PtrMemberAccess	plp -> width		1302355	1					
ANR	1302446	Identifier	plp		1302355	0					
ANR	1302447	Identifier	width		1302355	1					
ANR	1302448	ReturnType	static int		1302355	1					
ANR	1302449	Identifier	add_pie_join_fast_cw		1302355	2					
ANR	1302450	ParameterList	"gx_path * rpath , pl_ptr plp , pl_ptr nplp , bool reflected"		1302355	3					
ANR	1302451	Parameter	gx_path * rpath	2608:21:106632:106646	1302355	0	True				
ANR	1302452	ParameterType	gx_path *		1302355	0					
ANR	1302453	Identifier	rpath		1302355	1					
ANR	1302454	Parameter	pl_ptr plp	2608:38:106649:106658	1302355	1	True				
ANR	1302455	ParameterType	pl_ptr		1302355	0					
ANR	1302456	Identifier	plp		1302355	1					
ANR	1302457	Parameter	pl_ptr nplp	2608:50:106661:106671	1302355	2	True				
ANR	1302458	ParameterType	pl_ptr		1302355	0					
ANR	1302459	Identifier	nplp		1302355	1					
ANR	1302460	Parameter	bool reflected	2608:63:106674:106687	1302355	3	True				
ANR	1302461	ParameterType	bool		1302355	0					
ANR	1302462	Identifier	reflected		1302355	1					
ANR	1302463	CFGEntryNode	ENTRY		1302355		True				
ANR	1302464	CFGExitNode	EXIT		1302355		True				
ANR	1302465	Symbol	nplp -> o . co		1302355						
ANR	1302466	Symbol	& nplp -> o		1302355						
ANR	1302467	Symbol	& nplp -> o . co		1302355						
ANR	1302468	Symbol	& plp -> e . cdelta		1302355						
ANR	1302469	Symbol	reflected		1302355						
ANR	1302470	Symbol	& plp -> e		1302355						
ANR	1302471	Symbol	rpath		1302355						
ANR	1302472	Symbol	& plp -> e . ce		1302355						
ANR	1302473	Symbol	nplp -> o . co . x		1302355						
ANR	1302474	Symbol	nplp -> o . co . y		1302355						
ANR	1302475	Symbol	plp -> e . ce . x		1302355						
ANR	1302476	Symbol	plp -> e . ce . y		1302355						
ANR	1302477	Symbol	plp		1302355						
ANR	1302478	Symbol	nplp		1302355						
ANR	1302479	Symbol	plp -> e . ce		1302355						
ANR	1302480	Symbol	nplp -> o		1302355						
ANR	1302481	Symbol	plp -> e		1302355						
ANR	1302482	Symbol	& plp -> e . p		1302355						
ANR	1302483	Symbol	do_pie_join		1302355						
ANR	1302484	Symbol	& nplp -> o . cdelta		1302355						
ANR	1302485	Symbol	& plp -> width		1302355						
ANR	1302486	Symbol	* nplp		1302355						
ANR	1302487	Symbol	* plp		1302355						
ANR	1302488	Function	add_pie_join_fast_ccw	2618:0:106985:107406							
ANR	1302489	FunctionDef	"add_pie_join_fast_ccw (gx_path * ppath , pl_ptr plp , pl_ptr nplp , bool reflected)"		1302488	0					
ANR	1302490	CompoundStatement		2620:0:107076:107406	1302488	0					
ANR	1302491	IfStatement	if ( plp -> e . co . x == nplp -> o . ce . x && plp -> e . co . y == nplp -> o . ce . y )		1302488	0					
ANR	1302492	Condition	plp -> e . co . x == nplp -> o . ce . x && plp -> e . co . y == nplp -> o . ce . y	2623:8:107179:107236	1302488	0	True				
ANR	1302493	AndExpression	plp -> e . co . x == nplp -> o . ce . x && plp -> e . co . y == nplp -> o . ce . y		1302488	0		&&			
ANR	1302494	EqualityExpression	plp -> e . co . x == nplp -> o . ce . x		1302488	0		==			
ANR	1302495	MemberAccess	plp -> e . co . x		1302488	0					
ANR	1302496	MemberAccess	plp -> e . co		1302488	0					
ANR	1302497	PtrMemberAccess	plp -> e		1302488	0					
ANR	1302498	Identifier	plp		1302488	0					
ANR	1302499	Identifier	e		1302488	1					
ANR	1302500	Identifier	co		1302488	1					
ANR	1302501	Identifier	x		1302488	1					
ANR	1302502	MemberAccess	nplp -> o . ce . x		1302488	1					
ANR	1302503	MemberAccess	nplp -> o . ce		1302488	0					
ANR	1302504	PtrMemberAccess	nplp -> o		1302488	0					
ANR	1302505	Identifier	nplp		1302488	0					
ANR	1302506	Identifier	o		1302488	1					
ANR	1302507	Identifier	ce		1302488	1					
ANR	1302508	Identifier	x		1302488	1					
ANR	1302509	EqualityExpression	plp -> e . co . y == nplp -> o . ce . y		1302488	1		==			
ANR	1302510	MemberAccess	plp -> e . co . y		1302488	0					
ANR	1302511	MemberAccess	plp -> e . co		1302488	0					
ANR	1302512	PtrMemberAccess	plp -> e		1302488	0					
ANR	1302513	Identifier	plp		1302488	0					
ANR	1302514	Identifier	e		1302488	1					
ANR	1302515	Identifier	co		1302488	1					
ANR	1302516	Identifier	y		1302488	1					
ANR	1302517	MemberAccess	nplp -> o . ce . y		1302488	1					
ANR	1302518	MemberAccess	nplp -> o . ce		1302488	0					
ANR	1302519	PtrMemberAccess	nplp -> o		1302488	0					
ANR	1302520	Identifier	nplp		1302488	0					
ANR	1302521	Identifier	o		1302488	1					
ANR	1302522	Identifier	ce		1302488	1					
ANR	1302523	Identifier	y		1302488	1					
ANR	1302524	ReturnStatement	return 0 ;	2624:8:107247:107255	1302488	1	True				
ANR	1302525	PrimaryExpression	0		1302488	0					
ANR	1302526	ReturnStatement	"return do_pie_join ( ppath , & plp -> e . p , & plp -> e . co , & plp -> e . cdelta , & nplp -> o . ce , & nplp -> o . cdelta , ! reflected , & plp -> width ) ;"	2626:4:107262:107404	1302488	1	True				
ANR	1302527	CallExpression	"do_pie_join ( ppath , & plp -> e . p , & plp -> e . co , & plp -> e . cdelta , & nplp -> o . ce , & nplp -> o . cdelta , ! reflected , & plp -> width )"		1302488	0					
ANR	1302528	Callee	do_pie_join		1302488	0					
ANR	1302529	Identifier	do_pie_join		1302488	0					
ANR	1302530	ArgumentList	ppath		1302488	1					
ANR	1302531	Argument	ppath		1302488	0					
ANR	1302532	Identifier	ppath		1302488	0					
ANR	1302533	Argument	& plp -> e . p		1302488	1					
ANR	1302534	UnaryOperationExpression	& plp -> e . p		1302488	0					
ANR	1302535	UnaryOperator	&		1302488	0					
ANR	1302536	MemberAccess	plp -> e . p		1302488	1					
ANR	1302537	PtrMemberAccess	plp -> e		1302488	0					
ANR	1302538	Identifier	plp		1302488	0					
ANR	1302539	Identifier	e		1302488	1					
ANR	1302540	Identifier	p		1302488	1					
ANR	1302541	Argument	& plp -> e . co		1302488	2					
ANR	1302542	UnaryOperationExpression	& plp -> e . co		1302488	0					
ANR	1302543	UnaryOperator	&		1302488	0					
ANR	1302544	MemberAccess	plp -> e . co		1302488	1					
ANR	1302545	PtrMemberAccess	plp -> e		1302488	0					
ANR	1302546	Identifier	plp		1302488	0					
ANR	1302547	Identifier	e		1302488	1					
ANR	1302548	Identifier	co		1302488	1					
ANR	1302549	Argument	& plp -> e . cdelta		1302488	3					
ANR	1302550	UnaryOperationExpression	& plp -> e . cdelta		1302488	0					
ANR	1302551	UnaryOperator	&		1302488	0					
ANR	1302552	MemberAccess	plp -> e . cdelta		1302488	1					
ANR	1302553	PtrMemberAccess	plp -> e		1302488	0					
ANR	1302554	Identifier	plp		1302488	0					
ANR	1302555	Identifier	e		1302488	1					
ANR	1302556	Identifier	cdelta		1302488	1					
ANR	1302557	Argument	& nplp -> o . ce		1302488	4					
ANR	1302558	UnaryOperationExpression	& nplp -> o . ce		1302488	0					
ANR	1302559	UnaryOperator	&		1302488	0					
ANR	1302560	MemberAccess	nplp -> o . ce		1302488	1					
ANR	1302561	PtrMemberAccess	nplp -> o		1302488	0					
ANR	1302562	Identifier	nplp		1302488	0					
ANR	1302563	Identifier	o		1302488	1					
ANR	1302564	Identifier	ce		1302488	1					
ANR	1302565	Argument	& nplp -> o . cdelta		1302488	5					
ANR	1302566	UnaryOperationExpression	& nplp -> o . cdelta		1302488	0					
ANR	1302567	UnaryOperator	&		1302488	0					
ANR	1302568	MemberAccess	nplp -> o . cdelta		1302488	1					
ANR	1302569	PtrMemberAccess	nplp -> o		1302488	0					
ANR	1302570	Identifier	nplp		1302488	0					
ANR	1302571	Identifier	o		1302488	1					
ANR	1302572	Identifier	cdelta		1302488	1					
ANR	1302573	Argument	! reflected		1302488	6					
ANR	1302574	UnaryOperationExpression	! reflected		1302488	0					
ANR	1302575	UnaryOperator	!		1302488	0					
ANR	1302576	Identifier	reflected		1302488	1					
ANR	1302577	Argument	& plp -> width		1302488	7					
ANR	1302578	UnaryOperationExpression	& plp -> width		1302488	0					
ANR	1302579	UnaryOperator	&		1302488	0					
ANR	1302580	PtrMemberAccess	plp -> width		1302488	1					
ANR	1302581	Identifier	plp		1302488	0					
ANR	1302582	Identifier	width		1302488	1					
ANR	1302583	ReturnType	static int		1302488	1					
ANR	1302584	Identifier	add_pie_join_fast_ccw		1302488	2					
ANR	1302585	ParameterList	"gx_path * ppath , pl_ptr plp , pl_ptr nplp , bool reflected"		1302488	3					
ANR	1302586	Parameter	gx_path * ppath	2619:22:107018:107032	1302488	0	True				
ANR	1302587	ParameterType	gx_path *		1302488	0					
ANR	1302588	Identifier	ppath		1302488	1					
ANR	1302589	Parameter	pl_ptr plp	2619:39:107035:107044	1302488	1	True				
ANR	1302590	ParameterType	pl_ptr		1302488	0					
ANR	1302591	Identifier	plp		1302488	1					
ANR	1302592	Parameter	pl_ptr nplp	2619:51:107047:107057	1302488	2	True				
ANR	1302593	ParameterType	pl_ptr		1302488	0					
ANR	1302594	Identifier	nplp		1302488	1					
ANR	1302595	Parameter	bool reflected	2619:64:107060:107073	1302488	3	True				
ANR	1302596	ParameterType	bool		1302488	0					
ANR	1302597	Identifier	reflected		1302488	1					
ANR	1302598	CFGEntryNode	ENTRY		1302488		True				
ANR	1302599	CFGExitNode	EXIT		1302488		True				
ANR	1302600	Symbol	& nplp -> o		1302488						
ANR	1302601	Symbol	& plp -> e . cdelta		1302488						
ANR	1302602	Symbol	reflected		1302488						
ANR	1302603	Symbol	ppath		1302488						
ANR	1302604	Symbol	& plp -> e		1302488						
ANR	1302605	Symbol	& nplp -> o . ce		1302488						
ANR	1302606	Symbol	plp -> e . co . y		1302488						
ANR	1302607	Symbol	plp		1302488						
ANR	1302608	Symbol	nplp		1302488						
ANR	1302609	Symbol	plp -> e . co . x		1302488						
ANR	1302610	Symbol	plp -> e . co		1302488						
ANR	1302611	Symbol	nplp -> o . ce . y		1302488						
ANR	1302612	Symbol	nplp -> o . ce . x		1302488						
ANR	1302613	Symbol	& plp -> e . co		1302488						
ANR	1302614	Symbol	nplp -> o		1302488						
ANR	1302615	Symbol	plp -> e		1302488						
ANR	1302616	Symbol	do_pie_join		1302488						
ANR	1302617	Symbol	& plp -> e . p		1302488						
ANR	1302618	Symbol	& nplp -> o . cdelta		1302488						
ANR	1302619	Symbol	nplp -> o . ce		1302488						
ANR	1302620	Symbol	& plp -> width		1302488						
ANR	1302621	Symbol	* nplp		1302488						
ANR	1302622	Symbol	* plp		1302488						
ANR	1302623	Function	join_under_pie	2630:0:107409:109135							
ANR	1302624	FunctionDef	"join_under_pie (gx_path * ppath , pl_ptr plp , pl_ptr nplp , bool reflected)"		1302623	0					
ANR	1302625	CompoundStatement		2632:0:107493:109135	1302623	0					
ANR	1302626	IdentifierDeclStatement	int code ;	2633:4:107499:107507	1302623	0	True				
ANR	1302627	IdentifierDecl	code		1302623	0					
ANR	1302628	IdentifierDeclType	int		1302623	0					
ANR	1302629	Identifier	code		1302623	1					
ANR	1302630	IdentifierDeclStatement	"gs_fixed_point dirn1 , dirn2 , tangmeet ;"	2634:4:107513:107550	1302623	1	True				
ANR	1302631	IdentifierDecl	dirn1		1302623	0					
ANR	1302632	IdentifierDeclType	gs_fixed_point		1302623	0					
ANR	1302633	Identifier	dirn1		1302623	1					
ANR	1302634	IdentifierDecl	dirn2		1302623	1					
ANR	1302635	IdentifierDeclType	gs_fixed_point		1302623	0					
ANR	1302636	Identifier	dirn2		1302623	1					
ANR	1302637	IdentifierDecl	tangmeet		1302623	2					
ANR	1302638	IdentifierDeclType	gs_fixed_point		1302623	0					
ANR	1302639	Identifier	tangmeet		1302623	1					
ANR	1302640	IdentifierDeclStatement	"double l , r ;"	2635:4:107556:107567	1302623	2	True				
ANR	1302641	IdentifierDecl	l		1302623	0					
ANR	1302642	IdentifierDeclType	double		1302623	0					
ANR	1302643	Identifier	l		1302623	1					
ANR	1302644	IdentifierDecl	r		1302623	1					
ANR	1302645	IdentifierDeclType	double		1302623	0					
ANR	1302646	Identifier	r		1302623	1					
ANR	1302647	IdentifierDeclStatement	bool ccw ;	2636:4:107573:107581	1302623	3	True				
ANR	1302648	IdentifierDecl	ccw		1302623	0					
ANR	1302649	IdentifierDeclType	bool		1302623	0					
ANR	1302650	Identifier	ccw		1302623	1					
ANR	1302651	ExpressionStatement	l = ( double ) ( plp -> width . x ) * ( nplp -> width . y )	2638:4:107588:107650	1302623	4	True				
ANR	1302652	AssignmentExpression	l = ( double ) ( plp -> width . x ) * ( nplp -> width . y )		1302623	0		=			
ANR	1302653	Identifier	l		1302623	0					
ANR	1302654	MultiplicativeExpression	( double ) ( plp -> width . x ) * ( nplp -> width . y )		1302623	1		*			
ANR	1302655	CastExpression	( double ) ( plp -> width . x )		1302623	0					
ANR	1302656	CastTarget	double		1302623	0					
ANR	1302657	MemberAccess	plp -> width . x		1302623	1					
ANR	1302658	PtrMemberAccess	plp -> width		1302623	0					
ANR	1302659	Identifier	plp		1302623	0					
ANR	1302660	Identifier	width		1302623	1					
ANR	1302661	Identifier	x		1302623	1					
ANR	1302662	MemberAccess	nplp -> width . y		1302623	1					
ANR	1302663	PtrMemberAccess	nplp -> width		1302623	0					
ANR	1302664	Identifier	nplp		1302623	0					
ANR	1302665	Identifier	width		1302623	1					
ANR	1302666	Identifier	y		1302623	1					
ANR	1302667	ExpressionStatement	r = ( double ) ( nplp -> width . x ) * ( plp -> width . y )	2639:4:107656:107718	1302623	5	True				
ANR	1302668	AssignmentExpression	r = ( double ) ( nplp -> width . x ) * ( plp -> width . y )		1302623	0		=			
ANR	1302669	Identifier	r		1302623	0					
ANR	1302670	MultiplicativeExpression	( double ) ( nplp -> width . x ) * ( plp -> width . y )		1302623	1		*			
ANR	1302671	CastExpression	( double ) ( nplp -> width . x )		1302623	0					
ANR	1302672	CastTarget	double		1302623	0					
ANR	1302673	MemberAccess	nplp -> width . x		1302623	1					
ANR	1302674	PtrMemberAccess	nplp -> width		1302623	0					
ANR	1302675	Identifier	nplp		1302623	0					
ANR	1302676	Identifier	width		1302623	1					
ANR	1302677	Identifier	x		1302623	1					
ANR	1302678	MemberAccess	plp -> width . y		1302623	1					
ANR	1302679	PtrMemberAccess	plp -> width		1302623	0					
ANR	1302680	Identifier	plp		1302623	0					
ANR	1302681	Identifier	width		1302623	1					
ANR	1302682	Identifier	y		1302623	1					
ANR	1302683	IfStatement	if ( l == r )		1302623	6					
ANR	1302684	Condition	l == r	2641:8:107729:107734	1302623	0	True				
ANR	1302685	EqualityExpression	l == r		1302623	0		==			
ANR	1302686	Identifier	l		1302623	0					
ANR	1302687	Identifier	r		1302623	1					
ANR	1302688	ReturnStatement	return 0 ;	2642:8:107745:107753	1302623	1	True				
ANR	1302689	PrimaryExpression	0		1302623	0					
ANR	1302690	ExpressionStatement	ccw = ( l > r )	2644:4:107760:107773	1302623	7	True				
ANR	1302691	AssignmentExpression	ccw = ( l > r )		1302623	0		=			
ANR	1302692	Identifier	ccw		1302623	0					
ANR	1302693	RelationalExpression	l > r		1302623	1		>			
ANR	1302694	Identifier	l		1302623	0					
ANR	1302695	Identifier	r		1302623	1					
ANR	1302696	ExpressionStatement	ccw ^= reflected	2646:4:107780:107796	1302623	8	True				
ANR	1302697	AssignmentExpression	ccw ^= reflected		1302623	0		^=			
ANR	1302698	Identifier	ccw		1302623	0					
ANR	1302699	Identifier	reflected		1302623	1					
ANR	1302700	IfStatement	if ( ccw )		1302623	9					
ANR	1302701	Condition	ccw	2648:8:107807:107809	1302623	0	True				
ANR	1302702	Identifier	ccw		1302623	0					
ANR	1302703	CompoundStatement		17:13:318:318	1302623	1					
ANR	1302704	ExpressionStatement	dirn1 . x = - plp -> width . x	2649:8:107822:107846	1302623	0	True				
ANR	1302705	AssignmentExpression	dirn1 . x = - plp -> width . x		1302623	0		=			
ANR	1302706	MemberAccess	dirn1 . x		1302623	0					
ANR	1302707	Identifier	dirn1		1302623	0					
ANR	1302708	Identifier	x		1302623	1					
ANR	1302709	UnaryOperationExpression	- plp -> width . x		1302623	1					
ANR	1302710	UnaryOperator	-		1302623	0					
ANR	1302711	MemberAccess	plp -> width . x		1302623	1					
ANR	1302712	PtrMemberAccess	plp -> width		1302623	0					
ANR	1302713	Identifier	plp		1302623	0					
ANR	1302714	Identifier	width		1302623	1					
ANR	1302715	Identifier	x		1302623	1					
ANR	1302716	ExpressionStatement	dirn1 . y = - plp -> width . y	2650:8:107856:107880	1302623	1	True				
ANR	1302717	AssignmentExpression	dirn1 . y = - plp -> width . y		1302623	0		=			
ANR	1302718	MemberAccess	dirn1 . y		1302623	0					
ANR	1302719	Identifier	dirn1		1302623	0					
ANR	1302720	Identifier	y		1302623	1					
ANR	1302721	UnaryOperationExpression	- plp -> width . y		1302623	1					
ANR	1302722	UnaryOperator	-		1302623	0					
ANR	1302723	MemberAccess	plp -> width . y		1302623	1					
ANR	1302724	PtrMemberAccess	plp -> width		1302623	0					
ANR	1302725	Identifier	plp		1302623	0					
ANR	1302726	Identifier	width		1302623	1					
ANR	1302727	Identifier	y		1302623	1					
ANR	1302728	ExpressionStatement	dirn2 . x = - nplp -> width . x	2651:8:107890:107914	1302623	2	True				
ANR	1302729	AssignmentExpression	dirn2 . x = - nplp -> width . x		1302623	0		=			
ANR	1302730	MemberAccess	dirn2 . x		1302623	0					
ANR	1302731	Identifier	dirn2		1302623	0					
ANR	1302732	Identifier	x		1302623	1					
ANR	1302733	UnaryOperationExpression	- nplp -> width . x		1302623	1					
ANR	1302734	UnaryOperator	-		1302623	0					
ANR	1302735	MemberAccess	nplp -> width . x		1302623	1					
ANR	1302736	PtrMemberAccess	nplp -> width		1302623	0					
ANR	1302737	Identifier	nplp		1302623	0					
ANR	1302738	Identifier	width		1302623	1					
ANR	1302739	Identifier	x		1302623	1					
ANR	1302740	ExpressionStatement	dirn2 . y = - nplp -> width . y	2652:8:107924:107948	1302623	3	True				
ANR	1302741	AssignmentExpression	dirn2 . y = - nplp -> width . y		1302623	0		=			
ANR	1302742	MemberAccess	dirn2 . y		1302623	0					
ANR	1302743	Identifier	dirn2		1302623	0					
ANR	1302744	Identifier	y		1302623	1					
ANR	1302745	UnaryOperationExpression	- nplp -> width . y		1302623	1					
ANR	1302746	UnaryOperator	-		1302623	0					
ANR	1302747	MemberAccess	nplp -> width . y		1302623	1					
ANR	1302748	PtrMemberAccess	nplp -> width		1302623	0					
ANR	1302749	Identifier	nplp		1302623	0					
ANR	1302750	Identifier	width		1302623	1					
ANR	1302751	Identifier	y		1302623	1					
ANR	1302752	IfStatement	"if ( line_intersect ( & plp -> o . co , & dirn1 , & nplp -> e . ce , & dirn2 , & tangmeet ) != 0 )"		1302623	4					
ANR	1302753	Condition	"line_intersect ( & plp -> o . co , & dirn1 , & nplp -> e . ce , & dirn2 , & tangmeet ) != 0"	2653:12:107962:108060	1302623	0	True				
ANR	1302754	EqualityExpression	"line_intersect ( & plp -> o . co , & dirn1 , & nplp -> e . ce , & dirn2 , & tangmeet ) != 0"		1302623	0		!=			
ANR	1302755	CallExpression	"line_intersect ( & plp -> o . co , & dirn1 , & nplp -> e . ce , & dirn2 , & tangmeet )"		1302623	0					
ANR	1302756	Callee	line_intersect		1302623	0					
ANR	1302757	Identifier	line_intersect		1302623	0					
ANR	1302758	ArgumentList	& plp -> o . co		1302623	1					
ANR	1302759	Argument	& plp -> o . co		1302623	0					
ANR	1302760	UnaryOperationExpression	& plp -> o . co		1302623	0					
ANR	1302761	UnaryOperator	&		1302623	0					
ANR	1302762	MemberAccess	plp -> o . co		1302623	1					
ANR	1302763	PtrMemberAccess	plp -> o		1302623	0					
ANR	1302764	Identifier	plp		1302623	0					
ANR	1302765	Identifier	o		1302623	1					
ANR	1302766	Identifier	co		1302623	1					
ANR	1302767	Argument	& dirn1		1302623	1					
ANR	1302768	UnaryOperationExpression	& dirn1		1302623	0					
ANR	1302769	UnaryOperator	&		1302623	0					
ANR	1302770	Identifier	dirn1		1302623	1					
ANR	1302771	Argument	& nplp -> e . ce		1302623	2					
ANR	1302772	UnaryOperationExpression	& nplp -> e . ce		1302623	0					
ANR	1302773	UnaryOperator	&		1302623	0					
ANR	1302774	MemberAccess	nplp -> e . ce		1302623	1					
ANR	1302775	PtrMemberAccess	nplp -> e		1302623	0					
ANR	1302776	Identifier	nplp		1302623	0					
ANR	1302777	Identifier	e		1302623	1					
ANR	1302778	Identifier	ce		1302623	1					
ANR	1302779	Argument	& dirn2		1302623	3					
ANR	1302780	UnaryOperationExpression	& dirn2		1302623	0					
ANR	1302781	UnaryOperator	&		1302623	0					
ANR	1302782	Identifier	dirn2		1302623	1					
ANR	1302783	Argument	& tangmeet		1302623	4					
ANR	1302784	UnaryOperationExpression	& tangmeet		1302623	0					
ANR	1302785	UnaryOperator	&		1302623	0					
ANR	1302786	Identifier	tangmeet		1302623	1					
ANR	1302787	PrimaryExpression	0		1302623	1					
ANR	1302788	ReturnStatement	return 0 ;	2655:12:108075:108083	1302623	1	True				
ANR	1302789	PrimaryExpression	0		1302623	0					
ANR	1302790	IfStatement	"if ( ( code = gx_path_close_subpath ( ppath ) ) < 0 || ( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0 || ( code = gx_path_add_line ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & plp -> o . co , & plp -> o . cdelta , & nplp -> e . ce , & nplp -> e . cdelta , ! reflected , & plp -> width ) ) )"		1302623	5					
ANR	1302791	Condition	"( code = gx_path_close_subpath ( ppath ) ) < 0 || ( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0 || ( code = gx_path_add_line ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & plp -> o . co , & plp -> o . cdelta , & nplp -> e . ce , & nplp -> e . cdelta , ! reflected , & plp -> width ) )"	2656:12:108097:108492	1302623	0	True				
ANR	1302792	OrExpression	"( code = gx_path_close_subpath ( ppath ) ) < 0 || ( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0 || ( code = gx_path_add_line ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & plp -> o . co , & plp -> o . cdelta , & nplp -> e . ce , & nplp -> e . cdelta , ! reflected , & plp -> width ) )"		1302623	0		||			
ANR	1302793	RelationalExpression	( code = gx_path_close_subpath ( ppath ) ) < 0		1302623	0		<			
ANR	1302794	AssignmentExpression	code = gx_path_close_subpath ( ppath )		1302623	0		=			
ANR	1302795	Identifier	code		1302623	0					
ANR	1302796	CallExpression	gx_path_close_subpath ( ppath )		1302623	1					
ANR	1302797	Callee	gx_path_close_subpath		1302623	0					
ANR	1302798	Identifier	gx_path_close_subpath		1302623	0					
ANR	1302799	ArgumentList	ppath		1302623	1					
ANR	1302800	Argument	ppath		1302623	0					
ANR	1302801	Identifier	ppath		1302623	0					
ANR	1302802	PrimaryExpression	0		1302623	1					
ANR	1302803	OrExpression	"( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0 || ( code = gx_path_add_line ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & plp -> o . co , & plp -> o . cdelta , & nplp -> e . ce , & nplp -> e . cdelta , ! reflected , & plp -> width ) )"		1302623	1		||			
ANR	1302804	RelationalExpression	"( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0"		1302623	0		<			
ANR	1302805	AssignmentExpression	"code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y )"		1302623	0		=			
ANR	1302806	Identifier	code		1302623	0					
ANR	1302807	CallExpression	"gx_path_add_point ( ppath , tangmeet . x , tangmeet . y )"		1302623	1					
ANR	1302808	Callee	gx_path_add_point		1302623	0					
ANR	1302809	Identifier	gx_path_add_point		1302623	0					
ANR	1302810	ArgumentList	ppath		1302623	1					
ANR	1302811	Argument	ppath		1302623	0					
ANR	1302812	Identifier	ppath		1302623	0					
ANR	1302813	Argument	tangmeet . x		1302623	1					
ANR	1302814	MemberAccess	tangmeet . x		1302623	0					
ANR	1302815	Identifier	tangmeet		1302623	0					
ANR	1302816	Identifier	x		1302623	1					
ANR	1302817	Argument	tangmeet . y		1302623	2					
ANR	1302818	MemberAccess	tangmeet . y		1302623	0					
ANR	1302819	Identifier	tangmeet		1302623	0					
ANR	1302820	Identifier	y		1302623	1					
ANR	1302821	PrimaryExpression	0		1302623	1					
ANR	1302822	OrExpression	"( code = gx_path_add_line ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & plp -> o . co , & plp -> o . cdelta , & nplp -> e . ce , & nplp -> e . cdelta , ! reflected , & plp -> width ) )"		1302623	1		||			
ANR	1302823	RelationalExpression	"( code = gx_path_add_line ( ppath , plp -> o . co . x , plp -> o . co . y ) ) < 0"		1302623	0		<			
ANR	1302824	AssignmentExpression	"code = gx_path_add_line ( ppath , plp -> o . co . x , plp -> o . co . y )"		1302623	0		=			
ANR	1302825	Identifier	code		1302623	0					
ANR	1302826	CallExpression	"gx_path_add_line ( ppath , plp -> o . co . x , plp -> o . co . y )"		1302623	1					
ANR	1302827	Callee	gx_path_add_line		1302623	0					
ANR	1302828	Identifier	gx_path_add_line		1302623	0					
ANR	1302829	ArgumentList	ppath		1302623	1					
ANR	1302830	Argument	ppath		1302623	0					
ANR	1302831	Identifier	ppath		1302623	0					
ANR	1302832	Argument	plp -> o . co . x		1302623	1					
ANR	1302833	MemberAccess	plp -> o . co . x		1302623	0					
ANR	1302834	MemberAccess	plp -> o . co		1302623	0					
ANR	1302835	PtrMemberAccess	plp -> o		1302623	0					
ANR	1302836	Identifier	plp		1302623	0					
ANR	1302837	Identifier	o		1302623	1					
ANR	1302838	Identifier	co		1302623	1					
ANR	1302839	Identifier	x		1302623	1					
ANR	1302840	Argument	plp -> o . co . y		1302623	2					
ANR	1302841	MemberAccess	plp -> o . co . y		1302623	0					
ANR	1302842	MemberAccess	plp -> o . co		1302623	0					
ANR	1302843	PtrMemberAccess	plp -> o		1302623	0					
ANR	1302844	Identifier	plp		1302623	0					
ANR	1302845	Identifier	o		1302623	1					
ANR	1302846	Identifier	co		1302623	1					
ANR	1302847	Identifier	y		1302623	1					
ANR	1302848	PrimaryExpression	0		1302623	1					
ANR	1302849	AssignmentExpression	"code = do_pie_join ( ppath , & plp -> e . p , & plp -> o . co , & plp -> o . cdelta , & nplp -> e . ce , & nplp -> e . cdelta , ! reflected , & plp -> width )"		1302623	1		=			
ANR	1302850	Identifier	code		1302623	0					
ANR	1302851	CallExpression	"do_pie_join ( ppath , & plp -> e . p , & plp -> o . co , & plp -> o . cdelta , & nplp -> e . ce , & nplp -> e . cdelta , ! reflected , & plp -> width )"		1302623	1					
ANR	1302852	Callee	do_pie_join		1302623	0					
ANR	1302853	Identifier	do_pie_join		1302623	0					
ANR	1302854	ArgumentList	ppath		1302623	1					
ANR	1302855	Argument	ppath		1302623	0					
ANR	1302856	Identifier	ppath		1302623	0					
ANR	1302857	Argument	& plp -> e . p		1302623	1					
ANR	1302858	UnaryOperationExpression	& plp -> e . p		1302623	0					
ANR	1302859	UnaryOperator	&		1302623	0					
ANR	1302860	MemberAccess	plp -> e . p		1302623	1					
ANR	1302861	PtrMemberAccess	plp -> e		1302623	0					
ANR	1302862	Identifier	plp		1302623	0					
ANR	1302863	Identifier	e		1302623	1					
ANR	1302864	Identifier	p		1302623	1					
ANR	1302865	Argument	& plp -> o . co		1302623	2					
ANR	1302866	UnaryOperationExpression	& plp -> o . co		1302623	0					
ANR	1302867	UnaryOperator	&		1302623	0					
ANR	1302868	MemberAccess	plp -> o . co		1302623	1					
ANR	1302869	PtrMemberAccess	plp -> o		1302623	0					
ANR	1302870	Identifier	plp		1302623	0					
ANR	1302871	Identifier	o		1302623	1					
ANR	1302872	Identifier	co		1302623	1					
ANR	1302873	Argument	& plp -> o . cdelta		1302623	3					
ANR	1302874	UnaryOperationExpression	& plp -> o . cdelta		1302623	0					
ANR	1302875	UnaryOperator	&		1302623	0					
ANR	1302876	MemberAccess	plp -> o . cdelta		1302623	1					
ANR	1302877	PtrMemberAccess	plp -> o		1302623	0					
ANR	1302878	Identifier	plp		1302623	0					
ANR	1302879	Identifier	o		1302623	1					
ANR	1302880	Identifier	cdelta		1302623	1					
ANR	1302881	Argument	& nplp -> e . ce		1302623	4					
ANR	1302882	UnaryOperationExpression	& nplp -> e . ce		1302623	0					
ANR	1302883	UnaryOperator	&		1302623	0					
ANR	1302884	MemberAccess	nplp -> e . ce		1302623	1					
ANR	1302885	PtrMemberAccess	nplp -> e		1302623	0					
ANR	1302886	Identifier	nplp		1302623	0					
ANR	1302887	Identifier	e		1302623	1					
ANR	1302888	Identifier	ce		1302623	1					
ANR	1302889	Argument	& nplp -> e . cdelta		1302623	5					
ANR	1302890	UnaryOperationExpression	& nplp -> e . cdelta		1302623	0					
ANR	1302891	UnaryOperator	&		1302623	0					
ANR	1302892	MemberAccess	nplp -> e . cdelta		1302623	1					
ANR	1302893	PtrMemberAccess	nplp -> e		1302623	0					
ANR	1302894	Identifier	nplp		1302623	0					
ANR	1302895	Identifier	e		1302623	1					
ANR	1302896	Identifier	cdelta		1302623	1					
ANR	1302897	Argument	! reflected		1302623	6					
ANR	1302898	UnaryOperationExpression	! reflected		1302623	0					
ANR	1302899	UnaryOperator	!		1302623	0					
ANR	1302900	Identifier	reflected		1302623	1					
ANR	1302901	Argument	& plp -> width		1302623	7					
ANR	1302902	UnaryOperationExpression	& plp -> width		1302623	0					
ANR	1302903	UnaryOperator	&		1302623	0					
ANR	1302904	PtrMemberAccess	plp -> width		1302623	1					
ANR	1302905	Identifier	plp		1302623	0					
ANR	1302906	Identifier	width		1302623	1					
ANR	1302907	ReturnStatement	return code ;	2662:12:108507:108518	1302623	1	True				
ANR	1302908	Identifier	code		1302623	0					
ANR	1302909	ElseStatement	else		1302623	0					
ANR	1302910	CompoundStatement		32:11:1037:1037	1302623	0					
ANR	1302911	IfStatement	"if ( line_intersect ( & plp -> o . ce , & plp -> width , & nplp -> e . co , & nplp -> width , & tangmeet ) != 0 )"		1302623	0					
ANR	1302912	Condition	"line_intersect ( & plp -> o . ce , & plp -> width , & nplp -> e . co , & nplp -> width , & tangmeet ) != 0"	2664:12:108545:108655	1302623	0	True				
ANR	1302913	EqualityExpression	"line_intersect ( & plp -> o . ce , & plp -> width , & nplp -> e . co , & nplp -> width , & tangmeet ) != 0"		1302623	0		!=			
ANR	1302914	CallExpression	"line_intersect ( & plp -> o . ce , & plp -> width , & nplp -> e . co , & nplp -> width , & tangmeet )"		1302623	0					
ANR	1302915	Callee	line_intersect		1302623	0					
ANR	1302916	Identifier	line_intersect		1302623	0					
ANR	1302917	ArgumentList	& plp -> o . ce		1302623	1					
ANR	1302918	Argument	& plp -> o . ce		1302623	0					
ANR	1302919	UnaryOperationExpression	& plp -> o . ce		1302623	0					
ANR	1302920	UnaryOperator	&		1302623	0					
ANR	1302921	MemberAccess	plp -> o . ce		1302623	1					
ANR	1302922	PtrMemberAccess	plp -> o		1302623	0					
ANR	1302923	Identifier	plp		1302623	0					
ANR	1302924	Identifier	o		1302623	1					
ANR	1302925	Identifier	ce		1302623	1					
ANR	1302926	Argument	& plp -> width		1302623	1					
ANR	1302927	UnaryOperationExpression	& plp -> width		1302623	0					
ANR	1302928	UnaryOperator	&		1302623	0					
ANR	1302929	PtrMemberAccess	plp -> width		1302623	1					
ANR	1302930	Identifier	plp		1302623	0					
ANR	1302931	Identifier	width		1302623	1					
ANR	1302932	Argument	& nplp -> e . co		1302623	2					
ANR	1302933	UnaryOperationExpression	& nplp -> e . co		1302623	0					
ANR	1302934	UnaryOperator	&		1302623	0					
ANR	1302935	MemberAccess	nplp -> e . co		1302623	1					
ANR	1302936	PtrMemberAccess	nplp -> e		1302623	0					
ANR	1302937	Identifier	nplp		1302623	0					
ANR	1302938	Identifier	e		1302623	1					
ANR	1302939	Identifier	co		1302623	1					
ANR	1302940	Argument	& nplp -> width		1302623	3					
ANR	1302941	UnaryOperationExpression	& nplp -> width		1302623	0					
ANR	1302942	UnaryOperator	&		1302623	0					
ANR	1302943	PtrMemberAccess	nplp -> width		1302623	1					
ANR	1302944	Identifier	nplp		1302623	0					
ANR	1302945	Identifier	width		1302623	1					
ANR	1302946	Argument	& tangmeet		1302623	4					
ANR	1302947	UnaryOperationExpression	& tangmeet		1302623	0					
ANR	1302948	UnaryOperator	&		1302623	0					
ANR	1302949	Identifier	tangmeet		1302623	1					
ANR	1302950	PrimaryExpression	0		1302623	1					
ANR	1302951	ReturnStatement	return 0 ;	2666:12:108670:108678	1302623	1	True				
ANR	1302952	PrimaryExpression	0		1302623	0					
ANR	1302953	IfStatement	"if ( ( code = gx_path_close_subpath ( ppath ) ) < 0 || ( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0 || ( code = gx_path_add_line ( ppath , nplp -> e . co . x , nplp -> e . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & nplp -> e . co , & nplp -> e . cdelta , & plp -> o . ce , & plp -> o . cdelta , ! reflected , & plp -> width ) ) )"		1302623	1					
ANR	1302954	Condition	"( code = gx_path_close_subpath ( ppath ) ) < 0 || ( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0 || ( code = gx_path_add_line ( ppath , nplp -> e . co . x , nplp -> e . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & nplp -> e . co , & nplp -> e . cdelta , & plp -> o . ce , & plp -> o . cdelta , ! reflected , & plp -> width ) )"	2667:12:108692:109087	1302623	0	True				
ANR	1302955	OrExpression	"( code = gx_path_close_subpath ( ppath ) ) < 0 || ( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0 || ( code = gx_path_add_line ( ppath , nplp -> e . co . x , nplp -> e . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & nplp -> e . co , & nplp -> e . cdelta , & plp -> o . ce , & plp -> o . cdelta , ! reflected , & plp -> width ) )"		1302623	0		||			
ANR	1302956	RelationalExpression	( code = gx_path_close_subpath ( ppath ) ) < 0		1302623	0		<			
ANR	1302957	AssignmentExpression	code = gx_path_close_subpath ( ppath )		1302623	0		=			
ANR	1302958	Identifier	code		1302623	0					
ANR	1302959	CallExpression	gx_path_close_subpath ( ppath )		1302623	1					
ANR	1302960	Callee	gx_path_close_subpath		1302623	0					
ANR	1302961	Identifier	gx_path_close_subpath		1302623	0					
ANR	1302962	ArgumentList	ppath		1302623	1					
ANR	1302963	Argument	ppath		1302623	0					
ANR	1302964	Identifier	ppath		1302623	0					
ANR	1302965	PrimaryExpression	0		1302623	1					
ANR	1302966	OrExpression	"( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0 || ( code = gx_path_add_line ( ppath , nplp -> e . co . x , nplp -> e . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & nplp -> e . co , & nplp -> e . cdelta , & plp -> o . ce , & plp -> o . cdelta , ! reflected , & plp -> width ) )"		1302623	1		||			
ANR	1302967	RelationalExpression	"( code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y ) ) < 0"		1302623	0		<			
ANR	1302968	AssignmentExpression	"code = gx_path_add_point ( ppath , tangmeet . x , tangmeet . y )"		1302623	0		=			
ANR	1302969	Identifier	code		1302623	0					
ANR	1302970	CallExpression	"gx_path_add_point ( ppath , tangmeet . x , tangmeet . y )"		1302623	1					
ANR	1302971	Callee	gx_path_add_point		1302623	0					
ANR	1302972	Identifier	gx_path_add_point		1302623	0					
ANR	1302973	ArgumentList	ppath		1302623	1					
ANR	1302974	Argument	ppath		1302623	0					
ANR	1302975	Identifier	ppath		1302623	0					
ANR	1302976	Argument	tangmeet . x		1302623	1					
ANR	1302977	MemberAccess	tangmeet . x		1302623	0					
ANR	1302978	Identifier	tangmeet		1302623	0					
ANR	1302979	Identifier	x		1302623	1					
ANR	1302980	Argument	tangmeet . y		1302623	2					
ANR	1302981	MemberAccess	tangmeet . y		1302623	0					
ANR	1302982	Identifier	tangmeet		1302623	0					
ANR	1302983	Identifier	y		1302623	1					
ANR	1302984	PrimaryExpression	0		1302623	1					
ANR	1302985	OrExpression	"( code = gx_path_add_line ( ppath , nplp -> e . co . x , nplp -> e . co . y ) ) < 0 || ( code = do_pie_join ( ppath , & plp -> e . p , & nplp -> e . co , & nplp -> e . cdelta , & plp -> o . ce , & plp -> o . cdelta , ! reflected , & plp -> width ) )"		1302623	1		||			
ANR	1302986	RelationalExpression	"( code = gx_path_add_line ( ppath , nplp -> e . co . x , nplp -> e . co . y ) ) < 0"		1302623	0		<			
ANR	1302987	AssignmentExpression	"code = gx_path_add_line ( ppath , nplp -> e . co . x , nplp -> e . co . y )"		1302623	0		=			
ANR	1302988	Identifier	code		1302623	0					
ANR	1302989	CallExpression	"gx_path_add_line ( ppath , nplp -> e . co . x , nplp -> e . co . y )"		1302623	1					
ANR	1302990	Callee	gx_path_add_line		1302623	0					
ANR	1302991	Identifier	gx_path_add_line		1302623	0					
ANR	1302992	ArgumentList	ppath		1302623	1					
ANR	1302993	Argument	ppath		1302623	0					
ANR	1302994	Identifier	ppath		1302623	0					
ANR	1302995	Argument	nplp -> e . co . x		1302623	1					
ANR	1302996	MemberAccess	nplp -> e . co . x		1302623	0					
ANR	1302997	MemberAccess	nplp -> e . co		1302623	0					
ANR	1302998	PtrMemberAccess	nplp -> e		1302623	0					
ANR	1302999	Identifier	nplp		1302623	0					
ANR	1303000	Identifier	e		1302623	1					
ANR	1303001	Identifier	co		1302623	1					
ANR	1303002	Identifier	x		1302623	1					
ANR	1303003	Argument	nplp -> e . co . y		1302623	2					
ANR	1303004	MemberAccess	nplp -> e . co . y		1302623	0					
ANR	1303005	MemberAccess	nplp -> e . co		1302623	0					
ANR	1303006	PtrMemberAccess	nplp -> e		1302623	0					
ANR	1303007	Identifier	nplp		1302623	0					
ANR	1303008	Identifier	e		1302623	1					
ANR	1303009	Identifier	co		1302623	1					
ANR	1303010	Identifier	y		1302623	1					
ANR	1303011	PrimaryExpression	0		1302623	1					
ANR	1303012	AssignmentExpression	"code = do_pie_join ( ppath , & plp -> e . p , & nplp -> e . co , & nplp -> e . cdelta , & plp -> o . ce , & plp -> o . cdelta , ! reflected , & plp -> width )"		1302623	1		=			
ANR	1303013	Identifier	code		1302623	0					
ANR	1303014	CallExpression	"do_pie_join ( ppath , & plp -> e . p , & nplp -> e . co , & nplp -> e . cdelta , & plp -> o . ce , & plp -> o . cdelta , ! reflected , & plp -> width )"		1302623	1					
ANR	1303015	Callee	do_pie_join		1302623	0					
ANR	1303016	Identifier	do_pie_join		1302623	0					
ANR	1303017	ArgumentList	ppath		1302623	1					
ANR	1303018	Argument	ppath		1302623	0					
ANR	1303019	Identifier	ppath		1302623	0					
ANR	1303020	Argument	& plp -> e . p		1302623	1					
ANR	1303021	UnaryOperationExpression	& plp -> e . p		1302623	0					
ANR	1303022	UnaryOperator	&		1302623	0					
ANR	1303023	MemberAccess	plp -> e . p		1302623	1					
ANR	1303024	PtrMemberAccess	plp -> e		1302623	0					
ANR	1303025	Identifier	plp		1302623	0					
ANR	1303026	Identifier	e		1302623	1					
ANR	1303027	Identifier	p		1302623	1					
ANR	1303028	Argument	& nplp -> e . co		1302623	2					
ANR	1303029	UnaryOperationExpression	& nplp -> e . co		1302623	0					
ANR	1303030	UnaryOperator	&		1302623	0					
ANR	1303031	MemberAccess	nplp -> e . co		1302623	1					
ANR	1303032	PtrMemberAccess	nplp -> e		1302623	0					
ANR	1303033	Identifier	nplp		1302623	0					
ANR	1303034	Identifier	e		1302623	1					
ANR	1303035	Identifier	co		1302623	1					
ANR	1303036	Argument	& nplp -> e . cdelta		1302623	3					
ANR	1303037	UnaryOperationExpression	& nplp -> e . cdelta		1302623	0					
ANR	1303038	UnaryOperator	&		1302623	0					
ANR	1303039	MemberAccess	nplp -> e . cdelta		1302623	1					
ANR	1303040	PtrMemberAccess	nplp -> e		1302623	0					
ANR	1303041	Identifier	nplp		1302623	0					
ANR	1303042	Identifier	e		1302623	1					
ANR	1303043	Identifier	cdelta		1302623	1					
ANR	1303044	Argument	& plp -> o . ce		1302623	4					
ANR	1303045	UnaryOperationExpression	& plp -> o . ce		1302623	0					
ANR	1303046	UnaryOperator	&		1302623	0					
ANR	1303047	MemberAccess	plp -> o . ce		1302623	1					
ANR	1303048	PtrMemberAccess	plp -> o		1302623	0					
ANR	1303049	Identifier	plp		1302623	0					
ANR	1303050	Identifier	o		1302623	1					
ANR	1303051	Identifier	ce		1302623	1					
ANR	1303052	Argument	& plp -> o . cdelta		1302623	5					
ANR	1303053	UnaryOperationExpression	& plp -> o . cdelta		1302623	0					
ANR	1303054	UnaryOperator	&		1302623	0					
ANR	1303055	MemberAccess	plp -> o . cdelta		1302623	1					
ANR	1303056	PtrMemberAccess	plp -> o		1302623	0					
ANR	1303057	Identifier	plp		1302623	0					
ANR	1303058	Identifier	o		1302623	1					
ANR	1303059	Identifier	cdelta		1302623	1					
ANR	1303060	Argument	! reflected		1302623	6					
ANR	1303061	UnaryOperationExpression	! reflected		1302623	0					
ANR	1303062	UnaryOperator	!		1302623	0					
ANR	1303063	Identifier	reflected		1302623	1					
ANR	1303064	Argument	& plp -> width		1302623	7					
ANR	1303065	UnaryOperationExpression	& plp -> width		1302623	0					
ANR	1303066	UnaryOperator	&		1302623	0					
ANR	1303067	PtrMemberAccess	plp -> width		1302623	1					
ANR	1303068	Identifier	plp		1302623	0					
ANR	1303069	Identifier	width		1302623	1					
ANR	1303070	ReturnStatement	return code ;	2673:12:109102:109113	1302623	1	True				
ANR	1303071	Identifier	code		1302623	0					
ANR	1303072	ReturnStatement	return 0 ;	2675:4:109125:109133	1302623	10	True				
ANR	1303073	PrimaryExpression	0		1302623	0					
ANR	1303074	ReturnType	static int		1302623	1					
ANR	1303075	Identifier	join_under_pie		1302623	2					
ANR	1303076	ParameterList	"gx_path * ppath , pl_ptr plp , pl_ptr nplp , bool reflected"		1302623	3					
ANR	1303077	Parameter	gx_path * ppath	2631:15:107435:107449	1302623	0	True				
ANR	1303078	ParameterType	gx_path *		1302623	0					
ANR	1303079	Identifier	ppath		1302623	1					
ANR	1303080	Parameter	pl_ptr plp	2631:32:107452:107461	1302623	1	True				
ANR	1303081	ParameterType	pl_ptr		1302623	0					
ANR	1303082	Identifier	plp		1302623	1					
ANR	1303083	Parameter	pl_ptr nplp	2631:44:107464:107474	1302623	2	True				
ANR	1303084	ParameterType	pl_ptr		1302623	0					
ANR	1303085	Identifier	nplp		1302623	1					
ANR	1303086	Parameter	bool reflected	2631:57:107477:107490	1302623	3	True				
ANR	1303087	ParameterType	bool		1302623	0					
ANR	1303088	Identifier	reflected		1302623	1					
ANR	1303089	CFGEntryNode	ENTRY		1302623		True				
ANR	1303090	CFGExitNode	EXIT		1302623		True				
ANR	1303091	Symbol	reflected		1302623						
ANR	1303092	Symbol	& plp -> e		1302623						
ANR	1303093	Symbol	line_intersect		1302623						
ANR	1303094	Symbol	nplp -> e . co . x		1302623						
ANR	1303095	Symbol	nplp -> e . co . y		1302623						
ANR	1303096	Symbol	dirn2 . x		1302623						
ANR	1303097	Symbol	ccw		1302623						
ANR	1303098	Symbol	dirn2 . y		1302623						
ANR	1303099	Symbol	& nplp -> width		1302623						
ANR	1303100	Symbol	& plp -> width		1302623						
ANR	1303101	Symbol	* plp		1302623						
ANR	1303102	Symbol	& plp -> o . cdelta		1302623						
ANR	1303103	Symbol	dirn1 . y		1302623						
ANR	1303104	Symbol	dirn1 . x		1302623						
ANR	1303105	Symbol	& plp -> o . ce		1302623						
ANR	1303106	Symbol	& tangmeet		1302623						
ANR	1303107	Symbol	tangmeet . y		1302623						
ANR	1303108	Symbol	& dirn1		1302623						
ANR	1303109	Symbol	& dirn2		1302623						
ANR	1303110	Symbol	tangmeet . x		1302623						
ANR	1303111	Symbol	gx_path_add_point		1302623						
ANR	1303112	Symbol	& plp -> o		1302623						
ANR	1303113	Symbol	nplp -> e . co		1302623						
ANR	1303114	Symbol	& plp -> e . p		1302623						
ANR	1303115	Symbol	& plp -> o . co		1302623						
ANR	1303116	Symbol	plp -> width . y		1302623						
ANR	1303117	Symbol	plp -> width . x		1302623						
ANR	1303118	Symbol	code		1302623						
ANR	1303119	Symbol	& nplp -> e . co		1302623						
ANR	1303120	Symbol	plp -> o . co		1302623						
ANR	1303121	Symbol	ppath		1302623						
ANR	1303122	Symbol	plp -> o . co . y		1302623						
ANR	1303123	Symbol	plp -> o . co . x		1302623						
ANR	1303124	Symbol	gx_path_close_subpath		1302623						
ANR	1303125	Symbol	plp -> width		1302623						
ANR	1303126	Symbol	nplp -> width		1302623						
ANR	1303127	Symbol	nplp -> e		1302623						
ANR	1303128	Symbol	* nplp		1302623						
ANR	1303129	Symbol	dirn1		1302623						
ANR	1303130	Symbol	dirn2		1302623						
ANR	1303131	Symbol	l		1302623						
ANR	1303132	Symbol	& nplp -> e . cdelta		1302623						
ANR	1303133	Symbol	nplp -> width . y		1302623						
ANR	1303134	Symbol	r		1302623						
ANR	1303135	Symbol	& nplp -> e		1302623						
ANR	1303136	Symbol	plp		1302623						
ANR	1303137	Symbol	nplp		1302623						
ANR	1303138	Symbol	tangmeet		1302623						
ANR	1303139	Symbol	& nplp -> e . ce		1302623						
ANR	1303140	Symbol	plp -> o		1302623						
ANR	1303141	Symbol	gx_path_add_line		1302623						
ANR	1303142	Symbol	plp -> e		1302623						
ANR	1303143	Symbol	do_pie_join		1302623						
ANR	1303144	Symbol	nplp -> width . x		1302623						
ANR	1303145	Function	cap_points	2680:0:109219:109979							
ANR	1303146	FunctionDef	"cap_points (gs_line_cap type , const_ep_ptr endp , gs_fixed_point * pts)"		1303145	0					
ANR	1303147	CompoundStatement		2682:0:109307:109979	1303145	0					
ANR	1303148	Statement	define	2683:1:109310:109315	1303145	0	True				
ANR	1303149	Statement	PUT_POINT	2683:8:109317:109325	1303145	1	True				
ANR	1303150	Statement	(	2683:17:109326:109326	1303145	2	True				
ANR	1303151	Statement	i	2683:18:109327:109327	1303145	3	True				
ANR	1303152	Statement	","	2683:19:109328:109328	1303145	4	True				
ANR	1303153	Statement	px	2683:21:109330:109331	1303145	5	True				
ANR	1303154	Statement	","	2683:23:109332:109332	1303145	6	True				
ANR	1303155	Statement	py	2683:25:109334:109335	1303145	7	True				
ANR	1303156	Statement	)	2683:27:109336:109336	1303145	8	True				
ANR	1303157	Statement	pts	2684:2:109341:109343	1303145	9	True				
ANR	1303158	Statement	[	2684:5:109344:109344	1303145	10	True				
ANR	1303159	Statement	i	2684:6:109345:109345	1303145	11	True				
ANR	1303160	Statement	]	2684:7:109346:109346	1303145	12	True				
ANR	1303161	Statement	.	2684:8:109347:109347	1303145	13	True				
ANR	1303162	Statement	x	2684:9:109348:109348	1303145	14	True				
ANR	1303163	Statement	=	2684:11:109350:109350	1303145	15	True				
ANR	1303164	Statement	(	2684:13:109352:109352	1303145	16	True				
ANR	1303165	Statement	px	2684:14:109353:109354	1303145	17	True				
ANR	1303166	Statement	)	2684:16:109355:109355	1303145	18	True				
ANR	1303167	Statement	","	2684:17:109356:109356	1303145	19	True				
ANR	1303168	Statement	pts	2684:19:109358:109360	1303145	20	True				
ANR	1303169	Statement	[	2684:22:109361:109361	1303145	21	True				
ANR	1303170	Statement	i	2684:23:109362:109362	1303145	22	True				
ANR	1303171	Statement	]	2684:24:109363:109363	1303145	23	True				
ANR	1303172	Statement	.	2684:25:109364:109364	1303145	24	True				
ANR	1303173	Statement	y	2684:26:109365:109365	1303145	25	True				
ANR	1303174	Statement	=	2684:28:109367:109367	1303145	26	True				
ANR	1303175	Statement	(	2684:30:109369:109369	1303145	27	True				
ANR	1303176	Statement	py	2684:31:109370:109371	1303145	28	True				
ANR	1303177	Statement	)	2684:33:109372:109372	1303145	29	True				
ANR	1303178	SwitchStatement	switch ( type )		1303145	30					
ANR	1303179	Condition	type	2685:12:109386:109389	1303145	0	True				
ANR	1303180	Identifier	type		1303145	0					
ANR	1303181	CompoundStatement		4:18:84:84	1303145	1					
ANR	1303182	Label	case gs_cap_butt :	2686:8:109402:109418	1303145	0	True				
ANR	1303183	Identifier	gs_cap_butt		1303145	0					
ANR	1303184	ExpressionStatement	"PUT_POINT ( 0 , xo , yo )"	2687:12:109432:109452	1303145	1	True				
ANR	1303185	CallExpression	"PUT_POINT ( 0 , xo , yo )"		1303145	0					
ANR	1303186	Callee	PUT_POINT		1303145	0					
ANR	1303187	Identifier	PUT_POINT		1303145	0					
ANR	1303188	ArgumentList	0		1303145	1					
ANR	1303189	Argument	0		1303145	0					
ANR	1303190	PrimaryExpression	0		1303145	0					
ANR	1303191	Argument	xo		1303145	1					
ANR	1303192	Identifier	xo		1303145	0					
ANR	1303193	Argument	yo		1303145	2					
ANR	1303194	Identifier	yo		1303145	0					
ANR	1303195	ExpressionStatement	"PUT_POINT ( 1 , xe , ye )"	2688:12:109466:109486	1303145	2	True				
ANR	1303196	CallExpression	"PUT_POINT ( 1 , xe , ye )"		1303145	0					
ANR	1303197	Callee	PUT_POINT		1303145	0					
ANR	1303198	Identifier	PUT_POINT		1303145	0					
ANR	1303199	ArgumentList	1		1303145	1					
ANR	1303200	Argument	1		1303145	0					
ANR	1303201	PrimaryExpression	1		1303145	0					
ANR	1303202	Argument	xe		1303145	1					
ANR	1303203	Identifier	xe		1303145	0					
ANR	1303204	Argument	ye		1303145	2					
ANR	1303205	Identifier	ye		1303145	0					
ANR	1303206	ReturnStatement	return 2 ;	2689:12:109500:109508	1303145	3	True				
ANR	1303207	PrimaryExpression	2		1303145	0					
ANR	1303208	Label	case gs_cap_square :	2690:8:109518:109536	1303145	4	True				
ANR	1303209	Identifier	gs_cap_square		1303145	0					
ANR	1303210	ExpressionStatement	"PUT_POINT ( 0 , xo + cdx , yo + cdy )"	2691:12:109550:109582	1303145	5	True				
ANR	1303211	CallExpression	"PUT_POINT ( 0 , xo + cdx , yo + cdy )"		1303145	0					
ANR	1303212	Callee	PUT_POINT		1303145	0					
ANR	1303213	Identifier	PUT_POINT		1303145	0					
ANR	1303214	ArgumentList	0		1303145	1					
ANR	1303215	Argument	0		1303145	0					
ANR	1303216	PrimaryExpression	0		1303145	0					
ANR	1303217	Argument	xo + cdx		1303145	1					
ANR	1303218	AdditiveExpression	xo + cdx		1303145	0		+			
ANR	1303219	Identifier	xo		1303145	0					
ANR	1303220	Identifier	cdx		1303145	1					
ANR	1303221	Argument	yo + cdy		1303145	2					
ANR	1303222	AdditiveExpression	yo + cdy		1303145	0		+			
ANR	1303223	Identifier	yo		1303145	0					
ANR	1303224	Identifier	cdy		1303145	1					
ANR	1303225	ExpressionStatement	"PUT_POINT ( 1 , xe + cdx , ye + cdy )"	2692:12:109596:109628	1303145	6	True				
ANR	1303226	CallExpression	"PUT_POINT ( 1 , xe + cdx , ye + cdy )"		1303145	0					
ANR	1303227	Callee	PUT_POINT		1303145	0					
ANR	1303228	Identifier	PUT_POINT		1303145	0					
ANR	1303229	ArgumentList	1		1303145	1					
ANR	1303230	Argument	1		1303145	0					
ANR	1303231	PrimaryExpression	1		1303145	0					
ANR	1303232	Argument	xe + cdx		1303145	1					
ANR	1303233	AdditiveExpression	xe + cdx		1303145	0		+			
ANR	1303234	Identifier	xe		1303145	0					
ANR	1303235	Identifier	cdx		1303145	1					
ANR	1303236	Argument	ye + cdy		1303145	2					
ANR	1303237	AdditiveExpression	ye + cdy		1303145	0		+			
ANR	1303238	Identifier	ye		1303145	0					
ANR	1303239	Identifier	cdy		1303145	1					
ANR	1303240	ReturnStatement	return 2 ;	2693:12:109642:109650	1303145	7	True				
ANR	1303241	PrimaryExpression	2		1303145	0					
ANR	1303242	Label	case gs_cap_triangle :	2694:8:109660:109680	1303145	8	True				
ANR	1303243	Identifier	gs_cap_triangle		1303145	0					
ANR	1303244	ExpressionStatement	"PUT_POINT ( 0 , xo , yo )"	2695:12:109732:109752	1303145	9	True				
ANR	1303245	CallExpression	"PUT_POINT ( 0 , xo , yo )"		1303145	0					
ANR	1303246	Callee	PUT_POINT		1303145	0					
ANR	1303247	Identifier	PUT_POINT		1303145	0					
ANR	1303248	ArgumentList	0		1303145	1					
ANR	1303249	Argument	0		1303145	0					
ANR	1303250	PrimaryExpression	0		1303145	0					
ANR	1303251	Argument	xo		1303145	1					
ANR	1303252	Identifier	xo		1303145	0					
ANR	1303253	Argument	yo		1303145	2					
ANR	1303254	Identifier	yo		1303145	0					
ANR	1303255	ExpressionStatement	"PUT_POINT ( 1 , px + cdx , py + cdy )"	2696:12:109766:109798	1303145	10	True				
ANR	1303256	CallExpression	"PUT_POINT ( 1 , px + cdx , py + cdy )"		1303145	0					
ANR	1303257	Callee	PUT_POINT		1303145	0					
ANR	1303258	Identifier	PUT_POINT		1303145	0					
ANR	1303259	ArgumentList	1		1303145	1					
ANR	1303260	Argument	1		1303145	0					
ANR	1303261	PrimaryExpression	1		1303145	0					
ANR	1303262	Argument	px + cdx		1303145	1					
ANR	1303263	AdditiveExpression	px + cdx		1303145	0		+			
ANR	1303264	Identifier	px		1303145	0					
ANR	1303265	Identifier	cdx		1303145	1					
ANR	1303266	Argument	py + cdy		1303145	2					
ANR	1303267	AdditiveExpression	py + cdy		1303145	0		+			
ANR	1303268	Identifier	py		1303145	0					
ANR	1303269	Identifier	cdy		1303145	1					
ANR	1303270	ExpressionStatement	"PUT_POINT ( 2 , xe , ye )"	2697:12:109812:109832	1303145	11	True				
ANR	1303271	CallExpression	"PUT_POINT ( 2 , xe , ye )"		1303145	0					
ANR	1303272	Callee	PUT_POINT		1303145	0					
ANR	1303273	Identifier	PUT_POINT		1303145	0					
ANR	1303274	ArgumentList	2		1303145	1					
ANR	1303275	Argument	2		1303145	0					
ANR	1303276	PrimaryExpression	2		1303145	0					
ANR	1303277	Argument	xe		1303145	1					
ANR	1303278	Identifier	xe		1303145	0					
ANR	1303279	Argument	ye		1303145	2					
ANR	1303280	Identifier	ye		1303145	0					
ANR	1303281	ReturnStatement	return 3 ;	2698:12:109846:109854	1303145	12	True				
ANR	1303282	PrimaryExpression	3		1303145	0					
ANR	1303283	Label	default :	2699:8:109864:109871	1303145	13	True				
ANR	1303284	Identifier	default		1303145	0					
ANR	1303285	ExpressionStatement	return_error ( gs_error_unregistered )	2700:12:109919:109954	1303145	14	True				
ANR	1303286	CallExpression	return_error ( gs_error_unregistered )		1303145	0					
ANR	1303287	Callee	return_error		1303145	0					
ANR	1303288	Identifier	return_error		1303145	0					
ANR	1303289	ArgumentList	gs_error_unregistered		1303145	1					
ANR	1303290	Argument	gs_error_unregistered		1303145	0					
ANR	1303291	Identifier	gs_error_unregistered		1303145	0					
ANR	1303292	Statement	undef	2702:1:109963:109967	1303145	31	True				
ANR	1303293	Statement	PUT_POINT	2702:7:109969:109977	1303145	32	True				
ANR	1303294	ReturnType	static int		1303145	1					
ANR	1303295	Identifier	cap_points		1303145	2					
ANR	1303296	ParameterList	"gs_line_cap type , const_ep_ptr endp , gs_fixed_point * pts"		1303145	3					
ANR	1303297	Parameter	gs_line_cap type	2681:11:109241:109256	1303145	0	True				
ANR	1303298	ParameterType	gs_line_cap		1303145	0					
ANR	1303299	Identifier	type		1303145	1					
ANR	1303300	Parameter	const_ep_ptr endp	2681:29:109259:109275	1303145	1	True				
ANR	1303301	ParameterType	const_ep_ptr		1303145	0					
ANR	1303302	Identifier	endp		1303145	1					
ANR	1303303	Parameter	gs_fixed_point * pts	2681:48:109278:109296	1303145	2	True				
ANR	1303304	ParameterType	gs_fixed_point *		1303145	0					
ANR	1303305	Identifier	pts		1303145	1					
ANR	1303306	CFGEntryNode	ENTRY		1303145		True				
ANR	1303307	CFGExitNode	EXIT		1303145		True				
ANR	1303308	Symbol	gs_error_unregistered		1303145						
ANR	1303309	Symbol	yo		1303145						
ANR	1303310	Symbol	cdx		1303145						
ANR	1303311	Symbol	xo		1303145						
ANR	1303312	Symbol	px		1303145						
ANR	1303313	Symbol	cdy		1303145						
ANR	1303314	Symbol	py		1303145						
ANR	1303315	Symbol	endp		1303145						
ANR	1303316	Symbol	type		1303145						
ANR	1303317	Symbol	ye		1303145						
ANR	1303318	Symbol	xe		1303145						
ANR	1303319	Symbol	pts		1303145						
