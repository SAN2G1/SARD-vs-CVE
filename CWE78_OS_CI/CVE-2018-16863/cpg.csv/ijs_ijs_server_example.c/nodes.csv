command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6008440	File	data/converged/CVE-2018-16863_ghostpdl/ijs_ijs_server_example.c								
ANR	6008441	DeclStmt									
ANR	6008442	Decl							struct _ExampleParamList	struct _ExampleParamList	ExampleParamList
ANR	6008443	ClassDef	_ExampleParamList	35:0:1316:1415							
ANR	6008444	DeclStmt									
ANR	6008445	Decl							ExampleParamList	ExampleParamList *	next
ANR	6008446	DeclStmt									
ANR	6008447	Decl							char	char *	key
ANR	6008448	DeclStmt									
ANR	6008449	Decl							char	char *	value
ANR	6008450	DeclStmt									
ANR	6008451	Decl							int	int	value_size
ANR	6008452	Function	example_status_cb	42:0:1419:1557							
ANR	6008453	FunctionDef	"example_status_cb (void * status_cb_data , IjsServerCtx * ctx , IjsJobId job_id)"		6008452	0					
ANR	6008454	CompoundStatement		46:0:1543:1557	6008452	0					
ANR	6008455	ReturnStatement	return 0 ;	47:2:1547:1555	6008452	0	True				
ANR	6008456	PrimaryExpression	0		6008452	0					
ANR	6008457	ReturnType	static int		6008452	1					
ANR	6008458	Identifier	example_status_cb		6008452	2					
ANR	6008459	ParameterList	"void * status_cb_data , IjsServerCtx * ctx , IjsJobId job_id"		6008452	3					
ANR	6008460	Parameter	void * status_cb_data	43:19:1449:1468	6008452	0	True				
ANR	6008461	ParameterType	void *		6008452	0					
ANR	6008462	Identifier	status_cb_data		6008452	1					
ANR	6008463	Parameter	IjsServerCtx * ctx	44:18:1489:1505	6008452	1	True				
ANR	6008464	ParameterType	IjsServerCtx *		6008452	0					
ANR	6008465	Identifier	ctx		6008452	1					
ANR	6008466	Parameter	IjsJobId job_id	45:18:1526:1540	6008452	2	True				
ANR	6008467	ParameterType	IjsJobId		6008452	0					
ANR	6008468	Identifier	job_id		6008452	1					
ANR	6008469	CFGEntryNode	ENTRY		6008452		True				
ANR	6008470	CFGExitNode	EXIT		6008452		True				
ANR	6008471	Symbol	status_cb_data		6008452						
ANR	6008472	Symbol	ctx		6008452						
ANR	6008473	Symbol	job_id		6008452						
ANR	6008474	Function	example_list_cb	50:0:1560:2105							
ANR	6008475	FunctionDef	"example_list_cb (void * list_cb_data , IjsServerCtx * ctx , IjsJobId job_id , char * val_buf , int val_size)"		6008474	0					
ANR	6008476	CompoundStatement		56:0:1741:2105	6008474	0					
ANR	6008477	IdentifierDeclStatement	"const char * param_list = ""OutputFile,DeviceManufacturer,DeviceModel,PageImageFormat,Dpi,Width,Height,BitsPerSample,ColorSpace,NumChan,PaperSize,PrintableArea,PrintableTopLeft,TopLeft"" ;"	57:2:1745:1928	6008474	0	True				
ANR	6008478	IdentifierDecl	"* param_list = ""OutputFile,DeviceManufacturer,DeviceModel,PageImageFormat,Dpi,Width,Height,BitsPerSample,ColorSpace,NumChan,PaperSize,PrintableArea,PrintableTopLeft,TopLeft"""		6008474	0					
ANR	6008479	IdentifierDeclType	const char *		6008474	0					
ANR	6008480	Identifier	param_list		6008474	1					
ANR	6008481	AssignmentExpression	"* param_list = ""OutputFile,DeviceManufacturer,DeviceModel,PageImageFormat,Dpi,Width,Height,BitsPerSample,ColorSpace,NumChan,PaperSize,PrintableArea,PrintableTopLeft,TopLeft"""		6008474	2		=			
ANR	6008482	Identifier	param_list		6008474	0					
ANR	6008483	PrimaryExpression	"""OutputFile,DeviceManufacturer,DeviceModel,PageImageFormat,Dpi,Width,Height,BitsPerSample,ColorSpace,NumChan,PaperSize,PrintableArea,PrintableTopLeft,TopLeft"""		6008474	1					
ANR	6008484	IdentifierDeclStatement	int size = strlen ( param_list ) ;	58:2:1932:1962	6008474	1	True				
ANR	6008485	IdentifierDecl	size = strlen ( param_list )		6008474	0					
ANR	6008486	IdentifierDeclType	int		6008474	0					
ANR	6008487	Identifier	size		6008474	1					
ANR	6008488	AssignmentExpression	size = strlen ( param_list )		6008474	2		=			
ANR	6008489	Identifier	size		6008474	0					
ANR	6008490	CallExpression	strlen ( param_list )		6008474	1					
ANR	6008491	Callee	strlen		6008474	0					
ANR	6008492	Identifier	strlen		6008474	0					
ANR	6008493	ArgumentList	param_list		6008474	1					
ANR	6008494	Argument	param_list		6008474	0					
ANR	6008495	Identifier	param_list		6008474	0					
ANR	6008496	ExpressionStatement	"fprintf ( stderr , ""example_list_cb\\n"" )"	60:2:1967:2004	6008474	2	True				
ANR	6008497	CallExpression	"fprintf ( stderr , ""example_list_cb\\n"" )"		6008474	0					
ANR	6008498	Callee	fprintf		6008474	0					
ANR	6008499	Identifier	fprintf		6008474	0					
ANR	6008500	ArgumentList	stderr		6008474	1					
ANR	6008501	Argument	stderr		6008474	0					
ANR	6008502	Identifier	stderr		6008474	0					
ANR	6008503	Argument	"""example_list_cb\\n"""		6008474	1					
ANR	6008504	PrimaryExpression	"""example_list_cb\\n"""		6008474	0					
ANR	6008505	IfStatement	if ( size > val_size )		6008474	3					
ANR	6008506	Condition	size > val_size	62:6:2013:2027	6008474	0	True				
ANR	6008507	RelationalExpression	size > val_size		6008474	0		>			
ANR	6008508	Identifier	size		6008474	0					
ANR	6008509	Identifier	val_size		6008474	1					
ANR	6008510	ReturnStatement	return IJS_EBUF ;	63:4:2034:2049	6008474	1	True				
ANR	6008511	Identifier	IJS_EBUF		6008474	0					
ANR	6008512	ExpressionStatement	"memcpy ( val_buf , param_list , size )"	65:2:2054:2088	6008474	4	True				
ANR	6008513	CallExpression	"memcpy ( val_buf , param_list , size )"		6008474	0					
ANR	6008514	Callee	memcpy		6008474	0					
ANR	6008515	Identifier	memcpy		6008474	0					
ANR	6008516	ArgumentList	val_buf		6008474	1					
ANR	6008517	Argument	val_buf		6008474	0					
ANR	6008518	Identifier	val_buf		6008474	0					
ANR	6008519	Argument	param_list		6008474	1					
ANR	6008520	Identifier	param_list		6008474	0					
ANR	6008521	Argument	size		6008474	2					
ANR	6008522	Identifier	size		6008474	0					
ANR	6008523	ReturnStatement	return size ;	66:2:2092:2103	6008474	5	True				
ANR	6008524	Identifier	size		6008474	0					
ANR	6008525	ReturnType	static int		6008474	1					
ANR	6008526	Identifier	example_list_cb		6008474	2					
ANR	6008527	ParameterList	"void * list_cb_data , IjsServerCtx * ctx , IjsJobId job_id , char * val_buf , int val_size"		6008474	3					
ANR	6008528	Parameter	void * list_cb_data	51:17:1588:1605	6008474	0	True				
ANR	6008529	ParameterType	void *		6008474	0					
ANR	6008530	Identifier	list_cb_data		6008474	1					
ANR	6008531	Parameter	IjsServerCtx * ctx	52:17:1625:1641	6008474	1	True				
ANR	6008532	ParameterType	IjsServerCtx *		6008474	0					
ANR	6008533	Identifier	ctx		6008474	1					
ANR	6008534	Parameter	IjsJobId job_id	53:17:1661:1675	6008474	2	True				
ANR	6008535	ParameterType	IjsJobId		6008474	0					
ANR	6008536	Identifier	job_id		6008474	1					
ANR	6008537	Parameter	char * val_buf	54:17:1695:1707	6008474	3	True				
ANR	6008538	ParameterType	char *		6008474	0					
ANR	6008539	Identifier	val_buf		6008474	1					
ANR	6008540	Parameter	int val_size	55:17:1727:1738	6008474	4	True				
ANR	6008541	ParameterType	int		6008474	0					
ANR	6008542	Identifier	val_size		6008474	1					
ANR	6008543	CFGEntryNode	ENTRY		6008474		True				
ANR	6008544	CFGExitNode	EXIT		6008474		True				
ANR	6008545	Symbol	strlen		6008474						
ANR	6008546	Symbol	size		6008474						
ANR	6008547	Symbol	list_cb_data		6008474						
ANR	6008548	Symbol	ctx		6008474						
ANR	6008549	Symbol	job_id		6008474						
ANR	6008550	Symbol	val_buf		6008474						
ANR	6008551	Symbol	IJS_EBUF		6008474						
ANR	6008552	Symbol	val_size		6008474						
ANR	6008553	Symbol	stderr		6008474						
ANR	6008554	Symbol	param_list		6008474						
ANR	6008555	Function	example_enum_cb	69:0:2108:2850							
ANR	6008556	FunctionDef	"example_enum_cb (void * enum_cb_data , IjsServerCtx * ctx , IjsJobId job_id , const char * key , char * val_buf , int val_size)"		6008555	0					
ANR	6008557	CompoundStatement		76:0:2323:2850	6008555	0					
ANR	6008558	IdentifierDeclStatement	const char * val = NULL ;	77:2:2327:2349	6008555	0	True				
ANR	6008559	IdentifierDecl	* val = NULL		6008555	0					
ANR	6008560	IdentifierDeclType	const char *		6008555	0					
ANR	6008561	Identifier	val		6008555	1					
ANR	6008562	AssignmentExpression	* val = NULL		6008555	2		=			
ANR	6008563	Identifier	NULL		6008555	0					
ANR	6008564	Identifier	NULL		6008555	1					
ANR	6008565	IfStatement	"if ( ! strcmp ( key , ""ColorSpace"" ) )"		6008555	1					
ANR	6008566	Condition	"! strcmp ( key , ""ColorSpace"" )"	78:6:2357:2383	6008555	0	True				
ANR	6008567	UnaryOperationExpression	"! strcmp ( key , ""ColorSpace"" )"		6008555	0					
ANR	6008568	UnaryOperator	!		6008555	0					
ANR	6008569	CallExpression	"strcmp ( key , ""ColorSpace"" )"		6008555	1					
ANR	6008570	Callee	strcmp		6008555	0					
ANR	6008571	Identifier	strcmp		6008555	0					
ANR	6008572	ArgumentList	key		6008555	1					
ANR	6008573	Argument	key		6008555	0					
ANR	6008574	Identifier	key		6008555	0					
ANR	6008575	Argument	"""ColorSpace"""		6008555	1					
ANR	6008576	PrimaryExpression	"""ColorSpace"""		6008555	0					
ANR	6008577	ExpressionStatement	"val = ""DeviceRGB,DeviceGray,DeviceCMYK"""	79:4:2390:2429	6008555	1	True				
ANR	6008578	AssignmentExpression	"val = ""DeviceRGB,DeviceGray,DeviceCMYK"""		6008555	0		=			
ANR	6008579	Identifier	val		6008555	0					
ANR	6008580	PrimaryExpression	"""DeviceRGB,DeviceGray,DeviceCMYK"""		6008555	1					
ANR	6008581	ElseStatement	else		6008555	0					
ANR	6008582	IfStatement	"if ( ! strcmp ( key , ""DeviceManufacturer"" ) )"		6008555	0					
ANR	6008583	Condition	"! strcmp ( key , ""DeviceManufacturer"" )"	80:11:2442:2476	6008555	0	True				
ANR	6008584	UnaryOperationExpression	"! strcmp ( key , ""DeviceManufacturer"" )"		6008555	0					
ANR	6008585	UnaryOperator	!		6008555	0					
ANR	6008586	CallExpression	"strcmp ( key , ""DeviceManufacturer"" )"		6008555	1					
ANR	6008587	Callee	strcmp		6008555	0					
ANR	6008588	Identifier	strcmp		6008555	0					
ANR	6008589	ArgumentList	key		6008555	1					
ANR	6008590	Argument	key		6008555	0					
ANR	6008591	Identifier	key		6008555	0					
ANR	6008592	Argument	"""DeviceManufacturer"""		6008555	1					
ANR	6008593	PrimaryExpression	"""DeviceManufacturer"""		6008555	0					
ANR	6008594	ExpressionStatement	"val = ""IJS Distribution"""	81:4:2483:2507	6008555	1	True				
ANR	6008595	AssignmentExpression	"val = ""IJS Distribution"""		6008555	0		=			
ANR	6008596	Identifier	val		6008555	0					
ANR	6008597	PrimaryExpression	"""IJS Distribution"""		6008555	1					
ANR	6008598	ElseStatement	else		6008555	0					
ANR	6008599	IfStatement	"if ( ! strcmp ( key , ""DeviceModel"" ) )"		6008555	0					
ANR	6008600	Condition	"! strcmp ( key , ""DeviceModel"" )"	82:11:2520:2547	6008555	0	True				
ANR	6008601	UnaryOperationExpression	"! strcmp ( key , ""DeviceModel"" )"		6008555	0					
ANR	6008602	UnaryOperator	!		6008555	0					
ANR	6008603	CallExpression	"strcmp ( key , ""DeviceModel"" )"		6008555	1					
ANR	6008604	Callee	strcmp		6008555	0					
ANR	6008605	Identifier	strcmp		6008555	0					
ANR	6008606	ArgumentList	key		6008555	1					
ANR	6008607	Argument	key		6008555	0					
ANR	6008608	Identifier	key		6008555	0					
ANR	6008609	Argument	"""DeviceModel"""		6008555	1					
ANR	6008610	PrimaryExpression	"""DeviceModel"""		6008555	0					
ANR	6008611	ExpressionStatement	"val = ""ijs_server_example"""	83:4:2554:2580	6008555	1	True				
ANR	6008612	AssignmentExpression	"val = ""ijs_server_example"""		6008555	0		=			
ANR	6008613	Identifier	val		6008555	0					
ANR	6008614	PrimaryExpression	"""ijs_server_example"""		6008555	1					
ANR	6008615	ElseStatement	else		6008555	0					
ANR	6008616	IfStatement	"if ( ! strcmp ( key , ""PageImageFormat"" ) )"		6008555	0					
ANR	6008617	Condition	"! strcmp ( key , ""PageImageFormat"" )"	84:11:2593:2624	6008555	0	True				
ANR	6008618	UnaryOperationExpression	"! strcmp ( key , ""PageImageFormat"" )"		6008555	0					
ANR	6008619	UnaryOperator	!		6008555	0					
ANR	6008620	CallExpression	"strcmp ( key , ""PageImageFormat"" )"		6008555	1					
ANR	6008621	Callee	strcmp		6008555	0					
ANR	6008622	Identifier	strcmp		6008555	0					
ANR	6008623	ArgumentList	key		6008555	1					
ANR	6008624	Argument	key		6008555	0					
ANR	6008625	Identifier	key		6008555	0					
ANR	6008626	Argument	"""PageImageFormat"""		6008555	1					
ANR	6008627	PrimaryExpression	"""PageImageFormat"""		6008555	0					
ANR	6008628	ExpressionStatement	"val = ""Raster"""	85:4:2631:2645	6008555	1	True				
ANR	6008629	AssignmentExpression	"val = ""Raster"""		6008555	0		=			
ANR	6008630	Identifier	val		6008555	0					
ANR	6008631	PrimaryExpression	"""Raster"""		6008555	1					
ANR	6008632	IfStatement	if ( val == NULL )		6008555	2					
ANR	6008633	Condition	val == NULL	87:6:2654:2664	6008555	0	True				
ANR	6008634	EqualityExpression	val == NULL		6008555	0		==			
ANR	6008635	Identifier	val		6008555	0					
ANR	6008636	Identifier	NULL		6008555	1					
ANR	6008637	ReturnStatement	return IJS_EUNKPARAM ;	88:4:2671:2691	6008555	1	True				
ANR	6008638	Identifier	IJS_EUNKPARAM		6008555	0					
ANR	6008639	ElseStatement	else		6008555	0					
ANR	6008640	CompoundStatement		16:6:388:411	6008555	0					
ANR	6008641	IdentifierDeclStatement	int size = strlen ( val ) ;	91:6:2712:2735	6008555	0	True				
ANR	6008642	IdentifierDecl	size = strlen ( val )		6008555	0					
ANR	6008643	IdentifierDeclType	int		6008555	0					
ANR	6008644	Identifier	size		6008555	1					
ANR	6008645	AssignmentExpression	size = strlen ( val )		6008555	2		=			
ANR	6008646	Identifier	size		6008555	0					
ANR	6008647	CallExpression	strlen ( val )		6008555	1					
ANR	6008648	Callee	strlen		6008555	0					
ANR	6008649	Identifier	strlen		6008555	0					
ANR	6008650	ArgumentList	val		6008555	1					
ANR	6008651	Argument	val		6008555	0					
ANR	6008652	Identifier	val		6008555	0					
ANR	6008653	IfStatement	if ( size > val_size )		6008555	1					
ANR	6008654	Condition	size > val_size	93:10:2748:2762	6008555	0	True				
ANR	6008655	RelationalExpression	size > val_size		6008555	0		>			
ANR	6008656	Identifier	size		6008555	0					
ANR	6008657	Identifier	val_size		6008555	1					
ANR	6008658	ReturnStatement	return IJS_EBUF ;	94:8:2773:2788	6008555	1	True				
ANR	6008659	Identifier	IJS_EBUF		6008555	0					
ANR	6008660	ExpressionStatement	"memcpy ( val_buf , val , size )"	95:6:2796:2823	6008555	2	True				
ANR	6008661	CallExpression	"memcpy ( val_buf , val , size )"		6008555	0					
ANR	6008662	Callee	memcpy		6008555	0					
ANR	6008663	Identifier	memcpy		6008555	0					
ANR	6008664	ArgumentList	val_buf		6008555	1					
ANR	6008665	Argument	val_buf		6008555	0					
ANR	6008666	Identifier	val_buf		6008555	0					
ANR	6008667	Argument	val		6008555	1					
ANR	6008668	Identifier	val		6008555	0					
ANR	6008669	Argument	size		6008555	2					
ANR	6008670	Identifier	size		6008555	0					
ANR	6008671	ReturnStatement	return size ;	96:6:2831:2842	6008555	3	True				
ANR	6008672	Identifier	size		6008555	0					
ANR	6008673	ReturnType	static int		6008555	1					
ANR	6008674	Identifier	example_enum_cb		6008555	2					
ANR	6008675	ParameterList	"void * enum_cb_data , IjsServerCtx * ctx , IjsJobId job_id , const char * key , char * val_buf , int val_size"		6008555	3					
ANR	6008676	Parameter	void * enum_cb_data	70:17:2136:2153	6008555	0	True				
ANR	6008677	ParameterType	void *		6008555	0					
ANR	6008678	Identifier	enum_cb_data		6008555	1					
ANR	6008679	Parameter	IjsServerCtx * ctx	71:17:2173:2189	6008555	1	True				
ANR	6008680	ParameterType	IjsServerCtx *		6008555	0					
ANR	6008681	Identifier	ctx		6008555	1					
ANR	6008682	Parameter	IjsJobId job_id	72:17:2209:2223	6008555	2	True				
ANR	6008683	ParameterType	IjsJobId		6008555	0					
ANR	6008684	Identifier	job_id		6008555	1					
ANR	6008685	Parameter	const char * key	73:17:2243:2257	6008555	3	True				
ANR	6008686	ParameterType	const char *		6008555	0					
ANR	6008687	Identifier	key		6008555	1					
ANR	6008688	Parameter	char * val_buf	74:17:2277:2289	6008555	4	True				
ANR	6008689	ParameterType	char *		6008555	0					
ANR	6008690	Identifier	val_buf		6008555	1					
ANR	6008691	Parameter	int val_size	75:17:2309:2320	6008555	5	True				
ANR	6008692	ParameterType	int		6008555	0					
ANR	6008693	Identifier	val_size		6008555	1					
ANR	6008694	CFGEntryNode	ENTRY		6008555		True				
ANR	6008695	CFGExitNode	EXIT		6008555		True				
ANR	6008696	Symbol	enum_cb_data		6008555						
ANR	6008697	Symbol	val		6008555						
ANR	6008698	Symbol	strcmp		6008555						
ANR	6008699	Symbol	NULL		6008555						
ANR	6008700	Symbol	ctx		6008555						
ANR	6008701	Symbol	IJS_EUNKPARAM		6008555						
ANR	6008702	Symbol	strlen		6008555						
ANR	6008703	Symbol	size		6008555						
ANR	6008704	Symbol	job_id		6008555						
ANR	6008705	Symbol	val_buf		6008555						
ANR	6008706	Symbol	IJS_EBUF		6008555						
ANR	6008707	Symbol	val_size		6008555						
ANR	6008708	Symbol	key		6008555						
ANR	6008709	Function	example_parse_wxh	101:0:2911:3528							
ANR	6008710	FunctionDef	"example_parse_wxh (const char * val , int size , double * pw , double * ph)"		6008709	0					
ANR	6008711	CompoundStatement		104:0:3011:3528	6008709	0					
ANR	6008712	IdentifierDeclStatement	char buf [ 256 ] ;	105:2:3015:3028	6008709	0	True				
ANR	6008713	IdentifierDecl	buf [ 256 ]		6008709	0					
ANR	6008714	IdentifierDeclType	char [ 256 ]		6008709	0					
ANR	6008715	Identifier	buf		6008709	1					
ANR	6008716	PrimaryExpression	256		6008709	2					
ANR	6008717	IdentifierDeclStatement	char * tail ;	106:2:3032:3042	6008709	1	True				
ANR	6008718	IdentifierDecl	* tail		6008709	0					
ANR	6008719	IdentifierDeclType	char *		6008709	0					
ANR	6008720	Identifier	tail		6008709	1					
ANR	6008721	IdentifierDeclStatement	int i ;	107:2:3046:3051	6008709	2	True				
ANR	6008722	IdentifierDecl	i		6008709	0					
ANR	6008723	IdentifierDeclType	int		6008709	0					
ANR	6008724	Identifier	i		6008709	1					
ANR	6008725	ForStatement	for ( i = 0 ; i < size ; i ++ )		6008709	3					
ANR	6008726	ForInit	i = 0 ;	109:7:3061:3066	6008709	0	True				
ANR	6008727	AssignmentExpression	i = 0		6008709	0		=			
ANR	6008728	Identifier	i		6008709	0					
ANR	6008729	PrimaryExpression	0		6008709	1					
ANR	6008730	Condition	i < size	109:14:3068:3075	6008709	1	True				
ANR	6008731	RelationalExpression	i < size		6008709	0		<			
ANR	6008732	Identifier	i		6008709	0					
ANR	6008733	Identifier	size		6008709	1					
ANR	6008734	PostIncDecOperationExpression	i ++	109:24:3078:3080	6008709	2	True				
ANR	6008735	Identifier	i		6008709	0					
ANR	6008736	IncDec	++		6008709	1					
ANR	6008737	IfStatement	if ( val [ i ] == 'x' )		6008709	3					
ANR	6008738	Condition	val [ i ] == 'x'	110:8:3091:3103	6008709	0	True				
ANR	6008739	EqualityExpression	val [ i ] == 'x'		6008709	0		==			
ANR	6008740	ArrayIndexing	val [ i ]		6008709	0					
ANR	6008741	Identifier	val		6008709	0					
ANR	6008742	Identifier	i		6008709	1					
ANR	6008743	PrimaryExpression	'x'		6008709	1					
ANR	6008744	BreakStatement	break ;	111:6:3112:3117	6008709	1	True				
ANR	6008745	IfStatement	if ( i + 1 >= size )		6008709	4					
ANR	6008746	Condition	i + 1 >= size	113:6:3126:3138	6008709	0	True				
ANR	6008747	RelationalExpression	i + 1 >= size		6008709	0		>=			
ANR	6008748	AdditiveExpression	i + 1		6008709	0		+			
ANR	6008749	Identifier	i		6008709	0					
ANR	6008750	PrimaryExpression	1		6008709	1					
ANR	6008751	Identifier	size		6008709	1					
ANR	6008752	ReturnStatement	return IJS_ESYNTAX ;	114:4:3145:3163	6008709	1	True				
ANR	6008753	Identifier	IJS_ESYNTAX		6008709	0					
ANR	6008754	IfStatement	if ( i >= sizeof ( buf ) )		6008709	5					
ANR	6008755	Condition	i >= sizeof ( buf )	116:6:3172:3187	6008709	0	True				
ANR	6008756	RelationalExpression	i >= sizeof ( buf )		6008709	0		>=			
ANR	6008757	Identifier	i		6008709	0					
ANR	6008758	SizeofExpression	sizeof ( buf )		6008709	1					
ANR	6008759	Sizeof	sizeof		6008709	0					
ANR	6008760	SizeofOperand	buf		6008709	1					
ANR	6008761	ReturnStatement	return IJS_EBUF ;	117:4:3194:3209	6008709	1	True				
ANR	6008762	Identifier	IJS_EBUF		6008709	0					
ANR	6008763	ExpressionStatement	"memcpy ( buf , val , i )"	119:2:3214:3234	6008709	6	True				
ANR	6008764	CallExpression	"memcpy ( buf , val , i )"		6008709	0					
ANR	6008765	Callee	memcpy		6008709	0					
ANR	6008766	Identifier	memcpy		6008709	0					
ANR	6008767	ArgumentList	buf		6008709	1					
ANR	6008768	Argument	buf		6008709	0					
ANR	6008769	Identifier	buf		6008709	0					
ANR	6008770	Argument	val		6008709	1					
ANR	6008771	Identifier	val		6008709	0					
ANR	6008772	Argument	i		6008709	2					
ANR	6008773	Identifier	i		6008709	0					
ANR	6008774	ExpressionStatement	buf [ i ] = 0	120:2:3238:3248	6008709	7	True				
ANR	6008775	AssignmentExpression	buf [ i ] = 0		6008709	0		=			
ANR	6008776	ArrayIndexing	buf [ i ]		6008709	0					
ANR	6008777	Identifier	buf		6008709	0					
ANR	6008778	Identifier	i		6008709	1					
ANR	6008779	PrimaryExpression	0		6008709	1					
ANR	6008780	ExpressionStatement	"* pw = strtod ( buf , & tail )"	121:2:3252:3277	6008709	8	True				
ANR	6008781	AssignmentExpression	"* pw = strtod ( buf , & tail )"		6008709	0		=			
ANR	6008782	UnaryOperationExpression	* pw		6008709	0					
ANR	6008783	UnaryOperator	*		6008709	0					
ANR	6008784	Identifier	pw		6008709	1					
ANR	6008785	CallExpression	"strtod ( buf , & tail )"		6008709	1					
ANR	6008786	Callee	strtod		6008709	0					
ANR	6008787	Identifier	strtod		6008709	0					
ANR	6008788	ArgumentList	buf		6008709	1					
ANR	6008789	Argument	buf		6008709	0					
ANR	6008790	Identifier	buf		6008709	0					
ANR	6008791	Argument	& tail		6008709	1					
ANR	6008792	UnaryOperationExpression	& tail		6008709	0					
ANR	6008793	UnaryOperator	&		6008709	0					
ANR	6008794	Identifier	tail		6008709	1					
ANR	6008795	IfStatement	if ( tail == buf )		6008709	9					
ANR	6008796	Condition	tail == buf	122:6:3285:3295	6008709	0	True				
ANR	6008797	EqualityExpression	tail == buf		6008709	0		==			
ANR	6008798	Identifier	tail		6008709	0					
ANR	6008799	Identifier	buf		6008709	1					
ANR	6008800	ReturnStatement	return IJS_ESYNTAX ;	123:4:3302:3320	6008709	1	True				
ANR	6008801	Identifier	IJS_ESYNTAX		6008709	0					
ANR	6008802	IfStatement	if ( size - i > sizeof ( buf ) )		6008709	10					
ANR	6008803	Condition	size - i > sizeof ( buf )	125:6:3329:3350	6008709	0	True				
ANR	6008804	RelationalExpression	size - i > sizeof ( buf )		6008709	0		>			
ANR	6008805	AdditiveExpression	size - i		6008709	0		-			
ANR	6008806	Identifier	size		6008709	0					
ANR	6008807	Identifier	i		6008709	1					
ANR	6008808	SizeofExpression	sizeof ( buf )		6008709	1					
ANR	6008809	Sizeof	sizeof		6008709	0					
ANR	6008810	SizeofOperand	buf		6008709	1					
ANR	6008811	ReturnStatement	return IJS_EBUF ;	126:4:3357:3372	6008709	1	True				
ANR	6008812	Identifier	IJS_EBUF		6008709	0					
ANR	6008813	ExpressionStatement	"memcpy ( buf , val + i + 1 , size - i - 1 )"	128:2:3377:3416	6008709	11	True				
ANR	6008814	CallExpression	"memcpy ( buf , val + i + 1 , size - i - 1 )"		6008709	0					
ANR	6008815	Callee	memcpy		6008709	0					
ANR	6008816	Identifier	memcpy		6008709	0					
ANR	6008817	ArgumentList	buf		6008709	1					
ANR	6008818	Argument	buf		6008709	0					
ANR	6008819	Identifier	buf		6008709	0					
ANR	6008820	Argument	val + i + 1		6008709	1					
ANR	6008821	AdditiveExpression	val + i + 1		6008709	0		+			
ANR	6008822	Identifier	val		6008709	0					
ANR	6008823	AdditiveExpression	i + 1		6008709	1		+			
ANR	6008824	Identifier	i		6008709	0					
ANR	6008825	PrimaryExpression	1		6008709	1					
ANR	6008826	Argument	size - i - 1		6008709	2					
ANR	6008827	AdditiveExpression	size - i - 1		6008709	0		-			
ANR	6008828	Identifier	size		6008709	0					
ANR	6008829	AdditiveExpression	i - 1		6008709	1		-			
ANR	6008830	Identifier	i		6008709	0					
ANR	6008831	PrimaryExpression	1		6008709	1					
ANR	6008832	ExpressionStatement	buf [ size - i - 1 ] = 0	129:2:3420:3441	6008709	12	True				
ANR	6008833	AssignmentExpression	buf [ size - i - 1 ] = 0		6008709	0		=			
ANR	6008834	ArrayIndexing	buf [ size - i - 1 ]		6008709	0					
ANR	6008835	Identifier	buf		6008709	0					
ANR	6008836	AdditiveExpression	size - i - 1		6008709	1		-			
ANR	6008837	Identifier	size		6008709	0					
ANR	6008838	AdditiveExpression	i - 1		6008709	1		-			
ANR	6008839	Identifier	i		6008709	0					
ANR	6008840	PrimaryExpression	1		6008709	1					
ANR	6008841	PrimaryExpression	0		6008709	1					
ANR	6008842	ExpressionStatement	"* ph = strtod ( buf , & tail )"	130:2:3445:3470	6008709	13	True				
ANR	6008843	AssignmentExpression	"* ph = strtod ( buf , & tail )"		6008709	0		=			
ANR	6008844	UnaryOperationExpression	* ph		6008709	0					
ANR	6008845	UnaryOperator	*		6008709	0					
ANR	6008846	Identifier	ph		6008709	1					
ANR	6008847	CallExpression	"strtod ( buf , & tail )"		6008709	1					
ANR	6008848	Callee	strtod		6008709	0					
ANR	6008849	Identifier	strtod		6008709	0					
ANR	6008850	ArgumentList	buf		6008709	1					
ANR	6008851	Argument	buf		6008709	0					
ANR	6008852	Identifier	buf		6008709	0					
ANR	6008853	Argument	& tail		6008709	1					
ANR	6008854	UnaryOperationExpression	& tail		6008709	0					
ANR	6008855	UnaryOperator	&		6008709	0					
ANR	6008856	Identifier	tail		6008709	1					
ANR	6008857	IfStatement	if ( tail == buf )		6008709	14					
ANR	6008858	Condition	tail == buf	131:6:3478:3488	6008709	0	True				
ANR	6008859	EqualityExpression	tail == buf		6008709	0		==			
ANR	6008860	Identifier	tail		6008709	0					
ANR	6008861	Identifier	buf		6008709	1					
ANR	6008862	ReturnStatement	return IJS_ESYNTAX ;	132:4:3495:3513	6008709	1	True				
ANR	6008863	Identifier	IJS_ESYNTAX		6008709	0					
ANR	6008864	ReturnStatement	return 0 ;	134:2:3518:3526	6008709	15	True				
ANR	6008865	PrimaryExpression	0		6008709	0					
ANR	6008866	ReturnType	static int		6008709	1					
ANR	6008867	Identifier	example_parse_wxh		6008709	2					
ANR	6008868	ParameterList	"const char * val , int size , double * pw , double * ph"		6008709	3					
ANR	6008869	Parameter	const char * val	102:19:2941:2955	6008709	0	True				
ANR	6008870	ParameterType	const char *		6008709	0					
ANR	6008871	Identifier	val		6008709	1					
ANR	6008872	Parameter	int size	102:36:2958:2965	6008709	1	True				
ANR	6008873	ParameterType	int		6008709	0					
ANR	6008874	Identifier	size		6008709	1					
ANR	6008875	Parameter	double * pw	103:19:2987:2996	6008709	2	True				
ANR	6008876	ParameterType	double *		6008709	0					
ANR	6008877	Identifier	pw		6008709	1					
ANR	6008878	Parameter	double * ph	103:31:2999:3008	6008709	3	True				
ANR	6008879	ParameterType	double *		6008709	0					
ANR	6008880	Identifier	ph		6008709	1					
ANR	6008881	CFGEntryNode	ENTRY		6008709		True				
ANR	6008882	CFGExitNode	EXIT		6008709		True				
ANR	6008883	Symbol	val		6008709						
ANR	6008884	Symbol	* buf		6008709						
ANR	6008885	Symbol	tail		6008709						
ANR	6008886	Symbol	pw		6008709						
ANR	6008887	Symbol	i		6008709						
ANR	6008888	Symbol	* val		6008709						
ANR	6008889	Symbol	strtod		6008709						
ANR	6008890	Symbol	* pw		6008709						
ANR	6008891	Symbol	buf		6008709						
ANR	6008892	Symbol	* i		6008709						
ANR	6008893	Symbol	* size		6008709						
ANR	6008894	Symbol	size		6008709						
ANR	6008895	Symbol	IJS_ESYNTAX		6008709						
ANR	6008896	Symbol	ph		6008709						
ANR	6008897	Symbol	IJS_EBUF		6008709						
ANR	6008898	Symbol	& tail		6008709						
ANR	6008899	Symbol	* ph		6008709						
ANR	6008900	Function	example_find_key	144:0:3686:3933							
ANR	6008901	FunctionDef	"example_find_key (ExampleParamList * pl , const char * key)"		6008900	0					
ANR	6008902	CompoundStatement		146:0:3769:3933	6008900	0					
ANR	6008903	IdentifierDeclStatement	ExampleParamList * curs ;	147:2:3773:3795	6008900	0	True				
ANR	6008904	IdentifierDecl	* curs		6008900	0					
ANR	6008905	IdentifierDeclType	ExampleParamList *		6008900	0					
ANR	6008906	Identifier	curs		6008900	1					
ANR	6008907	ForStatement	for ( curs = pl ; curs != NULL ; curs = curs -> next )		6008900	1					
ANR	6008908	ForInit	curs = pl ;	149:7:3805:3814	6008900	0	True				
ANR	6008909	AssignmentExpression	curs = pl		6008900	0		=			
ANR	6008910	Identifier	curs		6008900	0					
ANR	6008911	Identifier	pl		6008900	1					
ANR	6008912	Condition	curs != NULL	149:18:3816:3827	6008900	1	True				
ANR	6008913	EqualityExpression	curs != NULL		6008900	0		!=			
ANR	6008914	Identifier	curs		6008900	0					
ANR	6008915	Identifier	NULL		6008900	1					
ANR	6008916	AssignmentExpression	curs = curs -> next	149:32:3830:3846	6008900	2	True	=			
ANR	6008917	Identifier	curs		6008900	0					
ANR	6008918	PtrMemberAccess	curs -> next		6008900	1					
ANR	6008919	Identifier	curs		6008900	0					
ANR	6008920	Identifier	next		6008900	1					
ANR	6008921	CompoundStatement		5:4:83:83	6008900	3					
ANR	6008922	IfStatement	"if ( ! strcmp ( curs -> key , key ) )"		6008900	0					
ANR	6008923	Condition	"! strcmp ( curs -> key , key )"	151:10:3865:3888	6008900	0	True				
ANR	6008924	UnaryOperationExpression	"! strcmp ( curs -> key , key )"		6008900	0					
ANR	6008925	UnaryOperator	!		6008900	0					
ANR	6008926	CallExpression	"strcmp ( curs -> key , key )"		6008900	1					
ANR	6008927	Callee	strcmp		6008900	0					
ANR	6008928	Identifier	strcmp		6008900	0					
ANR	6008929	ArgumentList	curs -> key		6008900	1					
ANR	6008930	Argument	curs -> key		6008900	0					
ANR	6008931	PtrMemberAccess	curs -> key		6008900	0					
ANR	6008932	Identifier	curs		6008900	0					
ANR	6008933	Identifier	key		6008900	1					
ANR	6008934	Argument	key		6008900	1					
ANR	6008935	Identifier	key		6008900	0					
ANR	6008936	ReturnStatement	return curs ;	152:8:3899:3910	6008900	1	True				
ANR	6008937	Identifier	curs		6008900	0					
ANR	6008938	ReturnStatement	return NULL ;	154:2:3920:3931	6008900	2	True				
ANR	6008939	Identifier	NULL		6008900	0					
ANR	6008940	ReturnType	static ExampleParamList *		6008900	1					
ANR	6008941	Identifier	example_find_key		6008900	2					
ANR	6008942	ParameterList	"ExampleParamList * pl , const char * key"		6008900	3					
ANR	6008943	Parameter	ExampleParamList * pl	145:18:3730:3749	6008900	0	True				
ANR	6008944	ParameterType	ExampleParamList *		6008900	0					
ANR	6008945	Identifier	pl		6008900	1					
ANR	6008946	Parameter	const char * key	145:40:3752:3766	6008900	1	True				
ANR	6008947	ParameterType	const char *		6008900	0					
ANR	6008948	Identifier	key		6008900	1					
ANR	6008949	CFGEntryNode	ENTRY		6008900		True				
ANR	6008950	CFGExitNode	EXIT		6008900		True				
ANR	6008951	Symbol	curs -> key		6008900						
ANR	6008952	Symbol	strcmp		6008900						
ANR	6008953	Symbol	NULL		6008900						
ANR	6008954	Symbol	* curs		6008900						
ANR	6008955	Symbol	pl		6008900						
ANR	6008956	Symbol	curs		6008900						
ANR	6008957	Symbol	key		6008900						
ANR	6008958	Symbol	curs -> next		6008900						
ANR	6008959	Function	example_compute_printable	162:0:4071:4584							
ANR	6008960	FunctionDef	"example_compute_printable (ExampleParamList * pl , double printable [ 4 ])"		6008959	0					
ANR	6008961	CompoundStatement		164:0:4152:4584	6008959	0					
ANR	6008962	IdentifierDeclStatement	ExampleParamList * curs ;	165:2:4156:4178	6008959	0	True				
ANR	6008963	IdentifierDecl	* curs		6008959	0					
ANR	6008964	IdentifierDeclType	ExampleParamList *		6008959	0					
ANR	6008965	Identifier	curs		6008959	1					
ANR	6008966	IdentifierDeclStatement	"double width , height ;"	166:2:4182:4202	6008959	1	True				
ANR	6008967	IdentifierDecl	width		6008959	0					
ANR	6008968	IdentifierDeclType	double		6008959	0					
ANR	6008969	Identifier	width		6008959	1					
ANR	6008970	IdentifierDecl	height		6008959	1					
ANR	6008971	IdentifierDeclType	double		6008959	0					
ANR	6008972	Identifier	height		6008959	1					
ANR	6008973	IdentifierDeclStatement	int code ;	167:2:4206:4214	6008959	2	True				
ANR	6008974	IdentifierDecl	code		6008959	0					
ANR	6008975	IdentifierDeclType	int		6008959	0					
ANR	6008976	Identifier	code		6008959	1					
ANR	6008977	IdentifierDeclStatement	double margin = 0.5 ;	168:2:4218:4237	6008959	3	True				
ANR	6008978	IdentifierDecl	margin = 0.5		6008959	0					
ANR	6008979	IdentifierDeclType	double		6008959	0					
ANR	6008980	Identifier	margin		6008959	1					
ANR	6008981	AssignmentExpression	margin = 0.5		6008959	2		=			
ANR	6008982	Identifier	margin		6008959	0					
ANR	6008983	PrimaryExpression	0.5		6008959	1					
ANR	6008984	ExpressionStatement	"curs = example_find_key ( pl , ""PaperSize"" )"	170:2:4242:4283	6008959	4	True				
ANR	6008985	AssignmentExpression	"curs = example_find_key ( pl , ""PaperSize"" )"		6008959	0		=			
ANR	6008986	Identifier	curs		6008959	0					
ANR	6008987	CallExpression	"example_find_key ( pl , ""PaperSize"" )"		6008959	1					
ANR	6008988	Callee	example_find_key		6008959	0					
ANR	6008989	Identifier	example_find_key		6008959	0					
ANR	6008990	ArgumentList	pl		6008959	1					
ANR	6008991	Argument	pl		6008959	0					
ANR	6008992	Identifier	pl		6008959	0					
ANR	6008993	Argument	"""PaperSize"""		6008959	1					
ANR	6008994	PrimaryExpression	"""PaperSize"""		6008959	0					
ANR	6008995	IfStatement	if ( curs == NULL )		6008959	5					
ANR	6008996	Condition	curs == NULL	171:6:4291:4302	6008959	0	True				
ANR	6008997	EqualityExpression	curs == NULL		6008959	0		==			
ANR	6008998	Identifier	curs		6008959	0					
ANR	6008999	Identifier	NULL		6008959	1					
ANR	6009000	ReturnStatement	return - 1 ;	172:4:4309:4318	6008959	1	True				
ANR	6009001	UnaryOperationExpression	- 1		6008959	0					
ANR	6009002	UnaryOperator	-		6008959	0					
ANR	6009003	PrimaryExpression	1		6008959	1					
ANR	6009004	ExpressionStatement	"code = example_parse_wxh ( curs -> value , curs -> value_size , & width , & height )"	173:2:4322:4395	6008959	6	True				
ANR	6009005	AssignmentExpression	"code = example_parse_wxh ( curs -> value , curs -> value_size , & width , & height )"		6008959	0		=			
ANR	6009006	Identifier	code		6008959	0					
ANR	6009007	CallExpression	"example_parse_wxh ( curs -> value , curs -> value_size , & width , & height )"		6008959	1					
ANR	6009008	Callee	example_parse_wxh		6008959	0					
ANR	6009009	Identifier	example_parse_wxh		6008959	0					
ANR	6009010	ArgumentList	curs -> value		6008959	1					
ANR	6009011	Argument	curs -> value		6008959	0					
ANR	6009012	PtrMemberAccess	curs -> value		6008959	0					
ANR	6009013	Identifier	curs		6008959	0					
ANR	6009014	Identifier	value		6008959	1					
ANR	6009015	Argument	curs -> value_size		6008959	1					
ANR	6009016	PtrMemberAccess	curs -> value_size		6008959	0					
ANR	6009017	Identifier	curs		6008959	0					
ANR	6009018	Identifier	value_size		6008959	1					
ANR	6009019	Argument	& width		6008959	2					
ANR	6009020	UnaryOperationExpression	& width		6008959	0					
ANR	6009021	UnaryOperator	&		6008959	0					
ANR	6009022	Identifier	width		6008959	1					
ANR	6009023	Argument	& height		6008959	3					
ANR	6009024	UnaryOperationExpression	& height		6008959	0					
ANR	6009025	UnaryOperator	&		6008959	0					
ANR	6009026	Identifier	height		6008959	1					
ANR	6009027	IfStatement	if ( code == 0 )		6008959	7					
ANR	6009028	Condition	code == 0	175:6:4404:4412	6008959	0	True				
ANR	6009029	EqualityExpression	code == 0		6008959	0		==			
ANR	6009030	Identifier	code		6008959	0					
ANR	6009031	PrimaryExpression	0		6008959	1					
ANR	6009032	CompoundStatement		13:4:266:266	6008959	1					
ANR	6009033	ExpressionStatement	printable [ 0 ] = width - 2 * margin	177:6:4427:4460	6008959	0	True				
ANR	6009034	AssignmentExpression	printable [ 0 ] = width - 2 * margin		6008959	0		=			
ANR	6009035	ArrayIndexing	printable [ 0 ]		6008959	0					
ANR	6009036	Identifier	printable		6008959	0					
ANR	6009037	PrimaryExpression	0		6008959	1					
ANR	6009038	AdditiveExpression	width - 2 * margin		6008959	1		-			
ANR	6009039	Identifier	width		6008959	0					
ANR	6009040	MultiplicativeExpression	2 * margin		6008959	1		*			
ANR	6009041	PrimaryExpression	2		6008959	0					
ANR	6009042	Identifier	margin		6008959	1					
ANR	6009043	ExpressionStatement	printable [ 1 ] = height - 2 * margin	178:6:4468:4502	6008959	1	True				
ANR	6009044	AssignmentExpression	printable [ 1 ] = height - 2 * margin		6008959	0		=			
ANR	6009045	ArrayIndexing	printable [ 1 ]		6008959	0					
ANR	6009046	Identifier	printable		6008959	0					
ANR	6009047	PrimaryExpression	1		6008959	1					
ANR	6009048	AdditiveExpression	height - 2 * margin		6008959	1		-			
ANR	6009049	Identifier	height		6008959	0					
ANR	6009050	MultiplicativeExpression	2 * margin		6008959	1		*			
ANR	6009051	PrimaryExpression	2		6008959	0					
ANR	6009052	Identifier	margin		6008959	1					
ANR	6009053	ExpressionStatement	printable [ 2 ] = margin	179:6:4510:4531	6008959	2	True				
ANR	6009054	AssignmentExpression	printable [ 2 ] = margin		6008959	0		=			
ANR	6009055	ArrayIndexing	printable [ 2 ]		6008959	0					
ANR	6009056	Identifier	printable		6008959	0					
ANR	6009057	PrimaryExpression	2		6008959	1					
ANR	6009058	Identifier	margin		6008959	1					
ANR	6009059	ExpressionStatement	printable [ 3 ] = margin	180:6:4539:4560	6008959	3	True				
ANR	6009060	AssignmentExpression	printable [ 3 ] = margin		6008959	0		=			
ANR	6009061	ArrayIndexing	printable [ 3 ]		6008959	0					
ANR	6009062	Identifier	printable		6008959	0					
ANR	6009063	PrimaryExpression	3		6008959	1					
ANR	6009064	Identifier	margin		6008959	1					
ANR	6009065	ReturnStatement	return code ;	183:2:4571:4582	6008959	8	True				
ANR	6009066	Identifier	code		6008959	0					
ANR	6009067	ReturnType	static int		6008959	1					
ANR	6009068	Identifier	example_compute_printable		6008959	2					
ANR	6009069	ParameterList	"ExampleParamList * pl , double printable [ 4 ]"		6008959	3					
ANR	6009070	Parameter	ExampleParamList * pl	163:27:4109:4128	6008959	0	True				
ANR	6009071	ParameterType	ExampleParamList *		6008959	0					
ANR	6009072	Identifier	pl		6008959	1					
ANR	6009073	Parameter	double printable [ 4 ]	163:49:4131:4149	6008959	1	True				
ANR	6009074	ParameterType	double [ 4 ]		6008959	0					
ANR	6009075	Identifier	printable		6008959	1					
ANR	6009076	CFGEntryNode	ENTRY		6008959		True				
ANR	6009077	CFGExitNode	EXIT		6008959		True				
ANR	6009078	Symbol	margin		6008959						
ANR	6009079	Symbol	code		6008959						
ANR	6009080	Symbol	NULL		6008959						
ANR	6009081	Symbol	& width		6008959						
ANR	6009082	Symbol	curs -> value_size		6008959						
ANR	6009083	Symbol	* printable		6008959						
ANR	6009084	Symbol	printable		6008959						
ANR	6009085	Symbol	& height		6008959						
ANR	6009086	Symbol	curs -> value		6008959						
ANR	6009087	Symbol	* curs		6008959						
ANR	6009088	Symbol	width		6008959						
ANR	6009089	Symbol	example_find_key		6008959						
ANR	6009090	Symbol	pl		6008959						
ANR	6009091	Symbol	curs		6008959						
ANR	6009092	Symbol	height		6008959						
ANR	6009093	Symbol	example_parse_wxh		6008959						
ANR	6009094	Function	example_compute_offset	186:0:4587:5580							
ANR	6009095	FunctionDef	"example_compute_offset (ExampleParamList * pl , IjsPageHeader * ph , double * px0 , double * py0)"		6009094	0					
ANR	6009096	CompoundStatement		189:0:4713:5580	6009094	0					
ANR	6009097	IdentifierDeclStatement	ExampleParamList * curs ;	190:2:4717:4739	6009094	0	True				
ANR	6009098	IdentifierDecl	* curs		6009094	0					
ANR	6009099	IdentifierDeclType	ExampleParamList *		6009094	0					
ANR	6009100	Identifier	curs		6009094	1					
ANR	6009101	IdentifierDeclStatement	"double width , height ;"	191:2:4743:4763	6009094	1	True				
ANR	6009102	IdentifierDecl	width		6009094	0					
ANR	6009103	IdentifierDeclType	double		6009094	0					
ANR	6009104	Identifier	width		6009094	1					
ANR	6009105	IdentifierDecl	height		6009094	1					
ANR	6009106	IdentifierDeclType	double		6009094	0					
ANR	6009107	Identifier	height		6009094	1					
ANR	6009108	IdentifierDeclStatement	"double top , left ;"	192:2:4767:4783	6009094	2	True				
ANR	6009109	IdentifierDecl	top		6009094	0					
ANR	6009110	IdentifierDeclType	double		6009094	0					
ANR	6009111	Identifier	top		6009094	1					
ANR	6009112	IdentifierDecl	left		6009094	1					
ANR	6009113	IdentifierDeclType	double		6009094	0					
ANR	6009114	Identifier	left		6009094	1					
ANR	6009115	IdentifierDeclStatement	int code ;	193:2:4787:4795	6009094	3	True				
ANR	6009116	IdentifierDecl	code		6009094	0					
ANR	6009117	IdentifierDeclType	int		6009094	0					
ANR	6009118	Identifier	code		6009094	1					
ANR	6009119	ExpressionStatement	* px0 = 0	195:2:4800:4808	6009094	4	True				
ANR	6009120	AssignmentExpression	* px0 = 0		6009094	0		=			
ANR	6009121	UnaryOperationExpression	* px0		6009094	0					
ANR	6009122	UnaryOperator	*		6009094	0					
ANR	6009123	Identifier	px0		6009094	1					
ANR	6009124	PrimaryExpression	0		6009094	1					
ANR	6009125	ExpressionStatement	* py0 = 0	196:2:4812:4820	6009094	5	True				
ANR	6009126	AssignmentExpression	* py0 = 0		6009094	0		=			
ANR	6009127	UnaryOperationExpression	* py0		6009094	0					
ANR	6009128	UnaryOperator	*		6009094	0					
ANR	6009129	Identifier	py0		6009094	1					
ANR	6009130	PrimaryExpression	0		6009094	1					
ANR	6009131	ExpressionStatement	"curs = example_find_key ( pl , ""PaperSize"" )"	198:2:4825:4866	6009094	6	True				
ANR	6009132	AssignmentExpression	"curs = example_find_key ( pl , ""PaperSize"" )"		6009094	0		=			
ANR	6009133	Identifier	curs		6009094	0					
ANR	6009134	CallExpression	"example_find_key ( pl , ""PaperSize"" )"		6009094	1					
ANR	6009135	Callee	example_find_key		6009094	0					
ANR	6009136	Identifier	example_find_key		6009094	0					
ANR	6009137	ArgumentList	pl		6009094	1					
ANR	6009138	Argument	pl		6009094	0					
ANR	6009139	Identifier	pl		6009094	0					
ANR	6009140	Argument	"""PaperSize"""		6009094	1					
ANR	6009141	PrimaryExpression	"""PaperSize"""		6009094	0					
ANR	6009142	IfStatement	if ( curs == NULL )		6009094	7					
ANR	6009143	Condition	curs == NULL	199:6:4874:4885	6009094	0	True				
ANR	6009144	EqualityExpression	curs == NULL		6009094	0		==			
ANR	6009145	Identifier	curs		6009094	0					
ANR	6009146	Identifier	NULL		6009094	1					
ANR	6009147	ReturnStatement	return - 1 ;	200:4:4892:4901	6009094	1	True				
ANR	6009148	UnaryOperationExpression	- 1		6009094	0					
ANR	6009149	UnaryOperator	-		6009094	0					
ANR	6009150	PrimaryExpression	1		6009094	1					
ANR	6009151	ExpressionStatement	"code = example_parse_wxh ( curs -> value , curs -> value_size , & width , & height )"	202:2:4906:4979	6009094	8	True				
ANR	6009152	AssignmentExpression	"code = example_parse_wxh ( curs -> value , curs -> value_size , & width , & height )"		6009094	0		=			
ANR	6009153	Identifier	code		6009094	0					
ANR	6009154	CallExpression	"example_parse_wxh ( curs -> value , curs -> value_size , & width , & height )"		6009094	1					
ANR	6009155	Callee	example_parse_wxh		6009094	0					
ANR	6009156	Identifier	example_parse_wxh		6009094	0					
ANR	6009157	ArgumentList	curs -> value		6009094	1					
ANR	6009158	Argument	curs -> value		6009094	0					
ANR	6009159	PtrMemberAccess	curs -> value		6009094	0					
ANR	6009160	Identifier	curs		6009094	0					
ANR	6009161	Identifier	value		6009094	1					
ANR	6009162	Argument	curs -> value_size		6009094	1					
ANR	6009163	PtrMemberAccess	curs -> value_size		6009094	0					
ANR	6009164	Identifier	curs		6009094	0					
ANR	6009165	Identifier	value_size		6009094	1					
ANR	6009166	Argument	& width		6009094	2					
ANR	6009167	UnaryOperationExpression	& width		6009094	0					
ANR	6009168	UnaryOperator	&		6009094	0					
ANR	6009169	Identifier	width		6009094	1					
ANR	6009170	Argument	& height		6009094	3					
ANR	6009171	UnaryOperationExpression	& height		6009094	0					
ANR	6009172	UnaryOperator	&		6009094	0					
ANR	6009173	Identifier	height		6009094	1					
ANR	6009174	IfStatement	if ( code == 0 )		6009094	9					
ANR	6009175	Condition	code == 0	204:6:4988:4996	6009094	0	True				
ANR	6009176	EqualityExpression	code == 0		6009094	0		==			
ANR	6009177	Identifier	code		6009094	0					
ANR	6009178	PrimaryExpression	0		6009094	1					
ANR	6009179	CompoundStatement		17:4:289:289	6009094	1					
ANR	6009180	ExpressionStatement	"curs = example_find_key ( pl , ""TopLeft"" )"	206:6:5011:5050	6009094	0	True				
ANR	6009181	AssignmentExpression	"curs = example_find_key ( pl , ""TopLeft"" )"		6009094	0		=			
ANR	6009182	Identifier	curs		6009094	0					
ANR	6009183	CallExpression	"example_find_key ( pl , ""TopLeft"" )"		6009094	1					
ANR	6009184	Callee	example_find_key		6009094	0					
ANR	6009185	Identifier	example_find_key		6009094	0					
ANR	6009186	ArgumentList	pl		6009094	1					
ANR	6009187	Argument	pl		6009094	0					
ANR	6009188	Identifier	pl		6009094	0					
ANR	6009189	Argument	"""TopLeft"""		6009094	1					
ANR	6009190	PrimaryExpression	"""TopLeft"""		6009094	0					
ANR	6009191	IfStatement	if ( curs != NULL )		6009094	1					
ANR	6009192	Condition	curs != NULL	207:10:5062:5073	6009094	0	True				
ANR	6009193	EqualityExpression	curs != NULL		6009094	0		!=			
ANR	6009194	Identifier	curs		6009094	0					
ANR	6009195	Identifier	NULL		6009094	1					
ANR	6009196	CompoundStatement		20:8:370:370	6009094	1					
ANR	6009197	ExpressionStatement	"code = example_parse_wxh ( curs -> value , curs -> value_size , & top , & left )"	209:10:5096:5201	6009094	0	True				
ANR	6009198	AssignmentExpression	"code = example_parse_wxh ( curs -> value , curs -> value_size , & top , & left )"		6009094	0		=			
ANR	6009199	Identifier	code		6009094	0					
ANR	6009200	CallExpression	"example_parse_wxh ( curs -> value , curs -> value_size , & top , & left )"		6009094	1					
ANR	6009201	Callee	example_parse_wxh		6009094	0					
ANR	6009202	Identifier	example_parse_wxh		6009094	0					
ANR	6009203	ArgumentList	curs -> value		6009094	1					
ANR	6009204	Argument	curs -> value		6009094	0					
ANR	6009205	PtrMemberAccess	curs -> value		6009094	0					
ANR	6009206	Identifier	curs		6009094	0					
ANR	6009207	Identifier	value		6009094	1					
ANR	6009208	Argument	curs -> value_size		6009094	1					
ANR	6009209	PtrMemberAccess	curs -> value_size		6009094	0					
ANR	6009210	Identifier	curs		6009094	0					
ANR	6009211	Identifier	value_size		6009094	1					
ANR	6009212	Argument	& top		6009094	2					
ANR	6009213	UnaryOperationExpression	& top		6009094	0					
ANR	6009214	UnaryOperator	&		6009094	0					
ANR	6009215	Identifier	top		6009094	1					
ANR	6009216	Argument	& left		6009094	3					
ANR	6009217	UnaryOperationExpression	& left		6009094	0					
ANR	6009218	UnaryOperator	&		6009094	0					
ANR	6009219	Identifier	left		6009094	1					
ANR	6009220	ElseStatement	else		6009094	0					
ANR	6009221	CompoundStatement		26:10:530:549	6009094	0					
ANR	6009222	IdentifierDeclStatement	double printable [ 4 ] ;	214:10:5244:5263	6009094	0	True				
ANR	6009223	IdentifierDecl	printable [ 4 ]		6009094	0					
ANR	6009224	IdentifierDeclType	double [ 4 ]		6009094	0					
ANR	6009225	Identifier	printable		6009094	1					
ANR	6009226	PrimaryExpression	4		6009094	2					
ANR	6009227	ExpressionStatement	"code = example_compute_printable ( pl , printable )"	216:10:5276:5324	6009094	1	True				
ANR	6009228	AssignmentExpression	"code = example_compute_printable ( pl , printable )"		6009094	0		=			
ANR	6009229	Identifier	code		6009094	0					
ANR	6009230	CallExpression	"example_compute_printable ( pl , printable )"		6009094	1					
ANR	6009231	Callee	example_compute_printable		6009094	0					
ANR	6009232	Identifier	example_compute_printable		6009094	0					
ANR	6009233	ArgumentList	pl		6009094	1					
ANR	6009234	Argument	pl		6009094	0					
ANR	6009235	Identifier	pl		6009094	0					
ANR	6009236	Argument	printable		6009094	1					
ANR	6009237	Identifier	printable		6009094	0					
ANR	6009238	IfStatement	if ( code == 0 )		6009094	2					
ANR	6009239	Condition	code == 0	217:14:5340:5348	6009094	0	True				
ANR	6009240	EqualityExpression	code == 0		6009094	0		==			
ANR	6009241	Identifier	code		6009094	0					
ANR	6009242	PrimaryExpression	0		6009094	1					
ANR	6009243	CompoundStatement		30:12:649:649	6009094	1					
ANR	6009244	ExpressionStatement	top = printable [ 2 ]	219:14:5379:5397	6009094	0	True				
ANR	6009245	AssignmentExpression	top = printable [ 2 ]		6009094	0		=			
ANR	6009246	Identifier	top		6009094	0					
ANR	6009247	ArrayIndexing	printable [ 2 ]		6009094	1					
ANR	6009248	Identifier	printable		6009094	0					
ANR	6009249	PrimaryExpression	2		6009094	1					
ANR	6009250	ExpressionStatement	left = printable [ 3 ]	220:14:5413:5432	6009094	1	True				
ANR	6009251	AssignmentExpression	left = printable [ 3 ]		6009094	0		=			
ANR	6009252	Identifier	left		6009094	0					
ANR	6009253	ArrayIndexing	printable [ 3 ]		6009094	1					
ANR	6009254	Identifier	printable		6009094	0					
ANR	6009255	PrimaryExpression	3		6009094	1					
ANR	6009256	IfStatement	if ( code == 0 )		6009094	10					
ANR	6009257	Condition	code == 0	225:6:5471:5479	6009094	0	True				
ANR	6009258	EqualityExpression	code == 0		6009094	0		==			
ANR	6009259	Identifier	code		6009094	0					
ANR	6009260	PrimaryExpression	0		6009094	1					
ANR	6009261	CompoundStatement		38:4:772:772	6009094	1					
ANR	6009262	ExpressionStatement	* px0 = left	227:6:5494:5505	6009094	0	True				
ANR	6009263	AssignmentExpression	* px0 = left		6009094	0		=			
ANR	6009264	UnaryOperationExpression	* px0		6009094	0					
ANR	6009265	UnaryOperator	*		6009094	0					
ANR	6009266	Identifier	px0		6009094	1					
ANR	6009267	Identifier	left		6009094	1					
ANR	6009268	ExpressionStatement	* py0 = height - ph -> height / ph -> yres - top	228:6:5513:5556	6009094	1	True				
ANR	6009269	AssignmentExpression	* py0 = height - ph -> height / ph -> yres - top		6009094	0		=			
ANR	6009270	UnaryOperationExpression	* py0		6009094	0					
ANR	6009271	UnaryOperator	*		6009094	0					
ANR	6009272	Identifier	py0		6009094	1					
ANR	6009273	AdditiveExpression	height - ph -> height / ph -> yres - top		6009094	1		-			
ANR	6009274	Identifier	height		6009094	0					
ANR	6009275	AdditiveExpression	ph -> height / ph -> yres - top		6009094	1		-			
ANR	6009276	MultiplicativeExpression	ph -> height / ph -> yres		6009094	0		/			
ANR	6009277	PtrMemberAccess	ph -> height		6009094	0					
ANR	6009278	Identifier	ph		6009094	0					
ANR	6009279	Identifier	height		6009094	1					
ANR	6009280	PtrMemberAccess	ph -> yres		6009094	1					
ANR	6009281	Identifier	ph		6009094	0					
ANR	6009282	Identifier	yres		6009094	1					
ANR	6009283	Identifier	top		6009094	1					
ANR	6009284	ReturnStatement	return code ;	231:2:5567:5578	6009094	11	True				
ANR	6009285	Identifier	code		6009094	0					
ANR	6009286	ReturnType	static int		6009094	1					
ANR	6009287	Identifier	example_compute_offset		6009094	2					
ANR	6009288	ParameterList	"ExampleParamList * pl , IjsPageHeader * ph , double * px0 , double * py0"		6009094	3					
ANR	6009289	Parameter	ExampleParamList * pl	187:24:4622:4641	6009094	0	True				
ANR	6009290	ParameterType	ExampleParamList *		6009094	0					
ANR	6009291	Identifier	pl		6009094	1					
ANR	6009292	Parameter	IjsPageHeader * ph	187:46:4644:4660	6009094	1	True				
ANR	6009293	ParameterType	IjsPageHeader *		6009094	0					
ANR	6009294	Identifier	ph		6009094	1					
ANR	6009295	Parameter	double * px0	188:24:4687:4697	6009094	2	True				
ANR	6009296	ParameterType	double *		6009094	0					
ANR	6009297	Identifier	px0		6009094	1					
ANR	6009298	Parameter	double * py0	188:37:4700:4710	6009094	3	True				
ANR	6009299	ParameterType	double *		6009094	0					
ANR	6009300	Identifier	py0		6009094	1					
ANR	6009301	CFGEntryNode	ENTRY		6009094		True				
ANR	6009302	CFGExitNode	EXIT		6009094		True				
ANR	6009303	Symbol	code		6009094						
ANR	6009304	Symbol	py0		6009094						
ANR	6009305	Symbol	& width		6009094						
ANR	6009306	Symbol	curs -> value_size		6009094						
ANR	6009307	Symbol	& left		6009094						
ANR	6009308	Symbol	* printable		6009094						
ANR	6009309	Symbol	& height		6009094						
ANR	6009310	Symbol	curs -> value		6009094						
ANR	6009311	Symbol	ph -> height		6009094						
ANR	6009312	Symbol	* px0		6009094						
ANR	6009313	Symbol	top		6009094						
ANR	6009314	Symbol	example_compute_printable		6009094						
ANR	6009315	Symbol	example_find_key		6009094						
ANR	6009316	Symbol	curs		6009094						
ANR	6009317	Symbol	height		6009094						
ANR	6009318	Symbol	NULL		6009094						
ANR	6009319	Symbol	px0		6009094						
ANR	6009320	Symbol	printable		6009094						
ANR	6009321	Symbol	* py0		6009094						
ANR	6009322	Symbol	* curs		6009094						
ANR	6009323	Symbol	left		6009094						
ANR	6009324	Symbol	ph		6009094						
ANR	6009325	Symbol	width		6009094						
ANR	6009326	Symbol	ph -> yres		6009094						
ANR	6009327	Symbol	pl		6009094						
ANR	6009328	Symbol	& top		6009094						
ANR	6009329	Symbol	* ph		6009094						
ANR	6009330	Symbol	example_parse_wxh		6009094						
ANR	6009331	Function	example_get_cb	234:0:5583:6980							
ANR	6009332	FunctionDef	"example_get_cb (void * get_cb_data , IjsServerCtx * ctx , IjsJobId job_id , const char * key , char * val_buf , int val_size)"		6009331	0					
ANR	6009333	CompoundStatement		241:0:5796:6980	6009331	0					
ANR	6009334	IdentifierDeclStatement	ExampleParamList * pl = * ( ExampleParamList * * ) get_cb_data ;	242:2:5800:5856	6009331	0	True				
ANR	6009335	IdentifierDecl	* pl = * ( ExampleParamList * * ) get_cb_data		6009331	0					
ANR	6009336	IdentifierDeclType	ExampleParamList *		6009331	0					
ANR	6009337	Identifier	pl		6009331	1					
ANR	6009338	AssignmentExpression	* pl = * ( ExampleParamList * * ) get_cb_data		6009331	2		=			
ANR	6009339	Identifier	pl		6009331	0					
ANR	6009340	UnaryOperationExpression	* ( ExampleParamList * * ) get_cb_data		6009331	1					
ANR	6009341	UnaryOperator	*		6009331	0					
ANR	6009342	CastExpression	( ExampleParamList * * ) get_cb_data		6009331	1					
ANR	6009343	CastTarget	ExampleParamList * *		6009331	0					
ANR	6009344	Identifier	get_cb_data		6009331	1					
ANR	6009345	IdentifierDeclStatement	ExampleParamList * curs ;	243:2:5860:5882	6009331	1	True				
ANR	6009346	IdentifierDecl	* curs		6009331	0					
ANR	6009347	IdentifierDeclType	ExampleParamList *		6009331	0					
ANR	6009348	Identifier	curs		6009331	1					
ANR	6009349	IdentifierDeclStatement	const char * val ;	244:2:5886:5901	6009331	2	True				
ANR	6009350	IdentifierDecl	* val		6009331	0					
ANR	6009351	IdentifierDeclType	const char *		6009331	0					
ANR	6009352	Identifier	val		6009331	1					
ANR	6009353	IdentifierDeclStatement	char buf [ 256 ] ;	245:2:5905:5918	6009331	3	True				
ANR	6009354	IdentifierDecl	buf [ 256 ]		6009331	0					
ANR	6009355	IdentifierDeclType	char [ 256 ]		6009331	0					
ANR	6009356	Identifier	buf		6009331	1					
ANR	6009357	PrimaryExpression	256		6009331	2					
ANR	6009358	IdentifierDeclStatement	int code ;	246:2:5922:5930	6009331	4	True				
ANR	6009359	IdentifierDecl	code		6009331	0					
ANR	6009360	IdentifierDeclType	int		6009331	0					
ANR	6009361	Identifier	code		6009331	1					
ANR	6009362	ExpressionStatement	"fprintf ( stderr , ""example_get_cb: %s\\n"" , key )"	248:2:5935:5980	6009331	5	True				
ANR	6009363	CallExpression	"fprintf ( stderr , ""example_get_cb: %s\\n"" , key )"		6009331	0					
ANR	6009364	Callee	fprintf		6009331	0					
ANR	6009365	Identifier	fprintf		6009331	0					
ANR	6009366	ArgumentList	stderr		6009331	1					
ANR	6009367	Argument	stderr		6009331	0					
ANR	6009368	Identifier	stderr		6009331	0					
ANR	6009369	Argument	"""example_get_cb: %s\\n"""		6009331	1					
ANR	6009370	PrimaryExpression	"""example_get_cb: %s\\n"""		6009331	0					
ANR	6009371	Argument	key		6009331	2					
ANR	6009372	Identifier	key		6009331	0					
ANR	6009373	ExpressionStatement	"curs = example_find_key ( pl , key )"	249:2:5984:6017	6009331	6	True				
ANR	6009374	AssignmentExpression	"curs = example_find_key ( pl , key )"		6009331	0		=			
ANR	6009375	Identifier	curs		6009331	0					
ANR	6009376	CallExpression	"example_find_key ( pl , key )"		6009331	1					
ANR	6009377	Callee	example_find_key		6009331	0					
ANR	6009378	Identifier	example_find_key		6009331	0					
ANR	6009379	ArgumentList	pl		6009331	1					
ANR	6009380	Argument	pl		6009331	0					
ANR	6009381	Identifier	pl		6009331	0					
ANR	6009382	Argument	key		6009331	1					
ANR	6009383	Identifier	key		6009331	0					
ANR	6009384	IfStatement	if ( curs != NULL )		6009331	7					
ANR	6009385	Condition	curs != NULL	250:6:6025:6036	6009331	0	True				
ANR	6009386	EqualityExpression	curs != NULL		6009331	0		!=			
ANR	6009387	Identifier	curs		6009331	0					
ANR	6009388	Identifier	NULL		6009331	1					
ANR	6009389	CompoundStatement		11:4:246:246	6009331	1					
ANR	6009390	IfStatement	if ( curs -> value_size > val_size )		6009331	0					
ANR	6009391	Condition	curs -> value_size > val_size	252:10:6055:6081	6009331	0	True				
ANR	6009392	RelationalExpression	curs -> value_size > val_size		6009331	0		>			
ANR	6009393	PtrMemberAccess	curs -> value_size		6009331	0					
ANR	6009394	Identifier	curs		6009331	0					
ANR	6009395	Identifier	value_size		6009331	1					
ANR	6009396	Identifier	val_size		6009331	1					
ANR	6009397	ReturnStatement	return IJS_EBUF ;	253:8:6092:6107	6009331	1	True				
ANR	6009398	Identifier	IJS_EBUF		6009331	0					
ANR	6009399	ExpressionStatement	"memcpy ( val_buf , curs -> value , curs -> value_size )"	254:6:6115:6162	6009331	1	True				
ANR	6009400	CallExpression	"memcpy ( val_buf , curs -> value , curs -> value_size )"		6009331	0					
ANR	6009401	Callee	memcpy		6009331	0					
ANR	6009402	Identifier	memcpy		6009331	0					
ANR	6009403	ArgumentList	val_buf		6009331	1					
ANR	6009404	Argument	val_buf		6009331	0					
ANR	6009405	Identifier	val_buf		6009331	0					
ANR	6009406	Argument	curs -> value		6009331	1					
ANR	6009407	PtrMemberAccess	curs -> value		6009331	0					
ANR	6009408	Identifier	curs		6009331	0					
ANR	6009409	Identifier	value		6009331	1					
ANR	6009410	Argument	curs -> value_size		6009331	2					
ANR	6009411	PtrMemberAccess	curs -> value_size		6009331	0					
ANR	6009412	Identifier	curs		6009331	0					
ANR	6009413	Identifier	value_size		6009331	1					
ANR	6009414	ReturnStatement	return curs -> value_size ;	255:6:6170:6193	6009331	2	True				
ANR	6009415	PtrMemberAccess	curs -> value_size		6009331	0					
ANR	6009416	Identifier	curs		6009331	0					
ANR	6009417	Identifier	value_size		6009331	1					
ANR	6009418	IfStatement	"if ( ! strcmp ( key , ""PrintableArea"" ) || ! strcmp ( key , ""PrintableTopLeft"" ) )"		6009331	8					
ANR	6009419	Condition	"! strcmp ( key , ""PrintableArea"" ) || ! strcmp ( key , ""PrintableTopLeft"" )"	258:6:6208:6274	6009331	0	True				
ANR	6009420	OrExpression	"! strcmp ( key , ""PrintableArea"" ) || ! strcmp ( key , ""PrintableTopLeft"" )"		6009331	0		||			
ANR	6009421	UnaryOperationExpression	"! strcmp ( key , ""PrintableArea"" )"		6009331	0					
ANR	6009422	UnaryOperator	!		6009331	0					
ANR	6009423	CallExpression	"strcmp ( key , ""PrintableArea"" )"		6009331	1					
ANR	6009424	Callee	strcmp		6009331	0					
ANR	6009425	Identifier	strcmp		6009331	0					
ANR	6009426	ArgumentList	key		6009331	1					
ANR	6009427	Argument	key		6009331	0					
ANR	6009428	Identifier	key		6009331	0					
ANR	6009429	Argument	"""PrintableArea"""		6009331	1					
ANR	6009430	PrimaryExpression	"""PrintableArea"""		6009331	0					
ANR	6009431	UnaryOperationExpression	"! strcmp ( key , ""PrintableTopLeft"" )"		6009331	1					
ANR	6009432	UnaryOperator	!		6009331	0					
ANR	6009433	CallExpression	"strcmp ( key , ""PrintableTopLeft"" )"		6009331	1					
ANR	6009434	Callee	strcmp		6009331	0					
ANR	6009435	Identifier	strcmp		6009331	0					
ANR	6009436	ArgumentList	key		6009331	1					
ANR	6009437	Argument	key		6009331	0					
ANR	6009438	Identifier	key		6009331	0					
ANR	6009439	Argument	"""PrintableTopLeft"""		6009331	1					
ANR	6009440	PrimaryExpression	"""PrintableTopLeft"""		6009331	0					
ANR	6009441	CompoundStatement		21:6:519:567	6009331	1					
ANR	6009442	IdentifierDeclStatement	double printable [ 4 ] ;	260:6:6289:6308	6009331	0	True				
ANR	6009443	IdentifierDecl	printable [ 4 ]		6009331	0					
ANR	6009444	IdentifierDeclType	double [ 4 ]		6009331	0					
ANR	6009445	Identifier	printable		6009331	1					
ANR	6009446	PrimaryExpression	4		6009331	2					
ANR	6009447	IdentifierDeclStatement	"int off = ! strcmp ( key , ""PrintableArea"" ) ? 0 : 2 ;"	261:6:6316:6364	6009331	1	True				
ANR	6009448	IdentifierDecl	"off = ! strcmp ( key , ""PrintableArea"" ) ? 0 : 2"		6009331	0					
ANR	6009449	IdentifierDeclType	int		6009331	0					
ANR	6009450	Identifier	off		6009331	1					
ANR	6009451	AssignmentExpression	"off = ! strcmp ( key , ""PrintableArea"" ) ? 0 : 2"		6009331	2		=			
ANR	6009452	Identifier	off		6009331	0					
ANR	6009453	ConditionalExpression	"! strcmp ( key , ""PrintableArea"" ) ? 0 : 2"		6009331	1					
ANR	6009454	Condition	"! strcmp ( key , ""PrintableArea"" )"		6009331	0					
ANR	6009455	UnaryOperationExpression	"! strcmp ( key , ""PrintableArea"" )"		6009331	0					
ANR	6009456	UnaryOperator	!		6009331	0					
ANR	6009457	CallExpression	"strcmp ( key , ""PrintableArea"" )"		6009331	1					
ANR	6009458	Callee	strcmp		6009331	0					
ANR	6009459	Identifier	strcmp		6009331	0					
ANR	6009460	ArgumentList	key		6009331	1					
ANR	6009461	Argument	key		6009331	0					
ANR	6009462	Identifier	key		6009331	0					
ANR	6009463	Argument	"""PrintableArea"""		6009331	1					
ANR	6009464	PrimaryExpression	"""PrintableArea"""		6009331	0					
ANR	6009465	PrimaryExpression	0		6009331	1					
ANR	6009466	PrimaryExpression	2		6009331	2					
ANR	6009467	ExpressionStatement	"code = example_compute_printable ( pl , printable )"	263:6:6373:6421	6009331	2	True				
ANR	6009468	AssignmentExpression	"code = example_compute_printable ( pl , printable )"		6009331	0		=			
ANR	6009469	Identifier	code		6009331	0					
ANR	6009470	CallExpression	"example_compute_printable ( pl , printable )"		6009331	1					
ANR	6009471	Callee	example_compute_printable		6009331	0					
ANR	6009472	Identifier	example_compute_printable		6009331	0					
ANR	6009473	ArgumentList	pl		6009331	1					
ANR	6009474	Argument	pl		6009331	0					
ANR	6009475	Identifier	pl		6009331	0					
ANR	6009476	Argument	printable		6009331	1					
ANR	6009477	Identifier	printable		6009331	0					
ANR	6009478	IfStatement	if ( code == 0 )		6009331	3					
ANR	6009479	Condition	code == 0	264:10:6433:6441	6009331	0	True				
ANR	6009480	EqualityExpression	code == 0		6009331	0		==			
ANR	6009481	Identifier	code		6009331	0					
ANR	6009482	PrimaryExpression	0		6009331	1					
ANR	6009483	CompoundStatement		25:8:655:655	6009331	1					
ANR	6009484	ExpressionStatement	"sprintf ( buf , ""%gx%g"" , printable [ off + 0 ] , printable [ off + 1 ] )"	266:10:6464:6526	6009331	0	True				
ANR	6009485	CallExpression	"sprintf ( buf , ""%gx%g"" , printable [ off + 0 ] , printable [ off + 1 ] )"		6009331	0					
ANR	6009486	Callee	sprintf		6009331	0					
ANR	6009487	Identifier	sprintf		6009331	0					
ANR	6009488	ArgumentList	buf		6009331	1					
ANR	6009489	Argument	buf		6009331	0					
ANR	6009490	Identifier	buf		6009331	0					
ANR	6009491	Argument	"""%gx%g"""		6009331	1					
ANR	6009492	PrimaryExpression	"""%gx%g"""		6009331	0					
ANR	6009493	Argument	printable [ off + 0 ]		6009331	2					
ANR	6009494	ArrayIndexing	printable [ off + 0 ]		6009331	0					
ANR	6009495	Identifier	printable		6009331	0					
ANR	6009496	AdditiveExpression	off + 0		6009331	1		+			
ANR	6009497	Identifier	off		6009331	0					
ANR	6009498	PrimaryExpression	0		6009331	1					
ANR	6009499	Argument	printable [ off + 1 ]		6009331	3					
ANR	6009500	ArrayIndexing	printable [ off + 1 ]		6009331	0					
ANR	6009501	Identifier	printable		6009331	0					
ANR	6009502	AdditiveExpression	off + 1		6009331	1		+			
ANR	6009503	Identifier	off		6009331	0					
ANR	6009504	PrimaryExpression	1		6009331	1					
ANR	6009505	ExpressionStatement	val = buf	267:10:6538:6547	6009331	1	True				
ANR	6009506	AssignmentExpression	val = buf		6009331	0		=			
ANR	6009507	Identifier	val		6009331	0					
ANR	6009508	Identifier	buf		6009331	1					
ANR	6009509	IfStatement	"if ( ! strcmp ( key , ""DeviceManufacturer"" ) )"		6009331	9					
ANR	6009510	Condition	"! strcmp ( key , ""DeviceManufacturer"" )"	271:6:6572:6606	6009331	0	True				
ANR	6009511	UnaryOperationExpression	"! strcmp ( key , ""DeviceManufacturer"" )"		6009331	0					
ANR	6009512	UnaryOperator	!		6009331	0					
ANR	6009513	CallExpression	"strcmp ( key , ""DeviceManufacturer"" )"		6009331	1					
ANR	6009514	Callee	strcmp		6009331	0					
ANR	6009515	Identifier	strcmp		6009331	0					
ANR	6009516	ArgumentList	key		6009331	1					
ANR	6009517	Argument	key		6009331	0					
ANR	6009518	Identifier	key		6009331	0					
ANR	6009519	Argument	"""DeviceManufacturer"""		6009331	1					
ANR	6009520	PrimaryExpression	"""DeviceManufacturer"""		6009331	0					
ANR	6009521	ExpressionStatement	"val = ""IJS Distribution"""	272:4:6613:6637	6009331	1	True				
ANR	6009522	AssignmentExpression	"val = ""IJS Distribution"""		6009331	0		=			
ANR	6009523	Identifier	val		6009331	0					
ANR	6009524	PrimaryExpression	"""IJS Distribution"""		6009331	1					
ANR	6009525	ElseStatement	else		6009331	0					
ANR	6009526	IfStatement	"if ( ! strcmp ( key , ""DeviceModel"" ) )"		6009331	0					
ANR	6009527	Condition	"! strcmp ( key , ""DeviceModel"" )"	273:11:6650:6677	6009331	0	True				
ANR	6009528	UnaryOperationExpression	"! strcmp ( key , ""DeviceModel"" )"		6009331	0					
ANR	6009529	UnaryOperator	!		6009331	0					
ANR	6009530	CallExpression	"strcmp ( key , ""DeviceModel"" )"		6009331	1					
ANR	6009531	Callee	strcmp		6009331	0					
ANR	6009532	Identifier	strcmp		6009331	0					
ANR	6009533	ArgumentList	key		6009331	1					
ANR	6009534	Argument	key		6009331	0					
ANR	6009535	Identifier	key		6009331	0					
ANR	6009536	Argument	"""DeviceModel"""		6009331	1					
ANR	6009537	PrimaryExpression	"""DeviceModel"""		6009331	0					
ANR	6009538	ExpressionStatement	"val = ""ijs_server_example"""	274:4:6684:6710	6009331	1	True				
ANR	6009539	AssignmentExpression	"val = ""ijs_server_example"""		6009331	0		=			
ANR	6009540	Identifier	val		6009331	0					
ANR	6009541	PrimaryExpression	"""ijs_server_example"""		6009331	1					
ANR	6009542	ElseStatement	else		6009331	0					
ANR	6009543	IfStatement	"if ( ! strcmp ( key , ""PageImageFormat"" ) )"		6009331	0					
ANR	6009544	Condition	"! strcmp ( key , ""PageImageFormat"" )"	275:11:6723:6754	6009331	0	True				
ANR	6009545	UnaryOperationExpression	"! strcmp ( key , ""PageImageFormat"" )"		6009331	0					
ANR	6009546	UnaryOperator	!		6009331	0					
ANR	6009547	CallExpression	"strcmp ( key , ""PageImageFormat"" )"		6009331	1					
ANR	6009548	Callee	strcmp		6009331	0					
ANR	6009549	Identifier	strcmp		6009331	0					
ANR	6009550	ArgumentList	key		6009331	1					
ANR	6009551	Argument	key		6009331	0					
ANR	6009552	Identifier	key		6009331	0					
ANR	6009553	Argument	"""PageImageFormat"""		6009331	1					
ANR	6009554	PrimaryExpression	"""PageImageFormat"""		6009331	0					
ANR	6009555	ExpressionStatement	"val = ""Raster"""	276:4:6761:6775	6009331	1	True				
ANR	6009556	AssignmentExpression	"val = ""Raster"""		6009331	0		=			
ANR	6009557	Identifier	val		6009331	0					
ANR	6009558	PrimaryExpression	"""Raster"""		6009331	1					
ANR	6009559	IfStatement	if ( val == NULL )		6009331	10					
ANR	6009560	Condition	val == NULL	278:6:6784:6794	6009331	0	True				
ANR	6009561	EqualityExpression	val == NULL		6009331	0		==			
ANR	6009562	Identifier	val		6009331	0					
ANR	6009563	Identifier	NULL		6009331	1					
ANR	6009564	ReturnStatement	return IJS_EUNKPARAM ;	279:4:6801:6821	6009331	1	True				
ANR	6009565	Identifier	IJS_EUNKPARAM		6009331	0					
ANR	6009566	ElseStatement	else		6009331	0					
ANR	6009567	CompoundStatement		42:6:1045:1068	6009331	0					
ANR	6009568	IdentifierDeclStatement	int size = strlen ( val ) ;	282:6:6842:6865	6009331	0	True				
ANR	6009569	IdentifierDecl	size = strlen ( val )		6009331	0					
ANR	6009570	IdentifierDeclType	int		6009331	0					
ANR	6009571	Identifier	size		6009331	1					
ANR	6009572	AssignmentExpression	size = strlen ( val )		6009331	2		=			
ANR	6009573	Identifier	size		6009331	0					
ANR	6009574	CallExpression	strlen ( val )		6009331	1					
ANR	6009575	Callee	strlen		6009331	0					
ANR	6009576	Identifier	strlen		6009331	0					
ANR	6009577	ArgumentList	val		6009331	1					
ANR	6009578	Argument	val		6009331	0					
ANR	6009579	Identifier	val		6009331	0					
ANR	6009580	IfStatement	if ( size > val_size )		6009331	1					
ANR	6009581	Condition	size > val_size	284:10:6878:6892	6009331	0	True				
ANR	6009582	RelationalExpression	size > val_size		6009331	0		>			
ANR	6009583	Identifier	size		6009331	0					
ANR	6009584	Identifier	val_size		6009331	1					
ANR	6009585	ReturnStatement	return IJS_EBUF ;	285:8:6903:6918	6009331	1	True				
ANR	6009586	Identifier	IJS_EBUF		6009331	0					
ANR	6009587	ExpressionStatement	"memcpy ( val_buf , val , size )"	286:6:6926:6953	6009331	2	True				
ANR	6009588	CallExpression	"memcpy ( val_buf , val , size )"		6009331	0					
ANR	6009589	Callee	memcpy		6009331	0					
ANR	6009590	Identifier	memcpy		6009331	0					
ANR	6009591	ArgumentList	val_buf		6009331	1					
ANR	6009592	Argument	val_buf		6009331	0					
ANR	6009593	Identifier	val_buf		6009331	0					
ANR	6009594	Argument	val		6009331	1					
ANR	6009595	Identifier	val		6009331	0					
ANR	6009596	Argument	size		6009331	2					
ANR	6009597	Identifier	size		6009331	0					
ANR	6009598	ReturnStatement	return size ;	287:6:6961:6972	6009331	3	True				
ANR	6009599	Identifier	size		6009331	0					
ANR	6009600	ReturnType	static int		6009331	1					
ANR	6009601	Identifier	example_get_cb		6009331	2					
ANR	6009602	ParameterList	"void * get_cb_data , IjsServerCtx * ctx , IjsJobId job_id , const char * key , char * val_buf , int val_size"		6009331	3					
ANR	6009603	Parameter	void * get_cb_data	235:16:5610:5626	6009331	0	True				
ANR	6009604	ParameterType	void *		6009331	0					
ANR	6009605	Identifier	get_cb_data		6009331	1					
ANR	6009606	Parameter	IjsServerCtx * ctx	236:17:5646:5662	6009331	1	True				
ANR	6009607	ParameterType	IjsServerCtx *		6009331	0					
ANR	6009608	Identifier	ctx		6009331	1					
ANR	6009609	Parameter	IjsJobId job_id	237:17:5682:5696	6009331	2	True				
ANR	6009610	ParameterType	IjsJobId		6009331	0					
ANR	6009611	Identifier	job_id		6009331	1					
ANR	6009612	Parameter	const char * key	238:17:5716:5730	6009331	3	True				
ANR	6009613	ParameterType	const char *		6009331	0					
ANR	6009614	Identifier	key		6009331	1					
ANR	6009615	Parameter	char * val_buf	239:17:5750:5762	6009331	4	True				
ANR	6009616	ParameterType	char *		6009331	0					
ANR	6009617	Identifier	val_buf		6009331	1					
ANR	6009618	Parameter	int val_size	240:17:5782:5793	6009331	5	True				
ANR	6009619	ParameterType	int		6009331	0					
ANR	6009620	Identifier	val_size		6009331	1					
ANR	6009621	CFGEntryNode	ENTRY		6009331		True				
ANR	6009622	CFGExitNode	EXIT		6009331		True				
ANR	6009623	Symbol	code		6009331						
ANR	6009624	Symbol	IJS_EUNKPARAM		6009331						
ANR	6009625	Symbol	curs -> value_size		6009331						
ANR	6009626	Symbol	* printable		6009331						
ANR	6009627	Symbol	curs -> value		6009331						
ANR	6009628	Symbol	strlen		6009331						
ANR	6009629	Symbol	val_buf		6009331						
ANR	6009630	Symbol	example_compute_printable		6009331						
ANR	6009631	Symbol	* off		6009331						
ANR	6009632	Symbol	* get_cb_data		6009331						
ANR	6009633	Symbol	example_find_key		6009331						
ANR	6009634	Symbol	val_size		6009331						
ANR	6009635	Symbol	get_cb_data		6009331						
ANR	6009636	Symbol	curs		6009331						
ANR	6009637	Symbol	key		6009331						
ANR	6009638	Symbol	val		6009331						
ANR	6009639	Symbol	strcmp		6009331						
ANR	6009640	Symbol	NULL		6009331						
ANR	6009641	Symbol	ctx		6009331						
ANR	6009642	Symbol	* ( ExampleParamList * * ) get_cb_data		6009331						
ANR	6009643	Symbol	stderr		6009331						
ANR	6009644	Symbol	printable		6009331						
ANR	6009645	Symbol	off		6009331						
ANR	6009646	Symbol	buf		6009331						
ANR	6009647	Symbol	* curs		6009331						
ANR	6009648	Symbol	size		6009331						
ANR	6009649	Symbol	job_id		6009331						
ANR	6009650	Symbol	IJS_EBUF		6009331						
ANR	6009651	Symbol	pl		6009331						
ANR	6009652	Function	example_set_cb	291:0:6983:7982							
ANR	6009653	FunctionDef	"example_set_cb (void * set_cb_data , IjsServerCtx * ctx , IjsJobId job_id , const char * key , const char * value , int value_size)"		6009652	0					
ANR	6009654	CompoundStatement		294:0:7133:7982	6009652	0					
ANR	6009655	IdentifierDeclStatement	ExampleParamList * * ppl = ( ExampleParamList * * ) set_cb_data ;	295:2:7137:7194	6009652	0	True				
ANR	6009656	IdentifierDecl	* * ppl = ( ExampleParamList * * ) set_cb_data		6009652	0					
ANR	6009657	IdentifierDeclType	ExampleParamList * *		6009652	0					
ANR	6009658	Identifier	ppl		6009652	1					
ANR	6009659	AssignmentExpression	* * ppl = ( ExampleParamList * * ) set_cb_data		6009652	2		=			
ANR	6009660	Identifier	ppl		6009652	0					
ANR	6009661	CastExpression	( ExampleParamList * * ) set_cb_data		6009652	1					
ANR	6009662	CastTarget	ExampleParamList * *		6009652	0					
ANR	6009663	Identifier	set_cb_data		6009652	1					
ANR	6009664	IdentifierDeclStatement	ExampleParamList * pl ;	296:2:7198:7218	6009652	1	True				
ANR	6009665	IdentifierDecl	* pl		6009652	0					
ANR	6009666	IdentifierDeclType	ExampleParamList *		6009652	0					
ANR	6009667	Identifier	pl		6009652	1					
ANR	6009668	IdentifierDeclStatement	int key_len = strlen ( key ) ;	297:2:7222:7248	6009652	2	True				
ANR	6009669	IdentifierDecl	key_len = strlen ( key )		6009652	0					
ANR	6009670	IdentifierDeclType	int		6009652	0					
ANR	6009671	Identifier	key_len		6009652	1					
ANR	6009672	AssignmentExpression	key_len = strlen ( key )		6009652	2		=			
ANR	6009673	Identifier	key_len		6009652	0					
ANR	6009674	CallExpression	strlen ( key )		6009652	1					
ANR	6009675	Callee	strlen		6009652	0					
ANR	6009676	Identifier	strlen		6009652	0					
ANR	6009677	ArgumentList	key		6009652	1					
ANR	6009678	Argument	key		6009652	0					
ANR	6009679	Identifier	key		6009652	0					
ANR	6009680	IdentifierDeclStatement	int code ;	298:2:7252:7260	6009652	3	True				
ANR	6009681	IdentifierDecl	code		6009652	0					
ANR	6009682	IdentifierDeclType	int		6009652	0					
ANR	6009683	Identifier	code		6009652	1					
ANR	6009684	ExpressionStatement	"fprintf ( stderr , ""example_set_cb: %s="" , key )"	300:2:7265:7309	6009652	4	True				
ANR	6009685	CallExpression	"fprintf ( stderr , ""example_set_cb: %s="" , key )"		6009652	0					
ANR	6009686	Callee	fprintf		6009652	0					
ANR	6009687	Identifier	fprintf		6009652	0					
ANR	6009688	ArgumentList	stderr		6009652	1					
ANR	6009689	Argument	stderr		6009652	0					
ANR	6009690	Identifier	stderr		6009652	0					
ANR	6009691	Argument	"""example_set_cb: %s="""		6009652	1					
ANR	6009692	PrimaryExpression	"""example_set_cb: %s="""		6009652	0					
ANR	6009693	Argument	key		6009652	2					
ANR	6009694	Identifier	key		6009652	0					
ANR	6009695	IfStatement	"if ( ! strcmp ( key , ""PaperSize"" ) )"		6009652	5					
ANR	6009696	Condition	"! strcmp ( key , ""PaperSize"" )"	302:6:7318:7343	6009652	0	True				
ANR	6009697	UnaryOperationExpression	"! strcmp ( key , ""PaperSize"" )"		6009652	0					
ANR	6009698	UnaryOperator	!		6009652	0					
ANR	6009699	CallExpression	"strcmp ( key , ""PaperSize"" )"		6009652	1					
ANR	6009700	Callee	strcmp		6009652	0					
ANR	6009701	Identifier	strcmp		6009652	0					
ANR	6009702	ArgumentList	key		6009652	1					
ANR	6009703	Argument	key		6009652	0					
ANR	6009704	Identifier	key		6009652	0					
ANR	6009705	Argument	"""PaperSize"""		6009652	1					
ANR	6009706	PrimaryExpression	"""PaperSize"""		6009652	0					
ANR	6009707	CompoundStatement		11:6:224:244	6009652	1					
ANR	6009708	IdentifierDeclStatement	"double width , height ;"	304:6:7358:7378	6009652	0	True				
ANR	6009709	IdentifierDecl	width		6009652	0					
ANR	6009710	IdentifierDeclType	double		6009652	0					
ANR	6009711	Identifier	width		6009652	1					
ANR	6009712	IdentifierDecl	height		6009652	1					
ANR	6009713	IdentifierDeclType	double		6009652	0					
ANR	6009714	Identifier	height		6009652	1					
ANR	6009715	ExpressionStatement	"code = example_parse_wxh ( value , value_size , & width , & height )"	306:6:7387:7448	6009652	1	True				
ANR	6009716	AssignmentExpression	"code = example_parse_wxh ( value , value_size , & width , & height )"		6009652	0		=			
ANR	6009717	Identifier	code		6009652	0					
ANR	6009718	CallExpression	"example_parse_wxh ( value , value_size , & width , & height )"		6009652	1					
ANR	6009719	Callee	example_parse_wxh		6009652	0					
ANR	6009720	Identifier	example_parse_wxh		6009652	0					
ANR	6009721	ArgumentList	value		6009652	1					
ANR	6009722	Argument	value		6009652	0					
ANR	6009723	Identifier	value		6009652	0					
ANR	6009724	Argument	value_size		6009652	1					
ANR	6009725	Identifier	value_size		6009652	0					
ANR	6009726	Argument	& width		6009652	2					
ANR	6009727	UnaryOperationExpression	& width		6009652	0					
ANR	6009728	UnaryOperator	&		6009652	0					
ANR	6009729	Identifier	width		6009652	1					
ANR	6009730	Argument	& height		6009652	3					
ANR	6009731	UnaryOperationExpression	& height		6009652	0					
ANR	6009732	UnaryOperator	&		6009652	0					
ANR	6009733	Identifier	height		6009652	1					
ANR	6009734	IfStatement	if ( code < 0 )		6009652	2					
ANR	6009735	Condition	code < 0	307:10:7460:7467	6009652	0	True				
ANR	6009736	RelationalExpression	code < 0		6009652	0		<			
ANR	6009737	Identifier	code		6009652	0					
ANR	6009738	PrimaryExpression	0		6009652	1					
ANR	6009739	ReturnStatement	return code ;	308:8:7478:7489	6009652	1	True				
ANR	6009740	Identifier	code		6009652	0					
ANR	6009741	ExpressionStatement	"fwrite ( value , 1 , value_size , stderr )"	311:2:7500:7537	6009652	6	True				
ANR	6009742	CallExpression	"fwrite ( value , 1 , value_size , stderr )"		6009652	0					
ANR	6009743	Callee	fwrite		6009652	0					
ANR	6009744	Identifier	fwrite		6009652	0					
ANR	6009745	ArgumentList	value		6009652	1					
ANR	6009746	Argument	value		6009652	0					
ANR	6009747	Identifier	value		6009652	0					
ANR	6009748	Argument	1		6009652	1					
ANR	6009749	PrimaryExpression	1		6009652	0					
ANR	6009750	Argument	value_size		6009652	2					
ANR	6009751	Identifier	value_size		6009652	0					
ANR	6009752	Argument	stderr		6009652	3					
ANR	6009753	Identifier	stderr		6009652	0					
ANR	6009754	ExpressionStatement	"fputs ( ""\\n"" , stderr )"	312:2:7541:7561	6009652	7	True				
ANR	6009755	CallExpression	"fputs ( ""\\n"" , stderr )"		6009652	0					
ANR	6009756	Callee	fputs		6009652	0					
ANR	6009757	Identifier	fputs		6009652	0					
ANR	6009758	ArgumentList	"""\\n"""		6009652	1					
ANR	6009759	Argument	"""\\n"""		6009652	0					
ANR	6009760	PrimaryExpression	"""\\n"""		6009652	0					
ANR	6009761	Argument	stderr		6009652	1					
ANR	6009762	Identifier	stderr		6009652	0					
ANR	6009763	ExpressionStatement	"pl = example_find_key ( * ppl , key )"	314:2:7566:7599	6009652	8	True				
ANR	6009764	AssignmentExpression	"pl = example_find_key ( * ppl , key )"		6009652	0		=			
ANR	6009765	Identifier	pl		6009652	0					
ANR	6009766	CallExpression	"example_find_key ( * ppl , key )"		6009652	1					
ANR	6009767	Callee	example_find_key		6009652	0					
ANR	6009768	Identifier	example_find_key		6009652	0					
ANR	6009769	ArgumentList	* ppl		6009652	1					
ANR	6009770	Argument	* ppl		6009652	0					
ANR	6009771	UnaryOperationExpression	* ppl		6009652	0					
ANR	6009772	UnaryOperator	*		6009652	0					
ANR	6009773	Identifier	ppl		6009652	1					
ANR	6009774	Argument	key		6009652	1					
ANR	6009775	Identifier	key		6009652	0					
ANR	6009776	IfStatement	if ( pl == NULL )		6009652	9					
ANR	6009777	Condition	pl == NULL	316:6:7608:7617	6009652	0	True				
ANR	6009778	EqualityExpression	pl == NULL		6009652	0		==			
ANR	6009779	Identifier	pl		6009652	0					
ANR	6009780	Identifier	NULL		6009652	1					
ANR	6009781	CompoundStatement		24:4:490:490	6009652	1					
ANR	6009782	ExpressionStatement	pl = ( ExampleParamList * ) malloc ( sizeof ( ExampleParamList ) )	318:6:7632:7691	6009652	0	True				
ANR	6009783	AssignmentExpression	pl = ( ExampleParamList * ) malloc ( sizeof ( ExampleParamList ) )		6009652	0		=			
ANR	6009784	Identifier	pl		6009652	0					
ANR	6009785	CastExpression	( ExampleParamList * ) malloc ( sizeof ( ExampleParamList ) )		6009652	1					
ANR	6009786	CastTarget	ExampleParamList *		6009652	0					
ANR	6009787	CallExpression	malloc ( sizeof ( ExampleParamList ) )		6009652	1					
ANR	6009788	Callee	malloc		6009652	0					
ANR	6009789	Identifier	malloc		6009652	0					
ANR	6009790	ArgumentList	sizeof ( ExampleParamList )		6009652	1					
ANR	6009791	Argument	sizeof ( ExampleParamList )		6009652	0					
ANR	6009792	SizeofExpression	sizeof ( ExampleParamList )		6009652	0					
ANR	6009793	Sizeof	sizeof		6009652	0					
ANR	6009794	SizeofOperand	ExampleParamList		6009652	1					
ANR	6009795	ExpressionStatement	pl -> next = * ppl	319:6:7699:7714	6009652	1	True				
ANR	6009796	AssignmentExpression	pl -> next = * ppl		6009652	0		=			
ANR	6009797	PtrMemberAccess	pl -> next		6009652	0					
ANR	6009798	Identifier	pl		6009652	0					
ANR	6009799	Identifier	next		6009652	1					
ANR	6009800	UnaryOperationExpression	* ppl		6009652	1					
ANR	6009801	UnaryOperator	*		6009652	0					
ANR	6009802	Identifier	ppl		6009652	1					
ANR	6009803	ExpressionStatement	pl -> key = malloc ( key_len + 1 )	320:6:7722:7752	6009652	2	True				
ANR	6009804	AssignmentExpression	pl -> key = malloc ( key_len + 1 )		6009652	0		=			
ANR	6009805	PtrMemberAccess	pl -> key		6009652	0					
ANR	6009806	Identifier	pl		6009652	0					
ANR	6009807	Identifier	key		6009652	1					
ANR	6009808	CallExpression	malloc ( key_len + 1 )		6009652	1					
ANR	6009809	Callee	malloc		6009652	0					
ANR	6009810	Identifier	malloc		6009652	0					
ANR	6009811	ArgumentList	key_len + 1		6009652	1					
ANR	6009812	Argument	key_len + 1		6009652	0					
ANR	6009813	AdditiveExpression	key_len + 1		6009652	0		+			
ANR	6009814	Identifier	key_len		6009652	0					
ANR	6009815	PrimaryExpression	1		6009652	1					
ANR	6009816	ExpressionStatement	"memcpy ( pl -> key , key , key_len + 1 )"	321:6:7760:7794	6009652	3	True				
ANR	6009817	CallExpression	"memcpy ( pl -> key , key , key_len + 1 )"		6009652	0					
ANR	6009818	Callee	memcpy		6009652	0					
ANR	6009819	Identifier	memcpy		6009652	0					
ANR	6009820	ArgumentList	pl -> key		6009652	1					
ANR	6009821	Argument	pl -> key		6009652	0					
ANR	6009822	PtrMemberAccess	pl -> key		6009652	0					
ANR	6009823	Identifier	pl		6009652	0					
ANR	6009824	Identifier	key		6009652	1					
ANR	6009825	Argument	key		6009652	1					
ANR	6009826	Identifier	key		6009652	0					
ANR	6009827	Argument	key_len + 1		6009652	2					
ANR	6009828	AdditiveExpression	key_len + 1		6009652	0		+			
ANR	6009829	Identifier	key_len		6009652	0					
ANR	6009830	PrimaryExpression	1		6009652	1					
ANR	6009831	ExpressionStatement	* ppl = pl	322:6:7802:7811	6009652	4	True				
ANR	6009832	AssignmentExpression	* ppl = pl		6009652	0		=			
ANR	6009833	UnaryOperationExpression	* ppl		6009652	0					
ANR	6009834	UnaryOperator	*		6009652	0					
ANR	6009835	Identifier	ppl		6009652	1					
ANR	6009836	Identifier	pl		6009652	1					
ANR	6009837	ElseStatement	else		6009652	0					
ANR	6009838	CompoundStatement		32:4:696:696	6009652	0					
ANR	6009839	ExpressionStatement	free ( pl -> value )	326:6:7838:7854	6009652	0	True				
ANR	6009840	CallExpression	free ( pl -> value )		6009652	0					
ANR	6009841	Callee	free		6009652	0					
ANR	6009842	Identifier	free		6009652	0					
ANR	6009843	ArgumentList	pl -> value		6009652	1					
ANR	6009844	Argument	pl -> value		6009652	0					
ANR	6009845	PtrMemberAccess	pl -> value		6009652	0					
ANR	6009846	Identifier	pl		6009652	0					
ANR	6009847	Identifier	value		6009652	1					
ANR	6009848	ExpressionStatement	pl -> value = malloc ( value_size )	329:2:7865:7896	6009652	10	True				
ANR	6009849	AssignmentExpression	pl -> value = malloc ( value_size )		6009652	0		=			
ANR	6009850	PtrMemberAccess	pl -> value		6009652	0					
ANR	6009851	Identifier	pl		6009652	0					
ANR	6009852	Identifier	value		6009652	1					
ANR	6009853	CallExpression	malloc ( value_size )		6009652	1					
ANR	6009854	Callee	malloc		6009652	0					
ANR	6009855	Identifier	malloc		6009652	0					
ANR	6009856	ArgumentList	value_size		6009652	1					
ANR	6009857	Argument	value_size		6009652	0					
ANR	6009858	Identifier	value_size		6009652	0					
ANR	6009859	ExpressionStatement	"memcpy ( pl -> value , value , value_size )"	330:2:7900:7937	6009652	11	True				
ANR	6009860	CallExpression	"memcpy ( pl -> value , value , value_size )"		6009652	0					
ANR	6009861	Callee	memcpy		6009652	0					
ANR	6009862	Identifier	memcpy		6009652	0					
ANR	6009863	ArgumentList	pl -> value		6009652	1					
ANR	6009864	Argument	pl -> value		6009652	0					
ANR	6009865	PtrMemberAccess	pl -> value		6009652	0					
ANR	6009866	Identifier	pl		6009652	0					
ANR	6009867	Identifier	value		6009652	1					
ANR	6009868	Argument	value		6009652	1					
ANR	6009869	Identifier	value		6009652	0					
ANR	6009870	Argument	value_size		6009652	2					
ANR	6009871	Identifier	value_size		6009652	0					
ANR	6009872	ExpressionStatement	pl -> value_size = value_size	331:2:7941:7968	6009652	12	True				
ANR	6009873	AssignmentExpression	pl -> value_size = value_size		6009652	0		=			
ANR	6009874	PtrMemberAccess	pl -> value_size		6009652	0					
ANR	6009875	Identifier	pl		6009652	0					
ANR	6009876	Identifier	value_size		6009652	1					
ANR	6009877	Identifier	value_size		6009652	1					
ANR	6009878	ReturnStatement	return 0 ;	332:2:7972:7980	6009652	13	True				
ANR	6009879	PrimaryExpression	0		6009652	0					
ANR	6009880	ReturnType	static int		6009652	1					
ANR	6009881	Identifier	example_set_cb		6009652	2					
ANR	6009882	ParameterList	"void * set_cb_data , IjsServerCtx * ctx , IjsJobId job_id , const char * key , const char * value , int value_size"		6009652	3					
ANR	6009883	Parameter	void * set_cb_data	292:16:7010:7026	6009652	0	True				
ANR	6009884	ParameterType	void *		6009652	0					
ANR	6009885	Identifier	set_cb_data		6009652	1					
ANR	6009886	Parameter	IjsServerCtx * ctx	292:35:7029:7045	6009652	1	True				
ANR	6009887	ParameterType	IjsServerCtx *		6009652	0					
ANR	6009888	Identifier	ctx		6009652	1					
ANR	6009889	Parameter	IjsJobId job_id	292:54:7048:7062	6009652	2	True				
ANR	6009890	ParameterType	IjsJobId		6009652	0					
ANR	6009891	Identifier	job_id		6009652	1					
ANR	6009892	Parameter	const char * key	293:16:7081:7095	6009652	3	True				
ANR	6009893	ParameterType	const char *		6009652	0					
ANR	6009894	Identifier	key		6009652	1					
ANR	6009895	Parameter	const char * value	293:33:7098:7114	6009652	4	True				
ANR	6009896	ParameterType	const char *		6009652	0					
ANR	6009897	Identifier	value		6009652	1					
ANR	6009898	Parameter	int value_size	293:52:7117:7130	6009652	5	True				
ANR	6009899	ParameterType	int		6009652	0					
ANR	6009900	Identifier	value_size		6009652	1					
ANR	6009901	CFGEntryNode	ENTRY		6009652		True				
ANR	6009902	CFGExitNode	EXIT		6009652		True				
ANR	6009903	Symbol	code		6009652						
ANR	6009904	Symbol	value_size		6009652						
ANR	6009905	Symbol	& width		6009652						
ANR	6009906	Symbol	& height		6009652						
ANR	6009907	Symbol	pl -> value		6009652						
ANR	6009908	Symbol	strlen		6009652						
ANR	6009909	Symbol	* ppl		6009652						
ANR	6009910	Symbol	set_cb_data		6009652						
ANR	6009911	Symbol	example_find_key		6009652						
ANR	6009912	Symbol	value		6009652						
ANR	6009913	Symbol	key		6009652						
ANR	6009914	Symbol	key_len		6009652						
ANR	6009915	Symbol	height		6009652						
ANR	6009916	Symbol	strcmp		6009652						
ANR	6009917	Symbol	malloc		6009652						
ANR	6009918	Symbol	* pl		6009652						
ANR	6009919	Symbol	NULL		6009652						
ANR	6009920	Symbol	ctx		6009652						
ANR	6009921	Symbol	stderr		6009652						
ANR	6009922	Symbol	ppl		6009652						
ANR	6009923	Symbol	pl -> key		6009652						
ANR	6009924	Symbol	pl -> value_size		6009652						
ANR	6009925	Symbol	job_id		6009652						
ANR	6009926	Symbol	width		6009652						
ANR	6009927	Symbol	pl		6009652						
ANR	6009928	Symbol	example_parse_wxh		6009652						
ANR	6009929	Symbol	pl -> next		6009652						
ANR	6009930	Function	find_param	339:0:8092:8418							
ANR	6009931	FunctionDef	"find_param (ExampleParamList * pl , const char * key)"		6009930	0					
ANR	6009932	CompoundStatement		341:0:8157:8418	6009930	0					
ANR	6009933	IdentifierDeclStatement	ExampleParamList * curs ;	342:2:8161:8183	6009930	0	True				
ANR	6009934	IdentifierDecl	* curs		6009930	0					
ANR	6009935	IdentifierDeclType	ExampleParamList *		6009930	0					
ANR	6009936	Identifier	curs		6009930	1					
ANR	6009937	IdentifierDeclStatement	char * result ;	343:2:8187:8199	6009930	1	True				
ANR	6009938	IdentifierDecl	* result		6009930	0					
ANR	6009939	IdentifierDeclType	char *		6009930	0					
ANR	6009940	Identifier	result		6009930	1					
ANR	6009941	ExpressionStatement	"curs = example_find_key ( pl , key )"	345:2:8204:8237	6009930	2	True				
ANR	6009942	AssignmentExpression	"curs = example_find_key ( pl , key )"		6009930	0		=			
ANR	6009943	Identifier	curs		6009930	0					
ANR	6009944	CallExpression	"example_find_key ( pl , key )"		6009930	1					
ANR	6009945	Callee	example_find_key		6009930	0					
ANR	6009946	Identifier	example_find_key		6009930	0					
ANR	6009947	ArgumentList	pl		6009930	1					
ANR	6009948	Argument	pl		6009930	0					
ANR	6009949	Identifier	pl		6009930	0					
ANR	6009950	Argument	key		6009930	1					
ANR	6009951	Identifier	key		6009930	0					
ANR	6009952	IfStatement	if ( curs == NULL )		6009930	3					
ANR	6009953	Condition	curs == NULL	346:6:8245:8256	6009930	0	True				
ANR	6009954	EqualityExpression	curs == NULL		6009930	0		==			
ANR	6009955	Identifier	curs		6009930	0					
ANR	6009956	Identifier	NULL		6009930	1					
ANR	6009957	ReturnStatement	return NULL ;	347:4:8263:8274	6009930	1	True				
ANR	6009958	Identifier	NULL		6009930	0					
ANR	6009959	ExpressionStatement	result = malloc ( curs -> value_size + 1 )	349:2:8279:8317	6009930	4	True				
ANR	6009960	AssignmentExpression	result = malloc ( curs -> value_size + 1 )		6009930	0		=			
ANR	6009961	Identifier	result		6009930	0					
ANR	6009962	CallExpression	malloc ( curs -> value_size + 1 )		6009930	1					
ANR	6009963	Callee	malloc		6009930	0					
ANR	6009964	Identifier	malloc		6009930	0					
ANR	6009965	ArgumentList	curs -> value_size + 1		6009930	1					
ANR	6009966	Argument	curs -> value_size + 1		6009930	0					
ANR	6009967	AdditiveExpression	curs -> value_size + 1		6009930	0		+			
ANR	6009968	PtrMemberAccess	curs -> value_size		6009930	0					
ANR	6009969	Identifier	curs		6009930	0					
ANR	6009970	Identifier	value_size		6009930	1					
ANR	6009971	PrimaryExpression	1		6009930	1					
ANR	6009972	ExpressionStatement	"memcpy ( result , curs -> value , curs -> value_size )"	350:2:8321:8367	6009930	5	True				
ANR	6009973	CallExpression	"memcpy ( result , curs -> value , curs -> value_size )"		6009930	0					
ANR	6009974	Callee	memcpy		6009930	0					
ANR	6009975	Identifier	memcpy		6009930	0					
ANR	6009976	ArgumentList	result		6009930	1					
ANR	6009977	Argument	result		6009930	0					
ANR	6009978	Identifier	result		6009930	0					
ANR	6009979	Argument	curs -> value		6009930	1					
ANR	6009980	PtrMemberAccess	curs -> value		6009930	0					
ANR	6009981	Identifier	curs		6009930	0					
ANR	6009982	Identifier	value		6009930	1					
ANR	6009983	Argument	curs -> value_size		6009930	2					
ANR	6009984	PtrMemberAccess	curs -> value_size		6009930	0					
ANR	6009985	Identifier	curs		6009930	0					
ANR	6009986	Identifier	value_size		6009930	1					
ANR	6009987	ExpressionStatement	result [ curs -> value_size ] = 0	351:2:8371:8399	6009930	6	True				
ANR	6009988	AssignmentExpression	result [ curs -> value_size ] = 0		6009930	0		=			
ANR	6009989	ArrayIndexing	result [ curs -> value_size ]		6009930	0					
ANR	6009990	Identifier	result		6009930	0					
ANR	6009991	PtrMemberAccess	curs -> value_size		6009930	1					
ANR	6009992	Identifier	curs		6009930	0					
ANR	6009993	Identifier	value_size		6009930	1					
ANR	6009994	PrimaryExpression	0		6009930	1					
ANR	6009995	ReturnStatement	return result ;	352:2:8403:8416	6009930	7	True				
ANR	6009996	Identifier	result		6009930	0					
ANR	6009997	ReturnType	static char *		6009930	1					
ANR	6009998	Identifier	find_param		6009930	2					
ANR	6009999	ParameterList	"ExampleParamList * pl , const char * key"		6009930	3					
ANR	6010000	Parameter	ExampleParamList * pl	340:12:8118:8137	6009930	0	True				
ANR	6010001	ParameterType	ExampleParamList *		6009930	0					
ANR	6010002	Identifier	pl		6009930	1					
ANR	6010003	Parameter	const char * key	340:34:8140:8154	6009930	1	True				
ANR	6010004	ParameterType	const char *		6009930	0					
ANR	6010005	Identifier	key		6009930	1					
ANR	6010006	CFGEntryNode	ENTRY		6009930		True				
ANR	6010007	CFGExitNode	EXIT		6009930		True				
ANR	6010008	Symbol	malloc		6009930						
ANR	6010009	Symbol	NULL		6009930						
ANR	6010010	Symbol	* * curs		6009930						
ANR	6010011	Symbol	curs -> value_size		6009930						
ANR	6010012	Symbol	result		6009930						
ANR	6010013	Symbol	curs -> value		6009930						
ANR	6010014	Symbol	* curs		6009930						
ANR	6010015	Symbol	* curs -> value_size		6009930						
ANR	6010016	Symbol	* result		6009930						
ANR	6010017	Symbol	example_find_key		6009930						
ANR	6010018	Symbol	pl		6009930						
ANR	6010019	Symbol	curs		6009930						
ANR	6010020	Symbol	key		6009930						
ANR	6010021	Function	free_param_list	355:0:8421:8631							
ANR	6010022	FunctionDef	free_param_list (ExampleParamList * pl)		6010021	0					
ANR	6010023	CompoundStatement		357:0:8472:8631	6010021	0					
ANR	6010024	IdentifierDeclStatement	ExampleParamList * next ;	358:2:8476:8498	6010021	0	True				
ANR	6010025	IdentifierDecl	* next		6010021	0					
ANR	6010026	IdentifierDeclType	ExampleParamList *		6010021	0					
ANR	6010027	Identifier	next		6010021	1					
ANR	6010028	ForStatement	for ( ; pl != NULL ; pl = next )		6010021	1					
ANR	6010029	Condition	pl != NULL	360:9:8510:8519	6010021	0	True				
ANR	6010030	EqualityExpression	pl != NULL		6010021	0		!=			
ANR	6010031	Identifier	pl		6010021	0					
ANR	6010032	Identifier	NULL		6010021	1					
ANR	6010033	AssignmentExpression	pl = next	360:21:8522:8530	6010021	1	True	=			
ANR	6010034	Identifier	pl		6010021	0					
ANR	6010035	Identifier	next		6010021	1					
ANR	6010036	CompoundStatement		5:4:64:64	6010021	2					
ANR	6010037	ExpressionStatement	next = pl -> next	362:6:8545:8560	6010021	0	True				
ANR	6010038	AssignmentExpression	next = pl -> next		6010021	0		=			
ANR	6010039	Identifier	next		6010021	0					
ANR	6010040	PtrMemberAccess	pl -> next		6010021	1					
ANR	6010041	Identifier	pl		6010021	0					
ANR	6010042	Identifier	next		6010021	1					
ANR	6010043	ExpressionStatement	free ( pl -> key )	363:6:8568:8582	6010021	1	True				
ANR	6010044	CallExpression	free ( pl -> key )		6010021	0					
ANR	6010045	Callee	free		6010021	0					
ANR	6010046	Identifier	free		6010021	0					
ANR	6010047	ArgumentList	pl -> key		6010021	1					
ANR	6010048	Argument	pl -> key		6010021	0					
ANR	6010049	PtrMemberAccess	pl -> key		6010021	0					
ANR	6010050	Identifier	pl		6010021	0					
ANR	6010051	Identifier	key		6010021	1					
ANR	6010052	ExpressionStatement	free ( pl -> value )	364:6:8590:8606	6010021	2	True				
ANR	6010053	CallExpression	free ( pl -> value )		6010021	0					
ANR	6010054	Callee	free		6010021	0					
ANR	6010055	Identifier	free		6010021	0					
ANR	6010056	ArgumentList	pl -> value		6010021	1					
ANR	6010057	Argument	pl -> value		6010021	0					
ANR	6010058	PtrMemberAccess	pl -> value		6010021	0					
ANR	6010059	Identifier	pl		6010021	0					
ANR	6010060	Identifier	value		6010021	1					
ANR	6010061	ExpressionStatement	free ( pl )	365:6:8614:8623	6010021	3	True				
ANR	6010062	CallExpression	free ( pl )		6010021	0					
ANR	6010063	Callee	free		6010021	0					
ANR	6010064	Identifier	free		6010021	0					
ANR	6010065	ArgumentList	pl		6010021	1					
ANR	6010066	Argument	pl		6010021	0					
ANR	6010067	Identifier	pl		6010021	0					
ANR	6010068	ReturnType	static void		6010021	1					
ANR	6010069	Identifier	free_param_list		6010021	2					
ANR	6010070	ParameterList	ExampleParamList * pl		6010021	3					
ANR	6010071	Parameter	ExampleParamList * pl	356:17:8450:8469	6010021	0	True				
ANR	6010072	ParameterType	ExampleParamList *		6010021	0					
ANR	6010073	Identifier	pl		6010021	1					
ANR	6010074	CFGEntryNode	ENTRY		6010021		True				
ANR	6010075	CFGExitNode	EXIT		6010021		True				
ANR	6010076	Symbol	next		6010021						
ANR	6010077	Symbol	pl -> value		6010021						
ANR	6010078	Symbol	* pl		6010021						
ANR	6010079	Symbol	NULL		6010021						
ANR	6010080	Symbol	pl		6010021						
ANR	6010081	Symbol	pl -> key		6010021						
ANR	6010082	Symbol	pl -> next		6010021						
ANR	6010083	Function	main	369:0:8634:12793							
ANR	6010084	FunctionDef	"main (int argc , char * * argv)"		6010083	0					
ANR	6010085	CompoundStatement		371:0:8667:12793	6010083	0					
ANR	6010086	IdentifierDeclStatement	IjsServerCtx * ctx ;	372:2:8671:8688	6010083	0	True				
ANR	6010087	IdentifierDecl	* ctx		6010083	0					
ANR	6010088	IdentifierDeclType	IjsServerCtx *		6010083	0					
ANR	6010089	Identifier	ctx		6010083	1					
ANR	6010090	IdentifierDeclStatement	IjsPageHeader ph ;	373:2:8692:8708	6010083	1	True				
ANR	6010091	IdentifierDecl	ph		6010083	0					
ANR	6010092	IdentifierDeclType	IjsPageHeader		6010083	0					
ANR	6010093	Identifier	ph		6010083	1					
ANR	6010094	IdentifierDeclStatement	int status ;	374:2:8712:8722	6010083	2	True				
ANR	6010095	IdentifierDecl	status		6010083	0					
ANR	6010096	IdentifierDeclType	int		6010083	0					
ANR	6010097	Identifier	status		6010083	1					
ANR	6010098	IdentifierDeclStatement	char buf [ BUF_SIZE ] ;	375:2:8726:8744	6010083	3	True				
ANR	6010099	IdentifierDecl	buf [ BUF_SIZE ]		6010083	0					
ANR	6010100	IdentifierDeclType	char [ BUF_SIZE ]		6010083	0					
ANR	6010101	Identifier	buf		6010083	1					
ANR	6010102	Identifier	BUF_SIZE		6010083	2					
ANR	6010103	IdentifierDeclStatement	char hexbuf [ BUF_SIZE * 3 ] ;	376:2:8748:8773	6010083	4	True				
ANR	6010104	IdentifierDecl	hexbuf [ BUF_SIZE * 3 ]		6010083	0					
ANR	6010105	IdentifierDeclType	char [ BUF_SIZE * 3 ]		6010083	0					
ANR	6010106	Identifier	hexbuf		6010083	1					
ANR	6010107	MultiplicativeExpression	BUF_SIZE * 3		6010083	2		*			
ANR	6010108	Identifier	BUF_SIZE		6010083	0					
ANR	6010109	PrimaryExpression	3		6010083	1					
ANR	6010110	IdentifierDeclStatement	char * fn ;	377:2:8777:8785	6010083	5	True				
ANR	6010111	IdentifierDecl	* fn		6010083	0					
ANR	6010112	IdentifierDeclType	char *		6010083	0					
ANR	6010113	Identifier	fn		6010083	1					
ANR	6010114	IdentifierDeclStatement	FILE * f = NULL ;	378:2:8789:8803	6010083	6	True				
ANR	6010115	IdentifierDecl	* f = NULL		6010083	0					
ANR	6010116	IdentifierDeclType	FILE *		6010083	0					
ANR	6010117	Identifier	f		6010083	1					
ANR	6010118	AssignmentExpression	* f = NULL		6010083	2		=			
ANR	6010119	Identifier	NULL		6010083	0					
ANR	6010120	Identifier	NULL		6010083	1					
ANR	6010121	IdentifierDeclStatement	"double xscale , yscale ;"	379:2:8807:8828	6010083	7	True				
ANR	6010122	IdentifierDecl	xscale		6010083	0					
ANR	6010123	IdentifierDeclType	double		6010083	0					
ANR	6010124	Identifier	xscale		6010083	1					
ANR	6010125	IdentifierDecl	yscale		6010083	1					
ANR	6010126	IdentifierDeclType	double		6010083	0					
ANR	6010127	Identifier	yscale		6010083	1					
ANR	6010128	IdentifierDeclStatement	"double x0 , y0 ;"	380:2:8832:8845	6010083	8	True				
ANR	6010129	IdentifierDecl	x0		6010083	0					
ANR	6010130	IdentifierDeclType	double		6010083	0					
ANR	6010131	Identifier	x0		6010083	1					
ANR	6010132	IdentifierDecl	y0		6010083	1					
ANR	6010133	IdentifierDeclType	double		6010083	0					
ANR	6010134	Identifier	y0		6010083	1					
ANR	6010135	IdentifierDeclStatement	ExampleParamList * pl = NULL ;	381:2:8849:8876	6010083	9	True				
ANR	6010136	IdentifierDecl	* pl = NULL		6010083	0					
ANR	6010137	IdentifierDeclType	ExampleParamList *		6010083	0					
ANR	6010138	Identifier	pl		6010083	1					
ANR	6010139	AssignmentExpression	* pl = NULL		6010083	2		=			
ANR	6010140	Identifier	NULL		6010083	0					
ANR	6010141	Identifier	NULL		6010083	1					
ANR	6010142	ExpressionStatement	ctx = ijs_server_init ( )	383:2:8881:8905	6010083	10	True				
ANR	6010143	AssignmentExpression	ctx = ijs_server_init ( )		6010083	0		=			
ANR	6010144	Identifier	ctx		6010083	0					
ANR	6010145	CallExpression	ijs_server_init ( )		6010083	1					
ANR	6010146	Callee	ijs_server_init		6010083	0					
ANR	6010147	Identifier	ijs_server_init		6010083	0					
ANR	6010148	ArgumentList			6010083	1					
ANR	6010149	IfStatement	if ( ctx == NULL )		6010083	11					
ANR	6010150	Condition	ctx == NULL	384:6:8913:8923	6010083	0	True				
ANR	6010151	EqualityExpression	ctx == NULL		6010083	0		==			
ANR	6010152	Identifier	ctx		6010083	0					
ANR	6010153	Identifier	NULL		6010083	1					
ANR	6010154	ReturnStatement	return ( 1 ) ;	385:4:8930:8940	6010083	1	True				
ANR	6010155	PrimaryExpression	1		6010083	0					
ANR	6010156	ExpressionStatement	"ijs_server_install_status_cb ( ctx , example_status_cb , & pl )"	386:2:8944:9002	6010083	12	True				
ANR	6010157	CallExpression	"ijs_server_install_status_cb ( ctx , example_status_cb , & pl )"		6010083	0					
ANR	6010158	Callee	ijs_server_install_status_cb		6010083	0					
ANR	6010159	Identifier	ijs_server_install_status_cb		6010083	0					
ANR	6010160	ArgumentList	ctx		6010083	1					
ANR	6010161	Argument	ctx		6010083	0					
ANR	6010162	Identifier	ctx		6010083	0					
ANR	6010163	Argument	example_status_cb		6010083	1					
ANR	6010164	Identifier	example_status_cb		6010083	0					
ANR	6010165	Argument	& pl		6010083	2					
ANR	6010166	UnaryOperationExpression	& pl		6010083	0					
ANR	6010167	UnaryOperator	&		6010083	0					
ANR	6010168	Identifier	pl		6010083	1					
ANR	6010169	ExpressionStatement	"ijs_server_install_list_cb ( ctx , example_list_cb , & pl )"	387:2:9006:9060	6010083	13	True				
ANR	6010170	CallExpression	"ijs_server_install_list_cb ( ctx , example_list_cb , & pl )"		6010083	0					
ANR	6010171	Callee	ijs_server_install_list_cb		6010083	0					
ANR	6010172	Identifier	ijs_server_install_list_cb		6010083	0					
ANR	6010173	ArgumentList	ctx		6010083	1					
ANR	6010174	Argument	ctx		6010083	0					
ANR	6010175	Identifier	ctx		6010083	0					
ANR	6010176	Argument	example_list_cb		6010083	1					
ANR	6010177	Identifier	example_list_cb		6010083	0					
ANR	6010178	Argument	& pl		6010083	2					
ANR	6010179	UnaryOperationExpression	& pl		6010083	0					
ANR	6010180	UnaryOperator	&		6010083	0					
ANR	6010181	Identifier	pl		6010083	1					
ANR	6010182	ExpressionStatement	"ijs_server_install_enum_cb ( ctx , example_enum_cb , & pl )"	388:2:9064:9118	6010083	14	True				
ANR	6010183	CallExpression	"ijs_server_install_enum_cb ( ctx , example_enum_cb , & pl )"		6010083	0					
ANR	6010184	Callee	ijs_server_install_enum_cb		6010083	0					
ANR	6010185	Identifier	ijs_server_install_enum_cb		6010083	0					
ANR	6010186	ArgumentList	ctx		6010083	1					
ANR	6010187	Argument	ctx		6010083	0					
ANR	6010188	Identifier	ctx		6010083	0					
ANR	6010189	Argument	example_enum_cb		6010083	1					
ANR	6010190	Identifier	example_enum_cb		6010083	0					
ANR	6010191	Argument	& pl		6010083	2					
ANR	6010192	UnaryOperationExpression	& pl		6010083	0					
ANR	6010193	UnaryOperator	&		6010083	0					
ANR	6010194	Identifier	pl		6010083	1					
ANR	6010195	ExpressionStatement	"ijs_server_install_set_cb ( ctx , example_set_cb , & pl )"	389:2:9122:9174	6010083	15	True				
ANR	6010196	CallExpression	"ijs_server_install_set_cb ( ctx , example_set_cb , & pl )"		6010083	0					
ANR	6010197	Callee	ijs_server_install_set_cb		6010083	0					
ANR	6010198	Identifier	ijs_server_install_set_cb		6010083	0					
ANR	6010199	ArgumentList	ctx		6010083	1					
ANR	6010200	Argument	ctx		6010083	0					
ANR	6010201	Identifier	ctx		6010083	0					
ANR	6010202	Argument	example_set_cb		6010083	1					
ANR	6010203	Identifier	example_set_cb		6010083	0					
ANR	6010204	Argument	& pl		6010083	2					
ANR	6010205	UnaryOperationExpression	& pl		6010083	0					
ANR	6010206	UnaryOperator	&		6010083	0					
ANR	6010207	Identifier	pl		6010083	1					
ANR	6010208	ExpressionStatement	"ijs_server_install_get_cb ( ctx , example_get_cb , & pl )"	390:2:9178:9230	6010083	16	True				
ANR	6010209	CallExpression	"ijs_server_install_get_cb ( ctx , example_get_cb , & pl )"		6010083	0					
ANR	6010210	Callee	ijs_server_install_get_cb		6010083	0					
ANR	6010211	Identifier	ijs_server_install_get_cb		6010083	0					
ANR	6010212	ArgumentList	ctx		6010083	1					
ANR	6010213	Argument	ctx		6010083	0					
ANR	6010214	Identifier	ctx		6010083	0					
ANR	6010215	Argument	example_get_cb		6010083	1					
ANR	6010216	Identifier	example_get_cb		6010083	0					
ANR	6010217	Argument	& pl		6010083	2					
ANR	6010218	UnaryOperationExpression	& pl		6010083	0					
ANR	6010219	UnaryOperator	&		6010083	0					
ANR	6010220	Identifier	pl		6010083	1					
ANR	6010221	DoStatement	do		6010083	17					
ANR	6010222	CompoundStatement		25:6:617:639	6010083	0					
ANR	6010223	IdentifierDeclStatement	"int total_bytes , bytes_left ;"	394:6:9250:9277	6010083	0	True				
ANR	6010224	IdentifierDecl	total_bytes		6010083	0					
ANR	6010225	IdentifierDeclType	int		6010083	0					
ANR	6010226	Identifier	total_bytes		6010083	1					
ANR	6010227	IdentifierDecl	bytes_left		6010083	1					
ANR	6010228	IdentifierDeclType	int		6010083	0					
ANR	6010229	Identifier	bytes_left		6010083	1					
ANR	6010230	IdentifierDeclStatement	ExampleParamList * curs ;	395:6:9285:9307	6010083	1	True				
ANR	6010231	IdentifierDecl	* curs		6010083	0					
ANR	6010232	IdentifierDeclType	ExampleParamList *		6010083	0					
ANR	6010233	Identifier	curs		6010083	1					
ANR	6010234	ExpressionStatement	"status = ijs_server_get_page_header ( ctx , & ph )"	397:6:9316:9362	6010083	2	True				
ANR	6010235	AssignmentExpression	"status = ijs_server_get_page_header ( ctx , & ph )"		6010083	0		=			
ANR	6010236	Identifier	status		6010083	0					
ANR	6010237	CallExpression	"ijs_server_get_page_header ( ctx , & ph )"		6010083	1					
ANR	6010238	Callee	ijs_server_get_page_header		6010083	0					
ANR	6010239	Identifier	ijs_server_get_page_header		6010083	0					
ANR	6010240	ArgumentList	ctx		6010083	1					
ANR	6010241	Argument	ctx		6010083	0					
ANR	6010242	Identifier	ctx		6010083	0					
ANR	6010243	Argument	& ph		6010083	1					
ANR	6010244	UnaryOperationExpression	& ph		6010083	0					
ANR	6010245	UnaryOperator	&		6010083	0					
ANR	6010246	Identifier	ph		6010083	1					
ANR	6010247	IfStatement	if ( status )		6010083	3					
ANR	6010248	Condition	status	398:10:9374:9379	6010083	0	True				
ANR	6010249	Identifier	status		6010083	0					
ANR	6010250	BreakStatement	break ;	398:18:9382:9387	6010083	1	True				
ANR	6010251	ExpressionStatement	"fprintf ( stderr , ""got page header, %d x %d\\n"" , ph . width , ph . height )"	399:6:9395:9476	6010083	4	True				
ANR	6010252	CallExpression	"fprintf ( stderr , ""got page header, %d x %d\\n"" , ph . width , ph . height )"		6010083	0					
ANR	6010253	Callee	fprintf		6010083	0					
ANR	6010254	Identifier	fprintf		6010083	0					
ANR	6010255	ArgumentList	stderr		6010083	1					
ANR	6010256	Argument	stderr		6010083	0					
ANR	6010257	Identifier	stderr		6010083	0					
ANR	6010258	Argument	"""got page header, %d x %d\\n"""		6010083	1					
ANR	6010259	PrimaryExpression	"""got page header, %d x %d\\n"""		6010083	0					
ANR	6010260	Argument	ph . width		6010083	2					
ANR	6010261	MemberAccess	ph . width		6010083	0					
ANR	6010262	Identifier	ph		6010083	0					
ANR	6010263	Identifier	width		6010083	1					
ANR	6010264	Argument	ph . height		6010083	3					
ANR	6010265	MemberAccess	ph . height		6010083	0					
ANR	6010266	Identifier	ph		6010083	0					
ANR	6010267	Identifier	height		6010083	1					
ANR	6010268	IfStatement	if ( f == NULL )		6010083	5					
ANR	6010269	Condition	f == NULL	402:10:9489:9497	6010083	0	True				
ANR	6010270	EqualityExpression	f == NULL		6010083	0		==			
ANR	6010271	Identifier	f		6010083	0					
ANR	6010272	Identifier	NULL		6010083	1					
ANR	6010273	CompoundStatement		33:8:840:840	6010083	1					
ANR	6010274	ExpressionStatement	"fn = find_param ( pl , ""OutputFile"" )"	404:10:9520:9554	6010083	0	True				
ANR	6010275	AssignmentExpression	"fn = find_param ( pl , ""OutputFile"" )"		6010083	0		=			
ANR	6010276	Identifier	fn		6010083	0					
ANR	6010277	CallExpression	"find_param ( pl , ""OutputFile"" )"		6010083	1					
ANR	6010278	Callee	find_param		6010083	0					
ANR	6010279	Identifier	find_param		6010083	0					
ANR	6010280	ArgumentList	pl		6010083	1					
ANR	6010281	Argument	pl		6010083	0					
ANR	6010282	Identifier	pl		6010083	0					
ANR	6010283	Argument	"""OutputFile"""		6010083	1					
ANR	6010284	PrimaryExpression	"""OutputFile"""		6010083	0					
ANR	6010285	IfStatement	if ( fn == NULL )		6010083	1					
ANR	6010286	Condition	fn == NULL	407:14:9606:9615	6010083	0	True				
ANR	6010287	EqualityExpression	fn == NULL		6010083	0		==			
ANR	6010288	Identifier	fn		6010083	0					
ANR	6010289	Identifier	NULL		6010083	1					
ANR	6010290	CompoundStatement		38:12:962:962	6010083	1					
ANR	6010291	ExpressionStatement	"fn = find_param ( pl , ""OutputFD"" )"	409:14:9646:9678	6010083	0	True				
ANR	6010292	AssignmentExpression	"fn = find_param ( pl , ""OutputFD"" )"		6010083	0		=			
ANR	6010293	Identifier	fn		6010083	0					
ANR	6010294	CallExpression	"find_param ( pl , ""OutputFD"" )"		6010083	1					
ANR	6010295	Callee	find_param		6010083	0					
ANR	6010296	Identifier	find_param		6010083	0					
ANR	6010297	ArgumentList	pl		6010083	1					
ANR	6010298	Argument	pl		6010083	0					
ANR	6010299	Identifier	pl		6010083	0					
ANR	6010300	Argument	"""OutputFD"""		6010083	1					
ANR	6010301	PrimaryExpression	"""OutputFD"""		6010083	0					
ANR	6010302	IfStatement	if ( fn != NULL )		6010083	1					
ANR	6010303	Condition	fn != NULL	410:18:9698:9707	6010083	0	True				
ANR	6010304	EqualityExpression	fn != NULL		6010083	0		!=			
ANR	6010305	Identifier	fn		6010083	0					
ANR	6010306	Identifier	NULL		6010083	1					
ANR	6010307	CompoundStatement		41:16:1058:1058	6010083	1					
ANR	6010308	ExpressionStatement	"f = fdopen ( atoi ( fn ) , ""wb"" )"	412:18:9746:9774	6010083	0	True				
ANR	6010309	AssignmentExpression	"f = fdopen ( atoi ( fn ) , ""wb"" )"		6010083	0		=			
ANR	6010310	Identifier	f		6010083	0					
ANR	6010311	CallExpression	"fdopen ( atoi ( fn ) , ""wb"" )"		6010083	1					
ANR	6010312	Callee	fdopen		6010083	0					
ANR	6010313	Identifier	fdopen		6010083	0					
ANR	6010314	ArgumentList	atoi ( fn )		6010083	1					
ANR	6010315	Argument	atoi ( fn )		6010083	0					
ANR	6010316	CallExpression	atoi ( fn )		6010083	0					
ANR	6010317	Callee	atoi		6010083	0					
ANR	6010318	Identifier	atoi		6010083	0					
ANR	6010319	ArgumentList	fn		6010083	1					
ANR	6010320	Argument	fn		6010083	0					
ANR	6010321	Identifier	fn		6010083	0					
ANR	6010322	Argument	"""wb"""		6010083	1					
ANR	6010323	PrimaryExpression	"""wb"""		6010083	0					
ANR	6010324	ElseStatement	else		6010083	0					
ANR	6010325	CompoundStatement		46:12:1167:1167	6010083	0					
ANR	6010326	ExpressionStatement	"f = fopen ( fn , ""wb"" )"	417:14:9851:9871	6010083	0	True				
ANR	6010327	AssignmentExpression	"f = fopen ( fn , ""wb"" )"		6010083	0		=			
ANR	6010328	Identifier	f		6010083	0					
ANR	6010329	CallExpression	"fopen ( fn , ""wb"" )"		6010083	1					
ANR	6010330	Callee	fopen		6010083	0					
ANR	6010331	Identifier	fopen		6010083	0					
ANR	6010332	ArgumentList	fn		6010083	1					
ANR	6010333	Argument	fn		6010083	0					
ANR	6010334	Identifier	fn		6010083	0					
ANR	6010335	Argument	"""wb"""		6010083	1					
ANR	6010336	PrimaryExpression	"""wb"""		6010083	0					
ANR	6010337	IfStatement	if ( f == NULL )		6010083	2					
ANR	6010338	Condition	f == NULL	419:14:9901:9909	6010083	0	True				
ANR	6010339	EqualityExpression	f == NULL		6010083	0		==			
ANR	6010340	Identifier	f		6010083	0					
ANR	6010341	Identifier	NULL		6010083	1					
ANR	6010342	CompoundStatement		50:12:1256:1256	6010083	1					
ANR	6010343	ExpressionStatement	"fprintf ( stderr , ""can't open output file %s\\n"" , fn )"	421:14:9940:9991	6010083	0	True				
ANR	6010344	CallExpression	"fprintf ( stderr , ""can't open output file %s\\n"" , fn )"		6010083	0					
ANR	6010345	Callee	fprintf		6010083	0					
ANR	6010346	Identifier	fprintf		6010083	0					
ANR	6010347	ArgumentList	stderr		6010083	1					
ANR	6010348	Argument	stderr		6010083	0					
ANR	6010349	Identifier	stderr		6010083	0					
ANR	6010350	Argument	"""can't open output file %s\\n"""		6010083	1					
ANR	6010351	PrimaryExpression	"""can't open output file %s\\n"""		6010083	0					
ANR	6010352	Argument	fn		6010083	2					
ANR	6010353	Identifier	fn		6010083	0					
ANR	6010354	ExpressionStatement	fclose ( stdin )	422:14:10007:10021	6010083	1	True				
ANR	6010355	CallExpression	fclose ( stdin )		6010083	0					
ANR	6010356	Callee	fclose		6010083	0					
ANR	6010357	Identifier	fclose		6010083	0					
ANR	6010358	ArgumentList	stdin		6010083	1					
ANR	6010359	Argument	stdin		6010083	0					
ANR	6010360	Identifier	stdin		6010083	0					
ANR	6010361	ExpressionStatement	fclose ( stdout )	423:14:10037:10052	6010083	2	True				
ANR	6010362	CallExpression	fclose ( stdout )		6010083	0					
ANR	6010363	Callee	fclose		6010083	0					
ANR	6010364	Identifier	fclose		6010083	0					
ANR	6010365	ArgumentList	stdout		6010083	1					
ANR	6010366	Argument	stdout		6010083	0					
ANR	6010367	Identifier	stdout		6010083	0					
ANR	6010368	BreakStatement	break ;	424:14:10068:10073	6010083	3	True				
ANR	6010369	IfStatement	if ( fn != NULL )		6010083	3					
ANR	6010370	Condition	fn != NULL	426:14:10103:10112	6010083	0	True				
ANR	6010371	EqualityExpression	fn != NULL		6010083	0		!=			
ANR	6010372	Identifier	fn		6010083	0					
ANR	6010373	Identifier	NULL		6010083	1					
ANR	6010374	ExpressionStatement	free ( fn )	427:12:10127:10136	6010083	1	True				
ANR	6010375	CallExpression	free ( fn )		6010083	0					
ANR	6010376	Callee	free		6010083	0					
ANR	6010377	Identifier	free		6010083	0					
ANR	6010378	ArgumentList	fn		6010083	1					
ANR	6010379	Argument	fn		6010083	0					
ANR	6010380	Identifier	fn		6010083	0					
ANR	6010381	ExpressionStatement	"fprintf ( f , ""%%!PS-Adobe-2.0\\n"" )"	430:6:10155:10187	6010083	6	True				
ANR	6010382	CallExpression	"fprintf ( f , ""%%!PS-Adobe-2.0\\n"" )"		6010083	0					
ANR	6010383	Callee	fprintf		6010083	0					
ANR	6010384	Identifier	fprintf		6010083	0					
ANR	6010385	ArgumentList	f		6010083	1					
ANR	6010386	Argument	f		6010083	0					
ANR	6010387	Identifier	f		6010083	0					
ANR	6010388	Argument	"""%%!PS-Adobe-2.0\\n"""		6010083	1					
ANR	6010389	PrimaryExpression	"""%%!PS-Adobe-2.0\\n"""		6010083	0					
ANR	6010390	ExpressionStatement	"example_compute_offset ( pl , & ph , & x0 , & y0 )"	432:6:10196:10238	6010083	7	True				
ANR	6010391	CallExpression	"example_compute_offset ( pl , & ph , & x0 , & y0 )"		6010083	0					
ANR	6010392	Callee	example_compute_offset		6010083	0					
ANR	6010393	Identifier	example_compute_offset		6010083	0					
ANR	6010394	ArgumentList	pl		6010083	1					
ANR	6010395	Argument	pl		6010083	0					
ANR	6010396	Identifier	pl		6010083	0					
ANR	6010397	Argument	& ph		6010083	1					
ANR	6010398	UnaryOperationExpression	& ph		6010083	0					
ANR	6010399	UnaryOperator	&		6010083	0					
ANR	6010400	Identifier	ph		6010083	1					
ANR	6010401	Argument	& x0		6010083	2					
ANR	6010402	UnaryOperationExpression	& x0		6010083	0					
ANR	6010403	UnaryOperator	&		6010083	0					
ANR	6010404	Identifier	x0		6010083	1					
ANR	6010405	Argument	& y0		6010083	3					
ANR	6010406	UnaryOperationExpression	& y0		6010083	0					
ANR	6010407	UnaryOperator	&		6010083	0					
ANR	6010408	Identifier	y0		6010083	1					
ANR	6010409	ExpressionStatement	xscale = 72.0 / ph . xres	434:6:10247:10270	6010083	8	True				
ANR	6010410	AssignmentExpression	xscale = 72.0 / ph . xres		6010083	0		=			
ANR	6010411	Identifier	xscale		6010083	0					
ANR	6010412	MultiplicativeExpression	72.0 / ph . xres		6010083	1		/			
ANR	6010413	PrimaryExpression	72.0		6010083	0					
ANR	6010414	MemberAccess	ph . xres		6010083	1					
ANR	6010415	Identifier	ph		6010083	0					
ANR	6010416	Identifier	xres		6010083	1					
ANR	6010417	ExpressionStatement	yscale = 72.0 / ph . yres	435:6:10278:10301	6010083	9	True				
ANR	6010418	AssignmentExpression	yscale = 72.0 / ph . yres		6010083	0		=			
ANR	6010419	Identifier	yscale		6010083	0					
ANR	6010420	MultiplicativeExpression	72.0 / ph . yres		6010083	1		/			
ANR	6010421	PrimaryExpression	72.0		6010083	0					
ANR	6010422	MemberAccess	ph . yres		6010083	1					
ANR	6010423	Identifier	ph		6010083	0					
ANR	6010424	Identifier	yres		6010083	1					
ANR	6010425	ExpressionStatement	"fprintf ( f , ""%%%%BoundingBox: %d %d %d %d\\n"" , ( int ) ( x0 * 72 ) , ( int ) ( y0 * 72 ) , ( int ) ( x0 * 72 + xscale * ph . width + 0.999 ) , ( int ) ( y0 * 72 + yscale * ph . height + 0.999 ) )"	437:6:10310:10521	6010083	10	True				
ANR	6010426	CallExpression	"fprintf ( f , ""%%%%BoundingBox: %d %d %d %d\\n"" , ( int ) ( x0 * 72 ) , ( int ) ( y0 * 72 ) , ( int ) ( x0 * 72 + xscale * ph . width + 0.999 ) , ( int ) ( y0 * 72 + yscale * ph . height + 0.999 ) )"		6010083	0					
ANR	6010427	Callee	fprintf		6010083	0					
ANR	6010428	Identifier	fprintf		6010083	0					
ANR	6010429	ArgumentList	f		6010083	1					
ANR	6010430	Argument	f		6010083	0					
ANR	6010431	Identifier	f		6010083	0					
ANR	6010432	Argument	"""%%%%BoundingBox: %d %d %d %d\\n"""		6010083	1					
ANR	6010433	PrimaryExpression	"""%%%%BoundingBox: %d %d %d %d\\n"""		6010083	0					
ANR	6010434	Argument	( int ) ( x0 * 72 )		6010083	2					
ANR	6010435	CastExpression	( int ) ( x0 * 72 )		6010083	0					
ANR	6010436	CastTarget	int		6010083	0					
ANR	6010437	MultiplicativeExpression	x0 * 72		6010083	1		*			
ANR	6010438	Identifier	x0		6010083	0					
ANR	6010439	PrimaryExpression	72		6010083	1					
ANR	6010440	Argument	( int ) ( y0 * 72 )		6010083	3					
ANR	6010441	CastExpression	( int ) ( y0 * 72 )		6010083	0					
ANR	6010442	CastTarget	int		6010083	0					
ANR	6010443	MultiplicativeExpression	y0 * 72		6010083	1		*			
ANR	6010444	Identifier	y0		6010083	0					
ANR	6010445	PrimaryExpression	72		6010083	1					
ANR	6010446	Argument	( int ) ( x0 * 72 + xscale * ph . width + 0.999 )		6010083	4					
ANR	6010447	CastExpression	( int ) ( x0 * 72 + xscale * ph . width + 0.999 )		6010083	0					
ANR	6010448	CastTarget	int		6010083	0					
ANR	6010449	AdditiveExpression	x0 * 72 + xscale * ph . width + 0.999		6010083	1		+			
ANR	6010450	MultiplicativeExpression	x0 * 72		6010083	0		*			
ANR	6010451	Identifier	x0		6010083	0					
ANR	6010452	PrimaryExpression	72		6010083	1					
ANR	6010453	AdditiveExpression	xscale * ph . width + 0.999		6010083	1		+			
ANR	6010454	MultiplicativeExpression	xscale * ph . width		6010083	0		*			
ANR	6010455	Identifier	xscale		6010083	0					
ANR	6010456	MemberAccess	ph . width		6010083	1					
ANR	6010457	Identifier	ph		6010083	0					
ANR	6010458	Identifier	width		6010083	1					
ANR	6010459	PrimaryExpression	0.999		6010083	1					
ANR	6010460	Argument	( int ) ( y0 * 72 + yscale * ph . height + 0.999 )		6010083	5					
ANR	6010461	CastExpression	( int ) ( y0 * 72 + yscale * ph . height + 0.999 )		6010083	0					
ANR	6010462	CastTarget	int		6010083	0					
ANR	6010463	AdditiveExpression	y0 * 72 + yscale * ph . height + 0.999		6010083	1		+			
ANR	6010464	MultiplicativeExpression	y0 * 72		6010083	0		*			
ANR	6010465	Identifier	y0		6010083	0					
ANR	6010466	PrimaryExpression	72		6010083	1					
ANR	6010467	AdditiveExpression	yscale * ph . height + 0.999		6010083	1		+			
ANR	6010468	MultiplicativeExpression	yscale * ph . height		6010083	0		*			
ANR	6010469	Identifier	yscale		6010083	0					
ANR	6010470	MemberAccess	ph . height		6010083	1					
ANR	6010471	Identifier	ph		6010083	0					
ANR	6010472	Identifier	height		6010083	1					
ANR	6010473	PrimaryExpression	0.999		6010083	1					
ANR	6010474	ExpressionStatement	"fprintf ( f , ""/rhex { currentfile exch readhexstring pop } bind def\\n"" )"	442:6:10530:10600	6010083	11	True				
ANR	6010475	CallExpression	"fprintf ( f , ""/rhex { currentfile exch readhexstring pop } bind def\\n"" )"		6010083	0					
ANR	6010476	Callee	fprintf		6010083	0					
ANR	6010477	Identifier	fprintf		6010083	0					
ANR	6010478	ArgumentList	f		6010083	1					
ANR	6010479	Argument	f		6010083	0					
ANR	6010480	Identifier	f		6010083	0					
ANR	6010481	Argument	"""/rhex { currentfile exch readhexstring pop } bind def\\n"""		6010083	1					
ANR	6010482	PrimaryExpression	"""/rhex { currentfile exch readhexstring pop } bind def\\n"""		6010083	0					
ANR	6010483	ExpressionStatement	"fprintf ( f , ""/picstr %d string def\\n"" , ph . width )"	443:6:10608:10656	6010083	12	True				
ANR	6010484	CallExpression	"fprintf ( f , ""/picstr %d string def\\n"" , ph . width )"		6010083	0					
ANR	6010485	Callee	fprintf		6010083	0					
ANR	6010486	Identifier	fprintf		6010083	0					
ANR	6010487	ArgumentList	f		6010083	1					
ANR	6010488	Argument	f		6010083	0					
ANR	6010489	Identifier	f		6010083	0					
ANR	6010490	Argument	"""/picstr %d string def\\n"""		6010083	1					
ANR	6010491	PrimaryExpression	"""/picstr %d string def\\n"""		6010083	0					
ANR	6010492	Argument	ph . width		6010083	2					
ANR	6010493	MemberAccess	ph . width		6010083	0					
ANR	6010494	Identifier	ph		6010083	0					
ANR	6010495	Identifier	width		6010083	1					
ANR	6010496	ForStatement	for ( curs = pl ; curs != NULL ; curs = curs -> next )		6010083	13					
ANR	6010497	ForInit	curs = pl ;	445:11:10670:10679	6010083	0	True				
ANR	6010498	AssignmentExpression	curs = pl		6010083	0		=			
ANR	6010499	Identifier	curs		6010083	0					
ANR	6010500	Identifier	pl		6010083	1					
ANR	6010501	Condition	curs != NULL	445:22:10681:10692	6010083	1	True				
ANR	6010502	EqualityExpression	curs != NULL		6010083	0		!=			
ANR	6010503	Identifier	curs		6010083	0					
ANR	6010504	Identifier	NULL		6010083	1					
ANR	6010505	AssignmentExpression	curs = curs -> next	445:36:10695:10711	6010083	2	True	=			
ANR	6010506	Identifier	curs		6010083	0					
ANR	6010507	PtrMemberAccess	curs -> next		6010083	1					
ANR	6010508	Identifier	curs		6010083	0					
ANR	6010509	Identifier	next		6010083	1					
ANR	6010510	CompoundStatement		76:8:2054:2054	6010083	3					
ANR	6010511	ExpressionStatement	"fprintf ( f , ""%% IJS parameter: %s = "" , curs -> key )"	447:10:10734:10783	6010083	0	True				
ANR	6010512	CallExpression	"fprintf ( f , ""%% IJS parameter: %s = "" , curs -> key )"		6010083	0					
ANR	6010513	Callee	fprintf		6010083	0					
ANR	6010514	Identifier	fprintf		6010083	0					
ANR	6010515	ArgumentList	f		6010083	1					
ANR	6010516	Argument	f		6010083	0					
ANR	6010517	Identifier	f		6010083	0					
ANR	6010518	Argument	"""%% IJS parameter: %s = """		6010083	1					
ANR	6010519	PrimaryExpression	"""%% IJS parameter: %s = """		6010083	0					
ANR	6010520	Argument	curs -> key		6010083	2					
ANR	6010521	PtrMemberAccess	curs -> key		6010083	0					
ANR	6010522	Identifier	curs		6010083	0					
ANR	6010523	Identifier	key		6010083	1					
ANR	6010524	ExpressionStatement	"fwrite ( curs -> value , 1 , curs -> value_size , f )"	448:10:10795:10839	6010083	1	True				
ANR	6010525	CallExpression	"fwrite ( curs -> value , 1 , curs -> value_size , f )"		6010083	0					
ANR	6010526	Callee	fwrite		6010083	0					
ANR	6010527	Identifier	fwrite		6010083	0					
ANR	6010528	ArgumentList	curs -> value		6010083	1					
ANR	6010529	Argument	curs -> value		6010083	0					
ANR	6010530	PtrMemberAccess	curs -> value		6010083	0					
ANR	6010531	Identifier	curs		6010083	0					
ANR	6010532	Identifier	value		6010083	1					
ANR	6010533	Argument	1		6010083	1					
ANR	6010534	PrimaryExpression	1		6010083	0					
ANR	6010535	Argument	curs -> value_size		6010083	2					
ANR	6010536	PtrMemberAccess	curs -> value_size		6010083	0					
ANR	6010537	Identifier	curs		6010083	0					
ANR	6010538	Identifier	value_size		6010083	1					
ANR	6010539	Argument	f		6010083	3					
ANR	6010540	Identifier	f		6010083	0					
ANR	6010541	ExpressionStatement	"fputs ( ""\\n"" , f )"	449:10:10851:10866	6010083	2	True				
ANR	6010542	CallExpression	"fputs ( ""\\n"" , f )"		6010083	0					
ANR	6010543	Callee	fputs		6010083	0					
ANR	6010544	Identifier	fputs		6010083	0					
ANR	6010545	ArgumentList	"""\\n"""		6010083	1					
ANR	6010546	Argument	"""\\n"""		6010083	0					
ANR	6010547	PrimaryExpression	"""\\n"""		6010083	0					
ANR	6010548	Argument	f		6010083	1					
ANR	6010549	Identifier	f		6010083	0					
ANR	6010550	Statement	fprintf	452:6:10885:10891	6010083	14	True				
ANR	6010551	Statement	(	452:14:10893:10893	6010083	15	True				
ANR	6010552	Statement	f	452:15:10894:10894	6010083	16	True				
ANR	6010553	Statement	","	452:16:10895:10895	6010083	17	True				
ANR	6010554	Statement	"""gsave\\n"""	453:15:10912:10920	6010083	18	True				
ANR	6010555	Statement	"""%f %f translate\\n"""	454:15:10937:10955	6010083	19	True				
ANR	6010556	Statement	"""%f %f scale\\n"""	455:15:10972:10986	6010083	20	True				
ANR	6010557	Statement	"""%d %d %d\\n"""	456:15:11003:11014	6010083	21	True				
ANR	6010558	Statement	"""[ %d 0 0 %d 0 %d ]\\n"""	457:15:11031:11052	6010083	22	True				
ANR	6010559	Statement	","	457:37:11053:11053	6010083	23	True				
ANR	6010560	Statement	x0	458:15:11070:11071	6010083	24	True				
ANR	6010561	Statement	*	458:18:11073:11073	6010083	25	True				
ANR	6010562	Statement	72	458:20:11075:11076	6010083	26	True				
ANR	6010563	Statement	","	458:22:11077:11077	6010083	27	True				
ANR	6010564	Statement	y0	458:24:11079:11080	6010083	28	True				
ANR	6010565	Statement	*	458:27:11082:11082	6010083	29	True				
ANR	6010566	Statement	72	458:29:11084:11085	6010083	30	True				
ANR	6010567	Statement	","	458:31:11086:11086	6010083	31	True				
ANR	6010568	Statement	xscale	459:15:11103:11108	6010083	32	True				
ANR	6010569	Statement	*	459:22:11110:11110	6010083	33	True				
ANR	6010570	Statement	ph	459:24:11112:11113	6010083	34	True				
ANR	6010571	Statement	.	459:26:11114:11114	6010083	35	True				
ANR	6010572	Statement	width	459:27:11115:11119	6010083	36	True				
ANR	6010573	Statement	","	459:32:11120:11120	6010083	37	True				
ANR	6010574	Statement	yscale	459:34:11122:11127	6010083	38	True				
ANR	6010575	Statement	*	459:41:11129:11129	6010083	39	True				
ANR	6010576	Statement	ph	459:43:11131:11132	6010083	40	True				
ANR	6010577	Statement	.	459:45:11133:11133	6010083	41	True				
ANR	6010578	Statement	height	459:46:11134:11139	6010083	42	True				
ANR	6010579	Statement	","	459:52:11140:11140	6010083	43	True				
ANR	6010580	Statement	ph	460:15:11157:11158	6010083	44	True				
ANR	6010581	Statement	.	460:17:11159:11159	6010083	45	True				
ANR	6010582	Statement	width	460:18:11160:11164	6010083	46	True				
ANR	6010583	Statement	","	460:23:11165:11165	6010083	47	True				
ANR	6010584	Statement	ph	460:25:11167:11168	6010083	48	True				
ANR	6010585	Statement	.	460:27:11169:11169	6010083	49	True				
ANR	6010586	Statement	height	460:28:11170:11175	6010083	50	True				
ANR	6010587	Statement	","	460:34:11176:11176	6010083	51	True				
ANR	6010588	Statement	ph	460:36:11178:11179	6010083	52	True				
ANR	6010589	Statement	.	460:38:11180:11180	6010083	53	True				
ANR	6010590	Statement	bps	460:39:11181:11183	6010083	54	True				
ANR	6010591	Statement	","	460:42:11184:11184	6010083	55	True				
ANR	6010592	Statement	ph	461:15:11201:11202	6010083	56	True				
ANR	6010593	Statement	.	461:17:11203:11203	6010083	57	True				
ANR	6010594	Statement	width	461:18:11204:11208	6010083	58	True				
ANR	6010595	Statement	","	461:23:11209:11209	6010083	59	True				
ANR	6010596	Statement	-	461:25:11211:11211	6010083	60	True				
ANR	6010597	Statement	ph	461:26:11212:11213	6010083	61	True				
ANR	6010598	Statement	.	461:28:11214:11214	6010083	62	True				
ANR	6010599	Statement	height	461:29:11215:11220	6010083	63	True				
ANR	6010600	Statement	","	461:35:11221:11221	6010083	64	True				
ANR	6010601	Statement	ph	461:37:11223:11224	6010083	65	True				
ANR	6010602	Statement	.	461:39:11225:11225	6010083	66	True				
ANR	6010603	Statement	height	461:40:11226:11231	6010083	67	True				
ANR	6010604	Statement	)	461:46:11232:11232	6010083	68	True				
ANR	6010605	ExpressionStatement		461:47:11233:11233	6010083	69	True				
ANR	6010606	IfStatement	if ( ph . n_chan == 1 )		6010083	70					
ANR	6010607	Condition	ph . n_chan == 1	462:10:11245:11258	6010083	0	True				
ANR	6010608	EqualityExpression	ph . n_chan == 1		6010083	0		==			
ANR	6010609	MemberAccess	ph . n_chan		6010083	0					
ANR	6010610	Identifier	ph		6010083	0					
ANR	6010611	Identifier	n_chan		6010083	1					
ANR	6010612	PrimaryExpression	1		6010083	1					
ANR	6010613	ExpressionStatement	"fprintf ( f , ""{ picstr rhex } image\\n"" )"	463:8:11269:11307	6010083	1	True				
ANR	6010614	CallExpression	"fprintf ( f , ""{ picstr rhex } image\\n"" )"		6010083	0					
ANR	6010615	Callee	fprintf		6010083	0					
ANR	6010616	Identifier	fprintf		6010083	0					
ANR	6010617	ArgumentList	f		6010083	1					
ANR	6010618	Argument	f		6010083	0					
ANR	6010619	Identifier	f		6010083	0					
ANR	6010620	Argument	"""{ picstr rhex } image\\n"""		6010083	1					
ANR	6010621	PrimaryExpression	"""{ picstr rhex } image\\n"""		6010083	0					
ANR	6010622	ElseStatement	else		6010083	0					
ANR	6010623	CompoundStatement		95:8:2660:2660	6010083	0					
ANR	6010624	Statement	fprintf	466:10:11340:11346	6010083	0	True				
ANR	6010625	Statement	(	466:18:11348:11348	6010083	1	True				
ANR	6010626	Statement	f	466:19:11349:11349	6010083	2	True				
ANR	6010627	Statement	","	466:20:11350:11350	6010083	3	True				
ANR	6010628	Statement	"""{ picstr rhex }\\n"""	466:22:11352:11370	6010083	4	True				
ANR	6010629	Statement	"""false %d colorimage\\n"""	467:19:11391:11413	6010083	5	True				
ANR	6010630	Statement	","	467:42:11414:11414	6010083	6	True				
ANR	6010631	Statement	ph	467:44:11416:11417	6010083	7	True				
ANR	6010632	Statement	.	467:46:11418:11418	6010083	8	True				
ANR	6010633	Statement	n_chan	467:47:11419:11424	6010083	9	True				
ANR	6010634	Statement	)	467:53:11425:11425	6010083	10	True				
ANR	6010635	ExpressionStatement		467:54:11426:11426	6010083	11	True				
ANR	6010636	ExpressionStatement	total_bytes = ( ( ph . n_chan * ph . bps * ph . width + 7 ) >> 3 ) * ph . height	469:6:11444:11512	6010083	71	True				
ANR	6010637	AssignmentExpression	total_bytes = ( ( ph . n_chan * ph . bps * ph . width + 7 ) >> 3 ) * ph . height		6010083	0		=			
ANR	6010638	Identifier	total_bytes		6010083	0					
ANR	6010639	MultiplicativeExpression	( ( ph . n_chan * ph . bps * ph . width + 7 ) >> 3 ) * ph . height		6010083	1		*			
ANR	6010640	ShiftExpression	( ph . n_chan * ph . bps * ph . width + 7 ) >> 3		6010083	0		>>			
ANR	6010641	AdditiveExpression	ph . n_chan * ph . bps * ph . width + 7		6010083	0		+			
ANR	6010642	MultiplicativeExpression	ph . n_chan * ph . bps * ph . width		6010083	0		*			
ANR	6010643	MemberAccess	ph . n_chan		6010083	0					
ANR	6010644	Identifier	ph		6010083	0					
ANR	6010645	Identifier	n_chan		6010083	1					
ANR	6010646	MultiplicativeExpression	ph . bps * ph . width		6010083	1		*			
ANR	6010647	MemberAccess	ph . bps		6010083	0					
ANR	6010648	Identifier	ph		6010083	0					
ANR	6010649	Identifier	bps		6010083	1					
ANR	6010650	MemberAccess	ph . width		6010083	1					
ANR	6010651	Identifier	ph		6010083	0					
ANR	6010652	Identifier	width		6010083	1					
ANR	6010653	PrimaryExpression	7		6010083	1					
ANR	6010654	PrimaryExpression	3		6010083	1					
ANR	6010655	MemberAccess	ph . height		6010083	1					
ANR	6010656	Identifier	ph		6010083	0					
ANR	6010657	Identifier	height		6010083	1					
ANR	6010658	ExpressionStatement	bytes_left = total_bytes	470:6:11520:11544	6010083	72	True				
ANR	6010659	AssignmentExpression	bytes_left = total_bytes		6010083	0		=			
ANR	6010660	Identifier	bytes_left		6010083	0					
ANR	6010661	Identifier	total_bytes		6010083	1					
ANR	6010662	WhileStatement	while ( bytes_left )		6010083	73					
ANR	6010663	Condition	bytes_left	471:13:11559:11568	6010083	0	True				
ANR	6010664	Identifier	bytes_left		6010083	0					
ANR	6010665	CompoundStatement		104:10:2959:2967	6010083	1					
ANR	6010666	IdentifierDeclStatement	int n_bytes = bytes_left ;	473:10:11591:11615	6010083	0	True				
ANR	6010667	IdentifierDecl	n_bytes = bytes_left		6010083	0					
ANR	6010668	IdentifierDeclType	int		6010083	0					
ANR	6010669	Identifier	n_bytes		6010083	1					
ANR	6010670	AssignmentExpression	n_bytes = bytes_left		6010083	2		=			
ANR	6010671	Identifier	bytes_left		6010083	0					
ANR	6010672	Identifier	bytes_left		6010083	1					
ANR	6010673	IdentifierDeclStatement	"int i , j ;"	474:10:11627:11635	6010083	1	True				
ANR	6010674	IdentifierDecl	i		6010083	0					
ANR	6010675	IdentifierDeclType	int		6010083	0					
ANR	6010676	Identifier	i		6010083	1					
ANR	6010677	IdentifierDecl	j		6010083	1					
ANR	6010678	IdentifierDeclType	int		6010083	0					
ANR	6010679	Identifier	j		6010083	1					
ANR	6010680	IfStatement	if ( n_bytes > sizeof ( buf ) )		6010083	2					
ANR	6010681	Condition	n_bytes > sizeof ( buf )	476:14:11652:11672	6010083	0	True				
ANR	6010682	RelationalExpression	n_bytes > sizeof ( buf )		6010083	0		>			
ANR	6010683	Identifier	n_bytes		6010083	0					
ANR	6010684	SizeofExpression	sizeof ( buf )		6010083	1					
ANR	6010685	Sizeof	sizeof		6010083	0					
ANR	6010686	SizeofOperand	buf		6010083	1					
ANR	6010687	ExpressionStatement	n_bytes = sizeof ( buf )	477:12:11687:11708	6010083	1	True				
ANR	6010688	AssignmentExpression	n_bytes = sizeof ( buf )		6010083	0		=			
ANR	6010689	Identifier	n_bytes		6010083	0					
ANR	6010690	SizeofExpression	sizeof ( buf )		6010083	1					
ANR	6010691	Sizeof	sizeof		6010083	0					
ANR	6010692	SizeofOperand	buf		6010083	1					
ANR	6010693	ExpressionStatement	"fprintf ( stderr , ""%d bytes left, reading %d\\n"" , bytes_left , n_bytes )"	479:10:11735:11803	6010083	3	True				
ANR	6010694	CallExpression	"fprintf ( stderr , ""%d bytes left, reading %d\\n"" , bytes_left , n_bytes )"		6010083	0					
ANR	6010695	Callee	fprintf		6010083	0					
ANR	6010696	Identifier	fprintf		6010083	0					
ANR	6010697	ArgumentList	stderr		6010083	1					
ANR	6010698	Argument	stderr		6010083	0					
ANR	6010699	Identifier	stderr		6010083	0					
ANR	6010700	Argument	"""%d bytes left, reading %d\\n"""		6010083	1					
ANR	6010701	PrimaryExpression	"""%d bytes left, reading %d\\n"""		6010083	0					
ANR	6010702	Argument	bytes_left		6010083	2					
ANR	6010703	Identifier	bytes_left		6010083	0					
ANR	6010704	Argument	n_bytes		6010083	3					
ANR	6010705	Identifier	n_bytes		6010083	0					
ANR	6010706	ExpressionStatement	"status = ijs_server_get_data ( ctx , buf , n_bytes )"	481:10:11822:11870	6010083	4	True				
ANR	6010707	AssignmentExpression	"status = ijs_server_get_data ( ctx , buf , n_bytes )"		6010083	0		=			
ANR	6010708	Identifier	status		6010083	0					
ANR	6010709	CallExpression	"ijs_server_get_data ( ctx , buf , n_bytes )"		6010083	1					
ANR	6010710	Callee	ijs_server_get_data		6010083	0					
ANR	6010711	Identifier	ijs_server_get_data		6010083	0					
ANR	6010712	ArgumentList	ctx		6010083	1					
ANR	6010713	Argument	ctx		6010083	0					
ANR	6010714	Identifier	ctx		6010083	0					
ANR	6010715	Argument	buf		6010083	1					
ANR	6010716	Identifier	buf		6010083	0					
ANR	6010717	Argument	n_bytes		6010083	2					
ANR	6010718	Identifier	n_bytes		6010083	0					
ANR	6010719	IfStatement	if ( status )		6010083	5					
ANR	6010720	Condition	status	482:14:11886:11891	6010083	0	True				
ANR	6010721	Identifier	status		6010083	0					
ANR	6010722	CompoundStatement		113:12:3238:3238	6010083	1					
ANR	6010723	ExpressionStatement	"fprintf ( stderr , ""page aborted!\\n"" )"	484:14:11922:11957	6010083	0	True				
ANR	6010724	CallExpression	"fprintf ( stderr , ""page aborted!\\n"" )"		6010083	0					
ANR	6010725	Callee	fprintf		6010083	0					
ANR	6010726	Identifier	fprintf		6010083	0					
ANR	6010727	ArgumentList	stderr		6010083	1					
ANR	6010728	Argument	stderr		6010083	0					
ANR	6010729	Identifier	stderr		6010083	0					
ANR	6010730	Argument	"""page aborted!\\n"""		6010083	1					
ANR	6010731	PrimaryExpression	"""page aborted!\\n"""		6010083	0					
ANR	6010732	BreakStatement	break ;	485:14:11973:11978	6010083	1	True				
ANR	6010733	ExpressionStatement	j = 0	487:10:12004:12009	6010083	6	True				
ANR	6010734	AssignmentExpression	j = 0		6010083	0		=			
ANR	6010735	Identifier	j		6010083	0					
ANR	6010736	PrimaryExpression	0		6010083	1					
ANR	6010737	ForStatement	for ( i = 0 ; i < n_bytes ; i ++ )		6010083	7					
ANR	6010738	ForInit	i = 0 ;	488:15:12026:12031	6010083	0	True				
ANR	6010739	AssignmentExpression	i = 0		6010083	0		=			
ANR	6010740	Identifier	i		6010083	0					
ANR	6010741	PrimaryExpression	0		6010083	1					
ANR	6010742	Condition	i < n_bytes	488:22:12033:12043	6010083	1	True				
ANR	6010743	RelationalExpression	i < n_bytes		6010083	0		<			
ANR	6010744	Identifier	i		6010083	0					
ANR	6010745	Identifier	n_bytes		6010083	1					
ANR	6010746	PostIncDecOperationExpression	i ++	488:35:12046:12048	6010083	2	True				
ANR	6010747	Identifier	i		6010083	0					
ANR	6010748	IncDec	++		6010083	1					
ANR	6010749	CompoundStatement		121:14:3466:3509	6010083	3					
ANR	6010750	IdentifierDeclStatement	"const char hex [ 16 ] = ""0123456789AbCdEf"" ;"	490:14:12079:12118	6010083	0	True				
ANR	6010751	IdentifierDecl	"hex [ 16 ] = ""0123456789AbCdEf"""		6010083	0					
ANR	6010752	IdentifierDeclType	const char [ 16 ]		6010083	0					
ANR	6010753	Identifier	hex		6010083	1					
ANR	6010754	PrimaryExpression	16		6010083	2					
ANR	6010755	AssignmentExpression	"hex [ 16 ] = ""0123456789AbCdEf"""		6010083	3		=			
ANR	6010756	Identifier	hex		6010083	0					
ANR	6010757	PrimaryExpression	"""0123456789AbCdEf"""		6010083	1					
ANR	6010758	IdentifierDeclStatement	unsigned char c = ( ( unsigned char * ) buf ) [ i ] ;	491:14:12134:12177	6010083	1	True				
ANR	6010759	IdentifierDecl	c = ( ( unsigned char * ) buf ) [ i ]		6010083	0					
ANR	6010760	IdentifierDeclType	unsigned char		6010083	0					
ANR	6010761	Identifier	c		6010083	1					
ANR	6010762	AssignmentExpression	c = ( ( unsigned char * ) buf ) [ i ]		6010083	2		=			
ANR	6010763	Identifier	c		6010083	0					
ANR	6010764	ArrayIndexing	( ( unsigned char * ) buf ) [ i ]		6010083	1					
ANR	6010765	CastExpression	( unsigned char * ) buf		6010083	0					
ANR	6010766	CastTarget	unsigned char *		6010083	0					
ANR	6010767	Identifier	buf		6010083	1					
ANR	6010768	Identifier	i		6010083	1					
ANR	6010769	ExpressionStatement	hexbuf [ j ++ ] = hex [ c >> 4 ]	493:14:12194:12219	6010083	2	True				
ANR	6010770	AssignmentExpression	hexbuf [ j ++ ] = hex [ c >> 4 ]		6010083	0		=			
ANR	6010771	ArrayIndexing	hexbuf [ j ++ ]		6010083	0					
ANR	6010772	Identifier	hexbuf		6010083	0					
ANR	6010773	PostIncDecOperationExpression	j ++		6010083	1					
ANR	6010774	Identifier	j		6010083	0					
ANR	6010775	IncDec	++		6010083	1					
ANR	6010776	ArrayIndexing	hex [ c >> 4 ]		6010083	1					
ANR	6010777	Identifier	hex		6010083	0					
ANR	6010778	ShiftExpression	c >> 4		6010083	1		>>			
ANR	6010779	Identifier	c		6010083	0					
ANR	6010780	PrimaryExpression	4		6010083	1					
ANR	6010781	ExpressionStatement	hexbuf [ j ++ ] = hex [ c & 0xf ]	494:14:12235:12261	6010083	3	True				
ANR	6010782	AssignmentExpression	hexbuf [ j ++ ] = hex [ c & 0xf ]		6010083	0		=			
ANR	6010783	ArrayIndexing	hexbuf [ j ++ ]		6010083	0					
ANR	6010784	Identifier	hexbuf		6010083	0					
ANR	6010785	PostIncDecOperationExpression	j ++		6010083	1					
ANR	6010786	Identifier	j		6010083	0					
ANR	6010787	IncDec	++		6010083	1					
ANR	6010788	ArrayIndexing	hex [ c & 0xf ]		6010083	1					
ANR	6010789	Identifier	hex		6010083	0					
ANR	6010790	BitAndExpression	c & 0xf		6010083	1		&			
ANR	6010791	Identifier	c		6010083	0					
ANR	6010792	PrimaryExpression	0xf		6010083	1					
ANR	6010793	IfStatement	if ( ( i & 31 ) == 31 )		6010083	4					
ANR	6010794	Condition	( i & 31 ) == 31	495:18:12281:12294	6010083	0	True				
ANR	6010795	EqualityExpression	( i & 31 ) == 31		6010083	0		==			
ANR	6010796	BitAndExpression	i & 31		6010083	0		&			
ANR	6010797	Identifier	i		6010083	0					
ANR	6010798	PrimaryExpression	31		6010083	1					
ANR	6010799	PrimaryExpression	31		6010083	1					
ANR	6010800	ExpressionStatement	hexbuf [ j ++ ] = '\\n'	496:16:12313:12331	6010083	1	True				
ANR	6010801	AssignmentExpression	hexbuf [ j ++ ] = '\\n'		6010083	0		=			
ANR	6010802	ArrayIndexing	hexbuf [ j ++ ]		6010083	0					
ANR	6010803	Identifier	hexbuf		6010083	0					
ANR	6010804	PostIncDecOperationExpression	j ++		6010083	1					
ANR	6010805	Identifier	j		6010083	0					
ANR	6010806	IncDec	++		6010083	1					
ANR	6010807	PrimaryExpression	'\\n'		6010083	1					
ANR	6010808	IfStatement	if ( ( n_bytes & 31 ) != 0 )		6010083	8					
ANR	6010809	Condition	( n_bytes & 31 ) != 0	498:14:12361:12379	6010083	0	True				
ANR	6010810	EqualityExpression	( n_bytes & 31 ) != 0		6010083	0		!=			
ANR	6010811	BitAndExpression	n_bytes & 31		6010083	0		&			
ANR	6010812	Identifier	n_bytes		6010083	0					
ANR	6010813	PrimaryExpression	31		6010083	1					
ANR	6010814	PrimaryExpression	0		6010083	1					
ANR	6010815	ExpressionStatement	hexbuf [ j ++ ] = '\\n'	499:12:12394:12412	6010083	1	True				
ANR	6010816	AssignmentExpression	hexbuf [ j ++ ] = '\\n'		6010083	0		=			
ANR	6010817	ArrayIndexing	hexbuf [ j ++ ]		6010083	0					
ANR	6010818	Identifier	hexbuf		6010083	0					
ANR	6010819	PostIncDecOperationExpression	j ++		6010083	1					
ANR	6010820	Identifier	j		6010083	0					
ANR	6010821	IncDec	++		6010083	1					
ANR	6010822	PrimaryExpression	'\\n'		6010083	1					
ANR	6010823	ExpressionStatement	"fwrite ( hexbuf , 1 , j , f )"	500:10:12424:12448	6010083	9	True				
ANR	6010824	CallExpression	"fwrite ( hexbuf , 1 , j , f )"		6010083	0					
ANR	6010825	Callee	fwrite		6010083	0					
ANR	6010826	Identifier	fwrite		6010083	0					
ANR	6010827	ArgumentList	hexbuf		6010083	1					
ANR	6010828	Argument	hexbuf		6010083	0					
ANR	6010829	Identifier	hexbuf		6010083	0					
ANR	6010830	Argument	1		6010083	1					
ANR	6010831	PrimaryExpression	1		6010083	0					
ANR	6010832	Argument	j		6010083	2					
ANR	6010833	Identifier	j		6010083	0					
ANR	6010834	Argument	f		6010083	3					
ANR	6010835	Identifier	f		6010083	0					
ANR	6010836	ExpressionStatement	bytes_left -= n_bytes	501:10:12460:12481	6010083	10	True				
ANR	6010837	AssignmentExpression	bytes_left -= n_bytes		6010083	0		-=			
ANR	6010838	Identifier	bytes_left		6010083	0					
ANR	6010839	Identifier	n_bytes		6010083	1					
ANR	6010840	ExpressionStatement	"fprintf ( f , ""grestore\\nshowpage\\n"" )"	503:6:12499:12534	6010083	74	True				
ANR	6010841	CallExpression	"fprintf ( f , ""grestore\\nshowpage\\n"" )"		6010083	0					
ANR	6010842	Callee	fprintf		6010083	0					
ANR	6010843	Identifier	fprintf		6010083	0					
ANR	6010844	ArgumentList	f		6010083	1					
ANR	6010845	Argument	f		6010083	0					
ANR	6010846	Identifier	f		6010083	0					
ANR	6010847	Argument	"""grestore\\nshowpage\\n"""		6010083	1					
ANR	6010848	PrimaryExpression	"""grestore\\nshowpage\\n"""		6010083	0					
ANR	6010849	Condition	status == 0	505:9:12551:12561	6010083	1	True				
ANR	6010850	EqualityExpression	status == 0		6010083	0		==			
ANR	6010851	Identifier	status		6010083	0					
ANR	6010852	PrimaryExpression	0		6010083	1					
ANR	6010853	IfStatement	if ( status > 0 )		6010083	18					
ANR	6010854	Condition	status > 0	507:6:12572:12581	6010083	0	True				
ANR	6010855	RelationalExpression	status > 0		6010083	0		>			
ANR	6010856	Identifier	status		6010083	0					
ANR	6010857	PrimaryExpression	0		6010083	1					
ANR	6010858	ExpressionStatement	status = 0	507:18:12584:12594	6010083	1	True				
ANR	6010859	AssignmentExpression	status = 0		6010083	0		=			
ANR	6010860	Identifier	status		6010083	0					
ANR	6010861	PrimaryExpression	0		6010083	1					
ANR	6010862	IfStatement	if ( f )		6010083	19					
ANR	6010863	Condition	f	509:6:12621:12621	6010083	0	True				
ANR	6010864	Identifier	f		6010083	0					
ANR	6010865	ExpressionStatement	fclose ( f )	510:4:12628:12638	6010083	1	True				
ANR	6010866	CallExpression	fclose ( f )		6010083	0					
ANR	6010867	Callee	fclose		6010083	0					
ANR	6010868	Identifier	fclose		6010083	0					
ANR	6010869	ArgumentList	f		6010083	1					
ANR	6010870	Argument	f		6010083	0					
ANR	6010871	Identifier	f		6010083	0					
ANR	6010872	ExpressionStatement	ijs_server_done ( ctx )	511:2:12642:12663	6010083	20	True				
ANR	6010873	CallExpression	ijs_server_done ( ctx )		6010083	0					
ANR	6010874	Callee	ijs_server_done		6010083	0					
ANR	6010875	Identifier	ijs_server_done		6010083	0					
ANR	6010876	ArgumentList	ctx		6010083	1					
ANR	6010877	Argument	ctx		6010083	0					
ANR	6010878	Identifier	ctx		6010083	0					
ANR	6010879	ExpressionStatement	free_param_list ( pl )	513:2:12668:12688	6010083	21	True				
ANR	6010880	CallExpression	free_param_list ( pl )		6010083	0					
ANR	6010881	Callee	free_param_list		6010083	0					
ANR	6010882	Identifier	free_param_list		6010083	0					
ANR	6010883	ArgumentList	pl		6010083	1					
ANR	6010884	Argument	pl		6010083	0					
ANR	6010885	Identifier	pl		6010083	0					
ANR	6010886	ExpressionStatement	"fprintf ( stderr , ""server exiting with status %d\\n"" , status )"	516:2:12708:12767	6010083	22	True				
ANR	6010887	CallExpression	"fprintf ( stderr , ""server exiting with status %d\\n"" , status )"		6010083	0					
ANR	6010888	Callee	fprintf		6010083	0					
ANR	6010889	Identifier	fprintf		6010083	0					
ANR	6010890	ArgumentList	stderr		6010083	1					
ANR	6010891	Argument	stderr		6010083	0					
ANR	6010892	Identifier	stderr		6010083	0					
ANR	6010893	Argument	"""server exiting with status %d\\n"""		6010083	1					
ANR	6010894	PrimaryExpression	"""server exiting with status %d\\n"""		6010083	0					
ANR	6010895	Argument	status		6010083	2					
ANR	6010896	Identifier	status		6010083	0					
ANR	6010897	ReturnStatement	return status ;	518:2:12778:12791	6010083	23	True				
ANR	6010898	Identifier	status		6010083	0					
ANR	6010899	ReturnType	int		6010083	1					
ANR	6010900	Identifier	main		6010083	2					
ANR	6010901	ParameterList	"int argc , char * * argv"		6010083	3					
ANR	6010902	Parameter	int argc	370:6:8644:8651	6010083	0	True				
ANR	6010903	ParameterType	int		6010083	0					
ANR	6010904	Identifier	argc		6010083	1					
ANR	6010905	Parameter	char * * argv	370:16:8654:8664	6010083	1	True				
ANR	6010906	ParameterType	char * *		6010083	0					
ANR	6010907	Identifier	argv		6010083	1					
ANR	6010908	CFGEntryNode	ENTRY		6010083		True				
ANR	6010909	CFGExitNode	EXIT		6010083		True				
ANR	6010910	Symbol	& y0		6010083						
ANR	6010911	Symbol	stdin		6010083						
ANR	6010912	Symbol	stdout		6010083						
ANR	6010913	Symbol	ijs_server_get_data		6010083						
ANR	6010914	Symbol	example_list_cb		6010083						
ANR	6010915	Symbol	curs -> value_size		6010083						
ANR	6010916	Symbol	yscale		6010083						
ANR	6010917	Symbol	ph . n_chan		6010083						
ANR	6010918	Symbol	total_bytes		6010083						
ANR	6010919	Symbol	xscale		6010083						
ANR	6010920	Symbol	hex		6010083						
ANR	6010921	Symbol	curs		6010083						
ANR	6010922	Symbol	curs -> next		6010083						
ANR	6010923	Symbol	example_enum_cb		6010083						
ANR	6010924	Symbol	* buf		6010083						
ANR	6010925	Symbol	NULL		6010083						
ANR	6010926	Symbol	& ph		6010083						
ANR	6010927	Symbol	bytes_left		6010083						
ANR	6010928	Symbol	ctx		6010083						
ANR	6010929	Symbol	& pl		6010083						
ANR	6010930	Symbol	stderr		6010083						
ANR	6010931	Symbol	ph . xres		6010083						
ANR	6010932	Symbol	example_set_cb		6010083						
ANR	6010933	Symbol	example_get_cb		6010083						
ANR	6010934	Symbol	x0		6010083						
ANR	6010935	Symbol	status		6010083						
ANR	6010936	Symbol	hexbuf		6010083						
ANR	6010937	Symbol	fn		6010083						
ANR	6010938	Symbol	fdopen		6010083						
ANR	6010939	Symbol	argv		6010083						
ANR	6010940	Symbol	ph . yres		6010083						
ANR	6010941	Symbol	curs -> key		6010083						
ANR	6010942	Symbol	curs -> value		6010083						
ANR	6010943	Symbol	* hexbuf		6010083						
ANR	6010944	Symbol	y0		6010083						
ANR	6010945	Symbol	ijs_server_get_page_header		6010083						
ANR	6010946	Symbol	ijs_server_init		6010083						
ANR	6010947	Symbol	argc		6010083						
ANR	6010948	Symbol	ph . width		6010083						
ANR	6010949	Symbol	atoi		6010083						
ANR	6010950	Symbol	fopen		6010083						
ANR	6010951	Symbol	& x0		6010083						
ANR	6010952	Symbol	c		6010083						
ANR	6010953	Symbol	example_status_cb		6010083						
ANR	6010954	Symbol	f		6010083						
ANR	6010955	Symbol	ph . height		6010083						
ANR	6010956	Symbol	i		6010083						
ANR	6010957	Symbol	j		6010083						
ANR	6010958	Symbol	* c		6010083						
ANR	6010959	Symbol	buf		6010083						
ANR	6010960	Symbol	* i		6010083						
ANR	6010961	Symbol	* curs		6010083						
ANR	6010962	Symbol	ph . bps		6010083						
ANR	6010963	Symbol	ph		6010083						
ANR	6010964	Symbol	* hex		6010083						
ANR	6010965	Symbol	pl		6010083						
ANR	6010966	Symbol	n_bytes		6010083						
ANR	6010967	Symbol	find_param		6010083						
