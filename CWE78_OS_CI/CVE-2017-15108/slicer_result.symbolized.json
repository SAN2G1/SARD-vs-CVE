[
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 0,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 69,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ],
    "tokenized": "static void FUNC1(STRUCT1  Var1)\nSTRUCT2 *Var2=Var1; \nFUNC2(Var2 != NULL ); \nif (Var2->memberVar1>0){\nsyslog(Var3,STRING,\nVar2->memberVar2,Var2->memberVar3); \nclose(Var2->memberVar1); \nelse \n}else if (Var2->memberVar4)\nsyslog(Var4,STRING,\nVar2->memberVar2,Var2->memberVar3); \nFUNC3(Var2->memberVar3); \nFUNC3(Var2); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 1,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "close",
    "line": 71,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ],
    "tokenized": "static void FUNC1(STRUCT1  Var1)\nSTRUCT2 *Var2=Var1; \nFUNC2(Var2 != NULL ); \nif (Var2->memberVar1>0){\nsyslog(Var3,STRING,\nVar2->memberVar2,Var2->memberVar3); \nclose(Var2->memberVar1); \nelse \n}else if (Var2->memberVar4)\nsyslog(Var4,STRING,\nVar2->memberVar2,Var2->memberVar3); \nFUNC3(Var2->memberVar3); \nFUNC3(Var2); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 2,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "unlink",
    "line": 72,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ],
    "tokenized": "static void FUNC1(STRUCT1  Var1)\nSTRUCT2 *Var2=Var1; \nFUNC2(Var2 != NULL ); \nif (Var2->memberVar1>0){\nsyslog(Var3,STRING,\nVar2->memberVar2,Var2->memberVar3); \nclose(Var2->memberVar1); \nelse \n}else if (Var2->memberVar4)\nsyslog(Var4,STRING,\nVar2->memberVar2,Var2->memberVar3); \nFUNC3(Var2->memberVar3); \nFUNC3(Var2); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 3,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 74,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ],
    "tokenized": "static void FUNC1(STRUCT1  Var1)\nSTRUCT2 *Var2=Var1; \nFUNC2(Var2 != NULL ); \nif (Var2->memberVar1>0){\nsyslog(Var3,STRING,\nVar2->memberVar2,Var2->memberVar3); \nclose(Var2->memberVar1); \nelse \n}else if (Var2->memberVar4)\nsyslog(Var4,STRING,\nVar2->memberVar2,Var2->memberVar3); \nFUNC3(Var2->memberVar3); \nFUNC3(Var2); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_get_task",
    "Source": false,
    "Sink": false,
    "idx": 4,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 116,
    "label": -3,
    "slices": [
      "    struct vdagent_file_xfers *xfers, uint32_t id)\n",
      "    AgentFileXferTask *task;\n",
      "    task = g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(id));\n",
      "    if (task == NULL)\n",
      "        syslog(LOG_ERR, \"file-xfer: error cannot find task %u\", id);\n"
    ],
    "tokenized": "struct STRUCT1 *Var1,uint32_t  Var2)\nSTRUCT2 *Var3; \nVar3=FUNC1(Var1->memberVar1,FUNC2(Var2)); \nif (Var3 == NULL )\nsyslog(Var4,STRING,Var2); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 5,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 134,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ],
    "tokenized": "STRUCT1 *Var1=NULL ; \nSTRUCT2 *Var2=NULL ; \nSTRUCT3 *Var3=NULL ; \nif (FUNC1(Var1,\n(const STRUCT4 *) Var4->memberVar1,\n-1,\nVar5,&Var3) ==  Var6){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 6,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 143,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ],
    "tokenized": "STRUCT1 *Var1=NULL ; \nSTRUCT2 *Var2=NULL ; \nSTRUCT3 *Var3=NULL ; \nif (FUNC1(Var1,\n(const STRUCT4 *) Var4->memberVar1,\n-1,\nVar5,&Var3) ==  Var6){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 7,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 150,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ],
    "tokenized": "STRUCT1 *Var1=NULL ; \nSTRUCT2 *Var2=NULL ; \nSTRUCT3 *Var3=NULL ; \nif (FUNC1(Var1,\n(const STRUCT4 *) Var4->memberVar1,\n-1,\nVar5,&Var3) ==  Var6){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "get_free_space_available",
    "Source": false,
    "Sink": false,
    "idx": 8,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 176,
    "label": -3,
    "slices": [
      "    if (statvfs(path, &stat) != 0) {\n",
      "        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error: %s\",\n               strerror(errno));\n"
    ],
    "tokenized": "if (FUNC1(Var1,&Var2) != 0){\nsyslog(Var3,STRING,\nstrerror(Var4)); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "get_free_space_available",
    "Source": false,
    "Sink": false,
    "idx": 9,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 176,
    "label": -3,
    "slices": [
      "    if (statvfs(path, &stat) != 0) {\n",
      "        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error: %s\",\n               strerror(errno));\n"
    ],
    "tokenized": "if (FUNC1(Var1,&Var2) != 0){\nsyslog(Var3,STRING,\nstrerror(Var4)); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 10,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 195,
    "label": -3,
    "slices": [
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "        syslog(LOG_ERR, \"file-xfer: error id %u already exists, ignoring!\",\n               msg->id);\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    if (task->file_size > free_space) {\n",
      "        udscs_write(xfers->vdagentd,\n                    VDAGENTD_FILE_XFER_STATUS,\n                    msg->id,\n                    VD_AGENT_FILE_XFER_STATUS_NOT_ENOUGH_SPACE,\n                    (uint8_t *)&free_space,\n                    sizeof(free_space));\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "    if (i == 64) {\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_hash_table_insert(xfers->xfers, GUINT_TO_POINTER(msg->id), task);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA, NULL, 0);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_ERROR, NULL, 0);\n"
    ],
    "tokenized": "STRUCT1 *Var1)\nSTRUCT2 *Var2; \nchar *Var3=NULL ,*Var4=NULL ,*Var5=NULL ; \nint  Var6; \nuint64_t  Var7; \nif (FUNC1(Var8->memberVar1,FUNC2(Var1->memberVar1))){\nsyslog(Var9,STRING,\nVar1->memberVar1); \nVar2=FUNC3(Var1); \nif (Var2 == NULL ){\nif (Var2->memberVar1>Var7){\nFUNC4(memberVar1->memberVar2,\nVar10,\nVar1->memberVar1,\nVar11,\n(uint8_t *)&Var7,\nsizeof (Var7)); \nif (FUNC5(Var3,Var12) == -1){\nint  Var13=Var14 != NULL  Var14-Var5 strlen(Var5); \nif (Var6 == 64){\nif (Var2->STRUCT3 == -1){\nif (FUNC6(Var2->memberVar2,Var2->memberVar1)<0){\nFUNC7(memberVar1->memberVar1,FUNC2(Var1->memberVar1),Var2); \nFUNC4(memberVar1->memberVar2,Var10,\nVar1->memberVar1,Var15,NULL ,0); \nFUNC4(memberVar1->memberVar2,Var10,\nVar1->memberVar1,Var16,NULL ,0); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 11,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 219,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    free_space = get_free_space_available(xfers->save_dir);\n",
      "    if (task->file_size > free_space) {\n",
      "        gchar *free_space_str, *file_size_str;\n",
      "        free_space_str = g_format_size(free_space);\n",
      "        file_size_str = g_format_size(task->file_size);\n",
      "        syslog(LOG_ERR, \"file-xfer: not enough free space (%s to copy, %s free)\",\n               file_size_str, free_space_str);\n",
      "        g_free(free_space_str);\n",
      "        g_free(file_size_str);\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nuint64_t  Var7; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar7=FUNC5(memberVar1->memberVar3); \nif (Var3->memberVar2>Var7){\nSTRUCT4 *Var8,*Var9; \nVar8=FUNC6(Var7); \nVar9=FUNC6(Var3->memberVar2); \nsyslog(Var10,STRING,\nVar9,Var8); \nFUNC7(Var8); \nFUNC7(Var9); \nint  Var11=Var12 != NULL  Var12-Var6 strlen(Var6); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 12,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 238,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(dir);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Failed to create dir %s\", dir);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "    if (i == 64) {\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(dir);\n",
      "    g_free(dir);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nFUNC6(Var4); \nVar4=FUNC7(Var6); \nif (FUNC8(Var4,Var9) == -1){\nsyslog(Var10,STRING,Var4); \nchar *Var11=strrchr(Var6,.); \nint  Var12=Var11 != NULL  Var11-Var6 strlen(Var6); \nif (Var7 == 64){\nif (Var3->STRUCT4 == -1){\nif (FUNC9(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC6(Var4); \nFUNC6(Var4); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 13,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strrchr",
    "line": 245,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(file_path);\n",
      "    g_free(file_path);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nFUNC6(Var6); \nVar4=FUNC7(Var6); \nif (FUNC8(Var4,Var9) == -1){\nVar5=FUNC9(Var6); \nfor (Var7=0; Var7<64&&(FUNC10(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nFUNC6(Var5); \nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC11(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nsyslog(Var16,STRING,\nVar6); \nVar3->memberVar4=open(Var5,Var17|Var18,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var16,STRING,\nVar5,strerror(Var11)); \nif (FUNC12(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC6(Var6); \nFUNC6(Var6); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 14,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 246,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    g_return_if_fail(xfers != NULL);\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA, NULL, 0);\n",
      "    g_free(file_path);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_ERROR, NULL, 0);\n",
      "    g_free(file_path);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nFUNC2(Var1 != NULL ); \nif (FUNC3(Var1->memberVar1,FUNC4(Var2->memberVar1))){\nVar3=FUNC5(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC6(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nFUNC7(Var6); \nVar4=FUNC8(Var6); \nif (FUNC9(Var4,Var9) == -1){\nVar5=FUNC10(Var6); \nfor (Var7=0; Var7<64&&(FUNC11(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nFUNC7(Var5); \nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC12(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nsyslog(Var16,STRING,\nVar6); \nVar3->memberVar4=open(Var5,Var17|Var18,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var16,STRING,\nVar5,strerror(Var11)); \nif (FUNC13(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC14(memberVar1->memberVar4,Var19,\nVar2->memberVar1,Var20,NULL ,0); \nFUNC7(Var6); \nFUNC14(memberVar1->memberVar4,Var19,\nVar2->memberVar1,Var21,NULL ,0); \nFUNC7(Var6); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 15,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 253,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(file_path);\n",
      "    g_free(file_path);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nFUNC6(Var6); \nVar4=FUNC7(Var6); \nif (FUNC8(Var4,Var9) == -1){\nVar5=FUNC9(Var6); \nfor (Var7=0; Var7<64&&(FUNC10(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC11(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nif (Var7 == 64){\nsyslog(Var16,STRING,\nVar6); \nif (Var3->STRUCT4 == -1){\nif (FUNC12(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC6(Var6); \nFUNC6(Var6); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 16,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "open",
    "line": 258,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        gchar *free_space_str, *file_size_str;\n",
      "        file_size_str = g_format_size(task->file_size);\n",
      "        vdagent_file_xfer_task_free(task);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    g_free(task->file_name);\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_hash_table_insert(xfers->xfers, GUINT_TO_POINTER(msg->id), task);\n",
      "    if (task)\n",
      "        vdagent_file_xfer_task_free(task);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nSTRUCT4 *Var9,*Var10; \nVar10=FUNC6(Var3->memberVar3); \nFUNC7(Var3); \nif (FUNC8(Var4,Var11) == -1){\nVar5=FUNC9(Var6); \nfor (Var7=0; Var7<64&&(FUNC10(Var5,&Var12) == 0||Var13 !=  Var14); Var7  Var15){\nFUNC11(Var5); \nchar *Var16=strrchr(Var6,.); \nint  Var17=Var16 != NULL  Var16-Var6 strlen(Var6); \nVar5=FUNC12(STRING,Var17,Var6,\nVar7+1,Var16  Var16 STRING); \nFUNC11(Var3->memberVar2); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nVar3->memberVar4=open(Var5,Var18|Var19,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var20,STRING,\nVar5,strerror(Var13)); \nif (FUNC13(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC14(memberVar1->memberVar1,FUNC3(Var2->memberVar1),Var3); \nif (Var3)\nFUNC7(Var3); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 17,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 260,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nif (FUNC6(Var4,Var9) == -1){\nVar5=FUNC7(Var6); \nfor (Var7=0; Var7<64&&(FUNC8(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nFUNC9(Var5); \nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC10(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nVar3->memberVar4=open(Var5,Var16|Var17,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var18,STRING,\nVar5,strerror(Var11)); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 18,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 260,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nif (FUNC6(Var4,Var9) == -1){\nVar5=FUNC7(Var6); \nfor (Var7=0; Var7<64&&(FUNC8(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nFUNC9(Var5); \nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC10(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nVar3->memberVar4=open(Var5,Var16|Var17,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var18,STRING,\nVar5,strerror(Var11)); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_status",
    "Source": false,
    "Sink": false,
    "idx": 19,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 305,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_status(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStatusMessage *msg)\n",
      "    VDAgentFileXferStatusMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    switch (msg->result) {\n",
      "        syslog(LOG_ERR, \"file-xfer: task %u %s received unexpected 0 response\",\n               task->id, task->file_name);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nswitch (Var2->memberVar2){\nsyslog(Var4,STRING,\nVar3->memberVar1,Var3->memberVar2); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 20,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "write",
    "line": 326,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    GError *error = NULL;\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n",
      "    if (status != -1) {\n",
      "        udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                    msg->id, status, NULL, 0);\n",
      "        g_hash_table_remove(xfers->xfers, GUINT_TO_POINTER(msg->id));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nif (Var1->memberVar2&&\nVar3->memberVar6 ==  Var3->memberVar7&&\nFUNC3(Var1->memberVar3) == 1){\nSTRUCT5 *Var7=NULL ; \nSTRUCT6 *Var8[]={STRING,memberVar3->memberVar4,NULL }; \nelse \nsyslog(Var9,STRING,Var3->memberVar5,\nstrerror(Var10)); \nif (Var5 != -1){\nFUNC4(memberVar3->memberVar5,Var11,\nVar2->memberVar1,Var5,NULL ,0); \nFUNC5(memberVar3->memberVar3,FUNC6(Var2->memberVar1)); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 21,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 332,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nif (Var1->memberVar2&&\nVar3->memberVar6 ==  Var3->memberVar7&&\nFUNC3(Var1->memberVar3) == 1){\nSTRUCT5 *Var7[]={STRING,memberVar3->memberVar4,NULL }; \nelse \nsyslog(Var8,STRING,Var3->memberVar5,\nstrerror(Var9)); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 22,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "close",
    "line": 334,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nif (Var1->memberVar2&&\nVar3->memberVar6 ==  Var3->memberVar7&&\nFUNC3(Var1->memberVar3) == 1){\nSTRUCT5 *Var7[]={STRING,memberVar3->memberVar4,NULL }; \nelse \nsyslog(Var8,STRING,Var3->memberVar5,\nstrerror(Var9)); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 23,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 344,
    "label": -3,
    "slices": [
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    GError *error = NULL;\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "                    if (!g_spawn_async(NULL, argv, NULL,\n                                           G_SPAWN_SEARCH_PATH,\n                                           NULL, NULL, NULL, &error)) {\n",
      "                        syslog(LOG_WARNING,\n                               \"file-xfer: failed to open save directory: %s\",\n                               error->message);\n",
      "                        g_error_free(error);\n"
    ],
    "tokenized": "STRUCT1 *Var1; \nint  Var2,Var3=-1; \nif (!Var1)\nif (Var2 ==  Var4->size ){\nif (Var1->memberVar1 >=  Var1->memberVar2){\nif (Var1->memberVar1 ==  Var1->memberVar2){\nif (Var5->memberVar1&&\nVar1->memberVar3 ==  Var1->memberVar4&&\nFUNC1(Var5->memberVar2) == 1){\nSTRUCT2 *Var6=NULL ; \nSTRUCT3 *Var7[]={STRING,memberVar2->memberVar3,NULL }; \nif (!FUNC2(NULL ,Var7,NULL ,\nVar8,\nNULL ,NULL ,NULL ,&Var6)){\nsyslog(Var9,\nSTRING,\nVar6->memberVar1); \nFUNC3(Var6); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 24,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 352,
    "label": -3,
    "slices": [
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "else\n",
      "                syslog(LOG_ERR, \"file-xfer: error received too much data\");\n"
    ],
    "tokenized": "STRUCT1 *Var1; \nint  Var2,Var3=-1; \nif (!Var1)\nif (Var2 ==  Var4->size ){\nif (Var1->memberVar1 >=  Var1->memberVar2){\nif (Var1->memberVar1 ==  Var1->memberVar2){\nelse \nsyslog(Var5,STRING); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 25,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 357,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nif (Var1->memberVar2&&\nVar3->memberVar6 ==  Var3->memberVar7&&\nFUNC3(Var1->memberVar3) == 1){\nSTRUCT5 *Var7[]={STRING,memberVar3->memberVar4,NULL }; \nelse \nsyslog(Var8,STRING,Var3->memberVar5,\nstrerror(Var9)); \n"
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 26,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 357,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nif (Var1->memberVar2&&\nVar3->memberVar6 ==  Var3->memberVar7&&\nFUNC3(Var1->memberVar3) == 1){\nSTRUCT5 *Var7[]={STRING,memberVar3->memberVar4,NULL }; \nelse \nsyslog(Var8,STRING,Var3->memberVar5,\nstrerror(Var9)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 27,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 69,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ],
    "tokenized": "static void FUNC1(STRUCT1  Var1)\nSTRUCT2 *Var2=Var1; \nFUNC2(Var2 != NULL ); \nif (Var2->memberVar1>0){\nsyslog(Var3,STRING,\nVar2->memberVar2,Var2->memberVar3); \nclose(Var2->memberVar1); \nelse \n}else if (Var2->memberVar4)\nsyslog(Var4,STRING,\nVar2->memberVar2,Var2->memberVar3); \nFUNC3(Var2->memberVar3); \nFUNC3(Var2); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 28,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "close",
    "line": 71,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ],
    "tokenized": "static void FUNC1(STRUCT1  Var1)\nSTRUCT2 *Var2=Var1; \nFUNC2(Var2 != NULL ); \nif (Var2->memberVar1>0){\nsyslog(Var3,STRING,\nVar2->memberVar2,Var2->memberVar3); \nclose(Var2->memberVar1); \nelse \n}else if (Var2->memberVar4)\nsyslog(Var4,STRING,\nVar2->memberVar2,Var2->memberVar3); \nFUNC3(Var2->memberVar3); \nFUNC3(Var2); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 29,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "unlink",
    "line": 72,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ],
    "tokenized": "static void FUNC1(STRUCT1  Var1)\nSTRUCT2 *Var2=Var1; \nFUNC2(Var2 != NULL ); \nif (Var2->memberVar1>0){\nsyslog(Var3,STRING,\nVar2->memberVar2,Var2->memberVar3); \nclose(Var2->memberVar1); \nelse \n}else if (Var2->memberVar4)\nsyslog(Var4,STRING,\nVar2->memberVar2,Var2->memberVar3); \nFUNC3(Var2->memberVar3); \nFUNC3(Var2); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 30,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 74,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ],
    "tokenized": "static void FUNC1(STRUCT1  Var1)\nSTRUCT2 *Var2=Var1; \nFUNC2(Var2 != NULL ); \nif (Var2->memberVar1>0){\nsyslog(Var3,STRING,\nVar2->memberVar2,Var2->memberVar3); \nclose(Var2->memberVar1); \nelse \n}else if (Var2->memberVar4)\nsyslog(Var4,STRING,\nVar2->memberVar2,Var2->memberVar3); \nFUNC3(Var2->memberVar3); \nFUNC3(Var2); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_get_task",
    "Source": false,
    "Sink": false,
    "idx": 31,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 116,
    "label": -3,
    "slices": [
      "    struct vdagent_file_xfers *xfers, uint32_t id)\n",
      "    AgentFileXferTask *task;\n",
      "    task = g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(id));\n",
      "    if (task == NULL)\n",
      "        syslog(LOG_ERR, \"file-xfer: error cannot find task %u\", id);\n"
    ],
    "tokenized": "struct STRUCT1 *Var1,uint32_t  Var2)\nSTRUCT2 *Var3; \nVar3=FUNC1(Var1->memberVar1,FUNC2(Var2)); \nif (Var3 == NULL )\nsyslog(Var4,STRING,Var2); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 32,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 134,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ],
    "tokenized": "STRUCT1 *Var1=NULL ; \nSTRUCT2 *Var2=NULL ; \nSTRUCT3 *Var3=NULL ; \nif (FUNC1(Var1,\n(const STRUCT4 *) Var4->memberVar1,\n-1,\nVar5,&Var3) ==  Var6){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 33,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 143,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ],
    "tokenized": "STRUCT1 *Var1=NULL ; \nSTRUCT2 *Var2=NULL ; \nSTRUCT3 *Var3=NULL ; \nif (FUNC1(Var1,\n(const STRUCT4 *) Var4->memberVar1,\n-1,\nVar5,&Var3) ==  Var6){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 34,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 150,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ],
    "tokenized": "STRUCT1 *Var1=NULL ; \nSTRUCT2 *Var2=NULL ; \nSTRUCT3 *Var3=NULL ; \nif (FUNC1(Var1,\n(const STRUCT4 *) Var4->memberVar1,\n-1,\nVar5,&Var3) ==  Var6){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \nif (Var3){\nsyslog(Var7,STRING,\nVar3->memberVar1); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "get_free_space_available",
    "Source": false,
    "Sink": false,
    "idx": 35,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 176,
    "label": -3,
    "slices": [
      "    if (statvfs(path, &stat) != 0) {\n",
      "        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error: %s\",\n               strerror(errno));\n"
    ],
    "tokenized": "if (FUNC1(Var1,&Var2) != 0){\nsyslog(Var3,STRING,\nstrerror(Var4)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "get_free_space_available",
    "Source": false,
    "Sink": false,
    "idx": 36,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 176,
    "label": -3,
    "slices": [
      "    if (statvfs(path, &stat) != 0) {\n",
      "        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error: %s\",\n               strerror(errno));\n"
    ],
    "tokenized": "if (FUNC1(Var1,&Var2) != 0){\nsyslog(Var3,STRING,\nstrerror(Var4)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 37,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 195,
    "label": -3,
    "slices": [
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "        syslog(LOG_ERR, \"file-xfer: error id %u already exists, ignoring!\",\n               msg->id);\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    if (task->file_size > free_space) {\n",
      "        udscs_write(xfers->vdagentd,\n                    VDAGENTD_FILE_XFER_STATUS,\n                    msg->id,\n                    VD_AGENT_FILE_XFER_STATUS_NOT_ENOUGH_SPACE,\n                    (uint8_t *)&free_space,\n                    sizeof(free_space));\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "    if (i == 64) {\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_hash_table_insert(xfers->xfers, GUINT_TO_POINTER(msg->id), task);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA, NULL, 0);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_ERROR, NULL, 0);\n"
    ],
    "tokenized": "STRUCT1 *Var1)\nSTRUCT2 *Var2; \nchar *Var3=NULL ,*Var4=NULL ,*Var5=NULL ; \nint  Var6; \nuint64_t  Var7; \nif (FUNC1(Var8->memberVar1,FUNC2(Var1->memberVar1))){\nsyslog(Var9,STRING,\nVar1->memberVar1); \nVar2=FUNC3(Var1); \nif (Var2 == NULL ){\nif (Var2->memberVar1>Var7){\nFUNC4(memberVar1->memberVar2,\nVar10,\nVar1->memberVar1,\nVar11,\n(uint8_t *)&Var7,\nsizeof (Var7)); \nif (FUNC5(Var3,Var12) == -1){\nint  Var13=Var14 != NULL  Var14-Var5 strlen(Var5); \nif (Var6 == 64){\nif (Var2->STRUCT3 == -1){\nif (FUNC6(Var2->memberVar2,Var2->memberVar1)<0){\nFUNC7(memberVar1->memberVar1,FUNC2(Var1->memberVar1),Var2); \nFUNC4(memberVar1->memberVar2,Var10,\nVar1->memberVar1,Var15,NULL ,0); \nFUNC4(memberVar1->memberVar2,Var10,\nVar1->memberVar1,Var16,NULL ,0); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 38,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 219,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    free_space = get_free_space_available(xfers->save_dir);\n",
      "    if (task->file_size > free_space) {\n",
      "        gchar *free_space_str, *file_size_str;\n",
      "        free_space_str = g_format_size(free_space);\n",
      "        file_size_str = g_format_size(task->file_size);\n",
      "        syslog(LOG_ERR, \"file-xfer: not enough free space (%s to copy, %s free)\",\n               file_size_str, free_space_str);\n",
      "        g_free(free_space_str);\n",
      "        g_free(file_size_str);\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nuint64_t  Var7; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar7=FUNC5(memberVar1->memberVar3); \nif (Var3->memberVar2>Var7){\nSTRUCT4 *Var8,*Var9; \nVar8=FUNC6(Var7); \nVar9=FUNC6(Var3->memberVar2); \nsyslog(Var10,STRING,\nVar9,Var8); \nFUNC7(Var8); \nFUNC7(Var9); \nint  Var11=Var12 != NULL  Var12-Var6 strlen(Var6); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 39,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 238,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(dir);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Failed to create dir %s\", dir);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "    if (i == 64) {\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(dir);\n",
      "    g_free(dir);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nFUNC6(Var4); \nVar4=FUNC7(Var6); \nif (FUNC8(Var4,Var9) == -1){\nsyslog(Var10,STRING,Var4); \nchar *Var11=strrchr(Var6,.); \nint  Var12=Var11 != NULL  Var11-Var6 strlen(Var6); \nif (Var7 == 64){\nif (Var3->STRUCT4 == -1){\nif (FUNC9(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC6(Var4); \nFUNC6(Var4); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 40,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strrchr",
    "line": 245,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(file_path);\n",
      "    g_free(file_path);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nFUNC6(Var6); \nVar4=FUNC7(Var6); \nif (FUNC8(Var4,Var9) == -1){\nVar5=FUNC9(Var6); \nfor (Var7=0; Var7<64&&(FUNC10(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nFUNC6(Var5); \nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC11(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nsyslog(Var16,STRING,\nVar6); \nVar3->memberVar4=open(Var5,Var17|Var18,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var16,STRING,\nVar5,strerror(Var11)); \nif (FUNC12(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC6(Var6); \nFUNC6(Var6); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 41,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 246,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    g_return_if_fail(xfers != NULL);\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA, NULL, 0);\n",
      "    g_free(file_path);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_ERROR, NULL, 0);\n",
      "    g_free(file_path);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nFUNC2(Var1 != NULL ); \nif (FUNC3(Var1->memberVar1,FUNC4(Var2->memberVar1))){\nVar3=FUNC5(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC6(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nFUNC7(Var6); \nVar4=FUNC8(Var6); \nif (FUNC9(Var4,Var9) == -1){\nVar5=FUNC10(Var6); \nfor (Var7=0; Var7<64&&(FUNC11(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nFUNC7(Var5); \nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC12(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nsyslog(Var16,STRING,\nVar6); \nVar3->memberVar4=open(Var5,Var17|Var18,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var16,STRING,\nVar5,strerror(Var11)); \nif (FUNC13(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC14(memberVar1->memberVar4,Var19,\nVar2->memberVar1,Var20,NULL ,0); \nFUNC7(Var6); \nFUNC14(memberVar1->memberVar4,Var19,\nVar2->memberVar1,Var21,NULL ,0); \nFUNC7(Var6); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 42,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 253,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(file_path);\n",
      "    g_free(file_path);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nFUNC6(Var6); \nVar4=FUNC7(Var6); \nif (FUNC8(Var4,Var9) == -1){\nVar5=FUNC9(Var6); \nfor (Var7=0; Var7<64&&(FUNC10(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC11(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nif (Var7 == 64){\nsyslog(Var16,STRING,\nVar6); \nif (Var3->STRUCT4 == -1){\nif (FUNC12(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC6(Var6); \nFUNC6(Var6); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 43,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "open",
    "line": 258,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        gchar *free_space_str, *file_size_str;\n",
      "        file_size_str = g_format_size(task->file_size);\n",
      "        vdagent_file_xfer_task_free(task);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    g_free(task->file_name);\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_hash_table_insert(xfers->xfers, GUINT_TO_POINTER(msg->id), task);\n",
      "    if (task)\n",
      "        vdagent_file_xfer_task_free(task);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nSTRUCT4 *Var9,*Var10; \nVar10=FUNC6(Var3->memberVar3); \nFUNC7(Var3); \nif (FUNC8(Var4,Var11) == -1){\nVar5=FUNC9(Var6); \nfor (Var7=0; Var7<64&&(FUNC10(Var5,&Var12) == 0||Var13 !=  Var14); Var7  Var15){\nFUNC11(Var5); \nchar *Var16=strrchr(Var6,.); \nint  Var17=Var16 != NULL  Var16-Var6 strlen(Var6); \nVar5=FUNC12(STRING,Var17,Var6,\nVar7+1,Var16  Var16 STRING); \nFUNC11(Var3->memberVar2); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nVar3->memberVar4=open(Var5,Var18|Var19,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var20,STRING,\nVar5,strerror(Var13)); \nif (FUNC13(Var3->memberVar4,Var3->memberVar3)<0){\nFUNC14(memberVar1->memberVar1,FUNC3(Var2->memberVar1),Var3); \nif (Var3)\nFUNC7(Var3); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 44,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 260,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nif (FUNC6(Var4,Var9) == -1){\nVar5=FUNC7(Var6); \nfor (Var7=0; Var7<64&&(FUNC8(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nFUNC9(Var5); \nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC10(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nVar3->memberVar4=open(Var5,Var16|Var17,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var18,STRING,\nVar5,strerror(Var11)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 45,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 260,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nchar *Var4=NULL ,*Var5=NULL ,*Var6=NULL ; \nint  Var7; \nuint64_t  Var8; \nif (FUNC2(Var1->memberVar1,FUNC3(Var2->memberVar1))){\nVar3=FUNC4(Var2); \nif (Var3 == NULL ){\nVar3->memberVar1=memberVar1->memberVar2; \nVar6=FUNC5(memberVar1->memberVar3,Var3->memberVar2,NULL ); \nif (Var3->memberVar3>Var8){\nif (FUNC6(Var4,Var9) == -1){\nVar5=FUNC7(Var6); \nfor (Var7=0; Var7<64&&(FUNC8(Var5,&Var10) == 0||Var11 !=  Var12); Var7  Var13){\nFUNC9(Var5); \nchar *Var14=strrchr(Var6,.); \nint  Var15=Var14 != NULL  Var14-Var6 strlen(Var6); \nVar5=FUNC10(STRING,Var15,Var6,\nVar7+1,Var14  Var14 STRING); \nVar3->memberVar2=Var5; \nif (Var7 == 64){\nVar3->memberVar4=open(Var5,Var16|Var17,0644); \nif (Var3->memberVar4 == -1){\nsyslog(Var18,STRING,\nVar5,strerror(Var11)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_status",
    "Source": false,
    "Sink": false,
    "idx": 46,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 305,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_status(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStatusMessage *msg)\n",
      "    VDAgentFileXferStatusMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    switch (msg->result) {\n",
      "        syslog(LOG_ERR, \"file-xfer: task %u %s received unexpected 0 response\",\n               task->id, task->file_name);\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nswitch (Var2->memberVar2){\nsyslog(Var4,STRING,\nVar3->memberVar1,Var3->memberVar2); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 47,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "write",
    "line": 326,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n",
      "    if (status != -1) {\n",
      "        udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                    msg->id, status, NULL, 0);\n",
      "        g_hash_table_remove(xfers->xfers, GUINT_TO_POINTER(msg->id));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nelse \nsyslog(Var7,STRING,Var3->memberVar5,\nstrerror(Var8)); \nif (Var5 != -1){\nFUNC3(Var1->memberVar2,Var9,\nVar2->memberVar1,Var5,NULL ,0); \nFUNC4(Var1->memberVar3,FUNC5(Var2->memberVar1)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 48,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 332,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nelse \nsyslog(Var7,STRING,Var3->memberVar5,\nstrerror(Var8)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 49,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "close",
    "line": 334,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nelse \nsyslog(Var7,STRING,Var3->memberVar5,\nstrerror(Var8)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 50,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "snprintf",
    "line": 340,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    g_return_if_fail(xfers != NULL);\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    char buf[PATH_MAX];\n",
      "                    snprintf(buf, PATH_MAX, \"xdg-open '%s'&\", xfers->save_dir);\n",
      "                    status = system(buf);\n",
      "    if (status != -1) {\n",
      "        udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                    msg->id, status, NULL, 0);\n",
      "        g_hash_table_remove(xfers->xfers, GUINT_TO_POINTER(msg->id));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nFUNC2(Var1 != NULL ); \nVar3=FUNC3(Var1,Var2->memberVar1); \nif (!Var3)\nif (Var4 ==  Var2->size ){\nif (Var3->memberVar1 >=  Var3->memberVar2){\nif (Var3->memberVar1 ==  Var3->memberVar2){\nif (Var1->memberVar1&&\nVar3->memberVar3 ==  Var3->memberVar4&&\nFUNC4(Var1->memberVar2) == 1){\nchar  Var6[Var7]; \nsnprintf(Var6,Var7,STRING,memberVar2->memberVar3); \nVar5=system(Var6); \nif (Var5 != -1){\nFUNC5(memberVar2->memberVar4,Var8,\nVar2->memberVar1,Var5,NULL ,0); \nFUNC6(memberVar2->memberVar2,FUNC7(Var2->memberVar1)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 51,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "system",
    "line": 341,
    "label": -3,
    "slices": [
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    char buf[PATH_MAX];\n",
      "                    snprintf(buf, PATH_MAX, \"xdg-open '%s'&\", xfers->save_dir);\n",
      "                    status = system(buf);\n"
    ],
    "tokenized": "STRUCT1 *Var1; \nint  Var2,Var3=-1; \nif (!Var1)\nif (Var2 ==  Var4->size ){\nif (Var1->memberVar1 >=  Var1->memberVar2){\nif (Var1->memberVar1 ==  Var1->memberVar2){\nif (Var5->memberVar1&&\nVar1->memberVar3 ==  Var1->memberVar4&&\nFUNC1(Var5->memberVar2) == 1){\nchar  Var6[Var7]; \nsnprintf(Var6,Var7,STRING,memberVar2->memberVar3); \nVar3=system(Var6); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 52,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 345,
    "label": -3,
    "slices": [
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "else\n",
      "                syslog(LOG_ERR, \"file-xfer: error received too much data\");\n"
    ],
    "tokenized": "STRUCT1 *Var1; \nint  Var2,Var3=-1; \nif (!Var1)\nif (Var2 ==  Var4->size ){\nif (Var1->memberVar1 >=  Var1->memberVar2){\nif (Var1->memberVar1 ==  Var1->memberVar2){\nelse \nsyslog(Var5,STRING); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 53,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 350,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nelse \nsyslog(Var7,STRING,Var3->memberVar5,\nstrerror(Var8)); \n"
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 54,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 350,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ],
    "tokenized": "void FUNC1(struct STRUCT1 *Var1,\nSTRUCT2 *Var2)\nSTRUCT2 *Var2)\nSTRUCT3 *Var3; \nint  Var4,Var5=-1; \nVar3=FUNC2(Var1,Var2->memberVar1); \nif (!Var3)\nVar4=write(Var3->memberVar1,Var2->memberVar2,Var2->size ); \nif (Var4 ==  Var2->size ){\nVar3->memberVar2  STRUCT4  Var2->size ; \nif (Var3->memberVar2 >=  Var3->memberVar3){\nif (Var3->memberVar2 ==  Var3->memberVar3){\nif (Var1->memberVar1)\nsyslog(Var6,STRING,\nVar3->memberVar4,Var3->memberVar5); \nclose(Var3->memberVar1); \nVar3->memberVar1=-1; \nelse \nsyslog(Var7,STRING,Var3->memberVar5,\nstrerror(Var8)); \n"
  }
]
