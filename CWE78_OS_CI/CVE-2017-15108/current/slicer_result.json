[
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 0,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 69,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 1,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "close",
    "line": 71,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 2,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "unlink",
    "line": 72,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 3,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 74,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_get_task",
    "Source": false,
    "Sink": false,
    "idx": 4,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 116,
    "label": -3,
    "slices": [
      "    struct vdagent_file_xfers *xfers, uint32_t id)\n",
      "    AgentFileXferTask *task;\n",
      "    task = g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(id));\n",
      "    if (task == NULL)\n",
      "        syslog(LOG_ERR, \"file-xfer: error cannot find task %u\", id);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 5,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 134,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 6,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 143,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 7,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 150,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "get_free_space_available",
    "Source": false,
    "Sink": false,
    "idx": 8,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 176,
    "label": -3,
    "slices": [
      "    if (statvfs(path, &stat) != 0) {\n",
      "        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error: %s\",\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "get_free_space_available",
    "Source": false,
    "Sink": false,
    "idx": 9,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 176,
    "label": -3,
    "slices": [
      "    if (statvfs(path, &stat) != 0) {\n",
      "        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error: %s\",\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 10,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 195,
    "label": -3,
    "slices": [
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "        syslog(LOG_ERR, \"file-xfer: error id %u already exists, ignoring!\",\n               msg->id);\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    if (task->file_size > free_space) {\n",
      "        udscs_write(xfers->vdagentd,\n                    VDAGENTD_FILE_XFER_STATUS,\n                    msg->id,\n                    VD_AGENT_FILE_XFER_STATUS_NOT_ENOUGH_SPACE,\n                    (uint8_t *)&free_space,\n                    sizeof(free_space));\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "    if (i == 64) {\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_hash_table_insert(xfers->xfers, GUINT_TO_POINTER(msg->id), task);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA, NULL, 0);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_ERROR, NULL, 0);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 11,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 219,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    free_space = get_free_space_available(xfers->save_dir);\n",
      "    if (task->file_size > free_space) {\n",
      "        gchar *free_space_str, *file_size_str;\n",
      "        free_space_str = g_format_size(free_space);\n",
      "        file_size_str = g_format_size(task->file_size);\n",
      "        syslog(LOG_ERR, \"file-xfer: not enough free space (%s to copy, %s free)\",\n               file_size_str, free_space_str);\n",
      "        g_free(free_space_str);\n",
      "        g_free(file_size_str);\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 12,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 238,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(dir);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Failed to create dir %s\", dir);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "    if (i == 64) {\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(dir);\n",
      "    g_free(dir);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 13,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strrchr",
    "line": 245,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(file_path);\n",
      "    g_free(file_path);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 14,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 246,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    g_return_if_fail(xfers != NULL);\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA, NULL, 0);\n",
      "    g_free(file_path);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_ERROR, NULL, 0);\n",
      "    g_free(file_path);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 15,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 253,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(file_path);\n",
      "    g_free(file_path);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 16,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "open",
    "line": 258,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        gchar *free_space_str, *file_size_str;\n",
      "        file_size_str = g_format_size(task->file_size);\n",
      "        vdagent_file_xfer_task_free(task);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    g_free(task->file_name);\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_hash_table_insert(xfers->xfers, GUINT_TO_POINTER(msg->id), task);\n",
      "    if (task)\n",
      "        vdagent_file_xfer_task_free(task);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 17,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 260,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 18,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 260,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_status",
    "Source": false,
    "Sink": false,
    "idx": 19,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 305,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_status(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStatusMessage *msg)\n",
      "    VDAgentFileXferStatusMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    switch (msg->result) {\n",
      "        syslog(LOG_ERR, \"file-xfer: task %u %s received unexpected 0 response\",\n               task->id, task->file_name);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 20,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "write",
    "line": 326,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    GError *error = NULL;\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n",
      "    if (status != -1) {\n",
      "        udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                    msg->id, status, NULL, 0);\n",
      "        g_hash_table_remove(xfers->xfers, GUINT_TO_POINTER(msg->id));\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 21,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 332,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 22,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "close",
    "line": 334,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 23,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 344,
    "label": -3,
    "slices": [
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    GError *error = NULL;\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "                    if (!g_spawn_async(NULL, argv, NULL,\n                                           G_SPAWN_SEARCH_PATH,\n                                           NULL, NULL, NULL, &error)) {\n",
      "                        syslog(LOG_WARNING,\n                               \"file-xfer: failed to open save directory: %s\",\n                               error->message);\n",
      "                        g_error_free(error);\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 24,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 352,
    "label": -3,
    "slices": [
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "else\n",
      "                syslog(LOG_ERR, \"file-xfer: error received too much data\");\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 25,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 357,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "after_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 26,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 357,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    gchar *argv[] = { \"xdg-open\", xfers->save_dir, NULL };\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 27,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 69,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 28,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "close",
    "line": 71,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 29,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "unlink",
    "line": 72,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfer_task_free",
    "Source": false,
    "Sink": false,
    "idx": 30,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 74,
    "label": -3,
    "slices": [
      "static void vdagent_file_xfer_task_free(gpointer data)\n",
      "    AgentFileXferTask *task = data;\n",
      "    g_return_if_fail(task != NULL);\n",
      "    if (task->file_fd > 0) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Removing task %u and file %s due to error\",\n               task->id, task->file_name);\n",
      "        close(task->file_fd);\n",
      "else\n",
      "    } else if (task->debug)\n",
      "        syslog(LOG_DEBUG, \"file-xfer: Removing task %u %s\",\n               task->id, task->file_name);\n",
      "    g_free(task->file_name);\n",
      "    g_free(task);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_get_task",
    "Source": false,
    "Sink": false,
    "idx": 31,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 116,
    "label": -3,
    "slices": [
      "    struct vdagent_file_xfers *xfers, uint32_t id)\n",
      "    AgentFileXferTask *task;\n",
      "    task = g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(id));\n",
      "    if (task == NULL)\n",
      "        syslog(LOG_ERR, \"file-xfer: error cannot find task %u\", id);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 32,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 134,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 33,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 143,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_parse_start_msg",
    "Source": false,
    "Sink": false,
    "idx": 34,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 150,
    "label": -3,
    "slices": [
      "    GKeyFile *keyfile = NULL;\n",
      "    AgentFileXferTask *task = NULL;\n",
      "    GError *error = NULL;\n",
      "    if (g_key_file_load_from_data(keyfile,\n                                  (const gchar *)msg->data,\n                                  -1,\n                                  G_KEY_FILE_NONE, &error) == FALSE) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to load keyfile: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filename: %s\",\n               error->message);\n",
      "    if (error) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to parse filesize: %s\",\n               error->message);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "get_free_space_available",
    "Source": false,
    "Sink": false,
    "idx": 35,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 176,
    "label": -3,
    "slices": [
      "    if (statvfs(path, &stat) != 0) {\n",
      "        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error: %s\",\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "get_free_space_available",
    "Source": false,
    "Sink": false,
    "idx": 36,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 176,
    "label": -3,
    "slices": [
      "    if (statvfs(path, &stat) != 0) {\n",
      "        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error: %s\",\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 37,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 195,
    "label": -3,
    "slices": [
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "        syslog(LOG_ERR, \"file-xfer: error id %u already exists, ignoring!\",\n               msg->id);\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    if (task->file_size > free_space) {\n",
      "        udscs_write(xfers->vdagentd,\n                    VDAGENTD_FILE_XFER_STATUS,\n                    msg->id,\n                    VD_AGENT_FILE_XFER_STATUS_NOT_ENOUGH_SPACE,\n                    (uint8_t *)&free_space,\n                    sizeof(free_space));\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "    if (i == 64) {\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_hash_table_insert(xfers->xfers, GUINT_TO_POINTER(msg->id), task);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA, NULL, 0);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_ERROR, NULL, 0);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 38,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 219,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    free_space = get_free_space_available(xfers->save_dir);\n",
      "    if (task->file_size > free_space) {\n",
      "        gchar *free_space_str, *file_size_str;\n",
      "        free_space_str = g_format_size(free_space);\n",
      "        file_size_str = g_format_size(task->file_size);\n",
      "        syslog(LOG_ERR, \"file-xfer: not enough free space (%s to copy, %s free)\",\n               file_size_str, free_space_str);\n",
      "        g_free(free_space_str);\n",
      "        g_free(file_size_str);\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 39,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 238,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(dir);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: Failed to create dir %s\", dir);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "    if (i == 64) {\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(dir);\n",
      "    g_free(dir);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 40,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strrchr",
    "line": 245,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(file_path);\n",
      "    g_free(file_path);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 41,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 246,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    g_return_if_fail(xfers != NULL);\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_CAN_SEND_DATA, NULL, 0);\n",
      "    g_free(file_path);\n",
      "    udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                msg->id, VD_AGENT_FILE_XFER_STATUS_ERROR, NULL, 0);\n",
      "    g_free(file_path);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 42,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 253,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        g_free(file_path);\n",
      "    dir = g_path_get_dirname(file_path);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    if (i == 64) {\n",
      "        syslog(LOG_ERR, \"file-xfer: more than 63 copies of %s exist?\",\n               file_path);\n",
      "    if (task->file_fd == -1) {\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_free(file_path);\n",
      "    g_free(file_path);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 43,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "open",
    "line": 258,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "        gchar *free_space_str, *file_size_str;\n",
      "        file_size_str = g_format_size(task->file_size);\n",
      "        vdagent_file_xfer_task_free(task);\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    g_free(task->file_name);\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n",
      "    if (ftruncate(task->file_fd, task->file_size) < 0) {\n",
      "    g_hash_table_insert(xfers->xfers, GUINT_TO_POINTER(msg->id), task);\n",
      "    if (task)\n",
      "        vdagent_file_xfer_task_free(task);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 44,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 260,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_start",
    "Source": false,
    "Sink": false,
    "idx": 45,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 260,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_start(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStartMessage *msg)\n",
      "    VDAgentFileXferStartMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    char *dir = NULL, *path = NULL, *file_path = NULL;\n",
      "    int i;\n",
      "    uint64_t free_space;\n",
      "    if (g_hash_table_lookup(xfers->xfers, GUINT_TO_POINTER(msg->id))) {\n",
      "    task = vdagent_parse_start_msg(msg);\n",
      "    if (task == NULL) {\n",
      "    task->debug = xfers->debug;\n",
      "    file_path = g_build_filename(xfers->save_dir, task->file_name, NULL);\n",
      "    if (task->file_size > free_space) {\n",
      "    if (g_mkdir_with_parents(dir, S_IRWXU) == -1) {\n",
      "    path = g_strdup(file_path);\n",
      "    for (i = 0; i < 64 && (stat(path, &st) == 0 || errno != ENOENT); i++) {\n",
      "        g_free(path);\n",
      "        char *extension = strrchr(file_path, '.');\n",
      "        int basename_len = extension != NULL ? extension - file_path : strlen(file_path);\n",
      "        path = g_strdup_printf(\"%.*s (%i)%s\", basename_len, file_path,\n                               i + 1, extension ? extension : \"\");\n",
      "    task->file_name = path;\n",
      "    if (i == 64) {\n",
      "    task->file_fd = open(path, O_CREAT | O_WRONLY, 0644);\n",
      "    if (task->file_fd == -1) {\n",
      "        syslog(LOG_ERR, \"file-xfer: failed to create file %s: %s\",\n               path, strerror(errno));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_status",
    "Source": false,
    "Sink": false,
    "idx": 46,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 305,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_status(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferStatusMessage *msg)\n",
      "    VDAgentFileXferStatusMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    switch (msg->result) {\n",
      "        syslog(LOG_ERR, \"file-xfer: task %u %s received unexpected 0 response\",\n               task->id, task->file_name);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 47,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "write",
    "line": 326,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n",
      "    if (status != -1) {\n",
      "        udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                    msg->id, status, NULL, 0);\n",
      "        g_hash_table_remove(xfers->xfers, GUINT_TO_POINTER(msg->id));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 48,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 332,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 49,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "close",
    "line": 334,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 50,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "snprintf",
    "line": 340,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    g_return_if_fail(xfers != NULL);\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    char buf[PATH_MAX];\n",
      "                    snprintf(buf, PATH_MAX, \"xdg-open '%s'&\", xfers->save_dir);\n",
      "                    status = system(buf);\n",
      "    if (status != -1) {\n",
      "        udscs_write(xfers->vdagentd, VDAGENTD_FILE_XFER_STATUS,\n                    msg->id, status, NULL, 0);\n",
      "        g_hash_table_remove(xfers->xfers, GUINT_TO_POINTER(msg->id));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 51,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "system",
    "line": 341,
    "label": -3,
    "slices": [
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->open_save_dir &&\n                        task->file_xfer_nr == task->file_xfer_total &&\n                        g_hash_table_size(xfers->xfers) == 1) {\n",
      "                    char buf[PATH_MAX];\n",
      "                    snprintf(buf, PATH_MAX, \"xdg-open '%s'&\", xfers->save_dir);\n",
      "                    status = system(buf);\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 52,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 345,
    "label": -3,
    "slices": [
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    if (!task)\n",
      "    if (len == msg->size) {\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "else\n",
      "                syslog(LOG_ERR, \"file-xfer: error received too much data\");\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 53,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "syslog",
    "line": 350,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ]
  },
  {
    "FileName": "before_file-xfers.c",
    "Caller": "vdagent_file_xfers_data",
    "Source": false,
    "Sink": false,
    "idx": 54,
    "CWE-ID": "CWE-",
    "category": "CallExpression",
    "criterion": "strerror",
    "line": 350,
    "label": -3,
    "slices": [
      "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n    VDAgentFileXferDataMessage *msg)\n",
      "    VDAgentFileXferDataMessage *msg)\n",
      "    AgentFileXferTask *task;\n",
      "    int len, status = -1;\n",
      "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
      "    if (!task)\n",
      "    len = write(task->file_fd, msg->data, msg->size);\n",
      "    if (len == msg->size) {\n",
      "        task->read_bytes += msg->size;\n",
      "        if (task->read_bytes >= task->file_size) {\n",
      "            if (task->read_bytes == task->file_size) {\n",
      "                if (xfers->debug)\n",
      "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n                           task->id, task->file_name);\n",
      "                close(task->file_fd);\n",
      "                task->file_fd = -1;\n",
      "else\n",
      "        syslog(LOG_ERR, \"file-xfer: error writing %s: %s\", task->file_name,\n               strerror(errno));\n"
    ]
  }
]
