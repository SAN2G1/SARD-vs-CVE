[
    {
        "FileName": "after_file-xfers.c",
        "Caller": "vdagent_file_xfers_data",
        "Source": false,
        "Sink": false,
        "idx": 0,
        "CWE-ID": "CWE-",
        "category": "CallExpression",
        "criterion": "syslog",
        "line": 23,
        "label": -3,
        "slices": [
            "static gboolean vdagent_init_async_cb(gpointer user_data)\n",
            "{\n",
            "    VDAgent *agent = user_data;\n",
            "    GError *err = NULL;\n",
            "    agent->conn = udscs_connect(vdagentd_socket,\n",
            "                                daemon_read_complete,\n",
            "                                daemon_error_cb,\n",
            "                                debug,\n",
            "                                &err);\n",
            "}\n",
            "static void daemon_read_complete(UdscsConnection *conn,\n",
            "    struct udscs_message_header *header, uint8_t *data)\n",
            "{\n",
            "    VDAgent *agent = g_object_get_data(G_OBJECT(conn), \"agent\");\n",
            "\n",
            "    switch (header->type) {\n",
            "        ...\n",
            "        case VDAGENTD_FILE_XFER_DATA:\n",
            "        if (agent->xfers != NULL) {\n",
            "            vdagent_file_xfers_data(agent->xfers,\n",
            "                                    (VDAgentFileXferDataMessage *)data);\n",
            "        }\n",
            "}\n",
            "void vdagent_file_xfers_data(struct vdagent_file_xfers *xfers,\n",
            "    VDAgentFileXferDataMessage *msg)\n",
            "{\n",
            "    AgentFileXferTask *task;\n",
            "    int len, status = -1;\n",
            "    task = vdagent_file_xfers_get_task(xfers, msg->id);\n",
            "    len = write(task->file_fd, msg->data, msg->size);\n",
            "    if (len == msg->size) {\n",
            "        task->read_bytes += msg->size;\n",
            "        if (task->read_bytes >= task->file_size) {\n",
            "            if (task->read_bytes == task->file_size) {\n",
            "                if (xfers->debug)\n",
            "                    syslog(LOG_DEBUG, \"file-xfer: task %u %s has completed\",\n",
            "                           task->id, task->file_name);\n",
            "                close(task->file_fd);\n",
            "                task->file_fd = -1;\n",
            "                if (xfers->open_save_dir &&\n",
            "                        task->file_xfer_nr == task->file_xfer_total &&\n",
            "                        g_hash_table_size(xfers->xfers) == 1) {\n",
            "                    char buf[PATH_MAX];\n",
            "                    snprintf(buf, PATH_MAX, \"xdg-open '%s'&\", xfers->save_dir);\n",
            "                    status = system(buf);\n"
        ],
        "tokenized": "static  STRUCT1 FUNC1(STRUCT2  Var1)\n{\nSTRUCT3 *Var2=Var1; \nSTRUCT4 *Var3=NULL ; \nVar2->memberVar1=FUNC2(Var4,\nVar5,\nVar6,\nVar7,\n&Var3); \n}\nstatic void Var5(STRUCT5 *memberVar1,\nstruct STRUCT6 *Var8,uint8_t *Var9)\n{\nSTRUCT3 *Var2=FUNC3(FUNC4(memberVar1),STRING); \n\nswitch (Var8->memberVar1){\n...\ncase  Var10\nif (Var2->memberVar2 != NULL ){\nFUNC5(Var2->memberVar2,\n(STRUCT7 *) Var9); \n}\n}\nvoid FUNC5(struct STRUCT8 *memberVar2,\nSTRUCT7 *Var11)\n{\nSTRUCT9 *Var12; \nint  Var13,Var14=-1; \nVar12=FUNC6(memberVar2,Var11->memberVar1); \nVar13=write(Var12->memberVar1,Var11->memberVar2,Var11->size ); \nif (Var13 ==  Var11->size ){\nVar12->memberVar2  STRUCT10  Var11->size ; \nif (Var12->memberVar2 >=  Var12->memberVar3){\nif (Var12->memberVar2 ==  Var12->memberVar3){\nif (memberVar2->memberVar1)\nsyslog(Var15,STRING,\nVar12->memberVar4,Var12->memberVar5); \nclose(Var12->memberVar1); \nVar12->memberVar1=-1; \nif (memberVar2->memberVar2&&\nVar12->memberVar6 ==  Var12->memberVar7&&\nFUNC7(memberVar2->memberVar3) == 1){\nchar  Var16[Var17]; \nsnprintf(Var16,Var17,STRING,memberVar3->memberVar4); \nVar14=system(Var16); \n"
    }
]