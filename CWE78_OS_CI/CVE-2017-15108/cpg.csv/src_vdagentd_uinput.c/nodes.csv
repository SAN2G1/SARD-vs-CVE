command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	31187	File	data/converged/CVE-2017-15108_vd_agent/src_vdagentd_uinput.c								
ANR	31188	ClassDef	vdagentd_uinput	36:0:1094:1322							
ANR	31189	DeclStmt									
ANR	31190	Decl							const char	const char *	devname
ANR	31191	DeclStmt									
ANR	31192	Decl							int	int	fd
ANR	31193	DeclStmt									
ANR	31194	Decl							int	int	debug
ANR	31195	DeclStmt									
ANR	31196	Decl							int	int	width
ANR	31197	DeclStmt									
ANR	31198	Decl							int	int	height
ANR	31199	DeclStmt									
ANR	31200	Decl							struct vdagentd_guest_xorg_resolution	struct vdagentd_guest_xorg_resolution *	screen_info
ANR	31201	DeclStmt									
ANR	31202	Decl							int	int	screen_count
ANR	31203	DeclStmt									
ANR	31204	Decl							VDAgentMouseState	VDAgentMouseState	last
ANR	31205	DeclStmt									
ANR	31206	Decl							int	int	fake
ANR	31207	Function	vdagentd_uinput_create	48:0:1326:1941							
ANR	31208	FunctionDef	"vdagentd_uinput_create (const char * devname , int width , int height , struct vdagentd_guest_xorg_resolution * screen_info , int screen_count , int debug , int fake)"		31207	0					
ANR	31209	CompoundStatement		52:0:1520:1941	31207	0					
ANR	31210	IdentifierDeclStatement	struct vdagentd_uinput * uinput ;	53:4:1526:1556	31207	0	True				
ANR	31211	IdentifierDecl	* uinput		31207	0					
ANR	31212	IdentifierDeclType	struct vdagentd_uinput *		31207	0					
ANR	31213	Identifier	uinput		31207	1					
ANR	31214	ExpressionStatement	"uinput = calloc ( 1 , sizeof ( * uinput ) )"	55:4:1563:1598	31207	1	True				
ANR	31215	AssignmentExpression	"uinput = calloc ( 1 , sizeof ( * uinput ) )"		31207	0		=			
ANR	31216	Identifier	uinput		31207	0					
ANR	31217	CallExpression	"calloc ( 1 , sizeof ( * uinput ) )"		31207	1					
ANR	31218	Callee	calloc		31207	0					
ANR	31219	Identifier	calloc		31207	0					
ANR	31220	ArgumentList	1		31207	1					
ANR	31221	Argument	1		31207	0					
ANR	31222	PrimaryExpression	1		31207	0					
ANR	31223	Argument	sizeof ( * uinput )		31207	1					
ANR	31224	SizeofExpression	sizeof ( * uinput )		31207	0					
ANR	31225	Sizeof	sizeof		31207	0					
ANR	31226	UnaryOperationExpression	* uinput		31207	1					
ANR	31227	UnaryOperator	*		31207	0					
ANR	31228	Identifier	uinput		31207	1					
ANR	31229	IfStatement	if ( ! uinput )		31207	2					
ANR	31230	Condition	! uinput	56:8:1608:1614	31207	0	True				
ANR	31231	UnaryOperationExpression	! uinput		31207	0					
ANR	31232	UnaryOperator	!		31207	0					
ANR	31233	Identifier	uinput		31207	1					
ANR	31234	ReturnStatement	return NULL ;	57:8:1625:1636	31207	1	True				
ANR	31235	Identifier	NULL		31207	0					
ANR	31236	ExpressionStatement	uinput -> devname = devname	59:4:1643:1668	31207	3	True				
ANR	31237	AssignmentExpression	uinput -> devname = devname		31207	0		=			
ANR	31238	PtrMemberAccess	uinput -> devname		31207	0					
ANR	31239	Identifier	uinput		31207	0					
ANR	31240	Identifier	devname		31207	1					
ANR	31241	Identifier	devname		31207	1					
ANR	31242	ExpressionStatement	uinput -> fd = - 1	60:4:1674:1694	31207	4	True				
ANR	31243	AssignmentExpression	uinput -> fd = - 1		31207	0		=			
ANR	31244	PtrMemberAccess	uinput -> fd		31207	0					
ANR	31245	Identifier	uinput		31207	0					
ANR	31246	Identifier	fd		31207	1					
ANR	31247	UnaryOperationExpression	- 1		31207	1					
ANR	31248	UnaryOperator	-		31207	0					
ANR	31249	PrimaryExpression	1		31207	1					
ANR	31250	ExpressionStatement	uinput -> debug = debug	61:4:1751:1774	31207	5	True				
ANR	31251	AssignmentExpression	uinput -> debug = debug		31207	0		=			
ANR	31252	PtrMemberAccess	uinput -> debug		31207	0					
ANR	31253	Identifier	uinput		31207	0					
ANR	31254	Identifier	debug		31207	1					
ANR	31255	Identifier	debug		31207	1					
ANR	31256	ExpressionStatement	uinput -> fake = fake	62:4:1780:1802	31207	6	True				
ANR	31257	AssignmentExpression	uinput -> fake = fake		31207	0		=			
ANR	31258	PtrMemberAccess	uinput -> fake		31207	0					
ANR	31259	Identifier	uinput		31207	0					
ANR	31260	Identifier	fake		31207	1					
ANR	31261	Identifier	fake		31207	1					
ANR	31262	ExpressionStatement	"vdagentd_uinput_update_size ( & uinput , width , height , screen_info , screen_count )"	64:4:1809:1919	31207	7	True				
ANR	31263	CallExpression	"vdagentd_uinput_update_size ( & uinput , width , height , screen_info , screen_count )"		31207	0					
ANR	31264	Callee	vdagentd_uinput_update_size		31207	0					
ANR	31265	Identifier	vdagentd_uinput_update_size		31207	0					
ANR	31266	ArgumentList	& uinput		31207	1					
ANR	31267	Argument	& uinput		31207	0					
ANR	31268	UnaryOperationExpression	& uinput		31207	0					
ANR	31269	UnaryOperator	&		31207	0					
ANR	31270	Identifier	uinput		31207	1					
ANR	31271	Argument	width		31207	1					
ANR	31272	Identifier	width		31207	0					
ANR	31273	Argument	height		31207	2					
ANR	31274	Identifier	height		31207	0					
ANR	31275	Argument	screen_info		31207	3					
ANR	31276	Identifier	screen_info		31207	0					
ANR	31277	Argument	screen_count		31207	4					
ANR	31278	Identifier	screen_count		31207	0					
ANR	31279	ReturnStatement	return uinput ;	67:4:1926:1939	31207	8	True				
ANR	31280	Identifier	uinput		31207	0					
ANR	31281	ReturnType	struct vdagentd_uinput *		31207	1					
ANR	31282	Identifier	vdagentd_uinput_create		31207	2					
ANR	31283	ParameterList	"const char * devname , int width , int height , struct vdagentd_guest_xorg_resolution * screen_info , int screen_count , int debug , int fake"		31207	3					
ANR	31284	Parameter	const char * devname	48:47:1373:1391	31207	0	True				
ANR	31285	ParameterType	const char *		31207	0					
ANR	31286	Identifier	devname		31207	1					
ANR	31287	Parameter	int width	49:4:1398:1406	31207	1	True				
ANR	31288	ParameterType	int		31207	0					
ANR	31289	Identifier	width		31207	1					
ANR	31290	Parameter	int height	49:15:1409:1418	31207	2	True				
ANR	31291	ParameterType	int		31207	0					
ANR	31292	Identifier	height		31207	1					
ANR	31293	Parameter	struct vdagentd_guest_xorg_resolution * screen_info	50:4:1425:1474	31207	3	True				
ANR	31294	ParameterType	struct vdagentd_guest_xorg_resolution *		31207	0					
ANR	31295	Identifier	screen_info		31207	1					
ANR	31296	Parameter	int screen_count	50:56:1477:1492	31207	4	True				
ANR	31297	ParameterType	int		31207	0					
ANR	31298	Identifier	screen_count		31207	1					
ANR	31299	Parameter	int debug	51:4:1499:1507	31207	5	True				
ANR	31300	ParameterType	int		31207	0					
ANR	31301	Identifier	debug		31207	1					
ANR	31302	Parameter	int fake	51:15:1510:1517	31207	6	True				
ANR	31303	ParameterType	int		31207	0					
ANR	31304	Identifier	fake		31207	1					
ANR	31305	CFGEntryNode	ENTRY		31207		True				
ANR	31306	CFGExitNode	EXIT		31207		True				
ANR	31307	Symbol	debug		31207						
ANR	31308	Symbol	NULL		31207						
ANR	31309	Symbol	uinput -> devname		31207						
ANR	31310	Symbol	screen_count		31207						
ANR	31311	Symbol	screen_info		31207						
ANR	31312	Symbol	uinput -> fd		31207						
ANR	31313	Symbol	calloc		31207						
ANR	31314	Symbol	uinput -> debug		31207						
ANR	31315	Symbol	* uinput		31207						
ANR	31316	Symbol	uinput		31207						
ANR	31317	Symbol	uinput -> fake		31207						
ANR	31318	Symbol	width		31207						
ANR	31319	Symbol	& uinput		31207						
ANR	31320	Symbol	devname		31207						
ANR	31321	Symbol	fake		31207						
ANR	31322	Symbol	height		31207						
ANR	31323	Function	vdagentd_uinput_destroy	70:0:1944:2183							
ANR	31324	FunctionDef	vdagentd_uinput_destroy (struct vdagentd_uinput * * uinputp)		31323	0					
ANR	31325	CompoundStatement		71:0:2007:2183	31323	0					
ANR	31326	IdentifierDeclStatement	struct vdagentd_uinput * uinput = * uinputp ;	72:4:2013:2054	31323	0	True				
ANR	31327	IdentifierDecl	* uinput = * uinputp		31323	0					
ANR	31328	IdentifierDeclType	struct vdagentd_uinput *		31323	0					
ANR	31329	Identifier	uinput		31323	1					
ANR	31330	AssignmentExpression	* uinput = * uinputp		31323	2		=			
ANR	31331	Identifier	uinput		31323	0					
ANR	31332	UnaryOperationExpression	* uinputp		31323	1					
ANR	31333	UnaryOperator	*		31323	0					
ANR	31334	Identifier	uinputp		31323	1					
ANR	31335	IfStatement	if ( ! uinput )		31323	1					
ANR	31336	Condition	! uinput	74:8:2065:2071	31323	0	True				
ANR	31337	UnaryOperationExpression	! uinput		31323	0					
ANR	31338	UnaryOperator	!		31323	0					
ANR	31339	Identifier	uinput		31323	1					
ANR	31340	ReturnStatement	return ;	75:8:2082:2088	31323	1	True				
ANR	31341	IfStatement	if ( uinput -> fd != - 1 )		31323	2					
ANR	31342	Condition	uinput -> fd != - 1	77:8:2099:2114	31323	0	True				
ANR	31343	EqualityExpression	uinput -> fd != - 1		31323	0		!=			
ANR	31344	PtrMemberAccess	uinput -> fd		31323	0					
ANR	31345	Identifier	uinput		31323	0					
ANR	31346	Identifier	fd		31323	1					
ANR	31347	UnaryOperationExpression	- 1		31323	1					
ANR	31348	UnaryOperator	-		31323	0					
ANR	31349	PrimaryExpression	1		31323	1					
ANR	31350	ExpressionStatement	close ( uinput -> fd )	78:8:2125:2142	31323	1	True				
ANR	31351	CallExpression	close ( uinput -> fd )		31323	0					
ANR	31352	Callee	close		31323	0					
ANR	31353	Identifier	close		31323	0					
ANR	31354	ArgumentList	uinput -> fd		31323	1					
ANR	31355	Argument	uinput -> fd		31323	0					
ANR	31356	PtrMemberAccess	uinput -> fd		31323	0					
ANR	31357	Identifier	uinput		31323	0					
ANR	31358	Identifier	fd		31323	1					
ANR	31359	ExpressionStatement	free ( uinput )	79:4:2148:2160	31323	3	True				
ANR	31360	CallExpression	free ( uinput )		31323	0					
ANR	31361	Callee	free		31323	0					
ANR	31362	Identifier	free		31323	0					
ANR	31363	ArgumentList	uinput		31323	1					
ANR	31364	Argument	uinput		31323	0					
ANR	31365	Identifier	uinput		31323	0					
ANR	31366	ExpressionStatement	* uinputp = NULL	80:4:2166:2181	31323	4	True				
ANR	31367	AssignmentExpression	* uinputp = NULL		31323	0		=			
ANR	31368	UnaryOperationExpression	* uinputp		31323	0					
ANR	31369	UnaryOperator	*		31323	0					
ANR	31370	Identifier	uinputp		31323	1					
ANR	31371	Identifier	NULL		31323	1					
ANR	31372	ReturnType	void		31323	1					
ANR	31373	Identifier	vdagentd_uinput_destroy		31323	2					
ANR	31374	ParameterList	struct vdagentd_uinput * * uinputp		31323	3					
ANR	31375	Parameter	struct vdagentd_uinput * * uinputp	70:29:1973:2004	31323	0	True				
ANR	31376	ParameterType	struct vdagentd_uinput * *		31323	0					
ANR	31377	Identifier	uinputp		31323	1					
ANR	31378	CFGEntryNode	ENTRY		31323		True				
ANR	31379	CFGExitNode	EXIT		31323		True				
ANR	31380	Symbol	* uinput		31323						
ANR	31381	Symbol	uinputp		31323						
ANR	31382	Symbol	NULL		31323						
ANR	31383	Symbol	uinput		31323						
ANR	31384	Symbol	uinput -> fd		31323						
ANR	31385	Symbol	* uinputp		31323						
ANR	31386	Function	vdagentd_uinput_update_size	83:0:2186:4497							
ANR	31387	FunctionDef	"vdagentd_uinput_update_size (struct vdagentd_uinput * * uinputp , int width , int height , struct vdagentd_guest_xorg_resolution * screen_info , int screen_count)"		31386	0					
ANR	31388	CompoundStatement		87:0:2370:4497	31386	0					
ANR	31389	IdentifierDeclStatement	struct vdagentd_uinput * uinput = * uinputp ;	88:4:2376:2417	31386	0	True				
ANR	31390	IdentifierDecl	* uinput = * uinputp		31386	0					
ANR	31391	IdentifierDeclType	struct vdagentd_uinput *		31386	0					
ANR	31392	Identifier	uinput		31386	1					
ANR	31393	AssignmentExpression	* uinput = * uinputp		31386	2		=			
ANR	31394	Identifier	uinput		31386	0					
ANR	31395	UnaryOperationExpression	* uinputp		31386	1					
ANR	31396	UnaryOperator	*		31386	0					
ANR	31397	Identifier	uinputp		31386	1					
ANR	31398	Statement	struct	89:4:2423:2428	31386	1	True				
ANR	31399	Statement	uinput_user_dev	89:11:2430:2444	31386	2	True				
ANR	31400	Statement	device	89:27:2446:2451	31386	3	True				
ANR	31401	Statement	=	89:34:2453:2453	31386	4	True				
ANR	31402	CompoundStatement		3:36:84:84	31386	5					
ANR	31403	Statement	.	90:8:2465:2465	31386	0	True				
ANR	31404	Statement	name	90:9:2466:2469	31386	1	True				
ANR	31405	Statement	=	90:14:2471:2471	31386	2	True				
ANR	31406	Statement	"""spice vdagent tablet"""	90:16:2473:2494	31386	3	True				
ANR	31407	Statement	","	90:38:2495:2495	31386	4	True				
ANR	31408	Statement	.	92:8:2531:2531	31386	5	True				
ANR	31409	Statement	absmax	92:9:2532:2537	31386	6	True				
ANR	31410	Statement	[	92:17:2540:2540	31386	7	True				
ANR	31411	Statement	ABS_X	92:19:2542:2546	31386	8	True				
ANR	31412	Statement	]	92:25:2548:2548	31386	9	True				
ANR	31413	Statement	=	92:27:2550:2550	31386	10	True				
ANR	31414	Statement	32767	92:29:2552:2556	31386	11	True				
ANR	31415	Statement	","	92:34:2557:2557	31386	12	True				
ANR	31416	Statement	.	93:8:2567:2567	31386	13	True				
ANR	31417	Statement	absmax	93:9:2568:2573	31386	14	True				
ANR	31418	Statement	[	93:17:2576:2576	31386	15	True				
ANR	31419	Statement	ABS_Y	93:19:2578:2582	31386	16	True				
ANR	31420	Statement	]	93:25:2584:2584	31386	17	True				
ANR	31421	Statement	=	93:27:2586:2586	31386	18	True				
ANR	31422	Statement	32767	93:29:2588:2592	31386	19	True				
ANR	31423	Statement	","	93:34:2593:2593	31386	20	True				
ANR	31424	ExpressionStatement		98:5:2694:2694	31386	6	True				
ANR	31425	IdentifierDeclStatement	"int i , rc ;"	99:4:2700:2709	31386	7	True				
ANR	31426	IdentifierDecl	i		31386	0					
ANR	31427	IdentifierDeclType	int		31386	0					
ANR	31428	Identifier	i		31386	1					
ANR	31429	IdentifierDecl	rc		31386	1					
ANR	31430	IdentifierDeclType	int		31386	0					
ANR	31431	Identifier	rc		31386	1					
ANR	31432	IfStatement	if ( uinput -> debug )		31386	8					
ANR	31433	Condition	uinput -> debug	101:8:2720:2732	31386	0	True				
ANR	31434	PtrMemberAccess	uinput -> debug		31386	0					
ANR	31435	Identifier	uinput		31386	0					
ANR	31436	Identifier	debug		31386	1					
ANR	31437	CompoundStatement		15:23:364:364	31386	1					
ANR	31438	ExpressionStatement	"syslog ( LOG_DEBUG , ""uinput-update-size: %dx%d"" , width , height )"	102:8:2745:2806	31386	0	True				
ANR	31439	CallExpression	"syslog ( LOG_DEBUG , ""uinput-update-size: %dx%d"" , width , height )"		31386	0					
ANR	31440	Callee	syslog		31386	0					
ANR	31441	Identifier	syslog		31386	0					
ANR	31442	ArgumentList	LOG_DEBUG		31386	1					
ANR	31443	Argument	LOG_DEBUG		31386	0					
ANR	31444	Identifier	LOG_DEBUG		31386	0					
ANR	31445	Argument	"""uinput-update-size: %dx%d"""		31386	1					
ANR	31446	PrimaryExpression	"""uinput-update-size: %dx%d"""		31386	0					
ANR	31447	Argument	width		31386	2					
ANR	31448	Identifier	width		31386	0					
ANR	31449	Argument	height		31386	3					
ANR	31450	Identifier	height		31386	0					
ANR	31451	ForStatement	for ( i = 0 ; i < screen_count ; i ++ )		31386	1					
ANR	31452	ForInit	i = 0 ;	103:13:2821:2826	31386	0	True				
ANR	31453	AssignmentExpression	i = 0		31386	0		=			
ANR	31454	Identifier	i		31386	0					
ANR	31455	PrimaryExpression	0		31386	1					
ANR	31456	Condition	i < screen_count	103:20:2828:2843	31386	1	True				
ANR	31457	RelationalExpression	i < screen_count		31386	0		<			
ANR	31458	Identifier	i		31386	0					
ANR	31459	Identifier	screen_count		31386	1					
ANR	31460	PostIncDecOperationExpression	i ++	103:38:2846:2848	31386	2	True				
ANR	31461	Identifier	i		31386	0					
ANR	31462	IncDec	++		31386	1					
ANR	31463	ExpressionStatement	"syslog ( LOG_DEBUG , ""screen %d: +%d+%d"" , i , screen_info [ i ] . x , screen_info [ i ] . y )"	104:12:2863:2959	31386	3	True				
ANR	31464	CallExpression	"syslog ( LOG_DEBUG , ""screen %d: +%d+%d"" , i , screen_info [ i ] . x , screen_info [ i ] . y )"		31386	0					
ANR	31465	Callee	syslog		31386	0					
ANR	31466	Identifier	syslog		31386	0					
ANR	31467	ArgumentList	LOG_DEBUG		31386	1					
ANR	31468	Argument	LOG_DEBUG		31386	0					
ANR	31469	Identifier	LOG_DEBUG		31386	0					
ANR	31470	Argument	"""screen %d: +%d+%d"""		31386	1					
ANR	31471	PrimaryExpression	"""screen %d: +%d+%d"""		31386	0					
ANR	31472	Argument	i		31386	2					
ANR	31473	Identifier	i		31386	0					
ANR	31474	Argument	screen_info [ i ] . x		31386	3					
ANR	31475	MemberAccess	screen_info [ i ] . x		31386	0					
ANR	31476	ArrayIndexing	screen_info [ i ]		31386	0					
ANR	31477	Identifier	screen_info		31386	0					
ANR	31478	Identifier	i		31386	1					
ANR	31479	Identifier	x		31386	1					
ANR	31480	Argument	screen_info [ i ] . y		31386	4					
ANR	31481	MemberAccess	screen_info [ i ] . y		31386	0					
ANR	31482	ArrayIndexing	screen_info [ i ]		31386	0					
ANR	31483	Identifier	screen_info		31386	0					
ANR	31484	Identifier	i		31386	1					
ANR	31485	Identifier	y		31386	1					
ANR	31486	ExpressionStatement	uinput -> screen_info = screen_info	108:4:2972:3006	31386	9	True				
ANR	31487	AssignmentExpression	uinput -> screen_info = screen_info		31386	0		=			
ANR	31488	PtrMemberAccess	uinput -> screen_info		31386	0					
ANR	31489	Identifier	uinput		31386	0					
ANR	31490	Identifier	screen_info		31386	1					
ANR	31491	Identifier	screen_info		31386	1					
ANR	31492	ExpressionStatement	uinput -> screen_count = screen_count	109:4:3012:3047	31386	10	True				
ANR	31493	AssignmentExpression	uinput -> screen_count = screen_count		31386	0		=			
ANR	31494	PtrMemberAccess	uinput -> screen_count		31386	0					
ANR	31495	Identifier	uinput		31386	0					
ANR	31496	Identifier	screen_count		31386	1					
ANR	31497	Identifier	screen_count		31386	1					
ANR	31498	IfStatement	if ( uinput -> width == width && uinput -> height == height )		31386	11					
ANR	31499	Condition	uinput -> width == width && uinput -> height == height	111:8:3058:3107	31386	0	True				
ANR	31500	AndExpression	uinput -> width == width && uinput -> height == height		31386	0		&&			
ANR	31501	EqualityExpression	uinput -> width == width		31386	0		==			
ANR	31502	PtrMemberAccess	uinput -> width		31386	0					
ANR	31503	Identifier	uinput		31386	0					
ANR	31504	Identifier	width		31386	1					
ANR	31505	Identifier	width		31386	1					
ANR	31506	EqualityExpression	uinput -> height == height		31386	1		==			
ANR	31507	PtrMemberAccess	uinput -> height		31386	0					
ANR	31508	Identifier	uinput		31386	0					
ANR	31509	Identifier	height		31386	1					
ANR	31510	Identifier	height		31386	1					
ANR	31511	ReturnStatement	return ;	112:8:3118:3124	31386	1	True				
ANR	31512	ExpressionStatement	uinput -> width = width	114:4:3131:3153	31386	12	True				
ANR	31513	AssignmentExpression	uinput -> width = width		31386	0		=			
ANR	31514	PtrMemberAccess	uinput -> width		31386	0					
ANR	31515	Identifier	uinput		31386	0					
ANR	31516	Identifier	width		31386	1					
ANR	31517	Identifier	width		31386	1					
ANR	31518	ExpressionStatement	uinput -> height = height	115:4:3159:3182	31386	13	True				
ANR	31519	AssignmentExpression	uinput -> height = height		31386	0		=			
ANR	31520	PtrMemberAccess	uinput -> height		31386	0					
ANR	31521	Identifier	uinput		31386	0					
ANR	31522	Identifier	height		31386	1					
ANR	31523	Identifier	height		31386	1					
ANR	31524	IfStatement	if ( uinput -> fd != - 1 )		31386	14					
ANR	31525	Condition	uinput -> fd != - 1	117:8:3193:3208	31386	0	True				
ANR	31526	EqualityExpression	uinput -> fd != - 1		31386	0		!=			
ANR	31527	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31528	Identifier	uinput		31386	0					
ANR	31529	Identifier	fd		31386	1					
ANR	31530	UnaryOperationExpression	- 1		31386	1					
ANR	31531	UnaryOperator	-		31386	0					
ANR	31532	PrimaryExpression	1		31386	1					
ANR	31533	ExpressionStatement	close ( uinput -> fd )	119:8:3246:3263	31386	1	True				
ANR	31534	CallExpression	close ( uinput -> fd )		31386	0					
ANR	31535	Callee	close		31386	0					
ANR	31536	Identifier	close		31386	0					
ANR	31537	ArgumentList	uinput -> fd		31386	1					
ANR	31538	Argument	uinput -> fd		31386	0					
ANR	31539	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31540	Identifier	uinput		31386	0					
ANR	31541	Identifier	fd		31386	1					
ANR	31542	ExpressionStatement	"uinput -> fd = open ( uinput -> devname , uinput -> fake ? O_WRONLY : O_RDWR )"	124:4:3299:3367	31386	15	True				
ANR	31543	AssignmentExpression	"uinput -> fd = open ( uinput -> devname , uinput -> fake ? O_WRONLY : O_RDWR )"		31386	0		=			
ANR	31544	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31545	Identifier	uinput		31386	0					
ANR	31546	Identifier	fd		31386	1					
ANR	31547	CallExpression	"open ( uinput -> devname , uinput -> fake ? O_WRONLY : O_RDWR )"		31386	1					
ANR	31548	Callee	open		31386	0					
ANR	31549	Identifier	open		31386	0					
ANR	31550	ArgumentList	uinput -> devname		31386	1					
ANR	31551	Argument	uinput -> devname		31386	0					
ANR	31552	PtrMemberAccess	uinput -> devname		31386	0					
ANR	31553	Identifier	uinput		31386	0					
ANR	31554	Identifier	devname		31386	1					
ANR	31555	Argument	uinput -> fake ? O_WRONLY : O_RDWR		31386	1					
ANR	31556	ConditionalExpression	uinput -> fake ? O_WRONLY : O_RDWR		31386	0					
ANR	31557	Condition	uinput -> fake		31386	0					
ANR	31558	PtrMemberAccess	uinput -> fake		31386	0					
ANR	31559	Identifier	uinput		31386	0					
ANR	31560	Identifier	fake		31386	1					
ANR	31561	Identifier	O_WRONLY		31386	1					
ANR	31562	Identifier	O_RDWR		31386	2					
ANR	31563	IfStatement	if ( uinput -> fd == - 1 )		31386	16					
ANR	31564	Condition	uinput -> fd == - 1	125:8:3377:3392	31386	0	True				
ANR	31565	EqualityExpression	uinput -> fd == - 1		31386	0		==			
ANR	31566	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31567	Identifier	uinput		31386	0					
ANR	31568	Identifier	fd		31386	1					
ANR	31569	UnaryOperationExpression	- 1		31386	1					
ANR	31570	UnaryOperator	-		31386	0					
ANR	31571	PrimaryExpression	1		31386	1					
ANR	31572	CompoundStatement		39:26:1024:1024	31386	1					
ANR	31573	ExpressionStatement	"syslog ( LOG_ERR , ""open %s: %m"" , uinput -> devname )"	126:8:3405:3452	31386	0	True				
ANR	31574	CallExpression	"syslog ( LOG_ERR , ""open %s: %m"" , uinput -> devname )"		31386	0					
ANR	31575	Callee	syslog		31386	0					
ANR	31576	Identifier	syslog		31386	0					
ANR	31577	ArgumentList	LOG_ERR		31386	1					
ANR	31578	Argument	LOG_ERR		31386	0					
ANR	31579	Identifier	LOG_ERR		31386	0					
ANR	31580	Argument	"""open %s: %m"""		31386	1					
ANR	31581	PrimaryExpression	"""open %s: %m"""		31386	0					
ANR	31582	Argument	uinput -> devname		31386	2					
ANR	31583	PtrMemberAccess	uinput -> devname		31386	0					
ANR	31584	Identifier	uinput		31386	0					
ANR	31585	Identifier	devname		31386	1					
ANR	31586	ExpressionStatement	vdagentd_uinput_destroy ( uinputp )	127:8:3462:3494	31386	1	True				
ANR	31587	CallExpression	vdagentd_uinput_destroy ( uinputp )		31386	0					
ANR	31588	Callee	vdagentd_uinput_destroy		31386	0					
ANR	31589	Identifier	vdagentd_uinput_destroy		31386	0					
ANR	31590	ArgumentList	uinputp		31386	1					
ANR	31591	Argument	uinputp		31386	0					
ANR	31592	Identifier	uinputp		31386	0					
ANR	31593	ReturnStatement	return ;	128:8:3504:3510	31386	2	True				
ANR	31594	IfStatement	if ( uinput -> fake )		31386	17					
ANR	31595	Condition	uinput -> fake	131:8:3527:3538	31386	0	True				
ANR	31596	PtrMemberAccess	uinput -> fake		31386	0					
ANR	31597	Identifier	uinput		31386	0					
ANR	31598	Identifier	fake		31386	1					
ANR	31599	CompoundStatement		45:22:1170:1170	31386	1					
ANR	31600	ReturnStatement	return ;	133:8:3630:3636	31386	0	True				
ANR	31601	ExpressionStatement	"rc = write ( uinput -> fd , & device , sizeof ( device ) )"	136:4:3649:3696	31386	18	True				
ANR	31602	AssignmentExpression	"rc = write ( uinput -> fd , & device , sizeof ( device ) )"		31386	0		=			
ANR	31603	Identifier	rc		31386	0					
ANR	31604	CallExpression	"write ( uinput -> fd , & device , sizeof ( device ) )"		31386	1					
ANR	31605	Callee	write		31386	0					
ANR	31606	Identifier	write		31386	0					
ANR	31607	ArgumentList	uinput -> fd		31386	1					
ANR	31608	Argument	uinput -> fd		31386	0					
ANR	31609	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31610	Identifier	uinput		31386	0					
ANR	31611	Identifier	fd		31386	1					
ANR	31612	Argument	& device		31386	1					
ANR	31613	UnaryOperationExpression	& device		31386	0					
ANR	31614	UnaryOperator	&		31386	0					
ANR	31615	Identifier	device		31386	1					
ANR	31616	Argument	sizeof ( device )		31386	2					
ANR	31617	SizeofExpression	sizeof ( device )		31386	0					
ANR	31618	Sizeof	sizeof		31386	0					
ANR	31619	SizeofOperand	device		31386	1					
ANR	31620	IfStatement	if ( rc != sizeof ( device ) )		31386	19					
ANR	31621	Condition	rc != sizeof ( device )	137:8:3706:3725	31386	0	True				
ANR	31622	EqualityExpression	rc != sizeof ( device )		31386	0		!=			
ANR	31623	Identifier	rc		31386	0					
ANR	31624	SizeofExpression	sizeof ( device )		31386	1					
ANR	31625	Sizeof	sizeof		31386	0					
ANR	31626	SizeofOperand	device		31386	1					
ANR	31627	CompoundStatement		51:30:1357:1357	31386	1					
ANR	31628	ExpressionStatement	"syslog ( LOG_ERR , ""write %s: %m"" , uinput -> devname )"	138:8:3738:3786	31386	0	True				
ANR	31629	CallExpression	"syslog ( LOG_ERR , ""write %s: %m"" , uinput -> devname )"		31386	0					
ANR	31630	Callee	syslog		31386	0					
ANR	31631	Identifier	syslog		31386	0					
ANR	31632	ArgumentList	LOG_ERR		31386	1					
ANR	31633	Argument	LOG_ERR		31386	0					
ANR	31634	Identifier	LOG_ERR		31386	0					
ANR	31635	Argument	"""write %s: %m"""		31386	1					
ANR	31636	PrimaryExpression	"""write %s: %m"""		31386	0					
ANR	31637	Argument	uinput -> devname		31386	2					
ANR	31638	PtrMemberAccess	uinput -> devname		31386	0					
ANR	31639	Identifier	uinput		31386	0					
ANR	31640	Identifier	devname		31386	1					
ANR	31641	ExpressionStatement	vdagentd_uinput_destroy ( uinputp )	139:8:3796:3828	31386	1	True				
ANR	31642	CallExpression	vdagentd_uinput_destroy ( uinputp )		31386	0					
ANR	31643	Callee	vdagentd_uinput_destroy		31386	0					
ANR	31644	Identifier	vdagentd_uinput_destroy		31386	0					
ANR	31645	ArgumentList	uinputp		31386	1					
ANR	31646	Argument	uinputp		31386	0					
ANR	31647	Identifier	uinputp		31386	0					
ANR	31648	ReturnStatement	return ;	140:8:3838:3844	31386	2	True				
ANR	31649	ExpressionStatement	"ioctl ( uinput -> fd , UI_SET_EVBIT , EV_KEY )"	144:4:3875:3914	31386	20	True				
ANR	31650	CallExpression	"ioctl ( uinput -> fd , UI_SET_EVBIT , EV_KEY )"		31386	0					
ANR	31651	Callee	ioctl		31386	0					
ANR	31652	Identifier	ioctl		31386	0					
ANR	31653	ArgumentList	uinput -> fd		31386	1					
ANR	31654	Argument	uinput -> fd		31386	0					
ANR	31655	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31656	Identifier	uinput		31386	0					
ANR	31657	Identifier	fd		31386	1					
ANR	31658	Argument	UI_SET_EVBIT		31386	1					
ANR	31659	Identifier	UI_SET_EVBIT		31386	0					
ANR	31660	Argument	EV_KEY		31386	2					
ANR	31661	Identifier	EV_KEY		31386	0					
ANR	31662	ExpressionStatement	"ioctl ( uinput -> fd , UI_SET_KEYBIT , BTN_LEFT )"	145:4:3920:3962	31386	21	True				
ANR	31663	CallExpression	"ioctl ( uinput -> fd , UI_SET_KEYBIT , BTN_LEFT )"		31386	0					
ANR	31664	Callee	ioctl		31386	0					
ANR	31665	Identifier	ioctl		31386	0					
ANR	31666	ArgumentList	uinput -> fd		31386	1					
ANR	31667	Argument	uinput -> fd		31386	0					
ANR	31668	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31669	Identifier	uinput		31386	0					
ANR	31670	Identifier	fd		31386	1					
ANR	31671	Argument	UI_SET_KEYBIT		31386	1					
ANR	31672	Identifier	UI_SET_KEYBIT		31386	0					
ANR	31673	Argument	BTN_LEFT		31386	2					
ANR	31674	Identifier	BTN_LEFT		31386	0					
ANR	31675	ExpressionStatement	"ioctl ( uinput -> fd , UI_SET_KEYBIT , BTN_MIDDLE )"	146:4:3968:4012	31386	22	True				
ANR	31676	CallExpression	"ioctl ( uinput -> fd , UI_SET_KEYBIT , BTN_MIDDLE )"		31386	0					
ANR	31677	Callee	ioctl		31386	0					
ANR	31678	Identifier	ioctl		31386	0					
ANR	31679	ArgumentList	uinput -> fd		31386	1					
ANR	31680	Argument	uinput -> fd		31386	0					
ANR	31681	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31682	Identifier	uinput		31386	0					
ANR	31683	Identifier	fd		31386	1					
ANR	31684	Argument	UI_SET_KEYBIT		31386	1					
ANR	31685	Identifier	UI_SET_KEYBIT		31386	0					
ANR	31686	Argument	BTN_MIDDLE		31386	2					
ANR	31687	Identifier	BTN_MIDDLE		31386	0					
ANR	31688	ExpressionStatement	"ioctl ( uinput -> fd , UI_SET_KEYBIT , BTN_RIGHT )"	147:4:4018:4061	31386	23	True				
ANR	31689	CallExpression	"ioctl ( uinput -> fd , UI_SET_KEYBIT , BTN_RIGHT )"		31386	0					
ANR	31690	Callee	ioctl		31386	0					
ANR	31691	Identifier	ioctl		31386	0					
ANR	31692	ArgumentList	uinput -> fd		31386	1					
ANR	31693	Argument	uinput -> fd		31386	0					
ANR	31694	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31695	Identifier	uinput		31386	0					
ANR	31696	Identifier	fd		31386	1					
ANR	31697	Argument	UI_SET_KEYBIT		31386	1					
ANR	31698	Identifier	UI_SET_KEYBIT		31386	0					
ANR	31699	Argument	BTN_RIGHT		31386	2					
ANR	31700	Identifier	BTN_RIGHT		31386	0					
ANR	31701	ExpressionStatement	"ioctl ( uinput -> fd , UI_SET_EVBIT , EV_REL )"	150:4:4084:4123	31386	24	True				
ANR	31702	CallExpression	"ioctl ( uinput -> fd , UI_SET_EVBIT , EV_REL )"		31386	0					
ANR	31703	Callee	ioctl		31386	0					
ANR	31704	Identifier	ioctl		31386	0					
ANR	31705	ArgumentList	uinput -> fd		31386	1					
ANR	31706	Argument	uinput -> fd		31386	0					
ANR	31707	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31708	Identifier	uinput		31386	0					
ANR	31709	Identifier	fd		31386	1					
ANR	31710	Argument	UI_SET_EVBIT		31386	1					
ANR	31711	Identifier	UI_SET_EVBIT		31386	0					
ANR	31712	Argument	EV_REL		31386	2					
ANR	31713	Identifier	EV_REL		31386	0					
ANR	31714	ExpressionStatement	"ioctl ( uinput -> fd , UI_SET_RELBIT , REL_WHEEL )"	151:4:4129:4172	31386	25	True				
ANR	31715	CallExpression	"ioctl ( uinput -> fd , UI_SET_RELBIT , REL_WHEEL )"		31386	0					
ANR	31716	Callee	ioctl		31386	0					
ANR	31717	Identifier	ioctl		31386	0					
ANR	31718	ArgumentList	uinput -> fd		31386	1					
ANR	31719	Argument	uinput -> fd		31386	0					
ANR	31720	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31721	Identifier	uinput		31386	0					
ANR	31722	Identifier	fd		31386	1					
ANR	31723	Argument	UI_SET_RELBIT		31386	1					
ANR	31724	Identifier	UI_SET_RELBIT		31386	0					
ANR	31725	Argument	REL_WHEEL		31386	2					
ANR	31726	Identifier	REL_WHEEL		31386	0					
ANR	31727	ExpressionStatement	"ioctl ( uinput -> fd , UI_SET_EVBIT , EV_ABS )"	154:4:4197:4236	31386	26	True				
ANR	31728	CallExpression	"ioctl ( uinput -> fd , UI_SET_EVBIT , EV_ABS )"		31386	0					
ANR	31729	Callee	ioctl		31386	0					
ANR	31730	Identifier	ioctl		31386	0					
ANR	31731	ArgumentList	uinput -> fd		31386	1					
ANR	31732	Argument	uinput -> fd		31386	0					
ANR	31733	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31734	Identifier	uinput		31386	0					
ANR	31735	Identifier	fd		31386	1					
ANR	31736	Argument	UI_SET_EVBIT		31386	1					
ANR	31737	Identifier	UI_SET_EVBIT		31386	0					
ANR	31738	Argument	EV_ABS		31386	2					
ANR	31739	Identifier	EV_ABS		31386	0					
ANR	31740	ExpressionStatement	"ioctl ( uinput -> fd , UI_SET_ABSBIT , ABS_X )"	155:4:4242:4281	31386	27	True				
ANR	31741	CallExpression	"ioctl ( uinput -> fd , UI_SET_ABSBIT , ABS_X )"		31386	0					
ANR	31742	Callee	ioctl		31386	0					
ANR	31743	Identifier	ioctl		31386	0					
ANR	31744	ArgumentList	uinput -> fd		31386	1					
ANR	31745	Argument	uinput -> fd		31386	0					
ANR	31746	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31747	Identifier	uinput		31386	0					
ANR	31748	Identifier	fd		31386	1					
ANR	31749	Argument	UI_SET_ABSBIT		31386	1					
ANR	31750	Identifier	UI_SET_ABSBIT		31386	0					
ANR	31751	Argument	ABS_X		31386	2					
ANR	31752	Identifier	ABS_X		31386	0					
ANR	31753	ExpressionStatement	"ioctl ( uinput -> fd , UI_SET_ABSBIT , ABS_Y )"	156:4:4287:4326	31386	28	True				
ANR	31754	CallExpression	"ioctl ( uinput -> fd , UI_SET_ABSBIT , ABS_Y )"		31386	0					
ANR	31755	Callee	ioctl		31386	0					
ANR	31756	Identifier	ioctl		31386	0					
ANR	31757	ArgumentList	uinput -> fd		31386	1					
ANR	31758	Argument	uinput -> fd		31386	0					
ANR	31759	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31760	Identifier	uinput		31386	0					
ANR	31761	Identifier	fd		31386	1					
ANR	31762	Argument	UI_SET_ABSBIT		31386	1					
ANR	31763	Identifier	UI_SET_ABSBIT		31386	0					
ANR	31764	Argument	ABS_Y		31386	2					
ANR	31765	Identifier	ABS_Y		31386	0					
ANR	31766	ExpressionStatement	"rc = ioctl ( uinput -> fd , UI_DEV_CREATE )"	158:4:4333:4370	31386	29	True				
ANR	31767	AssignmentExpression	"rc = ioctl ( uinput -> fd , UI_DEV_CREATE )"		31386	0		=			
ANR	31768	Identifier	rc		31386	0					
ANR	31769	CallExpression	"ioctl ( uinput -> fd , UI_DEV_CREATE )"		31386	1					
ANR	31770	Callee	ioctl		31386	0					
ANR	31771	Identifier	ioctl		31386	0					
ANR	31772	ArgumentList	uinput -> fd		31386	1					
ANR	31773	Argument	uinput -> fd		31386	0					
ANR	31774	PtrMemberAccess	uinput -> fd		31386	0					
ANR	31775	Identifier	uinput		31386	0					
ANR	31776	Identifier	fd		31386	1					
ANR	31777	Argument	UI_DEV_CREATE		31386	1					
ANR	31778	Identifier	UI_DEV_CREATE		31386	0					
ANR	31779	IfStatement	if ( rc < 0 )		31386	30					
ANR	31780	Condition	rc < 0	159:8:4380:4385	31386	0	True				
ANR	31781	RelationalExpression	rc < 0		31386	0		<			
ANR	31782	Identifier	rc		31386	0					
ANR	31783	PrimaryExpression	0		31386	1					
ANR	31784	CompoundStatement		73:16:2017:2017	31386	1					
ANR	31785	ExpressionStatement	"syslog ( LOG_ERR , ""create %s: %m"" , uinput -> devname )"	160:8:4398:4447	31386	0	True				
ANR	31786	CallExpression	"syslog ( LOG_ERR , ""create %s: %m"" , uinput -> devname )"		31386	0					
ANR	31787	Callee	syslog		31386	0					
ANR	31788	Identifier	syslog		31386	0					
ANR	31789	ArgumentList	LOG_ERR		31386	1					
ANR	31790	Argument	LOG_ERR		31386	0					
ANR	31791	Identifier	LOG_ERR		31386	0					
ANR	31792	Argument	"""create %s: %m"""		31386	1					
ANR	31793	PrimaryExpression	"""create %s: %m"""		31386	0					
ANR	31794	Argument	uinput -> devname		31386	2					
ANR	31795	PtrMemberAccess	uinput -> devname		31386	0					
ANR	31796	Identifier	uinput		31386	0					
ANR	31797	Identifier	devname		31386	1					
ANR	31798	ExpressionStatement	vdagentd_uinput_destroy ( uinputp )	161:8:4457:4489	31386	1	True				
ANR	31799	CallExpression	vdagentd_uinput_destroy ( uinputp )		31386	0					
ANR	31800	Callee	vdagentd_uinput_destroy		31386	0					
ANR	31801	Identifier	vdagentd_uinput_destroy		31386	0					
ANR	31802	ArgumentList	uinputp		31386	1					
ANR	31803	Argument	uinputp		31386	0					
ANR	31804	Identifier	uinputp		31386	0					
ANR	31805	ReturnType	void		31386	1					
ANR	31806	Identifier	vdagentd_uinput_update_size		31386	2					
ANR	31807	ParameterList	"struct vdagentd_uinput * * uinputp , int width , int height , struct vdagentd_guest_xorg_resolution * screen_info , int screen_count"		31386	3					
ANR	31808	Parameter	struct vdagentd_uinput * * uinputp	83:33:2219:2250	31386	0	True				
ANR	31809	ParameterType	struct vdagentd_uinput * *		31386	0					
ANR	31810	Identifier	uinputp		31386	1					
ANR	31811	Parameter	int width	84:8:2261:2269	31386	1	True				
ANR	31812	ParameterType	int		31386	0					
ANR	31813	Identifier	width		31386	1					
ANR	31814	Parameter	int height	84:19:2272:2281	31386	2	True				
ANR	31815	ParameterType	int		31386	0					
ANR	31816	Identifier	height		31386	1					
ANR	31817	Parameter	struct vdagentd_guest_xorg_resolution * screen_info	85:8:2292:2341	31386	3	True				
ANR	31818	ParameterType	struct vdagentd_guest_xorg_resolution *		31386	0					
ANR	31819	Identifier	screen_info		31386	1					
ANR	31820	Parameter	int screen_count	86:8:2352:2367	31386	4	True				
ANR	31821	ParameterType	int		31386	0					
ANR	31822	Identifier	screen_count		31386	1					
ANR	31823	CFGEntryNode	ENTRY		31386		True				
ANR	31824	CFGExitNode	EXIT		31386		True				
ANR	31825	Symbol	BTN_MIDDLE		31386						
ANR	31826	Symbol	UI_SET_EVBIT		31386						
ANR	31827	Symbol	UI_SET_RELBIT		31386						
ANR	31828	Symbol	screen_count		31386						
ANR	31829	Symbol	screen_info		31386						
ANR	31830	Symbol	uinput -> fd		31386						
ANR	31831	Symbol	REL_WHEEL		31386						
ANR	31832	Symbol	UI_SET_ABSBIT		31386						
ANR	31833	Symbol	EV_REL		31386						
ANR	31834	Symbol	ioctl		31386						
ANR	31835	Symbol	& device		31386						
ANR	31836	Symbol	O_RDWR		31386						
ANR	31837	Symbol	uinput -> height		31386						
ANR	31838	Symbol	uinput -> screen_count		31386						
ANR	31839	Symbol	BTN_RIGHT		31386						
ANR	31840	Symbol	uinput		31386						
ANR	31841	Symbol	uinput -> fake		31386						
ANR	31842	Symbol	LOG_ERR		31386						
ANR	31843	Symbol	EV_KEY		31386						
ANR	31844	Symbol	ABS_X		31386						
ANR	31845	Symbol	UI_DEV_CREATE		31386						
ANR	31846	Symbol	write		31386						
ANR	31847	Symbol	height		31386						
ANR	31848	Symbol	ABS_Y		31386						
ANR	31849	Symbol	EV_ABS		31386						
ANR	31850	Symbol	screen_info [ i ] . x		31386						
ANR	31851	Symbol	screen_info [ i ] . y		31386						
ANR	31852	Symbol	uinput -> devname		31386						
ANR	31853	Symbol	i		31386						
ANR	31854	Symbol	* uinputp		31386						
ANR	31855	Symbol	uinput -> debug		31386						
ANR	31856	Symbol	uinput -> screen_info		31386						
ANR	31857	Symbol	uinput -> width		31386						
ANR	31858	Symbol	* uinput		31386						
ANR	31859	Symbol	rc		31386						
ANR	31860	Symbol	uinputp		31386						
ANR	31861	Symbol	* i		31386						
ANR	31862	Symbol	* screen_info		31386						
ANR	31863	Symbol	width		31386						
ANR	31864	Symbol	LOG_DEBUG		31386						
ANR	31865	Symbol	UI_SET_KEYBIT		31386						
ANR	31866	Symbol	BTN_LEFT		31386						
ANR	31867	Symbol	O_WRONLY		31386						
ANR	31868	Symbol	open		31386						
ANR	31869	Function	uinput_send_event	165:0:4500:4965							
ANR	31870	FunctionDef	"uinput_send_event (struct vdagentd_uinput * * uinputp , __u16 type , __u16 code , __s32 value)"		31869	0					
ANR	31871	CompoundStatement		167:0:4605:4965	31869	0					
ANR	31872	IdentifierDeclStatement	struct vdagentd_uinput * uinput = * uinputp ;	168:4:4611:4652	31869	0	True				
ANR	31873	IdentifierDecl	* uinput = * uinputp		31869	0					
ANR	31874	IdentifierDeclType	struct vdagentd_uinput *		31869	0					
ANR	31875	Identifier	uinput		31869	1					
ANR	31876	AssignmentExpression	* uinput = * uinputp		31869	2		=			
ANR	31877	Identifier	uinput		31869	0					
ANR	31878	UnaryOperationExpression	* uinputp		31869	1					
ANR	31879	UnaryOperator	*		31869	0					
ANR	31880	Identifier	uinputp		31869	1					
ANR	31881	Statement	struct	169:4:4658:4663	31869	1	True				
ANR	31882	Statement	input_event	169:11:4665:4675	31869	2	True				
ANR	31883	Statement	event	169:23:4677:4681	31869	3	True				
ANR	31884	Statement	=	169:29:4683:4683	31869	4	True				
ANR	31885	CompoundStatement		3:31:79:79	31869	5					
ANR	31886	Statement	.	170:8:4695:4695	31869	0	True				
ANR	31887	Statement	type	170:9:4696:4699	31869	1	True				
ANR	31888	Statement	=	170:15:4702:4702	31869	2	True				
ANR	31889	Statement	type	170:17:4704:4707	31869	3	True				
ANR	31890	Statement	","	170:21:4708:4708	31869	4	True				
ANR	31891	Statement	.	171:8:4718:4718	31869	5	True				
ANR	31892	Statement	code	171:9:4719:4722	31869	6	True				
ANR	31893	Statement	=	171:15:4725:4725	31869	7	True				
ANR	31894	Statement	code	171:17:4727:4730	31869	8	True				
ANR	31895	Statement	","	171:21:4731:4731	31869	9	True				
ANR	31896	Statement	.	172:8:4741:4741	31869	10	True				
ANR	31897	Statement	value	172:9:4742:4746	31869	11	True				
ANR	31898	Statement	=	172:15:4748:4748	31869	12	True				
ANR	31899	Statement	value	172:17:4750:4754	31869	13	True				
ANR	31900	Statement	","	172:22:4755:4755	31869	14	True				
ANR	31901	ExpressionStatement		173:5:4762:4762	31869	6	True				
ANR	31902	IdentifierDeclStatement	int rc ;	174:4:4768:4774	31869	7	True				
ANR	31903	IdentifierDecl	rc		31869	0					
ANR	31904	IdentifierDeclType	int		31869	0					
ANR	31905	Identifier	rc		31869	1					
ANR	31906	ExpressionStatement	"rc = write ( uinput -> fd , & event , sizeof ( event ) )"	176:4:4781:4826	31869	8	True				
ANR	31907	AssignmentExpression	"rc = write ( uinput -> fd , & event , sizeof ( event ) )"		31869	0		=			
ANR	31908	Identifier	rc		31869	0					
ANR	31909	CallExpression	"write ( uinput -> fd , & event , sizeof ( event ) )"		31869	1					
ANR	31910	Callee	write		31869	0					
ANR	31911	Identifier	write		31869	0					
ANR	31912	ArgumentList	uinput -> fd		31869	1					
ANR	31913	Argument	uinput -> fd		31869	0					
ANR	31914	PtrMemberAccess	uinput -> fd		31869	0					
ANR	31915	Identifier	uinput		31869	0					
ANR	31916	Identifier	fd		31869	1					
ANR	31917	Argument	& event		31869	1					
ANR	31918	UnaryOperationExpression	& event		31869	0					
ANR	31919	UnaryOperator	&		31869	0					
ANR	31920	Identifier	event		31869	1					
ANR	31921	Argument	sizeof ( event )		31869	2					
ANR	31922	SizeofExpression	sizeof ( event )		31869	0					
ANR	31923	Sizeof	sizeof		31869	0					
ANR	31924	SizeofOperand	event		31869	1					
ANR	31925	IfStatement	if ( rc != sizeof ( event ) )		31869	9					
ANR	31926	Condition	rc != sizeof ( event )	177:8:4836:4854	31869	0	True				
ANR	31927	EqualityExpression	rc != sizeof ( event )		31869	0		!=			
ANR	31928	Identifier	rc		31869	0					
ANR	31929	SizeofExpression	sizeof ( event )		31869	1					
ANR	31930	Sizeof	sizeof		31869	0					
ANR	31931	SizeofOperand	event		31869	1					
ANR	31932	CompoundStatement		11:29:251:251	31869	1					
ANR	31933	ExpressionStatement	"syslog ( LOG_ERR , ""write %s: %m"" , uinput -> devname )"	178:8:4867:4915	31869	0	True				
ANR	31934	CallExpression	"syslog ( LOG_ERR , ""write %s: %m"" , uinput -> devname )"		31869	0					
ANR	31935	Callee	syslog		31869	0					
ANR	31936	Identifier	syslog		31869	0					
ANR	31937	ArgumentList	LOG_ERR		31869	1					
ANR	31938	Argument	LOG_ERR		31869	0					
ANR	31939	Identifier	LOG_ERR		31869	0					
ANR	31940	Argument	"""write %s: %m"""		31869	1					
ANR	31941	PrimaryExpression	"""write %s: %m"""		31869	0					
ANR	31942	Argument	uinput -> devname		31869	2					
ANR	31943	PtrMemberAccess	uinput -> devname		31869	0					
ANR	31944	Identifier	uinput		31869	0					
ANR	31945	Identifier	devname		31869	1					
ANR	31946	ExpressionStatement	vdagentd_uinput_destroy ( uinputp )	179:8:4925:4957	31869	1	True				
ANR	31947	CallExpression	vdagentd_uinput_destroy ( uinputp )		31869	0					
ANR	31948	Callee	vdagentd_uinput_destroy		31869	0					
ANR	31949	Identifier	vdagentd_uinput_destroy		31869	0					
ANR	31950	ArgumentList	uinputp		31869	1					
ANR	31951	Argument	uinputp		31869	0					
ANR	31952	Identifier	uinputp		31869	0					
ANR	31953	ReturnType	static void		31869	1					
ANR	31954	Identifier	uinput_send_event		31869	2					
ANR	31955	ParameterList	"struct vdagentd_uinput * * uinputp , __u16 type , __u16 code , __s32 value"		31869	3					
ANR	31956	Parameter	struct vdagentd_uinput * * uinputp	165:30:4530:4561	31869	0	True				
ANR	31957	ParameterType	struct vdagentd_uinput * *		31869	0					
ANR	31958	Identifier	uinputp		31869	1					
ANR	31959	Parameter	__u16 type	166:4:4568:4577	31869	1	True				
ANR	31960	ParameterType	__u16		31869	0					
ANR	31961	Identifier	type		31869	1					
ANR	31962	Parameter	__u16 code	166:16:4580:4589	31869	2	True				
ANR	31963	ParameterType	__u16		31869	0					
ANR	31964	Identifier	code		31869	1					
ANR	31965	Parameter	__s32 value	166:28:4592:4602	31869	3	True				
ANR	31966	ParameterType	__s32		31869	0					
ANR	31967	Identifier	value		31869	1					
ANR	31968	CFGEntryNode	ENTRY		31869		True				
ANR	31969	CFGExitNode	EXIT		31869		True				
ANR	31970	Symbol	code		31869						
ANR	31971	Symbol	uinput -> devname		31869						
ANR	31972	Symbol	uinput -> fd		31869						
ANR	31973	Symbol	type		31869						
ANR	31974	Symbol	* uinputp		31869						
ANR	31975	Symbol	& event		31869						
ANR	31976	Symbol	* uinput		31869						
ANR	31977	Symbol	rc		31869						
ANR	31978	Symbol	uinputp		31869						
ANR	31979	Symbol	uinput		31869						
ANR	31980	Symbol	LOG_ERR		31869						
ANR	31981	Symbol	value		31869						
ANR	31982	Symbol	write		31869						
ANR	31983	Function	vdagentd_uinput_do_mouse	183:0:4968:7892							
ANR	31984	FunctionDef	"vdagentd_uinput_do_mouse (struct vdagentd_uinput * * uinputp , VDAgentMouseState * mouse)"		31983	0					
ANR	31985	CompoundStatement		185:0:5066:7892	31983	0					
ANR	31986	IdentifierDeclStatement	struct vdagentd_uinput * uinput = * uinputp ;	186:4:5072:5113	31983	0	True				
ANR	31987	IdentifierDecl	* uinput = * uinputp		31983	0					
ANR	31988	IdentifierDeclType	struct vdagentd_uinput *		31983	0					
ANR	31989	Identifier	uinput		31983	1					
ANR	31990	AssignmentExpression	* uinput = * uinputp		31983	2		=			
ANR	31991	Identifier	uinput		31983	0					
ANR	31992	UnaryOperationExpression	* uinputp		31983	1					
ANR	31993	UnaryOperator	*		31983	0					
ANR	31994	Identifier	uinputp		31983	1					
ANR	31995	ClassDefStatement	struct button_s { const char * name ; int mask ; int btn ; }	187:4:5119:5202	31983	1	True				
ANR	31996	Identifier	button_s		31983	0					
ANR	31997	ExpressionStatement		191:5:5203:5203	31983	2	True				
ANR	31998	Statement	static	192:4:5209:5214	31983	3	True				
ANR	31999	Statement	const	192:11:5216:5220	31983	4	True				
ANR	32000	Statement	struct	192:17:5222:5227	31983	5	True				
ANR	32001	Statement	button_s	192:24:5229:5236	31983	6	True				
ANR	32002	Statement	btns	192:33:5238:5241	31983	7	True				
ANR	32003	Statement	[	192:37:5242:5242	31983	8	True				
ANR	32004	Statement	]	192:38:5243:5243	31983	9	True				
ANR	32005	Statement	=	192:40:5245:5245	31983	10	True				
ANR	32006	CompoundStatement		8:42:180:180	31983	11					
ANR	32007	CompoundStatement		9:8:190:190	31983	0					
ANR	32008	Statement	.	193:10:5259:5259	31983	0	True				
ANR	32009	Statement	name	193:11:5260:5263	31983	1	True				
ANR	32010	Statement	=	193:16:5265:5265	31983	2	True				
ANR	32011	Statement	"""left"""	193:18:5267:5272	31983	3	True				
ANR	32012	Statement	","	193:24:5273:5273	31983	4	True				
ANR	32013	Statement	.	193:28:5277:5277	31983	5	True				
ANR	32014	Statement	mask	193:29:5278:5281	31983	6	True				
ANR	32015	Statement	=	193:34:5283:5283	31983	7	True				
ANR	32016	Statement	VD_AGENT_LBUTTON_MASK	193:37:5286:5306	31983	8	True				
ANR	32017	Statement	","	193:58:5307:5307	31983	9	True				
ANR	32018	Statement	.	193:60:5309:5309	31983	10	True				
ANR	32019	Statement	btn	193:61:5310:5312	31983	11	True				
ANR	32020	Statement	=	193:65:5314:5314	31983	12	True				
ANR	32021	Statement	BTN_LEFT	193:67:5316:5323	31983	13	True				
ANR	32022	Statement	","	193:82:5331:5331	31983	1	True				
ANR	32023	CompoundStatement		10:8:274:274	31983	2					
ANR	32024	Statement	.	194:10:5343:5343	31983	0	True				
ANR	32025	Statement	name	194:11:5344:5347	31983	1	True				
ANR	32026	Statement	=	194:16:5349:5349	31983	2	True				
ANR	32027	Statement	"""middle"""	194:18:5351:5358	31983	3	True				
ANR	32028	Statement	","	194:26:5359:5359	31983	4	True				
ANR	32029	Statement	.	194:28:5361:5361	31983	5	True				
ANR	32030	Statement	mask	194:29:5362:5365	31983	6	True				
ANR	32031	Statement	=	194:34:5367:5367	31983	7	True				
ANR	32032	Statement	VD_AGENT_MBUTTON_MASK	194:37:5370:5390	31983	8	True				
ANR	32033	Statement	","	194:58:5391:5391	31983	9	True				
ANR	32034	Statement	.	194:60:5393:5393	31983	10	True				
ANR	32035	Statement	btn	194:61:5394:5396	31983	11	True				
ANR	32036	Statement	=	194:65:5398:5398	31983	12	True				
ANR	32037	Statement	BTN_MIDDLE	194:67:5400:5409	31983	13	True				
ANR	32038	Statement	","	194:82:5415:5415	31983	3	True				
ANR	32039	CompoundStatement		11:8:358:358	31983	4					
ANR	32040	Statement	.	195:10:5427:5427	31983	0	True				
ANR	32041	Statement	name	195:11:5428:5431	31983	1	True				
ANR	32042	Statement	=	195:16:5433:5433	31983	2	True				
ANR	32043	Statement	"""right"""	195:18:5435:5441	31983	3	True				
ANR	32044	Statement	","	195:25:5442:5442	31983	4	True				
ANR	32045	Statement	.	195:28:5445:5445	31983	5	True				
ANR	32046	Statement	mask	195:29:5446:5449	31983	6	True				
ANR	32047	Statement	=	195:34:5451:5451	31983	7	True				
ANR	32048	Statement	VD_AGENT_RBUTTON_MASK	195:37:5454:5474	31983	8	True				
ANR	32049	Statement	","	195:58:5475:5475	31983	9	True				
ANR	32050	Statement	.	195:60:5477:5477	31983	10	True				
ANR	32051	Statement	btn	195:61:5478:5480	31983	11	True				
ANR	32052	Statement	=	195:65:5482:5482	31983	12	True				
ANR	32053	Statement	BTN_RIGHT	195:67:5484:5492	31983	13	True				
ANR	32054	Statement	","	195:82:5499:5499	31983	5	True				
ANR	32055	ExpressionStatement		196:5:5506:5506	31983	12	True				
ANR	32056	Statement	static	197:4:5512:5517	31983	13	True				
ANR	32057	Statement	const	197:11:5519:5523	31983	14	True				
ANR	32058	Statement	struct	197:17:5525:5530	31983	15	True				
ANR	32059	Statement	button_s	197:24:5532:5539	31983	16	True				
ANR	32060	Statement	wheel	197:33:5541:5545	31983	17	True				
ANR	32061	Statement	[	197:38:5546:5546	31983	18	True				
ANR	32062	Statement	]	197:39:5547:5547	31983	19	True				
ANR	32063	Statement	=	197:41:5549:5549	31983	20	True				
ANR	32064	CompoundStatement		13:43:484:484	31983	21					
ANR	32065	CompoundStatement		14:8:494:494	31983	0					
ANR	32066	Statement	.	198:10:5563:5563	31983	0	True				
ANR	32067	Statement	name	198:11:5564:5567	31983	1	True				
ANR	32068	Statement	=	198:16:5569:5569	31983	2	True				
ANR	32069	Statement	"""up"""	198:18:5571:5574	31983	3	True				
ANR	32070	Statement	","	198:22:5575:5575	31983	4	True				
ANR	32071	Statement	.	198:28:5581:5581	31983	5	True				
ANR	32072	Statement	mask	198:29:5582:5585	31983	6	True				
ANR	32073	Statement	=	198:34:5587:5587	31983	7	True				
ANR	32074	Statement	VD_AGENT_UBUTTON_MASK	198:37:5590:5610	31983	8	True				
ANR	32075	Statement	","	198:58:5611:5611	31983	9	True				
ANR	32076	Statement	.	198:60:5613:5613	31983	10	True				
ANR	32077	Statement	btn	198:61:5614:5616	31983	11	True				
ANR	32078	Statement	=	198:65:5618:5618	31983	12	True				
ANR	32079	Statement	1	198:67:5620:5620	31983	13	True				
ANR	32080	Statement	","	198:71:5624:5624	31983	1	True				
ANR	32081	CompoundStatement		15:8:567:567	31983	2					
ANR	32082	Statement	.	199:10:5636:5636	31983	0	True				
ANR	32083	Statement	name	199:11:5637:5640	31983	1	True				
ANR	32084	Statement	=	199:16:5642:5642	31983	2	True				
ANR	32085	Statement	"""down"""	199:18:5644:5649	31983	3	True				
ANR	32086	Statement	","	199:24:5650:5650	31983	4	True				
ANR	32087	Statement	.	199:28:5654:5654	31983	5	True				
ANR	32088	Statement	mask	199:29:5655:5658	31983	6	True				
ANR	32089	Statement	=	199:34:5660:5660	31983	7	True				
ANR	32090	Statement	VD_AGENT_DBUTTON_MASK	199:37:5663:5683	31983	8	True				
ANR	32091	Statement	","	199:58:5684:5684	31983	9	True				
ANR	32092	Statement	.	199:60:5686:5686	31983	10	True				
ANR	32093	Statement	btn	199:61:5687:5689	31983	11	True				
ANR	32094	Statement	=	199:65:5691:5691	31983	12	True				
ANR	32095	Statement	-	199:67:5693:5693	31983	13	True				
ANR	32096	Statement	1	199:68:5694:5694	31983	14	True				
ANR	32097	Statement	","	199:71:5697:5697	31983	3	True				
ANR	32098	ExpressionStatement		200:5:5704:5704	31983	22	True				
ANR	32099	IdentifierDeclStatement	"int i , down ;"	201:4:5710:5721	31983	23	True				
ANR	32100	IdentifierDecl	i		31983	0					
ANR	32101	IdentifierDeclType	int		31983	0					
ANR	32102	Identifier	i		31983	1					
ANR	32103	IdentifierDecl	down		31983	1					
ANR	32104	IdentifierDeclType	int		31983	0					
ANR	32105	Identifier	down		31983	1					
ANR	32106	IfStatement	if ( * uinputp )		31983	24					
ANR	32107	Condition	* uinputp	203:8:5732:5739	31983	0	True				
ANR	32108	UnaryOperationExpression	* uinputp		31983	0					
ANR	32109	UnaryOperator	*		31983	0					
ANR	32110	Identifier	uinputp		31983	1					
ANR	32111	CompoundStatement		19:18:675:675	31983	1					
ANR	32112	IfStatement	if ( mouse -> display_id >= uinput -> screen_count )		31983	0					
ANR	32113	Condition	mouse -> display_id >= uinput -> screen_count	204:12:5756:5796	31983	0	True				
ANR	32114	RelationalExpression	mouse -> display_id >= uinput -> screen_count		31983	0		>=			
ANR	32115	PtrMemberAccess	mouse -> display_id		31983	0					
ANR	32116	Identifier	mouse		31983	0					
ANR	32117	Identifier	display_id		31983	1					
ANR	32118	PtrMemberAccess	uinput -> screen_count		31983	1					
ANR	32119	Identifier	uinput		31983	0					
ANR	32120	Identifier	screen_count		31983	1					
ANR	32121	CompoundStatement		20:55:732:732	31983	1					
ANR	32122	ExpressionStatement	"syslog ( LOG_WARNING , ""mouse event for unknown monitor (%d >= %d)"" , mouse -> display_id , uinput -> screen_count )"	205:12:5813:5938	31983	0	True				
ANR	32123	CallExpression	"syslog ( LOG_WARNING , ""mouse event for unknown monitor (%d >= %d)"" , mouse -> display_id , uinput -> screen_count )"		31983	0					
ANR	32124	Callee	syslog		31983	0					
ANR	32125	Identifier	syslog		31983	0					
ANR	32126	ArgumentList	LOG_WARNING		31983	1					
ANR	32127	Argument	LOG_WARNING		31983	0					
ANR	32128	Identifier	LOG_WARNING		31983	0					
ANR	32129	Argument	"""mouse event for unknown monitor (%d >= %d)"""		31983	1					
ANR	32130	PrimaryExpression	"""mouse event for unknown monitor (%d >= %d)"""		31983	0					
ANR	32131	Argument	mouse -> display_id		31983	2					
ANR	32132	PtrMemberAccess	mouse -> display_id		31983	0					
ANR	32133	Identifier	mouse		31983	0					
ANR	32134	Identifier	display_id		31983	1					
ANR	32135	Argument	uinput -> screen_count		31983	3					
ANR	32136	PtrMemberAccess	uinput -> screen_count		31983	0					
ANR	32137	Identifier	uinput		31983	0					
ANR	32138	Identifier	screen_count		31983	1					
ANR	32139	ReturnStatement	return ;	207:12:5952:5958	31983	1	True				
ANR	32140	IfStatement	if ( uinput -> debug )		31983	1					
ANR	32141	Condition	uinput -> debug	209:12:5982:5994	31983	0	True				
ANR	32142	PtrMemberAccess	uinput -> debug		31983	0					
ANR	32143	Identifier	uinput		31983	0					
ANR	32144	Identifier	debug		31983	1					
ANR	32145	ExpressionStatement	"syslog ( LOG_DEBUG , ""mouse-event: mon %d %dx%d"" , mouse -> display_id , mouse -> x , mouse -> y )"	210:12:6009:6113	31983	1	True				
ANR	32146	CallExpression	"syslog ( LOG_DEBUG , ""mouse-event: mon %d %dx%d"" , mouse -> display_id , mouse -> x , mouse -> y )"		31983	0					
ANR	32147	Callee	syslog		31983	0					
ANR	32148	Identifier	syslog		31983	0					
ANR	32149	ArgumentList	LOG_DEBUG		31983	1					
ANR	32150	Argument	LOG_DEBUG		31983	0					
ANR	32151	Identifier	LOG_DEBUG		31983	0					
ANR	32152	Argument	"""mouse-event: mon %d %dx%d"""		31983	1					
ANR	32153	PrimaryExpression	"""mouse-event: mon %d %dx%d"""		31983	0					
ANR	32154	Argument	mouse -> display_id		31983	2					
ANR	32155	PtrMemberAccess	mouse -> display_id		31983	0					
ANR	32156	Identifier	mouse		31983	0					
ANR	32157	Identifier	display_id		31983	1					
ANR	32158	Argument	mouse -> x		31983	3					
ANR	32159	PtrMemberAccess	mouse -> x		31983	0					
ANR	32160	Identifier	mouse		31983	0					
ANR	32161	Identifier	x		31983	1					
ANR	32162	Argument	mouse -> y		31983	4					
ANR	32163	PtrMemberAccess	mouse -> y		31983	0					
ANR	32164	Identifier	mouse		31983	0					
ANR	32165	Identifier	y		31983	1					
ANR	32166	ExpressionStatement	mouse -> x += uinput -> screen_info [ mouse -> display_id ] . x	212:8:6123:6175	31983	2	True				
ANR	32167	AssignmentExpression	mouse -> x += uinput -> screen_info [ mouse -> display_id ] . x		31983	0		+=			
ANR	32168	PtrMemberAccess	mouse -> x		31983	0					
ANR	32169	Identifier	mouse		31983	0					
ANR	32170	Identifier	x		31983	1					
ANR	32171	MemberAccess	uinput -> screen_info [ mouse -> display_id ] . x		31983	1					
ANR	32172	ArrayIndexing	uinput -> screen_info [ mouse -> display_id ]		31983	0					
ANR	32173	PtrMemberAccess	uinput -> screen_info		31983	0					
ANR	32174	Identifier	uinput		31983	0					
ANR	32175	Identifier	screen_info		31983	1					
ANR	32176	PtrMemberAccess	mouse -> display_id		31983	1					
ANR	32177	Identifier	mouse		31983	0					
ANR	32178	Identifier	display_id		31983	1					
ANR	32179	Identifier	x		31983	1					
ANR	32180	ExpressionStatement	mouse -> y += uinput -> screen_info [ mouse -> display_id ] . y	213:8:6185:6237	31983	3	True				
ANR	32181	AssignmentExpression	mouse -> y += uinput -> screen_info [ mouse -> display_id ] . y		31983	0		+=			
ANR	32182	PtrMemberAccess	mouse -> y		31983	0					
ANR	32183	Identifier	mouse		31983	0					
ANR	32184	Identifier	y		31983	1					
ANR	32185	MemberAccess	uinput -> screen_info [ mouse -> display_id ] . y		31983	1					
ANR	32186	ArrayIndexing	uinput -> screen_info [ mouse -> display_id ]		31983	0					
ANR	32187	PtrMemberAccess	uinput -> screen_info		31983	0					
ANR	32188	Identifier	uinput		31983	0					
ANR	32189	Identifier	screen_info		31983	1					
ANR	32190	PtrMemberAccess	mouse -> display_id		31983	1					
ANR	32191	Identifier	mouse		31983	0					
ANR	32192	Identifier	display_id		31983	1					
ANR	32193	Identifier	y		31983	1					
ANR	32194	ExpressionStatement	mouse -> x = mouse -> x * 32767 / ( uinput -> width - 1 )	215:8:6273:6322	31983	4	True				
ANR	32195	AssignmentExpression	mouse -> x = mouse -> x * 32767 / ( uinput -> width - 1 )		31983	0		=			
ANR	32196	PtrMemberAccess	mouse -> x		31983	0					
ANR	32197	Identifier	mouse		31983	0					
ANR	32198	Identifier	x		31983	1					
ANR	32199	MultiplicativeExpression	mouse -> x * 32767 / ( uinput -> width - 1 )		31983	1		*			
ANR	32200	PtrMemberAccess	mouse -> x		31983	0					
ANR	32201	Identifier	mouse		31983	0					
ANR	32202	Identifier	x		31983	1					
ANR	32203	MultiplicativeExpression	32767 / ( uinput -> width - 1 )		31983	1		/			
ANR	32204	PrimaryExpression	32767		31983	0					
ANR	32205	AdditiveExpression	uinput -> width - 1		31983	1		-			
ANR	32206	PtrMemberAccess	uinput -> width		31983	0					
ANR	32207	Identifier	uinput		31983	0					
ANR	32208	Identifier	width		31983	1					
ANR	32209	PrimaryExpression	1		31983	1					
ANR	32210	ExpressionStatement	mouse -> y = mouse -> y * 32767 / ( uinput -> height - 1 )	216:8:6332:6382	31983	5	True				
ANR	32211	AssignmentExpression	mouse -> y = mouse -> y * 32767 / ( uinput -> height - 1 )		31983	0		=			
ANR	32212	PtrMemberAccess	mouse -> y		31983	0					
ANR	32213	Identifier	mouse		31983	0					
ANR	32214	Identifier	y		31983	1					
ANR	32215	MultiplicativeExpression	mouse -> y * 32767 / ( uinput -> height - 1 )		31983	1		*			
ANR	32216	PtrMemberAccess	mouse -> y		31983	0					
ANR	32217	Identifier	mouse		31983	0					
ANR	32218	Identifier	y		31983	1					
ANR	32219	MultiplicativeExpression	32767 / ( uinput -> height - 1 )		31983	1		/			
ANR	32220	PrimaryExpression	32767		31983	0					
ANR	32221	AdditiveExpression	uinput -> height - 1		31983	1		-			
ANR	32222	PtrMemberAccess	uinput -> height		31983	0					
ANR	32223	Identifier	uinput		31983	0					
ANR	32224	Identifier	height		31983	1					
ANR	32225	PrimaryExpression	1		31983	1					
ANR	32226	IfStatement	if ( * uinputp && uinput -> last . x != mouse -> x )		31983	25					
ANR	32227	Condition	* uinputp && uinput -> last . x != mouse -> x	220:8:6406:6443	31983	0	True				
ANR	32228	AndExpression	* uinputp && uinput -> last . x != mouse -> x		31983	0		&&			
ANR	32229	UnaryOperationExpression	* uinputp		31983	0					
ANR	32230	UnaryOperator	*		31983	0					
ANR	32231	Identifier	uinputp		31983	1					
ANR	32232	EqualityExpression	uinput -> last . x != mouse -> x		31983	1		!=			
ANR	32233	MemberAccess	uinput -> last . x		31983	0					
ANR	32234	PtrMemberAccess	uinput -> last		31983	0					
ANR	32235	Identifier	uinput		31983	0					
ANR	32236	Identifier	last		31983	1					
ANR	32237	Identifier	x		31983	1					
ANR	32238	PtrMemberAccess	mouse -> x		31983	1					
ANR	32239	Identifier	mouse		31983	0					
ANR	32240	Identifier	x		31983	1					
ANR	32241	CompoundStatement		36:48:1379:1379	31983	1					
ANR	32242	IfStatement	if ( uinput -> debug )		31983	0					
ANR	32243	Condition	uinput -> debug	221:12:6460:6472	31983	0	True				
ANR	32244	PtrMemberAccess	uinput -> debug		31983	0					
ANR	32245	Identifier	uinput		31983	0					
ANR	32246	Identifier	debug		31983	1					
ANR	32247	ExpressionStatement	"syslog ( LOG_DEBUG , ""mouse: abs-x %d"" , mouse -> x )"	222:12:6487:6533	31983	1	True				
ANR	32248	CallExpression	"syslog ( LOG_DEBUG , ""mouse: abs-x %d"" , mouse -> x )"		31983	0					
ANR	32249	Callee	syslog		31983	0					
ANR	32250	Identifier	syslog		31983	0					
ANR	32251	ArgumentList	LOG_DEBUG		31983	1					
ANR	32252	Argument	LOG_DEBUG		31983	0					
ANR	32253	Identifier	LOG_DEBUG		31983	0					
ANR	32254	Argument	"""mouse: abs-x %d"""		31983	1					
ANR	32255	PrimaryExpression	"""mouse: abs-x %d"""		31983	0					
ANR	32256	Argument	mouse -> x		31983	2					
ANR	32257	PtrMemberAccess	mouse -> x		31983	0					
ANR	32258	Identifier	mouse		31983	0					
ANR	32259	Identifier	x		31983	1					
ANR	32260	ExpressionStatement	"uinput_send_event ( uinputp , EV_ABS , ABS_X , mouse -> x )"	223:8:6543:6594	31983	1	True				
ANR	32261	CallExpression	"uinput_send_event ( uinputp , EV_ABS , ABS_X , mouse -> x )"		31983	0					
ANR	32262	Callee	uinput_send_event		31983	0					
ANR	32263	Identifier	uinput_send_event		31983	0					
ANR	32264	ArgumentList	uinputp		31983	1					
ANR	32265	Argument	uinputp		31983	0					
ANR	32266	Identifier	uinputp		31983	0					
ANR	32267	Argument	EV_ABS		31983	1					
ANR	32268	Identifier	EV_ABS		31983	0					
ANR	32269	Argument	ABS_X		31983	2					
ANR	32270	Identifier	ABS_X		31983	0					
ANR	32271	Argument	mouse -> x		31983	3					
ANR	32272	PtrMemberAccess	mouse -> x		31983	0					
ANR	32273	Identifier	mouse		31983	0					
ANR	32274	Identifier	x		31983	1					
ANR	32275	IfStatement	if ( * uinputp && uinput -> last . y != mouse -> y )		31983	26					
ANR	32276	Condition	* uinputp && uinput -> last . y != mouse -> y	225:8:6610:6647	31983	0	True				
ANR	32277	AndExpression	* uinputp && uinput -> last . y != mouse -> y		31983	0		&&			
ANR	32278	UnaryOperationExpression	* uinputp		31983	0					
ANR	32279	UnaryOperator	*		31983	0					
ANR	32280	Identifier	uinputp		31983	1					
ANR	32281	EqualityExpression	uinput -> last . y != mouse -> y		31983	1		!=			
ANR	32282	MemberAccess	uinput -> last . y		31983	0					
ANR	32283	PtrMemberAccess	uinput -> last		31983	0					
ANR	32284	Identifier	uinput		31983	0					
ANR	32285	Identifier	last		31983	1					
ANR	32286	Identifier	y		31983	1					
ANR	32287	PtrMemberAccess	mouse -> y		31983	1					
ANR	32288	Identifier	mouse		31983	0					
ANR	32289	Identifier	y		31983	1					
ANR	32290	CompoundStatement		41:48:1583:1583	31983	1					
ANR	32291	IfStatement	if ( uinput -> debug )		31983	0					
ANR	32292	Condition	uinput -> debug	226:12:6664:6676	31983	0	True				
ANR	32293	PtrMemberAccess	uinput -> debug		31983	0					
ANR	32294	Identifier	uinput		31983	0					
ANR	32295	Identifier	debug		31983	1					
ANR	32296	ExpressionStatement	"syslog ( LOG_DEBUG , ""mouse: abs-y %d"" , mouse -> y )"	227:12:6691:6737	31983	1	True				
ANR	32297	CallExpression	"syslog ( LOG_DEBUG , ""mouse: abs-y %d"" , mouse -> y )"		31983	0					
ANR	32298	Callee	syslog		31983	0					
ANR	32299	Identifier	syslog		31983	0					
ANR	32300	ArgumentList	LOG_DEBUG		31983	1					
ANR	32301	Argument	LOG_DEBUG		31983	0					
ANR	32302	Identifier	LOG_DEBUG		31983	0					
ANR	32303	Argument	"""mouse: abs-y %d"""		31983	1					
ANR	32304	PrimaryExpression	"""mouse: abs-y %d"""		31983	0					
ANR	32305	Argument	mouse -> y		31983	2					
ANR	32306	PtrMemberAccess	mouse -> y		31983	0					
ANR	32307	Identifier	mouse		31983	0					
ANR	32308	Identifier	y		31983	1					
ANR	32309	ExpressionStatement	"uinput_send_event ( uinputp , EV_ABS , ABS_Y , mouse -> y )"	228:8:6747:6798	31983	1	True				
ANR	32310	CallExpression	"uinput_send_event ( uinputp , EV_ABS , ABS_Y , mouse -> y )"		31983	0					
ANR	32311	Callee	uinput_send_event		31983	0					
ANR	32312	Identifier	uinput_send_event		31983	0					
ANR	32313	ArgumentList	uinputp		31983	1					
ANR	32314	Argument	uinputp		31983	0					
ANR	32315	Identifier	uinputp		31983	0					
ANR	32316	Argument	EV_ABS		31983	1					
ANR	32317	Identifier	EV_ABS		31983	0					
ANR	32318	Argument	ABS_Y		31983	2					
ANR	32319	Identifier	ABS_Y		31983	0					
ANR	32320	Argument	mouse -> y		31983	3					
ANR	32321	PtrMemberAccess	mouse -> y		31983	0					
ANR	32322	Identifier	mouse		31983	0					
ANR	32323	Identifier	y		31983	1					
ANR	32324	ForStatement	for ( i = 0 ; i < sizeof ( btns ) / sizeof ( btns [ 0 ] ) && * uinputp ; i ++ )		31983	27					
ANR	32325	ForInit	i = 0 ;	230:9:6815:6820	31983	0	True				
ANR	32326	AssignmentExpression	i = 0		31983	0		=			
ANR	32327	Identifier	i		31983	0					
ANR	32328	PrimaryExpression	0		31983	1					
ANR	32329	Condition	i < sizeof ( btns ) / sizeof ( btns [ 0 ] ) && * uinputp	230:16:6822:6865	31983	1	True				
ANR	32330	AndExpression	i < sizeof ( btns ) / sizeof ( btns [ 0 ] ) && * uinputp		31983	0		&&			
ANR	32331	RelationalExpression	i < sizeof ( btns ) / sizeof ( btns [ 0 ] )		31983	0		<			
ANR	32332	Identifier	i		31983	0					
ANR	32333	MultiplicativeExpression	sizeof ( btns ) / sizeof ( btns [ 0 ] )		31983	1		/			
ANR	32334	SizeofExpression	sizeof ( btns )		31983	0					
ANR	32335	Sizeof	sizeof		31983	0					
ANR	32336	SizeofOperand	btns		31983	1					
ANR	32337	SizeofExpression	sizeof ( btns [ 0 ] )		31983	1					
ANR	32338	Sizeof	sizeof		31983	0					
ANR	32339	ArrayIndexing	btns [ 0 ]		31983	1					
ANR	32340	Identifier	btns		31983	0					
ANR	32341	PrimaryExpression	0		31983	1					
ANR	32342	UnaryOperationExpression	* uinputp		31983	1					
ANR	32343	UnaryOperator	*		31983	0					
ANR	32344	Identifier	uinputp		31983	1					
ANR	32345	PostIncDecOperationExpression	i ++	230:62:6868:6870	31983	2	True				
ANR	32346	Identifier	i		31983	0					
ANR	32347	IncDec	++		31983	1					
ANR	32348	CompoundStatement		46:67:1806:1806	31983	3					
ANR	32349	IfStatement	if ( ( uinput -> last . buttons & btns [ i ] . mask ) == ( mouse -> buttons & btns [ i ] . mask ) )		31983	0					
ANR	32350	Condition	( uinput -> last . buttons & btns [ i ] . mask ) == ( mouse -> buttons & btns [ i ] . mask )	231:12:6887:6974	31983	0	True				
ANR	32351	EqualityExpression	( uinput -> last . buttons & btns [ i ] . mask ) == ( mouse -> buttons & btns [ i ] . mask )		31983	0		==			
ANR	32352	BitAndExpression	uinput -> last . buttons & btns [ i ] . mask		31983	0		&			
ANR	32353	MemberAccess	uinput -> last . buttons		31983	0					
ANR	32354	PtrMemberAccess	uinput -> last		31983	0					
ANR	32355	Identifier	uinput		31983	0					
ANR	32356	Identifier	last		31983	1					
ANR	32357	Identifier	buttons		31983	1					
ANR	32358	MemberAccess	btns [ i ] . mask		31983	1					
ANR	32359	ArrayIndexing	btns [ i ]		31983	0					
ANR	32360	Identifier	btns		31983	0					
ANR	32361	Identifier	i		31983	1					
ANR	32362	Identifier	mask		31983	1					
ANR	32363	BitAndExpression	mouse -> buttons & btns [ i ] . mask		31983	1		&			
ANR	32364	PtrMemberAccess	mouse -> buttons		31983	0					
ANR	32365	Identifier	mouse		31983	0					
ANR	32366	Identifier	buttons		31983	1					
ANR	32367	MemberAccess	btns [ i ] . mask		31983	1					
ANR	32368	ArrayIndexing	btns [ i ]		31983	0					
ANR	32369	Identifier	btns		31983	0					
ANR	32370	Identifier	i		31983	1					
ANR	32371	Identifier	mask		31983	1					
ANR	32372	ContinueStatement	continue ;	233:12:6989:6997	31983	1	True				
ANR	32373	ExpressionStatement	down = ! ! ( mouse -> buttons & btns [ i ] . mask )	234:8:7007:7047	31983	1	True				
ANR	32374	AssignmentExpression	down = ! ! ( mouse -> buttons & btns [ i ] . mask )		31983	0		=			
ANR	32375	Identifier	down		31983	0					
ANR	32376	UnaryOperationExpression	! ! ( mouse -> buttons & btns [ i ] . mask )		31983	1					
ANR	32377	UnaryOperator	!		31983	0					
ANR	32378	UnaryOperationExpression	! ( mouse -> buttons & btns [ i ] . mask )		31983	1					
ANR	32379	UnaryOperator	!		31983	0					
ANR	32380	BitAndExpression	mouse -> buttons & btns [ i ] . mask		31983	1		&			
ANR	32381	PtrMemberAccess	mouse -> buttons		31983	0					
ANR	32382	Identifier	mouse		31983	0					
ANR	32383	Identifier	buttons		31983	1					
ANR	32384	MemberAccess	btns [ i ] . mask		31983	1					
ANR	32385	ArrayIndexing	btns [ i ]		31983	0					
ANR	32386	Identifier	btns		31983	0					
ANR	32387	Identifier	i		31983	1					
ANR	32388	Identifier	mask		31983	1					
ANR	32389	IfStatement	if ( uinput -> debug )		31983	2					
ANR	32390	Condition	uinput -> debug	235:12:7061:7073	31983	0	True				
ANR	32391	PtrMemberAccess	uinput -> debug		31983	0					
ANR	32392	Identifier	uinput		31983	0					
ANR	32393	Identifier	debug		31983	1					
ANR	32394	ExpressionStatement	"syslog ( LOG_DEBUG , ""mouse: btn-%s %s"" , btns [ i ] . name , down ? ""down"" : ""up"" )"	236:12:7088:7181	31983	1	True				
ANR	32395	CallExpression	"syslog ( LOG_DEBUG , ""mouse: btn-%s %s"" , btns [ i ] . name , down ? ""down"" : ""up"" )"		31983	0					
ANR	32396	Callee	syslog		31983	0					
ANR	32397	Identifier	syslog		31983	0					
ANR	32398	ArgumentList	LOG_DEBUG		31983	1					
ANR	32399	Argument	LOG_DEBUG		31983	0					
ANR	32400	Identifier	LOG_DEBUG		31983	0					
ANR	32401	Argument	"""mouse: btn-%s %s"""		31983	1					
ANR	32402	PrimaryExpression	"""mouse: btn-%s %s"""		31983	0					
ANR	32403	Argument	btns [ i ] . name		31983	2					
ANR	32404	MemberAccess	btns [ i ] . name		31983	0					
ANR	32405	ArrayIndexing	btns [ i ]		31983	0					
ANR	32406	Identifier	btns		31983	0					
ANR	32407	Identifier	i		31983	1					
ANR	32408	Identifier	name		31983	1					
ANR	32409	Argument	"down ? ""down"" : ""up"""		31983	3					
ANR	32410	ConditionalExpression	"down ? ""down"" : ""up"""		31983	0					
ANR	32411	Condition	down		31983	0					
ANR	32412	Identifier	down		31983	0					
ANR	32413	PrimaryExpression	"""down"""		31983	1					
ANR	32414	PrimaryExpression	"""up"""		31983	2					
ANR	32415	ExpressionStatement	"uinput_send_event ( uinputp , EV_KEY , btns [ i ] . btn , down )"	238:8:7191:7244	31983	3	True				
ANR	32416	CallExpression	"uinput_send_event ( uinputp , EV_KEY , btns [ i ] . btn , down )"		31983	0					
ANR	32417	Callee	uinput_send_event		31983	0					
ANR	32418	Identifier	uinput_send_event		31983	0					
ANR	32419	ArgumentList	uinputp		31983	1					
ANR	32420	Argument	uinputp		31983	0					
ANR	32421	Identifier	uinputp		31983	0					
ANR	32422	Argument	EV_KEY		31983	1					
ANR	32423	Identifier	EV_KEY		31983	0					
ANR	32424	Argument	btns [ i ] . btn		31983	2					
ANR	32425	MemberAccess	btns [ i ] . btn		31983	0					
ANR	32426	ArrayIndexing	btns [ i ]		31983	0					
ANR	32427	Identifier	btns		31983	0					
ANR	32428	Identifier	i		31983	1					
ANR	32429	Identifier	btn		31983	1					
ANR	32430	Argument	down		31983	3					
ANR	32431	Identifier	down		31983	0					
ANR	32432	ForStatement	for ( i = 0 ; i < sizeof ( wheel ) / sizeof ( wheel [ 0 ] ) && * uinputp ; i ++ )		31983	28					
ANR	32433	ForInit	i = 0 ;	240:9:7261:7266	31983	0	True				
ANR	32434	AssignmentExpression	i = 0		31983	0		=			
ANR	32435	Identifier	i		31983	0					
ANR	32436	PrimaryExpression	0		31983	1					
ANR	32437	Condition	i < sizeof ( wheel ) / sizeof ( wheel [ 0 ] ) && * uinputp	240:16:7268:7313	31983	1	True				
ANR	32438	AndExpression	i < sizeof ( wheel ) / sizeof ( wheel [ 0 ] ) && * uinputp		31983	0		&&			
ANR	32439	RelationalExpression	i < sizeof ( wheel ) / sizeof ( wheel [ 0 ] )		31983	0		<			
ANR	32440	Identifier	i		31983	0					
ANR	32441	MultiplicativeExpression	sizeof ( wheel ) / sizeof ( wheel [ 0 ] )		31983	1		/			
ANR	32442	SizeofExpression	sizeof ( wheel )		31983	0					
ANR	32443	Sizeof	sizeof		31983	0					
ANR	32444	SizeofOperand	wheel		31983	1					
ANR	32445	SizeofExpression	sizeof ( wheel [ 0 ] )		31983	1					
ANR	32446	Sizeof	sizeof		31983	0					
ANR	32447	ArrayIndexing	wheel [ 0 ]		31983	1					
ANR	32448	Identifier	wheel		31983	0					
ANR	32449	PrimaryExpression	0		31983	1					
ANR	32450	UnaryOperationExpression	* uinputp		31983	1					
ANR	32451	UnaryOperator	*		31983	0					
ANR	32452	Identifier	uinputp		31983	1					
ANR	32453	PostIncDecOperationExpression	i ++	240:64:7316:7318	31983	2	True				
ANR	32454	Identifier	i		31983	0					
ANR	32455	IncDec	++		31983	1					
ANR	32456	CompoundStatement		56:69:2254:2254	31983	3					
ANR	32457	IfStatement	if ( ( uinput -> last . buttons & wheel [ i ] . mask ) == ( mouse -> buttons & wheel [ i ] . mask ) )		31983	0					
ANR	32458	Condition	( uinput -> last . buttons & wheel [ i ] . mask ) == ( mouse -> buttons & wheel [ i ] . mask )	241:12:7335:7424	31983	0	True				
ANR	32459	EqualityExpression	( uinput -> last . buttons & wheel [ i ] . mask ) == ( mouse -> buttons & wheel [ i ] . mask )		31983	0		==			
ANR	32460	BitAndExpression	uinput -> last . buttons & wheel [ i ] . mask		31983	0		&			
ANR	32461	MemberAccess	uinput -> last . buttons		31983	0					
ANR	32462	PtrMemberAccess	uinput -> last		31983	0					
ANR	32463	Identifier	uinput		31983	0					
ANR	32464	Identifier	last		31983	1					
ANR	32465	Identifier	buttons		31983	1					
ANR	32466	MemberAccess	wheel [ i ] . mask		31983	1					
ANR	32467	ArrayIndexing	wheel [ i ]		31983	0					
ANR	32468	Identifier	wheel		31983	0					
ANR	32469	Identifier	i		31983	1					
ANR	32470	Identifier	mask		31983	1					
ANR	32471	BitAndExpression	mouse -> buttons & wheel [ i ] . mask		31983	1		&			
ANR	32472	PtrMemberAccess	mouse -> buttons		31983	0					
ANR	32473	Identifier	mouse		31983	0					
ANR	32474	Identifier	buttons		31983	1					
ANR	32475	MemberAccess	wheel [ i ] . mask		31983	1					
ANR	32476	ArrayIndexing	wheel [ i ]		31983	0					
ANR	32477	Identifier	wheel		31983	0					
ANR	32478	Identifier	i		31983	1					
ANR	32479	Identifier	mask		31983	1					
ANR	32480	ContinueStatement	continue ;	243:12:7439:7447	31983	1	True				
ANR	32481	IfStatement	if ( mouse -> buttons & wheel [ i ] . mask )		31983	1					
ANR	32482	Condition	mouse -> buttons & wheel [ i ] . mask	244:12:7461:7490	31983	0	True				
ANR	32483	BitAndExpression	mouse -> buttons & wheel [ i ] . mask		31983	0		&			
ANR	32484	PtrMemberAccess	mouse -> buttons		31983	0					
ANR	32485	Identifier	mouse		31983	0					
ANR	32486	Identifier	buttons		31983	1					
ANR	32487	MemberAccess	wheel [ i ] . mask		31983	1					
ANR	32488	ArrayIndexing	wheel [ i ]		31983	0					
ANR	32489	Identifier	wheel		31983	0					
ANR	32490	Identifier	i		31983	1					
ANR	32491	Identifier	mask		31983	1					
ANR	32492	CompoundStatement		60:44:2426:2426	31983	1					
ANR	32493	IfStatement	if ( uinput -> debug )		31983	0					
ANR	32494	Condition	uinput -> debug	245:16:7511:7523	31983	0	True				
ANR	32495	PtrMemberAccess	uinput -> debug		31983	0					
ANR	32496	Identifier	uinput		31983	0					
ANR	32497	Identifier	debug		31983	1					
ANR	32498	ExpressionStatement	"syslog ( LOG_DEBUG , ""mouse: wheel-%s"" , wheel [ i ] . name )"	246:16:7542:7593	31983	1	True				
ANR	32499	CallExpression	"syslog ( LOG_DEBUG , ""mouse: wheel-%s"" , wheel [ i ] . name )"		31983	0					
ANR	32500	Callee	syslog		31983	0					
ANR	32501	Identifier	syslog		31983	0					
ANR	32502	ArgumentList	LOG_DEBUG		31983	1					
ANR	32503	Argument	LOG_DEBUG		31983	0					
ANR	32504	Identifier	LOG_DEBUG		31983	0					
ANR	32505	Argument	"""mouse: wheel-%s"""		31983	1					
ANR	32506	PrimaryExpression	"""mouse: wheel-%s"""		31983	0					
ANR	32507	Argument	wheel [ i ] . name		31983	2					
ANR	32508	MemberAccess	wheel [ i ] . name		31983	0					
ANR	32509	ArrayIndexing	wheel [ i ]		31983	0					
ANR	32510	Identifier	wheel		31983	0					
ANR	32511	Identifier	i		31983	1					
ANR	32512	Identifier	name		31983	1					
ANR	32513	ExpressionStatement	"uinput_send_event ( uinputp , EV_REL , REL_WHEEL , wheel [ i ] . btn )"	247:12:7607:7666	31983	1	True				
ANR	32514	CallExpression	"uinput_send_event ( uinputp , EV_REL , REL_WHEEL , wheel [ i ] . btn )"		31983	0					
ANR	32515	Callee	uinput_send_event		31983	0					
ANR	32516	Identifier	uinput_send_event		31983	0					
ANR	32517	ArgumentList	uinputp		31983	1					
ANR	32518	Argument	uinputp		31983	0					
ANR	32519	Identifier	uinputp		31983	0					
ANR	32520	Argument	EV_REL		31983	1					
ANR	32521	Identifier	EV_REL		31983	0					
ANR	32522	Argument	REL_WHEEL		31983	2					
ANR	32523	Identifier	REL_WHEEL		31983	0					
ANR	32524	Argument	wheel [ i ] . btn		31983	3					
ANR	32525	MemberAccess	wheel [ i ] . btn		31983	0					
ANR	32526	ArrayIndexing	wheel [ i ]		31983	0					
ANR	32527	Identifier	wheel		31983	0					
ANR	32528	Identifier	i		31983	1					
ANR	32529	Identifier	btn		31983	1					
ANR	32530	IfStatement	if ( * uinputp )		31983	29					
ANR	32531	Condition	* uinputp	251:8:7693:7700	31983	0	True				
ANR	32532	UnaryOperationExpression	* uinputp		31983	0					
ANR	32533	UnaryOperator	*		31983	0					
ANR	32534	Identifier	uinputp		31983	1					
ANR	32535	CompoundStatement		67:18:2636:2636	31983	1					
ANR	32536	IfStatement	if ( uinput -> debug )		31983	0					
ANR	32537	Condition	uinput -> debug	252:12:7717:7729	31983	0	True				
ANR	32538	PtrMemberAccess	uinput -> debug		31983	0					
ANR	32539	Identifier	uinput		31983	0					
ANR	32540	Identifier	debug		31983	1					
ANR	32541	ExpressionStatement	"syslog ( LOG_DEBUG , ""mouse: syn"" )"	253:12:7744:7775	31983	1	True				
ANR	32542	CallExpression	"syslog ( LOG_DEBUG , ""mouse: syn"" )"		31983	0					
ANR	32543	Callee	syslog		31983	0					
ANR	32544	Identifier	syslog		31983	0					
ANR	32545	ArgumentList	LOG_DEBUG		31983	1					
ANR	32546	Argument	LOG_DEBUG		31983	0					
ANR	32547	Identifier	LOG_DEBUG		31983	0					
ANR	32548	Argument	"""mouse: syn"""		31983	1					
ANR	32549	PrimaryExpression	"""mouse: syn"""		31983	0					
ANR	32550	ExpressionStatement	"uinput_send_event ( uinputp , EV_SYN , SYN_REPORT , 0 )"	254:8:7785:7834	31983	1	True				
ANR	32551	CallExpression	"uinput_send_event ( uinputp , EV_SYN , SYN_REPORT , 0 )"		31983	0					
ANR	32552	Callee	uinput_send_event		31983	0					
ANR	32553	Identifier	uinput_send_event		31983	0					
ANR	32554	ArgumentList	uinputp		31983	1					
ANR	32555	Argument	uinputp		31983	0					
ANR	32556	Identifier	uinputp		31983	0					
ANR	32557	Argument	EV_SYN		31983	1					
ANR	32558	Identifier	EV_SYN		31983	0					
ANR	32559	Argument	SYN_REPORT		31983	2					
ANR	32560	Identifier	SYN_REPORT		31983	0					
ANR	32561	Argument	0		31983	3					
ANR	32562	PrimaryExpression	0		31983	0					
ANR	32563	IfStatement	if ( * uinputp )		31983	30					
ANR	32564	Condition	* uinputp	257:8:7851:7858	31983	0	True				
ANR	32565	UnaryOperationExpression	* uinputp		31983	0					
ANR	32566	UnaryOperator	*		31983	0					
ANR	32567	Identifier	uinputp		31983	1					
ANR	32568	ExpressionStatement	uinput -> last = * mouse	258:8:7869:7890	31983	1	True				
ANR	32569	AssignmentExpression	uinput -> last = * mouse		31983	0		=			
ANR	32570	PtrMemberAccess	uinput -> last		31983	0					
ANR	32571	Identifier	uinput		31983	0					
ANR	32572	Identifier	last		31983	1					
ANR	32573	UnaryOperationExpression	* mouse		31983	1					
ANR	32574	UnaryOperator	*		31983	0					
ANR	32575	Identifier	mouse		31983	1					
ANR	32576	ReturnType	void		31983	1					
ANR	32577	Identifier	vdagentd_uinput_do_mouse		31983	2					
ANR	32578	ParameterList	"struct vdagentd_uinput * * uinputp , VDAgentMouseState * mouse"		31983	3					
ANR	32579	Parameter	struct vdagentd_uinput * * uinputp	183:30:4998:5029	31983	0	True				
ANR	32580	ParameterType	struct vdagentd_uinput * *		31983	0					
ANR	32581	Identifier	uinputp		31983	1					
ANR	32582	Parameter	VDAgentMouseState * mouse	184:8:5040:5063	31983	1	True				
ANR	32583	ParameterType	VDAgentMouseState *		31983	0					
ANR	32584	Identifier	mouse		31983	1					
ANR	32585	CFGEntryNode	ENTRY		31983		True				
ANR	32586	CFGExitNode	EXIT		31983		True				
ANR	32587	Symbol	mouse -> buttons		31983						
ANR	32588	Symbol	btns [ i ] . btn		31983						
ANR	32589	Symbol	uinput -> last . x		31983						
ANR	32590	Symbol	LOG_WARNING		31983						
ANR	32591	Symbol	uinput -> last		31983						
ANR	32592	Symbol	uinput -> last . y		31983						
ANR	32593	Symbol	REL_WHEEL		31983						
ANR	32594	Symbol	down		31983						
ANR	32595	Symbol	* * mouse		31983						
ANR	32596	Symbol	EV_REL		31983						
ANR	32597	Symbol	mouse		31983						
ANR	32598	Symbol	* btns		31983						
ANR	32599	Symbol	uinput -> height		31983						
ANR	32600	Symbol	uinput -> screen_count		31983						
ANR	32601	Symbol	* * uinput		31983						
ANR	32602	Symbol	wheel [ i ] . name		31983						
ANR	32603	Symbol	uinput -> screen_info [ mouse -> display_id ] . x		31983						
ANR	32604	Symbol	uinput		31983						
ANR	32605	Symbol	EV_KEY		31983						
ANR	32606	Symbol	ABS_X		31983						
ANR	32607	Symbol	btns [ i ] . name		31983						
ANR	32608	Symbol	uinput -> screen_info [ mouse -> display_id ] . y		31983						
ANR	32609	Symbol	mouse -> y		31983						
ANR	32610	Symbol	mouse -> x		31983						
ANR	32611	Symbol	ABS_Y		31983						
ANR	32612	Symbol	EV_ABS		31983						
ANR	32613	Symbol	* mouse -> display_id		31983						
ANR	32614	Symbol	wheel		31983						
ANR	32615	Symbol	i		31983						
ANR	32616	Symbol	wheel [ i ] . btn		31983						
ANR	32617	Symbol	* uinput -> screen_info		31983						
ANR	32618	Symbol	* uinputp		31983						
ANR	32619	Symbol	mouse -> display_id		31983						
ANR	32620	Symbol	uinput -> debug		31983						
ANR	32621	Symbol	uinput -> screen_info		31983						
ANR	32622	Symbol	uinput -> width		31983						
ANR	32623	Symbol	SYN_REPORT		31983						
ANR	32624	Symbol	* uinput		31983						
ANR	32625	Symbol	uinput -> last . buttons		31983						
ANR	32626	Symbol	uinputp		31983						
ANR	32627	Symbol	* i		31983						
ANR	32628	Symbol	wheel [ i ] . mask		31983						
ANR	32629	Symbol	btns		31983						
ANR	32630	Symbol	* mouse		31983						
ANR	32631	Symbol	btns [ i ] . mask		31983						
ANR	32632	Symbol	LOG_DEBUG		31983						
ANR	32633	Symbol	* wheel		31983						
ANR	32634	Symbol	EV_SYN		31983						
