command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	874453	File	data/converged/CVE-2018-6791_plasma-workspace/xwindowtasksmodel.cpp								
ANR	874454	DeclStmt									
ANR	874455	Decl							const NET :: Properties	const NET :: Properties	windowInfoFlags
ANR	874456	DeclStmt									
ANR	874457	Decl							const NET :: Properties2	const NET :: Properties2	windowInfoFlags2
ANR	874458	ClassDef	XWindowTasksModel :: Private	57:0:1922:3232							
ANR	874459	DeclStmt									
ANR	874460	Decl							QVector < WId >	QVector < WId >	windows
ANR	874461	DeclStmt									
ANR	874462	Decl							QSet < WId >	QSet < WId >	transients
ANR	874463	DeclStmt									
ANR	874464	Decl							"QMultiHash < WId , WId >"	"QMultiHash < WId , WId >"	transientsDemandingAttention
ANR	874465	DeclStmt									
ANR	874466	Decl							"QHash < WId , KWindowInfo * >"	"QHash < WId , KWindowInfo * >"	windowInfoCache
ANR	874467	DeclStmt									
ANR	874468	Decl							"QHash < WId , AppData >"	"QHash < WId , AppData >"	appDataCache
ANR	874469	DeclStmt									
ANR	874470	Decl							"QHash < WId , QRect >"	"QHash < WId , QRect >"	delegateGeometries
ANR	874471	DeclStmt									
ANR	874472	Decl							WId	WId	activeWindow
ANR	874473	DeclStmt									
ANR	874474	Decl							KSharedConfig :: Ptr	KSharedConfig :: Ptr	rulesConfig
ANR	874475	DeclStmt									
ANR	874476	Decl							KDirWatch	KDirWatch *	configWatcher
ANR	874477	DeclStmt									
ANR	874478	Decl							QTimer	QTimer	sycocaChangeTimer
ANR	874479	DeclStmt									
ANR	874480	Decl							void	void ( )	init
ANR	874481	DeclStmt									
ANR	874482	Decl							void	void ( WId window )	addWindow
ANR	874483	DeclStmt									
ANR	874484	Decl							void	void ( WId window )	removeWindow
ANR	874485	DeclStmt									
ANR	874486	Decl							void	"void ( WId window , NET :: Properties properties , NET :: Properties2 properties2 )"	windowChanged
ANR	874487	DeclStmt									
ANR	874488	Decl							void	"void ( WId window , NET :: Properties properties , NET :: Properties2 properties2 )"	transientChanged
ANR	874489	DeclStmt									
ANR	874490	Decl							void	"void ( WId window , const QVector < int > & roles )"	dataChanged
ANR	874491	DeclStmt									
ANR	874492	Decl							KWindowInfo	KWindowInfo * ( WId window )	windowInfo
ANR	874493	DeclStmt									
ANR	874494	Decl							AppData	AppData ( WId window )	appData
ANR	874495	DeclStmt									
ANR	874496	Decl							QIcon	QIcon ( WId window )	icon
ANR	874497	DeclStmt									
ANR	874498	Decl							QString	QString ( )	mimeType
ANR	874499	DeclStmt									
ANR	874500	Decl							QString	QString ( )	groupMimeType
ANR	874501	DeclStmt									
ANR	874502	Decl							QUrl	QUrl ( WId window )	windowUrl
ANR	874503	DeclStmt									
ANR	874504	Decl							QUrl	"QUrl ( int pid , const QString & type , const QStringList & cmdRemovals )"	serviceUrl
ANR	874505	DeclStmt									
ANR	874506	Decl							KService :: List	KService :: List ( int pid )	servicesFromPid
ANR	874507	DeclStmt									
ANR	874508	Decl							QStringList	QStringList ( WId window )	activities
ANR	874509	DeclStmt									
ANR	874510	Decl							bool	bool ( WId window )	demandsAttention
ANR	874511	DeclStmt									
ANR	874512	Decl							XWindowTasksModel	XWindowTasksModel *	q
ANR	874513	Function	XWindowTasksModel :: Private :: Private	98:0:3236:3307							
ANR	874514	FunctionDef	XWindowTasksModel :: Private :: Private (XWindowTasksModel * q)		874513	0					
ANR	874515	CompoundStatement		100:0:3305:3307	874513	0					
ANR	874516	Identifier	XWindowTasksModel :: Private :: Private		874513	1					
ANR	874517	ParameterList	XWindowTasksModel * q		874513	2					
ANR	874518	Parameter	XWindowTasksModel * q	98:36:3272:3291	874513	0	True				
ANR	874519	ParameterType	XWindowTasksModel *		874513	0					
ANR	874520	Identifier	q		874513	1					
ANR	874521	CFGEntryNode	ENTRY		874513		True				
ANR	874522	CFGExitNode	EXIT		874513		True				
ANR	874523	Symbol	q		874513						
ANR	874524	Function	XWindowTasksModel :: Private :: ~Private	103:0:3310:3413							
ANR	874525	FunctionDef	XWindowTasksModel :: Private :: ~Private ()		874524	0					
ANR	874526	CompoundStatement		104:0:3349:3413	874524	0					
ANR	874527	ExpressionStatement	qDeleteAll ( windowInfoCache )	105:4:3355:3382	874524	0	True				
ANR	874528	CallExpression	qDeleteAll ( windowInfoCache )		874524	0					
ANR	874529	Callee	qDeleteAll		874524	0					
ANR	874530	Identifier	qDeleteAll		874524	0					
ANR	874531	ArgumentList	windowInfoCache		874524	1					
ANR	874532	Argument	windowInfoCache		874524	0					
ANR	874533	Identifier	windowInfoCache		874524	0					
ANR	874534	ExpressionStatement	windowInfoCache . clear ( )	106:4:3388:3411	874524	1	True				
ANR	874535	CallExpression	windowInfoCache . clear ( )		874524	0					
ANR	874536	Callee	windowInfoCache . clear		874524	0					
ANR	874537	MemberAccess	windowInfoCache . clear		874524	0					
ANR	874538	Identifier	windowInfoCache		874524	0					
ANR	874539	Identifier	clear		874524	1					
ANR	874540	ArgumentList			874524	1					
ANR	874541	Identifier	XWindowTasksModel :: Private :: ~Private		874524	1					
ANR	874542	ParameterList			874524	2					
ANR	874543	CFGEntryNode	ENTRY		874524		True				
ANR	874544	CFGExitNode	EXIT		874524		True				
ANR	874545	Symbol	windowInfoCache		874524						
ANR	874546	Function	XWindowTasksModel :: Private :: init	109:0:3416:6729							
ANR	874547	FunctionDef	XWindowTasksModel :: Private :: init ()		874546	0					
ANR	874548	CompoundStatement		110:0:3456:6729	874546	0					
ANR	874549	ExpressionStatement	"rulesConfig = KSharedConfig :: openConfig ( QStringLiteral ( ""taskmanagerrulesrc"" ) )"	111:4:3462:3539	874546	0	True				
ANR	874550	AssignmentExpression	"rulesConfig = KSharedConfig :: openConfig ( QStringLiteral ( ""taskmanagerrulesrc"" ) )"		874546	0		=			
ANR	874551	Identifier	rulesConfig		874546	0					
ANR	874552	CallExpression	"KSharedConfig :: openConfig ( QStringLiteral ( ""taskmanagerrulesrc"" ) )"		874546	1					
ANR	874553	Callee	KSharedConfig :: openConfig		874546	0					
ANR	874554	Identifier	KSharedConfig :: openConfig		874546	0					
ANR	874555	ArgumentList	"QStringLiteral ( ""taskmanagerrulesrc"" )"		874546	1					
ANR	874556	Argument	"QStringLiteral ( ""taskmanagerrulesrc"" )"		874546	0					
ANR	874557	CallExpression	"QStringLiteral ( ""taskmanagerrulesrc"" )"		874546	0					
ANR	874558	Callee	QStringLiteral		874546	0					
ANR	874559	Identifier	QStringLiteral		874546	0					
ANR	874560	ArgumentList	"""taskmanagerrulesrc"""		874546	1					
ANR	874561	Argument	"""taskmanagerrulesrc"""		874546	0					
ANR	874562	PrimaryExpression	"""taskmanagerrulesrc"""		874546	0					
ANR	874563	ExpressionStatement	configWatcher = new KDirWatch ( q )	112:4:3545:3577	874546	1	True				
ANR	874564	AssignmentExpression	configWatcher = new KDirWatch ( q )		874546	0		=			
ANR	874565	Identifier	configWatcher		874546	0					
ANR	874566	Identifier	q		874546	1					
ANR	874567	Statement	foreach	114:4:3584:3590	874546	2	True				
ANR	874568	Statement	(	114:12:3592:3592	874546	3	True				
ANR	874569	Statement	const	114:13:3593:3597	874546	4	True				
ANR	874570	Statement	QString	114:19:3599:3605	874546	5	True				
ANR	874571	Statement	&	114:27:3607:3607	874546	6	True				
ANR	874572	Statement	location	114:28:3608:3615	874546	7	True				
ANR	874573	Statement	","	114:36:3616:3616	874546	8	True				
ANR	874574	Statement	QStandardPaths	114:38:3618:3631	874546	9	True				
ANR	874575	Statement	::	114:52:3632:3633	874546	10	True				
ANR	874576	Statement	standardLocations	114:54:3634:3650	874546	11	True				
ANR	874577	Statement	(	114:71:3651:3651	874546	12	True				
ANR	874578	Statement	QStandardPaths	114:72:3652:3665	874546	13	True				
ANR	874579	Statement	::	114:86:3666:3667	874546	14	True				
ANR	874580	Statement	ConfigLocation	114:88:3668:3681	874546	15	True				
ANR	874581	Statement	)	114:102:3682:3682	874546	16	True				
ANR	874582	Statement	)	114:103:3683:3683	874546	17	True				
ANR	874583	CompoundStatement		5:105:228:228	874546	18					
ANR	874584	ExpressionStatement	"configWatcher -> addFile ( location + QLatin1String ( ""/taskmanagerrulesrc"" ) )"	115:8:3695:3766	874546	0	True				
ANR	874585	CallExpression	"configWatcher -> addFile ( location + QLatin1String ( ""/taskmanagerrulesrc"" ) )"		874546	0					
ANR	874586	Callee	configWatcher -> addFile		874546	0					
ANR	874587	PtrMemberAccess	configWatcher -> addFile		874546	0					
ANR	874588	Identifier	configWatcher		874546	0					
ANR	874589	Identifier	addFile		874546	1					
ANR	874590	ArgumentList	"location + QLatin1String ( ""/taskmanagerrulesrc"" )"		874546	1					
ANR	874591	Argument	"location + QLatin1String ( ""/taskmanagerrulesrc"" )"		874546	0					
ANR	874592	AdditiveExpression	"location + QLatin1String ( ""/taskmanagerrulesrc"" )"		874546	0		+			
ANR	874593	Identifier	location		874546	0					
ANR	874594	CallExpression	"QLatin1String ( ""/taskmanagerrulesrc"" )"		874546	1					
ANR	874595	Callee	QLatin1String		874546	0					
ANR	874596	Identifier	QLatin1String		874546	0					
ANR	874597	ArgumentList	"""/taskmanagerrulesrc"""		874546	1					
ANR	874598	Argument	"""/taskmanagerrulesrc"""		874546	0					
ANR	874599	PrimaryExpression	"""/taskmanagerrulesrc"""		874546	0					
ANR	874600	Statement	QObject	118:4:3779:3785	874546	19	True				
ANR	874601	Statement	::	118:11:3786:3787	874546	20	True				
ANR	874602	Statement	connect	118:13:3788:3794	874546	21	True				
ANR	874603	Statement	(	118:20:3795:3795	874546	22	True				
ANR	874604	Statement	configWatcher	118:21:3796:3808	874546	23	True				
ANR	874605	Statement	","	118:34:3809:3809	874546	24	True				
ANR	874606	Statement	&	118:36:3811:3811	874546	25	True				
ANR	874607	Statement	KDirWatch	118:37:3812:3820	874546	26	True				
ANR	874608	Statement	::	118:46:3821:3822	874546	27	True				
ANR	874609	Statement	dirty	118:48:3823:3827	874546	28	True				
ANR	874610	Statement	","	118:53:3828:3828	874546	29	True				
ANR	874611	Statement	[	118:55:3830:3830	874546	30	True				
ANR	874612	Statement	this	118:56:3831:3834	874546	31	True				
ANR	874613	Statement	]	118:60:3835:3835	874546	32	True				
ANR	874614	CompoundStatement		9:62:380:380	874546	33					
ANR	874615	ExpressionStatement	rulesConfig -> reparseConfiguration ( )	118:64:3839:3874	874546	0	True				
ANR	874616	CallExpression	rulesConfig -> reparseConfiguration ( )		874546	0					
ANR	874617	Callee	rulesConfig -> reparseConfiguration		874546	0					
ANR	874618	PtrMemberAccess	rulesConfig -> reparseConfiguration		874546	0					
ANR	874619	Identifier	rulesConfig		874546	0					
ANR	874620	Identifier	reparseConfiguration		874546	1					
ANR	874621	ArgumentList			874546	1					
ANR	874622	Statement	)	118:102:3877:3877	874546	34	True				
ANR	874623	ExpressionStatement		118:103:3878:3878	874546	35	True				
ANR	874624	Statement	QObject	119:4:3884:3890	874546	36	True				
ANR	874625	Statement	::	119:11:3891:3892	874546	37	True				
ANR	874626	Statement	connect	119:13:3893:3899	874546	38	True				
ANR	874627	Statement	(	119:20:3900:3900	874546	39	True				
ANR	874628	Statement	configWatcher	119:21:3901:3913	874546	40	True				
ANR	874629	Statement	","	119:34:3914:3914	874546	41	True				
ANR	874630	Statement	&	119:36:3916:3916	874546	42	True				
ANR	874631	Statement	KDirWatch	119:37:3917:3925	874546	43	True				
ANR	874632	Statement	::	119:46:3926:3927	874546	44	True				
ANR	874633	Statement	created	119:48:3928:3934	874546	45	True				
ANR	874634	Statement	","	119:55:3935:3935	874546	46	True				
ANR	874635	Statement	[	119:57:3937:3937	874546	47	True				
ANR	874636	Statement	this	119:58:3938:3941	874546	48	True				
ANR	874637	Statement	]	119:62:3942:3942	874546	49	True				
ANR	874638	CompoundStatement		10:64:487:487	874546	50					
ANR	874639	ExpressionStatement	rulesConfig -> reparseConfiguration ( )	119:66:3946:3981	874546	0	True				
ANR	874640	CallExpression	rulesConfig -> reparseConfiguration ( )		874546	0					
ANR	874641	Callee	rulesConfig -> reparseConfiguration		874546	0					
ANR	874642	PtrMemberAccess	rulesConfig -> reparseConfiguration		874546	0					
ANR	874643	Identifier	rulesConfig		874546	0					
ANR	874644	Identifier	reparseConfiguration		874546	1					
ANR	874645	ArgumentList			874546	1					
ANR	874646	Statement	)	119:104:3984:3984	874546	51	True				
ANR	874647	ExpressionStatement		119:105:3985:3985	874546	52	True				
ANR	874648	Statement	QObject	120:4:3991:3997	874546	53	True				
ANR	874649	Statement	::	120:11:3998:3999	874546	54	True				
ANR	874650	Statement	connect	120:13:4000:4006	874546	55	True				
ANR	874651	Statement	(	120:20:4007:4007	874546	56	True				
ANR	874652	Statement	configWatcher	120:21:4008:4020	874546	57	True				
ANR	874653	Statement	","	120:34:4021:4021	874546	58	True				
ANR	874654	Statement	&	120:36:4023:4023	874546	59	True				
ANR	874655	Statement	KDirWatch	120:37:4024:4032	874546	60	True				
ANR	874656	Statement	::	120:46:4033:4034	874546	61	True				
ANR	874657	Statement	deleted	120:48:4035:4041	874546	62	True				
ANR	874658	Statement	","	120:55:4042:4042	874546	63	True				
ANR	874659	Statement	[	120:57:4044:4044	874546	64	True				
ANR	874660	Statement	this	120:58:4045:4048	874546	65	True				
ANR	874661	Statement	]	120:62:4049:4049	874546	66	True				
ANR	874662	CompoundStatement		11:64:594:594	874546	67					
ANR	874663	ExpressionStatement	rulesConfig -> reparseConfiguration ( )	120:66:4053:4088	874546	0	True				
ANR	874664	CallExpression	rulesConfig -> reparseConfiguration ( )		874546	0					
ANR	874665	Callee	rulesConfig -> reparseConfiguration		874546	0					
ANR	874666	PtrMemberAccess	rulesConfig -> reparseConfiguration		874546	0					
ANR	874667	Identifier	rulesConfig		874546	0					
ANR	874668	Identifier	reparseConfiguration		874546	1					
ANR	874669	ArgumentList			874546	1					
ANR	874670	Statement	)	120:104:4091:4091	874546	68	True				
ANR	874671	ExpressionStatement		120:105:4092:4092	874546	69	True				
ANR	874672	ExpressionStatement	sycocaChangeTimer . setSingleShot ( true )	122:4:4099:4136	874546	70	True				
ANR	874673	CallExpression	sycocaChangeTimer . setSingleShot ( true )		874546	0					
ANR	874674	Callee	sycocaChangeTimer . setSingleShot		874546	0					
ANR	874675	MemberAccess	sycocaChangeTimer . setSingleShot		874546	0					
ANR	874676	Identifier	sycocaChangeTimer		874546	0					
ANR	874677	Identifier	setSingleShot		874546	1					
ANR	874678	ArgumentList	true		874546	1					
ANR	874679	Argument	true		874546	0					
ANR	874680	Identifier	true		874546	0					
ANR	874681	ExpressionStatement	sycocaChangeTimer . setInterval ( 100 )	123:4:4142:4176	874546	71	True				
ANR	874682	CallExpression	sycocaChangeTimer . setInterval ( 100 )		874546	0					
ANR	874683	Callee	sycocaChangeTimer . setInterval		874546	0					
ANR	874684	MemberAccess	sycocaChangeTimer . setInterval		874546	0					
ANR	874685	Identifier	sycocaChangeTimer		874546	0					
ANR	874686	Identifier	setInterval		874546	1					
ANR	874687	ArgumentList	100		874546	1					
ANR	874688	Argument	100		874546	0					
ANR	874689	PrimaryExpression	100		874546	0					
ANR	874690	Statement	QObject	125:4:4183:4189	874546	72	True				
ANR	874691	Statement	::	125:11:4190:4191	874546	73	True				
ANR	874692	Statement	connect	125:13:4192:4198	874546	74	True				
ANR	874693	Statement	(	125:20:4199:4199	874546	75	True				
ANR	874694	Statement	&	125:21:4200:4200	874546	76	True				
ANR	874695	Statement	sycocaChangeTimer	125:22:4201:4217	874546	77	True				
ANR	874696	Statement	","	125:39:4218:4218	874546	78	True				
ANR	874697	Statement	&	125:41:4220:4220	874546	79	True				
ANR	874698	Statement	QTimer	125:42:4221:4226	874546	80	True				
ANR	874699	Statement	::	125:48:4227:4228	874546	81	True				
ANR	874700	Statement	timeout	125:50:4229:4235	874546	82	True				
ANR	874701	Statement	","	125:57:4236:4236	874546	83	True				
ANR	874702	Statement	q	125:59:4238:4238	874546	84	True				
ANR	874703	Statement	","	125:60:4239:4239	874546	85	True				
ANR	874704	Statement	[	126:8:4249:4249	874546	86	True				
ANR	874705	Statement	this	126:9:4250:4253	874546	87	True				
ANR	874706	Statement	]	126:13:4254:4254	874546	88	True				
ANR	874707	Statement	(	126:14:4255:4255	874546	89	True				
ANR	874708	Statement	)	126:15:4256:4256	874546	90	True				
ANR	874709	CompoundStatement		17:17:801:801	874546	91					
ANR	874710	IfStatement	if ( ! windows . count ( ) )		874546	0					
ANR	874711	Condition	! windows . count ( )	127:16:4276:4291	874546	0	True				
ANR	874712	UnaryOperationExpression	! windows . count ( )		874546	0					
ANR	874713	UnaryOperator	!		874546	0					
ANR	874714	CallExpression	windows . count ( )		874546	1					
ANR	874715	Callee	windows . count		874546	0					
ANR	874716	MemberAccess	windows . count		874546	0					
ANR	874717	Identifier	windows		874546	0					
ANR	874718	Identifier	count		874546	1					
ANR	874719	ArgumentList			874546	1					
ANR	874720	CompoundStatement		18:34:837:837	874546	1					
ANR	874721	ReturnStatement	return ;	128:16:4312:4318	874546	0	True				
ANR	874722	ExpressionStatement	appDataCache . clear ( )	131:12:4347:4367	874546	1	True				
ANR	874723	CallExpression	appDataCache . clear ( )		874546	0					
ANR	874724	Callee	appDataCache . clear		874546	0					
ANR	874725	MemberAccess	appDataCache . clear		874546	0					
ANR	874726	Identifier	appDataCache		874546	0					
ANR	874727	Identifier	clear		874546	1					
ANR	874728	ArgumentList			874546	1					
ANR	874729	Statement	q	134:12:4454:4454	874546	2	True				
ANR	874730	Statement	->	134:13:4455:4456	874546	3	True				
ANR	874731	Statement	dataChanged	134:15:4457:4467	874546	4	True				
ANR	874732	Statement	(	134:26:4468:4468	874546	5	True				
ANR	874733	Statement	q	134:27:4469:4469	874546	6	True				
ANR	874734	Statement	->	134:28:4470:4471	874546	7	True				
ANR	874735	Statement	index	134:30:4472:4476	874546	8	True				
ANR	874736	Statement	(	134:35:4477:4477	874546	9	True				
ANR	874737	Statement	0	134:36:4478:4478	874546	10	True				
ANR	874738	Statement	","	134:37:4479:4479	874546	11	True				
ANR	874739	Statement	0	134:39:4481:4481	874546	12	True				
ANR	874740	Statement	)	134:40:4482:4482	874546	13	True				
ANR	874741	Statement	","	134:41:4483:4483	874546	14	True				
ANR	874742	Statement	q	134:44:4486:4486	874546	15	True				
ANR	874743	Statement	->	134:45:4487:4488	874546	16	True				
ANR	874744	Statement	index	134:47:4489:4493	874546	17	True				
ANR	874745	Statement	(	134:52:4494:4494	874546	18	True				
ANR	874746	Statement	windows	134:53:4495:4501	874546	19	True				
ANR	874747	Statement	.	134:60:4502:4502	874546	20	True				
ANR	874748	Statement	count	134:61:4503:4507	874546	21	True				
ANR	874749	Statement	(	134:66:4508:4508	874546	22	True				
ANR	874750	Statement	)	134:67:4509:4509	874546	23	True				
ANR	874751	Statement	-	134:69:4511:4511	874546	24	True				
ANR	874752	Statement	1	134:71:4513:4513	874546	25	True				
ANR	874753	Statement	","	134:72:4514:4514	874546	26	True				
ANR	874754	Statement	0	134:74:4516:4516	874546	27	True				
ANR	874755	Statement	)	134:75:4517:4517	874546	28	True				
ANR	874756	Statement	","	134:76:4518:4518	874546	29	True				
ANR	874757	Statement	QVector	135:16:4536:4542	874546	30	True				
ANR	874758	Statement	<	135:23:4543:4543	874546	31	True				
ANR	874759	Statement	int	135:24:4544:4546	874546	32	True				
ANR	874760	Statement	>	135:27:4547:4547	874546	33	True				
ANR	874761	CompoundStatement		26:28:1091:1091	874546	34					
ANR	874762	Statement	Qt	135:29:4549:4550	874546	0	True				
ANR	874763	Statement	::	135:31:4551:4552	874546	1	True				
ANR	874764	Statement	DecorationRole	135:33:4553:4566	874546	2	True				
ANR	874765	Statement	","	135:47:4567:4567	874546	3	True				
ANR	874766	Statement	AbstractTasksModel	135:49:4569:4586	874546	4	True				
ANR	874767	Statement	::	135:67:4587:4588	874546	5	True				
ANR	874768	Statement	AppId	135:69:4589:4593	874546	6	True				
ANR	874769	Statement	","	135:74:4594:4594	874546	7	True				
ANR	874770	Statement	AbstractTasksModel	136:16:4612:4629	874546	8	True				
ANR	874771	Statement	::	136:34:4630:4631	874546	9	True				
ANR	874772	Statement	AppName	136:36:4632:4638	874546	10	True				
ANR	874773	Statement	","	136:43:4639:4639	874546	11	True				
ANR	874774	Statement	AbstractTasksModel	136:45:4641:4658	874546	12	True				
ANR	874775	Statement	::	136:63:4659:4660	874546	13	True				
ANR	874776	Statement	GenericName	136:65:4661:4671	874546	14	True				
ANR	874777	Statement	","	136:76:4672:4672	874546	15	True				
ANR	874778	Statement	AbstractTasksModel	137:16:4690:4707	874546	16	True				
ANR	874779	Statement	::	137:34:4708:4709	874546	17	True				
ANR	874780	Statement	LauncherUrl	137:36:4710:4720	874546	18	True				
ANR	874781	Statement	)	137:48:4722:4722	874546	35	True				
ANR	874782	ExpressionStatement		137:49:4723:4723	874546	36	True				
ANR	874783	Statement	)	139:4:4739:4739	874546	92	True				
ANR	874784	ExpressionStatement		139:5:4740:4740	874546	93	True				
ANR	874785	Statement	void	141:4:4747:4750	874546	94	True				
ANR	874786	Statement	(	141:9:4752:4752	874546	95	True				
ANR	874787	Statement	KSycoca	141:10:4753:4759	874546	96	True				
ANR	874788	Statement	::	141:17:4760:4761	874546	97	True				
ANR	874789	Statement	*	141:19:4762:4762	874546	98	True				
ANR	874790	Statement	myDatabaseChangeSignal	141:20:4763:4784	874546	99	True				
ANR	874791	Statement	)	141:42:4785:4785	874546	100	True				
ANR	874792	Statement	(	141:43:4786:4786	874546	101	True				
ANR	874793	Statement	const	141:44:4787:4791	874546	102	True				
ANR	874794	Statement	QStringList	141:50:4793:4803	874546	103	True				
ANR	874795	Statement	&	141:62:4805:4805	874546	104	True				
ANR	874796	Statement	)	141:63:4806:4806	874546	105	True				
ANR	874797	Statement	=	141:65:4808:4808	874546	106	True				
ANR	874798	ExpressionStatement	& KSycoca :: databaseChanged	141:67:4810:4835	874546	107	True				
ANR	874799	UnaryOperationExpression	& KSycoca :: databaseChanged		874546	0					
ANR	874800	UnaryOperator	&		874546	0					
ANR	874801	Identifier	KSycoca :: databaseChanged		874546	1					
ANR	874802	Statement	QObject	142:4:4841:4847	874546	108	True				
ANR	874803	Statement	::	142:11:4848:4849	874546	109	True				
ANR	874804	Statement	connect	142:13:4850:4856	874546	110	True				
ANR	874805	Statement	(	142:20:4857:4857	874546	111	True				
ANR	874806	Statement	KSycoca	142:21:4858:4864	874546	112	True				
ANR	874807	Statement	::	142:28:4865:4866	874546	113	True				
ANR	874808	Statement	self	142:30:4867:4870	874546	114	True				
ANR	874809	Statement	(	142:34:4871:4871	874546	115	True				
ANR	874810	Statement	)	142:35:4872:4872	874546	116	True				
ANR	874811	Statement	","	142:36:4873:4873	874546	117	True				
ANR	874812	Statement	myDatabaseChangeSignal	142:38:4875:4896	874546	118	True				
ANR	874813	Statement	","	142:60:4897:4897	874546	119	True				
ANR	874814	Statement	q	142:62:4899:4899	874546	120	True				
ANR	874815	Statement	","	142:63:4900:4900	874546	121	True				
ANR	874816	Statement	[	143:8:4910:4910	874546	122	True				
ANR	874817	Statement	this	143:9:4911:4914	874546	123	True				
ANR	874818	Statement	]	143:13:4915:4915	874546	124	True				
ANR	874819	Statement	(	143:14:4916:4916	874546	125	True				
ANR	874820	Statement	const	143:15:4917:4921	874546	126	True				
ANR	874821	Statement	QStringList	143:21:4923:4933	874546	127	True				
ANR	874822	Statement	&	143:33:4935:4935	874546	128	True				
ANR	874823	Statement	changedResources	143:34:4936:4951	874546	129	True				
ANR	874824	Statement	)	143:50:4952:4952	874546	130	True				
ANR	874825	CompoundStatement		34:52:1497:1497	874546	131					
ANR	874826	IfStatement	"if ( changedResources . contains ( QLatin1String ( ""services"" ) ) || changedResources . contains ( QLatin1String ( ""apps"" ) ) || changedResources . contains ( QLatin1String ( ""xdgdata-apps"" ) ) )"		874546	0					
ANR	874827	Condition	"changedResources . contains ( QLatin1String ( ""services"" ) ) || changedResources . contains ( QLatin1String ( ""apps"" ) ) || changedResources . contains ( QLatin1String ( ""xdgdata-apps"" ) )"	144:16:4972:5167	874546	0	True				
ANR	874828	OrExpression	"changedResources . contains ( QLatin1String ( ""services"" ) ) || changedResources . contains ( QLatin1String ( ""apps"" ) ) || changedResources . contains ( QLatin1String ( ""xdgdata-apps"" ) )"		874546	0		||			
ANR	874829	CallExpression	"changedResources . contains ( QLatin1String ( ""services"" ) )"		874546	0					
ANR	874830	Callee	changedResources . contains		874546	0					
ANR	874831	MemberAccess	changedResources . contains		874546	0					
ANR	874832	Identifier	changedResources		874546	0					
ANR	874833	Identifier	contains		874546	1					
ANR	874834	ArgumentList	"QLatin1String ( ""services"" )"		874546	1					
ANR	874835	Argument	"QLatin1String ( ""services"" )"		874546	0					
ANR	874836	CallExpression	"QLatin1String ( ""services"" )"		874546	0					
ANR	874837	Callee	QLatin1String		874546	0					
ANR	874838	Identifier	QLatin1String		874546	0					
ANR	874839	ArgumentList	"""services"""		874546	1					
ANR	874840	Argument	"""services"""		874546	0					
ANR	874841	PrimaryExpression	"""services"""		874546	0					
ANR	874842	OrExpression	"changedResources . contains ( QLatin1String ( ""apps"" ) ) || changedResources . contains ( QLatin1String ( ""xdgdata-apps"" ) )"		874546	1		||			
ANR	874843	CallExpression	"changedResources . contains ( QLatin1String ( ""apps"" ) )"		874546	0					
ANR	874844	Callee	changedResources . contains		874546	0					
ANR	874845	MemberAccess	changedResources . contains		874546	0					
ANR	874846	Identifier	changedResources		874546	0					
ANR	874847	Identifier	contains		874546	1					
ANR	874848	ArgumentList	"QLatin1String ( ""apps"" )"		874546	1					
ANR	874849	Argument	"QLatin1String ( ""apps"" )"		874546	0					
ANR	874850	CallExpression	"QLatin1String ( ""apps"" )"		874546	0					
ANR	874851	Callee	QLatin1String		874546	0					
ANR	874852	Identifier	QLatin1String		874546	0					
ANR	874853	ArgumentList	"""apps"""		874546	1					
ANR	874854	Argument	"""apps"""		874546	0					
ANR	874855	PrimaryExpression	"""apps"""		874546	0					
ANR	874856	CallExpression	"changedResources . contains ( QLatin1String ( ""xdgdata-apps"" ) )"		874546	1					
ANR	874857	Callee	changedResources . contains		874546	0					
ANR	874858	MemberAccess	changedResources . contains		874546	0					
ANR	874859	Identifier	changedResources		874546	0					
ANR	874860	Identifier	contains		874546	1					
ANR	874861	ArgumentList	"QLatin1String ( ""xdgdata-apps"" )"		874546	1					
ANR	874862	Argument	"QLatin1String ( ""xdgdata-apps"" )"		874546	0					
ANR	874863	CallExpression	"QLatin1String ( ""xdgdata-apps"" )"		874546	0					
ANR	874864	Callee	QLatin1String		874546	0					
ANR	874865	Identifier	QLatin1String		874546	0					
ANR	874866	ArgumentList	"""xdgdata-apps"""		874546	1					
ANR	874867	Argument	"""xdgdata-apps"""		874546	0					
ANR	874868	PrimaryExpression	"""xdgdata-apps"""		874546	0					
ANR	874869	CompoundStatement		37:77:1713:1713	874546	1					
ANR	874870	ExpressionStatement	sycocaChangeTimer . start ( )	147:16:5188:5213	874546	0	True				
ANR	874871	CallExpression	sycocaChangeTimer . start ( )		874546	0					
ANR	874872	Callee	sycocaChangeTimer . start		874546	0					
ANR	874873	MemberAccess	sycocaChangeTimer . start		874546	0					
ANR	874874	Identifier	sycocaChangeTimer		874546	0					
ANR	874875	Identifier	start		874546	1					
ANR	874876	ArgumentList			874546	1					
ANR	874877	Statement	)	150:4:5243:5243	874546	132	True				
ANR	874878	ExpressionStatement		150:5:5244:5244	874546	133	True				
ANR	874879	Statement	QObject	152:4:5251:5257	874546	134	True				
ANR	874880	Statement	::	152:11:5258:5259	874546	135	True				
ANR	874881	Statement	connect	152:13:5260:5266	874546	136	True				
ANR	874882	Statement	(	152:20:5267:5267	874546	137	True				
ANR	874883	Statement	KWindowSystem	152:21:5268:5280	874546	138	True				
ANR	874884	Statement	::	152:34:5281:5282	874546	139	True				
ANR	874885	Statement	self	152:36:5283:5286	874546	140	True				
ANR	874886	Statement	(	152:40:5287:5287	874546	141	True				
ANR	874887	Statement	)	152:41:5288:5288	874546	142	True				
ANR	874888	Statement	","	152:42:5289:5289	874546	143	True				
ANR	874889	Statement	&	152:44:5291:5291	874546	144	True				
ANR	874890	Statement	KWindowSystem	152:45:5292:5304	874546	145	True				
ANR	874891	Statement	::	152:58:5305:5306	874546	146	True				
ANR	874892	Statement	windowAdded	152:60:5307:5317	874546	147	True				
ANR	874893	Statement	","	152:71:5318:5318	874546	148	True				
ANR	874894	Statement	q	152:73:5320:5320	874546	149	True				
ANR	874895	Statement	","	152:74:5321:5321	874546	150	True				
ANR	874896	Statement	[	153:8:5331:5331	874546	151	True				
ANR	874897	Statement	this	153:9:5332:5335	874546	152	True				
ANR	874898	Statement	]	153:13:5336:5336	874546	153	True				
ANR	874899	Statement	(	153:14:5337:5337	874546	154	True				
ANR	874900	Statement	WId	153:15:5338:5340	874546	155	True				
ANR	874901	Statement	window	153:19:5342:5347	874546	156	True				
ANR	874902	Statement	)	153:25:5348:5348	874546	157	True				
ANR	874903	CompoundStatement		44:27:1893:1893	874546	158					
ANR	874904	ExpressionStatement	addWindow ( window )	154:12:5364:5381	874546	0	True				
ANR	874905	CallExpression	addWindow ( window )		874546	0					
ANR	874906	Callee	addWindow		874546	0					
ANR	874907	Identifier	addWindow		874546	0					
ANR	874908	ArgumentList	window		874546	1					
ANR	874909	Argument	window		874546	0					
ANR	874910	Identifier	window		874546	0					
ANR	874911	Statement	)	156:4:5397:5397	874546	159	True				
ANR	874912	ExpressionStatement		156:5:5398:5398	874546	160	True				
ANR	874913	Statement	QObject	158:4:5405:5411	874546	161	True				
ANR	874914	Statement	::	158:11:5412:5413	874546	162	True				
ANR	874915	Statement	connect	158:13:5414:5420	874546	163	True				
ANR	874916	Statement	(	158:20:5421:5421	874546	164	True				
ANR	874917	Statement	KWindowSystem	158:21:5422:5434	874546	165	True				
ANR	874918	Statement	::	158:34:5435:5436	874546	166	True				
ANR	874919	Statement	self	158:36:5437:5440	874546	167	True				
ANR	874920	Statement	(	158:40:5441:5441	874546	168	True				
ANR	874921	Statement	)	158:41:5442:5442	874546	169	True				
ANR	874922	Statement	","	158:42:5443:5443	874546	170	True				
ANR	874923	Statement	&	158:44:5445:5445	874546	171	True				
ANR	874924	Statement	KWindowSystem	158:45:5446:5458	874546	172	True				
ANR	874925	Statement	::	158:58:5459:5460	874546	173	True				
ANR	874926	Statement	windowRemoved	158:60:5461:5473	874546	174	True				
ANR	874927	Statement	","	158:73:5474:5474	874546	175	True				
ANR	874928	Statement	q	158:75:5476:5476	874546	176	True				
ANR	874929	Statement	","	158:76:5477:5477	874546	177	True				
ANR	874930	Statement	[	159:8:5487:5487	874546	178	True				
ANR	874931	Statement	this	159:9:5488:5491	874546	179	True				
ANR	874932	Statement	]	159:13:5492:5492	874546	180	True				
ANR	874933	Statement	(	159:14:5493:5493	874546	181	True				
ANR	874934	Statement	WId	159:15:5494:5496	874546	182	True				
ANR	874935	Statement	window	159:19:5498:5503	874546	183	True				
ANR	874936	Statement	)	159:25:5504:5504	874546	184	True				
ANR	874937	CompoundStatement		50:27:2049:2049	874546	185					
ANR	874938	ExpressionStatement	removeWindow ( window )	160:12:5520:5540	874546	0	True				
ANR	874939	CallExpression	removeWindow ( window )		874546	0					
ANR	874940	Callee	removeWindow		874546	0					
ANR	874941	Identifier	removeWindow		874546	0					
ANR	874942	ArgumentList	window		874546	1					
ANR	874943	Argument	window		874546	0					
ANR	874944	Identifier	window		874546	0					
ANR	874945	Statement	)	162:4:5556:5556	874546	186	True				
ANR	874946	ExpressionStatement		162:5:5557:5557	874546	187	True				
ANR	874947	Statement	void	164:4:5564:5567	874546	188	True				
ANR	874948	Statement	(	164:9:5569:5569	874546	189	True				
ANR	874949	Statement	KWindowSystem	164:10:5570:5582	874546	190	True				
ANR	874950	Statement	::	164:23:5583:5584	874546	191	True				
ANR	874951	Statement	*	164:25:5585:5585	874546	192	True				
ANR	874952	Statement	myWindowChangeSignal	164:26:5586:5605	874546	193	True				
ANR	874953	Statement	)	164:46:5606:5606	874546	194	True				
ANR	874954	Statement	(	164:47:5607:5607	874546	195	True				
ANR	874955	Statement	WId	164:48:5608:5610	874546	196	True				
ANR	874956	Statement	window	164:52:5612:5617	874546	197	True				
ANR	874957	Statement	","	164:58:5618:5618	874546	198	True				
ANR	874958	Statement	NET	165:8:5628:5630	874546	199	True				
ANR	874959	Statement	::	165:11:5631:5632	874546	200	True				
ANR	874960	Statement	Properties	165:13:5633:5642	874546	201	True				
ANR	874961	Statement	properties	165:24:5644:5653	874546	202	True				
ANR	874962	Statement	","	165:34:5654:5654	874546	203	True				
ANR	874963	Statement	NET	165:36:5656:5658	874546	204	True				
ANR	874964	Statement	::	165:39:5659:5660	874546	205	True				
ANR	874965	Statement	Properties2	165:41:5661:5671	874546	206	True				
ANR	874966	Statement	properties2	165:53:5673:5683	874546	207	True				
ANR	874967	Statement	)	165:64:5684:5684	874546	208	True				
ANR	874968	Statement	=	165:66:5686:5686	874546	209	True				
ANR	874969	ExpressionStatement	& KWindowSystem :: windowChanged	165:68:5688:5717	874546	210	True				
ANR	874970	UnaryOperationExpression	& KWindowSystem :: windowChanged		874546	0					
ANR	874971	UnaryOperator	&		874546	0					
ANR	874972	Identifier	KWindowSystem :: windowChanged		874546	1					
ANR	874973	Statement	QObject	166:4:5723:5729	874546	211	True				
ANR	874974	Statement	::	166:11:5730:5731	874546	212	True				
ANR	874975	Statement	connect	166:13:5732:5738	874546	213	True				
ANR	874976	Statement	(	166:20:5739:5739	874546	214	True				
ANR	874977	Statement	KWindowSystem	166:21:5740:5752	874546	215	True				
ANR	874978	Statement	::	166:34:5753:5754	874546	216	True				
ANR	874979	Statement	self	166:36:5755:5758	874546	217	True				
ANR	874980	Statement	(	166:40:5759:5759	874546	218	True				
ANR	874981	Statement	)	166:41:5760:5760	874546	219	True				
ANR	874982	Statement	","	166:42:5761:5761	874546	220	True				
ANR	874983	Statement	myWindowChangeSignal	166:44:5763:5782	874546	221	True				
ANR	874984	Statement	","	166:64:5783:5783	874546	222	True				
ANR	874985	Statement	q	166:66:5785:5785	874546	223	True				
ANR	874986	Statement	","	166:67:5786:5786	874546	224	True				
ANR	874987	Statement	[	167:8:5796:5796	874546	225	True				
ANR	874988	Statement	this	167:9:5797:5800	874546	226	True				
ANR	874989	Statement	]	167:13:5801:5801	874546	227	True				
ANR	874990	Statement	(	167:14:5802:5802	874546	228	True				
ANR	874991	Statement	WId	167:15:5803:5805	874546	229	True				
ANR	874992	Statement	window	167:19:5807:5812	874546	230	True				
ANR	874993	Statement	","	167:25:5813:5813	874546	231	True				
ANR	874994	Statement	NET	167:27:5815:5817	874546	232	True				
ANR	874995	Statement	::	167:30:5818:5819	874546	233	True				
ANR	874996	Statement	Properties	167:32:5820:5829	874546	234	True				
ANR	874997	Statement	properties	167:43:5831:5840	874546	235	True				
ANR	874998	Statement	","	167:53:5841:5841	874546	236	True				
ANR	874999	Statement	NET	167:55:5843:5845	874546	237	True				
ANR	875000	Statement	::	167:58:5846:5847	874546	238	True				
ANR	875001	Statement	Properties2	167:60:5848:5858	874546	239	True				
ANR	875002	Statement	properties2	167:72:5860:5870	874546	240	True				
ANR	875003	Statement	)	167:83:5871:5871	874546	241	True				
ANR	875004	CompoundStatement		58:85:2416:2416	874546	242					
ANR	875005	ExpressionStatement	"windowChanged ( window , properties , properties2 )"	168:12:5887:5933	874546	0	True				
ANR	875006	CallExpression	"windowChanged ( window , properties , properties2 )"		874546	0					
ANR	875007	Callee	windowChanged		874546	0					
ANR	875008	Identifier	windowChanged		874546	0					
ANR	875009	ArgumentList	window		874546	1					
ANR	875010	Argument	window		874546	0					
ANR	875011	Identifier	window		874546	0					
ANR	875012	Argument	properties		874546	1					
ANR	875013	Identifier	properties		874546	0					
ANR	875014	Argument	properties2		874546	2					
ANR	875015	Identifier	properties2		874546	0					
ANR	875016	Statement	)	170:4:5949:5949	874546	243	True				
ANR	875017	ExpressionStatement		170:5:5950:5950	874546	244	True				
ANR	875018	Statement	QObject	173:4:6022:6028	874546	245	True				
ANR	875019	Statement	::	173:11:6029:6030	874546	246	True				
ANR	875020	Statement	connect	173:13:6031:6037	874546	247	True				
ANR	875021	Statement	(	173:20:6038:6038	874546	248	True				
ANR	875022	Statement	KWindowSystem	173:21:6039:6051	874546	249	True				
ANR	875023	Statement	::	173:34:6052:6053	874546	250	True				
ANR	875024	Statement	self	173:36:6054:6057	874546	251	True				
ANR	875025	Statement	(	173:40:6058:6058	874546	252	True				
ANR	875026	Statement	)	173:41:6059:6059	874546	253	True				
ANR	875027	Statement	","	173:42:6060:6060	874546	254	True				
ANR	875028	Statement	&	173:44:6062:6062	874546	255	True				
ANR	875029	Statement	KWindowSystem	173:45:6063:6075	874546	256	True				
ANR	875030	Statement	::	173:58:6076:6077	874546	257	True				
ANR	875031	Statement	activeWindowChanged	173:60:6078:6096	874546	258	True				
ANR	875032	Statement	","	173:79:6097:6097	874546	259	True				
ANR	875033	Statement	q	173:81:6099:6099	874546	260	True				
ANR	875034	Statement	","	173:82:6100:6100	874546	261	True				
ANR	875035	Statement	[	174:8:6110:6110	874546	262	True				
ANR	875036	Statement	this	174:9:6111:6114	874546	263	True				
ANR	875037	Statement	]	174:13:6115:6115	874546	264	True				
ANR	875038	Statement	(	174:14:6116:6116	874546	265	True				
ANR	875039	Statement	WId	174:15:6117:6119	874546	266	True				
ANR	875040	Statement	window	174:19:6121:6126	874546	267	True				
ANR	875041	Statement	)	174:25:6127:6127	874546	268	True				
ANR	875042	CompoundStatement		69:12:2776:2818	874546	269					
ANR	875043	IdentifierDeclStatement	const WId oldActiveWindow = activeWindow ;	175:12:6143:6183	874546	0	True				
ANR	875044	IdentifierDecl	oldActiveWindow = activeWindow		874546	0					
ANR	875045	IdentifierDeclType	const WId		874546	0					
ANR	875046	Identifier	oldActiveWindow		874546	1					
ANR	875047	AssignmentExpression	oldActiveWindow = activeWindow		874546	2		=			
ANR	875048	Identifier	activeWindow		874546	0					
ANR	875049	Identifier	activeWindow		874546	1					
ANR	875050	ExpressionStatement	activeWindow = window	176:12:6197:6218	874546	1	True				
ANR	875051	AssignmentExpression	activeWindow = window		874546	0		=			
ANR	875052	Identifier	activeWindow		874546	0					
ANR	875053	Identifier	window		874546	1					
ANR	875054	IdentifierDeclStatement	int row = windows . indexOf ( oldActiveWindow ) ;	178:12:6233:6275	874546	2	True				
ANR	875055	IdentifierDecl	row = windows . indexOf ( oldActiveWindow )		874546	0					
ANR	875056	IdentifierDeclType	int		874546	0					
ANR	875057	Identifier	row		874546	1					
ANR	875058	AssignmentExpression	row = windows . indexOf ( oldActiveWindow )		874546	2		=			
ANR	875059	Identifier	row		874546	0					
ANR	875060	CallExpression	windows . indexOf ( oldActiveWindow )		874546	1					
ANR	875061	Callee	windows . indexOf		874546	0					
ANR	875062	MemberAccess	windows . indexOf		874546	0					
ANR	875063	Identifier	windows		874546	0					
ANR	875064	Identifier	indexOf		874546	1					
ANR	875065	ArgumentList	oldActiveWindow		874546	1					
ANR	875066	Argument	oldActiveWindow		874546	0					
ANR	875067	Identifier	oldActiveWindow		874546	0					
ANR	875068	IfStatement	if ( row != - 1 )		874546	3					
ANR	875069	Condition	row != - 1	180:16:6294:6302	874546	0	True				
ANR	875070	EqualityExpression	row != - 1		874546	0		!=			
ANR	875071	Identifier	row		874546	0					
ANR	875072	UnaryOperationExpression	- 1		874546	1					
ANR	875073	UnaryOperator	-		874546	0					
ANR	875074	PrimaryExpression	1		874546	1					
ANR	875075	CompoundStatement		71:27:2848:2848	874546	1					
ANR	875076	Statement	dataChanged	181:16:6323:6333	874546	0	True				
ANR	875077	Statement	(	181:27:6334:6334	874546	1	True				
ANR	875078	Statement	oldActiveWindow	181:28:6335:6349	874546	2	True				
ANR	875079	Statement	","	181:43:6350:6350	874546	3	True				
ANR	875080	Statement	QVector	181:45:6352:6358	874546	4	True				
ANR	875081	Statement	<	181:52:6359:6359	874546	5	True				
ANR	875082	Statement	int	181:53:6360:6362	874546	6	True				
ANR	875083	Statement	>	181:56:6363:6363	874546	7	True				
ANR	875084	CompoundStatement		72:57:2907:2907	874546	8					
ANR	875085	Statement	IsActive	181:58:6365:6372	874546	0	True				
ANR	875086	Statement	)	181:67:6374:6374	874546	9	True				
ANR	875087	ExpressionStatement		181:68:6375:6375	874546	10	True				
ANR	875088	ExpressionStatement	row = windows . indexOf ( window )	184:12:6404:6433	874546	4	True				
ANR	875089	AssignmentExpression	row = windows . indexOf ( window )		874546	0		=			
ANR	875090	Identifier	row		874546	0					
ANR	875091	CallExpression	windows . indexOf ( window )		874546	1					
ANR	875092	Callee	windows . indexOf		874546	0					
ANR	875093	MemberAccess	windows . indexOf		874546	0					
ANR	875094	Identifier	windows		874546	0					
ANR	875095	Identifier	indexOf		874546	1					
ANR	875096	ArgumentList	window		874546	1					
ANR	875097	Argument	window		874546	0					
ANR	875098	Identifier	window		874546	0					
ANR	875099	IfStatement	if ( row != - 1 )		874546	5					
ANR	875100	Condition	row != - 1	186:16:6452:6460	874546	0	True				
ANR	875101	EqualityExpression	row != - 1		874546	0		!=			
ANR	875102	Identifier	row		874546	0					
ANR	875103	UnaryOperationExpression	- 1		874546	1					
ANR	875104	UnaryOperator	-		874546	0					
ANR	875105	PrimaryExpression	1		874546	1					
ANR	875106	CompoundStatement		77:27:3006:3006	874546	1					
ANR	875107	Statement	dataChanged	187:16:6481:6491	874546	0	True				
ANR	875108	Statement	(	187:27:6492:6492	874546	1	True				
ANR	875109	Statement	window	187:28:6493:6498	874546	2	True				
ANR	875110	Statement	","	187:34:6499:6499	874546	3	True				
ANR	875111	Statement	QVector	187:36:6501:6507	874546	4	True				
ANR	875112	Statement	<	187:43:6508:6508	874546	5	True				
ANR	875113	Statement	int	187:44:6509:6511	874546	6	True				
ANR	875114	Statement	>	187:47:6512:6512	874546	7	True				
ANR	875115	CompoundStatement		78:48:3056:3056	874546	8					
ANR	875116	Statement	IsActive	187:49:6514:6521	874546	0	True				
ANR	875117	Statement	)	187:58:6523:6523	874546	9	True				
ANR	875118	ExpressionStatement		187:59:6524:6524	874546	10	True				
ANR	875119	Statement	)	190:4:6554:6554	874546	270	True				
ANR	875120	ExpressionStatement		190:5:6555:6555	874546	271	True				
ANR	875121	ExpressionStatement	activeWindow = KWindowSystem :: activeWindow ( )	192:4:6562:6606	874546	272	True				
ANR	875122	AssignmentExpression	activeWindow = KWindowSystem :: activeWindow ( )		874546	0		=			
ANR	875123	Identifier	activeWindow		874546	0					
ANR	875124	CallExpression	KWindowSystem :: activeWindow ( )		874546	1					
ANR	875125	Callee	KWindowSystem :: activeWindow		874546	0					
ANR	875126	Identifier	KWindowSystem :: activeWindow		874546	0					
ANR	875127	ArgumentList			874546	1					
ANR	875128	Statement	foreach	195:4:6642:6648	874546	273	True				
ANR	875129	Statement	(	195:11:6649:6649	874546	274	True				
ANR	875130	Statement	const	195:12:6650:6654	874546	275	True				
ANR	875131	Statement	WId	195:18:6656:6658	874546	276	True				
ANR	875132	Statement	window	195:22:6660:6665	874546	277	True				
ANR	875133	Statement	","	195:28:6666:6666	874546	278	True				
ANR	875134	Statement	KWindowSystem	195:30:6668:6680	874546	279	True				
ANR	875135	Statement	::	195:43:6681:6682	874546	280	True				
ANR	875136	Statement	windows	195:45:6683:6689	874546	281	True				
ANR	875137	Statement	(	195:52:6690:6690	874546	282	True				
ANR	875138	Statement	)	195:53:6691:6691	874546	283	True				
ANR	875139	Statement	)	195:54:6692:6692	874546	284	True				
ANR	875140	CompoundStatement		86:56:3237:3237	874546	285					
ANR	875141	ExpressionStatement	addWindow ( window )	196:8:6704:6721	874546	0	True				
ANR	875142	CallExpression	addWindow ( window )		874546	0					
ANR	875143	Callee	addWindow		874546	0					
ANR	875144	Identifier	addWindow		874546	0					
ANR	875145	ArgumentList	window		874546	1					
ANR	875146	Argument	window		874546	0					
ANR	875147	Identifier	window		874546	0					
ANR	875148	ReturnType	void		874546	1					
ANR	875149	Identifier	XWindowTasksModel :: Private :: init		874546	2					
ANR	875150	ParameterList			874546	3					
ANR	875151	CFGEntryNode	ENTRY		874546		True				
ANR	875152	CFGExitNode	EXIT		874546		True				
ANR	875153	Symbol	configWatcher		874546						
ANR	875154	Symbol	appDataCache		874546						
ANR	875155	Symbol	oldActiveWindow		874546						
ANR	875156	Symbol	sycocaChangeTimer		874546						
ANR	875157	Symbol	windows		874546						
ANR	875158	Symbol	QLatin1String		874546						
ANR	875159	Symbol	q		874546						
ANR	875160	Symbol	windows . indexOf		874546						
ANR	875161	Symbol	changedResources		874546						
ANR	875162	Symbol	KSharedConfig :: openConfig		874546						
ANR	875163	Symbol	rulesConfig		874546						
ANR	875164	Symbol	true		874546						
ANR	875165	Symbol	windows . count		874546						
ANR	875166	Symbol	changedResources . contains		874546						
ANR	875167	Symbol	KWindowSystem :: activeWindow		874546						
ANR	875168	Symbol	QStringLiteral		874546						
ANR	875169	Symbol	location		874546						
ANR	875170	Symbol	window		874546						
ANR	875171	Symbol	properties2		874546						
ANR	875172	Symbol	row		874546						
ANR	875173	Symbol	activeWindow		874546						
ANR	875174	Symbol	properties		874546						
ANR	875175	Function	XWindowTasksModel :: Private :: addWindow	200:0:6732:8359							
ANR	875176	FunctionDef	XWindowTasksModel :: Private :: addWindow (WId window)		875175	0					
ANR	875177	CompoundStatement		201:0:6787:8359	875175	0					
ANR	875178	IfStatement	if ( windows . contains ( window ) )		875175	0					
ANR	875179	Condition	windows . contains ( window )	203:8:6828:6851	875175	0	True				
ANR	875180	CallExpression	windows . contains ( window )		875175	0					
ANR	875181	Callee	windows . contains		875175	0					
ANR	875182	MemberAccess	windows . contains		875175	0					
ANR	875183	Identifier	windows		875175	0					
ANR	875184	Identifier	contains		875175	1					
ANR	875185	ArgumentList	window		875175	1					
ANR	875186	Argument	window		875175	0					
ANR	875187	Identifier	window		875175	0					
ANR	875188	CompoundStatement		3:34:66:66	875175	1					
ANR	875189	ReturnStatement	return ;	204:8:6864:6870	875175	0	True				
ANR	875190	IdentifierDeclStatement	"KWindowInfo info ( window , NET :: WMWindowType | NET :: WMState | NET :: WMName | NET :: WMVisibleName , NET :: WM2TransientFor ) ;"	207:4:6883:7040	875175	1	True				
ANR	875191	IdentifierDecl	"info ( window , NET :: WMWindowType | NET :: WMState | NET :: WMName | NET :: WMVisibleName , NET :: WM2TransientFor )"		875175	0					
ANR	875192	IdentifierDeclType	KWindowInfo		875175	0					
ANR	875193	Identifier	info		875175	1					
ANR	875194	Expression	"window , NET :: WMWindowType | NET :: WMState | NET :: WMName | NET :: WMVisibleName , NET :: WM2TransientFor"		875175	2					
ANR	875195	Identifier	window		875175	0					
ANR	875196	Expression	"NET :: WMWindowType | NET :: WMState | NET :: WMName | NET :: WMVisibleName , NET :: WM2TransientFor"		875175	1					
ANR	875197	InclusiveOrExpression	NET :: WMWindowType | NET :: WMState | NET :: WMName | NET :: WMVisibleName		875175	0		|			
ANR	875198	Identifier	NET :: WMWindowType		875175	0					
ANR	875199	InclusiveOrExpression	NET :: WMState | NET :: WMName | NET :: WMVisibleName		875175	1		|			
ANR	875200	Identifier	NET :: WMState		875175	0					
ANR	875201	InclusiveOrExpression	NET :: WMName | NET :: WMVisibleName		875175	1		|			
ANR	875202	Identifier	NET :: WMName		875175	0					
ANR	875203	Identifier	NET :: WMVisibleName		875175	1					
ANR	875204	Identifier	NET :: WM2TransientFor		875175	1					
ANR	875205	IdentifierDeclStatement	NET :: WindowType wType = info . windowType ( NET :: NormalMask | NET :: DesktopMask | NET :: DockMask | NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask ) ;	211:4:7047:7399	875175	2	True				
ANR	875206	IdentifierDecl	wType = info . windowType ( NET :: NormalMask | NET :: DesktopMask | NET :: DockMask | NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask )		875175	0					
ANR	875207	IdentifierDeclType	NET :: WindowType		875175	0					
ANR	875208	Identifier	wType		875175	1					
ANR	875209	AssignmentExpression	wType = info . windowType ( NET :: NormalMask | NET :: DesktopMask | NET :: DockMask | NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask )		875175	2		=			
ANR	875210	Identifier	wType		875175	0					
ANR	875211	CallExpression	info . windowType ( NET :: NormalMask | NET :: DesktopMask | NET :: DockMask | NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask )		875175	1					
ANR	875212	Callee	info . windowType		875175	0					
ANR	875213	MemberAccess	info . windowType		875175	0					
ANR	875214	Identifier	info		875175	0					
ANR	875215	Identifier	windowType		875175	1					
ANR	875216	ArgumentList	NET :: NormalMask | NET :: DesktopMask | NET :: DockMask | NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	1					
ANR	875217	Argument	NET :: NormalMask | NET :: DesktopMask | NET :: DockMask | NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	0					
ANR	875218	InclusiveOrExpression	NET :: NormalMask | NET :: DesktopMask | NET :: DockMask | NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	0		|			
ANR	875219	Identifier	NET :: NormalMask		875175	0					
ANR	875220	InclusiveOrExpression	NET :: DesktopMask | NET :: DockMask | NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	1		|			
ANR	875221	Identifier	NET :: DesktopMask		875175	0					
ANR	875222	InclusiveOrExpression	NET :: DockMask | NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	1		|			
ANR	875223	Identifier	NET :: DockMask		875175	0					
ANR	875224	InclusiveOrExpression	NET :: ToolbarMask | NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	1		|			
ANR	875225	Identifier	NET :: ToolbarMask		875175	0					
ANR	875226	InclusiveOrExpression	NET :: MenuMask | NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	1		|			
ANR	875227	Identifier	NET :: MenuMask		875175	0					
ANR	875228	InclusiveOrExpression	NET :: DialogMask | NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	1		|			
ANR	875229	Identifier	NET :: DialogMask		875175	0					
ANR	875230	InclusiveOrExpression	NET :: OverrideMask | NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	1		|			
ANR	875231	Identifier	NET :: OverrideMask		875175	0					
ANR	875232	InclusiveOrExpression	NET :: TopMenuMask | NET :: UtilityMask | NET :: SplashMask		875175	1		|			
ANR	875233	Identifier	NET :: TopMenuMask		875175	0					
ANR	875234	InclusiveOrExpression	NET :: UtilityMask | NET :: SplashMask		875175	1		|			
ANR	875235	Identifier	NET :: UtilityMask		875175	0					
ANR	875236	Identifier	NET :: SplashMask		875175	1					
ANR	875237	IdentifierDeclStatement	const WId leader = info . transientFor ( ) ;	216:4:7406:7444	875175	3	True				
ANR	875238	IdentifierDecl	leader = info . transientFor ( )		875175	0					
ANR	875239	IdentifierDeclType	const WId		875175	0					
ANR	875240	Identifier	leader		875175	1					
ANR	875241	AssignmentExpression	leader = info . transientFor ( )		875175	2		=			
ANR	875242	Identifier	leader		875175	0					
ANR	875243	CallExpression	info . transientFor ( )		875175	1					
ANR	875244	Callee	info . transientFor		875175	0					
ANR	875245	MemberAccess	info . transientFor		875175	0					
ANR	875246	Identifier	info		875175	0					
ANR	875247	Identifier	transientFor		875175	1					
ANR	875248	ArgumentList			875175	1					
ANR	875249	IfStatement	if ( leader > 0 && leader != window && leader != QX11Info :: appRootWindow ( ) && ! transients . contains ( window ) && windows . contains ( leader ) )		875175	4					
ANR	875250	Condition	leader > 0 && leader != window && leader != QX11Info :: appRootWindow ( ) && ! transients . contains ( window ) && windows . contains ( leader )	219:8:7480:7616	875175	0	True				
ANR	875251	AndExpression	leader > 0 && leader != window && leader != QX11Info :: appRootWindow ( ) && ! transients . contains ( window ) && windows . contains ( leader )		875175	0		&&			
ANR	875252	RelationalExpression	leader > 0		875175	0		>			
ANR	875253	Identifier	leader		875175	0					
ANR	875254	PrimaryExpression	0		875175	1					
ANR	875255	AndExpression	leader != window && leader != QX11Info :: appRootWindow ( ) && ! transients . contains ( window ) && windows . contains ( leader )		875175	1		&&			
ANR	875256	EqualityExpression	leader != window		875175	0		!=			
ANR	875257	Identifier	leader		875175	0					
ANR	875258	Identifier	window		875175	1					
ANR	875259	AndExpression	leader != QX11Info :: appRootWindow ( ) && ! transients . contains ( window ) && windows . contains ( leader )		875175	1		&&			
ANR	875260	EqualityExpression	leader != QX11Info :: appRootWindow ( )		875175	0		!=			
ANR	875261	Identifier	leader		875175	0					
ANR	875262	CallExpression	QX11Info :: appRootWindow ( )		875175	1					
ANR	875263	Callee	QX11Info :: appRootWindow		875175	0					
ANR	875264	Identifier	QX11Info :: appRootWindow		875175	0					
ANR	875265	ArgumentList			875175	1					
ANR	875266	AndExpression	! transients . contains ( window ) && windows . contains ( leader )		875175	1		&&			
ANR	875267	UnaryOperationExpression	! transients . contains ( window )		875175	0					
ANR	875268	UnaryOperator	!		875175	0					
ANR	875269	CallExpression	transients . contains ( window )		875175	1					
ANR	875270	Callee	transients . contains		875175	0					
ANR	875271	MemberAccess	transients . contains		875175	0					
ANR	875272	Identifier	transients		875175	0					
ANR	875273	Identifier	contains		875175	1					
ANR	875274	ArgumentList	window		875175	1					
ANR	875275	Argument	window		875175	0					
ANR	875276	Identifier	window		875175	0					
ANR	875277	CallExpression	windows . contains ( leader )		875175	1					
ANR	875278	Callee	windows . contains		875175	0					
ANR	875279	MemberAccess	windows . contains		875175	0					
ANR	875280	Identifier	windows		875175	0					
ANR	875281	Identifier	contains		875175	1					
ANR	875282	ArgumentList	leader		875175	1					
ANR	875283	Argument	leader		875175	0					
ANR	875284	Identifier	leader		875175	0					
ANR	875285	CompoundStatement		20:69:831:831	875175	1					
ANR	875286	ExpressionStatement	transients . insert ( window )	221:8:7629:7654	875175	0	True				
ANR	875287	CallExpression	transients . insert ( window )		875175	0					
ANR	875288	Callee	transients . insert		875175	0					
ANR	875289	MemberAccess	transients . insert		875175	0					
ANR	875290	Identifier	transients		875175	0					
ANR	875291	Identifier	insert		875175	1					
ANR	875292	ArgumentList	window		875175	1					
ANR	875293	Argument	window		875175	0					
ANR	875294	Identifier	window		875175	0					
ANR	875295	IfStatement	if ( info . hasState ( NET :: DemandsAttention ) && windows . contains ( leader ) )		875175	1					
ANR	875296	Condition	info . hasState ( NET :: DemandsAttention ) && windows . contains ( leader )	224:12:7723:7786	875175	0	True				
ANR	875297	AndExpression	info . hasState ( NET :: DemandsAttention ) && windows . contains ( leader )		875175	0		&&			
ANR	875298	CallExpression	info . hasState ( NET :: DemandsAttention )		875175	0					
ANR	875299	Callee	info . hasState		875175	0					
ANR	875300	MemberAccess	info . hasState		875175	0					
ANR	875301	Identifier	info		875175	0					
ANR	875302	Identifier	hasState		875175	1					
ANR	875303	ArgumentList	NET :: DemandsAttention		875175	1					
ANR	875304	Argument	NET :: DemandsAttention		875175	0					
ANR	875305	Identifier	NET :: DemandsAttention		875175	0					
ANR	875306	CallExpression	windows . contains ( leader )		875175	1					
ANR	875307	Callee	windows . contains		875175	0					
ANR	875308	MemberAccess	windows . contains		875175	0					
ANR	875309	Identifier	windows		875175	0					
ANR	875310	Identifier	contains		875175	1					
ANR	875311	ArgumentList	leader		875175	1					
ANR	875312	Argument	leader		875175	0					
ANR	875313	Identifier	leader		875175	0					
ANR	875314	CompoundStatement		24:78:1001:1001	875175	1					
ANR	875315	ExpressionStatement	"transientsDemandingAttention . insertMulti ( leader , window )"	225:12:7803:7859	875175	0	True				
ANR	875316	CallExpression	"transientsDemandingAttention . insertMulti ( leader , window )"		875175	0					
ANR	875317	Callee	transientsDemandingAttention . insertMulti		875175	0					
ANR	875318	MemberAccess	transientsDemandingAttention . insertMulti		875175	0					
ANR	875319	Identifier	transientsDemandingAttention		875175	0					
ANR	875320	Identifier	insertMulti		875175	1					
ANR	875321	ArgumentList	leader		875175	1					
ANR	875322	Argument	leader		875175	0					
ANR	875323	Identifier	leader		875175	0					
ANR	875324	Argument	window		875175	1					
ANR	875325	Identifier	window		875175	0					
ANR	875326	Statement	dataChanged	226:12:7873:7883	875175	1	True				
ANR	875327	Statement	(	226:23:7884:7884	875175	2	True				
ANR	875328	Statement	leader	226:24:7885:7890	875175	3	True				
ANR	875329	Statement	","	226:30:7891:7891	875175	4	True				
ANR	875330	Statement	QVector	226:32:7893:7899	875175	5	True				
ANR	875331	Statement	<	226:39:7900:7900	875175	6	True				
ANR	875332	Statement	int	226:40:7901:7903	875175	7	True				
ANR	875333	Statement	>	226:43:7904:7904	875175	8	True				
ANR	875334	CompoundStatement		26:44:1117:1117	875175	9					
ANR	875335	Statement	IsDemandingAttention	226:45:7906:7925	875175	0	True				
ANR	875336	Statement	)	226:66:7927:7927	875175	10	True				
ANR	875337	ExpressionStatement		226:67:7928:7928	875175	11	True				
ANR	875338	ReturnStatement	return ;	229:8:7949:7955	875175	2	True				
ANR	875339	IfStatement	if ( wType != NET :: Normal && wType != NET :: Override && wType != NET :: Unknown && wType != NET :: Dialog && wType != NET :: Utility )		875175	5					
ANR	875340	Condition	wType != NET :: Normal && wType != NET :: Override && wType != NET :: Unknown && wType != NET :: Dialog && wType != NET :: Utility	233:8:8059:8186	875175	0	True				
ANR	875341	AndExpression	wType != NET :: Normal && wType != NET :: Override && wType != NET :: Unknown && wType != NET :: Dialog && wType != NET :: Utility		875175	0		&&			
ANR	875342	EqualityExpression	wType != NET :: Normal		875175	0		!=			
ANR	875343	Identifier	wType		875175	0					
ANR	875344	Identifier	NET :: Normal		875175	1					
ANR	875345	AndExpression	wType != NET :: Override && wType != NET :: Unknown && wType != NET :: Dialog && wType != NET :: Utility		875175	1		&&			
ANR	875346	EqualityExpression	wType != NET :: Override		875175	0		!=			
ANR	875347	Identifier	wType		875175	0					
ANR	875348	Identifier	NET :: Override		875175	1					
ANR	875349	AndExpression	wType != NET :: Unknown && wType != NET :: Dialog && wType != NET :: Utility		875175	1		&&			
ANR	875350	EqualityExpression	wType != NET :: Unknown		875175	0		!=			
ANR	875351	Identifier	wType		875175	0					
ANR	875352	Identifier	NET :: Unknown		875175	1					
ANR	875353	AndExpression	wType != NET :: Dialog && wType != NET :: Utility		875175	1		&&			
ANR	875354	EqualityExpression	wType != NET :: Dialog		875175	0		!=			
ANR	875355	Identifier	wType		875175	0					
ANR	875356	Identifier	NET :: Dialog		875175	1					
ANR	875357	EqualityExpression	wType != NET :: Utility		875175	1		!=			
ANR	875358	Identifier	wType		875175	0					
ANR	875359	Identifier	NET :: Utility		875175	1					
ANR	875360	CompoundStatement		34:55:1401:1401	875175	1					
ANR	875361	ReturnStatement	return ;	236:8:8200:8206	875175	0	True				
ANR	875362	IdentifierDeclStatement	const int count = windows . count ( ) ;	239:4:8219:8252	875175	6	True				
ANR	875363	IdentifierDecl	count = windows . count ( )		875175	0					
ANR	875364	IdentifierDeclType	const int		875175	0					
ANR	875365	Identifier	count		875175	1					
ANR	875366	AssignmentExpression	count = windows . count ( )		875175	2		=			
ANR	875367	Identifier	count		875175	0					
ANR	875368	CallExpression	windows . count ( )		875175	1					
ANR	875369	Callee	windows . count		875175	0					
ANR	875370	MemberAccess	windows . count		875175	0					
ANR	875371	Identifier	windows		875175	0					
ANR	875372	Identifier	count		875175	1					
ANR	875373	ArgumentList			875175	1					
ANR	875374	ExpressionStatement	"q -> beginInsertRows ( QModelIndex ( ) , count , count )"	240:4:8258:8305	875175	7	True				
ANR	875375	CallExpression	"q -> beginInsertRows ( QModelIndex ( ) , count , count )"		875175	0					
ANR	875376	Callee	q -> beginInsertRows		875175	0					
ANR	875377	PtrMemberAccess	q -> beginInsertRows		875175	0					
ANR	875378	Identifier	q		875175	0					
ANR	875379	Identifier	beginInsertRows		875175	1					
ANR	875380	ArgumentList	QModelIndex ( )		875175	1					
ANR	875381	Argument	QModelIndex ( )		875175	0					
ANR	875382	CallExpression	QModelIndex ( )		875175	0					
ANR	875383	Callee	QModelIndex		875175	0					
ANR	875384	Identifier	QModelIndex		875175	0					
ANR	875385	ArgumentList			875175	1					
ANR	875386	Argument	count		875175	1					
ANR	875387	Identifier	count		875175	0					
ANR	875388	Argument	count		875175	2					
ANR	875389	Identifier	count		875175	0					
ANR	875390	ExpressionStatement	windows . append ( window )	241:4:8311:8333	875175	8	True				
ANR	875391	CallExpression	windows . append ( window )		875175	0					
ANR	875392	Callee	windows . append		875175	0					
ANR	875393	MemberAccess	windows . append		875175	0					
ANR	875394	Identifier	windows		875175	0					
ANR	875395	Identifier	append		875175	1					
ANR	875396	ArgumentList	window		875175	1					
ANR	875397	Argument	window		875175	0					
ANR	875398	Identifier	window		875175	0					
ANR	875399	ExpressionStatement	q -> endInsertRows ( )	242:4:8339:8357	875175	9	True				
ANR	875400	CallExpression	q -> endInsertRows ( )		875175	0					
ANR	875401	Callee	q -> endInsertRows		875175	0					
ANR	875402	PtrMemberAccess	q -> endInsertRows		875175	0					
ANR	875403	Identifier	q		875175	0					
ANR	875404	Identifier	endInsertRows		875175	1					
ANR	875405	ArgumentList			875175	1					
ANR	875406	ReturnType	void		875175	1					
ANR	875407	Identifier	XWindowTasksModel :: Private :: addWindow		875175	2					
ANR	875408	ParameterList	WId window		875175	3					
ANR	875409	Parameter	WId window	200:43:6775:6784	875175	0	True				
ANR	875410	ParameterType	WId		875175	0					
ANR	875411	Identifier	window		875175	1					
ANR	875412	CFGEntryNode	ENTRY		875175		True				
ANR	875413	CFGExitNode	EXIT		875175		True				
ANR	875414	Symbol	NET :: Unknown		875175						
ANR	875415	Symbol	NET :: ToolbarMask		875175						
ANR	875416	Symbol	leader		875175						
ANR	875417	Symbol	NET :: Utility		875175						
ANR	875418	Symbol	windows . contains		875175						
ANR	875419	Symbol	QX11Info :: appRootWindow		875175						
ANR	875420	Symbol	NET :: DemandsAttention		875175						
ANR	875421	Symbol	NET :: NormalMask		875175						
ANR	875422	Symbol	transients		875175						
ANR	875423	Symbol	info		875175						
ANR	875424	Symbol	NET :: DialogMask		875175						
ANR	875425	Symbol	NET :: Override		875175						
ANR	875426	Symbol	NET :: DesktopMask		875175						
ANR	875427	Symbol	info . hasState		875175						
ANR	875428	Symbol	wType		875175						
ANR	875429	Symbol	NET :: UtilityMask		875175						
ANR	875430	Symbol	transientsDemandingAttention		875175						
ANR	875431	Symbol	transients . contains		875175						
ANR	875432	Symbol	count		875175						
ANR	875433	Symbol	windows		875175						
ANR	875434	Symbol	NET :: DockMask		875175						
ANR	875435	Symbol	info . transientFor		875175						
ANR	875436	Symbol	q		875175						
ANR	875437	Symbol	NET :: OverrideMask		875175						
ANR	875438	Symbol	NET :: TopMenuMask		875175						
ANR	875439	Symbol	NET :: Dialog		875175						
ANR	875440	Symbol	QModelIndex		875175						
ANR	875441	Symbol	NET :: SplashMask		875175						
ANR	875442	Symbol	NET :: MenuMask		875175						
ANR	875443	Symbol	info . windowType		875175						
ANR	875444	Symbol	windows . count		875175						
ANR	875445	Symbol	NET :: Normal		875175						
ANR	875446	Symbol	window		875175						
ANR	875447	Function	XWindowTasksModel :: Private :: removeWindow	245:0:8362:9317							
ANR	875448	FunctionDef	XWindowTasksModel :: Private :: removeWindow (WId window)		875447	0					
ANR	875449	CompoundStatement		246:0:8420:9317	875447	0					
ANR	875450	IdentifierDeclStatement	const int row = windows . indexOf ( window ) ;	247:4:8426:8465	875447	0	True				
ANR	875451	IdentifierDecl	row = windows . indexOf ( window )		875447	0					
ANR	875452	IdentifierDeclType	const int		875447	0					
ANR	875453	Identifier	row		875447	1					
ANR	875454	AssignmentExpression	row = windows . indexOf ( window )		875447	2		=			
ANR	875455	Identifier	row		875447	0					
ANR	875456	CallExpression	windows . indexOf ( window )		875447	1					
ANR	875457	Callee	windows . indexOf		875447	0					
ANR	875458	MemberAccess	windows . indexOf		875447	0					
ANR	875459	Identifier	windows		875447	0					
ANR	875460	Identifier	indexOf		875447	1					
ANR	875461	ArgumentList	window		875447	1					
ANR	875462	Argument	window		875447	0					
ANR	875463	Identifier	window		875447	0					
ANR	875464	IfStatement	if ( row != - 1 )		875447	1					
ANR	875465	Condition	row != - 1	249:8:8476:8484	875447	0	True				
ANR	875466	EqualityExpression	row != - 1		875447	0		!=			
ANR	875467	Identifier	row		875447	0					
ANR	875468	UnaryOperationExpression	- 1		875447	1					
ANR	875469	UnaryOperator	-		875447	0					
ANR	875470	PrimaryExpression	1		875447	1					
ANR	875471	CompoundStatement		4:19:66:66	875447	1					
ANR	875472	ExpressionStatement	"q -> beginRemoveRows ( QModelIndex ( ) , row , row )"	250:8:8497:8540	875447	0	True				
ANR	875473	CallExpression	"q -> beginRemoveRows ( QModelIndex ( ) , row , row )"		875447	0					
ANR	875474	Callee	q -> beginRemoveRows		875447	0					
ANR	875475	PtrMemberAccess	q -> beginRemoveRows		875447	0					
ANR	875476	Identifier	q		875447	0					
ANR	875477	Identifier	beginRemoveRows		875447	1					
ANR	875478	ArgumentList	QModelIndex ( )		875447	1					
ANR	875479	Argument	QModelIndex ( )		875447	0					
ANR	875480	CallExpression	QModelIndex ( )		875447	0					
ANR	875481	Callee	QModelIndex		875447	0					
ANR	875482	Identifier	QModelIndex		875447	0					
ANR	875483	ArgumentList			875447	1					
ANR	875484	Argument	row		875447	1					
ANR	875485	Identifier	row		875447	0					
ANR	875486	Argument	row		875447	2					
ANR	875487	Identifier	row		875447	0					
ANR	875488	ExpressionStatement	windows . removeAt ( row )	251:8:8550:8571	875447	1	True				
ANR	875489	CallExpression	windows . removeAt ( row )		875447	0					
ANR	875490	Callee	windows . removeAt		875447	0					
ANR	875491	MemberAccess	windows . removeAt		875447	0					
ANR	875492	Identifier	windows		875447	0					
ANR	875493	Identifier	removeAt		875447	1					
ANR	875494	ArgumentList	row		875447	1					
ANR	875495	Argument	row		875447	0					
ANR	875496	Identifier	row		875447	0					
ANR	875497	ExpressionStatement	transientsDemandingAttention . remove ( window )	252:8:8581:8624	875447	2	True				
ANR	875498	CallExpression	transientsDemandingAttention . remove ( window )		875447	0					
ANR	875499	Callee	transientsDemandingAttention . remove		875447	0					
ANR	875500	MemberAccess	transientsDemandingAttention . remove		875447	0					
ANR	875501	Identifier	transientsDemandingAttention		875447	0					
ANR	875502	Identifier	remove		875447	1					
ANR	875503	ArgumentList	window		875447	1					
ANR	875504	Argument	window		875447	0					
ANR	875505	Identifier	window		875447	0					
ANR	875506	ExpressionStatement	windowInfoCache . remove ( window )	253:8:8634:8664	875447	3	True				
ANR	875507	CallExpression	windowInfoCache . remove ( window )		875447	0					
ANR	875508	Callee	windowInfoCache . remove		875447	0					
ANR	875509	MemberAccess	windowInfoCache . remove		875447	0					
ANR	875510	Identifier	windowInfoCache		875447	0					
ANR	875511	Identifier	remove		875447	1					
ANR	875512	ArgumentList	window		875447	1					
ANR	875513	Argument	window		875447	0					
ANR	875514	Identifier	window		875447	0					
ANR	875515	ExpressionStatement	appDataCache . remove ( window )	254:8:8674:8701	875447	4	True				
ANR	875516	CallExpression	appDataCache . remove ( window )		875447	0					
ANR	875517	Callee	appDataCache . remove		875447	0					
ANR	875518	MemberAccess	appDataCache . remove		875447	0					
ANR	875519	Identifier	appDataCache		875447	0					
ANR	875520	Identifier	remove		875447	1					
ANR	875521	ArgumentList	window		875447	1					
ANR	875522	Argument	window		875447	0					
ANR	875523	Identifier	window		875447	0					
ANR	875524	ExpressionStatement	delegateGeometries . remove ( window )	255:8:8711:8744	875447	5	True				
ANR	875525	CallExpression	delegateGeometries . remove ( window )		875447	0					
ANR	875526	Callee	delegateGeometries . remove		875447	0					
ANR	875527	MemberAccess	delegateGeometries . remove		875447	0					
ANR	875528	Identifier	delegateGeometries		875447	0					
ANR	875529	Identifier	remove		875447	1					
ANR	875530	ArgumentList	window		875447	1					
ANR	875531	Argument	window		875447	0					
ANR	875532	Identifier	window		875447	0					
ANR	875533	ExpressionStatement	q -> endRemoveRows ( )	256:8:8754:8772	875447	6	True				
ANR	875534	CallExpression	q -> endRemoveRows ( )		875447	0					
ANR	875535	Callee	q -> endRemoveRows		875447	0					
ANR	875536	PtrMemberAccess	q -> endRemoveRows		875447	0					
ANR	875537	Identifier	q		875447	0					
ANR	875538	Identifier	endRemoveRows		875447	1					
ANR	875539	ArgumentList			875447	1					
ANR	875540	ElseStatement	else		875447	0					
ANR	875541	CompoundStatement		12:11:364:364	875447	0					
ANR	875542	IfStatement	if ( transients . remove ( window ) )		875447	0					
ANR	875543	Condition	transients . remove ( window )	259:12:8912:8936	875447	0	True				
ANR	875544	CallExpression	transients . remove ( window )		875447	0					
ANR	875545	Callee	transients . remove		875447	0					
ANR	875546	MemberAccess	transients . remove		875447	0					
ANR	875547	Identifier	transients		875447	0					
ANR	875548	Identifier	remove		875447	1					
ANR	875549	ArgumentList	window		875447	1					
ANR	875550	Argument	window		875447	0					
ANR	875551	Identifier	window		875447	0					
ANR	875552	CompoundStatement		15:12:532:608	875447	1					
ANR	875553	IdentifierDeclStatement	"const WId leader = transientsDemandingAttention . key ( window , XCB_WINDOW_NONE ) ;"	260:12:8953:9029	875447	0	True				
ANR	875554	IdentifierDecl	"leader = transientsDemandingAttention . key ( window , XCB_WINDOW_NONE )"		875447	0					
ANR	875555	IdentifierDeclType	const WId		875447	0					
ANR	875556	Identifier	leader		875447	1					
ANR	875557	AssignmentExpression	"leader = transientsDemandingAttention . key ( window , XCB_WINDOW_NONE )"		875447	2		=			
ANR	875558	Identifier	leader		875447	0					
ANR	875559	CallExpression	"transientsDemandingAttention . key ( window , XCB_WINDOW_NONE )"		875447	1					
ANR	875560	Callee	transientsDemandingAttention . key		875447	0					
ANR	875561	MemberAccess	transientsDemandingAttention . key		875447	0					
ANR	875562	Identifier	transientsDemandingAttention		875447	0					
ANR	875563	Identifier	key		875447	1					
ANR	875564	ArgumentList	window		875447	1					
ANR	875565	Argument	window		875447	0					
ANR	875566	Identifier	window		875447	0					
ANR	875567	Argument	XCB_WINDOW_NONE		875447	1					
ANR	875568	Identifier	XCB_WINDOW_NONE		875447	0					
ANR	875569	IfStatement	if ( leader != XCB_WINDOW_NONE )		875447	1					
ANR	875570	Condition	leader != XCB_WINDOW_NONE	262:16:9048:9072	875447	0	True				
ANR	875571	EqualityExpression	leader != XCB_WINDOW_NONE		875447	0		!=			
ANR	875572	Identifier	leader		875447	0					
ANR	875573	Identifier	XCB_WINDOW_NONE		875447	1					
ANR	875574	CompoundStatement		17:43:654:654	875447	1					
ANR	875575	ExpressionStatement	"transientsDemandingAttention . remove ( leader , window )"	263:16:9093:9144	875447	0	True				
ANR	875576	CallExpression	"transientsDemandingAttention . remove ( leader , window )"		875447	0					
ANR	875577	Callee	transientsDemandingAttention . remove		875447	0					
ANR	875578	MemberAccess	transientsDemandingAttention . remove		875447	0					
ANR	875579	Identifier	transientsDemandingAttention		875447	0					
ANR	875580	Identifier	remove		875447	1					
ANR	875581	ArgumentList	leader		875447	1					
ANR	875582	Argument	leader		875447	0					
ANR	875583	Identifier	leader		875447	0					
ANR	875584	Argument	window		875447	1					
ANR	875585	Identifier	window		875447	0					
ANR	875586	Statement	dataChanged	264:16:9162:9172	875447	1	True				
ANR	875587	Statement	(	264:27:9173:9173	875447	2	True				
ANR	875588	Statement	leader	264:28:9174:9179	875447	3	True				
ANR	875589	Statement	","	264:34:9180:9180	875447	4	True				
ANR	875590	Statement	QVector	264:36:9182:9188	875447	5	True				
ANR	875591	Statement	<	264:43:9189:9189	875447	6	True				
ANR	875592	Statement	int	264:44:9190:9192	875447	7	True				
ANR	875593	Statement	>	264:47:9193:9193	875447	8	True				
ANR	875594	CompoundStatement		19:48:773:773	875447	9					
ANR	875595	Statement	IsDemandingAttention	264:49:9195:9214	875447	0	True				
ANR	875596	Statement	)	264:70:9216:9216	875447	10	True				
ANR	875597	ExpressionStatement		264:71:9217:9217	875447	11	True				
ANR	875598	IfStatement	if ( activeWindow == window )		875447	2					
ANR	875599	Condition	activeWindow == window	269:8:9258:9279	875447	0	True				
ANR	875600	EqualityExpression	activeWindow == window		875447	0		==			
ANR	875601	Identifier	activeWindow		875447	0					
ANR	875602	Identifier	window		875447	1					
ANR	875603	CompoundStatement		24:32:861:861	875447	1					
ANR	875604	ExpressionStatement	activeWindow = - 1	270:8:9292:9309	875447	0	True				
ANR	875605	AssignmentExpression	activeWindow = - 1		875447	0		=			
ANR	875606	Identifier	activeWindow		875447	0					
ANR	875607	UnaryOperationExpression	- 1		875447	1					
ANR	875608	UnaryOperator	-		875447	0					
ANR	875609	PrimaryExpression	1		875447	1					
ANR	875610	ReturnType	void		875447	1					
ANR	875611	Identifier	XWindowTasksModel :: Private :: removeWindow		875447	2					
ANR	875612	ParameterList	WId window		875447	3					
ANR	875613	Parameter	WId window	245:46:8408:8417	875447	0	True				
ANR	875614	ParameterType	WId		875447	0					
ANR	875615	Identifier	window		875447	1					
ANR	875616	CFGEntryNode	ENTRY		875447		True				
ANR	875617	CFGExitNode	EXIT		875447		True				
ANR	875618	Symbol	leader		875447						
ANR	875619	Symbol	transientsDemandingAttention . key		875447						
ANR	875620	Symbol	appDataCache		875447						
ANR	875621	Symbol	transientsDemandingAttention		875447						
ANR	875622	Symbol	windows		875447						
ANR	875623	Symbol	q		875447						
ANR	875624	Symbol	windows . indexOf		875447						
ANR	875625	Symbol	QModelIndex		875447						
ANR	875626	Symbol	transients . remove		875447						
ANR	875627	Symbol	windowInfoCache		875447						
ANR	875628	Symbol	delegateGeometries		875447						
ANR	875629	Symbol	window		875447						
ANR	875630	Symbol	row		875447						
ANR	875631	Symbol	activeWindow		875447						
ANR	875632	Symbol	transients		875447						
ANR	875633	Symbol	XCB_WINDOW_NONE		875447						
ANR	875634	Function	XWindowTasksModel :: Private :: transientChanged	274:0:9320:11072							
ANR	875635	FunctionDef	"XWindowTasksModel :: Private :: transientChanged (WId window , NET :: Properties properties , NET :: Properties2 properties2)"		875634	0					
ANR	875636	CompoundStatement		275:0:9440:11072	875634	0					
ANR	875637	IfStatement	if ( properties & ( NET :: WMState | NET :: XAWMState ) )		875634	0					
ANR	875638	Condition	properties & ( NET :: WMState | NET :: XAWMState )	277:8:9537:9580	875634	0	True				
ANR	875639	BitAndExpression	properties & ( NET :: WMState | NET :: XAWMState )		875634	0		&			
ANR	875640	Identifier	properties		875634	0					
ANR	875641	InclusiveOrExpression	NET :: WMState | NET :: XAWMState		875634	1		|			
ANR	875642	Identifier	NET :: WMState		875634	0					
ANR	875643	Identifier	NET :: XAWMState		875634	1					
ANR	875644	CompoundStatement		5:8:245:283	875634	1					
ANR	875645	IdentifierDeclStatement	"const KWindowInfo info ( window , NET :: WMState | NET :: XAWMState , NET :: WM2TransientFor ) ;"	278:8:9593:9676	875634	0	True				
ANR	875646	IdentifierDecl	"info ( window , NET :: WMState | NET :: XAWMState , NET :: WM2TransientFor )"		875634	0					
ANR	875647	IdentifierDeclType	const KWindowInfo		875634	0					
ANR	875648	Identifier	info		875634	1					
ANR	875649	Expression	"window , NET :: WMState | NET :: XAWMState , NET :: WM2TransientFor"		875634	2					
ANR	875650	Identifier	window		875634	0					
ANR	875651	Expression	"NET :: WMState | NET :: XAWMState , NET :: WM2TransientFor"		875634	1					
ANR	875652	InclusiveOrExpression	NET :: WMState | NET :: XAWMState		875634	0		|			
ANR	875653	Identifier	NET :: WMState		875634	0					
ANR	875654	Identifier	NET :: XAWMState		875634	1					
ANR	875655	Identifier	NET :: WM2TransientFor		875634	1					
ANR	875656	IdentifierDeclStatement	const WId leader = info . transientFor ( ) ;	279:8:9686:9724	875634	1	True				
ANR	875657	IdentifierDecl	leader = info . transientFor ( )		875634	0					
ANR	875658	IdentifierDeclType	const WId		875634	0					
ANR	875659	Identifier	leader		875634	1					
ANR	875660	AssignmentExpression	leader = info . transientFor ( )		875634	2		=			
ANR	875661	Identifier	leader		875634	0					
ANR	875662	CallExpression	info . transientFor ( )		875634	1					
ANR	875663	Callee	info . transientFor		875634	0					
ANR	875664	MemberAccess	info . transientFor		875634	0					
ANR	875665	Identifier	info		875634	0					
ANR	875666	Identifier	transientFor		875634	1					
ANR	875667	ArgumentList			875634	1					
ANR	875668	IfStatement	if ( ! windows . contains ( leader ) )		875634	2					
ANR	875669	Condition	! windows . contains ( leader )	281:12:9739:9763	875634	0	True				
ANR	875670	UnaryOperationExpression	! windows . contains ( leader )		875634	0					
ANR	875671	UnaryOperator	!		875634	0					
ANR	875672	CallExpression	windows . contains ( leader )		875634	1					
ANR	875673	Callee	windows . contains		875634	0					
ANR	875674	MemberAccess	windows . contains		875634	0					
ANR	875675	Identifier	windows		875634	0					
ANR	875676	Identifier	contains		875634	1					
ANR	875677	ArgumentList	leader		875634	1					
ANR	875678	Argument	leader		875634	0					
ANR	875679	Identifier	leader		875634	0					
ANR	875680	CompoundStatement		7:39:325:325	875634	1					
ANR	875681	ReturnStatement	return ;	282:12:9780:9786	875634	0	True				
ANR	875682	IfStatement	if ( info . hasState ( NET :: DemandsAttention ) )		875634	3					
ANR	875683	Condition	info . hasState ( NET :: DemandsAttention )	285:12:9811:9846	875634	0	True				
ANR	875684	CallExpression	info . hasState ( NET :: DemandsAttention )		875634	0					
ANR	875685	Callee	info . hasState		875634	0					
ANR	875686	MemberAccess	info . hasState		875634	0					
ANR	875687	Identifier	info		875634	0					
ANR	875688	Identifier	hasState		875634	1					
ANR	875689	ArgumentList	NET :: DemandsAttention		875634	1					
ANR	875690	Argument	NET :: DemandsAttention		875634	0					
ANR	875691	Identifier	NET :: DemandsAttention		875634	0					
ANR	875692	CompoundStatement		11:50:408:408	875634	1					
ANR	875693	IfStatement	if ( ! transientsDemandingAttention . values ( leader ) . contains ( window ) )		875634	0					
ANR	875694	Condition	! transientsDemandingAttention . values ( leader ) . contains ( window )	286:16:9867:9927	875634	0	True				
ANR	875695	UnaryOperationExpression	! transientsDemandingAttention . values ( leader ) . contains ( window )		875634	0					
ANR	875696	UnaryOperator	!		875634	0					
ANR	875697	CallExpression	transientsDemandingAttention . values ( leader ) . contains ( window )		875634	1					
ANR	875698	Callee	transientsDemandingAttention . values ( leader ) . contains		875634	0					
ANR	875699	MemberAccess	transientsDemandingAttention . values ( leader ) . contains		875634	0					
ANR	875700	CallExpression	transientsDemandingAttention . values ( leader )		875634	0					
ANR	875701	Callee	transientsDemandingAttention . values		875634	0					
ANR	875702	MemberAccess	transientsDemandingAttention . values		875634	0					
ANR	875703	Identifier	transientsDemandingAttention		875634	0					
ANR	875704	Identifier	values		875634	1					
ANR	875705	ArgumentList	leader		875634	1					
ANR	875706	Argument	leader		875634	0					
ANR	875707	Identifier	leader		875634	0					
ANR	875708	Identifier	contains		875634	1					
ANR	875709	ArgumentList	window		875634	1					
ANR	875710	Argument	window		875634	0					
ANR	875711	Identifier	window		875634	0					
ANR	875712	CompoundStatement		12:79:489:489	875634	1					
ANR	875713	ExpressionStatement	"transientsDemandingAttention . insertMulti ( leader , window )"	287:16:9948:10004	875634	0	True				
ANR	875714	CallExpression	"transientsDemandingAttention . insertMulti ( leader , window )"		875634	0					
ANR	875715	Callee	transientsDemandingAttention . insertMulti		875634	0					
ANR	875716	MemberAccess	transientsDemandingAttention . insertMulti		875634	0					
ANR	875717	Identifier	transientsDemandingAttention		875634	0					
ANR	875718	Identifier	insertMulti		875634	1					
ANR	875719	ArgumentList	leader		875634	1					
ANR	875720	Argument	leader		875634	0					
ANR	875721	Identifier	leader		875634	0					
ANR	875722	Argument	window		875634	1					
ANR	875723	Identifier	window		875634	0					
ANR	875724	Statement	dataChanged	288:16:10022:10032	875634	1	True				
ANR	875725	Statement	(	288:27:10033:10033	875634	2	True				
ANR	875726	Statement	leader	288:28:10034:10039	875634	3	True				
ANR	875727	Statement	","	288:34:10040:10040	875634	4	True				
ANR	875728	Statement	QVector	288:36:10042:10048	875634	5	True				
ANR	875729	Statement	<	288:43:10049:10049	875634	6	True				
ANR	875730	Statement	int	288:44:10050:10052	875634	7	True				
ANR	875731	Statement	>	288:47:10053:10053	875634	8	True				
ANR	875732	CompoundStatement		14:48:613:613	875634	9					
ANR	875733	Statement	IsDemandingAttention	288:49:10055:10074	875634	0	True				
ANR	875734	Statement	)	288:70:10076:10076	875634	10	True				
ANR	875735	ExpressionStatement		288:71:10077:10077	875634	11	True				
ANR	875736	ElseStatement	else		875634	0					
ANR	875737	IfStatement	if ( transientsDemandingAttention . remove ( window ) )		875634	0					
ANR	875738	Condition	transientsDemandingAttention . remove ( window )	290:19:10112:10154	875634	0	True				
ANR	875739	CallExpression	transientsDemandingAttention . remove ( window )		875634	0					
ANR	875740	Callee	transientsDemandingAttention . remove		875634	0					
ANR	875741	MemberAccess	transientsDemandingAttention . remove		875634	0					
ANR	875742	Identifier	transientsDemandingAttention		875634	0					
ANR	875743	Identifier	remove		875634	1					
ANR	875744	ArgumentList	window		875634	1					
ANR	875745	Argument	window		875634	0					
ANR	875746	Identifier	window		875634	0					
ANR	875747	CompoundStatement		16:64:716:716	875634	1					
ANR	875748	Statement	dataChanged	291:12:10171:10181	875634	0	True				
ANR	875749	Statement	(	291:23:10182:10182	875634	1	True				
ANR	875750	Statement	leader	291:24:10183:10188	875634	2	True				
ANR	875751	Statement	","	291:30:10189:10189	875634	3	True				
ANR	875752	Statement	QVector	291:32:10191:10197	875634	4	True				
ANR	875753	Statement	<	291:39:10198:10198	875634	5	True				
ANR	875754	Statement	int	291:40:10199:10201	875634	6	True				
ANR	875755	Statement	>	291:43:10202:10202	875634	7	True				
ANR	875756	CompoundStatement		17:44:762:762	875634	8					
ANR	875757	Statement	IsDemandingAttention	291:45:10204:10223	875634	0	True				
ANR	875758	Statement	)	291:66:10225:10225	875634	9	True				
ANR	875759	ExpressionStatement		291:67:10226:10226	875634	10	True				
ANR	875760	ElseStatement	else		875634	0					
ANR	875761	IfStatement	if ( properties2 & NET :: WM2TransientFor )		875634	0					
ANR	875762	Condition	properties2 & NET :: WM2TransientFor	294:15:10287:10320	875634	0	True				
ANR	875763	BitAndExpression	properties2 & NET :: WM2TransientFor		875634	0		&			
ANR	875764	Identifier	properties2		875634	0					
ANR	875765	Identifier	NET :: WM2TransientFor		875634	1					
ANR	875766	CompoundStatement		21:8:892:975	875634	1					
ANR	875767	IdentifierDeclStatement	"const KWindowInfo info ( window , NET :: WMState | NET :: XAWMState , NET :: WM2TransientFor ) ;"	295:8:10333:10416	875634	0	True				
ANR	875768	IdentifierDecl	"info ( window , NET :: WMState | NET :: XAWMState , NET :: WM2TransientFor )"		875634	0					
ANR	875769	IdentifierDeclType	const KWindowInfo		875634	0					
ANR	875770	Identifier	info		875634	1					
ANR	875771	Expression	"window , NET :: WMState | NET :: XAWMState , NET :: WM2TransientFor"		875634	2					
ANR	875772	Identifier	window		875634	0					
ANR	875773	Expression	"NET :: WMState | NET :: XAWMState , NET :: WM2TransientFor"		875634	1					
ANR	875774	InclusiveOrExpression	NET :: WMState | NET :: XAWMState		875634	0		|			
ANR	875775	Identifier	NET :: WMState		875634	0					
ANR	875776	Identifier	NET :: XAWMState		875634	1					
ANR	875777	Identifier	NET :: WM2TransientFor		875634	1					
ANR	875778	IfStatement	if ( info . hasState ( NET :: DemandsAttention ) )		875634	1					
ANR	875779	Condition	info . hasState ( NET :: DemandsAttention )	297:12:10431:10466	875634	0	True				
ANR	875780	CallExpression	info . hasState ( NET :: DemandsAttention )		875634	0					
ANR	875781	Callee	info . hasState		875634	0					
ANR	875782	MemberAccess	info . hasState		875634	0					
ANR	875783	Identifier	info		875634	0					
ANR	875784	Identifier	hasState		875634	1					
ANR	875785	ArgumentList	NET :: DemandsAttention		875634	1					
ANR	875786	Argument	NET :: DemandsAttention		875634	0					
ANR	875787	Identifier	NET :: DemandsAttention		875634	0					
ANR	875788	CompoundStatement		24:12:1042:1121	875634	1					
ANR	875789	IdentifierDeclStatement	"const WId oldLeader = transientsDemandingAttention . key ( window , XCB_WINDOW_NONE ) ;"	298:12:10483:10562	875634	0	True				
ANR	875790	IdentifierDecl	"oldLeader = transientsDemandingAttention . key ( window , XCB_WINDOW_NONE )"		875634	0					
ANR	875791	IdentifierDeclType	const WId		875634	0					
ANR	875792	Identifier	oldLeader		875634	1					
ANR	875793	AssignmentExpression	"oldLeader = transientsDemandingAttention . key ( window , XCB_WINDOW_NONE )"		875634	2		=			
ANR	875794	Identifier	oldLeader		875634	0					
ANR	875795	CallExpression	"transientsDemandingAttention . key ( window , XCB_WINDOW_NONE )"		875634	1					
ANR	875796	Callee	transientsDemandingAttention . key		875634	0					
ANR	875797	MemberAccess	transientsDemandingAttention . key		875634	0					
ANR	875798	Identifier	transientsDemandingAttention		875634	0					
ANR	875799	Identifier	key		875634	1					
ANR	875800	ArgumentList	window		875634	1					
ANR	875801	Argument	window		875634	0					
ANR	875802	Identifier	window		875634	0					
ANR	875803	Argument	XCB_WINDOW_NONE		875634	1					
ANR	875804	Identifier	XCB_WINDOW_NONE		875634	0					
ANR	875805	IfStatement	if ( oldLeader != XCB_WINDOW_NONE )		875634	1					
ANR	875806	Condition	oldLeader != XCB_WINDOW_NONE	300:16:10581:10608	875634	0	True				
ANR	875807	EqualityExpression	oldLeader != XCB_WINDOW_NONE		875634	0		!=			
ANR	875808	Identifier	oldLeader		875634	0					
ANR	875809	Identifier	XCB_WINDOW_NONE		875634	1					
ANR	875810	CompoundStatement		27:16:1188:1226	875634	1					
ANR	875811	IdentifierDeclStatement	const WId leader = info . transientFor ( ) ;	301:16:10629:10667	875634	0	True				
ANR	875812	IdentifierDecl	leader = info . transientFor ( )		875634	0					
ANR	875813	IdentifierDeclType	const WId		875634	0					
ANR	875814	Identifier	leader		875634	1					
ANR	875815	AssignmentExpression	leader = info . transientFor ( )		875634	2		=			
ANR	875816	Identifier	leader		875634	0					
ANR	875817	CallExpression	info . transientFor ( )		875634	1					
ANR	875818	Callee	info . transientFor		875634	0					
ANR	875819	MemberAccess	info . transientFor		875634	0					
ANR	875820	Identifier	info		875634	0					
ANR	875821	Identifier	transientFor		875634	1					
ANR	875822	ArgumentList			875634	1					
ANR	875823	IfStatement	if ( leader != oldLeader )		875634	1					
ANR	875824	Condition	leader != oldLeader	303:20:10690:10708	875634	0	True				
ANR	875825	EqualityExpression	leader != oldLeader		875634	0		!=			
ANR	875826	Identifier	leader		875634	0					
ANR	875827	Identifier	oldLeader		875634	1					
ANR	875828	CompoundStatement		29:41:1270:1270	875634	1					
ANR	875829	ExpressionStatement	"transientsDemandingAttention . remove ( oldLeader , window )"	304:20:10733:10787	875634	0	True				
ANR	875830	CallExpression	"transientsDemandingAttention . remove ( oldLeader , window )"		875634	0					
ANR	875831	Callee	transientsDemandingAttention . remove		875634	0					
ANR	875832	MemberAccess	transientsDemandingAttention . remove		875634	0					
ANR	875833	Identifier	transientsDemandingAttention		875634	0					
ANR	875834	Identifier	remove		875634	1					
ANR	875835	ArgumentList	oldLeader		875634	1					
ANR	875836	Argument	oldLeader		875634	0					
ANR	875837	Identifier	oldLeader		875634	0					
ANR	875838	Argument	window		875634	1					
ANR	875839	Identifier	window		875634	0					
ANR	875840	ExpressionStatement	"transientsDemandingAttention . insertMulti ( leader , window )"	305:20:10809:10865	875634	1	True				
ANR	875841	CallExpression	"transientsDemandingAttention . insertMulti ( leader , window )"		875634	0					
ANR	875842	Callee	transientsDemandingAttention . insertMulti		875634	0					
ANR	875843	MemberAccess	transientsDemandingAttention . insertMulti		875634	0					
ANR	875844	Identifier	transientsDemandingAttention		875634	0					
ANR	875845	Identifier	insertMulti		875634	1					
ANR	875846	ArgumentList	leader		875634	1					
ANR	875847	Argument	leader		875634	0					
ANR	875848	Identifier	leader		875634	0					
ANR	875849	Argument	window		875634	1					
ANR	875850	Identifier	window		875634	0					
ANR	875851	Statement	dataChanged	306:20:10887:10897	875634	2	True				
ANR	875852	Statement	(	306:31:10898:10898	875634	3	True				
ANR	875853	Statement	oldLeader	306:32:10899:10907	875634	4	True				
ANR	875854	Statement	","	306:41:10908:10908	875634	5	True				
ANR	875855	Statement	QVector	306:43:10910:10916	875634	6	True				
ANR	875856	Statement	<	306:50:10917:10917	875634	7	True				
ANR	875857	Statement	int	306:51:10918:10920	875634	8	True				
ANR	875858	Statement	>	306:54:10921:10921	875634	9	True				
ANR	875859	CompoundStatement		32:55:1481:1481	875634	10					
ANR	875860	Statement	IsDemandingAttention	306:56:10923:10942	875634	0	True				
ANR	875861	Statement	)	306:77:10944:10944	875634	11	True				
ANR	875862	ExpressionStatement		306:78:10945:10945	875634	12	True				
ANR	875863	Statement	dataChanged	307:20:10967:10977	875634	13	True				
ANR	875864	Statement	(	307:31:10978:10978	875634	14	True				
ANR	875865	Statement	leader	307:32:10979:10984	875634	15	True				
ANR	875866	Statement	","	307:38:10985:10985	875634	16	True				
ANR	875867	Statement	QVector	307:40:10987:10993	875634	17	True				
ANR	875868	Statement	<	307:47:10994:10994	875634	18	True				
ANR	875869	Statement	int	307:48:10995:10997	875634	19	True				
ANR	875870	Statement	>	307:51:10998:10998	875634	20	True				
ANR	875871	CompoundStatement		33:52:1558:1558	875634	21					
ANR	875872	Statement	IsDemandingAttention	307:53:11000:11019	875634	0	True				
ANR	875873	Statement	)	307:74:11021:11021	875634	22	True				
ANR	875874	ExpressionStatement		307:75:11022:11022	875634	23	True				
ANR	875875	ReturnType	void		875634	1					
ANR	875876	Identifier	XWindowTasksModel :: Private :: transientChanged		875634	2					
ANR	875877	ParameterList	"WId window , NET :: Properties properties , NET :: Properties2 properties2"		875634	3					
ANR	875878	Parameter	WId window	274:50:9370:9379	875634	0	True				
ANR	875879	ParameterType	WId		875634	0					
ANR	875880	Identifier	window		875634	1					
ANR	875881	Parameter	NET :: Properties properties	274:62:9382:9407	875634	1	True				
ANR	875882	ParameterType	NET :: Properties		875634	0					
ANR	875883	Identifier	properties		875634	1					
ANR	875884	Parameter	NET :: Properties2 properties2	274:90:9410:9437	875634	2	True				
ANR	875885	ParameterType	NET :: Properties2		875634	0					
ANR	875886	Identifier	properties2		875634	1					
ANR	875887	CFGEntryNode	ENTRY		875634		True				
ANR	875888	CFGExitNode	EXIT		875634		True				
ANR	875889	Symbol	leader		875634						
ANR	875890	Symbol	transientsDemandingAttention . key		875634						
ANR	875891	Symbol	NET :: XAWMState		875634						
ANR	875892	Symbol	info . hasState		875634						
ANR	875893	Symbol	NET :: WMState		875634						
ANR	875894	Symbol	transientsDemandingAttention . remove		875634						
ANR	875895	Symbol	transientsDemandingAttention		875634						
ANR	875896	Symbol	windows		875634						
ANR	875897	Symbol	windows . contains		875634						
ANR	875898	Symbol	NET :: WM2TransientFor		875634						
ANR	875899	Symbol	transientsDemandingAttention . values ( leader ) . contains		875634						
ANR	875900	Symbol	info . transientFor		875634						
ANR	875901	Symbol	NET :: DemandsAttention		875634						
ANR	875902	Symbol	oldLeader		875634						
ANR	875903	Symbol	transientsDemandingAttention . values		875634						
ANR	875904	Symbol	window		875634						
ANR	875905	Symbol	properties2		875634						
ANR	875906	Symbol	properties		875634						
ANR	875907	Symbol	XCB_WINDOW_NONE		875634						
ANR	875908	Symbol	info		875634						
ANR	875909	Function	XWindowTasksModel :: Private :: windowChanged	314:0:11075:13424							
ANR	875910	FunctionDef	"XWindowTasksModel :: Private :: windowChanged (WId window , NET :: Properties properties , NET :: Properties2 properties2)"		875909	0					
ANR	875911	CompoundStatement		315:0:11192:13424	875909	0					
ANR	875912	IfStatement	if ( transients . contains ( window ) )		875909	0					
ANR	875913	Condition	transients . contains ( window )	316:8:11202:11228	875909	0	True				
ANR	875914	CallExpression	transients . contains ( window )		875909	0					
ANR	875915	Callee	transients . contains		875909	0					
ANR	875916	MemberAccess	transients . contains		875909	0					
ANR	875917	Identifier	transients		875909	0					
ANR	875918	Identifier	contains		875909	1					
ANR	875919	ArgumentList	window		875909	1					
ANR	875920	Argument	window		875909	0					
ANR	875921	Identifier	window		875909	0					
ANR	875922	CompoundStatement		2:37:38:38	875909	1					
ANR	875923	ExpressionStatement	"transientChanged ( window , properties , properties2 )"	317:8:11241:11290	875909	0	True				
ANR	875924	CallExpression	"transientChanged ( window , properties , properties2 )"		875909	0					
ANR	875925	Callee	transientChanged		875909	0					
ANR	875926	Identifier	transientChanged		875909	0					
ANR	875927	ArgumentList	window		875909	1					
ANR	875928	Argument	window		875909	0					
ANR	875929	Identifier	window		875909	0					
ANR	875930	Argument	properties		875909	1					
ANR	875931	Identifier	properties		875909	0					
ANR	875932	Argument	properties2		875909	2					
ANR	875933	Identifier	properties2		875909	0					
ANR	875934	ReturnStatement	return ;	319:8:11301:11307	875909	1	True				
ANR	875935	IdentifierDeclStatement	bool wipeInfoCache = false ;	322:4:11320:11346	875909	1	True				
ANR	875936	IdentifierDecl	wipeInfoCache = false		875909	0					
ANR	875937	IdentifierDeclType	bool		875909	0					
ANR	875938	Identifier	wipeInfoCache		875909	1					
ANR	875939	AssignmentExpression	wipeInfoCache = false		875909	2		=			
ANR	875940	Identifier	false		875909	0					
ANR	875941	Identifier	false		875909	1					
ANR	875942	IdentifierDeclStatement	bool wipeAppDataCache = false ;	323:4:11352:11381	875909	2	True				
ANR	875943	IdentifierDecl	wipeAppDataCache = false		875909	0					
ANR	875944	IdentifierDeclType	bool		875909	0					
ANR	875945	Identifier	wipeAppDataCache		875909	1					
ANR	875946	AssignmentExpression	wipeAppDataCache = false		875909	2		=			
ANR	875947	Identifier	false		875909	0					
ANR	875948	Identifier	false		875909	1					
ANR	875949	IdentifierDeclStatement	QVector < int > changedRoles ;	324:4:11387:11412	875909	3	True				
ANR	875950	IdentifierDecl	changedRoles		875909	0					
ANR	875951	IdentifierDeclType	QVector < int >		875909	0					
ANR	875952	Identifier	changedRoles		875909	1					
ANR	875953	IfStatement	if ( properties & ( NET :: WMName | NET :: WMVisibleName | NET :: WM2WindowClass | NET :: WMPid ) || properties2 & NET :: WM2WindowClass )		875909	4					
ANR	875954	Condition	properties & ( NET :: WMName | NET :: WMVisibleName | NET :: WM2WindowClass | NET :: WMPid ) || properties2 & NET :: WM2WindowClass	326:8:11423:11549	875909	0	True				
ANR	875955	OrExpression	properties & ( NET :: WMName | NET :: WMVisibleName | NET :: WM2WindowClass | NET :: WMPid ) || properties2 & NET :: WM2WindowClass		875909	0		||			
ANR	875956	BitAndExpression	properties & ( NET :: WMName | NET :: WMVisibleName | NET :: WM2WindowClass | NET :: WMPid )		875909	0		&			
ANR	875957	Identifier	properties		875909	0					
ANR	875958	InclusiveOrExpression	NET :: WMName | NET :: WMVisibleName | NET :: WM2WindowClass | NET :: WMPid		875909	1		|			
ANR	875959	Identifier	NET :: WMName		875909	0					
ANR	875960	InclusiveOrExpression	NET :: WMVisibleName | NET :: WM2WindowClass | NET :: WMPid		875909	1		|			
ANR	875961	Identifier	NET :: WMVisibleName		875909	0					
ANR	875962	InclusiveOrExpression	NET :: WM2WindowClass | NET :: WMPid		875909	1		|			
ANR	875963	Identifier	NET :: WM2WindowClass		875909	0					
ANR	875964	Identifier	NET :: WMPid		875909	1					
ANR	875965	BitAndExpression	properties2 & NET :: WM2WindowClass		875909	1		&			
ANR	875966	Identifier	properties2		875909	0					
ANR	875967	Identifier	NET :: WM2WindowClass		875909	1					
ANR	875968	CompoundStatement		13:46:359:359	875909	1					
ANR	875969	ExpressionStatement	wipeInfoCache = true	328:8:11562:11582	875909	0	True				
ANR	875970	AssignmentExpression	wipeInfoCache = true		875909	0		=			
ANR	875971	Identifier	wipeInfoCache		875909	0					
ANR	875972	Identifier	true		875909	1					
ANR	875973	ExpressionStatement	wipeAppDataCache = true	329:8:11592:11615	875909	1	True				
ANR	875974	AssignmentExpression	wipeAppDataCache = true		875909	0		=			
ANR	875975	Identifier	wipeAppDataCache		875909	0					
ANR	875976	Identifier	true		875909	1					
ANR	875977	ExpressionStatement	changedRoles << Qt :: DisplayRole << Qt :: DecorationRole << AppId << AppName << GenericName << LauncherUrl	330:8:11625:11728	875909	2	True				
ANR	875978	ShiftExpression	changedRoles << Qt :: DisplayRole << Qt :: DecorationRole << AppId << AppName << GenericName << LauncherUrl		875909	0		<<			
ANR	875979	Identifier	changedRoles		875909	0					
ANR	875980	ShiftExpression	Qt :: DisplayRole << Qt :: DecorationRole << AppId << AppName << GenericName << LauncherUrl		875909	1		<<			
ANR	875981	Identifier	Qt :: DisplayRole		875909	0					
ANR	875982	ShiftExpression	Qt :: DecorationRole << AppId << AppName << GenericName << LauncherUrl		875909	1		<<			
ANR	875983	Identifier	Qt :: DecorationRole		875909	0					
ANR	875984	ShiftExpression	AppId << AppName << GenericName << LauncherUrl		875909	1		<<			
ANR	875985	Identifier	AppId		875909	0					
ANR	875986	ShiftExpression	AppName << GenericName << LauncherUrl		875909	1		<<			
ANR	875987	Identifier	AppName		875909	0					
ANR	875988	ShiftExpression	GenericName << LauncherUrl		875909	1		<<			
ANR	875989	Identifier	GenericName		875909	0					
ANR	875990	Identifier	LauncherUrl		875909	1					
ANR	875991	IfStatement	if ( ( properties & NET :: WMIcon ) && ! changedRoles . contains ( Qt :: DecorationRole ) )		875909	5					
ANR	875992	Condition	( properties & NET :: WMIcon ) && ! changedRoles . contains ( Qt :: DecorationRole )	333:8:11745:11816	875909	0	True				
ANR	875993	AndExpression	( properties & NET :: WMIcon ) && ! changedRoles . contains ( Qt :: DecorationRole )		875909	0		&&			
ANR	875994	BitAndExpression	properties & NET :: WMIcon		875909	0		&			
ANR	875995	Identifier	properties		875909	0					
ANR	875996	Identifier	NET :: WMIcon		875909	1					
ANR	875997	UnaryOperationExpression	! changedRoles . contains ( Qt :: DecorationRole )		875909	1					
ANR	875998	UnaryOperator	!		875909	0					
ANR	875999	CallExpression	changedRoles . contains ( Qt :: DecorationRole )		875909	1					
ANR	876000	Callee	changedRoles . contains		875909	0					
ANR	876001	MemberAccess	changedRoles . contains		875909	0					
ANR	876002	Identifier	changedRoles		875909	0					
ANR	876003	Identifier	contains		875909	1					
ANR	876004	ArgumentList	Qt :: DecorationRole		875909	1					
ANR	876005	Argument	Qt :: DecorationRole		875909	0					
ANR	876006	Identifier	Qt :: DecorationRole		875909	0					
ANR	876007	CompoundStatement		19:82:626:626	875909	1					
ANR	876008	ExpressionStatement	changedRoles << Qt :: DecorationRole	334:8:11829:11863	875909	0	True				
ANR	876009	ShiftExpression	changedRoles << Qt :: DecorationRole		875909	0		<<			
ANR	876010	Identifier	changedRoles		875909	0					
ANR	876011	Identifier	Qt :: DecorationRole		875909	1					
ANR	876012	IfStatement	if ( properties & ( NET :: WMState | NET :: XAWMState ) )		875909	6					
ANR	876013	Condition	properties & ( NET :: WMState | NET :: XAWMState )	341:8:12178:12221	875909	0	True				
ANR	876014	BitAndExpression	properties & ( NET :: WMState | NET :: XAWMState )		875909	0		&			
ANR	876015	Identifier	properties		875909	0					
ANR	876016	InclusiveOrExpression	NET :: WMState | NET :: XAWMState		875909	1		|			
ANR	876017	Identifier	NET :: WMState		875909	0					
ANR	876018	Identifier	NET :: XAWMState		875909	1					
ANR	876019	CompoundStatement		27:54:1031:1031	875909	1					
ANR	876020	ExpressionStatement	wipeInfoCache = true	342:8:12234:12254	875909	0	True				
ANR	876021	AssignmentExpression	wipeInfoCache = true		875909	0		=			
ANR	876022	Identifier	wipeInfoCache		875909	0					
ANR	876023	Identifier	true		875909	1					
ANR	876024	ExpressionStatement	changedRoles << IsFullScreen << IsMaximized << IsMinimized << IsKeepAbove << IsKeepBelow	343:8:12264:12352	875909	1	True				
ANR	876025	ShiftExpression	changedRoles << IsFullScreen << IsMaximized << IsMinimized << IsKeepAbove << IsKeepBelow		875909	0		<<			
ANR	876026	Identifier	changedRoles		875909	0					
ANR	876027	ShiftExpression	IsFullScreen << IsMaximized << IsMinimized << IsKeepAbove << IsKeepBelow		875909	1		<<			
ANR	876028	Identifier	IsFullScreen		875909	0					
ANR	876029	ShiftExpression	IsMaximized << IsMinimized << IsKeepAbove << IsKeepBelow		875909	1		<<			
ANR	876030	Identifier	IsMaximized		875909	0					
ANR	876031	ShiftExpression	IsMinimized << IsKeepAbove << IsKeepBelow		875909	1		<<			
ANR	876032	Identifier	IsMinimized		875909	0					
ANR	876033	ShiftExpression	IsKeepAbove << IsKeepBelow		875909	1		<<			
ANR	876034	Identifier	IsKeepAbove		875909	0					
ANR	876035	Identifier	IsKeepBelow		875909	1					
ANR	876036	ExpressionStatement	changedRoles << IsShaded << IsDemandingAttention << SkipTaskbar << SkipPager	344:8:12362:12438	875909	2	True				
ANR	876037	ShiftExpression	changedRoles << IsShaded << IsDemandingAttention << SkipTaskbar << SkipPager		875909	0		<<			
ANR	876038	Identifier	changedRoles		875909	0					
ANR	876039	ShiftExpression	IsShaded << IsDemandingAttention << SkipTaskbar << SkipPager		875909	1		<<			
ANR	876040	Identifier	IsShaded		875909	0					
ANR	876041	ShiftExpression	IsDemandingAttention << SkipTaskbar << SkipPager		875909	1		<<			
ANR	876042	Identifier	IsDemandingAttention		875909	0					
ANR	876043	ShiftExpression	SkipTaskbar << SkipPager		875909	1		<<			
ANR	876044	Identifier	SkipTaskbar		875909	0					
ANR	876045	Identifier	SkipPager		875909	1					
ANR	876046	IfStatement	if ( properties & NET :: WMWindowType )		875909	7					
ANR	876047	Condition	properties & NET :: WMWindowType	347:8:12455:12484	875909	0	True				
ANR	876048	BitAndExpression	properties & NET :: WMWindowType		875909	0		&			
ANR	876049	Identifier	properties		875909	0					
ANR	876050	Identifier	NET :: WMWindowType		875909	1					
ANR	876051	CompoundStatement		33:40:1294:1294	875909	1					
ANR	876052	ExpressionStatement	wipeInfoCache = true	348:8:12497:12517	875909	0	True				
ANR	876053	AssignmentExpression	wipeInfoCache = true		875909	0		=			
ANR	876054	Identifier	wipeInfoCache		875909	0					
ANR	876055	Identifier	true		875909	1					
ANR	876056	ExpressionStatement	changedRoles << SkipTaskbar	349:8:12527:12554	875909	1	True				
ANR	876057	ShiftExpression	changedRoles << SkipTaskbar		875909	0		<<			
ANR	876058	Identifier	changedRoles		875909	0					
ANR	876059	Identifier	SkipTaskbar		875909	1					
ANR	876060	IfStatement	if ( properties2 & NET :: WM2AllowedActions )		875909	8					
ANR	876061	Condition	properties2 & NET :: WM2AllowedActions	352:8:12571:12606	875909	0	True				
ANR	876062	BitAndExpression	properties2 & NET :: WM2AllowedActions		875909	0		&			
ANR	876063	Identifier	properties2		875909	0					
ANR	876064	Identifier	NET :: WM2AllowedActions		875909	1					
ANR	876065	CompoundStatement		38:46:1416:1416	875909	1					
ANR	876066	ExpressionStatement	wipeInfoCache = true	353:8:12619:12639	875909	0	True				
ANR	876067	AssignmentExpression	wipeInfoCache = true		875909	0		=			
ANR	876068	Identifier	wipeInfoCache		875909	0					
ANR	876069	Identifier	true		875909	1					
ANR	876070	ExpressionStatement	changedRoles << IsClosable << IsMovable << IsResizable << IsMaximizable << IsMinimizable	354:8:12649:12737	875909	1	True				
ANR	876071	ShiftExpression	changedRoles << IsClosable << IsMovable << IsResizable << IsMaximizable << IsMinimizable		875909	0		<<			
ANR	876072	Identifier	changedRoles		875909	0					
ANR	876073	ShiftExpression	IsClosable << IsMovable << IsResizable << IsMaximizable << IsMinimizable		875909	1		<<			
ANR	876074	Identifier	IsClosable		875909	0					
ANR	876075	ShiftExpression	IsMovable << IsResizable << IsMaximizable << IsMinimizable		875909	1		<<			
ANR	876076	Identifier	IsMovable		875909	0					
ANR	876077	ShiftExpression	IsResizable << IsMaximizable << IsMinimizable		875909	1		<<			
ANR	876078	Identifier	IsResizable		875909	0					
ANR	876079	ShiftExpression	IsMaximizable << IsMinimizable		875909	1		<<			
ANR	876080	Identifier	IsMaximizable		875909	0					
ANR	876081	Identifier	IsMinimizable		875909	1					
ANR	876082	ExpressionStatement	changedRoles << IsFullScreenable << IsShadeable << IsVirtualDesktopChangeable	355:8:12747:12824	875909	2	True				
ANR	876083	ShiftExpression	changedRoles << IsFullScreenable << IsShadeable << IsVirtualDesktopChangeable		875909	0		<<			
ANR	876084	Identifier	changedRoles		875909	0					
ANR	876085	ShiftExpression	IsFullScreenable << IsShadeable << IsVirtualDesktopChangeable		875909	1		<<			
ANR	876086	Identifier	IsFullScreenable		875909	0					
ANR	876087	ShiftExpression	IsShadeable << IsVirtualDesktopChangeable		875909	1		<<			
ANR	876088	Identifier	IsShadeable		875909	0					
ANR	876089	Identifier	IsVirtualDesktopChangeable		875909	1					
ANR	876090	IfStatement	if ( properties & NET :: WMDesktop )		875909	9					
ANR	876091	Condition	properties & NET :: WMDesktop	358:8:12841:12867	875909	0	True				
ANR	876092	BitAndExpression	properties & NET :: WMDesktop		875909	0		&			
ANR	876093	Identifier	properties		875909	0					
ANR	876094	Identifier	NET :: WMDesktop		875909	1					
ANR	876095	CompoundStatement		44:37:1677:1677	875909	1					
ANR	876096	ExpressionStatement	wipeInfoCache = true	359:8:12880:12900	875909	0	True				
ANR	876097	AssignmentExpression	wipeInfoCache = true		875909	0		=			
ANR	876098	Identifier	wipeInfoCache		875909	0					
ANR	876099	Identifier	true		875909	1					
ANR	876100	ExpressionStatement	changedRoles << VirtualDesktop << IsOnAllVirtualDesktops	360:8:12910:12966	875909	1	True				
ANR	876101	ShiftExpression	changedRoles << VirtualDesktop << IsOnAllVirtualDesktops		875909	0		<<			
ANR	876102	Identifier	changedRoles		875909	0					
ANR	876103	ShiftExpression	VirtualDesktop << IsOnAllVirtualDesktops		875909	1		<<			
ANR	876104	Identifier	VirtualDesktop		875909	0					
ANR	876105	Identifier	IsOnAllVirtualDesktops		875909	1					
ANR	876106	IfStatement	if ( properties & NET :: WMGeometry )		875909	10					
ANR	876107	Condition	properties & NET :: WMGeometry	363:8:12983:13010	875909	0	True				
ANR	876108	BitAndExpression	properties & NET :: WMGeometry		875909	0		&			
ANR	876109	Identifier	properties		875909	0					
ANR	876110	Identifier	NET :: WMGeometry		875909	1					
ANR	876111	CompoundStatement		49:38:1820:1820	875909	1					
ANR	876112	ExpressionStatement	wipeInfoCache = true	364:8:13023:13043	875909	0	True				
ANR	876113	AssignmentExpression	wipeInfoCache = true		875909	0		=			
ANR	876114	Identifier	wipeInfoCache		875909	0					
ANR	876115	Identifier	true		875909	1					
ANR	876116	ExpressionStatement	changedRoles << Geometry << ScreenGeometry	365:8:13053:13095	875909	1	True				
ANR	876117	ShiftExpression	changedRoles << Geometry << ScreenGeometry		875909	0		<<			
ANR	876118	Identifier	changedRoles		875909	0					
ANR	876119	ShiftExpression	Geometry << ScreenGeometry		875909	1		<<			
ANR	876120	Identifier	Geometry		875909	0					
ANR	876121	Identifier	ScreenGeometry		875909	1					
ANR	876122	IfStatement	if ( properties2 & NET :: WM2Activities )		875909	11					
ANR	876123	Condition	properties2 & NET :: WM2Activities	368:8:13112:13143	875909	0	True				
ANR	876124	BitAndExpression	properties2 & NET :: WM2Activities		875909	0		&			
ANR	876125	Identifier	properties2		875909	0					
ANR	876126	Identifier	NET :: WM2Activities		875909	1					
ANR	876127	CompoundStatement		54:42:1953:1953	875909	1					
ANR	876128	ExpressionStatement	changedRoles << Activities	369:8:13156:13182	875909	0	True				
ANR	876129	ShiftExpression	changedRoles << Activities		875909	0		<<			
ANR	876130	Identifier	changedRoles		875909	0					
ANR	876131	Identifier	Activities		875909	1					
ANR	876132	IfStatement	if ( wipeInfoCache )		875909	12					
ANR	876133	Condition	wipeInfoCache	372:8:13199:13211	875909	0	True				
ANR	876134	Identifier	wipeInfoCache		875909	0					
ANR	876135	CompoundStatement		58:23:2021:2021	875909	1					
ANR	876136	Statement	delete	373:8:13224:13229	875909	0	True				
ANR	876137	ExpressionStatement	windowInfoCache . take ( window )	373:15:13231:13259	875909	1	True				
ANR	876138	CallExpression	windowInfoCache . take ( window )		875909	0					
ANR	876139	Callee	windowInfoCache . take		875909	0					
ANR	876140	MemberAccess	windowInfoCache . take		875909	0					
ANR	876141	Identifier	windowInfoCache		875909	0					
ANR	876142	Identifier	take		875909	1					
ANR	876143	ArgumentList	window		875909	1					
ANR	876144	Argument	window		875909	0					
ANR	876145	Identifier	window		875909	0					
ANR	876146	IfStatement	if ( wipeAppDataCache )		875909	13					
ANR	876147	Condition	wipeAppDataCache	376:8:13276:13291	875909	0	True				
ANR	876148	Identifier	wipeAppDataCache		875909	0					
ANR	876149	CompoundStatement		62:26:2101:2101	875909	1					
ANR	876150	ExpressionStatement	appDataCache . remove ( window )	377:8:13304:13331	875909	0	True				
ANR	876151	CallExpression	appDataCache . remove ( window )		875909	0					
ANR	876152	Callee	appDataCache . remove		875909	0					
ANR	876153	MemberAccess	appDataCache . remove		875909	0					
ANR	876154	Identifier	appDataCache		875909	0					
ANR	876155	Identifier	remove		875909	1					
ANR	876156	ArgumentList	window		875909	1					
ANR	876157	Argument	window		875909	0					
ANR	876158	Identifier	window		875909	0					
ANR	876159	IfStatement	if ( ! changedRoles . isEmpty ( ) )		875909	14					
ANR	876160	Condition	! changedRoles . isEmpty ( )	380:8:13348:13370	875909	0	True				
ANR	876161	UnaryOperationExpression	! changedRoles . isEmpty ( )		875909	0					
ANR	876162	UnaryOperator	!		875909	0					
ANR	876163	CallExpression	changedRoles . isEmpty ( )		875909	1					
ANR	876164	Callee	changedRoles . isEmpty		875909	0					
ANR	876165	MemberAccess	changedRoles . isEmpty		875909	0					
ANR	876166	Identifier	changedRoles		875909	0					
ANR	876167	Identifier	isEmpty		875909	1					
ANR	876168	ArgumentList			875909	1					
ANR	876169	CompoundStatement		66:33:2180:2180	875909	1					
ANR	876170	ExpressionStatement	"dataChanged ( window , changedRoles )"	381:8:13383:13416	875909	0	True				
ANR	876171	CallExpression	"dataChanged ( window , changedRoles )"		875909	0					
ANR	876172	Callee	dataChanged		875909	0					
ANR	876173	Identifier	dataChanged		875909	0					
ANR	876174	ArgumentList	window		875909	1					
ANR	876175	Argument	window		875909	0					
ANR	876176	Identifier	window		875909	0					
ANR	876177	Argument	changedRoles		875909	1					
ANR	876178	Identifier	changedRoles		875909	0					
ANR	876179	ReturnType	void		875909	1					
ANR	876180	Identifier	XWindowTasksModel :: Private :: windowChanged		875909	2					
ANR	876181	ParameterList	"WId window , NET :: Properties properties , NET :: Properties2 properties2"		875909	3					
ANR	876182	Parameter	WId window	314:47:11122:11131	875909	0	True				
ANR	876183	ParameterType	WId		875909	0					
ANR	876184	Identifier	window		875909	1					
ANR	876185	Parameter	NET :: Properties properties	314:59:11134:11159	875909	1	True				
ANR	876186	ParameterType	NET :: Properties		875909	0					
ANR	876187	Identifier	properties		875909	1					
ANR	876188	Parameter	NET :: Properties2 properties2	314:87:11162:11189	875909	2	True				
ANR	876189	ParameterType	NET :: Properties2		875909	0					
ANR	876190	Identifier	properties2		875909	1					
ANR	876191	CFGEntryNode	ENTRY		875909		True				
ANR	876192	CFGExitNode	EXIT		875909		True				
ANR	876193	Symbol	NET :: WMIcon		875909						
ANR	876194	Symbol	NET :: WMState		875909						
ANR	876195	Symbol	NET :: WM2AllowedActions		875909						
ANR	876196	Symbol	changedRoles		875909						
ANR	876197	Symbol	changedRoles . contains		875909						
ANR	876198	Symbol	NET :: WM2Activities		875909						
ANR	876199	Symbol	NET :: WMName		875909						
ANR	876200	Symbol	NET :: WMGeometry		875909						
ANR	876201	Symbol	windowInfoCache		875909						
ANR	876202	Symbol	NET :: WMPid		875909						
ANR	876203	Symbol	transients		875909						
ANR	876204	Symbol	NET :: WM2WindowClass		875909						
ANR	876205	Symbol	NET :: XAWMState		875909						
ANR	876206	Symbol	appDataCache		875909						
ANR	876207	Symbol	Qt :: DecorationRole		875909						
ANR	876208	Symbol	transients . contains		875909						
ANR	876209	Symbol	false		875909						
ANR	876210	Symbol	changedRoles . isEmpty		875909						
ANR	876211	Symbol	NET :: WMWindowType		875909						
ANR	876212	Symbol	NET :: WMDesktop		875909						
ANR	876213	Symbol	true		875909						
ANR	876214	Symbol	wipeInfoCache		875909						
ANR	876215	Symbol	wipeAppDataCache		875909						
ANR	876216	Symbol	window		875909						
ANR	876217	Symbol	properties2		875909						
ANR	876218	Symbol	NET :: WMVisibleName		875909						
ANR	876219	Symbol	properties		875909						
ANR	876220	Function	XWindowTasksModel :: Private :: dataChanged	385:0:13427:13676							
ANR	876221	FunctionDef	"XWindowTasksModel :: Private :: dataChanged (WId window , const QVector < int > & roles)"		876220	0					
ANR	876222	CompoundStatement		386:0:13511:13676	876220	0					
ANR	876223	IdentifierDeclStatement	const int i = windows . indexOf ( window ) ;	387:4:13517:13554	876220	0	True				
ANR	876224	IdentifierDecl	i = windows . indexOf ( window )		876220	0					
ANR	876225	IdentifierDeclType	const int		876220	0					
ANR	876226	Identifier	i		876220	1					
ANR	876227	AssignmentExpression	i = windows . indexOf ( window )		876220	2		=			
ANR	876228	Identifier	i		876220	0					
ANR	876229	CallExpression	windows . indexOf ( window )		876220	1					
ANR	876230	Callee	windows . indexOf		876220	0					
ANR	876231	MemberAccess	windows . indexOf		876220	0					
ANR	876232	Identifier	windows		876220	0					
ANR	876233	Identifier	indexOf		876220	1					
ANR	876234	ArgumentList	window		876220	1					
ANR	876235	Argument	window		876220	0					
ANR	876236	Identifier	window		876220	0					
ANR	876237	IfStatement	if ( i == - 1 )		876220	1					
ANR	876238	Condition	i == - 1	389:8:13565:13571	876220	0	True				
ANR	876239	EqualityExpression	i == - 1		876220	0		==			
ANR	876240	Identifier	i		876220	0					
ANR	876241	UnaryOperationExpression	- 1		876220	1					
ANR	876242	UnaryOperator	-		876220	0					
ANR	876243	PrimaryExpression	1		876220	1					
ANR	876244	CompoundStatement		4:17:62:62	876220	1					
ANR	876245	ReturnStatement	return ;	390:8:13584:13590	876220	0	True				
ANR	876246	IdentifierDeclStatement	QModelIndex idx = q -> index ( i ) ;	393:4:13603:13632	876220	2	True				
ANR	876247	IdentifierDecl	idx = q -> index ( i )		876220	0					
ANR	876248	IdentifierDeclType	QModelIndex		876220	0					
ANR	876249	Identifier	idx		876220	1					
ANR	876250	AssignmentExpression	idx = q -> index ( i )		876220	2		=			
ANR	876251	Identifier	idx		876220	0					
ANR	876252	CallExpression	q -> index ( i )		876220	1					
ANR	876253	Callee	q -> index		876220	0					
ANR	876254	PtrMemberAccess	q -> index		876220	0					
ANR	876255	Identifier	q		876220	0					
ANR	876256	Identifier	index		876220	1					
ANR	876257	ArgumentList	i		876220	1					
ANR	876258	Argument	i		876220	0					
ANR	876259	Identifier	i		876220	0					
ANR	876260	Statement	emit	394:4:13638:13641	876220	3	True				
ANR	876261	ExpressionStatement	"q -> dataChanged ( idx , idx , roles )"	394:9:13643:13674	876220	4	True				
ANR	876262	CallExpression	"q -> dataChanged ( idx , idx , roles )"		876220	0					
ANR	876263	Callee	q -> dataChanged		876220	0					
ANR	876264	PtrMemberAccess	q -> dataChanged		876220	0					
ANR	876265	Identifier	q		876220	0					
ANR	876266	Identifier	dataChanged		876220	1					
ANR	876267	ArgumentList	idx		876220	1					
ANR	876268	Argument	idx		876220	0					
ANR	876269	Identifier	idx		876220	0					
ANR	876270	Argument	idx		876220	1					
ANR	876271	Identifier	idx		876220	0					
ANR	876272	Argument	roles		876220	2					
ANR	876273	Identifier	roles		876220	0					
ANR	876274	ReturnType	void		876220	1					
ANR	876275	Identifier	XWindowTasksModel :: Private :: dataChanged		876220	2					
ANR	876276	ParameterList	"WId window , const QVector < int > & roles"		876220	3					
ANR	876277	Parameter	WId window	385:45:13472:13481	876220	0	True				
ANR	876278	ParameterType	WId		876220	0					
ANR	876279	Identifier	window		876220	1					
ANR	876280	Parameter	const QVector < int > & roles	385:57:13484:13508	876220	1	True				
ANR	876281	ParameterType	const QVector < int > &		876220	0					
ANR	876282	Identifier	roles		876220	1					
ANR	876283	CFGEntryNode	ENTRY		876220		True				
ANR	876284	CFGExitNode	EXIT		876220		True				
ANR	876285	Symbol	q		876220						
ANR	876286	Symbol	windows . indexOf		876220						
ANR	876287	Symbol	q -> index		876220						
ANR	876288	Symbol	roles		876220						
ANR	876289	Symbol	i		876220						
ANR	876290	Symbol	window		876220						
ANR	876291	Symbol	* q		876220						
ANR	876292	Symbol	windows		876220						
ANR	876293	Symbol	idx		876220						
ANR	876294	Function	XWindowTasksModel :: Private :: windowInfo	397:0:13679:13995							
ANR	876295	FunctionDef	XWindowTasksModel :: Private :: windowInfo (WId window)		876294	0					
ANR	876296	CompoundStatement		398:0:13743:13995	876294	0					
ANR	876297	IfStatement	if ( ! windowInfoCache . contains ( window ) )		876294	0					
ANR	876298	Condition	! windowInfoCache . contains ( window )	399:8:13753:13785	876294	0	True				
ANR	876299	UnaryOperationExpression	! windowInfoCache . contains ( window )		876294	0					
ANR	876300	UnaryOperator	!		876294	0					
ANR	876301	CallExpression	windowInfoCache . contains ( window )		876294	1					
ANR	876302	Callee	windowInfoCache . contains		876294	0					
ANR	876303	MemberAccess	windowInfoCache . contains		876294	0					
ANR	876304	Identifier	windowInfoCache		876294	0					
ANR	876305	Identifier	contains		876294	1					
ANR	876306	ArgumentList	window		876294	1					
ANR	876307	Argument	window		876294	0					
ANR	876308	Identifier	window		876294	0					
ANR	876309	CompoundStatement		3:8:54:132	876294	1					
ANR	876310	IdentifierDeclStatement	"KWindowInfo * info = new KWindowInfo ( window , windowInfoFlags , windowInfoFlags2 ) ;"	400:8:13798:13876	876294	0	True				
ANR	876311	IdentifierDecl	"* info = new KWindowInfo ( window , windowInfoFlags , windowInfoFlags2 )"		876294	0					
ANR	876312	IdentifierDeclType	KWindowInfo *		876294	0					
ANR	876313	Identifier	info		876294	1					
ANR	876314	AssignmentExpression	"* info = new KWindowInfo ( window , windowInfoFlags , windowInfoFlags2 )"		876294	2		=			
ANR	876315	Identifier	info		876294	0					
ANR	876316	Expression	"window , windowInfoFlags , windowInfoFlags2"		876294	1					
ANR	876317	Identifier	window		876294	0					
ANR	876318	Expression	"windowInfoFlags , windowInfoFlags2"		876294	1					
ANR	876319	Identifier	windowInfoFlags		876294	0					
ANR	876320	Identifier	windowInfoFlags2		876294	1					
ANR	876321	ExpressionStatement	"windowInfoCache . insert ( window , info )"	401:8:13886:13922	876294	1	True				
ANR	876322	CallExpression	"windowInfoCache . insert ( window , info )"		876294	0					
ANR	876323	Callee	windowInfoCache . insert		876294	0					
ANR	876324	MemberAccess	windowInfoCache . insert		876294	0					
ANR	876325	Identifier	windowInfoCache		876294	0					
ANR	876326	Identifier	insert		876294	1					
ANR	876327	ArgumentList	window		876294	1					
ANR	876328	Argument	window		876294	0					
ANR	876329	Identifier	window		876294	0					
ANR	876330	Argument	info		876294	1					
ANR	876331	Identifier	info		876294	0					
ANR	876332	ReturnStatement	return info ;	403:8:13933:13944	876294	2	True				
ANR	876333	Identifier	info		876294	0					
ANR	876334	ReturnStatement	return windowInfoCache . value ( window ) ;	406:4:13957:13993	876294	1	True				
ANR	876335	CallExpression	windowInfoCache . value ( window )		876294	0					
ANR	876336	Callee	windowInfoCache . value		876294	0					
ANR	876337	MemberAccess	windowInfoCache . value		876294	0					
ANR	876338	Identifier	windowInfoCache		876294	0					
ANR	876339	Identifier	value		876294	1					
ANR	876340	ArgumentList	window		876294	1					
ANR	876341	Argument	window		876294	0					
ANR	876342	Identifier	window		876294	0					
ANR	876343	ReturnType	KWindowInfo *		876294	1					
ANR	876344	Identifier	XWindowTasksModel :: Private :: windowInfo		876294	2					
ANR	876345	ParameterList	WId window		876294	3					
ANR	876346	Parameter	WId window	397:52:13731:13740	876294	0	True				
ANR	876347	ParameterType	WId		876294	0					
ANR	876348	Identifier	window		876294	1					
ANR	876349	CFGEntryNode	ENTRY		876294		True				
ANR	876350	CFGExitNode	EXIT		876294		True				
ANR	876351	Symbol	windowInfoFlags		876294						
ANR	876352	Symbol	windowInfoCache		876294						
ANR	876353	Symbol	windowInfoCache . value		876294						
ANR	876354	Symbol	windowInfoCache . contains		876294						
ANR	876355	Symbol	window		876294						
ANR	876356	Symbol	windowInfoFlags2		876294						
ANR	876357	Symbol	info		876294						
ANR	876358	Function	XWindowTasksModel :: Private :: appData	409:0:13998:14807							
ANR	876359	FunctionDef	XWindowTasksModel :: Private :: appData (WId window)		876358	0					
ANR	876360	CompoundStatement		410:0:14054:14807	876358	0					
ANR	876361	IfStatement	if ( ! appDataCache . contains ( window ) )		876358	0					
ANR	876362	Condition	! appDataCache . contains ( window )	411:8:14064:14093	876358	0	True				
ANR	876363	UnaryOperationExpression	! appDataCache . contains ( window )		876358	0					
ANR	876364	UnaryOperator	!		876358	0					
ANR	876365	CallExpression	appDataCache . contains ( window )		876358	1					
ANR	876366	Callee	appDataCache . contains		876358	0					
ANR	876367	MemberAccess	appDataCache . contains		876358	0					
ANR	876368	Identifier	appDataCache		876358	0					
ANR	876369	Identifier	contains		876358	1					
ANR	876370	ArgumentList	window		876358	1					
ANR	876371	Argument	window		876358	0					
ANR	876372	Identifier	window		876358	0					
ANR	876373	CompoundStatement		3:8:51:106	876358	1					
ANR	876374	IdentifierDeclStatement	const AppData & data = appDataFromUrl ( windowUrl ( window ) ) ;	412:8:14106:14161	876358	0	True				
ANR	876375	IdentifierDecl	& data = appDataFromUrl ( windowUrl ( window ) )		876358	0					
ANR	876376	IdentifierDeclType	const AppData &		876358	0					
ANR	876377	Identifier	data		876358	1					
ANR	876378	AssignmentExpression	& data = appDataFromUrl ( windowUrl ( window ) )		876358	2		=			
ANR	876379	Identifier	data		876358	0					
ANR	876380	CallExpression	appDataFromUrl ( windowUrl ( window ) )		876358	1					
ANR	876381	Callee	appDataFromUrl		876358	0					
ANR	876382	Identifier	appDataFromUrl		876358	0					
ANR	876383	ArgumentList	windowUrl ( window )		876358	1					
ANR	876384	Argument	windowUrl ( window )		876358	0					
ANR	876385	CallExpression	windowUrl ( window )		876358	0					
ANR	876386	Callee	windowUrl		876358	0					
ANR	876387	Identifier	windowUrl		876358	0					
ANR	876388	ArgumentList	window		876358	1					
ANR	876389	Argument	window		876358	0					
ANR	876390	Identifier	window		876358	0					
ANR	876391	IfStatement	if ( data . id . isEmpty ( ) && data . url . isEmpty ( ) )		876358	1					
ANR	876392	Condition	data . id . isEmpty ( ) && data . url . isEmpty ( )	418:12:14456:14494	876358	0	True				
ANR	876393	AndExpression	data . id . isEmpty ( ) && data . url . isEmpty ( )		876358	0		&&			
ANR	876394	CallExpression	data . id . isEmpty ( )		876358	0					
ANR	876395	Callee	data . id . isEmpty		876358	0					
ANR	876396	MemberAccess	data . id . isEmpty		876358	0					
ANR	876397	MemberAccess	data . id		876358	0					
ANR	876398	Identifier	data		876358	0					
ANR	876399	Identifier	id		876358	1					
ANR	876400	Identifier	isEmpty		876358	1					
ANR	876401	ArgumentList			876358	1					
ANR	876402	CallExpression	data . url . isEmpty ( )		876358	1					
ANR	876403	Callee	data . url . isEmpty		876358	0					
ANR	876404	MemberAccess	data . url . isEmpty		876358	0					
ANR	876405	MemberAccess	data . url		876358	0					
ANR	876406	Identifier	data		876358	0					
ANR	876407	Identifier	url		876358	1					
ANR	876408	Identifier	isEmpty		876358	1					
ANR	876409	ArgumentList			876358	1					
ANR	876410	CompoundStatement		10:12:456:479	876358	1					
ANR	876411	IdentifierDeclStatement	AppData dataCopy = data ;	419:12:14511:14534	876358	0	True				
ANR	876412	IdentifierDecl	dataCopy = data		876358	0					
ANR	876413	IdentifierDeclType	AppData		876358	0					
ANR	876414	Identifier	dataCopy		876358	1					
ANR	876415	AssignmentExpression	dataCopy = data		876358	2		=			
ANR	876416	Identifier	data		876358	0					
ANR	876417	Identifier	data		876358	1					
ANR	876418	ExpressionStatement	dataCopy . id = windowInfo ( window ) -> windowClassClass ( )	421:12:14549:14601	876358	1	True				
ANR	876419	AssignmentExpression	dataCopy . id = windowInfo ( window ) -> windowClassClass ( )		876358	0		=			
ANR	876420	MemberAccess	dataCopy . id		876358	0					
ANR	876421	Identifier	dataCopy		876358	0					
ANR	876422	Identifier	id		876358	1					
ANR	876423	CallExpression	windowInfo ( window ) -> windowClassClass ( )		876358	1					
ANR	876424	Callee	windowInfo ( window ) -> windowClassClass		876358	0					
ANR	876425	PtrMemberAccess	windowInfo ( window ) -> windowClassClass		876358	0					
ANR	876426	CallExpression	windowInfo ( window )		876358	0					
ANR	876427	Callee	windowInfo		876358	0					
ANR	876428	Identifier	windowInfo		876358	0					
ANR	876429	ArgumentList	window		876358	1					
ANR	876430	Argument	window		876358	0					
ANR	876431	Identifier	window		876358	0					
ANR	876432	Identifier	windowClassClass		876358	1					
ANR	876433	ArgumentList			876358	1					
ANR	876434	ExpressionStatement	"appDataCache . insert ( window , dataCopy )"	423:12:14616:14653	876358	2	True				
ANR	876435	CallExpression	"appDataCache . insert ( window , dataCopy )"		876358	0					
ANR	876436	Callee	appDataCache . insert		876358	0					
ANR	876437	MemberAccess	appDataCache . insert		876358	0					
ANR	876438	Identifier	appDataCache		876358	0					
ANR	876439	Identifier	insert		876358	1					
ANR	876440	ArgumentList	window		876358	1					
ANR	876441	Argument	window		876358	0					
ANR	876442	Identifier	window		876358	0					
ANR	876443	Argument	dataCopy		876358	1					
ANR	876444	Identifier	dataCopy		876358	0					
ANR	876445	ReturnStatement	return dataCopy ;	425:12:14668:14683	876358	3	True				
ANR	876446	Identifier	dataCopy		876358	0					
ANR	876447	ExpressionStatement	"appDataCache . insert ( window , data )"	428:8:14704:14737	876358	2	True				
ANR	876448	CallExpression	"appDataCache . insert ( window , data )"		876358	0					
ANR	876449	Callee	appDataCache . insert		876358	0					
ANR	876450	MemberAccess	appDataCache . insert		876358	0					
ANR	876451	Identifier	appDataCache		876358	0					
ANR	876452	Identifier	insert		876358	1					
ANR	876453	ArgumentList	window		876358	1					
ANR	876454	Argument	window		876358	0					
ANR	876455	Identifier	window		876358	0					
ANR	876456	Argument	data		876358	1					
ANR	876457	Identifier	data		876358	0					
ANR	876458	ReturnStatement	return data ;	430:8:14748:14759	876358	3	True				
ANR	876459	Identifier	data		876358	0					
ANR	876460	ReturnStatement	return appDataCache . value ( window ) ;	433:4:14772:14805	876358	1	True				
ANR	876461	CallExpression	appDataCache . value ( window )		876358	0					
ANR	876462	Callee	appDataCache . value		876358	0					
ANR	876463	MemberAccess	appDataCache . value		876358	0					
ANR	876464	Identifier	appDataCache		876358	0					
ANR	876465	Identifier	value		876358	1					
ANR	876466	ArgumentList	window		876358	1					
ANR	876467	Argument	window		876358	0					
ANR	876468	Identifier	window		876358	0					
ANR	876469	ReturnType	AppData		876358	1					
ANR	876470	Identifier	XWindowTasksModel :: Private :: appData		876358	2					
ANR	876471	ParameterList	WId window		876358	3					
ANR	876472	Parameter	WId window	409:44:14042:14051	876358	0	True				
ANR	876473	ParameterType	WId		876358	0					
ANR	876474	Identifier	window		876358	1					
ANR	876475	CFGEntryNode	ENTRY		876358		True				
ANR	876476	CFGExitNode	EXIT		876358		True				
ANR	876477	Symbol	appDataCache . value		876358						
ANR	876478	Symbol	windowInfo		876358						
ANR	876479	Symbol	appDataCache		876358						
ANR	876480	Symbol	data		876358						
ANR	876481	Symbol	dataCopy		876358						
ANR	876482	Symbol	dataCopy . id		876358						
ANR	876483	Symbol	data . id . isEmpty		876358						
ANR	876484	Symbol	* windowInfo		876358						
ANR	876485	Symbol	windowUrl		876358						
ANR	876486	Symbol	data . url		876358						
ANR	876487	Symbol	windowInfo ( window ) -> windowClassClass		876358						
ANR	876488	Symbol	window		876358						
ANR	876489	Symbol	data . url . isEmpty		876358						
ANR	876490	Symbol	appDataFromUrl		876358						
ANR	876491	Symbol	data . id		876358						
ANR	876492	Symbol	appDataCache . contains		876358						
ANR	876493	Function	XWindowTasksModel :: Private :: icon	436:0:14810:15433							
ANR	876494	FunctionDef	XWindowTasksModel :: Private :: icon (WId window)		876493	0					
ANR	876495	CompoundStatement		437:0:14861:15433	876493	0					
ANR	876496	IdentifierDeclStatement	const AppData & app = appData ( window ) ;	438:4:14867:14903	876493	0	True				
ANR	876497	IdentifierDecl	& app = appData ( window )		876493	0					
ANR	876498	IdentifierDeclType	const AppData &		876493	0					
ANR	876499	Identifier	app		876493	1					
ANR	876500	AssignmentExpression	& app = appData ( window )		876493	2		=			
ANR	876501	Identifier	app		876493	0					
ANR	876502	CallExpression	appData ( window )		876493	1					
ANR	876503	Callee	appData		876493	0					
ANR	876504	Identifier	appData		876493	0					
ANR	876505	ArgumentList	window		876493	1					
ANR	876506	Argument	window		876493	0					
ANR	876507	Identifier	window		876493	0					
ANR	876508	IfStatement	if ( ! app . icon . isNull ( ) )		876493	1					
ANR	876509	Condition	! app . icon . isNull ( )	440:8:14914:14931	876493	0	True				
ANR	876510	UnaryOperationExpression	! app . icon . isNull ( )		876493	0					
ANR	876511	UnaryOperator	!		876493	0					
ANR	876512	CallExpression	app . icon . isNull ( )		876493	1					
ANR	876513	Callee	app . icon . isNull		876493	0					
ANR	876514	MemberAccess	app . icon . isNull		876493	0					
ANR	876515	MemberAccess	app . icon		876493	0					
ANR	876516	Identifier	app		876493	0					
ANR	876517	Identifier	icon		876493	1					
ANR	876518	Identifier	isNull		876493	1					
ANR	876519	ArgumentList			876493	1					
ANR	876520	CompoundStatement		4:28:72:72	876493	1					
ANR	876521	ReturnStatement	return app . icon ;	441:8:14944:14959	876493	0	True				
ANR	876522	MemberAccess	app . icon		876493	0					
ANR	876523	Identifier	app		876493	0					
ANR	876524	Identifier	icon		876493	1					
ANR	876525	IdentifierDeclStatement	QIcon icon ;	444:4:14972:14982	876493	2	True				
ANR	876526	IdentifierDecl	icon		876493	0					
ANR	876527	IdentifierDeclType	QIcon		876493	0					
ANR	876528	Identifier	icon		876493	1					
ANR	876529	ExpressionStatement	"icon . addPixmap ( KWindowSystem :: icon ( window , KIconLoader :: SizeSmall , KIconLoader :: SizeSmall , false ) )"	446:4:14989:15087	876493	3	True				
ANR	876530	CallExpression	"icon . addPixmap ( KWindowSystem :: icon ( window , KIconLoader :: SizeSmall , KIconLoader :: SizeSmall , false ) )"		876493	0					
ANR	876531	Callee	icon . addPixmap		876493	0					
ANR	876532	MemberAccess	icon . addPixmap		876493	0					
ANR	876533	Identifier	icon		876493	0					
ANR	876534	Identifier	addPixmap		876493	1					
ANR	876535	ArgumentList	"KWindowSystem :: icon ( window , KIconLoader :: SizeSmall , KIconLoader :: SizeSmall , false )"		876493	1					
ANR	876536	Argument	"KWindowSystem :: icon ( window , KIconLoader :: SizeSmall , KIconLoader :: SizeSmall , false )"		876493	0					
ANR	876537	CallExpression	"KWindowSystem :: icon ( window , KIconLoader :: SizeSmall , KIconLoader :: SizeSmall , false )"		876493	0					
ANR	876538	Callee	KWindowSystem :: icon		876493	0					
ANR	876539	Identifier	KWindowSystem :: icon		876493	0					
ANR	876540	ArgumentList	window		876493	1					
ANR	876541	Argument	window		876493	0					
ANR	876542	Identifier	window		876493	0					
ANR	876543	Argument	KIconLoader :: SizeSmall		876493	1					
ANR	876544	Identifier	KIconLoader :: SizeSmall		876493	0					
ANR	876545	Argument	KIconLoader :: SizeSmall		876493	2					
ANR	876546	Identifier	KIconLoader :: SizeSmall		876493	0					
ANR	876547	Argument	false		876493	3					
ANR	876548	Identifier	false		876493	0					
ANR	876549	ExpressionStatement	"icon . addPixmap ( KWindowSystem :: icon ( window , KIconLoader :: SizeSmallMedium , KIconLoader :: SizeSmallMedium , false ) )"	447:4:15093:15203	876493	4	True				
ANR	876550	CallExpression	"icon . addPixmap ( KWindowSystem :: icon ( window , KIconLoader :: SizeSmallMedium , KIconLoader :: SizeSmallMedium , false ) )"		876493	0					
ANR	876551	Callee	icon . addPixmap		876493	0					
ANR	876552	MemberAccess	icon . addPixmap		876493	0					
ANR	876553	Identifier	icon		876493	0					
ANR	876554	Identifier	addPixmap		876493	1					
ANR	876555	ArgumentList	"KWindowSystem :: icon ( window , KIconLoader :: SizeSmallMedium , KIconLoader :: SizeSmallMedium , false )"		876493	1					
ANR	876556	Argument	"KWindowSystem :: icon ( window , KIconLoader :: SizeSmallMedium , KIconLoader :: SizeSmallMedium , false )"		876493	0					
ANR	876557	CallExpression	"KWindowSystem :: icon ( window , KIconLoader :: SizeSmallMedium , KIconLoader :: SizeSmallMedium , false )"		876493	0					
ANR	876558	Callee	KWindowSystem :: icon		876493	0					
ANR	876559	Identifier	KWindowSystem :: icon		876493	0					
ANR	876560	ArgumentList	window		876493	1					
ANR	876561	Argument	window		876493	0					
ANR	876562	Identifier	window		876493	0					
ANR	876563	Argument	KIconLoader :: SizeSmallMedium		876493	1					
ANR	876564	Identifier	KIconLoader :: SizeSmallMedium		876493	0					
ANR	876565	Argument	KIconLoader :: SizeSmallMedium		876493	2					
ANR	876566	Identifier	KIconLoader :: SizeSmallMedium		876493	0					
ANR	876567	Argument	false		876493	3					
ANR	876568	Identifier	false		876493	0					
ANR	876569	ExpressionStatement	"icon . addPixmap ( KWindowSystem :: icon ( window , KIconLoader :: SizeMedium , KIconLoader :: SizeMedium , false ) )"	448:4:15209:15309	876493	5	True				
ANR	876570	CallExpression	"icon . addPixmap ( KWindowSystem :: icon ( window , KIconLoader :: SizeMedium , KIconLoader :: SizeMedium , false ) )"		876493	0					
ANR	876571	Callee	icon . addPixmap		876493	0					
ANR	876572	MemberAccess	icon . addPixmap		876493	0					
ANR	876573	Identifier	icon		876493	0					
ANR	876574	Identifier	addPixmap		876493	1					
ANR	876575	ArgumentList	"KWindowSystem :: icon ( window , KIconLoader :: SizeMedium , KIconLoader :: SizeMedium , false )"		876493	1					
ANR	876576	Argument	"KWindowSystem :: icon ( window , KIconLoader :: SizeMedium , KIconLoader :: SizeMedium , false )"		876493	0					
ANR	876577	CallExpression	"KWindowSystem :: icon ( window , KIconLoader :: SizeMedium , KIconLoader :: SizeMedium , false )"		876493	0					
ANR	876578	Callee	KWindowSystem :: icon		876493	0					
ANR	876579	Identifier	KWindowSystem :: icon		876493	0					
ANR	876580	ArgumentList	window		876493	1					
ANR	876581	Argument	window		876493	0					
ANR	876582	Identifier	window		876493	0					
ANR	876583	Argument	KIconLoader :: SizeMedium		876493	1					
ANR	876584	Identifier	KIconLoader :: SizeMedium		876493	0					
ANR	876585	Argument	KIconLoader :: SizeMedium		876493	2					
ANR	876586	Identifier	KIconLoader :: SizeMedium		876493	0					
ANR	876587	Argument	false		876493	3					
ANR	876588	Identifier	false		876493	0					
ANR	876589	ExpressionStatement	"icon . addPixmap ( KWindowSystem :: icon ( window , KIconLoader :: SizeLarge , KIconLoader :: SizeLarge , false ) )"	449:4:15315:15413	876493	6	True				
ANR	876590	CallExpression	"icon . addPixmap ( KWindowSystem :: icon ( window , KIconLoader :: SizeLarge , KIconLoader :: SizeLarge , false ) )"		876493	0					
ANR	876591	Callee	icon . addPixmap		876493	0					
ANR	876592	MemberAccess	icon . addPixmap		876493	0					
ANR	876593	Identifier	icon		876493	0					
ANR	876594	Identifier	addPixmap		876493	1					
ANR	876595	ArgumentList	"KWindowSystem :: icon ( window , KIconLoader :: SizeLarge , KIconLoader :: SizeLarge , false )"		876493	1					
ANR	876596	Argument	"KWindowSystem :: icon ( window , KIconLoader :: SizeLarge , KIconLoader :: SizeLarge , false )"		876493	0					
ANR	876597	CallExpression	"KWindowSystem :: icon ( window , KIconLoader :: SizeLarge , KIconLoader :: SizeLarge , false )"		876493	0					
ANR	876598	Callee	KWindowSystem :: icon		876493	0					
ANR	876599	Identifier	KWindowSystem :: icon		876493	0					
ANR	876600	ArgumentList	window		876493	1					
ANR	876601	Argument	window		876493	0					
ANR	876602	Identifier	window		876493	0					
ANR	876603	Argument	KIconLoader :: SizeLarge		876493	1					
ANR	876604	Identifier	KIconLoader :: SizeLarge		876493	0					
ANR	876605	Argument	KIconLoader :: SizeLarge		876493	2					
ANR	876606	Identifier	KIconLoader :: SizeLarge		876493	0					
ANR	876607	Argument	false		876493	3					
ANR	876608	Identifier	false		876493	0					
ANR	876609	ReturnStatement	return icon ;	451:4:15420:15431	876493	7	True				
ANR	876610	Identifier	icon		876493	0					
ANR	876611	ReturnType	QIcon		876493	1					
ANR	876612	Identifier	XWindowTasksModel :: Private :: icon		876493	2					
ANR	876613	ParameterList	WId window		876493	3					
ANR	876614	Parameter	WId window	436:39:14849:14858	876493	0	True				
ANR	876615	ParameterType	WId		876493	0					
ANR	876616	Identifier	window		876493	1					
ANR	876617	CFGEntryNode	ENTRY		876493		True				
ANR	876618	CFGExitNode	EXIT		876493		True				
ANR	876619	Symbol	app		876493						
ANR	876620	Symbol	KWindowSystem :: icon		876493						
ANR	876621	Symbol	app . icon . isNull		876493						
ANR	876622	Symbol	KIconLoader :: SizeSmallMedium		876493						
ANR	876623	Symbol	app . icon		876493						
ANR	876624	Symbol	icon		876493						
ANR	876625	Symbol	false		876493						
ANR	876626	Symbol	window		876493						
ANR	876627	Symbol	KIconLoader :: SizeLarge		876493						
ANR	876628	Symbol	appData		876493						
ANR	876629	Symbol	KIconLoader :: SizeMedium		876493						
ANR	876630	Symbol	KIconLoader :: SizeSmall		876493						
ANR	876631	Function	XWindowTasksModel :: Private :: mimeType	454:0:15436:15534							
ANR	876632	FunctionDef	XWindowTasksModel :: Private :: mimeType ()		876631	0					
ANR	876633	CompoundStatement		455:0:15483:15534	876631	0					
ANR	876634	ReturnStatement	"return QStringLiteral ( ""windowsystem/winid"" ) ;"	456:4:15489:15532	876631	0	True				
ANR	876635	CallExpression	"QStringLiteral ( ""windowsystem/winid"" )"		876631	0					
ANR	876636	Callee	QStringLiteral		876631	0					
ANR	876637	Identifier	QStringLiteral		876631	0					
ANR	876638	ArgumentList	"""windowsystem/winid"""		876631	1					
ANR	876639	Argument	"""windowsystem/winid"""		876631	0					
ANR	876640	PrimaryExpression	"""windowsystem/winid"""		876631	0					
ANR	876641	ReturnType	QString		876631	1					
ANR	876642	Identifier	XWindowTasksModel :: Private :: mimeType		876631	2					
ANR	876643	ParameterList			876631	3					
ANR	876644	CFGEntryNode	ENTRY		876631		True				
ANR	876645	CFGExitNode	EXIT		876631		True				
ANR	876646	Symbol	QStringLiteral		876631						
ANR	876647	Function	XWindowTasksModel :: Private :: groupMimeType	459:0:15537:15650							
ANR	876648	FunctionDef	XWindowTasksModel :: Private :: groupMimeType ()		876647	0					
ANR	876649	CompoundStatement		460:0:15589:15650	876647	0					
ANR	876650	ReturnStatement	"return QStringLiteral ( ""windowsystem/multiple-winids"" ) ;"	461:4:15595:15648	876647	0	True				
ANR	876651	CallExpression	"QStringLiteral ( ""windowsystem/multiple-winids"" )"		876647	0					
ANR	876652	Callee	QStringLiteral		876647	0					
ANR	876653	Identifier	QStringLiteral		876647	0					
ANR	876654	ArgumentList	"""windowsystem/multiple-winids"""		876647	1					
ANR	876655	Argument	"""windowsystem/multiple-winids"""		876647	0					
ANR	876656	PrimaryExpression	"""windowsystem/multiple-winids"""		876647	0					
ANR	876657	ReturnType	QString		876647	1					
ANR	876658	Identifier	XWindowTasksModel :: Private :: groupMimeType		876647	2					
ANR	876659	ParameterList			876647	3					
ANR	876660	CFGEntryNode	ENTRY		876647		True				
ANR	876661	CFGExitNode	EXIT		876647		True				
ANR	876662	Symbol	QStringLiteral		876647						
ANR	876663	Function	XWindowTasksModel :: Private :: windowUrl	464:0:15653:24315							
ANR	876664	FunctionDef	XWindowTasksModel :: Private :: windowUrl (WId window)		876663	0					
ANR	876665	CompoundStatement		465:0:15708:24315	876663	0					
ANR	876666	IdentifierDeclStatement	QUrl url ;	466:4:15714:15722	876663	0	True				
ANR	876667	IdentifierDecl	url		876663	0					
ANR	876668	IdentifierDeclType	QUrl		876663	0					
ANR	876669	Identifier	url		876663	1					
ANR	876670	IdentifierDeclStatement	const KWindowInfo * info = windowInfo ( window ) ;	468:4:15729:15773	876663	1	True				
ANR	876671	IdentifierDecl	* info = windowInfo ( window )		876663	0					
ANR	876672	IdentifierDeclType	const KWindowInfo *		876663	0					
ANR	876673	Identifier	info		876663	1					
ANR	876674	AssignmentExpression	* info = windowInfo ( window )		876663	2		=			
ANR	876675	Identifier	info		876663	0					
ANR	876676	CallExpression	windowInfo ( window )		876663	1					
ANR	876677	Callee	windowInfo		876663	0					
ANR	876678	Identifier	windowInfo		876663	0					
ANR	876679	ArgumentList	window		876663	1					
ANR	876680	Argument	window		876663	0					
ANR	876681	Identifier	window		876663	0					
ANR	876682	IdentifierDeclStatement	const QString & classClass = info -> windowClassClass ( ) ;	469:4:15779:15831	876663	2	True				
ANR	876683	IdentifierDecl	& classClass = info -> windowClassClass ( )		876663	0					
ANR	876684	IdentifierDeclType	const QString &		876663	0					
ANR	876685	Identifier	classClass		876663	1					
ANR	876686	AssignmentExpression	& classClass = info -> windowClassClass ( )		876663	2		=			
ANR	876687	Identifier	classClass		876663	0					
ANR	876688	CallExpression	info -> windowClassClass ( )		876663	1					
ANR	876689	Callee	info -> windowClassClass		876663	0					
ANR	876690	PtrMemberAccess	info -> windowClassClass		876663	0					
ANR	876691	Identifier	info		876663	0					
ANR	876692	Identifier	windowClassClass		876663	1					
ANR	876693	ArgumentList			876663	1					
ANR	876694	IdentifierDeclStatement	const QString & className = info -> windowClassName ( ) ;	470:4:15837:15887	876663	3	True				
ANR	876695	IdentifierDecl	& className = info -> windowClassName ( )		876663	0					
ANR	876696	IdentifierDeclType	const QString &		876663	0					
ANR	876697	Identifier	className		876663	1					
ANR	876698	AssignmentExpression	& className = info -> windowClassName ( )		876663	2		=			
ANR	876699	Identifier	className		876663	0					
ANR	876700	CallExpression	info -> windowClassName ( )		876663	1					
ANR	876701	Callee	info -> windowClassName		876663	0					
ANR	876702	PtrMemberAccess	info -> windowClassName		876663	0					
ANR	876703	Identifier	info		876663	0					
ANR	876704	Identifier	windowClassName		876663	1					
ANR	876705	ArgumentList			876663	1					
ANR	876706	IdentifierDeclStatement	KService :: List services ;	472:4:15894:15917	876663	4	True				
ANR	876707	IdentifierDecl	services		876663	0					
ANR	876708	IdentifierDeclType	KService :: List		876663	0					
ANR	876709	Identifier	services		876663	1					
ANR	876710	IdentifierDeclStatement	bool triedPid = false ;	473:4:15923:15944	876663	5	True				
ANR	876711	IdentifierDecl	triedPid = false		876663	0					
ANR	876712	IdentifierDeclType	bool		876663	0					
ANR	876713	Identifier	triedPid		876663	1					
ANR	876714	AssignmentExpression	triedPid = false		876663	2		=			
ANR	876715	Identifier	false		876663	0					
ANR	876716	Identifier	false		876663	1					
ANR	876717	IfStatement	if ( ! ( classClass . isEmpty ( ) && className . isEmpty ( ) ) )		876663	6					
ANR	876718	Condition	! ( classClass . isEmpty ( ) && className . isEmpty ( ) )	475:8:15955:16000	876663	0	True				
ANR	876719	UnaryOperationExpression	! ( classClass . isEmpty ( ) && className . isEmpty ( ) )		876663	0					
ANR	876720	UnaryOperator	!		876663	0					
ANR	876721	AndExpression	classClass . isEmpty ( ) && className . isEmpty ( )		876663	1		&&			
ANR	876722	CallExpression	classClass . isEmpty ( )		876663	0					
ANR	876723	Callee	classClass . isEmpty		876663	0					
ANR	876724	MemberAccess	classClass . isEmpty		876663	0					
ANR	876725	Identifier	classClass		876663	0					
ANR	876726	Identifier	isEmpty		876663	1					
ANR	876727	ArgumentList			876663	1					
ANR	876728	CallExpression	className . isEmpty ( )		876663	1					
ANR	876729	Callee	className . isEmpty		876663	0					
ANR	876730	MemberAccess	className . isEmpty		876663	0					
ANR	876731	Identifier	className		876663	0					
ANR	876732	Identifier	isEmpty		876663	1					
ANR	876733	ArgumentList			876663	1					
ANR	876734	CompoundStatement		45:8:1826:1897	876663	1					
ANR	876735	IdentifierDeclStatement	"int pid = NETWinInfo ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMPid , 0 ) . pid ( ) ;"	476:8:16013:16113	876663	0	True				
ANR	876736	IdentifierDecl	"pid = NETWinInfo ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMPid , 0 ) . pid ( )"		876663	0					
ANR	876737	IdentifierDeclType	int		876663	0					
ANR	876738	Identifier	pid		876663	1					
ANR	876739	AssignmentExpression	"pid = NETWinInfo ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMPid , 0 ) . pid ( )"		876663	2		=			
ANR	876740	Identifier	pid		876663	0					
ANR	876741	CallExpression	"NETWinInfo ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMPid , 0 ) . pid ( )"		876663	1					
ANR	876742	Callee	"NETWinInfo ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMPid , 0 ) . pid"		876663	0					
ANR	876743	MemberAccess	"NETWinInfo ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMPid , 0 ) . pid"		876663	0					
ANR	876744	CallExpression	"NETWinInfo ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMPid , 0 )"		876663	0					
ANR	876745	Callee	NETWinInfo		876663	0					
ANR	876746	Identifier	NETWinInfo		876663	0					
ANR	876747	ArgumentList	QX11Info :: connection ( )		876663	1					
ANR	876748	Argument	QX11Info :: connection ( )		876663	0					
ANR	876749	CallExpression	QX11Info :: connection ( )		876663	0					
ANR	876750	Callee	QX11Info :: connection		876663	0					
ANR	876751	Identifier	QX11Info :: connection		876663	0					
ANR	876752	ArgumentList			876663	1					
ANR	876753	Argument	window		876663	1					
ANR	876754	Identifier	window		876663	0					
ANR	876755	Argument	QX11Info :: appRootWindow ( )		876663	2					
ANR	876756	CallExpression	QX11Info :: appRootWindow ( )		876663	0					
ANR	876757	Callee	QX11Info :: appRootWindow		876663	0					
ANR	876758	Identifier	QX11Info :: appRootWindow		876663	0					
ANR	876759	ArgumentList			876663	1					
ANR	876760	Argument	NET :: WMPid		876663	3					
ANR	876761	Identifier	NET :: WMPid		876663	0					
ANR	876762	Argument	0		876663	4					
ANR	876763	PrimaryExpression	0		876663	0					
ANR	876764	Identifier	pid		876663	1					
ANR	876765	ArgumentList			876663	1					
ANR	876766	IfStatement	"if ( classClass == ""kcmshell5"" )"		876663	1					
ANR	876767	Condition	"classClass == ""kcmshell5"""	482:12:16468:16492	876663	0	True				
ANR	876768	EqualityExpression	"classClass == ""kcmshell5"""		876663	0		==			
ANR	876769	Identifier	classClass		876663	0					
ANR	876770	PrimaryExpression	"""kcmshell5"""		876663	1					
ANR	876771	CompoundStatement		18:39:786:786	876663	1					
ANR	876772	ExpressionStatement	"url = serviceUrl ( pid , QStringLiteral ( ""KCModule"" ) , QStringList ( ) << QStringLiteral ( ""kdeinit5:"" ) << QStringLiteral ( ""[kdeinit]"" ) )"	483:12:16509:16635	876663	0	True				
ANR	876773	AssignmentExpression	"url = serviceUrl ( pid , QStringLiteral ( ""KCModule"" ) , QStringList ( ) << QStringLiteral ( ""kdeinit5:"" ) << QStringLiteral ( ""[kdeinit]"" ) )"		876663	0		=			
ANR	876774	Identifier	url		876663	0					
ANR	876775	CallExpression	"serviceUrl ( pid , QStringLiteral ( ""KCModule"" ) , QStringList ( ) << QStringLiteral ( ""kdeinit5:"" ) << QStringLiteral ( ""[kdeinit]"" ) )"		876663	1					
ANR	876776	Callee	serviceUrl		876663	0					
ANR	876777	Identifier	serviceUrl		876663	0					
ANR	876778	ArgumentList	pid		876663	1					
ANR	876779	Argument	pid		876663	0					
ANR	876780	Identifier	pid		876663	0					
ANR	876781	Argument	"QStringLiteral ( ""KCModule"" )"		876663	1					
ANR	876782	CallExpression	"QStringLiteral ( ""KCModule"" )"		876663	0					
ANR	876783	Callee	QStringLiteral		876663	0					
ANR	876784	Identifier	QStringLiteral		876663	0					
ANR	876785	ArgumentList	"""KCModule"""		876663	1					
ANR	876786	Argument	"""KCModule"""		876663	0					
ANR	876787	PrimaryExpression	"""KCModule"""		876663	0					
ANR	876788	Argument	"QStringList ( ) << QStringLiteral ( ""kdeinit5:"" ) << QStringLiteral ( ""[kdeinit]"" )"		876663	2					
ANR	876789	ShiftExpression	"QStringList ( ) << QStringLiteral ( ""kdeinit5:"" ) << QStringLiteral ( ""[kdeinit]"" )"		876663	0		<<			
ANR	876790	CallExpression	QStringList ( )		876663	0					
ANR	876791	Callee	QStringList		876663	0					
ANR	876792	Identifier	QStringList		876663	0					
ANR	876793	ArgumentList			876663	1					
ANR	876794	ShiftExpression	"QStringLiteral ( ""kdeinit5:"" ) << QStringLiteral ( ""[kdeinit]"" )"		876663	1		<<			
ANR	876795	CallExpression	"QStringLiteral ( ""kdeinit5:"" )"		876663	0					
ANR	876796	Callee	QStringLiteral		876663	0					
ANR	876797	Identifier	QStringLiteral		876663	0					
ANR	876798	ArgumentList	"""kdeinit5:"""		876663	1					
ANR	876799	Argument	"""kdeinit5:"""		876663	0					
ANR	876800	PrimaryExpression	"""kdeinit5:"""		876663	0					
ANR	876801	CallExpression	"QStringLiteral ( ""[kdeinit]"" )"		876663	1					
ANR	876802	Callee	QStringLiteral		876663	0					
ANR	876803	Identifier	QStringLiteral		876663	0					
ANR	876804	ArgumentList	"""[kdeinit]"""		876663	1					
ANR	876805	Argument	"""[kdeinit]"""		876663	0					
ANR	876806	PrimaryExpression	"""[kdeinit]"""		876663	0					
ANR	876807	IfStatement	if ( ! url . isEmpty ( ) )		876663	1					
ANR	876808	Condition	! url . isEmpty ( )	485:16:16654:16667	876663	0	True				
ANR	876809	UnaryOperationExpression	! url . isEmpty ( )		876663	0					
ANR	876810	UnaryOperator	!		876663	0					
ANR	876811	CallExpression	url . isEmpty ( )		876663	1					
ANR	876812	Callee	url . isEmpty		876663	0					
ANR	876813	MemberAccess	url . isEmpty		876663	0					
ANR	876814	Identifier	url		876663	0					
ANR	876815	Identifier	isEmpty		876663	1					
ANR	876816	ArgumentList			876663	1					
ANR	876817	CompoundStatement		21:32:961:961	876663	1					
ANR	876818	ReturnStatement	return url ;	486:16:16688:16698	876663	0	True				
ANR	876819	Identifier	url		876663	0					
ANR	876820	IdentifierDeclStatement	"KConfigGroup grp ( rulesConfig , ""Mapping"" ) ;"	491:8:16797:16837	876663	2	True				
ANR	876821	IdentifierDecl	"grp ( rulesConfig , ""Mapping"" )"		876663	0					
ANR	876822	IdentifierDeclType	KConfigGroup		876663	0					
ANR	876823	Identifier	grp		876663	1					
ANR	876824	Expression	"rulesConfig , ""Mapping"""		876663	2					
ANR	876825	Identifier	rulesConfig		876663	0					
ANR	876826	PrimaryExpression	"""Mapping"""		876663	1					
ANR	876827	IdentifierDeclStatement	"KConfigGroup set ( rulesConfig , ""Settings"" ) ;"	492:8:16847:16888	876663	3	True				
ANR	876828	IdentifierDecl	"set ( rulesConfig , ""Settings"" )"		876663	0					
ANR	876829	IdentifierDeclType	KConfigGroup		876663	0					
ANR	876830	Identifier	set		876663	1					
ANR	876831	Expression	"rulesConfig , ""Settings"""		876663	2					
ANR	876832	Identifier	rulesConfig		876663	0					
ANR	876833	PrimaryExpression	"""Settings"""		876663	1					
ANR	876834	IdentifierDeclStatement	"QStringList matchCommandLineFirst = set . readEntry ( ""MatchCommandLineFirst"" , QStringList ( ) ) ;"	495:8:16977:17066	876663	4	True				
ANR	876835	IdentifierDecl	"matchCommandLineFirst = set . readEntry ( ""MatchCommandLineFirst"" , QStringList ( ) )"		876663	0					
ANR	876836	IdentifierDeclType	QStringList		876663	0					
ANR	876837	Identifier	matchCommandLineFirst		876663	1					
ANR	876838	AssignmentExpression	"matchCommandLineFirst = set . readEntry ( ""MatchCommandLineFirst"" , QStringList ( ) )"		876663	2		=			
ANR	876839	Identifier	matchCommandLineFirst		876663	0					
ANR	876840	CallExpression	"set . readEntry ( ""MatchCommandLineFirst"" , QStringList ( ) )"		876663	1					
ANR	876841	Callee	set . readEntry		876663	0					
ANR	876842	MemberAccess	set . readEntry		876663	0					
ANR	876843	Identifier	set		876663	0					
ANR	876844	Identifier	readEntry		876663	1					
ANR	876845	ArgumentList	"""MatchCommandLineFirst"""		876663	1					
ANR	876846	Argument	"""MatchCommandLineFirst"""		876663	0					
ANR	876847	PrimaryExpression	"""MatchCommandLineFirst"""		876663	0					
ANR	876848	Argument	QStringList ( )		876663	1					
ANR	876849	CallExpression	QStringList ( )		876663	0					
ANR	876850	Callee	QStringList		876663	0					
ANR	876851	Identifier	QStringList		876663	0					
ANR	876852	ArgumentList			876663	1					
ANR	876853	IfStatement	if ( ! classClass . isEmpty ( ) && matchCommandLineFirst . contains ( classClass ) )		876663	5					
ANR	876854	Condition	! classClass . isEmpty ( ) && matchCommandLineFirst . contains ( classClass )	497:12:17081:17147	876663	0	True				
ANR	876855	AndExpression	! classClass . isEmpty ( ) && matchCommandLineFirst . contains ( classClass )		876663	0		&&			
ANR	876856	UnaryOperationExpression	! classClass . isEmpty ( )		876663	0					
ANR	876857	UnaryOperator	!		876663	0					
ANR	876858	CallExpression	classClass . isEmpty ( )		876663	1					
ANR	876859	Callee	classClass . isEmpty		876663	0					
ANR	876860	MemberAccess	classClass . isEmpty		876663	0					
ANR	876861	Identifier	classClass		876663	0					
ANR	876862	Identifier	isEmpty		876663	1					
ANR	876863	ArgumentList			876663	1					
ANR	876864	CallExpression	matchCommandLineFirst . contains ( classClass )		876663	1					
ANR	876865	Callee	matchCommandLineFirst . contains		876663	0					
ANR	876866	MemberAccess	matchCommandLineFirst . contains		876663	0					
ANR	876867	Identifier	matchCommandLineFirst		876663	0					
ANR	876868	Identifier	contains		876663	1					
ANR	876869	ArgumentList	classClass		876663	1					
ANR	876870	Argument	classClass		876663	0					
ANR	876871	Identifier	classClass		876663	0					
ANR	876872	CompoundStatement		33:81:1441:1441	876663	1					
ANR	876873	ExpressionStatement	triedPid = true	498:12:17164:17179	876663	0	True				
ANR	876874	AssignmentExpression	triedPid = true		876663	0		=			
ANR	876875	Identifier	triedPid		876663	0					
ANR	876876	Identifier	true		876663	1					
ANR	876877	ExpressionStatement	services = servicesFromPid ( pid )	499:12:17193:17224	876663	1	True				
ANR	876878	AssignmentExpression	services = servicesFromPid ( pid )		876663	0		=			
ANR	876879	Identifier	services		876663	0					
ANR	876880	CallExpression	servicesFromPid ( pid )		876663	1					
ANR	876881	Callee	servicesFromPid		876663	0					
ANR	876882	Identifier	servicesFromPid		876663	0					
ANR	876883	ArgumentList	pid		876663	1					
ANR	876884	Argument	pid		876663	0					
ANR	876885	Identifier	pid		876663	0					
ANR	876886	IfStatement	"if ( ! className . isEmpty ( ) && matchCommandLineFirst . contains ( ""::"" + className ) )"		876663	6					
ANR	876887	Condition	"! className . isEmpty ( ) && matchCommandLineFirst . contains ( ""::"" + className )"	503:12:17295:17364	876663	0	True				
ANR	876888	AndExpression	"! className . isEmpty ( ) && matchCommandLineFirst . contains ( ""::"" + className )"		876663	0		&&			
ANR	876889	UnaryOperationExpression	! className . isEmpty ( )		876663	0					
ANR	876890	UnaryOperator	!		876663	0					
ANR	876891	CallExpression	className . isEmpty ( )		876663	1					
ANR	876892	Callee	className . isEmpty		876663	0					
ANR	876893	MemberAccess	className . isEmpty		876663	0					
ANR	876894	Identifier	className		876663	0					
ANR	876895	Identifier	isEmpty		876663	1					
ANR	876896	ArgumentList			876663	1					
ANR	876897	CallExpression	"matchCommandLineFirst . contains ( ""::"" + className )"		876663	1					
ANR	876898	Callee	matchCommandLineFirst . contains		876663	0					
ANR	876899	MemberAccess	matchCommandLineFirst . contains		876663	0					
ANR	876900	Identifier	matchCommandLineFirst		876663	0					
ANR	876901	Identifier	contains		876663	1					
ANR	876902	ArgumentList	"""::"" + className"		876663	1					
ANR	876903	Argument	"""::"" + className"		876663	0					
ANR	876904	AdditiveExpression	"""::"" + className"		876663	0		+			
ANR	876905	PrimaryExpression	"""::"""		876663	0					
ANR	876906	Identifier	className		876663	1					
ANR	876907	CompoundStatement		39:84:1658:1658	876663	1					
ANR	876908	ExpressionStatement	triedPid = true	504:12:17381:17396	876663	0	True				
ANR	876909	AssignmentExpression	triedPid = true		876663	0		=			
ANR	876910	Identifier	triedPid		876663	0					
ANR	876911	Identifier	true		876663	1					
ANR	876912	ExpressionStatement	services = servicesFromPid ( pid )	505:12:17410:17441	876663	1	True				
ANR	876913	AssignmentExpression	services = servicesFromPid ( pid )		876663	0		=			
ANR	876914	Identifier	services		876663	0					
ANR	876915	CallExpression	servicesFromPid ( pid )		876663	1					
ANR	876916	Callee	servicesFromPid		876663	0					
ANR	876917	Identifier	servicesFromPid		876663	0					
ANR	876918	ArgumentList	pid		876663	1					
ANR	876919	Argument	pid		876663	0					
ANR	876920	Identifier	pid		876663	0					
ANR	876921	IdentifierDeclStatement	"QString mapped ( grp . readEntry ( classClass + ""::"" + className , QString ( ) ) ) ;"	509:8:17535:17606	876663	7	True				
ANR	876922	IdentifierDecl	"mapped ( grp . readEntry ( classClass + ""::"" + className , QString ( ) ) )"		876663	0					
ANR	876923	IdentifierDeclType	QString		876663	0					
ANR	876924	Identifier	mapped		876663	1					
ANR	876925	CallExpression	"grp . readEntry ( classClass + ""::"" + className , QString ( ) )"		876663	2					
ANR	876926	Callee	grp . readEntry		876663	0					
ANR	876927	MemberAccess	grp . readEntry		876663	0					
ANR	876928	Identifier	grp		876663	0					
ANR	876929	Identifier	readEntry		876663	1					
ANR	876930	ArgumentList	"classClass + ""::"" + className"		876663	1					
ANR	876931	Argument	"classClass + ""::"" + className"		876663	0					
ANR	876932	AdditiveExpression	"classClass + ""::"" + className"		876663	0		+			
ANR	876933	Identifier	classClass		876663	0					
ANR	876934	AdditiveExpression	"""::"" + className"		876663	1		+			
ANR	876935	PrimaryExpression	"""::"""		876663	0					
ANR	876936	Identifier	className		876663	1					
ANR	876937	Argument	QString ( )		876663	1					
ANR	876938	CallExpression	QString ( )		876663	0					
ANR	876939	Callee	QString		876663	0					
ANR	876940	Identifier	QString		876663	0					
ANR	876941	ArgumentList			876663	1					
ANR	876942	IfStatement	"if ( mapped . endsWith ( QLatin1String ( "".desktop"" ) ) )"		876663	8					
ANR	876943	Condition	"mapped . endsWith ( QLatin1String ( "".desktop"" ) )"	511:12:17621:17662	876663	0	True				
ANR	876944	CallExpression	"mapped . endsWith ( QLatin1String ( "".desktop"" ) )"		876663	0					
ANR	876945	Callee	mapped . endsWith		876663	0					
ANR	876946	MemberAccess	mapped . endsWith		876663	0					
ANR	876947	Identifier	mapped		876663	0					
ANR	876948	Identifier	endsWith		876663	1					
ANR	876949	ArgumentList	"QLatin1String ( "".desktop"" )"		876663	1					
ANR	876950	Argument	"QLatin1String ( "".desktop"" )"		876663	0					
ANR	876951	CallExpression	"QLatin1String ( "".desktop"" )"		876663	0					
ANR	876952	Callee	QLatin1String		876663	0					
ANR	876953	Identifier	QLatin1String		876663	0					
ANR	876954	ArgumentList	""".desktop"""		876663	1					
ANR	876955	Argument	""".desktop"""		876663	0					
ANR	876956	PrimaryExpression	""".desktop"""		876663	0					
ANR	876957	CompoundStatement		47:56:1956:1956	876663	1					
ANR	876958	ExpressionStatement	url = QUrl ( mapped )	512:12:17679:17697	876663	0	True				
ANR	876959	AssignmentExpression	url = QUrl ( mapped )		876663	0		=			
ANR	876960	Identifier	url		876663	0					
ANR	876961	CallExpression	QUrl ( mapped )		876663	1					
ANR	876962	Callee	QUrl		876663	0					
ANR	876963	Identifier	QUrl		876663	0					
ANR	876964	ArgumentList	mapped		876663	1					
ANR	876965	Argument	mapped		876663	0					
ANR	876966	Identifier	mapped		876663	0					
ANR	876967	ReturnStatement	return url ;	513:12:17711:17721	876663	1	True				
ANR	876968	Identifier	url		876663	0					
ANR	876969	IfStatement	if ( ! classClass . isEmpty ( ) )		876663	9					
ANR	876970	Condition	! classClass . isEmpty ( )	516:12:17746:17766	876663	0	True				
ANR	876971	UnaryOperationExpression	! classClass . isEmpty ( )		876663	0					
ANR	876972	UnaryOperator	!		876663	0					
ANR	876973	CallExpression	classClass . isEmpty ( )		876663	1					
ANR	876974	Callee	classClass . isEmpty		876663	0					
ANR	876975	MemberAccess	classClass . isEmpty		876663	0					
ANR	876976	Identifier	classClass		876663	0					
ANR	876977	Identifier	isEmpty		876663	1					
ANR	876978	ArgumentList			876663	1					
ANR	876979	CompoundStatement		70:12:2789:2865	876663	1					
ANR	876980	IfStatement	if ( mapped . isEmpty ( ) )		876663	0					
ANR	876981	Condition	mapped . isEmpty ( )	517:16:17787:17802	876663	0	True				
ANR	876982	CallExpression	mapped . isEmpty ( )		876663	0					
ANR	876983	Callee	mapped . isEmpty		876663	0					
ANR	876984	MemberAccess	mapped . isEmpty		876663	0					
ANR	876985	Identifier	mapped		876663	0					
ANR	876986	Identifier	isEmpty		876663	1					
ANR	876987	ArgumentList			876663	1					
ANR	876988	CompoundStatement		53:34:2096:2096	876663	1					
ANR	876989	ExpressionStatement	"mapped = grp . readEntry ( classClass , QString ( ) )"	518:16:17823:17868	876663	0	True				
ANR	876990	AssignmentExpression	"mapped = grp . readEntry ( classClass , QString ( ) )"		876663	0		=			
ANR	876991	Identifier	mapped		876663	0					
ANR	876992	CallExpression	"grp . readEntry ( classClass , QString ( ) )"		876663	1					
ANR	876993	Callee	grp . readEntry		876663	0					
ANR	876994	MemberAccess	grp . readEntry		876663	0					
ANR	876995	Identifier	grp		876663	0					
ANR	876996	Identifier	readEntry		876663	1					
ANR	876997	ArgumentList	classClass		876663	1					
ANR	876998	Argument	classClass		876663	0					
ANR	876999	Identifier	classClass		876663	0					
ANR	877000	Argument	QString ( )		876663	1					
ANR	877001	CallExpression	QString ( )		876663	0					
ANR	877002	Callee	QString		876663	0					
ANR	877003	Identifier	QString		876663	0					
ANR	877004	ArgumentList			876663	1					
ANR	877005	IfStatement	"if ( mapped . endsWith ( QLatin1String ( "".desktop"" ) ) )"		876663	1					
ANR	877006	Condition	"mapped . endsWith ( QLatin1String ( "".desktop"" ) )"	520:20:17891:17932	876663	0	True				
ANR	877007	CallExpression	"mapped . endsWith ( QLatin1String ( "".desktop"" ) )"		876663	0					
ANR	877008	Callee	mapped . endsWith		876663	0					
ANR	877009	MemberAccess	mapped . endsWith		876663	0					
ANR	877010	Identifier	mapped		876663	0					
ANR	877011	Identifier	endsWith		876663	1					
ANR	877012	ArgumentList	"QLatin1String ( "".desktop"" )"		876663	1					
ANR	877013	Argument	"QLatin1String ( "".desktop"" )"		876663	0					
ANR	877014	CallExpression	"QLatin1String ( "".desktop"" )"		876663	0					
ANR	877015	Callee	QLatin1String		876663	0					
ANR	877016	Identifier	QLatin1String		876663	0					
ANR	877017	ArgumentList	""".desktop"""		876663	1					
ANR	877018	Argument	""".desktop"""		876663	0					
ANR	877019	PrimaryExpression	""".desktop"""		876663	0					
ANR	877020	CompoundStatement		56:64:2226:2226	876663	1					
ANR	877021	ExpressionStatement	url = QUrl ( mapped )	521:20:17957:17975	876663	0	True				
ANR	877022	AssignmentExpression	url = QUrl ( mapped )		876663	0		=			
ANR	877023	Identifier	url		876663	0					
ANR	877024	CallExpression	QUrl ( mapped )		876663	1					
ANR	877025	Callee	QUrl		876663	0					
ANR	877026	Identifier	QUrl		876663	0					
ANR	877027	ArgumentList	mapped		876663	1					
ANR	877028	Argument	mapped		876663	0					
ANR	877029	Identifier	mapped		876663	0					
ANR	877030	ReturnStatement	return url ;	522:20:17997:18007	876663	1	True				
ANR	877031	Identifier	url		876663	0					
ANR	877032	IdentifierDeclStatement	"QStringList manualOnly = set . readEntry ( ""ManualOnly"" , QStringList ( ) ) ;"	528:12:18297:18364	876663	1	True				
ANR	877033	IdentifierDecl	"manualOnly = set . readEntry ( ""ManualOnly"" , QStringList ( ) )"		876663	0					
ANR	877034	IdentifierDeclType	QStringList		876663	0					
ANR	877035	Identifier	manualOnly		876663	1					
ANR	877036	AssignmentExpression	"manualOnly = set . readEntry ( ""ManualOnly"" , QStringList ( ) )"		876663	2		=			
ANR	877037	Identifier	manualOnly		876663	0					
ANR	877038	CallExpression	"set . readEntry ( ""ManualOnly"" , QStringList ( ) )"		876663	1					
ANR	877039	Callee	set . readEntry		876663	0					
ANR	877040	MemberAccess	set . readEntry		876663	0					
ANR	877041	Identifier	set		876663	0					
ANR	877042	Identifier	readEntry		876663	1					
ANR	877043	ArgumentList	"""ManualOnly"""		876663	1					
ANR	877044	Argument	"""ManualOnly"""		876663	0					
ANR	877045	PrimaryExpression	"""ManualOnly"""		876663	0					
ANR	877046	Argument	QStringList ( )		876663	1					
ANR	877047	CallExpression	QStringList ( )		876663	0					
ANR	877048	Callee	QStringList		876663	0					
ANR	877049	Identifier	QStringList		876663	0					
ANR	877050	ArgumentList			876663	1					
ANR	877051	IfStatement	if ( ! classClass . isEmpty ( ) && manualOnly . contains ( classClass ) )		876663	2					
ANR	877052	Condition	! classClass . isEmpty ( ) && manualOnly . contains ( classClass )	530:16:18383:18438	876663	0	True				
ANR	877053	AndExpression	! classClass . isEmpty ( ) && manualOnly . contains ( classClass )		876663	0		&&			
ANR	877054	UnaryOperationExpression	! classClass . isEmpty ( )		876663	0					
ANR	877055	UnaryOperator	!		876663	0					
ANR	877056	CallExpression	classClass . isEmpty ( )		876663	1					
ANR	877057	Callee	classClass . isEmpty		876663	0					
ANR	877058	MemberAccess	classClass . isEmpty		876663	0					
ANR	877059	Identifier	classClass		876663	0					
ANR	877060	Identifier	isEmpty		876663	1					
ANR	877061	ArgumentList			876663	1					
ANR	877062	CallExpression	manualOnly . contains ( classClass )		876663	1					
ANR	877063	Callee	manualOnly . contains		876663	0					
ANR	877064	MemberAccess	manualOnly . contains		876663	0					
ANR	877065	Identifier	manualOnly		876663	0					
ANR	877066	Identifier	contains		876663	1					
ANR	877067	ArgumentList	classClass		876663	1					
ANR	877068	Argument	classClass		876663	0					
ANR	877069	Identifier	classClass		876663	0					
ANR	877070	CompoundStatement		66:74:2732:2732	876663	1					
ANR	877071	ReturnStatement	return url ;	531:16:18459:18469	876663	0	True				
ANR	877072	Identifier	url		876663	0					
ANR	877073	IdentifierDeclStatement	"KConfigGroup rewriteRulesGroup ( rulesConfig , QStringLiteral ( ""Rewrite Rules"" ) ) ;"	534:12:18498:18574	876663	3	True				
ANR	877074	IdentifierDecl	"rewriteRulesGroup ( rulesConfig , QStringLiteral ( ""Rewrite Rules"" ) )"		876663	0					
ANR	877075	IdentifierDeclType	KConfigGroup		876663	0					
ANR	877076	Identifier	rewriteRulesGroup		876663	1					
ANR	877077	Expression	"rulesConfig , QStringLiteral ( ""Rewrite Rules"" )"		876663	2					
ANR	877078	Identifier	rulesConfig		876663	0					
ANR	877079	CallExpression	"QStringLiteral ( ""Rewrite Rules"" )"		876663	1					
ANR	877080	Callee	QStringLiteral		876663	0					
ANR	877081	Identifier	QStringLiteral		876663	0					
ANR	877082	ArgumentList	"""Rewrite Rules"""		876663	1					
ANR	877083	Argument	"""Rewrite Rules"""		876663	0					
ANR	877084	PrimaryExpression	"""Rewrite Rules"""		876663	0					
ANR	877085	IfStatement	if ( rewriteRulesGroup . hasGroup ( classClass ) )		876663	4					
ANR	877086	Condition	rewriteRulesGroup . hasGroup ( classClass )	535:16:18592:18629	876663	0	True				
ANR	877087	CallExpression	rewriteRulesGroup . hasGroup ( classClass )		876663	0					
ANR	877088	Callee	rewriteRulesGroup . hasGroup		876663	0					
ANR	877089	MemberAccess	rewriteRulesGroup . hasGroup		876663	0					
ANR	877090	Identifier	rewriteRulesGroup		876663	0					
ANR	877091	Identifier	hasGroup		876663	1					
ANR	877092	ArgumentList	classClass		876663	1					
ANR	877093	Argument	classClass		876663	0					
ANR	877094	Identifier	classClass		876663	0					
ANR	877095	CompoundStatement		74:16:3017:3068	876663	1					
ANR	877096	IdentifierDeclStatement	"KConfigGroup rewriteGroup ( & rewriteRulesGroup , classClass ) ;"	536:16:18650:18707	876663	0	True				
ANR	877097	IdentifierDecl	"rewriteGroup ( & rewriteRulesGroup , classClass )"		876663	0					
ANR	877098	IdentifierDeclType	KConfigGroup		876663	0					
ANR	877099	Identifier	rewriteGroup		876663	1					
ANR	877100	Expression	"& rewriteRulesGroup , classClass"		876663	2					
ANR	877101	UnaryOperationExpression	& rewriteRulesGroup		876663	0					
ANR	877102	UnaryOperator	&		876663	0					
ANR	877103	Identifier	rewriteRulesGroup		876663	1					
ANR	877104	Identifier	classClass		876663	1					
ANR	877105	IdentifierDeclStatement	const QStringList & rules = rewriteGroup . groupList ( ) ;	538:16:18726:18777	876663	1	True				
ANR	877106	IdentifierDecl	& rules = rewriteGroup . groupList ( )		876663	0					
ANR	877107	IdentifierDeclType	const QStringList &		876663	0					
ANR	877108	Identifier	rules		876663	1					
ANR	877109	AssignmentExpression	& rules = rewriteGroup . groupList ( )		876663	2		=			
ANR	877110	Identifier	rules		876663	0					
ANR	877111	CallExpression	rewriteGroup . groupList ( )		876663	1					
ANR	877112	Callee	rewriteGroup . groupList		876663	0					
ANR	877113	MemberAccess	rewriteGroup . groupList		876663	0					
ANR	877114	Identifier	rewriteGroup		876663	0					
ANR	877115	Identifier	groupList		876663	1					
ANR	877116	ArgumentList			876663	1					
ANR	877117	Statement	for	539:16:18795:18797	876663	2	True				
ANR	877118	Statement	(	539:20:18799:18799	876663	3	True				
ANR	877119	Statement	const	539:21:18800:18804	876663	4	True				
ANR	877120	Statement	QString	539:27:18806:18812	876663	5	True				
ANR	877121	Statement	&	539:35:18814:18814	876663	6	True				
ANR	877122	Label	rule :	539:36:18815:18820	876663	7	True				
ANR	877123	Identifier	rule		876663	0					
ANR	877124	Statement	rules	539:43:18822:18826	876663	8	True				
ANR	877125	Statement	)	539:48:18827:18827	876663	9	True				
ANR	877126	CompoundStatement		96:20:3989:4060	876663	10					
ANR	877127	IdentifierDeclStatement	"KConfigGroup ruleGroup ( & rewriteGroup , rule ) ;"	540:20:18851:18894	876663	0	True				
ANR	877128	IdentifierDecl	"ruleGroup ( & rewriteGroup , rule )"		876663	0					
ANR	877129	IdentifierDeclType	KConfigGroup		876663	0					
ANR	877130	Identifier	ruleGroup		876663	1					
ANR	877131	Expression	"& rewriteGroup , rule"		876663	2					
ANR	877132	UnaryOperationExpression	& rewriteGroup		876663	0					
ANR	877133	UnaryOperator	&		876663	0					
ANR	877134	Identifier	rewriteGroup		876663	1					
ANR	877135	Identifier	rule		876663	1					
ANR	877136	IdentifierDeclStatement	"const QString propertyConfig = ruleGroup . readEntry ( QStringLiteral ( ""Property"" ) , QString ( ) ) ;"	542:20:18917:19006	876663	1	True				
ANR	877137	IdentifierDecl	"propertyConfig = ruleGroup . readEntry ( QStringLiteral ( ""Property"" ) , QString ( ) )"		876663	0					
ANR	877138	IdentifierDeclType	const QString		876663	0					
ANR	877139	Identifier	propertyConfig		876663	1					
ANR	877140	AssignmentExpression	"propertyConfig = ruleGroup . readEntry ( QStringLiteral ( ""Property"" ) , QString ( ) )"		876663	2		=			
ANR	877141	Identifier	propertyConfig		876663	0					
ANR	877142	CallExpression	"ruleGroup . readEntry ( QStringLiteral ( ""Property"" ) , QString ( ) )"		876663	1					
ANR	877143	Callee	ruleGroup . readEntry		876663	0					
ANR	877144	MemberAccess	ruleGroup . readEntry		876663	0					
ANR	877145	Identifier	ruleGroup		876663	0					
ANR	877146	Identifier	readEntry		876663	1					
ANR	877147	ArgumentList	"QStringLiteral ( ""Property"" )"		876663	1					
ANR	877148	Argument	"QStringLiteral ( ""Property"" )"		876663	0					
ANR	877149	CallExpression	"QStringLiteral ( ""Property"" )"		876663	0					
ANR	877150	Callee	QStringLiteral		876663	0					
ANR	877151	Identifier	QStringLiteral		876663	0					
ANR	877152	ArgumentList	"""Property"""		876663	1					
ANR	877153	Argument	"""Property"""		876663	0					
ANR	877154	PrimaryExpression	"""Property"""		876663	0					
ANR	877155	Argument	QString ( )		876663	1					
ANR	877156	CallExpression	QString ( )		876663	0					
ANR	877157	Callee	QString		876663	0					
ANR	877158	Identifier	QString		876663	0					
ANR	877159	ArgumentList			876663	1					
ANR	877160	IdentifierDeclStatement	QString matchProperty ;	544:20:19029:19050	876663	2	True				
ANR	877161	IdentifierDecl	matchProperty		876663	0					
ANR	877162	IdentifierDeclType	QString		876663	0					
ANR	877163	Identifier	matchProperty		876663	1					
ANR	877164	IfStatement	"if ( propertyConfig == QLatin1String ( ""ClassClass"" ) )"		876663	3					
ANR	877165	Condition	"propertyConfig == QLatin1String ( ""ClassClass"" )"	545:24:19076:19120	876663	0	True				
ANR	877166	EqualityExpression	"propertyConfig == QLatin1String ( ""ClassClass"" )"		876663	0		==			
ANR	877167	Identifier	propertyConfig		876663	0					
ANR	877168	CallExpression	"QLatin1String ( ""ClassClass"" )"		876663	1					
ANR	877169	Callee	QLatin1String		876663	0					
ANR	877170	Identifier	QLatin1String		876663	0					
ANR	877171	ArgumentList	"""ClassClass"""		876663	1					
ANR	877172	Argument	"""ClassClass"""		876663	0					
ANR	877173	PrimaryExpression	"""ClassClass"""		876663	0					
ANR	877174	CompoundStatement		81:71:3414:3414	876663	1					
ANR	877175	ExpressionStatement	matchProperty = classClass	546:24:19149:19175	876663	0	True				
ANR	877176	AssignmentExpression	matchProperty = classClass		876663	0		=			
ANR	877177	Identifier	matchProperty		876663	0					
ANR	877178	Identifier	classClass		876663	1					
ANR	877179	ElseStatement	else		876663	0					
ANR	877180	IfStatement	"if ( propertyConfig == QLatin1String ( ""ClassName"" ) )"		876663	0					
ANR	877181	Condition	"propertyConfig == QLatin1String ( ""ClassName"" )"	547:31:19208:19251	876663	0	True				
ANR	877182	EqualityExpression	"propertyConfig == QLatin1String ( ""ClassName"" )"		876663	0		==			
ANR	877183	Identifier	propertyConfig		876663	0					
ANR	877184	CallExpression	"QLatin1String ( ""ClassName"" )"		876663	1					
ANR	877185	Callee	QLatin1String		876663	0					
ANR	877186	Identifier	QLatin1String		876663	0					
ANR	877187	ArgumentList	"""ClassName"""		876663	1					
ANR	877188	Argument	"""ClassName"""		876663	0					
ANR	877189	PrimaryExpression	"""ClassName"""		876663	0					
ANR	877190	CompoundStatement		83:77:3545:3545	876663	1					
ANR	877191	ExpressionStatement	matchProperty = className	548:24:19280:19305	876663	0	True				
ANR	877192	AssignmentExpression	matchProperty = className		876663	0		=			
ANR	877193	Identifier	matchProperty		876663	0					
ANR	877194	Identifier	className		876663	1					
ANR	877195	IfStatement	if ( matchProperty . isEmpty ( ) )		876663	4					
ANR	877196	Condition	matchProperty . isEmpty ( )	551:24:19354:19376	876663	0	True				
ANR	877197	CallExpression	matchProperty . isEmpty ( )		876663	0					
ANR	877198	Callee	matchProperty . isEmpty		876663	0					
ANR	877199	MemberAccess	matchProperty . isEmpty		876663	0					
ANR	877200	Identifier	matchProperty		876663	0					
ANR	877201	Identifier	isEmpty		876663	1					
ANR	877202	ArgumentList			876663	1					
ANR	877203	CompoundStatement		87:49:3670:3670	876663	1					
ANR	877204	ContinueStatement	continue ;	552:24:19405:19413	876663	0	True				
ANR	877205	IdentifierDeclStatement	"const QString serviceSearchIdentifier = ruleGroup . readEntry ( QStringLiteral ( ""Identifier"" ) , QString ( ) ) ;"	555:20:19458:19558	876663	5	True				
ANR	877206	IdentifierDecl	"serviceSearchIdentifier = ruleGroup . readEntry ( QStringLiteral ( ""Identifier"" ) , QString ( ) )"		876663	0					
ANR	877207	IdentifierDeclType	const QString		876663	0					
ANR	877208	Identifier	serviceSearchIdentifier		876663	1					
ANR	877209	AssignmentExpression	"serviceSearchIdentifier = ruleGroup . readEntry ( QStringLiteral ( ""Identifier"" ) , QString ( ) )"		876663	2		=			
ANR	877210	Identifier	serviceSearchIdentifier		876663	0					
ANR	877211	CallExpression	"ruleGroup . readEntry ( QStringLiteral ( ""Identifier"" ) , QString ( ) )"		876663	1					
ANR	877212	Callee	ruleGroup . readEntry		876663	0					
ANR	877213	MemberAccess	ruleGroup . readEntry		876663	0					
ANR	877214	Identifier	ruleGroup		876663	0					
ANR	877215	Identifier	readEntry		876663	1					
ANR	877216	ArgumentList	"QStringLiteral ( ""Identifier"" )"		876663	1					
ANR	877217	Argument	"QStringLiteral ( ""Identifier"" )"		876663	0					
ANR	877218	CallExpression	"QStringLiteral ( ""Identifier"" )"		876663	0					
ANR	877219	Callee	QStringLiteral		876663	0					
ANR	877220	Identifier	QStringLiteral		876663	0					
ANR	877221	ArgumentList	"""Identifier"""		876663	1					
ANR	877222	Argument	"""Identifier"""		876663	0					
ANR	877223	PrimaryExpression	"""Identifier"""		876663	0					
ANR	877224	Argument	QString ( )		876663	1					
ANR	877225	CallExpression	QString ( )		876663	0					
ANR	877226	Callee	QString		876663	0					
ANR	877227	Identifier	QString		876663	0					
ANR	877228	ArgumentList			876663	1					
ANR	877229	IfStatement	if ( serviceSearchIdentifier . isEmpty ( ) )		876663	6					
ANR	877230	Condition	serviceSearchIdentifier . isEmpty ( )	556:24:19584:19616	876663	0	True				
ANR	877231	CallExpression	serviceSearchIdentifier . isEmpty ( )		876663	0					
ANR	877232	Callee	serviceSearchIdentifier . isEmpty		876663	0					
ANR	877233	MemberAccess	serviceSearchIdentifier . isEmpty		876663	0					
ANR	877234	Identifier	serviceSearchIdentifier		876663	0					
ANR	877235	Identifier	isEmpty		876663	1					
ANR	877236	ArgumentList			876663	1					
ANR	877237	CompoundStatement		92:59:3910:3910	876663	1					
ANR	877238	ContinueStatement	continue ;	557:24:19645:19653	876663	0	True				
ANR	877239	IdentifierDeclStatement	"QRegularExpression regExp ( ruleGroup . readEntry ( QStringLiteral ( ""Match"" ) ) ) ;"	560:20:19698:19769	876663	7	True				
ANR	877240	IdentifierDecl	"regExp ( ruleGroup . readEntry ( QStringLiteral ( ""Match"" ) ) )"		876663	0					
ANR	877241	IdentifierDeclType	QRegularExpression		876663	0					
ANR	877242	Identifier	regExp		876663	1					
ANR	877243	CallExpression	"ruleGroup . readEntry ( QStringLiteral ( ""Match"" ) )"		876663	2					
ANR	877244	Callee	ruleGroup . readEntry		876663	0					
ANR	877245	MemberAccess	ruleGroup . readEntry		876663	0					
ANR	877246	Identifier	ruleGroup		876663	0					
ANR	877247	Identifier	readEntry		876663	1					
ANR	877248	ArgumentList	"QStringLiteral ( ""Match"" )"		876663	1					
ANR	877249	Argument	"QStringLiteral ( ""Match"" )"		876663	0					
ANR	877250	CallExpression	"QStringLiteral ( ""Match"" )"		876663	0					
ANR	877251	Callee	QStringLiteral		876663	0					
ANR	877252	Identifier	QStringLiteral		876663	0					
ANR	877253	ArgumentList	"""Match"""		876663	1					
ANR	877254	Argument	"""Match"""		876663	0					
ANR	877255	PrimaryExpression	"""Match"""		876663	0					
ANR	877256	Statement	const	561:20:19791:19795	876663	8	True				
ANR	877257	Statement	auto	561:26:19797:19800	876663	9	True				
ANR	877258	ExpressionStatement	match = regExp . match ( matchProperty )	561:31:19802:19837	876663	10	True				
ANR	877259	AssignmentExpression	match = regExp . match ( matchProperty )		876663	0		=			
ANR	877260	Identifier	match		876663	0					
ANR	877261	CallExpression	regExp . match ( matchProperty )		876663	1					
ANR	877262	Callee	regExp . match		876663	0					
ANR	877263	MemberAccess	regExp . match		876663	0					
ANR	877264	Identifier	regExp		876663	0					
ANR	877265	Identifier	match		876663	1					
ANR	877266	ArgumentList	matchProperty		876663	1					
ANR	877267	Argument	matchProperty		876663	0					
ANR	877268	Identifier	matchProperty		876663	0					
ANR	877269	IfStatement	if ( match . hasMatch ( ) )		876663	11					
ANR	877270	Condition	match . hasMatch ( )	563:24:19864:19879	876663	0	True				
ANR	877271	CallExpression	match . hasMatch ( )		876663	0					
ANR	877272	Callee	match . hasMatch		876663	0					
ANR	877273	MemberAccess	match . hasMatch		876663	0					
ANR	877274	Identifier	match		876663	0					
ANR	877275	Identifier	hasMatch		876663	1					
ANR	877276	ArgumentList			876663	1					
ANR	877277	CompoundStatement		105:24:4410:4504	876663	1					
ANR	877278	IdentifierDeclStatement	"const QString actualMatch = match . captured ( QStringLiteral ( ""match"" ) ) ;"	564:24:19908:19975	876663	0	True				
ANR	877279	IdentifierDecl	"actualMatch = match . captured ( QStringLiteral ( ""match"" ) )"		876663	0					
ANR	877280	IdentifierDeclType	const QString		876663	0					
ANR	877281	Identifier	actualMatch		876663	1					
ANR	877282	AssignmentExpression	"actualMatch = match . captured ( QStringLiteral ( ""match"" ) )"		876663	2		=			
ANR	877283	Identifier	actualMatch		876663	0					
ANR	877284	CallExpression	"match . captured ( QStringLiteral ( ""match"" ) )"		876663	1					
ANR	877285	Callee	match . captured		876663	0					
ANR	877286	MemberAccess	match . captured		876663	0					
ANR	877287	Identifier	match		876663	0					
ANR	877288	Identifier	captured		876663	1					
ANR	877289	ArgumentList	"QStringLiteral ( ""match"" )"		876663	1					
ANR	877290	Argument	"QStringLiteral ( ""match"" )"		876663	0					
ANR	877291	CallExpression	"QStringLiteral ( ""match"" )"		876663	0					
ANR	877292	Callee	QStringLiteral		876663	0					
ANR	877293	Identifier	QStringLiteral		876663	0					
ANR	877294	ArgumentList	"""match"""		876663	1					
ANR	877295	Argument	"""match"""		876663	0					
ANR	877296	PrimaryExpression	"""match"""		876663	0					
ANR	877297	IfStatement	if ( actualMatch . isEmpty ( ) )		876663	1					
ANR	877298	Condition	actualMatch . isEmpty ( )	565:28:20005:20025	876663	0	True				
ANR	877299	CallExpression	actualMatch . isEmpty ( )		876663	0					
ANR	877300	Callee	actualMatch . isEmpty		876663	0					
ANR	877301	MemberAccess	actualMatch . isEmpty		876663	0					
ANR	877302	Identifier	actualMatch		876663	0					
ANR	877303	Identifier	isEmpty		876663	1					
ANR	877304	ArgumentList			876663	1					
ANR	877305	CompoundStatement		101:51:4319:4319	876663	1					
ANR	877306	ContinueStatement	continue ;	566:28:20058:20066	876663	0	True				
ANR	877307	IdentifierDeclStatement	"const QString rewrittenString = ruleGroup . readEntry ( QStringLiteral ( ""Target"" ) ) . arg ( actualMatch ) ;"	569:24:20119:20213	876663	2	True				
ANR	877308	IdentifierDecl	"rewrittenString = ruleGroup . readEntry ( QStringLiteral ( ""Target"" ) ) . arg ( actualMatch )"		876663	0					
ANR	877309	IdentifierDeclType	const QString		876663	0					
ANR	877310	Identifier	rewrittenString		876663	1					
ANR	877311	AssignmentExpression	"rewrittenString = ruleGroup . readEntry ( QStringLiteral ( ""Target"" ) ) . arg ( actualMatch )"		876663	2		=			
ANR	877312	Identifier	rewrittenString		876663	0					
ANR	877313	CallExpression	"ruleGroup . readEntry ( QStringLiteral ( ""Target"" ) ) . arg ( actualMatch )"		876663	1					
ANR	877314	Callee	"ruleGroup . readEntry ( QStringLiteral ( ""Target"" ) ) . arg"		876663	0					
ANR	877315	MemberAccess	"ruleGroup . readEntry ( QStringLiteral ( ""Target"" ) ) . arg"		876663	0					
ANR	877316	CallExpression	"ruleGroup . readEntry ( QStringLiteral ( ""Target"" ) )"		876663	0					
ANR	877317	Callee	ruleGroup . readEntry		876663	0					
ANR	877318	MemberAccess	ruleGroup . readEntry		876663	0					
ANR	877319	Identifier	ruleGroup		876663	0					
ANR	877320	Identifier	readEntry		876663	1					
ANR	877321	ArgumentList	"QStringLiteral ( ""Target"" )"		876663	1					
ANR	877322	Argument	"QStringLiteral ( ""Target"" )"		876663	0					
ANR	877323	CallExpression	"QStringLiteral ( ""Target"" )"		876663	0					
ANR	877324	Callee	QStringLiteral		876663	0					
ANR	877325	Identifier	QStringLiteral		876663	0					
ANR	877326	ArgumentList	"""Target"""		876663	1					
ANR	877327	Argument	"""Target"""		876663	0					
ANR	877328	PrimaryExpression	"""Target"""		876663	0					
ANR	877329	Identifier	arg		876663	1					
ANR	877330	ArgumentList	actualMatch		876663	1					
ANR	877331	Argument	actualMatch		876663	0					
ANR	877332	Identifier	actualMatch		876663	0					
ANR	877333	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ %2)"" ) . arg ( rewrittenString , serviceSearchIdentifier ) )"	571:24:20240:20408	876663	3	True				
ANR	877334	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ %2)"" ) . arg ( rewrittenString , serviceSearchIdentifier ) )"		876663	0		=			
ANR	877335	Identifier	services		876663	0					
ANR	877336	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ %2)"" ) . arg ( rewrittenString , serviceSearchIdentifier ) )"		876663	1					
ANR	877337	Callee	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877338	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877339	CallExpression	KServiceTypeTrader :: self ( )		876663	0					
ANR	877340	Callee	KServiceTypeTrader :: self		876663	0					
ANR	877341	Identifier	KServiceTypeTrader :: self		876663	0					
ANR	877342	ArgumentList			876663	1					
ANR	877343	Identifier	query		876663	1					
ANR	877344	ArgumentList	"QStringLiteral ( ""Application"" )"		876663	1					
ANR	877345	Argument	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877346	CallExpression	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877347	Callee	QStringLiteral		876663	0					
ANR	877348	Identifier	QStringLiteral		876663	0					
ANR	877349	ArgumentList	"""Application"""		876663	1					
ANR	877350	Argument	"""Application"""		876663	0					
ANR	877351	PrimaryExpression	"""Application"""		876663	0					
ANR	877352	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ %2)"" ) . arg ( rewrittenString , serviceSearchIdentifier )"		876663	1					
ANR	877353	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ %2)"" ) . arg ( rewrittenString , serviceSearchIdentifier )"		876663	0					
ANR	877354	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ %2)"" ) . arg"		876663	0					
ANR	877355	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ %2)"" ) . arg"		876663	0					
ANR	877356	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ %2)"" )"		876663	0					
ANR	877357	Callee	QStringLiteral		876663	0					
ANR	877358	Identifier	QStringLiteral		876663	0					
ANR	877359	ArgumentList	"""exist Exec and ('%1' =~ %2)"""		876663	1					
ANR	877360	Argument	"""exist Exec and ('%1' =~ %2)"""		876663	0					
ANR	877361	PrimaryExpression	"""exist Exec and ('%1' =~ %2)"""		876663	0					
ANR	877362	Identifier	arg		876663	1					
ANR	877363	ArgumentList	rewrittenString		876663	1					
ANR	877364	Argument	rewrittenString		876663	0					
ANR	877365	Identifier	rewrittenString		876663	0					
ANR	877366	Argument	serviceSearchIdentifier		876663	1					
ANR	877367	Identifier	serviceSearchIdentifier		876663	0					
ANR	877368	IfStatement	if ( ! services . isEmpty ( ) )		876663	4					
ANR	877369	Condition	! services . isEmpty ( )	573:28:20439:20457	876663	0	True				
ANR	877370	UnaryOperationExpression	! services . isEmpty ( )		876663	0					
ANR	877371	UnaryOperator	!		876663	0					
ANR	877372	CallExpression	services . isEmpty ( )		876663	1					
ANR	877373	Callee	services . isEmpty		876663	0					
ANR	877374	MemberAccess	services . isEmpty		876663	0					
ANR	877375	Identifier	services		876663	0					
ANR	877376	Identifier	isEmpty		876663	1					
ANR	877377	ArgumentList			876663	1					
ANR	877378	CompoundStatement		109:49:4751:4751	876663	1					
ANR	877379	BreakStatement	break ;	574:28:20490:20495	876663	0	True				
ANR	877380	IfStatement	if ( ! mapped . isEmpty ( ) && services . empty ( ) )		876663	5					
ANR	877381	Condition	! mapped . isEmpty ( ) && services . empty ( )	580:16:20594:20630	876663	0	True				
ANR	877382	AndExpression	! mapped . isEmpty ( ) && services . empty ( )		876663	0		&&			
ANR	877383	UnaryOperationExpression	! mapped . isEmpty ( )		876663	0					
ANR	877384	UnaryOperator	!		876663	0					
ANR	877385	CallExpression	mapped . isEmpty ( )		876663	1					
ANR	877386	Callee	mapped . isEmpty		876663	0					
ANR	877387	MemberAccess	mapped . isEmpty		876663	0					
ANR	877388	Identifier	mapped		876663	0					
ANR	877389	Identifier	isEmpty		876663	1					
ANR	877390	ArgumentList			876663	1					
ANR	877391	CallExpression	services . empty ( )		876663	1					
ANR	877392	Callee	services . empty		876663	0					
ANR	877393	MemberAccess	services . empty		876663	0					
ANR	877394	Identifier	services		876663	0					
ANR	877395	Identifier	empty		876663	1					
ANR	877396	ArgumentList			876663	1					
ANR	877397	CompoundStatement		116:55:4924:4924	876663	1					
ANR	877398	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( mapped ) )"	581:16:20651:20799	876663	0	True				
ANR	877399	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( mapped ) )"		876663	0		=			
ANR	877400	Identifier	services		876663	0					
ANR	877401	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( mapped ) )"		876663	1					
ANR	877402	Callee	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877403	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877404	CallExpression	KServiceTypeTrader :: self ( )		876663	0					
ANR	877405	Callee	KServiceTypeTrader :: self		876663	0					
ANR	877406	Identifier	KServiceTypeTrader :: self		876663	0					
ANR	877407	ArgumentList			876663	1					
ANR	877408	Identifier	query		876663	1					
ANR	877409	ArgumentList	"QStringLiteral ( ""Application"" )"		876663	1					
ANR	877410	Argument	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877411	CallExpression	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877412	Callee	QStringLiteral		876663	0					
ANR	877413	Identifier	QStringLiteral		876663	0					
ANR	877414	ArgumentList	"""Application"""		876663	1					
ANR	877415	Argument	"""Application"""		876663	0					
ANR	877416	PrimaryExpression	"""Application"""		876663	0					
ANR	877417	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( mapped )"		876663	1					
ANR	877418	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( mapped )"		876663	0					
ANR	877419	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg"		876663	0					
ANR	877420	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg"		876663	0					
ANR	877421	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" )"		876663	0					
ANR	877422	Callee	QStringLiteral		876663	0					
ANR	877423	Identifier	QStringLiteral		876663	0					
ANR	877424	ArgumentList	"""exist Exec and ('%1' =~ DesktopEntryName)"""		876663	1					
ANR	877425	Argument	"""exist Exec and ('%1' =~ DesktopEntryName)"""		876663	0					
ANR	877426	PrimaryExpression	"""exist Exec and ('%1' =~ DesktopEntryName)"""		876663	0					
ANR	877427	Identifier	arg		876663	1					
ANR	877428	ArgumentList	mapped		876663	1					
ANR	877429	Argument	mapped		876663	0					
ANR	877430	Identifier	mapped		876663	0					
ANR	877431	IfStatement	if ( ! mapped . isEmpty ( ) && services . empty ( ) )		876663	6					
ANR	877432	Condition	! mapped . isEmpty ( ) && services . empty ( )	584:16:20832:20868	876663	0	True				
ANR	877433	AndExpression	! mapped . isEmpty ( ) && services . empty ( )		876663	0		&&			
ANR	877434	UnaryOperationExpression	! mapped . isEmpty ( )		876663	0					
ANR	877435	UnaryOperator	!		876663	0					
ANR	877436	CallExpression	mapped . isEmpty ( )		876663	1					
ANR	877437	Callee	mapped . isEmpty		876663	0					
ANR	877438	MemberAccess	mapped . isEmpty		876663	0					
ANR	877439	Identifier	mapped		876663	0					
ANR	877440	Identifier	isEmpty		876663	1					
ANR	877441	ArgumentList			876663	1					
ANR	877442	CallExpression	services . empty ( )		876663	1					
ANR	877443	Callee	services . empty		876663	0					
ANR	877444	MemberAccess	services . empty		876663	0					
ANR	877445	Identifier	services		876663	0					
ANR	877446	Identifier	empty		876663	1					
ANR	877447	ArgumentList			876663	1					
ANR	877448	CompoundStatement		120:55:5162:5162	876663	1					
ANR	877449	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( mapped ) )"	585:16:20889:21068	876663	0	True				
ANR	877450	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( mapped ) )"		876663	0		=			
ANR	877451	Identifier	services		876663	0					
ANR	877452	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( mapped ) )"		876663	1					
ANR	877453	Callee	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877454	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877455	CallExpression	KServiceTypeTrader :: self ( )		876663	0					
ANR	877456	Callee	KServiceTypeTrader :: self		876663	0					
ANR	877457	Identifier	KServiceTypeTrader :: self		876663	0					
ANR	877458	ArgumentList			876663	1					
ANR	877459	Identifier	query		876663	1					
ANR	877460	ArgumentList	"QStringLiteral ( ""Application"" )"		876663	1					
ANR	877461	Argument	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877462	CallExpression	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877463	Callee	QStringLiteral		876663	0					
ANR	877464	Identifier	QStringLiteral		876663	0					
ANR	877465	ArgumentList	"""Application"""		876663	1					
ANR	877466	Argument	"""Application"""		876663	0					
ANR	877467	PrimaryExpression	"""Application"""		876663	0					
ANR	877468	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( mapped )"		876663	1					
ANR	877469	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( mapped )"		876663	0					
ANR	877470	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg"		876663	0					
ANR	877471	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg"		876663	0					
ANR	877472	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" )"		876663	0					
ANR	877473	Callee	QStringLiteral		876663	0					
ANR	877474	Identifier	QStringLiteral		876663	0					
ANR	877475	ArgumentList	"""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"""		876663	1					
ANR	877476	Argument	"""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"""		876663	0					
ANR	877477	PrimaryExpression	"""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"""		876663	0					
ANR	877478	Identifier	arg		876663	1					
ANR	877479	ArgumentList	mapped		876663	1					
ANR	877480	Argument	mapped		876663	0					
ANR	877481	Identifier	mapped		876663	0					
ANR	877482	IfStatement	if ( services . empty ( ) )		876663	7					
ANR	877483	Condition	services . empty ( )	589:16:21205:21220	876663	0	True				
ANR	877484	CallExpression	services . empty ( )		876663	0					
ANR	877485	Callee	services . empty		876663	0					
ANR	877486	MemberAccess	services . empty		876663	0					
ANR	877487	Identifier	services		876663	0					
ANR	877488	Identifier	empty		876663	1					
ANR	877489	ArgumentList			876663	1					
ANR	877490	CompoundStatement		125:34:5514:5514	876663	1					
ANR	877491	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( classClass ) )"	590:16:21241:21393	876663	0	True				
ANR	877492	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( classClass ) )"		876663	0		=			
ANR	877493	Identifier	services		876663	0					
ANR	877494	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( classClass ) )"		876663	1					
ANR	877495	Callee	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877496	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877497	CallExpression	KServiceTypeTrader :: self ( )		876663	0					
ANR	877498	Callee	KServiceTypeTrader :: self		876663	0					
ANR	877499	Identifier	KServiceTypeTrader :: self		876663	0					
ANR	877500	ArgumentList			876663	1					
ANR	877501	Identifier	query		876663	1					
ANR	877502	ArgumentList	"QStringLiteral ( ""Application"" )"		876663	1					
ANR	877503	Argument	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877504	CallExpression	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877505	Callee	QStringLiteral		876663	0					
ANR	877506	Identifier	QStringLiteral		876663	0					
ANR	877507	ArgumentList	"""Application"""		876663	1					
ANR	877508	Argument	"""Application"""		876663	0					
ANR	877509	PrimaryExpression	"""Application"""		876663	0					
ANR	877510	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( classClass )"		876663	1					
ANR	877511	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg ( classClass )"		876663	0					
ANR	877512	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg"		876663	0					
ANR	877513	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg"		876663	0					
ANR	877514	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" )"		876663	0					
ANR	877515	Callee	QStringLiteral		876663	0					
ANR	877516	Identifier	QStringLiteral		876663	0					
ANR	877517	ArgumentList	"""exist Exec and ('%1' =~ DesktopEntryName)"""		876663	1					
ANR	877518	Argument	"""exist Exec and ('%1' =~ DesktopEntryName)"""		876663	0					
ANR	877519	PrimaryExpression	"""exist Exec and ('%1' =~ DesktopEntryName)"""		876663	0					
ANR	877520	Identifier	arg		876663	1					
ANR	877521	ArgumentList	classClass		876663	1					
ANR	877522	Argument	classClass		876663	0					
ANR	877523	Identifier	classClass		876663	0					
ANR	877524	IfStatement	if ( services . empty ( ) )		876663	8					
ANR	877525	Condition	services . empty ( )	594:16:21461:21476	876663	0	True				
ANR	877526	CallExpression	services . empty ( )		876663	0					
ANR	877527	Callee	services . empty		876663	0					
ANR	877528	MemberAccess	services . empty		876663	0					
ANR	877529	Identifier	services		876663	0					
ANR	877530	Identifier	empty		876663	1					
ANR	877531	ArgumentList			876663	1					
ANR	877532	CompoundStatement		130:34:5770:5770	876663	1					
ANR	877533	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ StartupWMClass)"" ) . arg ( classClass ) )"	595:16:21497:21647	876663	0	True				
ANR	877534	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ StartupWMClass)"" ) . arg ( classClass ) )"		876663	0		=			
ANR	877535	Identifier	services		876663	0					
ANR	877536	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ StartupWMClass)"" ) . arg ( classClass ) )"		876663	1					
ANR	877537	Callee	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877538	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877539	CallExpression	KServiceTypeTrader :: self ( )		876663	0					
ANR	877540	Callee	KServiceTypeTrader :: self		876663	0					
ANR	877541	Identifier	KServiceTypeTrader :: self		876663	0					
ANR	877542	ArgumentList			876663	1					
ANR	877543	Identifier	query		876663	1					
ANR	877544	ArgumentList	"QStringLiteral ( ""Application"" )"		876663	1					
ANR	877545	Argument	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877546	CallExpression	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877547	Callee	QStringLiteral		876663	0					
ANR	877548	Identifier	QStringLiteral		876663	0					
ANR	877549	ArgumentList	"""Application"""		876663	1					
ANR	877550	Argument	"""Application"""		876663	0					
ANR	877551	PrimaryExpression	"""Application"""		876663	0					
ANR	877552	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ StartupWMClass)"" ) . arg ( classClass )"		876663	1					
ANR	877553	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ StartupWMClass)"" ) . arg ( classClass )"		876663	0					
ANR	877554	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ StartupWMClass)"" ) . arg"		876663	0					
ANR	877555	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ StartupWMClass)"" ) . arg"		876663	0					
ANR	877556	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ StartupWMClass)"" )"		876663	0					
ANR	877557	Callee	QStringLiteral		876663	0					
ANR	877558	Identifier	QStringLiteral		876663	0					
ANR	877559	ArgumentList	"""exist Exec and ('%1' =~ StartupWMClass)"""		876663	1					
ANR	877560	Argument	"""exist Exec and ('%1' =~ StartupWMClass)"""		876663	0					
ANR	877561	PrimaryExpression	"""exist Exec and ('%1' =~ StartupWMClass)"""		876663	0					
ANR	877562	Identifier	arg		876663	1					
ANR	877563	ArgumentList	classClass		876663	1					
ANR	877564	Argument	classClass		876663	0					
ANR	877565	Identifier	classClass		876663	0					
ANR	877566	IfStatement	if ( services . empty ( ) )		876663	9					
ANR	877567	Condition	services . empty ( )	599:16:21844:21859	876663	0	True				
ANR	877568	CallExpression	services . empty ( )		876663	0					
ANR	877569	Callee	services . empty		876663	0					
ANR	877570	MemberAccess	services . empty		876663	0					
ANR	877571	Identifier	services		876663	0					
ANR	877572	Identifier	empty		876663	1					
ANR	877573	ArgumentList			876663	1					
ANR	877574	CompoundStatement		135:34:6153:6153	876663	1					
ANR	877575	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( classClass ) )"	600:16:21880:22063	876663	0	True				
ANR	877576	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( classClass ) )"		876663	0		=			
ANR	877577	Identifier	services		876663	0					
ANR	877578	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( classClass ) )"		876663	1					
ANR	877579	Callee	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877580	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877581	CallExpression	KServiceTypeTrader :: self ( )		876663	0					
ANR	877582	Callee	KServiceTypeTrader :: self		876663	0					
ANR	877583	Identifier	KServiceTypeTrader :: self		876663	0					
ANR	877584	ArgumentList			876663	1					
ANR	877585	Identifier	query		876663	1					
ANR	877586	ArgumentList	"QStringLiteral ( ""Application"" )"		876663	1					
ANR	877587	Argument	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877588	CallExpression	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877589	Callee	QStringLiteral		876663	0					
ANR	877590	Identifier	QStringLiteral		876663	0					
ANR	877591	ArgumentList	"""Application"""		876663	1					
ANR	877592	Argument	"""Application"""		876663	0					
ANR	877593	PrimaryExpression	"""Application"""		876663	0					
ANR	877594	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( classClass )"		876663	1					
ANR	877595	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg ( classClass )"		876663	0					
ANR	877596	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg"		876663	0					
ANR	877597	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg"		876663	0					
ANR	877598	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" )"		876663	0					
ANR	877599	Callee	QStringLiteral		876663	0					
ANR	877600	Identifier	QStringLiteral		876663	0					
ANR	877601	ArgumentList	"""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"""		876663	1					
ANR	877602	Argument	"""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"""		876663	0					
ANR	877603	PrimaryExpression	"""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"""		876663	0					
ANR	877604	Identifier	arg		876663	1					
ANR	877605	ArgumentList	classClass		876663	1					
ANR	877606	Argument	classClass		876663	0					
ANR	877607	Identifier	classClass		876663	0					
ANR	877608	IfStatement	if ( services . empty ( ) && ! triedPid )		876663	10					
ANR	877609	Condition	services . empty ( ) && ! triedPid	605:12:22212:22240	876663	0	True				
ANR	877610	AndExpression	services . empty ( ) && ! triedPid		876663	0		&&			
ANR	877611	CallExpression	services . empty ( )		876663	0					
ANR	877612	Callee	services . empty		876663	0					
ANR	877613	MemberAccess	services . empty		876663	0					
ANR	877614	Identifier	services		876663	0					
ANR	877615	Identifier	empty		876663	1					
ANR	877616	ArgumentList			876663	1					
ANR	877617	UnaryOperationExpression	! triedPid		876663	1					
ANR	877618	UnaryOperator	!		876663	0					
ANR	877619	Identifier	triedPid		876663	1					
ANR	877620	CompoundStatement		141:43:6534:6534	876663	1					
ANR	877621	ExpressionStatement	services = servicesFromPid ( pid )	606:12:22257:22288	876663	0	True				
ANR	877622	AssignmentExpression	services = servicesFromPid ( pid )		876663	0		=			
ANR	877623	Identifier	services		876663	0					
ANR	877624	CallExpression	servicesFromPid ( pid )		876663	1					
ANR	877625	Callee	servicesFromPid		876663	0					
ANR	877626	Identifier	servicesFromPid		876663	0					
ANR	877627	ArgumentList	pid		876663	1					
ANR	877628	Argument	pid		876663	0					
ANR	877629	Identifier	pid		876663	0					
ANR	877630	IfStatement	if ( services . empty ( ) || services . at ( 0 ) -> desktopEntryName ( ) . isEmpty ( ) )		876663	7					
ANR	877631	Condition	services . empty ( ) || services . at ( 0 ) -> desktopEntryName ( ) . isEmpty ( )	623:8:23116:23179	876663	0	True				
ANR	877632	OrExpression	services . empty ( ) || services . at ( 0 ) -> desktopEntryName ( ) . isEmpty ( )		876663	0		||			
ANR	877633	CallExpression	services . empty ( )		876663	0					
ANR	877634	Callee	services . empty		876663	0					
ANR	877635	MemberAccess	services . empty		876663	0					
ANR	877636	Identifier	services		876663	0					
ANR	877637	Identifier	empty		876663	1					
ANR	877638	ArgumentList			876663	1					
ANR	877639	CallExpression	services . at ( 0 ) -> desktopEntryName ( ) . isEmpty ( )		876663	1					
ANR	877640	Callee	services . at ( 0 ) -> desktopEntryName ( ) . isEmpty		876663	0					
ANR	877641	MemberAccess	services . at ( 0 ) -> desktopEntryName ( ) . isEmpty		876663	0					
ANR	877642	CallExpression	services . at ( 0 ) -> desktopEntryName ( )		876663	0					
ANR	877643	Callee	services . at ( 0 ) -> desktopEntryName		876663	0					
ANR	877644	PtrMemberAccess	services . at ( 0 ) -> desktopEntryName		876663	0					
ANR	877645	CallExpression	services . at ( 0 )		876663	0					
ANR	877646	Callee	services . at		876663	0					
ANR	877647	MemberAccess	services . at		876663	0					
ANR	877648	Identifier	services		876663	0					
ANR	877649	Identifier	at		876663	1					
ANR	877650	ArgumentList	0		876663	1					
ANR	877651	Argument	0		876663	0					
ANR	877652	PrimaryExpression	0		876663	0					
ANR	877653	Identifier	desktopEntryName		876663	1					
ANR	877654	ArgumentList			876663	1					
ANR	877655	Identifier	isEmpty		876663	1					
ANR	877656	ArgumentList			876663	1					
ANR	877657	CompoundStatement		162:8:7670:7726	876663	1					
ANR	877658	Statement	auto	624:8:23192:23195	876663	0	True				
ANR	877659	ExpressionStatement	"matchingServices = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' ~~ DesktopEntryName)"" ) . arg ( classClass ) )"	624:13:23197:23369	876663	1	True				
ANR	877660	AssignmentExpression	"matchingServices = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' ~~ DesktopEntryName)"" ) . arg ( classClass ) )"		876663	0		=			
ANR	877661	Identifier	matchingServices		876663	0					
ANR	877662	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' ~~ DesktopEntryName)"" ) . arg ( classClass ) )"		876663	1					
ANR	877663	Callee	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877664	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		876663	0					
ANR	877665	CallExpression	KServiceTypeTrader :: self ( )		876663	0					
ANR	877666	Callee	KServiceTypeTrader :: self		876663	0					
ANR	877667	Identifier	KServiceTypeTrader :: self		876663	0					
ANR	877668	ArgumentList			876663	1					
ANR	877669	Identifier	query		876663	1					
ANR	877670	ArgumentList	"QStringLiteral ( ""Application"" )"		876663	1					
ANR	877671	Argument	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877672	CallExpression	"QStringLiteral ( ""Application"" )"		876663	0					
ANR	877673	Callee	QStringLiteral		876663	0					
ANR	877674	Identifier	QStringLiteral		876663	0					
ANR	877675	ArgumentList	"""Application"""		876663	1					
ANR	877676	Argument	"""Application"""		876663	0					
ANR	877677	PrimaryExpression	"""Application"""		876663	0					
ANR	877678	Argument	"QStringLiteral ( ""exist Exec and ('%1' ~~ DesktopEntryName)"" ) . arg ( classClass )"		876663	1					
ANR	877679	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' ~~ DesktopEntryName)"" ) . arg ( classClass )"		876663	0					
ANR	877680	Callee	"QStringLiteral ( ""exist Exec and ('%1' ~~ DesktopEntryName)"" ) . arg"		876663	0					
ANR	877681	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' ~~ DesktopEntryName)"" ) . arg"		876663	0					
ANR	877682	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' ~~ DesktopEntryName)"" )"		876663	0					
ANR	877683	Callee	QStringLiteral		876663	0					
ANR	877684	Identifier	QStringLiteral		876663	0					
ANR	877685	ArgumentList	"""exist Exec and ('%1' ~~ DesktopEntryName)"""		876663	1					
ANR	877686	Argument	"""exist Exec and ('%1' ~~ DesktopEntryName)"""		876663	0					
ANR	877687	PrimaryExpression	"""exist Exec and ('%1' ~~ DesktopEntryName)"""		876663	0					
ANR	877688	Identifier	arg		876663	1					
ANR	877689	ArgumentList	classClass		876663	1					
ANR	877690	Argument	classClass		876663	0					
ANR	877691	Identifier	classClass		876663	0					
ANR	877692	IdentifierDeclStatement	QMutableListIterator < KService :: Ptr > it ( matchingServices ) ;	626:8:23379:23435	876663	2	True				
ANR	877693	IdentifierDecl	it ( matchingServices )		876663	0					
ANR	877694	IdentifierDeclType	QMutableListIterator < KService :: Ptr >		876663	0					
ANR	877695	Identifier	it		876663	1					
ANR	877696	Identifier	matchingServices		876663	2					
ANR	877697	WhileStatement	while ( it . hasNext ( ) )		876663	3					
ANR	877698	Condition	it . hasNext ( )	627:15:23452:23463	876663	0	True				
ANR	877699	CallExpression	it . hasNext ( )		876663	0					
ANR	877700	Callee	it . hasNext		876663	0					
ANR	877701	MemberAccess	it . hasNext		876663	0					
ANR	877702	Identifier	it		876663	0					
ANR	877703	Identifier	hasNext		876663	1					
ANR	877704	ArgumentList			876663	1					
ANR	877705	CompoundStatement		163:29:7757:7757	876663	1					
ANR	877706	Statement	auto	628:12:23480:23483	876663	0	True				
ANR	877707	ExpressionStatement	service = it . next ( )	628:17:23485:23504	876663	1	True				
ANR	877708	AssignmentExpression	service = it . next ( )		876663	0		=			
ANR	877709	Identifier	service		876663	0					
ANR	877710	CallExpression	it . next ( )		876663	1					
ANR	877711	Callee	it . next		876663	0					
ANR	877712	MemberAccess	it . next		876663	0					
ANR	877713	Identifier	it		876663	0					
ANR	877714	Identifier	next		876663	1					
ANR	877715	ArgumentList			876663	1					
ANR	877716	IfStatement	"if ( ! service -> desktopEntryName ( ) . endsWith ( ""."" + classClass ) )"		876663	2					
ANR	877717	Condition	"! service -> desktopEntryName ( ) . endsWith ( ""."" + classClass )"	629:16:23522:23576	876663	0	True				
ANR	877718	UnaryOperationExpression	"! service -> desktopEntryName ( ) . endsWith ( ""."" + classClass )"		876663	0					
ANR	877719	UnaryOperator	!		876663	0					
ANR	877720	CallExpression	"service -> desktopEntryName ( ) . endsWith ( ""."" + classClass )"		876663	1					
ANR	877721	Callee	service -> desktopEntryName ( ) . endsWith		876663	0					
ANR	877722	MemberAccess	service -> desktopEntryName ( ) . endsWith		876663	0					
ANR	877723	CallExpression	service -> desktopEntryName ( )		876663	0					
ANR	877724	Callee	service -> desktopEntryName		876663	0					
ANR	877725	PtrMemberAccess	service -> desktopEntryName		876663	0					
ANR	877726	Identifier	service		876663	0					
ANR	877727	Identifier	desktopEntryName		876663	1					
ANR	877728	ArgumentList			876663	1					
ANR	877729	Identifier	endsWith		876663	1					
ANR	877730	ArgumentList	"""."" + classClass"		876663	1					
ANR	877731	Argument	"""."" + classClass"		876663	0					
ANR	877732	AdditiveExpression	"""."" + classClass"		876663	0		+			
ANR	877733	PrimaryExpression	"""."""		876663	0					
ANR	877734	Identifier	classClass		876663	1					
ANR	877735	CompoundStatement		165:73:7870:7870	876663	1					
ANR	877736	ExpressionStatement	it . remove ( )	630:16:23597:23608	876663	0	True				
ANR	877737	CallExpression	it . remove ( )		876663	0					
ANR	877738	Callee	it . remove		876663	0					
ANR	877739	MemberAccess	it . remove		876663	0					
ANR	877740	Identifier	it		876663	0					
ANR	877741	Identifier	remove		876663	1					
ANR	877742	ArgumentList			876663	1					
ANR	877743	IfStatement	if ( matchingServices . length ( ) == 1 )		876663	4					
ANR	877744	Condition	matchingServices . length ( ) == 1	637:12:23955:23984	876663	0	True				
ANR	877745	EqualityExpression	matchingServices . length ( ) == 1		876663	0		==			
ANR	877746	CallExpression	matchingServices . length ( )		876663	0					
ANR	877747	Callee	matchingServices . length		876663	0					
ANR	877748	MemberAccess	matchingServices . length		876663	0					
ANR	877749	Identifier	matchingServices		876663	0					
ANR	877750	Identifier	length		876663	1					
ANR	877751	ArgumentList			876663	1					
ANR	877752	PrimaryExpression	1		876663	1					
ANR	877753	CompoundStatement		173:44:8278:8278	876663	1					
ANR	877754	ExpressionStatement	services = matchingServices	638:12:24001:24028	876663	0	True				
ANR	877755	AssignmentExpression	services = matchingServices		876663	0		=			
ANR	877756	Identifier	services		876663	0					
ANR	877757	Identifier	matchingServices		876663	1					
ANR	877758	IfStatement	if ( ! services . empty ( ) )		876663	8					
ANR	877759	Condition	! services . empty ( )	642:8:24055:24071	876663	0	True				
ANR	877760	UnaryOperationExpression	! services . empty ( )		876663	0					
ANR	877761	UnaryOperator	!		876663	0					
ANR	877762	CallExpression	services . empty ( )		876663	1					
ANR	877763	Callee	services . empty		876663	0					
ANR	877764	MemberAccess	services . empty		876663	0					
ANR	877765	Identifier	services		876663	0					
ANR	877766	Identifier	empty		876663	1					
ANR	877767	ArgumentList			876663	1					
ANR	877768	CompoundStatement		179:8:8375:8414	876663	1					
ANR	877769	IdentifierDeclStatement	QString path = services [ 0 ] -> entryPath ( ) ;	643:8:24084:24123	876663	0	True				
ANR	877770	IdentifierDecl	path = services [ 0 ] -> entryPath ( )		876663	0					
ANR	877771	IdentifierDeclType	QString		876663	0					
ANR	877772	Identifier	path		876663	1					
ANR	877773	AssignmentExpression	path = services [ 0 ] -> entryPath ( )		876663	2		=			
ANR	877774	Identifier	path		876663	0					
ANR	877775	CallExpression	services [ 0 ] -> entryPath ( )		876663	1					
ANR	877776	Callee	services [ 0 ] -> entryPath		876663	0					
ANR	877777	PtrMemberAccess	services [ 0 ] -> entryPath		876663	0					
ANR	877778	ArrayIndexing	services [ 0 ]		876663	0					
ANR	877779	Identifier	services		876663	0					
ANR	877780	PrimaryExpression	0		876663	1					
ANR	877781	Identifier	entryPath		876663	1					
ANR	877782	ArgumentList			876663	1					
ANR	877783	IfStatement	if ( path . isEmpty ( ) )		876663	1					
ANR	877784	Condition	path . isEmpty ( )	644:12:24137:24150	876663	0	True				
ANR	877785	CallExpression	path . isEmpty ( )		876663	0					
ANR	877786	Callee	path . isEmpty		876663	0					
ANR	877787	MemberAccess	path . isEmpty		876663	0					
ANR	877788	Identifier	path		876663	0					
ANR	877789	Identifier	isEmpty		876663	1					
ANR	877790	ArgumentList			876663	1					
ANR	877791	CompoundStatement		180:28:8444:8444	876663	1					
ANR	877792	ExpressionStatement	path = services [ 0 ] -> exec ( )	645:12:24167:24193	876663	0	True				
ANR	877793	AssignmentExpression	path = services [ 0 ] -> exec ( )		876663	0		=			
ANR	877794	Identifier	path		876663	0					
ANR	877795	CallExpression	services [ 0 ] -> exec ( )		876663	1					
ANR	877796	Callee	services [ 0 ] -> exec		876663	0					
ANR	877797	PtrMemberAccess	services [ 0 ] -> exec		876663	0					
ANR	877798	ArrayIndexing	services [ 0 ]		876663	0					
ANR	877799	Identifier	services		876663	0					
ANR	877800	PrimaryExpression	0		876663	1					
ANR	877801	Identifier	exec		876663	1					
ANR	877802	ArgumentList			876663	1					
ANR	877803	IfStatement	if ( ! path . isEmpty ( ) )		876663	2					
ANR	877804	Condition	! path . isEmpty ( )	648:12:24218:24232	876663	0	True				
ANR	877805	UnaryOperationExpression	! path . isEmpty ( )		876663	0					
ANR	877806	UnaryOperator	!		876663	0					
ANR	877807	CallExpression	path . isEmpty ( )		876663	1					
ANR	877808	Callee	path . isEmpty		876663	0					
ANR	877809	MemberAccess	path . isEmpty		876663	0					
ANR	877810	Identifier	path		876663	0					
ANR	877811	Identifier	isEmpty		876663	1					
ANR	877812	ArgumentList			876663	1					
ANR	877813	CompoundStatement		184:29:8526:8526	876663	1					
ANR	877814	ExpressionStatement	url = QUrl :: fromLocalFile ( path )	649:12:24249:24280	876663	0	True				
ANR	877815	AssignmentExpression	url = QUrl :: fromLocalFile ( path )		876663	0		=			
ANR	877816	Identifier	url		876663	0					
ANR	877817	CallExpression	QUrl :: fromLocalFile ( path )		876663	1					
ANR	877818	Callee	QUrl :: fromLocalFile		876663	0					
ANR	877819	Identifier	QUrl :: fromLocalFile		876663	0					
ANR	877820	ArgumentList	path		876663	1					
ANR	877821	Argument	path		876663	0					
ANR	877822	Identifier	path		876663	0					
ANR	877823	ReturnStatement	return url ;	653:4:24303:24313	876663	9	True				
ANR	877824	Identifier	url		876663	0					
ANR	877825	ReturnType	QUrl		876663	1					
ANR	877826	Identifier	XWindowTasksModel :: Private :: windowUrl		876663	2					
ANR	877827	ParameterList	WId window		876663	3					
ANR	877828	Parameter	WId window	464:43:15696:15705	876663	0	True				
ANR	877829	ParameterType	WId		876663	0					
ANR	877830	Identifier	window		876663	1					
ANR	877831	CFGEntryNode	ENTRY		876663		True				
ANR	877832	CFGExitNode	EXIT		876663		True				
ANR	877833	CFGErrorNode	ERROR		876663		True				
ANR	877834	Symbol	serviceSearchIdentifier		876663						
ANR	877835	Symbol	QUrl :: fromLocalFile		876663						
ANR	877836	Symbol	pid		876663						
ANR	877837	Symbol	rules		876663						
ANR	877838	Symbol	"QStringLiteral ( ""exist Exec and ('%1' ~~ DesktopEntryName)"" ) . arg"		876663						
ANR	877839	Symbol	QX11Info :: appRootWindow		876663						
ANR	877840	Symbol	propertyConfig		876663						
ANR	877841	Symbol	path		876663						
ANR	877842	Symbol	* KServiceTypeTrader :: self		876663						
ANR	877843	Symbol	services [ 0 ] -> exec		876663						
ANR	877844	Symbol	rewriteRulesGroup		876663						
ANR	877845	Symbol	matchCommandLineFirst		876663						
ANR	877846	Symbol	ruleGroup		876663						
ANR	877847	Symbol	classClass . isEmpty		876663						
ANR	877848	Symbol	NET :: WMPid		876663						
ANR	877849	Symbol	matchCommandLineFirst . contains		876663						
ANR	877850	Symbol	* services . at		876663						
ANR	877851	Symbol	* service		876663						
ANR	877852	Symbol	info		876663						
ANR	877853	Symbol	manualOnly . contains		876663						
ANR	877854	Symbol	regExp . match		876663						
ANR	877855	Symbol	url . isEmpty		876663						
ANR	877856	Symbol	services . at ( 0 ) -> desktopEntryName ( ) . isEmpty		876663						
ANR	877857	Symbol	it . hasNext		876663						
ANR	877858	Symbol	service -> desktopEntryName		876663						
ANR	877859	Symbol	it		876663						
ANR	877860	Symbol	matchProperty		876663						
ANR	877861	Symbol	regExp		876663						
ANR	877862	Symbol	servicesFromPid		876663						
ANR	877863	Symbol	QLatin1String		876663						
ANR	877864	Symbol	"QStringLiteral ( ""exist Exec and ('%1' =~ DesktopEntryName)"" ) . arg"		876663						
ANR	877865	Symbol	services . at ( 0 ) -> desktopEntryName		876663						
ANR	877866	Symbol	true		876663						
ANR	877867	Symbol	mapped		876663						
ANR	877868	Symbol	QStringLiteral		876663						
ANR	877869	Symbol	actualMatch		876663						
ANR	877870	Symbol	NETWinInfo		876663						
ANR	877871	Symbol	services . empty		876663						
ANR	877872	Symbol	"NETWinInfo ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMPid , 0 ) . pid"		876663						
ANR	877873	Symbol	match . captured		876663						
ANR	877874	Symbol	* * services		876663						
ANR	877875	Symbol	windowInfo		876663						
ANR	877876	Symbol	classClass		876663						
ANR	877877	Symbol	grp . readEntry		876663						
ANR	877878	Symbol	KServiceTypeTrader :: self		876663						
ANR	877879	Symbol	serviceUrl		876663						
ANR	877880	Symbol	className		876663						
ANR	877881	Symbol	matchingServices . length		876663						
ANR	877882	Symbol	rewriteGroup		876663						
ANR	877883	Symbol	set . readEntry		876663						
ANR	877884	Symbol	className . isEmpty		876663						
ANR	877885	Symbol	QString		876663						
ANR	877886	Symbol	services . at		876663						
ANR	877887	Symbol	services [ 0 ] -> entryPath		876663						
ANR	877888	Symbol	triedPid		876663						
ANR	877889	Symbol	manualOnly		876663						
ANR	877890	Symbol	ruleGroup . readEntry		876663						
ANR	877891	Symbol	info -> windowClassName		876663						
ANR	877892	Symbol	rewriteGroup . groupList		876663						
ANR	877893	Symbol	* services		876663						
ANR	877894	Symbol	"QStringLiteral ( ""exist Exec and ('%1' =~ StartupWMClass)"" ) . arg"		876663						
ANR	877895	Symbol	rewriteRulesGroup . hasGroup		876663						
ANR	877896	Symbol	set		876663						
ANR	877897	Symbol	grp		876663						
ANR	877898	Symbol	QX11Info :: connection		876663						
ANR	877899	Symbol	QStringList		876663						
ANR	877900	Symbol	false		876663						
ANR	877901	Symbol	match		876663						
ANR	877902	Symbol	actualMatch . isEmpty		876663						
ANR	877903	Symbol	services . isEmpty		876663						
ANR	877904	Symbol	services		876663						
ANR	877905	Symbol	it . next		876663						
ANR	877906	Symbol	info -> windowClassClass		876663						
ANR	877907	Symbol	url		876663						
ANR	877908	Symbol	"ruleGroup . readEntry ( QStringLiteral ( ""Target"" ) ) . arg"		876663						
ANR	877909	Symbol	mapped . endsWith		876663						
ANR	877910	Symbol	"QStringLiteral ( ""exist Exec and ('%1' =~ %2)"" ) . arg"		876663						
ANR	877911	Symbol	matchProperty . isEmpty		876663						
ANR	877912	Symbol	match . hasMatch		876663						
ANR	877913	Symbol	matchingServices		876663						
ANR	877914	Symbol	mapped . isEmpty		876663						
ANR	877915	Symbol	"QStringLiteral ( ""exist Exec and ('%1' =~ Name) and (not exist NoDisplay or not NoDisplay)"" ) . arg"		876663						
ANR	877916	Symbol	serviceSearchIdentifier . isEmpty		876663						
ANR	877917	Symbol	service		876663						
ANR	877918	Symbol	service -> desktopEntryName ( ) . endsWith		876663						
ANR	877919	Symbol	path . isEmpty		876663						
ANR	877920	Symbol	KServiceTypeTrader :: self ( ) -> query		876663						
ANR	877921	Symbol	QUrl		876663						
ANR	877922	Symbol	window		876663						
ANR	877923	Symbol	* info		876663						
ANR	877924	Symbol	rewrittenString		876663						
ANR	877925	Function	XWindowTasksModel :: Private :: launcherUrl	656:0:24318:25159							
ANR	877926	FunctionDef	"XWindowTasksModel :: Private :: launcherUrl (WId window , bool encodeFallbackIcon)"		877925	0					
ANR	877927	CompoundStatement		657:0:24400:25159	877925	0					
ANR	877928	IdentifierDeclStatement	const AppData & data = appData ( window ) ;	658:4:24406:24443	877925	0	True				
ANR	877929	IdentifierDecl	& data = appData ( window )		877925	0					
ANR	877930	IdentifierDeclType	const AppData &		877925	0					
ANR	877931	Identifier	data		877925	1					
ANR	877932	AssignmentExpression	& data = appData ( window )		877925	2		=			
ANR	877933	Identifier	data		877925	0					
ANR	877934	CallExpression	appData ( window )		877925	1					
ANR	877935	Callee	appData		877925	0					
ANR	877936	Identifier	appData		877925	0					
ANR	877937	ArgumentList	window		877925	1					
ANR	877938	Argument	window		877925	0					
ANR	877939	Identifier	window		877925	0					
ANR	877940	IfStatement	if ( ! encodeFallbackIcon || ! data . icon . name ( ) . isEmpty ( ) )		877925	1					
ANR	877941	Condition	! encodeFallbackIcon || ! data . icon . name ( ) . isEmpty ( )	660:8:24454:24503	877925	0	True				
ANR	877942	OrExpression	! encodeFallbackIcon || ! data . icon . name ( ) . isEmpty ( )		877925	0		||			
ANR	877943	UnaryOperationExpression	! encodeFallbackIcon		877925	0					
ANR	877944	UnaryOperator	!		877925	0					
ANR	877945	Identifier	encodeFallbackIcon		877925	1					
ANR	877946	UnaryOperationExpression	! data . icon . name ( ) . isEmpty ( )		877925	1					
ANR	877947	UnaryOperator	!		877925	0					
ANR	877948	CallExpression	data . icon . name ( ) . isEmpty ( )		877925	1					
ANR	877949	Callee	data . icon . name ( ) . isEmpty		877925	0					
ANR	877950	MemberAccess	data . icon . name ( ) . isEmpty		877925	0					
ANR	877951	CallExpression	data . icon . name ( )		877925	0					
ANR	877952	Callee	data . icon . name		877925	0					
ANR	877953	MemberAccess	data . icon . name		877925	0					
ANR	877954	MemberAccess	data . icon		877925	0					
ANR	877955	Identifier	data		877925	0					
ANR	877956	Identifier	icon		877925	1					
ANR	877957	Identifier	name		877925	1					
ANR	877958	ArgumentList			877925	1					
ANR	877959	Identifier	isEmpty		877925	1					
ANR	877960	ArgumentList			877925	1					
ANR	877961	CompoundStatement		4:60:105:105	877925	1					
ANR	877962	ReturnStatement	return data . url ;	661:8:24516:24531	877925	0	True				
ANR	877963	MemberAccess	data . url		877925	0					
ANR	877964	Identifier	data		877925	0					
ANR	877965	Identifier	url		877925	1					
ANR	877966	IdentifierDeclStatement	QUrl url = data . url ;	664:4:24544:24563	877925	2	True				
ANR	877967	IdentifierDecl	url = data . url		877925	0					
ANR	877968	IdentifierDeclType	QUrl		877925	0					
ANR	877969	Identifier	url		877925	1					
ANR	877970	AssignmentExpression	url = data . url		877925	2		=			
ANR	877971	Identifier	url		877925	0					
ANR	877972	MemberAccess	data . url		877925	1					
ANR	877973	Identifier	data		877925	0					
ANR	877974	Identifier	url		877925	1					
ANR	877975	IfStatement	if ( ! url . isValid ( ) )		877925	3					
ANR	877976	Condition	! url . isValid ( )	667:8:24649:24662	877925	0	True				
ANR	877977	UnaryOperationExpression	! url . isValid ( )		877925	0					
ANR	877978	UnaryOperator	!		877925	0					
ANR	877979	CallExpression	url . isValid ( )		877925	1					
ANR	877980	Callee	url . isValid		877925	0					
ANR	877981	MemberAccess	url . isValid		877925	0					
ANR	877982	Identifier	url		877925	0					
ANR	877983	Identifier	isValid		877925	1					
ANR	877984	ArgumentList			877925	1					
ANR	877985	CompoundStatement		11:24:264:264	877925	1					
ANR	877986	ReturnStatement	return QUrl ( ) ;	668:8:24675:24688	877925	0	True				
ANR	877987	CallExpression	QUrl ( )		877925	0					
ANR	877988	Callee	QUrl		877925	0					
ANR	877989	Identifier	QUrl		877925	0					
ANR	877990	ArgumentList			877925	1					
ANR	877991	IdentifierDeclStatement	"const QPixmap pixmap = KWindowSystem :: icon ( window , KIconLoader :: SizeLarge , KIconLoader :: SizeLarge , false ) ;"	671:4:24701:24806	877925	4	True				
ANR	877992	IdentifierDecl	"pixmap = KWindowSystem :: icon ( window , KIconLoader :: SizeLarge , KIconLoader :: SizeLarge , false )"		877925	0					
ANR	877993	IdentifierDeclType	const QPixmap		877925	0					
ANR	877994	Identifier	pixmap		877925	1					
ANR	877995	AssignmentExpression	"pixmap = KWindowSystem :: icon ( window , KIconLoader :: SizeLarge , KIconLoader :: SizeLarge , false )"		877925	2		=			
ANR	877996	Identifier	pixmap		877925	0					
ANR	877997	CallExpression	"KWindowSystem :: icon ( window , KIconLoader :: SizeLarge , KIconLoader :: SizeLarge , false )"		877925	1					
ANR	877998	Callee	KWindowSystem :: icon		877925	0					
ANR	877999	Identifier	KWindowSystem :: icon		877925	0					
ANR	878000	ArgumentList	window		877925	1					
ANR	878001	Argument	window		877925	0					
ANR	878002	Identifier	window		877925	0					
ANR	878003	Argument	KIconLoader :: SizeLarge		877925	1					
ANR	878004	Identifier	KIconLoader :: SizeLarge		877925	0					
ANR	878005	Argument	KIconLoader :: SizeLarge		877925	2					
ANR	878006	Identifier	KIconLoader :: SizeLarge		877925	0					
ANR	878007	Argument	false		877925	3					
ANR	878008	Identifier	false		877925	0					
ANR	878009	IfStatement	if ( pixmap . isNull ( ) )		877925	5					
ANR	878010	Condition	pixmap . isNull ( )	672:8:24816:24830	877925	0	True				
ANR	878011	CallExpression	pixmap . isNull ( )		877925	0					
ANR	878012	Callee	pixmap . isNull		877925	0					
ANR	878013	MemberAccess	pixmap . isNull		877925	0					
ANR	878014	Identifier	pixmap		877925	0					
ANR	878015	Identifier	isNull		877925	1					
ANR	878016	ArgumentList			877925	1					
ANR	878017	CompoundStatement		16:25:432:432	877925	1					
ANR	878018	ReturnStatement	return data . url ;	673:8:24843:24858	877925	0	True				
ANR	878019	MemberAccess	data . url		877925	0					
ANR	878020	Identifier	data		877925	0					
ANR	878021	Identifier	url		877925	1					
ANR	878022	IdentifierDeclStatement	QUrlQuery uQuery ( url ) ;	675:4:24870:24891	877925	6	True				
ANR	878023	IdentifierDecl	uQuery ( url )		877925	0					
ANR	878024	IdentifierDeclType	QUrlQuery		877925	0					
ANR	878025	Identifier	uQuery		877925	1					
ANR	878026	Identifier	url		877925	2					
ANR	878027	IdentifierDeclStatement	QByteArray bytes ;	676:4:24897:24913	877925	7	True				
ANR	878028	IdentifierDecl	bytes		877925	0					
ANR	878029	IdentifierDeclType	QByteArray		877925	0					
ANR	878030	Identifier	bytes		877925	1					
ANR	878031	IdentifierDeclStatement	QBuffer buffer ( & bytes ) ;	677:4:24919:24941	877925	8	True				
ANR	878032	IdentifierDecl	buffer ( & bytes )		877925	0					
ANR	878033	IdentifierDeclType	QBuffer		877925	0					
ANR	878034	Identifier	buffer		877925	1					
ANR	878035	UnaryOperationExpression	& bytes		877925	2					
ANR	878036	UnaryOperator	&		877925	0					
ANR	878037	Identifier	bytes		877925	1					
ANR	878038	ExpressionStatement	buffer . open ( QIODevice :: WriteOnly )	678:4:24947:24980	877925	9	True				
ANR	878039	CallExpression	buffer . open ( QIODevice :: WriteOnly )		877925	0					
ANR	878040	Callee	buffer . open		877925	0					
ANR	878041	MemberAccess	buffer . open		877925	0					
ANR	878042	Identifier	buffer		877925	0					
ANR	878043	Identifier	open		877925	1					
ANR	878044	ArgumentList	QIODevice :: WriteOnly		877925	1					
ANR	878045	Argument	QIODevice :: WriteOnly		877925	0					
ANR	878046	Identifier	QIODevice :: WriteOnly		877925	0					
ANR	878047	ExpressionStatement	"pixmap . save ( & buffer , ""PNG"" )"	679:4:24986:25013	877925	10	True				
ANR	878048	CallExpression	"pixmap . save ( & buffer , ""PNG"" )"		877925	0					
ANR	878049	Callee	pixmap . save		877925	0					
ANR	878050	MemberAccess	pixmap . save		877925	0					
ANR	878051	Identifier	pixmap		877925	0					
ANR	878052	Identifier	save		877925	1					
ANR	878053	ArgumentList	& buffer		877925	1					
ANR	878054	Argument	& buffer		877925	0					
ANR	878055	UnaryOperationExpression	& buffer		877925	0					
ANR	878056	UnaryOperator	&		877925	0					
ANR	878057	Identifier	buffer		877925	1					
ANR	878058	Argument	"""PNG"""		877925	1					
ANR	878059	PrimaryExpression	"""PNG"""		877925	0					
ANR	878060	ExpressionStatement	"uQuery . addQueryItem ( QStringLiteral ( ""iconData"" ) , bytes . toBase64 ( QByteArray :: Base64UrlEncoding ) )"	680:4:25019:25113	877925	11	True				
ANR	878061	CallExpression	"uQuery . addQueryItem ( QStringLiteral ( ""iconData"" ) , bytes . toBase64 ( QByteArray :: Base64UrlEncoding ) )"		877925	0					
ANR	878062	Callee	uQuery . addQueryItem		877925	0					
ANR	878063	MemberAccess	uQuery . addQueryItem		877925	0					
ANR	878064	Identifier	uQuery		877925	0					
ANR	878065	Identifier	addQueryItem		877925	1					
ANR	878066	ArgumentList	"QStringLiteral ( ""iconData"" )"		877925	1					
ANR	878067	Argument	"QStringLiteral ( ""iconData"" )"		877925	0					
ANR	878068	CallExpression	"QStringLiteral ( ""iconData"" )"		877925	0					
ANR	878069	Callee	QStringLiteral		877925	0					
ANR	878070	Identifier	QStringLiteral		877925	0					
ANR	878071	ArgumentList	"""iconData"""		877925	1					
ANR	878072	Argument	"""iconData"""		877925	0					
ANR	878073	PrimaryExpression	"""iconData"""		877925	0					
ANR	878074	Argument	bytes . toBase64 ( QByteArray :: Base64UrlEncoding )		877925	1					
ANR	878075	CallExpression	bytes . toBase64 ( QByteArray :: Base64UrlEncoding )		877925	0					
ANR	878076	Callee	bytes . toBase64		877925	0					
ANR	878077	MemberAccess	bytes . toBase64		877925	0					
ANR	878078	Identifier	bytes		877925	0					
ANR	878079	Identifier	toBase64		877925	1					
ANR	878080	ArgumentList	QByteArray :: Base64UrlEncoding		877925	1					
ANR	878081	Argument	QByteArray :: Base64UrlEncoding		877925	0					
ANR	878082	Identifier	QByteArray :: Base64UrlEncoding		877925	0					
ANR	878083	ExpressionStatement	url . setQuery ( uQuery )	682:4:25120:25140	877925	12	True				
ANR	878084	CallExpression	url . setQuery ( uQuery )		877925	0					
ANR	878085	Callee	url . setQuery		877925	0					
ANR	878086	MemberAccess	url . setQuery		877925	0					
ANR	878087	Identifier	url		877925	0					
ANR	878088	Identifier	setQuery		877925	1					
ANR	878089	ArgumentList	uQuery		877925	1					
ANR	878090	Argument	uQuery		877925	0					
ANR	878091	Identifier	uQuery		877925	0					
ANR	878092	ReturnStatement	return url ;	684:4:25147:25157	877925	13	True				
ANR	878093	Identifier	url		877925	0					
ANR	878094	ReturnType	QUrl		877925	1					
ANR	878095	Identifier	XWindowTasksModel :: Private :: launcherUrl		877925	2					
ANR	878096	ParameterList	"WId window , bool encodeFallbackIcon"		877925	3					
ANR	878097	Parameter	WId window	656:45:24363:24372	877925	0	True				
ANR	878098	ParameterType	WId		877925	0					
ANR	878099	Identifier	window		877925	1					
ANR	878100	Parameter	bool encodeFallbackIcon	656:57:24375:24397	877925	1	True				
ANR	878101	ParameterType	bool		877925	0					
ANR	878102	Identifier	encodeFallbackIcon		877925	1					
ANR	878103	CFGEntryNode	ENTRY		877925		True				
ANR	878104	CFGExitNode	EXIT		877925		True				
ANR	878105	Symbol	uQuery		877925						
ANR	878106	Symbol	url . isValid		877925						
ANR	878107	Symbol	pixmap		877925						
ANR	878108	Symbol	data		877925						
ANR	878109	Symbol	data . icon . name ( ) . isEmpty		877925						
ANR	878110	Symbol	false		877925						
ANR	878111	Symbol	QByteArray :: Base64UrlEncoding		877925						
ANR	878112	Symbol	KIconLoader :: SizeLarge		877925						
ANR	878113	Symbol	appData		877925						
ANR	878114	Symbol	url		877925						
ANR	878115	Symbol	data . icon . name		877925						
ANR	878116	Symbol	data . url		877925						
ANR	878117	Symbol	KWindowSystem :: icon		877925						
ANR	878118	Symbol	& buffer		877925						
ANR	878119	Symbol	encodeFallbackIcon		877925						
ANR	878120	Symbol	bytes		877925						
ANR	878121	Symbol	QUrl		877925						
ANR	878122	Symbol	QIODevice :: WriteOnly		877925						
ANR	878123	Symbol	bytes . toBase64		877925						
ANR	878124	Symbol	data . icon		877925						
ANR	878125	Symbol	pixmap . isNull		877925						
ANR	878126	Symbol	QStringLiteral		877925						
ANR	878127	Symbol	window		877925						
ANR	878128	Symbol	buffer		877925						
ANR	878129	DeclStmt									
ANR	878130	Decl							KSysGuard :: Processes	KSysGuard :: Processes	procs
ANR	878131	DeclStmt									
ANR	878132	Decl							KSysGuard :: Process	KSysGuard :: Process *	proc
ANR	878133	DeclStmt									
ANR	878134	Decl							QString	QString	cmdline
ANR	878135	DeclStmt									
ANR	878136	Decl							KService :: List	KService :: List	services
ANR	878137	DeclStmt									
ANR	878138	Decl							int	int	slash
ANR	878139	DeclStmt									
ANR	878140	Decl							QString	QString	path
ANR	878141	DeclStmt									
ANR	878142	Decl							QString	QString	absolutePath
ANR	878143	Function	XWindowTasksModel :: Private :: servicesFromPid	738:0:26744:28645							
ANR	878144	FunctionDef	XWindowTasksModel :: Private :: servicesFromPid (int pid)		878143	0					
ANR	878145	CompoundStatement		739:0:26812:28645	878143	0					
ANR	878146	IdentifierDeclStatement	KService :: List services ;	741:4:26862:26885	878143	0	True				
ANR	878147	IdentifierDecl	services		878143	0					
ANR	878148	IdentifierDeclType	KService :: List		878143	0					
ANR	878149	Identifier	services		878143	1					
ANR	878150	IfStatement	if ( pid == 0 )		878143	1					
ANR	878151	Condition	pid == 0	743:8:26896:26903	878143	0	True				
ANR	878152	EqualityExpression	pid == 0		878143	0		==			
ANR	878153	Identifier	pid		878143	0					
ANR	878154	PrimaryExpression	0		878143	1					
ANR	878155	CompoundStatement		5:18:93:93	878143	1					
ANR	878156	ReturnStatement	return services ;	744:8:26916:26931	878143	0	True				
ANR	878157	Identifier	services		878143	0					
ANR	878158	IdentifierDeclStatement	KSysGuard :: Processes procs ;	747:4:26944:26970	878143	2	True				
ANR	878159	IdentifierDecl	procs		878143	0					
ANR	878160	IdentifierDeclType	KSysGuard :: Processes		878143	0					
ANR	878161	Identifier	procs		878143	1					
ANR	878162	ExpressionStatement	procs . updateOrAddProcess ( pid )	748:4:26976:27005	878143	3	True				
ANR	878163	CallExpression	procs . updateOrAddProcess ( pid )		878143	0					
ANR	878164	Callee	procs . updateOrAddProcess		878143	0					
ANR	878165	MemberAccess	procs . updateOrAddProcess		878143	0					
ANR	878166	Identifier	procs		878143	0					
ANR	878167	Identifier	updateOrAddProcess		878143	1					
ANR	878168	ArgumentList	pid		878143	1					
ANR	878169	Argument	pid		878143	0					
ANR	878170	Identifier	pid		878143	0					
ANR	878171	IdentifierDeclStatement	KSysGuard :: Process * proc = procs . getProcess ( pid ) ;	750:4:27012:27060	878143	4	True				
ANR	878172	IdentifierDecl	* proc = procs . getProcess ( pid )		878143	0					
ANR	878173	IdentifierDeclType	KSysGuard :: Process *		878143	0					
ANR	878174	Identifier	proc		878143	1					
ANR	878175	AssignmentExpression	* proc = procs . getProcess ( pid )		878143	2		=			
ANR	878176	Identifier	proc		878143	0					
ANR	878177	CallExpression	procs . getProcess ( pid )		878143	1					
ANR	878178	Callee	procs . getProcess		878143	0					
ANR	878179	MemberAccess	procs . getProcess		878143	0					
ANR	878180	Identifier	procs		878143	0					
ANR	878181	Identifier	getProcess		878143	1					
ANR	878182	ArgumentList	pid		878143	1					
ANR	878183	Argument	pid		878143	0					
ANR	878184	Identifier	pid		878143	0					
ANR	878185	IdentifierDeclStatement	QString cmdline = proc ? proc -> command ( ) . simplified ( ) : QString ( ) ;	751:4:27066:27131	878143	5	True				
ANR	878186	IdentifierDecl	cmdline = proc ? proc -> command ( ) . simplified ( ) : QString ( )		878143	0					
ANR	878187	IdentifierDeclType	QString		878143	0					
ANR	878188	Identifier	cmdline		878143	1					
ANR	878189	AssignmentExpression	cmdline = proc ? proc -> command ( ) . simplified ( ) : QString ( )		878143	2		=			
ANR	878190	Identifier	cmdline		878143	0					
ANR	878191	ConditionalExpression	proc ? proc -> command ( ) . simplified ( ) : QString ( )		878143	1					
ANR	878192	Condition	proc		878143	0					
ANR	878193	Identifier	proc		878143	0					
ANR	878194	CallExpression	proc -> command ( ) . simplified ( )		878143	1					
ANR	878195	Callee	proc -> command ( ) . simplified		878143	0					
ANR	878196	MemberAccess	proc -> command ( ) . simplified		878143	0					
ANR	878197	CallExpression	proc -> command ( )		878143	0					
ANR	878198	Callee	proc -> command		878143	0					
ANR	878199	PtrMemberAccess	proc -> command		878143	0					
ANR	878200	Identifier	proc		878143	0					
ANR	878201	Identifier	command		878143	1					
ANR	878202	ArgumentList			878143	1					
ANR	878203	Identifier	simplified		878143	1					
ANR	878204	ArgumentList			878143	1					
ANR	878205	CallExpression	QString ( )		878143	2					
ANR	878206	Callee	QString		878143	0					
ANR	878207	Identifier	QString		878143	0					
ANR	878208	ArgumentList			878143	1					
ANR	878209	IfStatement	if ( cmdline . isEmpty ( ) )		878143	6					
ANR	878210	Condition	cmdline . isEmpty ( )	753:8:27183:27199	878143	0	True				
ANR	878211	CallExpression	cmdline . isEmpty ( )		878143	0					
ANR	878212	Callee	cmdline . isEmpty		878143	0					
ANR	878213	MemberAccess	cmdline . isEmpty		878143	0					
ANR	878214	Identifier	cmdline		878143	0					
ANR	878215	Identifier	isEmpty		878143	1					
ANR	878216	ArgumentList			878143	1					
ANR	878217	CompoundStatement		15:27:389:389	878143	1					
ANR	878218	ReturnStatement	return services ;	754:8:27212:27227	878143	0	True				
ANR	878219	Identifier	services		878143	0					
ANR	878220	IdentifierDeclStatement	const int firstSpace = cmdline . indexOf ( ' ' ) ;	757:4:27240:27283	878143	7	True				
ANR	878221	IdentifierDecl	firstSpace = cmdline . indexOf ( ' ' )		878143	0					
ANR	878222	IdentifierDeclType	const int		878143	0					
ANR	878223	Identifier	firstSpace		878143	1					
ANR	878224	AssignmentExpression	firstSpace = cmdline . indexOf ( ' ' )		878143	2		=			
ANR	878225	Identifier	firstSpace		878143	0					
ANR	878226	CallExpression	cmdline . indexOf ( ' ' )		878143	1					
ANR	878227	Callee	cmdline . indexOf		878143	0					
ANR	878228	MemberAccess	cmdline . indexOf		878143	0					
ANR	878229	Identifier	cmdline		878143	0					
ANR	878230	Identifier	indexOf		878143	1					
ANR	878231	ArgumentList	' '		878143	1					
ANR	878232	Argument	' '		878143	0					
ANR	878233	PrimaryExpression	' '		878143	0					
ANR	878234	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline ) )"	759:4:27290:27427	878143	8	True				
ANR	878235	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline ) )"		878143	0		=			
ANR	878236	Identifier	services		878143	0					
ANR	878237	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline ) )"		878143	1					
ANR	878238	Callee	KServiceTypeTrader :: self ( ) -> query		878143	0					
ANR	878239	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		878143	0					
ANR	878240	CallExpression	KServiceTypeTrader :: self ( )		878143	0					
ANR	878241	Callee	KServiceTypeTrader :: self		878143	0					
ANR	878242	Identifier	KServiceTypeTrader :: self		878143	0					
ANR	878243	ArgumentList			878143	1					
ANR	878244	Identifier	query		878143	1					
ANR	878245	ArgumentList	"QStringLiteral ( ""Application"" )"		878143	1					
ANR	878246	Argument	"QStringLiteral ( ""Application"" )"		878143	0					
ANR	878247	CallExpression	"QStringLiteral ( ""Application"" )"		878143	0					
ANR	878248	Callee	QStringLiteral		878143	0					
ANR	878249	Identifier	QStringLiteral		878143	0					
ANR	878250	ArgumentList	"""Application"""		878143	1					
ANR	878251	Argument	"""Application"""		878143	0					
ANR	878252	PrimaryExpression	"""Application"""		878143	0					
ANR	878253	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline )"		878143	1					
ANR	878254	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline )"		878143	0					
ANR	878255	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg"		878143	0					
ANR	878256	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg"		878143	0					
ANR	878257	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" )"		878143	0					
ANR	878258	Callee	QStringLiteral		878143	0					
ANR	878259	Identifier	QStringLiteral		878143	0					
ANR	878260	ArgumentList	"""exist Exec and ('%1' =~ Exec)"""		878143	1					
ANR	878261	Argument	"""exist Exec and ('%1' =~ Exec)"""		878143	0					
ANR	878262	PrimaryExpression	"""exist Exec and ('%1' =~ Exec)"""		878143	0					
ANR	878263	Identifier	arg		878143	1					
ANR	878264	ArgumentList	cmdline		878143	1					
ANR	878265	Argument	cmdline		878143	0					
ANR	878266	Identifier	cmdline		878143	0					
ANR	878267	IfStatement	if ( services . empty ( ) )		878143	9					
ANR	878268	Condition	services . empty ( )	760:8:27437:27452	878143	0	True				
ANR	878269	CallExpression	services . empty ( )		878143	0					
ANR	878270	Callee	services . empty		878143	0					
ANR	878271	MemberAccess	services . empty		878143	0					
ANR	878272	Identifier	services		878143	0					
ANR	878273	Identifier	empty		878143	1					
ANR	878274	ArgumentList			878143	1					
ANR	878275	CompoundStatement		24:8:731:779	878143	1					
ANR	878276	IdentifierDeclStatement	"int slash = cmdline . lastIndexOf ( '/' , firstSpace ) ;"	762:8:27544:27592	878143	0	True				
ANR	878277	IdentifierDecl	"slash = cmdline . lastIndexOf ( '/' , firstSpace )"		878143	0					
ANR	878278	IdentifierDeclType	int		878143	0					
ANR	878279	Identifier	slash		878143	1					
ANR	878280	AssignmentExpression	"slash = cmdline . lastIndexOf ( '/' , firstSpace )"		878143	2		=			
ANR	878281	Identifier	slash		878143	0					
ANR	878282	CallExpression	"cmdline . lastIndexOf ( '/' , firstSpace )"		878143	1					
ANR	878283	Callee	cmdline . lastIndexOf		878143	0					
ANR	878284	MemberAccess	cmdline . lastIndexOf		878143	0					
ANR	878285	Identifier	cmdline		878143	0					
ANR	878286	Identifier	lastIndexOf		878143	1					
ANR	878287	ArgumentList	'/'		878143	1					
ANR	878288	Argument	'/'		878143	0					
ANR	878289	PrimaryExpression	'/'		878143	0					
ANR	878290	Argument	firstSpace		878143	1					
ANR	878291	Identifier	firstSpace		878143	0					
ANR	878292	IfStatement	if ( slash > 0 )		878143	1					
ANR	878293	Condition	slash > 0	763:12:27606:27614	878143	0	True				
ANR	878294	RelationalExpression	slash > 0		878143	0		>			
ANR	878295	Identifier	slash		878143	0					
ANR	878296	PrimaryExpression	0		878143	1					
ANR	878297	CompoundStatement		25:23:804:804	878143	1					
ANR	878298	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) ) )"	764:12:27631:27783	878143	0	True				
ANR	878299	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) ) )"		878143	0		=			
ANR	878300	Identifier	services		878143	0					
ANR	878301	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) ) )"		878143	1					
ANR	878302	Callee	KServiceTypeTrader :: self ( ) -> query		878143	0					
ANR	878303	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		878143	0					
ANR	878304	CallExpression	KServiceTypeTrader :: self ( )		878143	0					
ANR	878305	Callee	KServiceTypeTrader :: self		878143	0					
ANR	878306	Identifier	KServiceTypeTrader :: self		878143	0					
ANR	878307	ArgumentList			878143	1					
ANR	878308	Identifier	query		878143	1					
ANR	878309	ArgumentList	"QStringLiteral ( ""Application"" )"		878143	1					
ANR	878310	Argument	"QStringLiteral ( ""Application"" )"		878143	0					
ANR	878311	CallExpression	"QStringLiteral ( ""Application"" )"		878143	0					
ANR	878312	Callee	QStringLiteral		878143	0					
ANR	878313	Identifier	QStringLiteral		878143	0					
ANR	878314	ArgumentList	"""Application"""		878143	1					
ANR	878315	Argument	"""Application"""		878143	0					
ANR	878316	PrimaryExpression	"""Application"""		878143	0					
ANR	878317	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) )"		878143	1					
ANR	878318	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) )"		878143	0					
ANR	878319	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg"		878143	0					
ANR	878320	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg"		878143	0					
ANR	878321	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" )"		878143	0					
ANR	878322	Callee	QStringLiteral		878143	0					
ANR	878323	Identifier	QStringLiteral		878143	0					
ANR	878324	ArgumentList	"""exist Exec and ('%1' =~ Exec)"""		878143	1					
ANR	878325	Argument	"""exist Exec and ('%1' =~ Exec)"""		878143	0					
ANR	878326	PrimaryExpression	"""exist Exec and ('%1' =~ Exec)"""		878143	0					
ANR	878327	Identifier	arg		878143	1					
ANR	878328	ArgumentList	cmdline . mid ( slash + 1 )		878143	1					
ANR	878329	Argument	cmdline . mid ( slash + 1 )		878143	0					
ANR	878330	CallExpression	cmdline . mid ( slash + 1 )		878143	0					
ANR	878331	Callee	cmdline . mid		878143	0					
ANR	878332	MemberAccess	cmdline . mid		878143	0					
ANR	878333	Identifier	cmdline		878143	0					
ANR	878334	Identifier	mid		878143	1					
ANR	878335	ArgumentList	slash + 1		878143	1					
ANR	878336	Argument	slash + 1		878143	0					
ANR	878337	AdditiveExpression	slash + 1		878143	0		+			
ANR	878338	Identifier	slash		878143	0					
ANR	878339	PrimaryExpression	1		878143	1					
ANR	878340	IfStatement	if ( services . empty ( ) && firstSpace > 0 )		878143	10					
ANR	878341	Condition	services . empty ( ) && firstSpace > 0	768:8:27810:27843	878143	0	True				
ANR	878342	AndExpression	services . empty ( ) && firstSpace > 0		878143	0		&&			
ANR	878343	CallExpression	services . empty ( )		878143	0					
ANR	878344	Callee	services . empty		878143	0					
ANR	878345	MemberAccess	services . empty		878143	0					
ANR	878346	Identifier	services		878143	0					
ANR	878347	Identifier	empty		878143	1					
ANR	878348	ArgumentList			878143	1					
ANR	878349	RelationalExpression	firstSpace > 0		878143	1		>			
ANR	878350	Identifier	firstSpace		878143	0					
ANR	878351	PrimaryExpression	0		878143	1					
ANR	878352	CompoundStatement		35:8:1295:1331	878143	1					
ANR	878353	ExpressionStatement	cmdline = cmdline . left ( firstSpace )	770:8:27916:27950	878143	0	True				
ANR	878354	AssignmentExpression	cmdline = cmdline . left ( firstSpace )		878143	0		=			
ANR	878355	Identifier	cmdline		878143	0					
ANR	878356	CallExpression	cmdline . left ( firstSpace )		878143	1					
ANR	878357	Callee	cmdline . left		878143	0					
ANR	878358	MemberAccess	cmdline . left		878143	0					
ANR	878359	Identifier	cmdline		878143	0					
ANR	878360	Identifier	left		878143	1					
ANR	878361	ArgumentList	firstSpace		878143	1					
ANR	878362	Argument	firstSpace		878143	0					
ANR	878363	Identifier	firstSpace		878143	0					
ANR	878364	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline ) )"	771:8:27960:28097	878143	1	True				
ANR	878365	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline ) )"		878143	0		=			
ANR	878366	Identifier	services		878143	0					
ANR	878367	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline ) )"		878143	1					
ANR	878368	Callee	KServiceTypeTrader :: self ( ) -> query		878143	0					
ANR	878369	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		878143	0					
ANR	878370	CallExpression	KServiceTypeTrader :: self ( )		878143	0					
ANR	878371	Callee	KServiceTypeTrader :: self		878143	0					
ANR	878372	Identifier	KServiceTypeTrader :: self		878143	0					
ANR	878373	ArgumentList			878143	1					
ANR	878374	Identifier	query		878143	1					
ANR	878375	ArgumentList	"QStringLiteral ( ""Application"" )"		878143	1					
ANR	878376	Argument	"QStringLiteral ( ""Application"" )"		878143	0					
ANR	878377	CallExpression	"QStringLiteral ( ""Application"" )"		878143	0					
ANR	878378	Callee	QStringLiteral		878143	0					
ANR	878379	Identifier	QStringLiteral		878143	0					
ANR	878380	ArgumentList	"""Application"""		878143	1					
ANR	878381	Argument	"""Application"""		878143	0					
ANR	878382	PrimaryExpression	"""Application"""		878143	0					
ANR	878383	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline )"		878143	1					
ANR	878384	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline )"		878143	0					
ANR	878385	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg"		878143	0					
ANR	878386	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg"		878143	0					
ANR	878387	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" )"		878143	0					
ANR	878388	Callee	QStringLiteral		878143	0					
ANR	878389	Identifier	QStringLiteral		878143	0					
ANR	878390	ArgumentList	"""exist Exec and ('%1' =~ Exec)"""		878143	1					
ANR	878391	Argument	"""exist Exec and ('%1' =~ Exec)"""		878143	0					
ANR	878392	PrimaryExpression	"""exist Exec and ('%1' =~ Exec)"""		878143	0					
ANR	878393	Identifier	arg		878143	1					
ANR	878394	ArgumentList	cmdline		878143	1					
ANR	878395	Argument	cmdline		878143	0					
ANR	878396	Identifier	cmdline		878143	0					
ANR	878397	IdentifierDeclStatement	int slash = cmdline . lastIndexOf ( '/' ) ;	773:8:28108:28144	878143	2	True				
ANR	878398	IdentifierDecl	slash = cmdline . lastIndexOf ( '/' )		878143	0					
ANR	878399	IdentifierDeclType	int		878143	0					
ANR	878400	Identifier	slash		878143	1					
ANR	878401	AssignmentExpression	slash = cmdline . lastIndexOf ( '/' )		878143	2		=			
ANR	878402	Identifier	slash		878143	0					
ANR	878403	CallExpression	cmdline . lastIndexOf ( '/' )		878143	1					
ANR	878404	Callee	cmdline . lastIndexOf		878143	0					
ANR	878405	MemberAccess	cmdline . lastIndexOf		878143	0					
ANR	878406	Identifier	cmdline		878143	0					
ANR	878407	Identifier	lastIndexOf		878143	1					
ANR	878408	ArgumentList	'/'		878143	1					
ANR	878409	Argument	'/'		878143	0					
ANR	878410	PrimaryExpression	'/'		878143	0					
ANR	878411	IfStatement	if ( slash > 0 )		878143	3					
ANR	878412	Condition	slash > 0	774:12:28158:28166	878143	0	True				
ANR	878413	RelationalExpression	slash > 0		878143	0		>			
ANR	878414	Identifier	slash		878143	0					
ANR	878415	PrimaryExpression	0		878143	1					
ANR	878416	CompoundStatement		36:23:1356:1356	878143	1					
ANR	878417	ExpressionStatement	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) ) )"	775:12:28183:28335	878143	0	True				
ANR	878418	AssignmentExpression	"services = KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) ) )"		878143	0		=			
ANR	878419	Identifier	services		878143	0					
ANR	878420	CallExpression	"KServiceTypeTrader :: self ( ) -> query ( QStringLiteral ( ""Application"" ) , QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) ) )"		878143	1					
ANR	878421	Callee	KServiceTypeTrader :: self ( ) -> query		878143	0					
ANR	878422	PtrMemberAccess	KServiceTypeTrader :: self ( ) -> query		878143	0					
ANR	878423	CallExpression	KServiceTypeTrader :: self ( )		878143	0					
ANR	878424	Callee	KServiceTypeTrader :: self		878143	0					
ANR	878425	Identifier	KServiceTypeTrader :: self		878143	0					
ANR	878426	ArgumentList			878143	1					
ANR	878427	Identifier	query		878143	1					
ANR	878428	ArgumentList	"QStringLiteral ( ""Application"" )"		878143	1					
ANR	878429	Argument	"QStringLiteral ( ""Application"" )"		878143	0					
ANR	878430	CallExpression	"QStringLiteral ( ""Application"" )"		878143	0					
ANR	878431	Callee	QStringLiteral		878143	0					
ANR	878432	Identifier	QStringLiteral		878143	0					
ANR	878433	ArgumentList	"""Application"""		878143	1					
ANR	878434	Argument	"""Application"""		878143	0					
ANR	878435	PrimaryExpression	"""Application"""		878143	0					
ANR	878436	Argument	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) )"		878143	1					
ANR	878437	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg ( cmdline . mid ( slash + 1 ) )"		878143	0					
ANR	878438	Callee	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg"		878143	0					
ANR	878439	MemberAccess	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg"		878143	0					
ANR	878440	CallExpression	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" )"		878143	0					
ANR	878441	Callee	QStringLiteral		878143	0					
ANR	878442	Identifier	QStringLiteral		878143	0					
ANR	878443	ArgumentList	"""exist Exec and ('%1' =~ Exec)"""		878143	1					
ANR	878444	Argument	"""exist Exec and ('%1' =~ Exec)"""		878143	0					
ANR	878445	PrimaryExpression	"""exist Exec and ('%1' =~ Exec)"""		878143	0					
ANR	878446	Identifier	arg		878143	1					
ANR	878447	ArgumentList	cmdline . mid ( slash + 1 )		878143	1					
ANR	878448	Argument	cmdline . mid ( slash + 1 )		878143	0					
ANR	878449	CallExpression	cmdline . mid ( slash + 1 )		878143	0					
ANR	878450	Callee	cmdline . mid		878143	0					
ANR	878451	MemberAccess	cmdline . mid		878143	0					
ANR	878452	Identifier	cmdline		878143	0					
ANR	878453	Identifier	mid		878143	1					
ANR	878454	ArgumentList	slash + 1		878143	1					
ANR	878455	Argument	slash + 1		878143	0					
ANR	878456	AdditiveExpression	slash + 1		878143	0		+			
ANR	878457	Identifier	slash		878143	0					
ANR	878458	PrimaryExpression	1		878143	1					
ANR	878459	IfStatement	if ( services . empty ( ) && proc && ! QStandardPaths :: findExecutable ( cmdline ) . isEmpty ( ) )		878143	11					
ANR	878460	Condition	services . empty ( ) && proc && ! QStandardPaths :: findExecutable ( cmdline ) . isEmpty ( )	779:8:28362:28439	878143	0	True				
ANR	878461	AndExpression	services . empty ( ) && proc && ! QStandardPaths :: findExecutable ( cmdline ) . isEmpty ( )		878143	0		&&			
ANR	878462	CallExpression	services . empty ( )		878143	0					
ANR	878463	Callee	services . empty		878143	0					
ANR	878464	MemberAccess	services . empty		878143	0					
ANR	878465	Identifier	services		878143	0					
ANR	878466	Identifier	empty		878143	1					
ANR	878467	ArgumentList			878143	1					
ANR	878468	AndExpression	proc && ! QStandardPaths :: findExecutable ( cmdline ) . isEmpty ( )		878143	1		&&			
ANR	878469	Identifier	proc		878143	0					
ANR	878470	UnaryOperationExpression	! QStandardPaths :: findExecutable ( cmdline ) . isEmpty ( )		878143	1					
ANR	878471	UnaryOperator	!		878143	0					
ANR	878472	CallExpression	QStandardPaths :: findExecutable ( cmdline ) . isEmpty ( )		878143	1					
ANR	878473	Callee	QStandardPaths :: findExecutable ( cmdline ) . isEmpty		878143	0					
ANR	878474	MemberAccess	QStandardPaths :: findExecutable ( cmdline ) . isEmpty		878143	0					
ANR	878475	CallExpression	QStandardPaths :: findExecutable ( cmdline )		878143	0					
ANR	878476	Callee	QStandardPaths :: findExecutable		878143	0					
ANR	878477	Identifier	QStandardPaths :: findExecutable		878143	0					
ANR	878478	ArgumentList	cmdline		878143	1					
ANR	878479	Argument	cmdline		878143	0					
ANR	878480	Identifier	cmdline		878143	0					
ANR	878481	Identifier	isEmpty		878143	1					
ANR	878482	ArgumentList			878143	1					
ANR	878483	CompoundStatement		41:88:1629:1629	878143	1					
ANR	878484	ExpressionStatement	"services << QExplicitlySharedDataPointer < KService > ( new KService ( proc -> name ( ) , cmdline , QString ( ) ) )"	781:8:28518:28616	878143	0	True				
ANR	878485	RelationalExpression	"services << QExplicitlySharedDataPointer < KService > ( new KService ( proc -> name ( ) , cmdline , QString ( ) ) )"		878143	0		<			
ANR	878486	ShiftExpression	services << QExplicitlySharedDataPointer		878143	0		<<			
ANR	878487	Identifier	services		878143	0					
ANR	878488	Identifier	QExplicitlySharedDataPointer		878143	1					
ANR	878489	RelationalExpression	"KService > ( new KService ( proc -> name ( ) , cmdline , QString ( ) ) )"		878143	1		>			
ANR	878490	Identifier	KService		878143	0					
ANR	878491	Expression	"proc -> name ( ) , cmdline , QString ( )"		878143	1					
ANR	878492	CallExpression	proc -> name ( )		878143	0					
ANR	878493	Callee	proc -> name		878143	0					
ANR	878494	PtrMemberAccess	proc -> name		878143	0					
ANR	878495	Identifier	proc		878143	0					
ANR	878496	Identifier	name		878143	1					
ANR	878497	ArgumentList			878143	1					
ANR	878498	Expression	"cmdline , QString ( )"		878143	1					
ANR	878499	Identifier	cmdline		878143	0					
ANR	878500	CallExpression	QString ( )		878143	1					
ANR	878501	Callee	QString		878143	0					
ANR	878502	Identifier	QString		878143	0					
ANR	878503	ArgumentList			878143	1					
ANR	878504	ReturnStatement	return services ;	783:4:28628:28643	878143	12	True				
ANR	878505	Identifier	services		878143	0					
ANR	878506	ReturnType	KService :: List		878143	1					
ANR	878507	Identifier	XWindowTasksModel :: Private :: servicesFromPid		878143	2					
ANR	878508	ParameterList	int pid		878143	3					
ANR	878509	Parameter	int pid	738:59:26803:26809	878143	0	True				
ANR	878510	ParameterType	int		878143	0					
ANR	878511	Identifier	pid		878143	1					
ANR	878512	CFGEntryNode	ENTRY		878143		True				
ANR	878513	CFGExitNode	EXIT		878143		True				
ANR	878514	Symbol	cmdline . lastIndexOf		878143						
ANR	878515	Symbol	procs		878143						
ANR	878516	Symbol	proc -> command		878143						
ANR	878517	Symbol	KServiceTypeTrader :: self		878143						
ANR	878518	Symbol	firstSpace		878143						
ANR	878519	Symbol	pid		878143						
ANR	878520	Symbol	"QStringLiteral ( ""exist Exec and ('%1' =~ Exec)"" ) . arg"		878143						
ANR	878521	Symbol	QString		878143						
ANR	878522	Symbol	* KServiceTypeTrader :: self		878143						
ANR	878523	Symbol	cmdline		878143						
ANR	878524	Symbol	cmdline . mid		878143						
ANR	878525	Symbol	proc -> command ( ) . simplified		878143						
ANR	878526	Symbol	procs . getProcess		878143						
ANR	878527	Symbol	proc		878143						
ANR	878528	Symbol	cmdline . left		878143						
ANR	878529	Symbol	QStandardPaths :: findExecutable		878143						
ANR	878530	Symbol	services		878143						
ANR	878531	Symbol	* proc		878143						
ANR	878532	Symbol	cmdline . indexOf		878143						
ANR	878533	Symbol	QStandardPaths :: findExecutable ( cmdline ) . isEmpty		878143						
ANR	878534	Symbol	cmdline . isEmpty		878143						
ANR	878535	Symbol	KServiceTypeTrader :: self ( ) -> query		878143						
ANR	878536	Symbol	QStringLiteral		878143						
ANR	878537	Symbol	slash		878143						
ANR	878538	Symbol	services . empty		878143						
ANR	878539	Function	XWindowTasksModel :: Private :: activities	786:0:28648:29022							
ANR	878540	FunctionDef	XWindowTasksModel :: Private :: activities (WId window)		878539	0					
ANR	878541	CompoundStatement		787:0:28711:29022	878539	0					
ANR	878542	IdentifierDeclStatement	"NETWinInfo ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , 0 , NET :: WM2Activities ) ;"	788:4:28717:28812	878539	0	True				
ANR	878543	IdentifierDecl	"ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , 0 , NET :: WM2Activities )"		878539	0					
ANR	878544	IdentifierDeclType	NETWinInfo		878539	0					
ANR	878545	Identifier	ni		878539	1					
ANR	878546	Expression	"QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , 0 , NET :: WM2Activities"		878539	2					
ANR	878547	CallExpression	QX11Info :: connection ( )		878539	0					
ANR	878548	Callee	QX11Info :: connection		878539	0					
ANR	878549	Identifier	QX11Info :: connection		878539	0					
ANR	878550	ArgumentList			878539	1					
ANR	878551	Expression	"window , QX11Info :: appRootWindow ( ) , 0 , NET :: WM2Activities"		878539	1					
ANR	878552	Identifier	window		878539	0					
ANR	878553	Expression	"QX11Info :: appRootWindow ( ) , 0 , NET :: WM2Activities"		878539	1					
ANR	878554	CallExpression	QX11Info :: appRootWindow ( )		878539	0					
ANR	878555	Callee	QX11Info :: appRootWindow		878539	0					
ANR	878556	Identifier	QX11Info :: appRootWindow		878539	0					
ANR	878557	ArgumentList			878539	1					
ANR	878558	Expression	"0 , NET :: WM2Activities"		878539	1					
ANR	878559	PrimaryExpression	0		878539	0					
ANR	878560	Identifier	NET :: WM2Activities		878539	1					
ANR	878561	IdentifierDeclStatement	const QString result ( ni . activities ( ) ) ;	790:4:28819:28856	878539	1	True				
ANR	878562	IdentifierDecl	result ( ni . activities ( ) )		878539	0					
ANR	878563	IdentifierDeclType	const QString		878539	0					
ANR	878564	Identifier	result		878539	1					
ANR	878565	CallExpression	ni . activities ( )		878539	2					
ANR	878566	Callee	ni . activities		878539	0					
ANR	878567	MemberAccess	ni . activities		878539	0					
ANR	878568	Identifier	ni		878539	0					
ANR	878569	Identifier	activities		878539	1					
ANR	878570	ArgumentList			878539	1					
ANR	878571	IfStatement	"if ( ! result . isEmpty ( ) && result != QLatin1String ( ""00000000-0000-0000-0000-000000000000"" ) )"		878539	2					
ANR	878572	Condition	"! result . isEmpty ( ) && result != QLatin1String ( ""00000000-0000-0000-0000-000000000000"" )"	792:8:28867:28950	878539	0	True				
ANR	878573	AndExpression	"! result . isEmpty ( ) && result != QLatin1String ( ""00000000-0000-0000-0000-000000000000"" )"		878539	0		&&			
ANR	878574	UnaryOperationExpression	! result . isEmpty ( )		878539	0					
ANR	878575	UnaryOperator	!		878539	0					
ANR	878576	CallExpression	result . isEmpty ( )		878539	1					
ANR	878577	Callee	result . isEmpty		878539	0					
ANR	878578	MemberAccess	result . isEmpty		878539	0					
ANR	878579	Identifier	result		878539	0					
ANR	878580	Identifier	isEmpty		878539	1					
ANR	878581	ArgumentList			878539	1					
ANR	878582	EqualityExpression	"result != QLatin1String ( ""00000000-0000-0000-0000-000000000000"" )"		878539	1		!=			
ANR	878583	Identifier	result		878539	0					
ANR	878584	CallExpression	"QLatin1String ( ""00000000-0000-0000-0000-000000000000"" )"		878539	1					
ANR	878585	Callee	QLatin1String		878539	0					
ANR	878586	Identifier	QLatin1String		878539	0					
ANR	878587	ArgumentList	"""00000000-0000-0000-0000-000000000000"""		878539	1					
ANR	878588	Argument	"""00000000-0000-0000-0000-000000000000"""		878539	0					
ANR	878589	PrimaryExpression	"""00000000-0000-0000-0000-000000000000"""		878539	0					
ANR	878590	CompoundStatement		6:94:241:241	878539	1					
ANR	878591	ReturnStatement	"return result . split ( ',' ) ;"	793:8:28963:28987	878539	0	True				
ANR	878592	CallExpression	"result . split ( ',' )"		878539	0					
ANR	878593	Callee	result . split		878539	0					
ANR	878594	MemberAccess	result . split		878539	0					
ANR	878595	Identifier	result		878539	0					
ANR	878596	Identifier	split		878539	1					
ANR	878597	ArgumentList	"','"		878539	1					
ANR	878598	Argument	"','"		878539	0					
ANR	878599	PrimaryExpression	"','"		878539	0					
ANR	878600	ReturnStatement	return QStringList ( ) ;	796:4:29000:29020	878539	3	True				
ANR	878601	CallExpression	QStringList ( )		878539	0					
ANR	878602	Callee	QStringList		878539	0					
ANR	878603	Identifier	QStringList		878539	0					
ANR	878604	ArgumentList			878539	1					
ANR	878605	ReturnType	QStringList		878539	1					
ANR	878606	Identifier	XWindowTasksModel :: Private :: activities		878539	2					
ANR	878607	ParameterList	WId window		878539	3					
ANR	878608	Parameter	WId window	786:51:28699:28708	878539	0	True				
ANR	878609	ParameterType	WId		878539	0					
ANR	878610	Identifier	window		878539	1					
ANR	878611	CFGEntryNode	ENTRY		878539		True				
ANR	878612	CFGExitNode	EXIT		878539		True				
ANR	878613	Symbol	result		878539						
ANR	878614	Symbol	QLatin1String		878539						
ANR	878615	Symbol	QStringList		878539						
ANR	878616	Symbol	result . isEmpty		878539						
ANR	878617	Symbol	window		878539						
ANR	878618	Symbol	ni		878539						
ANR	878619	Symbol	result . split		878539						
ANR	878620	Function	XWindowTasksModel :: Private :: demandsAttention	799:0:29025:29279							
ANR	878621	FunctionDef	XWindowTasksModel :: Private :: demandsAttention (WId window)		878620	0					
ANR	878622	CompoundStatement		800:0:29087:29279	878620	0					
ANR	878623	IfStatement	if ( windows . contains ( window ) )		878620	0					
ANR	878624	Condition	windows . contains ( window )	801:8:29097:29120	878620	0	True				
ANR	878625	CallExpression	windows . contains ( window )		878620	0					
ANR	878626	Callee	windows . contains		878620	0					
ANR	878627	MemberAccess	windows . contains		878620	0					
ANR	878628	Identifier	windows		878620	0					
ANR	878629	Identifier	contains		878620	1					
ANR	878630	ArgumentList	window		878620	1					
ANR	878631	Argument	window		878620	0					
ANR	878632	Identifier	window		878620	0					
ANR	878633	CompoundStatement		2:34:35:35	878620	1					
ANR	878634	ReturnStatement	return ( ( windowInfo ( window ) -> hasState ( NET :: DemandsAttention ) ) || transientsDemandingAttention . contains ( window ) ) ;	802:8:29133:29252	878620	0	True				
ANR	878635	OrExpression	( windowInfo ( window ) -> hasState ( NET :: DemandsAttention ) ) || transientsDemandingAttention . contains ( window )		878620	0		||			
ANR	878636	CallExpression	windowInfo ( window ) -> hasState ( NET :: DemandsAttention )		878620	0					
ANR	878637	Callee	windowInfo ( window ) -> hasState		878620	0					
ANR	878638	PtrMemberAccess	windowInfo ( window ) -> hasState		878620	0					
ANR	878639	CallExpression	windowInfo ( window )		878620	0					
ANR	878640	Callee	windowInfo		878620	0					
ANR	878641	Identifier	windowInfo		878620	0					
ANR	878642	ArgumentList	window		878620	1					
ANR	878643	Argument	window		878620	0					
ANR	878644	Identifier	window		878620	0					
ANR	878645	Identifier	hasState		878620	1					
ANR	878646	ArgumentList	NET :: DemandsAttention		878620	1					
ANR	878647	Argument	NET :: DemandsAttention		878620	0					
ANR	878648	Identifier	NET :: DemandsAttention		878620	0					
ANR	878649	CallExpression	transientsDemandingAttention . contains ( window )		878620	1					
ANR	878650	Callee	transientsDemandingAttention . contains		878620	0					
ANR	878651	MemberAccess	transientsDemandingAttention . contains		878620	0					
ANR	878652	Identifier	transientsDemandingAttention		878620	0					
ANR	878653	Identifier	contains		878620	1					
ANR	878654	ArgumentList	window		878620	1					
ANR	878655	Argument	window		878620	0					
ANR	878656	Identifier	window		878620	0					
ANR	878657	ReturnStatement	return false ;	806:4:29265:29277	878620	1	True				
ANR	878658	Identifier	false		878620	0					
ANR	878659	ReturnType	bool		878620	1					
ANR	878660	Identifier	XWindowTasksModel :: Private :: demandsAttention		878620	2					
ANR	878661	ParameterList	WId window		878620	3					
ANR	878662	Parameter	WId window	799:50:29075:29084	878620	0	True				
ANR	878663	ParameterType	WId		878620	0					
ANR	878664	Identifier	window		878620	1					
ANR	878665	CFGEntryNode	ENTRY		878620		True				
ANR	878666	CFGExitNode	EXIT		878620		True				
ANR	878667	Symbol	windowInfo		878620						
ANR	878668	Symbol	transientsDemandingAttention		878620						
ANR	878669	Symbol	false		878620						
ANR	878670	Symbol	windowInfo ( window ) -> hasState		878620						
ANR	878671	Symbol	window		878620						
ANR	878672	Symbol	windows		878620						
ANR	878673	Symbol	windows . contains		878620						
ANR	878674	Symbol	transientsDemandingAttention . contains		878620						
ANR	878675	Symbol	* windowInfo		878620						
ANR	878676	Symbol	NET :: DemandsAttention		878620						
ANR	878677	Function	XWindowTasksModel :: XWindowTasksModel	809:0:29282:29419							
ANR	878678	FunctionDef	XWindowTasksModel :: XWindowTasksModel (QObject * parent)		878677	0					
ANR	878679	CompoundStatement		812:0:29402:29419	878677	0					
ANR	878680	ExpressionStatement	d -> init ( )	813:4:29408:29417	878677	0	True				
ANR	878681	CallExpression	d -> init ( )		878677	0					
ANR	878682	Callee	d -> init		878677	0					
ANR	878683	PtrMemberAccess	d -> init		878677	0					
ANR	878684	Identifier	d		878677	0					
ANR	878685	Identifier	init		878677	1					
ANR	878686	ArgumentList			878677	1					
ANR	878687	Identifier	XWindowTasksModel :: XWindowTasksModel		878677	1					
ANR	878688	ParameterList	QObject * parent		878677	2					
ANR	878689	Parameter	QObject * parent	809:37:29319:29333	878677	0	True				
ANR	878690	ParameterType	QObject *		878677	0					
ANR	878691	Identifier	parent		878677	1					
ANR	878692	CFGEntryNode	ENTRY		878677		True				
ANR	878693	CFGExitNode	EXIT		878677		True				
ANR	878694	Symbol	parent		878677						
ANR	878695	Symbol	d		878677						
ANR	878696	Function	XWindowTasksModel :: ~XWindowTasksModel	816:0:29422:29464							
ANR	878697	FunctionDef	XWindowTasksModel :: ~XWindowTasksModel ()		878696	0					
ANR	878698	CompoundStatement		817:0:29462:29464	878696	0					
ANR	878699	Identifier	XWindowTasksModel :: ~XWindowTasksModel		878696	1					
ANR	878700	ParameterList			878696	2					
ANR	878701	CFGEntryNode	ENTRY		878696		True				
ANR	878702	CFGExitNode	EXIT		878696		True				
ANR	878703	Function	XWindowTasksModel :: data	820:0:29467:33285							
ANR	878704	FunctionDef	"XWindowTasksModel :: data (const QModelIndex & index , int role)"		878703	0					
ANR	878705	CompoundStatement		821:0:29542:33285	878703	0					
ANR	878706	IfStatement	if ( ! index . isValid ( ) || index . row ( ) >= d -> windows . count ( ) )		878703	0					
ANR	878707	Condition	! index . isValid ( ) || index . row ( ) >= d -> windows . count ( )	822:8:29552:29605	878703	0	True				
ANR	878708	OrExpression	! index . isValid ( ) || index . row ( ) >= d -> windows . count ( )		878703	0		||			
ANR	878709	UnaryOperationExpression	! index . isValid ( )		878703	0					
ANR	878710	UnaryOperator	!		878703	0					
ANR	878711	CallExpression	index . isValid ( )		878703	1					
ANR	878712	Callee	index . isValid		878703	0					
ANR	878713	MemberAccess	index . isValid		878703	0					
ANR	878714	Identifier	index		878703	0					
ANR	878715	Identifier	isValid		878703	1					
ANR	878716	ArgumentList			878703	1					
ANR	878717	RelationalExpression	index . row ( ) >= d -> windows . count ( )		878703	1		>=			
ANR	878718	CallExpression	index . row ( )		878703	0					
ANR	878719	Callee	index . row		878703	0					
ANR	878720	MemberAccess	index . row		878703	0					
ANR	878721	Identifier	index		878703	0					
ANR	878722	Identifier	row		878703	1					
ANR	878723	ArgumentList			878703	1					
ANR	878724	CallExpression	d -> windows . count ( )		878703	1					
ANR	878725	Callee	d -> windows . count		878703	0					
ANR	878726	MemberAccess	d -> windows . count		878703	0					
ANR	878727	PtrMemberAccess	d -> windows		878703	0					
ANR	878728	Identifier	d		878703	0					
ANR	878729	Identifier	windows		878703	1					
ANR	878730	Identifier	count		878703	1					
ANR	878731	ArgumentList			878703	1					
ANR	878732	CompoundStatement		2:64:65:65	878703	1					
ANR	878733	ReturnStatement	return QVariant ( ) ;	823:8:29618:29635	878703	0	True				
ANR	878734	CallExpression	QVariant ( )		878703	0					
ANR	878735	Callee	QVariant		878703	0					
ANR	878736	Identifier	QVariant		878703	0					
ANR	878737	ArgumentList			878703	1					
ANR	878738	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	826:4:29648:29693	878703	1	True				
ANR	878739	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		878703	0					
ANR	878740	IdentifierDeclType	const WId		878703	0					
ANR	878741	Identifier	window		878703	1					
ANR	878742	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		878703	2		=			
ANR	878743	Identifier	window		878703	0					
ANR	878744	CallExpression	d -> windows . at ( index . row ( ) )		878703	1					
ANR	878745	Callee	d -> windows . at		878703	0					
ANR	878746	MemberAccess	d -> windows . at		878703	0					
ANR	878747	PtrMemberAccess	d -> windows		878703	0					
ANR	878748	Identifier	d		878703	0					
ANR	878749	Identifier	windows		878703	1					
ANR	878750	Identifier	at		878703	1					
ANR	878751	ArgumentList	index . row ( )		878703	1					
ANR	878752	Argument	index . row ( )		878703	0					
ANR	878753	CallExpression	index . row ( )		878703	0					
ANR	878754	Callee	index . row		878703	0					
ANR	878755	MemberAccess	index . row		878703	0					
ANR	878756	Identifier	index		878703	0					
ANR	878757	Identifier	row		878703	1					
ANR	878758	ArgumentList			878703	1					
ANR	878759	IfStatement	if ( role == Qt :: DisplayRole )		878703	2					
ANR	878760	Condition	role == Qt :: DisplayRole	828:8:29704:29726	878703	0	True				
ANR	878761	EqualityExpression	role == Qt :: DisplayRole		878703	0		==			
ANR	878762	Identifier	role		878703	0					
ANR	878763	Identifier	Qt :: DisplayRole		878703	1					
ANR	878764	CompoundStatement		8:33:186:186	878703	1					
ANR	878765	ReturnStatement	return d -> windowInfo ( window ) -> visibleName ( ) ;	829:8:29739:29782	878703	0	True				
ANR	878766	CallExpression	d -> windowInfo ( window ) -> visibleName ( )		878703	0					
ANR	878767	Callee	d -> windowInfo ( window ) -> visibleName		878703	0					
ANR	878768	PtrMemberAccess	d -> windowInfo ( window ) -> visibleName		878703	0					
ANR	878769	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	878770	Callee	d -> windowInfo		878703	0					
ANR	878771	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	878772	Identifier	d		878703	0					
ANR	878773	Identifier	windowInfo		878703	1					
ANR	878774	ArgumentList	window		878703	1					
ANR	878775	Argument	window		878703	0					
ANR	878776	Identifier	window		878703	0					
ANR	878777	Identifier	visibleName		878703	1					
ANR	878778	ArgumentList			878703	1					
ANR	878779	ElseStatement	else		878703	0					
ANR	878780	IfStatement	if ( role == Qt :: DecorationRole )		878703	0					
ANR	878781	Condition	role == Qt :: DecorationRole	830:15:29799:29824	878703	0	True				
ANR	878782	EqualityExpression	role == Qt :: DecorationRole		878703	0		==			
ANR	878783	Identifier	role		878703	0					
ANR	878784	Identifier	Qt :: DecorationRole		878703	1					
ANR	878785	CompoundStatement		10:43:284:284	878703	1					
ANR	878786	ReturnStatement	return d -> icon ( window ) ;	831:8:29837:29859	878703	0	True				
ANR	878787	CallExpression	d -> icon ( window )		878703	0					
ANR	878788	Callee	d -> icon		878703	0					
ANR	878789	PtrMemberAccess	d -> icon		878703	0					
ANR	878790	Identifier	d		878703	0					
ANR	878791	Identifier	icon		878703	1					
ANR	878792	ArgumentList	window		878703	1					
ANR	878793	Argument	window		878703	0					
ANR	878794	Identifier	window		878703	0					
ANR	878795	ElseStatement	else		878703	0					
ANR	878796	IfStatement	if ( role == AppId )		878703	0					
ANR	878797	Condition	role == AppId	832:15:29876:29888	878703	0	True				
ANR	878798	EqualityExpression	role == AppId		878703	0		==			
ANR	878799	Identifier	role		878703	0					
ANR	878800	Identifier	AppId		878703	1					
ANR	878801	CompoundStatement		12:30:348:348	878703	1					
ANR	878802	ReturnStatement	return d -> appData ( window ) . id ;	833:8:29901:29929	878703	0	True				
ANR	878803	MemberAccess	d -> appData ( window ) . id		878703	0					
ANR	878804	CallExpression	d -> appData ( window )		878703	0					
ANR	878805	Callee	d -> appData		878703	0					
ANR	878806	PtrMemberAccess	d -> appData		878703	0					
ANR	878807	Identifier	d		878703	0					
ANR	878808	Identifier	appData		878703	1					
ANR	878809	ArgumentList	window		878703	1					
ANR	878810	Argument	window		878703	0					
ANR	878811	Identifier	window		878703	0					
ANR	878812	Identifier	id		878703	1					
ANR	878813	ElseStatement	else		878703	0					
ANR	878814	IfStatement	if ( role == AppName )		878703	0					
ANR	878815	Condition	role == AppName	834:15:29946:29960	878703	0	True				
ANR	878816	EqualityExpression	role == AppName		878703	0		==			
ANR	878817	Identifier	role		878703	0					
ANR	878818	Identifier	AppName		878703	1					
ANR	878819	CompoundStatement		14:32:420:420	878703	1					
ANR	878820	ReturnStatement	return d -> appData ( window ) . name ;	835:8:29973:30003	878703	0	True				
ANR	878821	MemberAccess	d -> appData ( window ) . name		878703	0					
ANR	878822	CallExpression	d -> appData ( window )		878703	0					
ANR	878823	Callee	d -> appData		878703	0					
ANR	878824	PtrMemberAccess	d -> appData		878703	0					
ANR	878825	Identifier	d		878703	0					
ANR	878826	Identifier	appData		878703	1					
ANR	878827	ArgumentList	window		878703	1					
ANR	878828	Argument	window		878703	0					
ANR	878829	Identifier	window		878703	0					
ANR	878830	Identifier	name		878703	1					
ANR	878831	ElseStatement	else		878703	0					
ANR	878832	IfStatement	if ( role == GenericName )		878703	0					
ANR	878833	Condition	role == GenericName	836:15:30020:30038	878703	0	True				
ANR	878834	EqualityExpression	role == GenericName		878703	0		==			
ANR	878835	Identifier	role		878703	0					
ANR	878836	Identifier	GenericName		878703	1					
ANR	878837	CompoundStatement		16:36:498:498	878703	1					
ANR	878838	ReturnStatement	return d -> appData ( window ) . genericName ;	837:8:30051:30088	878703	0	True				
ANR	878839	MemberAccess	d -> appData ( window ) . genericName		878703	0					
ANR	878840	CallExpression	d -> appData ( window )		878703	0					
ANR	878841	Callee	d -> appData		878703	0					
ANR	878842	PtrMemberAccess	d -> appData		878703	0					
ANR	878843	Identifier	d		878703	0					
ANR	878844	Identifier	appData		878703	1					
ANR	878845	ArgumentList	window		878703	1					
ANR	878846	Argument	window		878703	0					
ANR	878847	Identifier	window		878703	0					
ANR	878848	Identifier	genericName		878703	1					
ANR	878849	ElseStatement	else		878703	0					
ANR	878850	IfStatement	if ( role == LauncherUrl )		878703	0					
ANR	878851	Condition	role == LauncherUrl	838:15:30105:30123	878703	0	True				
ANR	878852	EqualityExpression	role == LauncherUrl		878703	0		==			
ANR	878853	Identifier	role		878703	0					
ANR	878854	Identifier	LauncherUrl		878703	1					
ANR	878855	CompoundStatement		18:36:583:583	878703	1					
ANR	878856	ReturnStatement	return d -> launcherUrl ( window ) ;	839:8:30136:30165	878703	0	True				
ANR	878857	CallExpression	d -> launcherUrl ( window )		878703	0					
ANR	878858	Callee	d -> launcherUrl		878703	0					
ANR	878859	PtrMemberAccess	d -> launcherUrl		878703	0					
ANR	878860	Identifier	d		878703	0					
ANR	878861	Identifier	launcherUrl		878703	1					
ANR	878862	ArgumentList	window		878703	1					
ANR	878863	Argument	window		878703	0					
ANR	878864	Identifier	window		878703	0					
ANR	878865	ElseStatement	else		878703	0					
ANR	878866	IfStatement	if ( role == LauncherUrlWithoutIcon )		878703	0					
ANR	878867	Condition	role == LauncherUrlWithoutIcon	840:15:30182:30211	878703	0	True				
ANR	878868	EqualityExpression	role == LauncherUrlWithoutIcon		878703	0		==			
ANR	878869	Identifier	role		878703	0					
ANR	878870	Identifier	LauncherUrlWithoutIcon		878703	1					
ANR	878871	CompoundStatement		20:47:671:671	878703	1					
ANR	878872	ReturnStatement	"return d -> launcherUrl ( window , false ) ;"	841:8:30224:30285	878703	0	True				
ANR	878873	CallExpression	"d -> launcherUrl ( window , false )"		878703	0					
ANR	878874	Callee	d -> launcherUrl		878703	0					
ANR	878875	PtrMemberAccess	d -> launcherUrl		878703	0					
ANR	878876	Identifier	d		878703	0					
ANR	878877	Identifier	launcherUrl		878703	1					
ANR	878878	ArgumentList	window		878703	1					
ANR	878879	Argument	window		878703	0					
ANR	878880	Identifier	window		878703	0					
ANR	878881	Argument	false		878703	1					
ANR	878882	Identifier	false		878703	0					
ANR	878883	ElseStatement	else		878703	0					
ANR	878884	IfStatement	if ( role == LegacyWinIdList )		878703	0					
ANR	878885	Condition	role == LegacyWinIdList	842:15:30302:30324	878703	0	True				
ANR	878886	EqualityExpression	role == LegacyWinIdList		878703	0		==			
ANR	878887	Identifier	role		878703	0					
ANR	878888	Identifier	LegacyWinIdList		878703	1					
ANR	878889	CompoundStatement		22:40:784:784	878703	1					
ANR	878890	ReturnStatement	return QVariantList ( ) << window ;	843:8:30337:30368	878703	0	True				
ANR	878891	ShiftExpression	QVariantList ( ) << window		878703	0		<<			
ANR	878892	CallExpression	QVariantList ( )		878703	0					
ANR	878893	Callee	QVariantList		878703	0					
ANR	878894	Identifier	QVariantList		878703	0					
ANR	878895	ArgumentList			878703	1					
ANR	878896	Identifier	window		878703	1					
ANR	878897	ElseStatement	else		878703	0					
ANR	878898	IfStatement	if ( role == MimeType )		878703	0					
ANR	878899	Condition	role == MimeType	844:15:30385:30400	878703	0	True				
ANR	878900	EqualityExpression	role == MimeType		878703	0		==			
ANR	878901	Identifier	role		878703	0					
ANR	878902	Identifier	MimeType		878703	1					
ANR	878903	CompoundStatement		24:33:860:860	878703	1					
ANR	878904	ReturnStatement	return d -> mimeType ( ) ;	845:8:30413:30433	878703	0	True				
ANR	878905	CallExpression	d -> mimeType ( )		878703	0					
ANR	878906	Callee	d -> mimeType		878703	0					
ANR	878907	PtrMemberAccess	d -> mimeType		878703	0					
ANR	878908	Identifier	d		878703	0					
ANR	878909	Identifier	mimeType		878703	1					
ANR	878910	ArgumentList			878703	1					
ANR	878911	ElseStatement	else		878703	0					
ANR	878912	IfStatement	if ( role == MimeData )		878703	0					
ANR	878913	Condition	role == MimeData	846:15:30450:30465	878703	0	True				
ANR	878914	EqualityExpression	role == MimeData		878703	0		==			
ANR	878915	Identifier	role		878703	0					
ANR	878916	Identifier	MimeData		878703	1					
ANR	878917	CompoundStatement		26:33:925:925	878703	1					
ANR	878918	ReturnStatement	"return QByteArray ( ( char * ) & window , sizeof ( window ) ) ;"	847:8:30478:30527	878703	0	True				
ANR	878919	CallExpression	"QByteArray ( ( char * ) & window , sizeof ( window ) )"		878703	0					
ANR	878920	Callee	QByteArray		878703	0					
ANR	878921	Identifier	QByteArray		878703	0					
ANR	878922	ArgumentList	( char * ) & window		878703	1					
ANR	878923	Argument	( char * ) & window		878703	0					
ANR	878924	CastExpression	( char * ) & window		878703	0					
ANR	878925	CastTarget	char *		878703	0					
ANR	878926	UnaryOperationExpression	& window		878703	1					
ANR	878927	UnaryOperator	&		878703	0					
ANR	878928	Identifier	window		878703	1					
ANR	878929	Argument	sizeof ( window )		878703	1					
ANR	878930	SizeofExpression	sizeof ( window )		878703	0					
ANR	878931	Sizeof	sizeof		878703	0					
ANR	878932	SizeofOperand	window		878703	1					
ANR	878933	ExpressionStatement		847:58:30528:30528	878703	1	True				
ANR	878934	ElseStatement	else		878703	0					
ANR	878935	IfStatement	if ( role == IsWindow )		878703	0					
ANR	878936	Condition	role == IsWindow	848:15:30545:30560	878703	0	True				
ANR	878937	EqualityExpression	role == IsWindow		878703	0		==			
ANR	878938	Identifier	role		878703	0					
ANR	878939	Identifier	IsWindow		878703	1					
ANR	878940	CompoundStatement		28:33:1020:1020	878703	1					
ANR	878941	ReturnStatement	return true ;	849:8:30573:30584	878703	0	True				
ANR	878942	Identifier	true		878703	0					
ANR	878943	ElseStatement	else		878703	0					
ANR	878944	IfStatement	if ( role == IsActive )		878703	0					
ANR	878945	Condition	role == IsActive	850:15:30601:30616	878703	0	True				
ANR	878946	EqualityExpression	role == IsActive		878703	0		==			
ANR	878947	Identifier	role		878703	0					
ANR	878948	Identifier	IsActive		878703	1					
ANR	878949	CompoundStatement		30:33:1076:1076	878703	1					
ANR	878950	ReturnStatement	return ( window == d -> activeWindow ) ;	851:8:30629:30663	878703	0	True				
ANR	878951	EqualityExpression	window == d -> activeWindow		878703	0		==			
ANR	878952	Identifier	window		878703	0					
ANR	878953	PtrMemberAccess	d -> activeWindow		878703	1					
ANR	878954	Identifier	d		878703	0					
ANR	878955	Identifier	activeWindow		878703	1					
ANR	878956	ElseStatement	else		878703	0					
ANR	878957	IfStatement	if ( role == IsClosable )		878703	0					
ANR	878958	Condition	role == IsClosable	852:15:30680:30697	878703	0	True				
ANR	878959	EqualityExpression	role == IsClosable		878703	0		==			
ANR	878960	Identifier	role		878703	0					
ANR	878961	Identifier	IsClosable		878703	1					
ANR	878962	CompoundStatement		32:35:1157:1157	878703	1					
ANR	878963	ReturnStatement	return d -> windowInfo ( window ) -> actionSupported ( NET :: ActionClose ) ;	853:8:30710:30773	878703	0	True				
ANR	878964	CallExpression	d -> windowInfo ( window ) -> actionSupported ( NET :: ActionClose )		878703	0					
ANR	878965	Callee	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	878966	PtrMemberAccess	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	878967	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	878968	Callee	d -> windowInfo		878703	0					
ANR	878969	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	878970	Identifier	d		878703	0					
ANR	878971	Identifier	windowInfo		878703	1					
ANR	878972	ArgumentList	window		878703	1					
ANR	878973	Argument	window		878703	0					
ANR	878974	Identifier	window		878703	0					
ANR	878975	Identifier	actionSupported		878703	1					
ANR	878976	ArgumentList	NET :: ActionClose		878703	1					
ANR	878977	Argument	NET :: ActionClose		878703	0					
ANR	878978	Identifier	NET :: ActionClose		878703	0					
ANR	878979	ElseStatement	else		878703	0					
ANR	878980	IfStatement	if ( role == IsMovable )		878703	0					
ANR	878981	Condition	role == IsMovable	854:15:30790:30806	878703	0	True				
ANR	878982	EqualityExpression	role == IsMovable		878703	0		==			
ANR	878983	Identifier	role		878703	0					
ANR	878984	Identifier	IsMovable		878703	1					
ANR	878985	CompoundStatement		34:34:1266:1266	878703	1					
ANR	878986	ReturnStatement	return d -> windowInfo ( window ) -> actionSupported ( NET :: ActionMove ) ;	855:8:30819:30881	878703	0	True				
ANR	878987	CallExpression	d -> windowInfo ( window ) -> actionSupported ( NET :: ActionMove )		878703	0					
ANR	878988	Callee	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	878989	PtrMemberAccess	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	878990	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	878991	Callee	d -> windowInfo		878703	0					
ANR	878992	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	878993	Identifier	d		878703	0					
ANR	878994	Identifier	windowInfo		878703	1					
ANR	878995	ArgumentList	window		878703	1					
ANR	878996	Argument	window		878703	0					
ANR	878997	Identifier	window		878703	0					
ANR	878998	Identifier	actionSupported		878703	1					
ANR	878999	ArgumentList	NET :: ActionMove		878703	1					
ANR	879000	Argument	NET :: ActionMove		878703	0					
ANR	879001	Identifier	NET :: ActionMove		878703	0					
ANR	879002	ElseStatement	else		878703	0					
ANR	879003	IfStatement	if ( role == IsResizable )		878703	0					
ANR	879004	Condition	role == IsResizable	856:15:30898:30916	878703	0	True				
ANR	879005	EqualityExpression	role == IsResizable		878703	0		==			
ANR	879006	Identifier	role		878703	0					
ANR	879007	Identifier	IsResizable		878703	1					
ANR	879008	CompoundStatement		36:36:1376:1376	878703	1					
ANR	879009	ReturnStatement	return d -> windowInfo ( window ) -> actionSupported ( NET :: ActionResize ) ;	857:8:30929:30993	878703	0	True				
ANR	879010	CallExpression	d -> windowInfo ( window ) -> actionSupported ( NET :: ActionResize )		878703	0					
ANR	879011	Callee	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879012	PtrMemberAccess	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879013	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879014	Callee	d -> windowInfo		878703	0					
ANR	879015	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879016	Identifier	d		878703	0					
ANR	879017	Identifier	windowInfo		878703	1					
ANR	879018	ArgumentList	window		878703	1					
ANR	879019	Argument	window		878703	0					
ANR	879020	Identifier	window		878703	0					
ANR	879021	Identifier	actionSupported		878703	1					
ANR	879022	ArgumentList	NET :: ActionResize		878703	1					
ANR	879023	Argument	NET :: ActionResize		878703	0					
ANR	879024	Identifier	NET :: ActionResize		878703	0					
ANR	879025	ElseStatement	else		878703	0					
ANR	879026	IfStatement	if ( role == IsMaximizable )		878703	0					
ANR	879027	Condition	role == IsMaximizable	858:15:31010:31030	878703	0	True				
ANR	879028	EqualityExpression	role == IsMaximizable		878703	0		==			
ANR	879029	Identifier	role		878703	0					
ANR	879030	Identifier	IsMaximizable		878703	1					
ANR	879031	CompoundStatement		38:38:1490:1490	878703	1					
ANR	879032	ReturnStatement	return d -> windowInfo ( window ) -> actionSupported ( NET :: ActionMax ) ;	859:8:31043:31104	878703	0	True				
ANR	879033	CallExpression	d -> windowInfo ( window ) -> actionSupported ( NET :: ActionMax )		878703	0					
ANR	879034	Callee	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879035	PtrMemberAccess	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879036	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879037	Callee	d -> windowInfo		878703	0					
ANR	879038	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879039	Identifier	d		878703	0					
ANR	879040	Identifier	windowInfo		878703	1					
ANR	879041	ArgumentList	window		878703	1					
ANR	879042	Argument	window		878703	0					
ANR	879043	Identifier	window		878703	0					
ANR	879044	Identifier	actionSupported		878703	1					
ANR	879045	ArgumentList	NET :: ActionMax		878703	1					
ANR	879046	Argument	NET :: ActionMax		878703	0					
ANR	879047	Identifier	NET :: ActionMax		878703	0					
ANR	879048	ElseStatement	else		878703	0					
ANR	879049	IfStatement	if ( role == IsMaximized )		878703	0					
ANR	879050	Condition	role == IsMaximized	860:15:31121:31139	878703	0	True				
ANR	879051	EqualityExpression	role == IsMaximized		878703	0		==			
ANR	879052	Identifier	role		878703	0					
ANR	879053	Identifier	IsMaximized		878703	1					
ANR	879054	CompoundStatement		41:8:1609:1656	878703	1					
ANR	879055	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	861:8:31152:31199	878703	0	True				
ANR	879056	IdentifierDecl	* info = d -> windowInfo ( window )		878703	0					
ANR	879057	IdentifierDeclType	const KWindowInfo *		878703	0					
ANR	879058	Identifier	info		878703	1					
ANR	879059	AssignmentExpression	* info = d -> windowInfo ( window )		878703	2		=			
ANR	879060	Identifier	info		878703	0					
ANR	879061	CallExpression	d -> windowInfo ( window )		878703	1					
ANR	879062	Callee	d -> windowInfo		878703	0					
ANR	879063	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879064	Identifier	d		878703	0					
ANR	879065	Identifier	windowInfo		878703	1					
ANR	879066	ArgumentList	window		878703	1					
ANR	879067	Argument	window		878703	0					
ANR	879068	Identifier	window		878703	0					
ANR	879069	ReturnStatement	return info -> hasState ( NET :: MaxHoriz ) && info -> hasState ( NET :: MaxVert ) ;	862:8:31209:31277	878703	1	True				
ANR	879070	AndExpression	info -> hasState ( NET :: MaxHoriz ) && info -> hasState ( NET :: MaxVert )		878703	0		&&			
ANR	879071	CallExpression	info -> hasState ( NET :: MaxHoriz )		878703	0					
ANR	879072	Callee	info -> hasState		878703	0					
ANR	879073	PtrMemberAccess	info -> hasState		878703	0					
ANR	879074	Identifier	info		878703	0					
ANR	879075	Identifier	hasState		878703	1					
ANR	879076	ArgumentList	NET :: MaxHoriz		878703	1					
ANR	879077	Argument	NET :: MaxHoriz		878703	0					
ANR	879078	Identifier	NET :: MaxHoriz		878703	0					
ANR	879079	CallExpression	info -> hasState ( NET :: MaxVert )		878703	1					
ANR	879080	Callee	info -> hasState		878703	0					
ANR	879081	PtrMemberAccess	info -> hasState		878703	0					
ANR	879082	Identifier	info		878703	0					
ANR	879083	Identifier	hasState		878703	1					
ANR	879084	ArgumentList	NET :: MaxVert		878703	1					
ANR	879085	Argument	NET :: MaxVert		878703	0					
ANR	879086	Identifier	NET :: MaxVert		878703	0					
ANR	879087	ElseStatement	else		878703	0					
ANR	879088	IfStatement	if ( role == IsMinimizable )		878703	0					
ANR	879089	Condition	role == IsMinimizable	863:15:31294:31314	878703	0	True				
ANR	879090	EqualityExpression	role == IsMinimizable		878703	0		==			
ANR	879091	Identifier	role		878703	0					
ANR	879092	Identifier	IsMinimizable		878703	1					
ANR	879093	CompoundStatement		43:38:1774:1774	878703	1					
ANR	879094	ReturnStatement	return d -> windowInfo ( window ) -> actionSupported ( NET :: ActionMinimize ) ;	864:8:31327:31393	878703	0	True				
ANR	879095	CallExpression	d -> windowInfo ( window ) -> actionSupported ( NET :: ActionMinimize )		878703	0					
ANR	879096	Callee	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879097	PtrMemberAccess	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879098	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879099	Callee	d -> windowInfo		878703	0					
ANR	879100	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879101	Identifier	d		878703	0					
ANR	879102	Identifier	windowInfo		878703	1					
ANR	879103	ArgumentList	window		878703	1					
ANR	879104	Argument	window		878703	0					
ANR	879105	Identifier	window		878703	0					
ANR	879106	Identifier	actionSupported		878703	1					
ANR	879107	ArgumentList	NET :: ActionMinimize		878703	1					
ANR	879108	Argument	NET :: ActionMinimize		878703	0					
ANR	879109	Identifier	NET :: ActionMinimize		878703	0					
ANR	879110	ElseStatement	else		878703	0					
ANR	879111	IfStatement	if ( role == IsMinimized )		878703	0					
ANR	879112	Condition	role == IsMinimized	865:15:31410:31428	878703	0	True				
ANR	879113	EqualityExpression	role == IsMinimized		878703	0		==			
ANR	879114	Identifier	role		878703	0					
ANR	879115	Identifier	IsMinimized		878703	1					
ANR	879116	CompoundStatement		45:36:1888:1888	878703	1					
ANR	879117	ReturnStatement	return d -> windowInfo ( window ) -> isMinimized ( ) ;	866:8:31441:31484	878703	0	True				
ANR	879118	CallExpression	d -> windowInfo ( window ) -> isMinimized ( )		878703	0					
ANR	879119	Callee	d -> windowInfo ( window ) -> isMinimized		878703	0					
ANR	879120	PtrMemberAccess	d -> windowInfo ( window ) -> isMinimized		878703	0					
ANR	879121	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879122	Callee	d -> windowInfo		878703	0					
ANR	879123	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879124	Identifier	d		878703	0					
ANR	879125	Identifier	windowInfo		878703	1					
ANR	879126	ArgumentList	window		878703	1					
ANR	879127	Argument	window		878703	0					
ANR	879128	Identifier	window		878703	0					
ANR	879129	Identifier	isMinimized		878703	1					
ANR	879130	ArgumentList			878703	1					
ANR	879131	ElseStatement	else		878703	0					
ANR	879132	IfStatement	if ( role == IsKeepAbove )		878703	0					
ANR	879133	Condition	role == IsKeepAbove	867:15:31501:31519	878703	0	True				
ANR	879134	EqualityExpression	role == IsKeepAbove		878703	0		==			
ANR	879135	Identifier	role		878703	0					
ANR	879136	Identifier	IsKeepAbove		878703	1					
ANR	879137	CompoundStatement		47:36:1979:1979	878703	1					
ANR	879138	ReturnStatement	return d -> windowInfo ( window ) -> hasState ( NET :: StaysOnTop ) ;	868:8:31532:31587	878703	0	True				
ANR	879139	CallExpression	d -> windowInfo ( window ) -> hasState ( NET :: StaysOnTop )		878703	0					
ANR	879140	Callee	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879141	PtrMemberAccess	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879142	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879143	Callee	d -> windowInfo		878703	0					
ANR	879144	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879145	Identifier	d		878703	0					
ANR	879146	Identifier	windowInfo		878703	1					
ANR	879147	ArgumentList	window		878703	1					
ANR	879148	Argument	window		878703	0					
ANR	879149	Identifier	window		878703	0					
ANR	879150	Identifier	hasState		878703	1					
ANR	879151	ArgumentList	NET :: StaysOnTop		878703	1					
ANR	879152	Argument	NET :: StaysOnTop		878703	0					
ANR	879153	Identifier	NET :: StaysOnTop		878703	0					
ANR	879154	ElseStatement	else		878703	0					
ANR	879155	IfStatement	if ( role == IsKeepBelow )		878703	0					
ANR	879156	Condition	role == IsKeepBelow	869:15:31604:31622	878703	0	True				
ANR	879157	EqualityExpression	role == IsKeepBelow		878703	0		==			
ANR	879158	Identifier	role		878703	0					
ANR	879159	Identifier	IsKeepBelow		878703	1					
ANR	879160	CompoundStatement		49:36:2082:2082	878703	1					
ANR	879161	ReturnStatement	return d -> windowInfo ( window ) -> hasState ( NET :: KeepBelow ) ;	870:8:31635:31689	878703	0	True				
ANR	879162	CallExpression	d -> windowInfo ( window ) -> hasState ( NET :: KeepBelow )		878703	0					
ANR	879163	Callee	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879164	PtrMemberAccess	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879165	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879166	Callee	d -> windowInfo		878703	0					
ANR	879167	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879168	Identifier	d		878703	0					
ANR	879169	Identifier	windowInfo		878703	1					
ANR	879170	ArgumentList	window		878703	1					
ANR	879171	Argument	window		878703	0					
ANR	879172	Identifier	window		878703	0					
ANR	879173	Identifier	hasState		878703	1					
ANR	879174	ArgumentList	NET :: KeepBelow		878703	1					
ANR	879175	Argument	NET :: KeepBelow		878703	0					
ANR	879176	Identifier	NET :: KeepBelow		878703	0					
ANR	879177	ElseStatement	else		878703	0					
ANR	879178	IfStatement	if ( role == IsFullScreenable )		878703	0					
ANR	879179	Condition	role == IsFullScreenable	871:15:31706:31729	878703	0	True				
ANR	879180	EqualityExpression	role == IsFullScreenable		878703	0		==			
ANR	879181	Identifier	role		878703	0					
ANR	879182	Identifier	IsFullScreenable		878703	1					
ANR	879183	CompoundStatement		51:41:2189:2189	878703	1					
ANR	879184	ReturnStatement	return d -> windowInfo ( window ) -> actionSupported ( NET :: ActionFullScreen ) ;	872:8:31742:31810	878703	0	True				
ANR	879185	CallExpression	d -> windowInfo ( window ) -> actionSupported ( NET :: ActionFullScreen )		878703	0					
ANR	879186	Callee	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879187	PtrMemberAccess	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879188	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879189	Callee	d -> windowInfo		878703	0					
ANR	879190	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879191	Identifier	d		878703	0					
ANR	879192	Identifier	windowInfo		878703	1					
ANR	879193	ArgumentList	window		878703	1					
ANR	879194	Argument	window		878703	0					
ANR	879195	Identifier	window		878703	0					
ANR	879196	Identifier	actionSupported		878703	1					
ANR	879197	ArgumentList	NET :: ActionFullScreen		878703	1					
ANR	879198	Argument	NET :: ActionFullScreen		878703	0					
ANR	879199	Identifier	NET :: ActionFullScreen		878703	0					
ANR	879200	ElseStatement	else		878703	0					
ANR	879201	IfStatement	if ( role == IsFullScreen )		878703	0					
ANR	879202	Condition	role == IsFullScreen	873:15:31827:31846	878703	0	True				
ANR	879203	EqualityExpression	role == IsFullScreen		878703	0		==			
ANR	879204	Identifier	role		878703	0					
ANR	879205	Identifier	IsFullScreen		878703	1					
ANR	879206	CompoundStatement		53:37:2306:2306	878703	1					
ANR	879207	ReturnStatement	return d -> windowInfo ( window ) -> hasState ( NET :: FullScreen ) ;	874:8:31859:31914	878703	0	True				
ANR	879208	CallExpression	d -> windowInfo ( window ) -> hasState ( NET :: FullScreen )		878703	0					
ANR	879209	Callee	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879210	PtrMemberAccess	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879211	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879212	Callee	d -> windowInfo		878703	0					
ANR	879213	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879214	Identifier	d		878703	0					
ANR	879215	Identifier	windowInfo		878703	1					
ANR	879216	ArgumentList	window		878703	1					
ANR	879217	Argument	window		878703	0					
ANR	879218	Identifier	window		878703	0					
ANR	879219	Identifier	hasState		878703	1					
ANR	879220	ArgumentList	NET :: FullScreen		878703	1					
ANR	879221	Argument	NET :: FullScreen		878703	0					
ANR	879222	Identifier	NET :: FullScreen		878703	0					
ANR	879223	ElseStatement	else		878703	0					
ANR	879224	IfStatement	if ( role == IsShadeable )		878703	0					
ANR	879225	Condition	role == IsShadeable	875:15:31931:31949	878703	0	True				
ANR	879226	EqualityExpression	role == IsShadeable		878703	0		==			
ANR	879227	Identifier	role		878703	0					
ANR	879228	Identifier	IsShadeable		878703	1					
ANR	879229	CompoundStatement		55:36:2409:2409	878703	1					
ANR	879230	ReturnStatement	return d -> windowInfo ( window ) -> actionSupported ( NET :: ActionShade ) ;	876:8:31962:32025	878703	0	True				
ANR	879231	CallExpression	d -> windowInfo ( window ) -> actionSupported ( NET :: ActionShade )		878703	0					
ANR	879232	Callee	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879233	PtrMemberAccess	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879234	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879235	Callee	d -> windowInfo		878703	0					
ANR	879236	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879237	Identifier	d		878703	0					
ANR	879238	Identifier	windowInfo		878703	1					
ANR	879239	ArgumentList	window		878703	1					
ANR	879240	Argument	window		878703	0					
ANR	879241	Identifier	window		878703	0					
ANR	879242	Identifier	actionSupported		878703	1					
ANR	879243	ArgumentList	NET :: ActionShade		878703	1					
ANR	879244	Argument	NET :: ActionShade		878703	0					
ANR	879245	Identifier	NET :: ActionShade		878703	0					
ANR	879246	ElseStatement	else		878703	0					
ANR	879247	IfStatement	if ( role == IsShaded )		878703	0					
ANR	879248	Condition	role == IsShaded	877:15:32042:32057	878703	0	True				
ANR	879249	EqualityExpression	role == IsShaded		878703	0		==			
ANR	879250	Identifier	role		878703	0					
ANR	879251	Identifier	IsShaded		878703	1					
ANR	879252	CompoundStatement		57:33:2517:2517	878703	1					
ANR	879253	ReturnStatement	return d -> windowInfo ( window ) -> hasState ( NET :: Shaded ) ;	878:8:32070:32121	878703	0	True				
ANR	879254	CallExpression	d -> windowInfo ( window ) -> hasState ( NET :: Shaded )		878703	0					
ANR	879255	Callee	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879256	PtrMemberAccess	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879257	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879258	Callee	d -> windowInfo		878703	0					
ANR	879259	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879260	Identifier	d		878703	0					
ANR	879261	Identifier	windowInfo		878703	1					
ANR	879262	ArgumentList	window		878703	1					
ANR	879263	Argument	window		878703	0					
ANR	879264	Identifier	window		878703	0					
ANR	879265	Identifier	hasState		878703	1					
ANR	879266	ArgumentList	NET :: Shaded		878703	1					
ANR	879267	Argument	NET :: Shaded		878703	0					
ANR	879268	Identifier	NET :: Shaded		878703	0					
ANR	879269	ElseStatement	else		878703	0					
ANR	879270	IfStatement	if ( role == IsVirtualDesktopChangeable )		878703	0					
ANR	879271	Condition	role == IsVirtualDesktopChangeable	879:15:32138:32171	878703	0	True				
ANR	879272	EqualityExpression	role == IsVirtualDesktopChangeable		878703	0		==			
ANR	879273	Identifier	role		878703	0					
ANR	879274	Identifier	IsVirtualDesktopChangeable		878703	1					
ANR	879275	CompoundStatement		59:51:2631:2631	878703	1					
ANR	879276	ReturnStatement	return d -> windowInfo ( window ) -> actionSupported ( NET :: ActionChangeDesktop ) ;	880:8:32184:32255	878703	0	True				
ANR	879277	CallExpression	d -> windowInfo ( window ) -> actionSupported ( NET :: ActionChangeDesktop )		878703	0					
ANR	879278	Callee	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879279	PtrMemberAccess	d -> windowInfo ( window ) -> actionSupported		878703	0					
ANR	879280	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879281	Callee	d -> windowInfo		878703	0					
ANR	879282	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879283	Identifier	d		878703	0					
ANR	879284	Identifier	windowInfo		878703	1					
ANR	879285	ArgumentList	window		878703	1					
ANR	879286	Argument	window		878703	0					
ANR	879287	Identifier	window		878703	0					
ANR	879288	Identifier	actionSupported		878703	1					
ANR	879289	ArgumentList	NET :: ActionChangeDesktop		878703	1					
ANR	879290	Argument	NET :: ActionChangeDesktop		878703	0					
ANR	879291	Identifier	NET :: ActionChangeDesktop		878703	0					
ANR	879292	ElseStatement	else		878703	0					
ANR	879293	IfStatement	if ( role == VirtualDesktop )		878703	0					
ANR	879294	Condition	role == VirtualDesktop	881:15:32272:32293	878703	0	True				
ANR	879295	EqualityExpression	role == VirtualDesktop		878703	0		==			
ANR	879296	Identifier	role		878703	0					
ANR	879297	Identifier	VirtualDesktop		878703	1					
ANR	879298	CompoundStatement		61:39:2753:2753	878703	1					
ANR	879299	ReturnStatement	return d -> windowInfo ( window ) -> desktop ( ) ;	882:8:32306:32345	878703	0	True				
ANR	879300	CallExpression	d -> windowInfo ( window ) -> desktop ( )		878703	0					
ANR	879301	Callee	d -> windowInfo ( window ) -> desktop		878703	0					
ANR	879302	PtrMemberAccess	d -> windowInfo ( window ) -> desktop		878703	0					
ANR	879303	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879304	Callee	d -> windowInfo		878703	0					
ANR	879305	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879306	Identifier	d		878703	0					
ANR	879307	Identifier	windowInfo		878703	1					
ANR	879308	ArgumentList	window		878703	1					
ANR	879309	Argument	window		878703	0					
ANR	879310	Identifier	window		878703	0					
ANR	879311	Identifier	desktop		878703	1					
ANR	879312	ArgumentList			878703	1					
ANR	879313	ElseStatement	else		878703	0					
ANR	879314	IfStatement	if ( role == IsOnAllVirtualDesktops )		878703	0					
ANR	879315	Condition	role == IsOnAllVirtualDesktops	883:15:32362:32391	878703	0	True				
ANR	879316	EqualityExpression	role == IsOnAllVirtualDesktops		878703	0		==			
ANR	879317	Identifier	role		878703	0					
ANR	879318	Identifier	IsOnAllVirtualDesktops		878703	1					
ANR	879319	CompoundStatement		63:47:2851:2851	878703	1					
ANR	879320	ReturnStatement	return d -> windowInfo ( window ) -> onAllDesktops ( ) ;	884:8:32404:32449	878703	0	True				
ANR	879321	CallExpression	d -> windowInfo ( window ) -> onAllDesktops ( )		878703	0					
ANR	879322	Callee	d -> windowInfo ( window ) -> onAllDesktops		878703	0					
ANR	879323	PtrMemberAccess	d -> windowInfo ( window ) -> onAllDesktops		878703	0					
ANR	879324	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879325	Callee	d -> windowInfo		878703	0					
ANR	879326	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879327	Identifier	d		878703	0					
ANR	879328	Identifier	windowInfo		878703	1					
ANR	879329	ArgumentList	window		878703	1					
ANR	879330	Argument	window		878703	0					
ANR	879331	Identifier	window		878703	0					
ANR	879332	Identifier	onAllDesktops		878703	1					
ANR	879333	ArgumentList			878703	1					
ANR	879334	ElseStatement	else		878703	0					
ANR	879335	IfStatement	if ( role == Geometry )		878703	0					
ANR	879336	Condition	role == Geometry	885:15:32466:32481	878703	0	True				
ANR	879337	EqualityExpression	role == Geometry		878703	0		==			
ANR	879338	Identifier	role		878703	0					
ANR	879339	Identifier	Geometry		878703	1					
ANR	879340	CompoundStatement		65:33:2941:2941	878703	1					
ANR	879341	ReturnStatement	return d -> windowInfo ( window ) -> frameGeometry ( ) ;	886:8:32494:32539	878703	0	True				
ANR	879342	CallExpression	d -> windowInfo ( window ) -> frameGeometry ( )		878703	0					
ANR	879343	Callee	d -> windowInfo ( window ) -> frameGeometry		878703	0					
ANR	879344	PtrMemberAccess	d -> windowInfo ( window ) -> frameGeometry		878703	0					
ANR	879345	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879346	Callee	d -> windowInfo		878703	0					
ANR	879347	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879348	Identifier	d		878703	0					
ANR	879349	Identifier	windowInfo		878703	1					
ANR	879350	ArgumentList	window		878703	1					
ANR	879351	Argument	window		878703	0					
ANR	879352	Identifier	window		878703	0					
ANR	879353	Identifier	frameGeometry		878703	1					
ANR	879354	ArgumentList			878703	1					
ANR	879355	ElseStatement	else		878703	0					
ANR	879356	IfStatement	if ( role == ScreenGeometry )		878703	0					
ANR	879357	Condition	role == ScreenGeometry	887:15:32556:32577	878703	0	True				
ANR	879358	EqualityExpression	role == ScreenGeometry		878703	0		==			
ANR	879359	Identifier	role		878703	0					
ANR	879360	Identifier	ScreenGeometry		878703	1					
ANR	879361	CompoundStatement		67:39:3037:3037	878703	1					
ANR	879362	ReturnStatement	return screenGeometry ( d -> windowInfo ( window ) -> frameGeometry ( ) . center ( ) ) ;	888:8:32590:32660	878703	0	True				
ANR	879363	CallExpression	screenGeometry ( d -> windowInfo ( window ) -> frameGeometry ( ) . center ( ) )		878703	0					
ANR	879364	Callee	screenGeometry		878703	0					
ANR	879365	Identifier	screenGeometry		878703	0					
ANR	879366	ArgumentList	d -> windowInfo ( window ) -> frameGeometry ( ) . center ( )		878703	1					
ANR	879367	Argument	d -> windowInfo ( window ) -> frameGeometry ( ) . center ( )		878703	0					
ANR	879368	CallExpression	d -> windowInfo ( window ) -> frameGeometry ( ) . center ( )		878703	0					
ANR	879369	Callee	d -> windowInfo ( window ) -> frameGeometry ( ) . center		878703	0					
ANR	879370	MemberAccess	d -> windowInfo ( window ) -> frameGeometry ( ) . center		878703	0					
ANR	879371	CallExpression	d -> windowInfo ( window ) -> frameGeometry ( )		878703	0					
ANR	879372	Callee	d -> windowInfo ( window ) -> frameGeometry		878703	0					
ANR	879373	PtrMemberAccess	d -> windowInfo ( window ) -> frameGeometry		878703	0					
ANR	879374	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879375	Callee	d -> windowInfo		878703	0					
ANR	879376	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879377	Identifier	d		878703	0					
ANR	879378	Identifier	windowInfo		878703	1					
ANR	879379	ArgumentList	window		878703	1					
ANR	879380	Argument	window		878703	0					
ANR	879381	Identifier	window		878703	0					
ANR	879382	Identifier	frameGeometry		878703	1					
ANR	879383	ArgumentList			878703	1					
ANR	879384	Identifier	center		878703	1					
ANR	879385	ArgumentList			878703	1					
ANR	879386	ElseStatement	else		878703	0					
ANR	879387	IfStatement	if ( role == Activities )		878703	0					
ANR	879388	Condition	role == Activities	889:15:32677:32694	878703	0	True				
ANR	879389	EqualityExpression	role == Activities		878703	0		==			
ANR	879390	Identifier	role		878703	0					
ANR	879391	Identifier	Activities		878703	1					
ANR	879392	CompoundStatement		69:35:3154:3154	878703	1					
ANR	879393	ReturnStatement	return d -> activities ( window ) ;	890:8:32707:32735	878703	0	True				
ANR	879394	CallExpression	d -> activities ( window )		878703	0					
ANR	879395	Callee	d -> activities		878703	0					
ANR	879396	PtrMemberAccess	d -> activities		878703	0					
ANR	879397	Identifier	d		878703	0					
ANR	879398	Identifier	activities		878703	1					
ANR	879399	ArgumentList	window		878703	1					
ANR	879400	Argument	window		878703	0					
ANR	879401	Identifier	window		878703	0					
ANR	879402	ElseStatement	else		878703	0					
ANR	879403	IfStatement	if ( role == IsDemandingAttention )		878703	0					
ANR	879404	Condition	role == IsDemandingAttention	891:15:32752:32779	878703	0	True				
ANR	879405	EqualityExpression	role == IsDemandingAttention		878703	0		==			
ANR	879406	Identifier	role		878703	0					
ANR	879407	Identifier	IsDemandingAttention		878703	1					
ANR	879408	CompoundStatement		71:45:3239:3239	878703	1					
ANR	879409	ReturnStatement	return d -> demandsAttention ( window ) ;	892:8:32792:32826	878703	0	True				
ANR	879410	CallExpression	d -> demandsAttention ( window )		878703	0					
ANR	879411	Callee	d -> demandsAttention		878703	0					
ANR	879412	PtrMemberAccess	d -> demandsAttention		878703	0					
ANR	879413	Identifier	d		878703	0					
ANR	879414	Identifier	demandsAttention		878703	1					
ANR	879415	ArgumentList	window		878703	1					
ANR	879416	Argument	window		878703	0					
ANR	879417	Identifier	window		878703	0					
ANR	879418	ElseStatement	else		878703	0					
ANR	879419	IfStatement	if ( role == SkipTaskbar )		878703	0					
ANR	879420	Condition	role == SkipTaskbar	893:15:32843:32861	878703	0	True				
ANR	879421	EqualityExpression	role == SkipTaskbar		878703	0		==			
ANR	879422	Identifier	role		878703	0					
ANR	879423	Identifier	SkipTaskbar		878703	1					
ANR	879424	CompoundStatement		74:8:3331:3378	878703	1					
ANR	879425	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	894:8:32874:32921	878703	0	True				
ANR	879426	IdentifierDecl	* info = d -> windowInfo ( window )		878703	0					
ANR	879427	IdentifierDeclType	const KWindowInfo *		878703	0					
ANR	879428	Identifier	info		878703	1					
ANR	879429	AssignmentExpression	* info = d -> windowInfo ( window )		878703	2		=			
ANR	879430	Identifier	info		878703	0					
ANR	879431	CallExpression	d -> windowInfo ( window )		878703	1					
ANR	879432	Callee	d -> windowInfo		878703	0					
ANR	879433	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879434	Identifier	d		878703	0					
ANR	879435	Identifier	windowInfo		878703	1					
ANR	879436	ArgumentList	window		878703	1					
ANR	879437	Argument	window		878703	0					
ANR	879438	Identifier	window		878703	0					
ANR	879439	ReturnStatement	return ( info -> hasState ( NET :: SkipTaskbar ) || info -> windowType ( NET :: UtilityMask ) == NET :: Utility ) ;	897:8:33058:33153	878703	1	True				
ANR	879440	OrExpression	info -> hasState ( NET :: SkipTaskbar ) || info -> windowType ( NET :: UtilityMask ) == NET :: Utility		878703	0		||			
ANR	879441	CallExpression	info -> hasState ( NET :: SkipTaskbar )		878703	0					
ANR	879442	Callee	info -> hasState		878703	0					
ANR	879443	PtrMemberAccess	info -> hasState		878703	0					
ANR	879444	Identifier	info		878703	0					
ANR	879445	Identifier	hasState		878703	1					
ANR	879446	ArgumentList	NET :: SkipTaskbar		878703	1					
ANR	879447	Argument	NET :: SkipTaskbar		878703	0					
ANR	879448	Identifier	NET :: SkipTaskbar		878703	0					
ANR	879449	EqualityExpression	info -> windowType ( NET :: UtilityMask ) == NET :: Utility		878703	1		==			
ANR	879450	CallExpression	info -> windowType ( NET :: UtilityMask )		878703	0					
ANR	879451	Callee	info -> windowType		878703	0					
ANR	879452	PtrMemberAccess	info -> windowType		878703	0					
ANR	879453	Identifier	info		878703	0					
ANR	879454	Identifier	windowType		878703	1					
ANR	879455	ArgumentList	NET :: UtilityMask		878703	1					
ANR	879456	Argument	NET :: UtilityMask		878703	0					
ANR	879457	Identifier	NET :: UtilityMask		878703	0					
ANR	879458	Identifier	NET :: Utility		878703	1					
ANR	879459	ElseStatement	else		878703	0					
ANR	879460	IfStatement	if ( role == SkipPager )		878703	0					
ANR	879461	Condition	role == SkipPager	898:15:33170:33186	878703	0	True				
ANR	879462	EqualityExpression	role == SkipPager		878703	0		==			
ANR	879463	Identifier	role		878703	0					
ANR	879464	Identifier	SkipPager		878703	1					
ANR	879465	CompoundStatement		78:34:3646:3646	878703	1					
ANR	879466	ReturnStatement	return d -> windowInfo ( window ) -> hasState ( NET :: SkipPager ) ;	899:8:33199:33253	878703	0	True				
ANR	879467	CallExpression	d -> windowInfo ( window ) -> hasState ( NET :: SkipPager )		878703	0					
ANR	879468	Callee	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879469	PtrMemberAccess	d -> windowInfo ( window ) -> hasState		878703	0					
ANR	879470	CallExpression	d -> windowInfo ( window )		878703	0					
ANR	879471	Callee	d -> windowInfo		878703	0					
ANR	879472	PtrMemberAccess	d -> windowInfo		878703	0					
ANR	879473	Identifier	d		878703	0					
ANR	879474	Identifier	windowInfo		878703	1					
ANR	879475	ArgumentList	window		878703	1					
ANR	879476	Argument	window		878703	0					
ANR	879477	Identifier	window		878703	0					
ANR	879478	Identifier	hasState		878703	1					
ANR	879479	ArgumentList	NET :: SkipPager		878703	1					
ANR	879480	Argument	NET :: SkipPager		878703	0					
ANR	879481	Identifier	NET :: SkipPager		878703	0					
ANR	879482	ReturnStatement	return QVariant ( ) ;	902:4:33266:33283	878703	3	True				
ANR	879483	CallExpression	QVariant ( )		878703	0					
ANR	879484	Callee	QVariant		878703	0					
ANR	879485	Identifier	QVariant		878703	0					
ANR	879486	ArgumentList			878703	1					
ANR	879487	ReturnType	QVariant		878703	1					
ANR	879488	Identifier	XWindowTasksModel :: data		878703	2					
ANR	879489	ParameterList	"const QModelIndex & index , int role"		878703	3					
ANR	879490	Parameter	const QModelIndex & index	820:33:29500:29523	878703	0	True				
ANR	879491	ParameterType	const QModelIndex &		878703	0					
ANR	879492	Identifier	index		878703	1					
ANR	879493	Parameter	int role	820:59:29526:29533	878703	1	True				
ANR	879494	ParameterType	int		878703	0					
ANR	879495	Identifier	role		878703	1					
ANR	879496	CFGEntryNode	ENTRY		878703		True				
ANR	879497	CFGExitNode	EXIT		878703		True				
ANR	879498	Symbol	NET :: Utility		878703						
ANR	879499	Symbol	d -> activeWindow		878703						
ANR	879500	Symbol	IsMaximized		878703						
ANR	879501	Symbol	d -> windowInfo ( window ) -> frameGeometry ( ) . center		878703						
ANR	879502	Symbol	LauncherUrl		878703						
ANR	879503	Symbol	IsFullScreenable		878703						
ANR	879504	Symbol	SkipPager		878703						
ANR	879505	Symbol	d -> launcherUrl		878703						
ANR	879506	Symbol	NET :: ActionClose		878703						
ANR	879507	Symbol	d -> windowInfo ( window ) -> desktop		878703						
ANR	879508	Symbol	GenericName		878703						
ANR	879509	Symbol	d -> mimeType		878703						
ANR	879510	Symbol	d -> windowInfo ( window ) -> frameGeometry		878703						
ANR	879511	Symbol	LauncherUrlWithoutIcon		878703						
ANR	879512	Symbol	& window		878703						
ANR	879513	Symbol	index . row		878703						
ANR	879514	Symbol	QVariantList		878703						
ANR	879515	Symbol	screenGeometry		878703						
ANR	879516	Symbol	d -> windows . at		878703						
ANR	879517	Symbol	info		878703						
ANR	879518	Symbol	NET :: MaxVert		878703						
ANR	879519	Symbol	IsKeepAbove		878703						
ANR	879520	Symbol	IsShadeable		878703						
ANR	879521	Symbol	QByteArray		878703						
ANR	879522	Symbol	NET :: ActionMinimize		878703						
ANR	879523	Symbol	NET :: ActionFullScreen		878703						
ANR	879524	Symbol	* * d		878703						
ANR	879525	Symbol	NET :: ActionChangeDesktop		878703						
ANR	879526	Symbol	IsDemandingAttention		878703						
ANR	879527	Symbol	NET :: MaxHoriz		878703						
ANR	879528	Symbol	NET :: Shaded		878703						
ANR	879529	Symbol	index		878703						
ANR	879530	Symbol	NET :: ActionMax		878703						
ANR	879531	Symbol	IsMinimized		878703						
ANR	879532	Symbol	NET :: SkipPager		878703						
ANR	879533	Symbol	d -> activities		878703						
ANR	879534	Symbol	VirtualDesktop		878703						
ANR	879535	Symbol	ScreenGeometry		878703						
ANR	879536	Symbol	AppId		878703						
ANR	879537	Symbol	d -> windowInfo ( window ) -> isMinimized		878703						
ANR	879538	Symbol	d -> appData ( window ) . id		878703						
ANR	879539	Symbol	true		878703						
ANR	879540	Symbol	IsMinimizable		878703						
ANR	879541	Symbol	IsMaximizable		878703						
ANR	879542	Symbol	d -> windowInfo ( window ) -> onAllDesktops		878703						
ANR	879543	Symbol	NET :: ActionMove		878703						
ANR	879544	Symbol	d -> appData ( window ) . name		878703						
ANR	879545	Symbol	IsOnAllVirtualDesktops		878703						
ANR	879546	Symbol	d -> windowInfo ( window ) -> hasState		878703						
ANR	879547	Symbol	role		878703						
ANR	879548	Symbol	d -> windowInfo		878703						
ANR	879549	Symbol	IsMovable		878703						
ANR	879550	Symbol	MimeData		878703						
ANR	879551	Symbol	IsActive		878703						
ANR	879552	Symbol	IsWindow		878703						
ANR	879553	Symbol	index . isValid		878703						
ANR	879554	Symbol	SkipTaskbar		878703						
ANR	879555	Symbol	d -> windows . count		878703						
ANR	879556	Symbol	NET :: KeepBelow		878703						
ANR	879557	Symbol	MimeType		878703						
ANR	879558	Symbol	AppName		878703						
ANR	879559	Symbol	NET :: ActionShade		878703						
ANR	879560	Symbol	info -> windowType		878703						
ANR	879561	Symbol	Qt :: DisplayRole		878703						
ANR	879562	Symbol	NET :: ActionResize		878703						
ANR	879563	Symbol	d -> icon		878703						
ANR	879564	Symbol	d -> windowInfo ( window ) -> visibleName		878703						
ANR	879565	Symbol	d -> windows		878703						
ANR	879566	Symbol	NET :: SkipTaskbar		878703						
ANR	879567	Symbol	IsKeepBelow		878703						
ANR	879568	Symbol	QVariant		878703						
ANR	879569	Symbol	Activities		878703						
ANR	879570	Symbol	Qt :: DecorationRole		878703						
ANR	879571	Symbol	d		878703						
ANR	879572	Symbol	NET :: UtilityMask		878703						
ANR	879573	Symbol	false		878703						
ANR	879574	Symbol	d -> demandsAttention		878703						
ANR	879575	Symbol	IsShaded		878703						
ANR	879576	Symbol	* d		878703						
ANR	879577	Symbol	NET :: FullScreen		878703						
ANR	879578	Symbol	IsFullScreen		878703						
ANR	879579	Symbol	info -> hasState		878703						
ANR	879580	Symbol	Geometry		878703						
ANR	879581	Symbol	d -> windowInfo ( window ) -> actionSupported		878703						
ANR	879582	Symbol	IsResizable		878703						
ANR	879583	Symbol	NET :: StaysOnTop		878703						
ANR	879584	Symbol	* d -> windowInfo		878703						
ANR	879585	Symbol	LegacyWinIdList		878703						
ANR	879586	Symbol	d -> appData		878703						
ANR	879587	Symbol	IsVirtualDesktopChangeable		878703						
ANR	879588	Symbol	window		878703						
ANR	879589	Symbol	IsClosable		878703						
ANR	879590	Symbol	* info		878703						
ANR	879591	Symbol	d -> appData ( window ) . genericName		878703						
ANR	879592	Function	XWindowTasksModel :: rowCount	905:0:33288:33409							
ANR	879593	FunctionDef	XWindowTasksModel :: rowCount (const QModelIndex & parent)		879592	0					
ANR	879594	CompoundStatement		906:0:33353:33409	879592	0					
ANR	879595	ReturnStatement	return parent . isValid ( ) ? 0 : d -> windows . count ( ) ;	907:4:33359:33407	879592	0	True				
ANR	879596	ConditionalExpression	parent . isValid ( ) ? 0 : d -> windows . count ( )		879592	0					
ANR	879597	Condition	parent . isValid ( )		879592	0					
ANR	879598	CallExpression	parent . isValid ( )		879592	0					
ANR	879599	Callee	parent . isValid		879592	0					
ANR	879600	MemberAccess	parent . isValid		879592	0					
ANR	879601	Identifier	parent		879592	0					
ANR	879602	Identifier	isValid		879592	1					
ANR	879603	ArgumentList			879592	1					
ANR	879604	PrimaryExpression	0		879592	1					
ANR	879605	CallExpression	d -> windows . count ( )		879592	2					
ANR	879606	Callee	d -> windows . count		879592	0					
ANR	879607	MemberAccess	d -> windows . count		879592	0					
ANR	879608	PtrMemberAccess	d -> windows		879592	0					
ANR	879609	Identifier	d		879592	0					
ANR	879610	Identifier	windows		879592	1					
ANR	879611	Identifier	count		879592	1					
ANR	879612	ArgumentList			879592	1					
ANR	879613	ReturnType	int		879592	1					
ANR	879614	Identifier	XWindowTasksModel :: rowCount		879592	2					
ANR	879615	ParameterList	const QModelIndex & parent		879592	3					
ANR	879616	Parameter	const QModelIndex & parent	905:32:33320:33344	879592	0	True				
ANR	879617	ParameterType	const QModelIndex &		879592	0					
ANR	879618	Identifier	parent		879592	1					
ANR	879619	CFGEntryNode	ENTRY		879592		True				
ANR	879620	CFGExitNode	EXIT		879592		True				
ANR	879621	Symbol	parent		879592						
ANR	879622	Symbol	d		879592						
ANR	879623	Symbol	d -> windows		879592						
ANR	879624	Symbol	d -> windows . count		879592						
ANR	879625	Symbol	parent . isValid		879592						
ANR	879626	Symbol	* d		879592						
ANR	879627	Function	XWindowTasksModel :: requestActivate	910:0:33412:34884							
ANR	879628	FunctionDef	XWindowTasksModel :: requestActivate (const QModelIndex & index)		879627	0					
ANR	879629	CompoundStatement		911:0:33478:34884	879627	0					
ANR	879630	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		879627	0					
ANR	879631	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	912:8:33488:33584	879627	0	True				
ANR	879632	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		879627	0		||			
ANR	879633	UnaryOperationExpression	! index . isValid ( )		879627	0					
ANR	879634	UnaryOperator	!		879627	0					
ANR	879635	CallExpression	index . isValid ( )		879627	1					
ANR	879636	Callee	index . isValid		879627	0					
ANR	879637	MemberAccess	index . isValid		879627	0					
ANR	879638	Identifier	index		879627	0					
ANR	879639	Identifier	isValid		879627	1					
ANR	879640	ArgumentList			879627	1					
ANR	879641	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		879627	1		||			
ANR	879642	EqualityExpression	index . model ( ) != this		879627	0		!=			
ANR	879643	CallExpression	index . model ( )		879627	0					
ANR	879644	Callee	index . model		879627	0					
ANR	879645	MemberAccess	index . model		879627	0					
ANR	879646	Identifier	index		879627	0					
ANR	879647	Identifier	model		879627	1					
ANR	879648	ArgumentList			879627	1					
ANR	879649	Identifier	this		879627	1					
ANR	879650	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		879627	1		||			
ANR	879651	RelationalExpression	index . row ( ) < 0		879627	0		<			
ANR	879652	CallExpression	index . row ( )		879627	0					
ANR	879653	Callee	index . row		879627	0					
ANR	879654	MemberAccess	index . row		879627	0					
ANR	879655	Identifier	index		879627	0					
ANR	879656	Identifier	row		879627	1					
ANR	879657	ArgumentList			879627	1					
ANR	879658	PrimaryExpression	0		879627	1					
ANR	879659	RelationalExpression	index . row ( ) >= d -> windows . count ( )		879627	1		>=			
ANR	879660	CallExpression	index . row ( )		879627	0					
ANR	879661	Callee	index . row		879627	0					
ANR	879662	MemberAccess	index . row		879627	0					
ANR	879663	Identifier	index		879627	0					
ANR	879664	Identifier	row		879627	1					
ANR	879665	ArgumentList			879627	1					
ANR	879666	CallExpression	d -> windows . count ( )		879627	1					
ANR	879667	Callee	d -> windows . count		879627	0					
ANR	879668	MemberAccess	d -> windows . count		879627	0					
ANR	879669	PtrMemberAccess	d -> windows		879627	0					
ANR	879670	Identifier	d		879627	0					
ANR	879671	Identifier	windows		879627	1					
ANR	879672	Identifier	count		879627	1					
ANR	879673	ArgumentList			879627	1					
ANR	879674	CompoundStatement		2:107:108:108	879627	1					
ANR	879675	ReturnStatement	return ;	913:8:33597:33603	879627	0	True				
ANR	879676	IfStatement	if ( index . row ( ) >= 0 && index . row ( ) < d -> windows . count ( ) )		879627	1					
ANR	879677	Condition	index . row ( ) >= 0 && index . row ( ) < d -> windows . count ( )	916:8:33620:33671	879627	0	True				
ANR	879678	AndExpression	index . row ( ) >= 0 && index . row ( ) < d -> windows . count ( )		879627	0		&&			
ANR	879679	RelationalExpression	index . row ( ) >= 0		879627	0		>=			
ANR	879680	CallExpression	index . row ( )		879627	0					
ANR	879681	Callee	index . row		879627	0					
ANR	879682	MemberAccess	index . row		879627	0					
ANR	879683	Identifier	index		879627	0					
ANR	879684	Identifier	row		879627	1					
ANR	879685	ArgumentList			879627	1					
ANR	879686	PrimaryExpression	0		879627	1					
ANR	879687	RelationalExpression	index . row ( ) < d -> windows . count ( )		879627	1		<			
ANR	879688	CallExpression	index . row ( )		879627	0					
ANR	879689	Callee	index . row		879627	0					
ANR	879690	MemberAccess	index . row		879627	0					
ANR	879691	Identifier	index		879627	0					
ANR	879692	Identifier	row		879627	1					
ANR	879693	ArgumentList			879627	1					
ANR	879694	CallExpression	d -> windows . count ( )		879627	1					
ANR	879695	Callee	d -> windows . count		879627	0					
ANR	879696	MemberAccess	d -> windows . count		879627	0					
ANR	879697	PtrMemberAccess	d -> windows		879627	0					
ANR	879698	Identifier	d		879627	0					
ANR	879699	Identifier	windows		879627	1					
ANR	879700	Identifier	count		879627	1					
ANR	879701	ArgumentList			879627	1					
ANR	879702	CompoundStatement		7:8:205:244	879627	1					
ANR	879703	IdentifierDeclStatement	WId window = d -> windows . at ( index . row ( ) ) ;	917:8:33684:33723	879627	0	True				
ANR	879704	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		879627	0					
ANR	879705	IdentifierDeclType	WId		879627	0					
ANR	879706	Identifier	window		879627	1					
ANR	879707	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		879627	2		=			
ANR	879708	Identifier	window		879627	0					
ANR	879709	CallExpression	d -> windows . at ( index . row ( ) )		879627	1					
ANR	879710	Callee	d -> windows . at		879627	0					
ANR	879711	MemberAccess	d -> windows . at		879627	0					
ANR	879712	PtrMemberAccess	d -> windows		879627	0					
ANR	879713	Identifier	d		879627	0					
ANR	879714	Identifier	windows		879627	1					
ANR	879715	Identifier	at		879627	1					
ANR	879716	ArgumentList	index . row ( )		879627	1					
ANR	879717	Argument	index . row ( )		879627	0					
ANR	879718	CallExpression	index . row ( )		879627	0					
ANR	879719	Callee	index . row		879627	0					
ANR	879720	MemberAccess	index . row		879627	0					
ANR	879721	Identifier	index		879627	0					
ANR	879722	Identifier	row		879627	1					
ANR	879723	ArgumentList			879627	1					
ANR	879724	IfStatement	if ( d -> transientsDemandingAttention . contains ( window ) )		879627	1					
ANR	879725	Condition	d -> transientsDemandingAttention . contains ( window )	920:12:33797:33844	879627	0	True				
ANR	879726	CallExpression	d -> transientsDemandingAttention . contains ( window )		879627	0					
ANR	879727	Callee	d -> transientsDemandingAttention . contains		879627	0					
ANR	879728	MemberAccess	d -> transientsDemandingAttention . contains		879627	0					
ANR	879729	PtrMemberAccess	d -> transientsDemandingAttention		879627	0					
ANR	879730	Identifier	d		879627	0					
ANR	879731	Identifier	transientsDemandingAttention		879627	1					
ANR	879732	Identifier	contains		879627	1					
ANR	879733	ArgumentList	window		879627	1					
ANR	879734	Argument	window		879627	0					
ANR	879735	Identifier	window		879627	0					
ANR	879736	CompoundStatement		10:62:368:368	879627	1					
ANR	879737	ExpressionStatement	window = d -> transientsDemandingAttention . value ( window )	921:12:33861:33915	879627	0	True				
ANR	879738	AssignmentExpression	window = d -> transientsDemandingAttention . value ( window )		879627	0		=			
ANR	879739	Identifier	window		879627	0					
ANR	879740	CallExpression	d -> transientsDemandingAttention . value ( window )		879627	1					
ANR	879741	Callee	d -> transientsDemandingAttention . value		879627	0					
ANR	879742	MemberAccess	d -> transientsDemandingAttention . value		879627	0					
ANR	879743	PtrMemberAccess	d -> transientsDemandingAttention		879627	0					
ANR	879744	Identifier	d		879627	0					
ANR	879745	Identifier	transientsDemandingAttention		879627	1					
ANR	879746	Identifier	value		879627	1					
ANR	879747	ArgumentList	window		879627	1					
ANR	879748	Argument	window		879627	0					
ANR	879749	Identifier	window		879627	0					
ANR	879750	ElseStatement	else		879627	0					
ANR	879751	IfStatement	if ( ! d -> transients . isEmpty ( ) )		879627	0					
ANR	879752	Condition	! d -> transients . isEmpty ( )	928:19:34446:34469	879627	0	True				
ANR	879753	UnaryOperationExpression	! d -> transients . isEmpty ( )		879627	0					
ANR	879754	UnaryOperator	!		879627	0					
ANR	879755	CallExpression	d -> transients . isEmpty ( )		879627	1					
ANR	879756	Callee	d -> transients . isEmpty		879627	0					
ANR	879757	MemberAccess	d -> transients . isEmpty		879627	0					
ANR	879758	PtrMemberAccess	d -> transients		879627	0					
ANR	879759	Identifier	d		879627	0					
ANR	879760	Identifier	transients		879627	1					
ANR	879761	Identifier	isEmpty		879627	1					
ANR	879762	ArgumentList			879627	1					
ANR	879763	CompoundStatement		18:45:993:993	879627	1					
ANR	879764	Statement	foreach	929:12:34486:34492	879627	0	True				
ANR	879765	Statement	(	929:20:34494:34494	879627	1	True				
ANR	879766	Statement	const	929:21:34495:34499	879627	2	True				
ANR	879767	Statement	WId	929:27:34501:34503	879627	3	True				
ANR	879768	Statement	transient	929:31:34505:34513	879627	4	True				
ANR	879769	Statement	","	929:40:34514:34514	879627	5	True				
ANR	879770	Statement	d	929:42:34516:34516	879627	6	True				
ANR	879771	Statement	->	929:43:34517:34518	879627	7	True				
ANR	879772	Statement	transients	929:45:34519:34528	879627	8	True				
ANR	879773	Statement	)	929:55:34529:34529	879627	9	True				
ANR	879774	CompoundStatement		20:16:1070:1133	879627	10					
ANR	879775	IdentifierDeclStatement	"KWindowInfo info ( transient , NET :: WMState , NET :: WM2TransientFor ) ;"	930:16:34549:34612	879627	0	True				
ANR	879776	IdentifierDecl	"info ( transient , NET :: WMState , NET :: WM2TransientFor )"		879627	0					
ANR	879777	IdentifierDeclType	KWindowInfo		879627	0					
ANR	879778	Identifier	info		879627	1					
ANR	879779	Expression	"transient , NET :: WMState , NET :: WM2TransientFor"		879627	2					
ANR	879780	Identifier	transient		879627	0					
ANR	879781	Expression	"NET :: WMState , NET :: WM2TransientFor"		879627	1					
ANR	879782	Identifier	NET :: WMState		879627	0					
ANR	879783	Identifier	NET :: WM2TransientFor		879627	1					
ANR	879784	IfStatement	if ( info . valid ( true ) && info . hasState ( NET :: Shaded ) && info . transientFor ( ) == window )		879627	1					
ANR	879785	Condition	info . valid ( true ) && info . hasState ( NET :: Shaded ) && info . transientFor ( ) == window	932:20:34635:34713	879627	0	True				
ANR	879786	AndExpression	info . valid ( true ) && info . hasState ( NET :: Shaded ) && info . transientFor ( ) == window		879627	0		&&			
ANR	879787	CallExpression	info . valid ( true )		879627	0					
ANR	879788	Callee	info . valid		879627	0					
ANR	879789	MemberAccess	info . valid		879627	0					
ANR	879790	Identifier	info		879627	0					
ANR	879791	Identifier	valid		879627	1					
ANR	879792	ArgumentList	true		879627	1					
ANR	879793	Argument	true		879627	0					
ANR	879794	Identifier	true		879627	0					
ANR	879795	AndExpression	info . hasState ( NET :: Shaded ) && info . transientFor ( ) == window		879627	1		&&			
ANR	879796	CallExpression	info . hasState ( NET :: Shaded )		879627	0					
ANR	879797	Callee	info . hasState		879627	0					
ANR	879798	MemberAccess	info . hasState		879627	0					
ANR	879799	Identifier	info		879627	0					
ANR	879800	Identifier	hasState		879627	1					
ANR	879801	ArgumentList	NET :: Shaded		879627	1					
ANR	879802	Argument	NET :: Shaded		879627	0					
ANR	879803	Identifier	NET :: Shaded		879627	0					
ANR	879804	EqualityExpression	info . transientFor ( ) == window		879627	1		==			
ANR	879805	CallExpression	info . transientFor ( )		879627	0					
ANR	879806	Callee	info . transientFor		879627	0					
ANR	879807	MemberAccess	info . transientFor		879627	0					
ANR	879808	Identifier	info		879627	0					
ANR	879809	Identifier	transientFor		879627	1					
ANR	879810	ArgumentList			879627	1					
ANR	879811	Identifier	window		879627	1					
ANR	879812	CompoundStatement		22:101:1237:1237	879627	1					
ANR	879813	ExpressionStatement	window = transient	933:20:34738:34756	879627	0	True				
ANR	879814	AssignmentExpression	window = transient		879627	0		=			
ANR	879815	Identifier	window		879627	0					
ANR	879816	Identifier	transient		879627	1					
ANR	879817	BreakStatement	break ;	934:20:34778:34783	879627	1	True				
ANR	879818	ExpressionStatement	KWindowSystem :: forceActiveWindow ( window )	939:8:34836:34876	879627	2	True				
ANR	879819	CallExpression	KWindowSystem :: forceActiveWindow ( window )		879627	0					
ANR	879820	Callee	KWindowSystem :: forceActiveWindow		879627	0					
ANR	879821	Identifier	KWindowSystem :: forceActiveWindow		879627	0					
ANR	879822	ArgumentList	window		879627	1					
ANR	879823	Argument	window		879627	0					
ANR	879824	Identifier	window		879627	0					
ANR	879825	ReturnType	void		879627	1					
ANR	879826	Identifier	XWindowTasksModel :: requestActivate		879627	2					
ANR	879827	ParameterList	const QModelIndex & index		879627	3					
ANR	879828	Parameter	const QModelIndex & index	910:40:33452:33475	879627	0	True				
ANR	879829	ParameterType	const QModelIndex &		879627	0					
ANR	879830	Identifier	index		879627	1					
ANR	879831	CFGEntryNode	ENTRY		879627		True				
ANR	879832	CFGExitNode	EXIT		879627		True				
ANR	879833	CFGErrorNode	ERROR		879627		True				
ANR	879834	Symbol	index . model		879627						
ANR	879835	Symbol	d -> transientsDemandingAttention . value		879627						
ANR	879836	Symbol	info . hasState		879627						
ANR	879837	Symbol	d		879627						
ANR	879838	Symbol	info . valid		879627						
ANR	879839	Symbol	this		879627						
ANR	879840	Symbol	d -> transientsDemandingAttention . contains		879627						
ANR	879841	Symbol	NET :: Shaded		879627						
ANR	879842	Symbol	index		879627						
ANR	879843	Symbol	index . isValid		879627						
ANR	879844	Symbol	d -> windows . count		879627						
ANR	879845	Symbol	* d		879627						
ANR	879846	Symbol	info . transientFor		879627						
ANR	879847	Symbol	transient		879627						
ANR	879848	Symbol	d -> transients . isEmpty		879627						
ANR	879849	Symbol	index . row		879627						
ANR	879850	Symbol	true		879627						
ANR	879851	Symbol	d -> windows		879627						
ANR	879852	Symbol	window		879627						
ANR	879853	Symbol	d -> transients		879627						
ANR	879854	Symbol	d -> windows . at		879627						
ANR	879855	Symbol	d -> transientsDemandingAttention		879627						
ANR	879856	Symbol	info		879627						
ANR	879857	Function	XWindowTasksModel :: requestNewInstance	943:0:34887:35292							
ANR	879858	FunctionDef	XWindowTasksModel :: requestNewInstance (const QModelIndex & index)		879857	0					
ANR	879859	CompoundStatement		944:0:34956:35292	879857	0					
ANR	879860	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		879857	0					
ANR	879861	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	945:8:34966:35062	879857	0	True				
ANR	879862	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		879857	0		||			
ANR	879863	UnaryOperationExpression	! index . isValid ( )		879857	0					
ANR	879864	UnaryOperator	!		879857	0					
ANR	879865	CallExpression	index . isValid ( )		879857	1					
ANR	879866	Callee	index . isValid		879857	0					
ANR	879867	MemberAccess	index . isValid		879857	0					
ANR	879868	Identifier	index		879857	0					
ANR	879869	Identifier	isValid		879857	1					
ANR	879870	ArgumentList			879857	1					
ANR	879871	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		879857	1		||			
ANR	879872	EqualityExpression	index . model ( ) != this		879857	0		!=			
ANR	879873	CallExpression	index . model ( )		879857	0					
ANR	879874	Callee	index . model		879857	0					
ANR	879875	MemberAccess	index . model		879857	0					
ANR	879876	Identifier	index		879857	0					
ANR	879877	Identifier	model		879857	1					
ANR	879878	ArgumentList			879857	1					
ANR	879879	Identifier	this		879857	1					
ANR	879880	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		879857	1		||			
ANR	879881	RelationalExpression	index . row ( ) < 0		879857	0		<			
ANR	879882	CallExpression	index . row ( )		879857	0					
ANR	879883	Callee	index . row		879857	0					
ANR	879884	MemberAccess	index . row		879857	0					
ANR	879885	Identifier	index		879857	0					
ANR	879886	Identifier	row		879857	1					
ANR	879887	ArgumentList			879857	1					
ANR	879888	PrimaryExpression	0		879857	1					
ANR	879889	RelationalExpression	index . row ( ) >= d -> windows . count ( )		879857	1		>=			
ANR	879890	CallExpression	index . row ( )		879857	0					
ANR	879891	Callee	index . row		879857	0					
ANR	879892	MemberAccess	index . row		879857	0					
ANR	879893	Identifier	index		879857	0					
ANR	879894	Identifier	row		879857	1					
ANR	879895	ArgumentList			879857	1					
ANR	879896	CallExpression	d -> windows . count ( )		879857	1					
ANR	879897	Callee	d -> windows . count		879857	0					
ANR	879898	MemberAccess	d -> windows . count		879857	0					
ANR	879899	PtrMemberAccess	d -> windows		879857	0					
ANR	879900	Identifier	d		879857	0					
ANR	879901	Identifier	windows		879857	1					
ANR	879902	Identifier	count		879857	1					
ANR	879903	ArgumentList			879857	1					
ANR	879904	CompoundStatement		2:107:108:108	879857	1					
ANR	879905	ReturnStatement	return ;	946:8:35075:35081	879857	0	True				
ANR	879906	IdentifierDeclStatement	const QUrl & url = d -> appData ( d -> windows . at ( index . row ( ) ) ) . url ;	949:4:35094:35154	879857	1	True				
ANR	879907	IdentifierDecl	& url = d -> appData ( d -> windows . at ( index . row ( ) ) ) . url		879857	0					
ANR	879908	IdentifierDeclType	const QUrl &		879857	0					
ANR	879909	Identifier	url		879857	1					
ANR	879910	AssignmentExpression	& url = d -> appData ( d -> windows . at ( index . row ( ) ) ) . url		879857	2		=			
ANR	879911	Identifier	url		879857	0					
ANR	879912	MemberAccess	d -> appData ( d -> windows . at ( index . row ( ) ) ) . url		879857	1					
ANR	879913	CallExpression	d -> appData ( d -> windows . at ( index . row ( ) ) )		879857	0					
ANR	879914	Callee	d -> appData		879857	0					
ANR	879915	PtrMemberAccess	d -> appData		879857	0					
ANR	879916	Identifier	d		879857	0					
ANR	879917	Identifier	appData		879857	1					
ANR	879918	ArgumentList	d -> windows . at ( index . row ( ) )		879857	1					
ANR	879919	Argument	d -> windows . at ( index . row ( ) )		879857	0					
ANR	879920	CallExpression	d -> windows . at ( index . row ( ) )		879857	0					
ANR	879921	Callee	d -> windows . at		879857	0					
ANR	879922	MemberAccess	d -> windows . at		879857	0					
ANR	879923	PtrMemberAccess	d -> windows		879857	0					
ANR	879924	Identifier	d		879857	0					
ANR	879925	Identifier	windows		879857	1					
ANR	879926	Identifier	at		879857	1					
ANR	879927	ArgumentList	index . row ( )		879857	1					
ANR	879928	Argument	index . row ( )		879857	0					
ANR	879929	CallExpression	index . row ( )		879857	0					
ANR	879930	Callee	index . row		879857	0					
ANR	879931	MemberAccess	index . row		879857	0					
ANR	879932	Identifier	index		879857	0					
ANR	879933	Identifier	row		879857	1					
ANR	879934	ArgumentList			879857	1					
ANR	879935	Identifier	url		879857	1					
ANR	879936	IfStatement	if ( url . isValid ( ) )		879857	2					
ANR	879937	Condition	url . isValid ( )	951:8:35165:35177	879857	0	True				
ANR	879938	CallExpression	url . isValid ( )		879857	0					
ANR	879939	Callee	url . isValid		879857	0					
ANR	879940	MemberAccess	url . isValid		879857	0					
ANR	879941	Identifier	url		879857	0					
ANR	879942	Identifier	isValid		879857	1					
ANR	879943	ArgumentList			879857	1					
ANR	879944	CompoundStatement		8:23:223:223	879857	1					
ANR	879945	ExpressionStatement	"url , 0 , false , KStartupInfo :: createNewStartupIdForTimestamp ( QX11Info :: appUserTime ( ) )"	952:8:35190:35284	879857	0	True				
ANR	879946	Expression	"url , 0 , false , KStartupInfo :: createNewStartupIdForTimestamp ( QX11Info :: appUserTime ( ) )"		879857	0					
ANR	879947	Identifier	url		879857	0					
ANR	879948	Expression	"0 , false , KStartupInfo :: createNewStartupIdForTimestamp ( QX11Info :: appUserTime ( ) )"		879857	1					
ANR	879949	PrimaryExpression	0		879857	0					
ANR	879950	Expression	"false , KStartupInfo :: createNewStartupIdForTimestamp ( QX11Info :: appUserTime ( ) )"		879857	1					
ANR	879951	Identifier	false		879857	0					
ANR	879952	CallExpression	KStartupInfo :: createNewStartupIdForTimestamp ( QX11Info :: appUserTime ( ) )		879857	1					
ANR	879953	Callee	KStartupInfo :: createNewStartupIdForTimestamp		879857	0					
ANR	879954	Identifier	KStartupInfo :: createNewStartupIdForTimestamp		879857	0					
ANR	879955	ArgumentList	QX11Info :: appUserTime ( )		879857	1					
ANR	879956	Argument	QX11Info :: appUserTime ( )		879857	0					
ANR	879957	CallExpression	QX11Info :: appUserTime ( )		879857	0					
ANR	879958	Callee	QX11Info :: appUserTime		879857	0					
ANR	879959	Identifier	QX11Info :: appUserTime		879857	0					
ANR	879960	ArgumentList			879857	1					
ANR	879961	ReturnType	void		879857	1					
ANR	879962	Identifier	XWindowTasksModel :: requestNewInstance		879857	2					
ANR	879963	ParameterList	const QModelIndex & index		879857	3					
ANR	879964	Parameter	const QModelIndex & index	943:43:34930:34953	879857	0	True				
ANR	879965	ParameterType	const QModelIndex &		879857	0					
ANR	879966	Identifier	index		879857	1					
ANR	879967	CFGEntryNode	ENTRY		879857		True				
ANR	879968	CFGExitNode	EXIT		879857		True				
ANR	879969	Symbol	index . model		879857						
ANR	879970	Symbol	url . isValid		879857						
ANR	879971	Symbol	d		879857						
ANR	879972	Symbol	QX11Info :: appUserTime		879857						
ANR	879973	Symbol	this		879857						
ANR	879974	Symbol	index		879857						
ANR	879975	Symbol	index . isValid		879857						
ANR	879976	Symbol	d -> windows . count		879857						
ANR	879977	Symbol	d -> appData ( d -> windows . at ( index . row ( ) ) ) . url		879857						
ANR	879978	Symbol	* d		879857						
ANR	879979	Symbol	url		879857						
ANR	879980	Symbol	index . row		879857						
ANR	879981	Symbol	d -> appData		879857						
ANR	879982	Symbol	d -> windows		879857						
ANR	879983	Symbol	d -> windows . at		879857						
ANR	879984	Function	XWindowTasksModel :: requestOpenUrls	956:0:35295:35863							
ANR	879985	FunctionDef	"XWindowTasksModel :: requestOpenUrls (const QModelIndex & index , const QList < QUrl > & urls)"		879984	0					
ANR	879986	CompoundStatement		957:0:35386:35863	879984	0					
ANR	879987	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) || urls . isEmpty ( ) )		879984	0					
ANR	879988	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) || urls . isEmpty ( )	958:8:35396:35526	879984	0	True				
ANR	879989	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) || urls . isEmpty ( )		879984	0		||			
ANR	879990	UnaryOperationExpression	! index . isValid ( )		879984	0					
ANR	879991	UnaryOperator	!		879984	0					
ANR	879992	CallExpression	index . isValid ( )		879984	1					
ANR	879993	Callee	index . isValid		879984	0					
ANR	879994	MemberAccess	index . isValid		879984	0					
ANR	879995	Identifier	index		879984	0					
ANR	879996	Identifier	isValid		879984	1					
ANR	879997	ArgumentList			879984	1					
ANR	879998	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) || urls . isEmpty ( )		879984	1		||			
ANR	879999	EqualityExpression	index . model ( ) != this		879984	0		!=			
ANR	880000	CallExpression	index . model ( )		879984	0					
ANR	880001	Callee	index . model		879984	0					
ANR	880002	MemberAccess	index . model		879984	0					
ANR	880003	Identifier	index		879984	0					
ANR	880004	Identifier	model		879984	1					
ANR	880005	ArgumentList			879984	1					
ANR	880006	Identifier	this		879984	1					
ANR	880007	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) || urls . isEmpty ( )		879984	1		||			
ANR	880008	RelationalExpression	index . row ( ) < 0		879984	0		<			
ANR	880009	CallExpression	index . row ( )		879984	0					
ANR	880010	Callee	index . row		879984	0					
ANR	880011	MemberAccess	index . row		879984	0					
ANR	880012	Identifier	index		879984	0					
ANR	880013	Identifier	row		879984	1					
ANR	880014	ArgumentList			879984	1					
ANR	880015	PrimaryExpression	0		879984	1					
ANR	880016	OrExpression	index . row ( ) >= d -> windows . count ( ) || urls . isEmpty ( )		879984	1		||			
ANR	880017	RelationalExpression	index . row ( ) >= d -> windows . count ( )		879984	0		>=			
ANR	880018	CallExpression	index . row ( )		879984	0					
ANR	880019	Callee	index . row		879984	0					
ANR	880020	MemberAccess	index . row		879984	0					
ANR	880021	Identifier	index		879984	0					
ANR	880022	Identifier	row		879984	1					
ANR	880023	ArgumentList			879984	1					
ANR	880024	CallExpression	d -> windows . count ( )		879984	1					
ANR	880025	Callee	d -> windows . count		879984	0					
ANR	880026	MemberAccess	d -> windows . count		879984	0					
ANR	880027	PtrMemberAccess	d -> windows		879984	0					
ANR	880028	Identifier	d		879984	0					
ANR	880029	Identifier	windows		879984	1					
ANR	880030	Identifier	count		879984	1					
ANR	880031	ArgumentList			879984	1					
ANR	880032	CallExpression	urls . isEmpty ( )		879984	1					
ANR	880033	Callee	urls . isEmpty		879984	0					
ANR	880034	MemberAccess	urls . isEmpty		879984	0					
ANR	880035	Identifier	urls		879984	0					
ANR	880036	Identifier	isEmpty		879984	1					
ANR	880037	ArgumentList			879984	1					
ANR	880038	CompoundStatement		4:27:142:142	879984	1					
ANR	880039	ReturnStatement	return ;	961:8:35539:35545	879984	0	True				
ANR	880040	IdentifierDeclStatement	const QUrl & url = d -> appData ( d -> windows . at ( index . row ( ) ) ) . url ;	964:4:35558:35618	879984	1	True				
ANR	880041	IdentifierDecl	& url = d -> appData ( d -> windows . at ( index . row ( ) ) ) . url		879984	0					
ANR	880042	IdentifierDeclType	const QUrl &		879984	0					
ANR	880043	Identifier	url		879984	1					
ANR	880044	AssignmentExpression	& url = d -> appData ( d -> windows . at ( index . row ( ) ) ) . url		879984	2		=			
ANR	880045	Identifier	url		879984	0					
ANR	880046	MemberAccess	d -> appData ( d -> windows . at ( index . row ( ) ) ) . url		879984	1					
ANR	880047	CallExpression	d -> appData ( d -> windows . at ( index . row ( ) ) )		879984	0					
ANR	880048	Callee	d -> appData		879984	0					
ANR	880049	PtrMemberAccess	d -> appData		879984	0					
ANR	880050	Identifier	d		879984	0					
ANR	880051	Identifier	appData		879984	1					
ANR	880052	ArgumentList	d -> windows . at ( index . row ( ) )		879984	1					
ANR	880053	Argument	d -> windows . at ( index . row ( ) )		879984	0					
ANR	880054	CallExpression	d -> windows . at ( index . row ( ) )		879984	0					
ANR	880055	Callee	d -> windows . at		879984	0					
ANR	880056	MemberAccess	d -> windows . at		879984	0					
ANR	880057	PtrMemberAccess	d -> windows		879984	0					
ANR	880058	Identifier	d		879984	0					
ANR	880059	Identifier	windows		879984	1					
ANR	880060	Identifier	at		879984	1					
ANR	880061	ArgumentList	index . row ( )		879984	1					
ANR	880062	Argument	index . row ( )		879984	0					
ANR	880063	CallExpression	index . row ( )		879984	0					
ANR	880064	Callee	index . row		879984	0					
ANR	880065	MemberAccess	index . row		879984	0					
ANR	880066	Identifier	index		879984	0					
ANR	880067	Identifier	row		879984	1					
ANR	880068	ArgumentList			879984	1					
ANR	880069	Identifier	url		879984	1					
ANR	880070	IdentifierDeclStatement	const KService :: Ptr service = KService :: serviceByDesktopPath ( url . toLocalFile ( ) ) ;	965:4:35624:35703	879984	2	True				
ANR	880071	IdentifierDecl	service = KService :: serviceByDesktopPath ( url . toLocalFile ( ) )		879984	0					
ANR	880072	IdentifierDeclType	const KService :: Ptr		879984	0					
ANR	880073	Identifier	service		879984	1					
ANR	880074	AssignmentExpression	service = KService :: serviceByDesktopPath ( url . toLocalFile ( ) )		879984	2		=			
ANR	880075	Identifier	service		879984	0					
ANR	880076	CallExpression	KService :: serviceByDesktopPath ( url . toLocalFile ( ) )		879984	1					
ANR	880077	Callee	KService :: serviceByDesktopPath		879984	0					
ANR	880078	Identifier	KService :: serviceByDesktopPath		879984	0					
ANR	880079	ArgumentList	url . toLocalFile ( )		879984	1					
ANR	880080	Argument	url . toLocalFile ( )		879984	0					
ANR	880081	CallExpression	url . toLocalFile ( )		879984	0					
ANR	880082	Callee	url . toLocalFile		879984	0					
ANR	880083	MemberAccess	url . toLocalFile		879984	0					
ANR	880084	Identifier	url		879984	0					
ANR	880085	Identifier	toLocalFile		879984	1					
ANR	880086	ArgumentList			879984	1					
ANR	880087	IfStatement	if ( service )		879984	3					
ANR	880088	Condition	service	966:8:35713:35719	879984	0	True				
ANR	880089	Identifier	service		879984	0					
ANR	880090	CompoundStatement		10:17:335:335	879984	1					
ANR	880091	Statement	KRun	967:8:35732:35735	879984	0	True				
ANR	880092	Statement	::	967:12:35736:35737	879984	1	True				
ANR	880093	Statement	runApplication	967:14:35738:35751	879984	2	True				
ANR	880094	Statement	(	967:28:35752:35752	879984	3	True				
ANR	880095	Statement	*	967:29:35753:35753	879984	4	True				
ANR	880096	Statement	service	967:30:35754:35760	879984	5	True				
ANR	880097	Statement	","	967:37:35761:35761	879984	6	True				
ANR	880098	Statement	urls	967:39:35763:35766	879984	7	True				
ANR	880099	Statement	","	967:43:35767:35767	879984	8	True				
ANR	880100	Statement	nullptr	967:45:35769:35775	879984	9	True				
ANR	880101	Statement	","	967:52:35776:35776	879984	10	True				
ANR	880102	Statement	0	967:54:35778:35778	879984	11	True				
ANR	880103	Statement	","	967:55:35779:35779	879984	12	True				
ANR	880104	CompoundStatement		11:57:394:394	879984	13					
ANR	880105	Statement	","	967:59:35783:35783	879984	14	True				
ANR	880106	Statement	KStartupInfo	967:61:35785:35796	879984	15	True				
ANR	880107	Statement	::	967:73:35797:35798	879984	16	True				
ANR	880108	Statement	createNewStartupIdForTimestamp	967:75:35799:35828	879984	17	True				
ANR	880109	Statement	(	967:105:35829:35829	879984	18	True				
ANR	880110	Statement	QX11Info	967:106:35830:35837	879984	19	True				
ANR	880111	Statement	::	967:114:35838:35839	879984	20	True				
ANR	880112	Statement	appUserTime	967:116:35840:35850	879984	21	True				
ANR	880113	Statement	(	967:127:35851:35851	879984	22	True				
ANR	880114	Statement	)	967:128:35852:35852	879984	23	True				
ANR	880115	Statement	)	967:129:35853:35853	879984	24	True				
ANR	880116	Statement	)	967:130:35854:35854	879984	25	True				
ANR	880117	ExpressionStatement		967:131:35855:35855	879984	26	True				
ANR	880118	ReturnType	void		879984	1					
ANR	880119	Identifier	XWindowTasksModel :: requestOpenUrls		879984	2					
ANR	880120	ParameterList	"const QModelIndex & index , const QList < QUrl > & urls"		879984	3					
ANR	880121	Parameter	const QModelIndex & index	956:40:35335:35358	879984	0	True				
ANR	880122	ParameterType	const QModelIndex &		879984	0					
ANR	880123	Identifier	index		879984	1					
ANR	880124	Parameter	const QList < QUrl > & urls	956:66:35361:35383	879984	1	True				
ANR	880125	ParameterType	const QList < QUrl > &		879984	0					
ANR	880126	Identifier	urls		879984	1					
ANR	880127	CFGEntryNode	ENTRY		879984		True				
ANR	880128	CFGExitNode	EXIT		879984		True				
ANR	880129	Symbol	index . model		879984						
ANR	880130	Symbol	d		879984						
ANR	880131	Symbol	url . toLocalFile		879984						
ANR	880132	Symbol	KService :: serviceByDesktopPath		879984						
ANR	880133	Symbol	this		879984						
ANR	880134	Symbol	index		879984						
ANR	880135	Symbol	index . isValid		879984						
ANR	880136	Symbol	d -> windows . count		879984						
ANR	880137	Symbol	d -> appData ( d -> windows . at ( index . row ( ) ) ) . url		879984						
ANR	880138	Symbol	* d		879984						
ANR	880139	Symbol	url		879984						
ANR	880140	Symbol	urls		879984						
ANR	880141	Symbol	service		879984						
ANR	880142	Symbol	index . row		879984						
ANR	880143	Symbol	urls . isEmpty		879984						
ANR	880144	Symbol	d -> appData		879984						
ANR	880145	Symbol	d -> windows		879984						
ANR	880146	Symbol	d -> windows . at		879984						
ANR	880147	Function	XWindowTasksModel :: requestClose	971:0:35866:36180							
ANR	880148	FunctionDef	XWindowTasksModel :: requestClose (const QModelIndex & index)		880147	0					
ANR	880149	CompoundStatement		972:0:35929:36180	880147	0					
ANR	880150	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		880147	0					
ANR	880151	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	973:8:35939:36035	880147	0	True				
ANR	880152	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880147	0		||			
ANR	880153	UnaryOperationExpression	! index . isValid ( )		880147	0					
ANR	880154	UnaryOperator	!		880147	0					
ANR	880155	CallExpression	index . isValid ( )		880147	1					
ANR	880156	Callee	index . isValid		880147	0					
ANR	880157	MemberAccess	index . isValid		880147	0					
ANR	880158	Identifier	index		880147	0					
ANR	880159	Identifier	isValid		880147	1					
ANR	880160	ArgumentList			880147	1					
ANR	880161	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880147	1		||			
ANR	880162	EqualityExpression	index . model ( ) != this		880147	0		!=			
ANR	880163	CallExpression	index . model ( )		880147	0					
ANR	880164	Callee	index . model		880147	0					
ANR	880165	MemberAccess	index . model		880147	0					
ANR	880166	Identifier	index		880147	0					
ANR	880167	Identifier	model		880147	1					
ANR	880168	ArgumentList			880147	1					
ANR	880169	Identifier	this		880147	1					
ANR	880170	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880147	1		||			
ANR	880171	RelationalExpression	index . row ( ) < 0		880147	0		<			
ANR	880172	CallExpression	index . row ( )		880147	0					
ANR	880173	Callee	index . row		880147	0					
ANR	880174	MemberAccess	index . row		880147	0					
ANR	880175	Identifier	index		880147	0					
ANR	880176	Identifier	row		880147	1					
ANR	880177	ArgumentList			880147	1					
ANR	880178	PrimaryExpression	0		880147	1					
ANR	880179	RelationalExpression	index . row ( ) >= d -> windows . count ( )		880147	1		>=			
ANR	880180	CallExpression	index . row ( )		880147	0					
ANR	880181	Callee	index . row		880147	0					
ANR	880182	MemberAccess	index . row		880147	0					
ANR	880183	Identifier	index		880147	0					
ANR	880184	Identifier	row		880147	1					
ANR	880185	ArgumentList			880147	1					
ANR	880186	CallExpression	d -> windows . count ( )		880147	1					
ANR	880187	Callee	d -> windows . count		880147	0					
ANR	880188	MemberAccess	d -> windows . count		880147	0					
ANR	880189	PtrMemberAccess	d -> windows		880147	0					
ANR	880190	Identifier	d		880147	0					
ANR	880191	Identifier	windows		880147	1					
ANR	880192	Identifier	count		880147	1					
ANR	880193	ArgumentList			880147	1					
ANR	880194	CompoundStatement		2:107:108:108	880147	1					
ANR	880195	ReturnStatement	return ;	974:8:36048:36054	880147	0	True				
ANR	880196	IdentifierDeclStatement	"NETRootInfo ri ( QX11Info :: connection ( ) , NET :: CloseWindow ) ;"	977:4:36067:36123	880147	1	True				
ANR	880197	IdentifierDecl	"ri ( QX11Info :: connection ( ) , NET :: CloseWindow )"		880147	0					
ANR	880198	IdentifierDeclType	NETRootInfo		880147	0					
ANR	880199	Identifier	ri		880147	1					
ANR	880200	Expression	"QX11Info :: connection ( ) , NET :: CloseWindow"		880147	2					
ANR	880201	CallExpression	QX11Info :: connection ( )		880147	0					
ANR	880202	Callee	QX11Info :: connection		880147	0					
ANR	880203	Identifier	QX11Info :: connection		880147	0					
ANR	880204	ArgumentList			880147	1					
ANR	880205	Identifier	NET :: CloseWindow		880147	1					
ANR	880206	ExpressionStatement	ri . closeWindowRequest ( d -> windows . at ( index . row ( ) ) )	978:4:36129:36178	880147	2	True				
ANR	880207	CallExpression	ri . closeWindowRequest ( d -> windows . at ( index . row ( ) ) )		880147	0					
ANR	880208	Callee	ri . closeWindowRequest		880147	0					
ANR	880209	MemberAccess	ri . closeWindowRequest		880147	0					
ANR	880210	Identifier	ri		880147	0					
ANR	880211	Identifier	closeWindowRequest		880147	1					
ANR	880212	ArgumentList	d -> windows . at ( index . row ( ) )		880147	1					
ANR	880213	Argument	d -> windows . at ( index . row ( ) )		880147	0					
ANR	880214	CallExpression	d -> windows . at ( index . row ( ) )		880147	0					
ANR	880215	Callee	d -> windows . at		880147	0					
ANR	880216	MemberAccess	d -> windows . at		880147	0					
ANR	880217	PtrMemberAccess	d -> windows		880147	0					
ANR	880218	Identifier	d		880147	0					
ANR	880219	Identifier	windows		880147	1					
ANR	880220	Identifier	at		880147	1					
ANR	880221	ArgumentList	index . row ( )		880147	1					
ANR	880222	Argument	index . row ( )		880147	0					
ANR	880223	CallExpression	index . row ( )		880147	0					
ANR	880224	Callee	index . row		880147	0					
ANR	880225	MemberAccess	index . row		880147	0					
ANR	880226	Identifier	index		880147	0					
ANR	880227	Identifier	row		880147	1					
ANR	880228	ArgumentList			880147	1					
ANR	880229	ReturnType	void		880147	1					
ANR	880230	Identifier	XWindowTasksModel :: requestClose		880147	2					
ANR	880231	ParameterList	const QModelIndex & index		880147	3					
ANR	880232	Parameter	const QModelIndex & index	971:37:35903:35926	880147	0	True				
ANR	880233	ParameterType	const QModelIndex &		880147	0					
ANR	880234	Identifier	index		880147	1					
ANR	880235	CFGEntryNode	ENTRY		880147		True				
ANR	880236	CFGExitNode	EXIT		880147		True				
ANR	880237	Symbol	index . model		880147						
ANR	880238	Symbol	d		880147						
ANR	880239	Symbol	index . row		880147						
ANR	880240	Symbol	ri		880147						
ANR	880241	Symbol	this		880147						
ANR	880242	Symbol	index		880147						
ANR	880243	Symbol	index . isValid		880147						
ANR	880244	Symbol	d -> windows		880147						
ANR	880245	Symbol	d -> windows . count		880147						
ANR	880246	Symbol	d -> windows . at		880147						
ANR	880247	Symbol	* d		880147						
ANR	880248	Function	XWindowTasksModel :: requestMove	981:0:36183:36948							
ANR	880249	FunctionDef	XWindowTasksModel :: requestMove (const QModelIndex & index)		880248	0					
ANR	880250	CompoundStatement		982:0:36245:36948	880248	0					
ANR	880251	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		880248	0					
ANR	880252	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	983:8:36255:36351	880248	0	True				
ANR	880253	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880248	0		||			
ANR	880254	UnaryOperationExpression	! index . isValid ( )		880248	0					
ANR	880255	UnaryOperator	!		880248	0					
ANR	880256	CallExpression	index . isValid ( )		880248	1					
ANR	880257	Callee	index . isValid		880248	0					
ANR	880258	MemberAccess	index . isValid		880248	0					
ANR	880259	Identifier	index		880248	0					
ANR	880260	Identifier	isValid		880248	1					
ANR	880261	ArgumentList			880248	1					
ANR	880262	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880248	1		||			
ANR	880263	EqualityExpression	index . model ( ) != this		880248	0		!=			
ANR	880264	CallExpression	index . model ( )		880248	0					
ANR	880265	Callee	index . model		880248	0					
ANR	880266	MemberAccess	index . model		880248	0					
ANR	880267	Identifier	index		880248	0					
ANR	880268	Identifier	model		880248	1					
ANR	880269	ArgumentList			880248	1					
ANR	880270	Identifier	this		880248	1					
ANR	880271	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880248	1		||			
ANR	880272	RelationalExpression	index . row ( ) < 0		880248	0		<			
ANR	880273	CallExpression	index . row ( )		880248	0					
ANR	880274	Callee	index . row		880248	0					
ANR	880275	MemberAccess	index . row		880248	0					
ANR	880276	Identifier	index		880248	0					
ANR	880277	Identifier	row		880248	1					
ANR	880278	ArgumentList			880248	1					
ANR	880279	PrimaryExpression	0		880248	1					
ANR	880280	RelationalExpression	index . row ( ) >= d -> windows . count ( )		880248	1		>=			
ANR	880281	CallExpression	index . row ( )		880248	0					
ANR	880282	Callee	index . row		880248	0					
ANR	880283	MemberAccess	index . row		880248	0					
ANR	880284	Identifier	index		880248	0					
ANR	880285	Identifier	row		880248	1					
ANR	880286	ArgumentList			880248	1					
ANR	880287	CallExpression	d -> windows . count ( )		880248	1					
ANR	880288	Callee	d -> windows . count		880248	0					
ANR	880289	MemberAccess	d -> windows . count		880248	0					
ANR	880290	PtrMemberAccess	d -> windows		880248	0					
ANR	880291	Identifier	d		880248	0					
ANR	880292	Identifier	windows		880248	1					
ANR	880293	Identifier	count		880248	1					
ANR	880294	ArgumentList			880248	1					
ANR	880295	CompoundStatement		2:107:108:108	880248	1					
ANR	880296	ReturnStatement	return ;	984:8:36364:36370	880248	0	True				
ANR	880297	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	987:4:36383:36428	880248	1	True				
ANR	880298	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		880248	0					
ANR	880299	IdentifierDeclType	const WId		880248	0					
ANR	880300	Identifier	window		880248	1					
ANR	880301	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		880248	2		=			
ANR	880302	Identifier	window		880248	0					
ANR	880303	CallExpression	d -> windows . at ( index . row ( ) )		880248	1					
ANR	880304	Callee	d -> windows . at		880248	0					
ANR	880305	MemberAccess	d -> windows . at		880248	0					
ANR	880306	PtrMemberAccess	d -> windows		880248	0					
ANR	880307	Identifier	d		880248	0					
ANR	880308	Identifier	windows		880248	1					
ANR	880309	Identifier	at		880248	1					
ANR	880310	ArgumentList	index . row ( )		880248	1					
ANR	880311	Argument	index . row ( )		880248	0					
ANR	880312	CallExpression	index . row ( )		880248	0					
ANR	880313	Callee	index . row		880248	0					
ANR	880314	MemberAccess	index . row		880248	0					
ANR	880315	Identifier	index		880248	0					
ANR	880316	Identifier	row		880248	1					
ANR	880317	ArgumentList			880248	1					
ANR	880318	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	988:4:36434:36481	880248	2	True				
ANR	880319	IdentifierDecl	* info = d -> windowInfo ( window )		880248	0					
ANR	880320	IdentifierDeclType	const KWindowInfo *		880248	0					
ANR	880321	Identifier	info		880248	1					
ANR	880322	AssignmentExpression	* info = d -> windowInfo ( window )		880248	2		=			
ANR	880323	Identifier	info		880248	0					
ANR	880324	CallExpression	d -> windowInfo ( window )		880248	1					
ANR	880325	Callee	d -> windowInfo		880248	0					
ANR	880326	PtrMemberAccess	d -> windowInfo		880248	0					
ANR	880327	Identifier	d		880248	0					
ANR	880328	Identifier	windowInfo		880248	1					
ANR	880329	ArgumentList	window		880248	1					
ANR	880330	Argument	window		880248	0					
ANR	880331	Identifier	window		880248	0					
ANR	880332	IdentifierDeclStatement	bool onCurrent = info -> isOnCurrentDesktop ( ) ;	990:4:36488:36531	880248	3	True				
ANR	880333	IdentifierDecl	onCurrent = info -> isOnCurrentDesktop ( )		880248	0					
ANR	880334	IdentifierDeclType	bool		880248	0					
ANR	880335	Identifier	onCurrent		880248	1					
ANR	880336	AssignmentExpression	onCurrent = info -> isOnCurrentDesktop ( )		880248	2		=			
ANR	880337	Identifier	onCurrent		880248	0					
ANR	880338	CallExpression	info -> isOnCurrentDesktop ( )		880248	1					
ANR	880339	Callee	info -> isOnCurrentDesktop		880248	0					
ANR	880340	PtrMemberAccess	info -> isOnCurrentDesktop		880248	0					
ANR	880341	Identifier	info		880248	0					
ANR	880342	Identifier	isOnCurrentDesktop		880248	1					
ANR	880343	ArgumentList			880248	1					
ANR	880344	IfStatement	if ( ! onCurrent )		880248	4					
ANR	880345	Condition	! onCurrent	992:8:36542:36551	880248	0	True				
ANR	880346	UnaryOperationExpression	! onCurrent		880248	0					
ANR	880347	UnaryOperator	!		880248	0					
ANR	880348	Identifier	onCurrent		880248	1					
ANR	880349	CompoundStatement		11:20:308:308	880248	1					
ANR	880350	ExpressionStatement	KWindowSystem :: setCurrentDesktop ( info -> desktop ( ) )	993:8:36564:36613	880248	0	True				
ANR	880351	CallExpression	KWindowSystem :: setCurrentDesktop ( info -> desktop ( ) )		880248	0					
ANR	880352	Callee	KWindowSystem :: setCurrentDesktop		880248	0					
ANR	880353	Identifier	KWindowSystem :: setCurrentDesktop		880248	0					
ANR	880354	ArgumentList	info -> desktop ( )		880248	1					
ANR	880355	Argument	info -> desktop ( )		880248	0					
ANR	880356	CallExpression	info -> desktop ( )		880248	0					
ANR	880357	Callee	info -> desktop		880248	0					
ANR	880358	PtrMemberAccess	info -> desktop		880248	0					
ANR	880359	Identifier	info		880248	0					
ANR	880360	Identifier	desktop		880248	1					
ANR	880361	ArgumentList			880248	1					
ANR	880362	ExpressionStatement	KWindowSystem :: forceActiveWindow ( window )	994:8:36623:36663	880248	1	True				
ANR	880363	CallExpression	KWindowSystem :: forceActiveWindow ( window )		880248	0					
ANR	880364	Callee	KWindowSystem :: forceActiveWindow		880248	0					
ANR	880365	Identifier	KWindowSystem :: forceActiveWindow		880248	0					
ANR	880366	ArgumentList	window		880248	1					
ANR	880367	Argument	window		880248	0					
ANR	880368	Identifier	window		880248	0					
ANR	880369	IfStatement	if ( info -> isMinimized ( ) )		880248	5					
ANR	880370	Condition	info -> isMinimized ( )	997:8:36680:36698	880248	0	True				
ANR	880371	CallExpression	info -> isMinimized ( )		880248	0					
ANR	880372	Callee	info -> isMinimized		880248	0					
ANR	880373	PtrMemberAccess	info -> isMinimized		880248	0					
ANR	880374	Identifier	info		880248	0					
ANR	880375	Identifier	isMinimized		880248	1					
ANR	880376	ArgumentList			880248	1					
ANR	880377	CompoundStatement		16:29:455:455	880248	1					
ANR	880378	ExpressionStatement	KWindowSystem :: unminimizeWindow ( window )	998:8:36711:36750	880248	0	True				
ANR	880379	CallExpression	KWindowSystem :: unminimizeWindow ( window )		880248	0					
ANR	880380	Callee	KWindowSystem :: unminimizeWindow		880248	0					
ANR	880381	Identifier	KWindowSystem :: unminimizeWindow		880248	0					
ANR	880382	ArgumentList	window		880248	1					
ANR	880383	Argument	window		880248	0					
ANR	880384	Identifier	window		880248	0					
ANR	880385	IdentifierDeclStatement	const QRect & geom = info -> geometry ( ) ;	1001:4:36763:36799	880248	6	True				
ANR	880386	IdentifierDecl	& geom = info -> geometry ( )		880248	0					
ANR	880387	IdentifierDeclType	const QRect &		880248	0					
ANR	880388	Identifier	geom		880248	1					
ANR	880389	AssignmentExpression	& geom = info -> geometry ( )		880248	2		=			
ANR	880390	Identifier	geom		880248	0					
ANR	880391	CallExpression	info -> geometry ( )		880248	1					
ANR	880392	Callee	info -> geometry		880248	0					
ANR	880393	PtrMemberAccess	info -> geometry		880248	0					
ANR	880394	Identifier	info		880248	0					
ANR	880395	Identifier	geometry		880248	1					
ANR	880396	ArgumentList			880248	1					
ANR	880397	IdentifierDeclStatement	"NETRootInfo ri ( QX11Info :: connection ( ) , NET :: WMMoveResize ) ;"	1003:4:36806:36863	880248	7	True				
ANR	880398	IdentifierDecl	"ri ( QX11Info :: connection ( ) , NET :: WMMoveResize )"		880248	0					
ANR	880399	IdentifierDeclType	NETRootInfo		880248	0					
ANR	880400	Identifier	ri		880248	1					
ANR	880401	Expression	"QX11Info :: connection ( ) , NET :: WMMoveResize"		880248	2					
ANR	880402	CallExpression	QX11Info :: connection ( )		880248	0					
ANR	880403	Callee	QX11Info :: connection		880248	0					
ANR	880404	Identifier	QX11Info :: connection		880248	0					
ANR	880405	ArgumentList			880248	1					
ANR	880406	Identifier	NET :: WMMoveResize		880248	1					
ANR	880407	ExpressionStatement	"ri . moveResizeRequest ( window , geom . center ( ) . x ( ) , geom . center ( ) . y ( ) , NET :: Move )"	1004:4:36869:36946	880248	8	True				
ANR	880408	CallExpression	"ri . moveResizeRequest ( window , geom . center ( ) . x ( ) , geom . center ( ) . y ( ) , NET :: Move )"		880248	0					
ANR	880409	Callee	ri . moveResizeRequest		880248	0					
ANR	880410	MemberAccess	ri . moveResizeRequest		880248	0					
ANR	880411	Identifier	ri		880248	0					
ANR	880412	Identifier	moveResizeRequest		880248	1					
ANR	880413	ArgumentList	window		880248	1					
ANR	880414	Argument	window		880248	0					
ANR	880415	Identifier	window		880248	0					
ANR	880416	Argument	geom . center ( ) . x ( )		880248	1					
ANR	880417	CallExpression	geom . center ( ) . x ( )		880248	0					
ANR	880418	Callee	geom . center ( ) . x		880248	0					
ANR	880419	MemberAccess	geom . center ( ) . x		880248	0					
ANR	880420	CallExpression	geom . center ( )		880248	0					
ANR	880421	Callee	geom . center		880248	0					
ANR	880422	MemberAccess	geom . center		880248	0					
ANR	880423	Identifier	geom		880248	0					
ANR	880424	Identifier	center		880248	1					
ANR	880425	ArgumentList			880248	1					
ANR	880426	Identifier	x		880248	1					
ANR	880427	ArgumentList			880248	1					
ANR	880428	Argument	geom . center ( ) . y ( )		880248	2					
ANR	880429	CallExpression	geom . center ( ) . y ( )		880248	0					
ANR	880430	Callee	geom . center ( ) . y		880248	0					
ANR	880431	MemberAccess	geom . center ( ) . y		880248	0					
ANR	880432	CallExpression	geom . center ( )		880248	0					
ANR	880433	Callee	geom . center		880248	0					
ANR	880434	MemberAccess	geom . center		880248	0					
ANR	880435	Identifier	geom		880248	0					
ANR	880436	Identifier	center		880248	1					
ANR	880437	ArgumentList			880248	1					
ANR	880438	Identifier	y		880248	1					
ANR	880439	ArgumentList			880248	1					
ANR	880440	Argument	NET :: Move		880248	3					
ANR	880441	Identifier	NET :: Move		880248	0					
ANR	880442	ReturnType	void		880248	1					
ANR	880443	Identifier	XWindowTasksModel :: requestMove		880248	2					
ANR	880444	ParameterList	const QModelIndex & index		880248	3					
ANR	880445	Parameter	const QModelIndex & index	981:36:36219:36242	880248	0	True				
ANR	880446	ParameterType	const QModelIndex &		880248	0					
ANR	880447	Identifier	index		880248	1					
ANR	880448	CFGEntryNode	ENTRY		880248		True				
ANR	880449	CFGExitNode	EXIT		880248		True				
ANR	880450	Symbol	d -> windowInfo		880248						
ANR	880451	Symbol	geom . center ( ) . y		880248						
ANR	880452	Symbol	geom . center ( ) . x		880248						
ANR	880453	Symbol	index . isValid		880248						
ANR	880454	Symbol	onCurrent		880248						
ANR	880455	Symbol	d -> windows . count		880248						
ANR	880456	Symbol	geom		880248						
ANR	880457	Symbol	geom . center		880248						
ANR	880458	Symbol	info -> desktop		880248						
ANR	880459	Symbol	info -> isOnCurrentDesktop		880248						
ANR	880460	Symbol	index . row		880248						
ANR	880461	Symbol	d -> windows		880248						
ANR	880462	Symbol	d -> windows . at		880248						
ANR	880463	Symbol	info -> geometry		880248						
ANR	880464	Symbol	info		880248						
ANR	880465	Symbol	info -> isMinimized		880248						
ANR	880466	Symbol	index . model		880248						
ANR	880467	Symbol	d		880248						
ANR	880468	Symbol	this		880248						
ANR	880469	Symbol	index		880248						
ANR	880470	Symbol	* d		880248						
ANR	880471	Symbol	NET :: Move		880248						
ANR	880472	Symbol	ri		880248						
ANR	880473	Symbol	window		880248						
ANR	880474	Symbol	* info		880248						
ANR	880475	Function	XWindowTasksModel :: requestResize	1007:0:36951:37735							
ANR	880476	FunctionDef	XWindowTasksModel :: requestResize (const QModelIndex & index)		880475	0					
ANR	880477	CompoundStatement		1008:0:37015:37735	880475	0					
ANR	880478	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		880475	0					
ANR	880479	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1009:8:37025:37121	880475	0	True				
ANR	880480	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880475	0		||			
ANR	880481	UnaryOperationExpression	! index . isValid ( )		880475	0					
ANR	880482	UnaryOperator	!		880475	0					
ANR	880483	CallExpression	index . isValid ( )		880475	1					
ANR	880484	Callee	index . isValid		880475	0					
ANR	880485	MemberAccess	index . isValid		880475	0					
ANR	880486	Identifier	index		880475	0					
ANR	880487	Identifier	isValid		880475	1					
ANR	880488	ArgumentList			880475	1					
ANR	880489	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880475	1		||			
ANR	880490	EqualityExpression	index . model ( ) != this		880475	0		!=			
ANR	880491	CallExpression	index . model ( )		880475	0					
ANR	880492	Callee	index . model		880475	0					
ANR	880493	MemberAccess	index . model		880475	0					
ANR	880494	Identifier	index		880475	0					
ANR	880495	Identifier	model		880475	1					
ANR	880496	ArgumentList			880475	1					
ANR	880497	Identifier	this		880475	1					
ANR	880498	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880475	1		||			
ANR	880499	RelationalExpression	index . row ( ) < 0		880475	0		<			
ANR	880500	CallExpression	index . row ( )		880475	0					
ANR	880501	Callee	index . row		880475	0					
ANR	880502	MemberAccess	index . row		880475	0					
ANR	880503	Identifier	index		880475	0					
ANR	880504	Identifier	row		880475	1					
ANR	880505	ArgumentList			880475	1					
ANR	880506	PrimaryExpression	0		880475	1					
ANR	880507	RelationalExpression	index . row ( ) >= d -> windows . count ( )		880475	1		>=			
ANR	880508	CallExpression	index . row ( )		880475	0					
ANR	880509	Callee	index . row		880475	0					
ANR	880510	MemberAccess	index . row		880475	0					
ANR	880511	Identifier	index		880475	0					
ANR	880512	Identifier	row		880475	1					
ANR	880513	ArgumentList			880475	1					
ANR	880514	CallExpression	d -> windows . count ( )		880475	1					
ANR	880515	Callee	d -> windows . count		880475	0					
ANR	880516	MemberAccess	d -> windows . count		880475	0					
ANR	880517	PtrMemberAccess	d -> windows		880475	0					
ANR	880518	Identifier	d		880475	0					
ANR	880519	Identifier	windows		880475	1					
ANR	880520	Identifier	count		880475	1					
ANR	880521	ArgumentList			880475	1					
ANR	880522	CompoundStatement		2:107:108:108	880475	1					
ANR	880523	ReturnStatement	return ;	1010:8:37134:37140	880475	0	True				
ANR	880524	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1013:4:37153:37198	880475	1	True				
ANR	880525	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		880475	0					
ANR	880526	IdentifierDeclType	const WId		880475	0					
ANR	880527	Identifier	window		880475	1					
ANR	880528	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		880475	2		=			
ANR	880529	Identifier	window		880475	0					
ANR	880530	CallExpression	d -> windows . at ( index . row ( ) )		880475	1					
ANR	880531	Callee	d -> windows . at		880475	0					
ANR	880532	MemberAccess	d -> windows . at		880475	0					
ANR	880533	PtrMemberAccess	d -> windows		880475	0					
ANR	880534	Identifier	d		880475	0					
ANR	880535	Identifier	windows		880475	1					
ANR	880536	Identifier	at		880475	1					
ANR	880537	ArgumentList	index . row ( )		880475	1					
ANR	880538	Argument	index . row ( )		880475	0					
ANR	880539	CallExpression	index . row ( )		880475	0					
ANR	880540	Callee	index . row		880475	0					
ANR	880541	MemberAccess	index . row		880475	0					
ANR	880542	Identifier	index		880475	0					
ANR	880543	Identifier	row		880475	1					
ANR	880544	ArgumentList			880475	1					
ANR	880545	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	1014:4:37204:37251	880475	2	True				
ANR	880546	IdentifierDecl	* info = d -> windowInfo ( window )		880475	0					
ANR	880547	IdentifierDeclType	const KWindowInfo *		880475	0					
ANR	880548	Identifier	info		880475	1					
ANR	880549	AssignmentExpression	* info = d -> windowInfo ( window )		880475	2		=			
ANR	880550	Identifier	info		880475	0					
ANR	880551	CallExpression	d -> windowInfo ( window )		880475	1					
ANR	880552	Callee	d -> windowInfo		880475	0					
ANR	880553	PtrMemberAccess	d -> windowInfo		880475	0					
ANR	880554	Identifier	d		880475	0					
ANR	880555	Identifier	windowInfo		880475	1					
ANR	880556	ArgumentList	window		880475	1					
ANR	880557	Argument	window		880475	0					
ANR	880558	Identifier	window		880475	0					
ANR	880559	IdentifierDeclStatement	bool onCurrent = info -> isOnCurrentDesktop ( ) ;	1016:4:37258:37301	880475	3	True				
ANR	880560	IdentifierDecl	onCurrent = info -> isOnCurrentDesktop ( )		880475	0					
ANR	880561	IdentifierDeclType	bool		880475	0					
ANR	880562	Identifier	onCurrent		880475	1					
ANR	880563	AssignmentExpression	onCurrent = info -> isOnCurrentDesktop ( )		880475	2		=			
ANR	880564	Identifier	onCurrent		880475	0					
ANR	880565	CallExpression	info -> isOnCurrentDesktop ( )		880475	1					
ANR	880566	Callee	info -> isOnCurrentDesktop		880475	0					
ANR	880567	PtrMemberAccess	info -> isOnCurrentDesktop		880475	0					
ANR	880568	Identifier	info		880475	0					
ANR	880569	Identifier	isOnCurrentDesktop		880475	1					
ANR	880570	ArgumentList			880475	1					
ANR	880571	IfStatement	if ( ! onCurrent )		880475	4					
ANR	880572	Condition	! onCurrent	1018:8:37312:37321	880475	0	True				
ANR	880573	UnaryOperationExpression	! onCurrent		880475	0					
ANR	880574	UnaryOperator	!		880475	0					
ANR	880575	Identifier	onCurrent		880475	1					
ANR	880576	CompoundStatement		11:20:308:308	880475	1					
ANR	880577	ExpressionStatement	KWindowSystem :: setCurrentDesktop ( info -> desktop ( ) )	1019:8:37334:37383	880475	0	True				
ANR	880578	CallExpression	KWindowSystem :: setCurrentDesktop ( info -> desktop ( ) )		880475	0					
ANR	880579	Callee	KWindowSystem :: setCurrentDesktop		880475	0					
ANR	880580	Identifier	KWindowSystem :: setCurrentDesktop		880475	0					
ANR	880581	ArgumentList	info -> desktop ( )		880475	1					
ANR	880582	Argument	info -> desktop ( )		880475	0					
ANR	880583	CallExpression	info -> desktop ( )		880475	0					
ANR	880584	Callee	info -> desktop		880475	0					
ANR	880585	PtrMemberAccess	info -> desktop		880475	0					
ANR	880586	Identifier	info		880475	0					
ANR	880587	Identifier	desktop		880475	1					
ANR	880588	ArgumentList			880475	1					
ANR	880589	ExpressionStatement	KWindowSystem :: forceActiveWindow ( window )	1020:8:37393:37433	880475	1	True				
ANR	880590	CallExpression	KWindowSystem :: forceActiveWindow ( window )		880475	0					
ANR	880591	Callee	KWindowSystem :: forceActiveWindow		880475	0					
ANR	880592	Identifier	KWindowSystem :: forceActiveWindow		880475	0					
ANR	880593	ArgumentList	window		880475	1					
ANR	880594	Argument	window		880475	0					
ANR	880595	Identifier	window		880475	0					
ANR	880596	IfStatement	if ( info -> isMinimized ( ) )		880475	5					
ANR	880597	Condition	info -> isMinimized ( )	1023:8:37450:37468	880475	0	True				
ANR	880598	CallExpression	info -> isMinimized ( )		880475	0					
ANR	880599	Callee	info -> isMinimized		880475	0					
ANR	880600	PtrMemberAccess	info -> isMinimized		880475	0					
ANR	880601	Identifier	info		880475	0					
ANR	880602	Identifier	isMinimized		880475	1					
ANR	880603	ArgumentList			880475	1					
ANR	880604	CompoundStatement		16:29:455:455	880475	1					
ANR	880605	ExpressionStatement	KWindowSystem :: unminimizeWindow ( window )	1024:8:37481:37520	880475	0	True				
ANR	880606	CallExpression	KWindowSystem :: unminimizeWindow ( window )		880475	0					
ANR	880607	Callee	KWindowSystem :: unminimizeWindow		880475	0					
ANR	880608	Identifier	KWindowSystem :: unminimizeWindow		880475	0					
ANR	880609	ArgumentList	window		880475	1					
ANR	880610	Argument	window		880475	0					
ANR	880611	Identifier	window		880475	0					
ANR	880612	IdentifierDeclStatement	const QRect & geom = info -> geometry ( ) ;	1027:4:37533:37569	880475	6	True				
ANR	880613	IdentifierDecl	& geom = info -> geometry ( )		880475	0					
ANR	880614	IdentifierDeclType	const QRect &		880475	0					
ANR	880615	Identifier	geom		880475	1					
ANR	880616	AssignmentExpression	& geom = info -> geometry ( )		880475	2		=			
ANR	880617	Identifier	geom		880475	0					
ANR	880618	CallExpression	info -> geometry ( )		880475	1					
ANR	880619	Callee	info -> geometry		880475	0					
ANR	880620	PtrMemberAccess	info -> geometry		880475	0					
ANR	880621	Identifier	info		880475	0					
ANR	880622	Identifier	geometry		880475	1					
ANR	880623	ArgumentList			880475	1					
ANR	880624	IdentifierDeclStatement	"NETRootInfo ri ( QX11Info :: connection ( ) , NET :: WMMoveResize ) ;"	1029:4:37576:37633	880475	7	True				
ANR	880625	IdentifierDecl	"ri ( QX11Info :: connection ( ) , NET :: WMMoveResize )"		880475	0					
ANR	880626	IdentifierDeclType	NETRootInfo		880475	0					
ANR	880627	Identifier	ri		880475	1					
ANR	880628	Expression	"QX11Info :: connection ( ) , NET :: WMMoveResize"		880475	2					
ANR	880629	CallExpression	QX11Info :: connection ( )		880475	0					
ANR	880630	Callee	QX11Info :: connection		880475	0					
ANR	880631	Identifier	QX11Info :: connection		880475	0					
ANR	880632	ArgumentList			880475	1					
ANR	880633	Identifier	NET :: WMMoveResize		880475	1					
ANR	880634	ExpressionStatement	"ri . moveResizeRequest ( window , geom . bottomRight ( ) . x ( ) , geom . bottomRight ( ) . y ( ) , NET :: BottomRight )"	1030:4:37639:37733	880475	8	True				
ANR	880635	CallExpression	"ri . moveResizeRequest ( window , geom . bottomRight ( ) . x ( ) , geom . bottomRight ( ) . y ( ) , NET :: BottomRight )"		880475	0					
ANR	880636	Callee	ri . moveResizeRequest		880475	0					
ANR	880637	MemberAccess	ri . moveResizeRequest		880475	0					
ANR	880638	Identifier	ri		880475	0					
ANR	880639	Identifier	moveResizeRequest		880475	1					
ANR	880640	ArgumentList	window		880475	1					
ANR	880641	Argument	window		880475	0					
ANR	880642	Identifier	window		880475	0					
ANR	880643	Argument	geom . bottomRight ( ) . x ( )		880475	1					
ANR	880644	CallExpression	geom . bottomRight ( ) . x ( )		880475	0					
ANR	880645	Callee	geom . bottomRight ( ) . x		880475	0					
ANR	880646	MemberAccess	geom . bottomRight ( ) . x		880475	0					
ANR	880647	CallExpression	geom . bottomRight ( )		880475	0					
ANR	880648	Callee	geom . bottomRight		880475	0					
ANR	880649	MemberAccess	geom . bottomRight		880475	0					
ANR	880650	Identifier	geom		880475	0					
ANR	880651	Identifier	bottomRight		880475	1					
ANR	880652	ArgumentList			880475	1					
ANR	880653	Identifier	x		880475	1					
ANR	880654	ArgumentList			880475	1					
ANR	880655	Argument	geom . bottomRight ( ) . y ( )		880475	2					
ANR	880656	CallExpression	geom . bottomRight ( ) . y ( )		880475	0					
ANR	880657	Callee	geom . bottomRight ( ) . y		880475	0					
ANR	880658	MemberAccess	geom . bottomRight ( ) . y		880475	0					
ANR	880659	CallExpression	geom . bottomRight ( )		880475	0					
ANR	880660	Callee	geom . bottomRight		880475	0					
ANR	880661	MemberAccess	geom . bottomRight		880475	0					
ANR	880662	Identifier	geom		880475	0					
ANR	880663	Identifier	bottomRight		880475	1					
ANR	880664	ArgumentList			880475	1					
ANR	880665	Identifier	y		880475	1					
ANR	880666	ArgumentList			880475	1					
ANR	880667	Argument	NET :: BottomRight		880475	3					
ANR	880668	Identifier	NET :: BottomRight		880475	0					
ANR	880669	ReturnType	void		880475	1					
ANR	880670	Identifier	XWindowTasksModel :: requestResize		880475	2					
ANR	880671	ParameterList	const QModelIndex & index		880475	3					
ANR	880672	Parameter	const QModelIndex & index	1007:38:36989:37012	880475	0	True				
ANR	880673	ParameterType	const QModelIndex &		880475	0					
ANR	880674	Identifier	index		880475	1					
ANR	880675	CFGEntryNode	ENTRY		880475		True				
ANR	880676	CFGExitNode	EXIT		880475		True				
ANR	880677	Symbol	geom . bottomRight ( ) . y		880475						
ANR	880678	Symbol	d -> windowInfo		880475						
ANR	880679	Symbol	geom . bottomRight ( ) . x		880475						
ANR	880680	Symbol	geom . bottomRight		880475						
ANR	880681	Symbol	index . isValid		880475						
ANR	880682	Symbol	onCurrent		880475						
ANR	880683	Symbol	d -> windows . count		880475						
ANR	880684	Symbol	geom		880475						
ANR	880685	Symbol	info -> desktop		880475						
ANR	880686	Symbol	info -> isOnCurrentDesktop		880475						
ANR	880687	Symbol	index . row		880475						
ANR	880688	Symbol	d -> windows		880475						
ANR	880689	Symbol	d -> windows . at		880475						
ANR	880690	Symbol	info -> geometry		880475						
ANR	880691	Symbol	info		880475						
ANR	880692	Symbol	info -> isMinimized		880475						
ANR	880693	Symbol	index . model		880475						
ANR	880694	Symbol	d		880475						
ANR	880695	Symbol	this		880475						
ANR	880696	Symbol	index		880475						
ANR	880697	Symbol	* d		880475						
ANR	880698	Symbol	ri		880475						
ANR	880699	Symbol	window		880475						
ANR	880700	Symbol	* info		880475						
ANR	880701	Symbol	NET :: BottomRight		880475						
ANR	880702	Function	XWindowTasksModel :: requestToggleMinimized	1033:0:37738:38503							
ANR	880703	FunctionDef	XWindowTasksModel :: requestToggleMinimized (const QModelIndex & index)		880702	0					
ANR	880704	CompoundStatement		1034:0:37811:38503	880702	0					
ANR	880705	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		880702	0					
ANR	880706	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1035:8:37821:37917	880702	0	True				
ANR	880707	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880702	0		||			
ANR	880708	UnaryOperationExpression	! index . isValid ( )		880702	0					
ANR	880709	UnaryOperator	!		880702	0					
ANR	880710	CallExpression	index . isValid ( )		880702	1					
ANR	880711	Callee	index . isValid		880702	0					
ANR	880712	MemberAccess	index . isValid		880702	0					
ANR	880713	Identifier	index		880702	0					
ANR	880714	Identifier	isValid		880702	1					
ANR	880715	ArgumentList			880702	1					
ANR	880716	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880702	1		||			
ANR	880717	EqualityExpression	index . model ( ) != this		880702	0		!=			
ANR	880718	CallExpression	index . model ( )		880702	0					
ANR	880719	Callee	index . model		880702	0					
ANR	880720	MemberAccess	index . model		880702	0					
ANR	880721	Identifier	index		880702	0					
ANR	880722	Identifier	model		880702	1					
ANR	880723	ArgumentList			880702	1					
ANR	880724	Identifier	this		880702	1					
ANR	880725	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880702	1		||			
ANR	880726	RelationalExpression	index . row ( ) < 0		880702	0		<			
ANR	880727	CallExpression	index . row ( )		880702	0					
ANR	880728	Callee	index . row		880702	0					
ANR	880729	MemberAccess	index . row		880702	0					
ANR	880730	Identifier	index		880702	0					
ANR	880731	Identifier	row		880702	1					
ANR	880732	ArgumentList			880702	1					
ANR	880733	PrimaryExpression	0		880702	1					
ANR	880734	RelationalExpression	index . row ( ) >= d -> windows . count ( )		880702	1		>=			
ANR	880735	CallExpression	index . row ( )		880702	0					
ANR	880736	Callee	index . row		880702	0					
ANR	880737	MemberAccess	index . row		880702	0					
ANR	880738	Identifier	index		880702	0					
ANR	880739	Identifier	row		880702	1					
ANR	880740	ArgumentList			880702	1					
ANR	880741	CallExpression	d -> windows . count ( )		880702	1					
ANR	880742	Callee	d -> windows . count		880702	0					
ANR	880743	MemberAccess	d -> windows . count		880702	0					
ANR	880744	PtrMemberAccess	d -> windows		880702	0					
ANR	880745	Identifier	d		880702	0					
ANR	880746	Identifier	windows		880702	1					
ANR	880747	Identifier	count		880702	1					
ANR	880748	ArgumentList			880702	1					
ANR	880749	CompoundStatement		2:107:108:108	880702	1					
ANR	880750	ReturnStatement	return ;	1036:8:37930:37936	880702	0	True				
ANR	880751	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1039:4:37949:37994	880702	1	True				
ANR	880752	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		880702	0					
ANR	880753	IdentifierDeclType	const WId		880702	0					
ANR	880754	Identifier	window		880702	1					
ANR	880755	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		880702	2		=			
ANR	880756	Identifier	window		880702	0					
ANR	880757	CallExpression	d -> windows . at ( index . row ( ) )		880702	1					
ANR	880758	Callee	d -> windows . at		880702	0					
ANR	880759	MemberAccess	d -> windows . at		880702	0					
ANR	880760	PtrMemberAccess	d -> windows		880702	0					
ANR	880761	Identifier	d		880702	0					
ANR	880762	Identifier	windows		880702	1					
ANR	880763	Identifier	at		880702	1					
ANR	880764	ArgumentList	index . row ( )		880702	1					
ANR	880765	Argument	index . row ( )		880702	0					
ANR	880766	CallExpression	index . row ( )		880702	0					
ANR	880767	Callee	index . row		880702	0					
ANR	880768	MemberAccess	index . row		880702	0					
ANR	880769	Identifier	index		880702	0					
ANR	880770	Identifier	row		880702	1					
ANR	880771	ArgumentList			880702	1					
ANR	880772	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	1040:4:38000:38047	880702	2	True				
ANR	880773	IdentifierDecl	* info = d -> windowInfo ( window )		880702	0					
ANR	880774	IdentifierDeclType	const KWindowInfo *		880702	0					
ANR	880775	Identifier	info		880702	1					
ANR	880776	AssignmentExpression	* info = d -> windowInfo ( window )		880702	2		=			
ANR	880777	Identifier	info		880702	0					
ANR	880778	CallExpression	d -> windowInfo ( window )		880702	1					
ANR	880779	Callee	d -> windowInfo		880702	0					
ANR	880780	PtrMemberAccess	d -> windowInfo		880702	0					
ANR	880781	Identifier	d		880702	0					
ANR	880782	Identifier	windowInfo		880702	1					
ANR	880783	ArgumentList	window		880702	1					
ANR	880784	Argument	window		880702	0					
ANR	880785	Identifier	window		880702	0					
ANR	880786	IfStatement	if ( info -> isMinimized ( ) )		880702	3					
ANR	880787	Condition	info -> isMinimized ( )	1042:8:38058:38076	880702	0	True				
ANR	880788	CallExpression	info -> isMinimized ( )		880702	0					
ANR	880789	Callee	info -> isMinimized		880702	0					
ANR	880790	PtrMemberAccess	info -> isMinimized		880702	0					
ANR	880791	Identifier	info		880702	0					
ANR	880792	Identifier	isMinimized		880702	1					
ANR	880793	ArgumentList			880702	1					
ANR	880794	CompoundStatement		10:8:277:320	880702	1					
ANR	880795	IdentifierDeclStatement	bool onCurrent = info -> isOnCurrentDesktop ( ) ;	1043:8:38089:38132	880702	0	True				
ANR	880796	IdentifierDecl	onCurrent = info -> isOnCurrentDesktop ( )		880702	0					
ANR	880797	IdentifierDeclType	bool		880702	0					
ANR	880798	Identifier	onCurrent		880702	1					
ANR	880799	AssignmentExpression	onCurrent = info -> isOnCurrentDesktop ( )		880702	2		=			
ANR	880800	Identifier	onCurrent		880702	0					
ANR	880801	CallExpression	info -> isOnCurrentDesktop ( )		880702	1					
ANR	880802	Callee	info -> isOnCurrentDesktop		880702	0					
ANR	880803	PtrMemberAccess	info -> isOnCurrentDesktop		880702	0					
ANR	880804	Identifier	info		880702	0					
ANR	880805	Identifier	isOnCurrentDesktop		880702	1					
ANR	880806	ArgumentList			880702	1					
ANR	880807	IfStatement	if ( ! onCurrent )		880702	1					
ANR	880808	Condition	! onCurrent	1046:12:38210:38219	880702	0	True				
ANR	880809	UnaryOperationExpression	! onCurrent		880702	0					
ANR	880810	UnaryOperator	!		880702	0					
ANR	880811	Identifier	onCurrent		880702	1					
ANR	880812	CompoundStatement		13:24:410:410	880702	1					
ANR	880813	ExpressionStatement	KWindowSystem :: setCurrentDesktop ( info -> desktop ( ) )	1047:12:38236:38285	880702	0	True				
ANR	880814	CallExpression	KWindowSystem :: setCurrentDesktop ( info -> desktop ( ) )		880702	0					
ANR	880815	Callee	KWindowSystem :: setCurrentDesktop		880702	0					
ANR	880816	Identifier	KWindowSystem :: setCurrentDesktop		880702	0					
ANR	880817	ArgumentList	info -> desktop ( )		880702	1					
ANR	880818	Argument	info -> desktop ( )		880702	0					
ANR	880819	CallExpression	info -> desktop ( )		880702	0					
ANR	880820	Callee	info -> desktop		880702	0					
ANR	880821	PtrMemberAccess	info -> desktop		880702	0					
ANR	880822	Identifier	info		880702	0					
ANR	880823	Identifier	desktop		880702	1					
ANR	880824	ArgumentList			880702	1					
ANR	880825	ExpressionStatement	KWindowSystem :: unminimizeWindow ( window )	1050:8:38306:38345	880702	2	True				
ANR	880826	CallExpression	KWindowSystem :: unminimizeWindow ( window )		880702	0					
ANR	880827	Callee	KWindowSystem :: unminimizeWindow		880702	0					
ANR	880828	Identifier	KWindowSystem :: unminimizeWindow		880702	0					
ANR	880829	ArgumentList	window		880702	1					
ANR	880830	Argument	window		880702	0					
ANR	880831	Identifier	window		880702	0					
ANR	880832	IfStatement	if ( onCurrent )		880702	3					
ANR	880833	Condition	onCurrent	1052:12:38360:38368	880702	0	True				
ANR	880834	Identifier	onCurrent		880702	0					
ANR	880835	CompoundStatement		19:23:559:559	880702	1					
ANR	880836	ExpressionStatement	KWindowSystem :: forceActiveWindow ( window )	1053:12:38385:38425	880702	0	True				
ANR	880837	CallExpression	KWindowSystem :: forceActiveWindow ( window )		880702	0					
ANR	880838	Callee	KWindowSystem :: forceActiveWindow		880702	0					
ANR	880839	Identifier	KWindowSystem :: forceActiveWindow		880702	0					
ANR	880840	ArgumentList	window		880702	1					
ANR	880841	Argument	window		880702	0					
ANR	880842	Identifier	window		880702	0					
ANR	880843	ElseStatement	else		880702	0					
ANR	880844	CompoundStatement		22:11:636:636	880702	0					
ANR	880845	ExpressionStatement	KWindowSystem :: minimizeWindow ( window )	1056:8:38458:38495	880702	0	True				
ANR	880846	CallExpression	KWindowSystem :: minimizeWindow ( window )		880702	0					
ANR	880847	Callee	KWindowSystem :: minimizeWindow		880702	0					
ANR	880848	Identifier	KWindowSystem :: minimizeWindow		880702	0					
ANR	880849	ArgumentList	window		880702	1					
ANR	880850	Argument	window		880702	0					
ANR	880851	Identifier	window		880702	0					
ANR	880852	ReturnType	void		880702	1					
ANR	880853	Identifier	XWindowTasksModel :: requestToggleMinimized		880702	2					
ANR	880854	ParameterList	const QModelIndex & index		880702	3					
ANR	880855	Parameter	const QModelIndex & index	1033:47:37785:37808	880702	0	True				
ANR	880856	ParameterType	const QModelIndex &		880702	0					
ANR	880857	Identifier	index		880702	1					
ANR	880858	CFGEntryNode	ENTRY		880702		True				
ANR	880859	CFGExitNode	EXIT		880702		True				
ANR	880860	Symbol	index . model		880702						
ANR	880861	Symbol	d -> windowInfo		880702						
ANR	880862	Symbol	d		880702						
ANR	880863	Symbol	this		880702						
ANR	880864	Symbol	index		880702						
ANR	880865	Symbol	index . isValid		880702						
ANR	880866	Symbol	onCurrent		880702						
ANR	880867	Symbol	d -> windows . count		880702						
ANR	880868	Symbol	* d		880702						
ANR	880869	Symbol	info -> desktop		880702						
ANR	880870	Symbol	info -> isOnCurrentDesktop		880702						
ANR	880871	Symbol	index . row		880702						
ANR	880872	Symbol	d -> windows		880702						
ANR	880873	Symbol	window		880702						
ANR	880874	Symbol	* info		880702						
ANR	880875	Symbol	d -> windows . at		880702						
ANR	880876	Symbol	info		880702						
ANR	880877	Symbol	info -> isMinimized		880702						
ANR	880878	Function	XWindowTasksModel :: requestToggleMaximized	1060:0:38506:39473							
ANR	880879	FunctionDef	XWindowTasksModel :: requestToggleMaximized (const QModelIndex & index)		880878	0					
ANR	880880	CompoundStatement		1061:0:38579:39473	880878	0					
ANR	880881	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		880878	0					
ANR	880882	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1062:8:38589:38685	880878	0	True				
ANR	880883	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880878	0		||			
ANR	880884	UnaryOperationExpression	! index . isValid ( )		880878	0					
ANR	880885	UnaryOperator	!		880878	0					
ANR	880886	CallExpression	index . isValid ( )		880878	1					
ANR	880887	Callee	index . isValid		880878	0					
ANR	880888	MemberAccess	index . isValid		880878	0					
ANR	880889	Identifier	index		880878	0					
ANR	880890	Identifier	isValid		880878	1					
ANR	880891	ArgumentList			880878	1					
ANR	880892	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880878	1		||			
ANR	880893	EqualityExpression	index . model ( ) != this		880878	0		!=			
ANR	880894	CallExpression	index . model ( )		880878	0					
ANR	880895	Callee	index . model		880878	0					
ANR	880896	MemberAccess	index . model		880878	0					
ANR	880897	Identifier	index		880878	0					
ANR	880898	Identifier	model		880878	1					
ANR	880899	ArgumentList			880878	1					
ANR	880900	Identifier	this		880878	1					
ANR	880901	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		880878	1		||			
ANR	880902	RelationalExpression	index . row ( ) < 0		880878	0		<			
ANR	880903	CallExpression	index . row ( )		880878	0					
ANR	880904	Callee	index . row		880878	0					
ANR	880905	MemberAccess	index . row		880878	0					
ANR	880906	Identifier	index		880878	0					
ANR	880907	Identifier	row		880878	1					
ANR	880908	ArgumentList			880878	1					
ANR	880909	PrimaryExpression	0		880878	1					
ANR	880910	RelationalExpression	index . row ( ) >= d -> windows . count ( )		880878	1		>=			
ANR	880911	CallExpression	index . row ( )		880878	0					
ANR	880912	Callee	index . row		880878	0					
ANR	880913	MemberAccess	index . row		880878	0					
ANR	880914	Identifier	index		880878	0					
ANR	880915	Identifier	row		880878	1					
ANR	880916	ArgumentList			880878	1					
ANR	880917	CallExpression	d -> windows . count ( )		880878	1					
ANR	880918	Callee	d -> windows . count		880878	0					
ANR	880919	MemberAccess	d -> windows . count		880878	0					
ANR	880920	PtrMemberAccess	d -> windows		880878	0					
ANR	880921	Identifier	d		880878	0					
ANR	880922	Identifier	windows		880878	1					
ANR	880923	Identifier	count		880878	1					
ANR	880924	ArgumentList			880878	1					
ANR	880925	CompoundStatement		2:107:108:108	880878	1					
ANR	880926	ReturnStatement	return ;	1063:8:38698:38704	880878	0	True				
ANR	880927	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1066:4:38717:38762	880878	1	True				
ANR	880928	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		880878	0					
ANR	880929	IdentifierDeclType	const WId		880878	0					
ANR	880930	Identifier	window		880878	1					
ANR	880931	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		880878	2		=			
ANR	880932	Identifier	window		880878	0					
ANR	880933	CallExpression	d -> windows . at ( index . row ( ) )		880878	1					
ANR	880934	Callee	d -> windows . at		880878	0					
ANR	880935	MemberAccess	d -> windows . at		880878	0					
ANR	880936	PtrMemberAccess	d -> windows		880878	0					
ANR	880937	Identifier	d		880878	0					
ANR	880938	Identifier	windows		880878	1					
ANR	880939	Identifier	at		880878	1					
ANR	880940	ArgumentList	index . row ( )		880878	1					
ANR	880941	Argument	index . row ( )		880878	0					
ANR	880942	CallExpression	index . row ( )		880878	0					
ANR	880943	Callee	index . row		880878	0					
ANR	880944	MemberAccess	index . row		880878	0					
ANR	880945	Identifier	index		880878	0					
ANR	880946	Identifier	row		880878	1					
ANR	880947	ArgumentList			880878	1					
ANR	880948	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	1067:4:38768:38815	880878	2	True				
ANR	880949	IdentifierDecl	* info = d -> windowInfo ( window )		880878	0					
ANR	880950	IdentifierDeclType	const KWindowInfo *		880878	0					
ANR	880951	Identifier	info		880878	1					
ANR	880952	AssignmentExpression	* info = d -> windowInfo ( window )		880878	2		=			
ANR	880953	Identifier	info		880878	0					
ANR	880954	CallExpression	d -> windowInfo ( window )		880878	1					
ANR	880955	Callee	d -> windowInfo		880878	0					
ANR	880956	PtrMemberAccess	d -> windowInfo		880878	0					
ANR	880957	Identifier	d		880878	0					
ANR	880958	Identifier	windowInfo		880878	1					
ANR	880959	ArgumentList	window		880878	1					
ANR	880960	Argument	window		880878	0					
ANR	880961	Identifier	window		880878	0					
ANR	880962	IdentifierDeclStatement	bool onCurrent = info -> isOnCurrentDesktop ( ) ;	1068:4:38821:38864	880878	3	True				
ANR	880963	IdentifierDecl	onCurrent = info -> isOnCurrentDesktop ( )		880878	0					
ANR	880964	IdentifierDeclType	bool		880878	0					
ANR	880965	Identifier	onCurrent		880878	1					
ANR	880966	AssignmentExpression	onCurrent = info -> isOnCurrentDesktop ( )		880878	2		=			
ANR	880967	Identifier	onCurrent		880878	0					
ANR	880968	CallExpression	info -> isOnCurrentDesktop ( )		880878	1					
ANR	880969	Callee	info -> isOnCurrentDesktop		880878	0					
ANR	880970	PtrMemberAccess	info -> isOnCurrentDesktop		880878	0					
ANR	880971	Identifier	info		880878	0					
ANR	880972	Identifier	isOnCurrentDesktop		880878	1					
ANR	880973	ArgumentList			880878	1					
ANR	880974	IdentifierDeclStatement	bool restore = ( info -> hasState ( NET :: MaxHoriz ) && info -> hasState ( NET :: MaxVert ) ) ;	1069:4:38870:38948	880878	4	True				
ANR	880975	IdentifierDecl	restore = ( info -> hasState ( NET :: MaxHoriz ) && info -> hasState ( NET :: MaxVert ) )		880878	0					
ANR	880976	IdentifierDeclType	bool		880878	0					
ANR	880977	Identifier	restore		880878	1					
ANR	880978	AssignmentExpression	restore = ( info -> hasState ( NET :: MaxHoriz ) && info -> hasState ( NET :: MaxVert ) )		880878	2		=			
ANR	880979	Identifier	restore		880878	0					
ANR	880980	AndExpression	info -> hasState ( NET :: MaxHoriz ) && info -> hasState ( NET :: MaxVert )		880878	1		&&			
ANR	880981	CallExpression	info -> hasState ( NET :: MaxHoriz )		880878	0					
ANR	880982	Callee	info -> hasState		880878	0					
ANR	880983	PtrMemberAccess	info -> hasState		880878	0					
ANR	880984	Identifier	info		880878	0					
ANR	880985	Identifier	hasState		880878	1					
ANR	880986	ArgumentList	NET :: MaxHoriz		880878	1					
ANR	880987	Argument	NET :: MaxHoriz		880878	0					
ANR	880988	Identifier	NET :: MaxHoriz		880878	0					
ANR	880989	CallExpression	info -> hasState ( NET :: MaxVert )		880878	1					
ANR	880990	Callee	info -> hasState		880878	0					
ANR	880991	PtrMemberAccess	info -> hasState		880878	0					
ANR	880992	Identifier	info		880878	0					
ANR	880993	Identifier	hasState		880878	1					
ANR	880994	ArgumentList	NET :: MaxVert		880878	1					
ANR	880995	Argument	NET :: MaxVert		880878	0					
ANR	880996	Identifier	NET :: MaxVert		880878	0					
ANR	880997	IfStatement	if ( ! onCurrent )		880878	5					
ANR	880998	Condition	! onCurrent	1072:8:39018:39027	880878	0	True				
ANR	880999	UnaryOperationExpression	! onCurrent		880878	0					
ANR	881000	UnaryOperator	!		880878	0					
ANR	881001	Identifier	onCurrent		880878	1					
ANR	881002	CompoundStatement		12:20:450:450	880878	1					
ANR	881003	ExpressionStatement	KWindowSystem :: setCurrentDesktop ( info -> desktop ( ) )	1073:8:39040:39089	880878	0	True				
ANR	881004	CallExpression	KWindowSystem :: setCurrentDesktop ( info -> desktop ( ) )		880878	0					
ANR	881005	Callee	KWindowSystem :: setCurrentDesktop		880878	0					
ANR	881006	Identifier	KWindowSystem :: setCurrentDesktop		880878	0					
ANR	881007	ArgumentList	info -> desktop ( )		880878	1					
ANR	881008	Argument	info -> desktop ( )		880878	0					
ANR	881009	CallExpression	info -> desktop ( )		880878	0					
ANR	881010	Callee	info -> desktop		880878	0					
ANR	881011	PtrMemberAccess	info -> desktop		880878	0					
ANR	881012	Identifier	info		880878	0					
ANR	881013	Identifier	desktop		880878	1					
ANR	881014	ArgumentList			880878	1					
ANR	881015	IfStatement	if ( info -> isMinimized ( ) )		880878	6					
ANR	881016	Condition	info -> isMinimized ( )	1076:8:39106:39124	880878	0	True				
ANR	881017	CallExpression	info -> isMinimized ( )		880878	0					
ANR	881018	Callee	info -> isMinimized		880878	0					
ANR	881019	PtrMemberAccess	info -> isMinimized		880878	0					
ANR	881020	Identifier	info		880878	0					
ANR	881021	Identifier	isMinimized		880878	1					
ANR	881022	ArgumentList			880878	1					
ANR	881023	CompoundStatement		16:29:547:547	880878	1					
ANR	881024	ExpressionStatement	KWindowSystem :: unminimizeWindow ( window )	1077:8:39137:39176	880878	0	True				
ANR	881025	CallExpression	KWindowSystem :: unminimizeWindow ( window )		880878	0					
ANR	881026	Callee	KWindowSystem :: unminimizeWindow		880878	0					
ANR	881027	Identifier	KWindowSystem :: unminimizeWindow		880878	0					
ANR	881028	ArgumentList	window		880878	1					
ANR	881029	Argument	window		880878	0					
ANR	881030	Identifier	window		880878	0					
ANR	881031	IdentifierDeclStatement	"NETWinInfo ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 ) ;"	1080:4:39189:39278	880878	7	True				
ANR	881032	IdentifierDecl	"ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 )"		880878	0					
ANR	881033	IdentifierDeclType	NETWinInfo		880878	0					
ANR	881034	Identifier	ni		880878	1					
ANR	881035	Expression	"QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		880878	2					
ANR	881036	CallExpression	QX11Info :: connection ( )		880878	0					
ANR	881037	Callee	QX11Info :: connection		880878	0					
ANR	881038	Identifier	QX11Info :: connection		880878	0					
ANR	881039	ArgumentList			880878	1					
ANR	881040	Expression	"window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		880878	1					
ANR	881041	Identifier	window		880878	0					
ANR	881042	Expression	"QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		880878	1					
ANR	881043	CallExpression	QX11Info :: appRootWindow ( )		880878	0					
ANR	881044	Callee	QX11Info :: appRootWindow		880878	0					
ANR	881045	Identifier	QX11Info :: appRootWindow		880878	0					
ANR	881046	ArgumentList			880878	1					
ANR	881047	Expression	"NET :: WMState , 0"		880878	1					
ANR	881048	Identifier	NET :: WMState		880878	0					
ANR	881049	PrimaryExpression	0		880878	1					
ANR	881050	IfStatement	if ( restore )		880878	8					
ANR	881051	Condition	restore	1082:8:39289:39295	880878	0	True				
ANR	881052	Identifier	restore		880878	0					
ANR	881053	CompoundStatement		22:17:718:718	880878	1					
ANR	881054	ExpressionStatement	"ni . setState ( 0 , NET :: Max )"	1083:8:39308:39332	880878	0	True				
ANR	881055	CallExpression	"ni . setState ( 0 , NET :: Max )"		880878	0					
ANR	881056	Callee	ni . setState		880878	0					
ANR	881057	MemberAccess	ni . setState		880878	0					
ANR	881058	Identifier	ni		880878	0					
ANR	881059	Identifier	setState		880878	1					
ANR	881060	ArgumentList	0		880878	1					
ANR	881061	Argument	0		880878	0					
ANR	881062	PrimaryExpression	0		880878	0					
ANR	881063	Argument	NET :: Max		880878	1					
ANR	881064	Identifier	NET :: Max		880878	0					
ANR	881065	ElseStatement	else		880878	0					
ANR	881066	CompoundStatement		24:11:765:765	880878	0					
ANR	881067	ExpressionStatement	"ni . setState ( NET :: Max , NET :: Max )"	1085:8:39355:39386	880878	0	True				
ANR	881068	CallExpression	"ni . setState ( NET :: Max , NET :: Max )"		880878	0					
ANR	881069	Callee	ni . setState		880878	0					
ANR	881070	MemberAccess	ni . setState		880878	0					
ANR	881071	Identifier	ni		880878	0					
ANR	881072	Identifier	setState		880878	1					
ANR	881073	ArgumentList	NET :: Max		880878	1					
ANR	881074	Argument	NET :: Max		880878	0					
ANR	881075	Identifier	NET :: Max		880878	0					
ANR	881076	Argument	NET :: Max		880878	1					
ANR	881077	Identifier	NET :: Max		880878	0					
ANR	881078	IfStatement	if ( ! onCurrent )		880878	9					
ANR	881079	Condition	! onCurrent	1088:8:39403:39412	880878	0	True				
ANR	881080	UnaryOperationExpression	! onCurrent		880878	0					
ANR	881081	UnaryOperator	!		880878	0					
ANR	881082	Identifier	onCurrent		880878	1					
ANR	881083	CompoundStatement		28:20:835:835	880878	1					
ANR	881084	ExpressionStatement	KWindowSystem :: forceActiveWindow ( window )	1089:8:39425:39465	880878	0	True				
ANR	881085	CallExpression	KWindowSystem :: forceActiveWindow ( window )		880878	0					
ANR	881086	Callee	KWindowSystem :: forceActiveWindow		880878	0					
ANR	881087	Identifier	KWindowSystem :: forceActiveWindow		880878	0					
ANR	881088	ArgumentList	window		880878	1					
ANR	881089	Argument	window		880878	0					
ANR	881090	Identifier	window		880878	0					
ANR	881091	ReturnType	void		880878	1					
ANR	881092	Identifier	XWindowTasksModel :: requestToggleMaximized		880878	2					
ANR	881093	ParameterList	const QModelIndex & index		880878	3					
ANR	881094	Parameter	const QModelIndex & index	1060:47:38553:38576	880878	0	True				
ANR	881095	ParameterType	const QModelIndex &		880878	0					
ANR	881096	Identifier	index		880878	1					
ANR	881097	CFGEntryNode	ENTRY		880878		True				
ANR	881098	CFGExitNode	EXIT		880878		True				
ANR	881099	Symbol	index . model		880878						
ANR	881100	Symbol	NET :: MaxVert		880878						
ANR	881101	Symbol	d -> windowInfo		880878						
ANR	881102	Symbol	d		880878						
ANR	881103	Symbol	restore		880878						
ANR	881104	Symbol	this		880878						
ANR	881105	Symbol	NET :: MaxHoriz		880878						
ANR	881106	Symbol	index		880878						
ANR	881107	Symbol	index . isValid		880878						
ANR	881108	Symbol	onCurrent		880878						
ANR	881109	Symbol	d -> windows . count		880878						
ANR	881110	Symbol	* d		880878						
ANR	881111	Symbol	info -> hasState		880878						
ANR	881112	Symbol	NET :: Max		880878						
ANR	881113	Symbol	info -> desktop		880878						
ANR	881114	Symbol	info -> isOnCurrentDesktop		880878						
ANR	881115	Symbol	index . row		880878						
ANR	881116	Symbol	d -> windows		880878						
ANR	881117	Symbol	window		880878						
ANR	881118	Symbol	* info		880878						
ANR	881119	Symbol	ni		880878						
ANR	881120	Symbol	d -> windows . at		880878						
ANR	881121	Symbol	info		880878						
ANR	881122	Symbol	info -> isMinimized		880878						
ANR	881123	Function	XWindowTasksModel :: requestToggleKeepAbove	1093:0:39476:40042							
ANR	881124	FunctionDef	XWindowTasksModel :: requestToggleKeepAbove (const QModelIndex & index)		881123	0					
ANR	881125	CompoundStatement		1094:0:39549:40042	881123	0					
ANR	881126	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		881123	0					
ANR	881127	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1095:8:39559:39655	881123	0	True				
ANR	881128	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881123	0		||			
ANR	881129	UnaryOperationExpression	! index . isValid ( )		881123	0					
ANR	881130	UnaryOperator	!		881123	0					
ANR	881131	CallExpression	index . isValid ( )		881123	1					
ANR	881132	Callee	index . isValid		881123	0					
ANR	881133	MemberAccess	index . isValid		881123	0					
ANR	881134	Identifier	index		881123	0					
ANR	881135	Identifier	isValid		881123	1					
ANR	881136	ArgumentList			881123	1					
ANR	881137	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881123	1		||			
ANR	881138	EqualityExpression	index . model ( ) != this		881123	0		!=			
ANR	881139	CallExpression	index . model ( )		881123	0					
ANR	881140	Callee	index . model		881123	0					
ANR	881141	MemberAccess	index . model		881123	0					
ANR	881142	Identifier	index		881123	0					
ANR	881143	Identifier	model		881123	1					
ANR	881144	ArgumentList			881123	1					
ANR	881145	Identifier	this		881123	1					
ANR	881146	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881123	1		||			
ANR	881147	RelationalExpression	index . row ( ) < 0		881123	0		<			
ANR	881148	CallExpression	index . row ( )		881123	0					
ANR	881149	Callee	index . row		881123	0					
ANR	881150	MemberAccess	index . row		881123	0					
ANR	881151	Identifier	index		881123	0					
ANR	881152	Identifier	row		881123	1					
ANR	881153	ArgumentList			881123	1					
ANR	881154	PrimaryExpression	0		881123	1					
ANR	881155	RelationalExpression	index . row ( ) >= d -> windows . count ( )		881123	1		>=			
ANR	881156	CallExpression	index . row ( )		881123	0					
ANR	881157	Callee	index . row		881123	0					
ANR	881158	MemberAccess	index . row		881123	0					
ANR	881159	Identifier	index		881123	0					
ANR	881160	Identifier	row		881123	1					
ANR	881161	ArgumentList			881123	1					
ANR	881162	CallExpression	d -> windows . count ( )		881123	1					
ANR	881163	Callee	d -> windows . count		881123	0					
ANR	881164	MemberAccess	d -> windows . count		881123	0					
ANR	881165	PtrMemberAccess	d -> windows		881123	0					
ANR	881166	Identifier	d		881123	0					
ANR	881167	Identifier	windows		881123	1					
ANR	881168	Identifier	count		881123	1					
ANR	881169	ArgumentList			881123	1					
ANR	881170	CompoundStatement		2:107:108:108	881123	1					
ANR	881171	ReturnStatement	return ;	1096:8:39668:39674	881123	0	True				
ANR	881172	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1099:4:39687:39732	881123	1	True				
ANR	881173	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		881123	0					
ANR	881174	IdentifierDeclType	const WId		881123	0					
ANR	881175	Identifier	window		881123	1					
ANR	881176	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		881123	2		=			
ANR	881177	Identifier	window		881123	0					
ANR	881178	CallExpression	d -> windows . at ( index . row ( ) )		881123	1					
ANR	881179	Callee	d -> windows . at		881123	0					
ANR	881180	MemberAccess	d -> windows . at		881123	0					
ANR	881181	PtrMemberAccess	d -> windows		881123	0					
ANR	881182	Identifier	d		881123	0					
ANR	881183	Identifier	windows		881123	1					
ANR	881184	Identifier	at		881123	1					
ANR	881185	ArgumentList	index . row ( )		881123	1					
ANR	881186	Argument	index . row ( )		881123	0					
ANR	881187	CallExpression	index . row ( )		881123	0					
ANR	881188	Callee	index . row		881123	0					
ANR	881189	MemberAccess	index . row		881123	0					
ANR	881190	Identifier	index		881123	0					
ANR	881191	Identifier	row		881123	1					
ANR	881192	ArgumentList			881123	1					
ANR	881193	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	1100:4:39738:39785	881123	2	True				
ANR	881194	IdentifierDecl	* info = d -> windowInfo ( window )		881123	0					
ANR	881195	IdentifierDeclType	const KWindowInfo *		881123	0					
ANR	881196	Identifier	info		881123	1					
ANR	881197	AssignmentExpression	* info = d -> windowInfo ( window )		881123	2		=			
ANR	881198	Identifier	info		881123	0					
ANR	881199	CallExpression	d -> windowInfo ( window )		881123	1					
ANR	881200	Callee	d -> windowInfo		881123	0					
ANR	881201	PtrMemberAccess	d -> windowInfo		881123	0					
ANR	881202	Identifier	d		881123	0					
ANR	881203	Identifier	windowInfo		881123	1					
ANR	881204	ArgumentList	window		881123	1					
ANR	881205	Argument	window		881123	0					
ANR	881206	Identifier	window		881123	0					
ANR	881207	IdentifierDeclStatement	"NETWinInfo ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 ) ;"	1102:4:39792:39881	881123	3	True				
ANR	881208	IdentifierDecl	"ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 )"		881123	0					
ANR	881209	IdentifierDeclType	NETWinInfo		881123	0					
ANR	881210	Identifier	ni		881123	1					
ANR	881211	Expression	"QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881123	2					
ANR	881212	CallExpression	QX11Info :: connection ( )		881123	0					
ANR	881213	Callee	QX11Info :: connection		881123	0					
ANR	881214	Identifier	QX11Info :: connection		881123	0					
ANR	881215	ArgumentList			881123	1					
ANR	881216	Expression	"window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881123	1					
ANR	881217	Identifier	window		881123	0					
ANR	881218	Expression	"QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881123	1					
ANR	881219	CallExpression	QX11Info :: appRootWindow ( )		881123	0					
ANR	881220	Callee	QX11Info :: appRootWindow		881123	0					
ANR	881221	Identifier	QX11Info :: appRootWindow		881123	0					
ANR	881222	ArgumentList			881123	1					
ANR	881223	Expression	"NET :: WMState , 0"		881123	1					
ANR	881224	Identifier	NET :: WMState		881123	0					
ANR	881225	PrimaryExpression	0		881123	1					
ANR	881226	IfStatement	if ( info -> hasState ( NET :: StaysOnTop ) )		881123	4					
ANR	881227	Condition	info -> hasState ( NET :: StaysOnTop )	1104:8:39892:39922	881123	0	True				
ANR	881228	CallExpression	info -> hasState ( NET :: StaysOnTop )		881123	0					
ANR	881229	Callee	info -> hasState		881123	0					
ANR	881230	PtrMemberAccess	info -> hasState		881123	0					
ANR	881231	Identifier	info		881123	0					
ANR	881232	Identifier	hasState		881123	1					
ANR	881233	ArgumentList	NET :: StaysOnTop		881123	1					
ANR	881234	Argument	NET :: StaysOnTop		881123	0					
ANR	881235	Identifier	NET :: StaysOnTop		881123	0					
ANR	881236	CompoundStatement		11:41:375:375	881123	1					
ANR	881237	ExpressionStatement	"ni . setState ( 0 , NET :: StaysOnTop )"	1105:8:39935:39966	881123	0	True				
ANR	881238	CallExpression	"ni . setState ( 0 , NET :: StaysOnTop )"		881123	0					
ANR	881239	Callee	ni . setState		881123	0					
ANR	881240	MemberAccess	ni . setState		881123	0					
ANR	881241	Identifier	ni		881123	0					
ANR	881242	Identifier	setState		881123	1					
ANR	881243	ArgumentList	0		881123	1					
ANR	881244	Argument	0		881123	0					
ANR	881245	PrimaryExpression	0		881123	0					
ANR	881246	Argument	NET :: StaysOnTop		881123	1					
ANR	881247	Identifier	NET :: StaysOnTop		881123	0					
ANR	881248	ElseStatement	else		881123	0					
ANR	881249	CompoundStatement		13:11:429:429	881123	0					
ANR	881250	ExpressionStatement	"ni . setState ( NET :: StaysOnTop , NET :: StaysOnTop )"	1107:8:39989:40034	881123	0	True				
ANR	881251	CallExpression	"ni . setState ( NET :: StaysOnTop , NET :: StaysOnTop )"		881123	0					
ANR	881252	Callee	ni . setState		881123	0					
ANR	881253	MemberAccess	ni . setState		881123	0					
ANR	881254	Identifier	ni		881123	0					
ANR	881255	Identifier	setState		881123	1					
ANR	881256	ArgumentList	NET :: StaysOnTop		881123	1					
ANR	881257	Argument	NET :: StaysOnTop		881123	0					
ANR	881258	Identifier	NET :: StaysOnTop		881123	0					
ANR	881259	Argument	NET :: StaysOnTop		881123	1					
ANR	881260	Identifier	NET :: StaysOnTop		881123	0					
ANR	881261	ReturnType	void		881123	1					
ANR	881262	Identifier	XWindowTasksModel :: requestToggleKeepAbove		881123	2					
ANR	881263	ParameterList	const QModelIndex & index		881123	3					
ANR	881264	Parameter	const QModelIndex & index	1093:47:39523:39546	881123	0	True				
ANR	881265	ParameterType	const QModelIndex &		881123	0					
ANR	881266	Identifier	index		881123	1					
ANR	881267	CFGEntryNode	ENTRY		881123		True				
ANR	881268	CFGExitNode	EXIT		881123		True				
ANR	881269	Symbol	index . model		881123						
ANR	881270	Symbol	d -> windowInfo		881123						
ANR	881271	Symbol	d		881123						
ANR	881272	Symbol	this		881123						
ANR	881273	Symbol	index		881123						
ANR	881274	Symbol	index . isValid		881123						
ANR	881275	Symbol	d -> windows . count		881123						
ANR	881276	Symbol	* d		881123						
ANR	881277	Symbol	info -> hasState		881123						
ANR	881278	Symbol	NET :: StaysOnTop		881123						
ANR	881279	Symbol	index . row		881123						
ANR	881280	Symbol	d -> windows		881123						
ANR	881281	Symbol	window		881123						
ANR	881282	Symbol	ni		881123						
ANR	881283	Symbol	* info		881123						
ANR	881284	Symbol	d -> windows . at		881123						
ANR	881285	Symbol	info		881123						
ANR	881286	Function	XWindowTasksModel :: requestToggleKeepBelow	1111:0:40045:40607							
ANR	881287	FunctionDef	XWindowTasksModel :: requestToggleKeepBelow (const QModelIndex & index)		881286	0					
ANR	881288	CompoundStatement		1112:0:40118:40607	881286	0					
ANR	881289	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		881286	0					
ANR	881290	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1113:8:40128:40224	881286	0	True				
ANR	881291	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881286	0		||			
ANR	881292	UnaryOperationExpression	! index . isValid ( )		881286	0					
ANR	881293	UnaryOperator	!		881286	0					
ANR	881294	CallExpression	index . isValid ( )		881286	1					
ANR	881295	Callee	index . isValid		881286	0					
ANR	881296	MemberAccess	index . isValid		881286	0					
ANR	881297	Identifier	index		881286	0					
ANR	881298	Identifier	isValid		881286	1					
ANR	881299	ArgumentList			881286	1					
ANR	881300	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881286	1		||			
ANR	881301	EqualityExpression	index . model ( ) != this		881286	0		!=			
ANR	881302	CallExpression	index . model ( )		881286	0					
ANR	881303	Callee	index . model		881286	0					
ANR	881304	MemberAccess	index . model		881286	0					
ANR	881305	Identifier	index		881286	0					
ANR	881306	Identifier	model		881286	1					
ANR	881307	ArgumentList			881286	1					
ANR	881308	Identifier	this		881286	1					
ANR	881309	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881286	1		||			
ANR	881310	RelationalExpression	index . row ( ) < 0		881286	0		<			
ANR	881311	CallExpression	index . row ( )		881286	0					
ANR	881312	Callee	index . row		881286	0					
ANR	881313	MemberAccess	index . row		881286	0					
ANR	881314	Identifier	index		881286	0					
ANR	881315	Identifier	row		881286	1					
ANR	881316	ArgumentList			881286	1					
ANR	881317	PrimaryExpression	0		881286	1					
ANR	881318	RelationalExpression	index . row ( ) >= d -> windows . count ( )		881286	1		>=			
ANR	881319	CallExpression	index . row ( )		881286	0					
ANR	881320	Callee	index . row		881286	0					
ANR	881321	MemberAccess	index . row		881286	0					
ANR	881322	Identifier	index		881286	0					
ANR	881323	Identifier	row		881286	1					
ANR	881324	ArgumentList			881286	1					
ANR	881325	CallExpression	d -> windows . count ( )		881286	1					
ANR	881326	Callee	d -> windows . count		881286	0					
ANR	881327	MemberAccess	d -> windows . count		881286	0					
ANR	881328	PtrMemberAccess	d -> windows		881286	0					
ANR	881329	Identifier	d		881286	0					
ANR	881330	Identifier	windows		881286	1					
ANR	881331	Identifier	count		881286	1					
ANR	881332	ArgumentList			881286	1					
ANR	881333	CompoundStatement		2:107:108:108	881286	1					
ANR	881334	ReturnStatement	return ;	1114:8:40237:40243	881286	0	True				
ANR	881335	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1117:4:40256:40301	881286	1	True				
ANR	881336	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		881286	0					
ANR	881337	IdentifierDeclType	const WId		881286	0					
ANR	881338	Identifier	window		881286	1					
ANR	881339	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		881286	2		=			
ANR	881340	Identifier	window		881286	0					
ANR	881341	CallExpression	d -> windows . at ( index . row ( ) )		881286	1					
ANR	881342	Callee	d -> windows . at		881286	0					
ANR	881343	MemberAccess	d -> windows . at		881286	0					
ANR	881344	PtrMemberAccess	d -> windows		881286	0					
ANR	881345	Identifier	d		881286	0					
ANR	881346	Identifier	windows		881286	1					
ANR	881347	Identifier	at		881286	1					
ANR	881348	ArgumentList	index . row ( )		881286	1					
ANR	881349	Argument	index . row ( )		881286	0					
ANR	881350	CallExpression	index . row ( )		881286	0					
ANR	881351	Callee	index . row		881286	0					
ANR	881352	MemberAccess	index . row		881286	0					
ANR	881353	Identifier	index		881286	0					
ANR	881354	Identifier	row		881286	1					
ANR	881355	ArgumentList			881286	1					
ANR	881356	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	1118:4:40307:40354	881286	2	True				
ANR	881357	IdentifierDecl	* info = d -> windowInfo ( window )		881286	0					
ANR	881358	IdentifierDeclType	const KWindowInfo *		881286	0					
ANR	881359	Identifier	info		881286	1					
ANR	881360	AssignmentExpression	* info = d -> windowInfo ( window )		881286	2		=			
ANR	881361	Identifier	info		881286	0					
ANR	881362	CallExpression	d -> windowInfo ( window )		881286	1					
ANR	881363	Callee	d -> windowInfo		881286	0					
ANR	881364	PtrMemberAccess	d -> windowInfo		881286	0					
ANR	881365	Identifier	d		881286	0					
ANR	881366	Identifier	windowInfo		881286	1					
ANR	881367	ArgumentList	window		881286	1					
ANR	881368	Argument	window		881286	0					
ANR	881369	Identifier	window		881286	0					
ANR	881370	IdentifierDeclStatement	"NETWinInfo ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 ) ;"	1120:4:40361:40450	881286	3	True				
ANR	881371	IdentifierDecl	"ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 )"		881286	0					
ANR	881372	IdentifierDeclType	NETWinInfo		881286	0					
ANR	881373	Identifier	ni		881286	1					
ANR	881374	Expression	"QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881286	2					
ANR	881375	CallExpression	QX11Info :: connection ( )		881286	0					
ANR	881376	Callee	QX11Info :: connection		881286	0					
ANR	881377	Identifier	QX11Info :: connection		881286	0					
ANR	881378	ArgumentList			881286	1					
ANR	881379	Expression	"window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881286	1					
ANR	881380	Identifier	window		881286	0					
ANR	881381	Expression	"QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881286	1					
ANR	881382	CallExpression	QX11Info :: appRootWindow ( )		881286	0					
ANR	881383	Callee	QX11Info :: appRootWindow		881286	0					
ANR	881384	Identifier	QX11Info :: appRootWindow		881286	0					
ANR	881385	ArgumentList			881286	1					
ANR	881386	Expression	"NET :: WMState , 0"		881286	1					
ANR	881387	Identifier	NET :: WMState		881286	0					
ANR	881388	PrimaryExpression	0		881286	1					
ANR	881389	IfStatement	if ( info -> hasState ( NET :: KeepBelow ) )		881286	4					
ANR	881390	Condition	info -> hasState ( NET :: KeepBelow )	1122:8:40461:40490	881286	0	True				
ANR	881391	CallExpression	info -> hasState ( NET :: KeepBelow )		881286	0					
ANR	881392	Callee	info -> hasState		881286	0					
ANR	881393	PtrMemberAccess	info -> hasState		881286	0					
ANR	881394	Identifier	info		881286	0					
ANR	881395	Identifier	hasState		881286	1					
ANR	881396	ArgumentList	NET :: KeepBelow		881286	1					
ANR	881397	Argument	NET :: KeepBelow		881286	0					
ANR	881398	Identifier	NET :: KeepBelow		881286	0					
ANR	881399	CompoundStatement		11:40:374:374	881286	1					
ANR	881400	ExpressionStatement	"ni . setState ( 0 , NET :: KeepBelow )"	1123:8:40503:40533	881286	0	True				
ANR	881401	CallExpression	"ni . setState ( 0 , NET :: KeepBelow )"		881286	0					
ANR	881402	Callee	ni . setState		881286	0					
ANR	881403	MemberAccess	ni . setState		881286	0					
ANR	881404	Identifier	ni		881286	0					
ANR	881405	Identifier	setState		881286	1					
ANR	881406	ArgumentList	0		881286	1					
ANR	881407	Argument	0		881286	0					
ANR	881408	PrimaryExpression	0		881286	0					
ANR	881409	Argument	NET :: KeepBelow		881286	1					
ANR	881410	Identifier	NET :: KeepBelow		881286	0					
ANR	881411	ElseStatement	else		881286	0					
ANR	881412	CompoundStatement		13:11:427:427	881286	0					
ANR	881413	ExpressionStatement	"ni . setState ( NET :: KeepBelow , NET :: KeepBelow )"	1125:8:40556:40599	881286	0	True				
ANR	881414	CallExpression	"ni . setState ( NET :: KeepBelow , NET :: KeepBelow )"		881286	0					
ANR	881415	Callee	ni . setState		881286	0					
ANR	881416	MemberAccess	ni . setState		881286	0					
ANR	881417	Identifier	ni		881286	0					
ANR	881418	Identifier	setState		881286	1					
ANR	881419	ArgumentList	NET :: KeepBelow		881286	1					
ANR	881420	Argument	NET :: KeepBelow		881286	0					
ANR	881421	Identifier	NET :: KeepBelow		881286	0					
ANR	881422	Argument	NET :: KeepBelow		881286	1					
ANR	881423	Identifier	NET :: KeepBelow		881286	0					
ANR	881424	ReturnType	void		881286	1					
ANR	881425	Identifier	XWindowTasksModel :: requestToggleKeepBelow		881286	2					
ANR	881426	ParameterList	const QModelIndex & index		881286	3					
ANR	881427	Parameter	const QModelIndex & index	1111:47:40092:40115	881286	0	True				
ANR	881428	ParameterType	const QModelIndex &		881286	0					
ANR	881429	Identifier	index		881286	1					
ANR	881430	CFGEntryNode	ENTRY		881286		True				
ANR	881431	CFGExitNode	EXIT		881286		True				
ANR	881432	Symbol	index . model		881286						
ANR	881433	Symbol	d -> windowInfo		881286						
ANR	881434	Symbol	d		881286						
ANR	881435	Symbol	this		881286						
ANR	881436	Symbol	index		881286						
ANR	881437	Symbol	index . isValid		881286						
ANR	881438	Symbol	d -> windows . count		881286						
ANR	881439	Symbol	NET :: KeepBelow		881286						
ANR	881440	Symbol	* d		881286						
ANR	881441	Symbol	info -> hasState		881286						
ANR	881442	Symbol	index . row		881286						
ANR	881443	Symbol	d -> windows		881286						
ANR	881444	Symbol	window		881286						
ANR	881445	Symbol	ni		881286						
ANR	881446	Symbol	* info		881286						
ANR	881447	Symbol	d -> windows . at		881286						
ANR	881448	Symbol	info		881286						
ANR	881449	Function	XWindowTasksModel :: requestToggleFullScreen	1129:0:40610:41177							
ANR	881450	FunctionDef	XWindowTasksModel :: requestToggleFullScreen (const QModelIndex & index)		881449	0					
ANR	881451	CompoundStatement		1130:0:40684:41177	881449	0					
ANR	881452	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		881449	0					
ANR	881453	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1131:8:40694:40790	881449	0	True				
ANR	881454	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881449	0		||			
ANR	881455	UnaryOperationExpression	! index . isValid ( )		881449	0					
ANR	881456	UnaryOperator	!		881449	0					
ANR	881457	CallExpression	index . isValid ( )		881449	1					
ANR	881458	Callee	index . isValid		881449	0					
ANR	881459	MemberAccess	index . isValid		881449	0					
ANR	881460	Identifier	index		881449	0					
ANR	881461	Identifier	isValid		881449	1					
ANR	881462	ArgumentList			881449	1					
ANR	881463	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881449	1		||			
ANR	881464	EqualityExpression	index . model ( ) != this		881449	0		!=			
ANR	881465	CallExpression	index . model ( )		881449	0					
ANR	881466	Callee	index . model		881449	0					
ANR	881467	MemberAccess	index . model		881449	0					
ANR	881468	Identifier	index		881449	0					
ANR	881469	Identifier	model		881449	1					
ANR	881470	ArgumentList			881449	1					
ANR	881471	Identifier	this		881449	1					
ANR	881472	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881449	1		||			
ANR	881473	RelationalExpression	index . row ( ) < 0		881449	0		<			
ANR	881474	CallExpression	index . row ( )		881449	0					
ANR	881475	Callee	index . row		881449	0					
ANR	881476	MemberAccess	index . row		881449	0					
ANR	881477	Identifier	index		881449	0					
ANR	881478	Identifier	row		881449	1					
ANR	881479	ArgumentList			881449	1					
ANR	881480	PrimaryExpression	0		881449	1					
ANR	881481	RelationalExpression	index . row ( ) >= d -> windows . count ( )		881449	1		>=			
ANR	881482	CallExpression	index . row ( )		881449	0					
ANR	881483	Callee	index . row		881449	0					
ANR	881484	MemberAccess	index . row		881449	0					
ANR	881485	Identifier	index		881449	0					
ANR	881486	Identifier	row		881449	1					
ANR	881487	ArgumentList			881449	1					
ANR	881488	CallExpression	d -> windows . count ( )		881449	1					
ANR	881489	Callee	d -> windows . count		881449	0					
ANR	881490	MemberAccess	d -> windows . count		881449	0					
ANR	881491	PtrMemberAccess	d -> windows		881449	0					
ANR	881492	Identifier	d		881449	0					
ANR	881493	Identifier	windows		881449	1					
ANR	881494	Identifier	count		881449	1					
ANR	881495	ArgumentList			881449	1					
ANR	881496	CompoundStatement		2:107:108:108	881449	1					
ANR	881497	ReturnStatement	return ;	1132:8:40803:40809	881449	0	True				
ANR	881498	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1135:4:40822:40867	881449	1	True				
ANR	881499	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		881449	0					
ANR	881500	IdentifierDeclType	const WId		881449	0					
ANR	881501	Identifier	window		881449	1					
ANR	881502	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		881449	2		=			
ANR	881503	Identifier	window		881449	0					
ANR	881504	CallExpression	d -> windows . at ( index . row ( ) )		881449	1					
ANR	881505	Callee	d -> windows . at		881449	0					
ANR	881506	MemberAccess	d -> windows . at		881449	0					
ANR	881507	PtrMemberAccess	d -> windows		881449	0					
ANR	881508	Identifier	d		881449	0					
ANR	881509	Identifier	windows		881449	1					
ANR	881510	Identifier	at		881449	1					
ANR	881511	ArgumentList	index . row ( )		881449	1					
ANR	881512	Argument	index . row ( )		881449	0					
ANR	881513	CallExpression	index . row ( )		881449	0					
ANR	881514	Callee	index . row		881449	0					
ANR	881515	MemberAccess	index . row		881449	0					
ANR	881516	Identifier	index		881449	0					
ANR	881517	Identifier	row		881449	1					
ANR	881518	ArgumentList			881449	1					
ANR	881519	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	1136:4:40873:40920	881449	2	True				
ANR	881520	IdentifierDecl	* info = d -> windowInfo ( window )		881449	0					
ANR	881521	IdentifierDeclType	const KWindowInfo *		881449	0					
ANR	881522	Identifier	info		881449	1					
ANR	881523	AssignmentExpression	* info = d -> windowInfo ( window )		881449	2		=			
ANR	881524	Identifier	info		881449	0					
ANR	881525	CallExpression	d -> windowInfo ( window )		881449	1					
ANR	881526	Callee	d -> windowInfo		881449	0					
ANR	881527	PtrMemberAccess	d -> windowInfo		881449	0					
ANR	881528	Identifier	d		881449	0					
ANR	881529	Identifier	windowInfo		881449	1					
ANR	881530	ArgumentList	window		881449	1					
ANR	881531	Argument	window		881449	0					
ANR	881532	Identifier	window		881449	0					
ANR	881533	IdentifierDeclStatement	"NETWinInfo ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 ) ;"	1138:4:40927:41016	881449	3	True				
ANR	881534	IdentifierDecl	"ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 )"		881449	0					
ANR	881535	IdentifierDeclType	NETWinInfo		881449	0					
ANR	881536	Identifier	ni		881449	1					
ANR	881537	Expression	"QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881449	2					
ANR	881538	CallExpression	QX11Info :: connection ( )		881449	0					
ANR	881539	Callee	QX11Info :: connection		881449	0					
ANR	881540	Identifier	QX11Info :: connection		881449	0					
ANR	881541	ArgumentList			881449	1					
ANR	881542	Expression	"window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881449	1					
ANR	881543	Identifier	window		881449	0					
ANR	881544	Expression	"QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881449	1					
ANR	881545	CallExpression	QX11Info :: appRootWindow ( )		881449	0					
ANR	881546	Callee	QX11Info :: appRootWindow		881449	0					
ANR	881547	Identifier	QX11Info :: appRootWindow		881449	0					
ANR	881548	ArgumentList			881449	1					
ANR	881549	Expression	"NET :: WMState , 0"		881449	1					
ANR	881550	Identifier	NET :: WMState		881449	0					
ANR	881551	PrimaryExpression	0		881449	1					
ANR	881552	IfStatement	if ( info -> hasState ( NET :: FullScreen ) )		881449	4					
ANR	881553	Condition	info -> hasState ( NET :: FullScreen )	1140:8:41027:41057	881449	0	True				
ANR	881554	CallExpression	info -> hasState ( NET :: FullScreen )		881449	0					
ANR	881555	Callee	info -> hasState		881449	0					
ANR	881556	PtrMemberAccess	info -> hasState		881449	0					
ANR	881557	Identifier	info		881449	0					
ANR	881558	Identifier	hasState		881449	1					
ANR	881559	ArgumentList	NET :: FullScreen		881449	1					
ANR	881560	Argument	NET :: FullScreen		881449	0					
ANR	881561	Identifier	NET :: FullScreen		881449	0					
ANR	881562	CompoundStatement		11:41:375:375	881449	1					
ANR	881563	ExpressionStatement	"ni . setState ( 0 , NET :: FullScreen )"	1141:8:41070:41101	881449	0	True				
ANR	881564	CallExpression	"ni . setState ( 0 , NET :: FullScreen )"		881449	0					
ANR	881565	Callee	ni . setState		881449	0					
ANR	881566	MemberAccess	ni . setState		881449	0					
ANR	881567	Identifier	ni		881449	0					
ANR	881568	Identifier	setState		881449	1					
ANR	881569	ArgumentList	0		881449	1					
ANR	881570	Argument	0		881449	0					
ANR	881571	PrimaryExpression	0		881449	0					
ANR	881572	Argument	NET :: FullScreen		881449	1					
ANR	881573	Identifier	NET :: FullScreen		881449	0					
ANR	881574	ElseStatement	else		881449	0					
ANR	881575	CompoundStatement		13:11:429:429	881449	0					
ANR	881576	ExpressionStatement	"ni . setState ( NET :: FullScreen , NET :: FullScreen )"	1143:8:41124:41169	881449	0	True				
ANR	881577	CallExpression	"ni . setState ( NET :: FullScreen , NET :: FullScreen )"		881449	0					
ANR	881578	Callee	ni . setState		881449	0					
ANR	881579	MemberAccess	ni . setState		881449	0					
ANR	881580	Identifier	ni		881449	0					
ANR	881581	Identifier	setState		881449	1					
ANR	881582	ArgumentList	NET :: FullScreen		881449	1					
ANR	881583	Argument	NET :: FullScreen		881449	0					
ANR	881584	Identifier	NET :: FullScreen		881449	0					
ANR	881585	Argument	NET :: FullScreen		881449	1					
ANR	881586	Identifier	NET :: FullScreen		881449	0					
ANR	881587	ReturnType	void		881449	1					
ANR	881588	Identifier	XWindowTasksModel :: requestToggleFullScreen		881449	2					
ANR	881589	ParameterList	const QModelIndex & index		881449	3					
ANR	881590	Parameter	const QModelIndex & index	1129:48:40658:40681	881449	0	True				
ANR	881591	ParameterType	const QModelIndex &		881449	0					
ANR	881592	Identifier	index		881449	1					
ANR	881593	CFGEntryNode	ENTRY		881449		True				
ANR	881594	CFGExitNode	EXIT		881449		True				
ANR	881595	Symbol	index . model		881449						
ANR	881596	Symbol	d -> windowInfo		881449						
ANR	881597	Symbol	d		881449						
ANR	881598	Symbol	this		881449						
ANR	881599	Symbol	index		881449						
ANR	881600	Symbol	index . isValid		881449						
ANR	881601	Symbol	d -> windows . count		881449						
ANR	881602	Symbol	* d		881449						
ANR	881603	Symbol	NET :: FullScreen		881449						
ANR	881604	Symbol	info -> hasState		881449						
ANR	881605	Symbol	index . row		881449						
ANR	881606	Symbol	d -> windows		881449						
ANR	881607	Symbol	window		881449						
ANR	881608	Symbol	ni		881449						
ANR	881609	Symbol	* info		881449						
ANR	881610	Symbol	d -> windows . at		881449						
ANR	881611	Symbol	info		881449						
ANR	881612	Function	XWindowTasksModel :: requestToggleShaded	1147:0:41180:41727							
ANR	881613	FunctionDef	XWindowTasksModel :: requestToggleShaded (const QModelIndex & index)		881612	0					
ANR	881614	CompoundStatement		1148:0:41250:41727	881612	0					
ANR	881615	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		881612	0					
ANR	881616	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1149:8:41260:41356	881612	0	True				
ANR	881617	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881612	0		||			
ANR	881618	UnaryOperationExpression	! index . isValid ( )		881612	0					
ANR	881619	UnaryOperator	!		881612	0					
ANR	881620	CallExpression	index . isValid ( )		881612	1					
ANR	881621	Callee	index . isValid		881612	0					
ANR	881622	MemberAccess	index . isValid		881612	0					
ANR	881623	Identifier	index		881612	0					
ANR	881624	Identifier	isValid		881612	1					
ANR	881625	ArgumentList			881612	1					
ANR	881626	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881612	1		||			
ANR	881627	EqualityExpression	index . model ( ) != this		881612	0		!=			
ANR	881628	CallExpression	index . model ( )		881612	0					
ANR	881629	Callee	index . model		881612	0					
ANR	881630	MemberAccess	index . model		881612	0					
ANR	881631	Identifier	index		881612	0					
ANR	881632	Identifier	model		881612	1					
ANR	881633	ArgumentList			881612	1					
ANR	881634	Identifier	this		881612	1					
ANR	881635	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881612	1		||			
ANR	881636	RelationalExpression	index . row ( ) < 0		881612	0		<			
ANR	881637	CallExpression	index . row ( )		881612	0					
ANR	881638	Callee	index . row		881612	0					
ANR	881639	MemberAccess	index . row		881612	0					
ANR	881640	Identifier	index		881612	0					
ANR	881641	Identifier	row		881612	1					
ANR	881642	ArgumentList			881612	1					
ANR	881643	PrimaryExpression	0		881612	1					
ANR	881644	RelationalExpression	index . row ( ) >= d -> windows . count ( )		881612	1		>=			
ANR	881645	CallExpression	index . row ( )		881612	0					
ANR	881646	Callee	index . row		881612	0					
ANR	881647	MemberAccess	index . row		881612	0					
ANR	881648	Identifier	index		881612	0					
ANR	881649	Identifier	row		881612	1					
ANR	881650	ArgumentList			881612	1					
ANR	881651	CallExpression	d -> windows . count ( )		881612	1					
ANR	881652	Callee	d -> windows . count		881612	0					
ANR	881653	MemberAccess	d -> windows . count		881612	0					
ANR	881654	PtrMemberAccess	d -> windows		881612	0					
ANR	881655	Identifier	d		881612	0					
ANR	881656	Identifier	windows		881612	1					
ANR	881657	Identifier	count		881612	1					
ANR	881658	ArgumentList			881612	1					
ANR	881659	CompoundStatement		2:107:108:108	881612	1					
ANR	881660	ReturnStatement	return ;	1150:8:41369:41375	881612	0	True				
ANR	881661	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1153:4:41388:41433	881612	1	True				
ANR	881662	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		881612	0					
ANR	881663	IdentifierDeclType	const WId		881612	0					
ANR	881664	Identifier	window		881612	1					
ANR	881665	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		881612	2		=			
ANR	881666	Identifier	window		881612	0					
ANR	881667	CallExpression	d -> windows . at ( index . row ( ) )		881612	1					
ANR	881668	Callee	d -> windows . at		881612	0					
ANR	881669	MemberAccess	d -> windows . at		881612	0					
ANR	881670	PtrMemberAccess	d -> windows		881612	0					
ANR	881671	Identifier	d		881612	0					
ANR	881672	Identifier	windows		881612	1					
ANR	881673	Identifier	at		881612	1					
ANR	881674	ArgumentList	index . row ( )		881612	1					
ANR	881675	Argument	index . row ( )		881612	0					
ANR	881676	CallExpression	index . row ( )		881612	0					
ANR	881677	Callee	index . row		881612	0					
ANR	881678	MemberAccess	index . row		881612	0					
ANR	881679	Identifier	index		881612	0					
ANR	881680	Identifier	row		881612	1					
ANR	881681	ArgumentList			881612	1					
ANR	881682	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	1154:4:41439:41486	881612	2	True				
ANR	881683	IdentifierDecl	* info = d -> windowInfo ( window )		881612	0					
ANR	881684	IdentifierDeclType	const KWindowInfo *		881612	0					
ANR	881685	Identifier	info		881612	1					
ANR	881686	AssignmentExpression	* info = d -> windowInfo ( window )		881612	2		=			
ANR	881687	Identifier	info		881612	0					
ANR	881688	CallExpression	d -> windowInfo ( window )		881612	1					
ANR	881689	Callee	d -> windowInfo		881612	0					
ANR	881690	PtrMemberAccess	d -> windowInfo		881612	0					
ANR	881691	Identifier	d		881612	0					
ANR	881692	Identifier	windowInfo		881612	1					
ANR	881693	ArgumentList	window		881612	1					
ANR	881694	Argument	window		881612	0					
ANR	881695	Identifier	window		881612	0					
ANR	881696	IdentifierDeclStatement	"NETWinInfo ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 ) ;"	1156:4:41493:41582	881612	3	True				
ANR	881697	IdentifierDecl	"ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0 )"		881612	0					
ANR	881698	IdentifierDeclType	NETWinInfo		881612	0					
ANR	881699	Identifier	ni		881612	1					
ANR	881700	Expression	"QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881612	2					
ANR	881701	CallExpression	QX11Info :: connection ( )		881612	0					
ANR	881702	Callee	QX11Info :: connection		881612	0					
ANR	881703	Identifier	QX11Info :: connection		881612	0					
ANR	881704	ArgumentList			881612	1					
ANR	881705	Expression	"window , QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881612	1					
ANR	881706	Identifier	window		881612	0					
ANR	881707	Expression	"QX11Info :: appRootWindow ( ) , NET :: WMState , 0"		881612	1					
ANR	881708	CallExpression	QX11Info :: appRootWindow ( )		881612	0					
ANR	881709	Callee	QX11Info :: appRootWindow		881612	0					
ANR	881710	Identifier	QX11Info :: appRootWindow		881612	0					
ANR	881711	ArgumentList			881612	1					
ANR	881712	Expression	"NET :: WMState , 0"		881612	1					
ANR	881713	Identifier	NET :: WMState		881612	0					
ANR	881714	PrimaryExpression	0		881612	1					
ANR	881715	IfStatement	if ( info -> hasState ( NET :: Shaded ) )		881612	4					
ANR	881716	Condition	info -> hasState ( NET :: Shaded )	1158:8:41593:41619	881612	0	True				
ANR	881717	CallExpression	info -> hasState ( NET :: Shaded )		881612	0					
ANR	881718	Callee	info -> hasState		881612	0					
ANR	881719	PtrMemberAccess	info -> hasState		881612	0					
ANR	881720	Identifier	info		881612	0					
ANR	881721	Identifier	hasState		881612	1					
ANR	881722	ArgumentList	NET :: Shaded		881612	1					
ANR	881723	Argument	NET :: Shaded		881612	0					
ANR	881724	Identifier	NET :: Shaded		881612	0					
ANR	881725	CompoundStatement		11:37:371:371	881612	1					
ANR	881726	ExpressionStatement	"ni . setState ( 0 , NET :: Shaded )"	1159:8:41632:41659	881612	0	True				
ANR	881727	CallExpression	"ni . setState ( 0 , NET :: Shaded )"		881612	0					
ANR	881728	Callee	ni . setState		881612	0					
ANR	881729	MemberAccess	ni . setState		881612	0					
ANR	881730	Identifier	ni		881612	0					
ANR	881731	Identifier	setState		881612	1					
ANR	881732	ArgumentList	0		881612	1					
ANR	881733	Argument	0		881612	0					
ANR	881734	PrimaryExpression	0		881612	0					
ANR	881735	Argument	NET :: Shaded		881612	1					
ANR	881736	Identifier	NET :: Shaded		881612	0					
ANR	881737	ElseStatement	else		881612	0					
ANR	881738	CompoundStatement		13:11:421:421	881612	0					
ANR	881739	ExpressionStatement	"ni . setState ( NET :: Shaded , NET :: Shaded )"	1161:8:41682:41719	881612	0	True				
ANR	881740	CallExpression	"ni . setState ( NET :: Shaded , NET :: Shaded )"		881612	0					
ANR	881741	Callee	ni . setState		881612	0					
ANR	881742	MemberAccess	ni . setState		881612	0					
ANR	881743	Identifier	ni		881612	0					
ANR	881744	Identifier	setState		881612	1					
ANR	881745	ArgumentList	NET :: Shaded		881612	1					
ANR	881746	Argument	NET :: Shaded		881612	0					
ANR	881747	Identifier	NET :: Shaded		881612	0					
ANR	881748	Argument	NET :: Shaded		881612	1					
ANR	881749	Identifier	NET :: Shaded		881612	0					
ANR	881750	ReturnType	void		881612	1					
ANR	881751	Identifier	XWindowTasksModel :: requestToggleShaded		881612	2					
ANR	881752	ParameterList	const QModelIndex & index		881612	3					
ANR	881753	Parameter	const QModelIndex & index	1147:44:41224:41247	881612	0	True				
ANR	881754	ParameterType	const QModelIndex &		881612	0					
ANR	881755	Identifier	index		881612	1					
ANR	881756	CFGEntryNode	ENTRY		881612		True				
ANR	881757	CFGExitNode	EXIT		881612		True				
ANR	881758	Symbol	index . model		881612						
ANR	881759	Symbol	d -> windowInfo		881612						
ANR	881760	Symbol	d		881612						
ANR	881761	Symbol	this		881612						
ANR	881762	Symbol	NET :: Shaded		881612						
ANR	881763	Symbol	index		881612						
ANR	881764	Symbol	index . isValid		881612						
ANR	881765	Symbol	d -> windows . count		881612						
ANR	881766	Symbol	* d		881612						
ANR	881767	Symbol	info -> hasState		881612						
ANR	881768	Symbol	index . row		881612						
ANR	881769	Symbol	d -> windows		881612						
ANR	881770	Symbol	window		881612						
ANR	881771	Symbol	ni		881612						
ANR	881772	Symbol	* info		881612						
ANR	881773	Symbol	d -> windows . at		881612						
ANR	881774	Symbol	info		881612						
ANR	881775	Function	XWindowTasksModel :: requestVirtualDesktop	1165:0:41730:42932							
ANR	881776	FunctionDef	"XWindowTasksModel :: requestVirtualDesktop (const QModelIndex & index , qint32 desktop)"		881775	0					
ANR	881777	CompoundStatement		1166:0:41818:42932	881775	0					
ANR	881778	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		881775	0					
ANR	881779	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1167:8:41828:41924	881775	0	True				
ANR	881780	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881775	0		||			
ANR	881781	UnaryOperationExpression	! index . isValid ( )		881775	0					
ANR	881782	UnaryOperator	!		881775	0					
ANR	881783	CallExpression	index . isValid ( )		881775	1					
ANR	881784	Callee	index . isValid		881775	0					
ANR	881785	MemberAccess	index . isValid		881775	0					
ANR	881786	Identifier	index		881775	0					
ANR	881787	Identifier	isValid		881775	1					
ANR	881788	ArgumentList			881775	1					
ANR	881789	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881775	1		||			
ANR	881790	EqualityExpression	index . model ( ) != this		881775	0		!=			
ANR	881791	CallExpression	index . model ( )		881775	0					
ANR	881792	Callee	index . model		881775	0					
ANR	881793	MemberAccess	index . model		881775	0					
ANR	881794	Identifier	index		881775	0					
ANR	881795	Identifier	model		881775	1					
ANR	881796	ArgumentList			881775	1					
ANR	881797	Identifier	this		881775	1					
ANR	881798	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		881775	1		||			
ANR	881799	RelationalExpression	index . row ( ) < 0		881775	0		<			
ANR	881800	CallExpression	index . row ( )		881775	0					
ANR	881801	Callee	index . row		881775	0					
ANR	881802	MemberAccess	index . row		881775	0					
ANR	881803	Identifier	index		881775	0					
ANR	881804	Identifier	row		881775	1					
ANR	881805	ArgumentList			881775	1					
ANR	881806	PrimaryExpression	0		881775	1					
ANR	881807	RelationalExpression	index . row ( ) >= d -> windows . count ( )		881775	1		>=			
ANR	881808	CallExpression	index . row ( )		881775	0					
ANR	881809	Callee	index . row		881775	0					
ANR	881810	MemberAccess	index . row		881775	0					
ANR	881811	Identifier	index		881775	0					
ANR	881812	Identifier	row		881775	1					
ANR	881813	ArgumentList			881775	1					
ANR	881814	CallExpression	d -> windows . count ( )		881775	1					
ANR	881815	Callee	d -> windows . count		881775	0					
ANR	881816	MemberAccess	d -> windows . count		881775	0					
ANR	881817	PtrMemberAccess	d -> windows		881775	0					
ANR	881818	Identifier	d		881775	0					
ANR	881819	Identifier	windows		881775	1					
ANR	881820	Identifier	count		881775	1					
ANR	881821	ArgumentList			881775	1					
ANR	881822	CompoundStatement		2:107:108:108	881775	1					
ANR	881823	ReturnStatement	return ;	1168:8:41937:41943	881775	0	True				
ANR	881824	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1171:4:41956:42001	881775	1	True				
ANR	881825	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		881775	0					
ANR	881826	IdentifierDeclType	const WId		881775	0					
ANR	881827	Identifier	window		881775	1					
ANR	881828	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		881775	2		=			
ANR	881829	Identifier	window		881775	0					
ANR	881830	CallExpression	d -> windows . at ( index . row ( ) )		881775	1					
ANR	881831	Callee	d -> windows . at		881775	0					
ANR	881832	MemberAccess	d -> windows . at		881775	0					
ANR	881833	PtrMemberAccess	d -> windows		881775	0					
ANR	881834	Identifier	d		881775	0					
ANR	881835	Identifier	windows		881775	1					
ANR	881836	Identifier	at		881775	1					
ANR	881837	ArgumentList	index . row ( )		881775	1					
ANR	881838	Argument	index . row ( )		881775	0					
ANR	881839	CallExpression	index . row ( )		881775	0					
ANR	881840	Callee	index . row		881775	0					
ANR	881841	MemberAccess	index . row		881775	0					
ANR	881842	Identifier	index		881775	0					
ANR	881843	Identifier	row		881775	1					
ANR	881844	ArgumentList			881775	1					
ANR	881845	IdentifierDeclStatement	const KWindowInfo * info = d -> windowInfo ( window ) ;	1172:4:42007:42054	881775	2	True				
ANR	881846	IdentifierDecl	* info = d -> windowInfo ( window )		881775	0					
ANR	881847	IdentifierDeclType	const KWindowInfo *		881775	0					
ANR	881848	Identifier	info		881775	1					
ANR	881849	AssignmentExpression	* info = d -> windowInfo ( window )		881775	2		=			
ANR	881850	Identifier	info		881775	0					
ANR	881851	CallExpression	d -> windowInfo ( window )		881775	1					
ANR	881852	Callee	d -> windowInfo		881775	0					
ANR	881853	PtrMemberAccess	d -> windowInfo		881775	0					
ANR	881854	Identifier	d		881775	0					
ANR	881855	Identifier	windowInfo		881775	1					
ANR	881856	ArgumentList	window		881775	1					
ANR	881857	Argument	window		881775	0					
ANR	881858	Identifier	window		881775	0					
ANR	881859	IfStatement	if ( desktop == 0 )		881775	3					
ANR	881860	Condition	desktop == 0	1174:8:42065:42076	881775	0	True				
ANR	881861	EqualityExpression	desktop == 0		881775	0		==			
ANR	881862	Identifier	desktop		881775	0					
ANR	881863	PrimaryExpression	0		881775	1					
ANR	881864	CompoundStatement		9:22:260:260	881775	1					
ANR	881865	IfStatement	if ( info -> onAllDesktops ( ) )		881775	0					
ANR	881866	Condition	info -> onAllDesktops ( )	1175:12:42093:42113	881775	0	True				
ANR	881867	CallExpression	info -> onAllDesktops ( )		881775	0					
ANR	881868	Callee	info -> onAllDesktops		881775	0					
ANR	881869	PtrMemberAccess	info -> onAllDesktops		881775	0					
ANR	881870	Identifier	info		881775	0					
ANR	881871	Identifier	onAllDesktops		881775	1					
ANR	881872	ArgumentList			881775	1					
ANR	881873	CompoundStatement		10:35:297:297	881775	1					
ANR	881874	ExpressionStatement	"KWindowSystem :: setOnDesktop ( window , KWindowSystem :: currentDesktop ( ) )"	1176:12:42130:42198	881775	0	True				
ANR	881875	CallExpression	"KWindowSystem :: setOnDesktop ( window , KWindowSystem :: currentDesktop ( ) )"		881775	0					
ANR	881876	Callee	KWindowSystem :: setOnDesktop		881775	0					
ANR	881877	Identifier	KWindowSystem :: setOnDesktop		881775	0					
ANR	881878	ArgumentList	window		881775	1					
ANR	881879	Argument	window		881775	0					
ANR	881880	Identifier	window		881775	0					
ANR	881881	Argument	KWindowSystem :: currentDesktop ( )		881775	1					
ANR	881882	CallExpression	KWindowSystem :: currentDesktop ( )		881775	0					
ANR	881883	Callee	KWindowSystem :: currentDesktop		881775	0					
ANR	881884	Identifier	KWindowSystem :: currentDesktop		881775	0					
ANR	881885	ArgumentList			881775	1					
ANR	881886	ExpressionStatement	KWindowSystem :: forceActiveWindow ( window )	1177:12:42212:42252	881775	1	True				
ANR	881887	CallExpression	KWindowSystem :: forceActiveWindow ( window )		881775	0					
ANR	881888	Callee	KWindowSystem :: forceActiveWindow		881775	0					
ANR	881889	Identifier	KWindowSystem :: forceActiveWindow		881775	0					
ANR	881890	ArgumentList	window		881775	1					
ANR	881891	Argument	window		881775	0					
ANR	881892	Identifier	window		881775	0					
ANR	881893	ElseStatement	else		881775	0					
ANR	881894	CompoundStatement		13:15:450:450	881775	0					
ANR	881895	ExpressionStatement	"KWindowSystem :: setOnAllDesktops ( window , true )"	1179:12:42283:42328	881775	0	True				
ANR	881896	CallExpression	"KWindowSystem :: setOnAllDesktops ( window , true )"		881775	0					
ANR	881897	Callee	KWindowSystem :: setOnAllDesktops		881775	0					
ANR	881898	Identifier	KWindowSystem :: setOnAllDesktops		881775	0					
ANR	881899	ArgumentList	window		881775	1					
ANR	881900	Argument	window		881775	0					
ANR	881901	Identifier	window		881775	0					
ANR	881902	Argument	true		881775	1					
ANR	881903	Identifier	true		881775	0					
ANR	881904	ReturnStatement	return ;	1182:8:42349:42355	881775	1	True				
ANR	881905	ElseStatement	else		881775	0					
ANR	881906	IfStatement	if ( desktop > KWindowSystem :: numberOfDesktops ( ) )		881775	0					
ANR	881907	Condition	desktop > KWindowSystem :: numberOfDesktops ( )	1184:15:42427:42469	881775	0	True				
ANR	881908	RelationalExpression	desktop > KWindowSystem :: numberOfDesktops ( )		881775	0		>			
ANR	881909	Identifier	desktop		881775	0					
ANR	881910	CallExpression	KWindowSystem :: numberOfDesktops ( )		881775	1					
ANR	881911	Callee	KWindowSystem :: numberOfDesktops		881775	0					
ANR	881912	Identifier	KWindowSystem :: numberOfDesktops		881775	0					
ANR	881913	ArgumentList			881775	1					
ANR	881914	CompoundStatement		27:8:841:902	881775	1					
ANR	881915	ExpressionStatement	desktop = KWindowSystem :: numberOfDesktops ( ) + 1	1185:8:42482:42529	881775	0	True				
ANR	881916	AssignmentExpression	desktop = KWindowSystem :: numberOfDesktops ( ) + 1		881775	0		=			
ANR	881917	Identifier	desktop		881775	0					
ANR	881918	AdditiveExpression	KWindowSystem :: numberOfDesktops ( ) + 1		881775	1		+			
ANR	881919	CallExpression	KWindowSystem :: numberOfDesktops ( )		881775	0					
ANR	881920	Callee	KWindowSystem :: numberOfDesktops		881775	0					
ANR	881921	Identifier	KWindowSystem :: numberOfDesktops		881775	0					
ANR	881922	ArgumentList			881775	1					
ANR	881923	PrimaryExpression	1		881775	1					
ANR	881924	IfStatement	if ( desktop > 20 )		881775	1					
ANR	881925	Condition	desktop > 20	1188:12:42605:42616	881775	0	True				
ANR	881926	RelationalExpression	desktop > 20		881775	0		>			
ANR	881927	Identifier	desktop		881775	0					
ANR	881928	PrimaryExpression	20		881775	1					
ANR	881929	CompoundStatement		23:26:800:800	881775	1					
ANR	881930	ReturnStatement	return ;	1189:12:42633:42639	881775	0	True				
ANR	881931	IdentifierDeclStatement	"NETRootInfo ri ( QX11Info :: connection ( ) , NET :: NumberOfDesktops ) ;"	1192:8:42660:42721	881775	2	True				
ANR	881932	IdentifierDecl	"ri ( QX11Info :: connection ( ) , NET :: NumberOfDesktops )"		881775	0					
ANR	881933	IdentifierDeclType	NETRootInfo		881775	0					
ANR	881934	Identifier	ri		881775	1					
ANR	881935	Expression	"QX11Info :: connection ( ) , NET :: NumberOfDesktops"		881775	2					
ANR	881936	CallExpression	QX11Info :: connection ( )		881775	0					
ANR	881937	Callee	QX11Info :: connection		881775	0					
ANR	881938	Identifier	QX11Info :: connection		881775	0					
ANR	881939	ArgumentList			881775	1					
ANR	881940	Identifier	NET :: NumberOfDesktops		881775	1					
ANR	881941	ExpressionStatement	ri . setNumberOfDesktops ( desktop )	1193:8:42731:42762	881775	3	True				
ANR	881942	CallExpression	ri . setNumberOfDesktops ( desktop )		881775	0					
ANR	881943	Callee	ri . setNumberOfDesktops		881775	0					
ANR	881944	MemberAccess	ri . setNumberOfDesktops		881775	0					
ANR	881945	Identifier	ri		881775	0					
ANR	881946	Identifier	setNumberOfDesktops		881775	1					
ANR	881947	ArgumentList	desktop		881775	1					
ANR	881948	Argument	desktop		881775	0					
ANR	881949	Identifier	desktop		881775	0					
ANR	881950	ExpressionStatement	"KWindowSystem :: setOnDesktop ( window , desktop )"	1196:4:42775:42819	881775	4	True				
ANR	881951	CallExpression	"KWindowSystem :: setOnDesktop ( window , desktop )"		881775	0					
ANR	881952	Callee	KWindowSystem :: setOnDesktop		881775	0					
ANR	881953	Identifier	KWindowSystem :: setOnDesktop		881775	0					
ANR	881954	ArgumentList	window		881775	1					
ANR	881955	Argument	window		881775	0					
ANR	881956	Identifier	window		881775	0					
ANR	881957	Argument	desktop		881775	1					
ANR	881958	Identifier	desktop		881775	0					
ANR	881959	IfStatement	if ( desktop == KWindowSystem :: currentDesktop ( ) )		881775	5					
ANR	881960	Condition	desktop == KWindowSystem :: currentDesktop ( )	1198:8:42830:42871	881775	0	True				
ANR	881961	EqualityExpression	desktop == KWindowSystem :: currentDesktop ( )		881775	0		==			
ANR	881962	Identifier	desktop		881775	0					
ANR	881963	CallExpression	KWindowSystem :: currentDesktop ( )		881775	1					
ANR	881964	Callee	KWindowSystem :: currentDesktop		881775	0					
ANR	881965	Identifier	KWindowSystem :: currentDesktop		881775	0					
ANR	881966	ArgumentList			881775	1					
ANR	881967	CompoundStatement		33:52:1055:1055	881775	1					
ANR	881968	ExpressionStatement	KWindowSystem :: forceActiveWindow ( window )	1199:8:42884:42924	881775	0	True				
ANR	881969	CallExpression	KWindowSystem :: forceActiveWindow ( window )		881775	0					
ANR	881970	Callee	KWindowSystem :: forceActiveWindow		881775	0					
ANR	881971	Identifier	KWindowSystem :: forceActiveWindow		881775	0					
ANR	881972	ArgumentList	window		881775	1					
ANR	881973	Argument	window		881775	0					
ANR	881974	Identifier	window		881775	0					
ANR	881975	ReturnType	void		881775	1					
ANR	881976	Identifier	XWindowTasksModel :: requestVirtualDesktop		881775	2					
ANR	881977	ParameterList	"const QModelIndex & index , qint32 desktop"		881775	3					
ANR	881978	Parameter	const QModelIndex & index	1165:46:41776:41799	881775	0	True				
ANR	881979	ParameterType	const QModelIndex &		881775	0					
ANR	881980	Identifier	index		881775	1					
ANR	881981	Parameter	qint32 desktop	1165:72:41802:41815	881775	1	True				
ANR	881982	ParameterType	qint32		881775	0					
ANR	881983	Identifier	desktop		881775	1					
ANR	881984	CFGEntryNode	ENTRY		881775		True				
ANR	881985	CFGExitNode	EXIT		881775		True				
ANR	881986	Symbol	index . model		881775						
ANR	881987	Symbol	d -> windowInfo		881775						
ANR	881988	Symbol	d		881775						
ANR	881989	Symbol	KWindowSystem :: currentDesktop		881775						
ANR	881990	Symbol	this		881775						
ANR	881991	Symbol	KWindowSystem :: numberOfDesktops		881775						
ANR	881992	Symbol	index		881775						
ANR	881993	Symbol	info -> onAllDesktops		881775						
ANR	881994	Symbol	index . isValid		881775						
ANR	881995	Symbol	d -> windows . count		881775						
ANR	881996	Symbol	* d		881775						
ANR	881997	Symbol	desktop		881775						
ANR	881998	Symbol	index . row		881775						
ANR	881999	Symbol	ri		881775						
ANR	882000	Symbol	true		881775						
ANR	882001	Symbol	d -> windows		881775						
ANR	882002	Symbol	window		881775						
ANR	882003	Symbol	* info		881775						
ANR	882004	Symbol	d -> windows . at		881775						
ANR	882005	Symbol	info		881775						
ANR	882006	Function	XWindowTasksModel :: requestActivities	1203:0:42935:43276							
ANR	882007	FunctionDef	"XWindowTasksModel :: requestActivities (const QModelIndex & index , const QStringList & activities)"		882006	0					
ANR	882008	CompoundStatement		1204:0:43034:43276	882006	0					
ANR	882009	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		882006	0					
ANR	882010	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1205:8:43044:43140	882006	0	True				
ANR	882011	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		882006	0		||			
ANR	882012	UnaryOperationExpression	! index . isValid ( )		882006	0					
ANR	882013	UnaryOperator	!		882006	0					
ANR	882014	CallExpression	index . isValid ( )		882006	1					
ANR	882015	Callee	index . isValid		882006	0					
ANR	882016	MemberAccess	index . isValid		882006	0					
ANR	882017	Identifier	index		882006	0					
ANR	882018	Identifier	isValid		882006	1					
ANR	882019	ArgumentList			882006	1					
ANR	882020	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		882006	1		||			
ANR	882021	EqualityExpression	index . model ( ) != this		882006	0		!=			
ANR	882022	CallExpression	index . model ( )		882006	0					
ANR	882023	Callee	index . model		882006	0					
ANR	882024	MemberAccess	index . model		882006	0					
ANR	882025	Identifier	index		882006	0					
ANR	882026	Identifier	model		882006	1					
ANR	882027	ArgumentList			882006	1					
ANR	882028	Identifier	this		882006	1					
ANR	882029	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		882006	1		||			
ANR	882030	RelationalExpression	index . row ( ) < 0		882006	0		<			
ANR	882031	CallExpression	index . row ( )		882006	0					
ANR	882032	Callee	index . row		882006	0					
ANR	882033	MemberAccess	index . row		882006	0					
ANR	882034	Identifier	index		882006	0					
ANR	882035	Identifier	row		882006	1					
ANR	882036	ArgumentList			882006	1					
ANR	882037	PrimaryExpression	0		882006	1					
ANR	882038	RelationalExpression	index . row ( ) >= d -> windows . count ( )		882006	1		>=			
ANR	882039	CallExpression	index . row ( )		882006	0					
ANR	882040	Callee	index . row		882006	0					
ANR	882041	MemberAccess	index . row		882006	0					
ANR	882042	Identifier	index		882006	0					
ANR	882043	Identifier	row		882006	1					
ANR	882044	ArgumentList			882006	1					
ANR	882045	CallExpression	d -> windows . count ( )		882006	1					
ANR	882046	Callee	d -> windows . count		882006	0					
ANR	882047	MemberAccess	d -> windows . count		882006	0					
ANR	882048	PtrMemberAccess	d -> windows		882006	0					
ANR	882049	Identifier	d		882006	0					
ANR	882050	Identifier	windows		882006	1					
ANR	882051	Identifier	count		882006	1					
ANR	882052	ArgumentList			882006	1					
ANR	882053	CompoundStatement		2:107:108:108	882006	1					
ANR	882054	ReturnStatement	return ;	1206:8:43153:43159	882006	0	True				
ANR	882055	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1209:4:43172:43217	882006	1	True				
ANR	882056	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		882006	0					
ANR	882057	IdentifierDeclType	const WId		882006	0					
ANR	882058	Identifier	window		882006	1					
ANR	882059	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		882006	2		=			
ANR	882060	Identifier	window		882006	0					
ANR	882061	CallExpression	d -> windows . at ( index . row ( ) )		882006	1					
ANR	882062	Callee	d -> windows . at		882006	0					
ANR	882063	MemberAccess	d -> windows . at		882006	0					
ANR	882064	PtrMemberAccess	d -> windows		882006	0					
ANR	882065	Identifier	d		882006	0					
ANR	882066	Identifier	windows		882006	1					
ANR	882067	Identifier	at		882006	1					
ANR	882068	ArgumentList	index . row ( )		882006	1					
ANR	882069	Argument	index . row ( )		882006	0					
ANR	882070	CallExpression	index . row ( )		882006	0					
ANR	882071	Callee	index . row		882006	0					
ANR	882072	MemberAccess	index . row		882006	0					
ANR	882073	Identifier	index		882006	0					
ANR	882074	Identifier	row		882006	1					
ANR	882075	ArgumentList			882006	1					
ANR	882076	ExpressionStatement	"KWindowSystem :: setOnActivities ( window , activities )"	1211:4:43224:43274	882006	2	True				
ANR	882077	CallExpression	"KWindowSystem :: setOnActivities ( window , activities )"		882006	0					
ANR	882078	Callee	KWindowSystem :: setOnActivities		882006	0					
ANR	882079	Identifier	KWindowSystem :: setOnActivities		882006	0					
ANR	882080	ArgumentList	window		882006	1					
ANR	882081	Argument	window		882006	0					
ANR	882082	Identifier	window		882006	0					
ANR	882083	Argument	activities		882006	1					
ANR	882084	Identifier	activities		882006	0					
ANR	882085	ReturnType	void		882006	1					
ANR	882086	Identifier	XWindowTasksModel :: requestActivities		882006	2					
ANR	882087	ParameterList	"const QModelIndex & index , const QStringList & activities"		882006	3					
ANR	882088	Parameter	const QModelIndex & index	1203:42:42977:43000	882006	0	True				
ANR	882089	ParameterType	const QModelIndex &		882006	0					
ANR	882090	Identifier	index		882006	1					
ANR	882091	Parameter	const QStringList & activities	1203:68:43003:43031	882006	1	True				
ANR	882092	ParameterType	const QStringList &		882006	0					
ANR	882093	Identifier	activities		882006	1					
ANR	882094	CFGEntryNode	ENTRY		882006		True				
ANR	882095	CFGExitNode	EXIT		882006		True				
ANR	882096	Symbol	index . model		882006						
ANR	882097	Symbol	d		882006						
ANR	882098	Symbol	activities		882006						
ANR	882099	Symbol	index . row		882006						
ANR	882100	Symbol	this		882006						
ANR	882101	Symbol	index		882006						
ANR	882102	Symbol	index . isValid		882006						
ANR	882103	Symbol	d -> windows		882006						
ANR	882104	Symbol	window		882006						
ANR	882105	Symbol	d -> windows . count		882006						
ANR	882106	Symbol	d -> windows . at		882006						
ANR	882107	Symbol	* d		882006						
ANR	882108	Function	XWindowTasksModel :: requestPublishDelegateGeometry	1215:0:43280:44191							
ANR	882109	FunctionDef	"XWindowTasksModel :: requestPublishDelegateGeometry (const QModelIndex & index , const QRect & geometry , QObject * delegate)"		882108	0					
ANR	882110	CompoundStatement		1216:0:43403:44191	882108	0					
ANR	882111	Statement	Q_UNUSED	1217:4:43409:43416	882108	0	True				
ANR	882112	Statement	(	1217:12:43417:43417	882108	1	True				
ANR	882113	Statement	delegate	1217:13:43418:43425	882108	2	True				
ANR	882114	Statement	)	1217:21:43426:43426	882108	3	True				
ANR	882115	IfStatement	if ( ! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( ) )		882108	4					
ANR	882116	Condition	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )	1219:8:43437:43533	882108	0	True				
ANR	882117	OrExpression	! index . isValid ( ) || index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		882108	0		||			
ANR	882118	UnaryOperationExpression	! index . isValid ( )		882108	0					
ANR	882119	UnaryOperator	!		882108	0					
ANR	882120	CallExpression	index . isValid ( )		882108	1					
ANR	882121	Callee	index . isValid		882108	0					
ANR	882122	MemberAccess	index . isValid		882108	0					
ANR	882123	Identifier	index		882108	0					
ANR	882124	Identifier	isValid		882108	1					
ANR	882125	ArgumentList			882108	1					
ANR	882126	OrExpression	index . model ( ) != this || index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		882108	1		||			
ANR	882127	EqualityExpression	index . model ( ) != this		882108	0		!=			
ANR	882128	CallExpression	index . model ( )		882108	0					
ANR	882129	Callee	index . model		882108	0					
ANR	882130	MemberAccess	index . model		882108	0					
ANR	882131	Identifier	index		882108	0					
ANR	882132	Identifier	model		882108	1					
ANR	882133	ArgumentList			882108	1					
ANR	882134	Identifier	this		882108	1					
ANR	882135	OrExpression	index . row ( ) < 0 || index . row ( ) >= d -> windows . count ( )		882108	1		||			
ANR	882136	RelationalExpression	index . row ( ) < 0		882108	0		<			
ANR	882137	CallExpression	index . row ( )		882108	0					
ANR	882138	Callee	index . row		882108	0					
ANR	882139	MemberAccess	index . row		882108	0					
ANR	882140	Identifier	index		882108	0					
ANR	882141	Identifier	row		882108	1					
ANR	882142	ArgumentList			882108	1					
ANR	882143	PrimaryExpression	0		882108	1					
ANR	882144	RelationalExpression	index . row ( ) >= d -> windows . count ( )		882108	1		>=			
ANR	882145	CallExpression	index . row ( )		882108	0					
ANR	882146	Callee	index . row		882108	0					
ANR	882147	MemberAccess	index . row		882108	0					
ANR	882148	Identifier	index		882108	0					
ANR	882149	Identifier	row		882108	1					
ANR	882150	ArgumentList			882108	1					
ANR	882151	CallExpression	d -> windows . count ( )		882108	1					
ANR	882152	Callee	d -> windows . count		882108	0					
ANR	882153	MemberAccess	d -> windows . count		882108	0					
ANR	882154	PtrMemberAccess	d -> windows		882108	0					
ANR	882155	Identifier	d		882108	0					
ANR	882156	Identifier	windows		882108	1					
ANR	882157	Identifier	count		882108	1					
ANR	882158	ArgumentList			882108	1					
ANR	882159	CompoundStatement		4:107:132:132	882108	1					
ANR	882160	ReturnStatement	return ;	1220:8:43546:43552	882108	0	True				
ANR	882161	IdentifierDeclStatement	const WId window = d -> windows . at ( index . row ( ) ) ;	1223:4:43565:43610	882108	5	True				
ANR	882162	IdentifierDecl	window = d -> windows . at ( index . row ( ) )		882108	0					
ANR	882163	IdentifierDeclType	const WId		882108	0					
ANR	882164	Identifier	window		882108	1					
ANR	882165	AssignmentExpression	window = d -> windows . at ( index . row ( ) )		882108	2		=			
ANR	882166	Identifier	window		882108	0					
ANR	882167	CallExpression	d -> windows . at ( index . row ( ) )		882108	1					
ANR	882168	Callee	d -> windows . at		882108	0					
ANR	882169	MemberAccess	d -> windows . at		882108	0					
ANR	882170	PtrMemberAccess	d -> windows		882108	0					
ANR	882171	Identifier	d		882108	0					
ANR	882172	Identifier	windows		882108	1					
ANR	882173	Identifier	at		882108	1					
ANR	882174	ArgumentList	index . row ( )		882108	1					
ANR	882175	Argument	index . row ( )		882108	0					
ANR	882176	CallExpression	index . row ( )		882108	0					
ANR	882177	Callee	index . row		882108	0					
ANR	882178	MemberAccess	index . row		882108	0					
ANR	882179	Identifier	index		882108	0					
ANR	882180	Identifier	row		882108	1					
ANR	882181	ArgumentList			882108	1					
ANR	882182	IfStatement	if ( d -> delegateGeometries . contains ( window ) && d -> delegateGeometries . value ( window ) == geometry )		882108	6					
ANR	882183	Condition	d -> delegateGeometries . contains ( window ) && d -> delegateGeometries . value ( window ) == geometry	1225:8:43621:43717	882108	0	True				
ANR	882184	AndExpression	d -> delegateGeometries . contains ( window ) && d -> delegateGeometries . value ( window ) == geometry		882108	0		&&			
ANR	882185	CallExpression	d -> delegateGeometries . contains ( window )		882108	0					
ANR	882186	Callee	d -> delegateGeometries . contains		882108	0					
ANR	882187	MemberAccess	d -> delegateGeometries . contains		882108	0					
ANR	882188	PtrMemberAccess	d -> delegateGeometries		882108	0					
ANR	882189	Identifier	d		882108	0					
ANR	882190	Identifier	delegateGeometries		882108	1					
ANR	882191	Identifier	contains		882108	1					
ANR	882192	ArgumentList	window		882108	1					
ANR	882193	Argument	window		882108	0					
ANR	882194	Identifier	window		882108	0					
ANR	882195	EqualityExpression	d -> delegateGeometries . value ( window ) == geometry		882108	1		==			
ANR	882196	CallExpression	d -> delegateGeometries . value ( window )		882108	0					
ANR	882197	Callee	d -> delegateGeometries . value		882108	0					
ANR	882198	MemberAccess	d -> delegateGeometries . value		882108	0					
ANR	882199	PtrMemberAccess	d -> delegateGeometries		882108	0					
ANR	882200	Identifier	d		882108	0					
ANR	882201	Identifier	delegateGeometries		882108	1					
ANR	882202	Identifier	value		882108	1					
ANR	882203	ArgumentList	window		882108	1					
ANR	882204	Argument	window		882108	0					
ANR	882205	Identifier	window		882108	0					
ANR	882206	Identifier	geometry		882108	1					
ANR	882207	CompoundStatement		11:60:316:316	882108	1					
ANR	882208	ReturnStatement	return ;	1227:8:43730:43736	882108	0	True				
ANR	882209	IdentifierDeclStatement	"NETWinInfo ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , 0 , 0 ) ;"	1230:4:43749:43827	882108	7	True				
ANR	882210	IdentifierDecl	"ni ( QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , 0 , 0 )"		882108	0					
ANR	882211	IdentifierDeclType	NETWinInfo		882108	0					
ANR	882212	Identifier	ni		882108	1					
ANR	882213	Expression	"QX11Info :: connection ( ) , window , QX11Info :: appRootWindow ( ) , 0 , 0"		882108	2					
ANR	882214	CallExpression	QX11Info :: connection ( )		882108	0					
ANR	882215	Callee	QX11Info :: connection		882108	0					
ANR	882216	Identifier	QX11Info :: connection		882108	0					
ANR	882217	ArgumentList			882108	1					
ANR	882218	Expression	"window , QX11Info :: appRootWindow ( ) , 0 , 0"		882108	1					
ANR	882219	Identifier	window		882108	0					
ANR	882220	Expression	"QX11Info :: appRootWindow ( ) , 0 , 0"		882108	1					
ANR	882221	CallExpression	QX11Info :: appRootWindow ( )		882108	0					
ANR	882222	Callee	QX11Info :: appRootWindow		882108	0					
ANR	882223	Identifier	QX11Info :: appRootWindow		882108	0					
ANR	882224	ArgumentList			882108	1					
ANR	882225	Expression	"0 , 0"		882108	1					
ANR	882226	PrimaryExpression	0		882108	0					
ANR	882227	PrimaryExpression	0		882108	1					
ANR	882228	IdentifierDeclStatement	NETRect rect ;	1231:4:43833:43845	882108	8	True				
ANR	882229	IdentifierDecl	rect		882108	0					
ANR	882230	IdentifierDeclType	NETRect		882108	0					
ANR	882231	Identifier	rect		882108	1					
ANR	882232	IfStatement	if ( geometry . isValid ( ) )		882108	9					
ANR	882233	Condition	geometry . isValid ( )	1233:8:43856:43873	882108	0	True				
ANR	882234	CallExpression	geometry . isValid ( )		882108	0					
ANR	882235	Callee	geometry . isValid		882108	0					
ANR	882236	MemberAccess	geometry . isValid		882108	0					
ANR	882237	Identifier	geometry		882108	0					
ANR	882238	Identifier	isValid		882108	1					
ANR	882239	ArgumentList			882108	1					
ANR	882240	CompoundStatement		18:28:472:472	882108	1					
ANR	882241	ExpressionStatement	rect . pos . x = geometry . x ( )	1234:8:43886:43911	882108	0	True				
ANR	882242	AssignmentExpression	rect . pos . x = geometry . x ( )		882108	0		=			
ANR	882243	MemberAccess	rect . pos . x		882108	0					
ANR	882244	MemberAccess	rect . pos		882108	0					
ANR	882245	Identifier	rect		882108	0					
ANR	882246	Identifier	pos		882108	1					
ANR	882247	Identifier	x		882108	1					
ANR	882248	CallExpression	geometry . x ( )		882108	1					
ANR	882249	Callee	geometry . x		882108	0					
ANR	882250	MemberAccess	geometry . x		882108	0					
ANR	882251	Identifier	geometry		882108	0					
ANR	882252	Identifier	x		882108	1					
ANR	882253	ArgumentList			882108	1					
ANR	882254	ExpressionStatement	rect . pos . y = geometry . y ( )	1235:8:43921:43946	882108	1	True				
ANR	882255	AssignmentExpression	rect . pos . y = geometry . y ( )		882108	0		=			
ANR	882256	MemberAccess	rect . pos . y		882108	0					
ANR	882257	MemberAccess	rect . pos		882108	0					
ANR	882258	Identifier	rect		882108	0					
ANR	882259	Identifier	pos		882108	1					
ANR	882260	Identifier	y		882108	1					
ANR	882261	CallExpression	geometry . y ( )		882108	1					
ANR	882262	Callee	geometry . y		882108	0					
ANR	882263	MemberAccess	geometry . y		882108	0					
ANR	882264	Identifier	geometry		882108	0					
ANR	882265	Identifier	y		882108	1					
ANR	882266	ArgumentList			882108	1					
ANR	882267	ExpressionStatement	rect . size . width = geometry . width ( )	1236:8:43956:43990	882108	2	True				
ANR	882268	AssignmentExpression	rect . size . width = geometry . width ( )		882108	0		=			
ANR	882269	MemberAccess	rect . size . width		882108	0					
ANR	882270	MemberAccess	rect . size		882108	0					
ANR	882271	Identifier	rect		882108	0					
ANR	882272	Identifier	size		882108	1					
ANR	882273	Identifier	width		882108	1					
ANR	882274	CallExpression	geometry . width ( )		882108	1					
ANR	882275	Callee	geometry . width		882108	0					
ANR	882276	MemberAccess	geometry . width		882108	0					
ANR	882277	Identifier	geometry		882108	0					
ANR	882278	Identifier	width		882108	1					
ANR	882279	ArgumentList			882108	1					
ANR	882280	ExpressionStatement	rect . size . height = geometry . height ( )	1237:8:44000:44036	882108	3	True				
ANR	882281	AssignmentExpression	rect . size . height = geometry . height ( )		882108	0		=			
ANR	882282	MemberAccess	rect . size . height		882108	0					
ANR	882283	MemberAccess	rect . size		882108	0					
ANR	882284	Identifier	rect		882108	0					
ANR	882285	Identifier	size		882108	1					
ANR	882286	Identifier	height		882108	1					
ANR	882287	CallExpression	geometry . height ( )		882108	1					
ANR	882288	Callee	geometry . height		882108	0					
ANR	882289	MemberAccess	geometry . height		882108	0					
ANR	882290	Identifier	geometry		882108	0					
ANR	882291	Identifier	height		882108	1					
ANR	882292	ArgumentList			882108	1					
ANR	882293	ExpressionStatement	"d -> delegateGeometries . insert ( window , geometry )"	1239:8:44047:44093	882108	4	True				
ANR	882294	CallExpression	"d -> delegateGeometries . insert ( window , geometry )"		882108	0					
ANR	882295	Callee	d -> delegateGeometries . insert		882108	0					
ANR	882296	MemberAccess	d -> delegateGeometries . insert		882108	0					
ANR	882297	PtrMemberAccess	d -> delegateGeometries		882108	0					
ANR	882298	Identifier	d		882108	0					
ANR	882299	Identifier	delegateGeometries		882108	1					
ANR	882300	Identifier	insert		882108	1					
ANR	882301	ArgumentList	window		882108	1					
ANR	882302	Argument	window		882108	0					
ANR	882303	Identifier	window		882108	0					
ANR	882304	Argument	geometry		882108	1					
ANR	882305	Identifier	geometry		882108	0					
ANR	882306	ElseStatement	else		882108	0					
ANR	882307	CompoundStatement		25:11:702:702	882108	0					
ANR	882308	ExpressionStatement	d -> delegateGeometries . remove ( window )	1241:8:44116:44152	882108	0	True				
ANR	882309	CallExpression	d -> delegateGeometries . remove ( window )		882108	0					
ANR	882310	Callee	d -> delegateGeometries . remove		882108	0					
ANR	882311	MemberAccess	d -> delegateGeometries . remove		882108	0					
ANR	882312	PtrMemberAccess	d -> delegateGeometries		882108	0					
ANR	882313	Identifier	d		882108	0					
ANR	882314	Identifier	delegateGeometries		882108	1					
ANR	882315	Identifier	remove		882108	1					
ANR	882316	ArgumentList	window		882108	1					
ANR	882317	Argument	window		882108	0					
ANR	882318	Identifier	window		882108	0					
ANR	882319	ExpressionStatement	ni . setIconGeometry ( rect )	1244:4:44165:44189	882108	10	True				
ANR	882320	CallExpression	ni . setIconGeometry ( rect )		882108	0					
ANR	882321	Callee	ni . setIconGeometry		882108	0					
ANR	882322	MemberAccess	ni . setIconGeometry		882108	0					
ANR	882323	Identifier	ni		882108	0					
ANR	882324	Identifier	setIconGeometry		882108	1					
ANR	882325	ArgumentList	rect		882108	1					
ANR	882326	Argument	rect		882108	0					
ANR	882327	Identifier	rect		882108	0					
ANR	882328	ReturnType	void		882108	1					
ANR	882329	Identifier	XWindowTasksModel :: requestPublishDelegateGeometry		882108	2					
ANR	882330	ParameterList	"const QModelIndex & index , const QRect & geometry , QObject * delegate"		882108	3					
ANR	882331	Parameter	const QModelIndex & index	1215:55:43335:43358	882108	0	True				
ANR	882332	ParameterType	const QModelIndex &		882108	0					
ANR	882333	Identifier	index		882108	1					
ANR	882334	Parameter	const QRect & geometry	1215:81:43361:43381	882108	1	True				
ANR	882335	ParameterType	const QRect &		882108	0					
ANR	882336	Identifier	geometry		882108	1					
ANR	882337	Parameter	QObject * delegate	1215:104:43384:43400	882108	2	True				
ANR	882338	ParameterType	QObject *		882108	0					
ANR	882339	Identifier	delegate		882108	1					
ANR	882340	CFGEntryNode	ENTRY		882108		True				
ANR	882341	CFGExitNode	EXIT		882108		True				
ANR	882342	Symbol	geometry . y		882108						
ANR	882343	Symbol	geometry . x		882108						
ANR	882344	Symbol	index . isValid		882108						
ANR	882345	Symbol	d -> windows . count		882108						
ANR	882346	Symbol	delegate		882108						
ANR	882347	Symbol	rect		882108						
ANR	882348	Symbol	index . row		882108						
ANR	882349	Symbol	d -> delegateGeometries . value		882108						
ANR	882350	Symbol	d -> windows		882108						
ANR	882351	Symbol	d -> windows . at		882108						
ANR	882352	Symbol	index . model		882108						
ANR	882353	Symbol	d -> delegateGeometries		882108						
ANR	882354	Symbol	rect . size		882108						
ANR	882355	Symbol	d		882108						
ANR	882356	Symbol	this		882108						
ANR	882357	Symbol	d -> delegateGeometries . contains		882108						
ANR	882358	Symbol	rect . pos		882108						
ANR	882359	Symbol	rect . size . height		882108						
ANR	882360	Symbol	index		882108						
ANR	882361	Symbol	* d		882108						
ANR	882362	Symbol	geometry . width		882108						
ANR	882363	Symbol	rect . size . width		882108						
ANR	882364	Symbol	geometry . isValid		882108						
ANR	882365	Symbol	geometry		882108						
ANR	882366	Symbol	window		882108						
ANR	882367	Symbol	ni		882108						
ANR	882368	Symbol	rect . pos . x		882108						
ANR	882369	Symbol	rect . pos . y		882108						
ANR	882370	Symbol	geometry . height		882108						
ANR	882371	Function	XWindowTasksModel :: winIdFromMimeData	1247:0:44194:44652							
ANR	882372	FunctionDef	"XWindowTasksModel :: winIdFromMimeData (const QMimeData * mimeData , bool * ok)"		882371	0					
ANR	882373	CompoundStatement		1248:0:44272:44652	882371	0					
ANR	882374	ExpressionStatement	Q_ASSERT ( mimeData )	1249:4:44278:44296	882371	0	True				
ANR	882375	CallExpression	Q_ASSERT ( mimeData )		882371	0					
ANR	882376	Callee	Q_ASSERT		882371	0					
ANR	882377	Identifier	Q_ASSERT		882371	0					
ANR	882378	ArgumentList	mimeData		882371	1					
ANR	882379	Argument	mimeData		882371	0					
ANR	882380	Identifier	mimeData		882371	0					
ANR	882381	IfStatement	if ( ok )		882371	1					
ANR	882382	Condition	ok	1251:8:44307:44308	882371	0	True				
ANR	882383	Identifier	ok		882371	0					
ANR	882384	CompoundStatement		4:12:38:38	882371	1					
ANR	882385	ExpressionStatement	* ok = false	1252:8:44321:44332	882371	0	True				
ANR	882386	AssignmentExpression	* ok = false		882371	0		=			
ANR	882387	UnaryOperationExpression	* ok		882371	0					
ANR	882388	UnaryOperator	*		882371	0					
ANR	882389	Identifier	ok		882371	1					
ANR	882390	Identifier	false		882371	1					
ANR	882391	IfStatement	if ( ! mimeData -> hasFormat ( Private :: mimeType ( ) ) )		882371	2					
ANR	882392	Condition	! mimeData -> hasFormat ( Private :: mimeType ( ) )	1255:8:44349:44389	882371	0	True				
ANR	882393	UnaryOperationExpression	! mimeData -> hasFormat ( Private :: mimeType ( ) )		882371	0					
ANR	882394	UnaryOperator	!		882371	0					
ANR	882395	CallExpression	mimeData -> hasFormat ( Private :: mimeType ( ) )		882371	1					
ANR	882396	Callee	mimeData -> hasFormat		882371	0					
ANR	882397	PtrMemberAccess	mimeData -> hasFormat		882371	0					
ANR	882398	Identifier	mimeData		882371	0					
ANR	882399	Identifier	hasFormat		882371	1					
ANR	882400	ArgumentList	Private :: mimeType ( )		882371	1					
ANR	882401	Argument	Private :: mimeType ( )		882371	0					
ANR	882402	CallExpression	Private :: mimeType ( )		882371	0					
ANR	882403	Callee	Private :: mimeType		882371	0					
ANR	882404	Identifier	Private :: mimeType		882371	0					
ANR	882405	ArgumentList			882371	1					
ANR	882406	CompoundStatement		8:51:119:119	882371	1					
ANR	882407	ReturnStatement	return 0 ;	1256:8:44402:44410	882371	0	True				
ANR	882408	PrimaryExpression	0		882371	0					
ANR	882409	IdentifierDeclStatement	QByteArray data ( mimeData -> data ( Private :: mimeType ( ) ) ) ;	1259:4:44423:44475	882371	3	True				
ANR	882410	IdentifierDecl	data ( mimeData -> data ( Private :: mimeType ( ) ) )		882371	0					
ANR	882411	IdentifierDeclType	QByteArray		882371	0					
ANR	882412	Identifier	data		882371	1					
ANR	882413	CallExpression	mimeData -> data ( Private :: mimeType ( ) )		882371	2					
ANR	882414	Callee	mimeData -> data		882371	0					
ANR	882415	PtrMemberAccess	mimeData -> data		882371	0					
ANR	882416	Identifier	mimeData		882371	0					
ANR	882417	Identifier	data		882371	1					
ANR	882418	ArgumentList	Private :: mimeType ( )		882371	1					
ANR	882419	Argument	Private :: mimeType ( )		882371	0					
ANR	882420	CallExpression	Private :: mimeType ( )		882371	0					
ANR	882421	Callee	Private :: mimeType		882371	0					
ANR	882422	Identifier	Private :: mimeType		882371	0					
ANR	882423	ArgumentList			882371	1					
ANR	882424	IfStatement	if ( data . size ( ) != sizeof ( WId ) )		882371	4					
ANR	882425	Condition	data . size ( ) != sizeof ( WId )	1260:8:44485:44510	882371	0	True				
ANR	882426	EqualityExpression	data . size ( ) != sizeof ( WId )		882371	0		!=			
ANR	882427	CallExpression	data . size ( )		882371	0					
ANR	882428	Callee	data . size		882371	0					
ANR	882429	MemberAccess	data . size		882371	0					
ANR	882430	Identifier	data		882371	0					
ANR	882431	Identifier	size		882371	1					
ANR	882432	ArgumentList			882371	1					
ANR	882433	SizeofExpression	sizeof ( WId )		882371	1					
ANR	882434	Sizeof	sizeof		882371	0					
ANR	882435	SizeofOperand	WId		882371	1					
ANR	882436	CompoundStatement		13:36:240:240	882371	1					
ANR	882437	ReturnStatement	return 0 ;	1261:8:44523:44531	882371	0	True				
ANR	882438	PrimaryExpression	0		882371	0					
ANR	882439	IdentifierDeclStatement	WId id ;	1264:4:44544:44550	882371	5	True				
ANR	882440	IdentifierDecl	id		882371	0					
ANR	882441	IdentifierDeclType	WId		882371	0					
ANR	882442	Identifier	id		882371	1					
ANR	882443	ExpressionStatement	"memcpy ( & id , data . data ( ) , sizeof ( WId ) )"	1265:4:44556:44593	882371	6	True				
ANR	882444	CallExpression	"memcpy ( & id , data . data ( ) , sizeof ( WId ) )"		882371	0					
ANR	882445	Callee	memcpy		882371	0					
ANR	882446	Identifier	memcpy		882371	0					
ANR	882447	ArgumentList	& id		882371	1					
ANR	882448	Argument	& id		882371	0					
ANR	882449	UnaryOperationExpression	& id		882371	0					
ANR	882450	UnaryOperator	&		882371	0					
ANR	882451	Identifier	id		882371	1					
ANR	882452	Argument	data . data ( )		882371	1					
ANR	882453	CallExpression	data . data ( )		882371	0					
ANR	882454	Callee	data . data		882371	0					
ANR	882455	MemberAccess	data . data		882371	0					
ANR	882456	Identifier	data		882371	0					
ANR	882457	Identifier	data		882371	1					
ANR	882458	ArgumentList			882371	1					
ANR	882459	Argument	sizeof ( WId )		882371	2					
ANR	882460	SizeofExpression	sizeof ( WId )		882371	0					
ANR	882461	Sizeof	sizeof		882371	0					
ANR	882462	SizeofOperand	WId		882371	1					
ANR	882463	IfStatement	if ( ok )		882371	7					
ANR	882464	Condition	ok	1267:8:44604:44605	882371	0	True				
ANR	882465	Identifier	ok		882371	0					
ANR	882466	CompoundStatement		20:12:335:335	882371	1					
ANR	882467	ExpressionStatement	* ok = true	1268:8:44618:44628	882371	0	True				
ANR	882468	AssignmentExpression	* ok = true		882371	0		=			
ANR	882469	UnaryOperationExpression	* ok		882371	0					
ANR	882470	UnaryOperator	*		882371	0					
ANR	882471	Identifier	ok		882371	1					
ANR	882472	Identifier	true		882371	1					
ANR	882473	ReturnStatement	return id ;	1271:4:44641:44650	882371	8	True				
ANR	882474	Identifier	id		882371	0					
ANR	882475	ReturnType	WId		882371	1					
ANR	882476	Identifier	XWindowTasksModel :: winIdFromMimeData		882371	2					
ANR	882477	ParameterList	"const QMimeData * mimeData , bool * ok"		882371	3					
ANR	882478	Parameter	const QMimeData * mimeData	1247:41:44235:44259	882371	0	True				
ANR	882479	ParameterType	const QMimeData *		882371	0					
ANR	882480	Identifier	mimeData		882371	1					
ANR	882481	Parameter	bool * ok	1247:68:44262:44269	882371	1	True				
ANR	882482	ParameterType	bool *		882371	0					
ANR	882483	Identifier	ok		882371	1					
ANR	882484	CFGEntryNode	ENTRY		882371		True				
ANR	882485	CFGExitNode	EXIT		882371		True				
ANR	882486	Symbol	mimeData		882371						
ANR	882487	Symbol	* ok		882371						
ANR	882488	Symbol	data		882371						
ANR	882489	Symbol	data . data		882371						
ANR	882490	Symbol	& id		882371						
ANR	882491	Symbol	false		882371						
ANR	882492	Symbol	* mimeData		882371						
ANR	882493	Symbol	data . size		882371						
ANR	882494	Symbol	mimeData -> hasFormat		882371						
ANR	882495	Symbol	true		882371						
ANR	882496	Symbol	id		882371						
ANR	882497	Symbol	ok		882371						
ANR	882498	Symbol	Private :: mimeType		882371						
ANR	882499	Function	XWindowTasksModel :: winIdsFromMimeData	1274:0:44655:45708							
ANR	882500	FunctionDef	"XWindowTasksModel :: winIdsFromMimeData (const QMimeData * mimeData , bool * ok)"		882499	0					
ANR	882501	CompoundStatement		1275:0:44741:45708	882499	0					
ANR	882502	ExpressionStatement	Q_ASSERT ( mimeData )	1276:4:44747:44765	882499	0	True				
ANR	882503	CallExpression	Q_ASSERT ( mimeData )		882499	0					
ANR	882504	Callee	Q_ASSERT		882499	0					
ANR	882505	Identifier	Q_ASSERT		882499	0					
ANR	882506	ArgumentList	mimeData		882499	1					
ANR	882507	Argument	mimeData		882499	0					
ANR	882508	Identifier	mimeData		882499	0					
ANR	882509	IdentifierDeclStatement	QList < WId > ids ;	1277:4:44771:44785	882499	1	True				
ANR	882510	IdentifierDecl	ids		882499	0					
ANR	882511	IdentifierDeclType	QList < WId >		882499	0					
ANR	882512	Identifier	ids		882499	1					
ANR	882513	IfStatement	if ( ok )		882499	2					
ANR	882514	Condition	ok	1279:8:44796:44797	882499	0	True				
ANR	882515	Identifier	ok		882499	0					
ANR	882516	CompoundStatement		5:12:58:58	882499	1					
ANR	882517	ExpressionStatement	* ok = false	1280:8:44810:44821	882499	0	True				
ANR	882518	AssignmentExpression	* ok = false		882499	0		=			
ANR	882519	UnaryOperationExpression	* ok		882499	0					
ANR	882520	UnaryOperator	*		882499	0					
ANR	882521	Identifier	ok		882499	1					
ANR	882522	Identifier	false		882499	1					
ANR	882523	IfStatement	if ( ! mimeData -> hasFormat ( Private :: groupMimeType ( ) ) )		882499	3					
ANR	882524	Condition	! mimeData -> hasFormat ( Private :: groupMimeType ( ) )	1283:8:44838:44883	882499	0	True				
ANR	882525	UnaryOperationExpression	! mimeData -> hasFormat ( Private :: groupMimeType ( ) )		882499	0					
ANR	882526	UnaryOperator	!		882499	0					
ANR	882527	CallExpression	mimeData -> hasFormat ( Private :: groupMimeType ( ) )		882499	1					
ANR	882528	Callee	mimeData -> hasFormat		882499	0					
ANR	882529	PtrMemberAccess	mimeData -> hasFormat		882499	0					
ANR	882530	Identifier	mimeData		882499	0					
ANR	882531	Identifier	hasFormat		882499	1					
ANR	882532	ArgumentList	Private :: groupMimeType ( )		882499	1					
ANR	882533	Argument	Private :: groupMimeType ( )		882499	0					
ANR	882534	CallExpression	Private :: groupMimeType ( )		882499	0					
ANR	882535	Callee	Private :: groupMimeType		882499	0					
ANR	882536	Identifier	Private :: groupMimeType		882499	0					
ANR	882537	ArgumentList			882499	1					
ANR	882538	CompoundStatement		12:8:223:272	882499	1					
ANR	882539	IdentifierDeclStatement	bool singularOk ;	1285:8:44940:44955	882499	0	True				
ANR	882540	IdentifierDecl	singularOk		882499	0					
ANR	882541	IdentifierDeclType	bool		882499	0					
ANR	882542	Identifier	singularOk		882499	1					
ANR	882543	IdentifierDeclStatement	"WId id = winIdFromMimeData ( mimeData , & singularOk ) ;"	1286:8:44965:45014	882499	1	True				
ANR	882544	IdentifierDecl	"id = winIdFromMimeData ( mimeData , & singularOk )"		882499	0					
ANR	882545	IdentifierDeclType	WId		882499	0					
ANR	882546	Identifier	id		882499	1					
ANR	882547	AssignmentExpression	"id = winIdFromMimeData ( mimeData , & singularOk )"		882499	2		=			
ANR	882548	Identifier	id		882499	0					
ANR	882549	CallExpression	"winIdFromMimeData ( mimeData , & singularOk )"		882499	1					
ANR	882550	Callee	winIdFromMimeData		882499	0					
ANR	882551	Identifier	winIdFromMimeData		882499	0					
ANR	882552	ArgumentList	mimeData		882499	1					
ANR	882553	Argument	mimeData		882499	0					
ANR	882554	Identifier	mimeData		882499	0					
ANR	882555	Argument	& singularOk		882499	1					
ANR	882556	UnaryOperationExpression	& singularOk		882499	0					
ANR	882557	UnaryOperator	&		882499	0					
ANR	882558	Identifier	singularOk		882499	1					
ANR	882559	IfStatement	if ( ok )		882499	2					
ANR	882560	Condition	ok	1288:12:45029:45030	882499	0	True				
ANR	882561	Identifier	ok		882499	0					
ANR	882562	CompoundStatement		14:16:291:291	882499	1					
ANR	882563	ExpressionStatement	* ok = singularOk	1289:12:45047:45063	882499	0	True				
ANR	882564	AssignmentExpression	* ok = singularOk		882499	0		=			
ANR	882565	UnaryOperationExpression	* ok		882499	0					
ANR	882566	UnaryOperator	*		882499	0					
ANR	882567	Identifier	ok		882499	1					
ANR	882568	Identifier	singularOk		882499	1					
ANR	882569	IfStatement	if ( singularOk )		882499	3					
ANR	882570	Condition	singularOk	1292:12:45088:45097	882499	0	True				
ANR	882571	Identifier	singularOk		882499	0					
ANR	882572	CompoundStatement		18:24:358:358	882499	1					
ANR	882573	ExpressionStatement	ids << id	1293:12:45114:45123	882499	0	True				
ANR	882574	ShiftExpression	ids << id		882499	0		<<			
ANR	882575	Identifier	ids		882499	0					
ANR	882576	Identifier	id		882499	1					
ANR	882577	ReturnStatement	return ids ;	1296:8:45144:45154	882499	4	True				
ANR	882578	Identifier	ids		882499	0					
ANR	882579	IdentifierDeclStatement	QByteArray data ( mimeData -> data ( Private :: groupMimeType ( ) ) ) ;	1299:4:45167:45224	882499	4	True				
ANR	882580	IdentifierDecl	data ( mimeData -> data ( Private :: groupMimeType ( ) ) )		882499	0					
ANR	882581	IdentifierDeclType	QByteArray		882499	0					
ANR	882582	Identifier	data		882499	1					
ANR	882583	CallExpression	mimeData -> data ( Private :: groupMimeType ( ) )		882499	2					
ANR	882584	Callee	mimeData -> data		882499	0					
ANR	882585	PtrMemberAccess	mimeData -> data		882499	0					
ANR	882586	Identifier	mimeData		882499	0					
ANR	882587	Identifier	data		882499	1					
ANR	882588	ArgumentList	Private :: groupMimeType ( )		882499	1					
ANR	882589	Argument	Private :: groupMimeType ( )		882499	0					
ANR	882590	CallExpression	Private :: groupMimeType ( )		882499	0					
ANR	882591	Callee	Private :: groupMimeType		882499	0					
ANR	882592	Identifier	Private :: groupMimeType		882499	0					
ANR	882593	ArgumentList			882499	1					
ANR	882594	IfStatement	if ( ( unsigned int ) data . size ( ) < sizeof ( int ) + sizeof ( WId ) )		882499	5					
ANR	882595	Condition	( unsigned int ) data . size ( ) < sizeof ( int ) + sizeof ( WId )	1300:8:45234:45286	882499	0	True				
ANR	882596	RelationalExpression	( unsigned int ) data . size ( ) < sizeof ( int ) + sizeof ( WId )		882499	0		<			
ANR	882597	CastExpression	( unsigned int ) data . size ( )		882499	0					
ANR	882598	CastTarget	unsigned int		882499	0					
ANR	882599	CallExpression	data . size ( )		882499	1					
ANR	882600	Callee	data . size		882499	0					
ANR	882601	MemberAccess	data . size		882499	0					
ANR	882602	Identifier	data		882499	0					
ANR	882603	Identifier	size		882499	1					
ANR	882604	ArgumentList			882499	1					
ANR	882605	AdditiveExpression	sizeof ( int ) + sizeof ( WId )		882499	1		+			
ANR	882606	SizeofExpression	sizeof ( int )		882499	0					
ANR	882607	Sizeof	sizeof		882499	0					
ANR	882608	SizeofOperand	int		882499	1					
ANR	882609	SizeofExpression	sizeof ( WId )		882499	1					
ANR	882610	Sizeof	sizeof		882499	0					
ANR	882611	SizeofOperand	WId		882499	1					
ANR	882612	CompoundStatement		26:63:547:547	882499	1					
ANR	882613	ReturnStatement	return ids ;	1301:8:45299:45309	882499	0	True				
ANR	882614	Identifier	ids		882499	0					
ANR	882615	IdentifierDeclStatement	int count = 0 ;	1304:4:45322:45335	882499	6	True				
ANR	882616	IdentifierDecl	count = 0		882499	0					
ANR	882617	IdentifierDeclType	int		882499	0					
ANR	882618	Identifier	count		882499	1					
ANR	882619	AssignmentExpression	count = 0		882499	2		=			
ANR	882620	Identifier	count		882499	0					
ANR	882621	PrimaryExpression	0		882499	1					
ANR	882622	ExpressionStatement	"memcpy ( & count , data . data ( ) , sizeof ( int ) )"	1305:4:45341:45381	882499	7	True				
ANR	882623	CallExpression	"memcpy ( & count , data . data ( ) , sizeof ( int ) )"		882499	0					
ANR	882624	Callee	memcpy		882499	0					
ANR	882625	Identifier	memcpy		882499	0					
ANR	882626	ArgumentList	& count		882499	1					
ANR	882627	Argument	& count		882499	0					
ANR	882628	UnaryOperationExpression	& count		882499	0					
ANR	882629	UnaryOperator	&		882499	0					
ANR	882630	Identifier	count		882499	1					
ANR	882631	Argument	data . data ( )		882499	1					
ANR	882632	CallExpression	data . data ( )		882499	0					
ANR	882633	Callee	data . data		882499	0					
ANR	882634	MemberAccess	data . data		882499	0					
ANR	882635	Identifier	data		882499	0					
ANR	882636	Identifier	data		882499	1					
ANR	882637	ArgumentList			882499	1					
ANR	882638	Argument	sizeof ( int )		882499	2					
ANR	882639	SizeofExpression	sizeof ( int )		882499	0					
ANR	882640	Sizeof	sizeof		882499	0					
ANR	882641	SizeofOperand	int		882499	1					
ANR	882642	IfStatement	if ( count < 1 || ( unsigned int ) data . size ( ) < sizeof ( int ) + sizeof ( WId ) * count )		882499	8					
ANR	882643	Condition	count < 1 || ( unsigned int ) data . size ( ) < sizeof ( int ) + sizeof ( WId ) * count	1306:8:45391:45464	882499	0	True				
ANR	882644	OrExpression	count < 1 || ( unsigned int ) data . size ( ) < sizeof ( int ) + sizeof ( WId ) * count		882499	0		||			
ANR	882645	RelationalExpression	count < 1		882499	0		<			
ANR	882646	Identifier	count		882499	0					
ANR	882647	PrimaryExpression	1		882499	1					
ANR	882648	RelationalExpression	( unsigned int ) data . size ( ) < sizeof ( int ) + sizeof ( WId ) * count		882499	1		<			
ANR	882649	CastExpression	( unsigned int ) data . size ( )		882499	0					
ANR	882650	CastTarget	unsigned int		882499	0					
ANR	882651	CallExpression	data . size ( )		882499	1					
ANR	882652	Callee	data . size		882499	0					
ANR	882653	MemberAccess	data . size		882499	0					
ANR	882654	Identifier	data		882499	0					
ANR	882655	Identifier	size		882499	1					
ANR	882656	ArgumentList			882499	1					
ANR	882657	AdditiveExpression	sizeof ( int ) + sizeof ( WId ) * count		882499	1		+			
ANR	882658	SizeofExpression	sizeof ( int )		882499	0					
ANR	882659	Sizeof	sizeof		882499	0					
ANR	882660	SizeofOperand	int		882499	1					
ANR	882661	MultiplicativeExpression	sizeof ( WId ) * count		882499	1		*			
ANR	882662	SizeofExpression	sizeof ( WId )		882499	0					
ANR	882663	Sizeof	sizeof		882499	0					
ANR	882664	SizeofOperand	WId		882499	1					
ANR	882665	Identifier	count		882499	1					
ANR	882666	CompoundStatement		32:84:725:725	882499	1					
ANR	882667	ReturnStatement	return ids ;	1307:8:45477:45487	882499	0	True				
ANR	882668	Identifier	ids		882499	0					
ANR	882669	IdentifierDeclStatement	WId id ;	1310:4:45500:45506	882499	9	True				
ANR	882670	IdentifierDecl	id		882499	0					
ANR	882671	IdentifierDeclType	WId		882499	0					
ANR	882672	Identifier	id		882499	1					
ANR	882673	ForStatement	for ( int i = 0 ; i < count ; ++ i )		882499	10					
ANR	882674	ForInit	int i = 0 ;	1311:9:45517:45526	882499	0	True				
ANR	882675	IdentifierDeclStatement	int i = 0 ;		882499	0					
ANR	882676	IdentifierDecl	i = 0		882499	0					
ANR	882677	IdentifierDeclType	int		882499	0					
ANR	882678	Identifier	i		882499	1					
ANR	882679	AssignmentExpression	i = 0		882499	2		=			
ANR	882680	Identifier	i		882499	0					
ANR	882681	PrimaryExpression	0		882499	1					
ANR	882682	Condition	i < count	1311:20:45528:45536	882499	1	True				
ANR	882683	RelationalExpression	i < count		882499	0		<			
ANR	882684	Identifier	i		882499	0					
ANR	882685	Identifier	count		882499	1					
ANR	882686	UnaryExpression	++ i	1311:31:45539:45541	882499	2	True				
ANR	882687	IncDec	++		882499	0					
ANR	882688	Identifier	i		882499	1					
ANR	882689	CompoundStatement		37:36:802:802	882499	3					
ANR	882690	ExpressionStatement	"memcpy ( & id , data . data ( ) + sizeof ( int ) + sizeof ( WId ) * i , sizeof ( WId ) )"	1312:8:45554:45623	882499	0	True				
ANR	882691	CallExpression	"memcpy ( & id , data . data ( ) + sizeof ( int ) + sizeof ( WId ) * i , sizeof ( WId ) )"		882499	0					
ANR	882692	Callee	memcpy		882499	0					
ANR	882693	Identifier	memcpy		882499	0					
ANR	882694	ArgumentList	& id		882499	1					
ANR	882695	Argument	& id		882499	0					
ANR	882696	UnaryOperationExpression	& id		882499	0					
ANR	882697	UnaryOperator	&		882499	0					
ANR	882698	Identifier	id		882499	1					
ANR	882699	Argument	data . data ( ) + sizeof ( int ) + sizeof ( WId ) * i		882499	1					
ANR	882700	AdditiveExpression	data . data ( ) + sizeof ( int ) + sizeof ( WId ) * i		882499	0		+			
ANR	882701	CallExpression	data . data ( )		882499	0					
ANR	882702	Callee	data . data		882499	0					
ANR	882703	MemberAccess	data . data		882499	0					
ANR	882704	Identifier	data		882499	0					
ANR	882705	Identifier	data		882499	1					
ANR	882706	ArgumentList			882499	1					
ANR	882707	AdditiveExpression	sizeof ( int ) + sizeof ( WId ) * i		882499	1		+			
ANR	882708	SizeofExpression	sizeof ( int )		882499	0					
ANR	882709	Sizeof	sizeof		882499	0					
ANR	882710	SizeofOperand	int		882499	1					
ANR	882711	MultiplicativeExpression	sizeof ( WId ) * i		882499	1		*			
ANR	882712	SizeofExpression	sizeof ( WId )		882499	0					
ANR	882713	Sizeof	sizeof		882499	0					
ANR	882714	SizeofOperand	WId		882499	1					
ANR	882715	Identifier	i		882499	1					
ANR	882716	Argument	sizeof ( WId )		882499	2					
ANR	882717	SizeofExpression	sizeof ( WId )		882499	0					
ANR	882718	Sizeof	sizeof		882499	0					
ANR	882719	SizeofOperand	WId		882499	1					
ANR	882720	ExpressionStatement	ids << id	1313:8:45633:45642	882499	1	True				
ANR	882721	ShiftExpression	ids << id		882499	0		<<			
ANR	882722	Identifier	ids		882499	0					
ANR	882723	Identifier	id		882499	1					
ANR	882724	IfStatement	if ( ok )		882499	11					
ANR	882725	Condition	ok	1316:8:45659:45660	882499	0	True				
ANR	882726	Identifier	ok		882499	0					
ANR	882727	CompoundStatement		42:12:921:921	882499	1					
ANR	882728	ExpressionStatement	* ok = true	1317:8:45673:45683	882499	0	True				
ANR	882729	AssignmentExpression	* ok = true		882499	0		=			
ANR	882730	UnaryOperationExpression	* ok		882499	0					
ANR	882731	UnaryOperator	*		882499	0					
ANR	882732	Identifier	ok		882499	1					
ANR	882733	Identifier	true		882499	1					
ANR	882734	ReturnStatement	return ids ;	1320:4:45696:45706	882499	12	True				
ANR	882735	Identifier	ids		882499	0					
ANR	882736	ReturnType	QList < WId >		882499	1					
ANR	882737	Identifier	XWindowTasksModel :: winIdsFromMimeData		882499	2					
ANR	882738	ParameterList	"const QMimeData * mimeData , bool * ok"		882499	3					
ANR	882739	Parameter	const QMimeData * mimeData	1274:49:44704:44728	882499	0	True				
ANR	882740	ParameterType	const QMimeData *		882499	0					
ANR	882741	Identifier	mimeData		882499	1					
ANR	882742	Parameter	bool * ok	1274:76:44731:44738	882499	1	True				
ANR	882743	ParameterType	bool *		882499	0					
ANR	882744	Identifier	ok		882499	1					
ANR	882745	CFGEntryNode	ENTRY		882499		True				
ANR	882746	CFGExitNode	EXIT		882499		True				
ANR	882747	Symbol	mimeData		882499						
ANR	882748	Symbol	* ok		882499						
ANR	882749	Symbol	winIdFromMimeData		882499						
ANR	882750	Symbol	& singularOk		882499						
ANR	882751	Symbol	data		882499						
ANR	882752	Symbol	data . data		882499						
ANR	882753	Symbol	& id		882499						
ANR	882754	Symbol	false		882499						
ANR	882755	Symbol	count		882499						
ANR	882756	Symbol	i		882499						
ANR	882757	Symbol	singularOk		882499						
ANR	882758	Symbol	* mimeData		882499						
ANR	882759	Symbol	data . size		882499						
ANR	882760	Symbol	mimeData -> hasFormat		882499						
ANR	882761	Symbol	true		882499						
ANR	882762	Symbol	ids		882499						
ANR	882763	Symbol	& count		882499						
ANR	882764	Symbol	id		882499						
ANR	882765	Symbol	ok		882499						
ANR	882766	Symbol	Private :: groupMimeType		882499						
