command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	804267	File	data/converged/CVE-2018-6791_plasma-workspace/taskfilterproxymodel.cpp								
ANR	804268	ClassDef	TaskFilterProxyModel :: Private	27:0:1099:1584							
ANR	804269	DeclStmt									
ANR	804270	Decl							AbstractTasksModelIface	AbstractTasksModelIface *	sourceTasksModel
ANR	804271	DeclStmt									
ANR	804272	Decl							uint	uint	virtualDesktop
ANR	804273	DeclStmt									
ANR	804274	Decl							QRect	QRect	screenGeometry
ANR	804275	DeclStmt									
ANR	804276	Decl							QString	QString	activity
ANR	804277	DeclStmt									
ANR	804278	Decl							bool	bool	filterByVirtualDesktop
ANR	804279	DeclStmt									
ANR	804280	Decl							bool	bool	filterByScreen
ANR	804281	DeclStmt									
ANR	804282	Decl							bool	bool	filterByActivity
ANR	804283	DeclStmt									
ANR	804284	Decl							bool	bool	filterNotMinimized
ANR	804285	DeclStmt									
ANR	804286	Decl							bool	bool	filterSkipTaskbar
ANR	804287	DeclStmt									
ANR	804288	Decl							bool	bool	filterSkipPager
ANR	804289	DeclStmt									
ANR	804290	Decl							bool	bool	demandingAttentionSkipsFilters
ANR	804291	Function	TaskFilterProxyModel :: TaskFilterProxyModel	52:0:1656:1781							
ANR	804292	FunctionDef	TaskFilterProxyModel :: TaskFilterProxyModel (QObject * parent)		804291	0					
ANR	804293	CompoundStatement		55:0:1779:1781	804291	0					
ANR	804294	Identifier	TaskFilterProxyModel :: TaskFilterProxyModel		804291	1					
ANR	804295	ParameterList	QObject * parent		804291	2					
ANR	804296	Parameter	QObject * parent	52:43:1699:1713	804291	0	True				
ANR	804297	ParameterType	QObject *		804291	0					
ANR	804298	Identifier	parent		804291	1					
ANR	804299	CFGEntryNode	ENTRY		804291		True				
ANR	804300	CFGExitNode	EXIT		804291		True				
ANR	804301	Symbol	parent		804291						
ANR	804302	Function	TaskFilterProxyModel :: ~TaskFilterProxyModel	58:0:1784:1832							
ANR	804303	FunctionDef	TaskFilterProxyModel :: ~TaskFilterProxyModel ()		804302	0					
ANR	804304	CompoundStatement		59:0:1830:1832	804302	0					
ANR	804305	Identifier	TaskFilterProxyModel :: ~TaskFilterProxyModel		804302	1					
ANR	804306	ParameterList			804302	2					
ANR	804307	CFGEntryNode	ENTRY		804302		True				
ANR	804308	CFGExitNode	EXIT		804302		True				
ANR	804309	Function	TaskFilterProxyModel :: setSourceModel	62:0:1835:2049							
ANR	804310	FunctionDef	TaskFilterProxyModel :: setSourceModel (QAbstractItemModel * sourceModel)		804309	0					
ANR	804311	CompoundStatement		63:0:1910:2049	804309	0					
ANR	804312	Statement	d	64:4:1916:1916	804309	0	True				
ANR	804313	Statement	->	64:5:1917:1918	804309	1	True				
ANR	804314	Statement	sourceTasksModel	64:7:1919:1934	804309	2	True				
ANR	804315	Statement	=	64:24:1936:1936	804309	3	True				
ANR	804316	Statement	dynamic_cast	64:26:1938:1949	804309	4	True				
ANR	804317	Statement	<	64:38:1950:1950	804309	5	True				
ANR	804318	Statement	AbstractTasksModelIface	64:39:1951:1973	804309	6	True				
ANR	804319	Statement	*	64:63:1975:1975	804309	7	True				
ANR	804320	Statement	>	64:64:1976:1976	804309	8	True				
ANR	804321	ExpressionStatement	sourceModel	64:65:1977:1990	804309	9	True				
ANR	804322	Identifier	sourceModel		804309	0					
ANR	804323	ExpressionStatement	QSortFilterProxyModel :: setSourceModel ( sourceModel )	66:4:1997:2047	804309	10	True				
ANR	804324	CallExpression	QSortFilterProxyModel :: setSourceModel ( sourceModel )		804309	0					
ANR	804325	Callee	QSortFilterProxyModel :: setSourceModel		804309	0					
ANR	804326	Identifier	QSortFilterProxyModel :: setSourceModel		804309	0					
ANR	804327	ArgumentList	sourceModel		804309	1					
ANR	804328	Argument	sourceModel		804309	0					
ANR	804329	Identifier	sourceModel		804309	0					
ANR	804330	ReturnType	void		804309	1					
ANR	804331	Identifier	TaskFilterProxyModel :: setSourceModel		804309	2					
ANR	804332	ParameterList	QAbstractItemModel * sourceModel		804309	3					
ANR	804333	Parameter	QAbstractItemModel * sourceModel	62:42:1877:1907	804309	0	True				
ANR	804334	ParameterType	QAbstractItemModel *		804309	0					
ANR	804335	Identifier	sourceModel		804309	1					
ANR	804336	CFGEntryNode	ENTRY		804309		True				
ANR	804337	CFGExitNode	EXIT		804309		True				
ANR	804338	Symbol	sourceModel		804309						
ANR	804339	Function	TaskFilterProxyModel :: virtualDesktop	69:0:2052:2134							
ANR	804340	FunctionDef	TaskFilterProxyModel :: virtualDesktop ()		804339	0					
ANR	804341	CompoundStatement		70:0:2102:2134	804339	0					
ANR	804342	ReturnStatement	return d -> virtualDesktop ;	71:4:2108:2132	804339	0	True				
ANR	804343	PtrMemberAccess	d -> virtualDesktop		804339	0					
ANR	804344	Identifier	d		804339	0					
ANR	804345	Identifier	virtualDesktop		804339	1					
ANR	804346	ReturnType	uint		804339	1					
ANR	804347	Identifier	TaskFilterProxyModel :: virtualDesktop		804339	2					
ANR	804348	ParameterList			804339	3					
ANR	804349	CFGEntryNode	ENTRY		804339		True				
ANR	804350	CFGExitNode	EXIT		804339		True				
ANR	804351	Symbol	d		804339						
ANR	804352	Symbol	d -> virtualDesktop		804339						
ANR	804353	Symbol	* d		804339						
ANR	804354	Function	TaskFilterProxyModel :: setVirtualDesktop	74:0:2137:2425							
ANR	804355	FunctionDef	TaskFilterProxyModel :: setVirtualDesktop (uint virtualDesktop)		804354	0					
ANR	804356	CompoundStatement		75:0:2203:2425	804354	0					
ANR	804357	IfStatement	if ( d -> virtualDesktop != virtualDesktop )		804354	0					
ANR	804358	Condition	d -> virtualDesktop != virtualDesktop	76:8:2213:2247	804354	0	True				
ANR	804359	EqualityExpression	d -> virtualDesktop != virtualDesktop		804354	0		!=			
ANR	804360	PtrMemberAccess	d -> virtualDesktop		804354	0					
ANR	804361	Identifier	d		804354	0					
ANR	804362	Identifier	virtualDesktop		804354	1					
ANR	804363	Identifier	virtualDesktop		804354	1					
ANR	804364	CompoundStatement		9:8:185:213	804354	1					
ANR	804365	ExpressionStatement	d -> virtualDesktop = virtualDesktop	77:8:2260:2294	804354	0	True				
ANR	804366	AssignmentExpression	d -> virtualDesktop = virtualDesktop		804354	0		=			
ANR	804367	PtrMemberAccess	d -> virtualDesktop		804354	0					
ANR	804368	Identifier	d		804354	0					
ANR	804369	Identifier	virtualDesktop		804354	1					
ANR	804370	Identifier	virtualDesktop		804354	1					
ANR	804371	IfStatement	if ( d -> filterByVirtualDesktop )		804354	1					
ANR	804372	Condition	d -> filterByVirtualDesktop	79:12:2309:2333	804354	0	True				
ANR	804373	PtrMemberAccess	d -> filterByVirtualDesktop		804354	0					
ANR	804374	Identifier	d		804354	0					
ANR	804375	Identifier	filterByVirtualDesktop		804354	1					
ANR	804376	CompoundStatement		5:39:132:132	804354	1					
ANR	804377	ExpressionStatement	invalidateFilter ( )	80:12:2350:2368	804354	0	True				
ANR	804378	CallExpression	invalidateFilter ( )		804354	0					
ANR	804379	Callee	invalidateFilter		804354	0					
ANR	804380	Identifier	invalidateFilter		804354	0					
ANR	804381	ArgumentList			804354	1					
ANR	804382	IdentifierDeclStatement	emit virtualDesktopChanged ( ) ;	83:8:2389:2417	804354	2	True				
ANR	804383	IdentifierDecl	virtualDesktopChanged ( )		804354	0					
ANR	804384	IdentifierDeclType	emit		804354	0					
ANR	804385	Identifier	virtualDesktopChanged		804354	1					
ANR	804386	ReturnType	void		804354	1					
ANR	804387	Identifier	TaskFilterProxyModel :: setVirtualDesktop		804354	2					
ANR	804388	ParameterList	uint virtualDesktop		804354	3					
ANR	804389	Parameter	uint virtualDesktop	74:45:2182:2200	804354	0	True				
ANR	804390	ParameterType	uint		804354	0					
ANR	804391	Identifier	virtualDesktop		804354	1					
ANR	804392	CFGEntryNode	ENTRY		804354		True				
ANR	804393	CFGExitNode	EXIT		804354		True				
ANR	804394	Symbol	d		804354						
ANR	804395	Symbol	d -> virtualDesktop		804354						
ANR	804396	Symbol	d -> filterByVirtualDesktop		804354						
ANR	804397	Symbol	virtualDesktop		804354						
ANR	804398	Symbol	virtualDesktopChanged		804354						
ANR	804399	Symbol	* d		804354						
ANR	804400	Function	TaskFilterProxyModel :: screenGeometry	87:0:2428:2511							
ANR	804401	FunctionDef	TaskFilterProxyModel :: screenGeometry ()		804400	0					
ANR	804402	CompoundStatement		88:0:2479:2511	804400	0					
ANR	804403	ReturnStatement	return d -> screenGeometry ;	89:4:2485:2509	804400	0	True				
ANR	804404	PtrMemberAccess	d -> screenGeometry		804400	0					
ANR	804405	Identifier	d		804400	0					
ANR	804406	Identifier	screenGeometry		804400	1					
ANR	804407	ReturnType	QRect		804400	1					
ANR	804408	Identifier	TaskFilterProxyModel :: screenGeometry		804400	2					
ANR	804409	ParameterList			804400	3					
ANR	804410	CFGEntryNode	ENTRY		804400		True				
ANR	804411	CFGExitNode	EXIT		804400		True				
ANR	804412	Symbol	d		804400						
ANR	804413	Symbol	* d		804400						
ANR	804414	Symbol	d -> screenGeometry		804400						
ANR	804415	Function	TaskFilterProxyModel :: setScreenGeometry	92:0:2514:2784							
ANR	804416	FunctionDef	TaskFilterProxyModel :: setScreenGeometry (const QRect & geometry)		804415	0					
ANR	804417	CompoundStatement		93:0:2582:2784	804415	0					
ANR	804418	IfStatement	if ( d -> screenGeometry != geometry )		804415	0					
ANR	804419	Condition	d -> screenGeometry != geometry	94:8:2592:2620	804415	0	True				
ANR	804420	EqualityExpression	d -> screenGeometry != geometry		804415	0		!=			
ANR	804421	PtrMemberAccess	d -> screenGeometry		804415	0					
ANR	804422	Identifier	d		804415	0					
ANR	804423	Identifier	screenGeometry		804415	1					
ANR	804424	Identifier	geometry		804415	1					
ANR	804425	CompoundStatement		9:8:165:193	804415	1					
ANR	804426	ExpressionStatement	d -> screenGeometry = geometry	95:8:2633:2661	804415	0	True				
ANR	804427	AssignmentExpression	d -> screenGeometry = geometry		804415	0		=			
ANR	804428	PtrMemberAccess	d -> screenGeometry		804415	0					
ANR	804429	Identifier	d		804415	0					
ANR	804430	Identifier	screenGeometry		804415	1					
ANR	804431	Identifier	geometry		804415	1					
ANR	804432	IfStatement	if ( d -> filterByScreen )		804415	1					
ANR	804433	Condition	d -> filterByScreen	97:12:2676:2692	804415	0	True				
ANR	804434	PtrMemberAccess	d -> filterByScreen		804415	0					
ANR	804435	Identifier	d		804415	0					
ANR	804436	Identifier	filterByScreen		804415	1					
ANR	804437	CompoundStatement		5:31:112:112	804415	1					
ANR	804438	ExpressionStatement	invalidateFilter ( )	98:12:2709:2727	804415	0	True				
ANR	804439	CallExpression	invalidateFilter ( )		804415	0					
ANR	804440	Callee	invalidateFilter		804415	0					
ANR	804441	Identifier	invalidateFilter		804415	0					
ANR	804442	ArgumentList			804415	1					
ANR	804443	IdentifierDeclStatement	emit screenGeometryChanged ( ) ;	101:8:2748:2776	804415	2	True				
ANR	804444	IdentifierDecl	screenGeometryChanged ( )		804415	0					
ANR	804445	IdentifierDeclType	emit		804415	0					
ANR	804446	Identifier	screenGeometryChanged		804415	1					
ANR	804447	ReturnType	void		804415	1					
ANR	804448	Identifier	TaskFilterProxyModel :: setScreenGeometry		804415	2					
ANR	804449	ParameterList	const QRect & geometry		804415	3					
ANR	804450	Parameter	const QRect & geometry	92:45:2559:2579	804415	0	True				
ANR	804451	ParameterType	const QRect &		804415	0					
ANR	804452	Identifier	geometry		804415	1					
ANR	804453	CFGEntryNode	ENTRY		804415		True				
ANR	804454	CFGExitNode	EXIT		804415		True				
ANR	804455	Symbol	screenGeometryChanged		804415						
ANR	804456	Symbol	d		804415						
ANR	804457	Symbol	geometry		804415						
ANR	804458	Symbol	d -> filterByScreen		804415						
ANR	804459	Symbol	* d		804415						
ANR	804460	Symbol	d -> screenGeometry		804415						
ANR	804461	Function	TaskFilterProxyModel :: activity	105:0:2787:2860							
ANR	804462	FunctionDef	TaskFilterProxyModel :: activity ()		804461	0					
ANR	804463	CompoundStatement		106:0:2834:2860	804461	0					
ANR	804464	ReturnStatement	return d -> activity ;	107:4:2840:2858	804461	0	True				
ANR	804465	PtrMemberAccess	d -> activity		804461	0					
ANR	804466	Identifier	d		804461	0					
ANR	804467	Identifier	activity		804461	1					
ANR	804468	ReturnType	QString		804461	1					
ANR	804469	Identifier	TaskFilterProxyModel :: activity		804461	2					
ANR	804470	ParameterList			804461	3					
ANR	804471	CFGEntryNode	ENTRY		804461		True				
ANR	804472	CFGExitNode	EXIT		804461		True				
ANR	804473	Symbol	d		804461						
ANR	804474	Symbol	d -> activity		804461						
ANR	804475	Symbol	* d		804461						
ANR	804476	Function	TaskFilterProxyModel :: setActivity	110:0:2863:3113							
ANR	804477	FunctionDef	TaskFilterProxyModel :: setActivity (const QString & activity)		804476	0					
ANR	804478	CompoundStatement		111:0:2927:3113	804476	0					
ANR	804479	IfStatement	if ( d -> activity != activity )		804476	0					
ANR	804480	Condition	d -> activity != activity	112:8:2937:2959	804476	0	True				
ANR	804481	EqualityExpression	d -> activity != activity		804476	0		!=			
ANR	804482	PtrMemberAccess	d -> activity		804476	0					
ANR	804483	Identifier	d		804476	0					
ANR	804484	Identifier	activity		804476	1					
ANR	804485	Identifier	activity		804476	1					
ANR	804486	CompoundStatement		9:8:155:177	804476	1					
ANR	804487	ExpressionStatement	d -> activity = activity	113:8:2972:2994	804476	0	True				
ANR	804488	AssignmentExpression	d -> activity = activity		804476	0		=			
ANR	804489	PtrMemberAccess	d -> activity		804476	0					
ANR	804490	Identifier	d		804476	0					
ANR	804491	Identifier	activity		804476	1					
ANR	804492	Identifier	activity		804476	1					
ANR	804493	IfStatement	if ( d -> filterByActivity )		804476	1					
ANR	804494	Condition	d -> filterByActivity	115:12:3009:3027	804476	0	True				
ANR	804495	PtrMemberAccess	d -> filterByActivity		804476	0					
ANR	804496	Identifier	d		804476	0					
ANR	804497	Identifier	filterByActivity		804476	1					
ANR	804498	CompoundStatement		5:33:102:102	804476	1					
ANR	804499	ExpressionStatement	invalidateFilter ( )	116:12:3044:3062	804476	0	True				
ANR	804500	CallExpression	invalidateFilter ( )		804476	0					
ANR	804501	Callee	invalidateFilter		804476	0					
ANR	804502	Identifier	invalidateFilter		804476	0					
ANR	804503	ArgumentList			804476	1					
ANR	804504	IdentifierDeclStatement	emit activityChanged ( ) ;	119:8:3083:3105	804476	2	True				
ANR	804505	IdentifierDecl	activityChanged ( )		804476	0					
ANR	804506	IdentifierDeclType	emit		804476	0					
ANR	804507	Identifier	activityChanged		804476	1					
ANR	804508	ReturnType	void		804476	1					
ANR	804509	Identifier	TaskFilterProxyModel :: setActivity		804476	2					
ANR	804510	ParameterList	const QString & activity		804476	3					
ANR	804511	Parameter	const QString & activity	110:39:2902:2924	804476	0	True				
ANR	804512	ParameterType	const QString &		804476	0					
ANR	804513	Identifier	activity		804476	1					
ANR	804514	CFGEntryNode	ENTRY		804476		True				
ANR	804515	CFGExitNode	EXIT		804476		True				
ANR	804516	Symbol	activity		804476						
ANR	804517	Symbol	d		804476						
ANR	804518	Symbol	d -> filterByActivity		804476						
ANR	804519	Symbol	activityChanged		804476						
ANR	804520	Symbol	d -> activity		804476						
ANR	804521	Symbol	* d		804476						
ANR	804522	Function	TaskFilterProxyModel :: filterByVirtualDesktop	123:0:3116:3214							
ANR	804523	FunctionDef	TaskFilterProxyModel :: filterByVirtualDesktop ()		804522	0					
ANR	804524	CompoundStatement		124:0:3174:3214	804522	0					
ANR	804525	ReturnStatement	return d -> filterByVirtualDesktop ;	125:4:3180:3212	804522	0	True				
ANR	804526	PtrMemberAccess	d -> filterByVirtualDesktop		804522	0					
ANR	804527	Identifier	d		804522	0					
ANR	804528	Identifier	filterByVirtualDesktop		804522	1					
ANR	804529	ReturnType	bool		804522	1					
ANR	804530	Identifier	TaskFilterProxyModel :: filterByVirtualDesktop		804522	2					
ANR	804531	ParameterList			804522	3					
ANR	804532	CFGEntryNode	ENTRY		804522		True				
ANR	804533	CFGExitNode	EXIT		804522		True				
ANR	804534	Symbol	d		804522						
ANR	804535	Symbol	d -> filterByVirtualDesktop		804522						
ANR	804536	Symbol	* d		804522						
ANR	804537	Function	TaskFilterProxyModel :: setFilterByVirtualDesktop	128:0:3217:3458							
ANR	804538	FunctionDef	TaskFilterProxyModel :: setFilterByVirtualDesktop (bool filter)		804537	0					
ANR	804539	CompoundStatement		129:0:3283:3458	804537	0					
ANR	804540	IfStatement	if ( d -> filterByVirtualDesktop != filter )		804537	0					
ANR	804541	Condition	d -> filterByVirtualDesktop != filter	130:8:3293:3327	804537	0	True				
ANR	804542	EqualityExpression	d -> filterByVirtualDesktop != filter		804537	0		!=			
ANR	804543	PtrMemberAccess	d -> filterByVirtualDesktop		804537	0					
ANR	804544	Identifier	d		804537	0					
ANR	804545	Identifier	filterByVirtualDesktop		804537	1					
ANR	804546	Identifier	filter		804537	1					
ANR	804547	CompoundStatement		7:8:130:166	804537	1					
ANR	804548	ExpressionStatement	d -> filterByVirtualDesktop = filter	131:8:3340:3374	804537	0	True				
ANR	804549	AssignmentExpression	d -> filterByVirtualDesktop = filter		804537	0		=			
ANR	804550	PtrMemberAccess	d -> filterByVirtualDesktop		804537	0					
ANR	804551	Identifier	d		804537	0					
ANR	804552	Identifier	filterByVirtualDesktop		804537	1					
ANR	804553	Identifier	filter		804537	1					
ANR	804554	ExpressionStatement	invalidateFilter ( )	133:8:3385:3403	804537	1	True				
ANR	804555	CallExpression	invalidateFilter ( )		804537	0					
ANR	804556	Callee	invalidateFilter		804537	0					
ANR	804557	Identifier	invalidateFilter		804537	0					
ANR	804558	ArgumentList			804537	1					
ANR	804559	IdentifierDeclStatement	emit filterByVirtualDesktopChanged ( ) ;	135:8:3414:3450	804537	2	True				
ANR	804560	IdentifierDecl	filterByVirtualDesktopChanged ( )		804537	0					
ANR	804561	IdentifierDeclType	emit		804537	0					
ANR	804562	Identifier	filterByVirtualDesktopChanged		804537	1					
ANR	804563	ReturnType	void		804537	1					
ANR	804564	Identifier	TaskFilterProxyModel :: setFilterByVirtualDesktop		804537	2					
ANR	804565	ParameterList	bool filter		804537	3					
ANR	804566	Parameter	bool filter	128:53:3270:3280	804537	0	True				
ANR	804567	ParameterType	bool		804537	0					
ANR	804568	Identifier	filter		804537	1					
ANR	804569	CFGEntryNode	ENTRY		804537		True				
ANR	804570	CFGExitNode	EXIT		804537		True				
ANR	804571	Symbol	filter		804537						
ANR	804572	Symbol	d		804537						
ANR	804573	Symbol	d -> filterByVirtualDesktop		804537						
ANR	804574	Symbol	filterByVirtualDesktopChanged		804537						
ANR	804575	Symbol	* d		804537						
ANR	804576	Function	TaskFilterProxyModel :: filterByScreen	139:0:3461:3543							
ANR	804577	FunctionDef	TaskFilterProxyModel :: filterByScreen ()		804576	0					
ANR	804578	CompoundStatement		140:0:3511:3543	804576	0					
ANR	804579	ReturnStatement	return d -> filterByScreen ;	141:4:3517:3541	804576	0	True				
ANR	804580	PtrMemberAccess	d -> filterByScreen		804576	0					
ANR	804581	Identifier	d		804576	0					
ANR	804582	Identifier	filterByScreen		804576	1					
ANR	804583	ReturnType	bool		804576	1					
ANR	804584	Identifier	TaskFilterProxyModel :: filterByScreen		804576	2					
ANR	804585	ParameterList			804576	3					
ANR	804586	CFGEntryNode	ENTRY		804576		True				
ANR	804587	CFGExitNode	EXIT		804576		True				
ANR	804588	Symbol	d		804576						
ANR	804589	Symbol	d -> filterByScreen		804576						
ANR	804590	Symbol	* d		804576						
ANR	804591	Function	TaskFilterProxyModel :: setFilterByScreen	144:0:3546:3755							
ANR	804592	FunctionDef	TaskFilterProxyModel :: setFilterByScreen (bool filter)		804591	0					
ANR	804593	CompoundStatement		145:0:3604:3755	804591	0					
ANR	804594	IfStatement	if ( d -> filterByScreen != filter )		804591	0					
ANR	804595	Condition	d -> filterByScreen != filter	146:8:3614:3640	804591	0	True				
ANR	804596	EqualityExpression	d -> filterByScreen != filter		804591	0		!=			
ANR	804597	PtrMemberAccess	d -> filterByScreen		804591	0					
ANR	804598	Identifier	d		804591	0					
ANR	804599	Identifier	filterByScreen		804591	1					
ANR	804600	Identifier	filter		804591	1					
ANR	804601	CompoundStatement		7:8:114:142	804591	1					
ANR	804602	ExpressionStatement	d -> filterByScreen = filter	147:8:3653:3679	804591	0	True				
ANR	804603	AssignmentExpression	d -> filterByScreen = filter		804591	0		=			
ANR	804604	PtrMemberAccess	d -> filterByScreen		804591	0					
ANR	804605	Identifier	d		804591	0					
ANR	804606	Identifier	filterByScreen		804591	1					
ANR	804607	Identifier	filter		804591	1					
ANR	804608	ExpressionStatement	invalidateFilter ( )	149:8:3690:3708	804591	1	True				
ANR	804609	CallExpression	invalidateFilter ( )		804591	0					
ANR	804610	Callee	invalidateFilter		804591	0					
ANR	804611	Identifier	invalidateFilter		804591	0					
ANR	804612	ArgumentList			804591	1					
ANR	804613	IdentifierDeclStatement	emit filterByScreenChanged ( ) ;	151:8:3719:3747	804591	2	True				
ANR	804614	IdentifierDecl	filterByScreenChanged ( )		804591	0					
ANR	804615	IdentifierDeclType	emit		804591	0					
ANR	804616	Identifier	filterByScreenChanged		804591	1					
ANR	804617	ReturnType	void		804591	1					
ANR	804618	Identifier	TaskFilterProxyModel :: setFilterByScreen		804591	2					
ANR	804619	ParameterList	bool filter		804591	3					
ANR	804620	Parameter	bool filter	144:45:3591:3601	804591	0	True				
ANR	804621	ParameterType	bool		804591	0					
ANR	804622	Identifier	filter		804591	1					
ANR	804623	CFGEntryNode	ENTRY		804591		True				
ANR	804624	CFGExitNode	EXIT		804591		True				
ANR	804625	Symbol	filter		804591						
ANR	804626	Symbol	d		804591						
ANR	804627	Symbol	filterByScreenChanged		804591						
ANR	804628	Symbol	d -> filterByScreen		804591						
ANR	804629	Symbol	* d		804591						
ANR	804630	Function	TaskFilterProxyModel :: filterByActivity	155:0:3758:3844							
ANR	804631	FunctionDef	TaskFilterProxyModel :: filterByActivity ()		804630	0					
ANR	804632	CompoundStatement		156:0:3810:3844	804630	0					
ANR	804633	ReturnStatement	return d -> filterByActivity ;	157:4:3816:3842	804630	0	True				
ANR	804634	PtrMemberAccess	d -> filterByActivity		804630	0					
ANR	804635	Identifier	d		804630	0					
ANR	804636	Identifier	filterByActivity		804630	1					
ANR	804637	ReturnType	bool		804630	1					
ANR	804638	Identifier	TaskFilterProxyModel :: filterByActivity		804630	2					
ANR	804639	ParameterList			804630	3					
ANR	804640	CFGEntryNode	ENTRY		804630		True				
ANR	804641	CFGExitNode	EXIT		804630		True				
ANR	804642	Symbol	d		804630						
ANR	804643	Symbol	d -> filterByActivity		804630						
ANR	804644	Symbol	* d		804630						
ANR	804645	Function	TaskFilterProxyModel :: setFilterByActivity	160:0:3847:4064							
ANR	804646	FunctionDef	TaskFilterProxyModel :: setFilterByActivity (bool filter)		804645	0					
ANR	804647	CompoundStatement		161:0:3907:4064	804645	0					
ANR	804648	IfStatement	if ( d -> filterByActivity != filter )		804645	0					
ANR	804649	Condition	d -> filterByActivity != filter	162:8:3917:3945	804645	0	True				
ANR	804650	EqualityExpression	d -> filterByActivity != filter		804645	0		!=			
ANR	804651	PtrMemberAccess	d -> filterByActivity		804645	0					
ANR	804652	Identifier	d		804645	0					
ANR	804653	Identifier	filterByActivity		804645	1					
ANR	804654	Identifier	filter		804645	1					
ANR	804655	CompoundStatement		7:8:118:148	804645	1					
ANR	804656	ExpressionStatement	d -> filterByActivity = filter	163:8:3958:3986	804645	0	True				
ANR	804657	AssignmentExpression	d -> filterByActivity = filter		804645	0		=			
ANR	804658	PtrMemberAccess	d -> filterByActivity		804645	0					
ANR	804659	Identifier	d		804645	0					
ANR	804660	Identifier	filterByActivity		804645	1					
ANR	804661	Identifier	filter		804645	1					
ANR	804662	ExpressionStatement	invalidateFilter ( )	165:8:3997:4015	804645	1	True				
ANR	804663	CallExpression	invalidateFilter ( )		804645	0					
ANR	804664	Callee	invalidateFilter		804645	0					
ANR	804665	Identifier	invalidateFilter		804645	0					
ANR	804666	ArgumentList			804645	1					
ANR	804667	IdentifierDeclStatement	emit filterByActivityChanged ( ) ;	167:8:4026:4056	804645	2	True				
ANR	804668	IdentifierDecl	filterByActivityChanged ( )		804645	0					
ANR	804669	IdentifierDeclType	emit		804645	0					
ANR	804670	Identifier	filterByActivityChanged		804645	1					
ANR	804671	ReturnType	void		804645	1					
ANR	804672	Identifier	TaskFilterProxyModel :: setFilterByActivity		804645	2					
ANR	804673	ParameterList	bool filter		804645	3					
ANR	804674	Parameter	bool filter	160:47:3894:3904	804645	0	True				
ANR	804675	ParameterType	bool		804645	0					
ANR	804676	Identifier	filter		804645	1					
ANR	804677	CFGEntryNode	ENTRY		804645		True				
ANR	804678	CFGExitNode	EXIT		804645		True				
ANR	804679	Symbol	filter		804645						
ANR	804680	Symbol	d		804645						
ANR	804681	Symbol	d -> filterByActivity		804645						
ANR	804682	Symbol	filterByActivityChanged		804645						
ANR	804683	Symbol	* d		804645						
ANR	804684	Function	TaskFilterProxyModel :: filterNotMinimized	171:0:4067:4157							
ANR	804685	FunctionDef	TaskFilterProxyModel :: filterNotMinimized ()		804684	0					
ANR	804686	CompoundStatement		172:0:4121:4157	804684	0					
ANR	804687	ReturnStatement	return d -> filterNotMinimized ;	173:4:4127:4155	804684	0	True				
ANR	804688	PtrMemberAccess	d -> filterNotMinimized		804684	0					
ANR	804689	Identifier	d		804684	0					
ANR	804690	Identifier	filterNotMinimized		804684	1					
ANR	804691	ReturnType	bool		804684	1					
ANR	804692	Identifier	TaskFilterProxyModel :: filterNotMinimized		804684	2					
ANR	804693	ParameterList			804684	3					
ANR	804694	CFGEntryNode	ENTRY		804684		True				
ANR	804695	CFGExitNode	EXIT		804684		True				
ANR	804696	Symbol	d		804684						
ANR	804697	Symbol	* d		804684						
ANR	804698	Symbol	d -> filterNotMinimized		804684						
ANR	804699	Function	TaskFilterProxyModel :: setFilterNotMinimized	176:0:4160:4385							
ANR	804700	FunctionDef	TaskFilterProxyModel :: setFilterNotMinimized (bool filter)		804699	0					
ANR	804701	CompoundStatement		177:0:4222:4385	804699	0					
ANR	804702	IfStatement	if ( d -> filterNotMinimized != filter )		804699	0					
ANR	804703	Condition	d -> filterNotMinimized != filter	178:8:4232:4262	804699	0	True				
ANR	804704	EqualityExpression	d -> filterNotMinimized != filter		804699	0		!=			
ANR	804705	PtrMemberAccess	d -> filterNotMinimized		804699	0					
ANR	804706	Identifier	d		804699	0					
ANR	804707	Identifier	filterNotMinimized		804699	1					
ANR	804708	Identifier	filter		804699	1					
ANR	804709	CompoundStatement		7:8:122:154	804699	1					
ANR	804710	ExpressionStatement	d -> filterNotMinimized = filter	179:8:4275:4305	804699	0	True				
ANR	804711	AssignmentExpression	d -> filterNotMinimized = filter		804699	0		=			
ANR	804712	PtrMemberAccess	d -> filterNotMinimized		804699	0					
ANR	804713	Identifier	d		804699	0					
ANR	804714	Identifier	filterNotMinimized		804699	1					
ANR	804715	Identifier	filter		804699	1					
ANR	804716	ExpressionStatement	invalidateFilter ( )	181:8:4316:4334	804699	1	True				
ANR	804717	CallExpression	invalidateFilter ( )		804699	0					
ANR	804718	Callee	invalidateFilter		804699	0					
ANR	804719	Identifier	invalidateFilter		804699	0					
ANR	804720	ArgumentList			804699	1					
ANR	804721	IdentifierDeclStatement	emit filterNotMinimizedChanged ( ) ;	183:8:4345:4377	804699	2	True				
ANR	804722	IdentifierDecl	filterNotMinimizedChanged ( )		804699	0					
ANR	804723	IdentifierDeclType	emit		804699	0					
ANR	804724	Identifier	filterNotMinimizedChanged		804699	1					
ANR	804725	ReturnType	void		804699	1					
ANR	804726	Identifier	TaskFilterProxyModel :: setFilterNotMinimized		804699	2					
ANR	804727	ParameterList	bool filter		804699	3					
ANR	804728	Parameter	bool filter	176:49:4209:4219	804699	0	True				
ANR	804729	ParameterType	bool		804699	0					
ANR	804730	Identifier	filter		804699	1					
ANR	804731	CFGEntryNode	ENTRY		804699		True				
ANR	804732	CFGExitNode	EXIT		804699		True				
ANR	804733	Symbol	filter		804699						
ANR	804734	Symbol	d		804699						
ANR	804735	Symbol	* d		804699						
ANR	804736	Symbol	filterNotMinimizedChanged		804699						
ANR	804737	Symbol	d -> filterNotMinimized		804699						
ANR	804738	Function	TaskFilterProxyModel :: filterSkipTaskbar	187:0:4388:4476							
ANR	804739	FunctionDef	TaskFilterProxyModel :: filterSkipTaskbar ()		804738	0					
ANR	804740	CompoundStatement		188:0:4441:4476	804738	0					
ANR	804741	ReturnStatement	return d -> filterSkipTaskbar ;	189:4:4447:4474	804738	0	True				
ANR	804742	PtrMemberAccess	d -> filterSkipTaskbar		804738	0					
ANR	804743	Identifier	d		804738	0					
ANR	804744	Identifier	filterSkipTaskbar		804738	1					
ANR	804745	ReturnType	bool		804738	1					
ANR	804746	Identifier	TaskFilterProxyModel :: filterSkipTaskbar		804738	2					
ANR	804747	ParameterList			804738	3					
ANR	804748	CFGEntryNode	ENTRY		804738		True				
ANR	804749	CFGExitNode	EXIT		804738		True				
ANR	804750	Symbol	d		804738						
ANR	804751	Symbol	d -> filterSkipTaskbar		804738						
ANR	804752	Symbol	* d		804738						
ANR	804753	Function	TaskFilterProxyModel :: setFilterSkipTaskbar	192:0:4479:4700							
ANR	804754	FunctionDef	TaskFilterProxyModel :: setFilterSkipTaskbar (bool filter)		804753	0					
ANR	804755	CompoundStatement		193:0:4540:4700	804753	0					
ANR	804756	IfStatement	if ( d -> filterSkipTaskbar != filter )		804753	0					
ANR	804757	Condition	d -> filterSkipTaskbar != filter	194:8:4550:4579	804753	0	True				
ANR	804758	EqualityExpression	d -> filterSkipTaskbar != filter		804753	0		!=			
ANR	804759	PtrMemberAccess	d -> filterSkipTaskbar		804753	0					
ANR	804760	Identifier	d		804753	0					
ANR	804761	Identifier	filterSkipTaskbar		804753	1					
ANR	804762	Identifier	filter		804753	1					
ANR	804763	CompoundStatement		7:8:120:151	804753	1					
ANR	804764	ExpressionStatement	d -> filterSkipTaskbar = filter	195:8:4592:4621	804753	0	True				
ANR	804765	AssignmentExpression	d -> filterSkipTaskbar = filter		804753	0		=			
ANR	804766	PtrMemberAccess	d -> filterSkipTaskbar		804753	0					
ANR	804767	Identifier	d		804753	0					
ANR	804768	Identifier	filterSkipTaskbar		804753	1					
ANR	804769	Identifier	filter		804753	1					
ANR	804770	ExpressionStatement	invalidateFilter ( )	197:8:4632:4650	804753	1	True				
ANR	804771	CallExpression	invalidateFilter ( )		804753	0					
ANR	804772	Callee	invalidateFilter		804753	0					
ANR	804773	Identifier	invalidateFilter		804753	0					
ANR	804774	ArgumentList			804753	1					
ANR	804775	IdentifierDeclStatement	emit filterSkipTaskbarChanged ( ) ;	199:8:4661:4692	804753	2	True				
ANR	804776	IdentifierDecl	filterSkipTaskbarChanged ( )		804753	0					
ANR	804777	IdentifierDeclType	emit		804753	0					
ANR	804778	Identifier	filterSkipTaskbarChanged		804753	1					
ANR	804779	ReturnType	void		804753	1					
ANR	804780	Identifier	TaskFilterProxyModel :: setFilterSkipTaskbar		804753	2					
ANR	804781	ParameterList	bool filter		804753	3					
ANR	804782	Parameter	bool filter	192:48:4527:4537	804753	0	True				
ANR	804783	ParameterType	bool		804753	0					
ANR	804784	Identifier	filter		804753	1					
ANR	804785	CFGEntryNode	ENTRY		804753		True				
ANR	804786	CFGExitNode	EXIT		804753		True				
ANR	804787	Symbol	filter		804753						
ANR	804788	Symbol	filterSkipTaskbarChanged		804753						
ANR	804789	Symbol	d		804753						
ANR	804790	Symbol	d -> filterSkipTaskbar		804753						
ANR	804791	Symbol	* d		804753						
ANR	804792	Function	TaskFilterProxyModel :: filterSkipPager	203:0:4703:4787							
ANR	804793	FunctionDef	TaskFilterProxyModel :: filterSkipPager ()		804792	0					
ANR	804794	CompoundStatement		204:0:4754:4787	804792	0					
ANR	804795	ReturnStatement	return d -> filterSkipPager ;	205:4:4760:4785	804792	0	True				
ANR	804796	PtrMemberAccess	d -> filterSkipPager		804792	0					
ANR	804797	Identifier	d		804792	0					
ANR	804798	Identifier	filterSkipPager		804792	1					
ANR	804799	ReturnType	bool		804792	1					
ANR	804800	Identifier	TaskFilterProxyModel :: filterSkipPager		804792	2					
ANR	804801	ParameterList			804792	3					
ANR	804802	CFGEntryNode	ENTRY		804792		True				
ANR	804803	CFGExitNode	EXIT		804792		True				
ANR	804804	Symbol	d		804792						
ANR	804805	Symbol	d -> filterSkipPager		804792						
ANR	804806	Symbol	* d		804792						
ANR	804807	Function	TaskFilterProxyModel :: setFilterSkipPager	208:0:4790:5003							
ANR	804808	FunctionDef	TaskFilterProxyModel :: setFilterSkipPager (bool filter)		804807	0					
ANR	804809	CompoundStatement		209:0:4849:5003	804807	0					
ANR	804810	IfStatement	if ( d -> filterSkipPager != filter )		804807	0					
ANR	804811	Condition	d -> filterSkipPager != filter	210:8:4859:4886	804807	0	True				
ANR	804812	EqualityExpression	d -> filterSkipPager != filter		804807	0		!=			
ANR	804813	PtrMemberAccess	d -> filterSkipPager		804807	0					
ANR	804814	Identifier	d		804807	0					
ANR	804815	Identifier	filterSkipPager		804807	1					
ANR	804816	Identifier	filter		804807	1					
ANR	804817	CompoundStatement		7:8:116:145	804807	1					
ANR	804818	ExpressionStatement	d -> filterSkipPager = filter	211:8:4899:4926	804807	0	True				
ANR	804819	AssignmentExpression	d -> filterSkipPager = filter		804807	0		=			
ANR	804820	PtrMemberAccess	d -> filterSkipPager		804807	0					
ANR	804821	Identifier	d		804807	0					
ANR	804822	Identifier	filterSkipPager		804807	1					
ANR	804823	Identifier	filter		804807	1					
ANR	804824	ExpressionStatement	invalidateFilter ( )	213:8:4937:4955	804807	1	True				
ANR	804825	CallExpression	invalidateFilter ( )		804807	0					
ANR	804826	Callee	invalidateFilter		804807	0					
ANR	804827	Identifier	invalidateFilter		804807	0					
ANR	804828	ArgumentList			804807	1					
ANR	804829	IdentifierDeclStatement	emit filterSkipPagerChanged ( ) ;	215:8:4966:4995	804807	2	True				
ANR	804830	IdentifierDecl	filterSkipPagerChanged ( )		804807	0					
ANR	804831	IdentifierDeclType	emit		804807	0					
ANR	804832	Identifier	filterSkipPagerChanged		804807	1					
ANR	804833	ReturnType	void		804807	1					
ANR	804834	Identifier	TaskFilterProxyModel :: setFilterSkipPager		804807	2					
ANR	804835	ParameterList	bool filter		804807	3					
ANR	804836	Parameter	bool filter	208:46:4836:4846	804807	0	True				
ANR	804837	ParameterType	bool		804807	0					
ANR	804838	Identifier	filter		804807	1					
ANR	804839	CFGEntryNode	ENTRY		804807		True				
ANR	804840	CFGExitNode	EXIT		804807		True				
ANR	804841	Symbol	filter		804807						
ANR	804842	Symbol	d		804807						
ANR	804843	Symbol	filterSkipPagerChanged		804807						
ANR	804844	Symbol	d -> filterSkipPager		804807						
ANR	804845	Symbol	* d		804807						
ANR	804846	Function	TaskFilterProxyModel :: demandingAttentionSkipsFilters	219:0:5006:5120							
ANR	804847	FunctionDef	TaskFilterProxyModel :: demandingAttentionSkipsFilters ()		804846	0					
ANR	804848	CompoundStatement		220:0:5072:5120	804846	0					
ANR	804849	ReturnStatement	return d -> demandingAttentionSkipsFilters ;	221:4:5078:5118	804846	0	True				
ANR	804850	PtrMemberAccess	d -> demandingAttentionSkipsFilters		804846	0					
ANR	804851	Identifier	d		804846	0					
ANR	804852	Identifier	demandingAttentionSkipsFilters		804846	1					
ANR	804853	ReturnType	bool		804846	1					
ANR	804854	Identifier	TaskFilterProxyModel :: demandingAttentionSkipsFilters		804846	2					
ANR	804855	ParameterList			804846	3					
ANR	804856	CFGEntryNode	ENTRY		804846		True				
ANR	804857	CFGExitNode	EXIT		804846		True				
ANR	804858	Symbol	d -> demandingAttentionSkipsFilters		804846						
ANR	804859	Symbol	d		804846						
ANR	804860	Symbol	* d		804846						
ANR	804861	Function	TaskFilterProxyModel :: setDemandingAttentionSkipsFilters	224:0:5123:5390							
ANR	804862	FunctionDef	TaskFilterProxyModel :: setDemandingAttentionSkipsFilters (bool skip)		804861	0					
ANR	804863	CompoundStatement		225:0:5195:5390	804861	0					
ANR	804864	IfStatement	if ( d -> demandingAttentionSkipsFilters != skip )		804861	0					
ANR	804865	Condition	d -> demandingAttentionSkipsFilters != skip	226:8:5205:5245	804861	0	True				
ANR	804866	EqualityExpression	d -> demandingAttentionSkipsFilters != skip		804861	0		!=			
ANR	804867	PtrMemberAccess	d -> demandingAttentionSkipsFilters		804861	0					
ANR	804868	Identifier	d		804861	0					
ANR	804869	Identifier	demandingAttentionSkipsFilters		804861	1					
ANR	804870	Identifier	skip		804861	1					
ANR	804871	CompoundStatement		7:8:142:186	804861	1					
ANR	804872	ExpressionStatement	d -> demandingAttentionSkipsFilters = skip	227:8:5258:5298	804861	0	True				
ANR	804873	AssignmentExpression	d -> demandingAttentionSkipsFilters = skip		804861	0		=			
ANR	804874	PtrMemberAccess	d -> demandingAttentionSkipsFilters		804861	0					
ANR	804875	Identifier	d		804861	0					
ANR	804876	Identifier	demandingAttentionSkipsFilters		804861	1					
ANR	804877	Identifier	skip		804861	1					
ANR	804878	ExpressionStatement	invalidateFilter ( )	229:8:5309:5327	804861	1	True				
ANR	804879	CallExpression	invalidateFilter ( )		804861	0					
ANR	804880	Callee	invalidateFilter		804861	0					
ANR	804881	Identifier	invalidateFilter		804861	0					
ANR	804882	ArgumentList			804861	1					
ANR	804883	IdentifierDeclStatement	emit demandingAttentionSkipsFiltersChanged ( ) ;	231:8:5338:5382	804861	2	True				
ANR	804884	IdentifierDecl	demandingAttentionSkipsFiltersChanged ( )		804861	0					
ANR	804885	IdentifierDeclType	emit		804861	0					
ANR	804886	Identifier	demandingAttentionSkipsFiltersChanged		804861	1					
ANR	804887	ReturnType	void		804861	1					
ANR	804888	Identifier	TaskFilterProxyModel :: setDemandingAttentionSkipsFilters		804861	2					
ANR	804889	ParameterList	bool skip		804861	3					
ANR	804890	Parameter	bool skip	224:61:5184:5192	804861	0	True				
ANR	804891	ParameterType	bool		804861	0					
ANR	804892	Identifier	skip		804861	1					
ANR	804893	CFGEntryNode	ENTRY		804861		True				
ANR	804894	CFGExitNode	EXIT		804861		True				
ANR	804895	Symbol	d -> demandingAttentionSkipsFilters		804861						
ANR	804896	Symbol	d		804861						
ANR	804897	Symbol	skip		804861						
ANR	804898	Symbol	* d		804861						
ANR	804899	Symbol	demandingAttentionSkipsFiltersChanged		804861						
ANR	804900	Function	TaskFilterProxyModel :: mapIfaceToSource	235:0:5393:5509							
ANR	804901	FunctionDef	TaskFilterProxyModel :: mapIfaceToSource (const QModelIndex & index)		804900	0					
ANR	804902	CompoundStatement		236:0:5476:5509	804900	0					
ANR	804903	ReturnStatement	return mapToSource ( index ) ;	237:4:5482:5507	804900	0	True				
ANR	804904	CallExpression	mapToSource ( index )		804900	0					
ANR	804905	Callee	mapToSource		804900	0					
ANR	804906	Identifier	mapToSource		804900	0					
ANR	804907	ArgumentList	index		804900	1					
ANR	804908	Argument	index		804900	0					
ANR	804909	Identifier	index		804900	0					
ANR	804910	ReturnType	QModelIndex		804900	1					
ANR	804911	Identifier	TaskFilterProxyModel :: mapIfaceToSource		804900	2					
ANR	804912	ParameterList	const QModelIndex & index		804900	3					
ANR	804913	Parameter	const QModelIndex & index	235:51:5444:5467	804900	0	True				
ANR	804914	ParameterType	const QModelIndex &		804900	0					
ANR	804915	Identifier	index		804900	1					
ANR	804916	CFGEntryNode	ENTRY		804900		True				
ANR	804917	CFGExitNode	EXIT		804900		True				
ANR	804918	Symbol	mapToSource		804900						
ANR	804919	Symbol	index		804900						
ANR	804920	Function	TaskFilterProxyModel :: filterAcceptsRow	240:0:5512:7834							
ANR	804921	FunctionDef	"TaskFilterProxyModel :: filterAcceptsRow (int sourceRow , const QModelIndex & sourceParent)"		804920	0					
ANR	804922	CompoundStatement		241:0:5610:7834	804920	0					
ANR	804923	Statement	Q_UNUSED	242:4:5616:5623	804920	0	True				
ANR	804924	Statement	(	242:12:5624:5624	804920	1	True				
ANR	804925	Statement	sourceParent	242:13:5625:5636	804920	2	True				
ANR	804926	Statement	)	242:25:5637:5637	804920	3	True				
ANR	804927	IdentifierDeclStatement	"const QModelIndex & sourceIdx = sourceModel ( ) -> index ( sourceRow , 0 ) ;"	244:4:5644:5709	804920	4	True				
ANR	804928	IdentifierDecl	"& sourceIdx = sourceModel ( ) -> index ( sourceRow , 0 )"		804920	0					
ANR	804929	IdentifierDeclType	const QModelIndex &		804920	0					
ANR	804930	Identifier	sourceIdx		804920	1					
ANR	804931	AssignmentExpression	"& sourceIdx = sourceModel ( ) -> index ( sourceRow , 0 )"		804920	2		=			
ANR	804932	Identifier	sourceIdx		804920	0					
ANR	804933	CallExpression	"sourceModel ( ) -> index ( sourceRow , 0 )"		804920	1					
ANR	804934	Callee	sourceModel ( ) -> index		804920	0					
ANR	804935	PtrMemberAccess	sourceModel ( ) -> index		804920	0					
ANR	804936	CallExpression	sourceModel ( )		804920	0					
ANR	804937	Callee	sourceModel		804920	0					
ANR	804938	Identifier	sourceModel		804920	0					
ANR	804939	ArgumentList			804920	1					
ANR	804940	Identifier	index		804920	1					
ANR	804941	ArgumentList	sourceRow		804920	1					
ANR	804942	Argument	sourceRow		804920	0					
ANR	804943	Identifier	sourceRow		804920	0					
ANR	804944	Argument	0		804920	1					
ANR	804945	PrimaryExpression	0		804920	0					
ANR	804946	IfStatement	if ( d -> filterSkipTaskbar && sourceIdx . data ( AbstractTasksModel :: SkipTaskbar ) . toBool ( ) )		804920	5					
ANR	804947	Condition	d -> filterSkipTaskbar && sourceIdx . data ( AbstractTasksModel :: SkipTaskbar ) . toBool ( )	247:8:5782:5861	804920	0	True				
ANR	804948	AndExpression	d -> filterSkipTaskbar && sourceIdx . data ( AbstractTasksModel :: SkipTaskbar ) . toBool ( )		804920	0		&&			
ANR	804949	PtrMemberAccess	d -> filterSkipTaskbar		804920	0					
ANR	804950	Identifier	d		804920	0					
ANR	804951	Identifier	filterSkipTaskbar		804920	1					
ANR	804952	CallExpression	sourceIdx . data ( AbstractTasksModel :: SkipTaskbar ) . toBool ( )		804920	1					
ANR	804953	Callee	sourceIdx . data ( AbstractTasksModel :: SkipTaskbar ) . toBool		804920	0					
ANR	804954	MemberAccess	sourceIdx . data ( AbstractTasksModel :: SkipTaskbar ) . toBool		804920	0					
ANR	804955	CallExpression	sourceIdx . data ( AbstractTasksModel :: SkipTaskbar )		804920	0					
ANR	804956	Callee	sourceIdx . data		804920	0					
ANR	804957	MemberAccess	sourceIdx . data		804920	0					
ANR	804958	Identifier	sourceIdx		804920	0					
ANR	804959	Identifier	data		804920	1					
ANR	804960	ArgumentList	AbstractTasksModel :: SkipTaskbar		804920	1					
ANR	804961	Argument	AbstractTasksModel :: SkipTaskbar		804920	0					
ANR	804962	Identifier	AbstractTasksModel :: SkipTaskbar		804920	0					
ANR	804963	Identifier	toBool		804920	1					
ANR	804964	ArgumentList			804920	1					
ANR	804965	CompoundStatement		7:90:253:253	804920	1					
ANR	804966	ReturnStatement	return false ;	248:8:5874:5886	804920	0	True				
ANR	804967	Identifier	false		804920	0					
ANR	804968	IfStatement	if ( d -> filterSkipPager && sourceIdx . data ( AbstractTasksModel :: SkipPager ) . toBool ( ) )		804920	6					
ANR	804969	Condition	d -> filterSkipPager && sourceIdx . data ( AbstractTasksModel :: SkipPager ) . toBool ( )	252:8:5962:6037	804920	0	True				
ANR	804970	AndExpression	d -> filterSkipPager && sourceIdx . data ( AbstractTasksModel :: SkipPager ) . toBool ( )		804920	0		&&			
ANR	804971	PtrMemberAccess	d -> filterSkipPager		804920	0					
ANR	804972	Identifier	d		804920	0					
ANR	804973	Identifier	filterSkipPager		804920	1					
ANR	804974	CallExpression	sourceIdx . data ( AbstractTasksModel :: SkipPager ) . toBool ( )		804920	1					
ANR	804975	Callee	sourceIdx . data ( AbstractTasksModel :: SkipPager ) . toBool		804920	0					
ANR	804976	MemberAccess	sourceIdx . data ( AbstractTasksModel :: SkipPager ) . toBool		804920	0					
ANR	804977	CallExpression	sourceIdx . data ( AbstractTasksModel :: SkipPager )		804920	0					
ANR	804978	Callee	sourceIdx . data		804920	0					
ANR	804979	MemberAccess	sourceIdx . data		804920	0					
ANR	804980	Identifier	sourceIdx		804920	0					
ANR	804981	Identifier	data		804920	1					
ANR	804982	ArgumentList	AbstractTasksModel :: SkipPager		804920	1					
ANR	804983	Argument	AbstractTasksModel :: SkipPager		804920	0					
ANR	804984	Identifier	AbstractTasksModel :: SkipPager		804920	0					
ANR	804985	Identifier	toBool		804920	1					
ANR	804986	ArgumentList			804920	1					
ANR	804987	CompoundStatement		12:86:429:429	804920	1					
ANR	804988	ReturnStatement	return false ;	253:8:6050:6062	804920	0	True				
ANR	804989	Identifier	false		804920	0					
ANR	804990	IfStatement	if ( d -> filterByVirtualDesktop && d -> virtualDesktop != 0 )		804920	7					
ANR	804991	Condition	d -> filterByVirtualDesktop && d -> virtualDesktop != 0	257:8:6113:6163	804920	0	True				
ANR	804992	AndExpression	d -> filterByVirtualDesktop && d -> virtualDesktop != 0		804920	0		&&			
ANR	804993	PtrMemberAccess	d -> filterByVirtualDesktop		804920	0					
ANR	804994	Identifier	d		804920	0					
ANR	804995	Identifier	filterByVirtualDesktop		804920	1					
ANR	804996	EqualityExpression	d -> virtualDesktop != 0		804920	1		!=			
ANR	804997	PtrMemberAccess	d -> virtualDesktop		804920	0					
ANR	804998	Identifier	d		804920	0					
ANR	804999	Identifier	virtualDesktop		804920	1					
ANR	805000	PrimaryExpression	0		804920	1					
ANR	805001	CompoundStatement		17:61:555:555	804920	1					
ANR	805002	IfStatement	if ( ! sourceIdx . data ( AbstractTasksModel :: IsOnAllVirtualDesktops ) . toBool ( ) && ( ! d -> demandingAttentionSkipsFilters || ! sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( ) ) )		804920	0					
ANR	805003	Condition	! sourceIdx . data ( AbstractTasksModel :: IsOnAllVirtualDesktops ) . toBool ( ) && ( ! d -> demandingAttentionSkipsFilters || ! sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( ) )	258:12:6180:6369	804920	0	True				
ANR	805004	AndExpression	! sourceIdx . data ( AbstractTasksModel :: IsOnAllVirtualDesktops ) . toBool ( ) && ( ! d -> demandingAttentionSkipsFilters || ! sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( ) )		804920	0		&&			
ANR	805005	UnaryOperationExpression	! sourceIdx . data ( AbstractTasksModel :: IsOnAllVirtualDesktops ) . toBool ( )		804920	0					
ANR	805006	UnaryOperator	!		804920	0					
ANR	805007	CallExpression	sourceIdx . data ( AbstractTasksModel :: IsOnAllVirtualDesktops ) . toBool ( )		804920	1					
ANR	805008	Callee	sourceIdx . data ( AbstractTasksModel :: IsOnAllVirtualDesktops ) . toBool		804920	0					
ANR	805009	MemberAccess	sourceIdx . data ( AbstractTasksModel :: IsOnAllVirtualDesktops ) . toBool		804920	0					
ANR	805010	CallExpression	sourceIdx . data ( AbstractTasksModel :: IsOnAllVirtualDesktops )		804920	0					
ANR	805011	Callee	sourceIdx . data		804920	0					
ANR	805012	MemberAccess	sourceIdx . data		804920	0					
ANR	805013	Identifier	sourceIdx		804920	0					
ANR	805014	Identifier	data		804920	1					
ANR	805015	ArgumentList	AbstractTasksModel :: IsOnAllVirtualDesktops		804920	1					
ANR	805016	Argument	AbstractTasksModel :: IsOnAllVirtualDesktops		804920	0					
ANR	805017	Identifier	AbstractTasksModel :: IsOnAllVirtualDesktops		804920	0					
ANR	805018	Identifier	toBool		804920	1					
ANR	805019	ArgumentList			804920	1					
ANR	805020	OrExpression	! d -> demandingAttentionSkipsFilters || ! sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( )		804920	1		||			
ANR	805021	UnaryOperationExpression	! d -> demandingAttentionSkipsFilters		804920	0					
ANR	805022	UnaryOperator	!		804920	0					
ANR	805023	PtrMemberAccess	d -> demandingAttentionSkipsFilters		804920	1					
ANR	805024	Identifier	d		804920	0					
ANR	805025	Identifier	demandingAttentionSkipsFilters		804920	1					
ANR	805026	UnaryOperationExpression	! sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( )		804920	1					
ANR	805027	UnaryOperator	!		804920	0					
ANR	805028	CallExpression	sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( )		804920	1					
ANR	805029	Callee	sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool		804920	0					
ANR	805030	MemberAccess	sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool		804920	0					
ANR	805031	CallExpression	sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention )		804920	0					
ANR	805032	Callee	sourceIdx . data		804920	0					
ANR	805033	MemberAccess	sourceIdx . data		804920	0					
ANR	805034	Identifier	sourceIdx		804920	0					
ANR	805035	Identifier	data		804920	1					
ANR	805036	ArgumentList	AbstractTasksModel :: IsDemandingAttention		804920	1					
ANR	805037	Argument	AbstractTasksModel :: IsDemandingAttention		804920	0					
ANR	805038	Identifier	AbstractTasksModel :: IsDemandingAttention		804920	0					
ANR	805039	Identifier	toBool		804920	1					
ANR	805040	ArgumentList			804920	1					
ANR	805041	CompoundStatement		20:12:775:858	804920	1					
ANR	805042	IdentifierDeclStatement	const QVariant & virtualDesktop = sourceIdx . data ( AbstractTasksModel :: VirtualDesktop ) ;	260:12:6386:6469	804920	0	True				
ANR	805043	IdentifierDecl	& virtualDesktop = sourceIdx . data ( AbstractTasksModel :: VirtualDesktop )		804920	0					
ANR	805044	IdentifierDeclType	const QVariant &		804920	0					
ANR	805045	Identifier	virtualDesktop		804920	1					
ANR	805046	AssignmentExpression	& virtualDesktop = sourceIdx . data ( AbstractTasksModel :: VirtualDesktop )		804920	2		=			
ANR	805047	Identifier	virtualDesktop		804920	0					
ANR	805048	CallExpression	sourceIdx . data ( AbstractTasksModel :: VirtualDesktop )		804920	1					
ANR	805049	Callee	sourceIdx . data		804920	0					
ANR	805050	MemberAccess	sourceIdx . data		804920	0					
ANR	805051	Identifier	sourceIdx		804920	0					
ANR	805052	Identifier	data		804920	1					
ANR	805053	ArgumentList	AbstractTasksModel :: VirtualDesktop		804920	1					
ANR	805054	Argument	AbstractTasksModel :: VirtualDesktop		804920	0					
ANR	805055	Identifier	AbstractTasksModel :: VirtualDesktop		804920	0					
ANR	805056	IfStatement	if ( ! virtualDesktop . isNull ( ) )		804920	1					
ANR	805057	Condition	! virtualDesktop . isNull ( )	262:16:6488:6511	804920	0	True				
ANR	805058	UnaryOperationExpression	! virtualDesktop . isNull ( )		804920	0					
ANR	805059	UnaryOperator	!		804920	0					
ANR	805060	CallExpression	virtualDesktop . isNull ( )		804920	1					
ANR	805061	Callee	virtualDesktop . isNull		804920	0					
ANR	805062	MemberAccess	virtualDesktop . isNull		804920	0					
ANR	805063	Identifier	virtualDesktop		804920	0					
ANR	805064	Identifier	isNull		804920	1					
ANR	805065	ArgumentList			804920	1					
ANR	805066	CompoundStatement		24:16:954:995	804920	1					
ANR	805067	IdentifierDeclStatement	bool ok = false ;	263:16:6532:6547	804920	0	True				
ANR	805068	IdentifierDecl	ok = false		804920	0					
ANR	805069	IdentifierDeclType	bool		804920	0					
ANR	805070	Identifier	ok		804920	1					
ANR	805071	AssignmentExpression	ok = false		804920	2		=			
ANR	805072	Identifier	false		804920	0					
ANR	805073	Identifier	false		804920	1					
ANR	805074	IdentifierDeclStatement	const uint i = virtualDesktop . toUInt ( & ok ) ;	264:16:6565:6606	804920	1	True				
ANR	805075	IdentifierDecl	i = virtualDesktop . toUInt ( & ok )		804920	0					
ANR	805076	IdentifierDeclType	const uint		804920	0					
ANR	805077	Identifier	i		804920	1					
ANR	805078	AssignmentExpression	i = virtualDesktop . toUInt ( & ok )		804920	2		=			
ANR	805079	Identifier	i		804920	0					
ANR	805080	CallExpression	virtualDesktop . toUInt ( & ok )		804920	1					
ANR	805081	Callee	virtualDesktop . toUInt		804920	0					
ANR	805082	MemberAccess	virtualDesktop . toUInt		804920	0					
ANR	805083	Identifier	virtualDesktop		804920	0					
ANR	805084	Identifier	toUInt		804920	1					
ANR	805085	ArgumentList	& ok		804920	1					
ANR	805086	Argument	& ok		804920	0					
ANR	805087	UnaryOperationExpression	& ok		804920	0					
ANR	805088	UnaryOperator	&		804920	0					
ANR	805089	Identifier	ok		804920	1					
ANR	805090	IfStatement	if ( ok && i != d -> virtualDesktop )		804920	2					
ANR	805091	Condition	ok && i != d -> virtualDesktop	266:20:6629:6656	804920	0	True				
ANR	805092	AndExpression	ok && i != d -> virtualDesktop		804920	0		&&			
ANR	805093	Identifier	ok		804920	0					
ANR	805094	EqualityExpression	i != d -> virtualDesktop		804920	1		!=			
ANR	805095	Identifier	i		804920	0					
ANR	805096	PtrMemberAccess	d -> virtualDesktop		804920	1					
ANR	805097	Identifier	d		804920	0					
ANR	805098	Identifier	virtualDesktop		804920	1					
ANR	805099	CompoundStatement		26:50:1048:1048	804920	1					
ANR	805100	ReturnStatement	return false ;	267:20:6681:6693	804920	0	True				
ANR	805101	Identifier	false		804920	0					
ANR	805102	IfStatement	if ( d -> filterByScreen && d -> screenGeometry . isValid ( ) )		804920	8					
ANR	805103	Condition	d -> filterByScreen && d -> screenGeometry . isValid ( )	274:8:6777:6824	804920	0	True				
ANR	805104	AndExpression	d -> filterByScreen && d -> screenGeometry . isValid ( )		804920	0		&&			
ANR	805105	PtrMemberAccess	d -> filterByScreen		804920	0					
ANR	805106	Identifier	d		804920	0					
ANR	805107	Identifier	filterByScreen		804920	1					
ANR	805108	CallExpression	d -> screenGeometry . isValid ( )		804920	1					
ANR	805109	Callee	d -> screenGeometry . isValid		804920	0					
ANR	805110	MemberAccess	d -> screenGeometry . isValid		804920	0					
ANR	805111	PtrMemberAccess	d -> screenGeometry		804920	0					
ANR	805112	Identifier	d		804920	0					
ANR	805113	Identifier	screenGeometry		804920	1					
ANR	805114	Identifier	isValid		804920	1					
ANR	805115	ArgumentList			804920	1					
ANR	805116	CompoundStatement		35:8:1226:1315	804920	1					
ANR	805117	IdentifierDeclStatement	const QRect & screenGeometry = sourceIdx . data ( AbstractTasksModel :: ScreenGeometry ) . toRect ( ) ;	275:8:6837:6926	804920	0	True				
ANR	805118	IdentifierDecl	& screenGeometry = sourceIdx . data ( AbstractTasksModel :: ScreenGeometry ) . toRect ( )		804920	0					
ANR	805119	IdentifierDeclType	const QRect &		804920	0					
ANR	805120	Identifier	screenGeometry		804920	1					
ANR	805121	AssignmentExpression	& screenGeometry = sourceIdx . data ( AbstractTasksModel :: ScreenGeometry ) . toRect ( )		804920	2		=			
ANR	805122	Identifier	screenGeometry		804920	0					
ANR	805123	CallExpression	sourceIdx . data ( AbstractTasksModel :: ScreenGeometry ) . toRect ( )		804920	1					
ANR	805124	Callee	sourceIdx . data ( AbstractTasksModel :: ScreenGeometry ) . toRect		804920	0					
ANR	805125	MemberAccess	sourceIdx . data ( AbstractTasksModel :: ScreenGeometry ) . toRect		804920	0					
ANR	805126	CallExpression	sourceIdx . data ( AbstractTasksModel :: ScreenGeometry )		804920	0					
ANR	805127	Callee	sourceIdx . data		804920	0					
ANR	805128	MemberAccess	sourceIdx . data		804920	0					
ANR	805129	Identifier	sourceIdx		804920	0					
ANR	805130	Identifier	data		804920	1					
ANR	805131	ArgumentList	AbstractTasksModel :: ScreenGeometry		804920	1					
ANR	805132	Argument	AbstractTasksModel :: ScreenGeometry		804920	0					
ANR	805133	Identifier	AbstractTasksModel :: ScreenGeometry		804920	0					
ANR	805134	Identifier	toRect		804920	1					
ANR	805135	ArgumentList			804920	1					
ANR	805136	IfStatement	if ( screenGeometry . isValid ( ) && screenGeometry != d -> screenGeometry )		804920	1					
ANR	805137	Condition	screenGeometry . isValid ( ) && screenGeometry != d -> screenGeometry	277:12:6941:7003	804920	0	True				
ANR	805138	AndExpression	screenGeometry . isValid ( ) && screenGeometry != d -> screenGeometry		804920	0		&&			
ANR	805139	CallExpression	screenGeometry . isValid ( )		804920	0					
ANR	805140	Callee	screenGeometry . isValid		804920	0					
ANR	805141	MemberAccess	screenGeometry . isValid		804920	0					
ANR	805142	Identifier	screenGeometry		804920	0					
ANR	805143	Identifier	isValid		804920	1					
ANR	805144	ArgumentList			804920	1					
ANR	805145	EqualityExpression	screenGeometry != d -> screenGeometry		804920	1		!=			
ANR	805146	Identifier	screenGeometry		804920	0					
ANR	805147	PtrMemberAccess	d -> screenGeometry		804920	1					
ANR	805148	Identifier	d		804920	0					
ANR	805149	Identifier	screenGeometry		804920	1					
ANR	805150	CompoundStatement		37:77:1395:1395	804920	1					
ANR	805151	ReturnStatement	return false ;	278:12:7020:7032	804920	0	True				
ANR	805152	Identifier	false		804920	0					
ANR	805153	IfStatement	if ( d -> filterByActivity && ! d -> activity . isEmpty ( ) )		804920	9					
ANR	805154	Condition	d -> filterByActivity && ! d -> activity . isEmpty ( )	283:8:7086:7130	804920	0	True				
ANR	805155	AndExpression	d -> filterByActivity && ! d -> activity . isEmpty ( )		804920	0		&&			
ANR	805156	PtrMemberAccess	d -> filterByActivity		804920	0					
ANR	805157	Identifier	d		804920	0					
ANR	805158	Identifier	filterByActivity		804920	1					
ANR	805159	UnaryOperationExpression	! d -> activity . isEmpty ( )		804920	1					
ANR	805160	UnaryOperator	!		804920	0					
ANR	805161	CallExpression	d -> activity . isEmpty ( )		804920	1					
ANR	805162	Callee	d -> activity . isEmpty		804920	0					
ANR	805163	MemberAccess	d -> activity . isEmpty		804920	0					
ANR	805164	PtrMemberAccess	d -> activity		804920	0					
ANR	805165	Identifier	d		804920	0					
ANR	805166	Identifier	activity		804920	1					
ANR	805167	Identifier	isEmpty		804920	1					
ANR	805168	ArgumentList			804920	1					
ANR	805169	CompoundStatement		43:55:1522:1522	804920	1					
ANR	805170	IfStatement	if ( ! d -> demandingAttentionSkipsFilters || ! sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( ) )		804920	0					
ANR	805171	Condition	! d -> demandingAttentionSkipsFilters || ! sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( )	284:12:7147:7250	804920	0	True				
ANR	805172	OrExpression	! d -> demandingAttentionSkipsFilters || ! sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( )		804920	0		||			
ANR	805173	UnaryOperationExpression	! d -> demandingAttentionSkipsFilters		804920	0					
ANR	805174	UnaryOperator	!		804920	0					
ANR	805175	PtrMemberAccess	d -> demandingAttentionSkipsFilters		804920	1					
ANR	805176	Identifier	d		804920	0					
ANR	805177	Identifier	demandingAttentionSkipsFilters		804920	1					
ANR	805178	UnaryOperationExpression	! sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( )		804920	1					
ANR	805179	UnaryOperator	!		804920	0					
ANR	805180	CallExpression	sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool ( )		804920	1					
ANR	805181	Callee	sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool		804920	0					
ANR	805182	MemberAccess	sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool		804920	0					
ANR	805183	CallExpression	sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention )		804920	0					
ANR	805184	Callee	sourceIdx . data		804920	0					
ANR	805185	MemberAccess	sourceIdx . data		804920	0					
ANR	805186	Identifier	sourceIdx		804920	0					
ANR	805187	Identifier	data		804920	1					
ANR	805188	ArgumentList	AbstractTasksModel :: IsDemandingAttention		804920	1					
ANR	805189	Argument	AbstractTasksModel :: IsDemandingAttention		804920	0					
ANR	805190	Identifier	AbstractTasksModel :: IsDemandingAttention		804920	0					
ANR	805191	Identifier	toBool		804920	1					
ANR	805192	ArgumentList			804920	1					
ANR	805193	CompoundStatement		45:12:1656:1731	804920	1					
ANR	805194	IdentifierDeclStatement	const QVariant & activities = sourceIdx . data ( AbstractTasksModel :: Activities ) ;	285:12:7267:7342	804920	0	True				
ANR	805195	IdentifierDecl	& activities = sourceIdx . data ( AbstractTasksModel :: Activities )		804920	0					
ANR	805196	IdentifierDeclType	const QVariant &		804920	0					
ANR	805197	Identifier	activities		804920	1					
ANR	805198	AssignmentExpression	& activities = sourceIdx . data ( AbstractTasksModel :: Activities )		804920	2		=			
ANR	805199	Identifier	activities		804920	0					
ANR	805200	CallExpression	sourceIdx . data ( AbstractTasksModel :: Activities )		804920	1					
ANR	805201	Callee	sourceIdx . data		804920	0					
ANR	805202	MemberAccess	sourceIdx . data		804920	0					
ANR	805203	Identifier	sourceIdx		804920	0					
ANR	805204	Identifier	data		804920	1					
ANR	805205	ArgumentList	AbstractTasksModel :: Activities		804920	1					
ANR	805206	Argument	AbstractTasksModel :: Activities		804920	0					
ANR	805207	Identifier	AbstractTasksModel :: Activities		804920	0					
ANR	805208	IfStatement	if ( ! activities . isNull ( ) )		804920	1					
ANR	805209	Condition	! activities . isNull ( )	287:16:7361:7380	804920	0	True				
ANR	805210	UnaryOperationExpression	! activities . isNull ( )		804920	0					
ANR	805211	UnaryOperator	!		804920	0					
ANR	805212	CallExpression	activities . isNull ( )		804920	1					
ANR	805213	Callee	activities . isNull		804920	0					
ANR	805214	MemberAccess	activities . isNull		804920	0					
ANR	805215	Identifier	activities		804920	0					
ANR	805216	Identifier	isNull		804920	1					
ANR	805217	ArgumentList			804920	1					
ANR	805218	CompoundStatement		48:16:1790:1837	804920	1					
ANR	805219	IdentifierDeclStatement	const QStringList l = activities . toStringList ( ) ;	288:16:7401:7448	804920	0	True				
ANR	805220	IdentifierDecl	l = activities . toStringList ( )		804920	0					
ANR	805221	IdentifierDeclType	const QStringList		804920	0					
ANR	805222	Identifier	l		804920	1					
ANR	805223	AssignmentExpression	l = activities . toStringList ( )		804920	2		=			
ANR	805224	Identifier	l		804920	0					
ANR	805225	CallExpression	activities . toStringList ( )		804920	1					
ANR	805226	Callee	activities . toStringList		804920	0					
ANR	805227	MemberAccess	activities . toStringList		804920	0					
ANR	805228	Identifier	activities		804920	0					
ANR	805229	Identifier	toStringList		804920	1					
ANR	805230	ArgumentList			804920	1					
ANR	805231	IfStatement	if ( ! l . isEmpty ( ) && ! l . contains ( d -> activity ) )		804920	1					
ANR	805232	Condition	! l . isEmpty ( ) && ! l . contains ( d -> activity )	290:20:7471:7510	804920	0	True				
ANR	805233	AndExpression	! l . isEmpty ( ) && ! l . contains ( d -> activity )		804920	0		&&			
ANR	805234	UnaryOperationExpression	! l . isEmpty ( )		804920	0					
ANR	805235	UnaryOperator	!		804920	0					
ANR	805236	CallExpression	l . isEmpty ( )		804920	1					
ANR	805237	Callee	l . isEmpty		804920	0					
ANR	805238	MemberAccess	l . isEmpty		804920	0					
ANR	805239	Identifier	l		804920	0					
ANR	805240	Identifier	isEmpty		804920	1					
ANR	805241	ArgumentList			804920	1					
ANR	805242	UnaryOperationExpression	! l . contains ( d -> activity )		804920	1					
ANR	805243	UnaryOperator	!		804920	0					
ANR	805244	CallExpression	l . contains ( d -> activity )		804920	1					
ANR	805245	Callee	l . contains		804920	0					
ANR	805246	MemberAccess	l . contains		804920	0					
ANR	805247	Identifier	l		804920	0					
ANR	805248	Identifier	contains		804920	1					
ANR	805249	ArgumentList	d -> activity		804920	1					
ANR	805250	Argument	d -> activity		804920	0					
ANR	805251	PtrMemberAccess	d -> activity		804920	0					
ANR	805252	Identifier	d		804920	0					
ANR	805253	Identifier	activity		804920	1					
ANR	805254	CompoundStatement		50:62:1902:1902	804920	1					
ANR	805255	ReturnStatement	return false ;	291:20:7535:7547	804920	0	True				
ANR	805256	Identifier	false		804920	0					
ANR	805257	IfStatement	if ( d -> filterNotMinimized )		804920	10					
ANR	805258	Condition	d -> filterNotMinimized	298:8:7635:7655	804920	0	True				
ANR	805259	PtrMemberAccess	d -> filterNotMinimized		804920	0					
ANR	805260	Identifier	d		804920	0					
ANR	805261	Identifier	filterNotMinimized		804920	1					
ANR	805262	CompoundStatement		59:8:2057:2132	804920	1					
ANR	805263	IdentifierDeclStatement	bool isMinimized = sourceIdx . data ( AbstractTasksModel :: IsMinimized ) . toBool ( ) ;	299:8:7668:7743	804920	0	True				
ANR	805264	IdentifierDecl	isMinimized = sourceIdx . data ( AbstractTasksModel :: IsMinimized ) . toBool ( )		804920	0					
ANR	805265	IdentifierDeclType	bool		804920	0					
ANR	805266	Identifier	isMinimized		804920	1					
ANR	805267	AssignmentExpression	isMinimized = sourceIdx . data ( AbstractTasksModel :: IsMinimized ) . toBool ( )		804920	2		=			
ANR	805268	Identifier	isMinimized		804920	0					
ANR	805269	CallExpression	sourceIdx . data ( AbstractTasksModel :: IsMinimized ) . toBool ( )		804920	1					
ANR	805270	Callee	sourceIdx . data ( AbstractTasksModel :: IsMinimized ) . toBool		804920	0					
ANR	805271	MemberAccess	sourceIdx . data ( AbstractTasksModel :: IsMinimized ) . toBool		804920	0					
ANR	805272	CallExpression	sourceIdx . data ( AbstractTasksModel :: IsMinimized )		804920	0					
ANR	805273	Callee	sourceIdx . data		804920	0					
ANR	805274	MemberAccess	sourceIdx . data		804920	0					
ANR	805275	Identifier	sourceIdx		804920	0					
ANR	805276	Identifier	data		804920	1					
ANR	805277	ArgumentList	AbstractTasksModel :: IsMinimized		804920	1					
ANR	805278	Argument	AbstractTasksModel :: IsMinimized		804920	0					
ANR	805279	Identifier	AbstractTasksModel :: IsMinimized		804920	0					
ANR	805280	Identifier	toBool		804920	1					
ANR	805281	ArgumentList			804920	1					
ANR	805282	IfStatement	if ( ! isMinimized )		804920	1					
ANR	805283	Condition	! isMinimized	301:12:7758:7769	804920	0	True				
ANR	805284	UnaryOperationExpression	! isMinimized		804920	0					
ANR	805285	UnaryOperator	!		804920	0					
ANR	805286	Identifier	isMinimized		804920	1					
ANR	805287	CompoundStatement		61:26:2161:2161	804920	1					
ANR	805288	ReturnStatement	return false ;	302:12:7786:7798	804920	0	True				
ANR	805289	Identifier	false		804920	0					
ANR	805290	ReturnStatement	return true ;	306:4:7821:7832	804920	11	True				
ANR	805291	Identifier	true		804920	0					
ANR	805292	ReturnType	bool		804920	1					
ANR	805293	Identifier	TaskFilterProxyModel :: filterAcceptsRow		804920	2					
ANR	805294	ParameterList	"int sourceRow , const QModelIndex & sourceParent"		804920	3					
ANR	805295	Parameter	int sourceRow	240:44:5556:5568	804920	0	True				
ANR	805296	ParameterType	int		804920	0					
ANR	805297	Identifier	sourceRow		804920	1					
ANR	805298	Parameter	const QModelIndex & sourceParent	240:59:5571:5601	804920	1	True				
ANR	805299	ParameterType	const QModelIndex &		804920	0					
ANR	805300	Identifier	sourceParent		804920	1					
ANR	805301	CFGEntryNode	ENTRY		804920		True				
ANR	805302	CFGExitNode	EXIT		804920		True				
ANR	805303	Symbol	sourceIdx . data ( AbstractTasksModel :: ScreenGeometry ) . toRect		804920						
ANR	805304	Symbol	d -> virtualDesktop		804920						
ANR	805305	Symbol	sourceIdx . data ( AbstractTasksModel :: IsOnAllVirtualDesktops ) . toBool		804920						
ANR	805306	Symbol	& ok		804920						
ANR	805307	Symbol	AbstractTasksModel :: SkipPager		804920						
ANR	805308	Symbol	sourceIdx . data ( AbstractTasksModel :: IsDemandingAttention ) . toBool		804920						
ANR	805309	Symbol	sourceIdx . data ( AbstractTasksModel :: SkipPager ) . toBool		804920						
ANR	805310	Symbol	activities . isNull		804920						
ANR	805311	Symbol	d -> filterByActivity		804920						
ANR	805312	Symbol	d -> filterByVirtualDesktop		804920						
ANR	805313	Symbol	screenGeometry		804920						
ANR	805314	Symbol	screenGeometry . isValid		804920						
ANR	805315	Symbol	sourceIdx . data ( AbstractTasksModel :: SkipTaskbar ) . toBool		804920						
ANR	805316	Symbol	sourceModel ( ) -> index		804920						
ANR	805317	Symbol	sourceIdx . data		804920						
ANR	805318	Symbol	AbstractTasksModel :: Activities		804920						
ANR	805319	Symbol	d -> filterSkipPager		804920						
ANR	805320	Symbol	virtualDesktop		804920						
ANR	805321	Symbol	d -> screenGeometry . isValid		804920						
ANR	805322	Symbol	true		804920						
ANR	805323	Symbol	sourceModel		804920						
ANR	805324	Symbol	sourceIdx . data ( AbstractTasksModel :: IsMinimized ) . toBool		804920						
ANR	805325	Symbol	AbstractTasksModel :: IsMinimized		804920						
ANR	805326	Symbol	AbstractTasksModel :: IsOnAllVirtualDesktops		804920						
ANR	805327	Symbol	AbstractTasksModel :: IsDemandingAttention		804920						
ANR	805328	Symbol	virtualDesktop . toUInt		804920						
ANR	805329	Symbol	AbstractTasksModel :: VirtualDesktop		804920						
ANR	805330	Symbol	d -> demandingAttentionSkipsFilters		804920						
ANR	805331	Symbol	d -> filterSkipTaskbar		804920						
ANR	805332	Symbol	virtualDesktop . isNull		804920						
ANR	805333	Symbol	d -> activity		804920						
ANR	805334	Symbol	l . isEmpty		804920						
ANR	805335	Symbol	ok		804920						
ANR	805336	Symbol	sourceParent		804920						
ANR	805337	Symbol	d -> screenGeometry		804920						
ANR	805338	Symbol	sourceIdx		804920						
ANR	805339	Symbol	activities . toStringList		804920						
ANR	805340	Symbol	d		804920						
ANR	805341	Symbol	false		804920						
ANR	805342	Symbol	i		804920						
ANR	805343	Symbol	l		804920						
ANR	805344	Symbol	* d		804920						
ANR	805345	Symbol	* sourceModel		804920						
ANR	805346	Symbol	l . contains		804920						
ANR	805347	Symbol	AbstractTasksModel :: ScreenGeometry		804920						
ANR	805348	Symbol	d -> activity . isEmpty		804920						
ANR	805349	Symbol	activities		804920						
ANR	805350	Symbol	sourceRow		804920						
ANR	805351	Symbol	isMinimized		804920						
ANR	805352	Symbol	d -> filterByScreen		804920						
ANR	805353	Symbol	AbstractTasksModel :: SkipTaskbar		804920						
ANR	805354	Symbol	d -> filterNotMinimized		804920						
